What did we do? 
Contact RISC-V Foundation
Until that time, there was no official security response group – now there is one!
Contact SiFive
They were deeply involved in analyzing and working with the RISC-V Foundation to address the issue!
New CVE was allocated – CVE-2021-1104
Contact NVIDIA’s internal RISC-V HW team
They confirmed and fixed the issue internally
Sync with all involved parties for responsible disclosure
How to inform all the vendors (hundred+) about the issue(s)?
It can only be done through the RISC-V Foundation (with the SiFive help)
custom extension might fix that problems as well
71
HOW TO FIX MTVEC ISSUE?
72
HOW TO FIX MTVEC ISSUE?
The described problem is a chain of multiple problems… 
To exploit the bug, we need to perform Fault Injection
What are the effective Fault Injection protections?
DCLS (strong)
TCLS (even stronger!)
SW mitigation (complexity++)
Compiler mitigations
73
HOW TO FIX MTVEC ISSUE?
The described problem is a chain of multiple problems… 
To exploit the bug, we need to perform Fault Injection
What are the effective Fault Injection protections?
DCLS (strong)
TCLS (even stronger!)
SW mitigation (complexity++)
Compiler mitigations
74
HOW TO FIX MTVEC ISSUE?
The described problem is a chain of multiple problems… 
To exploit the bug, we need to perform Fault Injection
What are the effective Fault Injection protections?
DCLS (strong)
TCLS (even stronger!)
SW mitigation (complexity++)
Compiler mitigations
CPU_1
75
HOW TO FIX MTVEC ISSUE?
The described problem is a chain of multiple problems… 
To exploit the bug, we need to perform Fault Injection
What are the effective Fault Injection protections?
DCLS (strong)
TCLS (even stronger!)
SW mitigation (complexity++)
Compiler mitigations
Shadow
CPU
CPU_1
76
HOW TO FIX MTVEC ISSUE?
The described problem is a chain of multiple problems… 
To exploit the bug, we need to perform Fault Injection
What are the effective Fault Injection protections?
DCLS (strong)
TCLS (even stronger!)
SW mitigation (complexity++)
Compiler mitigations
Shadow
CPU
CPU_1
77
HOW TO FIX MTVEC ISSUE?
The described problem is a chain of multiple problems… 
To exploit the bug, we need to perform Fault Injection
What are the effective Fault Injection protections?
DCLS (strong)
TCLS (even stronger!)
SW mitigation (complexity++)
Compiler mitigations
Shadow
CPU
x = CPU_1(instruction_1)
y = Shadow_CPU(instruction_1)
if (x != y)
panic();
…
CPU_1
78
HOW TO FIX MTVEC ISSUE?
The described problem is a chain of multiple problems… 
To exploit the bug, we need to perform Fault Injection
What are the effective Fault Injection protections?
DCLS (strong)
TCLS (even stronger!)
SW mitigation (complexity++)
Compiler mitigations
79
HOW TO FIX MTVEC ISSUE?
The described problem is a chain of multiple problems… 
To exploit the bug, we need to perform Fault Injection
What are the effective Fault Injection protections?
DCLS (strong)
TCLS (even stronger!)
SW mitigation (complexity++)
Compiler mitigations
x = CPU_1(instruction_1)
y = Shadow_1_CPU(instruction_1)
z = Shadow_2_CPU(instruction_1)
if (x != y || x!=z || y!=z)
panic();
…
CPU_1
Shadow_1
CPU
Shadow_2
CPU
80
HOW TO FIX MTVEC ISSUE?
The described problem is a chain of multiple problems… 
To exploit the bug, we need to perform Fault Injection
What are the effective Fault Injection protections?
DCLS (strong)
TCLS (even stronger!)
SW mitigation (complexity++)
Compiler mitigations
81
HOW TO FIX MTVEC ISSUE?
The described problem is a chain of multiple problems… 
To exploit the bug, we need to perform Fault Injection
What are the effective Fault Injection protections?
DCLS (strong)
TCLS (even stronger!)
SW mitigation (complexity++)
Compiler mitigations
1. Init/Re-init to fail/error
2. Branch re-check
3. Redundant checks
4. Pre-scrub payload destination
5. Clear memory on auth fail
6. Random delay
7. Exception on error (instead of inf. loop)
8. Hamming distance
9. Loop counter checks
10.Default fail
11.More…
82
HOW TO FIX MTVEC ISSUE?
The described problem is a chain of multiple problems… 
To exploit the bug, we need to perform Fault Injection
What are the effective Fault Injection protections?
DCLS (strong)
TCLS (even stronger!)
SW mitigation (complexity++)
Compiler mitigations
1. Init/Re-init to fail/error
2. Branch re-check
3. Redundant checks
4. Pre-scrub payload destination
5. Clear memory on auth fail
6. Random delay
7. Exception on error (instead of inf. loop)
8. Hamming distance
9. Loop counter checks
10.Default fail
11.More…
Automatically 
applied by 
compiler
83
HOW TO FIX MTVEC ISSUE?
The described problem is a chain of multiple problems… 
To exploit the bug, we need to perform Fault Injection
What are the effective Fault Injection protections?
DCLS (strong)
TCLS (even stronger!)
SW mitigation (complexity++)
Compiler mitigations
84
HOW TO FIX MTVEC ISSUE?
The described problem is a chain of multiple problems… 
To exploit the bug, we need to perform Fault Injection
What are the effective Fault Injection protections?
DCLS (strong)
TCLS (even stronger!)
SW mitigation (complexity++)
Compiler mitigations
Design decision to address MTVEC weakness:
As soon as START_CPU signal arrives, pre-initialize MTVEC to point to halt instruction
Change ISA to at least WARN about the potential problems with the late MTVEC 
initialization
Introduce “double / triple” fault-like exception which halts the core (instead of infinitive 
exception loop):
E.g., if MEPC == MTVEC then panic()
85
HOW TO FIX MTVEC ISSUE?
The described problem is a chain of multiple problems… 
To exploit the bug, we need to perform Fault Injection
What are the effective Fault Injection protections?
DCLS (strong)
TCLS (even stronger!)
SW mitigation (complexity++)
Compiler mitigations
Design decision to address MTVEC weakness:
As soon as START_CPU signal arrives, pre-initialize MTVEC to point to halt instruction
Change ISA to at least WARN about the potential problems with the late MTVEC 
initialization
Introduce “double / triple” fault-like exception which halts the core (instead of infinitive 
exception loop):
E.g., if MEPC == MTVEC then panic()
What else can be done to harden RISC-V?
What about mitigation against the software attacks?
86
HARDENING RISC-V
Pointer Masking extension for RISC-V
Driven by Adam Zabrocki (NVIDIA), Martin Maas (Google), Lee Campbell (Google),
RISC-V TEE and J-Ext Task Groups
From the security perspective it allows to implement:
HWASAN
Pointer Authentication Codes (PAC)
HW Memory Sandboxing
Foundation for:
HW MTE
Protecting RISC-V CFI (WIP)
Protecting RISC-V Shadow Stack (WIP)
87
HARDENING RISC-V
Pointer Masking extension for RISC-V
Driven by Adam Zabrocki (NVIDIA), Martin Maas (Google), Lee Campbell (Google),
RISC-V TEE and J-Ext Task Groups
From the security perspective it allows to implement:
HWASAN
Pointer Authentication Codes (PAC)
HW Memory Sandboxing
Foundation for:
HW MTE
Protecting RISC-V CFI (WIP)
Protecting RISC-V Shadow Stack (WIP)
88
HARDENING RISC-V
Pointer Masking extension for RISC-V
Driven by Adam Zabrocki (NVIDIA), Martin Maas (Google), Lee Campbell (Google),
RISC-V TEE and J-Ext Task Groups
From the security perspective it allows to implement:
HWASAN
Pointer Authentication Codes (PAC)
HW Memory Sandboxing
Foundation for:
HW MTE
Protecting RISC-V CFI (WIP)
Protecting RISC-V Shadow Stack (WIP)
89
HARDENING RISC-V
Pointer Masking extension for RISC-V
Driven by Adam Zabrocki (NVIDIA), Martin Maas (Google), Lee Campbell (Google),
RISC-V TEE and J-Ext Task Groups
From the security perspective it allows to implement:
HWASAN
Pointer Authentication Codes (PAC)
HW Memory Sandboxing
Foundation for:
HW MTE
Protecting RISC-V CFI (WIP)
Protecting RISC-V Shadow Stack (WIP)
Portion of memory needed by 
the execution context
Secrets
Vuln
Stops the 
attack
Flat memory:
Pointer Masking isolation
90
HARDENING RISC-V
Pointer Masking extension for RISC-V
Driven by Adam Zabrocki (NVIDIA), Martin Maas (Google), Lee Campbell (Google),
RISC-V TEE and J-Ext Task Groups
From the security perspective it allows to implement:
HWASAN
Pointer Authentication Codes (PAC)
HW Memory Sandboxing
Foundation for:
HW MTE
Protecting RISC-V CFI (WIP)
Protecting RISC-V Shadow Stack (WIP)
Portion of memory needed by 
the execution context
Secrets
Vuln
Stops the 
attack
Flat memory:
Pointer Masking isolation
91
ACKNOWLEDGMENTS
 We would like to thank:
 NVIDIA:
 GPU System Software:
James Xu, Marko Mitic, Mateusz Kulikowski, RISC-V SW team
 HW team:
Joe Xie, Andy Ma, Jim Zhang, Dorin Yin, RISC-V HW team
 Product Security:
Alex Tereshkin, Shawn Richardson and PSIRT team
 SiFive
 RISC-V Foundation
92
SUMMARY
 The use of Type Safety languages and Formal Verification 
minimizes the attack surfaces for memory corruption 
issues, but it is not a silver bullet.
 There are CPU ISA bugs, and real-world attacks can 
combine physical attacks with software exploitation 
techniques.
 And the disclosure of ISA bugs is tough :-(
Adam 'pi3' Zabrocki
Twitter: @Adam_pi3
Alex Matrosov
Twitter: @matrosov