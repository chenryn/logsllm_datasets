Google Safe Browsing (Malware)
Norton Safe Web
Spamhaus (SBL,XBL,DBL)
ClearCloud DNS
DNS-BH Malware Domain Blocklist
Malware Domain List (MDL)
malc0de DNS Blackhole
Emerging Threats fwip rules
abuse.ch Malware Database (AMaDa)
Total Blacklisted
Total Endpoints
Strategy A
Strategy B
IPs Total Domains
Domains
53
95
5
11
80 N/A
47 N/A
7
20
2
2
281 N/A
226 N/A
86 N/A
101 N/A
0
15
5
11
1
3
80
70
3
N/A
6
N/A
32
2
40
2
15
353
36
391
661
942
534
325
106
47
22
281
101
16
83
6
34
427
1603
IPs Total
58
80
9
226
86
15
71
3
42
368
859
Table 3: New endpoints revealed by SQUEEZE listed in publicly available blacklists
results are very different for domains and IP addresses: 62.5% of
domains are listed in at least one blacklist, while the same is the
case for only 4% of IPs. Overall, however, SQUEEZE has contacted
427 and 368 additional blacklisted endpoints using strategies A and
B. Compared to the blacklisted endpoints revealed by Anubis, this
is an increase of 20.5% and 26.0% respectively.
In conclusion, an estimate of the percentage of additional C&C
servers revealed by SQUEEZE ranges between a minimum of 12.6%
(conﬁrmed C&C endpoints for strategy A) and a maximum of 32.8%
(endpoints in bot component for strategy B). For automatically-
generated C&C blacklists, such as the one provided by FIRE [20],
these results have practical implications. The reason is that they
demonstrate that, by complementing a malware analysis system
with SQUEEZE, we can generate blacklists that provide a signiﬁ-
cantly improved coverage of malware C&C servers.
5.4 Qualitative Results
In this section, we will highlight some interesting aspects of the
behavior of samples analyzed with SQUEEZE, with particular em-
phasis on those belonging to the top twenty malware families from
the FireEye report [30].
Palevo/Butterﬂy is a botnet toolkit that, according to [30], is be-
hind the currently most prevalent malware family. With SQUEEZE,
we were able to observe the backup C&C strategies employed by
Palevo samples. For this, strategy B was particularly effective.
These samples initially attempt to contact a static IP address. This
trafﬁc matches our C&C signatures. After this endpoint is blocked,
they attempt to contact another static IP (once again matching our
signatures). Finally, they fall back to a domain generation algo-
rithm. One sample in particular tried to resolve 42 generated do-
mains during the analysis run, none of which were actually active.
Samples of the Pakes malware family fall back to a number of
backup C&C endpoints when their primary C&C is blocked. Be-
fore attempting to contact each successive endpoint, however, these
samples idle for several minutes. This delayed execution behavior
is implemented with repeated calls to GetTickCount. Therefore,
SQUEEZE was able to skip these delays. For one sample, analysis
with strategy A revealed 20 additional endpoints compared to the
original Anubis run, but only after sending time forward by over
half an hour. As soon as Pakes is able to contact a C&C server, it
receives instructions to send spam.
Koobface is another interesting malware family, because it strad-
dles the line between client-server and P2P botnet C&C. As re-
ported by Thomas et al. [11], Koobface sets up HTTP-based C&C
servers on machines it has exploited. According to Thomas et al.,
close to one hundred such parasitic C&C servers are active on a
given day. During analysis, Koobface samples initially performed
a connection check by contacting the Google main page. Then they
tried to contact a number of hardcoded C&C servers. By blocking
them one after the other, SQUEEZE was able to trigger connections
to up to ﬁfty C&C endpoints before the six minute timeout. In this
case, simply increasing the timeout would presumably allow us to
detect further C&C endpoints.
The Piptea malware family (also known as Harnig) is a trojan
downloader. During normal execution, samples contact the primary
C&C server and query it via HTTP to retrieve encrypted download
instructions. If the primary C&C server is unreachable, a second
one serves as a fallback. However, the Piptea botnet was put of-
ﬂine, presumably by its operators, shortly after the Rustock take-
down on March 17th, 2011 [32]. Since this was the ﬁrst day of
our evaluation period, we are able to observe this in our results. A
few Piptea samples analyzed on March 17th successfully contacted
their C&C servers. Those analyzed on a later date, however, could
reach neither their primary nor their backup C&C servers.
Another interesting sample was also a downloader, most likely
related to a pay-per-install afﬁliate program. This dropper queries
(cid:1)(cid:2)
a C&C server using a proprietary, plain-text protocol for which we
do not have a signature. The server then provides a list of URLs
from which to download additional executables. In our analysis,
the dropper downloaded and executed three additional binaries one
after the other. All three binaries are recognized by anti-virus en-
gines as malicious, but interestingly do not seem to be related to
each other: The dropper is thus installing multiple malware strains
on the same machine. The third executable is a bot, and our sig-
natures were able to detect its C&C trafﬁc and the corresponding
endpoint. When strategy B blocked this endpoint, the bot attempted
to contact a backup C&C domain that had not yet been registered.
While SQUEEZE was able to reveal the backup C&C strategies
employed by some malware families, there are also families that
displayed no such behavior: After a C&C server was blocked,
these samples simply idled or performed a default behavior such
as network- or ﬁle-based propagation. We further investigated two
such families, and concluded that indeed these malware samples do
not employ a backup C&C strategy.
The ﬁrst such family we investigated is Virut. Virut spreads by
ﬁle infection, and its bot component is rather basic: The samples in
our dataset use only a single IRC C&C server, which they contact
to get download information on further binaries. If this server is
unavailable, Virut’s activity is limited to spreading.
The second family is Zbot. Zbot samples stem from the Zeus
toolkit [5], which allows users to create their own, customized bot-
net. None of the samples we analyzed with SQUEEZE displayed a
backup strategy when their ﬁrst C&C server was blocked; In fact
they remained completely idle. This seems surprising, consider-
ing that Zeus is still widely successful despite efforts from projects
such as Zeustracker to identify and blacklist its C&C servers. The
recently published source code of the Zeus toolkit (Version 2.0.8.9),
however, allowed us to conﬁrm this observation: Although zBot
can use various C&C servers, it ﬁrst relies on a primary C&C server
to provide the bot conﬁguration. This server is compiled into the
binary and can thus only be changed by means of a binary update.
To increase reslience, operators of Zeus-based botnets presumably
rely on frequent updates to their bot binaries. If this is the case, a
malware analysis system could reveal more Zbot C&C servers if it
were to capture updated binaries downloaded during analysis, and
periodically re-analyze the latest version. We leave this for future
work.
5.5 Deployment
Based on the encouraging evaluation results we set up a stable de-
ployment of SQUEEZE, integrated with the Anubis infrastructure.
This deployment uses strategy B, and is conﬁgured to re-analyze
all samples that matched a C&C signature in the original Anubis
run. From the beginning of June until the end of August 2011, over
32.000 samples were re-analyzed by SQUEEZE. During this pe-
riod, plain Anubis found a total of 4355 distinct endpoints in the
bot component and 2338 distinct endpoints with a signature match.
Squeeze improved this by revealing an additional 1706 (39%) and
278 (12%) endpoints respectively.
We tested the statistical signiﬁcance of these results using a single-
tailed Wilcoxon signed-rank test [33]. The research hypothesis
states that an analysis with SQUEEZE reveals more endpoints than a
plain Anubis run. The null hypothesis is rejected with a probability
of error below 0.001% when applying the test to either endpoints
in the bot component or endpoints with a signature match.
The deployment also backed our assumption that decreasing the
delay until re-analysis would have a positive effect on the share
of samples that re-connect to a C&C endpoint. While in Table 1
only 58% of samples re-analyzed with SQUEEZE matched a C&C
signature, this number rises to over 90% in our live deployment,
where the average delay between analysis in Anubis and re-analysis
(cid:1)(cid:2)
in SQUEEZE is reduced to eleven hours.
As a consequence, the FIRE service5, which makes use of Anu-
bis as a source of C&C information, directly beneﬁts from SQUEEZE.
This improves the coverage of both the FIRE blacklist and of its
ranking of “malicious networks”.
6 Limitations and Future Work
In this section we brieﬂy discuss the main limitations of our ap-
proach. The ﬁrst challenge is posed by the communication method
used by botnets. First of all, our approach is of limited utility
against botnets that use a fully decentralized P2P architecture. While
SQUEEZE could still investigate the trafﬁc and even block connec-
tions, it would simply produce a list of infected peers. Thus, mit-
igating P2P botnets clearly requires alternative approaches. How-
ever, as was discussed in Section 5.1, the majority of today’s most
prevalent malware families make use of client-server C&C. Thus,
SQUEEZE can provide useful intelligence in the current threat land-
scape. Another issue is that botnets could use encrypted C&C pro-
tocols that are harder to detect at the network level. However, the
speciﬁc mechanism used to model and detect C&C communication
is largely orthogonal to our work. SQUEEZE could be combined
with C&C detection techniques that do not suffer from this limita-
tion, such as those based on behavioral detection at the network
level [23], or on host-based analysis of information ﬂows [26].
Strategy A, in particular, can be trivially combined with arbitrary
C&C detection mechanisms.
A further limitation is that our tool can currently provide limited
information on DGAs it triggers. That is, SQUEEZE can observe
a number of requests going to generated domains, however it can
neither detect that these are C&C servers (since they are typically
ofﬂine) nor reveal how the DGA works. This limitation can be
overcome by applying slicing and gadget extraction techniques [34]
that can extract the DGA as a functional, self-contained piece of
code that can be used to generate new domains. Finally, like most
techniques based on the dynamic analysis of malware, SQUEEZE
may be thwarted by malware that detects it is running in an instru-
mented environment and refuses to run. In recent years, a number
of techniques have been proposed that attempt to mitigate this prob-
lem [35, 36, 37, 38, 39, 40].
7 Related Work
Botnets have been the subject of a signiﬁcant amount of research. A
survey of this topic has been performed by Bailey et al.[41]. Sev-
eral studies have been performed with the goal of measuring and
understanding the botnet phenomenon [4, 5, 6, 8, 9, 11, 12]. In
other cases, researchers went a step further and actively inﬁltrated
a botnet with the goal of obtaining further insight, taking down or
even taking over the botnet [7, 3, 13, 14]. Another well-explored
topic is the network-level detection of botnets, based on the bots’
crowd-like behavior [42], on their reaction to C&C commands at
the network [23] or host level [26], or on signatures generated by
detecting recurrent patterns in botnet trafﬁc [24, 25]. These ap-
proaches can be used either to create detection models that can be
deployed to protect a network and detect which machines are al-
ready infected, or to detect and blacklist C&C servers. FIRE [20]
identiﬁes malware C&C servers and tracks their uptime, to iden-