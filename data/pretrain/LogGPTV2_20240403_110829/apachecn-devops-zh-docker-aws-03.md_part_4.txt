region = us-east-1
```
该文件包括命名的配置配置文件，由于您在运行`aws configure`命令时指定了一个默认区域，一个`region`变量已被添加到`default`配置文件中。配置配置文件支持许多变量，这些变量允许您执行更高级的任务，如自动承担角色，因此这是我们需要配置 CLI 以承担我们在本章前面创建的`admin`角色的地方。假设我们在`credentials`文件中重命名了`default`概要文件，下面的代码演示了将`default`概要文件重命名为`docker-in-aws`，并增加了对承担`admin`角色的支持:
```
[profile docker-in-aws]
source_profile = docker-in-aws
role_arn = arn:aws:iam::385605022855:role/admin
role_session_name=justin.menga
mfa_serial = arn:aws:iam::385605022855:mfa/justin.menga
region = us-east-1
```
请注意，我们在配置文件名称前添加了`profile`关键字，这是配置命名配置文件时所必需的。我们还在配置文件中配置了许多变量:
*   `source_profile`:这是应该用来获取凭据的凭据配置文件。我们指定`docker-in-aws`，因为我们之前已经将`credentials`文件中的配置文件重命名为`docker-in-aws`。
*   `role_arn`:这是 IAM 角色要承担的 ARN。在这里，您可以指定您在上一张截图中创建的`admin`角色的 ARN。
*   `role_session_name`:这是当您承担配置的角色时创建的临时会话的名称。作为最佳实践，您应该指定您的 IAM 用户名，因为这有助于审核您使用该角色执行的任何操作。当您在 AWS 中使用一个假定的角色执行一个操作时，您的身份实际上是`arn:aws:sts:::assumed-role//`，因此将用户名设置为角色会话名称可以确保执行该操作的用户很容易被确定。
*   `mfa_serial`:这是应该用来承担角色的 MFA 设备的 ARN。鉴于您的 IAM 用户属于“用户”组，所有操作都需要 MFA，包括通过 AWS CLI 或 SDK 进行的任何 API 调用。通过配置此变量，AWS 命令行界面将在尝试承担配置的角色之前自动提示您输入 MFA 代码。您可以在 IAM 用户帐户的“安全凭据”标签中获取您的 MFA 设备的 ARN(请参见“已分配的 MFA 设备”字段，但是它将始终遵循命名约定`arn:aws:iam:::mfa/`。
See [https://docs.aws.amazon.com/cli/latest/topic/config-vars.html](https://docs.aws.amazon.com/cli/latest/topic/config-vars.html) for a complete description of all variables supported in both credentials and configuration profiles.
# 将 AWS 命令行界面配置为使用命名配置文件
配置就绪后，您不再有默认配置文件，因此运行 AWS 命令行界面将返回相同的输出。要使用命名配置文件，您有两个选项:
*   使用 AWS 命令行界面命令中的`--profile`标志指定配置文件名称。
*   在名为`AWS_PROFILE`的环境变量中指定配置文件名称。这是我喜欢的机制，我将假设你在这本书里一直采用这种方法。
前面的代码演示了这两种方法的使用:
```
> aws ec2 describe-vpcs --profile docker-in-aws
Enter MFA code for arn:aws:iam::385605022855:mfa/justin.menga: ******
{
    "Vpcs": [
        {
            "VpcId": "vpc-f8233a80",
            "InstanceTenancy": "default",
            "CidrBlockAssociationSet": [
                {
                    "AssociationId": "vpc-cidr-assoc-32524958",
                    "CidrBlock": "172.31.0.0/16",
                    "CidrBlockState": {
                        "State": "associated"
                    }
                }
            ],
            "State": "available",
            "DhcpOptionsId": "dopt-a037f9d8",
            "CidrBlock": "172.31.0.0/16",
            "IsDefault": true
        }
    ]
}
> export AWS_PROFILE=docker-in-aws
> aws ec2 describe-vpcs --query Vpcs[].VpcId
[
    "vpc-f8233a80"
]
```
在上例中，请注意，当您第一次运行`aws`命令时，系统会提示您输入 MFA 令牌，但是当您下一次运行该命令时，系统不会提示您。这是因为，默认情况下，通过承担角色获得的临时会话凭据在一小时内有效，并且 AWS CLI 会缓存这些凭据，以便您可以重复使用它们，而不必在每次执行命令时刷新凭据。当然，一个小时后，您将再次被提示输入您的 MFA 令牌，因为临时会话凭据将会过期。
在前面的代码中需要注意的另一个有趣的点是在最后一个命令示例中使用了`--query`标志。这允许您指定 JMESPath 查询，这是一种可用于查询 JSON 数据结构的查询语言。默认情况下，AWS 命令行界面输出 JSON，因此您可以使用查询从 AWS 命令行界面输出中提取特定信息。在本书中，我将经常使用这些查询的例子，您可以在[http://jmespath.org/tutorial.html](http://jmespath.org/tutorial.html)阅读更多关于 JMESPath 查询语言的内容。
# AWS 云信息简介
**AWS cloud information**是一个托管的 AWS 服务，允许您使用基础架构作为代码来定义 AWS 服务和资源，并且是使用 AWS 控制台、CLI 或各种 SDK 来部署您的 AWS 基础架构的替代方案。尽管掌握云信息有一点学习曲线，但是一旦掌握了使用云信息的基础知识，它就代表了部署 AWS 基础架构的一种极其强大的方法，尤其是在您开始部署复杂环境时。
使用 cloud information 时，您可以在 cloud information 模板中定义一个或多个资源，这是一种将相关资源分组到一个位置的方便机制。当您部署您的模板时，CloudFormation 将创建一个*栈*，它包含您的模板中定义的物理资源。CloudFormation 将部署每个资源，自动确定每个资源之间的任何依赖关系，并优化部署，以便资源可以在适用的情况下并行部署，或者在资源之间存在依赖关系时以正确的顺序部署。最好的消息是，所有这些强大的功能都是免费的——当您通过云信息部署您的栈时，您只需为您消耗的资源付费。
还需要注意的是，云信息有许多第三方替代方案——例如，Terraform 非常受欢迎，传统的配置管理工具(如 Ansible 和 Puppet)也包括对部署 AWS 资源的支持。我个人最喜欢的是 CloudFormation，因为它是由 AWS 原生支持的，对各种各样的 AWS 服务和资源有很好的支持，并且与 AWS CLI 和服务(如 CodePipeline)原生集成(我们将在本书后面的第 13 章中利用这种集成- *连续交付 ECS 应用*)。
# 定义云信息模板
开始云信息最简单的方法是创建一个云信息模板。这个模板是用 JSON 或者 YAML 格式定义的，后者是我推荐的格式，因为 YAML 比 JSON 更易于人类使用。
[云信息用户指南](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html)非常详细地描述了[模板结构](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html)，然而，就本书而言，我们只需要担心一个基本的模板结构，它最好用一个真实的例子来演示，您可以将它保存在一个名为`stack.yml`的文件中，放在您计算机上一个方便的位置:
```
AWSTemplateFormatVersion: "2010-09-09"
Description: Cloud9 Management Station
Parameters:
 EC2InstanceType:
   Type: String
   Description: EC2 instance type
   Default: t2.micro
 SubnetId:
   Type: AWS::EC2::Subnet::Id
   Description: Target subnet for instance
Resources:
  ManagementStation:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Name: !Sub ${AWS::StackName}-station
      Description:
        Fn::Sub: ${AWS::StackName} Station
      AutomaticStopTimeMinutes: 15
      InstanceType: !Ref EC2InstanceType
      SubnetId:
        Ref: SubnetId
```
在前面的代码中，CloudFormation 定义了一个 Cloud9 管理站——cloud 9 提供了一个基于云的集成开发环境和终端，它在后台运行在 AWS 中的 EC2 实例上。让我们通过这个例子来讨论模板的结构和特性。
`AWSTemplateFormatVersion`属性是必需的，它指定了总是用日期术语表示的 CloudFormation 模板格式版本。`Parameters`属性定义了一组可以提供给模板的输入参数，这是处理多个环境的好方法，其中每个环境之间可能有不同的输入值。例如，`EC2InstanceType`参数指定管理站的 EC2 实例类型，而`SubnetId`参数指定 EC2 实例应该连接到的子网。这两个值在非生产环境和生产环境之间可能不同，因此将它们作为输入参数可以更容易地根据目标环境进行更改。请注意，`SubnetId`参数指定了一种类型的`AWS::EC2::Subnet::Id`，这意味着云信息可以使用它来查找或验证输入值。支持的参数类型列表见[https://docs . AWS . Amazon . com/AWS cloudinformation/latest/user guide/parameters-section-structure . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html)。您还可以看到`EC2InstanceType`参数定义了参数的默认值，如果没有为该参数提供输入，将使用该默认值。
`Resources`属性定义了你的栈中的所有资源——这确实是模板的主体，并且可能包含多达两百个资源。在前面的代码中，我们只定义了一个我们称之为`ManagementStation`的资源，这就创建了 Cloud9 EC2 环境，通过`AWS::Cloud9::EnvironmentEC2`的`Type`值来表示。所有资源必须指定一个`Type`属性，该属性定义资源的类型，并确定每种类型可用的各种配置属性。CloudFormation 用户指南包括一个定义所有支持的资源类型的部分，最后统计有 300 种不同类型的资源。
每个资源还包括一个 Properties 属性，该属性保存该资源可用的所有各种配置属性。在前面的代码中，您可以看到我们定义了五个不同的属性——可用的属性将根据资源类型而变化，并且在 CloudFormation 用户指南中有完整的记录:
*   `Name`:指定 Cloud9 EC2 环境的名称。属性值可以是简单的标量值，如字符串或数字，但是该值也可以引用模板中的其他参数或资源。请注意，`Name`属性的值包括称为`Sub`的[内在函数](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html)，可以通过前面的感叹号(`!Sub`)来识别。`!Sub`语法实际上是`Fn::Sub`的简写，你可以在`Description`属性中看到一个例子。`Fn::Sub`内部函数允许您定义一个表达式，该表达式包含对栈中其他资源或参数的内插引用。例如，`Name`属性的值是`${AWS::StackName}-station`，其中`${AWS::StackName}`是一个被称为[伪参数](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html)的插值引用，它将被替换为您从模板中部署的云信息栈的名称。如果你的栈名是`cloud9-management`，那么当你的栈被部署时`${AWS::StackName}-station`的值会扩展到`cloud9-management-station`。
*   `Description`:这是对 Cloud9 EC2 环境的描述。这包括一个长手版本的`Fn::Sub`内在函数的例子，它要求你缩进一个新行，而速记`!Sub`格式允许你在同一行指定值作为属性。
*   `AutomaticStopTime`:这定义了在停止 Cloud9 EC2 实例之前等待的空闲时间(以分钟为单位)。这节省了成本，但仅在您使用 EC2 实例时运行它(Cloud9 将自动启动您的实例，并从您以前所在的位置恢复您的会话)。在前面的代码中，该值是一个简单的标量值 15。
*   `InstanceType`:这是 EC2 实例的类型。这使用引用内部函数引用`EC2InstanceType`参数(`!Ref`是简写形式)，允许您引用栈中的其他参数或资源。这意味着当您部署栈时，为该参数提供的任何值都将应用于`InstanceType`属性。
*   `SubnetId`:这是将要部署 EC2 实例的目标子网 ID。该属性使用`Ref`内部函数的长柄版本引用 SubnetID 参数，这要求您在缩进的新行中表达该引用。
# 部署云信息栈
现在您已经定义了一个云信息模板，您可以以云信息栈的形式部署模板中的资源。
您可以使用 AWS 控制台部署栈，方法是选择**服务** | **云信息**，这将打开云信息仪表板。在继续之前，请确保您已经在您的帐户中承担了管理员角色，并且还选择了美国东弗吉尼亚(美国东 1)作为区域:
For all examples in this book, we will be using the us-east-1 (N. Virginia) region.
![](img/6aec5bab-afe5-4795-ac18-1c6681e28289.png)
CloudFormation dashboard
如果点击**新建栈**按钮，系统会提示您选择模板，您可以选择样本模板、上传模板或指定 S3 模板网址。因为我们在一个名为`stack.yml`的文件中定义了我们的栈，所以选择上传模板的选项，然后点击**选择文件**按钮在您的计算机上选择文件:
![](img/38367206-84db-4a54-8043-fe8aa6613cef.png)
Selecting a CloudFormation template
上传模板后，CloudFormation 服务将解析模板，并要求您为栈指定一个名称，并为栈中的任何参数提供值:
![](img/65e6ca0f-052d-4840-96b2-503e43d49863.png)
Specifying template details
在前面的截图中，`EC2InstanceType`参数的值`t2.micro`是默认设置的，假设您在模板中将其设置为默认值。因为您指定了`AWS::EC2::Subnet::Id`作为`SubnetId`参数的类型，**创建栈**向导会自动查找您的帐户和地区中的所有子网，并在下拉列表中显示它们。在这里，我已经从默认 VPC 中选择了子网，该子网是使用位于 **us-east-1a** 可用性区域的每个新 AWS 帐户创建的。
您可以通过在 AWS 控制台中选择**服务** | **VPC** | **子网**或运行带有 JMESPath 查询的`aws ec2 describe-subnets` AWS CLI 命令来确定每个子网属于哪个可用性区域:
```
> aws ec2 describe-subnets --query 'Subnets[].[SubnetId,AvailabilityZone,CidrBlock]' \
    --output table