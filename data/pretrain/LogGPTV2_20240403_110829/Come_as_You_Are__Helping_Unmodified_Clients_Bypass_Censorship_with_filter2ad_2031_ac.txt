### Table 2: Summary of Server-Side-Only Strategies and Their Success Rates

All the strategies listed below manipulate only TCP. However, their success rates against China’s Great Firewall (GFW) are application-dependent. Note that Kazakhstan’s HTTPS and Iran’s DNS-over-TCP censorship infrastructure are currently inactive.

| Strategy | DNS | FTP | SMTP | HTTP | HTTPS |
|----------|-----|-----|------|------|-------|
| No Evasion | 0% | 100% | 100% | 100% | 100% |
| 8 TCP Window Reduction | - | - | - | - | - |
| 9 Triple Load | - | - | - | - | - |
| 10 Double GET | - | - | - | - | - |
| 11 Null Flags | - | - | - | - | - |

### 5.1 Server-Side Evasion in China

We applied Geneva from the server side to test various evasion strategies against the GFW for protocols including DNS, FTP, SMTP, HTTP, and HTTPS. Geneva identified eight distinct server-side-only strategies that are successful at least 50% of the time for at least one protocol in China. The success rates are as follows:
- **DNS**: 4 strategies
- **FTP**: 5 strategies
- **SMTP**: 1 strategy
- **HTTP**: 4 strategies
- **HTTPS**: 2 strategies

Figure 1 provides packet waterfall diagrams showing the resulting server- and client-behaviors when these strategies are implemented. Although no client-side modifications are required, the strategies induce client-side behavior that assists in circumventing censorship. In the following sections, we explore each strategy, explain why they work, and describe what they reveal about the GFW.

#### Strategy 1: Simultaneous Open, Injected RST (China)
- **Success Rates**:
  - DNS: 89%
  - FTP: 52%
  - HTTP: 54%
  - HTTPS: 14%
  - SMTP: 70%

**Description**:
- **[TCP:flags:SA]**
  - `duplicate(tamper{TCP:flags:replace:R}, tamper{TCP:flags:replace:S})`

**Explanation**:
This strategy triggers on outbound SYN+ACK packets. Instead of sending the SYN+ACK, it replaces it with two packets: a RST and a SYN. The RST packet is ignored by the client because it does not have the ACK flag set and the TCP connection is not yet synchronized. The injected SYN packet initiates a TCP simultaneous open. This strategy works by first sending an inert RST packet, then setting up the connection with a SYN packet.

**Behavior**:
- For HTTP, the success rate is 54%.
- Similar success rates are observed for FTP and single DNS-over-TCP queries.

**Hypothesis**:
- The injected RST packet does not tear down the connection but puts the GFW into a resynchronization state.
- The GFW fails to properly resynchronize due to the sequence number not advancing during the simultaneous open handshake, leading to desynchronization.

**Experiment**:
- Adjusting the sequence number of the forbidden request by 1 while running the strategy confirms the desynchronization hypothesis.

#### Strategy 2: Simultaneous Open, Injected Load (China)
- **Success Rates**:
  - DNS: 83%
  - FTP: 36%
  - HTTP: 54%
  - HTTPS: 55%
  - SMTP: 59%

**Description**:
- **[TCP:flags:SA]**
  - `tamper{TCP:flags:replace:S}(duplicate(, tamper{TCP:load:corrupt}))`

**Explanation**:
This strategy also relies on simultaneous open but uses a different mechanism. Instead of injecting a RST, it changes the outgoing SYN+ACK packet into two SYN packets: the first is well-formed, and the second has a random payload. This strategy has comparable success to Strategy 1 but slightly worse for FTP and better for HTTPS.

**Behavior**:
- The first SYN packet triggers simultaneous open, and the second SYN packet with a payload induces the GFW to enter the resynchronization state, desynchronizing the GFW by 1 byte from the real connection.

**Experiment**:
- Repeating the prior experiment confirms the desynchronization effect.

#### Strategy 3: Corrupted ACK, Simultaneous Open (China)
- **Success Rates**:
  - DNS: 26%
  - FTP: 65%
  - HTTP: 4%
  - HTTPS: 4%
  - SMTP: 23%

**Description**:
- **[TCP:flags:SA]**
  - `duplicate(tamper{TCP:ack:corrupt}, tamper{TCP:flags:replace:S})`

**Explanation**:
This strategy copies the SYN+ACK packet, corrupts the ack number of the first, and converts the second to a SYN. The corrupted SYN+ACK induces the client to send a RST before responding with a SYN+ACK to initiate the TCP simultaneous open. This strategy is most successful for FTP.

**Behavior**:
- The GFW enters the resynchronization state and resynchronizes on the RST packet, causing desynchronization.

#### Strategy 4: Corrupt ACK Alone (China)
- **Success Rates**:
  - DNS: 7%
  - FTP: 33%
  - HTTP: 5%
  - HTTPS: 5%
  - SMTP: 22%

**Description**:
- **[TCP:flags:SA]**
  - `duplicate(tamper{TCP:ack:corrupt})`

**Explanation**:
This strategy is identical to Strategy 3 but without simultaneous open. It shows that simultaneous open improves the success rate for FTP.

**Behavior**:
- The corrupted ACK number causes the GFW to enter the resynchronization state and resynchronize on the next packet from the client.

#### Strategy 5: Corrupt ACK, Injected Load (China)
- **Success Rates**:
  - DNS: 15%
  - FTP: 97%
  - HTTP: 4%
  - HTTPS: 3%
  - SMTP: 25%

**Description**:
- **[TCP:flags:SA]**
  - `duplicate(tamper{TCP:ack:corrupt}, tamper{TCP:load:corrupt})`

**Explanation**:
This strategy sends a SYN+ACK with a corrupted ack number, followed by another SYN+ACK with a random payload. The corrupted ACK number induces the client to send a RST, which the GFW resynchronizes on. This strategy is highly successful for FTP.

**Behavior**:
- The order of the injected packets is critical. Reversing the order makes the strategy ineffective.

#### Strategy 6: Injected Load, Induced RST (China)
- **Success Rates**:
  - DNS: 82%
  - FTP: 55%
  - HTTP: 52%
  - HTTPS: 54%
  - SMTP: 55%

**Description**:
- **[TCP:flags:SA]**
  - `duplicate(duplicate(tamper{TCP:flags:replace:F}(tamper{TCP:load:corrupt})), tamper{TCP:ack:corrupt})`

**Explanation**:
This strategy replaces the outbound SYN+ACK with three packets: a FIN with a random payload, a SYN+ACK with a corrupted ack number, and the original SYN+ACK. Adding the FIN makes the strategy more effective for all but FTP.

**Behavior**:
- The FIN (or ACK) packet with the payload is ignored by the client, and the corrupted SYN+ACK packet induces a RST. The GFW resynchronizes on the SYN+ACK packet with an incorrect ack number.

#### Strategy 7: Injected RST, Induced RST (China)
- **Success Rates**:
  - DNS: 83%
  - FTP: 85%
  - HTTP: 54%
  - HTTPS: 4%
  - SMTP: 66%

**Description**:
- **[TCP:flags:SA]**
  - `duplicate(duplicate(tamper{TCP:flags:replace:R}), tamper{TCP:ack:corrupt})`

**Explanation**:
This strategy copies the SYN+ACK packet twice. The first duplicate is changed to RST, the second duplicate has a corrupted ack number, and the third is left unchanged. All three packets are sent. The first RST packet is ignored by the client, the corrupted ACK induces the client to send a RST, and the client responds to the server’s SYN+ACK with an ACK to finish the handshake.

**Behavior**:
- The GFW resynchronizes on the next packet from the client for each protocol except HTTPS.

### Summary of Resynchronization State Behavior

1. A payload from the server on a non-SYN+ACK packet causes the GFW to resynchronize on the next SYN+ACK packet from the server or the next packet from the client with the ACK flag set for every protocol.
2. A RST from the server causes the GFW to resynchronize on the next packet it sees from the client for each protocol except HTTPS.
3. A SYN+ACK with a corrupted ack number only causes a resync for FTP, and it resynchronizes on the next packet from the client.

These findings highlight the nuanced and application-dependent nature of the GFW's resynchronization state handling.