title:Lightweight Probabilistic Broadcast
author:Patrick Th. Eugster and
Rachid Guerraoui and
Sidath B. Handurukande and
Petr Kouznetsov and
Anne-Marie Kermarrec
Lightweight Probabilistic Broadcast 
P. Th. Eugster’  R. Guerraoui’  S. B. Handurukande’  A.-M. Kermarrec’  P. Kouznetsov’ 
’ Federal Institute of Technology, Lausanne, Switzerland 
Microsoft Research, Cambridge, UK 
Abstract 
The growing interest in peer-to-peer applications has un- 
derlined the importance of scalability in modern distributed 
systems. Not surprisingly, much research effort has been in- 
vested in gossip-based broadcast protocols.  These trude the 
traditional strong  reliability guarantees against  very good 
“scalability” properties.  Scalability  is in that context usu- 
ally expressed in terms of throughput and delivery  latency, 
but there is only little work on how to reduce the overhead 
of membership management at large scale. 
This  paper  presents  Lightweight  Probabilistic  Broad- 
cast  (lpbcast), a  novel  gossip-based  broadcast algorithm 
which preserves the inherent throughput scalability of tradi- 
tional gossip-based algorithms and adds a notion of mem- 
bership management scalability:  every process only knows 
a random subset ofjixed size of the processes in the system. 
We formally  analyze  our broadcast algorithm  in terms of 
scalability with respect to the size of  individual  views, and 
compare  the  analytical  results  both  with  simulations  and 
concrete measurements. 
1.  Introduction 
Large scale event dissemination.  Peer-to-peer comput- 
ing  has  recently  received  much  attention,  as  shown  by 
the  success  of  large  scale  decentralized  applications  like 
Gnutella [22] or Groove [lo].  In peer-to-peer computing, 
every process acts as client and server, and scaiability is a 
major concern. 
The scalability  properties solicited  from such  applica- 
tions have evolved from hundreds to thousands  of  partici- 
pants, but  adequate  algorithms for reliable  propagation  of 
events  at  large scale are still  lacking.  Network-level  pro- 
tocols  have  turned  out to be  insufficient:  1P multicast  [6] 
lacks  reliability  guarantees, and  reliable  protocols  do not 
scale well.  The well-known  Reliable  Multicast  Transport 
Protocol (RMTP) [ 171 for instance generates a flood of pos- 
itive  acknowledgements from  receivers,  loading  both  the 
network and the sender. Any form of membership [2, 121 is 
hidden by such network-level protocols, which makes them 
difficult  to  exploit  with  more dynamic dissemination  (fir- 
tering, e.g.,  [ E]), emphasizing the need  for new  forms of 
application-level broadcast. 
broadcast 
Gossip-based 
algorithms.  Gossip- 
based  broadcast  algorithms [4, 14, 191 appear to be  more 
adequate in the field of large scale event dissemination, than 
the  “classical”  strongly  reliable  approaches [ 1 11.  Though 
such  gossip-based  approaches have  proven  good  scalabil- 
ity characteristics in terms of throughput, they often rely on 
the assumption  that  every process  knows every other pro- 
cess.  When managing large numbers of processes, this as- 
sumption  becomes a barrier to scalability.  In fact, the data 
structures  necessary  to store the view  of such a  large scale 
membership consume considerable  memory  resources,  let 
aside the communication required to ensure the consistency 
of the membership. 
Partial view.  Message routing and membership manage- 
ment are sometimes delegated to dedicated servers in order 
to relief  application  processes  [ 1,  5, 201.  This only defers 
the problem, since those servers are limited in resources as 
well.  To further increase  scalability, the membership view 
should be split, i.e., every participating process should only 
have  a partial  view  of  the  system.  In  order to  avoid  the 
isolation  of  processes  or the  partition  of  the  membership, 
especially  in  the case of failures,  membership information 
should nevertheless be shared  by processes to some extent: 
introducing a certain degree of redundancy between the in- 
dividual views is crucial to avoid single points of failure. 
Gossip-based membership.  While certain  systems  rely 
on a deterministic  scheme to establish the individual views 
[ 14, 211,  we introduce here a  new  completely  randomized 
approach. The local view of every individual member con- 
sists  of  a random process  list which  continuously evolves, 
but  never exceeds a fixed size.  In  short, after adding new 
processes to a view, it is truncated to the maximum length 
by removing randomly chosen entries. To ensure a uniform 
distribution  of  membership knowledge among  processes, 
every gossip message - besides notifying events - also pig- 
( 
0-7695-1101-5/01 $10.00 @ 2001 IEEE 
443 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:05:39 UTC from IEEE Xplore.  Restrictions apply. 
gybacks a set of process identifiers which are used to update 
views. The membership protocol and the effective dissemi- 
nation of events are thus dealt with at the same level. 
Contributions.  We present in this paper our strongly scal- 
able decentralized algorithm for event dissemination, called 
lpbcast,  which  we  have  used  to  implement  a  static  pub- 
lish/subscribe.  We  convey  our claim of scalability  in  two 
steps.  First,  we  formally  analyze  our  algorithm  using  a 
stochastic approach,  pointing  out  the  fact  that,  with  per- 
fectly uniformly distributed individual views, the view size 
has  virtually  no  impact  on  the  latency  of  delivery  of  an 
event.  We  similarly  show that for  a  given  view  size, the 
probability  of partition  creation in the system decreases as 
the system grows in  size.  Second, we give some practical 
results that support the analytical approach, both in terms of 
simulation and prototype measurements. 
It  is important to  notice  that our membership approach 
is  not  intrinsically  tied  to  our  Lightweight  Probabilistic 
Broadcast (ipbcast) algorithm. We  illustrate  this by  apply- 
ing our membership scheme to the well-known pbcast  [4] 
algorithm. 
Roadmap.  Section 2 gives an overview of related gossip- 
based  broadcast protocols.  Section 3 presents our lpbcasr 
algorithm and explains our randomized approach. Section 4 
presents a formal analysis of our algorithm in terms of scal- 
ability and reliability.  Section 5 gives some simulation and 
practical  results  supporting the formal analysis.  Section  6 
discusses the distribution  of the views and also proves the 
general  applicability  of our membership approach by com- 
bining it with pbcast and contrasting the consolidated algo- 
rithm with ipbcast. 
2.  Background: Probabilistic Algorithms 
The achievement of strong reliability  guarantees (in the 
sense of  [ 1 11) in practical  distributed systems requires ex- 
pensive mechanisms to detect missing messages and initiate 
retransmissions. Due to the overhead of message loss detec- 
tion and reparation, protocols offering such strong guaran- 
tees do not scale over a couple of hundred processes [ 181. 
2.1.  Reliability vs Scalability 
Gossip, or rumor mongering algorithms [7], are a class 
of epidemiologic algorithms, which have been introduced as 
an alternative to such “traditional” reliable broadcast proto- 
cols. They have first been developed for replicated database 
consistency management  [7].  The  main  motivation  is  to 
trade the reliability  guarantees offered by  costly  determin- 
istic protocols against weaker reliability  guarantees, but  in 
return obtain very good scalability properties. 
‘Their analysis is usually  based on stochastics similar to 
the theory of epidemics [3], where the execution is broken 
down in  steps.  Probabilities are associated to these steps, 
and1 such algorithms are therefore sometimes also referred 
to as probabilistic  algorithms.  The degree of reliability is 
typically  expressed  by  a :probability;  like  the  probability 
1-oi of  reaching all  processes in  the  system for any  given 
message, or by a probability  1-p of reaching any given pro- 
cess with any given message. Ideally, cr and p are precisely 
quantifiable. 
2.21.  Basic Concepts 
Decentralization is the key concept underlying the scala- 
bil ity  properties of gossip-based broadcast algorithms, i.e., 
the  overall load of retransmissions is reduced by decentral- 
izing the effort.  More precisely,  retransmissions are initi- 
ated in most gossip-based algorithms by having every pro- 
cess periodically  (every  T  ms - step  interval) send  a  di- 
gest of the messages it has delivered to a randomly chosen 
subset of processes inside the system (gossip subset). The 
size of  the subset is usually  fixed, and is commonly called 
fanout ( F ) .  Gossip protocols differ in the number of times 
the same information is gossiped, i.e., every process might 
gossip the same information only a limited number of times 
(repetitions are limited) and/or the same information might 
be forwarded only a limited number of times (hops are lim- 
ited). 
2.3.  Membership Tracking in Gossip-Based Algo- 
rithms 
Membership  tracking  in  gossip-based  algorithms  is  a 
challenging  issue.  Early  approaches  like  [9]  admit  that 
the  individual  views of  processes diverge temporarily, but 
as:jume that  they  eventually converge in  “stable”  phases. 
These  views  however  represent  the  “complete”  member- 
ship, which becomes a bottleneck at an increased scale. The 
Bimodal  Multicast  [4]  and  Directional  Gossip  [ 141 algo- 
rithms are representatives of a new generation of probabilis- 
tic: algorithms - aware of the problem of scalable member- 
ship management. 
Bimodal Multicast.  Bimodal Multicast  (also called pb- 
cast) relies on two phases.  A  “classical”  best-effort multi- 
cast protocol (e.g., IP multicast) is used for a first rough dis- 
semination of messages. A second phase assures reliability 
with  a certain probability, by using a gossip-based retrans- 
mission: every process in the system periodically gossips a 
digest of its received messages, and gossip receivers can so- 
licit such messages from the sender if they have not received 
them previously. 
444 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:05:39 UTC from IEEE Xplore.  Restrictions apply. 
The membership problem  is not  dealt  with  in  [4],  but 
the authors refer to another paper which describes  Capt’n 
Cook [21], a gossip-based resource location protocol for the 
Internet, which can  in  that sense be seen as a membership 
protocol.  This protocol  enables  the reduction  of  the  view 
of each individual process: each process has a precise view 
of its immediate neighbours, while the knowledge becomes 
less exhaustive at increasing “distance”. The notion of dis- 
tance is expressed in terms of host addresses.  Capt’n Cook 
however only considers the propagation of membership in- 
formation and it is thus not clear how this membership in- 
teracts with pbcast. 
Directional Gossip.  Directional  Gossip is a protocol  es- 
pecially  targeted  at  wide  area  networks.  By  taking  into 
account the topology  of  the  networks and the current pro- 
cesses,  optimizations  are  performed.  More  precisely,  a 
weight  is computed for each neighbour node, representing 
the connectivity  of that given  node.  The larger the  weight 
of a  node, the more possibilities  exist thus for it  to be  in- 
fected by  any  node.  The protocol  applies a simple heuris- 
tic, which  consists in  choosing nodes with  higher weights 
with a smaller probability than nodes with smaller weights. 
That way,  redundant sends are reduced.  The algorithm  is 
also based on partial views, in the sense that there is a sin- 
gle gossip  server  per LAN which acts as a bridge to other 
LANs.  This however  leads to a static  hierarchy,  in which 
the failure of  a gossip server can  isolate several processes 
from the remaining system. 
In contrast to the deterministic hierarchical  membership 
approaches in Directional Gossip or Capt’n Cook, our lpb- 
cast algorithm has a probabilistic approach to membership: 
each process  has a random partial  view  of the system.  lp- 
bcast  is lightweight in  the sense that  it consumes little re- 
sources in terms of memory and requires no dedicated mes- 
sages for  membership management:  gossip  messages  are 
used  to disseminate notifications and to propagate  digests 
of received events, but also to propagate membership infor- 
mation. 
3.  Lightweight Probabilistic Broadcast (Zpb- 
cast) 
In this section, we present our completely decentralized 
lightweight probabilistic  algorithm for event dissemination 
based  on  partial  views.  Though the  parts  concerning  the 
event  dissemination and  the  membership respectively  can 
be considered  as independent, we present our solution as a 
monolithic algorithm. This is done in order to simplify pre- 
sentation, and to emphasize the possibility  of dealing with 
membership and event dissemination at the same level. 
3.1.  System Model 
We  consider a  system  of  processes  II  =  { p l , p z ,  ...}. 
Processes join and leave the system dynamically and have 
ordered  distinct  identifiers.  We  assume  for  presentation 
simplicity  that there is not more than one process per node 
of the network. 
Though our algorithm has been implemented in the con- 
text of topic-based publish/subscribe [8], we present it with 
respect  to  a  single  topic,  and do not discuss  the  effect  of 
scaling up topics.  In other terms, II can be considered as a 
single topic or group, and joiningtleaving II can be viewed 
as subscribingtunsubscribing from the topic. Such subscrip- 
tionstunsubscriptions are assumed to be rare compared to 
the  large  flow of  events, and every  process in I3 can  sub- 
scribe to andtor publish events. 
3.2.  Gossip Messages 
Our lpbcast algorithm is based on non-synchronized pe- 
riodical  gossips,  where a  gossip message contains  several 
types of information. To be more precise, a gossip message 
serves four purposes: 
Notifications: A  message  piggybacks  notifications  re- 
ceived  (for the  first  time) since the last outgoing gossip 
message. Each process stores these notifications in a vari- 
able events.  Every such notification is only  gossiped  at 
most  once.  Older notifications are  stored  in  a different 
buffer,  which  is  only  required  to  satisfy  retransmission 
requests. 
Notification identifiers:  Each message also carries a digest 
(history) of notifications that the sending process has re- 
ceived. To that end, every process stores identifiers of no- 
tifications it has already delivered in  a variable eventlds. 
We suppose that these identifiers are unique, and include 
the identifier of the originator.  That way, the buffer can 
be optimized by only retaining for each sender the identi- 
fiers of notifications delivered since the last one delivered 
in sequence. 
Unsubscriptions:  A gossip message also piggybacks a set 
of unsubscriptions.  This type of information enables the 
gradual removal of processes  which  have unsubscribed 
from local views.  Unsubscriptions that are eligible to be 
forwarded with the next gossip(s) are stored in a variable 
unSubs. 
Subscriptions: A set of  subscriptions are attached to each 
message.  These subscriptions  are  buffered  in  subs.  A 
gossip  receiver  uses  these  subscriptions  to  update  its 
view, stored in a variable view. 
445 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:05:39 UTC from IEEE Xplore.  Restrictions apply. 
Note  that  none of  the  outlined  data structures contains 
duplicates.  That is, trying to add an already contained ele- 
ment to a list leaves the list unchanged. Furthermore, every 
list  has a maximum  size, noted  (LI,  for a given list L  ('d 
L, ILI  5  ILlm).  As a prominent parameter, the maximum 
length of view ((viewl,) will be denoted 1. 
3.3.  Procedures 
The algorithm is composed of two parts. The first part is 
executed upon reception  of a gossip message, and the sec- 
ond part is repeated periodically in attempt to propagate in- 
formation to other processes. 
Gossip reception.  According to the lists that are attached 
to each gossip message, there are several phases in the han- 
dling of an incoming message (Figure l(a)). 
I. 
The first phase consists in handling unsubscriptions. 
Every  unsubscription  is  applied  to  the  local  view 
(view), and then added to the  list  of  potentially  for- 
warded unsubscriptions unSubs. This list is then trun- 
cated to respect the maximum size limit by removing 
random elements. 
11. 
The second  phase  consists  in  trying  to  add  not  yet 
contained subscriptions to the local view.  These are 
also eligible for being forwarded with  the next out- 
going gossip  message.  Note  that  the  Subscriptions 
potentially  forwarded with  the  next outgoing gossip 
message, stored in subs, are a random mixture of sub- 