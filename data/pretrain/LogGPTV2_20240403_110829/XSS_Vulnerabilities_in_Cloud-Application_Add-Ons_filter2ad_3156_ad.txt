### Doc Variables and Other Add-Ons

- **Doc Variables**
- **Order Printer Pro**
- **ShipHero Fulfillment**
- **Simple Admin**
- **ShipRelay Fulfillment**
- **Ship Systems 3D Box Packing**

### Status of Add-Ons
- **Fixing**
- **Fixing**
- **Fixing**
- **Fixing**
- **Fixing**
- **Fixing**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Shared workspace (No response)**
- **Fixed**

### Testing Methodology
After creating the test item, we evaluated all functions of each add-on on the test item, focusing on workflows that involve rendering the content of the item. In some cases, we added custom JavaScript code because certain add-ons only process data in specific formats. For example, with **Doc Variables**—an add-on that allows defining and using variables in Google Docs documents—we had to insert our script into a variable’s definition, which was in the format: `${variable_name}`. If any of the injected script snippets were executed, we concluded that the add-on was vulnerable to Cross-Site Scripting (XSS).

### Analysis and Findings
Our analysis was manual, but we believe it is sufficient to identify most, if not all, XSS vulnerabilities in the selected add-ons. Add-ons are typically simpler than standalone web services, with fewer features and limited places for user input. This makes it feasible to manually test all workflows using black-box testing. However, while our methodology is adequate for our purposes, it is not practical for large-scale analyses. A more comprehensive and efficient approach is needed for such tasks.

### Results and Responsible Disclosure
We found 28 vulnerable add-ons out of the 300 analyzed, indicating that XSS vulnerabilities are common in cloud-application add-ons. The G Suite marketplace provides the number of users for each add-on, and the most widely used vulnerable add-on, **Form Ranger**, had approximately 7.8 million users as of August 2019. In the Microsoft Office Online and Shopify marketplaces, the most popular vulnerable add-ons were **Translator for Outlook** and **Order Printer Pro**, respectively. The former had 1,772 reviews, and the latter had 371 reviews.

The vulnerability rate appears lower in popular add-ons, possibly because they are more likely to be developed by experienced developers. Additionally, add-ons vulnerable to outside input are rare; only one add-on in our study was vulnerable. We hypothesize that add-on developers are more familiar with threats from outside input (e.g., emails) than those from shared workspaces.

We disclosed the vulnerabilities to all add-on developers we could contact and provided guidance on how to fix the security bugs. As of now, one add-on has been fixed, nine are working on fixes, and the others have not responded. We also discussed the issue of the Picker API with Google, who confirmed the problem and said they would address it in the next version of their add-on system.

### Defenses
#### Solutions for Add-On Developers
To prevent XSS, add-on developers should avoid adding untrusted data to the add-on UI as HTML, as it can contain malicious JavaScript. Here are some practices they can follow:

- **Coding Practices**: Use `innerText` and `textContent` properties instead of `innerHTML` to insert text. With jQuery, use the `.text()` method instead of `.html()`. In rare cases where rendering untrusted HTML is necessary, validate and escape the input first. On the server side, use built-in functions for this task. On the client side, use methods like `.toStaticHTML()` to remove dynamic elements and attributes.
- **Security Enforcement**: Implement a Content Security Policy (CSP) to enforce defenses. An extreme policy is to ban all inline scripts, allowing only trusted .js files. Alternatively, use hash-based or nonce-based policies to allow specific inline scripts.
- **Minimize Permissions**: Request only the minimum permissions necessary. Excessive permissions, as seen in the **Form Ranger** case, can enable attackers to steal data and send emails on behalf of the victim.
- **XSS Detection**: Create test items and write unit tests to continuously check for XSS vulnerabilities during development.

#### Lessons for Cloud-Application Vendors
- **Harden the Add-On iFrame**: Restrict browser features accessible by the add-on iFrame using the `allow` and `sandbox` properties. Consider using the experimental `csp` property to enforce CSP on add-ons.
- **Implement Add-On Logic on the Server Side**: Move logic to the server side to act as a layer of isolation between client-side scripts and user data. Define a limited, purpose-specific interface and implement business logic to filter read and write operations.
- **Filter Scripts in User Input**: Thoroughly consider the types of user input and filter out unwanted types. For structured data, ensure that HTML and scripts do not appear in unexpected places.
- **Do Not Share Access Tokens**: Avoid sharing powerful OAuth 2.0 tokens with the client side. Instead, mediate access through the add-on server and delegate restricted tokens when necessary.
- **Avoid Runtime User Consent**: Prompting for consent at runtime can condition users to always say yes, including to malicious prompts. Ask for consent only during installation or upgrade, though this may limit document-level access control.

### Discussion and Future Work
Despite the known nature of XSS, new attack vectors and rapid software development make it challenging to keep defenses up to date. Our experiments confirm the real and exploitable nature of these vulnerabilities. A successful attack requires the victim to use a vulnerable add-on on a shared document. Add-ons like translators and writing assistants, which are frequently used, are particularly risky.

In addition to XSS, the use of OAuth 2.0 tokens in the Picker API poses a significant risk. Even if the API is replaced, the unsafe design pattern may persist. Further measures, such as monitoring and blocking token usage, may be necessary to prevent unsafe practices.

For these reasons, additional steps may be required to prevent the misuse of access tokens. While G Suite has the advantage of running add-on servers in the Google cloud, restrictions on token usage would reduce the convenience and flexibility of bearer tokens, a trade-off that must be carefully considered.