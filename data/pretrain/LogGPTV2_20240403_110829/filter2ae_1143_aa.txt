### 首次分析Office类宏VBA病毒的记录

#### 样本概况
- **测试环境及工具**
  - 运行平台: Windows 7 x64
  - 进程监控工具: ProcessHacker
  - 调试分析工具: PowerShell ISE, Visual Studio 2019

- **样本基本信息**
  - 文件名称: a474c4ea67fd30e80ca375370d19dd0712997889814c2960d8a41c2856092ce5.doc
  - 样本类型: Microsoft Word 2007+
  - 样本大小: 28.44 KB (29,123 字节)
  - MD5: 9eafc9090d71b382af7c8c04e83d61d2
  - SHA1: 32a192bab959b725cc02cf3df9b063e160b9ac43
  - SHA256: a474c4ea67fd30e80ca375370d19dd0712997889814c2960d8a41c2856092ce5

在 VirusTotal 上查询该样本时，被标记为 Downloader。部分安全厂商尚未捕获此样本。

- **沙箱检测结果**
  - 创建了三个进程，其中一个为 `powershell.exe`。
  - 释放了四个文件。

接下来将详细分析该样本。

### 样本分析

#### VBA宏分析
打开样本后，Word 2010 提示需要启用宏功能，这是典型的 Office 宏病毒手法。使用 VBA 宏脚本来隐藏实际功能。按下 `Alt + F11` 打开 VBA 编辑器，发现代码已被混淆。将所有内容复制出来并尝试复原，尽管效果一般，但可以进行初步分析。

#### 动态调试
- **VBA代码分析**
  - 由于代码排版混乱且包含多个 `Goto` 语句，静态分析较为困难。因此选择直接在 VBA 编辑器中动态调试。
  - 函数 `Document_Open` 是入口点，在此处设置断点。

```vba
Dim Garniture As Object
```
声明 `Garniture` 为 `Object` 类型，存储对象引用。通过 `Set` 语句可以将 `GetObject` 返回的对象赋值给 `Garniture`。

例如：
```vba
Dim test As Object
Set test = GetObject("C:\test.exe")
```

- **Lethbridge函数**
  - 继续单步调试进入 `Lethbridge` 函数，传入参数为 `de9a2c49a42b6`。
  - 使用 `StrConv` 对字符串进行转换。参数 `128` 表示从 Unicode 转换为系统默认代码页，参数 `64` 则表示相反操作。
  - 在此例中，`StrConv` 将 `Garniture` 中的字符串从 Unicode 转换为系统默认代码页，并存入 `Humoursome` 数组以供后续解密。

```vba
Lethbridge : "winmgmts:\\.\root\cimv2:Win32_Process" : String
```
- **Win32_Process 类别**
  - `Win32_Process` 类别代表 Win32 系统上的进程。
  - 通过 `"winmgmts:\\.\root\cimv2:Win32_Process"` 可以创建和获取进程信息。

继续执行，调用 `GetObject` 获取指定对象，并传递给 `SnottineSS` 函数。该函数会解密一个字符串并通过 `Win32_Process.Create` 创建一个进程。

- **PowerShell脚本**
  - 解密出一个 3692 字节的 PowerShell 脚本，部分内容如下：

```powershell
powershell -WindowStyle Hidden 
function y171e {
    param($z4627)
    $k58be9='a57157c';
    $yce74a='';
    for ($i=0; $i -lt $z4627.length;$i+=2) {
        $vc2775=[convert]::ToByte($z4627.Substring($i,2),16);
        $yce74a+=[char]($vc2775 -bxor $k58be9[($i/2)%$k58be9.length]);
    }
    return $yce74a
}
```

- **完整PowerShell脚本**
  - 启动 Process Hacker 监控进程，重新调试并在创建进程处下断点。
  - 通过 Process Hacker 抓取完整的 PowerShell 命令行，得到以下脚本：

```powershell
powershell -WindowStyle Hidden 
function y171e {
    param($z4627)
    $k58be9='a57157c';
    $yce74a='';
    for ($i=0; $i -lt $z4627.length;$i+=2) {
        $vc2775=[convert]::ToByte($z4627.Substring($i,2),16);
        $yce74a+=[char]($vc2775 -bxor $k58be9[($i/2)%$k58be9.length]);
    }
    return $yce74a
}
```

通过上述步骤，我们成功获取并分析了该 Office 宏病毒样本的核心行为。