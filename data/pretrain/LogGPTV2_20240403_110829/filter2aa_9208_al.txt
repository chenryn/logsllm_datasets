based what it finds just after the \f(CW\*(C`{\*(C'\fR. Usually it gets it right, but if it
doesn't it won't realize something is wrong until it gets to the \f(CW\*(C`}\*(C'\fR and
encounters the missing (or unexpected) comma. The syntax error will be
reported close to the \f(CW\*(C`}\*(C'\fR but you'll need to change something near the \f(CW\*(C`{\*(C'\fR
such as using a unary \f(CW\*(C`+\*(C'\fR to give perl some help:
.Sp
.Vb 5
\&    %hash = map {  "\eL$_", 1  } @array  # perl guesses EXPR.  wrong
\&    %hash = map { +"\eL$_", 1  } @array  # perl guesses BLOCK. right
\&    %hash = map { ("\eL$_", 1) } @array  # this also works
\&    %hash = map {  lc($_), 1  } @array  # as does this.
\&    %hash = map +( lc($_), 1 ), @array  # this is EXPR and works!
.Ve
.Sp
.Vb 1
\&    %hash = map  ( lc($_), 1 ), @array  # evaluates to (1, @array)
.Ve
.Sp
or to force an anon hash constructor use \f(CW\*(C`+{\*(C'\fR
.Sp
.Vb 1
\&   @hashes = map +{ lc($_), 1 }, @array # EXPR, so needs , at end
.Ve
.Sp
and you get list of anonymous hashes each with only 1 entry.
.IP "mkdir \s-1FILENAME\s0,MASK" 8
.IX Item "mkdir FILENAME,MASK"
.PD 0
.IP "mkdir \s-1FILENAME\s0" 8
.IX Item "mkdir FILENAME"
.PD
Creates the directory specified by \s-1FILENAME\s0, with permissions
specified by \s-1MASK\s0 (as modified by \f(CW\*(C`umask\*(C'\fR).  If it succeeds it
returns true, otherwise it returns false and sets \f(CW$!\fR (errno).
If omitted, \s-1MASK\s0 defaults to 0777.
.Sp
In general, it is better to create directories with permissive \s-1MASK\s0,
and let the user modify that with their \f(CW\*(C`umask\*(C'\fR, than it is to supply
a restrictive \s-1MASK\s0 and give the user no way to be more permissive.
The exceptions to this rule are when the file or directory should be
kept private (mail files, for instance).  The \fIperlfunc\fR\|(1) entry on
\&\f(CW\*(C`umask\*(C'\fR discusses the choice of \s-1MASK\s0 in more detail.
.Sp
Note that according to the \s-1POSIX\s0 1003.1\-1996 the \s-1FILENAME\s0 may have any
number of trailing slashes.  Some operating and filesystems do not get
this right, so Perl automatically removes all trailing slashes to keep
everyone happy.
.IP "msgctl \s-1ID\s0,CMD,ARG" 8
.IX Item "msgctl ID,CMD,ARG"
Calls the System V \s-1IPC\s0 function \fImsgctl\fR\|(2).  You'll probably have to say
.Sp
.Vb 1
\&    use IPC::SysV;
.Ve
.Sp
first to get the correct constant definitions.  If \s-1CMD\s0 is \f(CW\*(C`IPC_STAT\*(C'\fR,
then \s-1ARG\s0 must be a variable which will hold the returned \f(CW\*(C`msqid_ds\*(C'\fR
structure.  Returns like \f(CW\*(C`ioctl\*(C'\fR: the undefined value for error,
\&\f(CW"0 but true"\fR for zero, or the actual return value otherwise.  See also
\&\*(L"SysV \s-1IPC\s0\*(R" in perlipc, \f(CW\*(C`IPC::SysV\*(C'\fR, and \f(CW\*(C`IPC::Semaphore\*(C'\fR documentation.
.IP "msgget \s-1KEY\s0,FLAGS" 8
.IX Item "msgget KEY,FLAGS"
Calls the System V \s-1IPC\s0 function \fImsgget\fR\|(2).  Returns the message queue
id, or the undefined value if there is an error.  See also
\&\*(L"SysV \s-1IPC\s0\*(R" in perlipc and \f(CW\*(C`IPC::SysV\*(C'\fR and \f(CW\*(C`IPC::Msg\*(C'\fR documentation.
.IP "msgrcv \s-1ID\s0,VAR,SIZE,TYPE,FLAGS" 8
.IX Item "msgrcv ID,VAR,SIZE,TYPE,FLAGS"
Calls the System V \s-1IPC\s0 function msgrcv to receive a message from
message queue \s-1ID\s0 into variable \s-1VAR\s0 with a maximum message size of
\&\s-1SIZE\s0.  Note that when a message is received, the message type as a
native long integer will be the first thing in \s-1VAR\s0, followed by the
actual message.  This packing may be opened with \f(CW\*(C`unpack("l! a*")\*(C'\fR.
Taints the variable.  Returns true if successful, or false if there is
an error.  See also \*(L"SysV \s-1IPC\s0\*(R" in perlipc, \f(CW\*(C`IPC::SysV\*(C'\fR, and
\&\f(CW\*(C`IPC::SysV::Msg\*(C'\fR documentation.
.IP "msgsnd \s-1ID\s0,MSG,FLAGS" 8
.IX Item "msgsnd ID,MSG,FLAGS"
Calls the System V \s-1IPC\s0 function msgsnd to send the message \s-1MSG\s0 to the
message queue \s-1ID\s0.  \s-1MSG\s0 must begin with the native long integer message
type, and be followed by the length of the actual message, and finally
the message itself.  This kind of packing can be achieved with
\&\f(CW\*(C`pack("l! a*", $type, $message)\*(C'\fR.  Returns true if successful,
or false if there is an error.  See also \f(CW\*(C`IPC::SysV\*(C'\fR
and \f(CW\*(C`IPC::SysV::Msg\*(C'\fR documentation.
.IP "my \s-1EXPR\s0" 8
.IX Item "my EXPR"
.PD 0
.IP "my \s-1TYPE\s0 \s-1EXPR\s0" 8
.IX Item "my TYPE EXPR"
.IP "my \s-1EXPR\s0 : \s-1ATTRS\s0" 8
.IX Item "my EXPR : ATTRS"
.IP "my \s-1TYPE\s0 \s-1EXPR\s0 : \s-1ATTRS\s0" 8
.IX Item "my TYPE EXPR : ATTRS"
.PD
A \f(CW\*(C`my\*(C'\fR declares the listed variables to be local (lexically) to the
enclosing block, file, or \f(CW\*(C`eval\*(C'\fR.  If more than one value is listed,
the list must be placed in parentheses.
.Sp
The exact semantics and interface of \s-1TYPE\s0 and \s-1ATTRS\s0 are still
evolving.  \s-1TYPE\s0 is currently bound to the use of \f(CW\*(C`fields\*(C'\fR pragma,
and attributes are handled using the \f(CW\*(C`attributes\*(C'\fR pragma, or starting
from Perl 5.8.0 also via the \f(CW\*(C`Attribute::Handlers\*(C'\fR module.  See
\&\*(L"Private Variables via \fImy()\fR\*(R" in perlsub for details, and fields,
attributes, and Attribute::Handlers.
.IP "next \s-1LABEL\s0" 8
.IX Item "next LABEL"
.PD 0
.IP "next" 8
.IX Item "next"
.PD
The \f(CW\*(C`next\*(C'\fR command is like the \f(CW\*(C`continue\*(C'\fR statement in C; it starts
the next iteration of the loop:
.Sp
.Vb 4
\&    LINE: while () {
\&        next LINE if /^#/;      # discard comments
\&        #...
\&    }
.Ve
.Sp
Note that if there were a \f(CW\*(C`continue\*(C'\fR block on the above, it would get
executed even on discarded lines.  If the \s-1LABEL\s0 is omitted, the command
refers to the innermost enclosing loop.
.Sp
\&\f(CW\*(C`next\*(C'\fR cannot be used to exit a block which returns a value such as
\&\f(CW\*(C`eval {}\*(C'\fR, \f(CW\*(C`sub {}\*(C'\fR or \f(CW\*(C`do {}\*(C'\fR, and should not be used to exit
a \fIgrep()\fR or \fImap()\fR operation.
.Sp
Note that a block by itself is semantically identical to a loop
that executes once.  Thus \f(CW\*(C`next\*(C'\fR will exit such a block early.
.Sp
See also \*(L"continue\*(R" for an illustration of how \f(CW\*(C`last\*(C'\fR, \f(CW\*(C`next\*(C'\fR, and
\&\f(CW\*(C`redo\*(C'\fR work.
.IP "no Module \s-1VERSION\s0 \s-1LIST\s0" 8
.IX Item "no Module VERSION LIST"
.PD 0
.IP "no Module \s-1VERSION\s0" 8
.IX Item "no Module VERSION"
.IP "no Module \s-1LIST\s0" 8
.IX Item "no Module LIST"
.IP "no Module" 8
.IX Item "no Module"
.PD
See the \f(CW\*(C`use\*(C'\fR function, which \f(CW\*(C`no\*(C'\fR is the opposite of.
.IP "oct \s-1EXPR\s0" 8
.IX Item "oct EXPR"
.PD 0
.IP "oct" 8
.IX Item "oct"
.PD
Interprets \s-1EXPR\s0 as an octal string and returns the corresponding
value.  (If \s-1EXPR\s0 happens to start off with \f(CW\*(C`0x\*(C'\fR, interprets it as a
hex string.  If \s-1EXPR\s0 starts off with \f(CW\*(C`0b\*(C'\fR, it is interpreted as a
binary string.  Leading whitespace is ignored in all three cases.)
The following will handle decimal, binary, octal, and hex in the standard
Perl or C notation:
.Sp
.Vb 1
\&    $val = oct($val) if $val =~ /^0/;
.Ve
.Sp
If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.   To go the other way (produce a number
in octal), use \fIsprintf()\fR or \fIprintf()\fR:
.Sp
.Vb 2
\&    $perms = (stat("filename"))[2] & 07777;
\&    $oct_perms = sprintf "%lo", $perms;
.Ve
.Sp
The \fIoct()\fR function is commonly used when a string such as \f(CW644\fR needs
to be converted into a file mode, for example. (Although perl will
automatically convert strings into numbers as needed, this automatic
conversion assumes base 10.)
.IP "open \s-1FILEHANDLE\s0,EXPR" 8
.IX Item "open FILEHANDLE,EXPR"
.PD 0
.IP "open \s-1FILEHANDLE\s0,MODE,EXPR" 8
.IX Item "open FILEHANDLE,MODE,EXPR"
.IP "open \s-1FILEHANDLE\s0,MODE,EXPR,LIST" 8
.IX Item "open FILEHANDLE,MODE,EXPR,LIST"
.IP "open \s-1FILEHANDLE\s0,MODE,REFERENCE" 8
.IX Item "open FILEHANDLE,MODE,REFERENCE"
.IP "open \s-1FILEHANDLE\s0" 8
.IX Item "open FILEHANDLE"
.PD
Opens the file whose filename is given by \s-1EXPR\s0, and associates it with
\&\s-1FILEHANDLE\s0.
.Sp
(The following is a comprehensive reference to \fIopen()\fR: for a gentler
introduction you may consider perlopentut.)
.Sp
If \s-1FILEHANDLE\s0 is an undefined scalar variable (or array or hash element)
the variable is assigned a reference to a new anonymous filehandle,
otherwise if \s-1FILEHANDLE\s0 is an expression, its value is used as the name of
the real filehandle wanted.  (This is considered a symbolic reference, so
\&\f(CW\*(C`use strict 'refs'\*(C'\fR should \fInot\fR be in effect.)
.Sp
If \s-1EXPR\s0 is omitted, the scalar variable of the same name as the
\&\s-1FILEHANDLE\s0 contains the filename.  (Note that lexical variables\*(--those
declared with \f(CW\*(C`my\*(C'\fR\-\-will not work for this purpose; so if you're
using \f(CW\*(C`my\*(C'\fR, specify \s-1EXPR\s0 in your call to open.)
.Sp
If three or more arguments are specified then the mode of opening and
the file name are separate. If \s-1MODE\s0 is \f(CW''\fR, the file is truncated and
opened for output, being created if necessary.  If \s-1MODE\s0 is \f(CW'>>'\fR,
the file is opened for appending, again being created if necessary.
.Sp
You can put a \f(CW'+'\fR in front of the \f(CW'>'\fR or \f(CW''\fR mode would clobber the file first.  You can't usually use
either read-write mode for updating textfiles, since they have
variable length records.  See the \fB\-i\fR switch in perlrun for a
better approach.  The file is created with permissions of \f(CW0666\fR
modified by the process' \f(CW\*(C`umask\*(C'\fR value.
.Sp
These various prefixes correspond to the \fIfopen\fR\|(3) modes of \f(CW'r'\fR,
\&\f(CW'r+'\fR, \f(CW'w'\fR, \f(CW'w+'\fR, \f(CW'a'\fR, and \f(CW'a+'\fR.
.Sp
In the 2\-arguments (and 1\-argument) form of the call the mode and
filename should be concatenated (in this order), possibly separated by
spaces.  It is possible to omit the mode in these forms if the mode is
\&\f(CW'\-'\fR opens \s-1STDOUT\s0.
.Sp
You may use the three-argument form of open to specify \s-1IO\s0 \*(L"layers\*(R"
(sometimes also referred to as \*(L"disciplines\*(R") to be applied to the handle
that affect how the input and output are processed (see open and
PerlIO for more details). For example
.Sp
.Vb 1
\&  open(FH, "<:utf8", "file")
.Ve
.Sp
will open the \s-1UTF\-8\s0 encoded file containing Unicode characters,
see perluniintro. (Note that if layers are specified in the
three-arg form then default layers set by the \f(CW\*(C`open\*(C'\fR pragma are
ignored.)