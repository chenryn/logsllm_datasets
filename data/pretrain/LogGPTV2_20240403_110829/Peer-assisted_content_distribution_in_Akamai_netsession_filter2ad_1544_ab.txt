nents.
To avoid confusion, we use the term content providers
to refer to the organizations and individuals who provide
content for NetSession to distribute, and the term users to
refer to those who download the content.
3.3 Example: Download Manager
We begin by brieﬂy describing an example application, the
Download Manager (DLM). The DLM is one of several ap-
plications that use the NetSession system; a typical use case
Figure 1: Overview of the NetSession system.
is to distribute large objects that are several GBs in size,
such as software installation images.
When a user attempts to download an object that is dis-
tributed using the DLM, she is ﬁrst asked to install the
NetSession Interface on her computer (unless it is already
available from previous usage). Once installed, the NetSes-
sion Interface starts downloading the content from the edge
servers; in parallel, it queries the control plane for a list of
nearby peers that already have a copy of the object. If suit-
able peers are found, the local peer and the selected peers
attempt to contact each other and exchange as much data
as possible; however, the download from the edge servers
continues in parallel. Thus, if a peer is “unlucky” and picks
peers that are slow or unreliable, the infrastructure can cover
the diﬀerence, so that user experience does not suﬀer as a
result.
Users can pause and resume downloads, and they can con-
tinue downloads that were aborted earlier, e.g., because the
peer lost network connectivity or the peer’s hard drive was
full. Once the download completes, the NetSession Interface
software remains on the peer and can be reused for future
downloads, or by other NetSession-enabled applications, and
it can upload the downloaded content to other peers.
3.4 The NetSession Interface
The NetSession Interface is available for Windows and Mac
OS. It is implemented as a background application that runs
whenever the user is logged into their system. This design
choice is diﬀerent from many p2p clients, which must be
launched explicitly by the user. The short session times
that have been observed in p2p systems [4, 14, 27] suggest
that users launch the client only when they intend to down-
load something, so the time window in which objects can be
uploaded to other peers tends to be very short. As a persis-
tent background application, NetSession does not have this
problem, but in return, it must take great care not to incon-
venience the user. We discuss some of its best practices in
Section 3.9.
Whenever the NetSession Interface is active and the peer
is online, it maintains a TCP connection to the control plane.
When a download is started, the peer uses this control con-
nection to query the control plane for other peers. The con-
nection is also useful for opening peer-to-peer connections
through NATs, which in most cases requires coordination
between the peers; the control plane can facilitate this by
informing both endpoints using their control connection. Fi-
Control plane servers Edge servers Clients Clients 33nally, peers use the connection to learn about conﬁguration
updates, and they report usage statistics, which are used for
billing, performance monitoring, and to generate reports for
content providers. Each peer has a unique GUID, which is
chosen at random during installation.
NetSession uses the standard HTTP (or HTTPS) proto-
col to download content from edge servers; for downloads
from peers, it uses a swarming protocol not unlike BitTor-
rent’s. As in BitTorrent, objects are broken into ﬁxed-size
pieces that can be downloaded and their content hashes veri-
ﬁed separately, and peers exchange information about which
pieces of the ﬁle they have locally available.
A key diﬀerence to BitTorrent is the absence of an incen-
tive mechanism: in NetSession, peers can always obtain the
content from the infrastructure, so it is not as important to
discourage “freeloading”—the infrastructure can easily ab-
sorb the cost of a few users who decide not to upload. Hence,
a conscious decision was made not to include incentives, and
to serve content to each peer at the best possible speed, re-
gardless of how much bandwidth it is contributing to the
system. There is no tit-for-tat strategy that would “choke”
slow uploaders as in BitTorrent, only a globally conﬁgurable
limit on the total number of upload connections a peer al-
lows. In fact, NetSession Interface users have the option to
turn oﬀ peer content uploads permanently or temporarily
in the NetSession application preferences, without adverse
eﬀects on their download performance.
NetSession is predominantly used by content providers
who distribute large objects and already require their clients
to install software (e.g., games). NetSession also supports
video streaming, but it currently does not serve much video
traﬃc because of the requirement to install client software.
3.5 Interaction with edge servers
NetSession’s HTTP(S) connections to the edge servers are
used not only for downloading ﬁles, they also support many
other critical functions.
One important function is to ensure content integrity. File
pieces can be corrupted in transit or on the peers; addition-
ally, content can change over time, so it is important that
diﬀerent versions are not mixed up in the same download.
Edge servers generate and maintain secure IDs of content,
which are unique to each version, as well as secure hashes
of the pieces of each ﬁle. The IDs and the hashes are pro-
vided to the peers, so they can validate the content they
have downloaded. If a peer cannot validate a ﬁle piece, it
discards the piece and does not upload it to other peers.
Another key function is authorization. Before a peer can
receive content from other peers, it must authenticate to
an edge server over the HTTP(S) connection; this yields an
encrypted token that can be used to search for peers. This is
done to prevent users from downloading ﬁles from peers that
they are not authorized to obtain from the infrastructure.
Finally, the HTTP(S) connections are used for conﬁgura-
tion and reporting. A policy deﬁned by the content provider
is used to decide whether a particular ﬁle may be down-
loaded and uploaded; in addition, various conﬁgurable op-
tions apply to each download and upload. These policies and
options are securely communicated to the peers through the
trusted edge-server infrastructure. NetSession also uses in-
formation from the trusted edge servers to prevent account-
ing attacks [1], where compromised or faulty peers incor-
rectly report downloads and uploads.
3.6 The NetSession control plane
The NetSession control plane consists of a number of
globally-distributed servers that are operated by Akamai.
Its main function is to coordinate between the peers. Each
control plane server runs some of the following components:
Connection node (CN): The CNs are the endpoints of
the persistent TCP connections that the peers open to the
control plane when they are active. The CNs receive and
collect the usage statistics that are uploaded by the peers,
and they handle queries for objects the peers wish to down-
load. These persistent TCP connections are also used to tell
peers to connect to each other in order to facilitate sharing
of content. Such coordination is necessary for both security
reasons and to overcome NATs and ﬁrewalls.
Database node (DN): The DNs maintain a database of
which objects are currently available on which peers, as well
as details about the connectivity of these peers. Peers ap-
pear in the database only when a) uploads are explicitly
enabled on the peer, and b) the peer currently has objects
to share.
STUN: Peers periodically communicate with STUN compo-
nents over UDP and TCP to determine the details of their
connectivity (which are then stored in the DN databases)
and to enable NAT traversal. This involves a protocol with
goals similar to [25], but NetSession uses a custom imple-
mentation.
Monitoring node: Peers upload information about their
operation and about problems, such as application crash re-
ports, to these nodes. Processing their logs helps to monitor
the network in real-time, to identify problems, and to trou-
bleshoot speciﬁc user issues during support procedures.
3.7 Peer selection
When a CN receives a query for an object with peer-to-peer
delivery enabled, the CN asks the DNs to identify suitable
peers that currently have a copy of the requested object.
The CN then returns information about these peers to the
querying peer, and it instructs both the querying peer and
the chosen peers to initiate connections to each other. By de-
fault, up to 40 peers are returned, and if connections to some
of these peers cannot be established, additional queries are
issued until a suﬃcient number of peer connections succeed.
Peers control the number and utilization of their connections
based on current resource availability.
The DN chooses peers using a locality-aware strategy at
two diﬀerent levels. First, when a peer establishes its per-
sistent TCP connection to the control plane, it is mapped
to the closest available CN by Akamai’s DNS system [10].
When a CN queries the DN for peers for a speciﬁc object,
it prefers to contact only local DNs, i.e., DNs running on
machines in the same network region as the CN that per-
forms the query. (Network regions are deﬁned by proximity
to particular groups of servers.) Since the same process is
used when a peer registers a local copy of a ﬁle, DNs tend
to have information about their local peers. The CN/DN
system is interconnected across regions, so it is possible in
principle to search for peers from any region; however, long-
term experimentation has shown that using only local DNs
in searches does not negatively impact performance.
Since the current deployment has less than 20 network
regions, the ﬁrst, region-based selection strategy is not suf-
ﬁciently ﬁne-grained for popular content that is available on
many peers. Hence, the DNs use another level of locality-
34based peer selection that is based on the geolocation of each
peer. Each peer belongs to multiple sets, based on its public
IP address and the Autonomous System (AS) it is located
in. For example, a peer can simultaneously be in a universal
World set, a subset for a large geographical region, a subset
for a smaller region, and a subset for its speciﬁc AS.
DN selection begins with peers from the most speciﬁc set
that the querying peer belongs to, and proceeds to less spe-
ciﬁc sets until enough suitable peers are found. An addi-
tional mechanism adds diversity: Occasionally, peers are se-
lected from a less speciﬁc set, with probability proportional
to the speciﬁcity of the set. Also, when a peer is selected, it
is placed at the end of a peer selection list for fairness. The
selection process can be modiﬁed with a set of conﬁgurable
policies.
In addition to locality and ﬁle availability, the DN also
it selects
takes the connectivity of the peers into account:
only peers that are likely to be able to establish a connec-
tion with each other, e.g., based on the type of their NAT
or ﬁrewall. Due to the vast diversity in NAT implementa-
tions today, NAT hole punching is a complex issue, and the
necessary code takes up a large fraction of the NetSession
codebase.
3.8 Robustness
The design of NetSession employs the notions of soft state
and fate sharing to provide robustness against failures. At
ﬁrst glance, it might seem that the loss of CN or DN com-
ponents could be catastrophic to NetSession. Indeed, many
peers rely on each CN: over 150,000 might be connected to
one simultaneously. But ultimately, all of the data about
the peers that matters is held by the peers themselves. If
a CN goes down, the peers that are connected to that CN
simply reconnect to another one. If a DN goes down, the
CNs connected to that DN send a RE-ADD message to their
peers, asking them to list the ﬁles that they are storing. The
CN passes these lists on to the available DNs in order to re-
populate their databases.
In practice, failures of CN and
DN nodes occur routinely, e.g., during server maintenance
or during software updates. In fact, when a new CN/DN
software version is released, all CNs and DNs are restarted
in a short timeframe, and this does not negatively aﬀect the
service. (In the event of an unexpectedly large-scale failure,
reconnections are rate-limited to ensure a smooth recovery.)
Finally, if a peer is not able to connect to any CN at all, it
retrieves the content directly from the edge servers; hence,
even if the entire CN and DN infrastructure were to fail, the
peers would simply fall to back to retrieving content from
the CDN infrastructure.
The client software version is centrally controlled by the
CDN infrastructure, and peers can perform automated up-
grades in the background on demand. Most of the peer
population can be upgraded to a new version within one
hour. The ability to perform fast software upgrades without
user interaction can help to respond quickly to security or
performance incidents. Download and upload performance
is constantly monitored, and automated alerts are in place
to notify network engineers in case of large-scale problems.
3.9 Best practices
Since NetSession uses resources that are provided by the
peers, it must carefully consider the users’ interests. Net-
Session obtains consent from users through its EULA, and
Control plane logs:
Time period covered
Log entries
Number of GUIDs
Control plane servers
Distinct URLs
Distinct IPs
Downloads initiated
Geolocation data:
Distinct IPs
Distinct locations
Distinct autonomous systems
Distinct country codes
10/01 – 10/31, 2012
4,150,989,257
25,941,122
197
4,038,894
133,690,372
12,508,764
133,690,372
34,383
31,190
239
Table 1: Overall statistics for our data sets.
Akamai provides users with information about what the Net-
Session Interface is, and what it does. The software includes
both a control panel user interface and a command line util-
ity that enable users to determine what the software is doing,
which ﬁles it is currently storing, which applications are us-
ing it, etc. These tools also allow users to turn uploading on
or oﬀ, and it comes with an uninstaller.
NetSession is designed to protect the privacy of its users;
it does not capture personal information [3]. The data it
keeps is similar to that of a normal web server. When peers
download content from each other, they learn that other
peers with certain GUIDs and IP addresses already have the
requested ﬁle. However, this information is not displayed to
users and is deleted from the peer once a download completes
and the logs have been uploaded to the CNs for billing and
monitoring.
To avoid inconveniencing users, the NetSession Interface
is designed to stay in the background as much as possible.