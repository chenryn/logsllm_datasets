title:Using Generalization and Characterization Techniques in the Anomaly-based
Detection of Web Attacks
author:William K. Robertson and
Giovanni Vigna and
Christopher Kr&quot;ugel and
Richard A. Kemmerer
Using Generalization and Characterization Techniques in the
Anomaly-based Detection of Web Attacks
William Robertson, Giovanni Vigna, Christopher Kruegel, and Richard A. Kemmerer
Reliable Software Group
Department of Computer Science
University of California, Santa Barbara
{wkr,vigna,chris,kemm}@cs.ucsb.edu
Abstract
The custom, ad hoc nature of web applications makes
learning-based anomaly detection systems a suitable
approach to provide early warning about the exploita-
tion of novel vulnerabilities. However, anomaly-based
systems are known for producing a large number of false
positives and for providing poor or non-existent infor-
mation about the type of attack that is associated with
an anomaly.
This paper presents a novel approach to anomaly-
based detection of web-based attacks. The approach
uses an anomaly generalization technique that automat-
ically translates suspicious web requests into anomaly
signatures. These signatures are then used to group re-
current or similar anomalous requests so that an admin-
istrator can easily deal with a large number of similar
alerts.
In addition, the approach uses a heuristics-based
technique to infer the type of attacks that generated the
anomalies. This enables the prioritization of the at-
tacks and provides better information to the adminis-
trator. Our approach has been implemented and eval-
uated experimentally on real-world data gathered from
web servers at two universities.
1. Introduction
ten years,
In the past
the World-Wide Web has
evolved from a system to provide access to static infor-
mation into a full-ﬂedged distributed execution infras-
tructure. Web-based applications have become a popu-
lar way to provide access to services and dynamically-
generated information. The popularity of web-based ap-
plications, such as online shopping catalogs and web-
based discussion forums, is a result of the ease of de-
velopment, deployment, and access of this class of ap-
plications. Even network devices and traditional appli-
cations (such as mail servers) often provide web-based
interfaces that are used for administration as well as con-
ﬁguration.
Unfortunately, while the developers of the software
infrastructure (that is, the developers of web servers and
database engines) usually have a deep understanding of
the security issues associated with the development of
critical software, the developers of web-based applica-
tions often have little or no security skills. These devel-
opers mostly focus on the functionality for the end-user
and often work under stringent time constraints, without
the resources (or the knowledge) necessary to perform a
thorough security analysis of the application code. The
result is that poorly-developed code, riddled with secu-
rity ﬂaws, is deployed and made accessible to the whole
Internet.
Web-related security ﬂaws represent a substantial
portion of the total number of vulnerabilities. This claim
is supported by an analysis of the vulnerabilities that
have been made public in the past few years. For exam-
ple, by analyzing the Common Vulnerabilities and Ex-
posures (CVE) entries from 1999 to 2005 [5], we iden-
tiﬁed that web-based vulnerabilities account for more
than 25% of the total number of security ﬂaws. Note
that this is only a partial account of the actual number of
web-based vulnerabilities, since there are a number of
ad hoc web-based applications that have been developed
internally by companies to provide customized services,
and many of the security ﬂaws in these applications have
not yet been discovered or made public.
Because of their immediate accessibility, poor secu-
rity, and large installation base, web-based applications
have become popular attack targets and one of the main
venues to compromise the security of systems and net-
works. Preventing attacks against web-based applica-
tions is not always possible, and, even when suitable
mechanisms are provided, developers with little security
training (or simply with little time) sometimes disable
security mechanisms “to get the job done.” Therefore,
prevention mechanisms should be complemented by ef-
fective intrusion detection systems (IDSs).
To detect web-based attacks, intrusion detection sys-
tems are conﬁgured with a number of “signatures” that
support the detection of known attacks. These systems
match patterns that are associated with the exploitation
of known web-related ﬂaws against one or more streams
of events obtained by monitoring web-based applica-
tions [1, 14, 16, 21]. For example, at the time of writing,
Snort 2.3.3 [16] devotes 1064 of its 3111 signatures to
detecting web-related attacks. Unfortunately, it is hard
to keep intrusion detection signature sets updated with
respect to the new vulnerabilities that are continuously
being discovered. In addition, vulnerabilities may be in-
troduced by custom web-based applications developed
in-house. Developing ad hoc signatures to detect at-
tacks against these applications is a time-intensive and
error-prone activity that requires substantial security ex-
pertise.
Anomaly detection [6, 8, 9, 12] is an approach to in-
trusion detection that is complementary to the use of
signatures. Anomaly detection relies on models of the
normal behavior of users and applications to identify
anomalous activity that may be associated with intru-
sions. The main advantage of anomaly-based techniques
is that they are able to identify previously unknown at-
tacks. By deﬁning the expected, normal behavior, any
abnormality can be detected, whether it is part of a
known attack or not.
Anomaly detection can be performed by applying
different techniques to characterize the normal behavior
of a target system. Of particular interest for the detection
of attacks against web-based applications are learning-
based techniques, which build a model of the normal
behavior of an application by observing the usage pat-
terns of the application during a training period. Once
the model of normal behavior is established, the IDS
switches to “detection mode” and compares the behavior
of the application with respect to the model learned dur-
ing the training period, with the assumption being that
anomalous behavior is likely to be associated with an
intrusion (and that an intrusion will result in anomalous
behavior).
Learning-based techniques are particularly suitable
for the detection of web attacks, because they can detect
attacks against custom-developed code for which there
are no known signatures or attack models. These sys-
tems can also operate in unsupervised mode, with little
or no input from system administrators and application
developers. Therefore, they can be used by administra-
tors that have little security training.
For example, consider a custom-developed web-
based application called purchase, where the iden-
tiﬁer of the item to be purchased (itemid parame-
ter) and the credit card type (cc parameter) are inserted
by the user in a client-side form and then validated by
a server-side application invoked through the Common
Gateway Interface [4]. A set of sample invocations
of the purchase application, as logged by the web
server, is shown in Figure 1. In this case, a learning-
based anomaly detection system can build a model of
the itemid and cc parameters that are passed to the
application by analyzing a number of normal purchase
transactions. The models could characterize the length
of the parameters, their character distribution, or their
structure. Once these models have been learned by an-
alyzing a number of samples, each subsequent invoca-
tion of the purchase application is compared to the
established models, and anomalies in the parameters are
identiﬁed. For example, the last entry in Figure 1 would
be identiﬁed as an attack, because the itemid param-
eter has a structure (and length) that is anomalous with
respect to the established models.
Even though anomaly-based detection systems have
the potential to provide effective protection, there are
two main problems that need to be addressed. First,
learning-based anomaly detection systems are prone to
producing a large number of false positives. Second,
anomaly detection systems, unlike misuse-based sys-
tems, only report that there is an anomaly without any
supporting description of the attack that has been de-
128.111.41.15 "GET /cgi-bin/purchase?itemid=1a6f62e612&cc=mastercard" 200
128.111.43.24 "GET /cgi-bin/purchase?itemid=61d2b836c0&cc=visa" 200
128.111.48.69 "GET /cgi-bin/purchase?itemid=a625f27110&cc=mastercard" 200
131.175.5.35 "GET /cgi-bin/purchase?itemid=7e2877b177&cc=amex" 200
161.10.27.112 "GET /cgi-bin/purchase?itemid=80d2988812&cc=visa" 200
...
128.111.11.45 "GET /cgi-bin/purchase?itemid=109agfe111;ypcat%20passwd|mail%PI:EMAIL" 200
Figure 1. Sample log entries associated with invocations of the purchase application. The last
entry represents an attack against the application.
tected.
The goal of the work reported in this paper is to over-
come both of these problems. We have developed a sys-
tem that is based on an “anomaly generalization” mech-
anism that derives a generalized representation of the
anomalies detected by a learning-based intrusion detec-
tion system. The result is an “anomaly signature” that is
used to identify further occurrences of similar anoma-
lies. Similar anomalies are grouped together and are
then analyzed by the administrator to determine if each
group, as a whole, is composed of false positives or ac-
tual attacks.
If the alerts in a group are identiﬁed as
being false positives, then they can be dismissed with
a single decision, saving a considerable amount of the
administrator’s time. Also, the anomaly signature char-
acterizing the group can be used as a suppression ﬁl-
ter to prevent further false positives or as a new training
data set to improve the anomaly detection models. If the
alerts in a group are identiﬁed as instances of an actual
attack, then these alerts can be used as the basis to either
identify and ﬁx a security ﬂaw or to develop a “tradi-
tional” attack signature.
To address the problem of poor attack explanatory
information, our system uses a heuristics-based tech-
nique to infer the type of attack that generated the
anomaly. Our previous experience with the detection of
web-based attacks showed that while custom-developed
server-side code might be exploited using unpredicted
attribute values, the type of exploitation often follows
speciﬁc rules. Therefore, we developed heuristics that
can identify common classes of attacks, such as buffer
overﬂows, cross-site scripting, SQL injection, and di-
rectory traversals. Note that this characterization is dif-
ferent from a misuse detection signature, because our
heuristics are applied only to the portion of an event that
caused the anomaly (e.g., the value of a speciﬁc param-
eter). Therefore, if there are other parts of the data that
could appear as an attack but that are actually benign
(that is, they are normal according to the established pro-
ﬁle), then our characterization will not generate a false
positive, while a misuse detection signature probably
would.
In summary, our anomaly detection system can be de-
ployed on an existing web-based system, and in an un-
supervised fashion can characterize the normal behavior
of server-side components. It can then detect deviations
from the established proﬁle, group similar anomalies,
and, in some cases, give an explanation of the type of
attack detected.
This paper is structured as follows. Section 2 dis-
cusses related work and the limitations of current in-
trusion detection systems in their ability to detect web-
based attacks. Section 3 presents the architecture for our
system and brieﬂy describes its main components. Sec-
tion 4 presents the anomaly models used by the anomaly
detector. Section 5 describes our approach to anomaly
generalization. Section 6 discusses the characterization
of certain types of anomalies and the heuristics that we
use. Section 7 provides an evaluation of the approach
in terms of the overhead introduced, the reduction in the
number of false positives, and the ability to appropri-
ately characterize attacks. Finally, Section 8 draws con-
clusions and outlines future work.
2. Related Work
The work presented here is related to three different
areas of intrusion detection: learning-based anomaly de-
tection, application-level intrusion detection, and the de-
tection of attacks against web servers. In the following,
we discuss how previous work in these three areas relate
to our research.
Different types of learning-based anomaly detection
techniques have been proposed to analyze different data
streams. A common approach is to use data-mining
techniques to characterize network trafﬁc. For exam-
ple, in [15], the authors apply clustering techniques to
unlabeled network traces to identify intrusion patterns.
Statistical techniques have also been used to character-
ize user behavior. For example, the seminal work by
Denning [6] builds user proﬁles using login times and
the actions that users perform.
A particular class of learning-based anomaly detec-
tion approaches focuses on the characteristics of spe-
ciﬁc applications and the protocols they use. For ex-
ample, in [7] and in [3], sequence analysis is applied to
system calls produced by speciﬁc applications in order
to identify “normal” system call sequences for a certain
application. These application-speciﬁc proﬁles are then
used to identify attacks that produce previously unseen
sequences. As another example, in [13], the authors use
statistical analysis of network trafﬁc to learn the nor-
mal behavior of network-based applications. This is
done by analyzing both packet header information (e.g.,
source/destination ports, packet size) and the contents of
application-speciﬁc protocols.
Our approach is similar to these techniques because
it characterizes the benign, normal use of speciﬁc pro-
grams (i.e., server-side web-based applications). How-
ever, our approach is different from these techniques in
two ways. First, we use a number of different mod-
els to characterize the parameters used in the invocation
of the server-side programs. By using multiple models
it is possible to reduce the vulnerability of the detec-
tion process with respect to mimicry attacks [18, 23].
Second, the models target speciﬁc types of applications,
and, therefore, they allow for more focused analysis of
the data transferred between the client (the attacker) and
the server-side program (the victim). This is an advan-
tage of application-speciﬁc intrusion detection in gen-
eral [10] and of web-based intrusion detection in partic-
ular [11].
The detection of web-based attacks has recently re-
ceived considerable attention because of the increas-
ingly critical role that web-based applications are play-
ing. For example, in [1] the authors present a system that
analyzes web logs looking for patterns of known attacks.
A different type of analysis is performed in [2] where the
detection process is integrated with the web server appli-
cation itself. In [21], a misuse-based system that oper-
ates on multiple event streams (i.e., network trafﬁc, sys-
tem call logs, and web server logs) was proposed. Sys-
tems that focus on web-based attacks have demonstrated
that by taking advantage of the speciﬁcity of a particular
application domain it is possible to achieve better detec-
tion results. However, these systems are mostly misuse-
based and therefore suffer from the problem of not being
able to detect attacks that have not been previously mod-
eled.
In [19],
the authors propose a serial architecture
where web-related events are ﬁrst passed through an
anomaly detection component. Then, the events that are
identiﬁed as neither normal nor intrusive are passed on
to a misuse detection component. The system proposed
in [19] is different from our approach because it requires
extensive manual analysis to evaluate the characteristics
of the events being analyzed. Our goal is to require the
minimum amount of manual inspection and human in-
tervention possible. Therefore, we focus on techniques
to perform unsupervised, learning-based anomaly detec-
tion.
3. Architecture
The goal of detecting unknown attacks against
custom-developed software as well as characterizing
and grouping these attacks in a meaningful way ne-
cessitated the development of a novel approach to in-
trusion detection. In this approach, an event collector
and anomaly detection component are composed to pro-
vide the ability to detect unknown attacks. In addition,
three new components, an anomaly aggregation compo-
nent, an anomaly signature generation component, and
an attack class inference component, are introduced into
the architecture. The integration of these components
into the design allows the resulting system to harness
the strengths of anomaly detection while mitigating its
negative aspects. An overview of the architecture is de-
picted in Figure 2.
The event collector ﬁrst creates and normalizes the
events. The normalized events are then passed to the
anomaly detector, which determines whether the event
is anomalous or not. If an event is normal, no alert is
generated. If the event is anomalous, on the other hand,
 













 










 








