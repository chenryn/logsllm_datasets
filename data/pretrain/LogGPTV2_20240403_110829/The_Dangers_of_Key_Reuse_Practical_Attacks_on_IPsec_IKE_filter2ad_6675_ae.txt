TLS 1.2. In 2012, Mavrogiannopoulos et al. described a
cross-protocol attack against all TLS versions using ex-
plicit elliptic curve Difﬁe-Hellman parameters [26]. A
paper by Jager et al. [20] shows how to attack TLS 1.3
and QUIC from a Bleichenbacher oracle in some imple-
mentation of previous TLS versions.
11 Conclusion
In this paper, we have shown that all versions and vari-
ants of the IPsec’s Internet Key Exchange (IKE) protocol
can be broken, given two entry points.
The ﬁrst entry point is weak PSKs. Ofﬂine dictionary
attacks are possible against all three different variants,
with two different adversaries: IKEv1 PSK in aggressive
mode can be broken by a passive adversary, and both
IKEv1 PSK in main mode and IKEv2 PSK can be broken
by an active adversary who acts as a responder.
The second entry point is Bleichenbacher oracles in
the IKEv1 PKE and RPKE variants. We have shown
that such oracles exist
in Cisco, Clavister, Huawei,
and ZyXEL devices, and have computed their strength.
Given an oracle of this strength, we were able to show
that under the attack restrictions imposed by Cisco’s de-
fault values, we could successfully attack all public key-
based variants of IKEv1 and IKEv2 with success proba-
bilities between 7 % and 26 % in a single attempt. There-
fore, by repeating the attacks, all implementations can
be broken. In this work, we focus on IKE implementa-
tions. However, if network devices reuse RSA key pairs
for other services like SSH, TLS, etc., further attack sur-
faces could arise.
To counter these attacks, both entry points must be
closed: Only high entropy PSKs should be used, and
both PKE and RPKE modes should be deactivated in all
IKE devices.
It is not sufﬁcient to conﬁgure key sep-
aration on the sender side. All receivers must also be
informed about this key separation – novel solutions are
required to achieve this task.
Acknowledgments
The authors wish to thank Juraj Somorovsky and Tibor
Jager with whom we had long conversations regarding
Bleichenbacher attacks. Thanks to Cisco who provided
us test hardware for our experiments. This paper is
based in part upon work in the research projects SyncEnc
and VERTRAG, which are funded by the German
Federal Ministry of Education and Research (BMBF,
FKZ: 16KIS0412K and 13N13097), as well as the
FutureTrust project funded by the European Commission
(grant 700542-Future-Trust-H2020-DS-2015-1).
Notes
1RFC 2409 calls these keys SKEYID, SKEYIDd, SKEYIDa, and
SKEYIDe. We shorten these names for brevity.
2RFC 2409 calls these values HASH. This is misleading, since in
practice the HMAC version of the negotiated hash algorithm is used as
PRF. Therefore, we use the name MAC.
References
[1] Automotive Network Exchange. http://www.anx.
com/.
[2] European Network Exchange. http://www.enx.
com/.
[3] Japanese Network Exchange. https://www.jnx.
ne.jp/.
[4] 3RD GENERATION
PARTNERSHIP
PROJECT
(3GPP). 2018. 3GPP System Architecture Evolution
(SAE); Security architecture.
3GPP TS 33.401
V15.3.0.
http://www.3gpp.org/ftp/specs/
archive/33_series/33.401/33401-f30.zip.
[5] ADRIAN, D., BHARGAVAN, K., DURUMERIC, Z.,
GAUDRY, P., GREEN, M., HALDERMAN, J. A.,
HENINGER, N., SPRINGALL, D., THOM ´E, E., VA-
LENTA, L., VANDERSLOOT, B., WUSTROW, E.,
ZANELLA-B ´EGUELIN, S., AND ZIMMERMANN, P.
2015.
Imperfect forward secrecy: How Difﬁe-
Hellman fails in practice. In ACM CCS 15: 22nd Con-
ference on Computer and Communications Security.
[6] AVIRAM, N., SCHINZEL, S., SOMOROVSKY, J.,
HENINGER, N., DANKEL, M., STEUBE, J., VA-
LENTA, L., ADRIAN, D., HALDERMAN, J. A.,
DUKHOVNI, V., K ¨ASPER, E., COHNEY, S., EN-
GELS, S., PAAR, C., AND SHAVITT, Y. 2016.
In 25th
DROWN: Breaking TLS with SSLv2.
USENIX Security Symposium (USENIX Security 16).
[7] BARDOU, R., FOCARDI, R., KAWAMOTO, Y.,
SIMIONATO, L., STEEL, G., AND TSAY, J.-K. 2012.
580    27th USENIX Security Symposium
USENIX Association
Efﬁcient padding oracle attacks on cryptographic
hardware. In Advances in Cryptology–CRYPTO 2012.
[8] BIONDI, P. Scapy. http://www.secdev.org/
projects/scapy/.
[9] BLEICHENBACHER, D. 1998. Chosen ciphertext at-
tacks against protocols based on the RSA encryption
In Advances in Cryptology —
standard PKCS #1.
CRYPTO ’98.
[10] B ¨OCK, H., SOMOROVSKY, J., AND YOUNG, C.
2017. Return Of Bleichenbacher’s Oracle Threat
In 27th USENIX Security Symposium
(ROBOT).
(USENIX Security 18).
[11] CHECKOWAY, S., MASKIEWICZ,
J., GAR-
MAN, C., FRIED, J., COHNEY, S., GREEN, M.,
HENINGER, N., WEINMANN, R.-P., RESCORLA, E.,
AND SHACHAM, H. 2016. A systematic analysis of
the Juniper Dual EC incident. In ACM CCS 16: 23rd
Conference on Computer and Communications Secu-
rity.
[12] CISCO
SYSTEMS
security
command
ios
//www.cisco.com/c/en/us/td/docs/ios-
xml/ios/security/a1/sec-a1-cr-book/sec-
cr-c4.html#wp1444104032.
INC.
2017a.
reference.
Cisco
https:
[13] CISCO SYSTEMS INC. 2017b.
Conﬁguring
Internet Key Exchange for IPSec VPNs - RSA
Encrypted Nonces.
https://www.cisco.
com/en/US/docs/ios-xml/ios/sec_conn_
ikevpn/configuration/15-2mt/sec-key-
exch-ipsec.html#GUID-5257C56A-122F-47F6-
8BC5-3E462C946879.
[14] DEGABRIELE, J. P. AND PATERSON, K. G. 2007.
Attacking the IPsec standards in encryption-only con-
ﬁgurations. In 2007 IEEE Symposium on Security and
Privacy.
[15] DEGABRIELE, J. P. AND PATERSON, K. G. 2010.
On the (In)Security of IPsec in MAC-then-encrypt
conﬁgurations. In ACM CCS 10: 17th Conference on
Computer and Communications Security.
[16] HARKINS, D. AND CARREL, D. 1998. The In-
ternet Key Exchange (IKE). RFC 2409 (Proposed
Standard). Obsoleted by RFC 4306, updated by RFC
4109.
[18] HUAWEI TECHNOLOGIES CO., LTD. 2017. Au-
thentication methods IKEv1 USG2100/2200/5100
BSR&HSR
V300R001.
http://support.huawei.com/enterprise/
pages/doc/subfile/docDetail.jsp?
contentId=DOC1000010065&partNo=100172#
authentication-method_ike_pro.
USG2000/5000
&
[19] JAGER, T., PATERSON, K. G., AND SO-
MOROVSKY, J. 2013. One bad apple: Backwards
compatibility attacks on state-of-the-art cryptography.
In ISOC Network and Distributed System Security
Symposium – NDSS 2013.
[20] JAGER, T., SCHWENK, J., AND SOMOROVSKY, J.
2015. On the security of TLS 1.3 and QUIC against
In ACM
weaknesses in PKCS #1 v1.5 encryption.
CCS 15: 22nd Conference on Computer and Com-
munications Security.
[21] KALISKI, B. 1998. PKCS #1: RSA Encryption
Version 1.5. RFC 2313 (Informational). Obsoleted by
RFC 2437.
[22] KAUFMAN, C. 2005.
Internet Key Exchange
(IKEv2) Protocol. RFC 4306 (Proposed Standard).
Obsoleted by RFC 5996, updated by RFC 5282.
[23] KAUFMAN, C., HOFFMAN, P., NIR, Y., AND
ERONEN, P. 2010.
Internet Key Exchange Proto-
col Version 2 (IKEv2). RFC 5996 (Proposed Stan-
dard). Obsoleted by RFC 7296, updated by RFCs
5998, 6989.
[24] KAUFMAN, C., HOFFMAN, P., NIR, Y., ERONEN,
P., AND KIVINEN, T. 2014. Internet Key Exchange
Protocol Version 2 (IKEv2). RFC 7296 (INTERNET
STANDARD). Updated by RFCs 7427, 7670.
[25] KIVINEN, T. AND SNYDER, J. 2015. Signature
Authentication in the Internet Key Exchange Version
2 (IKEv2). RFC 7427 (Proposed Standard).
[26] MAVROGIANNOPOULOS, N., VERCAUTEREN, F.,
VELICHKOV, V., AND PRENEEL, B. 2012. A cross-
protocol attack on the TLS protocol. In ACM CCS 12:
19th Conference on Computer and Communications
Security.
[27] MEYER, C., SOMOROVSKY,
J., WEISS, E.,
SCHWENK, J., SCHINZEL, S., AND TEWS, E. 2014.
Revisiting SSL/TLS Implementations: New Blei-
In 23rd
chenbacher Side Channels and Attacks.
USENIX Security Symposium (USENIX Security 14).
[17] HORST, M., GROTHE, M., JAGER, T., AND
SCHWENK, J. 2016. Breaking PPTP VPNs via RA-
In CANS 16: 15th International
DIUS Encryption.
Conference on Cryptology and Network Security.
[28] PATERSON, K. G. AND YAU, A. K. 2006. Cryp-
tography in theory and practice: The case of encryp-
In Advances in Cryptology – EURO-
tion in IPsec.
CRYPT 2006.
USENIX Association
27th USENIX Security Symposium    581
[29] SOMOROVSKY, J. 2016. Systematic fuzzing and
testing of TLS libraries. In ACM CCS 16: 23rd Con-
ference on Computer and Communications Security.
A IKEv1 with Signature Authentication
Figure 14: PKCS #1 v1.5 padding for RSA public key
encryption
The IKEv1 and IKEv2 signature authentication modes
are similar and both target of our signature forgery at-
tack. Supplementary to the description of the IKEv2
variant (cf. Figure 6), here we present the IKEv1 sig-
nature authentication mode in detail. Figure 13 shows
the message ﬂow for this mode.
First, the initiator creates a set of proposals consisting
of algorithms, key lengths, and additional parameters and
sends it with his initiator cookie to the responder. The re-
sponder selects a proposal based on his conﬁgured poli-
cies. After that, initiator and responder exchange DHKE
parameters and nonces.
Both peers are now able to derive all symmetric keys.
In order to conﬁrm the keys and authenticate against each
other, a MAC is computed by each party using key k from
the key derivation. Subsequently, two signatures are gen-
erated by the peers: one over MACI and one over MACR.
After both peers exchanged their signatures and option-
ally the corresponding certiﬁcates, they validate the sig-
natures and continue with Phase 2 only if the signatures
are valid.
Figure 13: IKEv1 in Phase 1 using main mode with sig-
nature based authentication. Differences to Figure 3 are
highlighted.
B PKCS#1 Padding
In the following, a||b denotes concatenation of strings
a and b. a[i] references the i-th byte in a. (cid:96)a is the
byte-length of string a.
(N,e) denotes an RSA pub-
lic key, where N is the public modulus and e is the
public exponent. The corresponding secret exponent is
d = 1/e mod φ (N).
The PKCS #1 v1.5 encryption padding scheme [21]
randomizes encryptions by requiring the encoding shown
in Figure 14. To encrypt a plaintext message n (here, a
nonce), the following steps have to be performed:
1. The encrypter generates a random byte string P of
length (cid:96)P = (cid:96)N − (cid:96)n − 3. P must not contain 0x00
bytes (i. e. P[i] (cid:54)= 0x00 ∀i ∈ [1...(cid:96)P]). Furthermore,
P must be at least eight bytes long ((cid:96)P ≥ 8).
2. The message with padding before encryption is
m = 0x00|| 0x02||P|| 0x00||n.
3. The ciphertext is computed as c = me mod N.
To decrypt such a ciphertext, the na¨ıve decrypter per-
forms the following steps:
1. Compute m = cd mod N.
2. Check if m[1]||m[2] = 0x00|| 0x02. Reject the
ciphertext otherwise.
3. Check if m[i] (cid:54)= 0x00 ∀i ∈ [3...10]. Reject the
ciphertext otherwise.
4. Search for the ﬁrst i > 10 such that m[i] = 0x00.
Reject the ciphertext if no i is found.
5. Recover the message n = m[i + 1]|| ...||m[(cid:96)N]
However, if the attackers learn whether the decrypter
rejects messages due to the checks performed in steps
2–4, the decrypter is susceptible to Bleichenbacher’s at-
tack.
C Key Types of Cisco IOS
Our key reuse attack assumes that the same RSA key
pairs are used for encryption and signatures. When gen-
erating RSA key pairs, Cisco IOS gives the administra-
tor a choice: The default is to create general-keys, which
generates a single key pair for all authentication methods
that is vulnerable to our attacks. The other option is to
582    27th USENIX Security Symposium
USENIX Association
Initiator(IDI,skI,certI)Responder(IDR,skR,certR)m1:=(proposals)−cI,0,m1−−−−−−−−−−−→m2:=(proposal)←−cI,cR,m2−−−−−−−−−−−m3:=(gx,nI)−cI,cR,m3−−−−−−−−−−−→m4:=(gy,nR)←−cI,cR,m4−−−−−−−−−−−k:=PRFnI,nR(gxy)Derivekd,ka,kefromkk:=PRFnI,nR(gxy)Derivekd,ka,kefromkComputeMACIusingkσI:=Sign(skI,MACI)m5:=Encke([certI],σI)−cI,cR,m5−−−−−−−−−−−→ComputeMACRusingkσR:=Sign(skR,MACR)m6:=Encke([certR],σR)←−cI,cR,m6−−−−−−−−−−−Vfy(certR,σR)Vfy(certI,σI)000200random non-zerononcelength noncelength of RSA moduluscreate usage-keys, through which two RSA special-usage
key pairs – one encryption pair and one signature pair –
are generated. In their documentation [12], Cisco states
the following:
If you plan to have both types of RSA authenti-
cation methods in your IKE policies, you may
prefer to generate special-usage keys. With
special-usage keys, each key is not unneces-
sarily exposed.
(Without special-usage keys,
one key is used for both authentication meth-
ods, increasing the exposure of that key.)
We have not evaluated whether special usage keys are a
working countermeasure against our key reuse attack.
USENIX Association
27th USENIX Security Symposium    583