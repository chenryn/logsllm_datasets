catch ( SystemException e ) {
File . Delete(tempFile );
Console.WriteLine(”Deleted {0}.” , tempFile );
}
}
public class PlugIn : Naive {
[ FileIOPermissionAttribute
( SecurityAction .Deny, Unrestricted =true )]
override protected void proceed () {
try {
tempFile = ” ..\\ password”;
File . Delete(tempFile );
}
}
catch ( SecurityException e ) {
Console.WriteLine(”The ﬁrst attempt
throw new SystemException(”Out of memory.”);
failed .” );
}
}
}
class Top {
}
static void Main () { new PlugIn (). m (); }
Here, the untrusted class PlugIn is a subclass of the
trusted but naive class Naive, and overrides one of its
methods, proceed. The call PlugIn (). m() triggers a call
to proceed, which will in turn ﬁrst cause a security ex-
ception with an attempt to delete a ﬁle, then will throw a
system exception. The exception handler in Naive ﬁnally
attempts to delete a ﬁle—but not a temporary ﬁle as was
presumably intended in Naive. With history-based access
control, the fact that the new code for proceed is untrusted
is automatically considered in deciding whether to delete
the ﬁle.
4.3 A History-Based Policy
In the security literature, some policies use a history of
past sensitive operations as an input to later access-control
decisions. For example, with Chinese Wall policies, ac-
cess to data is not constrained by attributes of the data in
question but by what data the subject has already chosen
to access [3]. See Section 8 for further references and dis-
cussion.
While our model does not embody those policies, it can
sometimes help in supporting them. As an example, we
show how it can help in building a simple Chinese Wall.
In the example, a program initially has access to code
from two companies, A and B, but it can actually use code
from at most one of the companies. The code may include
proprietary data and procedures from the two companies,
and might send information back to A and B, respectively.
First, we create a speciﬁc class of permission with a
constant string parameter whose presence indicates that
code from a given origin is still allowed to run.
// Speciﬁc permission for compartments.
// Most method implementations are omitted .
public class CompartmentAccess : Permissions {
// permission to access a speciﬁc compartment
string id ;
public CompartmentAccess(string id ) { this . id = id ; }
// permission to access all compartments
public CompartmentAccess () { ... }
}
The code received from company A need not be modi-
ﬁed, or even inspected beyond a normal type-safety veri-
ﬁcation. However, a security policy should be attached to
that code, for instance using attributes:
in CLR parlance:
// Static rights of type CompartmentAccess contain
// at most CompartmentAccess(”A”); demanded rights
// for all code include CompartmentAccess(”A”);
//
[assembly:CompartmentAccessAttribute
( SecurityAction . RequestOptional , id=”A”)]
[assembly:CompartmentAccessAttribute
( SecurityAction .Demand, id=”A”)]
// Code from company A, unchanged.
class libraryA { ... }
public class A : Contractor { ... }
The code received from company B is handled similarly.
Now, automatically, a program that initially has access
to code from the two companies can actually use code
from at most one of them. In other words, our Chinese
Wall policy is enforced by the underlying history-based
machinery, without any extra state and extra bookkeeping
at compartment boundaries. For example, one may write
a program that selects an offer:
public class CompliantCustomer {
int examine() {
...
if ( should consider A ) {
Contractor a = new A(query);
// No B code will ever run past
return A. offer ();
}
}
public void main() {
this point .
int offer = examine ();
Contractor b = new B();
// Raises a security exception if any A code
// has run.
...
}
}
The security policy may further specify that the per-
missions to access the two compartments should not be
restorable via explicit modiﬁcations. Thus, the program
would raise a security exception even if it tries to restore
the right to use B’s code after calling A’s code.
Going beyond the separation between A and B, one may
enforce policies that constrain access to code in the com-
partments, that is, to contractor code. For instance, access
to that code may be allowed only up to a certain program
stage, and certain sensitive operations might even require
that contractor code has never run:
public void PrivateStuff () {
// First exclude further contractor code:
new CompartmentAccess().Deny (); ...
}
public void SensitiveStuff
() {
// First check that no contractor code has ever run:
new CompartmentAccess().Demand (); ...
}
5 High-Level Programming Constructs
(in C])
Even if they are not strictly part of the security model,
high-level language constructs can help programmers un-
derstand and live in harmony with rights management.
Consider, as an analogy, the related situation in excep-
tion handling. In principle, it would be possible to pro-
vide access to exception handling using a special library
for registering callbacks to be triggered when an excep-
tion occurs. Nonetheless, using scoped constructs such
as try {} catch () {} ﬁnally {} helps. We believe that,
similarly, language constructs are helpful in dealing with
security.
We identify two common programming patterns for the
controlled modiﬁcation of rights in security-aware code.
These patterns, named “Grant” and “Accept”, consist of
the following operations:
Grant: When running after less trusted code (e.g., when
called by that code):
• check that the execution state is ok,
• amplify rights (to a speciﬁc subset of the code’s
static rights),
• perform sensitive operations, and
• reduce rights (at least to their initial state).
This pattern is analogous to certain explicit am-
pliﬁcations mechanisms used with stack inspection
(DoPrivileged in Java, Assert in the CLR) with sim-
ilar effects but different implementations.
Accept: When running less trusted code (e.g., when call-
ing less trusted methods):
• save parts of the execution state,
• perform untrusted operations,
• check that the execution state is ok, and
• amplify rights (at most to their initial state).
This pattern does not explicitly reduce rights before
the untrusted operations: since these operations have
limited static rights, this reduction occurs automati-
cally. (In Section 6, we show that, with some care,
Accepts can be used to implement the same behavior
as stack inspection.)
Both patterns comply with the efﬁcient calling convention
outlined in Section 3.2: their ﬁnal current rights are al-
ways included in their initial current rights. In both cases,
the operation that checks whether the execution state is
ok depends on the security policy, and typically involves
validating some of the values passed as parameters and
checking the presence of some current rights.
These patterns would greatly beneﬁt from direct syn-
tactic support in programming languages (as is already
the case with stack-based rights computations). Next, we
describe corresponding high-level programming-language
constructs, in the context of C], and sketch their imple-
mentation in terms of lower-level operations on current
rights. A more detailed implementation in C] and exam-
ples are given in the appendix.
We extend the grammar of statements with two con-
structs, Grant(P) {B} and Accept(P) {B}, where P is a
subset of the static permissions to be ampliﬁed and {B} is
a block of code containing the operations to be performed
(and which are the scope of the constructs). Optionally, P
may be omitted, its default value being all static permis-
sions. These statements are executed as follows:
Grant(P){B}: Before running B, the initial value of the
current permissions is saved and the selected permis-
sions P are added to the current permissions. When
B completes (possibly with an exception), the current
permissions are assigned the intersection of their ini-
tial and ﬁnal values. Note that Grant does not leave
extra rights after completion of the block B, and pre-
serves the loss of any right while running B.
Accept(P) {B}: Before running B, the initial value of the
current permissions is saved.
If B completes nor-
mally, then the intersection of this initial value and
P is added to the current permissions. (If B termi-
nates with an uncaught exception, then the current
permissions are not modiﬁed.)
The code that executes Accept takes responsibility
for the effect of the operations performed by B on
the rest of the program, and should therefore perform
sufﬁcient checks within B before its normal comple-
tion. Note that Accept does not provide any extra
right before the completion of B.
6 Further Comparison with
Stack Inspection
As Sections 3 and 4 explain, history-based access con-
trol has safety and simplicity beneﬁts, and it is also at-
tractive from a performance perspective (in particular, be-
cause it enables compiler optimizations). We now revisit
the relation between history-based and stack-based access
control, further relating their effects.
Technically, the key difference between history-based
and stack-based access control occurs when a method ter-
minates (normally or with an exception). In our model,
with the calling convention given in Section 3.2, the cur-
rent rights when a method terminates are lower than or
equal to their value before the method call. In contrast,
with stack inspection, the current rights are restored to
their value before the method call, possibly augmenting
them. Therefore, given the same static rights and assum-
ing our calling convention, history-based current rights are
always included in stack-based current rights. This prop-
erty can be quite helpful in transitioning from stack-based
to history-based access control: legacy code may generate
additional security exceptions, but should remain at least
as secure.
History-based and stack-based access control can also
be compared by studying encodings of each in terms of
the other.
• To recover a stack-inspection semantics on top of
history-based mechanisms, we can add an “Accept”
around every call that may lower the current rights
(typically, around every call to potentially less trusted
code). For example, we may write:
Accept( current ) { applet .run (); }; SQL.run();
If the call to applet .run() entails the loss of some
permissions because applet .run() is untrusted code
with few static rights, then the “Accept” may re-
store those permissions. Those permissions may be
needed for executing SQL.run().
We believe that there are relatively few such calls
in existing libraries and, more importantly, that the
presence of an “Accept” or not for such calls should
not make any difference in most legacy applications:
at this stage, there are not many partially trusted li-
braries, and even the libraries designed to be callable
from partially trusted code do not often rely (or
should not rely) on partially trusted code for their im-
plementation.
• Conversely, to implement history-based rights on top
of stack inspection mechanisms, for any given call,
we can (in theory) apply a “continuation-passing-
style” transform that passes an extra function param-
eter to be called with the result, upon completion
of the callee. Hence, the callee still appears on the
stack while its result is used by the caller’s continua-
tion. However, this encoding is not practical, except
maybe for a few sensitive interfaces.
As an example of the latter encoding, consider the follow-
ing method, which takes a delegate parameter:3
// Deﬁne the class StringCode of “ code pointers ” to
// methods that
take no argument and return a string .
public delegate string StringCode ();
3In C], an instance of a delegate class encapsulates an object and a
method on that object with a particular signature. So a delegate is more
than a C-style function pointer, but slightly less than a closure. When it
encounters a delegate declaration, the compiler provides an implementa-
tion for the class of delegates with the given method signature.
public class Plain {
public static void Foo(StringCode badCode)
{
string s = badCode();
// When checking permissions,
// badCode is not on the stack anymore.
File . Delete(s );
}
}
With stack-inspection, this dangerous method enables
any untrusted code badCode passed as a parameter to pick
the ﬁle to be deleted. To implement the more secure be-
havior of history-based permissions, on top of stack-based
permissions, for this method only, one may use instead:
// Deﬁne two auxiliary delegate classes :
public delegate void StringCont ( string s );
public delegate void StringApplet (StringCont c );
public class Encoded {
// Same function , with a different API
public static void Foo( StringApplet badCode)
{
// Use a built −in constructor of class StringCont
//
StringCont sc = new StringCont(Callback );
to create a delegate to method Callback:
// Pass this delegate to badCode:
badCode(sc);
}
private static void Callback( string s)
{
// When checking permissions,
// badCode is
File . Delete(s );
still on the stack .
}
}
7 History-Based Rights and
System Security
When a piece of code is veriﬁed and managed by a lan-
guage runtime, its sensitive operations (hence its rights)
still affect a broader, layered security infrastructure which
may include, for instance, a local-host operating system
and some distributed components. Each layer provides
its own security models and mechanisms, with sometimes
unfortunate overlaps and discrepancies.
For instance, rights management in the CLR is gener-
ally ﬁner and more expressive than in NT, since the CLR
can rely on type safety rather than memory isolation, but
there is also a deep mismatch between permissions in the
CLR and access control in NT. Even when they manipu-
late the same abstract rights, such as ﬁle access rights, the
two layers use distinct models and interfaces, with no ob-
vious mapping between the two. Pragmatically, the CLR
expects to run as a highly-trusted application and, after
performing its own security checks, calls the system with
all its privileges (see also [21, page 7]). Hence, erroneous
ampliﬁcations of rights within the CLR can typically be
exploited despite NT security.
Our model has a more direct counterpart in terms of
system security.
In the context of NT [19, page 506],
the “restricted token” mechanism enables us to construct
a disjunction of a user id with some set of special secu-
rity identiﬁers (SIDs) to represent limitations of rights;
this disjunction corresponds to the intersection of current
rights described in point 5 of Section 3 (Automatic up-
dates). Speciﬁcally, we can interpret restricted tokens as
the result of a coarse-grained history-based computation:
• The system represents rights symbolically, using sets
of SIDs. From these SIDs, an access-control policy
computes the access rights for speciﬁc objects, on de-
mand. For every process, the system represents the
current rights as a security token, consisting of one
or more such sets of SIDs. The process is granted a
right when each set of SIDs independently grants the
right. At any point, one can update the current rights