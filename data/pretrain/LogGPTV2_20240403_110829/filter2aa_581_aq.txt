### OpenID Connect and Dynamic Client Registration

When using OpenID Connect, the relying party (RP) must have a client ID and a client secret (except for the implicit grant type) registered with the OpenID provider (OP) to initiate an authorization or authentication request. The OpenID Connect Dynamic Client Registration specification facilitates the dynamic registration of RPs at the OP. The metadata endpoint of the OP includes a `registration_endpoint` parameter, which specifies the URL for client registration. To support dynamic registrations, this endpoint should accept open registration requests without requiring authentication.

To mitigate denial of service (DoS) attacks, the registration endpoint can be protected with rate limits or a web application firewall (WAF). The RP initiates the registration process by sending an HTTP POST request to the registration endpoint, including its metadata.

#### Sample Client Registration Request
```http
POST /connect/register HTTP/1.1
Content-Type: application/json
Accept: application/json
Host: auth.server.com

{
  "application_type": "web",
  "redirect_uris": ["https://app.client.org/callback", "https://app.client.org/callback2"],
  "client_name": "Foo",
  "logo_uri": "https://app.client.org/logo.png",
  "subject_type": "pairwise",
  "sector_identifier_uri": "https://other.client.org/file_of_redirect_uris.json",
  "token_endpoint_auth_method": "client_secret_basic",
  "jwks_uri": "https://app.client.org/public_keys.jwks",
  "userinfo_encrypted_response_alg": "RSA1_5",
  "userinfo_encrypted_response_enc": "A128CBC-HS256",
  "contacts": ["PI:EMAIL", "PI:EMAIL"],
  "request_uris": ["https://app.client.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA"]
}
```

#### Sample Response from the OpenID Provider
```http
HTTP/1.1 201 Created
Content-Type: application/json
Cache-Control: no-store
Pragma: no-cache

{
  "client_id": "Gjjhj678jhkh89789ew",
  "client_secret": "IUi989jkjo_989klkjuk89080kjkuoikjkUIl",
  "client_secret_expires_at": 2590858900,
  "registration_access_token": "this.is.an.access.token.value.ffx83",
  "registration_client_uri": "https://auth.server.com/connect/register?client_id=Gjjhj678jhkh89789ew",
  "token_endpoint_auth_method": "client_secret_basic",
  "application_type": "web",
  "redirect_uris": ["https://app.client.org/callback", "https://app.client.org/callback2"],
  "client_name": "Foo",
  "logo_uri": "https://client.example.org/logo.png",
  "subject_type": "pairwise",
  "sector_identifier_uri": "https://other.client.org/file_of_redirect_uris.json",
  "jwks_uri": "https://app.client.org/public_keys.jwks",
  "userinfo_encrypted_response_alg": "RSA1_5",
  "userinfo_encrypted_response_enc": "A128CBC-HS256",
  "contacts": ["PI:EMAIL", "PI:EMAIL"],
  "request_uris": ["https://app.client.org/rf.txt#qpXaRLh_n93TTR9F252ValdatUQvQiJi5BDub2BeznA"]
}
```

Once the RP obtains a client ID and a client secret, it completes the OpenID Connect Discovery phase and can now initiate the OpenID Connect authentication request.

### OpenID Connect for Securing APIs

OpenID Connect is primarily used for user authentication, while OAuth 2.0 is used for delegated authorization. However, OpenID Connect can also be used to secure APIs. End users can authenticate into web and mobile applications using OpenID Connect, but why would you need it to secure a headless API?

In reality, most APIs are secured with OAuth 2.0, and access tokens are required to interact with the API. The API (or policy enforcement component) validates the access token by communicating with the authorization server. An ID token, which is an assertion about the user's identity, can be used to authenticate into an API. As of now, there is no standard HTTP binding defined for JWT.

#### Example of Using an ID Token as an Access Token
```http
POST /employee HTTP/1.1
Content-Type: application/json
Accept: application/json
Host: resource.server.com
Authorization: Bearer eyJhbGciOiljiuo98kljlk2KJl.IUojlkoiaos298jkkdksdosiduIUiopo.oioYJ21sajds

{
  "empl_no": "109082",
  "emp_name": "Peter John",
  "emp_address": "Mountain View, CA, USA"
}
```

To validate the JWT, the API (or the policy enforcement component) extracts the JWT from the HTTP Authorization header, base64-url-decodes it, and verifies the signature to ensure it was signed by a trusted issuer. Additionally, the claims in the JWT can be used for both authentication and authorization.

### Summary

- **OpenID Connect** is built on top of OAuth 2.0 and introduces an identity layer, abstracted into an ID token, which is a JSON Web Token (JWT).
- **OpenID Connect** evolved from OpenID to an OAuth 2.0 profile.
- The **OpenID Connect Dynamic Client Registration** specification allows for the dynamic registration of RPs at the OP.
- OpenID Connect defines two methods to request user attributes: through the initial authentication request or via the UserInfo endpoint hosted by the authorization server.
- OpenID Connect uses the WebFinger protocol in its discovery process, along with dynamic client registration and identity provider metadata configuration.
- An OpenID Connect identity provider that supports metadata discovery should host its configuration at the `.well-known/openid-configuration` endpoint.

### Message-Level Security with JSON Web Signature (JWS)

JSON provides a language-neutral, text-based, and lightweight way to exchange data. It has largely replaced XML in many use cases. JSON Web Token (JWT) is a standard for securely transmitting information between parties as a JSON object. It became an IETF standard in May 2015 with RFC 7519.

#### Understanding JWT

A JWT consists of three parts: the JOSE header, the payload (claims set), and the signature. Each part is base64url-encoded and separated by a dot (.).

##### JOSE Header
The JOSE header lists the properties related to the cryptographic operations applied to the JWT claims set. For example:
```json
{
  "alg": "RS256",
  "kid": "78b4cf23656dc395364f1b6c02907691f2cdffe1"
}
```

##### JWT Claims Set
The claims set is a JSON object that carries the business data. For example:
```json
{
  "iss": "accounts.google.com",
  "sub": "110502251158920147732",
  "azp": "825249835659-te8qgl701kgonnomnp4sqv7erhu1211s.apps.googleusercontent.com",
  "email": "prabath@wso2.com",
  "at_hash": "zf86vNulsLB8gFaqRwdzYg",
  "email_verified": true,
  "aud": "825249835659-te8qgl701kgonnomnp4sqv7erhu1211s.apps.googleusercontent.com",
  "hd": "wso2.com",
  "iat": 1401908271,
  "exp": 1401912171
}
```

The JWT specification defines three classes of claims: registered, public, and private. Registered claims are listed in the IANA JSON Web Token Claims registry, but their usage is not mandatory. Specifications like OpenID Connect define which claims are mandatory and which are optional.

- **iss (issuer)**: The issuer of the JWT, represented as a case-sensitive string.
- **sub (subject)**: The entity for which the JWT is issued, represented as a case-sensitive string.

This structure and the use of JWT provide a robust and flexible way to handle identity and security in modern web and API architectures.