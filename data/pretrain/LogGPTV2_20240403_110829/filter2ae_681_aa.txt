原文链接：https://lgtm.com/blog/apache_struts_CVE-2018-11776
## 前言
2018年4月，我向Struts安全小组报告了在Apache Struts新发现的一个远程代码执行漏洞，漏洞已被标记为2018-11776
(S2-057)，在某些配置下,如果一个服务器上运行了Struts，那么这个漏洞就会出现，或者访问特定的URL，这个漏洞也会出现。有关Struts的版本和配置受影响的详细信息、缓解步骤和披露过程，请参见博客。
这一发现是我对ApacheStruts安全性研究的一部分，在这篇文章中，我将介绍发现漏洞的过程。我将解释如何使用已知的漏洞来获取Struts内部运行的信息，并创建封装Struts-specific概念的QL查询，运行这些查询后问题代码就会被标出来。这些查询被托管在GitHub上，随着研究的继续，我们将向这个存储库添加更多的查询和库，以支持Struts和其他项目的安全性研究。
## 探寻攻击面
许多安全漏洞涉及到的数据，一方面可能是它们的来源不受信任，比如有的数据来源于用户的输入，也可能是数据使用方式的问题，例如，SQL查询、反序列化、其他一些解释语言，等等。QL让搜索这种类型的漏洞变得容易，您只需描述各种资料，然后DataFlow
library就能完成所有的工作。对于一个特定的项目来说，查看该软件较旧版本的已知漏洞，就可以让你轻松地找到你想要的各种资料。
在这次调查中，我首先查看了rce漏洞S2-032 (CVE-2016-3081), S2-033 (CVE-2016-3687)和S2-037
(CVE-2016-4438)。与Struts中的许多其他RCEs一样，这些用户们不可靠的输入被认定为OGNL表达式，该表达式允许攻击者在服务器上运行任意代码。这三个漏洞特别有趣，不仅因为它们让我们对Struts的内部工作有了一些深入的了解，更重要的是，相同的问题居然需要三次尝试才能解决！
这三个问题都是让methodName作为OgnlUtil::getValue()的参数，从而传递远程输入。
    String methodName = proxy.getMethod();    // context, final Object root) throws OgnlException {
      return compileAndExecuteMethod(name, context, new OgnlTask() {
        public Object execute(Object tree) throws OgnlException {
          return Ognl.getValue(tree, context, root);
        }
      });
    }
在执行它们之前,compileAndExecuteMethod()将会执行对表达式的附加检查：
    private  Object compileAndExecuteMethod(String expression, Map context, OgnlTask task) throws OgnlException {