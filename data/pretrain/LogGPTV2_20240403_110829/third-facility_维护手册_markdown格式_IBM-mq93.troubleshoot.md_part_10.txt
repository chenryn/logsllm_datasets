### Identifying and Troubleshooting Issues in IBM MQ for z/OS

#### 1. Unexpected Messages
Your application might encounter unexpected messages, which can include:
- **Missing Expected Messages:** The application did not receive a message it was expecting.
- **Corrupted or Incorrect Messages:** The received message contains unexpected or corrupted information.
- **Unintended Messages:** The application received a message that was intended for a different application.

For more information, refer to "Dealing with incorrect output on z/OS" on page 294.

#### 2. Unexpected Error Messages or Return Codes
If your application receives an unexpected error message or return code, consider the following:

- **IBM MQ Error Messages:**
  - IBM MQ for z/OS error messages are prefixed with `CSQ`.
  - If you receive an unexpected IBM MQ error message (e.g., in the console log or CICS log), consult the "IBM MQ for z/OS messages, completion, and reason codes" for an explanation. This may provide enough information to resolve the issue quickly or redirect you to further resources. If the problem persists, contact IBM Support for assistance.

- **Non-IBM MQ Error Messages:**
  - If the error message is from another IBM program or the operating system, refer to the appropriate documentation for an explanation.
  - In a queue-sharing environment, look for the following prefixes:
    - **XES:** Prefixed with `IXL`
    - **Db2:** Prefixed with `DSN`
    - **RRS:** Prefixed with `ATR`

- **Unexpected Return Codes:**
  - If your application receives an unexpected return code from IBM MQ, see the "Return codes" section for guidance on handling IBM MQ return codes.

#### 3. Abnormal Termination (Abend)
If your application stops running, it might be due to an abnormal termination (abend). Abends can be caused by:
- **User-Initiated Actions:** For example, purging a CICS transaction.
- **Application Errors:** An error in the application program.

You will be notified of an abend in the following ways, depending on the type of application:
- **Batch Applications:** The abend is shown in the listing.
- **CICS Applications:** A CICS transaction abend message is displayed. If the task is a terminal task, the message appears on the screen; otherwise, it is logged in the CICS CSMT log.
- **IMS Applications:** A message is displayed at the IBM MQ for IMS master terminal and in the listing of the dependent region. If an IMS transaction entered from a terminal was being processed, an error message is also sent to that terminal.
- **TSO Applications:** You might see a TSO message with a return code on your screen, depending on your system setup and the type of error.

In some cases, an address space dump is produced. For CICS transactions, a transaction dump showing the storage areas of interest is provided.

- **Invalid Data Address:** If an application passes data with an invalid address, a dump might be produced in the user's address space.
- **Batch Dump:** The dump is formatted and written to `SYSUDUMP`. For more information, see "SYSUDUMP information on z/OS" on page 285.
- **CICS Dump:** A system dump is written to the `SYS1.DUMP` data sets, along with a transaction dump.

- **IBM MQ for z/OS Abends:** If an abend is caused by IBM MQ for z/OS, an abend code of `X'5C6'` or `X'6C6'` is returned, along with an abend reason code. For more information, see "IBM MQ for z/OS abends" on page 250 and "Return codes" for an explanation of the reason code.

If your program has terminated abnormally, refer to "Dealing with abends on IBM MQ for z/OS" on page 252. For analyzing dumps, see "IBM MQ for z/OS dumps" on page 267.

#### 4. No Response from an MQSC Command
If you issued an MQSC command from an application but received no response, consider the following:

- **Command Server Status:**
  - Use the `DISPLAY CMDSERV` command at the z/OS console to check if the command server is running.
  - If the command server is not running, start it using the `START CMDSERV` command.
  - If the command server is running, use the `DISPLAY QUEUE` command with the `CURDEPTH` and `MAXDEPTH` attributes to check the system-command input queue. If the queue is full, messages might not be read.

- **Dead-Letter Queue:**
  - Use the `DISPLAY QMGR DEADQ` command to find the name of the dead-letter queue.
  - Check the `CURDEPTH` attribute to see if there are any messages on the queue. The dead-letter header structure contains a reason or feedback code describing the problem. For more information, see "Reason (MQLONG)".

- **Queue Enablement:**
  - Use the `DISPLAY QUEUE` command to check if the queues are enabled for `PUT` and `GET`.

- **WaitInterval Parameter:**
  - If your `MQGET` call times out, your application receives a completion code of `2` and a reason code of `2033` (MQRC_NO_MSG_AVAILABLE). For more information, see "WaitInterval (MQLONG)" and "MQGET - Get message".

- **Sync Point:**
  - Ensure you take a sync point after putting messages to a queue and before attempting to receive reply messages, or use `MQPMO_NO_SYNCPOINT` when putting them.

- **Queue Parameters:**
  - Verify that the `MaxDepth` and `MaxMsgL` parameters of your queues are set sufficiently high. For more information, see "CSQO016E".

- **CorrelId and MsgId:**
  - Use the `DISPLAY QUEUE` command to check the `CURDEPTH` and ensure that `MsgId` and `CorrelId` are set correctly in your application.

- **Queue Manager Status:**
  - Check if the queue manager is still running or if your command caused an abend. Look for error messages and, if an abend occurred, see "IBM MQ for z/OS dumps" on page 267.

- **Error Messages:**
  - Check for any error messages that might indicate the nature of the error.

For more information about entering MQSC commands, see "Issuing commands."

#### 5. IBM MQ Queue Issues
If you suspect a problem with the IBM MQ queues, use the operations and control panels to display the system-command input queue.

- **System Response:**
  - If the system responds, at least one queue is working. Continue with Step 6 on page 60.
  - If the system does not respond, the problem might be with the whole subsystem. Try stopping and restarting the queue manager, and check for any messages on the console needing action. Resolve any issues that might affect IBM MQ, such as mounting a tape for an archive log. See if other subsystems or CICS regions are affected. Use the `DISPLAY QMGR COMMANDQ` command to identify the system command input queue.

- **Persistent Issues:**
  - If the problem still occurs after a restart, contact IBM Support for help (see "Contacting IBM Support" on page 301).

#### 6. Subset of Queues Not Working
If the problem affects only a subset of queues, select the name of a local queue and use the `DISPLAY QUEUE` and `DISPLAY QSTATUS` commands to gather information.

- **Queue Processing:**
  - If `CURDEPTH` is at `MAXDEPTH`, the queue might not be processing. Ensure all applications using the queue are running normally.
  - Use the `DISPLAY QSTATUS(xx) IPPROCS` command to check if the queue is open for input. If not, start the application.
  - If `CURDEPTH` is not at `MAXDEPTH`, check the following queue attributes:
    - **Triggering:** Is the trigger monitor running? Is the trigger depth too large? Is the process name correct? Have all trigger conditions been met?
    - **Queue Sharing:** Can the queue be shared? If not, another application (batch, IMS, or CICS) might already have it open for input.
    - **Queue Enablement:** Is the queue enabled appropriately for `GET` and `PUT`?

- **Long-Running Unit of Work:**
  - If `CURDEPTH` is not zero but `MQGET` returns no message available, use the `DIS QSTATUS(xx) TYPE(HANDLE)` or `DIS CONN(xx)` commands to gather more information about connected applications.

- **Task Access:**
  - Use the `DISPLAY QSTATUS(xx) OPPROCS IPPROCS` command to see how many tasks are putting and getting messages from the queue. In a queue-sharing environment, check `OPPROCS` and `IPPROCS` on each queue manager. Alternatively, use the `CMDSCOPE` attribute to check all queue managers.

- **Shared Queues:**
  - If the queue is part of a shared queue, check for issues with the sysplex elements supporting shared queues. Use the `D XCF, STRUCTURE, STRNAME=ALL` command to check Coupling Facility structures and the `D RRS` command to check RRS activity.

- **Cluster Queues:**
  - If the queue is part of a cluster, verify that the queue manager hosting the queue is active in the cluster.

If you cannot solve the problem, contact IBM Support for help (see "Contacting IBM Support" on page 301).

#### 7. Correct Queue Definitions
IBM MQ requires certain predefined queues. Problems can occur if these queues are not defined correctly.

- **Predefined Queues:**
  - Check that the system-command input queue, system-command reply model queue, and reply-to queue are correctly defined, and that `MQOPEN` calls were successful.
  - If using the system-command reply model queue, ensure it was defined correctly.
  - If using clusters, define the `SYSTEM.CLUSTER.COMMAND.QUEUE` for cluster-related commands.

#### 8. Remote or Cluster Queues
If the problem affects only remote or cluster queues, check the following:

- **Remote Queue Access:**
  - Ensure programs putting messages to remote queues have run successfully (see "Dealing with incorrect output on z/OS" on page 294).
  - Check if the system link is active using APPC or TCP/IP commands. Use `PING` or `OPING` for TCP/IP or `D NET ID=xxxxx, E` for APPC.

- **Triggering:**
  - If using triggering, ensure the transmission queue has triggering set and the queue is get-enabled.

- **Channel or Listener:**
  - Check if the channel or listener is running. Start them manually if necessary, or try stopping and restarting the channel. Look for error messages on the startup of the channel initiator and listener. For more information, see "IBM MQ for z/OS messages, completion, and reason codes" and "Configuring distributed queuing."

- **Channel Status:**
  - Use the `DISPLAY CHSTATUS (channel_name)` command to check the channel status.

- **Process and Channel Definitions:**
  - Verify your process and channel definitions.

For more information on distributed queuing and channel definitions, see "Configuring distributed queuing."

#### 9. Shared Queues
If the problem affects only shared queues, use the `VERIFY QSG` function of the `CSQ5PQSG` utility to verify the Db2 setup consistency. This command checks the bitmap allocation fields and object definitions for the Db2 queue manager, structure, and shared queue objects, and reports any inconsistencies.

Example of a `VERIFY QSG` report with errors:
```
CSQU501I VERIFY QSG function requested
CSQU503I QSG=SQ02, DB2 DSG=DSN710P5, DB2 ssid=DFP5
CSQU517I XCF group CSQGSQ02 already defined
CSQU520I Summary information for XCF group CSQGSQ02
CSQU522I Member=MQ04, state=QUIESCED, system=MV4A
CSQU523I User data=D4E5F4C15AD4D8F0F4404040C4C5....
CSQU522I Member=MQ03, state=QUIESCED, system=MV4A
CSQU523I User data=D4E5F4C15AD4D8F0F3404040C4C6....
CSQU526I Connected to DB2 DF4A
CSQU572E Usage map T01_ARRAY_QMGR and DB2 table CSQ.ADMIN_B_QMGR inconsistent
CSQU573E QMGR MQ04 in table entry 1 not set in usage map
CSQU574E QMGR 27 in usage map has no entry in table
CSQU572E Usage map T01_ARRAY_STRUC and DB2 table CSQ.ADMIN_B_STRUCTURE inconsistent
CSQU575E Structure APPL2 in table entry 4 not set in usage map
CSQU576E Structure 55 in usage map has no entry in table
CSQU572E Usage map T03_LH_ARRAY and DB2 table CSQ.OBJ_B_QUEUE inconsistent
CSQU577E Queue MYSQ in table entry 13 not set in usage map for structure APPL1
CSQU576E Queue 129 in usage map for structure APPL1 has no entry in table
CSQU528I Disconnected from DB2 DF4A
CSQU148I CSQ5PQSG Utility completed, return code=12
```

#### 10. Slow Application or IBM MQ for z/OS
Slow applications can be caused by the application itself or underlying software, including IBM MQ.

- **Peak System Load:**
  - If the problem is worse at peak system load times, it could be a performance issue. This might indicate that your system needs tuning or is operating near its capacity limits. Peak system load typically occurs mid-morning and mid-afternoon. If your network spans multiple time zones, peak load times may vary.

- **Lightly Loaded System:**
  - If degrading performance is not dependent on system loading and occurs even when the system is lightly loaded, a poorly designed application program is likely the cause. This could manifest as a problem that only occurs when specific queues are accessed.

- **IBM MQ for z/OS Performance:**
  - Symptoms of slow IBM MQ for z/OS include:
    - Slow response to commands.
    - Repeated displays of queue depth indicating slow processing for applications with high queue activity.

For guidance on dealing with waits and loops, see "Dealing with applications that are running slowly or have stopped on z/OS" on page 289. For performance problems, see "Dealing with performance problems on z/OS" on page 288.

#### 11. Stopped Processing Work
If your system unexpectedly stops processing work, check the following areas:

- **Queue Manager:**
  - The queue manager might be shutting down.

- **Application:**
  - An application programming error might cause the program to branch away from normal processing, or the application might enter a loop. There might also have been an application abend.

- **IBM MQ:**
  - Queues might be disabled for `MQPUT` or `MQGET` calls, the dead-letter queue might be full, or IBM MQ for z/OS might be in a wait state or loop.

- **z/OS or Other System:**
  - z/OS, CICS, or IMS might be in a wait state or loop. There might be system or sysplex-level issues affecting the queue manager or channel initiator, such as excessive paging, DASD problems, or high processor usage by higher-priority tasks.

- **Db2 or RRS:**
  - Check that Db2 and RRS are active.

To determine the cause of the problem, perform the following checks:

- **Error Messages:**
  - Use the `DISPLAY THREAD(*)` command to check if the queue manager is running. If it has stopped, look for messages explaining the situation. Messages are displayed on the z/OS console or on your terminal if using the operations and control panels. Use the `DISPLAY DQM` command to check the channel initiator and listener status. The `DISPLAY R,L` command lists messages with outstanding replies. In some cases, IBM MQ for z/OS waits for operator intervention, such as when it has used all its active logs.

- **Subsystem Status:**
  - Issue the following z/OS commands:
    ```sh
    DISPLAY A,xxxxMSTR
    DISPLAY A,xxxxCHIN
    ```
    where `xxxx` is the IBM MQ for z/OS subsystem name.

  - If the subsystem has terminated, you will receive a message indicating that the queue manager or channel initiator was not found. This could be due to an abend or operator shutdown.

  - If the subsystem is running, you will receive message `IEE105I`, which includes the `CT=nnnn` field. Note the value of this field and reissue the command.

  - **Processor Time:**
    - If the `CT=` value has not changed, the subsystem is not using any processor time, indicating a wait state or no work to do.
    - If the `CT=` value changes dramatically and continues to do so over repeated displays, the subsystem might be busy or in a loop.

For more information, see "IBM MQ troubleshooting and support" on page 63.