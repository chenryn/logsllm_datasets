title:Deploying Intrusion-Tolerant SCADA for the Power Grid
author:Amy Babay and
John L. Schultz and
Thomas Tantillo and
Samuel Beckley and
Eamon Jordan and
Kevin Ruddell and
Kevin Jordan and
Yair Amir
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Deploying Intrusion-Tolerant SCADA
for the Power Grid
Amy Babay, John Schultz, Thomas Tantillo, Samuel Beckley,
Eamon Jordan, Kevin Ruddell, Kevin Jordan, and Yair Amir
Johns Hopkins University — {babay, tantillo, sbeckle2, yairamir}@cs.jhu.edu
Spread Concepts LLC — {babay, jschultz, yairamir}@spreadconcepts.com
Resurgo LLC — {eamon.jordan, kevin.ruddell, kevin.b.jordan}@resurgo.net
Abstract—While there has been considerable research on
making power grid Supervisory Control and Data Acquisition
(SCADA) systems resilient to attacks, the problem of transition-
ing these technologies into deployed SCADA systems remains
largely unaddressed. We describe our experience and lessons
learned in deploying an intrusion-tolerant SCADA system in
two realistic environments: a red team experiment in 2017
and a power plant test deployment in 2018. These experiences
resulted in technical lessons related to developing an intrusion-
tolerant system with a real deployable application, preparing a
system for deployment in a hostile environment, and supporting
protocol assumptions in that hostile environment. We also discuss
some meta-lessons regarding the cultural aspects of transitioning
academic research into practice in the power industry.
I. INTRODUCTION
Because of their critical
importance to modern society,
power grid systems present a high-value target for attackers,
and recent events have shown that these systems are in fact
being targeted by dedicated nation-state-level attackers. This
serious emerging threat has led to considerable research on
protecting power grids (e.g. [1]–[3]), and particularly on mak-
ing the Supervisory Control and Data Acquisition (SCADA)
systems that provide their core monitoring and control capabil-
ities resilient to attacks. While academic research on this topic
has produced innovative solutions, inventing SCADA systems
capable of withstanding sophisticated attacks and operating
correctly even while partially compromised (e.g. [4]–[8]),
the problem of transitioning these technologies into deployed
SCADA systems remains largely unaddressed.
In this paper, we describe our experience and lessons
learned over four years of working to bridge the gap between
academic research and realizing the goal of an intrusion-
tolerant power grid. This process started when we were
convinced to apply our work on resilient clouds to the power
domain: after all, if there is no power, even the best cloud pro-
tocols are irrelevant. Based on our work on intrusion-tolerant
cloud networking and consistent state, we developed Spire, an
intrusion-tolerant SCADA system for the power grid [7]. Spire
replicates the SCADA master using Byzantine fault-tolerant
replication with performance guarantees under attack, employs
diversity and proactive recovery to provide protection over a
long system lifetime, and uses an intrusion-tolerant network
infrastructure to resiliently connect the system components.
This system is complemented by MANA, a machine-learning-
based network trafﬁc analyzer and intrusion detection system
(IDS) that we developed to detect anomalies and provide the
situational awareness essential to an effective defense.
While the journey toward an intrusion-tolerant power grid
is still ongoing, in this paper we describe the experience of
deploying our intrusion-tolerant SCADA system and IDS in
two realistic environments: a red team experiment in 2017
and a power plant test deployment in 2018. During the week-
long red team experiment, the system successfully withstood
attacks from a nation-state-level hacker team. During the test
deployment, the system managed a small power topology in a
“mothballed” steam-turbine power plant that had active control
systems connected to the grid but was not generating power at
the time. To the best of our knowledge, this is the ﬁrst time an
intrusion-tolerant SCADA system was tested by a nation-state-
level red team, and the ﬁrst time such a system was deployed
(in a test) in an actual power installation.
Our experience in these deployments resulted in technical
lessons related to developing an intrusion-tolerant system with
a real deployable application (a SCADA system, as opposed
to a generic replication protocol), preparing a system for
deployment
in a hostile environment, and supporting pro-
tocol assumptions in that hostile environment. Beyond that,
it resulted in meta-lessons related to the cultural aspects of
transitioning academic research into practice in the power
industry, which in our experience is considerably harder than
in the cloud and Internet domains.
At the technical level, the lessons we learned in developing
and preparing the system centered on the relationship between
the application state and the replication protocol, as well as
the need for a holistic end-to-end view of intrusion tolerance.
Subjecting the system to a red team attack underscored the
need for resilience at all levels of the system, exposing the
network and operating system levels as the ﬁrst targets for
attack, and suggested techniques for code compilation and
deployment that can increase the work the attacker must do
to learn about the system.
Our experience also highlighted the importance of situ-
ational awareness for the SCADA system operator. While
intrusion tolerance can effectively mask failures and attacks,
it is important to present the system’s knowledge about on-
going attacks and anomalies to the operator to allow them
to react and take action. We have found machine learning to
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00043
328
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:51:42 UTC from IEEE Xplore.  Restrictions apply. 
HMI 
Primary 
mary
SCADA 
ter 
Master 
Master 
Backup 
Back
SCADA 
M ter 
aster 
Master 
(cid:5)(cid:4)(cid:2)(cid:1)
(cid:5)(cid:12)(cid:22)(cid:19)(cid:13)(cid:10)(cid:9)(cid:14)(cid:1)
(cid:3)(cid:18)(cid:21)(cid:13)(cid:17)(cid:15)(cid:11)(cid:16)(cid:20)(cid:1)
(cid:6)(cid:7)(cid:8)(cid:1)
(cid:5)(cid:12)(cid:22)(cid:19)(cid:13)(cid:10)(cid:9)(cid:14)(cid:1)
(cid:3)(cid:18)(cid:21)(cid:13)(cid:17)(cid:15)(cid:11)(cid:16)(cid:20)(cid:1)
Fig. 1. Conventional SCADA system architecture.
be an effective approach for intrusion detection in SCADA
environments, due to its ability to passively identify custom
and zero-day attacks that do not have known signatures.
At the cultural, meta-lesson level, we gained considerable
insight into how to execute a successful short-term experiment
in a real environment as well as what is required for the ulti-
mate transition of research into practice in the power industry.
These lessons highlighted the need to earn the trust of power
company engineers and decision makers as a precondition
for any installation on their premises, the need to learn the
vocabulary of the power industry to effectively translate ideas,
and the need for an incremental deployment plan to make
progress in a highly conservative ecosystem.
The remainder of the paper is organized as follows: Sec-
tion II provides an overview of our intrusion-tolerant SCADA
system. Section III discusses design choices made to prepare
the system for attacks and deployment. Section IV describes
the red team experiment conducted in March and April 2017.
Section V describes the power plant test deployment conducted
in January and February 2018. Section VI summarizes the
key lessons from both deployment experiences. Section VII
discusses related work, and Section VIII concludes the paper.
II. SYSTEM OVERVIEW
Conventional SCADA system architectures
include a
SCADA master, Human Machine Interface (HMI), and several
Programmable Logic Controllers (PLCs) and/or Remote Ter-
minal Units (RTUs) that interface with the power equipment.
Figure 1 shows the architecture of such a system. The SCADA
master is the central control server, responsible for collecting
status updates from the RTUs and PLCs. The SCADA master
uses that information to determine the state of the system,
make control decisions, and display the status to the human
operator through the HMI. The system operator can use
the HMI to issue manual supervisory commands, which the
SCADA master processes and sends to the RTUs and PLCs.
Due to the SCADA master’s importance, a primary-backup
architecture is often used to ensure that if the primary SCADA
master fails, the backup can take over and restore operation.
(cid:3)(cid:26)(cid:25)(cid:31)(cid:29)(cid:26)(cid:23)(cid:1)(cid:3)(cid:19)(cid:25)(cid:31)(cid:19)(cid:29)(cid:1)
(cid:3)(cid:26)(cid:25)(cid:31)(cid:29)(cid:26)(cid:23)(cid:1)(cid:3)(cid:19)(cid:25)(cid:31)(cid:19)(cid:29)(cid:1)
(cid:8)(cid:2)(cid:10)(cid:1)
(cid:6)(cid:9)(cid:7)(cid:1)
(cid:13)(cid:3)(cid:2)(cid:4)(cid:2)(cid:1)(cid:1)
(cid:9)(cid:16)(cid:30)(cid:31)(cid:19)(cid:29)(cid:1)
(cid:13)(cid:3)(cid:2)(cid:4)(cid:2)(cid:1)(cid:1)
(cid:9)(cid:16)(cid:30)(cid:31)(cid:19)(cid:29)(cid:1)
(cid:13)(cid:3)(cid:2)(cid:4)(cid:2)(cid:1)(cid:1)
(cid:9)(cid:16)(cid:30)(cid:31)(cid:19)(cid:29)(cid:1)
(cid:13)(cid:3)(cid:2)(cid:4)(cid:2)(cid:1)(cid:1)
(cid:9)(cid:16)(cid:30)(cid:31)(cid:19)(cid:29)(cid:1)
(cid:13)(cid:3)(cid:2)(cid:4)(cid:2)(cid:1)(cid:1)
(cid:9)(cid:16)(cid:30)(cid:31)(cid:19)(cid:29)(cid:1)
(cid:13)(cid:3)(cid:2)(cid:4)(cid:2)(cid:1)(cid:1)
(cid:9)(cid:16)(cid:30)(cid:31)(cid:19)(cid:29)(cid:1)
(cid:7)(cid:25)(cid:31)(cid:29)(cid:32)(cid:30)(cid:21)(cid:26)(cid:25)(cid:37)(cid:14)(cid:26)(cid:23)(cid:19)(cid:29)(cid:16)(cid:25)(cid:31)(cid:1)
(cid:10)(cid:19)(cid:31)(cid:33)(cid:26)(cid:29)(cid:22)(cid:1)
(cid:11)(cid:8)(cid:3)(cid:36)(cid:12)(cid:14)(cid:15)(cid:1)
(cid:11)(cid:29)(cid:26)(cid:34)(cid:35)(cid:1)
(cid:12)(cid:14)(cid:15)(cid:1)
(cid:2)(cid:1)
(cid:11)(cid:8)(cid:3)(cid:36)(cid:12)(cid:14)(cid:15)(cid:1)
(cid:11)(cid:29)(cid:26)(cid:34)(cid:35)(cid:1)
(cid:11)(cid:8)(cid:3)(cid:1)
(cid:11)(cid:20)(cid:35)(cid:30)(cid:21)(cid:18)(cid:16)(cid:23)(cid:1)
(cid:5)(cid:28)(cid:32)(cid:21)(cid:27)(cid:24)(cid:19)(cid:25)(cid:31)(cid:1)
(cid:13)(cid:32)(cid:17)(cid:30)(cid:31)(cid:16)(cid:31)(cid:21)(cid:26)(cid:25)(cid:1)
(cid:11)(cid:20)(cid:35)(cid:30)(cid:21)(cid:18)(cid:16)(cid:23)(cid:1)
(cid:5)(cid:28)(cid:32)(cid:21)(cid:27)(cid:24)(cid:19)(cid:25)(cid:31)(cid:1)
(cid:13)(cid:32)(cid:17)(cid:30)(cid:31)(cid:16)(cid:31)(cid:21)(cid:26)(cid:25)(cid:1)
Fig. 2. Spire system architecture using six replicas (to withstand one intrusion
and support one proactive recovery).
Spire, the intrusion-tolerant SCADA system that we devel-
oped, is designed to overcome system-level attacks that can
allow an adversary to compromise a SCADA master as well
as network-level attacks that aim to disrupt communication
between the system components [7], [9]. Its architecture is
shown in Figure 2.
At the system-level, Spire overcomes compromises of the
SCADA masters using Byzantine Fault Tolerant replication,
where 3f + 1 total replicas can be used to maintain correct
operation in the presence of f compromised replicas [10].
Spire speciﬁcally uses the Prime replication engine to provide
both safety and latency guarantees under attack [11].
However,
if all replicas are identical,
intrusion-tolerant
replication is not effective: an attacker who compromises one
replica can reuse that same exploit to compromise all of the
replicas. Therefore, we use the MultiCompiler [12], [13] to
diversify the replicas’ attack surface by introducing random
changes at compile time. These changes do not affect the
overall behavior of the program, but change its layout in a
way that makes it extremely unlikely that the same exploit
will succeed in compromising any two distinct variants.
While diversifying replicas forces an attacker to develop a
different exploit for each replica, a dedicated attacker with
sufﬁcient
time and resources can eventually craft enough
distinct exploits to breach the system guarantees. Therefore,
we use proactive recovery [10], [14], [15] to periodically
take each replica down and restore it to a known clean state
with a new diverse variant of the code. Because a replica
undergoing proactive recovery is temporarily unavailable, sup-
porting proactive recovery requires more total replicas:
to
withstand f intrusions when k replicas may be simultaneously
undergoing proactive recovery, a total of 3f + 2k + 1 replicas
are needed [15] (6 replicas for f = 1, k = 1, as in Figure 2).
the network-level, Spire uses the Spines intrusion-
tolerant network to provide authenticated, encrypted, and
resilient communication between the system components [16].
To connect existing PLCs and RTUs to the network, we use
a proxy that limits their network attack surface. Their typical,
insecure industrial communication protocols, such as Modbus
At
329
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:51:42 UTC from IEEE Xplore.  Restrictions apply. 
or DNP3, are used only on the direct connection between the
PLC or RTU and its proxy, which, ideally, can simply be a
wire. The proxy communicates with the rest of the system
over the secure and intrusion-tolerant Spines network. HMI
communications are similarly protected by a secure proxy.
The system also includes an intrusion detection and sit-
uational awareness component called Machine-learning As-
sisted Network Analyzer (MANA). MANA translates network
packet capture into data inputs for machine learning evaluation
and alerts users in near real-time of any highly correlated
anomalous or malicious activity. Network activity is monitored
from a situational awareness board tailored for power plant
engineers and can be viewed as part of the HMI.
III. DESIGN DECISIONS FOR DEPLOYMENT
Designing our system to withstand red team attacks led us
to take a broader view of intrusion tolerance that considers not
just the replication protocol but also the SCADA master that
runs on top of it, lower level network and operating system
protection, and intrusion detection and situational awareness.
A. SCADA Master Application
Two key differences separate our replicated SCADA system
from standard BFT replication: it supports a real application
that is more complex than the basic databases normally used
to evaluate BFT protocols, and the application reﬂects physical
state in the real world. Therefore, the challenge is to ensure
that the replicas are not only consistent with one another, but
also that their state correctly reﬂects the real world.
This has two consequences for the system design. First, it
requires signaling between the replication protocol and the
SCADA application. The replication protocol orders updates
consistently, but the SCADA master applies the updates and
maintains the application-level state. Therefore, after parti-
tions or proactive recoveries, it is not sufﬁcient to perform
catchup and state transfer at the replication-protocol level.
The replication layer must signal the SCADA master that
application-level state transfer is required, and the SCADA
masters then create a transferable snapshot of their state. In
our system, SCADA masters then execute an application-level
state transfer protocol.
Second, due to the cyber-physical nature of the system, the
current state of the RTUs and PLCs represents the ground-truth
system state, and SCADA masters can recover this state by
polling the ﬁeld devices. This interesting feature opens up the
possibility of recovering from temporary assumption breaches
in a way that is not possible for generic BFT replication. If
enough replicas crash and lose their state such that it is no
longer possible to recover the system state from the remain-
ing correct replicas, the system can automatically reset and