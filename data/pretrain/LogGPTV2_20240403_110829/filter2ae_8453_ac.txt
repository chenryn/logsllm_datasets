        }
    }
UpdatePlugin()：读取plugins目录下的js文件，过滤掉大于10MB的js文件，然后全部读入，最后加载到V8引擎中
    public synchronized static boolean UpdatePlugin() {
        boolean oldValue = HookHandler.enableHook.getAndSet(false);
        List scripts = new ArrayList();
        File pluginDir = new File(Config.getConfig().getScriptDirectory());
        LOGGER.debug("checker directory: " + pluginDir.getAbsolutePath());
        if (!pluginDir.isDirectory()) {
            pluginDir.mkdir();
        }
        FileFilter filter = FileFilterUtils.and(FileFilterUtils.sizeFileFilter(10 * 1024 * 1024, false),
                FileFilterUtils.suffixFileFilter(".js"));
        //过滤掉大于10MB的js文件
        File[] pluginFiles = pluginDir.listFiles(filter);
        if (pluginFiles != null) {
            for (File file : pluginFiles) {
                try {
                    String name = file.getName();
                    String source = FileUtils.readFileToString(file, "UTF-8");
                    scripts.add(new String[]{name, source});
                } catch (Exception e) {
                    LogTool.error(ErrorType.PLUGIN_ERROR, e.getMessage(), e);
                }
            }
        }
        HookHandler.enableHook.set(oldValue);
        return UpdatePlugin(scripts);
    }
    public synchronized static boolean UpdatePlugin(List scripts) {
        boolean rst = V8.CreateSnapshot("{}", scripts.toArray(), BuildRASPModel.getRaspVersion());
        if (rst) {
            try {
                String jsonString = V8.ExecuteScript("JSON.stringify(RASP.algorithmConfig || {})", "get-algorithm-config.js");
                Config.getConfig().setConfig("algorithm.config", jsonString, true);
            } catch (Exception e) {
                LogTool.error(ErrorType.PLUGIN_ERROR, e.getMessage(), e);
            }
            Config.commonLRUCache.clear();
        }
        return rst;
    }
这里有一个commonLRUCache，主要是用于在hook点去执行js check的时候，进行一个并发幂等（应该是这样。。。）。
InitFileWatcher()：初始化一个js plugin监视器，在js文件有所变动的时候，重新去加载所有插件，实现热更新的特性
    public synchronized static void InitFileWatcher() throws Exception {
        boolean oldValue = HookHandler.enableHook.getAndSet(false);
        if (watchId != null) {
            FileScanMonitor.removeMonitor(watchId);
            watchId = null;
        }
        watchId = FileScanMonitor.addMonitor(Config.getConfig().getScriptDirectory(), new FileScanListener() {
            @Override
            public void onFileCreate(File file) {
                if (file.getName().endsWith(".js")) {
                    UpdatePlugin();
                }
            }
            @Override
            public void onFileChange(File file) {
                if (file.getName().endsWith(".js")) {
                    UpdatePlugin();
                }
            }
            @Override
            public void onFileDelete(File file) {
                if (file.getName().endsWith(".js")) {
                    UpdatePlugin();
                }
            }
        });
        HookHandler.enableHook.set(oldValue);
    }
  1. CheckerManager.init()：初始化所有的checker，从枚举类com.baidu.openrasp.plugin.checker.CheckParameter.Type中读取所有的checker，包含三种类型的checker，一是js插件检测，意味着这个checker会调用js plugin进行攻击检测，二是java本地检测，意味着是调用本地java代码进行攻击检测，三是安全基线检测，是用于检测一些高风险类的安全性基线检测，检测其配置是否有安全隐患。
    // js插件检测
    SQL("sql", new V8Checker(), 1),
    COMMAND("command", new V8Checker(), 1  classesSet = AnnotationScanner.getClassWithAnnotation(SCAN_ANNOTATION_PACKAGE, HookAnnotation.class);
        for (Class clazz : classesSet) {
            try {
                Object object = clazz.newInstance();
                if (object instanceof AbstractClassHook) {
                    addHook((AbstractClassHook) object, clazz.getName());
                }
            } catch (Exception e) {
                LogTool.error(ErrorType.HOOK_ERROR, "add hook failed: " + e.getMessage(), e);
            }
        }
    }
可以看到，addAnnotationHook()读取了com.baidu.openrasp.hook包中所有被@HookAnnotation注解的class，然后缓存到集合hooks中，以提供在后续类加载通过com.baidu.openrasp.transformer.CustomClassTransformer#transform的时候，对其进行匹配，判断是否需要hook
    public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined,
                            ProtectionDomain domain, byte[] classfileBuffer) throws IllegalClassFormatException {
        if (loader != null && jspClassLoaderNames.contains(loader.getClass().getName())) {
            jspClassLoaderCache.put(className.replace("/", "."), new WeakReference(loader));
        }
        for (final AbstractClassHook hook : hooks) {
            if (hook.isClassMatched(className)) {
                CtClass ctClass = null;
                try {
                    ClassPool classPool = new ClassPool();
                    addLoader(classPool, loader);
                    ctClass = classPool.makeClass(new ByteArrayInputStream(classfileBuffer));
                    if (loader == null) {
                        hook.setLoadedByBootstrapLoader(true);
                    }
                    classfileBuffer = hook.transformClass(ctClass);
                    if (classfileBuffer != null) {
                        checkNecessaryHookType(hook.getType());
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                } finally {
                    if (ctClass != null) {
                        ctClass.detach();
                    }
                }
            }
        }
        serverDetector.detectServer(className, loader, domain);
        return classfileBuffer;
    }
看细节，可以发现，先根据isClassMatched(String
className)方法判断是否对加载的class进行hook，接着调用的是hook类的transformClass(CtClass
ctClass)->hookMethod(CtClass
ctClass)方法进行了字节码的修改（hook），然后返回修改后的字节码并加载，最终实现了对class进行插桩
例子（com.baidu.openrasp.hook.ssrf.HttpClientHook）：
HttpClient中发起请求前，都会先创建HttpRequestBase这个类的实例，然后才能发起请求，该实例中包含着URI信息，而对于SSRF的攻击检测，就是在请求发起前，对URI进行检测，检测是否是SSRF，因此需要hook到HttpRequestBase类
    public boolean isClassMatched(String className) {
        return "org/apache/http/client/methods/HttpRequestBase".equals(className);
    }
既然要检测SSRF，那么就选择在setURI时，就对其URI进行检测，hookMethod方法其实就是通过javassist生成了一段调用com.baidu.openrasp.hook.ssrf.HttpClientHook#checkHttpUri方法的代码，并插入到HttpRequestBase.setURI方法中，以实现检测SSRF
    protected void hookMethod(CtClass ctClass) throws IOException, CannotCompileException, NotFoundException {
        String src = getInvokeStaticSrc(HttpClientHook.class, "checkHttpUri",
                "$1", URI.class);
        insertBefore(ctClass, "setURI", "(Ljava/net/URI;)V", src);
    }
checkHttpUri方法通过取出相关信息，host、port、url等，然后通过一系列方法，对检测ssrf的js插件进行调用以检测攻击，当然，过程中会加入一些机制，对其可用性的增强
    public static void checkHttpUri(URI uri) {
        String url = null;
        String hostName = null;
        String port = "";
        try {
            if (uri != null) {
                url = uri.toString();
                hostName = uri.toURL().getHost();
                int temp = uri.toURL().getPort();
                if (temp > 0) {
                    port = temp + "";
                }
            }
        } catch (Throwable t) {
            LogTool.traceHookWarn("parse url " + url + " failed: " + t.getMessage(), t);
        }
        if (hostName != null) {
            checkHttpUrl(url, hostName, port, "httpclient");
        }
    }
    ->com.baidu.openrasp.hook.ssrf.AbstractSSRFHook#checkHttpUrl
    protected static void checkHttpUrl(String url, String hostName, String port, String function) {
        HashMap params = new HashMap();
        params.put("url", url);
        params.put("hostname", hostName);
        params.put("function", function);
        params.put("port", port);
        LinkedList ip = new LinkedList();
        try {
            InetAddress[] addresses = InetAddress.getAllByName(hostName);
            for (InetAddress address : addresses) {
                if (address != null && address instanceof Inet4Address) {
                    ip.add(address.getHostAddress());
                }
            }
        } catch (Throwable t) {
            // ignore
        }
        Collections.sort(ip);
        params.put("ip", ip);
        HookHandler.doCheck(CheckParameter.Type.SSRF, params);
    }
流程汇总：
    1.com.baidu.openrasp.hook.ssrf.HttpClientHook#checkHttpUri
    2.com.baidu.openrasp.hook.ssrf.AbstractSSRFHook#checkHttpUrl
    3.com.baidu.openrasp.HookHandler#doCheck
    4.com.baidu.openrasp.HookHandler#doCheckWithoutRequest
    在这里，做了一些云控注册成功判断和白名单的处理
    5.com.baidu.openrasp.HookHandler#doRealCheckWithoutRequest
    在这里，做了一些参数的封装，以及失败日志、耗时日志等输出，并且在检测到攻击时（下一层返回），抛出异常
    6.com.baidu.openrasp.plugin.checker.CheckerManager#check
    7.com.baidu.openrasp.plugin.checker.AbstractChecker#check
    在这里，对js或者其他类型的安全检测之后的结果，进行事件处理并返回结果
    8.com.baidu.openrasp.plugin.checker.v8.V8Checker#checkParam
    9.com.baidu.openrasp.plugin.js.JS#
    在这里，做了一些commonLRUCache的并发幂等处理
    10.com.baidu.openrasp.v8.V8#Check(java.lang.String, byte[], int, com.baidu.openrasp.v8.Context, boolean, int)
**总的来说，大概整个OpenRASP的核心就是如此了，还有一些关于cloud的云控实现，这里的篇幅暂且不对其就行研究**