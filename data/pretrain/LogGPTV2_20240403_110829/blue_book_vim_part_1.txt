---
title: Vim
date: 20210318
author: Lyz
---
Vim is a lightweight keyboard driven editor. It's the road to **fly over the
keyboard** as it increases productivity and usability.
!!! note "If you doubt between learning emacs or vim, go with emacs with spacemacs"
    I am a power vim user for more than 10 years, and seeing what my friends do
    with emacs, I suggest you to learn it while keeping the vim movement.
    Spacemacs is a preconfigured Emacs with those bindings and a lot of more
    stuff, but it's a good way to start.
# Vi vs Vim vs Neovim
!!! note "TL;DR: Use Neovim"
Small comparison:
* Vi
  * Follows the Single Unix Specification and POSIX.
  * Original code written by Bill Joy in 1976.
  * BSD license.
  * Doesn't even have a git repository `-.-`.
* Vim
  * Written by Bram Moolenaar in 1991.
  * Vim is free and open source software, license is compatible with the GNU General Public License.
  * C: 47.6 %, Vim Script: 44.8%, Roff 1.9%, Makefile 1.7%, C++ 1.2%
  * Commits: 7120, Branch: **1**, Releases: 5639, Contributor: **1**
  * Lines: 1.295.837
* Neovim
  * Written by the community from 2014
  * Published under the Apache 2.0 license
  * Commits: 7994, Branch **1**, Releases: 9, Contributors: 303
  * Vim script: 46.9%, C:38.9%, Lua 11.3%, Python 0.9%, C++ 0.6%
  * Lines: 937.508 (27.65% less code than vim)
  * Refactor: Simplify maintenance and encourage contributions
  * Easy update, just symlinks
  * Ahead of vim, new features inserted in Vim 8.0 (async)
[Neovim](https://neovim.io/doc/user/vim_diff.html#nvim-features) is a refactor
of Vim to make it viable for another 30 years of hacking.
Neovim very intentionally builds on the long history of Vim community
knowledge and user habits. That means “switching” from Vim to Neovim is just
an “upgrade”.
From the start, one of Neovim’s explicit goals has been simplify maintenance and
encourage contributions.  By building a codebase and community that enables
experimentation and low-cost trials of new features..
And there’s evidence of real progress towards that ambition. We’ve
successfully executed non-trivial “off-the-roadmap” patches: features which
are important to their authors, but not the highest priority for the project.
These patches were included because they:
* Fit into existing conventions/design.
* Included robust test coverage (enabled by an advanced test framework and CI).
* Received thoughtful review by other contributors.
One downside though is that it's not able to [work with "big" files](https://github.com/neovim/neovim/issues/614) for me 110kb file broke it. Although after [some debugging](#Deal-with-big-files) it worked.
# [Installation](https://github.com/neovim/neovim/releases)
The version of `nvim` released by debian is too old, use the latest by downloading it
directly from the [releases](https://github.com/neovim/neovim/releases) page and
unpacking it somewhere in your home and doing a link to the `bin/nvim` file somewhere in your `$PATH`.
```bash
curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
chmod u+x nvim.appimage
mv nvim.appimage ~/.local/bin/nvim
```
# [Configuration](https://vonheikemen.github.io/devlog/tools/build-your-first-lua-config-for-neovim/)
Nvim moved away from vimscript and now needs to be configured in lua. You can access the
config file in `~/.config/nvim/init.lua`. It's not created by default so you need to do
it yourself.
To access the editor's setting we need to use the global variable `vim`. Okay, more than
a variable this thing is a module. It has an `opt` property to change the program
options.  This is the syntax you should follow.
```lua
vim.opt.option_name = value
```
Where `option_name` can be anything in [this list](https://neovim.io/doc/user/quickref.html#option-list). And value must be whatever that option expects. You can also see the list with `:help option-list`.
## Key bindings
We need to learn about `vim.keymap.set`. Here is a basic usage example.
```lua
vim.keymap.set('n', 'w', 'write', {desc = 'Save'})
```
After executing this, the sequence `Space + w` will call the `write` command. Basically, we can save changes made to a file with `Space + w`.
Let's dive into what does the  `vim.keymap.set` parameters mean.
```lua
vim.keymap.set({mode}, {lhs}, {rhs}, {opts})
```
* `{mode}`:  mode where the keybinding should execute. It can be a list of modes. We need to specify the mode's short name. Here are some of the most common.
  * `n`: Normal mode.
  * `i`: Insert mode.
  * `x`: Visual mode.
  * `s`: Selection mode.
  * `v`: Visual + Selection.
  * `t`: Terminal mode.
  * `o`: Operator-pending.
  * `''`: Yes, an empty string. Is the equivalent of `n + v + o`.
* `{lhs}`: is the key we want to bind.
* `{rhs}` is the action we want to execute. It can be a string with a command or an expression. You can also provide a lua function.
* `{opts}` this must be a lua table. If you don't know what is a "lua table" just think is a way of storing several values in one place. Anyway, it can have these properties.
  * `desc`: A string that describes what the keybinding does. You can write anything you want.
  * `remap`: A boolean that determines if our keybinding can be recursive. The default value is `false`. Recursive keybindings can cause some conflicts if used incorrectly. Don't enable it unless you know what you're doing.
  * `buffer`: It can be a boolean or a number. If we assign the boolean `true` it means the keybinding will only be effective in the current file. If we assign a number, it needs to be the "id" of an open buffer.
  * `silent`: A boolean. Determines whether or not the keybindings can show a message. The default value is `false`.
  * `expr`: A boolean. If enabled it gives the chance to use vimscript or lua to calculate the value of `{rhs}`. The default value is `false`.
### [The leader key](https://www.reddit.com/r/vim/wiki/the_leader_mechanism/)
When creating keybindings we can use the special sequence `` in the `{lhs}` parameter, it'll take the value of the global variable mapleader.
So mapleader is a global variable in vimscript that can be string. For example.
```lua
vim.g.mapleader = ' '
```
After defining it we can use it as a prefix in our keybindings.
```lua
vim.keymap.set('n', 'w', 'write')
```
This will make `` + `w` save the current file.
There are different opinions on what key to use as the `` key. The `` is the most comfortable as it's always close to your thumbs, and it works well with both hands. Nevertheless, you can only use it in normal mode, because in insert `` will be triggered as you write. An alternative is to use `;` which is also comfortable (if you use the english key distribution) and you can use it in insert mode. 
If you [want to define more than one leader key](https://stackoverflow.com/questions/30467660/can-we-define-more-than-one-leader-key-in-vimrc) you can either:
* Change the `mapleader` many times in your file: As the value of `mapleader` is used at the moment the mapping is defined, you can indeed change that while plugins are loading. For that, you have to explicitly `:runtime` the plugins in your `~/.vimrc` (and count on the canonical include guard to prevent redefinition later):
  ```vim
  let mapleader = ','
  runtime! plugin/NERD_commenter.vim
  runtime! ...
  let mapleader = '\'
  runime! plugin/mark.vim
  ...
  ```
* Use the keys directly instead of using `` 
  ```vim
  " editing mappings
  nnoremap ,a 
  nnoremap ,k 
  nnoremap ,d 
  " window management mappings
  nnoremap gw 
  nnoremap gb 
  ```
Defining `mapleader` and/or using `` may be useful if you change your mind often on what key to use a leader but it won't be of any use if your mappings are stable.
## Spelling
```lua
set.spell = true
set.spelllang = 'en_us'
set.spellfile = '/home/your_user/.config/nvim/spell/my_dictionary.add'
```
## Testing
The [`vim-test`](https://github.com/vim-test/vim-test) alternatives for neovim are:
* [`neotest`](https://github.com/nvim-neotest/neotest)
* [`nvim-test`](https://github.com/klen/nvim-test)
The first one is the most popular so it's the first to try.
### [neotest](https://github.com/nvim-neotest/neotest)
#### Installation
Add to your [`packer`](#packer) configuration:
```lua
use {
  "nvim-neotest/neotest",
  requires = {
    "nvim-lua/plenary.nvim",
    "nvim-treesitter/nvim-treesitter",
    "antoinemadec/FixCursorHold.nvim"
  }
}
```
To get started you will also need to install an adapter for your test runner. For example [for python](https://github.com/nvim-neotest/neotest-python) add also:
```lua
use  "nvim-neotest/neotest-python"
```
Then configure the plugin with:
```lua
require("neotest").setup({ -- https://github.com/nvim-neotest/neotest
  adapters = {
    require("neotest-python")({ -- https://github.com/nvim-neotest/neotest-python
      dap = { justMyCode = false },
    }),
  }
})
```
It also needs a font that supports icons. If you don't see them [install one of these](https://github.com/ryanoasis/nerd-fonts).
# [Plugin managers](https://vonheikemen.github.io/devlog/tools/neovim-plugins-to-get-started/)
Neovim has builtin support for installing plugins. You can manually download the plugins
in any directory shown in `:set packpath?`, for example `~/.local/share/nvim/site`. In one of those directories we have to create a directory called `pack` and inside `pack` we must create a "package". A package is a directory that contains several plugins. It must have this structure.
```
package-directory
├── opt
│   ├── [plugin 1]
│   └── [plugin 2]
└── start
    ├── [plugin 3]
    └── [plugin 4]
```
In this example we are creating a directory with two other directory inside: opt and start. Plugins in opt will only be loaded if we execute the command packadd. The plugins in start will be loaded automatically during the startup process.
So to install a plugin like `lualine` and have it load automatically, we should place it for example here `~/.local/share/nvim/site/pack/github/start/lualine.nvim`
As I'm using [`chezmoi`](chezmoi.md) to handle the plugins of `zsh` and other stuff I tried to work with that. It was a little cumbersome to add the plugins but it did the job until I had to install `telescope` which needs to run a command after each install, and that was not easy with `chezmoi`. Then I analyzed the  most popular plugin managers in the Neovim ecosystem right now:
* [`packer`](https://github.com/wbthomason/packer.nvim)
* [`paq`](https://github.com/savq/paq-nvim)
If you prefer minimalism take a look at `paq`. If you want something full of features use `packer`. I went with `packer`.
## [Packer](https://github.com/wbthomason/packer.nvim)
### Installation
To get started, first clone this repository to somewhere on your packpath, e.g.:
```bash
git clone --depth 1 https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/start/packer.nvim
```
Create the `~/.config/nvim/lua/plugins.lua` file with the contents:
```lua
vim.cmd [[packadd packer.nvim]]
return require('packer').startup(function(use)
  -- Packer can manage itself
  use 'wbthomason/packer.nvim'
  -- Example of another plugin. Nice buffer closing 
  use 'moll/vim-bbye'
end)
```
And load the file in your `~/.config/nvim/init.lua`:
```lua
-- -------------------
-- --    Plugins    --
-- -------------------
require('plugins')
```
You can now run the `packer` commands.
### Usage
Whenever you make changes to your plugin configuration you need to:
* Regenerate the compiled loader file:
  ```
  :PackerCompile
  ```
* Remove any disabled or unused plugins
  ```
  :PackerClean
  ```
* Clean, then install missing plugins
  ```
  :PackerInstall
  ```
  This will install the plugins in `~/.local/share/nvim/site/pack/packer/start/`, you can manually edit those files to develop new feature or fix issues on the plugins.
* Update the packages to the latest version you can run:
  ```
  :PackerUpdate
  ```
* Show the list of installed plugins run:
  ```
  :PackerStatus
  ```
# Buffer and file management
In the past I used [ctrlp](https://github.com/ctrlpvim/ctrlp.vim) as a remaining of the
migration from vim to nvim. Today I've seen that there are `nvim` native plugins to do
the same. I'm going to start with
[`Telescope`](https://github.com/nvim-telescope/telescope.nvim), a popular plugin (8.4k
stars)
## Telescope
### Install
It is suggested to either use the latest release tag or their release branch (which will get consistent updates) 0.1.x. If you're  using `packer` you can add this to your `plugins.lua`:
```lua
use {
  'nvim-telescope/telescope.nvim', tag = '0.1.x',
  requires = { {'nvim-lua/plenary.nvim'} }
}
```
You may need to have installed [`treesitter`](#treesitter) look for those instructions to install it.
`telescope` uses `ripgrep` to do `live-grep`. I've tried using `ag` instead with [this config](https://github.com/nvim-telescope/telescope.nvim/issues/2083#issuecomment-1216769324-permalink), but it didn't work.
```lua
require('telescope').setup{
  defaults = {
     vimgrep_arguments = {
        "ag",