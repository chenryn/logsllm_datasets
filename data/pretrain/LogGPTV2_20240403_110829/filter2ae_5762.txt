# 【系列分享】安卓Hacking Part 20：使用GDB在Android模拟器上调试应用程序

## 译文声明
本文为翻译文章，原文来源于infosecinstitute.com。译文仅供参考，具体内容及含义请以原文为准。

## 翻译信息
- 翻译者: [shan66](http://bobao.360.cn/member/contribute?uid=2522399780)
- 预估稿费: 100 RMB
- 投稿方式: 发送邮件至linwei#360.cn 或 登录网页版在线投稿

## 前言
本文将介绍如何对运行在已经取得root权限的Android设备或模拟器上的进程进行调试。调试是查找内存损坏等安全漏洞的重要手段。

## 准备工作
1. 设置一个Android模拟器。
2. 安装NDK（可以从[这里](https://developer.android.com/ndk/downloads)下载）。

接下来，我们需要完成以下步骤：
1. 在模拟器上设置GDB服务器。
2. 从客户端连接到GDB服务器。
3. 开始调试。

让我们开始吧。

## 使用GDB在Android模拟器上调试APP

### 第一步：将gdbserver推送到模拟器
我们需要将gdbserver放置在一个可以全局访问的位置，例如`/system/bin`目录下。首先，通过`adb`获取设备上的shell，并运行`mount`命令来检查当前挂载状态：

```sh
adb shell mount
```

如果`/system`分区是以只读（ro）权限挂载的，我们需要将其重新挂载为读写（rw）权限：

```sh
adb shell mount -o rw,remount /system
```

再次运行`mount`命令确认是否成功：

```sh
adb shell mount
```

### 第二步：推送gdbserver到模拟器
导航到NDK目录并找到ARM架构的gdbserver二进制文件。在我的机器中，它位于`prebuilt/android-arm`目录下。使用`adb push`命令将其推送到模拟器：

```sh
adb push <path-to-gdbserver>/gdbserver /system/bin/
```

验证gdbserver是否成功上传：

```sh
adb shell gdbserver --help
```

检查gdbserver版本：

```sh
adb shell gdbserver --version
```

### 第三步：启动gdbserver
假设我们要调试的进程ID为1234，使用以下命令启动gdbserver：

```sh
adb shell gdbserver :8888 --attach 1234
```

或者直接启动程序并附加gdbserver：

```sh
adb shell gdbserver :8888 /path/to/your/app
```

### 第四步：转发端口
使用`adb forward`命令转发端口：

```sh
adb forward tcp:8888 tcp:8888
```

### 第五步：启动预编译的gdb客户端
启动预编译的gdb客户端：

```sh
/path/to/ndk/prebuilt/android-arm/gdb
```

在gdb控制台中连接到gdbserver：

```sh
(gdb) target remote :8888
```

现在我们可以与目标进程进行交互了。列出寄存器清单：

```sh
(gdb) info registers
```

至此，我们已经成功配置并启动了GDB调试环境。在后续的文章中，我将演示如何使用相同的配置，通过GDB在NDK应用程序中探测内存损坏漏洞。

## 相关链接
- [安卓 Hacking Part 1：应用组件攻防](http://bobao.360.cn/learning/detail/122.html)
- [安卓 Hacking Part 2：Content Provider攻防](http://bobao.360.cn/learning/detail/127.html)
- [安卓 Hacking Part 3：Broadcast Receivers攻防](http://bobao.360.cn/learning/detail/126.html)
- [安卓 Hacking Part 4：非预期的信息泄露](http://bobao.360.cn/learning/detail/133.html)
- [安卓 Hacking Part 5：使用JDB调试Java应用](http://bobao.360.cn/learning/detail/138.html)
- [安卓 Hacking Part 6：调试Android应用](http://bobao.360.cn/learning/detail/140.html)
- [安卓 Hacking Part 7：攻击WebView](http://bobao.360.cn/learning/detail/142.html)
- [安卓 Hacking Part 8：Root的检测和绕过](http://bobao.360.cn/learning/detail/144.html)
- [安卓 Hacking Part 9：不安全的本地存储：Shared Preferences](http://bobao.360.cn/learning/detail/150.html)
- [安卓 Hacking Part 10：不安全的本地存储](http://bobao.360.cn/learning/detail/152.html)
- [安卓 Hacking Part 11：使用Introspy进行黑盒测试](http://bobao.360.cn/learning/detail/154.html)
- [安卓 Hacking Part 12：使用第三方库加固Shared Preferences](http://bobao.360.cn/learning/detail/156.html)
- [安卓 Hacking Part 13：使用Drozer进行安全测试](http://bobao.360.cn/learning/detail/158.html)
- [安卓 Hacking Part 14：在没有root的设备上检测并导出app特定的数据](http://bobao.360.cn/learning/detail/161.html)
- [安卓 Hacking Part 15：使用备份技术黑掉安卓应用](http://bobao.360.cn/learning/detail/169.html)
- [安卓 Hacking Part 16：脆弱的加密](http://bobao.360.cn/learning/detail/174.html)
- [安卓 Hacking Part 17：破解Android应用](http://bobao.360.cn/learning/detail/179.html)
- [安卓 Hacking Part 18：逆向工程入门篇](http://bobao.360.cn/learning/detail/3648.html)
- [安卓 Hacking Part 19：NoSQL数据库不安全的数据存储](http://bobao.360.cn/learning/detail/3653.html)