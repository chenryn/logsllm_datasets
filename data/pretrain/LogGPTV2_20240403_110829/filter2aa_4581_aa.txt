# REbase
Binary RE, 400 points
## Description:
> You receive an ELF binary which you must unlock with a key. Find the key and it will contain your flag.
## Solution:
Let's start by inspecting the binary:
```console
root@kali:/media/sf_CTFs/mitre/rebase# file REbase-fix
REbase-fix: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, stripped
root@kali:/media/sf_CTFs/mitre/rebase# ./REbase-fix
Usage: ./REbase flag
root@kali:/media/sf_CTFs/mitre/rebase# ./REbase-fix test
4
rUC/C/==
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=
Try Again :(
root@kali:/media/sf_CTFs/mitre/rebase# ./REbase-fix my_flag
7
wBsyMdbibi==
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=
Try Again :(
```
It looks like the program is outputting base64-encoded messages, let's try to decode them:
```console
root@kali:/media/sf_CTFs/mitre/rebase# echo rUC/C/== | base64 -d && echo
@
root@kali:/media/sf_CTFs/mitre/rebase# echo wBsyMdbibi== | base64 -d && echo
1n
root@kali:/media/sf_CTFs/mitre/rebase# echo ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8= | base64 -d && echo
N2_fy"s
```
This does not appear to be meaningful. However the resemblance to Base64 behavior is very high:
```console
root@kali:/media/sf_CTFs/mitre/rebase# ./REbase-fix a
1
QQ==
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=
Try Again :(
root@kali:/media/sf_CTFs/mitre/rebase# ./REbase-fix aa
2
QWi=
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=
Try Again :(
root@kali:/media/sf_CTFs/mitre/rebase# ./REbase-fix aaa
3
NVYi
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=
Try Again :(
(root@kali:/media/sf_CTFs/mitre/rebase# echo -n 'a' | base64
YQ==
root@kali:/media/sf_CTFs/mitre/rebase# echo -n 'aa' | base64
YWE=
root@kali:/media/sf_CTFs/mitre/rebase# echo -n 'aaa' | base64
YWFh)
```
It looks like the padding character is identical to Base64 ("`=`"), and that each encoded character represents 6 bits of data. Therefore, three 8-bit bytes are represented by four 6-bit encoded characters - just like Base64.
Another observation is that if we try to enter "`MCA{`" as the prefix for the flag, we get a prefix which is identical to the second (constant) encoded string that the program is printing:
```console
root@kali:/media/sf_CTFs/mitre/rebase# ./REbase-fix MCA{test_flag}
14
ZXFWt2Kse2KyMdbiUY8=
ZXFWtmKgDZCyrmC5B+CiVfsyXUCQVfsyZRFzDU4yX2YCD/F5Ih8=
Try Again :(
```
Base64 is based on a dictionary of 64 characters where every character represents an index. The standard dictionary is `"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"`. 
The algorithm iterates the input string as 6-bit indices, and for each index uses the appropriate character from the dictionary. For example, "A" is 0, and "B" is 1.
In standard Base64, the string "MCA" will be decoded as `TUNB`:
```
M        C        A       
01001101 01000011 01000001 
# Arrange as 6-bit indices:
010011 010100 001101 000001 
T-19   U-20   N-13   B-1
```
In our case, "MCA" is decoded as `ZXFW` - so it looks like we are using a different dictionary, one where "Z" is in the 19th place, "U" is in the 20th, "N" is 13 and "W" is 1.
The naive implementation usually uses a long string to represent the dictionary, so let's look for one in the code:
```console
# strings REbase-fix | grep -x '.\{30,\}'
VBNMqwertyuiopasdfghjklzxcvbn/+m
!"''''$&(,''''-./0''''1349''''EFGH''''ISTU''''VWXY''''Z[\]''''^_`a''''bcde''''fghi''''jklm''''nopq''''rstu''''vwxy''''z{|}''''~
MN''''OPRT''''UVWY''''Z[\_''''`abc''''defh''''ijk
NNNN !"#NNNN$%&'NNNN()*+NNNN,-./NNNN0123NNNN4567NNNN89:;NNNN?NNNN@ABCNNNNDEFGNNNNHIJKNNNNLMNONNNNPQRSNNNNTVWXNNNNYZ[\NNNN]^_`NNNNabcdNNNNefghNNNNijklNNNNmnopNNNNqrstNNNNuvwxNNNNyz{|NNNN}~
 ''''!"#$''''%&'('''')*+,''''-./0''''1234''''5678''''9;@AB''''CDFJ''''KLMN''''OPRS''''TUVW''''XYZ[''''\]^_''''`abc''''defg''''hijk''''lmno''''pqrs''''tuvw''''xyz{''''|}~
$Info: This file is packed with the UPX executable packer http://upx.sf.net $
$Id: UPX 3.95 Copyright (C) 1996-2018 the UPX Team. All Rights Reserved. $
```
The command above shows only strings of length >= 30. The first string looks almost like our dictionary (notice the suffix which ends with `/+` - just like in the standard Base64 dictionary) - but it's much shorter than expected. However, another interesting string has surfaced from this query: "This file is packed with the UPX executable packer".
Let's try to unpack it and see if it helps:
```
root@kali:/media/sf_CTFs/mitre/rebase# upx -d REbase-fix
                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2018
UPX 3.95        Markus Oberhumer, Laszlo Molnar & John Reiser   Aug 26th 2018
        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
    682696 attached_threads > 0
malloc_consolidate(): invalid chunk size
```