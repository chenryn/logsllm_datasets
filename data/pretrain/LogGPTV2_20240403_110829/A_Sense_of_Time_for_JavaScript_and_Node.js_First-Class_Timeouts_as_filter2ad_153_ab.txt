2
3
4
if name . match ( / ( \ / . + ) + $ /) : # ReDoS
data = await r e a d F i l e ( name ) # ReadDoS
client . write ( data )
Figure 2: Example code of our simple server. It is vulnerable to two
EHP attacks: ReDoS (Line 2) and ReadDoS (Line 3).
not large synchronous complexity (time) then it is not an
EHP attack. For example, an AC attack could result in
a lifeline with O(n2) callbacks each costing O(1). Al-
though many concurrent AC attacks of this form would
degrade the service’s throughput, this would comprise a
DDoS attack, which is outside our threat model (§3.1).
Speaking more broadly, EHP attacks are only possible
when clients share execution resources. In the OTPCA,
a blocked client affects only its own thread, and frame-
works such as Apache support thousands of “Event Han-
dlers” (client threads) [61]. In the EDA, all clients share
one Event Loop and a limited Worker Pool; for exam-
ple, in Node.js the Worker Pool can contain at most 128
Workers [17]. Exhausting the set of Event Handlers in
the OTPCA requires a DDoS attack, while exhausting
them in the EDA is trivial if an EHP vulnerability can be
found.
3.3 Example EHP attacks: ReDoS and ReadDoS
To illustrate EHP attacks, we developed a minimal vul-
nerable ﬁle server with EHP vulnerabilities common in
real npm modules as described in §3.4. Figure 2 shows
pseudocode, with the EHP vulnerabilities indicated: Re-
DoS on line 2, and ReadDoS on line 3.
The regular expression on Line 2 is vulnerable to Re-
DoS. A string composed of /’s followed by a newline
takes exponential time to evaluate in Node.js’s regular
expression engine, poisoning the Event Loop in a CPU-
bound EHP attack.
The second EHP vulnerability is on Line 3. Our server
has a directory traversal vulnerability, permitting clients
to read arbitrary ﬁles.
In the EDA, directory traversal
vulnerabilities can be parlayed into I/O-bound EHP at-
tacks, “ReadDoS”, provided the attacker can identify a
slow ﬁle3 from which to read. Since Line 3 uses the asyn-
chronous framework API readFile, each ReadDoS at-
tack on this server will poison a Worker in an I/O-bound
EHP attack.
Figure 3 shows the impact of EHP attacks on baseline
Node.js, as well as the effectiveness of our Node.cure
prototype. The methodology is described in the cap-
tion. On baseline Node.js these attacks result in com-
plete DoS, with zero throughput. Without Node.cure the
3In addition to ﬁles
systems,
/dev/random is a good example of a slow ﬁle: “[r]eads from
/dev/random may block” [33].
exposed on network ﬁle
Figure 3: This ﬁgure shows the effect of evil input on the throughput
of a server based on Figure 2, with realistic vulnerabilities. Legiti-
mate requests came from 80 clients using ab [2] from another ma-
chine. The attacks are against either baseline Node.js (grey) or our
prototype, Node.cure (black). For ReDoS (triangles), evil input was
injected after three seconds, poisoning the baseline Event Loop. For
ReadDoS (circles), evil input was injected four times at one second in-
tervals beginning after three seconds, eventually poisoning the baseline
Worker Pool. The lines for Node.cure shows its effectiveness against
these EHP attacks. When attacked, Node.cure’s throughput dips un-
til a TimeoutError aborts the malicious request(s), after which its
throughput temporarily rises as it bursts through the built-up queue of
pending events or tasks.
only remedy would be to restart the server, dropping all
existing client connections. Unfortunately, restarting the
server would not solve the problem, since the attacker
could simply submit another malicious request. With
Node.cure the server can return to its steady-state per-
formance.
The architecture-level behavior of the ReDoS attack is
illustrated in Figure 1. After client A’s benign request is
sanitized (CBA1), the readFile task goes to the Worker
Pool (TaskA1), and when the read completes the callback
returns the ﬁle content to A (CBA2). Then client B’s ma-
licious request arrives and triggers ReDoS (CBB1), drop-
ping the server throughput to zero. The ReadDoS attack
has a similar effect on the Worker Pool, with the same
unhappy result.
3.4 Study of reported vulnerabilities in npm
Modern software commonly relies on open-source li-
braries [88], and Node.js applications are no exception.
Third-party npm modules are frequently used in produc-
tion [40], so EHP vulnerabilities in npm may translate
directly into EHP vulnerabilities in Node.js servers. For
example, Staicu and Pradel recently demonstrated that
many ReDoS vulnerabilities in popular npm modules can
be used for EHP attacks in hundreds of websites from the
Alexa Top Million [92].
In this section we present an EHP-oriented analysis
of the security vulnerabilities reported in npm modules.
As shown in Figure 4, we found that 35% (403/1132)
346    27th USENIX Security Symposium
USENIX Association
of the security vulnerabilities reported in a major npm
vulnerability database could be used as an EHP vector.
Methodology. We examined the vulnerabilities in
npm modules reported in the database of Snyk.io [22],
a security company that monitors open-source library
ecosystems for vulnerabilities. We also considered
the vulnerabilities in the CVE database and the Node
Security Platform database [13], but found that these
databases were subsets of the Snyk.io database.
We obtained a dump of Snyk.io’s npm database in June
2018. Each entry was somewhat unstructured, with in-
consistent CWE IDs and descriptions of different classes
of vulnerabilities. Based on its title and description, we
assigned each vulnerability to one of 17 main categories
based on those used by Snyk.io. We used regular expres-
sions to ensure our classiﬁcation was consistent. We iter-
atively improved our regular expressions until we could
automatically classify 93% of the vulnerabilities, and
marked the remaining 7% as “Other”. A similar anal-
ysis relying solely on manual classiﬁcation appeared in
our previous work [52].
Some of the reported security vulnerabilities could be
used to launch EHP attacks: Directory Traversal vulner-
abilities that permit arbitrary ﬁle reads, Denial of Service
vulnerabilities (those that are CPU-bound, e.g. ReDoS),
and Arbitrary File Write vulnerabilities. We identiﬁed
such vulnerabilities using regular expressions on the de-
scriptions of the vulnerabilities in the database, manually
verifying the results. In the few cases where the database
description was too terse, we manually categorized vul-
nerabilities based on the issue and patch description in
the module’s bug tracker and version control system.
Results. Figure 4 shows the distribution of vulnera-
bility types, absorbing categories with fewer than 20 vul-
nerabilities into the aforementioned “Other” category. A
high-level CWE number is given next to each class.
The dark bars in Figure 4 show the 403 vulnerabili-
ties (35%) that can be employed in an EHP attack under
our threat model (§3.1). The 266 EHP-relevant Directory
Traversal vulnerabilities are exploitable because they al-
low arbitrary ﬁle reads, which can poison the Event Loop
or the Worker Pool through ReadDoS (§3.3). The 121
EHP-relevant Denial of Service vulnerabilities poison
the Event Loop; 115 are ReDoS4, and the remaining 11
can trigger inﬁnite loops or worst-case performance in
In Other are 11 Arbitrary File
inefﬁcient algorithms.
Write vulnerabilities that, similar to ReadDoS, can be
used for EHP attacks by writing to slow ﬁles.
4The number of ReDoS vulnerabilities in the Snyk.io database may
be skewed by recent studies of ReDoS incidence in the npm ecosys-
tem [92, 53].
Figure 4: Classiﬁcation of the 1132 npm module vulnerabilities, by
category and by usefulness in EHP attacks. We obtained the dump of
the database from Snyk.io on 7 June 2018.
4 Defending Against EHP Attacks
EHP vulnerabilities stem from vulnerable APIs that fail
to provide fair cooperative multitasking. If a service can-
not provide a (small) bound on the synchronous time of
its APIs, then it is vulnerable to EHP attacks. Conversely,
if an application can bound the synchronous time of its
APIs, then it is EHP-safe.
An EHP attack has two faces: mechanism (vulnerable
API) and effect (poisoned Event Handler). Thus there are
two ways to defeat an EHP attack. Either the vulnerable
API can be refactored, or a poisoned Event Handler can
be detected and addressed. In this section we summarize
both of these approaches and then evaluate them.
4.1 Prevent through partitioning
An API is vulnerable if there is a difference between
its average-case and worst-case synchronous costs, pro-
vided of course that this worst-case cost is unbearable.
A service can achieve EHP safety by statically bounding
the cost of each of its APIs, both those that it invokes
and those that it deﬁnes itself. For example, a developer
could partition every API into a sequence of Constant
Worst-Case Execution Time stages. Such a partitioning
would render the service immune to EHP attacks since
it would bound the synchronous complexity and time of
each lifeline.
4.2 Detect and react through timeouts
The goal of the partitioning approach is to bound a life-
line’s synchronous complexity as a way to bound its
synchronous time.
Instead of statically bounding an
API’s synchronous complexity through program refac-
toring, using timeouts we can dynamically bound its
synchronous time. Then the worst-case complexity of
each callback and task would be irrelevant, because they
would be unable to take more than the quantum provided
by the runtime.
In this approach, the runtime detects
and aborts long-running callbacks and tasks by emitting
a TimeoutError, thrown from synchronous code (call-
backs) and returned from asynchronous code (tasks).
USENIX Association
27th USENIX Security Symposium    347
We refer to this approach as ﬁrst-class timeouts and
we believe it is novel. To the best of our knowledge,
existing timeout schemes take one of two forms. Some
are per-API, e.g. the timeout option in the .NET frame-
work’s regular expression API to combat ReDoS [19].
Per-API timeouts are ad hoc by deﬁnition. The other
class of timeouts is on a per-process or per-thread ba-
sis. For example, desktop and mobile operating sys-
tems commonly use a heartbeat mechanism to detect and
restart unresponsive applications, and in the OTPCA a
client thread can easily be killed and replaced if it ex-
ceeds a timeout. This approach fails in the EDA because
clients are not isolated on separate execution resources.
Detecting and restarting a blocked Event Loop will break
all existing client connections, resulting in DoS. Because
of this, timeouts must be a ﬁrst-class member of an EDA
framework, non-destructively guaranteeing that no Event
Handler can block.
4.3 Analysis
Soundness. The partitioning approach can prevent EHP
attacks that exploit high-complexity operations. How-
ever, soundly preventing EHP attacks by this means is
difﬁcult since it requires case-by-case changes.
In ad-
dition, it is not clear how to apply the partitioning ap-
proach to I/O. At the application level, I/O can be parti-
tioned at the byte granularity, but an I/O may be just as
slow for 1 byte as for 1 MB. If an OS offers truly asyn-
chronous I/O interfaces then these provide an avenue to
more ﬁne-grained partitioning, but unfortunately Linux’s
asynchronous I/O mechanisms are incomplete for both
ﬁle I/O and DNS resolution.
If timeouts are applied systematically across the soft-
ware stack (application, framework, language), then they
offer a strong guarantee against EHP attacks. When a
timeout is detected, the application can respond appro-
priately to it. The difﬁculty with timeouts is choosing a
threshold [85], since a too-generous threshold still per-
mits an attacker to disrupt legitimate requests. As a re-
sult, if the timeout threshold cannot be tightly deﬁned,
then it ought to be used in combination with a black-
list; after observing a client request time out, the server
should drop subsequent connections from that client.
Refactoring cost. Both of these approaches incur
a refactoring cost. For partitioning the cost is pro-
hibitive. Any APIs invoked by an EHP-safe service must
have (small) bounded synchronous time. To guarantee
this bound, developers would need to re-implement any
third-party APIs with undesirable performance. This
task would be particularly problematic in a module-
dominated ecosystem similar to Node.js. As the com-
position of safe APIs may be vulnerable5, application
5For example, consider while(1){}, which makes an inﬁnite se-
quence of constant-time language “API calls”.
APIs might also need to be refactored. The partition-
ing approach is by deﬁnition case-by-case, so future de-
velopment and maintenance would need to preserve the
bounds required by the service.
For timeouts, we perceive a lower refactoring cost.
The timeout must be handled by application develop-
ers, but they can do so using existing exception handling
mechanisms. Adding a new try-catch block should be
easier than re-implementing functionality in a partitioned
manner.
Position. We believe that relying on developers to
implement fair cooperative multitasking via partitioning
is unsafe. Just as modern languages offer null pointer
exceptions and buffer overﬂow exceptions to protect
against common security vulnerabilities, so too should
modern EDA frameworks offer timeout exceptions to
protect against EHP attacks.
In the remainder of the paper we describe our design,
implementation, and evaluation of ﬁrst-class timeouts in
Node.js. We devote a large portion of our discussion (§8)
to the choice of timeout and the refactoring implications
of ﬁrst-class timeouts.
5 Node.cure:
Node.js
First-Class Timeouts for
Though ﬁrst-class timeouts are conceptually simple, re-
alizing them in a real-world framework such as Node.js
is difﬁcult. For soundness, every aspect of the Node.js
framework must be able to emit TimeoutErrors without
compromising the system state, from the language to the
libraries to the application logic, and in both synchronous
and asynchronous aspects. For practicality, monitoring
for timeouts must be lightweight, lest they cost more than
they are worth.
Here is the desired behavior of ﬁrst-class timeouts.
We want to bound the synchronous time of every call-
back and task and deliver a TimeoutError if this bound
is exceeded. A long-running callback poisons the Event
Loop; with ﬁrst-class timeouts a TimeoutError should
be thrown within such a callback. A long-running task
poisons its Worker; such a task should be aborted and
fulﬁlled with a TimeoutError.
To ensure soundness, we begin with a taxonomy of the
places where vulnerable APIs can be found in a Node.js
application (§5.1). The subsequent subsections describe
how we provide TimeoutErrors across this taxonomy for
the Worker Pool (§5.2) and the Event Loop (§5.3). We
discuss performance optimizations in §5.5, and summa-
rize our prototype in §5.6.
5.1 Taxonomy of vulnerable APIs
Table 1 classiﬁes vulnerable APIs along three axes.
Along the ﬁrst two axes, a vulnerable API affects either
the Event Loop or a Worker, and it might be CPU-bound
348    27th USENIX Security Symposium
USENIX Association
Event Loop (§5.3)
I/O-bound