cryptographic keys from another address space may be dicult if
not impossible, because P+C cannot answer which cache
sets/lines have been used. However, due to the coarse-grained char-
acteristic of P+C it can reduce noise introduced by world
switching, pseudo-random replacement policy, and other factors,
which makes it a better choice to build cross-world covert channels.
7.2 Cross-world Covert Channels without
Normal World Kernel Privileges
To loosen up the attack model and allow normal world applications
to use the covert channels, we can adopt the P approach pro-
posed in [21] that can be conducted in userland without using the
DC CISW instruction. As mentioned in Section 3, we can also utilize
the Linux perf_event_open system call to monitor “L1/L2 cache rell
events” in userland to implement C.
7.3 Limitations of Our Experiments
While we took great eorts to maintain our experiments’ validity,
we could not consider some factors that may have aected the
bandwidth of the constructed covert channels. Specically, SeCReT
is not openly available (in fact, the authors were unwilling to share
their code or system with us), therefore we were unable to run
our experiments with SeCReT enabled. It is unclear how much
SeCReT or similar solutions would impact the CPU load and even
the number of accesses to the cache. We want to emphasize that
the deployment of SeCReT or a strong monitor will not aect the
feasibility of the proposed covert channels but only downgrade the
bandwidth.
8 RELATED WORK
Cache Side Channel Attacks: Cache side channel attacks exploit
the leakage of information caused by micro-architectural time dif-
ferences between a cache hit and a cache miss [47]. They have been
used to steal cryptographic keys in victim programs [22, 29, 40, 41,
45], trace the execution of programs [1, 7, 21], and extract other
sensitive information [32, 35, 44, 46]. Even though covert channels
can be built using various techniques [8, 34], cache-based covert
channel received a lot of attention in recent years [36]. Xu et al.
explored cross-VM L2 cache covert channels in Amazon EC2 [38].
Wu et al. designed a high-bandwidth and reliable data transmission
cache-based covert channel in the cloud [37]. Maurice et al. char-
acterized noise on cache covert channels and built a robust covert
channel based on established techniques from wireless transmission
protocols [25].
The Security of TrustZone: SeCReT showed that TrustZone itself
cannot guarantee secure communication between normal and se-
cure world [18]. Machiry et al. presented vulnerabilities that permit
normal world user-level applications to read and write any memory
location in the kernel by tricking secure world into performing the
450
P+C: Novel Cross-world Covert Channels on ARM TrustZone
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
(a)
(b)
(c)
(d)
(e)
(f)
Figure 7: Transferred images using covert channels on Tizen TV. (a) Original images; (b) Single-core line-counting; (c) Single-
core set-counting; (d) Cross-core; (e) Cross-core when YouTube is running; (f) Cross-core under extreme conditions.
operations on its behalf [23]. ARMageddon demonstrated how to
use P+P to spy code executions on TrustZone [21]. TruSpy
demonstrated that it is possible for a normal world attacker to steal a
ne-grained secret from the secure world using timing-based cache
side-channel [42]. In this paper, we presented the rst attempt to
build cross-world covert channels in the TrustZone architecture.
9 CONCLUSION
In this paper, we presented cross-world covert channel attacks on
ARM TrustZone, which is designed to provide hardware-assisted
isolation. We demonstrated that existing channel protection solu-
tions, such as SeCReT, or even more powerful mechanisms, such
as a strong monitor, can be bypassed. We discussed the reasons
why previous attacks, including P+P and F+R,
do not work for the cross-world scenario on ARM. And, we de-
signed a low noise, no shared memory needed cache attack named
P+C by leveraging overlooked PMU “L1/L2 cache rell
events.” Our experiments showed that P+C-based cross-
world covert channels could achieve bandwidth as high as 27 KB/s
under the single-core scenario and 95 B/s under the cross-core
scenario.
ACKNOWLEGMENT
Many thanks to the anonymous referees for their valuable and help-
ful comments. We would also like to thank our shepherd, Fengwei
Zhang.
This material is based upon work supported in part by Sam-
sung Research, Samsung Electronics, the Center for Cybersecurity
451
and Digital Forensics at Arizona State University, the National Sci-
ence Foundation (NSF 1651661), the Defense Advanced Research
Projects Agency (DARPA HR001118C0060), and the Global Research
Laboratory Program through the National Research Foundation
of Korea funded by the Ministry of Science and ICT under Grant
NRF-2014K1A1A2043029.
Any opinions, ndings, conclusions or recommendations ex-
pressed in this material are those of the author(s) and do not neces-
sarily reect the views of United States Government or any agency
thereof.
REFERENCES
[1] Onur Acıiçmez and Werner Schindler. 2008. A vulnerability in RSA implemen-
tations due to instruction cache analysis and its demonstration on OpenSSL. In
Proceedings of the Cryptographer’s Track at the RSA Conference (CT-RSA). 256–273.
[2] ARM. 2012. ARM Architecture Reference Manual, ARMv7-A and ARMv7-R
edition. http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0406c/
index.html. (2012).
[3] ARM. 2012. ARMv6-M Architecture Reference Manual. https://silver.arm.com/
download/download.tm?pv=1102513. (2012).
[4] ARM. 2016. ARM Architecture Reference Manual ARMv8, for ARMv8-A archi-
tecture prole. http://infocenter.arm.com/help/topic/com.arm.doc.ddi0487a.k/
index.html. (2016).
SMC CALLING CONVENTION System Software on ARM
Platforms. http://infocenter.arm.com/help/topic/com.arm.doc.den0028b/ARM_
DEN0028B_SMC_Calling_Convention.pdf. (2016).
[5] ARM. 2016.
[6] ARM. 2017. ARM Trusted Firmware.
https://github.com/ARM-software/
arm-trusted-rmware. (2017).
[7] Billy Bob Brumley and Risto M Hakala. 2009. Cache-timing template attacks.
In Proceedings of the International Conference on the Theory and Application of
Cryptology and Information Security. 667–684.
[8] Serdar Cabuk, Carla E Brodley, and Clay Shields. 2004. IP covert timing channels:
design and detection. In Proceedings of the 11th ACM Conference on Computer
and Communications Security (CCS). Washington, DC, 178–187.
[9] Yue Chen, Yulong Zhang, Zhi Wang, and Tao Wei. 2017. Downgrade Attack on
TrustZone. arXiv preprint arXiv:1707.05082 (2017).
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
H. Cho et al.
[10] Marco Chiappetta, Erkay Savas, and Cemal Yilmaz. 2016. Real time detection of
cache-based side-channel attacks using hardware performance counters. Applied
Soft Computing 49 (2016), 1162–1174.
[11] Marc Green, Leandro Rodrigues-Lima, Andreas Zankl, Gorka Irazoqui, Johann
Heyszl, and Thomas Eisenbarth. 2017. AutoLock: Why Cache Attacks on ARM Are
Harder Than You Think. In Proceedings of the 26th USENIX Security Symposium
(Security). Vancouver, BC, Canada, 1075–1091.
[12] Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Mangard. 2016.
Flush+ Flush: a fast and stealthy cache attack. In Detection of Intrusions and
Malware, and Vulnerability Assessment. Springer, 279–299.
[13] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. 2015. ache Template
Attacks: Automating Attacks on Inclusive Last-Level Caches. In Proceedings of
the 24th USENIX Security Symposium (Security). Washington, DC, 897–912.
[14] Berk Gülmezoğlu, Mehmet Sinan Inci, Gorka Irazoqui, Thomas Eisenbarth, and
Berk Sunar. 2015. A faster and more realistic ush+ reload attack on AES. In
Proceedings of the International Workshop on Constructive Side-Channel Analysis
and Secure Design. 111–126.
[15] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. 2015. S$A: A Shared Cache
Attack That Works across Cores and Dees VM Sandboxing–and Its Applica-
tion to AES. In Proceedings of the 36th IEEE Symposium on Security and Privacy
(Oakland). San Jose, CA, 591–604.
[16] Gorka Irazoqui, Mehmet Sinan IncI, Thomas Eisenbarth, and Berk Sunar. 2015.
Know thy neighbor: crypto library detection in cloud. Proceedings on Privacy
Enhancing Technologies 2015, 1 (2015), 25–40.
[17] Gorka Irazoqui, Mehmet Sinan Inci, Thomas Eisenbarth, and Berk Sunar. 2016.
Lucky 13 strikes back. In Proceedings of the 10th ACM Symposium on Information,
Computer and Communications Security (ASIACCS). Singapore, 85–96.
[18] Jinsoo Jang, Sunjune Kong, Minsu Kim, Daegyeong Kim, and Brent Byunghoon
Kang. 2015. SeCReT: Secure Channel between Rich Execution Environment and
Trusted Execution Environment. In Proceedings of the 2015 Annual Network and
Distributed System Security Symposium (NDSS). San Diego, CA.
[19] laginimaineb. 2016. Exploit that extracts Qualcomm’s KeyMaster keys using
CVE-2015-6639. https://github.com/laginimaineb/ExtractKeyMaster. (2016).
[20] laginimaineb. 2016. Qualcomm TrustZone kernel privilege escalation using
CVE-2016-2431. https://github.com/laginimaineb/cve-2016-2431. (2016).
[21] Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clémentine Maurice, and Stefan
Mangard. 2016. ARMageddon: Cache attacks on mobile devices. In Proceedings
of the 25th USENIX Security Symposium (Security). Austin, TX, 549–564.
[22] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B Lee. 2015. Last-
level cache side-channel attacks are practical. In Proceedings of the 36th IEEE
Symposium on Security and Privacy (Oakland). San Jose, CA, 605–622.
[23] Aravind Machiry, Eric Gustafson, Chad Spensky, Chris Salls, Nick Stephens,
Ruoyu Wang, Antonio Bianchi, Yung Ryn Choe, Christopher Kruegel, and Gio-
vanni Vigna. 2017. BOOMERANG: Exploiting the Semantic Gap in Trusted
Execution Environments. In Proceedings of the 2017 Annual Network and Dis-
tributed System Security Symposium (NDSS). San Diego, CA.
[24] Clémentine Maurice, Christoph Neumann, Olivier Heen, and Aurélien Francillon.
2015. C5: cross-cores cache covert channel. In Proceedings of the International
Conference on Detection of Intrusions and Malware, and Vulnerability Assessment.
46–64.
[25] Clémentine Maurice, Manuel Weber, Michael Schwarz, Lukas Giner, Daniel Gruss,
Carlo Alberto Boano, Stefan Mangard, and Kay Römer. 2017. Hello from the
other side: SSH over robust cache covert channels in the cloud. In Proceedings of
the 2017 Annual Network and Distributed System Security Symposium (NDSS). San
Diego, CA.
[26] MITRE. 2013. CVE-2013-3051 Detail. https://nvd.nist.gov/vuln/detail/CVE-2013-
3051. (2013).
(2017).
[27] Zhenyu Ning, Fengwei Zhang, Weisong Shi, and Weidong Shi. 2017. Position
Paper: Challenges Towards Securing Hardware-assisted Execution Environments.
In Proceedings of the Hardware and Architectural Support for Security and Privacy.
[28] OP-TEE. 2017. OP-TEE Trusted OS Documentation. https://www.op-tee.org/.
[29] Dag Arne Osvik, Adi Shamir, and Eran Tromer. 2006. Cache attacks and counter-
measures: the case of AES. In Proceedings of the Cryptographer’s Track at the RSA
Conference (CT-RSA). 1–20.
[30] Irving S Reed and Gustave Solomon. 1960. Polynomial codes over certain nite
elds. Journal of the society for industrial and applied mathematics 8, 2 (1960),
300–304.
[31] Jan Reineke, Daniel Grund, Christoph Berg, and Reinhard Wilhelm. 2007. Timing
predictability of cache replacement policies. Real-Time Systems 37, 2 (2007),
99–122.
[32] Thomas Ristenpart, Eran Tromer, Hovav Shacham, and Stefan Savage. 2009.
Hey, you, get o of my cloud: exploring information leakage in third-party
compute clouds. In Proceedings of the 16th ACM Conference on Computer and
Communications Security (CCS). Chicago, IL, 199–212.
http://blog.
[33] Dan Rosenberg. 2013.
azimuthsecurity.com/2013/04/unlocking-motorola-bootloader.html. (2013).
[34] Gaurav Shah, Andres Molina, Matt Blaze, et al. 2006. Keyboards and Covert
Channels.. In Proceedings of the 15th USENIX Security Symposium (Security).
Vancouver, Canada, 59–75.
Unlock the Motorola Bootloader.
[35] Venkatanathan Varadarajan, Yinqian Zhang, Thomas Ristenpart, and Michael
Swift. 2015. A Placement Vulnerability Study in Multi-Tenant Public Clouds. In
Proceedings of the 24th USENIX Security Symposium (Security). Washington, DC,
913–928.
[36] Zhenghong Wang and Ruby B Lee. 2006. Covert and side channels due to
processor architecture. In Proceedings of the 22nd Computer Security Applications
Conference (ACSAC). 473–482.
[37] Zhenyu Wu, Zhang Xu, and Haining Wang. 2012. Whispers in the Hyper-space:
High-speed Covert Channel Attacks in the Cloud. In Proceedings of the 21st
USENIX Security Symposium (Security). Bellevue, WA, 159–173.
[38] Yunjing Xu, Michael Bailey, Farnam Jahanian, Kaustubh Joshi, Matti Hiltunen,
and Richard Schlichting. 2011. An exploration of L2 cache covert channels
in virtualized environments. In Proceedings of the 3rd ACM workshop on Cloud
computing security workshop. 29–40.
[39] Yongcheol Yang, Jiyoung Moon, Kiuhae Jung, and Jeik Kim. 2018. Downloadable
trusted applications on Tizen TV: TrustWare Extension: As a downloadable
application framework. In Proceedings of the 2018 IEEE International Conference
on Consumer Electronics (ICCE). Las Vegas, NV.
[40] Yuval Yarom and Naomi Benger. 2014. Recovering OpenSSL ECDSA Nonces
Using the FLUSH+ RELOAD Cache Side-channel Attack. IACR Cryptology ePrint
Archive 2014 (2014), 140.
[41] Yuval Yarom and Katrina Falkner. 2014. Flush+reload: a high resolution, low
noise, L3 cache side-channel attack. In Proceedings of the 23rd USENIX Security
Symposium (Security). San Diego, CA, 719–732.
[42] Ning Zhang, Kun Sun, Deborah Shands, Wenjing Lou, and Y Thomas Hou. 2016.
TruSpy: Cache Side-Channel Information Leakage from the Secure World on
ARM Devices. https://eprint.iacr.org/2016/980.pdf. (2016).
[43] Xiaokuan Zhang, Yuan Xiao, and Yinqian Zhang. 2016. Return-Oriented Flush-
Reload Side Channels on ARM and Their Implications for Android Devices. In
Proceedings of the 23rd ACM Conference on Computer and Communications Security
(CCS). Vienna, Austria, 858–870.
[44] Yinqian Zhang, Ari Juels, Alina Oprea, and Michael K. Reiter. 2011. HomeAlone:
Co-residency Detection in the Cloud via Side-Channel Analysis. In Proceedings
of the 32nd IEEE Symposium on Security and Privacy (Oakland). Oakland, CA,
313–328.
[45] Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas Ristenpart. 2012. Cross-
VM side channels and their use to extract private keys. In Proceedings of the 19th
ACM Conference on Computer and Communications Security (CCS). Raleigh, NC,
305–316.
[46] Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas Ristenpart. 2014. Cross-
Tenant Side-Channel Attacks in PaaS Clouds. In Proceedings of the 21st ACM
Conference on Computer and Communications Security (CCS). Scottsdale, Arizona,
990–1003.
[47] YongBin Zhou and DengGuo Feng. 2005. Side-Channel Attacks: Ten Years After
Its Publication and the Impacts on Cryptographic Module Security Testing. IACR
Cryptology ePrint Archive 2005 (2005), 388.
452