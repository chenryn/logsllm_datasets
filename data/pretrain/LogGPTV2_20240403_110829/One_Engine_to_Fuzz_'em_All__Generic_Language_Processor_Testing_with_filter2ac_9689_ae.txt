Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:12:53 UTC from IEEE Xplore.  Restrictions apply. 
650
TABLE III: Distribution of bugs found by evaluated fuzzers. We
perform the evaluation for 24 hours and repeat it five times. We report
the bugs that appear at least once. "-" means the fuzzers are not
applicable to the target. POLYGLOT-st refers to POLYGLOT-syntax.
t
s
-
T
O
L
G
Y
L
O
P
Type
T
O
SF: segmentation fault
L
G
AF: assertion failure
Y
L
UAF: use-after-free
O
SBOF: stack buffer overflow P
AF in parser
✗
✗ ✔ ✗
✗
AF in parser
✗ ✔ ✗
✗
✗
AF in code generation
✗
✗
✔ ✗
SF in optimization
✗
✗
✔ ✗
✗
✗
✔ ✗
✗
✗
✔ ✗
✗
✔ ✗
✗
✔ ✔ ✗
✗
✔ ✔ ✗
✔ ✗
✗
✗
✔ ✗
Target
clang
clang
clang
clang
ChakraCore SF in JIT compilation
ChakraCore AF in JIT compilation
php
php
php
php
solc
UAF in string index
SF in setlocale
SF in zend API
SBOF in header callback
SBOF in recursive struct
✗
✗
✗
✗
✗
✗
-
✗
-
✗
-
✗
-
✗
✗ ✔ -
-
✗
-
✗
✗
✗
-
-
-
-
✗
✗
-
-
-
-
-
s
u
l
i
t
u
a
N
L
F
A
M
Y
S
Q
h
t
i
m
S
C
E
I
D
(a) Clang of C
(b) ChakraCore of JavaScript
has changed. However, it is undetected by njs and causes a type
confusion. njs still uses the old layout and mistakenly treats the
first processed element, which is a user-controllable number,
as a function pointer. njs then calls that function and control
flow hijacking happens. If an attacker controls the JavaScript
code, he can utilize this bug to achieve RCE.
Case Study 3: Bypassing PHP Sandbox. The PHP bugs
found by POLYGLOT can be used to escape PHP sand-
boxes. PHP sandboxes usually disable dangerous functions
like "shell_exec" to prevent users from executing arbitrary
commands. The PoCs of our PHP bugs do not involve these
functions. Therefore, they are allowed to run in PHP sandboxes
such as [16, 19], causing memory corruption and leading to
sandbox escape [4, 5, 10].
We show the PoC of one of our bugs in Fig. 8, which only
uses a commonly-used and benign function str_replace. It
triggers an out-of-boundary memory write and crashes the
interpreter. With a well-crafted exploiting script, attackers
can modify the benign function pointers to dangerous ones.
For example, we overwrite the function pointer of echo to
shell_exec. Then calling echo("ls"), which should simply
print the string "ls", becomes shell_exec("ls"). In this way,
attackers can escape the sandbox and produce more severe
damages. Actually, the security team of Google also considers
bugs in PHP interpreter as highly security-related [7]. Therefore,
our bugs in PHP interpreters, though not assigned with CVEs,
can lead to severe security consequences.
C. Contributions of Semantic Correctness
To understand the contributions of semantic correctness in
fuzzing language processors, we perform unit tests by compar-
ing POLYGLOT and POLYGLOT-syntax which is POLYGLOT
without semantic validation. We compare them in three different
metrics: the number of unique bugs, language validity, and
edge coverage. We evaluate the number of unique bugs as it
can better reflect bug finding capabilities of the fuzzers than
the number of unique crashes [48]. For language correctness,
(c) php of PHP
(d) solc of Solidity
Fig. 9: Rate of language correctness of inputs generated by evalu-
ated fuzzers for 24h. "Correct" means the inputs can be successfully
executed or compiled by the language processors. "Syntax error"
means the inputs contain syntactic errors. "Semantic error" means
the inputs are valid syntactically but not semantically. "Unsupported"
mean the fuzzer is not applicable to the target.
we consider a test case as semantically correct as long as it
can be compiled (for compilers) or executed (for interpreters)
without aborting errors. For example, if a C program uses an
uninitialized variable, GCC might still successfully compile
the program, so we treat it as a correct test case. This method
will treat some semantically incorrect test cases as correct
ones (e.g., inputs containing undefined behaviors). We plan to
mitigate this problem in future work. We should notice that
POLYGLOT-syntax without IR mutation is basically AFL, and
we leave the comparison in the next section (§VIII-D).
Unique Bugs. We manually map each crash found by each
fuzzer in 24 hours to its corresponding bug, and show the result
in Table III. POLYGLOT-syntax finds only two bugs in PHP,
which are covered by the nine bugs POLYGLOT finds in the
four targets. We check the PoCs of the two PHP bugs and find
the bugs are triggered by a single function call to a specific
built-in function. While POLYGLOT generates such function
calls in correct test cases, POLYGLOT-syntax generates them
in incorrect ones. These function calls happen to be at the
beginning of the PoCs of POLYGLOT-syntax. Since the PHP
interpreter parses and executes one statement per time, the
bugs are triggered before the interpreter detects errors in later
statements. This shows that both POLYGLOT and POLYGLOT-
syntax can identify bugs triggerable by simple statements in
the PHP interpreter. However, only POLYGLOT detects deeper
bugs in optimization in Clang and ChakraCore because those
bugs can only be triggered by semantically correct test cases.
Language Validity. We show the details of language correct-
ness in Fig.9. Compared with POLYGLOT-syntax, POLYGLOT
improves the language validity by 50% to 642%: 642% in
Clang, 88% in ChakraCore, 54% in php, and 50% in solc.
The result shows the semantic validation greatly improves
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:12:53 UTC from IEEE Xplore.  Restrictions apply. 
651
CorrectSemantic errorSyntax errorUnsupportedPolyGlotPolyGlot-stAFLQSYMNAUTILUSCSmithDIE020406080100rate (%)PolyGlotPolyGlot-stAFLQSYMNAUTILUSCSmithDIE020406080100rate (%)PolyGlotPolyGlot-stAFLQSYMNAUTILUSCSmithDIE020406080100rate (%)PolyGlotPolyGlot-stAFLQSYMNAUTILUSCSmithDIE020406080100rate (%)TABLE IV: P-values of POLYGLOT v.s. other fuzzers. We use
Mann-Whitney U test to calculate the P-values. P-values less than 0.05
mean statistical significance. The result of nearly all the experiments is
statistically significant except for the language correctness compared
with CSmith and DIE.
v.s. Fuzzer
POLYGLOT-st
AFL
QSYM
Nautilus
CSmith
DIE
Target
Clang
ChakraCore
php
solc
Clang
ChakraCore
php
solc
Clang
ChakraCore
php
solc
Clang
ChakraCore
php
solc
Clang
ChakraCore
Coverage
0.00596
0.00609
0.00609
0.00609
0.00596
0.00609
0.00609
0.00609
0.00609
0.00609
0.00609
0.00609
0.00609
0.00609
0.00609
0.00609
0.00609
0.00596
Correctness
0.00545
0.00583
0.00609
0.00596
0.00545
0.00583
0.00609
0.00596
0.00485
0.00609
0.00609
0.00596
0.00558
0.00609
0.00609
0.00558
0.998
0.996
Bugs
0.00198
0.00198
0.00520
0.00198
0.00279
0.00325
0.00325
0.00198
0.00325
0.00325
0.00325
0.00198
0.00198
0.00198
0.00485
0.00198
0.00198
0.00198
D. Comparison with State-of-the-art Fuzzers
We also compare POLYGLOT with five state-of-the-art
fuzzers to further understand its strengths and weaknesses
in testing language processors, including the mutation-based
fuzzer AFL, the hybrid fuzzer QSYM, the grammar-based fuzzer
Nautilus, and two language-specific fuzzers CSmith and DIE.
Unique Bugs. POLYGLOT successfully identifies nine bugs in
the four targets in 24 hours: two in Clang, two in ChakraCore,
four in php and one in solc, as shown in Table III. AFL and
QSYM only identify one bug in clang respectively. Nautilus
detects one in the php interpreter, which is also covered by
POLYGLOT. CSmith and DIE find no bugs in 24 hours. The
bugs found by AFL and QSYM exist in the parser of Clang. We
check the PoCs and find them invalid in syntax: the bugs are
triggered by some unprintable characters. POLYGLOT does not
find such bugs because its goal is to find deeper bugs with valid
test cases. In fact, it does find bugs in the optimization logic
of Clang such as the one in Case Study 1 (Fig. 6a), proving
its effectiveness in finding deep bugs.
Language Validity. Compared with the three general-purpose
fuzzers (AFL, QSYM, and Nautilus), POLYGLOT improves the
language validity by 34% to 10,000%, as shown in Fig. 9.
Compared with the language-specific fuzzers, POLYGLOT gets
53% and 83% as much as that of CSmith and DIE respectively.
We investigate the result and find the reasons as follows.
AFL and QSYM do not aim to improve the language validity
as POLYGLOT does. Nautilus uses a small number of fixed
variable names and relies on name collision to generate correct
input, which turns out to be less effective. CSmith and DIE
perform much heavier and more specialized analyses than
POLYGLOT in one specific language and thus achieve higher
validity in that language.
Code Coverage against General-purpose Fuzzers. As
shown in Fig. 10, POLYGLOT identifies 230% to 3,064% more
(a) Clang of C
(b) ChakraCore of JavaScript
(c) php of PHP
(d) solc of Solidity
Fig. 10: Edge coverage found by evaluated fuzzers for 24h. We
repeat the experiments 5 times. The solid dot lines represent the mean
of the result and the shadow around lines are confidence intervals for
five runs.
the semantic correctness of the test cases. The difference
in the degree of improvement results from the complexity
and the accuracy of the BNF grammar of the language. In
POLYGLOT, C and JavaScript have 364 and 462 lines of
BNF grammar, while PHP and Solidity have 802 and 745
respectively. Also, the BNF grammar is a superset of the real
grammar the processor accepts. The mutator generates more