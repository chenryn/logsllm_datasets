以更直观的图表示在完成上述七个过程之后的堆块如下：
需要注意由于堆分配时的对齐操作，在malloc(4)时它仍然会返回一个size为0x20大小的chunk，在malloc(0x28)时会返回一个0x30大小的chunk，这两者在free之后会被放到fastbins链表下。
其中0x61ac70-0x61ac90为data2的地址，由于未被free因而造成内存泄露，但是如果它被free了，那么就不会有上面的0x20、0x30的fastbin了，它们会全部与top
chunk进行融合。
在这个过程中，可以发现total_data与data1所申请的地址是一样的，两者复用了0x61ac20，注意到这点很重要。
**3.5 漏洞利用**
接下来是如何通过这些漏洞去拿到shell。这是我们的最终目的，前面那些都是分析的基础。
对于本程序而言，我们可以想办法劫持控制流执行system("sh")来拿shell。由于可以通过输入控制堆块的大小，也存在溢出漏洞，因而实施fastbin
attack是相当方便的，实际利用的时候可以有几种思路：覆盖got表劫持控制流；覆盖栈上函数返回地址，然后ROP劫持控制流；
覆盖malloc_hook、覆盖_IO_FILE等方式劫持控制流。由于本题并没有开FULL
RELRO，因而可以考虑直观地覆盖got表中的内容，例如将atol改成system的地址，等到下一次触发atol且参数可控时，便可达到任意命令执行。
上面说的只是理论的利用方法，实际中需要的问题则可以归纳为“Write What Where”,where这个问题上面已经回答了，接下来解决what。
向GOT表中写system的地址首先需要知道system的地址是什么。这时候就需要一个信息泄露漏洞来将libc的基址泄露出来。
在本例子中，可以利用unsorted bin
attack来泄露libc的指针，在第一次free一个大于0x80的堆块时，linux会将其加入unsorted
bins链表中，并向其fd与bk处填入libc中的指针值。由于重组之后程序会将total_data采用十六进制的形式打印出来，加之上面提到total_data在与我们输入的data1大小一致时，会重新申请到data1的地址，且并进行初始化操作，如果我们发送的请求中offset等于或大于8，那么memcpy时data1中fd与bk指针就不会被覆盖，在进行print时，就可以将这个指向libc的值泄露出来，我们就可以拿到泄露出的信息。
如下，调试时可以看到data1 free后的情况：
至此我们便拿到了main_arena+88的值，拿该值减掉main_arena+88在libc中的偏移，便可以得到libc的基址。
在泄露完之后堆的分布是这样的：
为了达成fastbin
attack，我们需要将某个fastbin的fd指针覆盖为我们可以控制的地址，因而需要继续操作上面的堆。当申请size小于0x80的chunk之时，malloc会先从fastbins中找，如果没有找到合适的，就去unsorted
bins中找。例如，如果我们申请一个0x20的chunk，那么堆上0x90的unsorted bin就会被切分掉0x20大小，变成为一个0x70大小的堆块。
按照这些规则，如果我们发送下面这两个请求
    new_pdu(0, 0, "AA"*0x10, True)
    new_pdu(0, 0, "BB"*0x30, True)
堆块就会被分为下面这个图的形式。（中间过程请读者自行按照3.3中的规则去画）
而在调试时可以发现，实际中堆布局并不如此，libc还有一个细节，在malloc(0x30)时，先发现0x40大小的fastbin是空的，继而去寻找unsorted
bins，发现其中有一个0x50大小的chunk，本应该切分0x40的部分给malloc的返回值，而由于剩下的0x10大小会变成一个碎片，因而libc的策略是直接将这0x50的空间全部返回给申请者。因而实际上在进行上述两个new_pdu操作后，堆分布如下：
调试状态中可以看到的确如此，
至此我们已经成功地在0x40大小的fastbins中成功留下了一个堆块，我们千方百计达成此目的，因为libc在对fastbin的管理中还有一次检查操作，在从0x40大小的fastbin链表中取出堆块时，如果检测到该堆块的size不为0x40-0x4f,则会失败退出，因而我们覆盖的时候随便填一个值是不可行的,必须是伪造好size值的堆块，而在got表中，没有被resolve的函数地址所保存的值为plt表的地址，即0x40xxxx，经过指令对齐操作，便可以将其变成0x00000040，此时内存中便有一个DWORD的值为0x40，可用此绕过libc的检测。此处需注意libc的检查只需要满足低32位是0x4x即可，高32位即使有值也可以通过检查。
直接查看got表中0x604018的地址时，可得其中的值如下：
但是在手动将其值调整一下时，可以得到这样的结果：
在0x60404a处存储的值即为0x40。接着发送构造好的payload：
    new_pdu(0, 0, "AA"*0x10, True)
    new_pdu(0, 0, "BB"*0x30, True)
    fake_fd = convert(0x604042) #0x60404a is 0xxxx00000000040 , 0x604042->size=0x40
    offset  = 0x61adb0-0x61ac20
    new_pdu(0, offset, fake_fd, True)
这段代码可以将上面构造的0x61adb0处fastbin的fd覆盖掉成0x60404a-8，下次申请两次，即可申请到这个伪造的堆块。此处需要减8，是因为在64位系统下，libc在取chunk->size的值时，实际上是进行的+8操作。
最后（终于到了最后），我们申请两次0x40大小的串即可向got表(0x60404a+8)。在写的过程中，可以选择将atol函数覆盖为任意地址，比如，system函数的地址。那么下次再输入seq_num等值时，就会触发system("your
input")，从而达到任意命令执行的效果。这里需要注意为了使程序运行正常，需要先把got表中已经resolve的地方给换回去，换成plt表中相应的地址，关于这部分的内容可阅读《Linux中的GOT和PLT到底是个啥？》，英文原文《PLT
and GOT – the key to code sharing and dynamic libraries》。
    payload = "66"*6 # libc_start_main
    payload += convert(0x400b26)  # resolve fgets 0x400b26
    payload += convert(0x400b36)  # resolve strlen 0x400b36
    payload += convert(libc_base + libc.symbols['system']) # hijack atol
    payload = payload.ljust(0x60, '0')
    new_pdu(0, 0, payload , False ) # payload
至此已经成功地将atol函数替换成了system的地址，接着，只需要再send("sh")，即可get shell。
    io.sendlineafter("SEQ #:", "sh")
**4\. 总结**
本文所涉及的题目及exp代码已上传至云盘http://pan.baidu.com/s/1dE6wxXn 密码: w22h，若有不当之处恳请斧正。