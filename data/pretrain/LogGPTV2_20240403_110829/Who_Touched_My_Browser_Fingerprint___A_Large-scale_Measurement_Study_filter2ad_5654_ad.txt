0.32%
(a) Canvas Rendering Result on Sam-
sung Browser
(b) Pixel difference between version
5.4 and 6.2 (highlighted in red)
Figure 8: Samsung Browser version 6.2 introduces a new
emoji that is also visible from a Google Chrome Browser
co-installed with the Samsung Browser (The difference be-
tween those two emojis is the red-color part, i.e., a smiling
face emoji shown in Subfigure (b))
ratio. Take screen resolution—which is influenced by a user zooming
in or out the webpage—for example. It has 139 static values but 273
dynamics. Similarly, timezone has 38 static values but 314 dynamics.
The reason is that when a feature is influenced by users, the change
is usually bi-directional and has less restriction. That is, the value
of that feature may change from one value to any in the set. For
instance, users are free to move from one location to any place
in the world, thus causing a possible dynamic value for timezone
and IP-related locations. As a comparison, the dynamics for screen
resolution has more restrictions. Although users are free to zoom
in or out a web page, the screen ratio stays the same after such
operation. Therefore, the dynamic to static value ratio for screen
resolution is also smaller than that of timezone.
Third, hardware-related features, such as these used in browser
ID, are relatively stable, i.e., with very few dynamics. All the dy-
namics are special cases in which we need to link two browser IDs
together as we mentioned in the browser ID generation.
Lastly, the number of dynamics is usually a fraction of, or on
par with, the static values for the rest of features. The reasons
are twofold. (i) Most features are stable, i.e., many static values
are not involved in a dynamic one. (ii) Some fingerprint changes
are restricted, e.g., an unidirectional one. Take an OS update for
example, which happens only from a lower version to a higher
version. (We do not observe that anyone downgrades their OS in
our dataset.) That is, two static values map to only one dynamic
one.
Browser Updates + User Actions
OS Updates + User Actions
Browser + Environment Updates
Other Combinations
Total
+10.19%
+5.17%
+1.83%
+8.88%
=100%
8.78%
4.64%
1.54%
6.48%
62.32%
First, the list of fonts, a highly fingerprintable feature with many
distinct and unique values, stays relatively stable in terms of dy-
namics. We only observe 6,763 distinct dynamic values as opposed
to 115,128 distinct static ones. That is, the list of fonts is a relatively
good feature for browser fingerprinting. Interesting, even if the list
of fonts changes, it is highly likely that the changes are unique as
well: 5,056 out of 6,763, i.e., 74.8% of dynamics, is unique, which
means that font update will also reveal the client browser with high
probability.
Second, these features that are influenced by user actions have
more dynamic values when compared with their static ones. Such
features include IP features, timezone, screen resolution, and pixel
4 INSIGHTS
In this section, we present several insights when observing our raw
and dynamics dataset, and then give some advices based on each
insight to browser vendors, users or fingerprinting tool developers.
Insight 1: Browser fingerprints, particularly the dynamics,
reveal privacy- or security-related information.
Insight 1.1: System-provided emojis may leak security patches
involved in OS updates.
We find that system-provided emojis may be used to infer se-
curity related patch, such as those in OS updates. In particular,
we list two cases in which browser or OS updates lead to emoji
changes—i.e., in other words, such emoji changes can be used to
infer corresponding software updates involving security patches.
• Emoji changes in Mobile Google Chrome caused by Samsung
Browser Update. A Samsung Browser update is observable in
Google Chrome canvas rendering results. Specifically, Samsung
Browser 6.2 introduces a new emoji that has a slight change
of the smiling face as shown in the pixel-by-pixel difference of
376
IMC ’20, October 27–November 29, 2020, Virtual Event, USA
Song Li and Yinzhi Cao
Figure 8. Such update is also observable if Google Chrome renders
the smiling face emoji on a canvas. That is, to summarize it, if
one observes a canvas rendering update like Figure 8 in Google
Chrome Mobile, we can infer that the user updates his Samsung
Browser installed on the same device to 6.2, and otherwise not.
We find 2,298 Chrome instances in our dataset, which leaks such
private information.
• Emoji changes in Desktop Google Chrome caused by Windows
7 Update. One Microsoft Windows 7 update on April 22, 2014
installs a set of new emojis to the OS by introducing IE 11, and
such emoji updates are observable from another browser, such
as Chrome. We only observe 9 browser instances with such
emoji updates, because the update was released back in 2014.
Interestingly, we also observe 6,968 browser instances with the
old emoji, i.e., they have not applied that specific old update,
leading many potential security vulnerabilities, i.e., those that
are found after that update, unpatched. Note that browsers on
Windows platform only indicates the big version, i.e., 7, 8, or 10,
of OS. That is, such update information is supposed to hide from
a website visited by the user.
Advice 1 [Browser Security]: Browsers should provide their
own emojis to avoid leaking whether security patches are
applied.
Insight 1.2: System-provided fonts may leak updates and installa-
tions of software, such as Microsoft Office.
System-provided fonts can be used to infer software updates
and installations. If knowing software updates and installation,
an attacker can launch targeted attacks, such as macro malware
aiming at Microsoft Word. We now list several examples of such
font-related inference below:
• Font changes caused by Microsoft office update. Our reasoning
results show that one particular added font in any browser can re-
veal the information about a Microsoft Office update. Specifically,
the release of three versions of Microsoft Office, i.e., Version 1711
(Build 8730.2175), Version 1708 (Build 8431.2153), and Version
1705 (Build 8201.2217) on January 9, 2018, will add a new font
called “MT Extra”, which is observable in a browser fingerprint.
Therefore, the addition of an “MT Extra” in early 2018 is a strong
indication that the device has installed Microsoft Office and up-
dated it accordingly. We find that 1,199 browser instances added
the font “MT Extra”. Note that this is just a subset of browser
instances that applied the update because if the OS has already
installed “MT Extra”, e.g., by other software before the update,
we will not observe the change.
• Font changes caused by Microsoft Office. Apart from the previ-
ously mentioned Office update, the installation of Office itself
also introduces new fonts. We find 7 browser instances that are
related to the installation of Microsoft Office Pro Plus 2013, i.e.,
reflected in a font list change. Additionally, we observe 50,869
browser instances installed with Microsoft Pro Plus 2013, be-
cause their font list contains corresponding fonts installed by
Microsoft Office.
• Font changes caused by WPS Office and LibreOffice. Both WPS
Office, an office suite developed by Kingsoft, and LibreOffice, a
free and open-source office suite, add a new list of fonts to the
system that lead to a fingerprint change. Note that WPS office
also slightly changes the color of the emoji rendering.
Advice 2 [Browser Security]: Browsers should ship their
own fonts, such as Web fonts, like what Tor Browser does
to avoid leaks of software updates and installations.
Insight 1.3: The rendering effects of GPU images can be used to
infer masked hardware information.
The rendering behaviors of GPU can revealmasked GPU infor-
mation. Specifically, based on GPU images collected from other
browsers, our correlation analysis finds that 32% of distinct Firefox
GPU images can be uniquely mapped to one renderer and vendor,
and 38% can be mapped to less than three renderers and vendors. It
is interesting that the inference accuracy for certain GPU types, es-
pecially these dedicated GPU vendors, are very high, because these
GPU rendering behaviors are very different from others when they
try to pursue a high rendering quality. For example, the inference
accuracy for NVIDIA GeForce series is usually larger than 90%,
with GTX 970 as 95.5%. Mali and PowerVR GPUs are very unique
as well, with 96.2% and 92.4% inference accuracy respectively. On
the contrary, the inference accuracy for low-end, integrated GPUs,
such as AMD and Intel ones, are relatively low, which are 20.8%
and 57.4% respectively.
Advice 3 [Browser Privacy]: Browsers, such as Firefox,
should change canvas rendering results as what Wu et
al. [45] do when masking GPU information.
Insight 1.4: IP address change can be used to infer network status,
e.g., the use of VPNs or proxies.
Specifically, we can calculate the velocity of the browser instance
based on the IP information, such as the latitude and longitude
provided by the public database, between two consecutive visits.
If the velocity is larger than a threshold, say 2,000 km/h, which
is impossible even by plane, we can consider that the browser
instance adopts network services, such as proxy and VPN, to visit
our deployment website between these two visits. Our evaluation
shows that the velocities of most browser instances are small, i.e.,
less than 150 km/h. There are no browser instances in our database
moving between 150 km/h and 2,000 km/h—this is probably because
usually the proxy or VPN is located far from the user. We have
observed 2,916 browser instances moving over 2,000 km/h, which
are considered as using VPN or proxy service. We look at manually
some cases and verify that they are indeed using network service.
For example, one user was using a Russian IP address at Kaluga;
one day later, her IP address was changed to one at Lagos, Nigeria,
Africa; and then two hours later, her IP address went back to the first
one. The moving speed is way beyond 2,000 km and her second IP
address, after manual verification, belongs to a public VPN service.
Advice 4 [User Privacy]: Users may want to avoid visiting
a website with and without VPN/proxy service at the same
time.
Insight 2: The F1-score and matching speed of prior evolution-
aware fingerprint work degrade significantly in a large-scale
setting.
377
Who Touched My Browser Fingerprint?
IMC ’20, October 27–November 29, 2020, Virtual Event, USA
Table 3: Case Studies on Feature Correlation with Browser
or OS Updates (Emoji type means a redesign of emoji, and
emoji rendering is some subtle rendering detail changes;
text width means the width of text rendered in browser
canvas, and text detail is some subtle text rendering detail
changes. )
Figure 9: Matching Time of FP-Stalker against One Finger-
print (Note that matching time greater than 100 ms is con-
sidered unacceptable because ads real-time bidding (RTB)
requires that an advertiser provides a decision under 100
ms [42, 48], a hard limit enforced by many ad exchange net-
works like Google)
We evaluate state-of-the-art evolution-aware fingerprinting tool,
FP-Stalker, using the dataset collected in our measurement study.
All the experiments are performed on a powerful server with 192 GB
RDIMM 2666MT/s Dual Rank memory and Intel® Xeon® E5-2690
v4 2.6GHz CPU. There are two variations of FP-Stalker, rule-based
and learning-based. We adopt all the original rules from the paper
and retrained the learning-based FP-Stalker as the F1-Score of the
original model is very low (smaller than 50%) on our dataset.
We look at two important metrics of FP-Stalker:
(i) Matching Speed. Figure 9 shows the average matching time
of FP-Stalker against one fingerprint, which increases linearly as
the number of fingerprints. We would like to point out that the
matching speed of FP-Stalker, no matter rule- or learning-based, is
unacceptable in this large-scale setting. The reason is that many ad
exchange networks like Google requires that an advertiser provides
a decision under a hard limit, which is 100 ms [48].
(ii) F1-Score, Precision and Recall. Figure 10 shows the precision,
recall, and F1-Score of FP-Stalker as the number of fingerprints
increases: All three numbers drop linearly. We now list some false
positive (FP) and negative (FN) examples below:
• FN: A desktop page on a mobile device.
FP-Stalker fails to
link those two fingerprints in Figure 11 (a), as the user agent
changes drastically from a mobile Chrome (Fingerprint 1) to a
Linux Desktop (Fingerprint 2).
• FN: Storage place disabled on Chrome. Figure 11 (b) shows an
FN example of storage places, such as cookies and localStorage,
are disabled on Chrome, which lead to a change from Fingerprint
1 to 2.
• FP: Two browser instances with different CPU cores. Figure 11
(c) shows an FP example of two browser instances with almost
exactly the same fingerprint but different CPU cores. This change
is very unlikely to our human being, but will be considered as
possible by FP-Stalker.
• FP: Two browser instances with different device types. Figure 11
(d) shows an FP example of two browser instances with just
different device types. Again, this change is small, i.e., from J330
to G920, but very unlikely.
Platform Correlated Feature: Changed Value
Mac OS X
Mac OS X
Ubuntu
Ubuntu
Canvas (C): Emoji rendering
Font (F): Remove two fonts
C: Emoji rendering
C: Text width and emoji rendering
C: Text width
Update
Browser Update on Mobile Phone
Mobile Safari 10→11
iOS
Mobile Safari 11→12
iOS
Samsung 5→6
Samsung 6→7
Mobile Firefox 56→57
Browser Update on Desktop
Safari 10→11
Safari 10→11
Firefox 60→61
Chromium 62→63
OS Update on Mobile Phone (* means any version lower than the update target)
Android *→4.4.2
Android *→8.0.0
Android *→8.0.0
Android *→8.0.0
iOS *→10.3.3
Blackberry OS *→10.3.3
OS Update on Desktop
Windows *→10
Mac OS X *→10.10.4
Mac OS X *→10.13
C: Samsung emoji rendering
C: Text width and emoji type
C: Text width and emoji rendering
C: Text detail
C: Emoji rendering
C: Text detail
F: Remove/add fonts
C: Emoji rendering
C: Emoji type
Plugin (P): Remove one plugin
C: Text width and emoji type
C: Emoji rendering
C: Text width
Android
Firefox
Samsung
Chrome
Safari
Webkit
Android
Android
Android
Maxthon
Safari
Firefox
Advice 5 [Better Fingerprinting Tool]: Existing fingerprint-
ing tools need to consider semantics of browser dynamics
to improve its precision, recall and F1-Score.
Advice 6 [Better Fingerprinting Tool]: Existing fingerprint-
ing tools may consider caching to improve its matching
speed and meet the real-time requirement.
Insight 3: The dynamics of some browser features are corre-