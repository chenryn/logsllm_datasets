  --------------------------------------------------------------------------
  Glock 模型     缓存数据       缓存元数据     脏数据         脏数据
  -------------- -------------- -------------- -------------- --------------
  UN             否             否             否             否
  SH             是             是             否             否
  DF             否             是             否             否
  EX             是             是             是             是
  --------------------------------------------------------------------------
:::
:::
:::
::: section
::: titlepage
# [⁠]{#gfs2_tracepoints.html#ap-glock-debugfs-gfs2}C.4. glock debugfs 界面 {.title}
:::
::: para
glock `debugfs`{.literal} 界面允许 glock 和 holder
内部状态的虚拟化，同时还包含一些在某些情况下被锁定的对象详情小结。文件的每一行都以
G 打头：无缩进（代表 glock
本身）或者以不同字母打头，缩进一个空格，代表文件中紧挨着它的 glock
关联的结构（H：代表
holder，I：代表内节点，R：代表资源组）。该文件应有类似如下示例中的内容：
:::
``` screen
G:  s:SH n:5/75320 f:I t:SH d:EX/0 a:0 r:3
 H: s:SH f:EH e:0 p:4466 [postmark] gfs2_inode_lookup+0x14e/0x260 [gfs2]
G:  s:EX n:3/258028 f:yI t:EX d:EX/0 a:3 r:4
 H: s:EX f:tH e:0 p:4466 [postmark] gfs2_inplace_reserve_i+0x177/0x780 [gfs2]
 R: n:258028 f:05 b:22256/22256 i:16800
G:  s:EX n:2/219916 f:yfI t:EX d:EX/0 a:0 r:3
 I: n:75661/219916 t:8 f:0x10 d:0x00000000 s:7522/7522
G:  s:SH n:5/127205 f:I t:SH d:EX/0 a:0 r:3
 H: s:SH f:EH e:0 p:4466 [postmark] gfs2_inode_lookup+0x14e/0x260 [gfs2]
G:  s:EX n:2/50382 f:yfI t:EX d:EX/0 a:0 r:2
G:  s:SH n:5/302519 f:I t:SH d:EX/0 a:0 r:3
 H: s:SH f:EH e:0 p:4466 [postmark] gfs2_inode_lookup+0x14e/0x260 [gfs2]
G:  s:SH n:5/313874 f:I t:SH d:EX/0 a:0 r:3
 H: s:SH f:EH e:0 p:4466 [postmark] gfs2_inode_lookup+0x14e/0x260 [gfs2]
G:  s:SH n:5/271916 f:I t:SH d:EX/0 a:0 r:3
 H: s:SH f:EH e:0 p:4466 [postmark] gfs2_inode_lookup+0x14e/0x260 [gfs2]
G:  s:SH n:5/312732 f:I t:SH d:EX/0 a:0 r:3
 H: s:SH f:EH e:0 p:4466 [postmark] gfs2_inode_lookup+0x14e/0x260 [gfs2]
```
::: para
The above example is a series of excerpts (from an approximately 18MB
file) generated by the command
`cat /sys/kernel/debug/gfs2/unity:myfs/glocks >my.lock`{.command} during
a run of the postmark benchmark on a single node GFS2 file system. The
glocks in the figure have been selected in order to show some of the
more interesting features of the glock dumps.
:::
::: para
glock 状态可以是
EX（独家，exclusive）、DF（延迟，deferred）、SH（共享，shared）或者
UN（解锁）。这些状态都直接与 DLM 所模式对应，UN 除外，因为它可能表示 DLM
null 锁状态，或者 GFS2 没有 DLM 锁（请参考上面的具体 I 标签解释）。
glock 的 s: 字段表示请求的模式。如果有锁定，则 holder 会在其标签（f:
字段）中有 H 字节。否则它就会有 W（等待）字节。
:::
::: para
The n: field (number) indicates the number associated with each item.
For glocks, that is the type number followed by the glock number so that
in the above example, the first glock is n:5/75320; that is, an
`iopen`{.literal} glock which relates to inode 75320. In the case of
inode and `iopen`{.literal} glocks, the glock number is always identical
to the inode\'s disk block number.
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
debugfs glock 文件中的 glock 数（n:
字段）是十六进制，但跟踪点输出则以十进制列出它们。这是有历史原因：glock
数一直是以十六进制编写，但为跟踪点选择的是十进制数，这样是为了方便与其它跟踪点输出（例如
`blktrace`{.command} 的输出）和 `stat`{.command}(1) 的输出进行比较。
:::
:::
:::
::: para
有关 holder 和 glock 标签的完整列表请参考 [表 C.4 "Glock
标签"](#gfs2_tracepoints.html#tb-glock-flags-ap){.xref} 和 [表 C.5
"Glock holder
标签"](#gfs2_tracepoints.html#tb-glock-holderflags-ap){.xref}。glock
`debugfs`{.literal} 界面中还没有锁值块的内容。
:::
[]{#gfs2_tracepoints.html#idm140546317156448 .indexterm}
::: para
[表 C.3 "Glock 类型"](#gfs2_tracepoints.html#tb-glock-types-ap){.xref}
演示了不同 glock 类型的含义。
:::
::: table
[⁠]{#gfs2_tracepoints.html#tb-glock-types-ap}
**表 C.3. Glock 类型**
::: table-contents
  -------------------------------------------------------------------------
  类型数    锁类型    用法
  --------- --------- -----------------------------------------------------
  1         trans     事务锁
  2         inode     内节点元数据和数据
  3         rgrp      资源组元数据
  4         meta      超级块
  5         iopen     内节点最后一次探测
  6         flock     `flock`{.command}(2) syscall
  8         quota     配额操作
  9         journal   日志互斥
  -------------------------------------------------------------------------
:::
:::
::: para
最重要的 glock 标签之一是
I（锁定）标签。这是字节锁，是用来在执行状态更改时对 glock
状态进行仲裁访问。在状态机器要通过 DLM
发送远程锁请求时会设置该标签，且只有在完成操作后才会清除。有时这可以意味着已发出一个以上锁请求，在间隔间出现各种无效。
:::
[]{#gfs2_tracepoints.html#idm140546295204608 .indexterm}
::: para
[表 C.4 "Glock 标签"](#gfs2_tracepoints.html#tb-glock-flags-ap){.xref}
演示了不同 glock 标签的含义。
:::
::: table
[⁠]{#gfs2_tracepoints.html#tb-glock-flags-ap}
**表 C.4. Glock 标签**
::: table-contents
  ------------------------------------------------------------------------
  标签    名称                  含义
  ------- --------------------- ------------------------------------------
  d       等待降级              递延（远程）降级请求
  D       降级                  降级请求（本地或者远程）
  f       清除日志              释放这个 glock 前需要提交该日志
  F       冻结                  回复忽略的远程节点 \-- 恢复进行中。
  i       失效进行中            正在让这个 glock 中的页面失效
  I       Initial               设定什么时候 DLM 锁与这个 glock 关联
  l       Locked                glock 正在更改状态的过程中
  L       LRU                   当 glock 在 LRU 列表中时设置
  o       对象                  glock 与某个对象关联时设定（即用于类型 2
                                glock 的内节点以及用于类型 3 glock
                                的资源组）
  p       降级中                glock 正在与降级请求响应
  q       排队的                拥有者排队等待 glock 时设定，并在持有
                                glock 但没有拥有者时清除。是用于计算 glock
                                最小拥有时间的算法的一部分。
  r       回复等待              从远程节点中接收的回复正在等待过程中
  y       脏数据                释放这个 glock 前要刷新到磁盘的数据
  ------------------------------------------------------------------------
:::
:::
::: para
当从以与本地节点冲突的模式获得锁定的某个节点收到远程 callback
时，会设定标签 D（降级）或者
d（降级等待）标签。要防止在竞争具体锁时出现匮乏情况，为每个锁都分配了最小保留时间。如果某个节点的锁没有最小保留时间，则允许保留该锁直到时间间隔过期。
:::
::: para
如果时间间隔过期，则会设定
D（demote，降级）标签，并记录请求的状态。这样，下次就不会在 holder
队列中设置锁，该锁就会被降级。如果时间间隔没有过期，那么就会设置
d（降级等待）标签，并在超过最短保留时间时设定 D（降级）标签。
:::
::: para
将为 glock 分配 DLM 锁时会为其设置
I（initial）标签。这种情况会在第一次使用 glock 时发生，然后这个 I
标签会一直保留到最终释放 glock（即解开 DLM 锁）为止。
:::
:::
::: section
::: titlepage
# [⁠]{#gfs2_tracepoints.html#ap-glock-holders-gfs2}C.5. Glock Holder {.title}
:::
[]{#gfs2_tracepoints.html#idm140546332671696 .indexterm}
::: para
[表 C.5 "Glock holder
标签"](#gfs2_tracepoints.html#tb-glock-holderflags-ap){.xref} 演示了不同
glock holder 标签的含义。
:::
::: table
[⁠]{#gfs2_tracepoints.html#tb-glock-holderflags-ap}
**表 C.5. Glock holder 标签**
::: table-contents
  ------------------------------------------------------------------------
  标签    名称                  含义
  ------- --------------------- ------------------------------------------
  a       Async                 不等待 glock 结果（稍后会得到结果）
  A       Any                   接受所有兼容锁模式
  c       没有缓存              取消锁定时立即降级 DLM 锁定
  e       没有过期日期          忽略随后的取消锁定请求
  E       准确                  必须有 exact 锁定模式
  F       第一                  设定赋予这个锁定的第一个拥有者
  H       拥有者                表示赋予请求的锁定
  p       优先权                在队列头入队的拥有者
  t       Try                   A \"try\" lock
  T       Try 1CB               A \"try\" lock that sends a callback
  W       Wait                  等待请求完成的设置
  ------------------------------------------------------------------------
:::
:::
::: para
最重要的拥有者标签之前提到的是 H（拥有者）和
W（等待），因为是将它们分别设定在已分配锁定请求和已排队锁定请求中。该列表中拥有者的顺序分厂重要。如果有任何已分配拥有者，他们总是位于队列的前端，后面跟着的是已排队拥有者。
:::
::: para
如果没有任何已分配拥有者，那么该列表中的第一个拥有者将触发下一个状态更改。因为降级请求总是比该文件系统中的请求有更高的优先权，但那并不一定会有状态请求更改。
:::
::: para
The glock subsystem supports two kinds of \"try\" lock. These are useful
both because they allow the taking of locks out of the normal order
(with suitable back-off and retry) and because they can be used to help
avoid resources in use by other nodes. The normal t (try) lock is
basically just what its name indicates; it is a \"try\" lock that does
not do anything special. The T (`try 1CB`{.literal}) lock, on the other
hand, is identical to the t lock except that the DLM will send a single
callback to current incompatible lock holders. One use of the T
(`try 1CB`{.literal}) lock is with the `iopen`{.literal} locks, which
are used to arbitrate among the nodes when an inode\'s
`i_nlink`{.literal} count is zero, and determine which of the nodes will
be responsible for deallocating the inode. The `iopen`{.literal} glock
is normally held in the shared state, but when the `i_nlink`{.literal}
count becomes zero and `->delete_inode`{.command}() is called, it will
request an exclusive lock with T (`try 1CB`{.literal}) set. It will
continue to deallocate the inode if the lock is granted. If the lock is
not granted it will result in the node(s) which were preventing the
grant of the lock marking their glock(s) with the D (demote) flag, which
is checked at `->drop_inode`{.command}() time in order to ensure that
the deallocation is not forgotten.
:::
::: para
This means that inodes that have zero link count but are still open will
be deallocated by the node on which the final `close`{.command}()
occurs. Also, at the same time as the inode\'s link count is decremented
to zero the inode is marked as being in the special state of having zero
link count but still in use in the resource group bitmap. This functions
like the ext3 file system3\'s orphan list in that it allows any
subsequent reader of the bitmap to know that there is potentially space
that might be reclaimed, and to attempt to reclaim it.
:::
:::
::: section
::: titlepage
# [⁠]{#gfs2_tracepoints.html#ap-glock-tracepoints-gfs2}C.6. Glock 跟踪点 {.title}
:::
::: para
跟踪点也用于确认对缓冲控制的修正，方法是将其与 blktrace
输出结果一同使用，同时要了解磁盘布局。这样就有可能检查任何给出的 I/O
是否已使用正确的锁定发出或者完成，且目前尚无竟态出现。
:::
::: para
`gfs2_glock_state_change`{.literal} 跟踪点是最需要了解的一个。它跟踪
glock 的每次状态更改，从创建之初直到到使用 `gfs2_glock_put`{.literal}
降级，以及最后使用 NL 取消传输锁定。总是在状态更改发生前设定
I（锁定的）glock
标签，直到最后完成后才会清除。在状态更改期间绝不会有任何分配的拥有者（H
glock 拥有者标签）。如果有任何排队的拥有者，他们总是出于
W（等待中）专题。当状态更改完成后，可在清除 I glock
标签前为拥有者分配标签，这是最后的操作。
:::
::: para
`gfs2_demote_rq`{.literal}
跟踪点一直跟踪本地和远程降级请求。假设在该节点在还有足够的内存，本地降级请求很少见，同时大多数经常由卸载或者偶尔的内存回收产生。远程降级请求数是节点间就某个具体内节点或者资源组进行竞争的指数。
:::
::: para
当为拥有者分配一个锁定后会调用
`gfs2_promote`{.command}，这发生在状态更改的最后阶段，或者由于 glock
状态已被缓存到适当的形式的锁定而可以立即分配的锁定请求中。如果该拥有者是这个
glock 的第一个使用者，那么为那个拥有者设定
f（第一）标签。目前只在资源组中使用。
:::
:::
::: section
::: titlepage
# [⁠]{#gfs2_tracepoints.html#ap-bmap-tracepoints-gfs2}C.7. Bmap 跟踪点 {.title}
:::
::: para
块映射是所有文件系统的任务核心。GFS2 使用传统基于 bitmap
的系统，每个块占用 2
个字节。该跟踪点的主要目的是可在这个子系统中监控分配和映射块所使用的时间。
:::
::: para
每个 bmap 操作会调用两次 `gfs2_bmap`{.literal}
跟踪点：一次是在启动时显示 bmap
请求，一次是在结束时显示结果。这更方便匹配请求和结果，并测量匹配块以及文件系统的不同部分、不同文件差值或者甚至不同的文件所需时间。还可以查看相比请求的扩展，所返回扩展的平均大小。
:::
::: para
要保证随时跟踪分配的块，`gfs2_block_alloc`{.literal}
不仅在分配块时调用，在释放块时也调用。因为分配是根据要进行块分配的内节点进行，可使用它跟踪在实际文件系统中哪些物理块属于哪个文件。这在与
`blktrace`{.literal} 合用时非常有帮助，后者将显示有问题的 I/O
模式，然后使用通过这个跟踪点获得的映射返回相关内节点。
:::
:::
::: section
::: titlepage
# [⁠]{#gfs2_tracepoints.html#ap-log-gracepoints-gfs2}C.8. 记录跟踪点 {.title}
:::
::: para
这个子系统中的跟踪点跟踪被添加到日志（`gfs2_pin`{.literal}）以及从该日志中删除的块，同时还在日志（`gfs2_log_flush`{.literal}）记录此事务所消耗的时间。这在解决日志性能问题是非常有帮助。
:::
::: para
`gfs2_log_blocks`{.literal}
跟踪点在日志中记录保留的块的踪迹，这样可帮助您查看日志对于该负载是否太小。例如：
:::
::: para
`gfs2_ail_flush`{.literal} 跟踪点（Red Hat Enterprise Linux 6.2
以及之后的版本）在跟踪清除 AIL 列表的起始时间上与
`gfs2_log_flush`{.literal} 跟踪点类似。AIL
列表包含已列入该日志但还没有写入的缓冲，同时这是一个周期性清除以便释放更多的空间供文件系统使用，或者在请求同步或者
fsync 时使用。
:::
:::
::: section
::: titlepage
# [⁠]{#gfs2_tracepoints.html#ap-glockstats-gfs2}C.9. Glock 统计 {.title}
:::
::: para
GFS2
保留统计数据以帮助跟踪文件系统中的操作。这可以让您准确捕捉性能问题。
:::