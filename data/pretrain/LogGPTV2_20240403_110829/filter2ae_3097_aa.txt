### 介绍
3月1日，谷歌在`FileReader API（CVE 2019-5786）`的Chrome板块中发布了一个0 day漏洞。
来自谷歌漏洞分析组的`Clement Lecigne`报告称，这个漏洞在网络中被利用，可针对`Windows 7,32`位平台应用进行攻击。
该漏洞导致`Renderer`进程中出现代码执行的问题，并且被用于破坏主机系统。
这篇博客作为一篇技术文章，详细介绍了我们找到漏洞的全过程。在撰写本文时，漏洞报告仍然没有被发布，并且Chrome会默认进行自动安装与更新，使用最新版Chrome的用户已经受到保护，不会受到该漏洞的影响。
### 信息采集
#### 1 漏洞修复
大多数`Chrome`代码库都基于`Chromium`的开源项目。
我们目前正在查看的错误内容均包含在开源代码中，因此我们可以直接查看新版本中与`FileReader
API`相关的修复内容。除此之外，谷歌更新了其日志，以方便我们进行参考。
我们可以看到只有一个提交修改了与FileReader API相关的文件，并带有以下消息：
该消息说明对同一个底层的`ArrayBuffer`进行多次引用是一件危险的事情。然而目前尚不清楚它的意义，但以下内容涵盖了此消息中蕴含的智慧。
对于初学者，我们可以查看提交的`diff`并查看所更改的内容。 为便于阅读，下面我们列出补丁前和后的功能比较。
旧版本：
新版本：
这两个版本可以在GitHub上找到。
此处修改了`ArrayBufferResult`函数。而该函数负责在用户需要访问`FileReader.result`成员时返回数据。  
函数的运作流程如下：如果结果已被“缓存”，则返回该函数。
如果没有，有两种情况：如果数据已完成加载，则创建`DOMArrayBuffer`，缓存结果并返回它。
如果没有，它会创建一个临时`DOMArrayBuffer`并返回它。
修补前后版本之间的区别在于，在部分加载的情况下，如何处理临时`DOMArrayBuffer`。 在案例中，我们可以看到如下内容：
这促使我们再去进行一些样例测试。 让我们比较未修补和修补情况下反馈有何不同。
我们可以从已修补版本开始，因为它最容易理解。我们可以看到对`ArrayBuffer::Create`的调用，它接受两个参数，一个指向数据的指针及其长度（该函数在树中定义在`/third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer.h`）。
这创建了一个新的`ArrayBuffer`，并将其封装到`scoped_refptr `中，然后将数据复制到内部。
`scoped_refptr`是`Chromium`处理引用计数的一种方法。 对于不熟悉这个概念的读者，我们会跟踪这个对象被引用的次数。
在创建`scoped_refptr`的新实例时，底层对象的引用计数会递增。当对象退出其范围时，引用计数递减。当该引用计数达到0时，该对象将被删除（如果引用计数溢出，Chrome将终止进程）。在未修补的版本中，代码不使用`ArrayBuffer::Create`，而是使用`ArrayBufferBuilder::ToArrayBuffer()`的返回值（来自`third_party/blink/renderer/platform/wtf/typed_arrays/array_buffer_builder.cc`）：
下面是另一个隐藏的漏洞。 根据`bytes_used_`的值，函数将返回其缓冲区数据（即包含数据副本的较小的`ArrayBuffer`）。
总结目前为止我们所看到的所有代码路径，它们均返回数据的副本而不是实际的缓冲区，除非我们运行未修补的代码，否则我们访问的缓冲区是被“完全使用的”
`（根据`ArrayBufferBuilder::ToArrayBuffer()`中的注释）。
由于`FileReaderLoader`对象被实现，缓冲区_->`ByteLength()`大小是根据缓冲区的预分配而设置，它对应于我们要加载的数据的大小。
如果我们现在提交消息，那么利用该漏洞的唯一情况就是在`finished_loading`设置为`true`之前多次访问`ArrayBufferBuilder::ToArrayBuffer()`，但是其数据将会被完全读取。
当我们有以下调用`DOMArrayBuffer::Create`时（`raw_data _->
ToArrayBuffer()`），为了完成代码检查操作，我们看一下在修补/未修补的情况下是如何调用`DOMArrayBuffer::Create`函数的。
这个过程来自`third_party/blink/renderer/core/typed_arrays/dom_array_buffer.h`：
在使用`std::move`时，我们发现它具有转移权限的功能。  
例如，在以下代码段中：
然后`b`取得属于`a`（`b`现在包含'hello'）的所有权，而'a`现在处于未定义的状态。
在我们目前的情况下，程序的反馈有些令人困惑。
`ArrayBufferBuilder::ToArrayBuffer()`返回的对象已经是`scoped_refptr
`。当调用`ToArrayBuffer()`时，`ArrayBuffer`上的`refcount`增加1，并且`std::move`获取`refcounted`对象的所有权（而不是`ArrayBufferBuilder`）。调用`ToArrayBuffer()`10次会使refcount增加10，但是所有的返回值都是有效的（与上面提到的字符串'a`和`b`的示例相反，在'a`上操作会导致意外情况）。  
如果我们在上述位置多次调用`ToArrayBuffer()`，这将成功解决`use-after-free`问题，其中来自`ArrayBufferBuilder`的`buffer_`对象将被破坏。
#### FileReader API
确定如何利用这个漏洞的另一个方法是查看从JavaScript获得的API。
我们可以从`Mozilla Web`文档中获取我们想要的所有信息。
我们可以在`Blob`或`File`上调用`readAsXXX`函数，并且可以中止读取操作，最后有几个事件我们可以进行回调（`onloadstart，onprogress，onloadend，...`）。
`onprogress`事件在数据加载时被调用，但在加载完成之前。
如果我们查看`FileReader.cc`源文件，我们可以看到此事件的调用是在收到数据时每隔50ms触发一次。
### 在浏览器中测试
### 开始
我们要做的第一件事是下载具有漏洞的代码。 这里存在有一些非常有用的资源，人们可以下载旧版本，而不必自己构建它们。
值得注意的是，这里还有一个单独的`zip`文件，其名称中包含`syms`。 我们还可以下载此文件获取构建的调试符号（以.pdb文件的形式）。