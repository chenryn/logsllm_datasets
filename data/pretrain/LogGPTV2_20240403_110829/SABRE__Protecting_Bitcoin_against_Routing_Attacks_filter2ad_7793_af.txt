Symposium on.
IEEE, 2017.
clients
[18] A. Biryukov, D. Khovratovich, and I. Pustogarov, “Deanonymisation
the
of
2014 ACM SIGSAC Conference on Computer and Communications
Security,
[Online]. Available:
http://doi.acm.org/10.1145/2660267.2660379
ser. CCS ’14, 2014, pp. 15–29.
in Bitcoin P2P network,”
in Proceedings of
[19] P. Bosshart, D. Daly, G. Gibb, M. Izzard, N. McKeown, J. Rexford,
C. Schlesinger, D. Talayco, A. Vahdat, G. Varghese et al., “P4: Pro-
gramming protocol-independent packet processors,” ACM SIGCOMM
Computer Communication Review, vol. 44, no. 3, pp. 87–95, 2014.
[20] R. Bush and R. Austein, “The Resource Public Key Infrastructure
(RPKI) to Router Protocol,” RFC 6810, Jan. 2013. [Online]. Available:
https://rfc-editor.org/rfc/rfc6810.txt
[21] M. Castro, P. Druschel, A.-M. Kermarrec, A. Nandi, A. Rowstron,
and A. Singh, “Splitstream: high-bandwidth multicast in cooperative
environments,” in ACM SIGOPS Operating Systems Review, vol. 37,
no. 5. ACM, 2003, pp. 298–313.
[22] L. Chang, J. X. Yu, L. Qin, X. Lin, C. Liu, and W. Liang, “Efﬁciently
computing k-edge connected components via graph decomposition,”
in Proceedings of the 2013 ACM SIGMOD International Conference
on Management of Data, ser. SIGMOD ’13. New York, NY, USA:
ACM, 2013, pp. 205–216. [Online]. Available: http://doi.acm.org/10.
1145/2463676.2465323
[23] C. Decker and R. Wattenhofer, “Information propagation in the bitcoin
network,” in Peer-to-Peer Computing (P2P), 2013 IEEE Thirteenth
International Conference on.
IEEE, 2013, pp. 1–10.
[24] H. Eriksson, “Mbone: The multicast backbone,” Communications of the
ACM, vol. 37, no. 8, pp. 54–60, 1994.
I. Eyal, A. E. Gencer, E. G. Sirer, and R. Van Renesse, “Bitcoin-ng: A
scalable blockchain protocol.” in NSDI, 2016, pp. 45–59.
[25]
[26] U. Feige, “A threshold of ln n for approximating set cover,” J.
ACM, vol. 45, no. 4, pp. 634–652, Jul. 1998. [Online]. Available:
http://doi.acm.org/10.1145/285055.285059
[27] L. Gao and J. Rexford, “Stable Internet routing without global coordi-
nation,” IEEE/ACM Transactions on Networking (TON), vol. 9, no. 6,
pp. 681–692, 2001.
[28] Y. Gilad, R. Hemo, S. Micali, G. Vlachos, and N. Zeldovich, “Algorand:
Scaling byzantine agreements for cryptocurrencies,” in Proceedings of
the 26th Symposium on Operating Systems Principles. ACM, 2017,
pp. 51–68.
[29] S. Goldberg, “Why is it taking so long to secure internet routing?”
Commun. ACM, vol. 57, pp. 56–63, 2014.
[30] S. Goldberg, M. Schapira, P. Hummon, and J. Rexford, “How secure are
secure interdomain routing protocols,” in ACM SIGCOMM Computer
Communication Review, vol. 40, no. 4. ACM, 2010, pp. 87–98.
[31] ——, “How Secure Are Secure Interdomain Routing Protocols,” in
SIGCOMM, 2010.
[32] A. Gupta, R. MacDavid, R. Birkner, M. Canini, N. Feamster, J. Rex-
ford, and L. Vanbever, “An Industrial-Scale Software Deﬁned Internet
Exchange Point,” in Proceedings of the 13th USENIX Symposium on
Networked Systems Design and Implementation (NSDI’16). USENIX,
2016.
14
[33] A. Gupta, L. Vanbever, M. Shahbaz, S. Donovan, R. Clark, N. Feamster,
J. Rexford, and S. Shenker, “SDX: A Software Deﬁned Internet
Exchange,” in Proceedings of the 2014 ACM SIGCOMM Conference
(SIGCOMM’14). ACM, 2014.
[34] X. Jin, X. Li, H. Zhang, N. Foster, J. Lee, R. Soul´e, C. Kim, and
I. Stoica, “Netchain: Scale-free sub-rtt coordination,” in 15th USENIX
Symposium on Networked Systems Design and Implementation (NSDI
18). Renton, WA: USENIX Association, 2018, pp. 35–49. [Online].
Available: https://www.usenix.org/conference/nsdi18/presentation/jin
[36]
[35] X. Jin, X. Li, H. Zhang, R. Soul´e, J. Lee, N. Foster, C. Kim, and
I. Stoica, “Netcache: Balancing key-value stores with fast in-network
caching,” in Proceedings of the 26th Symposium on Operating Systems
Principles. ACM, 2017, pp. 121–136.
J. Karlin, S. Forrest, and J. Rexford, “Pretty good bgp: Improving bgp
by cautiously adopting routes,” in Proceedings of the Proceedings of the
2006 IEEE International Conference on Network Protocols, ser. ICNP
’06. Washington, DC, USA: IEEE Computer Society, 2006, pp. 290–
299. [Online]. Available: http://dx.doi.org/10.1109/ICNP.2006.320179
[37] A. Kiayias, A. Russell, B. David, and R. Oliynykov, “Ouroboros: A
provably secure proof-of-stake blockchain protocol,” in Annual Inter-
national Cryptology Conference. Springer, 2017, pp. 357–388.
[38] E. K. Kogias, P. Jovanovic, N. Gailly, I. Khofﬁ, L. Gasser, and B. Ford,
“Enhancing bitcoin security and performance with strong consistency
via collective signing,” in 25th USENIX Security Symposium (USENIX
Security 16), 2016, pp. 279–296.
[39] E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, and B. Ford,
“Omniledger: A secure, scale-out, decentralized ledger.” IACR Cryptol-
ogy ePrint Archive, vol. 2017, p. 406, 2017.
[40] B. Lantz, B. Heller, and N. McKeown, “A network in a laptop: rapid
prototyping for software-deﬁned networks,” in Proceedings of the 9th
ACM SIGCOMM Workshop on Hot Topics in Networks. ACM, 2010,
p. 19.
[41] M. Lepinski and S. Kent, “An Infrastructure to Support Secure
[Online]. Available:
Internet Routing,” RFC 6480, Feb. 2012.
https://rfc-editor.org/rfc/rfc6480.txt
[42] M. Lepinski and K. Sriram, “BGPsec Protocol Speciﬁcation,” RFC
8205, Sep. 2017. [Online]. Available: https://rfc-editor.org/rfc/rfc8205.
txt
[43] A. Miller, J. Litton, A. Pachulski, N. Gupta, D. Levin, N. Spring, and
B. Bhattacharjee, “Discovering bitcoin’s public topology and inﬂuential
nodes,” et al., 2015.
[44] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2008.
[45] T. Neudecker, P. Andelﬁnger, and H. Hartenstein, “Timing analysis
for inferring the topology of the bitcoin peer-to-peer network,” in
Ubiquitous Intelligence & Computing, Advanced and Trusted Comput-
ing, Scalable Computing and Communications, Cloud and Big Data
Computing, Internet of People, and Smart World Congress, 2016 Intl
IEEE Conferences.
IEEE, 2016, pp. 358–367.
[46] R. Nithyanand, R. Singh, S. Cho, and P. Gill, “Holding all the ases:
Identifying and circumventing the pitfalls of as-aware tor client design,”
arXiv preprint arXiv:1605.03596, 2016.
[47] A. Pilosov and T. Kapela, “Stealing The Internet. An Internet-Scale
Man In The Middle Attack.” DEFCON 16.
[48] Y. Rekhter, T. Li, and S. Hares, “A Border Gateway Protocol 4
(BGP-4),” RFC 4271 (Draft Standard), Jan. 2006. [Online]. Available:
http://www.ietf.org/rfc/rfc4271.txt
[49] V. Sivaraman, S. Narayana, O. Rottenstreich, S. Muthukrishnan, and
J. Rexford, “Heavy-hitter detection entirely in the data plane,” in
Proceedings of the Symposium on SDN Research. ACM, 2017, pp.
164–176.
[50] O. Starov, R. Nithyanand, A. Zair, P. Gill, and M. Schapira, “Mea-
suring and mitigating as-level adversaries against tor,” arXiv preprint
arXiv:1505.05173, 2016.
[51] Y. Sun, A. Edmundson, N. Feamster, M. Chiang, and P. Mittal,
“Counter-raptor: Safeguarding tor against active routing attacks,” in
Security and Privacy (SP), 2017 IEEE Symposium on.
IEEE, 2017,
pp. 977–992.
[52] Y. Sun, A. Edmundson, L. Vanbever, O. Li, J. Rexford, M. Chiang,
and P. Mittal, “Raptor: Routing attacks on privacy in tor.” in USENIX
Security Symposium, 2015, pp. 271–286.
A. Algorithms
APPENDIX
Below we include the pseudocode of the two main algo-
rithms described in the paper in Section IV-B and Section IV-C
respectively.
Algorithm 1 Find a set of ASes to locate relays.
1: function LOCATERELAYS(R, R scens, N, k)
(cid:46) ﬁnds N k-connected relay
ASes
(cid:46) R scens : scenarios that each candidate relay AS in R protects against
R(cid:48) ← {}
R(cid:48) scens ← {}
while R(cid:48).length < N do
2:
3:
4:
5:
relays
Rs ← {r : r ∈ R \ R(cid:48) s.t.G[R(cid:48) ∪ r] is k-connected}
R(cid:48).add( FINDNEXT (Rs,R scens,R(cid:48) scens) )
6:
7:
end while
return R(cid:48)
8:
9: end function
10: function FINDNEXT(Rs, R scens, R(cid:48) scens)
(cid:46) ASes to host relay nodes
(cid:46) scenarios relays in R(cid:48) protect against
(cid:46) candidate
(cid:46) ﬁnds best relay to add to
best r ← N one; best scens ← {};
for r in Rs do
tmp scens ← R(cid:48) scens ∪ R scens[r]
if best scens.ef f ect < tmp scens.ef f ect then
best scens ← tmp scens
best r ← r
end for
R(cid:48) scens.add(R scens[best r])
return best r
Algorithm 2 Compare two paths based on preference.
1: function MOREPREFERRED(pathA, pathB)
(cid:46) returns 0 if pathA is more
preferred and 1 otherwise
while pathA & pathB & hopA.pick==hopB.pick do
R(cid:48)
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21: end function
end if
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27: end function
end if
else
else
end if
Fig. 13: When tie breaks in favor of the legitimate destinations:
a SABRE of only 6 relays that are fully connected prevents all
attackers from isolating more than 16%.
Fig. 14: When tie breaks in favor of the legitimate destinations:
a SABRE of 10 5-connected relays protects 95% of the clients
from 99.5% of the AS level adversaries.
hopA ← pathA.pop()
hopB ← pathB.pop()
end while
if hopA.type (cid:54)= hopB.type then
switch (hopA.type , hopB.type) do
case (customer, peer)
return 0
case (customer, provider)
case (peer, provider)
case (peer, customer)
case (provider, customer)
case (provider, peer)
return 0
return 0
return 1
return 0
return 1
if len(pathA) = len(pathB) then
return 1
return argmin(len(pathA), len(pathB))
(cid:46) Traverse until the two paths
Fig. 15: When tie breaks in favor of the legitimate destinations:
the largest possible partition by any attacker is 14% for a
SABRE of 6 relays that is 5-connected.
(cid:46) In case of a tie, we prefer path B.
B. Results with ties against the attacker
Although SABRE signiﬁcantly improves the security of
Bitcoin against routing attacks the exact partition sizes and
number of vulnerable clients depend on the tie-breaking
decisions, namely which path is chosen in cases that
the
competing routes are equivalent economically and length-wise.
In Section VII, we assumed that the tie always breaks for
the attacker. In the following, we include the same analysis
only now assuming that the tie-breaking favors the legitimate
destination.
15
Fig. 16: When tie breaks in favor of the legitimate destinations:
a SABRE of 20 relays that are 1-connected can secure 100%
of the clients against more than 98% attackers.
 0 2 4 6 8 10 12 14 16 0 1 2 3 4 5 6 7% of clients that can be isolated% of ASes that can disconnect at most y%SABRE (40,5)SABRE (10,5)SABRE (6,5)All /24 prefs 60 65 70 75 80 85 90 95 100 0 0.5 1 1.5 2 2.5 3 3.5 4% of clients that can be isolated% of possible attackersSABRE (40,5)SABRE (10,5)SABRE (6,5)All /24 prefs 0 2 4 6 8 10 12 14 16 0 1 2 3 4 5% of clients that can be isolated% of ASes that can disconnect at most y%N=20 k=5 N=20 k=3N=20 k=1N=6  k=5N=6  k=3N=6  k=1 60 65 70 75 80 85 90 95 100 0 0.5 1 1.5 2 2.5% of clients that can be isolated% of possible attackersN=20 k=5 N=20 k=3N=20 k=1N=6  k=5N=6  k=3N=6  k=1