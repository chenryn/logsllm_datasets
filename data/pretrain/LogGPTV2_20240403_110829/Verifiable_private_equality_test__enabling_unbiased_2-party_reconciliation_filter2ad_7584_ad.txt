(commit, (i, v1,i)) → FVPET
Comparison Phase
for 1 ≤ k ≤ n2:
1. (i, j) ← get_pocs_pairC (k)
2. P0 sends (compare, (v0,i, i, j, 0)) → FVPET and
P1 sends (compare, (v1,j, j, i, 0)) → FVPET.
P0 receives out0 ← FVPET
3. P0 sends (compare, (v0,i, i, j, 1)) → FVPET and
P1 sends (compare, (v1,j, j, i, 1)) → FVPET.
P1 receives out1 ← FVPET
4.
• If out0 = out1 = 1, then P0 outputs v0,i, P1
outputs v1,j, and both terminate the proto-
col.
• Else, both parties continue with the next
iteration of the loop.
Figure 4: PROS with security in the malicious
model.
4.2
Intuition for Our New Protocol
In principle, our new PROS protocol operates very sim-
ilar to the protocol by Meyer et al.
[38]. Speciﬁcally, the
protocol successively compares two set elements, one from
each ordered set, according to the POCS C. In PROS both
parties are supposed to learn the result of the computation,
i.e., the protocol for element comparison must be mutual.
The PROS protocol introduced in [38] used PSI to compare
elements. In order to achieve that PROS is mutual in this
case, the PSI is carried out twice with the roles switched
for the second execution. This approach only provides for
security in the semi-honest model as there is no guarantee
that the parties use the same input sets in both executions.
However, in order to achieve stronger security guarantees,
i.e., security in the malicious model, the technique used to
compare two elements has to be modiﬁed signiﬁcantly.
First, each party is required to commit to their ordered
input set such that set elements and their order can not be
changed in the course of the protocol. Second, whenever the
protocol requires the comparison of two speciﬁc set elements,
both parties need to prove that they use the correct set
elements according to the POCS. Third, both parties need
to prove that the actual comparison is performed correctly.
In the following we show how these challenges can be met
by using the VPET protocol as a building block.
4.3 New Protocol for PROS
The new PROS protocol is detailed in Figure 4. In our
protocol description we leverage the hybrid model (see Sec-
tion 2.2.2) to allow for calls to the ideal VPET function-
ality. First, both parties commit to their respective or-
Signature
Computation
Veriﬁcation
ZKDL
ZKEDL
ZK3EDL
ZKREP
3 Compares the discrete log of three elements simul-
1
2
3
3
2
4
6
5
3
taneously.
Table 1: Modular exponentiations required for com-
putation and veriﬁcation of ZK signatures of knowl-
edge.
dered input sets by sending (commit, (i, v0,i)) ∀v0,i ∈ S0
((commit, (i, v1,i)) ∀v1,i ∈ S1) to FV P ET . Second, analogous
to the protocol in [38], our protocol operates in multiple
steps to compute the optimal result.
In each step, two set elements are compared through
the comparison functionality provided by FV P ET .
Let
(v0,i, v1,j) with (i, j) ← get_pocs_pairC (k) be the set el-
ements which are compared in step k. In order for both par-
ties to learn the result of the comparison, FV P ET is invoked
twice: once with P0 and once with P1 learning the result.
For this, ﬁrst P0 sends (compare, (v0,i, i, j, 0)) and P1 sends
(compare, (v1,j, j, i, 0)) to FV P ET . Subsequently, P0 sends
(compare, (v0,i, i, j, 1)) and P1 sends (compare, (v1,j, j, i, 1)).
The second invocation compares the same elements as the
ﬁrst, however P1 instead of P0 learns the result. Note that
FV P ET guarantees that the correct elements are used by
both parties and, in addition, that the same elements are
used in both comparisons.
If two elements are found to be equal, both parties out-
put the resulting element and halt. Otherwise, the protocol
continues with the next step, comparing the next pair of
elements based on the POCS.
4.4 Security Proof
Since our novel PROS protocol consists exclusively of
calls to the ideal VPET functionality, security in the hybrid
model directly follows from the sequential modular composi-
tion theorem (see Section 2.2.2). When the calls to FV P ET
are replaced with the actual VPET protocol, the PROS pro-
tocol remains secure in the presence of malicious adversaries.
4.5 Limitations and Improvements
In order for the POCS introduced in Section 4.1.1 to guar-
antee unbiasedness, the input sets of both parties must be of
equal size. In our protocol this can be enforced by requiring
that the respective commitment vectors are of equal size.
One limitation of our PROS protocol is that one can not
enforce that a party’s ordered input set contains unique ele-
ments, i.e., that the set is well-formed. This assurance could
be achieved by introducing additional costly zero-knowledge
proofs.
In order to improve the balance and unbiasedness of the
protocol, it is possible to ﬁrst ﬂip a coin at the beginning
of each step to determine which party will learn the output
ﬁrst.
5. PROTOCOL PERFORMANCE
In this section we present a detailed performance analysis
of our new VPET and PROS protocols.
In Section 5.1,
we ﬁrst analyze the theoretical complexity for the VPET
Figure 5: VPET user time for com-
putation (c), veriﬁcation (v) as a
function of the number of commit-
ments for log2p = 512, 1024, 2048;
log2q = 224.
Figure 6: VPET user time for
party Pσ as a function of the
number
us-
ing
and
log2q = 224.
comparisons
log2p = 512, 1024, 2048
of
VPET user
7:
as a function of
comparisons
log2p = 512, 1024, 2048
Figure
for Pσ
number
ing
log2q = 224.
of
time
the
us-
and
and PROS protocols. We then provide the results of our
experimental performance evaluation in Section 5.2.
5.1 Theoretical Performance Analysis
5.1.1 ZK Signatures of Knowledge
A summary of the number of modular exponentiations
required to compute and verify the respective signatures of
knowledge is provided in Table 1.
5.1.2 VPET Protocol
Commitment Phase.
For each value in their respective input sets, parties P0
and P1 compute three exponentiations for the commitments
and three exponentiations for ZKREP . To verify the other
party’s ZKREP an additional ﬁve exponentiations are re-
quired for each set element. Overall the commitment to n
values requires a total of 11n modular exponentiations.
Comparison of Elements.
Pσ performs one modular exponentiation to compute
Xσ, one exponentiation to compute ZKDL, six to verify
ZK3EDL, four to verify ZKEDL, two to compute X(cid:48)
σ, two
to compute X(cid:48)(cid:48)
σ , for an overall total of 16 modular exponen-
tiations.
Pσ computes two exponentiations to verify ZKDL, four in
total to compute X(cid:48)
σ, Xσ, Yσ, Zσ, three to compute ZK3EDL,
two to compute ZKEDL, for an overall total of 11 modular
exponentiations.
5.1.3 Worst-Case Performance of PROS
Both parties commit to their respective input sets which
requires 11n exponentiations (see above). In the worst case,
both POCS introduced in [38] (i.e., Sum of Ranks and Min-
imum of Ranks) perform n2 comparisons. In each step k of
the POCS, two comparisons are carried out (one in which
Pσ = P0 and Pσ = P1 and vice versa). Therefore, in each
step both P0 and P1 each perform 16 + 11 = 27 modular
exponentiations. Thus, the overall worst-case complexity
of our new protocol is O(n2) = O(27n2 + 11n) exponentia-
tions.
5.2 Experimental Performance Analysis
Implementation Details
5.2.1
Our new VPET and PROS protocols as well as all sub-
protocols such as zero-knowledge proofs and commitment
schemes were implemented in C++. Furthermore, our im-
plementation leverages the well-known and eﬃcient GNU
Multiple Precision Arithmetic (GMP) Library 5.0.2 to allow
for multi-precision integer computations as they are required
for reasonable key sizes [3].
The network interface uses UNIX TCP sockets for which
Nagle’s algorithm [33, pp. 815-816] was disabled to avoid
performance degradation due to transmission delays.
5.2.2 Test Environment
All performance tests were performed on a number of
servers with identical hardware conﬁgurations. Each server
has two Intel Xeon E5440 CPUs at 2.83GHz, 8GB main
memory and runs a 64-bit Linux. The code for both parties
of the protocols was executed on the same physical machine.
Since all of our test systems are equipped with two CPUs,
the interference of the two processes is assumed to be negli-
gible.
5.2.3 VPET Performance
The size of all values in the maps was ﬁxed to 32 bits.
Commitment and Comparison Phases.
The commitment and comparison phases of the VPET
protocol were analyzed independently. Figure 5 shows the
performance results for the commitment phase using a mod-
ulus of size log2 p = 512, 1024, 2048 and log2 q = 224. The
map size was varied from 10 to 500 in steps of 10. For each
map size the user time, i.e., the time the process was ac-
tually allocated to the CPU, for computing and verifying a
commitment was recorded separately and averaged over 100
randomly generated maps. As expected, the time for com-
putation and veriﬁcation of commitments increases linearly
with the map size. The average time for computing a single
commitment (resp. veriﬁcation) is 0.4 ms (0.3 ms) for 512-
bit, 1.1 ms (1.0 ms) for 1024-bit, and 4.0 ms (3.4 ms) for
2048-bit moduli. The smaller times for the veriﬁcation are
0100200300400500Number of Commitments0.00.51.01.52.0User Time / [s]512 (c)512 (v)1024 (c)1024 (v)2048 (c)2048 (v)0100200300400500Number of Comparisons0123456User Time / [s]512102420480100200300400500Number of Comparisons0123456User Time / [s]51210242048Figure 8: The horizontal
lines
mark the user time required for
100, . . . , 800 commitments.
The
graph indicates the user time as a
function of comparisons.
Figure 9: PROS worst-case run-
time as a function of ordered
set
size using 1024-bit moduli.
Quadratic behavior for all three
protocols.
Figure 10: PROS average-case run-
time as a function of ordered set
size using 1024-bit moduli and frac-
tion of 0.05 common elements in
the ordered sets.
in agreement with the theoretical analysis in Section 5.1.
Using the same parameters as before, Figures 6 and 7 show
the results for the comparison phase of VPET for Pσ and
Pσ respectively. As expected, the user time for both parties
linearly increases with the number of comparisons. On av-
erage, the time for a single comparison in case of Pσ (resp.
Pσ) is 1.0 ms (0.7 ms) for 512-bit, 3.3 ms (2.4 ms) for 1024-
bit, and 11.3 ms (8.3 ms) for 2048-bit moduli. Again, the
smaller times for Pσ are in agreement with the theoretical
analysis in Section 5.1.
Commitment Amortization.
Figure 8 directly relates the complexity of commitments
to the complexity of comparisons. The horizontal lines in-
dicate the user time (as marked on the left axis) required
for 100, . . . , 800 commitments (as marked on the right axis).
The graph itself corresponds to the user time for a varied
number of comparisons (10 to 500 in steps of 10). Note that
for two input maps of size n there are n2 distinct pairs of
values which could be compared. Figure 8 illustrates the
break-even point for which the time spent for commitments
equals that for comparisons. For example, for 300 commit-
ments less than 200 comparisons are required to break even.
Moreover, 300 commitments allow for 90,000 distinct com-
parisons and the overhead for the commitment phase there-
fore only constitutes a small fraction of the overall runtime
of VPET.
5.2.4 PROS Performance
For all tests, the size of all set elements was 32 bits.
Worst-Case.
In the previous section we have shown that the VPET
protocol exhibits a practical behavior that matches the the-
oretical prediction. Using our VPET implementation as a
building block, we constructed the PROS protocol as de-
scribed in Section 4.
In our experiments we compare the
performance of our new PROS protocol to the PROS proto-
cols with security in the semi-honest model as introduced in
[39, 36]. For comparing two set elements, these semi-honest
protocols utilize the PSIs introduced in [23] (FNP04) and
[20] (DT10).
Figure 9 shows the worst-case performance results for all
three PROS protocol variants using the Sum of Ranks POCS