read files using the directory.
The directory alias is stored in the pg_catalog.edb_dir system catalog table. Note
that edb_dir is not a table compatible with Oracle databases.
The directory alias can also be viewed from the Oracle catalog views
SYS.ALL_DIRECTORIES and SYS.DBA_DIRECTORIES, which are compatible with
Oracle databases.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 78
Database Compatibility for Oracle® Developers
Reference Guide
Use the DROP DIRECTORY command to delete the directory alias. When a directory alias
is deleted, the corresponding physical file system directory is not affected. The file
system directory must be deleted using the appropriate operating system commands.
In a Linux system, the directory name separator is a forward slash (/).
In a Windows system, the directory name separator can be specified as a forward slash
(/) or two consecutive backslashes (\\).
Examples
Create an alias named empdir for directory /tmp/empdir on Linux:
CREATE DIRECTORY empdir AS '/tmp/empdir';
Create an alias named empdir for directory C:\TEMP\EMPDIR on Windows:
CREATE DIRECTORY empdir AS 'C:/TEMP/EMPDIR';
View all of the directory aliases:
SELECT * FROM pg_catalog.edb_dir;
dirname | dirowner | dirpath | diracl
---------+----------+----------------+--------
empdir | 10 | C:/TEMP/EMPDIR |
(1 row)
View the directory aliases using a view compatible with Oracle databases:
SELECT * FROM SYS.ALL_DIRECTORIES;
owner | directory_name | directory_path
--------------+----------------+----------------
ENTERPRISEDB | EMPDIR | C:/TEMP/EMPDIR
(1 row)
See Also
DROP DIRECTORY
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 79
Database Compatibility for Oracle® Developers
Reference Guide
2.3.20 CREATE FUNCTION
Name
CREATE FUNCTION -- define a new function
Synopsis
CREATE [ OR REPLACE ] FUNCTION name [ (parameters) ]
RETURN data_type
[
IMMUTABLE
| STABLE
| VOLATILE
| DETERMINISTIC
| [ NOT ] LEAKPROOF
| CALLED ON NULL INPUT
| RETURNS NULL ON NULL INPUT
| STRICT
| [ EXTERNAL ] SECURITY INVOKER
| [ EXTERNAL ] SECURITY DEFINER
| AUTHID DEFINER
| AUTHID CURRENT_USER
| PARALLEL { UNSAFE | RESTRICTED | SAFE }
| COST execution_cost
| ROWS result_rows
| SET configuration_parameter
{ TO value | = value | FROM CURRENT }
...]
{ IS | AS }
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
[ declarations ]
BEGIN
statements
END [ name ];
Description
CREATE FUNCTION defines a new function. CREATE OR REPLACE FUNCTION will
either create a new function, or replace an existing definition.
If a schema name is included, then the function is created in the specified schema.
Otherwise it is created in the current schema. The name of the new function must not
match any existing function with the same input argument types in the same schema.
However, functions of different input argument types may share a name (this is called
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 80
Database Compatibility for Oracle® Developers
Reference Guide
overloading). (Overloading of functions is an Advanced Server feature - overloading of
stored, standalone functions is not compatible with Oracle databases.)
To update the definition of an existing function, use CREATE OR REPLACE FUNCTION.
It is not possible to change the name or argument types of a function this way (if you
tried, you would actually be creating a new, distinct function). Also, CREATE OR
REPLACE FUNCTION will not let you change the return type of an existing function. To
do that, you must drop and recreate the function. Also when using OUT parameters, you
cannot change the types of any OUT parameters except by dropping the function.
The user that creates the function becomes the owner of the function.
Parameters
name
name is the identifier of the function.
parameters
parameters is a list of formal parameters.
data_type
data_type is the data type of the value returned by the function‟s RETURN
statement.
declarations
declarations are variable, cursor, type, or subprogram declarations. If
subprogram declarations are included, they must be declared after all other
variable, cursor, and type declarations.
statements
statements are SPL program statements (the BEGIN - END block may contain
an EXCEPTION section).
IMMUTABLE
STABLE
VOLATILE
These attributes inform the query optimizer about the behavior of the function;
you can specify only one choice. VOLATILE is the default behavior.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 81
Database Compatibility for Oracle® Developers
Reference Guide
IMMUTABLE indicates that the function cannot modify the database and always
reaches the same result when given the same argument values; it does not do
database lookups or otherwise use information not directly present in its argument
list. If you include this clause, any call of the function with all-constant
arguments can be immediately replaced with the function value.
STABLE indicates that the function cannot modify the database, and that within a
single table scan, it will consistently return the same result for the same argument
values, but that its result could change across SQL statements. This is the
appropriate selection for function that depend on database lookups, parameter
variables (such as the current time zone), etc.
VOLATILE indicates that the function value can change even within a single table
scan, so no optimizations can be made. Please note that any function that has
side-effects must be classified volatile, even if its result is quite predictable, to
prevent calls from being optimized away.
DETERMINISTIC
DETERMINISTIC is a synonym for IMMUTABLE. A DETERMINISTIC function
cannot modify the database and always reaches the same result when given the
same argument values; it does not do database lookups or otherwise use
information not directly present in its argument list. If you include this clause,
any call of the function with all-constant arguments can be immediately replaced
with the function value.
[ NOT ] LEAKPROOF
A LEAKPROOF function has no side effects, and reveals no information about the
values used to call the function.
CALLED ON NULL INPUT
RETURNS NULL ON NULL INPUT
STRICT
CALLED ON NULL INPUT (the default) indicates that the procedure will be called
normally when some of its arguments are NULL. It is the author's responsibility to
check for NULL values if necessary and respond appropriately.
RETURNS NULL ON NULL INPUT or STRICT indicates that the procedure always
returns NULL whenever any of its arguments are NULL. If these clauses are
specified, the procedure is not executed when there are NULL arguments; instead a
NULL result is assumed automatically.
[ EXTERNAL ] SECURITY DEFINER
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 82
Database Compatibility for Oracle® Developers
Reference Guide
SECURITY DEFINER specifies that the function will execute with the privileges of
the user that created it; this is the default. The key word EXTERNAL is allowed for
SQL conformance, but is optional.
[ EXTERNAL ] SECURITY INVOKER
The SECURITY INVOKER clause indicates that the function will execute with the
privileges of the user that calls it. The key word EXTERNAL is allowed for SQL
conformance, but is optional.
AUTHID DEFINER
AUTHID CURRENT_USER
The AUTHID DEFINER clause is a synonym for [EXTERNAL] SECURITY
DEFINER. If the AUTHID clause is omitted or if AUTHID DEFINER is specified,
the rights of the function owner are used to determine access privileges to
database objects.
The AUTHID CURRENT_USER clause is a synonym for [EXTERNAL] SECURITY
INVOKER. If AUTHID CURRENT_USER is specified, the rights of the current user
executing the function are used to determine access privileges.
PARALLEL { UNSAFE | RESTRICTED | SAFE }
The PARALLEL clause enables the use of parallel sequential scans (parallel mode).
A parallel sequential scan uses multiple workers to scan a relation in parallel
during a query in contrast to a serial sequential scan.
When set to UNSAFE, the function cannot be executed in parallel mode. The
presence of such a function in a SQL statement forces a serial execution plan.
This is the default setting if the PARALLEL clause is omitted.
When set to RESTRICTED, the function can be executed in parallel mode, but the
execution is restricted to the parallel group leader. If the qualification for any
particular relation has anything that is parallel restricted, that relation won't be
chosen for parallelism.
When set to SAFE, the function can be executed in parallel mode with no
restriction.
COST execution_cost
execution_cost is a positive number giving the estimated execution cost for
the function, in units of cpu_operator_cost. If the function returns a set, this
is the cost per returned row. Larger values cause the planner to try to avoid
evaluating the function more often than necessary.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 83
Database Compatibility for Oracle® Developers
Reference Guide
ROWS result_rows
result_rows is a positive number giving the estimated number of rows that the
planner should expect the function to return. This is only allowed when the
function is declared to return a set. The default assumption is 1000 rows.
SET configuration_parameter { TO value | = value | FROM CURRENT }
The SET clause causes the specified configuration parameter to be set to the
specified value when the function is entered, and then restored to its prior value
when the function exits. SET FROM CURRENT saves the session's current value of
the parameter as the value to be applied when the function is entered.
If a SET clause is attached to a function, then the effects of a SET LOCAL
command executed inside the function for the same variable are restricted to the
function; the configuration parameter's prior value is restored at function exit. An
ordinary SET command (without LOCAL) overrides the SET clause, much as it
would do for a previous SET LOCAL command, with the effects of such a
command persisting after procedure exit, unless the current transaction is rolled
back.
PRAGMA AUTONOMOUS_TRANSACTION
PRAGMA AUTONOMOUS_TRANSACTION is the directive that sets the function as an
autonomous transaction.
Please Note: The STRICT, LEAKPROOF, PARALLEL, COST, ROWS and SET keywords
provide extended functionality for Advanced Server and are not supported by Oracle.
Notes
Advanced Server allows function overloading; that is, the same name can be used for
several different functions so long as they have distinct input (IN, IN OUT) argument
data types.
Examples
The function emp_comp takes two numbers as input and returns a computed value. The
SELECT command illustrates use of the function.
CREATE OR REPLACE FUNCTION emp_comp (
p_sal NUMBER,
p_comm NUMBER
) RETURN NUMBER
IS
BEGIN
RETURN (p_sal + NVL(p_comm, 0)) * 24;
END;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 84
Database Compatibility for Oracle® Developers
Reference Guide
SELECT ename "Name", sal "Salary", comm "Commission", emp_comp(sal, comm)
"Total Compensation" FROM emp;
Name | Salary | Commission | Total Compensation
--------+---------+------------+--------------------
SMITH | 800.00 | | 19200.00
ALLEN | 1600.00 | 300.00 | 45600.00
WARD | 1250.00 | 500.00 | 42000.00
JONES | 2975.00 | | 71400.00
MARTIN | 1250.00 | 1400.00 | 63600.00
BLAKE | 2850.00 | | 68400.00
CLARK | 2450.00 | | 58800.00
SCOTT | 3000.00 | | 72000.00
KING | 5000.00 | | 120000.00
TURNER | 1500.00 | 0.00 | 36000.00
ADAMS | 1100.00 | | 26400.00
JAMES | 950.00 | | 22800.00
FORD | 3000.00 | | 72000.00
MILLER | 1300.00 | | 31200.00
(14 rows)
Function sal_range returns a count of the number of employees whose salary falls in
the specified range. The following anonymous block calls the function a number of times
using the arguments‟ default values for the first two calls.
CREATE OR REPLACE FUNCTION sal_range (
p_sal_min NUMBER DEFAULT 0,
p_sal_max NUMBER DEFAULT 10000
) RETURN INTEGER
IS
v_count INTEGER;
BEGIN
SELECT COUNT(*) INTO v_count FROM emp
WHERE sal BETWEEN p_sal_min AND p_sal_max;
RETURN v_count;
END;
BEGIN
DBMS_OUTPUT.PUT_LINE('Number of employees with a salary: ' ||
sal_range);
DBMS_OUTPUT.PUT_LINE('Number of employees with a salary of at least '
|| '$2000.00: ' || sal_range(2000.00));
DBMS_OUTPUT.PUT_LINE('Number of employees with a salary between '
|| '$2000.00 and $3000.00: ' || sal_range(2000.00, 3000.00));
END;
Number of employees with a salary: 14
Number of employees with a salary of at least $2000.00: 6
Number of employees with a salary between $2000.00 and $3000.00: 5
The following example demonstrates using the AUTHID CURRENT_USER clause and
STRICT keyword in a function declaration:
CREATE OR REPLACE FUNCTION dept_salaries(dept_id int) RETURN NUMBER
STRICT
AUTHID CURRENT_USER
BEGIN
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 85
Database Compatibility for Oracle® Developers
Reference Guide
RETURN QUERY (SELECT sum(salary) FROM emp WHERE deptno = id);
END;
Include the STRICT keyword to instruct the server to return NULL if any input parameter
passed is NULL; if a NULL value is passed, the function will not execute.
The dept_salaries function executes with the privileges of the role that is calling the
function. If the current user does not have sufficient privileges to perform the SELECT
statement querying the emp table (to display employee salaries), the function will report
an error. To instruct the server to use the privileges associated with the role that defined
the function, replace the AUTHID CURRENT_USER clause with the AUTHID DEFINER
clause.
Other Pragmas (declared within a package specification)
PRAGMA RESTRICT_REFERENCES
Advanced Server accepts but ignores syntax referencing PRAGMA
RESTRICT_REFERENCES.
See Also DROP FUNCTION
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 86
Database Compatibility for Oracle® Developers
Reference Guide
2.3.21 CREATE INDEX
Name
CREATE INDEX -- define a new index
Synopsis
CREATE [ UNIQUE ] INDEX name ON table
( { column | ( expression ) } )
[ TABLESPACE tablespace ]
Description
CREATE INDEX constructs an index, name, on the specified table. Indexes are primarily
used to enhance database performance (though inappropriate use will result in slower
performance).
The key field(s) for the index are specified as column names, or alternatively as
expressions written in parentheses. Multiple fields can be specified to create multicolumn
indexes.
An index field can be an expression computed from the values of one or more columns of
the table row. This feature can be used to obtain fast access to data based on some
transformation of the basic data. For example, an index computed on UPPER(col)
would allow the clause WHERE UPPER(col) = 'JIM' to use an index.
Advanced Server provides the B-tree index method. The B-tree index method is an
implementation of Lehman-Yao high-concurrency B-trees.
Indexes are not used for IS NULL clauses by default.
All functions and operators used in an index definition must be "immutable", that is, their
results must depend only on their arguments and never on any outside influence (such as
the contents of another table or the current time). This restriction ensures that the
behavior of the index is well-defined. To use a user-defined function in an index
expression remember to mark the function immutable when you create it.
If you create an index on a partitioned table, the CREATE INDEX command does
propagate indexes to the table‟s subpartitions.
Parameters
UNIQUE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 87
Database Compatibility for Oracle® Developers
Reference Guide
Causes the system to check for duplicate values in the table when the index is
created (if data already exist) and each time data is added. Attempts to insert or
update data which would result in duplicate entries will generate an error.
name
The name of the index to be created. No schema name can be included here; the
index is always created in the same schema as its parent table.
table
The name (possibly schema-qualified) of the table to be indexed.
column
The name of a column in the table.
expression
An expression based on one or more columns of the table. The expression usually
must be written with surrounding parentheses, as shown in the syntax. However,
the parentheses may be omitted if the expression has the form of a function call.
tablespace
The tablespace in which to create the index. If not specified,
default_tablespace is used, or the database‟s default tablespace if
default_tablespace is an empty string.
Notes
Up to 32 fields may be specified in a multicolumn index.
Examples
To create a B-tree index on the column, ename, in the table, emp:
CREATE INDEX name_idx ON emp (ename);
To create the same index as above, but have it reside in the index_tblspc tablespace:
CREATE INDEX name_idx ON emp (ename) TABLESPACE index_tblspc;
See Also
DROP INDEX, ALTER INDEX
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 88
Database Compatibility for Oracle® Developers
Reference Guide
2.3.22 CREATE MATERIALIZED VIEW
Name
CREATE MATERIALIZED VIEW -- define a new materialized view
Synopsis
CREATE MATERIALIZED VIEW name
[build_clause][create_mv_refresh] AS subquery
Where build_clause is:
BUILD {IMMEDIATE | DEFERRED}
Where create_mv_refresh is:
REFRESH [COMPLETE] [ON DEMAND]
Description
CREATE MATERIALIZED VIEW defines a view of a query that is not updated each time
the view is referenced in a query. By default, the view is populated when the view is
created; you can include the BUILD DEFERRED keywords to delay the population of the
view.
A materialized view may be schema-qualified; if you specify a schema name when
invoking the CREATE MATERIALIZED VIEW command, the view will be created in the
specified schema. The view name must be distinct from the name of any other view,
table, sequence, or index in the same schema.
Parameters
name
The name (optionally schema-qualified) of a view to be created.
subquery
A SELECT statement that specifies the contents of the view. Refer to SELECT for
more information about valid queries.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 89
Database Compatibility for Oracle® Developers
Reference Guide
build_clause