大家好，

今天我想分享一个最近遇到的非常不寻常的黑客攻击案例。通过利用一个开放重定向漏洞，我成功获取了一家印度领先的金融科技公司的AWS EC2凭证。接下来，我会详细解释如何从找到这个异常重定向开始，到最终获得对AWS安全凭证的访问权。

### 背景
近期，我在研究ASP.NET应用程序中的路由机制，特别是学习URL是如何被正确地导向至相应的逻辑处理或功能实现的。在ASP.NET Core MVC框架下，路由中间件负责匹配传入请求的URL，并将其映射至特定的动作方法。然而，在某些情况下，由于错误配置的路由逻辑或不当的代码结构，可能会导致执行非预期的功能。为了更深入理解这一点，建议参考[微软官方文档](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing?view=aspnetcore-2.2)。

### 漏洞发现过程
在我测试的一家印度顶尖金融科技公司中，我发现其应用是基于ASP.NET构建，并运行于Windows IIS服务器之上（版本10.0）。这可以通过检查HTTP响应头部轻松识别出来。

#### 1. 开放重定向
当我尝试向原始URL添加参数时，系统返回了404 Not Found错误。但是，当我在"My account"页面进行同样操作时，情况发生了变化：页面进行了301重定向回到原路径。进一步实验表明，如果将目标URL设为外部站点（例如`http://evilzone.org`），虽然浏览器显示的地址仍指向该网站，但实际上内容已由服务器加载并可能传递给了上游服务。
```plaintext
https://redacted.com/myaccount/http://evilzone.org
```

#### 2. 服务器端请求伪造 (SSRF)
根据上述行为推测，背后可能存在如下逻辑：
- 对于形如`/myaccount`的路径调用`myaccountApi`。
- 当遇到包含`http://`或`https://`协议的URL时，则执行`MyProfile`动作并将请求转发给指定地址。
- 其他所有情况默认执行与`myaccountApi.MyProfile`相同的操作。

这种设计可能是出于开发阶段调试目的而临时加入的，但不慎被部署到了生产环境之中。使用Requestbin工具来捕获HTTP请求后，我发现`X-Forwarded-For`头字段内出现了两个IP地址——其中一个属于我的路由器，另一个则对应着上游代理服务器。这意味着原本简单的客户端重定向实际上变成了服务器端重定向，从而为SSRF攻击提供了机会。

#### 3. 内部网络扫描与元数据泄露
通过对本地主机不同端口发起请求，我验证了部分端口处于开放状态。同时注意到响应头部中存在`X-Amz-Cf-Id`及`cloudfront`关键词，表明应用确实通过了AWS CloudFront服务。接着，我尝试读取EC2实例元数据API（`http://169.254.169.254/latest/meta-data/`），不仅成功获得了实例详情，还能够访问SSH公钥等敏感信息。

最终，通过调用`http://169.254.169.254/latest/meta-data/iam/security-credentials/`接口，我得以查看到完整的AWS安全凭证。尽管所关联的IAM角色权限相对有限，但这依然是一次重要发现。

### 结论
这次经历充分展示了即使是最小的安全疏忽也可能带来严重后果。对于企业而言，应确保所有代码变更均经过严格审查后再发布至线上环境；而对于开发者来说，则需时刻警惕潜在风险，避免因疏忽而导致重大安全隐患。

报告时间线：
- 2019年5月25日 - 向相关方提交漏洞报告。
- 2019年5月26日 - 漏洞被标记为已修复。
- 2019年5月26日 - 重新测试确认修复效果。
- 2019年5月30日 - 收到奖励。

感谢您的阅读！