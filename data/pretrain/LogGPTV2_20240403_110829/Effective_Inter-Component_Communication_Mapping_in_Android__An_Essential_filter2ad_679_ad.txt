values η− that were removed from it.
• If the Bundle has not been cleared, then there are two
possible cases: either no reference to another Bun-
dle has been previously recorded (i.e., O j = ∅), or
such a reference has been recorded to model a call to
putAll(). In the ﬁrst case, we simply take the union
of the original set E j and the set η + of added values,
and subtract the set η− of removed values. This ex-
plain the (E j ∪ η +)\η− value. In the second case, a
call to putAll() has been detected, which means that
any further method call adding or removing data has
to be added to set O j instead of E j. Therefore in this
case E(cid:23)j = E j.
The deﬁnition of O(cid:23)j considers several cases:
• If the Bundle data has been cleared, then the previous
value of O j is irrelevant and we set O(cid:23)j = Θ. Also, if
O j is empty, then we can also just set O(cid:23)j to Θ (which
may or may not be empty).
• Otherwise,
the Bundle data has not been cleared
(cl = 0) and a call to putAll() has been detected
(O j (cid:24)= ∅). Then it means that the current function
models method calls that happened after a call to
putAll(). Therefore we need to record β b
(η +,η−,0,Θ)
in O(cid:23)j, which explains the deﬁnition O(cid:23)j = O j ∪
(β b
(η +,η−,0,Θ)).
For example, the pointwise branch Bundle transformer
that models the inﬂuence of the method makeBundle()
from Figure 7 is β b
(η +,∅,0,Θ), where
η + ={FirstName}
Θ =(cid:23)(b, bundle.putAll(b)),
(9)
(10)
(∅,{Surname},0,())(cid:22)
β b
Pointwise branch Bundle transformers model the in-
ﬂuence of a single branch. In order to account for mul-
tiple branches or issues such as possible aliasing false
positive, we deﬁne pointwise Bundle transformers.
Deﬁnition 8. A pointwise Bundle transformer is a func-
tion
: V i
b → V i
b
β b
{(η +
1 +,η−1 ,cl1,Θ1),··· ,(η +
n ,η−n ,cln,Θn)}
such that, for each Bi ∈ V i
b,
β b
{(η +
1 ,η−1 ,cl1,Θ1),··· ,(η +
n ,η−n ,cln,Θn)}
(Bi) =
1 ,η−1 ,cl1,Θ1)(Bi)∪···∪β b
β b
(η +
n ,η−n ,cln,Θn)(Bi)
(η +
For example, method makeBundle() from Figure 7
only has a single branch, thus the pointwise Bundle trans-
former that models it is simply β b
, where η +
and Θ are given in Equations (9) and (10). As we did for
the ComponentName value example, we can conﬁrm us-
ing Deﬁnitions 7 and 8 that β b
(⊥) ={(E ,O)},
where E and O are given by Equations (7) and (8).
{(η +,∅,0,Θ)}
{(η +,∅,0,Θ)}
5.2.2 Analysis II
After Analysis I has been performed, the values of the
Bundles used in placeholders in intermediate Bundle val-
ues are known. Ultimately, we want to obtain branch
Bundle values and ﬁnally Bundle values:
Deﬁnition 9. A branch Bundle value b is a set E of string
keys describing extra data.
Deﬁnition 10. A Bundle value B is a set of branch Bun-
dle values: B = {b1,··· ,bm}.
Since the values of the referenced Bundles are known,
we can integrate them into the Bundle values referring to
them. Then the inﬂuence of the subsequent method calls
that have been recorded can precisely be known.
Let us consider the example of makeBundle() from
Figure 7. After Analysis I has been performed, we know
that the intermediate value of bundle at the return state-
ment is {(E,O)}, where
E ={FirstName}
O =(cid:23)(b, bundle.putAll(b)),β b
We consider all elements of O in order. As the
ﬁrst element of O is (b, bundle.putAll(b)), we inte-
grate b’s value into bundle. From Analysis I, we know
(∅,{Surname},0,())(cid:22)
USENIX Association  
22nd USENIX Security Symposium  551
that the value of b at instruction bundle.putAll(b)
is {{Surname} ,∅}. Thus, E becomes {FirstName,
Surname}. The next element of O is β b
(∅,{Surname},0,()).
This means that we have to remove key Surname from E.
The ﬁnal value of E is therefore {FirstName}. Thus, the
Bundle value associated with bundle at the return state-
ment is {{FirstName}}.
Note that the referenced Bundle can also make refer-
ences to other Bundles. In that case, we perform the res-
olution for the referenced Bundles ﬁrst. There can be an
arbitrary number of levels of indirection. Analysis II is
iterated until a ﬁx-point is reached.
Intent and IntentFilter Models
5.3
The Intent model is deﬁned similarly to the Bundle
model, which includes object composition.
In method
onClick() of Figure 7, the target of Intent intent is set
using a ComponentName object and its extra data is set
with a Bundle. Because of this object composition, ﬁnd-
ing the Intent value also involves two analyses similar to
the ones performed for Bundles. First, intermediate In-
tent values with placeholders for referenced Component-
Name and Bundle objects are found. Second, the refer-
enced objects’ values are integrated into intent’s value.
i = (V i
Similarly to the Bundle model, we deﬁne intermedi-
ate branch Intent values and intermediate Intent values.
The set of intermediate Intent values is V i
i and we de-
ﬁne a lattice Li
i ,∪) as we did for Li
b. We also de-
ﬁne pointwise branch Intent transformers and pointwise
Intent transformers. For example, in method onClick()
of Figure 7, the ﬁnal intermediate value for intent sim-
ply has placeholders for a ComponentName and a Bun-
dle value. Other ﬁelds, such as action and categories,
are empty. The ComponentName and Bundle values are
computed using the models presented in Sections 5.1
and 5.2. Finally, we deﬁne branch Intent values and
Intent values, which are output by the second analysis.
The ﬁnal value for intent after the second analysis pre-
cisely contains the two possible targets (a.b.MyClass
and a.b.MySecondClass in package c.d) and extra
data key FirstName. For conciseness, and given the
strong similarities with the Bundle model, we do not in-
clude a full description of the Intent model here.
In order to analyze dynamic Broadcast Receivers, we
model IntentFilter objects. Modeling IntentFilters is sim-
ilar to modeling Intents, except that IntentFilters do not
involve object composition. That is because IntentFilters
do not have methods taking other IntentFilters as argu-
ment, except for a copy constructor. Thus, their analysis
is simpler and involves a single step. Similarly to what
we did for other ICC models, we deﬁne branch Intent-
Filter values, IntentFilter values, pointwise branch In-
tentFilter transformers and pointwise IntentFilter trans-
formers.
In particular, we deﬁne lattice L f = (Vf ,∪),
In method
is the set of IntentFilter values.
where Vf
onClick() from Figure 7, the ﬁnal value of f contains ac-
tion a.b.ACTION and category a.b.CATEGORY. Given
the similarity of the IntentFilter model with previous
models, we do not include a complete description.
5.4 Casting as an IDE Problem
These deﬁnitions allow us to deﬁne environment trans-
formers for our problem. Given environment e ∈
Env(D,L), environment transformer λ e.e is the identity,
which does not change the value of e. Given Intent i and
Intent value I, λ e.e[i (cid:27)→ I] transforms e to an environment
where all values are the same as in e, except that Intent i
is associated with value I.
We deﬁne an environment transformer for each API
method call. Each of these environment transformers
uses the pointwise environment transformers deﬁned in
Sections 5.1, 5.2 and 5.3. It precisely describes the inﬂu-
ence of a method call on the value associated with each
of the symbols in D.
Figure 6 shows some environment transformers and
their pointwise representation. The ﬁrst one is a con-
structor invocation, which sets the value corresponding
to b to ⊥. The second one adds an integer to the key-
value pairs in Bundle b’s extra data, which is represented
by environment transformer
({MyInt},∅,0,()) (e(b))(cid:30) .
λ e.e(cid:31)b (cid:27)→ β b
It means that
the environment stays the same, ex-
cept
the value associated with b becomes
β b
({MyInt},∅,0,()) (e(b)), with e(b) being the value previ-
ously associated with b in environment e. The pointwise
transformer for b is
that
on Figure 6 for consistency with the other pointwise
transformers.
It simply adds key MyInt to the set of
data keys. The next transformer is for a copy construc-
tor, where the value associated with d is assigned to the
value associated with b. The last transformer clears the
data keys associated with d.
Trivially, these environment transformers are distribu-
tive. Therefore, the following proposition holds.
Proposition 1. Let G∗ be the supergraph of an An-
droid application. Let Dc, Db Di and D f be the sets
of ComponentName, Bundle and Intent variables, re-
to which we add the special symbol Λ5.
spectively,
Let Lc, Li
b, Li
i and L f be the lattices deﬁned above.
5Recall from Section 4.2 that Λ symbolizes the absence of a data
ﬂow fact.
which we denote by
β b
({MyInt},∅,0,()),
({MyInt},∅,0,())(B)
λ B.β b
552  22nd USENIX Security Symposium 
USENIX Association
Let Mc, Mb, Mi and Mf be the corresponding assign-
ments of distributive environment transformers. Then
(G∗,Dc,Lc,Mc), (G∗,Db,Li
i ) and
(G∗,Di,L f ,Mf ) are IDE problems.
b), (G∗,Db,Li
b,Mi
i,Mi
It follows from this proposition that we can use the
algorithm from [32] to solve the Intent ICC problem.
The original IDE framework [32] requires that the
micro-function be represented efﬁciently in order to
achieve the time complexity of O(ED3). Our model does
not meet these requirements:
in particular, applying,
composing, joining micro-function or testing for equality
of micro-functions cannot be done in constant time. In-
deed, the size of micro-functions grows with the number
of branches, aliases and possible string arguments (see
Equation 6 for an example with two branches). However,
in practice we can ﬁnd solutions to our IDE problem in-
stances in reasonable time, as we show in Section 6.
6 Evaluation
This section describes an evaluation of the approach pre-
sented in the preceding sections, and brieﬂy character-
izes the use of ICC in Android applications. We also
present a study of potential ICC vulnerabilities. Our
implementation is called Epicc (Efﬁcient and Precise
ICC) and is available at http://siis.cse.psu.edu/
epicc/.
It is built on Heros [3], an IDE framework
within Soot [34]. We also provide the version of Soot
that we modiﬁed to handle pathological cases encoun-
tered with retargeted code.
In order to compute string arguments, we use a simple
analysis traversing the interprocedural control ﬂow graph
of the application. The traversal starts at the call site and
looks for constant assignments to the call arguments. If a
string argument cannot be determined, we conservatively
assume that the argument can be any string. As we show
in Section 6.1, in many cases we are able to ﬁnd precise
string arguments. More complex analyses can be used if
more precision is desired [7].
For points-to analysis and call graph construction, we
use Spark [24], which is part of Soot. It performs a ﬂow-
sensitive, context-insensitive analysis. We approximate
the call graph in components with multiple entry points.
In order to generate a call graph of an Android appli-
cation, we currently use a “wrapper” as an entry point.
This wrapper calls each class entry point once, which
may under-approximate what happens at runtime. This
impacts a speciﬁcation only if an ICC ﬁeld (e.g., Intent)
is modiﬁed in a way that depends on the runtime execu-
tion order of class entry points. Generally, if we assume
that our model of components’ life cycle is complete and
if the application does not use native calls or reﬂection,
then our results are sound.
The analysis presented in this section is performed on
two datasets. The ﬁrst random sample dataset contains
350 applications, 348 of which were successfully ana-
lyzed after retargeting. They were extracted from the
Google Play store6 between September 2012 and Jan-
uary 2013. The applications were selected at random
from over 200,000 applications in our corpus. The sec-
ond popular application dataset contains the top 25 most
popular free applications from each of the 34 applica-
tion categories in the Play store. The 850 selected appli-
cations were downloaded from that application store on
January 30, 2013. Of those 850 applications, 838 could
be retargeted and processed and were used in the exper-
iments below. The 14 applications which were not ana-
lyzed were pathological cases where retargeting yielded
code which could not be analyzed (e.g., in some cases
the Dare tool generated offsets with integer overﬂow er-
rors due to excessive method sizes), or where applica-
tions could not be processed by Soot (e.g., character en-
coding problems).
6.1 Precision of ICC Speciﬁcations
The ﬁrst set of tests evaluates the technique’s precision
with our datasets. We deﬁne the precision metric to be
the percentage of source and sink locations for which a
speciﬁcation is identiﬁed without ambiguity. Ambiguity
occurs when an ICC API method argument cannot be de-
termined. These arguments are mainly strings of charac-
ters, which may be generated at runtime. In some cases,
runtime context determines string values, which implies
that our analysis cannot statically ﬁnd them.
Recall the various forms of ICC. Explicit ICC iden-
tiﬁes the communication sink by specifying the target’s
package and class name. Conversely, implicit ICC iden-
tiﬁes the sink through action, category, and/or data ﬁelds.
Further, a mixed ICC occurs when a source or sink can
take on explicit or implicit ICC values depending on the
runtime context. Finally, the dynamic receiver ICC oc-
curs when a sink binds to an ICC type through runtime
context (e.g., Broadcast Receivers which identify the In-
tent Filter types when being registered). We seek to de-
termine precise ICC speciﬁcations, where all ﬁelds of In-
tents or Intent Filters are known without ambiguity.
As shown in Table 1, with respect to the random sam-
ple corpus, we were able to provide unambiguous speci-
ﬁcations for over 91% of the 7,835 ICC locations in the
348 applications. Explicit ICC was precisely analyzed
more frequently (≈98%) than implicit ICC (≈88%). The
remaining 7% of ICC containing mixed and dynamic re-
ceivers proved to be more difﬁcult, where the precision
rates are much lower than others. This is likely due to
the fact that dynamic receivers involve ﬁnding more data
6Available at https://play.google.com/store/apps.
USENIX Association  
22nd USENIX Security Symposium  553
Explicit
Implicit
Mixed
Dyn. Rec.
Total
Explicit
Implicit
Mixed
Dyn. Rec.
Total
Random Sample
Precise
3,571 97.65%
3,225 88.45%
28 59.57%
357 73.61%
7,181 91.65%