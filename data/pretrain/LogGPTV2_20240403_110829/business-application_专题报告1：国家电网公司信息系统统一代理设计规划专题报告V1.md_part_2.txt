内部模块中包含任务调度处理器、采集缓存、推送处理器、配置处理器和脚本解释器。
任务调度处理器的作用是安排采集任务，定时完成数据、日志等信息的采集，并通过对操作系统资源状况的监视，平衡执行采集任务，最大限度保证将计算资源留给业务系统，尽可能使业务系统的运行不受干扰。例如，当业务系统进行大量计算，占用了较多的CPU时间和网络带宽，此时，任务调度处理器能够进行延时采集，并将采集结果暂时存在本地缓存中，仅视优先级向管理节点传送实时性较强的数据，对实时性要求不高的数据可在系统负载较低时分流量、分批次的上传至管理节点。
在自动化运维场景下，对服务器的软件、补丁安装、配置文件修改均自动化进行，因此，安全Agent通过推送处理器和配置处理器对这些请求进行处理。
推送处理器的作用是接受管理节点转发的软件安装请求，为保证系统安全，在服务器上安装的软件、补丁经安全审核后，存放到指定YUM安装服务器，安全Agent只从特定的YUM源下载安装，避免随意安装使不安全的软件、补丁进入系统。推送处理器可以根据安装脚本，对安装过程进行管理，如安装前的环境准备、安装中的过程检查以及安装后清理临时文件等过程。安装结束后，推送处理器将安全情况反馈给请求方。
配置处理器的作用是接受管理节点转发的配置文件修改请求。运维人员需要对配置文件进行改动时，通过自动化配置管理工具进行配置文件的修改、验证，新的配置文件经审核后，通过自动化配置管理工具发布，自动化配置管理工具通过管理节点向Agent转发配置修改请求，Agent接受到新的配置文件后，对其进行预处理，并对原配置文件进行修改替换，完成后，将处理结果反馈给请求方。
采集缓存使用KyotoCabinet进行管理，采集得到的数据先在采集缓存中存放，再由任务调度处理器在适当的时间发送给管理节点，采集缓存是持久化的，不会因程序意外结束、断电关机等情况造成数据丢失，对缓存所占用的最大空间可以根据环境进行配置。
脚本解释器是内嵌在Agnet中的Lua脚本解释器，脚本要执行的所有命令均需脚本解释器桥接内部插件所提供的处理函数，从而将脚本与操作系统的文件系统、进程管理相隔离，杜绝通过脚本对操作系统进行影响。
Agent的内部接口包括监控插件接口和脚本接口。为了保证安全Agent的灵活性和生命力，其设计思想是通过C/C++硬编码提供机制，通过插件和脚本提供功能。插件是一些编译好的并经过审核验证的动态连接库，在其内部封装了采集数据的函数，插件接口在Agent运行期动态加载插件，将其内部提供的函数进行注册，当脚本中需要对函数进行调用时，任务调度处理器会根据数据的时效性查询缓存，若缓存的数据尚在有效期内，则直接使用缓存内的数据，若已经失效，则重新采集，通过这种方式，一是使脚本不被非法使用，二是解决数据被重复采集，浪费系统资源的问题。
Agent的外部接口主要分为2大类，一类是基于thrift的客户端接口，用于与管理节点通信，第二类是通用TCP/IP客户端Trap接口，用于向外部系统主动发送极为重要、紧急的消息（即Trap方式）。由于在通信过程中，本地全部为TCP/IP客户端，不需要开放本地端口（仅在特殊情况下短时间开放对外端口），从而切断了非法访问的通道，使网络安全得到保障。Trap接口可支持TCP/IP和URL两种通信方式。
Agnet具有独立于进程外的看门狗，看门狗的作用是监控Agent的运行情况，当Agent被停止或运行状态异常时，看门狗会主动重启Agent进程，同时，Agent也对看门狗进行监控，当看门狗停止时，会自动启动看门狗进程，双方形成互看。
## 管理节点架构设计
管理节点采用分布式部署，节点数量可从1到任意，具体视负载和对稳定性要求而定，各个节点间为对等关系。管理节点的功能架构如下图所示：
![](media/image5.png){width="5.770138888888889in"
height="3.316666666666667in"}
管理节点分为内部模块、内部接口以及外部接口三个组成部分。内部模块由任务调度处理器、节点管理模块、消息队列管理、认证管理、推送管理、缓存管理等模块组成。
任务调度处理模块负责对查询、上传等任务进行调度，并负责检查各个Agent的心跳，在有效时间内（一般是几秒钟）接收到Agent心跳信号，则标记此Agent为在线状态、若没有接收到，则标记Agent为离线状态。
节点管理模块负责对节点注册进行管理，当Agent启动时，向节点管理模块申请唯一标识,此标识将作为Agent的永久标识。
消息队列用于管理节点各个进程间通信。
认证管理模块通过与认证系统集成，对外部系统进行身份和权限的认证，主要解决请求方是否有权限采集数据以及是否具有与数据对应的权限。
推送代理模块负责转发外部系统提交的软件安装、配置推送等请求。
缓存管理对Kafka缓存进行控制，当Agent上传数据到达时，写入/更新缓存，当有查询请求到达时，从缓存读取数据。另外，缓存管理模块维持一个采集频率表，当数据失效时，从缓存中将数据清除，保持kafka对空间的使用，同时避免脏数据。
管理节点的内部接口主要包括与Agent通信的thrift服务端接口，对kafka进行操作的缓存接口和接收下级管理节点数据的级联接口。
管理节点的外部接口主要包括与第三方系统集成的TCP/IP端口，与自动化运维工具集成的Thrift接口，与上级管理节点通信的级联接口。
## 与审计系统集成
1、Agent的安装部署、调试、发布、升级更新、文件上传下载、运维都应在运维安全审计系统上完成，纳入信息系统行为安全审计规范体系。
2、Agent采集或执行过程应写入日志，便于事后问题追溯。
3、客户端Agent与服务器Agent之间连接、Agent访问其他服务器，需通过运维安全审计系统的认证鉴权。
4、服务器端Agent与客户端Agent之间、Agent与其他应用程序之间调用、通信、数据传输过程都应可审计，调用脚本时脚本内容可审计。
# 安全保障技术
## 访问控制
在目前的IT环境中，各个数据采集/监控等系统直接调用部署在各个服务器上的Agent，并且采用的传输方式、协议也各自不同，缺乏明确的访问边界，也难于进行数据请求者的身份认证。
采用Agent架构，可以将各个数据采集/监控系统的请求集中到管理节点进行集中管控，并进行统一的认证。
![](media/image6.png){width="5.771527777777778in"
height="3.654861111111111in"}
## 熔断机制
熔断机制是面向黑客攻击和大量并发访问发生时，服务器的主动自我保护机制。
在当前的Agent应用中，黑客可以模仿服务器的请求，向Agent发起攻击，此时，Agent无法判断请求的真实性，较容易被攻破。安全Agent由于关闭了TCP/IP端口，将外部访问集中到管理节点，使攻击行为无法到达，从而切断了攻击路线。
管理节点对外部访问进行统一管理，可以对请求的来源身份和行为特征进行识别，当认为请求不安全时，将请求重定向到一个黑洞，从而使攻击失去作用。当面对大量并发产生时，管理节点为了保证自身不被拥塞，可以将超出安全数量的部分并发请求导入黑洞。
![](media/image7.png){width="5.76875in" height="3.9131944444444446in"}
## 防篡改机制
监控脚本、程序开发完成后，需要提交审核后方可上线运行，为防止未经授权的修改、编译，安全Agent采用数字证书对程序进行认证，防止篡改。
证书的发布过程如下：
1.  程序经审核后，发布管理者向认证服务器申请一个密钥对，密钥对中的私钥由认证服务保密管理，并不对外发布。
2.  密钥对中的公钥由发布管理者写入源代码中的签名位置。然后对源程序进行编译或打包。
3.  编译后的二进制程序使用SHA1算法生成摘要，认证服务使用摘要生成此程序的数字证书。
4.  程序发布时，将程序和数字证书同时部署。
5.  在运行时，看门狗对程序生成SHA1摘要，并于证书中的SHA1进行比对，若一致，则说明该程序属于发布管理者的合法发布，采集的数据是受信的，若不一致，则说明程序经过修改却没有进行认证，此时，采集的数据是不受信的。
防篡改机制如下图所示：
![](media/image8.png){width="5.769444444444445in"
height="3.8958333333333335in"}
# 发展演进路线
## 开源的意义
从当前情况来看，开源是完善安全Agent代码、提高程序公信度的必然手段。目前，对Agent应用所产生的种种不良印象，均来自于Agent的闭源，使用者无法了解Agent的实现，因此，通过开源，将Agent的实现透明的展现给使用者，可以有效提升使用者对程序的信任程度。
同时，安全Agent的开发、应用得开源，可以为公司探索一种可行的开发模式，通过开源，使更多的公众用户参与到开发过程中，对程序功能、代码质量进行提升、优化，实现更为完善的应用系统。
随着开源模式的发展，将为公司寻求更经济、更有效、生产力更高的IT环境。通过开源，成熟的代码、框架等技术可在公司内部得到充分的复用和借鉴，避免重复设计、重复编写，从而降低开发成本，提升开发效率。各单位也可以根据自身的需要，从应用市场中自行下载或购买适合自己的程序进行应用，缩短设计、开发、部署等流程，实现即安即用。
## 生态圈
为使开源社区能够持久、繁荣发展，生态圈的形成是必不可少的。生态圈的必要元素包括：参与者、管理者以及基础设施。
参与者可以是公司的员工、产业公司或为电力服务的各个厂商。参与者可以编写、改进代码，也可以遵照开源许可使用代码。
管理工作由理事会负责，主要职责是管理代码、管理分支并对参与者的贡献度进行考察，理事会的成员根据贡献度大小、影响力等因素选举产生。
基础设施包括开源软件的版本服务器、网站、论坛、APP客户端等。
## 保障措施
1、建立代码评审机制
代码评审的作用是对代码的质量和安全进行管理。成立专家组，对开发者代码进行评级、认证。经认证的程序为其颁发数字证书，以防篡改。
2.  形成商业模式
建立开发者平台，公司、产业公司、厂商、个人均可注册。开发者的作品可在平台上进行发布，依据自身意愿提供收费或免费下载。使用者可以从平台选购适合自己需要的代码。
商业模式的建立，可以通过经济手段促使更多高水平的开发者加入，有利于公司技术水平的提高。
3.  测试实验支持
成立测试、实验基地，为程序的开发者和使用者提供规范、统一的测试、实验环境。基地可以通过私有云为开发者提供计算、网络资源，帮助开发者快速建立开发、测试环境，降低开发者介入难度。