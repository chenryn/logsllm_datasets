## PostgreSQL 14 release notes 新特性详解  
### 作者  
digoal  
### 日期  
2021-05-13  
### 标签  
PostgreSQL , 14   
----  
## 背景  
https://www.postgresql.org/docs/devel/release-14.html  
包含PG 14 的 160余项新功能或增强特性的详细讲解.   
由于PG 14还没有正式release, 可能还有变数, 请参考git, 有些特性可能会出现revert的情况:  
- https://git.postgresql.org/gitweb/?p=postgresql.git&a=search&h=HEAD&st=commit&s=revert  
# i. 重要特性
[PG 14 特性总览 - 直播回放](https://www.bilibili.com/video/BV1wv411L7rp/)  
[PostgreSQL 14 新特性场景与价值-性能篇](https://www.bilibili.com/video/BV1Po4y117DU/)  
[PostgreSQL 14 新特性场景与价值-数据类型与SQL篇](https://www.bilibili.com/video/BV1tQ4y1R71b/)  
[PostgreSQL 14 新特性场景与价值-管理篇](https://www.bilibili.com/video/BV1VV411j7wT/)  
[PostgreSQL 14 新特性场景与价值-流与备份恢复篇](https://www.bilibili.com/video/BV1GN411Z7TJ/)  
[PostgreSQL 14 新特性场景与价值-安全篇](https://www.bilibili.com/video/BV14K4y1G7R2/)  
## 一、性能  
1、大量连接高并发优化(无论active和idle), 上万连接无性能损耗.   
- 场景: SaaS场景, 微服务架构下的中心库场景. 客户端多、在线用户多、数据库并发连接非常多.   
- 价值: 上万连接无性能损耗. 比连接池网络少1跳性能更好、比连接池支持全部功能, 例如连接池会话模式无法支持绑定变量.   
2、索引增强  
缓解高频更新负载下的btree索引膨胀,   
- 场景: 数据频繁更新. 游戏、交易、共享出行、IoT  
- 价值: 减少膨胀, 降低存储、内存使用率, 提高效率    
支持sort接口, 大幅提升Create GiST和SP-GiST索引的速度,   
- 场景: 地理信息、物联网、共享出行等使用了地理信息、JSON、range等数据类型的业务  
- 价值: GiST和SP-GiST索引创建速度提升一个数量级  
支持SP-GiST覆盖索引功能满足任意维度聚集存储,   
- 场景: 地理信息、物联网、共享出行等使用了地理信息、JSON、range等数据类型的业务  
- 价值: 将value集成到索引叶子结点, 减少block扫描, 提高基于空间、JSON、range的范围搜索的响应速度  
- DEMO: 
```
    - create index idx_tbl_1 on tbl using spgist (gis) include col1,col2; -- 叶子结点加入col1,col2内容
    - select col1,col2,gis from tbl where gis xx; -- VM clearly heap page 可以不需要回表, 提高性能
```
BRIN支持布隆过滤 和 multi range  
- 场景: IoT,时序类场景  
- 价值: 提高BRIN索引的过滤精度, 减少返回的block数. 通过布隆过滤器支持任意字段组合条件过滤  
3、并行计算增强  
并行顺序扫描支持chunk 大IO利用prefetch能力大幅提升顺序IO扫描吞吐性能, 解决小IO无法打满块设备吞吐指标的问题.     
- 场景: 数据分析类业务  
- 价值: 提高大范围数据扫描的IO吞吐, 逼近块设备IO吞吐极限  
PL/pgSQL RETURN QUERY支持并行计算,   
- 场景: 数据分析类业务  
- 价值: 在plpgsql函数内使用return query返回结果时支持query的并行计算来提升性能  
- DEMO:
```
    - create or replace function xx.... return query select xx from xx ... -- 这里到select xx query可以支持并行计算
```
刷新物化事务支持并行计算  
- 场景: 数据分析类业务、预计算场景  
- 价值: 物化视图的刷新支持并行计算, 大幅度提高刷新速度  
- DEMO:
```
    - REFRESH MATERIALIZED VIEW [ CONCURRENTLY ] name 支持并行计算
```
4、内置sharding功能接口 postgres_fdw 持续增强  
支持外部表异步并行计算,   
- 场景: sharding 分库分表. 数据分析场景, 多个实例或sharding分片的数据需要并行分析的场景  
- 价值: 提高多个实例并行计算的效率  
- DEMO:
```
    - create foreign table ft1 AT Server1;
    - ... 
    - create foreign table ftn AT ServerN;
    - create partition table tbl partition by .... 
    - alter table ft1 attach to tbl ...
    - ...
    - alter table ftn attach to tbl ...
    - select count(*),avg(x),max(x)... from tbl group by xxxx -- 支持N个Server同时计算.
```
bulk insert,   
- 场景: sharding 分库分表  
- 价值: 提高数据写入速度  
远程分区表的子分区可以import foreign schema生成外部表,   
- 场景: sharding 分库分表  
- 价值: 简化一键生成shard的步骤, 同时支持按分区生成shard  
- DEMO:
```
    - IMPORT FOREIGN SCHEMA remote_schema
    - [ { LIMIT TO | EXCEPT } ( table_name [, ...] ) ]
    - table_name 支持子分区.
```
支持truncate外部表,   
- 场景: sharding 分库分表  
- 价值: 支持更丰富的语法, truncate清理远程不产生redo, 更快  
- DEMO:
```
    - truncate 外部表;
```
支持会话级持久化foreign server连接   
- 场景: sharding 分库分表  
- 价值: 提高sharding场景的OLTP性能 (以往的版本每一个远程事务都需要重新创建一次远程库连接, 无法支持oltp高频小事务)  
5、分区表性能趋近完美  
分区裁剪能力提升减少子分区subplan和重复的cached plans,   
- 场景: 大数据量, 使用了分区表, 分区表高频操作, OLTP类业务场景  
- 价值: 减少内存使用, 同时大幅提升涉及少量分区的SQL性能  
增减分区时使用alter table detach|attach PARTITION concurrently模式完全避免锁冲突,   
- 场景: 核心在线业务  
- 价值: 绑定和解绑分区支持无锁操作, 消除加减分区对在线业务的影响.   
- DEMO:
```
    - ALTER TABLE [ IF EXISTS ] name
    - DETACH PARTITION partition_name [ CONCURRENTLY | FINALIZE ]
```
6、窗口函数性能提升, 支持增量sort, 提升带窗口查询的场景的排序性能  
- 场景: 分析场景  
- 价值: 提高窗口查询排序性能  
- DEMO:
```
+-- Test incremental sorting    
+EXPLAIN (COSTS OFF)    
+SELECT * FROM    
+  (SELECT depname,    
+          empno,    
+          salary,    
+          enroll_date,    
+          row_number() OVER (PARTITION BY depname ORDER BY enroll_date) AS first_emp,    
+          row_number() OVER (PARTITION BY depname ORDER BY enroll_date DESC) AS last_emp    
+   FROM empsalary) emp    
+WHERE first_emp = 1 OR last_emp = 1;    
+                                    QUERY PLAN                                         
+-----------------------------------------------------------------------------------    
+ Subquery Scan on emp    
+   Filter: ((emp.first_emp = 1) OR (emp.last_emp = 1))    
+   ->  WindowAgg    
+         ->  Incremental Sort    
+               Sort Key: empsalary.depname, empsalary.enroll_date    
+               Presorted Key: empsalary.depname    
+               ->  WindowAgg    
+                     ->  Sort    
+                           Sort Key: empsalary.depname, empsalary.enroll_date DESC    
+                           ->  Seq Scan on empsalary    
+(10 rows) 
```
7、自定义扩展统计信息增强, 支持多个表达式为组合的扩展柱状图信息收集, 提升以表达式为组合过滤条件的选则性评估精度  
- 场景: SaaS业务, 带有复杂条件SQL的业务, 很多表达式的过滤条件  
- 价值: 解决很多表达式作为过滤组合条件的SQL的数据选择性评估精度, 提高SQL优化器的执行计划生成效果  
- DEMO:
```
CREATE STATISTICS [ IF NOT EXISTS ] statistics_name
    ON ( expression )
    FROM table_name
CREATE STATISTICS [ IF NOT EXISTS ] statistics_name
    [ ( statistics_kind [, ... ] ) ]
    ON { column_name | ( expression ) }, { column_name | ( expression ) } [, ...]
    FROM table_name
URL: https://www.postgresql.org/docs/14/sql-createstatistics.html
```
8、支持 multiple extended statistics , 增强or, and多条件的选择性评估精度  
- 场景: SaaS业务, 带有复杂条件SQL的业务  
- 价值: 解决很多and , or的where过滤组合条件的SQL的数据选择性评估精度, 提高SQL优化器的执行计划生成效果  
9、大表 search IN ( consts ) 优化, 支持 linear search TO hash table probe (当 in里面的consts 个数>= 9个时)  
- 场景: SaaS业务, 电商, 社交等业务, IN的输入条件很多, 导致in过滤慢  
- 价值: 提高IN语句的处理性能, 在条件多、被过滤掉的数据量大的SQL中性能提升非常明显  
- DEMO:
```
select x from tbl where id in (1,2,3,4,5,6,7,8,9); 
```
10、TOAST 支持 lz4 压缩算法   
- 场景: 通用业务  
- 价值: 提高压缩性能  
- DEMO:
```
   2 -- test creating table with compression method    
   3 CREATE TABLE cmdata(f1 text COMPRESSION pglz);    
   4 CREATE INDEX idx ON cmdata(f1);    
   5 INSERT INTO cmdata VALUES(repeat('1234567890', 1000));    
   6 \d+ cmdata    
   7                                         Table "public.cmdata"    
   8  Column | Type | Collation | Nullable | Default | Storage  | Compression | Stats target | Description     
   9 --------+------+-----------+----------+---------+----------+-------------+--------------+-------------    
  10  f1     | text |           |          |         | extended | pglz        |              |     
  11 Indexes:    