    export var seven = 7;
    export var seven = 7;
This is ~~valid~~ _invalid_, and TS doesn't error on it.
    export var seven = 7;
    export var seven = 8;
This is _invalid_ , and TS doesn't error on it.
The spec:
>   1. For each ExportEntry Record e in module.[[StarExportEntries]], do
>     1. Let importedModule be HostResolveImportedModule(module,
> e.[[ModuleRequest]]).
>     2. ReturnIfAbrupt(importedModule).
>     3. Let resolution be importedModule.ResolveExport(exportName,
> resolveSet, exportStarSet).
>     4. ReturnIfAbrupt(resolution).
>     5. If resolution is "ambiguous", return "ambiguous".
>     6. If resolution is not null, then
>       1. If starResolution is null, let starResolution be resolution.
>       2. Else
>         1. Assert: there is more than one * import that includes the
> requested name.
>         2. If resolution.[[module]] and starResolution.[[module]] are not
> the same Module Record or SameValue(resolution.[[exportName]],
> starResolution.[[exportName]]) is false, return "ambiguous".
>
~~A module is free to export the same value (as in the same value spec
function) multiple times, but exporting different values under the same
identifier should be a syntax error.~~ This should also be an error:
    export var state = {};
    export var state = {};
Because unique objects do not pass the `SameValue()` test. (It is not
currently reported as an error.)
~~Given that we don't want to attempt to evaluate RHS expressions to resolve
the same value functions, we're pretty much stuck using type information to
infer the same thing. Or we could just forbid the re-declaration of exports,
given that since you're forced the reexport the exact same value or error,
there's no _real_ value in doing so.~~
And perhaps the more relevant part of the spec that I found:
> 15.2.1.1 Static Semantics: Early Errors  
>  It is a Syntax Error if the ExportedNames of ModuleItemList contains any
> duplicate entries.
We do forbid multiple default exports already, but don't check other names if
the types match for some reason?