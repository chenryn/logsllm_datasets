# 六、Windows 容器
在本章中，我们将讨论并了解 Windows 容器。微软已经将容器作为在新硬件上部署旧应用的一种方式。与 Linux 容器不同，Windows 容器仅在基于 Windows 的 Docker 主机上可用。
在本章中，我们将涵盖以下主题:
*   Windows 容器简介
*   为窗口容器设置 Docker 主机
*   运行 Windows 容器
*   窗口容器文件
*   Windows 容器和 Docker 编写
# 技术要求
根据前面的章节，我们将继续使用本地 Docker 安装。同样，本章中的截图将来自我首选的操作系统——macOS——是的，即使我们将运行 Windows 容器，您仍然可以使用您的 macOS 客户端。稍后会有更多。
到目前为止，我们将运行的 Docker 命令将在安装了 Docker 的所有三个操作系统上运行。然而，在本章中，我们将启动的容器将只在 Windows Docker 主机上工作。我们将在基于 macOS 和 Linux 的机器上使用 VirtualBox 和 host 来帮助启动和运行一个 Windows Docker 主机。
本章所用代码的完整副本可在[https://github . com/PacktPublishing/Mastering-Docker-第三版/tree/master/chapter06/](https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter06/) 上找到。
查看以下视频，了解《行为准则》:
[http://bit.ly/2PfjuSR](http://bit.ly/2PfjuSR)
# Windows 容器简介
在过去的 20 年里，我几乎每天都在使用苹果电脑、Linux 电脑和笔记本电脑以及 Linux 服务器，再加上我运行微软视窗的唯一经验是我拥有的视窗 XP 和视窗 10 游戏电脑，以及我在工作中无法避免的奇怪的视窗服务器，视窗容器的出现是一个有趣的发展。
现在，我永远不会把自己归类为一个 Linux/UNIX 爱好者。然而，微软过去几年的行为甚至让我感到惊讶。早在 2014 年，在 Azure 的一次活动中，微软就宣称“微软![](img/ef26c732-b5bc-41ad-a5e7-e32524861a68.png) Linux”，此后就再也没有回头:
*   Linux 是微软 Azure 的一等公民
*   。NET Core 是跨平台的，这意味着您可以运行您的。基于 Linux 和 Windows 的. NET 应用
*   SQL Server 现已在 Linux 上可用
*   可以在 Windows 10 Professional 机器上运行 Linux shells，比如 Ubuntu
*   PowerShell 已经移植到了 Linux 上
*   它开发了跨平台的工具，如 Visual Studio Code，并开源了它们
*   它正以 75 亿美元收购 GitHub！！
很明显，过去的微软已经不复存在了，前首席执行官史蒂夫·鲍尔默(Steve Ballmer)曾因称开源社区和 Linux 社区为不适合在这里重复的东西而对它们进行了著名的抨击。
因此，2014 年 10 月，在微软公开宣布热爱 Linux 的几个月后，Docker 和微软合作推动基于 Windows 的操作系统(如 Windows 10 Professional 和 Windows Server 2016)采用容器的消息并没有让任何人感到惊讶。
那么什么是 Windows 容器呢？
嗯，从表面上看，它们与 Linux 容器没有什么不同。微软在 Windows 内核上的工作引入了与 Linux 相同的进程隔离。此外，像 Linux 容器一样，这种隔离扩展到沙盒文件系统甚至 Windows 注册表。
由于每个容器实际上都是一个全新的 Windows Core 或 Windows Nano，它们反过来又是经过裁剪的 Windows 服务器映像(想想 Alpine Linux，但对于 Windows 来说)，安装管理员可以在同一台主机上运行多个 Dockerized 应用，而不必担心任何自定义注册表更改或需求冲突并导致问题。
再加上 Docker 命令行客户端提供的易用性，管理员可以将他们的传统应用迁移到更现代的硬件和主机操作系统，而不必担心和管理运行旧的不受支持的 Windows 版本的多个虚拟机。
Windows 容器还提供了另一层隔离。当容器启动时，Hyper-V 隔离在最小的虚拟机管理程序中运行容器进程。这进一步将容器进程与主机隔离开来。但是，使用 Hyper-V 隔离运行的每个容器都需要少量的额外资源，同时这些容器的启动时间也会增加，因为需要先启动虚拟机管理程序，然后才能启动容器。
虽然 Hyper-V 隔离确实使用了微软的虚拟机管理程序，这可以在 Windows 服务器和桌面版本以及 Xbox One 系统软件中找到，但您不能使用标准的 Hyper-V 管理工具来管理 Hyper-V 隔离容器。你必须使用 Docker。
在微软不得不在 Windows 内核中启用容器的所有工作和努力之后，他们为什么选择 Docker 而不仅仅是创建他们的管理工具呢？
Docker 已经通过一套成熟的 API 和一个大型社区，成为管理容器的首选工具。此外，它是开源的，这意味着微软不仅可以将其应用于视窗系统，还可以为其发展做出贡献。
下图概述了 Docker 在 Windows 上的工作方式:
![](img/0021ddf3-befc-4ebf-ab5a-f0d066aa5463.png)
注意我说的是 Windows 上的 Docker，不是 Windows 的 Docker；它们是非常不同的产品。Windows 上的 Docker 是 Docker 引擎和客户端的原生版本，它与 Windows 内核交互以提供 Windows 容器。对于开发人员来说，在桌面上运行 Linux 和 Windows 容器是一种尽可能原生的体验。
# 为窗口容器设置 Docker 主机
正如您可能已经猜到的，您将需要访问运行 Docker 的 Windows 主机。如果您没有运行 Windows 10 Professional 机器，不要太担心——在 macOS 和 Linux 上，您可以通过多种方式实现这一点。在我们讨论这些之前，让我们来看看如何在 Windows 10 Professional 上使用 Docker 来运行 Windows 容器。
# Windows 10 专业版
**Windows 10 专业版**支持 Windows 容器开箱即用。但是，默认情况下，它被配置为运行 Linux 容器。要从运行 Linux 的容器切换到 Windows 容器，右键单击系统托盘中的 Docker 图标，然后选择**切换到 Windows 容器...**从菜单中:
![](img/fe51cd8e-9f4c-455d-b29e-35619f7b1e3f.png)
这将显示以下提示:
![](img/e278b88e-0e03-4cb2-b98b-40babb3dce46.png)
点击**开关**按钮，几秒钟后，您将开始管理 Windows 容器。您可以通过打开提示并运行以下命令来看到这一点:
```
$ docker version
```
这可以从以下输出中看出:
![](img/12ba843c-1fe8-4489-b1de-4469687e8470.png)
Docker Engine 有一个`windows/amd64`的`OS/Arch`，而不是我们一直习惯看到的`linux/amd64`。所以这涵盖了视窗 10 专业版。但是像我这样更喜欢 macOS 和 Linux 的人呢？
# macOS 和 Linux
为了访问 macOS 和 Linux 机器上的 Windows 容器，我们将使用斯特凡·舍雷尔提供的优秀资源。在本书附带的存储库的`chapter06`文件夹中，有一个分叉版本的 Stefan 的 Windows–`docker-machine repo`，其中包含了在 macOS 上使用 Windows 容器启动和运行所需的所有文件。
在我们开始之前，您将需要以下工具——哈希公司的游民和甲骨文的 Virtualbox。您可以从以下网站下载:
*   [https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)
*   [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)
下载安装后，打开终端，进入`chapter06/docker-machine`存储库文件夹，运行以下命令:
```
$ vagrant up --provider virtualbox 2016-box
```
这将下载一个 VirtualBox Windows Server 2016 核心评估映像，其中包含让您使用 Windows 容器启动和运行所需的一切。下载量刚刚超过 10 GB，因此请确保您有运行映像所需的带宽和磁盘空间。
游民将启动映像，在虚拟机上配置 Docker，并将本地 Docker 客户端与主机交互所需的证书文件复制到您的机器上。要切换到使用新启动的 Docker Windows 主机，只需运行以下命令:
```
$ eval $(docker-machine env 2016-box)
```
我们将在下一章中更详细地讨论 Docker Machine。但是，前面的命令所做的是重新配置您的本地 Docker 客户端来与 Docker Windows 主机对话。您可以通过运行以下命令看到这一点:
```
$ docker version
```
如果您没有跟进，您可以看到下面的预期输出:
![](img/064755f6-ee49-4fe6-b71b-0973b323a80f.png)
正如你所看到的，我们现在连接到一个运行在`windows/amd64`上的 Docker 引擎。要切换回来，您可以重新启动终端会话或运行以下命令:
```
$ eval $(docker-machine env -unset)
```
完成 Docker Windows 主机后，您可以运行以下命令来停止它:
```
$ vagrant halt
```
或者，要完全删除它，请运行以下命令:
```
$ vagrant destroy
```
上述命令必须从`chapter06/docker-machine`存储库文件夹中运行。
# 运行 Windows 容器
正如本章第一部分已经暗示的那样，使用 Docker 命令行客户端启动 Windows 容器并与之交互与我们到目前为止运行的没有什么不同。让我们通过运行`hello-world`容器来测试这一点:
```
$ docker container run hello-world
```
就像之前一样，这会下载`hello-world`容器并返回一条消息:
![](img/b1f3e83b-2a2f-4089-b125-d13066170b11.png)
这种情况下唯一的区别是，Docker 拉的不是 Linux 映像，而是基于`nanoserver-sac2016`映像的`windows-amd64`版本的映像。
现在，让我们看一下在前台运行一个容器，这次运行 PowerShell:
```
$ docker container run -it microsoft/windowsservercore powershell
```
一旦您的 shell 处于活动状态，运行以下命令将为您提供计算机名，即容器标识:
```
$ Get-CimInstance -ClassName Win32_Desktop -ComputerName . 
```
您可以在下面的终端输出中看到上面命令的完整输出:
![](img/9dce60a5-07b2-411d-9cae-7eb02d587ff7.png)
运行`exit`退出 PowerShell 后，可以通过运行以下命令查看容器标识:
```