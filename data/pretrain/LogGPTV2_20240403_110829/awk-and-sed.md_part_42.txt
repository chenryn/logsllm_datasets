调用它本身找到字符串中的其他出现
len，#参数
行的错误拼写
第十二章
综合应用
---
## Page 302
#如果用户输入校正，确认
#回车则跳过
getline newspelling " $0 
#将改变的行插入要显示的数组
if (madechg) ++changes
$0 = stringToChange
len += RSTART + RLENGTH 
if (madechg)
elsei
Two other utlitities that are found on the UNlX system
QQ群：
50192241
322
因为有必要改变这行以便显示。如果这
第十二章 
综合应用
---
## Page 305
每行的全局修改。
成。这个函数和 make_change（）函数类似，但是更简单，因为我们可以实现对
如果一个用户决定做“全局修改”，
改了拼错单词后的完整结果。
程循环访问这个数组并显示所有被修改的行。然后调用函数confirm_changes 
重新合并在一起）被赋给数组的一个元素。当读取文档中的所有行之后，主过
如果函数 sub（）执行成功，变量 madechg 将得到一个值。$O（两个部分已经
函数 make_change（）还用于将被改变的行收集到一个数组中。
来提取子串并在最后将两个部分重新组合在一起。
第一个参数是要修改的字符串，当从主过程中调用时，它初始为$O，但以后各
不提取余下的部分中拼错的单词。而且我们不得不提取下一个出现的单词，
果没有确认。将给用户另外一个机会输入正确的单词。
到8个字符长）。
（）询问是否保存这些修改。
次
包
为
调
同
为
不
行
记住，
容
宗
都是$O余下的部分。
含这行的其他所有的字符。然后它调用自己来提取第二部分中的拼错的单
一个行上查找名
了完成这些功能，
管第一次出现的单词是否被修改。
容并请求确认。如果确认是正确的单词，则调用 sub（）函数来进行修改。如
两部分一
用时，
显示出这行后，
 changedLines[changes] = ">" $0 
if (madechg)
#将被改变的行放入数组中以便显示
make_change (part2, len)
）中（）s
它查
第
笃一个部分包含到第一次出现的单词末尾的所有字符，第二部夕
QQ群：
符
合条件的其他单词。换句话说，当 make_change（）第一次被
函数提示用户输入正确的单词。然后接着显示用户输入的内
，将函数make_change （设计成递归函数，它调用自己以在
，第二个参数的len或第一部分的长度，我们可以利用它
50192241
。它将用临时输出文件覆盖临时输入文件，保持修
323
第十二章
综合应用
份
而
---
## Page 306
#打印每个被改变的行
#如果找到匹配，利用 gsub 进行改变
while( (getline  0) {
#打开文件，
if (OKmakechange ~ /[yy] (es)?/ ） {
# 测试响应并生成改变
printf ("Globally change %s to %s? (y/n) :", misspelling,
while (newspelling && ! OKmakechange)
#如果回答一个问答，确认
#回车则跳过
getline newspelling  spellout 
print ">"， $0 
madechg = gsub (misspelling, newspelling)
QQ群：
50192241
325
第十二章 
综合应用
---
## Page 308
设计这个函数的原因是为了放置代码重复。它的目的就是当用文档文件的新版
函数调用，用来对这两个函数产生的修改进行确认。
对它们确认。当所有的行被读取后，
使用函数 gsub（）实现修改。主要区别是所有的修改一次完成，没有提示用户
这个函数提示用户输入正确的单词。设置while循环用于读取文档的所有行并
system("mv " spellout "" spellsource)
#如果确认，mv 输出到输入
printf ("Save changes? (y/n)")
while (! savechanges ）
#提示确认保存更改
function confirm_changes( savechanges) {
#在保存更改之前确认
# confirm_changes --
” #函数 make_global_change ()结束
if (savechanges ~ /[yY] (es)?/)
}#提示用户校正的while 循环结束
QQ群：
50192241
326
函数显示已经修改的行并在保存它们之前
第十二章
综合应用
---
## Page 309
注1：
. XS
下面的宏来生成索引。
格式化索引。
·处理索引条目，对它们进行分类，对知识页码不同的条目进行组合，然后准备
·格式化文档，用页码生成索引条目。
·对文档中的索引条目进行编码。
生成一个索引的操作一般包括3步：
生成格式化索引
的功能。Spellcheck.awk 的完整列表可以在附录三“第十二章的补充”中找
如何引用变量。Awk 的现代版本提供了可代替的 shell执行命令及与用户连接
awk 中完成时，
工作由 awk 编程语言完成，包括执行 10 个UNIX 命令。我们在 awk 中利用一致
这个拼写检查器的一个有趣的特点是这个 shel脚本非常简短（注1）。
以在 awk 中使用了。
这个程序设置了一个 shell变量 AWKLIB，用于指定 spellcheck.awk 脚本的位
说可以快3倍）。它包含下面的程序行。
为了使调用以上的 awk 脚本更容易，
Spellcheck的 shelI脚本
8
X
宏
N
（如 FrameMaker）
无
置
、直观。我们将描述如何用troff 来生成和本书的索引相类似的索引。我们用
论是使用troff，
。符号“$*”将扩展跟在脚本名后的所有命令行参数。这样，这些参数就可
 nawk -f $AWKLIB/spellcheck.awk $*
 AWKLIB=/usr/local/awklib 
UNIX 的文字处理（Dougherty and O’Reilly， Howard W. Sams,
这两个版本比较是很有趣的.
1987)给出一个基于 sed 的拼写检查器。它主要是基于 shell的。将
生成页码范围的终止位置
生成页码范围的开始位置
创建以粗体表示的页条目，以突出时主引用
创建“see”或“see also”交叉引用
生成普通的索引条目
1_描述_
可能会引起混淆。例如,你必须注意if条件在语法上的区别和
QQ群：
，处理起来都非常相似，尽管使用后者处理步骤允许没有那
或者其他编码批格式处理器，
50192241
- 327-
，我们创建了 spellcheck 的 shell脚本（据
或者 WYSIWYG 格式处理器
第十二章
综合应用
，所有
---
## Page 310
当文档用troff 处理时，将产生下面的索引条目：
编目原则的相关信息。只有“查看”
这里的“see”条目知识人们查找另一个索引条目。而“see also”也常用于当
最后，有两种类型的交叉引用：
最复杂的条目包括3个关键字
下面两个给出了次关键字：
这里有一个只有主关键字的记录：
码总是和最后一个关键字相关。
没有用冒号可以将第一个逗号解释为分隔符。分号表示存在第三个关键字。页
三关键字。
这些宏需要一个用引号括住的变量，他可以有几个形式，表示为主，次，或第
利用冒号作为主关键字和次关键字的分隔符。
XView: reserved names 43
XView,
XView
. XX "xView: objects; hierarchy of"
XX "XView: objects; list"
.XX "XView, packages"
 XX "xView: reserved names'
. XX "XView"
“pr imary 
 packages 43
42
QQ群：
在这个例子中，
50192241
328.
项目没有相关的页码。
，为了支持早期的编码习惯，如果
第十二章
但在另一个名字下面有
综合应用
---
## Page 311
识的。如果我们选择用罗马数字来标识卷，那么上面的条目将被修改为：
面增加一个罗马数字或缩写。每个文件包含一本书的条目而这些条目是唯一标
立一个主索引，
如果对一本书的索引条目进行处理，
·格式化索引以便显示在屏幕上或打印。
·合并有相同主关键字和/或子关键字的条目。
·合并只有页码不同的条目。
·按关键字和页码对索引排序。
要完成这些功能，
条目被按下面的方式组合：
以分成3个部分。当索引程序处理这些条目且对输出进行格式化时，“Xview”
这些条目被作为索引程序的输入。
·寻找连续的页码并组合为一个范围。
xView: objects; list of 43:1
XView: reserved names 43:1
XView 42:1
 reserved names,
packages, 
list of， 43 
objects; hierarchy of, 44;
XView, 42
mh mailer: (see also xmh mailer) 46
error recovery: (See error handling)
XView, packages 45 
XView: objects; hierarchy of 44
xView: objects; list of 43
即一套书的总索引。
，43,45
QQ群：
索引程序必须：
.43
50192241
每个条目分成两个部分，第一部分的关键字还可