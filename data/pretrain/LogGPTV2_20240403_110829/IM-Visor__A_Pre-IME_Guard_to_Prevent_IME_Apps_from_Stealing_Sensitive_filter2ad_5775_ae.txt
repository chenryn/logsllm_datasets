To implement secure password entry, ScreenPass [25]
designs a trusted software keyboard to enter the password. The
use of trusted keyboard in ScreenPass is guaranteed by using
the Optical Character Recognition (OCR), but the OCR itself
can be cracked by attackers, so the security of ScreenPass
cannot be guaranteed. What’s more, using a new keyboard
instead of the original keyboard will inevitably harm the user
experience and the likelihood the user will adopt the new
keyboard cannot be guaranteed. In contrast, IM-Visor adopts
TrustZone to provide secure isolation, so the security of IM-
Visor can be guaranteed. Also IM-Visor reuses the original UI
of an IME soft keyboard.
For password and other privacy data protection, researchers
have also tried other solutions. Taint-tracking [21] is a com-
monly used method. Taint-tracking tracks the sensitive infor-
mation ﬂow in the target app and sets appropriate strategies to
prevent the outﬂow and abuse of sensitive data. TaintDroid [16]
is the ﬁrst taint-tracking method used in Android and it tracks
the ﬂow of sensitive data by tagging these data. ScreenPass
[25] also uses taint-tracking to monitor the password ﬂow to
prevent illegal outﬂow. SpanDex [13] tracks how password
information ﬂows in an app, and compared to the previous
work, SpanDex focuses on the implicit information ﬂow in
apps. Although the taint-tracking method can get detailed
information about sensitive data circulation,
it is not very
suitable for tracking sensitive keystroke leakage. IME apps
usually use native code in their key function such as the send
of sensitive inputs, but taint-tracking cannot track the data ﬂow
in native code. Regulating ARM [11] thwarts the sensitive
information leakage through misused sensors or peripherals
on smart personal devices. It replaces the original peripheral
drivers by a remote update when a user enters restricted spaces
such as a federal building, and doesn’t cancel the enforcement
of usage policies until the user checks out. App Guardian [34]
thwarts the runtime-information-gathering of malicious apps
by blocking the runtime monitoring attempt. To realize this,
App Guardian pauses the malicious app when sensitive app is
running. In contrast, IM-Visor will not pause the normal run of
malicious IME apps which results in little impact on Android
system. Screenmilker [24] constructs an app which exploits
the malicious use of the Android ADB capabilities to monitor
the screen and pick up a user’s password when he or she is
typing. Then it presents a mitigation mechanism that controls
the exposure of the ADB capabilities only to authorized apps.
While IM-Visor and Screenmilker both aim to protect the
sensitive keystrokes,
there are substantial differences: The
threat in Screenmilker is caused by the ﬂaws of the Android
permission system, whereas IM-Visor regards IME apps as
the threat. The complicated construction of the attacks in
Screenmilker makes the attacks difﬁcult to apply widely, while
the attacks in IM-Visor commonly exist and can be built using
repackaging.
In recent years, TrustZone has obtained lots of research and
application in many aspects. Some researchers aim to improve
the security and usability of TrustZone. SecReT [20] mainly
solves the establishment of secure communication between
the Rich Execution Environment (REE) and Trust Execution
Environment (TEE). ICE [33] runs the secure code in the non-
secure domain by designing isolated secure environment to
restrict the code size of TEE environment.
Besides the above ones, more researchers aim to apply
TrustZone to protect the sensitive kernel operations and sen-
sitive service. Hypervision [9] uses TrustZone to reinforce the
Linux kernel by replacing sensitive instructions in Linux kernel
and controlling access to sensitive kernel data. TrustOTP [31]
uses TrustZone to protect the full process from generation
to use for one-time key. TrustDump [32] is a TrustZone-
based memory acquisition mechanism to detect and prevent
the newest malware, and the isolation between the OS and
the memory acquisition tool is achieved by TrustZone. These
solutions focus on the underlying system especially the kernel,
and they have little relation to the Android frameworks. In
contrast, IM-Visor does much modiﬁcation on the Android
framework besides the kernel. AdAttester [23] uses TrustZone
to secure online mobile Ad attestation, leveraging the secure
world of TrustZone to implement unforgeable clicks and
veriﬁable display. [26] uses TrustZone to ensure the trusted
execution environment for the payment process. Similar to the
two solutions, IM-Visor aims to protect one certain functional
service in Android, but IM-Visor is more comprehensive as
the trustlet in IM-Visor needs to complete some functional
operation and needs more interaction with Android framework
while the trustlet in other two solutions mainly complete the
operation such as signature and encryption.
IX. CONCLUSION
In this paper, we discuss the insecurity of IME apps, includ-
ing the Potentially Harmful Apps (PHAs) and malicious IME
apps. We provide a deeper understanding that all the designs
with the post-IME nature are subject to the preﬁx-substitution
and colluding attacks. To remedy the above post-IME system
ﬂaws, we propose a new idea, pre-IME, which guarantees that
“Is this touch event a sensitive keystroke?” analysis will always
access user touch events prior to the execution of any IME app
code, and designed an innovative TrustZone-based framework
named IM-Visor which has the pre-IME nature. A prototype of
IM-Visor has been implemented and tested with several most
popular IMEs. The experimental results show that IM-Visor
has small runtime overheads.
ACKNOWLEDGMENT
We would like to thank the anonymous reviewers for their
valuable comments and suggestions. Yazhe Wang’s work was
supported by Youth Innovation Promotion Association of CAS
155
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
and Strategic Priority Research Program of CAS under Grant
No.XDA06040502. Peng Liu was supported by NSF SBE-
1422215, NSF CNS-1422594, and NSF CNS-1505664.
REFERENCES
[1] Bigdata-research. market research report on china’s third party ime
market on smart phone in the third quarter of 2016.
http://www.
bigdata-research.cn/content/201611/365.html. Accessed on November
2016.
[19]
[20]
Jianjun Huang, Zhichun Li, Xusheng Xiao, Zhenyu Wu, Kangjie Lu,
Xiangyu Zhang, and Guofei Jiang. Supor: Precise and scalable sensitive
user input detection for android apps.
In 24th USENIX Security
Symposium (USENIX Security 15), pages 977–992, 2015.
Jinsoo Jang, Sunjune Kong, Minsu Kim, Daegyeong Kim, and Bren-
t Byunghoon Kang. Secret: Secure channel between rich execution
environment and trusted execution environment.
In Network and
Distributed System Security Symposium, 2015.
[21] Min Gyung Kang, Stephen Mccamant, Pongsin Poosankam, and Dawn
Song. Dta++: Dynamic taint analysis with targeted control-ﬂow propa-
gation. In Network and Distributed System Security Symposium, NDSS
2011, San Diego, California, Usa, February - February, 2011.
[2] Caffeinemark 3.0. http://www.benchmarkhq.ru/cm30/info.html. Ac-
cessed on November 2016.
random common sentences. http://www.englishinuse.net/. Accessed on
August 2016.
[3]
[4] The
reference
of
android
developer.
inputmethodmanger.
https://developer.android.com/reference/android/view/inputmethod/
InputMethodManager.html. Accessed on November 2016.
[5] Trustzone,
tee
and
trusted
video
path
implementation.
http://www.arm.com/ﬁles/event/Developer Track 6 TrustZone
TEEs and Trusted Video Path implementation considerations.pdf.
Accessed on November 2016.
[6] Alfred V Aho and Margaret J Corasick. Efﬁcient string matching: an aid
to bibliographic search. Communications of the ACM, 18(6):333–340,
1975.
[7] Devdatta Akhawe, Warren He, Zhiwei Li, Reza Moazzezi, and Dawn
Song. Clickjacking revisited: A perceptual view of ui security. 2014.
[8] Adam J. Aviv, Benjamin Sapp, Matt Blaze, and Jonathan M. Smith.
Practicality of accelerometer side channels on smartphones. In Com-
puter Security Applications Conference, pages 41–50, 2012.
[9] Ahmed M. Azab, Peng Ning, Jitesh Shah, Quan Chen, Rohan Bhutkar,
Guruprasad Ganesh, Jia Ma, and Wenbo Shen. Hypervision across
worlds: Real-time kernel protection from the arm trustzone secure
world. In ACM Sigsac Conference on Computer and Communications
Security, pages 1028–1031, 2014.
[10] Antonio Bianchi, Jacopo Corbetta, Luca Invernizzi, Yanick Fratantonio,
Christopher Kruegel, and Giovanni Vigna. What
the app is that?
deception and countermeasures in the android user interface. pages
931–948, 2015.
[11] Ferdinand Brasser, Daeyoung Kim, Christopher Liebchen, Vinod Gana-
pathy, Liviu Iftode, and Ahmad-Reza Sadeghi. Regulating arm trustzone
devices in restricted spaces. In Proceedings of the 14th Annual Interna-
tional Conference on Mobile Systems, Applications, and Services, pages
413–425. ACM, 2016.
Jin Chen, Haibo Chen, Erick Bauman, Zhiqiang Lin, Binyu Zang, and
Haibing Guan. You shouldn’t collect my secrets: thwarting sensitive
keystroke leakage in mobile ime apps. In Usenix Conference on Security
Symposium, 2015.
[12]
[13] Landon P. Cox, Peter Gilbert, Geoffrey Lawler, Valentin Pistol, Ali
Razeen, Bi Wu, and Sai Cheemalapati. Spandex: Secure password
tracking for android. 2014.
[14] Android Developer.
Inputconnection. https://developer.android.com/
reference/android/view/inputmethod/InputConnection.html/.
[15] Android Developer. Windowmanager. https://developer.android.com/
reference/android/view/WindowManager.html/.
[16] William Enck, Peter Gilbert, Byung Gon Chun, Landon P. Cox, Jaeyeon
Jung, Patrick Mcdaniel, and Anmol N. Sheth. Taintdroid: an information
ﬂow tracking system for real-time privacy monitoring on smartphones.
In Usenix Conference on Operating Systems Design & Implementation,
pages 393–407, 2015.
escalation using ob-
Jann Horn.
jectinputstream.
https://www.reddit.com/r/netsec/comments/2mr9cz/
cve20147911 android 50 privilege escalation using/. Accessed on
Novvember 2014.
Cve-2014-7911: Privilege
[17]
[22] K.Subramanyam,
The
Key-
securi-
http://www.keylogger.org/articles/kishoresubramanyam/
loggers:
ty.
keyloggers-the-overlooked-threat-to-computersecurity-7.html./.
C.E.Frank,
overlooked
and
threat
D.F.Galli.
to
computer
[23] Wenhao Li, Haibo Li, Haibo Chen, and Yubin Xia. Adattester:
Secure online mobile advertisement attestation using trustzone.
In
The International Conference on Mobile Systems, Applications, and
Services, pages 15–26, 2015.
[24] Chia-Chi Lin, Hongyang Li, Xiao-yong Zhou, and XiaoFeng Wang.
Screenmilker: How to milk your android screen for secrets. In NDSS,
2014.
[25] Dongtao Liu, Eduardo Cuervo, Valentin Pistol, Ryan Scudellari, and
Landon P. Cox. Screenpass: secure password entry on touchscreen
devices.
In Proceeding of the International Conference on Mobile
Systems, Applications, and Services, pages 291–304, 2013.
[26] Claudio Marforio, Nikolaos Karapanos, Claudio Soriente, Kari Kosti-
ainen, and Srdjan apkun. Smartphones as practical and secure location
veriﬁcation tokens for payments. In Network and Distributed System
Security Symposium, 2014.
[27] Ani Nahapetian. Side-channel attacks on mobile and wearable systems.
In IEEE Consumer Communications & NETWORKING Conference,
2016.
[28] Chuangang Ren, Yulong Zhang, Hui Xue, Tao Wei, and Peng Liu.
In
Towards discovering and understanding task hijacking in android.
Usenix Conference on Security Symposium, 2015.
[29] Yuru Shao, Jason Ott, Qi Alfred Chen, Zhiyun Qian, and Z Morley
Mao. Kratos: Discovering inconsistent security policy enforcement in
the android framework. In Proc. 23rd Annual Network and Distributed
System Security Symposium (NDSS16). ISOC, 2016.
[30] Guillermo Suarez-Tangil, Juan E. Tapiador, Pedro Peris-Lopez, and
Arturo Ribagorda. Evolution, detection and analysis of malware for
smart devices. IEEE Communications Surveys & Tutorials, 16(2):961–
987, 2013.
[31] He Sun, Kun Sun, Yuewu Wang, and Jiwu Jing. Trustotp: Transforming
smartphones into secure one-time password tokens.
In ACM Sigsac
Conference on Computer and Communications Security, pages 976–
988, 2015.
[32] He Sun, Kun Sun, Yuewu Wang, Jiwu Jing, and Sushil Jajodia.
TrustDump: Reliable Memory Acquisition on Smartphones. 2014.
[33] He Sun, Kun Sun, Yuewu Wang, Jiwu Jing, and Haining Wang.
Trustice: Hardware-assisted isolated computing environments on mobile
devices. In Ieee/iﬁp International Conference on Dependable Systems
and Networks, pages 367–378, 2015.
[34] Nan Zhang, Kan Yuan, Muhammad Naveed, Xiaoyong Zhou, and
XiaoFeng Wang. Leave me alone: App-level protection against runtime
information gathering on android. In 2015 IEEE Symposium on Security
and Privacy, pages 915–930. IEEE, 2015.
[35] Yajin Zhou and Xuxian Jiang. Dissecting android malware: Charac-
terization and evolution. In IEEE Symposium on Security & Privacy,
pages 95–109, 2012.
[36] Zongwei Zhou, Virgil D Gligor, James Newsome, and Jonathan M
McCune. Building veriﬁable trusted path on commodity x86 computers.
In 2012 IEEE Symposium on Security and Privacy, pages 616–630.
IEEE, 2012.
[18] Heqing Huang, Sencun Zhu, Kai Chen, and Peng Liu. From system
services freezing to system server shutdown in android: All you need
is a loop in an app. In The ACM Sigsac Conference, pages 1236–1247,
2015.
156
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply.