### Secure Password Entry and Privacy Data Protection

To ensure secure password entry, ScreenPass [25] introduces a trusted software keyboard. The integrity of this trusted keyboard is verified using Optical Character Recognition (OCR). However, OCR can be compromised by attackers, thus undermining the security of ScreenPass. Additionally, replacing the default keyboard with a new one may negatively impact user experience, and there is no guarantee that users will adopt the new keyboard. In contrast, IM-Visor leverages TrustZone to provide secure isolation, ensuring its security. Furthermore, IM-Visor reuses the original UI of the soft keyboard, maintaining a familiar user experience.

### Taint-Tracking and Other Solutions

For protecting passwords and other sensitive data, researchers have explored various methods. Taint-tracking [21] is a widely used technique that monitors the flow of sensitive information within an application and implements strategies to prevent unauthorized data leakage. TaintDroid [16] was the first taint-tracking method for Android, which tags sensitive data to track its flow. ScreenPass [25] also employs taint-tracking to monitor and secure password flows. SpanDex [13] focuses on tracking implicit information flows in applications, providing a more detailed view of data circulation. Despite its effectiveness, taint-tracking is not ideal for monitoring keystroke leaks, as it cannot track data flow in native code, which is often used in critical functions like sending sensitive inputs.

Regulating ARM [11] prevents sensitive information leaks through misused sensors or peripherals by updating peripheral drivers when users enter restricted areas, such as federal buildings. App Guardian [34] blocks runtime monitoring attempts by malicious apps, pausing them when sensitive applications are running. Unlike these solutions, IM-Visor does not pause normal app operations, minimizing impact on the Android system. Screenmilker [24] exploits Android ADB capabilities to monitor screens and capture passwords, but it also provides a mitigation mechanism to control ADB access. While both IM-Visor and Screenmilker aim to protect keystrokes, their approaches differ: Screenmilker addresses flaws in the Android permission system, whereas IM-Visor considers IME apps as potential threats. The complex nature of Screenmilker's attacks limits their widespread use, while IM-Visor's threats are more common and can be easily implemented through repackaging.

### Applications of TrustZone

TrustZone has been extensively researched and applied in various domains. SecReT [20] enhances secure communication between the Rich Execution Environment (REE) and Trusted Execution Environment (TEE). ICE [33] runs secure code in non-secure domains by creating isolated environments, thereby reducing the TEE's code size. Hypervision [9] strengthens the Linux kernel by replacing sensitive instructions and controlling access to kernel data. TrustOTP [31] and TrustDump [32] use TrustZone to protect one-time key generation and memory acquisition, respectively. These solutions focus on underlying systems, particularly the kernel, and have limited interaction with the Android framework. In contrast, IM-Visor makes significant modifications to the Android framework, enhancing its functionality and security. AdAttester [23] and [26] use TrustZone for secure online mobile ad attestation and payment processes, respectively. IM-Visor, while similar in scope, is more comprehensive, as it requires the trustlet to perform functional operations and interact more with the Android framework.

### Conclusion

This paper discusses the security vulnerabilities in IME apps, including Potentially Harmful Apps (PHAs) and malicious IME apps. We highlight that all post-IME designs are susceptible to prefix-substitution and colluding attacks. To address these issues, we propose a pre-IME approach, which ensures that touch events are analyzed for sensitive keystrokes before any IME app code executes. We designed IM-Visor, a TrustZone-based framework with pre-IME characteristics. Our prototype implementation and testing with popular IMEs show that IM-Visor has minimal runtime overhead.

### Acknowledgments

We thank the anonymous reviewers for their valuable comments and suggestions. Yazhe Wang's work was supported by the Youth Innovation Promotion Association of CAS and the Strategic Priority Research Program of CAS under Grant No.XDA06040502. Peng Liu was supported by NSF SBE-1422215, NSF CNS-1422594, and NSF CNS-1505664.

### References

[References are listed here as provided in the original text.]