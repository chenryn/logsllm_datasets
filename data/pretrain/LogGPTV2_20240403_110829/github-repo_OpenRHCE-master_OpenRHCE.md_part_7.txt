Client behavior is configured in `/etc/ssh/ssh_config`
Server behavior is configured in `/etc/ssh/sshd_config`
Start the service:
    # service sshd start
Configure it persistently on:
    # chkconfig sshd on
#### Investigate SELinux implications for SSH
Find SELinux Filesystem contexts that might affect ssh:
    semanage fcontext -l | grep "ssh"
Find SELinux port contexts that might affect ssh:
    semanage port -l | grep "ssh"
Find SELinux booleans that might affect ssh:
    getsebool -a | grep ssh
#### SSH key-based authentication
Generate a key with `ssh-keygen`
Transmit a key to a remote system with `ssh-copy-id`
> -   The key you want is usually named `~/.ssh/id_rsa.pub`. Be certain
>     to use the .pub version of the key instead of the private key!
#### SSH Security Considerations
Allow root logins?
:   Disallow with `PermitRootLogin no` in `/etc/ssh/sshd_config`
Listen on specific interfaces?
:   Specify with `ListenAddress x.x.x.x` in `/etc/ssh/sshd_config`
Allow legacy versions?
:   Specify allowed versions of the protocol in `/etc/ssh/sshd_config`
    (read comments).
Allow X11 forwarding?
:   Configure with `X11Forwarding yes|no` in `/etc/ssh/sshd_config`
Specify alternate port?
:   Configure with `Port xx` in `/etc/ssh/sshd_config`. Multiple ports
    on multiple lines accepted. Don\'t forget firewall and SELinux
    implications though!
#### Remote Access via VNC
For remote management when a GUI is desired or required, Red Hat
provides VNC services through tigervnc.
Install the package with `yum -y install tigervnc-server`.
Configure the service at /etc/sysconfig/vncservers
Start the service:
    # service vncserver start
Configure it persistently on:
    # chkconfig vncserver on 
#### Configuring a VNC remote display
In `/etc/sysconfig/vncservers` uncomment and modify the lines below:
    # VNCSERVERS="2:myusername"
    # VNCSERVERARGS[2]="-geometry 800x600 -nolisten tcp -localhost"
As the user who will connect, set a VNC password with `vncpasswd`.
Start or restart the service.
Connect to the remote system using a vnc client with the `-via` option:
    vncviewer localhost: -via y.y.y.y
> Where X is the display number and y.y.y.y is the IP address of the
> remote machine.
#### Investigate SELinux implications for VNC
Find SELinux Filesystem contexts that might affect vnc:
    # semanage fcontext -l | grep "vnc"
Find SELinux port contexts that might affect vnc:
    # semanage port -l | grep "vnc"
Find SELinux booleans that might affect vnc:
    # getsebool -a | grep vnc
### Session 8 Network Time Protocol and System Performance Reports
#### NTP Overview
NTP (Network Time Protocol) provides a standardized way for systems to
provide and obtain correct time over the network.
This service is increasingly critical for today\'s networking
environments. Synchronized time information is required for accurate
handling of email, for clustering, for cloud computing, and for
virtualization (just to name a few).
#### NTP Packages
ntp
:   Provides the daemon and utilities
system-config-date
:   Provides a graphical interface for changing the time and configuring
    an NTP client.
ntpdate
:   Provides a command line utility for setting the date and time with
    NTP
#### NTP Documentation
Many man pages:
> ntp.conf (5)
>
> ntp_misc (5)
>
> ntp_acc (5)
>
> ntp_auth (5)
>
> ntp_clock (5)
>
> ntp_mon (5)
>
> ntpd (8)
#### Installing, Starting, and Configuring Persistence
Install the service (likely already installed):
    # yum -y install ntp
Starting the service:
    # service ntpd start
Configuring it to be on persistently:
    # chkconfig ntpd on
#### Defining NTP Terms
Stratum0
:   A clock device such as an atomic, radio, or GPS clock device. Not
    usually attached to the network but connected to a server.
Stratum1
:   A server attached to a high accuracy time device that also allows
    queries for its time information.
Stratum{2..16}
:   Servers that acquire time information from servers above them in the
    hierarchy and share that information with peers or clients.
Server (in ntp.conf)
:   A time server that is a more authoritative time-source (higher
    stratum) than the system being configured, and from which this
    system obtains time information.
Peer (in ntp.conf)
:   A time server that is considered equally authoritative (same
    stratum) with the system being configured, and with which this
    system shares time information.
#### Configuration of NTP
Configured in `/etc/ntp.conf`
`restrict` lines
:   Define the access to be allowed or restricted for other hosts that
    communicate with this service. Each server or peer configured must
    be included in a `restrict` line.
`server` lines
:   Define a host to be queried as a more authoritative time source.
`peer` lines
:   Define a host to be queried as an equally authoritative time source.
`broadcast` or `multicast` lines
:   Define ways to obtain or provide time information apart from unicast
    queries.
#### NTP \"restrict\" options
    restrict  [mask  ] [flag] [flag] ...
address and optional mask
:   The address, in dotted-quad notation, of the host or network to be
    restricted. Alternatively, the address can be a valid DNS name.
ignore (flag)
:   Disallows all packets
kod (flag)
:   Sends a \"kiss of death\" packet to misbehaving (usually
    fire-walled) clients.
nomodify (flag)
:   Allows queries for information, but denies attempts to modify the
    time.
noquery (flag)
:   Deny ntpq and ntpdc queries. The time service is unaffected.
nopeer (flag)
:   Deny packets related to peering
notrap (flag)
:   Deny \"trap\" messages (used in logging).
#### Configure as a Client
1.  Include at least one server (three are preferred) in
    `/etc/ntp.conf`:
        server  iburst
        server  iburst
2.  With the ntp service stopped, synchronize time with ntpdate:
        # ntpdate -v 
3.  Start the ntp service.
4.  Verify that the service sees the configured servers (this may take a
    few minutes):
        # ntpq -p    
#### Configure as a Server
1.  Follow the steps for Client Configuration.
2.  Add one or more restrict lines to allow appropriate access from
    those systems that will be clients (or peers):
        restrict 10.37.112.0 mask 255.255.240.0 nomodify notrap
        restrict 10.37.112.13 
3.  Restart the service after making changes.
#### Configure as a Peer
1.  Follow the steps for Client Configuration
2.  Add one or more restrict lines to allow appropriate access from
    those systems that will be clients (or peers):
        restrict 10.37.112.0 mask 255.255.240.0 nomodify notrap
        restrict 10.37.112.13 
3.  Add one or more peer lines:
        peer  [options]
4.  Restart the service after making changes.
5.  Verify that the service sees the configured peers and servers (this
    may take a few minutes):
        # ntpq -p    
#### Investigate SELinux implications for NTP
Find SELinux Filesystem contexts that might affect NTP:
    # semanage fcontext -l | grep "ntp"
Find SELinux port contexts that might affect NTP:
    # semanage port -l | grep "ntp"
Find SELinux booleans that might affect NTP:
    # semanage boolean -l | grep ntp
#### Investigate Firewall Implications for NTP
Find ports that may need to be opened for NTP:
    # grep ntp /etc/services 
Rules to open up the required ports:
    -A INPUT -m state --state NEW -m tcp -p tcp --dport 123 -j ACCEPT
    -A INPUT -m state --state NEW -m udp -p udp --dport 123 -j ACCEPT
#### Reporting on System Performance
One of the more vague of the RHCE Objectives says: \"Produce and deliver
reports on system utilization (processor, memory, disk, and network).\"
This loosely defined objective can be very wide-ranging \-- this section
will cover some of the tools that might be useful in meeting it.
#### Tools for System Utilization Reporting
df
:   \"diskfree\", reports on disk space utilization for all mounted
    filesystems. Part of the coreutils package.
iostat
:   Provided by the sysstat package.
vmstat
:   Provided by the procps package.
top
:   Provided by the procps package.
Explore the man pages for these utilities and be prepared to use them
with scripting to write reports to a file.
### Session 9 HTTP and FTP
#### Apache Web Server
Service name: httpd
Package name: httpd-{ver}.{arch}.rpm
Main config: /etc/httpd/conf/httpd.conf
Module config: /etc/httpd/conf.d
Default DocRoot: /var/www/html
#### Installation and Basic Configuration
1.  Install the `web-server` package group:
    >     # yum groupinstall web-server
    >
    > Note that this install several packages including the Apache
    > Manual which is then locally accessible at
    > 
2.  Install the `mod_ssl` package:
        # yum install mod_ssl
3.  Start and configure persistence:
        # service httpd start; chkconfig httpd on
> In this default configuration, you can create an `index.html` page in
> `/var/www/html/` and it will be served out as your home page.
> Additionally, you can use  to connect securely to your
> webserver, but you will have to manually accept a self-signed
> certificate.
#### Installing a Signed SSL Certificate
1.  Place the certificate and private key in the appropriate locations
    in `/etc/pki/tls/`.
2.  Ensure that both files have the `cert_t` SELinux file context and
    that the private key is readable only by root.
3.  Modify `/etc/httpd/conf.d/ssl.conf`:
    > -   `SSLCertificateFile` points to your newly installed
    >     certificate.
    > -   `SSLCertificateKeyFile` points to the corresponding private
    >     key.
4.  Restart the service.
    > Now your website will present a certificate signed by an accepted
    > CA.
#### Virtual Host Configuration
\"Virtual Hosts\" come in two forms:
> Standard Virtual Hosts
>
> :   Exist on hosts that have been assigned multiple IP addresses.
>     Queries for each separate IP address are served pages from a
>     particular virtual host.
>
> Name Virtual Hosts
>
> :   Exist on hosts with multiple names aliased to one IP address
>     (usually through DNS aliases, but can also be accomplished with
>     `/etc/hosts`). Queries for each separate name (regardless of IP
>     address) are served as different virtual hosts.
#### Name Virtual Host Configuration
Near the end of httpd.conf, uncomment the line:
    #NameVirtualHost *:80
Create a section for each vhost:
    #
    #    ServerAdmin PI:EMAIL
    #    DocumentRoot /www/docs/dummy-host.example.com
    #    ServerName dummy-host.example.com
    #    ErrorLog logs/dummy-host.example.com-error_log
    #    CustomLog logs/dummy-host.example.com-access_log common
    #
-   Uncomment the first and last lines in that block. Uncomment and
    modify the lines for ServerName, DocumentRoot, and others that you
    want to customize.
-   Include a Vhost stanza for your default server instance and for each
    alternate name.
#### Example Virtual Host Configuration
![image](images/VirtHostConf.png){width="90.0%"}
#### Configuring for CGI-BIN scripts
Refer to the Apache Manual (package: httpd-manual) for full details and
a tutorial on *CGI: Dynamic Content*.
The `ScriptAlias` line in `httpd.conf` designates the directory in which
Apache expects to find CGI scripts.
CGI scripts can be implemented in directories **outside** of the
`DocumentRoot` path \-- but this will require modification of the
`ScriptAlias` line and the fcontext rules for SELinux.
#### Apache Access Control
Per-directory options (example):
        Order Deny,Allow
        Deny from all
        Allow from dev.example.com
-   Three-pass access control:
    > 1.  Parse all statements of type specified first.
    > 2.  Parse all statements of type specified second. Matches
    >     overrides matches of previous type.
    > 3.  Process requests which matched nothing.
-   In `Order` statements, whichever directive comes **last** is the
    default in case of no match.
#### Host Based Security directive formats
`Deny from example.com`
`Allow from 192.168.0.15`
`Deny from 192.168.0.0/255.255.255.0`
`Deny from 192.168.1.0/24`
#### Access Control with .htaccess files
If permitted by httpd.conf, access may be controlled on a per-directory
basis with `.htaccess` files in the directories where the content needs
to be protected:
        Order allow,deny
        Allow from 192.168.5.200
        Deny from all
#### User Based Security with htpasswd flat file
      AuthType Basic
      AuthName "Password Protected"
      AuthUserFile /etc/httpd/.htpasswd
      Require valid-user
#### Configuring Passwords
-   `htpasswd -cm /etc/httpd/.htpasswd good_user`
-   `htpasswd -m /etc/httpd/.htpasswd another_user`
#### User Based Security with LDAP authentication
1.  Obtain the LDAP certificate.
2.  Add a line to your http.conf (usually in your Vhost definition):
        LDAPTrustedGlobalCert CA_BASE64 /path/to/cert
3.  Configure a Directory Block:
            AuthName "Private with LDAP access"
            AuthType  basic
            AuthBasicProvider ldap
            AuthLDAPUrl "ldap://fqdn/prefix" TLS
            Require valid-user
> Modify the cert path, and the FQDN and prefix of the LDAP Server to
> match your infrastructure.
#### SELinux Implications for HTTP
Find SELinux Filesystem contexts that might affect HTTP:
    # semanage fcontext -l | grep "http"
Find SELinux port contexts that might affect HTTP:
    # semanage port -l | grep "http"
Find SELinux booleans that might affect HTTP:
    # semanage boolean -l | grep http
Read the man page `httpd_selinux (8)`
Make SELinux more verbose:
    # semanage dontaudit off
> This disables setroubleshoot-server, sealert, and the issuing of