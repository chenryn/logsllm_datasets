性。你们一起工作的方式是什么？我指的是人员方面。你觉得你们
问题吗？一个随着时间的推移而演进的环境？
Michael：嗯，这是一个有趣的问题，因为我们遇到一些有趣的、技
能有隔的问题。我们有几个做研究的人，主要是统计学或高级软
件工程背景，对编码一无所知。后来我们又招聘了一些主要是担任
程序员的人。但是理想的是找一些处于二者之间的人：如果你既能
做统计分析，又能编写C代码来做数值分析，那就是我们要找的人
了。部分原因在我们的工作中，研究人员比编码人员更容易得到证
明。所以，我们最终的目标是让每个人都成为一种半自治的编码人
员/研究人员，还有几个人基本上承担架构的守卫责任。长期来看这
种做法是不可行的。我想时间长了就不可避免会产生技能上的隔
，因为人们的特长、兴趣和技能是不一样的。
我们遇到的一个问题是，有一位高级研究员，很明显就不是程序
员。所以，在遇到问题而周围又没有人为他写代码的时候，他就只
能坐在那里玩弄手指了，这个长期存在的问题是我们必须解决的。
最后，我们找到了一位应用开发人员，他愿意和那样的人一起工
作，向他们提供他们所需要的代码。
Andrew：这样你就需要解决一个问题：团队中的部分成员是纯粹的
研究人员、科学家、数学家、统计分析学家，他们不是编程人员。
但是在这种情况中，那些非编程人员是团队中不可或缺的部分。
Michael：是的。在提取需求时我们遇到不同的问题。研究人员充当
了发现新想法的引擎。这也是我们为什么要找一些既能做研究、又
能做并发的人的原因。他们是提出问题的人，他们会构建工具来解
决问题，在多个场合中，工具都要求是可以使用的。然后我们会找
几个人试着分析一下如何利用已经开发好的东西并放到整个系统
中。这样，你得到那些能做研究、又做并发的人构建的原型，有几
个人事后思考如何把原型放到架构中。一个人会考虑如何把东西放
到库中，而我会考虑总体方向：这里是我们目前所做出的东西的差
252
---
## Page 254
距，那里也许是我们可以弥补差距的地方。我们已经有些这些工
具，如果把这些工具的功能扩展到一下，做这些额外的工作怎么
样，现在我们对问题有了明确的观点。
这样做的好处是，随着我们做的事情越来越多，那些纯研究人员虽
然不会写C程序，但是他们可以写一些脚本或类似的东西，把工具
绑在一起。接着我们得到一个解决方案——一个很慢的解决方案
一我们可以用些比现在好的东西。这样，我们就可以把一些并发
精力用到开发工具的优化版本上。
Andrew：也就是说这种方法的核心是，既是一个构建软件的项目，
又是一个研究项目，一些本来不是编码人员的团队成员也可以采取
某种方式对代码作出贡献，这种贡献有可能把各个点连起来，帮助
项目进行到下一个有趣的研究问题上。
Michael：是的。我们的想法是达到一个中间地带。首先，你永远也
不要指望着一个纯研究人员对代码库作出责献。但是如果我们有一
些工具，研究人员就可以写一个shel1脚本来使用这些工具，这对于
他来说没有负担，对我们来说不会造成破坏。是一些类似于这样的
东西，他可以做他的工作，对问题提出一个初始的解答，我们可以
使用那个信息，说：“现在可以构建又系统了。”
再次说明一下，我们在采取这个想法时，我们并不知道我们这样做
是否有价值。
Andrew：你有多少次发现自己走到了错误的道路上，需要从软件中
删除代码？因为在删减功能特性或改变代码时，常常会在解决问题
的时候引入同样多的新问题。
Michael：SiLK有两层，因此可以避免那种情况。有一个架构一—文
件系统、文件存储和类似的东西，然后就是围绕着这些东西的工
具。从SiLK的角度来看，研究有两个方面，包括了实现，或是将一
组工具融合在一起来解决问题。有一个规则是，研究要围绕着工具
展开。如果我们提出了新的想法，我们就把它做成了一个工具，对
于中央架构没有损害，也没有影响。
Andrew：从架构的角度看，是高度模块化的，你可以用shell脚本把
不同的程序结合在一起，这部分要尽可能模块化。而从团队的角度
看，你总是要努力确保人们在技术上尽可能灵活。
253
---
## Page 255
Michael：是的。也就是说，我们最后有人变成了架构的守护者，那
是个技术工作。
Andrew：你是否遇到过团队成员之间发生冲突的时候？
Michael：研究小组中是由固执己见、高度自治的人组成的，依靠的
是他们自已的基金。争论已经成为常态。
争论基本上有两类。第一类是研究上的争论：我应当试试这个想
法，我应当试试那个想法，还有一个想法我也得试试。作为一个经
验法则，你要试试这个想法，如果证明是可行的，你就接着做下
去。如果不可行，就不要做下去。但是，我们也会生产交付给客户
的东西。我们用工具做出所有的原型，如果工具证明是有用的，我
们就制作一个模块和一个培训课程，然后教给人们如何使用工具。
我要做的一件事情是从使用工具的人那里获取需求，因为他们的想
法一般会比我们的想法好。我们使用工具做研究，他们利用工具来
找人！
那是我们的一种争执。还有一种争执是关于代码基完整性及类似的
东西。我和Suresh之间有过一次场面壮观、尽人皆知的争执，这场
争执对他来说更像是一件小事。他刚参加了两个星期的陪审团21，
刚刚履行完他的职责，然后就让我们交付一些软件了，太糟糕了。
如果不把软件测试好，我是不会交付软件的。发生这件事情的原因
是因为在那时，我们还没有达成共识，找一个人来做代码基础库的
守卫者。我特别提倡的一件事情是做系统可靠性的权威。我弄过一
份所有失效情况的错误树，为系统管理员写了一份文档，描述当系
统有某种方式失败时，应当如何利用这份文档，如何恢复。这样，
我就不会让任何东西漏过去了。那场争论持续了4个小时，我一直
坚持自己的立场。这对我来说是件大事，因为在此之前我一直都是
Suresh的下属。在这次争论后中我取得项目足够的控制权，我不能
让自己的名声受损，因为坦率地说，他刚才参加了陪审团，做事情
感觉有点敌对。
实际上，关键是，你是搞学术的，声誉对你来说非常重要。在写论
文的时候，名字要写在论文上。那时关键之一：当我们做出什么东
西的时候，我们有一种文化，就是一般都要全力以赴地投入到这个
想法上，那是我们的名声所在。组内的每个人接受的都是这种观
念。你代表的是我们，你的工作代表的是我们，如果出了什么错
误，你必须处理它，修正它，在发布的时候要小心。
254
---
## Page 256
最终我们到了这样一种情况，为了让发布更加顺利，我们建立了陪
审团体系。我们有一些把事情弄糟的人，我在内部采取的办法是利
用人的自尊。有一次系统中出了一点小故障，导致两个字段的位置
颠倒了，最后我私下里找到并发人员说：“看看，你让我在客户面
前像个傻瓜一样。我承担了责任，但是以后不要再做这种事情
了。"此后，他表现得极为认真、勤勉，确保类似的事情不再发
生。
我的背景是理论方面的，受到工程设计很多想法的影响。我们都接
受了一种思想的训练，认为真理不应当是独占的。所以，我们期望
着发生争论。我们在文化上也强调，争论不是针对个人的。我认为
最富有成效的环境是，人们都相互尊重、但是对人又不偏不倚，我
这么说是因为这样他们才会提出毫无偏见的观点，不会把别人当成
傻瓜。他们不会总想着如何才能不伤害你的感情，也不会想着怎么
样去伤害你的感情。作为一个小组，必须鼓励相互之间的争执，到
了最后能够客观地达成一致意见。
关于争论，我们的原则之一是到了最后必须达成某种一致意见。这
样我们可以全力地相互争论。大多数时候我们的争论在本质上是技
术、实验或类似的东西，所以到了最后必须试验一下，看看谁是对
的。和我们打交道的大多数人都有博士学位。我们这个过程的要点
就是：如果不知道一件事情对不对，就必须通过试验来验证。
]SiLK（SystemforInternet-LevelKnowledge，Internet级别的知识系
统）是一个由Michael及其团队开发的一组流量分析工具。它是作为
开源软件项目发布的，可以从http://tools.netsa.cert.org/silk/下载。
[2].在美国，尽管各州的规定不同，但是审理刑事和民事案件时都
会使用陪审制。美国公民都有义务担当陪审员一职。如果人们被邀
请履行陪审团职责，除非工作脱不并身或不能离并家，否则不得推
脱。尽管有些案件的审理时间会长得多，但陪审员一般必须要出庭
两周。
第23章HADS团队
Karl Rehmer
在古代，在移走拱门的支撑物时，负责建造拱门的人必须站到拱门
下面。如果拱门建造得不牢固，就会倒塌并砸在建造者的身上。在
255
---
## Page 257
第一次乘坐波音777时，我的感觉就有点像是建造拱门的人。我编
写过一部分关键的飞行代码，参加过一个软件工具团队，飞机上运
行的一大部分飞行软件就是用那个团队所并发的软件工具编写的。
当你意识到自己的生命取决于自己所编写的软件的质量时，那是一
种很难忘的感觉。就像建造拱门一样，最终产品不是一个人努力的
结果。建造拱门的人知道项目的历史，有时候，他会因为知道做过
些什么而感到相当紧张。虽然我知道飞行系统的很多并发背景，也
知道在开发过程中遇到的问题，但是我用不着像拱门的建造者那样
紧张。飞机在投入服务之前已经经过了全面的飞行测试。我不是第
一个站在拱门下面的人。你的团队在生产飞行软件的过程中起到了
重要作用，在意识到这一点后，在登上飞机的那一刻你会感到非常
激动。我在这里讲述的是一个HADS团队的故事，这个团队构建了
波音777飞行软件的开发人员所使用的编译器、运行环境、链接
器、调试器和其他支持工具。这个小团队并发、改编和维护的代码
的总量和由几百名开发人员开发的整个777飞行系统的代码的总量
大致相当。每个截止期限都达成了。在这样的团队工作是我软件并
发生涯中最重要的经历之一。
我认为有些团队在开始的时候就很完美并一直保持那样的状态。我
也知道有些团队并始的时候很丑陋并一直保持着那种状态。HADS
团队并始的时候并不完美，到了最后团队本身也消失了。但在这个
过程中却是完美的，非常完美。
背景
你可能会感到奇怪，霍尼韦尔（Honeywell）航空运输系统公司是为
商用飞机生产航空电子设备的，为什么会开发HADS工具集呢？
这要回到20世纪80年代。Sperry飞行系统公司的飞行控制系统从模
拟方式转向了数字计算机和软件方式。在这个过程中，Sperry设计
了自己的计算机芯片并由一个软件团队为这种处理器并发了一个
Pascal语言的混合版本。他们认识到Pascal的类型检查机制能够提供
一些安全方面的优势，并增加了一些对于编写飞行系统软件来说非
常重要的特性。当Ada语言成为标准之后，他们的兴趣转到了这种
用来开发安全关键飞行系统软件的语言上。
1985年，Sperry飞行系统公司为计划中的波音7J7的线传操纵系统考
察了Ada。考察的目标是Intel80x86系列处理器中的一种，此外还考
察了由一家叫做DDC-I的编译器开发商开发的Ada开发工具。DDC-1
256
---
## Page 258
是一家引人注目的编译器开发商，特别是它为Intel80x86系列处理
器开发了高质量的工具和运行环境。DDC-I公司在Sperry飞行系统公
司所在地亚利桑那州的菲尼克斯有一个销售和工程办公室，这也给
DDC-I的人选带来了很大帮助。
作为飞行关键软件开发过程的一部分，系统中所有子例程都必须很
好地编写文档，需要编写测试用例以确保代码覆盖率。他们的工作
之一是编写DDC-IAda运行环境系统的文档并进行测试，以达到DO
178B的要求。DO-178B是FAA的软件准则。在这个过程中，霍尼韦
尔收购了Sperry飞行系统公司。处理诸如商用喷气式班机等大型飞
机的部门被命名为霍尼韦尔航空运输系统部。
在那段时间，我和妻子在印第安纳普渡大学韦恩堡分校担任助教。
在那几个夏天，我们在位于韦恩堡的Magnavox中心做软件咨询工
作。Magnavox是Ada的早期采用者，当时正在开发第一个真正的大