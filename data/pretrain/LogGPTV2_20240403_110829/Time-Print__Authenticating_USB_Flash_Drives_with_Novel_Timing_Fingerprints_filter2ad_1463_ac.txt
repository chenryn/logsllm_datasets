method transfers the command packet and receives the status
packet, while the usb_stor_bulk_transfer_sglist
function receives the actual data from the device. To perform
precise timing measurements of these transactions, Time-Print
leverages a low overhead and high granularity timing source,
the CPU timestamp counter (TSC), which is a monotonic 64-bit
register present in all recent x86 processors. While initially
designed to count at the clock speed of the CPU, most recent
systems implement a ‘constant TSC’, which ticks at a set
frequency regardless of the actual CPU speed. This feature
enables Time-Print to precisely time the data transmission
phase, regardless of the underlying CPU frequency. We utilize
the built-in kernel function rdtsc() both before and after
each transaction to record the precise amount of time it takes
for the execution of each interaction.
With the collected timing information, Time-Print further
integrates a low-overhead storage and reporting component for
this timing information. This component modiﬁes the USB
driver to maintain a continuous stream of timing information
for the drive. Speciﬁcally, we augment the us_data structure
present in the USB storage header to contain arrays to keep
track of command opcode, size, address, and TSC value for
each transaction.
To transfer the timing values and record them (for prototype
purposes), we implement a character device within the USB
storage driver to transfer the timing information to the userspace
for further processing. Since accessing the TSC is designed to
be a low overhead function, the induced overhead is negligible
(more discussion on the overhead is presented in Section VII).
To ensure minimal performance impact, once a device has been
approved, the timing and storage functionality can be disabled.
As discussed in Section III-A, it is difﬁcult to build a reliable
timing-based ﬁngerprint based on the information leaked from
the USB handshake and enumeration process, due to its variable
nature. Instead, we develop a common test pattern that can be
applied to any USB device. In particular, we generate a script
with a random pattern of reads in different sizes from different
offsets within the drive. The script is executed whenever a new
USB device is detected by the host system. This procedure
ensures a consistent number of reads from different locations
on the drive allowing for the creation of a statistical, timing-
based ﬁngerprint. Meanwhile, reading from multiple locations
with different sizes is necessary as it provides a better chance
of generating a unique ﬁngerprint for the ﬂash drive. According
to Micron [39], the NAND ﬂash blocks built into a USB ﬂash
drive are at least 128KB, while each logical block address that
can be accessed by the host system corresponds to a 512-byte
chunk. As the logical to physical mapping is opaque to the
user, it is challenging to know whether a large read from a
speciﬁc location involves any accesses to multiple contiguous
ﬂash blocks, multiple blocks in different locations, or only a
single block. By attempting to generate as many different types
of accesses as possible, Time-Print can better extract the subtle
timing differences caused by those accesses.
C. Preprocessing Timing Values
As shown in Figure 4, there are three packets exchanged
between the host and peripheral: the original command, the
responding data packet, and the transfer status. We need to
capture and record the timing values for each packet from
the host’s perspective. Speciﬁcally, a timestamp is recorded
upon the entry and exit of each of the two functions listed
above. Each timestamp also includes the following meta-data:
command opcode, the size of the packet, and the offset the data
is coming from. The preprocessing step of Time-Print ﬁlters
any commands that are not read commands from the recording,
and searches for the beginning of the commands from the read
script to discount any packets that are issued as part of the drive
enumeration. As the goal of the ﬁngerprint system is to focus
speciﬁcally on the time it takes for the drive to access blocks of
the USB device, not the timing between packets, we calculate
the time latency between when the host ﬁnishes sending the
command packet and when the host ﬁnishes receiving the data
response packet from the drive.
The next step is to organize this raw timing information,
which contains timing data from a multitude of locations and
sizes. We group them into separate bins where each contains
one size and address offset. Grouping the timing results by
read size and offset ensures that each timing sample within a
group corresponds to a single action or group of actions within
the drive, allowing for meaningful statistical analysis.
D. Classiﬁcation
With the timing information grouped by size and offset,
we can leverage features and machine learning techniques
to create a ﬁngerprint for each device. Based on the trained
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:15 UTC from IEEE Xplore.  Restrictions apply. 
1007
Device Manufacturer
Device Name
SanDisk
Generic
SanDisk
Samsung
PNY
Kingston
Kingston
PNY
SMI
SMI
SanDisk
SanDisk
Cruzer Blade
General UDisk
Ultra
BAR Plus
USB 3.0 FD
DataTraveler G4
DataTraveler SE9
Elite-X Fit
USB Disk
USB Disk
Cruzer Switch
Cruzer Glide
Size
8GB
4GB
16GB
32GB
32GB
32GB
64GB
64GB
64GB
64GB
8GB
16GB
Flash Controller
Number of Devices
USB Protocol
SanDisk
ChipsBank CBM2199S
SanDisk
Unknown
Innostor IS902E A1
SSS 6131
Phison PS2309
Phison PS2309
Silicon Motion SM3269 AB
Silicon Motion SM3267 AE
SanDisk
SanDisk
10
10
10
4
1
1
1
1
1
1
1
2
USB 2.0
USB 3.0
USB 3.0
USB 3.1
USB 3.0
USB 3.0
USB 3.0
USB 3.1
USB 3.0
USB 3.0
USB 2.0
USB 2.0
TABLE I: USB mass storage devices utilized in the evaluation of Time-Print.
ﬁngerprints, Time-Print can reject or accept devices. For the
different security scenarios mentioned in the threat model,
Time-Print uses different algorithms for better performance.
Section VI further presents the details for different scenarios.
V. EVALUATION SETUP
To demonstrate the effectiveness and potential applications
of Time-Print, we build a testbed to extract ﬁngerprints from
43 USB mass storage devices. In this section, we describe the
equipment utilized, the detailed data collection methodology,
the read sequence utilized, and how we denote the training
and testing datasets.
A. Experimental Devices
We utilize the following devices and system conﬁgurations
to gather ﬁngerprints.
Host System, OS, and Driver Modiﬁcations. Our host
system is a DELL T3500 Precision tower. The system contains
an Intel Xeon E5507 4 core processor with a clock speed of
2.27GHz and 4GB of RAM. The USB 2.0 controllers are Intel
82801JI devices. We utilize a Renesas uPD720201 USB 3.0
controller (connected via PCI) for USB 3.0 experiments.
The host runs Ubuntu 18.04 LTS and we modify the USB
storage drivers as detailed in Section IV-A2. Namely, we modify
the USB driver to record the timing information for the start
and completion of each USB packet transmission that is a part
of the USB storage stack. Each time a device is connected,
a data structure is created to store the timestamp and packet
metadata information. This data structure is deleted upon device
disconnect. A character device is inserted into the USB driver
code to facilitate the transfer of this timing information to log
ﬁles after the completion of drive ﬁngerprinting operations.
USB Devices. We test the performance and applicability
of Time-Print with 12 unique USB models and 43 different
USB devices. Table I lists the device manufacturer, name,
size, controller, number of devices, and protocol for every
2Since Time-Print is entirely software-based, it could reasonably be extended
to macOS and Windows with cooperation from developers.
device used in our experiments. We select these brands to
create a broad dataset that contains a number of the most
popular devices on the market (purchased by users on Amazon
as of September 2020). Each device is analyzed with no
modiﬁcations to the ﬁrmware of the device. To ensure fairness,
all devices are zeroed and formatted as FAT32 with an
allocation size of 4KB, and are identically named as ‘USB 0’.
We extract the device controller name by using Flash Drive
Information Extractor [52]. Of note, SanDisk does not publicly
identify the versions of their ﬂash controllers and simply reports
the name ‘SanDisk’.
USB Hub and Ports. To facilitate testing of the USB drives,
we utilize an Amazon Basics USB-A 3.1 10-Port Hub that we
connect to the inbuilt USB 2.0 Intel 82801JI hub on the host
for USB 2.0 experiments and to the Renesas uPD720201 USB
3.0 hub for USB 3.0 testing.
B. Data Collection
Given our setup, we implement a script to gather data from
multiple USB devices at once. The Amazon Basics USB hub
utilized in our experiment can selectively enable/disable the
power connected to each speciﬁc port. We implement this
functionality through the uhubctl [63] library and simulate
the physical unplugging and replugging of each USB device
between every sample.
To reduce any impact on the precision of the timing within
the driver, which is of the utmost importance for ﬁngerprint,
we utilize the Linux cpuset utility to isolate the USB storage
driver process to its own CPU core. This largely prevents
interference from context switches. Furthermore, since some
CPUs do not guarantee that the TSC is synchronized between
cores, it is necessary to ensure that all measurements are
gathered from the same core.
To better explain the overall testing methodology, we further
present the sample acquisition process with an example of 10
different USB drives. Before testing, each port on the USB
hub is disabled such that no power is provided to a plugged-in
device. We then plug each drive into a port on the USB hub and
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:15 UTC from IEEE Xplore.  Restrictions apply. 
1008
Raw 
Samples
Grouped 
Samples
Group 1
Size: 16KB
Loc: 0
Group 2
Size: 32KB
Loc: 0
Group 3
Size: 64KB
Loc: 0
Group N
Size: 64KB
Loc:M
Features
Classiﬁers
1D
Mean 1
Mean 2
Mean N
Scenario ❶
K-means
Histogram 1
2D
Histogram 2
Scenarios ❷❸
Histogram N
Neural 
Networks
Fig. 5: Flow of generating 1D features from the raw ﬁngerprint samples of a drive as used for different model identiﬁcation
(top) and 2D features as used for individual device classiﬁcation (bottom).
record the mapping of the hub port to drive ID (to match each
sample to a speciﬁc drive). The ﬁngerprint gathering script
enables the ﬁrst port on the USB hub and waits for the USB
driver process to be launched. Upon launch, the driver process is
isolated to a single core of the CPU to ensure maximum timing
precision. Next, we launch the ﬁngerprinting script that initiates
a series of reads of different sizes and in different locations
on the drive. The returned data is not recorded because only
the timing information of these reads is important. Once the
collection script completes, we mount the character device and
write all of the recorded timing information to a log ﬁle. The
system then unmounts the character device and USB device
and disables the USB port to simulate unplugging the device.
We also simulate non-idle system states: the Linux stress
utility is run to fully utilize one CPU core on every other
sample. The above process is repeated for the next port on the
USB hub. All drives are tested in a round-robin fashion.
Once 20 ﬁngerprints have been gathered from each drive,
we physically unplug each drive and plug it into a different
port on the USB hub; this ensures that any difference observed
in the readings is caused by the individual USB drives, not the
USB port.
C. Fingerprint Script
To gather a ﬁngerprint, we utilize a script of 2,900 reads.
Each read is randomly chosen to be of size 16KB, 32KB,
or 64KB, and to access six logical blocks at 0x0, 0x140000,
0x280000, 0x3c0000, 0x500000, 0x640000. The block ad-
dresses are spread out in an attempt to access diverse physical
locations on the drive. To ensure that any uniqueness observed
in the ﬁngerprint is caused by physical variations in the drive
accesses and not script variations, the script is randomly
generated once and then used for each device.
D. Training and Testing Datasets
As mentioned above, in our experiments, ﬁngerprints are
gathered in a round-robin fashion from devices in a set of 20.
After collecting 20 ﬁngerprints for all drives, all devices are
physically unplugged and then plugged into different ports.
We thus refer to a group of 20 ﬁngerprints as a ‘session’ of
data. For all devices listed in Table I, we gather 4 sessions
of ﬁngerprints (i.e., 80 ﬁngerprints). We then conduct 4-fold
cross-validation by selecting 3 sessions for training, and 1
session for testing.
VI. TIME-PRINT RESULTS
To evaluate the effectiveness of Time-Print, we conduct
a series of experiments in the three scenarios listed in
Section II, namely, identifying devices with different brands,
identifying unseen devices of the same brand, and auditing
(i.e., classiﬁcation on all insider devices).
A. Scenario ❶: Brand Identiﬁcation