## 0x01 写在前面
JDK7u21原生gadget链的构造十分经典，在对于其构造及思想学习后，写下本文作为笔记。
## 0x02 所需的知识点
JDK7u21这个链用了很多的Java基础知识点，主要如下：
  * Java 反射
  * javassist 动态修改类
  * Java 静态类加载
  * Java 动态代理
  * hash碰撞
为了方便大家理解此文，因此我会对这些知识点进行简单介绍，如果都了解的朋友可以直接翻到后面的分析过程。
## 0x03 基础知识
### 1、Java 反射
反射 (Reflection) 是 Java 的特征之一，在C/C++中是没有反射的，反射的存在使得运行中的 Java
程序能够获取自身的信息，并且可以操作类或对象的内部属性。那么什么是反射呢？
对此， Oracle 官方有着相关解释：
> “Reflection enables Java code to discover information about the  
>  fields, methods and constructors of loaded classes, and to use  
>  reflected fields, methods, and constructors to operate on their  
>  underlying counterparts, within security restrictions.”  
>  （反射使Java代码能够发现有关已加载类的字段、方法和构造函数的信息，并在安全限制内使用反射的字段、方法和构造函数对其底层对应的对象进行操作。）
简单来说，通过反射，我们可以在运行时获得程序或程序集中每一个类型的成员和成员的信息。同样的，JAVA的反射机制也是如此，在运行状态中，通过 Java
的反射机制，对于任意一个类，我们都能够判断一个对象所属的类；对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为Java语言的反射机制。
既然利用Java的反射机制，我们可以无视类方法、变量访问权限修饰符，可以调用任何类的任意方法、访问并修改成员变量值，那么这可能导致安全问题，如果一个攻击者能够通过应用程序创建意外的控制流路径，那么就有可能绕过安全检查发起相关攻击。假设有段代码如下：
    String name = request.getParameter("name");
      Command command = null;
       if (name.equals("Delect")) {
         command = new DelectCommand();
      } else if (ctl.equals("Add")) {
         command = new AddCommand();
      } else {
       ...
      }
      command.doAction(request);
存在一个字段为name，当获取用户请求的name字段后进行判断，如果请求的是 Delect 操作，则执行DelectCommand 函数，若执行的是 Add
操作，则执行 AddCommand 函数，如果不是这两种操作，则执行其他代码。
此时，假如有位开发者看到了这段代码，他觉得可以使用Java 的反射来重构此代码以减少代码行，如下所示：
    String name = request.getParameter("name");
      Class ComandClass = Class.forName(name + "Command");
      Command command = (Command) CommandClass.newInstance();
      command.doAction(request);
这样的重构看起来使得代码行减少，消除了if/else块，而且可以在不修改命令分派器的情况下添加新的命令类型，但是如果没有对传入进来的name字段进行限制，那么我们就能实例化实现Command接口的任何对象，从而导致安全问题。实际上，攻击者甚至不局限于本例中的Command接口对象，而是使用任何其他对象来实现，如调用系统中任何对象的默认构造函数，再如调用Runtime对象去执行系统命令，这就可能导致远程命令执行漏洞。
更多关于反射的内容具体可以参考我以前写的这篇文章：
### 2、javassist 动态修改类
Javaassist 就是一个用来处理 Java
字节码的类库，其主要优点在于简单、便捷。用户不需要了解虚拟机指令，就可以直接使用Java编码的形式，并且可以动态改变类的结构，或者动态生成类。
Javassist中最为重要的是ClassPool，CtClass ，CtMethod 以及 CtField这几个类。
  * ClassPool：一个基于HashMap实现的CtClass对象容器，其中键是类名称，值是表示该类的CtClass对象。默认的ClassPool使用与底层JVM相同的类路径，因此在某些情况下，可能需要向ClassPool添加类路径或类字节。
  * CtClass：表示一个类，这些 CtClass 对象可以从ClassPool获得。
  * CtMethods：表示类中的方法。
  * CtFields ：表示类中的字段。
Javassit官方文档中给出的代码示例如下
首先获取 ClassPool 的实例，ClassPool 主要用来修改字节码，并且在 ClassPool 中存储着 CtClass 对象，它能够按需创建出
CtClass 对象并提供给后续处理流程使用，当需要进行类修改操作的时候，可以通过 ClassPool
实例的.get()方法，获取CtClass对象。如在上述代码中就是从 pool 中利用 get
方法获取到了`test.Rectangle`对象，然后将获取到的 CtClass 对象赋值给cc变量。
需要注意的是，从 ClassPool 中获取的 CtClass
对象，是可以被修改的。如在上述代码中，可以看到，原先的父类，由`test.Rectangle`被改成了`test.Point`。这种更改可以通过调用`CtClass().writeFile()`将其持久化到文件中。
可以举个实例来看看，如下代码：
    import javassist.*;
      public class TestJavassist {
          public static void createPseson() throws Exception {
              ClassPool pool = ClassPool.getDefault();
              CtClass cls = pool.makeClass("Test");
              CtField param = new CtField(pool.get("java.lang.String"), "test", cls);
              param.setModifiers(Modifier.PRIVATE);
              cls.addField(param, CtField.Initializer.constant("whoami"));
              CtConstructor cons = new CtConstructor(new CtClass[]{}, cls);
              cons.setBody("{test = \"whoami\";}");
              cls.addConstructor(cons);
              cls.writeFile("./");
          }
          public static void main(String[] args) {
              try {
                  createPseson();
              } catch (Exception e) {
                  e.printStackTrace();
              }
          }
      }
运行后，就会生成名为`Test.class`的文件，如下图所示：
实际上如果反编译该 class 文件，可以得到以下内容：
    public class Test{
          private String test = "test";
          public Test(){
              this.test = "whoami";
          }
      }
这就是动态修改类的一些知识了。
更具体的可以参考这位老哥写的文章：
### 3、Java 静态类加载
java
静态类加载属于类加载的一种，类加载即是指`JVM`虚拟机把`.class`文件中类信息加载进内存，并进行解析生成对应的`class`对象的过程，举个通俗点的例子来说，JVM在执行某段代码时，遇到了class
A， 然而此时内存中并没有class A 的相关信息，于是 JVM 就会到相应的 class 文件中去寻 找class
A的类信息，并加载进内存中，这就是我们所说的类加载过程。
由此可见，JVM不是一开始就把所有的类都加载进内存中，而是只有第一次遇到某个需要运行的类时才会加载，且只加载一次。
类加载的过程主要分为三个部分：加载、链接、初始化，而链接又可以细分为三个小部分：验证、准备、解析。
在 **加载** 阶段，JVM 将 class
文件字节码内容通过类加载器加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的 java.lang.Class 对象；在
**链接** 阶段，主要是将 Java 类的二进制代码合并到 JVM 的运行状态之中，在 **初始化**
阶段，主要是对类变量初始化，是执行类构造器的过程。换句话说，只对static修饰的变量或语句进行初始化。如果初始化一个类的时候，其父类尚未初始化，则优先初始化其父类。如果同时包含多个静态变量和静态代码块，则按照自上而下的顺序依次执行。java
静态类加载就是在这个阶段执行的，也就是说 java 静态类加载早于其他类加载。
那么什么时候会发生类初始化呢？
主要是 **类的主动引用（一定会发生类的初始化）** ，类的主动引用主要指以下情形：
  * 虚拟机启动时，先初始化 main 方法所在的类
  * new 一个类的对象
  * 调用类的静态成员（除了 final 常量）和静态方法
  * 使用`java.lang.refect`包的方法对类进行反射调用
  * 当初始化一个类，如果其父类没有被初始化，那么会初始化他的父类
关于类加载，可以参考这个【`Class.forName()` 与`ClassLoader.loadClass()` \- 哪个用于动态加载？】：  
很有趣的一个讨论
### 4、Java 动态代理
代理是
Java中的一种设计模式，主要用于提供对目标对象另外的访问方式。即是通过代理对象访问目标对象。这样一来，就可以在目标对象实现的基础上，加强额外的功能操作，起到扩展目标对象的功能。
举个例子来说，我们想买一款国外的产品，但是我们自己不想出国，那么就可以通过代购的方式来获取该产品。代理模式的关键点在于代理对象和目标对象，代理对象是对目标对象的扩展，并且代理对象会调用目标对象。
来谈动态代理前可以理解以下静态代理。
所谓静态代理，就像其名字一样，当确定了代理对象和被代理对象后，无法再去代理另一个对象，比如在生活中，我们找一个专门负责代购口红的代购人员让其代购口红，但是如果想要让其代购笔记本电脑，那么其就无法实现这一要求，因此我们就需要寻找另外一个专门负责代购笔记本电脑的人员，同理，在
Java 静态代理中，如果我们想要实现另一个代理，就需要重新写一个代理对象，如下图所示的就是这个原理：
总的来说，在静态代理中，代理类和被代理的类实现了同样的接口，代理类同时持有被代理类的引用，这样，当我们需要调用被代理类的方法时，可以通过调用代理类的方法来实现，下图所示，就是静态代理实现的示意图。
​
静态代理的优势很明显，可以让开发人员在不修改已有代码的前提下，去完成一些增强功能的需求，但是静态代理的缺点也很明显，静态代理的使用会由于代理对象要实现与目标对象一致的接口，会产生过多的代理类，造成冗余；其次，大量使用静态代理会使项目不易维护，一旦接口增加方法，目标对象与代理对象都要进行修改。基于这两点，有了动态代理，动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类中的方法。那对于我们信息安全人员来说，动态代理意味着什么呢？实际上，Java
中的“动态”也就意味着使用了反射，因此动态代理其实是基于反射机制的一种代理模式。
如上图，动态代理和静态代理不同的点在于，动态代理可能有不同的需求（用户），通过动态代理，可以实现多个需求。动态代理其实就是通过实现接口的方式来实现代理，具体来说，动态代理是通过
Proxy 类创建代理对象，然后将接口方法“代理”给 InvocationHandler 接口完成的。
动态代理的关键有两个，即上文中提到的 Proxy 类以及 InvocationHandler 接口，这是我们实现动态代理的核心。
##### Proxy 类
在JDK中，Java提供了`java.lang.reflect.InvocationHandler`接口和`java.lang.reflect.Proxy`类，这两个类相互配合，其中Proxy类是入口。Proxy类是用来创建一个代理对象的类，它提供了很多方法，如：
  * `static InvocationHandler getInvocationHandler(Object proxy)`
这个方法主要用于获取指定代理对象所关联的调用程序
  * `static Class getProxyClass(ClassLoader loader, Class... interfaces)`
该方法主要用于返回指定接口的代理类
  * `static Object newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h)`
该方法主要返回一个指定接口的代理类实例，该接口可以将方法调用指派到指定的调用处理程序。
  * `static boolean isProxyClass(Class cl)`
当且仅当指定的类通过 `getProxyClass` 方法或 `newProxyInstance` 方法动态生成为代理类时，返回
true。这个方法的可靠性对于使用它做出安全决策而言非常重要，所以此方法的实现不应仅测试相关的类是否可以扩展 Proxy。
在上述方法中，我们最常用的是`newProxyInstance`方法，这个方法的作用是创建一个代理类对象，它接收三个参数，loader、interfaces以及h，各个参数含义如下：
**loader** ：这是一个classloader对象，定义了由哪个classloader对象对生成的代理类进行加载。
**interfaces**
：代理类要实现的接口列表，表示我们将要给我们的代理对象提供一组什么样的接口，如果我们提供了这样一个接口对象数组，那么也就是声明了代理类实现了这些接口，代理类就可以调用接口中声明的所有方法。
**h**
：指派方法调用的调用处理程序，是一个InvocationHandler对象，表示的是当动态代理对象调用方法的时候会关联到哪一个InvocationHandler对象上，并最终由其调用。
##### InvocationHandler 接口
`java.lang.reflect InvocationHandler`，主要方法为`Object invoke(Object proxy, Method
method, Object[] args)`，这个方法定义了代理对象调用方法时希望执行的动作，用于集中处理在动态代理类对象上的方法调用。Invoke
有三个参数，各个参数含义如下：
**proxy** ：在其上调用方法的代理实例
**method** ：对应于在代理实例上调用的接口方法的 Method 实例。 Method
对象的声明类将是在其中声明方法的接口，该接口可以是代理类赖以继承方法的代理接口的超接口。
**args** ：包含传入代理实例上方法调用的参数值的对象数组，如果接口方法不使用参数，则为 null。基本类型的参数被包装在适当基本包装器类（如
`java.lang.Integer` 或`java.lang.Boolean`）的实例中。
以下代码就是一个简单的动态代理的实例：
    package main.java.com.ms08067.dtProxy;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Method;
    import java.lang.reflect.Proxy;
    public class dtProxyDemo {
    }
    interface Speaker{
        public void speak();
    }
    class xiaoMing implements Speaker {
        @Override
        public void speak() {
            System.out.println("我有纠纷!");
        }
    }
    class xiaoHua implements Speaker {
        @Override
        public void speak() {
            System.out.println("我有纠纷!");
        }
    }
    class LawyerProxy implements InvocationHandler {
        Object obj;
        public LawyerProxy(Object obj){
            this.obj = obj;
        }
        @Override
        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
            if(method.getName().equals("speak")){
                System.out.println("有什么可以帮助你的");
                method.invoke(obj,args);
                System.out.println("根据 XXXX 法律，应该 XXXX");
            }
            return null;
        }
    }
    class gov{
        public static void main(String[] args) {
        xiaoMing xiaoMing = new xiaoMing();
        xiaoHua xiaoHua = new xiaoHua();
        LawyerProxy xiaoMing_lawyerProxy = new LawyerProxy(xiaoMing);
        LawyerProxy xiaoHua_lawyerProxy = new LawyerProxy(xiaoHua);
        Speaker xiaoMingSpeaker = (Speaker) Proxy.newProxyInstance(gov.class.getClassLoader(),new Class[]{Speaker.class},xiaoMing_lawyerProxy);
        xiaoMingSpeaker.speak();
        System.out.println("*********************");
        Speaker xiaoHuaSpeaker = (Speaker) Proxy.newProxyInstance(gov.class.getClassLoader(),new Class[]{Speaker.class},xiaoHua_lawyerProxy);
        xiaoHuaSpeaker.speak();
        }
    }
以上代码就是使用动态代理的方式，当为某个类或接口指定`InvocationHandler`对象时（如：`LawyerProxy`），那么在调用该类或接口方法时,就会去调用指定`handler`的`invoke()`方法（37行）。
运行结果如下图所示：
### 5、hash碰撞
所谓的`hash`碰撞是指两个不同的字符串计算得到的`Hash`值相同。
如在[国外社区上](https://stackoverflow.com/questions/18746394/can-a-non-empty-string-have-a-hashcode-of-zero)就有人给出了以下计算 hash 值为 0 的代码：
    public class hashtest {
        public static void main(String[] args){
            long i = 0;
            loop: while(true){
                String s = Long.toHexString(i);
                if(s.hashCode() == 0){
                    System.out.println("Found: '"+s+"'");
                   // break loop;
                }
                if(i % 1000000==0){
                 //   System.out.println("checked: "+i);
                }