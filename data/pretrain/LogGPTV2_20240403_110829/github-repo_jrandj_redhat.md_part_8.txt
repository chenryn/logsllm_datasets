		setfacl -m u:user100:rw,u:user200:rwx acluser
		getfacl acluser
		# ACLs have been added
		setfacl -x user100,user200 acluser
		getfacl acluser
		# ACLs have been removed
        ```
1. Asghar Ghori - Exercise 4-8: Apply, Identify, and Erase Default ACLs
	* Create a directory *projects* as *user100* under `/tmp`. Set the default ACLs on the directory for *user100* and *user200* to give them full permissions. Create a subdirectory *prjdir1* and a file *prjfile1* under *projects* and observe the effects of default ACLs on them. Delete the default entries:
	    ```shell
		# as user100
		cd /tmp
		mkdir projects
		getfacl projects
		# No default ACLs for user100 and user200
		setfacl -dm u:user100:rwx,u:user200:rwx projects
		getfacl projects
		# Default ACLs added for user100 and user200
		mkdir projects/prjdir1
		getfacl prjdir1
		# Default ACLs inherited
		touch prjdir1/prjfile1
		getfacl prjfile1
		# Default ACLs inherited
		setfacl -k projects
        ```
1. Asghar Ghori - Exercise 5-1: Create a User Account with Default Attributes
	* Create *user300* with the default attributes in the *useradd* and *login.defs* files. Assign this user a password and show the line entries from all 4 authentication files:
	    ```shell
		useradd user300
		passwd user300
		grep user300 /etc/passwd /etc/shadow /etc/group /etc/gshadow
        ```
1. Asghar Ghori - Exercise 5-2: Create a User Account with Custom Values
	* Create *user300* with the default attributes in the *useradd* and *login.defs* files. Assign this user a password and show the line entries from all 4 authentication files:
	    ```shell
		useradd user300
		passwd user300
		grep user300 /etc/passwd /etc/shadow /etc/group /etc/gshadow
        ```
1. Asghar Ghori - Exercise 5-3: Modify and Delete a User Account
	* For *user200* change the login name to *user200new*, UID to 2000, home directory to `/home/user200new`, and login shell to `/sbin/nologin`. Display the line entry for *user2new* from the *passwd* for validation. Remove this user and confirm the deletion:
	    ```shell
		usermod -l user200new -m -d /home/user200new -s /sbin/nologin -u 2000 user200
		grep user200new /etc/passwd # confirm updated values
		userdel -r user200new
		grep user200new /etc/passwd # confirm user200new deleted
        ```
1. Asghar Ghori - Exercise 5-4: Create a User Account with No-Login Access
	* Create an account *user400* with default attributes but with a non-interactive shell. Assign this user the nologin shell to prevent them from signing in. Display the new line entry frmo the *passwd* file and test the account:
	    ```shell
		useradd user400 -s /sbin/nologin
		passwd user400 # change password
		grep user400 /etc/passwd
		sudo -i -u user400 # This account is currently not available
        ```
1. Asghar Ghori - Exercise 6-1: Set and Confirm Password Aging with chage
	* Configure password ageing for user100 using the *chage* command. Set the mindays to 7, maxdays to 28, and warndays to 5. Verify the new settings. Rerun the command and set account expiry to January 31, 2020:
	    ```shell
		chage -m 7 -M 28 -W 5 user100
		chage -l user100
		chage -E 2021-01-31 user100
		chage -l
        ```
1. Asghar Ghori - Exercise 6-2: Set and Confirm Password Aging with passwd
	* Configure password aging for *user100* using the *passwd* command. Set the mindays to 10, maxdays to 90, and warndays to 14, and verify the new settings. Set the number of inactivity days to 5 and ensure that the user is forced to change their password upon next login:
	    ```shell
		passwd -n 10 -x 90 -w 14 user100
		passwd -S user100 # view status
		passwd -i 5 user100
		passwd -e user100
		passwd -S user100
        ```
1. Asghar Ghori - Exercise 6-3: Lock and Unlock a User Account with usermod and passwd
	* Disable the ability of user100 to log in using the *usermod* and *passwd* commands. Verify the change and then reverse it:
	    ```shell
		grep user100 /etc/shadow # confirm account not locked by absence of "!" in password
		passwd -l user100 # usermod -L also works
		grep user100 /etc/shadow
		passwd -u user100 # usermod -U also works
        ```
1. Asghar Ghori - Exercise 6-4: Create a Group and Add Members
	* Create a group called *linuxadm* with GID 5000 and another group called *dba* sharing the GID 5000. Add *user100* as a secondary member to group *linxadm*:
	    ```shell
		groupadd -g 5000 linuxadm
		groupadd -o -g 5000 dba # note need -o to share GID
		usermod -G linuxadm user100
		grep user100 /etc/group # confirm user added to group
        ```
1. Asghar Ghori - Exercise 6-5: Modify and Delete a Group Account
	* Change the *linuxadm* group name to *sysadm* and the GID to 6000. Modify the primary group for user100 to *sysadm*. Remove the *sysadm* group and confirm:
	    ```shell
		groupmod -n sysadm -g 6000 linuxadm
		usermod -g sysadm user100
		groupdel sysadm # can't remove while user100 has as primary group
        ```
1. Asghar Ghori - Exercise 6-6: Modify File Owner and Owning Group
	* Create a file *file10* and a directory *dir10* as *user200* under `/tmp`, and then change the ownership for *file10* to *user100* and the owning group to *dba* in 2 separate transactions. Apply ownership on *file10* to *user200* and owning group to *user100* at the same time. Change the 2 attributes on the directory to *user200:dba* recursively:
	    ```shell
		# as user200
		mkdir /tmp/dir10
		touch /tmp/file10
		sudo chown user100 /tmp/file10 		
		sudo chgrp dba /tmp/file10
		sudo chown user200:user100 /tmp/file10
		sudo chown -R user200:user100 /tmp/dir10
        ```
1. Asghar Ghori - Exercise 7-1: Modify Primary Command Prompt
	* Customise the primary shell prompt to display the information enclosed within the quotes "\:" using variable and command substitution. Edit the `~/.profile`file for *user100* and define the new value in there for permanence:
	    ```shell
		export PS1=""
		# add to ~/.profile for user100
        ```
1. Asghar Ghori - Exercise 8-1: Submit, View, List, and Remove an at Job
	* Submit a job as *user100* to run the *date* command at 11:30pm on March 31, 2021, and have the output and any error messages generated redirected to `/tmp/date.out`. List the submitted job and then remove it:
	    ```shell
		# as user100
		at 11:30pm 03/31/2021
		# enter "date &> /tmp/date.out"
		atq # view job in queue
		at -c 1 # view job details
		atrm 1 # remove job
        ```
1. Asghar Ghori - Exercise 8-2: Add, List, and Remove a Cron Job
	* Assume all users are currently denied access to cron. Submit a cron job as *user100* to echo "Hello, this is a cron test.". Schedule this command to execute at every fifth minute past the hour between 10:00 am and 11:00 am on the fifth and twentieth of every month. Have the output redirected to `/tmp/hello.out`. List the cron entry and then remove it:
	    ```shell
		# as root
		echo "user100" > /etc/cron.allow
		# ensure cron.deny is empty
		# as user100
		crontab
		# */5 10,11 5,20 * * echo "Hello, this is a cron test." >> /tmp/hello.out
		crontab -e # list
		crontab -l # remove
        ```
1. Asghar Ghori - Exercise 9-1: Perform Package Management Tasks Using rpm
	* Verify the integrity and authenticity of a package called *dcraw* located in the `/mnt/AppStream/Packages` directory on the installation image and then install it. Display basic information about the package, show files it contains, list documentation files, verify the package attributes and remove the package: 
	    ```shell
		ls -l /mnt/AppStream/Packages/dcraw*
		rpmkeys -K /mnt/AppStream/Packages/dcraw-9.27.0-9.e18.x86_64.rpm # check integrity
		sudo rpm -ivh /mnt/AppStream/Packages/dcraw-9.27.0-9.e18.x86_64.rpm # -i is install, -v is verbose and -h is hash
		rpm -qi dcraw # -q is query and -i is install
		rpm -qd dcraw # -q is query and -d is docfiles
		rpm -Vv dcraw # -V is verify and -v is verbose
		sudo rpm -ve # -v is verbose and -e is erase
        ```
1. Asghar Ghori - Exercise 10-1: Configure Access to Pre-Built ISO Repositories
	* Access the repositories that are available on the RHEL 8 image. Create a definition file for the repositories and confirm:
	    ```shell
		df -h # after mounting optical drive in VirtualBox
		vi /etc/yum.repos.d/centos.local
		# contents of centos.local
        #####
        #[BaseOS]
		#name=BaseOS
		#baseurl=file:///run/media/$name/BaseOS
		#gpgcheck=0
		#
        #[AppStream]
		#name=AppStream
		#baseurl=file:///run/media/$name/AppStream
		#gpgcheck=0
        #####
		dnf repolist # confirm new repos are added
        ```
1. Asghar Ghori - Exercise 10-2: Manipulate Individual Packages
	* Determine if the *cifs-utils* package is installed and if it is available for installation. Display its information before installing it. Install the package and display its information again. Remove the package along with its dependencies and confirm the removal:
	    ```shell
		dnf config-manager --disable AppStream
		dnf config-manager --disable BaseOS
		dnf list installed | greps cifs-utils # confirm not installed
		dnf info cifs-utils # display information
		dnf install cifs-utils -y
		dnf info cifs-utils # Repository now says @System
		dnf remove cifs-utils -y
        ```
1. Asghar Ghori - Exercise 10-3: Manipulate Package Groups
	* Perform management operations on a package group called *system tools*. Determine if this group is already installed and if it is available for installation. List the packages it contains and install it. Remove the group along with its dependencies and confirm the removal:
	    ```shell
		dnf group list # shows System Tools as an available group
		dnf group info "System Tools"
		dnf group install "System Tools" -y
		dnf group list "System Tools" # shows installed
		dnf group remove "System Tools" -y
        ```
1. Asghar Ghori - Exercise 10-4: Manipulate Modules
	* Perform management operations on a module called *postgresql*. Determine if this module is already installed and if it is available for installation. Show its information and install the default profile for stream 10. Remove the module profile along with any dependencies and confirm its removal:
	    ```shell
		dnf module list "postgresql" # no [i] tag shown so not installed
		dnf module info postgresql:10 # note there are multiple streams
		sudo dnf module install --profile postgresql:10 -y
		dnf module list "postgresql" # [i] tag shown so it's installed
		sudo dnf module remove postgresql:10 -y
        ```
1. Asghar Ghori - Exercise 10-5: Install a Module from an Alternative Stream
	* Downgrade a module to a lower version. Remove the stream *perl* 5.26 and confirm its removal. Manually enable the stream *perl* 5.24 and confirm its new status. Install the new version of the module and display its information:
	    ```shell
		dnf module list perl # 5.26 shown as installed
		dnf module remove perl -y
		dnf module reset perl # make no version enabled
		dnf module install perl:5.26/minimal --allowerasing
		dnf module list perl # confirm module installed
        ```
1. Asghar Ghori - Exercise 11-1: Reset the root User Password
	* Terminate the boot process at an early stage to access a debug shell to reset the root password:
	    ```shell
		# add rd.break affter "rhgb quiet" to reboot into debug shell
		mount -o remount, rw /sysroot
		chroot /sysroot
		passwd # change password
		touch /.autorelabel
        ```
1. Asghar Ghori - Exercise 11-2: Download and Install a New Kernel
	* Download the latest available kernel packages from the Red Hat Customer Portal and install them:
	    ```shell
		uname -r # view kernel version
		rpm -qa | grep "kernel"
		# find versions on access.redhat website, download and move to /tmp
		sudo dnf install /tmp/kernel* -y
        ```
1. Asghar Ghori - Exercise 12-1: Manage Tuning Profiles
	* Install the *tuned* service, start it and enable it for auto-restart upon reboot. Display all available profiles and the current active profile. Switch to one of the available profiles and confirm. Determine the recommended profile for the system and switch to it. Deactive tuning and reactivate it:
	    ```shell
		sudo systemctl status tuned-adm # already installed and enabled
		sudo tuned-adm profile # active profile is virtual-guest
		sudo tuned-adm profile desktop # switch to desktop profile
		sudo tuned-adm profile recommend # virtual-guest is recommended
		sudo tuned-adm off # turn off profile
        ```
1. Asghar Ghori - Exercise 13-1: Add Required Storage to server2
	* Add 4x250MB, 1x4GB, and 2x1GB disks:
	    ```shell
		# in virtual box add a VDI disk to the SATA controller
		lsblk # added disks shown as sdb, sdc, sdd
        ```
1. Asghar Ghori - Exercise 13-2: Create an MBR Partition
	* Assign partition type "msdos" to `/dev/sdb` for using it as an MBR disk. Create and confirm a 100MB primary partition on the disk:
	    ```shell
		parted /dev/sdb print # first line shows unrecognised disk label
		parted /dev/sdb mklabel msdos
		parted /dev/sdb mkpart primary 1m 101m
		parted /dev/sdb print # confirm added partition
        ```
1. Asghar Ghori - Exercise 13-3: Delete an MBR Partition
	* Delete the *sdb1* partition that was created in Exercise 13-2 above:
	    ```shell
		parted /dev/sdb rm 1
		parted /dev/sdb print # confirm deletion
        ```
1. Asghar Ghori - Exercise 13-4: Create a GPT Partition
	* Assign partition type "gpt" to `/dev/sdc` for using it as a GPT disk. Create and confirm a 200MB partition on the disk:
	    ```shell
		gdisk /dev/sdc
		# enter n for new
		# enter default partition number
		# enter default first sector
		# enter +200MB for last sector
		# enter default file system type
		# enter default hex code
		# enter w to write
		lsblk # can see sdc1 partition with 200M
        ```
1. Asghar Ghori - Exercise 13-5: Delete a GPT Partition
	* Delete the *sdc1* partition that was created in Exercise 13-4 above:
	    ```shell
		gdisk /dev/sdc
		# enter d for delete
		# enter w to write
		lsblk # can see no partitions under sdc
        ```
1. Asghar Ghori - Exercise 13-6: Install Software and Activate VDO
	* Install the VDO software packages, start the VDO services, and mark it for autostart on subsequent reboots:
	    ```shell
		dnf install vdo kmod-kvdo -y
		systemctl start vdo.service & systemctl enable vdo.service
        ```
1. Asghar Ghori - Exercise 13-7: Create a VDO Volume
	* Create a volume called *vdo-vol1* of logical size 16GB on the `/dev/sdc` disk (the actual size of `/dev/sdc` is 4GB). List the volume and display its status information. Show the activation status of the compression and de-duplication features:
	    ```shell
		wipefs -a /dev/sdc # couldn't create without doing this first
		vdo create --name vdo-vol1 --device /dev/sdc --vdoLogicalSize 16G --vdoSlabSize 128
		# VDO instance 0 volume is ready at /dev/mapper/vdo-vol1
		lsblk # confirm vdo-vol1 added below sdc
		vdo list # returns vdo-vol1
		vdo status --name vdo-vol1 # shows status
		vdo status --name vdo-vol1 | grep -i "compression" # enabled
		vdo status --name vdo-vol1 | grep -i "deduplication" # enabled
        ```
1. Asghar Ghori - Exercise 13-8: Delete a VDO Volume
	* Delete the *vdo-vol1* volume that was created in Exercise 13-7 above and confirm the removal:
	    ```shell
		vdo remove --name vdo-vol1
		vdo list # confirm removal
        ```
1. Asghar Ghori - Exercise 14-1: Create a Physical Volume and Volume Group
	* Initialise one partition *sdd1* (90MB) and one disk *sdb* (250MB) for use in LVM. Create a volume group called *vgbook* and add both physical volumes to it. Use the PE size of 16MB and list and display the volume group and the physical volumes:
	    ```shell
		parted /dev/sdd mklabel msdos
		parted /dev/sdd mkpart primary 1m 91m
		parted /dev/sdd set 1 lvm on
		pvcreate /dev/sdd1 /dev/sdb
		vgcreate -vs 16 vgbook /dev/sdd1 /dev/sdb
		vgs vgbook # list information about vgbook
		vgdisplay -v vbook # list detailed information about vgbook
		pvs # list information about pvs
        ```
1. Asghar Ghori - Exercise 14-2: Create Logical Volumes
	* Create two logical volumes, *lvol0* and *lvbook1*, in the *vgbook* volume group. Use 120MB for *lvol0* and 192MB for *lvbook1*. Display the details of the volume group and the logical volumes:
	    ```shell
		lvcreate -vL 120M vgbook
		lvcreate -vL 192M -n lvbook1 vgbook
		lvs # display information
		vgdisplay -v vgbook # display detailed information about volume group
        ```
1. Asghar Ghori - Exercise 14-3: Extend a Volume Group and a Logical Volume
	* Add another partition *sdd2* of size 158MB to *vgbook* to increase the pool of allocatable space. Initialise the new partition prior to adding it to the volume group. Increase the size of *lvbook1* to 336MB. Display the basic information for the physical volumes, volume group, and logical volume:
	    ```shell
		parted mkpart /dev/sdd primary 90 250
		parted /dev/sdd set 2 lvm on
		parted /dev/sdd print # confirm new partition added
		vgextend vgbook /dev/sdd2