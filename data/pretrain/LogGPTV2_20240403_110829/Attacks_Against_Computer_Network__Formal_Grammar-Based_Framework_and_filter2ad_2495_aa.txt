# Title: Attacks Against Computer Networks: Formal Grammar-Based Framework and Simulation Tool

## Authors
Vladimir I. Gorodetski and Igor V. Kotenko  
St. Petersburg Institute for Informatics and Automation  
39, 14th Liniya, St. Petersburg, Russia  
Email: [PI:EMAIL], [PI:EMAIL]

## Abstract
This paper introduces an approach and formal framework for modeling attacks on computer networks, along with its software implementation using a multi-agent architecture. The model considers the attack as a complex interaction between adversarial entities (either individual or teams of malefactors) and the network security system that enforces a security policy. The focus is on the conceptual justification of the chosen approach, the specification of the basic components of the attack model, and the formal frameworks for specifying these components and their interactions during simulation. Key features of the developed approach include:
1. Intention-centric attack modeling.
2. Multi-level attack specification.
3. Ontology-based distributed attack model structuring.
4. Attributed stochastic LL(2) context-free grammar for formal specification of attack scenarios and their components ("simple attacks").
5. Use of formal grammar substitution for specifying the multi-level structure of attacks.
6. State machine-based formal grammar framework implementation.
7. Online generation of malefactorâ€™s activities based on the reaction of the attacked network security system.

## 1. Introduction
Attacks on computer networks are a significant dimension of cyber terrorism, making the detection and prevention of such attacks a critical concern. Enhancing the efficiency of Intrusion Detection Systems (IDS) can be achieved by generalizing and formalizing the accumulated experience regarding computer attacks. While a substantial amount of data has been collected and systematized in the form of taxonomies and attack languages, there have been no serious attempts to develop a mathematical model of a wide spectrum of attacks for simulation purposes. This is likely due to the extreme complexity of both the network attacks and the computer networks themselves, which makes accurate modeling challenging.

A formal model of attacks could serve as a powerful source of knowledge for IDS development, providing deeper insights into the nature and peculiarities of attacks, such as the intentions of malefactors, attack targets, and attack strategies. Such a model could also generate training and testing samples for both known and unknown attacks, aiding in the learning process of IDSs. Additionally, a formal model and simulation tool could be used as a testbed for validating security policies and evaluating IDS components.

This paper addresses the development of such a model, its formal specification, and implementation issues. The remainder of the paper is structured as follows: Section 2 outlines the conceptual aspects and general strategy of attack modeling, and defines the basic concepts involved in attack specification. Section 3 describes the developed ontology for the problem domain "Computer Network Attacks," which serves as the basis for consistent attack specification. Section 4 presents the proposed formal grammar framework for specifying attacks and provides examples for several classes of attacks. Section 5 discusses the model of the "counterparty" of attacks, i.e., the model of the attacked computer network. Section 6 details the architecture of the Attack Simulation Tool and its implementation. Section 7 reviews related works, and Section 8 summarizes the main results of the paper.

## 2. Attack Modeling Strategy
Computer network attacks are complex systems characterized by large scale, multi-connectivity, diverse connections, variable structures, multiple functions, and structural redundancy. An attack model is a formal object that mimics the essential properties of real-life attacks, facilitating investigations by fixing known information and obtaining new insights.

Key features influencing the choice of a formal attack model include:
1. **Target- and Intention-Centric**: Each attack is directed against a specific target (e.g., network, computer, service, directory, file) and typically has a clear intention. Examples of intentions include reconnaissance, penetration, access to files, and denial of service.
2. **Multi-Level Intentions**: An attack intention can be represented as a partially ordered set of lower-level intentions, forming an attack scenario. These intentions can be realized at different levels of detail, from high-level goals to low-level actions.
3. **Adversary Domain**: Attack development depends on the response of the attacked network, which in turn depends on the implemented security policy. The current state of the attack is influenced by the initial information, information gathered during the attack, and the success or failure of previous steps.

### Conceptual Scheme of Attack Generation
The selection of attack intentions and objects is a subjective act. Given a list of possible intentions \( X = \{X_1, X_2, \ldots, X_N\} \) and a list of attack objects \( Y = \{Y_1, Y_2, \ldots, Y_M\} \), a formal mechanism (e.g., randomization) is used to select an intention \( X \in X \) and an object \( Y \in Y \).

The next step involves generating the attack based on the selected intention and object. For example, if the intention is to gain access to files in a directory, and the malefactor lacks basic information about the network, they might start with reconnaissance. This reconnaissance can be performed through various sub-attacks, and the selection of a sub-attack can be randomized.

Each sub-goal (intention) can be realized as a sequence of commands, and the selection of these sequences can be non-deterministic. The response of the attacked system to each command (success or failure) influences the subsequent steps. If an intention fails, the attack can be stopped or continued by reselecting from the remaining options, with the probability distribution recalculated accordingly.

The state of the attack at any step \( n \) can be specified by a sequence \( A(n) = \langle S, C, U \rangle \), where \( S \) is the sequence of symbols corresponding to the preceding steps, each marked with a success or failure flag; \( C \) is the partially unfolded sequence of the current step; and \( U \) is the unknown part of the sequence yet to be generated. The attack can be simulated at various levels of detail, and the current state includes information collected from previous steps.

Given the impossibility of enumerating all possible attack sequences, the only feasible way to specify attacks is through a procedural approach, using a generation algorithm. This research adopts this approach.

### Terminology and Basic Notions
The basic notions in the developed formal model correspond to the malefactor's intentions, and other notions are structured according to the structure of these intentions, leading to an "intention-centric approach."

The following classes of high-level malefactor's intentions are used:
1. **R - Reconnaissance**: Gathering information about the network or host. Specific cases include:
   - **IH - Identification of Running Hosts**
   - **IS - Identification of Host Services**

By structuring the attack model around these intentions, the framework provides a robust and flexible method for simulating and understanding network attacks.