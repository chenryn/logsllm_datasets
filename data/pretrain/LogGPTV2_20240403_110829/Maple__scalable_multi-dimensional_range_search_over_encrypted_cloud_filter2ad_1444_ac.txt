A. Security
We analyze the security of our SSP-SSE scheme in this
section. First theorem shows that the SSP-SSE is correct
according to the Deﬁnition 10. Second theorem shows that
Fig. 3. An example of position heap tree Λ.
Fig. 4. An example of encrypted position heap tree ¯Λ.
encrypted position heap tree to the cloud provider. In this
phase, the data owner uses the KeyGen, BuildT ree and
Encrypt algorithms to encrypt the document collection as
well as construct encrypted position heap tree. The search
phase is performed every time by the cloud user when
a query is submitted. In this phase, cloud user invokes
the ConstructQuery algorithm to generate the search
query. The cloud provider executes the Search algorithm
to output matching results. Finally, the cloud user invokes
the Decrypt algorithm to decrypt document collection to
original view. We outline the SSP-SSE setup phase in Figure
5 and the SSP-SSE search phase in Figure 6.
1) Setup Phase: Let k be a security parameter and let SKE
= (Gen, Enc, Dec) be a PCPA-secure symmetric encryption
scheme. The data owner uses the KeyGen(k) algorithm
with secret parameter k to generate the set of keys K1, K2
and K3. Next, he constructs a position heap tree Λ using
the BuildT ree algorithm according to Deﬁnition 7. Note,
the BuildT ree algorithm inputs the text t, where t = D1||
. . . || Dn and outputs a single position heap tree Λ. In order
to handle multiple documents in the collection we add some
extra information into the position heap tree1. First, in order
to keep the document order Di, we include the document
identiﬁer of Di in each node in the position heap tree Λ. For
example, if the character “a” appears in the document D0
on position 3, the node in Λ will have label of “id(D0)||3”.
Formally, we concatenate identiﬁer of Dj (j ∈ [1; n]) with
position i of character ti in the text t, where ti is in Dj.
1Note, this additional information does not affect position heap tree
search algorithm outlined in Deﬁnition 8.
170
KeyGen(1k) : given the security parameter k, generate
R←− {0, 1}k. Output the
K1 ← SKE.Gen(1k) and K2,K3
key set K = (K1, K2, K3).
BuildT ree(D) : given the document collection D =
{D1, . . . , Dn},
1) construct text t = D1|| . . . || Dn
2) for each character ti ∈ t, for each document Dj ∈
D, build the position heap tree Λ, where
a) set node(ti) = id(Dj)||i (i.e., concatenate docu-
ment identiﬁer of Dj with position i of character
ti, where ti is in Dj)
b) set path_label = ti||depth(node(ti)) (i.e. con-
catenate character ti with depth of ti in the
tree).
3) output the position heap tree Λ
Encrypt(K1, K2, K3, Λ, D) :
keys
(K1, K2, K3), position heap tree Λ and the set of
documents D = {D1, . . . , Dn}.
Build Encrypted Tree:
1) traverse position heap tree Λ, starting from the root
given the
secret
node
a) set enc_nodei = πK2(nodei) (i.e. encrypt each
node using π with key K2)
b) set enc_path_labeli = ψK3(path_labeli) (i.e.
apply PRP ψ with key K3 on each path label in
Λ)
2) output encrypted ¯Λ
Encrypt Document Collection:
1) for each document Di where i ∈ [1; n], let Ci ←
2) output C = {C1, C2, . . . , Cn}.
Output: Encrypted position heap tree ¯Λ and encrypted
document collection C = {C1, C2, . . . , Cn}.
SKE.EncK1
(Di).
Fig. 5. SSP-SSE Setup Phase.
SSP-SSE is secure against chosen-keyword attack (CKA-2)
executed by adaptive adversary according to the Deﬁnition
14.
Theorem 1: (Correctness). Substring Positions Search-
able Symmetric Encryption (SSP-SSE) presented above is
correct according to Deﬁnition 10.
Proof: The Search algorithm inputs the encrypted po-
sition heap tree ¯Λ and the search query Q. Since the path
labels in ¯Λ and the search query Q are both encrypted
with the same instance of pseudorandom permutation ψ,
the correctness of SSP-SSE scheme relies on the correctness
of pseudorandom permutation.
When the cloud provider receives the query Q, it tra-
verses the path labels in the encrypted position heap tree
¯Λ (according to Deﬁnition 8). Search query Q is con-
structed using the pseudorandom permutation ψ on string
of characters χ. Each encrypted path label in ¯Λ is con-
structed using the pseudorandom permutation ψ on set of
characters extracted from the original document collection
D = {D1, . . . , Dn}. Therefore, the search algorithm outputs
true if the document Di contains the string of characters χ.
Cloud provider will output a set documents that match the
search query Q.
ConstructQuery(K3, χ) : given the secret key K3 and
the string of interest χ, output the search query Q as
follows:
1) set Q = null
2) for each character χi, where i ∈ [0; |χ|]
a) set Q += ψK3(χi||i)
3) output search query Q
Search( ¯Λ, Q) : input the encrypted position heap tree
¯Λ and the search query Q.
1) traverse the tree ¯Λ, starting at root node
a) follow each enc_path_label in ¯Λ that match
query Q
b) return encrypted nodes
{(enc_node)1,
. . . ,
[1; m]
(enc_node)m}
Decrypt(K1, K2, Ci) :
1) (id(Dj)||pos)m ← π
2) retrieve set C = {C1,
3) Di, ← SKE.DecK1
{(D1, posD1
4) output
provider
−1
K2
(enc_nodei), where i ∈
. . . , Ck} from the cloud
(Ci), where i ∈ [1; k]
. . . , (Dk, posDk
),
)}, where
posDi is the set of matching positions in Di
Fig. 6. SSP-SSE Search Phase.
Theorem 2: (Security). Let SKE be a symmetric PCPA-
secure encryption scheme. Let π and ψ be pseudorandom
permutations. Substring Position Searchable Symmetric En-
cryption (SSP-SSE) presented above is ((cid:4)1, (cid:4)2) adaptively
secure against chosen-keyword attacks as deﬁned in Deﬁni-
tion 14 (CKA-2 security), where (cid:4)1 and (cid:4)2 are the possible
leakages.
C = {(cid:4)
C1, . . . , (cid:4)
In a nutshell, the proof of security of SSP-SSE scheme
works as follows. The simulator (cid:5) generates a simulated
encrypted position heap tree (cid:3)
ciphertexts (cid:3)
Λ and a simulated set of
Cn} using leakage (cid:4)1 that disclose
number of encrypted documents, size of encrypted docu-
simulated encrypted position heap tree (cid:3)
ments and identiﬁer of each encrypted document. Here, the
Λ is constructed
using pseudorandom permutations π and ψ with random
that the simulated encrypted position heap tree (cid:3)
values. The pseudorandomness of π and ψ will guarantee
Λ is in-
Moreover, simulated set of ciphertext (cid:3)
distinguishable from the real encrypted position heap tree.
C is indistinguishable
from the real encrypted document collection.
The search algorithm is simulated in similar way that
requires the to keep track of different dependencies between
the result output and the search query. However, since
the real search query is constructed with pseudorandom
permutation ψ, the simulator is not able to distinguish it
from the simulated query. Similarly, simulated outcome of
search is indistinguishable from the real set of nodes. We
outline the formal proof as follows.
Proof: Polynomial-size simulator (cid:5) can be deﬁned such
that for any challenger and any polynomial-time adver-
sary (cid:6), the outputs of two experiments IdealA,S(k) and
RealA(k) with secret parameter k are computationally in-
distinguishable. We now describe the details of experiment
171
IdealA,S(k).
• (cid:5)(1k, (cid:4)1): The simulator (cid:5) has a leakage (cid:4)1 which gives
the simulator information about the number and size
of documents as well as identiﬁer of each encrypted
document. The simulator (cid:5) randomly generates a set
of simulated ciphertexts (cid:3)
position heap tree (cid:3)
C and simulated encrypted
◦ Simulator outputs the set of ciphertexts (cid:3)
{(cid:4)
C1, . . . , (cid:4)
Cn}, where (cid:4)
C =
◦ Simulator sets the encrypted nodes as (cid:5)
R←−
R←−
{0, 1} between the encrypted nodes to form (cid:3)
{0, 1} and sets the path labels
Λ. The
(cid:3)
simulator outputs the encrypted position heap tree
Λ.
(cid:5)
enc_nodei
enc_path_labeli
R←− {0, 1}|Di|.
Λ as follows:
Ci
At this point, the simulator (cid:5) generated the set of en-
crypted documents (cid:3)
(cid:3)
C and the encrypted position heap tree
Λ. Next, the adversary (cid:6) adaptively queries the polynomial-
size simulator (cid:5) as follows.
• (cid:5)(1k, (cid:4)1, (cid:4)2): The adversary (cid:6) sends a new query Q
to the simulator (cid:5). The simulator now starts collecting
various dependencies between incoming search query
and resulted output. (cid:5) traverses the simulated en-
crypted position heap tree (cid:3)
Λ starting from the root
set of matching encrypted nodes in (cid:3)
node, following the simulated path labels to ﬁnd the
Λ. The simulator
outputs the set of resulted encrypted nodes.
randomly set of ciphertexts (cid:3)
We now need to show that the outputs of two experi-
ments are indistinguishable. Since the simulator generates
C, the output of the simulator
is truly indistinguishable from the real ciphertexts that are
generated with PCPA-secure symmetric encryption scheme
SKE scheme using secret key K1. Otherwise, this would
mean that simulator could distinguish between the output
of PCPA-secure symmetric encryption scheme SKE and the
random value. Next, since simulator (cid:5) generates random K2
and K3, the simulated encrypted position heap tree (cid:3)
Λ is truly
indistinguishable from the real encrypted position heap tree.
Otherwise, this would mean that simulator could distinguish
between the output of pseudorandom permutations π and
ψ, and the random values. Simulated search query Q is
truly indistinguishable from the real search query. Similarly,
simulated encrypted nodes and path labels are truly indis-
tinguishable from the real values. Thus, this concludes that
the outputs of two experiments are indistinguishable.
B. Performance
We compare SSP-SSE solution with previous searchable
encryption schemes in Table I. Our comparison is based on
a set of simple quantitative metrics: search technique, dy-
namic updates, security notion and search complexity. SSP-
SSE scheme is the ﬁrst among the previous works to support
the substring search over the encrypted cloud data. We use
security notations from [5]. Our analysis demonstrates that
SSP-SSE is CKA-2 secure in the random oracle model. SSP-
SSE scheme is very efﬁcient since the search for a string χ
can be performed in O(m + k) time, where m is the length
of χ and k is the number of occurrences of χ in document
collection n. All previous solutions can only achieve linear
O(#n) or sublinear O(#nχ) search times to the document
collection size.
Security
Dynamism
Search time
Scheme
Song et al. [1]
Goh et al. [2]
Curtmola-1 et al. [5]
Curtmola-2 et al. [5]
Moataz et al. [3]
Kamara et al. [11]
Wang et al. [28]
SSP-SSE
Search
Exact
Exact
Exact
Exact
Exact
Exact
Fuzzy
Substring
CPA
CKA1
CKA1
CKA2
CKA2
CKA2
CKA2
CKA2
Static
Dynamic
Static
Static
Static
Dynamic
Static
Static
O(|n|)
O(#n)
O(#nχ)
O(#n)
O(#n)
O(#nχ)
O(τ× #χ)
O(m + k)
TABLE I.
COMPARISON OF SEVERAL SEARCHABLE ENCRYPTION SCHEMES.
n IS THE DOCUMENT COLLECTION, |n| DENOTES ITS BIT LENGTH, #n IS THE
NUMBER OF DOCUMENTS IN THE COLLECTION n, #nχ IS THE NUMBER OF
DOCUMENTS THAT CONTAIN STRING OF CHARACTERS χ, #χ IS THE SIZE OF
THE KEYWORD SPACE, m IS THE LENGTH OF χ AND k IS THE NUMBER OF
OCCURRENCES OF χ DOCUMENT COLLECTION n, τ IS THE NUMBER OF FUZZY
BINS CONSTRUCTED FROM n. .
VI. MULTI-USER SUBSTRING POSITION SEARCHABLE
SYMMETRIC ENCRYPTION (MSSP-SSE)