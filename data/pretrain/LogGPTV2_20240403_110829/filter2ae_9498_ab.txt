        while len(ep)  0 else libs # normalize
我们继续编码磁盘上PE大小与内存 _大小_ （其 _虚拟大小_ ）的比率：
    min（sz，pe.virtual_size）/ max（sz，pe.virtual_size）
接下来，我们想要编码关于PE部分的一些信息，例如包含代码的部分与包含数据的部分的数量，标记为可执行的部分，每个部分的平均（ [Shannon
entropy](https://en.wikipedia.org/wiki/Entropy_information_theory)）以及它们的大小与其虚拟的平均比率size
- 这些数据点将告诉模型PE是否以及如何打包/压缩/混淆：
    def encode_sections(pe):
        sections = [{ \
            'characteristics': ','.join(map(str, s.characteristics_lists)),
            'entropy': s.entropy,
            'name': s.name,
            'size': s.size,
            'vsize': s.virtual_size } for s in pe.sections]
        num_sections = len(sections)
        max_entropy  = max([s['entropy'] for s in sections]) if num_sections else 0.0
        max_size     = max([s['size'] for s in sections]) if num_sections else 0.0 
        min_vsize    = min([s['vsize'] for s in sections]) if num_sections else 0.0
        norm_size    = (max_size / min_vsize) if min_vsize > 0 else 0.0
        return [ \
            # code_sections_ratio
            (len([s for s in sections if 'SECTION_CHARACTERISTICS.CNT_CODE' in s['characteristics']]) / num_sections) if num_sections else 0,
            # pec_sections_ratio
            (len([s for s in sections if 'SECTION_CHARACTERISTICS.MEM_EXECUTE' in s['characteristics']]) / num_sections) if num_sections else 0,
            # sections_avg_entropy
            ((sum([s['entropy'] for s in sections]) / num_sections) / max_entropy) if max_entropy > 0 else 0.0,
            # sections_vsize_avg_ratio
            ((sum([s['size'] / s['vsize'] for s in sections]) / num_sections) / norm_size) if norm_size > 0 else 0.0,
        ]
最后，我们将所有碎片粘合到一个大小的矢量中`486`：
    v = np.concatenate([ \
        encode_properties(pe),
        encode_entrypoint(ep_bytes),
        encode_histogram(raw),
        encode_libraries(pe),
        [ min(sz, pe.virtual_size) / max(sz, pe.virtual_size)],
        encode_sections(pe)
        ])
    return v
剩下要做的唯一事情是告诉我们的模型如何通过自定义先前由ergo创建的`prepare.py`文件中的`prepare_input`函数来编码输入样本——
以下实现支持给定其路径的文件的编码，给定其内容（作为文件上传到ergo API），或者只是对标量特征的原始向量进行评估：
    # used by `ergo encode  ` to encode a PE in a vector of scalar features
    # used by `ergo serve ` to parse the input query before running the inference
    def prepare_input(x, is_encoding = False):
        # file upload
        if isinstance(x, werkzeug.datastructures.FileStorage):
            return encoder.encode_pe(x)
        # file path
        elif os.path.isfile(x) :