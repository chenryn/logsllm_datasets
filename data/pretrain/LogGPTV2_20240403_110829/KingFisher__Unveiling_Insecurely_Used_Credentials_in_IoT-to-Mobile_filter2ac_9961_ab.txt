489
smartphone to cheat the IoT device (User Impersonation), or
attack the (insecure) SC distribution (e.g., by utilizing the
hard-coded key embedded in the companion app and device
ﬁrmware) and obtain the SCs (SC Leakage). Moreover, the
attacker can impersonate the cloud server (Vulnerable Third-
parties) to distribute fake SCs or obtain the reported SCs. Once
an attacker obtains or controls the SC, he can directly hijack
the network communication of the smartphone once he is able
to decrypt the trafﬁc, and forge user commands to control the
IoT device (Device Hijacking). Last, the attacker can replay the
SCs not revoked after the unbinding operations to compromise
the IoT-to-Mobile communication (Reusable SCs).
III. SECURITY PROPERTIES OF SHARED CREDENTIALS
We found NO existing guidelines for regulating SC im-
plementations. In response, we propose a number of critical
security properties that a SC MUST1 or SHOULD2 comply
with. To make sure that we identify a set of comprehensive
security properties, we have adopted a two-fold process:
1) We divide the life cycle of SCs into ﬁve stages: genera-
tion, distribution, validation, protection, and revoca-
tion. Then we identify the relevant security properties
for each stage.
2) We refer to existing credential design principles de-
veloped for Client-Server model and OAuth model, as
well as key management standards, according to the
guidelines given by related ofﬁcial documents [14]–[18],
[25], [26].
Based on our design process, we have identiﬁed nine
security properties that we believe are sufﬁcient for a secure
implementation and use of SCs.
Property 1 – Randomness. A SC MUST prevent brute force
and guessing attacks. To achieve this property, a best practice
is to generate SCs with a part constructed from a strong crypto-
graphic pseudo-random number generator (PRNG). According
to security considerations for OAuth 2.0 in RFC6749 [15] and
encryption key in IPsec [26], the probability of an attacker
guessing the generated SCs must be less than or equal to 2−128
and should be less than or equal to 2−160. In view of both
usability and security considerations, we conclude that a SC
should contain at least a 128-bit random number.
Property 2 – Secure Distribution Channel. The distribution
of SCs MUST rely on a secure channel, which fulﬁls strong
authentication, and guarantees conﬁdentiality and integrity.
Authentication requires mutual identity veriﬁcation between
the SC distributor and the SC receiver to prevent man-in-
the-middle (MITM) attacks or potentially malicious clients.
Conﬁdentiality means that the SCs must not be distributed in
the clear, and integrity ensures that SCs cannot be modiﬁed
during transmission. To satisfy those three security require-
ments, the RFC6749 [15], RFC6750 [27] and RFC7519 [16] as
1MUST means that the property is an absolute requirement to implement
a secure SC.
2SHOULD means that some properties may be ignored in speciﬁc cir-
cumstances. But it is still necessary to understand the full implications and
carefully weight them.
well as NIST key management [25] documents, which regulate
OAuth 2.0 authorization framework, JSON web token and
encryption key implementations, all recommend to deploy the
Transport Layer Security protocol [28] (TLSv1.2) with multi-
authentication to protect SC transmission.
Property 3 – End-to-end SC Sharing. A SC MUST be shared
only among the authorized communicating parties. Referring
to the security considerations of OAuth 2.0 in RFC6749 and
HTTP State Management Mechanism in RFC6265 [17], this
property requires that a SC should be only shared between the
IoT device, its companion app and the trusted cloud server.
Property 4 – Different ASC and CSC. An IoT-to-Mobile
communication MUST implement both ASC for authenti-
cation and CSC for communication protection and a given
SC SHOULD be used only for identity authentication be-
tween the communicating parties or only for data encryption.
Speciﬁcally, both ASC and CSC are necessary and the ASC
and CSC used in an IoT-to-Mobile communication should be
different, according to RFC6749 and POLP (Principle of Least
Privilege) [29]. For example, if the ASC and CSC are same, an
attacker would be able to not only decrypt the encrypted trafﬁc,
but also impersonate the smartphone (installing a companion
app with login user accounts) to send fake messages once the
attacker obtains one of the SCs (i.e., ASC or CSC).
Property 5 – Oblivious Validation. Feedback from the SC
validation SHOULD not leak any information about the SC
correctness. This property means that the responses should
not contain any information that can reﬂect the correctness
of the SC (see the OWASP cheat sheet [18]). Like to the
padding oracle attacks [30], incorrectly implemented response
messages can reveal meaningful information about the target
and can be used for SC enumeration or guessing. Thus, when
an invalid SC is detected, a generic response, rather than a
message that contains error details, should be returned.
Property 6 – Brute Force Attack Resistance. The validation
SHOULD only allow limited attempts with incorrect SCs. This
property requires that the validation step maintains a counter
for invalid SCs, which limits the attempts to a reasonable
range to prevent the brute-force attack. The OWASP cheatsheet
recommends that the counter be associated with the SC itself,
rather than the source IP address. A best practice is to use a
threshold of no more than 20 SC attempts from one source.
Property 7 – Encrypted-then-stored SC. A SC MUST be
ﬁrst encrypted, then stored in non-volatile storage medium
such as ﬂash memory (especially on smartphones), to prevent
an attacker from obtaining the SC even when the devices are
compromised. Past research [31] has shown that once the data
is written to mediums such as solid state drives, it is not easy
to erase it securely. Therefore if SCs are to be stored, they
should be stored in ciphertext form. OWASP Cryptographic
Storage cheatsheet suggests to protect SCs using either AES
with at least 128 bits key and a secure mode, or ECC with
Curve25519 or RSA with at least 2048 bits key.
Property 8 – Short-term SC. A SC SHOULD not be used for
a long time. This property requires that the communication sets
a SC expiration timeout to reduce the attack window. Referring
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:18 UTC from IEEE Xplore.  Restrictions apply. 
490
the X.509 PKI Certiﬁcate standard
to the RFC5280 [32],
document and key management guide [33], used SCs should be
immediately discarded after a session is terminated; OWASP
cheatsheet [18] even suggests that for long time sessions, the
SCs should be set to expire and renewed in eight hours to
balance usability and security.
Property 9 – Revocable SC. A SC SHOULD be revoked
actively when it is leaked or expired. This property requires
that a secure SC revocation mechanism should be provided.
According to OWASP JSON Web Token cheatsheet [18] and
NIST key management [25], before using or validating a SC,
the communication parties should check whether the SC is
revoked. If a SC is revoked, it should fail the veriﬁcation and
not be used for later communications.
IV. DETECTING INSECURELY USED SHARED
CREDENTIALS
KINGFISHER is based on two analyses: i) an analysis of
both app code and network trafﬁc to collect functions and
packets that are related to SCs; ii) a value-based analysis to
detect the SCs used for IoT-to-Mobile communication and
label the corresponding functions containing these SCs.
Concerning the ﬁrst analysis, KINGFISHER explores all
the potential information related to SCs. We observed that
IoT vendors commonly customize their proprietary protocols
to construct IoT-to-Mobile communication without disclos-
ing speciﬁcations and protocol formats. Therefore identifying
functions and network trafﬁc related to SCs is challenging.
Existing approaches for the analysis of protocol formats and
types [34]–[36] are unable to analyze IoT-to-Mobile com-
munications. Some of them can only handle protocols with
plain-text messages, while others cannot pinpoint
the SC-
related ﬁelds since they only rely on network trafﬁc analysis.
In addition, a simple static code analysis cannot identify the
dynamically generated SCs. Hence, KINGFISHER conducts a
hybrid analysis of both functions and packets so to gather
comprehensive information for the subsequent analysis.
The main challenge for the second analysis, aiming to detect
the SCs used for IoT-to-Mobile communication, is that since
the SCs are generated by the IoT device or the IoT cloud, it
is difﬁcult to track the data ﬂow of each SC. Unlike creden-
tials generated by the apps, the SCs are typically processed
through multiprocessing (e.g., Binder IPC mechanism [37])
and multithreading, which involve both Java code and native
code. Therefore, the existing analysis techniques [38], [39]
cannot track the data ﬂow of the SC precisely because they
cannot analyze code with portions written in multiple lan-
guages simultaneously. KINGFISHER thus uses a value-based
comparison, which is a code-independent method at the data
ﬂow level, to detect the SCs and the functions that process the
SCs, without requiring information about the standard/format
followed for encoding the SCs.
KINGFISHER executes four steps to assess the security of
SCs (see the workﬂow in Figure 2). It ﬁrst analyzes the app
code to label functions correlated to SCs (Function Interface
Identiﬁcation). It then combines app dynamic instrumentation
with network trafﬁc analysis to collect function runtime values
and network packets that are potentially correlated to SCs
(Message Collection). Given the collected functions and net-
work packets, KINGFISHER tracks the data ﬂow of each SC
in multiple modules/apps (Value-based Analysis) and pinpoints
the ﬂawed implementations (Security Violation Detection).
A. Function Interface Identiﬁcation
To obtain the SC from a companion app, KINGFISHER
identiﬁes SC-related candidates
that are potentially di-
rectly/indirectly data dependent on the SC. As the SC can
be created by the cloud or negotiated locally between the IoT
device and the smartphone, KINGFISHER explores the dynam-
ically loaded functions and further identiﬁes the candidates
based on the usage of SCs.
are
the
app
[40]. Then it
conducts
during
In particular, KINGFISHER ﬁrst extracts all
execution
functions
through
that
loaded
ClassLoaders
a keyword-
based search to retrieve SC-related candidates. For keyword
matching, we manually built a reference set containing a list
of function names that are commonly used to name SC-related
function. In regard to the usage of SCs, they are generally
utilized in user authentication and authorization, cryptographic
algorithms, and data protection. Thus, we manually explored
the SC-related functions from the top 100 IoT app projects
and sample codes on Github and StackOverﬂow to extract the
relevant keywords (e.g., “encrypt”, “build”, “token”). Given a
reference set, KINGFISHER compares the dynamically loaded
function with all
the keywords in the set. A function is
labeled as a SC-related candidate if any keyword is included
as a subword of the function name. KINGFISHER includes
the function prototypes of the SC-related candidates (i.e.,
function name, parameter types, return type) in a SC Function
Candidate List.
B. Message Collection
KINGFISHER further dynamically collects the values pass-
ing through the corresponding SC-related candidate functions
and conducts network trafﬁc analysis.
Function Value Collection. To distinguish SCs, we construct
an instrumentation component based on Frida [41] to track the
function parameter values and return values for each candidate
in the SC function candidate list.
Unlike common functions that are usually written in high-
level Java code, SC transmission through network communica-
tion involves functions in both Java code and native code, that
is, the SC-related candidates might exist in either Java code or
native code. KINGFISHER processes the function candidates in
different code levels separately because the programming logic
and instrumentation interfaces of Java code and native code
are inconsistent. To be more speciﬁc, KINGFISHER directly
hooks each SC-related candidate in Java code to obtain all its
parameter values and return values. For native code, KING-
FISHER classiﬁes the parameters and return variables of each
SC-related function into “pointer” and “non-pointer” variables.
For each pointer variable, KINGFISHER obtains the variable
value by extracting the pointed address and further visits the
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:18 UTC from IEEE Xplore.  Restrictions apply. 
491
Function Interface Identification
SC Function 
Candidate List
Message Collection
Function 
Information List
IoT Android 
Companion Apps
Reference set
API Filtering
Java Code
Native Code
Function Value Collection
Traffic Clustering
IoT-to-Mobile 
Communication Packet List
IoT-to-Mobile Communication
Fig. 2. The workﬂow of KINGFISHER analysis framework
Value-based Analysis
Coarse Candidate Selection
Fine-grained SC Recognition
SC-related 
Functions
SCs
Security Violation Detection
P1P1
P2P2
P3P3
P4P4
P5P5
P6P6
P7P7
P8P8
P9P9
corresponding memory block of the address, which ends with
a sequence of ‘00’ to collect the value stored in the memory
block3. As the parameter variables might be handled within
the function, their values might be modiﬁed. KINGFISHER
thus records the initial and ﬁnal values of each variable.
Alternatively, KINGFISHER directly records the runtime values
of non-pointer variables. All the information about the variable
values is stored in a function information list, aligned with the
SC-related candidates.
Trafﬁc Clustering. KINGFISHER analyzes network trafﬁc to
identify IoT-to-Mobile communication packets. By executing
tcpdump [42], KINGFISHER captures all network packets
transmitted by the smartphone. It
then relies on the IP
addresses of both the IoT device and the smartphone to
distinguish whether a packet is transmitted for IoT-to-Mobile
communication, that is, a packet is considered as an IoT-to-
Mobile communication packet if it contains the IP addresses
of the IoT device and the smartphone. In addition to IoT-
to-Mobile communication packets involving SCs, there are
IoT-to-Mobile communication packets used for other purposes,
such as heartbeat packets.
Accordingly, KINGFISHER clusters the similar packets into
the same group. Given the IoT-to-Mobile communication
packets, KINGFISHER utilizes a trafﬁc clustering-based Se-
quence Alignment [43] to cluster the similar network packets
into a group. Speciﬁcally, KINGFISHER pairwise compares
all the IoT-to-Mobile communication packets and computes
a similarity score of each packet pair by using a message
similarity computation algorithm — Needleman-Wunsch algo-
rithms [44]. According to the similarity score, it then merges
the most similar packets by recursively selecting the pair with
the highest similarity score and executes UPGMA clustering
algorithm [45] to cluster the similar pairs into the same group4.
Since the packets in the same group are similar, all packets
in the same group will be regarded as containing SCs if any
packet is identiﬁed as transmitting a SC. Thus, KINGFISHER
randomly selects one packet from each group to construct an
IoT-to-Mobile communication packet list for the subsequent
value analysis.
3It is important to note that if there is another memory address stored in
the memory block, KINGFISHER continues to visit the memory block of the
new memory address. Such an operation is executed iteratively until a valid
value is read from the memory address.
4We set the dissimilarity index to 0.54 to balance clustering accuracy and
efﬁciency.
C. Value-based Analysis.
Taking as input the function information list and the IoT-
to-Mobile communication packet list, KINGFISHER identiﬁes
the SCs through value comparison.
Coarse Candidate Selection. As a large amount of candidates
and network packets are collected, KINGFISHER ﬁrst ﬁlters
out the irrelevant candidates. It compares the values stored
in the function information list (i.e., parameter values and
the return value) with the values of packets in the IoT-to-
Mobile communication packet list. KINGFISHER considers a
candidate as irrelevant if the function values do not include any
of the packet values. The rest of the candidates are labeled
as initial functions that are directly data dependent on the
involved SC.
In addition, as the return value of each initial function might
also be manipulated by the other functions (i.e., indirectly
data dependent on the SC), KINGFISHER tracks all
these
functions to explore the complete SC data ﬂow. Speciﬁcally,
it compares each return value with the parameter values of
the other candidates and labels each as a related function if
any of its parameter values matches with the return value.
KINGFISHER identiﬁes the related functions iteratively until
no related function is found.
Fine-grained SC Recognition. Based on the related functions
and their values, KINGFISHER next recognizes the used SCs,
i.e., ASC and CSC. Through our manual observation, we
found that most ASCs are encoded in the format of JSON
or based on the format of JSON Web Token, and CSCs are
commonly taken as parameters of the cryptographic functions.
KINGFISHER further examines the SC values with reference to
such an observation. If a value contains a sequence of Base64
strings, KINGFISHER regards the value as an ASC. Otherwise,
when a value is in JSON format, KINGFISHER parses the
JSON string to extract the value from speciﬁc ﬁelds [46], [47],
which is labeled as an ASC. Alternatively, it labels a value as a
CSC if used as an encryption key of a cryptographic function.
is
difﬁcult to locate the parameters of their encryption keys.
To address such an issue, we manually abstract the common
characteristics of the encryption keys [25], namely: (1) the key
length is a multiple of 16; (2) the key length does not exceed
64 bytes5. KINGFISHER then analyzes input/return values of
As some cryptographic functions are customized,
it
5A common CSC used for encryption key is no more than 32 bytes and
considering the hex value of the key, we set the maximum length is 64 bytes.
492
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:18 UTC from IEEE Xplore.  Restrictions apply. 
the customized cryptographic functions with respect to such
characteristics. If a value satisﬁes those two characteristics,
KINGFISHER regards the value as a CSC. After labeling all the
SCs, KINGFISHER further labels the corresponding function
candidates as a SC-related function.