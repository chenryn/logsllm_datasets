matches specific patterns. Let’s use grep to filter the script’s output, as
shown in Listing 3-5.
#!/bin/bash
if [ "$1" == "" ]
then
echo "Usage: ./pingscript.sh [network]"
echo "example: ./pingscript.sh 192.168.20"
else
for x in `seq 1 254`; do
ping -c 1 $1.$x | grep "64 bytes" u
done
fi
Listing 3-5: Using grep to filter results
Here we look for all instances of the string 64 bytes u, which occurs
when an ICMP reply is received when pinging a host. If we run the script
with this change, we see that only lines that include the text 64 bytes are
printed to the screen, as shown here.
root@kali:~/# ./pingscript.sh 192.168.20
64 bytes from 192.168.20.1: icmp_req=1 ttl=255 time=4.86 ms
64 bytes from 192.168.20.2: icmp_req=1 ttl=128 time=68.4 ms
64 bytes from 192.168.20.8: icmp_req=1 ttl=64 time=43.1 ms
--snip--
We get indicators only for live hosts; hosts that do not answer are not
printed to the screen.
But we can make this script even nicer to work with. The point of our
ping sweep is to get a list of live hosts. By using the cut command discussed
in Chapter 2, we can print the IP addresses of only the live hosts, as shown in
Listing 3-6.
#!/bin/bash
if [ "$1" == "" ]
then
echo "Usage: ./pingscript.sh [network]"
echo "example: ./pingscript.sh 192.168.20"
else
for x in `seq 1 254`; do
ping -c 1 $1.$x | grep "64 bytes" | cut -d" " -f4 u
done
fi
Listing 3-6: Using cut to further filter results
We can use a space as the delimiter and grab the fourth field, our IP
address, as shown at u.
80 Chapter 3
Now we run the script again as shown here.
root@kali:~/mydirectory# ./pingscript.sh 192.168.20
192.168.20.1:
192.168.20.2:
192.168.20.8:
--snip--
Unfortunately, we see a trailing colon at the end of each line. The results
would be clear enough to a user, but if we want to use these results as input
for any other programs, we need to delete the trailing colon. In this case,
sed is the answer.
The sed command that will delete the final character from each line is
sed 's/.$//', as shown in Listing 3-7.
#!/bin/bash
if [ "$1" == "" ]
then
echo "Usage: ./pingscript.sh [network]"
echo "example: ./pingscript.sh 192.168.20"
else
for x in `seq 1 254`; do
ping -c 1 $1.$x | grep "64 bytes" | cut -d" " -f4 | sed 's/.$//'
done
fi
Listing 3-7: Using sed to drop the trailing colon
Now when we run the script, everything looks perfect, as shown here.
root@kali:~/# ./pingscript.sh 192.168.20
192.168.20.1
192.168.20.2
192.168.20.8
--snip--
note Of course, if we want to output the results to a file instead of to the screen, we can use
the >> operator, covered in Chapter 2, to append each live IP address to a file. Try
automating other tasks in Linux to practice your Bash scripting skills.
Python scripting
Linux systems typically come with interpreters for other scripting languages
such as Python and Perl. Interpreters for both languages are included in
Kali Linux. In Chapters 16 through 19, we’ll use Python to write our own
exploit code. For now, let’s write a simple Python script and run it in Kali
Linux just to demonstrate the basics of Python scripting.
Programming 81
For this example we’ll do something similar to our first Netcat example
in Chapter 2: We’ll attach to a port on a system and see if the port is listen-
ing. A starting point for our script is shown here.
#!/usr/bin/python u
ip = raw_input("Enter the ip: ") v
port = input("Enter the port: ") w
In the previous section, the first line of our script told the terminal to
use Bash to interpret the script. We do the same thing here, pointing to the
Python interpreter installed on Kali Linux at /usr/bin/python u.
We’ll begin by prompting the user for data and recording input into
variables. The variables will store the input for use later in the script. To
take input from the user, we can use the Python function raw_input v. We
want to save our port as an integer, so we use a similar built-in Python func-
tion, input, at w. Now we ask the user to input an IP address and a port to test.
After saving the file, use chmod to make the script executable before run-
ning the script, as shown here.
root@kali:~/mydirectory# chmod 744 pythonscript.py
root@kali:~/mydirectory# ./pythonscript.py
Enter the ip: 192.168.20.10
Enter the port: 80
When you run the script, you’re prompted for an IP address and a port,
as expected.
Now we will add in some functionality to allow us to use the user’s input
to connect to the chosen system on the selected port to see if it is open
(Listing 3-8).
#!/usr/bin/python
import socket u
ip = raw_input("Enter the ip: ")
port = input("Enter the port: ")
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) v
if s.connect_ex((ip, port)): w
print "Port", port, "is closed" x
else: y
print "Port", port, "is open"
Listing 3-8: Adding port-scanning functionality
To perform networking tasks in Python, we can include a library called
socket using the command import socket u. The socket library does the heavy
lifting for setting up a network socket.
The syntax for creating a TCP network socket is socket.socket(socket.AF_
INET, socket.SOCK_STREAM). We set a variable equal to this network socket at v.
82 Chapter 3
Connecting to a Port
When creating a socket to connect to a remote port, the first candidate
available from Python is the socket function connect. However, there is
a better candidate for our purposes in the similar function, connect_ex.
According to the Python documentation, connect_ex is like connect except
that it returns an error code instead of raising an exception if the connec-
tion fails. If the connection succeeds, connect_ex will return the value 0.
Because we want to know whether the function can connect to the port,
this return value seems ideal to feed into an if statement.
if Statements in Python
When building if statements in Python, we enter if condition:. In Python the
statements that are part of a conditional or loop are denoted with inden-
tations rather than ending markers, as we saw in Bash scripting. We can
instruct our if statement to evaluate the returned value of the connection
of our TCP socket to the user-defined IP address and port with the com-
mand if s.connect_ex((ip, port)): w. If the connection succeeds, connect_ex
will return 0, which will be evaluated by the if statement as false. If the con-
nection fails, connect_ex will return a positive integer, or true. Thus, if our if
statement evaluates as true, it stands to reason that the port is closed, and
we can present this to the user using the Python print command at x. And,
as in the Bash scripting example, if connect_ex returns 0 at y, we can use an
else statement (the syntax is else: in Python) to instead inform the user
that the tested port is open.
Now, run the updated script to test whether TCP port 80 is running on
the Windows XP target host as shown here.
root@kali:~/# ./pythonscript.py
Enter the ip: 192.168.20.10
Enter the port: 80
Port 80 is open
According to our script, port 80 is open. Now run the script again
against port 81.
root@kali:~/# ./pythonscript.py
Enter the ip: 192.168.20.10
Enter the port: 81
Port 81 is closed
This time, the script reports that port 81 is closed.
note We will look at checking open ports in Chapter 5, and we will return to Python script-
ing when we study exploit development. Kali Linux also has interpreters for the Perl
and Ruby languages. We will learn a little bit of Ruby in Chapter 19. It never hurts
to know a little bit of multiple languages. If you are up for a challenge, see if you can
re-create this script in Perl and Ruby.
Programming 83
writing and Compiling C Programs
Time for one more simple programming example, this time in the C pro-
gramming language. Unlike scripting languages such as Bash and Python,
C code must be compiled and translated into machine language that the
CPU can understand before it is run.
Kali Linux includes the GNU Compiler Collection (GCC), which will
allow us to compile C code to run on the system. Let’s create a simple C pro-
gram that says hello to a command line argument, as shown in Listing 3-9.
#include  u
int main(int argc, char *argv[]) v
{
if(argc  u.
Every C program has a function called main v that is run when the
program starts. Our program will take a command line argument, so we
pass an integer argc and a character array argv to main. argc is the argument
count, and argv is the argument vector, which includes any command line
arguments passed to the program. This is just standard syntax for C pro-
grams that accept command line arguments. (In C, the beginning and end
of functions, loops, and so on are denoted by braces {}.)
First, our program checks to see if a command line argument is pres-
ent. The argc integer is the length of the argument array; if it is less than
two (the program name itself and the command line argument), then a
command line argument has not been given. We can use an if statement
to check w.
The syntax for if is also a little different in C. As with our Bash script, if
a command line argument is not given, we can prompt the user with usage
information x. The printf function allows us to write output to the termi-
nal. Also note that statements in C are finished with a semicolon (;). Once
84 Chapter 3
we’re through with our program, we use a return statement y to finish the
function main. If a command line argument is supplied, our else statement
instructs the program to say hello z. (Be sure to use braces to close all of
your loops and the main function.)
Before we can run our program, we need to compile it with GCC as
shown here. Save the program as cprogram.c.
root@kali:~# gcc cprogram.c -o cprogram
Use the -o option to specify the name for the compiled program and
feed your C code to GCC. Now run the program from your current direc-
tory. If the program is run with no arguments, you should see usage infor-
mation as shown here.
root@kali:~# ./cprogram
Pass your name as an argument
If instead we pass it an argument, in this case our name, the program
tells us hello.
root@kali:~# ./cprogram georgia
Hello georgia
note We will look at another C programming example in Chapter 16, where a little bit of
sloppy C coding leads to a buffer overflow condition, which we will exploit.
summary
In this chapter we’ve looked at simple programs in three different languages.
We looked at basic constructs, such as saving information in variables for
later use. Additionally, we learned how to use conditionals, such as if state-
ments, and iterations, such as for loops, to have the program make decisions
based on the provided information. Though the syntax used varies from pro-
gramming language to programming language, the ideas are the same.
Programming 85
4
using tHe
me tasPloit fr ame work
In subsequent chapters, we’ll take an in-depth look at
the phases of penetration testing, but in this chapter,
we’ll dive right in and get some hands-on experience
with exploitation. Though the information-gathering
and reconnaissance phases often have more bear-
ing on a pentest’s success than exploitation does, it’s
more fun to gather shells (a remote connection to
an exploited target) or trick users into entering their
company credentials into your cloned website.
In this chapter we’ll work with the Metasploit Framework, a tool that
has become the de facto standard for penetration testers. First released in
2003, Metasploit has reached cult status in the security community. Though
Metasploit is now owned by the security company Rapid7, an open source
edition is still available, with development largely driven by the security
community.
Metasploit’s modular and flexible architecture helps developers effi-
ciently create working exploits as new vulnerabilities are discovered. As
you’ll see, Metasploit is intuitive and easy to use, and it offers a centralized
way to run trusted exploit code that has been vetted for accuracy by the
security community.
Why use Metasploit? Say you’ve discovered a vulnerability in your client
environment—the Windows XP system at 192.168.20.10 is missing Microsoft
security bulletin MS08-067. As a penetration tester, it is up to you to exploit
this vulnerability, if possible, and assess the risk of a compromise.
One approach might be to set up in your lab a Windows XP system that
is also missing this patch, attempt to trigger the vulnerability, and develop a
working exploit. But developing exploits by hand takes both time and skill,
and the window of opportunity for your pentest may be closing.
You could instead search for code that exploits this vulnerability on
the Internet. Sites like Packet Storm Security (http://www.packetstormsecurity
.com/), SecurityFocus (http://www.securityfocus.com/), and Exploit Database
(http://www.exploit-db.com/) provide repositories of known exploit code.
But be forewarned: Not all public exploit code does what it claims to do.
Some exploit code may destroy the target system or even attack your system
instead of the target. You should always be vigilant when running anything
you find online and read through the code carefully before trusting it. Addi-
tionally, the public exploits you find may not meet your needs right out of
the box. You may need to do some additional work to port them to your
pentest environment.
Whether we develop an exploit from scratch or use a public one as a
base, we will still need to get that exploit to work on your pentest. Our time