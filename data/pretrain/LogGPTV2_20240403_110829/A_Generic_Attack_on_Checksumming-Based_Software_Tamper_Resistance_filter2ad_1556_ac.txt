4.2. Defeating Self-Checking on the x86
The attack can be mounted on the popular x86 ar-
chitecture [13] by manipulating two different aspects of
memory management as described below.2 Although
separate code and data TLBs exist on the x86, their load-
ing process is not software modiﬁable and thus the spe-
ciﬁc implementation of the attack in Section 4.1 can not
be used. Instead, here we exploit the processor segmen-
tation features of the x86.
In addition to supporting memory pages, the x86 can
also manage memory in variable sized chunks known as
segments. Associated with each segment is a base ad-
dress, size, permissions, and other meta-data. Together
this information forms a segment descriptor. To use a
given segment descriptor, its value is loaded into one
of the segment registers. Other than segment descriptor
numbers, the contents of these registers are inaccessible
to all software. In order to update a segment register,
the corresponding segment descriptor must be modiﬁed
in kernel memory and then reloaded into the segment
register.
A logical address consists of a segment register spec-
iﬁer and offset. To derive a linear address, a segment
register’s segment base (named by the segment speci-
ﬁer) is added to the segment offset. An illustration of the
complete translation mechanism for the x86 architecture
is shown in Figure 6. Code reads are always relative to
the code segment (CS) register, while normally, if no
segment register is speciﬁed data reads use the data seg-
ment (DS) register. Through segment overrides a data
read can use any segment register including CS. After
obtaining a linear address, normal page table translation
is done as shown in Figure 6 and Figure 8.
2As noted in Section 1, very recently we discovered a cleaner and
more generic attack which also applies to the x86; see [35].
Logical Address
Segment Number
Segment Offset
Segment
Translation Algorithm
Linear Address
Page Data
Page Offset
Page Table
Translation Algorithm
Physical Address
Frame Number
Frame Offset
Figure 6. Translation from virtual to physi-
cal addresses on the x86
CS Base
DS Base
Linear Address Map
Code’
Code
Data
Stack
Figure 7. Splitting the ﬂat memory model
to allow a tamper resistance attack
Unlike pages on the x86, segments can be set to only
allow instruction reads (execute-only). Data reads and
writes to an execute-only segment will generate an ex-
ception. This execute-only permission can be used to
detect when an application attempts to read memory rel-
ative to CS. As soon as the exception is delivered to an
OS modiﬁed for our attack, the OS can automatically
modify the memory map (similar to as in Section 4.1
but see Figure 7) to make it appear as if the unmodiﬁed
data was present at that memory page.
Most operating systems for x86, however, now im-
plement a ﬂat memory model. This means that the base
value for the CS and DS registers are equal; an appli-
cation need not use the CS register to read its code. A
ﬂat memory model will ensure that both linear addresses
are the same, resulting in the same physical address (as
denoted by the dash-dot-dot line in Figure 8).
On the surface, it appears that our attack, based on
this ﬁrst aspect – the execute-only feature – would be
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
Using CS Segment Override
CS Information:
Segment Start
Logical Address
get from CS:0x1000
Linear Address
Page Table Translation
Physical Memory
Physical Address
Without CS Segment Override
DS Information:
Segment Start
Logical Address
get from DS:0x1000
Linear Address
Figure 8. Translation of a get using segment overrides
thwarted by the ﬂat memory model. However, although
modern operating systems present a ﬂat memory model
to the application, an OS modiﬁed to contain attack code
need not obey the ﬂat memory model. It may “appear” to
present a ﬂat memory model, even though segmentation
is being used (see Figure 7).
(cid:1)
(cid:1)
To implement the attack, store two copies of the pro-
gram in the logical address space. Let Code contain the
contains
original unmodiﬁed program code while Code
the modiﬁed program code. Then set the CS segment
to point to the start of Code
and set all other segment
descriptors, including the DS, to point to the beginning
of Code (see Figure 7). Also, set the CS segment to
execute-only. If the application attempts to perform an
ordinary data read of its code, it will access the unmodi-
ﬁed version at Code. If the application instead uses a CS
override to access data relative to CS, it will cause an ex-
ception because CS is execute only. The modiﬁed kernel
can then take steps (e.g. temporarily replacing the page
with that for Code3) to ensure that
table entry for Code
the read is directed to Code. Code
is thus not accessible
via data reads by the application.
(cid:1)
(cid:1)
While it may appear as if the entire usable linear ad-
dress space is halved by the requirement to store code,
data, and stack, only a second copy of the code must
be mapped into the targeted application’s address space.
All that is required, then, is sufﬁcient consecutive linear
memory to address the second copy of the code. In sum-
3Our test implementation’s modiﬁed kernel replaced the page table
with that for Code. It then used the single step interrupt
(cid:1)
entry for Code
and restored the page table entry after the instruction had executed.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
mary, our attack succeeds at defeating currently known
self-integrity checksumming mechanisms on x86 pro-
cessors as well.
4.3. Examining the PowerPC, AMD64 and ARM
We ﬁrst note that for all three processor architectures
discussed here (PowerPC, AMD64 and ARM), the at-
tack of Section 4.1 does not apply directly because the
TLB is not directly modiﬁable. Similarly, the attack of
Section 4.2 does not apply because the processors lack
the segment functionality present on the x86.
PowerPC. On initial inspection, it may appear that
processors such as the PowerPC [21] which implement
a no-execute permission feature (as brieﬂy discussed in
Section 3) may provide similar mechanisms to assist an
attacker as described above. No-execute works on the
concept that it is possible for the processor to deliver a
trap whenever I(x) occurs for an address x not in the
code region of a program. No-execute permission, how-
ever, poses only approximately the same level of threat
to checksumming as emulators. The reason for this is
that our attack against tamper resistance relies on being
able to trap data reads, while instruction reads are pro-
cessed at full speed. No-execute access control works on
the reverse principle, processing data reads at full speed
while trapping instruction reads. In a tamper resistance
attack, each instruction read would need to be trapped,
and an alternate instruction would have to be loaded and
executed by the operating system. This trap on every in-
struction access is equivalent to an emulator having to
process each instruction in software. The attack would
result in considerable slowdown to the application, and
thus we do not consider the attacks of Section 4 to be
generally feasible on the PowerPC processor.
AMD64. Starting with the 64-bit forms of the x86
line from AMD (referred to as AMD64 processors), seg-
mentation has been mostly eliminated when operating in
64-bit mode [1]. This means that there is no longer a
method for generating exceptions for data reads using a
code segment override. Furthermore, the possibility of
offsetting the data and code segments is removed. With
these changes, 64-bit mode on an AMD has the same
strengths and weaknesses against checksumming as the
PowerPC. Thus as for the PowerPC processor above, for
the AMD64 we do not believe that our present attack, as
described above, is generally feasible in practise.
ARM. The ARM processor line varies between dif-
ferent instances, but most commonly, the MMU operates
much the same as on the PowerPC line. Thus again, for
the ARM we do not believe that our present attack, as
described above, is generally feasible in practise.
Editorial note. One of the newly discovered attacks
mentioned in Section 1 is capable of working on the
PowerPC, AMD64, and ARM processors; see [35].
5. Further Discussion
We now make some further observations regarding
the attack and its implications.
5.1. Noteworthy Features of the Attack
We ﬁrst discuss several features which make the at-
tack of Section 4 particularly noteworthy.
Difﬁculty of Detecting the Attack Code. The at-
tack implemented operates at a different privilege level
than the application being attacked. This separation of
privilege levels results in the application program being
unable to access the memory or processor functionality
being used in the attack. The page tables of a running
process are not available to the process, and hence the
process has no obvious indication that tamper resistance
is being attacked. Furthermore, the kernel code is also
not available to the process.
While a speciﬁc implementation of the attack may be
detectable by the application because of subtle changes
in kernel behaviour, attempting to detect every form of
implementation leads to a classical arms race of detec-
tion and anti-detection techniques. Because attackers
can modify their attacks much faster than a software
vendor can update deployed software defences, such an
arms race will typically favour the attacker.
Feasibility where Emulator-based Attacks Fail.
While the use of an emulator by an attacker can typ-
ically defeat those forms of self-checking tamper re-
sistance which rely on checksumming (since emulators
can easily distinguish between an instruction and data
read), emulators are much slower than native processors.
Chang et al. [4] document the performance impacts of
tamper-prooﬁng and come to the conclusion that their
protection methods only result in a “slight increase” in
execution time. Their self-integrity checksumming tam-
per resistance methods, therefore, are appropriate even
for speed-sensitive applications (see [11]) for which em-
ulation attacks are not feasible. In contrast, our attack
imposes only negligible performance overhead, and is
therefore also possible even on speed-sensitive applica-
tions. With the UltraSparc attack implementation, the
only increased delay is when the TLB must be updated
in response to a data access to a code page. (In our test
implementation, this operation required 6 additional as-
sembly instructions.) Subsequent data reads to the same
code page are translated by the TLB, and thus occur at
full speed.
Generic Attack Code. The attack code, as imple-
mented for our proof of concept in Section 4.1, is not
program dependant. The same is true for the attack of
Section 4.2. The same kernel level routines can be used
to attack all programs implementing checksumming as
the form of tamper resistance, i.e. the attack code need
only be written once for an entire class of checksum-
ming defences. Even the extraction of the original code
before modiﬁcation (see Section 4) can be automated,
being a simple matter of making a copy of the applica-
tion executable before modifying it.
5.2. Attack Implications
The attack strategy outlined is devastating to the gen-
eral approach of self-integrity protection by checksum-
ming, including even the advanced and cleverly engi-
neered tamper-resistance methods recently proposed by
Chang et al. [4] and Horne et al. [12]. Indeed, on the
CPU architecture used by most workstations, desktop,
and laptop computers, one operating-system speciﬁc at-
tack tool can be used to defeat any implementation of
these defence mechanisms. We now discuss whether
these methods can be modiﬁed so as to make them resis-
tant to the attack, and whether there are other integrity-
based tamper resistance mechanisms that can be easily
added to existing applications, have minimal runtime
performance overhead, and are secure.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
It is not sufﬁcient to simply intermingle instructions
and runtime data (as proposed by [4]), because such
changes do not prevent the processor from determining
when a given virtual address is being used as code or as
data. For a self-checking tamper resistance mechanism
to be resistant to our attack strategy, it must either not
rely on treating code as data, whether for checksumming
or other purposes, or it must make the task of corre-
lating code and data references prohibitively expensive.
Thus, integrity checks that examine intermediate com-
putation results appear to be immune to our attack strat-
egy (e.g. [5]); further, systems that dynamically change
the relative locations of code and data (while encrypting,
decrypting, and obfuscating) are resistant to our attack.
Unfortunately, these alternatives are typically difﬁcult to
add to existing applications or impose signiﬁcant run-
time performance overhead, making them unsuitable for
many situations where checksumming-based integrity
checks are feasible.
Aucsmith [2] proposed a method of self-checking
tamper resistance through run-time decryption and re-
encryption of program code within an integrity veriﬁ-
cation kernel (IVK). The IVK is embedded as a core
part of an application (it does not reside in the operat-
ing system). Aucsmith proposes that his IVK can be
used to generate digital signatures of the rest of the pro-
gram within which the IVK is embedded. The attack
discussed in this paper has the ability to affect the re-
liability of the IVK digital signature computation and
thus decouple the integrity of the IVK from that of the