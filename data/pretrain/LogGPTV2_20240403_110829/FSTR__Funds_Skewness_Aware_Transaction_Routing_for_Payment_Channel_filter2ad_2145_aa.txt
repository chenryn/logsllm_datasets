title:FSTR: Funds Skewness Aware Transaction Routing for Payment Channel
Networks
author:Siyi Lin and
Jingjing Zhang and
Weigang Wu
2020 50th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
FSTR: Funds Skewness aware Transaction Routing
for Payment Channel Networks
Siyi Lin∗
Jingjing Zhang∗
Weigang Wu†
School of Data and Computer Science
School of Data and Computer Science
School of Data and Computer Science
Sun Yat-sen University
Guangzhou, China
PI:EMAIL
Sun Yat-sen University
Guangzhou, China
PI:EMAIL
Sun Yat-sen University
Guangzhou, China
PI:EMAIL
i.e., transaction routing,
Abstract—Payment channel is an effective and popular tech-
nique to improve the scalability and throughput of blockchains
by transferring transactions from on-chain to off-chain. Multiple
payment channels can constitute a payment network and realize
transaction execution via multi-hop paths. How to ﬁnd a feasible
and efﬁcient transaction path,
is a
key issue in payment channel networks, and different solutions
have been proposed. However, the problem of funds skewness,
which may cause routing failures, has been largely ignored in
existing routing algorithms. In this work, we design FSTR, a
routing algorithm that attempts to route transactions using a
funds skewness based path selection scheme so as to reduce
funds skewness and increase transaction success probability. To
evaluate the performance of FSTR, we conduct experiments using
the real-world dataset of Ripple. The experiment results show
that FSTR outperforms existing routing algorithms, in terms of
success ratio, delay, and overhead.
Index Terms—blockchain, payment channel network, transac-
tion, routing algorithm, funds skewness
I. INTRODUCTION
Blockchain [1]–[4] is an emerging distributed infrastructure
and computing paradigm, featuring decentralization [5], per-
sistency, auditability, and immutability. Various transaction-
based blockchains have been proposed, such as Ethereum [6],
Ripple [7], Stellar [8] and so on. They are widely applied in
many ﬁelds, including but not limited to ﬁnance, healthcare,
supply chain, and agriculture.
However, constrained by the rigorous consensus process and
signature authentication mechanism, blockchains suffer from
low processing throughput and poor scalability [9], [10]. For
instance, bitcoin processes up to 7 transactions per second and
requires on average 10 minutes to conﬁrm new transactions
[11]. Such a throughput is not acceptable for high concurrent
transactions and cannot serve large number of users. With
the emergence of microtransactions involving the transfer of
small amounts of funds, the scalability problem is drastically
ampliﬁed because such microtransactions usually need to be
executed instantaneously. Moreover, the fee charged by the
blockchain ledger may be higher than the funds amount of a
micro transaction, which is obviously not acceptable.
*S. Lin and J. Zhang are also with the Guangdong Key Lab. of Big Data
Analysis and Processing, China.
†W. Wu is also with MoE Key Lab. of Machine Intelligence and Advanced
Computing , China.
Payment channel [12] was proposed to address the above
challenges by shifting transactions which occur frequently and
involve a small amount of funds from on-chain to off-chain. By
establishing the virtual channel between two participants, only
two on-chain transactions are added to the blockchain, and at
the same time, off-chain payments can execute between the
participants as frequently as needed without directly involving
the ledger and as such, execute instantaneously avoiding the
associated delay of on-chain consensus and conﬁrmation.
Therefore, payment channel provides high efﬁciency, scalabil-
ity and throughput. Moreover, payment channels connecting
different nodes can constitute a payment network. Off-chain
transactions can be conducted via multi-hop paths in the
network. Through the use of payment channel and payment
networks, Bitcoin can scale to billions of transactions every
day with the computational power available in the modern
desktop computer [10].
Furthermore, payment channels can constitute a payment
channel network, which can realize off-chain transaction exe-
cution via multi-hop channel paths, such as the Lightning Net-
work [10] for Bitcoin, the Raiden Network [13] for Ethereum,
SilentWhispers [14] for credit networks, or InterLedger [15]
and Atomic-swap [16] for inter-blockchain transactions. Trans-
action routing in payment networks is fundamentally different
from packet routing in communication networks: the major
resources in payment networks, such as funds balances, are
fundamentally different from those in communication rout-
ing such as link capacity. The funds balance changes per
transaction and each transaction is transient. Due to those
differences, routing algorithms for communication networks
are not suitable for payment networks. Routing a transaction,
that is to say, how to ﬁnd a feasible and efﬁcient transaction
path, is the key issue in payment channel networks. Quite
a number of solutions have been proposed for transaction
routing. Similar to routing in computer communication net-
works, routing algorithms for payment network can be divided
into three categories. In on-demand routing, participants will
search the network for a feasible path for each transaction.
For example, the max-ﬂow [17] algorithm can be used to do
breadth-ﬁrst search in a payment network. In static routing,
the network will construct and maintain the global routing
structure proactively, which can be directly used to route
978-1-7281-5809-9/20/$31.00 ©2020 IEEE
DOI 10.1109/DSN48063.2020.00060
464
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:32:17 UTC from IEEE Xplore.  Restrictions apply. 
(a) Consider the Path Length
(b) Consider Funds Skewness
Fig. 1. Different Ways of Choosing Paths. The numbers in parentheses represent the changing process of funds, where the ﬁrst number is the initial funds,
and the numbers in different colors represent changed funds after the transactions of the corresponding colors have been executed. “TX1: A→E(4) success”
means that, a transaction from A to E with the amount 4 units of funds is executed successful.
transactions. The routing structure can be a global routing
table, or a landmark-based tree [14], [18]. The third category
is hybrid routing, which attempts to combine the advantages of
on-demand and static routing. For example, Flash [19] divides
transactions into elephant payments from mice payments,
and elephant payments use on-demand routing while mice
payments adopt static routing.
To the best of our knowledge, almost all existing payment
network routing algorithms focus on the funds feasibility of
multi-hop paths, and ignore the problem of funds skewness,
which may cause routing failures and consequently transac-
tions failures. Roughly, funds skewness refers to the imbalance
of the founds distribution between two ends of a payment
channel. We show an example of path selections with and
without consideration of funds skewness in Fig. 1. There
is a network with eight nodes, and they put 10 units of
funds in each payment channel in the beginning. Then, they
need to route three transactions. In Fig. 1a, the shortest path
for each transaction is selected. Then, the funds in direction
A → C → D → E are exhausted by the ﬁrst two transactions,
and the third transaction cannot ﬁnd a feasible path. In Fig.
1b, funds skewness is considered in path selection: the second
transaction is not routed along the same path of the ﬁrst
transaction to avoid the increase of funds skewness. Then, the
third transaction can be executed successfully.
From the example above, we can observe that funds skew-
ness can signiﬁcantly affect the probability of routing success.
Therefore, it is necessary to take funds skewness into consider-
ation so as to avoid routing failures and consequently increase
transaction success probability.
However, how to involve funds skewness in transaction
routing is not a trivial task and several challenges must be
addressed. Selecting paths simply based on funds skewness
may cause longer path length and more routing fee. That is,
funds skewness must be combined with other factors, e.g. path
length. Moreover, the calculation of funds skewness of a path
is nontrivial. The funds skewness of a single channel can be
deﬁned as the difference between funds at the two ends, but
the skewness of a path with multiple hops is not obvious and
need to be carefully considered.
This work. In this work, we design FSTR, a funds skewness
aware routing algorithm that addresses the above challenges.
To cope with the dynamics of channel skewness, we consider
on-demand pathﬁnding paradigm. Also, we attempt to reuse
the path selected to avoid overhead of pathﬁnding, so routing
table is included in FSTR. That is, FSTR is a kind of hybrid
transaction routing algorithm. To evaluate the performance of
FSTR, we conduct experiments using the real-world dataset
of Ripple [7]. The experiment results show that, FSTR out-
performs the state-of-the-art routing algorithms, in terms of
success ratio, delay, and overhead.
The major novelties and advantages of our work are sum-
marized as follows:
• To the best of our knowledge, FSTR is the ﬁrst trans-
action routing algorithm that selects paths according to
funds skewness of channels. FSTR attempts to choose
a path whose funds skewness will be reduced the most
by executing the given transaction so that the payment
network can maintain funds balance.
• Since FSTR is funds skewness aware,
it can largely
improve the probability of feasible routes and improve
the success ratio of transactions.
• As a hybrid routing algorithm, FSTR combines the ad-
vantages of static and on-demand algorithms, i.e., it can
achieve both high success ratio and low overhead.
The remainder of the paper is organized as follows. In
Section II, we review existing works of routing algorithms
for payment channel networks. In Section III, we introduce the
system model and deﬁnitions. The design of FSTR is described
in Section IV. Then, in Section V, we present the experiments,
including dataset, evaluation scheme, performance metrics,
and experiment results. Finally, we conclude our work and
point out future directions in Section VI.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:32:17 UTC from IEEE Xplore.  Restrictions apply. 
465
II. RELATED WORK
As aforementioned, we categorize existing transaction algo-
rithms into three classes: static, on-demand, and hybrid.
In static routing, paths among nodes are established in
advance and are maintained proactively. For example,
in
Lightning Network [10], a global routing table including
all nodes in the network is constructed and maintained all
the time. Payments can be routed by simply following the
route information in the table. Obviously, such static routing
algorithms cannot scale well and cannot be used for large
payment networks [20], [21]. To improve scalability, Flare
[22] makes use of beacon nodes, and common nodes only
need to maintain local routing tables to the beacon nodes. By
combining their paths to beacons, the sender and receiver can
get a full path for a transaction.
Tree structure has also been used for routing transactions in
payment networks [23]. SilentWhispers [14] constructs and
maintains landmark-centered spanning trees for the whole
network, and payment transactions can be routed along the
tree easily. SpeedyMurmurs [18] extends SilentWhispers by
making use of the embedding-based [24] path discovery
approach, which is the state-of-the-art approach to routing
for F2F network [25] to ﬁnd the routing path. Speciﬁcally,
SpeedyMurmurs assigns a coordinate for each node and
then each node relays the transaction to the neighbor whose
coordinate is closest to the destination’s coordinate. Static
routing algorithms construct paths proactively, so they can
route transactions quickly. However, it is not ﬂexible to adapt
to the changes of payment network topology. Moreover, the
cost of maintaining static routing table is usually costly.
In on-demand routing, the paths of transactions are discov-
ered and selected upon the payment requests. The max-ﬂow
algorithm [17] adopts distributed Ford-Fulkerson algorithm to
ﬁnd the path with the maximum tradable amount between the
sender and the receiver for a given transaction. This algorithm
can ﬁnd the optimal routes but it is too costly in terms of
route discovery overhead [26]. Therefore, it has become a
popular benchmark algorithm for experiment studies rather
than a practical algorithm.
Spider [27] splits transactions into transaction units, and
then transmits them over a period of time across different paths
that are chosen according to the dynamic channel funds. It
improves system throughput and success volume of payments,
but ignores the overhead and delay imposed by splitting and
transmitting transactions.
Hybrid routing combines the idea of static routing and
on-demand routing so as to combine the advantages of the
two approaches. Flash [19] divides transactions into elephant
payments and mice payments [28], [29] according to their
transaction amount. Then, it uses a modiﬁed max-ﬂow algo-
rithm for elephant payments to ﬁnd paths with sufﬁcient funds,
while mice payments are directly sent by the paths stored in
the routing table.
Existing routing algorithms ignore funds skewness, which
motivates us to design a skewness based algorithm in this pa-
per. In literature, there is also a little work on funds skewness,
which is related to our concern about fund skewness. Revive
[30] offers a solution for rebalancing payment networks. It
periodically generates special transactions to re-balance funds.
The objective of Revive is similar to ours, i.e., achieving
balancing funds. However, Revive address the problem by
generating special transactions to re-balance the funds, while
our idea is to avoid funds skewness during routing transactions.
III. SYSTEM MODEL AND DEFINITIONS
In this section, we describe the system model for the off-
chain payment network and then introduce the communication
model.
A. The Payment Network
We represent the payment network by a topology graph
G = (N, E) whereas the set of nodes N corresponds to the
participants in the payment network and the set of edges E
corresponds to the payment channels that connect the nodes.
An edge connecting Node u and Node v indicates a bi-
directional payment channel between u and v. Please note
that, the channel is not symmetric, i.e., the funds in different
directions of the channel may be different. We deﬁne f (u, v)
as funds that can be transferred from node u to v sharing an
edge and f (u, v) ≥ 0 invariably. We deﬁne a path p in G as a
sequence of edges e1. . . el with ei = (ui, ui+1) for 1 ≤ i ≤ l,
while l is the length of p. Moreover, we deﬁne ω as the max
feasible funds of p and we can get
ω = min f (ui, ui+1), 1 ≤ i ≤ l.
Thus, if pt is a feasible path for the transaction t with the
length lp, we can get the relationship between the transaction
amount at of t and the max feasible funds ωp of pt as follows:
(1)
(2)
(3)
(4)
0 < at ≤ ωp.
Then, after the transaction t is executed, the funds on each
edge of pt will change as follows:
fnew(ui, ui+1) = f (ui, ui+1) − at, 1 ≤ i ≤ lp.
fnew(ui+1, ui) = f (ui+1, ui) +a t, 1 ≤ i ≤ lp.
Please note that, the sum of funds in any payment channel in
the network should not change during the transactions.
Therefore, in the payment network, the routing problem can
be deﬁned as below:
Given a payment network and a transaction, the routing
problem refers to ﬁnd a feasible path, along which the trans-
action to be executed.
B. Communication Model
For the sake of simplicity, we assume that the communi-
cation between nodes is carried out by an underlying com-
munication network, where all the participants can discover
and communicate directly with each other, so they can deliver
transaction-related packets when necessary. The connections
between two non-compromised parties are conﬁdential and
uncorrupted, e.g. through TLS. Besides, each node maintains
accurate information, including their funds and communication
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:32:17 UTC from IEEE Xplore.  Restrictions apply. 
466
delays, with its neighbors sharing a payment channel. How-
ever, they cannot obtain the instantaneous funds or delay of
other remote payment channels due to network dynamics.
IV. THE PROPOSED ALGORITHM
In this section, we ﬁrst describe the overview of FSTR. Then
we describe the deﬁnition and calculation methods of funds