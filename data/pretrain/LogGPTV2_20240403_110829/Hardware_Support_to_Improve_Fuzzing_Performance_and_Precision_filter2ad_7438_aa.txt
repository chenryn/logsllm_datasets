title:Hardware Support to Improve Fuzzing Performance and Precision
author:Ren Ding and
Yonghae Kim and
Fan Sang and
Wen Xu and
Gururaj Saileshwar and
Taesoo Kim
Hardware Support to Improve Fuzzing
Performance and Precision
Georgia Institute of Technology
Georgia Institute of Technology
Yonghae Kim∗
PI:EMAIL
Gururaj Saileshwar
Fan Sang
PI:EMAIL
Taesoo Kim
Ren Ding∗
Georgia Institute of Technology
PI:EMAIL
Wen Xu
Georgia Institute of Technology
PI:EMAIL
Georgia Institute of Technology
PI:EMAIL
Georgia Institute of Technology
PI:EMAIL
ABSTRACT
Coverage-guided fuzzing is considered one of the most efficient bug-
finding techniques, given its number of bugs reported. However,
coverage tracing provided by existing software-based approaches,
such as source instrumentation and dynamic binary translation,
can incur large overhead. Hindered by the significantly lowered
execution speed, it also becomes less beneficial to improve coverage
feedback by incorporating additional execution states.
In this paper, we propose SNAP, a customized hardware platform
that implements hardware primitives to enhance the performance
and precision of coverage-guided fuzzing. By sitting at the bottom of
the computer stack, SNAP leverages the existing CPU pipeline and
micro-architectural features to provide coverage tracing and rich
execution semantics with near-zero cost regardless of source code
availability. Prototyped as a synthesized RISC-V BOOM processor
on FPGA, SNAP incurs a barely 3.1% tracing overhead on the SPEC
benchmarks while achieving a 228× higher fuzzing throughput
than the existing software-based solution. Posing only a 4.8% area
and 6.5% power overhead, SNAP is highly practical and can be
adopted by existing CPU architectures with minimal changes.
CCS CONCEPTS
• Security and privacy→ Software security engineering; Domain-
specific security and privacy architectures.
KEYWORDS
Hardware-assisted fuzzing; Feedback-driven fuzzing; RISC-V BOOM
ACM Reference Format:
Ren Ding∗, Yonghae Kim∗, Fan Sang, Wen Xu, Gururaj Saileshwar, and Tae-
soo Kim. 2021. Hardware Support to Improve Fuzzing Performance and
Precision. In Proceedings of the 2021 ACM SIGSAC Conference on Com-
puter and Communications Security (CCS ’21), November 15–19, 2021, Vir-
tual Event, Republic of Korea. ACM, New York, NY, USA, 15 pages. https:
//doi.org/10.1145/3460120.3484573
∗Both authors contributed equally to this work.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484573
1 INTRODUCTION
Historically, bugs have been companions of software development
due to the limitations of human programmers. Those bugs can
lead to unexpected outcomes ranging from simple crashes, which
render programs unusable, to exploitation toolchains, which grant
attackers partial or complete control of user devices. As modern
software evolves and becomes more complex, a manual search for
such unintentionally introduced bugs becomes unscalable. Various
automated software-testing techniques have thus emerged to help
find bugs efficiently and accurately, one of which is fuzzing. Fuzzing
in its essence works by continuously feeding randomly mutated
inputs to a target program and watching for unexpected behavior. It
stands out from other software-testing techniques in that minimal
manual effort and pre-knowledge about the target program are
required to initiate bug hunting. Moreover, fuzzing has proved its
practicality by uncovering thousands of critical vulnerabilities in
real-world applications. For example, Google’s in-house fuzzing
infrastructure ClusterFuzz [24] has found more than 25,000 bugs in
Google Chrome and 22,500 bugs in over 340 open-source projects.
According to the company, fuzzing has uncovered more bugs than
over a decade of unit tests manually written by software develop-
ers. As more and more critical bugs are being reported, fuzzing is
unarguably one of the most effective techniques to test complex,
real-world programs.
An ideal fuzzer aims to execute mutated inputs that lead to bugs
at a high speed. However, certain execution cycles are inevitably
wasted on testing the ineffective inputs that do not approach any
bug in practice. To save computing resources for inputs that are
more likely to trigger bugs, state-of-the-art fuzzers are coverage-
guided and favor mutation on a unique subset of inputs that reach
new code regions per execution. Such an approach is based on
the fact that the more parts of a program that are reached, the
better the chance an unrevealed bug can be triggered. In particular,
each execution of the target program is monitored for collecting
runtime code coverage, which is used by the fuzzer to cherry-pick
generated inputs for further mutation. For binaries with available
source code, code coverage information is traced via compile-time
instrumentation. For standalone binaries, such information is traced
through dynamic binary instrumentation (DBI) [4, 11, 44], binary
rewriting [15, 48], or hardware-assisted tracing [31, 36].
Nonetheless, coverage tracing itself incurs large overhead and
slows the execution speed, making fuzzers less effective. The re-
sulting waste of computing resources can extend further with a
Session 7B: FuzzingCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2214continuous fuzzing service scaling up to tens of thousands of ma-
chines [24, 47]. For example, despite its popularity, AFL [61] suffers
from a tracing overhead of nearly 70% due to source code instru-
mentation and of almost 1300% in QEMU mode for binary-only
programs [48]. Source code instrumentation brings in additional in-
structions to maintain the original register status at each basic block,
while DBI techniques require dynamic code generation, which is
notoriously slow. Although optimized coverage-tracing techniques
have been proposed to improve performance, especially for binary-
only programs, they impose different constraints. RetroWrite [15]
requires the relocation information of position-independent code
(PIC) to improve performance for binary-only programs. Various
existing fuzzers [22, 26, 28] utilize Intel Processor Trace (PT) [36], a
hardware extension that collects general program execution infor-
mation. Nevertheless, Intel PT is not tailored for the lightweight
tracing required by fuzzing. The ad-hoc use of Intel PT in fuzzing
results in non-negligible slowdown caused by extracting useful
information (e.g., coverage) from encoded traces, allowing a merely
comparable execution speed as source instrumentation in the best
effort per large-scale profiling results [13, 33]. UnTracer [48] sug-
gests coverage-guided tracing, which only traces testcases incurring
new code paths. However, UnTracer adopts basic block coverage
without edge hit count and measures a less accurate program execu-
tion trace that misses information about control transfers and loops.
The overhead of software-based coverage tracing is inevitable be-
cause it requires extra information not available during the original
program execution. Moreover, the applicability of fuzzing heav-
ily depends on the availability of source code, given that existing
techniques commonly used for fuzzing standalone binaries are un-
acceptably slow and there is a need for faster alternatives.
In this paper, we propose SNAP, a customized hardware platform
that implements hardware primitives to enhance the performance
and precision of coverage-guided fuzzing. When running on SNAP,
fuzzing processes can achieve near-to-zero performance overhead.
The design of SNAP is inspired by three key properties observed
from the execution of a program at the hardware layer.
First, a hardware design can provide transparent support of
fuzzing without instrumentation, as coverage information can be
collected directly in the hardware layer with minimal software
intervention. By sitting at the bottom of the computer stack, SNAP
can assist fuzzers to fuzz any binary efficiently, including third-party
libraries or legacy software, regardless of source code availability,
making fuzzing universally applicable.
Second, we find that the code tracing routine, including measur-
ing edge coverage and hit count, can be integrated seamlessly into
the execution pipeline of the modern CPU architecture, and a near-
zero tracing overhead can be achieved without the extra operations
inevitable in software-based solutions. 1 To enable such low-cost
coverage tracing, SNAP incorporates two new micro-architectural
units inside the CPU core: Bitmap Update Queue (BUQ) for gen-
erating updates to the coverage bitmap and Last Branch Queue
(LBQ) for extracting last branch records (§4.2). SNAP further adopts
two micro-architectural optimizations to limit the overhead on the
memory system from frequent coverage bitmap updates: memory
1While PHMon [14] as a security monitor also provides hardware-based tracing, we
significantly outperform it with an optimized design more customized for fuzzing. See
§6 for more details.
request aggregation, which minimizes the number of updates, and
opportunistic bitmap update, which maximizes the utilization of free
cache bandwidth for such updates and reduces their cost (§4.3).
Third, rich execution semantics can be extracted at the micro-
architecture layer. One may think that the raw data gathered at the
hardware level largely loses detailed program semantics because the
CPU executes the program at the instruction granularity. Counter-
intuitively, we find that such low-level information not only enables
flexible coverage tracing, but also provides rich execution context
for fuzzing without performance penalty. For example, various
micro-architectural states are available in the processor pipeline
during program execution, such as last-executed branches (which
incur higher overhead to extract in software) and branch predictions
(which are entirely invisible to software). Using such rich micro-
architectural information, SNAP is able to provide extra execution
semantics, including immediate control-flow context and approxi-
mated data flows, in addition to code coverage (§4.5). SNAP also
supports setting address constraints on execution-specific micro-
architectural states prior to execution, providing users the flexibility
to selectively trace and test arbitrary program regions. Thus, fuzzers
on SNAP can utilize the runtime feedback that describes the actual
program state more precisely and make better mutation decisions.
SNAP hosts clean software interfaces for adoption by the existing
AFL-based fuzzers with a minimal change of less than 100 LoCs.
We prototype SNAP on top of the RISC-V BOOM core [6], which
has one of the most sophisticated designs among the open-source
processors. We also utilize a real hardware FPGA platform to evalu-
ate the performance of SNAP. In particular, the tracing overhead of
SNAP across the SPEC benchmarks is 3.1% on average, significantly
outperforming the software-based tracing method adopted by AFL
and its descendants. In addition, we fuzz a real-world collection of
binary tools, Binutils v2.28 [21], with AFL assisted by SNAP. The
evaluation results show that SNAP manages to achieve 228× higher
fuzzing throughput compared to that of the existing DBI scheme
and outperforms the vanilla AFL in discovering new paths by 15.4%
thanks to the higher throughput. Furthermore, by improving cover-
age feedback with the rich execution semantics provided by SNAP,
we demonstrate that the modified AFL running on SNAP is capable
of triggering a bug that can be barely reached by the vanilla AFL.
Last, our synthesized FPGA is practical, posing only a 4.8% area
and 6.5% power overhead.
In summary, this paper makes the following contributions:
• We propose hardware primitives to provide transparent
support of tracing and additional execution semantics for
fuzzing with minimal overhead.
• We develop a prototype, SNAP, which implements the de-
• We evaluate the system on the benefits of fuzzing perfor-
mance and precision, and demonstrate its ease of adoption.
signed primitives on a real hardware architecture.
SNAP is available at https://github.com/sslab-gatech/SNAP.
2 BACKGROUND
In this section, we provide an overview of coverage-guided fuzzing.
We also introduce recent efforts in the research community to
improve the quality of coverage feedback. Finally, we provide a
brief introduction to the typical workflow of modern processors.
Session 7B: FuzzingCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea22152.1 Coverage-Guided Fuzzing
Fuzzing has recently gained wide popularity thanks to its simplicity
and practicality. Fundamentally, fuzzers identify potential bugs by
generating an enormous number of randomly mutated inputs, feed-
ing them to the target program and monitoring abnormal behaviors.
To save valuable computing resources for inputs that approach real
bugs, modern fuzzers prioritize mutations on such inputs under the
guidance of certain feedback metrics, one of which is code coverage.
Coverage-guided fuzzers [26, 43, 52, 61] rely on the fact that the
more program paths that are reached, the better the chance that
bugs can be uncovered. Therefore, inputs that reach more code
paths are often favored. Coverage guidance has proved its power
by helping to discover thousands of critical bugs and has become
the design standard for most recent fuzzers [26, 43, 52, 61].
The common practice of measuring the code coverage of an input
is to count the number of reached basic blocks or basic block edges at
runtime. To retrieve the coverage information, fuzzers either lever-
age software instrumentation accomplished during compile-time
or use other techniques such as dynamic binary instrumentation
(DBI) [4, 11, 44], binary rewriting [15, 48], or hardware-assisted
tracing [31, 36] when source code is unavailable. For example, AFL
instruments every conditional branch and function entry while
compiling the target program and relies on QEMU assistance for
standalone binaries. The collected information is then stored in a
coverage bitmap, allowing efficient comparison across various runs.
Although coverage feedback allows fuzzers to approach bugs more
efficiently, coverage tracing itself incurs large overhead and slows
the execution speed, making fuzzers less effective. For instance,
AFL encounters a 70% performance overhead due to source code
instrumentation and a daunting 1300% performance overhead in
QEMU mode, making it unrealistic to fuzz large-scale binary-only
programs. To unleash the true power of coverage-guided fuzzing,
we aim to minimize the overhead caused by coverage tracing with-
out any constraint. Given the sizable computing resources used
by fuzzing services [24, 47], optimizing the performance allows
more tests against a buggy program in finite time and renders an
immediate return in the form of a substantial cost reduction.
2.2 Better Feedback in Fuzzing
Feedback in fuzzing aims to best approximate the program execu-
tion states and capture the state changes affected by certain input
mutations. The more accurate the feedback is in representing the
execution states, the more useful information it can provide to guide
the fuzzer toward bugs. Despite the success achieved by coverage-
guided fuzzing, feedback that is solely based on the edges reached
by the generated inputs can still be coarse grained. Figure 1 depicts
an example of a buggy cxxfilt code snippet that reads an alphanu-
meric string from stdin (line 17-29) before demangling its contained
symbols based on the signatures (line 4-11). Specifically, BUG in the
program (line 13) results from a mangled pattern (i.e., SLLTS) in the
input. With a seed corpus that covers all the branch transfers within
the loop (line 4-11), the coverage bitmap will be saturated even with
the help of edge hit count, as shown in Algorithm 1, guiding the
fuzzer to blindly explore the bug without useful feedback.
To improve the quality of coverage feedback, much effort has
been directed to more accurately approximate program states
}
}
// buggy mangled pattern
if (has_SLLTS(mangled)) BUG();
...
for (;;) {
char *cur = mangled;
...
while (*cur != ’\0’) {
switch (*cur) {
case ’S’: ... // static members
case ’L’: ... // local classes
case ’T’: ... // G++ templates
// more cases...
1 static void demangle_it (char *mangled) {
2
3
4
5
6
7
8