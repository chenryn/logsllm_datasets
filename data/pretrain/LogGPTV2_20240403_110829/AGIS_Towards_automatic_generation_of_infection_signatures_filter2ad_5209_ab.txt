### AGIS: Infection Graph Construction and Taint-Analysis

AGIS constructs an infection graph using a system call-level taint-analysis technique. This is achieved through a kernel monitor that hooks into the Windows system service dispatch table (SSDT) and the shadow table to intercept system calls. The monitor initially taints the suspicious code trapped in a honeypot and its associated process, which form the initial set of vertices, or sources, in the infection graph. Additional vertices are identified through taint propagation: a tainted subject \( v \) propagates taint to another subject or object \( v' \) if an arc can be drawn from \( v \) to \( v' \). Figure 1 illustrates the infection graph for an example where a Trojan passes taint to the Run registry key, a hook installer, and a DLL file.

### Security Policies in BMSL

Table 1 provides examples of security policies written in BMSL (Behavioral Malware Specification Language). BMSL rules follow the format `event_pattern ---+ action`, where both `event_pattern` and `action` can be defined as regular expressions to connect functions and statements. For instance, the keylogger rule detects a keylogger if a keyboard hook is observed and the callback function has an execution path leading to `WriteFile` or `Sendto`. The mass-mailing worm rule identifies such malware by detecting loops that search directories, read files, and make API calls to send messages to SMTP servers.

### Infection Signature Extraction

An ideal infection signature should uniquely characterize an infection to eliminate false positives and tolerate metamorphism to avoid false negatives. AGIS achieves this by extracting instruction sequences responsible for malicious behaviors in the infection action set \( M \). This extraction combines dynamic and static analysis techniques.

#### Dynamic Analysis
AGIS monitors system calls and examines their call stacks to find return addresses within a tainted executable's process image. These addresses are then mapped to call sites in the executable's physical file. For encoded executables, this approach reveals discrepancies between the process image and the file, allowing the static analyzer to extract decryption and execution code.

A challenge is that malware can forge stack frames and use jump instructions instead of calls. Direct jumps can be detected and used in subsequent analysis, while indirect jumps may require dynamic analysis to infer the target. Multi-threaded malware, where one thread manipulates another's stack frames, requires additional analysis, which is an ongoing research topic.

#### Static Analysis
After identifying call sites, the static analyzer, based on Proview PVDASM, uses a chopping technique to extract instruction sequences influencing the calls. Chopping reveals instructions carrying influence from a source to a target. For system or API calls, the objective is to find all instructions affecting these calls, including stack operations for parameter transfer.

For multi-threaded executables, AGIS builds a call sequence for each thread. Given a call sequence \( (c_0, \ldots, c_n) \), where \( c_0 \) is the beginning of the control flow and \( c_n \) is a call site violating policy, AGIS disassembles the binary, constructs a control flow graph, and chops the instruction sequence between \( c_{k-1} \) and \( c_k \).

#### Metamorphic Infection
AGIS can handle moderate obfuscation, including junk-code injection, code transposition, register reassignment, and instruction substitution. A CFG defeats junk code, and SAFE [4] techniques can further mitigate this threat. Code transposition, register reassignment, and instruction substitution are more challenging but can be addressed with intermediate forms and dictionaries.

#### Encoded Executables
The dynamic analyzer compares instructions around malicious call sites in virtual memory with those in the physical file. Discrepancies indicate encoded malware, and AGIS generates a signature from the decryption loop by identifying the instruction writing to the addresses of malicious calls and chopping the executable.

#### Signature Construction
Chops from the beginning of the execution flow to important calls constitute vanilla malware. For encrypted infections, the chop for the decryption loop is treated as vanilla malware. AGIS can generate byte-sequence or regular-expression signatures. The efficacy of these signatures depends on the selection of the malicious call; frequently used calls require longer signatures to reduce false positives.

### Evaluation

We evaluated AGIS for its effectiveness in detecting new infections, the quality of generated signatures, and resilience to moderate obfuscations. Experiments were conducted with real-world malware strains, including MyDoom, NetSky, and various keyloggers, in a VMware environment with Windows XP SP2.

#### Infection Detection
AGIS successfully detected all tested malware strains. MyDoom (D/L/Q/U) and NetSky (BIX) triggered the mass-mailing rule, while keyloggers triggered the keylogger rule. Infection graphs were generated for all cases. For example, MyDoom.D, a mass-mailing worm, was detected after it copied itself, modified registry keys, and performed numerous file reads and SMTP server communications. Spyware.KidLogger, a spyware, was also detected and analyzed.

This comprehensive evaluation demonstrates AGIS's capability in detecting and analyzing a wide range of malware, providing robust and reliable infection detection and signature generation.