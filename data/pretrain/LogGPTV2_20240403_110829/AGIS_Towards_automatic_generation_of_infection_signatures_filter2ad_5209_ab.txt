executable it points to.
AGIS builds an infection graph using a system call level
taint-analysis technique. This was achieved in our imple(cid:173)
mentation through a kernel monitor that hooks Windows
system service dispatch table (SSDT) and the shadow table
to intercept system calls. The monitor first taints the sus(cid:173)
picious code trapped in a honeypot and its process, which
forms the first set of vertices on the infection graph we call
the sources. Other vertices are obtained through taint prop(cid:173)
agation: a tainted v propagates taint to another subject or
object v' if an arc can be drawn from v to v' as discussed
above. Figure 1 presents the infection graph of the example
in Section 2.1, in which the Trojan passes the taint to the
Run registry key, the hook installer, and the DLL file.
1-4244-2398-9/08/$20.00 ©2008 IEEE
239
DSN 2008: Li et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:16:20 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
NAME
Keylogger
rule
SECURITY POLICY
=
any()*;hook(keyboard,f)lfl
(WriteFilell Sendto) IExistPath(fl )
detected(N)&&backtrack(N) && GenSign(N)
f; anyO*;
~ function f
COMMENTS
If a call to hook keyboard is observed in the system call set SysCall and the callback
it points to has an execution path leading to either WriteFile or Sendto,
then a keylogger is detected (detected) and its processes and files are added into N, the
infection set. We also need to backtrack the infection graph, adding the tainted subject or
object with an arc to the subject(s) or object(s) in N to N (backtrack), and generate a
signature for every file in N (GenSign).
If an executable
loop to search directories
contains
file
a
any ()*i (ReadFile () IExistSearchLoop i
(ISendto(SMTP))*)*i
detected (N) && backtrack(N) && G enSign (N)
Mass-
mailing-
worm rule
Table 1. Examples of security policies written in BMSL. BMSL rules have the form event_pattern ---+ action, where both event_pattern and
action can be defined as regular expressions to connect functions and statements.
reading files
Sendto(SMTP) ~ (ExistSearchLoop) and API calls to send messages to SMTP servers, then it is a mass-
mailing worm.
for
licious activities and retrievable from a compromised sys(cid:173)
tem. We call the set of such behaviors the infection action
set, denoted by M, which is used to generate signatures for
executable files in N.
Figure 1 illustrates a detection and backtrack process.
Here the malicious behaviors include the actions to hook
and record keystrokes from the keylogger, the actions to
change the run registry key and deposit the keylogger from
the installer, and the registry entry that points to the keylog(cid:173)
ger which automatically starts the malware.
2.3
Infection Signature Extraction
An ideal infection signature should uniquely character(cid:173)
ize an infection to eliminate false positives, and also toler(cid:173)
ate metamorphism exhibited by malware variants to avoid
false negatives. AGIS pursues these two goals by extract(cid:173)
ing the instruction sequences responsible for an infection's
behaviors in its infection action set M. These instruction
sequences are extracted through a combination of dynamic
and static analysis.
Dynamic Analysis. An executable's behaviors observed by
AGIS are in the form of system calls. Our dynamic analyzer
implemented in the kernel monitor intercepts these calls and
examines their call stacks to find out the return addresses in(cid:173)
side a tainted executable's process image. These addresses
are further mapped into the call sites in the executable's
physical file. This approach is able to work smoothly for
programs that do not contain any encoded components. For
an encoded executable, the approach reveals the discrep(cid:173)
ancy between the instructions in its process image and those
in its file, which allows the static analyzer to extract the code
used to decrypt and run it.
A challenge is that malware can forge a stack frame, in(cid:173)
cluding its return address, and enter a library or API call
using a jump instruction other than a call. If the jump is
direct, then this jump to the library or API call can be de(cid:173)
tected by static analysis and used either in our subsequent
static analysis or used within a signature directly (since nor(cid:173)
mal programs do not do this). If the jump is indirect, and if
the jump target cannot be computed by static analysis, then
dynamic analysis is needed to infer the jump target, either
by instrumenting the jump or via instruction-level tracing.
A similar approach would be necessary to analyze multi(cid:173)
threaded malware in which one threat manipulates the stack
frames of another. AGIS does not implement this analysis
at present, however, and refining this approach is a topic of
ongoing work.
Static Analysis. After locating all the call sites, our static
analyzer, which was implemented based upon Proview
PVDASM (http://pvdasm.reverse-engineering . net/),
applies a chopping technique [25] to extract the instruc(cid:173)
tion sequences influencing the calls responsible for the ma(cid:173)
licious behaviors in the infection action set M. Chopping
is a static analysis technique which reveals the instructions
involved in carrying the influence of one specific instruction
(the source criterion) to another (the target criterion) [25].
For example, to find a chop for a target instruction call
eax, we first find fronl the progranl's control flow the last
instruction before the target which operates on e ax, and
then move on to identify the last instruction which influ(cid:173)
ences that instruction, and so on, until the source instruction
is reached. Since the behaviors in which we are interested
are system or API calls, the objective of the chopping is to
find all the instructions which directly or transitively affect
these calls. To this end, not only do we need to take the call
instruction itself as the target criterion, but we also have to
include in the target other instructions known to be part of
the call, in particular, the stack operations for transferring
parameters. This requires knowledge of an API function's
model, which provides the information on the input param(cid:173)
eters of the API.
Here we describe the idea behind our static analysis
mechanism. Our approach takes advantage of the call se(cid:173)
quences observed in the dynamic analysis step to pinpoint
the execution path traversed.
If the executable is multi(cid:173)
threaded, we build a call sequence for every thread to make
sure that it reflects an execution path. Let (co, ... ,cn ) be
the call sites of a call sequence, where Co is the beginning of
the executable's control flow and Cn is a call site inside the
infection action set M that is determined to violate policy.
To extract the instructions responsible for that call, AGIS:
(1) disassembles the executable's binaries and constructs a
control flow graph; (2) finds an executable path p which
includes (co, ... ,cn ); (3) for k == n . .. 1, chops the instruc-
1-4244-2398-9/08/$20.00 ©2008 IEEE
240
DSN 2008: Li et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:16:20 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-272008
tion sequence ofp between Ck-l and Ck.
Metamorphic Infection. AGIS can reliably extract a chop
even if an infection has been moderately obfuscated. Com(cid:173)
mon obfuscation transformations [4] include junk-code in(cid:173)
jection, code transposition, register reassignment and in(cid:173)
struction substitution. AGIS forms a CFG before chopping
which defeats the injection of the junk code unrelated to the
malicious calls. The technique proposed in SAFE [4] can
also be used to mitigate the threat which adds junk code to
a chop. Specifically, code between two points on the chop
[PI, P2] is deemed as junk code if every variable (register or
buffer) has the same value at PI as its value at P2. How(cid:173)
ever, the problem of junk code detection is undecidable in
general [4]. The code transposition attack becomes power(cid:173)
less in the presence of the CFG, which restores the original
program flow. Register reassignment and instruction substi(cid:173)
tution are of more concern for infection scanning than sig(cid:173)
nature generation. However, a static-analysis based scanner
can convert the output of AGIS to an intermediate form [5]
which replaces the registers and addresses with variables
and utilizes a dictionary to detect equivalent instructions.
Encoded Executables. The dynamic analyzer also com(cid:173)
pares an infection's instructions around malicious call sites
in the virtual memory with their counterparts in the physical
file. 3 If there is a discrepancy, AGIS reports that the mal(cid:173)
ware is encoded and moves on to generate a signature from
its decryption loop. This is achieved through identifying
the instruction which writes to the addresses of these mali(cid:173)
cious calls, and then chopping the infection's executable to
extract all other instructions that influence it.
A critical question here is how to capture the instruc(cid:173)
tion serving as the chopping target. The most reliable way
is using tools such as Microsoft's Nirvana and iDNA [1] to
conduct an instruction-level tracing. A more lightweight but
less reliable alternative is changing a malicious executable's
physical file to set the attribute of the section involving ma(cid:173)
licious calls to ready-only and rerun the executable. Such
an execution will produce an exception, which reveals the
location of the instruction. We evaluated this approach us(cid:173)
ing a real infection (Section 3.2), and successfully extracted
the chop for the decryption loop. However, this approach
might identify an incorrect instruction if the read-only sec(cid:173)
tion actually contains data.
Construction of Signatures. A collection of the chops
from the beginning of the execution flow Co to important
calls within one thread or process constitutes a piece of
vanilla malware, which describes the malicious activities an
infection carries out. In case the infection is encrypted, the
chop for its decryption loop is treated as vanilla malware.
3A malware could evade this approach by deliberately putting the instructions
around call sites to their corresponding locations in the file. This attack can be de(cid:173)
feated through extracting the chop of malicious calls from a tainted process's virtual
memory and checking its existence in the process's physical file.
Compared with a static analyzer,
traditional pattern(cid:173)
matching scanners perform much faster though they are
much less resilient to metamorphism. AGIS can generate
byte-sequence signatures or regular-expression signatures
for these scanners. Here is a simple approach. Given a
signature size l in bytes, the signature generator selects a
malicious call or a decryption instruction and walks from
its location backward along its chop to find the first m + 1
instruction segments, each of which has a continuous ad(cid:173)
::; m + 1) bytes. These
dress space and contains B i (1 ::; i
segments satisfy two conditions: (1) 2:7:1B i
::; land (2)
2:7:~1 Bi > l. A regular-expression signature is formed
through a conjunction of the first m segments and a string
in the (m + l)th segment with a length of l - 2:7:1 Bi
bytes. For example, let the signature size be 30 bytes and
the sizes of three segments closest to the call site be 8, 12
and 16; the signature generated is a conjunction of the first
and the second segments, and a string of 10 bytes in the last
segment. OUT research shows that the efficacy of such a sig(cid:173)
nature is related to the selection of the malicious call. If that
call has also been frequently used by legitimate programs,
a long signature is needed to subdue the false positive rate.
Otherwise, a short signature can be sufficient.
3 Evaluation
(2) quality of
In this section, we describe our evaluation of AGIS.
OUf objectives were to understand its efficacy fronl
(1) effectiveness in detecting new
three perspectives:
it gener(cid:173)
infections,
ates, and (3) resilience to moderate obfuscations.
To
this end, we conducted experiments with infections
caused by strains of real-world malware and their vari(cid:173)
including MyDoom (D/L/QIU), NetSky(BIX)
ants,
Spy(cid:173)
(http://www.symantec.com/security_response).
ware.KidLogger
(http://www.rohos.com/kid-logger I),
Invisible KeyLogger
(http:
//www.spywareguide.com/product_show.php?id=438/).
and Home Keylogger vl.60 (http://www.kmint21.com/
keylogger/). The experiments were carried out in a virtual
machine (VMware) installed with Windows XP (service
pack 2) on a host with 3.2GHz CPU and 1GB memory.
97 Shareware
the
signatures
version
3.1
Infection Detection
We ran AGIS against the nine strains of malware inside
VMware and successfully detected all of them. MyDoom
(D/L/Q/U) and NetSky (BIX) triggered the mass-mailing
rule in Table 1, and all three keyloggers set off the key(cid:173)
logger rule. AGIS successfully generated infection graphs
for all of these infections. Here, we take MyDoom.D and
Spyware.KidLogger as two examples to elaborate on our
experiments.
MyDoom.D. Mydoom.D is a mass-mailing worm, which
1-4244-2398-9/08/$20.00 ©2008 IEEE
241
DSN 2008: Li et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:16:20 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
is also capable of turning off anti-virus applications, stop(cid:173)
ping the computer from booting and reducing system se(cid:173)
curity (http://www.syrnantec.com/secur i t Y_response I
writeup. jsp?docid=2004-012612-5422-99). This worm
arrives as an attachment to an email.
Our kernel monitor
reported the following behav(cid:173)
It first copied itself to \ WINDOWS \SYSTEM32 \
iors.
as
taskrnon. exe and dropped another executable
shirngapi. dll to the same directory. Then, it modified
many registry keys, including the Run registry key to point
to itself. The monitor observed that a thread of the exe(cid:173)
cutable invoked a large number ofNtReadF i Ie calls from
the same call site. These calls touched 588 files. This well
exceeds the threshold for detecting a search loop, which
we set as 100. Another thread of the application made a
number of calls to NtDeviceIoControlFile, which
turned out to be the attempts to invoke Send, delivering
messages to the SMTP server related to an email address we
included in a "goat" htnl1 file. At this point, the event con(cid:173)
ditions for mass-mailing worms were unambiguously met
and the rule was triggered.
Spyware.KidLogger. Spyware.KidLogger is a spyware