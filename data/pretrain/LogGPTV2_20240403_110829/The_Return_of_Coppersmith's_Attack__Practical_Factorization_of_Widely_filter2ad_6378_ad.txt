mized M(cid:48) for various key lengths can be found in Figure 1. (cid:140)e most
common key lengths used the following m, t values: m = 5, t = 6
for 512, m = 4, t = 5 for 1024, m = 6, t = 7 for 2048, m = 25, t = 26
for 3072, m = 7, t = 8 for 4096.
2.7.1 Optimizing M(cid:48). In order to preserve the format of the
primes, we are looking for a divisor M(cid:48) of M (see Section 2.3.3)
that is a primorial M = 2 ∗ 3 ∗ · · · ∗ Pn . Divisor M(cid:48) of M is selected
as a candidate for an optimal M(cid:48) (with the best m, t) if the value
ordM(cid:48) (65537) is su(cid:129)ciently small but the size M(cid:48) is large enough
(Coppersmith’s algorithm requires lo❕2(M(cid:48)) > lo❕2 (N )/4).
Our aim is to perform a brute force search for M(cid:48). In order to
speed up the search we are looking for the value ordM(cid:48) (65537)
rather than M(cid:48). Once ord(cid:48) = ordM(cid:48) (65537) is found, the maximal
corresponding value M(cid:48) can be computed easily. Although the
search space for ord(cid:48) is smaller than the space for M(cid:48), the brute
force search is still feasible only for smaller key sizes. Hence, we
used a combination of two heuristics – greedy and local brute force
search.
(cid:140)e general strategy is to maximize the size of M(cid:48) and simulta-
neously minimize the corresponding order. (cid:140)e value M(cid:48) for given
key size was found in two steps:
• First, we used a greedy heuristic (with a “tail brute force
❕r eedy
phase”) to (cid:128)nd an “almost” optimal M(cid:48), denoted by M(cid:48)
with the corresponding order ord(cid:48)
.
space of a “local” brute force search for a be(cid:138)er M(cid:48).
❕r eedy
In both strategies, we used the simple Algorithm 2 that given ord(cid:48)
looks for the maximal M(cid:48) (divisor of M) such that given ord(cid:48) equals
ordM(cid:48) (65537). In some cases, no such M(cid:48) exists, then Algorithm 2
(cid:128)nds M(cid:48) such that the corresponding order ordM(cid:48) (65537) is the
• Second, the value ord(cid:48)
❕r eedy
was used to reduce the search
221225Number ofattempts ●Parameter optimizationfor 512-bit RSA keys0.0010.010.1Time/attempt[seconds] +0.260.280.300.320.34Known bits as a fraction of N10−310−2Total time[years]231238Number ofattempts ●Parameter optimizationfor 1024-bit RSA keys0.011Time/attempt[seconds] +0.260.280.300.32Known bits as a fraction of N100101102Total time[years]241252Number ofattempts ●Parameter optimizationfor 2048-bit RSA keys0.1101000Time/attempt[seconds] +0.260.280.300.320.34Known bits as a fraction of N102103104105106107108Total time[years]293213521772219Number ofattempts ●Parameter optimizationfor 3072-bit RSA keys0.1101000Time/attempt[seconds] +0.260.280.30Known bits as a fraction of NTotal time[years]247265283Number ofattempts ●Parameter optimizationfor 4096-bit RSA keys0.110Time/attempt[seconds] +0.260.280.300.32Known bits as a fraction of NTotal time[years]223228233Number ofattempts ●Parameter optimizationfor 544-bit RSA keys0.010.11Time/attempt[seconds] +0.260.280.300.320.34Known bits as a fraction of N10−210−1Total time[years]Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1637maximal proper divisor of given ord(cid:48). Algorithm 2 is based on the
formula (7). (cid:140)e algorithm eliminates from M only those prime
divisors Pi|M whose partial order ordPi (65537) does not divide
given ord(cid:48).
2.7.2 Greedy heuristic. In the greedy strategy, we try to min-
imize ordM(cid:48) (65537) and simultaneously maximize the size of M(cid:48)
(to get lo❕2(M(cid:48)) > lo❕2(N )/4). (cid:140)e greedy heuristic is an iterated
strategy with local optimal improvement performed in each iter-
ation. In each iteration, we reduce (divide) ord(cid:48) by some prime
and compute the corresponding M(cid:48) of maximal
power divisor p
size using Algorithm 2. In the greedy choice, we select the most
of ord(cid:48) that provides a large
“valuable” prime power divisor p
decrease in the order ord(cid:48) at a cost of a small decrease in the size
of M(cid:48). (cid:140)e divisor is chosen as the highest reward-at-cost value,
de(cid:128)ned as:
ej
j
ej
j
∆size of ordM(cid:48)
∆size of M(cid:48) =
log2 (ordM(cid:48)
log2 (M(cid:48)
) − log2 (ordM(cid:48)
old ) − log2(M(cid:48)
new )
old
new )
old
old
ej
j
ej
j
new computed by Algorithm 2 with M(cid:48)
for M(cid:48)
ej
/p
j
as an input. (cid:140)e reward-at-cost represents the bit size reduction of
the order at the cost of the bit size reduction of M(cid:48). (cid:140)e following
example illustrates how our greedy heuristic works:
, ord(cid:48) = ordM(cid:48)
old
old
,· · · , 24
, 3,· · · , 34
new = M(cid:48)
Example 2.1. (cid:140)e initial M(cid:48)
old
old /167 for the input values Mold , ord(cid:48) = ordM(cid:48)
for RSA–512 is set to M = P39# =
167# = 2 ∗ 3 ∗ · · · ∗ 167. (cid:140)e factorization of the initial order is:
ord(cid:48) = ordM(cid:48)
= 24 ∗ 34 ∗ 52 ∗ 7∗ 11∗ 13∗ 17∗ 23∗ 29∗ 37∗ 41∗ 83.
, 7,· · · , 83 for the
(cid:140)ere are 19 candidates 21
, 5, 52
of ord(cid:48) in the (cid:128)rst itera-
most valuable prime power divisor p
= 831, Algorithm 2 eliminates 167 from
tion. For the candidate p
since 831|ord167 = 166 and 831 (cid:45) ord(cid:48). Algorithm 2 returns
M(cid:48)
old
M(cid:48)
new = M(cid:48)
/831
.
(cid:140)e reward-at-cost for 831 is computed as log2 83/ log2 167 = 6.37
7.38
for the reduction of the order by 6.37 bits and the reduction of
M(cid:48) by 7.38 bits. For the candidate 171, Algorithm 2 eliminates
103, 137 (i.e., M(cid:48)
old /(103 ∗ 137)), since 17|ord103 = 51 =
17 ∗ 3, 17|ord137 = 136 = 17 ∗ 8 and 171 (cid:45) ordM(cid:48)
/17. (cid:140)e
reward-at-cost for 171 is computed as log2 17/ log2 (103 ∗ 137) =
4.08/13.78, etc. (cid:140)e most valuable candidate in the (cid:128)rst iteration is
ej
p
j
= M/167 and ord(cid:48) =
= 24 ∗ 34 ∗ · · · ∗ 7 ∗ 11 ∗ 13 ∗ 17 ∗ 23 ∗ 29 ∗ 37 ∗ 41 and
,· · · , 24,
, 7,· · · , 41. In the second iteration, the best candidate
of new ord(cid:48) with the highest reward-at-cost is p
ordM(cid:48)
compute the new reward-at-cost for all 18 candidates 21
3,· · · , 34,5, 52
for divisor p
ej
j
531, etc.
ej
j
(cid:140)roughout the iterations, the following best candidates for p
ei
i
are found: 831
In the last iteration, the greedy heuristic computes M(cid:48) that is
too small (log2(M(cid:48))  M(cid:48)
, starting with M(cid:48)
2.7.3 Tail brute force. (cid:140)e greedy strategy can be improved for
larger keys by brute force testing all divisors of ordM(cid:48) that is found
by the greedy heuristic. First, we execute the greedy strategy, that
gives us the sequence of the values of M(cid:48)
1 > · · · > M(cid:48)
from the iterations 0, 1,· · · , L. (cid:140)en, we use brute force (testing
L
all divisors) for ordM(cid:48)
L−1 and continuing with
M(cid:48)
L−2,· · · , limited by reasonable running time.
Local brute force. (cid:140)ere are two ways to perform the brute
2.7.4
force search for an optimized M(cid:48) (divisor of M). We can search
through divisors M(cid:48) of M, or we can use an alternative search
through all divisors ord(cid:48) of ordM (65537) (M(cid:48)|M =⇒ ordM(cid:48)|ordM )
and compute the corresponding M(cid:48) from ord(cid:48) using Algorithm 2.
We use the second approach since the search space for ord(cid:48) is
signi(cid:128)cantly smaller than that for M(cid:48). For example, for 512-bit RSA
keys, M = P167# is product of 39 primes, i.e., there are 239 di(cid:130)erent
divisors of M, while there are only 52∗3∗29 ≈ 215 di(cid:130)erent divisors
of ordM (65537) = 24 ∗ 34 ∗ 52 ∗ 7∗ 11∗ 13∗ 17∗ 23∗ 29∗ 37∗ 41∗ 83.
For smaller key sizes, it is possible to search through all divisors
of the order, but for large key sizes (e.g., 4096-bit RSA), the brute
force strategy is infeasible and needs to be optimized. We imple-
mented an algorithm that recursively iterates through all divisors
ord(cid:48) of ordM (65537). Recursion allows us to optimize the search
and to skip inappropriate candidates (small M(cid:48), big ordM(cid:48) (65537))
for an optimal M(cid:48).
We use two approaches that recursively iterate through orders:
• Decreasingly – In this approach we start with the full
order ord(cid:48) = ordM (65537), and in each iteration, we di-
vide ord(cid:48) = ord(cid:48)/pj by a prime divisor of current ord(cid:48).
(cid:140)e branch of the recursion is stopped when M(cid:48) is too
small (lo❕2(M(cid:48)) < lo❕2 (N )/4). (cid:140)is approach is suitable
for key sizes with bit sizes of M(cid:48) close to the lower bound
lo❕2 (N )/4 because only several primes pj can be eliminated
from ord(cid:48) and most inappropriate candidates are skipped
due to a small size of M(cid:48).
• Increasingly – We start with ord(cid:48) = 1 and in each step
multiply the order ord(cid:48) = ord(cid:48)∗pj by some prime divisor pj
of ordM (65537). When ord(cid:48) is too large, we stop the given
branch of the recursion and skip the worst candidates. As
an upper bound for ord(cid:48), we use the value ord❕r eedy ∗ 25.
(cid:140)is approach is suitable for key sizes for which the bit
size of M(cid:48) is signi(cid:128)cantly bigger than lo❕2 (N )/4 since most
candidates are skipped due to the large value of ord(cid:48).
2.8 Guessing strategy
Our method can (cid:128)nd the prime factor p for the correct guess x of
a(cid:48). A simple incremental search x = 0, 1,· · · for a(cid:48) would iterate
through ordM(cid:48) (65537) for di(cid:130)erent values of x in the worst case
since
p = 65537a(cid:48) mod M
(cid:48)
.
Denoting ord(cid:48) = ordM(cid:48) (65537), we are looking for x ≡ a(cid:48) mod
ord(cid:48).
Since both p, q are of the same form, our method can also (cid:128)nd
the factor q for x ≡ b(cid:48) mod ord(cid:48). Hence, our method is looking
simultaneously for p and q. (cid:140)is fact can be used to halve the time
needed to (cid:128)nd one of the factors p, q of N . In order to optimize the
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1638guessing strategy, we are looking for the smallest subset (interval)
of Zord(cid:48) that contains either a(cid:48) or b(cid:48). We use the value c(cid:48) obtained
during the (cid:128)ngerprinting (a discrete logarithm of N ) to describe
the desired interval. (cid:140)e interval is of the following form:
c(cid:48)
2 ,
c(cid:48) + ord(cid:48)
2
.
I =
(cid:34)