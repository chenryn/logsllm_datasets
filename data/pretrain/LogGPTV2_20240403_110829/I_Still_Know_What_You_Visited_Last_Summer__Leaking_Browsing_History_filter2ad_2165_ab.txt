faster than it could be retrieved from the source, it reveals
that someone looked up the same information in the past. We
can only prevent this leak by slowing down retrievals from
the cache, or partitioning it by user; either method renders the
cache less useful.
Timing attacks are the most well-known type of side channel
attack. Baron’s essay also considers timing attacks on browsing
history: the attacker can make the page take longer to lay out if
a link is visited than if it is unvisited, or vice versa. JavaScript
has access to the system clock and can force page layout
to occur synchronously, so it can easily measure this time.
Modern computers’ clocks provide enough precision that even
apparently trivial details of rendering, such as whether an area
149
of color is partially transparent, or whether a line of text is
underlined, can produce measurable differences in the time
to draw the page. There doesn’t even need to be a rendering
difference. All current browsers process CSS selectors from
right to left [22], so if a style rule such as
[class*="abc"] :visited { ... }
appears somewhere in the style sheets for a page, layout will
take longer if any link on the page is visited.
Timing is by no means the only type of side-channel attack.
As an example, in the course of the experiments described in
this paper, we discovered a side channel for history snifﬁng in
early beta versions of Firefox 4 (which implements Baron’s
defense). For some time, Firefox has looked up history database
entries in the background, meanwhile drawing the page as it
would appear if all links were unvisited. If any of the links turn
out to have been visited, the page is redrawn. Changing the
target of a link will start this whole process over. So far, there
is no problem, because the redraws are invisible to standard
JavaScript. However, as an extension for benchmarking and
testing, early betas of Firefox 4 would generate a JavaScript
event called MozAfterPaint every time the browser ﬁnished
redrawing a page. An attacker could install a handler for this
event, repeatedly change the target of a link, and after each
change, count the number of times Firefox calls the event
handler. If it gets called twice, the current link target is visited.
We reported this bug to Mozilla [23], and it was ﬁxed in beta 10
(by removing the extension).
D. Defense
As mentioned previously,
in 2010 Baron developed a
defense [3] which blocks all known techniques for automated
snifﬁng. To block direct snifﬁng, the computed style APIs
pretend that all links are unvisited. To block indirect and side-
channel snifﬁng, CSS’s ability to control the visited/unvisited
distinction is limited, so that visited links are always the
same size and take the same amount of time to draw as their
unvisited counterparts. Style rules applying to links in general,
or unvisited links, can still do everything they could before
the defense was implemented. Style rules for visited links,
however, can only change visible graphical elements (text,
background, border, etc.) from one solid color to another solid
color. They cannot remove or introduce gradients, and they
cannot change the transparency of a color. For example, the
style rules shown in Figure 1 still work as designed. However,
suppose the text-decoration property was moved from
the a rule to the a:visited rule. Older browsers would then
underline unvisited links but not visited links, but browsers
that implement the defense would underline all links.
It is also necessary to ensure that selector matching takes
the same amount of time whether or not any links are visited.
To do so, Baron adjusted the algorithm for selector matching
a bit. A browser that implements the defense will only do one
history lookup per style rule, and it will do it last, after all the
other work of selector matching. Thus, the example selector
in Section III-C now takes the same amount of time whether
or not any links are visited. Also, a rule that needs more than
one lookup, such as
:visited + :visited { ... }
which is meant to apply to the second of two visited links in a
row, will be ignored by a browser that implements the defense
(technically, it will never match any elements).
Baron’s defense was rapidly adopted by browser vendors; as
of this writing, it is included in Firefox 4, Chrome 9, Safari 5,
and IE 9 (in order of adoption).
IV. EXPERIMENT 1: INTERACTIVE ATTACKS
Baron’s defense makes no attempt to address interactive
attacks, where victims’ actions on a site reveal their browsing
history. Interactive attacks obviously require victims to interact
with a malicious site, and cannot hope to probe nearly as many
links as the automated attacks that are no longer possible. It
might also seem that an interactive attack would be hard to
disguise as legitimate interaction. We claim that these are not
signiﬁcant obstacles: we claim that interactive attacks can be
disguised as “normal” interactive tasks that users will not ﬁnd
surprising or suspicious, and that they can still probe a useful
number of links. To demonstrate these claims, we designed
four interactive tasks that could be used to probe browser
history, and tested them on people recruited from Amazon’s
Mechanical Turk service [24].
A. The tasks
All of our tasks operate within the constraints of Baron’s
defense: they use visited-link styles only to change the color
of text or graphics on the screen. They are designed to probe
8 to 100 links each, which is small, but as demonstrated
by Jang, not too small for the sites currently making use of
automated history exploits. Finally, each task masquerades
as an interaction that would not be out of place on a honest
website. It is common for web sites to challenge their visitors to
perform a task that is relatively easy for a human, but difﬁcult
for software [25]. This is to prevent automated abuse of a
site (“spam” posts to a message board, for instance). Such
challenges are referred to as CAPTCHAs.2 The most common
type of CAPTCHA is a request to type either a few words, or
a string of random letters and numbers, from an image shown
on the screen. The text is manipulated to defeat OCR software.
Another common type of CAPTCHA is a visual puzzle, to
be solved using the mouse; visual puzzles are also commonly
presented as true games (that is, intended only to entertain).
Interactive attacks necessarily involve placing hyperlinks on
the screen, and then inducing victims to do something with
them that will reveal to the attacker which ones are visited links.
Hyperlinks have built-in interactive behavior that will reveal
that something ﬁshy is going on, if a victim experiments with
the page rather than just following the instructions. For instance,
clicking on a link (visible or not) will cause the browser to
load the link destination; hovering the mouse pointer over a
link (again, visible or not) will display the link’s destination
2CAPTCHA is a contrived acronym for Completely Automated Public
Turing test to tell Computers and Humans Apart.
150
Fig. 2. Our four interactive tasks. Top to bottom: word CAPTCHA, character CAPTCHA, chessboard, and visual matching. Screen shots taken with Safari 4.0.
151
Please type the string of characters shown below,then pressRETURN.You don’t have to match upper and lower case.Please click on all of the chess pawns.The large image on the left was assembled from two of thesmallimages on the right: one from the first row and onefrom thesecond.Please click on the two small images thatmake up thelarge one.Please type all the words shown below, then press RETURN.low hangwe life aloneline costmatter which combination of symbols is “on,” their composite
will always be a character that the victim can type, and each
combination produces a different composite. (cid:1)+(cid:2) = (cid:5); (cid:1)+(cid:7) =
(cid:6); (cid:2) + (cid:7) = (cid:3); (cid:1) + (cid:2) + (cid:7) = (cid:4). The always-on (cid:0) is necessary
because position within the overall string is meaningful; without
it, victims might see a series of blank spaces. In response
they would probably type only one space, and that would
make the result ambiguous. Again, attackers cannot expect
their victims to type more than a few characters, but an eight-
character CAPTCHA of this design will probe 24 sites, and a
12-character one will probe 36.
This attack has more technical complications to cope with
than the previous one. Hardly anyone has a seven-segment LCD
font installed, but this is only a minor hurdle, as all modern
browsers implement site-supplied fonts [26]. More seriously,
Baron’s history-snifﬁng defense does not allow visited-link
rules to change the transparency of a color. This restriction
prevents timing attacks (drawing partial transparency is slower
than drawing opaque color) but also makes it harder to compose
characters by stacking them. Attackers can work around this
restriction by making the characters always be nearly (but not
entirely) transparent, whether or not they are visited links; this
is allowed. They are black if visited and white if unvisited.
Each composite segment is thus drawn in a shade of gray. This
might be acceptable; if not, attackers could apply an SVG
color transformation to map all shades of gray to solid black.
Unfortunately, SVG is not a universal feature [27]; IE did not
support it at all before version 9 (not yet released as of this
writing) and no browser implements the complete spec.
3) Chessboard puzzle: This task presents a chessboard
grid (not necessarily the same size as a standard chessboard)
on the screen; some of the squares are occupied by chess
pawns. Victims are asked to click on all of the pawns. In
fact every square contains a pawn, but each is a hyperlink
to a different website, and only the pawns corresponding to
visited sites are made visible, using the same technique as for
the word CAPTCHA; invisible pawns are the same color as
their background. This is technically straightforward; the only
complication is that the pawns must be rendered using text
or SVG shapes, so their color can be controlled from CSS.
Fortunately, Unicode deﬁnes dingbats for all the standard chess
pieces; in our implementation we used another site-supplied
font to ensure that participants got pawns rather than “missing
glyph” symbols. An attacker might be able to rely on system
fonts for the pawn dingbat, but it’s easy enough to use a site
font that there’s no reason not to.
This puzzle is easy for victims to complete, and the grid can
be at least ten squares on a side—the only limits are the size
of the screen, and victims’ patience—so this attack can test
at least 100 links’ visitedness. However, it becomes tedious if
there are more than a few visible pawns. Also, if used for a real
attack, the page would have no way to tell how many clicks
each victim will make, so attackers must resort to a time-out
or an explicit “go on” button; either might seem suspicious.
4) Pattern matching puzzle: In this task, victims are asked
to select two images which, when “assembled,” produce a
152
Fig. 3.
7-segment LCD symbols stacked to test three links per composite
character. The (cid:0) at the bottom is always visible, but the (cid:1), (cid:2), and (cid:7) are only
visible if a URL was visited.
URL somewhere in the browser’s “chrome” (such as the status
bar or the URL bar); selecting all the text on the page will
reveal text that has been hidden by drawing it with the same
color as the background. Fortunately for the attacker, all these
inconvenient behaviors can be suppressed by positioning a
transparent image over all the hyperlinks.
Figure 2 shows what each of our interactive attacks looked
like to a participant in the experiment, including the instructions
for each. Note that we did not include the noise, lines, or
distortions typical of real CAPTCHAs; image recognition
software would have no trouble with any of them. (If we had
done this, the tasks would also have been more difﬁcult for
our participants.) An attacker determined to make their phony
CAPTCHAs look as much like real ones as possible could use
SVG transformations to distort the text, and/or include lines
and visual noise in the transparent image superimposed on the
links to suppress their normal behavior.
1) Word CAPTCHA: This is the simplest task. Victims are
asked to type several short English words. Each word is a
hyperlink to an URL that the attacker wishes to probe; if
visited, the word is styled to be drawn in black as usual, but
if unvisited, it is drawn in the same color as the background.
Thus, victims see only words corresponding to sites they have
visited. The attacker must arrange for at least one word to be
visible no matter what; otherwise, a victim who has visited
none of the URLs the attacker is probing will see a blank
CAPTCHA and think the site has malfunctioned.
This task is easy to perform, and simple to implement, but
can only probe a small number of links, since attackers cannot
expect their victims to be willing to type more than a few
words. In our study, we used a maximum of ten words, of
which one was always visible and one always invisible; thus
we could test no more than eight links.
2) Character CAPTCHA: This task is very similar to the
previous one, but by clever choice of font and symbols, it tests
the visitedness of three links per character typed. Victims are
asked to type what appears to be a string of letters, numbers,
and dashes from a restricted character set, in a font that mimics
seven-segment LCD symbols. As shown in Figure 3, each
visible character is actually four characters, superimposed,
three of them visible only if an associated link is visited. No
composite image. The composite is made up of four SVG
shapes, whose ﬁll color depends on the visitedness of four
hyperlinks. There are four choices for each of the two images
to be selected; together, they exhaust the sixteen possible
appearances of the composite image. While this does rely on
SVG, it only requires basic drawing features that are universally
supported (except by IE).
One encounter with this puzzle tests the visitedness of four
links. It could be presented as a brainteaser challenge, giving a
malicious site the opportunity to make each victim solve many
instances of the puzzle in succession, and so probe many links.
It is decidedly more difﬁcult than our other tasks, but it could
be made easier by not composing two images, or by adjusting
the images to make the correct answer more obvious.
B. Procedure
We constructed a website which would challenge participants
to carry out instances of each of the above four tasks. We
did not actually sniff history in the implementation of these
tasks, because our goal was to prove that these tasks could be
performed by a typical user accurately, quickly, and without
frustration. If we had implemented genuine history-snifﬁng
attacks, we would not have known the ratio of visited to
unvisited links to expect for each prompt, nor would we have
been able to detect errors. Instead, we randomly generated task
instances corresponding to known proportions of visited and
unvisited links. Each participant experienced a ﬁxed number of
trials of each task, as indicated in Table I; each trial selected a
proportion uniformly at random without replacement from the
appropriate column of Table I. The site automatically skipped
tasks that would not work with participants’ browsers (notably
those that required SVG, for participants using IE).
We recruited 307 participants from Amazon Mechanical
Turk for a “user study.” Participants were required to be at
least 18 years old, able to see computer graphics and read
English, and be using a browser with JavaScript enabled. The
precise nature of the study was not revealed until participants
visited the site itself. At that point they were told:
We are studying how much information can be
extracted from a browser’s history of visited web
pages by interactive attacks—that is, attacks that
involve your doing something on a website that
appears to be innocuous. It used to be possible to
probe your browsing history without making you
do anything, but browsers are now starting to block
those attacks, so interactive probes may become more
common in the future.
In this experiment you will carry out some tasks
similar to the ones that a malicious site might use
to probe your browsing history. These tasks do not
actually probe your browsing history; instead we
measure how quickly and accurately you can do
them. From this, we will be able to infer how much
information each of the tasks could extract from your
history.
PROPORTIONS OF VISITED LINKS USED FOR EACH TASK.
N = TOTAL NUMBER OF LINKS, V = NUMBER OF VISITED LINKS.
TABLE I
Character
captcha
9 trials
N V
3
12
6
12
12
9
24
6
24 12
24 18
36
9
36 18
36 27
48 12
48 24
48 36
60 15
60 30
60 45
Word
captcha
9 trials
N V
1
10