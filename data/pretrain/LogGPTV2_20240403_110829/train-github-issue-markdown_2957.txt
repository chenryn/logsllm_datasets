## Feature request: Fill name attribute or add static toString() method for
all PropTypes.
For example:
    const StringPropType = PropTypes.string;
    expect(StringPropType.name).toEqual('checkType: String');
    const ArrayOfBoolType = PropTypes.arrayOf(PropTypes.bool);
    expect(ArrayOfBoolType.name).toEqual('bound checkType: Array of Bool');
    const ShapeType = PropTypes.shape({
      foo: PropTypes.bool,
      bar: PropTypes.number
    });
    expect(ShapeType.name).toEqual('bound checkType: Shape of foo:Bool, bar:Number'
It maybe useful when debugging.  
In my case - I need to equal components prop types and throw exception if
there are same props. So if generate names for prop types - they could be
compared.
### Current behaviour
Only primitive types could be compared (string, bool, number).  
Complex types (shape, arrayOf) - each time returns new bound function. So it
could not be compared by value.
### Problems with custom prop types
Will generate "undefined" name for custom prop like this:
    customProp: function(props, propName, componentName) {
        if (!/matchme/.test(props[propName])) {
          return new Error(
            'Invalid prop `' + propName + '` supplied to' +
            ' `' + componentName + '`. Validation failed.'
          );
        }
      },
but it fixed by adding function name:
    customProp: function customProp(props, propName, componentName) {
btw. Same feature implemented at tcomb lib