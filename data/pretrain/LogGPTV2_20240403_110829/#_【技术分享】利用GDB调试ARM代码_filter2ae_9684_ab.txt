### 调试和分析代码的步骤

#### 执行下一行代码
- **命令**：`nexti`
- **说明**：执行下一条指令，但不会进入函数内部。

#### 继续处理直到指定位置
- **命令**：`until <行号/函数名/地址/文件名:行号>`
- **说明**：继续执行程序，直到到达指定的行号、函数名称、地址或文件名及行号。

#### 显示当前行号和所在函数
- **命令**：`where`
- **说明**：显示当前执行点所在的行号及其所属的函数。

#### 示例
```bash
gef> nexti 5
...
0x8068  bl 0x8074   sub sp, r11, #0
0x8070  pop {r11, pc}
0x8074  push {r11}
0x8078  add r11, sp, #0
0x807c  sub sp, sp, #12
0x8080  cmp r0, r1
0x8084  movlt r0, r1
0x8088  add sp, r11, #0
```

#### 检查寄存器的值
- **命令**：`info registers` 或 `i r`
- **说明**：显示当前所有寄存器的值。

##### 示例
```bash
gef> info registers
r0     0x1     1
r1     0x2     2
r2     0x0     0
r3     0x0     0
r4     0x0     0
r5     0x0     0
r6     0x0     0
r7     0x0     0
r8     0x0     0
r9     0x0     0
r10    0x0     0
r11    0xbefff7e8 3204446184
r12    0x0     0
sp     0xbefff7d8 0xbefff7d8
lr     0x0     0
pc     0x8068  0x8068 
cpsr   0x10    16
```

#### 显示进程内存映射
- **命令**：`info proc map`
- **说明**：显示当前进程的内存映射情况。

##### 示例
```bash
gef> info proc map
process 10225
Mapped address spaces:
 Start Addr   End Addr    Size     Offset objfile
 0x8000     0x9000  0x1000          0   /home/pi/lab/max
 0xb6fff000 0xb7000000  0x1000          0          [sigpage]
 0xbefdf000 0xbf000000 0x21000          0            [stack]
 0xffff0000 0xffff1000  0x1000          0          [vectors]
```

#### 查看函数的反汇编输出
- **命令**：`disassemble <函数名>`
- **说明**：显示指定函数的反汇编代码。

##### 示例
```bash
gef> disassemble max
Dump of assembler code for function max:
0x00008074 : push {r11}
0x00008078 : add r11, sp, #0
0x0000807c : sub sp, sp, #12
0x00008080 : cmp r0, r1
0x00008084 : movlt r0, r1
0x00008088 : add sp, r11, #0
0x0000808c : pop {r11}
0x00008090 : bx lr
End of assembler dump.
```

#### GEF特有的命令
- **命令**：`xfiles`
  - **说明**：将所有已加载的ELF镜像的所有节dump到进程内存中。
- **命令**：`vmmap`
  - **说明**：增强版的`proc map`，包括映射页面中的RWX属性。
- **命令**：`xinfo <地址>`
  - **说明**：显示给定地址的内存属性。
- **命令**：`checksec`
  - **说明**：检查运行的二进制文件内置的编译器级保护措施。

##### 示例
```bash
gef> xfiles
         Start        End  Name File
0x00008054 0x00008094 .text /home/pi/lab/max
...

gef> vmmap
         Start        End     Offset Perm Path
0x00008000 0x00009000 0x00000000 r-x /home/pi/lab/max
...

gef> xinfo 0xbefff7e8
----------------------------------------[ xinfo: 0xbefff7e8 ]----------------------------------------
Found 0xbefff7e8
Page: 0xbefdf000 -> 0xbf000000 (size=0x21000)
Permissions: rwx
Pathname: [stack]
Offset (from page): +0x207e8
Inode: 0

gef> checksec
[+] checksec for '/home/pi/lab/max'
Canary:                  No
NX Support:              Yes
PIE Support:             No
RPATH:                   No
RUNPATH:                 No
Partial RelRO:           No
Full RelRO:              No
```

### 故障排除
为了更高效地使用GDB进行调试，了解某些分支/跳转的目标地址是非常有帮助的。较新的GDB版本能够解析分支指令的地址，并显示目标函数的名称。

#### 示例
- **旧版GDB输出**：
  ```bash
  0x000104f8 : bl 0x10334
  0x000104fc : mov r0, #8
  0x00010500 : bl 0x1034c
  0x00010504 : mov r3, r0
  ```

- **新版GDB输出**：
  ```bash
  0x000104f8 :    bl      0x10334 
  0x000104fc :    mov     r0, #8
  0x00010500 :    bl      0x1034c 
  0x00010504 :    mov     r3, r0
  ```

如果您的GDB版本不支持这些功能，可以考虑升级Linux（前提是它们提供了更新的GDB），或者自己编译较新的GDB。

#### 编译和安装GDB
```bash
cd /tmp
wget https://ftp.gnu.org/gnu/gdb/gdb-7.12.tar.gz
tar vxzf gdb-7.12.tar.gz
sudo apt-get update
sudo apt-get install libreadline-dev python-dev texinfo -y
cd gdb-7.12
./configure --prefix=/usr --with-system-readline --with-python && make -j4
sudo make -j4 -C gdb/ install
gdb --version
```

我使用上述命令在Raspbian（jessie）上下载、编译并运行了GDB，没有遇到任何问题。同时，这些命令也会替换以前版本的GDB。如果您不想这样做，请跳过以`install`结尾的命令。此外，我在QEMU中模拟Raspbian时也使用了这些命令，但这个过程非常耗时，因为模拟环境的资源（CPU）有限。

我使用的GDB版本是7.12，但您可以选择更高的版本。点击此处查看其他版本。