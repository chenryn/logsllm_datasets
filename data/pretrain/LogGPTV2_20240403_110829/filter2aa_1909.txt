# NISRA
- **作者**: 王薪嘉
- **职位**: NISRA 会长

## 静态与动态网站
### 静态网站
- **特点**:
  - 只能浏览资料（纯粹图文）
  - 使用技术: HTML + CSS

### 动态网站
- **特点**:
  - 用户端与服务器可以互动
  - 示例: 投票系统、档案上传、购物网站等
  - 使用技术: PHP, JSP, ASP 等

## 数据库与SQL
- **SQL (Structured Query Language)**:
  - 用于数据库的存取、查询、更新和管理
  - 常见副档名: .sql
  - 语法简单易学

- **数据库 (Database)**:
  - 按照数据结构来组织、存储和管理数据
  - 用户可以对数据进行新增、更新、删除、搜索等操作

## 资料隐码攻击 (SQL Injection)
- **定义**:
  - 发生于应用程序之数据库层的安全漏洞
  - 在输入的字符串中夹带 SQL 指令，若程序没有进行检查而执行这些指令，将会造成数据窃取、删除等问题

- **示例**:
  - 登入检查: `select * from members where account='$name' and password='$password'`
  - 攻击: 帐号输入 `' or 1=1 /*`，密码任意输入
  - 结果: `/*` 后面的字符串被视为注释，`1=1` 永远成立，从而绕过验证

- **注解**:
  - MySQL 的注解有三种：`/* ... */`、`--`、`#`

- **DROP 指令**:
  - 删除表格: `DROP TABLE "表格名称"`
  - 删除数据库: `DROP DATABASE "数据库名称"`

## 输入过滤
- **方法**:
  - 过滤特殊字符: `'`, `"`, `/`
  - 加工输入字符串: 在特殊字符前加上 `\`

## 跨网站指令码 (XSS)
- **定义**:
  - 一种常见于 Web 应用程序中的安全性漏洞
  - 在网页中注入恶意代码，通过用户在网络上的行为扩散

- **类型**:
  - **反射型 XSS**:
    - 又称非持久型、参数型 XSS
    - 在用户点击时触发
    - 通常通过特定手法（如电子邮件）诱使用户访问包含恶意代码的 URL
    - 常见于网站的搜索栏、登录界面

  - **持久型 XSS**:
    - 又称储存型 XSS
    - 将恶意脚本上传或储存在有漏洞的服务器上
    - 受害者浏览相关页面时会执行恶意代码
    - 常见于留言板、评论、博客等

- **检测与防御**:
  - 寻找可以显示用户输入文字的地方
  - 测试是否可以执行脚本语言（如 JavaScript）
  - 植入恶意代码
  - 使用黑名单和白名单过滤输入
  - 数据消毒: 过滤敏感字符
  - JavaScript 表达式: 显示实体名字和编号

- **防范措施**:
  - 不要随意点击陌生人提供的链接
  - 禁用 JavaScript（但会导致网页使用不便）

## 安全工程师的研究
- **Rsnake 的研究**:
  - 提供常见的 XSS 攻击脚本列表
  - 用于检测 Web 是否存在 XSS 漏洞
  - 相关资源: ha.ckers.org/xss.html, xenuser.org/xss-cheat-sheet/

## 实际案例
- **Myspace 蠕虫**:
  - 2005 年，世界上第一只网络蠕虫
  - 通过 XSS 漏洞在 Myspace 上疯狂传播
  - 20 小时内感染了一百多万个用户，最终导致 Myspace 服务器崩溃

- **Samy 蠕虫**:
  - 由 19 岁的 Samy 编写
  - 利用 Myspace 个人简介中的 XSS 漏洞
  - 自动复制并散播到其他用户的个人简介

通过以上优化，文本变得更加清晰、连贯和专业。希望这对你有所帮助！