NISRA
◎ 王薪嘉
◎ 现任 NISRA 会长
2
◎ 静态
• 只能浏览资料 (纯粹图文)
• Html + CSS
◎ 动态
• 用户端与伺服器可以互动
• Ex: 投票系统、档案上传、购物网站, etc
• PHP, JSP, ASP, etc
上传
伺服器
显示
user
user
user
程式
资料库
php asp
上传
上传
伺服器
伺服器
显示
输入&产生
user
user
user
user
user
user
资料隐码攻击
◎ Structured Query Language，一般习惯念成
"sequel"，不过正确的念法应该是 "S-Q-L"
◎ 是一种常见于资料库的语言，用于资料存取、查询、
更新和管理关联式资料库系统
◎ 同时也是资料库指令档的副档名 (.sql)。
◎ SQL 的语法是由一些简单的句子构成，简单易学
7
◎ Database：按照资料结构来组织、存储和管理资
料的仓库。使用者可以对档案中的资料执行新增、
更新、删除、搜寻等操作。
资料1
资料2
资料3
资料4
Table1
Database
Table
Table4
Table2
……
……
◎ 发生于应用程式之资料库层的安全漏洞。
◎ 在输入的字串中夹带 SQL指令，若程式没有进行检
查而使这些字串被误认为是合法的 SQL指令并执行，
将会造成：
• 资料窃取
• 资料删除
• etc
◎ 登入检查：判定 User 输入的帐号、密码是否正确，
来确定登入是否成功。
10
使用者名称
使用者密码
Login
◎ 登入检查：判定 User 输入的帐号、密码是否正确，
来确定登入是否成功。
◎ select * from members where account='$name' 
and password='$password'
11
◎ 登入检查：判定 User 输入的帐号、密码是否正确，
来确定登入是否成功。
◎ select * from members where account='$name' 
and password='$password'
◎ 此时帐号输入' or 1=1 /* ，密码任意输入
12
◎ select * from members
where account ='' or 1=1 /*' and password=''
13
◎ select * from members
where account ='' or 1=1 /*' and password=''
◎ /* 在 MySQL 语法中代表注解的意思。
所以“/*”后面的字串通通没有执行，而这句判断
式“1=1”永远成立，就能借此登入网站成功。
14
◎ select * from members
where account ='' or 1=1 /*' and password=''
◎ /* 在 MySQL 语法中代表注解的意思。
所以“/*”后面的字串通通没有执行，而这句判断
式“1=1”永远成立，就能借此登入网站成功。
◎ MySQL 的注解有三种：“/*”“--” “#”
15
◎ DROP：SQL 语法中关于删除的指令
◎ 假如使用者输入的地方可以执行 DROP 指令，那
也许将会删除：
表格 -> 
DROP TABLE "表格名称"
资料库 -> DROP DATABASE "资料库名称"
16
◎ 过滤使用者的输入：' " /
' or 1=1 /*  or 1 = 1
17
◎ 过滤使用者的输入：' " /
' or 1=1 /*  or 1 = 1
◎ 加工使用者输入的字串：把字串中的特殊字元前加
上 \ 再回传
18
XSS - 跨网站指令码
19
◎ 一种常见于 Web 应用程式中的电脑安全性漏洞。
◎ 在网页中注入恶意程式，透过使用者在网路上扩散。
20
◎ Web 浏览器本身的设计不安全。
◎ XSS 触发的门槛低且不受重视。
◎ Web 2.0 后网站上的交互功能日渐强大，我们将有
越来越多的机会可以查看、修改他人的资讯。
21
反射型 & 持久型
◎ 又称 非持久型、参数型 XSS。
◎ 在使用者按下时触发。
◎ 一般是透过特定手法(如：E-mail)，
诱使 User 连结包含恶意程式的 URL。
◎ 常出现于网站的搜寻栏、使用登入介面
用来窃取 Cookie 或是钓鱼欺骗。
23
Hacker
Web
网页
浏览网页
Hacker’s 
Server
使用者资料
(Cookie)
恶意程式码
24
E-mail
USER
◎ 又称储存型，可能会影响 Web 伺服器。
◎ 先将恶意脚本上传或储存在有漏洞的伺服器上，
只要受害者浏览到相关页面就会执行恶意程式。
◎ 一般出现在网站的留言板、评论、部落格日记等。
可以用来渗透网站、木马、钓鱼、编写 XSS 蠕虫。
25
Server
Hacker
Web
留言板
恶意程式码
浏览
攻击/
执行恶意程式
USER
◎ 寻找 可以显示使用者输入文字的地方
◎ 测试 是否可以执行 脚本语言 (Ex: Javascript)
◎ 植入 恶意程式
27
28
◎ JavaScript 让浏览器弹出讯息小框框的内置函数。
29
◎ 不一定要放 alert(1)
• prompt(1)
• 
• 
30
◎ 国外著名安全工程师 Rsnake 研究 XSS 的心得。
◎ 常见的 XSS 攻击脚本列表，用来检测 Web 是否存
在 XSS 漏洞。
◎ ha.ckers.org/xss.html
现今最完整的 XSS 测试用范例。
◎ http://www.xenuser.org/xss-cheat-sheet/ 简易版
31
◎ 将脚本语言加到 Web 页面的过程非常简单：
只要加入 标签即可。
◎ 浏览器只负责解释和执行脚本语言，
不会判断程式码恶意与否。
32
◎ XSS 不如 SQL Injection、档案上传等
能够直接得到较高权限的操作。
◎ 但是它的运用十分灵活。
◎ 例如：
• 2005/10 Myspace跨脚本网站蠕虫
33
◎ 世界上第一只网路蠕虫
◎ 网路社群 MySpace
◎ 20 小时内感染 “一百多万个” 使用者，最后
MySpace 伺服器崩溃。
34
◎ 19岁的 Samy 和女友打赌他可以在 Myspace 上拥
有众多粉丝。
◎ 当然……办不到！
◎ 研究 Myspace  发现 个人简介 处存在 XSS 漏洞。
◎ 注入一段 JS 蠕虫，每个查看他简介的人在不知不
觉中自动执行这段程式码。
◎ 蠕虫打开受害者的个人简介，自我复制在受害者的
个人简介。
◎ 疯狂散播直到伺服器崩溃。
35
发现网站的 XSS 漏洞，编写 XSS Worm
利用漏洞作为传播源头进行 XSS
其他使用者连结目标，可能感染蠕虫
alter() 
或其他操作
判断使用者
是否登入
判断使用者
是否感染
是
是
否
否
◎ XSS 和 SQL Injection 一样，都是利用 Web 编写
不完善来攻击。
◎ 因此每一个漏洞该利用和针对的弱点都不尽相同。
◎ 这给 XSS 防御带来了困难：
不可能以单一特征来概括所有 XSS 攻击。
37
38
input
Web Server
XSS
Filter
XSS
Escape
Web
Page
◎ 把要处理的资料分做黑、白名单两大列表：
白名单存放可信赖的、无威胁的资料；
黑名单则相反。
◎ 其实就是一段精心编写的过滤函式。
◎ 还是很容易被绕过 OTZ
39
◎
验证：设定格式、数字范围、字数限制等
◎
数据消毒：过滤一些敏感字元： ' " & # 
◎
Javascript Expression：
显示
实体名字
实体编号
&gt;
&#62:
&
&amp;
&#38;
"
&quot;
&#34;
40
◎ 别乱点陌生人给的连结
◎ 禁用 JavaScript
• 网页会变得难用
41