title:Security Analysis of the SAML Single Sign-on Browser/Artifact Profile
author:Thomas Groß
Security Analysis of the
SAML Single Sign-on Browser/Artifact Proﬁle
Thomas Groß
IBM Zurich Research Laboratory
PI:EMAIL
Abstract
Many inﬂuential
this protocol class. It does not
industrial players are currently
pursuing the development of new protocols for fed-
erated identity management. The Security Assertion
Markup Language (SAML) is an important standard-
ized example of this new protocol class and will be
widely used in business-to-business scenarios to reduce
user-management costs. SAML utilizes a constraint-
based speciﬁcation that is a popular design technique
of
include a gen-
eral security analysis, but provides an attack-by-attack
list of countermeasures as security consideration. We
present a security analysis of the SAML Single Sign-on
Browser/Artifact proﬁle, which is the ﬁrst one for such
a protocol standard. Our analysis of the protocol design
reveals several ﬂaws in the speciﬁcation that can lead
to vulnerable implementations. To demonstrate their im-
pact, we exploit some of these ﬂaws to mount attacks on
the protocol.
1. Introduction
One of the most important problems in the network-
oriented industry currently is the reduction of user-
management costs. Thus, many inﬂuential industrial
players strive for the development of new protocols for
federated identity management. Using these protocols,
the companies are able to simplify user-management
in an increasingly dynamic world and to beneﬁt from
user registrations done by other companies. The newly
developed protocols will widely be used in business-
to-business scenarios to allow the federation of inter-
company services and to provide access control for
supply-chain partners. Thus, major players in the access
control market currently include these protocols in their
products.
One of the most important proposals in this area is the
Security Assertion Markup Language (SAML) [7, 8].
SAML is a very extensible, open standard, which makes
it attractive as a basis for further development. Thus, var-
ious protocols of the Liberty Alliance Project [11, 20]
and the Shibboleth Project [4] build on SAML.
The salient feature of most of these protocols is that
they only require a standard Web browser as a user
agent. We call this protocol class browser-based or zero-
footprint. This feature is motivated by the fact that most
potential users do not want to install protocol-speciﬁc
software. Furthermore, it is desirable that the protocols
do not require active content or cookies, because many
users are not willing to use them for security or privacy
reasons. Given these restrictions, the protocol design-
ers have to work with browser redirects and HTTP con-
structs only, which implies new requirements that have
not been considered by prior research.
In this paper, we analyze the SAML Single Sign-
on Browser/Artifact proﬁle, a three-party authentication
protocol. Such a single sign-on protocol allows a user to
sign-on only at his or her identity supplier, which in turn
conﬁrms the user’s identity to other parties. As the pro-
tocol is part of the only open standard in this area and
does not rely on active content or cookies, it is one of the
most important browser-based protocols. Because nor-
mal authentication protocols are known to be prone to
design errors, we expect that the additional restrictions
of this protocol further complicate a secure design. The
involvement of a standard Web browser indeed makes it
very difﬁcult to utilize prior research proposals such as
[2, 1] for robust protocol design.
In general, we consider the SAML Single Sign-on
protocol well-designed and carefully described. Nev-
ertheless, further analysis of the protocol is necessary.
The security aspects of the protocol are formulated in a
constraint-based manner and structured according to the
architecture of SAML. This is a common technique in
this area, but can hamper a faultless implementation, be-
cause implementing software engineers may overlook a
constraint or its impact on the protocol security. Further-
more, this kind of description complicates a general se-
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:49:07 UTC from IEEE Xplore.  Restrictions apply. 
curity analysis. Thus, the protocol description does not
provide such an analysis, but an attack-by-attack de-
scription of countermeasures. This is a distinguishing
feature to other protocols in this area, as some of them
do not take such considerations at all. All told, the po-
tential importance in industry and the new set of require-
ments make this protocol worth a closer look from a re-
search perspective.
We present a general security analysis of the SAML
Single Sign-on Browser/Artifact proﬁle, which is the
ﬁrst one for this kind of protocol standard. We discov-
ered security ﬂaws, that allowed to several attacks on
the protocol, some of them with possibly severe impact,
such as man-in-the-middle attacks, attacks by informa-
tion leakage, and message replay. We present these three
attacks in detail and sketch further attack approaches.
The remainder of this paper is structured as follows:
We present a short overview of the SAML message stan-
dard and its Single Sign-on proﬁle in Section 2. Sec-
tion 3 introduces related protocols and attacks on them
as well as prior research in this area. In Section 4, we
describe the communication types introduced by the
SAML Single Sign-on protocol. Section 5 contains our
model for the login procedure and subsequent user track-
ing. We describe the protocol schema of the SAML
Single Sign-on Browser/Artifact proﬁle in Section 6.
In Section 7, we present three attacks on the protocol.
We discuss the vulnerability of an implementation us-
ing SSL or TLS channels in Section 8, and conclude our
analysis in Section 9.
2. Security Assertion Markup Language
(SAML)
SAML is an open message standard that encodes se-
curity assertions and corresponding protocol messages
in XML format. The message standard itself is described
in [7]. SAML allows so-called protocol bindings [8] that
embed SAML constructs in other structures for trans-
port. SAML, for instance, builds on the Simple Ob-
ject Access Protocol (SOAP) with its SOAP over HTTP
binding. In addition, the SAML standard includes de-
scriptions of the use of SAML assertions in communica-
tion protocols and frameworks [8]. These so-called pro-
ﬁles contain protocol ﬂows and security constraints for
applications of SAML.
The SAML Single Sign-on Browser/Artifact Proﬁle
describes the usage of SAML messages to perform a sin-
gle sign-on operation involving three parties – a user U
equipped with a standard browser B, a source site S, and
a destination site D. We depict the protocol ﬂow in Fig-
ure 1.
Figure 1. Protocol ﬂow of the SAML Single
Sign-on Browser/Artifact Proﬁle.
The protocol assumes that user U authenticated itself
to source site S beforehand. The protocol ﬂow begins
when user U returns to source site S, for instance, hav-
ing been redirected by a destination site D. Source site S
stores an assertion about the user’s identity if it can rec-
ognize the browser B of user U during the so called user
tracking. It then redirects the user’s browser B to the des-
tination site D the user wants to browse. Source site S
includes a small piece of data, called a SAML artifact,
into the redirect that refers to the assertion stored. Re-
ceiving the redirect with this artifact, destination site D
shows this artifact to source site S and requests the cor-
responding assertion from it. By providing this assertion
to D, source site S conﬁrms that user U presenting the
SAML artifact was authenticated by S.
3. Related Work
The ﬁrst browser-based authentication protocol was,
to our best knowledge, Microsoft Passport. Because the
protocol is not published, we only refer to Microsoft’s
whitepapers such as [15]. Recent research discovered
multiple vulnerabilities of Passport and described sev-
eral severe attacks [12, 21]. A new attack was found at
the beginning of May 2003, but no details have been
published yet.
Two other projects base their protocols on the SAML
message standard. The Liberty Alliance Project makes
public proposals, but is not the subject of a standard-
ization process [11]. One of its protocols using an en-
hanced client was vulnerable and attacked in [19]. The
Shibboleth Project is a well-elaborated SAML applica-
tion for inter-university federation [4]. In addition, [17]
proposes a protocol called Browser-based Attribute Ex-
change (BBAE) that may also be built on SAML. This
protocol concentrates on attribute exchange and privacy
issues.
There are only few publications about general anal-
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:49:07 UTC from IEEE Xplore.  Restrictions apply. 
yses of browser-based protocols. Recently, [18] pro-
vided an analysis of the privacy aspects of browser-
based attribute-exchange protocols that covers SAML as
well as Passport, Liberty and Shibboleth.
Considering prior research about general protocol de-
sign, two of the best-known publications are [1] and [2].
Whereas [1] suggests various informal principles about
general protocol design, [2] extends them for the us-
age in public-key protocols. [10] presents more practi-
cal analyses of client authentication on the Web, which
is distantly related to the browser-based authentication
protocols. One of the most well-analyzed authentication
protocols of research is the Needham-Schroeder proto-
col [16], which was analyzed and broken by [13] and
[14]. These publications are useful as examples for pro-
tocol design and analysis, too.
We describe the security properties in the following
paragraph and divide integrity into veriﬁability and non-
malleability.
Conﬁdentiality: Apart from the original sender, only
one party can decrypt the message msg. This will
usually be the party that controls the host adr.
Integrity: Veriﬁability – A party that reads the message
msg is able to verify whether msg is in its origi-
nal state of the send operation. The identity of the
sender cannot be veriﬁed.
Non-Malleability – Let S be an honest sender of
a message msg to a recipient R. Let an adversary
A send messages msg
(cid:1)
i similar to msg to recipient
R. Then the messages R receives are either identi-
cal to msg or independent of it.
4. Communication
4.2. Secure Channels
The SAML Single Sign-on protocol constrains the
methods used to transfer messages with several security
properties. It names two combinations of such proper-
ties that we introduce in the following sections.
4.1. With Conﬁdentiality and Integrity Only
The SAML Single Sign-on protocol refers to a mes-
sage transfer that provides conﬁdentiality and integrity
but no authentication. Message transfers with these
properties can be implemented by message security so-
lutions or anonymous SSL/TLS channels [6]. This class
of channels is naturally vulnerable to man-in-the-middle
attacks. We formalize this kind of communication as fol-
lows:
S →cid R: adr – msg
The abstract identiﬁers S and R refer to the participat-
ing sender and recipient. We introduce the hostname adr
and the message msg as parameters. Even if the mes-
sage transfer does not utilize channels, we use a chan-
nel identiﬁer cid that is written as an index of the send
arrow. In an implementation without channels, cid rep-
resents the underlying network connection. The channel
identiﬁer is deﬁned as the ﬁrst message is sent. It can be
given as input for further send operations to stress the
fact that the messages are being transferred through the
same connection. We omit the address adr in this case.
As the SAML Single Sign-on protocol does not use
authentication in this kind of message transfer, we do
not refer to ﬁxed identities for the communicating par-
ties. We therefore cannot relate the given security prop-
erties to such identities either. Because of the lack of
this relation, it is nearly impossible to match the prop-
erties claimed to well-deﬁned cryptographic properties.
The SAML Single Sign-on speciﬁes a second kind of
message transfer. It claims the security properties conﬁ-
dentiality, integrity and bilateral authentication. We in-
terpret a transfer type with these properties as a secure
channel. It can be implemented with SSL/TLS channels
with bilateral authentication, i.e. with server- and client-
side certiﬁcates. We use the following notation:
S(snd id) ⇒cid R(rcv id): adr – msg
Again, we have two communicating parties, a sender S
and a recipient R, where S has an identity snd id and R
an identity rcv id. We name the hostname of the recip-
ient in the ﬁrst send operation and omit it in subsequent
steps if the same channel cid is used.
We describe the corresponding security properties in
the following. We ﬁx sender S and recipient R of a mes-
sage msg to facilitate the formalization. Both participat-
ing parties can send and receive messages over an estab-
lished channel.
Bilateral Authentication: Sender S and recipient R
identify themselves with their identities snd id and
rcv id. Both parties check the corresponding cer-
tiﬁcates of the communication partner. They only
proceed with the protocol if there is a valid certiﬁ-
cate chain to a trusted certiﬁcation authority.
Conﬁdentiality: Only sender S with identity snd id
and recipient R with identity rcv id can read the
message msg.
Integrity: The receiving R can verify whether the mes-
sage msg was sent by a sender S with identity
snd id. If the recipient R receives a message msg,
R either receives message msg in the state in
which the server S sent it or gets an error message.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:49:07 UTC from IEEE Xplore.  Restrictions apply. 
5. User Tracking
It is an important part of the SAML Single Sign-on
protocol that source site S does not require user U to
re-login, but is supposed to recognize U automatically.
Thus, the entire protocol run can be accomplished with-
out user interaction. We call the method for recognition
of a user that logged in beforehand user tracking.
The protocol assumes that user U has already logged
in earlier and that U’s login has not timed out. When user
U’s browser B is redirected back to source site S in pro-
tocol step 1, S is able to link the browser B to the still
valid login. Source site S deduces the identity of user
U from this link. We formulate the login itself as fol-
lows:
(a) S →cid B (cid:1) U: login request
(b) U (cid:1) B →cid S: login lU ,S
(c) S →cid B: veriﬁcation information vi
In the login step, source site S initiates the user authen-
tication using a given channel represented by its chan-
nel identiﬁer cid. Browser B presents a login request to
user U, which we denote with the leads-to ((cid:1)) symbol.
In the second step, user U inputs its login information
lU ,S into browser B. This login information can for in-
stance be a combination of user U’s username and pass-
word. Browser B forwards it to source site S through the
channel referenced by cid. Source site S resolves U’s lo-
gin information lU ,S to its identity idU . After a success-
ful login, source site S sends a piece of veriﬁcation in-
formation vi back to browser B. This piece of informa-
tion later conﬁrms user U’s login.
The subsequent user tracking works without further
user interaction:
(d) S →cid(cid:1) B: request for vi
(e) B →cid(cid:1) S: proof of knowledge of vi
Source site S initiates the user tracking and requests the
proof of knowledge of the veriﬁcation information vi