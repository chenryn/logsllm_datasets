# Security Analysis of the SAML Single Sign-on Browser/Artifact Profile
**Author:** Thomas Groß  
**Affiliation:** IBM Zurich Research Laboratory

## Abstract
Many influential industrial players are currently developing new protocols for federated identity management. The Security Assertion Markup Language (SAML) is a prominent standardized example in this protocol class and is expected to be widely used in business-to-business scenarios to reduce user-management costs. SAML employs a constraint-based specification, a popular design technique that, while useful, does not include a general security analysis. Instead, it provides an attack-by-attack list of countermeasures as security considerations.

In this paper, we present a comprehensive security analysis of the SAML Single Sign-on Browser/Artifact profile, which is the first such analysis for this protocol standard. Our analysis of the protocol design reveals several flaws in the specification that can lead to vulnerable implementations. To demonstrate their impact, we exploit some of these flaws to mount attacks on the protocol, including man-in-the-middle attacks, information leakage, and message replay.

## 1. Introduction
One of the most significant challenges in the network-oriented industry is the reduction of user-management costs. Consequently, many influential industrial players are developing new protocols for federated identity management. These protocols simplify user management in an increasingly dynamic world and leverage user registrations performed by other companies. They will be widely used in business-to-business scenarios to enable the federation of inter-company services and provide access control for supply-chain partners. Major players in the access control market are incorporating these protocols into their products.

A key proposal in this area is the Security Assertion Markup Language (SAML). SAML is a highly extensible, open standard, making it attractive for further development. Various protocols from the Liberty Alliance Project and the Shibboleth Project are built on SAML.

The distinctive feature of these protocols is that they only require a standard web browser as a user agent, often referred to as browser-based or zero-footprint protocols. This feature is motivated by the fact that most potential users do not want to install protocol-specific software. Additionally, these protocols should not rely on active content or cookies, as many users avoid them for security or privacy reasons. Given these constraints, protocol designers must work with browser redirects and HTTP constructs, introducing new requirements that have not been considered in prior research.

In this paper, we analyze the SAML Single Sign-on Browser/Artifact profile, a three-party authentication protocol. This single sign-on protocol allows a user to authenticate only at their identity provider, which then confirms the user's identity to other parties. As the protocol is part of the only open standard in this area and does not rely on active content or cookies, it is one of the most important browser-based protocols. Normal authentication protocols are known to be prone to design errors, and the additional restrictions of this protocol further complicate secure design. The involvement of a standard web browser makes it very difficult to apply prior research proposals for robust protocol design.

While the SAML Single Sign-on protocol is well-designed and carefully described, further analysis is necessary. The security aspects of the protocol are formulated in a constraint-based manner, structured according to the SAML architecture. This common technique can hamper a faultless implementation, as software engineers may overlook a constraint or its impact on protocol security. Furthermore, this kind of description complicates a general security analysis. Thus, the protocol description provides an attack-by-attack list of countermeasures rather than a general security analysis. This is a distinguishing feature compared to other protocols in this area, as some do not consider such measures at all. The potential importance in industry and the new set of requirements make this protocol worthy of a closer look from a research perspective.

We present a general security analysis of the SAML Single Sign-on Browser/Artifact profile, the first of its kind for this protocol standard. We discovered security flaws that allowed us to mount several attacks on the protocol, some with potentially severe impacts, such as man-in-the-middle attacks, information leakage, and message replay. We detail these three attacks and outline further attack approaches.

The remainder of this paper is structured as follows:
- Section 2 provides a short overview of the SAML message standard and its Single Sign-on profile.
- Section 3 introduces related protocols and attacks on them, as well as prior research in this area.
- Section 4 describes the communication types introduced by the SAML Single Sign-on protocol.
- Section 5 outlines our model for the login procedure and subsequent user tracking.
- Section 6 details the protocol schema of the SAML Single Sign-on Browser/Artifact profile.
- Section 7 presents three attacks on the protocol.
- Section 8 discusses the vulnerability of an implementation using SSL or TLS channels.
- Section 9 concludes our analysis.

## 2. Security Assertion Markup Language (SAML)
SAML is an open message standard that encodes security assertions and corresponding protocol messages in XML format. The message standard itself is described in [7]. SAML allows so-called protocol bindings [8] that embed SAML constructs in other structures for transport. For instance, SAML builds on the Simple Object Access Protocol (SOAP) with its SOAP over HTTP binding. Additionally, the SAML standard includes descriptions of the use of SAML assertions in communication protocols and frameworks [8]. These so-called profiles contain protocol flows and security constraints for applications of SAML.

The SAML Single Sign-on Browser/Artifact Profile describes the usage of SAML messages to perform a single sign-on operation involving three parties: a user U equipped with a standard browser B, a source site S, and a destination site D. The protocol flow is depicted in Figure 1.

![Figure 1. Protocol flow of the SAML Single Sign-on Browser/Artifact Profile.](figure1.png)

The protocol assumes that user U has already authenticated with source site S. The protocol flow begins when user U returns to source site S, for instance, after being redirected by a destination site D. Source site S stores an assertion about the user’s identity if it can recognize the browser B of user U during the user tracking phase. It then redirects the user’s browser B to the destination site D. Source site S includes a small piece of data, called a SAML artifact, into the redirect, which refers to the stored assertion. Upon receiving the redirect with this artifact, destination site D shows this artifact to source site S and requests the corresponding assertion. By providing this assertion to D, source site S confirms that user U, presenting the SAML artifact, was authenticated by S.

## 3. Related Work
To our knowledge, the first browser-based authentication protocol was Microsoft Passport. Because the protocol is not published, we refer to Microsoft’s whitepapers such as [15]. Recent research has discovered multiple vulnerabilities in Passport and described several severe attacks [12, 21]. A new attack was found in May 2003, but no details have been published yet.

Two other projects base their protocols on the SAML message standard. The Liberty Alliance Project makes public proposals, but is not part of a standardization process [11]. One of its protocols using an enhanced client was vulnerable and attacked in [19]. The Shibboleth Project is a well-developed SAML application for inter-university federation [4]. Additionally, [17] proposes a protocol called Browser-based Attribute Exchange (BBAE) that may also be built on SAML. This protocol focuses on attribute exchange and privacy issues.

There are few publications on general analyses of browser-based protocols. Recently, [18] provided an analysis of the privacy aspects of browser-based attribute-exchange protocols, covering SAML, Passport, Liberty, and Shibboleth.

Considering prior research on general protocol design, two of the best-known publications are [1] and [2]. While [1] suggests various informal principles about general protocol design, [2] extends them for use in public-key protocols. [10] presents more practical analyses of client authentication on the Web, which is distantly related to browser-based authentication protocols. One of the most well-analyzed authentication protocols in research is the Needham-Schroeder protocol [16], which was analyzed and broken by [13] and [14]. These publications are useful as examples for protocol design and analysis.

We describe the security properties in the following paragraph and divide integrity into verifiability and non-malleability.

- **Confidentiality**: Apart from the original sender, only one party can decrypt the message msg. This will usually be the party that controls the host adr.
- **Integrity**:
  - **Verifiability**: A party that reads the message msg can verify whether msg is in its original state of the send operation. The identity of the sender cannot be verified.
  - **Non-Malleability**: Let S be an honest sender of a message msg to a recipient R. Let an adversary A send messages msg_i similar to msg to recipient R. Then the messages R receives are either identical to msg or independent of it.

## 4. Communication

### 4.1. Secure Channels
The SAML Single Sign-on protocol constrains the methods used to transfer messages with several security properties. It names two combinations of such properties, which we introduce in the following sections.

#### 4.1.1. With Confidentiality and Integrity Only
The SAML Single Sign-on protocol refers to a message transfer that provides confidentiality and integrity but no authentication. Message transfers with these properties can be implemented by message security solutions or anonymous SSL/TLS channels [6]. This class of channels is naturally vulnerable to man-in-the-middle attacks. We formalize this kind of communication as follows:

\[ S \rightarrow_{cid} R: adr – msg \]

The abstract identifiers S and R refer to the participating sender and recipient. We introduce the hostname adr and the message msg as parameters. Even if the message transfer does not utilize channels, we use a channel identifier cid that is written as an index of the send arrow. In an implementation without channels, cid represents the underlying network connection. The channel identifier is defined when the first message is sent. It can be given as input for further send operations to stress the fact that the messages are being transferred through the same connection. We omit the address adr in this case.

As the SAML Single Sign-on protocol does not use authentication in this kind of message transfer, we do not refer to fixed identities for the communicating parties. Therefore, we cannot relate the given security properties to such identities. Because of the lack of this relation, it is nearly impossible to match the properties claimed to well-defined cryptographic properties.

#### 4.1.2. With Confidentiality, Integrity, and Bilateral Authentication
The SAML Single Sign-on protocol specifies a second kind of message transfer. It claims the security properties of confidentiality, integrity, and bilateral authentication. We interpret a transfer type with these properties as a secure channel. It can be implemented with SSL/TLS channels with bilateral authentication, i.e., with server- and client-side certificates. We use the following notation:

\[ S(snd id) \Rightarrow_{cid} R(rcv id): adr – msg \]

Again, we have two communicating parties, a sender S and a recipient R, where S has an identity snd id and R has an identity rcv id. We name the hostname of the recipient in the first send operation and omit it in subsequent steps if the same channel cid is used.

We describe the corresponding security properties as follows. We fix sender S and recipient R of a message msg to facilitate the formalization. Both participating parties can send and receive messages over an established channel.

- **Bilateral Authentication**: Sender S and recipient R identify themselves with their identities snd id and rcv id. Both parties check the corresponding certificates of the communication partner. They only proceed with the protocol if there is a valid certificate chain to a trusted certification authority.
- **Confidentiality**: Only sender S with identity snd id and recipient R with identity rcv id can read the message msg.
- **Integrity**: The receiving R can verify whether the message msg was sent by a sender S with identity snd id. If the recipient R receives a message msg, R either receives message msg in the state in which the server S sent it or gets an error message.

## 5. User Tracking
An important part of the SAML Single Sign-on protocol is that the source site S does not require user U to re-login but is supposed to recognize U automatically. Thus, the entire protocol run can be accomplished without user interaction. We call the method for recognition of a user who logged in beforehand "user tracking."

The protocol assumes that user U has already logged in earlier and that U’s login has not timed out. When user U’s browser B is redirected back to source site S in protocol step 1, S is able to link the browser B to the still valid login. Source site S deduces the identity of user U from this link. We formulate the login itself as follows:

1. \( S \rightarrow_{cid} B \leadsto U: \text{login request} \)
2. \( U \leadsto B \rightarrow_{cid} S: \text{login } l_{U,S} \)
3. \( S \rightarrow_{cid} B: \text{verification information } vi \)

In the login step, source site S initiates the user authentication using a given channel represented by its channel identifier cid. Browser B presents a login request to user U, which we denote with the leads-to (\(\leadsto\)) symbol. In the second step, user U inputs its login information \( l_{U,S} \) into browser B. This login information can, for instance, be a combination of user U’s username and password. Browser B forwards it to source site S through the channel referenced by cid. Source site S resolves U’s login information \( l_{U,S} \) to its identity \( id_U \). After a successful login, source site S sends a piece of verification information \( vi \) back to browser B. This piece of information later confirms user U’s login.

The subsequent user tracking works without further user interaction:

4. \( S \rightarrow_{cid} \leadsto B: \text{request for } vi \)
5. \( B \rightarrow_{cid} \leadsto S: \text{proof of knowledge of } vi \)

Source site S initiates the user tracking and requests the proof of knowledge of the verification information \( vi \).

---

This optimized version aims to improve clarity, coherence, and professionalism in the text.