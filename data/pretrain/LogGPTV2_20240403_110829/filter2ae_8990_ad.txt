    2767 LOAD_CONST 0; push None
    2770 IMPORT_NAME 0; pop None
    2773 STORE_FAST 2; pop 
    2776 LOAD_CONST 1; push -1
    2779 LOAD_CONST 0; push None
    2782 IMPORT_NAME 1; pop None
    2785 STORE_FAST 3; pop 
    2788 LOAD_CONST 1; push -1
    2791 LOAD_CONST 0; push None
    2794 IMPORT_NAME 2; pop None
    ...
前面一部分和之前直接使用修改过的 dis
模块反编译结果类似，只不过跳过了中间的垃圾代码。其中`co->co_filename`的名称是`pyprotect.angelic47.com`，访问一下发现正是提供
Python 加密的网页:
介绍上基本和前面的分析吻合，这里先把这个网站放一边，继续往下看代码。由于运行时用户输入，然后返回`You are too vegetable please
try again!`，因此直接搜索此字符串:
    ...
    6114 LOAD_FAST 42; push 154
    6117 LOAD_CONST 75; push 154
    6120 COMPARE_OP 2 (==) ; pop 154
    6123 POP_JUMP_IF_FALSE 6142; pop True
    6126 LOAD_FAST 28; push ['You are too vegetable please try again!']
    6129 LOAD_ATTR 44
    6132 CALL_FUNCTION 0
    ext_pop 
    push 'You are too vegetable please try again!'
    6135 LOAD_BUILD_CLASS; pop 'You are too vegetable please try again!'
    You are too vegetable please try again!
这里在指令`6123`的判断中判断为`True`导致跳转到了错误提示打印的分支，反向分析该字符串的来源，如下所示:
该加密流程将字符串本身也在内存中解密，因此我们静态搜索无法搜到相关的字节码逻辑，解密后内存中的字符串表如下所示:
    s[0]: -1
    s[1]: None
    s[2]: ==--AVMPROTECTFUNCTION--==
    s[3]: bce0af39a797
    s[4]: 9d8e9bcfe8d3
    s[5]: WARNING×WARNING×WARNING
    s[6]: WARNING WARNING WARNING YOU
    s[7]: Ba Ba Battle You Battle You Battle You
    s[8]: (And watch out!)
    s[9]: WARNING WARNING WARNING HELL
    s[10]: Yeah you cannot die not at this time!
    s[11]: WARNING!
    s[12]: 你对我有何居心呢？
    s[13]: 别随意地进来啊
    s[14]: 非常危险的气息
    s[15]: 绝对回避不能的弹幕
    s[16]: 要是小看本娘的话
    s[17]: 你铁定会不停尝到BAD END
    s[18]: 你的心可是一定会
    s[19]: WARNING WARNING
    s[20]: 不得不警示警报的吧
    s[21]: Input UR answer:
    s[22]: 33c0691e3230d16fb434e5
    s[23]: 8ce92dc3fe708e5b81a848
    s[24]: k
    s[25]: 171
    s[26]: e
    s[27]: 44
    s[28]: y
    s[29]: You are too vegetable please try again!
    s[30]: Vegetable!!! Bad end!!!
    s[31]: hex
    s[32]: Very Very Vegetable!!! Bad end!!!
    s[33]: base64
    s[34]: Really Really Vegetable!!! Bad end!!!
    s[35]:
    s[36]: 37
    s[37]: 要是下定决心就来吧
    s[38]: 或许会感到兴奋
    s[39]: 或是激动也说不定
    s[40]: 一边感到无聊 一边吹着口哨
    s[41]: 真不错呢 单纯的旋律
    s[42]: 本娘还会还会还会继续上喔!
    s[43]: 看好给本娘更加更加地躲开吧！
    s[44]: 你有多少能耐呢？
    s[45]: 对上本娘热情如火的爱？
    s[46]: 0
    s[47]: 3
    s[48]: 1
    s[49]: 2
    s[50]: 4
    s[51]: 94
    s[52]: 204
    s[53]: Burning!
    s[54]: 本娘好开心!
    s[55]: 不得了?
    s[56]: 但是, 果然很开心吧?
    s[57]: *********************
    s[58]: 再一次华丽的闪过吧!
    s[59]: 看啊还有更多更多喔!
    s[60]: 都给本娘确切地闪过!
    s[61]: 255
    s[62]: 本娘被打进了结局！？
    s[63]: 本娘可不能输!
    s[64]: 虽然很不甘心
    s[65]: 但是很开心 WARNING!!!
    s[66]: 本娘警告你，这是你最后的机会
    s[67]: 本娘超级地~危险、狂气
    s[68]: 而且你无法逃避我华丽的弹幕
    s[69]: 28
    s[70]: 32
    s[71]: 12
    s[72]: 16
    s[73]: 8
    s[74]: 24
    s[75]: 20
    s[76]: M
    s[77]: 13
    s[78]: m
    s[79]: ps1q6r14s2sn8o8o1n5982rq31o33143p52337s9870snq1r0rrr9s04qr58q9n53pq187q467p0949o8803r10909p332413oo3oq914847qo0n29qo81n1s90pq0330os586rr929r34884rqo351s6660q2ss8113923n911555s62sq3p3os78039o7q024pp03r8os0083r856599095ror8pr7op04r6oq485q3s558o4n39qrpn1n43o2
    s[80]: 本娘很开心!
    s[81]: Good! But wrong answer, please try again!
    s[82]: You are SUPER Vegetable!!! Bad end!!!
    s[83]: Nice job! To get your ETH, please use your answer as private key!
    s[84]: If ur interested with this Python-VirtualMachine Protect, please contact PI:EMAIL for more technical information!
    s[85]: 不得了？但是，果然很开心吧
    s[86]: 没错，现在是狂气时间
    s[87]: 欢迎来到疯狂的世界!
    s[88]: -- END --
注意打印日志中只输出了目前为止所运行到的代码，也就是说对于未触及的分支是不显示在其中的。为了增加覆盖率，触达新的分支，就需要改变上面的上面执行分支:
    7092 LOAD_FAST 22; push (字符串表...)
    7095 LOAD_FAST 32; push 29
    7098 BINARY_SUBSCR; pop 29
    7099 CALL_FUNCTION 1
    ext_pop 'You are too vegetable please try again!'
即需要执行到这里的时候字符串表的索引不是29，进而决定前面指令中`STORE_FAST
32`的结果不能是29，……根据对输入字符串的处理，可以猜测输入的总长度需要是 **64字节** ，验证一下:
    $ python2 ether_v2.pyc
    Input UR answer: 1111111122222222333333334444444455555555666666667777777788888888
    Good! But wrong answer, please try again!
确实产生了不同的输出。继续往前分析，可以大概梳理出判断的逻辑，所幸关键代码不是很复杂，手动还原伪代码如下所示:
    #!/usr/bin/env python2
    // pwn.py
    import base64
    import hashlib
    flag = 'bce0af39a7973d8efcb9e8d933c0691e3230d16fb434e5848a18b5e807ef3cd29ec8'
    flag = flag.decode('hex')
    flag = base64.b64encode(flag) + '\n'
    # vOCvOaeXPY78uejZM8BpHjIw0W+0NOWEihi16AfvPNKeyA==\n
    pz_list = []
    for x in flag:
        pz_list.append(chr(ord(x) ^ 37))
    flag = ''.join(pz_list)
    # 'SjfSjD@}u|\x12\x1dP@O\x7fh\x1dgUmOlR\x15r\x0e\x15kjr`LML\x14\x13dCSukn@\\d\x18\x18/'
    flag_1 = '1111111122222222333333334444444455555555666666667777777788888888'
    if len(flag_1) + ord('e') > 4) + 3]) ^ 204)
        elif l1 % 4 == 1:
            ll.append(ord(llll) ^ ord(flag[(l1 >> 4) + 1]) ^ 94)
        elif l1 % 4 == 2:
            ll.append(ord(llll) ^ ord(flag[(l1 >> 4) + 0]) ^ 171)
        else:
            ll.append(ord(llll) ^ ord(flag[(l1 >> 4) + 2]) ^ 37)
    print ll
    ll = [ i ^ 255 for i in ll ]
    print ll
    def calc(ll, a, b, o=1):
        s = ll[a:b]
        if o == -1:
            s = s[::-1]
        ret = hashlib.md5(''.join([ chr(i) for i in s ]).encode('hex')).hexdigest()
        print s, ':', ret
        return ret
    l1ll1lll = calc(ll, 28, 32)
    lllllll1 = calc(ll, 12, 16)
    ll1lllll = calc(ll, 4, 8)
    ll1lll1l = calc(ll, 24, 28)
    lllll1ll = calc(ll, 0, 4)
    llll1lll = calc(ll, 16, 20, -1)
    l1llllll = calc(ll, 8, 12)
    llllll1l = calc(ll, 20, 24)
    l1l11lll = l1ll1lll + lllllll1 + ll1lllll + ll1lll1l + lllll1ll + llll1lll + l1llllll + llllll1l 
    print l1l11lll 
    res = ''
    for c in l1l11lll:
        k = c
        if c.islower():
            if c 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * [https://walletgenerator.net/?culture=zh&currency=bitcoin#](https://walletgenerator.net/?culture=zh&currency=bitcoin#)
  * [椭圆曲线加密与NSA后门考古](https://evilpan.com/2020/05/17/ec-crypto/)
* * *