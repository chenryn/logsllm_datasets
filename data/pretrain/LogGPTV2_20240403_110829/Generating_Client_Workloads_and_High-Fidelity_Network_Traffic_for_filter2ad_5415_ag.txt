### Time Synchronization Settings in VMware Virtual Machines

#### Configuration File Settings
The following settings in the configuration file control various aspects of time synchronization. These settings are also detailed in VMware Knowledge Base Article 1189 (http://kb.vmware.com/kb/1189).

| Option | Effect |
|--------|--------|
| `tools.syncTime` | If set to `TRUE`, the clock is synchronized periodically. |
| `time.synchronize.continue` | If set to `TRUE`, the clock is synchronized after taking a snapshot. |
| `time.synchronize.restore` | If set to `TRUE`, the clock is synchronized after reverting to a snapshot. |
| `time.synchronize.resume.disk` | If set to `TRUE`, the clock is synchronized after resuming from suspend and after migrating to a new host using the VMware vMotion feature. |
| `time.synchronize.shrink` | If set to `TRUE`, the clock is synchronized after defragmenting a virtual disk. |
| `time.synchronize.tools.startup` | If set to `TRUE`, the clock is synchronized when the tools daemon starts up, typically during the guest operating system boot process. |

#### Timekeeping in Guest Operating Systems

**Persisting Time Across Reboots:**
- Guest operating systems generally obtain their time from the virtual CMOS TOD clock upon startup. To ensure that the time persists across reboots, you can set the CMOS TOD clock to a specific time.
- Use the `rtc.startTime` option, as described in "Virtual CMOS RTC" on page 7, to start the guest operating system with the same time on every startup.
- Alternatively, if you want the guest operating system to maintain a constant offset from real time, use the `rtc.diffFromUTC` option or set the CMOS TOD clock from the virtual machine's BIOS setup screen or within the guest operating system.

**Setting the CMOS Clock:**
- In Microsoft Windows, setting the system time automatically updates the CMOS clock.
- In Linux, use the `/sbin/hwclock` program to set the CMOS clock. Most Linux distributions are configured to copy the system time into the CMOS clock during shutdown, so you can simply set the system time and shut down the guest operating system before restarting it.

#### Using Microsoft W32Time in Windows Guests

- The Windows Time Service (W32Time), available in Windows 2000 and later, implements a simple variant of the Network Time Protocol (NTP) called SNTP.
- W32Time allows for different levels of accuracy in synchronizing the Windows machine's clock. However, it is not aware of any attempts by a virtual machine to process timer interrupt backlogs, which can lead to occasional overshooting of real time, especially in older versions.
- Newer versions of W32Time (in Windows Server 2003 and later) incorporate a full NTP-like algorithm and perform better, similar to the NTP implementation used in Linux.
- Enabling VMware Tools periodic clock synchronization does not disable W32Time.

**Server-Only Mode:**
- Some customers require a virtual machine to act as a W32Time server without being a W32Time client. W32Time supports a server-only mode. Refer to Microsoft documentation on the Windows Time Service, specifically the `NoSync` registry option, for setup instructions.

#### Using NTP in Linux and Other Guests

- The Network Time Protocol (NTP) can be used in a virtual machine with proper configuration of the NTP daemon.
- **Important Points:**
  - Do not configure the virtual machine to synchronize to its own (virtual) hardware clock, even as a fallback with a high stratum number. Remove any such server specifications from your `ntpd.conf` file.
  - Include the `tinker panic 0` option at the top of your `ntp.conf` file to prevent the NTP daemon from panicking and exiting if the underlying clock appears erratic.
  - Follow standard best practices for NTP, such as choosing accurate and redundant servers. For many clients, set up internal NTP servers to avoid overloading external low-stratum NTP servers.

**Sample `ntpd.conf` File:**
```plaintext
# ntpd.conf
tinker panic 0
restrict 127.0.0.1
restrict default kod nomodify notrap
server 0.vmware.pool.ntp.org
server 1.vmware.pool.ntp.org
server 2.vmware.pool.ntp.org
server 3.vmware.pool.ntp.org
```

**Sample `/etc/ntp/step-tickers` File:**
```plaintext
# step-tickers
0.vmware.pool.ntp.org
1.vmware.pool.ntp.org
```

- Ensure that `ntpd` is configured to start at boot time. On some distributions, this can be done with the command `chkconfig ntpd on`. Consult your distribution’s documentation for details. You can start `ntpd` manually with the command `/etc/init.d/ntpd start`.

#### Host Clock Synchronization

- If you are using VMware Tools to synchronize the guest operating system clock to the host clock, or if the guest operating system initializes its time from the virtual CMOS TOD clock, it is crucial for the host clock to have accurate time.
- If using native clock synchronization software in the guest operating system, you might choose to use the host as a time server for the virtual machine.

**Microsoft Windows as the Host:**
- The Windows Time Service (W32Time) can be used to synchronize the host clock. There are multiple ways to configure W32Time, some of which provide more precise synchronization. Refer to Microsoft's documentation for details.

**Linux as the Host:**
- NTP is a good way to synchronize the host clock. The NTP daemon is called `ntpd` on current distributions and `xntpd` on older ones.
- VMware ESX and ESXi include an NTP daemon. You can enable and configure NTP from the Virtual Infrastructure Client. For older versions of ESX, refer to VMware Knowledge Base Article 1339 (http://kb.vmware.com/kb/1339).
- In ESX, the NTP daemon runs in the service console, which is partially virtualized. This can result in less precise time compared to running directly on the host kernel. In ESXi, there is no service console, and the NTP daemon runs directly on the VMkernel.

#### Time and Performance Measurements Within a Virtual Machine

- Customers often ask about the accuracy of timing and performance measurements taken within a virtual machine.
- Time measurements within a virtual machine can be somewhat inaccurate due to the difficulty of keeping the guest operating system clock perfectly synchronized, as discussed above.

---

Copyright © 2008 VMware, Inc. All rights reserved.