value of the collection of incoming edges into that node. As this
observed value is a realization of a random variable, we set out to
compute the variable’s distribution in order to evaluate the proba-
bility of observing such a log-likelihood value (its left-tail p-value).
To overcome the exponential direct-computation of the distribu-
tion, we show that it is well-approximated in linear time by the
Gaussian through Lyapunov’s version of the Central Limit Theorem
which allows for differently-distributed summands. We verify that
the convergence is excellent even at small numbers of nodes via
explicit computation. Finally, we present two detection algorithms
based on these nodewise p-values which harness the location infor-
mation embedded in the proximity graph, leading to significantly
superior detection performance, demonstrated in Section 6.
4 PROXIMITY GRAPH CONSTRUCTION
To construct an informative proximity graph that could then be
analyzed to identify Sybils, we propose the following scheme, appli-
cable to a general class of P2P-capable CPSs. As a meta-parameter,
the P2P medium is chosen appropriately for the target application,
such as WiFi Direct for smartphone-based networks. With modern
smartphones in mind, we make the following device assumptions:
(1) Devices have homogeneous communication capabilities
(2) Devices can either broadcast (trasmit) or scan (receive)
(3) Devices get frequent location updates (every few seconds)
4.1 Communication Procedure Overview
The procedure involves a series of 2⌈loд2(N)⌉ discrete, synchro-
nized, α-second-long rounds of dense broadcast-communication
between all of the N nodes that are initially within a radius R
around a specified center location, with each round lasting for α
seconds1. Nodes take turns to declare their own presence and tabu-
late the presence of others in broadcast fashion, and subsequently
communicate these results to the Server, which proceeds to form
a proximity graph of who-saw-who. The scheme consists of the
following steps:
1The radius R and time-per-round α are chosen to yield sufficient participants while
ensuring reasonable connectivity between every pair in the pairs’ respective rounds.
For WiFi Direct, our default choices are R = 32.5m and α = 2sec.
(1) The Server chooses to initiate the procedure at a particular
time centered at a particular location
(2) All nodes within R radius of a center become participants
(3) Server generates sequences of roundwise listen/broadcast
states and random broadcasting keys for every node
(4) Server distributes state sequences and keys to each node; in
each round, each node either listens or broadcasts its key
(5) Synchronized, nodes initiate communication, listening or
broadcasting their keys via the P2P communication medium
(6) Nodes accumulate lists of keys they actually see for rounds
wherein they listen
(7) Nodes report their seen-lists to the Server
(8) Server maps keys in the seen-lists to their respective nodes
(9) Server constructs a proximity graph; entries [present in |
missing from] the mapped seen-lists produce [successful |
failed] edges from the listening to the broadcasting nodes
4.2 Nodewise State Sequence Generation
The roundwise state assignments for each node (i.e. whether it
should listen, remain idle, or broadcast a specific key) are obtained
using the gen_state_seqences algorithm outlined below.
This algorithm returns a 2D num_nodes × num_rounds string
array, where each row encodes the sequence of state assignments
for a given node, and each entry of this sequence is either "idle",
"listen", or some unique key (implying broadcasting). This array
is initially filled with "idle" and is then recursively filled out. The
runtime is trivially fast and immaterial to the overall approach.
The unique, practically-unguessable keys for the broadcasting
states are generated on the fly with any suitable gen_key() function.
num_rounds ← 2 ∗ ⌈loд2(N)⌉
nsseqs ← N × num_rounds string array
fill(nsseq, "idle")
gen_roundwise_states(nsseqs, 0, 0, N)
return nsseqs
Algorithm 1 Nodewise State Sequence Generation
1: procedure gen_state_seqences(N)
2:
3:
4:
5:
6:
7:
8: procedure gen_roundwise_states(nsseqs, depth, bgn, end)
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
nsseqs[i][depth] = "listen"
nsseqs[i][depth + 1] = gen_key()
gen_nodewise_states(nsseq, depth+2, bgn, mid)
gen_nodewise_states(nsseq, depth+2, mid, end)
if end − bgn > 1 then
mid ← ⌊(bgn + end)/2⌋
for i = bgn, i < mid do
nsseqs[i][depth] = gen_key()
nsseqs[i][depth + 1] = "listen"
for i = mid, i < end do
if depth+2 < num_rounds then
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan7354.3 Execution of Communication
Every two rounds, the state assignments are constructed such as to
split the nodes into two approximately-equal groups of listeners
and broadcasters. In the first round of the two, the first half of the
nodes listen while the second half broadcast. In the second round
of the two, the nodes swap roles. Thus after every pair of rounds
completes, every node will have had a chance to both see and be seen
by every other node from the other group. As will be demonstrated
in Section 4.4, these node-to-node connections will be represented
by a proximity graph.
After the very first pair of rounds, there are effectively 2 groups
of nodes which have full bipartite connectivity, but are lacking
in internal connections (as the nodes within each group were all
listening or all broadcasting in both rounds).
In the following pair of rounds, these 2 groups are further split
into 2 subgroups each, and the procedure recurses to conclusion, un-
til every node has had a chance to "listen" during every other node’s
"broadcasting" state. At this point, assuming no communication
failures, the nodes have full N -partite and complete bidirectional
connectivity, with every directed edge denoting whether the source
node has seen the broadcast of the destination node and can thereby
vouch for the latter’s existence.
In this scheme, all communication is done in open broad-
cast form, implying that no node-to-node channels actually have to
be established. In the example of using WiFi Direct, broadcasting
nodes would transmit tailored 802.11 beacon frame packets with
SSID fields housing the secret keys. This approach avoids estab-
2 pairwise communication channels (each with further
lishing N
unnecessary handshake procedures), allowing instead to complete
the entire procedure in O(loд(N)) time.
Additionally, nodes receive regular smartphone location updates
every α seconds (once every round) and incorporate this roundwise
location data into their seen-lists, allowing the Server to appropri-
ately model the likelihoods of random connection failures according
to a distance model, further discussed in Section 5.
4.5 An Example
Suppose that the Server decides to initiate the Location Validation
procedure at a particular point and time, finding nodes {A, B, C, D}
to be within the predefined radius. First, the server will distrib-
ute keys {k1, k5} to A, {k4, k7} to B, {k3, k6} to C, and {k2, k8}
to D. Then, it will synchronize the nodes, which will initiate the
communication.
In round 1, A and D will broadcast while B and C will listen
and record the keys they see. In round 2, the roles will reverse. In
round 3, A and C will broadcast, and in round 4, the roles will again
reverse. This is demonstrated by Fig. 2 below. After the 4 rounds,
each node will have had a chance to see a key belonging to each
other node, and they will all report their seen-lists to the Server.
Figure 2: Communication procedure for 4 nodes: A, B, C, D.
Concentric circles represent broadcasting. The seen-lists are
shown inbetween the rounds and are showing all potential
connections. At the end, every node has had a chance to lis-
ten to (at least) one broadcast from every other node.
Suppose that A did not see k8, and that C is a Sybil node that
could neither have seen any keys, nor could have any of its own
keys seen by others. This situation would have the Server produce
the following proximity graph shown in Fig. 3 below:
4.4 Forming the Proximity Graph
After assigning every participating node with its respective se-
quence of states derived using Algorithm 1 and initiating the com-
munication procedure, the Server gets back lists of seen-keys, one
for every node. The Server then compares them against the hy-
pothetical connections that could have occurred given the listener-
broadcaster pairs in every round, and will construct a proximity
graph G as follows.
The graph G = (V , E) is a collection of N nodes: V = {v1, ..., vN },
and a complete set of edges: E = V × V .
Node locations are given, for relevant rounds, by the function
loc : V × Z+ → R2, where the x, y coordinates claimed by node
v ∈ V in round number r ∈ Z+ are given by loc(v, r) = (x, y).
A directed edge from vi to vj is given by ei, j, and res : E → {S, F}
denotes whether the result was a success (S), meaning that vi saw
vj (vj’s key is in vi’s seen-list), or a failure (F).
The function rnd : E → Z+ encodes the round wherein the edge
was established. The length of an edge ei, j (i.e. Euclidean distance
between vi and vj when the edge formed) is given by dist : E → R+,
where: dist(ei, j) =(cid:13)(cid:13)loc(vi , rnd(ei, j)) − loc(vj , rnd(ei, j))(cid:13)(cid:13)2.
Figure 3: Proximity graph generated from the communica-
tion procedure results, assuming C is a Sybil (causing its edge
failures), and the D → A edge failed by pure chance. Nodes
are assumed to be stationary for simplicity.
4.6 Advantages
This scheme is designed to address the shortcomings discussed
prior in the following ways:
(1) Devices are involved sparingly. Perpetual attempts at es-
tablishing connections hog the WiFi transceiver, drain power,
and are likely to irritate the user. The quick, sub-1-minute,
one-shot graph formation on the other hand improves the
overall system longevity and tolerability.
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan736(2) Historical data is not necessary. New nodes entering the
overarching crowdsourced system do not have to accumulate
trust, since they may immediately be full participants of any
proximity-graph-based Sybil detection procedure. The lack
of historical record-keeping additionally carries a privacy
benefit as discussed earlier.
(3) Gradual Sybil infiltration is hindered. By constraining
the graph formation to a much shorter time window of typi-
cally less than a minute, an adversary no longer has the time
to gradually impersonate Sybils with their malicious nodes.
Instead, malicious nodes that impersonate Sybils will pay
the price of not being able to validate their own presence as
effectively, drawing suspicion upon themselves.
(4) Listening/broadcasting asymmetry is accounted for. We
employ a directed graph to represent the connections. Broad-
casting a message over WiFi produces a publicly-visible phys-
ical footprint in the vicinity, while receiving a message may
be done passively. Consequently, broadcasting serves as
much stronger evidence of physical presence than lis-
tening, which will be discussed further in Section 5.1.
(5) Connection failures are recorded. Connections that could
have been established between nodes (i.e. one listened while
the other broadcasted) but were not may be useful in placing
doubt on the legitimacy of a node’s location claim by serving
as counter-evidence.
5 PROXIMITY GRAPH ANALYSIS
The core idea for identifying Sybils is that Sybils are not able
to generate sufficiently-believable sets of edge outcomes on
proximity graphs constructed as per Section 4 due to their
inherent physical absence, even with support from malicious
nodes under the three adversarial evasive strategies described in
Section 3.4 point (3).
To analyze this concept of believability of edge outcomes within
the inherently uncertain nature of wireless communication, we
introduce a probabilistic model for the communication medium.
As the preliminary model used in this paper, we treat the proba-
bility of a successful edge as a function of pairwise distance
between the nodes, where a listening node has a lower probability
of seeing a broadcasting node the further away apart they are. An
example of such a function for WiFi Direct is shown in Fig. 4.
Figure 4: The conditional probability of a listening node suc-
cessfully seeing a broadcasting node’s key within α = 2 sec-
onds (a single round) using WiFi Direct given the distance
between the two nodes (measured experimentally[20]).
The conditional probability of an edge’s success is thus assumed
to be a function of distance, and is given by prob : R+ → [0, 1].
To make analysis concrete, we use the experimentally-measured
function for WiFi Direct exactly as depicted in Fig. 4. Labelling such
a probability of an edge’s success as pi, j, we have:
(cid:16)
res(ei, j) = S | dist(ei, j)(cid:17)
pi, j = P
= prob(dist(ei, j))
We may now effectively transform our edge successes and fail-
ures into a set of likelihood values, one per each directed edge.
To do so, we define the function edдeL : E → [0, 1]:
(cid:40)
edдeL(ei, j)
pi, j
1 − pi, j
if res(ei, j) = S
if res(ei, j) = F
5.1 Determining a Node’s Trustworthiness
Directed edges between the honest nodes should succeed/fail ran-
domly according to the prob function, and so for every node, the
collection of edge outcomes may be viewed as a realization
of a random vector, and the likelihood of occurrence of that par-
ticular collection may be assessed.
Without support from malicious nodes, all Sybil–honest connec-
tions will fail (as per Section 3.3), and since many of these edges
are short, their likelihoods of failure will be low, impacting both
the Sybils and the honest nodes alike. The preponderance of hon-
est nodes and the comparative scarcity of Sybils, however, would
ultimately result in the Sybils being affected to a far greater degree.
This suggests selecting low edge-likelihood nodes to be a reasonable
approach to identifying Sybils.
To factor in adversarial evasive strategies into our analysis, we
note that for each node in the formed graph, there are outgoing
edges and incoming edges. We argue that the incoming edges con-
stitute a far more resilient dataset than the outgoing edges due
to the asymmetric cost for an adversary to forge an incoming
(honest→Sybil) edge via impersonation versus forging an outgo-
ing (Sybil→honest) edge via circulation. Specifically:
• A single malicious node may listen on behalf of many Sybils
and inform all of them about the keys that they should have
seen, without cost. Thus it is easy for an adversary to forge
successful outgoing edges from Sybils.
• A single malicious node may broadcast on behalf of only
a single Sybil node due to possessing only a single radio
transmitter. Thus, the ability of an adversary to contrive
successful incoming edges is limited.
Consequently, for a given node vi, we define its trustworthi-
of all of its
ness level to be the total observed likelihood L∗
vi
incoming edges across all rounds, where:
N
j(cid:44)i
L∗
vi
=
edдeL(ej,i)
For both theoretical and computational reasons, it proves con-
venient to work with the natural logarithm of this quantity – the
observed log-likelihood value ℓ∗
– defined as:
vi
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan737N
j(cid:44)i