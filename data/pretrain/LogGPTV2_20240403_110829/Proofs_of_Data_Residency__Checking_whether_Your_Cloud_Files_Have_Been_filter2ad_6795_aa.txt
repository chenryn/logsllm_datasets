# Proofs of Data Residency: Checking Whether Your Cloud Files Have Been Relocated

**Authors:** Hung Dang, Erick Purwanto, Ee-Chien Chang  
**Affiliation:** School of Computing, National University of Singapore  
**Emails:** {hungdang, erickp, changec}@comp.nus.edu.sg

## Abstract
Cloud storage services offer numerous benefits, such as cost-effectiveness and elasticity. However, they also raise significant security and privacy concerns. One such concern is data residency, which requires that outsourced data be entirely retrievable from the local drives of a specific storage server. We introduce a security model called Proofs of Data Residency (PoDR) to address this issue. PoDR can be used to verify whether data are replicated across different servers or combined with geolocation to locate data in the cloud. We observe that the data residency checking protocol should exclude all server-side computation and that each challenge should require no more than a single atomic fetching operation. We highlight potential attacks on naive constructions and present a secure PoDR scheme structured as a timed challenge-response protocol. Two implementation variants, N-ResCheck and E-ResCheck, demonstrate the use of trusted computing, particularly Intel SGX, to enhance security. Extensive experiments validate the performance and security of our solution.

## 1. Introduction
The rapid growth of information has outpaced the availability of storage, leading to the rise of cloud storage models. These models, offered by various well-known cloud service providers, have gained significant popularity due to their cost-effectiveness and scalability. They provide data owners with a simplified view of outsourced files, abstracting away underlying file-layout and storage mechanisms. However, this abstraction raises security concerns about whether service providers adhere to service level agreements (SLAs).

Various real-world incidents and regulatory requirements highlight these concerns. A cloud crash could permanently destroy outsourced data, emphasizing the need for fault tolerance testing [2]. Additionally, regulations governing data storage across national borders necessitate verifying the locations where files are maintained [30, 1, 3]. Therefore, it is crucial to have technical means to verify whether files are stored as agreed.

Existing works have explored methods to audit cloud storage providers, such as testing fault tolerance by checking file replication [22, 15] and geolocating data. However, these approaches face challenges in noisy network environments. In this paper, we focus on verifying the residency of outsourced data on a server, ensuring that a file F is entirely maintained on the local drives of the server in question. This provides more assurance than just data retrievability, which has been studied under Proofs of Retrievability (PoR) and Provable Data Possession (PDP) [26, 13].

We formulate the notion of data residency under a security model called Proof of Data Residency, considering the behaviors of storage devices and capabilities of dishonest providers. We propose techniques to attest data residency, structured as a timed challenge-response protocol. Our solutions use an authenticator-based PoR to ensure file retrievability and assess response latencies to establish data residency. We discuss two implementation variants: N-ResCheck, which operates over the network, and E-ResCheck, which uses a trusted unit on the server. Recent initiatives in trusted computing, especially Intel SGX, make it interesting to investigate the security of such protocols.

Our study suggests minimizing prover computation and lowering response latencies. Each challenge should request only one data block, and the block size should be small (e.g., 64 bytes). Empirical studies show that insecure constructions can be evaded, while our proposed solution achieves low false acceptance and rejection rates with reasonable storage overhead and audit size. E-ResCheck, in particular, demonstrates significant security improvements when the verifier co-locates with the prover in a trusted environment.

In summary, our contributions include:
- Defining the security of Proofs of Data Residency in the presence of a powerful adversary.
- Discussing and empirically showing potential attacks on insecure PoDR constructions.
- Proposing a secure and efficient PoDR protocol and analyzing its security.
- Conducting extensive experiments to evaluate our solution, demonstrating negligible false acceptance and rejection rates.

The rest of the paper is organized as follows: Section 2 provides background on related notions, Section 3 states the problem, Section 4 presents our definition of Proofs of Data Residency, Section 5 discusses potential attacks, Section 6 proposes a secure protocol, Section 7 presents experimental evaluation, and Section 8 surveys related works. Finally, we conclude in Section 9.

## 2. Preliminaries
### 2.1 Proof of Retrievability (PoR)
Proof of Retrievability (PoR) [26] enables data owners to audit the integrity of their outsourced files. Before outsourcing, the data owner encodes the data using a redundant encoding (e.g., Reed-Solomon code [33]) and authenticates all encoded blocks. The data owner then engages the storage provider in a challenge-response protocol, checking the authenticity of λ blocks, where λ is a security parameter. Due to the redundancy, the provider must discard or tamper with a significant portion of the blocks to cause data loss, which would be detected with high probability.

### 2.2 Host Geolocation
Host geolocation techniques [29, 24, 18] help determine the geographic location of a storage server. Methods include matching intermediary nodes in packet routing against known backbone Internet providers [18] and using latency measurements to approximate geographical distances [29].

### 2.3 Intel SGX
Intel SGX [6] provides protected execution environments (enclaves) that preserve the confidentiality and integrity of code and data against untrusted operating systems or other processes. Enclave memory is protected from non-enclave code.

## 3. The Problem
### 3.1 Overview
We consider a model with two entities: the data owner and the storage server. The data owner outsources a file F to the server and insists that the data remain locally stored. A dishonest server may move some data to remote servers for economic reasons. The data owner wants to periodically verify that F can be retrieved entirely from the server's local drives. This verification is called a data residency checking protocol, where the data owner acts as the verifier V, and the storage server acts as the prover P.

A data residency checking protocol is structured as a timed challenge-response protocol. It involves multiple challenge-response exchanges, and V captures the response latency (round trip time between challenge and response). V decides on accepting or rejecting the verification based on the validity of the responses and their latencies.

### 3.2 Timing Measurements
Response latency includes:
- **Challenge-response transmission time:** Time for transmitting the challenge and response between V and P.
- **Fetching time:** Time for P to fetch the required data from storage.
- **Computation time:** Time for P to produce the response from the fetched data.

These timings are probabilistic and form the environment profile E.

### 3.3 Threat Model: Adversary's Capabilities
We consider an adversary who controls the storage, server, and network. The adversary can reduce response latency through:
- **Computation time:** Speedup via over-clocking or parallelism.
- **Fetching time:** Reducing the time to fetch data, even if it is stored remotely.
- **Noise measurement:** Estimating actual timing measurements to evade detection.

### 3.4 Threat Model: Adversary's Limitations
- **Limited access to verification oracle:** The adversary has limited opportunities to forge authentication tags.
- **Atomic operation:** An assumption that fetching data from remote storage takes longer than from local drives, unless the adversary has an out-of-band communication channel.

## 4. Definition of Proofs of Data Residency
[Detailed definition and formalization of the security model]

## 5. Potential Attacks on Insecure Constructions
[Discussion and empirical demonstration of potential attacks]

## 6. Secure Protocol
[Proposal and detailed description of the secure PoDR protocol]

## 7. Experimental Evaluation
[Results and analysis of the experiments]

## 8. Related Works
[Survey of related works and comparison with existing solutions]

## 9. Conclusion
[Summary and future work]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the research.