### 优化后的文本

#### 外设与基带
智能手机包含多种外设，例如显示器、触摸屏、存储设备以及音频输入输出设备等。另一个关键子系统是蜂窝基带或调制解调器，它通常由一个ARM CPU和一个数字信号处理器（DSP）组成，负责在手机与移动通信基础设施之间建立物理层的无线连接。具体使用哪种应用处理器和基带，主要取决于设备制造商及所支持的移动网络类型（如GSM、CDMA等）。在设备主板上，这两个子系统互相连接。为了降低成本，芯片厂商有时会将它们集成到一块芯片中，但从功能上看，它们依然保持独立。图11-1展示了智能手机架构的抽象示意图。

**图11-1 智能手机通用架构**
```
SoC
GPS
UART
基带
UART
CPU
CPU
内存
DSP
内存
显示屏
触摸屏
闪存
```

#### 接口类型
两个子系统之间的接口类型取决于实际使用的组件及设备制造商。常见的接口包括SPI（串行外设接口）、USB（通用串行总线）、UART（通用异步收发器）和共享内存。由于存在多种选择，RIL（无线接口层）设计得非常灵活。

### Android电话栈
Android电话栈由四部分组成：电话和短信应用程序、应用程序框架、RIL守护程序和内核级设备驱动。代码分别用Java和C/C++编写，前者运行在Dalvik虚拟机中，后者则直接以本地机器码形式执行。寻找漏洞时，这一点非常重要。

1. **电话相关的应用程序**  
   这些高层应用程序主要包括电话拨号器和短信处理程序，实现多个核心功能。例如，通话跟踪器处理语音通话，短信分配器处理短信和彩信，服务跟踪器管理蜂窝连接状态，数据跟踪器负责数据连接。这些应用程序直接与下一层（应用程序框架层）通信。

2. **应用框架层**  
   在这一层中，RIL组件提供电话相关应用程序与RIL守护程序之间的通信接口，并对不同移动网络中的各种概念进行抽象。开发者可以通过`android.telephony`包提供的方法来使用这些抽象概念。

3. **用户空间的本地组件**  
   用户空间组件主要包括RIL守护程序及其支持库。RIL守护程序是本章的重点，在后续章节中会有详细介绍。

4. **内核**  
   Linux内核包含电话栈的最底层组件，主要是基带硬件的驱动程序。这些驱动程序提供了一个与基带通信的接口，通常是通过串行链路实现的。

### 电话栈的定制
Android电话栈各层都可以定制，其中一些是必须的，比如基带驱动程序与设备硬件的适配。此外，设备制造商通常也会对其他部分进行定制，例如替换拨号器、修改短信和彩信软件等。从安全角度来看，这些定制产生的新代码尤其值得关注，因为它们大多是闭源的，且可能未经充分的安全审计。

### RIL守护程序
RIL中最关键的组件是RIL守护程序（rild），它是一个以本地Linux进程形式运行的系统核心服务，主要功能是在Android电话框架层与设备硬件之间建立连接。rild通过名为Binder的IPC机制向框架层提供接口。其开源部分的源代码位于AOSP源码仓库的`hardware/ril`目录下。

rild支持第三方闭源的硬件代码接口，提供了由一系列函数调用和回调构成的API。启动时，rild会加载设备制造商提供的`vendor-ril`共享库。rild是少数由init进程管理的服务之一，因此会在系统引导时启动，并在意外终止后重新启动。rild崩溃通常不会导致设备重启或系统不稳定，这使得我们可以放心地操作它。

#### 不同设备上的RIL守护程序
不同设备上的RIL守护程序有细微差别。以下是如何快速了解HTC One V手机（运行Android 4.0.3和HTC Sense 4.0）上的rild信息的方法：

1. 使用ADB shell命令查找rild的进程ID（PID）。
2. 通过proc文件系统查看rild加载的所有动态库文件。
3. 检查init脚本文件，找到rild使用的UNIX域套接字。
4. 查看rild打开的文件，确定rild使用的串行设备名称。
5. 使用`getprop`工具导出所有与RIL相关的Android系统属性。

```shell
# 查找rild的PID
shell@android:/ # ps | grep rild
radio    14451  14364  932 ffffff 40063fb4 S /system/bin/rild

# 查看rild加载的动态库
shell@android:/ # cat /proc/1445/maps | grep rild
/system/bin/rild
/system/lib/libril.so
/system/lib/libhtc_ril.so

# 查看init脚本
shell@android:/ # grep rild /init.rc
service rild /system/bin/rild
socket rild stream 660 root radio
socket rild-debug stream 660 radio system
socket rild-htc stream 660 radio system

# 查看rild打开的文件
shell@android:/data # ls -l /proc/1445/fd | grep dev
lrwx------ 1 root root 64 2013-01-15 12:55 13 -> /dev/smd0
lrwx------ 1 root root 64 2013-01-15 12:55 14 -> /dev/qmi.2

# 导出RIL相关的系统属性
shell@android:/ $ getprop | grep ril
[ril.version.xi1-inp1]: [HTCRIL 4.0.0024HM (Mar  6 2012,10:40:00)]
[init.svc.rild]: [running]
[ril.ecelist]: [112,911]
[ril.booted]: [1]
[ril.gsm.only-version]: [2]
[ril.modem_link.status]: [0]
[ril.reload.count]: [1]
[ril.sim.swap.status]: [0]
[rild.libpath.generic]: [/system/lib/librilswitch.so]
[rild.libpath]: [/system/lib/libhtc_ril.so]
[rilswitch.genericlibpath]: [/system/lib/libganril.so]
[rilswitch.vendorlibpath]: [/system/lib/libhtc_ril.so]
[ro.ril.def.agps.mode]: [2]
[ro.ril.enable.a52.HTCITA]: [1]
[ro.ril.enable.a52]: [0]
[ro.ril.enable.a53.HTCITA]: [1]
[ro.ril.enable.a53]: [1]
[ro.ril.enable.amr.wideband]: [1]
[ro.ril.enable.dtm]: [1]
[ro.ril.enable.managed.roaming]: [1]
[ro.ril.hsdpa.category]: [10]
[ro.ril.gprsclass]: [12]
[ro.ril.hsupa.category]: [6]
[ro.ril.hmaxpa]: [2]
```

### 安全性
RIL守护程序是Android设备上为数不多可以从外界直接访问的代码片段之一。rild和`vendor-ril`都是用C和C++编写并编译成本地代码运行，这两种语言都不是内存安全的，因此可能成为各类安全问题的主要源头。RIL守护程序需要处理来自蜂窝调制解调器和Android框架层的各种数据和控制信息，例如解析和处理短信。

短信发送到Android设备后，会被基带接收并解码，然后通过Linux内核中的基带驱动程序转发给RIL守护程序中的`vendor-ril`库，再推送给Android电话栈的框架层。几乎每个Android设备上的RIL代码都可能受到远程攻击。通常情况下，攻击者更喜欢远程攻击，这样不需要与受害用户进行直接交互或接触。

刚启动时，RIL守护进程通常以root权限执行，但很快会降权为`radio`用户，以降低风险。`radio`用户只能访问完成其职责所必需的资源，但仍包括许多重要数据（如短信）和功能（如发送短信、拨打电话）。从另一个角度看，`radio`用户和同名用户组也用于确保不将rild专用的资源暴露给其他用户。

### 用于`vendor-ril`的API
`vendor-ril`与制造商和设备型号紧密相关，负责与具体的蜂窝基带硬件进行交互。由于基带高度私有化，RIL子系统被设计成只支持二进制文件形式的扩展。实际上，`vendor-ril`库提供了完整的API，包括函数调用和回调，以便设备制造商实现具体硬件的相关功能。