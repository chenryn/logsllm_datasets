       Starting dlm_controld...                                [  OK  ]
       Starting gfs_controld...                                [  OK  ]
       Unfencing self...                                       [  OK  ]
       Joining fence domain...                                 [  OK  ]
    ```
9.  ::: para
    在任意集群节点中运行
    `cman_tool nodes`{.command}，确认那些节点作为集群的成员运行（在状态列
    \"Sts\" 中被标记为 \"M\"）。例如：
    :::
    ``` screen
    [root@example-01 ~]# cman_tool nodes
    Node  Sts   Inc   Joined               Name
       1   M    548   2010-09-28 10:52:21  node-01.example.com
       2   M    548   2010-09-28 10:52:21  node-02.example.com
       3   M    544   2010-09-28 10:52:21  node-03.example.com
    ```
10. ::: para
    如果集群正在运行，请执行 [第 7.3 节 "配置
    Fencing"](#ch-config-cli-CA.html#s1-config-fencing-cli-CA){.xref}。
    :::
:::
::: simplesect
::: titlepage
## [⁠]{#ch-config-cli-CA.html#ss-basic-config-examples-CA}基本配置示例 {.title}
:::
::: para
[例 7.1 "`cluster.conf`{.filename}
示例：基本配置"](#ch-config-cli-CA.html#ex-clusterconf-basic-cli-CA){.xref}
和 [例 7.2 "`cluster.conf`{.filename}
示例：基本双节点配置"](#ch-config-cli-CA.html#ex-clusterconf-basic-two-node-cli-CA){.xref}（双节点集群）提供最基本的集群配置示例。本章的后续步骤将提供有关配置
fencing 和 HA 服务的信息。
:::
::: example
[⁠]{#ch-config-cli-CA.html#ex-clusterconf-basic-cli-CA}
**例 7.1. `cluster.conf`{.filename} 示例：基本配置**
::: example-contents
``` screen
```
:::
:::
::: example
[⁠]{#ch-config-cli-CA.html#ex-clusterconf-basic-two-node-cli-CA}
**例 7.2. `cluster.conf`{.filename} 示例：基本双节点配置**
::: example-contents
``` screen
```
:::
:::
:::
::: simplesect
::: titlepage
## [⁠]{#ch-config-cli-CA.html#ss-2node-considerations-CA}双节点集群中 `totem`{.literal} 的 `consensus`{.literal} 值 {.title}
:::
[]{#ch-config-cli-CA.html#idm140713310944784
.indexterm}[]{#ch-config-cli-CA.html#idm140713310943824 .indexterm}
::: para
您创建双节点集群且不想之后为该集群添加附加节点时，您应该忽略
`cluster.conf`{.filename} 文件 `totem`{.literal} 标签的
`consensus`{.literal} 值，以便根据以下规则自动计算 `consensus`{.literal}
值：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    如果有两个或者少于两个节点，`consensus`{.literal} 值将在 200 毫秒到
    2000 毫秒之间（token \* 0.2）。
    :::
-   ::: para
    如果有三个或者三个以上节点，`consensus`{.literal} 值为 token + 2000
    毫秒。
    :::
:::
::: para
如果 `cman`{.command} 工具以这种方式配置您的 consensus
超时，那么将来您从两个节点移动到三个（或者更多）节点就需要重启集群，因为
consensus 超时需要根据 token 超时改为较大的值。
:::
::: para
如果您要配置一个双节点集群，并想要在将来升级到两个以上节点，您可以覆盖这个
consensus
超时以便当从两个节点移动到到三个（或者更多）节点时不需要重启集群。您可以在
`cluster.conf`{.filename} 中进行如下操作以达到此目的：
:::
``` screen
```
::: para
注：这个配置解析程序不会自动计算 X+ 2000。您在此必须使用整数而不是等式。
:::
::: para
在双节点集群中使用优化的 consensus
超时的优点是总体上降低了双节点故障切换耗时，因为 consensus 不是 token
超时的功能。
:::
::: para
注：在 `cman`{.command}
的双节点自动探测中，物理节点数是那些有用的节点而不是
`cluster.conf`{.filename} 文件中出现的 `two_node=1`{.literal} 指令。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-config-cli-CA.html#s1-config-fencing-cli-CA}7.3. 配置 Fencing {.title}
:::
::: para
配置 fencing 包括（a）在一个集群中配置一个或者多个 fence
设备；（b）为每个节点配置一个或者多个 fence 方法（使用指定的一个或者多个
fence 设备）。
:::
::: para
根据您的配置所需 fence 设备类型和 fence 方法配置
`cluster.conf`{.filename}，如下：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    在 `fencedevices`{.command} 部分，使用 `fencedevice`{.command}
    元素和 fence 设备独立属性指定每个 fence 设备。[例 7.3 "添加到
    `cluster.conf`{.filename} 中的 APC Fence
    设备"](#ch-config-cli-CA.html#ex-clusterconf-fencing-fencedevices-cli-CA){.xref}
    演示添加了 APC fence 设备的配置文件示例。
    :::
2.  ::: para
    在 `clusternodes`{.command} 部分，每个 `clusternodes`{.command}
    部分的 `fence`{.command} 元素中，指定每个节点的 fence 方法。使用
    `method`{.command} 属性 `name`{.command} 指定 fence 方法名称。使用
    `device`{.command} 元素及其属性 `name`{.command} 和具体 fence
    设备参数为每个 fence 方法指定 fence 设备。[例 7.4 "添加到
    `cluster.conf`{.filename} 的 fence
    方法"](#ch-config-cli-CA.html#ex-clusterconf-fencing-fencemethods-cli-CA){.xref}
    演示了集群中每个节点一个 fence 设备的 fence 方法示例。
    :::
3.  ::: para
    在非电源 fence 方法（即 SAN/存储 fencing）的
    `clusternodes`{.command} 部分添加 `unfence`{.command}
    字段。这可保证在重启该节点前不会重新启用被 fence 的节点。有关
    unfencing 节点的详情请参考 `fence_node`{.command}(8) man page。
    :::
    ::: para
    与 `fence`{.command} 部分不同，`unfence`{.command} 部分不包含
    `method`{.command}。它直接包含 `device`{.command} 参考，使用 \"on\"
    或者 \"enable\" 的明确动作（`action`{.command}）成为
    `fence`{.command} 对应设备部分的镜像。`fence`{.command} 和
    `unfence`{.command} `device`{.command} 行都参考同一
    `fencedevice`{.command}，并应在每个节点中重复同样的参数。
    :::
    ::: para
    将 `action`{.command} 属性指定为 \"on\" 或者 \"enable\"
    ，可在重启时启用该节点。[例 7.4 "添加到 `cluster.conf`{.filename} 的
    fence
    方法"](#ch-config-cli-CA.html#ex-clusterconf-fencing-fencemethods-cli-CA){.xref}
    和 [例 7.5 "`cluster.conf`{.filename}：每个节点中有多种 Fence
    方法"](#ch-config-cli-CA.html#ex-clusterconf-fencing-multi-per-node-cli-CA){.xref}
    中包含 `unfence`{.command} 元素和属性示例。
    :::
    ::: para
    有关 `unfence`{.command} 详情请参考 `fence_node`{.command} man
    page。
    :::
4.  ::: para
    增加 `config_version`{.command} 属性参数即可更新该参数（例如：从
    `config_version="2"`{.command} 改为
    `config_version="3">`{.command}）。
    :::
5.  ::: para
    保存 `/etc/cluster/cluster.conf`{.filename}。
    :::
6.  ::: para
    [**（可选）**]{.guilabel}，运行 `ccs_config_validate`{.command}
    命令，确认根据集群方案（`cluster.rng`{.filename}）更新的文件。例如：
    :::
    ``` screen
    [root@example-01 ~]# ccs_config_validate 
    Configuration validates
    ```
7.  ::: para
    请运行 `cman_tool version -r`{.command}
    命令在剩余的所有集群节点中推广。这还将运行附加验证。需要在每个集群节点中都运行
    `ricci`{.command} 方可推广更新的集群配置信息。
    :::
8.  ::: para
    确认推广了更新的文件。
    :::
9.  ::: para
    执行 [第 7.4 节
    "配置故障切换域"](#ch-config-cli-CA.html#s1-config-failover-domain-cli-CA){.xref}。
    :::
:::
::: para
如果需要，您可以通过在每个节点中使用多种 fence 方法和在每个 fence
方法中使用多个 fence 设备配置复杂配置。当在每个节点中指定多个 fence
方法时，如果使用第一个方法 `fenced`{.command} 执行 fence 操作失败，则
fence 守护进程会尝试下一个方法，然后继续循环尝试所有方法直到成功为止。
:::
::: para
有时 fencing 节点需要禁用两个 I/O 路径或者两个电源端口。这可通过在 fence
方法中指定两个或者多个设备完成。`fenced`{.command} 为每个 fence
设备行运行一次 fence 代理；只有全部成功方可认为是成功。
:::
::: para
["Fencing
配置示例"一节](#ch-config-cli-CA.html#ss-clusterconf-fencing-examples-CA){.xref}
中演示了更复杂的配置。
:::
::: para
您可以在 fence 设备代理 man page 中找到有关配置具体 fence
设备的更多信息（例如：`fence_apc`{.command} man page）。另外，您可以在
[附录 A, *Fence 设备参数*](#ap-fence-device-param-CA.html){.xref}
中获得有关 fence 参数的更多信息，在 `/usr/sbin/`{.filename} 中获得 fence
代理的更多信息，在 `/usr/share/cluster/cluster.rng`{.filename}
中获得有关集群方案的更多信息，在
`/usr/share/doc/cman-X.Y.ZZ/cluster_conf.html`{.filename}
中获得有关注释方案的更多信息（例如：`/usr/share/doc/cman-3.0.12/cluster_conf.html`{.filename}）。
:::
::: simplesect
::: titlepage
## [⁠]{#ch-config-cli-CA.html#ss-clusterconf-fencing-examples-CA}Fencing 配置示例 {.title}
:::
::: para
以下示例演示了每个节点一个 fence 方法以及每个 fence 方法一个 fence
设备的简单配置：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    [例 7.3 "添加到 `cluster.conf`{.filename} 中的 APC Fence
    设备"](#ch-config-cli-CA.html#ex-clusterconf-fencing-fencedevices-cli-CA){.xref}
    :::
-   ::: para
    [例 7.4 "添加到 `cluster.conf`{.filename} 的 fence
    方法"](#ch-config-cli-CA.html#ex-clusterconf-fencing-fencemethods-cli-CA){.xref}
    :::
:::
::: para
以下示例演示了较复杂的配置：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    [例 7.5 "`cluster.conf`{.filename}：每个节点中有多种 Fence
    方法"](#ch-config-cli-CA.html#ex-clusterconf-fencing-multi-per-node-cli-CA){.xref}
    :::
-   ::: para
    [例 7.6
    "`cluster.conf`{.filename}：Fencing，多路径多端口"](#ch-config-cli-CA.html#ex-clusterconf-fencing-multipath-cli-CA){.xref}
    :::
-   ::: para
    [例 7.7 "`cluster.conf`{.filename}：使用双电源 Fencing
    节点"](#ch-config-cli-CA.html#ex-clusterconf-fencing-dual-ps-cli-CA){.xref}
    :::
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**备注**
:::
::: admonition
::: para
本节中的示例并不完全，即还有其他方法根据您的要求配置 fencing。
:::
:::
:::
::: example
[⁠]{#ch-config-cli-CA.html#ex-clusterconf-fencing-fencedevices-cli-CA}
**例 7.3. 添加到 `cluster.conf`{.filename} 中的 APC Fence 设备**
::: example-contents