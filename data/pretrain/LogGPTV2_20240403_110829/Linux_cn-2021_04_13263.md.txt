---
author: Stephan Avenwedde
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 8257
date: '2021-04-03 20:40:00'
editorchoice: false
excerpt: 如果你知道如何在 C++ 中使用输入输出（I/O）流，那么（原则上）你便能够处理任何类型的输入输出设备。
fromurl: https://opensource.com/article/21/3/ccc-input-output
id: 13263
islctt: false
largepic: /data/attachment/album/202104/02/224507a2fq6ofotf4ff4rf.jpg
permalink: /article-13263-1.html
pic: /data/attachment/album/202104/02/224507a2fq6ofotf4ff4rf.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 13252
- displayorder: 0
  raid: 13649
reviewer: ''
selector: ''
summary: 如果你知道如何在 C++ 中使用输入输出（I/O）流，那么（原则上）你便能够处理任何类型的输入输出设备。
tags:
- 输入输出
thumb: false
title: 如何用 C++ 读写文件
titlepic: true
translator: wyxplus
updated: '2021-04-03 20:40:00'
---
> 
> 如果你知道如何在 C++ 中使用输入输出（I/O）流，那么（原则上）你便能够处理任何类型的输入输出设备。
> 
> 
> 
![](/data/attachment/album/202104/02/224507a2fq6ofotf4ff4rf.jpg "Computer screen with files or windows open")
在 C++ 中，对文件的读写可以通过使用输入输出流与流运算符 `>>` 和 `>` 来实现。
该两种类型都是在头文件 `` 中所定义。
从 `ios_base` 继承的类在写入时可被视为数据接收器，在从其读取时可被视为数据源，与数据本身完全分离。这种面向对象的方法使    关注点分离    separation of concerns  和    依赖注入    dependency injection  等概念易于实现。
### 一个简单的例子
本例程是非常简单：实例化了一个 `ofstream` 来写入，和实例化一个 `ifstream` 来读取。
```
#include  // cout, cin, cerr etc...
#include  // ifstream, ofstream
#include 
int main()
{
    std::string sFilename = "MyFile.txt";    
    /******************************************
     *                                        *
     *                WRITING                 *
     *                                        *
     ******************************************/
    std::ofstream fileSink(sFilename); // Creates an output file stream
    if (!fileSink) {
        std::cerr > operator reads word by workd (till whitespace)
        while (fileSource >> buffer)
        {
            std::cout  // needs to be included
sync();
```
### 总结
在 C++ 中读写文件并不那么复杂。更何况，如果你知道如何处理输入输出流，（原则上）那么你也知道如何处理任何类型的输入输出设备。对于各种输入输出设备的库能让你更容易地使用流运算符。这就是为什么知道输入输出流的流程会对你有所助益的原因。
---
via: 
作者：[Stephan Avenwedde](https://opensource.com/users/hansic99) 选题：[lujun9972](https://github.com/lujun9972) 译者：[wyxplus](https://github.com/wyxplus) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出