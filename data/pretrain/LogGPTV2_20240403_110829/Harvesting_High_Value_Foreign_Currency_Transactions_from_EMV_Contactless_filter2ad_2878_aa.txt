# Harvesting High-Value Foreign Currency Transactions from EMV Contactless Credit Cards Without the PIN

**Authors:**
- Martin Emms
- Budi Arief
- Leo Freitas
- Joseph Hannon
- Aad P. A. van Moorsel

**Citation:**
Emms, M., Arief, B., Freitas, L., Hannon, J., & van Moorsel, A. (2014). Harvesting High-Value Foreign Currency Transactions from EMV Contactless Credit Cards Without the PIN. In 21st ACM Conference on Computer and Communications Security (CCS). Scottsdale, Arizona, USA: ACM. DOI: [10.1145/2660267.2660312](http://dx.doi.org/10.1145/2660267.2660312)

**Copyright:**
© Owner/Author, 2014. This is the authors' version of the work. It is posted here for your personal use. Not for redistribution. The definitive Version of Record was published in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security.

**Date Deposited:**
02/09/2014

**Institution:**
Newcastle University ePrints - eprint.ncl.ac.uk

---

## Abstract

This paper presents an attack that allows fraudulent transactions to be collected from EMV contactless credit and debit cards without the cardholder's knowledge. The attack exploits a previously unreported vulnerability in the EMV protocol, which permits EMV contactless cards to approve unlimited-value transactions in foreign currencies without requiring the cardholder's PIN. For example, Visa credit cards can approve foreign currency transactions up to €999,999.99, bypassing the £20 contactless transaction limit in the UK. 

Our analysis methodology identified this flaw in the EMV protocol, and we present a scenario where fraudulent transaction details are transmitted over the Internet to a "rogue merchant," who then uses the data to withdraw funds from the victim's account. Criminals would likely choose transaction values between €100 and €200, which are low enough to avoid suspicion but high enough to make each attack worthwhile. This attack can be operated on a large scale with multiple attackers collecting fraudulent transactions for a central rogue merchant located anywhere EMV payments are accepted.

## Categories and Subject Descriptors

- **K.4.4 [Computers and Society]: Electronic Commerce – Cybercash, Security**
- **C.3 [Special-Purpose and Application-Based Systems]: Smartcards, Payment Schemes, Digital Cash**

## General Terms

- Security

## Keywords

- Contactless cards
- EMV
- Fraudulent transactions
- Foreign currency transaction limits
- Rogue merchant

## 1. Introduction

Our research has identified a practical attack on EMV contactless credit and debit cards, allowing large-scale "harvesting" of fraudulent payments from unsuspecting cardholders. The attack exploits six functional characteristics of EMV contactless cards:

1. Many Visa credit cards will approve unlimited-value transactions in a foreign currency, maximizing the amount extracted from each card.
2. The contactless interface allows transactions to be extracted while the card is still in the cardholder's wallet.
3. The cardholder's PIN is not required for contactless transactions, allowing the fraudulent transaction to be extracted without further interaction.
4. Visa contactless cards will approve transactions in offline mode, avoiding additional security checks by the bank.
5. Merchant details are not included in the data cryptographically protected by the card, making the attack more flexible and scalable.
6. While the EMV protocol requires payment cards to authenticate themselves to POS terminals, there is no requirement for POS terminals to authenticate themselves.

The main contribution of this paper is the identification of a newly discovered vulnerability in the EMV protocol related to the handling of foreign currencies. This vulnerability is made possible by the combination of the six functional characteristics described above. The introduction of EMV contactless cards has created a situation similar to Reason's "Swiss cheese" model, where layers of protection can be compromised if holes in each layer align to create an exploitable attack. We also propose two potential solutions to block this vulnerability.

The ability to capture fraudulent transactions and store them for later transmission to a rogue merchant differentiates this attack from previously described relay attacks on EMV contactless cards. Relay attacks require close synchronization between two attackers, making them difficult to operate on a large scale. Our attack, however, can be operated on a large scale, similar to the "Chip & PIN is broken" attack, but targets the money in the victim's bank account rather than goods from retailers.

The rest of the paper is organized as follows:
- Section 2: Methodology for finding the vulnerabilities.
- Section 3: Overview of the attack, including collection and conversion of fraudulent transactions.
- Section 4: Existing safeguards for EMV transactions.
- Section 5: EMV functionality exploited by the attack.
- Section 6: Experimental software implementation, including an Android app and a rogue merchant server.
- Section 7: Results demonstrating the feasibility of the attack.
- Section 8: Potential methods for preventing the attack.
- Section 9: Conclusions.

## 2. Methodology

Our work focuses on the analysis of the EMV payments protocol, specifically the security impact of introducing contactless and mobile payments functionality. Analyzing the protocol is challenging due to its complexity. EMV is a global payment system, and the protocol must incorporate competing requirements from various credit card issuers and financial regulators. The introduction of contactless/mobile payments has significantly increased the complexity of the EMV specifications. The EMV specification for contact (Chip & PIN) cards describes a single unified payment protocol sequence, while the specification for contactless/mobile payments contains seven protocol sequences, one for each card issuer. The complexity has expanded from four books comprising 765 pages for contact transactions to fourteen books containing 2,392 pages for both contact and contactless transactions.

To address this complexity, we developed a systematic approach combining formal and informal techniques. At the center of our approach are UML sequence diagrams, which serve as the informal but precise description of the protocol fragments. Each UML diagram is accompanied by a table listing the references in the EMV specification that were the diagram's information source. Creating the UML diagrams involves input from three main sources: (i) the EMV specification documents, (ii) feedback from insights gained by developers coding the emulator, and (iii) feedback from insights gained by designers constructing a formal model. Essential to our process is the systematic line-by-line documentation of the linkage between the EMV specification, UML diagram, abstract formal model, emulator code, and test cases.

### 2.1 The Process

Figure 1 shows our analysis process. The rounded boxes represent activity nodes (e.g., [A1]), and the square boxes represent object nodes (e.g., [O1.0]), which are the data sources driving the activities. Connecting edges, represented as black solid arrows, indicate the default order in the flow of activities. Red dashed arrows indicate feedback, creating an iterative process of refinement of the UML diagrams [O1.1], the abstract model [O2.1], and the emulator code [O4.1].

![Figure 1. Protocol Analysis Process](figure1.png)

At the center of our approach is the construction [A1] of UML sequence diagrams [O1.1] with accompanying reference lists. Much of the process is about constructing these sequence diagrams as accurately as possible. To achieve this, we use a detailed analysis of the EMV requirements and a detailed working knowledge of the structure of the various specifications contributing to a single transaction. We also use feedback from the formal model construction [A2], the derivation of test cases [A3], and the coding [A4].

The EMV specifications [O0.0] are the originating source of all the data in the process. Any data or assumption made in the emulator code or in the abstract model should be traceable back to its origin in the EMV specifications. The EMV specifications are structured so that the complete description for a single transaction protocol sequence is split across multiple sections and multiple books. The UML sequence diagrams [O1.1] collate these multiple sources into a single, easy-to-follow description of the transaction sequence. These transaction sequence diagrams are the initial stage of the iterative process used to create the concrete software implementation of the emulator [O4.1].

At each stage of the process, if additional information is found about the working of EMV, it is fed back into the UML transaction sequence diagrams [O1.1]. Feedback is essential to refine our understanding of the EMV specifications and document it. Each time the diagrams are updated, this drives the improvement of the emulator code [O4.1]. The completed emulator code is used in practical experiments [A5], running full or partial transaction protocol sequences against real bank cards.

### 2.2 UML Protocol Sequence Diagrams

The role of the UML protocol sequence diagrams is to collate information from multiple sources in the EMV specification, creating a single description of the payment protocol sequence (kernel). There are eight payment protocol sequences (kernels) in the EMV specification: one for contact transactions and seven for contactless transactions. There is a single UML diagram for each of the eight kernels. Each diagram is accompanied by a table of references detailing the EMV specification sections from which the diagram was derived. Each reference details the EMV book, section number, page number, and a section of text describing the functionality.

| Descriptive Text | References |
|------------------|------------|
| 7.1 Transaction Setup Data including PDOL list | If the Visa application is successfully selected, the card will return the data that the terminal requires to set up the transaction, including the PDOL list. The Processing Data Objects List (PDOL) is a list of data fields the card requires to complete the transaction, and the terminal returns the populated PDOL data in the Get Processing Options command. Typically, the data fields requested by the card will include the transaction amount, currency, date, country, and POS terminal capabilities (TTQ). | EMV v2.2 Book C-3 2.4.1 Initiate Application Processing, page 12; EMV v4.3 Book 3 10.1 Initiate Application Processing, page 91; EMV v2.2 Book B 3.5 Outcome Processing (3.5.1.5 Other), page 33 |

---

This optimized version of the text aims to enhance clarity, coherence, and professionalism. It maintains the original content while improving the structure and readability.