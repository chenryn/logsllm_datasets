title:SAX-PAC (Scalable And eXpressive PAcket Classification)
author:Kirill Kogan and
Sergey I. Nikolenko and
Ori Rottenstreich and
William Culhane and
Patrick Eugster
Neural Packet Classification
Eric Liang1, Hang Zhu2, Xin Jin2, Ion Stoica1
1UC Berkeley, 2Johns Hopkins University
PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL
9
1
0
2
b
e
F
7
2
]
I
N
.
s
c
[
1
v
9
1
3
0
1
.
2
0
9
1
:
v
i
X
r
a
ABSTRACT
Packet classification is a fundamental problem in computer
networking. This problem exposes a hard tradeoff between
the computation and state complexity, which makes it par-
ticularly challenging. To navigate this tradeoff, existing so-
lutions rely on complex hand-tuned heuristics, which are
brittle and hard to optimize.
In this paper, we propose a deep reinforcement learning
(RL) approach to solve the packet classification problem.
There are several characteristics that make this problem a
good fit for Deep RL. First, many existing solutions itera-
tively build a decision tree by splitting nodes in the tree.
Second, the effects of these actions (e.g., splitting nodes) can
only be evaluated once the entire tree is built. These two
characteristics are naturally captured by the ability of RL to
take actions that have sparse and delayed rewards. Third,
it is computationally efficient to generate data traces and
evaluate decision trees, which alleviate the notoriously high
sample complexity problem of Deep RL algorithms. Our so-
lution, NeuroCuts, uses succinct representations to encode
state and action space, and efficiently explore candidate de-
cision trees to optimize for a global objective. It produces
compact decision trees optimized for a specific set of rules
and a given performance metric, such as classification time,
memory footprint, or a combination of the two. Evaluation
on ClassBench shows that NeuroCuts outperforms existing
hand-crafted algorithms in classification time by 18% at the
median, and reduces both classification time and memory
footprint by up to 3×.
1 INTRODUCTION
Packet classification is one of the fundamental problems in
computer networking. The goal of packet classification is to
match a given packet to a rule from a set of rules, and to do
so while optimizing the classification time and/or memory
footprint. Packet classification is a key building block for
many network functionalities, including firewalls, access
control, traffic engineering, and network measurements [13,
30, 55]. As such, packet classifiers are widely deployed by
enterprises, cloud providers, ISPs, and IXPs [1, 30, 48].
Existing solutions for packet classification can be divided
into two broad categories. Solutions in the first category are
hardware-based. They leverage Ternary Content-Addressable
Memories (TCAMs) to store all rules in an associative mem-
ory, and then match a packet to all these rules in parallel [24].
1
As a result, TCAMs provide constant classification time, but
come with significant limitations. TCAMs are inherently
complex, and this complexity leads to high cost and power
consumption. This makes TCAM-based solutions prohibitive
for implementing large classifiers [55].
The solutions in the second category are software based.
These solutions build sophisticated in-memory data structures—
typically decision trees—to efficiently perform packet classi-
fication [30]. While these solutions are far more scalable than
TCAM-based solutions, they are slower, as the classification
operation needs to traverse the decision tree from the root
to the matching leaf.
Building efficient decision trees is difficult. Over the past
two decades, researchers have proposed a large number of
decision tree based solutions for packet classification [13,
30, 41, 47, 55]. However, despite the many years of research,
these solutions have two major limitations. First, they rely
on hand-tuned heuristics to build the tree. Examples include
maximizing split entropy [13], balancing splits with custom
space measures [13], special handling for wildcard rules [47],
and so on. This makes them hard to understand and optimize
over different sets of rules. If a heuristic is too general, it
cannot take advantage of the characteristics of a particular
set of rules. If a heuristic is designed for a specific set of rules,
it typically does not achieve good results on another set of
rules with different characteristics.
Second, these heuristics do not explicitly optimize for a
given objective (e.g., tree depth). They make decisions based
on information (e.g., the difference between the number of
rules in the children, the number of distinct ranges in each
dimension) that is only loosely related to the global objective.
As such, their performance can be far from optimal.
In this paper, we propose a learning approach to packet
classification. Our approach has the potential to address
the limitations of the existing hand-tuned heuristics. In par-
ticular, our approach learns to optimize packet classifica-
tion for a given set of rules and objective, can easily in-
corporate pre-engineered heuristics to leverage their do-
main knowledge, and does so with little human involve-
ment. The recent successes of deep learning in solving noto-
riously hard problems, such as image recognition [23] and
language translation [51], have inspired many practition-
ers and researchers to apply deep learning, in particular,
and machine learning, in general, to systems and network-
ing problems [4, 6, 16, 34, 35, 54, 62, 64, 65]. While in some
of these cases there are legitimate concerns about whether
machine learning is the right solution for the problem at
hand, we believe that deep learning is a good fit for our prob-
lem. This is notable since, when an efficient formulation is
found, learning-based solutions have often outperformed
hand-crafted alternatives [22, 37, 44].
There are two general approaches to apply learning to
packet classification. The first is to replace the decision tree
with a neural network, which given a packet will output the
rule matching that packet. Unfortunately, while appealing,
this end-to-end solution has a major drawback: it does not
guarantee the correct rule is always matched. While this
might be acceptable for some applications such as traffic
engineering, it is not acceptable for others, such as access
control. Another issue is that large rule sets will require
correspondingly large neural network models, which can
be expensive to evaluate without accelerators such as GPUs.
The second approach, and the one we take in this paper, is to
use deep learning to build a decision tree. Recent work has
applied deep learning to optimize decision trees for machine
learning problems [21, 39, 59]. These solutions, however, are
designed for machine learning settings that are different
than packet classification, and aim to maximize accuracy.
In contrast, decision trees for packet classification provide
perfect accuracy by construction, and the goal is to minimize
classification time and memory footprint.
Our solution uses deep reinforcement learning (RL) to
build efficient decision trees. There are three characteristics
that makes RL a particularly good fit for packet classification.
First, the natural solution to build a decision tree is to start
with one node and recursively split (cut) it. Unfortunately,
this kind of approach does not have a greedy solution. When
making a decision to cut a node, we do not know whether
that decision was a good one (i.e., whether it leads to an
efficient tree) before we finish building the actual tree. RL
naturally captures this characteristic as it does not assume
that the impact of a given decision on the performance objec-
tive is known immediately. Second, unlike existing heuristics
which take actions that are only loosely related to the per-
formance objective, the explicit goal of an RL algorithm is to
directly maximize the performance objective. Third, unlike
other RL domains such as as robotics, for our problem it is
possible to evaluate an RL model quickly (i.e., a few seconds
of CPU time). This alleviates one of the main drawbacks of
RL algorithms: the non-trivial learning time due to the need
to evaluate a large number of models to find a good solution.
By being able to evaluate each model quickly (and, as we will
see, in parallel) we significantly reduce the learning time.
To this end, we design NeuroCuts, a deep RL solution for
packet classification that learns to build efficient decision
trees. There are three technical challenges to formulate this
problem as an RL problem. First, the tree is growing during
Figure 1: A packet classifier example. Real-world clas-
sifiers can have 100K rules or more.
the execution of the algorithm, as existing nodes are split.
This makes it very difficult to encode the decision tree, as
RL algorithms require a fixed size input. We address this
problem by noting that the decision of how to split a node in
the tree depends only on the node itself; it does not depend
on the rest of the tree. As such, we do not need to encode the
entire tree; we only need to encode the current node. The
second challenge is in computing dense rewards to accelerate
the learning process; here we exploit the branching structure
of the problem to provide denser feedback for tree size and
depth. The final challenge is that training for very large sets
of rules can take a long time. To address this, we leverage
RLlib [31], a distributed RL library.
In summary, we make the following contributions.
fit for reinforcement learning (RL).
sification that learns to build efficient decision trees.
• We show that the packet classification problem is a good
• We present NeuroCuts, a deep RL solution for packet clas-
• We show that NeuroCuts outperforms state-of-the-art so-
lutions, improving classification time by 18% at the median
and reducing both time and memory usage by up to 3×.
The code for NeuroCuts is open source and is available at:
https://github.com/xinjin/neurocuts-code
2 BACKGROUND
In this section, we provide background on the packet classi-
fication problem, and summarize the key ideas behind the
decision tree based solutions to solve this problem.
2.1 Packet Classification
A packet classifier contains a list of rules. Each rule speci-
fies a pattern on multiple fields in the packet header. Typi-
cally, these fields include source and destination IP addresses,
source and destination port numbers, and protocol type.
The rule’s pattern specifies which packets match the rule.
Matching conditions include prefix based matching (e.g.,
for IP addresses), range based matching (e.g., for port num-
bers), and exact matching (e.g., for protocol type). A packet
matches a rule if each field in the packet header satisfies
the matching condition of the corresponding field in the
rule, e.g., the packet’s source/destination IP address matches
the prefix of the source/destination address in the rule, the
packet’s source/destination port number is contained in
2
PrioritySrcIPDstIPSrcPortDstPortProtocol210.0.0.010.0.0.0/16***1**[0,1023][0,1023]TCP0*****Neural Packet Classification
the source/destination range specified in the rule, and the
packet’s protocol type matches the rule’s protocol type.
Figure 1 shows a packet classifier with three rules. The
first rule matches all packets with source address 10.0.0.1 and
the destination addresses sharing prefix 10.0.0.0/16. Other
fields are unspecified (i.e., they are ⋆) meaning that the rule
matches any value in these fields. The second rule matches all
TCP packets with source and destination ports in the range
[0, 1023], irrespective of IP addresses (as they are ⋆). Finally,
the third rule is a default rule that matches all packets. This
guarantees that any packet matches at least one rule.
Since rules can overlap, it is possible for a packet to match
multiple rules. To resolve this ambiguity, each rule is assigned
a priority. A packet is then matched to the highest priority
rule. For example, packet (10.0.0.0, 10.0.0.1, 0, 0, 6) matches all
the three rules of the packet classifier in Figure 1. However,
since the first rule has the highest priority, we match the
packet to the first rule only.
Figure 2: Node cutting.
2.2 Decision Tree Algorithms
Packet classification is similar to the point location problem
in a multi-dimensional geometric space: the fields in the
packet header we are doing classification on (e.g., source
and destination IP addresses, source and destination port
numbers, and protocol number) represent the dimensions in
the geometric space, a packet is represented as a point in this
space, and a rule as a hypercube. Unfortunately, the point
location problem exhibits a hard tradeoff between time and
space complexities [14].
The packet classification problem is then equivalent to
finding all hypercubes that contains the point corresponding
to a given packet. In particular, in a d-dimensional geometric
space with n non-overlapping hypercubes and when d > 3,
this problem has either (i) a lower bound of O(loд n) time
and O(nd) space, or (ii) a lower bound of O(loдd−1
n) time
and O(n) space [14]. The packet classification problem allows
the hypercubes (i.e., rules) to overlap, and thus is at least as
hard as the point location problem [14]. In other words, if we
want logarithmic computation time, we need space that is
exponential in the number of dimensions (fields), and if we
want linear space, the computation time will be exponential
in the logarithm of the number of rules. Given that for packet
classification d = 5, neither of these choices is attractive.
Next, we discuss two common techniques employed by
existing solutions to build decision trees for packet classifi-
cation: node cutting and rule partition.
Node cutting. Most existing solutions for packet classifi-
cation aim to build a decision tree that exhibits low classi-