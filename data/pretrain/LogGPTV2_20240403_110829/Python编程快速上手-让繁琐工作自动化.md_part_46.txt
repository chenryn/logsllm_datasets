总的来说，该程序必须做到以下几点：
• 找出当前工作目录中的所有CSV文件。
• 读取每个文件的全部内容。
• 跳过第一行，将内容写入一个新的CSV文件。
在代码层面上，这意味着该程序需要做到以下几点：
• 循环遍历从os.listdir()得到的文件列表，跳过非CSV文件。
• 创建一个CSV Reader对象，读取该文件的内容，利用line_num属性确定要跳
过哪一行。
• 创建一个CSV Writer对象，将读入的数据写入新文件。
针对这个项目，打开一个新的文件编辑器窗口，并保存为removeCsvHeader.py。
第1步：循环遍历每个CSV 文件
程序需要做的第一件事情，就是循环遍历当前工作目录中所有 CSV 文件名的
列表。让removeCsvHeader.py看起来像这样：
#! python3
# removeCsvHeader.py - Removes the header from all CSV files in the current
# working directory.
import csv, os
os.makedirs('headerRemoved', exist_ok=True)
# Loop through every file in the current working directory.
for csvFilename in os.listdir('.'):
if not csvFilename.endswith('.csv'):
 continue # skip non-csv files
print('Removing header from ' + csvFilename + '...')
# TODO: Read the CSV file in (skipping first row).
# TODO: Write out the CSV file.
os.makedirs()调用将创建headerRemoved文件夹，所有的无表头的CSV文件将
写入该文件夹。针对 os.listdir('.')进行 for 循环完成了一部分任务，但这会遍历工作
目录中的所有文件，所以需要在循环开始处添加一些代码，跳过扩展名不是.csv 的
文件。如果遇到非CSV文件，continue语句让循环转向下一个文件名。
为了让程序运行时有一些输出，打印出一条消息说明程序在处理哪个 CSV 文
件。然后，添加一些TODO注释，说明程序的其余部分应该做什么。
第2步：读入CSV 文件
该程序不会从原来的CSV文件删除第一行。但是，它会创建新的CSV文件副本，
不包含第一行。因为副本的文件名与原来的文件名一样，所以副本会覆盖原来的文件。
270 Python编程快速上手——让繁琐工作自动化
该程序需要一种方法，来知道它的循环当前是否在处理第一行。为
removeCsvHeader.py添加以下代码。
#! python3
# removeCsvHeader.py - Removes the header from all CSV files in the current
# working directory.
--snip--
# Read the CSV file in (skipping first row).
csvRows = []
csvFileObj = open(csvFilename)
readerObj = csv.reader(csvFileObj)
for row in readerObj:
if readerObj.line_num == 1:
continue # skip first row
csvRows.append(row)
csvFileObj.close()
# TODO: Write out the CSV file.
Reader对象的line_num属性可以用来确定当前读入的是CSV文件的哪一行。
另一个for循环会遍历CSV Reader对象返回所有行，除了第一行，所有行都会添加
到csvRows。
在for循环遍历每一行时，代码检查reader.line_num是否设为1。如果是这样，
它执行continue，转向下一行，不将它添加到csvRows中。对于之后的每一行，条
件永远是False，该行将添加到csvRows中。
第3步：写入CSV 文件，没有第一行
现在csvRows包含了除第一行的所有行，该列表需要写入headerRemoved文件
夹中的一个CSV文件。将以下代码添加到removeCsvHeader.py：
#! python3
# removeCsvHeader.py - Removes the header from all CSV files in the current
# working directory.
--snip--
# Loop through every file in the current working directory.
 for csvFilename in os.listdir('.'):
if not csvFilename.endswith('.csv'):
continue # skip non-CSV files
--snip--
# Write out the CSV file.
csvFileObj = open(os.path.join('headerRemoved', csvFilename), 'w',
newline='')
csvWriter = csv.writer(csvFileObj)
for row in csvRows:
csvWriter.writerow(row)
csvFileObj.close()
CSV Writer对象利用csvFilename（这也是我们在CSV Reader中使用的文件名），
第14章 处理CSV文件和JSON数据 271
将列表写入headerRemoved中的一个CSV文件。这将覆盖原来的文件。
创建Writer对象后，我们循环遍历存储在csvRows中的子列表，将每个子列表
写入该文件。
这段代码执行后，外层 for 循环将循环到 os.listdir('.')中的下一个文件名。循
环结束时，程序就结束了。
为了测试你的程序，从http://nostarch.com/automatestuff/下载removeCsvHeader.zip，
将它解压缩到一个文件夹。在该文件夹中运行removeCsvHeader.py程序。输出将是
这样的：
Removing header from NAICS_data_1048.csv...
Removing header from NAICS_data_1218.csv...
--snip--
Removing header from NAICS_data_9834.csv...
Removing header from NAICS_data_9986.csv...
这个程序应该在每次从CSV文件中删除第一行时，打印一个文件名。
第4步：类似程序的想法
针对 CSV 文件写的程序类似于针对 Excel 文件写的程序，因为它们都是电子表
格文件。你可以编程完成以下任务：
• 在一个CSV文件的不同行，或多个CSV文件之间比较数据。
• 从CSV文件拷贝特定的数据到Excel文件，或反过来。
• 检查CSV文件中无效的数据或格式错误，并向用户提醒这些错误。
• 从CSV文件读取数据，作为Python程序的输入。
14.3 JSON 和 API
JavaScript 对象表示法是一种流行的方式，将数据格式化，成为人可读的字符
串。JSON是JavaScript程序编写数据结构的原生方式，通常类似于Python的pprint()
函数产生的结果。不需要了解JavaScript，也能处理JSON格式的数据。
下面是JSON格式数据的一个例子：
{"name": "Zophie", "isCat": true,
"miceCaught": 0, "napsTaken": 37.5,
"felineIQ": null}
了解JSON是很有用，因为很多网站都提供JSON格式的内容，作为程序与网
站交互的方式。这就是所谓的提供“应用程序编程接口（API）”。访问 API 和通过
URL访问任何其他网页是一样的。不同的是，API返回的数据是针对机器格式化的
（例如用JSON），API不是人容易阅读的。
许多网站用JSON格式提供数据。Facebook、Twitter、Yahoo、Google、Tumblr、
Wikipedia、Flickr、Data.gov、Reddit、IMDb、Rotten Tomatoes、LinkedIn和许多其
272 Python编程快速上手——让繁琐工作自动化
他流行的网站，都提供API让程序使用。有些网站需要注册，这几乎都是免费的。
你必须找到文档，了解程序需要请求什么 URL 才能获得想要的数据，以及返回的
JSON数据结构的一般格式。这些文档应在提供API的网站上提供，如果它们有“开
发者”页面，就去那里找找。
利用API，可以编程完成下列任务：
• 从网站抓取原始数据（访问API通常比下载网页并用Beautiful Soup解析HTML
更方便）。
• 自动从一个社交网络账户下载新的帖子，并发布到另一个账户。例如，可以把
tumblr的帖子上传到Facebook。
• 从IMDb、Rotten Tomatoes和维基百科提取数据，放到计算机的一个文本文件
中，为你个人的电影收藏创建一个“电影百科全书”。
可以在http://nostarch.com/automatestuff/的资源中看到JSON API的一些例子。
14.4 json 模块
Python的json模块处理了JSON数据字符串和Python值之间转换的所有细节，
得到了 json.loads()和 json.dumps()函数。JSON 不能存储每一种 Python 值，它只能
包含以下数据类型的值：字符串、整型、浮点型、布尔型、列表、字典和NoneType。
JSON不能表示Python特有的对象，如File对象、CSV Reader或Writer对象、Regex
对象或Selenium WebElement对象。
14.4.1 用loads()函数读取JSON
要将包含JSON数据的字符串转换为Python的值，就将它传递给json.loads()函数
（这个名字的意思是“load string”，而不是“loads”）。在交互式环境中输入以下代码：
>>> stringOfJsonData = '{"name": "Zophie", "isCat": true, "miceCaught": 0,
"felineIQ": null}'
>>> import json
>>> jsonDataAsPythonValue = json.loads(stringOfJsonData)
>>> jsonDataAsPythonValue
{'isCat': True, 'miceCaught': 0, 'name': 'Zophie', 'felineIQ': None}
导入json模块后，就可以调用loads()，向它传入一个JSON数据字符串。请注
意，JSON字符串总是用双引号。它将该数据返回为一个Python字典。Python字典是
没有顺序的，所以如果打印jsonDataAsPythonValue，键-值对可能以不同的顺序出现。
14.4.2 用dumps函数写出JSON
json.dumps()函数（它表示“dump string”，而不是 “dumps”）将一个 Python值
转换成JSON格式的数据字符串。在交互式环境中输入以下代码：
第14章 处理CSV文件和JSON数据 273
>>> pythonValue = {'isCat': True, 'miceCaught': 0, 'name': 'Zophie',
'felineIQ': None}
>>> import json
>>> stringOfJsonData = json.dumps(pythonValue)
>>> stringOfJsonData
'{"isCat": true, "felineIQ": null, "miceCaught": 0, "name": "Zophie" }'
该值只能是以下基本Python数据类型之一：字典、列表、整型、浮点型、字符
串、布尔型或None。
14.5 项目：取得当前的天气数据
检查天气似乎相当简单：打开Web浏览器，点击地址栏，输入天气网站的URL
（或搜索一个，然后点击链接），等待页面加载，跳过所有的广告等。
其实，如果有一个程序，下载今后几天的天气预报，并以纯文本打印出来，就可
以跳过很多无聊的步骤。该程序利用第11章介绍的requests模块，从网站下载数据。
总的来说，该程序将执行以下操作：
• 从命令行读取请求的位置。
• 从OpenWeatherMap.org下载JSON天气数据。
• 将JSON数据字符串转换成Python的数据结构。
• 打印今天和未来两天的天气。
因此，代码需要完成以下任务：
• 连接sys.argv中的字符串，得到位置。
• 调用requests.get()，下载天气数据。
• 调用json.loads()，将JSON数据转换为Python数据结构。
• 打印天气预报。
针对这个项目，打开一个新的文件编辑器窗口，并保存为quickWeather.py。
第1步：从命令行参数获取位置
该程序的输入来自命令行。让quickWeather.py看起来像这样：
#! python3
# quickWeather.py - Prints the weather for a location from the command line.
import json, requests, sys
# Compute location from command line arguments.
if len(sys.argv) &cnt=3，其中
是想知道天气的城市。将以下代码添加到quickWeather.py中。
#! python3
# quickWeather.py - Prints the weather for a location from the command line.
--snip--
# Download the JSON data from OpenWeatherMap.org's API.
url ='http://api.openweathermap.org/data/2.5/forecast/daily?q=%s&cnt=3' % (location)
response = requests.get(url)
response.raise_for_status()
# TODO: Load JSON data into a Python variable.
我们从命令行参数中得到了 location。为了生成要访问的网址，我们利用%s占
位符，将location中保存的字符串插入URL字符串的那个位置。结果保存在url中，并
将 url 传入 requests.get()。requests.get()调用返回一个 Response 对象，它可以通过调用
raise_for_status()来检查错误。如果不发生异常，下载的文本将保存在response.text中。
第3步：加载JSON 数据并打印天气
response.text 成员变量保存了一个 JSON 格式数据的大字符串。要将它转换为
Python值，就调用json.loads()函数。JSON数据会像这样：
{'city': {'coord': {'lat': 37.7771, 'lon': -122.42},