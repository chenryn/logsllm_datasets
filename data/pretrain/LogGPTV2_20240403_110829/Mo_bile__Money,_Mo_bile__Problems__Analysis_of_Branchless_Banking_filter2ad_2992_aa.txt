title:Mo(bile) Money, Mo(bile) Problems: Analysis of Branchless Banking
Applications in the Developing World
author:Bradley Reaves and
Nolen Scaife and
Adam Bates and
Patrick Traynor and
Kevin R. B. Butler
Mo(bile) Money, Mo(bile) Problems:  
Analysis of Branchless Banking Applications 
in the Developing World
Bradley Reaves, Nolen Scaife, Adam Bates, Patrick Traynor,  
and Kevin R.B. Butler, University of Florida
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/reaves
This paper is included in the Proceedings of the 
24th USENIX Security Symposium
August 12–14, 2015 • Washington, D.C.
ISBN  978-1-939133-11-3
Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXMo(bile) Money, Mo(bile) Problems:
Analysis of Branchless Banking Applications in the Developing World
Bradley Reaves
University of Florida
reaves@uﬂ.edu
Nolen Scaife
University of Florida
scaife@uﬂ.edu
Adam Bates
University of Florida
adammbates@uﬂ.edu
Patrick Traynor
University of Florida
traynor@cise.uﬂ.edu
Abstract
Mobile money, also known as branchless banking, brings
much-needed ﬁnancial services to the unbanked in the
developing world. Leveraging ubiquitous cellular net-
works, these services are now being deployed as smart
phone apps, providing an electronic payment infrastruc-
ture where alternatives such as credit cards generally do
not exist. Although widely marketed as a more secure
option to cash, these applications are often not subject
to the traditional regulations applied in the ﬁnancial sec-
tor, leaving doubt as to the veracity of such claims. In
this paper, we evaluate these claims and perform the ﬁrst
in-depth measurement analysis of branchless banking ap-
plications. We ﬁrst perform an automated analysis of all
46 known Android mobile money apps across the 246
known mobile money providers and demonstrate that au-
tomated analysis fails to provide reliable insights. We
subsequently perform comprehensive manual teardown
of the registration, login, and transaction procedures of
a diverse 15% of these apps. We uncover pervasive
and systemic vulnerabilities spanning botched certiﬁca-
tion validation, do-it-yourself cryptography, and myriad
other forms of information leakage that allow an attacker
to impersonate legitimate users, modify transactions in
ﬂight, and steal ﬁnancial records. These ﬁndings conﬁrm
that the majority of these apps fail to provide the pro-
tections needed by ﬁnancial services. Finally, through
inspection of providers’ terms of service, we also dis-
cover that liability for these problems unfairly rests on
the shoulders of the customer, threatening to erode trust
in branchless banking and hinder efforts for global ﬁnan-
cial inclusion.
1
Introduction
The majority of modern commerce relies on cashless
payment systems. Developed economies depend on the
near instantaneous movement of money, often across
Kevin R.B. Butler
University of Florida
butler@uﬂ.edu
great distances, in order to fuel the engines of indus-
try. These rapid, regular, and massive exchanges have
created signiﬁcant opportunities for employment and
progress, propelling forward growth and prosperity in
participating countries. Unfortunately, not all economies
have access to the beneﬁts of such systems and through-
out much of the developing world, physical currency re-
mains the de facto means of exchange.
Mobile money, also known as branchless banking, ap-
plications attempt to ﬁll this void. Generally deployed
by companies outside of the traditional ﬁnancial services
sector (e.g., telecommunications providers), branchless
banking systems rely on the near ubiquitous deploy-
ment of cellular networks and mobile devices around
the world. Customers can not only deposit their physi-
cal currency through a range of independent vendors, but
can also perform direct peer-to-peer payments and con-
vert credits from such transactions back into cash. Over
the past decade, these systems have helped to raise the
standard of living and have revolutionized the way in
which money is used in developing economies. Over
30% of the GDP in many such nations can now be at-
tributed to branchless banking applications [39], many
of which now perform more transactions per month than
traditional payment processors, including PayPal [36].
One of the biggest perceived advantages of these ap-
plications is security. Whereas carrying large amounts
of currency long distances can be dangerous to physi-
cal security, branchless banking applications can allow
for commercial transactions to occur without the risk of
theft. Accordingly, these systems are marketed as a se-
cure new means of enabling commerce. Unfortunately,
the strength of such claims from a technical perspective
has not been publicly investigated or veriﬁed. Such an
analysis is therefore critical to the continued growth of
branchless banking systems.
In this paper, we perform the ﬁrst comprehensive anal-
ysis of branchless banking applications. Through these
efforts, we make the following contributions:
USENIX Association  
24th USENIX Security Symposium  17
1
18  24th USENIX Security Symposium 
USENIX Association
•AnalysisofBranchlessBankingApplications:Weperformtheﬁrstcomprehensivesecurityanal-ysisofbranchlessbankingapplications.First,weuseawell-knownautomatedanalysistoolonall46knownAndroidmobilemoneyappsacrossall246knownmobilemoneysystems.Wethenmethod-icallyselectsevenAndroid-basedbranchlessbank-ingapplicationsfromBrazil,India,Indonesia,Thai-land,andthePhillipineswithacombineduserbaseofmillions.Wethendevelopandexecuteacom-prehensive,reproduciblemethodologyforanalyz-ingtheentireapplicationcommunicationﬂow.Insodoing,wecreatetheﬁrstsnapshotoftheglobalstateofsecurityforsuchapplications.•IdentiﬁcationsofSystemicVulnerabilities:Ouranalysisdiscoverspervasiveweaknessesandshowsthatsixofthesevenapplicationsbroadlyfailtopre-servetheintegrityoftheirtransactions.Wethencompareourresultstothoseprovidedthroughauto-matedanalysisandshowthatcurrenttoolsdonotre-liablyindicatesevere,systemicsecurityfaults.Ac-cordingly,neitherusersnorproviderscanreasonabouttheveracityofrequestsbythemajorityofthesesystems.•AnalysisofLiability:Wecombineourtechnicalﬁndingswiththeassignmentofliabilitydescribedwithineveryapplication’stermsofservice,andde-terminethatusersoftheseapplicationshavenore-courseforfraudulentactivity.Therefore,itisourbeliefthattheseapplicationscreatesigniﬁcantﬁ-nancialdangersfortheirusers.Theremainderofthispaperisorganizedasfollows:Section2providesbackgroundinformationonbranch-lessbankinganddescribeshowtheseapplicationscom-paretoothermobilepaymentsystems;Section3detailsourmethodologyandanalysisarchitecture;Section4presentsourﬁndingsandcategorizesthemintermsoftheCWEclassiﬁcationsystem;Section5deliversdiscussionandrecommendationsfortechnicalremediation;Sec-tion6offersananalysisoftheTermsofServiceandtheassignmentofliability;Section7discussesrelevantre-latedwork;andSection8providesconcludingremarks.2MobileMoneyintheDevelopingWorldThelackofaccesstobasicﬁnancialservicesisacon-tributingfactortopovertythroughouttheworld[17].Millionslivewithoutaccesstobasicbankingservices,suchasvaluestorageandelectronicpayments,simplybecausetheylivehoursordaysawayfromthenearestbankbranch.Lackingthisaccessmakesitmoredifﬁcultforthepoortosaveforfuturegoalsorprepareforfuture(a)mPAY(b)GCash(c)OxigenWalletFigure1:Mobilemoneyappsareheavilymarketedasbe-ingsafetouse.Thesescreenshotsfromproviders’mar-ketingmaterialsshowtheextentoftheseclaims.setbacks,conductcommerceremotely,orprotectmoneyagainstlossortheft.Accordingly,providingbankingthroughmobilephonenetworksoffersthepromiseofdramaticallyimprovingthelivesoftheworld’spoor.TheM-PesasysteminKenya[21]pioneeredthemo-bilemoneyservicemodel,inwhichagents(typicallylo-calshopkeepers)actasintermediariesfordeposits,with-drawals,andsometimesregistration.BothagentsandusersinteractwiththemobilemoneysystemusingSMSoraspecialapplicationmenuenabledbycodeonaSIMcard,enablinguserstosendmoney,makebillpayments,topupairtime,andcheckaccountbalances.ThekeyfeatureofM-Pesaandothersystemsisthattheirusedoesnotrequirehavingapreviouslyestablishedrela-tionshipwithabank.Ineffect,mobilemoneysystemsarebootstrappinganalternativebankinginfrastructureinareaswheretraditionalbankingisimpractical,uneco-nomicduetominimumbalances,orsimplynon-existent.M-Pesahasnotyetreleasedamobileapp,butisar-guablythemostimpactfulmobilemoneysystemandhighlightsthepromiseofbranchlessbankingfordevel-opingeconomies.Mobilemoneyhasbecomeubiquitousandessential.M-Pesaboastsmorethan18.2millionregistrationsinacountryof43.2million[37].InKenyaandeightothercountries,therearemoremobilemoneyaccountsthanbankaccounts.AsofAugust2014,therewereatotalof246mobilemoneyservicesin88countriesservingatotalofover203millionregisteredaccounts,continu-ingatrend[49]upfrom219servicesinDecember2013.Notethatthesenumbersexplicitlyexcludeservicesthataresimplyamobileinterfaceforexistingbankingsys-tems.Financialsecurity,andtrustinbranchlessbank-ingsystems,dependsontheassurancesthatthesesys-temsaresecureagainstfraudandattack.Severaloftheappsthatwestudyofferstrongassurancesofsecurityintheirpromotionalmaterials.Figure1providesexamples2Mobile 
Payments
Mobile
Wallets
PayPal
SquareCash
Starbucks
Branchless
Banking
GCash
Airtel Money
mPay
Zuum
MOM
mCoin
Google Wallet
Apple Pay
CurrentC
Oxigen Wallet
Figure 2: While Mobile Money (Branchless Banking)
and Mobile Payments share signiﬁcant overlapping func-
tionality, the key differences are the communications
methods the systems use and that mobile money systems
do not rely on existing banking infrastructure.
of these promises. This promise of ﬁnancial security is
even reﬂected in the M-Pesa advertising slogan “Relax,
you have got M-Pesa.” [52]. However, the veracity of
these claims is unknown.
2.1 Comparison to Other Services
Mobile money is closely related to other technologies.
Figure 2 presents a Venn diagram indicating how repre-
sentative mobile apps fall into the categories of mobile
payments, mobile wallets, and branchless banking sys-
tems. Most mobile ﬁnance systems share the ability to
make payments to other individuals or merchants. In our
study, the mobile apps for these ﬁnance systems are dis-
tinguished as follows:
• Mobile Payment describes systems that allow a mo-
bile device to make a payment to an individual or mer-
chant using traditional banking infrastructure. Exam-
ple systems include PayPal, Google Wallet, Apple Pay,
Softpay (formerly ISIS), CurrentC, and Square Cash.
These systems acting as an intermediary for an exist-
ing credit card or bank account.
• Mobile Wallets store multiple payment credentials
for either mobile money or mobile payment systems
and/or facilitate promotional offers, discounts, or loy-
alty programs. Many mobile money systems (like Ox-
igen Wallet, analyzed in this paper) and mobile pay-
ment systems (like Google Wallet and Apple Pay) are
also mobile wallets.
• Branchless Banking is designed around policies that
facilitate easy inclusion. Enrollment often simply re-
quires just a phone number or national ID number be
entered into the mobile money system. These systems
have no minimum balances and low transaction fees,
and feature reduced “Know Your Customer”1 regula-
tions [51]. Another key feature of branchless banking
systems is that in many cases they do not rely on In-
ternet (IP) connectivity exclusively, but also use SMS,
Unstructured Supplementary Service Data (USSD), or
cellular voice (via Interactive Voice Response, or IVR)
to conduct transactions. While methods for protect-
ing data conﬁdentiality and integrity over IP are well
established, the channel cryptography used for USSD
and SMS has been known to be vulnerable for quite
some time [56].
3 App Selection and Analysis
In this section, we discuss how apps were chosen for
analysis and how the analysis was conducted.
3.1 Mallodroid Analysis
Using data from the GSMA Mobile Money Tracker [6],
we identiﬁed a total of 47 Android mobile money apps
across 28 countries. We ﬁrst ran an automated analysis
on all 47 of these apps using Mallodroid [28], a static
analysis tool for detecting SSL/TLS vulnerabilities, in
order to establish a baseline. Table 3 in the appendix pro-
vides a comprehensive list of the known Android mobile
money applications and their static analysis results. Mal-
lodroid detects vulnerabilities in 24 apps, but its analysis
only provides a basic indicator of problematic code; it
does not, as we show, exclude dead code or detect major
ﬂaws in design. For example, it cannot guarantee that
sensitive ﬂows actually use SSL/TLS. It similarly can-
not detect ecosystem vulnerabilities, including the use of
deprecated, vulnerable, or incorrect SSL/TLS conﬁgu-
rations on remote servers. Finally, the absence of SS-
L/TLS does not necessarily condemn an application, as
applications can still operate securely using other proto-
cols. Accordingly, such automated analysis provides an
incomplete picture at best, and at worst an incorrect one.
This is a limitation of all automatic approaches, not just
Mallodroid.
In the original Mallodroid paper, its authors performed
a manual analysis on 100 of the 1,074 (9.3%) apps their
tool detected to verify its ﬁndings; however, only 41%
of those apps were vulnerable to SSL/TLS man-in-the-
middle attacks. It is therefore imperative to further ver-
ify the ﬁndings of this tool to remove false positives and
false negatives.
1“Know Your Customer” (KYC), “Anti-Money Laundering”
(AML), and “Combating Financing of Terrorism” policies are regu-
lations used throughout the world to frustrate ﬁnancial crime activity.
USENIX Association  
24th USENIX Security Symposium  19
3
Figure 3: The mobile money applications we analyzed were developed for a diverse range of countries. In total, we
performed an initial analysis on applications from 28 countries representing up to approximately 1.2 million users
based on market download counts. From this, we selected 7 applications to fully analyze from 5 countries. Each black
star represents these countries, and the white stars represent the remainder of the mobile money systems.
3.2 App Selection
Given the above observations, we selected seven mobile
money apps for more extensive analysis. These seven
apps represent 15% of the total applications and were se-
lected to reﬂect diversity across markets, providers, fea-
tures, download counts, and static analysis results. Col-
lectively, these apps serve millions of users. Figure 3
shows the geographic diversity across all of the mobile
money apps we observed and those we selected for man-
ual analysis.
We focus on Android applications in this paper be-
cause Android has the largest market share world-
wide [43], and far more mobile money applications are
available for Android than iOS. However, while we can-
not make claims about iOS apps that we did not analyze,
we do note that all errors disclosed in Section 4 are pos-
sible in iOS and are not speciﬁc to Android.
3.3 Manual Analysis Process
Our analysis is the ﬁrst of its kind to perform an in-depth
analysis of the protocols used by these applications as
well as inspect both ends of the SSL/TLS sessions they
may use. Each layer of the communication builds on the
last; any error in implementation potentially affects the
security guarantees of all others. This holistic view of
the entire app communication protocol at multiple layers
offers a deep view of the fragility of these systems.
In order to accomplish this, our analysis consisted
of two phases. The ﬁrst phase provided an overview
of the functionality provided by the app; this included
analyzing the application’s code and manifest and test-
ing the quality of any SSL/TLS implementations on re-
mote servers. Where possible, we obtained an in-country
phone number and created an account for the mobile
money system. The overview phase was followed by a
reverse engineering phase involving manual analysis of
the code. For those apps that we possessed accounts, we
also executed the app and veriﬁed any ﬁndings we found
in the code.
Our main interest is in verifying the integrity of these
sensitive ﬁnancial apps. While privacy issues like IMEI
or location leakage are concerning [26], we focus on
communications between the app and the IP or SMS
backend systems, where an adversary can observe, mod-
ify, and/or generate transactions.
Phase 1: Inspection
In the inspection phase, we determined the basic func-
tionality and structure of the app in order to guide later
analysis. Figure 4 shows the overall toolchain for ana-
lyzing the apps along with each respective output.
The ﬁrst step of the analysis was to obtain the applica-
tion manifest using apktool [2]. We then used an sim-
ple script to generate a report identifying each app com-
ponent (i.e., activities, services, content providers, and
20  24th USENIX Security Symposium 
USENIX Association
4
Processes
apktool
JEB
App
baksmali
Unzip
Execution
Custom 
Analysis Scripts
Discover native 
code
Result
Manifest
Java
Dalvik 
Bytecode,
Library usage
Layouts, etc.
Visual 
Inspection
Figure 4: A visualization of the tools used for analyzing
the mobile money apps.
broadcast receivers) as well as the permissions declared
and deﬁned by the app. This acted as a high-level proxy
for understanding the capabilities of the app. With this
report, we could note interesting or dangerous permis-
sions (e.g., WRITE EXTERNAL STORAGE can leak sen-
sitive information) and which activities are exported to
other apps (which can be used to bypass authentication).
The second step of this phase was an automated review
of the Dalvik bytecode. We used the Baksmali [10]
tool to disassemble the application dex ﬁle. While dis-
assembly provides the Dalvik bytecode, this alone does
not assist in reasoning about the protocols, data ﬂows,
and behavior of an application. Further inspection is still
required to understand the semantic context and interac-
tions of classes and functions.
After obtaining the Dalvik bytecode, we used a
script to identify classes that use interesting libraries;
these included networking libraries, cryptography li-
braries (including java.security and javax.crypto
and Bouncy Castle [11]), well-known advertising li-
braries (as identiﬁed by Chen et al. [18]), and libraries
that can be used to evade security analysis (like Java
ClassLoaders). References to these libraries are found
directly in the Dalvik assembly with regular expressions.
The third step of the overview was to manually take note
of all packages included in the app (external libraries
like social media libraries, user interface code, HTTP li-
braries, etc.).
While analyzing the application’s code can provide
deep insight into the application’s behavior and clien-
t/server protocols, it does not provide any indication of
the security of the connection as it is negotiated by the
server. For example, SSL/TLS servers can offer vulner-
able versions of the protocol, weak signature algorithms,
and/or expired or invalid certiﬁcates. Therefore, the ﬁ-
nal step of the analysis was to check each application’s
SSL endpoints using the Qualys SSL Server Test [50].2