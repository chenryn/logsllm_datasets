    0x7f49f003a860:0x0000100000007f490xef8b800000000000
    0x7f49f003a870:0x0000100000007f490xe43ce00000000000
    0x7f49f003a880:0x0000100000007f490xe369c00000000000
随后我们第二轮再次命中memcpy函数，注意一下源缓冲区的值。
    gdb-peda$ si
    [----------------------------------registers-----------------------------------]
    RAX: 0x5b4 
    RBX: 0x5b4 
    RCX: 0x7f49f003a846 --> 0x9000000000000000 
    RDX: 0x5b4 
    RSI: 0x7f49f003b3ae --> 0x7f49cc0de0000000 
    RDI: 0x7f49f003a846 --> 0x9000000000000000 
    EFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)
    [-------------------------------------code-------------------------------------]
       0x55b25db5880e :add    rcx,rdx
       0x55b25db58811 :mov    rdx,rax
       0x55b25db58814 :mov    rdi,rcx
    => 0x55b25db58817 :call   0x55b25d9361a8//memcpy
    Guessed arguments:
    arg[0]: 0x7f49f003a846 --> 0x9000000000000000 
    arg[1]: 0x7f49f003b3ae --> 0x7f49cc0de0000000 
    arg[2]: 0x5b4 
    arg[3]: 0x7f49f003a846 --> 0x9000000000000000 
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    Thread 3 "qemu-system-x86" hit Breakpoint 4, 0x000055b25db58817 in rtl8139_cplus_transmit_one (s=0x55b26083d430)
        at /home/sh1/Desktop/qemu/hw/net/rtl8139.c:2267
    2267                            memcpy((uint8_t*)p_tcp_hdr + tcp_hlen, (uint8_t*)p_tcp_hdr + tcp_hlen + tcp_send_offset, chunk_size);
这一次是 0x7f49f003b3ae – 0x7f49f003adfa = 0x5b4
确实是一个chunk的大小，如此一来，每一轮memcpy都会加上一个chunk_size，当超出了buffer，就造成了信息泄露，可以拷贝当前buffer之外的内容。而我们只需要从Rx
Buffer中读取，这样就会造成信息泄露了。
**0x03 CVE-2015-7504漏洞分析**
CVE-2015-7504是一个堆溢出漏洞，这个漏洞形成的原因涉及到一个PCNetState_st结构体，这个结构体中有一个buffer变量长度大小定义为4096，然而在PCNET网卡的pcnet_receive函数中处理buffer时会在结尾增加一个4字节的CRC校验，这时当我们对传入buffer长度控制为4096的话，4字节的CRC校验会覆盖超出4096长度的4字节位置，而这4字节正好是PCNetState_st结构体中的一个irq关键结构，进一步我们可以利用irq结构控制rip，漏洞文件在/path/to/qemu/hw/net/pcnet.c。
接下来我们在pcnet_receive函数入口下断点，函数入口处会传入PCNetState_st结构体对象，这里我筛选部分跟此漏洞有关的结构体变量。
    gdb-peda$ p *(struct PCNetState_st*)0x55b25f34a1a0
    $1 = {
      ……
      buffer = "RT002264VRT002264Vb", '00', 
      irq = 0x55b2603bc910, 
      ……
      looptest = 0x1
    }
随后单步跟踪，这里首先会获取s->buffer的值。
    //store s->buffer to src
    [----------------------------------registers-----------------------------------]
    RAX: 0x55b25f34a1a0 --> 0x55b2603bca00 --> 0x55b2603bca20 --> 0x55b25e13d940 --> 0x1 
    [-------------------------------------code-------------------------------------]
       0x55b25db4e537 :mov    WORD PTR [rax+0x212c],dx
       0x55b25db4e53e :
        jmp    0x55b25db4effb 
       0x55b25db4e543 :mov    rax,QWORD PTR [rbp-0xa8]
    => 0x55b25db4e54a :add    rax,0x2290//offset
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x000055b25db4e54a1062            uint8_t *src = s->buffer;
随后会到达一处if语句判断，这里会判断looptest的值，当此值为非0值时，会进入else语句处理。
    //looptest
    [----------------------------------registers-----------------------------------]
    RAX: 0x1 //s->looptest
    [-------------------------------------code-------------------------------------]
       0x55b25db4e587 :mov    DWORD PTR [rbp-0xd8],0x0
       0x55b25db4e591 :mov    rax,QWORD PTR [rbp-0xa8]
       0x55b25db4e598 :mov    eax,DWORD PTR [rax+0x32b4]
    => 0x55b25db4e59e :test   eax,eax
       0x55b25db4e5a0 :
        jne    0x55b25db4e635 
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x000055b25db4e59e1067            if (!s->looptest) {
    //s->looptest = PCNET_LOOPTEST_CRC
    [----------------------------------registers-----------------------------------]
    RAX: 0x1 [-------------------------------------code-------------------------------------]
    => 0x55b25db4e645 :
        je     0x55b25db4e66c 
       0x55b25db4e647 :mov    rax,QWORD PTR [rbp-0xa8]
       0x55b25db4e64e :movzx  eax,WORD PTR [rax+0x206a]
       0x55b25db4e655 :movzx  eax,ax
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x000055b25db4e6451075            } else if (s->looptest == PCNET_LOOPTEST_CRC ||
随后会进入else语句处理，在else语句处理中会有一处while循环进行CRC校验。
     else if (s->looptest == PCNET_LOOPTEST_CRC ||
                           !CSR_DXMTFCS(s) || size  0x5452563412005452 //buffer
    RBX: 0x1000//大小 
    [-------------------------------------code-------------------------------------]
       0x55b25db4e66c :mov    DWORD PTR [rbp-0xd4],0xffffffff
       0x55b25db4e676 :mov    rax,QWORD PTR [rbp-0x98]
       0x55b25db4e67d :mov    QWORD PTR [rbp-0xb8],rax
    => 0x55b25db4e684 :
        jmp    0x55b25db4e6ce 
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    Thread 3 "qemu-system-x86" hit Breakpoint 10, pcnet_receive (
        nc=0x55b2603bca20, buf=0x55b25f34c430 "RT", size_=0x1000)
        at /home/sh1/Desktop/qemu/hw/net/pcnet.c:1080
    1080                while (p != &src[size])
每一轮循环p都会自加1，循环结束后p会到0x1000的位置，随后会进行一处赋值，赋值的内容是htonl(fcs)，长度是4字节，而这4字节的内容会超过s->buffer的大小，可以回头看一下之前我发的关于PCNetState_st结构体的值，在s->buffer之后跟的是irq结构。
根据之前我们跟踪对*src = s->buffer的汇编代码，我们可以看到buffer的偏移是0x2290，而buffer的长度是0x1000，buffer
的下一个变量是irq结构，buffer是0x2290 + 0x1000 = 0x3290 + 0x55b25f34a1a0 = 0x55b25f34d430
    gdb-peda$ x/10x 0x55B25F34D400
    0x55b25f34d400:0x00000000000000000x0000000000000000
    0x55b25f34d410:0x00000000000000000x0000000000000000
    0x55b25f34d420:0x00000000000000000xfe7193d400000000
    0x55b25f34d430:0x000055b2603bc910
可以看到0x55b25f34d430位置存放的正是irq的指针（结合我之前发的结构体中irq变量的值），接下来我们来看p=htonl(fcs)赋值操作。这里fcs是可控的，我们把它的值设置为0xdeadbeef，因为是PoC仅用于验证，而真实利用，请参考phrack文中的利用方法。
    [----------------------------------registers-----------------------------------]
    RAX: 0xdeadbeef //eax的值是deadbeef
    RBX: 0x1000 
    [-------------------------------------code-------------------------------------]
       0x55b25db4e6f2 :call   0x55b25d936078
    => 0x55b25db4e6f7 :mov    edx,eax
       0x55b25db4e6f9 :mov    rax,QWORD PTR [rbp-0xb8]
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x000055b25db4e6f71082                *(uint32_t *)p = htonl(fcs);
    [----------------------------------registers-----------------------------------]
    RAX: 0x55b25f34d430 --> 0x55b2603bc910 --> 0x55b25f18a3f0 --> 0x55b25f1564a0 --> 0x55b25f156620 --> 0x717269 ('irq')//目标地址
    RDX: 0xdeadbeef //拷贝内容
    [-------------------------------------code-------------------------------------]
    => 0x55b25db4e700 :mov    DWORD PTR [rax],edx
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x000055b25db4e7001082                *(uint32_t *)p = htonl(fcs);
    gdb-peda$ x/10x 0x55b25f34d430//拷贝前
    0x55b25f34d430:0x000055b2603bc9100x000055b25db4be11
    0x55b25f34d440:0x000055b25db4bdd90x000055b25f349920
    0x55b25f34d450:0x00000001000000010x000055b25f182850
    0x55b25f34d460:0x00000000000000000x000055b25ff0d760
    0x55b25f34d470:0x000055b2603bc7300x0000000000000001
    gdb-peda$ si//拷贝后
    [----------------------------------registers-----------------------------------]