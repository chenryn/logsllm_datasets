# CVE-2020-1948 Apache Dubbo Hessian 反序列化漏洞分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 背景
Apache Dubbo 是一款高性能Java RPC框架。漏洞存在于 Apache Dubbo默认使用的反序列化工具 hessian
中，攻击者可能会通过发送恶意 RPC 请求来触发漏洞，这类 RPC
请求中通常会带有无法识别的服务名或方法名，以及一些恶意的参数负载。当恶意参数被反序列化时，达到代码执行的目的。
## 0x1 影响范围
2.7.0  引用：hessian 是一种跨语言的高效二进制序列化方式。但这里实际不是原生的 hessian2 序列化，而是阿里修改过的 hessian
> lite，Hessian是二进制的web service协议，官方对Java、Flash/Flex、Python、C++、.NET
> C#等多种语言都进行了实现。Hessian和Axis、XFire都能实现web
> service方式的远程方法调用，区别是Hessian是二进制协议，Axis、XFire则是SOAP协议，所以从性能上说Hessian远优于后两者，并且Hessian的JAVA使用方法非常简单。它使用Java语言接口定义了远程对象，集合了序列化/反序列化和RMI功能。
Hessian [1] 协议用于集成 Hessian 的服务，Hessian 底层采用 Http 通讯，采用 Servlet 暴露服务，Dubbo 缺省内嵌
Jetty 作为服务器实现。
Dubbo 的 Hessian 协议可以和原生 Hessian 服务互操作，即：
  * 提供者用 Dubbo 的 Hessian 协议暴露服务，消费者直接用标准 Hessian 接口调用
  * 或者提供方用标准 Hessian 暴露服务，消费方用 Dubbo 的 Hessian 协议调用。
一个简单的Hessian序列化使用方法
    import com.caucho.hessian.io.Hessian2Output;
    import java.io.ByteArrayOutputStream;
    import java.io.Serializable;
    class User implements Serializable {
    public static void main(String[]args){
    //        System.out.println("hehe");
            }
    }
    public class HessianTest {
        public static void main(String[] args) throws Exception {
            Object o=new User();
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            Hessian2Output output = new Hessian2Output(os);
            output.writeObject(o);
            output.close();
            System.out.println(os.toString());
        }
    }
###  0x3 协议关系
介绍到这有的同学可能就迷了，Dubbo和序列化到底是怎么个关系，可以从以下几点考虑：
  1. Dubbo 从大的层面上将是RPC框架，负责封装RPC调用，支持很多RPC协议
  2. RPC协议包括了dubbo、rmi、hession、webservice、http、redis、rest、thrift、memcached、jsonrpc等
  3. Java中的序列化有Java原生序列化、Hessian 序列化、Json序列化、dubbo 序列化
通过上面这个关系图，可以看出我们这里研究的是 **Dubbo协议** 中 **Hessian反序列化** 漏洞。关系理清楚了下面看一看漏洞复现和分析。
## 0x03 环境搭建
###  0x1 搭建dubbo-spring-boot
利用dubbo Demo进行环境搭建   
注意选择2.7.6 或以下版本，下载过后添加必要的漏洞利用jar包
###  0x2 添加漏洞利用链
下载 2.7.5 版本，用 IDEA 打开 dubbo-spring-boot-samples 文件夹，在provider-sample文件夹下的 pom
里添加：
                     com.rometools
                     rome
                     1.7.0
## 0x04 漏洞原理与利用
###  0x1 原理
主要利用Dubbo协议调用其他RPC协议时会涉及到数据的序列化和反序列化操作。如果没有做检查校验很有可能成功反序列化攻击者精心构造的恶意类，利用java调用链使服务端去加载远程的Class文件，通过在Class文件的构造函数或者静态代码块中插入恶意语句从而达到远程代码执行的攻击效果。
###  0x2 利用链分析
在marshalsec工具中，提供了对于Hessian反序列化可利用的几条链：  
  * SpringPartiallyComparableAdvisorHolder
  * SpringAbstractBeanFactoryPointcutAdvisor
  * Rome
  * XBean
我们这次利用Rome构造JNDI注入利用链。关于JNDI在之前调试Fastjson漏洞中有简单说明。  
本次主要是利用下面攻击链，攻击链触发过程会在漏洞调试时说明。
    - HashMap.put
    - HashMap.putVal
    - HashMap.hash
    - EqualsBean.hashCode
    - EqualsBean.beanHashCode