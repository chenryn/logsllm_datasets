  https://localhost:4567/share
{"uri":"/spaces/1/messages?access_token=
➥ 1YQqZdNAIce5AB_Z8J7ClMrnx68"}
The new capability URI in the response can only be used by the demo2 user and pro-
vides only read permission on the space. You can use this facility to build resource
sharing for your APIs. For example, if a user directly shares a capability URI of their
own with another user, rather than denying access completely you could allow them to
request access. This is what happens in Google Docs if you follow a link to a document
that you don’t have access to. The owner of the document can then approve access. In
Google Docs this is done by adding an entry to an access control list (chapter 3) asso-
ciated with each document, but with capabilities, the owner could generate a capabil-
ity URI instead that is then emailed to the recipient.
Look up the
token and check
that it matches
the URI.
Check that the 
requested permissions 
are a subset of the 
token permissions.
Create and 
store the new 
capability token.
Return the 
requested 
capability URI.
319
Macaroons: Tokens with caveats
9.3
Macaroons: Tokens with caveats
Capabilities allow users to easily share fine-grained access to their resources with other
users. If a Natter user wants to share one of their messages with somebody who doesn’t
have a Natter account, they can easily do this by creating a read-only capability URI for
that specific message. The other user will be able to read only that one message and
won’t get access to any other messages or the ability to post messages themselves. 
 Sometimes the granularity of capability URIs doesn’t match up with how users
want to share resources. For example, suppose that you want to share read-only access
to a snapshot of the conversations since yesterday in a social space. It’s unlikely that
the API will always supply a capability URI that exactly matches the user’s wishes; the
createSpace action already returns four URIs, and none of them quite fit the bill. 
 Macaroons provide a solution to this problem by allowing anybody to append caveats
to a capability that restrict how it can be used. Macaroons were invented by a team of
academic and Google researchers in a paper published in 2014 (https://ai.google/
research/pubs/pub41892).
DEFINITION
A macaroon is a type of cryptographic token that can be used to
represent capabilities and other authorization grants. Anybody can append
new caveats to a macaroon that restrict how it can be used. 
To address our example, the user could append the following caveats to their capa-
bility to create a new capability that allows only read access to messages since lunch-
time yesterday:
method = GET
since >= 2019-10-12T12:00:00Z
Unlike the share method that you added in section 9.2.6, macaroon caveats can
express general conditions like these. The other benefit of macaroons is that anyone
can append a caveat to a macaroon using a macaroon library, without needing to call
an API endpoint or have access to any secret keys. Once the caveat has been added it
can’t be removed. 
 Macaroons use HMAC-SHA256 tags to protect the integrity of the token and any
caveats just like the HmacTokenStore you developed in chapter 5. To allow anybody to
append caveats to a macaroon, even if they don’t have the key, macaroons use an
interesting property of HMAC: the authentication tag output from HMAC can itself
be used as a key to sign a new message with HMAC. To append a caveat to a maca-
roon, you use the old authentication tag as the key to compute a new HMAC-SHA256
tag over the caveat, as shown in figure 9.5. You then throw away the old authentication
tag and append the caveat and the new tag to the macaroon. Because it’s infeasible to
reverse HMAC to recover the old tag, nobody can remove caveats that have been
added unless they have the original key.
320
CHAPTER 9
Capability-based security and macaroons
WARNING
Because anybody can add a caveat to a macaroon, it is important
that they are used only to restrict how a token is used. You should never trust
any claims in a caveat or grant additional access based on their contents.
When the macaroon is presented back to the API, it can use the original HMAC key to
reconstruct the original tag and all the caveat tags and check if it comes up with the
same signature value at the end of the chain of caveats. Listing 9.12 shows an example
of how to verify an HMAC chain just like that used by macaroons. 
 First initialize a javax.crypto.Mac object with the API’s authentication key (see
chapter 5 for how to generate this) and then compute an initial tag over the maca-
roon unique identifier. You then loop through each caveat in the chain and compute
a new HMAC tag over the caveat, using the old tag as the key.5 Finally, you compare
the computed tag with the tag that was supplied with the macaroon using a constant-
time equality function. Listing 9.14 is just to demonstrate how it works; you’ll use a
real macaroon library in the Natter API so you don’t need to implement this method.
private boolean verify(String id, List caveats, byte[] tag)
        throws Exception {
    var hmac = Mac.getInstance("HmacSHA256");    
    hmac.init(macKey);                           
5 If you are a functional programming enthusiast, then this can be elegantly written as a left-fold or reduce
operation.
Listing 9.12
Verifying the HMAC chain
Identiﬁer
Caveat 1
Caveat 2
Tag
HMAC-SHA256
New caveat
New tag
Identiﬁer
Caveat 1
Caveat 2
New caveat
New tag
The new caveat is fed into HMAC-SHA256
using the old HMAC tag as the key.
The new caveat and tag are
appended to the macaroon.
The old tag is discarded.
Figure 9.5
To append a new caveat to a macaroon, you use the old HMAC 
tag as the key to authenticate the new caveat. You then throw away the 
old tag and append the new caveat and tag. Because nobody can reverse 
HMAC to calculate the old tag, they cannot remove the caveat.
Initialize HMAC-SHA256 with 
the authentication key.
321
Macaroons: Tokens with caveats
    var computed = hmac.doFinal(id.getBytes(UTF_8));    
    for (var caveat : caveats) {                               
        hmac.init(new SecretKeySpec(computed, "HmacSHA256"));  
        computed = hmac.doFinal(caveat.getBytes(UTF_8));       
    }
    return MessageDigest.isEqual(tag, computed);    
}
After the HMAC tag has been verified, the API then needs to check that the caveats
are satisfied. There’s no standard set of caveats that APIs support, so like OAuth2
scopes it’s up to the API designer to decide what to support. There are two broad cat-
egories of caveats supported by macaroon libraries:
 First-party caveats are restrictions that can be easily verified by the API at the
point of use, such as restricting the times of day at which the token can be used.
First-party caveats are discussed in more detail in section 9.3.3.
 Third-party caveats are restrictions which require the client to obtain a proof
from a third-party service, such as proof that the user is an employee of a partic-
ular company or that they are over 18. Third-party caveats are discussed in sec-
tion 9.3.4.
9.3.1
Contextual caveats
A significant advantage of macaroons over other token forms is that they allow the cli-
ent to attach contextual caveats just before the macaroon is used. For example, a client
that is about to send a macaroon to an API over an untrustworthy communication
channel can attach a first-party caveat limiting it to only be valid for HTTP PUT
requests to that specific URI for the next 5 seconds. That way, if the macaroon is sto-
len, then the damage is limited because the attacker can only use the token in very
restricted circumstances. Because the client can keep a copy of the original unre-
stricted macaroon, their own ability to use the token is not limited in the same way.
DEFINITION
A contextual caveat is a caveat that is added by a client just before
use. Contextual caveats allow the authority of a token to be restricted before
sending it over an insecure channel or to an untrusted API, limiting the dam-
age that might occur if the token is stolen.
The ability to add contextual caveats makes macaroons one of the most important
recent developments in API security. Macaroons can be used with any token-based
authentication and even OAuth2 access tokens if your authorization server supports
them.6 On the other hand, there is no formal specification of macaroons and aware-
ness and adoption of the format is still quite limited, so they are not as widely sup-
ported as JWTs (chapter 6).
6 My employer, ForgeRock, has added experimental support for macaroons to their authorization server software.
Compute an
initial tag over
the macaroon
identifier.
Compute a new tag for 
each caveat using the 
old tag as the key.
Compare the tags 
with a constant-time 
equality function.
322
CHAPTER 9
Capability-based security and macaroons
9.3.2
A macaroon token store
To use macaroons in the Natter API, you can use the open source jmacaroons library
(https://github.com/nitram509/jmacaroons). Open the pom.xml file in your editor
and add the following lines to the dependencies section:
      com.github.nitram509
      jmacaroons
      0.4.1
You can now build a new token store implementation using macaroons as shown in
listing 9.13. To create a macaroon, you’ll first use another TokenStore implementa-
tion to generate the macaroon identifier. You can use any of the existing stores, but to
keep the tokens compact you’ll use the DatabaseTokenStore in these examples. You
could also use the JsonTokenStore, in which case the macaroon HMAC tag also pro-
tects it against tampering.
 You then create the macaroon using the MacaroonsBuilder.create() method,
passing in the identifier and the HMAC key. An odd quirk of the macaroon API
means you have to pass the raw bytes of the key using macKey.getEncoded(). You can
also give an optional hint for where the macaroon is intended to be used. Because
you’ll be using these with capability URIs that already include the full location, you
can leave that field blank to save space. You can then use the macaroon.serialize()
method to convert the macaroon into a URL-safe base64 string format. In the same
Natter API project you’ve been using so far, navigate to src/main/java/com/manning/
apisecurityinaction/token and create a new file called MacaroonTokenStore.java.
Copy the contents of listing 9.13 into the file and save it.
WARNING
The location hint is not included in the authentication tag and is
intended only as a hint to the client. Its value shouldn’t be trusted because it
can be tampered with.
package com.manning.apisecurityinaction.token;
import java.security.Key;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Optional;
import com.github.nitram509.jmacaroons.*;
import com.github.nitram509.jmacaroons.verifier.*;
import spark.Request;
public class MacaroonTokenStore implements SecureTokenStore {
    private final TokenStore delegate;
    private final Key macKey;
Listing 9.13
The MacaroonTokenStore
323
Macaroons: Tokens with caveats
    private MacaroonTokenStore(TokenStore delegate, Key macKey) {
        this.delegate = delegate;
        this.macKey = macKey;
    }
    @Override
    public String create(Request request, Token token) {
        var identifier = delegate.create(request, token);    
        var macaroon = MacaroonsBuilder.create("",        
                macKey.getEncoded(), identifier);         
        return macaroon.serialize();    
    }
}
Like the HmacTokenStore from chapter 4, the macaroon token store only provides
authentication of tokens and not confidentiality unless the underlying store already
provides that. Just as you did in chapter 5, you can create two static factory methods
that return a correctly typed store depending on the underlying token store:
 If the underlying token store is a ConfidentialTokenStore, then it returns a
SecureTokenStore because the resulting store provides both confidentiality
and authenticity of tokens.
 Otherwise, it returns an AuthenticatedTokenStore to make clear that confi-
dentiality is not guaranteed.
These factory methods are shown in listing 9.14 and are very similar to the ones you
created in chapter 5, so open the MacaroonTokenStore.java file again and add these
new methods.
public static SecureTokenStore wrap(                       
        ConfidentialTokenStore tokenStore, Key macKey) {   
    return new MacaroonTokenStore(tokenStore, macKey);     
}                                                          
public static AuthenticatedTokenStore wrap(             
        TokenStore tokenStore, Key macKey) {            
    return new MacaroonTokenStore(tokenStore, macKey);  
}                                                       
To verify a macaroon, you deserialize and validate the macaroon using a Macaroons-
Verifier, which will verify the HMAC tag and check any caveats. If the macaroon is
valid, then you can look up the identifier in the delegate token store. To revoke a mac-
aroon, you simply deserialize and revoke the identifier. In most cases, you shouldn’t
check the caveats on the token when it is being revoked, because if somebody has
gained access to your token, the least malicious thing they can do with it is revoke it!
However, in some cases, malicious revocation might be a real threat, in which case you
could verify the caveats to reduce the risk of this occurring. Listing 9.15 shows the
Listing 9.14
Factory methods
Use another
token store to
create a unique
identifier for
this macaroon.
Create the 
macaroon with a 
location hint, the 
identifier, and the 
authentication key.
Return the serialized 
URL-safe string form 
of the macaroon.
If the underlying store 
provides confidentiality of 
token data, then return a 
SecureTokenStore.
Otherwise, return an 
AuthenticatedTokenStore.
324
CHAPTER 9
Capability-based security and macaroons
operations to read and revoke a macaroon token. Open the MacaroonTokenStore
.java file again and add the new methods.
@Override
public Optional read(Request request, String tokenId) {
    var macaroon = MacaroonsBuilder.deserialize(tokenId);    
    var verifier = new MacaroonsVerifier(macaroon);          
    if (verifier.isValid(macKey.getEncoded())) {             
        return delegate.read(request, macaroon.identifier);   
    }
    return Optional.empty();
}
@Override
public void revoke(Request request, String tokenId) {
    var macaroon = MacaroonsBuilder.deserialize(tokenId);
    delegate.revoke(request, macaroon.identifier);    
}
WIRING IT UP
You can now wire up the CapabilityController to use the new token store for capa-
bility tokens. Open the Main.java file in your editor and find the lines that construct
the CapabilityController. Update the file to use the MacaroonTokenStore instead.
You may need to first move the code that reads the macKey from the keystore (see
chapter 6) from later in the file. The code should look as follows, with the new part
highlighted in bold:
var keyPassword = System.getProperty("keystore.password",
        "changeit").toCharArray();
var keyStore = KeyStore.getInstance("PKCS12");
keyStore.load(new FileInputStream("keystore.p12"),
        keyPassword);
var macKey = keyStore.getKey("hmac-key", keyPassword);
var encKey = keyStore.getKey("aes-key", keyPassword);
var capController = new CapabilityController(
        MacaroonTokenStore.wrap(
             new DatabaseTokenStore(database), macKey));
If you now use the API to create a new space, you’ll see the macaroon tokens being
used in the capability URIs returned from the API call. You can copy and paste those
tokens into the debugger at http://macaroons.io to see the component parts.
CAUTION
You should not paste tokens from a production system into any
website. At the time of writing, macaroons.io doesn’t even support SSL.
As currently written, the macaroon token store works very much like the existing
HMAC token store. In the next sections, you’ll implement support for caveats to take
full advantage of the new token format.
Listing 9.15
Reading a macaroon token
Deserialize 
and validate 
the macaroon 
signature and 
caveats.
If the macaroon 
is valid, then 
look up the 
identifier in the 
delegate token 
store.
To revoke a macaroon, revoke the
identifier in the delegate store.
325
Macaroons: Tokens with caveats
9.3.3
First-party caveats
The simplest caveats are first-party caveats, which can be verified by the API purely
based on the API request and the current environment. These caveats are represented
as strings and there is no standard format. The only commonly implemented first-
party caveat is to set an expiry time for the macaroon using the syntax:
time  read(Request request, String tokenId) {
    var macaroon = MacaroonsBuilder.deserialize(tokenId);
    var verifier = new MacaroonsVerifier(macaroon);
    verifier.satisfyGeneral(new TimestampCaveatVerifier());    
    if (verifier.isValid(macKey.getEncoded())) {
        return delegate.read(request, macaroon.identifier);
    }
    return Optional.empty();
}
You can also add your own caveat verifiers using two methods. The simplest is the
satisfyExact method, which will satisfy caveats that exactly match the given string.
For example, you can allow a client to restrict a macaroon to a single type of HTTP
method by adding the line:
verifier.satisfyExact("method = " + request.requestMethod());
to the read method. This ensures that a macaroon with the caveat method = GET can
only be used on HTTP GET requests, effectively making it read-only. Add that line to
the read method now.
Listing 9.16
Verifying the expiry timestamp
Add a Timestamp-
CaveatVerifier to 
satisfy the expiry 
caveat.
326
CHAPTER 9
Capability-based security and macaroons