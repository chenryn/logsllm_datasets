content://com.mwr.example.sieve.DBContentProvider/Keys/
content://com.mwr.example.sieve.DBContentProvider/Passwords
content://com.mwr.example.sieve.DBContentProvider/Passwords/
Injection in Selection:
content://com.mwr.example.sieve.DBContentProvider/Keys/
content://com.mwr.example.sieve.DBContentProvider/Passwords
content://com.mwr.example.sieve.DBContentProvider/Passwords/
File System Based Content Providers
163
Data Storage on Android
Content providers can provide access to the underlying filesystem. This allows apps to share files (the Android
sandbox normally prevents this). You can use the Drozer modules app.provider.read and app.provider.download to
read and download files, respectively, from exported file-based content providers. These content providers are
susceptible to directory traversal, which allows otherwise protected files in the target application's sandbox to be read.
dz> run app.provider.download content://com.vulnerable.app.FileProvider/../../../../../../../../data/data/com.v
ulnerable.app/database.db /home/user/database.db
Written 24488 bytes
Use the scanner.provider.traversal module to automate the process of finding content providers that are susceptible
to directory traversal:
dz> run scanner.provider.traversal -a com.mwr.example.sieve
Scanning com.mwr.example.sieve...
Vulnerable Providers:
content://com.mwr.example.sieve.FileBackupProvider/
content://com.mwr.example.sieve.FileBackupProvider
Note that adb can also be used to query content providers:
$ adb shell content query --uri content://com.owaspomtg.vulnapp.provider.CredentialProvider/credentials
Row: 0 id=1, username=admin, password=StrongPwd
Row: 1 id=2, username=test, password=test
...
Checking for Sensitive Data Disclosure Through the User Interface (MSTG-
STORAGE-7)
Overview
Many apps require users to enter several kinds of data to, for example, register an account or make a payment.
Sensitive data may be exposed if the app doesn't properly mask it, when displaying data in clear text.
Masking of sensitive data, by showing asterisk or dots instead of clear text should be enforced within an app's activity
to prevent disclosure and mitigate risks such as shoulder surfing.
Static Analysis
To make sure an application is masking sensitive user input, check for the following attribute in the definition of
EditText:
android:inputType="textPassword"
With this setting, dots (instead of the input characters) will be displayed in the text field, preventing the app from
leaking passwords or pins to the user interface.
Dynamic Analysis
To determine whether the application leaks any sensitive information to the user interface, run the application and
identify components that either show such information or take it as input.
If the information is masked by, for example, replacing input with asterisks or dots, the app isn't leaking data to the
user interface.
164
Data Storage on Android
Testing Backups for Sensitive Data (MSTG-STORAGE-8)
Overview
Like other modern mobile operating systems, Android offers auto-backup features. The backups usually include
copies of data and settings for all installed apps. Whether sensitive user data stored by the app may leak to those
data backups is an obvious concern.
Given its diverse ecosystem, Android supports many backup options:
Stock Android has built-in USB backup facilities. When USB debugging is enabled, you can use the adb backup
command to create full data backups and backups of an app's data directory.
Google provides a "Back Up My Data" feature that backs up all app data to Google's servers.
Two Backup APIs are available to app developers:
Key/Value Backup (Backup API or Android Backup Service) uploads to the Android Backup Service cloud.
Auto Backup for Apps: With Android 6.0 (>= API level 23), Google added the "Auto Backup for Apps feature".
This feature automatically syncs at most 25MB of app data with the user's Google Drive account.
OEMs may provide additional options. For example, HTC devices have a "HTC Backup" option that performs
daily backups to the cloud when activated.
Static Analysis
Local
Android provides an attribute called allowBackup to back up all your application data. This attribute is set in the
AndroidManifest.xml file. If the value of this attribute is true, the device allows users to back up the application with
Android Debug Bridge (ADB) via the command $ adb backup .
To prevent the app data backup, set the android:allowBackup attribute to false. When this attribute is unavailable, the
allowBackup setting is enabled by default, and backup must be manually deactivated.
Note: If the device was encrypted, then the backup files will be encrypted as well.
Check the AndroidManifest.xml file for the following flag:
android:allowBackup="true"
If the flag value is true, determine whether the app saves any kind of sensitive data (check the test case "Testing for
Sensitive Data in Local Storage").
Cloud
Regardless of whether you use key/value backup or auto backup, you must determine the following:
which files are sent to the cloud (e.g., SharedPreferences)
whether the files contain sensitive information
whether sensitive information is encrypted before being sent to the cloud.
If you don't want to share files with Google Cloud, you can exclude them from Auto Backup. Sensitive
information stored at rest on the device should be encrypted before being sent to the cloud.
Auto Backup: You configure Auto Backup via the boolean attribute android:allowBackup within the application's
manifest file. Auto Backup is enabled by default for applications that target Android 6.0 (API Level 23). You can
165
Data Storage on Android
use the attribute android:fullBackupOnly to activate auto backup when implementing a backup agent, but this
attribute is available for Android versions 6.0 and above only. Other Android versions use key/value backup
instead.
android:fullBackupOnly
Auto backup includes almost all the app files and stores up 25 MB of them per app in the user's Google Drive account.
Only the most recent backup is stored; the previous backup is deleted.
Key/Value Backup: To enable key/value backup, you must define the backup agent in the manifest file. Look in
AndroidManifest.xml for the following attribute:
android:backupAgent
To implement key/value backup, extend one of the following classes:
BackupAgent
BackupAgentHelper
To check for key/value backup implementations, look for these classes in the source code.
Dynamic Analysis
After executing all available app functions, attempt to back up via adb . If the backup is successful, inspect the
backup archive for sensitive data. Open a terminal and run the following command:
$ adb backup -apk -nosystem 
ADB should respond now with "Now unlock your device and confirm the backup operation" and you should be asked
on the Android phone for a password. This is an optional step and you don't need to provide one. If the phone does
not prompt this message, try the following command including the quotes:
$ adb backup "-apk -nosystem "
The problem happens when your device has an adb version prior to 1.0.31. If that's the case you must use an adb
version of 1.0.31 also on your host machine. Versions of adb after 1.0.32 broke the backwards compatibility.
Approve the backup from your device by selecting the Back up my data option. After the backup process is finished,
the file .ab will be in your working directory. Run the following command to convert the .ab file to tar.
$ dd if=mybackup.ab bs=24 skip=1|openssl zlib -d > mybackup.tar
In case you get the error openssl:Error: 'zlib' is an invalid command. you can try to use Python instead.
$ dd if=backup.ab bs=1 skip=24 | python -c "import zlib,sys;sys.stdout.write(zlib.decompress(sys.stdin.read()))
" > backup.tar
The Android Backup Extractor is another alternative backup tool. To make the tool to work, you have to download the
Oracle JCE Unlimited Strength Jurisdiction Policy Files for JRE7 or JRE8 and place them in the JRE lib/security
folder. Run the following command to convert the tar file:
$ java -jar abe.jar unpack backup.ab
166
Data Storage on Android
if it shows some Cipher information and usage, which means it hasn't unpacked successfully. In this case you can
give a try with more arguments:
$ abe [-debug] [-useenv=yourenv] unpack   [password]
[password]: is the password when your android device asked you earlier. For example here is: 123
$ java -jar abe.jar unpack backup.ab backup.tar 123
Extract the tar file to your working directory.
$ tar xvf mybackup.tar
Finding Sensitive Information in Auto-Generated Screenshots (MSTG-
STORAGE-9)
Overview
Manufacturers want to provide device users with an aesthetically pleasing experience at application startup and exit,
so they introduced the screenshot-saving feature for use when the application is backgrounded. This feature may
pose a security risk. Sensitive data may be exposed if the user deliberately screenshots the application while sensitive
data is displayed. A malicious application that is running on the device and able to continuously capture the screen
may also expose data. Screenshots are written to local storage, from which they may be recovered by a rogue
application (if the device is rooted) or someone who has stolen the device.
For example, capturing a screenshot of a banking application may reveal information about the user's account, credit,
transactions, and so on.
Static Analysis
A screenshot of the current activity is taken when an Android app goes into background and displayed for aesthetic
purposes when the app returns to the foreground. However, this may leak sensitive information.
To determine whether the application may expose sensitive information via the app switcher, find out whether the
FLAG_SECURE option has been set. You should find something similar to the following code snippet:
getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE,
WindowManager.LayoutParams.FLAG_SECURE);
setContentView(R.layout.activity_main);
If the option has not been set, the application is vulnerable to screen capturing.
Dynamic Analysis
While black-box testing the app, navigate to any screen that contains sensitive information and click the home button
to send the app to the background, then press the app switcher button to see the snapshot. As shown below, if
FLAG_SECURE is set (right image), the snapshot will be empty; if the flag has not been set (left image), activity
information will be shown:
FLAG_SECURE not set FLAG_SECURE set
167
Data Storage on Android
Checking Memory for Sensitive Data (MSTG-STORAGE-10)
Overview
Analyzing memory can help developers identify the root causes of several problems, such as application crashes.
However, it can also be used to access sensitive data. This section describes how to check for data disclosure via
process memory.
First identify sensitive information that is stored in memory. Sensitive assets have likely been loaded into memory at
some point. The objective is to verify that this information is exposed as briefly as possible.
To investigate an application's memory, you must first create a memory dump. You can also analyze the memory in
real-time, e.g., via a debugger. Regardless of your approach, memory dumping is a very error-prone process in terms
of verification because each dump contains the output of executed functions. You may miss executing critical
scenarios. In addition, overlooking data during analysis is probable unless you know the data's footprint (either the
exact value or the data format). For example, if the app encrypts with a randomly generated symmetric key, you likely
won't be able to spot it in memory unless you can recognize the key's value in another context.
Therefore, you are better off starting with static analysis.
Static Analysis
168
Data Storage on Android
For an overview of possible sources of data exposure, check the documentation and identify application components
before you examine the source code. For example, sensitive data from a backend may be in the HTTP client, the XML
parser, etc. You want all these copies to be removed from memory as soon as possible.
In addition, understanding the application's architecture and the architecture's role in the system will help you identify
sensitive information that doesn't have to be exposed in memory at all. For example, assume your app receives data
from one server and transfers it to another without any processing. That data can be handled in an encrypted format,
which prevents exposure in memory.
However, if you need to expose sensitive data in memory, you should make sure that your app is designed to expose
as few data copies as possible as briefly as possible. In other words, you want the handling of sensitive data to be
centralized (i.e., with as few components as possible) and based on primitive, mutable data structures.
The latter requirement gives developers direct memory access. Make sure that they use this access to overwrite the
sensitive data with dummy data (typically zeroes). Examples of preferable data types include byte [] and char [] ,
but not String or BigInteger . Whenever you try to modify an immutable object like String , you create and change
a copy of the object.
Using non-primitive mutable types like StringBuffer and StringBuilder may be acceptable, but it's indicative and
requires care. Types like StringBuffer are used to modify content (which is what you want to do). To access such a
type's value, however, you would use the toString method, which would create an immutable copy of the data.
There are several ways to use these data types without creating an immutable copy, but they require more effort than
simply using a primitive array. Safe memory management is one benefit of using types like StringBuffer , but this
can be a two-edged sword. If you try to modify the content of one of these types and the copy exceeds the buffer
capacity, the buffer size will automatically increase. The buffer content may be copied to a different location, leaving
the old content without a reference you can use to overwrite it.
Unfortunately, few libraries and frameworks are designed to allow sensitive data to be overwritten. For example,
destroying a key, as shown below, doesn't really remove the key from memory:
SecretKey secretKey = new SecretKeySpec("key".getBytes(), "AES");
secretKey.destroy();
Overwriting the backing byte-array from secretKey.getEncoded doesn't remove the key either; the SecretKeySpec-
based key returns a copy of the backing byte-array. See the sections below for the proper way to remove a
SecretKey from memory.
The RSA key pair is based on the BigInteger type and therefore resides in memory after its first use outside the
AndroidKeyStore . Some ciphers (such as the AES Cipher in BouncyCastle ) do not properly clean up their byte-
arrays.
User-provided data (credentials, social security numbers, credit card information, etc.) is another type of data that may
be exposed in memory. Regardless of whether you flag it as a password field, EditText delivers content to the app
via the Editable interface. If your app doesn't provide Editable.Factory , user-provided data will probably be
exposed in memory for longer than necessary. The default Editable implementation, the SpannableStringBuilder ,
causes the same issues as Java's StringBuilder and StringBuffer cause (discussed above).
In summary, when performing static analysis to identify sensitive data that is exposed in memory, you should:
Try to identify application components and map where data is used.
Make sure that sensitive data is handled by as few components as possible.
Make sure that object references are properly removed once the object containing the sensitive data is no longer
needed.
Make sure that garbage collection is requested after references have been removed.
Make sure that sensitive data gets overwritten as soon as it is no longer needed.
169
Data Storage on Android
Don't represent such data with immutable data types (such as String and BigInteger ).
Avoid non-primitive data types (such as StringBuilder ).
Overwrite references before removing them, outside the finalize method.
Pay attention to third-party components (libraries and frameworks). Public APIs are good indicators.
Determine whether the public API handles the sensitive data as described in this chapter.
The following section describes pitfalls of data leakage in memory and best practices for avoiding them.
Don't use immutable structures (e.g., String and BigInteger ) to represent secrets. Nullifying these structures will
be ineffective: the garbage collector may collect them, but they may remain on the heap after garbage collection.
Nevertheless, you should ask for garbage collection after every critical operation (e.g., encryption, parsing server
responses that contain sensitive information). When copies of the information have not been properly cleaned (as
explained below), your request will help reduce the length of time for which these copies are available in memory.
To properly clean sensitive information from memory, store it in primitive data types, such as byte-arrays ( byte[] )
and char-arrays ( char[] ). As described in the "Static Analysis" section above, you should avoid storing the
information in mutable non-primitive data types.
Make sure to overwrite the content of the critical object once the object is no longer needed. Overwriting the content
with zeroes is one simple and very popular method:
byte[] secret = null;
try{
//get or generate the secret, do work with it, make sure you make no local copies
} finally {
if (null != secret) {
Arrays.fill(secret, (byte) 0);
}
}
This doesn't, however, guarantee that the content will be overwritten at run time. To optimize the bytecode, the
compiler will analyze and decide not to overwrite data because it will not be used afterwards (i.e., it is an unnecessary
operation). Even if the code is in the compiled DEX, the optimization may occur during the just-in-time or ahead-of-
time compilation in the VM.
There is no silver bullet for this problem because different solutions have different consequences. For example, you
may perform additional calculations (e.g., XOR the data into a dummy buffer), but you'll have no way to know the
extent of the compiler's optimization analysis. On the other hand, using the overwritten data outside the compiler's
scope (e.g., serializing it in a temp file) guarantees that it will be overwritten but obviously impacts performance and
maintenance.
Then, using Arrays.fill to overwrite the data is a bad idea because the method is an obvious hooking target (see
the chapter "Tampering and Reverse Engineering on Android" for more details).
The final issue with the above example is that the content was overwritten with zeroes only. You should try to
overwrite critical objects with random data or content from non-critical objects. This will make it really difficult to
construct scanners that can identify sensitive data on the basis of its management.
Below is an improved version of the previous example:
byte[] nonSecret = somePublicString.getBytes("ISO-8859-1");
byte[] secret = null;
try{
//get or generate the secret, do work with it, make sure you make no local copies
} finally {
if (null != secret) {
for (int i = 0; i < secret.length; i++) {
secret[i] = nonSecret[i % nonSecret.length];
}
170
Data Storage on Android
FileOutputStream out = new FileOutputStream("/dev/null");
out.write(secret);
out.flush();
out.close();
}
}
For more information, take a look at Securely Storing Sensitive Data in RAM.
In the "Static Analysis" section, we mentioned the proper way to handle cryptographic keys when you are using
AndroidKeyStore or SecretKey .
For a better implementation of SecretKey , look at the SecureSecretKey class below. Although the implementation is
probably missing some boilerplate code that would make the class compatible with SecretKey , it addresses the main
security concerns:
No cross-context handling of sensitive data. Each copy of the key can be cleared from within the scope in which it
was created.
The local copy is cleared according to the recommendations given above.
public class SecureSecretKey implements javax.crypto.SecretKey, Destroyable {