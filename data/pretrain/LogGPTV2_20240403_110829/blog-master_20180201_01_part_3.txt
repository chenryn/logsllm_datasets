                                   Buffers: shared hit=44248, temp written=27458  
                                 Worker 14: actual time=4338.706..4338.706 rows=10000000 loops=1  
                                   Buffers: shared hit=44248, temp written=27458  
                                 Worker 15: actual time=4490.527..4490.527 rows=10000000 loops=1  
                                   Buffers: shared hit=44248, temp written=27458  
                                 ->  Seq Scan on public.tbl t2  (cost=0.00..144247.77 rows=9999977 width=4) (actual time=0.023..1766.936 rows=10000000 loops=17)  
                                       Output: t2.id  
                                       Buffers: shared hit=752216  
                                       Worker 0: actual time=0.020..1788.417 rows=10000000 loops=1  
                                         Buffers: shared hit=44248  
                                       Worker 1: actual time=0.021..1787.249 rows=10000000 loops=1  
                                         Buffers: shared hit=44248  
                                       Worker 2: actual time=0.020..1782.212 rows=10000000 loops=1  
                                         Buffers: shared hit=44248  
                                       Worker 3: actual time=0.022..1758.902 rows=10000000 loops=1  
                                         Buffers: shared hit=44248  
                                       Worker 4: actual time=0.020..1781.158 rows=10000000 loops=1  
                                         Buffers: shared hit=44248  
                                       Worker 5: actual time=0.021..1749.199 rows=10000000 loops=1  
                                         Buffers: shared hit=44248  
                                       Worker 6: actual time=0.021..1751.445 rows=10000000 loops=1  
                                         Buffers: shared hit=44248  
                                       Worker 7: actual time=0.021..1741.847 rows=10000000 loops=1  
                                         Buffers: shared hit=44248  
                                       Worker 8: actual time=0.022..1814.993 rows=10000000 loops=1  
                                         Buffers: shared hit=44248  
                                       Worker 9: actual time=0.021..1743.618 rows=10000000 loops=1  
                                         Buffers: shared hit=44248  
                                       Worker 10: actual time=0.022..1725.305 rows=10000000 loops=1  
                                         Buffers: shared hit=44248  
                                       Worker 11: actual time=0.021..1774.372 rows=10000000 loops=1  
                                         Buffers: shared hit=44248  
                                       Worker 12: actual time=0.035..1735.574 rows=10000000 loops=1  
                                         Buffers: shared hit=44248  
                                       Worker 13: actual time=0.023..1747.472 rows=10000000 loops=1  
                                         Buffers: shared hit=44248  
                                       Worker 14: actual time=0.022..1803.754 rows=10000000 loops=1  
                                         Buffers: shared hit=44248  
                                       Worker 15: actual time=0.046..1912.041 rows=10000000 loops=1  
                                         Buffers: shared hit=44248  
 Planning time: 0.137 ms  
 Execution time: 6938.022 ms  
(194 rows)  
```  
## 例子2 - 1亿 JOIN 1亿  
1、PostgreSQL 11，1亿 JOIN 1亿，双表过滤1000万。  
过滤条件用到了索引，索引扫描也支持并行扫描。  
```  
insert into tbl select id, random()*99 from generate_series(1,100000000) t(id);  
postgres=# create index idx_tbl1 on tbl using brin(id);  
CREATE INDEX  
```  
执行计划  
```  
postgres=# explain select t1.c1,count(*) from tbl t1 join tbl t2 on (t1.id=t2.id and t1.id  Gather Merge  (cost=919498.43..919975.64 rows=1600 width=12)  
         Workers Planned: 16  
         ->  Partial GroupAggregate  (cost=919498.08..919938.59 rows=100 width=12)  
               Group Key: t1.c1  
               ->  Sort  (cost=919498.08..919644.58 rows=58601 width=4)  
                     Sort Key: t1.c1  
                     ->  Parallel Hash Join  (cost=462502.50..914857.28 rows=58601 width=4)  
                           Hash Cond: (t1.id = t2.id)  
                           ->  Parallel Bitmap Heap Scan on tbl t1  (cost=2444.48..452493.17 rows=605189 width=8)  
                                 Recheck Cond: (id   Bitmap Index Scan on idx_tbl1  (cost=0.00..23.72 rows=9690483 width=0)  
                                       Index Cond: (id   Parallel Hash  (cost=452493.17..452493.17 rows=605189 width=4)  
                                 ->  Parallel Bitmap Heap Scan on tbl t2  (cost=2444.48..452493.17 rows=605189 width=4)  
                                       Recheck Cond: (id   Bitmap Index Scan on idx_tbl1  (cost=0.00..23.72 rows=9690483 width=0)  
                                             Index Cond: (id   Gather Merge  (cost=1249990.64..1250507.25 rows=1600 width=12)  
         Workers Planned: 16  
         ->  Partial GroupAggregate  (cost=1249990.29..1250470.20 rows=100 width=12)  
               Group Key: t1.c1  
               ->  Sort  (cost=1249990.29..1250149.93 rows=63855 width=4)  
                     Sort Key: t1.c1  
                     ->  Hash Join  (cost=739971.53..1244893.86 rows=63855 width=4)  
                           Hash Cond: (t1.id = t2.id)  
                           ->  Parallel Bitmap Heap Scan on tbl t1  (cost=2553.36..452941.04 rows=631740 width=8)  
                                 Recheck Cond: (id   Bitmap Index Scan on idx_tbl1  (cost=0.00..26.40 rows=10124385 width=0)  
                                       Index Cond: (id   Hash  (cost=571586.17..571586.17 rows=10107840 width=4)  
                                 ->  Bitmap Heap Scan on tbl t2  (cost=2553.36..571586.17 rows=10107840 width=4)  
                                       Recheck Cond: (id   Bitmap Index Scan on idx_tbl1  (cost=0.00..26.40 rows=10124385 width=0)  
                                             Index Cond: (id <= 10000000)  
(19 rows)  
```  
耗时6.35秒  
```  
postgres=# select t1.c1,count(*) from tbl t1 join tbl t2 on (t1.id=t2.id and t1.id<=10000000 and t2.id<=10000000) group by t1.c1;  
 c1 | count    
----+--------  
  0 |  50298  
  1 | 101409  
  2 | 101151  
  3 | 100965  
  4 | 101308  
  5 | 100968  
......  
 95 | 100760  
 96 | 101514  
 97 | 100543  
 98 | 100944  
 99 |  50756  
(100 rows)  
Time: 6354.000 ms (00:06.354)  
```  
### 1亿 JOIN 1亿，不过滤任何记录  
1、PostgreSQL 11，耗时10.7秒  
```  
postgres=# select t1.c1,count(*) from tbl t1 join tbl t2 on (t1.id=t2.id) group by t1.c1;  
 c1 |  count    
----+---------  
  0 |  504590  
  1 | 1010766  
  2 | 1010562  
  3 | 1009673  
  4 | 1009991  
......  
 95 | 1008846  
 96 | 1010079  
 97 | 1011009  
 98 | 1009981  
 99 |  505627  
(100 rows)  
Time: 10742.472 ms (00:10.742)  
```  
2、PostgreSQL 10，耗时58.3秒  
```  
postgres=# select t1.c1,count(*) from tbl t1 join tbl t2 on (t1.id=t2.id) group by t1.c1;  
 c1 |  count    
----+---------  
  0 |  504177  
  1 | 1009780  
  2 | 1009475  
  3 | 1010739  
  4 | 1010680  
......  
 96 | 1010552  
 97 | 1009568  
 98 | 1010606  
 99 |  505210  
(100 rows)  
Time: 58297.043 ms (00:58.297)  
```  
### 1亿 JOIN 1亿，单表过滤1000万
1、PostgreSQL 11，耗时2秒   
```
postgres=# select t1.c1,count(*) from tbl t1 join tbl t2 on (t1.id=t2.id and t1.id<=10000000) group by t1.c1;
 c1 | count  
----+--------
  0 |  50520
  1 | 101802
  2 | 101210
......
 94 | 100722
 95 | 101527
 96 | 100719
 97 | 100881
 98 | 101241
 99 |  50460
(100 rows)
Time: 2008.152 ms (00:02.008)
```
2、PostgreSQL 10，耗时8.5秒    
```
postgres=# select t1.c1,count(*) from tbl t1 join tbl t2 on (t1.id=t2.id and t1.id<=10000000) group by t1.c1;
 c1 | count  
----+--------
  0 |  50441
  1 | 100789
  2 | 101040
  3 | 101655
  4 | 100412
......
 93 | 101191
 94 | 100570
 95 | 101345
 96 | 101246
 97 | 101158
 98 | 100746
 99 |  50610
(100 rows)
Time: 8544.481 ms (00:08.544)
```
### 10亿 JOIN 10亿，单表过滤1000万
```
select t1.c1,count(*) from tbl t1 join tbl t2 on (t1.id=t2.id and t1.id<=10000000) group by t1.c1;
```
1、PostgreSQL 11，耗时10秒  
```
postgres=# select t1.c1,count(*) from tbl t1 join tbl t2 on (t1.id=t2.id and t1.id<=10000000) group by t1.c1;
 c1 | count  
----+--------
  0 |  50680
  1 | 101203
  2 | 100880
  3 | 100337
  4 | 101399
......
 94 | 100852
 95 | 100929
 96 | 100848
 97 | 100921
 98 | 100962
 99 |  50781
(100 rows)
Time: 10196.189 ms (00:10.196)
```