0.34
0.24
0.05
0.24
Table 3: Fraction of instructions per mil. allowed to return
to.
Table 3 depicts the fractions of instructions a callee can target.
The results denote the fraction (in ‰) of return targets allowed
per callee. The Baseline entry denotes the number of assembly in-
structions (addresses) in the program binary code section(s). We
used the objdump tool to determine the Baseline entries. Note that
without any backward-edge protection a return instruction can
freely transfer control flow to any of the Baseline addresses. The
results depicted in Table 3 are important since these show the frac-
tion of legitimate addresses which are allowed to be called after we
hardened the binary with ρFEM. The results in the second column
up to the last (from left to right) were determined by dividing the
results from Table 1 with the total number of Baseline instructions
depicted in column 2 (Baseline) of Table 3. The results indicate that
the fraction of addresses, which are targetable after applying ρFEM
for every analyzed program, is less than one in a thousand addresses
on average. Thus, in geomean less than one address can be targeted
by more than 10K addresses when considering the whole program.
6.2 Exploits Defended
In this section, we show ρFEM’s exploit coverage by creating a
suite of C/C++ programs in order to demonstrate various possible
scenarios of calltarget return address overwrite prevention. These
programs are based on five ROP primitives (see T1-T5 in Table 4)
identified and confirmed [49] to be representative for ROP exploits.
Exploit
Active-Set Attacks [48, 49]:
Type 1 (T1)
Type 2 (T2)
Type 3 (T3)
Type 4 (T4)
Type 5 (T5)
CALL-ret violating [47]:
Innocent flesh on the bone
Stopped Remark
✓
✓
✓
✓
✓
Return to any stack func.
Return to a child process
Return to earlier callsites
Return to future callsites
Return to program begin
Caller-callee function
calling conv. violation
Table 4: Stopped backward-edge attack types.
✓
Table 4 presents a summary of several types of backward-edge
based attacks and the primitives on which these rely. For each of
the types from T1 up to T5, our suite contains at least one program
reflecting this behavior. T1. Return to any active function on the
stack (not just the last function put on the call stack). T2. Return to
parent code in a child process after a fork. T3. Return to earlier call-
sites in functions on the stack. T4. Return directly to future callsites
in functions on the stack. T5. Return directly to the beginning of a
program (typically the second callsite in main). Next, we present the
backward-edge primitives on which the attacks depicted in Table 4
rely. Note that T1 up to T5 can independently be used to bypass
the following backward-edge protection [5, 48, 49] techniques.
Type
T1
T2
T3
T4
T5
Full CFL
ρFEM
✗
✗
✗
✗
✗
✓
✓
✓
✓
✓
Table 5: Detected exploit types, T1-T5.
Table 5 depicts the results after running the programs from our
test suite with ρFEM. Note that we could not evaluate these with
the CFL tool as this is not open source. However, based on the
analysis of the CFL [7] paper, we expect that CFL cannot detect any
of these 5 types of backward-edge violations as it allows a callee to
return to any address following an indirect or direct function call.
Further, we explain how ρFEM mitigates these attacks. T1: none of
the addresses enforced by ρFEM is located at a function start, only
legitimate function return addresses are allowed. T2: in case the
return address is not in the legal return target set of the particular
return, then this is forbidden. T3: callsite addresses are rejected
by ρFEM completely, allowed addresses are only these which are
following a callsite. T4: future callsite addresses are not included by
ρFEM in the target address set and as such these are forbidden. T5:
callsite addresses are completely forbidden by ρFEM. Lastly, ρFEM
stops the Galileo ROP attack [47]. This covers returning to arbitrary
code in mapped libraries as well. This is due to the fact that ρFEM
forbids that the callee can return to any program address.
6.3 Security Analysis
In this section, we evaluate the availability of gadgets after hard-
ening the program with ρFEM. Assuming that the initial backward
edge is protected by ρFEM, three conditions have to be met to make
a gadget usable in a ROP chain: (1) the gadget has to start with
a NOP instruction (in order to be targetable from a secured back-
ward edge), (2) the payload of the NOP instruction has to pass the
backward-edge check of the incoming backward edge, and (3) the
return instruction at the end of the gadget has to be either unpro-
tected or its target has to be contained in the return target set of the
function the gadget is part of. Note that condition (2) has already
been extensively discussed in RQ1 in a generalized form. Assuming
the return target set of the gadget is not sufficient to extend the
chain to the next gadget (as shown in RQ1), then condition (3) only
holds if the backward edge is unprotected.
O
T
L
#
12,664
5,855
15,789
1,805
375,032
75,187
#
M
#
ρ F E
19,723
7,309
20,392
2,056
490,570
106,766
P
O
n o- N
19,430
7,154
20,212
2,007
485,396
104,935
# ret c h e c k
n ot p r ot.
#
11,033
1,100
8,475
184
99,853
23,486
77
132
128
43
3,222
1,275
n ot p r ot.
%
0.39%
1.81%
0.63%
2.09%
0.66%
1.19%
0.95%
Program
Httpd
Lighttpd
Nginx
Memcached
NodeJS
Tr. Server
geomean
Table 6: Number of ret gadgets before and after hardening.
Table 6 depicts the results obtained after analyzing the hardened
and unhardened program binaries using the ROPgadget [28] tool
475ρFEM: Efficient Backward-edge Protection Using Reversed Forward-edge Mappings
ACSAC 2020, December 7–11, 2020, Austin, USA
(ROP gadget finding tool). We passed the following arguments to
ROPgadget: --depth=30 --nosys --nojop.
Next, we consider the Table 6 columns numbered from left to
right; in total, we have seven columns. The second column (# LTO)
in Table 6 shows the number of unique gadgets found in the un-
hardened binary with only LTO enabled. We consider a gadget to
be unique if it consists of a unique sequence of instructions.
The third column (# ρFEM) presents the number of unique gad-
gets in the hardened binaries with ρFEM. In this case, for a gadget
to be unique, we also consider the existence of a NOP instruction at
the beginning of the gadget. This means that two gadgets with the
same sequence of instructions, one with NOP before these instruc-
tions and one without, are different gadgets. This differentiation
is important since for an attack the existence of the leading NOP
is relevant. Due to this change, the number of gadgets found by
ROPgadget [28] increases compared to the unhardened binary.
The fourth column (# no-NOP) shows the number of gadgets in
the hardened binary that fail condition (1), i.e., these gadgets do
not start with a NOP instruction and are therefore not targetable
by a secured backward edge. We can observe that most gadgets do
not start with a NOP instruction as expected, since the number of
callsites (and therefore of NOP instructions) is small compared to
the total number of instructions.
The gadgets depicted in column five (# ret check) end with
a return check generated by ρFEM and therefore can only target
gadgets that match the return target set of the function the gadget
is contained in. Note that the return instructions not protected by
ρFEM are mostly either boilerplate functions (e.g., global setup and
init functions) or small stack adjustment functions generated by
LLVM. These functions rarely contain any calculating instructions
(e.g., ADD, SUB) with non-immediate operands.
The sixth column (# not prot.) shows the number of gadgets
for which both conditions (1) and (2) hold. These gadgets are not
counted in column two or three and therefore have a NOP instruction
at the beginning, but no check of the backward edge. These are the
remaining gadgets that can be used for a ROP chain attack without
exploitation of the residual return target set evaluated in RQ1.
Lastly, the seventh column (% not prot.) depicts the percentage
of all gadgets in the hardened binary that are not protected after
hardening the program binary with ρFEM. We can observe that
in geomean only 0.05% (1 - 0.95%, see Table 6) of the previously
found gadgets are still useful after hardening the program binary
with ρFEM. Thus, ρFEM protects in geomean > 99% of the identified
gadgets from usage during an attack without averaging the results.
6.4 Runtime Overhead
In this section, we evaluate the runtime overhead of ρFEM by using
the SPEC CPU 2017 benchmarks and real-world programs.
Table 7 depicts the runtime overhead when running ρFEM on
all pure C/C++ programs contained in the SPEC CPU2017 (rate and
speed) benchmark. Note that we could not compile 602.gcc_s and
502.gcc_r with SafeStack, whereas it was possible with ρFEM. For
this reason, we did not include these programs in Table 7. As re-
ported in the last row of the table, the average runtime overhead of
ρFEM is 0.11% comparing favorably to SafeStack’s overhead which
%
O
T
L
O
T
%
O
T
O
M
M
L
L
+
+
+
+
S afe Sta c k
S afe Sta c k