(cid:98)B.leaf proof ← M.MerkleProof(i);
ProcessBlock(B, (cid:98)B);
foreach (B, (cid:98)B) ∈ received state do
ProcessBlock(B, (cid:98)B);
if (cid:99)B2.leaf or (cid:99)B2.trailing points to B1.
send Vi (0 ≤ i ≤ k − 1) to other nodes;
// In implementation, only need to send those
blocks not sent before.
}
38: ProcessBlock(B, (cid:98)B) {
// do some veriﬁcations
i ← last log2 k bits of (cid:98)B.hash;
verify that (cid:98)B.hash has d leading zeroes;
verify that hash(B) = (cid:98)B.hash;
verify that (cid:98)B.leaf is leaf i in the Merkle tree, based on B.root and
(cid:98)B.leaf proof;
verify that (cid:98)B.leaf = (cid:98)A.hash for some block (A, (cid:98)A) ∈ Vi;
verify that B.trailing = (cid:98)C.hash for some block (C, (cid:98)C) ∈ ∪k−1
(cid:98)B.rank ← (cid:98)A.next rank;
(cid:98)B.next rank ← (cid:98)C.next rank;
if ((cid:98)B.next rank ≤ (cid:98)B.rank) then (cid:98)B.next rank ← (cid:98)B.rank + 1;
if (any of the above 5 veriﬁcations fail) then return;
// compute rank and next rank values
j=0 Vj;
39:
40:
41:
42:
43:
44:
45:
46:
47:
48:
49:
50:
51:
52:
53:
54: Vi ← Vi ∪ {(B, (cid:98)B)};
// update local data structures
update trailing;
update Merkle tree M;
55:
56:
57: }
58:
59: OutputSCB() {
60:
61:
62:
63:
64:
65:
66:
67:
68:
69:
70:
71: L ← ∅;
72:
73:
74:
75:
76:
77: }
// determine partially-conﬁrmed blocks and confirm bar
for (i = 0; i < k; i++) {
Wi ← get longest path(Vi);
(Bi, (cid:99)Bi) ← the last block in partiali;
partiali ← blocks in Wi except the last T blocks;
yi ←(cid:99)Bi.next rank;
}
all partial ← ∪k−1
confirm bar ← mink−1
i=0 partiali;
i=0 yi;
// determine fully-conﬁrmed blocks and SCB
foreach (B, (cid:98)B) ∈ all partial {
if ((cid:98)B.rank < confirm bar) then L ← L ∪ {(B, (cid:98)B)};
}
sort blocks in L by rank, tie-breaking favoring smaller chain id;
return L;
Fig. 3: Pseudo-code of the (k, p, λ, T )-OHIE protocol.
consensus, using different T values in OHIE has a similar
effect as in Nakamoto consensus. For example, a user can use
a larger T for a higher security level. To simplify discussion,
however, we consider some ﬁxed T value.
Overview. Figure 3 gives the pseudo-code of OHIE, as run
by each node. In the main loop (Line 8 to 10) of OHIE, a
node receives messages from others, makes one attempt for
solving the PoW (i.e., makes one query to the random oracle
or hash function), and then sends out messages. The messages
contain OHIE blocks. Such a main loop is exactly the same
as in Nakamoto consensus [26], [40]. Note that the block
generation rate is signiﬁcantly lower than the rate of queries
to the random oracle. Hence, most of the time, the main loop
will not have any new messages to receive/send. In an actual
implementation, such sending/receiving of messages can be
done in a separate thread.
The function OutputSCB() can be invoked whenever
needed. It produces the current SCB, by exactly following
the description in Section III-D.
Key data structures. Each OHIE node maintains sets V0
through Vk−1. Vi initially contains the genesis block for chain
i. During the execution, Vi is a tree of blocks, containing all
those blocks with a path to that genesis block. We use Wi to
denote the longest path (from the genesis block to some leaf)
on this tree. All blocks on Wi, except the last T blocks, are
partially-conﬁrmed.
The Merkle tree M is constructed by using the hash of the
very last block on Wi (0 ≤ i ≤ k − 1) as the k leaves. Each
node further maintains a trailing variable, which is the hash
of the trailing block. The trailing block is the block with the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:07 UTC from IEEE Xplore.  Restrictions apply. 
95
largest next rank value, among all blocks in ∪k−1
i=0 Vi. (Note
that the trailing block may or may not be in ∪k−1
i=0 Wi.) If there
are multiple such blocks, we let the trailing block be the one
with the smallest chain id. Both M and trailing should be
properly updated whenever the node receives new blocks.
Block generation/veriﬁcation. A block B in OHIE consists
of some transactions, a fresh nonce, the Merkle root, and a
B.trailing ﬁeld. All these ﬁelds are fed into the hash func-
tion, during mining. Section III-B explains why we include the
Merkle root. The following explains the B.trailing ﬁeld.
As explained in Section III-D, regardless of which chain
the new block B ends up belonging to, we want B to help
that chain to increase its rank to catch up with the “longest
chain” (in terms of rank). To do so, all we need is to set B’s
next rank to be large enough. A naive design is to let the
creator of B directly set B’s next rank, based on its local
Vi’s. Such a design enables the adversary to pick the maximum
possible value10 for that ﬁeld. Doing so exhausts the possible
values for next rank, since the next rank of blocks on a
given chain needs to keep increasing.
This is why in OHIE, each node maintains a trailing
variable (i.e., the hash of the trailing block11). The miner sets
B.trailing ← trailing, and B.trailing (as part of B) is
fed into the hash function. When a node u receives a new block
B, the node will verify whether it has already seen some block
C whose hash equals B.trailing. If so, u sets next rank
of B to be the same as the next rank of C. Otherwise B
will not be accepted. Doing so prevents the earlier attack.
Note that the adversary can still lie, and claim some arbitrary
block as its trailing block. Theorem 1 in Section V, however,
will prove that this does not cause any problem. Intuitively,
by doing so, the adversary is simply refusing to help a chain
to grow its rank to catch up. But the next honest block on the
chain will enable the chain to grow its rank properly, and to
immediately catch up.
Block attachment. Some information about a block is not
available until after the block is successfully mined, and we
include such information in an attachment for the block. The
attachment for a block is always stored/disseminated together
with the block. We always use (cid:98)B to denote an attachment
for a block B. (Note that (cid:98)B is not fed into the hash function
log2 k bits in B’s hash. (cid:98)B will include leaf i of the Merkle
tree, and the corresponding Merkle proof. For convenience, (cid:98)B
also contains the hash of B, in its (cid:98)B.hash ﬁeld.
An attachment (cid:98)B further contains a rank value and a
receives a new block B and its attachment (cid:98)B,
independently computes the proper values for (cid:98)B.rank and
next rank value, for the block B. (The block B itself actually
does not have a rank or next rank ﬁeld.) When a node
the node
when we compute the hash of B.) Speciﬁcally, let i be the last
10next rank must have a ﬁnite domain in actual implementation.
11Our trailing block is the block with the largest next rank in ∪k−1
i=0 Vi.
One could further require the trailing block to be in ∪k−1
i=0 Wi. The security
guarantees of OHIE (in Section V) and our proofs also hold for such an
alternative design.
values (Line 49 to 51 in Figure 3). Lemma 5 will prove that
except with an exponentially small probability (i.e., excluding
hash collisions and so on), for any block B, all honest nodes
(cid:98)B.next rank based on its local information, and use those
will assign exactly the same value to (cid:98)B.rank ((cid:98)B.next rank).
Finally, a genesis block B always has (cid:98)B.rank = 0 and
(cid:98)B.next rank = 1.
V. SECURITY GUARANTEES OF OHIE
Our analysis results presented in this section hold under all
possible strategies of the adversary.
A. Overview of Guarantees
Formal framework. Our formal framework directly follows
several prior works (e.g., [26], [40]). All executions we con-
sider are of polynomial length with respect to the security
parameter λ. We model hash functions as random oracles. The
execution of the system comprises a sequence of ticks, where
a tick is the amount of time needed to do a single proof-of-
work query to the random oracle by an honest node. Hence
in each tick, each honest node does one such query, while
the adversary does up to f n such queries. We allow these f n
queries to be done sequentially, which only makes our results
stronger. Deﬁne ∆ (e.g., 2 × 1012) to be δ (e.g., 2 seconds)
divided by the duration of a tick (e.g., 10−12 second) — hence
a message sent by an honest node will be received by all other
honest nodes within ∆ ticks. A block is an honest block if it
is generated by some honest node, otherwise it is a malicious
block. For two sequences S1 and S2, S2 is a preﬁx of S1 iff
S1 is the concatenation of S2 and some sequence S3. Here S3
may be empty — hence S1 is also a preﬁx of itself. Finally,
recall from Section IV the deﬁnitions of (p, λ, T )-Nakamoto
and (k, p, λ, T )-OHIE.
Main theorem on OHIE. We will eventually prove the fol-
lowing:
Theorem 1. Consider any given constant f < 1
2 . Then there
exists some positive constant c such that for all p ≤ 1
and all k ≥ 1, the (k, p, λ, T )-OHIE protocol satisﬁes all
the following properties, with probability at least 1 − k ·
exp(−Ω(λ)) − k · exp(−Ω(T )):
c∆n
k chains increases by at least T blocks every 2T
• (growth) On any honest node, the length of each of the
pn ticks.
• (quality) On any honest node and at any time, every T
consecutive blocks on any of the k chains contain at least
1−2f
1−f T honest blocks.
• (consistency) Consider the SCB S1 on any node u1 at
any time t1, and the SCB S2 on any node u2 at any time
t2.12 Then either S1 is a preﬁx of S2 or S2 is a preﬁx of
S1. Furthermore, if (u1 = u2 and t1 < t2) or (u1 (cid:54)= u2
and t1 + ∆ < t2), then S1 is a preﬁx of S2.
• (quality-growth) For all integer γ ≥ 1, the following
pn ticks of the execu-
pn +2∆ ticks,
property holds after the very ﬁrst 2T
tion: On any honest node, in every (γ +2)· 2T
12Here u1 (t1) may or may not equal u2 (t2).
96
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:07 UTC from IEEE Xplore.  Restrictions apply. 
at least γ · k · 1−2f
SCB.
1−f T honest blocks are newly added to
 ).
Values of c, λ, and T . The value of c in Theorem 1 will
be exactly the same as the c in Theorem 2 next. If we want
the properties in Theorem 1 to hold with probability 1 − ,
then both λ and T should be Θ(log 1
 + log k). The value of 
needed by a real application (e.g., a cryptocurrency system) is
typically orders of magnitude smaller than 1
k — hence λ and
T are usually just Θ(log 1
Four properties. The growth and quality in Theorem 1
are about
the individual component chains in OHIE. For
consistency, considering individual chains obviously is not
sufﬁcient. Hence, Theorem 1 proves consistency13 for the
SCB, which is the ﬁnal total order of the fully-conﬁrmed
blocks. Theorem 1 also proves the quality-growth of SCB,
showing that SCB will incorporate more honest blocks at a
certain rate. Ultimately, consistency corresponds to the safety
of OHIE, while quality-growth captures the liveness of OHIE.
B. Existing Result as a Building Block
Our proof later will invoke the following theorem from [40]
on Nakamoto consensus.
Theorem 2. (Adapted from Corollary 3 in [40].) Consider
2 . Then there exists some positive
any given constant f < 1
constant c such that for all p ≤ 1
c∆n , the (p, λ, T )-Nakamoto
protocol satisﬁes all the following properties, with probability
at least 1 − exp(−Ω(λ)) − exp(−Ω(T )):
• (growth) On any honest node, the length of the chain
increases by at least T blocks every 2T
• (quality) On any honest node and at any time, every T
consecutive blocks on the chain contain at least 1−2f
1−f T
honest blocks.
pn ticks.
• (consistency) Let S1 (S2) be the sequence of blocks
on the chain on any node u1 (u2) at any time t1 (t2),
excluding the last T blocks on the chain. Then either S1
is a preﬁx of S2 or S2 is a preﬁx of S1.
Combing the growth and quality properties immediately leads
to quality-growth for (p, λ, T )-Nakamoto:
• (quality-growth) Let S be the sequence of blocks on
the chain on any given honest node, excluding the last T
blocks. Then after the very ﬁrst 2T