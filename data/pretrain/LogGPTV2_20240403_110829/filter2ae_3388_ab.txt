  2. 具有无参构造方法
  3. 有直接或间接执行代码的方法，并且方法只能传入一个字符串参数。
​
根据这些限定，可以找到tomcat8里的javax.el.ELProcessor#eval(String) 以及springboot
1.2.x自带的groovy.lang.GroovyShell#evaluate(String)
ldap
server实例化ResourceRef传入ObjectClass（org.apache.naming.factory.BeanFactory）和beanClass（如javax.el.ELProcessor）
  1. forceString：paramxxxxx=method
  2. paramxxxxx: 执行代码
这里只是简单总结了下，具体内容可参考这篇文章  
​
​
​
PS: 简单记录下调试点  
LdapCtx #c_lookup:1085, -> DirectoryManager#getObjectInstance:194
(factory.getObjectInstance) -> BeanFactory#getObjectInstance:193,  
获取beanClass，如果本地没有则会退出  
通过forceString值，并通过等号（61）分割值，进而反射获取方法  
​
调用方法  
调用堆栈  
## ldap小结
调用堆栈和触发点大致如下
    com.sun.jndi.ldap.LdapCtx#c_lookup
        com.sun.jndi.ldap.Obj#decodeObject
            com.sun.jndi.ldap.Obj#deserializeObject             // 1 触发反序列化利用链 3 获取本地工厂类的payload
            com.sun.jndi.ldap.Obj#decodeReference               // 2 获取远程类加载的Reference对象    
        javax.naming.spi.DirectoryManager#getObjectInstance
            javax.naming.spi.NamingManager#getObjectFactoryFromReference        // 2 远程类加载
            factory.getObjectInstance                                           // 3 本地工厂类利用链触发
# jndi+rmi利用
RMI在数据传输过程中是通过序列化传输，所以就有了反制server端的情况出现。  
而ldap就是标准的ldap协议进行通信，协议交互不需要序列化  
​
## RMI反序列化
所以第一种利用方式也由此诞生  
server端（应该是注册端）在写入头部字节后，直接写入一个反序列化利用链，这段利用是ysoserial里实现的  
客户端在接收到服务端的数据后，在如下位置触发反序列化  
StreamRemoteCall.class#executeCall()  
    executeCall:252, StreamRemoteCall (sun.rmi.transport)
    invoke:375, UnicastRef (sun.rmi.server)
    lookup:119, RegistryImpl_Stub (sun.rmi.registry)
    lookup:132, RegistryContext (com.sun.jndi.rmi.registry)
    lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)
    lookup:417, InitialContext (javax.naming)
流量，client发送一个Call消息，远端恢复一个ReturnData消息。  
上述反序列化利用链用BadAttributeValueExpException封装了一层，其实不用封装也能触发，但作者估计是为了隐藏实际报错，封装了一个异常类，如下是未封装，提示rmi反序列化异常  
封装后  
## 引用类远程加载
和ldap类似，也只能适用于低版本，  
# 补充
java.rmi.server.useCodebaseOnly  
RMI核心特点之一就是动态类加载，如果当前JVM中没有某个类的定义，它可以从远程URL去下载这个类的class，动态加载的对象class文件可以使用Web服务的方式进行托管。这可以动态的扩展远程应用的功能，RMI注册表上可以动态的加载绑定多个RMI应用。对于客户端而言，服务端返回值也可能是一些子类的对象实例，而客户端并没有这些子类的class文件，如果需要客户端正确调用这些子类中被重写的方法，则同样需要有运行时动态加载额外类的能力。客户端使用了与RMI注册表相同的机制。RMI服务端将URL传递给客户端，客户端通过HTTP请求下载这些类。  
关于rmi的动态类加载，又分为两种比较典型的攻击方式，一种是大名鼎鼎的JNDI注入，还有一种就是codebase的安全问题。  
前面大概提到了动态类加载可以从一个URL中加载本地不存在的类文件，那么这个URL在哪里指定呢?其实就是通过java.rmi.server.codebase这个属性指定，属性具体在代码中怎么设置呢?
    System.setProperty("java.rmi.server.codebase", "http://127.0.0.1:8000/");
按照上面这么设置过后，当本地找不到com.axin.hello这个类时就会到地址：下载类文件到本地，从而保证能够正确调用  
前面说道如果能够控制客户端从哪里加载类，就可以完成攻击对吧，那怎么控制呢？其实codebase的值是相互指定的，也就是客户端告诉服务端去哪里加载类，服务端告诉客户端去哪里加载类，这才是codebase的正确用法，也就是说codebase的值是对方可控的，而不是采用本地指定的这个codebase,当服务端利用上面的代码设置了codebase过后，在发送对象到客户端的时候会带上服务端设置的codebase的值，客户端收到服务端返回的对象后发现本地没有找到类文件，会去检查服务端传过来的codebase属性，然后去对象地址加载类文件，如果对方没有提供codebase,才会错误的使用自己本地设置的codebase去加载类。  
​
看似这个利用很简单，而且听起来很普遍的样子，其实这个利用是有前提条件的
  1. 由于Java SecurityManager的限制，默认是不允许远程加载的，如果需要进行远程加载类，需要安装RMISecurityManager并且配置java.security.policy。
  2. 属性 java.rmi.server.useCodebaseOnly 的值必需为false。但是从JDK 6u45、7u21开始，java.rmi.server.useCodebaseOnly 的默认值就是true。当该值为true时，将禁用自动加载远程类文件，仅从CLASSPATH和当前虚拟机的java.rmi.server.codebase 指定路径加载类文件。使用这个属性来防止虚拟机从其他Codebase地址上动态加载类，增加了RMI ClassLoader的安全性。