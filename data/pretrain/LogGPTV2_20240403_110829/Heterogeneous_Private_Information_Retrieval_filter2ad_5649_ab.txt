1
. . .
0
0]
(2)
If the client did not care about privacy, she would send (cid:126)ej
to the server(s), and the server(s) could generate the client’s
response by multiplying the vector into the database matrix D:
(cid:126)ej.D = [Dj,1 Dj,2
. . . Dj,s]
(3)
Private Information Retrieval: A PIR technique allows
the client to obtain this response without revealing (cid:126)ej to the
server(s). Existing PIR techniques use two main approaches
to obfuscate (cid:126)ej: (a) Homomorphic encryption: In such pro-
tocols [50], [36], [2], [1], [4], the client encrypts (cid:126)ej element
by element before being sent to the servers. During the data
recovery phase, the client will extract her intended record by
decrypting the components of (cid:126)ej × D. (b) Secret Sharing: In
other PIR protocols [26], [30], [29], [20], [37], the client will
use secret sharing to generate different vector shares for (cid:126)ej, and
she will send the shares to the PIR servers. Most of the existing
single-server, CPIR protocols use homomorphic encryption,
and most of the existing multi-server, ITPIR protocols use
secret sharing.
Key PIR Designs: Here we overview the two key multi-
server PIR designs that are the most relevant to our work. We
present a more comprehensive overview of other PIR designs
in Appendix A.
Goldberg ITPIR using Shamir Secret Sharing. Goldberg’s
PIR [26] is an ITPIR scheme. The client uses Shamir’s secret
sharing [48] to split the unit vector (cid:126)ej into (cid:96) shares (each a
vector of size r), where the shares are sent to (cid:96) servers. Each
server will send back the multiplication of its received share
into the database matrix D. Finally, the client will interpolate
the query responses component-wise at x = 0 to extract her
interested row of the database.
Henry et al. ITPIR using Ramp Secret Sharing. Henry et
al. [30] modify Goldberg’s PIR [26] by replacing Shamir’s
(t + 1, (cid:96))-threshold secret sharing with a (t + 1, q, (cid:96))-ramp
secret sharing [10]. This enables a client to encode q secrets
in a (t + q − 1) degree polynomial, as opposed to only one
secret in a t degree polynomial in [26]; therefore, the protocol
is able to query multiple queries from the PIR servers at any
round of the PIR protocol. To query the q records, the client
will receive (t + q) responses from the PIR servers.
3
Table II: List of notations used in secret sharing schemes
(cid:96)
t
ρ
q
S = {s1, s2, . . . , sq}
Number of participants
Privacy threshold
Large prime number
Number of secrets
Secrets
B. Preliminaries on Secret Sharing
The goal of secret sharing is to split a secret into multiple
shares (e.g., by a trusted dealer) such that the secret can be
reconstructed by combining a certain number of the shares.
The dealer distributes these shares among multiple sharehold-
ers who participate in the protocol. A (t+1, (cid:96)) threshold secret
sharing scheme distributes a secret among (cid:96) shareholders in a
way that any coalition of up to t shareholders can not learn
anything about the secret, while a coalition of more than t
shareholders can fully reconstruct the secret. A scheme is
called multi-secret sharing [54], [15], [42] if it shares multiple
secrets in each round of the protocol.
Notations: Table II lists the notations we use for secret sharing
algorithms.
Key Secret Sharing Designs: We introduce two secret
sharing schemes that have been the basis of state-of-the-art
PIR protocols. Our secret sharing algorithm, introduced later,
is built upon these schemes.
Shamir Secret Sharing. Shamir’s scheme [48] is a (t + 1, (cid:96))-
threshold scheme, in which the shares are the points of a
polynomial function. Speciﬁcally, a secret s is shared as
follows:
function
I The dealer chooses a random polynomial
f (x) ∈r Fρ of degree t, where f (0) = s is the secret.
II The dealer chooses (cid:96) different non-zero x-coordinates
{x1, . . . , x(cid:96)} uniformly at random, where xi ∈r Fρ for
1 ≤ i ≤ (cid:96).
III The dealer sends (xi, f (xi)) to the ith shareholder.
Any coalition of k > t shareholders can recover the secret s
from their shares by using Lagrange polynomial interpolation.
Therefore, given k > t shares (x1, y1), (x2, y2), . . . , (xk, yk)
the shared secret is reconstructed as
k(cid:89)
k(cid:88)
m=1
about the secrets. However, for t < k < t + q participants, the
joint distribution of the secrets is not uniform, therefore it leaks
information about the secrets. The dealer takes the following
steps to share q secrets {s1, . . . , sq}:
I Chooses {yq+1, . . . , yq+t} randomly from Fρ
II Finds a polynomial f (x) with degree of at most t + q − 1
that contains the following points:
(1, s1), . . . , (q, sq), (q + 1, yq+1), . . . , (q + t, yq+t)
III Sends secret share (xi, f (xi)) to the ith shareholder for
1 ≤ i ≤ (cid:96) (xis are random, non-zero and different
numbers from Fρ).
To retrieve the secrets, any k ≥ t + q shares can give away the
secrets using Lagrange interpolation:
k(cid:88)
m=1
ym(
sj =
k(cid:89)
n=1,n(cid:54)=m
(j − xn)(xm − xn)
−1) mod(ρ) 1 ≤ j ≤ q
(5)
III.
INTRODUCING HETEROGENEOUS PIR
A PIR protocol
is either single-server or multi-server.
The security of multi-server PIR relies on assuming that its
multiple PIR servers do not collude; this allows multi-server
protocols to impose lower computation overheads than single-
server protocols. Consequently, single-server and multi-server
protocols are suited to different application scenarios. Note that
this is a different classiﬁcation than computational PIR (CPIR)
versus information-theoretic PIR (ITPIR), but all single-server
PIR protocols fall
in the category of computational PIR
(CPIR) [16], [36], [2], [1], [12], [13], [22], [32], [38], [50],
[4], as proved by Chor et al. [17].
Existing multi-server PIR constructions [30], [8], [17],
[24], [26], [55], [7], [20], [18] impose uniform computation
and communication overheads on their (non-colluding) mul-
tiple PIR servers; therefore, we call them homogenous. In
this paper, we introduce heterogeneous PIR (HPIR),1 which
is a subclass of multi-server PIR protocols. An HPIR protocol
is a multi-server PIR protocol with asymmetric computation
and communication constraints on its servers. That is, some
of its servers (called rich servers) handle higher computa-
tion/communication overheads than the others (called poor
servers).
We believe that HPIR protocols will enable new application
scenarios for multi-server PIR, as well as improve the usability
of some of the known applications of PIR. To support this
claim, in this section we present several potential application
scenarios for heterogeneous PIR algorithms.
Note that for some of these applications, one could instead
use a single-server PIR, however, existing single-server PIRs
are too slow for most of the in-the-wild applications. Also,
note that we only present the intuitions on why HPIR will ﬁt
1Note that some previous work [9] uses HPIR to refer to hybrid PIR, another
class of PIR.
s =
ym(
n=1,n(cid:54)=m
xn(xn − xm)−1) mod(ρ)
(4)
A. Potential Applications Scenarios
On the other hand, for a coalition of k ≤ t shareholders,
any s ∈ Fρ has the same probability of being the secret.
Ramp Variant of Shamir Secret Sharing. While a Shamir (t +
1, (cid:96)) threshold scheme shares only one secret using a t-degree
polynomial, a (t + 1, q, (cid:96))-ramp secret sharing [10] uses a (t +
q − 1)-degree polynomial to share q secrets simultaneously
with the privacy level of t. That is, the dealer shares q secrets
{s1, . . . , sq} from Fρ among (cid:96) participants in a way that any
coalition of t + q or more participants can retrieve all of the q
secrets, but any set of participants up to t cannot learn anything
4
these application scenarios; integrating HPIR in each of the
following scenarios will require additional engineering efforts
(e.g., to synchronize the PIR servers), which is out of our
scope.
Finally, note that in our HPIR applications, we assume the
HPIR servers to be non-trusted. In a given HPIR application,
the PIR database itself is not privacy-sensitive, but the users’
accesses to the records of the database is privacy-sensitive.
Therefore, the PIR database can be replicated on non-trusted
servers (like CDN servers). On the other hand, we assume the
PIR servers to not collude with each other. As discussed later,
this is a realistic assumption as, in our applications, the HPIR
servers have no motivation to collude.
1) Privacy-preserving Content Delivery: Content publish-
ers increasingly use Content Delivery Networks (CDNs) to
improve the security and performance of their services. How-
ever, to do so, they have no choice but to expose their clients’
activities to the third-party CDN operators they use (normally,
by sharing their TLS private keys with their CDN providers).
For instance, a CDN provider (say, Fastly) hosting the website
of an online newspaper (say, the New York Times) will be able
to see which articles are viewed by any particular visitor of
that online newspaper. Note that, in this scenario, the privacy-
sensitive information is not the hosted web content (e.g., all
of the NYT articles are public) but the metadata of accessing
such (public) content by the users. The problem is applicable
to similar CDN-hosted services, e.g., a patents database, a
certiﬁcate authority, a software updates service, etc.
We suggest
to deploy PIR on CDN servers to enable
privacy-preserving content delivery. Existing single-server PIR
protocols are too slow to be used in this application (and most
other proposed applications of PIR); we therefore suggest a
heterogeneous 2-servers PIR protocol to be used for this appli-
cation. This is illustrated in Figure 1: the CDN edge servers act
as the “rich” servers and the content publisher’s origin servers
act as the “poor” servers. Our heterogenous setting is ideal
for this application: The CDN edge servers (e.g., Fastly edge
servers) are often much closer to the clients and are designed to
be capable of handling very large trafﬁc volumes. By contrast,
content publisher servers (e.g., www.nytimes.com/’s origin
servers) aim to minimize their communication and computa-
tion costs (in fact, this is one of the key reasons for using
CDNs for content hosting). As mentioned before, all existing
multi-server PIR protocols are homogeneous. This scenario
demonstrates the need for heterogeneous PIR protocols that
impose non-uniform computation and communication loads on
the multiple PIR servers running the protocol.
Note that
like standard multi-server PIR protocols, we
assume the HPIR servers to be non-colluding. This is a realistic
assumption, since in our mentioned applications of HPIR, the
servers have no motivation to collude! For instance, in the
CDN application of HPIR presented here, the origin servers
(owned by the New York Times) have no reason to collude with
the CDN HPIR servers, as this will compromise the privacy
of their users.
Figure 1: Illustrating how a heterogeneous PIR scheme can
enable private content delivery by CDNs.
distribution. Recent work [37] has suggested to use PIR to
protect privacy in such services, particularly for BitTorrent
and Spotify. We argue that an HPIR protocol will signiﬁcantly
improve the usability of PIR for such applications. This is
because in these systems, the peers are located in diverse
geographic locations, and have different computation and
communication resources. Therefore, when a heterogeneous
PIR is deployed in this setting, a client can obtain larger trafﬁc
volumes from nearby seeding peers compared to distant peers
(while protecting privacy through PIR), therefore improving
the overall download experience.
3) Query Privacy in Cache Networks: A multitude of
next-generation network architectures cache content objects to
improve the overall utility of the network, e.g., Named Data
Networking (NDN) [56], Publish-Subscribe Internet Routing
Paradigm (PSIRP) [51], Data Oriented Network Architecture
(DONA) [34], Network of Information (NetInf) [3], and Mo-
bilityFirst [52]. A key privacy challenge to the design of cache
networks like NDN is the privacy of queries against cache
routers. That is, a cache router will learn the content names
requested by a client in order to be able to serve her. We
propose to use PIR as a mechanism to enforce cache privacy in
cache networks. Our proposal is to have the cache routers serve
as PIR servers, and store named objects into a PIR database.
A client interested in a particular named object will need to
query the cache routers through a PIR protocol in order to
preserve her query privacy. We therefore suggest multi-server
PIR protocols to be used for this application. However, existing
multi-server designs rely on the assumption that PIR servers
should not collude. Therefore, the two (or more) cache routers
queried by a client should be under different jurisdictions, i.e.,
run by competing Internet entities. For instance, in a 2-server
setting, the ﬁrst PIR server queried by the client can be the
edge router of the client, and the second router can be a router
in a non-peer AS or the content publisher itself (therefore non-
colluding with the edge router).
2) Private P2P File Sharing: Various popular services such
as Spotify, PPTV, and BitTorrent use their clients for content
As can be seen, in this setting, the edge router (e.g., the
client’s default gateway) can tolerate much higher bandwidth
5
CDNOrigin Server (https://www.nytimes.com)Acting as poor PIR ServerCache Server Acting as Rich PIR ServerPIR Query & Response IPIR Query &Response IIPIR Clientand computation burden than the distant router/publisher—in
fact, the whole purpose of information centric networks is to
reduce transition loads by caching content on local routers.
Therefore, the deployed PIR protocol needs to be heteroge-
nous.
IV. OUR PIR-TAILORED SECRET SHARING ALGORITHM
In this section, we deﬁne and design a PIR-tailored secret
sharing scheme that we use in the design of our PIR protocol.
Why a new scheme? Similar to the state-of-the-art multi-
server PIR schemes [26], [30], [37], our proposed HPIR
scheme uses secret sharing to split the query vector between
PIR servers. To enable heterogeneity, an HPIR protocol needs
to use a multi-secret sharing algorithm, as introduced earlier.
This will allow an HPIR protocol to split PIR computations
and communications unevenly between PIR servers. Note that
some prior PIR protocols by Henry et al. [30] and Li et
al. [37] have used multi-secret sharing algorithms. However, a
ramp secret sharing algorithm is not suitable for heterogeneous
PIR: in a ramp secret sharing scheme, the number of required
servers increases with the number of shared secrets; therefore,
for an HPIR protocol based on a ramp secret sharing scheme,
the number of PIR servers increases with the degree of hetero-
geneity. However, most of the practical application scenarios
of HPIR (as introduced in Section III) need to be deployed
on two servers, as they comprise two non-colluding parties
(e.g., a content publisher and a CDN provider). Therefore, we
design a PIR-tailored multi-secret sharing algorithm in which
the number of shareholders does not increase with the number
of shared secrets. This allows our HPIR protocol that uses this
PIR-tailored secret sharing to be run by as few as only two
servers, regardless of the degree of heterogeneity.
A. Introducing PIR-tailored Secret Sharing
A PIR-tailored secret sharing algorithm is one that can be
used as part of a PIR protocol, but has no use in traditional
applications of secret sharing algorithms. In particular, unlike
standard secret sharing algorithms, in a PIR-tailored secret
sharing, the shareholders can not recover the secrets even if
they all collude; the shareholders can only use their shares to
perform some computation (i.e., on the PIR database) and send
the results to the dealer. Also, unlike standard secret sharing
algorithms, our PIR-tailored secret sharing only shares secrets
from {0, 1}; this is because in PIR applications, the client’s
(secret) query for each database record has one of the {0, 1}
values, where 1 implies interest in retrieving that database
record. Finally, in PIR-tailored secret sharing, only one of the
secrets in each PIR-tailored polynomial can be 1, and the rest
are 0s.
Before presenting our PIR-tailored secret sharing algo-