Fig. 2, respectively. The System Model (Module A), as demon-
strated in Section 4.1, is presented in form of a state machine which
abstracts and describes the system behavior of OAuth. Based on the
model, PyModel can generate test cases. The Test Harness (Mod-
ule B) then tampers and executes the test cases as discuss in Sec-
tion 4.2. Finally, the Test Oracle (Module C) compares the real
system behavior with the expected one in Section 4.3 and deter-
mines whether the system is vulnerable or not. As PyModel only
provides a framework to formally generate test cases to cover every
path in the state machine, OAuthTester therefore needs to deﬁne the
system model, implement the test harness and describe the normal
system behavior for the test oracle.
4. DESIGN OF OAUTHTESTER
In this section, we ﬁrst describe how to initialize the state ma-
chine with OAuth speciﬁcation and the network trace, so that Py-
Model can automatically generate test cases. For each test case,
we then present the testing scheme via fuzzing key security-related
parameters and the execution of out-of-order requests. After exe-
cuting the test case, we discuss the test oracle which can determine
whether the system under test is normal or not. We ﬁnally discuss
the reﬁnement of the system model for each individual implemen-
tation.
4.1 Deﬁne the State Machine with the Speciﬁ-
cation
As shown in Fig. 3, we use a state machine to represent the
OAuth call ﬂow. Every state transition affects the relationship among
the users (i.e. Alice and Eve), the application and the IdP. We there-
fore use the relationship among these four entities to describe a
state in the system model as follows:
• Alice_Status : (whether Alice logs into App and IdP as Alice/
• Eve_Status : (whether Eve logs into App and IdP as Eve/ Al-
• App_IdP : (whether App is authorized by Alice/ Eve);
Eve);
ice);
For sure, the above three variables are too coarse-grained to re-
ﬂect the logic of OAuth. For example, State S4 and S5 would be
depicted by these three variables in the same way. For this rea-
son, more OAuth speciﬁc information should be considered to de-
scribe each state. Taking advantage of the protocol speciﬁcation,
we can know what security-related key parameters should be re-
turned to the user for each request in advance. These RFC-deﬁned
key parameters therefore can be used to complement the represen-
tation of the state. Speciﬁcally, we have identiﬁed redirect_uri,
Module A: System ModelId ProviderClientKnowledge poolModule B: Test Harness2.test cases3. http request3. http request4. response 4. response 8. extract knowledge9. add knowledge to modelModule C:Test Oracle 5a.Real System Behaviour6.ValidationVerdicts:Exploits7. RectifyInput1: OAuth RFC Input2: network trace1. build5b. Updated System Behavior Figure 3: State Machine of Normal Operation of A Single User
• 1: We do not consider State S6, S7 afterwards, as they occur in the
• 2: This ﬁgure is another representation of Fig. 1. We often exchange
server side of the application.
these two ﬁgures in the rest of this paper.
STATE, scope, client_id, code, access_token, response_type and
client_secret as key parameters per RFC6749. Towards this end,
we deﬁne another variable knowledge_pool to encode these key pa-
rameters obtained so far.
into App);
Therefore, State S4 can be represented as follows:
• Alice_Status=(Alice logs into IdP as Alice, Alice does not log
• Eve_Status = N.A3;
• App_IdP = (App is authorized by Alice);
• knowledge_pool = (client_id, scope, response_type, redirect_uri,
STATE)
But the knowledge_pool for S5 is (client_id, scope, response_type,
redirect_uri, STATE, code).
Now that we have deﬁned the states, the next step is to deﬁne
the corresponding state transition(s) to complete the state machine.
For each state transition, we deﬁne another variable action which
represents the required HTTP request made by the user (Alice or
Eve) so that the system can move to the next state. Fortunately,
such requests are usually predictable. For example, Request R3,
R4 and R5 in Fig. 3 always have similar structures as shown in
Fig. 4. Therefore, we can use the normal representation of HTTP
requests to represent action by the following attributes: the user
who executes the action (Alice or Eve), the URL scheme (HTTP or
HTTPS), the domain name, the request method (Get or Post) and
key parameters contained in the above knowledge_pool.
4.1.1 Initialize the State Machine with the Network
Trace
We can directly determine the URLs for those predictable re-
quests (i.e., state transitions) in Fig. 4. However, other requests
such as the login request R2 and the logout request R9 may vary
widely depending on speciﬁc implementations. For such requests,
we ﬁrst sift through candidate requests by the key words contained
in the request (e.g., login, logout, App name, etc.). We then send
each candidate request to servers and compare the real response
with the expected one. For example, if a candidate request of R2
leads to a login form, then we assume such a URL corresponds to a
state transition deﬁned in the system model. Since these URLs al-
ways contain the key parameters speciﬁed by the knowledge_pool,
OAuthTester thereby can easily extract the values of these parame-
ters.
3Fig. 3 does not include the behavior of the attacker.
Figure 4: Part of traces for the running example
Note however that IdPs and applications often deploy OAuth in a
different way from the speciﬁcation and may invent new parameters
for their own business consideration. For example, the parameters
in the small (red) boxes of Fig. 4 are deﬁned by individual IdP and
application. Therefore, we should also consider these self-deﬁned
parameters to model the implementation features. Speciﬁcally, we
only focus on those security-related key parameters among the over-
whelming self-deﬁned parameters.
To determine the key parameters generated by speciﬁc App and
IdP, we carefully construct requests by randomizing the value of
this parameter or removing the parameter. After sending the crafted
request to servers, we monitor whether the response changed or
not.
If not, then such parameters should not be important and
thus will not be encoded to the knowledge_pool. The rationale
is that a key parameter should be valuable and its value or exis-
tence should affect the subsequent response. The fuzzing result
turns out that api_key and next are key parameters while others
such as ret, ext and hash of Request R4 are non-key parameters.
As a result, the knowledge_pool of State S4 can be represented
as: (client_id, scope, response_type, redirect_uri, STATE, api_key,
next). These key parameters contained in the knowledge_pool can
then be used to construct the action. For example, action R4 can
be represented as: [Alice, https, facebook.com/v2.0/dialog/oauth,
GET, redirect_uri, state, scope, client_id4].
4.2 The Testing Process
With the above system model, PyModel can automatically gen-
erate test cases to cover every execution path of OAuth. The test
case is represented by the state transition (action) and the expected
state resulted from this action. For example, the test case of R4 in
Fig. 4 is:
• action R4=[Alice, https, facebook.com/v2.0/dialog/oauth, GET,
• State S4 = [Alice_Status, Eve_Status, App_IdP, knowledge_pool].
For each test case, OAuthTester would either fuzz one key pa-
rameter contained in the action or try to break the execution order.
redirect_uri, state, scope, client_id];
4.2.1 Fuzzing Key Parameters
With the action (e.g., R4) generated by PyModel, Test Harness
ﬁrst determines a parameter (e.g., STATE) to be fuzzed. By exe-
cuting this fuzzed action, the system would either go to an error
page (i.e., remain in the original state such as S3) or move to the
expected state S4. For the former, Test Harness keeps fuzzing the
key parameters of action R4 until all key parameters in this request
4Other parameters such as ret, ext and hash, have been identiﬁed
as non-key parameters by fuzzing techniques.
R2: Redirect       to IdPR3: Authenticate with IdPR4: Authorize AppR5: IdP returns codeR6: App gets access tokenR8:User logs inR7: App retrieves User’s infoR9: User logs out AppR10: Revoke AuthorizationR11: User logs out IdPSecond RoundS11S0S1S2S3S4S5S6S7S8S9S10R1: User visits AppR4:https://www.facebook.com/v2.0/dialog/oauth?redirect_uri=http://imgur.com/signin/facebook&state=71e958b3edc02fb0368c81e4d71917a0&scope=email&client_id=127621437303857&ret=login&ext=1422535973&hash=AebXSOM95eUr5q5tR3:https://www.facebook.com/login.php?skip_api_login=1&api_key=127621437303857&signed_next=1&next=https://www.facebook.com/v2.0…&state=71e958b3edc02fb0368c81e4d71917a0#_=_&display=pageR5:http://imgur.com/signin/facebook?code=AQD7...7PMO&state=71e958b3edc02fb0368c81e4d71917a0#_=_Table 1: Properties and its Correspondig Fuzzing Scheme of Key Parameters
Propety
constant
variable
mandatory parameter
used for once or multiple times
user-speciﬁc
session-speciﬁc
Fuzzing Scheme
Compare the values between different sessions and users
Remove this parameter and randomize its values
Substitute the value with an used one and compare the response
Substitute the value with a fresh one of another user
Open a new browser and get a fresh value of this parameter to substitute the existing one
are fuzzed. For the latter, PyModel would continue to generate the
next state transition (e.g., R5) to be fuzzed. The veriﬁcation of the
original action (R4) will be carried on only if this action is deter-
mined (by PyModel) to be the next state transition again. And we
will keep track of the action which is not completely fuzzed so that
PyModel can come back to this action later.
To fuzz parameters more efﬁciently, we ﬁrst infer the security
properties of key parameters, which also helps to better understand
the logic of a real system (e.g., how parameters should be created,
processed and deleted). Speciﬁcally, we consider properties listed
in Table. 1. With the speciﬁcation in hand, we can understand the
security purpose of the key parameters deﬁned by the speciﬁcation.
As scuh, we can manually initialize the properties for these param-
eters. For example, the property of client_id is (constant), and
the property of STATE is (variable, once, session-speciﬁc, user-
speciﬁc). For other parameters deﬁned by speciﬁc IdP and App,
we do not know their properties in the beginning, and would ini-
tialize them to (variable, once, user-speciﬁc, session-speciﬁc) so as
to test all possible cases. The properties of all parameters can be
learned and rectiﬁed during the iterative model-reﬁning process in
Section 4.4.
There are two different formats of parameters which corresponds
to different fuzzing mechanisms. For parameters with special con-
structs like redirect_uri, response_type and scope, we leverage do-
main knowledge to tamper them. For example, we carefully craft
redirect_uri using constructs outlined in Covert Redirect [24]. For
other parameters such as the STATE parameter, the fuzzing scheme
shown in Table. 1 is adopted. For example, to verify whether the
STATE parameter is user speciﬁc, OAuthTester would substitute
Eve’s value with a fresh one of Alice.
Next we build an HTTP request by encoding the fuzzed action.
This HTTP request is then sent to IdP or App via Firefox and Sele-
nium [30] which can simulate the behavior of the user (e.g., button-
clicking and link-navigation). We also use Firebug and NetExport,
two plug-ins of Firefox, to automatically monitor and export re-
sponses from IdP/App. Values of key parameters are extracted
from the responses so that we can construct subsequent fuzzing
test cases. For example, to substitute a value with a parallel-session
one, we do not need to start a new session. Instead, this value can
be obtained from the previous response of a parallel session.
4.2.2 Break Execution Ordering
According to our threat model, we allow the attacker, regardless
of her current state, to launch any state transition. This is to re-
ﬂect the fact that Eve, the attacker, would always try to break the
request sequence which is supposed to be enforced by the applica-
tion and the IdP. The naive way would randomly select a request
for the attacker to execute, which is deﬁnitely inefﬁcient and inef-
fective. Towards this end, we only focus on the so-called waypoints
in [34] which describes states that play an important role in the in-
teractions of OAuth entities. As these waypoints always contain the
logic condition that is required to move to the next state, they are
supposed not to be bypassed in any path. For example, State S3, S4
in Fig. 5 should never be bypassed and are manually identiﬁed as
the waypoints due to the following rationale/ logic: a user cannot
authorize an application (S4) without the user logging into the IdP
(S3). On the other hand, the App cannot get the authorization result
(S5) unless the user authorizes the request (S4).
Therefore, a bypass of the waypoint implies a logic violation. To
discover logic ﬂaws, OAuthTester thereby manages to bypass the
waypoints by exploiting the technique of PyModel. The basic idea
is that, according to the current state of Eve, PyModel can gen-
erate the next state which follows the logic of OAuth. When the
current state is a waypoint, then this current state is mandatory for
the next state. In other words, if the attacker rollbacks the system
to the previous state (i.e., move out from the waypoint), this origi-
nally enabled next state is supposed to be impossible. Speciﬁcally,
the state transition from the previous state to the originally enabled
next state is exactly a sequence of requests that would bypass the
waypoint and thus break the logic.
In summary, the attacker constructs the illogical state transitions
as follows: 1) Gets the enabled next state according to the current
state; 2) When the current state is a waypoint, rollbacks the system
to the previous state by exploiting the knowledge of the speciﬁca-
tion; 3) Tries to reach the originally enabled next state from the
previous state.
Take Fig. 5 as an example. The App has already been autho-
rized at State S4, thereby IdP can issue a code to App as the au-
thorization result. However, the attacker would stop at State S4
and rollback the system to the previous state S3 by revoking the
authorization with Request R10. At State S3, State S5 is supposed
to be impossible. However the attacker would make an automatic
authorization request5 and try to reach State S5 without user’s au-
thorization. Surprisingly, two IdPs allow such an execution path
(i.e., S3 → S4 → S3 → S5) as demonstrated in Section 6.3. An-
other attempt shown in Fig. 5 by dashed lines is to authorize an App
without logging into IdP.
4.3 Test Oracle
By comparing the real and expected system behavior (i.e., ex-
pected state), the test oracle can determine whether the system is
normal or not. Since we have either mixed up the request sequences
or tampered key parameters, the current state is supposed to be dif-
ferent from the expected one. To get the current state, OAuthTester
ﬁrst queries App and IdP for the relationship of the four entities of
OAuth. Then it updates the knowledge_pool, especially the proper-
ties of the key parameters, by observing the response(s). Deviation
of the current system state from the expected behavior as deﬁned by
the system model (i.e., cannot reach the expected state in the state
machine) can imply loopholes or incorrect deﬁnition of the system
model. To validate whether such non-conformance would lead to
system insecurity, we check the following three security properties:
• Authentication: Eve can obtain information such as access to-
ken, code or session id, to convince the App/ IdP that she is
the victim. Or she can log into the application as Alice.
• Authorization: Eve can bypass the authorization or obtain in-
formation to do anything as in the authorized session.
5This request is not shown in Fig. 3.
It takes advantage of the
automatic authorization feature which is possible only when the
application is authorized.
• Association: The goal of OAuth is to correctly bind three
pieces of data: the user’s identity, the user’s permissions and
the session’s identity. This association is what applications
depend on to identify the user and his permissions.
Any violation of these properties demonstrates an exploit oppor-
tunity. In particular, OAuthTester would prompt a warning if the
properties of key parameters deﬁned by the speciﬁcation have been
updated. This is because these parameters are carefully designed
against subtle attacks. Once the predeﬁned properties are not sat-
isﬁed, it may lead to subtle breaches. For example, if redirect_uri
is updated as a variable, then the covert redirect attack [24] is pos-
sible. If no violation is discovered, OAuthTester executes the next
test case until every path is covered and no more new knowledge
can be learned.
4.4
Iteratively Reﬁne the System Model
The system reﬁnement consists of two major components: 1. up-
date the properties of key parameters; 2. rectify the implementation
of IdP. Firstly, OAuthTester can automatically update the proper-
ties for the key parameters by observing the response from OAuth
entities. For example, if an old value of STATE parameter in Re-
quest R5 still leads the system to state S8, then OAuthTester auto-
matically updates the property to multiple times other than once.
Given the updated property, OAuthTester can generate different
state-transitions (action) on the ﬂy. For example, if the STATE pa-
rameter can be used for multiple times, for the purpose of verifying
its session-speciﬁc property, we do not need to get a fresh value of
STATE parameter and just reuse the old one of a parallel session.
Another reﬁnement is due to the different implementations of
IdPs, which often add new features for their own business and
service regardless of the deﬁnition of RFC6749. For example,