of the Pachira lottree scheme easily lends itself to efﬁcient imple-
mentation, which renders the scheme a good candidate for practical
use in a variety of networked systems.
5.2 Implementation
The Pachira lottree scheme can be implemented and its winner
computed in a straightforward way. Besides summing up all con-
tributions, a single post-order traversal of the tree sufﬁces to assign
winning probabilities to each node. The details of the selection
scheme are presented in Algorithm 2.
The algorithm ﬁrst sums up the contributions of all nodes. It then
performs a post-order traversal of the tree, considering each node
only after computing results for the node’s children. For each node
n, Pachira ﬁrst computes the total contribution C(Sub(TS, n)) of
n’s subtree. Next, it computes the weight W (TS, C, Sub(TS, n))
of the subtree rooted at n by applying the function π to the ratio
C(Sub(TS, n))/C(TS). And last, it computes n’s expected value
LP (TS, C, n) by taking the subtree weight W (TS, C, Sub(TS, n))
and subtracting from it the weight of n’s children’s subtrees (cf (5)).
Once all expected values LP (TS, C, n) are computed, the winner
is selected in proportion to the expected values.
Because Pachira’s winner-selection mechanism requires only a
single bottom-up traversal of the tree, its running time is linear in
the number of participating nodes. Computational complexity is
thus not a signiﬁcant impediment to practical use of a Pachira lot-
tree. We address other practical issues in Sections 8 and 10.
5.3 Rescaling
The Pachira lottree does not satisfy ZVR, because the root node
Sys may be selected as the winner. A deceptively simple solution
to this problem is to re-run the winner-selection algorithm until a
non-root node is selected. This is equivalent to rescaling the lot-
tree by distributing the root’s winning probability among the other
nodes in proportion to their winning probabilities. Formally, let-
ting ln refer to the expected value LP (TS, C, n) for any node n,
the win odds on thus become
on = (cid:3) 0
, n = Sys
ln/(1 − lS) , otherwise.
However, if the win odds are thus rescaled but the payout is left
unchanged, the modiﬁed lottree will violate the USB property. To
see why this is so, note that when a new node joins the system,
although its location in the tree does not affect its own expected
value, its location does affect the root’s expected value, because if
it joins a heavily weighted subtree, it will pull more weight away
from the root than if it joins a lightly weighted subtree, due to con-
vexity of the weight function π. Because rescaling distributes the
root’s expected value among the other nodes, a node can game the
system by deliberately joining a lightly weighted subtree (for ex-
ample, joining as a child of the root), rather than joining as a child
of its solicitor. This leaves more win probability for the root, which
when distributed among all other nodes, increases the newly join-
ing node’s expected value.
This violation of USB can be avoided by rescaling the payout
amount to keep the expected values unchanged. This is achieved by
multiplying the payout by a factor of (1 − lS). The practicality of
this approach is limited by whether the payout is something (such
as money) that can be arbitrarily rescaled, and by other issues as
described in Section 8.
5.4 Analysis
We begin by proving an important lemma that states that the
weight W (T, C, n) of a node n is a lower bound for its expected
value.
LEMMA 5.1. It holds for all T , C, and n ∈ N (T ) that
LP (T, C, n) ≥ W (T, C, n).
PROOF. The property follows from π(c)’s convexity. First, it
follows from the deﬁnition (5) of LP (T, C, n) that if n is a leaf in
T , then LP (T, C, n) = W (T, C, n). For every n, it holds
LP (T, C, n) = W (T, C, Sub(T, n)) −(cid:2)(n,m)∈E(T )
(cid:5)− (cid:2)(n,m)∈E(T )
= π(cid:4) C(Sub(T, n))
≥ π(cid:4) C(n)
C(T )
C(T )(cid:5) ,
W (T, C, Sub(T, m))
π(cid:4) C(Sub(T, m))
C(T )
(cid:5)
where the inequality follows from the convexity Inequality (2) and
the fact that C(Sub(T,n))
+ C(n)
C(T ) .
This concludes the proof.
= (n,m)∈E(T )
C(Sub(T,m))
C(T )
C(T )
Based in part on this lemma, we can now precisely characterize
the set of desirable desiderata properties that are satisﬁed by the
Pachira lottree scheme. We begin with the simplest one and show
that Pachira always incentivizes increasing contribution.
LEMMA 5.2. Pachira satisﬁes CCI.
PROOF. Assume a node m increases its contribution, while all
other contributions in the tree remain the same. The relative con-
tribution C(Sub(TS, n)) increases and, because π(c) has positive
slope (property II of π’s deﬁnition), the weight of m’s subtree in-
creases. Conversely, the weights of m’s children’s subtrees (if it
has any) decrease.
It then follows by the deﬁnition of LP that
LP (TS, C
, m) > LP (TS, C, m).
(cid:3)
The following lemma follows immediately from Lemma 5.1 and
shows that Pachira achieves provable fairness bounds.
LEMMA 5.3. Pachira satisﬁes ϕ-VPC for ϕ ≥ β
PROOF. Let cm = C(m)/C(TS). By Lemma 5.1 and the deﬁ-
nition of π(c), we obtain
LP (TS, C, m) ≥ W (T, C, m) = π(cm) ≥ β cm.
(cid:3)
S and T
LEMMA 5.4. Pachira satisﬁes WSI.
PROOF. Recalling the deﬁnition of the WSI property, let m be
a node and let a be one of m’s children (if any exist, otherwise,
a = m). Suppose that there is a node n that newly joins the lot-
tree, either as a child of a node p ∈ N (Ta) or as a child of a node
q ∈ N (TS \ Tm) that is not in m’s subtree. T
(cid:3)(cid:3)
S denote
the resulting trees when the new node n joins as a child of p or
q, respectively. Finally, we use the following notational abbrevia-
tions:
• let cn := C(n)/C(T
(cid:3)
S) and cm := C(m)/C(T
• let cA := C(Ta)/C(T
(cid:3)
S)
• let cZ := C(Tm \ ({m} ∪ Ta))/C(T
(cid:3)
S); that is, cZ is the total
contribution of all nodes in those subtrees of m that n does not
join
• let Z be the set of m’s children other than a; formally, Z :=
{z | (m, z) ∈ E (TS) ∧ z (cid:4)= a}
• let wZ := z∈Z π(C(Tz)/C(T
(cid:3)
S)) be the total weight of all
subtrees rooted at children of m other than Ta
(cid:3)
S)
With these deﬁnitions, we can now express the expected value of
m both in case n joins a subtree of m, and otherwise. In both cases,
we use Equality (5) and plug in (4).
LP (T
(cid:3)
S, C, m) = π(cm + cn + cA + cZ)
− π(cn + cA) − wZ
LP (T
S , C, m) = π(cm + cA + cZ ) − π(cA) − wZ.
(cid:3)(cid:3)
(cid:3)
S) = C(T
(cid:3)(cid:3)
S ). Hence, when substituting
Clearly, it holds that C(T
c1 = cn +cA, c2 = cA, and  = cm +cO, we can write the increase
Δ of m’s expected value if p joins its own subtree (as opposed to
someone else’s subtree) as
Δ = LP (T
S, C, m) − LP (T
(cid:3)
(cid:3)(cid:3)
S , C, m)
= π(c1 + ) − π(c1) − (π(c2 + ) − π(c2)).
From (1), it follows that Δ > 0 and hence, LP (T
LP (T
(cid:3)(cid:3)
S , C, m).
(cid:3)
S, C, m) >
LEMMA 5.5. Pachira satisﬁes USB.
PROOF. The claim can easily be veriﬁed by observing that for
any n ∈ N (TS), the expected value LP (T, C, n) is independent of
the structure of tree T outside of n’s subtree Tn. Hence, the initial
position in the tree is irrelevant.
Unlike the Luxor scheme, the Pachira lottree is robust against
Sybil attacks:
LEMMA 5.6. Pachira satisﬁes USA.
PROOF. We must show that a node does not increase its ex-
pected value by joining as multiple nodes, even when these Sybil
nodes form subtrees among each other and join as such (like the
chain in Figure 1). Assume that a new node z joins the lottree. Al-
ternatively, z can join as a set of Sybil nodes Z = {z1, . . . , zk}
such that zi∈Z C(zi) ≤ C(z). Let T
(cid:3)(cid:3)
S be the resulting
trees in the former and latter cases, respectively. If all nodes in Z
join as independent nodes, the expected value of z is
(cid:3)
S and T
(cid:3)
L(T
S, C, z) = β (cid:2)zi∈Z
≥ β (cid:2)zi∈Z
= (cid:2)zi∈Z
czi + (1 − β)(cid:6)
(cid:7)(cid:2)zi∈Z
czi + (1 − β) (cid:2)zi∈Z
(cid:3)
S, C, zi),
L(T
1+δ
czi(cid:8)
(cid:9)
1+δ
c
zi
which proves the lemma in this case.
It remains to prove the case when nodes in Z join as a forest FH
with root set H instead of independent nodes. The key ingredient
in the proof is that the cumulated expected value of all nodes in
a subtree Tr with root r is always equivalent to the weight of Tr.
Formally, this can be derived as
(cid:2)s∈N (T )
L(TS, C, s) = (cid:2)s∈N (T )(cid:10)W (TS, C, Sub(TS, s))
(cid:3)))(cid:11)
− (cid:2)(s,s(cid:2))∈E(TS )
W (TS, C, Sub(TS, s
= W (TS, C, Sub(TS, r)),
(6)
where the second equality stems from the fact that all terms, except
for the one at r, cancel out. From this, it follows that the cumulated
expected value of nodes in Z is
(cid:2)zi∈Z
L(TS, C, zi) = (cid:2)h∈H
W (TS, C, Sub(TS, h)).
In other words, we can shrink each tree Th consisting of nodes zi
into a single node zh that has the same contribution as the entire
tree before changing the expected value of nodes in Z. Since these
shrunk zh are now independent nodes, the proof is ﬁnished analo-
gously to the case in which all nodes are independent.
It is instructive to consider the above proof in relation to the ex-
ample given in Figure 1 in which the Luxor lottree proved to be
vulnerable to Sybil attacks. In Luxor, the sum of the expected val-
ues of nodes in a tree T not only depends on the relative total con-
tribution of nodes in T compared to the entire contribution C(TS).
Instead, it also depends on the topology formed by nodes in T . The
combined expected value of two nodes z1 and z2 joining the lottree
as siblings {(n, z1), (n, z2)} of a parent n is smaller than the same
nodes joining the tree as child and grandchild, {(n, z1), (z1, z2)}
of n. Instead, Equality (6) proves that in Pachira the total expected
value of nodes is always equal to the weight of the subtree. It is this
additional property that prevents Sybil attacks.
6.
IMPOSSIBILITY RESULTS
The Pachira lottree scheme satisﬁes the ﬁve desirable properties
CCI, VPC, WSI, USB, and USA, thereby providing incentives to
contribute to the system, to solicit new contributors, and to avoid
attempts at gaming. However, Pachira fails to achieve both SSI
and ZVR, which would also be desirable. An ideal lottree should
simultaneously satisfy all mutually achievable desiderata.
In this section, we prove that Pachira does, in fact, satisfy all mu-
tually achievable desiderata, in the sense that no lottree can satisfy
any additional property without violating at least one of the prop-
erties that Pachira satisﬁes, which implies that these ﬁve properties
constitute a maximal satisﬁable subset.
The following theorem states that satisfying VPC precludes sat-
isfying SSI.
THEOREM 6.1. Given an arbitrary topology TS, there is no
lottree that simultaneously satisﬁes both SSI and ϕ-VPC, for any
ϕ > 0, on TS.
PROOF. Consider an arbitrary tree TS, and assume for contra-
diction that there is a lottree scheme that satisﬁes SSI and ϕ-VPC
on TS. The theorem holds for any distribution of the contribu-
tions among the nodes in TS. Let mi, i = 0, . . . , x be a sequence
of nodes joining TS. Node m0 joints at an arbitrary node z and
each subsequent new node mi joins as a child of mi−1. We deﬁne
Pz := P ath(TS, z) and denote by CO := n∈N (TS\Pz ) C(n)
the total contribution of all nodes node on the path PZ. Deﬁne the
contribution of node mi to be 2i · C(TS). It follows from the fair-
ness property that the ﬁrst new node m0 needs to get an expected
value L(TS, C, m0) of at least ϕ/2 because C(m0) = C(TS). For
the same reason, each subsequent new node mi also must have an
expected value L(TS, C, mi) ≥ ϕ/2. As each new node is added
as a child of the same path, the SSI property implies that the ex-
pected value of nodes on the path P ath(TS, z) or any mi must not
decrease. Hence, after inserting node mx for x = (cid:12)2CO/ϕ(cid:13) + 1,
the total expected value of nodes m0, . . . , mx must be at least
((cid:12)2CO/ϕ(cid:13) + 1) · ϕ/2 > CO. Since CO was the total expected
value of nodes in N (TS \ Pz), this implies that there must be at
least one new node or a node on Pz whose expected value has de-
creased, which contradicts the SSI property.
One might conceivably argue that SSI is a more important prop-
erty than VPC, and so a preferable lottree would be one that satis-
ﬁes the former at the expense of the latter, unlike Pachira. How-
ever, the simulations in Section 7—speciﬁcally, Figure 3 (right)—
demonstrate that the absence of SSI can be ameliorated with even
a moderately sized initial set of participants. By contrast, in Fig-
ure 2 (middle), as fairness (lower bounded by β) decreases, the
effectiveness of the lottree also decreases. (This is not as apparent
in the curves for small values of δ, because for small δ, Pachira
satisﬁes ϕ-VPC for ϕ (cid:14) β.)
The Pachira scheme also fails to satisfy ZVR, as does the Luxor
scheme. This turns out to be unavoidable for both.
THEOREM 6.2. There is no lottree that can guarantee the si-
multaneous satisfaction of WSI, USB, and ZVR.
PROOF. A simple counterexample sufﬁces for the proof. Con-
sider the two systems TS = {Sys, a, b, (Sys, a), (Sys, b)} and
S = {Sys, a, b, (Sys, a), (a, b)}, and take any contribution func-
(cid:3)
T
tion C for which C(a) > 0 and C(b) > 0. Assume for contra-
diction a lottree scheme L that satisﬁes WSI, USB, and ZVR. As
(cid:3)
shorthand, for any node n, let ln refer to L(TS, C, n) and l
n refer
to L(T