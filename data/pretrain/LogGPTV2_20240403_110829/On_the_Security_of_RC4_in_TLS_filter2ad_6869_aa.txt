# On the Security of RC4 in TLS

**Authors:**
- Nadhem J. AlFardan, Royal Holloway, University of London
- Daniel J. Bernstein, University of Illinois at Chicago and Technische Universiteit Eindhoven
- Kenneth G. Paterson, Royal Holloway, University of London
- Bertram Poettering, Royal Holloway, University of London
- Jacob C. N. Schuldt, Royal Holloway, University of London

**Abstract:**
The Transport Layer Security (TLS) protocol is designed to provide confidentiality and integrity for data transmitted over untrusted networks. It has become the de facto standard for secure Internet and mobile applications. TLS supports several symmetric encryption options, including a scheme based on the RC4 stream cipher. In this paper, we present ciphertext-only plaintext recovery attacks against TLS when RC4 is used for encryption. Our attacks leverage recent advances in the statistical analysis of RC4 and new findings presented in this paper. We support our results with an experimental evaluation of the feasibility of these attacks and discuss potential countermeasures.

## 1. Introduction

TLS is arguably the most widely used secure communications protocol on the Internet today. Originally known as SSL, it was adopted by the IETF and standardized as TLS 1.0 [7]. The protocol has since evolved through TLS 1.1 [8] to the current version, TLS 1.2 [9]. Various RFCs define additional TLS cryptographic algorithms and extensions. TLS is now used to secure a wide variety of application-level traffic, such as HTTPS for encrypted web browsing, IMAP or SMTP for email, and communication with embedded systems, mobile devices, and payment systems.

Technically, TLS sessions consist of two phases: the TLS Handshake Protocol, which typically uses asymmetric techniques to establish a secure session key, and the TLS Record Protocol, which employs symmetric key cryptography (block ciphers, the RC4 stream cipher, and MAC algorithms) to create a secure channel for transporting application-layer data. The Record Protocol offers three main encryption options:
- HMAC followed by CBC-mode encryption using a block cipher,
- HMAC followed by encryption using the RC4 stream cipher, or
- Authenticated encryption using GCM or CCM mode of operation of a block cipher.

The third option is only available in TLS 1.2 [21, 18], which is not yet widely adopted. The first option has been subject to significant cryptanalysis, including padding oracle attacks [6], BEAST [10], and Lucky 13 [3]. While countermeasures exist for these attacks, many recommend and offer RC4-based encryption ahead of CBC-mode. A recent analysis by the ICSI Certificate Notary [5] found that around 50% of TLS traffic is protected using RC4 ciphersuites.

This makes it timely to examine the security of RC4 in TLS. Although the RC4 algorithm is known to have various cryptographic weaknesses [23], it has not been fully explored how these weaknesses can be exploited in the context of TLS. We show that new and recently discovered biases in the RC4 keystream create serious vulnerabilities in TLS when using RC4 for encryption.

While our primary focus is on the security of RC4 in TLS, our attacks (or variants thereof) may also apply to other protocols where RC4 ensures data confidentiality, such as WPA for wireless network traffic.

## 1.1 Overview of Results

We present two plaintext recovery attacks on RC4 that are exploitable in specific but realistic circumstances when this cipher is used for encryption in TLS. Both attacks require a fixed plaintext to be RC4-encrypted and transmitted multiple times (in the same or multiple independent RC4 keystreams). Examples of such plaintexts include passwords and HTTP cookies.

### 1.1.1 Single-Byte Bias Attack

Our first attack targets the initial 256 bytes of RC4 ciphertext. It is fixed-plaintext and multi-session, requiring a fixed sequence of plaintext bytes to be independently encrypted under a large number of random keys. This setting corresponds to a "broadcast attack" [17, 15, 23]. In TLS, the first 36 bytes of the RC4 keystream encrypt the TLS Handshake Finished message, which is not fixed across sessions. Therefore, our methods can only recover up to 220 bytes of the TLS application plaintext.

The attack exploits statistical biases in the first 256 bytes of the RC4 keystream. These biases, deviations from uniformity in the distributions of keystream bytes at certain positions, have been reported and analyzed [17, 15, 23]. We discuss the shortcomings of existing algorithms, empirically obtain a complete view of all single-byte biases, and propose a generalized algorithm for advanced plaintext recovery. We also report on significant, previously unidentified biases in the RC4 keystream.

For example, our single-byte bias attack can be applied to recover cookies in HTTPS traffic. An automated mechanism, such as JavaScript malware running in the victim's browser, can repeatedly send HTTPS requests to a remote server, automatically including the target cookie in each request. If client and server use TLS session resumption, the renewal of RC4 keys can be arranged to occur frequently, enhancing the attack's success.

Alternatively, consider the case of IMAP passwords. An adversary can reset the TCP connection between the client and server after the encrypted password is transmitted, triggering an automatic resumption of the session and retransmission of the password. This allows the adversary to collect a large set of independently encrypted copies of the password, fulfilling the precondition of our attack.

Our single-byte bias attack is nearly practical. In experiments, the first 40 bytes of TLS application data after the Finished message were recovered with a success rate of over 50% per byte using 2^26 sessions. With 2^32 sessions, the per-byte success rate exceeds 96% for the first 220 bytes, and 100% for all but 12 of these bytes. For restricted plaintexts, such as 4-bits-per-byte-encoded HTTP cookies, our algorithm recovers the first 112 bytes with a success rate of more than 50% per byte using 2^26 sessions.

### 1.1.2 Double-Byte Bias Attack

While our single-byte bias attack is effective for early plaintext bytes, it has limitations in practical TLS scenarios. Modern web browsers send a large number of HTTP headers before any cookies, placing cookie data beyond the attackable initial 220 bytes. Additionally, establishing and tearing down numerous HTTPS sessions incurs significant computing and bandwidth overheads. Finally, discarding the first few hundred keystream bytes of RC4, as proposed to avoid strong early biases [19], would defeat our single-byte bias attack.

To address these limitations, we present a second fixed-plaintext ciphertext-only attack that exploits biases in the entire keystream and tolerates frequent changes in the encryption key. This attack covers scenarios where the single-byte bias attack is not applicable, such as recovering cookies from long-persisting HTTPS sessions or if the initial keystream bytes are discarded.

Our second attack exploits biases in consecutive pairs of bytes in the RC4 keystream, first reported by Fluhrer and McGrew [12]. We empirically evaluate the probability of occurrence for each possible pair of bytes at each position (modulo 256), obtaining a complete view of the distributions. Our analysis suggests no further biases in consecutive positions of the same strength. We use these results in a specially designed attack algorithm to recover repeatedly encrypted plaintexts.

Our double-byte bias attack is also close to being practical. In experiments, we focused on recovering 16 consecutive bytes of plaintext, roughly equivalent to an HTTP cookie. With 13 * 2^30 encryptions of the plaintext, we achieved a 100% success rate in recovering all 16 bytes. For restricted plaintexts, we obtained even better success rates.

## 1.2 Related Work

In independent and concurrent work, Isobe et al. [13] considered the security of RC4 against broadcast attacks, presenting attacks based on both single-byte and multi-byte biases. They identified three biases in the first output bytes Zr of RC4 that we also identify, as well as a new conditional bias Z1 = 0|Z2 = 0.

Their single-byte bias attack only considers the strongest bias at each position, whereas our attack simultaneously exploits all biases. Specifically, we use Bayes's law to compute the a posteriori plaintext distribution, leading to higher success rates. For example, we achieve reliable plaintext recovery in the first 256 positions with 2^32 ciphertexts, while Isobe et al. [13] require 2^34 ciphertexts. Our success rates are uniformly higher for lower numbers of sessions.

The multi-byte bias attack in [13] exploits the positive bias towards the pattern ABSAB, assuming 3-out-of-4 bytes in particular positions are known. Their attack is applied only to recovery of plaintext bytes 258-261, with success rates of 1 using 2^34 ciphertexts. However, this attack fails if the initial bytes of RC4 output are discarded. By contrast, our double-byte bias attack, which exploits the Fluhrer-McGrew biases, recovers more bytes with comparable success rates using fewer ciphertexts and is resilient to initial byte discarding.

Finally, while [13] briefly mentions TLS, they do not provide mechanisms for generating the large numbers of ciphertexts needed for the attacks. Additionally, their claim of recovering 250 bytes of plaintext from 2^34 ciphertexts is misleading, as their methods only recover 2^16 distinct bytes, and their multi-byte bias attack is not resilient to errors in early plaintext recovery.

---

This optimized version aims to improve clarity, coherence, and professionalism, making the text more accessible and informative.