    Module                  Size  Used by
    fuse                  126976  3
    xt_CHECKSUM            16384  1
    ipt_MASQUERADE         16384  1
    uinput                 20480  1
    xt_conntrack           16384  1
    …​
    ```
    `lsmod`{.literal} 命令显示载入到当前运行的内核的模块列表。
    ::: itemizedlist
    -   或者，找到您要防止载入的未加载内核模块。
        所有内核模块都位于
        `/lib/modules//kernel//`{.literal}
        目录中。
    :::
2.  为 denylist 创建配置文件：
    ``` literallayout
    # vim /etc/modprobe.d/blacklist.conf
    	# Blacklists 
    	blacklist 
    	install  /bin/false
    	# Blacklists 
    	blacklist 
    	install  /bin/false
    	# Blacklists 
    	blacklist 
    	install  /bin/false
    	…​
    ```
    示例中显示了由 `vim`{.literal} 编辑器编辑的
    `blacklist.conf`{.literal} 文件的内容。`blacklist`{.literal}
    行确定在引导过程中不会自动载入相关内核模块。但是，`blacklist`{.literal}
    命令不会阻止将模块作为不在 denylist
    中的另一个内核模块的依赖项加载。因此，`install`{.literal} 行会导致
    `/bin/false`{.literal} 运行而不是安装模块。
    以 hash 符号开头的行是注释以便更易读。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在输入内核模块的名称时，不要将 `.ko.xz`{.literal}
    扩展附加到名称的末尾。内核模块名称没有扩展名，它们对应的文件有。
    :::
3.  在重新构建前，为当前初始 ramdisk 镜像创建备份副本：
    ``` literallayout
    # cp /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r).bak.$(date +%m-%d-%H%M%S).img
    ```
    如果新版本出现意外问题，以上命令会创建一个备份 `initramfs`{.literal}
    镜像。
    ::: itemizedlist
    -   另外，还可创建其它初始 ramdisk
        镜像的备份副本，该副本与您要将内核模块放入 denylist
        中的内核版本对应：
        ``` literallayout
        # cp /boot/initramfs-.img /boot/initramfs-.img.bak.$(date +%m-%d-%H%M%S)
        ```
    :::
4.  根据更改生成新的初始 ramdisk 镜像：
    ``` literallayout
    # dracut -f -v
    ```
    ::: itemizedlist
    -   如果您要为当前引导的不同内核版本构建初始 ramdisk
        镜像，请指定目标 `initramfs`{.literal} 和内核版本：
        ``` literallayout
        # dracut -f -v /boot/initramfs-.img 
        ```
    :::
5.  重启系统：
    ``` literallayout
    $ reboot
    ```
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
此流程中描述的更改将在重启后[**生效并保留**]{.strong}。如果您将关键内核模块错误地放入
denylist 中，您会遇到不稳定的情况或系统无法正常工作。
:::
::: itemizedlist
**其它资源**
-   `dracut(8)`{.literal} 手册页
:::
:::
:::
[]{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel}第 4 章 为安全引导签名内核模块 {.title}
:::
您可以使用签名的内核模块来提高系统安全性。以下小节介绍了如何在启用了安全引导机制的基于
UEFI 的构建系统中，在 RHEL 8
中使用自签名的专用内核模块。这些部分还提供了将您的公钥导入到要部署内核模块的目标系统中的可用选项概述。
要签名并载入内核模块，您需要：
如果启用了安全引导机制，则必须使用私钥签名 UEFI
操作系统引导装载程序、Red Hat Enterprise Linux
内核和所有内核模块，并使用对应的公钥进行身份验证。如果未签名和验证，则不允许系统完成引导过程。
RHEL 8 发行版包括：
::: itemizedlist
-   签名的引导装载程序
-   签名的内核
-   签名的内核模块
:::
此外，签名的第一阶段引导装载程序和签名的内核包括嵌入的红帽公钥。这些签名的可执行二进制文件和嵌入式密钥使
RHEL 8 在支持 UEFI 安全引导引导引导的系统中使用 Microsoft UEFI
安全引导认证机构密钥安装、引导和运行。请注意，并非所有基于 UEFI
的系统都包括对安全引导的支持。
::: title
**先决条件**
:::
要能够为外部构建的内核模块签名，请在构建系统上安装下表中列出的实用程序。
::: table
[]{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#idm139694376838464}
**表 4.1. 所需工具**
::: table-contents
  工具                    由软件包提供               用于       目的
  ----------------------- -------------------------- ---------- ----------------------------------------
  `openssl`{.literal}     `openssl`{.literal}        构建系统   生成公共和专用 X.509 密钥对
  `sign-file`{.literal}   `kernel-devel`{.literal}   构建系统   用来使用私钥为内核模块签名的可执行文件
  `mokutil`{.literal}     `mokutil`{.literal}        目标系统   用于手动注册公钥的可选工具
  `keyctl`{.literal}      `keyutils`{.literal}       目标系统   用于在系统密钥环中显示公钥的可选工具
:::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
构建系统（构建和签署内核模块）不需要启用 UEFI 安全引导，甚至不需要是基于
UEFI 的系统。
:::
::: section
::: titlepage
# []{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#ref_requirements-for-authenticating-kernel-modules-with-x-509-keys_signing-kernel-modules-for-secure-boot}使用 X.509 密钥验证内核模块的要求 {.title}
:::
在 RHEL 8 中，加载内核模块时，内核会根据内核系统密钥环
(`.builtin_trusted_keys`{.literal}) 和内核平台密钥环
(`.platform`{.literal}) 中的公共 X.509
密钥检查模块的签名。`.platform`{.literal}
密钥环包含来自第三方平台提供商和自定义公钥的密钥。内核系统
`.blacklist`{.literal}
密钥环中的密钥不包括在验证中。以下小节提供了系统中不同源的密钥、密钥环和载入密钥示例概述。此外，您还可以了解如何验证内核模块。
您需要满足某些条件，才能在启用了 UEFI 安全引导功能的系统中载入内核模块。
如果启用了 UEFI 安全引导，或者指定了 `module.sig_enforce`{.literal}
内核参数：
::: itemizedlist
-   您只能加载那些签名是通过系统密钥环
    (`.builtin_trusted_keys`{.literal}) 和平台密钥环
    (`.platform`{.literal}) 验证的已签名内核模块。
-   公钥不能在系统中被撤销的密钥环 (`.blacklist`{.literal})。
:::
如果禁用了 UEFI 安全引导且未指定 `module.sig_enforce`{.literal}
内核参数：
::: itemizedlist
-   您可以加载未签名的内核模块和签名的内核模块，而无需公钥。
:::
如果系统不基于 UEFI，或者禁用 UEFI 安全引导：
::: itemizedlist
-   只有内核中嵌入的密钥才会加载到 `.builtin_trusted_keys`{.literal} 和
    `.platform`{.literal}。
-   您无法在不重新构建内核的情况下添加这组密钥。
:::
::: table
[]{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#idm139694365816672}
**表 4.2. 加载内核模块的验证要求**
::: table-contents
  模块已签名   找到公钥，且签名有效   UEFI 安全引导状态   sig_enforce   模块载入   内核污点
  ------------ ---------------------- ------------------- ------------- ---------- ----------
  未签名       \-                     未启用              未启用        成功       是
                                      未启用              Enabled       Fails      \-
                                      Enabled             \-            Fails      \-
  已签名       否                     未启用              未启用        成功       是
                                      未启用              Enabled       Fails      \-
                                      Enabled             \-            Fails      \-
  已签名       是                     未启用              未启用        成功       否
                                      未启用              Enabled       成功       否
                                      Enabled             \-            成功       否
:::
:::
:::
::: section
::: titlepage
# []{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#sources-for-public-keys_signing-kernel-modules-for-secure-boot}公钥的源 {.title}
:::
在引导过程中，内核会从一组持久性密钥中加载 X.509 密钥到以下密钥环中：
::: itemizedlist
-   系统密钥环 (`.builtin_trusted_keys`{.literal})
-   `.platform`{.literal} 密钥环
-   系统 `.blacklist`{.literal} 密钥环
:::
::: table
[]{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#idm139694264489456}
**表 4.3. 系统密钥环源**
::: table-contents
  X.509 密钥源                               用户可以添加密钥   UEFI 安全引导状态   引导过程中载入的密钥
  ------------------------------------------ ------------------ ------------------- -----------------------------------
  嵌入于内核中                               否                 \-                  `.builtin_trusted_keys`{.literal}
  UEFI 安全引导 \"db\"                       有限               未启用              否
                                                                Enabled             `.platform`{.literal}
  嵌入在 `shim.efi`{.literal} 引导装载程序   否                 未启用              否
                                                                Enabled             `.builtin_trusted_keys`{.literal}
  Machine Owner Key（MOK）列表               是                 未启用              否
                                                                Enabled             `.platform`{.literal}
:::
:::
`.builtin_trusted_keys`{.literal}：
::: itemizedlist
-   在引导时构建的密钥环
-   包含可信公钥
-   查看密钥需要 `root`{.literal} 权限
:::
`.platform`{.literal}：
::: itemizedlist
-   在引导时构建的密钥环
-   包含第三方平台供应商和自定义公钥的密钥
-   查看密钥需要 `root`{.literal} 权限
:::
`.blacklist`{.literal}
::: itemizedlist
-   使用 X.509 密钥的密钥环，该密钥已被撤销
-   使用来自 `.blacklist`{.literal}
    的密钥签名的模块将会验证失败，即使您的公共密钥已在
    `.builtin_trusted_keys`{.literal} 中。
:::
UEFI 安全引导数据库：
::: itemizedlist
-   签名数据库
-   存储 UEFI 应用程序、UEFI 驱动程序和引导装载程序的密钥（哈希值）
-   密钥可加载到机器上
:::
UEFI 安全引导 dbx：
::: itemizedlist
-   已撤销的签名数据库
-   防止加载密钥
-   从此数据库撤销的密钥添加到 `.blacklist`{.literal} 密钥环中
:::
:::
::: section
::: titlepage
# []{#signing-kernel-modules-for-secure-boot_managing-monitoring-and-updating-the-kernel.html#generating-a-public-and-private-key-pair_signing-kernel-modules-for-secure-boot}生成公钥和私钥对 {.title}
:::
您需要生成一个公共和私有 X.509
密钥对，才能成功在启用了安全引导的系统上使用内核模块。之后您将使用私钥为内核模块签名。您还必须将对应的公钥添加到用于安全引导的
Machine Owner Key (MOK) 中，以验证签名的模块。
这个密钥对生成的一些参数最好用配置文件指定。
::: orderedlist
**流程**
1.  使用密钥对生成参数创建配置文件：
    ``` literallayout
    # cat  configuration_file.config
    [ req ]
    default_bits = 4096
    distinguished_name = req_distinguished_name
    prompt = no
    string_mask = utf8only
    x509_extensions = myexts
    [ req_distinguished_name ]
    O = Organization
    CN = Organization signing key
    emailAddress = E-mail address