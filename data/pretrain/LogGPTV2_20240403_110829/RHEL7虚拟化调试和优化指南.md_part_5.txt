::: admonition_header
**注意**
:::
::: admonition
::: para
多队列 virtio-net
在输入流量中运行良好，但在少数情况下可能会影响输出流量的性能。启用多队列
virtio-net 提高总体吞吐量，同时提高 CPU 可用量。
:::
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Networking.html#idm140616993909760}5.5.2.1. 配置多队列 virtio-net {.title}
:::
::: para
使用多队列 virtio-net 时，通过向客机 XML 配置（*N* 的值为 1 到 8，即
kernel 最多可支持一组多队列 tap 设备中的 8 个队列）添加以下命令：
:::
``` screen
```
::: para
与客机中的 *N* virtio-net 队列一同运行虚拟机时，执行以下命令（*M* 的值为
1 到 *N*）时允许多队列支持：
:::
``` screen
# ethtool -L eth0 combined M
```
:::
:::
:::
:::
[]{#chap-Virtualization_Tuning_Optimization_Guide-BlockIO.html}
::: chapter
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-BlockIO.html#chap-Virtualization_Tuning_Optimization_Guide-BlockIO}第 6 章 块 I/O {.title}
:::
::: section
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-BlockIO.html#idm140616969285440}6.1. 简介 {.title}
:::
::: para
本章节包括虚拟环境中的优化 I/O 设置。
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-BlockIO.html#sect-Virtualization_Tuning_Optimization_Guide-BlockIO-Tuning}6.2. 块 I/O 调试 {.title}
:::
::: para
`virsh blkiotune`{.command} 命令允许管理员在客机 XML 配置的
``{.code} 元素中，手动设置或显示客户虚拟机的块 I/O 参数。
:::
::: para
为虚拟机显示当前的 ``{.code} 参数：
:::
``` screen
# virsh blkiotune virtual_machine
```
::: para
设置虚拟机的 ``{.code} 参数，请参照以下命令并依据环境替换属性值：
:::
``` screen
# virsh blkiotune virtual_machine [--weight number] [--device-weights string] [--config] [--live] [--current]
```
::: para
参数包括：
:::
::: variablelist
[*`weight`*]{.term}
:   ::: para
    I/O 的权重范围在 100 到 1,000 之间。
    :::
[*`device-weights`*]{.term}
:   ::: para
    列出一个或多个设备/权值组群的单独字符串，以
    `/path/to/device`{.command},weight,`/path/to/device`{.filename},weight``{=html}
    为格式。每一个权值必须在 100-1,000 范围内，或者 0
    值从每一个设备列表删除该设备。只修改字符串中列出的设备；任何现有的其它设备的权值保持不改变。
    :::
[*`config`*]{.term}
:   ::: para
    添加 `--config`{.command}``{=html}
    选项，使更改在下次启动时生效。
    :::
[*`live`*]{.term}
:   ::: para
    添加 `--live`{.command}``{=html}
    选项，在运行的虚拟机中应用这些更改。
    :::
    ::: {.note xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **注意**
    :::
    ::: admonition
    ::: para
    `--live`{.command}``{=html}
    选项要求监控程序支持这一行为。并非所有监控程序都允许最大内存限制的实时更改。
    :::
    :::
    :::
[*`current`*]{.term}
:   ::: para
    添加 `--current`{.command}``{=html}
    选项，在当前的虚拟机中应用这些更改。
    :::
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
关于 `virsh blkiotune`{.command} 命令使用的更多信息，请参照
`# virsh help blkiotune`{.command}。
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-BlockIO.html#sect-Virtualization_Tuning_Optimization_Guide-BlockIO-Caching}6.3. 缓存 {.title}
:::
::: para
缓存选项可以在客机安装期间用 [**virt-manager**]{.application}
进行配置，或通过编辑客机 XML 配置在现存的客户虚拟机中配置。
:::
::: table
[⁠]{#chap-Virtualization_Tuning_Optimization_Guide-BlockIO.html#idm140616933960560}
**表 6.1. 缓存选项**
::: table-contents
  缓存选项             描述
  -------------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Cache=none           客机中的 I/O 不能在主机上缓存，但可以保留在回写磁盘缓存中。在客机中使用此选项来应对较大的需求。此选项通常是支持迁移的最佳和唯一选项。
  Cache=writethrough   客机中的 I/O 在主机上缓存，但在物理媒介中直写。该模式较慢且更易造成缩放问题。最好是在客机数量较小且 I/O 需求较低的情况下使用。推荐的应用对象是无需迁移、不支持回写缓存的客机（如 Red Hat Enterprise Linux 5.5 或更早的版本）。
  Cache=writeback      客机中的 I/O 在主机上缓存。
  Cache=directsync     与 *`writethrough`* 相似，但客机中的 I/O 将忽略主机页面缓存。
  Cache=unsafe         主机可能会缓存所有的 I/O 磁盘，客机的同步要求将被忽略。
  Cache=default        如果没有指定缓存模式，将会选择系统默认设置。
:::
:::
::: para
在 [**virt-manager**]{.application} 中，缓存模式可以在 [**Virtual
Disk**]{.guilabel} 下被指定。关于使用 [**virt-manager**]{.application}
以更改缓存模式的信息，请参照[第 3.4 节
"虚拟磁盘性能选项"](#chap-Virtualization_Tuning_Optimization_Guide-Virt_Manager.html#sect-Virtualization_Tuning_Optimization_Guide-Virt_Manager-Virtual-Disk_Options){.xref}。
:::
::: para
在客机 XML 中配置缓存模式，请编辑设置在 `driver`{.code} 标签内部的
`cache`{.code}，指定一个缓存选项。例如，将缓存设置为 *`writeback`*：
``` programlisting
```
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-BlockIO.html#sect-Virtualization_Tuning_Optimization_Guide-BlockIO-IO_mode}6.4. I/O 模式 {.title}
:::
::: para
I/O 模式选项可以在客机安装期间用 [**virt-manager**]{.application}
进行配置，或通过编辑客机 XML 配置在现存的客户虚拟机中配置。
:::
::: table
[⁠]{#chap-Virtualization_Tuning_Optimization_Guide-BlockIO.html#idm140616965482080}
**表 6.2. IO 模式选项**
::: table-contents
  IO 模式选项   描述
  ------------- -------------------------------------------------------------------------------------------------
  IO=native     Red Hat Enterprise Virtualization 环境的默认值。该模式适用于直接 I/O 选项的 kernel 非同步 I/O。
  IO=threads    默认为基于主机用户模式的线程。
  IO=default    Red Hat Enterprise Linux 7 默认为线程模式。
:::
:::
::: para
在 [**virt-manager**]{.application}
中，[**虚拟硬盘**]{.guilabel}下可以指定 I/O 模式。关于使用
[**virt-manager**]{.application} 以改变 I/O 模式的信息，请参照[第 3.4 节
"虚拟磁盘性能选项"](#chap-Virtualization_Tuning_Optimization_Guide-Virt_Manager.html#sect-Virtualization_Tuning_Optimization_Guide-Virt_Manager-Virtual-Disk_Options){.xref}。
:::
::: para
对客户虚拟机 XML 中的 I/O 模式进行配置时，编辑 `driver`{.code} 标签中的
`io`{.code} 设置，指定 *`native`*、*`threads`* 或 *`default`*。例如，将
I/O 模式设置为 *`threads`*：
``` programlisting
```
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-BlockIO.html#sect-Virtualization_Tuning_Optimization_Guide-BlockIO-Techniques}6.5. 块 I/O 调试技术 {.title}
:::
::: para
这一部分描述了更多关于虚拟化环境中块 I/O 性能调试的技术。
:::
::: section
::: titlepage
## [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-BlockIO.html#sect-Virtualization_Tuning_Optimization_Guide-BlockIO-IO_Throttling}6.5.1. 磁盘 I/O 节流 {.title}
:::
::: para
当若干虚拟机同时运行时，它们有可能因过度使用磁盘 I/O 而干扰系统性能。KVM
中的磁盘 I/O 节流可以为虚拟机发往主机的磁盘 I/O
请求设定限制。这样可以避免虚拟机过度使用共享资源，并防止影响其他虚拟机的性能。
:::
::: para
磁盘 I/O
节流可以在各种情况下使用，例如当不同客户的客户虚拟机在同一台主机中运行时，或不同的客户虚拟机需要服务质量保证时。磁盘
I/O 节流还可以用于模拟更慢的磁盘。
:::
::: para
I/O 节流可以在客机附加的每个块设备中独立应用，并支持吞吐量和 I/O
操作中的限制。请使用 `virsh blkdeviotune`{.command} 命令为虚拟机设置 I/O
限制。请参照以下示例：
:::
``` screen
# virsh blkdeviotune virtual_machine device --parameter limit
```
::: para
*Device*
为虚拟机附加的其中一个磁盘设备指定了独特的目标名称（``{.code}）或来源文件（``{.code}）。使用
`virsh domblklist`{.command} 命令获取磁盘设备名称列表。
:::
::: para
可选的参数包括：
:::
::: variablelist
[*`total-bytes-sec`*]{.term}
:   ::: para
    字节每秒的总吞吐量限制。
    :::
[*`read-bytes-sec`*]{.term}
:   ::: para
    字节每秒的读取吞吐量限制。
    :::
[*`write-bytes-sec`*]{.term}
:   ::: para
    字节每秒的写入吞吐量限制。
    :::
[*`total-iops-sec`*]{.term}
:   ::: para
    每秒的 I/O 操作总量限制。
    :::
[*`read-iops-sec`*]{.term}
:   ::: para
    每秒的读取 I/O 操作限制。
    :::
[*`write-iops-sec`*]{.term}
:   ::: para
    每秒的写入 I/O 操作限制。
    :::
:::
::: para
例如，如需将 `virtual_machine`{.literal} 虚拟机中的 `vda`{.literal}
节流至 I/O 每秒 1000、吞吐量为每秒 50 MB，请运行以下命令：
:::
``` screen
# virsh blkdeviotune virtual_machine vda --total-iops-sec 1000 --total-bytes-sec 52428800
```
:::
::: section
::: titlepage