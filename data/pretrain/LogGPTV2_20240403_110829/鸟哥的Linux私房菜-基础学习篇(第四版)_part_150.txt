这个“ crontab -e ”是针对使用者的 cron 来设计的，如果是“系统的例行性任务”时， 该怎么办呢？是否还是需要以 crontab -e 来管理你的
例行性工作调度呢？当然不需要，你只要编辑 /etc/crontab 这个文件就可以啦！有一点需要特别注意喔！那就是 crontab -e 这个 crontab 其实是
/usr/bin/crontab 这个可执行文件，但是 /etc/crontab 可是一个“纯文本文件”喔！你可以 root 的身份编辑一下这个文件哩！
基本上， cron 这个服务的最低侦测限制是“分钟”，所以“ cron 会每分钟去读取一次 /etc/crontab 与 /var/spool/cron 里面的数据内容 ”，因
此，只要你编辑完 /etc/crontab 这个文件，并且将他储存之后，那么 cron 的设置就自动的会来执行了！
Tips
在 Linux 下面的 crontab 会自动的帮我们每分钟重新读取一次 /etc/crontab 的例行工作事项，但是某些原因或者是其他的 Unix 系统中，
由于 crontab 是读到内存当中的，所以在你修改完 /etc/crontab 之后，可能并不会马上执行， 这个时候请重新启动 crond 这个服务吧！“systemctl
restart crond”
废话少说，我们就来看一下这个 /etc/crontab 的内容吧！
[root@study ~]# cat /etc/crontab
SHELL=/bin/bash <==使用哪种 shell 接口
PATH=/sbin:/bin:/usr/sbin:/usr/bin <==可执行文件搜寻路径
MAILTO=root <==若有额外STDOUT，以 email将数据送给谁
# Example of job definition:
# .---------------- minute （0 - 59）
# | .------------- hour （0 - 23）
# | | .---------- day of month （1 - 31）
# | | | .------- month （1 - 12） OR jan,feb,mar,apr ...
# | | | | .---- day of week （0 - 6） （Sunday=0 or 7） OR sun,mon,tue,wed,thu,fri,sat
# | | | | |
# * * * * * user-name command to be executed
看到这个文件的内容你大概就了解了吧！呵呵，没错！这个文件与将刚刚我们下达 crontab -e 的内容几乎完全一模一样！只是有几个地
方不太相同：
MAILTO=root：
这个项目是说，当 /etc/crontab 这个文件中的例行性工作的指令发生错误时，或者是该工作的执行结果有 STDOUT/STDERR 时，
会将错误讯息或者是屏幕显示的讯息传给谁？默认当然是由系统直接寄发一封 mail 给 root 啦！不过， 由于 root 并无法在用户端中以
POP3 之类的软件收信，因此，鸟哥通常都将这个 e-mail 改成自己的帐号，好让我随时了解系统的状况！例如：
MAILTO=PI:EMAIL
PATH=....：
还记得我们在第十章的 BASH 当中一直提到的可执行文件路径问题吧！ 没错啦！这里就是输入可执行文件的搜寻路径！使用默认
的路径设置就已经很足够了！
“分 时 日 月 周 身份 指令”七个字段的设置
这个 /etc/crontab 里面可以设置的基本语法与 crontab -e 不太相同喔！前面同样是分、时、日、月、周五个字段， 但是在五个字
段后面接的并不是指令，而是一个新的字段，那就是“执行后面那串指令的身份”为何！这与使用者的 crontab -e 不相同。由于使用者自己
的 crontab 并不需要指定身份，但 /etc/crontab 里面当然要指定身份啦！以上表的内容来说，系统默认的例行性工作是以 root 的身份来进
行的。
crond 服服务务读读取取配配置置文文件件的的位位置置
一般来说，crond 默认有三个地方会有执行脚本配置文件，他们分别是：
/etc/crontab
/etc/cron.d/*
/var/spool/cron/*
这三个地方中，跟系统的运行比较有关系的两个配置文件是放在 /etc/crontab 文件内以及 /etc/cron.d/* 目录内的文件， 另外一个是跟用
户自己的工作比较有关的配置文件，就是放在 /var/spool/cron/ 里面的文件群。 现在我们已经知道了 /var/spool/cron 以及 /etc/crontab 的内容，
那现在来瞧瞧 /etc/cron.d 里面的东西吧！
[root@study ~]# ls -l /etc/cron.d
-rw-r--r--. 1 root root 128 Jul 30 2014 0hourly
-rw-r--r--. 1 root root 108 Mar 6 10:12 raid-check
-rw-------. 1 root root 235 Mar 6 13:45 sysstat
-rw-r--r--. 1 root root 187 Jan 28 2014 unbound-anchor
# 其实说真的，除了 /etc/crontab 之外，crond 的配置文件还不少耶！上面就有四个设置！
# 先让我们来瞧瞧 0hourly 这个配置文件的内容吧！
[root@study ~]# cat /etc/cron.d/0hourly
# Run the hourly jobs
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
01 * * * * root run-parts /etc/cron.hourly
# 瞧一瞧，内容跟 /etc/crontab 几乎一模一样！但实际上是有设置值喔！就是最后一行！
如果你想要自己开发新的软件，该软件要拥有自己的 crontab 定时指令时，就可以将“分、时、日、月、周、身份、指令”的配置文件放
置到 /etc/cron.d/ 目录下！ 在此目录下的文件是“crontab 的配置文件脚本”。
Tips
以鸟哥来说，现在鸟哥有在开发一些虚拟化教室的软件，该软件需要定时清除一些垃圾防火墙规则， 那鸟哥就是将要执行的时间与指令设计好，
然后直接将设置写入到 /etc/cron.d/newfile 即可！未来如果这个软件要升级， 直接将该文件覆盖成新文件即可！比起手动去分析 /etc/crontab 要单
纯的多！
另外，请注意一下上面表格中提到的最后一行，每个整点的一分会执行“ run-parts /etc/cron.hourly ”这个指令～咦！那什么是 run-parts
呢？ 如果你有去分析一下这个可执行文件，会发现他就是 shell script，run-parts 脚本会在大约 5 分钟内随机选一个时间来执行 /etc/cron.hourly
目录内的所有可执行文件！因此，放在 /etc/cron.hourly/ 的文件，必须是能被直接执行的指令脚本， 而不是分、时、日、月、周的设置值喔！
注意注意！
也就是说，除了自己指定分、时、日、月、周加上指令路径的 crond 配置文件之外，你也可以直接将指令放置到（或链接
到）/etc/cron.hourly/ 目录下， 则该指令就会被 crond 在每小时的 1 分开始后的 5 分钟内，随机取一个时间点来执行啰！你无须手动去指定分、
时、日、月、周就是了。
但是眼尖的朋友可能还会发现，除了可以直接将指令放到 /etc/cron.hourly/ 让系统每小时定时执行之外，在 /etc/ 下面其实还有
/etc/cron.daily/, /etc/cron.weekly/, /etc/cron.monthly/，那三个目录是代表每日、每周、每月各执行一次的意思吗？嘿嘿！ 厉害喔！没错～是这样
～不过，跟 /etc/cron.hourly/ 不太一样的是，那三个目录是由 anacron 所执行的，而 anacron 的执行方式则是放在 /etc/cron.hourly/0anacron 里
面耶～跟前几代 anacron 是单独的 service 不太一样喔！这部份留待下个小节再来讨论。
最后，让我们总结一下吧：
个人化的行为使用“ crontab -e ”：如果你是依据个人需求来创建的例行工作调度，建议直接使用 crontab -e 来创建你的工作调度较佳！ 这
样也能保障你的指令行为不会被大家看到 （/etc/crontab 是大家都能读取的权限喔！）；
系统维护管理使用“ vim /etc/crontab ”：如果你这个例行工作调度是系统的重要工作，为了让自己管理方便，同时容易追踪，建议直接写
入 /etc/crontab 较佳！
自己开发软件使用“ vim /etc/cron.d/newfile ”：如果你是想要自己开发软件，那当然最好就是使用全新的配置文件，并且放置于 /etc/cron.d/
目录内即可。
固定每小时、每日、每周、每天执行的特别工作：如果与系统维护有关，还是建议放置到 /etc/crontab 中来集中管理较好。 如果想要偷
懒，或者是一定要再某个周期内进行的任务，也可以放置到上面谈到的几个目录中，直接写入指令即可！
有的时候，我们以系统的 cron 来进行例行性工作的创建时，要注意一些使用方面的特性。 举例来说，如果我们有四个工作都是五分钟
要进行一次的，那么是否这四个动作全部都在同一个时间点进行？ 如果同时进行，该四个动作又很耗系统资源，如此一来，每五分钟的某个时
刻不是会让系统忙得要死？ 呵呵！此时好好的分配一些执行时间就 OK 啦！所以，注意一下：
资资源源分分配配不不均均的的问问题题
当大量使用 crontab 的时候，总是会有问题发生的，最严重的问题就是“系统资源分配不均”的问题， 以鸟哥的系统为例，我有侦测主机
流量的信息，包括：
流量
区域内其他 PC 的流量侦测
CPU 使用率
RAM 使用率
线上人数实时侦测
如果每个流程都在同一个时间启动的话，那么在某个时段时，我的系统会变的相当的繁忙，所以，这个时候就必须要分别设置啦！我可
以这样做：
[root@study ~]# vim /etc/crontab
1,6,11,16,21,26,31,36,41,46,51,56 * * * * root CMD1
2,7,12,17,22,27,32,37,42,47,52,57 * * * * root CMD2
3,8,13,18,23,28,33,38,43,48,53,58 * * * * root CMD3
4,9,14,19,24,29,34,39,44,49,54,59 * * * * root CMD4
看到了没？那个“ , ”分隔的时候，请注意，不要有空白字符！（连续的意思）如此一来， 则可以将每五分钟工作的流程分别在不同的时
刻来工作！则可以让系统的执行较为顺畅呦！
取取消消不不要要的的输输出出项项目目
另外一个困扰发生在“ 当有执行成果或者是执行的项目中有输出的数据时，该数据将会 mail 给 MAILTO 设置的帐号 ”，好啦，那么当有
一个调度一直出错（例如 DNS 的侦测系统当中，若 DNS 上层主机挂掉，那么你就会一直收到错误讯息！）怎么办？呵呵！还记得第十章谈到
的数据流重导向吧？ 直接以“数据流重导向”将输出的结果输出到 /dev/null 这个垃圾桶当中就好了！
安安全全的的检检验验
很多时候被植入木马都是以例行命令的方式植入的，所以可以借由检查 /var/log/cron 的内容来视察是否有“非您设置的 cron 被执行
了？”这个时候就需要小心一点啰！
周周与与日日月月不不可可同同时时并并存存
另一个需要注意的地方在于：“你可以分别以周或者是日月为单位作为循环，但你不可使用“几月几号且为星期几”的模式工作”。 这个
意思是说，你不可以这样编写一个工作调度：
30 12 11 9 5 root echo "just test" <==这是错误的写法
本来你以为九月十一号且为星期五才会进行这项工作，无奈的是，系统可能会判定每个星期五作一次，或每年的 9 月 11 号分别进行，
如此一来与你当初的规划就不一样了～所以啰，得要注意这个地方！
Tips
根据某些人的说法，这个月日、周不可并存的问题已经在新版中被克服了～不过，鸟哥并没有实际去验证他！目前也不打算验证他！ 因为，周就
是周，月日就月日，单一执行点就单一执行点，无须使用 crontab 去设置固定的日期啊！您说是吧？
想像一个环境，你的 Linux 服务器有一个工作是需要在每周的星期天凌晨 2 点进行，但是很不巧的，星期六停电了～所以你得要星期一
才能进公司去启动服务器。 那么请问，这个星期天的工作调度还要不要进行？因为你开机的时候已经是星期一，所以星期天的工作当然不会被
进行，对吧！
问题是，若是该工作非常重要 （例如例行备份）， 所以其实你还是希望在下个星期天之前的某天还是进行一下比较好～那你该怎办？
自己手动执行？如果你跟鸟哥一样是个记忆力超差的家伙，那么肯定“记不起来某个重要工作要进行”的啦！ 这时候就得要靠 anacron 这个指令
的功能了！这家伙可以主动帮你进行时间到了但却没有执行的调度喔！
anacron 并不是用来取代 crontab 的，anacron 存在的目的就在于我们上头提到的，在处理非 24 小时一直启动的 Linux 系统的 crontab
的执行！ 以及因为某些原因导致的超过时间而没有被执行的调度工作。
其实 anacron 也是每个小时被 crond 执行一次，然后 anacron 再去检测相关的调度任务有没有被执行，如果有超过期限的工作在， 就执