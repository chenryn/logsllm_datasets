Operating System Fingerprinting for Virtual Machines
Nguyen Anh Quynh
Email: PI:EMAIL
Abstract
In computer security ﬁeld, Operating System ﬁngerprint-
ing (OSF) is the process of identifying the OS variant and
version. OSF is considered an important stage to decide
security policy enforced on protected Virtual Machine
(VM). OSF is also the ﬁrst step of VM introspection pro-
cess. Unfortunately, current OSF techniques suffer many
problems, such as: they fail badly against modern Oper-
ating System (OS), they are slow, and only support lim-
ited OS-es and hypervisors.
This paper analyzes the drawbacks of current OSF ap-
proaches against VM, then introduces a novel method
named UFO to ﬁngerprint OS running inside VM. Our
solution ﬁxes all the above problems: Firstly, it can rec-
ognize all the available OS variants and (in lots of cases)
exact OS versions with excellent accuracy, regardless of
OS tweaking. Secondly, UFO is extremely fast. Last but
not least, it is hypervisor-independent: we proved that by
implementing UFO on Xen.
1
Introduction
OSF is the process of understanding which OS is running
on a particular machine. OSF is helpful for the admin-
istrators to properly decide the security policy to protect
their systems. For example, assume that we want to pro-
tect this machine against the Conﬁcker worm [10]. If
we know that this machine runs Linux, which is not ex-
ploitable by Conﬁcker, we do not need secure it. But if
that machine runs a speciﬁc version of Microsoft Win-
dows, we have to look more closely: in case the OS is
Windows 7, we can safely ignore the problem, because
Conﬁcker does not affect this Windows edition. But if
the OS is Windows XP SP3, which can be remotely com-
promised by this worm, we should put a ﬁrewall around
the machine to prevent the attack, and possibly IDS/IPS
must be deployed on the network path to monitor the
threat.
One more motivation for our research is that knowing
the VM’s OS is important for memory introspection on
VM [6]: memory analyzing can only be done when we
know exactly the OS version of the OS inside the VM,
because every OS variant, and also OS version, is very
different in the internal structure.
This research explores available methods to perform
OSF on VM, to help the VM administrators to keep track
of the OS-es installed inside their VMs. The reason is
that in reality, each VM can be rented by different per-
son, and runs whatever OS that the VM’s owner setup
inside. Even initially the administrator knows exactly the
OS installed in a particular VM, which might not be true
anymore after that, because the VM’s owner can upgrade
his OS anytime. This is the actual case with Windows
OS: Windows XP users can upgrade their OS to Win-
dows Vista, then to Windows 7 with ease. The other
problem he must frequently cope with is to protect un-
known VM, with unknown OS, which might be migrated
into his physical machines anytime from the cloud.
Unfortunately, available OSF approaches against VM
have many problems.
Firstly, they fail badly against
modern OS-es having none or minimal customization.
Secondly, some methods are not as fast as we would de-
sire: they might take at least few dozen seconds for one
target. Lastly, some methods depend on the hypervisors,
and can only recognize particular OS-es.
We propose a novel method named UFO to solve these
outstanding issues: UFO can recognize all the available
OS-es variants, and even their exact versions, with excel-
lent accuracy. We perform fuzzing ﬁngerprints, so UFO
can also deal with OS having non-trivial customization.
The other beneﬁt is that UFO is extremely fast: the ﬁn-
gerprinting is done in in milliseconds. Besides, it sup-
ports all kind of hypervisors. We proved that by imple-
mentations for Xen [14] and Microsoft Hyper-V [9].
1
2
Available OSF Solutions for VM
This section discusses the current problems of available
OSF solutions for VM, then proposes several require-
ments for a desired OSF tool for VM.
2.1
Network-based OSF
Many OSF tools, such as nmap [5] and xprobe [15], have
been introduced to actively perform remote OSF via net-
work. While these tools are traditionally used against
physical systems, they can be perfectly employed to ﬁn-
gerprint VMs exposed to the network, too.
However, all the network-based OSF methods suffer
some major problems: they either rely on scanning open
ports on the target, or on examining the replied packets.
Unfortunately, nowadays modern systems tighten their
setup, thus remote OSF fails in many cases. For exam-
ple, Windows 7 disables all the network services by de-
fault, therefore close all the TCP/UDP ports. As a result,
nmap cannot ﬁnd any open ports, thus have no informa-
tion to perform ﬁngerprinting. The on-by-default ﬁrewall
on Windows 7 also drops all the ICMP packets, so leaves
no chance for xprobe, who relies on ICMP data to work.
The other problem is that network-based OSF is quite
slow: nmap, a tool having a lot of optimization, typically
takes at least 30 seconds on one target, even when we run
nmap on the host VM, against a guest VM on the same
physical machine. This problem is unavoidable, because
nmap has to scan thousand ports on the target, then must
wait for the responses, with speciﬁc timeout.
Last but not least: it is a trend that the administrators
are more aware of OSF issue, and start to deploy anti-
ﬁnger OS solutions, such as ipmorph [12], in their sys-
tem to fool all the current network-based OSF methods.
The fact that the tool like ipmorph is free and easy-to-use
renders network-based OSF obsolete in many cases.
2.2
Memory Introspection
Memory introspection is the method of inspecting and
analyzing the raw memory of the guest VM from the host
VM, to understand the context and status of the guest
[6]. This technique can disclose unlimited information
about the guest OS, including even OS version and op-
tions. While memory introspection sounds like a solution
for our problem, however memory introspection must be
done in the other way around: we should know exactly
the OS runs inside the guest ﬁrst to apply the right intro-
spection method to analyze its memory. Unfortunately,
there are a lot of OS-es to be recognized, and even with
the OS source code in hand, understanding the OS inter-
nals to extract the desired information is far from trivial.
Paper [4] proposed an interesting method to ﬁnger-
print the OS without having to know the OS internals,
that is to compare the hash value of the ﬁrst code frag-
ments of the interrupt handlers with known OS-es. The
authors claimed that this is possible because the interrupt
handlers vary signiﬁcantly across OS types and versions.
However, this idea misses an important point: the bi-
nary code depends on compilers, compiler versions, and
also compiler settings used to compile the OS. For open
source OS, such as Linux, *BSD or OpenSolaris, the ker-
nel can be recompiled by users using whatever compiler
and compiler options they want to. In such a case, even
with the same source code, the interrupt code might vary
accordingly, and the hash value of the interrupt handler
greatly change. Consequently, the method of [4] fails to
recognize the OS, even if the OS internals are unchanged.
2.3
Inspecting File-system Content
Another solution is to mount the guest ﬁle-system (FS),
extract out special ﬁles and analyze their contents for in-
formation on OS variant and version. This approach is
feasible because in principle, the host VM can access to
the guest’s FS, and reads its content. This method is al-
ready used by a tool named virt-inspector [8]: it mounts
the FS, then extracts out and analyzes the registry ﬁles
for Windows version [7].
However, there are some signiﬁcant problems with
this approach. Firstly, if the guest uses unknown FS, it
is impossible for the host to mount its FS and access to
its content. For this exact reason, the solution is not re-
ally portable to non-Unix hypervisors, such as Microsoft
Hyper-V, with the host VM is based on Windows OS.
Indeed, currently Windows can only understand ext2 FS
[1], but fails to recognize various other important FS-es
in Linux world, which can be used in Linux-based VM
running on Hyper-V.
Secondly, in case the guest encrypts the FS (which is a
reasonable way to provide some security and privacy for
guest VM in cloud environment), it is practically impos-
sible for the host to understand the FS content.
Bottom line, we can see that all the available solutions
examined above are not quite capable to solve the OSF
problem for VM. We desire a better OSF tool with the
following six requirements: (1) It gives accurate ﬁnger-
print result, with details on the target OS version. (2)
It does not depend on the compiler using to compile the
OS. (3) It is more resilient against OS tweaking. (4) It
is not easy to be fooled by currently available anti-OSF
tools. (5) It is faster, and should not cause any negative
impact on the guest performance. (6) It can work with
all kind of hypervisors. On the other words, it should be
hypervisor independent.
Our paper tries to solve the OSF problems against
2
VMs running on the Intel platform, the most popular ar-
chitecture nowadays.
3
UFO Design
Within the scope of this paper, we put a restriction on
UFO: UFO does not try to ﬁngerprint the real-mode OS-
es. We just simply report that the guest VM is operating
in real-mode if that is the case, without trying to dig fur-
ther. While this is a limitation of UFO, it is not a big
problem in reality, because most, if not all, modern OS-
es mainly function in protected mode to take advantage
of various features offered by Intel architecture.
3.1
Intel Protected Mode
Protected mode is an operational mode of Intel compati-
ble CPU, allowing system software to utilize features not
available in the obsolete real-mode, such as virtual mem-
ory, paging, etc..
Intel organizes system memory into segments, allow-
ing the OS to divide memory into logical blocks, plac-
ing in different memory regions.
In protected mode,
each segment is represented by segment selector, seg-
ment base and segment limit. The segment selectors are
represented by six segment registers CS, DS, ES, FS, GS
and SS. All the segment information is stored inside a ta-
ble called Global Descriptor Table (GDT). The base and
limit of GDT are kept in GDTR register. When switch-
ing from real-mode to protected mode, OS must setup
the GDT, using the LGDT instruction.
Protected mode OS also needs to initialize the Inter-
rupt Descriptor Table (IDT), where put all the interrupt
handlers of the system. The position and limit of IDT are
kept in a register name IDTR, and IDT must be setup by
the LIDT instruction.
OS can manage its tasks with a register named Task
Register (TR). TR contains the segment selector of the
Task-State-Segment (TSS), where kept all the processor
state information of the current task. TR points to the
GDT, thus can also be represented by segment selector,
segment base and segment limit.
To provide strong isolation between privilege execu-
tion domains, Intel deﬁnes four rings of privilege: ring
0, ring 1, ring 2 and ring 3 (Typically, the OS kernel runs
at ring 0, and applications run at ring 3). At any moment,
the machine is functioning in only one of these rings.
An OS might use some special registers speciﬁc to
hardware, but supported in all the modern CPU, like MSR
EFER to control various features of the CPU, such as 64-
bit OS (to support 64-bit mode), fast-syscall (to enable
faster execution system call, using modern instructions
such as SYSENTER and SYSCALL), and non-executable
(also called NX in short, to allow marking of memory
pages as non-executable to prevent execution of mali-
cious data placed into stack or heap by an attacker). Each
of these features must be enabled by writing to the MSR
EFER with an instruction named WRMSR. Therefore we
can read the value of MSR-EFER to know if the OS sup-
ports these features or not.
Note that while 64-bit, fast-syscall and NX features
have been introduced for quite a long time, for a lot of
reasons, many OS-es have not supported them yet, or just
picked them up in recent versions.
3.2
OS Parameters
From the external point of view, an OS uses several facil-
ities, making a set of OS parameters, deﬁned as follow-
ings.
• Segment parameters: each of six segment regis-
ters CS, DS, ES, FS, GS and SS is considered an
OS parameter. These segment parameters have fol-
lowing three attributes: segment selector, segment
base and segment limit, represented the selector, the
base and the limit of the segment, respectively.
Because at a moment, the machine is operating at
one of four ring levels of privilege, we need to clar-
ify the privilege of each segment parameter. We as-
sociate them with the ring level they are function-
ing in. For four ring levels, potentially with each
segment register we can have up to four possible
segment parameters. For example, with code seg-
ment CS, we have CS0, CS1, CS2, CS3 parameters,
respectively for ring 0, ring 1, ring 2, and ring 3.
Similarly, we have four set of segment parameters