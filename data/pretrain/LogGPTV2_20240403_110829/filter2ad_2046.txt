# BRIDEMAID: A Hybrid Tool for Accurate Detection of Android Malware

**Authors:**  
Fabio Martinelli, Francesco Mercaldo, Andrea Saracino  
Istituto di Informatica e Telematica, Consiglio Nazionale delle Ricerche, Pisa, Italy  
Email: [PI:EMAIL]

## Abstract
This paper introduces BRIDEMAID, a hybrid framework that combines static and dynamic analysis for the accurate detection of Android malware. The static analysis is based on n-grams matching, while the dynamic analysis involves multi-level monitoring of device, app, and user behavior. The framework was tested against 2794 malicious apps, achieving a detection accuracy of 99.7% with a negligible false positive rate, as verified on a set of 10,000 genuine apps.

## Introduction
Due to its increasing popularity, Android is currently the primary target for over 99% of security attacks on mobile platforms. Traditional trojanized apps are now accompanied by new threats such as polymorphic and composition malware, which use dynamic code loading or modification to evade detection.

Current solutions for protecting users from these new threats primarily rely on signature-based detection, which is inadequate for mobile platforms. Signature-based detection requires a threat to be widespread before it can be effectively recognized. Attackers also employ various obfuscation techniques to make signature collection more challenging.

To address this lack of generality, this paper presents BRIDEMAID (Behavior-based Rapid Identifier Detector and Eliminator of Malware for AndroID), a comprehensive and accurate on-device analysis framework for Android apps. BRIDEMAID combines static and dynamic techniques to distinguish between malicious and legitimate Android applications. The research leading to these results is detailed in [4].

The contributions of this paper include:
1. The description of BRIDEMAID, a novel framework for on-device detection of malicious Android apps using a hybrid behavior-based approach.
2. A brief analysis of typical malware behavior and attack patterns.
3. Experimental results on a dataset of nearly 12,000 apps, both malicious and benign, and a comparison with the VirusTotal framework.

## Detection Methodology
BRIDEMAID's analysis consists of three sequential steps: static, metadata, and dynamic. These steps aim to maximize malware detection rates while minimizing false positives. The main phases are illustrated in Figure 1, which shows the control of each app's behavior from the moment it enters the mobile device.

### Static Analysis
The static analysis engine decompiles the APK and analyzes the source files using n-grams to identify similarities in executed actions. If the static analysis flags the app as malicious, it is removed. Otherwise, BRIDEMAID proceeds to dynamic analysis. The static analysis is based on n-grams classification, where the frequency of opcodes is calculated and analyzed using a binary classifier, specifically a Support Vector Machine (SVM) trained on a dataset of malicious and benign apps. More details on the static analysis can be found in [2].

### Dynamic Analysis
The dynamic analysis involves placing monitors at the kernel, API, and application levels to control the activity of monitored apps and the entire device. The dynamic module uses classifiers and security policies to detect suspicious activities related to text messages, system call invocations, and administrator privilege abuses. Further details on the dynamic analysis are available in [5].

## Experimental Results
The dataset used for experiments includes 9804 genuine apps downloaded from Google Play and 2794 malicious apps from 123 families. The malicious apps were sourced from the Drebin dataset [1], the Genome Dataset [6], and the Contagio Mobile website. To test BRIDEMAID's resilience to obfuscation, two composition malware samples, classified as SMS-Trojans, were added. For comparison, the malicious apps were also classified using the VirusTotal service. Table 1 summarizes the detection results for the 2794 malicious apps.

Table 1: Detection results for analyzed malicious apps.
| Malware Type | Families | Samples | Static | Dynamic | BRIDEMAID | VirusTotal |
|--------------|----------|---------|--------|---------|------------|------------|
| Botnet       | 2        | 7       | 3      | 2       | 5          | 0          |
| Installer    | 6        | 406     | 10     | 33      | 406        | 400        |
| Ransomware   | 3        | 30      | 38     | 436     | 436        | 436        |
| Rootkit      | 13       | 543     | 5      | 771     | 771        | 771        |
| SMS Trojan   | 40       | 1295    | 231    | 1276    | 1295       | 1276       |
| Spyware      | 38       | 231     | 20     | 220     | 231        | 220        |
| Trojan       | 5        | 23      | 189    | 243     | 243        | 243        |
| Hybrid       | 14       | 2       | 0      | 14      | 14         | 0          |
| Composition  | 1        | 1       | 1      | 14      | 14         | 0          |
| Polymorphic  | 1        | 1       | 0      | 14      | 14         | 0          |
| **Total**    | **123**  | **2794**| **103**| **1910**| **2713**   | **2753**   |
| **Accuracy** |          |         | **68.4%** | **97.2%** | **99.7%**  | **98.0%**  |

BRIDEMAID achieved an overall detection accuracy of 99.7%, outperforming the standalone dynamic approach by 2.5% and the standalone static analysis by 31%. Additionally, BRIDEMAID was 1.7% more accurate than VirusTotal, which struggled with detecting malware without known signatures. VirusTotal was ineffective against composition malware, which BRIDEMAID successfully detected. The false positive rate (FPR) for the static analysis was zero, and very low (0.2%) for the dynamic analysis.

## Performance Evaluation
### Static Method Evaluation
To measure the computational performance of the static method, we used the `System.currentTimeMillis()` Java method to record the time in milliseconds. The total time to analyze a sample is the sum of three contributions: decompiling the APK (t_deassembling), building the feature vector (t_features), and testing the feature vector with the SVM model (t_testing).

The most computationally intensive task is t_features, while t_testing takes 0.0235 seconds. The static approach takes 3.6931 seconds to test a new sample, as shown in Table 2.

Table 2: Static method evaluation
| Metric        | Time (s)  |
|---------------|-----------|
| t_testing     | 0.0235    |
| t_total       | 3.6931    |
| t_deassembling| 1.5407    |
| t_features    | 2.1289    |

### Energy Consumption
To measure BRIDEMAID's energy consumption, we recorded the battery usage over two 24-hour periods, with and without BRIDEMAID running, using the Battery Monitor app. The Samsung Galaxy Nexus smartphone, equipped with a 1750 mAh battery, was used for the experiments. The results, shown in Figure 2, indicate that the maximum difference in battery discharge is 4%, with an average consumption of 82 mAh, accounting for 4.6% of the total battery capacity. Over 24 hours, the device loses approximately one hour of battery time.

### Performance Overhead
The performance overhead of BRIDEMAID was measured using the Quadrant Standard Edition benchmark tool. Table 3 reports the benchmark results, showing that the overall performance impact of BRIDEMAID is 1.4%.

Table 3: Benchmark Tests
| Test  | Vanilla | BRIDEMAID | Overhead (%) |
|-------|---------|-----------|--------------|
| Total | 2911    | 2868      | 1.4          |
| CPU   | 5509    | 5459      | 0.9          |
| Memory| 2660    | 2409      | 9.4          |
| I/O   | 3860    | 3705      | 4            |
| 2D    | 327     | 327       | 0            |
| 3D    | 2250    | 2250      | 0            |

## Conclusion
In this paper, we present BRIDEMAID, a hybrid framework combining static and dynamic analysis for the detection of Android malware. Our results show that BRIDEMAID achieves a detection accuracy of 99.7%, surpassing current signature-based antimalware technologies.

## Acknowledgements
This work was partially supported by H2020 EU-funded projects NeCS and C3ISP and EIT-Digital Project HII.

## References
[1] D. Arp, M. Spreitzenbarth, M. Huebner, H. Gascon, and K. Rieck. Drebin: Efficient and explainable detection of Android malware in your pocket. In Proceedings of 21st Annual Network and Distributed System Security Symposium (NDSS), 2014.

[2] G. Canfora, A. De Lorenzo, E. Medvet, F. Mercaldo, and C. A. Visaggio. Effectiveness of opcode n-grams for detection of multi-family Android malware. In Availability, Reliability and Security (ARES), 2015 10th International Conference on, pages 333–340. IEEE, 2015.

[3] G. Canfora, F. Mercaldo, G. Moriano, and C. A. Visaggio. Composition-malware: Building Android malware at run time. In Availability, Reliability and Security (ARES), 2015 10th International Conference on, pages 318–326. IEEE, 2015.

[4] F. Martinelli, F. Mercaldo, A. Saracino, and A. Visaggio. I find your behavior disturbing: Static and dynamic app behavioral analysis for detection of Android malware. In 14th annual conference on Privacy, Security and Trust. IEEE, 2016. To Appear.

[5] A. Saracino, D. Sgandurra, G. Dini, and F. Martinelli. MADAM: Effective and efficient behavior-based Android malware detection and prevention. IEEE Transactions on Dependable and Secure Computing, PP(99):1–1, 2016.

[6] Y. Zhou and X. Jiang. Dissecting Android malware: Characterization and evolution. In Proceedings of 33rd IEEE Symposium on Security and Privacy (Oakland 2012), 2012.