title:BRIDEMAID: An Hybrid Tool for Accurate Detection of Android Malware
author:Fabio Martinelli and
Francesco Mercaldo and
Andrea Saracino
BRIDEMAID: An Hybrid Tool for Accurate Detection of
Android Malware
Fabio Martinelli, Francesco Mercaldo, Andrea Saracino
Istituto di Informatica e Telematica, Consiglio Nazionale delle Ricerche
Pisa, Italy
PI:EMAIL
ABSTRACT
This paper presents BRIDEMAID, a framework which ex-
ploits an approach static and dynamic for accurate detec-
tion of Android malware. The static analysis is based on
n-grams matching, whilst the dynamic analysis is based on
multi-level monitoring of device, app and user behavior. The
framework has been tested against 2794 malicious apps re-
porting a detection accuracy of 99,7% and a negligible false
positive rate, tested on a set of 10k genuine apps.
INTRODUCTION
1.
Due to its increasing popularity, Android is currently the
target of more than 99% of the security attacks toward mo-
bile platforms. Standard trojanized apps are now also sided
by new threats such as polymorphic and composition mal-
ware [3], which exploit dynamic code load or modiﬁcation
to reduce the likelihood of being discovered.
Current solutions to protect users from new threats are mainly
based on signature detection, which in mobile platform are
still inadequate [4]. The main issue is that using signature-
based detection, a threat must be widespread for being suc-
cessfully recognized, and attackers use diﬀerent techniques
to obfuscate code and binaries, making this signature col-
lection task even harder.
To supply this lack of generality, in this paper we discuss
BRIDEMAID (Behavior-based Rapid Identiﬁer Detector and
Eliminator of Malware for AndroID), a complete and accu-
rate, on device analysis framework for Android apps which
combines static and dynamic techniques to discriminate An-
droid malware applications from legitimate ones. The origi-
nal research bringing to these results has been presented in
[4].
The contribution of this paper are (i) the description of
BRIDEMAID a novel framework for on-device detection of
malicious Android apps, which exploits an hybrid behavior-
Permission to make digital or hard copies of part or all of this work for
personal or classroom use is granted without fee provided that copies
are not made or distributed for proﬁt or commercial advantage and that
copies bear this notice and the full citation on the ﬁrst page. Copyrights
for third-party components of this work must be honored. For all other
uses, contact the owner/author(s).
ASIA CCS ’17April 02-06, 2017, Abu Dhabi, United Arab Emirates
Copyright 2017 ACM
ACM 978-1-4503-4944-4/17/04.
http://dx.doi.org/10.1145/3052973.3055156
based approach for detection of Android malware, (ii) a
short analysis of typical malware behavior and attack pat-
terns, (iii) the experimental results on a dataset of almost
12k apps, both malicious and benign and the comparison
with the VirusTotal framework.
2. DETECTION METHODOLOGY
The analysis performed by BRIDEMAID is constituted of
three consequent steps (static, meta-data and dynamic, as
explained below) in which diﬀerent features are retrieved
and analyzed together with the two-fold eﬀect of maximiz-
ing the malware detection rate and minimizing the amount
of false positives. The main phases are illustrated in Figure
1. As shown, the behavior of each app is controlled from the
Figure 1: Analysis workﬂow of the proposed frame-
work.
very moment it enters the mobile device. In fact, as soon
as the app has been downloaded, the static analysis engine
will decompile the apk and analyze the source ﬁles looking
for similarities in the executed actions exploiting n-grams.
If the static analysis marks the app as malicious, the appli-
cation will be removed, otherwise BRIDEMAID invokes the
dynamic analysis to deep investigate about the trustworthi-
ness of the application under analysis.
The static analysis is based on n-grams classiﬁcation where,
the frequency of opcodes is calculated from the decompiled
apps, hence analyzed through a binary classiﬁer. The clas-
siﬁer exploited by BRIDEMAID for this static analysis is
the SVM (support vector machine), trained on a dataset of
malicious and benign apps. Details on the static analysis
can be found in [2].
The dynamic analysis is instead based on a set of monitors
placed at kernel, API and Application level, which control
the activity of monitored apps and globally of the whole de-
vice. The dynamic module exploits both classiﬁers and se-
curity policies to control suspicious activities related to text
messages, system call invocations and administrator privi-
lege abuses. For details on the dynamic analysis, the inter-
ested reader can refer to [5].
3. EXPERIMENTAL RESULTS
The dataset used for experiments is made of a set of 9804
genuine apps downloaded from Google Play and a set of 2794
malicious apps belonging to 123 malicious families. The ma-
licious apps have been extracted from the Drebin dataset
[1], the Genome Dataset [6] and the Contagio Mobile web-
site1. Moreover to test the BRIDEMAID capability of not
being deceived by obfuscation, we have added two compo-
sition malware [3], whose performed misbehavior belongs
to the class of SMS-Trojan. For comparison, the malicious
apps have been also classiﬁed through the VirusTotal ser-
vice. Table 1 details the detection results on the described
set of 2974 malicious apps.
The ﬁrst column from left represents the malware behav-
ioral classes: Botnet, Installer, Ransomware, Rootkit, SMS
Trojan, Spyware, Trojan, Hybrid, Composition and Poly-
morphic (further details about malware behavioral classes
are available in [4]), the second one lists the overall sam-
ples, whilst in the third and fourth column there are the
number of samples recognized as malware respectively by
static and malware analysis. The uniﬁed detection result
is then expressed in the fourth column, where a malicious
app is considered as detected if at least one between static
and dynamic approach detects it. As shown in Table 1,
the dynamic approach is globally more accurate than the
static one, being able to detect an higher number of mal-
ware. BRIDEMAID reports an overall detection accuracy
of 99.7%, which is 2.5% more accurate than the standalone
dynamic approach and 31% more accurate than the stan-
dalone static analysis. Moreover, BRIDEMAID is more ac-
curate (1.7%) than VirusTotal, which is not able to detect
those malware whose signature is still not known in the an-
tivirus databases.
In fact, we can see that VirusTotal is
ineﬀective against the composition malware, which are in-
stead detected by BRIDEMAID. Being based on known sig-
natures, VirusTotal is, in fact, not eﬀective against Zero
Day attacks diﬀerently from BRIDEMAID, which exploit-
ing computational intelligence and hybrid white-list/black-
list approaches, is more resilient to obfuscation techniques
and generally able to detect new threats. To evaluate the
False Alarm Rate, BRIDEMAID has been used to classify
the set of 9804 genuine apps previously described. The FPR
is NULL for the static analysis and very low (0.2%) for the
dynamic one.
1http://contagiominidump.blogspot.com/
4. PERFORMANCE EVALUATION
In this section we discuss the BRIDEMAID performances in
terms of the evaluation of static method and from dynamic
point of view i.e., the energy consumption and the overhead.
4.1 Static Method Evaluation
In order to measure computational performance related to
static method, we used the System.currentTimeMillis() Java
method that returns the current time in milliseconds. We
consider the overall time to analyse a sample as the sum of
three diﬀerent contributions: the average time required to
extract the smali classes from the application under analysis
(tdeassembling) , the time required to build the features vec-
tor (tf eatures), and the time required to test the extracted
features vector with the model learned by using the SVM
algorithm (ttesting).
The most intensive task from the computational point of
view is represented by tf eatures, while ttesting requires 0.0235
seconds to evaluate the feature vector: the static approach
takes 3,6931 seconds to test a new sample, as shown in Table
2.
4.2 Energy Consumption
To measure the BRIDEMAID energy consumption we have
measured the diﬀerence in battery consumption over two pe-
riods of 24 hours, with and without BRIDEMAID running.
To apply the measurements, we have used the Battery Mon-
itor app2.
Figure 2: Energy Impact Evaluation of BRIDE-
MAID
The Samsung Galaxy Nexus smartphone use for the experi-
ments equips a 1750 mAh battery. The results are reported
in Figure 2, whose graph reports the two diﬀerent discharges
sampled in a period of 24 hours with 77 sampling intervals
(x-axis). The distance between the two discharging curves
is always lesser than 4%, which is the maximum value. The
average consumption of the BRIDEMAID application re-
ported by Battery Monitor is 82 mAh, accounting to 4.6%
of the total battery capacity. Thus, on a period of 24 hours,
the device loses approximately one hour of battery time.
4.3 Performance Overhead
The performance overhead of BRIDEMAID has been mea-
sured through a standard benchmark tool, i.e. the Quad-
2https://play.google.com/store/apps/details?id=
ccc71.bmw
Table 1: Detection results for analyzed malicious apps.
Malware Type
Families Samples
Static
Dynamic
Fam Sam Fam Sam
BRIDEMAID VirusTotal
Botnet
Installer
Ransomware
Rootkit
SMS Trojan
Spyware
Trojan
Hybrid
Composition (SMS Trojan)
Polymorphic (SMS Trojan)
2
6
3
13
40
38
5
14
1
1
7
406
30
543
1295
231
23
243
2
14
1
3
2
10
33
38
5
10
0
1
2
236
11
436
771
231
20
189
0
14
0
6
3
13
40
21
2
14
1
1
0
406
30
543
1295
161
19
243
2
14
Total
123
2794
103
1910
101
2713
Accuracy
68,4 %
97,2 %
2
406
30
543
1295
231
20
243
2
14
2784
99.7%
7
400
30
541
1276
220
22
243
0
14
2753
98%
Table 2: Static method evaluation
ttesting
0.0235 s
ttotal
3,6931 s
tdeassembling
1.5407 s
tf eatures
2.1289 s
rant Standard Edition app, which is distributed through
Google Play3. Table 3 reports the benchmark for the system
when BRIDEMAID was running (third column from left,
“BRIDEMAID”) and when it was not (second column left,
“Vanilla”). The last column reports the overhead computed
as a percentage overhead between the two performances.
Benchmarks are provided as indexes, where a highest value
means a better performance. Benchmarks reported have
been computed as the average of ﬁve experiments, both in
“Vanilla” and “BRIDEMAID” conﬁguration. The overhead
of BRIDEMAID is caused by both the kernel module, which
hijacks system calls, and a Global Monitor service that runs
in background when the system is active. As shown, the
performance impact of BRIDEMAID is acceptable; in fact,
the overall performance impact (Total) is 1.4%. On three
devices, we measured that on average the App-Evaluator
increases by 3 to 7 seconds the app installation phase.
Test
Total
CPU
Memory
I/O
2D
3D
Table 3: Benchmark Tests
Vanilla BRIDEMAID Overhead
2911
5509
2660
3860
327
2250
2868
5459
2409
3705
327
2250
1,4%
0,9%
9,4%
4%
0%
0 %
5. CONCLUSION
In this paper we present BRIDEMAID, a framework combin-
ing static and dynamic analysis to detect Android malware.
We obtain an accuracy in Android malware detection equal
to 99,7%, overcoming the current signature-based antimal-
ware technologies.
3http://play.google.com/store/apps/details?id=
com.aurorasoftworks.quadrant.ui.standard
Acknowledgements
This work has been partially supported by H2020
EU-funded projects NeCS and C3ISP and EIT-Digital
Project HII.
References
[1] D. Arp, M. Spreitzenbarth, M. Huebner, H. Gascon,
and K. Rieck. Drebin: Eﬃcient and explainable
detection of android malware in your pocket. In
Proceedings of 21th Annual Network and Distributed
System Security Symposium (NDSS), 2014.
[2] G. Canfora, A. De Lorenzo, E. Medvet, F. Mercaldo,
and C. A. Visaggio. Eﬀectiveness of opcode ngrams for
detection of multi family android malware. In
Availability, Reliability and Security (ARES), 2015
10th International Conference on, pages 333–340.
IEEE, 2015.
[3] G. Canfora, F. Mercaldo, G. Moriano, and C. A.
Visaggio. Composition-malware: building android
malware at run time. In Availability, Reliability and
Security (ARES), 2015 10th International Conference
on, pages 318–326. IEEE, 2015.
[4] F. Martinelli, F. Mercaldo, A. Saracino, and
A. Visaggio. I ﬁnd your behavior disturbing: Static and
dynamic app behavioral analysis for detection of
android malware. In 14th annual conference on Privacy
Security and Trust. IEEE, 2016. To Appear.
[5] A. Saracino, D. Sgandurra, G. Dini, and F. Martinelli.
Madam: Eﬀective and eﬃcient behavior-based android
malware detection and prevention. IEEE Transactions
on Dependable and Secure Computing, PP(99):1–1,
2016.
[6] Y. Zhou and X. Jiang. Dissecting android malware:
Characterization and evolution. In Proceedings of 33rd
IEEE Symposium on Security and Privacy (Oakland
2012), 2012.