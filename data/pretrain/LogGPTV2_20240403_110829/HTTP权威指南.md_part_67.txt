### 18.2.2 解决虚拟主机托管问题

HTTP原始规范中未考虑到每个Web服务器可能托管多个网站的情况，因此没有为共享服务器提供支持。这导致URL中的主机名信息被误认为是冗余的，并且仅要求发送路径部分。由于早期规范未能预见虚拟主机托管的需求，Web托管者不得不开发变通方案来支持这一功能。一个简单的解决方案是要求所有HTTP请求报文发送完整的URL，而不仅仅是路径部分。尽管HTTP/1.1确实要求服务器能够处理请求行上的完整URL，但将现有应用程序升级到此规范仍需较长时间。在此期间，出现了以下四种技术：

- **通过URL路径进行虚拟主机托管**：在URL中添加特定路径以区分不同网站。
- **通过端口号进行虚拟主机托管**：为每个站点分配不同的端口号，使请求由单独的Web服务器实例处理。
- **通过IP地址进行虚拟主机托管**：为不同虚拟站点分配专用IP地址，并绑定到同一台机器上，以便Web服务器通过IP地址识别网站。
- **通过Host首部进行虚拟主机托管**：定义了Host请求首部来携带网站名称，使得Web服务器可以通过该首部识别虚拟站点。

#### 1. 通过URL路径进行虚拟主机托管

这种方法通过分配不同的URL路径来隔离共享服务器上的虚拟站点。例如：
- Joe的五金商店: `http://www.joes-hardware.com/joe/index.html`
- Mary的古董拍卖店: `http://www.marys-antiques.com/mary/index.html`

当请求到达服务器时，虽然没有主机名信息，但服务器可以通过路径前缀区分它们：
- 请求Joe的五金商店: `GET /joe/index.html`
- 请求Mary的古董拍卖店: `GET /mary/index.html`

这种做法存在一些问题，如路径前缀多余且常见主页链接无法使用，因此不是理想的解决方案。

#### 2. 通过端口号进行虚拟主机托管

另一种方法是在Web服务器上为每个站点分配不同的端口号。例如，Joe用82端口，Mary用83端口。然而，终端用户通常不愿意在URL中指定非标准端口号，这限制了该方法的应用。

#### 3. 通过IP地址进行虚拟主机托管

更常用的方法是通过IP地址进行虚拟化。每个虚拟网站分配一个或多个唯一的IP地址，并绑定到同一台共享服务器上。服务器根据连接的目的IP地址判断目标网站。例如：
- `www.joes-hardware.com` 分配 IP 地址 `209.172.34.3`
- `www.marys-antiques.com` 分配 IP 地址 `209.172.34.4`

这些IP地址都绑定到同一物理服务器上，Web服务器通过目的IP地址识别请求的目标网站。然而，这种方法也有局限性，如IP地址稀缺和复制服务器时的复杂性。

#### 4. 通过Host首部进行虚拟主机托管

为了避免IP地址消耗和限制，可以在虚拟站点间共享同一个IP地址，并通过Host首部传递主机名信息。浏览器和服务器扩展了HTTP，将原始主机名包含在Host首部中。这样，服务器可以利用Host首部识别虚拟站点。

### 18.2.3 HTTP/1.1的Host首部

Host首部是HTTP/1.1请求首部，用于描述请求资源所在的主机和端口号。以下是其语法和用法：

- **语法**:
  ```
  Host = "Host" ":" host [ ":" port ]
  ```

- **注意事项**:
  - 如果Host首部不包含端口，则使用默认端口。
  - 如果URL包含IP地址，Host首部应包含相同的地址。
  - 如果URL包含主机名，Host首部必须包含相同的名字。
  - 如果客户端使用代理服务器，Host首部应包含原始服务器而不是代理服务器的名字。

- **缺失Host首部**:
  老式浏览器可能不会发送Host首部，导致虚拟主机托管服务器无法正确识别目标网站。

- **解释Host首部**:
  原始服务器可以根据Host首部判断请求的资源。如果请求报文中缺少Host首部，服务器应返回400 Bad Request响应。

- **Host首部与代理**:
  某些老版本浏览器在配置使用代理时，可能会错误地将代理的名字放在Host首部中，导致请求处理失败。

### 18.3 提高网站可靠性

网站可能因多种原因不可用，包括服务器宕机、网络拥塞和网络中断。本节介绍一些预判和处理这些问题的方法。

#### 18.3.1 镜像服务器集群

镜像服务器集群是一组配置相同的Web服务器，通过镜像复制内容以提高可用性和容错能力。常见的部署方式是使用网络交换机分发请求。主原始服务器负责内容更新，复制服务器则从主服务器接收内容并为用户提供服务。通过这种方式，即使某个服务器出现故障，其他服务器也能继续提供服务。