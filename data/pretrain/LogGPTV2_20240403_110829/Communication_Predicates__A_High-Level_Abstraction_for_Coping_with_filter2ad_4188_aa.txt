title:Communication Predicates: A High-Level Abstraction for Coping with
Transient and Dynamic Faults
author:Martin Hutle and
Andr&apos;e Schiper
A High-Level Abstraction for Coping with Transient and Dynamic Faults ∗
Communication Predicates:
Martin Hutle
Andr´e Schiper
martin.hutle@epﬂ.ch
andre.schiper@epﬂ.ch
´Ecole Polytechnique F´ed´erale de Lausanne (EPFL), 1015 Lausanne, Switzerland
Abstract
Consensus is one of the key problems in fault tolerant
distributed computing. A very popular model for solving
consensus is the failure detector model deﬁned by Chandra
and Toueg. However, the failure detector model has limita-
tions. The paper points out these limitations, and suggests
instead a model based on communication predicates, called
HO model. The advantage of the HO model over failure de-
tectors is shown, and the implementation of the HO model is
discussed in the context of a system that alternates between
good periods and bad periods. Two deﬁnitions of a good
period are considered. For both deﬁnitions, the HO model
allows us to compute the duration of a good period for solv-
ing consensus. Speciﬁcally, the model allows us to quantify
the difference between the required length of an initial good
period and the length of a non initial good period.
1. Introduction
Consensus is one of the key problems in fault tolerant
distributed computing. Consensus is related to replication
and appears when implementing atomic broadcast, group
membership, etc. The problem is deﬁned over a set of pro-
cesses Π, where each process pi ∈ Π has an initial value
vi: All processes must agree on a common value that is the
initial value of one of the processes.
Consensus can be impossible to solve, as established
by the FLP impossibility result [13]. Later it has been
shown that consensus can be solved in a partially syn-
chronous system with a majority of correct processes [12].
Roughly speaking, a partially synchronous system is a sys-
tem that is initially asynchronous, but eventually becomes
synchronous.1 Moreover, in a partially synchronous system
links are initially lossy, but eventually become reliable.
The notion of failure detectors has been suggested a few
years later [5]. The failure detector model is deﬁned as an
asynchronous system “augmented” with failure detectors,
which are deﬁned by some completeness and some accu-
racy property (see [5] for details). Over the years failure
detectors have become very popular. The model is today
widely accepted and has become the model mostly used for
expressing consensus algorithms. However, the failure de-
tector model has limitations.
First, failure detectors are not an abstraction of the par-
tially synchronous model (even though this claim has some-
times been made). The reason is that in the partially syn-
chronous model links are initially lossy, while the use of
failure detector to solve a problem requires perpetual reli-
able links.2 When using failure detectors, either the sys-
tem must provide reliable links, or reliable links need to
be implemented on top of the unreliable system links. As a
consequence, the capability of algorithms of tolerating mes-
sage loss — as it is the case for the Paxos algorithm [19] —
cannot be expressed naturally in the failure detector model.
Only a variant of Paxos that assumes reliable links can be
expressed using failure detectors, as done, e.g., in [4].
Second, failure detectors are not well suited to solve con-
sensus in the crash-recovery model, with or without stable
storage [1].
In the crash-recovery model, a process can
crash and later recover. This is in contrast to the crash-stop
model, in which process crashes are permanent. Intuitively,
one would think that solving consensus in the crash-stop
model or in a crash-recovery model should not lead to ma-
jor algorithmic differences. However, the comparison of
(i) the 3S consensus algorithm in the crash-stop model [5]
with (ii) the corresponding algorithm in the crash-recovery
model with stable storage [1] shows that the crash-recovery
algorithm is a much more complicated protocol than the
corresponding crash-stop algorithm. Moreover, the com-
plexity of the crash-recovery consensus algorithm makes it
hard to see that the crash-recovery algorithm is based on the
∗Research funded by the Swiss National Science Foundation under
grant number 200021-111701.
1This is not the only deﬁnition of a partially synchronous system.
2Failure detectors lead to the following programming pattern: Process
If q is not
p (i) waits for a message from process q or (ii) suspects q.
suspected while the message is lost, p is blocked.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:50:59 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007same basic ideas as the crash-stop algorithm. This leads to
the following question: Is there an inherent gap between the
crash-stop and the crash-recovery model that would explain
the higher complexity of the crash-recovery consensus al-
gorithm?
Third, failure detectors cannot handle Byzantine failures.
The reason is that the deﬁnition of a Byzantine behavior is
related to an algorithm: It is impossible to achieve a com-
plete separation of failure detectors from the algorithm us-
ing them. To overcome this problem, the notion of muteness
detectors has been suggested [9, 10, 18]. However, it is not
clear what system model could allow the implementation of
muteness detectors, which is an inherent limitation of the
approach.
These arguments suggest that failure detectors might not
be the ultimate answer to the consensus problem. As an al-
ternative to failure detectors, one could program directly at
the level of the partially synchronous system model. How-
ever, this model provides too low level abstractions. It is in-
deed useful to provide higher level abstractions for express-
ing consensus algorithms. The goal of this paper is to show
that another abstraction, namely communication predicates,
provides a better abstraction than failure detectors for solv-
ing consensus. Speciﬁcally, the paper brings an answer to
the question raised in [17], about quantifying the time it
takes the environment to reach round synchronization after
the system has stabilized.
The paper is structured as follows. Section 2 serves as a
motivation to the introduction of communication predicates.
Communication predicates are deﬁned in Section 3. The
implementation of communication predicates is presented
in Section 4. Related work is discussed in Section 5, and
Section 6 concludes the paper. Note that the paper is re-
stricted to benign faults; Byzantine faults will be addressed
in another paper.
2. Fault taxonomy
In this section we discuss the taxonomy of faults, with
the goal to understand the limitation of failure detectors.
The discussion will serve as the basis for the introduction
of the notion of communication predicates.
2.1. Failure detectors and the paradox of
the classical fault taxonomy
Let us come back to the second limitation of failure de-
tectors (see Section 1), namely the gap between solving
consensus with failure detectors in the crash-stop model and
in the crash-recovery model. Our goal is to explain this gap,
and so to understand the limited context in which failure de-
tectors provide a good abstraction.
When looking at process failures, the classical fault tax-
onomy distinguishes, from the most benign to the most se-
vere, (i) crash faults, (ii) send-omission faults, (iii) general-
omission faults (which includes receive-omission faults),
and (iv) malicious faults [22]. It can be observed that this
taxonomy does not distinguish crash faults without recov-
ery (the crash-stop model) and crash faults with recovery
(the crash-recovery model). So, one would expect little dif-
ference when solving consensus in either of these two mod-
els. However, as already mentioned, this is not the case with
failure detectors:
• In the crash-stop model, a standard solution to consen-
sus is the rotating coordinator algorithm that requires
the failure detector 3S and a majority of processes [5].
• Extending this solution to the crash-recovery model is
not easy. It requires the deﬁnition of new failure de-
tectors, and the algorithm becomes more complex [1].
This can be observed by comparing the two algorithms
that are given in the appendix of [16].
This observation leads to the following question: What
is the key issue, not captured by the classical fault tax-
onomy, that explains the gap between the crash-stop and
crash-recovery consensus algorithm? The key issue is in the
distinction between permanent faults and transient faults.
Crash-stop is a model with permanent (crash) faults, while
crash-recovery is a model with transient (crash) faults. A
fault taxonomy that does not distinguish between perma-
nent and transient fault is not able to explain the limitation
of the failure detector model. In the next section we sug-
gest another new fault taxonomy that makes the distinction
between permanent and transient fault explicit.
2.2. Alternative fault taxonomy (for benign
faults)
An alternative process fault taxonomy can be organized
along two dimensions. The ﬁrst dimension distinguishes
between the already discussed permanent (P) and transient
faults (T). The second dimension distinguishes faults that
can hit any process in the system from faults that hit only a
subset of the processes. We use the term static (S) for faults
that can hit only a ﬁxed subset of processes and dynamic3
(D) for all other cases, i.e., faults that can hit all processes.
Combining this two dimensions leads to four classes of
process faults:
• SP: at most f processes out of n are faulty (f  2n/3 then
if the values received, except at most ⌊ n
to x then
xp ← x
3 ⌋, are equal
else
xp ← smallest xq received
if more than 2n/3 values received are equal to x then
DECIDE(x)
5:
6:
7:
8:
9:
10:
11:
12:
13:
according to Sr
p(sp), where sp is p’s state at the beginning
of the round. At the end of a round r, p makes a state tran-
sition according to T r
p (~µ, sp), where ~µ is the partial vector
of all messages that have been received by p in round r.
We denote by HO(p, r) the support of ~µ, i.e., the set
of processes (including itself) from which p receives a mes-
sage at round r: HO(p, r) is the heard of set of p in round r.
If q /∈ HO(p, r), then the message sent by q to p in round r
was subject to a transmission failure. Communication pred-
icates are expressed over the sets (HO(p, r))p∈Π,r>0. For
example,
∃r0 > 0, ∀p, q ∈ Π : HO(p, r0) = HO(q, r0)
ensures the existence of some round r0 in which all pro-
cesses hear of the same set of processes. Another exam-
ple is a communication predicate that ensures that in every
round r all processes hear of a majority of processes (n is
the number of processes):
∀r > 0, ∀p ∈ Π : |HO(p, r)| > n/2.
p, T r
Let A = hSr
p i be an HO algorithm. A problem is
solved by a pair hA, Pi, where P is a communication pred-
icate. The consensus problem is speciﬁed by the following
conditions:
3. Communication predicates and algorithms