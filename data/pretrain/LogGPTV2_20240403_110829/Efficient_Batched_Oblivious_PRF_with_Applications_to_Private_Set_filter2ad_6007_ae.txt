0.10
0.04
212
0.03
0.77
1.37
1.52
0.53
set size n
216
0.56
9.18
18.78
23.58
8.06
220
10.00
142.80
296.40
411.60
127.20
224
176.00
1,574.40
4,032.00
6,489.60
1,955.20
Asymptotic [bit]
nv
2κ(1.2n + s)(cid:100) min(v(cid:48),(cid:96))−log(n)
8
(cid:101) + (3 + s)nv(cid:48)
k(1.2n + s) + (3 + s)nv
Table 5: Communication in MB for PSI protocols with n elements per party. Parameters k, s, and v refer to
those in Table 2 / Section 6.1. PSSZ requires slightly long OPRF outputs: v(cid:48) = σ+log(3n2). Communication
costs for PSSZ and for our protocol ignore the ﬁxed cost of base OTs for OT extension.
Size of pseudorandom code. Our BaRK-OPRF protocol requires a pseudorandom code achieving min-
imum distance κ = 128. In our protocol, Alice evaluates the PRF on (3 + s)n values. In order to argue
that these values can be collectively pseudorandom, so we require the underlying PRF to have m-RK-PRF
security (Deﬁnition 4) for m = (3 + s)n.
From Lemma 5, this means we must choose a pseudorandom code with parameters (d = κ,  = σ +log m).
Using Lemma 3, we calculate the minimum length of such a pseudorandom code; the results are column k
in Table 2. We round up to the nearest multiple of 8 so that protocol messages will always be whole bytes.
15
Length of OPRF outputs. The length of OPRF output controls the probability of a spurious collision
in the PSI protocol. In Section 5.2 we argued that output length of σ + log2(n2) is suﬃcient to bound the
probability of any spurious collision to 2−σ.
Using σ = 40, we compute the appropriate length in column v of Table 2. We round up to the nearest
multiple of 8 so that protocol messages will always be whole bytes.
6.2 Environment settings
All of our experiments were implemented on a server with Intel(R) Xeon(R) CPU E5-2699 v3 2.30GHz CPU
and 256 GB RAM. We run both clients on the same machine, but simulate a LAN and WAN connection using
the Linux tc command. In the WAN setting, the average network bandwidth and the average (round-trip)
latency are set to be 50 MB/s and 96 ms, respectively. In the LAN setting, the network has 0.2ms latency.
All of our experiments use a single thread for each party.
6.3 Implementation Details
In our BaRK-OPRF protocol, the oﬄine phase is conducted to obtain an OT extension matrix of size (1.2n +
s) × k by using the IKNP OT extension. Speciﬁcally, ﬁrst we use the Naor-Pinkas construction [NP01] to
get 128 base-OTs, which are then extended to a k × 128 matrix by utilizing the pseudorandom generator.
The transpose of this matrix yields the k base OTs for the BaRK-OPRF extension protocol. We extend to
1.2n + s OPRF instances.
We hash all inputs of both client and server at the beginning of the online phase. Following Lemma 3,
we use a PRF with suitably long output as our pseudorandom code. More concretely, the parties agree on
an AES-128 key sk, which is independent of their inputs, and then extend the output of AES via:
C(x) = AESsk(1(cid:107)x)(cid:107)AESsk(2(cid:107)x)(cid:107)AESsk(3(cid:107)x)(cid:107)AESsk(4(cid:107)x)
to obtain the desired k random output bits. Furthermore, to reduce the waiting time at the server side,
the client will constantly send a new packet encompassing multiple code words to the server. Based on
trail-and-error approach, the packet size of 212 × k bits is selected to minimize the waiting time. In Table
4, we report the running time of our protocol for both oﬄine and online phases in diﬀerent settings. For
instance, in LAN environment, the online phase of our BaRK-OPRF protocol takes about 3.2s for n = 220.
To illustrate the eﬃcacy of the BaRK-OPRF-PSI approach, we compared it with a na¨ıve hashing protocol
and the PSSZ protocol. The na¨ıve hashing protocol is a widely-used insecure protocol [PSSZ15] where both
parties use the same cryptographic hash function to hash their elements, then one of the parties permutes
their hash value and sends the result to the other party, who will compute the intersection by computing
the match of the hash values. In the following, we conducted several performance tests with the input sets
of equal size n and for inputs of length 32, 64, and 128 bits.
Note that the running time of our PSI protocol does not depend on the bit length of the input. It can be
explained as follows. First, the upper bound of the length of the input is 128 bits. Second, the hash function
will call a block of 128 bits to encrypt the input data, thus our protocol has the same computation cost for
all bit length of the input. In addition, the communication cost of our BaRK-OPRF protocol depends only
on the length of the pseudorandom code k and the length v of the OPRF outputs, which are independent
of the bit length (cid:96). Similarly, the na¨ıve hashing protocol does not depend on (cid:96). This was conﬁrmed by our
simulation results for diﬀerent bit lengths (e.g. 32 bits, 64 bits, and 128 bits). Table 3 presents the running
time of the na¨ıve hashing protocol, PSSZ, and our PSI protocol in both LAN and WAN environment.
As we can see in the tables, our protocol outperforms PSSZ in almost all the case studies, especially for
the long bit length of input (cid:96) and large values of the input size n. For example, we consider the results in the
LAN setting. For the input size of 220, our approach can improve 2.8 times and 3.6 times the performance
of PSSZ for the bit lengths of 64 bits and 128 bits, respectively. For the input size of 224, the corresponding
improvements are 2.3 times and 3.6 times. It is worth mentioning that it takes about 1 minute to compute
the intersection for the sets of size n = 224. Similar observations can be inferred from Table 3 for the WAN
setting.
At the same time, for smaller bit lengths, the PSSZ protocol can be faster than our PSI protocol. This
is the case, for example, when the bit length is 32 bits and n = 224 in LAN setting. Since the two protocols
16
are very similar, diﬀering only in the choice of OPRF subprotocol, it would be relatively straightforward to
implement a hybrid that always chooses the best OPRF subprotocol based on n and (cid:96) according to Table 1.
However, in order to clarify the strengths/weaknesses of the two protocols, we report the performance for
our approach even when it is worse.
Similar to the running time result, our communication cost is 2.9–3.3× faster than Pinkas et al. for PSI
of 128-bit strings and suﬃciently large sets. Concretely, for the input size of 220, our protocol can improve
3.2 times the performance of PSSZ for the bit lengths 128 bits. Table 5 presents the communication (in MB)
of the na¨ıve hashing protocol, PSSZ, and our BaRK-OPRF-PSI protocol.
Acknowledgments
We thank Peter Rindal for contributing libraries and helpful suggestions to our protocol implementation.
We also thank Michael Zohner for answering our many questions about the implementation of [PSSZ15].
Finally, we thank the anonymous CCS reviewers for their helpful feedback.
The ﬁrst author is supported by the Oﬃce of Naval Research (ONR) contract number N00014-14-C-
0113. The second author is supported by NSF Grants CNS-1350619 and CNS-1414119, in part by the
Defense Advanced Research Projects Agency (DARPA) and the U.S. Army Research Oﬃce under contracts
W911NF-15-C-0226, and an MIT Translational Fellowship. The third and fourth authors are supported by
NSF award 1149647 and a Google research award. This work was initiated while the ﬁrst three authors were
visiting the Simons Institute for the Theory of Computing, supported by the Simons Foundation and by the
DIMACS/Simons Collaboration in Cryptography through NSF grant #CNS-1523467.
References
[ALSZ13] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael Zohner. More eﬃcient oblivious
transfer and extensions for faster secure computation. In Ahmad-Reza Sadeghi, Virgil D. Gligor,
and Moti Yung, editors, ACM CCS 13, pages 535–548, Berlin, Germany, November 4–8, 2013.
ACM Press.
[ALSZ15] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael Zohner. More eﬃcient oblivious
transfer extensions with security for malicious adversaries. In Elisabeth Oswald and Marc Fis-
chlin, editors, EUROCRYPT 2015, Part I, volume 9056 of LNCS, pages 673–701, Soﬁa, Bulgaria,
April 26–30, 2015. Springer, Heidelberg, Germany.
[CNs07]
[DY05]
[FHV13]
Jan Camenisch, Gregory Neven, and abhi shelat. Simulatable adaptive oblivious transfer. In
Moni Naor, editor, EUROCRYPT 2007, volume 4515 of LNCS, pages 573–590, Barcelona, Spain,
May 20–24, 2007. Springer, Heidelberg, Germany.
Yevgeniy Dodis and Aleksandr Yampolskiy. A veriﬁable random function with short proofs and
keys. In Serge Vaudenay, editor, PKC 2005, volume 3386 of LNCS, pages 416–431, Les Diablerets,
Switzerland, January 23–26, 2005. Springer, Heidelberg, Germany.
Sebastian Faust, Carmit Hazay, and Daniele Venturi. Outsourced pattern matching. In Fedor V.
Fomin, Rusins Freivalds, Marta Z. Kwiatkowska, and David Peleg, editors, ICALP 2013, Part
II, volume 7966 of LNCS, pages 545–556, Riga, Latvia, July 8–12, 2013. Springer, Heidelberg,
Germany.
[FIPR05] Michael J. Freedman, Yuval Ishai, Benny Pinkas, and Omer Reingold. Keyword search and
In Joe Kilian, editor, TCC 2005, volume 3378 of LNCS,
oblivious pseudorandom functions.
pages 303–324, Cambridge, MA, USA, February 10–12, 2005. Springer, Heidelberg, Germany.
[GMW87] Oded Goldreich, Silvio Micali, and Avi Wigderson. How to play any mental game or A com-
pleteness theorem for protocols with honest majority. In Alfred Aho, editor, 19th ACM STOC,
pages 218–229, New York City,, New York, USA, May 25–27, 1987. ACM Press.
17
[Gol04]
[Haz15]
Oded Goldreich. Foundations of Cryptography, Volume 2: Basic Applications. Cambridge Uni-
versity Press, The address, 2004.
Carmit Hazay. Oblivious polynomial evaluation and secure set-intersection from algebraic PRFs.
In Yevgeniy Dodis and Jesper Buus Nielsen, editors, TCC 2015, Part II, volume 9015 of LNCS,
pages 90–120, Warsaw, Poland, March 23–25, 2015. Springer, Heidelberg, Germany.
[HFH99] Bernardo A. Huberman, Matthew K. Franklin, and Tad Hogg. Enhancing privacy and trust in
electronic communities. In EC, pages 78–86, 1999.
[HL10]
Carmit Hazay and Yehuda Lindell. Eﬃcient protocols for set intersection and pattern matching
with security against malicious and covert adversaries. Journal of Cryptology, 23(3):422–456,
July 2010.
[IKNP03] Yuval Ishai, Joe Kilian, Kobbi Nissim, and Erez Petrank. Extending oblivious transfers eﬃciently.
In Dan Boneh, editor, CRYPTO 2003, volume 2729 of LNCS, pages 145–161, Santa Barbara,
CA, USA, August 17–21, 2003. Springer, Heidelberg, Germany.
[JL09]
[Kil88]
[KK12]
[KK13]
[KM15]
Stanislaw Jarecki and Xiaomin Liu. Eﬃcient oblivious pseudorandom function with applications
to adaptive OT and secure computation of set intersection. In Omer Reingold, editor, TCC 2009,
volume 5444 of LNCS, pages 577–594. Springer, Heidelberg, Germany, March 15–17, 2009.
Joe Kilian. Founding cryptography on oblivious transfer. In 20th ACM STOC, pages 20–31,
Chicago, Illinois, USA, May 2–4, 1988. ACM Press.
Improved secure two-party computation via
Vladimir Kolesnikov and Ranjit Kumaresan.
information-theoretic garbled circuits.
In Ivan Visconti and Roberto De Prisco, editors, SCN
12, volume 7485 of LNCS, pages 205–221, Amalﬁ, Italy, September 5–7, 2012. Springer, Heidel-
berg, Germany.
Vladimir Kolesnikov and Ranjit Kumaresan. Improved OT extension for transferring short se-
crets. In Ran Canetti and Juan A. Garay, editors, CRYPTO 2013, Part II, volume 8043 of LNCS,
pages 54–70, Santa Barbara, CA, USA, August 18–22, 2013. Springer, Heidelberg, Germany.
Vladimir Kolesnikov and Alex J. Malozemoﬀ. Public veriﬁability in the covert model (almost)
for free. In Tetsu Iwata and Jung Hee Cheon, editors, ASIACRYPT 2015, Part II, volume 9453
of LNCS, pages 210–235, Auckland, New Zealand, November 30 – December 3, 2015. Springer,
Heidelberg, Germany.
[Kol05]
Vladimir Kolesnikov. Gate evaluation secret sharing and secure one-round two-party compu-
tation.
In Bimal K. Roy, editor, ASIACRYPT 2005, volume 3788 of LNCS, pages 136–155,
Chennai, India, December 4–8, 2005. Springer, Heidelberg, Germany.
[KOS15] Marcel Keller, Emmanuela Orsini, and Peter Scholl. Actively secure OT extension with optimal
overhead. In Rosario Gennaro and Matthew J. B. Robshaw, editors, CRYPTO 2015, Part I,
volume 9215 of LNCS, pages 724–741, Santa Barbara, CA, USA, August 16–20, 2015. Springer,
Heidelberg, Germany.
[MNPS04] Dahlia Malkhi, Noam Nisan, Benny Pinkas, and Yaron Sella. Fairplay—a secure two-party
computation system. In Proceedings of the 13th Conference on USENIX Security Symposium -
Volume 13, SSYM’04, pages 20–20, Berkeley, CA, USA, 2004. USENIX Association.
[Nie07]
Jesper Buus Nielsen. Extending oblivious transfers eﬃciently - how to get robustness almost for
free. Cryptology ePrint Archive, Report 2007/215, 2007. ia.cr/2007/215.
[NNOB12] Jesper Buus Nielsen, Peter Sebastian Nordholt, Claudio Orlandi, and Sai Sheshank Burra. A
new approach to practical active-secure two-party computation. In Reihaneh Safavi-Naini and
Ran Canetti, editors, CRYPTO 2012, volume 7417 of LNCS, pages 681–700, Santa Barbara, CA,
USA, August 19–23, 2012. Springer, Heidelberg, Germany.
18
[NP01]
[NR04]
[Ops13]
Moni Naor and Benny Pinkas. Eﬃcient oblivious transfer protocols. In Proceedings of the Twelfth
Annual ACM-SIAM Symposium on Discrete Algorithms, SODA ’01, pages 448–457, Philadelphia,
PA, USA, 2001. Society for Industrial and Applied Mathematics.
Moni Naor and Omer Reingold. Number-theoretic constructions of eﬃcient pseudo-random func-
tions. Journal of the ACM, 51(2):231–262, 2004.
Kurt Opsahl. The disconcerting details: How Facebook teams up with data brokers to show
you targeted ads. https://www.eﬀ.org/deeplinks/2013/04/disconcerting-details-how-facebook-
teams-data-brokers-show-you-targeted-ads, 2013. [Online; accessed 23-May-2016].
[PR04]
Rasmus Pagh and Flemming Friche Rodler. Cuckoo hashing. J. Algorithms, 51(2):122–144, 2004.
[PSSZ15] Benny Pinkas, Thomas Schneider, Gil Segev, and Michael Zohner. Phasing: Private set inter-
In Jaeyeon Jung and Thorsten Holz, editors, 24th
section using permutation-based hashing.
USENIX Security Symposium, USENIX Security 15, pages 515–530. USENIX Association, 2015.
[PSZ14]
Benny Pinkas, Thomas Schneider, and Michael Zohner. Faster private set intersection based
on OT extension. In Kevin Fu and Jaeyeon Jung, editors, 23rd USENIX Security Symposium,
USENIX Security 14, pages 797–812. USENIX Association, 2014.
[Yao86]
Andrew Chi-Chih Yao. How to generate and exchange secrets (extended abstract). In 27th FOCS,
pages 162–167, Toronto, Ontario, Canada, October 27–29, 1986. IEEE Computer Society Press.
[Yun15] Moti Yung. From mental poker to core business: Why and how to deploy secure computation
protocols? https://www.sigsac.org/ccs/CCS2015/pro_keynote.html, 2015. ACM CCS 2015
Keynote Talk.
19