让我们从一个简单的例子开始，直接从 Docker Hub 运行一个 Tomcat 服务器:
```
$ docker run -d tomcat
```
Tomcat 是一个 web 应用服务器，其用户界面可以通过端口`8080`访问。因此，如果我们在机器上安装了 Tomcat，我们可以在`http://localhost:8080`浏览它。
然而，在我们的例子中，Tomcat 在 Docker 容器中运行。我们以与第一个`Hello World`例子相同的方式开始。我们可以看到它正在运行:
```
$ docker ps
CONTAINER ID IMAGE  COMMAND           STATUS            PORTS    NAMES
d51ad8634fac tomcat "catalina.sh run" Up About a minute 8080/tcp jovial_kare
```
由于它是作为守护进程运行的(带有`-d`选项)，我们不会立即在控制台中看到日志。但是，我们可以通过执行以下代码来访问它:
```
$ docker logs d51ad8634fac
```
如果没有错误，我们应该会看到很多日志，总结 Tomcat 已经启动，可以通过端口`8080`访问。我们可以试着去`http://localhost:8080`，但是我们无法连接。原因是 Tomcat 已经在容器内部启动，我们正试图从外部到达它。换句话说，只有当我们将命令连接到容器中的控制台并在那里检查它时，我们才能到达它。如何让运行中的 Tomcat 可以从外部访问？
我们需要用`-p` ( `--publish`)标志启动指定端口映射的容器:
```
-p, --publish :
```
因此，让我们首先停止正在运行的容器，并开始一个新的容器:
```
$ docker stop d51ad8634fac
$ docker run -d -p 8080:8080 tomcat
```
等待几秒钟后，Tomcat 一定已经启动，我们应该可以打开它的页面，`http://localhost:8080`。
![](img/5a754575-bd73-41d5-9f7c-01590ca4ecb7.png)
在大多数常见的 Docker 用例中，这样一个简单的端口映射命令就足够了。我们能够将(微)服务部署为 Docker 容器，并公开它们的端口来实现通信。然而，让我们更深入地了解一下引擎盖下发生的事情。
Docker allows publishing to the specified host network interface with `-p ::`.
# 容器网络
我们已经连接到容器内运行的应用。事实上，连接是双向的，因为如果你还记得我们之前的例子，我们从内部执行`apt-get install`命令，包是从互联网上下载的。这怎么可能？
如果查看机器上的网络接口，可以看到其中一个接口叫做`docker0`:
```
$ ifconfig docker0
docker0 Link encap:Ethernet HWaddr 02:42:db:d0:47:db 
 inet addr:172.17.0.1 Bcast:0.0.0.0 Mask:255.255.0.0
...
```
`docker0`接口由 Docker 守护程序创建，以便与 Docker 容器连接。现在，我们可以看到在 Docker 容器中使用`docker inspect`命令创建了哪些接口:
```
$ docker inspect 03d1e6dc4d9e
```
它以 JSON 格式打印所有关于容器配置的信息。其中，我们可以找到与网络设置相关的部分:
```
"NetworkSettings": {
     "Bridge": "",
     "Ports": {
          "8080/tcp": [
               {
                    "HostIp": "0.0.0.0",
                    "HostPort": "8080"
               }
          ]
          },
     "Gateway": "172.17.0.1",
     "IPAddress": "172.17.0.2",
     "IPPrefixLen": 16,
}
```
In order to filter the `docker inspect` response, we can use the `--format` option, for example, `docker inspect --format '{{ .NetworkSettings.IPAddress }}' `.
我们可以观察到 Docker 容器有 IP 地址`172.17.0.2`，它用 IP 地址`172.17.0.1`与 Docker 主机通信。这意味着在我们前面的例子中，我们可以使用地址`http://172.17.0.2:8080`访问 Tomcat 服务器，即使没有端口转发。然而，在大多数情况下，我们在服务器机器上运行 Docker 容器，并希望将其公开在外部，因此我们需要使用`-p`选项。
请注意，默认情况下，容器受到主机防火墙系统的保护，不会打开来自外部系统的任何路由。我们可以通过玩`--network`标志并按如下方式设置来改变这个默认行为:
*   `bridge`(默认):通过默认 Docker 桥进行网络连接
*   `none`:无网络
*   `container`:与另一个(指定的)容器连接的网络
*   `host`:主机网络(无防火墙)
不同的网络可以通过`docker network`命令列出和管理:
```
$ docker network ls
NETWORK ID   NAME   DRIVER SCOPE
b3326cb44121 bridge bridge local 
84136027df04 host   host   local 
80c26af0351c none   null   local
```
如果我们指定`none`为网络，那么我们将无法连接到容器，反之亦然；容器没有通往外部世界的网络。`host`选项使容器网络接口与主机相同。它们共享相同的 IP 地址，因此在容器上启动的所有内容在外部都是可见的。最常用的选项是默认选项(`bridge`)，因为它允许我们明确定义应该发布哪些端口。它既安全又可访问。
# 暴露容器港口
我们几次提到容器暴露了端口。事实上，如果我们深入研究 GitHub([https://github.com/docker-library/tomcat](https://github.com/docker-library/tomcat))上的 Tomcat 映像，我们可以注意到 Dockerfile 中的以下一行:
```
EXPOSE 8080
```
这个 Dockerfile 指令表示应该从容器中公开端口 8080。但是，正如我们已经看到的，这并不意味着端口会自动发布。EXPOSE 指令只通知用户应该发布哪些端口。
# 自动端口分配
让我们尝试在不停止第一个容器的情况下运行第二个 Tomcat 容器:
```
$ docker run -d -p 8080:8080 tomcat
0835c95538aeca79e0305b5f19a5f96cb00c5d1c50bed87584cfca8ec790f241
docker: Error response from daemon: driver failed programming external connectivity on endpoint distracted_heyrovsky (1b1cee9896ed99b9b804e4c944a3d9544adf72f1ef3f9c9f37bc985e9c30f452): Bind for 0.0.0.0:8080 failed: port is already allocated.
```
此错误可能很常见。在这种情况下，我们必须自行处理端口的唯一性，或者让 Docker 使用以下版本的`publish`命令自动分配端口:
*   `-p `:将容器端口发布到未使用的主机端口
*   `-P` ( `--publish-all`):将容器暴露的所有端口发布到未使用的主机端口；
```
$ docker run -d -P tomcat
 078e9d12a1c8724f8aa27510a6390473c1789aa49e7f8b14ddfaaa328c8f737b
$ docker port 078e9d12a1c8
8080/tcp -> 0.0.0.0:32772
```
我们可以看到第二个 Tomcat 已经发布到端口`32772`，所以可以在`http://localhost:32772`浏览。
# 使用 Docker 卷
假设您希望将数据库作为一个容器运行。您可以启动这样的容器并输入数据。存放在哪里？当您停止或移除容器时会发生什么？您可以启动新的，但数据库将再次为空。除非是你的测试环境，否则你不会想到这样的场景。
Docker 卷是安装在容器内部的 Docker 主机的目录。它允许容器像写入自己的文件系统一样写入主机的文件系统。该机制如下图所示:
![](img/b175c0eb-1e9a-4d07-8f40-8ec867942345.png)
Docker 卷支持容器数据的持久化和共享。卷也清楚地将处理与数据分开。
让我们从一个例子开始，用`-v :`选项指定音量并连接到容器:
```
$ docker run -i -t -v ~/docker_ubuntu:/host_directory ubuntu:16.04 /bin/bash
```
现在，我们可以在容器的`host_directory`中创建一个空文件:
```
root@01bf73826624:/# touch host_directory/file.txt
```
让我们检查该文件是否是在 Docker 主机的文件系统中创建的:
```
root@01bf73826624:/# exit
exit
$ ls ~/docker_ubuntu/
file.txt
```
我们可以看到文件系统是共享的，因此数据是永久保存的。我们现在可以停止容器并运行一个新的容器来查看我们的文件是否还在:
```
$ docker stop 01bf73826624
$ docker run -i -t -v ~/docker_ubuntu:/host_directory ubuntu:16.04 /bin/bash
root@a9e0df194f1f:/# ls host_directory/
file.txt
root@a9e0df194f1f:/# exit
```
不使用`-v`标志指定卷，可以在 Dockerfile 中指定卷作为指令，例如:
```
VOLUME /host_directory
```
在这种情况下，如果我们在没有`-v`标志的情况下运行 docker 容器，那么容器的`/host_directory`将被映射到主机的默认卷目录`/var/lib/docker/vfs/`。如果您将应用作为映像交付，并且您知道它由于某种原因需要永久存储(例如，存储应用日志)，这是一个很好的解决方案。
If the volume is defined both in Dockerfile and as a flag, then the command flag takes precedence.
Docker 卷可能要复杂得多，尤其是在数据库的情况下。然而，Docker 卷中更复杂的用例超出了本书的范围。
A very common approach to data management with Docker is to introduce an additional layer in the form of data volume containers. A data volume container is a Docker container whose only purpose is to declare the volume. Then, other containers can use it (with the `--volumes-from ` option) instead of declaring the volume directly. Read more at [https://docs.docker.com/engine/tutorials/dockervolumes/#creating-and-mounting-a-data-volume-container](https://docs.docker.com/engine/tutorials/dockervolumes/#creating-and-mounting-a-data-volume-container).
# 在 Docker 中使用名称
到目前为止，当我们对容器进行操作时，我们总是使用自动生成的名称。这种方法有一些优点，比如名字是唯一的(没有命名冲突)和自动的(不需要做任何事情)。然而，在许多情况下，最好为容器或映像提供一个真实的用户友好的名称。