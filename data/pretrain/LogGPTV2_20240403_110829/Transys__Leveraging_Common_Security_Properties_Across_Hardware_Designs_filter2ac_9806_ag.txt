[Online]. Available: http:
//doi.acm.org/10.1145/2694344.2694366
[6] R. Zhang, C. Deutschbein, P. Huang, and C. Sturton, “End-to-end
automated exploit generation for validating the security of processor
designs,” in Proceedings of the International Symposium on Microar-
chitecture (MICRO).
IEEE/ACM, 2018.
[7] R. Zhang, N. Stanley, C. Griggs, A. Chi, and C. Sturton, “Identifying
security critical properties for the dynamic veriﬁcation of a processor,”
in Proceedings of the ACM Conference on Architectural Support for
Programming Languages and Operating Systems (ASPLOS), 2017.
[8] C. Wolf, “Yosys open synthesis suite,” http://www.clifford.at/yosys/.
[9] C. N. Coelho and H. D. Foster, Assertion-Based Veriﬁcation.
Boston, MA: Springer US, 2004, pp. 167–204. [Online]. Available:
https://doi.org/10.1007/1-4020-2530-0_5
[10] M. Bilzor, T. Huffmire, C. Irvine, and T. Levin, “Security Checkers:
Detecting processor malicious inclusions at runtime,” in Hardware-
Oriented Security and Trust (HOST), 2011 IEEE International Sym-
posium on, June 2011, pp. 34–39.
[11] M. T. Harry Foster, Kenneth Larsen, “Introduction to the new accellera
open veriﬁcation library,” 2006.
[12] M. R. Clarkson and F. B. Schneider, “Hyperproperties,” J. Comput.
Secur., vol. 18, no. 6, pp. 1157–1210, Sep. 2010. [Online]. Available:
http://dl.acm.org/citation.cfm?id=1891823.1891830
[13] L. V. Nguyen, J. Kapinski, X. Jin, J. V. Deshmukh, and T. T. Johnson,
“Hyperproperties of real-valued signals,” in Proceedings of the 15th
ACM-IEEE International Conference on Formal Methods and Models
for System Design. ACM, 2017, pp. 104–113.
[14] D. Zhang, Y. Wang, G. E. Suh, and A. C. Myers, “A Hardware
Design Language for Timing-Sensitive Information-Flow Security,” in
Proceedings of the Twentieth International Conference on Architectural
Support
for Programming Languages and Operating Systems, ser.
ASPLOS ’15. New York, NY, USA: ACM, 2015, pp. 503–516.
[Online]. Available: http://doi.acm.org/10.1145/2694344.2694372
[15] A. Ferraiuolo, R. Xu, D. Zhang, A. C. Myers, and G. E.
Suh, “Veriﬁcation of a Practical Hardware Security Architecture
Through Static Information Flow Analysis,” in Proceedings of
the
Twenty-Second International Conference on Architectural Support for
Programming Languages and Operating Systems, ser. ASPLOS ’17.
New York, NY, USA: ACM, 2017, pp. 555–568. [Online]. Available:
http://doi.acm.org/10.1145/3037697.3037739
[16] X. Li, M. Tiwari, J. K. Oberg, V. Kashyap, F. T. Chong, T. Sherwood,
and B. Hardekopf, “Caisson: A Hardware Description Language for
Secure Information Flow,” in Proceedings of the 32Nd ACM SIGPLAN
Conference on Programming Language Design and Implementation,
ser. PLDI ’11. New York, NY, USA: ACM, 2011, pp. 109–120.
[Online]. Available: http://doi.acm.org/10.1145/1993498.1993512
[17] M. Tiwari, H. M. Wassel, B. Mazloom, S. Mysore, F. T. Chong,
and T. Sherwood, “Complete information ﬂow tracking from the
gates up,” in Proceedings of
the 14th International Conference on
Architectural Support
for Programming Languages and Operating
Systems (ASPLOS). New York, NY, USA: ACM, 2009, pp. 109–120.
[Online]. Available: http://doi.acm.org/10.1145/1508244.1508258
[18] A. Ardeshiricham, W. Hu, and R. Kastner, “Clepsydra: Modeling timing
ﬂows in hardware designs,” in International Conference on Computer-
Aided Design (ICCAD).
IEEE/ACM, Nov 2017, pp. 147–154.
[19] B. Mao, W. Hu, A. Althoff, J. Matai, J. Oberg, D. Mu, T. Sherwood, and
R. Kastner, “Quantifying timing-based information ﬂow in cryptographic
hardware,” in Proceedings of the IEEE/ACM International Conference
on Computer-Aided Design.
IEEE Press, 2015, pp. 552–559.
[20] W. Hu, A. Ardeshiricham, M. S. Gobulukoglu, X. Wang, and R. Kastner,
“Property speciﬁc information ﬂow analysis for hardware security veri-
ﬁcation,” in Proceedings of the International Conference on Computer-
Aided Design (ICCAD). ACM, 2018, pp. 89:1–89:8.
[21] J. Ferrante, K. J. Ottenstein, and J. D. Warren, “The program dependence
graph and its use in optimization,” ACM Transactions on Programming
Languages and Systems (TOPLAS), vol. 9, no. 3, pp. 319–349, 1987.
[22] R. Szeliski, Image Alignment and Stitching. Boston, MA: Springer
US, 2006, pp. 273–292. [Online]. Available: https://doi.org/10.1007/
0-387-28831-7_17
[23] K. Chen, P. Liu, and Y. Zhang, “Achieving accuracy and scalability
simultaneously in detecting application clones on android markets,”
in Proceedings of
the 36th International Conference on Software
Engineering, ser. ICSE 2014. New York, NY, USA: ACM, 2014,
pp. 175–186. [Online]. Available: http://doi.acm.org/10.1145/2568225.
2568286
[24] L. R. Dice, “Measures of the amount of ecologic association between
[Online].
species,” Ecology, vol. 26, no. 3, pp. 297–302, 1945.
Available: http://www.jstor.org/stable/1932409
[25] H. Salmani, M. Tehranipoor, and R. Karri, “On design vulnerability
analysis and trust benchmarks development,” in 2013 IEEE 31st Inter-
national Conference on Computer Design (ICCD), 2013, pp. 471–474.
[26] B. Shakya, T. He, H. Salmani, D. Forte, S. Bhunia, and M. Tehranipoor,
“Benchmarking of hardware trojans and maliciously affected circuits,”
Journal of Hardware and Systems Security, pp. 85–102, 2017. [Online].
Available: https://doi.org/10.1007/s41635-017-0001-6
[27] D. Lampret, “OpenRISC 1200 IP core speciﬁcation,” 2001.
[On-
line]. Available: http://www.isy.liu.se/en/edu/kurs/TSEA44/OpenRISC/
or1200_spec.pdf
[28] W. Hu, A. Althoff, A. Ardeshiricham, and R. Kastner, “Towards property
driven hardware security,” in Microprocessor and SOC Test and Veriﬁ-
cation (MTV), 2016 17th International Workshop on.
IEEE, 2016, pp.
51–56.
[29] W. Hu, A. Ardeshiricham, and R. Kastner, “Identifying and measuring
security critical path for uncovering circuit vulnerabilities,” in Inter-
national Workshop on Microprocessor and SOC Test and Veriﬁcation
(MTV), Dec 2017, pp. 62–67.
[30] R. Kastner, W. Hu, and A. Althoff, “Quantifying hardware security using
joint information ﬂow analysis,” in Design, Automation & Test in Europe
Conference & Exhibition (DATE), 2016.
IEEE, 2016, pp. 1523–1528.
[31] M. Abramovici and P. Bradley, “Integrated Circuit Security: New
Threats and Solutions,” in Proceedings of the 5th Annual Workshop on
Cyber Security and Information Intelligence Research: Cyber Security
and Information Intelligence Challenges and Strategies, ser. CSIIRW
’09. New York, NY, USA: ACM, 2009, pp. 55:1–55:3. [Online].
Available: http://doi.acm.org/10.1145/1558607.1558671
[32] M. Bilzor, T. Huffmire, C. Irvine, and T. Levin, “Evaluating security
requirements in a general-purpose processor by combining assertion
checkers with code coverage,” in Hardware-Oriented Security and Trust
(HOST), 2012 IEEE International Symposium on.
IEEE, 2012, pp. 49–
54.
logic speciﬁcations
[33] C. Deutschbein and C. Sturton, “Mining security critical
linear
for processors,” in Proceedings of
International Workshop on Microprocessor and SoC Test,
IEEE, 2018. [Online]. Available:
temporal
the
Security, and Veriﬁcation (MTV).
https://ieeexplore.ieee.org/document/8746060
[34] S. Hangal, S. Narayanan, N. Chandra, and S. Chakravorty, “IODINE:
A tool to automatically infer dynamic invariants for hardware designs,”
in Proceedings of 42nd Design Automation Conference.
IEEE, 2005.
[35] P.-H. Chang and L. C. Wang, “Automatic assertion extraction via
sequential data mining of simulation traces,” in Design Automation
Conference (ASP-DAC), 2010 15th Asia and South Paciﬁc.
IEEE, 2010,
pp. 607–612.
[42] “Cadence
Veriﬁcation
Suite.”
[Online].
Available:
[36] S. Hertz, D. Sheridan, and S. Vasudevan, “Mining hardware assertions
with guidance from static analysis,” Computer-Aided Design of Inte-
grated Circuits and Systems, IEEE Transactions on, vol. 32, no. 6, pp.
952–965, 2013.
[37] W. Li, A. Forin, and S. A. Seshia, “Scalable speciﬁcation mining
for veriﬁcation and diagnosis,” in Proceedings of
the 47th Design
Automation Conference, ser. DAC. ACM, 2010, pp. 755–760. [Online].
Available: http://doi.acm.org/10.1145/1837274.1837466
[38] H. Foster, Applied Assertion-Based Veriﬁcation: An Industry Perspective,
ser. Foundations and Trends(r) in Electronic Design Automation. Now
Publishers, 2009. [Online]. Available: https://books.google.com/books?
id=hL6d2t6Oh4EC
[39] L.-T. Wang, Y.-W. Chang, and K.-T. Cheng, Electronic Design Automa-
tion: Synthesis, Veriﬁcation, and Test. Morgan Kaufmann, 2009.
[40] D. Brand, “Veriﬁcation of Large Synthesized Designs,” in Proceedings
of the IEEE/ACM International Conference on Computer Aided Design
(ICCAD-93).
IEEE, 1993.
[41] D.Lin, E.Singh, C.Barrett, and S.Mitra, “A structured approach to post-
silicon validation and debug using symbolic dquick error detection,” in
Proceedings of the IEEE International Test Conference, 2015.
https://www.cadence.com/content/cadence-www/global/en_US/home/
tools/system-design-and-veriﬁcation.html
[43] R. Brayton and A. Mishchenko, “ABC: An Academic Industrial-Strength
Verﬁcation Tool,” in Comuter Aided Veriﬁcation (CAV). Lecture Notes
in Computer Science, 2010.
[44] R. Zhang and C. Sturton, “A recursive strategy for symbolic execution
to ﬁnd exploits in hardware designs,” in Proceedings of the International
Workshop on Formal Methods and Security (FMS). ACM, 2018.
[45] X. Li, V. Kashyap, J. K. Oberg, M. Tiwari, V. R. Rajarathinam,
R. Kastner, T. Sherwood, B. Hardekopf, and F. T. Chong, “Sapper:
A Language for Hardware-level Security Policy Enforcement,” in
Proceedings of
the 19th International Conference on Architectural
Support
for Programming Languages and Operating Systems, ser.
ASPLOS ’14. New York, NY, USA: ACM, 2014, pp. 97–112.
[Online]. Available: http://doi.acm.org/10.1145/2541940.2541947
[46] M. Vijayaraghavan, A. Chlipala, Arvind, and N. Dave, “Modular
deductive veriﬁcation of multiprocessor hardware designs,” in Computer
Aided Veriﬁcation, ser. Lecture Notes in Computer Science, D. Kroening
and C. S. P˘as˘areanu, Eds.
Springer International Publishing, 2015,
vol. 9207, pp. 109–127. [Online]. Available: http://dx.doi.org/10.1007/
978-3-319-21668-3_7
[47] T. Braibant and A. Chlipala, “Formal veriﬁcation of hardware
synthesis,” in Computer Aided Veriﬁcation, ser. Lecture Notes in
Computer Science, N. Sharygina and H. Veith, Eds.
Springer
Berlin Heidelberg, 2013, vol. 8044, pp. 213–228. [Online]. Available:
http://dx.doi.org/10.1007/978-3-642-39799-8_14
[48] J. Choi, M. Vijayaraghavan, B. Sherman, A. Chlipala, and Arvind,
“Kami: A platform for high-level parametric hardware speciﬁcation and
its modular veriﬁcation,” in Proceedings of the 22nd ACM SIGPLAN
International Conference on Functional Programming (ICFP’17), 2017.
[49] A. Ardeshiricham, W. Hu, J. Marxen, and R. Kastner, “Register transfer
level information ﬂow tracking for provably secure hardware design,” in
Proceedings of the Conference on Design, Automation & Test in Europe
(DATE).
European Design and Automation Association, 2017, pp.
1695–1700.
[50] J. Oberg, W. Hu, A. Irturk, M. Tiwari, T. Sherwood, and R. Kastner,
“Information ﬂow isolation in i2c and usb,” in Proceedings of the 48th
Design Automation Conference. ACM, 2011, pp. 254–259.
[51] A. Becker, W. Hu, Y. Tai, P. Brisk, R. Kastner, and P. Ienne, “Ar-
bitrary precision and complexity tradeoffs for gate-level information
ﬂow tracking,” in Design Automation Conference (DAC), 2017 54th
ACM/EDAC/IEEE.
IEEE, 2017, pp. 1–6.
[52] W. Hu, A. Becker, A. Ardeshiricham, Y. Tai, P. Ienne, D. Mu, and
R. Kastner, “Imprecise security: quality and complexity tradeoffs for
hardware information ﬂow tracking,” in Computer-Aided Design (IC-
CAD), 2016 IEEE/ACM International Conference on.
IEEE, 2016, pp.
1–8.
[53] M. Tiwari, X. Li, H. M. Wassel, F. T. Chong, and T. Sherwood,
“Execution leases: A hardware-supported mechanism for enforcing
strong non-interference,” in Proceedings of the 42nd Annual IEEE/ACM
International Symposium on Microarchitecture. ACM, 2009, pp. 493–
504.
[54] M. Tiwari, J. K. Oberg, X. Li, J. Valamehr, T. Levin, B. Hardekopf,
R. Kastner, F. T. Chong, and T. Sherwood, “Crafting a usable micro-
kernel, processor, and i/o system with strict and provable information
ﬂow security,” in ACM SIGARCH Computer Architecture News, vol. 39,
no. 3. ACM, 2011, pp. 189–200.
[55] T. Kamiya, S. Kusumoto, and K. Inoue, “CCFinder: a multilinguistic
token-based code clone detection system for large scale source code,”
IEEE Transactions on Software Engineering, vol. 28, no. 7, pp. 654–670,
July 2002.
[56] Z. Li, S. Lu, S. Myagmar, and Y. Zhou, “CP-Miner: ﬁnding copy-paste
and related bugs in large-scale software code,” IEEE Transactions on
Software Engineering, vol. 32, no. 3, pp. 176–192, March 2006.
[57] W. M. Khoo, A. Mycroft, and R. Anderson, “Rendezvous: A
Search Engine for Binary Code,” in Proceedings of
the 10th
Working Conference on Mining Software Repositories, ser. MSR ’13.
IEEE Press, 2013, pp. 329–338.
Piscataway, NJ, USA:
[Online].
Available: http://dl.acm.org/citation.cfm?id=2487085.2487147
[58] S. Kawaguchi, P. K. Garg, M. Matsushita, and K. Inoue, “MUDABlue:
an automatic categorization system for open source repositories,” in 11th
Asia-Paciﬁc Software Engineering Conference, Nov 2004, pp. 184–193.
[59] J. Pewny, F. Schuster, L. Bernhard, T. Holz, and C. Rossow, “Leveraging
semantic signatures for bug search in binary programs,” in Proceedings
of the 30th Annual Computer Security Applications Conference, ser.
ACSAC ’14. New York, NY, USA: ACM, 2014, pp. 406–415.
[Online]. Available: http://doi.acm.org/10.1145/2664243.2664269
[60] J. Pewny, B. Garmany, R. Gawlik, C. Rossow, and T. Holz, “Cross-
architecture bug search in binary executables,” in 2015 IEEE Symposium
on Security and Privacy, May 2015, pp. 709–724.
[61] C. McMillan, M. Grechanik, and D. Poshyvanyk, “Detecting similar
the 34th International
Piscataway,
[Online]. Available:
software applications,” in Proceedings of
Conference on Software Engineering, ser. ICSE ’12.
NJ, USA:
http://dl.acm.org/citation.cfm?id=2337223.2337267
IEEE Press, 2012, pp. 364–374.
[62] H. Flake, “Structural comparison of executable objects,” in In Proceed-
ings of the IEEE Conference on Detection of Intrusions and Malware
& Vulnerability Assessment (DIMVA), 2004, pp. 161–173.
[63] Q. Feng, R. Zhou, C. Xu, Y. Cheng, B. Testa, and H. Yin, “Scalable
graph-based bug search for ﬁrmware images,” in Proceedings of the
2016 ACM SIGSAC Conference on Computer and Communications
Security, ser. CCS ’16. New York, NY, USA: ACM, 2016, pp. 480–491.
[Online]. Available: http://doi.acm.org/10.1145/2976749.2978370
[64] X. Xu, C. Liu, Q. Feng, H. Yin, L. Song, and D. Song,
“Neural network-based graph embedding for cross-platform binary
code similarity detection,” in Proceedings of the 2017 ACM SIGSAC
Conference on Computer and Communications Security, ser. CCS ’17.
New York, NY, USA: ACM, 2017, pp. 363–376. [Online]. Available:
http://doi.acm.org/10.1145/3133956.3134018
[65] Y. David and E. Yahav, “Tracelet-based code search in executables,” in
Proceedings of the 35th ACM SIGPLAN Conference on Programming
Language Design and Implementation, ser. PLDI ’14. New York,
NY, USA: ACM, 2014, pp. 349–360.
[Online]. Available: http:
//doi.acm.org/10.1145/2594291.2594343