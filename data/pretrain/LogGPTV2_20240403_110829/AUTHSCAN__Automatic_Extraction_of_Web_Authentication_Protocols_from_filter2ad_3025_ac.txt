p, respectively. NewNonce(n) is the action of generating
a nonce. NewKeyPair(k, k−1) is the action of generating
an asymmetric key pair, where k is the public key and k−1
is the private key. NewSecret(S, n) indicates the action
of generating a secret, which is intended to be shared with
(or distributed to) a set of principals S. Secrets can be data
elements such as shared session keys. The secret distribu-
tion is only complete when all participants for whom the
secret is intended have explicitly executed the Accept(N )
action. Note that a participant following a local protocol
only executes an action after it executes the preceding ac-
tion state in the schema. As a result of executing certain ac-
tions, such as NewNonce and Accept, participants update
their knowledge sets. Intuitively, a participant’s knowledge
set includes the data terms that it possesses or can com-
pute, which can be used by the participant in communica-
tion messages. The attacker, denoted by the principal Z
throughout this paper, is assumed to follow no local pro-
tocol and is free to execute any action at any step under the
constraints of its knowledge set and the capability of the
assumed attacker model.
Terms. We aim to recover as much semantics of the data
exchanged and the internal state maintained for each par-
ticipant as possible. To characterize these semantics, TML
provides three kinds of terms: constant symbols, function
symbols and variable symbols5. Constant symbols include
names of principals (web origins), nonces, keys and integer
constants. Function symbols include the encryption func-
tion {·} , the shared key function key(·,·), the concatena-
5This typesetting is kept consistent with the WL model paper [44]. The
constant symbols are typeset in Sans Serif font, the adversary is referred
to as the principal Z and the universe of principals is the set SYS. Lower
case variables stand for terms that are constant symbols, while upper case
variables stand for arbitrary terms.
tion function [·, ...,·], the set construction function {·, ...,·}
and the arithmetic functions (+,−,/,∗, and modulo). The
public key and private key of a principal P are denoted by
kP and k−1
P , respectively. The symmetric key shared by
principles P and Q is denoted by key(P, Q). A term is
ground if it only consists of constants and function sym-
bols. Finally, variable symbols represent terms which are
not ground.
We aim to recover the precise relationships between
terms exchanged in the protocol. For example, our anal-
ysis infers that the value of idpSign is the signature of
uEmail concatenated with authToken, as can be seen at
line 27 of the running example—this translates to the state-
ment labelled IS3 in Figure 3. If a participant receives a
data element whose precise semantics is not known by the
receiver, we represent this data as a variable in TML. For
example, consider SC4 in Figure 3, we model the messages
on the receiver side as variables M and N; the participant
Xi executing local protocol Pi in the schema is a variable;
the responder r in the BeginInit(r) is also a variable which
will be instantiated with concrete values in an execution in-
stance of a protocol schema.
New Extensions in TML. TML extends the WL model
with three new extensions. The semantics of other opera-
tions are deﬁned in the WL model; we discuss why these ex-
tensions are needed. The ﬁrst extension is arithmetic func-
tion symbols. These operations are often utilized in generat-
ing sequence numbers from nonces, and, often lead to weak
or predictable tokens. Our TML can capture such weak con-
structions and subject them to testing.
The second extension is a function symbol called asso-
ciation relation, which is written as assoc(m1, . . . , mn) to
associate n variables, m1 to mn. Association relation is
necessary because while reconstructing the semantics from
implementations, we sometimes cannot infer the exact rela-
tion between the terms even though we can infer that they
are related. For instance, in the running example, we can
infer that authToken (line 14, Figure 2) does not change
during the sessions of the same user, and hence it is related
to the user’s identity, but the exact semantic relation is un-
known. In this scenario, AUTHSCAN generates an associa-
tion assoc(i, authtoken) to indicate that the two terms are
related as a key-value pair, but without the exact relation
known.
The third extension we introduce in TML is an inter-
nal action called NewAssoc(S, assoc(m1, . . . , mn)). This
action means that the association assoc(m1, . . . , mn) is
known or becomes shared among the principals listed in the
set S. To see why the sharing among S is needed, consider
the following scenario. Principals P and Q possess a mu-
tual shared secret k, that is known prior to the execution.
P sends Q a message m in the client browser, both par-
ticipants send m back to their backend servers, and their
servers later respond with entity {m}k in subsequent HTTP
messages observed in the browser. AUTHSCAN observes
that P and Q compute the same term from m in the code
hidden on their servers, but it cannot infer the exact rela-
tion between {m}k and m because it does not know that
k is a pre-exchanged shared secret. Under such situations,
AUTHSCAN introduces a NewAssoc action in the inferred
protocol schema to specify that this association is known to
both P and Q. The step SC2 in Figure 3 shows how this
relation is captured at TML.
We deﬁne the semantics for these extensions, which
extends the original semantic model of the WL model
in the following way. We introduce an association ta-
ble for each principal to record the principal’s knowl-
edge of associations. When a principal executes NewAs-
soc(S, assoc(m1, . . . , mn)),
the assoc(m1, . . . , mn) is
added into the association table of each principal in S. Note
that the attacker (i.e., Z) is not allowed to update the asso-
ciation table. When a principal receives an association, it
checks implicitly if the association is stored in its table.
Assumptions in TML. We make the following assumptions
in TML.
• Correct Cryptographic Algorithms. TML assumes
that the cryptographic algorithms used in the protocol
are ideal. We do not aim to detect vulnerabilities in the
implementations of the cryptographic primitives.
• Distinct Secret Keys and Nonces. TML assumes the
encryption/decryption keys are kept secret prior to the
protocol, and are distinct (i.e., cannot be guessed).
• Knowledge of Principals. We make the assumption
on the knowledge of the principals: Each principal
knows the identiﬁers or names of other principals (rep-
resented as (I1) in Figure 3). This assumes that the
DNS infrastructure has no vulnerability.
4 Protocol Extraction Techniques
In this section, we give the details of the proposed hybrid
inference approach to address the challenges in Section 2.2.
4.1 Overview of Protocol Extraction
Our protocol extraction technique operates on the input
test harness, one test case at a time. Figure 4 shows an
overview of the protocol extraction process. As the ﬁrst
step, the abstraction initialization component in our system
creates an initial abstraction of the protocol from the ﬁrst
test case in the test harness. It takes HTTP traces (captured
by our trace capturing component shown in Figure 2) and
the initial knowledge provided by the analyst as inputs. The
initial abstraction of the inferred protocol is in the form of a
TML protocol schema (Init, P roSet). By utilizing the test
cases from the test harness one-by-one, AUTHSCAN itera-
tively reﬁnes the abstract protocol using our hybrid infer-
Figure 4: AUTHSCAN’s protocol extraction process
InitK: initial knowledge, t: test trace
Algorithm 1 Abstraction Reﬁnement Algorithm
Require:
Ensure: P S: protocol schema
1: (Init, P roSet) ← absInit(t, InitK);
2: P roSetold ← null;
3: trP ool: a trace list, initially empty
4: while P roSet (cid:54)= P roSetold do
5:
6:
7:
8:
9: end while
10: return (Init, P roSet);
P roSetold ← P roSet;
P roSet ← JSAnalysis(t, P roSet);
(P roSet, T ) ← Blackbox(t, P roSet, InitK, trP ool);
trP ool.add(T );
ence technique discussed in this section. During each iter-
ation of the hybrid inference, AUTHSCAN gradually reﬁnes
the semantics of terms and actions of the protocol schema
until no new semantics can be discovered.
4.2 Protocol Reﬁnement Algorithm
The protocol reﬁnement algorithm is shown in Algo-
rithm 1. The inputs of the algorithm are the initial knowl-
edge InitK (i.e., the test harness, protocol participants
& public keys of participants and oracle, outlined in Sec-
tion 2.3), and a trace t generated from one test case. A
trace is a sequence of messages (a0, a1, ..., an), where ai
represents either an HTTP(S) request, response (which may
contain JavaScript programs), or a cross-domain commu-
nication message over postMessage. We refer to all
data exchanged in the trace as HTTP data, which includes
HTTP parameters, cookies, postMessage data, HTML
form data, JSON data, and so on. AUTHSCAN’s trace cap-
turing step identiﬁes the HTTP(S) request/response pairs
from the trace. The output of the algorithm is one inferred
protocol schema.
Our reﬁnement algorithm (Algorithm 1) has two steps:
abstraction initialization (line 1) and reﬁnement pro-
cess (line 4-9). The absInit method (line 1) returns an
abstract protocol schema (Init, P roSet). Init is a set of
predicates, which stands for the initial knowledge of the
      Local Trace Pool …… Abstraction Initialization Fuzzing Differential  Analysis Principals Initial Knowledge Program Analysis Security Analyst Hybrid Inference Test Traces    TML model  Local Trace Pool …… Abstraction Initialization Fuzzing Differential  Analysis Principals Initial Knowledge Program Analysis Security Analyst TML model Initial Abstraction Refinement Hybrid Inference One Test  Case   principals. Some of these are derived from the assump-
tions of TML (outlined in Section 3.2), e.g., I1 − I3 shown
in Figure 3. Other TML terms model the communication
channels that are used in the protocol. For example, to
model the HTTPS channels and cross-domain communica-
tion channels, we internally introduce symmetric keys (I6
in Figure 3), as we explain in Section 5.2. For every mes-
sage a in test trace t, if the sender or the receiver of a is
not contained in P roSet, absInit inserts a new local pro-
tocol into the P roSet. Then, absInit adds two communi-
cation actions (Send and Receive) into the sender’s and
receiver’s protocol, respectively. In addition, absInit can
identify some constant terms in the HTTP data, such as
the domains of principals, user accounts and public keys of
web sites available as the security analyst’s inputs to AUTH-
SCAN. AUTHSCAN identiﬁes them by matching the value
of HTTP data with the values in the analyst’s inputs. For
example, i, r and kIDP S are identiﬁed in this way; they
stand for the identity of SP, the identity of IDP and the pub-
lic key of IDP, respectively. At the end of this step, other
HTTP data, which cannot be inferred here, are represented
as variable terms whose semantics are inferred in the reﬁne-
ment process explained next. The Begin* and End* events
are also inserted into the local protocols indicating the SP’s
client and server.
In the reﬁnement step (line 5-8), AUTHSCAN reﬁnes the
initial abstraction by utilizing more test cases. This step
combines whitebox symbolic analysis (JSAnalysis at line
6) and a blackbox analysis (Blackbox at line 7).
Whitebox Program Analysis. The JSAnalysis proce-
dure uses dynamic symbolic analysis (at line 6) to infer
the function terms and the internal actions of the principals.
Dynamic symbolic analysis (similar to previous work [35])
is used to obtain symbolic formulae which capture the re-
lations among the HTTP data. These symbolic formulae
are over the theory of TML terms, which include arith-
metic operations, concatenation function, cryptographic op-
erations and uninterpreted functions. We introduce unin-
terpreted functions to model semantics unknown function
calls, such as calls to browser APIs or JavaScript functions
which have many arithmetic and bitwise operations charac-
teristic of cryptographic operations. For the code fragment
marked B in our running example (Figure 1), if the input
value for the variable event.data is a string “u&t&s”,
the following symbolic formulae are generated by this step:
(2) authT oken := t;
(4) data := [u, t];
(1) uEmail := u;
(3) idpSign := s;
(5) idpP ubKey := loadP ubKey();
(6) verif y([u, t], s, idpP ubKey);
(7) message := [u, t];
(8) request := $.ajax(login, [u, t]);
To precisely identify cryptographic function terms in
−1
IDP
the symbolic formulae, AUTHSCAN needs to identify
JavaScript functions implementing cryptographic signature,
encryption, random number generation, public key fetch-
ing functions and so on. From the above symbolic formu-
lae example, JSAnalysis can identify that idpSign is
the TML term {[uEmail, authT oken]}k
, once AUTH-
SCAN knows that the semantics of the JavaScript procedure
verify(data, sig, key). By default, AUTHSCAN identi-
ﬁes these functions based on its built-in list of browser APIs
and JavaScript libraries that provide such functions [4].
AUTHSCAN tries to concretely match the semantics of all
symbolic terms identiﬁed as uninterpreted functions in the
symbolic formulae to one of known cryptographic func-
tions in its built-in list. For example, AUTHSCAN can test
verify with the same inputs as the standard RSA signa-
ture veriﬁcation function from its built-in list and compare
the outputs. Security analysts can also provide annotations
for source code functions to identify custom implementa-
tions of standard cryptographic primitives, in case the de-
fault list is not sufﬁcient. In this way, several variables are
replaced with newly inferred TML terms in this step. For an
uninterpreted function whose semantics cannot be inferred
in this step, AUTHSCAN uses an assoc to represent it. The
assoc associates the output of the function with the inputs.
Based on the extracted symbolic formulae, JSAnalysis
infers the function terms and some internal actions in local
protocols. For example, if an HTTP data is identiﬁed as
a session key, AUTHSCAN treates the principal which ﬁrst
sends it in the communication as generator of this session
key. AUTHSCAN infers that this principal has performed
a NewSecret action and the principals which receive it
have performed Accept actions. If a principal invokes an
asymmetric key pair generation function, AUTHSCAN adds
a NewKeyPair action to the principal’s protocol.
Blackbox Differential Fuzzing Analysis. The blackbox
analysis (at line 7) further reﬁnes the output of the white-
box analysis by trying to infer more TML terms and actions
while treating the participant implementations as a black-
box. Our blackbox differential fuzzing analysis takes as in-
put the trace t, the reﬁned abstraction after whitebox anal-
ysis, and the initial knowledge InitK. The ﬁrst substep
in blackbox fuzzing is to remove certain redundant data
to make blackbox testing more efﬁcient. Next, the black-
box inference algorithm infers TML terms in two ways: for
some terms, it generates “probe” messages and compares
the outputs, whereas for other terms, it merely makes the
inference based on the observed traces without generating
new probes. We describe the redundant data elimination,
probe-based inference and non-probe-based inference sub-
step separately. In each iteration of the blackbox fuzzing