Hi, I originally filed an issue at rycus86/prometheus_flask_exporter#135 but
determined that it was impossible to resolve the problem downstream, and
changes are required in Flask to support the use case of
prometheus_flask_exporter.
The problem is described in the issue report I linked above, but I will also
summarize it here for convenience. Basically, when you invoke `flask run`,
then Flask sets `FLASK_RUN_FROM_CLI` as an environment variable. Then, in
`app.run()`, if that environment variable is set, Flask skips starting the
app, and prints the following warning:
    Warning: Silently ignoring app.run() because the application is run from the flask command line executable. Consider putting app.run() behind an if __name__ == "__main__" guard to silence this warning.
This is all fine and good when `app.run()` is being invoked from the top level
in the main module, and it was not intended to launch a duplicate app.
However, sometimes the user actually _does_ want to invoke two separate Flask
applications: for example, to expose application metrics on a different port
from web traffic, which is generally recommended as a security best practice.
Specifically, prometheus_flask_exporter offers an option to expose metrics on
a separate port by starting a separate Flask app on a separate port and
thread. However, Flask's behavior around `FLASK_RUN_FROM_CLI` breaks this
functionality, since if the web traffic app is launched using `flask run`,
then the environment variable will prevent prometheus_flask_exporter from
starting the metrics app.
Code in the user application looks like this:
    metrics = prometheus_flask_exporter.PrometheusMetrics(app)
    metrics.start_http_server(8081, host=config.METRICS_HOST)
The `metrics.start_http_server()` method instantiates a separate Flask
application with the provided configuration, and invokes `app.run()`. If the
main Flask application was starting using `flask run`, then the following
warning is printed, and no metrics are served:
    website_1   |  * Serving Flask app 'src.app:app' (lazy loading)
    website_1   |  * Environment: development
    website_1   |  * Debug mode: on
    website_1   | /usr/local/lib/python3.8/dist-packages/prometheus_flask_exporter/__init__.py:322: Warning: Silently ignoring app.run() because the application is run from the flask command line executable. Consider putting app.run() behind an if __name__ == "__main__" guard to silence this warning.
### Workarounds
Note that this problem only affects development since the Flask builtin server
is not used in production. As such, there are a number of workarounds to the
problem at present, but all of them have significant drawbacks.
  * Do not use `flask run`. _Disadvantage:_ degraded developer velocity due to having no live reloading during development.
  * Do not serve metrics on separate Flask app. _Disadvantage:_ degraded security posture due to internal metrics being (by default) available to public web traffic unless blocked by a separate firewall rule.
  * Do not run metrics server in development, or serve metrics on the same Flask app only during development. _Disadvantage:_ degraded reliability posture due to loss of parity between development and production.
  * Manually unset `FLASK_RUN_FROM_CLI` environment variable from application code. _Disadvantage:_ degraded reliability posture due to reliance on undocumented internal Flask features which may change in future versions, and mutation of the global namespace of environment variables which will affect all threads in the current process, including unrelated internal Flask code.
### Suggested fix
Add an optional keyword argument to `app.run` that allows bypassing the check
on `FLASK_RUN_FROM_CLI`. This can be provided by libraries such as
prometheus_flask_exporter that invoke Flask as a server. Such a change would
solve the use case described above, while preserving all the benefits of the
check happening by default.
I would be happy to contribute such a fix, along with documentation and tests
as desired, if the maintainers of Flask agree that it is an appropriate path
forward. If you have other suggestions for a better way to resolve the issue
with prometheus_flask_exporter, please let me know and I would be happy to
discuss.