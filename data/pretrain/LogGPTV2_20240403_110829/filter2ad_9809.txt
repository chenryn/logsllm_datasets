# 【技术分享】Java反序列化安全实例解析

## 译文声明
本文为翻译文章，原文来源：携程信息安全响应中心。译文仅供参考，具体内容及含义以原文为准。

---

## 序列化简介
**序列化**（Serialization）是指将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。之后，可以通过从存储区中读取或反序列化对象的状态来重新创建该对象。

简单来说：
- **序列化**：将数据结构或对象转换成二进制串的过程。
- **反序列化**：将在序列化过程中所生成的二进制串转换成数据结构或者对象的过程。

下面是一个示例代码，展示了如何将字符串对象进行序列化并存储到本地文件中，然后再通过反序列化恢复该对象：

```java
public static void main(String[] args) throws Exception {
    String obj = "hello world!";
    
    // 将序列化对象写入文件object.db中
    FileOutputStream fos = new FileOutputStream("object.db");
    ObjectOutputStream os = new ObjectOutputStream(fos);
    os.writeObject(obj);
    os.close();
    
    // 从文件object.db中读取数据
    FileInputStream fis = new FileInputStream("object.db");
    ObjectInputStream ois = new ObjectInputStream(fis);
    
    // 通过反序列化恢复对象obj
    String obj2 = (String) ois.readObject();
    ois.close();
}
```

## 反序列化漏洞原理
反序列化漏洞的核心在于反序列化机制打破了数据和对象的边界，导致攻击者注入的恶意序列化数据在反序列化过程中被还原成对象。一旦控制了这些对象，攻击者就可能在目标系统上执行恶意代码。Java序列化机制广泛应用于RMI、JMX和JMS等技术中。

## 漏洞危害案例
### 案例一：Apache ActiveMQ 5.12.0 远程代码执行漏洞（JMS）
在Apache ActiveMQ 5.13.0之前的5.x版本中存在一个安全漏洞，该漏洞源于程序未能限制可在代理中序列化的类。远程攻击者可利用特制的序列化的Java Message Service (JMS) `ObjectMessage` 对象执行任意代码。

受影响的消息系统包括：
- Apache ActiveMQ 5.12.0 及更早版本
- HornetQ 2.4.0 及更早版本
- Oracle OpenMQ 5.1 及更早版本
- IBM Websphere MQ 8.0.0.4 及更早版本
- Oracle Weblogic 12c 及更早版本
- Pivotal RabbitMQ JMS client 1.4.6 及更早版本
- IBM MessageSight MessageSight V1.2 JMSClient 及更早版本
- SwiftMQ JMS client 9.7.3 及更早版本
- Apache ActiveMQ Artemis client 1.2.0 及更早版本
- Apache Qpid JMS client 0.9.0 及更早版本
- Amazon SQS Java Messaging Library 1.0.0 及更早版本

### 案例二：JBoss 反序列化漏洞（JMX）
JBoss默认安装在8080端口，并使用HTTP协议进行通信。JMX（Java Management Extensions）是一个管理协议，在JBoss中的`JMXInvokerServlet`可以通过HTTP协议与其进行通信。这一通信功能依赖于Java的序列化类。

攻击者可以构造恶意的序列化对象并通过HTTP发送给目标主机，从而执行系统命令。RedHat发布了针对相关产品的解决方案：[https://access.redhat.com/solutions/2045023](https://access.redhat.com/solutions/2045023)

受影响的JBoss产品包括：
- Red Hat JBoss A-MQ 6.x
- Red Hat JBoss BPM Suite (BPMS) 6.x
- Red Hat JBoss BRMS 6.x
- Red Hat JBoss BRMS 5.x
- Red Hat JBoss Data Grid (JDG) 6.x
- Red Hat JBoss Data Virtualization (JDV) 6.x
- Red Hat JBoss Data Virtualization (JDV) 5.x
- Red Hat JBoss Enterprise Application Platform 6.x
- Red Hat JBoss Enterprise Application Platform 5.x
- Red Hat JBoss Enterprise Application Platform 4.3.x
- Red Hat JBoss Fuse 6.x
- Red Hat JBoss Fuse Service Works (FSW) 6.x
- Red Hat JBoss Operations Network (JBoss ON) 3.x
- Red Hat JBoss Portal 6.x
- Red Hat JBoss SOA Platform (SOA-P) 5.x
- Red Hat JBoss Web Server (JWS) 3.x

### 案例三：Jenkins Remoting API 漏洞
Jenkins Remoting API 用于实现分布式环境中master和slave节点或master和CLI的访问。该API没有身份认证并且支持序列化对象。CVE-2016-0788通过Jenkins Remoting巧妙地开启JRMP，JRMP触发反序列化操作，从而进行漏洞利用。作者已经提供了完整的POC。

受影响的版本包括：
- 所有Jenkins主线版本至1.649
- 所有Jenkins LTS版本至1.642.1

## 漏洞防御措施
1. **反序列化对象白名单控制**：在`resolveClass`方法中校验对象名字。
   ```java
   public class LookAheadObjectInputStream extends ObjectInputStream {
       public LookAheadObjectInputStream(InputStream inputStream) throws IOException {
           super(inputStream);
       }

       @Override
       protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
           if (!desc.getName().equals(Bicycle.class.getName())) {
               throw new InvalidClassException("Unauthorized deserialization attempt", desc.getName());
           }
           return super.resolveClass(desc);
       }
   }
   ```

2. **序列化数据加密传输**：对序列化数据采用对称加密进行传输，并在接口调用中增加身份认证。此方法仅能提升攻击成本。

3. **关闭敏感数据的序列化**：如果类中存在敏感数据且需要序列化，可以在特定对象的域上关闭序列化。在该域前加上关键字`transient`即可。

更多内容请关注携程安全应急响应中心公众号（CSRC）。