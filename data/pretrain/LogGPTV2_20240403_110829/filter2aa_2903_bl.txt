码和数据等。而非入侵式调试则不然，一般只是观察调试目标的行为和
数据，并不加以修改，性能监视就是典型的例子。
对于入侵式调试，ARM手册中又将其分为两大模式：监视器模式
（monitor debug-mode）和中止模式（halting debug-mode）。二者的根
本区别在于报告和处理调试事件的方式。当设置为监视器模式时，调试
事件会触发异常，然后交给软件来处理异常。当设置为中止模式时，调
试事件会导致CPU中止，进入所谓的调试状态，停止执行任何指令，等
待硬件调试器接管控制权和提供调试服务。简单来说，监视器模式就是
依赖操作系统和软件调试器为主的软件模式，中止模式就是以JTAG等
硬件调试器为主的硬件模式。因此，前者又称为自主调试（self-hosted
debug），后者又称为外部调试（external debug）。
本书将分几个部分介绍ARM架构的各种调试设施。本节先介绍监
视器模式下的断点和单步执行支持，第7章将详细介绍中止模式。
4.6.1 断点指令  
本章前面详细介绍了x86的断点指令（INT 3），它对软件调试有着
重要的作用。那么，ARM架构中有类似的指令吗？
这个看似简单的问题其实并不简单。作者很久以前就想找到这个问
题的答案，但前前后后花了不少时间才基本明白了其中的原委。
作者最初使用的是“用调试器学习调试”的方法。打开一个
WoA（Windows on Arm）系统的转储文件，然后反汇编DbgBreakPoint
函数，看x86平台上用int 3的地方用的是什么：
ntdll!DbgBreakPoint:
76f5e9d0 defe     _ _debugbreak
76f5e9d2 4770     bx          lr
上面的第二条指令是返回到父函数，第一条指令的助记符是
__debugbreak，起初作者以为它就是ARM架构中的断点指令。但后来意
识到受骗了，因为找遍ARM手册，根本没有
__debugbreak这条指令。原来，第一条指令的机器码defe根本不是任何
指令的机器码，而是无效指令，__debugbreak是反汇编器给它硬取的名
字，所谓“强为之名”，两条下画线暗示了这个特征。怎么会这样呢？简
单来说，早期的ARM平台主要是靠硬件调试器来调试（即前面说的中
止模式），直到ARMv5才引入专门的断点指令。因此，不知道哪位高
人想出了个替代的方法，就是使用defe这样的无效指令来替代断点指
令，当CPU执行到这条指令时会产生无效指令异常，剩下的任务就都丢
给异常处理函数和系统软件了。
上面DbgBreakPoint函数使用的是2字节的THUMB指令，阅读Linux
内核源代码中用于支持内核调试的kgdb.h（/arch/arm/include/asm），可
以看到用于触发异常的4字节标准ARM指令。
#define BREAK_INSTR_SIZE    4
#define GDB_BREAKINST         0xef9f0001
#define KGDB_BREAKINST        0xe7ffdefe
#define KGDB_COMPILED_BREAK   0xe7ffdeff
以及提供给内核的接口函数：
static inline void arch_kgdb_breakpoint(void)
{
    asm(__inst_arm(0xe7ffdeff));
}
与x86的对应函数相比，上述方法真是有些不体面。
static inline void arch_kgdb_breakpoint(void)
{
    asm("   int $3");
}
其实，使用无效指令不只是不体面，其实际效果也有很多不足。在
阅读gdb和kgdb中的有关代码时，可以看到很多晦涩的代码。这样的代
码不易阅读，编写时一定也很痛苦，以至于在上面提到的kgdb.h的开
头，我们可以看到这样一条专门写给ARM硬件设计师的留言：
* Note to ARM HW designers: Add real trap support like SH && PPC to
* make our lives much much simpler. :)
ARMv5引入的断点指令叫BKPT，在Thumb指令集和ARM指令集中
都有。CPU执行该指令时会产生Prefetch Abort异常。搜索GDB的源代
码，可以发现GDB在某些情况下会使用BKPT指令，并将其称为增强的
软件断点指令（enhanced software breakpoint insn）（gdb/arm-tdep.c）。
ARMv8引入的64位指令集中，新增了一条名为BRK的断点指令。
在32位指令集中，则保留了BKPT指令，允许继续使用。观察ARM版64
位Windows 10的DbgBreakPoint函数，可以看到如下指令：
ntdll!DbgBreakPoint:
00007ffe`51572fa0 d43e0000 brk         #0xF000
00007ffe`51572fa4 d65f03c0 ret         lr
综上所述，早期ARM架构中没有断点指令，使用未定义指令来替
代，ARMv5为弥补这个不足引入了BKPT指令，ARMv8又引入了BRK指
令，而且行为不同。这样的不断变化难免给人朝令夕改的感觉。从积极
的角度看，这体现了持续改进的精神。但是带来的实际问题是很多地方
还在使用老的无效指令方法，降低了技术进步的速度。
4.6.2 断点寄存器
ARM架构的14号协处理器（CP14）是专门支持调试的，ARMv6将
其正式纳入ARM架构。此前，ARM架构的调试支持都是实现相关的。
因此本节介绍的内容适用于ARMv6或者更高版本。
简单来说，从ARMv6开始的ARM架构定义了16对断点寄存器。每
对两个，名字分别为BVRn和BCRn（n为0～15），其编号分别为64～79
和80～95。
BVR的全称是断点数值寄存器（Breakpoint Value Register），BCR
的全称是断点控制寄存器（Breakpoint Control Register）。前者用来定
义断点的参数取值，后者用来设置断点的选项。二者一一对应，相互配
合一起描述一个断点。二者合称断点寄存器对（Breakpoint Register
Pair）。
BVR的取值有两种情况：当设置普通的断点时，它的值是指令的虚
拟地址（Instruction Virtual Address，IVA）；当设置所谓的上下文断点
时，它的值是上下文ID（Context ID）。ARM处理器会将BVR的值与我
们在第2章介绍过的CP15中的CONTEXTIDR寄存器的值进行比较，并根
据匹配结果和系统设置决定是否要报告调试事件。
下面两条指令分别用来读写某个BVR寄存器：
MRC p14,0,,c0,,4 ; 将DBGBVR 读到Rt，n的值为0～15。
MCR p14,0,,c0,,4 ; 将Rt写到DBGBVR，n的值为0～15。
BCR寄存器的格式比较复杂，图4-9给出了32位时的位定义。
图4-9 BCR寄存器
首先，BCR的最低位（位域E）用来启用（Enable，1）和禁止该断
点（0）。接下来介绍BT位域，它是用来定义断点类型（Breakpoint
type）的，共有4位，可以定义16种类型，目前共定义了10种。10种类
型中有5种是基本类型（Base type），使用BT[3:1]来指定基本类型，其
定义分别如下。
0b000：指令地址匹配。
0b001：上下文ID匹配。
0b010：指令地址不匹配（IVA Mismatch）。这种类型用于特殊的
场合，报告异常的条件是检测到当前指令地址与BVR中设置的地址
不一样。在网上可以搜索到多条关于这类断点的瑕疵的报告[4]。
ARMv8中仅保留了在32位时支持这个功能，64位时删除了这个功
能。
0b100：VMID（虚拟机ID）匹配，要匹配的VMID设置在另一组名
为DBGBXVR的寄存器组的对应寄存器中（仅适用于包含虚拟化扩
展的情况）。
0b101：VMID和Context ID同时匹配（仅适用于包含虚拟化扩展的
情况）。
BT[0]用来启用所谓的链接选项（link），因为这一位有0、1两种可
能，于是上述5种基本类型变为10种。不过，不是所有链接类型都有意
义。目前使用的只有一种情况：当基本类型为地址匹配时，如果BT[0]
为1，那么LBN（Linked Breakpoint Number）位域中应该是另一个上下
文匹配断点的编号，这样便可以实现上下文与地址同时匹配，支持进程
相关的断点。
MASK位域用来指定匹配的长度（范围），当断点类型为地址匹配
时，MASK的值用来指定地址比较时需要屏蔽（忽略）掉的地址位数，
如果为0，代表不屏蔽，1、2两个值保留不用，3代表屏蔽掉低3位，依
次类推，MASK的所有位为1时（0x1F）表示屏蔽低31位。举例来说，
如果BCR指定的地址值为0x12345678，MASK的值为0b00011，那么地
址匹配的范围便是0x12345678～0x1234567F的8个字节。
BAS位域的全称是Byte Address Select，BVR中的地址是按字
（word，ARM中word为32位）对齐的，如果希望匹配到地址不对齐的
某个字节，那么应该通过这个位域来选择字（word）中的某个字节。
PMC（Privileged Mode Control）、HMC（Hyp Mode Control）和
SSC（Security State Control.）这3个位域具有类似的作用，都是给断点
附加模式或者状态条件，用来指定在什么样的情况下应该报告调试事
件、什么情况下不要报告。比如，如果HMC和SSC为0、PMC为0b01，
那么只有当处理器处于特权级别1（PL1）时才报告调试事件。如果把
PMC改为0b11，那么便所有模式都报告。如果把SSC改为0b10，那么便
只有当处理器处于安全模式（secure mode）时才报告调试事件。如果把
SSC改为0b01，那么便只有当处理器处于非安全模式（non-secure
mode）时才报告调试事件。
虽然ARM架构定义了16对断点寄存器，但其具体数量还是要看芯
片实现的。ARM架构规定可以通过读取CP14的DBGDIDR寄存器来检查
当前平台的调试设施实现细节，如图4-10所示。
图4-10 DBGDIDR寄存器
图4-10是来自ARMv7手册的DBGDIDR寄存器（ARMv8版本的低字
节为保留）定义，其中BRP位域的值加1就是断点寄存器对的数量，允
许值为1～15，代表断点寄存器对的数量为2～16（ARM架构规定最少2
对）。
在内核调试会话中观察WoA系统中NT内核的_CONTEXT结构体，
可以看到Bvr和Bcr数组，长度为8，这说明WoA系统支持8对断点寄存
器。
0: kd> dt _CONTEXT -ny b*
nt!_CONTEXT
   +0x150 Bvr : [8] Uint4B
   +0x170 Bcr : [8] Uint4B
对于64位的WoA系统，Bvr数组的每个元素都扩展为64位，但Bcr数
组仍是32位，而且支持的寄存器对数没有变。
nt!_CONTEXT
   +0x318 Bcr : [8] Uint4B
   +0x338 Bvr : [8] Uint8B
清单4-11列出了使用断点寄存器设置简单指令断点的伪代码（见本
章参考资料[3]的第327页）。
清单4-11 使用断点寄存器设置指令断点
1    SetSimpleBreakpoint(int break_num, uint32 address, iset_t isa)
2    {
3      // 首先将对应断点置为禁用状态
4      WriteDebugRegister(80 + break_num, 0x0);
5      // 其次将地址写到BVR寄存器，保持低2位为0
6      WriteDebugRegister(64 + break_num, address & 0xFFFFFFC);
7      // 然后根据情况决定“字节地址选择”（BAS）位域的值
8      case (isa) of
9      {
10       // 注意：CortexTM-R4处理器不支持Jazelle或者ThumbEE状态，
11       // 但ARMv7 Debug Architecture定义中支持这两种状态
12       when JAZELLE:
13         byte_address_select := (1 << (address & 3));
14       when THUMB:
15         byte_address_select := (3 << (address & 2));
16       when ARM:
17         byte_address_select := 15;
18      }
19      // 最后，写屏蔽与控制寄存器，启用断点
20      WriteDebugRegister(80 + break_num, 7 | (byte_address_select << 5))
;
21   }
根据前面介绍的BCR位定义，清单4-11的第20行第二个参数7代表
启用该断点，并且将PMC设置为0b11，即匹配所有模式。
对于运行在ARM平台上的Linux系统（不妨将其称为LoA），内核
启动时，会检查CPU的硬件断点支持情况，并通过内核消息报告出来，
比如下面是Tinker单板系统（感谢人人智能）启动时打印出的信息：
[0.246744] hw-breakpoint: found 5 (+1 reserved) breakpoint and 4 watchpoin
t registers.
来自arch/arm/kernel/hw_breakpoint.c中的如下代码：
pr_info("found %d " "%s" "breakpoint and %d watchpoint registers.\n",
    core_num_brps, core_has_mismatch_brps() ? "(+1 reserved) " :
    "", core_num_wrps);
其中的core_num_brps代表可用的硬件断点数量，它的值来自同一
个源文件中的get_num_brps函数：
core_num_brps = get_num_brps();
下面是get_num_brps函数的源代码：
/* Determine number of usable BRPs available. */
static int get_num_brps(void)
{