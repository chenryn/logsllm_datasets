Proposition 5.1. The Π𝑓 protocol derived from ΠCompressedMC
is correct, (𝑃𝑅, 𝑛 − 1)-private, (𝑃𝑆, 0)-robust with robustness error
𝑖=0
,
and a client-server 𝜌-phase protocol, with 𝜌 = ⌊log𝑘(𝑚)⌋.
The proof is given in the full version.
Putting Everything Together. We describe our MPCitH ZK-IOP for
arithmetic and Boolean circuit in Figure 5. The protocol ΠInt_ZKP is
derived directly from the parallel execution variant of Π𝜌−ZKIOP, in-
stantiating Π𝜏
with the MPC protocol described above. Combining
𝑓
results from previous sections, we obtain the following theorem.
Theorem 5.2. Let 𝑛, 𝑚, 𝑘 be integers and F ⊆ G finite fields. Let 𝐶
be a circuit over F of multiplicative size 𝑚 and |G| > 𝑚. The protocol
ΠInt_ZKP satisfies completeness, soundness and (honest-verifier) zero-
knowledge as in Definition 2.4 with soundness error 𝜖 = 1/𝑛𝜏 + (1 −
1/𝑛𝜏) · 𝛿𝑘 and round complexity ⌊log𝑘(𝑚)⌋ + 2.
From ZK-Interactive MPCitH Proof to ZK Arguments. We can com-
pile the interactive ZK proof described in Figure 5 to an interactive
argument, with standard techniques using collision-resistant hash
functions. In particular, as described [30], we can achieve better
efficiency using collision-resistant hash functions based on Merkle
trees [35].
Setting the Parameters. Notice the parameters of our zero-knowledge
argument protocol greatly depends on the size of the base field F
and extension field G, other than the compression factor 𝑘. In gen-
eral, for small values of 𝑘 we have smaller proof size, but larger
running times. In Table 2 we show the number of repetitions and
estimated proof when the base field F = F2 with 𝑘 = 8. Notice that
since we choose a big extension filed, G = F264, the number of rep-
etitions is the same for different circuit size, but it varies depending
on the number of parties.
6 NON-INTERACTIVE ZERO-KNOWLEDGE
ARGUMENTS
Using the Fiat-Shamir paradigm [23, 38], we can transform our
public coin interactive protocol to a corresponding non-interactive
zero-knowledge protocol. Roughly, the prover will compute the
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3029Inputs: Public circuit 𝐶 over F with 𝑚 MULT gates. Extension field G. Public input 𝑥. Private input 𝑤 for 𝒫.
Outputs: Public proof oracles (𝜋1, . . . , 𝜋𝜌) from 𝒫. Private output 𝑏 ∈ {0, 1} from 𝒱.
First Oracle 𝜋1
Prover Execute phase 1 of ΠCompressedMC.
ΠInt_ZKP
- Client party 𝑃𝑆 executes the following for each evaluation 𝑡 ∈ [𝜏]:
(1) Generate a sharing of the witness ⟨𝑤𝑡 ⟩ $← F𝑛 and add ⟨𝑤𝑡 ⟩𝑖 to (m𝑡,1)𝑖.
(2) For each multiplication gate ℓ ∈ [𝑚]:
(a) Compute the multiplication result: 𝑧𝑡,ℓ ← 𝑥𝑡,ℓ · 𝑦𝑡,ℓ .
(b) Generate a sharing of the result ⟨𝑧𝑡,ℓ ⟩ $← F𝑛 and add ⟨𝑧𝑡,ℓ ⟩𝑖 to (m𝑡,1)𝑖.
(3) Send (m𝑡,1)𝑖 to 𝑃𝑖.
- The server parties execute the following, also for each evaluation 𝑡 ∈ [𝜏]:
(1) Append (m𝑡,1)𝑖 to view𝑖
(2) Compute the input shares ⟨𝑥𝑡,ℓ ⟩𝑖 and ⟨𝑦𝑡,ℓ ⟩𝑖 for each multiplication gate ℓ ∈ [𝑚] using the shares from (m𝑡,1)𝑖.
Set (𝜋1)𝑡,𝑖 = view1
𝑡,𝑖.
𝑡,1.
Interactive Protocol—First Round.
Verifier Sample a random challenge 𝑅
Prover Continue the 𝜏 executions of ΠCompressedMC by running 𝑃𝑆 and the servers {𝑃𝑖 } on input 𝑅 as follows:
$← G and send it to 𝒫 as the output of RandomCoin.
(1) Each server 𝑃𝑖 lifts ⟨𝑥𝑡,ℓ ⟩𝑖, ⟨𝑦𝑡,ℓ ⟩𝑖, ⟨𝑧𝑡,ℓ ⟩𝑖 from F to G.
(2) Each server computes their share of ⟨x0
𝑡 ⟩ and ⟨𝑧0
𝑡 ⟩, ⟨y0
𝑡)ℓ ⟩ = ⟨𝑦𝑡,ℓ ⟩, and ⟨𝑧0
⟨(x0
𝑡)ℓ ⟩ = 𝑅ℓ−1⟨𝑥𝑡,ℓ ⟩, ⟨(y0
𝑡 ⟩ =ℓ∈[𝑚] 𝑅ℓ−1⟨𝑧𝑡,ℓ ⟩.
𝑡 ⟩ such that:
Interactive Protocol—Compression Rounds. For each compression round 𝑗 ∈ [⌊log𝑘 (𝑚)⌋]:
Prover Before creating the next oracle, emulate the following computation.
𝑡,1, . . . , a𝑗
𝑡 → (a𝑗
𝑡,𝑘) and y𝑗−1
- For the client 𝑃𝑆, for each 𝑡 ∈ [𝜏]:
(1) Parse x𝑗−1
(2) For each 𝑢 ∈ [𝑘 − 1]: Compute inner-products: 𝑐 𝑗
(3) Compute last inner-product: 𝑐 𝑗
(4) Construct f 𝑗
(5) For each 𝑢 ∈ [𝑘 + 1, 2𝑘 − 1] if 𝑗 ≠ ⌊log𝑘 (𝑚)⌋, or 𝑢 ∈ [𝑘 + 1, 2𝑘 + 1] otherwise: Compute inner-product ℎ 𝑗
𝑡 ∈ (G[𝑋 ])𝑚/𝑘 as in ΠCompress if 𝑗 ≠ ⌊log𝑘 (𝑚)⌋, or as in ΠCompressRand otherwise.
𝑡 −𝑢∈[𝑘−1] 𝑐 𝑗
𝑡,𝑘).
𝑡,𝑢 ∗ b𝑗
𝑡,𝑢 ← a𝑗
𝑡,𝑢.
𝑡,𝑢, generate sharing ⟨𝑐 𝑗
𝑡,𝑢 ← 𝑧 𝑗−1
𝑡 → (b𝑗
𝑡,1, . . . , b𝑗
𝑡,𝑢⟩ $← G𝑛 and add ⟨𝑐 𝑗
𝑡 , g𝑗
𝑡,𝑢⟩𝑖 to (m𝑡,𝑗+1)𝑖.
𝑡 (𝑢) = f 𝑗
𝑡 (𝑢) ∗ g𝑗
𝑡 (𝑢), generate
sharing ⟨ℎ 𝑗
𝑡 (𝑢)⟩ $← G𝑛 and add ⟨ℎ 𝑗
𝑡 (𝑢)⟩𝑖 to (m𝑡,𝑗+1)𝑖.
(6) Send (m𝑡,𝑗+1)𝑖 to 𝑃𝑖.
- For each server party 𝑃𝑖, for each evaluation 𝑡 ∈ [𝜏]:
(1) Append (m𝑡,𝑗+1)𝑖 to view𝑗+1
Set (𝜋 𝑗+1)𝑡,𝑖 = view𝑗+1
𝑡,𝑖 .
𝑡,𝑖 . and compute ⟨f 𝑗
𝑡 ⟩𝑖, ⟨g𝑗
𝑡 ⟩𝑖, ⟨ℎ 𝑗
𝑡 ⟩𝑖 using the shares from (m𝑡,𝑗+1)𝑖.
Verifier Sample a random challenge 𝑠 𝑗
Prover Continue the 𝜏 executions of ΠCompressedMC by running 𝑃𝑆 and the servers {𝑃𝑖 } on input 𝑠 𝑗 as follows:
𝑡 ⟩, ⟨y𝑗
$← G \ [𝑘] and send it to 𝒫 as the output of RandomCoin.
𝑡 (𝑠 𝑗)⟩ and labels them as ⟨x𝑗
𝑡 (𝑠 𝑗)⟩ and ⟨ℎ 𝑗
(1) Each server computes their own share of ⟨f 𝑗
(2) The sender 𝑃𝑆 computes x𝑗
𝑡 (𝑠 𝑗)⟩, ⟨g𝑗
𝑡 in the same way.
𝑡 and 𝑧 𝑗
𝑡 , y𝑗
𝑡 ⟩ and ⟨𝑧 𝑗
𝑡 ⟩.
Interactive Protocol—Final Rounds.
Prover After computation of the final compressed tuple, for each 𝑡 ∈ [𝜏] the server parties {𝑃𝑖 } each send their shares ⟨f 𝑗
𝑡 (𝑠 𝑗)⟩𝑖,
with 𝑗 = ⌊log𝑘 (𝑚)⌋, to 𝑃𝑅, together with their shares ⟨𝑜⟩𝑖 of the values of the output wires of 𝐶; all of these form view𝑡,𝑅, which 𝒫 sends to 𝒱
in full.
𝑡 (𝑠 𝑗), with 𝑗 = ⌊log𝑘 (𝑚)⌋, and check
that the output of the circuit is valid, i.e. that𝑖 ⟨𝑜⟩𝑖 = 1. If one of these fails, reject.
Verifier Upon receiving view𝑡,𝑅, for each 𝑡 ∈ [𝜏], check that the tuple is correct, i.e. that ℎ 𝑗
Oracle query The verifier picks a subset 𝑄𝑡 ⊂ [𝑛] of size 𝑛 − 1 uniformly at random for each 𝑡 ∈ [𝜏] and queries {𝑄𝑡 }.
Verifier Upon receiving {view𝑡,𝑞 }𝑞∈𝑄𝑡 for each 𝑡 ∈ [𝜏] (where view𝑡,𝑖 = view1
𝑡,𝑖), recompute the operations of each opened server 𝑃𝑞
𝑡,𝑖 ∥ . . . ∥view𝜌
𝑡 (𝑠 𝑗)⟩𝑖, ⟨g𝑗
𝑡 (𝑠 𝑗)⟩𝑖, ⟨ℎ 𝑗
𝑡 (𝑠 𝑗) = f 𝑗
𝑡 (𝑠 𝑗) ∗ g𝑗
to check for inconsistencies with view𝑡,𝑅. If an inconsistency is found, reject. If not, accept.
Figure 5: Interactive (Zero-knowledge) proof (of knowledge) protocol
first-round message as in the interactive variant and then continue
the protocol by setting the verifier’s next message to be the output
of a hash function 𝐻 modelled as a random oracle on input the
transcript of previous messages.
While the zero-knowledge property directly follows from the
corresponding property of the interactive variant, soundness re-
quires more careful analysis. In [9], the authors prove that for IOP
systems the soundness of the transformed non-interactive protocol
can be derived form the soundness of the IOP verifier against “state
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3030Circuit size
103
104
105
106
(𝑛 = 16, 𝜏 = 11)
4.9
18.5
143
1382
(𝑛 = 64, 𝜏 = 7)
3.5
11.7
91
879.5
(𝑛 = 128, 𝜏 = 6)
2.5
10
78
753.8
Table 2: Proof size (in kB) needed for interactive proof soundness of
2−40 with compression 𝑘 = 8 and extension field G = F264, depending
on number 𝑛 of parties, number 𝜏 of repetitions and circuit size.
restoration attacks”. This section presents a better estimation of
the soundness of our non-interactive protocol.
6.1 Soundness with independent challenges
This first analysis applies to the non-optimised variant of the
protocol where each of the 𝜏 parallel executions receives a random
challenge from RandomCoin, independently of the other execu-
tions. When producing a non-interactive proof, before proceeding
to the next round, the prover can re-randomize the commitments
they make to the random oracle in order to sample different public
coins for the checks. Here the best cheating strategy is to attack
different executions at each round of interaction so that, by the end
of the protocol, all executions will cause the verifier to accept.
Assuming that the final ZK protocol has 𝑟 rounds of interaction
between prover 𝒫 and verifier 𝒱, we let 𝑋𝑖, for 𝑖 ∈ [𝑟], be the
random variable of the maximum number (out of the remaining
incorrect executions) of “good” challenges received by the prover
during all its queries to the 𝑖-th random oracle. (By “good” chal-
lenge we mean one which corrects and “hides” any cheating in that
execution.)
As demonstrated in previous work on this kind of non-interactive
protocol [3, 10], the number of “good” challenges received for each
call to the random oracle follows a binomial distribution with pa-
rameters (𝜏𝑖, 𝑝𝑖), where 𝜏𝑖 denotes the number of parallel executions
for which this challenge is “good” and 𝑝𝑖 denotes the probability
that a random challenge is “good” for one execution.
The prover’s goal is to receive a “good” challenge in one of
the interaction rounds for each of the 𝜏 parallel executions. This
means that the soundness error is the probability that this strategy
succeeds, namely Pr(cid:2)𝑟
𝑖=1 𝑋𝑖 = 𝜏(cid:3) .
Specifically to our protocol ΠInt_ZKP, we identify the following
interactions between the prover and the verifier in the interactive
variant:
with challenge 𝑅 ∈ G.
(1) 𝒫 commits to the injections of the 𝑚 values; 𝒱 responds
(2) For each 𝑗 ∈ [⌊log𝑘 𝑚⌋]: the prover commits to the 𝑐 𝑗
𝑖 in-
jections (i.e. to the values 𝑃𝑆 sends to the server parties 𝑃𝑖),
for 𝑖 ∈ [𝑘 − 1], and the ⟨ℎ(𝑖)⟩ injections (in ΠCompress), for
𝑖 ∈ [𝑘 + 1, 2𝑘 − 1]; 𝒱 responds with challenge 𝑠 𝑗 ∈ G.
(3) At step 𝑗 = ⌊log𝑘 𝑚⌋, the prover also commits to the addi-
tional points required by ΠCompressRand.
In the non-interactive setting, we therefore have the following
probabilities of obtaining a “good” challenge correctly for each of
the interaction rounds:
First round. Probability that 𝑅 makes the tuple correct: 𝑝𝑅 = 𝑚−1
|G| .
Intermediary rounds. For 𝑗 ∈ [⌊log𝑘 𝑚⌋ − 1] (last round is spe-
cial as it has polynomials of different degrees), probability
that the Schwartz–Zippel test fails to catch a non-zero poly-
2(𝑘−1)
nomial, i.e. ΠCompress outputs a correct tuple: 𝑝int =
|G|−𝑘
Final round. Probability that the last Schwartz–Zippel test fails,
2𝑘|G|−𝑘 .
The soundness of the non-interactive protocol, with the inde-
i.e. that ΠCompressRand outputs a correct tuple: 𝑝fin =
pendent challenges variant, is therefore given by
(cid:20)
𝑊 +∑︁⌊log𝑘 𝑚⌋−1
𝑗=1
(cid:21)
𝑋 𝑗 + 𝑌 + 𝑍 = 𝜏
,
𝜖indep
ni
= Pr
where
𝑊 = max
𝑞1
𝑋 𝑗 = max
𝑞 𝑗,2
𝑌 = max
𝑞3
𝑍 = max
𝑞4
{𝑊𝑞1 }
{𝑋𝑞 𝑗,2 }
{𝑌𝑞3 }
{𝑍𝑞4 }
𝑊𝑞1 ∼ 𝔅 (𝜏, 𝑝𝑅)
𝑋 𝑗,𝑞2 ∼ 𝔅
(cid:17)
(cid:16)𝜏 − 𝑊 −∑︁𝑗−1
(cid:18)
𝜏 − 𝑊 −∑︁⌊log𝑘 𝑚⌋−1
(cid:18)
𝜏 − 𝑊 −∑︁⌊log𝑘 𝑚⌋−1
𝑖=1 𝑋𝑖, 𝑝int
𝑖=1
𝑖=1
𝑌𝑞3 ∼ 𝔅
𝑍𝑞4 ∼ 𝔅
(cid:19)
(cid:19)
1
𝑁
𝑋𝑖, 𝑝fin
𝑋𝑖 − 𝑌 ,
with 𝑞𝑖 denoting the queries to the 𝑖-th random oracle and 𝔅
denoting the binomial mass function.
6.2 Soundness with identical challenges
The optimised protocol presented in Section 5, where the chal-
lenges output by RandomCoin are shared across the 𝜏 executions,
has a different distribution of “good” challenges.
Considering the first round, a malicious prover can commit to
𝜏 cheating strategies each represented by the values of {m𝑡}𝑡 ∈[𝜏];
these are namely the sharings of the witness 𝑤𝑡 and of each multi-
plication output 𝑧𝑡,ℓ, for ℓ ∈ [𝑚]. Using the notation of the proof
of Lemma 4.1, each of these strategies defines a polynomial 𝐻 (𝑡)
whose zeroes define a “good” first-round challenge. Indeed, recall
from Lemma 4.1 that a challenge 𝑅 ∈ G corrects a set of incorrect
multiplication triples if and only if 𝐻 (𝑡)(𝑅) = 0 when 𝐻 (𝑡) is not
the zero polynomial (due to the error in at least one of the triples).
Denote by ℋ(𝑡) the set {𝑟 ∈ G : 𝐻 (𝑡)(𝑟) = 0} of “good” challenges.
As the first round challenge 𝑅 is shared across executions, if the
malicious prover wishes to correct 𝜏1 out of 𝜏 executions, then the
probability of this happening is highest when at least 𝜏1 of the zero
sets ℋ(𝑡) are identical. In this case, the probability that 𝑅 is a “good”
challenge for these 𝜏1 executions is exactly 𝑚−1
|G| , independently of
𝜏1. This implies that, here, the distribution 𝑊 of 𝜖indep
can take
any value between 1 and 𝜏 with this probability, depending on the
prover’s strategy, and is 0 otherwise.
Following the same reasoning, we have that the probability of
sampling a “good” challenge for 𝜏′ executions in the intermedi-
ary rounds or the final rounds can be as high as 2(𝑘−1)
2𝑘|G|−𝑘 ,
respectively, when the prover cheats identically across these 𝜏′
executions. Indeed, even in the final round when the ℎ polynomial
is randomised, since the prover also controls ΠRand,the sets of zeros
can still be made identical. Similarly, this implies that the 𝑋 𝑗 and 𝑌
distributions can here also take any value between 1 and 𝜏 with the
above fixed probabilities.
|G|−𝑘 or
ni
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3031ni
Only the 𝑍 distribution of 𝜖indep
remains the same due to the
independent sampling of the 𝜏 challenges for the opening of the
views of 𝑛 − 1 parties in each execution. Putting this all together