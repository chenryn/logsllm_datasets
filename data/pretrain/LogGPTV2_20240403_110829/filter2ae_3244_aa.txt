## 0x00 写在前面
原文是去年看到的系列文章，总共有8篇。文章详细介绍了SOCasS(SOC as a
Service)的架构及相关部署方法。在国内，SOC的概念比较多见了——安全运营中心，很多安全厂商也有相关的产品。但是SOCasS的概念，比较少见，笔者在国内的一些安全论坛/社区好像都没有见过这个词，国外甚至都推出了SOCasS的相关产品/服务。当时挺感兴趣就收藏了文章，后面断断续续阅读完了。
什么是SOCasS呢？简单解释就是：企业可能由于时间/资源/安全人力不足，很难组建自己的内部安全团队。但是他们可以使用第三方的技术和软件工具构建一个适配企业的SOC（这个第三方可以理解为厂商的产品和技术、也可以理解为开源产品/技术）。
本文是由突尼斯INSAT大学的三名学生编写的，他们使用100%开源的软件和技术，构建了一套很完善的SOC：包括平台架构、各种日志收集、漏洞扫描、监控、日志处理、数据整合、dashboard图表、告警、应急响应事件管理等。涵盖内容丰富，值得一读。笔者也是抱着学习的目的，在阅读的同时，前前后后将这8篇文章翻译成中文，供国内安全同行更直观、便捷地去阅读和理解（文章将近25000字，很多内容都是开源软件的部署方法，理解起来并不难，读者也可根据各个章节标题选择性进行阅读）。
原文链接：
> [Deploying of infrastructure and technologies for a SOC as a Service (
> SOCasS)](https://medium.com/@ibrahim.ayadhi/deploying-of-infrastructure-and-> technologies-for-a-soc-as-a-service-socass-8e1bbb885149 "Deploying of
> infrastructure and technologies for a SOC as a Service \( SOCasS\)")
**PS：** 笔者从事甲方安全建设工作多年，
也见过形形色色的同行。从事技术工作，当然信守“技术是第一生产力”，但是有时候在安全厂商天花乱坠的宣传下，“买买买”成了第一生产力（当然，预算充足完全可以这么干）。国内很少能看到本文这样的实践型的文章，文字概念型的文章比比皆是，这是个蛮有趣的事情。安全之路漫长，安全非一日之功，我们的理想状态都是利用有限的资源实现安全建设的最大价值。当然，还是要多干实事，多学习多进步。
## 0x01 架构及相关配置介绍
过去几年中，网络攻击的数量日益激增。这些攻击不仅针对个人，还针对企业，政府、关键基础设施等。由于攻击的复杂性和数量庞大，传统的解决方案（如防病毒、防火墙、NIDS和NIPS等）已经不能再满足需求。
大型企业通常会使用 **SIEM(Security Information and Event Management-安全信息和事件管理)**
的解决方案，集成到安全建设里，收集和关联网络设备、安全设备和其他终端产生的告警和日志。但是这样的方案不仅花钱而且费时费力，并且需要安全团队专门去分析误报、排查处理一些复杂的安全事件。
这就导致了 **Security Operations Center(安全运营中心)**
方法的出现，也就是我们熟知的SOC。它被认为是安全领域的一种新方法，以减少和缓解复杂度及复杂度日益增加的攻击数量。SOC是由技术人员、各种流程和技术的集成体，以提供端到端的安全能力。但现状是：组建一个SOC团队的成本太高，目前只有一些大的互联网公司在搞。
这时， **安全运营中心即服务-Security Operation Center as a Service(SOCasS)**
的方法就应运而生了。SOCaaS就是将安全运营中心（SOC）外包给第三方（使用第三方的技术和软件工具）。这就使得资源有限的公司能以更便宜、更高效和更快速的部署方式来改善其安全现状，并增强对攻击面的防御能力。
该项目是由突尼斯INSAT大学的三名学生Ibrahim Ayadhi、Ghassen Miled和Mehdi Masri在Bassem Ben
Salah教授的指导下完成的。所使用到的技术和工具100%都是免费和开源的。
为了感谢开源社区及他们的帮助，使得这个项目成为了现实。我们决定为社区公开项目文档和实施该项目的具体步骤。下图为该解决方案的详细架构图：
**该解决方案可实现日志存储、分析、监控、告警生成、报告生成、IOC(通常指的是在检测或取证中，具有高置信度的威胁对象或特征信息)扩充和事件响应管理。**
从上图可知，我们从主机和各个网络组件收集不同类型的日志和事件，然后通过安全通道（VPN隧道）将这些日志发到Logstash。我们使用ELK
beats和Wazuh-agent来收集数据和日志，随后把他们发送到ELK SIEM。
经过Logstash对数据的汇总和处理，Elasticsearch将处理数据的索引，以优化存储锅从和数据搜索。随后，数据会被转发到Kibana，Kibana负责已存储数据的分析和可视化。
同时，Wazuh HIDS的agent将数据发回Wazuh
Manager和Elasticsearch。随之，ElastAlert将监控关注的新事件，并在TheHive内部生成告警。
随后，通过Cortex分析器和MISP的额外查询来丰富事件，从而决定事件自动关闭或上报给分析人员处理。告警可供分析人员通过Cortex和MISP去声明和标记。
**该解决方案部署时使用的硬件配置和软件：**
> 硬件：
下表展示了我们项目中部署的整体基础架构、需求和服务。此外，该架构可以通过正确的配置和基础设施的拓展，部署在更大的环境中。
对于终端，它可以将任何可产生日志的设备与服务器进行连接（例如：路由器、交换机等）
托管在Microsoft Azure云上的机器 | 配置需求 | 系统版本 | 开放端口 | 部署服务  
---|---|---|---|---  
服务器 | 2 Vcpus  
8GB内存 | Ubuntu 18.04 LTS | Wazuh: TCP 1514,1515,55000  
Logstash: TCP 5044  
Kibana: TCP 5601  
Elasticsearch: TCP 8080  
Praeco: TCP 8080  
Nessus: TCP 8834  
SSH: TCP 22 | ELK stack  
Filebeat  
Nessus  
Vulnwhisperer  
Elastalert  
Praeco  
Wazuh-api  
Wazuh-manager  
服务器 | 2 Vcpus  
8GB内存 | Ubuntu 18.04 LTS | TheHive: TCP 9000  
Cortex: TCP 9001  
MISP: 443  
SSH: TCP 22 | TheHive  
Cortex  
MISP  
终端 | 2 Vcpus  
4GB内存 | Ubuntu 18.04 LTS | SSH: TCP 22 | Filebeat  
Packetbeat  
Metricbeat  
Wazuh-agent  
终端 | 2 Vcpus  
4GB内存 | Windows 10 | RDP: TCP 3389 | WinlogBeat  
Wazuh agent  
**免责声明：**
  * 由于本项目的环境和资源有限，架构图中所展示的终端设备并没有全部实现。因此，防火墙和路由器将不会在本项目中涉及。
  * 本项目中选择的硬件设备并不适用于生产环境。建议投入更多的硬件资源。我们建议每台服务器的配备8个Vcpu，第一台服务器配备32GB内存，第二台服务器配备8GB内存。 
> 软件：
**\- ELK stack:** ELK
stack是一个缩写，用于描述一个由三个流行的开源项目组成的框架：Elasticsearch、Logstash和Kibana。ELK能够收集来自所有系统和应用程序的日志，并对日志进行分析，创建可视化对应用程序和基础架构进行监控，能有助于更快的排查一些故障和进行安全分析等。
**\- Beats:**
是轻量级的数据传输器。可以安装在服务器上捕获各种操作数据（比如日志、各类指标及网络数据包）。Beats可直接或通过Logstash将操作数据发送到Elasticsearch，这样就可以用Kibana将其可视化。
**\- Elastalert:**
是一个用于从Elasticsearch中的数据中对异常、峰值或其他感兴趣的内容进行告警的简单框架。它的工作原理是，将Elasticsearch与规则类型和告警这两类组件相结合。Elasticsearch被定期查询，查询的数据会与规则类型进行匹配，当命中规则，根据命中规则的情况就会产生一条或多条告警。
**\- Suricata:**
是一个开源的威胁检测引擎，由OISF(开放信息安全基金会)开发。Suricata可作为网络入侵检测系统（NIDS）和入侵防御系统（IPS），也可用于网络安全监控。
**\- Elasticsearch的其他开源分支：**
  * **告警功能：** 它提供了一个功能强大且易用的事件监控和告警系统，能够监控数据并自动发送通知。通关直观的Kibana页面展示和强大的api，可以轻松的进行配置和告警管理。
  * **安全功能：** 它包含多种认证选项（如Active Directory和OpenID）、传输加密、细致的访问控制、详细的审计记录、高级合规性功能等。
**\- Praeco:**
是Elasticsearch的一个告警工具-[ElastAlert](https://github.com/yelp/elastalert)的GUI版，使用的是[ElastAlert
API](https://github.com/bitsensor/elastalert)。通过Praeco，可以使用查询生成器为Elasticsearch中的数据交互式地建立告警功能，可将相关通知发送到Slack、邮箱、Telegram或其他的HTTP
POST端，此外该工具还提供了许多其他的功能。
**\- Wazuh:**
是一个用于威胁检测、安全监控、事件响应和合规监管的免费开源平台。可用于监控终端、云服务器和容器，并汇总和分析来自外部的数据。Wazuh
agent扫描被监控的系统，寻找/监控恶意软件、rootkits和一些可以的异常行为。可以检测到隐藏的文件、隐蔽的进程和未注册的网络监听，以及系统调用响应不一致等问题。
**\- Nessus Essentials:** 一个免费的主机漏洞扫描器，为漏洞评估提供一个切入点。可高速、深入的对环境进行无代理扫描。
**\- TheHive:**
TheHive的官方描述是：“一个可拓展的、开源的、免费的安全响应平台，旨在使任何信息安全从业人员能够轻松地处理安全事件，并快速地采取行动”。本质上，它是一个告警管理平台，用于管理从创建到关闭的事件告警。
**\- Cortex:** Cortex与TheHive是一个团队开发的产品，对Cortex进行了丰富的数据补充。Cortex
使用分析器获取日志中有关指标信息的其他数据。允许在第三方服务中查询 IP、URL
与文件哈希等指标，并将第三方返回的结果作为附加信息丰富告警事件。无需我们手动发送文件哈希值到VirusTotal，分析器会自动帮我们做，并将结果标记在告警上。
**\- MISP:** MISP(恶意软件信息与共享平台)是一个用于共享、存储和关联目标攻击、威胁情报、金融诈骗信息等指标的威胁情报平台。其 Feed
可以是某个组织提供的付费订阅，也可以是社区维护的开源订阅，这也是数据丰富的主要来源。MISP如今已被多个组织用于存储、知识共享，在网络安全指标，恶意软件分析方面进行协作，以确保更好的安全防护。
本节内容旨在介绍我们的工作准备，接下来的内容将会详细展开。
## 0x02 **ELK Stack** : 安装和数据传输
### 2.1 ELK Stack安装和配置
#### 2.1.1 ELK介绍
##### A. ELK是什么？
> 
##### B. ELK Basic和ELK Oss之间的区别是什么？
> 
| ELK Stack(Open Source) | ELK Stack(Basic)  
---|---|---  
License | Apache 2.0 | Elastic Basic  
Free | Yes | Yes  
Alerting | No | No  
Authentication | No | No  
Access Control | No | No  
#### 2.1.2 ELK安装
在我们的项目中，我们使用的是ELK Stack Basic (7.6.1)版本，并参考elastic.co提供的官方指南：
>  stack.html>
#### 2.1.3 ELK配置
在本节中，将介绍我们对于ELK Stack做的相关配置。
##### A. Elasticsearch配置
关于Elasticsearch的配置，都是在`/etc/elasticsearch/elasticsearch.yml`配置文件中进行的。
使用如下命令打开该配置文件：`sudo nano /etc/elasticsearch/elasticsearch.yml`
下图中是elasticsearch数据和日志的默认路径：
然后定位到配置文件中的network部分。network配置非常简单，如果你要使用默认端口的话，port不用做任何修改。但是如果要更改端口的话，取消掉注释，修改http.port的参数。
`network.bind_host:
0.0.0.0`这个配置将启用Elasticsearch服务的远程访问，可以帮助我们后续将beats(采集程序)连接到ELK Stack。
一旦修改了配置，我们需要重启Elasticsearch服务，命令如下：
`sudo systemctl restart elasticsearch`
> **声明：** 由于安全问题，不建议将network.bind_host设置为0.0.0.0，特别是在生产环境中。文中的配置只是在原型设计阶段。
##### B. Kibana配置
关于Kibana的所有配置，都是在`/etc/kibana/kibana.yml`这个配置文件中。使用如下命令打开：
`sudo nano /etc/kibana/kibana.yml`
要想配置Kibana可远程访问，我们必须配置：`server.host: