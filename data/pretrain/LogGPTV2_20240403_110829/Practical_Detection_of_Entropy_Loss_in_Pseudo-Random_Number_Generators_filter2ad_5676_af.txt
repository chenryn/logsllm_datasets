Intuitively, as explained in [BKR94], the pseudo-randomness of a function family is its ’distance’
from the ensemble of the family of all functions. This notion was originally proposed by Gol-
dreich, Goldwasser and Micali [GGM86]. They explain the notion with the following intuitive
example. Consider the set F k of all functions from {0, 1}k to {0, 1}k. This set has cardinality
2k.2k, hence to describe a (random) function from this set, we would need k.2k bits, which is im-
practical. Suppose now that we select a set of cardinal 2k, denoted ˆF k and such that ˆF k ⊂ F k.
This allows to build a family of functions, where each function is indexed with a unique index
in {0, 1}k. The family ˆF k is pseudo-random if no adversary can computationally distinguish the
functions from ˆF k from the functions in F k. Let ﬁrst formalize the notion of Keyed Family of
Functions in Deﬁnition 12.
Deﬁnition 12 (Keyed Family of Functions). A keyed family of functions is a map F : {0, 1}s ×
{0, 1}‘ → {0, 1}L, where (a) {0, 1}s is the key space of F and s is the key length (b) {0, 1}‘ is
the domain of F and ‘ is the input length and (c) {0, 1}L is the range of F and L is the output
length
Hence in a Keyed Family of Functions, each function is speciﬁed by a short, random key. As
explained, the security objective we give is that the function behaves like a random one, in the
sense that an adversary that is given the key, and is computationally bounded, cannot distinguish
the input-output behavior of the function from a random function. This property is formalized
with the security game PRF described in Figure 2.9.
$← {0, 1}s and a bit
In this security game, the challenger ﬁrst generates a random key K
$← {0, 1}, then the adversary A uses procedure funct-ror with chosen inputs. For each input,
b
the challenger generates a real output with function F or a random output and challenges A on
its capability to distinguish the output of F from random. Note that the challenger constructs
— 23 —
Chapter 2. Preliminaries
proc. initialize
$← {0, 1}s;
K
funtab ← ∅
$← {0, 1};
b
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
proc. funct-ror(x)
R0 ← F(x, K)
IF funtab[x] =⊥,
funtab[x] $← {0, 1}L
y ← funtab[x]
R1 ← y
RETURN Rb
Figure 2.9 – Procedures in Security Game PRF
a lookup table funtab for the random outputs to ensure that the evaluation of equal inputs
gives equal outputs: funtab is ﬁrst initialized with ∅, then at each oracle call, if the value does
not exists in the lookup table funtab, it is randomly created, otherwise it is directly given as a
random output.
Deﬁnition 13 (Pseudo-Random Function). A keyed family of functions F : {0, 1}s × {0, 1}‘
→ {0, 1}L is a (t, q, ε)-pseudo-random function if for any adversary A running in time at most
t, that makes q calls to procedure funct-ror, the advantage of A in game PRF is at most ε.
Hence a pseudo-random function is a function which cannot be distinguished from a random
function by any eﬃcient distinguisher. Sometimes, however, the full power of a pseudo-random
function is not needed and it is suﬃcient when the function cannot be distinguished when
queried on random values. Such objects are referred to as weak pseudo-random functions. The
associated security game WPRF is the same as PRF, except that the inputs of the pseudo-random
function F in the funct-ror procedure are not adversarially chosen but are picked at random by
the challenger. The procedures are presented in Figure 2.10.
proc. initialize
$← {0, 1}s;
K
funtab ← ∅
$← {0, 1};
b
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
proc. funct-ror
$← {0, 1}s
x
R0 ← F(x, K)
IF funtab[x] =⊥,
funtab[x] $← {0, 1}L
y ← funtab[x]
R1 ← y
RETURN (x, Rb)
Figure 2.10 – Procedures in Security Game WPRF
Deﬁnition 14 (Weak Pseudo-Random Function). A keyed family of functions F : {0, 1}s ×
{0, 1}‘ → {0, 1}L is a (t, q, ε)-weak pseudo-random function if for any adversary A running in
time at most t, that makes q calls to procedure funct-ror, the advantage of A in game WPRF is
at most ε.
2.10 Pseudo-random Permutations
As explained in Section 2.9, in a Keyed Family of Functions, each function is speciﬁed by a short,
random key. One can similarly deﬁne a Keyed Family of Permutations, where each function is
a permutation.
We can deﬁne a similar objective than for pseudo-random functions, in the sense that an adver-
sary that is given the key, and is computationally bounded, cannot distinguish the input-output
— 24 —
2.10. Pseudo-random Permutations
proc. initialize()
$← {0, 1}n;
K
funtab ← ∅;
T ← ∅;
$← {0, 1};
b
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
proc. funct-ror(x)
R0 ← F(xi, K)
IF funtab[x] =⊥,
funtab[x] $← {0, 1}n \ T
T = T ∪ funtab[xi]
y ← funtab[x]
R1 ← y
RETURN Rb
Figure 2.11 – Procedures in Security Game PRP
behavior of the permutation from a random one. This property is formalized with the security
game PRP described in Figure 2.11.
Deﬁnition 15 (Pseudo-Random Permutation). A keyed family of permutations F : {0, 1}p ×
{0, 1}n → {0, 1}p is a (t, q, ε)-pseudo-random permutation if for any adversary A running in
time at most t, that makes q calls to procedure funct-ror, the advantage of A in game PRP is at
most ε.
The following Lemma, referred to the ’PRF/PRP Switching Lemma’ shows the relation an ad-
vantage in game PRF and an advantage in game PRP. See [GB01] for a complete proof of this
Lemma.
Lemma 5. Let n ≥ 1 be an integer. Let A be an adversary that makes at most q queries. Then:
|AdvPRFA − AdvPRPA | ≤ q(q − 1)
2n+1
The bound of the previous intuitively comes from the birthday bound, because one way to
distinguish between a pseudo-random function and a pseudo-random permutation below is to
search for collisions.
— 25 —
Chapter 2. Preliminaries
— 26 —
Chapter 3
Security Models for Pseudo-random
Number Generators
Introduction
3.1
This chapter presents the state of the art security models assessing he security of pseudo-random
number generators before the introduction of the models from this thesis (see Chapters 4, 5
and 6). We give a syntaxtic formalization for security models that have been proposed. These
models consider pseudo-random number generator as a cryptographic primitive that needs to
be studied on its own, hence considering dedicated threats and security requirements. For each
model, we recall the syntactic deﬁnition of pseudo-random number generators that is used and
the goal of the adversaries that are considered and their means. We then give a description of
the security model and the associated constructions.
Security Guidelines. These guidelines concern pseudo-random number generators with in-
put.
In 1998, in two diﬀerent works, Gutman [Gut98], and Kelsey, Schneier, Wagner and
Hall [KSWH98] gave useful guidelines for the design of secure pseudo-random number genera-
tors. In these guidelines, they all consider a pseudo-random number generator with input as a
couple of algorithms, one to collect inputs and a second one to generate outputs. They considered
adversaries that have access to the output of the generator with input and adversaries that can
control inputs used to refresh the generator. They proposed guidelines to build pseudo-random
number generators. Note however that these properties are not formalized using a game playing
framework, but as guidelines that should help security application designers. Therefore they did
not insist in giving a formal statement but more in explaining concepts. To allow comparison
between these guidelines and the following security models, we propose a formalization of these
guidelines in the game playing framework presented in Section 2.4.
Security Against Chosen Input Attack, Chosen State Attack and Known Key At-
tack. This security model concerns pseudo-random number generator with input.
In 2002,
Desai, Hevia and Yin [DHY02] modelled a pseudo-random number generator with input as an
iterative algorithm, which in each iteration takes three inputs: a key, an internal state, and an
auxiliary input. The algorithm generates two outputs: random numbers and a new state. In
this model, the adversary A has diﬀerent capacities (inputs are allowed to be hidden, known
or chosen and the outputs can be hidden or known). This leads to several diﬀerent attacks,
ranging from the attacks in which A has the highest capacities (where it is allowed to set all
the inputs and to compromise all the outputs) to the attacks in which A does not compromise
any input. They proposed constructions secure in their model, that are instantiations of ANSI
X9.17 [ANS85] and of FIPS 186 [DSS00], both based on a pseudo-random function F and they
proved their security by reduction to the security of the pseudo-random function .
— 27 —
Chapter 3. Security Models for Pseudo-random Number Generators
Forward Security. This security model concerns the standard notion pseudo-random number
generators (Deﬁnition 10). In 2003, Bellare and Yee [BY03] proposed a security model to assess
Forward Security, for which a stateful pseudo-random number generator shall be designed so
that it is infeasible to recover any information on previous states or previous output blocks
from the compromise of the current state. They proposed a construction that is forward secure,
based on a secure standard pseudo-random number generator G, and they proved its security
by reduction to the security of the standard pseudo-random number generator.
τ-Resilience. This security model concerns pseudo-random number generator with input. In
2003, Barak, Shaltiel and Tromer [BST03] proposed a security model where an adversary can
have some control on the randomness source. This model explicitly explains the importance of
a randomness extractor as a core component of a pseudo-random number generator with input
and proposes an analysis of the settlement of the public parameter seed which is inherent to
this component. They deﬁned the resilience of a pseudo-random generator with input and they
proposed a construction secure in their model from universal hash functions, as described in
Section 2.3, based on linear maps.
Robustness. This security model concerns pseudo-random number generators with input. In
2005, Barak and Halevi
[BH05] proposed a security model in which a pseudo-random number
generator with input is clearly deﬁned as a couple of deterministic polynomial-time algorithms
G = (refresh, next), where the ﬁrst algorithm refresh models the update of the internal state
S with an input I containing randomness (S ← refresh(S, I)) and the second algorithm next
models the output R generation and the update of the internal state S during this generation
((S, R) ← next(S)). In their model, they formalized the robustness property that is the expected
behavior of the pseudo-random number generator with input after an internal state compromise
when A has also control of the input used to refresh the internal state. They proposed a robust
construction based on a randomness extractor and a secure standard pseudo-random number
generator and they prove its security by reduction to the security of the extractor and the
security of the standard pseudo-random number generator.
3.2 Guidelines from [Gut98, KSWH98]
3.2.1 Description
In [Gut98,KSWH98], Gutman and Kelsey, Schneier, Wagner and Hall gave useful guidelines for
the design of secure pseudo-random number generators with input. They considered a pseudo-
random number generator with input as a couple of algorithms, one to collect randomness
from sources and one to generate outputs. The randomness is collected in the internal state of
the generator, named S hereafter and outputs are generated from S. Note that they do not
formalize the properties using a game playing framework, but as guidelines that should help
security application designers, therefore they do not insist in giving a formal statement but
more in explaining concepts.
They consider the following attacks:
• Direct Cryptanalytic Attack (DCA), when adversary A is directly able to distinguish be-
tween generator outputs and random values. In this scenario, adversary A has only access
to the output of the generator.
• Input-Based Attacks (IBA), when adversary A is able to use its knowledge or some control of
the inputs I to distinguish between output and random values. They reﬁned this attack in
the following three categories: chosen input, replayed input and known input, respectively,
— 28 —
3.2. Guidelines from [Gut98,KSWH98]
where adversary A can choose the source of randomness, force the generator to reuse a
source of randomness or get access to the source of randomness, respectively.
• State Compromise Attacks (SCA), when adversary A gets access to the internal state S of
the generator.
Note that in [Gut98], Gutman considered that a state compromise should be prevented by the
environment and therefore it is not considered in the design of the generator. He therefore
proposed several security measures that shall be implemented at system level to prevent state
compromise.
To respond to DCA, IBA and SCA, they proposed the following guidelines for the design of a
secure pseudo-random number generator with input:
• To prevent DCA, a pseudo-random number generator with input should rely on standard
primitives to produce outputs.
• To prevent SCA, a pseudo-random number generator with input should (a) ensure the
entire state S changes over time, (b) enforce complete renewal of the internal state S and
(c) resist backtracking attacks (a state compromise does not give information about past
outputs). As a consequence of (b), they considered that the part of the internal state
that is used to generate outputs should be separated from the entropy pool, the generation
state should be changed only when enough entropy has been collected, according to a
conservative estimate.
• To prevent IBA, a pseudo-random number generator with input should (a) combine the
collected randomness in such a way that an adversary who gets access to the state S but
not to the collected randomness, and an adversary who gets the collected randomness but
not the state S, are both unable to get information about the next state and (b) take
advantage of every bit of entropy in the inputs it receives.
Note that these guidelines have had a strong impact on concrete pseudo-random number gen-
erators with input, as for example the Linux generators dev/random and dev/urandom, were
designed with diﬀerent pools, to collect randomness and to produce outputs, and a dedicated
entropy estimator, which controls the transfers between the pools. We give a precise assessment
of these two generators in Section 7.2.
3.2.2 Proposed Formalization
We now translate these guidelines in our game playing framework. Note that this formalization
is not part of [KSWH98,Gut98] .However, to compare these guidelines with the security models
described in the next section, we ﬁnd it relevant to propose the corresponding security model.
We ﬁrst translate their deﬁnition of a pseudo-random number generator with input and secondly
we translate their adversary descriptions in the real or random model.
As described in [KSWH98, Gut98], a pseudo-random number generator with input is a couple
of deterministic algorithms, a ﬁrst one to collect inputs and a second one to generate outputs.
To be consistent with the descriptions of other models, we name (refresh, next) this couple
of algorithms, where algorithm S0 ← refresh(S, I) takes as input an input I ∈ {0, 1}p and
the current internal state S ∈ {0, 1}n and produces a new internal state S0 ∈ {0, 1}n, and
algorithm (S0, R) ← next(S) generates an output R ∈ {0, 1}‘ and produces a new internal state
S0 ∈ {0, 1}n. In our formalization, we also denote qr the number of inputs that the pseudo-
random number generator with input is allowed to use with algorithm refresh.
— 29 —
Chapter 3. Security Models for Pseudo-random Number Generators
$← {0, 1}n;
proc. initialize()