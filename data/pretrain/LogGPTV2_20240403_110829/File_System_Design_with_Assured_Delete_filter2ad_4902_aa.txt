title:File System Design with Assured Delete
author:Radia J. Perlman
File System Design with Assured Delete
Radia Perlman
Sun Microsystems
PI:EMAIL
Abstract
This  paper  describes  a  system  that  supports  high
availability of data, until the data should be expunged,
at which time it is impossible to recover the data. This
design supports three types of assured delete; expira-
tion time known at file creation, on-demand deletion of
individual  files,  and  custom  keys  for  classes  of  data.
The obvious approach, of course, is to encrypt the data
on  nonvolatile  storage,  and  then  destroy  keys  at  the
appropriate  times.  However,  managing  ephemeral
keys; robustly keeping them for some amount of time,
and then reliably destroying every copy, is difficult. We
partition the problem so that the burden of ephemeral
key  management  can  be  outsourced  to  a  minimally
trusted  third  party  we  refer  to  as  an  “ephemerizer”,
with  negligible  performance  overhead,  resulting  in  a
file system that is easy and inexpensive to manage.
1. Introduction
With traditional systems, making data highly recov-
erable after a disaster makes it hard to reliably delete it.
Making it recoverable requires making a lot of backup
copies,  and  keeping  them  in  diverse  locations.  The
more copies are made, the harder it is to find all copies
to delete them.
This paper simultaneously solves two problems:
1. Making all state in a file system (other than files
which have been expunged) recoverable by autho-
rized parties from backup media, and 
2. making  data  that  has  been  expunged  unrecover-
able by anyone.
The  goal  of  the  design  is  to  make  the  file  system
inexpensive  and  easy  to  manage,  and  to  provide
assured  delete  without  imposing  anything  more  than
negligible performance overhead over a simple (with-
out assured delete) encrypted file system.
This  is  done  by  storing  data  encrypted,  and  then
deleting keys to make data unrecoverable. We call keys
that  must  at  some  point  be  deleted  ephemeral  keys.
Ephemeral  keys  are  much  more  difficult  to  manage
than permanent keys (keys that do not need to inten-
tionally become irrevocably lost). The reason is that to
ensure ephemeral keys are not prematurely lost, copies
must  be  made  and  stored  in  many  locations,  which
makes it difficult to ensure that all copies are deleted
after their lifetime.
To make the file system easy to manage we design it
so that ephemeral key management can be outsourced
to a minimally trusted third party which we refer to as
an ephemerizer.
As we will show, a single ephemerizer, and a single
set  of  time-based  keys  can  serve  many  mutually  dis-
trustful domains, freeing the customers it serves from
the burden of managing ephemeral keys. And since our
design  does  not  require  high  reliability  of  individual
ephemerizers  (since  we  use  a  quorum  scheme),
ephemerizers  become  easy  enough  to  manage  that
many companies, especially those that have many geo-
graphic  locations  to  store  ephemerizers,  can  manage
some or all of the ephemerizers they use.
Many  file  systems  assume  client-side  encryption/
decryption and, for instance, store files encrypted with
the  public  keys  of  the  authorized  readers.  Although
ephemerizers could be used by the clients (rather than
the  file  system),  that  would  require  interacting  with
ephemerizers on every file open. Instead, the design in
this  paper  handles  ephemerization  at  the  file  system,
which as we will see, gives dramatically better perfor-
mance while not hindering end-to-end security mecha-
nisms.
We will present designs for three different methods
of assured delete:
• time-based: files, when created, are declared to have
an expiration time. An example application for this
form of assured delete might be a medical test which
promises that results can be obtained for a period of
time, and then afterwards, all information about the
test will be expunged.
individual  file  deletion  on-demand:  files  can  be
deleted individually at any point. As we will show in
section 3.3.1, this form is dangerous, and we do not
know of compelling applications for it, although we
do show how to implement it in a scalable way.
custom  classes  that  can  be  deleted  on-demand:
sets of files can be encrypted with a custom
ephemerizer key, and policy can be applied at any
time for that key, such as deleting it, or suspending
its use until some action is taken. One example
application is protecting a spy ship that could be cap-
tured. If all data is locked with a remote key, then the
remote custom key need not be destroyed in order to
make the data unrecoverable by the enemy. Instead,
the ephemerizer can be notified to revoke use of the
key to anyone captured with the ship. Another appli-
cation of custom keys is a law firm that might need
to expunge all records associated with a particular
client once the client severs ties with the firm.
These different types of deletion can be used in com-
bination  in  the  same  file  system.  For  example,  some
files might be created with time-based assured delete,
others might be created to never need to be assuredly
deleted. These types of assured delete can also be com-
bined for the same file. For example, there might be a
custom key for a whole directory, plus files within the
directory  can  have  time-based  assured  delete.  If  the
custom key for the directory is deleted, all files in the
directory, regardless of expiration date, become unre-
coverable. As long as the custom key remains, files in
that  directory  remain  readable  until  their  expiration
date.
To  support  time-based  ephemerization,  assuming
expiration granularity of a day, and lifetimes of up to
30 years, this requires the ephemerizer to have 10,000
ephemeral  public  keys.  This  is  a  scalable  solution
because the same 10,000 ephemerizer public keys can
be uitlized by all organizations. In other words, there is
no  loss  in  security  for  mutually  distrustful  organiza-
tions  to  use  the  same  ephemerizer,  and  the  same
ephemerizer  public  keys, 
time-based
ephemerization for their file systems.
to  provide 
For  custom  keys,  the  ephemerizer  needs  to  keep  a
key for each class of file, so presumably an organiza-
tion would pay the ephemerizer to maintain the custom
keys  for  that  organization.  To  support  on-demand
secure deletion of individual files, as we will see, the
ephemerizer  only  needs  to  keep  two  public  keys  per
file system.
Ephemerizers create, advertise, and maintain ephem-
eral public keys. Ephemerizers should not make back-
ups of keys. Instead of relying on ephemerizers to be
reliable,  the  file  system  uses  multiple  ephemerizers,
with independent sets of keys. Rather than making an
ephemerizer robust by having it make n copies of its
keys, robustness is achieved instead by the file system,
by having the file system use n independent ephemer-
izers, any (quorum (see [25])) of whom can unlock the
encrypted data.
it  will  be  using  multiple 
Putting the onus of reliability on the file system, by
assuming 
independent
ephemerizers,  makes  management  of  an  ephemerizer
easier, since it is not a disaster for its clients if it loses
its keys. It is easier for the ephemerizer to avoid mak-
ing any copies of keys than it would be to attempt con-
trolled key copying.
Our design, as we will see, places minimal trust in
the ephemerizers. The protocol for requesting decryp-
tion uses  blinding [6], so  the  ephemerizer cannot see
what  it  is  decrypting.  Decryption  requests  (for  time-
based ephemeral keys) can even be done anonymously
[10].  The  only  threats  an  untrustworthy  ephemerizer
presents are to not forget the keys when it promises to,
or to forget the keys prematurely. These threats are mit-
igated  by  having  the  file  system  use  a  quorum  of
ephemerizers,  and  to  be  somewhat  careful  to  choose
reputable ephemerizers.
Our system does not, by itself, prevent users, or the
file  system,  from  copying  and  storing  the  decrypted
data, which would violate the assured deletion guaran-
tee. Our system could be coupled with a tamper-proof
reader that prevented the client from using the data in a
way other than the way our system intends. But it is not
part of our system.
2. Previous Work
There are various “disk-scrubbing” systems that con-
centrate  on  deleting  data  on  disk  [14],  [20],  by  tech-
niques such as overwriting data many times. It might
be possible to make data on a disk unrecoverable, but it
would be extremely difficult to guarantee that all cop-
ies of backup media are destroyed.
There are many designs for encrypting file systems
without assured delete, such as CFS [3], SiRius [13],
EFS [24], and Plutus [16]. Most of these assume client
side encryption/decryption. The assured delete design
in  this  paper  is  complementary  to  these  schemes.
Although individual users could use the ephemerizer,
as assumed in [21], this is inefficient, since it requires
(cid:127)
(cid:127)
interaction  with  (a  quorum  of)  ephemerizers  on  each
file  open.  The  design  in  this  paper  instead  relies  on
ephemerization being done by the shared file system,
which allows dramatic performance gains and does not
interfere with end-to-end security.
Assured  deletion  was  implemented  by  a  company
named Disappearing, Inc. [11]. Their system involved
a key manager that created and maintained a secret key
for every file. A file creator asked the key manager for
a key, and it returned a (key ID, key). The file reader
requested the key by sending the key ID. This system
requires the key manager to create and store a key for
every message,  and  the  key  manager  had  to  be  com-
pletely trusted, since it could read all messages.
There are several products being introduced for man-
aging keys for backups [19]. These involve buying one
or  more  boxes  that  maintain  keys,  usually  a  key  for
each tape. Assuming the database of keys is not backed
up  (because  if  it  is,  then  there  is  no  longer  assured
delete),  and  assuming  the  customer  has  bought  suffi-
ciently many copies of the key manager boxes so that
the database is never lost, assured deletion can be done
by deleting the key from the database. The boxes syn-
chronize  with  each  other so  that  commanding  one  of
the boxes to delete a key will cause it to tell the others
to  delete  the  key  from  their  database  as  well.  As  we
will explain, the design in our paper is less expensive
(because  the  customer  can  do  replication  using  tapes
rather than expensive boxes), and more robust, as we
will explain in section 3.3.1.
In [4], a scheme is presented in which a file system
keeps a table of keys for all files in the system. We will
call this table the F-table (where each file is encrypted
with  its  own  key  F).  The  F-table  is  backed  up,
encrypted with a key of a key manager. The key man-
ager  maintains  several  keys  (where  “several”  is  a
parameter,  say  “s”,  and  creates  new  keys  with  some
frequency (also a parameter, but let’s say one per day),
so  that  at  all  times  the  key  manager  maintains  s  key
pairs.  When  the  key  database  needs  to  be  recovered
from backup, the key manager is asked to decrypt it.
This is similar to the on-demand scheme we present
in section 3.3, with two problems that we will fix:
(cid:127) backups of the key database are readable by the key
manager if the key manager has ever been asked to
decrypt that version of the database
if a file system using this system were down for sev-
eral days (say, after a natural disaster that lasts more
than s days), then all the data would be lost, since the
key manager is forgetting keys on a predetermined
schedule.
Another difference between the on-demand scheme
in [4] and the on-demand variant of assured delete we
will  present  is  that  in  [4],  encryption  is  only  done  at
backup  time,  so  the  data  on  the  local  disk  is  unen-
crypted.  Therefore,  to  really  delete  data,  this  scheme
would  need  to  also  employ  disk-scrubbing.  The
scheme would also need an extra level of key, for hav-
ing the file system authenticate to the key manager. We
add this detail in this paper, but we also argue (see sec-
tion  3.3.1)  that  an  on-demand  scheme  is  risky,  even
with  the  enhancements  we  provide  in  this  paper,  and
therefore we would advise relying instead on the other
two  types  of  assured  delete  that  we  present  in  this
paper.
In [7], a scheme is presented in which a large trusted
store for secrets, from which individual secrets can be
expunged  and  made  unrecoverable,  can  be  achieved