(cid:39)
(cid:29)
(cid:2)
(cid:9)
(cid:30)
(cid:36)
(cid:37)
(cid:38)
(cid:35)
(cid:35)
(cid:38)
(cid:37)
(cid:36)
(cid:30)
(cid:9)
(cid:2)
(cid:29)
(cid:39)
(cid:34)
(cid:30)
(cid:11)
(cid:2)
(cid:5)
(cid:38)
(cid:30)
(cid:7)
(cid:2)
(cid:6)
(cid:15)(cid:12)(cid:27)(cid:12)(cid:1)(cid:21)(cid:26)(cid:17)(cid:31)
(cid:9)(cid:3)(cid:1)(cid:21)(cid:26)(cid:17)(cid:31)
(cid:9)(cid:24)(cid:16)(cid:14)(cid:31)
(cid:3)(cid:23)(cid:21)(cid:21)(cid:18)(cid:27)
(cid:4)(cid:18)(cid:22)(cid:12)(cid:20)
(cid:3)(cid:23)(cid:21)(cid:21)(cid:18)(cid:27)
(cid:6)(cid:23)(cid:14)(cid:12)(cid:20)
(cid:2)(cid:13)(cid:23)(cid:25)(cid:27)
(cid:8)(cid:16)(cid:21)(cid:23)(cid:27)(cid:16)
(cid:2)(cid:13)(cid:23)(cid:25)(cid:27)
(cid:1)(cid:2)(cid:4)(cid:1)(cid:3)(cid:4)(cid:2)(cid:5)(cid:9)(cid:10)(cid:6)(cid:10)(cid:6)(cid:8)(cid:7)(cid:1)(cid:3)
(cid:1)(cid:3)(cid:5)(cid:1)(cid:2)(cid:5)
(cid:6)
(cid:2)
(cid:7)
(cid:30)
(cid:38)
(cid:38)
(cid:30)
(cid:7)
(cid:2)
(cid:6)
(cid:4)(cid:18)(cid:22)(cid:12)(cid:20)(cid:1)(cid:5)(cid:2)(cid:11)
(cid:10)(cid:40)(cid:1)(cid:30)(cid:34)(cid:39)(cid:29)(cid:38)(cid:35)
(cid:4)(cid:18)(cid:22)(cid:12)(cid:20)(cid:1)(cid:5)(cid:2)(cid:11)
(cid:10)(cid:41)(cid:1)(cid:30)(cid:34)(cid:38)(cid:29)(cid:38)(cid:35)
(cid:2)(cid:5)(cid:9)(cid:10)(cid:6)(cid:10)(cid:6)(cid:8)(cid:7)(cid:1)(cid:4)
Fig. 2: Exemplifying the execution of MPTs.
Identifying transactions and snapshots. We deﬁne the LAN
(Local Abort Number) of atransaction instance T X executing
at partition X as the number of times that T aborted and
restarted at X due to local conﬂicts. Sparkle ensures that the
(i denoting the
only cause of local aborts for a transaction T X
i
ﬁnal order of T at X) is a conﬂict with some local transaction
in the ﬁnal order. It follows that when the
that precedes T X
i
last transaction, say T X
i+1, at
i
partition X ﬁnal commits, any instance of Ti+1 at X (currently
active or subsequently activated) is guaranteed not to undergo
any further local abort and to observe a locally consistent
snapshot. We call the LAN of this instance of T X
i+1 the ﬁnal
LAN of transaction T X
, that precedes a MPT, say T X
i+1.
LANs allow for tracking aborts due to local conﬂicts, but
not aborts due to remote conﬂicts. These occur in case a
sibling executing at a remote partition Y had previously sent
inconsistent data and has to be restarted. We address this issue
by associating with a sub-transaction instance T X a vector
clock, called GAV (Global Abort Vector). The GAV of T X
maintains an entry for each partition Y ∈ P and it stores: in
the entry associated with the local partition X, the LAN of T X;
for every entry associated with a remote partition Y (cid:5)= X, the
LAN of the transaction instance T Y , running at partition Y ,
from which T X received remote data.
The GAV of a transaction instance T X serves to identify the
snapshot it observed and to establish its consistency. Indeed, if
the GAV of T X contains, in each of its entry, the ﬁnal LAN of
every sibling, then T X must have observed a consistent global
snapshot — as this implies that, at every involved partition,
T X observed a local consistent snapshot. We call such a GAV
the ﬁnal GAV for T X, or simply for T , as all siblings of T
share the same ﬁnal GAV.
Determining the ﬁnal GAV. Sparkle determines the ﬁnal GAV
via a speculative conﬁrmation (SC) scheme. When T X
specu-
i
i broadcasts to its siblings a SC message
latively commits, T X
containing its GAV, and an abort set which contains the
identiﬁer and LAN of every local transaction instance aborted
by T X
i
.
Partition X can determine the ﬁnal GAV for T X
C1. T X
i−1 has been ﬁnal committed.
i only if:
C2. For each partition Y ∈ P, X received an SC message
from T Y
i−1 tagged with the ﬁnal GAV of Ti−1.
When these two conditions hold the ﬁnal GAV of Ti
is
computed as follows: for each involved partition Y , the Y -
th entry of Ti’s ﬁnal GAV is the largest LAN speciﬁed for T Y
i
in the abort set of any SC message received from Y .
The above mechanism is deﬁned in a recursive way, as the
ﬁnal GAV of Ti can only be computed once Ti−1 has ﬁnal
committed. This implies, in its turn, that the ﬁnal GAV of Ti−1
must also be known - as MPTs are ﬁnal committed only after
their ﬁnal GAV is known. The base step of this recursion is the
1 , which is guaranteed
ﬁrst transaction in the batch, noted T X
to never abort. As such, all the entries of T1’s ﬁnal GAV
can be used an initial
are necessarily equal to zero and T X
1
“anchor” to bootstrap the SC scheme: as T X
speculatively
1
commits, it can be immediately ﬁnal committed; when X
receives the SC messages from all the siblings of T1, since
these SC messages are tagged with T1’s ﬁnal GAV, X can
determine the ﬁnal GAV of T2, and so forth.
Figure 2 exempliﬁes a scenario in which T X
1
aborts the
2 due to a local conﬂict on data item k and
ﬁrst instance of T X
notiﬁes partition Y via an SC message (the SC message is sent
1 upon ﬁnal commit since, being the ﬁrst transaction of
by T X
the batch, it cannot abort and omits the speculative commit
1 ’s SC message, Y establishes
phase). Upon reception of T X
the ﬁnal GAV for T2, i.e., [1,0], and T Y
2 restarts with that GAV.
2 speculatively commits, it emits an
When this instance of T Y
SC message that is used at partition X to establish the ﬁnal
GAV for T3. After speculatively committing, the instance of
2 with GAV=[1,0] can be ﬁnal committed, since its GAV
T Y
coincides with T 2’s ﬁnal GAV.
Pseudo-code. Alg. 1 shows the pseudo-code for managing
a homogeneous batch of MPTs at partition X. To simplify
presentation we assume FIFO-ordered channels. We omit
discussing write operations, as these are managed as in SPTs.
Data structures. Each partition maintains two data-structures
for each MPT T : i) GAV: T ’s currently known Global Abort
Vector; ii) SCMSG_GAV: a map that stores, for every sibling
sub-transaction T Y , with Y ∈ P, the GAV of the most recent
SC message received at X from any instance of T Y . Addition-
∗ the following data-structures
ally, for each MPT instance T
are used: i) RS/WS, which store the transaction instance’s read-
set and write-set, respectively; ii) the ABORTSET, a map that
stores the largest LAN of any local transaction so far aborted
∗. At any time, at partition X for an MPT T there is
by T
∗ that is associated with the
at most one active instance T
∗ is associated
current GAV of T at X: upon its activation, T
with the currently known GAV for T and whenever the GAV
∗ is aborted and a new instance is restarted
of T changes, T
associated with the new GAV.
∗ reads a key, it ﬁrst checks if it previously
Read logic. When T
∗’s
wrote to or read it. In these two cases the value stored in T
write-/read-set is returned, respectively. Else, i.e., ﬁrst access
∗ fetches its value from the
to a key, if the key is local, T
local storage and broadcasts it to its siblings. This message is
169
Algorithm 1: MPT execution at partition X
Data structures associated with an MPT T :
Array of int[numPartitions] GAV
(cid:2) Current known GAV of T .
Array of GAV[numPartitions] SCMSG_GAV (cid:2) GAVs of the last SC
(cid:2) ... msg received from each partition
Data structures associated with every instance T ∗ of an MPT T :
(cid:2) read- and write-set of T ∗.
map RS,WS
map ABORTSET
(cid:2) Map storing the LANs of any
(cid:2)...local tx. instance aborted by T ∗.
1 read(TxInstance T ∗, Keyk ):
(cid:2) Check if T ∗ wrote to k.
(cid:2) Check if T ∗ already read k.
if k ∈ T ∗.WS return T ∗.WS.get(k)
if k /∈ T ∗.RS
if k is local
else
(cid:2) Store loc. value in read-set
T ∗.RS.set(k, localRead())
send  to T ’s siblings
wait receive  s.t. LAN ≥ T .GAV[k.locPart()]
T ∗.RS.set(k,v)
(cid:2) Store remote value in read-set.
if LAN > T .GAV[k.locPart()] (cid:2) Remote sibling has aborted.
(cid:2) Remote key, wait for its value from corr. partition.
remoteAbort(T , k.locPart(), LAN, )
(cid:2) T ∗ aborts T (cid:3)∗.
13 localAbort(TxInstance T ∗,TxInstance T (cid:3)∗)
return T.RS.get(k)
T (cid:3).GAV[X]++
T ∗.ABORTSET.add()
restart a new instance of T (cid:3), cloning its RS from T (cid:3)∗...
14
15
16
17
18 remoteAbort(Tx T , Partition Y , int lan, ):
19
20
21
22
restart a new instance of T (cid:3), cloning its RS from T (cid:3)∗...
T .GAV[Y ]=lan
if ∃ an active instance T ∗
...and removing any local key from it
...and removing from it any key received from Y except for k
(cid:2) Update LAN of tx T at partition Y .
23 tryCommit(TxInstance T ∗):
(cid:2) Spec. apply T’s writes to local keys.
(cid:2) This tx. instance has the ﬁnal GAV if it did not abort so far.
speculativeCommit(T ∗)
send  to T’s siblings
waitFinalGAV(T )
ﬁnalCommit(T ∗)
T (cid:3) ← T .getPrecedingTx()
wait until T (cid:3) has ﬁnal committed
∀Y ∈ T .remotePartitions()
24
25
26
27
28
29 waitFinalGAV(Tx T ):
30
31
32
wait until T (cid:3).GAV = T (cid:3).SCMSG_GAV.get(Y)
33
34 upon receiving  from partition Y
T .SCMSG_GAV[Y ]← GAVmsg
(cid:2) Store GAV of last SC from Y .
35
for each  ∈ ABORTSET (cid:2) For each tx aborted by T .
36
if LAN > T (cid:3).GAV[Y ]:
(cid:2) Skip aborted txs we already know of
37
38
remoteAbort(T (cid:3), Y , LAN,)
(cid:2) Cond. C1.
(cid:2) Cond. C2.
2
3
4
5
6
7
8
9
10
11
12
tagged with the transaction instance’s LAN, which coincides
with the local entry of the GAV of T . If the key is hosted at a
∗ waits for the key’s value from Y
remote partition, say Y , T
and checks if the received LAN is larger than the Y -th entry of
∗ had previously received stale
the GAV of T . In this case, T
data from a sibling running at Y , which later aborted. Thus,
∗ is aborted and restarted. If the LAN of the value received
T
from Y coincides with the Y -th entry of the GAV of T at X,
instead, the value is added to the read-set and is returned.
∗ aborts a local transaction instance
Handling aborts. When T
(cid:2), i.e., its LAN, is
(cid:2)∗ (l. 13), the local entry of the GAV of T
T
(cid:2)∗ and its LAN are added to the ABORTSET
increased. Next, T
(cid:2) is activated. The read-set of
of T
this new instance is initialized with a clone of the read-set
of its previous “incarnation”, purged of any local data. This
ensures that the new transaction instance retains any remote
data received so far, avoiding re-fetching it remotely.
∗ and a new instance of T
When X learns about the abort at a remote partition Y
of an instance of transaction T with a given LAN (l. 18), X
accordingly updates the Y -th entry of T ’s GAV and aborts any