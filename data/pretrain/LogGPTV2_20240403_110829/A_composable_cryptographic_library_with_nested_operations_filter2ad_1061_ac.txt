similar to the Dolev-Yao model are built up or decomposed by a se-
quence of commands. For instance there is a command gen nonce
to create a nonce, encrypt to encrypt a message, and list to com-
bine several messages into a list. Moreover, there are commands
store and retrieve to store real-world messages (bitstrings) in the
library and to retrieve them by a handle. Thus other commands can
assume that everything is addressed by handles. We only allow lists
to be signed and transferred, because the list-operation is a conve-
nient place to concentrate all veriﬁcations that no secret items are
put into messages. Altogether, we have
basic cmds := {get type, get len, store, retrieve, list, list proj,
gen nonce, gen sig keypair, sign, verify, pk of sig, msg of sig,
gen enc keypair, encrypt, decrypt, pk of enc}.
The commands not yet mentioned have the following meaning:
get type and get len retrieve the type and abstract length of a
message; list proj retrieves a handle to the i-th element of a list;
gen sig keypair and gen enc keypair generate key pairs for signa-
tures and encryption, respectively, initially with handles for only
the user u who input the command; sign, verify, and decrypt have
the obvious purpose, and pk of sig, msg of sig; and pk of enc re-
trieve a public key or message, respectively, from a signature or ci-
phertext. (Retrieving public keys will be possible in the real cryp-
tographic library because we tag signatures and ciphertexts with
public keys as explained above.)
We only present the details of how TH(H) evaluates such basic
commands based on its abstract state for two examples, nonce gen-
eration and encryption; see the full version [10] for the complete
deﬁnition. We assume that the command is entered at a port inu ?
with u ∈ H ∪ {a}. Basic commands are local, i.e., they produce
a result at port outu ! and possibly update the database D, but do
not produce outputs at other ports. They also do not touch handles
for participants v (cid:20)= u. The functions nonce len
, and
max len are length functions and the message-length bound from
the system parameter L.
For nonces, TH(H) just creates a new entry with type nonce,
no arguments, a handle for user u, and the abstract nonce length.
This models that in the real system nonces are randomly chosen
bitstrings of a certain length, which should be all different and not
guessable by anyone else than u initially. It outputs the handle to
u.
, enc len
∗
∗
• Nonce Generation: nhnd ← gen nonce().
Set nhnd := curhndu ++ and
D :⇐ (ind := size++, type := nonce, arg := (),
hnd u := n
hnd
, len := nonce len
∗(k)).
The inputs for public-key encryption are handles to the public key
and the plaintext list. TH(H) veriﬁes the types (recall the notation
D[pred ]) and veriﬁes that the ciphertext will not exceed the maxi-
mum length. If everything is ok, it makes a new entry of type enc,
with the indices of the public key and the plaintext as arguments, a
handle for user u, and the computed length. The fact that each such
entry is new models probabilistic encryption, and the arguments
model the highest layer of the corresponding Dolev-Yao term.
• Public-Key Encryption: chnd ← encrypt(pkhnd, lhnd).
Let pk := D[hnd u = pkhnd ∧ type = pke].ind and
l := D[hnd u = lhnd ∧ type = list].ind and length :=
∗(k, D[l].len ). If length > max len(k) or pk = ↓
enc len
or l = ↓, then return ↓. Else set chnd := curhndu ++ and
D :⇐ (ind := size++, type := enc, arg := (pk , l),
hnd u := c
hnd
, len := length).
Secondly, we have a set send cmds
3.2.2 Honest Send Commands
:= {send s, send a,
send i} of honest send commands for sending messages on chan-
nels of different degrees of security. As an example we present the
details of the most important case, insecure channels.
• send i(v, lhnd), for v ∈ {1, . . . , n}.
Let l ind := D[hnd u = lhnd ∧ type = list].ind. If l ind (cid:20)= ↓,
output (u, v, i, ind2hnda(l ind)) at outa!.
The used algorithm ind2hndu retrieves the handle for user u to
the entry with the given index if there is one, otherwise it assigns a
new such handle as curhndu ++. Thus this command means that the
database D now stores that this message is known to the adversary,
and that the adversary learns by the output that user u wanted to
send this message to user v.
Most protocols should only use the other two send commands,
i.e., secret or authentic channels, for key distribution at the be-
ginning. As the channel type is part of the send-command name,
syntactic checks can ensure that a protocol designed with the ideal
cryptographic library fulﬁlls such requirements.
3.2.3 Local Adversary Commands
:= {adv garbage,
Thirdly, we have a set adv local cmds
adv invalid ciph, adv transform sig, adv parse} of local adver-
sary commands. They model tolerable imperfections of the real
system, i.e., actions that may be possible in real systems but that
are not required. First, an adversary may create invalid entries of
a certain length; they obtain the type garbage. Secondly, invalid
ciphertexts are a special case because participants not knowing the
secret key can reasonably ask for their type and query their public
key, hence they cannot be of type garbage. Thirdly, the security
deﬁnition of signature schemes does not exclude that the adversary
transforms signatures by honest participants into other valid sig-
natures on the same message with the same public key. Finally,
we allow the adversary to retrieve all information that we do not
explicitly require to be hidden, which is denoted by a command
adv parse. This command returns the type and usually all the ab-
stract arguments of a value (with indices replaced by handles), e.g.,
parsing a signature yields the public key for testing this signature,
the signed message, and the value of the signature counter used for
this message. Only for ciphertexts where the adversary does not
know the secret key, parsing only returns the length of the cleartext
instead of the cleartext itself.
Fourthly, we have a set adv send cmds
3.2.4 Adversary Send Commands
:= {adv send s,
adv send a, adv send i} of adversary send commands, again mod-
eling different degrees of security of the channels used. In contrast
to honest send commands, the sender of a message is an additional
input parameter. Thus for insecure channels the adversary can pre-
tend that a message is sent by an arbitrary honest user.
3.3 A Small Example
Assume that a cryptographic protocol has to perform the step
u → v : encpkev (signsksu
(m, N1), N2),
where m is an input message and N1, N2 are two fresh nonces.
Given our library, this is represented by the following sequence
of commands input at port inu ?. We assume that u has already
received a handle pkehnd
to the public encryption key of v, and
created signature keys, which gave him a handle skshnd
u .
v
1. mhnd ← store(m).
1 ← gen nonce().
2. N hnd
1 ← list(mhnd, N hnd
3. lhnd
4. sighnd ← sign(skshnd
2 ← gen nonce().
5. N hnd
2 ← list(sighnd, N hnd
6. lhnd
).
7. enchnd ← encrypt(pkehnd
v , lhnd
8. mhnd ← list(enchnd).
9. send i(v, mhnd).
1
u , lhnd
).
1 ).
2
2 ).
Note that the entire term is constructed by a local interaction of user
u and the ideal library, i.e., the adversary does not learn anything
about this interaction until Step 8. In Step 9, the adversary gets an
output (u, v, i, mhnd
for him to the resulting
entry. In the real system described below, the sequence of inputs
for constructing and sending this term is identical, but real crypto-
graphic operations are used to build up a bitstring m until Step 8,
and m is sent to v via a real insecure channel in Step 9.
) with a handle mhnd
a
a
4. REAL CRYPTOGRAPHIC LIBRARY
The real system is parameterized by a digital signature scheme S
and a public-key encryption scheme E. The ranges of all functions
are {0, 1}+ ∪ {↓}. The signature scheme has to be secure against
existential forgery under adaptive chosen-message attacks [34].
This is the accepted security deﬁnition for general-purpose sign-
ing. The encryption scheme has to fulﬁll that two equal-length
messages are indistinguishable even in adaptive chosen-ciphertext
attacks. Chosen-ciphertext security has been introduced in [50] and
formalized as “IND-CCA2” in [13]. It is the accepted deﬁnition for
general-purpose encryption. An efﬁcient encryption system secure
in this sense is [22]. Just like the ideal system, the real system is
(cid:2)
parameterized by a tuple L
4.1 Structures
The intended structure of the real cryptographic library consists
of n machines {M1, . . . , Mn}. Each Mu has ports inu ? and outu !,
so that the same honest users can connect to the ideal and the real
library. Each Mu has three connections netu,v,x to each Mv for
x ∈ {s, a, i}. They are called network connections and the corre-
sponding ports network ports. Network connections are scheduled
by the adversary.
of length functions and bounds.
The actual system is a standard cryptographic system as deﬁned
in [49] and sketched in Section 2. Any subset of the machines may
be corrupted, i.e., any set H ⊆ {1, . . . , n} can denote the indices
of correct machines. The channel model means that in an actual
structure, an honest intended recipient gets all messages output at
network ports of type s(secret) and a (authentic) and the adversary
gets all messages output at ports of type a and i (insecure). Fur-
thermore, the adversary makes all inputs to a network port of type
i. This is shown in Figure 2.
SH
inu
outu
Mu
Du
H
netu,v,s
netu,v,a
netu,v,i
inV
outV
Mv
Dv
a
netu,v,a
a
netu,v,i
A
Figure 2: Connections from a correct machine to another in the
real system.
4.2 States of a Machine
The main data structure of Mu is a database Du that contains
implementation-speciﬁc data such as ciphertexts and signatures
produced during a system run, together with the handles for u and
the type as in the ideal system, and possibly additional internal at-
tributes. Thus each entry x ∈ Du is of the form
(hnd u , word , type, add arg ).
• hnd u ∈ N0 is the handle of x and consecutively numbers all
entries in Du.
• word ∈ {0, 1}+, called word, is the real cryptographic rep-
resentation of x.
• type ∈ typeset ∪ {null} is the type of x, where null denotes
that the entry has not yet been parsed.
• add arg is a list of additional arguments. Typically it is (),
only for signing keys it contains the signature counter.
Similar to the ideal system, Mu maintains a counter curhndu
over N0 denoting the current number of elements in Du. New en-
tries x always receive hnd u := curhndu ++, and x.hnd u is never
changed.
4.3 Inputs and their Evaluation
Now we describe how Mu evaluates individual inputs. Inputs at
port inu ? should be basic commands and honest send commands
as in the ideal system, while network inputs can be arbitrary bit-
strings. Often a bitstrings has to be parsed. This is captured by a
functional algorithm parse, which outputs a pair (type, arg ) of a
type ∈typeset and a list of real arguments, i.e., of bitstrings. This
corresponds to the top level of a term, similar to the abstract ar-
guments in the ideal database D. By “parse mhnd” we abbrevi-
ate that Mu calls (type, arg ) ← parse(Du[mhnd].word ), assigns
Du[mhnd].type := type if it was still null, and may then use arg.
4.3.1 Basic Commands
Basic commands are again local, i.e., they do not produce out-
puts at network ports. The basic commands are implemented by the
underlying cryptographic operations with the modiﬁcations moti-
vated in Section 1.3. For general unambiguousness, not only all
cryptographic objects are tagged, but also data and lists. Similar to
the ideal system, we only show two examples of the evaluation of
basic commands, and additionally how ciphertexts are parsed. All
other commands can be found in the full version [10].
In nonce generation, a real nonce n is generated by tagging a
(cid:2)
random bitstring n
of a given length with its type nonce. Further,
a new handle for u is assigned and the handle, the word n, and the
type are stored without additional arguments.
• Nonce Generation: nhnd ← gen nonce().
(cid:2) ←R {0, 1}nonce len(k), n := (nonce, n
Let n
curhndu ++ and Du :⇐ (nhnd, n, nonce, ()).
(cid:2)), nhnd :=
For the encryption command, let Epk (m) denote probabilistic
encryption of a string m with the public key pk in the underlying
encryption system E. The parameters are ﬁrst parsed in case they
have been received over the network, and their types are veriﬁed.