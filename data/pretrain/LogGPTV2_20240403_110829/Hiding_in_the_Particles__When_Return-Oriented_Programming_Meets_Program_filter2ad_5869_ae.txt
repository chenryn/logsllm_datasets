the simpler functions as k increases, with a higher processing
time compared to when they were cracked for a smaller k.
2) Code Coverage: The last column of Table II lists for
how many functions S2E covered all
the CFG split and
join points annotated by Tigress and reachable in the native
counterparts (as the functions are relatively small, we consider
coverage an “all or nothing” goal like in [14], [38]). As seen
in §III-A, we recall that secret ﬁnding may not require full
coverage (neither achieving G2 is sufﬁcient for G1). For most
VM conﬁgurations, the functions for which S2E fully explored
the original CFG are slightly more than those for which
it recovered the secret. ROPk already for k = 0.05 impedes
achieving G2 for nearly half of the functions, and leaves only
a handful (6-11) within the reach of S2E for higher k values.
C. Deployability
To conclude our evaluation, we investigate how our methods
can cope with real-world code bases in three respects: efﬁcacy
of the rewriting, run-time overhead for CPU-intensive code,
and an obfuscation case study on a popular encoding function.
1) Coverage: We start by assessing how our implemen-
tation can handle the code base of the coreutils (v8.28,
compiled with gcc 6.3.0 -O1). Popular in software testing,
this suite is a suitable benchmark thanks to its heterogeneous
code patterns. Using symbol and size information, we identify
1354 unique functions across its corpus of 107 programs. We
skip the 119 functions shorter than the 22 bytes the pivoting
sequence requires7 (§IV-B3). Our rewriter could transform
1175 over 1235 remaining functions (95.1%, or a 0.801
fraction if normalized by size). 40 failures happened during
register allocation as one spilling slot was not enough to cope
with high pressure (§IV-C), 19 for code like push rsp and
push qword [rsp + imm] that the translation step does
not handle yet (§IV-B1), and 1 for failed CFG reconstruction.
As informal validation of functional correctness, we run the
test suite of the coreutils over the obfuscated program in-
stances, obtaining no mismatches in the output they compute.
2) Overhead: Albeit a common assumption is that heavy-
duty obfuscation target one-off or infrequent computations, we
also seek to study performance overhead aspects. We consider
the clbg suite [73] used in compiler research to benchmark
the effects of code transformations (e.g., [74], [75]). As a
reference we consider 2VM-IMPlast as it was the fastest
conﬁguration for double virtualization with implicit VPC loads
(1VM is too easy to circumvent, and 3VM brings prohibitive
overheads, i.e., over 5-6 orders of magnitude in our tests).
Figure 5 uses a stacked barchart layout to present slow-
downs for ROPk, as its overhead can only grow with k. With
the exception of sp-norm that sees repeated pivoting events
from a ROP tight loop calling a short-lived ROP subroutine,
ROPk is consistently faster than 2VM-IMPlast for k≤ 0.5, and
no slower than 1.81x (b-trees that repeatedly calls malloc
and free) when in the most expensive setting k = 1.00.
3) Case Study: Finally, we study resilience and slowdowns
of selected obfuscation conﬁgurations on the reference im-
plementation of the popular base64 encoding algorithm [76].
base64 features byte manipulations and table lookups relevant
for transformation code of variable complexity that users may
wish to obfuscate. An important consideration is that in the
presence of table lookups, using concrete values for input-
dependent pointers is no longer effective (but even counter-
productive) for DSE to explore relevant states. We thus opt
for the per-page theory-of-arrays ( [11], [77]) memory model
of S2E. This choice allows S2E to recover a 6-byte input in
about 102 seconds for the original implementation, 180 for
2VM-IMPlast, 281 for 2VM-IMPall, and 1622 for 3VM-IMPlast.
A budget of 8 hours was not sufﬁcient for 3VM-IMPall,
as well as for ROPk already for k = 0 (when only P1 is
enabled). As anticipated in §V-E, the aliasing from P1 on
RSP updates can impact the handling of memory in DSE
executors in ways that the synthetic functions of §VII-B did
not (as they do not use table lookups). As for code slowdowns,
ROPk seems to bring rather tolerable execution times: for a
rough comparison, execution takes 0.299ms for ROP0.25 and
1.791ms for ROP1.00, while for VM settings we measured
1.63ms for 2VM-IMPlast, 347ms for 2VM-IMPall, 668ms for
3VM-IMPlast and 2211s for the unpractical 3VM-IMPall.
VIII. CONCLUDING REMARKS
Adding to the appealing properties of ROP against reverse
engineering that we discussed throughout the paper, the ex-
perimental results lead us to believe that our approach can:
1) hinder many popular deobfuscation approaches, as well as
symbiotic combinations aimed at ameliorating scalability;
2) signiﬁcantly increase the resources needed by automated
techniques that remain viable, with slowdowns ≥ 50x for
the vast majority of the 72 targets for both end goals G1-2;
3) bring multiple conﬁguration opportunities for resilience
(and overhead) goals to the program protection landscape.
While obfuscation research is yet to declare a clear winner
and automated attacks keep evolving, our technique is also
orthogonal to most other code obfuscations, meaning it can
6We do not report data for 1VM and ROPk=0 programs since S2E breaks
them with no appreciable slowdown w.r.t. their non-obfuscated counterparts.
7While we could have added a trampoline to some code cavity large enough
to hold it, these functions appear to be stubs of unappealing complexity.
11
be applied on top of already obfuscated code (§IV-C). We
have followed established practices [13] of analyzing our
obfuscation individually and on function units, yet in future
work we would like to expand both points: namely, studying
mutually reinforcing combinations with other obfuscations,
and applying ROP rewriting inter-procedurally, removing the
stack-switching step during transfers between ROP functions,
since our design allows that. Finally, to optimize composition
of symbolic registers when instantiating P3, we may look at
def-use chains as suggested by [14] for FOR cases, exploring
analyses like [65] necessary to obtain the required information.
REFERENCES
[1] V. van der Veen, N. dutt Sharma, L. Cavallaro, and H. Bos,
“Memory errors: The past,
in
Research in Attacks, Intrusions, and Defenses. Berlin, Heidelberg:
Springer Berlin Heidelberg, 2012, pp. 86–106. [Online]. Available:
https://doi.org/10.1007/978-3-642-33338-5 5
the present,
and the
future,”
[2] H. Shacham, “The geometry of innocent ﬂesh on the bone: Return-
into-libc without function calls (on the x86),” in Proc. of the 14th ACM
Conf. on Comp. and Comm. Sec., ser. CCS ’07, 2007, pp. 552–561.
[Online]. Available: http://doi.acm.org/10.1145/1315245.1315313
[3] D. Andriesse, H. Bos,
and A. Slowinska,
Implicit
code integrity veriﬁcation using return-oriented programming,” in
Proceedings of the 45th Annual IEEE/IFIP International Conference on
Dependable Systems and Networks, ser. DSN ’15, 2015, pp. 125–135.
[Online]. Available: https://doi.org/10.1109/DSN.2015.12
“Parallax:
[4] T. Wang, K. Lu, L. Lu, S. Chung, and W. Lee, “Jekyll on iOS: When
benign apps become evil,” in Proceedings of the 22nd USENIX Security
Symposium, ser. SEC ’13, 2013, pp. 559–572.
[5] P. Borrello, E. Coppa, D. C. D’Elia, and C. Demetrescu, “The
ROP needle: Hiding trigger-based injection vectors via code reuse,”
in Proceedings of
the 34th ACM/SIGAPP Symposium on Applied
Computing, ser. SAC ’19, 2019, pp. 1962–1970. [Online]. Available:
https://doi.org/10.1145/3297280.3297472
[6] FireEye, “The Number of the Beast,” https://www.ﬁreeye.com/blog/
threat-research/2013/02/the-number-of-the-beast.html, 2013, online; ac-
cessed 11 June 2020.
[7] B. Yadegari, B. Johannesmeyer, B. Whitely, and S. Debray, “A generic
approach to automatic deobfuscation of executable code,” in 2015 IEEE
Symp. on Sec. and Privacy, ser. SP ’15, 2015, pp. 674–691. [Online].
Available: https://doi.org/10.1109/SP.2015.47
[8] T. Blazytko, M. Contag, C. Aschermann, and T. Holz, “Syntia: Synthe-
sizing the semantics of obfuscated code,” in Proc. of the 26th USENIX
Security Symposium, ser. USENIX Security 17, 2017, pp. 643–659.
[9] M. Graziano, D. Balzarotti, and A. Zidouemba, “ROPMEMU:
A framework for the analysis of complex code-reuse attacks,” in
Proceedings of 11th Asia Conference on Computer and Communications
Security, ser. ASIACCS ’16, 2016, pp. 47–58. [Online]. Available:
http://doi.acm.org/10.1145/2897845.2897894
[10] D. C. D’Elia, E. Coppa, A. Salvati, and C. Demetrescu, “Static
the 12th European
[Online].
Analysis of ROP Code,” in Proceedings of
Workshop on Systems Security, ser. EuroSec ’19, 2019.
Available: http://doi.acm.org/10.1145/3301417.3312494
[11] R. Baldoni, E. Coppa, D. C. D’Elia, C. Demetrescu, and I. Finocchi,
“A Survey of Symbolic Execution Techniques,” ACM Computer
Surveys, vol. 51, no. 3, pp. 50:1–50:39, 5 2018. [Online]. Available:
http://doi.acm.org/10.1145/3182657
[12] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz, “SoK: Automated
software diversity,” in Proceedings of
the 2014 IEEE Symposium
on Security and Privacy, ser. SP ’14, 2014, pp. 276–291. [Online].
Available: https://doi.org/10.1109/SP.2014.25
[13] S. Banescu and A. Pretschner, “Chapter ﬁve - A tutorial on software
obfuscation,” Advances in Computers, vol. 108, pp. 283–353, 2018.
[Online]. Available: https://doi.org/10.1016/bs.adcom.2017.09.004
[14] M. Ollivier, S. Bardin, R. Bonichon, and J.-Y. Marion, “How to
kill symbolic deobfuscation for free (or: Unleashing the potential
of path-oriented protections),” in Proc. of
the 35th Annual Comp.
Security Applications Conference, ser. ACSAC ’19, 2019, pp. 177–189.
[Online]. Available: https://doi.org/10.1145/3359789.3359812
12
[15] S. R. Subramanya and B. K. Yi, “Digital rights management,” IEEE
Potentials, vol. 25, no. 2, pp. 31–34, 2006.
[16] S. Schrittwieser, S. Katzenbeisser, J. Kinder, G. Merzdovnik, and
E. Weippl, “Protecting software through obfuscation: Can it keep pace
with progress in code analysis?” ACM Computer Surveys, vol. 49,
no. 1, Apr. 2016. [Online]. Available: https://doi.org/10.1145/2886012
[17] C. Wang, J. Hill, J. C. Knight, and J. W. Davidson, “Protection
software-based survivability mechanisms,” in Proceedings of
of
the 2001 International Conference on Dependable Systems and
Networks, ser. DSN ’01, 2001, pp. 193–202. [Online]. Available:
https://doi.org/10.1109/DSN.2001.941405
[18] S. Chow, Y. X. Gu, H. Johnson, and V. A. Zakharov, “An approach
to the obfuscation of control-ﬂow of sequential computer programs,”
the 4th International Conference on Information
in Proceedings of
Security, ser.
[Online].
Available: https://doi.org/10.1007/3-540-45439-X 10
ISC ’01, vol. 2200, 2001, pp. 144–155.
[19] S. K. Udupa, S. K. Debray, and M. Madou, “Deobfuscation: Reverse
engineering obfuscated code,” in Proc. of the 12th Working Conference
on Reverse Engineering, ser. WCRE ’05, 2005, pp. 45–54. [Online].
Available: https://doi.org/10.1109/WCRE.2005.13
[20] B. Johansson, P. Lantz, and M. Liljenstam, “Lightweight dispatcher
constructions for control ﬂow ﬂattening,” in Proc. of the 7th Software
Security, Protection, and Reverse Engineering Workshop, ser. SSPREW-
7, 2017. [Online]. Available: https://doi.org/10.1145/3151137.3151139
[21] J. Kinder, “Towards static analysis of virtualization-obfuscated binaries,”
the 2012 19th Working Conference on Reverse
in Proceedings of
Engineering, ser. WCRE ’12. USA: IEEE Computer Society, 2012,
pp. 61–70. [Online]. Available: https://doi.org/10.1109/WCRE.2012.16
[22] B. Yadegari and S. Debray, “Symbolic execution of obfuscated code,”
in Proc. of
the 22nd ACM SIGSAC Conference on Computer and
Communications Security, ser. CCS ’15, 2015, pp. 732–744. [Online].
Available: https://doi.org/10.1145/2810103.2813663
[23] J. Salwan, S. Bardin, and M. Potet, “Symbolic deobfuscation: From
virtualized code back to the original,” in Proc. of the 15th Int. Conf.
on Detection of Intrusions and Malware, and Vulnerability Assessment,
ser. DIMVA ’18, vol. 10885, 2018, pp. 372–392. [Online]. Available:
https://doi.org/10.1007/978-3-319-93411-2 17
[24] M. I. Sharif, A. Lanzi, J. T. Gifﬁn, and W. Lee, “Automatic reverse
engineering of malware emulators,” in Proc. of
the 30th IEEE
Symposium on Security and Privacy, ser. SP ’09, 2009, pp. 94–109.
[Online]. Available: https://doi.org/10.1109/SP.2009.27
[25] K. Coogan, G. Lu, and S. Debray, “Deobfuscation of virtualization-
obfuscated software: A semantics-based approach,” in Proceedings
the 18th ACM Conference on Computer and Communications
of
Security, ser. CCS ’11, 2011, pp. 275–284.
[Online]. Available:
https://doi.org/10.1145/2046707.2046739
[26] C. S. Collberg, C. D. Thomborson, and D. Low, “A taxonomy of
obfuscating transformations,” Tech. Rep., 1997.
[27] G. Ramalingam, “The undecidability of aliasing,” ACM Trans. on Prog.
Lang. and Sys., vol. 16, no. 5, pp. 1467–1471, Sep. 1994. [Online].
Available: https://doi.org/10.1145/186025.186041
[28] E. J. Schwartz, T. Avgerinos, and D. Brumley, “Q: Exploit hardening
made easy,” in Proceedings of the 20th USENIX Conference on Security,
ser. SEC ’11. USENIX Association, 2011.
[29] M. Angelini, G. Blasilli, P. Borrello, E. Coppa, D. C. D’Elia,
S. Ferracci, S. Lenti, and G. Santucci, “ROPMate: Visually Assisting
the Creation of ROP-based Exploits,” in Proceedings of the 15th IEEE
Symposium on Visualization for Cyber Security, ser. VizSec ’18, 2018.
[Online]. Available: https://doi.org/10.1109/VIZSEC.2018.8709204
[30] R. Roemer, E. Buchanan, H. Shacham, and S. Savage, “Return-oriented
languages, and applications,” ACM Trans.
programming: Systems,
on Inf. and Sys. Sec., vol. 15, no. 1, 2012. [Online]. Available:
https://doi.org/10.1145/2133375.2133377
[31] A. Wailly, A. Souchet, J. Salwan, A. Verez, and T. Romand, “Au-
tomated Return-Oriented Programming Chaining,” https://github.com/
awailly/nrop, 2014, online; accessed 11 June 2020.
[32] T. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang, “Jump-oriented
programming: A new class of code-reuse attack,” in Proceedings of the
6th ACM Symposium on Information, Computer and Communications
Security, ser. ASIACCS ’11, 2011, pp. 30–40. [Online]. Available:
https://doi.org/10.1145/1966913.1966919
[33] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A. Sadeghi, and
T. Holz, “Counterfeit object-oriented programming: On the difﬁculty
of preventing code reuse attacks in C++ applications,” in 2015 IEEE
Symp. on Sec. and Priv., ser. SP ’15, 2015, pp. 745–762. [Online].
Available: https://doi.org/10.1109/SP.2015.51
[34] R. Hund, T. Holz, and F. C. Freiling, “Return-oriented rootkits: Bypass-
ing kernel code integrity protection mechanisms,” in Proceedings of the
18th USENIX Security Symposium. USENIX Association, 2009, pp.
383–398.
[35] S. Vogl, J. Pfoh, T. Kittel, and C. Eckert, “Persistent data-only malware:
Function hooks without code,” in 21st Annual Network and Distributed
System Security Symposium, ser. NDSS ’14, 2014.
[36] M. Schwarz, S. Weiser, and D. Gruss, “Practical enclave malware with
Intel SGX,” in Detection of Intrusions and Malware, and Vulnerability
Assessment, ser. DIMVA ’19, 2019, pp. 177–196. [Online]. Available:
https://doi.org/10.1007/978-3-030-22038-9 9
[37] C. Ntantogian, G. Poulios, G. Karopoulos,
and C. Xenakis,
“Transforming malicious code to rop gadgets for antivirus evasion,”
IET Inform. Security, vol. 13, no. 6, pp. 570–578, 2019. [Online].
Available: https://doi.org/10.1049/iet-ifs.2018.5386
[38] S. Banescu, C. S. Collberg, V. Ganesh, Z. Newsham, and A. Pretschner,
“Code obfuscation against symbolic execution attacks,” in Proceedings
of the 32nd Annual Conference on Computer Security Applications,
ser. ACSAC ’16. ACM, 2016, pp. 189–200. [Online]. Available:
https://doi.org/10.1145/2991079.2991114
[39] S. Banescu, C. Collberg, and A. Pretschner, “Predicting the resilience
of obfuscated code against symbolic execution attacks via machine
learning,” in Proc. of the 26th USENIX Security Symposium, 2017, pp.
661–678.
[40] D. Xu, J. Ming, Y. Fu, and D. Wu, “VMHunt: A veriﬁable approach
to partially-virtualized binary code simpliﬁcation,” in Proceedings of
the 2018 ACM SIGSAC Conference on Computer and Communications
Security, ser. CCS ’18, 2018, pp. 442–458.
[Online]. Available:
https://doi.org/10.1145/3243734.3243827
[41] D. Mu, J. Guo, W. Ding, Z. Wang, B. Mao, and L. Shi, “ROPOB: Obfus-
cating Binary Code via Return Oriented Programming,” in Security and
Privacy in Communication Networks, ser. SecureComm ’17. Springer
International Publishing, 2018, pp. 721–737.