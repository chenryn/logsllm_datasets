title:Detecting Insecure Code Patterns in Industrial Robot Programs
author:Marcello Pogliani and
Federico Maggi and
Marco Balduzzi and
Davide Quarta and
Stefano Zanero
Detecting Insecure Code Patterns in Industrial Robot Programs
Marcello Pogliani
Politecnico di Milano
PI:EMAIL
Federico Maggi
Trend Micro Research
PI:EMAIL
Marco Balduzzi
Trend Micro Research
PI:EMAIL
Davide Quarta
EURECOM
PI:EMAIL
Abstract
Industrial robots are complex and customizable machines that can
be programmed with proprietary domain-specific languages. These
languages provide not only movement instructions, but also access
to low-level system resources such as the network or the file system.
Although useful, these features can lead to taint-style vulnerabilities
and can be misused to implement malware—on par with general-
purpose programming languages. In this paper, we analyze the
languages of 8 leading industrial robot vendors, systematize their
technical features, and discuss cases of vulnerable and malicious
uses. We then describe a static source-code analyzer that we created
to analyze robotic programs and discover insecure or potentially
malicious code paths. We focused our proof-of-concept implementa-
tion on two popular languages, namely ABB’s RAPID and KUKA’s
KRL. By evaluating our tool on a set of publicly available programs,
we show that insecure patterns are found in real-world code; there-
fore, static source-code analysis is an effective security screening
mechanism, for example to prevent commissioning insecure or ma-
licious industrial task programs. Finally, we discuss remediation
steps that developers and vendors can adopt to mitigate such issues.
CCS Concepts
• Computer systems organization → Robotics; • Security and
privacy → Software security engineering;
Keywords
industrial robotics; security vulnerabilities; robot programming
ACM Reference Format:
Marcello Pogliani, Federico Maggi, Marco Balduzzi, Davide Quarta, and Ste-
fano Zanero. 2020. Detecting Insecure Code Patterns in Industrial Robot
Programs. In Proceedings of the 15th ACM Asia Conference on Computer and
Communications Security (ASIA CCS ’20), October 5–9, 2020, Taipei, Taiwan.
ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3320269.3384735
1 Introduction
Industrial robots are complex manufacturing machines at the center
of modern factories. Robots are widely interconnected—through
various protocols and technologies—to programmable logic con-
trollers (PLCs), manufacturing execution systems (MESs), vision
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
This is the author’s version of the work. It is posted here for your personal use. Not
for redistribution. The definitive Version of Record was published in Proceedings of the
15th ACM Asia Conference on Computer and Communications Security (ASIA CCS ’20),
October 5–9, 2020, Taipei, Taiwan, https://doi.org/10.1145/3320269.3384735.
Stefano Zanero
Politecnico di Milano
PI:EMAIL
systems, and IT and OT networks in the factory floor. Industrial
robots can be programmed online, using the “teach by showing”
method, or offline, using purpose-built, domain-specific program-
ming languages. These industrial robot programming languages (IR-
PLs) include special instructions to move the robot’s arm(s), as well
as common control-flow instructions and APIs to access low-level
resources. Writing task programs (i.e., the programs that define
the task to execute) in IRPLs is useful to implement custom tasks
and integrate external systems in the production process. IRPLs
provide access—in an almost unconstrained way—to several robot’s
resources like its mechanical arm(s), file-system, network, various
fieldbus protocols, and serial communication.
Recent research looked into the security of industrial machinery,
such as robots. In our previous research [19], we focused on the se-
curity properties of industrial robots, and in a follow-up paper [18],
we mentioned how task programs are part of the attack surface,
showing an example of an application written in a IRPL and vul-
nerable to a “path traversal” issue. Despite this, currently, there are
neither security analysis tools for programs written in IRPLs, nor
security mechanisms to implement resource isolation in common
robotic operating systems (e.g., privilege separation). Furthermore,
the security awareness within the industrial-automation commu-
nity does not seem fully developed, yet. Indeed, from an analysis on
11 popular online industrial automation forums1 totalling 294,680
users, we estimated that as low as 2.31% pages (10,868 out of 469,658)
mention security-related keywords (e.g., security, vulnerability, and
attack), and we discovered vulnerable code snippets2.
As trends show an increased IT-OT convergence and a stream-
lined industrial software development with ample use of third party
code [2, 9, 22], we advocate for a more systematic approach to secure
programs written in IRPLs, on par with common general-purpose
programming languages. As a first step, we propose a static source
code analyzer that can pinpoint relevant code paths using dataflow
analysis on the interprocedural control-flow graph, to detect vulner-
able or malicious uses of security-sensitive primitives. For example,
in Section 4 we show how our tool can tell whether and where a
task program receives data from the network and uses that data
to derive a file name, open such file and return its content over
the network. We evaluated our analyzer on publicly available pro-
1https://forum.adamcommunity.com/index.php, https://dof.robotiq.com,
https://automationforum.in, https://www.robot-forum.com/robotforum,
https://control.com, https://solisplc.com/forum, http://forums.mrplc.com,
https://www.reddit.com/r/robotics, http://plc.myforum.ro,
https://forum.universal-robots.com, https://forums.robotstudio.com
2https://forums.robotstudio.com/discussion/11662/how-to-continue-cycle-in-
automatic-mode/p1. This code snippet receives coordinates from a network socket
(without authentication and boundary checks), and uses them to control the robot.
1
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
M. Pogliani et al.
MODULE example
VAR robtarget point0 := [
[500,500,500],[1,0,0,0],[0,0,0,0],
[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
VAR robtarget point1 := [
DEF example()
DECL POS pos1
DECL POS pos2
[700,500,500],[1,0,0,0],[0,0,0,0],
[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
pos1 := {X 500, Y 500, Z 500, A 0, B 0, C 0}
pos2 := {X 700, Y 500, Z 500, A 0, B 0, C 0}
VAR zonedata zone := z100;
PROC main()
FOR i FROM 1 TO 10 DO
MoveJ point0, v100, zone, tool0, \WObj:=wobj0;
WaitTime 4;
MoveL point1, v100, zone, tool0, \WObj:=wobj0;
WaitTime 5;
ENDFOR
ENDPROC
ENDMODULE
FOR I=1 TO 10
PTP pos1
WAIT SEC 4
PTP pos2
WAIT SEC 5
ENDFOR
END
Figure 1: Examples of programs written in two IRPLs: ABB’s RAPID (left) and KUKA’s KRL (right).
grams written in two of the most well-known IRPLs—by ABB and
KUKA [20], both of which operate world-wide since decades and
have hundreds of thousands of employees. Although source-code
vetting can help detecting vulnerabilities early during development,
in the longer term, we argue that vendors should implement mit-
igations such as resource isolation, higher-level communication
primitives (e.g., with built-in type systems and/or authentication).
In summary, we propose the following contributions:
• We analyze the programming languages of 8 leading indus-
trial robot vendors, detail the presence of complex and rich
features, and discuss their vulnerable and malicious usages,
which we deem collectively as “insecure” (Section 2, 3);
• We propose a static code analyzer for IRPLs to analyze task
programs and find security issues in the use of sensitive
primitives (Section 4);
• We use our tool to analyze a corpus of publicly available
programs and show they contain vulnerabilities (Section 5).
We conclude by discussing potential remediation steps that can be
adopted in the medium and long term (Section 6).
2 Programming Industrial Robots
IRPLs allow programmers to write repeatable, deterministic, and
complex tasks, and to interconnect robots with external systems [6].
Like any software artifact, task programs also can contain flaws.
Proprietary Languages. Most IRPLs are similar to BASIC or AL-
GOL, augmented with robot-specific instructions, constructs, and
data types. Task programs written in IRPLs are either interpreted
or compiled to a proprietary binary format before execution. IR-
PLs provide access to system resources—including, for example, the
robot’s movement—through specific instructions and functions. Fig-
ure 1 shows two examples. Unlike general-purpose programming
languages, IRPLs are proprietary and vendor specific. The vendors’
different design choices result in different trade-offs between fea-
tures and complexity. Indeed, despite there exist development and
off-line simulation environments that support multiple languages3,
there is no true, standard cross-vendor solution or “lingua franca.”
3For example, https://robodk.com.
2
Resource Abstraction. IRPLs are used to write complex applica-
tions that interact with external resources and systems (e.g., with
multiple robots, smart end effectors, or external vision systems).
Thus, many languages allow access to non-motion system resources:
file systems, network, system configuration and communication
with external devices (e.g., fieldbuses, serial communication). Exter-
nal systems are accessed via low-level APIs such as raw network
sockets to exchange data to and from the network. According to
our analysis, there is very little or no high-level API abstraction:
Developers can only use low-level system resources. While this
means more flexibility, it also implies more room for mistakes.
There are notable exceptions, which we hope will inspire future
improvements. For example, Mitsubishi’s MELFA BASIC provides
a high-level network-based protocol to remotely control a robot in
real time through dedicated instructions (e.g., Mxt, shorthand for
“move external”). KUKA’s KRL offers high-level network sockets
that exchange XML-serialized data through a language extension
(KUKA.Ethernet). Similarly, Universal Robot offers high-level XML
RPC functionalities [25]. These exceptions are limited to network
communication, although we argue that a similar abstraction ap-
proach should be applied to other security-sensitive functionalities,
as it will be clear in the remainder of this section.
2.1 Access to System Resources
Driven by an increasing market demand, IRPLs offer great flexibility
and capabilities. As a result, the programming features needed to in-
terconnect with heterogeneous external devices and networks may
in turn create the venue for well-known vulnerabilities, like input-
validation and logic errors, on par with general-purpose languages.
Moreover, IRPLs are expressive enough that can be used to write
malicious programs that, when uploaded and executed on an indus-
trial robot, have full and unmediated access to hardware resources.
This would permit the attacker to implement complex malicious
functionalities (e.g., the dropper-like behavior of Listing 4).
We surveyed the languages used by 8 popular industrial robot
vendors, examining the available language reference documents,
and manually looking at the implementation of real programs. In
Table 1 we summarize the sensitive primitives that we identified.
These primitives, when misused, may have an impact on the robot’s
security, the safety of its operators, or the connected systems.
Detecting Insecure Code Patterns in Industrial Robot Programs
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
Table 1: Sensitive primitives supported by the surveyed IRPLs. Section 2.3 provides exemplifying attack scenarios that exploit
these primitives.
Vendor
ABB
KUKA
Language
RAPID
KRL
MELFA BASIC Mitsubishi
AS
Kawasaki
COMAU
PDL2
DENSO
PacScript
Universal-Robot
URScript
KAREL
FANUC
File system operations and di-
rectory listing.
File System Directory Listing Load Module From File Call by Name
Load and execute code at runtime, in-
cluding dynamically-defined code.
Receive from or send data
to external systems.
Communication
✓
✓
✓
✓
✓
✓
Indirect
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
We focus on three, broad categories of programming primitives:
file-system access, dynamic or external program loading, and
communication functionalities.
File-system Access. Opening, reading and writing files via IRPLs
is a necessary mean to access configuration parameters, writing log
information, storing the state of a program, or reading movement
coordinates from a file written by another program. The first column
(“file system”) in Table 1 indicates whether the language supports
programmatic access to files and directories (open, read, write),
while the “directory listing” column indicates whether there is a
programmatic way to list the available files and directories. The
complexity of the file system varies widely across vendor: While
some vendors (e.g., ABB, COMAU) provide a structured file system,
others (e.g., MELFA) provide a flat, simple implementation, or no
programmatic access to files whatsoever (e.g., Denso). In the case
of COMAU, we indicated the capability of performing directory
listing as “indirect”, as it is possible to use the SYS_CALL instruction
to execute system commands, including the command to list files
in a directory, and subsequently parse the command’s output.
Dynamic or External Program Loading. The ability to call pro-
cedures dynamically in IRPLs allow developers to write compact
and modular programs. Hence, some industrial robots include:
• The ability to resolve a function reference in a loaded module
at runtime, calling it through the function’s name. This is
achieved by passing a string with the function name to a
routine like CallByName, or by using special language con-
structs (e.g., the %"functionName"% syntax for late binding
in ABB RAPID). This functionality can be used to call a func-
tion where the function’s name is composed of a common
prefix concatenated with a parameter available at runtime.
• A wat to dynamically load a module from a file containing
the task program code and execute it. This functionality
allows to develop modular programs by loading modules
based on input received at runtime. Note that, similarly to
the directory listing functionality, dynamic module loading
in COMAU is achieved executing a system command using
SYS_CALL, rather than by a dedicated function or instruction.
These functionalities allow calling programs and procedures, being