monitor, evaluate and correct deficiencies in external messages coming from outside
suppliers, partners, and customers to conform to internal vocabularies. JXML2OWL
narrows the gap between XML and OWL specifications proposing a strategy to map
external vocabularies and documents represented with XML Schema to internal
vocabularies and documents represented with existing OWL ontologies and transform
XML data (instances of the mapped XML Schema) into instances of the ontology
according to the performed mapping.
4.3 JXML2OWL implementation
As defined in Section 2, the JXML2OWL API and the Mapper tool were
implemented in Java and the mapping rules are wrapped within an XSL document to
automatically support the transformation of XML instances into individuals. The
mappings process requires several steps. The first step consists of creating a new
mapping project and loading both the XML schema related file (XSD or DTD) and the
OWL ontology. If an XML schema is not available, it is possible to load an XML
18
document. In this case, JXML2OWL extracts a possible schema. In the second step, the
user creates class mapping between elements of the loaded XML schema and concepts
of the ontology. Once these mappings are created, it is possible to relate them to each
other with the intent of creating object property mappings, or to relate them with
elements of the XML schema to create datatype property mappings. Finally, in the last
step, it is possible to export the transformation rules, generated according to the
mapping performed, as an XSL document. With this XSL document it is possible to
transform any XML document which validates against the mapped XML schema into
individuals of the mapped OWL ontology.
Obviously, both the API and the Mapper support all these steps. Regarding the
mappings, JXML2OWL supports one-to-one, many-to-one, one-to-many and many-to-
many mappings. This means that an element of the loaded XML schema can be mapped
to several OWL classes and several elements of the schema can correspond to the same
OWL class. These kinds of supported mappings allow the mapping between any XML
schema to any ontology. Other features are provided such as the ability to save a
mapping project state in an XML file to resume it later or the possibility to directly
transform XML instances document to OWL individuals using JXML2OWL Mapper.
The main methods provided by the API are directly derived from the notation proposed
on Section 3. The Mapper supports all the features of the API in a user-friendly way.
Figure 4 illustrates the JXML2OWL Mapper tool with several mappings created.
The JXML2OWL Mapper tool is divided into two main parts. On the left side, the
XML schema is represented, while on the right side the OWL classes defined by the
ontology are shown. In between we can see the mapping zone. It is possible to drag-
and-drop elements from the left to the right (and vice-versa) to create mappings. By
selecting a created mapping, it is possible to create datatype and object property
mappings. Under the mapping zone, the XML node used as ID for the select class
mapping is displayed as well as all the datatype and object property mappings created
and related to the selected class mapping. For example, the /lecturers/lecturer
node from the XML schema is mapped to the OWL class teacher:Teacher of the
ontology while /lecturers/lecturer/teaches/course is mapped to
teacher:Course. Those two class mappings are related with an object property
mapping (the selected item of the table). Datatype property mappings are also displayed
such as teacher:age and teacher:email.
To assess the performance of the instance transformation process, we have created a
mapping project with 9 class mappings, 14 datatype property mappings and also 14
object property mappings. We have transformed three XML documents with different
sizes, which validates against the mapped schema, using the generated XSL document.
The performance results are shown in Table 3.
Lines Size In Size Out Time
(XML File) (XML File) (OWL instance File) Processing
385 10.2 KB 28 KB 0.266s
3805 102 KB 254 KB 3.734s
38005 1068 KB 1943 KB 5m 14.609s
Table 3. Performance assessment
During our performance evaluation, we noticed that the processing time did not
scale very well with the size of the XML input document. This is mainly due to the
process of detecting and eliminating duplicate instances and properties. Such process
19
requires several passes (the exact number depends on the quantity of many-to-one
mappings) through the XML instances document which is time-consuming.
4.4 Commercial applications already available
Commercial systems and tools that use RDF and OWL as a representation language
are emerging. This section illustrates only a few of the most promising solution already
available in the market to deploy semantic Web applications. These applications can be
sued in conjunction with JXML2OWL.
For example, Altova SemanticWorks™ 2007 (www.altova.com) is the ground-
breaking visual RDF/OWL editor. This tool allows the visual creation and editing of
RDF, RDF Schema, OWL Lite, OWL DL, and OWL Full documents using an intuitive,
visual interface and drag-and-drop functionality.
Oracle Spatial 10g (www-oracle.com) has introduced the industry’s first RDF
management platform. Based on a graph data model, RDF triples are persisted, indexed
and queried, similar to other object-relational data types and allow deploying scalable
and secure semantic applications. Oracle’s RDF Database (11g) will support native
OWL inferencing for an OWL subset that includes property characteristics, class
comparisons, proprety comparisons, individual comparisons and class expressions.
Metatomix (www.m3t4.com) has developed the Metatomix Semantic Toolkit, which is
a set of Eclipse plugins that allow developers to create and manage ontologies based on
the OWL standards.
TopQuadrant (www.topquadrant.com) has released its TopBraid Composer, a
professional development environment for W3C’s Semantic Web standards: RDF
Schema, OWL, SPARQL Query Language and the Semantic Web Rule Language
(SWRL).
5 Conclusions
Data storage technologies have evolved together with the needs of enterprises.
Initially stored in flat files in a proprietary format, data stored in tables managed by
RBDMS emerged in the 70’s with the need for better performances, while SQL query
language became a standard in the 80’s. With the advent of the internet and XML as a
de facto standard for B2B data exchange, traditional EDI (Electronic Data Interchange)
solutions (such as Edifact) are being substituted by XML based EDI (such as ebXML
and Rosettanet). To support these evolutions, mapping tools were developed to allow
the mapping between distinct technologies and schemas. For instance, tools enabling
mappings and data conversion from flat file do Relational Databases are available.
Similarly, with the emergence of XML, applications supporting mappings from flat file
to XML, and between Relational Databases and XML (through SQL) are getting more
common. Since a few years ago, to better enable data exchange and integration,
common database vendor enabled XML within their databases. MS SQL Server and
IBM DB2 are examples of such databases which are usually referred to as XML-
enabled databases. More recently, native XML databases emerged. They are document
centered and are particularly suited to store, manage and query XML documents usually
using XPath and / or XQuery language. XML technologies brought interoperability at a
syntactic level, but today’s organizations are again shifting (or it is expected of them to
20
do so) from a syntactic operability level to a semantic one [31]. Semantic Web
technologies, such as RDF and OWL, play an important role in achieving this objective.
Currently, not only databases (such as Oracle 10g), but also applications (like Adobe
Creative Suite or Mozilla Firefox), are RDF-enabled. According to William Ruh of
CISCO, before the end of 2004, RDF was applied under the covers of well over 100
identified products and over 25 information service providers [32]. Again, mapping
applications were developed to support this evolution. For example, several XSL
stylesheets, such as xml2rdf.xsl [33], enable conversion from XML to RDF. At the top
of RDF stands OWL, a semantically richer and more expressive language. Since OWL
recommendation is very recent, applications using OWL are very scarce and mainly
related to academic projects. However, for its acceptance, tools supporting OWL
standard are necessary. Mapping tools to OWL specification are also needed to assist
enterprise migration from syntactic to semantic data structures.
In this paper we have presented an approach, which was successfully implemented
in JXML2OWL, for mapping XML schema to existing OWL ontologies and
transforming instances of the XML schema into individuals. This transformation is
fundamental for organizations that plan to move from a syntactic representation of data
(using XML) to a semantic one (using OWL). By using semantic domain models based
on ontologies, enterprises acquire several benefits, such as the ability to perform
inference on a knowledge base (ontology and its individuals) to derive potentially new
knowledge or the capacity to share their domain model to easily exchange and integrate
data.
JXML2OWL has been successfully employed in the context of a major project
called SEED (SEmantic E-tourism Dynamic packaging) whose purpose is to integrate
disparate and heterogeneous e-tourism data sources into a unique knowledge base. We
believe the presented framework is appropriate to integrate any XML data into semantic
information systems based on OWL ontologies. The JXML2OWL framework is ready-
to-use and available for download (http://jxml2owl.projects.semwebcentral.org/).
We hope the research done to bridge the gap between XML and OWL as well as the
successfully implemented prototype has demonstrated the need for semantic mapping
tools and will stimulate R&D departments of software companies, mainly the ones
developing mapping applications, to develop professional mapping tools supporting
mappings and instances transformation to OWL ontologies.
6 Acknowledgments
This work was partially funded by grants from the FCT, POCTI-219, and FEDER.
7 References
[1] Berners-Lee T, Miller E. The Semantic Web lifts off. Special Issue of ERCIM
News 2002; 51:9-11.
http://www.ercim.org/publication/Ercim_News/enw51/berners-lee.html.
[2] Cardoso J. Semantic Web Services: Theory, Tools and Applications. New York:
IGI Global; 2007.
21
[3] Davis M. The Business Value of Semantic Technologies. A TopQuadrant Special
Report 2004. http://www.knowledgefoundations.com/pdf-
files/BusinessValue_v2.pdf
[4] Oracle. Semantic Data Integration for the Enterprise (White paper); 2007.
http://www.oracle.com/technology/tech/semantic_technologies/pdf/semantic11g_
dataint_twp.pdf
[5] Fensel D. Ontologies: Silver Bullet for Knowledge Management and Electronic
Commerce. 2nd ed. Berlin: Springer-Verlag; 2003.
[6] Yager T. The Future of Application Integration. InfoWorld; 2002.
http://www.infoworld.com/article/02/02/22/020225feintro_1.html.
[7] White C. Data Integration: Still a Barrier for Most Organizations. April 2006 Issue
of DM Review. http://www.dmreview.com/article_sub.cfm?articleId=1051163.
[8] Alexie V, Breu M, de Bruijn J, Fensel D, Lara D, Lausen H. Information
Integration with Ontologies: Experiences from an Industrial Showcase. John
Wiley & Sons; 2007.
[9] Roth M. A, Wolfson D. C, Kleeweln J. C, Nelin C. J. Information integration: A
new generation of information technology. IBM Systems Journal 2002; 41(4):563-
577.
[10] Gold-Bernstein B. Enterprise Information Integration – What was old is new again.
ebizQ, 2004. http://www.ebizq.net/topics/eii/features/4371.html?page=1.
[11] Sheth A. A Semantic Meta Data Approach to Enterprise Information Integration.
July 2003 Issue of DM Review.
http://www.dmreview.iproduction.com/issues/20030701/6962-1.html
[12] Gruber T. A translation approach to portable ontology specifications. Knowledge
Acquisition 1993; 5(2): 199-220.
[13] Silva B, Cardoso J. Semantic Data Extraction for B2B Integration. International
Workshop on Distributed Applications for B2B Integration (DABI) 2006. Lisboa,
Portugal, IEEE Computer Society.
[14] Cardoso J. Integrating HAD Organizational Data Assets using Semantic Web
Technologies. 3rd International Conference Interoperability for Enterprise
Software and Applications (I-ESA 2007), Funchal, Portugal. In: Gonçalves R,
Müller J, Mertins K, Zelm M. Enterprise Interoperability II 2007. Springer. p.
333-344.
[15] Bussler C. B2B Integration: Concepts and Architecture, Springer-Verlag; 2003.
[16] Horrocks I, Patel-Schneider P, Boley H, Tabet S, Grosof B, Dean M. SWRL: A
Semantic Web Rule Language Combining OWL and RuleML. 2003.
http://www.daml.org/2003/11/swrl/.
[17] Horrocks I, Patel-Schneider P. A Proposal for an OWL Rules Language (Draft
Version of 16 October 2003). http://www.cs.man.ac.uk/~horrocks/DAML/Rules/.
[18] Cardoso J, Miller J, Su J, Pollock J. Academic and Industrial Research: Do their
Approaches Differ in Adding Semantics to Web Services. In: Cardoso J, Sheth A.
Semantic Web Process: powering next generation of processes with Semantics and
Web services. Heidelberg: Springer-Verlag; 2005.
[19] Ehrig M, Sure Y. FOAM - Framework for Ontology Alignment and Mapping:
Results of the Ontology Alignment Initiative. In: Ashpole B, Ehrig M, Euzenat J,
Stuckenschmidt H. Workshop on Integrating Ontologies. Alberta, Canada: CEUR-
WS. 156:72-6; 2005.
22
[20] Aumueller D, Do H, Massmann S, Rahm E. Schema and ontology matching with
COMA++. In: International Conference on Management of Data 2005; Baltimore:
ACM Press, p. 906-8
[21] Ferdinand M, Zirpins C, Trastour D. Lifting XML Schema to OWL. In: Koch N,
Fraternali P, Wirsing M. 4th International Conference Web Engineering 2004.
Heidelberg: Springer, p. 354-8.
[22] Garcia R, Perdrix F, Gil R. Ontological Infrastructure for a Semantic Newspaper.
In: First International on Semantic Web Annotations for Multimedia Workshop
(SWAMM'06); 2006.
[23] Bohring H, Auer S. Mapping XML to OWL Ontologies. In: Jantke K, Fähnrich K,
Wittig W. Marktplatz Internet: Von e-Learning bis e-Payment: 13. Leipziger
Informatik-Tage (LIT2005). Leipzig, p. 147-156.
[24] Bray T, Paoli J, Sperberg-McQueen CM, Maler E, Yergeau F. Extensible Markup
Language (XML) 1.0 (Fourth Edition). W3C Recommendation; 2004.
http://www.w3.org/TR/REC-xml/.
[25] Bechhofer S, Van Harmelen F, Hendler J, Horrocks I, McGuinness D, Patel-
Schneider P, et al. OWL Web Ontology Language Reference. W3C
Recommendation; 2004. http://www.w3.org/TR/owl-ref/.
[26] Clark J, DeRose S. XML Path Language (XPath). W3C Recommendation; 1999.
http://www.w3.org/TR/xpath.
[27] Klyne G, Caroll J, McBride B. Resource Description Framework (RDF): Concepts
and Abstract Syntax. W3C Recommendation; 2002. http://www.w3.org/TR/rdf-
concepts/.
[28] Cardoso J, Sheth A. Semantic Web Services, Processes and Applications.
Springer; 2006.
[29] Bray T, Hollander D, Layman A, Tobin R.Namespaces in XML 1.0 (Second
Edition). W3C Recommendation; 2006. http://www.w3.org/TR/REC-xml-
names/#NT-NCName.
[30] Mitem, Information Integration for the Public Sector, 2002,
http://www.mitem.com/customers/documents/MITEM-
InformationIntegrationforthePublicSector.pdf
[31] EBizQ. Semantic Integration: A New Approach to an Old Problem. Software AG;
2005. http://www.sagus.com/media/PDFs/SoftwareAG_eBizQ_062005.pdf.
[32] Ruh W. The Web of Meaning: The Business Value of the Semantic Web. Cisco
Systems; 2004. http://www.w3.org/2004/Talks/w3c10-
WebOfMeaning/Originals/Ruh.ppt.
[33] DuCharme B. Converting XML to RDF. O’Reilly xml.com; 2004.
http://www.xml.com/pub/a/2004/09/01/tr.html.
8 Vitae
Toni Rodrigues, a software designer and developer, joined SQLI (France) in 2006.
Since then he is working as a software consultant in financial messaging and SWIFT
payment systems. He previously was a member of the SEED Laboratory, a group
working with Emergent Information Systems. As a member of this laboratory, he wrote
his Master thesis on semantic data integration and was graduated by the University of
23
Madeira in Computer Science. Current areas of interest are predominantly concerned
with service oriented architectures, web services as well as semantic web.
Pedro Rosa, a software developer joined Expedita – Arquitectura e Gestão de
Sistemas de Informação in 2006.Working as consultant and developer of web based
applications related to Tourism and Maritime Transportation sector. His interest areas
are mainly service oriented architecture, system integrations and Semantic Web.
Graduated in Computer Science by University of Madeira, he worked there as monitor
and wrote is master thesis on semantic data integration as a member of the SEED
laboratory.
Prof. Dr. Jorge Cardoso joined SAP Research (Germany) in 2007. He is also
Professor at the University of Madeira (Portugal). He previously gave lectures at the
University of Georgia (USA) and at the Instituto Politécnico de Leiria (Portugal). In
1999, he worked at the Boeing Company on enterprise application integration. Dr.
Cardoso was the organizer of several international conferences on Semantic Web and
Information Systems. He has published over 80 refereed papers in the areas of
workflow management systems, semantic Web, and related fields. He has also edited 3
books on semantic Web and Web services. He is on the Editorial Board of the
Enterprise Information Systems Journal, the International Journal on Semantic Web and
Information systems, and the International Journal of Information Technology.
9 Figure Captions
Figure 1. A semantic data integration approach
Figure 2. Java XML to OWL concept
Figure 3. Internal and external vocabularies
Figure 4. JXML2OWL Mapper
10 Table Captions
Table 1. Elements that need to be considered when mapping XML to OWL
Table 2. Mapping notation
Table 3. Performance assessment
24