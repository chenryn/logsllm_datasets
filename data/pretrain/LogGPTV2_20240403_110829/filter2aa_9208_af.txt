this promotes strange action at a distance, this counterintuitive
behavior may be fixed in a future release.
.IP "do \s-1BLOCK\s0" 8
.IX Item "do BLOCK"
Not really a function.  Returns the value of the last command in the
sequence of commands indicated by \s-1BLOCK\s0.  When modified by a loop
modifier, executes the \s-1BLOCK\s0 once before testing the loop condition.
(On other statements the loop modifiers test the conditional first.)
.Sp
\&\f(CW\*(C`do BLOCK\*(C'\fR does \fInot\fR count as a loop, so the loop control statements
\&\f(CW\*(C`next\*(C'\fR, \f(CW\*(C`last\*(C'\fR, or \f(CW\*(C`redo\*(C'\fR cannot be used to leave or restart the block.
See perlsyn for alternative strategies.
.IP "do \s-1SUBROUTINE\s0(\s-1LIST\s0)" 8
.IX Item "do SUBROUTINE(LIST)"
A deprecated form of subroutine call.  See perlsub.
.IP "do \s-1EXPR\s0" 8
.IX Item "do EXPR"
Uses the value of \s-1EXPR\s0 as a filename and executes the contents of the
file as a Perl script.  Its primary use is to include subroutines
from a Perl subroutine library.
.Sp
.Vb 1
\&    do 'stat.pl';
.Ve
.Sp
is just like
.Sp
.Vb 1
\&    eval `cat stat.pl`;
.Ve
.Sp
except that it's more efficient and concise, keeps track of the current
filename for error messages, searches the \f(CW@INC\fR libraries, and updates
\&\f(CW%INC\fR if the file is found.  See \*(L"Predefined Names\*(R" in perlvar for these
variables.  It also differs in that code evaluated with \f(CW\*(C`do FILENAME\*(C'\fR
cannot see lexicals in the enclosing scope; \f(CW\*(C`eval STRING\*(C'\fR does.  It's the
same, however, in that it does reparse the file every time you call it,
so you probably don't want to do this inside a loop.
.Sp
If \f(CW\*(C`do\*(C'\fR cannot read the file, it returns undef and sets \f(CW$!\fR to the
error.  If \f(CW\*(C`do\*(C'\fR can read the file but cannot compile it, it
returns undef and sets an error message in \f(CW$@\fR.   If the file is
successfully compiled, \f(CW\*(C`do\*(C'\fR returns the value of the last expression
evaluated.
.Sp
Note that inclusion of library modules is better done with the
\&\f(CW\*(C`use\*(C'\fR and \f(CW\*(C`require\*(C'\fR operators, which also do automatic error checking
and raise an exception if there's a problem.
.Sp
You might like to use \f(CW\*(C`do\*(C'\fR to read in a program configuration
file.  Manual error checking can be done this way:
.Sp
.Vb 10
\&    # read in config files: system first, then user
\&    for $file ("/share/prog/defaults.rc",
\&               "$ENV{HOME}/.someprogrc")
\&   {
\&        unless ($return = do $file) {
\&            warn "couldn't parse $file: $@" if $@;
\&            warn "couldn't do $file: $!"    unless defined $return;
\&            warn "couldn't run $file"       unless $return;
\&        }
\&    }
.Ve
.IP "dump \s-1LABEL\s0" 8
.IX Item "dump LABEL"
.PD 0
.IP "dump" 8
.IX Item "dump"
.PD
This function causes an immediate core dump.  See also the \fB\-u\fR
command-line switch in perlrun, which does the same thing.
Primarily this is so that you can use the \fBundump\fR program (not
supplied) to turn your core dump into an executable binary after
having initialized all your variables at the beginning of the
program.  When the new binary is executed it will begin by executing
a \f(CW\*(C`goto LABEL\*(C'\fR (with all the restrictions that \f(CW\*(C`goto\*(C'\fR suffers).
Think of it as a goto with an intervening core dump and reincarnation.
If \f(CW\*(C`LABEL\*(C'\fR is omitted, restarts the program from the top.
.Sp
\&\fB\s-1WARNING\s0\fR: Any files opened at the time of the dump will \fInot\fR
be open any more when the program is reincarnated, with possible
resulting confusion on the part of Perl.
.Sp
This function is now largely obsolete, partly because it's very
hard to convert a core file into an executable, and because the
real compiler backends for generating portable bytecode and compilable
C code have superseded it.  That's why you should now invoke it as
\&\f(CW\*(C`CORE::dump()\*(C'\fR, if you don't want to be warned against a possible
typo.
.Sp
If you're looking to use dump to speed up your program, consider
generating bytecode or native C code as described in perlcc.  If
you're just trying to accelerate a \s-1CGI\s0 script, consider using the
\&\f(CW\*(C`mod_perl\*(C'\fR extension to \fBApache\fR, or the \s-1CPAN\s0 module, CGI::Fast.
You might also consider autoloading or selfloading, which at least
make your program \fIappear\fR to run faster.
.IP "each \s-1HASH\s0" 8
.IX Item "each HASH"
When called in list context, returns a 2\-element list consisting of the
key and value for the next element of a hash, so that you can iterate over
it.  When called in scalar context, returns only the key for the next
element in the hash.
.Sp
Entries are returned in an apparently random order.  The actual random
order is subject to change in future versions of perl, but it is
guaranteed to be in the same order as either the \f(CW\*(C`keys\*(C'\fR or \f(CW\*(C`values\*(C'\fR
function would produce on the same (unmodified) hash.  Since Perl
5.8.1 the ordering is different even between different runs of Perl
for security reasons (see \*(L"Algorithmic Complexity Attacks\*(R" in perlsec).
.Sp
When the hash is entirely read, a null array is returned in list context
(which when assigned produces a false (\f(CW0\fR) value), and \f(CW\*(C`undef\*(C'\fR in
scalar context.  The next call to \f(CW\*(C`each\*(C'\fR after that will start iterating
again.  There is a single iterator for each hash, shared by all \f(CW\*(C`each\*(C'\fR,
\&\f(CW\*(C`keys\*(C'\fR, and \f(CW\*(C`values\*(C'\fR function calls in the program; it can be reset by
reading all the elements from the hash, or by evaluating \f(CW\*(C`keys HASH\*(C'\fR or
\&\f(CW\*(C`values HASH\*(C'\fR.  If you add or delete elements of a hash while you're
iterating over it, you may get entries skipped or duplicated, so
don't.  Exception: It is always safe to delete the item most recently
returned by \f(CW\*(C`each()\*(C'\fR, which means that the following code will work:
.Sp
.Vb 4
\&        while (($key, $value) = each %hash) {
\&          print $key, "\en";
\&          delete $hash{$key};   # This is safe
\&        }
.Ve
.Sp
The following prints out your environment like the \fIprintenv\fR\|(1) program,
only in a different order:
.Sp
.Vb 3
\&    while (($key,$value) = each %ENV) {
\&        print "$key=$value\en";
\&    }
.Ve
.Sp
See also \f(CW\*(C`keys\*(C'\fR, \f(CW\*(C`values\*(C'\fR and \f(CW\*(C`sort\*(C'\fR.
.IP "eof \s-1FILEHANDLE\s0" 8
.IX Item "eof FILEHANDLE"
.PD 0
.IP "eof ()" 8
.IX Item "eof ()"
.IP "eof" 8
.IX Item "eof"
.PD
Returns 1 if the next read on \s-1FILEHANDLE\s0 will return end of file, or if
\&\s-1FILEHANDLE\s0 is not open.  \s-1FILEHANDLE\s0 may be an expression whose value
gives the real filehandle.  (Note that this function actually
reads a character and then \f(CW\*(C`ungetc\*(C'\fRs it, so isn't very useful in an
interactive context.)  Do not read from a terminal file (or call
\&\f(CW\*(C`eof(FILEHANDLE)\*(C'\fR on it) after end-of-file is reached.  File types such
as terminals may lose the end-of-file condition if you do.
.Sp
An \f(CW\*(C`eof\*(C'\fR without an argument uses the last file read.  Using \f(CW\*(C`eof()\*(C'\fR
with empty parentheses is very different.  It refers to the pseudo file
formed from the files listed on the command line and accessed via the
\&\f(CW\*(C`<>\*(C'\fR operator.  Since \f(CW\*(C`<>\*(C'\fR isn't explicitly opened,
as a normal filehandle is, an \f(CW\*(C`eof()\*(C'\fR before \f(CW\*(C`<>\*(C'\fR has been
used will cause \f(CW@ARGV\fR to be examined to determine if input is
available.   Similarly, an \f(CW\*(C`eof()\*(C'\fR after \f(CW\*(C`<>\*(C'\fR has returned
end-of-file will assume you are processing another \f(CW@ARGV\fR list,
and if you haven't set \f(CW@ARGV\fR, will read input from \f(CW\*(C`STDIN\*(C'\fR;
see \*(L"I/O Operators\*(R" in perlop.
.Sp
In a \f(CW\*(C`while (<>)\*(C'\fR loop, \f(CW\*(C`eof\*(C'\fR or \f(CW\*(C`eof(ARGV)\*(C'\fR can be used to
detect the end of each file, \f(CW\*(C`eof()\*(C'\fR will only detect the end of the
last file.  Examples:
.Sp
.Vb 7
\&    # reset line numbering on each input file
\&    while (<>) {
\&        next if /^\es*#/;        # skip comments
\&        print "$.\et$_";
\&    } continue {
\&        close ARGV  if eof;     # Not eof()!
\&    }
.Ve
.Sp
.Vb 8
\&    # insert dashes just before last line of last file
\&    while (<>) {
\&        if (eof()) {            # check for end of last file
\&            print "--------------\en";
\&        }
\&        print;
\&        last if eof();          # needed if we're reading from a terminal
\&    }
.Ve
.Sp
Practical hint: you almost never need to use \f(CW\*(C`eof\*(C'\fR in Perl, because the
input operators typically return \f(CW\*(C`undef\*(C'\fR when they run out of data, or if
there was an error.
.IP "eval \s-1EXPR\s0" 8
.IX Item "eval EXPR"
.PD 0
.IP "eval \s-1BLOCK\s0" 8
.IX Item "eval BLOCK"
.PD
In the first form, the return value of \s-1EXPR\s0 is parsed and executed as if it
were a little Perl program.  The value of the expression (which is itself
determined within scalar context) is first parsed, and if there weren't any
errors, executed in the lexical context of the current Perl program, so
that any variable settings or subroutine and format definitions remain
afterwards.  Note that the value is parsed every time the eval executes.
If \s-1EXPR\s0 is omitted, evaluates \f(CW$_\fR.  This form is typically used to
delay parsing and subsequent execution of the text of \s-1EXPR\s0 until run time.
.Sp
In the second form, the code within the \s-1BLOCK\s0 is parsed only once\*(--at the
same time the code surrounding the eval itself was parsed\*(--and executed
within the context of the current Perl program.  This form is typically
used to trap exceptions more efficiently than the first (see below), while
also providing the benefit of checking the code within \s-1BLOCK\s0 at compile
time.
.Sp
The final semicolon, if any, may be omitted from the value of \s-1EXPR\s0 or within
the \s-1BLOCK\s0.
.Sp
In both forms, the value returned is the value of the last expression
evaluated inside the mini\-program; a return statement may be also used, just
as with subroutines.  The expression providing the return value is evaluated
in void, scalar, or list context, depending on the context of the eval itself.
See \*(L"wantarray\*(R" for more on how the evaluation context can be determined.
.Sp
If there is a syntax error or runtime error, or a \f(CW\*(C`die\*(C'\fR statement is
executed, an undefined value is returned by \f(CW\*(C`eval\*(C'\fR, and \f(CW$@\fR is set to the
error message.  If there was no error, \f(CW$@\fR is guaranteed to be a null
string.  Beware that using \f(CW\*(C`eval\*(C'\fR neither silences perl from printing
warnings to \s-1STDERR\s0, nor does it stuff the text of warning messages into \f(CW$@\fR.
To do either of those, you have to use the \f(CW$SIG{_\|_WARN_\|_}\fR facility, or
turn off warnings inside the \s-1BLOCK\s0 or \s-1EXPR\s0 using \f(CW\*(C`no\ warnings\ 'all'\*(C'\fR.
See \*(L"warn\*(R", perlvar, warnings and perllexwarn.
.Sp
Note that, because \f(CW\*(C`eval\*(C'\fR traps otherwise-fatal errors, it is useful for
determining whether a particular feature (such as \f(CW\*(C`socket\*(C'\fR or \f(CW\*(C`symlink\*(C'\fR)
is implemented.  It is also Perl's exception trapping mechanism, where
the die operator is used to raise exceptions.
.Sp
If the code to be executed doesn't vary, you may use the eval-BLOCK
form to trap run-time errors without incurring the penalty of
recompiling each time.  The error, if any, is still returned in \f(CW$@\fR.
Examples:
.Sp
.Vb 2
\&    # make divide-by-zero nonfatal
\&    eval { $answer = $a / $b; }; warn $@ if $@;
.Ve
.Sp
.Vb 2
\&    # same thing, but less efficient
\&    eval '$answer = $a / $b'; warn $@ if $@;
.Ve
.Sp
.Vb 2
\&    # a compile-time error
\&    eval { $answer = };                 # WRONG
.Ve
.Sp
.Vb 2
\&    # a run-time error
\&    eval '$answer =';   # sets $@
.Ve
.Sp
Due to the current arguably broken state of \f(CW\*(C`_\|_DIE_\|_\*(C'\fR hooks, when using
the \f(CW\*(C`eval{}\*(C'\fR form as an exception trap in libraries, you may wish not