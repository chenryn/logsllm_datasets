User: How to use Nginx to achieve load balancing? Please list common Nginx configuration commands and parameters, and provide sample configuration files.
Assistant: Nginx can achieve load balancing in a variety of ways, among which algorithms such as Round Robin, Least Connections, and IP Hash are commonly used, and it can also perform load balancing for different URLs or request methods. The following are commonly used Nginx configuration instructions, parameters and sample configuration files: 1. upstream instruction: define a group of servers called upstream, and use proxy_pass to reference upstream in the location instruction to achieve load balancing. Commonly used parameters: - server: defines a backend server. You can specify the IP address and port number, or use Unix Socket as the address. - weight: Define the weight, the server with the larger value will be assigned more requests. - max_fails: Define the maximum number of detected failures, after which the server will be considered down and will no longer be assigned requests temporarily. - fail_timeout: Defines the time when a down server is eliminated, in seconds. Sample configuration: ``` upstream backend { server 192.168.1.2:8080 weight=2; server 192.168.1.3:8080; server unix:/var/run/backend.sock weight=3; } ``` 2. server command : Define a listening address and port number and a load balancing algorithm referenced by upstream. Commonly used parameters: - listen: Define the listening address and port number. - server_name: defines the virtual host name. - location: Define the URL matching rules, you can refer to other location instructions, and you can also jump between different servers and upstreams. - proxy_pass: Define the load balancing target, you can refer to the upstream group or directly specify the IP address and port number of the target server. - proxy_redirect: Define the redirect rule when the proxy_pass port is inconsistent with the access port. - proxy_set_header: Defines the request headers that need to be passed to the backend server. Example configuration (Round Robin algorithm): ``` http { upstream backend { server backend1.example.com; server backend2.example.com; } server { listen 80; server_name example.com; location / { proxy_pass http:// backend; proxy_set_header X-Real-IP $remote_addr; } } } ``` 3. ip_hash command: Distribute the load according to the hash value of the client's IP address, so that requests from the same IP will be assigned to the same backend server. Common parameters: - upstream: Specifies the upstream group. Sample configuration: ``` upstream backend { ip_hash; server backend1.example.com; server backend2.example.com; } ``` 4. least_conn directive: allocate requests according to the load balancing method with the least number of connections. Common parameters: - upstream: Specifies the upstream group. Example configuration: ``` upstream backend { least_conn; server backend1.example.com; server backend2.example.com; } ```