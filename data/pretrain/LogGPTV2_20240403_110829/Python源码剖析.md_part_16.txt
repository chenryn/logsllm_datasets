一旦清晰地了解了通用搜索策略，lookdict_string也就一目了然了（见代码清单5-2）。
先就来剖析一下diet中的通用搜索策略lookdict，而不是考虑Python的默认搜索策略。
Object创建时所默认采用的搜索策略。
entry 的键在Python 中是如此的广泛和重要，所以 lokdict string也就成为了PyDict-
PyStxingobject对象的特殊形式。以PyStringobject对象作为pyDictobject对象中
上：这两种策略使用的是相同的算法，lookdict_string只是lookdict的一种针对
众所周知，它是PyDictObject的搜索策略。
进行的动作，在ma_lookup中，包含了散列函数和发生冲突时二次探测函数的具体实现，
正是这个ma_lookup指定了PyDictobject在entry集合中搜索某一特定entry时需要
对象的初始化工作：
PyDictobject对象申请合适的内存空间，然后会通过两个宏完成对新生的PyDictObject
码清单5-1的[21处对缓冲池的使用的讨论放到后面。
static
[dictobject.o]
hash)
既然lookdict_string是lookdict针对PyStringObject对象的特殊形式，那么我们首
Pyhon为PyDictobject对象提供了两种搜索策略，lookdict和lookdictstring。实际
如果PyDictObject对象的缓冲池不可用，那么Pyhon将首先从系统堆中为新的
register int restore_error;
register dictentry
dictentry
为7。
然，在一个PyDictobject对象刚被创建的时候，这两个变量都应该是0。
egister
dictentry*1lookdict (dictobject *mp, Pyobject *key,register long
dicbentry
epo
=mp->ma_table;
perturb:
*ep;
*freeslot;
>ma_mask;
Python源码剖析
5.3PyDictObject的创建和维护
一深度探索动态语言核心技术
83
---
## Page 114
Python源码剖析
就可被Python所使用。
me_value为NUL。这个entry指示搜索失败，并且该entry是一个空闲的entry，马上
是ma_size。
会被用来进行大量的与操作，所以这个与entry数量相关的变量被命名为ma_mask，而不
作，结果自然落在entry的数量之下。代码清单5-2的[1]处实现了这个过程，由于ma_mask
个entry上去。lookdict采取的策略非常简单，直接将hash值与entry的数量做一个与操
中的key的hash值却不一定会在这个范围内，所以这就要求lookdict将hash值映射到某
程，同时需要指出，这里列出的只是Pyton对冲突链上第一个entry所进行的动作。
这里需要说明一下，无论是lookdictstring还是lookdict，永远都不会返回NULL，
在搜索的过程中，代码清单5-2的[3]处所操纵的frees1ot是一个重要的变量。如果
PyDictObject中维护的entry的数量是有限的，比如100个或1000个。而传入lookdict
这里列出的代码对Pyuon的源码进行了一些改动，目的是为了简明地展示搜索的过
第5章Python中的Dict对象
else
ep=&ep0[1];
7/[11：散列，定位冲突探测链的第一个entry
PyObject*startkey:
register int checked_error;
71B1:
121
freeslot=NUuL;
(ep->me
return ep;
hash
深度探索动态语言核心技术
startkey=ep->me_key;
(ep->me_hash == hash)
return ep
xerr
key
mask;
Pyobject_RichCombareBool(startkey.key,Py_EQ）
0Y
dummy)
如
---
## Page 115
了：而如果hash值相等，那么Python将通过pyobject_RichcompareBool进行比较，注
检查两个对象的hash值是否相同，如果不相同，则其值也一定不相同，不用再继续下去
5-4中我们看到，这个entry明明是存在的。这就是“值相同”这条规则存在的意义。
是不会成功的，但是如果这就意味着该ntry不存在，那简直会让人匪夷所思，因为在图
d中搜索键为9876的entry，显然，在lookdict中，代码清单5-2的[2]处的引用相同检查
Python创建的却是不同的对象，考虑如图5-4所示的Python代码：
大整数对象并不是共享的，当我们多次创建相同的大整数对象时，虽然其值相同，然而
中的不同位置，但是这两个对象的值相同。
所完成的：而所谓的值相同，是说两个Pyobject*指针实际上指向了不同的对象，即内存
的是内存中的同一个地址，这一点的检查是由代码清单5-2的[2]处的“ep->me_key==key”
同。Python中的aict正是建立在这两层含义之上的。所谓引用相同，是指两个符号引用
何定义相同？如果没有确定这个概念，那么搜索就无从谈起，aict也就无从谈起。
有etry 中寻找一个这样的entry，其key与待搜索的key相同。那么什么是相同呢？如
虽然我们至今没有提及，但是却至关重要。我们说在aict中的搜索过程是要在aict的所
可用的entry。
束搜索过程的，这时会返回这个处于Unused态的entry，同样是一个能指示失败且立即
列中并没有Dummy态ertry，搜索失败时，一定是在一个处于Unused态的entry上结
freeslot就会挺身而出，提供一个能指示失败并立即可用的entry。当然，如果探测序
这个freeslot正是用来指向探测序列中第一个处于Dummy态的entry，如果搜索失败，
即被使用的entry，因为Dummy态的entry并没有维护一个有效的（key，value）对。
是为NULL的，所以这个返回结果指示了搜索失败；同时，返回的eritxy也是一个可以立
就会返回这个处于Dummy态的ertry。我们知道，处于Dummy态的entry其me_value
在探测链中的某个位置上，entry处于Dummy态，那么如果在这个序列中搜索不成功，
在lookdict中，代码清单5-2的[4]处完成了两个key的值检查。值检查的过程首先会
举一个简单的例子，在前面我们已经看到，在整数对象中，小整数对象是共享的，而
在Pyhon对aict的搜索中，更进一步的，在dict的实现中，有一个抽象的概念，
这里出现了两个整数对象9876，在第三行调用pr1ntd[98761时，Python会首先到
在Python的aict中，“相同”这个概念实际上包含两层含义：1.引用相同：2.值相
图5-4在dict中搜索整数
printd[9876]
Python源码剖析
5.3PyDictObject的创建和维护
一深度探索动态语言核心技术
85
---
## Page 116
86
Python源码剖析
会沿着探测链，
出了第一步。
与之对应，所以我们现在只是考察了所有候选entry中的第一个entry，万里长征仅仅迈
查找的元素的比较。实际上，由于entry对应于某一个散列值，几乎都有一个冲突探测链
中的[1]、[2]、[3]、[4]所示。
pareBoo1进行相等比较操作。
返回-1。在代码清单5-2的[4]处，lookdict指定了py_EQ，这将指示pyobject_RichCom-
当（vopw）成立时，返回1；当（vopw）不成立时，返回0：如果在比较中发生错误，
int Pyobject_RichCompareBool（PyObjeet *v.PyObjeet *w,int op)
意这个函数，它的原型为：
statie dietentry*lookdict (dictobject *mp,
[dictobject.c]
代码清单5-3
hash)
[1]
根据hash值获得entry的索引，这是冲突探测链上第一个entry的索引l。
下面我们来总结一下1ookdict中进行第一次检查时所进行的主要动作，如代码清单5-2
9集
这是Pyhon提供的一个相当典型的比较操作，我们可以自己指定比较操作的类型，
如果冲突探测链上第一个entry的key与待查找的key不匹配，那么很自然地，lookdict
在以上的剖析中，我们考察的是根据hash值获得的冲突探测链上第一个entry与待
在两种情况下，搜索结束：
for (perturb = hash;:perturb >>= PERTURB_SHIFT)
dictentry
register
megister int i
检查Active态entry中的key与待查找的key是否“值相同”，若成立，搜索成功
若当前entry处于Dummy态，设置feeslot。
PyQbject
Fegtster
register
register
ep=kep0[&mask]:
//15]：寻找探测链上下一个entry
ep->me_key=key，表明entry的key与待搜索的key匹配，搜索成功。
entry 处于Unused态，
Python中的Dict 对象
深度探索动态语言核心技术
，顺藤摸瓜，依次比较探测链上的entry与待查找的key（见代码清单5-3）。
dictentry
intperturb;
*ep:
perturb
表明冲突探测链搜索完成，
Pyobjectkey,registerlong
搜索失败：
---
## Page 117
Python在PyDict_New中为PyDictobject对象提供的默认搜索策略了（见代码清单5-4）。
实际是一个空闲的entry，可以被Python使用，所以在代码清单5-3的[6]处，我们会检查
接返回该entry，因为有可能在遍历的过程中，已经发现了一个Dummy态entry，这个entry
这个entry即可：如果搜索失败，那么此时ep指向一个Unused态的entry，我们不能直
5-3中的[5]、[6]、17]、[8]、[9]所示。
查本质上是一样的，我们看一看在遍历探测链时发生lookdict所进行的操作，如代码清单
返回freeslot所指向的entry
其实对探测链上的其他entry也将进行同样的动作，对第一个entry和其他entry的检
当前freeslot是否已经被设置，如果被设置，则不会返回Dummy态entry，而是需要
根据Pyhon所采用的探测函数，获得探测链中的下一个待检查的entry
到这里，我们已经清晰地了解了PyDictobject中的搜索策略，现在可以来看一看
我们已经清楚地了解了lookdict检查冲突探测链上的第一个entry时所进行的动作，
需要特别注意的是，如果搜索成功，那么ep一定指向一个有效的entry，直接返回
检查entry中的key与待查找的key是否符合“引用相同”规则。
检查到一个Unused态entry，表明搜索失败，这时有两种结果：
V
如果freeslot不为空，则返回freeslot所指entry;
else
//191:设置freeslot
//I6]:到达Unused态entry，搜索失败
如果freeslot为空，则返回该Unused态entry。
181：检查“值相同”是否成立
(ep->me_hash==hash &&ep->me_key!=dummy)
freeslot=ep:
startkey
retuxn
return ep:
_key==key)
>me_key == durmy && freeslot #=NULL)
0)
NULL2ep:freeslot
Python源码剖析
5.3
PyDictObject的创建和维护
一深度探索动态语言核心技术
8
---
## Page 118
Python源码剖析
88
staticdiotentryLookdict_string(dictobject *mp
[dictobject.c]
代码清单5-4
onghalsh)
1/搜索第二阶段：遍历冲突链，
第5章
EOT
else
reglster
dictentry
register
register
register
太：
1318
技索第一阶段：检查冲突链止第一个ty
21:
if
freeslot
freeslot
return ep:
(IPyString_CheckExaot(key))
/[4]:
一深度探索动态语言核心技术
entry处
me_hash
wep0li
ma
检查Active态eny
init
unsigmed
mask;
epo
十
ep:
Unused
me
aummy)
bash
intperturb
lookdict;
dumnyafreeslotlu）
*ep:
key
NULL)
>ma_table;
hash&&_PyString_Eg(ep->me_key.key))
Derturb1;
检查每一个entry
NULLE
mp=>ma_mask;
设置reeslot
key/y
Pyobiect *key.register
---
## Page 119
5.3.3
象的一个优化版本，而对ryIntObject及其他对象则不闻不问呢？很显然，对于
况。而在lookdict_string中，完全没有了这些处理错误的代码。而另一方面，在lookdict
捕捉错误并处理错误的代码，因为lookdict面对的是pyobject*，所以会出现很多意外情
的优化版本。我们在本章展示的lookdict代码经过了删节，实际上，在lookdict中有许多
作：如果检查不通过，那么就会转向pyDictobject中的通用搜索策略lookdict。
的key是否严格对应一个pyStringobject对象，只有在检查通过后，才会进行下面的动
采用lokdictstring进行搜索，PyString Eq将保证能正确处理非pyStringObject*参数。
entry的key都是ryIntobject对象，只要待搜索的key是PyStringObject对象，都会
设，没有对参与搜索的aict做出任何的假设。这就意味着，即使参与搜索的aict中所有
况下，lokdict_sting才会被使用。需要特别注意的是，这里只对需要搜索的key进行了假
后有一个假设，即待搜索的key是一个PyStringobject对象。只有在这种假设成立的情
代码清单5-5
对象中的搜索策略，对于插入动作也就很容易理解了（见代码清单5-5）
的意义就显得非常重要了，它对Pyhon整体的运行效率都有着重要的影响。
关系。这些对象几乎都是用pyStringobject对象作为entry中的key，所以lookdict_string
量名和变量值之间的对应关系，或是用来在为函数传递参数时维护参数名与参数值的对应
PyIntobject对象，我们同样能够写出一个优化的lookdict_int。
_PyString_Ea，要简单很多，这些因素使得lookdict_string的搜索效率要比lookdict高很
[dictobject.o]
static
(anTEA
ryDictobject对象中元素的插入动作建立在搜索的基础之上，理解了 PyDictobject
插入与删除
原因在于，Python自身大量使用了PyDictobject对象，用来维护一个名字空间中变
那么为什么仅仅是PyStringobject对象呢？Python为什么需要PyStringobject对
可以很清晰地看到，lookdict_string实际上就是一个lookdict对于PyStringDict对象
在代码清单5-4的r0j处，lookdict_string首先会对这种假设进行确定，检查需要搜索
正如我们前面所说，lookdict_string是一种有条件限制的搜索策略。lookdict_ string背
10
5.3PyDictObject的创建和维护
Python源码剖析
一深度探索动态语言核心技术