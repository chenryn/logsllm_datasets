感谢先知邀请，发表下我博客中关于CVE-2017-7269分析，我的ID是：k0shl 微博：我叫0day谁找我_ 希望师傅们能多多指点，感谢!
## CVE-2017-7269 IIS6.0远程代码执行漏洞分析及Exploit
作者：k0shl 转载请注明出处 作者博客：
* * *
## 前言
* * *
CVE-2017-7269是IIS
6.0中存在的一个栈溢出漏洞，在IIS6.0处理PROPFIND指令的时候，由于对url的长度没有进行有效的长度控制和检查，导致执行memcpy对虚拟路径进行构造的时候，引发栈溢出，该漏洞可以导致远程代码执行。
目前在github上有一个在windows server 2003
r2上稳定利用的exploit，这个exp目前执行的功能是弹计算器，使用的shellcode方法是alpha
shellcode，这是由于url在内存中以宽字节形式存放，以及其中包含的一些badchar，导致无法直接使用shellcode执行代码，而需要先以alpha
shellcode的方法，以ascii码形式以宽字节写入内存，然后再通过一小段解密之后执行代码。
github地址：
这个漏洞其实原理非常简单，但是其利用方法却非常有趣，我在入门的时候调试过很多stack
overflow及其exp，但多数都是通过覆盖ret，覆盖seh等方法完成的攻击，直到我见到了这个exploit，感觉非常艺术。但这个漏洞也存在其局限性，比如对于aslr来说似乎没有利用面，因此在高版本windows
server中利用似乎非常困难，windows server 2003 r2没有aslr保护。
在这篇文章中，我将首先简单介绍一下这个漏洞的利用情况；接着，我将和大家一起分析一下这个漏洞的形成原因；然后我将给大家详细介绍这个漏洞的利用，最后我将简要分析一下这个漏洞的rop及shellcode。
我是一只菜鸟，如有不当之处，还望大家多多指正，感谢阅读！
* * *
## 弹弹弹－－一言不合就“弹”计算器
* * *
### 漏洞环境搭建
漏洞环境的搭建非常简单，我的环境是windows server 2003 r2
32位英文企业版，安装之后需要进入系统配置一下iis6.0，首先在登陆windows之后，选择配置服务器，安装iis6.0服务，之后进入iis6.0管理器，在管理器中，有一个windows扩展，在扩展中有一个webdav选项，默认是进入用状态，在左侧选择allow，开启webdav，之后再iis管理器中默认网页中创建一个虚拟目录（其实这一步无所谓），随后选择run->services.msc->WebClient服务，将其开启，这样完成了我的配置。
### 触发漏洞
漏洞触发非常简单，直接在本地执行python
exp.py即可，这里为了观察过程，我修改了exp，将其改成远程，我们通过wireshark抓包，可以看到和目标机的交互行为。
可以看到，攻击主机向目标机发送了一个PROPFIND数据包，这个是负责webdav处理的一个指令，其中包含了我们的攻击数据，一个<>包含了两个超长的httpurl请求，其中在两个http
url中间还有一个lock token的指令内容。
随后我们可以看到，在靶机执行了calc，其进程创建在w2wp进程下，用户组是NETWORK SERVICE。
我在最开始的时候以为这个calc是由于SW_HIDE的参数设置导致在后台运行，后来发现其实是由于webdav服务进程本身就是无窗口的，导致calc即使定义了SW_SHOWNORMAL，也只是在后台启动了。
事实上，这个漏洞及时没有后面的<>中的http url，单靠一个IF:<>也能够触发，而之所以加入了第二个<>以及lock
token，是因为作者想利用第一次和第二次http请求来完成一次精妙的利用，最后在指令下完成最后一击。
我尝试去掉第二次<>以及请求，同样能引发iis服务的crash。
* * *
## CVE-2017-7269漏洞分析
* * *
这个漏洞的成因是在WebDav服务动态链接库的httpext.dll的ScStorageFromUrl函数中，这里为了方便，我们直接来跟踪分析该函数，在下一小节内容，我将和大家来看看整个精妙利用的过程。我将先动态分析整个过程，然后贴出这个存在漏洞函数的伪代码。
在ScStorageFromUrl函数中，首先会调用ScStripAndCheckHttpPrefix函数，这个函数主要是获取头部信息进行检查以及对host
name进行检查。
    0:009> p//调用CchUrlPrefixW获取url头部信息
    eax=67113bc8 ebx=00fffbe8 ecx=00605740 edx=00fff4f8 esi=0060c648 edi=00605740
    eip=671335f3 esp=00fff4b4 ebp=00fff4d0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    httpext!ScStripAndCheckHttpPrefix+0x1e:
    671335f3 ff5024          call    dword ptr [eax+24h]  ds:0023:67113bec={httpext!CEcbBaseImpl::CchUrlPrefixW (6712c72a)}
    0:009> p
    eax=00000007 ebx=00fffbe8 ecx=00fff4cc edx=00fff4f8 esi=0060c648 edi=00605740
    eip=671335f6 esp=00fff4b8 ebp=00fff4d0 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    httpext!ScStripAndCheckHttpPrefix+0x21:
    671335f6 8bd8            mov     ebx,eax
    0:009> dc esi l6//esi存放头部信息，以及server name，这个localhost会在后面获取到。
    0060c648  00740068 00700074 002f003a 006c002f  h.t.t.p.:././.l.
    0060c658  0063006f 006c0061                    o.c.a.l.
在check完http头部和hostname之后，会调用wlen函数获取当前http url长度。
    0:009> p
    eax=0060e7d0 ebx=0060b508 ecx=006058a8 edx=0060e7d0 esi=00605740 edi=00000000
    eip=67126ce8 esp=00fff330 ebp=00fff798 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    httpext!ScStoragePathFromUrl+0x6d:
    67126ce8 50              push    eax
    0:009> p
    eax=0060e7d0 ebx=0060b508 ecx=006058a8 edx=0060e7d0 esi=00605740 edi=00000000
    eip=67126ce9 esp=00fff32c ebp=00fff798 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    httpext!ScStoragePathFromUrl+0x6e:
    67126ce9 ff1550121167    call    dword ptr [httpext!_imp__wcslen (67111250)] ds:0023:67111250={msvcrt!wcslen (77bd8ef2)}
    0:009> r eax
    eax=0060e7d0
    0:009> dc eax
    0060e7d0  0062002f 00620062 00620062 00620062  /.b.b.b.b.b.b.b.
    0060e7e0  61757948 6f674f43 48456b6f 67753646  HyuaCOgookEHF6ug
    0060e7f0  38714433 5a625765 56615435 6a536952  3Dq8eWbZ5TaVRiSj
    0060e800  384e5157 63555948 43644971 34686472  WQN8HYUcqIdCrdh4
    0060e810  71794758 6b55336b 504f6d48 34717a46  XGyqk3UkHmOPFzq4
    0060e820  74436f54 6f6f5956 34577341 7a726168  ToCtVYooAsW4harz
    0060e830  4d493745 5448574e 367a4c38 62663572  E7IMNWHT8Lz6r5fb
    0060e840  486d6e43 61773548 61744d5a 43654133  CnmHH5waZMta3AeC
    0:009> p
    eax=000002fd ebx=0060b508 ecx=00600000 edx=0060e7d0 esi=00605740 edi=00000000
    eip=67126cef esp=00fff32c ebp=00fff798 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    httpext!ScStoragePathFromUrl+0x74:
    67126cef 59              pop     ecx
    0:009> r eax
    eax=000002fd
在利用的关键一次，我们获取的是poc中
    0:009> g//eax存放的是指向url的指针，这里会获取指针的第一个字符，然后和“／”作比较
    Breakpoint 1 hit
    eax=0060e7d0 ebx=0060b508 ecx=006058a8 edx=0060e7d0 esi=00605740 edi=00000000
    eip=67126cd7 esp=00fff334 ebp=00fff798 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    httpext!ScStoragePathFromUrl+0x5c:
    67126cd7 6683382f        cmp     word ptr [eax],2Fh       ds:0023:0060e7d0=002f
    0:009> dc eax
    0060e7d0  0062002f 00620062 00620062 00620062  /.b.b.b.b.b.b.b.
    0060e7e0  61757948 6f674f43 48456b6f 67753646  HyuaCOgookEHF6ug
经过一系列的检查之后，会进入一系列的memcpy函数，主要就是用来构造虚拟文件路径，这个地方拷贝的长度没有进行控制，而拷贝的目标地址，是在外层函数调用stackbuff申请的地址，这个地址会保存在栈里。在ScStorageFromUrl函数中用到，也就是在memcpy函数中用到，作为目的拷贝的地址。
ScStorageFromUrl函数中实际上在整个漏洞触发过程中会调用很多次，我们跟踪的这一次，是在漏洞利用中的一个关键环节之一。首先我们来看一下第一次有效的memcpy
    0:009> p
    eax=00000024 ebx=000002fd ecx=00000009 edx=00000024 esi=00000012 edi=680312c0
    eip=67126fa9 esp=00fff330 ebp=00fff798 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    httpext!ScStoragePathFromUrl+0x32e:
    67126fa9 8db5c4fbffff    lea     esi,[ebp-43Ch]
    0:009> p
    eax=00000024 ebx=000002fd ecx=00000009 edx=00000024 esi=00fff35c edi=680312c0
    eip=67126faf esp=00fff330 ebp=00fff798 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    httpext!ScStoragePathFromUrl+0x334:
    67126faf f3a5            rep movs dword ptr es:[edi],dword ptr [esi]
    0:009> r esi
    esi=00fff35c
    0:009> dc esi
    00fff35c  003a0063 0069005c 0065006e 00700074  c.:.\.i.n.e.t.p.
    00fff36c  00620075 0077005c 00770077 006f0072  u.b.\.w.w.w.r.o.
    00fff37c  0074006f 0062005c 00620062 00620062  o.t.\.b.b.b.b.b.
    00fff38c  00620062 61757948 6f674f43 48456b6f  b.b.HyuaCOgookEH
这次memcpy拷贝过程中，会将esi寄存器中的值拷贝到edi寄存器中，可以看到edi寄存器的值是0x680312c0，这个值很有意思，在之前我提到过，这个buffer的值会在外层函数中申请，并存放在栈中，因此正常情况应该是向一个栈地址拷贝，而这次为什么会向一个堆地址拷贝呢？
这是个悬念，也是我觉得这个利用巧妙的地方，下面我们先进入后面的分析，在memcpy中，也就是rep
movs中ecx的值决定了memcpy的长度，第一次拷贝的长度是0x9。
接下来，回进入第二次拷贝，这次拷贝的长度就比较长了。
    0:009> p//长度相减，0x2fd－0x0
    eax=00000024 ebx=000002fd ecx=00000000 edx=00000000 esi=0060e7d0 edi=680312e4
    eip=67126fc4 esp=00fff330 ebp=00fff798 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    httpext!ScStoragePathFromUrl+0x349:
    67126fc4 2bda            sub     ebx,edx
    0:009> r ebx
    ebx=000002fd
    0:009> r edx
    edx=00000000
    0:009> p
    eax=00000024 ebx=000002fd ecx=00000000 edx=00000000 esi=0060e7d0 edi=680312e4
    eip=67126fc6 esp=00fff330 ebp=00fff798 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    httpext!ScStoragePathFromUrl+0x34b:
    67126fc6 8d3456          lea     esi,[esi+edx*2]
    0:009> p
    eax=00000024 ebx=000002fd ecx=00000000 edx=00000000 esi=0060e7d0 edi=680312e4
    eip=67126fc9 esp=00fff330 ebp=00fff798 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    httpext!ScStoragePathFromUrl+0x34e:
    67126fc9 8b95b0fbffff    mov     edx,dword ptr [ebp-450h] ss:0023:00fff348=680312c0
    0:009> p
    eax=00000024 ebx=000002fd ecx=00000000 edx=680312c0 esi=0060e7d0 edi=680312e4
    eip=67126fcf esp=00fff330 ebp=00fff798 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    httpext!ScStoragePathFromUrl+0x354: