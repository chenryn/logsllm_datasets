Figure 8: Flow start latency macrobenchmarks.
commonly found in virtualized environments. We generated data
plane packets so that they would be handled by the controller;
this made ProvSDN collect, record, and query provenance. All
experiments were performed on a four-core Intel Xeon E7-4850
2.0 GHz CPU with 16 GB of RAM running Ubuntu 16.04.2 LTS.
7.5.1 Macro-benchmarking. Our SDN macro performance met-
ric of interest is flow start latency, which measures the time neces-
sary for a data plane packet that does not match existing flow rules
to be handled by the controller and apps. It represents the delays
experienced from the end host perspective in reactive-based SDN
configurations. The controller’s packet handling will trigger sev-
eral provenance events and checks (e.g., new host event, topology
change event, or flow insertion event).
Figure 8 shows the resulting latencies for a baseline without
ProvSDN, for ProvSDN when IFC is not enforced, and for ProvSDN
with IFC enforced. 30 trials were run for each of the three scenarios.
The average latencies were 11.66 ms, 28.51 ms, and 29.53 ms, respec-
tively. Although ProvSDN increases the baseline latency for packet
handling, as more apps and internal controller services register
to receive events, we note that the higher first-packet latency is
amortized over longer flows, because subsequent packets matched
to flow rules in switches do not need to go to the controller or to
apps (or, by extension, to ProvSDN) for processing. Thus, ProvSDN
needs to operate only on the relatively infrequent control plane
state changes rather than on each individual packet of a flow.
7.5.2 Micro-benchmarking. We measured the additional latency
overheads imposed by 1) collection of provenance, 2) writing of
provenance to the provenance graph, and 3) performance of IFC
checks by querying of the provenance graph. In addition, we mea-
sured 4) the latency imposed by enforcing the rule that apps cannot
call internal controller methods (i.e., the latency imposed by check-
ing protected access as shown in step 2 of Figure 6). From Table 2,
we see that internal method-checking operations impose most of
10
fwdtriggerPacketContexttype = PacketInPacketContexttype = PacketIntrigger:attackwasGeneratedByForwardingObjectivefwd:installRulewasGeneratedBywasAssociatedWithusedfwd:callbackwasAssociatedWithusedwasAssociatedWithwasInformedByfwdtriggerPacketContexttype = PacketInPacketContexttype = PacketIntrigger:attackwasGeneratedBywasAssociatedWithusedfwd:callbackwasAssociatedWithused102030405060Flow start latency [ms]0.000.250.500.751.00CDFBaselineProvSDN (no IFC)ProvSDN (with IFC)Cross-App Poisoning in Software-Defined Networking
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
the additional latency (about 98% of total operations), even though
they impose only a small additional latency per operation (44.67
µs on average). IFC checking is slower but infrequent, because the
queries, in effect, test path connectivity between a source node
(i.e., an entity) and destination nodes (i.e., the system’s agents) in
the provenance graph.
8 DISCUSSION
Extent to Which Controllers Are Affected by CAP. OpenDaylight
[64] provides RBAC services based on the Apache Shiro Java Secu-
rity Framework’s permissions system, though RBAC services are
not enabled by default. The current authorization scheme can be
configured only after the controller starts and is “aimed towards
supporting coarse-grained security policies” [70].
Floodlight [20] does not support RBAC and would thus be sus-
ceptible to CAP attacks. Floodlight provides core controller services
similar to those of ONOS, such as LinkDiscoveryManager, Topolo-
gyService, and MemoryStorageSource. The MemoryStorageSource
data store documentation notes that “all data is shared and there
is no enforcement,” [21] which would make CAP attacks trivial.
SE-Floodlight [68] enforces RBAC but only on permissions for low-
level switch operations rather than for app interactions such as
those with which Security-Mode ONOS provides for ONOS.
Ryu [71], written in Python, does not support RBAC and would
thus be trivially susceptible to CAP attacks. Python does not enforce
public and private access protections.
Finer-Grained RBAC as CAP Mitigation. One way to reduce the
control plane’s attack surface is by implementing finer-grained
RBAC. SDNShield [85], for instance, includes sub-method permis-
sions such as allowing or denying flow entries based on IP source
and destination prefixes. (See Appendix A for further details on how
Security-Mode ONOS implements fine-grained permissions.) We
can represent the finer-grained partitioning of permissions by con-
sidering finer-grained objects o in our cross-app information flow
graph G and finer-grained permissions P in our RBAC model R.
Since the source code for SDNShield was not publicly available, we
were not able to evaluate the extent to which finer-grained RBAC
could help mitigate CAP attacks by using SDNShield. However, we
surmise that finer-grained RBAC will still not solve problems such
as reliance of system-wide apps (e.g., a firewall app that protects an
entire network) on trustworthy information about many objects.
Android. We compare the SDN network OS architecture with
the Android mobile OS architecture, as both architectures include
extensible third-party app ecosystems. While Android apps are
sandboxed and communicate with each other through inter-process
communication (IPC), SDN apps read from and write to a common
shared control plane state over which access control (in practice) has
been coarsely defined. The situation for SDN is more challenging
than that of Android because Android apps can operate relatively
independently of each other, but SDN architectures require greater
coordination among SDN apps to ultimately maintain one main
shared resource (i.e., the data plane) through a limited number of
data structures. This required coordination limits the effectiveness
and practicality of sandboxing and IPC for SDN. As a result of
the SDN shared-state design, maliciously generated data from one
11
SDN app have significant repercussions for any other app that
subsequently uses the data, or for the data plane.
Other IFC Mechanisms. Stack-based access control (SBAC) [5]
and history-based access control (HBAC) [4] propose IFC for Java-
based systems. Jif [54] is a Java extension for enforcing language-
level IFC policies, but it has certain drawbacks. It would require
retrofitting of all apps with IFC policy intents, would require app
developers to know how to program IFC policies, and would not
provide a record of information flow for later analysis. Dynamic
taint analysis tracks information from “sources” entering the system
to “sinks” leaving the system, but dynamic taint analysis is not
as conducive to IFC because there may be a delay between the
occurrence and the detection of an IFC violation [66]. We opted
for data provenance techniques because provenance provides a
historical record of information flow, its collection can be checked in
real time, and its collection is agnostic to the controller’s language.
For Android, TaintDroid [18] labels data from privacy-sensitive
sources (e.g., GPS, camera, or microphone) and applies labels as
sensitive data propagate through program variables, files, and inter-
process messages. However, TaintDroid does not capture the prove-
nance of such interactions, and that limits further analysis. IPC
Inspection [19], like ProvSDN, uses a low-watermark floating la-
bel policy [10] for Android to prevent permission re-delegation.
Quire [16] tracks Android’s IPC calls by annotating each call with
apps that have processed the call. Quire is like ProvSDN in that one
of its goals is to prevent confused deputy attacks, but since SDN
architectures do not use IPC to exchange information, ProvSDN
requires tracking and enforcement at the NB and SB API boundaries
instead. Weir [55] enforces decentralized IFC for Android through
polyinstantiation of applications and their components to reconcile
different security contexts and to avoid label explosion. However, it
is not clear whether such an approach would work with the limited
data structures of the SDN shared state design.
For Web browsers, Bauer et al. [9] implemented and formally ver-
ified an IFC extension to the Chromium Web browser that uses light-
weight taint tracking to track coarse-grained confidentiality and in-
tegrity labels across DOM elements and browser events. ProvSDN
focuses on integrity-based attacks and collects full provenance
metadata to reconstruct previous control plane states.
Limitations. ProvSDN’s floating-label-based IFC design cannot
prevent availability-based attacks in which low-integrity apps at-
tempt to write to many objects to poison them so they cannot
be read by high-integrity apps. The “self-revocation problem” in
low-watermark systems [19, 26] demotes an agent’s integrity level
if the agent observes low-integrity data and then cannot modify
data that it originally generated. The problem is partially mitigated
in ProvSDN through fixed integrity labels for agents (i.e., apps)
and through implicit label propagation (i.e., floating labels) for data
objects. If availability-based attacks are of interest, ProvSDN can
still be useful in identifying such behavior even without initially
enforcing IFC, since ProvSDN will record such object poisoning.
The provenance graph can be used to better inform practitioners
in making decisions on whether such apps’ behaviors are desirable
and whether low-integrity apps should be removed.
ProvSDN with Security-Mode ONOS does not enforce separa-
tion of memory space since ONOS’s OSGi-based container approach
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
B. Ujcich et al.
does not enforce this separation. We rely upon Java’s access modi-
fiers to prevent apps from accessing private data structures. One
alternative design approach would be to transparently separate each
app into its own process and bridge API calls to the controller to
enforce isolation by means of the underlying operating system, but
this would require a significant redesign of the ONOS architecture.
For language-based limitations, see Appendix D.
9 RELATED WORK
SDN Controller Security. Wen et al. [85] note four classes of SDN
controller attacks: data plane intrusions, information leakage, rule
manipulation, and apps’ attacking of other apps. The authors pro-
pose SDNShield for fine-grained RBAC and app isolation policies
to prevent inter-app attacks, but as shown in the cross-app infor-
mation flow graph for Security-Mode ONOS in Figure 3, an app
sandboxing policy is too restrictive in practice, because apps nec-
essarily rely on information generated by other apps in order to
function correctly. The authors claim that the logs from SDNShield
can be used for offline forensic analysis, but it is unclear whether
such logs explicitly show information flow and, if so, how they
do. With ProvSDN, we allow practitioners to flexibly specify their
intents about each app’s integrity assumptions to enforce a de-
sired IFC policy in real time, and our provenance-based approach
captures a history of information flow by design.
Security-Mode ONOS [89] extends the ONOS controller to in-
clude API method-level RBAC enforcement. Rosemary [75] isolates
applications by running each application as an individual process.
SE-Floodlight [68] hardens the control plane by enforcing hier-
archical RBAC policies and logging events through an auditing
subsystem. These systems neither explicitly the track information
flow necessary for detecting CAP attacks nor enforce IFC policies
in real time as can be done with ProvSDN. FRESCO [74] allows
for enforcement of hierarchical flow-rule deconfliction to ensure
that non-security applications cannot undo actions taken by secu-
rity applications; however, this is limited to the controller–switch
interface and provides no protection from CAP attacks.
An orthogonal approach would be to use secure-by-construction
controllers that utilize languages whose type systems guarantee
properties such as app composability [1, 23, 49, 50, 84]. In such
systems, the controller acts more as a language runtime than as an
operating system, and applications are written in a formal language
and composed using logical operators. We consider such controllers
to be sufficiently different from operating-system-like controllers
that they are out of the scope of this paper.
SDN App Security. Malicious apps are arguably one of the most
severe threats to SDN security, as the dynamic configurations avail-
able in SDN architectures can make it challenging to determine
whether the network’s state is (or was) correct according to pol-
icy [14]. Several efforts [39, 42] have outlined attacks similar to CAP
attacks that affect Floodlight, ONOS, and OpenDaylight, though
they did not consider the case in which apps that do not have per-
mission to take actions co-opt other apps that do have such permis-
sions. The authors of [39, 42] propose to use permission checking,
static analysis, and dynamic analysis as defenses; ProvSDN goes
beyond that approach by enforcing IFC policies. Other SDN attacks,
particularly those that rely upon data plane information to make
12
control plane decisions, exist in the literature and are too numerous
to list here; we refer the reader to Lee et al. [41].
Network Verification and Testing. An approach complementary to
that of ProvSDN would be to test whether, and/or formally verify
that, controller or application behavior falls within a set of invari-
ants. VeriFlow [36] and NetPlumber [35], like ProvSDN, perform
real-time invariant checks, but they implicitly assume a monolithic
controller and do not capture the history of information flow that
ProvSDN does. NICE [11] verifies that an application cannot install
flow rules that violate a set of constraints, but does not consider
controller–application interactions. DELTA [41], ATTAIN [81], and
BEADS [34] provide SDN testing frameworks but are necessarily
incomplete because of their reliance on fuzzing.
Provenance in SDN. Provenance-based approaches are just be-
ginning to emerge in the SDN context. GitFlow [17] tracks network
state by committing state changes with a version control system,
but it requires extensive retrofitting of all apps and data plane el-
ements, does not operate in real time, and does not account for
malicious apps. Ujcich et al. [80] consider how provenance can be
used to detect faults from benign application interactions in an
offline manner, but do not consider malicious applications or online
attack detection. Wu et al. [87] leverage meta-provenance to facili-
tate automated repair of a network. Bates et al. [6] demonstrate a
way to improve a previous approach [90] by using SDN to enforce
the monitoring of host-to-host communication. However, those
three efforts considered communications only in the data plane
rather than the control plane.
Provenance tracing is of demonstrated value to network foren-
sic efforts. Zhou et al. [90] consider the task of identifying ma-
licious nodes in a distributed system. Chen et al. [12] diagnose
network problems by reasoning about the differences between two
provenance graphs, while in other work the absence of provenance
relationships has been used to explain network behaviors [88].
10 CONCLUSION
We have demonstrated CAP attacks that allow SDN apps to poi-
son the integrity of the network view seen by the SDN controller
and other SDN apps. CAP attacks take advantage of the lack of
IFC protections within SDN controllers. We show how RBAC so-
lutions to date are inadequate for solving this problem. Using the
Security-Mode ONOS controller as a case study, we also demon-
strate ProvSDN, a provenance-based defense that captures control
plane information flow and enforces online IFC policies for SDN
apps that access or modify the SDN control plane.
ACKNOWLEDGMENTS
The authors thank our shepherd Adwait Nadkarni and the anony-
mous reviewers for their helpful comments, which improved this
paper; Ahmed Fawaz, the PERFORM research group, and the STS
research group at the University of Illinois for their advice and
feedback; and Jenny Applequist for her editorial assistance.
This material is based upon work supported by the Maryland
Procurement Office under Contract No. H98230-18-D-0007 and by