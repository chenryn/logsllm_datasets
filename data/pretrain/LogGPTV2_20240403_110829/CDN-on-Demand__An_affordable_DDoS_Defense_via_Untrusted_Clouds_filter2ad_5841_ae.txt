they leave the origin-gateway machine to one of the CDN-on-
Demand managers (identiﬁed by their addresses). This proce-
dure queues TCP segments until it aggregates m segments to
encapsulate. The method then encodes these segments into n
frames and sends them in UDP packets, all specifying an
identiﬁer that marks they were encoded together.
The second, decoding-method, captures tunneled trafﬁc as
it arrives (UDP trafﬁc to the tunnel’s service port). It queues
the packets until it receives at least m out of the n packets with
the same identiﬁer to allow data recovery. The method decodes
the data and recovers the underlying TCP communication, it
then discards the UDP packets and inserts the recovered TCP
segments into the TCP/IP handling stack instead.
Fig. 12: Client-to-server mapping in CDN-on-Demand
each client ﬁnds and connects to the most responsive proxy in
its region. To ﬁnd the best proxy for a client we integrate a
‘proxy-selection’ module into the RootJS, which periodically
retrieves the list of all active proxies in the client’s geographic
region (in parallel to handling the content from the web server).
The RootJS retrieves the list of available proxies from the
CDN’s domain, e.g., fetching https://site-cdn.com/proxy-list.
If CDN-on-Demand is dormant, then that domain is mapped
to the content-origin’s IP address,
the request reaches the
origin-gateway who provides an empty list. In this case, the
RootJS circumvents the clientless secure-objects mechanism,
and loads content directly from the origin at site.com, over
secure connection. If CDN-on-Demand is active, then the au-
thoritative DNS servers (that managers run) map site-cdn.com
to one of the proxies near the client. The client receives
the proxy-list object from that proxy, which contains the
addresses of available proxy web-servers (a non-empty list).
The resource-manager updates the proxy-list when it deploys
or decommissions a proxy (see the following subsection). Note
that the private TLS key for the site-cdn.com is shared with
the CDN (in contrast to site.com’s key).
The RootJS evaluates the response time provided to the
client by each proxy in the list (in case CDN-on-Demand is
active) by sending a short HEAD request for a test object to
each proxy and measuring the response time. Then, the RootJS
begins using the ﬁrst responding proxy. The RootJS caches
the selected proxy for the next connections and periodically
refreshes it by repeating the selection process.
VI. PROXY SELECTION AND PLACEMENT
B. Proxy Placement and Selection
In Section II we described how and when the resource-
manager decides to activate CDN-on-Demand and to serve
clients from the proxies. In this section we address two related
questions: how to map each client to a server, and where to
deploy proxy servers.
A. Mapping Clients to Web-Servers
An efﬁcient mapping between clients and proxies is key to
reducing latency, which is an important beneﬁt of CDNs. In
the client-to-server mapping process, illustrated in Figure 12,
We now explain how CDN-on-Demand manages the place-
ment of proxy instances, i.e., where and which cloud instances
to invoke, use and close down. The resource-manager monitors
the utility of proxy machines in each region, using the cloud-
provider APIs, which allow access to a variety of metrics
such as CPU and network usage. We modify the number of
proxies in a region when utility crosses a high/low threshold;
in that case,
the resource-manager executes the placement
procedure to ﬁnd the best cloud for hosting an additional
proxy, or the best proxy to remove. For scale-up (adding a
proxy), the procedure also evaluates the expected utility from
11
ClientProxiesHTTP GET site-cdn.com/proxy-listABCHTTP response: proxy-list = [A,B,C]HTTP HEAD A/test, B/test, C/testHTTP 200 OK, Host = A2. Find proxy providing shortest response time1. Identify available proxies3. RootJS retrieves secure-objects from proxy Aadding a proxy, and computes the utility/cost ratio; if beneath
a threshold, the proxy is not added.
Placement procedure. We next describe the placement pro-
cedure upon a scale-up, i.e., deployment of additional proxy
(scaling-down is performed in a similar fashion). To detect
which cloud is the best for deploying the new proxy, the
resource-manager temporarily powers-on one machine on each
cloud for a brief time interval (one minute in our implemen-
tation). The candidate machines are not active proxies, but
used to compare and select the best one. After the evaluation,
each candidate machine either becomes an active proxy, or is
turned off. Deployment of candidate machines for the brief
evaluation step has a low cost; we measured less than 10−4$
per evaluation-step, with our CDN-on-Demand deployment.
During the evaluation step the active CDN proxies dis-
tribute the addresses of candidate machines to their clients,
each client receives one address. Let Cm denote the set of
clients participating in the evaluation of machine m. Through
the RootJS, each client c compares the response time of the
candidate machine m against the response time of the proxy
that it uses. It then reports to the proxy δ(c, m) ≥ 0, which is
the ‘potential improvement’. This is essentially the response
time of the proxy minus the response time of the candidate ma-
chine m (or zero, if m has longer response time). The resource-
manager collects the clients’ reports from the proxies; for each
candidate machine m, it evaluates the average improvement
in response time achieved by activating that machine, up to
a maximal improvement δMAX, preventing one or few values
from disproportionately inﬂuencing the outcome.
(cid:80)
∆(m) =
c∈Cm
min {δMAX, δ(c, m)}
|Cm|
(∀m, ∆(m) ≥ 0)
(2)
The resource-manager then deploys a new proxy on the
machine that provides the highest improvement in response
time, provided that
is over a minimum
threshold, and powers-off all other candidate machines.
the improvement
VII.
IMPLEMENTATION AND EVALUATION
In this section we use a prototype implementation of CDN-
on-Demand (deployed over two commercial clouds) to evaluate
the performance and cost of the whole system. To motivate
adoption of CDN-on-Demand and allow the community to
validate our empirical measurements and results, we pro-
vide source-code of CDN-on-Demand in the project’s web-
site, https://autocdn.org. (Some modules are not yet available
and would be added as soon as we complete a stable version.)
A. Setup
We deployed CDN-on-Demand over EC2 and GCE IaaS
clouds with two managers (one employed as backup), see
deployment
in Figure 3. The managers were implemented
in Python, conﬁgured to use EC2 and GCE APIs to man-
age the proxy machines running Squid HTTP proxy (v3.5).
The content-origin server runs Nginx server (v1.9) and the
origin-gateway is implemented by Python applications running
on a Linux machine (Ubuntu Server 14.04.2). To simulate
geographically-diverse clients accessing the website, we de-
ployed 8K clients over Planet-Lab machines [30] located in
12
Fig. 13: CDN-on-Demand: Performance evaluation
different continents (each machine runs 16 clients). Each client
repeatedly connects to CDN-on-Demand and downloads a
web-page containing a 50KB image from the hosted website.
The website’s content (web-page and image) is cached by the
proxies and managers for a conﬁgured one minute period;
when these objects become stale, they request them again from
the content-origin, simulating the content-update aspect of the
CDN system.
B. Performance Evaluation
Figure 13 illustrates the scaling mechanism of CDN-on-
Demand, dynamically adapting the system to changes in trafﬁc
volumes, client distribution, and server failures. We performed
this set of experiments over a period of 70 minutes. We
introduced events to the system every three minutes and
measured the system’s performance by comparing the trafﬁc
rates, cost, number of clients and number of proxies. We began
the evaluation with the system serving the clients directly from
the content-origin. At this point, the system cost is very low
since the only chargeable instances running are the managers
that monitor content-origin.
To test our system’s resistance to ﬂash crowds, we doubled
the number of clients in the setup, six times, from 128 to
8192 (see lower part of Figure 13). We observe that CDN-on-
Demand quickly detected the load and scaled-up accordingly
(from no servers, i.e., only using content-origin, to 15 servers
during peak load). This is also reﬂected by the momentary
drops in the rate of service provided (top part of Figure 13).
Next, we initiated a BW-DoS (clogging) attack on the
limited content-origin’s link, for three minutes. We used 256
planet lab machines as zombies, sending UDP trafﬁc to the
content-origin IP address at full speed; total transmission rates
were over 200mbps, well above the content-origin’s link limit,
50mbps. Loss-resilient tunnels were automatically established
to protect the communication between the content-origin and
00.511.522.533.544.5501020304050600.2250.230.2350.240.2450.250.2550.26Rate (mbps)Cost in Millicent USD (10-5$)Time (minutes)1. Avg. Download Rate2. Avg. Cost per Client128256512102420484096819201020304050600246810121416Clients (log-scale)ProxiesTime (minutes)3. Clients Served (simultaneously)4. Deployed ProxiesDoS Attackon OriginServerCrashDoS Attackon OriginServerCrashFig. 14: CDN-on-Demand deployment and service snapshot.
Each line represents connections with 16 clients. The system
deploys proxies on GCE (blue pins) and EC2 (red pins).
the CDN (see details in Sections IV, V). We observed only a
small effect on the average download rate (see Figure 13).
Following this, we simulated an IaaS provider failure, by
abruptly powering-off all the proxies in one data-center, which
served 12% of the clients. This caused an immediate decrease
in the average transmission rate, followed by system recovery,
automatically deploying new proxies in a near-by data-center.
We then reduced the number of connected clients (i.e.,
disconnected clients), from 8192 back to 128, again in six
steps, to trigger the scale-down procedure and measure its
impact. We observed that scaling-down the system decreases
utility costs, but does not reduce the transmission rates. The
reason is that most remaining clients still received service from
nearby proxies.
Figure 14 illustrates the geographic distribution of clients
and proxies. This system snapshot was taken 24 minutes into
the experiment, when CDN-on-Demand deployed 5 proxies to
serve 512 clients. The map illustrates the geographic coverage
of CDN-on-Demand and shows that isolated clients connect
to distant proxies, namely, CDN-on-Demand evaluates that
deploying proxies near these clients will not signiﬁcantly
improve its performance.
C. Pricing: Survey and Comparison
In this subsection we evaluate the cost of CDN-on-Demand
in typical scenarios and compare it with commercial CDNs.
Commercial providers offer a variety of pricing plans;
in particular, some offer only ﬁxed-price plans while others
sell optional premium services such as DoS-protection. The
service’s cost varies according to the geographic location of
deployed servers and connecting clients. These pricing models
for committing service packages are contrasted against CDN-
on-Demand, which leverages ﬂexible IaaS clouds to deploy
proxies only when needed, i.e., to handle ﬂash-crowds or DoS
attacks. In benign scenarios, CDN-on-Demand is dormant,
employing only minimal number of machines to monitor
the content-origin server, incurring negligible costs (see Sec-
tion VI).
Methodology. We collected pricing data from several popular
commercial CDNs and compared the costs of egress trafﬁc
(ingress trafﬁc is typically free), ﬁxed monthly fees and trafﬁc
ﬁltering they provide. To estimate the cost of operating CDN-
on-Demand we additionally account for the cost of operating
cloud machines (managers and proxies). Under normal condi-
tions (no attack/ﬂash crowd), this cost is very low since the
TABLE I: Cost comparison with CDN providers. Price quotes
collected during June-July 2015.
system is dormant; the cost increases only when the website
is under heavy-load that causes CDN-on-Demand to scale-up.
It is challenging to compare costs between providers due to
the varying pricing plans provided by each CDN; we therefore
establish a comparable use-case. We evaluate the service cost
per month, assuming a small/medium HTTPS website (i.e.,
requiring SSL/TLS support) that opts-in to using defenses
against DoS attacks (if provided by the CDN), and serves 1TB
of data to legitimate clients. For CDNs charging according to
clients location, we leniently assume only the nearest, ‘lowest-
cost’, clients connect (providing a lower bound for their price).
We then evaluate cost of operating CDN-on-Demand in two
scenarios: (1) a benign month without ﬂash-crowds or DoS
attacks (i.e., CDN-on-Demand is dormant), and (2) a month
with DoS ﬂoods or ﬂash crowds happening 5% of the time.
We study these scenarios under two deployment cases: using
EC2 and GCE – the two popular IaaS providers, and using
ProﬁtBricks and VirtualServer which are cheaper less-popular
ones.
Cost comparison. Our price survey, illustrated in Table I and
in Figure 2, shows that CDN-on-Demand’s price-tag in benign
months is only a few USD and at least one order of magnitude
lower than the ‘next in line’ commercial CDN services. In the
second case, when the system handles ﬂash crowds and DDoS
attacks, CDN-on-Demand’s cost is 5.8 times lower than the
following commercial CDN service when deployed on popular
IaaS clouds (EC2 and GCE) or 12 times lower when deployed
over less popular ones (ProﬁtBricks and VirtualServer). We
note that although some CDN providers advertise free DoS
protection, there are complaints that these services are very
limited and do not sufﬁce to cope even with ﬂash-crowds (e.g.,
see
[11], [19]). Finally, we note that Akamai (one of the
most popular providers) refuses to provide service to smaller
websites which are the focus of this paper.
13
CDN ProviderOut-Traffic (USD/GB)Fixed fee (USD/month)1TB/month Cost (USD/month)Akamainot publishednot publishedRefuses service to small sitesCloudflare0200200Amazon Cloudfront0.08600680Microsoft Azure CDN0.072539111.5Fastly0.08140220Cdn770.039558.2597.75MAXCDN0.05753996.5Cachefly0.294599393.5Cloud Machine (USD/hour)Out-Traffic (USD/GB)Fixed fee (USD/month)1TB/month Cost (USD/month)CDN-on-Demand (on EC2 & GCE), no DoS/flash crowds0.0170.061905.04CDN-on-Demand (on EC2 & GCE),DoS/flash crowds 5% of the time0.0170.0619016.605CDN-on-Demand (on ProfitBricks & VirtualServer),DoS/flash crowds 5% of the time0.0050.02708.136VIII. RELATED WORKS
We survey previous works in two categories, most related
to the CDN-on-Demand architecture: (1) serving web clients