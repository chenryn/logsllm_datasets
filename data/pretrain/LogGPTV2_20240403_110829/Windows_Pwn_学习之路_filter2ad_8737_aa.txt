# Windows Pwn 学习之路
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 前言
近期的比赛中已经出现了很多和Windows pwn有关的题目，因此，本着学习的态度这里将总结我学习Windows Pwn中的学习历程。
本文主要介绍了`Windows Pwn`中环境的搭建以及一些新的机制，辅以部分例题帮助理解。
## 0x02 环境搭建
###  优化Powershell显示
> 优化步骤使用@Lulus的知乎专栏
如果你不喜欢原有的`powershell`显示风格，你可以运行下列命令来更换其显示风格：
    iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
    choco feature enable -n allowGlobalConfirmation
    choco install git
    Install-Module posh-git
    Install-Module oh-my-posh
    Install-Module -Name PSReadLine -Force -SkipPublisherCheck
    Install-Module Get-ChildItemColor -AllowClobber
    Install-Module WindowsConsoleFonts
    if (!(Test-Path -Path $PROFILE )) { New-Item -Type File -Path $PROFILE -Force }
    @"
    #requires -Version 2 -Modules posh-git
    function Write-Theme {
        param(
            [bool]
            `$lastCommandFailed,
            [string]
            `$with
        )
        `$lastColor = `$sl.Colors.PromptBackgroundColor
        `$prompt = Write-Prompt -Object `$sl.PromptSymbols.StartSymbol -ForegroundColor `$sl.Colors.PromptForegroundColor -BackgroundColor `$sl.Colors.SessionInfoBackgroundColor
        #check the last command state and indicate if failed
        If (`$lastCommandFailed) {
            `$prompt += Write-Prompt -Object "`$(`$sl.PromptSymbols.FailedCommandSymbol) " -ForegroundColor `$sl.Colors.CommandFailedIconForegroundColor -BackgroundColor `$sl.Colors.SessionInfoBackgroundColor
        }
        #check for elevated prompt
        If (Test-Administrator) {
            `$prompt += Write-Prompt -Object "`$(`$sl.PromptSymbols.ElevatedSymbol) " -ForegroundColor `$sl.Colors.AdminIconForegroundColor -BackgroundColor `$sl.Colors.SessionInfoBackgroundColor
        }
        `$user = [System.Environment]::UserName
        `$computer = [System.Environment]::MachineName
        `$path = Get-FullPath -dir `$pwd
        if (Test-NotDefaultUser(`$user)) {
            `$prompt += Write-Prompt -Object "`$user@`$computer " -ForegroundColor `$sl.Colors.SessionInfoForegroundColor -BackgroundColor `$sl.Colors.SessionInfoBackgroundColor
        }
        if (Test-VirtualEnv) {
            `$prompt += Write-Prompt -Object "`$(`$sl.PromptSymbols.SegmentForwardSymbol) " -ForegroundColor `$sl.Colors.SessionInfoBackgroundColor -BackgroundColor `$sl.Colors.VirtualEnvBackgroundColor
            `$prompt += Write-Prompt -Object "`$(`$sl.PromptSymbols.VirtualEnvSymbol) `$(Get-VirtualEnvName) " -ForegroundColor `$sl.Colors.VirtualEnvForegroundColor -BackgroundColor `$sl.Colors.VirtualEnvBackgroundColor
            `$prompt += Write-Prompt -Object "`$(`$sl.PromptSymbols.SegmentForwardSymbol) " -ForegroundColor `$sl.Colors.VirtualEnvBackgroundColor -BackgroundColor `$sl.Colors.PromptBackgroundColor
        }
        else {
            `$prompt += Write-Prompt -Object "`$(`$sl.PromptSymbols.SegmentForwardSymbol) " -ForegroundColor `$sl.Colors.SessionInfoBackgroundColor -BackgroundColor `$sl.Colors.PromptBackgroundColor
        }
        # Writes the drive portion
        `$prompt += Write-Prompt -Object "`$path " -ForegroundColor `$sl.Colors.PromptForegroundColor -BackgroundColor `$sl.Colors.PromptBackgroundColor
        `$status = Get-VCSStatus
        if (`$status) {
            `$themeInfo = Get-VcsInfo -status (`$status)
            `$lastColor = `$themeInfo.BackgroundColor
            `$prompt += Write-Prompt -Object `$(`$sl.PromptSymbols.SegmentForwardSymbol) -ForegroundColor `$sl.Colors.PromptBackgroundColor -BackgroundColor `$lastColor
            `$prompt += Write-Prompt -Object " `$(`$themeInfo.VcInfo) " -BackgroundColor `$lastColor -ForegroundColor `$sl.Colors.GitForegroundColor
        }
        # Writes the postfix to the prompt
        `$prompt += Write-Prompt -Object `$sl.PromptSymbols.SegmentForwardSymbol -ForegroundColor `$lastColor
        `$timeStamp = Get-Date -UFormat %r
        `$timestamp = "[`$timeStamp]"
        `$prompt += Set-CursorForRightBlockWrite -textLength (`$timestamp.Length + 1)
        `$prompt += Write-Prompt `$timeStamp -ForegroundColor `$sl.Colors.PromptForegroundColor
        `$prompt += Set-Newline
        if (`$with) {
            `$prompt += Write-Prompt -Object "`$(`$with.ToUpper()) " -BackgroundColor `$sl.Colors.WithBackgroundColor -ForegroundColor `$sl.Colors.WithForegroundColor
        }
        `$prompt += Write-Prompt -Object (`$sl.PromptSymbols.PromptIndicator) -ForegroundColor `$sl.Colors.PromptBackgroundColor
        `$prompt += ' '
        `$prompt
    }
    `$sl = `$global:ThemeSettings #local settings
    `$sl.PromptSymbols.StartSymbol = ''
    `$sl.PromptSymbols.PromptIndicator = [char]::ConvertFromUtf32(0x276F)
    `$sl.PromptSymbols.SegmentForwardSymbol = [char]::ConvertFromUtf32(0xE0B0)
    `$sl.Colors.PromptForegroundColor = [ConsoleColor]::White
    `$sl.Colors.PromptSymbolColor = [ConsoleColor]::White
    `$sl.Colors.PromptHighlightColor = [ConsoleColor]::DarkBlue
    `$sl.Colors.GitForegroundColor = [ConsoleColor]::Black
    `$sl.Colors.WithForegroundColor = [ConsoleColor]::DarkRed
    `$sl.Colors.WithBackgroundColor = [ConsoleColor]::Magenta
    `$sl.Colors.VirtualEnvBackgroundColor = [System.ConsoleColor]::Red
    `$sl.Colors.VirtualEnvForegroundColor = [System.ConsoleColor]::White
    "@>"C:Program FilesWindowsPowerShellModulesoh-my-posh2.0.443ThemesParadox.psm1"
    @"
    chcp 65001
    Set-PSReadlineOption -EditMode Emacs
    function which(`$name) { Get-Command `$name | Select-Object Definition }
    function rmrf(`$item) { Remove-Item `$item -Recurse -Force }
    function mkfile(`$file) { "" | Out-File `$file -Encoding ASCII }
    Import-Module posh-git
    Import-Module oh-my-posh
    Import-Module Get-ChildItemColor
    Import-Module WindowsConsoleFonts
    Set-Alias l Get-ChildItemColor -option AllScope
    Set-Alias ls Get-ChildItemColorFormatWide -option AllScope
    Set-Theme Paradox
    "@ > $PROFILE
    chcp 65001
    Set-PSReadlineOption -EditMode Emacs
    Import-Module posh-git
    Import-Module oh-my-posh
    Import-Module Get-ChildItemColor
    Import-Module WindowsConsoleFonts
    Set-Alias l Get-ChildItemColor -option AllScope
    Set-Alias ls Get-ChildItemColorFormatWide -option AllScope
    Set-Theme Paradox
    git clone https://github.com/powerline/fonts.git
    cd .fonts
    .install.ps1
    cd ..
    del .fonts -Recurse -Force
**⚠️：`Line 92`需要修改为你的本地正确地址！**
在那之后，修改`Powershell -> 首选项 -> 字体`
在那之后，修改`Powershell -> 首选项 -> 颜色 -> 屏幕背景`
###  配置Python2以及Python3环境
配置方法及过程此处不再赘述，但是注意，若因为优化了`PowerShell`而导致了`LookupError: unknown encoding:
cp65001`，则需要添加一个环境变量：
###  安装winpwn
`winpwn`更类似于`pwntools`，用于本地的程序调试以及连接远程。
使用以下命令安装`winpwn`这个包，并且安装相关依赖：
    pip install winpwn
    pip install pefile
    pip install keystone-engine
    pip install capstone
###  安装winchecksec
`winchecksec`更类似于`checksec`，用于`Windows`程序的保护检查。
使用以下命令安装`winchecksec`，并且安装相关依赖：
    vcpkg install pe-parse:x86-windows
    vcpkg install pe-parse:x64-windows
    vcpkg install uthenticode:x86-windows
    vcpkg install uthenticode:x64-windows
    git clone https://github.com/trailofbits/winchecksec.git
    cd winchecksec
    mkdir build
    cd build
    cmake ..
    cmake --build . --config Release
**⚠️注意：这里首先需要安装`vcpkg`作为核心依赖项**，可以使用如下方法安装：
    git clone https://github.com/Microsoft/vcpkg.git
    cd vcpkg
    .vcpkg.exe integrate install
这里需要特别注意，如果在执行`.bootstrap-vcpkg.bat`时发生`error MSB8040: 此项目需要缓解了 Spectre 漏洞的库。从
Visual Studio 安装程序(单个组件选项卡)为正在使用的任何工具集和 体系结构安装它们。了解详细信息:
https://aka.ms/Ofhn4`则需要打开`VisualStudio 2019 -> 修改 ->
单个组件`找到`编译器、生成工具和运行时`选项组，勾选安装 **最新版本** 的带`Spectre 漏洞`缓解的相关运行库。
⚠️注意：使用`vcpkg`安装结束后需要进行环境变量的配置：
###  配置调试器
在`Windows`下，我们常用的调试器有：`x64dbg`、`Windbg(Windows 10)`、`gdb`、`WindbgX(Windbg
Preview)`。
  1. 对于`x64dbg`，直接从  下载即可。
  2. 对于`Windbg(Windows 10)`，需要先安装`Windows SDK`(可通过`Visual Studio`来进行安装)，然后在应用和功能处修改添加。
  3. 对于`GDB`，需要通过[`MinGW-w64`](https://sourceforge.net/projects/mingw-w64/)来进行安装。
  4. 对于`WindbgX(Windbg Preview)`需要通过微软应用商店下载。
  5. 对于以上所有的工具，为了能用`winpwntools`直接唤起，需要进行额外配置，首先下载[`Pykd-Ext`](https://github.com/hac425xxx/pykd-ext/releases/tag/pykd_ext_2.0.0.24)，需要注意的是，`Pykd-Ext`和`Pykd`是不同的两个插件。将下载下来的两个`dll`分别放置在正确的位置。在`$HOME`文件夹下建立文件`.winpwn`，内容如下： 
        {
        "debugger":{
            "i386": {
                "x64dbg": "C:\Program Files (x86)\x64debug\release\x32\x32dbg.exe", 
                "gdb": "", 
                "windbg": "C:\Program Files (x86)\Windows Kits\10\Debuggers\x86\windbg.exe",
                "windbgx": "C:\Users\error404\AppData\Local\Microsoft\WindowsApps\Microsoft.WinDbg_8wekyb3d8bbwe\WinDbgX.exe"
            },
            "amd64": {
                "x64dbg": "C:\Program Files (x86)\x64debug\release\x64\x64dbg.exe", 
                "gdb": "", 
                "windbg": "C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\windbg.exe",
                "windbgx": "C:\Users\error404\AppData\Local\Microsoft\WindowsApps\Microsoft.WinDbg_8wekyb3d8bbwe\WinDbgX.exe"
            }
        },
        "debugger_init": {
            "i386": {
                "x64dbg": "", 
                "gdb": "", 
                "windbg": ".load C:\Program Files (x86)\Windows Kits\10\Debuggers\x86\ext\pykd.dll;!py -g C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\ext\byinit.py;",
                "windbgx": ".load C:\Users\error404\AppData\Local\Microsoft\WindowsApps\Microsoft.WinDbg_8wekyb3d8bbwe\ext32\pykd.dll;!py -g C:\Users\error404\AppData\Local\Microsoft\WindowsApps\Microsoft.WinDbg_8wekyb3d8bbwe\ext32\byinit.py;"
            },
            "amd64": {
                "x64dbg": "", 
                "gdb": "", 
                "windbg": ".load C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\ext\pykd.dll;!py -g C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\ext\byinit.py;",
                "windbgx": ".load C:\Users\error404\AppData\Local\Microsoft\WindowsApps\Microsoft.WinDbg_8wekyb3d8bbwe\ext64\pykd.dll;!py -g C:\Users\error404\AppData\Local\Microsoft\WindowsApps\Microsoft.WinDbg_8wekyb3d8bbwe\ext64\byinit.py;"
            }
        }
    }
⚠️：路径请自行调整。
## 0x03 Windows Pwn 基本知识
###  函数调用约定
  1. 由于函数调用约定大多只和架构相关，因此和`Linux`相比没有太大的变化。
###  `Windows`程序保护
`Windows`下有部分程序保护更换了名字或者有一些细节发生了改变，我们来详细列举。
  1. `ASLR`：与`Linux`相同，`ASLR`保护指的是地址随机化技术(`Address Space Layout Randomization`)，这项技术将在程序启动时将`DLL`随机的加载到内存中的位置，这将缓解恶意程序的加载。`ASLR`技术自`Windows 10`开始已经在系统中被配置为默认启用。
  2. `High Entropy VA`：这个保护被称为高熵64位地址空间布局随机化，一旦开启，表示此程序的地址随机化的取值空间为`64 bit`，这会导致攻击者更难去推测随机化后的地址。
  3. `Force Integrity`：这个保护被称为强制签名保护，一旦开启，表示此程序加载时需要验证其中的签名，如果签名不正确，程序将会被阻止运行。
  4. `Isolation`：这个保护被称为隔离保护，一旦开启，表示此程序加载时将会在一个相对独立的隔离环境中被加载，从而阻止攻击者过度提升权限。
  5. `NX/DEP/PAE`：与`Linux`相同，`NX`保护指的是内存页不可运行(`No-eXecute`)，这项技术是一项系统级的内存保护功能，使操作系统能够将一页或多页内存标记为不可执行，从而防止从该内存区域运行代码，以帮助防止利用缓冲区溢出。它帮助防止代码在数据页面(例如堆，栈和内存池)中运行，在`Windows`中常称为`DEP`(数据执行保护，即`Data Execution Prevention`)，同时引入了一个新的机制被称为`PAE`(物理地址扩展，即`Physical Address Extension`)，`PAE`是一项处理器功能，使`x86`处理器可以在部分`Windows`版本上访问`4 GB`以上的物理内存。在基于`x86`的系统上运行的某些`32`位版本的`Windows Server`可以使用`PAE`访问最多`64 GB`或`128 GB`的物理内存，具体取决于处理器的物理地址大小。使用`PAE`，操作系统将从两级线性地址转换转换为三级地址转换。两级线性地址转换将线性地址拆分为三个独立的字段索引到内存表中，三级地址转换将其拆分为四个独立的字段：一个2位的字段，两个9位的字段和一个12位的字段。`PAE`模式下的页表条目(`PTE`)和页目录条目(`PDE`)的大小从32位增加到64位。附加位允许操作系统PTE或PDE引用4 GB以上的物理内存。同时，`PAE`将允许在基于`x64`的系统上运行的32位`Windows`中启用`DEP`等功能。
  6. `SEHOP`：即结构化异常处理保护(`Structured Exception Handling Overwrite Protection`)，这个保护能够防止攻击者利用结构化异常处理来进行进一步的利用。
  7. `CFG`：即控制流防护(`Control Flow Guard`)，这项技术通过在间接跳转前插入校验代码，检查目标地址的有效性，进而可以阻止执行流跳转到预期之外的地点， 最终及时并有效的进行异常处理，避免引发相关的安全问题。  
简单的说，就是在程序间接跳转之前，会判断这个将要跳转的地址是否是合法的。
  8. `RFG`：即返回地址防护(`Return Flow Guard`)，这项技术会在每个函数头部将返回地址保存到`fs:[rsp]`(`Thread Control Stack`)，并在函数返回前将其与栈上返回地址进行比较，从而有效阻止了这些攻击方式。
  9. `SafeSEH`：即安全结构化异常处理(`Safe Structured Exception Handlers`)，这项技术可以理解为一个白名单版的安全沙箱，它会事先为你定义一些异常处理程序，并基于此构造安全结构化异常处理表，程序正式运行后，安全结构化异常处理表之外的异常处理程序将会被阻止运行。
  10. `GS`：这个保护类似于`Linux`中的`Canary`保护，一旦开启，会在返回地址和`BP`之前压入一个额外的`Security Cookie`。系统会比较栈中的这个值和原先存放在`.data`中的值做一个比较。如果两者不吻合，说法栈中发生了溢出。
  11. `Authenticode`：签名保护。
  12. `.NET`：`DLL`混淆级保护。
### 新机制——结构化异常处理(`SEH`机制)
结构化异常处理是`Windows`操作系统上`Microsoft`对`C/C++`程序语言做的语法扩展，用于处理异常事件的程序控制结构。异常事件是指打断程序正常执行流程的不在期望之中的硬件、软件事件。硬件异常是CPU抛出的如“除0”、数值溢出等；软件异常是操作系统与程序通过`RaiseException`语句抛出的异常。`Microsoft`扩展了C语言的语法，用`try-except`与`try-finally`语句来处理异常。异常处理程序可以释放已经获取的资源、显示出错信息与程序内部状态供调试、从错误中恢复、尝试重新执行出错的代码或者关闭程序等等。一个`__try`语句不能既有`__except`，又有`__finally`。但`try-except`与`try-finally`语句可以嵌套使用。
####  `SEH`相关的重要结构体
#####  TIB结构体
`TIB`(`Thread Information
Block`，线程信息块)是保存线程基本信息的数据结构，它存在于`x86`的机器上，它也被称为是`Win32`的`TEB`(`Thread
Environment Block`，线程环境块)。`TIB/TEB`是操作系统为了保存每个线程的私有数据创建的，每个线程都有自己的`TIB/TEB`。
`TEB`结构位于`Windows.h`，内容如下：
    typedef struct _TEB {
      PVOID Reserved1[12];
      PPEB  ProcessEnvironmentBlock;
      PVOID Reserved2[399];
      BYTE  Reserved3[1952];
      PVOID TlsSlots[64];
      BYTE  Reserved4[8];
      PVOID Reserved5[26];