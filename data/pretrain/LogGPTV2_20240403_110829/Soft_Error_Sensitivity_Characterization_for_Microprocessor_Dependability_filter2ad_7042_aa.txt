title:Soft Error Sensitivity Characterization for Microprocessor Dependability
Enhancement Strategy
author:Seongwoo Kim and
Arun K. Somani
Soft Error Sensitivity Characterization for Microprocessor Dependability
Enhancement Strategy
Seongwoo Kim and Arun K. Somani
Department of Electrical and Computer Engineering
Iowa State University, Ames, IA 50010-3060, USA, fskim,PI:EMAIL
Abstract
This paper presents an empirical investigation on the
soft error sensitivity (SES) of microprocessors, using the
picoJava-II as an example, through software simulated fault
injections in its RTL model. Soft errors are generated un-
der a realistic fault model during program run-time. The
SES of a processor logic block is deﬁned as the probability
that a soft error in the block causes the processor to be-
have erroneously or enter into an incorrect architectural
state. The SES is measured at the functional block level.
We have found that highly error-sensitive blocks are com-
mon for various workloads. At the same time soft errors
in many other logic blocks rarely affect the computation in-
tegrity. Our results show that a reasonable prediction of the
SES is possible by deduction from the processor’s microar-
chitecture. We also demonstrate that the sensitivity-based
integrity checking strategy can be an efﬁcient way to im-
prove fault coverage per unit redundancy.
1. Introduction
Microprocessors are used in a variety of applications
from small calculators to multi-million dollar servers. As
we become more dependent upon microprocessor-based
systems, increasing attention is paid not only to the proces-
sors’ computing throughput but also its dependability. Even
if a microprocessor is shipped with no design errors or man-
ufacturing defects, unstable environmental conditions can
generate temporary hardware failures. These failures, called
transient faults, cause the processor to malfunction during
operation time. The major sources of transient faults are
electro-magnetic interference, power jitter, alpha particles,
and cosmic rays. Studies in [1], [2], [3] show that the vast
majority of detected errors originate from transient faults.
An incorrect state of a processor component manifesting
the transient fault is referred to as a soft error. The soft
error can propagate to other components. Even a single-bit
error may eventually lead the processor to computation fail-
ure. Therefore, managing the soft error is a critical problem
to solve in fully realizing dependable computing.
Advances in VLSI technology have reduced circuit di-
mensions and improved processor performance dramati-
cally, yet these advances are offset by an increased vulner-
ability to soft errors. Careful design practices, new fabrica-
tion materials with better fault-immunity and circuit-level
techniques may lower the soft error rate, but it is not sufﬁ-
cient to prevent the errors from occurring. External distur-
bances cannot be completely blocked by enhanced shielding
and packaging. Therefore, we attempt to design the proces-
sors to be tolerant of harmful impacts caused by soft errors.
Unfortunately, research in the area of processor dependabil-
ity has been generally limited to a few critical applications.
A wide choice of fault tolerant processors should be made
available for diverse applications.
Understanding the processor’s behavior in the presence
of soft errors has a fundamental value in devising fault tol-
erant techniques. Fault injection methodologies can be used
for that purpose [4], [5]. Faults are intentionally created in
the processor with special software and/or hardware tools
and the operations are monitored. Ideally, the criteria of de-
termining the protection requirement for a processor should
include soft error rate and actual failure observation analy-
sis, but mostly they are approximated. Even if reasonably
accurate information is available to microprocessor manu-
facturers, it is generally not available to researcher for a long
time. Soft error studies on commercial products have been
rare in academia because of limited access to detailed pro-
cessor models and/or experiment equipments. Therefore, it
is not easy to ﬁnd comprehensive knowledge of soft error
characteristics for various microprocessors.
This paper presents a case study of soft error character-
ization using picoJava-II, which is a microprocessor core
developed by Sun Microsystems. The register transfer level
(RTL) model of the picoJava-II became publicly available in
1999 to enable different groups of researchers to study, ex-
tend, and improve this commercial product. Our major ef-
fort here is to gain a good insight into the picoJava-II core’s
behavior under faulty environment. We employ a software
simulated fault injection method and observe how much the
core is susceptible to transient faults while executing pro-
grams. We believe that these results will be useful for fault
tolerant microprocessor design. We also identify and char-
acterize dominant factors that affect the processor’s sensi-
tivity to the faults. This kind of investigation results into
understanding that can be used by the designers to signiﬁ-
cantly reduce the overhead for integrity checking and max-
imize protection capability. This paper also substantiates
such a synergetic case and provides a guideline for low-cost
dependability enhancement.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:17:34 UTC from IEEE Xplore.  Restrictions apply. 
2. Fault Injection into Microprocessors
Transient faults can be injected into a microprocessor in
many ways. Each method offers different controllability
over the time and location of the fault injection, the level
of perturbation to the processor, and simulation time and
cost requirement. Commonly used hardware methods are
pin-level injection [6], [7], heavy-ion radiation [8], [9], and
electro-magnetic disturbances [10], [11]. Recently, non-
destructive laser has also been introduced [12], [13]. All of
these methods closely imitate real fault situations, but they
are usually expensive and applicable only after the phys-
ical chip is available. On the other hand, software fault
injection is a low-cost method that can also be applied to
programs and operating systems as well [14], [15]. Soft-
ware methods can be classiﬁed into two classes. The ﬁrst
class is software-implemented method, where the proces-
sor state or programs are modiﬁed during compile or run
time and the injection takes place on real hardware. The
other class is simulation-based method, where the proces-
sor, workload, and fault injections are all modeled in soft-
ware simulation. In general, the latter is more ﬂexible than
the former as it provides better controllability of fault injec-
tion and observability of system behavior. In this paper, we
use a simulation-based approach.
Several tools have been developed to automate fault in-
jection experiments and analyze the observations made dur-
ing the experiments [4], [5]. GOOFI in [16] is another
object-oriented injection tool that is designed to be portable
to different platforms. The efﬁciency of diverse fault in-
jection tools is compared in [17]. An advanced tool re-
duces simulation time by conducting more than one injec-
tion simultaneously, and also supports event handling mech-
anisms and multiple system/fault models. Since fault simu-
lation space is so large, it is always very challenging to ob-
tain accurate behavior analysis in an acceptable time frame.
Therefore, proper fault injection tool and technique needs to
be selected after careful examination for each target proces-
sor. In our study, we use existing techniques, but suitably
modify them for the picoJava-II core and our experimental
environment. This is explained in detail in Section 4.
Emulated fault models affect the fault manifestation.
The most common method to model the transient fault is
logic inversion, where each fault ﬂips some logic signals
temporarily. A study in [18] indicates that error behav-
ior modeling is dependent on workload and hence various
workloads need to be considered. However, there may also
be common characteristics over different workloads that can
be used in fault tolerance design. For example, SimR2K, a
32-bit RISC tested in [19], exhibited very similar sensitivity
patterns when faults were injected for several workloads.
More importantly, the effects of transient faults strongly
vary with processor architecture and possibly fault injec-
tion methodology.
In [20], a jet engine controller called
HS1602 was upset by current and voltage transients. The re-
sults show that faults in the arithmetic unit are most likely to
propagate and result in logic failure. In another experiment,
RTL model of the IBM RT PC was injected with single-
cycle inverted transient faults in [21]. About 60(cid:24)70% of
injected faults were overwritten. The study also reports that
the attributes of the workload such as instruction types and
control ﬂow structures are good indicators of error behav-
ior. Nevertheless, this claim has not been fully veriﬁed and
the hardware organization might have more direct impacts.
Another software modeled 32-bit RISC, called TRIP, was
tested using VHDL in [22]. The fault injection was per-
formed by toggling the value of randomly chosen internal
state element bits. While 34% of faults were overwritten at
run-time, only 23% of faults were effective, i.e., the faults
resulted in processor failure. It should be noted that pro-
cessors are capable of masking out some faults without any
intended fault protection mechanism.
Other systems or processors investigated for error be-
havior include MC6809E with heavy-ion radiation and
power supply disturbance [9], MC68000 with device-level
simulation [23], SPARC1 system with physical injection
[24], MC88100 with combination of software-implemented
and simulation-based fault injection [25], DP32 [26] and
MC68302 [27] with VHDL simulations, and MARK2 with
simulated stuck-at and open-line faults [28]. All these stud-
ies support the fact that each processor has a distinct level
of sensitivity to soft errors, and therefore, a new design re-
quires separate dependability evaluations and may be engi-
neered for lower sensitivity.
Once a soft error occurs in a logic block of a processor,
its propagation nature is mainly deﬁned by the architecture
and workload of the processor. On the other hand, how of-
ten the soft error occurs, transient upset rate, is affected by
the fabrication process and circuit technology. More upsets
mean higher probabilities of soft error occurrence. In [29],
the same heavy ion was individually radiated into three units
of an ERC32 processor, and upset rates were different be-
cause the units employed diverse circuit types. Errors were
observed mostly in the register ﬁle and some in the combi-
national logic. Circuits of the integer unit were more sus-
ceptible to the ions than those of ﬂoating point and memory
control units. Another radiation testing on 486DX4 micro-
processors [30] shows that different implementations of a
common processor architecture result in susceptibility vari-
ation. When six 486DX4 processors from AMD and Intel
were bombarded with radiation beams, AMD’s chips were
more susceptible than Intel’s. In the experiment, the feature
size of AMD’s was smaller than Intel’s.
This paper focuses on what impacts soft errors make on
the computation (in picoJava-II core) rather than how often
faults generate the soft errors in the processor. Thus, our
study is independent of implementation and process tech-
nology. The purpose is to obtain susceptibility indices for
various parts to create a base for the development of archi-
tectural solutions.
3. PicoJava-II Microprocessor
The picoJava-II is a microprocessor core uniquely de-
signed for directly executing Java byte-code instructions
deﬁned by the Java Virtual Machine (JVM) in hardware,
and it is used for cost-sensitive embedded applications [31].
The core includes a six-stage RISC pipeline and instruction
folding capability (a process of loading and executing an in-
struction in a single cycle). Chips based on the picoJava-II
are well suited for a wide range of information appliances
such as digital set-top boxes, Internet TVs, personal digi-
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:17:34 UTC from IEEE Xplore.  Restrictions apply. 
tal assistants, etc. As the use of such products increases,
their malfunctions due to transient faults may cause serious
loss of time, money, or even worse. Dependability will be-
come a more important quality measure for these products
as well. Therefore, sufﬁcient estimation and enhancement
of dependability are imperative.
The picoJava-II core we use in this study is a soft in-
tellectual property (IP) as opposed to hard IP under the
Sun community source licensing program [32]. The soft
IP described in Verilog, a hardware description language
for logic design, speciﬁes the detailed implementation of
the picoJava-II core and completely simulates the real chip.
To make the chip more suitable for a particular application,
some features of the core can be reconﬁgured. However, we
consider a core with the standard features in the original IP.
1
IU
DCU
5
PCSU
10
8
FPU
Register control
unit
e
d
o
c
o
r
c
M
i
Execution
unit
9
SMU
FP RAM0
FP RAM1
Floating point
Logic
2
ICU
3
ITAG
4
ICRAM
6
DTAG
Data cache
Data cache
RAM0
RAM1
Pipe
control
unit
Instruction
folding
unit
C
M
E
M
Memory
bus
11
BIU
7
DCRAM
Figure 1. Block diagram of the picoJava-II.
A full description of the picoJava-II core architecture is
presented in [32]. Figure 1 illustrates our ﬂoor plan for an
implementation of the picoJava-II. The area ratios among
functional unit blocks (FUBs) are approximated by using
picoJava-II synthesis results from [33]. When the area is
measured in terms of 2-input NAND equivalent gates, more
than 69% of the chip is devoted to cache memory arrays
and control logic. The FUBs of the processor core are
(1) integer unit (IU); (2) instruction cache unit (ICU); (3)
instruction cache tag (ITAG); (4) instruction cache RAM
(ICRAM); (5) data cache unit (DCU); (6) data cache tag
(DTAG); (7) data cache RAM (DCRAM); (8) ﬂoating point
unit (FPU); (9) stack manager unit (SMU); (10) power-
down, clock, and scan unit (PCSU); (11) bus interface unit
(BIU); and external memory controller (MEMC).
The IU decodes and executes instructions from an in-
struction buffer (I-buffer).
It forwards ﬂoating point in-
structions to the FPU and communicates with the DCU for
data. The IU consists of a 32-bit ALU and shifter, a mul-
tiply/divide unit, a microcode ROM implementing multi-
cycle instructions, registers, a 64-entry stack cache (SC),
and trap generation/dependency checking/forwarding logic.
The ICU controls a 16-KB direct-mapped instruction cache
(I-cache) and the I-buffer. It fetches and dispatches instruc-
tions to the decode unit of the IU. The ITAG contains 1024
19-bit tags. Each tag corresponds to its associated line of
4 words in an ICRAM. The ICRAM holds instructions in a
RAM of 2048 entries by 64 bits. The DCU handles sourcing
and sinking of data from/to a data cache (D-cache) for load
and store instructions. The D-cache consists of a 102424-
bit DTAG and a 409632-bit DCRAM, conﬁgured for 16-
KB with 16-byte line, 2-way set associative, write-back, and
write-allocate. The FPU executes the ﬂoating point instruc-
tions. The SMU handles overﬂow and underﬂow conditions
of the SC. The PCSU integrates power management, clock
generation, system reset, scan, and test. The BIU is the in-
terface between the core and external world via the MEMC.
The MEMC is the interface between the BIU and external
devices such as memory and I/O.
4. Experimental Setup
We conducted a set of transient fault injection simula-
tions on the RTL model of the picoJava-II processor. This
model has been synthesized, validated, and optimized by
several commercial vendors and universities. Based on a
fault model we deﬁned, the faults were simulated entirely
in software while each application program was running.
Our fault model basically follows the conventional signal
inversion approach, but it is not restricted to a single-bit
failure. The probability of a fault occurrence is uniformly
distributed over operation time and logic location. A fault
in a logic block is manifested as a logic value toggle of its
output signals, from 0 to 1 or from 1 to 0. Multiple signal
bits can be corrupted by a single fault.
In our experiments, fault injection location (FILs) in the
processor is determined on a minimal logic block basis.
Each FUB shown in Figure 1 is divided into sub-blocks af-
ter examining error propagation paths with test generation
rules. If logic elements in a FUB have common fault effects
on an output signal of the FUB, i.e., fault equivalent logic,
they are grouped together and treated as a single FIL. Con-
sequently, a FIL is a logic sub-block responsible for produc-
ing an output signal of a FUB, and a fault in the FIL means
a soft error in the corresponding output signal.
The fault injections are carried out through software in-
terfaces appended to the processor. Our interface is placed
at each output port of the FUB, and it takes the output signal
and produces a simulated output signal under the fault sim-
ulation control. This simulation control is another software
module that allows us to control the fault type and injection
timing and duration. The total number of error bits per in-
jection is chosen randomly with a minimum value of 1. The
fault mask randomly speciﬁes bit positions for the signal in-
version. Although the injection interfaces are embedded in
the processor simulator, they are completely transparent to
any other component and active only in fault simulation.
Table 1 lists all FILs identiﬁed for the picoJava-II FUBs
and their output signals. One can further break down each
FIL into smaller sub-FILs at a lower level of the RTL model
hierarchy, but it does not provide signiﬁcant advantages in
understanding fault behavior despite the need for a large in-
crease in evaluation time. For example, 32 bit slices for
an address adder in FIL 1 can be separately examined, but
additional knowledge we expect to gain from that is very
small. Each FIL can include both random logic and mem-
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:17:34 UTC from IEEE Xplore.  Restrictions apply. 
Table 1. The fault injection locations (FILs) of picoJava-II FUBs and their output signal.
Output signal
Width in bits
Name
iu_addr_e
iu_br_pc
iu_brtaken_e
iu_icu_flush_e
iu_psr
iu_shift_d
iu_data_e
iu_kill_dcu
kill_inst_e
iu_special_e
iu_dcu_flush_e
iu_inst_e
iu_zero_e
iu_data_in
iu_sbase_we
iu_optop_din
iu_optop_int_we
ret_optop_update
iu_smu_flush
iu_rf_dout
iu_smiss
iu_smiss_addr
iu_smiss_data
iu_powerdown_op_e
iu_rs1_e
IU
26
27
28
29
30
31
32