title:Stepwise Construction and Refinement of Dependability Models
author:Cl&apos;audia Betous-Almeida and
Karama Kanoun
Stepwise Construction and Reﬁnement
of Dependability Models
Cl´audia Betous-Almeida and Karama Kanoun
LAAS-CNRS
7, Avenue du Colonel Roche
31077 Toulouse Cedex 4 - France
E-mail: falmeida,PI:EMAIL
Abstract
This paper presents a stepwise approach for depend-
ability modeling, based on Generalized Stochastic Petri
Nets (GSPNs). The ﬁrst-step model called functional-level
model, can be built as early as system functional speciﬁca-
tions and then completed by the structural model as soon
as the system architecture is known, even at a very high
level. The latter can be reﬁned according to three differ-
ent aspects: Component decomposition, state and event
ﬁne-tuning and distribution adjustment to take into account
increasing event rates. We deﬁne speciﬁc rules to make
the successive transformations as easy and systematic as
possible. This approach allows the various dependencies
to be taken into account at the right level of abstraction:
Functional dependency, structural dependency and those
induced by non-exponential distributions. A part of the ap-
proach is applied to an instrumentation and control system
(I&C) in power plants.
1. Introduction
Dependability evaluation plays an important role in criti-
cal systems’ deﬁnition, design and development. Modeling
can start as early as system functional speciﬁcations, from
which a high-level model can be derived to help in analyz-
ing dependencies between the various functions. However
the information that can be obtained from dependability
modeling and evaluation becomes more accurate as more
knowledge about the system’s implementation is incorpo-
rated into the models.
The starting point of our work was to help (based on de-
pendability evaluation) a stakeholder of an I&C system in
selecting and reﬁning systems proposed by various contrac-
tors in response to a Call for Tenders. To this end, we have
deﬁned a stepwise modeling approach that can be easily
used to select an appropriate system and to model it thor-
oughly. This modeling approach is general and can be ap-
plied to any system, to model its dependability in a progres-
sive way. Thus, it can be used by any system’s developer.
The process of deﬁning and implementing an I&C sys-
tem can be viewed as a multi-phase process starting from
the issue of a call for tenders by the stakeholder. The
call for tenders gives the functional and non-functional
(e.g., dependability) requirements of the system and asks
candidate contractors to make offers for possible sys-
tems/architectures satisfying the speciﬁed requirements. A
preliminary analysis of the numerous responses by the
stakeholder, according to speciﬁc criteria, allows the pre-
selection of two or three candidate systems. At this stage,
the candidate systems are deﬁned at a high level and the
application software is not entirely written. The compara-
tive analysis of the pre-selected candidate systems, in a sec-
ond step, allows the selection of the most appropriate one.
Finally, the retained system is reﬁned and thoroughly ana-
lyzed to go through the qualiﬁcation process. This process
is illustrated in Figure 1. Even though this process is spe-
ciﬁc to a given company, the various phases are similar to
those of a large category of critical systems.
Dependability modeling and evaluation constitute an ef-
ﬁcient support for the selection and reﬁnement processes,
thorough analysis and preparation for the system’s qualiﬁ-
cation. Our modeling approach follows the same steps as
the development process. It is performed in three steps as
described in Figures 1 and 2:
Step 1. Construction of a functional-level model based on
the system’s speciﬁcations;
Step 2. Transformation of the functional-level model into
a high-level dependability model, based on the
knowledge of the system’s structure. A model is
generated for each pre-selected candidate system;
Step 3. For the retained system, reﬁnement of the high-
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:12:51 UTC from IEEE Xplore.  Restrictions apply. 
level model into a detailed dependability model.
Responses to the CT
(N proposals)
1
2
3
Comparative analysis
of the candidate systems
Call for Tenders
(CT)
Preselection
k candidate systems
(k     N)
Final
selection
Refinement of the applications
Thorough analysis
Qualification
time
System’s
operation
Figure 1. Various steps of I&C deﬁnition pro-
cess
Functional
Specifications
Functional−level
Model
Candidate
Architectures
High−level
Dependability Model
Retained
Architecture
Detailed
Dependability Model
Figure 2. Main steps of our modeling ap-
proach
Modeling is based on Generalized Stochastic Petri Nets
(GSPN) [2] due to their ability to cope with modularity and
model reﬁnement. The GSPN model is processed to obtain
the associated dependability measures (i.e., availability, re-
liability, safety, ...) using an evaluation tool such as SURF-
2 [4].
The relevance of our approach lies in supplying a set
of coherent techniques, allowing to master step by step de-
pendability model construction, based on GSPNs. It allows
the progressive incorporation of the newly available infor-
mation into the existing model, changing its initial organiza-
tion according to a well identiﬁed set of rules. Model reﬁne-
ment can be achieved to take into account: component de-
composition, event ﬁne-tuning and distribution adjustment.
In particular, the same set of rules is used for generating
the high-level model from the functional-level model and
for component reﬁnement. We have adapted the method of
stages (used for simulating increasing failure rates) to take
into account dependencies between interacting components
without changing their initial models.
This modeling approach has been applied to three differ-
ent I&C systems, to help select the most appropriate one.
In this paper we illustrate our approach on a small part of
one of them. This paper is an elaboration of our previous
work [3] that was devoted only to the functional-level model
construction and did not address at all the structural model
reﬁnement.
The remainder of the paper is organized as follows. Sec-
tion 2 describes the functional-level model. The high-level
dependability model is presented in Section 3. Section 4
deals with the structural model’s reﬁnement and Section 5
presents a small example of application of the proposed ap-
proach to an I&C system. Finally, Section 6 concludes the
paper.
2. Functional-level model
The derivation of the system’s functional-level model is
the ﬁrst step of our method. This model is independent of
the underlying system’s structure. Hence, it can be built
even before the call for tenders, by the stakeholder. It is
formed by places representing possible states of functions.
For each function, the minimal number of places is two
(Fig. 3): One represents the function’s nominal state (F) and
the other its failure state (F).
F
F
M
L
Figure 3. Functional-level model related to a
single function
In the following, we assume only one failure mode, but
it is applicable in the same manner when there are several
failure modes per function. Between states F and F, there
are events that manage changes from F to F and vice-versa.
These events are inherent to the system’s structure that is not
speciﬁed at this step, as it is not known yet. The model con-
taining these events and the corresponding places, is called
the link model (ML). Note that the set fF, ML, Fg, that con-
stitutes the system’s GSPN model, will be completed once
the system’s structure is known.
However, systems generally perform more than one
function. In this case we have to look for dependencies be-
tween these functions due to the communication between
them. We distinguish two degrees of dependency: Total de-
pendency and partial dependency. Figure 4 illustrates exam-
ples of the two degrees of functional dependency between
two functions F1 and F2. F3 is independent from both F1
and F2.
Case (a) Total dependency – F2 depends totally on F1
(noted F2 " F1): If F1 fails, F2 also fails;
Case (b) Partial dependency – F2 depends partially on F1
(noted F2  - F1): F1’s failure does not induce
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:12:51 UTC from IEEE Xplore.  Restrictions apply. 
F2’s failure. In fact, F1’s failure puts F2 in a de-
graded state that is represented by place F2d that
is marked whenever F1 is in its failure state and
F2 in its nominal one. In Figure 4(b), the token
is removed from F2d as soon as F1 returns to its
nominal state, however other scenarios might be
considered.
F
1
F
1
M
L1
F
2
ML2
F
2
F
3
M
L
F
3
(a) F2 " F1 (total)
1F
F
2
F3
F2d
M
L1
F1
M L2
M
L3
F2
F3
(b) F2  - F1 (partial)
Figure 4. Functional dependencies
3.1 Examples of interface models
For sake of simplicity, we ﬁrst consider the case of a
single function then the case of multiple functions.
Single Function: Several situations may be taken into
account. Since the two most important cases are the series
and the combination series-parallel components, we limit
the illustrations to these two basic cases which allow mod-
eling of any system. More details are given in [3].
Series case: Suppose function F carried out by a software
component S and a hardware component H. Then,
F and F places’ markings depend upon the mark-
ings of the hardware and software components models
(Fig. 5).
tC1
Hok
koH
t’C1
L
M
M
I
M
S
okH
H
ko
S ok
S ko
= Link model
= Interface model
= Structural model
= hardware’s up state
= hardware’s failure state
= software’s up state
= software’s failure state
Immediate transition
F
tF
t’F
F
tC2
M
I
S ok
S
ko
t’C
2
M S
M L
M
I
3. High level dependability model
The high level dependability model is formed by the
function’s states and the link model that gathers the set of
states and events related to the system’s structural behavior.
This behavior is modeled by the so-called structural model
and then it is connected to F and F places through an inter-
face model. The link model is thus made up of the structural
model and of the interface model.
The structural model represents the behavior of the hard-
ware and software components taking into account fault-
tolerance mechanisms, maintenance policies as well as de-
pendencies due to the interactions between different com-
ponents.
The interface model connects the structural model with
its functional state places by a set of immediate transitions.
In this section we concentrate mainly on the interface
model. In particular, we assume that the structural model
can be built by applying one of the many existing modular
modeling approaches (see e.g., [5, 9, 10, 11]), and we focus
on its reﬁnement in section 4. Note that the structural mod-
els presented in this section are not complete. We present
simple examples to help understand the notion of interface
model before presenting the general interfacing rules.
Figure 5. Two series components
The behavior of H and S is modeled by the structural model
and then it is connected to places F and F through an inter-
face model. Note that there is only one interface model. We
split it into two parts, an upstream part and a downstream
part, so that it is constructed in a systematic way. This al-
lows our approach to be re-usable, facilitating the construc-
tion of several models related to various architectures. Also,
the case of simultaneous failures is not treated at this level.
Series-parallel case: Consider function F implemented by
two redundant software components S and S, run-
ning on the same hardware component H. F’s up state
is the combined result of H’s up state and S or S’s up
states and F’s failure state is the result of H’s failure or
S and S’s failure, as indicated in Fig. 6.
Multiple Functions: Consider two functions (the gen-
eralization is straightforward) and let fC1ig (resp. fC2jg)
be the set of components associated to F1 (resp. F2). We
distinguish the case where functions do not share resources
(such as components or repairmen), from the case where
they share some. Examples of these two cases are presented
hereafter.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:12:51 UTC from IEEE Xplore.  Restrictions apply. 
Ct
1
H ok
H ko
t’
C
1
F
1
t F
2
Ft
S
1ok
23Ct
S2ok
S1ko
S2ko
’1
t F
’2
t F
t’
C23
F
M I
M
S
M
I
Figure 6. Two redundant software compo-
nents on a hardware component
F1 and F2 have no common components:
fC1ig \ fC2jg = ;. The interface models re-
lated to F1 and F2 are built separately in the same
way as explained for a single function. There are no
structural dependencies, only functional ones.
F1 and F2 have some common components:
fC1ig \ fC2jg = ;. This corresponds to the ex-
istence of structural dependencies,
in addition to
functional dependencies. This case is illustrated on a
simple example:
(cid:15) F1 done by three components: A hardware com-
ponent H and two redundant software compo-
nents S and S. F1’s model corresponds to
Fig. 6.
(cid:15) F2 done by two components: The same hardware
component H as for F1 and a software component
S. F2’s model corresponds to Fig. 5.
The global model of F1 and F2 is given in Fig. 7. It can
be seen that i) both interface models (MI1 and MI2)
are built separately, and ii) in the global model, the
common hardware component H is represented only
once by a common component model. Sharing of H
thus creates a structural dependency. The functional
dependencies are not represented in this ﬁgure.
3.2. Interfacing rules
The interface model MI connects the system’s compo-
nents with their functions by a set of transitions. This model
is a key element in our approach. Particular examples of in-
terface models have been given in Figures 5 to 7. In this
section the general organization of the interface model is
F1
1
t F1
2
t F1
t C11
t
C
21
S11ok
Hok
M
I1
t C12
S
12ok
M
S1
S12ko
S
11ko
Hko
M
I1
12Ct’
1
t’
1F
2
t’
1F
t’C11
t’C
21
F1
F2
t F
2
t’F2
F
2