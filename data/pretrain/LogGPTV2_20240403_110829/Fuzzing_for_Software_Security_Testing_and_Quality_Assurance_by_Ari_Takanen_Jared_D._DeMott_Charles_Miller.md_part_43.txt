capture-the-flag teams, and has been an invited lecturer at prestigious institutions
such as the United States Military Academy. Jared is also a Pluralsight author, on
the Synack Red Team, a professor at DSU, and is often quoted online and has made
TV appearances.
Charlie Miller is “one of the most technically proficient hackers on Earth,”
according to Foreign Policy. After receiving his Ph.D. in mathematics from the
University of Notre Dame, Dr. Miller was a computer hacker for the National
Security Agency for five years. He has worked on securing autonomous vehicles
for Uber, Didi Chuxing, and currently Cruise Automation. He has won the Super
Bowl of computer hacking, the annual Pwn2Own competition four times. Dr.
Miller has found countless vulnerabilities in a number of Apple products, includ-
ing their laptops and phones. Perhaps the most notorious of these issues was the
ability to remotely compromise an iPhone by merely sending it a malicious text
message. He is known as the first to remotely exploit the iPhone when it was
released, and the first Android phone when it was released (on the day it came
out). After that, he began focusing on embedded security and has done research
in the fields of laptop battery security as well as near field communications (NFC)
of cellular phones. Recently, Dr. Miller has spent considerable time in the field of
automotive security. Dr. Miller demonstrated that a variety of Fiat Chrysler vehi-
cles could be remotely hacked from anywhere in the county and he could control
the radio, brakes, wipers, transmission, acceleration, and even the steering of the
target vehicle. The demonstration of these vulnerabilities led to the recall of 1.4
million vehicles. Dr. Miller has been featured on the Today Show, ABC World
News Tonight, CNN, NPR, CNBC, and in The New York Times, USA Today,
Forbes, and in other media.
307
6760 Book.indb 307 12/22/17 10:50 AM
308 About the Authors
Atte Kettunen is a bug bounty hunter, a browser fuzzing enthusiast, and a
security researcher.
He started his career working as a researcher at OUSPG and is currently preach-
ing about benefits of fuzzing at F-Secure.
Since he got drawn in to the world of fuzz testing, he has revealed hundreds
of web browser vulnerabilities, published fuzzers and traveled around the world
speaking at conferences.
6760 Book.indb 308 12/22/17 10:50 AM
Index
A Automatic fuzzer generation
adding rules to fuzzer, 209
Abstract Syntax Notation One (ASN.1), 255
building and packing the fuzzer, 209
AddressSanitizer
conclusions, 210
defined, 184
Defensics SDK and, 204, 205
detection, 194
example project with Suite Wizard, 205–8
enabling, 193, 199
fuzzer input and output, 209
heap buffer overflows and, 200–201
fuzzer modeling, 208–9
PCRE case study, 199–201
overview, 204–5
reporting, 194–96
setting to configure fuzzer, 209
test program, 193–96
Automatic protocol discovery, 203–4
Ad hoc threat analysis, 105–7
American Fuzzy Lop (AFL)
defined, 213
B
fuzzing engine, 216
key aspects, 213 Back-to-back user agent (B2BUA), 281, 284
running, 214–15 Baselining, 149
APIs (application programming interfaces), beSTORM
163 automated protocol delivery, 204
Application developer fuzzing defined, 176, 256
browser fuzzing, 292–93 illustrated, 177
command-line application fuzzing, 289 overview, 256–57
file fuzzing, 289–90 Binary stimulation, 182–83
Web application fuzzing, 290–91 Black-box fuzzing, 144–45
Application monitoring, 176–80 Black-box fuzzing for security researchers
Application-specific fuzzers, 257 fuzzer/fuzzer type selection, 301–3
ASLR, 69 fuzzing, 303–4
Assessment coverage, 133 interface enumeration, 301
Assessment frequency, 133 monitoring tool selection, 303
Attack heuristics, 62 postfuzzing analysis, 304–5
Attack surfaces, 6–9, 62, 120 target selection, 300
Attack vectors Black-box testing
browsers, 291 code coverage, 92
fuzzers and, 8 conformance testing, 89
identification of, 280–81 fault injection, 93–94
local, examples of, 7 functional safety testing, 89
at multiple system levels, 28 functional security testing, 89
remote, categories of, 7 fuzz testing as profession and, 86–88
Web applications, 291 input space coverage, 91
Autodafé, 152–53 interface coverage, 91–92
309
6760 Book.indb 309 12/22/17 10:50 AM
310 Index
Black-box testing (Cont.) The Art of Fuzzing (TAOF), 153, 154–56
interoperability testing, 90 Autodafé, 152–53
load testing, 92 General Purpose Fuzzer (GPF), 159–61
metrics, 91–92 Ioctlizer, 153–58
negative testing, 96–99 Carrier and service provider fuzzing
overview, 85 overview, 285
performance testing, 90 VoIP fuzzing, 285–86
purposes of, 17, 88–91 WiFi fuzzing, 287–88
regression testing, 98–99 Case studies
robustness testing, 90–91 application developer fuzzing, 288–93
security scanners, 93 black-box fuzzing, 300–305
software interfaces, 85–86 carrier and service provider fuzzing, 285–88
specification coverage, 91 enterprise fuzzing, 280–85
stress testing, 92–93 industrial automation fuzzing, 293–95
syntax testing, 94–96 network equipment manufacturer fuzzing,
techniques for security, 92–99 293–95
test targets, 86 Category of the compromise, 125
unit testing, 93 Change control, 118
Blind SQL injection, 53 Client-side fuzzers, 164
Block-based fuzzers, 30 ClusterFuzz (CF)
Boundary conditions, 142 bug hunting and analysis system, 246
Browser fuzzing, 292–93 defined, 243
Brute force login, 55 DeMott’s, 244–48
Buffer overflow, 45 Google’s, 243–44
Bug categories high-level design, 244, 245
brute force login, 55 robustness of, 247
cryptographic attacks, 57 running, 247–48
denial of services (DoS) attack, 56 Code auditing, 21–22, 82–85
man in the middle (MTM) attack, 56 Code coverage
memory corruption errors, 44–52 American Fuzzy Lop (AFL) and, 213–16
race condition, 55 bug finding and, 273–74
session hijacking, 56 in fuzzer evaluation, 253
Web applications, 52–55 in fuzzing, 212–19
Bug hunting techniques libFuzzer and, 216–19
overview, 57 metrics, 130–32
reverse engineering, 57–59 plots, 275
source code auditing, 60–61 use of metrics, 92
BugId, 187 Code reuse, 66
Bugs Code volume, 130
easy, found first, 276–77 Command-line application fuzzing, 289
finding, code coverage and, 261, 273–74 Commercial fuzzer monitoring solutions, 176
found, code coverage versus, 275 Compiler instrumentation, 183–84
found most quickly, 277 Configuration management, 118
FTP, 258–59 Conformance testing, 89
real, 273 Continuous integration (CI), 99–100
Business impact, 124, 125 Control-flow enforcement technology (CET),
68
Control Flow Guard (CFG), 71
C
Coverage of previous vulnerabilities, 121–23
Canonicalization, 66 CrashReporter, 179–80
Capture-relay fuzzers Criticality rating, 124, 125
6760 Book.indb 310 12/22/17 10:50 AM
Index 311
Cross-site scripting (XSS), 54 defined, 149
Cryptographic attacks, 57 results, 262
Cyclomatic complexity, 130 as target, 258
Downtime, 116
DUT (device under test), 16, 102
D
Dynamic symbolic execution (DSE), 240–42
Data execution protection (DEP), 67–68, 69
Decompilation, 58
E
Deduplication
advanced tools, 187 End-to-end fuzzing, 283
operating system logs, 185–86 Enterprise fuzzing
stack traces, 186–87 challenges, 281
test case generator information, 185 firewall fuzzing, 281–84
Defect density, 130–31 VPN fuzzing, 284–85
Defect discovery EPRT command, 263–64
cost of, 108–14 Evolutionary fuzzing, 219–35
fuzzing-related methods, 108 Evolutionary Fuzzing System (EFS)
probability, 109 conclusions, 233
Defect metrics data structures, 223
code coverage metrics, 130–32 defined, 219
coverage of previous vulnerabilities, fuzzing heuristics, 221–22
121–23 GPF Unix command line portion of, 229
expected defect count metrics, 124 GUI portion of, 228
input space coverage metrics, 127–29 illustrated, 222
interface coverage metrics, 127 initialization, 224
process metrics, 132–33 overview, 221–22
in QA and VA, 120 pool crossover, 226–27
security and, 119–33 pool mutation, 227
vulnerability risk metrics, 124–27 results, 231–33
Defenses, 64–71 running, 228–31
Defensics session crossover, 224–25
defined, 256 session mutation, 225–26
overview, 256 test case, 231
real bugs found and, 273 Evolution-based fuzzers, 30
SDK, 204, 205 Exception analysis, 251
TLS fuzzer, 285 ExecShield, 70–71
Defensive coding, 65–66 Expected defect count metrics, 124
DeMott’s ClusterFuzz, 244–48 Exploitability rating, 124, 125
Denial of services (DoS) attack, 38, 56, 306 !exploitable tool, 187, 248
Denial of services (DoS) condition, 18, 167 Exploitation vulnerability scanners, 39–40
Deployment of fuzzing, 305
Deterministic fuzzing, 138–39
F
Digital media, 8
Disclosure metrics, 117–18, 119 Fault injection, 22, 93–94
Disclosure processes, 5–6 Feature testing, 17–18
Distributed fuzzing FileFuzz, 152
DeMott’s ClusterFuzz, 244–48 File fuzzing, 162–63, 289–90
Google’s ClusterFuzz, 243–44 Filemon utility, 172
overview, 242–43 File system-related problems, 168
Domain name system (DNS) Firewall fuzzing, 281–84
bugs in testing, 269–70 Format string errors, 45–47
6760 Book.indb 311 12/22/17 10:50 AM
312 Index
FTP single-user, 145–46
bugs, 258–59, 263 stimulation-based, 30
fuzzers, 111, 112 template-based, 30
results, 260 types of, 28–30, 145–62
as target, 257–58 Fuzzing
testing anomalies, 263–65 advanced, 203–48
FTPfuzz, 151 application developer, 288–93
Full disclosure model, 5–6 basic terms, 62
Functional testing black-box, 144–45
defined, 21 brief history of, 22–25
safety, 89 browser, 292–93
security, 89 as bug hunting technique, 61–64
structural testing versus, 81–82 carrier and service provider, 285–88
See also Black-box testing case studies, 279–306
Fuzz, 23 code coverage in, 212–19
Fuzz data, source of, 139–40 command-line application, 289
Fuzzers cost of, 15
adding rules to, 209 deployment of, 305
application-specific, 257 deterministic, 138–39
attack vectors and, 8 distributed, 242–48
based on text case complexity, 28–30 effectiveness of, 30
block-based, 30 end-to-end, 283
building and classifying, 137–65 enterprise, 34–35, 280–85
building and packing, 209 essence and origin of, 61
capture-relay, 152–61 evolutionary, 219–35
categorization criteria, 28 file, 162–63, 289–90
classification via interface, 162–65 firewall, 281–84
client-side, 164 frameworks, 33–34
code coverage, 253 gray-box, 144–45
comparison, 249 industrial automation, 295–300
configuration settings, 209 intelligent, 142–43
evaluating, 251–54 introduction to, 22–35
evolution-based, 30 local program, 162
fuzzing frameworks, 146–49 in-memory, 161–62, 235–42
generic, 137, 151–52 methods, 137–45
how long to run with random elements, metrics, 101–36
274–76 mobile phone, 294–95
input and output, 209 mutation-based, 210
intelligence of, 142 network equipment manufacturer,
intelligent versus dumb, 144 293–95
logical structure of, 31–32 network switch, 293
in-memory fuzzing, 161–62 in operations, 3
model-based, 30 overview, 1–2, 26
modeling, 208–9 process, 32–33
more the better, 270 in product life cycle, 107
network interfaces and, 162 proxy, 282
protocol-specific, 149–51 purpose of, 1
random, finding easy bugs first, 276 quality assurance (QA) and, 12, 13–14
retrospective testing, 252 in R&D, 2–3
simulated vulnerability discovery, 253 random, 138–39
6760 Book.indb 312 12/22/17 10:50 AM
Index 313
SCADA, 296–97, 306 h
starting point to needs, 16
Hackers, vulnerability analysis and, 42
terms to describe, 26
Hardware DEP, 67–68
test automation and, 136
Hardware overflow protection
in test labs, 3
control-flow enforcement technology (CET),
use of, 1, 3
68
VoIP, 285–86
hardware DEP, 67–68
VPN, 284–85
secure bit, 67
vulnerabilities found with, 27
Heap overflow, 50
Web, 164
Heap variable overwrite, 51
Web application, 290–91
Hostile data, 62–64
white-box, 144–45
why it works, 65
I
WiFi, 287–88
Fuzzing frameworks IDApro, 57–58
defined, 146 Ikefuzz, 151
Peach, 148–49, 150 IKE fuzzers, 111, 112
Sulley, 146–48 Industrial automation fuzzing, 295–300
Fuzzing layer 2 through 7, 164–65 Industrial control systems (ICS) security, 297,
Fuzzing life cycle 300
exception analysis, 251 In-memory fuzzing
input generation, 249–50 defined, 161
interface identification, 249 dynamic symbolic execution (DSE) and,
reporting, 251 240–42