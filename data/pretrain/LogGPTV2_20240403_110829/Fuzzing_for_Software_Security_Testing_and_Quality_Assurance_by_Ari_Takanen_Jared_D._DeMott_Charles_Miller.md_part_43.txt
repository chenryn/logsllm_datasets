### Capture-the-Flag Teams and Lectures
Jared has been an invited lecturer at prestigious institutions such as the United States Military Academy. He is also a Pluralsight author, a member of the Synack Red Team, and a professor at DSU. Additionally, he is frequently quoted online and has made TV appearances.

### Charlie Miller: A Renowned Hacker
According to Foreign Policy, Charlie Miller is "one of the most technically proficient hackers on Earth." After earning his Ph.D. in mathematics from the University of Notre Dame, Dr. Miller worked as a computer hacker for the National Security Agency (NSA) for five years. He has contributed to securing autonomous vehicles for companies like Uber, Didi Chuxing, and currently Cruise Automation. Dr. Miller has won the annual Pwn2Own competition, often referred to as the Super Bowl of computer hacking, four times. He has discovered numerous vulnerabilities in Apple products, including laptops and phones. One of his most notorious findings was the ability to remotely compromise an iPhone by sending a malicious text message. Dr. Miller was the first to remotely exploit both the iPhone and the Android phone on their respective release days. He has also conducted research in laptop battery security and near field communications (NFC) in cellular phones. Recently, Dr. Miller has focused on automotive security, demonstrating that various Fiat Chrysler vehicles could be remotely hacked, allowing control over the radio, brakes, wipers, transmission, acceleration, and steering. This led to the recall of 1.4 million vehicles. Dr. Miller has been featured on major media outlets such as the Today Show, ABC World News Tonight, CNN, NPR, CNBC, The New York Times, USA Today, and Forbes.

### Atte Kettunen: Bug Bounty Hunter and Security Researcher
Atte Kettunen is a bug bounty hunter, browser fuzzing enthusiast, and security researcher. He began his career as a researcher at OUSPG and currently advocates for the benefits of fuzzing at F-Secure. Since becoming involved in fuzz testing, he has revealed hundreds of web browser vulnerabilities, published fuzzers, and spoken at conferences around the world.

### Index

#### A
- **Automatic Fuzzer Generation**
  - Adding rules to fuzzer: 209
  - Building and packing the fuzzer: 209
  - Conclusions: 210
  - Defensics SDK and AddressSanitizer: 204, 205
  - Detection: 194
  - Example project with Suite Wizard: 205–8
  - Enabling AddressSanitizer: 193, 199
  - Fuzzer input and output: 209
  - Fuzzer modeling: 208–9
  - Overview: 204–5
  - Reporting: 194–96
  - Setting to configure fuzzer: 209
  - Test program: 193–96
- **Abstract Syntax Notation One (ASN.1)**: 255
- **AddressSanitizer**
  - Defined: 184
  - Detection: 194
  - Enabling: 193, 199
  - Heap buffer overflows and: 200–201
  - PCRE case study: 199–201
  - Reporting: 194–96
- **Automatic Protocol Discovery**: 203–4
- **Ad Hoc Threat Analysis**: 105–7
- **American Fuzzy Lop (AFL)**
  - Defined: 213
  - Fuzzing engine: 216
  - Key aspects: 213
  - Running: 214–15

#### B
- **Back-to-Back User Agent (B2BUA)**: 281, 284
- **Baselining**: 149

#### C
- **ClusterFuzz (CF)**
  - Bug hunting and analysis system: 246
  - Defined: 243
  - DeMott’s ClusterFuzz: 244–48
  - Google’s ClusterFuzz: 243–44
  - High-level design: 244, 245
  - Robustness: 247
  - Running: 247–48

#### D
- **Defect Metrics**
  - Code coverage metrics: 130–32
  - Coverage of previous vulnerabilities: 121–23
  - Expected defect count metrics: 124
  - Input space coverage metrics: 127–29
  - Interface coverage metrics: 127
  - Process metrics: 132–33
  - In QA and VA: 120
  - Security and: 119–33
  - Vulnerability risk metrics: 124–27
- **Defensive Coding**: 65–66
- **Defensics**
  - Defined: 256
  - Overview: 256
  - Real bugs found and: 273
  - SDK: 204, 205
  - TLS fuzzer: 285

#### E
- **Evolutionary Fuzzing System (EFS)**
  - Conclusions: 233
  - Data structures: 223
  - Defined: 219
  - Fuzzing heuristics: 221–22
  - GPF Unix command line portion: 229
  - GUI portion: 228
  - Illustrated: 222
  - Initialization: 224
  - Overview: 221–22
  - Pool crossover: 226–27
  - Pool mutation: 227
  - Results: 231–33
  - Running: 228–31
  - Session crossover: 224–25
  - Session mutation: 225–26
  - Test case: 231

#### F
- **File Fuzzing**
  - Command-line application fuzzing: 289
  - File fuzzing: 162–63, 289–90
- **Firewall Fuzzing**: 281–84
- **FTP Fuzzing**
  - Bugs: 258–59, 263
  - Fuzzers: 111, 112
  - Results: 260
  - As target: 257–58
  - Testing anomalies: 263–65
- **Full Disclosure Model**: 5–6
- **Functional Testing**
  - Defined: 21
  - Safety: 89
  - Security: 89
  - Structural testing versus: 81–82

#### G
- **Google's ClusterFuzz**: 243–44

#### I
- **In-Memory Fuzzing**
  - Defined: 161
  - Dynamic symbolic execution (DSE) and: 240–42

This revised version provides a more organized and professional structure, making it easier to read and understand.