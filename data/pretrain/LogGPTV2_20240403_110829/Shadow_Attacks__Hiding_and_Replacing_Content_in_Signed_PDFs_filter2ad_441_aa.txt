title:Shadow Attacks: Hiding and Replacing Content in Signed PDFs
author:Christian Mainka and
Vladislav Mladenov and
Simon Rohlmann
Shadow Attacks:
Hiding and Replacing Content in Signed PDFs
Christian Mainka
Ruhr University Bochum
PI:EMAIL
Vladislav Mladenov
Ruhr University Bochum
PI:EMAIL
Simon Rohlmann
Ruhr University Bochum
PI:EMAIL
Abstract—Digitally signed PDFs are used in contracts and
invoices to guarantee the authenticity and integrity of their
content. A user opening a signed PDF expects to see a warning
in case of any modiﬁcation. In 2019, Mladenov et al. revealed
various parsing vulnerabilities in PDF viewer implementations.
They showed attacks that could modify PDF documents without
invalidating the signature. As a consequence, affected vendors
of PDF viewers implemented countermeasures preventing all
attacks.
This paper introduces a novel class of attacks, which we
call shadow attacks. The shadow attacks circumvent all existing
countermeasures and break the integrity protection of digitally
signed PDFs. Compared to previous attacks, the shadow attacks
do not abuse implementation issues in a PDF viewer. In contrast,
shadow attacks use the enormous ﬂexibility provided by the
PDF speciﬁcation so that shadow documents remain standard-
compliant. Since shadow attacks abuse only legitimate features,
they are hard to mitigate.
Our results reveal that 16 (including Adobe Acrobat and
Foxit Reader) of the 29 PDF viewers tested were vulnerable
to shadow attacks. We introduce our tool PDF-Attacker which
can automatically generate shadow attacks. In addition, we
implemented PDF-Detector to prevent shadow documents from
being signed or forensically detect exploits after being applied to
signed PDFs.
I.
INTRODUCTION
Digital signatures can protect Portable Document Formats
(PDFs) against manipulations. This feature enables use cases
such as signing contracts, agreements, payments, and invoices.
Regulations like the eSign Act in the USA [1] or the eIDAS
regulation in Europe [2] facilitate the acceptance of digitally
signed documents by companies and governments. Asian and
South American countries also accept digitally signed doc-
uments equivalent to manually signed paper documents [3].
Adobe Cloud, a leading online service for signing PDF doc-
uments, provided 8 billion electronic and digital signature
transactions in 2019 [4]. In the same year, DocuSign processed
15 million documents each day [5].
a) Signed PDFs prepared by single entities: One typ-
ical use case of PDF signatures is that one in which a single
entity creates both the PDF document and the signature.
Network and Distributed Systems Security (NDSS) Symposium 2021
21-25  February  2021, Virtual
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24117
www.ndss-symposium.org
A shadow PDF document presents a trustworthy content to the
Figure 1.
signers (top document). After signing this document, the attackers modify the
document and enforce another view of the document on victims’ side without
invalidating the signature (bottom document).
Invoices created by Amazon are a popular example of this
scenario.
b) Signed PDFs created by multiple entities: Another
typical use case is the signing of a contract. For example,
this is the case for EU grant agreements, where the European
Research Agency and the grant recipients have to sign a PDF
document. We can describe the generic process of digitally
signing a contract as follows: The collaborators ﬁrst prepare
the PDF contract. Collaborators can be lawyers, designers, or
members of different companies. Once they have they ﬁnalized
the PDF document, the involved parties then digitally sign the
contract. The parties sign the PDF sequentially, and the PDF
may be exchanged multiple times between the parties.
c) Security of PDF Signatures: In 2019, a comprehen-
sive analysis of the security of digitally signed PDFs revealed
severe ﬂaws in multiple applications and found almost all of
them to be vulnerable [6]. They used an attacker model in
which the attacker possesses a PDF that has been digitally
signed by a third party and manipulates it after the signature
had been added to the document. The vendors have ﬁxed these
issues in their recent PDF viewer versions.
In this paper, we investigate the security of these patched
versions of PDF viewers. We extend the attacker model
from Mladenov et al. [6] and assume the attacker can place
content of his own choice into the PDF ﬁle before it is signed.
This assumption is based on real-world usage of signed PDFs
by multiple entities. For instance, the attackers1 may prepare a
PDF document containing seemingly harmless content. They
proceed by replacing this content after the document has
been signed, see Figure 1. We answer the following research
question:
Can the visible content of a digitally signed PDF be
altered without invalidating a signature if attackers
manipulate the PDF before it is signed?
d) Shadow Attacks: In the analog world, a signer typi-
cally adds a handwritten signature at the end of the document.
This addition at the end has two major downsides: 1) it is
possible to exchange all pages before the signed page with
arbitrary content. 2) Attackers could use empty spaces on
signed pages to print new content, or they could overpaint
existing content. These manipulations are impossible when
using digital signatures because this type of signature protects
the entire content. So it is assumed that transferring such an
attack from the analog world to digital signatures is impossible.
This paper shows that this assumption is false by introduc-
ing a new attack class: shadow attacks. The idea of shadow
attacks is that
the attackers create a PDF document with
two different contents: 1) content expected by the authority
reviewing and signing the PDF and 2) hidden content that
attackers can reveal after the PDF is signed. In Figure 1,
an overview of the attack is shown. The attackers prepare a
shadow document. In the analog world, this is the step in which
the attackers could explicitly leave empty spaces. The Signers
of the PDF receive the document, review it, and sign it. The
attackers use the signed document, modify it, and send it to
the victims. In the analog world, the attackers can print their
content on the prepared empty spaces. After opening the signed
PDF, the victims’ PDF viewer successfully veriﬁes the digital
signature. However, the victims see different content than the
Signers. We introduce three variants of the shadow attacks,
which allow attackers to hide, replace, and hide-and-replace
content in digitally signed PDFs. The shadow attacks do not
rely on a dynamic content replacement. For example, we do
not use JavaScript or content loaded from external resources
that can be modiﬁed after signing the PDF. We consider such
attacks trivial, and according to our observations, all viewers
already prevent such attacks by warning the user.
e) Automatic Generation and Prevention: To contribute
to future research, we present two tools: PDF-Attacker and
PDF-Detector. Both tools are written in Python, and published
as open source on https://pdf-insecurity.org. PDF-Attacker
automatically generates a shadow document by using arbitrary
ﬁles as an input. After the document is signed, PDF-Attacker
executes the manipulation steps automatically and stores the
manipulated ﬁle. PDF-Detector detects shadow attacks at both
stages of their execution: before the ﬁle is signed and after the
ﬁnal manipulations. Thus, PDF readers can use PDF-Detector
to refuse signing shadow documents and thus prevent harm.
To facilitate the forensic analysis of signed PDF ﬁles, PDF-
1In this paper, we use the gender-neutral pronoun they for the following
entities: victim, attacker, signer, and user.
Detector can also analyze signed ﬁles and detect manipulations
made afterwards.
f) Shadow Attack vs. Previous Attacks: On an abstract
level, the shadow attacks resemble the idea of Incremental
Saving Attacks (ISAs) [6]. Both attacks allow the manipulation
of digitally signed PDFs without raising any warnings or
errors. Both of them abuse a PDF feature called Incremental
Update. Incremental Update allows changing the content of
a PDF by appending a document modiﬁcation to the ﬁle.
However, there are essential differences between the shadow
attacks and ISAs. ISAs manipulate a PDF by appending a
malformed Incremental Update, wherein objects are missing or
not closed properly. This approach was motivated by viewers
providing either a denylist or allowlist of potentially dangerous
objects. Based on malformed Incremental Updates or missing
dangerous objects in the deny/allowlists, Mladenov et al. [6]
were able to bypass the veriﬁcation of multiple viewers. As
a result, the PDF viewers extended the lists with potentially
dangerous objects, improved the veriﬁcation to detect mal-
formed Incremental Updates, and warned users in the event
of inconsistencies.
In contrast to previous attacks, our shadow attacks do not
use a malformed Incremental Update, but instead are standard-
compliant and use well-formed Incremental Updates. Thus, no
inconsistencies in the ﬁle structure exist. The Hide and Hide-
and-Replace variants also bypass even perfectly implemented
denylists or allowlists. Thus, none of the currently imple-
mented countermeasures which detect malicious Incremental
Updates prevents shadow attacks.
g) Results: We show the applicability of the shadow
attacks by evaluating 29 PDF applications and revealing vul-
nerabilities in 16 of them, including Adobe Reader and Foxit
Reader. Moreover, we achieve a privilege escalation on Adobe
products allowing the attackers to execute high privileged
actions on victims’ computers.
h) Contributions: This paper makes the following key
contributions:
• We introduce an attacker model that is based on real-
world scenarios and allows an attacker to place shadow
content into a PDF before it is signed (section III).
• We are the ﬁrst to present the shadow attack class on PDF
signatures. We found three different variants that allow the
ability to hide, to replace, and to hide-and-replace content
without invalidating the signature validation status of a
digitally signed PDF (section IV).
• We implemented PDF-Attacker, an open-source Python
• We show the impact of shadow attacks by breaking 16 of
• We implemented and evaluated PDF-Detector, an open-
source shadow attack prevention and detection tool (sec-
tion VIII).
• We apply shadow attacks beyond signed PDFs and reveal
a critical code execution vulnerability in Adobe Reader
(section IX).
toolset for automatic exploit generation (section VI).
29 PDF applications (see section VII).
i) Responsible Disclosure: We responsibly disclosed
all issues to the respecting vendors. Therefore, we cooperated
with the CERT-Bund (BSI) and provided a dedicated vul-
nerability report, including all exploits, to them. They kindly
2
created the initial contact with all vendors and managed the
distribution of the report. In the case of technical queries, we
directly supported the vendors to understand and ﬁx the issues.
Some of the vendors contacted us regarding a re-test of their
countermeasures, which we also provided.
II. BASICS
a) PDF File Structure: The Portable Document Format
(PDF) is a platform-independent document format. It consists
of three main parts, as depicted in Figure 2.
The ﬁrst part deﬁnes the PDF body. It contains different
objects, which are identiﬁed by their object number. The most
important object is the root object, which is called the Catalog.
In Figure 2, the Catalog has the object identiﬁer 1 0. The
Catalog deﬁnes the whole PDF structure by linking to other
objects in the body. In the example given, the Catalog links
to a form object AcroForm, to a PDF MetaData object, and
to actual PDF Pages object. The Pages object can reference
multiple Page objects, which in turn reference, for example,
the actual Content, Font, and Images objects. These object
references are technically implemented by using a dedicated
reference string based on object numbers. For example, the
Pages object references the Page object by using the reference
5 0 R. The second part of the PDF is the Xref table. It contains
references to the byte positions of all objects used in the PDF
body. Objects that are not in use can be explicitly ﬂagged as
free in the Xref table. For example, the image object 9 0 is
free and not displayed in the PDF. Although ﬂagged as free,
the entry in the Xref table for object 9 0 can contain the byte
position of the free object. The third part is the Trailer. It
consists of two further references: one to the byte position at
which the Xref table starts, and another link to the identiﬁer
of the root object (1 0).2
b) Incremental Update: The content of a PDF may be
updated for different reasons, for example, by adding review
comments or by ﬁlling out PDF forms. From a technical
perspective, it is possible to add this new content directly
into the existing PDF body and add new references in the
Xref table. However, this is not the case according to the
PDF speciﬁcation. Changes to a PDF are implemented using
Incremental Updates.
An Incremental Update adds new objects into a new PDF
body, which is directly appended after the previous Trailer.
To adequately address the new objects, a new Xref table and
Trailer are also appended as well for each Incremental Update.
Summarized, a PDF can have multiple bodies, Xref tables, and
Trailers, if Incremental Update is applied.
c) PDF Signature: For protecting the integrity and the
authenticity of a PDF, digital signatures can be applied. For
this purpose, a Signature object is created and appended to the
PDF by using Incremental Update. It is also possible to sign
a PDF multiple times (e.g., a contract), resulting in multiple
Incremental Updates. The Signature object contains all relevant
information for validating the signature, such as the algorithms
used and the signing certiﬁcate. It also deﬁnes which bytes of
the PDF are protected by the signature, that is, which bytes
are used to compute the cryptographic hash that the signature
2The root element does not need to have the identiﬁer 1 0.
/Catalog 1 0
/AcroForm 2 0
/MetaData 3 0
/Pages 4 0
/Page 5 0
/Contents 6 0
/Font 7 0
/Image 8 0
/Image 9 0
Xref
1 0 obj Reference (In Use)
2 0 obj Reference (In Use)
3 0 obj Reference (In Use)
4 0 obj Reference (In Use)
5 0 obj Reference (In Use)
6 0 obj Reference (In Use)
7 0 obj Reference (In Use)
8 0 obj Reference (In Use)
9 0 obj Reference (Free)
Trailer
startxref Reference
Root Reference
B
o
d
y
P
a
r
t
1
:
X
r
e
f
t
a
b
l
e
P
a
r
t
2
:
T
r
a
i
l
e
r
P
a
r
t
3
:
Figure 2. A PDF consists of three parts: body, Xref table, and Trailer. Solid-
lined arrows indicate direct object references. Dashed-lined arrows indicate
byte offset references.
algorithm uses. A typical signature starts at
the ﬁrst byte
and ends at the last byte of the trailer.3 Once a user opens
a PDF containing a PDF signature, the viewer application
automatically validates the signature and it provides a warning
if the content has been modiﬁed.
d) Incremental Update on Signed Documents: Even on
a signed PDF, a further Incremental Update can be applied.
Examples are review annotations or additional signatures.
Since such Incremental Updates are appended to the signed
document, and no changes within the signed area are made,
the signature remains valid.
In 2019, Mladenov et al. [6] showed that an Incremental
Update can change the presentation of the entire signed docu-
ment. As a countermeasure, the authors recommended letting
the viewer raise a warning if the PDF provides content outside
the signature’s scope. However, this countermeasure is not
standard compliant. There are legitimate use cases where an
Incremental Update should not lead to a warning, for example,
a second digital signature. Thus, the vendors implemented
a different countermeasure by creating a list of potentially
dangerous elements forbidden within an Incremental Update.
Currently, the viewers search for such elements within an
Incremental Update and throw a warning on a match.
In this paper, we focused on the elements which viewers
consider harmless within an Incremental Update. We show that
3For technical reasons, there is a gap inside this range that is unprotected.
It contains a PKCS#7 blob of the signature itself.
3
attackers can still change the signed document’s presentation
by neither invalidating the signature nor raising any warnings.
III. ATTACKER MODEL
The attacker model is based on real-world use cases in
which a PDF document, for example, a contract, is signed. In