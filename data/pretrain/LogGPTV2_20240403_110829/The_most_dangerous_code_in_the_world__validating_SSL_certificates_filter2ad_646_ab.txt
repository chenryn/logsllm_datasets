Hostname veriﬁcation. After the chain of trust is established, the
client must verify the server’s identity. RFC 2818 advises the im-
plementors to use “SubjectAltNames” as the main source of server
identiﬁers and support “Common Name” for backward compatibil-
ity only, but most of the software we tested does it the other way
around and checks “Common Name” ﬁrst. After building the list
of server identiﬁers, the client attempts to match the fully qualiﬁed
DNS name of the requested server to one of the identiﬁers.
If the client ﬁnds an exact match in the list of server identi-
ﬁers, veriﬁcation is done by straightforward string comparison. The
client may also ﬁnd a wildcard name in the list of identiﬁers. The
rules for wildcard matching are fairly complex [14, 17], especially
concerning international character sets.
Certiﬁcate revocation and X.509 extensions. This paper focuses
on verifying the server’s identity, but full certiﬁcate validation in-
volves many more checks. These checks are essential for security,
yet are handled poorly or not at all by non-browser software.
For example, some SSL libraries such as OpenSSL implement
certiﬁcate revocation, but require the application to provide the
certiﬁcate revocation list (CRL). The applications we analyzed do
not avail themselves of this facility. Furthermore, libraries such as
JSSE require the application to check validity of the CRL on its
own. Most applications don’t bother. Other SSL libraries, such as
Python’s ssl, do not expose a method for CRL checking.
Some X.509 certiﬁcate extensions contain security-critical infor-
mation such as key usage (e.g., is the CA allowed to use this key for
signing certiﬁcates?), name constraints (restricting the names that
a sub-CA can certify), and certiﬁcate policies, described in RFC
2527 [13]. For instance, a CA may assign different levels of trust
to different sub-CAs, but the application must provide a policy that
takes advantage of this information. In practice, these extensions
are largely neglected. For example, until recently OpenSSL did not
validate name constraints correctly, while cURL does not even have
an interface for specifying the application’s certiﬁcate policy.
Attacks exploiting improper treatment of certiﬁcate revocation
and X.509 extensions are somewhat different from the “pure” man-
in-the-middle model considered in this paper. We leave their de-
tailed analysis to future work.
4. SSL ABSTRACTIONS
Depending on its needs, an application can “plug” into SSL at
different levels of abstraction. At the lowest level, there are many
popular SSL implementations with different features, licenses, and
hardware requirements: OpenSSL, JSSE, CryptoAPI, NSS, yaSSL,
GnuTLS, BouncyCastle, and others. These libraries are mostly
oblivious to protocols transported over SSL. Therefore, to avoid
having to parse HTTP messages on their own, applications that in-
volve HTTP over SSL (HTTPS) typically do not use them directly.
Instead, they employ one of the many HTTPS libraries (see Sec-
tion 4.2), which in turn use SSL libraries internally. Applications
that use SOAP- or REST-based Web services require additional
middleware on top of HTTPS or WebSockets (see Figure 2).
4.1 SSL libraries
OpenSSL. OpenSSL only provides chain-of-trust veriﬁcation; ap-
plications must supply their own hostname veriﬁcation code. This
is typical for low-level SSL libraries. Different application-layer
protocols such as HTTPS, LDAP, etc. have different notions of
what constitutes a valid hostname and what it means for a hostname
to match the name(s) listed in the certiﬁcate. Therefore, hostname
40Applications
SOAP
Applications
REST
Axis
...
CXF
Applications
Pusher
...
HTTP
Web Socket
HttpsClient
...
cURL
Weberknecht
...
...
IM
SSL
TCP
JSSE
...
GnuTLS
...
OpenSSL
OS NetworkingStack
user−land
libraries
kernel
Figure 2: Protocol stack.
veriﬁcation must be managed either by the application itself, or by
a data-transport wrapper such as cURL.
Proper hostname veriﬁcation for OpenSSL and CryptoAPI is dis-
cussed in [21, Chap. 10.8], assuming the chain of trust has been
veriﬁed correctly. As discussed in [21, Chap. 10.5], the latter is
error-prone due to the complexity of the underlying API. OpenSSL
allows applications to customize chain-of-trust veriﬁcation by pro-
viding a callback function or modifying conﬁguration variables such
as “verify depth” and “verify mode” as shown in Figure 3.
A program using OpenSSL can perform the SSL handshake by
invoking the SSL_connect function. A high-level overview of the
handling of different conﬁgurations and callbacks is shown in Al-
gorithm 1. They can have complex interactions.
Some certiﬁcate validation errors are signaled through the return
values of SSL_connect, while for other errors SSL_connect returns
OK but sets internal “verify result” ﬂags. Applications must call
SSL_get_ verify_result function to check if any such errors oc-
curred. This approach is error-prone (see Section 7.6).
Algorithm 1 Outline of SSL_connect control ﬂow.
while chain of trust contains no trusted CA do
if chain length <verify_depth then
Try to extend chain of trust by 1 level
Set ERROR appropriately if any error
else
Set ERROR to ‘incomplete chain’
end if
if ERROR then
verify_result = error
if verify_callback == NULL then
if verify_mode != 0 then
Print error and terminate connection.
end if
else
ret = verify_callback(preverify_ok = 0, . . . )
if (verify_mode != 0) and (ret == 0) then
Print error and terminate connection.
end if
end if
if ERROR is not related to incorrect parsing then
return 1
else
return ERROR
end if
else
ret = verify_callback(preverify_ok = 1, . . . )
if (verify_mode != 0) and (ret == 0) then
Print error and terminate connection.
end if
end if
end while
return 1
SSL_CTX_set_verify_depth
SSL_set_verify_depth
SSL_CTX_set_verify
SSL_new
SSL_set_verify
SSL_set_fd
verify
mode
default:
0
verify
callback
default:
None
verify
depth
default:
9
fd
SSL_CTX
SSL
OpenSSL’s
internal
data
structures
verify_result
SSL_get_verify_result
SSL_connect
(see Algorithm 1)
Figure 3: OpenSSL API for setting up SSL connections with
the default chain-of-trust veriﬁcation.
The certiﬁcate validation function in GnuTLS, gnutls_certif-
icate_verify_peers2, has similarly atrocious error reporting. It
takes a reference to tls_status as an argument and sets it to an
appropriate error code if validation fails. For some errors (e.g.,
insufﬁcient credentials or no certiﬁcate found), it returns a negative
value; for others (e.g., self-signed certiﬁcate), it sets the error code
but returns zero. In Section 7.4 we show that application developers
misunderstand this complex relationship between the error status
and the return value, resulting in broken certiﬁcate validation.
JSSE. Java Secure Socket Extension (JSSE) provides numerous in-
terfaces through which Java applications—including Android mo-
bile apps—can establish SSL connections.
The low-level API is SSLSocketFactory. Depending on how the
SSL client is created, this API may or may not perform hostname
veriﬁcation. The following code sample is taken from X509Trust
ManagerImpl.checkIdentity in Java 6 update 31:
private void checkIdentity(String hostname,
X509Certificate cert, String algorithm)
throws CertificateException {
if (algorithm != null && algorithm.length() != 0) {
....
if (algorithm.equalsIgnoreCase("HTTPS")) {
HostnameChecker.getInstance(HostnameChecker.TYPE
_TLS).match(hostname, cert);
} else if (algorithm.equalsIgnoreCase("LDAP")) {
HostnameChecker.getInstance(HostnameChecker.TYPE
_LDAP).match(hostname, cert);
} else {
throw new CertificateException(
"Unknown identification algorithm: " + algorithm);
}
}
}
The checkIdentity method throws an exception if the algorithm
ﬁeld is set to anything other than HTTPS or LDAP. This is different
from, for example, OpenSSL, which returns a value even if veriﬁ-
cation fails and expects the application to check this value.
JSSE APIs such as HttpsClient and HttpsURLConnection call
try SetHostnameVerification when creating SSL clients. This
method sets the algorithm ﬁeld to HTTPS. The above code thus
invokes HostnameChecker and veriﬁes the name in the certiﬁcate.
If the algorithm ﬁeld in the client data structure is NULL or an
empty string, checkIdentity silently skips hostname veriﬁcation
without throwing an exception. We conjecture that this behav-
ior is designed to accommodate implementors of certiﬁcate-based
protocols other than HTTPS or LDAP who may want to re-use
41JSSE’s default trust manager for chain-of-trust veriﬁcation but pro-
vide their own, protocol-speciﬁc hostname veriﬁcation.
On February 14, 2012, Java 7 update 3 was released. The code
for certiﬁcate validation is different from Java 6, but its behav-
ior is similar: if the algorithm ﬁeld is NULL or an empty string,
checkIdentity is never invoked.
private void checkTrusted(X509Certificate[] chain,
String authType, Socket socket, boolean isClient)
throws CertificateException {
...
/ /
String identityAlg = sslSocket.getSSLParameters().
c h e c k e n d p o i n t
i d e n t i t y
getEndpointIdentificationAlgorithm();
if (identityAlg != null && identityAlg.length != 0)
{
String hostname = session.getPeerHost();
checkIdentity(hostname, chain[0], identityAlg);
}
}
In SSL clients created using “raw” SSLSocketFactory (as op-
posed to HttpsClient or HttpsURLConnection wrappers), the algo-
rithm ﬁeld is NULL, thus JSSE does not perform hostname veriﬁ-
cation. The responsibility for hostname veriﬁcation is delegated to
the software running on top of JSSE. This feature is not explained
in the API documentation. Instead, the following warning can be
found deep inside the JSSE reference guide:2
When using raw SSLSockets/SSLEngines you should
always check the peer’s credentials before sending any
data. The SSLSocket and SSLEngine classes do not
automatically verify that the hostname in a URL matches
the hostname in the peer’s credentials. An application
could be exploited with URL spooﬁng if the hostname
is not veriﬁed.
The prevalence of Java software that uses SSLSocketFactory to
create SSL clients yet does not perform hostname veriﬁcation (see
Section 4.2) suggests that developers are not aware of this feature.
The existence of alternative JSSE interfaces that do perform host-
name veriﬁcation only increases the confusion.
4.2 Data-transport libraries
In practice, most applications rely on data-transport frameworks
to establish HTTPS connections. These frameworks use SSL li-
braries internally in a way that is usually opaque to applications.
Apache HttpClient. Apache HttpClient3 is a client-side HTTP(S)
Java library based on JDK. The latest version is 4.2.1, published
on June 29, 2012, but most existing software employs older, 3.*
versions. Apache HttpClient is used extensively in Web-services
middleware such as Apache Axis 2 (see Section 8) because native
JDK does not support SOAP Web services. Furthermore, Apache
HttpClient provides better performance than JDK for functionali-
ties such as sending HTTP POST requests.
Apache HttpClient uses JSSE’s SSLSocketFactory to establish
SSL connections. As explained in Section 4.1, this means that
Apache HttpClient must perform its own hostname veriﬁcation.
This leads to numerous vulnerabilities in software based on older
versions on HttpClient that do not verify hostnames (Section 7.5).
Furthermore, Apache HttpClient uses HttpHost data structure to
describe HTTP(S) connections. HttpHost does not have any inter-
2http://docs.oracle.com/javase/6/docs/
technotes/guides/security/jsse/JSSERefGuide.
html
3http://hc.apache.org/httpcomponents-client-
ga/
nal consistency checks: for example, it allows connections to port
443 to have HTTP as the scheme. In Section 7.8, we show how this
leads to errors even in code implemented by SSL experts.
Weberknecht. Weberknecht4 is a Java implementation of the Web-
Sockets protocol. It uses SSLSocketFactory but does not perform
its own hostname veriﬁcation. Any Java program that employs We-
berknecht is vulnerable to a man-in-the-middle attack.
cURL. cURL5 is a popular tool and library (libcurl) for fetching
data from remote servers. Since version 7.10, cURL validates SSL
certiﬁcates by default.
Internally, it uses OpenSSL to verify the
chain of trust and veriﬁes the hostname itself. This functionality is
controlled by parameters CURLOPT_SSL_VERIFYPEER (default value:
true) and CURLOPT_SSL_VERIFYHOST (default value: 2).
This interface is almost perversely bad. The VERIFYPEER param-
eter is a boolean, while a similar-looking VERIFYHOST parameter is
an integer. The following quote from the cURL manual explains
the meaning of CURLOPT_SSL_VERIFYHOST:
1 to check the existence of a common name in the SSL
peer certiﬁcate. 2 to check the existence of a common
name and also verify that it matches the hostname pro-
vided.