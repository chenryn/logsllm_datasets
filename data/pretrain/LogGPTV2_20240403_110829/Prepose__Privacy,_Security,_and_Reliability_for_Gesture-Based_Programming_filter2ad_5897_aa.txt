title:Prepose: Privacy, Security, and Reliability for Gesture-Based Programming
author:Lucas Silva Figueiredo and
Benjamin Livshits and
David Molnar and
Margus Veanes
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
Prepose: Privacy, Security, and Reliability for
Gesture-Based Programming
∗
Lucas Silva Figueiredo
†
, Benjamin Livshits
∗
Federal University of Pernambuco
†
, David Molnar
†
, and Margus Veanes
†
Microsoft Research
!
Abstract—With the rise of sensors such as the Microsoft Kinect, Leap
Motion, and hand motion sensors in phones (i.e., Samsung Galaxy S6),
gesture-based interfaces have become practical. Unfortunately, today,
to recognize such gestures, applications must have access to depth and
video of the user, exposing sensitive data about the user and her environ-
ment. Besides these privacy concerns, there are also security threats in
sensor-based applications, such as multiple applications registering the
same gesture, leading to a conﬂict (akin to Clickjacking on the web).
We address these security and privacy threats with Prepose, a novel
domain-speciﬁc language (DSL) for easily building gesture recognizers,
combined with a system architecture that protects privacy, security, and
reliability with untrusted applications. We run Prepose code in a trusted
core, and only return speciﬁc gesture events to applications. Prepose
is speciﬁcally designed to enable precise and sound static analysis using
SMT solvers, allowing the system to check security and reliability
properties before running a gesture recognizer. We demonstrate that
Prepose is expressive by creating a total of 28 gestures in three
representative domains: physical therapy, tai-chi, and ballet. We further
show that runtime gesture matching in Prepose is fast, creating no
noticeable lag, as measured on traces from Microsoft Kinect runs.
To show that gesture checking at the time of submission to a gesture
store is fast, we developed a total of four Z3-based static analyses to
test for basic gesture safety and internal validity, to make sure the so-
called protected gestures are not overridden, and to check inter-gesture
conﬂicts. Our static analysis scales well
in practice: safety checking
is under 0.5 seconds per gesture; average validity checking time is
only 188 ms; lastly, for 97% of the cases, the conﬂict detection time
is below 5 seconds, with only one query taking longer than 15 seconds.
Introduction
1
Over 20 million Kinect sensors are in use today, bringing
millions of people in contact with games and other applica-
tions that respond to voice and gestures. Other companies
such as Leap Motion and Prime Sense are bringing low-
cost depth and gesture sensing to consumer electronics.
The newest generation of smart phones such as Samsung
Galaxy S5 supports rudimentary gestures as well.
Context of prior work: The security and privacy com-
munity is starting to pay attention to concerns created by
the emergence of these technologies. Speciﬁcally, we have
seen several proposals on the intersection of augmented
reality, privacy, and security. D’Antoni et al. [6] provides a
high-level overview of the problem space. Darkly [12], like
our work, puts a layer between the untrusted application
and raw sensor data. Unlike us, Darkly lacks a formal
semantics and does not allow precise reasoning about ap-
plication properties. Jana et al. [11] introduces the notion
of an OS abstraction called a recognizer which enables
gesture detection. Yet their approach fails to provide a
way to extend the system with new recognizers in a safe
manner. SurroundWeb [27] demonstrates what a 3D web
browser modiﬁed with new abstractions for input and
output to protect privacy and security would look like. Yet
it also lacks the capacity for precise automatic reasoning.
We are also inspired by world-drive access control [24],
which attempts to restrict applications from accessing
sensitive objects in the environment. Lastly, Proton [15]
is an example of deﬁning a higher-level abstraction for
gestures that enables precise reasoning.
1.1 Background
User demand for sensors such as Kinect is driven by
exciting new applications, ranging from immersive Xbox
games to purpose-built shopping solutions to healthcare
applications for monitoring elders. Each of these sensors
comes with an SDK which allows third-party developers
to build new and compelling applications. Several devices
such as Microsoft Kinect and Leap Motion use the App
Store model to deliver software to the end-user. Examples
of such stores include Leap Motion’s Airspace airspace.
com, Oculus Platform, and Google Glassware http://
glass-apps.org.
These platforms will evolve to support multiple un-
trusted applications provided by third parties, running
on top of a trusted core such as an operating system.
Since such applications are likely to be distributed through
centralized App stores, there is a chance for application
analysis and enforcement of key safety properties. Below
we describe some of the speciﬁc threats posed by applica-
tions to each other and to the user. We refer the reader
to D’Antoni [6] for a more comprehensive discussion of
threats. To address these threats, we introduce Prepose,
a novel domain speciﬁc language and runtime for writing
gesture recognizers. We designed this language with se-
mantics in terms of SMT formulas. This allows us to use
the state of the art SMT solver Z3 both for static analysis
and for runtime matching of gestures to user movements.
1.2 A Case for Controlled Access to Skeletal Data
There is a natural trade-oﬀ between the platform func-
tionality provided to potentially untrusted applications
2375-1207/16 $31.00 © 2016 IEEE
© 2016, Lucas Silva Figueiredo. Under license to IEEE.
DOI 10.1109/SP.2016.16
DOI 10.1109/SP.2016.16
122
122
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:45 UTC from IEEE Xplore.  Restrictions apply. 
and possible threats to the end-user. We take a two-
pronged approach to deliver a degree of security, privacy,
and reliability. Privacy is achieved through the use of a
domain-speciﬁc language Prepose, whereas security and
reliability are both achieved through the use of sound
static analysis. By combining system design and sound
static analysis, Prepose improves the security, privacy,
and reliability properties of gesture programming. We
discuss privacy-related issues in this section and security
and reliability in Section 1.3.
Prepose raises the privacy bar, keeping in mind that
perfect privacy is elusive. The degree to which end-users
are comfortable with privacy disclosure varies considerably
as well. Therefore it is important to analyze diﬀerent
points in the design space for untrusted applications that
use gesture recognition.
Figure 1 summarizes three diﬀerent levels of function-
ality for untrusted applications that need gesture recog-
nition. On the bottom, applications can be written in
languages such as C++ and have access to raw video and
depth. Access to the raw video stream is seen as highly
privacy-sensitive [11, 27]. In the middle, applications are
written in memory-safe languages such as C# or Java
and have access only to the skeleton API provided by
Kinect for Windows. What is less obvious is that at the
middle level, the skeleton data also leads to potential loss
of privacy. Speciﬁcally, the following attacks are possible
• The skeleton API reveals how many people are in the
room. This may reveal whether the person is alone
or not. If alone, perhaps she is a target for robbery;
if she’s found to be not alone, that may reveal that
she’s involved with someone illicitly.
• The skeleton API reveals the person’s height (relative
height of joints is exposed, and the Kinect API allows
Prepose 
and 
application logic
C# and skeletal data
C++ and raw data
Fig. 1: Three diﬀerent levels of data access for untrusted applica-
tions that perform gesture recognition. We call out threats to the
user at each levels.
123123
Category Property
Description
Reliability gesture safety
Reliability inner validity
validates that gestures have a basic
measure of physical safety, i.e. do
not require the user to overextend
herself physically in ways that may
be dangerous.
checks for inner contradictions i.e.
do not require the user to both keep
her arms up and down.
Security
protected gestures tests whether a gesture conﬂicts
with a reserved system-wide gesture
such as the Kinect attention gesture
(http://bit.ly/1JlXk79).
Security
conﬂicts
ﬁnds potential conﬂicts within a set
of gestures such as two gestures that
would both be recognized from the
same user movements.
Fig. 2: Properties statically checked by Prepose. The ﬁrst two
properties are reliability properties which aid gesture developers. The
second two are security properties that prevent untrusted applica-
tions from conﬂicting with the OS or with other applications.
mapping from skeleton points to depth space so actual
height as well). The application could distinguish
people by “ﬁngerprinting” skeletons.
• The skeleton API reveals ﬁne grained position of the
person’s hands. The application can in principle learn
something about what they write if they write on a
whiteboard, for example.
1.3 Static Analysis for Security & Reliability
At the heart of Prepose is the idea of compiling gesture
descriptions to formulae for an SMT solver such as Z3 [21].
These formulae capture the semantics of the gestures,
enabling precise analyses that boil down to satisﬁability
queries to the SMT solver. The Prepose language has
been designed to be both expressive enough to support
complex gestures, yet restrictive enough to ensure that
key properties remain decidable. In this paper we focus on
the four properties summarized in Figure 2 and detailed in
Section 3.4. Note that a gesture-based application written
in C++ or Java would generally require an extensive
manual audit to ensure the lack of privacy leaks and
security ﬂaws.
1.4 Threat Model
Prepose, at the top of the pyramid in Figure 1, provides
the next layer of privacy by mediating direct access to
the skeleton API. While the threats emanating from raw
video access and skeleton access are eliminated by design,
in Prepose we worry about higher-level properties such
as inter-gesture conﬂicts and gesture safety.
This is akin to how programming in a memory-safe
language allows one to focus on enforcing semantic security
properties without worrying about buﬀer overruns. As a
matter of security and privacy in depth, Prepose is at
the higher level within the pyramid, following the classic
security principle of least privilege.
As is often the case with privacy mechanisms, there are
some side channels that are harder to protect from. In
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:45 UTC from IEEE Xplore.  Restrictions apply. 
GESTURE c r o s s o v e r - l e f t - a r m - s t r e t c h :
POSE r e l a x - a r m s :
point your left arm down ,
point your right arm down .
POSE stretch :
rotate your left arm 90 degrees counter
c l o c k w i s e on the fr o n t a l p l a n e ,
touch your left elbow with your right hand .
E X E C U T I O N :
r e l a x - a r m s ,
slowly stretch and hold for 30 seconds .
Fig. 3: Gesture example: crossover-left-arm-stretch. A gesture
is composed of a sequence of poses. The gesture is completed if the
poses are matched in the sequence speciﬁed in the EXECUTION block.
our scenario, Prepose does not directly protect against
tracking the user by learning which gestures they can
perform (only some users are capable of certain gestures)
or whether, for example, their house is big enough by
testing if the user is able to perform gestures that require
a greater freedom of movement.
While we do not to attempt to catalog all the possible
attacks that may emerge [6], relying on Prepose gives us
conﬁdence that untrusted applications can do less harm
than if they had additional capabilities (lower within the
pyramid).
1.5 Prepose Architecture
The trusted core of Prepose enforces privacy by me-
diating between applications and the raw sensor data.
Inter-application conﬂicts and unsafe gestures are avoided
through static analysis powered by the Z3 SMT solver.
Figure 4 shows our architecture and the security boundary
we draw.
Gesture store: We are also inspired by App Stores for
developer components, such as the Unity 3D Asset store
which oﬀers developers the ability to buy models, object,
and other similar components (https://www.assetstore.
unity3d.com). Today, when developers write their own ges-
ture recognizers from scratch, they use machine learning
methods, or libraries from github and sourceforge. Our
focus in this paper is on gesture recognizers, which are
integral components of AR applications responsible for
detecting gestures performed by users.
As in the case of mobile apps, the App Store central-
ized distribution model provides a unique opportunity to
ensure the security and privacy of gestures before they are
unleashed on unsuspecting users. As such, our approach
in Prepose is to check gestures when they are submitted
to the gesture store.
Figure 5 summarizes our approach. Developers write
gesture recognizers in a high-level domain-speciﬁc lan-
guage, Prepose, then submit them to the gesture store.
Because our domain-speciﬁc language has been carefully
engineered, we can perform precise and sound static anal-
yses for a range of security and privacy properties. The re-
sults of this analysis tell us whether the submitted gesture
is “deﬁnitely OK,”“deﬁnitely not OK,” or, as may happen
Trust 
boundary
Skeleton
Prepose Code
Gesture Events
Prepose 
interpreter 
and 
runtime
MSR Z3 
constraint 
solver
App 0
App 1
App 2
App 3
App 4
Fig. 4: Security architecture of Prepose.
occasionally, “needs attention from a human auditor.” In
our experiments in Section 5, we encountered only one
case of reasoning needing attention. A reasonable approach
would be to reject submissions that do not qualify as
“deﬁnitely OK.”
Improving gesture authoring experience: In addi-
tion to addressing threats from untrusted applications, a
language-based approach can improve gesture authoring.
Gestures are an integral part of sensor-based always-on
application, the equivalent of UI events like left mouse