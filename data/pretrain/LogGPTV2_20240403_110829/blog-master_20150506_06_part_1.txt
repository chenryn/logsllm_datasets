## PostgreSQL 检查点性能影响及源码分析 - 6          
### 作者                           
digoal                            
### 日期                          
2015-05-06                              
### 标签                          
PostgreSQL , 检查点 , 性能影响 , full page write , FPW , 可靠性                                                          
----                          
## 背景            
数据库可靠性从何而来？              
数据库崩溃后如何恢复，从什么位置开始恢复？              
数据库检查点是什么？              
检查点要干些什么？              
为什么脏数据较多时，检查点会对性能有一定的影响？              
什么是full page write？              
相信这些问题是搞数据库的同学都想搞明白的。              
接下里的一系列文章，围绕检查点展开讲解，讲一讲检查点的原理，以及为什么脏数据较多是，它会对数据库产生一定的性能影响。                
## 正文            
本文将揭开checkpoint带来的性能影响的原因，和写full page XLOG有关系，另外和IO有轻微关系（前面已经讨论过，只要你的系统IO能力强，可以忽略IO的影响，参考http://blog.163.com/digoal@126/blog/static/163877040201541134842882/）。    
本文要说的是full page write的影响，这个影响实际上是非常大的。  
1\. 写xlog的本质是这样的，数据库在刷shared buffer中的脏块前，必须确保脏块相关的REDO操作先写XLOG成功，才能刷脏块。  
2\. PostgreSQL的检查点有什么作用呢？  
当数据库crash后需要恢复时，或者因为其他原因需要恢复时，从最后一个检查点开始，读取XLOG并实施恢复。  
根据以上特征，为了保证数据的一致性，除了保证XLOG写成功，还要保证数据块是一致的（即刷数据块必须是原子操作，磁盘中这个数据块不能有新老数据共同存在）。  
full_page_writes 是在文件系统不能保证这种原子操作的前提下设计的，做法就是当刷脏数据块前，如果这个数据块是在检查点后第一次变脏的，那么需要在XLOG中记录下整个数据块的内容。那么在数据恢复时，即使刷脏块不是原子操作也没关系，因为WAL中记录了整个数据块的内容，恢复时会使用xlog中记录的full page覆盖数据文件中的块。  
参数如下：  
```
full_page_writes (boolean)  
When this parameter is on, the PostgreSQL server writes the entire content of each disk page to WAL during the first modification of that page after a checkpoint. 
This is needed because a page write that is in process during an operating system crash might be only partially completed, leading to an on-disk page that contains a mix of old and new data. 
The row-level change data normally stored in WAL will not be enough to completely restore such a page during post-crash recovery. 
Storing the full page image guarantees that the page can be correctly restored, but at the price of increasing the amount of data that must be written to WAL. 
(Because WAL replay always starts from a checkpoint, it is sufficient to do this during the first change of each page after a checkpoint. Therefore, one way to reduce the cost of full-page writes is to increase the checkpoint interval parameters.)  
Turning this parameter off speeds normal operation, but might lead to either unrecoverable data corruption, or silent data corruption, after a system failure. 
The risks are similar to turning off fsync, though smaller, and it should be turned off only based on the same circumstances recommended for that parameter.  
Turning off this parameter does not affect use of WAL archiving for point-in-time recovery (PITR) (see Section 24.3).  
This parameter can only be set in the postgresql.conf file or on the server command line. The default is on.  
```
正因为这样，数据块越大，写full page带来的影响也愈大，而且检查点越频繁，WAL内容也会越多（因为FULL PAGE WRITE较多）。  
那么怎么样才能安全关闭full_page_writes 呢？  
1\. 文件系统能帮我们避免partial write。数据文件所在的文件系统可以确保不出现partial write, 例如写一个32K的数据块，那么这个写操作必须是原子性的。例如zfs文件系统提供了这样的参数，允许用户打开full page write，如果文件系统打开了这种写，数据库就可以关闭full_page_writes。  
2\. 硬件支持full page write接口，例如FusionIO,以及宝存的PCI-E SSD硬盘产品，提供了相应的原子写API，(或者它们的原子操作本身就大于数据库的block size)，只要PostgreSQL 的block_size小于等于硬件能提供的原子写SIZE，使用对应的API后，就可以关闭数据库的full page writes。  
如果关闭full_page_writes 后，因为硬件问题，或者其他问题导致操作系统Crash, 并且在检查点后第一次成为脏块时出现了partial write(data corruption)。(例如32KB的数据块，其中有一些是未改写(old)，一些已改写(new)) 那么怎么办？  
如果真的这样了的话，查询数据时，遇到这种数据块可能报错，可以设置zero_damaged_pages来跳过这种数据块。  
```
zero_damaged_pages (boolean)  
Detection of a damaged page header normally causes PostgreSQL to report an error, aborting the current transaction. 
Setting zero_damaged_pages to on causes the system to instead report a warning, zero out the damaged page in memory, and continue processing. 
This behavior will destroy data, namely all the rows on the damaged page. 
However, it does allow you to get past the error and retrieve rows from any undamaged pages that might be present in the table. 
It is useful for recovering data if corruption has occurred due to a hardware or software error. 
You should generally not set this on until you have given up hope of recovering data from the damaged pages of a table. 
Zeroed-out pages are not forced to disk so it is recommended to recreate the table or the index before turning this parameter off again. 
The default setting is off, and it can only be changed by a superuser.  
```
另一方面，XLOG必须是顺序写入的，所以有一个锁保护，因此在write wal to wal buffer时，需要加这个锁。  
```
/*  
 * Inserting to WAL is protected by a small fixed number of WAL insertion  
 * locks. To insert to the WAL, you must hold one of the locks - it doesn't  
 * matter which one. To lock out other concurrent insertions, you must hold  
 * of them. Each WAL insertion lock consists of a lightweight lock, plus an  
 * indicator of how far the insertion has progressed (insertingAt).  
 *  
 * The insertingAt values are read when a process wants to flush WAL from  
 * the in-memory buffers to disk, to check that all the insertions to the  
 * region the process is about to write out have finished. You could simply  
 * wait for all currently in-progress insertions to finish, but the  
 * insertingAt indicator allows you to ignore insertions to later in the WAL,  
 * so that you only wait for the insertions that are modifying the buffers  
 * you're about to write out.  
 *  
 * This isn't just an optimization. If all the WAL buffers are dirty, an  
 * inserter that's holding a WAL insert lock might need to evict an old WAL  
 * buffer, which requires flushing the WAL. If it's possible for an inserter  
 * to block on another inserter unnecessarily, deadlock can arise when two  
 * inserters holding a WAL insert lock wait for each other to finish their  
 * insertion.  
 *  
 * Small WAL records that don't cross a page boundary never update the value,  
 * the WAL record is just copied to the page and the lock is released. But  
 * to avoid the deadlock-scenario explained above, the indicator is always  
 * updated before sleeping while holding an insertion lock.  
 */  
typedef struct  
{  
        LWLock          lock;  
        XLogRecPtr      insertingAt;  
} WALInsertLock;  
```
也就是说，写WAL越慢，TPS会越低，即使是异步（因为wal异步虽然不需要等flush wal to disk，但是也要保证写wal buffer完成。）  
我们来做一个测试，重新启动数据库，刚启动时，数据库会做一个启动检查点，所以第一次的脏块需要写full page：  
为了规避shared buffer的影响，我们先使用prewarm把数据加载到shared buffer中  
```
$ pg_ctl start  
$ psql  
digoal=> select * from pg_prewarm('tbl');  
 pg_prewarm   
------------  
     122933  
(1 row)  
digoal=> select * from pg_prewarm('tbl_pkey');  
 pg_prewarm   
------------  
      34023  
(1 row)  
```
开始测试  
```
$ cat test.sql  
\setrandom id 1 50000000  
update tbl set crt_time=now() where id = :id ;  
```
可以看到，测试数据和做检查点时是一样的，性能逐渐上升，原因就是一开始的WAL要写full page，影响了性能。  
```
$ pgbench -M prepared -n -r -f ./test.sql -P 1 -c 28 -j 28 -T 1000000  
progress: 1.0 s, 14744.4 tps, lat 1.865 ms stddev 4.009  
progress: 2.0 s, 16811.3 tps, lat 1.668 ms stddev 4.304  
progress: 3.0 s, 19606.2 tps, lat 1.415 ms stddev 3.358  
progress: 4.0 s, 23229.7 tps, lat 1.214 ms stddev 2.922  
progress: 5.0 s, 27691.0 tps, lat 1.001 ms stddev 2.356  
progress: 6.0 s, 34756.0 tps, lat 0.810 ms stddev 1.685  
progress: 7.0 s, 46214.1 tps, lat 0.604 ms stddev 0.839  
progress: 8.0 s, 54729.7 tps, lat 0.510 ms stddev 0.358  
progress: 9.0 s, 56774.4 tps, lat 0.491 ms stddev 0.324  
progress: 10.0 s, 57470.0 tps, lat 0.485 ms stddev 0.330  
progress: 11.0 s, 57342.1 tps, lat 0.487 ms stddev 0.349  
progress: 12.0 s, 58505.2 tps, lat 0.477 ms stddev 0.323  
progress: 13.0 s, 58999.8 tps, lat 0.473 ms stddev 0.315  
progress: 14.0 s, 59607.8 tps, lat 0.468 ms stddev 0.310  
progress: 15.0 s, 59006.1 tps, lat 0.473 ms stddev 0.328  
progress: 16.0 s, 59519.8 tps, lat 0.468 ms stddev 0.315  
progress: 17.0 s, 59787.6 tps, lat 0.466 ms stddev 0.310  
progress: 18.0 s, 59188.9 tps, lat 0.471 ms stddev 0.324  
progress: 19.0 s, 59626.9 tps, lat 0.468 ms stddev 0.321  
progress: 20.0 s, 61206.3 tps, lat 0.456 ms stddev 0.297  
progress: 21.0 s, 59606.7 tps, lat 0.468 ms stddev 0.318  
progress: 22.0 s, 60024.8 tps, lat 0.465 ms stddev 0.316  
```
热数据越多，这种“热身”效应越明显。  
现在我把full page writes关闭，再次测试：  
```
full_page_writes = off  
pg_ctl restart -m fast  
$ psql  
digoal=> select * from pg_prewarm('tbl');  
 pg_prewarm   
------------  
     122933  
(1 row)  
digoal=> select * from pg_prewarm('tbl_pkey');  
 pg_prewarm   
------------  
      34023  
(1 row)  
```
可以看到，“热身”效应没有了，因为WAL不再需要写full page了。  
```
$ pgbench -M prepared -n -r -f ./test.sql -P 1 -c 28 -j 28 -T 1000000  
progress: 1.0 s, 73337.2 tps, lat 0.375 ms stddev 0.350  
progress: 2.0 s, 68862.4 tps, lat 0.405 ms stddev 0.324  
progress: 3.0 s, 64543.7 tps, lat 0.432 ms stddev 0.321  
progress: 4.0 s, 62050.6 tps, lat 0.449 ms stddev 0.325  
progress: 5.0 s, 61312.0 tps, lat 0.455 ms stddev 0.316  
progress: 6.0 s, 60668.8 tps, lat 0.460 ms stddev 0.318  
progress: 7.0 s, 59014.3 tps, lat 0.473 ms stddev 0.331  
progress: 8.0 s, 60419.3 tps, lat 0.462 ms stddev 0.307  
progress: 9.0 s, 60216.9 tps, lat 0.463 ms stddev 0.310  
progress: 10.0 s, 59478.2 tps, lat 0.469 ms stddev 0.318  
progress: 11.0 s, 60376.4 tps, lat 0.462 ms stddev 0.301  
progress: 12.0 s, 59792.6 tps, lat 0.466 ms stddev 0.318  
progress: 13.0 s, 59747.6 tps, lat 0.467 ms stddev 0.318  