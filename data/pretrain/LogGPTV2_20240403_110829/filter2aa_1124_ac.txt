pprNew->count = 0;
pprNew->flags = (ppr->flags & ~PD_BEZIERS);
// 3. init the prev-link of the new record
pprNew->pprprev = ppr->pprprev;
if (pprNew->pprprev == (PPATHREC) NULL)
ppath->pprfirst = pprNew; // either insert the record to the head (pprfirst)
else
pprNew->pprprev->pprnext = pprNew; // or insert the record to the prev node
// 4. flattening
......
// 5. init the next-link of the new record
pprNew->pprnext = ppr->pprnext;
if (pprNew->pprnext == (PPATHREC) NULL)
ppath->pprlast = pprNew; // either insert the record to the tail (pprlast)
else
pprNew->pprnext->pprprev = pprNew; // or insert the record to the next node
// 6. return
return(pprNew);
}
PATH
ppachain
pprfirst
pprlast
………
pprnext
pprprev
flags
count
………
PATHRECORD
pprnext
pprprev
PD_BEZIERS
count
………
PATHRECORD
pprnext
pprprev
flags
count
………
PATHRECORD
ppr
pprnext
pprprev
flags
count
………
PATHRECORD
看起来 pprNew 节点得到了完整的初始化，那么问题究竟藏在哪
呢？ ; )
pprNew
看来我需要仔细审计第四步骤
PPATHREC EPATHOBJ::pprFlattenRec(PATHRECORD *ppr)
{
// 1. create a new record
if (newpathrec(&pprNew,&maxadd,MAXLONG) != TRUE)
return (PPATHREC) NULL;
// 2. init some fields (count/flags ...)
pprNew->count = 0;
pprNew->flags = (ppr->flags & ~PD_BEZIERS);
// 3. init the prev-link of the new record
pprNew->pprprev = ppr->pprprev;
if (pprNew->pprprev == (PPATHREC) NULL)
ppath->pprfirst = pprNew; // either insert the record to the head (pprfirst)
else
pprNew->pprprev->pprnext = pprNew; // or insert the record to the prev node
// 4. flattening
......
// 5. init the next-link of the new record
pprNew->pprnext = ppr->pprnext;
if (pprNew->pprnext == (PPATHREC) NULL)
ppath->pprlast = pprNew; // either insert the record to the tail (pprlast)
else
pprNew->pprnext->pprprev = pprNew; // or insert the record to the next node
// 6. return
return(pprNew);
}
if (newpathrec(&pprNewNew,&maxadd,MAXLONG) != TRUE)
return (PPATHREC) NULL;
PATH
ppachain
pprfirst
pprlast
………
pprnext
pprprev
flags
count
………
PATHRECORD
pprnext
pprprev
PD_BEZIERS
count
………
PATHRECORD
pprnext
pprprev
flags
count
………
PATHRECORD
ppr
pprnext
pprprev
flags
count
………
PATHRECORD
pprnext
pprprev
flags
count
………
PATHRECORD
pprNewNew
???
return NULL
PPATHREC EPATHOBJ::pprFlattenRec(PATHRECORD *ppr)
{
// 1. create a new record
if (newpathrec(&pprNew,&maxadd,MAXLONG) != TRUE)
return (PPATHREC) NULL;
// 2. init some fields (count/flags ...)
pprNew->count = 0;
pprNew->flags = (ppr->flags & ~PD_BEZIERS);
// 3. init the prev-link of the new record
pprNew->pprprev = ppr->pprprev;
if (pprNew->pprprev == (PPATHREC) NULL)
ppath->pprfirst = pprNew; // either insert the record to the head (pprfirst)
else
pprNew->pprprev->pprnext = pprNew; // or insert the record to the prev node
// 4. flattening
......
// 5. init the next-link of the new record
pprNew->pprnext = ppr->pprnext;
if (pprNew->pprnext == (PPATHREC) NULL)
ppath->pprlast = pprNew; // either insert the record to the tail (pprlast)
else
pprNew->pprnext->pprprev = pprNew; // or insert the record to the next node
// 6. return
return(pprNew);
}
if (newpathrec(&pprNewNew,&maxadd,MAXLONG) != TRUE)
return (PPATHREC) NULL;
PATH
ppachain
pprfirst
pprlast
………
pprnext
pprprev
flags
count
………
PATHRECORD
pprnext
pprprev
PD_BEZIERS
count
………
PATHRECORD
pprnext
pprprev
flags
count
………
PATHRECORD
ppr
pprnext
pprprev
flags
count
………
PATHRECORD
???
问题的根源
win32k!EPATHOBJ::pprFlattenRec 例程的一个分支对于内存分
配失败的错误处理代码存在问题。
如果之前的 pprNew 节点是从池中申请的，则该节点的初始内
容未知，因为池管理器不会主动内存清零。
如果 pprNewNew 节点内存申请失败，则 PATHRECORD 链表
的形态将被破坏 —— 一个初始化了一半的 pprNew 节点被接
入了链表，此时未初始化部分 —— pprNew.next 可能是任意
值。
遍历上述链表将导致访问 pprNew.next，而谁又知道我们会被
引向何方呢？
让我们思考一下，您有几种方案修补这个编码错误？
补丁日前的思考
临时补丁方案 A：主动清零池中的数据
优点：逻辑上容易想到；pprNew.next 如果为 NULL 意味着尾节点
缺点：定位 freepathalloc 等相对复杂；PATHRECORD 链表其它节点丢
失
临时补丁方案 B：Patch 池计数器比较代码，禁用池机制
优点：不需要 Inline Hook，1 字节热补丁
缺点：PATHALLOC 池机制被禁用；PATHRECORD 链表其它节点丢失
正式补丁方案 A：重写错误处理代码
恢复链表正确的形态
正式补丁方案 B：重写链表操作代码
链表操作应保证原子性
微软官方补丁方案
2013 年 6 月 26 日，微软公司发布的 Windows Blue Release 
Preview Build-9431 版中已经修复了这个问题，这早于 7 月 9 
日的补丁日。
EPATHOBJ::pprFlattenRec(ppr)
CVE-2013-3660
5-Dec-1990 — 9-Jul-2013
Windows 8 9200
Windows Blue RP 9431
; ppath->ppachain->pprfreestart =
NEXTPATHREC(pprNew);
; pprNew->pprnext = ppr->pprnext;
; if (pprNew->pprnext == NULL)
; pprNew->pprnext->pprprev = pprNew;
漏洞利用
第四部分
好吧，这是个问题但那又怎样？
"这没什么大不了吧..."
"这个问题很难触发的..."
"提权漏洞？怎么可能..."
"如果内存申请都失败了，系统早就无法正常工作了..."
可真的是这样吗？
让我们看看一切是如何演进成 "任意地址写入" 的提权问题的。
（1）控制 PATHALLOC 内存池
（2）模拟内存压力测试环境
so what~
利用第一阶段 — BSoD 演示阶段
PATH
ppachain
pprfirst
pprlast
………
pprnext
pprprev
flags
count
………
PATHRECORD
pprnext
pprprev
PD_BEZIERS
count
………
PATHRECORD
pprnext
pprprev
flags
count
………
PATHRECORD
ppr
pprnext
pprprev
flags
count
………
PATHRECORD
0x41414141
BSoD
PATHALLOC::freelist
#define FREELIST_MAX  4
WangYu, All Rights Reserved.
………
PATHALLOC 01
http://blog.cmpxchg8b.com/2013/05/introduction-to-windows-kernel-security.html
（1）利用 CreateRoundRectRgn 等技巧大量消耗内存，模拟内存压力测试环
境
（2）将垃圾数据以 "点" 的形式压入 PATHALLOC 内存池 —— 池污染
（3）循环调用 EPATHOBJ::bFlatten 例程尝试触发问题
步骤三的一处细节：
3.1 第一次调用
EPATHOBJ::bFlatten：
触发问题代码，构造畸形链表
3.2 第二次调用
EPATHOBJ::bFlatten：
遍历畸形链表，产生访问违例
0x41414141
0x41414141
0x41414141
0x41414141
0x41414141
0x41414141
0x41414141
0x41414141
0x41414141
0x41414141
利用第二阶段 — 扩大可控数据阶段
http://seclists.org/fulldisclosure/2013/May/91
...... The bug is really nice, but exploitation when allocations start failing is tricky.
As vuln-dev is dead, I thought I'd post here, I don't have much free time to work 
on silly Microsoft code, so I'm looking for ideas on how to fix the final obstacle 
for exploitation ......
将一个用户态地址（而不是垃圾数据）以 "点" 的形式压入 PATHALLOC 池，
win32k!EPATHOBJ::bFlatten() 例程在遍历链表时会访问该可控的环三地址：
// generate a large number of Bezier Curves made up of pointers to our PATHRECORD object.
for (PointNum = 0; PointNum > 4;
Points[PointNum].y    = (ULONG)(PathRecord) >> 4;
PointTypes[PointNum] = PT_BEZIERTO;
}
此时的垃圾数据即用户态可控的 PathRecord 节点的基地址，
win32k!EPATHOBJ::bFlatten() 例程访问它意味着将会访问 PathRecord->next
PathRecord->next    = (PVOID)(0x41414141);
PathRecord->prev
= (PVOID)(0x42424242);
利用第二阶段 — 扩大可控数据阶段
PATH
ppachain
pprfirst
pprlast
………
pprnext
pprprev
flags
count
………
PATHRECORD
pprnext
pprprev
PD_BEZIERS
count
………
PATHRECORD
pprnext
pprprev
flags
count
………
PATHRECORD
ppr
pprnext
pprprev
flags
count
………
PATHRECORD
………
PATHALLOC 01
Ring-3
Ring-0
pprnext
pprprev
flags
count
………
PATHRECORD
虽同样是产生了访问违例，
但阶段一和阶段二是不一样的：
阶段一是在内核访问了非法数据；
阶段二是将指针遍历的下一链引导
向用户态的 PATHRECORD 节点，
进而访问非法地址。
即攻击代码有了初步的链表操控。
http://seclists.org/fulldisclosure/2013/May/91
PATHALLOC::freelist
#define FREELIST_MAX  4
WangYu, All Rights Reserved.
0x41414141
BSoD
Ring-3
PATHRECORD
Ring-3
PATHRECORD
Ring-3
PATHRECORD
Ring-3
PATHRECORD
Ring-3
PATHRECORD
利用第三阶段 — 任意地址写入阶段
http://www.exploit-db.com/exploits/25611/
...... I'm quite proud of this list cycle trick, here's how to turn it into an 
arbitrary write ......
Tavis Ormandy 为自己自豪的原因是他想到了一个链表循环诡计！想法如下：
仍然将一个环三地址以 "点" 的形式压入 PATHALLOC 池。
环三地址 PathRecord.next 中不再填写无意义的值，而是填写自己：
PathRecord->next    = PathRecord;
PathRecord->prev
= (PVOID)(0x42424242);
PathRecord->flags   = 0;
这个行为会导致 win32k!EPATHOBJ::bFlatten() 遍历链表时产生死循环：
BOOL EPATHOBJ::bFlatten()
{
for (PATHRECORD *ppr = ppath->pprfirst;
ppr != (PPATHREC) NULL;
ppr = ppr->pprnext)
{
if (ppr->flags & PD_BEZIERS)   // 只要节点不含有 PD_BEZIERS 标志，死循环就立刻成立
{
ppr = pprFlattenRec(ppr); // 我们不想此时受到干扰
......
}