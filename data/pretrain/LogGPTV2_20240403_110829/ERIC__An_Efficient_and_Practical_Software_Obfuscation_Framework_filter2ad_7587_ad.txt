We introduced a fully end-to-end and comprehensive frame-
work solution to both software obfuscation and trusted ex-
ecution. Compared to existing trusted execution and soft-
ware obfuscation architectures, our framework signiﬁcantly
improves comprehensiveness and generalizability. In the pro-
totype, hardware overhead and compiler costs are much lower
compared to existing architectures. Our architecture combines
two technology-independent ideas: 1) While compiling, the
program is encrypted with the PUF-based key of the target
hardware and generates its signature. 2) Before execution on
the target hardware, ERIC’s hardware architecture decrypts
the program with its PUF-based key and after verifying with
the signature that
the program is in the original version,
executes it. While effective at improving both the safety of the
program and authentication of executions on hardware, ERIC
Framework is also conﬁgurable and simple to implement.
Our future work will focus on improving the parallelism,
performance, and scalability abilities of the architecture so that
the framework can be implemented in distributed systems and
implemented on servers. We also aim to bring RSA-based key
generation and usage to ERIC.
REFERENCES
[1] S. Al-Sarawi, M. Anbar, K. Alieyan, and M. Alzubaidi, “Internet
of things (iot) communication protocols,” in 2017 8th International
conference on information technology (ICIT). IEEE, 2017, pp. 685–690.
[2] A. Awad, Y. Wang, D. Shands, and Y. Solihin, “Obfusmem: A low-
overhead access obfuscation for trusted memories,” in Proceedings of
the 44th Annual International Symposium on Computer Architecture,
2017, pp. 107–119.
[3] K. P. Birman, “Building secure and reliable network applications,” in
International Conference on Worldwide Computing and Its Applications.
Springer, 1997, pp. 15–28.
[4] A. Bolat, L. Cassano, P. Reviriego, O. Ergin, and M. Ottavi, “A micro-
processor protection architecture against hardware trojans in memories,”
in 2020 15th Design & Technology of Integrated Systems in Nanoscale
Era (DTIS).
IEEE, 2020, pp. 1–6.
Fig. 7: Execution Time Comparison of Each Benchmark
Application based on its Unencrypted Program’s Execution
with ERIC. However, there is a direct proportionality between
the dynamic size of the program and the performance.
V. RELATED WORK
To the best of our knowledge, ERIC is the ﬁrst software
obfuscation and trusted execution framework that is fully end-
to-end, from the encrypted compilation on software to trusted
execution on the hardware. ERIC enables programs to be
securely packaged as they send the compiler and only execute
on target hardware without any change to the original pro-
gram. ERIC’s architecture and implementation are described
in sections III and IV.
In this section, we brieﬂy describe other related works about
software obfuscation and trusted execution. In [30], [29], for
ensuring memory security and program authentication, the
entire memory is encrypted with the message authentication
code. In these studies, every line in the memory is protected
with AES encryption. The inadequacy of this study is that it
uses AES encryption for each line in the memory and cannot
create a secure area for the main memory. There is the high
memory latency that AES brings. Programs with poor cache
performance experience an extra delay each time when trying
to access the main memory. In [47], [49], [48], the encryption-
based mechanism is proposed to prevent attacks based on
hardware and software. It performs PUF-based encryption and
uses a security tree consisting of different levels in memory.
They offer a toolchain for developing secure software for
their architecture that includes a secure operating system to
manage different levels of memory protection. However, the
proposed architecture is built for a speciﬁc SoC and cannot be
compatible with all processors or ISAs. The applicability of
the system becomes difﬁcult due to changes in the operating
system. In addition, there is an average of 30% slowdown
in instruction-per-cycle performance relative to the baseline.
Another study provides a security layer with an isolated
instruction set extension in hardware. In [39], encryption is
made by PUF keys. Security of the memory and the program is
provided by encryption with this key. It supports systems built
according to the protocol between the hardware manufacturer
and the software manufacturer. The change in the instruction
architecture causes the general compilation tools to become
unavailable. This study, unlike our study, does not encrypt
the program. Instead, caches have an architecture where they
work like main memory, and work is focused on translation
lookaside buffer (TLB) performance. In contrast, the architec-
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:47 UTC from IEEE Xplore.  Restrictions apply. 
472
[5] D. Brumley, “Analysis and defense of vulnerabilities in binary code,”
CARNEGIE-MELLON UNIV PITTSBURGH PA SCHOOL OF COM-
PUTER SCIENCE, Tech. Rep., 2008.
[6] M. J. Callaghan, J. Harkin, T. McGinnity, and L. P. Maguire, “An
internet-based methodology for remotely accessed embedded systems,”
in IEEE International Conference on Systems, Man and Cybernetics,
vol. 6.
IEEE, 2002, pp. 6–pp.
[7] B. Chatterjee, D. Das, S. Maity, and S. Sen, “Rf-puf: Enhancing iot
security through authentication of wireless nodes using in-situ machine
learning,” IEEE Internet of Things Journal, vol. 6, no. 1, pp. 388–398,
2018.
[8] Q. Chen, G. Csaba, P. Lugli, U. Schlichtmann, and U. R¨uhrmair, “The
bistable ring puf: A new architecture for strong physical unclonable func-
tions,” in 2011 IEEE International Symposium on Hardware-Oriented
Security and Trust.
IEEE, 2011, pp. 134–141.
[9] Chipsalliance, “Rocket Chip,” https://github.com/chipsalliance/rocket-
chip.
[10] B. Coppens, I. Verbauwhede, K. De Bosschere, and B. De Sutter,
“Practical mitigations for timing-based side-channel attacks on modern
x86 processors,” in 2009 30th IEEE symposium on security and privacy.
IEEE, 2009, pp. 45–60.
[11] V. Costan and S. Devadas, “Intel sgx explained,” Cryptology ePrint
Archive, Report 2016/086, 2016, https://ia.cr/2016/086.
[12] B. Cyr, J. Mahmod, and U. Guin, “Low-cost and secure ﬁrmware
obfuscation method for protecting electronic systems from cloning,”
IEEE Internet of Things Journal, vol. 6, no. 2, pp. 3700–3711, 2019.
[13] J. Das, K. Scott, S. Rajaram, D. Burgett, and S. Bhanja, “Mram puf:
A novel geometry based magnetic puf with integrated cmos,” IEEE
Transactions on Nanotechnology, vol. 14, no. 3, pp. 436–443, 2015.
[14] S. Dolev, Ł. Krzywiecki, N. Panwar, and M. Segal, “Optical puf for non-
forwardable vehicle authentication,” Computer Communications, vol. 93,
pp. 52–67, 2016.
[15] P. Falcarin, S. Di Carlo, A. Cabutto, N. Garazzino, and D. Barberis,
“Exploiting code mobility for dynamic binary obfuscation,” in 2011
World Congress on Internet Security (WorldCIS-2011).
IEEE, 2011,
pp. 114–120.
[16] FIPS, PUB, “180-2: Secure hash standard (SHS),” US Department of
Commerce, National Institute of Standards and Technology (NIST),
2012.
[17] C. W. Fletcher, M. v. Dijk, and S. Devadas, “A secure processor architec-
ture for encrypted computation on untrusted programs,” in Proceedings
of the seventh ACM workshop on Scalable trusted computing, 2012, pp.
3–8.
[18] D. D. Gajski, S. Abdi, A. Gerstlauer, and G. Schirner, Embedded system
Springer Science &
design: modeling, synthesis and veriﬁcation.
Business Media, 2009.
[19] A. Garg and T. T. Kim, “Design of sram puf with improved uniformity
and reliability utilizing device aging effect,” in 2014 IEEE International
Symposium on Circuits and Systems (ISCAS).
IEEE, 2014, pp. 1941–
1944.
[20] N. Gershenfeld, R. Krikorian, and D. Cohen, “The internet of things,”
Scientiﬁc American, vol. 291, no. 4, pp. 76–81, 2004.
[21] G. Gracioli and A. A. Fr¨ohlich, “An operating system infrastructure for
remote code update in deeply embedded systems,” in Proceedings of the
1st International Workshop on Hot Topics in Software Upgrades, 2008,
pp. 1–5.
[22] J. Gubbi, R. Buyya, S. Marusic, and M. Palaniswami, “Internet of things
(iot): A vision, architectural elements, and future directions,” Future
generation computer systems, vol. 29, no. 7, pp. 1645–1660, 2013.
[23] M. R. Guthaus, J. S. Ringenberg, D. Ernst, T. M. Austin, T. Mudge,
and R. B. Brown, “Mibench: A free, commercially representative
embedded benchmark suite,” in Proceedings of the fourth annual IEEE
international workshop on workload characterization. WWC-4 (Cat. No.
01EX538).
IEEE, 2001, pp. 3–14.
[24] C. Herder, M.-D. Yu, F. Koushanfar, and S. Devadas, “Physical unclon-
able functions and applications: A tutorial,” Proceedings of the IEEE,
vol. 102, no. 8, pp. 1126–1141, 2014.
[25] J. S. Kim, M. Patel, H. Hassan, and O. Mutlu, “The dram latency
puf: Quickly evaluating physical unclonable functions by exploiting
the latency-reliability tradeoff in modern commodity dram devices,” in
2018 IEEE International Symposium on High Performance Computer
Architecture (HPCA).
IEEE, 2018, pp. 194–207.
[26] U. Kremer, J. Hicks, and J. Rehg, “A compilation framework for power
and energy management on mobile computers,” in International Work-
shop on Languages and Compilers for Parallel Computing. Springer,
2001, pp. 115–131.
[27] C. Kruegel, E. Kirda, D. Mutz, W. Robertson, and G. Vigna, “Automat-
ing mimicry attacks using static binary analysis,” in USENIX Security
Symposium, vol. 14, 2005, pp. 11–11.
[28] C. Lattner and V. Adve, “Llvm: A compilation framework for lifelong
program analysis & transformation,” in International Symposium on
IEEE, 2004,
Code Generation and Optimization, 2004. CGO 2004.
pp. 75–86.
[29] D. Lie, C. Thekkath, M. Mitchell, P. Lincoln, D. Boneh, J. Mitchell,
and M. Horowitz, “Architectural support for copy and tamper resistant
software,” Acm Sigplan Notices, vol. 35, no. 11, pp. 168–177, 2000.
[30] D. Lie, C. A. Thekkath, and M. Horowitz, “Implementing an untrusted
operating system on trusted hardware,” in Proceedings of the nineteenth
ACM symposium on Operating systems principles, 2003, pp. 178–192.
[31] LLVM, “The LLVM Compiler Infrastructure,” https://github.com/llvm/
llvm-project.
[32] T. Machida, D. Yamamoto, M. Iwamoto, and K. Sakiyama, “A new
arbiter puf for enhancing unpredictability on fpga,” The Scientiﬁc World
Journal, vol. 2015, 2015.
[33] S. Madakam, V. Lake, V. Lake, V. Lake et al., “Internet of things (iot):
A literature review,” Journal of Computer and Communications, vol. 3,
no. 05, p. 164, 2015.
[34] R. Maes and I. Verbauwhede, “Physically unclonable functions: A study
on the state of the art and future research directions,” in Towards
Hardware-Intrinsic Security. Springer, 2010, pp. 3–37.
[35] P. Marwedel, Embedded system design: embedded systems foundations
of cyber-physical systems, and the internet of things. Springer Nature,
2021.
[36] S. Morozov, A. Maiti, and P. Schaumont, “A comparative analysis of
delay based puf implementations on fpga.” IACR Cryptol. ePrint Arch.,
vol. 2009, p. 629, 2009.
[37] S. Morozov, A. Maiti, and P. Schaumont, “An analysis of delay based
puf implementations on fpga,” in International Symposium on Applied
Reconﬁgurable Computing. Springer, 2010, pp. 382–387.
[38] N. Nethercote, “Dynamic binary analysis and instrumentation,” Univer-
sity of Cambridge, Computer Laboratory, Tech. Rep., 2004.
[39] E. Owusu, J. Guajardo, J. McCune, J. Newsome, A. Perrig, and
A. Vasudevan, “Oasis: On achieving a sanctuary for integrity and secrecy
on untrusted platforms,” in Proceedings of the 2013 ACM SIGSAC
conference on Computer & communications security, 2013, pp. 13–24.
[40] K. Phalak, A. Ash-Saki, M. Alam, R. O. Topaloglu, and S. Ghosh,
“Quantum puf for security and trust in quantum computing,” IEEE
Journal on Emerging and Selected Topics in Circuits and Systems,
vol. 11, no. 2, pp. 333–342, 2021.
[41] S. Pinto and N. Santos, “Demystifying arm trustzone: A comprehensive
survey,” ACM Computing Surveys (CSUR), vol. 51, no. 6, pp. 1–36,
2019.
[42] M. Popa, “Binary code disassembly for reverse engineering,” Journal of
Mobile, Embedded and Distributed Systems, vol. 4, no. 4, pp. 233–248,
2012.
[43] S. Schrittwieser and S. Katzenbeisser, “Code obfuscation against static
and dynamic reverse engineering,” in International workshop on infor-
mation hiding. Springer, 2011, pp. 270–284.
[44] S. She, R. Lotufo, T. Berger, A. Wasowski, and K. Czarnecki, “Reverse
engineering feature models,” in Proceedings of the 33rd International
Conference on Software Engineering, 2011, pp. 461–470.
[45] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino,
A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel et al., “Sok:(state
of) the art of war: Offensive techniques in binary analysis,” in 2016 IEEE
Symposium on Security and Privacy (SP).
IEEE, 2016, pp. 138–157.
[46] P. Subramanyan, N. Tsiskaridze, W. Li, A. Gasc´on, W. Y. Tan, A. Tiwari,
N. Shankar, S. A. Seshia, and S. Malik, “Reverse engineering digital
circuits using structural and functional analyses,” IEEE Transactions on
Emerging Topics in Computing, vol. 2, no. 1, pp. 63–80, 2013.
[47] G. E. Suh, D. Clarke, B. Gassend, M. Van Dijk, and S. Devadas, “Aegis:
Architecture for tamper-evident and tamper-resistant processing,” in
ACM International Conference on Supercomputing 25th Anniversary
Volume, 2003, pp. 357–368.
[48] G. E. Suh, C. W. O’Donnell, and S. Devadas, “Aegis: A single-chip
secure processor,” IEEE Design & Test of Computers, vol. 24, no. 6,
pp. 570–580, 2007.
[49] G. E. Suh, C. W. O’Donnell, I. Sachdev, and S. Devadas, “Design and
implementation of the aegis single-chip secure processor using physical
random functions,” in 32nd International Symposium on Computer
Architecture (ISCA’05).
IEEE, 2005, pp. 25–36.
[50] N. R. Tallent, J. M. Mellor-Crummey, and M. W. Fagan, “Binary analysis
for measurement and attribution of program performance,” ACM Sigplan
Notices, vol. 44, no. 6, pp. 441–452, 2009.
[51] V. Van Der Veen, E. G¨oktas, M. Contag, A. Pawoloski, X. Chen,
S. Rawat, H. Bos, T. Holz, E. Athanasopoulos, and C. Giuffrida, “A
tough call: Mitigating advanced code-reuse attacks at the binary level,”
in 2016 IEEE Symposium on Security and Privacy (SP).
IEEE, 2016,
pp. 934–953.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:47 UTC from IEEE Xplore.  Restrictions apply. 
473
[52] Xilinx,
“Xilinx ZedBoard Zynq-7000,”
https://www.xilinx.com/
products/boards-and-kits/1-8dyf-11.html.
[53] Y. Yan, Y. Qian, and H. Sharif, “A secure and reliable in-network col-
laborative communication scheme for advanced metering infrastructure
in smart grid,” in 2011 IEEE wireless communications and networking
conference.
IEEE, 2011, pp. 909–914.
[54] P. Zhang, C. Song, H. Yin, D. Zou, E. Shi, and H. Jin, “Klotski: Efﬁcient
obfuscated execution against controlled-channel attacks,” in Proceedings
of the Twenty-Fifth International Conference on Architectural Support
for Programming Languages and Operating Systems, 2020, pp. 1263–
1276.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:47 UTC from IEEE Xplore.  Restrictions apply. 
474