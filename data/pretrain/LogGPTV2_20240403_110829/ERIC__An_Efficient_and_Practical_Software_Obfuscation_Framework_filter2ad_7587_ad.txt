We have developed a fully end-to-end and comprehensive framework for software obfuscation and trusted execution. Compared to existing architectures, our solution significantly enhances comprehensiveness and generalizability. In the prototype, both hardware overhead and compiler costs are notably reduced compared to current solutions.

Our architecture integrates two technology-agnostic concepts:
1. During compilation, the program is encrypted using a PUF (Physically Unclonable Function)-based key specific to the target hardware, and a signature is generated.
2. Prior to execution on the target hardware, the ERIC hardware architecture decrypts the program with its PUF-based key. After verifying the program's integrity with the signature, it proceeds to execute the original version.

ERIC not only improves the security and authentication of program executions but is also highly configurable and straightforward to implement.

### Future Work
Future efforts will focus on enhancing the parallelism, performance, and scalability of the architecture, enabling its deployment in distributed systems and server environments. Additionally, we aim to incorporate RSA-based key generation and usage into ERIC.

### References
[1] S. Al-Sarawi, M. Anbar, K. Alieyan, and M. Alzubaidi, "Internet of Things (IoT) communication protocols," in 2017 8th International Conference on Information Technology (ICIT). IEEE, 2017, pp. 685–690.
[2] A. Awad, Y. Wang, D. Shands, and Y. Solihin, "Obfusmem: A low-overhead access obfuscation for trusted memories," in Proceedings of the 44th Annual International Symposium on Computer Architecture, 2017, pp. 107–119.
[3] K. P. Birman, "Building secure and reliable network applications," in International Conference on Worldwide Computing and Its Applications. Springer, 1997, pp. 15–28.
[4] A. Bolat, L. Cassano, P. Reviriego, O. Ergin, and M. Ottavi, "A microprocessor protection architecture against hardware trojans in memories," in 2020 15th Design & Technology of Integrated Systems in Nanoscale Era (DTIS). IEEE, 2020, pp. 1–6.

### Figure 7
**Execution Time Comparison of Each Benchmark Application based on its Unencrypted Program’s Execution with ERIC.**
Note: There is a direct proportionality between the dynamic size of the program and the performance.

### Related Work
To the best of our knowledge, ERIC is the first fully end-to-end framework that addresses both software obfuscation and trusted execution, from encrypted compilation on software to trusted execution on hardware. It ensures that programs are securely packaged and executed only on the intended hardware without any modifications to the original program. The architecture and implementation details of ERIC are provided in Sections III and IV.

In this section, we briefly review other related works on software obfuscation and trusted execution. In [30] and [29], memory security and program authentication are achieved by encrypting the entire memory with a message authentication code. Each line in the memory is protected using AES encryption, which, while effective, results in high memory latency and poor cache performance, leading to additional delays when accessing the main memory.

In [47], [49], and [48], an encryption-based mechanism is proposed to prevent hardware and software attacks. This approach uses PUF-based encryption and a multi-level security tree in memory. They provide a toolchain for developing secure software, including a secure operating system for managing different levels of memory protection. However, the architecture is specific to a particular SoC and may not be compatible with all processors or ISAs. Additionally, there is an average 30% slowdown in instruction-per-cycle performance.

Another study introduces a security layer with an isolated instruction set extension in hardware. In [39], PUF keys are used for encryption, providing memory and program security. This system supports protocols between hardware and software manufacturers but requires changes in the instruction architecture, making general compilation tools unavailable. Unlike our approach, this study does not encrypt the program; instead, it focuses on improving TLB performance.

In contrast, ERIC offers a more flexible and efficient solution, combining strong security with practical implementation and broad compatibility.