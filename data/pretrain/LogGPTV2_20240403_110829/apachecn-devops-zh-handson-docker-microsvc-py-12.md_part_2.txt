虽然本书的主要目的是讨论微服务中软件的划分，但这并不是唯一可能的划分。其他部分可以包括微服务或共享包中的模块。
The main characteristic of a microservice is that it is independent in terms of development and deployment, so full parallelization can be achieved. Other divisions may reduce this and introduce dependencies. 
Ensure that you justify these changes.
在我们在本书中介绍的示例系统中，我们引入了一个验证请求是否由用户签名的模块。用户后端生成一个签名的头部，思想后端和前端通过`token_validation.py`模块独立验证。
这个模块应该由拥有用户后端的同一个团队拥有，因为它是它的自然扩展。我们需要验证它生成的令牌是否与用户后端生成的令牌相同。
避免重复并保持同步的最好方法是生成一个 Python 包，该包可以安装在相关的微服务上。然后，这些包可以像`requirements.txt`文件中的任何其他外部依赖项一样进行处理。
要用 Python 打包一个库，我们可以使用几个工具，包括官方 *Python 打包用户指南*([https://packaging.python.org/](https://packaging.python.org/))中的工具到更新的工具，如诗歌([https://poems . Eustace . io](https://poetry.eustace.io)，这些工具更容易用于新项目。
如果我们想公开，这个包可以上传到 PyPI。或者，如果需要，我们可以使用工具(如 Gemfury)或托管我们自己的存储库，将其上传到私有存储库中。这使得包和它的维护者，以及使用它作为依赖的团队之间有了明确的划分。
划分软件单元对团队划分有影响。现在，让我们来看看如何构建团队。
# 设计工作结构
考虑到康威定律，划分软件应该反映组织的结构。当我们从整体架构迁移到微服务架构时，这一点非常重要。
请记住，从整体服务转变为微服务是我们运营方式的一个巨大变化。这既是一种技术变革，也是一种组织变革。主要的风险在于人的因素，包括培训人们使用新技术和让开发人员对他们将要工作的新领域感到满意等挑战。
对组织结构进行彻底的改变可能非常困难，但是需要一些小的调整。当从一个整体迁移到一个微服务时，团队需要进行重组。
请记住，一次大的重组有可能引起人们的愤怒并引发政治问题。人类不喜欢改变，任何决定都需要有意义。预计不得不解释和澄清这一举动。对于新结构要实现什么有明确的目标将有助于赋予它目的。
让我们看一些团队划分的例子，以及它们的优缺点。
# 围绕技术构建团队
在某些情况下，与技术相关的不同技能可能是相关的。系统的某些部分可能会处理一种与其他技术完全不同的技术。
一个非常好的例子是移动应用，因为它们在使用的语言方面受到限制(安卓是 Java，iOS 是 Objective-C 或 Swift)。带有网站和移动应用的应用可能需要特定的团队来处理移动应用的代码。
一个更传统的例子是数据库团队，它是围绕**数据库管理员** ( **数据库管理员**)建立的。他们将控制对数据库的访问，并对它们进行操作以保持良好的状态。然而，这种结构正在消失，因为数据库操作现在更容易了，并且通常由大多数开发人员来处理，并且数据库的基础结构管理近年来已经大大简化。
这可以让我们证明围绕某些领域创建特定团队的合理性。该技术的障碍确保了系统之间的通信是结构化的。
下图是我们将遇到的团队类型的示例。他们按照技术和交流方式分组。数据库团队将与创建 web 服务后端的团队进行沟通，他们将与 web 和移动团队进行沟通:
![](img/f2a3000e-94ae-4c8a-8744-f1ba624daa79.png)
这种模式的主要缺点是新特性可能需要多个团队来开发。对面向客户的代码所做的任何更改，以便我们可以在数据库中存储新的值，都需要每个团队的工作输入。这些特性需要额外的协调，这会限制开发速度。
# 围绕领域构建团队
另一种结构是围绕不同知识领域的结构，通常与公司的业务领域相关。每个知识领域都有自己独立的系统，但它们相互交流。某些部分可能有外部可访问的接口，而其他部分可能没有。
这种结构通常出现在已经建立的组织中，这些组织有不同的领域，并且已经成功地工作了多年。
例如，在线零售商可以分为三个领域:
*   **销售**:处理外部网站和营销。
*   **库存**:购买商品以便销售，同时也处理库存。
*   **发货**:将产品交付给客户。跟踪信息显示在网站上。
在这种情况下，每个区域都有自己的数据库，以便存储相关数据及其服务。它们通过已定义的 API 相互通信，最频繁的变化发生在一个域内。这允许域内的快速发布和开发。
跨域拥有新功能也是可能的。例如，运输跟踪信息的变化可能需要我们匹配销售产生的变化。然而，这些变化发生的频率应该更低。
在本例中，每个团队将相互通信，如下图所示:
![](img/fb8f03de-ec6a-4a07-a0d0-d80b85237018.png)
这种结构的主要不便是可能会产生孤立的团队和筒仓心态。每个系统都有自己的做事方式，所以它们可能会分歧到不共享相同的基本语言的地步。当需要跨域功能时，可能会导致讨论和摩擦。
# 围绕客户构建团队
在一些组织中，主要目标是为客户创建定制工作。也许客户需要以定制的 B2B 方式与产品集成。在这种情况下，能够开发和运行自定义代码至关重要。
该结构以客户为中心。三个团队(称为红色、金色和蓝色)被分配给客户，并为他们每个人维护一项特殊服务，包括他们的定制代码。每个客户团队处理几个客户。另一个团队处理产品的后端，它包含系统的公共代码和基础设施。该团队与客户分开工作，但在客户团队共享时添加他们的功能，以便将他们包括在产品中。还分享了总体改进。
这在组织中创造了两种速度。客户团队关注客户的短期需求，而产品团队关注客户的长期需求。
在这里，产品团队将与客户团队交谈，但客户团队不会相互交谈那么多。如下图所示:
![](img/b45dc095-4b93-4176-8c33-1f04b767ad87.png)
这种结构适用于高度定制的服务，因此它们可以包含为单个客户生成的代码，这些代码可能会使他们失去对一般产品的关注。这里的主要问题是，当客户团队接触到要求苛刻的客户时，他们可能会面临很大的压力，这对开发人员来说可能会很吃力。产品团队需要确保他们正在对产品进行有用的添加，并尽可能减少他们的长期问题。
# 围绕组合构建团队
前面三个例子是合成用例。现实生活更加复杂，可能需要所有这些的混合，或者一个全新的结构。
如果组织足够大，可能会有几十个不同的团队和软件单元。请记住，如果一个团队足够大，它可以处理多个软件单元。然而，两个团队不应该拥有相同的软件单元，以避免所有权和缺乏焦点。
分析组织中的沟通流程，以便了解当您转向微服务时需要解决的痛点，并确保人员结构将微服务和软件单元的设计考虑在内。
对于团队来说，另一个重要的因素是在添加新特性的时间和维护现有代码的时间之间找到适当的平衡。
# 平衡新功能和维护
每一项软件服务都需要维护，这样才能保持良好的状态，但不要增加明显的外部价值。不过，维护任务对于良好的运营至关重要，可以分为两类:定期维护和管理技术债务。
技术债是一个会占用大部分时间，需要进一步讨论的问题，但在此之前，我们先来看看定期维护。