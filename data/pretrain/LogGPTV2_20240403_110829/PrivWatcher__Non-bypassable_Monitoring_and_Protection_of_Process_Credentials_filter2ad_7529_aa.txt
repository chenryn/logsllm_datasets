title:PrivWatcher: Non-bypassable Monitoring and Protection of Process Credentials
from Memory Corruption Attacks
author:Quan Chen and
Ahmed M. Azab and
Guruprasad Ganesh and
Peng Ning
PrivWatcher: Non-bypassable Monitoring and Protection
of Process Credentials from Memory Corruption Attacks
Quan Chen∗
North Carolina State
University
PI:EMAIL
Ahmed M. Azab
Samsung Research America
PI:EMAIL
Guruprasad Ganesh
Samsung Research America
PI:EMAIL
Peng Ning
Samsung Research America
PI:EMAIL
Abstract
Commodity operating systems kernels are typically imple-
mented using low-level unsafe languages, which leads to the
inevitability of memory corruption vulnerabilities. Multiple
defense techniques are widely adopted to mitigate the im-
pact of memory corruption on executable code and control
data. Nevertheless, there has not been much attention to
defend against corruption of non-control data despite the
fact that previous incidents of kernel exploitation showed
that corrupting non-control data is a real threat.
We present PrivWatcher, a framework for monitoring and
protecting the integrity of process credentials and their us-
age contexts from memory corruption attacks. PrivWatcher
solves multiple challenges to achieve this objective. It intro-
duces techniques to isolate and protect the data that deﬁne
process credentials and guarantee the locality of this data
within the protected memory. Then, by adopting a dual
reference monitor model, it guarantees the Time of Check
To Time of Use (TOCTTOU) consistency between veriﬁca-
tion and usage contexts for process credentials. Moreover,
it provides a secure mechanism that allows the presumably
protected kernel code to verify the protected data without
relying on unprotected data ﬁelds.
PrivWatcher provides non-bypassable integrity assurances
for process credentials and can be adapted to enforce a va-
riety of integrity policies. In this paper, we demonstrate an
application of PrivWatcher that enforces the original seman-
tics of the OS kernel’s access control policy: a change in pro-
cess privileges is legitimate only if an uncompromised kernel
would have allowed it. We implemented a PrivWatcher pro-
totype to protect Ubuntu Linux running on x86-64. Evalu-
ation of our prototype showed that PrivWatcher is eﬀective
and eﬃcient.
∗The author developed some of the subject matter of this
paper while employed at Samsung Research America.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02 - 06, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3053029
1.
INTRODUCTION
Memory corruption vulnerabilities are a common and in-
evitable security weakness of modern operating system (OS)
kernels, due to the fact that they are routinely written in
low-level memory-unsafe languages such as C and assembly.
These vulnerabilities pose a great risk to the security of the
entire system. For instance, in recent years the Linux kernel
has seen several such vulnerabilities [2, 3, 4, 5, 6] that led
to privilege escalation exploits.
Exploits based on memory corruption vulnerabilities can
be categorized according to the type of memory content they
target: 1) executable code, 2) control-ﬂow data, and/or 3)
non-control-ﬂow data.
Multiple defense techniques are widely adopted to miti-
gate the impact of the ﬁrst two types of attacks. Commodity
OS kernels implement data execution prevention and read-
only mapping of executable code to mitigate the threat of
code injection attacks. They also implement stack canaries
and address space randomization to mitigate the threat of
control ﬂow hijacking through corrupting control data. In
addition, there has been a plethora of existing research to
enforce and enhance these protection techniques. Multi-
ple proposed systems (e.g., [18, 19, 20, 42, 50, 48, 28, 54])
monitor the kernel from an isolated domain to guarantee
that its code base cannot be modiﬁed, relocated or illegally
amended. Previous defense eﬀorts also aim to make the
protection of kernel control data more robust. There are
existing proposals (e.g., [26, 45, 40]) to prevent or otherwise
mitigate the threat of control ﬂow hijacking attacks against
the kernel. Researchers have also recently demonstrated the
feasibility of enforcing control-ﬂow integrity (CFI) [15] pro-
tection on commodity OS kernels [27, 32].
This paper focuses on the third type of attacks, which
is memory corruption of kernel non-control data. Speciﬁ-
cally, PrivWatcher is designed to monitor and protect pro-
cess credentials data in Linux. Process credentials are data
ﬁelds that determine the subject identity (i.e., privilege) of
a process. Hence, it is a crucial part of the kernel’s ac-
cess control subsystem. Previous research indicated that
memory corruption of non-control data is an equally signif-
icant security threat as corruption of control data [25, 35].
This observation also applies to the kernel. Linux kernel’s
monolithic design allows process credentials to be subverted
by single memory error anywhere in the kernel’s code base
(e.g., third-party drivers). By simply overwriting process
167credentials, attackers can successfully escalate privileges for
arbitrary processes without injecting code into the kernel
or violating kernel control ﬂow. In fact, virtually all of the
existing memory corruption exploits (e.g., [56]) against the
Linux kernel achieved privilege escalation by manipulating
the credentials of attacker-controlled processes.
Requirements: Memory corruption vulnerabilities in the
kernel are frequently exploited to overwrite non-control data
ﬁelds in order to give elevated privileges to attacker pro-
cesses. Protecting against such exploits requires a defense
technique to prevent exploitable kernel-level code from di-
rectly modifying process credentials.
In addition, the in-
tended usage contexts of process credentials (i.e., the pro-
cess they are supposed to describe) must also be secure from
arbitrary modiﬁcations. There are multiple challenges that
need to be addressed to achieve this objective.
The ﬁrst challenge is isolating process credentials. Since
non-control kernel data ﬁelds, including process credentials,
are usually allocated from the kernel heap, they can be scat-
tered throughout the kernel address space. More impor-
tantly, focusing integrity protection only on data ﬁelds that
are relevant to describing process privileges minimizes the
protection overhead.
The second challenge is validating runtime updates to pro-
cess credentials. This is not straightforward because deter-
mining the legitimacy of an update is dependent on both
the semantics of the new values and the context in which
they will be used. Thus, the validation routine must be able
to both verify the new values and ensure the authenticity of
the veriﬁcation context.
The third challenge is enforcing the time of check to time
of use (TOCTTOU) consistency. Enforcing TOCTTOU
consistency requires: 1) protecting credentials so they are
not modiﬁed after veriﬁcation, and 2) ensuring that creden-
tials are veriﬁed and used in the same context. An example
of the later requirement is ensuring that veriﬁed process cre-
dentials for a privileged process cannot be reused to describe
the privileges of an attacker-controlled process.
Introducing PrivWatcher: We propose PrivWatcher, a
framework that allows both integrity veriﬁcation and pro-
tection of process credentials against memory corruption at-
tacks. PrivWatcher introduces a set of novel techniques that
together enable it to solve the above challenges and prevent
memory corruption vulnerabilities from being exploited to
give unauthorized privileges to processes. In the following,
we provide a summary of these techniques:
1) Separate Allocation of Process Credentials: PrivWatcher
proposes a set of kernel modiﬁcations that prevents the cre-
dentials data to be mixed with other data ﬁelds. This tech-
nique guarantees that PrivWatcher runs with minimum pos-
sible performance overhead by avoiding to mediate access to
unrelated data ﬁelds.
2) Dual Reference Monitor: PrivWatcher has two com-
ponents. The ﬁrst resides in an execution domain that is
isolated from the kernel. PrivWatcher assumes that this do-
main possesses control over the Memory Management Unit
(MMU). It leverages this control to relocate process creden-
tials into a safe region that is non-writable to the kernel.
PrivWatcher prevents the kernel from arbitrarily changing
process privileges. As a result, memory corruption exploits
will lose their ability to corrupt these non-control data ﬁelds,
which are crucial to secure kernel operations.
The second component is a set of kernel extensions that
guarantees the TOCTTOU consistency of process creden-
tials. In particular, this ensures that ﬁrstly, runtime mem-
ory for process credentials can only be allocated from the
safe region (therefore vetted by PrivWatcher); and secondly,
the context of use is the same as the context of veriﬁcation.
If either of these checks fail, the oﬀending process will be
permanently denied access to any sensitive resources.
3) Data Integrity Veriﬁcation: PrivWatcher introduces
multiple heuristics to identify potentially malicious updates
to process credentials, e.g., updates that violate the kernel’s
Discretionary Access Control (DAC) policy.
We implemented a PrivWatcher prototype for Ubuntu
Linux and conducted performance evaluation based on it.
The performance evaluation results show that PrivWatcher
is eﬀective and incurs minimal performance overhead.
Besides the prototype, some of the techniques presented
in this paper are adopted by Samsung Knox Real-time Ker-
nel Protection [49], which is deployed on recent models of
Samsung Galaxy smartphones.
Contribution: The major contributions of this paper are:
• A complete and practical solution to prevent memory
corruption vulnerabilities in the kernel from being ex-
ploited to elevate the privilege of arbitrary processes.
• A novel technique to ensure TOCTTOU consistency
of protected data ﬁelds, which allows the kernel to be
extended to verify data integrity without relying on
unprotected data.
• Introducing techniques to verifying that changes of
process credentials do not violate the kernel’s original
access control policies.
• Full prototype implementation and evaluation of the
presented techniques.
In the remainder of the paper: We describe assumptions
and threat model in Section 2. We present the design and
implementation in Section 3 and Section 4 respectively. Sec-
tion 5 evaluates PrivWatcher performance. Section 6 sum-
marizes related work. Finally, we conclude in Section 7.
2. THREAT MODEL AND ASSUMPTIONS
Assumptions: PrivWatcher assumes that it can run within
an execution domain that is isolated from the kernel.
It
also assumes that it can control the kernel’s MMU opera-
tions and that the kernel’s page tables are protected from
malicious modiﬁcations. PrivWatcher further assumes that
kernel is protected against code modiﬁcation, code injection
and return-to-user attacks.
It is worth noting that many
previous proposals achieved all these properties, for instance
by using virtualization (e.g., [50, 46, 18]), or hardware iso-
lated execution domains (e.g., [19, 33]). PrivWatcher also
assumes the kernel adopts a protection technique to miti-
gate the impact of code-reuse attacks (e.g., [27, 26, 45, 40,
15, 44, 31]).
Threat Model: PrivWatcher aims at protecting process
credentials and their usage contexts from attackers seek-
ing to corrupt them using memory exploits in order to gain
unauthorized privileges for their processes. Given this threat
model, attackers can corrupt process credentials through
four possible attack vectors. For convenience, we refer to
168Figure 1: Attack vectors.
(1) Overwrite attack:
process credentials data are directly corrupted;
(2) Forging attack: data pointers are corrupted to
refer to forged credentials outside of protected mem-
ory; (3) Reuse attack: data pointers are corrupted
to refer to existing, validated privileged credentials;
(4) and (4’) Address space injection attack: mali-
cious binaries are injected into the address space of
a privileged process.
them as: 1) overwrite attack, 2) forging attack, 3) reuse at-
tack, and 4) address space injection attack. Figure 1 illus-
trates how each of these attacks can take place. The safe re-
gion here represents memory areas protected by PrivWatcher.
Figure 1 illustrates how task_struct (i.e., Process Con-
trol Block) is organized in Linux. It also shows how process
credentials are grouped in a separate structure and referred
to by a pointer ﬁeld in task_struct. In an overwrite attack,
process credentials are directly corrupted to give elevated
privileges to attacker processes. For example, the uid/gid
identiﬁers of an attacker process can be overwritten with
zero values so they are granted root privileges.
The pointer ﬁeld in task_struct can also be corrupted
so that it refers to either a credentials structure forged by
the attackers outside of the protected memory areas (and
therefore not veriﬁed by PrivWatcher), or to an existing,
privileged credentials structure that has been validated by
PrivWatcher in the context of another process. We refer to
the former as forging attack, and the latter as reuse attack.
In an address space injection attack, attackers aim to in-
ject malicious binaries in the context of a privileged process.
This can be done by corrupting the Page Global Directory
(pgd) data ﬁeld to point to a completely forged set of page
tables. As shown in Figure 1, the pgd ﬁeld is linked to the
task_struct through a separate structure (mm_struct) that
deﬁnes the memory map of the process. Either one of the
two pointers that link the task_struct to the pgd can be
corrupted to achieve that objective. Note that attackers can
also corrupt the page table contents directly, however such
attacks are out of scope of this paper since PrivWatcher
assumes orthogonal techniques to protect the page tables.
PrivWatcher defends against all of the above attack vec-
tors, sealing oﬀ any potential avenues of bypassing the pro-
tection. It should be noted that forging attack, reuse attack,
Figure 2: Overview of system architecture. Pro-
cess credentials are stored in the safe region (non-
writable to kernel). (a) Kernel requests to create or
update process credentials; (b) PrivWatcher medi-
ates changes to process credentials, allocating a new
copy from the safe region if required; (c) Updated
process credentials returned to the kernel for use.
and address space injection attack violate TOCTTOU con-
sistency, since the context in which privileged credentials are
used (i.e., the attacker process) is diﬀerent from the context
where veriﬁcation (or the lack thereof, in the case of forging
attack) previously took place (i.e., the privileged process).
PrivWatcher can prevent attacks that use memory cor-
ruption to directly manipulate process credentials as well
as those that do so through simple code reuse techniques,
for example by invoking existing kernel functions to allo-
cate privileged credential and assign it to attacker processes.
Nevertheless, as mentioned PrivWatcher assumes that the
kernel would adopt orthogonal mechanisms to prevent com-
plex (e.g., Turing complete) code reuse attacks. This threat
model is realistic because the majority of existing code reuse
mitigation techniques focus on coarse grained control ﬂow
integrity, which can be eﬀective in preventing sophisticated