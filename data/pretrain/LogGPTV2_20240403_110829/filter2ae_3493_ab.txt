    00000195`cc9c012c 498bc5          mov     rax,r13
    00000195`cc9c012f 48c1e806        shr     rax,6
    00000195`cc9c0133 4883e007        and     rax,7
    00000195`cc9c0137 48b9b866ebc995010000 mov rcx,195C9EB66B8h
    00000195`cc9c0141 33d2            xor     edx,edx
    00000195`cc9c0143 4c3b2cc1        cmp     r13,qword ptr [rcx+rax*8]
    00000195`cc9c0147 0f85e2000000    jne     00000195`cc9c022f
    00000195`cc9c014d 480f45da        cmovne  rbx,rdx
    00000195`cc9c0151 488b4310        mov     rax,qword ptr [rbx+10h]
    00000195`cc9c0155 4d896610        mov     qword ptr [r14+10h],r12 // trigger of CVE-2019-0539. Overridden slot array pointer
下面是JIT代码中`OP_InitClass`调用之前的对象的内存复制。需要注意的是这两个对象slot是如何内联在对象的内存中的。
    Time Travel Position: 8FE48:C95
    chakracore!Js::JavascriptOperators::OP_InitClass:
    00007ffe`9c674180 4c89442418      mov     qword ptr [rsp+18h],r8 ss:00000086`971fd710=00000195ca395030
    0:004> dps 00000195`cd274440
    00000195`cd274440  00007ffe`9d6e1790 chakracore!Js::DynamicObject::`vftable'
    00000195`cd274448  00000195`ca3c1d40
    00000195`cd274450  00010000`00000001 // inline slot 1
    00000195`cd274458  00010000`00000001 // inline slot 2
    00000195`cd274460  00000195`cd274440
    00000195`cd274468  00010000`00000000
    00000195`cd274470  00000195`ca3b4030
    00000195`cd274478  00000000`00000000
    00000195`cd274480  00000195`cd073ed0
    00000195`cd274488  00000000`00000000
    00000195`cd274490  00000000`00000000
    00000195`cd274498  00000000`00000000
    00000195`cd2744a0  00000195`cd275c00
    00000195`cd2744a8  00010000`00000000
    00000195`cd2744b0  00000195`ca3dc100
    00000195`cd2744b8  00000000`00000000
下面的调用栈表明OP_InitClass最后调用的是SetIsPrototype，然后变化对象的类型。变化的结果是两个slot不再是内联的，而是保存在slot数组中。这种变化最终会被JIT代码的其余部分忽略。
    0:004> kb
     # RetAddr           : Args to Child                                                           : Call Site
    00 00007ffe`9cd0dace : 00000195`cd274440 00000195`ca3a0000 00000195`00000004 00007ffe`9bf6548b : chakracore!Js::DynamicTypeHandler::AdjustSlots+0x79f [c:\pp\chakracore\lib\runtime\types\typehandler.cpp @ 755] 
    01 00007ffe`9cd24181 : 00000195`cd274440 00000195`cd264f60 00000195`000000fb 00007ffe`9c200002 : chakracore!Js::DynamicObject::DeoptimizeObjectHeaderInlining+0xae [c:\pp\chakracore\lib\runtime\types\dynamicobject.cpp @ 591] 
    02 00007ffe`9cd2e393 : 00000195`ca3da0f0 00000195`cd274440 00000195`00000002 00007ffe`9cd35f00 : chakracore!Js::PathTypeHandlerBase::ConvertToSimpleDictionaryType+0x1b1 [c:\pp\chakracore\lib\runtime\types\pathtypehandler.cpp @ 1622] 
    03 00007ffe`9cd40ac2 : 00000195`ca3da0f0 00000195`cd274440 00000000`00000002 00007ffe`9bf9fe00 : chakracore!Js::PathTypeHandlerBase::TryConvertToSimpleDictionaryType+0x43 [c:\pp\chakracore\lib\runtime\types\pathtypehandler.cpp @ 1598] 
    04 00007ffe`9cd3cf81 : 00000195`ca3da0f0 00000195`cd274440 00000195`00000002 00007ffe`9cd0c700 : chakracore!Js::PathTypeHandlerBase::TryConvertToSimpleDictionaryType+0x32 [c:\pp\chakracore\lib\runtime\types\pathtypehandler.h @ 297] 
    05 00007ffe`9cd10a9f : 00000195`ca3da0f0 00000195`cd274440 00000001`0000001c 00007ffe`9c20c563 : chakracore!Js::PathTypeHandlerBase::SetIsPrototype+0xe1 [c:\pp\chakracore\lib\runtime\types\pathtypehandler.cpp @ 2892] 
    06 00007ffe`9cd0b7a3 : 00000195`cd274440 00007ffe`9bfa722e 00000195`cd274440 00007ffe`9bfa70a3 : chakracore!Js::DynamicObject::SetIsPrototype+0x23f [c:\pp\chakracore\lib\runtime\types\dynamicobject.cpp @ 680] 
    07 00007ffe`9cd14b08 : 00000195`cd274440 00007ffe`9c20d013 00000195`cd274440 00000195`00000119 : chakracore!Js::RecyclableObject::SetIsPrototype+0x43 [c:\pp\chakracore\lib\runtime\types\recyclableobject.cpp @ 190] 
    08 00007ffe`9c6743ea : 00000195`cd275c00 00000195`cd274440 0000018d`00000119 00000195`c9e85830 : chakracore!Js::DynamicObject::SetPrototype+0x18 [c:\pp\chakracore\lib\runtime\types\dynamictype.cpp @ 632] 
    09 00000195`cc9c0112 : 00000195`cd264f60 00000195`cd273eb0 00000195`c9e85830 00007ffe`9c20c9b3 : chakracore!Js::JavascriptOperators::OP_InitClass+0x26a [c:\pp\chakracore\lib\runtime\language\javascriptoperators.cpp @ 7532] 
    0a 00007ffe`9cbea0d2 : 00000195`ca3966e0 00000000`10000004 00000195`ca395030 00000195`cd274440 : 0x00000195`cc9c0112
下面是OP_InitClass调用后的对象。需要注意的是该对象是转化的，2个slot不再是内联的。但是JIT代码会认为这2个slot是内联的。
    Time Travel Position: 9001D:14FA
    00000195`cc9c0112 803e01          cmp     byte ptr [rsi],1 ds:0000018d`c8e72018=01
    0:004> dps 00000195`cd274440
    00000195`cd274440  00007ffe`9d6e1790 chakracore!Js::DynamicObject::`vftable'
    00000195`cd274448  00000195`cd275d40
    00000195`cd274450  00000195`cd2744c0 // slot array pointer (previously inline slot 1)
    00000195`cd274458  00000000`00000000
    00000195`cd274460  00000195`cd274440
    00000195`cd274468  00010000`00000000
    00000195`cd274470  00000195`ca3b4030
    00000195`cd274478  00000195`cd277000
    00000195`cd274480  00000195`cd073ed0
    00000195`cd274488  00000195`cd073f60
    00000195`cd274490  00000195`cd073f90
    00000195`cd274498  00000000`00000000
    00000195`cd2744a0  00000195`cd275c00
    00000195`cd2744a8  00010000`00000000
    00000195`cd2744b0  00000195`ca3dc100
    00000195`cd2744b8  00000000`00000000
    0:004> dps 00000195`cd2744c0 // slot array
    00000195`cd2744c0  00010000`00000001
    00000195`cd2744c8  00010000`00000001
    00000195`cd2744d0  00000000`00000000
    00000195`cd2744d8  00000000`00000000
    00000195`cd2744e0  00000119`00000000
    00000195`cd2744e8  00000000`00000100
    00000195`cd2744f0  00000195`cd074000
    00000195`cd2744f8  00000000`00000000
    00000195`cd274500  000000c4`00000000
    00000195`cd274508  00000000`00000102
    00000195`cd274510  00000195`cd074030
    00000195`cd274518  00000000`00000000
    00000195`cd274520  000000fb`00000000
    00000195`cd274528  00000000`00000102
    00000195`cd274530  00000195`cd074060
    00000195`cd274538  00000000`00000000
下面是JIT代码错误分配特征值，覆盖slot array指针的对象：
    0:004> dqs 00000195cd274440
    00000195`cd274440  00007ffe`9d6e1790 chakracore!Js::DynamicObject::`vftable'
    00000195`cd274448  00000195`cd275d40
    00000195`cd274450  00010000`00001234 // overridden slot array pointer (CVE-2019-0539)
    00000195`cd274458  00000000`00000000
    00000195`cd274460  00000195`cd274440
    00000195`cd274468  00010000`00000000
    00000195`cd274470  00000195`ca3b4030
    00000195`cd274478  00000195`cd277000
    00000195`cd274480  00000195`cd073ed0
    00000195`cd274488  00000195`cd073f60
    00000195`cd274490  00000195`cd073f90
    00000195`cd274498  00000000`00000000
    00000195`cd2744a0  00000195`cd275c00
    00000195`cd2744a8  00010000`00000000
    00000195`cd2744b0  00000195`ca3dc100
    00000195`cd2744b8  00000000`00000000
最后，当访问其中的一个对象特征时，覆盖的slot数组指针是间接引用的，会导致奔溃。
    0:004> g
    (1e8c.20b8): Access violation - code c0000005 (first/second chance not available)
    First chance exceptions are reported before any exception handling.
    chakracore!Js::DynamicTypeHandler::GetSlot+0x149:
    00007ffe`9cd1ec79 488b04c1        mov     rax,qword ptr [rcx+rax*8] ds:00010000`00001234=????????????????
# 总结
Windbg加入了TTD后，调试进程的过程就变得简单了。尤其是设置断点，还可以逆向运行程序，直接导致真实的slot数组指针覆盖。该特征表明了CPU追踪的能力和软件调试和逆向工程的执行重构。