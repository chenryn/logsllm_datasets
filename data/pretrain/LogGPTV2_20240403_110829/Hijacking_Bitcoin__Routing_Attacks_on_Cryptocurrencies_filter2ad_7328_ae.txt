preﬁxes is enough to isolate up to 47% of the mining power. As
we will describe next, hijack events involving similar numbers
of preﬁxes happen regularly in the Internet. Notice that the
number of preﬁxes is not proportional to the isolated mining
power. For example, there is a set of nodes representing 47%
of mining power that can be isolated by hijacking 39 preﬁxes,
while isolating 30% of the mining power belonging to different
pools would require 83 preﬁxes. Indeed, an attacker can isolate
additional mining power with the same number of hijacked
preﬁxes when several pools in the isolated set are hosted in
the same ASes.
C. How many hijacks happen today? Do they impact Bitcoin?
Having an estimate of the number of preﬁxes that need to
be hijacked to partition the entire network, we now look at
how common such hijacks are over a 6-months window, from
October 2015 to March 2016. We show that BGP hijacks are
not only prevalent, but also end up diverting Bitcoin trafﬁc.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:24 UTC from IEEE Xplore.  Restrictions apply. 
s
t
n
e
v
e
k
c
a
j
i
h
f
o
#
200k
150k
100k
50k
0
5
1
/
0
1
5
1
/
1
1
5
1
/
2
1
6
1
/
1
0
month
6
1
/
2
0
6
1
/
3
0
30k
10k
1k
100
)
g
o
l
(
e
c
n
o
t
a
d
e
k
c
a
j
i
h
s
e
x
f
p
#
x
a
m
d
e
k
c
a
j
i
h
s
e
d
o
n
n
o
c
t
i
i
B
t
c
n
i
t
s
d
#
i
447
300
200
100
0
5
1
/
0
1
5
1
/
1
1
5
1
/
2
1
6
1
/
1
0
6
1
/
2
0
6
1
/
3
0
(a) Each month sees at
least
100,000 hijacks, some of which
involve thousands of preﬁxes.
Fig. 7: Routing manipulation (BGP hijacks) are prevalent
today and do impact Bitcoin trafﬁc.
month
(b) Each month,
trafﬁc for at
least 100 distinct Bitcoin nodes
end up diverted by hijacks.
Methodology We detected BGP hijacks by processing 4
billion BGP updates advertised during this period on 182 BGP
sessions maintained by 3 RIPE BGP collectors [10] (rrc00,
rrc01 and rrc03). We consider an update for a preﬁx p as
a hijack if the origin AS differs from the origin AS seen
during the previous month. To avoid false positives, we do
not consider preﬁxes which have seen multiple origin ASes
during the previous month. We count only a single hijack per
preﬁx and origin pair each day: if AS X hijacks the preﬁx p
twice in one day, we consider both as part of a single hijack.
Large BGP hijacks are frequent in today’s Internet, and
already end up diverting Bitcoin trafﬁc Fig. 7 summarizes
our results. We see that there are hundreds of thousands of
hijack events each month (Fig. 7a). While most of these hijacks
involve a single IP preﬁx, large hijacks involving between 300
and 30,000 preﬁxes are also seen every month (right axis).
Fig 7b depicts the number of Bitcoin nodes for which trafﬁc
was diverted in these hijacks. Each month, at least 100 Bitcoin
nodes are victim of hijacks2. As an illustration, 447 distinct
nodes (∼7.8% of the Bitcoin network) ended up hijacked at
least once in November 2015.
D. How long do the effects of a partition attack last?
Having investigated the methodology and the relative cost
of creating a partition, we now explore how quickly the
Bitcoin network recovers from a partition attack. We found
out that while the two components quickly reconnect, they
stay sparsely connected for a very long time. We ﬁrst describe
the experimental set-up. Next, we explain why partitions are
not persistent in practice and brieﬂy hint on how an attacker
could prolong their lifetime.
Methodology We build a testbed composed of 1050 Bitcoin
clients running the default bitcoind core (v0.12.1) in testnet
mode. Each node runs in a virtual machine connected to
a virtual switch and is conﬁgured with a different random
IP address. Nodes automatically connect to other nodes in
the testbed. We enforced a 50%–50% partition, by installing
drop rules on the switch which discard any packet belonging
2The actual hijack attempt may have been aimed at other services in the same
IP range, still, these nodes were affected and their trafﬁc was re-routed.
s
n
o
i
t
c
e
n
n
o
c
f
o
%
n
o
i
t
i
t
r
a
p
i
g
n
s
s
o
r
c
60
50
40
30
20
10
0
> < attack (30 min)
0%
13%
18%
28%
0
2
4
6
8
10
time (hours)
Fig. 8: Bitcoin heals slowly after large partition attacks. After
10h, only half as many connections cross the partition. Healing
is even slower if the attacker is naturally on-path for 13%,
18%, 28% of the connections.
to a connection crossing the partition. Observe that a 50%–
50% split is the easiest partition to recover from, as after the
attack the chance that a new connection would bridge the two
halves is maximal. We measure the partition recovery time by
recording the percentage of connections going from one side
to the other in 30 minute intervals.
Bitcoin TCP connections are kept alive for extended periods.
As such, new connections are mostly formed when nodes
reconnect or leave the network (churn). To simulate churn
realistically, we collected the lists of all reachable Bitcoin
nodes [3], every 5 minutes, from February 10 to March 10
2016. For every node i connected in the network on the
ﬁrst day, we measured ti as the elapsed time until its ﬁrst
disappearance. To determine the probability of a node to
reboot, we randomly associated every node in our testbed
with a type ti and assumed this node reboots after a period of
time determined by an exponential distribution with parameter
λ = 1
ti . The time for next reboot is again drawn according to
the same distribution. This method produces churn with statis-
tics matching the empirical ones. We repeat each measurement
at least 5 times and report the median value found.
Bitcoin quickly recovers from a partition attack, yet it
takes hours for the network to be densely connected
again We measured how long it takes for the partition to heal
by measuring how many connections cross it, before, during
and after its formation (Fig. 8). We consider two different
attack scenarios: (i) the adversary does not
intercept any
bitcoin trafﬁc before or after the attack; and (ii) the adversary
intercepts some connections naturally.
Case 1: The adversary intercepts no trafﬁc after the attack.
It
takes 2 hours until one ﬁfth of the initial number of
connections crossing the partition are established, while after
10 hours only half of the connections have been re-established.
The slow recovery is due to the fact that nodes on both sides
do not actively change their connections unless they or their
neighbors disconnect.
Case 2: The adversary intercepts some trafﬁc after the
attack. If an AS-level adversary is naturally on-path for some
of the connections, she can signiﬁcantly prolong the partition’s
lifetime. To do so, the attacker would just continue to drop
386
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:24 UTC from IEEE Xplore.  Restrictions apply. 
packets on connections she naturally intercepts. We measured
the effect of such attacks for attackers that are on-path for 14%,
18%, and 28% of the connections, respectively (Fig. 8). We
see that an AS-adversary who is initially on-path for 28% of
the connections can prolong the already slow recovery of the
partition by 58%. Many other ways to increase the persistence
of a partition exist. Due to space constraints, we discuss some
of them in Appendix D.
Despite the long healing time, the orphan rate of the network
returned to normal even with 1% of all connections crossing
the partition. This fact shows that partitions need to be perfect
in order to affect the network signiﬁcantly.
VIII. DELAYING BLOCK PROPAGATION: EVALUATION
In this section, we evaluate the impact and practicality of
delay attacks through a set of experiments both at the node-
level and at the network-wide level. We start by demonstrating
that delay attacks against a single node work in practice
by implementing a working prototype of an interception
software that we then use to delay our own Bitcoin nodes
(Section VIII-A). We then evaluate the impact of network-
wide delay attacks by implementing a scalable event-driven
Bitcoin simulator. In constrast to partitioning attacks, and to
targeted delay attacks, we show that Bitcoin is well-protected
against network-wide delay attacks, even when considering
large coalitions of ASes as attackers (Section VIII-B).
A. How severely can an attacker delay a single node?
Methodology We implemented a prototype of our interception
software on top of Scapy [12], a Python-based packet ma-
nipulation library. Our prototype follows the methodology of