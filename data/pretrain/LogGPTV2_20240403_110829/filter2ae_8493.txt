# 点击劫持
这一篇总结得很清楚也很通俗易懂(手动滑稽)  
# Self-XSS
一些网站为了用户体验着想会有这么一个功能，就是用户在提交信息失败并且需要返回去填的时候会帮你自动把之前填写的信息补全回来，这样就避免了用户的重新输入，节省了用户的时间。这是一个很好很人性化的功能，但是这种补全可能不那么被重视，所以很多网站也不会对输出进行过滤，这样就可能存在`XSS`漏洞，而我遇到的场景也是这样的：用户登录失败的时候网站会自动把上次尝试登陆的用户名补全，但是并没有对用户名信息进行过滤，所以就存在
`XSS`，但是用户怎么会输入`XSS` `payload`打自己，所以就特别的鸡肋几乎无用
# 复制粘贴劫持
无论用户复制了什么，粘贴的时候始终是黑客自定义的内容
# 组合攻击——XSS劫持
修改参考这个靶场：  
index1.html，存在`Self-XSS`的页面，需要引入`angular.min.js`和`main.js`，主要是有一个文本输入框，其中`ng-change`指令的作用是当输入框的值改变时执行函数，`ng-model`指令可以将输入域的值与 `AngularJS` 创建的变量绑定，代码如下
main.js代码如下，模拟的输入``即可`X`自己，这里需要`AngularJS`的支持
    var redisApp = angular.module('xssApp', []);
    redisApp.controller('mainController', ['$scope', function($scope) {
        $scope.checkForAlert = function(text){
            if(text == ""){
                alert(document.cookie);
            }
        }
    }]);
angular.min.js如下  
## 目标站点存在Self-XSS
页面如下，是一个很大的文本框，输入``就弹出了`cookie`，这里模拟的是`Self-XSS`  
## 目标站点存在Click Jacking
我们查看响应，发现目标站点并未设置`X-Frame-Options`头，即存在`Click Jacking`漏洞：  
## 编写POC进行XSS Jacking获取用户Cookie
            Enter your email below to register:
            Repeat your email:
网页界面如下  
在这个网页只要使用了复制键那么复制的内容都是``，再次输入邮箱的文本框其实是利用`iframe`标签打开的`index.html`网页，存在`XSS`漏洞，所以当用户输入邮箱后为了方便就会复制上面填写好的邮箱，然后粘贴到下面确认邮箱的框框，那么就是将`XSS`代码插入到了`index.html`自己`X`了自己  
所以这个组合利用需要结合一下钓鱼社工实现窃取受害者的`cookie`等敏感信息
# 参考连接