((lambda _: lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: lambda ___: 
(If)(___)(_)(__))((lambda _: lambda __: lambda ___: (If)(___)(_)(__))(F)(F))((lambda _: 
lambda __: lambda ___: (If)(___)(_)(__))(F)(F)))((lambda _: lambda __: lambda ___: (If)
(___)(_)(__))((lambda _: lambda __: lambda ___: (If)(___)(_)(__))(F)(F))((lambda _: 
lambda __: lambda ___: (If)(___)(_)(__))(F)(F))))((lambda _: lambda __: lambda ___: 
(If)(___)(_)(__))((lambda _: lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda 
__: lambda ___: (If)(___)(_)(__))(F)(F))((lambda _: lambda __: lambda ___: (If)(___)(_)
(__))(F)(F)))((lambda _: lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: 
lambda ___: (If)(___)(_)(__))(F)(F))((lambda _: lambda __: lambda ___: (If)(___)(_)
(__))(F)(F)))))((lambda _: lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda 
__: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: lambda ___: (If)(___)(_)(__))
((lambda _: lambda __: lambda ___: (If)(___)(_)(__))(F)(F))((lambda _: lambda __: 
lambda ___: (If)(___)(_)(__))(F)(F)))((lambda _: lambda __: lambda ___: (If)(___)(_)
(__))((lambda _: lambda __: lambda ___: (If)(___)(_)(__))(F)(F))((lambda _: lambda __: 
lambda ___: (If)(___)(_)(__))(F)(F))))((lambda _: lambda __: lambda ___: (If)(___)(_)
(__))((lambda _: lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: lambda 
___: (If)(___)(_)(__))(F)(F))((lambda _: lambda __: lambda ___: (If)(___)(_)(__))(F)
(F)))((lambda _: lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: lambda 
___: (If)(___)(_)(__))(F)(F))((lambda _: lambda __: lambda ___: (If)(___)(_)(__))(F)
(F))))))((lambda _: lambda __: lambda ___: (If)(___)(_)(__))(_)(__)))))((lambda _: 
lambda __: lambda ___: lambda ____: (lambda _: lambda __: lambda ___: (If)(___)(_)(__))
((lambda _: lambda __: lambda ___: (If)(___)(_)(__))(_)(__))((lambda _: lambda __: 
lambda ___: (If)(___)(_)(__))(___)(____)))((lambda _: lambda __: lambda ___: lambda 
____: lambda _____: lambda ______: lambda _______: lambda ________: (lambda _: lambda 
__: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: lambda ___: lambda ____: 
(lambda _: lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: (lambda _: 
lambda __: lambda ___: (If)(___)(_)(__))(_)(__))(_)(__))((lambda _: lambda __: (lambda 
_: lambda __: lambda ___: (If)(___)(_)(__))(_)(__))(___)(____)))(_)(__)(___)(____))
((lambda _: lambda __: lambda ___: lambda ____: (lambda _: lambda __: lambda ___: (If)
(___)(_)(__))((lambda _: lambda __: (lambda _: lambda __: lambda ___: (If)(___)(_)(__))
(_)(__))(_)(__))((lambda _: lambda __: (lambda _: lambda __: lambda ___: (If)(___)(_)
(__))(_)(__))(___)(____)))(_____)(______)(_______)(________)))
(________________________________)(_______________________________)
(______________________________)(_____________________________)
(____________________________)(___________________________)(__________________________)
(_________________________))((lambda _: lambda __: lambda ___: lambda ____: lambda 
_____: lambda ______: lambda _______: lambda ________: (lambda _: lambda __: lambda 
___: (If)(___)(_)(__))((lambda _: lambda __: lambda ___: lambda ____: (lambda _: lambda 
__: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: (lambda _: lambda __: lambda 
___: (If)(___)(_)(__))(_)(__))(_)(__))((lambda _: lambda __: (lambda _: lambda __: 
lambda ___: (If)(___)(_)(__))(_)(__))(___)(____)))(_)(__)(___)(____))((lambda _: lambda 
__: lambda ___: lambda ____: (lambda _: lambda __: lambda ___: (If)(___)(_)(__))
((lambda _: lambda __: (lambda _: lambda __: lambda ___: (If)(___)(_)(__))(_)(__))(_)
(__))((lambda _: lambda __: (lambda _: lambda __: lambda ___: (If)(___)(_)(__))(_)(__))
(___)(____)))(_____)(______)(_______)(________)))(________________________)
(_______________________)(______________________)(_____________________)
(____________________)(___________________)(__________________)(_________________))
((lambda _: lambda __: lambda ___: lambda ____: lambda _____: lambda ______: lambda 
_______: lambda ________: (lambda _: lambda __: lambda ___: (If)(___)(_)(__))((lambda 
_: lambda __: lambda ___: lambda ____: (lambda _: lambda __: lambda ___: (If)(___)(_)
(__))((lambda _: lambda __: (lambda _: lambda __: lambda ___: (If)(___)(_)(__))(_)(__))
(_)(__))((lambda _: lambda __: (lambda _: lambda __: lambda ___: (If)(___)(_)(__))(_)
(__))(___)(____)))(_)(__)(___)(____))((lambda _: lambda __: lambda ___: lambda ____: 
(lambda _: lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: (lambda _: 
lambda __: lambda ___: (If)(___)(_)(__))(_)(__))(_)(__))((lambda _: lambda __: (lambda 
_: lambda __: lambda ___: (If)(___)(_)(__))(_)(__))(___)(____)))(_____)(______)
(_______)(________)))(________________)(_______________)(______________)(_____________)
(____________)(___________)(__________)(_________))((lambda _: lambda __: lambda ___: 
lambda ____: lambda _____: lambda ______: lambda _______: lambda ________: (lambda _: 
lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: lambda ___: lambda ____: 
(lambda _: lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: (lambda _: 
lambda __: lambda ___: (If)(___)(_)(__))(_)(__))(_)(__))((lambda _: lambda __: (lambda 
_: lambda __: lambda ___: (If)(___)(_)(__))(_)(__))(___)(____)))(_)(__)(___)(____))
((lambda _: lambda __: lambda ___: lambda ____: (lambda _: lambda __: lambda ___: (If)
(___)(_)(__))((lambda _: lambda __: (lambda _: lambda __: lambda ___: (If)(___)(_)(__))
(_)(__))(_)(__))((lambda _: lambda __: (lambda _: lambda __: lambda ___: (If)(___)(_)
(__))(_)(__))(___)(____)))(_____)(______)(_______)(________)))(________)(_______)
(______)(_____)(____)(___)(__)(_)))((lambda _: lambda __: lambda ___: lambda ____: 
(lambda _: lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: lambda ___: 
(If)(___)(_)(__))(_)(__))((lambda _: lambda __: lambda ___: (If)(___)(_)(__))(___)
(____)))((lambda _: lambda __: lambda ___: lambda ____: lambda _____: lambda ______: 
lambda _______: lambda ________: (lambda _: lambda __: lambda ___: (If)(___)(_)(__))
((lambda _: lambda __: lambda ___: lambda ____: (lambda _: lambda __: lambda ___: (If)
(___)(_)(__))((lambda _: lambda __: (lambda _: lambda __: lambda ___: (If)(___)(_)(__))
(_)(__))(_)(__))((lambda _: lambda __: (lambda _: lambda __: lambda ___: (If)(___)(_)
(__))(_)(__))(___)(____)))(_)(__)(___)(____))((lambda _: lambda __: lambda ___: lambda 
____: (lambda _: lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: (lambda 
_: lambda __: lambda ___: (If)(___)(_)(__))(_)(__))(_)(__))((lambda _: lambda __: 
(lambda _: lambda __: lambda ___: (If)(___)(_)(__))(_)(__))(___)(____)))(_____)(______)
(_______)(________)))(________________________________________________________________)
(_______________________________________________________________)
(______________________________________________________________)
(_____________________________________________________________)
(____________________________________________________________)
(___________________________________________________________)
(__________________________________________________________)
(_________________________________________________________))((lambda _: lambda __: 
lambda ___: lambda ____: lambda _____: lambda ______: lambda _______: lambda ________: 
(lambda _: lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: lambda ___: 
lambda ____: (lambda _: lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: 
(lambda _: lambda __: lambda ___: (If)(___)(_)(__))(_)(__))(_)(__))((lambda _: lambda 
__: (lambda _: lambda __: lambda ___: (If)(___)(_)(__))(_)(__))(___)(____)))(_)(__)
(___)(____))((lambda _: lambda __: lambda ___: lambda ____: (lambda _: lambda __: 
lambda ___: (If)(___)(_)(__))((lambda _: lambda __: (lambda _: lambda __: lambda ___: 
(If)(___)(_)(__))(_)(__))(_)(__))((lambda _: lambda __: (lambda _: lambda __: lambda 
___: (If)(___)(_)(__))(_)(__))(___)(____)))(_____)(______)(_______)(________)))
(________________________________________________________)
(_______________________________________________________)
(______________________________________________________)
(_____________________________________________________)
(____________________________________________________)
(___________________________________________________)
(__________________________________________________)
(_________________________________________________))((lambda _: lambda __: lambda ___: 
lambda ____: lambda _____: lambda ______: lambda _______: lambda ________: (lambda _: 
lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: lambda ___: lambda ____: 
(lambda _: lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: (lambda _: 
lambda __: lambda ___: (If)(___)(_)(__))(_)(__))(_)(__))((lambda _: lambda __: (lambda 
_: lambda __: lambda ___: (If)(___)(_)(__))(_)(__))(___)(____)))(_)(__)(___)(____))
((lambda _: lambda __: lambda ___: lambda ____: (lambda _: lambda __: lambda ___: (If)
(___)(_)(__))((lambda _: lambda __: (lambda _: lambda __: lambda ___: (If)(___)(_)(__))
(_)(__))(_)(__))((lambda _: lambda __: (lambda _: lambda __: lambda ___: (If)(___)(_)
(__))(_)(__))(___)(____)))(_____)(______)(_______)(________)))
(________________________________________________)
(_______________________________________________)
(______________________________________________)
(_____________________________________________)
(____________________________________________)
(___________________________________________)
(__________________________________________)
(_________________________________________))((lambda _: lambda __: lambda ___: lambda 
____: lambda _____: lambda ______: lambda _______: lambda ________: (lambda _: lambda 
__: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: lambda ___: lambda ____: 
(lambda _: lambda __: lambda ___: (If)(___)(_)(__))((lambda _: lambda __: (lambda _: 
lambda __: lambda ___: (If)(___)(_)(__))(_)(__))(_)(__))((lambda _: lambda __: (lambda 
_: lambda __: lambda ___: (If)(___)(_)(__))(_)(__))(___)(____)))(_)(__)(___)(____))
((lambda _: lambda __: lambda ___: lambda ____: (lambda _: lambda __: lambda ___: (If)
(___)(_)(__))((lambda _: lambda __: (lambda _: lambda __: lambda ___: (If)(___)(_)(__))
(_)(__))(_)(__))((lambda _: lambda __: (lambda _: lambda __: lambda ___: (If)(___)(_)
(__))(_)(__))(___)(____)))(_____)(______)(_______)(________)))
(________________________________________)(_______________________________________)
(______________________________________)(_____________________________________)
(____________________________________)(___________________________________)
(__________________________________)(_________________________________)))))(tmp[0])
(tmp[1])(tmp[2])(tmp[3])(tmp[4])(tmp[5])(tmp[6])(tmp[7])(tmp[8])(tmp[9])(tmp[10])
(tmp[11])(tmp[12])(tmp[13])(tmp[14])(tmp[15])(tmp[16])(tmp[17])(tmp[18])(tmp[19])
(tmp[20])(tmp[21])(tmp[22])(tmp[23])(tmp[24])(tmp[25])(tmp[26])(tmp[27])(tmp[28])
(tmp[29])(tmp[30])(tmp[31])(tmp[32])(tmp[33])(tmp[34])(tmp[35])(tmp[36])(tmp[37])
(tmp[38])(tmp[39])(tmp[40])(tmp[41])(tmp[42])(tmp[43])(tmp[44])(tmp[45])(tmp[46])
(tmp[47])(tmp[48])(tmp[49])(tmp[50])(tmp[51])(tmp[52])(tmp[53])(tmp[54])(tmp[55])
(tmp[56])(tmp[57])(tmp[58])(tmp[59])(tmp[60])(tmp[61])(tmp[62])(tmp[63])(True)(False)
if r:
    print('Correct')
else:
    print('Error')
# okay decompiling lalamblambdadambda.pyc
0x9e3779b9tea
#include 
#include 
void encrypt (uint32_t* v, uint32_t* k) {
    uint32_t v0=v[0], v1=v[1], sum=0, i;           /* set up */
    uint32_t delta=0x9e3779b9;                     /* a key schedule constant */
    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
    for (i=0; i >5) + k1);
        v1 += ((v0>5) + k3);  
    }                                              /* end cycle */
    v[0]=v0; v[1]=v1;
}
void decrypt (uint32_t* v, uint32_t* k) {
    uint32_t v0=v[0], v1=v[1], sum=0xC6EF3720, i;  /* set up */
    uint32_t delta=0x9e3779b9;                     /* a key schedule constant */
    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
    for (i=0; i>5) + k3);
        v0 -= ((v1>5) + k1);
        sum -= delta;                                   
    }                                              /* end cycle */
    v[0]=v0; v[1]=v1;
}
void swap(uint32_t* a, uint32_t* b)
{
    uint32_t c = *a;
    *a = *b;
    *b = c;
}
void perm(uint32_t str[], int index, int str_size)
{
    int i = 0,j = 0;
    if(index == str_size)
    {
        for(i = 0; i < str_size; i++)
        {
            printf("%x ",str[i]);
        }
        // printf("\n");
        uint32_t p[] = {0xaaaaaaaa,0xaaaaaaaa};
        encrypt(p,str);
        printf(":%x %x\n",p[0],p[1]);
    }
    else
    {
Crypto
zer0lfsr-
3:
        for(j = index;j < str_size; j++)
        {
            swap(&str[j],&str[index]);
            perm(str,index+1,str_size);
            swap(&str[j],&str[index]);
        }
    }