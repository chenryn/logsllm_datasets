# 【技术分享】一种新型的XSSI攻击向量
|
##### 译文声明
本文是翻译文章，文章来源：hurricanelabs.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
**翻译：**[ **shan66**
****](http://bobao.360.cn/member/contribute?uid=2522399780)
**预估稿费：200RMB（不服你也来投稿啊！）**
******投稿方式：发送邮件至**[ **linwei#360.cn**](mailto:PI:EMAIL) **，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投稿******
**引言**
最近在鼓捣跨站脚本包含（XSSI）攻击时，我突然意识到可以通过HTTP状态码来玩泄漏信息和跨域。如果你想到的是“XSSI登录神谕”，那么说明你的已经上道了，但该攻击还可以扩展到更多的情形中。这里说的登录神谕通常是根据当前认证状态来决定加载与否的一些JavaScript文件。然而，这种攻击还可以针对HTML、JSON、XML或任意的内容类型。这实际上就是为XSSI攻击开辟了一个新的战场：从GET参数枚举信息，一次一位。
对于这种类型的攻击手法，我至今尚未见过公开的介绍，所以我将尽力使这篇文章尽可能全面。这意味着这篇文章会很长，所以我将其分为几部分，具体如下所示：
1\. 攻击手法
2\. 该攻击的必要条件
3\. 防御措施
4\. 进一步探讨
5\. 小结
为了节约篇幅，本文不会解释XSSI的基础知识，这方面的内容，可以参考另一篇文章，地址为。我认为这是有关这个主题的最佳参考文章。在本文中，我提出了一种注入非脚本内容的新型攻击手法。针对非脚本内容的更强攻击手法，上面提到的那篇文章也有相关的解释，但是与下面将要演示的方法相比，要想实施那些攻击，它们要求的条件会更加苛刻（编码和注入技巧）。
**新型攻击手法**
该攻击手法的基本思想与XSSI登陆神谕非常类似。攻击者会尝试将脚本标签加载到指向不同来源的页面。通过onerror、onload和window.onerror函数，攻击者可以弄清楚跨源服务器如何响应GET请求的信息的。让我感到吃惊的是，在收到一个非2XX的响应时，会执行onerror函数，否则就会执行onload函数。除非强制实施了严格的内容类型限制，否则不管返回的内容类型如何（
**请参阅下文必要条件1** ），都是如此。
它的意义何在呢？我们能从200 vs 400响应中了解到什么？
嗯，这取决于端点，以及其他多种可能因素。毕竟，HTTP状态码旨在返回信息，并且经常用于返回API的信息。
**几个简单的例子**
现在让我们假设，如果你通过了身份认证，那么/admin目录就会返回一个200状态码和HTML页面，否则，就会返回一个401状态码和HTML错误页面。那么，这不仅可以作为一个登录神谕，同时还允许进行权限的枚举。如果每个用户都有唯一的个人信息页面（即：/profile/dennis），则恶意站点可以使用类似的攻击来识别特定用户，以便进行进一步攻击，并且不会引起安全响应团队的警觉。如果一个页面具有基于GET请求的SQL注入漏洞，但攻击者却无法访问该页面的话，那么，攻击者可以诱骗经过身份验证的用户访问处于攻击者控制之下的页面，从而间接发动注入攻击，然后将结果跨域泄漏给攻击者的JavaScript代码。
**一个更有趣的例子**
下面，我们将深入考察一个更有趣的例子。假设这里有一个票务系统，它提供了查找客户信息的搜索字段。如果发送GET到“/search?c=d*”的话，其中“*”字符用作通配符，将返回以字母“d”开头的所有客户信息和200状态码。如果没有客户匹配“d
*”模式，则返回500状态码。如果攻击者想要获得这些用户信息，但他们无法登录，那怎么办？他可以设法让已经登录的用户代为发送请求，并告诉onload函数“是的，我找到了某人”，或告诉onerror函数“搜索没有返回任何结果”。
这类似于SQL盲注，不同之处在于这里需要借助第三方，同时，这里滥用的是同源策略而非语法。注意，在这里不需要关心票据系统在正文中返回的内容类型。搜索可以返回JSON、XML、HTML甚至一幅图像，只要没有返回nosniff头部，对这个攻击就没有影响。同时，URL参数可以包含在脚本src属性中，这样攻击者就可以创建如下所示的脚本了：
    d = document.createElement('script');
    d.src = victim_domain + "/search?c=a*";
这将发送一个GET请求到票务系统上的API“/search？c=a*”。这里，攻击者只是设置了onload和onerror事件来分别记录成功和失败情况：
    d.onload  = function(){client_exists("a*")};
    d.onerror = function(){client_does_not_exist("a*")};
然后将它附加到DOM对象上面：
    document.head.appendChild(d);