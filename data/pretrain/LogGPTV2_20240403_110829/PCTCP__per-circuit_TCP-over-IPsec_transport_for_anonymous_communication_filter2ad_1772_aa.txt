# PCTCP: Per-Circuit TCP-over-IPsec Transport for Anonymous Communication Overlay Networks

**Authors:**
- Mashael AlSabah
  - Qatar Computing Research Institute
  - Department of Computer Science and Engineering, Qatar University
  - PI:EMAIL
- Ian Goldberg
  - Cheriton School of Computer Science, University of Waterloo
  - PI:EMAIL

## Abstract

Recent research efforts have focused on designing a transport layer that meets the security requirements of anonymous communications while maximizing network performance. In this work, we argue that existing proposals suffer from several performance and deployment issues. We introduce PCTCP, a novel transport design for overlay networks that addresses these shortcomings. In PCTCP, each overlay path, or circuit, is assigned a separate kernel-level TCP connection protected by IPsec, the standard security layer for IP.

To evaluate our work, we focus on the Tor network, the most popular low-latency anonymity network, which is known for its performance problems. Previous research has shown that the current transport layer design of Tor, where multiple circuits are multiplexed over a single TCP connection between any pair of routers, is a key contributor to these performance issues.

We implemented, experimentally evaluated, and confirmed the potential gains provided by PCTCP in an isolated testbed and on the live Tor network. Our results show significant performance benefits for web clients, with response times improved by more than 60% and download times improved by approximately 30% compared to Tor. PCTCP requires minimal changes to Tor and is easily deployable, as it does not require all routers on a circuit to upgrade.

**Categories and Subject Descriptors:**
- C.2.0 [Computer-Communication Networks]: General—Data communications
- C.2.1 [Computer-Communication Networks]: Network Architecture and Design
- C.4 [Computer Systems Organization]: Performance of Systems
- K.4.1 [Computers and Society]: Public Policy Issues—Privacy

**General Terms:**
- Measurement, Performance, Security

**Keywords:**
- Tor, transport design, performance improvement

## 1. Introduction

Advances in the Internet have enabled users to interact and exchange information online, but they have also created opportunities for adversaries to exploit users' private information. Whether the motivation is commercial, political, or personal, the consequences of personal information leaks can be severe.

One key solution to this problem is Tor, a widely used privacy-preserving network that provides low-latency anonymous online access. Since its introduction in 2003, Tor has evolved to support hundreds of thousands of users using approximately 3000 volunteer-operated routers worldwide. However, Tor's increasing popularity comes at the cost of significant performance issues, which can deter wider adoption and impact its anonymity.

The Tor research community has been investigating the sources of these performance problems and proposing remedies. One major issue is traffic congestion, caused by a high client-to-relay ratio and the use of bandwidth-intensive applications. To address this, incentive-based schemes and congestion control techniques have been proposed. Despite these efforts, performance problems persist, primarily due to Tor's poor transport design, which multiplexes multiple circuits over a single TCP connection, leading to unfair application of TCP congestion control.

Reardon and Goldberg proposed TCP-over-DTLS, where each circuit gets a separate user-level TCP connection, but this approach faces performance and deployability issues. In this work, we propose PCTCP, a new transport design for Tor that uses a separate kernel-level TCP connection for each circuit, protected by IPsec. This design significantly improves performance while maintaining the threat model and requiring only minimal changes to the software.

**Contributions:**
- We propose and implement PCTCP, a novel transport design for anonymous communication systems that avoids the deployability and performance drawbacks of previous designs.
- We conduct small-scale experiments on the live Tor network, showing significant reductions in delays. At the 75th percentile, response times improve by more than 47%, and download times improve by 27%.
- We perform large-scale experiments on a network emulator, demonstrating significant performance benefits for web clients.
- Our approach is incrementally deployable, as changes are local to individual routers and do not affect their operation with other routers.

The rest of the paper is structured as follows. Section 2 provides background on Tor and IPsec. Section 3 compares our work to previous research. Section 4 elaborates on our design, and Section 5 evaluates it. Finally, Section 6 discusses open issues, and Section 7 concludes the paper.

## 2. Background

### 2.1 Tor

Tor is a low-latency anonymization network based on onion routing. It consists of approximately 3000 volunteer-operated relays, known as Onion Routers (ORs). Each OR creates a router descriptor containing its contact information and sends it to directory authorities. Tor clients, or Onion Proxies (OPs), download these descriptors to build circuits through the network before communicating with their destinations. Each circuit typically consists of three ORs: the entry guard, middle, and exit OR. ORs in a circuit are connected by TCP connections, and TLS is used for hop-by-hop authenticity, data integrity, and confidentiality.

#### Circuit Construction

For performance reasons, an OP preemptively creates spare circuits for user applications. When a new TCP stream is received, it is attached to an appropriate pre-established circuit. If no such circuit exists, the OP builds a new one by selecting three routers according to Tor's bandwidth-weighted router selection algorithm. The OP then sends a `create_fast` command to the first router, which responds with a `created_fast` reply. The OP extends the Difﬁe-Hellman (DH) channel by sending an `extend` command to the first router, containing a `create` command and the first half of the DH handshake for the second router, encrypted to the second router's public key. This process is repeated for each subsequent OR added to the circuit.

The OP acts as a SOCKS proxy, dividing user data into 512-byte fixed-sized cells, adding a layer of encryption for each node on the forward path, and source-routing the cells through the established circuits. Each hop decrypts the relay header and payload with the session key, replaces the circuit ID, and forwards the decrypted cell to the next OR. The exit OR removes the last layer of encryption and establishes the final connection to the destination.

**Figure 1: Cross-Circuit Interference Problem**

The figure illustrates the cross-circuit interference problem when a single TCP connection is shared between a loud and a quiet circuit. OR1, acting as an exit for both circuits, receives file-sharing and web browsing data on two different input buffers. The cells are pushed to their respective circuit queues. Since the next hop for each circuit is OR2, both circuits share the same output buffer. The file-sharing circuit, which drops more data, causes the web browsing circuit to experience more delays due to the unfair application of TCP congestion control on the shared connection.