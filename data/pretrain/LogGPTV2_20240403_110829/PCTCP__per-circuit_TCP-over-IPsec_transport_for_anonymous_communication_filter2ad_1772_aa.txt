title:PCTCP: per-circuit TCP-over-IPsec transport for anonymous communication
overlay networks
author:Mashael AlSabah and
Ian Goldberg
PCTCP: Per-Circuit TCP-over-IPsec Transport for
Anonymous Communication Overlay Networks
Mashael AlSabah∗
Qatar Computing Research Institute
Department of Computer Science and
Engineering, Qatar University
PI:EMAIL
ABSTRACT
Recently, there have been several research efforts to design a trans-
port layer that meets the security requirements of anonymous com-
munications while maximizing the network performance experi-
enced by users. In this work, we argue that existing proposals suffer
from several performance and deployment issues and we introduce
PCTCP, a novel anonymous communication transport design for
overlay networks that addresses the shortcomings of the previous
proposals. In PCTCP, every overlay path, or circuit, is assigned a
separate kernel-level TCP connection that is protected by IPsec, the
standard security layer for IP.
To evaluate our work, we focus on the Tor network, the most
popular low-latency anonymity network, which is notorious for its
performance problems that can potentially deter its wider adoption
and thereby impact its anonymity. Previous research showed that
the current transport layer design of Tor, in which several circuits
are multiplexed in a single TCP connection between any pair of
routers, is a key contributor to Tor’s performance issues.
We implemented, experimentally evaluated, and conﬁrmed the
potential gains provided by PCTCP in an isolated testbed and on
the live Tor network. We ascertained that signiﬁcant performance
beneﬁts can be obtained using our approach for web clients, while
maintaining the same level of anonymity provided by the network
today. Our realistic large-scale experimental evaluation of PCTCP
shows improvements of more than 60% for response times and ap-
proximately 30% for download times compared to Tor. Finally,
PCTCP only requires minimal changes to Tor and is easily deploy-
able, as it does not require all routers on a circuit to upgrade.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General— Data
communications; C.2.1 [Computer-Communication Networks]:
Network Architecture and Design; C.4 [Computer Systems Or-
ganization]: Performance of Systems; K.4.1 [Computers and So-
ciety]: Public Policy Issues—Privacy
∗Work done while at the University of Waterloo
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516715.
Ian Goldberg
Cheriton School of Computer Science
University of Waterloo
PI:EMAIL
General Terms
Measurement, Performance, Security
Keywords
Tor, transport design, performance improvement
1.
INTRODUCTION
While advances to the Internet have enabled users to easily inter-
act and exchange information online, they have also created several
opportunities for adversaries to prey on users’ private information.
Whether the motivation for data collection is commercial, where
service providers sell data for marketers, or political, where a gov-
ernment censors, blocks and tracks its people, or even personal, for
cyberstalking purposes, there is no doubt that the consequences of
personal information leaks can be severe.
Consequently, several solutions emerged, a key example of which
is Tor [14]. Tor is the most widely used privacy-preserving network
that empowers people with low-latency anonymous online access.
That is, people can surf the Internet without the fear of revealing
their identity or location. Since its introduction in 2003, Tor has
successfully evolved to support hundreds of thousands of users us-
ing approximately 3000 volunteer-operated routers run all around
the world. Incidents of sudden increases in Tor’s usage, coincid-
ing with global political events, conﬁrm the importance of the Tor
network for Internet users today [13].
Despite Tor’s increasing popularity, the bitter reality is that it
offers anonymity at the expense of intolerable performance costs.
Not only do performance problems hinder Tor’s wider adoption,
but they can have an immense impact on its anonymity. If users
are discouraged from Tor’s below-mediocre service, the anonymity
set of all users would eventually shrink, which in turn reduces the
anonymity guarantees obtained from the network today.
For this reason, the Tor research community has been intensively
investigating the sources of the performance problems in Tor, as
well as proposing remedies to enhance the usability of Tor. First,
one major problem in Tor is trafﬁc congestion, which has a number
of causes. One cause for congestion is the high client-to-relay ratio
which is approximately 165:1. To help reduce the client-to-relay
ratio, incentive-based schemes have been introduced to encourage
users to donate bandwidth to the network to reduce the trafﬁc pres-
sure on the routers [20, 27, 29].
Congestion is also magniﬁed because a small fraction of users
use greedy ﬁle-sharing applications that can consume up to 40%
of the bandwidth [24]. What adds to the problem is Tor’s lack of
congestion control and awareness, as Tor only implements an end-
to-end window-based ﬂow-control algorithm that does not react to
congestion. To address these problems, some congestion control
and avoidance techniques have been proposed to reduce congestion
[6, 43]. To reduce the effects that greedy applications impose on
the network, static and dynamic throttling approaches have been
proposed for clients’ connections [21, 27].
Regardless of all these intensive efforts, performance problems
will continue to persist in Tor, even if the above proposals are em-
ployed. A major culprit is Tor’s poor transport design, which has
been shown to add unnecessary latency [15, 31]. Tor multiplexes
circuits (overlay paths established through the Tor network) from
different users over the same TCP connection. Reardon and Gold-
berg [31] observed that since heavy circuits are often multiplexed
with light circuits in the same TCP connection, and since heavy
circuits have higher loss rates, they result in unfair application of
the TCP congestion control of the shared connection on all circuits.
As a design solution, Reardon and Goldberg proposed TCP-over-
DTLS, where every circuit gets a separate user-level TCP connec-
tion, and DTLS is used for encrypting and securing the communi-
cation between routers. Unfortunately, TCP-over-DTLS faces the
following design drawbacks:
• Performance: User-level implementations of TCP provide
signiﬁcantly lower performance than their kernel-level coun-
terparts in terms of throughput and consume substantially
more CPU cycles [10, 16], a scarce resource in Tor. Such
heavy costs might render any performance beneﬁts moot if a
user-level TCP scheme is deployed at a wide scale.
• Deployability: First, the unavailability of a reliable user-
level TCP stack with a license that is compatible with Tor is
a major obstacle facing TCP-over-DTLS.1 Second, for any
pair of routers to use TCP-over-DTLS, both routers need to
upgrade their transport design.
Our Approach. In this work, we seek to enhance the performance
and usability of the Tor network for interactive application users.
We tackle the performance problem in Tor at its roots, and focus on
ﬁxing the weaknesses in Tor’s transport design. This work is not
concerned with the lack of bandwidth resources, as there have been
several proposals that address this problem, as we described above.
We propose PCTCP, a new transport design for Tor in which a sep-
arate kernel-level TCP connection is dedicated to every circuit. To
protect and secure communication between routers, we use IPsec,
the standard security layer for IP. Our design signiﬁcantly improves
the performance of Tor while maintaining its threat model. Addi-
tionally, PCTCP requires only minimal changes to the software.
Our design combines the advantages of the previous TCP-over-
DTLS proposal, while avoiding its deployment and performance
shortcomings, inherent from using a user-level TCP stack. Further-
more, PCTCP does not require all routers on the circuit to upgrade,
except for enabling IPsec communication for a pair of routers that
wish to use PCTCP. Our design has a signiﬁcantly easier road to
deployment.
Contributions. This is the ﬁrst work that implements a new trans-
port design, for anonymous communication systems in general and
for the Tor anonymity network in particular, and evaluates it with
realistic large-scale experiments, as well as live network experi-
ments. In designing and implementing PCTCP, we offer the fol-
lowing contributions:
• We propose and implement PCTCP, a novel transport de-
sign for anonymous communication systems in general and
for Tor in particular that avoids the deployability and perfor-
mance drawbacks of previous designs.
1Reardon and Goldberg used the Daytona TCP stack for their implementation and
measurements. Unfortunately, Daytona cannot be used for the Tor network due to its
unavailability for open-source projects.
• We carry out small-scale experiments on the live Tor net-
work to evaluate our design. Our results show signiﬁcant
reductions in delays observed. At the 75th percentile, our re-
sponse times are improved by more than 47% and our down-
load times are improved by 27%.
• We further evaluate our design by performing a series of
large-scale experiments on a network emulator with a topol-
ogy that closely approximates the performance of the live Tor
network. Our results show signiﬁcant performance beneﬁts
for the download and response times of web clients.
• Our simple, yet effective, approach is incrementally deploy-
able, as our changes, except for enabling IPsec communi-
cation between any pair of routers using PCTCP, are local to
individual routers and do not affect their operation with other
routers.
The rest of the paper is structured as follows. We provide the
reader with the necessary background on Tor and IPsec in section 2
and compare our work to previous work in section 3. Then, we
elaborate on our design in section 4 and evaluate it in section 5.
Finally, we discuss some open issues regarding our design and ex-
periments in section 6 and conclude in section 7.
2. BACKGROUND
In this section, we start by providing an overview of the Tor net-
work and its current transport design. Then, we introduce and ex-
plain the basic functionality of IPsec.
2.1 Tor
Tor is a low-latency anonymization network that is based on the
concept of onion routing. The network consists of approximately
3000 volunteer-operated relays [39], known as Onion Routers (ORs).
Each OR creates a router descriptor that contains its contact in-
formation, such as its IP address, ports, public keys, and its band-
width capabilities, and sends the descriptor to directory authorities.
Tor clients, nicknamed Onion Proxies (OPs), download the router
descriptors from directories to build paths, referred to as circuits,
through the network before they can communicate with their Inter-
net destinations. Each circuit usually consists of three ORs, which
are referred to as the entry guard, middle, and exit OR, according
to their position in the circuit. ORs in a circuit are connected by
TCP connections and TLS [12] is used to provide hop-by-hop au-
thenticity, data integrity and conﬁdentiality.
Circuit Construction. For performance reasons, an OP preemp-
tively creates a number of spare circuits for its user applications.
When the OP receives a new TCP stream from a user applica-
tion, it attaches it to an appropriate pre-established circuit. If no
such circuit exists, the OP builds a new circuit by ﬁrst selecting
three routers, Xi, according to Tor’s bandwidth-weighted router
selection algorithm. Next, to start establishing the circuit, the OP
sends a create_fast command to X1, which responds with a cre-
ated_fast reply. To extend the Difﬁe-Hellman (DH) channel, the
OP sends an extend command to X1, containing in its payload a
create command and the ﬁrst half of the DH handshake for router
X2 encrypted to X2’s public key. Router X1 forwards this create
command to router X2, and when it receives a created cell back
from router X2, it forwards its payload in an extended cell to the
OP to ﬁnish the client’s DH handshake with router X2. The same
procedure is carried out for each subsequent OR added to the cir-
cuit.
The OP acts as a SOCKS proxy to communicate with user ap-
plications. The OP divides the user’s data into 512-byte ﬁxed-sized
Figure 1: The cross-circuit interference problem: the ﬁgure demonstrates the cross-circuit interference problem when a single TCP
connection is shared between a loud and a quiet circuit. OR1, acting as an exit for both circuits, receives ﬁle-sharing data and web
browsing data on two different connection input buffers. The cells then are pushed to their circuit queues. Since the next hop for
each circuit is OR2, both circuits share the same connection output buffer. Since the ﬁle-sharing circuit is expected to drop more
data on the connection between OR1 and OR2, the web browsing circuit experiences more delays due to the unfair application of the
TCP congestion control on the shared connection.
cells, adds a layer of encryption for every node on the forward path,
and then cells are source-routed through the established circuits.
Every hop, on receiving a relay cell, looks up the corresponding
circuit, decrypts the relay header and payload with the session key
for that circuit, replaces the circuit ID of the header, and forwards
the decrypted cell to the next OR. When the exit OR receives the
cell, it removes the last layer of the encryption, and establishes the