合法的 XML 文档是"形式良好"的 XML 文档，这也符合文档类型定义（DTD）的规则：
```xml
Tove
Jani
Reminder
Don't forget me this weekend!
```
在上面的实例中，DOCTYPE 声明是对外部 DTD 文件的引用。下面的段落展示了这个文件的内容。
**XML DTD**
DTD 的目的是定义 XML 文档的结构。它使用一系列合法的元素来定义文档结构：
```xml
]>
```
**XML Schema**
W3C 支持一种基于 XML 的 DTD 代替者，它名为 XML Schema：
```xml
```
---
### 查看 XML 文件
在所有主流的浏览器中，均能够查看原始的 XML 文件。
不要指望 XML 文件会直接显示为 HTML 页面。
**查看 XML 文件**
```xml
	Tove
	Jani
	Reminder
	Don't forget me this weekend!
```
这个 XML 在浏览器中显示是这样的
XML 文档将显示为代码颜色化的根以及子元素。通过点击元素左侧的加号（+）或减号（ - ），可以展开或收起元素的结构。要查看原始的 XML 源（不包括 + 和 - 符号），选择"查看页面源代码"或从浏览器菜单"查看源文件"。
如果一个错误的XML文件被打开，浏览器会报告错误。
**XML CSS**
通过使用 CSS（Cascading Style Sheets 层叠样式表），你可以添加显示信息到 XML 文档中。
原始 XML
CSS
CSS + XML
下面是 XML 文件的一小部分。第二行把 XML 文件链接到 CSS 文件：
```xml
Empire Burlesque
Bob Dylan
USA
Columbia
10.90
1985
Hide your heart
Bonnie Tyler
UK
CBS Records
9.90
1988
.
.
.
```
使用 CSS 格式化 XML 不是常用的方法,W3C 推荐使用 XSLT.
**XML XSLT**
XSLT 是首选的 XML 样式表语言。
XSLT（eXtensible Stylesheet Language Transformations）远比 CSS 更加完善。
XSLT 是在浏览器显示 XML 文件之前，先把它转换为 HTML：
XSLT 文件
在上面的实例中，当浏览器读取 XML 文件时，XSLT 转换是由浏览器完成的。
在使用 XSLT 来转换 XML 时，不同的浏览器可能会产生不同结果。为了减少这种问题，可以在服务器上进行 XSLT 转换。
---
## XML JavaScript
### XML HTTP Request
**XMLHttpRequest 对象**
XMLHttpRequest 对象用于在后台与服务器交换数据。
创建一个 XMLHttpRequest 对象
所有现代浏览器（IE7+、Firefox、Chrome、Safari 和 Opera）都有内建的 XMLHttpRequest 对象。
创建 XMLHttpRequest 对象的语法：
```js
xmlhttp=new XMLHttpRequest();
```
旧版本的Internet Explorer（IE5和IE6）中使用 ActiveX 对象：
```js
xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
```
### XML Parser
所有现代浏览器都有内建的 XML 解析器。
XML 解析器把 XML 文档转换为 XML DOM 对象 - 可通过 JavaScript 操作的对象。
**解析 XML 文档**
下面的代码片段把 XML 文档解析到 XML DOM 对象中：
```js
if (window.XMLHttpRequest)
{// code for IE7+, Firefox, Chrome, Opera, Safari
xmlhttp=new XMLHttpRequest();
}
else
{// code for IE6, IE5
xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
}
xmlhttp.open("GET","books.xml",false);
xmlhttp.send();
xmlDoc=xmlhttp.responseXML;
```
**解析 XML 字符串**
下面的代码片段把 XML 字符串解析到 XML DOM 对象中：
```js
txt="";
txt=txt+"Everyday Italian";
txt=txt+"Giada De Laurentiis";
txt=txt+"2005";
txt=txt+"";
if (window.DOMParser)
{
parser=new DOMParser();
xmlDoc=parser.parseFromString(txt,"text/xml");
}
else // Internet Explorer
{
xmlDoc=new ActiveXObject("Microsoft.XMLDOM");
xmlDoc.async=false;
xmlDoc.loadXML(txt);
}
```
**跨域访问**
出于安全方面的原因，现代的浏览器不允许跨域的访问。
这意味着，网页以及它试图加载的 XML 文件，都必须位于相同的服务器上。
---
### XML DOM
XML DOM（XML Document Object Model）定义了访问和操作 XML 文档的标准方法。
XML DOM 把 XML 文档作为树结构来查看。
所有元素可以通过 DOM 树来访问。可以修改或删除它们的内容，并创建新的元素。元素，它们的文本，以及它们的属性，都被认为是节点。
**加载一个 XML 文件 - 跨浏览器实例**
下面的实例把 XML 文档（"note.xml"）解析到 XML DOM 对象中，然后通过 JavaScript 提取一些信息：
```html
W3Cschool Internal Note
To: 
From: 
Message: 
```
如需从上面的 XML 文件（"note.xml"）的 `` 元素中提取文本 "Tove"，语法是：
```
getElementsByTagName("to")[0].childNodes[0].nodeValue
```
请注意，即使 XML 文件只包含一个 `` 元素，你仍然必须指定数组索引 `[0]`。这是因为 `getElementsByTagName()` 方法返回一个数组。
**加载一个 XML 字符串 - 跨浏览器实例**
下面的实例把 XML 字符串解析到 XML DOM 对象中，然后通过 JavaScript 提取一些信息：
```html
W3Cschool Internal Note
To: 
From: 
Message: 
txt="";
txt=txt+"Tove";
txt=txt+"Jani";
txt=txt+"Reminder";
txt=txt+"Don't forget me this weekend!";
txt=txt+"";
if (window.DOMParser)
  {
  parser=new DOMParser();
  xmlDoc=parser.parseFromString(txt,"text/xml");
  }
else // Internet Explorer
  {
  xmlDoc=new ActiveXObject("Microsoft.XMLDOM");
  xmlDoc.async=false;
  xmlDoc.loadXML(txt);
  }
document.getElementById("to").innerHTML=xmlDoc.getElementsByTagName("to")[0].childNodes[0].nodeValue;
document.getElementById("from").innerHTML=xmlDoc.getElementsByTagName("from")[0].childNodes[0].nodeValue;
document.getElementById("message").innerHTML=xmlDoc.getElementsByTagName("body")[0].childNodes[0].nodeValue;
```
---
## Source & Reference
- [XML 教程](https://www.runoob.com/xml/xml-tutorial.html)