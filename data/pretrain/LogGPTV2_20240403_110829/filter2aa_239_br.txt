域值：
    private string Invariant(FormattableString s) =>
      s.ToString(CultureInfo.InvariantCulture);
  注意： 第28章讨论了格式字符串的语言专有问题，以及区域值和不变的区域
值。
在下面的代码段中，Invariant方法用来把一个字符串传递给第二个WriteLine方法。
WriteLine的第一个调用使用当前的区域值，而第二个调用使用不变的区域值：
    var day = new DateTime(2025, 2, 14);
    WriteLine($"{day:d}");
    WriteLine(Invariant($"{day:d}")
);
如果有英语区域值设置，结果就如下所示。如果系统配置了另一个区域值，第一个结
果就是不同的。在任何情况下，都会看到不变区域值的差异：
        2/14/2025
        02/14/2015
使用不变的区域值，不需要自己实现方法，而可以直接使用FormattableString类的静
态方法Invariant：
    WriteLine(FormattableString.Invariant($"{day:d}"))
;
3．转义花括号
如果希望在插值字符串中包括花括号，可以使用两个花括号转义它们：
    string s = "Hello";
    WriteLine($"{{s}} displays the value of s: {s}");
WriteLine方法被解读为如下实现代码：
    WriteLine(String.Format("{s} displays the value of s: {0}", s));
输出如下：
    {s} displays the value of s : Hello
还可以转义花括号，从格式字符串中建立一个新的格式字符串。下面看看这个代码
段：
    string formatString = $"{s}, {{0}}";
    string s2 = "World";
    WriteLine(formatString, s2);
有了字符串变量formatString，编译器会把占位符0插入变量s，调用String.Format：
    string formatString = String.Format("{0}, {{0}}", s);
这会生成格式字符串，其中变量s替换为值Hello，删除第二个格式最外层的花括号：
    string formatString = "Hello, {0}";
在WriteLine方法的最后一行，使用变量s2的值把World字符串插值到新的占位符0
中：
    WriteLine("Hello, World");
10.2.2 日期时间和数字的格式
除了给占位符使用字符串格式之外，还可以根据数据类型使用特定的格式。下面先从
日期开始。在占位符中，格式字符串跟在表达式的后面，用冒号隔开。下面所示的例子是
用于DateTime类型的D和d格式：
    var day = new DateTime(2025, 2, 14);
    WriteLine($"{day:D}");
    WriteLine($"{day:d}");
结果显示，用大写字母D表示长日期格式字符串，用小写字母d表示短日期字符串：
        Friday, February 14, 2025
        2/14/2025
根据所使用的大写或小写字符串，DateTime类型会得到不同的结果。根据系统的语言
设置，输出可能不同。日期和时间是特定于语言的。
DateTime类型支持很多不同的标准格式字符串，显示日期和时间的所有表示：例如，
t表示短时间格式，T表示长时间格式，g和G显示日期和时间。这里不讨论所有其他选
项，在MSDN文档的DateTime类型的ToString方法中，可以找到相关介绍。
  注意： 应该提到的一个问题是，为DateTime构建自定义的格式字符串。自定
义的日期和时间格式字符串可以结合格式说明符，例如dd-MMM-yyyy：
    WriteLine($"{day:dd-MMM-yyyy}");
结果如下：
    14-Feb-2025
这个自定义格式字符串利用dd把日期显示为两个数字（如果某个日期在10日之
前，这就很重要，从这里可以看到d和dd之间的区别）、MMM（月份的缩写名称，注
意它是大写，而mm表示分钟）和表示四位数年份的yyyy。同样，在MSDN文档中可以
找到用于自定义日期和时间格式字符串的所有其他格式说明符。
数字的格式字符串不区分大小写。下面看看n、e、x和c标准数字格式字符串：
    int i = 2477;
    WriteLine($"{i:n} {i:e} {i:x} {i:c}");
n格式字符串定义了一个数字格式，用组分隔符显示整数和小数。e表示使用指数表示
法，x表示转换为十六进制，c显示货币：
    2,477.00 2.477000e+003 9ad $2,477.00
对于数字的表示，还可以使用定制的格式字符串。#格式说明符是一个数字占位符，
如果数字可用，就显示数字；如果数字不可用，就不显示数字。0格式说明符是一个零占
位符，显示相应的数字，如果数字不存在，就显示零。
    double d = 3.1415;
    WriteLine($"{d:###.###}");
    WriteLine($"{d:000.000}");
在示例代码中，对于double值，第一个结果把逗号后的值舍入为三位小数，第二个结
果是显示逗号前的三个数字：
    3.142
    003.142
MSDN文档给百分比、往返和定点显示提供了所有的标准数字格式字符串，以及提供
自定义格式字符串，用于使指数、小数点、组分隔符等显示不同的外观。
10.2.3 自定义字符串格式
格式字符串不限于内置类型，可以为自己的类型创建自定义格式字符串。为此，只需
要实现接口IFormattable。
首先是一个简单的Person类，它包含FirstName和LastName属性（代码文件
StringFormats/Person.cs）：
        public class Person
        {
          public string FirstName { get; set; }
          public string LastName { get; set; }
        }
为了获得这个类的简单字符串表示，重写基类的ToString方法。这个方法返回由
FirstName和LastName组成的字符串：
        public override string ToString() => FirstName + " " + LastName;
除了简单的字符串表示之外，Person类也应该支持格式字符串F，返回名L和姓A，后
者代表“all”；并且应该提供与ToString方法相同的字符串表示。为实现自定义字符串，接
口IFormattable定义了带两个参数的ToString方法：一个是格式的字符串参数，另一个是
IFormatProvider参数。IFormatProvider参数未在示例代码中使用。可以基于区域值使用这
个参数，进行不同的显示，因为CultureInfo类实现了该接口。
实现了这个接口的其他类是NumberFormatInfo和DateTimeFormatInfo。可以把实例传
递到ToString方法的第二个参数，使用这些类配置数字和DateTime的字符串表示。
ToString方法的实现代码只使用switch语句，基于格式字符串返回不同的字符串。为了使
用格式字符串直接调用ToString方法，而不提供格式提供程序，应重载ToString方法。这
个方法又调用有两个参数的ToString方法：
        public class Person : IFormattable
        {
          public string FirstName { get; set; }
          public string LastName { get; set; }
          public override string ToString() => FirstName + " " + LastName;
          public virtual string ToString(string format) => ToString(format, null)
;
          public string ToString(string format, IFormatProvider formatProvider)
          {
          switch (format)
          {
            case null:
            case "A":
              return ToString();
            case "F":
              return FirstName;
            case "L":
              return LastName;
            default:
              throw new FormatException($"invalid format string {format}");
          }
          }
        }
有了这些代码，就可以明确传递格式字符串，或隐式使用字符串插值，以调用
ToString方法。隐式的调用使用带两个参数的ToString方法，并给IFormatProvider参数传递
null（代码文件StringFormats/Program.cs）：
        var p1 = new Person { FirstName = "Stephanie", LastName = "Nagel" };
        WriteLine(p1.ToString("F")
);
        WriteLine($"{p1:F
}");
10.3 正则表达式
正则表达式作为小型技术领域的一部分，在各种程序中都有着难以置信的作用。正则
表达式可以看成一种有特定功能的小型编程语言：在大的字符串表达式中定位一个子字符
串。它不是一种新技术，最初是在UNIX环境中开发的，与Perl和JavaScript编程语言一起
使用得比较多。System.Text.RegularExpressions名称空间中的许多.NET类都支持正则表达
式。.NET 
Framework的各个部分也使用正则表达式。例如，在ASP.NET验证服务器的控
件中就使用了正则表达式。
对于不太熟悉正则表达式语言的读者，本节将主要解释正则表达式和相关的.NET
类。如果你很熟悉正则表达式，就可以浏览本节，选择学习与.NET基类引用有关的内
容。注意，.NET正则表达式引擎用于兼容Perl 5的正则表达式，但它有一些新功能。
10.3.1 正则表达式概述
正则表达式语言是一种专门用于字符串处理的语言。它包含两个功能：
● 一组用于标识特殊字符类型的转义代码。你可能很熟悉DOS命令中使用*字符表示
任意子字符串（例如，DOS命令Dir Re*会列出名称以Re开头的所有文件）。正则
表达式使用与*类似的许多序列来表示“任意一个字符”、“一个单词的中断”和“一
个可选的字符”等。
● 一个系统，在搜索操作中把子字符串和中间结果的各个部分组合起来。
使用正则表达式，可以对字符串执行许多复杂而高级的操作，例如：
● 
识别（可以是标记或删除）字符串中所有重复的单词，例如，把“The 
computer
books books”转换为“The computer books”。
● 把所有单词都转换为标题格式，例如，把“this is a Title”转换为“This Is A Title”。
● 把长于3个字符的所有单词都转换为标题格式，例如，把“this is a Title”转换为“This
is a Title”。
● 确保句子有正确的大写形式。
● 区分URI的各个元素（例如，给定http://www.wrox.com，提取出其中的协议、计算
机名和文件名等）。
当然，这些都是可以在C#中用System.String和System.Text.StringBuilder的各种方法执
行的任务。但是，在一些情况下，还需要编写相当多的C#代码。如果使用正则表达式，
这些代码一般可以压缩为几行。实际上，这是实例化了一个对象
System.Text.RegularExpressions.RegEx（甚至更简单，调用静态的RegEx（）方法），给它
传递要处理的字符串和一个正则表达式（这是一个字符串，它包含用正则表达式语言编写
的指令）。
正则表达式字符串初看起来像是一般的字符串，但其中包含了转义序列和有特定含义
的其他字符。例如，序列\b表示一个字的开头和结尾（字的边界），因此如果要表示正在
查找以字符th开头的字，就可以编写正则表达式\bth（即字边界是序列-t-h）。如果要搜索
所有以th结尾的单词，就可以编写th\b（字边界是序列t- 
h-）。但是，正则表达式要比这
复杂得多，包括可以在搜索操作中找到存储部分文本的工具性程序。本节仅简要介绍正则
表达式的功能。
  注意： 正则表达式的更多信息可参阅Andrew 
Watt撰写的图书Beginning
Regular Expressions （John Wiley & Sons,2005）。
假定应用程序需要把美国电话号码转换为国际格式。在美国，电话号码的格式为314-
123-1234，常常写作（314）123-1234。在把这个国家格式转换为国际格式时，必须在电
话号码的前面加上+1（美国的国家代码），并给区号加上圆括号：+1（314）123-1234。
在查找和替换时，这并不复杂。但如果要使用String类完成这个转换，就需要编写一些代
码（这表示必须使用System.String类的方法来编写代码）。而正则表达式语言可以构造一
个短的字符串来表达上述含义。
所以，本节只有一个非常简单的示例，我们只考虑如何查找字符串中的某些子字符
串，无须考虑如何修改它们。
10.3.2 RegularExpressionsPlayaround示例
本章的正则表达式示例使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
名称空间：
    System
    System.Text.RegularExpressions
    static System.Console
下面将开发一个小示例RegularExpressionsPlayaround，通过实现并显示一些搜索的结
果，说明正则表达式的一些功能，以及如何在C#中使用.NET正则表达式引擎。在这个示
例文档中使用的文本是本书前一版的部分简介（代码文件
RegularExpressionsPlayground/Program.cs）：
    const string input =
        @"This book is perfect for both experienced C# programmers looking to " +
        "sharpen their skills and professional developers who are using C# for " 
+
        "the first time. The authors deliver unparalleled coverage of " +
        "Visual Studio 2013 and .NET Framework 4.5.1 additions, as well as " +
        "new test-driven development and concurrent programming features. " +
        "Source code for all the examples are available for download, so you " +
        "can start writing Windows desktop, Windows Store apps, and ASP.NET " +
        "web applications immediately.";
  注意： 上面的代码说明了前缀为@符号的逐字字符串的实用性。这个前缀在
正则表达式中非常有用。
我们把这个文本称为输入字符串。为了说明.NET类的正则表达式，我们先进行一次
纯文本的基本搜索，这次搜索不带任何转义序列或正则表达式命令。假定要查找所有的字
符串ion，把这个搜索字符串称为模式。使用正则表达式和上面声明的变量Text，可编写
出下面的代码：
    public static void Find1(text)
    {
      const string pattern = "ion";
      MatchCollection matches = Regex.Matches(text, pattern,
                                RegexOptions.IgnoreCase |
                                RegexOptions.ExplicitCapture);
      foreach (Match nextMatch in matches)
      {
        WriteLine(nextMatch.Index);
      }
    }
在这段代码中，使用了System.Text.RegularExpressions名称空间中Regex类的静态方法
Matches（）。这个方法的参数是一些输入文本、一个模式和从RegexOptions枚举中提取
的一组可选标志。在本例中，指定所有的搜索都不应区分大小写。另一个标记
ExplicitCapture改变了收集匹配的方式，对于本例，这样可以使搜索的效率更高，其原因
详见后面的内容（尽管它还有这里没有探讨的其他用法）。Matches（）方法返回
MatchCollections对象的引用。匹配是一个技术术语，表示在表达式中查找模式实例的结
果，用System.Text.RegularExpressions.Match类来表示它。因此，我们返回一个包含所有
匹配的MatchCollection，每个匹配都用一个Match对象来表示。在上面的代码中，只是迭
代集合，并使用Match类的Index属性，Match类返回输入文本中匹配所在的索引。运行这
段代码将得到3个匹配。表10-3描述了RegexOptions枚举的一些成员。
表10-3
成员名
说明
CultureInvariant
指定忽略字符串的区域值
ExplicitCapture
修改收集匹配的方式，方法是确保把显式指定的匹配作为有
效的搜索结果
IgnoreCase
忽略输入字符串的大小写
IgnorePatternWhitespace
在字符串中删除未转义的空白，启用通过#符号指定的注释
Multiline
修改字符^和$，把它们应用于每一行的开头和结尾，而不仅
仅应用于整个字符串的开头和结尾
RightToLeft
从右到左地读取输入字符串，而不是默认地从左到右读取
（适合于一些亚洲语言或其他以这种方式读取的语言）
Singleline
指定句点的含义（.），它原来表示单行模式，现在改为匹
配每个字符
到目前为止，在前面的示例中，除了一些新的.NET基类外，其他都不是新的内容。
但正则表达式的能力主要取决于模式字符串，原因是模式字符串不必仅包含纯文本。如前
所述，它还可以包含元字符和转义序列，其中元字符是给出命令的特定字符，而转义序列
的工作方式与C#的转义序列相同。它们都是以反斜杠（\）开头的字符，且具有特殊的含
义。
例如，假定要查找以n开头的字，那么可以使用转义序列\b，它表示一个字的边界
（字的边界是以字母数字表中的某个字符开头，或者后面是一个空白字符或标点符号）。
可以编写如下代码：
    const string pattern = @"\bn";
    MatchCollection myMatches = Regex.Matches(input, pattern,
                                  RegexOptions.IgnoreCase |
                                  RegexOptions.ExplicitCapture);
注意字符串前面的符号@。要在运行时把\b传递给.NET正则表达式引擎，反斜杠
（\）不应被C#编译器解释为转义序列。如果要查找以序列ion结尾的字，就可以使用下面
的代码：
    const string pattern = @"ions\b";
如果要查找以字母a开头、以序列ion结尾的所有字（在本例中仅有一个匹配的字
application），就必须在上面的代码中添加一些内容。显然，我们需要一个以\ba开头、以
ion\b结尾的模式，但中间的内容怎么办？需要告诉应用程序，在a和ion中间的内容可以是
任意长度的字符，只要这些字符不是空白即可。实际上，正确的模式如下所示。
    const string pattern = @"\ba\S＊ions\b";
使用正则表达式要习惯的一点是，对像这样怪异的字符序列应见怪不怪。但这个序列
的工作是非常逻辑化的。转义序列\S表示任何不是空白字符的字符。*称为限定符，其含
义是前面的字符可以重复任意次，包括0次。序列\S*表示任意数量不是空白字符的字符。
因此，上面的模式匹配以a开头以ion结尾的任何单个单词。
表10-4是可以使用的一些主要的特定字符或转义序列，但这个表并不完整，完整的列
表请参考MSDN文档。
表10-4
符号