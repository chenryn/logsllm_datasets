assembler gcc (fence loads + ret) and optimized clang (fence loads +
indirect branch + ret vs. ret-only) for SPEC2017 on an Intel i9-9900K CPU.
virtual address null can be mitigated by marking the ﬁrst
enclave page as non-executable (cf. Section VI-C).
Intel furthermore developed an optimized LVI mitigation pass
for LLVM-based compilers. The pass operates at the LLVM
intermediate representation and uses a constraint solver from
integer programming to optimally insert lfence instructions
along all paths in the control-ﬂow graph from a load (P2) to
a transmission (P3) gadget [3, 34]. As the pass operates at
the LLVM intermediate representation, any additional loads
introduced by the x86 back-end are not mitigated. We expect
such implicit loads from e.g., registers that were previously
spilled onto the stack to be difﬁcult to exploit in practice,
but we leave further security evaluation of the mitigations as
future work. The pass also replaces indirect branches, and ret
instructions are eliminated in an additional machine pass using
a caller-save clobber register.
Figure 8 provides the OpenSSL evaluation for the Intel
mitigations (n = 10). The unoptimized gcc post-compilation
full mitigation assembly script for fencing all loads and ret
instructions clearly incurs the highest overheads from 352.51 %
to 1868.15 %, which is slightly worse than our own (incom-
plete) LLVM-based prototype. For the OpenSSL experiments,
Intel’s optimized clang LLVM mitigation pass for fencing
loads, conditional branches, and ret instructions generally
reduces overheads within the same order of magnitude, but
more signiﬁcantly in the AES case. Lastly, in line with our
own prototype evaluation, smaller overheads from 2.52 % to
86.23 % are expected for a partial mitigation strategy which
patches only ret instructions while leaving other loads and
indirect branches potentially exposed to LVI attackers.
Finally, to assess expected overheads in larger and more
varied applications, we evaluated Intel’s mitigations on the
SPEC2017 intspeed benchmark suite. Figure 9 provides
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:52 UTC from IEEE Xplore.  Restrictions apply. 
67
the results as executed on an isolated core on a i9-9900K
CPU, running Linux 4.18.0 with Ubuntu 18.10 (n = 3).2 One
clear trend is that Intel’s optimized LLVM mitigation pass
outperforms the naive post-compilation assembly script.
X. OUTLOOK AND FUTURE WORK
We believe that our work presents interesting opportunities
for developing more efﬁcient compiler mitigations and software
hardening techniques for current, widely deployed systems.
A. Implications for Transient-Execution Attacks and Defenses
LVI again illustrates the constant race between attackers and
defenders. With LVI, we introduced an advanced attack tech-
nique that bypasses existing software and hardware defenses.
While potentially harder to exploit than previous Meltdown-
type attacks, LVI shows that Meltdown-type incorrect transient
forwarding effects are not as easy to ﬁx as expected [10, 42, 72].
The main insight with LVI is that transient-execution attacks,
as well as side-channel attacks, have to be considered from two
viewpoints: observing and injecting data. It is not sufﬁcient
to only mitigate data leakage direction, as it was done so far,
and the injection angle also needs to be considered. Hence,
in addition to ﬂushing microarchitectural buffers on context
switch [25, 29], additional mitigations are required. We believe
that our work has a substantial inﬂuence on future transient-
execution attacks as new discoveries of Meltdown-type effects
now need to be studied in both directions.
Although the most realistic LVI attack scenarios are secure
enclaves such as Intel SGX, we demonstrated that none of the
ingredients for LVI are unique to SGX and other environments
can possibly be attacked similarly. We encourage future attack
research to further investigate improved LVI gadget discovery
and exploitation techniques in non-SGX settings, e.g., cross-
process and sandboxed environments [38, 44].
An important insight for silicon mitigations is that merely
zeroing out unintended data ﬂow is insufﬁcient to protect
against LVI adversaries. At the compiler level, we expect that
advanced static analysis techniques may further improve the
extensive performance overheads of current lfence-based
mitigations (cf. Section IX-B). Particularly, for non-control-
ﬂow hijacking gadgets, it would be desirable to serialize only
those loads that are closely followed by an exploitable P3
gadget for side-channel transmission.
B. Raising the Bar for LVI Exploitation
While not completely eliminated, our analysis in Section VI
and Appendix B revealed that the LVI attack surface may be
greatly reduced by certain system-level software measures in
non-SGX environments. For instance, the correct sanitization
of user-space pointers and the use of x86 SMAP and SMEP fea-
tures in commodity OS kernels may greatly reduce the possible
LVI gadget space. Furthermore, we found that certain software
mitigations, which were deployed to prevent Meltdown-type
data leakages, also unintentionally thwart their LVI counterparts,
2 Note that we had to exclude the 648.exchange2_s benchmark program
as it is written in Fortran and hence not supported by the mitigation tools.
68
e.g., eager FPU switching [57] and PTE inversion [12]. LVI
can also be inhibited by preventing victim loads from triggering
exceptions and microcode assists. However, this may come with
signiﬁcant changes in system software, as e.g., PTE accessed
and dirty bits must not be cleared anymore, and kernel pages
must not be swapped anymore. Although such changes are
possible for the OS, they are not possible for SGX, as the
attacker is in control of the page tables.
As described in Section IX-B, Intel SGX enclaves require
extensive compiler mitigations to fully defend against LVI.
However, we also advocate architectural changes in the SGX
design which may further help raising the bar for LVI
exploitation. LVI is for instance facilitated by the fact that SGX
enclaves share certain microarchitectural elements, such as the
cache, with their host application [13, 46, 52]. Furthermore,
enclaves can directly operate on untrusted memory locations
passed as pointers in the shared address space [55, 62]. As a
generic software hardening measure, we suggest that pointer
sanitization logic [62] further restricts the attacker’s control over
page offset address bits for unprotected input and output buffers.
To inhibit transient null-pointer dereferences in LVI-NULL
exploits, we propose that microcode marks the memory page
at virtual address zero as uncacheable [6, 54, 58]. Similarly,
LVI-L1D could be somewhat restricted by terminating the
enclave or disabling SGX altogether upon detecting a rogue
PPN in the EPCM microcode checks, which can only indicate
a malicious or buggy OS.
XI. CONCLUSION
We presented Load Value Injection (LVI), a novel class
of attack techniques allowing the direct injection of attacker
data into a victim’s transient data stream. LVI complements
the transient-execution research landscape by turning around
Meltdown-type data leakage into data injection. Our ﬁndings
challenge prior views that, unlike Spectre, Meltdown threats
could be eradicated straightforwardly at the operating system or
hardware levels and ultimately show that future Meltdown-type
attack research must also consider the injection angle.
Our proof-of-concept attacks against Intel SGX enclaves
and other environments show that LVI gadgets exist and may
be exploited. Existing Meltdown and Spectre defenses are
orthogonal to and do not impede our novel attack techniques,
such that LVI necessitates drastic changes at the compiler
level. Fully mitigating LVI requires including lfences after
possibly every memory load, as well as blacklisting indirect
jumps, including the ubiquitous x86 ret instruction. We
observe extensive slowdowns of factor 2 to 19 for our prototype
evaluation of this countermeasure. LVI demands research on
more efﬁcient and forward-looking mitigations on both the
hardware and software levels.
ACKNOWLEDGEMENTS
We thank the anonymous reviewers and our shepherd,
Weidong Cui, for helpful comments that helped improving
the paper. We also thank Intel PSIRT for providing us with
early access to mitigation prototypes.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:52 UTC from IEEE Xplore.  Restrictions apply. 
This research is partially funded by the Research Fund KU
Leuven, and by the Agency for Innovation and Entrepreneurship
(Flanders). Jo Van Bulck is supported by a grant of the
Research Foundation – Flanders (FWO). Daniel Moghimi
was supported by the National Science Foundation under
grants no. CNS-1814406. This work was also supported by
the Austrian Research Promotion Agency (FFG) via the K-
project DeSSnet, which is funded in the context of COMET –
Competence Centers for Excellent Technologies by BMVIT,
BMWFW, Styria and Carinthia. It has also received funding
from the European Research Council (ERC) under the European
Union’s Horizon 2020 research and innovation programme
(grant agreement No 681402). Additional funding was provided
by generous gifts from Intel, as well as by gifts from ARM and
AMD. It was also supported in part by an Australian Research
Council Discovery Early Career Researcher Award (project
number DE200101577) and by the Defense Advanced Research
Projects Agency (DARPA) under contract FA8750-19-C-0531.
REFERENCES
[1] O. Acıic¸mez, c. K. Koc¸, and J.-p. Seifert, “On the Power of Simple
Branch Prediction Analysis,” in AsiaCCS, 2007.
[2] AMD, “Speculation Behavior in AMD Micro-Architectures,” 2019.
[3] J. Bender, M. Lesani, and J. Palsberg, “Declarative fence insertion,” in
ACM SIGPLAN Notices, vol. 50, no. 10. ACM, 2015, pp. 367–385.
[4] A. Bhattacharyya, A. Sandulescu, M. Neugschwandtner, A. Sorniotti,
B. Falsaﬁ, M. Payer, and A. Kurmus, “SMoTherSpectre: exploiting
speculative execution through port contention,” in CCS, 2019.
[5] T. K. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang, “Jump-oriented
programming: a new class of code-reuse attack,” in AsiaCCS, 2011.
[6] D. D. Boggs, R. Segelken, M. Cornaby, N. Fortino, S. Chaudhry,
D. Khartikov, A. Mooley, N. Tuck, and G. Vreugdenhil, “Memory type
which is cacheable yet inaccessible by speculative instructions,” 2019,
uS Patent App. 16/022,274.
[7] F. Brasser, U. M¨uller, A. Dmitrienko, K. Kostiainen, S. Capkun, and
A.-R. Sadeghi, “Software Grand Exposure: SGX Cache Attacks Are
Practical,” in WOOT, 2017.
[8] Y. Bulygin, “Cpu side-channels vs. virtualization malware: The good,
the bad, or the ugly,” ToorCon, 2008.
[9] C. Canella, D. Genkin, L. Giner, D. Gruss, M. Lipp, M. Minkin,
D. Moghimi, F. Piessens, M. Schwarz, B. Sunar, J. Van Bulck, and
Y. Yarom, “Fallout: Leaking Data on Meltdown-resistant CPUs,” in CCS,
2019.
[10] C. Canella, J. Van Bulck, M. Schwarz, M. Lipp, B. von Berg, P. Ortner,
F. Piessens, D. Evtyushkin, and D. Gruss, “A Systematic Evaluation
of Transient Execution Attacks and Defenses,” in USENIX Security
Symposium, 2019.
[11] G. Chen, S. Chen, Y. Xiao, Y. Zhang, Z. Lin, and T. H. Lai, “SgxPectre
Attacks: Stealing Intel Secrets from SGX Enclaves via Speculative
Execution,” in EuroS&P, 2019.
[12] J. Corbet, “Meltdown strikes back: the L1 terminal fault vulnerability,”
2018. [Online]. Available: https://lwn.net/Articles/762570/
[13] V. Costan and S. Devadas, “Intel SGX Explained,” Cryptology ePrint
Archive, Report 2016/086, 2016.
[14] S. Dinesh, N. Burow, D. Xu, and M. Payer, “RetroWrite: Statically
Instrumenting COTS Binaries for Fuzzing and Sanitization,” in S&P,
2020.
[15] D. Evtyushkin, R. Riley, N. C. Abu-Ghazaleh, ECE, and D. Ponomarev,
“BranchScope: A New Side-Channel Attack on Directional Branch
Predictor,” in ASPLOS, 2018.
[16] Q. Ge, Y. Yarom, D. Cock, and G. Heiser, “A Survey of Microarchitectural
Timing Attacks and Countermeasures on Contemporary Hardware,”
Journal of Cryptographic Engineering, 2016.
[17] A. Glew, G. Hinton, and H. Akkary, “Method and apparatus for
performing page table walks in a microprocessor capable of processing
speculative instructions,” 1997, uS Patent 5,680,565.
[18] D. Gruss, D. Hansen, and B. Gregg, “Kernel Isolation: From an Academic
Idea to an Efﬁcient Patch for Every Computer,” USENIX ;login, 2018.
[19] D. Gruss, E. Kraft, T. Tiwari, M. Schwarz, A. Trachtenberg, J. Hennessey,
A. Ionescu, and A. Fogh, “Page Cache Attacks,” in CCS, 2019.
[20] D. Gruss, M. Lipp, M. Schwarz, R. Fellner, C. Maurice, and S. Mangard,
“KASLR is Dead: Long Live KASLR,” in ESSoS, 2017.
[21] S. Gueron, “Intel Advanced Encryption Standard (Intel AES) Instructions
Set – Rev 3.01,” 2012.
[22] M. D. Hill, J. Masters, P. Ranganathan, P. Turner, and J. L. Hennessy,
“On the Spectre and Meltdown Processor Security Vulnerabilities,” IEEE
Micro, vol. 39, no. 2, pp. 9–19, 2019.
[23] J. Horn, “speculative execution, variant 4: speculative store bypass,” 2018.
[24] T. Huo, X. Meng, W. Wang, C. Hao, P. Zhao, J. Zhai, and M. Li,
“Bluethunder: A 2-level directional predictor based side-channel attack
against sgx,” IACR Transactions on Cryptographic Hardware and
Embedded Systems, pp. 321–347, 2020.
[25] Intel, “Deep Dive: Intel Analysis of L1 Terminal Fault,” 2018.
[26] ——, “Intel Analysis of Speculative Execution Side Channels ,” 2018,
revision 4.0.
[27] ——, “Intel SGX Trusted Computing Base (TCB) Recovery,” 2018.
[Online]. Available: https://software.intel.com/sites/default/ﬁles/managed/
01/7b/Intel-SGX-Trusted-Computing-Base-Recovery.pdf
[28] ——, “Speculative Execution Side Channel Mitigations,” 2018, revision
3.0.
2019.
2019.
[29] ——, “Deep Dive: Intel Analysis of Microarchitectural Data Sampling,”
[30] ——, “Get Started with the SDK,” 2019.
[Online]. Available:
https://software.intel.com/en-us/sgx/sdk
[31] Intel, “Intel 64 and IA-32 Architectures Optimization Reference Manual,”
[32] Intel, “Intel 64 and IA-32 Architectures Software Developer’s Manual,
[33] ——, “Intel R(cid:3) Software Guard Extensions SSL,” 2019. [Online].
Volume 3 (3A, 3B & 3C): System Programming Guide,” 2019.
Available: https://github.com/intel/intel-sgx-ssl
[34] ——, “Load Value Injection,” 2020, white paper accompanying
Intel-SA-00334. [Online]. Available: https://software.intel.com/security-
software-guidance/
[35] S. Islam, A. Moghimi, I. Bruhns, M. Krebbel, B. Gulmezoglu, T. Eisen-
barth, and B. Sunar, “SPOILER: Speculative load hazards boost rowham-
mer and cache attacks,” in USENIX Security Symposium, 2019.
[36] Y. Kim, R. Daly, J. Kim, C. Fallin, J. H. Lee, D. Lee, C. Wilkerson,
K. Lai, and O. Mutlu, “Flipping bits in memory without accessing them:
An experimental study of DRAM disturbance errors,” in ISCA, 2014.
[37] V. Kiriansky and C. Waldspurger, “Speculative Buffer Overﬂows: Attacks
and Defenses,” arXiv:1807.03757, 2018.
[38] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Hamburg,
M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom, “Spectre
Attacks: Exploiting Speculative Execution,” in S&P, 2019.
[39] E. M. Koruyeh, K. Khasawneh, C. Song, and N. Abu-Ghazaleh, “Spectre
Returns! Speculation Attacks using the Return Stack Buffer,” in WOOT,
2018.
[40] S. Lee, M. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado, “Inferring
Fine-grained Control Flow Inside SGX Enclaves with Branch Shadowing,”
in USENIX Security Symposium, 2017.
[41] M. H. Lipasti, C. B. Wilkerson, and J. P. Shen, “Value locality and load
value prediction,” ACM SIGPLAN Notices, vol. 31, no. 9, pp. 138–147,
1996.
[42] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh,
J. Horn, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and M. Hamburg,
“Meltdown: Reading Kernel Memory from User Space,” in USENIX
Security Symposium, 2018.
[43] LLVM, “The LLVM Compiler Infrastructure,” 2019. [Online]. Available:
https://llvm.org
[44] G. Maisuradze and C. Rossow, “ret2spec: Speculative Execution Using
Return Stack Buffers,” in CCS, 2018.
[45] J. Masters, “Thoughts on NetSpectre,” 2018. [Online]. Available:
https://www.redhat.com/en/blog/thoughts-netspectre
[46] A. Moghimi, G. Irazoqui, and T. Eisenbarth, “Cachezoom: How SGX
ampliﬁes the power of cache attacks,” in CHES, 2017.
[47] K. Murdock, D. Oswald, F. D. Garcia, J. Van Bulck, D. Gruss, and
F. Piessens, “Plundervolt: Software-based Fault Injection Attacks against
Intel SGX,” in S&P, 2020.
[48] OpenSSL, “OpenSSL: The Open Source toolkit for SSL/TLS,” 2019.
[Online]. Available: http://www.openssl.org
[49] L. Orosa, R. Azevedo, and O. Mutlu, “AVPP: Address-ﬁrst value-next
predictor with value prefetching for improving the efﬁciency of load value
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:52 UTC from IEEE Xplore.  Restrictions apply. 
69
[50] M.
prediction,” ACM Transactions on Architecture and Code Optimization
(TACO), vol. 15, no. 4, p. 49, 2018.
“Pushing
Russinovich,
of Windows:
Paged
Avail-
able: https://blogs.technet.microsoft.com/markrussinovich/2009/03/10/
pushing-the-limits-of-windows-paged-and-nonpaged-pool/
Nonpaged
[Online].
Limits
Pool,”
2009.
and
the
[51] M. Schwarz, C. Canella, L. Giner, and D. Gruss, “Store-to-Leak For-
warding: Leaking Data on Meltdown-resistant CPUs,” arXiv:1905.05725,
2019.
[52] M. Schwarz, D. Gruss, S. Weiser, C. Maurice, and S. Mangard, “Malware
Guard Extension: Using SGX to Conceal Cache Attacks,” in DIMVA,
2017.
[53] M. Schwarz, M. Lipp, D. Moghimi, J. Van Bulck, J. Stecklina, T. Prescher,
and D. Gruss, “ZombieLoad: Cross-Privilege-Boundary Data Sampling,”
in CCS, 2019.
[54] M. Schwarz, R. Schilling, F. Kargl, M. Lipp, C. Canella, and D. Gruss,
“ConTExT: Leakage-Free Transient Execution,” arXiv:1905.09100, 2019.
[55] M. Schwarz, S. Weiser, and D. Gruss, “Practical Enclave Malware with
Intel SGX,” in DIMVA, 2019.
[56] H. Shacham, “The geometry of innocent ﬂesh on the bone: Return-into-
libc without function calls (on the x86),” in CCS, 2007.
[57] J. Stecklina and T. Prescher, “LazyFP: Leaking FPU Register State using
Microarchitectural Side-Channels,” arXiv:1806.07480, 2018.
[58] K. Sun, R. Branco, and K. Hu, “A New Memory Type Against Speculative
Side Channel Attacks,” 2019.
[59] A. Tang, S. Sethumadhavan, and S. Stolfo, “CLKSCREW: Exposing the
perils of security-oblivious energy management,” in USENIX Security
Symposium, 2017.
[60] P. Turner, “Retpoline: a software construct for preventing branch-target-
injection,” 2018.
[61] J. Van Bulck, M. Minkin, O. Weisse, D. Genkin, B. Kasikci, F. Piessens,
M. Silberstein, T. F. Wenisch, Y. Yarom, and R. Strackx, “Foreshadow:
Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-
Order Execution,” in USENIX Security Symposium, 2018.
[62] J. Van Bulck, D. Oswald, E. Marin, A. Aldoseri, F. Garcia, and F. Piessens,
“A tale of two worlds: Assessing the vulnerability of enclave shielding
runtimes,” in CCS, 2019.
[63] J. Van Bulck, F. Piessens, and R. Strackx, “SGX-Step: A Practical
Attack Framework for Precise Enclave Execution Control,” in Workshop
on System Software for Trusted Execution, 2017.
[64] ——, “Nemesis: Studying Microarchitectural Timing Leaks in Rudimen-
tary CPU Interrupt Logic,” in CCS, 2018.
[65] J. Van Bulck, N. Weichbrodt, R. Kapitza, F. Piessens, and R. Strackx,
“Telling your secrets without page faults: Stealthy page table-based attacks
on enclaved execution,” in USENIX Security Symposium, 2017.
[66] S. van Schaik, A. Milburn, S.
¨Osterlund, P. Frigo, G. Maisuradze,
K. Razavi, H. Bos, and C. Giuffrida, “Addendum to RIDL: Rogue
in-ﬂight data load,” 2019.
[67] ——, “RIDL: Rogue in-ﬂight data load,” in S&P, 2019.
[68] J. Wampler, I. Martiny, and E. Wustrow, “Exspectre: Hiding malware in
speculative execution.” in NDSS, 2019.
[69] K. Wang and M. Franklin, “Highly accurate data value prediction using
hybrid predictors,” in MICRO, 1997.
[70] O. Weisse, J. Van Bulck, M. Minkin, D. Genkin, B. Kasikci, F. Piessens,
M. Silberstein, R. Strackx, T. F. Wenisch, and Y. Yarom, “Foreshadow-
NG: Breaking the Virtual Memory Abstraction with Transient Out-of-
Order Execution,” 2018.
[71] Y. Xu, W. Cui, and M. Peinado, “Controlled-channel attacks: Determin-
istic side channels for untrusted operating systems,” in S&P, 2015.
[72] M. Yan, J. Choi, D. Skarlatos, A. Morrison, C. W. Fletcher, and
J. Torrellas, “InvisiSpec: Making Speculative Execution Invisible in
the Cache Hierarchy,” in MICRO, 2018.
APPENDIX A
INTEL SGX PAGE TABLE WALKS
For completeness, Figure 10 summarizes the additional
access control checks enforced by Intel SGX to verify the
outcome of the untrusted address translation process [13, 65].
70
Page
walk?
ok
Enclave
mode?
no
padrs in
PRM?
no