### Assembler and Compiler Mitigations for LVI on Intel i9-9900K CPU

We evaluated the effectiveness of different compiler mitigations for Load Value Injection (LVI) attacks on an Intel i9-9900K CPU using SPEC2017. Specifically, we compared GCC (with fence loads and return instructions) and optimized Clang (with fence loads, indirect branches, and return instructions). To mitigate the risk of a virtual address null attack, the first enclave page can be marked as non-executable (see Section VI-C).

Intel has developed an optimized LVI mitigation pass for LLVM-based compilers. This pass operates at the LLVM intermediate representation (IR) level and uses an integer programming constraint solver to optimally insert `lfence` instructions along all control-flow paths from a load (P2) to a transmission (P3) gadget [3, 34]. However, this pass does not mitigate additional loads introduced by the x86 back-end. While such implicit loads, such as those from registers spilled onto the stack, may be difficult to exploit, further security evaluation is needed. The pass also replaces indirect branches, and return instructions are eliminated in a separate machine pass using a caller-save clobber register.

### OpenSSL Evaluation

Figure 8 shows the OpenSSL evaluation results for the Intel mitigations (n = 10). The unoptimized GCC post-compilation full mitigation assembly script, which fences all loads and return instructions, incurs the highest overheads, ranging from 352.51% to 1868.15%. This is slightly worse than our own (incomplete) LLVM-based prototype. For the OpenSSL experiments, Intel’s optimized Clang LLVM mitigation pass, which fences loads, conditional branches, and return instructions, generally reduces overheads to a similar order of magnitude, with more significant reductions in the AES case. Smaller overheads, ranging from 2.52% to 86.23%, are expected for a partial mitigation strategy that only patches return instructions while leaving other loads and indirect branches potentially exposed to LVI attackers.

### SPEC2017 Evaluation

To assess the expected overheads in larger and more varied applications, we evaluated Intel’s mitigations on the SPEC2017 intspeed benchmark suite. Figure 9 provides the results, executed on an isolated core of an i9-9900K CPU running Linux 4.18.0 with Ubuntu 18.10 (n = 3). One clear trend is that Intel’s optimized LLVM mitigation pass outperforms the naive post-compilation assembly script.

### Outlook and Future Work

Our work highlights opportunities for developing more efficient compiler mitigations and software hardening techniques for current, widely deployed systems.

#### Implications for Transient-Execution Attacks and Defenses

LVI underscores the ongoing race between attackers and defenders. It introduces an advanced attack technique that bypasses existing software and hardware defenses. Although potentially harder to exploit than previous Meltdown-type attacks, LVI demonstrates that Meltdown-type incorrect transient forwarding effects are not as easily fixed as previously thought [10, 42, 72]. LVI emphasizes that both data observation and injection must be considered in transient-execution and side-channel attacks. Therefore, in addition to flushing microarchitectural buffers on context switches [25, 29], additional mitigations are required.

While the most realistic LVI attack scenarios involve secure enclaves like Intel SGX, our findings show that none of the LVI ingredients are unique to SGX. Other environments, such as cross-process and sandboxed settings, can also be attacked similarly [38, 44]. We encourage future research to investigate improved LVI gadget discovery and exploitation techniques in non-SGX settings.

At the silicon level, merely zeroing out unintended data flow is insufficient to protect against LVI adversaries. At the compiler level, advanced static analysis techniques may help reduce the extensive performance overheads of current `lfence`-based mitigations (see Section IX-B). For non-control-flow hijacking gadgets, it would be desirable to serialize only those loads closely followed by an exploitable P3 gadget for side-channel transmission.

#### Raising the Bar for LVI Exploitation

While not completely eliminated, certain system-level software measures can greatly reduce the LVI attack surface in non-SGX environments. For example, correct sanitization of user-space pointers and the use of x86 SMAP and SMEP features in commodity OS kernels can significantly reduce the possible LVI gadget space. Additionally, some software mitigations, deployed to prevent Meltdown-type data leakages, also unintentionally thwart their LVI counterparts [57, 12].

LVI can be inhibited by preventing victim loads from triggering exceptions and microcode assists. However, this may require significant changes in system software, such as not clearing PTE accessed and dirty bits and not swapping kernel pages. While these changes are possible for the OS, they are not feasible for SGX, where the attacker controls the page tables.

As described in Section IX-B, Intel SGX enclaves require extensive compiler mitigations to fully defend against LVI. We also advocate architectural changes in the SGX design to further raise the bar for LVI exploitation. For instance, LVI is facilitated by the fact that SGX enclaves share certain microarchitectural elements, such as the cache, with their host application [13, 46, 52]. Enclaves can directly operate on untrusted memory locations passed as pointers in the shared address space [55, 62]. As a generic software hardening measure, we suggest that pointer sanitization logic further restricts the attacker’s control over page offset address bits for unprotected input and output buffers. To inhibit transient null-pointer dereferences in LVI-NULL exploits, we propose that microcode marks the memory page at virtual address zero as uncacheable [6, 54, 58]. Similarly, LVI-L1D could be restricted by terminating the enclave or disabling SGX upon detecting a rogue PPN in the EPCM microcode checks, indicating a malicious or buggy OS.

### Conclusion

We presented Load Value Injection (LVI), a novel class of attack techniques that allow the direct injection of attacker data into a victim’s transient data stream. LVI complements the transient-execution research landscape by turning around Meltdown-type data leakage into data injection. Our findings challenge the prior view that Meltdown threats could be eradicated straightforwardly at the operating system or hardware levels, showing that future Meltdown-type attack research must also consider the injection angle.

Our proof-of-concept attacks against Intel SGX enclaves and other environments demonstrate that LVI gadgets exist and can be exploited. Existing Meltdown and Spectre defenses are orthogonal and do not impede our novel attack techniques, necessitating drastic changes at the compiler level. Fully mitigating LVI requires including `lfence` after every memory load and blacklisting indirect jumps, including the ubiquitous x86 `ret` instruction. Our prototype evaluation of this countermeasure observed extensive slowdowns of factors 2 to 19. LVI demands research on more efficient and forward-looking mitigations at both the hardware and software levels.

### Acknowledgements

We thank the anonymous reviewers and our shepherd, Weidong Cui, for their helpful comments. We also thank Intel PSIRT for providing early access to mitigation prototypes.

This research is partially funded by the Research Fund KU Leuven, the Agency for Innovation and Entrepreneurship (Flanders), the National Science Foundation, the Austrian Research Promotion Agency (FFG), the European Research Council (ERC), and generous gifts from Intel, ARM, and AMD. Additional funding was provided by the Australian Research Council and the Defense Advanced Research Projects Agency (DARPA).

### References

[References remain unchanged]