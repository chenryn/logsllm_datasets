s
e
r
o
C
i
f
o
s
e
c
n
a
h
C
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
0 1 2 4 8 16 32
0 1 2 4 8 16 32
GCE
EC2
Time lag between victim and attacker instances
(hours)
Figure 16: Chances of co-residency with varying delays be-
tween victim and attacker launches. Solid boxes correspond
to zero delay (simultaneous launches) and gauze-like boxes corre-
spond to 1 hour delay between victim and attacker launches. We
did not observe any co-resident instances for runs with zero delay
on EC2. All these results are from one data center region (EC2:
us-east, GCE: us-central1-a, Azure: East US). Results are over at
least 9 run per run conﬁguration with at least 3 run per time of day.
Delay Mean
S.D. Min Median Max
Success
0+
5 min
1 hr
0.6
1.38
3.57
1.07
0.92
2.59
0
0
0
0
1
3.5
3
3
9
rate
0.30
0.88
0.86
Figure 17: Distribution of number of co-resident pairs and suc-
cess rate or chances of co-residency for shorter delays under
20x20 run conﬁguration in EC2. A delay with 0+ means victim
and attacker instances were launched sequentially, i.e. attacker in-
stances were not launched until all victim instances were running.
The results averaged are over 9 runs with 3 runs per time of day.
(denoted by 0+) could result in co-residency.
The second observation shows that non-zero delay on
GCE and zero delay on Azure increases the chance of co-
residency and hence directly beneﬁts an attacker. It should
be noted that on Azure, the launch delays between victim
and attacker instances were longer than 1 hour due to our
leap-frog experimental methodology; the actual delays be-
tween the VM launches were, on average, 3 hours (with
a maximum delay of 10 hours for few runs). This higher
delay was more common in runs with larger number of
instances as there were signiﬁcantly more false positives,
which required a separate sequential phase to resolve (see
Section 4.2).
We also experimented with longer delays on EC2 and
GCE to understand whether and how quickly the chance
of co-residency drops with increasing delay (results shown
in Figure 18). Contrary to our expectation, we did not ﬁnd
the chance of co-residency to drop to zero even for delays as
high as 16 and 32 hours. We speculate that the reason for
this observation could be that system was under constant
churn where some neighboring VMs on the victim’s ma-
chine were terminated. Note that our leap-frog methodol-
ogy may, in theory, interfere with the VM placement. But it
is noteworthy that we observed increased number of unique
Figure 18: Chances of co-residency over long periods. Across
9 runs over two weeks with 3 runs per time of day. Note that we
only conducted 3 runs for 32 hour delay as opposed to 9 runs for
all other delays.
Chances of Co-residency
Cloud
Morning
02:00 - 10:00
Afternoon
10:00 - 18:00
Night
18:00 - 02:00
GCE
EC2
0.68
0.89
0.61
0.73
0.78
0.6
Figure 19: Effect of time of day. Chances of co-residency when
an attacker changes the launch time of his instances. The results
were aggregated across all run conﬁgurations with 1 hour delay
between victim and attacker launch times. All times are in PT.
co-resident pairs with increasing delays, suggesting fresh
co-residency with victim VMs over longer delays.
Effect of time of day. Prior works have shown that churn
or load is often correlated with the time of day [31]. Our
simple reference placement policy does not have a notion
of load and hence have no effect on time of day. In reality,
with limited number of servers in datacenters and limited
number of capacity per host, load on the system has direct
effect on the placement behavior of any placement policy.
As expected, we observe small effect on VM place-
ment based on the time of day when attacker instances are
launched (results shown in Figure 19). Speciﬁcally, there
is a slightly higher chance of co-residency if the attacker
instances are launched in the early morning for EC2 and at
night for GCE.
5.4 Effect of Data Center Location
All
the above experiments were conducted on rela-
tively popular regions in each cloud (especially true for
EC2 [31]). In this section, we report the results on other
smaller and less popular regions. As the regions are less
popular and have relatively fewer machines, we expect
higher co-residency rates and more co-resident instances.
Figure 20 shows the median number of co-resident VM
pairs placed in these regions alongside the results for pop-
ular regions. The distribution of number of co-resident in-
stances is not shown here in the interest of space.
The main observation from these experiments is that
924  24th USENIX Security Symposium 
USENIX Association
s
r
i
a
P
t
i
n
e
d
s
e
r
-
o
C
f
o
r
e
b
m
u
N
n
a
d
e
M
i
s
r
i
a
P
t
i
n
e
d
s
e
r
-
o
C
f
o
r
e
b
m
u
N
n
a
d
e
M
i
 10
 8
 6
 4
 2
 0
 8
 7
 6
 5
 4
 3
 2
 1
 0
1
1
1
2
2
3
1
1
1
2
2
3
0
0
0
0
0
0
0
0
0
0
0
0
x
x
x
x
x
x
x
x
x
x
x
x
1
2
3
2
3
3
1
2
3
2
3
3
0
0
0
0
0
0
0
0
0
0
0
0
us-central1-a
europe-west1-b
(a) GCE
1
1
1
2
2
3
1
1
1
2
2
3
0
0
0
0
0
0
0
0
0
0
0
0
x
x
x
x
x
x
x
x
x
x
x
x
1
2
3
2
3
3
1
2
3
2
3
3
0
0
0
0
0
0
0
0
0
0
0
0
us-east
us-west-1 (CA)
(b) EC2
Figure 20: Median number of co-resident pairs across two re-
gions. The box plot shows the median number of co-resident pairs
excluding co-residency within the same account. Results are over
at least 3 run per run conﬁguration (x-axis).
there is a higher chance of co-residency in these smaller
regions than the larger, more popular regions. Note that we
placed at least one co-resident pair in all the runs in these
regions. Also the higher number of co-resident pairs also
suggests a larger coverage over victim VMs in these smaller
regions.
One anomaly that we found during two 20x20 runs on
EC2 between 30th and 31st of January 2015, when we ob-
served an unusually large number of co-resident instances
(including three VMs from the same account). We believe
this anomaly may be a result of an internal management
incident in the Amazon EC2 us-west-1 region.
5.5 Other Observations
We report several other interesting observations in this sec-
tion. First, we found more than two VMs can be co-resident
on the same host on both Azure and GCE, but not on EC2.
Figure 21 shows the distribution of number of co-resident
instances per host. Particularly, in one of the runs, we
placed 16 VMs on a single host.
Another interesting observation is related to co-resident
instances from the same account. We term them as self-
co-resident instances. We observed many self-co-resident
pairs on GCE and Azure (not shown). On the other hand,
we never noticed any self co-resident pair on EC2 except
for the anomaly in us-west-1. Although we did not notice
y
c
n
e
u
q
e
r
F
 180
 160
 140
 120
 100
 80
 60
 40
 20
 0
169
74
24
6
2
3
4
5
5
6
2
7
1
1
10
16
Number of Coresident Instances per Host
Figure 21: Distribution of number of co-resident instances per
host on Azure. The results shown are across all the runs. We saw
at most 2 instances per host in EC2 and at most 3 instances per
host in GCE.
 250
)
s
e
t
 200
GCE
EC2
Azure
i
u
n
m
n
i
(
n
o
i
t
a
r
u
D
t
s
e
T
 150
 100
 50
 0
1
0
x
1
1
0
x
2
1
0
x
3
2
0
x
2
2
0
x
3
3
0
x
3
0