tiveRep approach, which sends each request to all service
instances for maximum reliability. Note that these two ap-
proaches only differ from our approach in the replica selec-
tion algorithm; that is, they use the same queuing algorithm,
selective retransmission, and server response time measure-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:18:58 UTC from IEEE Xplore.  Restrictions apply. 
 1
our approach
random
active rep
 0.8
 0.6
e
t
a
R
t
e
e
M
e
v
i
t
a
l
e
R
e
g
a
r
e
v
A
 0.4
 0.2
 0
 1  2
 4
 14
Number of Instances per Client Type
 10
 12
 6
 8
 16
Figure 8. Impact of replica selection
ments as our approach. We compared the AverageRelative-
MeetRate of all three approaches with increasing load; these
results are shown in ﬁgure 8. The x-axis in the ﬁgure indi-
cates the number of instances of each of the client types.
Each client instance in these tests sends 600 requests and
the response time for the ﬁrst 100 are ignored. Although the
AverageRelativeMeetRate decreases for all approaches, our
approach performs better than the other two approaches.
To evaluate the impact of request ordering, we com-
pare our approach to a FIFO approach, where the requests
are simply processed in arrival order, and a basic EDF ap-
proach, where requests are ordered based on their deadline
(cid:0)(cid:0). As before, everything else—including replica selection
and selective retransmission—remains the same. The exper-
iments use the same number of clients of each type. We
measured the MeetRate for each client type given the differ-
ent system loads. Figure 9 presents the results for the clients
with a .99 reliability requirement and deadline requirements
of 500 ms, 1000 ms, and 1500 ms; the graphs from left to
right are our approach based on (cid:0)(cid:1), the FIFO approach,
and the basic EDF approach. The results for different reli-
ability levels are generally similar. As expected, MeetRate
decreases as the system becomes more highly loaded, but
our approach generally performs better than either FIFO or
simple EDF. Overall, it provides a better MeetRate, but in
particular, it provides a much more uniform MeetRate for
the different client request types. Since the FIFO approach
does not factor in the deadline tightness and reliability un-
til a request is ready to be allocated to a speciﬁc service
queue, the requests with shorter deadlines (and higher reli-
ability requirements) get better service using our approach.
Similarly, the basic EDF approach does not allocate extra
time for retransmission nor does it allocate more time for
requests with stricter reliability requirements. These differ-
ences appear to have a considerable impact on the Meet-
Rate.
6. Related work
Proxy architectures are often used to allow wireless and
mobile devices to access the Internet and other services.
Proxies in these cases typically perform content transfor-
mations such as distillation [4, 5] to accommodate limited
resources in mobile devices and wireless access protocols.
They also often provide translation between the protocols
supported by the mobile devices and the access protocols
supported by the services [15, 16]. Recently, proxy-based
mobile service platforms have been proposed as a means for
accessing corporate services and applications through mo-
bile devices [2, 3, 13, 15]. While many of these platforms
address security issues [3, 13, 16], to our knowledge none
provide ﬁne-grain customization of other QoS attributes.
QoS research has generally focused on performance-
centric QoS metrics (delay, jitter, throughput) for multi-
media (voice, video) using resource reservation techniques.
Good examples of such efforts are comprehensive QoS ar-
chitectures such as QoS-A [1] and QoS Broker [12]. While
resource reservation is essential to ensure the QoS of mul-
timedia ﬂows, the fact that mobile service platforms must
handle individual requests from multiple sources to multi-
ple services, each with potentially different requirements,
makes it impossible to ensure QoS using resource alloca-
tion alone.
Our prior work on customizable QoS on CORBA and
Java RMI [6] is related to the QBox in the sense that both
use Cactus and address combinations of QoS attributes.
However, this prior work does not allow customization of
QoS at the request level; rather, the same QoS mechanisms
are applied to all messages in a session. Furthermore, this
work does not address multiplexing requests from multi-
ple users and devices to multiple different services in one
QoS component or multiple communication channels be-
tween the client and the server. Finally, this prior work did
not provide separation between policy and mechanisms.
The work in [9] provides some of the foundation for our
approach to dependability. This paper presents the ideas of
using online performance monitoring and dynamic replica
selection to meet a client’s timeliness and reliability require-
ments. However, while we perform the dependability en-
hancement in a gateway shared by many clients, in [9] each
client directly performs the response time monitoring and
replica selection. The fact that the gateway processes mul-
tiple requests concurrently gives us a greater ability to con-
trol the system’s overall behavior. Speciﬁcally, we can or-
der request processing to optimize resource usage and to in-
crease the probability of meeting requirements. We also im-
plement ﬂow control mechanisms to reduce the amount of
queuing at the servers and thus, keep the response time dis-
tribution as stable as possible. We also use a different replica
selection algorithm that ﬁnds the best, or tightest, ﬁt in or-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:18:58 UTC from IEEE Xplore.  Restrictions apply. 
Queuing with TA
FIFO queuing
EDF queuing
 1
 0.8
 1
 0.8
 1
 0.8
e
t
a
R
t
e
e
M
 0.6
 0.4
 0.2
 0
500ms
1000ms
1500ms
 1  2
 4
 6
 8
 10
 12
 14
Number of Instances per Client Type
e
t
a
R
t
e
e
M
 0.6
 0.4
e
t
a
R
t
e
e
M
 0.6
 0.4
 0.2
 0
 16
500ms
1000ms
1500ms
 1  2
 4
 14
Number of Instances per Client Type
 10
 12
 6
 8
 0.2
 0
 16
500ms
1000ms
1500ms
 1  2
 4
 14
Number of Instances per Client Type
 10
 12
 6
 8
 16
Figure 9. Impact of processing order for client types with .99 reliability
der to optimize the resource usage per request. Finally, we
combine the replicated execution in [9] with selective re-
transmission when feasible, resulting in the ability to pro-
cess more requests due to a lower resource utilization per
request.
7. Conclusions
This paper has presented a QoS architecture that sup-
ports customization of QoS properties for proxy-based mo-
bile service platforms such as iMobile. Using QBoxes and
qoslets, this architecture allows ﬁne-grain QoS customiza-
tion for individual requests rather than for ﬂows or sessions,
and provides a clear separation between policies and mech-
anisms. The architecture also makes it easy to change both
the policies and mechanisms. Our initial experimental re-
sults using iMobile suggest the potential of this approach.
Future research will focus on policy, including high-level
policy speciﬁcation languages, evaluation, and reconcilia-
tion [11], as well as issues related to mapping low-level pol-
icy attributes to mechanisms.
References
[1] A. Campbell, G. Coulson, and D. Hutchison. A quality of
service architecture. ACM SIGCOMM Computer Communi-
cation Review, 24(2):6–27, Apr 1994.
[2] Y.-F. Chen, H. Huang, R. Jana, T. Jim, M. Hiltunen,
R. Muthumanickam, S. John, S. Jora, and B. Wei.
iMobile
EE - an enterprise mobile service platform. ACM Journal on
Wireless Networks, 9(4), Jul 2003.
[3] F. Christensen and P. Saunders. Websphere everyplace ac-
cess: Making a quantum leap in mobile computing. Techni-
cal report, IBM Corporation, Apr 2003.
[4] A. Fox, S. Gribble, E. Brewer, and E. Amir. Adapting to net-
work and client variation via on-demand, dynamic distilla-
tion. In Proc. 7th ASPLOS Conference, Oct 1996.
[5] A. Fox, S. Gribble, Y. Chawathe, and E. Brewer. Adapting
to network and client variation using infrastructural proxies:
Lessons and perspectives. IEEE Personal Communications
Magazine, Aug 1998.
[6] J. He, M. Hiltunen, M. Rajagopalan, and R. Schlichting.
QoS customization in distributed object systems. Software–
Practice and Experience, (33):295–320, 2003.
[7] N. Hutchinson and L. Peterson. Design of x-kernel. In Proc.
SIGCOMM, pages 65–75, Aug 1988.
[8] J. Jin and K. Nahrstedt. Classiﬁcation and comparison of
QoS speciﬁcation languages for distributed multimedia ap-
plications. Technical Report UIUCDCS-R-2002-2302, Dept.
of Computer Science, Univ. of Illinois, Nov 2002.
[9] S. Krishnamurthy, W. Sanders, and M. Cukier. An adap-
tive quality of service aware middleware for replicated ser-
vices.
IEEE Trans. on Parallel and Distributed Systems,
14(11):1112–1125, Nov 2003.
[10] C. Liu and J. Layland. Scheduling algorithms for multipro-
gramming in a hard real time environment. Journal of the
ACM, 20(1):46–61, Jan 1973.
[11] P. McDaniel and A. Prakash. Methods and limitations of se-
curity policy reconciliation. In Proc. 2002 IEEE Symp. on
Security and Privacy, pages 73—87, May 2003.
[12] K. Nahrstedt and J. Smith. The QoS Broker. IEEE Multime-
dia, 2(1):53–67, 1995.
[13] Nokia Corporation. Nokia One — Mobile Connectivity Ser-
vice. http://www.nokia.com/nokiaone.
[14] T. Plagemann, B. Plattner, M. Vogt, and T. Walter. A model
for dynamic conﬁguration of light-weight protocols. In Proc.
IEEE 3rd Workshop on Future Trends of Distributed Systems,
pages 100–106, Apr 1992.
[15] H. Rao, Y.-F. Chen, D.-F. Chang, and M.-F. Chen. iMobile:
A proxy-based platform for mobile services.
In Proc. 1st
ACM Workshop on Wireless Mobile Internet (WMI 2001), Jul
2001.
[16] S. Ross, J. Hill, M. Chen, A. Joseph, D. Culler, and
E. Brewer. A composable framework for secure multi-modal
access to internet services from post-PC devices.
In Proc.
3rd IEEE Workshop on Mobile Computing Systems and Ap-
plications (WMCSA), Dec 2000.
[17] R. Schlichting and M. Hiltunen.
http://www.cs.arizona.edu/cactus/.
The Cactus project.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:18:58 UTC from IEEE Xplore.  Restrictions apply.