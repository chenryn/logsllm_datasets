### ActiveRep Approach and Comparison

The ActiveRep approach ensures maximum reliability by sending each request to all service instances. It is important to note that this approach, along with the random selection method, differs from our proposed approach only in the replica selection algorithm. All three approaches use the same queuing algorithm, selective retransmission, and server response time measurements.

#### Experimental Results

We compared the AverageRelativeMeetRate of our approach, the random selection, and the ActiveRep approach under increasing load conditions. The results are illustrated in Figure 8. The x-axis represents the number of instances for each client type. Each client instance sends 600 requests, and the response times for the first 100 requests are ignored. Although the AverageRelativeMeetRate decreases for all approaches as the load increases, our approach consistently outperforms the other two.

**Figure 8: Impact of Replica Selection on MeetRate**

|   | 1  | 2  | 4  | 6  | 8  | 10 | 12 | 14 | 16 |
|---|----|----|----|----|----|----|----|----|----|
| **Our Approach** | 1  | 0.8| 0.6| 0.4| 0.2| 0  | 0  | 0  | 0  |
| **Random**      | 1  | 0.8| 0.6| 0.4| 0.2| 0  | 0  | 0  | 0  |
| **Active Rep**  | 1  | 0.8| 0.6| 0.4| 0.2| 0  | 0  | 0  | 0  |

### Request Ordering Evaluation

To evaluate the impact of request ordering, we compared our approach with a First-In-First-Out (FIFO) approach, where requests are processed in arrival order, and a basic Earliest Deadline First (EDF) approach, where requests are ordered based on their deadlines. All other aspects, including replica selection and selective retransmission, remained the same. We measured the MeetRate for each client type under different system loads. Figure 9 presents the results for clients with a 0.99 reliability requirement and deadline requirements of 500 ms, 1000 ms, and 1500 ms. The graphs, from left to right, show our approach, the FIFO approach, and the basic EDF approach.

**Figure 9: Impact of Processing Order on MeetRate for Clients with 0.99 Reliability Requirement**

|   | 500ms | 1000ms | 1500ms |
|---|-------|--------|--------|
| **Our Approach** | 1  | 0.8| 0.6| 0.4| 0.2| 0  | 0  | 0  | 0  |
| **FIFO Queuing** | 1  | 0.8| 0.6| 0.4| 0.2| 0  | 0  | 0  | 0  |
| **EDF Queuing**  | 1  | 0.8| 0.6| 0.4| 0.2| 0  | 0  | 0  | 0  |

As expected, the MeetRate decreases as the system becomes more highly loaded. However, our approach generally performs better than both the FIFO and basic EDF approaches, providing a better and more uniform MeetRate across different client request types. The FIFO approach does not consider the deadline tightness or reliability until a request is ready to be allocated to a specific service queue, leading to better service for requests with shorter deadlines and higher reliability requirements using our approach. Similarly, the basic EDF approach does not allocate extra time for retransmission or stricter reliability requirements, which significantly impacts the MeetRate.

### Related Work

Proxy architectures are commonly used to enable wireless and mobile devices to access the Internet and other services. These proxies often perform content transformations such as distillation to accommodate limited resources in mobile devices and wireless access protocols. They also provide protocol translation between mobile devices and the services they access. Recently, proxy-based mobile service platforms have been proposed to allow access to corporate services and applications through mobile devices. While many of these platforms address security issues, none, to our knowledge, provide fine-grain customization of other Quality of Service (QoS) attributes.

QoS research has traditionally focused on performance-centric metrics like delay, jitter, and throughput for multimedia applications using resource reservation techniques. Examples include comprehensive QoS architectures such as QoS-A and QoS Broker. However, resource reservation alone is insufficient for ensuring QoS in mobile service platforms, which must handle individual requests from multiple sources to multiple services, each with potentially different requirements.

Our prior work on customizable QoS in CORBA and Java RMI is related to the QBox in that both use Cactus and address combinations of QoS attributes. However, this prior work does not allow customization at the request level and applies the same QoS mechanisms to all messages in a session. It also does not address multiplexing requests from multiple users and devices to multiple different services in one QoS component or multiple communication channels between the client and the server. Finally, this prior work did not provide separation between policy and mechanisms.

The work in [9] provides some foundational ideas for our approach to dependability, including online performance monitoring and dynamic replica selection. However, while we perform dependability enhancement in a shared gateway, [9] involves each client directly performing response time monitoring and replica selection. The shared gateway allows us to control the system's overall behavior by ordering request processing to optimize resource usage and increase the probability of meeting requirements. We also implement flow control mechanisms to reduce queuing at servers and maintain a stable response time distribution. Additionally, we use a different replica selection algorithm to find the best fit and combine replicated execution with selective retransmission when feasible, resulting in lower resource utilization per request.

### Conclusions

This paper presents a QoS architecture that supports customization of QoS properties for proxy-based mobile service platforms such as iMobile. Using QBoxes and qoslets, this architecture allows fine-grain QoS customization for individual requests rather than for flows or sessions and provides a clear separation between policies and mechanisms. Our initial experimental results using iMobile suggest the potential of this approach. Future research will focus on policy, including high-level policy specification languages, evaluation, and reconciliation, as well as mapping low-level policy attributes to mechanisms.

### References

[1] A. Campbell, G. Coulson, and D. Hutchison. A quality of service architecture. ACM SIGCOMM Computer Communication Review, 24(2):6–27, Apr 1994.

[2] Y.-F. Chen, H. Huang, R. Jana, T. Jim, M. Hiltunen, R. Muthumanickam, S. John, S. Jora, and B. Wei. iMobile EE - an enterprise mobile service platform. ACM Journal on Wireless Networks, 9(4), Jul 2003.

[3] F. Christensen and P. Saunders. Websphere everyplace access: Making a quantum leap in mobile computing. Technical report, IBM Corporation, Apr 2003.

[4] A. Fox, S. Gribble, E. Brewer, and E. Amir. Adapting to network and client variation via on-demand, dynamic distillation. In Proc. 7th ASPLOS Conference, Oct 1996.

[5] A. Fox, S. Gribble, Y. Chawathe, and E. Brewer. Adapting to network and client variation using infrastructural proxies: Lessons and perspectives. IEEE Personal Communications Magazine, Aug 1998.

[6] J. He, M. Hiltunen, M. Rajagopalan, and R. Schlichting. QoS customization in distributed object systems. Software–Practice and Experience, (33):295–320, 2003.

[7] N. Hutchinson and L. Peterson. Design of x-kernel. In Proc. SIGCOMM, pages 65–75, Aug 1988.

[8] J. Jin and K. Nahrstedt. Classification and comparison of QoS specification languages for distributed multimedia applications. Technical Report UIUCDCS-R-2002-2302, Dept. of Computer Science, Univ. of Illinois, Nov 2002.

[9] S. Krishnamurthy, W. Sanders, and M. Cukier. An adaptive quality of service aware middleware for replicated services. IEEE Trans. on Parallel and Distributed Systems, 14(11):1112–1125, Nov 2003.

[10] C. Liu and J. Layland. Scheduling algorithms for multiprogramming in a hard real-time environment. Journal of the ACM, 20(1):46–61, Jan 1973.

[11] P. McDaniel and A. Prakash. Methods and limitations of security policy reconciliation. In Proc. 2002 IEEE Symp. on Security and Privacy, pages 73—87, May 2003.

[12] K. Nahrstedt and J. Smith. The QoS Broker. IEEE Multimedia, 2(1):53–67, 1995.

[13] Nokia Corporation. Nokia One — Mobile Connectivity Service. http://www.nokia.com/nokiaone.

[14] T. Plagemann, B. Plattner, M. Vogt, and T. Walter. A model for dynamic configuration of light-weight protocols. In Proc. IEEE 3rd Workshop on Future Trends of Distributed Systems, pages 100–106, Apr 1992.

[15] H. Rao, Y.-F. Chen, D.-F. Chang, and M.-F. Chen. iMobile: A proxy-based platform for mobile services. In Proc. 1st ACM Workshop on Wireless Mobile Internet (WMI 2001), Jul 2001.

[16] S. Ross, J. Hill, M. Chen, A. Joseph, D. Culler, and E. Brewer. A composable framework for secure multi-modal access to internet services from post-PC devices. In Proc. 3rd IEEE Workshop on Mobile Computing Systems and Applications (WMCSA), Dec 2000.

[17] R. Schlichting and M. Hiltunen. The Cactus project. http://www.cs.arizona.edu/cactus/.

---

This optimized version of the text is more structured, coherent, and professional, making it easier to understand and follow.