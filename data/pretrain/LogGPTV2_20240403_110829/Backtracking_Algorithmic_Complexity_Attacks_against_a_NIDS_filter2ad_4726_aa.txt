title:Backtracking Algorithmic Complexity Attacks against a NIDS
author:Randy Smith and
Cristian Estan and
Somesh Jha
Backtracking Algorithmic Complexity Attacks Against a NIDS
Randy Smith Cristian Estan Somesh Jha
Computer Sciences Department
University of Wisconsin-Madison
{smithr,estan,jha}@cs.wisc.edu
Abstract
Network Intrusion Detection Systems (NIDS) have be-
come crucial to securing modern networks. To be effective,
a NIDS must be able to counter evasion attempts and oper-
ate at or near wire-speed. Failure to do so allows malicious
packets to slip through a NIDS undetected. In this paper, we
explore NIDS evasion through algorithmic complexity at-
tacks. We present a highly effective attack against the Snort
NIDS, and we provide a practical algorithmic solution that
successfully thwarts the attack. This attack exploits the be-
havior of rule matching, yielding inspection times that are
up to 1.5 million times slower than that of benign packets.
Our analysis shows that this attack is applicable to many
rules in Snort’s ruleset, rendering vulnerable the thousands
of networks protected by it. Our countermeasure conﬁnes
the inspection time to within one order of magnitude of be-
nign packets. Experimental results using a live system show
that an attacker needs only 4.0 kbps of bandwidth to perpet-
ually disable an unmodiﬁed NIDS, whereas all intrusions
are detected when our countermeasure is used.
1. Introduction
Network Intrusion Detection Systems (NIDS) and Intru-
sion Prevention Systems (IPS) have become crucial to se-
curing today’s networks. Typically, a NIDS residing on the
edge of a network performs deep packet inspection on every
packet that enters the protected domain. When a packet is
matched against a signature, an alert is raised, indicating an
attempted intrusion or other misuse.
To be effective in an online environment, packet inspec-
tion must be performed at or near wire speed. The con-
sequences of not doing so can be dire: an intrusion detec-
tion system that fails to perform packet inspection at the
required rate will allow packets to enter the network unde-
tected. Worse, an inline intrusion prevention system that
fails to keep up can cause excessive packet loss.
A NIDS must also guard against evasion attempts which
often succeed by exploiting ambiguities in a protocol def-
inition itself. For example, attack mechanisms have relied
on ambiguities in TCP to develop evasion techniques us-
ing overlapping IP fragments, TTL manipulation, and other
transformations [10, 15, 18].
In this paper, we explore NIDS evasion through the use
of algorithmic complexity attacks [9]. Given an algorithm
whose worst-case performance is signiﬁcantly worse than
its average case performance, an algorithmic complexity at-
tack occurs when an attacker is able to trigger worst-case
or near worst-case behavior. To mount evasion attempts in
NIDS, two attack vectors are required. The ﬁrst is the true
attack that targets a host inside the network. The second is
aimed squarely at the NIDS and serves as a cover by slow-
ing it down so that incoming packets (including the true at-
tack) are able to slip through undetected. Evasion is most
successful when the true attack enters the network, and nei-
ther it nor the second attack is detected by the NIDS.
We present an algorithmic complexity attack that ex-
ploits worst-case signature matching behavior in a NIDS.
By carefully constructing packet payloads, our attack forces
the signature matcher to repeatedly backtrack during in-
spection, yielding packet processing rates that are up to 1.5
million times slower than average. We term this type of
algorithmic complexity attack a backtracking attack. Our
experiments show that hundreds of intrusions can success-
fully enter the network undetected during the course of a
backtracking attack against a NIDS. Further, the backtrack-
ing attack itself requires very little bandwidth; i.e., a single
attack packet sent once every three seconds is enough to
perpetually disable a NIDS.
Our countermeasure to the backtracking attack is an al-
gorithmic, semantics-preserving enhancement to signature
matching based on the concept of memoization. The core
idea is straightforward: whereas the backtracking attack ex-
ploits the need of a signature matcher to evaluate signatures
at all successful string match offsets, a memoization table
can be used to store intermediate state that must otherwise
be recomputed. Our defense against the backtracking at-
tack relies on the use of better algorithms that reduce the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:31:51 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006disparity between worst and average case without changing
functionality. Empirical results show that this solution con-
ﬁnes the processing times of attack packets to within one
order of magnitude of benign packets.
Our result applies directly to Snort [17], a popular open-
source package that provides both NIDS and IPS function-
ality and claims more than 150,000 active users. Snort uses
a signature-based architecture in which each signature is
composed of a sequence of operations, such as string or
regular expression matching, that together identify a dis-
tinct misuse. In our experiments, we use Snort over both
traces and live trafﬁc. In addition, we provide a practical
implementation of the defense by extending Snort’s signa-
ture matching functionality directly.
In summary, our contributions are two-fold. First, we
discuss NIDS evasion through algorithmic complexity at-
tacks. We present a highly effective real attack, the back-
tracking attack, that yields slowdowns of up to six orders
of magnitude and is feasible against the (estimated) tens
of thousands of networks monitored by Snort. Second, we
present an algorithmic defense, based on the principle of
memoization, that conﬁnes the slowdown to less than one
order of magnitude in general and to less than a factor of
two in most cases. We provide a practical implementation
of this solution and show its efﬁcacy in a live setup.1
We organize the remainder of this paper as follows: Sec-
tion 2 provides a summary of related work, and Section 3
describes the rule-matching architecture of Snort. In Sec-
tions 4 and 5 we present the backtracking attack and the
countermeasure, respectively. Section 6 details our experi-
mental results, and Section 7 considers other types of com-
plexity attacks. Section 8 concludes.
2. Related work
To our knowledge, Crosby and Wallach [8, 9] were the
ﬁrst to provide an algorithmic basis for denial of service
attacks. They exploit weaknesses in hash function imple-
mentations and backtracking behavior in common regular
expression libraries to produce worst-case behavior that is
signiﬁcantly more expensive than the average case. The re-
sult is denial of service in general and evasion in our con-
text. For their examples, the authors observe that algorith-
mic attacks against hash tables and regular expressions can
be thwarted by better algorithm and data structure selec-
tions. Our defense also relies on algorithmic improvements.
The backtracking attack we present falls within the gene-
ral family of algorithmic attacks, although to the best of our
knowledge our method of achieving evasion through back-
tracking is novel.
1We have presented our ﬁndings to the Snort developers, who have con-
ﬁrmed the efﬁcacy of the evasion attack and have integrated the solution
into their NIDS.
In a systems-oriented approach to addressing resource
consumption and other attacks, Lee et al. [12] dynamically
divide the workload among multiple modules, making ad-
justments as necessary to maintain performance. Load-
shedding is performed as necessary to distribute the load
to different modules, or to lower its priority. Alternatively,
Kruegel et al. [11] have proposed achieving high speed in-
trusion detection by distributing the load across several sen-
sors, using a scatterer to distribute the load and slicers and
reassemblers to provide stateful detection. Still other ap-
proaches seek to provide better performance by splitting up
(and possibly replicating) a sensor onto multiple cores or
processors [6, 26]. These approaches show that allocating
more hardware can better protect large networks with large
amounts of trafﬁc, but they are not a cost effective way of
dealing with algorithmic complexity attacks.
The use of custom hardware has also been proposed for
performing high-speed matching [3,5,20,24,25]. The back-
tracking attack is probably not applicable to these solutions.
As our focus is on software-based systems, we do not con-
sider hardware solutions further in this paper.
Both [12] and [13] propose the use of monitors to track
the resource usage and performance history of a NIDS.
In [12], if a monitor discovers abnormally long process-
ing times, the current operations are aborted and optionally
transferred to a lower priority process. For [13], on the other
hand, the monitor simply triggers a restart of the NIDS.
In the general case, such techniques may provide a useful
mechanism for ensuring guaranteed minimum performance
rates at the cost of decreased detection accuracy. However,
such mechanisms result in periodic lapses in detection ca-
pability. Our solution is semantics-preserving, in the sense
that it does not sacriﬁce detection to maintain performance.
Finally, NIDS evasion has been extensively studied in
the literature. The earliest work describing evasion was
presented by Paxson [13] and Ptacek and Newsham [15].
Handley et al. [10] show that normalization combined with
stateful analysis to remove protocol ambiguities can foil
evasion attempts, although it may affect stream semantics.
Shankar and Paxson [19] address semantics by providing
an online database of network attributes, such as the hop
count from the NIDS to a protected host, that provides the
same beneﬁts as normalization without the risk of chang-
ing stream semantics. These solutions are orthogonal to the
problem discussed in this paper.
3. Rule matching in Snort
Our work is performed in the context of the Snort NIDS.
Snort employs a signature-based approach to intrusion de-
tection, deﬁning distinct signatures, or rules, for each mis-
use to be searched for. Each signature is in turn composed
of a sequence of predicates, that describe the operations that
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:31:51 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Description
Predicate
content: Searches for occurrence of  in payload
pcre:/regex/
byte test
byte jump
Matches regular expression /regex/ against payload
Performs bitwise or logical tests on speciﬁed payload bytes
Jumps to an offset speciﬁed by given payload bytes
Type
multiple-match
multiple-match
single-match
single-match
Table 1. Subset of Snort predicates used for packet inspection. Multiple-match predicates may need
to be applied to a packet several times.
alert tcp $EXT NET any -> $HOME NET 99
(msg:"AudioPlayer jukebox exploit";
content:"fmt=";
pcre:"/ˆ(mp3|ogg)/",relative;
content:"player=";
pcre:"/.exe|.com/",relative;
content:"overflow",relative;
sid:5678)
//P1
//P2
//P3
//P4
//P5
Figure 1. Rule with simpliﬁed Snort syntax
describing a ﬁctional vulnerability.
the signature must perform. Section 3.1 gives an overview
of the language used to specify these rules. Section 3.2 de-
scribes the algorithm used to match rules against packets.
3.1. Expressing rules in Snort
Snort’s rules are composed of a header and a body. The
header speciﬁes the ports and IP addresses to which the rule
should apply and is used during the classiﬁcation stage. The
body has a sequence of predicates that express conditions
that need to succeed for the rule to match. A rule matches a
packet only if all predicates evaluated in sequence succeed.
Of the predicates that are part of Snort’s rule language, we
focus on those used to analyze the packet payloads. Table 1
summarizes the relevant rules.
Figure 1 depicts a signature using a simpliﬁed version of
Snort’s rule language. The header of the rule instructs Snort
to match this signature against all TCP trafﬁc from external
sources to servers in the home network running on port 99.
The body of the rule contains three content predicates,
two pcre [14] predicates, and two terms, msg and sid,
used for notiﬁcation and bookkeeping. The rule matches
packets that contain the string fmt= followed immediately
by mp3 or ogg, and also contain the string player=, fol-
lowed by .exe or .com, followed by overflow.
Predicates have one important side effect: during rule
matching a predicate records the position in the payload at
which it succeeded. Further, when a predicate contains a
relative modiﬁer, that predicate inspects the packet be-
ginning at the position at which the previous predicate suc-
ceeded, rather than the start of the payload. For example,
if predicate P3 from Figure 1 ﬁnds the string player=
at offset i in the payload, the subsequent pcre predicate
(P4) succeeds only if it matches the packet payload after
position i.
3.2. Matching signatures
When matching a rule against a packet, Snort evalu-
ates the predicates in the order they are presented in the
rule, and concludes that the packet does not match the
rule when it reaches a predicate that fails. To ensure cor-
rectness, Snort potentially needs to consider all payload
offsets at which content or pcre predicates can suc-
ceed. We term these multiple-match predicates.
In con-
trast, predicates byte test and byte jump are single-
match, meaning that any distinct predicate invocation eval-
uates the payload once.
In the presence of a multiple-match predicate P, Snort
must also retry all subsequent predicates that either directly
or indirectly depend on the match position of P. For ex-
ample, consider matching the rule in Figure 1 against the
payload in Figure 2. The caret (ˆ) in P2 indicates that P2
must ﬁnd a match in the payload immediately after the pre-
vious predicate’s match position.
If Snort considers only
P1’s ﬁrst match at offset 4, then P2 will fail since P2 is
looking for mp3 or ogg but ﬁnds aac instead. However,
if Snort also considers P1’s second match at offset 28, P2
will succeed and further predicates from the rule will be
evaluated. Snort explores possible matches by backtracking
until either it ﬁnds a set of matches for all predicates or it
determines that such a set does not exist.
Figure 3 presents a simpliﬁed version of the algorithm
used by Snort to match rules against packets.2 All predi-
cates support three operations. When a predicate is evalu-
ated, the algorithm calls getNewInstance to do the re-
quired initializations. The previous match’s offset is passed
to this function. The getNextMatch function checks
whether the predicate can be satisﬁed, and it sets the offset
of the match returned by calls to the getMatchOffset
predicate. Further invocations of getNextMatch return
true as long as more matches are found. For each of these
matches, all subsequent predicates are re-evaluated, be-
cause their outcome can depend on the offset of the match.
The rule matching stops when the last predicate succeeds,
or when all possible matches of the predicates have been ex-
plored. Figure 2 shows the stack at each stage of the algo-
2The Snort implementation uses tail calls and loops to link predicate
functions together and to perform the functionality described in Figure 3.
The algorithm presented here describes the behavior that is distributed
throughout these functions.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:31:51 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Payload
Offset
fmt=aac player=play 000 fmt=mp3 rate=14kbps player=cmd.exe?overflow
01234567890123456789012345678901234567890123456789012345678901234567
1
2
3
4
5
6
(P2, 4, f)
(P1, 0, 4) (P1, 0, 4)
(P1, 0,28)
(P2,28,31)
(P1, 0,28)
(P3,31,51)
(P2,28,31)
(P1, 0,28)
(P4,51,59)
(P3,31,51)
(P2,28,31)
(P1, 0,28)
(P5,59,67)
(P4,51,59)
(P3,31,51)
(P2,28,31)
(P1, 0,28)
Figure 2. Packet payload matching the rule in Figure 1 and corresponding stack trace after each call
to getNextMatch on line 3 of Figure 3.
1
2
3
4
5
6
7
MatchRule(P reds):
Stack ← (P reds[0].getNewInstance(0));
while Stack.size > 0 do
if Stack.top.getNextMatch() then
if Stack.size == P reds.size then return T rue;
ofst ← Stack .top.getMatchOffset();
Push(Stack, P reds[Stack.size].getNewInstance(ofst));
else Pop(Stack);
return F alse;
8
Figure 3. Rule matching in Snort. The algo-
rithm returns T rue only if all predicates suc-
ceed.
rithm. Each stack record contains three elements: the pred-
icate identiﬁer, the offset passed to getNewInstance
at record creation, and the offset of the match found by
getNextMatch (f if no match is found). In this exam-
ple, the algorithm concludes that the rule matches.
4. NIDS evasion via backtracking
The use of backtracking to cover all possible string or
regular expression matches exposes a matching algorithm
to severe denial of service attacks. By carefully crafting
packets sent to a host on a network that the NIDS is mon-
itoring, an attacker can trigger worst-case backtracking be-
havior that forces a NIDS to spend seconds trying to match
the targeted rule against the packet before eventually con-
cluding that the packet does not match. For the rule from
Figure 1, P2 will be evaluated for every occurrence of the
string fmt= in the packet payload. Furthermore, when-
ever this string is followed by mp3, P2 will succeed and
the matcher will evaluate P3, and if P3 succeeds it will
evaluate P4. If fmt=mp3 appears n1 times, P3 is evalu-
ated n1 times. If there are n2 occurrences of player=, P4
will be evaluated n2 times for each evaluation of P3, which
gives us a total of n1 · n2 evaluations for P4. Similarly, if
these occurrences are followed by n3 repetitions of .exe
or .com, P5 is evaluated n1 · n2 · n3 times. Figure 4 shows
a packet that has n1 = n2 = n3 = 3 repetitions. Figure 5
shows the evaluation tree representing the predicates eval-
uated by the algorithm as it explores all possible matches
when matching Figure 1 against the payloads in Figure 2
and in Figure 4. Our experiments show that with packets
constructed in this manner, it is possible to force the algo-
rithm to evaluate some predicates hundreds of millions of
times while matching a single rule against a single packet.
The amount of processing a backtracking attack can
cause depends strongly on the rule. Let n be the size of
a packet in bytes. If the rule has k unconstrained multiple-
match predicates that perform O(n) work in the worst case,
an attacker can force a rule-matching algorithm to perform
O(nk) work. Thus the following three factors determine the
power of a backtracking attack against a rule.
1. The number of backtracking-causing multiple-match
content and pcre predicates k. The rule from
Figure 1 has k = 4 because it has 4 backtracking-causing
multiple-match predicates (including P5 which does not
match the attack packet, but still needs to traverse the
packet before failing). Note that not all contents and
pcres can be used to trigger excessive backtracking.
Often, predicates that have constraints on the positions
they match cannot be used by an attacker to cause back-
tracking. An example of such a predicate is the ﬁrst
pcre from Figure 1, predicate P2, which has to match
immediately after the ﬁrst content.
2. The size of the attack packets n. We can use Snort’s re-
assembly module to amplify the effect of backtracking
attacks beyond that of a single maximum sized packet.
The rule from Figure 1 is open to attacks of complexity
O(n4). When Snort combines two attack packets into a
virtual packet and feeds it to the rule-matching engine, n
doubles, and the rule-matcher does 16 times more work
than for either packet alone.
3. The total length of the strings needed to match the k
predicates. If these strings are short, the attacker can re-
peat them many times in a single packet. This inﬂuences
the constants hidden by the O-notation. Let s1,. . . ,sk be
the lengths of the strings that can cause matches for the
k predicates. If we make their contribution to the pro-
cessing time explicit we can compute for each string the