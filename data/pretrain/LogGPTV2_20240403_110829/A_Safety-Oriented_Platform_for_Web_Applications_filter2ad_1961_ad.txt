### Table 2: Vulnerabilities
| Category | Percentage (Number of Vulnerabilities) |
| --- | --- |
| Improper Labeling | 86% (25 of 29) |
| Interface Spoofing | 33% (4 of 12) |
| Other | 100% (11 of 11) |
| Total | 87% (95 of 109) |

**Improper Labeling**
- **Description**: By subverting DNS, an attacker can trick a browser into sending cached credentials to an IP address of the attacker’s choosing.
- **Tahoma Mitigation**: In Tahoma, web services explicitly declare the scope of their web application through manifests, ensuring correct labeling and reducing the risk of such attacks.

**Interface Spoofing**
- **Description**: Web content can override Mozilla’s user interface, allowing attackers to spoof interface elements or remote sites.
- **Tahoma Mitigation**: The Tahoma window manager decorates browser instances with labeled borders that cannot be accessed or occluded, thereby mitigating spoofing attacks.

**Other**
- **Description**: Though instructed by the user not to do so, Mozilla stores a password on disk.
- **Tahoma Mitigation**: This category includes vulnerabilities that do not fit neatly into other categories. Tahoma's isolation mechanisms help contain these issues within individual browser instances.

### Analysis of Mozilla Vulnerabilities
We examined each of the 109 Mozilla vulnerabilities to determine whether Tahoma successfully contains or eliminates the threat within the affected browser instance, or whether the attacker can use the vulnerability to harm external resources or web applications. Table 2 shows the results of our analysis, broken down by vulnerability categories. For example, we list one specific attack for each category. The table indicates that Tahoma successfully contains or eliminates 95 of the 109 listed Mozilla vulnerabilities (87%). Many of these vulnerabilities are browser implementation flaws that allow a remote attacker to inject code, extract files from the user’s machine, or otherwise subvert the browser’s security mechanisms. Although Tahoma does not directly fix these vulnerabilities, its isolated virtual machines contain the damage to a single browser instance and its application, preserving the integrity of the user’s resources, the host operating system, and other browser instances.

**Example: SSL Certificate Management Attack**
A good example of a contained vulnerability is an attack on Mozilla’s SSL certificate management functions. An attacker could deliver a malicious email certificate to Mozilla that masks a built-in certificate-authority certificate, permanently blocking SSL connections to valid sites. Under Tahoma, this attack would succeed on a susceptible browser instance but would be contained to that instance.

### Performance Analysis
Our analysis of Mozilla vulnerabilities demonstrates that Tahoma can increase safety and security for web browsing. However, there is typically a tradeoff between safety and performance. Given Tahoma’s use of VMs for isolation, what is the cost of virtualization to the user and to the web application?

#### 4.2.1 The Cost of Virtual Machine Creation
Although the optimization of virtual machine performance is well studied, virtualization still has a cost. Specifically, the Tahoma implementation frequently creates (or forks) a virtual machine to execute a new browser instance. Forks occur whenever the user enters the URL of a new web application. Therefore, we measured the impact of VM fork overhead on Tahoma users.

**Figure 7: Browser Fork Latency**
- **Operation**: Average Latency
- **Specialize a Pre-forked Browser Instance**: 1.06 seconds
- **Clone a New VM, Boot Guest OS, Launch Browser Program**: 9.26 seconds
- **Load URL in Running Konqueror**: 0.84 seconds
- **Warm-Start Konqueror**: 1.32 seconds
- **Cold-Start Konqueror**: 5.74 seconds

**Comparison with Native Linux**
- **Best Case (Running Konqueror)**: 0.84 seconds
- **Warm-Start Konqueror**: 1.32 seconds
- **Cold-Start Konqueror**: 5.74 seconds

The best case latency with Konqueror on native Linux, 0.84 seconds for an already executing browser, is only slightly better than the time to launch a pre-forked Tahoma VM. A warm-start of Konqueror is slightly worse than the pre-fork operation. The latency for a Konqueror cold start on native Linux is 5.7 seconds, 60% of the latency of a full VM clone and OS boot on Tahoma. Both the cold-start and full-clone latencies are relatively long and could be reduced through optimization.

#### 4.2.2 Network Performance
From the user’s perspective, there are two key network-related performance metrics: the latency of fetching a web page and the achieved throughput when fetching a large object. On Tahoma, all browser network communications flow through the Xen Domain0 VM, where they are filtered by tinyproxy according to the network policy. We measured the latency and bandwidth overhead of this additional indirection and filtering.

**Figure 8: Web Object Download Latency (LAN)**
- **Object Size**: 1KB, 10KB, 128KB, 1MB
- **Concurrent Browser Instances**: 1 to 8
- **Latency for 10KB Object (Single Instance)**: 3.6 ms
- **Latency for 10KB Object (Eight Instances)**: 20.1 ms
- **Latency for 1MB Object (Single Instance)**: 57 ms
- **Latency for 1MB Object (Eight Instances)**: 444 ms

These results are encouraging, as the latency is well below the 625 ms response-time threshold for users to operate in an optimal “automatic response” mode. For large web pages (1MB), the single-instance latency was 57 ms; at eight concurrent instances, the latency grew to 444 ms.

**Table 3: Long-Lived TCP Throughput**
- **Scenario**: Direct from Domain 0, Tahoma (Domain 1, Routed through Domain 0), Tahoma (Domain 1, Proxied through Domain 0), Native Linux (Direct), Native Linux (Through a Local Proxy)
- **TCP Throughput**:
  - **Direct from Domain 0**: 911 Mb/s
  - **Tahoma (Routed through Domain 0)**: 638 Mb/s
  - **Tahoma (Proxied through Domain 0)**: 637 Mb/s
  - **Native Linux (Direct)**: 840 Mb/s
  - **Native Linux (Through a Local Proxy)**: 556 Mb/s

High-bandwidth TCP connections are sensitive to small parameter changes. From Table 3, we can isolate the costs of indirection and proxying in Tahoma. Routing communications through Domain0 from another VM reduces throughput by 30%, to 638 Mb/s. The additional cost of the tinyproxy filtering is almost negligible at that point. Tahoma’s throughput, even when filtered through a proxy in the Domain0 VM, is high enough to support the vast majority of web browsing workloads.

#### 4.2.3 User Interface Performance
To measure the performance of the Tahoma window manager, we ran a variable number of virtual machines, each containing an MPlayer browser instance, which we consider a “worst case” test. Each MPlayer application rendered a 512x304 pixel DIVX/AVI video at 25 frames per second. We increased the number of browser instances until MPlayer reported that it could no longer sustain this frame rate.

**Table 4: Graphics Throughput**
- **Display System**: Tahoma Graphics, (Networked) X11, (Shared-Memory) X11
- **Unit of Execution**: VM, VM, Process
- **# Sustained MPlayers**:
  - **Tahoma Graphics**: 12
  - **(Networked) X11**: 1
  - **(Shared-Memory) X11**: 20

Tahoma’s window manager can sustain 12 MPlayer instances simultaneously, achieving an order of magnitude better performance than X11 across VMs. Native Linux with shared-memory X11 improves on Tahoma by 70% (20 sustained instances), but it lacks Tahoma’s isolation benefits. Tahoma’s ability to support 12 simultaneous video players indicates that multiplexing windows from multiple VMs should not pose a visible performance problem for Tahoma users.

**Input Performance**
To measure Tahoma’s input performance, we recorded the delay between the time a user presses a key and the time the corresponding character is rendered by a Konqueror browser instance. In the simple case of a single Konqueror browser instance, the input echo time was under 1 ms. With 10 MPlayer browser instances running 10 video streams concurrently, the Konqueror echo time remained below 12 ms, still imperceptibly small to the user.

### Summary
This section examined the safety, effectiveness, and performance of the Tahoma implementation. We used a list of 109 security vulnerabilities in the Mozilla browser to evaluate Tahoma’s effectiveness at containing threats. Our analysis shows that Tahoma can contain or eliminate 87% of the vulnerabilities discovered in Mozilla. Next, we ran benchmarks to quantify the performance cost of Tahoma’s VM-based isolation mechanism. Our benchmarks demonstrate that despite virtualization, indirection, and proxying, Tahoma can achieve the latency, throughput, and responsiveness characteristics demanded by the vast majority of browsing applications.

### Related Work
Tahoma is a composite of architectural elements that isolate web applications and provide users with a safer experience. Several of Tahoma’s architectural components have been explored in various forms in the past, as has the general topic of improving web security. We discuss this related work in the following sections.