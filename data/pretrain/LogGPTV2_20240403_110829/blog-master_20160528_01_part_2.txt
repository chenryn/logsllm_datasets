含右页的例子, index page 1        
第一条为右链表的第一条item, 第二条才是起始item          
```      
postgres=# select * from bt_page_items('tab1_pkey',1);      
 itemoffset |  ctid   | itemlen | nulls | vars |          data                 
------------+---------+---------+-------+------+-------------------------      
          1 | (3,7)   |      16 | f     | f    | 6f 01 00 00 00 00 00 00      
          2 | (0,1)   |      16 | f     | f    | 01 00 00 00 00 00 00 00      
          3 | (0,2)   |      16 | f     | f    | 02 00 00 00 00 00 00 00      
...      
        367 | (3,6)   |      16 | f     | f    | 6e 01 00 00 00 00 00 00      
(367 rows)      
```      
不含右页的例子, index page 4        
第一条就是起始ctid (即items)        
```      
postgres=# select * from bt_page_items('tab1_pkey',4);      
 itemoffset |  ctid   | itemlen | nulls | vars |          data                 
------------+---------+---------+-------+------+-------------------------      
          1 | (6,13)  |      16 | f     | f    | dd 02 00 00 00 00 00 00      
          2 | (6,14)  |      16 | f     | f    | de 02 00 00 00 00 00 00      
...      
        268 | (8,40)  |      16 | f     | f    | e8 03 00 00 00 00 00 00      
(268 rows)      
```      
根据ctid 查看heap记录        
```      
postgres=#              select * from tab1 where ctid='(0,1)';      
 id |               info                     
----+----------------------------------      
  1 | 6ebc6b77aebf5dd11621a2ed846c08c4      
(1 row)      
```      
3\.         
记录数超过1层结构的索引可以存储的记录数时，会分裂为2层结构，除了meta page和root page，还可能包含1层branch page以及1层leaf page。        
如果是边界页(branch or leaf)，那么其中一个方向没有PAGE，这个方向的链表信息都统一指向meta page。         
![3](20160528_01_pic_004.png)      
例子        
```      
create table tbl1(id int primary key, info text);        
postgres=# select 285^2;      
 ?column?       
----------      
    81225      
(1 row)      
postgres=# insert into tab2 select trunc(random()*10000000), md5(random()::text) from generate_series(1,1000000) on conflict on constraint tab2_pkey do nothing;      
INSERT 0 951379      
postgres=# vacuum analyze tab2;      
VACUUM      
```      
查看meta page，可以看到root page id = 412, 索引的level=2，即包括1级 branch 和 1级 leaf。        
```      
postgres=# select * from bt_metap('tab2_pkey');      
 magic  | version | root | level | fastroot | fastlevel       
--------+---------+------+-------+----------+-----------      
 340322 |       2 |  412 |     2 |      412 |         2      
(1 row)      
```      
根据root page id  查看root page的stats        
btpo = 2 当前在第二层，另外还表示下层是1          
btpo_flags = 2 说明是root page        
```      
postgres=# select * from bt_page_stats('tab2_pkey', 412);      
 blkno | type | live_items | dead_items | avg_item_size | page_size | free_size | btpo_prev | btpo_next | btpo | btpo_flags       
-------+------+------------+------------+---------------+-----------+-----------+-----------+-----------+------+------------      
   412 | r    |         11 |          0 |            15 |      8192 |      7936 |         0 |         0 |    2 |          2      
(1 row)      
```      
查看root page存储的  branch page items (指向branch page)        
```      
postgres=# select * from bt_page_items('tab2_pkey', 412);      
 itemoffset |   ctid   | itemlen | nulls | vars |          data                 
------------+----------+---------+-------+------+-------------------------      
          1 | (3,1)    |       8 | f     | f    |       
          2 | (2577,1) |      16 | f     | f    | e1 78 0b 00 00 00 00 00      
          3 | (1210,1) |      16 | f     | f    | ec 3a 18 00 00 00 00 00      
          4 | (2316,1) |      16 | f     | f    | de 09 25 00 00 00 00 00      
          5 | (574,1)  |      16 | f     | f    | aa e8 33 00 00 00 00 00      
          6 | (2278,1) |      16 | f     | f    | 85 90 40 00 00 00 00 00      
          7 | (1093,1) |      16 | f     | f    | f6 e9 4e 00 00 00 00 00      
          8 | (2112,1) |      16 | f     | f    | a3 60 5c 00 00 00 00 00      
          9 | (411,1)  |      16 | f     | f    | b2 ea 6b 00 00 00 00 00      
         10 | (2073,1) |      16 | f     | f    | db de 79 00 00 00 00 00      
         11 | (1392,1) |      16 | f     | f    | df b0 8a 00 00 00 00 00      
(11 rows)      
```      
根据branch page id查看stats        
btpo = 1 当前在第一层  ，另外还表示下层是0        
btpo_flags = 0 说明是branch page        
```      
postgres=# select * from bt_page_stats('tab2_pkey', 3);      
 blkno | type | live_items | dead_items | avg_item_size | page_size | free_size | btpo_prev | btpo_next | btpo | btpo_flags       
-------+------+------------+------------+---------------+-----------+-----------+-----------+-----------+------+------------      
     3 | i    |        254 |          0 |            15 |      8192 |      3076 |         0 |      2577 |    1 |          0      
(1 row)      
```      
查看branch page存储的 leaf page ctid (指向leaf page)          
只要不是最右边的页，第一条都代表右页的起始item。        
第二条才是当前页的起始ctid        
注意所有branch page的起始item对应的data都是空的。          
也就是说它不存储当前branch page包含的所有leaf pages的索引字段内容的最小值。        
```      
postgres=# select * from bt_page_items('tab2_pkey', 3);      
 itemoffset |   ctid   | itemlen | nulls | vars |          data                 
------------+----------+---------+-------+------+-------------------------      
          1 | (735,1)  |      16 | f     | f    | e1 78 0b 00 00 00 00 00      
          2 | (1,1)    |       8 | f     | f    |       
          3 | (2581,1) |      16 | f     | f    | a8 09 00 00 00 00 00 00      
          4 | (1202,1) |      16 | f     | f    | f8 13 00 00 00 00 00 00      
...      
        254 | (3322,1) |      16 | f     | f    | ee 6f 0b 00 00 00 00 00      
(254 rows)      
```      
根据ctid 查看leaf page          
btpo = 0 当前在第0层，即最底层，这里存储的是heap ctid          
btpo_flags = 1 说明是leaf page        
```      
postgres=# select * from bt_page_stats('tab2_pkey', 1);      
 blkno | type | live_items | dead_items | avg_item_size | page_size | free_size | btpo_prev | btpo_next | btpo | btpo_flags       
-------+------+------------+------------+---------------+-----------+-----------+-----------+-----------+------+------------      
     1 | l    |        242 |          0 |            16 |      8192 |      3308 |         0 |      2581 |    0 |          1      
(1 row)      
postgres=# select * from bt_page_items('tab2_pkey', 1);      
 itemoffset |    ctid    | itemlen | nulls | vars |          data                 
------------+------------+---------+-------+------+-------------------------      
          1 | (4985,16)  |      16 | f     | f    | a8 09 00 00 00 00 00 00      
          2 | (7305,79)  |      16 | f     | f    | 01 00 00 00 00 00 00 00      
          3 | (2757,120) |      16 | f     | f    | 09 00 00 00 00 00 00 00      
...      
        242 | (1329,101) |      16 | f     | f    | a0 09 00 00 00 00 00 00      
(242 rows)      
```      
查看leaf page中包含的heap page items。        
如果我们根据索引页结构的原理，能推算出来(7305,79)是最小值，取它就没错了。        
```      
postgres=# select * from tab2 where ctid='(7305,79)';      
 id |               info                     
----+----------------------------------      
  1 | 18aaeb74c359355311ac825ae2aeb22a      
(1 row)      
postgres=# select min(id) from tab2;      
 min       
-----      
   1      
(1 row)      
```      
4\.        
多层结构，除了meta page，还可能包含多层branch page，以及一层leaf page。        
![4](20160528_01_pic_005.png)      
例子         
```      
postgres=# create table tab3(id int primary key, info text);      
CREATE TABLE      
postgres=# insert into tab3 select generate_series(1, 100000000), md5(random()::text);        
```      
查看meta page, 注意level，已经是3级了。        
```      
meta page      
postgres=# select * from bt_metap('tab3_pkey');      
 magic  | version |  root  | level | fastroot | fastlevel       
--------+---------+--------+-------+----------+-----------      
 340322 |       2 | 116816 |     3 |   116816 |         3      
(1 row)      
```      
btpo_flags=2  代表 root page        
btpo = 3 代表第3层          
```      
postgres=# select * from bt_page_stats('tab3_pkey', 116816);      
 blkno  | type | live_items | dead_items | avg_item_size | page_size | free_size | btpo_prev | btpo_next | btpo | btpo_flags       
--------+------+------------+------------+---------------+-----------+-----------+-----------+-----------+------+------------      
 116816 | r    |          3 |          0 |            13 |      8192 |      8096 |         0 |         0 |    3 |          2      
(1 row)      
postgres=# select * from bt_page_items('tab3_pkey', 116816);      
 itemoffset |    ctid    | itemlen | nulls | vars |          data                 
------------+------------+---------+-------+------+-------------------------      
          1 | (412,1)    |       8 | f     | f    |       
          2 | (116815,1) |      16 | f     | f    | 5f 9e c5 01 00 00 00 00      
          3 | (198327,1) |      16 | f     | f    | bd 3c 8b 03 00 00 00 00      
(3 rows)      
```      
btpo_flags=0  代表 branch page        
btpo = 2 代表第2层          
```      
postgres=# select * from bt_page_stats('tab3_pkey', 412);      
 blkno | type | live_items | dead_items | avg_item_size | page_size | free_size | btpo_prev | btpo_next | btpo | btpo_flags       
-------+------+------------+------------+---------------+-----------+-----------+-----------+-----------+------+------------      
   412 | i    |        286 |          0 |            15 |      8192 |      2436 |         0 |    116815 |    2 |          0      
(1 row)      
postgres=# select * from bt_page_items('tab3_pkey', 412);      
 itemoffset |   ctid    | itemlen | nulls | vars |          data                 