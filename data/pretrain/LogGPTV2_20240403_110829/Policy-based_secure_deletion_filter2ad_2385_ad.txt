### Optimized Text

#### 3.4 Composition of Secure Deletion Schemes
In the final game, B simulates \(\text{Secdel}_{A,E}(\kappa)\) perfectly without knowledge of \(M_{h,0}\) and \(M_{l,0}\), using only oracle access provided by \(\text{Secdel}_{B,E_h}(\kappa)\) and \(\text{Secdel}_{B,E_l}(\kappa)\). Therefore, any adversary \(A\) that wins \(\text{Secdel}_{A,E}(\kappa)\) with a non-negligible advantage implies an adversary \(B\) that can break the security of either \(E_h\) or \(E_l\). Consequently, if both \(E_h\) and \(E_l\) are secure, the composed scheme \(E\) is also secure.

Next, we observe that the requirement for \(E_h\) to be a direct scheme can be relaxed if \(E_h\) and \(E_l\) share no attributes. This implies \(V_h \cap V_l = \emptyset\), as the composition requires that the nodes of both graphs are disjoint except for the attributes. Thus, one may compose an arbitrary policy-based secure deletion scheme \(E_h\) with a direct scheme \(E_l\).

**Theorem 3.** Let \(E_h\) and \(E_l\) be policy-based secure deletion schemes, where \(E_l\) is direct. If \(V_h \cap V_l = \emptyset\), the two schemes can be composed as described, and the resulting scheme \(E\) is complete and secure.

**Proof.** The construction and proof do not rely on \(E_h\) being direct, except for the possibility that \(E_h\) and \(E_l\) share attributes. Thus, if \(A_h \cap A_l = \emptyset\), the result follows analogously.

#### 3.5 Direct Policy-Graph Construction
One can use the basic secure deletion scheme from Section 3.3 and the composition operation to implement direct secure deletion schemes for arbitrary policy graphs. Recall that every directed acyclic graph (DAG) \(G = (V, E)\) has a topological order, computable in time \(O(|V| + |E|)\), which arranges the nodes of \(G\) in a sequence that respects the direction of all edges.

We traverse \(G\) in topological order and gradually build up a secure deletion scheme for \(G\). Initially, we take the first encountered interior node \(v_0\) and implement a secure deletion scheme for \(v_0\) according to the basic scheme of Section 3.3. Subsequently, whenever we encounter the next interior node \(v\), we take the subgraph \(G_v\) induced by \(v\) and its incoming edges, implement a basic secure deletion scheme for \(G_v\) according to Section 3.3, and compose it with the secure deletion scheme realized so far.

The resulting secure deletion scheme for \(G\) implicitly contains a key for every node and a key for certain edges. More precisely, for a source node (attribute) \(a\), the key \(K_a\) is explicitly stored in the master key and has one entry for every outgoing edge. For any interior node (protection class) \(p\) with \(n\) incoming edges and threshold \(m\), the key \(K_p\) is stored encrypted as follows: for every incoming edge \((v, p)\), except for those incident to an attribute, the auxiliary state contains an encryption of a key \(K_{v,p}\) under the key \(K_v\), which corresponds to node \(v\). In turn, the auxiliary state associated with \(p\) contains a vector \((x_{p,1}, \ldots, x_{p,n})\), where each \(x_{p,j}\) is associated with \(v\) and represents an encryption of \(s_{p,j}\) under \(K_{v,p}\). The value \(s_{p,j}\) is a share of \(K_p\) in an \((m+1)\)-out-of-\(n\) secret sharing scheme.

Thus, every node in \(G\) is associated with one encryption key, and every edge in \(G\) not incident to a source is also associated with one encryption key. The resulting structure is an iterative key-encrypting key-assignment scheme (IKEKAS) according to Crampton et al. [6].

The access cost is proportional to the size of \(G\). More precisely, accessing a node \(p\) requires a maximum of two secret-key cryptographic operations for every edge that must be traversed (i.e., set to TRUE) to derive \(p\) (i.e., set \(p\) to TRUE). The master key contains one component for every attribute, and the total size of the auxiliary state is \(O(|V| + |E|)\).

Note that one can eliminate the encryption keys associated with the edges and encrypt the share of a child node directly with the key of the parent node. This reduces the number of cryptographic operations without impacting the security of the construction. However, the resulting scheme cannot be obtained from the modular composition operation in Section 3.4, and a detailed security proof is left for future work.

Furthermore, the master key component for an attribute \(a\), the key \(K_a\), is a tuple of keys with one entry for every outgoing edge. This ensures that the resulting secure deletion scheme is the same, regardless of the topological order used during composition, as the edges adjacent to attributes are used in a special way in the composition. Once constructed, one can replace the tuple \(K_a\) with a single key \(K'_a\), and for every edge \((a, p)\) store the key \(K_{a,p}\) protected with \(K'_a\) in the auxiliary state of the edge \((a, p)\), as done for all other edges; this reduces the master-key size.

#### 3.6 Tree Construction
In early work on secure deletion, Di Crescenzo et al. [8] introduced a tree construction that protects data in an arbitrary number of emulated memory locations. The scheme is realized from persistent storage exposed to an adversary and allows overwriting individual memory locations. Only a small erasable memory of constant size is needed for maintaining a master key.

Using our terminology, their scheme permits \(n\) protection classes \(p_1, \ldots, p_n\), each of which can be specified for deletion independently of the others. The deletion policy graph consists of \(n\) attributes \(a_1, \ldots, a_n\), the \(n\) protection classes \(p_1, \ldots, p_n\), and \(n\) edges \((a_i, p_i)\) for \(i \in [n]\).

A balanced tree with \(n\) leaves, labeled by \(p_1, \ldots, p_n\), is constructed as follows. First, a key \(K_v\) of a secret-key encryption scheme is generated for every node \(v\) in the tree. Next, for every node \(v\), the keys of all children of \(v\) are encrypted with \(K_v\) and the resulting ciphertext is added to the auxiliary state associated with \(v\). The key of the root node represents the master key and is not stored in the auxiliary state.

For protecting or accessing a file under protection class \(p_i\), all keys along the path from the root to \(p_i\) are decrypted, starting from the root, and \(K_{p_i}\) is used to encrypt or decrypt the file, respectively. Deletion for attribute \(a_i\) makes all data protected under \(p_i\) inaccessible. This operation is implemented by generating fresh keys for all nodes on the path from the root to \(p_i\) in the tree. Specifically, the keys of all nodes and their siblings along this path are first decrypted, then a fresh key is generated for every node on the path except for \(p_i\), and finally, all fresh keys are encrypted under the fresh key of the respective parent node and stored in the auxiliary state. The fresh root key is written to the master key, and the previous root key is deleted in the erasable memory.

Clearly, this construction represents a secure deletion scheme, which can be proven secure assuming a secret-key cryptosystem along the lines of the existing proof [8]. The access cost and deletion cost of the scheme are \(O(\log n)\) secret-key operations. The erasable memory contains only one key of the secret-key encryption scheme as the master key, and the auxiliary state is of size \(O(n)\).

#### 3.7 Time-Tree Construction
Our model and the tree construction above make no assumptions about the order in which attributes are deleted. However, one can sometimes exploit such restrictions. Consider a sequence of attributes \(a_1, \ldots, a_n\) modeling expiration time such that any \(a_i\) can only be deleted if \(a_1, \ldots, a_{i-1}\) have been deleted beforehand. This property allows for building a more efficient scheme.

More precisely, consider a deletion policy graph consisting of attributes \(a_1, \ldots, a_n\), protection classes \(p_1, \ldots, p_n\), and edges \((a_i, p_i)\) for \(i \in [n]\), which represent an ordered sequence of time units from \([n]\). We want to support deletion only in the order of time and support an efficient operation that deletes multiple subsequent units at once. To this end, we construct a balanced tree over the leaves \(p_1, \ldots, p_n\), design a master key of size \(O(\log n)\), but use no auxiliary storage. The leaves of the tree represent the time units in a left-to-right order. The key of a node is computed from its parent’s key using a pseudo-random function (PRF), where the parent’s key serves as the PRF key and the input denotes whether the node is a left or right child. The root node’s key is chosen uniformly at random. The master key consists of the key of the leaf corresponding to the earliest non-deleted time unit and the keys of all right siblings on the path from the root to that leaf. This way, only the keys for time units following the last deleted one can be derived. Storing only right-siblings like this is a well-known technique [18] to achieve forward-secure cryptosystems without changing the public key of an encryption scheme.

Deletion for the attribute \(a_t\) updates the master key to contain the key for the leaf \(p_{t+1}\) and the keys of all right siblings on the path from the root to that leaf. Keys for all time periods greater than \(t\) can be derived from the master key in time \(O(\log n)\) from the stored right-siblings. Deleting an arbitrary attribute \(a_t\) and all attributes preceding it takes \(O(\log n)\) cryptographic operations, though the amortized cost is only \(O(1)\) if the attributes are deleted one by one. Hence, this tree construction is superior to the previous one for deleting time units in order and for deleting in arbitrary increments.

#### 3.8 Combined Construction
Recall that for composing two secure deletion schemes with Theorem 2, only the lower scheme must be direct. Therefore, we can combine the tree construction of Section 3.6 with the direct scheme of Section 3.5 to obtain a secure deletion scheme with some attributes organized in a tree, as described above, while the rest are organized using a direct scheme. This is useful for modeling cases where many attributes are values from a large set or interval, such as user identities or dates.

One can further combine two or more such tree constructions trivially through logical expressions if the attributes in the trees are all distinct. In this way, we can compose many separate tree schemes with a direct scheme to obtain an elaborate and practical secure deletion scheme. The prototype implementation described later follows this approach.

### 4. Properties

#### 4.1 Efficiency of the Schemes
In Table 1, we present a comparison of the direct graph and tree schemes described, respectively, in Sections 3.5 and 3.6, as well as two obvious "trivial" constructions, discussed next. As mentioned earlier, the protection cost is the same for all schemes considered in this paper.

The first trivial scheme uses a separate key for each protection class. This results in a large master secret key but achieves fast deletion operations. The Ephemerizer [20], for instance, encrypts all files with a particular expiration time with the same time-specific key, and Vanish [13] encrypts every user-data object with an independent key. Similarly, the Data Node Encrypted Filesystem (DNEFS) [22] uses this approach for protecting every data node of the flash filesystem independently.

The second trivial scheme implements a tree of depth one: it uses a single encryption key as a master key and one encryption key for each protection class; the master key is used to encrypt the keys of the protection classes, and the ciphertexts are stored in the auxiliary state. Deletion requires the re-encryption of all remaining protection-class keys with a new master key. This scheme appears, e.g., in the extension of DNEFS to an encrypted filesystem [22]. Note that removing this level of indirection and using the master key to protect the files directly would result in much worse deletion performance, as the number of files is typically much greater than the number of protection classes.

The operational cost of our direct policy-graph secure deletion scheme is determined by the parameters of its graph, namely, the maximum in-degree \(d\) of a node and the longest path \(\ell\). The main advantages of this scheme are its fast deletion operation coupled with its high expressibility. Unlike the other schemes, which consider only protection classes mapped one-to-one to attributes, the policy-graph scheme allows flexible policies formulated through logical expressions over attributes. In practice, \(d\) and \(\ell\) will often be small numbers, though in \(O(|A|)\) and \(O(|P|)\), respectively.

#### 4.2 Relation to Secret-Key Encryption
Every secure deletion scheme is also a secret-key cryptosystem with security against chosen-plaintext attacks. We only sketch this relation here; adding the formal details is straightforward.

**Table 1: Efficiency Comparison**
| Scheme            | Deletion Cost | Access Cost   | Master-Key Size |
|-------------------|---------------|---------------|-----------------|
| Trivial Direct    | \(O(1)\)      | \(O(|P|)\)    | \(O(1)\)        |
| Trivial Tree      | \(O(\log |P|)\) | \(O(\log |P|)\) | \(O(1)\)        |
| Direct Graph      | \(O(d \cdot \ell)\) | \(O(d \cdot \ell)\) | \(O(|A|)\)      |
| Tree              | \(O(\log |P|)\) | \(O(\log |P|)\) | \(O(1)\)        |
| Time-Tree*        | \(O(1)\) (amortized) | \(O(\log |P|)\) | \(O(\log |P|)\) |

* The time-tree supports only deletion going forward in time; its amortized deletion cost is \(O(1)\) and \(O(\log |P|)\) in the worst case.

Recall that a secret-key cryptosystem \(S\) consists of three algorithms for key generation, encryption, and decryption, respectively. The following steps emulate \(S\) from a secure deletion scheme \(E\):

1. **Key Generation:** Let \(G_1\) be the minimal policy graph with one attribute \(a\), one protection class \(p\), and one edge from \(a\) to \(p\). For key generation in \(S\), run the initialization algorithm of \(E\) with \(G_1\) and use its output as the secret key.
2. **Encryption:** For encryption of a plaintext \(m\) with \(S\), invoke the protection algorithm of \(E\) on \(p\) and \(m\), obtain a ciphertext \(c\), and output \((p, c)\).
3. **Decryption:** For decrypting a ciphertext \((p, c)\) of \(S\), invoke the access algorithm of \(E\), and output the response.

We claim that \(S\) is a secret-key cryptosystem with indistinguishable ciphertexts under chosen-plaintext attacks (IND-CPA security). To see this, suppose \(S\) is not secure. Then we construct a simulator \(SIM\) that contradicts the security of \(E\) in experiment \(\text{Secdel}\), by interacting with an adversary \(A_S\) that breaks the security of \(S\).

The simulator executes the operations of \(S\) according to the described emulation of \(S\) from \(E\); note that \(SIM\) does not call Delete. When \(A_S\) outputs two plaintexts \(m_0\) and \(m_1\) such that one is to be encrypted as the challenge, the simulator outputs \(p\), \(m_0\), and \(m_1\). Then \(\text{Secdel}\) responds with a ciphertext \(c^*\) that contains a representation of \(m_b\), where \(b \in \{0, 1\}\). According to the emulation of \(S\), the simulator gives \((p, c^*)\) to \(A_S\). When \(A_S\) outputs a bit \(\hat{b}_S\) as its guess for the challenge plaintext, then \(SIM\) queries its oracle for the deletion operation with attribute set \(\{a\}\), ignores the master key that it receives, and outputs \(\hat{b}_S\). Note that \(SIM\) emulates the IND-CPA security experiment perfectly. By the assumption that \(A_S\) breaks the indistinguishability of ciphertexts of \(S\), it follows that \(\Pr[\text{Secdel}_{SIM,E}(\kappa) = 1] - \frac{1}{2}\) is not negligible. Hence, \(E\) is not a secure policy-based deletion scheme.

### 5. Prototype Implementation
Here we describe a filesystem prototype of a policy-based secure deletion scheme according to Sections 2 and 3. The secure-deletion filesystem (delfs) is implemented as an extension to EncFS [10], a virtual cryptographic filesystem in Linux based on FUSE [12]. As a virtual filesystem, delfs does not handle space allocation itself, just like EncFS, but acts as a transparent protection layer and projects the stored directories and files with the same structure onto a lower-layer (physical) filesystem.

#### 5.1 Overview
Data stored in delfs seamlessly benefits from secure deletion. Together with every instance of a delfs-mounted directory tree, the user specifies a deletion policy in the format described later. Every file maintained by delfs is associated with a protection class and a set of attributes. The architecture of delfs is shown in Figure 4.