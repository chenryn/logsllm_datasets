mmap) and extend the SPS to that process. For downstream pruning
we check forward events resulting from the suspicious processes
and other files that are affected afterwards. Pruning also follows
the information flow and extracts the downstream SPS. Pruning
is either naturally bounded (meaning no more related causality is
found) or bounded by the network interface.
6.2.2 Point-to-Point Pruning. Point-to-point analysis indicates
whether and how two points are causally related in the graph. This
analysis works on top of upstream and downstream pruning. Given
two points, we first perform downstream pruning from the earlier
ABCDEFP1P2P3SendReadReadWriteWriteReadReadMmapA: Attacker siteB: /tmp/report.docC: /tmp/errors.zipD: /contracts/ctct1.csvE: /contracts/ctct2.pdfF: /offers/loss.csvP1: /usr/bin/firefoxP2: /usr/bin/TextEditorP3: /bin/GzipProcess-Object CausalityObject-Object CausalityDBP2WriteFCP3ReadTimeEMmapWriteInterferenceProcessFileI/O SyscallState/VersionReadTime6.2.3 Data Interference in Memory Space. We further look into
the system call sequence of each process execution. We observe that
for object-to-object causality, the inbound object can be causally
related to the outbound object only if their existence ranges overlap
in the process memory space. We call these overlaps “interferences,”
which fortunately can be identified in the system call sequence. By
examining interference situations, we skip performing DIFT in the
case of non-interference. For example, in Figure 3, the outbound
“report.doc” file (node B) has no interference with the inbound
“contract1.csv” file (node D) because the read takes place after the
write. Therefore, the interference analysis rules out the necessity
of doing DIFT for the “TextEditor” process (node P2). Meanwhile,
the “Gzip” program (node P3) is an positive interference example,
as both of the two upstream files (“contract2.pdf” (node E) and
“loss.pdf” (node F)) once shared memory space with the outbound
“errors.zip” file (node C).
It is this interference situation in the memory space that leads
to possible data propagation (exchange between objects), which
we later identify using DIFT. By identifying the exact interference
situation of each process execution, we become aware of the part
of the execution that requires fine-grained refinement as well as a
source and a sink. In the DIFT, we fast-forward the replay to the
start of interference (e.g., a read syscall), and then early-terminate
at the sink. Each entry of interference includes the process, the first
syscall that reads the inbound file, the last syscall that writes to
the outbound file, the inbound file, and the outbound file. To keep
track of ordering, the timestamps of inbound and outbound syscalls
are logged. As it is most effective when interference occurs at a
late execution time or when it is short, we can skip most of DIFT.
In §7 we show how to classify associated files with interference
into groups so that one pass of DIFT is able to resolve all of the
causalities in the group.
7 SELECTIVE CAUSALITY REFINING
To further refine the graph and obtain fine-grained level causalities,
we perform selective data tracking on top of the SPS. We re-compute
(i.e., replay) user-space executions while performing taint analy-
sis to determine causality in the interference cases (§6.2.3). Our
approach entails tainting the bytes loaded to the memory space
and tracking the propagation of the tainted bytes at the level of
instruction execution. DIFT (or “taint analysis”) has been imple-
mented in previous work [18, 27, 29, 37]. We port open-source taint
engines to develop our own taint engine that supports object-object,
object-process, and process-process causalities (§7.1.2).
Because taint analysis is costly, we find that even offline analysis
becomes impractical if we naively perform taint tracking on every
process group. Therefore, we aim to minimize the cost of analysis by
performing directional taint tracking in each group, orchestrating
process groups for information flow-based tainting for upstream
and downstream analyses, and reusing the taint results to avoid
duplicate tainting. Rain is able to track fine-grained causality along
the upstream and downstream paths in the SPS according to the
causality results in every branch. For each process group we locate
the exact target of taint tracking according to the data interference
of the presence of objects in the memory space (§6). We present
how we conduct taint in every process group in §7.1 and how we
orchestrate tracking across process groups in §7.2.
7.1.1
7.1 Directional Intra-process Tainting
According to the tainting targets determined in the SPS, Rain per-
forms DIFT starting from the source of interference (§6.2.3) and
ending at the sink in every replay of the process execution. In our
current prototype we determine causality to occur as long as any
byte of the inbound object is propagated to the outbound object.
Interference Aggregation. Instead of running taint tracking
on every pair of interferences, we aggregate them so they can be
resolved in a single pass of taint tracking. This spares duplicate
taints from propagating in the same execution trace. Aggregation
takes place in the same process group. Suppose n interferences in
the process group are related to the analysis request. We aggregate
them by starting from the earliest interference and ending at the
latest one. Then we run the taint tracking one time instead of n
times. For example, in Figure 3, inside the P3 process, we aggregate
the interference of files E and C via read and write, and files F
and C via mmap, write because they belong to the same process
P3 in the SPS. Thus we can resolve the causalities within them in
one pass of tainting. When the tainting is performed it starts from
the read syscall until the write syscall with the tagging of both E
and F files as sources.
7.1.2 Replay and Taint Propagation. To allow taint tracking to
work independently from a replayed execution, we adopt the analy-
sis compensation technique from [10], which is able to differentiate
the executions of Intel Pin from that of the program. First, no syscall
made by Pin will be mixed by the recorded syscalls because the
replayer is aware of their occurrences (i.e., it can differentiate be-
tween the two). Second, for memory space separation, the record
log is scanned for any memory allocations. They will be allocated
first so the replayed execution will not be affected by Pin.
Our DIFT engine is a set of Pin tools that reuses the open-source
libdft [29], Dytan [18], and dtracker [49] projects for tracking
object-object causality. The taint tags propagate on both data and
control flow dependencies. Data dependency is tracked by monitor-
ing the read/write memory operations at the instruction level be-
tween memories and registers, and control flow dependency comes
from indirect branch dependency and incurs a higher overhead.
We also implement tools that track object-process, process-process
causalities. For cases in which object-process causality cannot be
captured by the execve syscall, we taint track the data propagations
and their impact on the control flow. We determine this causality
when the return address or the eip register is tainted by the data
of an input object (similar to [41]), which unveils typical memory
corruption exploits that hijack the control flow. For the shared
memory case in the process-process causality, we monitor shared
memory-related syscalls (e.g., shmget and mmap) to map the shared
memory among processes so that we are able to track the memory
operation of a data transfer from a private memory space of one
process (e.g., stack and heap) to the shared memory space, and then
to the other processes. Additionally, we track the data propagation
from an inbound object in one process to an outbound object in
another process via shared memory.
7.2 Orchestrating Taintings Across Processes
In this section, we present how we perform taint tracking across
processes according to the SPS. We regard taint tracking inside
the process as a block function. To efficiently accomplish DIFT, we
apply optimization techniques that minimize the tainting workloads.
Specifically we introduce two methods of handling tainting in the
upstream and downstream directions. Finally, we present how we
refine causality paths for a point-to-point analysis by verifying the
coarse-grained paths one-by-one and reusing the previous results
cumulatively.
7.2.1 Downstream Refinement. Downstream refinement is ca-
pable of accurately identifying the impact of an attack, which is
critical in both forensic analysis and intrusion recovery. Compared
to conventional intrusion recovery approaches (e.g., Retro [31] and
Dare [30]), Rain produces accurate causality between involved files
so the recovery can be performed only in files with true causality
which eliminates false positives; otherwise innocent processes will
be “re-executed.”
Recall that when generating the SPS, Rain also produces a pool
of interference entries (§6.2.3) in which potential causalities exist.
Starting from a designated point (e.g., a file), we identify the process
and interference related to this point and then resolve the fine-
grained causality. In the case of object-object causality, we run DIFT
on the associated process and determine the outbound object(s)
with true causality. From that object, we repeat the procedure to
determine further causally related downstream objects bounded by
the SPSs.
Take, for example, the data-tampering case in the motivating
attack. The SPS reports that the tampered spreadsheet file “agree-
ment.csv” has been later read by the auto-budget script which
produces the budget and production plan files. More interestingly,
the budget file is then used by the document editor which generates
a season report. The triggering point in this case is the tampered
spreadsheet file. Further interference entries with the file as inbound
object will be pinpointed and taint tracking will be performed. We
consider this interference situation an entry. Then we conduct
taint analysis on the first (closest hop) process to identify the true
outbound object and move further downstream making the found
outbound object inbound object. As a result, we are able to repeat-
edly identify the exact downstream causalities and insert them into
the provenance graph.
7.2.2 Upstream Refinement. Upstream refinement also begins at
the triggering point, but proceeds in the reverse order of the execu-
tion time. The SPS appears in an acyclic-directed graph shape with
the latest point being the triggering point (e.g., the file leaked by
the compromised FTP extension). To identify the leaked file and its
provenance, we locate the associated process in the SPS. The taint
tracking on the replay of the process execution determines the real
causal parents so the next rounds of taint tracking are performed
only at these parent files. Taint tracking continues recursively until
it hits a boundary advised by the SPS. At each branch where mul-
tiple inbound objects exist, refinement continues only on the true
inbound object(s) and ensures that they are outbound objects for
the next round of tainting.
In Figure 3, from the attacker’s site, we begin running upstream
refinement performing tainting at P1 (i.e., the Firefox session). We
find that although the “report.doc” file (node B) and the “errors.zip”
file (node C) are both inbound, only file C is causally related to the
attacker’s controlled host (node A). We drop file B and continue re-
finement on the branch from file C. Again we find that “Gzip” (node
P3) has input files “contract2.pdf” (node E) and “loss.csv” (node F),
but only file F exhibits causality with file C, so we continue along
the F branch. As a result, we eliminate the unnecessary workload
of tainting dead branches that do not reach the triggering point.
Extending Causality Across Processes. As an optional feature,
we keep track of the causality across processes (e.g., in Figure 3,
file F to site A). We maintain a shadow tagging file for each file that
is accessed by more than one process. This tagging file keeps track
of the source tag of every byte in the file so that Rain can track
the causality between two separate files in different processes. For
example, in Figure 3, the shadow tagging file of file C is generated
when tainting is performed on P3. The tagging file contains the
bytes with causality between files E and F. When we replay and
taint track P1, we refer to the tagging of file C and acknowledge
that the leaked data includes both files C and F because part of
the contents of C originated from file F. Accompanied by upstream
refinement, Rain constitutes the result of this Point-to-Upstream
analysis that file C has been leaked to the attacker while certain
leaked contents of C originate from F. In our current prototype,
this feature is optional and on-demand as it incurs higher tainting
overhead. Note that tracking the data with tags from previous
objects requires full-length tainting from the inbound to outbound
objects.
7.2.3 Point-to-Point Refinement. Recall that causality may have
been included within the SPS (§6.2.2). With the help of the SPS,
heavy DIFT is applied to verify the data flow on the path where the
fine-grained causalities (e.g., object-object) occur. This filters out
many unrelated branches that would have incurred high analysis
overhead.
Based on the processes on each path in the SPS, we replay and
perform taint tracking on the process groups in the path to verify
true causality. From the start to end points along the path, each
process group is replayed and taint tracking performed on the
specific interference between the inbound and outbound system
calls. The inbound object is tagged and the running of the process
propagates the tags and monitors whether it hits the outbound
object. If it does, verification continues. Otherwise, it terminates
and returns a negative result. The verification runs until an end
point. If all interferences along the path are positive, we refer to
the path as “causality positive.” At the end, the refinement returns
all the causality-positive paths.
The verification procedure is optimized by reusing the taint
results for each group. In the implementation, we store the causality
between specific inbound and outbound files in a database. In the
remaining verifications, we start by searching the database for
existing causality facts. Then we reuse them if possible without
performing the same taint tracking again. Because we reuse the
results, taint verification takes less time as we verify more paths.
Particularly for the point-to-point case, the taint tracking in every
process group is optionally run in parallel to accelerate the analysis
Host
Target host
Analysis host
Module
Kernel Module
Trace Logistics
Provenance Graph
Trigger/Prune
Selective Refinement
DIFT Pin tools
LoC
2,200 C (Diff)
1,100 C
6,800 C++
1,100 Python
900 Python
3,500 C/C++ (Diff)
Table 2: Implementation complexity.
if more computing resources are available. As every process group
is independently recorded and independently replay-able, we tag
every process group with a symbolic tag and will resolve the tag
propagation with real tags. The use of more resources with less
time consumption represents the cost of this optimization. In this
case, refinement time decreases to the level of the longest DIFT.
8 IMPLEMENTATION AND EVALUATION
We implemented a prototype of Rain in Linux. In the kernel module
of the target host, we implemented the system logging logic with
comprehensive semantics to build the provenance graph and to
support whole-system recording. On the analysis host, we imple-
mented the construction of the provenance graph and trigger/prune
methods as well as DIFT that support object-object, object-process,
and process-process causalities on top of [18, 29, 49]. The complex-
ity of implementation is summarized in Table 2. We plan to release
the source code of Rain.
§8.1.2)?
Our evaluation addresses the following questions:
• How well does Rain detect various attack scenarios (§8.1.1,
• How accurately does Rain prune and refine provenance
• How much overhead associated with analysis, runtime, and
graphs (§8.1.3)?
storage does Rain have (§8.2)?
In our evaluation environment, we set up the target and analysis
host individually on two bare-metal machines both powered by
Intel Xeon(R) CPU W3565 3.2GHz; the target host has an 8GB RAM
and 512GB hard drive, and the analysis host has a 32GB RAM and
2TB SSD hard drive. They are connected by a 1GB Ethernet cable.
Both machines run Ubuntu 12.04 LTS (i386).
8.1 Security Analysis
Using various attack scenarios, including the motivating exam-
ple, we evaluate the accuracy gains and conduct a set of red team
exercises from the DARPA Transparent Computing program [2].
8.1.1 Motivating Example. We demonstrate the end-to-end pro-
cedure and efficacy of Rain at detecting and analyzing the motivat-
ing attack example (§1). The attack exploits the FireFtp addon of
Firefox to steal a user’s data and tamper with downloaded files. At
the triggering pinpoint phase of the analysis, the security team of
the company was notified that an originally trustworthy site (e.g.,
white-listed in the firewall policy) was compromised for one week
until they confirmed and recovered from the leakage of critical con-
tract details (i.e., External Signal in §6.1). In addition, they received
complaints from the audit team about abnormal changes in the
numbers in a spreadsheet file when they compared the downloaded
Figure 4: Simplified provenance graph with highlighted accurate
causality path (red dotted line for object-object causality and
blue dotted line for object-process causality; the nodes on the
path are colored accordingly). Notations: (a) A/B: eth0/eth1; C: