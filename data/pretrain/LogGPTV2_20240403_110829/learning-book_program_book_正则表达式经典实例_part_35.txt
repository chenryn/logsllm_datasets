Dim MyMatchEvaluator As New MatchEvaluator (AddressOf ComputeReplacement)
如果想要把同个正则表达式应用于大量的字符串，那么就需要构造一个Regex对象：
Dim RegexObj As New Regex("\d+")
Dim MyMatchEvaluator As New MatchEvaluator (AddressOf ComputeReplacement)
这两个代码片段中都调用了函数ComputeReplacement。你应当把这个方法添加到用来
实现这个解答的类中：
使用正则表达式编程
173
www.TopSage.com
---
## Page 190
Public Function ComputeReplacement (ByVal MatchResult As Match) As String
Dim TwiceAsMuch = Int.Parse(MatchResult.Value) * 2;
Return TwiceAsMuch.ToString();
End Function
Java
StringBuffer resultString = new StringBuffer();
Pattern regex=Pattern.compile("\\d+");
Matcher regexMatcher =regex.matcher(subjectString);
while (regexMatcher.find()){
regexMatcher.appendReplacement(resultString, twiceasmuch.toString());
regexMatcher.appendTail(resultString);
JavaScript
var result = subject.replace(/\d+/g
function（match){return match *2;}
)；
PHP
使用一个声明的回调函数：
$result=preg_replace_callback('/\d+/',compute_replacement,$subject);
function compute_replacement($groups)(
return $groups[0]*2;
使用一个匿名的回调函数：
$result = preg_replace_callback(
/\d+/，
create_function(
',sdnoxbs.
'return $groups[0]*2;'
'(
$subject
);
Perl
$subject=~s/\d+/$&*2/eg;
Python
如果你打算只使用同一个正则表达式处理少量字符串，可以使用如下的全局函数：
174
第3章
www.TopSage.com
---
## Page 191
result =re.sub(r"\d+",computereplacement,subject)
要想重复使用同一个正则表达式，那么就需要使用一个编译好的对象：
reobj = re.compile(r"\d+")
result = reobj.sub(computereplacement,subject)
这两个代码片段中都调用了函数computereplacement。这个函数需要在你把它传递给
subO之前进行声明：
def computereplacement(matchobj):
return str(int(matchobj.group())*2)
Ruby
result=subject.gsub(/\d+/)(|match1
Integer(match)*2
讨论
当使用字符串作为替代文本的时候，你只能做最基本的文本替换。要想把每个匹配根
据要替换的匹配内容替换成完全不同的字符串，那么就需要在自已的代码中构造替代
文本。
C#
个字符串参数。当使用静态调用的时候，替代文本是第三个参数，位于目标字符串和
正则表达式之后。如果把正则表达式传递给RegexO构造函数，那么你就可以在这个
对象之上只用替代文本作为第二个参数来调用ReplaceO。
这时候，我们不再传递一个字符串作为第二或第三个参数，我们传递的是一个
MatchEvaluator委派（delegate）。这个委派是一个引I用，指向的是你添加到正在做
查找和替换的类中的一个成员函数。要创建这个委派，需要使用new关键字来调用
MatchEvaluatorO构造函数。把你的成员函数作为传递给MatchEvaluatorO的唯一
参数。
你想要用于委派的函数应当返回一个字符串，并且接受一个类型为
System.Text.RegularExpressions.Match类的参数。这与本章中前面所给的实例中的
Regex.MatchO成员所返回的Match类是同一个。
当你用一个MatchEvaluator作为替代来调用ReplaceO时，需要被替换的每个正则表达
式匹配都会调用你的函数。你的函数需要返回-个替代文本。可以使用Match对象的
任意属性来构造你的替代文本。在前面给出的例子中使用了matchResult.Value来获取
整个正则匹配的字符事。通常，你也可以使用matchResult.Groups口从正则表达式的捕
使用正则表达式编程175
www.TopSage.com
---
## Page 192
获分组中构造你的替代文本。
如果你不想替换某些特定的正则匹配，你的函数应当返回matchResult.Value。如果你返
回的是null或者是一个空串，那幺正则匹配就会被替换为空（也就是被删除）。
VB.NET
实例3.14中讨论了你可以调用Regex.ReplaceO方法的不同方式，都是把替代文本作为
一个字符串参数。当使用静态调用的时候，替代文本是第三个参数，位于目标字符串
和正则表达式之后。如果你使用Dim关键字为正则表达式创建了一个对象，那么你就
可以在这个对象之上只用替代文本作为第二个参数来调用ReplaceO。
这时候，我们不再传递一个字符事作为第二或第三个参数，我们传递的是一个
MatchEvaluator对象。这个对象中包含一个引用，指向的是你添加到正在做查找和
替换的类中的一个函数。你需要使用Dim关键字来创建类型为MatchEvaluator(O的
一个变量。AddressOf操作符会返回到你的函数的一个引用，而不会在这里实际调
用该函数。
你想要用于MatchEvaluator的函数应当返回一个字符事，并且接受一个类型为
System.Text.RegularExpressions.Match类的参数。这与本章中前面所给的实例中的
Regex.MatchO成员所返回的Match类是同一个。这里的参数是通过传值来传递的，所
以你必须把它用ByVal来声明。
当你用一个MatchEvaluator作为替代来调用ReplaceO的时候，需要被替换的每个正则
表达式匹配都会调用你的函数。函数需要返回一个替代文本。而你可以使用Match对
象的任意属性来构造你的替代文本。在前面给出的例子中使用了NatchResult.Value来
获取整个正则匹配的字符事。通常，你也可以使用MatchResult.Groups口从正则表达式
的捕获分组中构造你的替代文本。
如果不想替换某些特定的正则匹配，你的函数应当返回matchResult.Value。如果你返回
的是Nothing或者是一个空串，那幺正则匹配就会被替换为空（也就是被删除）。
Java
Java的解决方案看起来很直接。我们会按照实例3.11中所讲的方式遍历所有的正则匹
配。在循环中，我们使用Matcher对象来调用appendReplacementO。当findO不能再找
到更多匹配的时候，我们会调用appendTailO。appendReplacementO和appendTailO这两
个方法使得我们可以很容易为每个正则匹配使用一个不同的替代文本。义
appendReplacementO接受两个参数。第--个类型是StringBuffer，用来（临时）存储正
在进行的查找和替换的结果，第二个是用于上一次由findO找到匹配的替代文本。
这个替代文本中可以包含到捕获分组的引用，例如"$1”。如果在你的替代文本中有
语法错误的话，那么会产生一个IllegalArgumentException例外。如果替代文本引用
176第3章
www.TopSage.com
---
## Page 193
了一个不存在的捕获分组，那么会产生一个IndexOutOfBoundsException例外。如果
你在没有进行成功的findO调用之前就调用了appendReplacementO，那么会产生一个
IllegalStateException例外。
如果你正确地调用了appendReplacementO，那么它会做两件事情。首先，它会把位于
上一次和当前的正则匹配之间的文本复制到字符串缓冲区中，而不会对该文本做任何
修改。如果当前匹配是第一个匹配，那么它会复制在该匹配之前的所有字符。在此之
后，它会把你的替代文本附加上来，并把其中存在的任何向后引用替换为相应捕获分
组匹配到的文本。
如果你想要删除某个特定的匹配，那么可以把它替换为一个空串。如果你想要让
字符串中的某个匹配保持不变，那么可以对该匹配省去到appendReplacement(的
调用。当提到“上一次正则匹配”的时候，指的是你调用appendReplacementO的
上一个匹配。如果你没有为某个匹配调用appendReplacement)，那么这些匹配就
会成为位于你替换了的两个匹配之间的文本，因此也就会原封不动复制到自标字
符事缓冲区中。
完成了匹配替换之后，需要调用appendTailO。这个函数会把字符串中位于最后一个调
用了appendReplacementO的正则匹配之后的剩余文本复制到缓冲区中。
JavaScript
在JavaScript中，一个函数其实就是一个可以被赋值到变量的对象。在这里，传递
给string.replace(函数的不再是一个字面字符串，或者是一个包含字符串的变量，我
们这次会传递一个返回字符事的函数。这个函数在每次需要进行替换的时候都会被
调用。
可以让你的替代函数接受一个或多个参数。如果这样做，第一个参数会被设为正则表
达式匹配到的文本。如果你的正则表达式包含捕获分组，那么第二个参数中会保存第
一个捕获分组匹配到的文本，第三个参数会保存第二个捕获分组的文本，以此类推。
你可以在这些参数中使用正则表达式匹配的片段来构成替代文本。
在这个实例中给出的JavaScript解决方案中的替换函数只是接受了正则表达式匹配的文
本，并返回它的2倍。JavaScript会自动处理字符串到整数和整数到字符串的转换。
PHP
preg_replace_callbackO函数与在实例3.14中讲解的preg_replaceO函数的工作原理是相
同的。它会接受一个正则表达式、替代、目标字符串、可选的替换限制以及可选的替
换计数。正则表达式和自标字符事可以使用单个字符串或者数组。
区别是preg_replace_callbackO并不会接受一个字符串或字符串数组作为替代：它接受的
是一个函数。你可以在代码中声明这个函数，或者使用create_functionO创建一个匿名
使用正则表达式编程177
www.TopSage.com
---
## Page 194
函数。这个函数应当接受一个参数，并返回一个字符串（或者可以被强制转换为字符
串的类型)。
每次当preg_replace_callbackO找到一个正则匹配的时候，它都会调用你提供的回调函
数。它的参数会被填充为一个字符串数组。元素0保存的是整个的正则匹配，而元素1
之后保存的则是由各个捕获分组匹配到的文本。你可以使用这个数组来构造替代文本，
既可以使用正则表达式的匹配，也可以使用一个或者多个捕获分组的匹配。
Perl
s///操作符支持一个会被m//忽略的额外修饰符：/e。这个/e或“execute（执行）”
修饰符会告诉替换操作符把替代部分当作Perl代码来执行，而不是把它解释为双引
号字符串的内容。使用了这个修饰符，我们就可以很容易获取变量$&中的匹配文
本，并把它乘以2。这段代码的执行结果会被当作是替代字符串。
Python
Python的subO函数会允许你不传递字符串，而是传递一个函数来作为替代文本。在每
次需要替换正则匹配时都会调用这个函数。
你需要在引用这个函数之前声明它。它应当接受一个MatchObject实例的参数，这个对
象同searchO函数返回的对象是同-一个。你可以使用它来获取正则匹配（或者其中的一
部分），从而可以构造自己的替代文本。更多细节可以参考实例3.7和实例3.9。
你的函数应当返回包含替代文本的一个字符事。
Ruby
前面两个实例中调用String类的gsubO函数时使用了2个参数：正则表达式和替代文本。
这个方法还存在一种block形式。
在block形式中，gsub(会接受正则表达式作为唯一参数。它会使用正则表达式匹配到
的文本构成的字符串来填充一个选代器变量。如果你提供额外的选代器变量，那么它
们会被设置为nil，即使你的正则表达式中包含有捕获分组也一样。
在block中放一个表达式，用来对你想要用作替代文本的字符串进行求值。在block中，
你可以使用特殊的正则匹配变量，例如$～、$&和S1。在block每次被执行来进行替换
时，这些变量的值都会改变。更多细节请参考实例3.7、3.8和3.9。
你不能使用诸如这样的替代文本记号。这些记号依然会被当作字面文本来处理。
参见
实例3.9和3.15。
178第3章
www.TopSage.com
---
## Page 195
3.17替换另一个正则式匹配中的所有匹配
问题描述
你想要替换某个特定正则表达式的所有匹配，但是只有当它位于目标字符串的特定子
串中时才会这样做。另外一个正则表达式会匹配字符串中的这些子串。
假设你有-个HTML文件，其中有不同的段落使用tag被标记为粗体。在每对粗体
tag之间，你想要把正则表达式（before）的所有匹配都替换为（after。例如，当处理字
符串beforefirstbeforebeforebeforebefore的时候，你最终会得到的是
beforefirst afterbeforeafter after。
解决方案
C#
Regex innerRegex = new Regex("before");
new MatchEvaluator(ComputeReplacement));
public String ComputeReplacement(Match matchResult) (
// Run the inner search-and-replace on each match of the outer regex
VB.NET
Dim OuterRegex As New Regex(".*?", RegexOptions.Singleline)
Dim InnerRegex As New Regex("before")
Dim MyMatchEvaluator As New MatchEvaluator (AddressOf ComputeReplacement)
Public Function ComputeReplacement(ByVal MatchResult As Match) As String
'Run the inner search-and-replace on each match of the outer regex
End Function