seconds or (cid:11) 1180
seconds. Hence let δ = ρ/(1 − ρ) = 0.136. The probability
that the attack is a success is 53%.
1
Second, let assume that the adversary controls ρ = 1
3 of
the total mining power, which represents ρt = 6.7 MH/s.
In this case the adversary delay communications between
two subgraphs G1 and G2 with mining power of 1−ρ
2 t =
6.7 MH/s each. If we wait for 4 minutes, i.e., 240 seconds,
then each isolated graph and adversary would mine 6.67 ∗
106 ∗ 240/(30∗ 106) = 53.4 blocks. The probability that the
attack succeeds would become 1− e
−ρ2/3(1−ρ)2∗53.4, which
is around 94%.
5https://blog.ethereum.org/2016/09/22/ethereum-network-currently-
undergoing-dos-attack/.
6http://www.coindesk.com/r3-ethereum-report-banks
585
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:34 UTC from IEEE Xplore.  Restrictions apply. 
Figure 4: The mining power of the R3 Ethereum network as reported by eth-netstats as of June 2016
VI. EXPERIMENTING THE BALANCE ATTACK ON A
PRIVATE ETHEREUM BLOCKCHAIN
In this section, we experimentally produce the attack
on an Ethereum private chain involving up to 18 physical
distributed machines. To this end, we conﬁgure a realistic
network with 15 machines dedicated to mining as in the R3
Ethereum testnet and 3 dedicated network switches.
All experiments were run on 18 physical machines of
the Emulab environment where a network topology was
conﬁgured using ns/2. The topology consists of three local
area networks conﬁgured through a ns/2 conﬁguration ﬁle
with 20 ms latency and 100 Mbps bandwidth. All miners run
the geth Ethereum client v.1.3.6 and the initial difﬁculty
of the crypto-puzzle is set to 40 KH. The communication
graph comprises the subgraph G1 of 8 miners that includes
the attacker and 7 correct miners and a subgraph G2 of 7
correct miners.
A. Favoring one blockchain view over another
We run our ﬁrst experiment during 2 minutes. We delayed
the link E0 during 60 seconds so that both subgraphs mine
in isolation from each other during that time and end up with
distinct blockchain views. After the delay we take a snap-
shot, at time t1, of the blocks mined by each subgraphs and
the two subgraphs start exchanging information normally
leading to a consensus regarding the current state of the
blockchain. At the end of the experiment, after 2 minutes,
we take another snapshot t2 of the blocks mined by each
subgraph.
# blocks at t1 # blocks discarded at t2 # blocks kept at t2 retention
52
58
39
58
G1
G2
Table II: Number of blocks in the main branch (excluding
uncles) mined by the subgraphs G1 and G2; the adversary
inﬂuences the selection of branches and keeps blocks from
25%
0%
13
0
G1 but discards blocks from G2
Table II lists the number of blocks (excluding uncles) of
the blockchain views of G1 and G2 at times t1, while the two
subgraphs did not exchange their view, and at time t2, after
the subgraphs exchanged their blocks. Note that we did not
represent the uncle blocks to focus on the main branches.
We observe that the blockchain view of the subgraph G1
was adopted as the valid chain while the other blockchain
view of the subgraph G2 was not. In particular, we retrieved
13 blocks of the main branch of G1 at time t1 in the main
branch selected at t2. As expected, all the blocks of G2 at
time t1 were discarded from the main branch by time t2.
B. Blocks mined by an attacker and two subgraphs
We now report the total number of blocks mined, es-
pecially focusing on the creation of uncle blocks. More
precisely, we compare the number of blocks mined by the
attacker against the difference of the number of blocks Δ
mined by each subgraph. We know from the analysis that it
is sufﬁcient for the attacker to mine at least Δ + 1 blocks in
order to be able to discard one of the k blockchain views,
allowing for double spending. The experiment is similar
to the previous experiment in that we also used Emulab
with the same ns/2 topology, however, we did not introduce
delays and averaged results over 10 runs of 4 minutes each.
Figure 5(a) depicts the minimum, maximum and average
blocks obtained over the 10 runs. The vertical bars indicate
minimum and maximum. First, we can observe that the
average difference Δ is usually close to its minimum value
observed during the 10 runs. This is due to having a similar
total number of blocks mined by each subgraph in most
cases with few rare cases where the difference is larger. As
we can see, the total number of blocks (including uncles)
mined during the experiment by the attacker is way larger
than the difference in blocks Δ mined by the two subgraphs.
This explains the success of the Balance attack as was
observed in Section VI-A.
C. The role of uncle blocks in Ethereum
In the previous experiment, we focused on the total
number of blocks without differentiating the blocks that are
adopted in the main branch and the uncle blocks that are
only part of the local blockchain views. The GHOST protocol
accounts for these uncle blocks to decide the current state
of the blockchain as we explained previously in Section II.
586
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:34 UTC from IEEE Xplore.  Restrictions apply. 
(a) Number of blocks mined by the
attacker and the difference Δ in
the number of blocks mined by the
subgraphs
(b) Number of blocks mined by the
attacker and the two subgraphs G1 and
G2
(c) The depth of
the blockchains
mined by the attacker and two sub-
graphs G1 and G2
(d) Evolution of blocks and de-
grees where the attacker in G1 de-
lays the communication between
G1 and G2 for one minute
Figure 5: Distributed experiments performed on a blockchain with 15 physical machines connected by a 100 Mbps
network.
Figure 5(b) indicates the number of uncle blocks in
comparison to the blocks accepted on the current state of
the blockchain for subgraphs G1 and G2, and the attacker
(referred to as ‘Malicious’). As expected, we can observe
that the malicious node does not produce any uncle block
because he mines the block in isolation of the rest of the
network, successfully appending each mined block consec-
utively to the latest block of its current blockchain view. We
note several uncle blocks in the subgraphs, as correct miners
may mine blocks concurrently at the same indices.
Figure 5(c) depicts the creation of the number of mined
blocks (excluding uncle blocks) over time for subgraphs G1
and G2, and the attacker (referred to as ‘Malicious’). As we
can see the difference between the number of blocks mined
on the subgraphs is signiﬁcantly smaller than the number of
blocks mined by the attacker. This explains why the Balance
attack was observed in this setting.
D. Relating connectivity to known blocks
Figure 5(d) illustrates the execution of two subgraphs
resolving connectivity issues and adopting a chain. This
experiment outlines one of the fundamental aspects of the
balance attack, in which the chosen subgraph resolves the
network delay and attempts reconnection with another sub-
graph. At this point, the subgraphs will initiate the consensus
protocol and select the branch to adopt as the main branch.
The experiment was set up with two subgraphs G1 and G2
where |V1| = |V2| = 7. The attacker selects a subgraph
and delays messages between this subgraph and another,
enforcing an isolated mining environment. Once the delay
is set, the attacker joins one of the subgraphs and begins
to mine onto the current chain. The attacker then delays
the messages until there is a sufﬁcient amount of blocks
mined onto the isolated blockchain for it to be adopted as
the correct chain by the other subgraph. In this experiment,
at t = 60 s, the delay between subgraphs is resolved, and
the subgraphs maintain a connection. Upon reconnection, the
subgraphs invoke the consensus protocol to select and adopt
the correct chain. In this case, using the GHOST protocol,
the heaviest chain is selected for both subgraphs, meaning
the chain mined by G1 is chosen, to which the attacker
contributed.
This
result
reveals
the adoption of a chosen
blockchain is plausible, given that the attacker is able to
sufﬁciently delay messages between subgraphs.
that
VII. SOLUTION WITH NON-FORKABLE BLOCKCHAINS
Corruptibility is a general problem that may affect other
forkable blockchains, especially if they require messages
to be propagated within a time bound, or may experience
disagreement with a non-null probability [27], [13].
A. Other forkable blockchains
First, it is important to note that the corruptibility problem
is not restricted to the GHOST algorithm or to the proof-of-
work mechanism underlying Ethereum but could also apply
to other forkable algorithms as well.
For example, we can slightly change the Balance attack to
work in Bitcoin as well. While in Ethereum it was sufﬁcient
for the attacker to mine on any branch of the blockchain
view of Gj after the block b2 (Alg. 5, line 15), in Bitcoin
the attacker has to mine at the top of the blockchain view
of Gj. By doing so, the attacker increases the length of
the Nakamoto’s main branch in graph Gj. Considering that
each correct miner mines at the top of the longest branch
of their subgroup with the same probability q, the mean of
the number of blocks added to the main branch will become
μbitcoin
. We can then deﬁne two binomial random
c
(cid:3)
j for the expected number of blocks in
variables X
the main branch of Gi and Gj, respectively, and apply a
similar argument as in Section IV.
= (1−ρ)tτ
2dq
(cid:3)
i and X
The absence of proof-of-work does not imply immunity
against the Balance attack. Casper [6] has been proposed
as a proof-of-stake alternative to GHOST for the Ethereum
587
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:34 UTC from IEEE Xplore.  Restrictions apply. 
transaction before discarding the transaction from the main
branch. As the transaction is revoked,
the issuer of the
transaction can reuse the coins of the transaction in another
transaction. As the side effects of the external action cannot
be revoked, the second transaction appears as a “double
spending”.
Perhaps the most basic form of such an attack assumes
that an application takes an external action as soon as a
transaction is included in a block [15], [24], [2]. The ﬁrst
attack of this kind is called Finney’s attack and consists of
solo-mining a block with a transaction that sends coins to
itself without broadcasting it before issuing a transaction
that double-spends the same coin to a merchant. When the
goods are delivered in exchange of the coins, the attacker
broadcasts its block to override the payment of the merchant.
The vector76 attack [40] consists of an attacker solo-mining
after block b0 a new block b1 containing a transaction to
(cid:3)
1 is
a merchant to purchase goods. Once another block b
mined after b0, the attacker quickly sends b1 to the merchant
(cid:3)
1 is accepted by the
for an external action to be taken. If b
system, the attacker can issue another transaction with the
coins spent in the discarded block b1.
The attacks become harder if the external action is
taken after the transaction is committed by the blockchain.
Rosenfeld’s attack [38] consists of issuing a transaction to
a merchant. The attacker then starts solo-mining a longer
branch while waiting for m blocks to be appended so that the
merchant takes an external action in response to the commit.
The attack success probability depends on the number m of
blocks the merchant waits before taking an external action
and the attacker mining power [18]. However, when the
attacker has more mining power than the rest of the system,
the attack, also called majority hashrate attack or 51-percent
attack, is guaranteed successful, regardless of the value m.
To make the attack successful when the attacker owns only
a quarter of the mining power, the attacker can incentivize
other miners to form a coalition [14] until the coalition owns
more than half of the total mining power.
the Ethereum blockchain
blockchain. Even with Casper,
would remain forkable. Validators are incentivized to bet
some coin amount, called value-at-loss, on the block that
they believe will be decided ﬁrst among multiple ones.
Once the aggregated value-at-loss bet by all validiators for
a particular block reaches a threshold, then the block gets
decided and the winning gambler gets rewarded. For the sake
of availability, this threshold has to be adjusted depending
on the responding participants. Like in the Balance attack,
an adversary could delay communication between groups
of nodes to alter the responsiveness of the participants and
the threshold deﬁnition. By contrast with proof-of-work, the
adversary would have to exploit some value-at-loss rather
than its computational power to outweigh the bets and
inﬂuence the selection of the main branch.
B. Non-forkable Blockchains
The crux of the problem of corruptible blockchains is
that they favor availability over consistency. The well-known
CAP theorem, initially mentioned by Brewer at PODC [4]
and proved by Gilbert and Lynch [19], stating the impos-