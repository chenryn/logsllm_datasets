reference actually change the original value. That’s why the value 43 is
displayed on the console.
Remember that C# enforces the rule that you must assign a value to a
variable before you can read it. This rule also applies to method arguments;
you cannot pass an uninitialized value as an argument to a method even if an
argument is defined as a ref argument. For example, in the following
example, arg is not initialized, so this code will not compile. This failure
occurs because the statement param++; within the doIncrement method is
really an alias for the statement arg++;—and this operation is allowed only if
arg has a defined value:
Download from finelybook PI:EMAIL
311
Click here to view code image
static void doIncrement(ref int param)
{
    param++;
}
static void Main()
{
    int arg; // not initialized
    doIncrement(ref arg);
    Console.WriteLine(arg);
}
Creating out parameters
The compiler checks whether a ref parameter has been assigned a value
before calling the method. However, there might be times when you want the
method itself to initialize the parameter. You can do this with the out
keyword.
The out keyword is syntactically similar to the ref keyword. You can
prefix a parameter with the out keyword so that the parameter becomes an
alias for the argument. As when using ref, anything you do to the parameter,
you also do to the original argument. When you pass an argument to an out
parameter, you must also prefix the argument with the out keyword.
The keyword out is short for output. When you pass an out parameter to a
method, the method must assign a value to it before it finishes or returns, as
shown in the following example:
Click here to view code image
static void doInitialize(out int param)
{
    param = 42; // Initialize param before finishing
}
The following example does not compile because doInitialize does not
assign a value to param:
Click here to view code image
static void doInitialize(out int param)
{
    // Do nothing
}
Download from finelybook PI:EMAIL
312
Because an out parameter must be assigned a value by the method, you’re
allowed to call the method without initializing its argument. For example, the
following code calls doInitialize to initialize the variable arg, which is then
displayed on the console:
Click here to view code image
static void doInitialize(out int param)
{
    param = 42;
}
static void Main()
{
    int arg; // not initialized
    doInitialize(out arg); // legal
    Console.WriteLine(arg); // writes 42
}
Note You can combine the declaration of an out variable with its use as
a parameter rather than performing these tasks separately. For example,
you could replace the first two statements in the Main method in the
previous example with the single line of code:
doInitialize(out int arg);
In the next exercise, you will practice using ref parameters.
Use ref parameters
1. Return to the Parameters project in Visual Studio 2017.
2. Display the Pass.cs file in the Code and Text Editor window.
3. Edit the Value method to accept its parameter as a ref parameter.
The Value method should look like this:
Click here to view code image
class Pass
{
Download from finelybook PI:EMAIL
313
    public static void Value(ref int param)
    {
        param = 42;
    }
    ...
}
4. Display the Program.cs file in the Code and Text Editor window.
5. Uncomment the first four statements. Notice that the third statement of
the doWork method, Pass.Value(i), indicates an error. The error occurs
because the Value method now expects a ref parameter. Edit this
statement so that the Pass.Value method call passes its argument as a ref
parameter.
Note Leave the four statements that create and test the WrappedInt
object as they are.
The doWork method should now look like this:
Click here to view code image
class Program
{
  static void doWork()
  {
    int i = 0;
    Console.WriteLine(i);
    Pass.Value(ref i);
    Console.WriteLine(i);
    ...
  }
}
6. On the Debug menu, click Start Without Debugging to build and run the
program.
This time, the first two values written to the console window are 0 and
42. This result shows that the call to the Pass.Value method has
successfully modified the argument i.
Download from finelybook PI:EMAIL
314
7. Press the Enter key to close the application and return to Visual Studio
2017.
Note You can use the ref and out modifiers on reference type
parameters as well as on value type parameters. The effect is the same:
the parameter becomes an alias for the argument.
How computer memory is organized
Computers use memory to hold programs that are being executed and the
data that those programs use. To understand the differences between value
and reference types, it is helpful to understand how data is organized in
memory.
Operating systems and language runtimes such as that used by C#
frequently divide the memory used for holding data into two separate areas,
each of which is managed in a distinct manner. These two areas of memory
are traditionally called the stack and the heap. The stack and the heap serve
different purposes, which are described here:
When you call a method, the memory required for its parameters and
its local variables is always acquired from the stack. When the method
finishes (because it either returns or throws an exception), the memory
acquired for the parameters and local variables is automatically
released back to the stack and is available again when another method
is called. Method parameters and local variables on the stack have a
well-defined lifespan: they come into existence when the method starts,
and they disappear as soon as the method completes.
Note Actually, the same lifespan applies to variables defined in
Download from finelybook PI:EMAIL
315
any block of code enclosed by opening and closing curly braces. In
the following code example, the variable i is created when the
body of the while loop starts, but it disappears when the while loop
finishes and execution continues after the closing brace:
Click here to view code image
while (...)
{
    int i = …; // i is created on the stack here
    ...
}
// i disappears from the stack here
When you create an object (an instance of a class) by using the new
keyword, the memory required to build the object is always acquired
from the heap. You have seen that the same object can be referenced
from several places by using reference variables. When the last
reference to an object disappears, the memory used by the object
becomes available again (although it might not be reclaimed
immediately). Chapter 14 includes a more detailed discussion of how
heap memory is reclaimed. Objects created on the heap therefore have
a more indeterminate lifespan; an object is created by using the new
keyword, but it disappears only sometime after the last reference to the
object is removed.
Note All value types are created on the stack. All reference types
(objects) are created on the heap (although the reference itself is on
the stack). Nullable types are actually reference types, and they are
created on the heap.
The names stack and heap come from the way in which the runtime
manages the memory:
Stack memory is organized like a stack of boxes piled on top of one
Download from finelybook PI:EMAIL
316
another. When a method is called, each parameter is placed in a box
that is placed on top of the stack. Each local variable is likewise
assigned a box, and these are placed on top of the boxes already on the
stack. When a method finishes, you can think of the boxes being
removed from the stack.
Heap memory is like a large pile of boxes strewn around a room rather
than stacked neatly on top of one another. Each box has a label
indicating whether it is in use. When a new object is created, the
runtime searches for an empty box and allocates it to the object. The
reference to the object is stored in a local variable on the stack. The
runtime keeps track of the number of references to each box.
(Remember that two variables can refer to the same object.) When the
last reference disappears, the runtime marks the box as not in use, and
at some point in the future it will empty the box and make it available.
Using the stack and the heap
Now let’s examine what happens when a method named Method is called:
Click here to view code image
void Method(int param)
{
    Circle c;
    c = new Circle(param);
    ...
}
Suppose the argument passed into param is the value 42. When the
method is called, a block of memory (just enough for an int) is allocated from
the stack and initialized with the value 42. As execution moves inside the
method, another block of memory big enough to hold a reference (a memory
address) is also allocated from the stack but left uninitialized. This is for the
Circle variable, c. Next, another piece of memory big enough for a Circle
object is allocated from the heap. This is what the new keyword does. The
Circle constructor runs to convert this raw heap memory to a Circle object. A
reference to this Circle object is stored in the variable c. The following
illustration shows the situation:
Download from finelybook PI:EMAIL
317
At this point, you should note two things:
Although the object is stored on the heap, the reference to the object
(the variable c) is stored on the stack.
Heap memory is not infinite. If heap memory is exhausted, the new
operator will throw an OutOfMemoryException exception, and the
object will not be created.
Note The Circle constructor could also throw an exception. If it does,
the memory allocated to the Circle object will be reclaimed, and the
value returned by the constructor will be null.
When the method ends, the parameters and local variables go out of
scope. The memory acquired for c and param is automatically released back
to the stack. The runtime notes that the Circle object is no longer referenced
and at some point in the future will arrange for its memory to be reclaimed by
the heap. (See Chapter 14.)
The System.Object class
One of the most important reference types in the .NET Framework is the
Object class in the System namespace. To fully appreciate the significance of
the System.Object class, you need to understand inheritance, which is
described in Chapter 12, “Working with inheritance.” For the time being,
Download from finelybook PI:EMAIL
318
simply accept that all classes are specialized types of System.Object and that
you can use System.Object to create a variable that can refer to any reference
type. System.Object is such an important class that C# provides the object
keyword as an alias for System.Object. In your code, you can use object, or
you can write System.Object—they mean the same thing.
Tip Use the object keyword in preference to System.Object. It’s more
direct, and it’s consistent with other keywords that are synonyms for
classes (such as string for System.String and some others that are
covered in Chapter 9).
In the following example, the variables c and o both refer to the same
Circle object. The fact that the type of c is Circle and the type of o is object
(the alias for System.Object) in effect provides two different views of the
same item in memory.
Click here to view code image
Circle c;
c = new Circle(42);
object o;
o = c;
The following diagram illustrates how the variables c and o refer to the
same item on the heap.
Boxing
Download from finelybook PI:EMAIL
319
As you have just seen, variables of type object can refer to any item of any
reference type. However, variables of type object can also refer to a value
type. For example, the following two statements initialize the variable i (of
type int, a value type) to 42 and then initialize the variable o (of type object, a
reference type) to i:
Click here to view code image
int i = 42;
object o = i;
The second statement requires a little explanation to appreciate what is
actually happening. Remember that i is a value type and that it lives on the
stack. If the reference inside o referred directly to i, the reference would refer
to the stack. However, all references must refer to objects on the heap;
creating references to items on the stack could seriously compromise the
robustness of the runtime and create a potential security flaw, so it is not
allowed. Therefore, the runtime allocates a piece of memory from the heap,
copies the value of integer i to this piece of memory, and then refers the
object o to this copy. This automatic copying of an item from the stack to the
heap is called boxing. The following diagram shows the result:
Important If you modify the original value of the variable i, the value
on the heap referenced through o will not change. Likewise, if you
modify the value on the heap, the original value of the variable will not
change.
Download from finelybook PI:EMAIL
320
Unboxing
Because a variable of type object can refer to a boxed copy of a value, it’s
only reasonable to allow you to get at that boxed value through the variable.
You might expect to be able to access the boxed int value that a variable o
refers to by using a simple assignment statement such as this:
int i = o;
However, if you try this syntax, you’ll get a compile-time error. If you
think about it, it’s pretty sensible that you can’t use the int i = o; syntax.
After all, o could be referencing absolutely anything and not just an int.
Consider what would happen in the following code if this statement were
allowed:
Click here to view code image
Circle c = new Circle();
int i = 42;
object o;
o = c; // o refers to a circle
i = o; // what is stored in i?
To obtain the value of the boxed copy, you must use what is known as a
cast. This is an operation that checks whether converting an item of one type
to another is safe before actually making the copy. You prefix the object
variable with the name of the type in parentheses, as in this example:
Click here to view code image
int i = 42;
object o = i; // boxes
i = (int)o; // compiles okay
The effect of this cast is subtle. The compiler notices that you’ve specified
the type int in the cast. Next, the compiler generates code to check what o
actually refers to at runtime. It could be absolutely anything. Just because
your cast says o refers to an int, that doesn’t mean it actually does. If o really
does refer to a boxed int and everything matches, the cast succeeds, and the
compiler-generated code extracts the value from the boxed int and copies it to
i. (In this example, the boxed value is then stored in i.) This is called
unboxing. The following diagram shows what is happening:
Download from finelybook PI:EMAIL
321
On the other hand, if o does not refer to a boxed int, there is a type
mismatch, causing the cast to fail. The compiler-generated code throws an
InvalidCastException exception at runtime. Here’s an example of an
unboxing cast that fails:
Click here to view code image
Circle c = new Circle(42);
object o = c; // doesn't box because Circle is a reference variable
int i = (int)o; // compiles okay but throws an exception at runtime
The following diagram illustrates this case:
You will use boxing and unboxing in later exercises. Keep in mind that
boxing and unboxing are expensive operations because of the amount of
checking required and the need to allocate additional heap memory. Boxing
has its uses, but injudicious use can severely impair the performance of a
program. You will see an alternative to boxing in Chapter 17, “Introducing
generics.”
Casting data safely
Download from finelybook PI:EMAIL
322
By using a cast, you can specify that, in your opinion, the data referenced by
an object has a specific type and that it is safe to reference the object by using
that type. The key phrase here is “in your opinion.”  The C# compiler will not
check that this is the case, but the runtime will. If the type of object in
memory does not match the cast, the runtime will throw an
InvalidCastException, as described in the preceding section. You should be
prepared to catch this exception and handle it appropriately if it occurs.
However, catching an exception and attempting to recover if the type of
an object is not what you expected it to be is a rather cumbersome approach.
C# provides two more very useful operators that can help you perform
casting in a much more elegant manner: the is and as operators.
The is operator
You can use the is operator to verify that the type of an object is what you
expect it to be, like this:
Click here to view code image
WrappedInt wi = new WrappedInt();
...
object o = wi;
if (o is WrappedInt)
{
    WrappedInt temp = (WrappedInt)o; // This is safe; o is a
WrappedInt
    ...
}
The is operator takes two operands: a reference to an object on the left,
and the name of a type on the right. If the type of the object referenced on the
heap has the specified type, is evaluates to true; otherwise, is evaluates to
false. The preceding code attempts to cast the reference to the object variable
o only if it knows that the cast will succeed.
Another form of the is operator enables you to abbreviate this code by
combining the type check and the assignment, like this:
Click here to view code image
WrappedInt wi = new WrappedInt();
...
object o = wi;
Download from finelybook PI:EMAIL
323
...
if (o is WrappedInt temp)
{
    ... // Use temp here
}
In this example, if the test for the WrappedInt type is successful, the is
operator creates a new reference variable (called temp), and assigns it a
reference to the WrappedInt object.
The as operator
The as operator fulfills a similar role to is but in a slightly truncated manner.
You use the as operator like this:
Click here to view code image
WrappedInt wi = new WrappedInt();
...
object o = wi;
WrappedInt temp = o as WrappedInt;
if (temp != null)
{
    ... // Cast was successful
}
Like the is operator, the as operator takes an object and a type as its
operands. The runtime attempts to cast the object to the specified type. If the
cast is successful, the result is returned and, in this example, is assigned to the
WrappedInt variable temp. If the cast is unsuccessful, the as operator
evaluates to the null value and assigns that to temp instead.
There is a little more to the is and as operators than is described here, and
Chapter 12 discusses them in greater detail.
The switch statement revisited
If you need to check a reference against several types, you can use a series of
if…else statements in conjunction with the is operator. The following
example assumes that you have defined the Circle, Square, and Triangle
classes. The constructors take the radius, or side length of the geometric
shape as the parameter:
Click here to view code image
Download from finelybook PI:EMAIL
324
Circle c = new Circle(42);       // Circle of radius 42
Square s = new Square(55);       // Square of side 55
Triangle t = new Triangle(33);   // Equilateral triangle of side 33
...
object o = s;
...
if (o is Circle myCircle)
{
    ... // o is a Circle, a reference is available in myCircle
}
else if (o is Square mySquare)
{    
    ... // o is a Square, a reference is available in mySquare
}
else if (o is Triangle myTriangle)
{    
    ... // o is a Triangle, a reference is available in myTriangle
}
As with any lengthy set of if…else statements, this approach can quickly
become cumbersome and difficult to read. Fortunately, you can use the
switch statement in this situation, as follows:
Click here to view code image
switch (o)
{
    case Circle myCircle:
        ... // o is a Circle, a reference is available in myCircle