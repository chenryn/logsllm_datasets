total service that j receives from all nodes that are ex-
actly h hops away from j in the network.)
Definition 4.7. Arial Service, Sj(h, t). Let Sj(h, t) =
ΣvD(j,h)Sj,v(t). Sj(h, t) denotes the total service that
node j receives from all of the nodes within h hops.
4.5 Worst-case Scenario
In the evaluations described in Section 5, we consider a
“worst-case” scenario in which there is a single malicious
node in a small network of “fully-loaded” nodes.
In our “worst-case” scenario, we assume that all good
nodes in the network are broadcasting ˆρC queries. In
other words, ∀j, t Gj(t) = ∞ where j is a good node,
and the reservation ratio that the good nodes choose is
ρ = ˆρ. The malicious node, as before, has its reservation
ratio set to ρ = 1. The worst-case might be said to model
a real network at 4pm in the afternoon when it is at its
peak load.
4.6 Victim Nodes
In some of our evaluations, we will study the eﬀect of
the malicious node on the network from the point of view
of a “victim” node. In particular, we will be interested in
understanding what is the reduction in service that the
victim node receives if there is a malicious node present
in the network.
As mentioned above, a malicious node in our evalua-
tion is one that sets ρ = 1 in an attempt to ﬂood the
network with “useless” work. The malicious node does
not carry out any behavior that explicitly attacks the
node that we will call the victim. Nevertheless, we will
still use the term victim for the node from whose point of
view we are studying the impact of the malicious node’s
behavior. More speciﬁcally, we study the degradation in
service that the victim node experiences due to the pres-
ence of the malicious node. It is most likely the case that
other nodes suﬀer degradation in the service they receive
from other nodes as well. However, by studying service
degradations for diﬀerent victim nodes in the network,
we build an understanding of how much impact a ma-
licious node has on various relative placements of the
malicious and victim nodes in a particular topology.
We deﬁne the service that the victim node receives
from the network in a worst-case scenario as a service
guarantee.
Definition 4.8. Service Guarantee, Sj(t). Let Sj(t) =
Sj(τ, t). Sj(t) denotes the total service that node j re-
ceives from all of the nodes within τ (TTL) hops.
4.7 Damage
With all of this machinery in place, we are now ready
to quantify the degradation in service that might be
brought about by a malicious node. We call this degra-
dation in service damage.
In the following deﬁnitions, Sj(t) refers to the service
guarantee that j receives from the network when there
is no malicious node present in the network, and Sj(t)
refers to the same quantity when there does exist a ma-
licious node in the network.
186Damage with respect to a victim node j, Dj(t), is
deﬁned as follows:
Definition 4.9. Damage for Victim Node j
Dj(t) =
Sj(t) − Sj(t)
Sj(t)
If Sj(t) = Sj(t), then the malicious node is not able
to aﬀect the service guarantee that j receives from the
network at time t, and the corresponding damage is 0.
On the other hand, if Sj(t) = 0, then the malicious node
is able to prevent j from receiving any service at all at
time t, and the corresponding damage is 1.
We deﬁne cumulative network damage as the sum of
the loss in service incurred by every node in the network
from time 0 to time t.
Definition 4.10. Cumulative Network Damage
D(t) =
Σt
i=0ΣjV (Sj(i) − Sj(i))
Σt
i=0ΣjV Sj(i)
Similarly, the damage is 0 if the malicious node is not
able to have an eﬀect on the network, while the damage
is 1 is the malicious node is able to prevent all remote
work from taking place in the network.
Finally, we deﬁne cumulative radial damage as the
reduction in service that a node j experiences at nodes
h hops away due to the presence of a malicious node.
=
Σt
i=0Σjδ(j,h)Rj (h,i)
Definition 4.11. Cumulative Radial Damage. Dj(h, t)
Σt
i=0Σjδ(j,h)(Rj (h,i)−Rj (h,i))
. Dj(h, t) denotes the dam-
age, or reduction in service that node j receives from all
of the nodes whose shortest distance from j is exactly h.
5. RESULTS
In this section, we present the results of evaluations
run using a simulator that we developed called Fargo.4
Fargo implements the traﬃc model described in Sec-
tion 2, allows us to choose any of the policies described
in Section 3 for a given network topology, and measures
the metrics deﬁned in Section 4.
We chose to evaluate small network topologies and
a single malicious node to build a fundamental under-
standing of the issues and trade-oﬀs that a system ar-
chitect would need to keep in mind when designing a
ﬂood-tolerant system.
All of our evaluations were run on small networks of
either 14 nodes (for complete, cycle, wheel, line, and star
topologies) or 16 nodes (for grid and power-law topolo-
gies5) with a single malicious node in the graph, and all
queries were constructed with a TTL (τ ) of 7.
In the
simulations, each node is given a maximum processing
4Our simulator is named after a city in North Dakota
that is frequently ﬂooded by the Red River of the
North that runs through it. More information about
Fargo, North Dakota and the Red River is available at
http://www.ndsu.nodak.edu/fargoﬂood.
5For the results shown in this paper, we used a partic-
ular instance of a power-law topology as described in
[23]. We are in the process of extending our simulator
to randomly generate a number of power-law topologies,
and average the results over the generated topologies.
capacity of C = 10000 queries per time step, and ˆρ was
experimentally determined to within 0.01 of the actual
value. Each of the evaluations was run for t = 100 time
steps which was suﬃcient to attain steady state in all
cases.
Table 1 shows the cumulative damage incurred for dif-
ferent network topologies for the strategies outlined in
Section 3. The results shown in this table assumed a
worst-case scenario as deﬁned in Section 4.
The ﬁrst column of the table lists the topology used for
a particular simulation. For topologies for which it made
sense, simulations were done in which the malicious node
was placed in diﬀerent positions in the network, and the
position of the malicious node is indicated in parenthesis.
For example, for a star topology, the malicious node
could either be in the center of the star, or at one of the
spokes. As might be expected, when the malicious node
is in the center of a star topology, nodes at the spokes
are unable to answer each other’s queries at all and the
resulting damage is 1.
The results in Table 1 help us answer the following
questions in the indicated sections:
• Which IAS and DS strategies minimize damage the
best? (and which strategies are the worst at mini-
mizing damage?) Does the best IAS / DS strategy
depend upon the topology? Or do diﬀerent IAS/DS
strategies work better for diﬀerent topologies? (Sec-
tion 5.1)
• For a given topology, how much can the damage be
minimized by using the best IAS/DS compared to
other strategies? (Section 5.2)
• For a ﬁxed IAS/DS strategy, how does topology af-
fect damage? Are there certain topologies that are
less prone to damage than others? Are some nodes
particularly susceptible to attack? (Section 5.3)
• How is damage distributed across the network? How
do diﬀerent combinations of policies aﬀect the distri-
bution of damage? (Section 5.4)
5.1 IAS/DS Policies and Damage
Fractional IAS can be used with Equal or PreferHigh-
TTL DSs to minimize damage independent of network
topology. Weighted IAS and PreferLowTTL DS maxi-
mize damage independent of network topology.
From Table 1, we can see that the combination of
the Fractional IAS together with either the Equal or
PreferHighTTL DSs minimize damage independent of
topology and the location of the malicious node. The
Fractional IAS limits the maximum number of queries
that arrive from a particular link in the face of an over-
abundance of queries. All nodes that are adjacent to a
malicious node will accept only some fraction of the ma-
licious node’s queries, and all nodes that are two hops
away from the malicious node will only accept some frac-
tion of that fraction. As such, the number of malicious
queries that are received by a node drops oﬀ quickly
with the node’s distance away from the malicious node.
Of those queries that are received from adjacent nodes,
the Equal DS fairly distributes available query band-
187Topology (Location)
Complete
Cycle
Grid (Center)
Grid (Corner)
Grid (Edge)
Line (Center)
Line (End)
Power-Law (High)
Power-Law (Low)
Star (Center)
Star (Edge)
Wheel (Center)
Wheel (Edge)
Prop
0.143
0.388
0.273
0.225
0.282
0.324
0.175
0.272
0.201
1.000
0.142
0.386
0.335
Equal
0.143
0.314
0.227
0.170
0.191
0.248
0.148
0.262
0.169
1.000
0.143
0.386
0.337
Fractional
PfHighTTL
PfLowTTL
0.143
0.312
0.274
0.187
0.208
0.330
0.143
0.284
0.193
1.000
0.142
0.386
0.354
0.143
0.533
0.292
0.286
0.378
0.515
0.275
0.324
0.267
1.000
0.143
0.386
0.388
Prop
0.545
0.527
0.454
0.371
0.412
0.428
0.219
0.539
0.443
1.000
0.526
0.726
0.505
Equal
0.545
0.459
0.363
0.270
0.306
0.306
0.184
0.505
0.367
1.000
0.506
0.751
0.444
Weighted
PfHighTTL
PfLowTTL
0.545
0.387
0.422
0.247
0.294
0.398
0.165
0.484
0.386
1.000
0.542
0.717
0.510
0.545
0.695
0.569
0.570
0.553
0.609
0.346
0.612
0.534
1.000
0.545
0.751
0.573
Table 1: Total Cumulative Network Damage as a function of topology, IAS, and DS
width based on the origin of the queries, so the malicious
node’s queries are given the same weight as queries from
other nodes, even if the malicious nodes sends many,
many more of them. The PreferHighTTL DS performs
well also because malicious queries stay localized– they
are given lower and lower preference as they travel away
from the malicious node.
The Equal and PreferHighTTL DSs perform compa-
rably in many cases, although the Equal strategy per-
forms better in general in most topologies we consid-
ered. In the few cases that PreferHighTTL performed
better, the diﬀerence was marginal. However, Equal DS
requires queries to be “stamped” with the node at which