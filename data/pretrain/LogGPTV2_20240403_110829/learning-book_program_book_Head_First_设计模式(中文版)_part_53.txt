步骤一：
接口定义了要供客户调用
制作远程接口
的远程方法。
远程接口定义出可以让客户远程调用的
MyService.java
方法。客户将用它作为服务的类类型。
Stub和实际的服务都实现此接口。
步骤二：
真正的服务。这个类具有方
制作远程的实现
法，做真正的工作。它实现
这是做实际工作的类，为远程接口中定义
远程接口。
的远程方法提供了真正的实现。这就是客
MyServicelmpl.java
户真正想要调用方法的对象（例如，我们
的GumballMachine）。
就会产生两个
新的类，作为转助
步骤三：
用rmic执行实现服务的类.
对象
利用rmic产生的stub和skeleton。
这就是客户和服务的辅助类。你不需自己创建
File Edit Window Help Eat
这些类，甚至连生成它们的代码都不用看，因
rmic MyServiceImpl
为当你运行rmic工具时，这都会自动处理。你
MyServicelmpl_Stub.class
可以在JDK中找到rmic。
步骤四：
启动RMlregistry（rmiregistry）
MyServicelmpl_Skel.class
rmireistry就像是电话簿，客户可以从中查到
Fie Edt Window Help Drin
代理的位置（也就是客户的stubhelper对象）。
rmiregistry
在另一个终
端上执行
步骤五：
开始远程服务
Flle Edit Wind
你必须让服务对象开始运行。你的服务实现类会去
java MyServiceImpl
实例化一个服务的实例，并将这个服务注册到RMI
registry。注册之后，这个服务就可以供客户调用了。
你现在的位置
441
---
## Page 478
制作远程接口
步骤一：制作远程接口
①扩展java.rmi.Remote。
Remote是一个“记号”接口，所以Remote不具有方法。对于RMI来说，
Remote接口具有特别的意义，所以我们必须遵守规则。请注意，我们这
里说的是“扩展”（extends），因为接口可以“扩展”另一个接口。
这表示此接口要用来支持选程
K
调用。
public interface MyRemote extends Remote{
②声明所有的方法都会抛出RemoteException。
客户使用远程接口调用服务。换句话说，客户会调用实现远程接口的
Stub上的方法，而Stub底层用到了网络和I/O，所以各种坏事情都可能会发
生。客户必须认识到风险，通过处理或声明远程异常来解决。如果接口中
的方法声明了异常，任何在接口类型的引用上调用方法的代码也必须处理
或声明异常。
每次远程方法调用都必
须考虑成是“有风险
的”。在每个方法中声明
public interface MyRemote extends Remote{
客户注意到这件事，并了
）
解这可能是无法工作的。
③确定变量和返回值是属于原语（primitive）类型或者可序列化（Serializable）
类型。
远程方法的变量和返回值，必须属于原语类型或Serializable类型。这不难如果你需爱复习一下
理解。远程方法的变量必须被打包并通过网络运送，这要靠序列化来完Sertia6lxa6le，可
合），都不会有问题。如果你传送自已定义的类，就必须保证你的类实现了
Serializable。
public String sayHello() throws RemoteException;
这个返回值将从服务器经过网络运图给客户，所以必须是
Setialixable的。这样，才可将变量和返回值打包并传送。
442第11章
---
## Page 479
代理模式
步骤二：制作远程实现
①实现远程接口。
RMI浏览
你的服务必须实现远程接口，也就是客户将要调用的方法的接口。
public String sayHello(）(<
接口所有的方法。在这个例子
77类中更多的代码
中.只有一个方法。
②扩展UnicastRemoteObject。
为了要成为远程服务对象，你的对象需要某些“远程的”功能。最简单的
方式是扩展java.rmi.server.UnicastRemoteObject，让超类帮你做这些工作。
③设计一个不带变量的构造器，并声明RemoteException。
你的新超类UnicastRemoteObject带来一个小间题：它的构造器抛出
RemoteException。唯一解决这个问题的方法就是为你的远程实现声明一个
构造器，这样就有了·个声明RemoteException的地方。当类被实例化的时
候，超类的构造器总是会被调用。如果超类的构造器抛出异常，那么你只能
声明子类的构造器也抛出异常。
public MyRemoteImpl()throws RemoteException（)
何代码，只需要有办法声明
超类构造器会抛出异常
④用RMIRegistry注册此服务。
现在你已经有一个远程服务了，必须让它可以被远程客户调用。你要做的是将此服
务实例化，然后放进RMIregistry中（记得先确定RMIRegistry正在运行，否则注册
会失败）。当注册这个实现对象时，RMI系统其实注册的是stub，因为这是客户真正
需要的。注册服务使用了java.rmi.Naming类的静态rebind(方法。
为你的服务命名，好让客户用来在注册表
try{
中寻找它.并在RM3resistry中注册此名
MyRemote service = new MyRemoteImpl();
字和此服务。当你绑定（bind）服务对象
Naming.rebind("RemoteHello"，servif
时，RM3全把服务换成sta6，然后把stb放到
}catch（Exception ex)(...)
tegistry中.
你现在的位置，443
---
## Page 480
Stub和Skeleton
步骤三：产生Stub和Skeleton
在远程实现类（不是远程接口）上执行rmic
rmic是JDK内的一个工具，用来为一个服务类产生
stub和skeleton。命名习惯是在远程实现的名字后面
加上_Stub或_Skel。rmic有一些选项可以调整，包括
RM3C产生两个新
不要产生skeleton、查看源代码，甚至使用IIOP作为
请注意，不需要在末尾
类.作为辅助对
加“.class”，只要类名称
协议。我们这里使用rmic的方式是常用的方式，将类
就可以了。
产生在当前目录下（就是你cd到的地方）。请注意，
rmic必须看到你的实现类，所以你可能会从你的远
File Edit Win
rmic MyRemoteImpl
程实现所在的目录执行rmic（为了简单起见，我们
MyRemotelmpl_Stub.class
这里不用package。但是在真实世界中，你必须注意
package的目录结构和名称问题）。
MyRemotelmpl_Skel.class
步骤四：执行remiregistry
开启一个终端，启动rmiregistry
先确定启动目录必须可以访问你的类。最简单的做法
8rmiregistry
是从你的“classes”目录启动。
步骤五：启动服务
开启另一个终端，启动服务
从哪里启动？可能是从你的远程实现类中的main(方
java MyRemoteImpl
法，也可能是从一个独立的启动类。在这个简单的
例子中，我们是从实现类中的main()方法启动的，先
实例化一个服务对象，然后到RMIregistry中注册。
444
第11章
---
## Page 481
代理模式
服务器端的完整代码
RMI浏览
远程接口：
RemoteException和远程接口在ja
import java.rmi.*;
mi色中。
public interface MyRemote extends Remote(
你的接口必须扩展java.tmi.Remote。
public String sayHello() throws RemoteException;
所有的远程方法都必须声明
RemoteException,
远程服务（实现）：
UnicastRemoteObject在java.mi
import java.rmi.*;
sever包中。
想要创建一个远程对象，护展
import java.rmi.server.*;
UnicastRemoteObject是最容易的方法。
你必须实现选程接口。当然
public String sayHello()
你必须要实现所有的接口方
你必须实现你的远程接口！
return "Server says,
"Hey""：
法，但请注意，不需要声明
RemoteException。
publicMyRemoteImpl()throws RemoteException(}
你的超类（UnicastRemoteObject）构造器声
明了异常，所以你必须写一个构造器，因
public static void main(String[]args)(
为这意味着你的构造器正在调用不安全的
代码（它的超构造器）。
MyRemote service =new MyRemoteImpl():
Naming.rebind("RemoteHello", service);
}catch(Exception ex)(
先产生远程对象，再使用Namins.zebind(）绑定到
ex.printStackTrace();
rmiresistry。客户将使用你所注册的名称在RM9
resisty中寻找它。
你现在的位置，
445
---
## Page 482
如何取得stub对象？
客户如何取得stub对象？
客户必须取得stub对象（我们的代理）以调用其中的方法。
所以我们就需要RMIRegistry的帮忙。客户从Rcgistry中寻找
（lookup）代理，就好像在电话簿里寻找一样，说：“我要
找这个名字的stub。”
我们现在就来看看那些我们需要寻找并取得某个stub对象的
代码。
想知道这一切是怎么工作
的，看这里。
再靠近一点
客户总是使用运程接口作为
服务类型，事实上客户不需
要知道远程服务的真正类名
是什么。
lookup(）是Namins类的榜态方
这必须是注册时用的
法。
名字。
MyRemote service =
(MyRemote)Naming.1ookup("rmi://127.0.0.1/RemoteHello");
（ookup（）的返回值是
用来指出服务运行位置
Object类型.你必须把它
的主机名或炉地址。
转成远程接口。
446
第11章
---
## Page 483
代理模式
RMI浏览
客户
服务器
sayHello()
③
返回Stub
Skeleton
Stub
工
②
RMIregistry
（在服务器上）
Remote
Hello
Stub
工作方式···
①客户到RMIregistry中寻找。
Naming.1ookup(rmi://127.0.0.1/RemoteHe11o) ;
②RMIregistry返回Stub对象。
（作为lookup方法的返回值）然后RMI会自动对stub反序列化。你在客
户端必须有stub类（由rmic为你产生），否则stub就无法被反序列化。
③客户调用stub的方法，就像stub就是真正的服务对
PDG
象一样。
你现在的位置
447
---
## Page 484
远程客户
完整的客户代码
用来做tmiresistrylookup的Namins类在java
tmi包中
import java.rmi.*;
public class MyRemoteClient(
public static void main (String[]args)(
new MyRemoteClient().go();
public void go()(
返回值是O6ject类型，所以别忘了转换
类型。
try(
MyRemote service =(MyRemote) Naming.1ookup(rmi://127.0.0.1/RemoteHello );
T
↑
String s = service.sayHello();
你需要炉地址或主机名。
大
以及服务被绑定/重
System.out.println(s);
)catch(Exception ex）(
看起来和一般的老式方法调用
绑定时用的名称。
ex.printStackTrace();
没什么两样：（除了必须注意
RemoteException外。）
极客秘笈
客户如何取得stub类？
现在我们有一个有趣的问题。不管怎样，客户在做lookup时必须有stub类（之前利用rmic产生
的），否则stub在客户端就无法被反序列化，一切也就告吹。客户端也需要调用远程对象方法所返
回的序列化对象的类。如果是一个简单的系统，可以简单地把这些类移交到客户端。
还有一种更酷的方式，虽然超出本书范围，但是你可能会感兴趣，所以还是稍微提一下。这个酷方
法是“动态类下载”（dynamicclassdownloading），利用动态类下载，序列化的对象（像stub）
可以被“贴”上一个URL，告诉客户的RMI系统去寻找对象的类文件。在反序列化对象的过程中，
如果RMI没有在本地发现类，就会利用HTTP的GET从该URL取得类文件。所以你需要一个简单的
Web服务器来提供这些类文件，也需要更改客户端的安全参数。关于动态类下载，还有一些值得注
意的主题，但是我们这里只是简述一下。
特别对于stub对象，客户还有另外一种方法可以取得类，但是只有Java5才支持。我们会在本章末
尾说明。
448
第11章
---
## Page 485
代理模式
RMI浏览
注意！
对于RMI，程序员最常犯的三个错误是：
1)忘了在启动远程服务之前先启动rmiregistry（要用Naming.rebind（）注册服务，
rmiregistry必须是运行的）。
2)忘了让变量和返回值的类型成为可序列化的类型（这种错误无法在编译期发现，只会在
运行时发现）。
3)忘了给客户提供stub类。
服务器
客户
Skeleton
Stub
Stub
别忘了，客户使用远程
接口调用stu6的方法。虽
然客户3UM需要stu6类
MyServicelmpl.class
MyServicelmpl_Stub.class
但从来不在代码中引用
Client.class
MyServicelmpl_Stub.class
stub类。客户总是使用
远程接口，就如同远程
接口就是真正的远程对
MyServicelmpl_Skel.class
象一样。
MyRemote.class
MyRemote.class
服务器需要Stub和Skeleton类，也
需要服务和远程接口。之所以金需
要stub类，是因为stub是真正服务
的替身，当真正服务被绑定到RMJ
registry时，其实真正被绑定的是sta6。
你现在的位置
449
---
## Page 486
远程糖果监视器
回头讨论我们的GumballMachine远程
结束
代理
浏览
OK，我们已经有了RMI的基础知识，现在可以用RMI实现糖果机的远程
代理了。我们来看看GumballMachine是如何套用RMl框架的：
CEO的桌面
带2UM的远程糖果机。