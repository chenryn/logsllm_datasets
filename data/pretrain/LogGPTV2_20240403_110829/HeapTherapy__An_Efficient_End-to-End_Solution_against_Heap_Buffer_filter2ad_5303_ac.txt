Guard page
Fig. 8: A buffer over-read that spans multiple buffers and
touches a guard page.
.
2) Detection and Diagnosis
Once an over-read touches a guard page, a segmentation
fault is triggered and the signal handler installed by HeapTher-
apy is invoked. The magic word helps the handler determine
whether the signal was due to an access to a guard page or
not. The handler then terminates the program and produces
a core dump for diagnosis. In Linux, we can determine the
segmentation fault was due to a read or write based on
the information saved in the context variable passed to
the signal handler. Thus, this works as another approach to
detecting over-write attacks.
Given a single over-read attack, the actual detection prob-
ability Pd may be larger than Pm, because an over-read might
span several adjacent buffers. We evaluate the actual detection
probability Pd in Section V-A1. Large volumes of attacks is a
common exploitation of an over-read bug for information theft.
Due to the random distribution of guard pages, n repetitive
over-read attacks is detected at a probability 1− (1−Pd)n; that
is, the detection probability increases quickly when n grows.
It is challenging to locate the vulnerable buffer directly
by scanning the core dump. As shown in Figure 8, the over-
read might span several buffers, so the buffer right before the
touched guard page is actually not vulnerable. HeapTherapy
uses a two-stage identiﬁcation method to ﬁnd the vulnerable
buffer. In the ﬁrst stage, the diagnosis engine searches back
from the starting address of the guard page to the ending
address of a previous guard page or inaccessible area. Since an
overﬂow due to continuous read cannot pass a guard page or
inaccessible area, the vulnerable buffer must lie between these
two addresses, and all buffers between these two addresses are
suspect buffers.
The CCID of each suspect buffer is used to generate a tem-
porary patch. These temporary patches will guide HeapTher-
apy to append a guard page to every buffer with a suspect
CCID in the next run, so that the same attack will touch the
guard page appended to a vulnerable buffer. In the second
stage, the diagnosis engine retrieves the CCID from the guard
page and removes temporary patches due to other suspect
CCIDs.
3) Discussion .
The detection and diagnosis has some disadvantages. First,
if the attacker ﬁnishes the exploitation with one or very few
attack without being detected, the approach fails. However, in
practice the attacker usually launches a large number of attacks
to get enough chunks until target information is obtained. For
example, in Heartbleed exploitation millions of attacks are
launched to steal critical information [13].
Second, extra performance overhead can be incurred due to
protection applied to suspect buffers. The period of the stage
can be very short, as long as repetitive attacks are launched in
a short time. Moreover, our evaluation in Section V-A shows
that when Pm = 0.01 the average number of suspect CCIDs
is 28.74, which is small compared with the total number of
allocation CCIDs (Table I), and this number reduces to 3.7
when Pm increases to 0.04.
4) Buffer Release .
When a free is invoked, HeapTherapy ﬁrst turns the
appended guard page, if it exists, to be accessible and resets the
magic word and canaries, and then deallocates the buffer using
the underlying memory allocator’s original free function. To
locate the guard page, the buffer size ﬁeld at the head of the
buffer is used.
It is worth mentioning that our implementation does not de-
pend on speciﬁc allocation algorithms. The memory allocator
of HeapTherapy is implemented as a wrapper of the underlying
allocator, which hooks the buffer allocation and deallocation
requests. The additional buffer size ﬁeld in the buffer structure
is critical for our implementation to keep independent from the
underlying allocation algorithm.
D. Defenses
Given a VCCID, the diagnosis engine generates a tempo-
rary patch as deﬁned below:
tuple of
Deﬁnition 4.1: Temporary Patch. A temporary patch
(cid:3)VCCID,T,L,G(cid:4), where T ∈
is
a
{OV ERREAD,OV ERW RIT E} indicates the bug type, L ≥ 0
is the number of bytes used as padding, and G ∈ {Y ES,NO}
indicates whether a guard page is needed.
integers
The use of padding and the case of avoiding guard pages
safely are explained later. Temporary patches for a program
are stored in a conﬁguration ﬁle. When the program starts,
HeapTherapy loads each patch into a hash table with its VC-
CID used as the key. During program execution, HeapTherapy
interposes all memory allocation functions including malloc,
calloc, realloc, and memalign.
We use malloc as an example to demonstrate how
HeapTherapy handles an allocation request. As illustrated in
Figure 9, it searches the current CCID in the hash table. It it
does not match any installed patch, a structure I or II buffer is
allocated to detect over-write and over-read attacks. Otherwise,
a structure III buffer is allocated to shield vulnerable buffers
from attacks.
the structure of
Figure 10 shows
such a shielded
buffer, which is constructed according to some patch
(cid:3)VCCID,T,L,G(cid:4). If G = Y ES and L = 0, a guard page is
appended to the user buffer directly, so that whenever an over-
read or over-write occurs, the guard page is touched, which
490490
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:54:20 UTC from IEEE Xplore.  Restrictions apply. 
int t = V; // Read the current CCID
Patch *p = hashtable.search(t);
if(p == NULL) {
// For over-write detection
allocate a structure I buffer;
// For over-read detection
allocate a structure II buffer;
if(rand() > Pm) {
1 void* malloc(size_t size) {
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17 }
}
return buffer address;
} else
}
} else {
// Shield the buffer according to p
allocate a structure III buffer;
Fig. 9: The pseudo code of the malloc function.
Page 
boundary
Guard page
Buffer 
size
User buffer
GUARD
padding                          
_MAGIC CCID
Fig. 10: Buffer structure III: a shielded buffer.
triggers a segmentation fault signal automatically to prevent
data corruption, control hijacking and information leak. This
protection is similar to that provided by those memory-safe
languages, such as Java and C#, which throw an exception
and terminate program execution whenever a buffer overﬂow
occurs. It is also the best protection that can be provided by
most countermeasures against buffer overﬂows.
We consider some other enhancement which potentially
provides better protection. A desirable protection is that,
under attacks, the program execution continues safely without
being exploited. While protecting the continuity of program
execution is not the focus of this work, as a preliminary step
towards this goal, we explore the application of padding to
buffer allocation in order to mitigate program termination.
Padding is a straightforward and commonly used idea,
but it will be very expensive if it is applied to every buffer
allocation. A unique advantage of HeapTherapy is that
it
identiﬁes vulnerable buffers, which are usually a small portion
of the whole set of buffers; therefore, expensive enhancement,
such as guard pages and padding, can be applied to vulnerable
buffers only without incurring a high overall overhead.
Currently HeapTherapy infers the size of padding based on
some simple heuristics. Given an over-write attack, it ﬁnds out
the length of overﬂow based on corrupted canaries. Given an
over-read attack, it combines the information collected in the
two stages to infer the length. In both cases, it is possible that
the padding is not large enough to contain the overﬂow, and
the guard page will still be touched. In that case, HeapTherapy
will increase the padding size based on predeﬁned policies. In
our current implementation, HeapTherapy doubles the padding
size. The adaptive padding growth works well in cases when
491491
the overﬂow length is limited due to the program interface
or logic. Web servers, for example, typically set the limit
on length for URLs up to 4096 characters [3]. For a DNS
serve, the full domain name may not exceed the length of 253
characters [1]. Due to the 16-bit size ﬁeld in a Heartbleed
request, the maximum length of read in a Heartbleed response
is 64KB. If in a patch T = OV ERREAD, to avoid information
leakage the padding is zeroed when a buffer is allocated.
Finally, if a thorough analysis shows that some reasonable size
of padding is large enough to contain all overﬂows exploiting
a given vulnerability, the guard page is not needed in this case.
In the cases where the overﬂow length is unlimited or
very large, in order to avoid exhausting memory, HeapTherapy
enforces an upper bound for padding deﬁned by the user.
Some more advanced protection can be applied conveniently
when the padding is not large enough and the guard page is
touched. For example, failure-oblivious computing omits the
overrun operations and continues [36]; the reactive immune
system returns an error code for the current function invocation
that leads to an overﬂow [41]. Both techniques incur a high
overhead mainly due to expensive methods identifying such
attack operations as overﬂows, while HeapTherapy provides an
efﬁcient and automatic way to capture overﬂows. Therefore, it
will be an interesting research topic by combing these ideas
with HeapTherapy to support program execution continuity.
E. Additional Features
1) Instant patch generation .
Conventional patch generation is a long process. The user
needs to provide the input that reproduces the problem to the
software company, and then waits until the software gets back
with the patch, which usually takes more than one month [43].
HeapTherapy can be used as an ofﬂine tool to quickly generate
temporary patches once an input reproducing the overﬂow
attack is available. The user can simply set Pm to be 1 and then
run the program with the input. In this situation, HeapTherapy
accurately locates the vulnerable buffer, which is right before
the touched guard page, and generates the temporary patch.
2) Collaborative patching .
A temporary patch generated at one site can be shared
with other machines running the same vulnerable program.
Therefore, the effort of detection and patch generation can
be aggregated across machines to handle large scale zero-day
attacks. Once a machine detects and generates a patch, the
patch can be distributed to protect other machines. So that a
large scale attack can be defeated before it plagues the Internet.
.
3) Patching without restart
In our current implementation the program is restarted after
a patch is generated. For complicated programs, the time to
restart may be long. To speed up the service recovery upon
patching, the checkpointing and recovery technique can be
used to resume the service from a clean state [33]. This is
particularly useful for request-handling services, where most
heap buffers allocations and deallocations are associated with
per request. Once the patch is installed, when the attacker sends
a new malicious request, shielded buffers will be allocated to
prevent attacks.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:54:20 UTC from IEEE Xplore.  Restrictions apply. 
Program
Heartbleed
MySQL 5.5.19
Lynx 2.8.8dev.1
libtiff 4.02
SAMATE Dataset
Vulnerability
over-read
over-write
over-write
over-write
12 heap buffer
overﬂow cases
Reference
CVE-2014-0160
CVE-2012-5612
CVE-2010-2810
CVE-2013-4243
N/A
TABLE II: Vulnerabilities for effectiveness evaluation.
V. EVALUATION
We ﬁrst evaluate the effectiveness of HeapTherapy against
buffer overﬂow attacks, and then measure the efﬁciency of
HeapTherapy on service programs and the SPEC CPU2006
Integer benchmark suite.
A. Effectiveness
We evaluate the effectiveness of HeapTherapy using 4
real-world vulnerabilities and 12 test cases provided by NIST
listed in Table II. The Lynx case was covered in Section III.
1) Heartbleed .
Heartbleed attack. The recently exposed Heartbleed
vulnerability in OpenSSL threatens millions of
Internet
services [17]. By sending an ill-formed heartbeat request, the
attacker can over-read a buffer on the heap and steals up
to 64KB data from the memory. While a Heartbleed attack
is widely classiﬁed as an over-read attack, our investigation
shows that the attack can actually exploit two heap-based
vulnerabilities: an uninitialized read bug and an over-read
bug. Speciﬁcally,
the victim buffer has 34KB, while the
attacker can manipulate the length l of the read over this
buffer. If l ≤ 34KB, it is just an uninitialized read attack that
leaks old data inside the buffer. Otherwise, the attack is a
mix of uninitialized read and over-read. In this case study, we
focus on over-read, and avoid the uninitialized read simply by
zero-ﬁlling the buffer. A more systematic study of this issue
can be found in [48].
Experiment setting. Nginx is the third most widely
used web server. We use Nginx 1.3.9 and OpenSSL
1.0.1f to create a vulnerable HTTPS service. The program
is compiled through our PCC encoding pass and linked with
HeapTherapy’s shared library. OpenSSL optionally uses a
freelist to manage heap buffers, so that when a buffer of certain
lengths is freed, it will be stored in the freelist. In order that
HeapTheray interposes heap memory management, we use the
ﬂag OPENSSL_NO_BUF_FREELIST provided by OpenSSL
to disable the use of the freelist. We obtain a Heartbleed