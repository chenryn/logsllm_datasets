used in targeted attacks that could result in arbitrary code execution with 
the privileges of the current user.6 The one exception was the last OOB 
Security Bulletin that Microsoft released to address an information disclosure 
vulnerability in ASP.NET, which security researchers Juliano Rizzo and Thai 
Duong publicly disclosed at the Ekoparty security conference in Buenos Aires. 
At the end of their presentation, they threw three USB flash drives containing 
documentation of the vulnerability and a working exploit into the audience.7
Oracle uses quarterly patching cycles through releases of Critical Patch 
Updates (CPUs). Oracle has historically released CPUs on the Tuesday 
closest to the 15th day of the quarterly month. In 2010, Oracle’s OOB 
security advisories came in the form of out-of-cycle security alerts. Oracle 
has released two out-of-cycle security alerts to address a trivially exploited 
vulnerability affecting Oracle WebLogic Server; a malicious actor could use 
this vulnerability to gain unauthorized access to a vulnerable host to execute 
arbitrary commands without any user interaction.8 The other out-of-cycle 
security alert was in response to publicity due to the public disclosure of two 
vulnerabilities in Sun Java; with these vulnerabilities, malicious actors could 
execute arbitrary code on a victim’s system by social engineering the victim 
into viewing a malicious website.9 Prior to 2010, the last out-of-cycle security 
alert was in July 2008 for a buffer overflow vulnerability in xine-lib, which 
affected multiple vendors.10
Cisco uses a semiannual scheduled patching cycle that occurs on the fourth 
Wednesday of March and September and only applies to the Cisco IOS, which 
is Cisco’s operating system that powers Cisco’s vast array of routers and 
network switches. Cisco released three IOS out-of-cycle security bulletins in 
2009, even though there were no reports indicating that malicious users were 
exploiting the fixed vulnerabilities. On Jan. 20, 2010, Cisco released a single 
security advisory outside its semiannual scheduled release to fix a memory 
exhaustion vulnerability in IOS that could result in a denial of service (DoS) 
condition; however, Cisco would likely argue that this vulnerability does not 
classify as an OOB security release since the vulnerability did not fit any of 
Cisco’s conditions for making an out-of-cycle release.11
A month after Adobe’s first scheduled quarterly patch release for Acrobat 
and Reader on June 9, 2009, Adobe released its first out-of-cycle security 
bulletin during late July 2009, to address a PDF vulnerability that attackers 
were exploiting in the wild.12 Much like the vulnerabilities that Microsoft fixed 
OOB, the four vulnerabilities that Adobe fixed OOB started as either exploits 
or malware that malicious actors used in targeted attacks, with the exception 
6 Microsoft Internet Explorer Invalid Pointer Reference Code Execution Vulnerability (ID# 560358, Jan. 14, 2010); Microsoft Internet 
Explorer Invalid Pointer Reference Memory Corruption Vulnerability (ID# 578152, March 9, 2010); Microsoft Windows Shortcut .lnk 
Design Error Vulnerability (ID# 601740, July 16 2010).
7  Microsoft ASP.NET Ciphertext Padding Information Disclosure Vulnerability (ID# 617272, Sept. 18, 2010).
8 Oracle Weblogic Server Node Manager Command Execution Vulnerability (ID# 563044, Jan. 25, 2010).
9 Maurice, Eric. “Security Alert for CVE-2010-0886 and CVE-2010-0887 Released.” April 15, 2010. Oracle Corp. http://blogs.
oracle.com/security/2010/04/security_alert_for_cve-2010-08.html; Oracle Java SE and Java for Business Desktop Java Deployment 
Toolkit Unspecified Vulnerability (ID# 595164, May 18, 2010); Oracle Java SE and Java for Business Desktop Java New Java Plug-in 
Unspecified Vulnerability (ID# 595165, May 18, 2010).
10 Multiple Vendor xine-lib 1.1.10.1 sdpplin_parse() Function Buffer Overflow Vulnerability (ID# 468070, March 11, 2008).
11 “Products & Services Security Vulnerability Policy - Cisco Systems.” Sept. 8, 2010. Cisco Systems Inc. http://www.cisco.com/en/
US/products/products_security_vulnerability_policy.html.
12 Adobe Flash ActionScript Parsing Memory Corruption Vulnerability (ID# 492133, July 20, 2009).
9
Disruptors
of one vulnerability;13 the exception was an integer overflow vulnerability that 
emerged from the Black Hat 2010 conference in Las Vegas, which could allow 
an attacker to execute arbitrary code on a targeted host.14
1.2.2  Changing Vulnerability Disclosure Landscape
The vulnerability disclosure landscape dramatically changed over the course 
of the year. The emergence of multiple vendor bounty programs, increase 
in standard payment for vulnerabilities, and the creation of coordinated 
vulnerability disclosure reenergized relationships between security researchers 
and vendors. 
Early this year, Google announced it would offer researchers cash rewards for 
bugs and vulnerabilities found in its browser, Chrome. This program, similar 
to Mozilla’s Firefox bounty program, received criticism because security 
researchers felt the cash reward was too small. Security researchers could 
sell their work to brokers for a much larger compensation. Mid-year, Mozilla 
announced it would pay researchers up to $3,000 US for critical vulnerabilities 
found in its browser, Firefox. Google quickly responded by offering security 
researchers up to $3,133.73 US. Thus, a bidding war began for researchers’ 
efforts, raising the industry’s standard payment for vulnerabilities.
The price bump signified a change in the overall posture by vendors for 
vulnerability research. Vendors are embracing the overall change in the 
economics of vulnerability research. Vulnerabilities and bugs are no longer 
free. Rather than rewarding researchers with T-shirts and recognition, vendors 
are giving security researchers real cash incentives for helping make vendors’ 
products more secure. This once one-way street has become a two-way street 
for security researchers and vendors. The cash incentive has proven very 
effective in the case of Google. The number of bugs and vulnerabilities that 
people have submitted to Google has dramatically increased since the bounty 
prize increase. The success of Chrome’s bounty program spawned Google’s 
latest bounty program, which it designed to fortify Google’s array of Web 
applications.
Microsoft outlined a new form of responsible disclosure. Microsoft coined 
the new disclosure type “coordinated vulnerability disclosure” or CVD. CVD 
follows the core principles of responsible disclosure but further defines 
coordination with three basic philosophies: vendors and discoverers need 
to work closely toward a resolution; vendors should make extensive efforts 
to respond in a timely manner; and only in the event of active attacks 
should vendors use public disclosure, which should focus on mitigation and 
workarounds.15
Microsoft created CVD in response to two opposing views on the disclosure 
of vulnerabilities: responsible disclosure and full disclosure. Responsible 
disclosure gives vendors a chance to patch vulnerabilities before the public 
knows about them; however, this type of disclosure can result in vendors 
13 Adobe Reader and Acrobat 9.3 LibTiff Integer Overflow Vulnerability (ID# 572570, Feb. 16, 2010); Adobe Flash Player 10.0.45.2, 
Reader 9.3.2 and Acrobat 9.3.2 Remote Code Execution Vulnerability (ID# 595312, June 5, 2010); Adobe Acrobat and Reader 
Cooltype.dll Memory Corruption Vulnerability (ID# 614986, Sept. 18, 2010).
14 Adobe Acrobat and Reader CoolType.dll True Type Font Integer Overflow Vulnerability (ID# 607161, Aug. 4, 2010).
15 Thomlinson, Matt. “Announcing Coordinated Vulnerability Disclosure.” July 22, 2010. Microsoft. http://blogs.technet.com/b/msrc/
archive/2010/07/22/announcing-coordinated-vulnerability-disclosure.aspx.
“Vendors are 
embracing the 
overall change in 
the economics 
of vulnerability 
research. 
Vulnerabilities and 
bugs are no longer 
free.”
10
Disruptors
delaying the fix of vulnerabilities, which may allow a miscreant to discover 
such vulnerabilities and use them in targeted attacks. Full disclosure provides 
malicious users with details to use against unpatched software but could 
also enable immediate preventive action, and it pressures vendors to quickly 
develop a fix for such vulnerabilities.
Tavis Ormandy, a security researcher for The Google Security Team, released 
details for a critical vulnerability in Microsoft Windows on Full Disclosure 
on June 10.16 Microsoft acknowledged the vulnerability the same day 
and reiterated that it advocates responsible disclosure and encourages 
security researchers to work with it on providing mitigation for an issue and 
coordinating the release of details.17
The Google Security Team responded in its blog with Google’s stance 
on disclosure policies. The blog discussed the differences, benefits and 
shortcomings of the two disclosure models (responsible disclosure and full 
disclosure).
Microsoft’s efforts to redefine responsible disclosure into coordinated 
vulnerability disclosure are the software giant’s way of realigning itself with 
the evolving vulnerability disclosure landscape. Vendors such as Google and 
Mozilla realize that vulnerability research is no longer about recognition but 
rather has evolved into a source of income for many professional security 
researchers. This year marked many changes in the security field, but none of 
those changes were as dramatic as the change between vendor and security 
researcher relationships.
1.2.3  Vendor Bounty Programs
1.2.3.1  Mozilla Security Bug Bounty Program
Mozilla initiated a bug bounty program in August 2004,18 in which it 
compensated security researchers $500 US and a T-shirt19 to report critical 
security bugs in both Thunderbird and Firefox. In July of this year, the 
bounty increased to $3,000 US. The increase was due the evolving cyber 
landscape. A movement called “No more free bugs” was a contributing factor 
to the change; this movement supported the idea that security researchers 
believed that vendors should compensate them for newly discovered security 
vulnerabilities. Security researchers Charlie Miller, Dino Dai Zovi and Alex 
Sotirov advocated these sentiments in 2009 during CanSecWest.
Mozilla’s security engineering director, Lucas Adamski, acknowledged the 
transitioning cyber landscape and believed that increasing the compensation 
would improve relations between security researchers and Mozilla. 
Additionally, this would prompt researchers to responsibly disclose the 
vulnerabilities to Mozilla and improve the safety of its products.
The higher compensation by Mozilla has the potential to drive more security 
16 Microsoft Windows Help and Support Center Malformed Escape Sequence Vulnerability (ID# 595633, June 10, 2010).
17 Reavey, Mike. “Windows Help Vulnerability Disclosure.” June 10, 2010. Microsoft. http://blogs.technet.com/b/msrc/
archive/2010/06/10/windows-help-vulnerability-disclosure.aspx.
18 Staff. “MOZILLA FOUNDATION ANNOUNCES SECURITY BUG BOUNTY PROGRAM.” Aug. 2, 2004. Mozilla Foundation. http://
www-archive.mozilla.org/press/mozilla-2004-08-02.html.
19 Staff. “Mozilla Security Bug Bounty Program.” Aug. 11, 2010. Mozilla Foundation. http://www.mozilla.org/security/bug-bounty.html.
“Full disclosure 
provides malicious 
users with details 
to use against 
unpatched software 
but could also 
enable immediate 
preventive action, 
and it pressures 
vendors to 
quickly develop 
a fix for such 
vulnerabilities.”
11
Disruptors
researchers to present high-quality bugs; however, the program has been 
in place since July of this year and it is too soon to tell the effectiveness of 
the program. Since the increase, the number of vulnerabilities has increased 
slightly, but one could attribute this to the increase in the number of existing 
vulnerabilities over the years. The number of Mozilla vulnerabilities year over 
year has increased on average about 11 percent.
1.2.3.2  Google Security Bug Bounty Program
Google presented a similar program to reward security researchers for 
their work. Payment for general vulnerabilities was $500 US and for severe 
vulnerabilities, $1,337 US. Google considered severe bugs “leet,” which is 
hacker slang for elite. The program received scrutiny from security researchers 
stating that the amount was too low. Mozilla also offered $500 US for bugs—
the same amount that it provided in 2004. The first 6 months of Google’s bug 
bounty program yielded 21 bugs. Google considered one the 21 bugs to be 
“leet.”
Soon after Mozilla increased its bounty to $3,000 US, Google reacted by 
increasing its maximum bounty to $3,133.73 US. This amount is the numeric 
translation of “elite.” The increase in the bounty generated greater interest and 
resulted in the disclosure of more vulnerabilities in a shorter period of time 
than previous bounty amounts did.20
The addition of the sandbox feature in Chrome makes it difficult for security 
researchers to discover high-severity vulnerabilities.21 Chris Evans of Google 
Chrome Security stated that the sandbox feature in Chrome requires security 
researchers to spend more time discovering bugs. Google justifies the high 
bounty by the amount of work that goes into researching those bugs. The 
limited number of security researchers and the amount of time that goes into 
discovering bugs requires researchers to focus on one particular browser. This 
situation can drive researchers to research bugs in the browser that pays out 
the most.
On Nov. 1, 2010, Google announced a new, experimental bounty program 
that extends to Google Web properties.22 Such Google Web properties include 
.google.com, .youtube.com, .blogger.com and .orkut.com.23 The same rules 
and bug bounty rewards apply to newly discovered bugs. Google plans to 
extend the program to its client-based applications in the near future, which 
include Android, Picasa and Google Desktop.24
Even though the program started on the wrong foot, Google’s bounty program 
has reported more vulnerabilities since its bounty increase. Since the increase, 
the amount of $1,337 US bounties has quadrupled, but Google has yet to 
pay out the “elite” amount. The increase in disclosures is a clear indicator 
that more researchers are dedicating more time to find higher-quality bugs 
20 “Security Hall of Fame.” Sept 9, 2010. Google Inc. http://dev.chromium.org/Home/chromium-security/hall-of-fame; Evans, Chris. 
“Celebrating Six Months of Chromium Security Rewards.” July 20, 2010. Google Inc. http://google-chrome-browser.com/celebrating-
six-months-chromium-security-rewards.
21 Ibid.
22 “Rewarding web application security research.” Nov. 1, 2010. Google Inc. http://googleonlinesecurity.blogspot.com/2010/11/
rewarding-web-application-security.html.
23 Ibid.
24 Ibid.
12
Disruptors
in Chrome. With the extension of the experimental bug bounty program to 
Web-based applications and the hard learn lesson from the beginning of the 
program, Google can expect a similar turnaround of high-quality bugs.
13
Disruptors
2  Disruptors
2.1  Introduction
In 1997, Clayton Christensen published his book “The Innovator’s Dilemma,”25 
in which he postulated a theory about disruptive technology. Essentially, 
innovations can emerge that fundamentally change how an industry services 
its customer base. Some businesses fail because leadership does not 
recognize the change fast enough to compete.
These business catalysts are not enhancements or improvements to existing 
ideas, but rather are radical and innovative solutions that sometimes, at 
first glance, appear only to service a niche audience. Over time, use of 
these innovations builds momentum and eventually dominates the space. 
The heretofore best practice solutions wither and die while the innovation 
takes over. One example that Christensen uses to prove his point is the size 
reduction of computer disk drives.26
Hard drives have gone through repeated design innovations from the early 
1960s to the early 1990s. The disruptive technology that caused some 
businesses to fail came with each reduction. For example, when the 5.25-
inch floppy drives started to appear on the personal computer market, the 
dominant floppy drive manufacturers were producing 8-inch floppy drives 
for minicomputers. According to the Christensen, the 8-inch producers did 
not anticipate the demand for the 5.25-inch floppies until it was too late and 
businesses failed.
In 2007, iDefense introduced the concept of the cyber security disruptor: new 
ideas, technologies, government policies or events (cyber security catalysts) 
in the next 5-10 years that could fundamentally change how organizations 
protect their cyber assets.27 Since 2007, iDefense analysts have identified 
disruptive catalysts worthy of the disruptor definition. Each of these catalysts 
represents a technology, law or forecasted event that will completely change 
the security community at some level. This type of change is at the heart of 
the disruptor. Change is the reason that iDefense spends so much time trying 
to describe the concept and identify the key disruptors. The idea is to give the 
security community leadership a chance to prepare for a completely different 
way of doing business.
Consider the timeline in Exhibit 2-1. The far right outlines predictions 10 years 
into the future. This is the event horizon when iDefense analysts begin to track 
the innovations that will affect the future enterprise.  
At the far left is the past: 2005 and prior. This is the area where current 
security best practices reside, where technology leaders have agreed that 
certain solutions work well to mitigate specific security problems. In the 
case of disruptors, these mitigation options have become industry-accepted 
solutions. Technologies such as firewalls, anti-virus engines and IDS reside 
here. 
25 Christensen, Clayton M. “The Innovator’s Dilemma.” Harper, 1997.
26 Ibid, pp. 15-19.
27 Cyber Disruptors: the Next Five Years (ID# 465310, Nov 5, 2007).
“Since 2007, 
iDefense analysts 
have identified 
disruptive catalysts 
worthy of the 
disruptor definition. 
Each of these 
catalysts represents 
a technology, law 
or forecasted event 
that will completely 
change the security 
community at some 
level.”
14
Disruptors
2005
2006
2007
2008
2009
2010
2011
2012
2013
2014
2015
2016
2017
2018
2019
2020
Today
Early Adopters
Predictions
Distruptors
Best Practices