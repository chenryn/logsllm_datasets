# 十四、服务网格和无服务器
本章讨论高级 Kubernetes 模式。首先，它详细介绍了流行的服务网格模式，其中可观察性和服务到服务的发现由 sidecar 代理处理，并提供了一个设置受欢迎的服务网格 Istio 的指南。最后，描述了无服务器模式以及如何在 Kubernetes 中应用。本章中的主要案例研究将包括为示例应用和服务发现设置 Istio，以及 Istio 入口网关。
让我们从讨论 sidecar 代理开始，它为服务网格构建了服务到服务连接的基础。
在本章中，我们将涵盖以下主题:
*   使用 sidecar 代理
*   向 Kubernetes 添加服务网格
*   在 Kubernetes 上实现无服务器
# 技术要求
为了运行本章中详细介绍的命令，您将需要一台支持`kubectl`命令行工具的计算机，以及一个工作正常的 Kubernetes 集群。参见 [*第一章*](01.html#_idTextAnchor016)*与 Kubernetes*通讯，了解几种快速与 Kubernetes 一起起床跑步的方法，以及如何安装`kubectl`工具的说明。
本章使用的代码可以在本书的 GitHub 资源库中找到[https://GitHub . com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/chapter 14](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter14)。
# 使用边车代理
正如我们在本书前面提到的，侧车是一种模式，其中除了要运行的实际应用容器之外，Pod 还包含另一个容器。这个额外的“额外”容器是边车。边车可以用于许多不同的原因。边车最常见的用途是监控、记录和代理。
对于日志记录，sidecar 容器可以从应用容器中获取应用日志(因为它们可以共享卷并在本地主机上通信)，然后将日志发送到集中的日志栈，或者解析日志以发出警报。监控也是类似的情况，边车 Pod 可以跟踪和发送关于应用 Pod 的指标。
使用 sidecar 代理，当请求进入 Pod 时，它们首先进入代理容器，然后代理容器将请求路由(在记录或执行其他过滤之后)到应用容器。类似地，当请求离开应用容器时，它们首先到达代理，代理可以提供 Pod 之外的路由。
通常，代理侧车，如 NGINX，只为进入 Pod 的请求提供代理。然而，在服务网格模式中，进入和离开 Pod 的请求都通过代理，这为服务网格模式本身提供了基础。
参考下图，了解 sidecar 代理如何与应用容器交互:
![Figure 14.1 – Proxy sidecar](img/B14790_14_001.jpg)
图 14.1–代理边车
如您所见，sidecar 代理负责将请求路由到 Pod 中的应用容器，并允许服务路由、日志记录和过滤等功能。
sidecar 代理模式是基于 DaemonSet 的代理的替代方案，其中每个节点上的代理 Pod 处理代理到该节点上的其他 Pod。Kubernetes 代理本身类似于 DaemonSet 模式。使用 sidecar 代理可以提供比使用 DaemonSet 代理更大的灵活性，但会牺牲性能效率，因为需要运行许多额外的容器。
Kubernetes 的一些流行代理选项包括:
*   *engine*
*   *幸福〔t1〕*
*   *特使*
虽然 NGINX 和 HAProxy 是更传统的代理，但特使是专门为分布式云原生环境构建的。由于这个原因，特使形成了流行服务网格的核心和为 Kubernetes 构建的 API 网关。
在我们谈到特使之前，让我们讨论安装其他代理作为侧车。
## 使用 NGINX 作为边车反向代理
在我们指定如何将 NGINX 用作边车代理之前，需要注意的是，在即将发布的 Kubernetes 版本中，边车将是一种 Kubernetes 资源类型，允许将边车容器轻松注入大量 Pods。但是，目前必须在 Pod 或控制器(副本集、部署和其他)级别指定侧车容器。
让我们看看如何将 NGINX 配置为边车，下面是部署 YAML，我们暂时还不会创建。这个过程比使用 NGINX 入口控制器更手动。
出于空间方面的原因，我们将 YAML 分成了两部分，并去掉了一些多余的部分，但是您可以在代码库中看到它的全部内容。让我们从部署的容器规范开始:
金克斯钢铁厂：
```
   spec:
     containers:
     - name: myapp
       image: ravirdv/http-responder:latest
       imagePullPolicy: IfNotPresent
     - name: nginx-sidecar
       image: nginx
       imagePullPolicy: IfNotPresent
       volumeMounts:
         - name: secrets
           mountPath: /app/cert
         - name: config
           mountPath: /etc/nginx/nginx.conf
           subPath: nginx.conf
```
如您所见，我们指定了两个容器，一个是我们的主应用容器`myapp`，另一个是`nginx`边车，我们通过卷装载注入了一些配置作为以及一些 TLS 证书。
接下来，让我们看看同一个文件中的`volumes`规格，我们注入了一些证书(来自一个机密)和`config`(来自一个`ConfigMap`):
```
    volumes:
     - name: secrets
       secret:
         secretName: nginx-certificates
         items:
           - key: server-cert
             path: server.pem
           - key: server-key
             path: server-key.pem
     - name: config
       configMap:
         name: nginx-configuration
```
如您所见，我们需要证书和密钥。
接下来，我们需要使用`ConfigMap`创建 NGINX 配置。NGINX 配置如下所示:
engine x . conf 文件:
```
http {
    sendfile        on;
    include       mime.types;
    default_type  application/octet-stream;
    keepalive_timeout  80;
    server {
       ssl_certificate      /app/cert/server.pem;
      ssl_certificate_key  /app/cert/server-key.pem;
      ssl_protocols TLSv1.2;
      ssl_ciphers EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:!EECDH+3DES:!RSA+3DES:!MD5;
      ssl_prefer_server_ciphers on;
      listen       443 ssl;
      server_name  localhost;
      location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_pass http://127.0.0.1:5000/;
      }
    }
}
worker_processes  1;
events {
    worker_connections  1024;
}
```
如您所见，我们有一些基本的 NGINX 配置。重要的是，我们有`proxy_pass`字段，它将请求代理到`127.0.0.1`或本地主机上的一个端口。由于 Pod 中的容器可以共享本地主机端口，这就充当了我们的边车代理。出于本书的目的，我们不会回顾所有其他行，但请查看 NGINX 文档，了解每一行的更多信息([https://nginx.org/en/docs/](https://nginx.org/en/docs/))。
现在，让我们从这个文件创建`ConfigMap`。使用以下命令强制创建`ConfigMap`:
```
kubectl create cm nginx-configuration --from-file=nginx.conf=./nginx.conf
```
这将导致以下输出:
```
Configmap "nginx-configuration" created
```
接下来，让我们在 NGINX 中为 TLS 制作证书，并将它们嵌入到一个 Kubernetes 机密中。您将需要安装 CFSSL (CloudFlare 的 PKI/TLS 开源工具包)库来遵循这些说明，但是您可以使用任何其他方法来创建您的证书。
首先，我们需要创建**证书颁发机构** ( **CA** )。从证书颁发机构的 JSON 配置开始:
金尼克卡：
```
{
   "CN": "mydomain.com",
   "hosts": [
       "mydomain.com",
       "www.mydomain.com"
   ],
   "key": {
       "algo": "rsa",
       "size": 2048
   },
   "names": [
       {
           "C": "US",
           "ST": "MD",
           "L": "United States"
       }
   ]
}
```
现在，使用 CFSSL 创建 CA 证书:
```
cfssl gencert -initca nginxca.json | cfssljson -bare nginxca
```
接下来，我们将要求 CA 配置:
Nginxca-config.json：
```
{
  "signing": {
      "default": {
          "expiry": "20000h"
      },
      "profiles": {
          "client": {
              "expiry": "43800h",
              "usages": [
                  "signing",
                  "key encipherment",
                  "client auth"
              ]
          },
          "server": {
              "expiry": "20000h",
              "usages": [
                  "signing",
                  "key encipherment",
                  "server auth",
                  "client auth"
              ]
          }
      }
  }
}
```
我们还需要一个证书请求配置:
金尼克查德：
```
{
  "CN": "server",
  "hosts": [
    ""
  ],
  "key": {
    "algo": "rsa",
    "size": 2048
  }
}
```
现在，我们真的可以做证书了！使用以下命令:
```
cfssl gencert -ca=nginxca.pem -ca-key=nginxca-key.pem -config=nginxca-config.json -profile=server -hostname="127.0.0.1" nginxcarequest.json | cfssljson -bare server
```
作为我们的证书机密的最后一步，通过最后一个`cfssl`命令，从证书文件的输出中创建 Kubernetes 机密:
```
kubectl create secret generic nginx-certs --from-file=server-cert=./server.pem --from-file=server-key=./server-key.pem
```
现在，我们终于可以创建我们的部署:
```
kubectl apply -f nginx-sidecar.yaml 
```
这将产生以下输出:
```
deployment "myapp" created
```
为了检查 NGINX 代理功能，让我们创建一个服务来指导我们的部署:
engine-sidecar 服务：
```
apiVersion: v1
kind: Service
metadata:
 name:myapp
 labels:
   app: myapp
spec:
 selector:
   app: myapp
 type: NodePort
 ports:
 - port: 443
   targetPort: 443
   protocol: TCP
   name: https
```
现在，使用`https`访问集群的任何节点应该会产生一个工作的 HTTPS 连接！然而，由于我们的证书是自签名的，浏览器将显示一条*不安全的*消息。
现在，您已经了解了如何使用 NGINX 作为 Kubernetes 的侧车代理，让我们继续讨论更现代的云原生代理侧车-特使。
## 使用特使作为边车代理
特使是为云原生环境构建的现代代理。在本章稍后我们将讨论的 Istio 服务网格中，特使同时充当反向和正向代理。然而，在我们到达伊斯蒂欧之前，让我们尝试部署特使作为代理人。
我们将告诉特使使用路由、侦听器、集群和端点将各种请求路由到哪里。这一功能是 Istio 的核心，我们将在本章稍后部分回顾。
让我们浏览一下特使配置的每个部分，看看它是如何工作的。
### 特使听众
特使允许配置一个或多个侦听器。对于每个监听器，我们指定一个端口供特使监听，以及我们想要应用于监听器的任何过滤器。
过滤器可以提供复杂的功能，包括缓存、授权、**跨产地资源共享** ( **CORS** )配置等等。特使支持将多个过滤器链接在一起。
### 特使路线
某些过滤器具有路由配置，该配置指定应该接受请求的域、路由匹配和转发规则。
### 特使集群