The length of the longest common subsequence is an 
intuitive  measure  of  similarity  between  two  strings  [17]. 
To  improve  its  capabilities  as  a  tool  for  comparison,  a 
scoring function can be used to rank different alignments 
so that biologically plausible alignments score higher. The 
scoring  function  assigns  positive  scores 
to  aligned 
characters  that  either  match  or  are  known  to  be  similar. 
Negative  scores  are  assigned  to  both  aligned  characters 
that  are  dissimilar  and  characters  that  are  aligned  with 
gaps.  Typically,  the  score  of  an  alignment  is the  sum  of 
the  scores  of  each  aligned  pair  of  symbols.  The  task  of 
optimal sequence alignment is to find the highest scoring 
alignment for a given scoring function and pair of strings. 
An efficient dynamic programming algorithm for optimal 
sequence  alignment  was  first  presented  by  Needleman 
and  Wunsch  [13].    Similar  to  the  length  of  the  longest 
common  subsequence,  the  alignment  score  serves  as  a 
metric  for  quantifying  similarity  among  input  strings.  
Alignments  are  not  only  a  useful  metric  for  measuring 
similarity,  but  the  alignments  themselves  serve  as  an 
important visual tool in assessing the similarity. Figure 1 
shows  an  example  of  a  typical  alignment  where  a  dash 
indicates  a  gap  and  a  vertical  bar  indicates  a  character 
match. 
--GTGACATGCGAT--AAGAGG---CCTT--AGATCCGGATCTT
 | ||| ||||||  |||      ||||  ||||| |  ||||
GGGAGAC-TGCGATACAAG---TTACCTTGTAGATCTG—TCTT
Key: - gap 
| match 
Figure 1: Example of sequence alignment 
While computing the optimal alignment of two strings 
has proven to be a useful tool in the comparison of entire 
strings, it is often important to identify more subtle types 
of  similarity.    While  two  strings  may  not  possess 
homogeneity  over  their  entire  length,  they  may  contain 
smaller  substrings 
  To 
accommodate  for  this  possibility,  Smith  and  Waterman 
[16]  designed  a  modification  of  the  Needleman-Wunsch 
alignment  algorithm  to  compute  a  local  alignment.  
Rather than align two strings over their entire length, the 
local alignment algorithm aligns a substring of each input 
that  are  highly  similar. 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:52:05 UTC from IEEE Xplore.  Restrictions apply. 
string.    Given  a  scoring  function  and  two  strings  A  = 
a1a2...am  and  B  =  b1b2...bn,  with  m  <=  n,  the  local 
alignment problem is to find substrings α and β of A and 
B, respectively, whose alignment score is maximum over 
all possible pairs of substrings from A and B.
Previously, an alignment implied that every  character 
from one string had to be aligned with either a character 
from the other string or a gap.  Thus, every character in 
the  two  input  strings  contributed  to  score  of  the  optimal 
alignment.  This type  of an alignment is referred to as a 
global  alignment. 
  In  a  local  alignment,  only  the 
characters in the two aligned substrings contribute to the 
score  of  the  optimal  alignment.  Thus,  for  each  string,  a 
suffix  and  a  prefix  are  ignored  by  the  scoring  system.  
Figure 2 shows the difference between a global and local 
alignment.  By allowing a suffix and prefix to be ignored, 
a local alignment can discover subtle regions of similarity 
that may go undetected by a global alignment algorithm. 
While this problem appears to be much more difficult in 
terms of complexity, the Smith-Waterman local alignment 
algorithm is only a slight modification of the Needleman-
Wunsch global alignment algorithm. 
Global Alignment:
--AGATCCGGATGGT--GTGACATGCGAT--AAG--AGGCGTT
    ||| |  |  |  ||||| ||||||  |||  |  | || 
GTCCATCTG--TCTTGGGTGAC-TGCGATACAAGTTA--CCTT
Local Alignment:
--AGATCCGGATGGT--GTGACATGCGATA--AG--AGGCGTT
                 ||||| ||||||| 
GTCCATCTG--TCTTGGGTGAC-TGCGATACAAGTTA--CCTT
Figure 2: Global alignment vs. local alignment 
is 
the 
Global  alignment 
tool  of  choice  when 
comparing two strings that are believed to possess overall 
similarity.    Typically,  the  two  strings  are  approximately 
equal in length.   Whereas,  local alignment is  the tool  of 
choice  when  comparing  two  strings  whose  lengths  are 
significantly  different. 
  Local  alignment  allows  a 
substring  of  the  larger  input  string  to  be  matched  to  the 
smaller  string.    Typically,  a  global  alignment  algorithm 
would  fail  to  identify  such  similarity  since  most  of  the 
characters from the longer string would have to be aligned 
with gaps resulting in a negative score. 
There are  applications  where neither local nor global 
alignment  is  appropriate  for  characterizing  the  types  of 
similarity that may arise.  These types  of alignments are 
often referred to as semi-global. In a local alignment, both 
a  prefix  and  suffix  of  both  input  strings  can  be  ignored.  
Thus, the alignment only involves a substring of each of 
the two input strings.  In a semi-global alignment, you can 
choose  to  align  only  prefixes  or  suffixes  of  the  original 
input strings.  In Figure 3, the first alignment allows only 
prefixes to be ignored, whereas the second alignment only 
allows suffixes to be ignored. 
Figure 3: Examples of semi-global alignments 
3. Detection Algorithm 
3.1 Overview 
In  the  field  of  bioinformatics,  sequence  alignment  is 
used  to  determine  the  similarity  between  two  DNA  or 
protein  sequences,  in  a  global,  semi-global,  or  local 
context,  by  aligning  the  nucleotides  or  amino  acids  in 
each sequence, and producing a score that indicates how 
well 
the  sequences  align  with  one  another,  and, 
consequently,  how  similar  they  are.    We  can  use  this 
concept  to  align  sequences  of  commands,  rather  than 
nucleotides  or  amino  acids,  and  produce  a  score  that 
indicates how similar the two command sequences are to 
one another.  By aligning a small segment of commands 
with  the  user’s  signature,  we  can  use  the  score  of  the 
alignment as an indicator of the presence of an intrusion 
within the segment that we are testing. 
There  are  a  number  of  factors  that  predispose  these 
sequence  alignment  algorithms  for  use  in  masquerade 
detection, namely their abilities to find high-level patterns 
within  the  alignment  data  and  the  sheer  number  of 
parameters that can be changed to suit different types  of 
data.    These  parameters  can  be  changed  to  allow  for 
different  alignments  of  the  data,  which  can  then  bring 
about new high-level pattern matching.  In particular, we 
can use these properties not only to match commands, but 
also  to  match  generalized  patterns  that  a  user  might  be 
prone  to  over  the  course  of  a  number  of  computing 
sessions.  In this way, we are able to more readily judge 
how indicative a sequence of commands is of a user, not 
just  by  the  commands  themselves,  but  also  by  the  high-
level patterns embedded within the commands. 
3.2 Alignment Algorithm 
To  use  a  sequence  alignment  in  the  detection  of  a 
masquerading user,  we  use  a  modification  of  the  Smith-
Waterman local alignment algorithm to compute a semi-
global alignment.  The problem with using a purely local 
alignment  to  characterize  similarity  between  command 
sequences is that both a prefix and suffix can be ignored 
in  both  sequences.  For  intrusion  detection,  it  is  critical 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:52:05 UTC from IEEE Xplore.  Restrictions apply. 
that  we  align  the  majority  of  the  tested  block  of 
commands to the user’s signature.  If we were to allow a 
large  prefix  and  large  suffix  of  the  tested  block  of 
commands to be ignored then the intrusion itself might be 
ignored.  The  problem  with  using  a  purely  global 
alignment  is  that  there  may  be  large  portions  of  the 
signature that do not necessarily align with a segment of 
the user’s commands. Thus, we want to design a scoring 
system  that  rewards  the  alignment  of  commands  in  the 
user  segment  but  does  not  necessarily  penalize  the 
misalignment  of  large  portions  of  the  signature.  In  the 
remainder  of  this  section  the  signature  sequence,  which 
represents  the  user’s  typical  command  behavior,  will  be 
referred  to  as  the  UserSig.    The  monitored  command 
sequence,  which  may  contain  a  possible  subsequence  of 
masquerader  commands,  will  be  referred  to  as  the 
IntrBlck (tested block). 
The algorithm, shown in Figure 4, starts by initializing 
a  matrix  of  floats,  which  is  used  to  store  the  score 
throughout the alignment process.  Each position (i, j) in 
the  matrix  corresponds  to  the  optimal  score  of  an 
alignment ending at UserSigi and IntrBlckj. This optimal 
score  is  computed  by  starting at  the upper  left  corner  of 
the  matrix  (i.e.,  at  the  point  (0,0))  and  then  recursively 
making  a  step  yielding  the  maximum  from  the  three 
following options:  
Option 1 (diagonal step): The score ending at position 
(i-1,j-1) plus matchScore(UserSigi,IntrBlckj), which is 
a  penalty  or  reward  for  aligning  the  UserSig’s  ith
command with the IntrBlck’s jth command.  
Option 2 (top-down step): The score ending at position
(i,  j-1)  plus  gUserSig,  which  is  the  penalty  for 
introducing a gap into the UserSig. 
Option 3 (left-right step): The score ending at position
(i-1,j)  plus  gIntrBlck,  which  is  the  penalty  for 
introducing a gap into the IntrBlck.
If  Option  1  yields  the  largest  value,  then the  optimal 
alignment matches UserSigi with IntrBlckj.  If Option 2 or 
Option  3  yields  the  largest  score,  then  the  optimal 
alignment  associates  either  UserSigi  or  IntrBlckj  with  a 
gap. 
There  are  three  essential  parameters  used  in  the 
scoring 
system.  The  matchScore(UserSigi,IntrBlckj)
function returns a negative value if the two commands do 
not  match  well  and  a  positive  value  if  they  do.    The 
gUserSig  and  gIntrBlck  are  negative  gap  penalties 
associated  with  inserting  gaps  into  the  UserSig  and 
IntrBlck, respectively. 
If  Option  1  or  Option  2  results  in  a  negative  value, 
then the alignment score is reset to zero. This zeroing of 
the score allows a prefix of both the UserSig and IntrBlck 
to  have  an  arbitrary  number  of  un-penalized  gaps.    The 
assumption is that a portion of the UserSig can be ignored 
without penalty.  Since the UserSig is significantly longer 
than  the  IntrBlck,  it  is  expected  that  most  of  the 
commands  in  the  UserSig  will  not  participate  in  the 
alignment.  Also,  a  small  portion  of  the  IntrBlck  can  be 
ignored.    However,  there  is  a  difference  in  ignoring 
portions of UserSig and IntrBlck, since a high alignment 
score  should  not  be  achievable  if  a  large  portion  of  the 
IntrBlck  is  ignored.    Thus,  any  alignment  that  ignores  a 
large  prefix  of  the  IntrBlck  should have  a relatively  low 
score.    Similarly,  when  the  algorithm  reaches  the  right-
most  column  or  the  bottom-most  row  of  the  matrix,  the 
gap  penalty  is  not  applied.    Thus,  either  a  suffix  of  the 
UserSig  or  a  suffix  of  the  IntrBlck  is  ignored.    Once 
again, if the latter is true then the alignment score will be 
relatively low. 
Input: string UserSig of length m, string IntrBlck of length n 
1. Initialize a matrix, D, of type integer 
2. for i=0 to m 
3.   
4.   
5.   
6.   
7.   
8.   
9.   
10.  
11.  
12.  
13.  
14.  
15.  
16.  
17. return D[m][n]; 
if(j=n or i=m) 
else 
diagonal=D[i-1][j-1] + matchScore(UserSigi-1,IntrBlckj-1); 
D[i][j]=maximum(top,left,diagonal); 
top=D[i][j-1] – gUserSig; 
left=D[i-1][j] – gIntrBlck; 
if(top<0) top=D[i][j-1]; 
if(left<0) left=D[i-1][j]; 
top=D[i][j-1]; 
left=D[i-1][j]; 
for j=0 to n 
if(j=0 or i=0) 
D[i][j]=0; 
else 
Figure 4: Semi-global alignment algorithm 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:52:05 UTC from IEEE Xplore.  Restrictions apply. 
Each gap inserted into the UserSig corresponds to an 
IntrBlck  command  that  is  ignored.  Similarly,  each  gap 
inserted  into  the  IntrBlck  corresponds  to  the  ignored 
UserSig command.  To minimize the number of ignored 
IntrBlck  commands,  the  gUserSig  penalty  is  set  higher 
than the gIntrBlck penalty. The overall scoring scheme is 
designed to reward an IntrBlck that can be almost entirely 
aligned to the UserSig with a minimal number of gaps and 
mismatches. 
its 
In  order  to  understand  this  algorithm’s  viability  in  a 
real-time  environment,  we  must  consider 
time 
complexity, so that we can determine how quickly it will 
be  able  to  run.    Our  algorithm,  like  the  original  Smith-
Waterman algorithm, has a time and space complexity of 
O(mn), where m is the size of the UserSig and n is the size 
of  the  IntrBlck.    In  general,  this  is  not  a  very  quick 
algorithm;  however,  in  the  case  of  the  masquerade 
problem, our set of data is relatively small, and, therefore, 
doesn’t  hamper  the  real-time  discovery  of  intruders.    In 
specific, we have a UserSig size of 5000 and an IntrBlck
size  of  100  for  each  test,  so  we  then  have  500,000 
iterations,  which  a  modern  computer  could  perform  in 
less  than a  second.    Additionally,  we  must  consider  that 
the  use  of  commands  by  a  user  will not  occur  at  such  a 
fast rate as to cause the time complexity of this algorithm 
to become a factor in the detection of intruders. 
3.3 Scoring Scheme Determination 
The  goal  of  our  alignment  algorithm  is  to  match 