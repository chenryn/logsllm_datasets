---
## Page 183
代码
解题思路
给定两个整数 n 和 k，返回 1..n 中所有可能的k个数的组合。
题目大意
Example:
 Given two integers n and k, return all possible combinations of k numbers out of .. n.
·计算排列组合中的组合，用 DFS 深搜即可，注意剪枝
func generateCombinations(n, k, start int, c []int, res *[][]int) 
func combine(n int, k int) [][]int { 
package leetcode
output:
Input: n = 4，k = 2 
if nn { 
generateCombinations(n, k, l, C, &res)
C，res := []int{}， [][]int{} 
for i := start; i = O；j--{ // 遍历 i 的每一位
stack := []int{}
for -, org := range res {
C = c[:len(c)-1] 
generatesubsets(nums, k, i+l, C, res)
C = append(c, nums[i]) 
*res = append(*res, b)
copy(b，c)
b := make([]int, len(c))
tmp:=i// i 从000...000 到111...111
return 
clone := make([]int, len(org), len(org)+l)
res = append(res, clone)
clone = append(clone, nums[i])
copy(clone, org)
>= 1 
stack = append([]int{nums[j]3, stack...)
---
## Page 187
visited, word, index+l， nx, ny) {
func searchword(board [][]byte, visited [][]bool, word string, index, x, y 
func exist(board [][]byte, word string) bool {
var dir = [][]int{
package leetcode
int）bool{
if index == len(word)-1 {
([o]peoq)ual >   0 = x  0 = finder {
finder++
 startFinder = finder 
break
对数组中的元素进行去重，使得原数组中的每个元素最多暴露2个。最后返
然后返回数组实际剩余
---
## Page 190
题目大意
Follow up:
Example 2: 
You are given a target value to search. If found in the array return true, otherwise return 
(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2] ).
Suppose an array sorted in ascending order is rotated at some pivot unknown to you
题目
81. Search in Rotated Sorted Array ll
● This is a follow up problem to Search in Rotated Sorted Array, where nums may contain
Example 1:
false.
beforehand.
● Would this affect the run-time complexity? How and why?
Output: false
Input: nums = [2,5,6,0,0,1,2], target = 3 
Output: true
Input: nums = [2,5,6,0,0,1,2], target = 0 
duplicates.
return last + 1
if finder == len(nums)-1 {
} else {
if nums[finder] != nums[last-1] { 
nums[last+l] = nums[finder]
return last + 1
last++
last += 2 
nums[last+2] = nums[finder]
nums[last+1] = nums[finder-1]
 nums[last] = nums[finder] 
---
## Page 191
代码
解题思路
进阶：
编写一个函数来判断给定的目标值是否存在于数组中。若存在返回 true，否则返回 false。
[2,5,6,0,0,1,2])。
假设按照升序排序的数组在预先未知的某个点上进行了旋转。（例如，数组[0,0,1,2,2,5,6] 可能变为
·这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？
func search(nums []int, target int) bool &
package leetcode
●
）这是搜索旋转排序数组 的延伸题目，本题中的 nums 可能包含重复元素。
if len(nums) == 0 {
for low >1
，具体思路见第33 题。
if nums[high] == nums[mid] { 
if nums[low] == nums[mid] { 
else {
if nums[mid] nums[low]{// 在数值大的一部分区间里
} else{
return true 
high--
high = mid - 
low = mid + 1 
low = mid + 
high = mid - 1 
low++
L
～
---
## Page 192
代码
按照题意做即可。
解题思路
删除链表中重复的结点，只要是有重复过的结点，全部删除。
题目大意
 Example 2:
Example 1: 
numbers from the original list.
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct 
题目
82. Remove Duplicates from Sorted List Il
package leetcode
Output: 2->3 
Input: 1->1->1->2->3
Output: 1->2->5 
Input: 1->2->3->3->4->4->5
* Definition for singly-linked list.
return false
type ListNode struct { 
 Val int 
Next *ListNode
---
## Page 193
cur.val, last.val)
front.Val， cur.Val, last.Val)
front.Val, cur.Val, last.Val) 
front.val, cur.val, last.val)
cur.Val, last.Val) 
func deleteDuplicatesl(head *ListNode) *ListNode {
if head == nil {
} else { 
if front.val == cur.val {
for front.Next != nil {
front := head 
cur := newHead 
newHead := &ListNode{Next: head, Val: -999999}
if head.Next == nil {
last.Next = nil
// fmt.Printf("相同节点front = %v | cur = %v 丨 last = %v\n"， front.Val,
 if front.val == cur.val { 
last := newHead
}else { 
 return head 
 return nil 
if cur.Next != front {
last.Next = front
// fmt.Printf("相同节点front = %v | cur = %v 丨 last = %v\n"，front.Val
} else{
if cur.Next != front {
continue 
front = front.Next
// fmt.Printf("常规循环前front = %v ｜ cur = %v ｜ last = %v\n",
// fmt.Printf("常规循环后front = %v | cur = %v 丨 last= %v\n",
// fmt.Printf("删除重复节点front = %v 丨 cur = %v 丨 last= %v\n",
front = front.Next 
cur = cur.Next 
last = cur
front = front.Next 
cur = front 
if front.Next != nil && front.Next.Val != front.Val {
last.Next = front 
 last = front 
---
## Page 194
代码
按照题意做即可。
解题思路
删除链表中重复的结点，以保障每个结点只出现一次。
题目大意
 Example 2:
Example 1: 
Given a sorted linked list, delete all duplicates such that each element appear only once.
题目
83. Remove Duplicates from Sorted List
Output: 1->2->3
Input: 1->1->2->3->3
Output: 1->2 
Input: 1->1->2
func deleteDuplicates2(head *ListNode) *ListNode {