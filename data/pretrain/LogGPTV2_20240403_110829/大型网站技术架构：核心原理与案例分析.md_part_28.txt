一个灵活管理这些分散配置项的解决方案。
大型网站技术架构核心原理与案例分析
应用服务器使用Weblogic，数据库使用Oracle，这些产品都需要昂贵的授权使用费。
当时淘宝还开发了另一个重要产品Antx，这个针对Java平台的、扩展自Ant 的项目
应用服务器1
Weblogic
IBatis
EJB
Webx
据库
图9.62004年淘宝网架构
数据同步
应用服务器2
Weblogic
负载均衡
IBatis
EJB
Webx
搜索引擎服务器集群
应用服务器3
Weblogic
IBatis
Webx
EJB
---
## Page 182
据丢失可能会极大地打击消费者信心，令网站发展平生波澜，而这些业界领先的产品经
技术也逐渐成长，基于自身需求，逐步摸索适合自己的技术发展之路，如图9.7所示。
展市场；对于一个快速发展的网站，特别是电子商务网站而言，严重宕机、重要用户数
过多年的洗练，有较强的可用性保证。
开始逐步酝酿，走向成熟。目前这些产品多数都已开源，如表9.1所示。
在这个时候，淘宝技术开始发力，许多奠定淘宝坚实架构基础的产品和技术从这个时候
使用业界成熟的方案和可靠的技术，没有什么可指责的也没有什么可炫耀的。但也就是
用合适的产品，而不是最好的产品，所谓小脚穿大鞋，不但跑不快，还可能会摔跤。
对淘宝而言，应用服务器只需要一个Servlet容器，越简单越快越好。在合适的场景下使
物有所值，EJB对于网站来说也太过笨重。淘宝后来甚至用更轻量级的Jetty替代了JBoss
此后三四年间，淘宝在Oracle、EMC、IBM 的护航下，高歌猛进，业务蒸蒸日上，
直到这时，淘宝架构和技术依然是泯然于众的中庸水平而已，没有拖业务的后腿，
放弃 EJB，引入 Spring，用免费的 JBoss 替代收费的 Weblogic，因为 Weblogic 并非
应用服务器1
Oracle数据库
bus
Webx
JBoss
Linux
图9.72006年的淘宝架构
数据同步
应用服务器2
负载均衡
IBatis
Spring
Webx
JBoss
6
）淘宝网的架构演化案例分析下
应用服务器3
IBatis
Spring
Webx
JBoss
Linux
161
---
## Page 183
9.3小结
162
己的路，路上也许有烛光照明，但是没有人指路。
务的飞速发展，用户、数据、流量、业务复杂度都呈指数级增长，飞速接近甚至突破Oracle、
开发技术之巅华山论剑的话，笔者认为最重要甚至唯一的驱动力就是：不得已。随着业
仿佛回到原点，但一切已经完全不同了。
的选择。这也再一次验证了辩证法关于事物发展的否定之否定及螺旋式上升的普遍规律，
些昂贵的设备和软件，回归到开源的MySQL及NoSQL系统，正如淘宝2003年建站之初
索道路，并有一些开源产品，但是在大规模集群实践上，大家都在摸索，淘宝必须走自
IBM这些企业提供的解决方案的有效范围，在开源领域虽有Google、Yahoo等先驱在探
术越来越得心应手，Oracle、IBM、EMC也变得不是必须，于是淘宝开始逐步放弃使用这
大型网站技术架构核心原理与案例分析
（资料来源：http://code.taobao.org/）
TDDL
OceanBase
TFS
Tair
如果说有什么神奇的力量促使淘宝技术脱胎换骨，化蛹成蝶，站在中国互联网软件
随着淘宝技术的不断发展壮大，淘宝对集群环境下分布式高可用系统的架构设计技
而有些路，走过以后，再回头，一览众山小！
项目名
对应用透明的分库分表层和具有众多特性的动态数据源
分布式Key/Value存储引擎，分为持久化和非持久化两种使用方式
分布式数据库系统，支持千亿级别的读写事务
一个分布式文件系统，适用于海量小文件存储
表9.1淘宝主要开源系统
描
述
---
## Page 184
www.wikipedia.org的流量在相同级别的其他大型网站，如www.baidu.com、
的网站，到2012年已经成为流量排名全球第6的大型网站，如图10.1所示。和
统所有资源的利用价值，用最少的资源成就最不可思议的奇迹，最终也让技术团队获得
软件和廉价的服务器，这种技术倾向使得技术团队不得不量体裁衣、看米下锅，榨尽系
术组件也全部采用免费的开源软件。因为Wikipedia是非盈利的，所以尽可能使用免费的
10.1Wikipedia网站整体架构
员维护，不得不说是一个奇迹。Wikipedia 对资源的利用，对性能的优化很具有典型性，
器规模也数以万计。而wikipedia.org不过只有区区数百台服务器，并仅由十余名技术人
www.yahoo.com，其背后都是市值数百亿美金、员工上万的巨无霸企业，运行网站的服务
有许多值得学习的地方。
目前Wikipedia网站建立在LAMP（Linux+Apache+MySQL+PHP）之上，其他基础技
www.wikipedia.org，这个在2001年创建，使用PerlCGI脚本编写的只有一台服务器
设计分析
维基百科的高性能架构
---
## Page 185
了真正的成长。
大型网站技术架构核心原理与案例分析
164
Wikipedia的架构如图10.2所示。
（图片来源：http://www.slideshare.net/kapil/wikimediaarchiteciture
Facebocom
yahom
Google
食食会食食SearchAnalticsAudience
YouTubeisaway togetyourdeos to thepeoplewhomaterto youUpload, tag and share your.
Afree encyclopediabuit collaborativelyusing wikisofware.(Creative CommonsAtribution-Sh.
YouTube
outube.com
Users
图10.1
SearchAnalytics
SearchAnalyics
2012年12月8日Alexa全球网站排名
图10.2Wikipedia
eprovideroffering
Audience
Audience
with friends,upload photos.share links and...More
searchresults,customizable contentcha..More
架构图
---
## Page 186
有许多网站使用Lighttpd 作为图片服务器。
版本，可将域名解析到离用户最近的服务器。
以上的用户请求可以通过前端服务返回，请求根本不会到达应用服务器，这也就使得网
优化手段都发挥到极致，且业务束缚较少。因此 Wikipedia的性能优化比较有典型意义。
量并发的词条查询请求。相对其他网站，Wikipedia的业务比较简单，用户操作大部分是
发展的决心不动摇。
站分布式缓存服务必备的。
站最复杂、最有挑战的应用服务端和存储端压力骤减。
CDN服务、反向代理服务、静态资源服务等，如图10.3所示。对Wikipedia而言，80%
10.2.1Wikipedia 前端性能优化
只读的，这些前提使Wikipedia的性能优化约束变得简单，可以让技术团队将每一种性能
10.2
作为一个百科服务类网站，Wikipedia主要面临的挑战是如何应对来自全球各地的巨
所谓网站前端是指应用服务器（也就是PHP服务器）之前的部分，包括DNS服务，
Memcached：无中心高性能的开源分布式缓存系统，稳定、可靠、历久弥新，是网
PHP：免费的Web应用程序开发语言，最流行的网站建站语言。
Squid：基于Linux的开源反向代理服务器。
LVS：基于Linux的开源负载均衡服务器。
GeoDNS：基于开源域名服务器软件BIND（Berkeley InternetName Domain）的增强
MySQL：开源的关系数据库管理系统，虽被Oracle收购，但开源社区将其继续开源
Lighttpd：开源的应用服务器，较主流的 Apache服务器更轻量、更快速。实践中，
Wikipedia架构的主要组成部分如下。
Lucene：由Apache出品，Java开发的开源全文搜索引擎。
Wikipedia性能优化策略
10维基百科的高性能架构设计分析一
165
---
## Page 187
166
10.2.2Wikipedia 服务端性能优化
本不会到达Wikipedia数据中心的 Squid服务器，服务器压力减小，节省的资源可以更快
命中的请求再通过LVS发送到Apache应用服务器集群，如果有词条信息更新，应用服务
可直接返回响应，请求无需发送到Apache服务器，减轻应用负载压力。Squid 缓存不能
请求通过LVS负载均衡地分发到每台Squid服务器，热点词条被缓存在这里，大量请求
地处理其他未被CDN缓存的请求。
用户浏览器最近的地方，用户请求直接从CDN返回，响应速度非常快，这些请求甚至根
的热点词条上，将这些词条内容页面缓存在CDN服务器上，而CDN服务器又部署在离
CDN服务对于Wikipedia性能优化居功至伟。因为用户查询的词条大部分集中在比重很小
器使用InvalidationNotification服务通知Squid缓存失效，重新访问应用服务器更新词条
大型网站技术架构核心原理与案例分析
而在反向代理Squid之前，则是被Wikipedia 技术团队称为“圣杯”的CDN服务，
Wikipedia前端架构的核心是反向代理服务器Squid集群，大约部署有数十台服务器，
服务端主要是PHP服务器，这里是网站业务逻辑的核心部分，运行的模块都比较复
·每个内容页面有唯一的REST风格的URL，以便CDN快速查找并避免重复缓存。
●内容页面不包含动态信息，以免页面内容缓存很快失效或者包含过时信息。
WikipediaCDN缓存的几条准则为：
地区数据中心
GeoDNS
Apache
CDN
Squid
LVS
图10.3Wikipedia的前端架构
数据同步
用户浏览器
Apache