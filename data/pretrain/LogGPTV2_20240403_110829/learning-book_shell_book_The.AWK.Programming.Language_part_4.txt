action. Patterns can involve numeric and string comparisons, and actions can
input files automatically, awk splits each input line into fields. It also provides
a number of built-in variables and functions, and lets you define your own as
well. With this combination of features, quite a few useful computations can be
expressed by short programs — many of the details that would be needed in
another language are handled implicitly in an awk program.
The rest of the book elaborates on these basic ideas. Since some of thc
examples are quite a bit bigger than anything in this chapter, we encourage you
strongly to begin writing programs as soon as possible. This will give you famil-
iarity with the language and make it casier to understand the larger programs.
Furthermore, nothing answers questions so well as some simple experiments.
You should also browse through the whole book; each example conveys some-
thing about the language, cither about how to use a particular feature, or how
to create an interesting program.
---
## Page 31
2
THEAWKLANGUAGE
This chapter explains, mostly with examples, the constructs that make up
awk programs. Because it's a description of the complete language, the material
is detailed, so we recommend that you skim it, then come back as necessary to
check up on details.
The simplest awk program is a sequence of pattern-action statements:
pattern
{action}
pattern
{action}
 ++
In some statements, the pattern may be missing: in others, the action and its
enclosing braces may be missing. After awk has checked your program to make
sure there are no syntactic errors, it reads the input a line at a time, and for
each line, evaluates the patterns in order. For each pattern that matches the
current input line, it executes the associated action. A missing pattern matches
pattern-action statement consisting only of a pattern prints each input line
A
line"” and “record" are used synonymously. In Section 2.5, we will discuss
multiline records, where a record may contain several lines.
The first section of this chapter describes patterns in detail. The second sec
tion begins the description of actions by describing expressions, assignments, and
control-flow statements. The remaining sections cover function definitions, out-
put, input, and how awk programs can call other programs. Most sections con-
tain summaries of major features.
The Input Flle countries
As input for many of the awk programs in this chapter, we will use a file
called countries. Each line contains the name of a country, its area in
thousands of square miles, its population in millions, and the continent it is in.
The data is from 1984; the USSR has been arbitrarily placed in Asia. In the
file, the four columns are separated by tabs; a single blank separates North and
South from America.
21
---
## Page 32
22THE AWK LANGUAGE
CHAPTER 2
The file countries contains the following lines:
USSR
8649
275
Asia
Canada
3852
25
North America
China
3705
3615
1032
Asia
USA
237
North America
Brazil
India
3286
1267
134
746
Asia
South Anerica
Mexico
762
211
78
Europe
North America
France
144
120
55
Japan
61
Europe
Asia
Germany 96
England 94
56
Burope
For the rest of this chapter, the countries file is used when no input file is
mentioned explicitly.
Program Format
Pattern-action statements and the statements within an action are usually
separated by newlines, but several statements may appear on one line if they are
separated by semicolons. A semicolon may be put at the end of any statement.
The opening brace of an action must be on the same line as the pattern it
accompanies; the remainder of the action, including the closing brace,may
appear on the following lines.
s e e o  p q   o e s 
to improve the readability of a program.Blanks and tabs may be inserted
Comments may be inserted at the end of any line. A comment starts with
the character # and finishes at the end of the line, as in
{print $1,$3 }
print country name and population
 e   s rs ro ps s  s  
and newline at each break:
（print\
$1,
area in thousands of square miles
country name
$2,
$3 }
population in ni1lions
As this example shows, statements may also be broken after commas, and a
comment may be inserted at the end of each broken line.
In this book we have used several formatting styles, partly to illustrate dif
ferent ones, and partly to keep programs from occupying too many lines. For
short programs like those in this chapter, format doesn't much matter, but con-
sistency and readability will help to keep longer programs manageable.
---
## Page 33
SECTION 2.1
PATTERNS23
2.1 Patterns
Patterns control the execution of actions: when a pattern matches, its associ-
ated action is executed. This section describes the six types of patterns and the
conditions under which they match.
Summary of Patterns
1.BEGIN (statements}
The statements are executed once before any input has been read.
2.END (statements}
The statements are executed once after all input has been read.
3.expression (statements }
The statements are executed at each input line where the expression is true, that is,
nonzero or nonnull.
4./regular expression/(statements}
The statements are executed at each input line that contains a string matched by the
regular expression.
5. compound pattern ( statements }
 () 1()11()   sosd sqodpnod 
parentheses; the statements are cxecuted at cach input line where the compound
pattern is true.
6.pattern,, pattern( statements )
linc matched by pattern, inclusive; the statements are executed at cach matching
A range pattern matches each input line from a line matched by pattern, to the next
line.
Jo ud sq tou ued su  sued oo qm suo sou op a pue 
any other pattern. BEGIN and END are the only patterns that require an action.
BEGIN and END
The BEGIN and END patterns do not match any input lines. Rather, the
statements in the BEGIN action are cxccuted before awk reads any input; the
statements in the END action are executed after all input has been read. BEGIN
BEGIN and END do not combine with other patterns. If there is more than one
BEGIN, the associated actions are executed in the order in which they appear in
the program, and similarly for multiple END's. Although it's not mandatory, we
put BEGIN first and END last.
One common use of a BEGIN action is to change the default way that input
lines are split into fields. The field separator is controlled by a built-in variable
---
## Page 34
24THE AWK LANGUAGE
CHAPTER 2
called Fs. By default, fields are separated by blanks and/or tabs; this behavior
occurs when FS is set to a blank. Setting FS to any character other than a
blank makes that character the field separator.
The following program uses the BEGIN action to set the field separator to a
tab character (\t) and to put column headings on the output.The second
printf statement, which is cxecuted at cach input line, formats the output into
a table, neatly aligned under the column headings. The END action prints the
totals. (Variables and expressions are discussed in Section 2.2.)
print countries with column headers and totals
BBGIN ( FS = "\t"
make tabthe field separator
printf("x10s %6s %5s
Xsn\n",
(printf("%10s %6d %5d
%s\n”,$1,$2,$3,$4)
area = area + $2
#+dod =dod
END
（printf("\n%10s %6d %5d\n*，*TorAL°,area, pop）)
With the countries file as input, this program produces
COUNTRY
AREA
POP
CONTINENT
USSR
8649
275
25
Asia
Canada
3705
2585
1032
North America
China
3615
237
Asla
USA
134
North America
Brazil
India
9826
1267
746
South America
Asia
Mexico
762
211
78
North America
France
SS
Europe
Gernany
Japan
144
120
61
Asia
96
Europe
England
94
9S
Europe
TOTAL
25681
2819
Expressions as Patterns
Like most programming languages, awk is rich in expressions for describing
numeric computations. Unlike many languages, awk also has expressions for
describing operations on strings. Throdghout this book, the term string means a
sequence of zero or more characters.These may be stored in variables, or
appear literally as string constants like "" or “Asia". The string "", which
contains no characters, is called the null string. The term substring means a
contiguous sequence of zero or more characters within a string. In every string.
the null string appears as a substring of length zero before the first character,
between every pair of adjacent characters, and after the last character.
---
## Page 35
SECTION 2.1
PATTERNS25
Any expression can be used as an operand of any operator. If an expression
has a numeric value but an operator requires a string value, the numeric value
is automatically transformed into a string: similarly, a string is converted into a
number when an operator demands a numeric value.
Any expression can be used as a pattern. If an expression used as a pattern
matches that line. The typical expression patterns are those involving comparis-
ons between numbers or strings. A comparison expression contains one of the
six relational operators, or one of the two string-matching operators ~ （tilde)
and 1~ that will be discussed in the next section. These operators are listed in
Table 2-1.
TABLE 2-1.COMPARISON OPERATORS
OPERATOR
MEANING
less than
=
greater than or equal to
>
greater than
matched by
=
not matched by
If the pattern is a comparison expression like NF> 10, then it matches the
current input line when the condition is satisfied, that is, when the number of
fields in the line is greater than ten. If the pattern is an arithmetic expression
like NF, it matches the current input line when its numeric value is nonzero. If
the pattern is a string expression, it matches the current input line when the
string value of the expression is nonnull.
In a relational comparison, if both operands are numeric, a numeric com-
parison is made; otherwise, any numeric operand is converted to a string. and
then the operands are compared as strings. The strings are compared character
by character using the ordering provided by the machine, most often the ASCII
character set. One string is said to bc “less than” another if it would appear
before the other according to this ordering. e.g.,"Canada"= 0.5
selects lines where the value of the third field divided by the second is numeri-
cally greater than or equal to 0.5, while
---
## Page 36
26THE AWK LANGUAGE
CHAPTER 2
$0>="M"
selects lines that begin with an M, N, O, etc.:
USSR
8649
275
237
North Anerica
Asia
USA
762
3615
Mexico
78
North America
Sometimes the type of a comparison operator cannot be determined solely by
the syntax of the expression in which it appears. The program
$1< $4
could compare the first and fourth fields of each input line either as numbers or
as strings. Here, the type of the comparison depends on the values of the fields,
fields are always strings, so string comparisons are always made; the output is
and it may vary from line to line. In the countries file, the first and fourth
Canada
3852
3286
134
25
North America
Brazil
South America
Mexico
762
56
78
North America
England 94
Europe
Only if both fields are numbers is the comparison done numerically; this would
be the case with
$2<$3
on the same data.
Section 2.2 contains a more complete discussion of strings, numbers, and
expressions.
String-MatchingPatterns
Awk provides a notation called regular expressions for specifying and
matching strings of characters. Reguiar expressions are widely used in Unix
programs, including its text editors and shellRestricted forms of regular
expressions also occur in systems like MS-DOS as “wild-card characters" for
specifying sets of filenames.
A string-matching pattern tests whether a string contains a substring
matched by a regular expression.
The simplest regular expression is a string of letters and numbers, like Asia,
just enclose it in slashes:
/Asia/
This pattern matches when the current input line contains the substring Asia,
either as Asia by itself or as some part of a larger word like Asian or
Pan-Asiatic. Note that blanks are significant within regular expressions: the
string-matching pattern
---
## Page 37
SECTION 2.1
PATTERNS
27
String-Matching Patterns
1.
Iregexpr!
Matches when the current input line contains a substring matched by regexpr.
2.
expression-/regexpr/
Matches if the string value of expression contains a substring matched by regexpr.
3.
expression1-/regexpr/
Matches if the string value of expression does not contain a substring matched by
regexpr.
Any expression may be used in place of /regexpr/ in the context of - and 1*.
/Asia/
matches only when Asia is surrounded by blanks.
The pattern above is one of three types of string-matching patterns. Its form
is a regular expression r enclosed in slashes:
/rl
This pattern matches an input line if the line contains a substring matched by r.
operator:
expression-/t!
expression1-/t/
,      o
matched by."The first pattern matches when the string value of expression
matches if there is no such substring.
contains a substring matched by the regular expression r; the second pattern
The left operand of a matching operator is often a field: the pattern
$4 -/Asia/
matches all input lines in which the fourth field contains Asia as a substring,
while
$4 1- /Asia/
matches if the fourth field does not contain Asia anywhere.
Note that the string-matching pattern
/A81a/
is a shorthand for
$0 -/Asia/
---
## Page 38
28
THE AWK LANGUAGE
CHAPTER 2
Regular Expresslons
A regular expression is a notation for specifying and matching strings. Like
an arithmetic expression, a regular expression is a basic expression or one
created by applying operators to component expressions.To understand the
strings matched by a regular expression, we need to understand the strings
matched by its components.
Regular Expressions
1. The regular expression metacharacters are:
\s.[]1（).+?
2. A basic regular expression is one of the following:
a nonmetacharacter, such as A, that matches itself.
an escape sequence that matches a special symbol: St matches a tab (see Table 2-2).
a quoted metacharacter, such as \, that matches the metacharacter literally.
^, which matches the beginning of a string.
$, which matches the end of a string.
, which matches any single character.
a character class: [ABC] matches any of the characters A, B, or C.
character classes may include abbreviations: [A-Za=z] matches any single letter.
a complemented character class: [ *0-9] matches any character except a digit.
3. These operators combine regular expressions into larger ones:
alternation: AIB matches A or B.
closure: A matches zero or more A's.
concatenation: AB matches A immediately followed by B.
positive closure: A+ matches one or more A's.
zero or one: A? matches the null string or A.
parentheses: () matches the same strings as r does.
The basic regular expressions are summarized in the table above. The char-
acters
\s.[]1（）▪+?
expression consisting of a single nonmetacharacter matches itself. Thus, a sin-
gle letter or digit is a basic regular expression that matches itself. To preserve
the literal meaning of a metacharacter in a regular expression, precede it by a
backslash. Thus, the regular expression s matches the character s. If a char-
acter is preceded by a single \, we'll say that character is quoted.
In a regular expression, an unquoted caret ^ matches the beginning of a
string, an unquoted dollar-sign $ matches the end of a string, and an unquoted
period . matches any single character. Thus,
---
## Page 39
SECTION 2.1
PATTERNS
67
*C