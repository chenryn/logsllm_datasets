4.3 Generalized penalty policies
Let us reﬁne the state St to record the number of mispredictions
for each request type. If mr denotes the number of mispredictions
on request type r, the mitigator state contains a vector of mispre-
dictions counts ~m = m1, . . . , mR. Initially all mr are zero. When
a misprediction happens on request type r, vector entry mr is in-
creased by one. In the following, we assume St = ~m, and write
the penalty function as p( ~m, r).
Recall that during an epoch, predictions for all types are met.
Given a vector of mispredictions ~m, the number of epochs N is
i=1 mi. Thus, the problem of bounding N is
simply N = 1 +PR
the same as bounding the sumPR
For convenience, let us focus on a family of penalty functions p
i=1 mi.
that are a composition of three functions:
p( ~m, r) = q(r) × (φ ◦ idx)( ~m, r)
Here function φ(n) is a baseline penalty function, which given a
penalty index n returns the prediction for n. The penalty index
represents how severely this request type is penalized. It is com-
puted by function idx( ~m, r), which returns the value of the index
in the current state ~m for request type r. Finally, q(r) returns an
initial penalty for request type r, and allows us to model different
initial estimates of how long it takes to respond to the request of
type r. For instance, if one knows that request type r1 needs at
least one second, and request type r2 needs at least 100 seconds,
then one can set q(r1) = 1, q(r2) = 100.
PR
Examples.
For penalty policies based on fast doubling, we set
φ(n) = 2n, and q(r) = q0 for all r with some initial quantum
q0. For the global penalty policy, idx can be set to idx( ~m, r) =
i=1 mi. For the local penalty policy, idx is chosen as idx( ~m, r) =
mr. For an l-level grace period policy, we deﬁne idx to depend on
567the parameter l:
idx( ~m, r) =
(
PR
mr
i=1 mi
if mr ≤ l
otherwise
4.4 Generalized leakage analysis
As discussed earlier, different penalty functions yield different
bounds on N. While it is possible to analyze such bounds for spe-
ciﬁc penalty policies, in general it is hard to bound leakage for more
complex penalty policies.
This section describes a precise method for deriving such bounds
for several classes of penalty policies. We transform the problem
of ﬁnding a bound on the number of epochs N into an optimiza-
tion problem with R constraints, where R is the number of request
types. These constraints can be nonlinear in general, but all consid-
ered classes of penalty functions can be solved in constant time.
We focus on penalty functions where p( ~m, r) is monotonic. Be-
cause monotonicity is natural for a “penalty”, this requirement does
not really constrain the generality of the analysis.
State validity. We write ~0 for the initial state ~0 in which no
mispredictions have happened. At the core of our analysis are two
notions: state reachability and state validity.
Informally, a state
~m is reachable at time T if there is a sequence of mispredictions
that, starting from ~0, lead to ~m by time T . To bound the number
of possible epochs N at time T , it is sufﬁcient to explore the set
i=1 mi (and
of all reachable states, looking for ~m in which 1 +PR
therefore N) is maximized.
Enumerating all reachable states may be infeasible. In particu-
lar, an exact enumeration requires detailed assumptions about the
thread model presented in Section 3.2. Instead, we overapproxi-
mate the set of reachable states for efﬁcient searching of the result-
ing larger space.
For this, we deﬁne the notion of state validity at time T . State
validity at time T is similar to reachability at time T , except that we
focus only on the predicted time to respond to a request, ignoring
the time needed to execute earlier requests.
We ﬁrst introduce the notion of a valid successor:
DEFINITION 1
(VALID SUCCESSOR). A state ~m0 is a valid
j = mj + 1
successor of type j (1 ≤ j ≤ R) for state ~m when m0
and m0
For example, with three different request types (R = 3), the state
(0, 0, 1) is a valid successor of type 3 for state ~0.
i = mi for i 6= j.
We can then deﬁne state validity:
DEFINITION 2
(STATE VALIDITY FOR TIME T ). For penalty
function p( ~m, r), a state ~m is a valid state for time T if there exists
a sequence of request types j1, . . . jn−1, jn, such that, if m0 = ~0,
it holds that for all i, 1 ≤ i ≤ n we have
• ~mi is valid successor of type ji for state ~mi−1.
• p( ~mi−1, rji ) ≤ T
• ~mn = ~m
The second condition approximates whether the state ~mi−1 can
make one more transition: if execution time is predicted to exceed
T , no more transitions are possible.
Example. Consider the simple case of one request type and time
6 with prediction function p( ~m, r) = 2mr .
State ~m = (3) is a valid state for time 6. Consider the request
type sequence 1, 1, 1. We have ~m0 = ~0. Since ~m1 is a valid
successor of type 1 for state ~m0, we have ~m1 = (1). Similarly, we
have ~m2 = (2) and ~m3 = (3). It is easy to check that p( ~m0) =
1 ≤ 6, p( ~m1) = 2 ≤ 6 and p( ~m2) = 4 ≤ 6. Since ~m3 = ~m, ~m is
valid by deﬁnition.
However, state ~m0 = (4) is not valid. Otherwise, since there
is only one request type in this example, jn must be 1. Therefore,
~mn−1 must be (3) because ~mn is a valid successor of type 1 for
~mn−1. However, p( ~mn−1) = 8 > 6. This contracts the deﬁnition
of validity.
4.4.1 Transforming to an optimization problem
In this part, we show how to get the maximalPR
i=1 mi among all
valid states when prediction function p( ~m, r) is monotonic. First,
we show a useful lemma, proved in the appendix.
LEMMA 1. Assume p( ~m, r) is monotonic. If ~m is a valid suc-
cessor of some type j for ~m0 such that p( ~m0, j) ≤ T , then
~m = (m1, . . . , mR) is valid for T ⇐⇒
00
~m
= (m1, . . . , mj−1, 0, mj+1, . . . , mR) is valid for T
Lemma 1 allows us to describe valid states by R constraints. To
see this, ﬁrst observe that because ~m is valid for T , there are some
j1 and ~m0 such that ~m is a valid successor of ~m0 of type j1. By
Deﬁnition 1, p( ~m0, j1) ≤ T . This is our ﬁrst constraint on the
space of valid states.
By Lemma 1, the validity of ~m for T implies the validity of
(m1, ..., mj1−1, 0, . . . , mR) for T . Repeating the previous step,
there is some j2 6= j1 and ~m00 where (m1, ..., mj1−1, 0, . . . , mR)
is a valid successor of ~m00 of type j2; this gives us the second con-
straint, p( ~m00, j2) ≤ T . Proceeding as above, we obtain R con-
straints such that ~m is valid iff all constraints are satisﬁed.
Based on the properties of p, our analysis proceeds as follows.
We present two different classes of p in the order of difﬁculty of
analyzing them, starting from the easiest.
Symmetric predictions. We ﬁrst look at prediction policies in
which all request types are penalized symmetrically:
1. for all i, j, such that 1 ≤ i, j ≤ R it holds that p(m1, . . . , mi,
. . . , mj, . . . mR, i) = p(m1, . . . , mj, . . . , mi, . . . mR, j).
2. for all i, j, k, such that 1 ≤ i, j, k ≤ R, where i 6= k, and
j 6= k it holds that p(m1, . . . , mi, . . . mj, . . . mR, k) =
p(m1, . . . , mj, . . . mi, . . . mR, k).
These properties allow us to reorder the request types in R con-
straints that we have obtained earlier. For example, the ﬁrst of the
obtained constraints can be rewritten as p((mj1 − 1, . . . , mR), 1)
≤ T. Moreover, this allows us to rename the variables in the con-
straints without loss of generality:
8>>><>>>:
p((m1 − 1, m2, . . . , mR), 1) ≤ T
p((0, m2 − 1, . . . , mR), 2)
≤ T
. . .
p((0, 0, . . . , mR − 1), R)
≤ T
PR
Thus, bounding N is equivalent to ﬁnding the maximum sum
i=1 mi satisfying all the conditions.
Examples.
It is easy to verify that starting with same initial quan-
tum, global, local, and l-level grace period policies penalize all re-
quest types symmetrically. We proceed with the analysis of these
policies below.
1. Consider the global penalty function with fast doubling and
the starting quantum q0 = 1. The j-th constraint in the above
system has the form
2(PR
i=j mi−1) ≤ T
568Here, N = 1 +PR
i=1 mi ≤ log T + 2. This is very close to the
bound log(T + 1) + 1 given in [14].3
Using the leakage bound derived in Section 4.4, we obtain that
for global penalty policy, when the mitigator runs for at most time
T the leakage is bounded by function B(T, M ) where
B(T, M ) = (log T + 2) · log(M + 1)
2. Now consider the local penalty policy with the same penalty
scheme and initial quantum. We have R constraints of the form:
2mi−1 ≤ T, 1 ≤ i ≤ R
It is easy to derive N ≤ R · (log T + 1) + 1.
Using this bound for N, we obtain that at running time time T ,
leakage is bounded by function B(T, M, R) such that
B(T, M, R) = (R · (log T + 1) + 1) · log(M + 1)
3. We revisit the l-level grace period policy last. In this case, the
j-th constraint can be split into two cases:
mj − 1 ≤ log T
PR
when mj − 1 ≤ l
i=j mi − 1 ≤ log T when mj − 1 > l
(
In general, l is ordinarily smaller than log T , so N is maximized
when mi = l + 1, 1 ≤ i ≤ R − 1 and mR = blog Tc + 1. Thus,
N ≤ (R − 1) · (l + 1) + log T + 2.
Using this bound for N we obtain that at running time T , leakage
is bounded by function B(T, M, R, l) such that
B(T, M, R, l) = log(M + 1) · ((R − 1) · (l + 1) + log T + 2)
Partially symmetric predictions.
Request types starting with
different initial quanta, such as the setup in Section 4.5, make the
prediction function asymmetric.
Let qmin = minR
i=1 q(r), and replace p(r) with qmin for all pre-
diction functions. The upper bound N of these functions overap-
proximates that of asymmetric functions since any valid state using
the latter functions must be valid for the former ones. Therefore,
we can obtain R constraints, as for symmetric predictions.
Non-symmetric predictions.
For other types of penalty func-
tions, we can still try to partition request types into subsets such
that in each subset, request types are penalized symmetrically. We
then generate constraints for validity of subsets.
More formally, we say a vector of mispredictions ~m0 is a sub-
i = mi, 1 ≤ i ≤ R. A set
vector of ~m if and only if m0
of vectors ~m1, . . . , ~mk is a partition of ~m if all vectors are subvec-
tors of ~m and for all mi, there is one and only one ~mj such that
mj
i = mi.
The following lemma shows that the condition that ~m is valid is
stronger than the validity of all subvectors. Thus, the constraints on
vectors in a partition overapproximates those on the validity of ~m.
i = 0 ∨ m0
LEMMA 2. When p( ~m, r) is monotonic, ~m is valid at time T
=⇒ any subvector of ~m is valid at time T .
Since there are R non-zero mispredictions among all vectors in the
partition, this estimation still gives R constraints.
4.5 Security vs. performance
As discussed informally earlier, the global penalty policy en-
forces the best leakage bound but has bad performance; the local
3Though [14] does not consider request types, the penalty policies
considered there are effectively global penalty policies.
Figure 3: Performance vs. security
penalty policy has the best performance but more leakage. We ex-
plore this tradeoff between security and performance through sim-
ulations.
Simulation setup. We simulate a set of interactive system services
characterized by various distributions over execution time. Initial
penalty is set to be the mean of the execution time distribution. The
fast doubling scheme is used, so the prediction function is
p( ~m, r) = q(r) × 2idx( ~m,r)
where q(r) is the mean time of simulated type r. The form of
idx( ~m, r) is deﬁned by penalty policies.
To see the performance for requests with different variances in
execution time, we simulate both regular types and irregular types.
For regular types, the simulated execution time follows Poisson dis-
tribution with different means, since page view requests to a web
page can be modeled as a Poisson process; for irregular types, ex-
ecution time follows a perturbed normal distribution which avoids
negative execution time.
Result. The results in Figure 3 demonstrate the impact of execution-
time variation on performance. The x-axis in Figure 3 shows the
bound on number of epochs N and the y-axis shows the slowdown
for all simulated request types. All values shown are normalized so
that the local policy has a slowdown of 1 and so that for the num-
ber of epochs, the global policy has value 1. The standard deviation
is equal to the mean multiplied by a factor ranging from 23 to 27,
generating around 3 to 7 mispredictions. The number on each line
denotes the grace-period level.
The results conﬁrm the intuition that the global penalty policy
has the best security but bad performance, and the local policy has
the best performance. However, the l-level grace period policies
have considerably fewer epochs N, yet performance similar to that
of the local policy when l is no less than mri for most types.
When the variance of execution time increases, small grace-period
level (l = 3, 4) can bring slowdown that is orders of magnitude
higher than in the global case. The reason is that each irregular
request type can trigger l mispredictions. Once misprediction of
a request type is larger than l, idx( ~m, r) returns a large number.
However using a larger grace-period level (l = 5) could restore
performance at the cost of more leakage.
Penalty policies with other forms are possible to provide more
options between the trade-off of security and performances. We
leave a more comprehensive analysis of more penalty policies as
future work.
4.6 Leakage with a worst-case execution time
In the analysis above, no assumption is made about execution