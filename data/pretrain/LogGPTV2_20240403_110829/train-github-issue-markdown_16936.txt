 **Do you want to request a _feature_ or report a _bug_?**
I would consider it a feature ðŸ˜ˆ
**What is the current behavior?**
React does not put any limits on recursive rendering, using higher-order
components. However it does so for calling `this.setState(...)`
It reproduces pretty easy with a pair of a Container and an HOC:  
https://github.com/sergeysolovev/react-bomb/blob/master/src/index.js
I wouldn't try this on CodeSandbox or JSFiddle (I did). Here is the code:
    import React from "react";
    import ReactDOM from "react-dom";
    // Accepts a component as a prop and renders it
    // passing the props through. In a real life scenario
    // usually does something more than that
    const Container = props => {
      const { component: Component } = props;
      return ;
    };
    // An HOC-version of Container
    const withContainer = WrappedComponent => props => (
    );
    // Though it looks a bit artificially here,
    // it's pretty common to use something like `compose`
    // which does the same thing but looks more innocent
    const Bomb = withContainer(withContainer(() => null));
    class Detonator extends React.Component {
      state = {
        wentOff: false
      };
      goOff = () => this.setState({ wentOff: true });
      render = () =>
        this.state.wentOff ? (
             Oooppps... This text probably wont be rendered
        ) : (
          Lets see
        );
    }
    ReactDOM.render(, document.getElementById("root"));
**What is the expected behavior?**
I would expect to have some limit on such kind of recursion, because it's
blazing fast (like React's supposed to be), eating lots of RAM in short time
and a bit difficult and annoying to stop.
**Which versions of React, and which browser / OS are affected by this issue?
Did this work in previous versions of React?**
Reproduces on Chrome 65. I've done it for React 16.3.1 and 16.3.2