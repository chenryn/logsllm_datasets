### Cost Comparison and Flexibility
The proposed solution incurs a cost that is 11% lower than the naive all-overlay approach and 11% lower than the all-native solution. This represents a significant cost saving while maintaining the flexibility to accommodate other constraints.

### Table 2: Lowest Cost for Each Strategy (unitNativeCost = unitOverlayCost)
| AS # | Number of Nodes | All Overlay | All Native | Basis Set | Combination (n: native, o: overlay) |
|------|-----------------|-------------|------------|-----------|------------------------------------|
| 21   | 17              | 32          | 15         | 28        | 1221 (66 n, 32 o)                   |
| 1755 | 3257            | 3967        | 6461       | 420       | 272 (42 n, 50 o)                    |
| 3257 | 3257            | 3967        | 6461       | 992       | 210 (142 n, 80 o)                   |
| 3967 | 3967            | 3967        | 6461       | 210       | 756 (46 n, 32 o)                    |
| 6461 | 6461            | 6461        | 6461       | 102       | 112 (146 n, 64 o)                   |

### Link-Level Overlap Analysis
In this section, we study the effect of overlap between overlay links on the optimal monitoring solution. We use the average number of overlay links spanning a native link, which we call the overlap coefficient. The results from the first experiment are used for this analysis.

### Table 3: Effect of Link-Level Overlap on the Lowest Total Monitoring Cost
| AS     | Overlap Coefficient | Lowest Total Cost | # of Overlay Links | Cost per Link |
|--------|---------------------|-------------------|--------------------|---------------|
| 3967   | 8.59                | 78                | 210                | 0.37          |
| 1755   | 9.21                | 92                | 272                | 0.34          |
| 6461   | 12.80               | 210               | 756                | 0.28          |
| 3257   | 17.08               | 222               | 992                | 0.22          |
| 1221   | 18.33               | 98                | 420                | 0.23          |

We observe that the monitoring cost per overlay link generally decreases as the overlap increases. However, for AS 1221, the cost per link is slightly higher than for AS 3257, despite having a higher overlap coefficient. This suggests that increasing overlap can only reduce the cost per link by a limited amount.

### Overlay Node Density
In this experiment, we vary the fraction of overlay nodes among all nodes in the network, which we call the overlay node density. We examine two Rocketfuel topologies using five different density values from 0.1 to 0.5, with random overlay node placement. Our ILP provides the results in Table 4 when `unitNativeCost = unitOverlayCost`.

### Table 4: Effect of Overlay Node Density on the Optimal Monitoring Solution
| Overlay Node Density | Cost per Link for AS 1755 | Cost per Link for AS 3967 |
|----------------------|---------------------------|---------------------------|
| 0.1                  | 0.75                      | 0.71                      |
| 0.2                  | 0.34                      | 0.37                      |
| 0.3                  | 0.25                      | 0.28                      |
| 0.4                  | 0.15                      | 0.17                      |
| 0.5                  | 0.12                      | 0.13                      |

As the overlay node density increases, the link-level overlap also increases, and the cost per overlay link decreases, consistent with the previous findings.

### Experimental Evaluation of Inference Errors
Composing an end-to-end measurement from other measurements can introduce an error, known as inference error. One source of error is packets traversing different sequences of router functions. For example, an end-to-end latency measurement probe may be forwarded along the fast path of a router, while probes measuring native link latency may be forwarded along the slow path, introducing additional latency. Additionally, some native link measurements may be inferred from overlay link measurements using arithmetic operations, introducing estimation errors.

We represent the inference error for overlay links by computing the absolute relative estimation error as a percentage:

\[
\text{Abs. Rel. Est. Error Percentage} = \frac{|\rho(e') - \hat{\rho}(e')|}{\rho(e')} \times 100
\]

where \(\rho(e')\) is the actual measurement result for \(e'\) and \(\hat{\rho}(e')\) is the inferred result obtained through combining a different set of measurements.

### Topology Experiments
To assess the extent of inference errors, we conducted experiments on PlanetLab using three different overlay topologies shown in Fig. 1. We implemented these topologies as virtual networks on PlanetLab using PL-VINI, the VINI prototype running on PlanetLab. In each experiment, we selected 20 PlanetLab nodes from different ASes as our native network and ran OSPF on this network with PL-VINI. We treated the edges between these nodes on the PL-VINI network as native links. We picked 8 out of the 20 nodes as our overlay nodes, assuming they were fully connected to form an overlay network.

For each topology, we ran four rounds of measurements at different times. In each round, we measured the delay on all native and all overlay links by simultaneously running 100 pings on every link at a frequency of 1 per second. We calculated the delay from node \(a\) to node \(b\) as the average round-trip time over all ping results for native or overlay link \(a - b\).

To find the optimal combination of links to monitor, we ran our ILP on each topology with the objective of minimizing the total number of measurements. The output gave us a set of overlay and native links to monitor. Using this output and the measurement results, we inferred the measurements of the unmonitored links and calculated the errors in these inferences using Eq. 9. The errors for all-native and basis set solutions were calculated similarly.

### Table 5: Costs and Inference Errors for Different Monitoring Strategies
| Topology | Cost | M_ni | M_na | Max |
|----------|------|------|------|-----|
| 1        | 56   | 5.01 | 5.01 | 21.18 |
| 1        | 38   | 2.68 | 0.86 | 20.29 |
| 1        | 26   | 3.43 | 2.70 | 20.12 |
| 2        | 24   | 1.43 | 1.43 | 4.30 |
| 2        | 26   | 0.96 | 0.51 | 2.79 |
| 2        | 18   | 1.58 | 1.35 | 3.17 |
| 3        | 30   | 3.54 | 3.54 | 10.75 |
| 3        | 26   | 1.13 | 0.61 | 4.95 |
| 3        | 24   | 2.35 | 1.68 | 10.75 |

Among the last three strategies, monitoring a combination of native and overlay links achieved the lowest cost, and monitoring a basis set of overlay links resulted in the smallest error. However, if we use a different cost definition, such as the total number of native links carrying probe traffic, these results may change significantly. For instance, in topology 3, the last strategy uses a combination of 8 native and 16 overlay links, spanning a total of 42 native links, while the all-native solution spans 30 links and the basis set solution spans 52 native links. Our insights suggest that, in general, all-native solutions minimize bandwidth consumption, basis overlay set solutions minimize error, and using a combination of native and overlay links allows reducing the total number of measurements with comparable errors.

### Error Distribution
For the two topologies with maximum errors above 10%, we examined the error distribution among the inferred overlay links, as shown in Fig. 2. The inference errors are sorted from high to low and placed on the graphs from left to right. It can be seen that in both cases, a few inferred links produce high errors that dominate the rest, increasing the mean error. If the ILP is aware of the overlay links that incur high errors when inferred, it can choose to monitor them directly and avoid these errors. Thus, adding certain error constraints to the ILP is a plausible step to improve its performance.

### Conclusions
In this work, we proposed multi-layer monitoring as a flexible approach for overlay network measurement, focusing on determining the optimal mix of native and overlay link monitoring. We showed that the overall cost of monitoring the network is minimized when we allow native link measurements, as well as end-to-end measurements. We presented a novel ILP formulation that minimizes the cost of network monitoring with the appropriate combination of end-to-end and native network measurements. Through simulation studies, we observed that the optimal monitoring solution depends on unit monitoring costs and the selection and placement of overlay nodes. We also found that the average monitoring cost per overlay link is lower for topologies with high overlap between overlay links. Furthermore, we evaluated our approach through PlanetLab experiments, focusing on inference errors.

### Future Work
Future work in this area should include:
1. Applying our approach to multi-domain scenarios.
2. Considering monitoring for metrics other than latency.
3. Including error minimization as an objective in the optimization problem.
4. Extending multi-layer monitoring to include Layer 2.
5. Considering problems of dynamic monitoring, allowing changes in the monitoring mix over time in response to changing network conditions or changes in overlay topology.

### References
1. Bavier, A., et al.: In VINI veritas: realistic and controlled network experimentation. In: Proceedings of ACM SIGCOMM, pp. 3–14 (2006).
2. CPR: Campus Wide Network Performance Monitoring and Recovery, http://www.rnoc.gatech.edu/cpr.
3. GNU Linear Programming Kit (GLPK), http://www.gnu.org/software/glpk.
4. Madhyastha, H.V., et al.: iPlane: An Information Plane for Distributed Services. In: OSDI, pp. 367–380 (2006).
5. Planetlab, http://www.planet-lab.org.
6. Rocketfuel: An ISP Topology Mapping Engine, http://www.cs.washington.edu/research/networking/rocketfuel/.
7. Seetharaman, S., Ammar, M.: Overlay-friendly Native Network: A Contradiction in Terms?. In: Proceedings of ACM HotNets-IV (November 2005).
8. Chen, Y., et al.: Algebra-based scalable overlay network monitoring: algorithms, evaluation, and applications. IEEE/ACM Trans. Netw. 15(5), 1084–1097 (2007).