```
```
public long getCreationTime()
该方法返回该 session 会话被创建的时间，自格林尼治标准时间 1970 年 1 月 1 日凌晨零点算起，以毫秒为单位。
```
```
public String getId()
该方法返回一个包含分配给该 session 会话的唯一标识符的字符串。
```
```
public long getLastAccessedTime()
该方法返回客户端最后一次发送与该 session 会话相关的请求的时间自格林尼治标准时间 1970 年 1 月 1 日凌晨零点算起，以毫秒为单位。
```
```
public int getMaxInactiveInterval()
该方法返回 Servlet 容器在客户端访问时保持 session 会话打开的最大时间间隔，以秒为单位。
```
```
public void invalidate()
该方法指示该 session 会话无效，并解除绑定到它上面的任何对象。
```
```
public boolean isNew()
如果客户端还不知道该 session 会话，或者如果客户选择不参入该 session 会话，则该方法返回 true。
```
```
public void removeAttribute(String name)
该方法将从该 session 会话移除指定名称的对象。
```
```
public void setAttribute(String name, Object value)
该方法使用指定的名称绑定一个对象到该 session 会话。
```
```
public void setMaxInactiveInterval(int interval)
该方法在 Servlet 容器指示该 session 会话无效之前，指定客户端请求之间的时间，以秒为单位。
```
这个例子描述了如何使用 HttpSession 对象获取会话创建时间和上次访问的时间。如果不存在会话，我们将一个新的会话与请求联系起来。
```java
// Import required java libraries
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
// Extend HttpServlet class
@WebServlet(urlPatterns = "/SessionTrack")
public class SessionTrack extends HttpServlet {
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException
  {
      // Create a session object if it is already not  created.
      HttpSession session = request.getSession(true);
      // Get session creation time.
      Date createTime = new Date(session.getCreationTime());
      // Get last access time of this web page.
      Date lastAccessTime =
                        new Date(session.getLastAccessedTime());
      String title = "Welcome Back to my website";
      Integer visitCount = new Integer(0);
      String visitCountKey = new String("visitCount");
      String userIDKey = new String("userID");
      String userID = new String("ABCD");
      // Check if this is new comer on your web page.
      if (session.isNew()){
         title = "Welcome to my website";
         session.setAttribute(userIDKey, userID);
      } else {
         visitCount = (Integer)session.getAttribute(visitCountKey);
         visitCount = visitCount + 1;
         userID = (String)session.getAttribute(userIDKey);
      }
      session.setAttribute(visitCountKey,  visitCount);
      // Set response content type
      response.setContentType("text/html");
      PrintWriter out = response.getWriter();
      String docType =
      "\n";
      out.println(docType +
                "\n" +
                "" + title + "\n" +
                "\n" +
                "" + title + "\n" +
                 "Session Infomation\n" +
                "\n" +
                "\n" +
                "  Session infovalue\n" +
                "\n" +
                "  id\n" +
                "  " + session.getId() + "\n" +
                "\n" +
                "  Creation Time\n" +
                "  " + createTime +
                "  \n" +
                "\n" +
                "  Time of Last Access\n" +
                "  " + lastAccessTime +
                "  \n" +
                "\n" +
                "  User ID\n" +
                "  " + userID +
                "  \n" +
                "\n" +
                "  Number of visits\n" +
                "  " + visitCount + "\n" +
                "\n" +
                "");
  }
}
```
编译上述 servlet SessionTrack 并在 web.xml 文件中创建适当的条目。在浏览器地址栏输入 http://localhost:8080/SessionTrack，当你第一次运行时将显示如下所示的结果：
现在尝试再次运行相同的 servlet，它将显示如下所示的结果：
### 删除会话数据
当你完成了一个用户的会话数据，你有以下几种选择：
* 移除一个特定的属性：你可以调用 public void removeAttribute(String name) 方法来删除与特定的键相关联的值。
* 删除整个会话：你可以调用 public void invalidate() 方法来删除整个会话。
* 设置会话超时：你可以调用 public void setMaxInactiveInterval(int interval) 方法来单独设置会话超时。
* 注销用户：支持 servlet 2.4 的服务器，你可以调用 logout 来注销 Web 服务器的客户端，并把属于所有用户的所有会话设置为无效。
web.xml 配置：如果你使用的是 Tomcat，除了上述方法，你还可以在 web.xml 文件中配置会话超时，如下所示：
```xml
    15
```
超时时间是以分钟为单位的，并覆盖了 Tomcat 中默认的 30 分钟的超时时间。
Servlet 中的 `getMaxInactiveInterval()` 方法为会话返回的超时时间是以秒为单位的。所以如果在 web.xml 中配置会话超时时间为 15 分钟，那么 `getMaxInactiveInterval()` 会返回 900。
---
## 数据库访问
如何使用 JDBC 访问数据库及其环境配置的更多细节，可以查看 [JDBC](../存储/JDBC.md)
创建表
```sql
use test;
create table Employees
    (
     id int not null,
     age int not null,
     first varchar (255),
     last varchar (255)
    );
INSERT INTO Employees VALUES (100, 18, 'Zara', 'Ali');
INSERT INTO Employees VALUES (101, 25, 'Mahnaz', 'Fatma');
INSERT INTO Employees VALUES (102, 30, 'Zaid', 'Khan');
INSERT INTO Employees VALUES (103, 28, 'Sumit', 'Mittal');
```
这里的例子演示了如何使用 Servlet 访问 test 数据库。
```java
// Loading required libraries
import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;
import java.sql.*;
@WebServlet(urlPatterns = "/DatabaseAccess")
public class DatabaseAccess extends HttpServlet{
    private static JDBCUtils JDBCutiss;
    public void doGet(HttpServletRequest request,
                      HttpServletResponse response)
            throws ServletException, IOException
    {
        // Set response content type
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        String title = "Database Result";
        String docType =
                "\n";
        out.println(docType +
                "\n" +
                "" + title + "\n" +
                "\n" +
                "" + title + "\n");
        try{
            // Register JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            // Open a connection
            Connection conn = JDBCutiss.getConnection();
            // Execute SQL query
            Statement stmt = conn.createStatement();
            String sql;
            sql = "SELECT id, first, last, age FROM Employees";
            ResultSet rs = stmt.executeQuery(sql);
            // Extract data from result set
            while(rs.next()){
                //Retrieve by column name
                int id  = rs.getInt("id");
                int age = rs.getInt("age");
                String first = rs.getString("first");
                String last = rs.getString("last");
                //Display values
                out.println("ID: " + id + "");
                out.println(", Age: " + age + "");
                out.println(", First: " + first + "");
                out.println(", Last: " + last + "");
            }
            out.println("");
            // Clean-up environment
            rs.close();
            JDBCutiss.close(stmt,conn);
            conn.close();
        }catch(SQLException se){
            //Handle errors for JDBC
            se.printStackTrace();
        }catch(Exception e){
            //Handle errors for Class.forName
            e.printStackTrace();
        }
    }
}
```
记得弄个 JDBCUtils 类
```java
import com.alibaba.druid.pool.DruidDataSourceFactory;
import javax.sql.DataSource;
import java.io.IOException;
import java.io.InputStream;
import java.sql.*;
import java.util.Properties;
public class JDBCUtils {
    private static DataSource ds;
    static {
        Properties pro = new Properties();
        InputStream rs = JDBCUtils.class.getClassLoader().getResourceAsStream("druid.properties");
        try {
            pro.load(rs);
            try {
                ds = DruidDataSourceFactory.createDataSource(pro);
            } catch (Exception e) {
                e.printStackTrace();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //返回连接对象
    public static Connection getConnection() throws SQLException {
        return ds.getConnection();
    }
    public  static void close(Statement stmt, Connection conn){
        if (stmt!=null){
            try {
                stmt.close();
            } catch (SQLException throwables) {
                throwables.printStackTrace();
            }
        }
        if (conn!=null){
            try {
                conn.close();
            } catch (SQLException throwables) {
                throwables.printStackTrace();
            }
        }
    }
    //该方法返回定义好的DataSource对象
    public static DataSource getDataSource(){
        return ds;
    }
}
```
在 resources 创建 druid.properties
现在让我们来编译述 servlet 并在 web.xml 文件中创建以下条目：
```xml
     DatabaseAccess
     DatabaseAccess
     DatabaseAccess
     /DatabaseAccess
```
现在使用 URL http://localhost:8080/DatabaseAccess 调用这个 servlet，将显示如下所示响应：
---
## 文件上传
Servlet 可以与 HTML form 标签一起使用允许用户将文件上传到服务器。上传的文件可以是文本文件或图像文件或任何文档。
### 创建一个文件上传表单
下述 HTML 代码创建了一个文件上传表单。以下是需要注意的几点：
* 表单 method 属性应该设置为 POST 方法且不能使用 GET 方法。
* 表单 enctype 属性应该设置为 multipart/form-data.
* 表单 action 属性应该设置为 servlet 文件，能够在后端服务器处理文件上传。下面的例子是使用 UploadServlet servlet 来上传文件的。
* 要上传单个文件，你应该使用单个带有属性 type=“file” 的 `` 标签。为了允许多个文件上传，要包含多个带有 name 属性不同值的输入标签。浏览器将把一个浏览按钮和每个输入标签关联起来。
```html
File Uploading Form
File Upload:
Select a file to upload: 
```