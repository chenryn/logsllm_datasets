685 
    if(strlen(UserName) >= MAX_PATH  strlen(ProfilesDir) - 4) 
        return FALSE; 
    if(strstr(UserName, "..")) 
        return FALSE; 
    _snprintf(buf, sizeof(buf), "%s\\%s.txt", ProfilesDir, 
              UserName); 
    hProfile = CreateFile(buf, GENERIC_ALL, FILE_SHARE_READ, 
                          NULL, CREATE_ALWAYS, 0, NULL); 
    if(hProfile == INVALID_HANDLE_VALUE) 
        return FALSE; 
    ... load or create profile ... 
} 
The intention of this code is to create a text file in the user profiles directory; however, 
you can create a file with any extension you please by specifying a username such as 
test.asp:hi. This username would cause the code to create the test.asp file with the 
file stream hi.txt. Although you could create arbitrary files in this example, accessing 
the alternate file streams where you're writing data might prove to be more 
complicated, depending on the Web server being used to serve files. 
Attacks of this nature tend to work on Web-related technologies because filenames 
are often completely user controlled, and how the filename appears to the Web server 
makes a big difference in how it's processed and served to users. For example, the file 
extension might cause a file to be handled by a certain filter or Web server extension, 
as in IIS. In fact, default installations of IIS 4 and earlier had a vulnerability involving 
file streams that took advantage of this situation. By appending ::$DATA to an ASP 
script file, it was possible to read the source of the file remotely instead of having it 
run the contents as script code because IIS didn't correctly identify it as an ASP file 
and hand it off to the ASP ISAPI extension for processing. So a request such as the 
following could allow the contents of the login.asp script on a Web server to be 
revealed: 
GET /scripts/login.asp::$DATA 
Note that when using ADS notation to specify alternate data streams, the only way to 
represent the unnamed stream is by using ::$DATA. You can't omit the $DATA 
extension. The filenames C:\test.txt: and C:\test.txt:: are illegal as far as 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
686 
CreateFile() is concerned, and attempting to create or open files with these names 
results in an error. 
Extraneous Filename Characters 
CreateFile() has a few more idiosyncrasies that don't belong in any other category, 
so they are mentioned here. First, CreateFile() performs special handling of trailing 
spaces in file names. Any trailing spaces in the filename argument are silently 
stripped out, which introduces some possible vulnerabilities. This behavior might be a 
useful method of stripping out trailing path data, thus allowing attackers to choose an 
arbitrary file extension, as shown in this example: 
BOOL OpenUserProfile(LPCSTR UserName) 
{ 
    char buf[MAX_PATH]; 
    HANDLE hFile; 
    if(strstr(UserName, "..")) 
        return FALSE; 
    _snprintf(buf, sizeof(buf), "%s\\%s.txt", 
ProfileDirectory, 
              Name); 
    buf[sizeof(buf)-1] = '\0'; 
    hFile = CreateFile(buf, GENERIC_ALL, FILE_SHARE_READ, NULL, 
                       CREATE_NEW, 0, NULL); 
    if(hFile == INVALID_HANDLE_VALUE) 
        return FALSE; 
    ... more stuff ... 
} 
This code is intended to create a text file and enforces this behavior by appending 
a .txt extension. However, if users specify a filename that's close to MAX_PATH bytes, 
this .txt file extension might get cut off. By specifying a filename with an arbitrary 
extension followed by a large number of spaces, users could create any type of file 
they like. 
Having arbitrary trailing spaces might also cause an application to incorrectly identify 
files with special names or file extensions and use them incorrectly. For example, 
consider the following code: 
HANDLE GetRequestedFile(LPCSTR requestedFile) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
687 
{ 
    if(strstr(requestedFile, "..")) 
        return INVALID_HANDLE_VALUE; 
    if(strcmp(requestedFile, ".config") == 0) 
        return INVALID_HANDLE_VALUE; 
    return CreateFile(requestedFile, GENERIC_READ, 
                      FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, 
                      NULL); 
} 
This simple example checks whether users are requesting a special file .config, and 
if they are, doesn't allow them to access it. However, by specifying a filename such as 
".config", users can still gain access to this file. 
Note 
Users would also be able to access the file by requesting .config::$DATA. 
Spaces trailing the filename might also pose a threat when files are supposed to be 
unique, but the call to CreateFile() uses the CREATE_ALWAYS value for 
dwCreationDisposition instead of CREATE_NEW. Returning to the user profiles example, 
imagine you have an administrative user with special privileges. You might be able to 
steal the administrator's credentials by creating an account with a username such as 
"admin". Selecting this username might make it possible to read administrative profile 
data or even overwrite it. 
Spaces aren't the only extraneous characters stripped from filename arguments. 
Another interesting behavior of CreateFile() is that it strips trailing dots from the 
filename in much the same way it strips spaces. Any number of trailing dots are 
silently stripped off the end of a filename before the file is created, introducing 
opportunities for creating or opening unexpected files in much the same way using 
spaces does. So creating a file named "c:\test.txt.........." creates the 
c:\test.txt file. As an interesting variation, both spaces and dots can be intermingled 
in any order, and CreateFile() silently strips both spaces and dots. For example, 
passing the filename "c:\test.txt . .. ..." to CreateFile() also creates the 
C:\test.txt file. This behavior isn't well known and isn't obvious to developers, so 
attackers can use this suffix combination to trick applications into opening files. This 
is especially true of Web-based applications and Web servers because filename 
extensions often determine how they handle files. In fact, appending dots or spaces 
to filenames has resulted in several instances of being able to view the source for 
script code. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
688 
One other behavior of these trailing characters is that they aren't stripped if an ADS 
stream follows the filename. For example, if you pass the name c:\test.txt. to 
CreateFile(), the trailing dot is stripped and the c:\test.txt file is created. However, 
if you pass the name c:\test.txt.:stream to CreateFile(), the trailing dot isn't 
stripped, and the c:\test.txt. file is created (with an ADS named stream). The same 
happens if you have an unnamed ADS following the file extension, such as ::$DATA. 
However, if you have dots and/or spaces following the ADS component of the 
filename, they are truncated. So the string "C:\\test.txt::$DATA ......... . . . ..." 
creates the c:\test.txt file and writes to the default unnamed file stream. 
As a final note, DOS device names might end with a colon character (:) that's silently 
stripped out, and the device is accessed as normal. They might also contain additional 
characters after the colon, and the function still succeeds. However, an ADS isn't 
created for the device; the extraneous data is just ignored. 
Case Sensitivity 
One thing that distinguishes Windows filenames from UNIX filenames is that NTFS 
and FAT filenames aren't case sensitive. Therefore, bypassing filename and path 
checks by mixing case when accessing files is possible sometimes. If you look at the 
previous example, the GetrequestedFile() function is intended to block people from 
accessing the .config file in any directory. You saw a method for gaining access to the 
file by using extraneous trailing characters, but another method you could use is 
requesting the file with some or all of the characters in uppercase. Therefore, by 
requesting .CONFIG, you can retrieve the contents of a file that's supposed to be 
hidden from you. Any file accesses in Windows need to be assessed for case-mixing 
when validating filenames or file extensions. SPI Dynamics discovered precisely this 
type of bug in the Sun ONE Web server. The Sun ONE Web server determined how to 
process files based on the server extension, yet it treated the filenames as case 
sensitive because it was originally built for UNIX systems. Therefore, if a JSP page 
was requested with an uppercase extension (hello.JSP as opposed to hello.jsp), the 
server would mistakenly list the file's source code rather than run the script. A 
description of this bug is available at 
http://sunsolve.sun.com/search/document.do?assetkey=. 
DOS 8.3 Filenames 
In early versions of Windows and DOS, filenames were represented in the 8.3 format. 
This term refers to a filename composed of up to eight letters, followed by a dot, 
followed by a three-letter file extension. The introduction of Windows NT and 95 
allowed using longer filenames, filenames containing spaces, and filenames without 
extensions. To retain compatibility with earlier Windows versions, these newer file 
systems store a long filename and an 8.3 filename for every file. This 8.3 filename is 
generally composed of the first six letters of the long filename followed by a tilde(~) 
and a number, and then the dot and the first three letters of the extension. The 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
689 
number after the tilde differentiates between long filenames that have the first six 
letters of their names in common. For example, the thisisalongfilename.txt 
filename can usually be referred to as thisis~1.txt. 
This format can become a bit of a security problem for filenames that are more than 
eight characters, not including the dot or file extension. This issue is relevant when 
certain files aren't allowed to be accessed or data is kept in separate files 
distinguished by a key that's meant to be unique. For example, refer to the user 
profile code used to demonstrate some file handling vulnerabilities so far. In 
applications such as this one, it might be possible to steal other users' credentials by 
creating a username that's the same initial six letters followed by a ~1. Assume the 
application is managing users, one of whom is an administrator with the username 
administrator. Creating a new user with the name admini~1 might allow an attacker 
to access that user's profile due to the equivalence of the two names. 
When auditing code for bugs of this nature, be mindful that it may be possible to 
circumvent filename restrictions if a requested filename is larger than eight 
characters. However, this issue can be prevented by prepending the UNC path 
identifier (\\?\) to disable DOS filename parsing when calling CreateFile(). 
Auditing File Opens 
The flexibility of the CreateFile() function can cause a number of problems. You can 
formalize these problems as an ordered list of things to check to determine whether 
a file open is safe. This summary has been divided into tables based on what part of 
the filename users can control: the beginning, the middle, or the end. Some potential 
vulnerabilities fit into more than one of these categories, so there's also a table 
summarizing attacks that are possible when users control any part of the filename. 
This section is a summary of all the attacks discussed thus far in file openings, so it is 
intended as a reference for code auditors when encountering file opens. These tables 
simply list attacks made possible by the file APIs and don't explain when they could be 
used to compromise an application because you have already covered that ground. 
These summaries are just based on generic file open problems that might occur; 
applications might, of course, contain context-specific logic flaws in the way they 
open files (such as not adequately checking file permissions when running in an 
elevated context), and these flaws aren't summarized. Finally, these rules don't apply 
if untrusted data is not used to compose any part of the pathname. 
Controlling the Beginning of a Filename 
Table 11-8 summarizes potential vulnerabilities to check for when users can control 
the beginning of a filename argument. 
Table 11-8. Controlling the Beginning of a Filename 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
690 
Attack 
Vulnerable If 
Specifying an 
absolute path 
There's no check for path separators. 
Specifying a 
named pipe 
The code fails to check that the file being accessed is a regular file 
(has the attribute FILE_ATTRIBUTE_NORMAL) using GetFileAttributes() 
or is a disk file (FILE_TYPE_DISK) according to GetFileType(). 
Specifying a 
mailslot 
Same as for named pipes. 
Controlling the Middle of a Filename 
Table 11-9 summarizes potential problems when malicious users can specify part of 
the filename, but there's constant data both before and after the user-controlled 
string. 
Table 11-9. Controlling the Middle of a Filename 
Attack 
Vulnerable If 
Directory 
traversal 
attack 
The code fails to check for directory traversal characters (..). 
DOS 8.3 
filenames 
The code does static string comparisons on potentially long filenames 
and makes policy decisions based on that comparison. Also, the 
filename must be passed to CreateFile() without being prefixed with 
\\?\. 
Controlling the End of a Filename 
Table 11-10 summarizes vulnerabilities that might arise in an application when users 
can control the end of a filename. In many instances, it might be the intention that 
users control just the middle of a filename, but they can control the end by using up 
the entire amount of space in a buffer. For example, in the following line, if user_input 
is large enough, the .txt extension will be cut off: 
_snprintf(buf, sizeof(buf), "%s.txt", user_input); 
Table 11-10. Controlling the End of a Filename 
Attack 
Vulnerable If 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
691 
Table 11-10. Controlling the End of a Filename 
Attack 
Vulnerable If 
Directory 
traversal attack 
The code fails to check for directory traversal characters (..). 
Adding 
extraneous 
trailing characters 
Some checks are made on the file extension or filename without 
taking into account the silent truncation of spaces and dots. 
DOS 8.3 
filenames 
The code does static string comparisons on potentially long 
filenames and makes policy decisions based on that comparison. 
Also, the filename must be passed to CreateFile() without being 
prefixed with \\?\. 
Controlling Any Part of the Filename 
Table 11-11 summarizes generic attacks that might be available to attackers, no 
matter what part of the filename they control. 
Table 11-11. Controlling Any Part of a Filename 
Attack 
Vulnerable If 
Specifying a 
device 
The code fails to check that the file being accessed is a regular file (has 
the attribute FILE_ATTRIBUTE_NORMAL) using GetFileAttributes() or is a 
disk file (FILE_TYPE_DISK) according to GetFileType(). Also, vulnerable 
only if the pathname isn't prefixed with \\?\. 
Specifying 
ADS 
The code fails to check for the ADS separator (:). 
Filename 
squatting 
The code intends to create new files but doesn't use the CREATE_NEW flag 
to CreateFile(), and users are able to write files into the relevant 
directory. 
Case 
sensitivity 
The code does checks on a filename assuming case sensitivity (more 
common in code ported from UNIX to Windows). 
Links 
Links provide a mechanism for different file paths to point to the same file data on 
disk. Windows provides two mechanisms for linking files: hard links and junction 
points. Hard links in Windows are similar to those in UNIX; they simply allow a file on 
disk to have multiple names. Junction points enable a directory to point to another 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
692 
directory or volume attached to the system. They apply to directories only; there's no 
soft link parallel in Windows, with the exception of Windows shortcut files. The 
presence of these special files might allow attackers to trick applications into 
accessing files in unauthorized locations, thus potentially undermining the security of 
the application. The following sections discuss how to identify problems that result 
from encountering these types of special files. 
Hard Links 
Creating a hard link simply assigns an additional name to the linked file so that the file 
can be referred to by either name. A file object on disk keeps track of how many 
names refer to it so that when a link is deleted, the file is removed from the system 
only when no more names refer to it. A hard link can be created programmatically by 
using the CreateHardLink() function. Hard links can be applied only to files, not 
directories, and the original file and the new hard link must reside on the same 
volume; you can't create a link to a file where the target name resides on a separate 
volume or a remote location specified by a UNC path name. Finally, the user creating 
the hard link must have appropriate access to the destination file. 
Junction Points 
Junction points are special directories that are simply pointers to another directory; 
the target directory can be located on the same volume or a different volume. In 
contrast to hard links, junction points can point only between directories; files can't 
be used as the source or target of a junction point. 
Note 
Actually, you can create directory junction points that point to files, but attempts to 
open them always fail with ERROR_ACCESS_DENIED. 
Apart from this limitation, junction points are similar to the symbolic links discussed 
already in the UNIX chapters. Junctions are available only on volumes formatted as 
NTFS 5 and later, as they use reparse point functionality in those NTFS versions. 
Reparse Points 
Junctions are implemented through the use of NTFS reparse points. NTFS 
files and directories can set the FILE_ATTRIBUTE_REPARSE_POINT attribute to 
indicate that a file system driver needs to intervene in file-handling 
operations. The file system driver then performs special parsing on a reparse 
data buffer associated with the file. Every file system driver that implements 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
693 
reparse points has a unique tag registered in the kernel. When a file with a 
reparse point is encountered, the reparse data buffer is compared against 
each registered tag value, and then passed off to the appropriate driver 
when a match is found. If no match is found, the file access fails. 
Junctions are one implementation of reparse points. They apply only to 
directories, which must be emptya constraint of reparse points applied to 
directories. Their data buffer contains a pointer to the target location the 
directory is intended to point to. The driver can then use this information to 
find the real target file an application is attempting to access. 
At the time of this writing, there's no publicly exposed API to manipulate 
reparse points easily. However, users can construct and examine reparse 