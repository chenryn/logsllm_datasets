org – Noncommercial organizations. 
xx – Two-letter country code names that follow the International Standard 3166. For example, “.fr” is the 
country code for France. 
arpa – Used to store information for DNS reverse queries. 
Each top-level domain has name servers that IANA administers. Top-level domains can contain 
second-level domains and hosts. 
Second-level domains contain the domains and names for organizations and countries/regions. The 
names in second-level domains are administered by the organization or country/region either directly 
(by placing its own DNS server on the Internet) or by using an Internet service provider (ISP) who 
manages the names for an organization or country/region on its customer's behalf. 
Zones 
A zone is a contiguous portion of a domain of the DNS namespace whose database records exist and 
are managed in a particular DNS database file stored on one or multiple DNS servers. You can 
configure a single DNS server to manage one or multiple zones. Each zone is anchored at a specific 
domain node, referred to as the zone's root domain. Zone files do not necessarily contain the complete 
branch (that is, all subdomains) under the zone's root domain. For example, you can partition a domain 
into several subdomains, which are controlled by separate DNS servers. You might break up domains 
across multiple zone files if you want to distribute management of the domain across different groups or 
make data replication more efficient.  
Figure 8-2 shows the difference between domains and zones. 
Chapter 8 – Domain Name System Overview 
TCP/IP Fundamentals for Microsoft Windows  
Page: 221 
Figure 8-2  Domains and zones 
In the example, "microsoft.com" is a domain (the entire branch of the DNS namespace that starts with 
the microsoft.com. node), but the entire domain is not controlled by one zone file. Part of the domain is 
in a zone for "microsoft.com." and part of the domain is in a zone for the "dev.microsoft.com." domain. 
These zones correspond to different DNS database files that can reside on the same or different DNS 
servers. 
Chapter 8 – Domain Name System Overview 
TCP/IP Fundamentals for Microsoft Windows  
Page: 222 
Name Resolution 
The two types of queries that a DNS resolver (either a DNS client or another DNS server) can make to 
a DNS server are the following: 
Recursive queries  
In a recursive query, the queried name server is requested to respond with the requested data or 
with an error stating that data of the requested type or the specified domain name does not exist. 
The name server cannot just refer the DNS resolver to a different name server. A DNS client 
typically sends this type of query. 
Iterative queries  
In an iterative query, the queried name server can return the best answer it currently has back to 
the DNS resolver. The best answer might be the resolved name or a referral to another name 
server that is closer to fulfilling the DNS client's original request. DNS servers typically send 
iterative queries to query other DNS servers. 
DNS Name Resolution Example 
To show how recursive and iterative queries are used for common DNS name resolutions, consider a 
computer running Windows Vista, Windows XP, Windows Server 2008, or Windows Server 2003 
connected to the Internet. A user types http://www.example.com in the Address field of their 
Internet browser. When the user presses the ENTER key, the browser makes a Windows Sockets 
function call, either gethostbyname() or getaddrinfo(), to resolve the name http://www.example.com 
to an IP address. For the DNS portion of the Windows host name resolution process, the following 
occurs: 
1. The DNS resolver on the DNS client sends a recursive query to its configured DNS server, 
requesting the IP address corresponding to the name "www.example.com". The DNS server for that 
client is responsible for resolving the name and cannot refer the DNS client to another DNS server.  
2. The DNS server that received the initial recursive query checks its zones and finds no zones 
corresponding to the requested domain name; the DNS server is not authoritative for the 
example.com domain. Because the DNS server has no information about the IP addresses of DNS 
servers that are authoritative for example.com. or com., it sends an iterative query for 
www.example.com. to a root name server. 
3. The root name server is authoritative for the root domain and has information about name servers 
that are authoritative for top-level domain names. It is not authoritative for the example.com. domain. 
Therefore, the root name server replies with the IP address of a name server for the com. top-level 
domain.  
4. The DNS server of the DNS client sends an iterative query for www.example.com. to the name 
server that is authoritative for the com. top-level domain.  
5. The com. name server is authoritative for the com. domain and has information about the IP 
addresses of name servers that are authoritative for second-level domain names of the com. domain. 
It is not authoritative for the example.com. domain. Therefore, the com. name server replies with the 
IP address of the name server that is authoritative for the example.com. domain.  
Chapter 8 – Domain Name System Overview 
TCP/IP Fundamentals for Microsoft Windows  
Page: 223 
6. The DNS server of the DNS client sends an iterative query for www.example.com. to the name 
server that is authoritative for the example.com. domain.  
7. The example.com. name server replies with the IP address corresponding to the FQDN 
www.example.com.  
8. The DNS server of the DNS client sends the IP address of www.example.com to the DNS client. 
Figure 8-3 shows this process. 
Figure 8-3  Example of recursive and iterative queries in DNS name resolution 
All DNS queries are DNS Name Query Request messages. All DNS replies are DNS Name Query 
Response messages. 
In practice, DNS servers cache the results of queries on an ongoing basis. If a DNS server finds an 
entry matching the current request in its cache, it does not send an iterative DNS query. This example 
assumes that no cache entries were in any of the DNS servers to prevent the sending of the iterative 
name queries. 
Forward lookups are queries in which a DNS client attempts to resolve an FQDN to its corresponding IP 
address. Zones that contain FQDN-to-IP address mappings are known as forward lookup zones. 
Reverse Queries 
In a reverse query, instead of supplying a name and asking for an IP address, the DNS client provides 
the IP address and requests the corresponding host name. Reverse queries are also known as reverse 
lookups, and zones that contain IP address-to-FQDN mappings are known as reverse lookup zones. 
Chapter 8 – Domain Name System Overview 
TCP/IP Fundamentals for Microsoft Windows  
Page: 224 
Because you cannot derive the IP address from a domain name in the DNS namespace, only a 
thorough search of all domains could guarantee a correct answer. To prevent an exhaustive search of 
all domains for a reverse query, reverse name domains and pointer (PTR) resource records were 
created. 
An example of an application that uses reverse queries is the Tracert tool, which by default uses 
reverse queries to display the names of the routers in a routing path. If you are going to use reverse 
queries, you must create reverse lookup zones and PTR records when you administer a DNS server so 
that reverse queries can be satisfied. 
Reverse Queries for IPv4 Addresses 
To support reverse lookups for IPv4 addresses, a special domain named in-addr.arpa. was created. 
Nodes in the in-addr.arpa domain are named after the numbers in the dotted decimal representation of 
IPv4 addresses. But because IPv4 addresses get more specific from left to right and domain names get 
more specific from right to left, the order of IPv4 address octets must be reversed when building the in-
addr.arpa domain name corresponding to the IPv4 address. For example, for the generalized IPv4 
address w.x.y.z, the corresponding reverse query name is z.y.x.w.in-addr.arpa. IANA delegates 
responsibility for administering the reverse query namespace below the in-addr.arpa domain to 
organizations as they are assigned IPv4 address prefixes.  
Figure 8-4 shows an example of the reverse lookup portion of the DNS namespace. 
Figure 8-4  An example of a reverse lookup portion of the DNS namespace 
Within the in-addr.arpa domain, special pointer (PTR) resource records are added to associate the IPv4 
addresses to their corresponding host names. To find a host name for the IPv4 address 157.54.200.2, a 
DNS client sends a DNS query for a PTR record for the name 2.200.54.157.in-addr.arpa. Reverse 
queries use the same name resolution process previously described for forward lookups (a combination 
Chapter 8 – Domain Name System Overview 
TCP/IP Fundamentals for Microsoft Windows  
Page: 225 
of recursive and iterative queries). The DNS server finds the PTR record that contains the FQDN that 
corresponds to the IPv4 address 157.54.200.2 and sends that FQDN back to the DNS client. 
Reverse Queries for IPv6 Addresses 
IPv6 reverse lookups use the ip6.arpa. domain. To create the domains for reverse queries, each 
hexadecimal digit in the fully expressed 32-digit IPv6 address becomes a separate level in the reverse 
domain hierarchy in inverse order. 
For example, the reverse lookup domain name for the address 2001:db8::1:2aa:ff:fe3f:2a1c (fully 
expressed as 2001:0db8:0000:0001:02aa:00ff:fe3f:2a1c) is 
c.1.a.2.f.3.e.f.f.f.0.0.a.a.2.0.1.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa. 
Just as in IPv4 addresses, PTR records in the reverse IPv6 domain map IPv6 addresses to FQDNs. 
Caching and TTL 
For each resolved query (either recursive or iterative), the DNS resolver caches the returned 
information for a time that is specified in each resource record in the DNS response. This is known as 
positive caching. The amount of time in seconds to store the record data in the cache is referred to as 
the Time To Live (TTL). The network administrator of the zone that contains the record decides on the 
default TTL for the data in the zone. Smaller TTL values help ensure that data about the domain is 
more consistent across the network if the zone data changes often. However, this practice also 
increases the load on name servers because positive cache entries time out more quickly.  
After a DNS resolver caches data, it must start counting down from the received TTL so that it will know 
when to remove the data from its cache. For queries that can be satisfied by this cached data, the TTL 
that is returned is the current amount of time left before the data is flushed from the DNS cache. DNS 
client resolvers also have data caches and honor the TTL value so that they know when to remove the 
data. 
The DNS Client service in Windows Vista, Windows XP, Windows Server 2008 and Windows 
Server 2003 and the DNS Server service in Windows Server 2008 and Windows Server 2003 support 
positive caching. 
Negative Caching 
As originally defined in RFC 1034, negative caching is the caching of failed name resolutions. A failed 
name resolution occurs when a DNS server returns a DNS Name Query Response message with an 
indication that the name was not found. Negative caching can reduce response times for names that 
DNS cannot resolve for both the DNS client and DNS servers during an iterative query process. Like 
positive caching, negative cache entries eventually time out and are removed from the cache based on 
the TTL in the received DNS Name Query Response message. 
The DNS Client service in Windows Vista, Windows XP, Windows Server 2008, and Windows 
Server 2003 and the DNS Server service in Windows Server 2008 and Windows Server 2003 support 
negative caching. 
Round Robin Load Balancing 
DNS Name Query Response messages can contain multiple resource records. For example, for a 
simple forward lookup, the DNS Name Query Response message can contain multiple Address (A) 
Chapter 8 – Domain Name System Overview 
TCP/IP Fundamentals for Microsoft Windows  
Page: 226 
records that contain the IPv4 addresses associated with the desired host. When multiple resource 
records for the same resource record type exist, the following issues arise: 
For the DNS server, how to order the resource records in the DNS Name Query Response message 
For the DNS client, how to choose a specific resource record in the DNS Name Query Response 
message 
To address these issues, RFC 1794 describes a mechanism named round robin or load sharing to 
share and distribute loads for network resources. The central assumption of RFC 1794 is that when 
multiple resource records for the same resource record type and the same name exist, multiple servers 
are offering the same type of service to multiple users. For example, the www.microsoft.com Web site 
is actually hosted by multiple Web servers with different IPv4 addresses. To attempt to distribute the 
load of servicing all the users who access www.microsoft.com, the DNS servers that are authoritative 
for microsoft.com modify the order of the resource records for the www.microsoft.com name in 
successive DNS Name Query Response messages. The DNS client uses the data in the first resource 
record in the response. 
For example, if there were three A records for www.microsoft.com with the IPv4 addresses of 
131.107.0.99, 131.107.0.100, and 131.107.0.101, the round robin scheme works as follows: 
For the first request, the order of the resource records in the DNS Name Query Response message is 
131.107.0.99-131.107.0.100-131.107.0.101. 
For the second request, the order of the resource records in the DNS Name Query Response message 
is 131.107.0.100-131.107.0.101-131.107.0.99. 
For the third request, the order of the resource records in the DNS Name Query Response message is 
131.107.0.101-131.107.0.99-131.107.0.100. 
The pattern repeats for subsequent queries. For an arbitrary number of resource records, the rotation 
process cycles through the list of resource records.  
A DNS server running Windows Server 2008 or Windows Server 2003 that is responding to a recursive 
query by default attempts to order the resource records according to the addresses that most closely 
match the IP address of the originating DNS client, and you can configure that server for round robin 
according to RFC 1794. To determine the addresses that are the closest match to the IPv4 address of 
the DNS client, the DNS Server service in Windows Server 2008 and Windows Server 2003 orders the 
addresses by using a high-order bit-level comparison of the DNS client's IPv4 address and the IPv4 
addresses associated with the queried host name. This comparison technique is similar to the route 
determination process, in which IPv4 or IPv6 examines the IPv4 or IPv6 routing table to determine the 
route that most closely matches the destination address of a packet being sent or forwarded. 
Chapter 8 – Domain Name System Overview 
TCP/IP Fundamentals for Microsoft Windows  
Page: 227 
Name Server Roles 
DNS servers store information about portions of the domain namespace. When name servers have one 
or more zones for which they are responsible, they are said to be authoritative servers for those zones. 
Using the example in Figure 8-2, the name server containing the dev.microsoft.com zone is an 
authoritative server for dev.microsoft.com.  
Configuration of a DNS server includes adding name server (NS) resource records for all the other 
name servers that are in the same domain. Using the example on the previous page, if the two zones 
were on different name servers, each would be configured with an NS record about the other. These 
NS records provide pointers to the other authoritative servers for the domain. 
DNS defines two types of name servers, each with different functions:  
Primary 
A primary name server gets the data for its zones from locally stored and maintained files. To 
change a zone, such as adding subdomains or resource records, you change the zone file at the 
primary name server.  
Secondary 
A secondary name server gets the data for its zones across the network from another name server 
(either a primary name server or another secondary name server). The process of obtaining this 
zone information (that is, the database file) across the network is referred to as a zone transfer. 
Zone transfers occur over TCP port 53.  
The following are reasons to have secondary name servers within an enterprise network: 
Redundancy: At least two DNS servers, a primary and at least one secondary, serving each zone 
are needed for fault tolerance.  
Remote locations: Secondary name servers (or other primary servers for subdomains) are needed 
in remote locations that have a large number of DNS clients. Clients should not have to 
communicate across slower wide area network (WAN) links for DNS queries.  
Load distribution: Secondary name servers reduce the load on the primary name server.  
Because information for each zone is stored in separate files, the primary or secondary name server 
designation is defined at a zone level. In other words, a specific name server may be a primary name 
server for certain zones and a secondary name server for other zones.  
When defining a zone on a secondary name server, you configure the zone with the name server from 
which the zone information is to be obtained. The source of the zone information for a secondary name 
server is referred to as a master name server. A master name server can be either a primary or 
secondary name server for the requested zone. Figure 8-5 shows the relationship between primary, 
secondary, and master name servers. 
Chapter 8 – Domain Name System Overview 
TCP/IP Fundamentals for Microsoft Windows  
Page: 228 
Figure 8-5  Primary, secondary, and master name servers 
When a secondary name server starts up, it contacts the master name server and initiates a zone 
transfer for each zone for which it is acting as a secondary name server. Zone transfers also can occur 
periodically (provided that data on the master name server has changed) as specified in the SOA 
record of the zone file. The "Resource Records and Zones" section of this chapter describes the SOA 
resource record. 
Forwarders 
When a DNS server receives a query, it attempts to locate the requested information within its own 
zone files. If this attempt fails because the server is not authoritative for the domain of the requested 
name and it does not have the record cached from a previous lookup, it must communicate with other 
name servers to resolve the request. On a globally connected network such as the Internet, DNS 
queries for names that do not use the second-level domain name of the organization might require 
interaction with DNS servers across WAN links outside of the organization. To prevent all the DNS 
servers in the organization from sending their queries over the Internet, you can configure forwarders. A 
forwarder sends queries across the Internet. Other DNS servers in the organization are configured to 
forward their queries to the forwarder. 
Figure 8-6 shows an example of intranet servers using a forwarder to resolve Internet names. 
Chapter 8 – Domain Name System Overview 
TCP/IP Fundamentals for Microsoft Windows  
Page: 229 
Figure 8-6  Using a forwarder to resolve Internet names 
A name server can use a forwarder in non-exclusive or exclusive mode.  
Forwarders in Non-exclusive Mode 
In non-exclusive mode, when a name server receives a DNS query that it cannot resolve through its 
own zone files, it sends a recursive query to its forwarder. The forwarder attempts to resolve the query 
and returns the results to the requesting name server. If the forwarder is unable to resolve the query, 
the name server that received the original query attempts to resolve the query using iterative queries.  
A name server using a forwarder in non-exclusive mode does the following when attempting to resolve 
a name: 
1. Checks its local cache. 
2. Checks its zone files. 
3. Sends a recursive query to a forwarder. 
4. Attempts to resolve the name through iterative queries to other DNS servers. 
Forwarders in Exclusive Mode 
In exclusive mode, name servers rely on the name-resolving ability of the forwarders. When a name 
server in exclusive mode receives a DNS query that it cannot resolve through its own zone files, it 
sends a recursive query to its designated forwarder. The forwarder then carries out whatever 
communication is necessary to resolve the query and returns the results to the originating name server. 
If the forwarder is unable to resolve the request, the originating name server returns a query failure to 
the original DNS client. Name servers in exclusive mode make no attempt to resolve the query on their 