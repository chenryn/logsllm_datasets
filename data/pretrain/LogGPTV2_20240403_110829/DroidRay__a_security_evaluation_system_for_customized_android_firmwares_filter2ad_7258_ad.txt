requests will be re-routed to some malicious websites.
To investigate this form of network security vulnerabil-
ity, we use DroidRay to extract the hosts ﬁle from An-
droid ﬁrmware and check whether it has malicious modiﬁca-
tions or not. Note that some developers may use hosts ﬁle
to block advertisements. They redirect the advertisement
servers’ host names to “127.0.0.1” in order to prevent the
server from sending advertisement to the smartphone.
In
this case, we will treat it as a warning but not a malicious
behavior. By analyzing all of our 250 downloaded ﬁrmwares,
we discovered that 54 ﬁrmwares modiﬁed their hosts ﬁles
and ﬁve Android ﬁrmwares contained malicious hosts ﬁle
(please refer to Table 7). For example, the ﬁrst row of Ta-
ble 7 shows that “HUAWEI” Android ﬁrmware with 4.1.2
version has malicious hosts ﬁle which redirects Google and
Youtube websites to malicious websites.
(2) Iptables security vulnerability: iptables is used
to set up, maintain, and inspect the tables of IPv4 or IPv6
packet ﬁlter rules. It is more versatile than the hosts ﬁle
speciﬁcation because it can deﬁne many forwarding/ﬁltering
rules for each packet. Therefore, it is very dangerous if hack-
ers add malicious rules in the iptables. In order to detect
this form of vulnerability, we use DroidRay to perform the
analysis. For the static analysis, DroidRay ﬁrst searches all
the initial scripts in the ﬁrmware and checks whether it has
“iptables” command or not. Then DroidRay searches ipt-
ables conﬁguration ﬁle from the “/system/etc/” folder. For
the dynamic analysis, DroidRay executes the “iptables -
list-rules” command to obtain all rules from the devices.
If the system ﬁnds that the iptables rules are not none,
DroidRay will report a warning to the analysts. Note that
DroidRay will not consider the forward rules that redirect
the advertisement servers’ package to “127.0.0.1”. By ana-
lyzing all of our 250 downloaded ﬁrmwares, we discovered
that two Android ﬁrmwares modiﬁed their iptables rules
and no Android ﬁrmware contains malicious iptables rules.
5.3 Privilege Escalation Vulnerability Detec-
tion
Privilege escalation vulnerabilities can be exploited by a
malicious application to gain high level privileges (e.g., root
and system levels) and execute malicious actions that would
normally be restricted by the Android system. A num-
ber of such vulnerabilities (e.g., GingerBreak [2] and Mas-
terKey [26]) were discovered in the core Android platform,
aﬀecting nearly all Android devices. Although manufactur-
ers have tried their best to ﬁx these vulnerabilities, unfor-
tunately, privilege escalation vulnerabilities still remain un-
patched on large populations of Android ﬁrmwares.
MD5 of ﬁrmware Image
Size
(MB) Version
OS
Phone Model
# Malicious Behavior
of Apps
5EC3A725107D787C51F73055E2B2836B
5F262C7046904152ABC0DC0635694EA2
67C031B8BCC97B2EBE672B30243C3050
8A3598500340843FF1D0609F42E852E7
E43B91728003193EA4E889C20310FD5D
473
286
306
428
207
4.1.2
4.0.3
4.0.3
4.1.2
4.0.4
HUAWEI U9508
X907
X907
LT26i
HUAWEI C8812
127
92
92
161
75
Redirect google and youtube
Redirect facebook
Redirect yahoo
Redirect google
Redirect adobe and wikipedia
Table 7: Modiﬁed Firmwares with Malicious Hosts File
We use DroidRay to explore the existence of privilege esca-
lation vulnerabilities on Android ﬁrmware systems. For the
static analysis, we classify escalation vulnerabilities into na-
tive level vulnerabilities (e.g.,GingerBreak and ZergRush [24])
and Java level vulnerabilities (e.g., MasterKey). For native
level vulnerabilities, DroidRay ﬁrst extracts the potential
vulnerable elf ﬁles from the Android ﬁrmware and then
disassembles the potential vulnerable functions into ARM
assemble language. Then the system compares the control
ﬂow of the potential vulnerable functions with the vulner-
able functions stored in our vulnerability database. Note
that for patching vulnerable ﬁles, developers need to add
new judgement code into the vulnerable functions. This is
the reason why we choose the control ﬂow as the signature.
For example, Android 2.2 (as known as Froyo) has a RageA-
gainsttheCage vulnerability. This vulnerability exploits the
lack of checking for the return value of setuid() function in
the /system/bin/adb ﬁle. After the initial process has the
root privilege, the adb daemon attempts to call setuid() to
set its uid to the shell privilege in its code:
setgid(AIL_SHELL);
setuid(AIL_SHELL);
However, the exploit attempts to fork as many “adb” pro-
cesses as possible in order to make the “setuid” fail. In ad-
dition, the current adb code does not check whether the se-
tuid() call was successful or not and it will keep running as
a root process even if the call fails. To patch this vulnerabil-
ity, Android 2.3 adds the privilege check after the setuid()
call:
if (setgid(AIL_SHELL) != 0) {
exit(0);
}
if (setuid(AIL_SHELL) != 0) {
exit(0);
}
For Java level vulnerabilities, DroidRay ﬁrst extracts the
potential vulnerable odex or jar ﬁles from the Android ﬁrmware
and then disassembles the potential vulnerable functions
into Dalvik assemble language. Then the system compares
the control ﬂow of the potential vulnerable functions with
the vulnerable functions stored in our vulnerability database.
For example, Android 4.2 has a master key vulnerability.
This vulnerability exploits the lack of checking for the du-
plicate name of the entries in the zip ﬁle. So hackers can
create two ﬁles with the same name in order to bypass the
signature veriﬁcation:
LinkedHashMap mEntries
= new LinkedHashMap();
for (int i = 0; i < numEntries; ++i) {
ZipEntry newEntry = new ZipEntry(hdrBuf, bin);
mEntries.put(newEntry.getName(), newEntry);
}
To patch this vulnerability, Android 4.3 adds the duplicate
name check after the mEtries putting the name into the
HashMap:
for (int i = 0; i < numEntries; ++i) {
ZipEntry newEntry = new ZipEntry(hdrBuf, bin);
String entryName = newEntry.getName();
if (mEntries.put(entryName, newEntry) != null) {
throw new ZipException("Duplicate" +
"entry(cid:32)name:(cid:32)" + entryName);
}
}
For dynamic analysis, DroidRay uses the “adb” to exe-
cute all real exploits in our vulnerability database and then
checks whether the exploits are successful or not. Last but
not least, DroidRay reports the potential privilege escalation
vulnerabilities to the user.
Currently, our vulnerability database includes four na-
tive level vulnerabilities and three Java level vulnerabilities
(please refer to Table 8). In Table 8, the ﬁrst column shows
the name of the vulnerability. The second column shows the
check points of the vulnerability and the last column shows
the type (native or Java) of the vulnerability. For example,
the ﬁrst row shows the RageAgainsttheCage vulnerability we
discussed before. By analyzing all of our 250 downloaded
ﬁrmwares, we discovered that most of ﬁrmwares can defend
against native level vulnerabilities. However, nearly 99%
ﬁrmwares have Java level vulnerabilities. The experiment
result is summarized in Table 9. The ﬁrst column is the
name of the vulnerability. The second column indicates how
many ﬁrmwares have this type of vulnerability, and the last
column depicts the percentage of vulnerable ﬁrmwares.
vulnerability name
RageAgainsttheCage [3]
GingerBreak [2]
ZergRush [24]
CVE-2009-1185 [6]
Masterkey1[26]
Masterkey2[25]
Masterkey3[27]
# of ﬁrmware Percentage
0.4%
0.8%
16.0%
16.0%
99.6%
99.6%
100.0%
1
2
40
40
249
249
250
Table 9: Experiment result of privilege escalation
vulnerabilities
6. PRE-INSTALLED MALWARE CASE STUDY
As mentioned in Section 4, we discovered a malware named
“CEPlugnew” in numbers of ﬁrmwares. In March of 2013, we
captured this pre-installed zero-day Android malware family
vulnerability name
Check Point
RageAgainsttheCage [3]
GingerBreak [2]
ZergRush [24]
CVE-2009-1185 [6]
Masterkey1[26]
Masterkey2[25]
Masterkey3[27]
adb_main() function of /system/bin/adb elf file
handlePartitionAdded() function of /system/bin/vold elf file
dispatchCommand() function of libsysutils.so elf file
uevent_kernel_multicast_recv() function of /system/bin/sysinit elf file
readCentralDir() function of java.util.zip.ZipFile class of /system/framework/core.jar
getInputStream() function of java.util.zip.ZipFile class of /system/framework/core.jar
and ZipEntry() function of java.util.zip.ZipEntry class of /system/framework/core.jar
getInputStream() function of java.util.zip.ZipFile class of /system/framework/core.jar
Type
native
native
native
native
Java
Java
Java
Table 8: vulnerability Description
and its management system. The system is used to send pre-
mium rate SMS and distribute pay per install applications.
In this section, we present our investigation of this zero-
day Android malware, its operating process and its business
chain.
6.1 Zero-day Malware: CEPlugnew
As we mentioned in Section 4, malware writers can pay
money to some smartphone manufacturers in order to pre-
install apps in smartphones. By using DroidRay, we studied
several ﬁrmwares of low-cost smartphones and successfully
discovered a pre-installed zero-day malware. We call this
malware CEPlugnew because its package name is com.example
.plugnew. Firstly, it has INSTALL_PACKAGES and SEND_SMS
permission, so DroidRay extracts it from ﬁrmware for fur-
ther analysis. Secondly, by using dynamic analysis, we ﬁnd
it is an advanced malware using the DexClassLoader to dy-
namically decrypt and load an encrypted JAR ﬁle. In addi-
tion, because it is a pre-installed app with system privilege,
it can download and install any application when it receives
commands from the malware server. By reverse engineering,
we were able to determine the malware servers’ addresses
(e.g., 42.121.120.*). Furthermore, we discover that one of
their servers has the MSSQL SQL injection vulnerability.
We exploit this vulnerability and obtain a large database
and its malware manage system. Let us present our ﬁnd-
ings.
6.2 Malware Management System
The malware management system we obtained is a web-
based system to manage and view the status of premium rate
SMS messages and silent installation of mobile applications.
The system was written in JSP and was created in 2009.
At ﬁrst, this system was used to control the Symbian-based
malware. According to the modiﬁcation record, the system
was modiﬁed and began controlling Android-based malware
in 2011. Firstly, this system has a dynamic web page, the
malware on the controlled smartphones will visit this dy-
namic web page on the speciﬁed time with some essential
parameters (e.g., IP address, time, IMEI, IMSI, version, and
phone model). Then the system will record the information
in the MSSQL database. Secondly, if the malware writers
want to distribute an application, they only need to create a
new task and enter parameters for this task (e.g., the down-
load link and distribution numbers). On the other hand,
the malware on the controlled smartphone will request the
server for the task, and execute it on the speciﬁed time.
Thirdly, this system can be used to send a large number
of SMS messages to a host of phone numbers. In addition,
malware writers can use this system to check their monthly
proﬁts from diﬀerent telecommunications operators.
6.3 Database Analysis
We obtain the database snapshot from the malware writ-
ers’ server. The database includes more than 348,018 unique
International Mobile Equipment Identiﬁcation (IMEI) and
415,607 unique International Mobile Subscriber Identiﬁca-
tion (IMSI). The statistics of the database is summarized in
Table 10. We ﬁnd that all the smartphones in the database
were infected within ﬁve months (from 2012.10 to 2013.03).
In addition, by querying the database on the IP distribu-
tion map, we can approximate the locations of these IP ad-
dresses. Table 11 shows the number of infected IP addresses
in countries. Note that due to the page limit, we only list
those countries which have more than 50 infected smart-
phones. Finally, we use Google map API [14] to generate an
infected smartphone distribution map and it is depicted in
Figure 3. From the map, we can see that some major cities
in China, like Guangzhou, Beijing and Chengdu, have the
high number of victims. Other countries like US and other
European countries are not immune either since they have
infected devices. To the best of our knowledge, this is the
ﬁrst real world case about the pre-installed malware which
has more than 348,018 infected devices.
Database Information Description
348,018