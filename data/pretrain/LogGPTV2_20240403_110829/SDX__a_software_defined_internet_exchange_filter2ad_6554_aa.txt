title:SDX: a software defined internet exchange
author:Arpit Gupta and
Laurent Vanbever and
Muhammad Shahbaz and
Sean P. Donovan and
Brandon Schlinker and
Nick Feamster and
Jennifer Rexford and
Scott Shenker and
Russ Clark and
Ethan Katz-Bassett
SDX: A Software Deﬁned Internet Exchange
Arpit Gupta†, Laurent Vanbever(cid:63), Muhammad Shahbaz†, Sean P. Donovan†, Brandon Schlinker‡
Nick Feamster†, Jennifer Rexford(cid:63), Scott Shenker(cid:5), Russ Clark†, Ethan Katz-Bassett‡
†Georgia Tech (cid:63)Princeton University (cid:5)UC Berkeley ‡Univ. of Southern California
Abstract
BGP severely constrains how networks can deliver trafﬁc over the
Internet. Today’s networks can only forward trafﬁc based on the
destination IP preﬁx, by selecting among routes offered by their
immediate neighbors. We believe Software Deﬁned Networking
(SDN) could revolutionize wide-area trafﬁc delivery, by offering
direct control over packet-processing rules that match on multiple
header ﬁelds and perform a variety of actions. Internet exchange
points (IXPs) are a compelling place to start, given their central role
in interconnecting many networks and their growing importance in
bringing popular content closer to end users.
To realize a Software Deﬁned IXP (an “SDX”), we must create
compelling applications, such as “application-speciﬁc peering”—
where two networks peer only for (say) streaming video trafﬁc. We
also need new programming abstractions that allow participating
networks to create and run these applications and a runtime that
both behaves correctly when interacting with BGP and ensures that
applications do not interfere with each other. Finally, we must ensure
that the system scales, both in rule-table size and computational
overhead. In this paper, we tackle these challenges and demonstrate
the ﬂexibility and scalability of our solutions through controlled and
in-the-wild experiments. Our experiments demonstrate that our SDX
implementation can implement representative policies for hundreds
of participants who advertise full routing tables while achieving
sub-second convergence in response to conﬁguration changes and
routing updates.
Categories and Subject Descriptors:
C.2.1 [Computer-
Communication Networks] Network Architecture and Design:
Network Communications
General Terms: Algorithms, Design, Experimentation
Keywords: software deﬁned networking (SDN); Internet exchange
point (IXP); BGP
1 Introduction
Internet routing is unreliable, inﬂexible, and difﬁcult to manage.
Network operators must rely on arcane mechanisms to perform
trafﬁc engineering, prevent attacks, and realize peering agreements.
Internet routing’s problems result from three characteristics of the
Border Gateway Protocol (BGP), the Internet’s interdomain routing
protocol:
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a
fee. Request permissions from permissions@acm.org.
SIGCOMM’14, August 17–22, 2014, Chicago, IL, USA.
Copyright 2014 ACM 978-1-4503-2836-4/14/08 ...$15.00.
http://dx.doi.org/10.1145/2619239.2626300
• Routing only on destination IP preﬁx. BGP selects and exports
routes for destination preﬁxes. Networks cannot make more ﬁne-
grained decisions based on the type of application or the sender.
• Inﬂuence only over direct neighbors. A network selects among
BGP routes learned from its direct neighbors, and exports selected
routes to these neighbors. Networks have little control over end-
to-end paths.
• Indirect expression of policy. Networks rely on indirect, obscure
mechanisms (e.g., “local preference”, “AS Path Prepending”) to in-
ﬂuence path selection. Networks cannot directly express preferred
inbound and outbound paths.
These problems are well-known, yet incremental deployment of
alternative solutions is a perennial problem in a global Internet
with more than 50,000 independently operated networks and a huge
installed base of BGP-speaking routers.
In this paper, we develop a way forward that improves our existing
routing system by allowing a network to execute a far wider range
of decisions concerning end-to-end trafﬁc delivery. Our approach
builds on recent technology trends and also recognizes the need for
incremental deployment. First, we believe that Software Deﬁned
Networking (SDN) shows great promise for simplifying network
management and enabling new networked services. SDN switches
match on a variety of header ﬁelds (not just destination preﬁx),
perform a range of actions (not just forwarding), and offer direct
control over the data plane. Yet, SDN currently only applies to
intradomain settings, such as individual data-center, enterprise, or
backbone networks. By design, a conventional SDN controller has
purview over the switches within a single administrative (and trust)
domain.
Second, we recognize the recent resurgence of interest in Internet
exchange points (IXPs), which are physical locations where multiple
networks meet to exchange trafﬁc and BGP routes. An IXP is a
layer-two network that, in the simplest case, consists of a single
switch. Each participating network exchanges BGP routes (often
with a BGP route server) and directs trafﬁc to other participants
over the layer-two fabric. The Internet has more than 300 IXPs
worldwide—with more than 80 in North America alone—and some
IXPs carry as much trafﬁc as the tier-1 ISPs [1, 4]. For example,
the Open IX effort seeks to develop new North American IXPs with
open peering and governance, similar to the models already taking
root in Europe. As video trafﬁc continues to increase, tensions grow
between content providers and access networks, and IXPs are on the
front line of today’s peering disputes. In short, not only are IXPs the
right place to begin a revolution in wide-area trafﬁc delivery, but the
organizations running these IXPs have strong incentives to innovate.
We aim to change wide-area trafﬁc delivery by designing, proto-
typing, and deploying a software deﬁned exchange (SDX). Contrary
to how it may seem, however, merely operating SDN switches and a
controller at an IXP does not automatically present a turnkey solu-
tion. SDN is merely a tool for solving problems, not the solution.
551In fact, running an SDN-enabled exchange point introduces many
problems, ranging from correctness to scalability. To realize the
SDX in practice, we must address the following four challenges:
• Compelling applications. The success of the SDX depends on
identifying compelling wide-area trafﬁc-delivery applications that
are difﬁcult to deploy today. We present four motivating appli-
cations: application-speciﬁc peering, inbound trafﬁc engineering,
server load balancing, and trafﬁc redirection through middleboxes
(Section 2).
• Programming abstractions. Participating networks need a way
to create and run applications, without conﬂicting with each other
or with the global routing system. Our SDX design presents each
participating network with the illusion of its own virtual SDN
switch that extends the footprint of its legacy network and enables
ﬂexible policies that interact safely with today’s BGP (Section 3).
• Scalable operation. An SDX needs to support hundreds of par-
ticipants, hundreds of thousands of IP preﬁxes, and policies that
match on multiple packet-header ﬁelds—all while using conven-
tional SDN switches. We show how to combine the policies of
multiple participants and join them with the current BGP routes,
while limiting rule-table size and computational overhead (Sec-
tion 4).
• Realistic deployment. We have built a prototype and created two
example applications (Section 5). Experiments demonstrate that
our prototype scales (in terms of rule-table size and CPU time) to
many participants, policies, and preﬁxes (Section 6).
We conclude with a discussion of related work (Section 7) and future
possibilities (Section 8).
2 Wide-Area Trafﬁc Delivery
We present four applications that the SDX enables. We describe
how operators tackle these problems today, focusing in particular on
the “pain points” for implementing these functions in today’s infras-
tructure. We also describe how these applications would be easier
to implement with the SDX. We revisit several of these examples
throughout the paper, both demonstrating how the SDX makes them
possible and, in some cases, deploying them in the wide area.
Application-speciﬁc peering. High-bandwidth video services like
YouTube and Netﬂix constitute a signiﬁcant fraction of overall trafﬁc
volume, so ISPs are increasingly interested in application-speciﬁc
peering, where two neighboring AS exchange trafﬁc only for certain
applications. BGP does not make it easy to support such an arrange-
ment. An ISP could conﬁgure its edge routers to make different
forwarding decisions for different application packet classiﬁers (to
identify the relevant trafﬁc) and policy-based routing (to direct that
trafﬁc over a special path). For example, an ISP could conﬁgure
its border routers to have multiple VRFs (virtual routing and for-
warding tables), one for each trafﬁc class, and direct video trafﬁc
via one VRF and non-video trafﬁc through another. Still, such an
approach forces the ISPs to incur additional routing and forwarding
state, in proportion to the number of trafﬁc classes, and conﬁgure
these mechanisms correctly. SDX could instead install custom rules
for groups of ﬂows corresponding to speciﬁc parts of ﬂow space.
Inbound trafﬁc engineering. Because BGP performs destination-
based routing, ASes have little control over how trafﬁc enters their
networks and must use indirect, obscure techniques (e.g., AS path
prepending, communities, selective advertisements) to inﬂuence
how ASes reach them. Each of these existing approaches is limited:
prepending cannot override another AS’s local preference for out-
bound trafﬁc control, communities typically only affect decisions
of an immediate neighbor network, and selective advertisements
pollute the global routing tables with extra preﬁxes. By installing
forwarding rules in SDN-enabled switches at an exchange point,
an AS can directly control inbound trafﬁc according to source IP
addresses or port numbers.
Wide-area server load balancing. Content providers balance client
requests across clusters of servers by manipulating the domain name
system (DNS). Each service has a single domain name (e.g., http:
//www.example.com/) which resolves to multiple IP addresses
for different backend servers. When a client’s local DNS server
issues a DNS request, the service’s authoritative DNS server returns
an IP address that appropriately balances load. Unfortunately, using
DNS for server selection has several limitations. First, DNS caching
(by the local DNS server, and by the user’s browser) results in slower
responses to failures and shifts in load. To (partially) address this
problem, content providers use low “time to live” values, leading
to more frequent DNS cache misses, adding critical milliseconds
to request latency. Instead, a content provider could assign a single
anycast IP address for a service and rewrite the destination addresses
of client requests in the middle of the network (e.g., at exchange
points). SDX could announce anycast preﬁxes and rewrite the
destination IP address to match the chosen hosting location based
on any ﬁelds in the packet header.
Redirection through middleboxes. Networks increasingly rely on
middleboxes to perform a wide range of functions (e.g., ﬁrewalls,
network address translators, load balancers). Enterprise networks at
the edge of the Internet typically place middleboxes at key junctions,
such as the boundary between the enterprise and its upstream ISPs,
but large ISPs are often geographically expansive, making it pro-
hibitively expensive to place middleboxes at every location. Instead,
they manipulate the routing protocols to “steer” trafﬁc through a
ﬁxed set of middleboxes. For example, when trafﬁc measurements
suggest a possible denial-of-service attack, an ISP can use internal
BGP to “hijack” the offending trafﬁc and forward it through a trafﬁc
scrubber. Some broadband access ISPs perform similar steering of
a home user’s trafﬁc by routing all home network trafﬁc through a
scrubber via a VPN. Such steering requires ISPs to “hijack” much
more normal trafﬁc than necessary, and the mechanisms are not
well-suited to steering trafﬁc through a sequence of middleboxes. In-
stead, an SDN-enabled exchange point can redirect targeted subsets
of trafﬁc through one or more middleboxes.
3 Programming Abstractions
The SDX enables the operators of participating ASes to run novel
applications that control the ﬂow of trafﬁc entering and leaving their
border routers, or, in the case of remote participants, the ﬂow of
trafﬁc destined for their AS. By giving each AS the illusion of its
own virtual SDN switch, the SDX enables ﬂexible speciﬁcation
of forwarding policies while ensuring isolation between different
participants. SDX applications can base decisions on the currently
available BGP routes, which offers greater ﬂexibility while ensuring
that trafﬁc follows valid interdomain paths.
3.1 Virtual SDX Switch Abstraction
In a traditional exchange point, each participating AS typically con-
nects a BGP-speaking border router to a shared layer-two network (a
data plane for forwarding packets) and a BGP route server (a control
plane for exchanging routing information). At an SDX, each AS
can run SDN applications that specify ﬂexible policies for dropping,
552(a) Virtual switch abstraction.
(b) Integration with interdomain routes.
Figure 1: SDX programming abstractions.
modifying, and forwarding the trafﬁc. The SDX must then combine
the policies of multiple ASes into a single coherent policy for the
physical switch(es). To balance the desire for ﬂexibility with the
need for isolation, we give each AS the illusion of its own virtual
SDN switch connecting its border router to each of its peer ASes,
as shown in Figure 1a. AS A has a virtual switch connecting to
the virtual switches of ASes B and C, where each AS can write
forwarding policies as if it is the only participant at the SDX. Yet,
AS A cannot inﬂuence how ASes B and C forward packets on their
own virtual switches.
For writing policies, we adopt the Pyretic language [12] that
supports declarative programming based on boolean predicates (that
each match a subset of the packets) and a small set of actions (that
modify a packet’s header ﬁelds or location). A Pyretic policy maps
a located packet (i.e., a packet and its location) to a set of located
packets. Returning the empty set drops the packet. Returning a set
with a single packet forwards the packet to its new location. Finally,
returning a set with multiple packets multicasts the packets. In
contrast to vanilla Pyretic policies, we require participants to specify
whether a policy is an inbound or an outbound policy. Inbound