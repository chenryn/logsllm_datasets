# Title: SDX: A Software-Defined Internet Exchange

## Authors:
- Arpit Gupta†
- Laurent Vanbever‡
- Muhammad Shahbaz†
- Sean P. Donovan†
- Brandon Schlinker§
- Nick Feamster†
- Jennifer Rexford‡
- Scott Shenker¶
- Russ Clark†
- Ethan Katz-Bassett§

**Affiliations:**
- †Georgia Tech
- ‡Princeton University
- ¶UC Berkeley
- §University of Southern California

## Abstract
BGP significantly constrains the flexibility of traffic delivery over the Internet. Currently, networks can only forward traffic based on destination IP prefixes and must select among routes offered by their immediate neighbors. We believe that Software-Defined Networking (SDN) has the potential to revolutionize wide-area traffic delivery by providing direct control over packet-processing rules that match on multiple header fields and perform a variety of actions. Internet exchange points (IXPs) are an ideal starting point for this transformation, given their central role in interconnecting many networks and their growing importance in bringing popular content closer to end users.

To realize a Software-Defined IXP (SDX), we need to develop compelling applications, such as "application-specific peering," where two networks peer only for specific types of traffic, like streaming video. We also need new programming abstractions that allow participating networks to create and run these applications, and a runtime that ensures correct interaction with BGP and prevents interference between applications. Finally, we must ensure that the system scales, both in rule-table size and computational overhead. In this paper, we address these challenges and demonstrate the flexibility and scalability of our solutions through controlled and real-world experiments. Our experiments show that our SDX implementation can handle representative policies for hundreds of participants who advertise full routing tables, achieving sub-second convergence in response to configuration changes and routing updates.

**Categories and Subject Descriptors:**
C.2.1 [Computer-Communication Networks]: Network Architecture and Design: Network Communications

**General Terms:**
Algorithms, Design, Experimentation

**Keywords:**
Software-Defined Networking (SDN), Internet Exchange Point (IXP), BGP

## 1. Introduction
Internet routing is often unreliable, inflexible, and difficult to manage. Network operators must rely on complex mechanisms to perform traffic engineering, prevent attacks, and enforce peering agreements. These issues stem from three key characteristics of the Border Gateway Protocol (BGP), the primary interdomain routing protocol:

- **Routing based on destination IP prefix:** BGP selects and exports routes for destination prefixes, limiting the ability to make more fine-grained decisions based on application type or sender.
- **Influence limited to direct neighbors:** A network can only choose among BGP routes learned from its immediate neighbors, offering little control over end-to-end paths.
- **Indirect policy expression:** Networks use indirect and often obscure mechanisms (e.g., local preference, AS Path Prepending) to influence path selection, making it difficult to directly express preferred inbound and outbound paths.

Despite these well-known problems, incremental deployment of alternative solutions remains challenging due to the global nature of the Internet, which involves over 50,000 independently operated networks and a vast installed base of BGP-speaking routers.

In this paper, we propose a way to improve the existing routing system by enabling networks to make a wider range of decisions concerning end-to-end traffic delivery. Our approach leverages recent technology trends and recognizes the need for incremental deployment. First, we believe that SDN holds great promise for simplifying network management and enabling new services. SDN switches can match on various header fields, perform a range of actions, and offer direct control over the data plane. However, SDN currently applies primarily to intradomain settings, such as individual data centers, enterprises, or backbone networks.

Second, we recognize the renewed interest in IXPs, which are physical locations where multiple networks meet to exchange traffic and BGP routes. With over 300 IXPs worldwide, some carrying as much traffic as tier-1 ISPs, IXPs are becoming increasingly important. The Open IX effort, for example, aims to develop new North American IXPs with open peering and governance, similar to models in Europe. As video traffic continues to grow, tensions between content providers and access networks are increasing, making IXPs a focal point for peering disputes. Thus, IXPs are not only the right place to start a revolution in wide-area traffic delivery but also have strong incentives to innovate.

We aim to transform wide-area traffic delivery by designing, prototyping, and deploying an SDX. Simply operating SDN switches and a controller at an IXP does not automatically solve all problems; SDN is a tool, not a complete solution. Running an SDN-enabled exchange point introduces several challenges, including correctness and scalability. To realize the SDX, we must address the following four challenges:

- **Compelling applications:** Identify and develop compelling wide-area traffic-delivery applications that are difficult to deploy today.
- **Programming abstractions:** Provide participating networks with a way to create and run applications without conflicting with each other or the global routing system.
- **Scalable operation:** Ensure the SDX can support hundreds of participants, hundreds of thousands of IP prefixes, and policies that match on multiple packet-header fields, while using conventional SDN switches.
- **Realistic deployment:** Build a prototype and demonstrate its scalability and functionality through controlled and real-world experiments.

We conclude with a discussion of related work and future possibilities.

## 2. Wide-Area Traffic Delivery Applications
We present four applications enabled by the SDX, highlighting how they address current pain points and how the SDX makes them easier to implement.

### 2.1 Application-Specific Peering
High-bandwidth video services like YouTube and Netflix constitute a significant fraction of overall traffic volume, leading ISPs to explore application-specific peering, where two neighboring Autonomous Systems (ASes) exchange traffic only for certain applications. BGP does not easily support such arrangements. An ISP could configure its edge routers to make different forwarding decisions for different application packet classifiers and use policy-based routing, but this approach increases routing and forwarding state and requires careful configuration. The SDX can install custom rules for groups of flows corresponding to specific parts of flow space, simplifying this process.

### 2.2 Inbound Traffic Engineering
BGP's destination-based routing limits an AS's control over how traffic enters its network. ASes use indirect techniques like AS path prepending, communities, and selective advertisements to influence how other ASes reach them. Each of these methods has limitations. By installing forwarding rules in SDN-enabled switches at an exchange point, an AS can directly control inbound traffic based on source IP addresses or port numbers.

### 2.3 Wide-Area Server Load Balancing
Content providers balance client requests across server clusters by manipulating the Domain Name System (DNS). This approach has limitations, such as DNS caching, which can slow down responses to failures and load shifts. Content providers use low "time to live" values to partially address this, but this leads to more frequent DNS cache misses and increased request latency. Instead, a content provider could assign a single anycast IP address for a service and rewrite the destination addresses of client requests at exchange points. The SDX can announce anycast prefixes and rewrite destination IP addresses based on packet header fields.

### 2.4 Redirection Through Middleboxes
Networks increasingly rely on middleboxes for functions like firewalls, network address translators, and load balancers. Placing middleboxes at every location is prohibitively expensive, so large ISPs manipulate routing protocols to steer traffic through a fixed set of middleboxes. For example, when detecting a possible denial-of-service attack, an ISP can use internal BGP to "hijack" the offending traffic and forward it through a traffic scrubber. This approach often hijacks more normal traffic than necessary and is not well-suited for steering traffic through a sequence of middleboxes. An SDN-enabled exchange point can redirect targeted subsets of traffic through one or more middleboxes, improving efficiency and flexibility.

## 3. Programming Abstractions
The SDX enables operators of participating ASes to run novel applications that control the flow of traffic entering and leaving their border routers. By giving each AS the illusion of its own virtual SDN switch, the SDX allows flexible specification of forwarding policies while ensuring isolation between different participants. SDX applications can base decisions on the currently available BGP routes, offering greater flexibility while ensuring that traffic follows valid interdomain paths.

### 3.1 Virtual SDX Switch Abstraction
In a traditional IXP, each participating AS connects a BGP-speaking border router to a shared layer-two network and a BGP route server. At an SDX, each AS can run SDN applications that specify flexible policies for dropping, modifying, and forwarding traffic. The SDX must then combine the policies of multiple ASes into a single coherent policy for the physical switch(es). To balance flexibility and isolation, we give each AS the illusion of its own virtual SDN switch connecting its border router to each of its peer ASes. Each AS can write forwarding policies as if it is the only participant at the SDX, but cannot influence how other ASes forward packets on their own virtual switches.

For writing policies, we adopt the Pyretic language, which supports declarative programming based on boolean predicates and a small set of actions. A Pyretic policy maps a located packet to a set of located packets. Returning the empty set drops the packet, returning a single packet forwards it, and returning multiple packets multicasts them. Participants must specify whether a policy is an inbound or outbound policy.