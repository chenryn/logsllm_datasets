令，那么效率会更高。那这里手动登录服务器执行停服命令就被认
为是琐事。
2. 重复性
如果某件事是第一次做，甚至是第二次做，都不应该算作琐
事。琐事就是不停反复做的工作，例如业务的停服更新。如果你正
在解决一个新出现的问题或者寻求一种新的解决办法，不算做琐
事。
3. 可以被自动化
如果某个需求，除了业务运维可以手动处理外，也可以通过作
业流程工具进行自动触发某个任务来解决该需求，就说明该需求可
以被自动化。例如业务停服更新完起服后，业务运维需要检查服务
是否都正常启动好了，这个需求就可以通过增添流程节点，检测起
服日志中是否含有 success 等关键字来自动化判断服务进程是否都启
动正常。
所以如果一个需求可以通过流程自动解决，或者是流程优化消
灭了该类需求，那么这类需求就算作琐事。
4. 被动响应
⽹址：SRE-Elite.com 14 3 微信：SRE精英联盟
SRE实践白皮书（2023年）
处理琐事是处理那些突然出现的、被动去响应的工作，而不是
主动安排的工作。处理紧急告警是琐事，我们可能永远无法完全消
灭这类工作，但是我们也得必须努力减少这类需求，减少对运维的
打扰。
5. 没有持久价值
如果在你完成某项工作后，这类工作的状态没有发生改变，这
类工作就很可能是琐事。如果我们做了能给这类工作带来永久性改
进效果的优化（例如操作步骤减少了），那么你做的事情就不是琐
事。例如我们梳理了业务的核心配置文件，然后将其接入了进程配
置管理平台，来达到平台化管理业务配置文件的目的，就不是琐
事。
6. 与服务呈线性增长
如果在工作中所涉及的任务与服务的大小、数量呈线性增长关
系，那这项任务就可能属于琐事，例如申请服务器这个操作，每个
业务都有搭建新服的需求，都需要申请服务器，那么申请服务器的
工作会随着服务业务的数量呈线性增长，那么我们可以通过在每个
业务的流程里，自动嵌入申请服务器的节点，自动申请服务器来达
到优化这个琐事的目的。
综上所述运维琐事的 6 个特点，可以发现如果对琐事不加以管
理，运维很可能会被这些运维琐事淹没，影响工作执行质量和执行
效率，也造成运维人才能力的提升空间受限，长期下去消耗工作热
情。
⽹址：SRE-Elite.com 14 4 微信：SRE精英联盟
SRE实践白皮书（2023年）
3.6.3.2 运维琐事的质量管理
运维琐事的质量管理是指通过一些管理措施和方法来确保运维
琐事工作的高效性和稳定性，来降低系统故障率、减少人为故障、
提高系统的可用性和稳定性。通过建立规范的操作流程、使用自动
化工具、培训与管理人员、持续改进等手段，可以提高运维琐事的
质量管理水平，确保系统正常运行和业务的连续性。
运维琐事的质量管理包括以下方面：
（1）流程管理：通过规范的运维流程，包括工作分工、操作步
骤、审批机制等。确保每个运维操作都有明确的责任人和标准化的
执行流程。例如我们每一次发布变更都需要有完整的操作 checklist
一样。
（2）自动化工具：引入自动化工具和脚本来处理重复性和繁琐
的运维任务，避免手工操作。通过将操作内容自动化，来屏蔽操作
人员能力的差异性，可以减少运营故障的发生。
（3）技能培训与人员管理：为运维人员提供必要的培训和技能
提升机会，使其具备应对不同琐事的能力。同时，合理分配人员资
源，确保每个运维任务都有专人负责。例如定期对团队内成员进行
平台工具的标准化操作方案的培训。
（4）持续改进：定期回顾运维工作的过程，例如对操作任务的
成功率的统计，对每一项任务进行分析，发现问题并制定改进措
施，因为任何一个问题都会传递到业务运维，需要业务运维分析并
解决，通过持续改进来提高运维琐事的质量。
⽹址：SRE-Elite.com 14 5 微信：SRE精英联盟
SRE实践白皮书（2023年）
3.6.3.3 运维琐事的效率管理
运维琐事的效率管理是指通过标准化、工具自动化、 OnCall 需
求分层、优先级管理和持续改进等手段，来实现高效的运维琐事管
理，为组织带来更高的价值和效益。
运维琐事的效率管理包括以下方面：
（1）标准化和流程优化：建立规范的运维流程和操作步骤，确
保每个操作都按照统一的标准执行，通过流程优化，消除冗余的步
骤和无效的等待时间，提高工作效率。
（2）工具自动化：通过自动化工具平台的能力，减少人工干预
和手动操作，提高操作速度、降低人为错误，达到释放运维精力用
于更复杂和有价值的工作。例如通过 CMDB 平台（运维配置管理数
据库）来管理业务的硬件等资源、通过进程配置管理平台来管理业
务的核心配置文件和进程启停信息、通过监控平台来管理业务的服
务器资源使用情况、通过作业管理平台来批量管理业务的任务模板
等。
（3）oncall 需求分层：OnCall 是指业务运维团队将工作时间划
分为若干个固定的时段，每个时段都会有专门的运维人员负责值班
处理需求，从而达到可以随时响应业务需求，确保服务的连续性和
稳定性，oncall 在进行响应需求时，需要对需求进行分层处理，例如
根据需求的紧急程度进行分层、根据需求的工作范围进行分层、根
据需求的所属平台进行分层等。通过分层后的需求，就可以分配到
不同工种来解决，实现问题的高效处理。
⽹址：SRE-Elite.com 14 6 微信：SRE精英联盟
SRE实践白皮书（2023年）
（4）优先级管理：通过 OnCall 团队一线的需求梳理后，对每一
项需求进行优先级管理，让团队一线通过标准化文档操作指引优先
去处理紧急且重要的事情，避免运维人员工作精力分散，提高工单
的流转率。
（5）持续改进：定期回顾运维工作的执行情况，例如对工单的
类型比例分析、工单的耗时比例分析，这种数据驱动的策略来发现
问题，例如发现哪一类需求比重比较高，耗时比较长的情况。持续
优化，提高运维琐事的效率。
（6）文档沉淀：由于相关琐事较多，需要通过文档进行知识管
理及文档的标准化，便于团队成功共享、查询和复用，
（7）AI 提效：利用人工智能技术来提高运维工作的效率，减少
重复性和低价值的工作。具体措施 非常广泛，现阶段，部署聊天机
器人作为一线支持 ，对接文档支持库 ，处理常见的查询和简单问
题，减轻人工客服的负担 ，是在提效上面非常值得探索，且可落地
性强的方向。
3.6.4 业务全生命周期工具建设
业务全生命周期主要包含研发期，上线期，运营期以及长尾期
阶段，在每个阶段都需要有能提升运营效率的通用化工具。建设的
工具包含版本控制，监控和告警，日志管理， CI/CD，数据备份，
自动化测试，容器编排，业务巡检等工具。
在 SRE 中，业务全生命周期工具建设是非常重要的一部分，通
过使用这些工具和技术，SRE 团队可以更加高效地管理和优化业务
⽹址：SRE-Elite.com 14 7 微信：SRE精英联盟
SRE实践白皮书（2023年）
的整个生命周期，提高业务的各个阶段的可靠性和稳定性，降低成
本和风险。
3.6.4.1 研发期工具建设
业务研发期是指产品研发阶段，这个阶段需要使用一些工具来
辅助研发和管理。在业务研发期，工具建设可以提高系统的可靠
性、可用性、可扩展性以及研发效率，以支持产品的研发和快速迭
代。
主要包括如下几类：
（1）版本控制工具：例如 Git，用于管理代码的版本、分支、合
并和协作等。研发期版本控制工具是必要的，帮忙研发人员更高效
的进行项目的开发。
（2）自动化构建工具：例如 Jenkins，用于自动化构建、测试和
部署代码，提高开发效率和质量。研发期 SRE 人员参与较少，自动
化构建功能实现研发人员版本自动化部署能力。
（3）代码质量工具：用于分析代码质量、安全性和可维护性
等，帮助开发团队提高代码质量和可维护性，确保代码不会有安全
的漏洞。
（4）代码审查工具：用于进行代码审查和评审，提高代码质量
和可维护性，可提高代码的健壮性，减少程序可能出现的 BUG。
（5）测试工具：用于进行单元测试、集成测试和 UI 测试等，提
升测试的效率。
效果评估：
⽹址：SRE-Elite.com 14 8 微信：SRE精英联盟
SRE实践白皮书（2023年）
（1）提高开发效率：使用自动化构建、测试和部署工具可以减
少手动操作，提高开发效率和质量。
（2）提高代码质量：使用代码质量工具和代码审查工具可以发
现和修复代码中的问题，提高代码质量和可维护性。
（3）提高团队协作效率：使用项目协作工具可以提高团队协作
效率和沟通效果，减少沟通成本和误解。
（4）提高测试效率：使用测试工具可以更多的覆盖测试用例和
场景，并且提高测试效率。
3.6.4.2 上线期工具建设
业务上线期是指产品上线阶段，这个阶段需要使用一些工具来
辅助上线。上线期工具可以提高系统的可靠性、可用性和可扩展
性。以支持产品稳定上线和运营。
主要包括如下几类：
（1）监控和告警工具：用于监控业务的运行状态和性能指标，
并在出现问题时发出告警。
（2）日志管理工具：用于收集、存储和分析业务的日志数据，
业务出现问题能及时发现。
（3）自动化部署工具：用于自动化部署业务代码到生产环境。
（4）故障排除工具：用于快速定位和解决业务故障。
（5）容器编排工具：用于管理和编排容器化的业务应用。
（6）上线风险检查工具：用于保障业务的健康状态工具集，工
具可以定时巡检，保证业务实时的稳定性。
⽹址：SRE-Elite.com 14 9 微信：SRE精英联盟
SRE实践白皮书（2023年）
效果评估：
（1）提高上线效率：使用自动化部署工具可以减少手动操作，
提高上线效率和质量。
（2）提高系统可靠性：使用监控工具和日志管理工具可以及时
发现和解决系统中的问题，提高系统的可靠性和可用性。
（3）降低业务风险：使用上线检查工具可以保障业务上线环境