in with the netmsgserver. A check-in operation registered a unique name with the
netmsgserver. Other tasks, including tasks on other machines, could look up service
names on the netmsgserver, which itself used a port available to all tasks. This way, the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 12 of 137
netmsgserver could propagate port rights across networks. Mac OS X does not support
this distributed IPC feature of Mach, and as such does not have any internal or external
network message servers. Distributed IPC is, however, possible on Mac OS X using
higher-level mechanisms such as the Cocoa API's Distributed Objects feature.
Note that a port can be used to send messages in only one direction. Therefore, unlike a BSD socket,
a port does not represent an end point of a bidirectional communication channel. If a request message
is sent on a certain port and the sender needs to receive a reply, another port must be used for the
reply.
As we will see in Chapter 9, a task's IPC space includes mappings from port names to the kernel's
internal port objects, along with rights for these names. A Mach port's name is an integerconceptually
similar to a Unix file descriptor. However, Mach ports differ from file descriptors in several ways.
For example, a file descriptor may be duplicated multiple times, with each descriptor being a different
number referring to the same open file. If multiple port rights are similarly opened for a particular
port, the port names will coalesce into a single name, which would be reference-counted for the
number of rights it represents. Moreover, other than certain standard ports such as registered,
bootstrap, and exception ports, Mach ports are not inherited implicitly across the fork() system call.
6.2.1.3. Messages
Mach IPC messages are data objects that threads exchange with each other to communicate. Typical
intertask communication in Mach, including between the kernel and user tasks, occurs using
messages. A message may contain actual inline data or a pointer to out-of-line (OOL) data. OOL data
transfer is an optimization for large transfers, wherein the kernel allocates a memory region for the
message in the receiver's virtual address space, without making a physical copy of the message. The
shared memory pages are marked copy-on-write (COW).
A message may contain arbitrary program data, copies of memory ranges, exceptions, notifications,
port capabilities, and so on. In particular, the only way to transfer port capabilities from one task to
another is through messages.
Mach messages are transferred asynchronously. Even though only one task can hold receive rights to
a port, multiple threads within a task may attempt to receive messages on a port. In such a case, only
one of the threads will succeed in receiving a given message.
6.2.1.4. Virtual Memory and Memory Objects
Mach's virtual memory (VM) system can be cleanly separated into machine-independent and
machine-dependent parts. For example, address maps, memory objects, share maps, and resident
memory are machine-independent, whereas the physical map (pmap) is machine-dependent. We will
discuss VM-related abstractions in detail in Chapter 8.
Features of Mach's VM design include the following.
Mach provides per-task protected address spaces, with a sparse memory layout. A task's
address space description is a linear list of memory regions (vm_map_t), where each region
points to a memory object (vm_object_t).
The machine-dependent address mappings are contained in a pmap object (pmap_t).
A task can allocate or deallocate regions of virtual memory both within its own address space
and in other tasks' address spaces.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 13 of 137
Tasks can specify protection and inheritance properties of memory on a per-page basis.
Memory pages can be unshared between tasks or shared using either copy-on-write or read-
write mode. Each group of pagesa memory regionhas two protection values: a current and a
maximum. The current protection corresponds to the actual hardware protection being used for
the pages, whereas the maximum protection is the highest (most permissive) value that current
protection may ever achieve. The maximum protection is an absolute upper limit in that it
cannot be elevated (made more permissive), but only lowered (made more restrictive).
Therefore, the maximum protection represents the most access that can be had to a memory
region.
A memory object is a container for data (including file data) that is mapped into the address space of
a task. It serves as a channel for providing memory to tasks. Mach traditionally allows a memory
object to be managed by a user-mode external memory manager, wherein the handling of page faults
and page-out data requests can be performed in user space. An external pager can also be used to
implement networked virtual memory. This external memory management (EMM) feature of Mach is
not used in Mac OS X. xnu provides basic paging services in the kernel through three pagers: the
default (anonymous) pager, the vnode pager, and the device pager.
The default pager handles anonymous memorythat is, memory with no explicitly designated pager. It
is implemented in the Mach portion of the kernel. With help from the dynamic_pager user-space
application,[3] which manages on-disk backing-store (or swap) files, the default pager pages to swap
files on a normal file system.
[3] The dynamic_pager application is not involved in actual paging operationsit only
creates or deletes swap files based on various criteria.
Swap files reside under the /var/vm/ directory by default. The files are named swapfileN, where N
is the swap file's number. The first swap file is called swapfile0.
The vnode pager is used for memory-mapped files. Since the Mac OS X VFS is in the BSD portion of
the kernel, the vnode pager is implemented in the BSD layer.
The device pager is used for non-general-purpose memory. It is implemented in the Mach layer but
used by the I/O Kit.
6.2.2. Exception Handling
A Mach exception is a synchronous interruption of a program's execution that occurs due to the
program itself. The causes for exceptions can be erroneous conditions such as executing an illegal
instruction, dividing by zero, or accessing invalid memory. Exceptions can also be caused
deliberately, such as during debugging, when a debugger breakpoint is hit.
xnu's Mach implementation associates an array of exception ports with each task and another with
each thread within a task. Each such array has as many slots as there are exception types defined for
the implementation, with slot 0 being invalid. All of a thread's exception ports are set to the null port
(IP_NULL) when the thread is created, whereas a task's exception ports are inherited from those of the
parent task. The kernel allows a programmer to get or set individual exception ports for both tasks
and threads. Consequently, a program can have multiple exception handlers. A single handler may
also handle multiple exception types. Typical preparation for exception handling by a program
involves allocation of one or more ports to which the kernel will send exception notification
messages. The port can then be registered as an exception port for one or more types of exceptions for
either a thread or a task. The exception handler code typically runs in a dedicated thread, waiting for
notification messages from the kernel.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 14 of 137
Exception handling in Mach can be viewed as a metaoperation consisting of several suboperations.
The thread that causes an exception is called the victim thread, whereas the thread that runs the
exception handler is called the handler thread. When a victim causes (raises) an exception, the kernel
suspends the victim thread and sends a message to the appropriate exception port, which may be
either a thread exception port (more specific) or a task exception port (if the thread has not set an
exception port). Upon receiving (catching) the message, the handler thread processes the exceptionan
operation that may involve fixing the victim's state, arranging for it to be terminated, logging an error,
and so on. The handler replies to the message, indicating whether the exception was processed
successfully (cleared). Finally, the kernel either resumes the victim or terminates it.
A thread exception port is typically relevant for error handling. Each thread may have its own
exception handlers that process exceptions corresponding to errors that affect only individual threads.
A task exception port is typically relevant for debugging. A debugger can attach to a task by
registering one of its own ports as the debugged task's exception port. Since a task inherits its
exception ports from the creating task, the debugger will also be able to control child processes of the
debugged program. Moreover, exception notifications for all threads that have no registered exception
port will be sent to the task exception port. Recall that a thread is created with null exception ports
and, correspondingly, with no default handlers. Therefore, this works well in the general case. Even
when a thread does have valid exception ports, the corresponding exception handlers can forward
exceptions to the task exception port.
We will look at a programming example of Mach exception handling in Chapter 9.
6.3. A Flavor of the Mach APIs
Let us look at a few simple examples of using the Mach APIs. These will serve as a prelude to more
complex or subsystem-specific examples that we will see later in this chapter and in subsequent
chapters.
Documentation for most Mach calls exported by the xnu kernel is available in the osfmk/man/
directory within the xnu package. You might find it useful to test API-based examples while referring
to the API documentation.
6.3.1. Displaying Host Information
The host_info() Mach call retrieves information about a host, such as the type and number of
processors installed, the number of processors currently available, and the memory size. As is the case
with many Mach "info" calls, host_info() takes a flavor argument, which specifies the kind of
information to be retrieved. For example, host_info() accepts the HOST_BASIC_INFO,
HOST_SCHED_INFO, and HOST_PRIORITY_INFO flavors as arguments to return basic, scheduler-related,
and scheduler-priority-related information, respectively, from the kernel. Besides host_info(), other
calls such as host_kernel_version(), host_get_boot_info(), and host_page_size() can be
used to retrieve miscellaneous information. Figure 61 shows an example of using the host_info()
call.
Figure 61. Retrieving basic host information using Mach calls
// host_basic_info.c
#include 
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 15 of 137
#include 
#include 
#define EXIT_ON_MACH_ERROR(msg, retval) \
if (kr != KERN_SUCCESS) { mach_error(msg ":" , kr); exit((retval)); }
int
main()
{
kern_return_t kr; // the standard return type for Mach calls
host_name_port_t myhost;
kernel_version_t kversion;
host_basic_info_data_t hinfo;
mach_msg_type_number_t count;
char *cpu_type_name, *cpu_subtype_name;
vm_size_t page_size;
// get send rights to the name port for the current host
myhost = mach_host_self();
kr = host_kernel_version(myhost, kversion);
EXIT_ON_MACH_ERROR("host_kernel_version", kr);
count = HOST_BASIC_INFO_COUNT; // size of the buffer
kr = host_info(myhost, // the host name port
HOST_BASIC_INFO, // flavor
(host_info_t)&hinfo, // out structure
&count); // in/out size
EXIT_ON_MACH_ERROR("host_info", kr);
kr = host_page_size(myhost, &page_size);
EXIT_ON_MACH_ERROR("host_page_size", kr);
printf("%s\n", kversion);
// the slot_name() library function converts the specified
// cpu_type/cpu_subtype pair to a human-readable form
slot_name(hinfo.cpu_type, hinfo.cpu_subtype, &cpu_type_name,
&cpu_subtype_name);
printf("cpu %s (%s, type=0x%x subtype=0x%x "
"threadtype=0x%x)\n", cpu_type_name, cpu_subtype_name,
hinfo.cpu_type, hinfo.cpu_subtype, hinfo.cpu_threadtype);
printf("max_cpus %d\n", hinfo.max_cpus);
printf("avail_cpus %d\n", hinfo.avail_cpus);
printf("physical_cpu %d\n", hinfo.physical_cpu);
printf("physical_cpu_max %d\n", hinfo.physical_cpu_max);
printf("logical_cpu %d\n", hinfo.logical_cpu);
printf("logical_cpu_max %d\n", hinfo.logical_cpu_max);
printf("memory_size %u MB\n", (hinfo.memory_size >> 20));
printf("max_mem %llu MB\n", (hinfo.max_mem >> 20));
printf("page_size %u bytes\n", page_size);
exit(0);
}
$ gcc -Wall -o host_basic_info host_basic_info.c
$ ./host_basic_info # Power Mac G5 Quad 2.5GHz
Darwin Kernel Version 8.5.0: ... root:xnu-792.6.61.obj~1/RELEASE_PPC
cpu ppc970 (PowerPC 970, type=0x12 subtype=0x64 threadtype=0x0)
max_cpus 4
avail_cpus 4
physical_cpu 4
physical_cpu_max 4
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 16 of 137
logical_cpu 4
logical_cpu_max 4
memory_size 2048 MB
max_mem 4096 MB
page_size 4096 bytes
$ ./host_basic_info # iMac Core Duo 1.83GHz
Darwin Kernel Version 8.5.1: ... root:xnu-792.8.36.obj~1/RELEASE_I386
cpu i486 (Intel 80486, type=0x7, subtype=0x4, threadtype=0x0)
max_cpus 2
avail_cpus 2
...
page_size 4096 bytes
Note in Figure 61 that as discussed in Chapter 5, the memory_size value reported by Mach is pinned
to 2GB on a machine with more than 2GB of physical memory.
6.3.2. Accessing the Kernel's Clock Services
The kernel provides clock services with different clock types such as system, calendar, and real time.
Accessing these services involves acquiring send rights to their ports and sending messages
requesting the clocks' attributes or functionality. Figure 62 shows a program that retrieves the
attributes and current time values from the kernel's various clocks.
Figure 62. Retrieving clock attributes and time values in Mach
// host_clock.c
#include 
#include 
#include 
#include 
#include 
#define OUT_ON_MACH_ERROR(msg, retval) \
if (kr != KERN_SUCCESS) { mach_error(msg ":" , kr); goto out; }
int
main()
{
kern_return_t kr;
host_name_port_t myhost;
clock_serv_t clk_system, clk_calendar, clk_realtime;
natural_t attribute[4];
mach_msg_type_number_t count;
mach_timespec_t timespec;
struct timeval t;
myhost = mach_host_self();
// Get a send right to the system clock's name port
kr = host_get_clock_service(myhost, SYSTEM_CLOCK,
(clock_serv_t *)&clk_system);
OUT_ON_MACH_ERROR("host_get_clock_service", kr);
// Get a send right to the calendar clock's name port
kr = host_get_clock_service(myhost, CALENDAR_CLOCK,
(clock_serv_t *)&clk_calendar);
OUT_ON_MACH_ERROR("host_get_clock_service", kr);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 17 of 137
// Get a send right to the real-time clock's name port
kr = host_get_clock_service(myhost, REALTIME_CLOCK,
(clock_serv_t *)&clk_realtime);
OUT_ON_MACH_ERROR("host_get_clock_service", kr);
//// System clock
count = sizeof(attribute)/sizeof(natural_t);
// Get the clock's resolution in nanoseconds
kr = clock_get_attributes(clk_system, CLOCK_GET_TIME_RES,
(clock_attr_t)attribute, &count);
OUT_ON_MACH_ERROR("clock_get_attributes", kr);
// Get the current time
kr = clock_get_time(clk_system, &timespec);
OUT_ON_MACH_ERROR("clock_get_time", kr);
printf("System clock : %u s + %u ns (res %u ns)\n",
timespec.tv_sec, timespec.tv_nsec, attribute[0]);
//// Real-time clock
count = sizeof(attribute)/sizeof(natural_t);
kr = clock_get_attributes(clk_realtime, CLOCK_GET_TIME_RES,
(clock_attr_t)&attribute, &count);
OUT_ON_MACH_ERROR("clock_get_attributes", kr);
kr = clock_get_time(clk_realtime, &timespec);
OUT_ON_MACH_ERROR("clock_get_time", kr);
printf("Realtime clock: %u s + %u ns (res %u ns)\n",
timespec.tv_sec, timespec.tv_nsec, attribute[0]);
//// Calendar clock
count = sizeof(attribute)/sizeof(natural_t);
kr = clock_get_attributes(clk_calendar, CLOCK_GET_TIME_RES,
(clock_attr_t)&attribute, &count);
OUT_ON_MACH_ERROR("clock_get_attributes", kr);
kr = clock_get_time(clk_calendar, &timespec);
gettimeofday(&t, NULL);
OUT_ON_MACH_ERROR("clock_get_time", kr);
printf("Calendar clock: %u s + %u ns (res %u ns)\n",
timespec.tv_sec, timespec.tv_nsec, attribute[0]);
printf("gettimeofday : %ld s + %d us\n", t.tv_sec, t.tv_usec);
out:
// Should deallocate ports here for cleanliness
mach_port_deallocate(mach_task_self(), myhost);
mach_port_deallocate(mach_task_self(), clk_calendar);
mach_port_deallocate(mach_task_self(), clk_system);
mach_port_deallocate(mach_task_self(), clk_realtime);
exit(0);
}
$ gcc -Wall -o host_clock host_clock.c
$ ./host_clock
System clock : 134439 s + 840456243 ns (res 10000000 ns)
Realtime clock: 134439 s + 841218705 ns (res 10000000 ns)
Calendar clock: 1104235237 s + 61156000 ns (res 10000000 ns)
gettimeofday : 1104235237 s + 61191 us
6.3.3. Using a Clock Service to Ring an Alarm
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 18 of 137
Having seen how to acquire send rights to a clock service's port, we can use these rights to request the
service to ring an alarm at a specified time. The clock will notify us by sending an IPC message when
the alarm is fired. The program shown in Figure 63 sets an alarm to ring after 2.5 seconds and waits
for the alarm message to arrive on a port it allocated.
Figure 63. Setting an alarm using Mach calls