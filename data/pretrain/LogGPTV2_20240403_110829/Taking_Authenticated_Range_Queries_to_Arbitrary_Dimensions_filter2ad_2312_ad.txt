5.
Identify Pi,k(cid:48) and locate τPi,k(cid:48)
+1, πP
= (vi,k(cid:48)i
i,k(cid:48)i
Compute SMAi proofs for τPi,k , τPi,k(cid:48)
6.
Compute SMA proof for (i, δi)
7.
8.
πRi = ProveSetDiﬀ(Ri, pk)
9. π∩ = ProveIntersection(R, R1, ..., Rd, πR, πR1 , ..., πRd , pk)
i=1, all SMA proofs)
10. Set π = (πR, π∩, (πRi , τPi,k , τPi,k(cid:48)
11. Send π, R to the client
, vi,k(cid:48)i
, δi)d
)
)
i,k(cid:48)i
i,k(cid:48)i
, τP
, τP
Ri = Pi,ki \ Pi,k(cid:48)i
(as in Figure 2(b)), and locates the correspond-
(Lines 4-5). Subsequently, it constructs
ing triplets τPi,ki
(Line 6) and SMA proofs
the SMAi proofs for τPi,ki
for (i, δi), for i = 1, . . . , d (Line 7). It then invokes subroutines
ProveSetDiﬀ and ProveIntersection as deﬁned in our main idea
paragraph, and produces proofs πR1 , . . . , πRd and π∩ (Lines 8-9),
respectively. Finally, it puts together all proof components into a
single proof π (Line 10), and sends it to the client along with re-
sult R (Line 11). We thoroughly describe the functionality of every
proof component in π in the next paragraph.
Veriﬁcation. We visualize the intuition in Figure 4, where we de-
pict the authentication ﬂow among the various proof components of
the ﬁnal proof π sent to the client. Speciﬁcally, if a component au-
thenticates another, we draw an arrow from the former to the latter.
The corresponding arrow labels represent information serving as
“glue” between the components. The goal is to verify result R (top
of the ﬁgure), but the only trusted information (in addition to pk)
is δ (bottom of the ﬁgure). Veriﬁcation proceeds bottom-up from
level 0 to 5, maintaining the invariant that, at level (cid:96), the server
must have computed the components therein truthfully with respect
to T and Q.
At level 0, δ is signed/published by the owner and, thus, it is
trusted. At level 1, given the d SMA proofs and δ, we verify
the integrity of components (i, δi). Likewise, at level 2, given the
2d SMAi proofs along with (i, δ), we verify the integrity of 2d
triplets (τPi,ki
). Here, we reach a critical point in the veriﬁ-
cation process. We must prove that these particular (τPi,ki
)
i,k(cid:48)i
, such that Pi,ki \
correspond to the triplets for sets Pi,ki , Pi,k(cid:48)i
= Ri, where Ri is the truthful result of Q on dimension
Pi,k(cid:48)i
< li ≤
i=1 and check vi,k(cid:48)i
ai. To do this, we parse Q as (i, li, ui)d
+1 and vi,ki ≤ ui < vi,ki+1, where vi,ki , vi,ki+1, vi,k(cid:48)i
vi,k(cid:48)i
, vi,k(cid:48)i
. This guarantees that Pi,ki is the
are included in τPi,ki
, τP
, τP
, τP
i,k(cid:48)i
i,k(cid:48)i
+1
Figure 4: Authentication ﬂow
i,k(cid:48)i
i,k(cid:48)i
, τP
, τP
, πP
from (τPi,ki
) indeed correspond to the correct Pi,ki , Pi,k(cid:48)i
that πR is the accumulation value of(cid:84)
smallest preﬁx set that contains the entire Ri, and Pi,k(cid:48)i
is the largest
preﬁx set that does not intersect Ri. Therefore, we verify that
. Next,
(τPi,ki
), respectively, and
we retrieve πPi,ki
run routine VerifySetDiﬀ to validate the truthfulness of πRi as the
accumulation value of set Ri at level 3. Next, at level 4 we verify
i Ri with VerifyIntersection,
using πR, all πRi, and π∩. Observe that, at this point we know that
πR corresponds to the accumulation of the correct result of Q on T .
At the last level 5, we verify that R is indeed this correct result by
checking if acc(R) = πR. We summarize this veriﬁcation process
in the pseudocode below.
i,k(cid:48)i
Algorithm Verify(Q, R, π, pk, δ)
i=1
Verify δi with respect to δ with SMA proof
Verify τPi,k , τPi,k(cid:48)
Verify vi,k(cid:48)i
Run VerifySetDiﬀ(πPi,k , πPi,k(cid:48)
1. Parse Q as (i, li, ui)d
2. For i = 1, ..., d
3.
4.
5.
6.
7. Run VerifyIntersection(πR, πR1 , ..., πRd , π∩, pk)
8. Compute acc(R) and verify acc(R) = πR
9. If veriﬁcation in Lines 3-8 fails, return reject, else return accept
with respect to δi with SMAi proofs
+1 and vi,ki ≤ ui < vi,ki+1
< li ≤ vi,k(cid:48)i
, πRi , pk)
Updates. We focus on an insertion of a single tuple t (the case of
deletions is similar). The process is easier to follow by revisiting
Figure 3. The owner ﬁrst computes h = H(t). It then inserts h
in the appropriate position in the ordering of each attribute ai, and
properly updates all the preﬁx sets it affects. Note that, if h is placed
in position j for attribute ai, the owner must change sets Pi,j(cid:48) for
all j(cid:48) ≥ j, and modify their corresponding proofs πPi,j(cid:48)
in τPi,j(cid:48)
.
Furthermore, it must create a new τPi,j , and alter vi,j in τPi,j−1
(where it appears as the second element). Finally, it must propagate
the changes of all τ triplets in all SMAi and SMA. Admittedly,
the update process in this basic scheme can be quite expensive; in
fact, it can be as costly as re-running the setup stage. In the Sec-
tion 5, we introduce a solution that supports efﬁcient updates, while
maintaining all other asymptotic costs.
Complexity analysis. Table 1 in Section 1 summarizes our com-
plexities. We will analyze our schemes considering SMAs [19,
22]. The setup cost is O(|T| log n) regardless of the underlying
SMA, as it is dominated by m sorts of n hashes, and O(mn) pre-
ﬁx proof computations. The proof size is O(d log n) if Merkle-trees
are used as SMAs, and O(d) in the case of accumulation trees;
(τP1,k1,τP1,k′1)(1,δ1)(d,δd)δSMAdproof...SMA1proof(τPd,kd,τPd,k′d)(1,l1,u1)(d,ld,ud)πR1πRdπ∩RπR......Level0Level1Level2Level3Level4Level5SMAproof1π∩SMAproofd825tively. Proof construction entails ˜O((cid:80)d
the proof is comprised of O(d) preﬁx proofs, and d SMA proofs
each with size O(log n) and O(1) for the two alternatives, respec-
i=1 |Ri|) cost for computing
Wi, Fi encompassed in proof π∩, and O(d log n) / O(dn log n)
SMA overhead for [19] / [22], respectively. Veriﬁcation involves
˜O(|R|) time for verifying π∩, and O(d log n) / O(d) for validat-
ing the SMA proofs. Finally, update is dominated by the re-
computation of the O(mn) preﬁx proofs and, thus, it can be done
in time O(|T|).
Correctness, efﬁciency, security. The correctness of our scheme
results from the semantics of the proof generation and veriﬁcation
as thoroughly explained above. Moreover, since the proof size is
either O(d) or O(d log n), our construction satisﬁes the efﬁciency
requirement. Finally, the next theorem states the security of the
basic scheme. The proof is included in the Appendix.
THEOREM 1. Our basic scheme is secure under q-SBDH and the
security of the employed SMA.
4.3 A Set-Difference Sub-protocol
We present a sub-protocol for proving the correctness of a set-
difference operation between two sets X1, X2, under the constraint
that the ﬁrst is a proper superset of the second. This constraint
renders our sub-protocol conceptually simple and very efﬁcient. It
consists of two routines ProveSetDiﬀ and VerifySetDiﬀ. The for-
mer takes as input set X1 \ X2 and outputs a proof for its validity
as the set-difference of X1, X2. The latter receives succinct rep-
resentations πX1 , πX2 , πX1\X2 of X1, X2, X1 \ X2, respectively,
and returns accept if X1 \ X2 is the set-difference of X1, X2, and
reject otherwise. Below is the pseudo codes of the two routines.
Algorithm ProveSetDiﬀ(X1 \ X2, pk)
1. Return π\ = acc(X1 \ X2)
Algorithm VerifySetDiﬀ(πX1 , πX2 , π\, pk)
1. If e(πX2 , π\) = e(πX1 , g), return accept, else return reject
Note that these routines are meaningful only as part of a more
elaborate SOA scheme (e.g., [24, 8]), which utilizes bilinear ac-
cumulators as well, and relies on the same public key pk. More
speciﬁcally, the caller SOA is enforced with the computation of
input X1 \ X2 to ProveSetDiﬀ. Therefore, this routine simply re-
turns π\ as the accumulation value of X1\X2 in time ˜O(|X1\X2|).
In addition, the SOA must ﬁrst check that inputs πX1 , πX2 of
VerifySetDiﬀ are the accumulation values of X1, X2, such that X1
is a proper superset of X2, prior to calling the routine. In this case,
the cost of VerifySetDiﬀ is O(1) pairings.
For example, in our scheme in Section 4.2, ProveSetDiﬀ is called
in algorithm Prove for each set Ri, after Ri has been computed.
Moreover, VerifySetDiﬀ is invoked in Verify using as inputs the
already veriﬁed accumulation values of preﬁx sets Pi,ki , Pi,k(cid:48)i
that,
by deﬁnition, satisfy the constraint Pi,ki ⊃ Pi,k(cid:48)i
. The following
lemma is useful in our proofs included in the Appendix.
LEMMA 3. Let λ be a security parameter, pub ← BilGen(1λ),
) ∈ G, computed for some s chosen at
and elements (g, gs, ..., gsq
random from Z∗
p. Let X1, X2 be sets with elements in Zp, such that
X1 ⊃ X2. For an element y ∈ G, it holds that y = acc(X1 \ X2),
iff e(acc(X2), y) = e(acc(X1), g).
5. UPDATE-EFFICIENT SCHEME
Section 5.1 presents an update-efﬁcient construction that builds
upon the basic scheme of the previous section. Section 5.2 includes
a set union sub-protocol that is used as part of our construction.
5.1 Construction
Similar to our basic solution, the update-efﬁcient scheme views
the query result as a combination of “primitive set” operations. It
then allows the server to compute a small set of proof elements,
which can be aggregated by the client in a bottom-up fashion (sim-
ilar to Figure 4). It adopts the same idea of computing proofs for
the partial Ri results along each dimension ai, and then combin-
ing them through a set intersection protocol into a single proof that
veriﬁes the ﬁnal result R.
It also adopts the idea of performing
set-difference operations over preﬁx sets. The primary difference
with the basic scheme is that we now organize the hash values in
the ordering of each dimension into buckets, and compute preﬁx
sets over both the buckets, as well as the hashes in each bucket.
As we shall see, this twist isolates the effect of an update, thus, re-
ducing the update cost complexity. However, it also mandates the
modiﬁcation of the overall authentication structure, proof genera-
tion and veriﬁcation processes, and creates the need for a new set
union sub-protocol (presented in Section 5.2). In the following, we
only describe the main ideas behind the construction, omitting the
tedious algorithmic details.
Figure 5 depicts the authentication structure created by the owner
during the setup stage, focusing on attribute ai. As before, the
owner sorts the hash values of the n tuples of T in ascending or-
der of the ai values of the tuples. It then creates b buckets, enu-
merated as Bi,1, . . . , Bi,b (bottom left in the ﬁgure). For clarity of
presentation, we assume that the partitioning of hashes into buckets
is publicly known (e.g., each bucket may correspond to a speciﬁc
range of the domain of ai), and that each bucket has n/b hashes.
Figure 5: Authentication structure for efﬁcient updates
We deﬁne as Pi,j the preﬁx set over buckets Bi,1, . . . , Bi,j, i.e.,
the set of hashes included in Bi,1, . . . , Bi,j (we use calligraphic P
for bucket preﬁxes to distinguish them from hash preﬁxes denoted
by P ). The owner computes a proof πPi,j = acc(Pi,j) for every
Pi,j. In addition, for every bucket Bi,j, it computes preﬁxes Pi,j,l
for the hashes therein (bottom right in the ﬁgure), as well as proofs
πPi,j,l = acc(Pi,j,l). Subsequently, the owner creates a triplet
(i, j, πPi,j ) for every Pi,j, as well as tuple τPi,j,l for every Pi,j,l.
Note that τPi,j,l is similar to the case of the basic scheme (i.e., it
h1h1Bi,1Pi,1,1Pi,1,n/b...h2SMA′iδ′iSMAδ...Bi,bPi,1Pi,b(i,1,πPi,1)(i,b,πPi,b)...Pi,b,1Pi,b,n/bh2τPi,1,1τPi,1,n/bτPi,b,n/bτPi,b,1SMAi,1SMAi,bδi,1δi,bSMAiδi...............ai...BucketBi,1BucketBi,b826encompasses πPi,j,l along with two ai values), but now also in-
corporates the index j of the bucket. The owner feeds (i, j, πPi,j )
to the leaf level of SMA(cid:48)
i with digest δ(cid:48)
i. It also feeds τPi,j,l to
SMAi,j with digest δi,j.
It then superimposes another SMAi
over digests δi,j which has digest δi. Finally, it builds SMA over
i, δi with ﬁnal digest δ that is published. The various SMAs
all δ(cid:48)
will later allow the server to construct proofs validating that πPi,j ,