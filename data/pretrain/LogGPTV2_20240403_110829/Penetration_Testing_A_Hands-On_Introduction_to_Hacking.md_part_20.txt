160 Chapter 7
will allow us to redirect and intercept traffic between two systems (other
than our own system) before forwarding packets on to the correct destina-
tion. One tried-and-true technique for masquerading as another device on
the network is called Address Resolution Protocol (ARP) cache poisoning (also
known as ARP spoofing).
ARP Basics
When we connect to another machine on our local network, we usually
use its hostname, fully qualified domain name, or IP address. (We’ll look
at domain name server cache poisoning in “DNS Cache Poisoning” on
page 167.) Before a packet can be sent from our Kali machine to the
Windows XP target, Kali must map the IP address of the XP target machine
to the Media Access Control (MAC) address of the network interface card
(NIC) so Kali knows where on the network to send the packet. To do this,
it uses ARP to broadcast “Who has IP address 192.168.20.10?” on the local
network. The machine with the IP address 192.168.20.10 writes back, “I have
192.168.20.10, and my MAC address is 00:0c:29:a9:ce:92.” In our case this
will be the Windows XP target. Our Kali system will store the mapping from
IP address 192.168.20.10 to the MAC address 00:0c:29:a9:ce:92 in its ARP
cache.
When it sends the next packet, our machine will first look to its ARP
cache for an entry for 192.168.20.10. If it finds one, it will use that entry
as the address of the target rather than sending another ARP broadcast.
(ARP cache entries are flushed out regularly because network topology may
change at any time.) Thus, systems will regularly be sending ARP broad-
casts as their caches are flushed. This process will come in handy when we
perform ARP cache poisoning in the next section. The ARP process is illus-
trated in Figure 7-5.
Who has 192.168.20.10? Who has 192.168.20.10?
Kali
(192.168.20.9)
I have 192.168.20.10.
My MAC address is
Ubuntu target Windows XP target
00:0c:29:a9:ce:92.
(192.168.20.11) (192.168.20.10)
Figure 7-5: ARP resolution process
Capturing Traffic 161
To view the ARP cache in our Kali machine, enter arp. Currently, the
only IP address–to–MAC address mappings that it knows are 192.168.20.1,
the default gateway, as well as 192.168.20.10, the Windows XP machine we
engaged in the last exercise.
root@kali:~# arp
Address HWtype HWaddress Flags Mask Iface
192.168.20.1 ether 00:23:69:f5:b4:29 C eth0
192.168.20.10 ether 00:0c:29:05:26:4c C eth0
Now restart the Wireshark capture, and use the anonymous login to
interact with the Ubuntu target’s FTP server again. Next, use the arp
filter, as shown in Figure 7-6, to see the ARP broadcast from the Kali
machine and the reply from the Ubuntu target with its MAC address.
Figure 7-6: ARP broadcast and reply
Check your Kali Linux’s ARP cache again. You should see an entry for
192.168.20.10.
root@kali:~# arp
Address HWtype HWaddress Flags Mask Iface
192.168.20.1 ether 00:23:69:f5:b4:29 C eth0
192.168.20.10 ether 00:0c:29:05:26:4c C eth0
192.168.20.11 ether 80:49:71:14:97:2b C eth0
The trouble with relying on ARP for addressing is that there’s no guar-
antee that the IP address–to–MAC address answer you get is correct. Any
machine can reply to an ARP request for 192.168.20.11, even if that machine
is really at 192.168.20.12 or some other IP address. The target machine will
accept the reply, regardless.
162 Chapter 7
That’s ARP cache poisoning in a nutshell. We send out a series of ARP
replies that tell our target that we are another machine on the network.
Thus, when the target sends traffic intended for that machine, it will instead
send the packets straight to us to be picked up by our traffic sniffer, as shown
in Figure 7-7.
Recall from “Capturing Traffic” on page 156 that we initiated an FTP
connection from our Ubuntu target to the Windows XP target, but the traf-
fic flowing through that connection was not captured by Wireshark on our
Kali system. Using an ARP cache poisoning attack, we can trick the two
systems into sending their traffic to our Kali machine instead, to be cap-
tured in Wireshark.
Kali forwards Kali forwards traffic
traffic to Ubuntu. to Windows XP.
Kali
(192.168.20.9)
Windows XP sends traffic
destined for Ubuntu to Kali.
Ubuntu sends traffic destined
Ubuntu target for Windows XP to Kali. Windows XP target
(192.168.20.11) (192.168.20.10)
Figure 7-7: ARP cache poisoning redirects traffic through Kali.
IP Forwarding
But before we can trick the Linux target into sending credentials for the
FTP server to us instead, we need to turn on IP forwarding to tell our Kali
machine to forward any extraneous packets it receives to their proper desti-
nation. Without IP forwarding, we’ll create a denial-of-service (DoS) condition
on our network, where legitimate clients are unable to access services. For
example, if we were to use ARP cache poisoning without IP forwarding to
redirect traffic from the Linux target, intended for the Windows XP target,
to our Kali machine, the FTP server on the Windows XP machine would
never receive the packets from the Linux machine and vice versa.
The setting for IP forwarding on Kali is in /proc/sys/net/ipv4/ip_forward.
We need to set this value to 1.
root@kali:~# echo 1 > /proc/sys/net/ipv4/ip_forward
Capturing Traffic 163
Before we start ARP cache poisoning, note the entry for the Windows
XP target (192.168.20.10) in the Linux target’s ARP cache. This value will
change to the MAC address of the Kali machine after we commence ARP
cache poisoning.
georgia@ubuntu:~$ arp -a
? (192.168.20.1) at 00:23:69:f5:b4:29 [ether] on eth2
? (192.168.20.10) at 00:0c:29:05:26:4c [ether] on eth0
? (192.168.20.9) at 70:56.81:b2:f0:53 [ether] on eth2
ARP Cache Poisoning with Arpspoof
One easy-to-use tool for ARP cache poisoning is Arpspoof. To use Arpspoof,
we tell it which network interface to use, the target of our ARP cache poi-
soning attack, and the IP address we would like to masquerade as. (If you
leave out the target, you’ll poison the entire network.) For our example, to
fool the Linux target into thinking we are the Windows XP machine, I set
the -i option as eth0 to specify the interface, the -t option as 192.168.20.11
to specify the target as the Linux box, and 192.168.20.10 as the Windows XP
machine I want to pretend to be.
root@kali:~# arpspoof -i eth0 -t 192.168.20.11 192.168.20.10
Arpspoof immediately starts sending ARP replies to the Linux target,
informing it that the Windows XP machine is located at the Kali machine’s
MAC address. (ARP cache entries are updated at varying times among dif-
ferent implementations, but one minute is a safe length of time to wait.)
To capture the other side of the conversation, we need to fool the
Windows XP machine into sending traffic intended for the Linux target to
the Kali machine as well. Start another instance of Arpspoof, and this time
set the target as the Windows XP machine and the recipient as the Linux
machine.
root@kali:~# arpspoof -i eth0 -t 192.168.20.10 192.168.20.11
Once you start ARP cache poisoning, check your Linux target’s ARP
cache again. Notice that the MAC address associated with the Windows XP
target has changed to 70:56:81:b2:f0:53. The Linux target should send all
traffic intended for the Windows XP target to the Kali machine, where we
can capture it in Wireshark.
georgia@ubuntu:~$ arp -a
? (192.168.20.1) at 00:23:69:f5:b4:29 [ether] on eth0
? (192.168.20.10) at 70:56:81:b2:f0:53 [ether] on eth0
164 Chapter 7
Now log in to the Windows XP target’s FTP server from the Linux target
using another account (see Listing 7-3). (The credentials georgia:password
will work if you followed my instructions in Chapter 1. If you set your cre-
dentials as something else, use those instead.)
georgia@ubuntu:~$ ftp 192.168.20.10
Connected to 192.168.20.10.
220-FileZilla Server version 0.9.32 beta
220-written by Tim Kosse (PI:EMAIL)
220 Please visit http://sourceforge.net/projects/filezilla/
Name (192.168.20.10:georgia): georgia
331 Password required for georgia
Password:
230 Logged on
Remote system type is UNIX.
Listing 7-3: Logging in to FTP on Windows XP from the Ubuntu target with a user account
Because we have IP forwarding turned on, everything appears to work
normally as far as our user is concerned. Returning to Wireshark, we see
that this time we were able to capture the FTP traffic and read the plaintext
login credentials. The Wireshark output shown in Figure 7-8 confirms that
our Kali machine is forwarding the FTP traffic between the two targets.
After each FTP packet, there is a retransmission packet.
Figure 7-8: Wireshark captures the login information.
Using ARP Cache Poisoning to Impersonate the Default Gateway
We can also use ARP cache poisoning to impersonate the default gateway
on a network and access traffic entering and leaving the network, includ-
ing traffic destined for the Internet. Stop the Arpspoof processes you have
Capturing Traffic 165
running, and try tricking the Linux target into routing all traffic to the
gateway through the Kali machine by impersonating the default gateway,
as shown here.
root@kali:~# arpspoof -i eth0 -t 192.168.20.11 192.168.20.1
root@kali:~# arpspoof -i eth0 -t 192.168.20.1 192.168.20.11
If we start to browse the Internet from the Linux target, we should see
HTTP packets being captured by Wireshark. Even if sensitive information is
encrypted with HTTPS, we’ll still be able to see where users are going and
any other information sent over HTTP. For example, if we run a Google
query, the plaintext of the query will be captured in Wireshark, as shown in
Figure 7-9.
note If you use ARP cache poisoning to trick a large network into thinking your pentest
machine is the default gateway, you may unwittingly cause networking issues. All the
traffic in a network going through one laptop (or worse, one virtual machine) can
slow things down to the point of denial of service in some cases.
Figure 7-9: Query captured in Wireshark
166 Chapter 7
dns Cache Poisoning
In addition to ARP cache poisoning, we can also poison Domain Name
Service (DNS) cache entries (mappings from domain names to IP addresses)
to route traffic intended for another website to one we control. Just as ARP
resolves IP to MAC addresses to properly route traffic, DNS maps (or
resolves) domain names such as www.gmail.com to IP addresses.
To reach another system on the Internet or local network, our machine
needs to know the IP address to connect to. It is easy to remember the URL
www.gmail.com if we want to visit our web mail account, but it’s difficult to
remember a bunch of IP addresses, which may even change regularly. DNS
resolution translates the human-readable domain name into an IP address.
For example, we can use the tool Nslookup to translate www.gmail.com into an
IP address, as shown in Listing 7-4.
root@kali~# nslookup www.gmail.com
Server: 75.75.75.75
Address: 75.75.75.75#53
Non-authoritative answer:
www.gmail.com canonical name = mail.google.com.
mail.google.com canonical name = googlemail.l.google.com.
Name: googlemail.l.google.com
Address: 173.194.37.85
Name: googlemail.l.google.com
Address: 173.194.37.86
Listing 7-4: Nslookup DNS resolution
As you can see, Nslookup translates www.gmail.com to a number of IP
addresses, including 173.194.37.85 and 173.194.37.86, all of which we can
use to reach Gmail. To perform DNS resolution (Figure 7-10), our system
queries its local DNS server for information about a specific domain name,
such as www.gmail.com. If the DNS server has a cache entry for the address,
it gives our system the correct IP address. If not, it contacts other DNS serv-
ers on the Internet looking for the correct information.
When the correct IP address is returned, the DNS server writes back
to our machine with the correct IP address resolution for www.gmail.com,
and our system then translates www.gmail.com into 173.194.37.85, as shown
in Listing 7-4. Users can then access www.gmail.com by name without having
to use the IP address.
Capturing Traffic 167
www.gmail.com
is at 173.194.37.85.
DNS server www.gmail.com
Internet
I don’t know
Browse to www.gmail.com.
173.194.37.85. I’ll ask another
DNS server.
I want to browse to
www.gmail.com.
What’s the IP address?
Kali www.gmail.com local DNS server
is at 173.194.37.85.
Figure 7-10: DNS resolution
Getting Started
DNS cache poisoning works like ARP cache poisoning: We send a bunch
of bogus DNS resolution replies pointing to the wrong IP address for a
domain name.
Now make sure the Apache server is running with the command service
apache2 start.
root@kali:~# service apache2 start
* Starting web server apache2 [ OK ]
Before we use a DNS cache poisoning tool, we need to create a file that
specifies which DNS names we would like to spoof and where to send traffic.
For example, let’s tell any system that runs a DNS resolution for www.gmail
.com that that domain’s IP address is our Kali machine by adding the entry
168 Chapter 7
192.168.20.9 www.gmail.com to a new file called hosts.txt. (You can name the
file anything you like.)
root@kali:~# cat hosts.txt
192.168.20.9 www.gmail.com
Using Dnsspoof
Restart Arpspoof between the Linux target and the default gateway and
vice versa as discussed in “Using ARP Cache Poisoning to Impersonate the
Default Gateway” on page 165. Now we can start sending DNS cache poi-
soning attempts using the Dnsspoof DNS spoofing tool, as shown here.
root@kali:~# dnsspoof -i eth0u -f hosts.txtv
dnsspoof: listening on eth0 [udp dst port 53 and not src 192.168.20.9]
192.168.20.11 > 75.75.75.75.53: 46559+ A? www.gmail.com
We specify the network interface u to use, and point Dnsspoof to the
file (hosts.txt) we just created v telling it which values to spoof.
Once Dnsspoof is running, when we run the nslookup command from
our Linux target, the IP address returned should be our Kali machine’s, as
shown in Listing 7-5. This is clearly not the real IP address for Gmail.
georgia@ubuntu:~$ nslookup www.gmail.com
Server: 75.75.75.75
Address: 75.75.75.75#53
Non-authoritative answer:
Name: www.gmail.com
Address: 192.168.20.9
Listing 7-5: Nslookup after attack
To demonstrate this attack, set up a website to direct traffic to. The
Apache server in Kali will by default serve an “It Works” page to anyone
who visits it. We can change the contents of the index.html file in the folder
/var/www, but the default “It Works” text is fine for our purposes.
Now if we browse to http://www.gmail.com/ from the Ubuntu target, the
URL bar should say http://www.gmail.com/, but we’re actually at our Kali
machine’s web server, as shown in Figure 7-11. We can even make this attack
more interesting by cloning the actual Gmail website (or any other site the
attacker chooses) so the user won’t notice the difference.
Capturing Traffic 169
Figure 7-11: This isn’t Gmail.
ssL attacks
So far, we’ve been able to intercept encrypted traffic, but we haven’t been