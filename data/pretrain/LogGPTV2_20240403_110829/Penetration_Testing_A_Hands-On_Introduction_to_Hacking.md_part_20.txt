### Chapter 7: Traffic Interception and Redirection

#### Introduction
In this chapter, we will explore techniques for intercepting and redirecting network traffic between two systems. One of the most effective methods for masquerading as another device on a network is called Address Resolution Protocol (ARP) cache poisoning, also known as ARP spoofing.

#### ARP Basics
When connecting to another machine on a local network, we typically use its hostname, fully qualified domain name (FQDN), or IP address. Before a packet can be sent from our Kali machine to a target, such as a Windows XP system, Kali must map the target's IP address to its Media Access Control (MAC) address. This mapping is necessary for Kali to know where on the network to send the packet. To achieve this, Kali uses ARP to broadcast a request, such as "Who has IP address 192.168.20.10?" The machine with that IP address responds, "I have 192.168.20.10, and my MAC address is 00:0c:29:a9:ce:92." Kali then stores this mapping in its ARP cache.

For subsequent packets, Kali first checks its ARP cache for the IP-to-MAC address mapping. If found, it uses this mapping to send the packet directly to the target. ARP cache entries are periodically flushed because network topology can change. Thus, systems regularly send ARP broadcasts to update their caches. This process is illustrated in Figure 7-5.

**Figure 7-5: ARP Resolution Process**
```
Kali (192.168.20.9)
    | Who has 192.168.20.10?
    |
Ubuntu Target (192.168.20.11)
    | I have 192.168.20.10.
    | My MAC address is 00:0c:29:a9:ce:92.
Windows XP Target (192.168.20.10)
```

To view the ARP cache on your Kali machine, use the `arp` command:
```bash
root@kali:~# arp
Address         HWtype  HWaddress           Flags Mask            Iface
192.168.20.1    ether   00:23:69:f5:b4:29    C                     eth0
192.168.20.10   ether   00:0c:29:05:26:4c    C                     eth0
```

#### Capturing Traffic
To capture traffic, restart Wireshark and use the `arp` filter to see the ARP broadcast and the reply from the Ubuntu target with its MAC address. After interacting with the Ubuntu target’s FTP server, check the ARP cache again. You should see an entry for 192.168.20.10.

**Figure 7-6: ARP Broadcast and Reply**

The issue with relying on ARP for addressing is that there is no guarantee that the IP-to-MAC address response is correct. Any machine can respond to an ARP request, even if it does not own the requested IP address. This vulnerability is exploited in ARP cache poisoning.

#### ARP Cache Poisoning
ARP cache poisoning involves sending a series of ARP replies that tell the target that we are another machine on the network. When the target sends traffic intended for that machine, it instead sends the packets to us, allowing us to capture the traffic using a sniffer like Wireshark. This process is illustrated in Figure 7-7.

**Figure 7-7: ARP Cache Poisoning Redirects Traffic Through Kali**
```
Kali (192.168.20.9)
    | Kali forwards traffic to Ubuntu
    | Kali forwards traffic to Windows XP
Ubuntu Target (192.168.20.11)
    | Ubuntu sends traffic destined for Windows XP to Kali
Windows XP Target (192.168.20.10)
    | Windows XP sends traffic destined for Ubuntu to Kali
```

#### IP Forwarding
Before performing ARP cache poisoning, enable IP forwarding on the Kali machine to ensure that it forwards any intercepted packets to their proper destination. Without IP forwarding, you may create a denial-of-service (DoS) condition where legitimate clients cannot access services.

To enable IP forwarding, set the value in `/proc/sys/net/ipv4/ip_forward` to 1:
```bash
root@kali:~# echo 1 > /proc/sys/net/ipv4/ip_forward
```

#### ARP Cache Poisoning with Arpspoof
Arpspoof is a tool for ARP cache poisoning. To use Arpspoof, specify the network interface, the target of the attack, and the IP address you want to masquerade as. For example, to fool the Linux target into thinking you are the Windows XP machine:

```bash
root@kali:~# arpspoof -i eth0 -t 192.168.20.11 192.168.20.10
```

This command sends ARP replies to the Linux target, informing it that the Windows XP machine is at the Kali machine’s MAC address. To capture the other side of the conversation, start another instance of Arpspoof:

```bash
root@kali:~# arpspoof -i eth0 -t 192.168.20.10 192.168.20.11
```

Check the Linux target’s ARP cache again. The MAC address associated with the Windows XP target should now be the Kali machine’s MAC address. All traffic intended for the Windows XP target will be sent to the Kali machine, where it can be captured in Wireshark.

**Figure 7-8: Wireshark Captures Login Information**

#### Using ARP Cache Poisoning to Impersonate the Default Gateway
You can also use ARP cache poisoning to impersonate the default gateway and capture traffic entering and leaving the network. Stop the Arpspoof processes and run the following commands to trick the Linux target into routing all traffic through the Kali machine:

```bash
root@kali:~# arpspoof -i eth0 -t 192.168.20.11 192.168.20.1
root@kali:~# arpspoof -i eth0 -t 192.168.20.1 192.168.20.11
```

If you browse the Internet from the Linux target, you should see HTTP packets being captured by Wireshark. Even if sensitive information is encrypted with HTTPS, you can still see where users are going and any unencrypted data.

**Figure 7-9: Query Captured in Wireshark**

#### DNS Cache Poisoning
In addition to ARP cache poisoning, you can poison Domain Name Service (DNS) cache entries to route traffic intended for another website to one you control. DNS resolves domain names to IP addresses, making it easier to remember URLs like `www.gmail.com` instead of IP addresses.

To perform DNS resolution, use the `nslookup` tool:
```bash
root@kali:~# nslookup www.gmail.com
Server: 75.75.75.75
Address: 75.75.75.75#53
Non-authoritative answer:
Name: www.gmail.com
Address: 173.194.37.85
```

**Figure 7-10: DNS Resolution**

#### Getting Started with DNS Cache Poisoning
DNS cache poisoning works similarly to ARP cache poisoning. First, ensure the Apache server is running:

```bash
root@kali:~# service apache2 start
* Starting web server apache2 [ OK ]
```

Create a file, such as `hosts.txt`, to specify which DNS names to spoof and where to send traffic:

```bash
root@kali:~# cat hosts.txt
192.168.20.9 www.gmail.com
```

Use Dnsspoof to start sending DNS cache poisoning attempts:

```bash
root@kali:~# dnsspoof -i eth0 -f hosts.txt
dnsspoof: listening on eth0 [udp dst port 53 and not src 192.168.20.9]
192.168.20.11 > 75.75.75.75.53: 46559+ A? www.gmail.com
```

Now, when you run `nslookup` from the Linux target, the IP address returned should be your Kali machine’s IP address:

**Listing 7-5: Nslookup After Attack**
```bash
georgia@ubuntu:~$ nslookup www.gmail.com
Server: 75.75.75.75
Address: 75.75.75.75#53
Non-authoritative answer:
Name: www.gmail.com
Address: 192.168.20.9
```

**Figure 7-11: This Isn’t Gmail**

#### SSL Attacks
So far, we have been able to intercept encrypted traffic, but we have not yet covered how to decrypt it. In the next section, we will explore techniques for handling SSL/TLS-encrypted traffic.