} RecoveryTargetType;    
```  
2\. recovery_target_xid 与 XLogRecord->xl_xid进行比较.    
xid作为恢复目标时, recoveryTargetInclusive只影响日志输出(recoveryStopAfter).    
原因是xid是按事务启动顺序分配的, 而不是按事务结束顺序分配. 并且这种target下面截止只可能在COMMIT/ABORT.     
所以只要达到这个xid并且状态是commit/abort时, 就返回true.    
*includeThis = recoveryTargetInclusive;只影响了日志输出. 而不是包含和不包含的意思.    
```  
        if (recoveryTarget == RECOVERY_TARGET_XID)    
        {    
                /*    
                 * There can be only one transaction end record with this exact    
                 * transactionid    
                 *    
                 * when testing for an xid, we MUST test for equality only, since    
                 * transactions are numbered in the order they start, not the order    
                 * they complete. A higher numbered xid will complete before you about    
                 * 50% of the time...    
                 */    
                stopsHere = (record->xl_xid == recoveryTargetXid);    
                if (stopsHere)    
                        *includeThis = recoveryTargetInclusive;    
        }    
```  
日志输出时, 判断recoveryStopAfter :     
```  
        if (stopsHere)    
        {    
                recoveryStopXid = record->xl_xid;    
                recoveryStopTime = recordXtime;    
                recoveryStopAfter = *includeThis;    
                if (record_info == XLOG_XACT_COMMIT_COMPACT || record_info == XLOG_XACT_COMMIT)    
                {    
                        if (recoveryStopAfter)    
                                ereport(LOG,    
                                                (errmsg("recovery stopping after commit of transaction %u, time %s",    
                                                                recoveryStopXid,    
                                                                timestamptz_to_str(recoveryStopTime))));    
                        else    
                                ereport(LOG,    
                                                (errmsg("recovery stopping before commit of transaction %u, time %s",    
                                                                recoveryStopXid,    
                                                                timestamptz_to_str(recoveryStopTime))));    
                }    
                else if (record_info == XLOG_XACT_ABORT)    
                {    
                        if (recoveryStopAfter)    
                                ereport(LOG,    
                                                (errmsg("recovery stopping after abort of transaction %u, time %s",    
                                                                recoveryStopXid,    
                                                                timestamptz_to_str(recoveryStopTime))));    
                        else    
                                ereport(LOG,    
                                                (errmsg("recovery stopping before abort of transaction %u, time %s",    
                                                                recoveryStopXid,    
                                                                timestamptz_to_str(recoveryStopTime))));    
                }    
```  
3\. recovery_target_name 与 XLogRecData->data进行比较.    
如果数据库中有多个重复命名的还原点, 遇到第一个则停止.     
同时因为还原点的信息写在单独的xlog数据块中, 不是一条transaction record块, 所以也没有包含或不包含的概念, 直接截止.     
不需要判断recovery_target_inclusive .    
```  
        else if (recoveryTarget == RECOVERY_TARGET_NAME)    
        {    
                /*    
                 * There can be many restore points that share the same name, so we    
                 * stop at the first one    
                 */    
                stopsHere = (strcmp(recordRPName, recoveryTargetName) == 0);    
                /*    
                 * Ignore recoveryTargetInclusive because this is not a transaction    
                 * record    
                 */    
                *includeThis = false;    
        }    
```  
4\. recovery_target_time 与 xl_xact_commit_compact->xact_time进行比较.     
因为在同一个时间点, 可能有多个事务COMMIT/ABORT. 所以recovery_target_inclusive 在这里起到的作用是 :     
截止于这个时间点的第一个提交的事务后(包含这个时间点第一个遇到的提交/回滚的事务);    
或者截止于这个时间点提交的最后一个事务后(包括这个时间点提交/回滚的所有事务).    
```  
        else    
        {    
                /*    
                 * There can be many transactions that share the same commit time, so    
                 * we stop after the last one, if we are inclusive, or stop at the    
                 * first one if we are exclusive    
                 */    
                if (recoveryTargetInclusive)    
                        stopsHere = (recordXtime > recoveryTargetTime);    
                else    
                        stopsHere = (recordXtime >= recoveryTargetTime);    
                if (stopsHere)    
                        *includeThis = false;    
        }    
```  
其中事务结束时间来自这个数据结构 :     
src/include/access/xact.h    
```  
typedef struct xl_xact_commit_compact    
{    
        TimestampTz xact_time;          /* time of commit */    
        int                     nsubxacts;              /* number of subtransaction XIDs */    
        /* ARRAY OF COMMITTED SUBTRANSACTION XIDs FOLLOWS */    
        TransactionId subxacts[1];      /* VARIABLE LENGTH ARRAY */    
} xl_xact_commit_compact;    
```  
从以上逻辑看到, recoveryTargetInclusive只有当恢复目标是xid或者time时可以指定.     
目标是target name时不需要指定.    
## 参考  
1\. src/include/catalog/pg_control.h    
```  
/* XLOG info values for XLOG rmgr */    
#define XLOG_CHECKPOINT_SHUTDOWN                0x00    
#define XLOG_CHECKPOINT_ONLINE                  0x10    
#define XLOG_NOOP                                               0x20    
#define XLOG_NEXTOID                                    0x30    
#define XLOG_SWITCH                                             0x40    
#define XLOG_BACKUP_END                                 0x50    
#define XLOG_PARAMETER_CHANGE                   0x60    
#define XLOG_RESTORE_POINT                              0x70    
#define XLOG_FPW_CHANGE                         0x80    
```  
2\. src/include/access/xlog.h    
```  
/*    
 * XLOG uses only low 4 bits of xl_info.  High 4 bits may be used by rmgr.    
 */    
#define XLR_INFO_MASK                   0x0F    
```  
3\. src/include/access/rmgr.h    
```  
/*    
 * Built-in resource managers    
 *    
 * Note: RM_MAX_ID could be as much as 255 without breaking the XLOG file    
 * format, but we keep it small to minimize the size of RmgrTable[].    
 */    
#define RM_XLOG_ID                              0    
#define RM_XACT_ID                              1    
#define RM_SMGR_ID                              2    
#define RM_CLOG_ID                              3    
#define RM_DBASE_ID                             4    
#define RM_TBLSPC_ID                    5    
#define RM_MULTIXACT_ID                 6    
#define RM_RELMAP_ID                    7    
#define RM_STANDBY_ID                   8    
#define RM_HEAP2_ID                             9    
#define RM_HEAP_ID                              10    
#define RM_BTREE_ID                             11    
#define RM_HASH_ID                              12    
#define RM_GIN_ID                               13    
#define RM_GIST_ID                              14    
#define RM_SEQ_ID                               15    
#define RM_SPGIST_ID                    16    
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")