### CSRF: Yeah, It Still Works…

**Authors:**
- Mike Bailey, skeptikal.org
- Russ McRee, holisticinfosec.org

**Disclaimer:**
The views, opinions, and methodologies discussed in this document do not reflect those of our employers. Any statements or content herein should be attributed solely to Mike and Russ.

---

### The XSS Epidemic: Discovery, Disclosure, and Remediation

#### Cross-Site Request Forgery (CSRF)
- **Bad News:**
  - CSRF is a significant threat, prevalent across the web, and cannot be entirely mitigated on the client side.
- **Good News:**
  - Despite its risks, CSRF can be used for some interesting and beneficial purposes.
- **Overview:**
  - CSRF is often considered one of the less "cool" security bugs, but it remains a critical issue.

#### What is CSRF?
- **Definition:**
  - Cross-site request forgery (CSRF) is an attack that forces an authenticated user's browser to send a forged request to a web application.
  - If the user has administrative privileges, the attack can lead to privilege escalation.
  - Failing to mitigate this vulnerability through secure coding practices is highly negligent.

#### Why CSRF Still Matters
- **Widespread Vulnerability:**
  - We have identified numerous applications, platforms, and critical infrastructure devices that are vulnerable to CSRF, many of which do not require JavaScript (XSS).
- **Key Takeaway:**
  - A vulnerability that is easily preventable can lead to significant damage, especially when combined with other attacks. Additionally, identifying the attacker is challenging as the attack occurs in the context of the authenticated user.

#### Demonstrating CSRF
- **Prevention vs. Exploitation:**
  - While we will discuss prevention later, we will first demonstrate how to exploit CSRF vulnerabilities.
- **Vendor/Developer Resistance:**
  - Common arguments from vendors and developers who resist fixing CSRF vulnerabilities include:
    - "Someone has to click a link; it’s their problem if they do."
    - However, everyone clicks links, and the consequences can be severe. For example, the CEO of StrongWebMail lost $10,000, with $3,300 going to Mike.

#### Tools and Techniques
- **Tools:**
  - Tamper Data, HackBar: These tools are ideal for viewing form variables and parameters.
- **Exploitation:**
  - Identifying form variables and parameters (and the lack of a form key/token) allows you to create a simple script to exploit the vulnerability.

#### Case Studies
- **McAfee Secure:**
  - The McAfee Secure portal was vulnerable to GET-based CSRF attacks, allowing an attacker to create accounts and scan sites for vulnerabilities.
  - This highlights the need for robust security measures, even in trusted services.

- **Linksys WRT160N:**
  - Linksys stated that preventing CSRF would bog down their code and instead implemented a timeout and advised users to avoid clicking suspicious links while logged in.
  - This approach is insufficient and leaves users vulnerable.

- **ESPN:**
  - An HTML injection hole in espn.go.com could lead to a CSRF worm without requiring client-side scripting.

- **Dokeos:**
  - CVE-2009-2005: Dokeos, used by organizations like Securitas, MCI, Red Cross France, and the Belgian Defense Agency, had over one million users affected by a CSRF vulnerability.

- **osCommerce and Zen Cart:**
  - CVE-2009-0408: Both osCommerce and Zen Cart share the same codebase and were found to be vulnerable to CSRF, affecting millions of websites.

- **cPanel/WHM:**
  - With at least 7 million sites managed via cPanel/WHM, a CSRF vulnerability could have far-reaching consequences.

#### Misconceptions and Ineffective Defenses
- **Common Misconceptions:**
  - **Only Accept POST Requests:**
    - While this stops simple GET-based attacks, hidden POST requests can still be created with frames and scripts.
  - **Referrer Checking:**
    - Some users prohibit referrers, and techniques exist to create HTTP requests without referrers.
  - **Multi-Step Transactions:**
    - CSRF attacks can perform each step in order.
  - **URL Rewriting:**
    - General session ID exposure in logs and cache makes this approach ineffective.

#### Effective Mitigations
- **CAPTCHA:**
  - Requires the attacker to know the CAPTCHA answer, assuming a secure implementation.
- **Re-Authentication:**
  - **Password-Based:**
    - The attacker must know the victim's password, which, if known, means the game is already over.
  - **One-Time Token:**
    - The attacker must know the current token, providing a very strong defense.
- **Unique Request Tokens:**
  - The attacker must know the unique request token for a particular victim and session, assuming the token is cryptographically secure and not disclosed.

#### Conclusion
- **Q & A:**
  - We look forward to your questions and discussions.

**SEE YOU THERE!**

---

This version of the text is more structured, clear, and professional, making it easier to read and understand.