        ACL：
        ``` literallayout
        acl SSL_ports port port_number
        ```
    3.  更新 `acl Safe_ports`{.literal} 规则列表，以配置 Squid
        可以建立连接的端口。例如，若要配置使用代理的客户端只能访问端口
        21(FTP)、80(HTTP)和 443(HTTPS)上的资源，在配置中仅保留以下
        `acl Safe_ports`{.literal} 语句：
        ``` literallayout
        acl Safe_ports port 21
        acl Safe_ports port 80
        acl Safe_ports port 443
        ```
        默认情况下，配置中包含 `http_access deny !Safe_ports`{.literal}
        规则，该规则定义了拒绝访问`Safe_ports`{.literal} ACL
        中未定义的端口。
    4.  在 `cache_dir`{.literal}
        参数中配置缓存类型、缓存目录的路径、缓存大小以及其它缓存类型的设置：
        ``` literallayout
        cache_dir ufs /var/spool/squid 10000 16 256
        ```
        使用这些设置：
        ::: itemizedlist
        -   Squid使用 `ufs`{.literal} 缓存类型.
        -   Squid 将其缓存存储在 `/var/spool/squid/`{.literal} 目录中。
        -   缓存增长到 `10000`{.literal} MB。
        -   Squid
            在`/var/spool/squid/`{.literal}目录中创建`16`{.literal}
            个一级子目录。
        -   Squid 在每个一级目录中创建 `256`{.literal}个子目录。
            如果您没有设置 `cache_dir`{.literal} 指令，Squid
            会将缓存存储在内存中。
        :::
    :::
3.  如果您在 `cache_dir`{.literal} 参数中设置了与
    `/var/spool/squid/`{.literal} 不同的缓存目录：
    ::: orderedlist
    1.  创建缓存目录：
        ``` literallayout
        # mkdir -p path_to_cache_directory
        ```
    2.  配置缓存目录的权限：
        ``` literallayout
        # chown squid:squid path_to_cache_directory
        ```
    3.  如果您在 `enforcing`{.literal} 模式中运行
        SELinux，请为缓存目录设置 `squid_cache_t`{.literal} 上下文：
        ``` literallayout
        # semanage fcontext -a -t squid_cache_t "path_to_cache_directory(/.*)?"
        # restorecon -Rv path_to_cache_directory
        ```
        如果您的系统中没有 `semanage`{.literal} 工具，请安装
        `policycoreutils-python-utils`{.literal} 软件包。
    :::
4.  在防火墙中打开 `3128`{.literal} 端口：
    ``` literallayout
    # firewall-cmd --permanent --add-port=3128/tcp
    # firewall-cmd --reload
    ```
5.  启用并启动 `squid`{.literal} 服务：
    ``` literallayout
    # systemctl enable --now squid
    ```
:::
::: title
**验证步骤**
:::
要验证代理是否正常工作，请使用 `curl`{.literal} 工具下载网页：
``` literallayout
# curl -O -L "https://www.redhat.com/index.html" -x "proxy.example.com:3128"
```
如果 `curl`{.literal} 没有显示任何错误，并且 `index.html`{.literal}
文件可以下载到当前目录中，那么代理工作正常。
:::
::: section
::: titlepage
# []{#configuring-the-squid-caching-proxy-server_deploying-web-servers-and-reverse-proxies.html#setting-up-squid-as-a-caching-proxy-with-ldap-authentication_configuring-the-squid-caching-proxy-server}使用 LDAP 身份验证将 Squid 设置为缓存代理 {.title}
:::
本节描述了 Squid 作为使用 LDAP
验证用户身份的缓存代理的基本配置。此流程配置仅经过身份验证的用户可以使用代理。
::: itemizedlist
**先决条件**
-   该流程假定 `/etc/squid/squid.conf`{.literal} 文件是由
    `squid`{.literal}
    软件包提供的。如果您在之前编辑了这个文件，请删除该文件并重新安装该软件包。
-   LDAP 目录中存在一个服务用户，例如
    `uid=proxy_user,cn=users,cn=accounts,dc=example,dc=com`{.literal}。Squid
    只使用此帐户搜索验证用户。如果存在身份验证用户，Squid
    会以此用户的身份绑定到该目录以验证身份验证。
:::
::: orderedlist
**步骤**
1.  安装 `squid`{.literal} 软件包：
    ``` literallayout
    # dnf install squid
    ```
2.  编辑 `/etc/squid/squid.conf`{.literal} 文件：
    ::: orderedlist
    1.  要配置 `basic_ldap_auth`{.literal} 助手工具，请在
        `/etc/squid/squid.conf`{.literal} 顶部添加以下配置条目：
        ``` literallayout
        auth_param basic program /usr/lib64/squid/basic_ldap_auth -b "cn=users,cn=accounts,dc=example,dc=com" -D "uid=proxy_user,cn=users,cn=accounts,dc=example,dc=com" -W /etc/squid/ldap_password -f "(&(objectClass=person)(uid=%s))" -ZZ -H ldap://ldap_server.example.com:389
        ```
        下面描述了传递给上例中 `basic_ldap_auth`{.literal} helper
        工具的参数：
        ::: itemizedlist
        -   `-b base_DN`{.literal} 设置 LDAP 搜索基础。
        -   `-d proxy_service_user_DN`{.literal} 设置帐户 Squid
            的可分辨名称(DN)，用于在 目录中搜索用户身份验证。
        -   `-W path_to_password_file`{.literal}
            设置包含代理服务用户密码的文件的路径。使用密码文件可防止在操作系统的进程列表中看到密码。
        -   `-f LDAP_filter`{.literal} 指定 LDAP 搜索过滤器。Squid 将
            `%s`{.literal} 变量替换为身份验证用户提供的用户名。
            示例中的 `(&(objectClass=person)(uid=%s))`{.literal}
            过滤器定义用户名必须与 `uid`{.literal}
            属性中设置的值匹配，并且目录条目包含 `person`{.literal}
            对象类。
        -   `-ZZ`{.literal} 使用 `STARTTLS`{.literal} ，通过 LDAP
            协议强制实施 TLS 加密连接。在以下情况下省略 `-ZZ`{.literal}
            ：
            ::: itemizedlist
            -   LDAP 服务器不支持加密的连接。
            -   URL 中指定的端口使用 LDAPS 协议。
            :::
        -   -H LDAP_URL 参数指定协议、主机名或 IP 地址以及 LDAP
            服务器的端口，格式为 URL。
        :::
    2.  添加以下 ACL 和规则来配置 Squid
        只允许经过身份验证的用户使用代理：
        ``` literallayout
        acl ldap-auth proxy_auth REQUIRED
        http_access allow ldap-auth
        ```
        ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 重要 {.title}
        在 `http_access deny`{.literal} 所有规则之前指定这些设置。
        :::
    3.  删除以下规则，以禁用从 `localnet`{.literal} ACL 中指定的 IP
        范围绕过代理身份验证：
        ``` literallayout
        http_access allow localnet
        ```
    4.  以下 ACL 存在于默认配置中，并将 `443`{.literal} 定义为使用 HTTPS
        协议的端口：
        ``` literallayout
        acl SSL_ports port 443
        ```
        如果用户也可以在其它端口上使用 HTTPS 协议，请为每个端口添加
        ACL：
        ``` literallayout
        acl SSL_ports port port_number
        ```
    5.  更新 `acl Safe_ports`{.literal} 规则列表，以配置 Squid
        可以建立连接的端口。例如，若要配置使用代理的客户端只能访问端口
        21(FTP)、80(HTTP)和 443(HTTPS)上的资源，在配置中仅保留以下
        `acl Safe_ports`{.literal} 语句：
        ``` literallayout
        acl Safe_ports port 21
        acl Safe_ports port 80
        acl Safe_ports port 443
        ```
        默认情况下，配置中包含 `http_access deny !Safe_ports`{.literal}
        规则，该规则定义了访问拒绝 `Safe_ports`{.literal} ACL
        中未定义的端口。
    6.  在 `cache_dir`{.literal}
        参数中配置缓存类型、缓存目录的路径、缓存大小以及其它缓存类型的设置：
        ``` literallayout
        cache_dir ufs /var/spool/squid 10000 16 256
        ```
        使用这些设置：
        ::: itemizedlist
        -   Squid使用 `ufs`{.literal} 缓存类型.
        -   Squid 将其缓存存储在 `/var/spool/squid/`{.literal} 目录中。
        -   缓存增长到 `10000`{.literal} MB。
        -   Squid
            在`/var/spool/squid/`{.literal}目录中创建`16`{.literal}
            个一级子目录。
        -   Squid 在每个一级目录中创建 `256`{.literal}个子目录。
            如果您没有设置 `cache_dir`{.literal} 指令，Squid
            会将缓存存储在内存中。
        :::
    :::
3.  如果您在 `cache_dir`{.literal} 参数中设置了与
    `/var/spool/squid/`{.literal} 不同的缓存目录：
    ::: orderedlist
    1.  创建缓存目录：
        ``` literallayout
        # mkdir -p path_to_cache_directory
        ```
    2.  配置缓存目录的权限：
        ``` literallayout
        # chown squid:squid path_to_cache_directory
        ```
    3.  如果您在 `enforcing`{.literal} 模式中运行
        SELinux，请为缓存目录设置 `squid_cache_t`{.literal} 上下文：
        ``` literallayout
        # semanage fcontext -a -t squid_cache_t "path_to_cache_directory(/.*)?"
        # restorecon -Rv path_to_cache_directory
        ```
        如果您的系统中没有 `semanage`{.literal} 工具，请安装
        `policycoreutils-python-utils`{.literal} 软件包。
    :::
4.  将 LDAP 服务用户的密码存储在 `/etc/squid/ldap_password`{.literal}
    文件中，并为该文件设置适当的权限：
    ``` literallayout
    # echo "password" > /etc/squid/ldap_password
    # chown root:squid /etc/squid/ldap_password
    # chmod 640 /etc/squid/ldap_password
    ```
5.  在防火墙中打开 `3128`{.literal} 端口：
    ``` literallayout
    # firewall-cmd --permanent --add-port=3128/tcp
    # firewall-cmd --reload
    ```
6.  启用并启动 `squid`{.literal} 服务：
    ``` literallayout
    # systemctl enable --now squid
    ```
:::
::: title
**验证步骤**
:::
要验证代理是否正常工作，请使用 `curl`{.literal} 工具下载网页：
``` literallayout
# curl -O -L "https://www.redhat.com/index.html" -x "user_name:PI:EMAIL:3128"
```
如果 curl 没有显示任何错误，并且 `index.html`{.literal}
文件可下载到当前目录中，那么代理工作正常。
::: title
**故障排除步骤**
:::
验证 helper 工具是否正常工作：
::: orderedlist
1.  使用您在 `auth_param`{.literal}
    参数中使用的相同设置来手动启动助手工具：
    ``` literallayout
    # /usr/lib64/squid/basic_ldap_auth -b "cn=users,cn=accounts,dc=example,dc=com" -D "uid=proxy_user,cn=users,cn=accounts,dc=example,dc=com" -W /etc/squid/ldap_password -f "(&(objectClass=person)(uid=%s))" -ZZ -H ldap://ldap_server.example.com:389
    ```
2.  输入一个有效的用户名和密码，然后按 [**Enter**]{.keycap} 键：
    ``` literallayout
    user_name password
    ```
    如果帮助程序返回 `OK`{.literal}，则身份验证成功。
:::
:::
::: section
::: titlepage
# []{#configuring-the-squid-caching-proxy-server_deploying-web-servers-and-reverse-proxies.html#setting-up-squid-as-a-caching-proxy-with-kerberos-authentication_configuring-the-squid-caching-proxy-server}将 Squid 设置为带有 kerberos 身份验证的缓存代理 {.title}
:::
这部分描述了 Squid 作为缓存代理的基本配置，它使用 Kerberos 向 Active
Directory(AD)验证用户。此流程配置仅经过身份验证的用户可以使用代理。
::: itemizedlist
**先决条件**
-   该流程假定 `/etc/squid/squid.conf`{.literal} 文件是由
    `squid`{.literal}
    软件包提供的。如果您在之前编辑了这个文件，请删除该文件并重新安装该软件包。
-   要安装 Squid 的服务器是 AD 域的成员。
:::
::: orderedlist
**步骤**
1.  安装以下软件包：
    ``` literallayout
    dnf install squid krb5-workstation
    ```
2.  以 AD 域管理员身份进行身份验证：
    ``` literallayout
    # kinit PI:EMAIL
    ```
3.  为 Squid 创建一个 keytab，并将其存储在