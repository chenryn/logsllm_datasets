pages 281–297. Oakland, CA, USA, 1967.
[33] Patricia Yancey Martin and Barry A Turner. Grounded theory and
organizational research. The journal of applied behavioral science,
22(2):141–157, 1986.
[34] Charles D Michener and Robert R Sokal. A quantitative approach to a
problem in classiﬁcation. Evolution, 11(2):130–162, 1957.
[35] Sadegh M Milajerdi, Rigel Gjomemo, Birhanu Eshete, R Sekar, and
VN Venkatakrishnan. Holmes: real-time apt detection through correla-
tion of suspicious information ﬂows. arXiv preprint arXiv:1810.01594,
2018.
[36] NCC. Decentralized application security project. https://dasp.co/.
Accessed Apr 10, 2019.
[37] NCC. Reentrancy. https://dasp.co/#item-1. Accessed Apr 10,
2019.
[38] Alina Oprea, Zhou Li, Ting-Fang Yen, Sang H Chin, and Sumayah Alr-
wais. Detection of early-stage enterprise infection by mining large-scale
log data. In 2015 45th Annual IEEE/IFIP International Conference on
Dependable Systems and Networks, pages 45–56. IEEE, 2015.
[39] Nathaniel Popper.
A hacking of more than $50 million
https:
in the world of virtual currency.
dashes hopes
//www.nytimes.com/2016/06/18/business/dealbook/hac
ker-may-have-removed-more-than-50-million-from-exper
imental-cybercurrency-project.html. Accessed Juln 17, 2016.
A comprehensive solution to bugs in fomo3d-like
games. https://hackernoon.com/a-comprehensive-solution-
to-bugs-in-fomo3d-like-games-ab3b054f3cc5. Accessed Apr
11, 2020.
[40] SECBIT.
[41] SECBIT. How the winner got fomo3d prize—a detailed expla-
nation.
https://medium.com/coinmonks/how-the-winner-go
t-fomo3d-prize-a-detailed-explanation-b30a69b7813f. Ac-
cessed May 30, 2019.
[42] Beosin (Kai Sedgwick). Someone wins $3 million jackpot in ethereum
ponzi fomo3d. https://news.bitcoin.com/someone-wins-3-mi
llion-jackpot-in-ethereum-ponzi-fomo3d/. Accessed Apr 11,
2020.
[43] Yun Shen, Enrico Mariconti, Pierre Antoine Vervier, and Gianluca
Stringhini. Tiresias: Predicting security events through deep learning.
In Proceedings of the 2018 ACM SIGSAC Conference on Computer
and Communications Security, pages 592–605. ACM, 2018.
[44] Yun Shen and Gianluca Stringhini. Attack2vec: Leveraging temporal
word embeddings to understand the evolution of cyberattacks. arXiv
preprint arXiv:1905.12590, 2019.
[45] Beosin (Chengdu LianAn Tech). Beware! owner access could be
stolen from another 3 contracts — do not ignore simple mistakes.
https://medium.com/@Beosin/beware-owner-access-could-b
e-stolen-from-another-3-contracts-do-not-ignore-simp
le-mistakes-f4ebbc80db98. Accessed Jul 31, 2019.
[46] Christof Ferreira Torres and Mathis Steichen. The art of the scam:
Demystifying honeypots in ethereum smart contracts. arXiv preprint
arXiv:1902.06976, 2019.
[47] ubitok.io. Post-mortem investigation. https://www.kingoftheeth
er.com/postmortem.html. Accessed May 30, 2019.
[48] web3j. Transactions — web3j 4.1.0 documentation. https://web3j.
readthedocs.io/en/latest/transactions.html. Accessed Mar
30, 2017.
[49] GAVIN WOOD. Ethereum: A secure decentralised generalised transac-
tion ledger. https://ethereum.github.io/yellowpaper/paper
.pdf. Accessed Jun 13, 2019.
[50] Yi Zhou, Deepak Kumar, Surya Bakshi, Joshua Mason, Andrew Miller,
and Michael Bailey. Erays: reverse engineering ethereum’s opaque
smart contracts. In 27th {USENIX} Security Symposium ({USENIX}
Security 18), pages 1371–1385, 2018.
Appendix
7.1 Data formats of three types of transactions
and their associated receipts
TO
0x9795***
FROM 0x1249***
VALUE 0.65 Ether
DATA
GAS
PRICE
0x
1.20002x10-8
Ether (12.0002 
Gwei)
(empty)
TO
FROM 0x9795***
VALUE 0 Ether
DATA
bytecode of
contract
1.2x10-8 Ether 
(12 Gwei)
GAS
PRICE
TO
0x9528***
FROM 0x9795***
VALUE 0.0577307 Ether
DATA
0xc0406226
(methodID of 
function run())
1x10-8 Ether 
(10 Gwei)
GAS
PRICE
(a) Ether transfer
(b) Contract creation
(c) Contract call
0x9285***
0x1249***
0x9795***
TRANS
HASH
FROM
TO
GAS USED 21,000
CONTRACT 
ADDRESS
STATUS
null
0x1
0xa4c8***
TRANS
HASH
FROM
0x9795***
TO
(empty)
GAS USED 624,014
CONTRACT 
ADDRESS
STATUS
0x6be5***
0x1
0x4971***
0x9795***
0x9528***
TRANS
HASH
FROM
TO
GAS USED 417,124
CONTRACT 
ADDRESS
STATUS
null
0x1
(d) Receipt of Ether
transfer
(e) Receipt of Con-
tract creation
(f) Receipt of Con-
tract call
Figure 11: Three types of transactions supported on Ethereum.
7.2 Parameter and model selection for trans-
action clustering
As mentioned in Section 3.1, the parameter α and β indicate the importance
of structure similarity and timing closeness when measuring TG distance
Method
k-Means [32]
Agglomerative Hierarchecal [34]
DBSCAN [22]
Table 13: Performance comparison under different cluster model
accuracy
recall
time cost
parameters setting
0.95
0.83
0.89
0.83
0.97
0.76
84.93s
2h30min
2h27min
iteration number is 3; k is all the ﬁrst transaction in sequences split by a
10-hour time window
k is all the ﬁrst transaction in sequences split by a 10-hour time window
eps is 0.5; the minimal points of a cluster is 2
Source
PeckShield
PeckShield
PeckShield
PeckShield
PeckShield
Medium
4Hou
BCSEC
Aeternity
BitcoinTalk
Github
Reddit
Reddit
PeckShield
Medium
Medium
Medium
360
King of the
Ether
Throne
Reddit
Medium
Table 14: List of Dapp incidents reports.
Report URL
https://blog.peckshield.com/2018/04/22/batchOverflow/
Victim Dapp
BeautyChain(BEC)
MESH, UGToken(UGT), SmartMesh(SMT),
https://blog.peckshield.com/2018/04/25/proxyOverflow/
SmartMesh Token(SMART), MTC, First(FST), GG
https://blog.peckshield.com/2018/05/10/multiOverflow/
Token, CNY Token(CNYt)
Social Chain (SCA)
https://blog.peckshield.com/2018/08/18/replay/
SmartMesh(SMT), UGToken(UGT), First(FST), MTC
https://blog.peckshield.com/2018/08/14/unsafemath/
https://medium.com/coinmonks/an-inspection-on-ammbr-amr-bug-a5
3b4050d52
MovieCredits (EMVC)
Ammbr(AMR)
https://4hou.win/wordpress/?p=21704
https://bcsec.org/index/detail?id=157&tag=1
https:
//blog.aeternity.com/parity-multisig-wallet-hack-47cc507d964d
https://bitcointalk.org/index.php?topic=1400536.60
Ammbr(AMR), Beauty Coin (BEAUTY), Rocket Coin
(XRC), Social Chain (SCA)
Morph
Parity
Rubixi
https://github.com/ether-camp/virtual-accelerator/issues/8
HackerGold(HKG)
https://www.reddit.com/r/ethdev/comments/7x5rwr/tricked_by_a_hon
https://www.reddit.com/r/ethereum/comments/916xni/how_to_pwn_fom
eypot_contract_or_beaten_by/
o3d_a_beginners_guide
PrivateBank
Fomo3D
https://blog.peckshield.com/2018/07/24/fomo3d/
Fomo3D, RatScam
https://medium.com/@AnChain.AI/largest-smart-contract-attacks-
in-blockchain-history-exposed-part-1-93b975a374d0
https://medium.com/coinmonks/how-the-winner-got-fomo3d-prize-a
-detailed-explanation-b30a69b7813f
https://medium.com/@Beosin/there-is-only-one-truth-god-game-at
http://blogs.360.cn/post/Fairness_Analysis_of_Dice2win_EN.html
tack-analysis-ea4821d27cc3
Fomo3D, LastWinner, RatScam, FomoGame
Fomo3D
GodGame
Dice2Win
https://www.kingoftheether.com/postmortem.html
King of the Ether Throne
https://www.reddit.com/r/ethereum/comments/4ghzhv/governmentals_
https://medium.com/spankchain/we-got-spanked-what-we-know-so-f
1100_eth_jackpot_payout_is_stuck/
ar-d5ed3a0f38fe
GovernMental
SpankChain
(Deﬁnition 1). In our implementation, we analyzed the impact of various α
and β as shown in Table 15 on the ground-truth set, and chose the combination
of α and β (i.e., α = 0.9,β = 0.1) with the best performance.
Also, we compared the effectiveness of different clustering algorithms, i.e.,
k-Means, DBSCAN, Agglomerative Hierarchical, on our task. The results,
with pre-parameters required by cluster models, are shown in Table 13. We
observe that the clustering algorithm k-Means outperforms other clustering
algorithms in terms of accuracy and efﬁciency. In our study, we weight the
correctness of the results and use k-Means for transaction clustering.
Table 15: Performance comparison under different distance
weight
α
0.01
0.1
0.3
0.5
0.7
0.9
0.99
β
0.99
0.9
0.7
0.5
0.3
0.1
0.01
precision
0.97
0.97
0.97
0.97
0.95
0.95
0.96
recall
0.78
0.76
0.72
0.62
0.81
0.83
0.82
7.3 Data annotation
We manually examined transaction clusters to identify the adversary’s in-
tent and annotate their attack stage. Serving this purpose is the grounded
theory [33], a systematic methodology that constructs a concept through
methodical gathering and analysis of data in social science. More speciﬁ-
cally, we analyzed transaction clusters through the following three stages:
coding that identiﬁes the anchors (e.g., multiple contract creations and self-
destruction traces in a transaction, using the same contract to call several
Dapps, achieving signiﬁcant large proﬁt in one transaction, etc.) that enable
the key points of the annotation; code collection and iteration that iteratively
groups anchors and aligns them to the adversary’s operational intents through
comparison [23] (e.g., a transaction cluster shows the operational intent of
the attack propagation, if their execution traces consist of multiple contract
creations and self-destruction when calling several different Dapps); Attack
stage annotation that annotate transaction clusters’ attack stage based on
adversary’s operational intents. Throughout the analysis, annotators inten-
sively discussed with each other to ensure that all transaction clusters were
correctly understood and evaluated. In total, it took 5 human labors around
two weeks for data annotation.