3.q.3, there exist PPT adversaries
B⋆
3.q.2 and B3.q.3 such that AdvG3.q.2(B3.q.2) = (p2m +1)n· AdvG⋆
3.q.2) and AdvG3.q.3(B3.q.3) =
(p2m + 1)n · AdvG⋆
3.q.2 and G⋆
3.q.3 are selective variants of games
G3.q.2 and G3.q.3 respectively (see Figure 6.4). Note that those advantage are conditioned on
the fact that the output of the q’th fresh query to RO is used by OEnc.
In Step 2, we show that for all PPT adversaries B⋆, we have AdvG⋆
(B⋆),
where again, these advantages are conditioned on the fact that the output of the q’th fresh
query to RO is used by OEnc.
3.q.3), where the games G⋆
(B⋆) = AdvG⋆
(B⋆
(B⋆
3.q.3
3.q.2
3.q.3
3.q.2
3.q.2 playing against G⋆
3.q.2, such that AdvG3.q.2(B3.q.2) =
Step 1. We build a PPT adversary B⋆
(p2m + 1)n · AdvG⋆
Adversary B⋆
3.q.2).
(B⋆
3.q.2
3.q.2. That is, the guess zi is either a pair of vectors (x0
3.q.2 ﬁrst guesses for all i ∈ [n], zi ←R Z2m
p ∪{⊥}, which it sends to its selective
game G⋆
p queried to OEnc, or
⊥, which means no query to OEnc. Then, it simulates A’s view using its own oracles. When
B⋆
3.q.2 guesses successfully (call E that event), it simulates B3.q.2’s view exactly as in G3.q.2.
Since event E happens with probability (p2m + 1)−n, we obtain:
i ) ∈ Z2m
i , x1
AdvG⋆
3.q.2
3.q.2)
(B⋆
=(cid:12)(cid:12)(cid:12) Pr[1 ← G⋆
|
{z
|
= Pr[E] · | Pr[1 ← G3.q.2]|
= (p2m + 1)−n · AdvG3.q.2(B3.q.2)
3.q.2|E]
}
=Pr[1←G3.q.2]
· Pr[E] + Pr[1 ← G⋆
3.q.2|¬E]
}
{z
=0
· Pr[¬E]
Adversary B3.q.3 is built similarly. As for prior reductions, we use the fact that Condition
1 and Extra condition from Deﬁnition 25 of one-AD-IND-weak security, and the validity of
the guess {zi}i∈[n], can be checked eﬃciently.
122
Chapter 6. Multi-Client Inner Product Functional Encryption
Step 2. We assume the values (zi)i∈[n] sent by B⋆ are consistent, that is, they don’t make the
game end and return 0. We also assume Condition 1 and Extra condition from Deﬁnition 25
of one-AD-IND-weak security are satisﬁed. We call E this event.
3.q.2 and G⋆
We show that games G⋆
prove so, we use the fact that the following are identically distributed: (Si)i∈[n],zi=(x0
(cid:16)Si + γ(x1
all i ∈ [n]: Si ←R Zm×(k+1)
(note that this is not true in adaptive games). Thus, we can re-write Si into Si+γ(x1
without changing the distribution of the game.
3.q.3 are identically distributed, conditioned on E. To
i ) and
\ {0} such that A⊤a⊥ = 0, and for
, and γ ←R Zp. This is true since the Si are independent of the zi
i )(a⊥)⊤
i )(a⊥)⊤(cid:17)i∈[n],zi=(x0
, where a⊥ ←R Zk+1
i − x0
i −x0
i ,x1
i )
i ,x1
p
p
We now take a look at where the extra terms γ(x1
i )(a⊥)⊤ actually appear in the
adversary’s view. They do not appear in the output of OCorrupt, because we assume event E
holds, which implies for all i ∈ [n], either zi = ⊥, and there is no extra term; or zi = (x0
i , x1
i ),
but by Condition 1, we must have x0
i , which means there is again no extra term.
i − x0
i = x1
They appear in OKeygen(y) as
dky = Xi∈[n]
S⊤
i yi + a⊥ · γPi:zi=(x0
i ,x1
i )(x1
i − x0
i )⊤yi ,
where the gray term equals 0 by Condition 1 and Extra condition from Deﬁnition 25 of
one-AD-IND-weak security.
i − x0
Finally, the extra terms γ(x1
i )(a⊥)⊤ only appear in the output of the queries to OEnc
which use [uℓ] computed on the q’th query to RO, since for all others, the vector [uℓ] lies in the
span of [A], and A⊤a⊥ = 0. For the former, we have [c] := [Siuℓ + x0
i )(a⊥)⊤uℓ].
Since u⊤
i )(a⊥)⊤uℓ].
ℓ a⊥ 6= 0, the above [c] is identically distributed to [Siuℓ + x1
Finally, reverting these statistically perfect changes, we obtain that [c] is identically distributed
to [Siuℓ + x1
i + γ(x1
i + γ(x1
i − x0
i − x0
i ], as in game G⋆
3.q.3.
Thus, when event E happens, the games are identically distributed. When ¬E happens,
the games both return 0. Thus, we have
3.q.2
AdvG⋆
(B⋆) = AdvG⋆
this transition is the reverse of the transition from
From game G3.q.3 to game G3.q+1.1:
game G3.q.1 to game G3.q.2, namely, we use the Dk(p)-MDDH assumption to switch back the
distribution of [uℓ] computed on the q’th (fresh) query to RO from uniformly random over
Gk+1 (conditioned on the fact that u⊤
ℓ a⊥ 6= 0) to uniformly random in the span of [A]. We
obtain a PPT adversary B3.q.3 such that
(B⋆).
3.q.3
AdvG3.q.3(A) − AdvG3.q+1.1(A) ≤ AdvDk(p)-mddh
G,B3.q.3
(λ) +
1
p
.
From game G3.Q+1.1 to G4: First, we switch the distribution of all the vectors [uℓ] output by
the random oracle to uniformly random over Gk+1, using the Dk(p)-MDDH simultaneously for
all queried labels ℓ, using the random self reducibility of the MDDH assumption (cf Lemma 1).
Then, we using the random oracle model to argue that the output of the real hash function
H are distributed as the output of a truly random function computed on the ﬂy (this is the
reserve transition than transition from gma eG0 to game G1). We obtain a PPT adversary B4
such that:
AdvG3.Q+1.1(A) − G4 ≤ AdvDk(p)-mddh
.
Putting everything together, we obtain a PPT adversary B such that
+
Advone-AD-IND-weak
(λ) ≤ (2Q + 2) · AdvDk(p)-mddh
1
p − 1
2Q
p
(λ) +
(λ) +
MCF E,A
G,B4
G,B
where Q denotes the number of calls to the random oracle.
2
p − 1
,
6.1 MCFE with one-AD-IND-weak security
123
Games (G⋆
3.q.2, G⋆
3.q.3)q∈[Q]:
p ∪ {⊥})i∈[n](cid:1) ← A(1λ, 1n)
(cid:0)state, (zi ∈ Z2m
S := ∅, G := (G, p, P ) ← GGen(1λ), pk := G, A ←R Dk(p), a⊥ ←R Zk+1
all i ∈ [n], Si ←R Zm×(k+1)
α ← AOEnc(·,·,·),OKeygen(·),OCorrupt(·),RO(·)(pk, state).
If ∃i ∈ [n] \ S such that zi 6= ⊥, the game ends, and returns 0.
Return α if Condition 1 and Extra condition from Deﬁnition 25 of one-AD-IND-weak security
are satisﬁed, 0 otherwise.
\{0} s.t. A⊤a⊥ = 0. For
.
p
p
RO(ℓ):
[uℓ] := [Arℓ], with rℓ := RF′(ℓ)
On the q’th (fresh) query: [uℓ] := [A · RF′(ℓ) + RF′′(ℓ) · a⊥]
Return [uℓ].
// G⋆
3.q.2, G⋆
3.q.3
OEnc(i, (x0, x1), ℓ):
[uℓ] := RO(ℓ),
[c] := [x0 + Siuℓ]
If [uℓ] is computed on the j’th (fresh) query to RO with j < q: [c] := [x1 + Siuℓ].
If [uℓ] is computed on the q’th (fresh) query to RO, then:
• if (x0, x1) 6= zi, the game ends and returns 0.
• otherwise, [c] :=h x0 + x1 + Siuℓi, S := S ∪ {i}.
Return [c].
// G⋆
3.q.2 , G⋆
3.q.3
i yi.
OKeygen(y):
ReturnPi S⊤
OCorrupt(i):
Return Si.
//G⋆
3.q.2, G⋆
3.q.3
// G⋆
3.q.2, G⋆
3.q.3
3.q.2 and G⋆
3.q.3, with q ∈ [Q], for the proof of Theorem 15. Here, RF, RF′
Figure 6.4: Games G⋆
are random functions onto Gk+1, and Zk
p, respectively, that are computed on the ﬂy. In each
procedure, the components inside a solid (gray) frame are only present in the games marked
by a solid (gray) frame.
124
Chapter 6. Multi-Client Inner Product Functional Encryption
From one to many ciphertext for MCFE
In this section, we add an extra layer of public-key, single-input inner product FE on top of the
inner product MCFE from Section 6.1, to remove the restriction of having a unique challenge
ciphertext per client and per label. Our construction works for any public-key single-input
inner product FE that is compatible with the inner product MCFE from Section 6.1, that is,
an FE whose message space is the ciphertext space of the MCFE. Namely, we use a single-input
FE whose encryption algorithm can act on vectors of group elements, in Gm, where G is a
prime-order group, as opposed to vectors over Z. Decryption recovers the inner product in
the group G, without any restriction on the size of the input of the encryption and decryption
key generation algorithms. The message space of the FE is Gm, for some dimension m, its
decryption key space is Zm
p ,the
decryption of the encryption of [x] together with the functional decryption key associated with
y yields [x⊤y].
p , where p is the order of G, and for any [x] ∈ Gm, y ∈ Zm
For correctness, we exploit the fact that decryption of the MCFE from Section 6.1 computes
the inner product of the ciphertext together with the decryption keys. For security, we exploit
the fact that the MCFE is linearly homomorphic, in the sense that given an input x, one can
publicly maul an encryption of x′ into an encryption of x + x′. This is used to bootstrap the
security from one to many challenge ciphertexts per (user,label) pair, similarly to the security
proof in Chapter 4 in the context of multi-input inner product FE. In fact, the construction
in Chapter 5 uses a one-time secure multi-input FE as inner layer, and a single-input inner
product FE as outer layer, while we use an inner product MCFE as inner layer, and a single-
input inner product FE as outer layer.
Before presenting our construction in Figure 6.5, we remark that the MCFE from Section 6.1
satisﬁes the following properties.
• Linear Homomorphism of ciphertexts: for any i ∈ [n], xi, x′
i ∈ Zm
p , and any label ℓ, we
have [ci] + [x′
i] = Enc(pk, eki, xi + x′
i, ℓ), where [ci] = Enc(pk, eki, xi, ℓ).
• Deterministic Encryption. In particular, together with the linear homomorphism of ci-
p and any label ℓ, we have: Enc(pk, eki, xi, ℓ)−
phertexts, this implies that for any xi, x′
Enc(pk, eki, x′
i ∈ Zm
i, ℓ) = [xi − x′
i].
Correctness. By correctness of IPFE, we have for all i ∈ [n], and any label ℓ:
i yi. Thus, Pi[αℓ,i] = [hy, xi] + [uℓ]⊤(Pi S⊤
[hyi, xi + Siuℓi] = [hyi, xii] + [uℓ]⊤S⊤
i yi, we havePi[αℓ,i] = [hy, xi] + [uℓ]⊤d, hence [α] = [hx, yi].
d =Pi S⊤
We know hx, yi =Pihxi, yii ≤ n·m·X·Y , which is bounded by a polynomial in the security
parameter. Thus, decryption can eﬃciently recover the discrete logarithm: Pihxi, yii mod p =
Pihxi, yii, where the equality holds sincePihxi, yii ≤ n · m · X · Y ≪ p.
[αℓ,i] =
i yi). Since
Security proof.
Theorem 16: many-AD-IND-weak security of MCFE
The scheme MCFE from Figure 6.5 is many-AD-IND-weak secure, assuming the under-
lying single-input FE IPFE is many-AD-IND secure, and using the fact that the scheme
MCFE ′ from Figure 6.2 is one-AD-IND-weak secure.
Proof overview. The proof is similar than the proof of Theorem 10, in Chapter 4, which
proves the many-time security of our multi-input FE from its one-time security. In the one-
AD-IND-weak security game, the adversary only queries OEnc on one input (i, (x0
i ), ℓ) per
i , x1
6.2 From one to many ciphertext for MCFE
125
n