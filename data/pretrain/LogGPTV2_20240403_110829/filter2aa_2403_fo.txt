.text:0000DB05           
jmp     decrypt_end_print_message 
... 
; this name I gave to label: 
.text:0000D9B6 decrypt_end_print_message:  
   ; CODE XREF: sync_sys+29Dj 
.text:0000D9B6                             
   ; sync_sys+2ABj 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 78 章  加  密  狗 
745 
.text:0000D9B6           
mov     eax, [ebp+var_18] 
.text:0000D9B9           
test     eax, eax 
.text:0000D9BB           
jnz      short loc_D9FB 
.text:0000D9BD           
mov      edx, [ebp+var_C] ; key 
.text:0000D9C0           
mov      ecx, [ebp+var_8] ; string 
.text:0000D9C3           
push     edx 
.text:0000D9C4           
push     20h 
.text:0000D9C6           
push     ecx 
.text:0000D9C7           
push     18h 
.text:0000D9C9           
call     err_warn 
.text:0000D9CE           
push     0Fh 
.text:0000D9D0           
push     190h 
.text:0000D9D5           
call     sound 
.text:0000D9DA           
mov      [ebp+var_18], 1 
.text:0000D9E1           
add      esp, 18h 
.text:0000D9E4           
call     pcv_kbhit 
.text:0000D9E9           
test     eax, eax 
.text:0000D9EB           
jz       short loc_D9FB 
... 
; this name I gave to label: 
.data:00401736 encrypted_error_message2 db 74h, 72h, 78h, 43h, 48h, 6, 5Ah, 49h, 4Ch, 2 dup(47h) 
.data:00401736   
     db 51h, 4Fh, 47h, 61h, 20h, 22h, 3Ch, 24h, 33h, 36h, 76h  
.data:00401736   
     db 3Ah, 33h, 31h, 0Ch, 0, 0Bh, 1Fh, 7, 1Eh, 1Ah 
可见，破解加密狗的工作十分简单：我们只需要找到相关的 CMP 指令，把它后面的转移指令替换为
无条件转移指令即可。当然，编写自制的 SCO OpenServer 驱动程序也不失为一种方法。 
解密错误信息 
我们还能够破解源程序中的错误信息。程序里 err_warn()函数所采用的解密算法非常简单。 
指令清单 78.1  Decryption function 
.text:0000A44D         
mov     esi, [ebp+arg_C] ; key 
.text:0000A450         
mov     edx, [ebp+arg_4] ; string 
.text:0000A453 loc_A453: 
.text:0000A453         
xor     eax, eax 
.text:0000A455         
mov     al, [edx+edi] ; load encrypted byte 
.text:0000A458         
xor     eax, esi       ; decrypt it 
.text:0000A45A         
add     esi, 3          ; change key for the next byte 
.text:0000A45D         
inc     edi 
.text:0000A45E         
cmp     edi, ecx 
.text:0000A460         
mov     [ebp+edi+var_55], al 
.text:0000A464         
jl      short loc_A453 
由此可见，程序不仅向解密函数传递了加密后的字符串，而且向它传递了加密密钥： 
.text:0000DAF7 error:  
    ; CODE XREF: sync_sys+255j 
.text:0000DAF7   
    ; sync_sys+274j ... 
.text:0000DAF7   
mov     [ebp+var_8], offset encrypted_error_message2 
.text:0000DAFE   
mov     [ebp+var_C], 17h ; decrypting key 
.text:0000DB05   
jmp     decrypt_end_print_message 
... 
; this name we gave to label manually: 
.text:0000D9B6 decrypt_end_print_message:   
    ; CODE XREF: sync_sys+29Dj 
.text:0000D9B6   
    ; sync_sys+2ABj 
.text:0000D9B6   
mov     eax, [ebp+var_18] 
.text:0000D9B9   
test    eax, eax 
.text:0000D9BB   
jnz     short loc_D9FB 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
746 
逆向工程权威指南（下册） 
.text:0000D9BD   
mov     edx, [ebp+var_C] ; key 
.text:0000D9C0   
mov     ecx, [ebp+var_8] ; string 
.text:0000D9C3   
push     edx 
.text:0000D9C4   
push     20h 
.text:0000D9C6   
push    ecx 
.text:0000D9C7   
push    18h 
.text:0000D9C9   
call    err_warn 
这就是简单的 XOR 算法：每个字节都与密钥进行 XOR 运算，而且每解密一个字节密钥就增加 3。 
为了验证这个猜想，我专门编写了一个 Python 脚本程序： 
指令清单 78.2  Python 3.x 
#!/usr/bin/python 
import sys 
msg=[0x74, 0x72, 0x78, 0x43, 0x48, 0x6, 0x5A, 0x49, 0x4C, 0x47, 0x47, 
0x51, 0x4F, 0x47, 0x61, 0x20, 0x22, 0x3C, 0x24, 0x33, 0x36, 0x76, 
0x3A, 0x33, 0x31, 0x0C, 0x0, 0x0B, 0x1F, 0x7, 0x1E, 0x1A] 
key=0x17 
tmp=key 
for i in msg: 
        sys.stdout.write ("%c" % (i^tmp)) 
        tmp=tmp+3 
sys.stdout.flush() 
它解密出来的字符串正是“check security device connection”。 
程序还用到了其他的加密字符串和相应密钥。然而我们不需要原始密钥就可以进行密文解密。首先，
密钥实际只有 1 个字节。解密核心的 XOR 指令以字节为操作单位。其次，虽然密钥存储于 ESI 寄存器，
但是它只用了 ESI 寄存器地址最低的那个字节。即使密钥大于 255，但是参与演算的密钥还是不会大于 1
个字节的值。 
最终，我们可以使用 0～255 之间的密钥暴力破解加密字符串。与此同时，我们要排除那些含有控制字
符的解密结果。 
指令清单 78.3  Python 3.x 
#!/usr/bin/python 
import sys, curses.ascii 
msgs=[ 
[0x74, 0x72, 0x78, 0x43, 0x48, 0x6, 0x5A, 0x49, 0x4C, 0x47, 0x47, 
0x51, 0x4F, 0x47, 0x61, 0x20, 0x22, 0x3C, 0x24, 0x33, 0x36, 0x76, 
0x3A, 0x33, 0x31, 0x0C, 0x0, 0x0B, 0x1F, 0x7, 0x1E, 0x1A], 
[0x49, 0x65, 0x2D, 0x63, 0x76, 0x75, 0x6C, 0x6E, 0x76, 0x56, 0x5C, 
8, 0x4F, 0x4B, 0x47, 0x5D, 0x54, 0x5F, 0x1D, 0x26, 0x2C, 0x33, 
0x27, 0x28, 0x6F, 0x72, 0x75, 0x78, 0x7B, 0x7E, 0x41, 0x44], 
[0x45, 0x61, 0x31, 0x67, 0x72, 0x79, 0x68, 0x52, 0x4A, 0x52, 0x50, 
0x0C, 0x4B, 0x57, 0x43, 0x51, 0x58, 0x5B, 0x61, 0x37, 0x33, 0x2B, 
0x39, 0x39, 0x3C, 0x38, 0x79, 0x3A, 0x30, 0x17, 0x0B, 0x0C], 
[0x40, 0x64, 0x79, 0x75, 0x7F, 0x6F, 0x0, 0x4C, 0x40, 0x9, 0x4D, 0x5A, 
0x46, 0x5D, 0x57, 0x49, 0x57, 0x3B, 0x21, 0x23, 0x6A, 0x38, 0x23, 
0x36, 0x24, 0x2A, 0x7C, 0x3A, 0x1A, 0x6, 0x0D, 0x0E, 0x0A, 0x14, 
0x10], 
[0x72, 0x7C, 0x72, 0x79, 0x76, 0x0, 
0x50, 0x43, 0x4A, 0x59, 0x5D, 0x5B, 0x41, 0x41, 0x1B, 0x5A, 
0x24, 0x32, 0x2E, 0x29, 0x28, 0x70, 0x20, 0x22, 0x38, 0x28, 0x36, 
0x0D, 0x0B, 0x48, 0x4B, 0x4E]] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 78 章  加  密  狗 
747 
def is_string_printable(s): 
    return all(list(map(lambda x: curses.ascii.isprint(x), s))) 
cnt=1 
for msg in msgs: 
        print ("message #%d" % cnt) 
        for key in range(0,256): 
                result=[] 
                tmp=key 
                for i in msg: 
                        result.append (i^tmp) 
                        tmp=tmp+3 
                if is_string_printable (result): 
                        print ("key=", key, "value=", "".join(list(map(chr, result)))) 
        cnt=cnt+1 
上述程序的运行结果如下。 
指令清单 78.4  Results 
message #1 
key= 20 value= 'eb^h%|''hudw|_af{n~f%ljmSbnwlpk 
key= 21 value= ajc]i"}cawtgv{^bgto}g"millcmvkqh 
key= 22 value= bkd\j#rbbvsfuz!cduh|d#bhomdlujni 
key= 23 value= check security device connection 
key= 24 value= lifbl!pd|tqhsx#ejwjbb!'nQofbshlo 
message #2 
key= 7 value= No security device found 
key= 8 value= An#rbbvsVuz!cduhld#ghtme?!#!'!#! 
message #3 
key= 7 value= BkugasLkvw&fgpgag^uvcrwml. 'mwhj 
key= 10 value= Ol!td'tMhwx'efwfbf!tubuvnm!anvok 
key= 11 value= No security device station found 
key= 12 value= In#rjbvsnuz!{duhdd#r{'whho#gPtme 
message #4 
key= 14 value= Number of authorized users exceeded 
key= 15 value= Ovlmdq!hg#'juknuhydk!vrbsp!Zy'dbefe 
message #5 
key= 17 value= check security device station 
key= 18 value= `ijbh!td`tmhwx'efwfbf!tubuVnm!'! 
虽然出现了人类语言之外的字符串，但是我们还是能够找到英语字符串。 
另外，因为程序采用的解密算法是非常简单的 XOR 算法，所以它的加密函数也不会复杂到哪去。如
果有必要的话，我们甚至可以用它的算法加密自己的字符串，然后把自制的密文放在程序里面。 
78.3  例 3: MS-DOS  
本例研究的是一款 1995 年研发的 MS-DOS 程序，联络不上开发商了。 
在从前的那个坚守 DOS 阵地的时代，所有的 MS-DOS 程序基本都在 16 位的 8086 或者 80286 CPU 上
运行。因此大批的程序都是 16 位程序。这种程序的指令与本书介绍过的汇编指令大体相同，只是寄存器是
16 位寄存器、而且指令集略微小些罢了。 
MS-DOS 系统没有系统驱动程序，全部程序都可以直接访问硬件端口。故而程序中大量出现了 OUT/IN
指令。就当今的操作系统来说，基本上只有驱动程序才会使用这些指令，而且应用程序已经不能直接访问
硬件端口了。 
在当时的技术条件下，访问加密狗的 MS-DOS 程序必须直接访问 LPT 打印端口。那么我们就搜索这
些端口操作指令好了： 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
748 
逆向工程权威指南（下册） 
seg030:0034               out_port proc far ; CODE XREF: sent_pro+22p 
seg030:0034                           
 ; sent_pro+2Ap ... 
seg030:0034 
seg030:0034                arg_0     =byteptr 6 
seg030:0034 
seg030:0034 55           
  push   bp 
seg030:0035 8B EC        
  mov    bp, sp 
seg030:0037 8B 16 7E E7 
  mov    dx, _out_port ; 0x378 
seg030:003B 8A 46 06    
  mov    al, [bp+arg_0] 
seg030:003E EE           
  out    dx, al 
seg030:003F 5D           
  pop    bp 
seg030:0040 CB           
  retf 
seg030:0040               out_port endp 
上述指令的标签名称全部是笔者自行添加的。我们发现，只有下面这个函数调用了 out_port()函数： 
seg030:0041               sent_pro proc far ; CODE XREF: check_dongle+34p 
seg030:0041 
seg030:0041               var_3     = byte ptr -3 
seg030:0041               var_2     = word ptr -2 
seg030:0041               arg_0     = dword ptr  6 
seg030:0041 
seg030:0041 C8 04 00 00            enter    4, 0 
seg030:0045 56                   
 push      si 
seg030:0046 57                   
 push      di 
seg030:0047 8B 16 82 E7          mov      dx, _in_port_1 ; 0x37A 
seg030:004B EC                   
 in       al, dx 
seg030:004C 8A D8                 mov      bl, al 
seg030:004E 80 E3 FE              and      bl, 0FEh 
seg030:0051 80 CB 04              or      bl, 4 
seg030:0054 8A C3                 mov      al, bl 
seg030:0056 88 46 FD              mov      [bp+var_3], al 
seg030:0059 80 E3 1F              and      bl, 1Fh 
seg030:005C 8A C3                 mov       al, bl 
seg030:005E EE                   
 out      dx, al 
seg030:005F 68 FF 00              push      0FFh 
seg030:0062 0E                   
 push      cs 
seg030:0063 E8 CE FF              call      near ptr out_port 
seg030:0066 59                   
 pop       cx 
seg030:0067 68 D3 00              push      0D3h 
seg030:006A 0E                   
 push      cs 
seg030:006B E8 C6 FF              call      near ptr out_port 
seg030:006E 59                   
 pop       cx 
seg030:006F 33 F6                 xor       si, si 
seg030:0071 EB 01                 jmp      short loc_359D4 
seg030:0073 
seg030:0073                loc_359D3: ; CODE XREF: sent_pro+37j 
seg030:0073 46               
inc       si 
seg030:0074 
seg030:0074                loc_359D4: ; CODE XREF: sent_pro+30j 
seg030:0074 81 FE 96 00         cmp       si, 96h 
seg030:0078 7C F9               
jl        short loc_359D3 
seg030:007A 68 C3 00            
push       0C3h 
seg030:007D 0E                   
push       cs 
seg030:007E E8 B3 FF            
call      near ptr out_port 
seg030:0081 59                   
pop       cx 
seg030:0082 68 C7 00            
push       0C7h 
seg030:0085 0E                   
push       cs 
seg030:0086 E8 AB FF            
call      near ptr out_port 
seg030:0089 59                 
pop       cx 
seg030:008A 68 D3 00           
push       0D3h 
seg030:008D 0E           
push       cs 
seg030:008E E8 A3 FF        
call      near ptr out_port 
seg030:0091 59                
pop       cx 
seg030:0092 68 C3 00        
push      0C3h 
seg030:0095 0E    
push       cs 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 78 章  加  密  狗 
749 
seg030:0096 E8 9B FF         