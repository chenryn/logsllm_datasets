---
## Page 292
解决方案
使用多选结构
这个问题的简单解答是在你想要匹配的不同单词之间使用多选操作：
\b(?:one|two|three) \b
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
关于匹配相似单词的更复杂例子，请参考实例5.3。
JavaScript解答示例
var subject ='One times two plus one equals three.';
var regex = /\b(?:one|twolthree)\b/gi;
subject.match(regex);
//This function does the same thing but accepts an array of words to
// with a backslash before searching.
function match_words (subject, words){
var regex_metachars =/[(){}[\]*+?.\\^$1,\-]/g;
for (var i=0;i得到相同的效果。每个单词则会匹配其自身。
因为正则引擎会尝试从左向右匹配该列表中的每个单词，所以你可能会发现把目标
文本中最可能会被找到的单词放到列表的前面位置会在性能方面有较小的提高。因
为单词的两端都是用单词边界来围住的，所以它们可以按照任何顺序出现。如果没
276第5章
www.TopSage.com
---
## Page 293
有单词边界，那么就有必要把长的单词放到前面；否则，你在搜索cawelawesome)
的时候就会永远也不可能找到“awesome”。这个正则表达式总是会在单词的开始处
先匹配到“awe”。
注意这个正则表达式的意图是展示如何按照通用的方式匹配一个单词列表中的任意一
个单词。因为这个例子中的（two>和（three>都以相同的字母开头，所以你还可以把这个
正则式改写成）以确保它们只会匹配整个单词。它们
采用的模式中则使用了几种不同方式来在它们匹配的单词中允许出现不同变体。
下面我们来仔细介绍一下每个正则表达式。
Color或colour
这个正则表达式会匹配color或者colour，但是不会在colorblind中产生匹配。它使用
278
第5章
www.TopSage.com
---
## Page 295
了量词来使得位于该量词之前的“u”成为可选的。像?>这样的量词与许多人更为
熟悉的通配符的工作原理并不相同。相反的，它们会绑定到紧跟在它之前的元素之上，
这个元素可以是单个记号（在这个例子中，就是字面字符“u”）或者用圆括号围起来
的一组记号。量词?>会重复之前的元素0次或1次。正则引擎首先会尝试匹配该量词
绑定的元素，如果它无法产生匹配，那么引擎就会在不匹配它的情况下继续执行。允
许0次重复的任意量词实际上也就会把它之前的元素变成可选的，而这正是我们在这
里想要的。
Bat、cat或rat
这个正则表达式使用了-个字符类来匹配“b”、“c”或“r”，然后是两个字面字符“at”。要
完成同样的任务，你也可以使用或者bbat\b/bcatib\brat\ib>。
然而，如果在所充许的匹配之间的区别只是在一个学符列表中进行选择，那么你最好
还是使用字符类。这不仅是因为字符类会提供更加简洁易读的语法（你可以去掉所有
的垂置竖线，并且可以使用类似A～Z这样的范围)，而且大多数正则引擎还会对字符
类提供非常好的优化。使用垂直竖线的多选结构要求引擎使用在计算上代价很高的回
溯算法，而字符类则只使用非常简单的搜索算法。
但是，还是有需要注意的地方。字符类属于最经常被错误使用的正则表达式特性之一。
很可能这是因为它们并没有很好的文档，或者是因为有些读者忽略了其中的细节。不
管原因如何，一定不要让你自已犯同样的薪手错误。字符类只能从在指定的学符中一
次匹配一个字符一从无例外。
下面是字符类最经常被用错的两种方式。
把单词放到字符类中
当然，如果你使用[cat]{3}>也能匹配到cat，但是它还会匹配act、世，以及任意由列
表中字符组成的三字符的组合形式。这在诸如[^cat这样的否定字符类之上也会产生
同样的效果，它会匹配不是c、a或t的任意单个字符。
试图在字符类中使用多选操作符
根据定义，字符类允许在所给出的字符列表之间进行选择。[alblc]>会匹配集合“abc”
中的一个字符，而这很可能并不是你所想要的。即使它是你想要的，那么这个字符类
中也包含了一个冗余的垂直竖线。
关于如何正确和有效使用字符类的更多详细信息，请参考实例2.3。
以“phobia”结尾的单词
与上一个正则表达式一样，这个正则式同样使用了一个量词来提供它所匹配字符串中的
变化形式。例如，这个正则表达式会匹配arachnophobia和hexakosioihexekontahexaphobia，
单词、文本行和特殊字符279
www.TopSage.com
---
## Page 296
而且因为允许0次重复，所以正则式也会匹配phobia。如果你想要在后缀“phobia”之
前至少应该有一个字符，那么可以把*改成（十》。
Steve、Steven或Stephen
）
的形式）会对多选操作符的作用范围进行限制。在该分组的第一个选择中使用量词
则会把它之前的字符变成可选的。与等价的相比，这样做
会提高效率（和简洁度）。同样的原则可以用来解释为什么把字面字符串Ste）放到在
正则表达式的前面，而不是采用或者\bSteve\b\bSteven\b/\
bStephen\b的形式被重复3次。有些回溯的正则表达式引擎并没有聪明到能够推出来后
面这两个正则式匹配到的任意文本都必须以Ste开头。相反地，当引擎逐步遍历目标字
符串查找匹配的时候，它会先查找一个单词边界，然后检查随后的字符是不是一个S。
如果不是，那么引擎必须在尝试正则表达式中的所有可选的路径之后才会继续，并在
字符串中的下一个位置重复这样的检查。虽然对于人来说很容易就可以看出这样做是
在浪费精力（因为正则式中的所有可选路径都是以“Ste”开头的），但是正则引擎无法
知道这个道理。而如果你把正则式写成<\bSte(?:ven?lphen)\b），那幺正则引擎马上就会
意识到它不可能匹配不以这三个字符开头的任何字符串。
关于回溯的正则表达式引擎的详细讨论，请参考实例2.13。
"regularexpression”的变体
本实例中的这最后-一个例子里用到了多选结构、字符类和量词，以匹配术语“regular
expression”的任意常见变体。由于这个正则表达式一眼看去可能有些难懂，我们来把
它进行分解，介绍其中的每个组成部分。
下面给出的正则式使用了宽松排列选项，这在JavaScript中是不支持的。因为在宽松排
列模式中空白都会被忽略，所以字母的空格字符都使用反斜杠进行了转义：
\b
#判断一个单词边界位置
reg
#匹配"reg"
(?:
#分组但是不捕获..
ular\
匹配"ular"
expressions?
#
匹配"expression"或"expressions"
#
或者...
ex
#
匹配“ex"
(?:
分组但是不捕获...
sd
#
匹配"p"或"ps"
1
或者...
e
匹配"e"
[sn]
#
匹配集合"sn"中的-个字符
非捕获分组的结束
？
重复之前的分组0次或1次
280
第5章
www.TopSage.com
---
## Page 297
非捕获分组的结束
\b
判断一个单词边界位置
正则选项：宽松排列，不区分大小写
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
上述模式会匹配如下的7个字符串中的任意一个：
regular_expressions
regular_expression
regexps
regexp
regexes
regexen
regex