delete (@pages[§sb_dev]) 
END
clear (Breason) 
clear (8start) 
This populates @reason to map the reason identifiers to human-readable strings. The time during
write-back is measured, keyed on the device, and all details are printed in the writeback_written
tracepoint. The page count is determined by a drop in the args->nr_pages argument, following
how the kernel accounts for this (see the wb_writeback() source in fs/fs-writeback.c).
8.3.18 dcstat
dcstat(8)2° is a BCC and bpftrace tool that shows directory entry cache (dcache) statistics. The
following shows dcstat(8) from BCC, on a 36-CPU production Hadoop instance:
dcstat
TIME
REFS/s
SL0M/s
MISS/s
HIT§
22:48:20:
661815
27942
20814
96.86
22 :48 : 21 :
540677
87375
80708
85.07
29 Origin: I first created a similar tool caled dnlcstat on 10-Mar-2004 to instrument the Solaris directory name lookup
csche, using the kernel Kstat statistis. I crested the BCC dcstat(8) n 9-feb-2016, and the bpfrace version for this
book on 26-Mar-2019.
---
## Page 356
8.3 BPF Tools
319
22 : 48 : 22 :
271719
4042
914
99 .66
22:48:23:
434353
4765
37
99.99
22:48:24:
766316
5860
607
99 . 92
22 :48 : 25 :
567078
7866
2.279
99. 60
22 :48 : 26 :
556771
26845
20431
96.33
22 : 48 :27 :
Z66855
4095
747
L8°66
22:48:28:
299356
3785
105
99 . 96
[..-]
This output shows hit ratios of over 99%, and a workload of over 500k references per second. The
columns are:
*REFS/s: dcache references.
•SLOW/s: Since Linux 2.5.11, the dcache has an optimization to avoid cacheline bouncing
during lookups of common entries (°/*, */usr°) [88]. This column shows when this
optimization was not used, and the dcache lookup took the °slow" path.
• MISS/s: The dcache lookup failed. The directory entry may still be memory as part of the
page cache, but the specialized dcache did not return it.
•HIT%: Ratio of hits to references.
sog saqosdanx pue ‘uooung pauaq Osegdnxoot ag suoumnsu o saqody Susn q sxom s
d_lookup0. The overhead of this tool may become noticeable depending on the workload, since
these functions can be frequently called as seen in the example output. Test and quantify in a lab
environment.
BCC
Command line usage:
dcstat [interval [count]]
This is modeled on other traxditional tools (e.g., vmstat(1)
bpftrace
Example output from the bpftrace version:
destat.bt
Attach.ing 4 probes...
Tracing dcache lookups..
H1t Ctr1=C to end.
REFS
HISSES
HIT
234096
16111
931
495104
36714
92
461846
36543
924
460245
36154
92
[..-]
---
## Page 357
320
Chapter S File Systems
Source code:
#1/usx/local/bin/bpEtrace
BEGIX
1
printf(*7raeing dcache 1ookups... 8It Ctz1-C to end. ,n*)J
printf(*&10s 10s 5s\n", "REFs*, *MISSEs*, *HIT*)
kprobe:lcokup_fast ( @hits++;1
kzetpxobe:d_1ookup /xetva1 == 0/ [ Bnl sses++=)
Interval:s:1
Srefs = @hlts + @nisses;
$percent = $refs > 0 ? 100 * @hits / $refs 1 0;
printf(*s10d s10d 44dss,n*, $refs, @n1sses, $percent);
clear (8hits) 
clear (8nisses) 
END
clear (8hits) :
clear (8nisses)
This uses a ternary operator to avoid a divide-by-zero condition, in the unlikely case that there
were zero hits and misses measured.30
8.3.19
dcsnoop
dcsnoop(8) is aBCC and bftrace tool to trace directory entry cache (dache) lookups, howing
details on every lookup. The output can be verbose, thousands of lines per second, depending on
the lookup rate. The following shows dcsnoop(8) from BCC, with a to show all lookups:
- doousop 1
TIME (s)
PID
COMN
7 FILE
0, 005463
2663
snnpd
R proc/sys/net/igv6/conf/eth0/forvarding
30 Note that BPF does have protections agsinst divide-byzero [89;: it is stil a good ides to check before sending a pro-
gram to BPF, to avoid being rejected by the BPF verifiet
31. 0rigin: 1 first created this ss dnlcsnoop using DTrace on 17-Mar-2004, the BCC version on 9-Feb-2016, and the
bpfrace version on 8-Sep-2018.
---
## Page 358
8.3 BPF Tools
321
0, 005471
2663
snngd
R sys/net/ipv6/conf/eth0/forvarding
5.500*0
2663
snnpd
R net/1pv5/conf/eth0/fozvazd1ng
0,005487
2663
stnpd
R ipv6/conf/eth0/forxa.rdi.ng
0, 005495
2663
snnpd
R conf/etho/forvarding
0, 005503
2663
pduus
R eth0/forvarding
0 ,005511
2663
snnpd
R forvarding
[...]
This output shows a /proc/sys/net/ipv6/conf/eth0/forwarding path lookup by snmpd, and shows
how the path is walked looking up each component. The *T° column is the type: R == reference,
M == miss.
This works the same way as dcstat(8), using kprobes. The overhead of this tool is expected to be
high for any moderate workload, as it is printing a line of output per event. It is intended to be
used for short periods to investigate misses seen in dcstat(8).
BCC
The BCC version supports only one command line option: a, to show both references and
misses. By default, only misses are shown.
bpftrace
The following is the code for the bpftrace version:
1/usr/local/bin/bpftrace
include 
#Include 
//fron fs/namel,c:
struct naneidata [
struct path
path,
struct qstr
last7
// [ -..1
);
BEGIN
printf (*Tracing dcache lookups..- Hit Cte1-C to end.\n*);
printf(*s8s s=6s 16s s1s 4s\n*, *7IME*, "PID*, *CoM", *r*, *FILE");
// corment out this block to avoid shoxing hits1
kprobe :lcokup_fast 
---
## Page 359
322
 Chapter S File Systems
§nd = (stxuct naneidata *)azg0;
printf (*名8d $-6d 16s R es^o*, elapsed / 1000000, pid, corm,
stx $nd=>ast,nane) } 
kprobe1d_lookup
$nane = (struct qstr *) arg1;
BEnane [tid]  = Snane=>nane}
kretprobe:d_lookup
/[er]eueuga/
if (retval == 0) (
printf (*g8d 6d g16s M s^n*, elapsed / 1000000, pid, comm,
str (@fnane [tid])〕
delete (@Enane [tid]) 
This program needed to reference the *lasta member from the nameidata struct, which was not
available in kernel headers, so enough of it was declared in this program to find that member.
8.3.20 mountsnoop
mountsnoop(8)3 is a BCC tool that shows when file systems are mounted. This can be used for
troubleshooting, especially for container environments that mount file systems on container
startup. Example output:
 nountsnoop
COMN
PID
7ID
MBRT_NS
CALL
systend-1ogind1392
1392
4026531840nount(*tmpfs", "/run/user/116*, *tspfs*,
NS_N0S0ID (XS_N00EV, *node=0T00, u1d=116, g1d=65534, s1ze=25778348032*) = 0
systend1ogind13921392
4026531840unount (*/run/user/116*, MVT_DETACH) = 0
[..-]
This output shows systemd-logind performing a mount(2) and umount(2) of a tmpfs at /run/
user/116.
This works by tracing the mount(2) and unmount(2) syscalls, using kprobes for the functions
that perform these. Since mounts should be an infrequent activity, the overhead of this tool is
expected to be negligible.
32 0rigin: It was created by 0mar Sandoval on 14-0et-2016.
---
## Page 360
8.3 BPF Tools
323
8.3.21 xfsslower
xfsslower(8) is a BCC tool to trace common XFS file system operations; it prints per-event details
for those operations that were slower than a given threshold. The operations traced are reads,
writes, opens, and fsync.
The following shows xfsslower(8) from BCC tracing these operations slower than 10 milliseconds
(the default) from a 36-CPU production instance:
+xfsslower
Tracing XFS operatlons
s sloxer than 10 ms
02:04:07 java
TIME
COMM
PI0
T BYTES
OFF_KB
LAT (ms) FILEKAME
5565
R. 63559
360237
17.16 shuffle_2_63T62_o.data
02:04:07 java
5565
R. 44203
151427
12.59 shsff1e_0_12138_0.dsta
02 :04:07 java
5565
R. 39911
106647
34.96 shuffle_0_12138_0,data
02:04:07 java
5565
R. 65536
340788
02:04:07 Java
14.80 shuffle_2_101288_0 -data
5565
R. 65536
340744
14.73 shuff1e_2_103383_0.data
02:04:07 java
5565
R. 64182
361925
59.44 shuffle_2_64928_0,data
02 :04:07 java
5565
R. 44215
108517
12.14 shurfle_0_12138_0.data
02:04: 07 java
5565
R 63370
338650
23.23 shuffle_2_104532_0.data
02:04:07 java
5565
R.63708
LLCO9E
22.61 shatf1e_2_65806_0,data
[- - - ]
This output shows frequent reads by Java that exceed 10 millseconds.
Similar to fileslower(8), this is instrumenting close to the application, and latency seen here
is likely suffered by the application.
This works by using kprobes to trace the kernel functions in the file system’s struct
file_operations, which is its interface to VFS. From Linux fs/xfs/xfs_file.c:
const struct file_operations xfs_file_operations = ↑
,11seek
= xfs_file_llseek,
.read_iter
= xfs_file_read_iter,
.vrlte_lter
= xfs_file_xrlte_iter,
splice_read
generic_file_splice_read,
-sp11ce_vr1te
1tez_11e_ap1lce_vr1te,
unlocked_ioct] = xfs_file_ioctl,
#1fdef COBFIG_CONPAT
conpat_ioct]
= xfs_file_conpat_ioct1,
#end1f
mmap
= xfs_file_mmap,
nmap_supported_flaqs = KAP_sYYC,
: open
= xfs_file_open,
.release
 xfs_file_release,
.fsymc
= xfs_file_fsync,
33 0rigin: I created this on 11-Feb-2016, inspired by my zfsslower.d tool from the 2011 DTrace book [Gregg 11]
---
## Page 361
324
4 Chapter 8 File Systems
 get_unnspped_ares = thp_get_unnapped_area,
.fallocate
= xfs_file_fallocate,
-renap_file_range = xfs_file_renap_range,
The xfs_file_read_iter( function is traced for reads, and xfs_file_write_iter() for writes, and
so on. These functions may change from kernel version to version, and so this tool will need
maintenance. The overhead of this tool is relative to the rate of the operations, plus the rate of
events printed that exceeded the threshold. The rate of operations for busy workloads can be
high enough that the overhead is noticeable, even when there are no operations slower than the
threshold so that no output is printed.
Command line usage:
xfsslovex [options] [nin_ns]
Options include:
=p PID: Measure this process only
The min_ms argument is the minimum time in milliseconds, If o is provided, then all traced
operations are printed out. This output may be thousands of lines per secondl, dependling on their
rate, and unless you have a good reason to see them all, it is likely undesirable. A default of 10
milliseconds is used if no argument is provided.
The next tool shows a bpftrace program instrumenting the same functions for latency histograms,
rather than per-event output.
8.3.22 xfsdist
xfsdist(8)4 is a BCC and bpftrace tool to instrument the XFS file system and show the distribution
of latencies as histograms for common operations: reads, writes, opens, and fsync. The following
shows xfsdist(8) from BCC, running on a 36-CPU proxduction Hadoop instance for 10 seconds:
xfsdist 10 1
Tracing XFs operation latency... Hit Ctrl-C to end.
23:55 23:
operat.ion = *read*
usec.a
: count
distrlbutlon
{ -> 1
: 5492
E 7
:3387
B -> 15
: 1675
+ +
16 > 31
: 7429
34 0rign: 1 crested this fr BCC on 12-feb2016 and bpfrce on 8Sep2018 The tool is inspired by my 2012 fsdist.d
DTrace tool.
---
## Page 362