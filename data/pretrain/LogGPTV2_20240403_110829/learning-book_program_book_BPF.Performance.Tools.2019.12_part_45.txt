### 8.3.18 dcstat

`dcstat(8)` is a BCC and bpftrace tool that provides directory entry cache (dcache) statistics. The following example shows the output of `dcstat(8)` from BCC on a 36-CPU production Hadoop instance:

```
dcstat
TIME     REFS/s   SLOW/s   MISS/s   HIT%
22:48:20  661815  27942    20814    96.86
22:48:21  540677  87375    80708    85.07
22:48:22  271719  4042     914      99.66
22:48:23  434353  4765     37       99.99
22:48:24  766316  5860     607      99.92
22:48:25  567078  7866     2279     99.60
22:48:26  556771  26845    20431    96.33
22:48:27  66855   4095     747      98.66
22:48:28  299356  3785     105      99.96
[...]
```

- **REFS/s**: dcache references.
- **SLOW/s**: Since Linux 2.5.11, the dcache has an optimization to avoid cacheline bouncing during lookups of common entries (e.g., `/*`, `*/usr`). This column shows when this optimization was not used, and the dcache lookup took the "slow" path.
- **MISS/s**: The dcache lookup failed. The directory entry may still be in memory as part of the page cache, but the specialized dcache did not return it.
- **HIT%**: Ratio of hits to references.

**Note:** The overhead of this tool may become noticeable depending on the workload, as these functions can be frequently called. It is recommended to test and quantify the impact in a lab environment.

#### Command Line Usage
```sh
dcstat [interval [count]]
```
This is modeled on other traditional tools (e.g., `vmstat(1)`).

#### Example Output from the bpftrace Version
```sh
dcstat.bt
Attaching 4 probes...
Tracing dcache lookups...
Hit Ctrl-C to end.
REFS   MISSES  HIT%
234096 16111   93.1
495104 36714   92.5
461846 36543   92.4
460245 36154   92.2
[...]
```

#### Source Code
```c
#!/usr/local/bin/bpftrace
BEGIN
{
    printf("Tracing dcache lookups... Hit Ctrl-C to end.\n");
    printf("%10s %10s %5s\n", "REFS", "MISSES", "HIT%");
}
kprobe:lookup_fast { @hits++; }
kprobe:d_lookup /retval == 0/ { @misses++; }
Interval:s:1
{
    $refs = @hits + @misses;
    $percent = $refs > 0 ? 100 * @hits / $refs : 0;
    printf("%10d %10d %4.2f%%\n", $refs, @misses, $percent);
    clear(@hits);
    clear(@misses);
}
END
{
    clear(@hits);
    clear(@misses);
}
```

### 8.3.19 dcsnoop

`dcsnoop(8)` is a BCC and bpftrace tool that traces directory entry cache (dcache) lookups, showing details for every lookup. The output can be verbose, with thousands of lines per second, depending on the lookup rate. The following example shows `dcsnoop(8)` from BCC, with the `-a` option to show all lookups:

```
dcsnoop -a
TIME (s) PID COMM         FILE
0.005463 2663 snmpd        proc/sys/net/ipv6/conf/eth0/forwarding
0.005471 2663 snmpd        sys/net/ipv6/conf/eth0/forwarding
0.005500 2663 snmpd        net/ipv6/conf/eth0/forwarding
0.005508 2663 snmpd        ipv6/conf/eth0/forwarding
0.005516 2663 snmpd        conf/eth0/forwarding
0.005524 2663 snmpd        eth0/forwarding
0.005532 2663 snmpd        forwarding
[...]
```

- **T**: Type: R == reference, M == miss.

**Note:** The overhead of this tool is expected to be high for any moderate workload, as it prints a line of output per event. It is intended to be used for short periods to investigate misses seen in `dcstat(8)`.

#### BCC Version
The BCC version supports only one command line option: `-a`, to show both references and misses. By default, only misses are shown.

#### bpftrace Version
```c
#!/usr/local/bin/bpftrace
#include <linux/fs.h>
#include <linux/namei.h>

struct nameidata {
    struct path path;
    struct qstr last;
};

BEGIN
{
    printf("Tracing dcache lookups... Hit Ctrl-C to end.\n");
    printf("%8s %6s %16s %1s %s\n", "TIME", "PID", "COMM", "T", "FILE");
}

kprobe:lookup_fast
{
    $nd = (struct nameidata *)arg0;
    printf("%8.6f %6d %16s R %s\n", elapsed / 1000000, pid, comm, $nd->last.name);
}

kprobe:d_lookup
{
    $name = (struct qstr *)arg1;
    @name[tid] = $name->name;
}

kretprobe:d_lookup
{
    if (retval == 0)
    {
        printf("%8.6f %6d %16s M %s\n", elapsed / 1000000, pid, comm, str(@name[tid]));
        delete(@name[tid]);
    }
}
```

### 8.3.20 mountsnoop

`mountsnoop(8)` is a BCC tool that shows when file systems are mounted. This can be useful for troubleshooting, especially in container environments where file systems are mounted on container startup. Example output:

```
mountsnoop
COMM             PID TID MOUNT_NS CALL
systemd-logind  1392 1392 4026531840 mount("tmpfs", "/run/user/116", "tmpfs", MS_NOSUID | MS_NODEV, "nodev,uid=116,gid=65534,size=25778348032") = 0
systemd-logind  1392 1392 4026531840 umount("/run/user/116", MNT_DETACH) = 0
[...]
```

- **COMN**: Command name.
- **PID**: Process ID.
- **TID**: Thread ID.
- **MOUNT_NS**: Mount namespace.
- **CALL**: System call details.

**Note:** This tool works by tracing the `mount(2)` and `umount(2)` syscalls using kprobes. Since mounts should be infrequent, the overhead of this tool is expected to be negligible.

### 8.3.21 xfsslower

`xfsslower(8)` is a BCC tool that traces common XFS file system operations and prints per-event details for those operations that exceed a given threshold. The operations traced are reads, writes, opens, and fsync.

The following example shows `xfsslower(8)` from BCC, tracing operations slower than 10 milliseconds (the default) on a 36-CPU production instance:

```
xfsslower
Tracing XFS operations slower than 10 ms
TIME     COMM    PID T BYTES OFF_KB LAT (ms) FILENAME
02:04:07 java    5565 R 63559 360237 17.16 shuffle_2_63562_0.data
02:04:07 java    5565 R 44203 151427 12.59 shuffle_0_12138_0.data
02:04:07 java    5565 R 39911 106647 34.96 shuffle_0_12138_0.data
02:04:07 java    5565 R 65536 340788 14.80 shuffle_2_101288_0.data
02:04:07 java    5565 R 65536 340744 14.73 shuffle_2_103383_0.data
02:04:07 java    5565 R 64182 361925 59.44 shuffle_2_64928_0.data
02:04:07 java    5565 R 44215 108517 12.14 shuffle_0_12138_0.data
02:04:07 java    5565 R 63370 338650 23.23 shuffle_2_104532_0.data
02:04:07 java    5565 R 63708 110098 22.61 shuffle_2_65806_0.data
[...]
```

- **TIME**: Time of the event.
- **COMM**: Command name.
- **PID**: Process ID.
- **T**: Operation type (R for read, W for write, etc.).
- **BYTES**: Number of bytes.
- **OFF_KB**: Offset in kilobytes.
- **LAT (ms)**: Latency in milliseconds.
- **FILENAME**: File name.

**Note:** This tool uses kprobes to trace the kernel functions in the file system’s `struct file_operations`. The overhead of this tool is relative to the rate of the operations and the rate of events printed that exceed the threshold.

#### Command Line Usage
```sh
xfsslower [options] [min_ms]
```
- **-p PID**: Measure this process only.
- **min_ms**: Minimum time in milliseconds. If 0 is provided, all traced operations are printed.

### 8.3.22 xfsdist

`xfsdist(8)` is a BCC and bpftrace tool that instruments the XFS file system and shows the distribution of latencies as histograms for common operations: reads, writes, opens, and fsync. The following example shows `xfsdist(8)` from BCC, running on a 36-CPU production Hadoop instance for 10 seconds:

```
xfsdist 10 1
Tracing XFS operation latency... Hit Ctrl-C to end.
23:55 23:
operation = "read"
usec      : count
distribution
0 -> 1    : 5492
2 -> 3    : 3387
4 -> 7    : 1675
8 -> 15   : 7429
[...]
```

**Note:** This tool is inspired by the `fsdist.d` DTrace tool and uses kprobes to trace the kernel functions in the file system’s `struct file_operations`.

---

This text has been optimized for clarity, coherence, and professionalism. Each section now clearly explains the purpose, usage, and output of the respective BCC and bpftrace tools.