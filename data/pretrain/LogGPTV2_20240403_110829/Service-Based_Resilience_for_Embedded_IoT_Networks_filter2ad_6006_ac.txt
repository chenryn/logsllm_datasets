min function and (ii) the relationship between the parameters
of min function (e.g., which one is bigger than the other),
respectively. Accordingly, the following constraints are added
1 − αsvf ≤ |F|m∗
αsvf − 1 ≤ |F|(1 − m∗
sv)
msv ≤ αsvf
msv ≤ 1
msv ≥ αsvf − |F|(1 − m∗
sv)
(cid:5)
msv ≥ 1 − |F|m∗
(19)
(20)
(21)
(22)
(23)
(24)
f∈F ysvf and |F| is the number o failure
where αsvf =
states. Therefore, additional 2|S||V | variables and 6|S||V |
constraints are introduced. As a result of the linearization
sv
sv
process, O(|D||P| +|S||V |) new variables and constraints are
added to the problem.
Impact of the resilience constraints. Each failure state
leads to ﬁnding an alternative deployment for the speciﬁc
scenario. Therefore, the number of failure states |F| signif-
icantly affects the solution time. Since we limited our design
to single node failure scenarios, each state includes exactly one
failed node and |F| = |V | is sufﬁcient to address all possible
scenarios. As a result, the service deployment Constraint (8)
adds O(|S||V |), the resource capacity Constraint (9) adds
O(|V |), and the trafﬁc Constraint (10) adds O(|D||V |) con-
straints. Eventually, O(|V |(|D| + |S|)) extra constraints stem
from the resilience design. For number of variables, it costs
extra O(|S||V |2) service allocation variables, ysvf . Besides,
the linearization constraints and variables are also multiplied
as discussed in the Constraint complexity.
Table IV shows how resilience extension affects the problem
complexity in terms of the number of constraints and variables,
and solution time. Apart from the increasing number of vari-
ables and constraints, the solution time signiﬁcantly increases
due to search for a much more restricted deployment for
resilience. Table IV shows the impact of resilience constraints
in terms of the number of variables, constraints, and solution
time.
Impact of the number of links and paths. The number
of links |E| and paths |P| are directly correlated. In fact,
even one additional link can lead to dozens of alternative
paths especially in large networks. While |P| affects (i) the
number of variables due to xdp by O(|D||P|) and (ii) the
number of constraints due to Constraint (3) by O(|D||P|), |L|
adds a number of constraints bounded by O(|E|) due to Con-
straint (4). Even though it is not possible to eliminate a link
without restraining the number of solutions, we can remove a
path if none of the demands can be allocated on it due to the
latency constraint. The paths that cannot satisfy even the most
ﬂexible delay requirement i.e., the demand with the highest
delay tolerance cannot be used in the optimal deployment.
Since the possible delay on a path is calculatable using link
characteristics as in Constraint (5), we used the highest delay
requirement as the cutoff parameter checking if path delay
conforms that parameter. Removing non-conforming ones, the
search space for routing is signiﬁcantly reduced.
Impact of the number of services and demands. Services
and demands are the main components to construct a network
and their quantities are decisive for the problem complexity.
While the number of services |S| multiplies the number of
deployment variables ysv, the number of demands |D| deter-
mines the number of ﬂow allocation variables xdp. Since |P| is
the highest variant in the problem, |D| considerably changes
the total number of variables multiplying it. According the
results shown in Table V, increasing |D| causes an exponential
increase in both number of variables and the solution time in a
topology with 20 nodes, average node degree of 3, and ∼1600
paths. Note that the most basic scenario without resilience
constraints is considered for those experiments. The impact of
|D| under resilience constraints is much higher, and shown in
Authorized licensed use limited to: University of New South Wales. Downloaded on October 01,2020 at 13:28:29 UTC from IEEE Xplore.  Restrictions apply. 
545
TABLE III: New variables introduced after linearization of the non-linear constraints.
Symbols
wstuv
qdp
stuv
msv
m∗
sv
Set
Z∗
Re∗
Z∗
Z∗
Interval
[0,1]
[0,1]
[0,1]
[0,1]
Deﬁnition
Binary variable to specify if s and t are hosted by u and v respectively
Flow allocated to p between u and v to satisfy trafﬁc requirements of d
Binary variable to decide if s is hosted by v in any failure scenario
An intermediary binary variable to decide msv
TABLE IV: Impact of the number of failure states on the number of variables and solution time for the failure-resilient deployment for
|D| = 2.
Nodes
Variables
Non-Resilient
Constraints
Solution Time
Variables
Resilient
Constraints
Solution Time
8
10
12
14
16
530
3939
5270
13751
71171
1200
7260
9371
22170
143445
0.55s
0.81s
1.13s
4.28s
21.53s
3008
15947
28242
72815
439640
8181
42434
77051
197668
1246625
270.45s
2710.21s
9560.57s
>12h
>12h
Algorithm 1: Random Deployment with Disjoint Paths
(RDDP)
1 D ← Demands in descending trafﬁc requirements
2 limit ← 50
3 for demand ∈ D do
services ← demand.services
i ← 0
while demand is not allocated and i ≤ limit do
4
5
6
7
8
9
10
11
12
13
14
15
16
17
TABLE V: Impact of the increasing number of demands without
resilience constraints on the number of variables and solution time.
Demands
Variables
Solution Time
1
3
5
7
9
2537
13037
27919
37859
50653
0.55s
8.76s
32.67s
1372.25s
17463s
Section VI.
V. HEURISTICS
Heuristics should cover three dimensions of our problem
which are service deployment, inter-service trafﬁc routing,
and resilience. To ﬁnd a complete solution, we ﬁrst develop
greedy heuristics for service deployment and routing since they
are directly related. Then, we search for backup nodes and
redundant paths to increase resilience against arbitrary node
failures. However, even though such a two-stage deployment
is quite ﬂexible, it cannot easily optimize networks for all
dimensions. Therefore, we design a hybrid heuristic that
leverages both a greedy approach and MILP formulation for
a better convergence to the optimum solution. However, the
involvement of MILP formulation decreases scalability of the
heuristic. Table VI summarizes the heuristics including their
approaches, i.e., greedy and/or optimized solutions, e.g., for
service allocation, routing, and resilience. In the following,
we explain these heuristics in detail.
A. Random Deployment with Disjoint Paths (RDDP)
Random Deployment with Disjoint Paths (RDDP) is the
greedy heuristic consisting of two phases, service deployment
and routing. In the ﬁrst phase, the services are allocated to a
randomly selected pair of nodes that do not host any other
service for each demand. If every node hosts at least one
service, the active nodes starting from the ones with the highest
available resources are selected next. In the second phase,
two node-disjoint paths are allocated for the demand between
selected nodes, one for the main use and the other one as a
redundant backup. If disjoint paths cannot be found between
(cid:2) First phase: Node selection
i ← i + 1
u, v ← Random nodes that can host services
if Any of services deployed then
u, v ← Pick host node
if u, v can host services then
(cid:2) Second phase: Path selection
p1, p2 ← Shortest disjoint paths from Puv
if ∃p1, p2 ∈ Puv and p1, p2 can carry
demand.trafﬁc then
Allocate demand
Update p1, p2 and u, v capacity
those nodes, they are reselected by following the same greedy
approach. Algorithm 1 summarizes RDDP.
Note that there is a limit parameter in Algorithm 1 to repeat
the random node selection process until ﬁnding a pair of nodes
that can accommodate the services and for which disjoint
paths for carrying the respective trafﬁc demand exist. The
parameter can be selected according to the network size and
the number of demands. limit = 50 was sufﬁciently high for
all network sizes that we used in our experiments. Therefore,
the complexity of RDDP becomes O(limit|D|). Note that the
complexity of ﬁnding disjoint paths is excluded as they are
given as input parameters.
Even though ﬁnding redundant paths increases the resilience
of the network trafﬁc, the services on the failed nodes should
be still migrated to other nodes. For that RDDP is extended
with another greedy heuristic.
546
Authorized licensed use limited to: University of New South Wales. Downloaded on October 01,2020 at 13:28:29 UTC from IEEE Xplore.  Restrictions apply. 
Heuristic
RDDP
RDDP + BSRP
MLSP
MLSP + POBS
TABLE VI: Overview of the proposed heuristics.
Routing
Service Deployment
Greedy Optimization














Resilience
∼

Scalability



different failure scenarios. The services which are placed in
advance are assumed to be ﬁxed and their host nodes are not
subject to failures. In a real-life scenario, those nodes can be
considered as the critical ones whose aliveness is guaranteed
by hot-backups. The time complexity of MLSP is O(|D||P|)
as can be derived from Algorithm 3.
For MLSP, we categorize all demands having more than h∗
(as a design parameter) trafﬁc requirements as data-intensive.
It is suitable to optimize the objective function in Equation 11,
but such a predeployment can also be performed regarding,
e.g., demand priority and criticality.
D. Post-Optimization Backup Scheme (POBS)
After obtaining the optimal deployment with some ﬁxed
nodes by MLSP, it is still possible to ﬁnd a suitable Post-
Optimization Backup Scheme (POBS) for the ﬁxed nodes and
services, given that resources are available for it. Algorithm 4
summarizes the POBS construction. We take the base state,
f = 0, as the reference deployment where all nodes are alive.
Then, we create a new failure scenario for each host node
selected by MLSP and move the services on that node to a
randomly selected one with sufﬁcient resources. In this case,
it is required to reallocate all demands that leverage any of
the migrated services, i.e., Dservice, as well. The demands are
moved to the shortest paths between the randomly-selected
B. Backups with Secondary Redundant Path (BSRP)
After ﬁnding a basis predeployment scheme with RDDP,
Backups with Secondary Redundant Path (BSRP) heuristic
selects a backup node for each service for the migration in
case of a node failure. Similar to RDDP, BSRP deploys a
backup service instance to the node with the highest available
resources in at most O(|S||V |) iterations. Then, a secondary
redundant path, i.e., different from the one offered by RDDP,
for each demand between the backup nodes is selected starting
from the ones with the lowest cost. This phase induces costs
of O(|D||P|). Algorithm 2 summarizes BSRP.
C. Maximum Load to Shortest Path (MLSP)
As the complexity analysis in Section IV shows the drastic
impact of the number of demands on the solution time, we aim
to reduce the problem size by allocating some of the demands
greedily. Maximum Load to Shortest Path (MLSP) heuristic
places the most data-intensive demands to the shortest, e.g.,
path with the lowest delay, available paths and deploys related
services to end-hosts of those paths, accordingly. If any
service is already deployed to a node, one of the shortest
paths including that node as the end-host is selected. Then,
those services and satisﬁed demands are excluded from the
optimization problem. The rest of the demands, i.e., non-data-
intensive ones are again given to the reduced optimization
problem under resilience constraints.
Note that the MLSP heuristic includes both greedy service
deployment and ﬂow allocation as well as the optimization for
Algorithm 2: Backups with Secondary Redundant Path
(BSRP)
1 P R ← Basis predeployment scheme
2 D ← Demands in descending trafﬁc requirements
3 N ← Nodes in descending available resource capacity
4 for service deployed in P R do
5
6
7
(cid:2) Select backup nodes
if node (cid:6)= service.host and node can host service
then
for node ∈ N do
node ← Candidate backup node
9 for demand ∈ D do
(cid:2) Find redundant paths
services ← demand.services
u, v ← Backup nodes for services
Puv ← Paths betwen u and v in ascending cost
for p ∈ Puv do
if p can carry demand.trafﬁc then
Update p and u, v capacity
8
10
11
12
13
14
15
16
4
5
6
7
8
9