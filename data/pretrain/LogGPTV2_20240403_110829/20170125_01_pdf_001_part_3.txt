最佳实践
PostgreSQL
• 数据库参数
– max_connections = 300 # (change requires restart)
– unix_socket_directories = '.' # comma-separated list of directories
– shared_buffers = 194GB # 尽量用数据库管理内存，减少双重缓存，提高使用效率
– huge_pages = on # on, off, or try ，使用大页
– work_mem = 256MB # min 64kB ， 减少外部文件排序的可能，提高效率
– maintenance_work_mem = 2GB # min 1MB ， 加速建立索引
– autovacuum_work_mem = 2GB # min 1MB, or -1 to use maintenance_work_mem ， 加速垃圾回收
– dynamic_shared_memory_type = mmap # the default is the first option
– vacuum_cost_delay = 0 # 0-100 milliseconds ， 垃圾回收不妥协，极限压力下，减少膨胀可能性
– bgwriter_delay = 10ms # 10-10000ms between rounds ， 刷shared buffer脏页的进程调度间隔，尽
量高频调度，减少用户进程申请不到内存而需要主动刷脏页的可能（导致RT升高）。
– bgwriter_lru_maxpages = 1000 # 0-1000 max buffers written/round , 一次最多刷多少脏页
– bgwriter_lru_multiplier = 10.0 # 0-10.0 multipler on buffers scanned/round 一次扫描多少个块，上次
刷出脏页数量的倍数
– effective_io_concurrency = 2 # 1-1000; 0 disables prefetching ， 执行节点为bitmap heap scan时，预
读的块数。从而
– wal_level = minimal # minimal, archive, hot_standby, or logical ， 如果现实环境，建议开启归档。
– synchronous_commit = off # synchronization level; ， 异步提交
– wal_sync_method = open_sync # the default is the first option ， 因为没有standby，所以写xlog选择一
个支持O_DIRECT的fsync方法。
最佳实践
PostgreSQL
• 数据库参数
– full_page_writes = off # recover from partial page writes ， 生产中，如果有增量备份和归档，可以关闭，提高
性能。
– wal_buffers = 1GB # min 32kB, -1 sets based on shared_buffers ，wal buffer大小，如果大量写wal buffer等
待，则可以加大。
– wal_writer_delay = 10ms # 1-10000 milliseconds wal buffer调度间隔，和bg writer delay类似。
– commit_delay = 20 # range 0-100000, in microseconds ，分组提交的等待时间
– commit_siblings = 9 # range 1-1000 , 有多少个事务同时进入提交阶段时，就触发分组提交。
– checkpoint_timeout = 55min # range 30s-1h 时间控制的检查点间隔。
– max_wal_size = 320GB # 2个检查点之间最多允许产生多少个XLOG文件
– checkpoint_completion_target = 0.99 # checkpoint target duration, 0.0 - 1.0 ，平滑调度间隔，假设上一个检查
点到现在这个检查点之间产生了100个XLOG，则这次检查点需要在产生100*checkpoint_completion_target个
XLOG文件的过程中完成。PG会根据这些值来调度平滑检查点。
– random_page_cost = 1.0 # same scale as above , 离散扫描的成本因子，本例使用的SSD IO能力足够好
– effective_cache_size = 240GB # 可用的OS CACHE
– log_destination = 'csvlog' # Valid values are combinations of
– logging_collector = on # Enable capturing of stderr and csvlog
– log_truncate_on_rotation = on # If on, an existing log file with the
– update_process_title = off
– track_activities = off
– autovacuum = on # Enable autovacuum subprocess? 'on'
– autovacuum_max_workers = 4 # max number of autovacuum subprocesses ，允许同时有多少个垃圾回收工作进
程。
– autovacuum_naptime = 6s # time between autovacuum runs ， 自动垃圾回收探测进程的唤醒间隔
– autovacuum_vacuum_cost_delay = 0 # default vacuum cost delay for ， 垃圾回收不妥协
最佳实践
PostgreSQL
• 编译器 , FLAG
– newest clang
– CC=/digoal/llvm/bin/clang CFLAGS="-O2 -fstrict-
enums"
• 数据库编译参数
• ./configure --
prefix=/u02/digoal/soft_bak/pgsql9.5 --with-
pgport=1921 --with-perl --with-python --with-tcl -
-with-openssl --with-pam --with-ldap --with-
libxml --with-libxslt --enable-thread-safety make
world -j 32 make install-world -j 32
最佳实践
PostgreSQL
• 硬件采购前根据实际的业务逻辑进行基准
测试，找出硬件木桶短板，均衡配置
。
CPU,MEM,disk,netdev
• 备份和恢复
• 审计
• 安全
• 日常维护
• 健康监控
参考值
TPC-C
• http://www.tpc.org/tpcc/results/tpcc_results.asp?orderby=dbms
基准测试
TPC-H
• http://www.tpc.org/tpc_documents_current_versions/current_specifications.asp
• Download TPCH_Tools.zip
• $unzip TPCH_Tools.zip
• $cd tpch_2_17_0/
• $cd dbgen
• $cp makefile.suite Makefile
• $vi Makefile
• CC = gcc
• DATABASE = ORACLE
• MACHINE = LINUX
• WORKLOAD = TPCH
• $make
基准测试
TPC-H
• 使用dbgen产生一些测试数据, -s 表示scale（单位为GB, 不包括
索引）：
• $./dbgen -s 100 -f
• 将测试数据转换为postgresql识别的格式，删除末尾的分隔符|
• $for i in `ls *.tbl`; do sed 's/|$//' $i > ${i/tbl/csv}; done
• 把包含csv文件的目录，软链接到/tmp/dss-data。tpch-pg脚本中
一会要用到这个目录。
• $pwd
• /home/digoal/tpch/tpch_2_17_0/dbgen
• $ln -s /home/digoal/tpch/tpch_2_17_0/dbgen /tmp/dss-data
基准测试
TPC-H
• 下载pg_tpch
• $ wget https://github.com/digoal/pg_tpch/archive/master.zip
• $ unzip master.zip
• $ cd pg_tpch-master/
• $ cd dss
• $ ls
• templates tpch-alter.sql tpch-create.sql tpch-index.sql tpch-load.sql tpch-pkeys.sql
• 修改tpch-load.sql，对齐 JOIN 列数据类型，整型外的数字类型全部变更为float8
• 适配greenplum的语法，需要修改一下这个SQL文件。
• $cp tpch-load.sql tpch-load.sql.pg
• $vi tpch-load.sql
• COPY命令格式有问题，为了获得更好的效果，使用列存储，修改如下举例：
• ) with
(APPENDONLY=true,BLOCKSIZE=2097152,ORIENTATION=COLUMN,COMPRESSTYPE=QUICKLZ,CHECK
SUM=true,OIDS=false);
• COPY region FROM '/tmp/dss-data/region.csv' WITH csv DELIMITER '|';
• ......
基准测试
TPC-H
• 将pg_tpch的文件都拷贝到dbgen所在的目录：
• $cp -r pg_tpch-master/* tpch/tpch_2_17_0/dbgen/
• $cd tpch/tpch_2_17_0/dbgen
• 创建一个queries目录，用于存放转换后的tpc-h 测试SQL。
• $mkdir dss/queries
• 使用qgen生成测试SQL。
• $for q in `seq 1 22`
• do
• DSS_QUERY=dss/templates ./qgen $q >> dss/queries/$q.sql
• sed 's/^select/explain select/' dss/queries/$q.sql > dss/queries/$q.explain.sql
• done
• 调整 tpch-alter.sql tpch-index.sql tpch-pkeys.sql, 不需要加FK.
• 第一次测试
• $./tpch.sh ./results postgres digoal
• 再次测试前需要修改tpch.sh, 不需要再次导入数据，创建索引等动作。
• 查看测试结果，关注results目录中 errors目录, explain目录, results目录中的数据是否正确.
• bench.log包含22条SQL的运行时间。
最佳实践
Greenplum
• 主机
– segment个数 = cpu核心数 * 0.8
– 块设备IO能力 和 单机segment个数的比例
– 块设备读写带宽 和 单机segment个数的比例
– 内存 和 单机segment个数的比例
– 网卡 和 块设备读写带宽对齐
• 操作系统
– numa=off , elevator=deadline
– 块设备对齐
• 文件系统
– xfs
– AGcount要足够大, 条带对齐, journal盘要快
– rw,noatime,nodiratime,allocsize=16M,inode64,nobarrier,largeio,logbsize=262144,swalloc
• 交换机
– 所有节点在同一个交换机下
– 采用多块网卡时，不同VLAN在不同交换机下
最佳实践
Greenplum
• 数据库
– shared_buffers = 1024MB
– max_fsm_pages = ? # 主节点数据库大小 / 8K
– max_fsm_relations = ? # max_fsm_pages/16 - 1
– gp_vmem_protect_limit = 7500 # MB 小于阈值
– statement_mem = 2047000 # KB
– gp_backup_directIO = on
– gp_backup_directIO_read_chunk_mb = 20
– checkpoint_segments=64
– gp_set_read_only=off
– gp_workfile_limit_per_segment=?GB # 单segment大小 * 0.5
– gp_workfile_compress_algorithm=ZLIB
– gp_default_storage_options='appendonly=true, orientation=column'
最佳实践
Greenplum
• 备份和恢复
• 审计
• 安全
• 日常维护
• 健康监控
参考值
TPC-H
• http://www.tpc.org/tpch/results/tpch_results.
asp?orderby=dbms
谢谢
• URL
– https://github.com/digoal
– http://blog.163.com/digoal@126
– https://yq.aliyun.com/groups/29
– https://yq.aliyun.com/groups/13
• PostgreSQL 社区沟通渠道
• 微信公众号: postgres用户会
• 微信群: PG圈
• 微博: PostgreSQL用户会
• Q群: 3336901 , 100910388 , 5276420 , 191516184
• 邮件列表: PI:EMAIL PI:EMAIL
PI:EMAIL
• WEB: http://bbs.postgres.cn/ http://www.postgres.cn/