### 最佳实践：PostgreSQL

#### 数据库参数
- **max_connections = 300** (修改需要重启)
- **unix_socket_directories = '.'** (逗号分隔的目录列表)
- **shared_buffers = 194GB** (尽量使用数据库管理内存，减少双重缓存，提高效率)
- **huge_pages = on** (选项为on, off, try; 使用大页)
- **work_mem = 256MB** (最小值64kB; 减少外部文件排序的可能性，提高效率)
- **maintenance_work_mem = 2GB** (最小值1MB; 加速索引创建)
- **autovacuum_work_mem = 2GB** (最小值1MB, 或者-1以使用maintenance_work_mem; 加速垃圾回收)
- **dynamic_shared_memory_type = mmap** (默认值为第一个选项)
- **vacuum_cost_delay = 0** (0-100毫秒; 垃圾回收不妥协，在极限压力下减少膨胀可能性)
- **bgwriter_delay = 10ms** (10-10000毫秒之间; 调度间隔尽量高频，减少用户进程申请不到内存而需要主动刷脏页的可能性，从而降低响应时间)
- **bgwriter_lru_maxpages = 1000** (0-1000个缓冲区; 每次最多刷多少脏页)
- **bgwriter_lru_multiplier = 10.0** (0-10.0; 每次扫描的块数，是上次刷出脏页数量的倍数)
- **effective_io_concurrency = 2** (1-1000; 0禁用预读; 执行节点为bitmap heap scan时，预读的块数)
- **wal_level = minimal** (选项为minimal, archive, hot_standby, logical; 生产环境中建议开启归档)
- **synchronous_commit = off** (同步级别; 异步提交)
- **wal_sync_method = open_sync** (默认值为第一个选项; 如果没有standby，选择一个支持O_DIRECT的fsync方法)

#### 其他重要参数
- **full_page_writes = off** (如果生产环境中有增量备份和归档，可以关闭以提高性能)
- **wal_buffers = 1GB** (最小值32kB, -1基于shared_buffers设置; 如果大量写入WAL buffer，则可以增加)
- **wal_writer_delay = 10ms** (1-10000毫秒; WAL buffer调度间隔，类似于bg writer delay)
- **commit_delay = 20** (范围0-100000微秒; 分组提交的等待时间)
- **commit_siblings = 9** (范围1-1000; 当有多少个事务同时进入提交阶段时，触发分组提交)
- **checkpoint_timeout = 55min** (范围30秒到1小时; 时间控制的检查点间隔)
- **max_wal_size = 320GB** (两个检查点之间最多允许产生多少XLOG文件)
- **checkpoint_completion_target = 0.99** (检查点目标持续时间，范围0.0-1.0; 平滑调度间隔)
- **random_page_cost = 1.0** (与上面相同的比例; 离散扫描的成本因子，适用于SSD IO能力足够好的情况)
- **effective_cache_size = 240GB** (可用的OS缓存)
- **log_destination = 'csvlog'** (有效值为组合)
- **logging_collector = on** (启用stderr和csvlog捕获)
- **log_truncate_on_rotation = on** (如果启用，现有日志文件将被截断)
- **update_process_title = off**
- **track_activities = off**
- **autovacuum = on** (启用自动垃圾回收子进程)
- **autovacuum_max_workers = 4** (最大数量的自动垃圾回收子进程)
- **autovacuum_naptime = 6s** (自动垃圾回收探测进程的唤醒间隔)
- **autovacuum_vacuum_cost_delay = 0** (默认垃圾回收成本延迟; 垃圾回收不妥协)

#### 编译器和标志
- **最新版Clang**
- **CC=/digoal/llvm/bin/clang CFLAGS="-O2 -fstrict-enums"**

#### 数据库编译参数
- **./configure --prefix=/u02/digoal/soft_bak/pgsql9.5 --with-pgport=1921 --with-perl --with-python --with-tcl --with-openssl --with-pam --with-ldap --with-libxml --with-libxslt --enable-thread-safety make world -j 32 make install-world -j 32**

#### 硬件采购前基准测试
- 根据实际业务逻辑进行基准测试，找出硬件短板，均衡配置。
- **CPU, 内存, 磁盘, 网络设备**

#### 备份和恢复
- **审计**
- **安全**
- **日常维护**
- **健康监控**

#### 参考值
- **TPC-C**: [http://www.tpc.org/tpcc/results/tpcc_results.asp?orderby=dbms](http://www.tpc.org/tpcc/results/tpcc_results.asp?orderby=dbms)
- **TPC-H**: [http://www.tpc.org/tpc_documents_current_versions/current_specifications.asp](http://www.tpc.org/tpc_documents_current_versions/current_specifications.asp)

#### TPC-H基准测试
1. **下载TPCH_Tools.zip**
   - `$ unzip TPCH_Tools.zip`
   - `$ cd tpch_2_17_0/dbgen`
   - `$ cp makefile.suite Makefile`
   - 修改Makefile:
     - `CC = gcc`
     - `DATABASE = ORACLE`
     - `MACHINE = LINUX`
     - `WORKLOAD = TPCH`
   - `$ make`

2. **生成测试数据**
   - `$ ./dbgen -s 100 -f` (-s 表示scale，单位为GB, 不包括索引)
   - 将测试数据转换为PostgreSQL识别的格式：
     - `$ for i in ls *.tbl; do sed 's/|$//' $i > ${i/tbl/csv}; done`
   - 创建软链接到/tmp/dss-data:
     - `$ ln -s /home/digoal/tpch/tpch_2_17_0/dbgen /tmp/dss-data`

3. **下载pg_tpch**
   - `$ wget https://github.com/digoal/pg_tpch/archive/master.zip`
   - `$ unzip master.zip`
   - `$ cd pg_tpch-master/dss`
   - 修改tpch-load.sql，对齐JOIN列数据类型，整型外的数字类型全部变更为float8。
   - 适配Greenplum的语法，修改SQL文件：
     - `$ cp tpch-load.sql tpch-load.sql.pg`
     - `$ vi tpch-load.sql`
     - 修改COPY命令格式以获得更好的效果：
       - `) with (APPENDONLY=true, BLOCKSIZE=2097152, ORIENTATION=COLUMN, COMPRESSTYPE=QUICKLZ, CHECKSUM=true, OIDS=false);`
       - `COPY region FROM '/tmp/dss-data/region.csv' WITH csv DELIMITER '|';`

4. **拷贝文件并生成测试SQL**
   - `$ cp -r pg_tpch-master/* tpch/tpch_2_17_0/dbgen/`
   - `$ cd tpch/tpch_2_17_0/dbgen`
   - 创建queries目录：
     - `$ mkdir dss/queries`
   - 使用qgen生成测试SQL：
     - `$ for q in $(seq 1 22); do DSS_QUERY=dss/templates ./qgen $q >> dss/queries/$q.sql; sed 's/^select/explain select/' dss/queries/$q.sql > dss/queries/$q.explain.sql; done`
   - 调整tpch-alter.sql, tpch-index.sql, tpch-pkeys.sql, 不需要加FK。
   - 第一次测试：
     - `$ ./tpch.sh ./results postgres digoal`
   - 再次测试前需要修改tpch.sh，不需要再次导入数据和创建索引等动作。
   - 查看测试结果，关注results目录中的errors目录, explain目录, results目录中的数据是否正确。bench.log包含22条SQL的运行时间。

### 最佳实践：Greenplum

#### 主机配置
- **segment个数 = CPU核心数 * 0.8**
- **块设备IO能力和单机segment个数的比例**
- **块设备读写带宽和单机segment个数的比例**
- **内存和单机segment个数的比例**
- **网卡和块设备读写带宽对齐**

#### 操作系统
- **numa=off, elevator=deadline**
- **块设备对齐**

#### 文件系统
- **xfs**
- **AGcount要足够大, 条带对齐, journal盘要快**
- **rw,noatime,nodiratime,allocsize=16M,inode64,nobarrier,largeio,logbsize=262144,swalloc**

#### 交换机
- **所有节点在同一个交换机下**
- **采用多块网卡时，不同VLAN在不同交换机下**

#### 数据库
- **shared_buffers = 1024MB**
- **max_fsm_pages = ?** (主节点数据库大小 / 8K)
- **max_fsm_relations = ?** (max_fsm_pages / 16 - 1)
- **gp_vmem_protect_limit = 7500 MB** (小于阈值)
- **statement_mem = 2047000 KB**
- **gp_backup_directIO = on**
- **gp_backup_directIO_read_chunk_mb = 20**
- **checkpoint_segments = 64**
- **gp_set_read_only = off**
- **gp_workfile_limit_per_segment = ? GB** (单segment大小 * 0.5)
- **gp_workfile_compress_algorithm = ZLIB**
- **gp_default_storage_options = 'appendonly=true, orientation=column'**

#### 备份和恢复
- **审计**
- **安全**
- **日常维护**
- **健康监控**

#### 参考值
- **TPC-H**: [http://www.tpc.org/tpch/results/tpch_results.asp?orderby=dbms](http://www.tpc.org/tpch/results/tpch_results.asp?orderby=dbms)

### 联系方式
- **GitHub**: [https://github.com/digoal](https://github.com/digoal)
- **博客**: [http://blog.163.com/digoal@126](http://blog.163.com/digoal@126)
- **阿里云社区**: [https://yq.aliyun.com/groups/29](https://yq.aliyun.com/groups/29), [https://yq.aliyun.com/groups/13](https://yq.aliyun.com/groups/13)
- **PostgreSQL社区沟通渠道**
  - **微信公众号**: PostgreSQL用户会
  - **微信群**: PG圈
  - **微博**: PostgreSQL用户会
  - **Q群**: 3336901, 100910388, 5276420, 191516184
  - **邮件列表**: [PI:EMAIL](mailto:PI:EMAIL), [PI:EMAIL](mailto:PI:EMAIL), [PI:EMAIL](mailto:PI:EMAIL)
  - **网站**: [http://bbs.postgres.cn/](http://bbs.postgres.cn/), [http://www.postgres.cn/](http://www.postgres.cn/)