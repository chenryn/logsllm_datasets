gopl
values := []int{3, 1, 4, 1}
fmt.Println(sort.IntsAreSorted(values)) // "false"
sort.Ints(values)
fmt.Println(values) // "[1 1 3 4]"
fmt.Println(sort.IntsAreSorted(values)) // "true"
sort.Sort(sort.Reverse(sort.IntSlice(values)))
fmt.Println(values) // "[4 3 1 1]"
fmt.Println(sort.IntsAreSorted(values)) // "false"
为了使用方便，sort包为[]int,[]string和[]float64的正常排序提供了特定版本的函数和类型。对
于其他类型，例如[]int64或者[]uint，尽管路径也很简单，还是依赖我们自己实现。
练习 7.8： 很多图形界面提供了一个有状态的多重排序表格插件：主要的排序键是最近一次
点击过列头的列，第二个排序键是第二最近点击过列头的列，等等。定义一个sort.Interface的
实现用在这样的表格中。比较这个实现方式和重复使用sort.Stable来排序的方式。
练习 7.9： 使用html/template包 (§4.6) 替代printTracks将tracks展示成一个HTML表格。将这
个解决方案用在前一个练习中，让每次点击一个列的头部产生一个HTTP请求来排序这个表
格。
练习 7.10： sort.Interface类型也可以适用在其它地方。编写一个IsPalindrome(s
sort.Interface) bool函数表明序列s是否是回文序列，换句话说反向排序不会改变这个序列。假
设如果!s.Less(i, j) && !s.Less(j, i)则索引i和j上的元素相等。
sort.Interface接口 253
gopl
7.7. http.Handler接口
在第一章中，我们粗略的了解了怎么用net/http包去实现网络客户端(§1.5)和服务器(§1.7)。在
这个小节中，我们会对那些基于http.Handler接口的服务器API做更进一步的学习：
net/http
package http
type Handler interface {
ServeHTTP(w ResponseWriter, r *Request)
}
func ListenAndServe(address string, h Handler) error
ListenAndServe函数需要一个例如“localhost:8000”的服务器地址，和一个所有请求都可以分
派的Handler接口实例。它会一直运行，直到这个服务因为一个错误而失败（或者启动失
败），它的返回值一定是一个非空的错误。
想象一个电子商务网站，为了销售它的数据库将它物品的价格映射成美元。下面这个程序可
能是能想到的最简单的实现了。它将库存清单模型化为一个命名为database的map类型，我
们给这个类型一个ServeHttp方法，这样它可以满足http.Handler接口。这个handler会遍历整
个map并输出物品信息。
gopl.io/ch7/http1
func main() {
db := database{"shoes": 50, "socks": 5}
log.Fatal(http.ListenAndServe("localhost:8000", db))
}
type dollars float32
func (d dollars) String() string { return fmt.Sprintf("$%.2f", d) }
type database map[string]dollars
func (db database) ServeHTTP(w http.ResponseWriter, req *http.Request) {
for item, price := range db {
fmt.Fprintf(w, "%s: %s\n", item, price)
}
}
如果我们启动这个服务，
http.Handler接口 254
gopl
$ go build gopl.io/ch7/http1
$ ./http1 &
然后用1.5节中的获取程序（如果你更喜欢可以使用web浏览器）来连接服务器,我们得到下面
的输出：
$ go build gopl.io/ch1/fetch
$ ./fetch http://localhost:8000
shoes: $50.00
socks: $5.00
目前为止，这个服务器不考虑URL只能为每个请求列出它全部的库存清单。更真实的服务器
会定义多个不同的URL，每一个都会触发一个不同的行为。让我们使用/list来调用已经存在的
这个行为并且增加另一个/price调用表明单个货品的价格，像这样/price?item=socks来指定一
个请求参数。
gopl.io/ch7/http2
func (db database) ServeHTTP(w http.ResponseWriter, req *http.Request) {
switch req.URL.Path {
case "/list":
for item, price := range db {
fmt.Fprintf(w, "%s: %s\n", item, price)
}
case "/price":
item := req.URL.Query().Get("item")
price, ok := db[item]
if !ok {
w.WriteHeader(http.StatusNotFound) // 404
fmt.Fprintf(w, "no such item: %q\n", item)
return
}
fmt.Fprintf(w, "%s\n", price)
default:
w.WriteHeader(http.StatusNotFound) // 404
fmt.Fprintf(w, "no such page: %s\n", req.URL)
}
}
现在handler基于URL的路径部分（req.URL.Path）来决定执行什么逻辑。如果这个handler不
能识别这个路径，它会通过调用w.WriteHeader(http.StatusNotFound)返回客户端一个HTTP
错误；这个检查应该在向w写入任何值前完成。（顺便提一下，http.ResponseWriter是另一个
接口。它在io.Writer上增加了发送HTTP相应头的方法。）等效地，我们可以使用实用的
http.Error函数：
http.Handler接口 255
gopl
msg := fmt.Sprintf("no such page: %s\n", req.URL)
http.Error(w, msg, http.StatusNotFound) // 404
/price的case会调用URL的Query方法来将HTTP请求参数解析为一个map，或者更准确地说一
个net/url包中url.Values(§6.2.1)类型的多重映射。然后找到第一个item参数并查找它的价格。
如果这个货品没有找到会返回一个错误。
这里是一个和新服务器会话的例子：
$ go build gopl.io/ch7/http2
$ go build gopl.io/ch1/fetch
$ ./http2 &
$ ./fetch http://localhost:8000/list
shoes: $50.00
socks: $5.00
$ ./fetch http://localhost:8000/price?item=socks
$5.00
$ ./fetch http://localhost:8000/price?item=shoes
$50.00
$ ./fetch http://localhost:8000/price?item=hat
no such item: "hat"
$ ./fetch http://localhost:8000/help
no such page: /help
显然我们可以继续向ServeHTTP方法中添加case，但在一个实际的应用中，将每个case中的
逻辑定义到一个分开的方法或函数中会很实用。此外，相近的URL可能需要相似的逻辑；例
如几个图片文件可能有形如/images/*.png的URL。因为这些原因，net/http包提供了一个请求
多路器ServeMux来简化URL和handlers的联系。一个ServeMux将一批http.Handler聚集到一
个单一的http.Handler中。再一次，我们可以看到满足同一接口的不同类型是可替换的：web
服务器将请求指派给任意的http.Handler 而不需要考虑它后面的具体类型。
对于更复杂的应用，一些ServeMux可以通过组合来处理更加错综复杂的路由需求。Go语言目
前没有一个权威的web框架，就像Ruby语言有Rails和python有Django。这并不是说这样的框
架不存在，而是Go语言标准库中的构建模块就已经非常灵活以至于这些框架都是不必要的。
此外，尽管在一个项目早期使用框架是非常方便的，但是它们带来额外的复杂度会使长期的
维护更加困难。
在下面的程序中，我们创建一个ServeMux并且使用它将URL和相应处理/list和/price操作的
handler联系起来，这些操作逻辑都已经被分到不同的方法中。然后我门在调用
ListenAndServe函数中使用ServeMux最为主要的handler。
gopl.io/ch7/http3
http.Handler接口 256
gopl
func main() {
db := database{"shoes": 50, "socks": 5}
mux := http.NewServeMux()
mux.Handle("/list", http.HandlerFunc(db.list))
mux.Handle("/price", http.HandlerFunc(db.price))
log.Fatal(http.ListenAndServe("localhost:8000", mux))
}
type database map[string]dollars
func (db database) list(w http.ResponseWriter, req *http.Request) {
for item, price := range db {
fmt.Fprintf(w, "%s: %s\n", item, price)
}
}
func (db database) price(w http.ResponseWriter, req *http.Request) {
item := req.URL.Query().Get("item")
price, ok := db[item]
if !ok {
w.WriteHeader(http.StatusNotFound) // 404
fmt.Fprintf(w, "no such item: %q\n", item)
return
}
fmt.Fprintf(w, "%s\n", price)
}
让我们关注这两个注册到handlers上的调用。第一个db.list是一个方法值 (§6.4)，它是下面这
个类型的值
func(w http.ResponseWriter, req *http.Request)
也就是说db.list的调用会援引一个接收者是db的database.list方法。所以db.list是一个实现了
handler类似行为的函数，但是因为它没有方法，所以它不满足http.Handler接口并且不能直接
传给mux.Handle。
语句http.HandlerFunc(db.list)是一个转换而非一个函数调用，因为http.HandlerFunc是一个类
型。它有如下的定义：
net/http
http.Handler接口 257
gopl
package http
type HandlerFunc func(w ResponseWriter, r *Request)
func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {
f(w, r)
}
HandlerFunc显示了在Go语言接口机制中一些不同寻常的特点。这是一个有实现了接口
http.Handler方法的函数类型。ServeHTTP方法的行为调用了它本身的函数。因此
HandlerFunc是一个让函数值满足一个接口的适配器，这里函数和这个接口仅有的方法有相同
的函数签名。实际上，这个技巧让一个单一的类型例如database以多种方式满足http.Handler
接口：一种通过它的list方法，一种通过它的price方法等等。
因为handler通过这种方式注册非常普遍，ServeMux有一个方便的HandleFunc方法，它帮我
们简化handler注册代码成这样：
gopl.io/ch7/http3a
mux.HandleFunc("/list", db.list)
mux.HandleFunc("/price", db.price)
从上面的代码很容易看出应该怎么构建一个程序，它有两个不同的web服务器监听不同的端口
的，并且定义不同的URL将它们指派到不同的handler。我们只要构建另外一个ServeMux并且
在调用一次ListenAndServe（可能并行的）。但是在大多数程序中，一个web服务器就足够
了。此外，在一个应用程序的多个文件中定义HTTP handler也是非常典型的，如果它们必须
全部都显示的注册到这个应用的ServeMux实例上会比较麻烦。
所以为了方便，net/http包提供了一个全局的ServeMux实例DefaultServerMux和包级别的
http.Handle和http.HandleFunc函数。现在，为了使用DefaultServeMux作为服务器的主
handler，我们不需要将它传给ListenAndServe函数；nil值就可以工作。
然后服务器的主函数可以简化成：
gopl.io/ch7/http4
func main() {
db := database{"shoes": 50, "socks": 5}
http.HandleFunc("/list", db.list)
http.HandleFunc("/price", db.price)
log.Fatal(http.ListenAndServe("localhost:8000", nil))
}
http.Handler接口 258
gopl
最后，一个重要的提示：就像我们在1.7节中提到的，web服务器在一个新的协程中调用每一
个handler，所以当handler获取其它协程或者这个handler本身的其它请求也可以访问的变量
时一定要使用预防措施比如锁机制。我们后面的两章中讲到并发相关的知识。
练习 7.11： 增加额外的handler让客服端可以创建，读取，更新和删除数据库记录。例如，一
个形如 的请求会更新库存清单里一个货品的价格并且当这个货
/update?item=socks&price=6
品不存在或价格无效时返回一个错误值。（注意：这个修改会引入变量同时更新的问题）
练习 7.12： 修改/list的handler让它把输出打印成一个HTML的表格而不是文本。
html/template包(§4.6)可能会对你有帮助。
http.Handler接口 259
gopl
7.8. error接口
从本书的开始，我们就已经创建和使用过神秘的预定义error类型，而且没有解释它究竟是什
么。实际上它就是interface类型，这个类型有一个返回错误信息的单一方法：
type error interface {
Error() string
}
创建一个error最简单的方法就是调用errors.New函数，它会根据传入的错误信息返回一个新
的error。整个errors包仅只有4行：
package errors
func New(text string) error { return &errorString{text} }
type errorString struct { text string }
func (e *errorString) Error() string { return e.text }
承载errorString的类型是一个结构体而非一个字符串，这是为了保护它表示的错误避免粗心
（或有意）的更新。并且因为是指针类型 满足error接口而非errorString类型，
*errorString
所以每个New函数的调用都分配了一个独特的和其他错误不相同的实例。我们也不想要重要
的error例如io.EOF和一个刚好有相同错误消息的error比较后相等。
fmt.Println(errors.New("EOF") == errors.New("EOF")) // "false"
调用errors.New函数是非常稀少的，因为有一个方便的封装函数fmt.Errorf，它还会处理字符
串格式化。我们曾多次在第5章中用到它。
package fmt
import "errors"
func Errorf(format string, args ...interface{}) error {
return errors.New(Sprintf(format, args...))
}
虽然 可能是最简单的错误类型，但远非只有它一个。例如，syscall包提供了Go
*errorString