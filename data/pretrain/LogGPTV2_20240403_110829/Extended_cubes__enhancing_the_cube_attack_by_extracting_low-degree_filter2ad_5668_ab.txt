multiplication of all the xis with i 2 I. By factoring the
master polynomial p by the monomial tI , we have:
p(x1,(cid:1)(cid:1)(cid:1) , xℓ) = tI (cid:1) pS(I) + q(x1,(cid:1)(cid:1)(cid:1) , xℓ)
(1)
where pS(I), which is called the superpoly of tI in p, does not
have any common variable with tI , and each monomial term
tJ in the residue polynomial q misses at least one variable
from tI . A term tI is called a \maxterm" if its superpoly in p
is linear polynomial which is not a constant, i.e. deg(pS(I)) =
1.
The main observation of the cube attack is that, if we sum
297
p over tI , i.e. by assigning all the possible combinations of
0/1 values to the xis with i 2 I and (cid:12)xing the value of all
the remaining xis with i /2 I, the resultant polynomial equals
pS(I) (mod 2). More formally, a subset I of size s (where
s (cid:20) ℓ) de(cid:12)nes a boolean cube CI containing 2s boolean
vectors which are formed by assigning all 2s values to the
xis with i 2 I, and leaving all the remaining variables (i.e.
xis with i /2 I) undetermined. For example, if I = f1, 2g
then
CI = f(0, 0, x3,(cid:1)(cid:1)(cid:1) , xℓ), (0, 1, x3,(cid:1)(cid:1)(cid:1) , xℓ), (1, 0, x3,(cid:1)(cid:1)(cid:1) , xℓ),
(1, 1, x3,(cid:1)(cid:1)(cid:1) , xℓ)g
Any vector w 2 CI de(cid:12)nes a derived polynomial pjw
with ℓ (cid:0) s variables whose degree may be the same or low-
∑
er than the degree of the master polynomial p. Summing
the 2s derived polynomials over GF(2) de(cid:12)ned by the vec-
tors in the cube CI , we get a new polynomial pI de(cid:12)ned by
pI ,
pjw. The following theorem from [16] states
the main observation used by the cube attack.
w2CI
Theorem 1. Given a polynomial p over GF(2) with ℓ vari-
ables, and any index subset I (cid:18) f1,(cid:1)(cid:1)(cid:1) , ℓg, we have pI =
pS(I).
Given access to a cryptographic function with public and
secret variables, this observation enables an attacker to re-
cover the value of the secret variables (kis) in two steps,
namely the preprocessing and online phases, which are de-
scribed shortly.
Preprocessing Phase. During the preprocessing phase,
the attacker (cid:12)rst (cid:12)nds su(cid:14)ciently many maxterms, i.e. tI s,
such that each tI consists of a subset of public variables
v1,(cid:1)(cid:1)(cid:1) , vm. To (cid:12)nd the maxterms, the attacker performs a
probabilistic linearity test on pS(I) over the secret variables
ki 2 fk1,(cid:1)(cid:1)(cid:1) , kng while the value of the public variables
not in tI are (cid:12)xed (to 0 or 1). For example, the BLR test
of [9] can be used for this purpose. This test requires the
attacker to choose a su(cid:14)cient number of vectors x, y 2
f0, 1gn independently and uniformly at random representing
samples of n-bit key, and then for each pair of vectors x
and y, the attacker sums the polynomial p over tI to verify
whether or not each one of them satis(cid:12)es the relation:
pS(I)[0] + pS(I)[x] + pS(I)[y] = pS(I)[x + y]
(2)
If all the vectors x and y satisfy the relation, with high
probability pS(I) is linear over the secret variables; that is,
tI is a maxterm. Then the next step is to derive linearly
independent equations in the secret variables kis from pS(I)
that are closely related to the master polynomial p, such
that, solving them enables the attacker to determine the
values of the secret variables.
Online Phase. Once su(cid:14)ciently many linearly independen-
t equations in the secret variables are found, the preprocess-
ing phase is completed. In the online phase, the attacker’s
aim is to (cid:12)nd the value of the right-hand side of each lin-
ear equation by summing the black box polynomial p over
the same set of maxterms tI s which are obtained during
the preprocessing phase. Now, the attacker can easily solve
the resultant system of the linear equations, e.g. by using
the Gaussian elimination method, to determine the values
of the secret (key) variables.
3. EXTENDED CUBE: DERIVING LOW DE-
GREE EQUATIONS
3.1 The Main Observation
Based on the the output of the BLR linearity test [9],
which is used in [16] during the process of (cid:12)nding a max-
term; i.e. tI with associated linear superpoly pS(I), we can
distinguish the following cases:
1. If the test output is \success", i.e., all (tested) vectors
x and y satisfy relation (2) then we have either:
(cid:15) a superpoly that is constant 1 ;
i.e. pS(I) = 1,
which trivially satis(cid:12)es relation (2) for any pair
of vectors x and y.
(cid:15) a non-exist superpoly, which may happen if tI is
neither a monomial nor a common subterm of
some monomials in the master polynomial p, and
hence cannot be factored out. This makes pI = 0
for any pair of vectors x and y, and hence both
sides of equation (2) evaluate to 0.
(cid:15) a linear superpoly, which is the case if neither of
the previous two cases (i.e. constant 1 or non-
exist case) happens.
2. If the test output is \fail", i.e., at least one pair of
vectors x and y is found not satisfying relation (2)
then the superpoly pS(I) is nonlinear.
Note that the above observation is the basis for construct-
ing a distinguisher as shown in [4], which was then formal-
ized as Lemma 1 in [1] as shown below.
∑
w2CI
Lemma 1 ([1]). Let p be a given (black-box) master polyno-
mial over GF(2) in ℓ variables x1,(cid:1)(cid:1)(cid:1) , xℓ; I (cid:18) f0, 1,(cid:1)(cid:1)(cid:1) , ℓg;
s = jIj, and tI denote the multiplication of xis with i 2 I.
Let pI ,
pjw be the derived polynomial obtained by
summing p over the cube CI (cf. Sec. 2). tI exists in p, either
as a monomial or as a common subterm of some monomi-
als, if and only if there exist at least a vector x 2 f0, 1gℓ(cid:0)s
which gives pI [x] =
pjw[x] = 1.
∑
w2CI
Next, we propose an e(cid:14)cient method for deriving non-
linear equations of low degree. We introduce the notion of
extended cube to e(cid:14)ciently extract nonlinear equations of
degree D as follows.
De(cid:12)nition 1. Adopting the notion of a boolean cube CI (cf.
Sec. 2), where I (cid:18) f1,(cid:1)(cid:1)(cid:1) , ℓg is the index subset and s = jIj,
an extending cube CK indexed by a subset K (cid:18) f1,(cid:1)(cid:1)(cid:1) , ℓg of
size r (i.e. r = jKj) such that I \ K = ϕ, can be combined
with the cube CI to construct a larger extended cube as CI[K
consisting of 2r+s boolean vectors formed by assigning 2r+s
values to xis with i 2 I [ K, and leaving all the remaining
variables (i.e. xis with i /2 I [ K) undetermined.
To illustrate De(cid:12)nition 1, let I = f1, 2g and K = f3g, then
CI[K = f(0, 0, 0, x4,(cid:1)(cid:1)(cid:1) , xℓ), (0, 0, 1, x4,(cid:1)(cid:1)(cid:1) , xℓ),(cid:1)(cid:1)(cid:1) , (1, 1, 1,
x4,(cid:1)(cid:1)(cid:1) , xℓ)g
Any vector w 2 CI[K de(cid:12)nes a derived polynomial pjw with
ℓ (cid:0) (r + s) variables whose degree may be the same or lower
than the degree of the master polynomial p. Summing the
2r+s derived polynomials over GF(2) de(cid:12)ned by the vectors
in the extended cube CI[K , we get a new polynomial p(I[K)
298
∑
de(cid:12)ned by p(I[K) ,
pjw. Thus, we can revise the
notion of tweakable master polynomial p in equation (1) as
w2CI[K
p(x1, ..., xℓ) = tI (cid:1) XK (cid:1) pS(I[K) + q(x1, ..., xℓ)
(3)
where tI is a subterm of size s over xis with i 2 I; XK is
a subterm of size r over xis with i 2 K, and pS(I[K) is the
superpoly of tI (cid:1) XK in p. Note that since we factored out
both subterms tI and XK from p, the superpoly pS(I[K)
does not contain any common variable with tI and XK , and
each term tJ in the residue polynomial q misses at least
one variable from tI (cid:1) XK . Now using the main theorem
of the cube attack (namely, Theorem 1), if we sum p over
‘tI (cid:1) XK ’, by assigning all the possible combinations of 0/1
values to the xis with i 2 I [ K and (cid:12)xing the value of all
the remaining xis with i /2 I [ K, the resultant polynomial
equals to pS(I[K) (mod 2); i.e. p(I[K) = pS(I[K).
This observation enables the attacker to derive nonlinear
superpoly equations of degree D over the secret variables kis
in two steps; namely the preprocessing and online phases, as
described in the following.
3.2 Attack Phases
Preprocessing Phase. During the preprocessing phase to
derive polynomial equations pS(I)s of degree D, the degree d
of the master polynomial p should be estimated in some way
such as through the known structure of the cipher or using
a variant of the random walk as proposed in [20]. Knowing
the degree d of the master polynomial enables the attacker
to know the size of tI (i.e. s = d (cid:0) D) in order to (cid:12)nd the
nonlinear superpoly of degree D. Next, the attacker (cid:12)nds
many monomials tI s, such that each tI consists of a subset
of public variables v1,(cid:1)(cid:1)(cid:1) , vm, and the corresponding super-
poly pS(I) is a polynomial of degree D. To (cid:12)nd those tI s,
the attacker chooses a monomial tI of size s one at a time
and performs the generalized version of the BLR test as pro-
posed by Dinur and Shamir in [16] on pS(I) over the secret
variables k1,(cid:1)(cid:1)(cid:1) , kn, while the value of the public variables
vis with i /2 I are (cid:12)xed (to 0 or 1). For example, if one uses
this generalized version of the BLR test to capture the su-
perpoly pS(I) of degree 2, κ sets of vectors x, y, z 2 f0, 1gn
, representing samples of n-bit secret keys, are chosen inde-
pendently and uniformly at random, and then for each pair
of vectors x, y and z the attacker sums the polynomial p
over tI to verify whether or not each one of them satis(cid:12)es
the relation:
pS(I)[0] + pS(I)[x] + pS(I)[y] + pS(I)[z] + pS(I)[x + y]+
pS(I)[x + z] + pS(I)[y + z] = pS(I)[x + y + z]
(4)
Note that, the relation will capture all polynomials of de-
gree D (cid:20) 2. Hence, to obtain only the polynomials of degree
2, one should (cid:12)lter the linear, constant 1 and non-exist su-
perpolys during the test. Having all κ sets of vectors x, y
and z satisfying the relation (4), one can tell that the super-
poly pS(I) (of the monomial tI ) is of degree at most 2, after
repeating the test su(cid:14)ciently many times, that is using a
su(cid:14)cient number of samples κ.
To derive e(cid:14)ciently a nonlinear equation pS(I) of degree
D over secret variables kis, one should identify the sub-
set S (cid:18) f1,(cid:1)(cid:1)(cid:1) , ng that consists of the secret variable in-
dexes within pS(I), in which each ki with i 2 S is either
a term or a subterm of pS(I). To do this, the subterm
XK (cf. equation (3)) is assigned with each secret variable
ki 2 fk1,(cid:1)(cid:1)(cid:1) , kng one at a time while the subterm tI is (cid:12)xed
299
Algorithm 1.
INPUT : n; // the total number of secret key variables
tI ; // the monomial in which deg(pS(I)) = D
OUTPUT : S; // the set of secret variable indexes
within pS(I)
repeat
assign XK (cf. equation (3)) with a secret variable
ki 2 fk1,(cid:1)(cid:1)(cid:1) , kng which has not been considered;
choose κ vectors x 2 f0, 1gn(cid:0)1 independently and
uniformly at random;
repeat
choose one of κ vectors x which has not been used
to represent n (cid:0) 1 secret variables ki /2 XK ;
compute p(I[K)[x] =
∑
pjw[x];
w2CI[K
until p(I[K)[x] = 1 or all κ vectors x have been used;
if p(I[K)[x] = 1 is the case then