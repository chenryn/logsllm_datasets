# Table 4: Running Time (seconds) and Bandwidth (KB) for Protocol Phases

| 0.61 | 1.58 | 0.03 | 9.12 | KB | 5153.77 | None | 21.91 | 9.79 | 231.28 | 928.82 | 2628.64 | 50.95 | 3849.48 | s |
| 1089.42 | 6.28 | 0.45 | 13.33 | 0.24 | 1.38 | 3.12 | 0.04 | 18.11 | KB | 10306.81 | None | 21.91 | 18.95 | 462.40 | 1851.06 | 5258.63 | 101.94 | 7692.98 |

## Comparison with Related Work

### Erkin et al.
Erkin et al. [5] perform all the core computations, which limits the scalability of their system. In their system, the length of vectors is 12 (compared to 640 in our experiments). For a database of 320 faces, the entire system takes 18 seconds of online computation to serve a query and generates approximately 7.25 MB of network traffic.

### Sadeghi et al.
Sadeghi et al. [20] improved the efficiency of Erkin's work by constructing a hybrid protocol that uses homomorphic encryption to compute Euclidean distances and garbled circuits for finding the minimum. They also introduced the concept of packing, which they used to save communication costs. Our Euclidean distance protocol builds on this but further improves efficiency by incorporating packing into the computation steps. Unlike our work, Sadeghi et al. do not use a minimum circuit to identify the best match; instead, they find matches by securely comparing distance values with individual threshold values. Additionally, they generated their garbled circuits using a generic compiler, FairplaySPF [17], which, while convenient, cannot exploit application-specific properties to develop more efficient custom circuits.

### SCiFI
SCiFI [15] is a practical privacy-preserving face identification system that uses a component-based face identification technique with a binary index into a vocabulary representation. The distance between faces is measured using the Hamming distance between their bit-vectors. Both the secure Hamming distance and secure minimum algorithms in SCiFI are based purely on additive homomorphic encryption and oblivious transfer. The authors present several optimization techniques specific to their application. We argue that a hybrid scheme combining both homomorphic encryption and garbled circuits tends to be superior. For a database of size 100 (with 900-bit vectors, compared to our 640-byte = 5120-bit vectors), identification takes 31 seconds of online computation. No bandwidth consumption is reported. Their implementation produces the indexes of all entries within a threshold value of the candidate, rather than computing the global minimum.

### Barni et al.
The most similar work to ours is the privacy-preserving fingerprint authentication by Barni et al. [1], which uses the same FingerCode biometric as we do. Like Erkin et al.'s approach, it is also based purely on homomorphic encryption. They do not support the computation of the global minimum but instead output the indexes of all matches within some threshold. In an experiment with a database of 320x16 7-bit, their protocol completes in 16 seconds and uses 9.11 MB of bandwidth. In contrast, our system's performance results for the most comparable but larger experiment are 3.47 seconds and 3.76 MB for a database of 512x16 8-bit integers.

## Conclusion
Privacy-preserving computation offers the promise of obtaining results dependent on private data without exposing that private data. The main drawback is that current protocols for privacy-preserving computations are very expensive and impractical for real-scale problems. In this work, we have shown that these costs can be substantially reduced for a large class of biometric matching applications by developing efficient protocols for Euclidean distance, finding the closest match, and retrieving the associated record. Our approach involves using the normal by-products of a garbled circuit evaluation to enable very efficient oblivious information retrieval, and we believe this technique can be extended to many other applications. Our experimental results support the hope that privacy-preserving biometrics are now within reach for practical applications.

## Acknowledgements
This work was partially supported by a MURI award from the Air Force Office of Scientific Research, and grants from the National Science Foundation and DARPA. The contents of this paper do not necessarily reflect the position or the policy of the US Government, and no official endorsement should be inferred. The authors thank Yikan Chen and Aaron Mackey for insightful discussions about this work.

## References
[1] M. Barni, T. Bianchi, D. Catalano, M. D. Raimondo, R. D. Labati, P. Faillia, D. Fiore, R. Lazzeretti, V. Piuri, F. Scotti, and A. Piva. Privacy-Preserving Fingerprint Authentication. In 12th ACM Multimedia and Security Workshop, 2010.

[2] A. Bazen and S. Gerez. Systematic Methods for the Computation of the Directional Fields and Singular Points of Fingerprints. IEEE Transactions on Pattern Analysis and Machine Intelligence, 2002.

[10] Y. Lindell and B. Pinkas. A Proof of Security of Yao’s Protocol for Two-Party Computation. Journal of Cryptology, 22(2), 2009.

[11] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay — A Secure Two-Party Computation System. In USENIX Security Symposium, 2004.

[12] D. Maltoni, D. Maio, A. Jain, and S. Prabhakar. Handbook of Fingerprint Recognition. Springer, 2009.

[13] M. Naor and B. Pinkas. Efficient Oblivious Transfer Protocols. In ACM-SIAM Symposium on Discrete Algorithms, 2001.

[14] M. Naor and B. Pinkas. Computationally Secure Oblivious Transfer. Journal of Cryptology, 18(1), 2005.

[15] M. Osadchy, B. Pinkas, A. Jarrous, and B. Moskovich. SCiFI: A System for Secure Face Identification. In IEEE Symposium on Security and Privacy (Oakland), 2010.

[3] A. Bazen, G. Verwaaijen, S. Gerez, L. Veelenturf, and B. van Der Zwaag. A Correlation-Based Fingerprint Verification System. In ProRISC2000 Workshop on Circuits, Systems and Signal Processing, 2000.

[16] P. Paillier. Public-key Cryptosystems Based on Composite Degree Residuosity Classes. In 17th International Conference on Theory and Application of Cryptographic Techniques (EUROCRYPT), 1999.

[4] D. Beaver. Precomputing Oblivious Transfer. In 15th International Conference on Cryptology (CRYPTO), 1995.

[5] Z. Erkin, M. Franz, J. Guajardo, S. Katzenbeisser, I. Lagendijk, and T. Toft. Privacy-Preserving Face Recognition. In 9th International Symposium on Privacy Enhancing Technologies, 2009.

[6] Y. Ishai, J. Kilian, K. Nissim, and E. Petrank. Extending Oblivious Transfers Efficiently. In 23rd International Conference on Cryptology (CRYPTO), 2003.

[7] A. Jain, S. Prabhakar, L. Hong, and S. Pankanti. Filterbank-Based Fingerprint Matching. IEEE Transactions on Image Processing, 2000.

[8] V. Kolesnikov, A. Sadeghi, and T. Schneider. Improved Garbled Circuit Building Blocks and Applications to Auctions and Computing Minima. In Cryptology and Network Security, 2009.

[9] V. Kolesnikov and T. Schneider. Improved Garbled Circuit: Free XOR Gates and Applications. In 35th International Colloquium on Automata, Languages and Programming (ICAPL), 2008.

[17] A. Paus, A. R. Sadeghi, and T. Schneider. Practical Secure Evaluation of Semi-Private Functions. In International Conference on Applied Cryptography and Network Security (ACNS), 2009.

[18] S. Prabhakar and A. Jain. Decision-Level Fusion in Fingerprint Verification. Pattern Recognition, 2002.

[19] A. Ross, A. Jain, and J. Reisman. A Hybrid Fingerprint Matcher. Pattern Recognition, 2003.

[20] A. Sadeghi, T. Schneider, and I. Wehrenberg. Efficient Privacy-Preserving Face Recognition. In International Conference on Information Security and Cryptology, 2009.

[21] H. Xu, R. Veldhuis, A. Bazen, T. Kevenaar, T. Akkermans, and B. Gokberk. Fingerprint Verification using Spectral Minutiae Representations. IEEE Transactions on Information Forensics and Security, 2009.

[22] A. C. Yao. How to Generate and Exchange Secrets. In 27th Symposium on Foundations of Computer Science, 1986.

## Appendix: Oblivious Transfer Protocol
Our protocol, summarized in Figure 8, combines the protocols from Naor and Pinkas [13] (referred to as NPOT) and Ishai et al. [6] using an aggressive pre-computation strategy to produce an efficient OT protocol. We denote the ith column vector of a matrix \( T \) by \( t_i \), and the ith row vector of \( T \) by \( t_i \). The preparation phase can be done before any of the selection bits are known. At the end of the preparation phase, the SENDER has \( k_1 \) keys \( \{AO_i^{s_i}\} \), and the RECEIVER has \( k_1 \) key pairs \( \{(AO_i^0, AO_i^1)\} \), where \( 1 \leq i \leq k_1 \). These keys are later used to transmit the matrix \( T \) efficiently. By using pre-computation, the online phase of our OT implementation requires only \( 2(k_1 + m) \) symmetric encryptions and \( k_1 + m \) symmetric decryptions. The correctness and security of this protocol follow directly from the proofs for NPOT [13] and Ishai et al.’s extended OT protocol [6].

### Correctness
The RECEIVER can learn \( x_{i, r_i} \) for all \( 1 \leq i \leq m \) following this case analysis:
1. If \( r_i = 0 \), then \( q_i = t_i \) regardless of the value of \( s_i \). Thus, the RECEIVER knows the key \( t_i \), which is used to encrypt \( x_{i,0} \).
2. When \( r_i = 1 \), the value of \( s_i \) selects whether \( q_i = t_i \) or \( r \oplus t_i \). However, this "selection" effect is canceled by XOR-ing \( s \) and \( q_i \), so that it is always true that \( s \oplus q_i = t_i \), which is the key used to encrypt \( x_{i,1} \).

### Security
The security of our protocol follows from these two points:
1. The RECEIVER can never learn anything about \( x_{i, \neg r_i} \) because it is encrypted using a different secret key, which differs from that used for \( x_{i, r_i} \) by \( s \), the SENDER's random bit vector that is never revealed to the RECEIVER. The security property of NPOT used in the preparation phase guarantees that the selection bits of \( s \) are not revealed to the RECEIVER.
2. In the first round of communication, either \( t_i \) or \( r \oplus t_i \) is sent to the SENDER, but not both. Thus, the fact that the SENDER can never learn anything about the RECEIVER's selection bits \( r \) is derived directly from the security property of NPOT used in the preparation phase [13].

### The Oblivious Transfer Protocol
**Input to SENDER:** \( m \) pairs \( \{(x_{i,0}, x_{i,1})\} \) of \( l \)-bit strings, where \( 1 \leq i \leq m \).

**Input to RECEIVER:** \( m \) selection bits \( r = (r_1, \ldots, r_m) \).

**Protocol Output:** The RECEIVER outputs \( (x_{1,r_1}, x_{2,r_2}, \ldots, x_{m,r_m}) \) while knowing nothing of \( (x_{1,\neg r_1}, x_{2,\neg r_2}, \ldots, x_{m,\neg r_m}) \). The SENDER learns nothing.

#### Preparation:
1. The RECEIVER generates an \( m \times k_1 \) matrix \( T \) of random bits.
2. The RECEIVER generates \( k_1 \) pairs \( \{(AO_i^0, AO_i^1)\} \) of \( k_2 \)-bit strings, where \( 1 \leq i \leq k_1 \).
3. The SENDER generates a vector \( s = (s_1, \ldots, s_{k_1}) \) of random bits.
4. The RECEIVER and SENDER execute NPOT for \( k_1 \) times, where the RECEIVER acts as the sender and the SENDER as the receiver. At the \( i \)-th execution of OT21, the message pair to send is \( \{(AO_i^0, AO_i^1)\} \), and the selection bit is \( s_i \).

#### Execution:
**SENDER:**
- The SENDER derives a bit matrix \( Q \), where \( q_i = Dec(AO_i^{s_i})(T_i, s_i) \). Then, the SENDER prepares \( m \) pairs \( \{(Q_i^0, Q_i^1)\} = \{(Enc_{q_i}(x_{i,0}), Enc_{s \oplus q_i}(x_{i,1}))\} \), where \( 1 \leq i \leq m \).

**RECEIVER:**
- The RECEIVER prepares \( k_1 \) pairs \( \{T_i = (T_i^0, T_i^1) = (Enc_{AO_i^0}(t_i), Enc_{AO_i^1}(r \oplus t_i))\} \), where \( 1 \leq i \leq k_1 \).
- For \( 1 \leq i \leq m \), the RECEIVER outputs \( x_{i, r_i} = Dec_{t_i}(Q_i^{r_i}) \).

Figure 8: The Oblivious Transfer Protocol