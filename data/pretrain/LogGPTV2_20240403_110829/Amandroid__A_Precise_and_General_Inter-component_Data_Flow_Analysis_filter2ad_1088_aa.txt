# Amandroid: A Precise and General Inter-component Data Flow Analysis Framework for Security Vetting of Android Apps

**Authors:** Fengguo Wei, Sankardas Roy, Xinming Ou, Robby  
**Affiliation:** Department of Computing and Information Sciences, Kansas State University  
**Emails:** {fgwei, sroy, xou, robby}@ksu.edu

## Abstract
We present a novel approach for conducting static analysis to vet the security of Android applications. This approach is implemented in a framework called Amandroid, which determines points-to information for all objects in an Android app in a flow- and context-sensitive manner across different components. Our findings demonstrate that:
1. Comprehensive analysis using Amandroid is feasible with modern computing resources.
2. The results from this general analysis can be easily leveraged to build specialized security analyses, often requiring only about 100 lines of additional code.
3. The outcomes of these specialized analyses are at least on par with, and often surpass, those of prior works designed for specific problems.

Amandroid's analysis directly handles inter-component control and data flows, making it suitable for addressing security issues arising from interactions among multiple components within or across apps. The analysis is sound, providing assurance of the absence of specified security problems under well-defined and reasonable assumptions about the Android runtime system and its libraries.

## Categories and Subject Descriptors
D.2.4 [Software Engineering]: Software/Program Verificationâ€”Validation; K.6 [Management of Computing and Information Systems]: Security and Protection

## General Terms
Static Analysis, Mobile Security

## Keywords
Android Application, ICC (Inter-component Communication), Points-to Analysis, Information Leakage, Vulnerable App, Malware, Security Vetting

## 1. Introduction
The Android smartphone platform is highly popular and has the largest market share among smartphones worldwide. However, numerous security issues have been reported due to malicious or vulnerable applications running on Android devices. Current solutions to these issues are often reactive, such as removing an app from the market after potential damage has occurred. Effective vetting methods that market operators can rely on to ensure apps entering the market (e.g., Google Play) are free from certain types of security problems are lacking. Dynamic analysis, which involves running an app in a testing environment, is often used but has limitations.

Many security issues in Android apps can be detected through static analysis of the Dalvik bytecode. Previous efforts in this area include [8, 11, 14, 17, 20, 23, 25]. Static analysis offers advantages over dynamic analysis, as it can detect behaviors that may not manifest during a test run and is less susceptible to evasion by malicious apps. However, static analysis must balance computational time and precision, characterized by false negatives (missed behaviors) and false positives (false alarms).

### Challenges in Android Static Analysis
1. **Event-driven System**: Capturing all possible control flow paths in an open and reactive system while minimizing false alarms.
2. **Large Library Base**: Analyzing the extensive Android library code, which is essential for precision but can be computationally expensive.
3. **Inter-component Communication (ICC)**: Accurately capturing ICC flows, where components can send intents to each other, either explicitly or implicitly.

### Prior Work
- **FlowDroid [6, 17]**: Models the event-driven lifecycle but does not address ICC.
- **Epicc [25]**: Analyzes ICC but does not perform data flow analysis across component boundaries.
- **CHEX [23]**: Links code reachable from entry points to discover data flows but does not handle ICC.

### Contributions of Amandroid
1. **Comprehensive Points-to Analysis**: Computes points-to information for all objects and fields, useful for analyzing a wide range of security problems.
2. **Precise Inter-procedural Control Flow Graph (ICFG)**: Builds a flow- and context-sensitive ICFG, more precise than existing frameworks like Soot and Wala.
3. **Inter-component Communication (ICC) Edges**: Treats ICC like method calls, allowing both control and data to flow, and performs string analysis to infer ICC call parameters.
4. **Data Dependence Graph (DDG)**: Constructs the DDG from the ICFG, enabling detection of specific security problems by querying the graph.

### Evaluation
Amandroid was evaluated on 753 Google Play apps and 100 potentially malicious apps. It scales well, taking tens of seconds to analyze one app. Specialized analyses require minimal additional coding (around 100 LOC) and negligible additional runtime. Amandroid outperforms existing tools like FlowDroid and Epicc in handling a wide range of security issues related to ICC and has identified new security problems in Android apps.

## 2. Motivating Example
Consider a malicious app named "sensitive-sms" that manipulates the inter-component nature of Android to obfuscate its true objectives. The app consists of an Activity (DataGrabber) and a BroadcastReceiver (Forwarder). The following sequence of events can occur:
1. The user launches DataGrabber.
2. The Android system invokes onCreate() of DataGrabber.
3. DataGrabber sends an intent to Forwarder.
4. The system invokes onReceive() of Forwarder.
5. Forwarder sends an intent to Leaker.
6. The system invokes onCreate() of Leaker.
7. Leaker retrieves the intent, extracts the data, and sends it via SMS.

To track such complex interactions, a static analyzer needs a model of the Android system. Amandroid extends the model of FlowDroid to capture both control and data dependencies among components, enabling the detection of critical ICC data flows.

## 3. The Amandroid Approach
Amandroid follows a pipeline of main steps:
1. **IR Translation**: Converts the app's Dalvik bytecode to an intermediate representation (IR).
2. **Environment Modeling**: Emulates the interactions of the Android system with the app to limit the scope of the analysis for scalability.
3. **Inter-component Data Flow Graph (IDFG)**: Builds a flow- and context-sensitive IDFG, tracking object creation sites and their dynamic types.
4. **Data Dependence Graph (DDG)**: Constructs the DDG on top of the IDFG, capturing explicit information flows.
5. **Security Analysis**: Applies various types of security analyses using the information in the IDFG and DDG.

### 3.1 IR Translation
Amandroid decompresses the APK file, retrieves the DEX file, and converts it to an IR format. Our dex2IR translator is a modified version of the original dexdump tool.

### 3.2 Environment Modeling
An Android app runs in an environment provided by the Android system. Amandroid models the Android environment, following the approach of FlowDroid with crucial extensions to handle event-driven control flows and inter-component communication.

## 4. Experimentation
Amandroid was evaluated on hundreds of real-world apps. The core framework takes tens of seconds to analyze one app, and specialized analyses require minimal additional coding. Amandroid outperforms existing tools in handling a wide range of security issues related to ICC and has identified new security problems in Android apps.

## 5. Limitations
Discuss the limitations of Amandroid, including any areas where further improvements can be made.

## 6. Related Research
Compare Amandroid with existing tools and highlight its unique contributions and advantages.

## Conclusion
Amandroid provides a comprehensive and precise framework for static analysis of Android apps, addressing the challenges of event-driven systems, large library bases, and inter-component communication. It outperforms existing tools and has identified new security issues, making it a valuable tool for security vetting of Android apps.