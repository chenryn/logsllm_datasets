title:Amandroid: A Precise and General Inter-component Data Flow Analysis
Framework for Security Vetting of Android Apps
author:Fengguo Wei and
Sankardas Roy and
Xinming Ou and
Robby
Amandroid: A Precise and General
Inter-component Data Flow Analysis Framework for
Security Vetting of Android Apps
Fengguo Wei, Sankardas Roy, Xinming Ou, Robby
Department of Computing and Information Sciences
Kansas State University
{fgwei,sroy,xou,robby}@ksu.edu
ABSTRACT
We propose a new approach to conduct static analysis for
security vetting of Android apps, and built a general frame-
work, called Amandroid for determining points-to informa-
tion for all objects in an Android app in a ﬂow and context-
sensitive way across Android apps components. We show
that: (a) this type of comprehensive analysis is completely
feasible in terms of computing resources needed with mod-
ern hardware, (b) one can easily leverage the results from
this general analysis to build various types of specialized se-
curity analyses – in many cases the amount of additional
coding needed is around 100 lines of code, and (c) the re-
sult of those specialized analyses leveraging Amandroid is
at least on par and often exceeds prior works designed for
the speciﬁc problems, which we demonstrate by comparing
Amandroid’s results with those of prior works whenever we
can obtain the executable of those tools. Since Amandroid’s
analysis directly handles inter-component control and data
ﬂows, it can be used to address security problems that re-
sult from interactions among multiple components from ei-
ther the same or diﬀerent apps. Amandroid’s analysis is
sound in that it can provide assurance of the absence of the
speciﬁed security problems in an app with well-speciﬁed and
reasonable assumptions on Android runtime system and its
library.
Categories and Subject Descriptors
D.2.4 [Software Engineering]: Software/Program Veri-
ﬁcation—Validation; K.6 [Management of Computing
and Information Systems]: Security and Protection
General Terms
Static Analysis; Mobile Security
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright 2014 ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660357.
Keywords
Android Application; ICC (Inter-component Communica-
tion); points-to analysis;
information leakage; vulnerable
app; malware; security vetting
1.
INTRODUCTION
The Android smart-phone platform is immensely popular
and has by far the largest market share among all types of
smartphones worldwide. However, there have been widely
reported security problems due to malicious or vulnerable
applications running on Android devices [15, 19, 34, 36, 37].
The current solutions to those security problems are mostly
reactive (e.g., pulling an app oﬀ the market after poten-
tial damage may have already been done). There have not
been eﬀective vetting methods that market operators can
rely upon to ensure apps entering a market (e.g., Google
Play) are free of certain types of security problems. Often
times, they have to resort to dynamic analysis — running
an app in a testing environment with the hope of identifying
the problematic behaviors, if any, during the test run (e.g.,
Google Bouncer [3]).
Many security problems of Android apps can be discov-
ered by static analysis on the Dalvik bytecode of the apps,
and there have been a number of earlier eﬀorts along this
line [8, 11, 14, 17, 20, 23, 25]. Compared with dynamic anal-
ysis, static analysis has the advantage that a malicious app
cannot easily evade detection by changing their behaviors
in a testing environment, and it can also provide a compre-
hensive picture of an app’s possible behaviors as opposed to
only those that manifest during the test run. Due to the in-
herent undecidability nature of determining code behaviors,
any static analysis method must make a trade-oﬀ between
computing time and the precision of analysis results. Preci-
sion can be characterized as metrics on: (a) missed behaviors
(app behaviors missed by the analyzer that may present se-
curity risks, also referred to as false negatives), and (b) false
alarms (behaviors that an app does not possess but the an-
alyzer fails to rule out, also referred to as false positives).
Android Static Analysis Challenges: A practical chal-
lenge in applying static analysis is to control the rate of false
alarms while not missing any (potentially dangerous) behav-
iors of apps. This is especially signiﬁcant due to a number
of features of Android.
1. Android is an event-based system. The control ﬂow is
driven by events from an app’s environment that can trig-
ger various method calls. How to capture all the possible
control ﬂow paths in this open and reactive system while
not introducing too many spurious paths (false alarms)
is a signiﬁcant challenge.
2. The Android runtime consists of a large base of library
code that an app depends upon. The event-driven na-
ture makes a large portion of the control-ﬂow involve the
Android library. While fully analyzing the whole library
code could improve the analysis precision, it may also be
prohibitively expensive.
3. Android is a component-based system and makes exten-
sive use of inter-component communication (ICC). A com-
ponent can send an intent to another component. The
target of an ICC could be speciﬁed explicitly in the intent
or be implicit and decided at runtime. Both control and
data can ﬂow through the ICC mechanism from one com-
ponent to another. Capturing all ICC ﬂows accurately is
a major challenge in static analysis.
Prior research has attempted to address some of the above
challenges. For example, FlowDroid [6, 17] formally models
the event-driven life cycle of an Android app in a “dum-
myMain” method, but it does not address ICC. Epicc [25]
statically analyzes ICC and uses an IDE [29] framework to
solve for ICC call parameters, but does not link the ICC call
sources to targets and does not perform dataﬂow analysis
across component-boundaries. CHEX [23] uses a diﬀerent
approach to the modeling of the Android environment, by
linking pieces of code reachable from entry points (called
splits) as a way to discover data ﬂows between the Android
application components, but it does not address data ﬂow
through ICC. These prior works have all inspired this work.
We designed and built Amandroid1 – an inter-component
data ﬂow analysis framework tailored for Android apps. The
executable and source of Amandroid are publicly available.2
The main contributions from Amandroid are:
1. Amandroid computes points-to information for all ob-
jects and their ﬁelds at each program point and calling
context. The points-to information is extremely useful
for analyzing a number of security problems that have
been addressed in prior works using customized methods.
Amandroid can be used to address these wide-range se-
curity problems directly with very little additional work.
We also show that such comprehensive analysis scales to
large apps.
2. As part of the computation of object points-to informa-
tion, Amandroid can build a highly precise inter-procedural
control ﬂow graph (ICFG) of the whole app, that is both
ﬂow and context sensitive [24]. This is a side beneﬁt of
our approach compared to prior works that have adopted
existing static analysis frameworks (e.g., Soot [32] and
Wala [16]), which build ICFG with less precision [4, 22].
3. Amandroid’s ICFG includes inter-component communi-
cation (ICC) edges. That is, Amandroid treats ICC just
like method calls, and both control and data can ﬂow
on the edges. Amandroid is able to conduct an elemen-
tary string analysis (due to its object-sensitivity) for in-
ferring ICC call parameters, and links the ICC source to
the call targets based on a ﬂow/context-sensitive match-
ing algorithm. Amandroid models the Android environ-
1Aman means safe/secure in the Indonesian language.
2Amandroid is available in the Sireum software distribution
at http://amandroid.sireum.org
ment for both control and data, so that important intent
data ﬂows can be captured according to inherent Android
properties. We call Amandroid’s ICFG together with
each node’s reaching fact set as Inter-component Data
Flow Graph (IDFG).
4. Amandroid builds the data dependence graph (DDG) of
the app from the IDFG. An analyst can add a plugin on
top of Amandroid to detect the speciﬁc security problem
he/she is interested in. Through extensive experimenta-
tion, we demonstrate that a variety of security problems
can be reduced to querying DDG and IDFG.
We evaluated Amandroid on hundreds of real-world apps
(753 Google Play apps shared by the Epicc group, and 100
potentially malicious apps from Arbor Networks). Our ex-
perimental results show that Amandroid scales well. We
used Amandroid to address security problems such as pass-
word leakage, OAuth token leakage, intent injection, and
misuse of crypto APIs. The core framework of Amandroid
takes tens of seconds to analyze one app on average. All the
specialized analyses require very little additional coding ef-
fort (around 100 LOC) to leverage Amandroid’s IDFG and
DDG to address the speciﬁc problem, and the additional
running time is negligible (typically in the order of tens of
miliseconds).
We then experimentally compare Amandroid with two
static analyzers for Android: FlowDroid [6, 17] and Epicc [25],
and show that Amandroid can address a wide range of se-
curity problems due to inter-component communications in
Android that cannot be handled by these existing tools.
Amandroid also found multiple crucial security problems in
Android apps that were never reported before in the litera-
ture.
The rest of the paper is organized as follows. Section 2
gives a motivating example. Section 3 describes in detail
Amandroid’s analysis methods. We discuss experimentation
of our approach in Section 4, limitations of Amandroid in
Section 5, and related research in Section 6.
2. A MOTIVATING EXAMPLE
A malicious app can conduct bad behaviors by manipu-
lating the inter-component nature of Android system and
try to obfuscate its true objectives. Figure 1a shows an ex-
ample of such apps (named “sensitive-sms”), with snippets
of Java code shown in the boxes above the dotted line, each
of which represents a component of the app. In Android,
an Activity component implements the UI of the app, and
a Broadcast Receiver component receives a broadcast mes-
sage from one component (or the system) and takes certain
actions. An Android app does not have a “main” method;
rather, components are invoked through the various callback
methods (including lifecycle methods). The control ﬂows
and data ﬂows among the app components through the An-
droid system are labeled with the event number. Depending
on the events, the system invokes the lifecycle methods of
the components.
It also remembers the recently sent in-
tents and passes them around, which can be abstracted in a
component-level environments.
The following sequence of events as labeled in the ﬁg-
ure can happen in reality: (1) the user (or another app)
launches DataGrabber ; (2) this causes the Android system to
invoke the component’s lifecycle method onCreate(); (3) this
method creates an explicit intent and sends it (L9 ) to a
(a) A possible execution sequence of the “sensitive-sms” app
(b) The Life Cycle Diagram of
an Activity (adapted from [1])
Figure 1: An Android app and an Activity lifecycle
BroadcastReceiver named Forwarder ; (4) the system invokes
Forwarder ’s lifecycle method onReceive(); (5) this method
sends an explicit intent (L19 ) to the Leaker Activity; (6) this
intent causes the system to invoke Leaker ’s onCreate() method;
and (7) this method retrieves the intent from the system
(L25 ), extracts the data, and sends the data through SMS
(L28 ).
A static analyzer needs a model of the Android system
to track invocation of component lifecycle methods as illus-
trated in this example. Our model of the Android environ-
ment is inspired by FlowDroid [6, 17], which uses a “dummy-
Main” method to capture all possible sequences of lifecycle
method invocations as permitted by Android. Our model
also extends that of FlowDroid by capturing the control and
data dependencies among components. For instance, it is
able to ﬁnd the inter-component control ﬂows from Data-
Grabber.onCreate to Forwarder.onReceive (Event 3 → 4).
However, we observe that FlowDroid is yet to ﬁnd crit-
ical ICC data ﬂows. As an example, it does not ﬁnd the
data ﬂows through the intents sent from DataGrabber to
Forwarder and from Forwarder to Leaker. DataGrabber
puts the sensitive information inside Intent i1 via putEx-
tra (which actually populates i1 ’s mExtras ﬁeld) and sends
i1 to Forwarder. The Android system then acts as an inter-
mediary and dispatches i1 to Forwarder.onReceive as i2.
We have found no prior works that have a mechanism to
ﬁnd the connection between i1 and i2. Furthermore, For-
warder creates a new Intent i3 and transfers the data from
i2 to i3. In fact, s2 equals to s1 that carries the sensitive in-
formation, which is now contained in i3. Finally, the secret
information is further forwarded to Leaker through intent
i3 which Leaker retrieves via getIntent() as i4. Mapping
back i4 to i3 is more complicated as it is not passed as an
explicit parameter to the callback method. Again, no prior
works can ﬁnd the link between i3 and i4, without which,
one will have no chance of knowing that s3 (retrieved from
i4 ) equals to s1 and carries sensitive information, which is
sent out through SMS.
We observe that to capture this type of intricate informa-
tion ﬂow, the model of the Android environment needs to
include both the control and the relevant data specialized
for Android (intent in this case). Moreover, the analyzer
must be able to conduct data-ﬂow analysis across component
boundaries to identify this type of security problems that
require multiple components working together. Prior works
(e.g., FlowDroid and Epicc) have made important steps to-
wards this goal, but none has moved further enough. While
one could extend the prior works to address this limitation,
we use a diﬀerent approach (outlined in Section 1) which we
describe in more details in the following sections.
3. THE AMANDROID APPROACH
Figure 2 illustrates the pipeline of Amandroid’s main steps:
(1) Amandroid converts an app’s Dalvik bytecode to an in-
termediate representation (IR) amiable to static analysis;
(2) it generates an environment model that emulates the in-
teractions of the Android System with the app to limit the
scope of the analysis for scalability; (3) Amandroid builds
an inter-component data ﬂow graph (IDFG) of the whole
app. IDFG includes the control ﬂow graph spanning over
all the reachable components of the app; it also tracks the
set of object creation sites that reach each program point
(thus, Amandroid knows the dynamic types of objects ﬂow-
ing to any particular program point, and where they were
created and modiﬁed along the way); (4) it builds the data
dependence graph (DDG) on top of the IDFG, which im-
plies explicit information ﬂow; and (5) Amandroid then can
be applied in various types of security analysis using the in-
formation presented in IDFG and DDG. For example, one
can use DDG to ﬁnd whether there is any information leak-
age from a sensitive source to a critical sink by querying
whether there is a data dependence chain from source to
sink.
3.1
IR Translation
Amandroid decompresses the input app apk ﬁle and re-
trieves a dex ﬁle and covert it to an IR format for subsequent
analysis. Our dex2IR translator is a modiﬁcation of the orig-
inal dexdump tool shipped with the Android platform tool
set; the C++ source of the original dexdump is available in
the Android build package, and we modiﬁed it so that it can
also produce the app representation in our IR format.
3.2 Environment Modeling
An Android app is not a closed system; the Android sys-
tem provides an environment in which the app runs. The
code that may execute during the lifetime of an app is not
all present in the app’s package. The Android system (which
includes the Android runtime) does a bulk of the work in ad-
dition to that by the app’s code. With the “sensitive-sms”
app example in Section 2, we demonstrated that a static
analyzer needs to model the Android system to analyze the
Figure 2: The Amandroid Analysis Pipeline
system-deﬁned control ﬂows in the app3. Our modeling of
the Android environment follows that of FlowDroid [6, 17]
with a few crucial extensions described below.
In Android, numerous types of events (e.g., system events,
UI events, etc.) can trigger callback methods deﬁned in the
app. As an example, while an Activity A is running, if an-
other Activity B comes to the foreground, it is considered an
event. This event can trigger A.onPause, which is either de-
ﬁned in the app’s code, or in the Android framework if the
developer did not override the default method. Figure 1b
depicts the life cycle of an Activity. There are seven impor-
tant life-cycle methods of an Activity: onCreate, onPause,
onResume, etc.; they each represent a state in the transition
diagram. Android documentation speciﬁes other states such
as Activity running and Activity shut down.