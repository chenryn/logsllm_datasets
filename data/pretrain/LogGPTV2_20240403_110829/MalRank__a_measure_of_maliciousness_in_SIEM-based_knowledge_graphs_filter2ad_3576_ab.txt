Proxy
Proxy
Proxy, DNS
DNS
The majority of the malware serving networks (e.g., exploit kits, drive-by-download, malvertis-
ing) are composed of a tree-like structure in which the victims are usually redirected through
various hops before landing on the main distribution site [33]
If malware is trying to disguise itself as an innocent application (e.g., a browser) to reach out
using HTTP, the user agent string might still differ from the major UA used by the workstation
In many cases, if a domain is listed as a malicious, intuitively we could assume that the IP
address it resolves to is also malicious for the duration of that resolution [20, 23, 35, 50]
Infrastructure reuse by cybercriminals
domains connected by CNAME records share intrinsic relation and are likely to be in a ho-
mophilic state [39]
Cybercriminals tend to utilize almost an entire address range for their malicious purpose [30] OSINT: IPR/ASN
DNS
Malicious domains tend to be hosted on a pool of IPs hosted by specific hosting providers (i.e,
ASs) [4, 23, 30]
Same organization could be responsible for multiple ASs
OSINT: IPR/ASN
OSINT: IPR/ASN
X.509 certificates reuse by cybercriminals. It could be costly and inefficient to register a cer-
tificate for each domain/IP under the attackers’ control, and it is easier to reuse a pool of
certificates
Intended to counter malicious self-signed certificates and rogue intermediate certificates
Although the Subject’s Distinguished Name (DN) can be a bogus name, it might still be useful
to utilize with the intuition that a rogue organization might have more than one certificate
Set of issuer might be preferred by a group of cybercriminals due to an easier validation process
[3], or a compromise [40]
OSINT: X.509
OSINT: X.509
OSINT: X.509
OSING: X.509
RequestedAccessToSubDomainOf(D)omainfqdntiObserved: mal, ben(M)acmacAddr: (U)serAgentuserAgentStringUSes(I)PipAddr:version: ipv4, ipv6RequestedAccessToResolvesTo(X)509Certﬁngerprint: md5, sh1, sh256serialNumberAssociatedWithAssociatedWithIp(R)angecidrRange(A)SasNumber(O)rganizationname: fullText, DNIssuedByIssuedForAssignedToBelongsToisInRangeNameServerForMailServerForAliasForREferedToSignedBytiObserved: mal, benisInRange Similar to event logs, OSINT and CTI could also pivot endlessly,
therefore, it is important to also define a scope for the related OS-
INT. OSINT Framework1 provides a good overview of all available
OSINT sources, Enaqx2 provides a comprehensive collection of OS-
INT tools and Slatman3 provides a curated list of CTI. Furthermore,
due to the fact that our event logs can reach up to 10 terabyte (TB)
gernerated per day, it is also important to select those OSINT and
CTI which can be collected/crawled at scale. Lastly, we would like
to also distinguish between passive and active collection. We define
active as those that require an active engagement with a server or
an API for the collection, e.g., DNS RRs. While passives are those
that can be collected as bulk without an active engagement (e.g.,
ASN).
Thus for the purpose of this research we limit our OSINT/CTI
to IPRanges, ASN, X.509 certificates, DNS Resource Records, and our
CTI to malicious domains and IPs. Please refer to Figure 1 for the
related nodes and relationships extracted from those OSINT, and
table 1 for the description and importance of each relationship.
3 MALRANK
3.1 Problem Definition and Requirements
At high level, we would like to reason about an entity based on its
association with other entities, with the intuition that malicious
entities tend to share some global properties. In this regard, graphs
are ideal for this task due to their capability to preserve the cor-
relation and association among different entities. That is why we
formulate our problem as a graph-based inference problem. More
specifically,
Given:
• A directed weighted graph G(V , E) where V corresponds to
the collection of entities (e.g., domains, IPs), and E corre-
sponds to the set of relationships between those entities (e.g.,
resolvesTo).
• A Prior p (label) and prior confidence c defined over V, where
p ∈ {0, 1} and c ∈ [0, 1]. Where p = 0 represents a neutral
node and p = 1 indicates a known malicious node. c represent
the confidence in the label, 0 being no confidence ,and 1
absolute confidence in trustworthiness of that label (expected
to be set according to the TI source).
Find:
• Maliciousness score s (MalRank) of a node x, i.e., s(x) ∈ [0, 1].
Higher MalRank score indicates a higher risk.
Graph-based inference has been studied widely in a variety of
domains. Although it is referred to differently depending on the
domain (e.g., influence, diffusion, propagation, classification), at
the core, the problem can be simplified to the inference of nodes’
properties based on their neighbors. In our case, inferring the ma-
liciousness of a node based on the maliciousness of its neighbors.
This is also known as guilt-by-association throughout the literature
[46]. Before providing an overview of the most related algorithms,
it is important to first define our main requirements for our use
1http://osintframework.com/
2https://github.com/enaqx/awesome-pentest#osint-tools
3https://github.com/hslatman/awesome-threat-intelligence/
case that would allow us to better reason about the limitations of
the previous algorithms.
Single Diffused Label. Due to the fact that our graph (de-
3.1.1
scribed in the previous section) is constructed from entities and
relationships observed in an enterprise’s SIEM, it is quite unlikely
that the number of benign and malicious entities are proportional,
i.e., majority of the entities are expected to be benign. This is due to
the fact that the most traffic within an organization is expected to be
benign. That is why it is important for us to consider only one label
(maliciousness). Therefore the algorithm should be able to infer a
maliciousness score for any given node based on the maliciousness
scores of its neighbours while taking into consideration the number
of neutral neighbours to reduce the maliciousness, i.e., if a node
has a high degree with a large number of neutral neighbours, it is
less likely to be malicious The intuition here is that, if an entity is
observed many times, it is less likely to be a malicious entity (e.g.,
a malicious domain is more likely to be accessed by a few number
of enterprise’s workstations rather than the majority of them [32]).
This requirement would also allow us to eliminate the super node
issues (nodes with a high degree, e.g., content delivery networks,
web hosting services, or advertising networks).
3.1.2 Directed Weighted Propagation. The next important require-
ment is the ability to define edge weights. Since the knowledge
graph is expected to consist of various types of nodes and edges,
it is important that the algorithm is capable of considering how
maliciousness should be propagated through a particular associ-
ation. For instance, a resolvesTo edge should have a much higher
influence than requestedAccessTo. Furthermore, although the ma-
jority of the relationships described in the previous section can be
treated as bidirectional edges, the algorithm should be able to not
only incorporate edge directions but also different edge weights
on different directions. This would allow one to have much more
control over not only the influence weights but also its directions.
This is important as it can stop an adversary from defeating the
algorithm by connecting to a large number of neutral nodes (e.g.,
referring to large number of benign domains, or adding CNAME
record pointing to other legitimate domain). Although it’s quite un-
likely that this is happening at the moment, one must also consider
this as part of the threat modeling.
3.1.3 Maliciousness Influence Maximization. Maliciousness should
be treated like a disease, i.e., the more malicious a node is, the higher
its influence. This ensures that the maliciousness does not disap-
pear within a graph of extreme bias towards benignness. Thus, the
algorithm should have a mechanism to adjust the edge weights de-
pending on the source’s maliciousness score, i.e., if a node gets more
malicious, the edge weights on the edges connecting that node to
others should be increased accordingly thus allowing maliciousness
to be propagated more effectively, and the opposite.
3.2 Background: Graph-based Inference
Algorithms
As mentioned, there are various graph-based inference algorithms
applied in different domains. While investigating all related graph-
based inference algorithms in details is beyond the scope of this
paper, it is still important to mention the influential related work
Table 2: Related graph-based inference algorithms and their shortcomings for the purpose of threat detection.
Algorithm
Description
Shortcomings
Belief Propagation (BP)
Also known as sum-product, one of the most popular and successful
applications of label propagation used in probabilistic graphical
models, e.g., Bayesian Networks and Markov Random Field. BP
infers a node’s label from some prior knowledge about that node and
other neighboring nodes by iteratively passing messages between
all pairs of nodes in the graph [38, 48]. BP is the most widely adopted
graph based inference algorithm used for threat detection (further
described in section 5).
Random Walk with Restart
(RWR)
RW-based algorithms emulate random walkers taking steps within
a graph while having a small probability of teleporting to a random
node, rather than following an out-edge. RWR has been successfully
utilized in numerous related setting, e.g., Google’s classic PageRank
[8, 37], TrustRank [26], Distrust Rank [15] and SybilRank [10].
Influence and Diffusion
SimRank
Graph-based
Supervised Learning
Semi-
GraphSAGE
Designed to study the influence and diffusion in social networks
such as how a group of people might adopt an idea, or how informa-
tion might spread. Linear Threshold (LT), and Independent Cascade
(IC) [22] are among the most notable algorithms in this field.
A graph-based structural context similarity measure with the in-
tuition that two objects are similar if they are related to similar
objects, which intuitively can be adapted to measure influence [21].
Also known as label propagation tackles the problem of unlabeled
data with the principle idea that unlabeled data can be utilized
to decide the metric between data points and improve models’
performance [45]
A node embedding algorithm that uses neural networks to learn em-
beddings for nodes in the graph structure while taking aggregated
features from a node’s local neighborhood [18]
First, BP is designed to work best with probabilistic graphical models which do
not generally take into consideration the type of nodes/edges nor directions [16].
Second, BP expects a balance among labels which is not the case for us (i.e., extreme
bias toward benignness). Hence, due to the numerical instability of multiplication,
maliciousness ends up disappearing for the majority of the nodes that has a con-
nection to a large number of benign nodes. Consider a node having 3 connection to
neutral nodes with P(xunknown) = 0.5 and 1 connection to a malicious node with
P(xmal) = 1, running BP until convergence will change the score of the node from
originally 0.5 (P(xmal) = P(xben) = 0.5) to P(xmal) = 0.508 , which is clearly, a
low score for such a structure.
Inability to define different types of nodes and edges, or the ability to introduce
weights on the edges. Although there have been a number of works tackling those
specific issues, e.g., Personalized PageRank [6] and Topic-Sensitive PageRank [19] to
incorporate the node’s context (types), Biased Random Walks, Weighted PageRank
[47] introducing the concept of edge weights, yet RWR are not adaptable for threat
detection. RWR algorithms are designed to be a measure of importance and not
beliefs, and importance is a relative measure which means, in the most of RWR-
based algorithms the values are never created nor destroyed, rather it is passed from
one node to another. This works great to measure importance, but not maliciousness.
Maliciousness needs to be treated like a disease. Lastly, RWR-based algorithms
assume a connected graph whereas our knowledge graph is extremely sparse [25].
These algorithms are extremely simple and require a major adjustment to support
our main requirements, i.e., directional and weighted edges, echo cancelation, and
influence maximization.
Computational complexity, which makes it impossible to use considering the scale
of our knowledge graph
Require a major adjustment to support our main requirements.
Implementation challenges for the scale of our knowledge graph (i.e., challenges in
parallel and scalable neural network).
and their shortcomings, hence leading us to the introduction of our
MalRank algorithm, and how it is designed to fit our requirements
the best. Table 2 provides a brief overview of the most relevant
graph-based inference algorithms on their shortcomings. We would
like to refer the reader to the references provided to learn more
about the details of each algorithm.
3.3 MalRank Formulation
Let us denote the maliciousness score of a node x ∈ V as s(x),
following our earlier intuition and definition, s(x) can be calculated
with:




ˆωyx(t) .s(y)
ˆωyx(t)
y∈N(x)
t ∈Txy
y∈N(x)
t ∈Txy
s(x) = cso(x)so(x) + (1 − cso(x))
(1)
where so(x) ∈ [0, 1] refer to the prior of node x. If x is known ma-
licious node so(x) = 1, and 0 otherwise (usually set if x is observed
in a TI source). cso(x) ∈ [0, 1] is the prior strength of so(x). This
indicates the trust level of the prior. The value is decided according
to the trust level for the corresponding TI source. This is introduced
to control low quality threat intelligence, we shall discuss this later.
N(x) is the set of nodes neighboring node x, Txy is the set of edge
types between x and y. ˆωxy(t) is the maximized/minimized edge
weight on the edge type t directed from x to y.
3.3.1 Maximized/Minimized Edge Weight, ˆωxy(t). As discussed pre-
viously, there are three main requirements to control the propaga-
tion and influence: first, the ability to decay the influence differ-
ently on different edge types. This is achieved by introducing edge
weights, ωxy(t) denoting the weight on the edge of type t between
x and y. Second, the ability to have different weights on different
directions of the edges. This is achieved by distinguishing the di-
rection of the weight. i.e., ωxy(t) (cid:44) ωyx(t). It is worth to mention
that this is how the algorithm sees the directions. Although our
knowledge graph is a directed graph, from the algorithm perspec-
tive all edges are bidirectional, but the influence can be different
on each direction. This way, one could define the ωxy(t) = 0 and
ωyx(t) = k if the edge type t between x and y is directed from y to
x only. Lastly, the ability to adjust this decay based on the score of
the influencer. Thus, introducing the maximized/minimized edge
weight ( ˆωxy(t)). This value is calculated by taking the weighted
average of the original edge weight and the source maliciousness
score:
0,
xy(t) = 0
if ωo
otherwise
xy(t) ,
where ωo
ks(x) + (1 − k).ωo
ˆωxy(t) =
xy(t) is the original edge weight on edge type t directed
from node x to y and k is the maximizer factor which is expected
to take a value between 0.5 and 0.8. The higher k values enforce
a higher maximization for the new weight ( ˆω) according to the
influencer’s score.
(2)
Iterative MalRank. MalRank can also be calculated iteratively
3.3.2
as follows:
si +1(x) = cso(x)so(x) + (1 − cso(x))


y∈N(x)