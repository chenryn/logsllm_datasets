title:When good instructions go bad: generalizing return-oriented programming
to RISC
author:Erik Buchanan and
Ryan Roemer and
Hovav Shacham and
Stefan Savage
When Good Instructions Go Bad:
Generalizing Return-Oriented Programming to RISC
Erik Buchanan, Ryan Roemer, Hovav Shacham, and Stefan Savage
Department of Computer Science & Engineering
University of California, San Diego
La Jolla, California, USA
ABSTRACT
This paper reconsiders the threat posed by Shacham’s “return-ori-
ented programming” — a technique by which W⊕X-style hardware
protections are evaded via carefully crafted stack frames that divert
control ﬂow into the middle of existing variable-length x86 instruc-
tions — creating short new instructions streams that then return. We
believe this attack is both more general and a greater threat than the
author appreciated. In fact, the vulnerability is not limited to the
x86 architecture or any particular operating system, is readily ex-
ploitable, and bypasses an entire category of malware protections.
In this paper we demonstrate general return-oriented program-
ming on the SPARC, a ﬁxed instruction length RISC architecture
with structured control ﬂow. We construct a Turing-complete li-
brary of code gadgets using snippets of the Solaris libc, a general
purpose programming language, and a compiler for constructing
return-oriented exploits. Finally, we argue that the threat posed
by return-oriented programming, across all architectures and sys-
tems, has negative implications for an entire class of security mech-
anisms: those that seek to prevent malicious computation by pre-
venting the execution of malicious code.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
General Terms
Security, Algorithms
Keywords
Return-oriented programming, return-into-libc, SPARC, RISC
1.
INTRODUCTION
The conundrum of malicious code is one that has long vexed the
security community. Since we cannot accurately predict whether a
particular execution will be benign or not, most work over the past
two decades has instead focused on preventing the introduction and
execution of new malicious code. Roughly speaking, most of this
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’08, October 27–31, 2008, Alexandria, Virginia, USA.
Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.
activity falls into two categories: efforts that attempt to guarantee
the integrity of control ﬂow in existing programs (e.g., type-safe
languages, stack cookies, XFI) and efforts that attempt to isolate
“bad” code that has been introduced into the system (e.g., W⊕X,
ASLR, memory tainting, virus scanners, and most of “trusted com-
puting”).
The W⊕X protection model typiﬁes this latter class of efforts.
Under this regime, memory is either marked as writable or exe-
cutable, but may not be both. Thus, an adversary may not inject
data into a process and then execute it simply by diverting con-
trol ﬂow to that memory, as the execution of the data will cause
a processor exception. While it is understood that W⊕X is not
foolproof [26, 10, 11], it was thought to be a sufﬁciently strong
mitigation that both Intel and AMD modiﬁed their processor ar-
chitectures to accommodate it and operating systems as varied as
Windows Vista [13], Linux [25, 21], Mac OS X, and OpenBSD [17,
18] now support it. However, in 2007 Shacham demonstrated that
W⊕X protection could be entirely evaded through an approach
called return-oriented programming [23]. In his proof-of-concept
attack, new computations are constructed by linking together code
snippets (“gadgets”) synthesized by jumping into the middle of ex-
isting x86 instruction sequences that end with a “ret” instruction.
The ret instructions allow an attacker who controls the stack to
chain instruction sequences together. Because the executed code is
stored in memory marked executable (and hence “safe”), the W⊕X
technique will not prevent it from running.
On the surface, this seems like a minor extension of the classic
“return-to-libc” attack, one that depends on an arcane side-effect
of the x86’s variable length instruction set and is painful and time-
consuming to implement, yielding little real threat. However, we
believe that this impression is wrong on all counts.
First, we argue that return-oriented programming creates a new
and general exploit capability (of which “return-to-libc” is a minor
special case) that can generically sidestep the vast majority of to-
day’s anti-malware technology. The critical issue is the ﬂawed, but
pervasive, assumption that preventing the introduction of malicious
code is sufﬁcient to prevent the introduction of malicious compu-
tation. The return-oriented computing approach ampliﬁes the abil-
ities of an attacker, so that merely subverting control ﬂow on the
stack is sufﬁcient to construct arbitrary computations. Moreover,
since these computations are constructed from “known good” in-
structions, they bypass existing defenses predicated on the assump-
tion that the attacker introduces new code.
Second, we will show that the return-oriented model is not lim-
ited to the x86 ISA or even variable-length instruction sets in gen-
eral. In this paper, we describe return-oriented attacks using the
SPARC ISA and synthesize a range of gadgets from snippets of the
Solaris C library, implementing basic memory, arithmetic, logic,
control ﬂow, function, and system call operations. As the SPARC
ISA is in many ways the antithesis of the x86 — ﬁxed length, min-
imalistic RISC instructions, numerous general-purpose registers,
and a highly structured control ﬂow interface via the register win-
dow mechanism — we speculate that the return-oriented program-
ming model is generally applicable across both instruction set ar-
chitectures and operating systems.
Finally, while Shacham’s original attack was indeed complex
and laborious, in this paper we demonstrate a generic gadget exploit
API, scripting language, and exploit compiler that supports sim-
ple general-purpose return-oriented programming. Thus, we pose
that the return-oriented programming exploit model is usable, pow-
erful (Turing-complete), and generally applicable, leaving a very
real and fundamental threat to systems assumed to be protected by
W⊕X and other code injection defenses.
In the remainder of this paper, we will provide a brief overview
of the SPARC architecture and discuss the search for SPARC gad-
gets and resulting gadget catalog. We then describe our gadget API
and dedicated exploit language compiler, and provide examples of
return-oriented exploits. We conclude with a discussion of defenses
and areas for future return-oriented programming research.
2. SPARC ARCHITECTURE OVERVIEW
The SPARC platform differs from Intel x86 in almost every sig-
niﬁcant architectural feature. Crucially, it shares none of the prop-
erties of the x86 on which Shacham relied for his attack. SPARC is
a load-store RISC architecture, whereas the x86 is memory-register
CISC. SPARC instructions are ﬁxed-width (4 bytes for 32-bit pro-
grams) and alignment is enforced on instruction reads, whereas
x86 instructions are variable-length and unaligned. The SPARC
is register-rich, whereas the x86 is register-starved. The SPARC
calling convention is highly structured and based on register banks,
whereas the x86 uses the stack in a free-form way. SPARC passes
function arguments and the return address in registers, the x86 on
the stack. The SPARC pipelining mechanism uses delay slots for
control transfers (e.g., branches), whereas the x86 does not.
Although the rest of this section only surveys the SPARC fea-
tures relevant to stack overﬂows and program control hijacking,
more detailed descriptions of the SPARC architecture are variously
available [27, 28, 20].
2.1 Registers
SPARC provides 32 general purpose integer registers for a pro-
cess: eight global registers %g[0-7], eight input registers %i[0-
7], eight local registers %l[0-7], and eight output registers %o[0-
7]. The SPARC %g[0-7] registers are globally available to a pro-
cess, across all stack frames. The special %g0 register cannot be set
and always retains the value 0.
The remaining integer registers are available as independent sets
per stack frame. Arguments from a calling stack frame are passed
to a called stack frame’s input registers, %i[0-7]. Register %i6 is
the frame pointer (%fp), and register %i7 contains the return ad-
dress of the call instruction of the previous stack frame. The local
registers %l[0-7] can be used to store any local values.
The output registers %o[0-7] are set by a stack frame calling
a subroutine. Registers %o[0-5] contain function arguments, reg-
ister %o6 is the stack pointer (%sp), and register %o7 contains the
address of the call instruction.
2.2 Register Banks
Although only 32 integer registers are visible within a stack frame,
SPARC hardware typically includes eight global and 128 general
purpose registers. The 128 registers form banks or sets that are
activated with a register window that points to a given set of 24
registers as the input, local, and output registers for a stack frame.
On normal SPARC subroutine calls, the save instruction slides
the current window pointer to the next register set. The register
window only slides by 16 registers, as the output registers (%o[0-
7]) of a calling stack frame are simply remapped to the input regis-
ters (%i[0-7]) of the called frame, thus yielding eight total register
banks. When the called subroutine ﬁnishes, the function epilogue
(ret and restore instructions) slides back the register window
pointer.
SPARC also offers a leaf subroutine, which does not slide the
register window. For this paper, we focus exclusively on non-leaf
subroutines and instruction sequences terminating in a full ret and
restore.
When all eight register banks ﬁll up (e.g., more than eight nested
subroutine calls), additional subroutine calls evict register banks to
respective stack frames. Additionally, all registers are evicted to
the stack by a context switch event, which includes blocking sys-
tem calls (like system I/O), preemption, or scheduled time quantum
expiration. Return of program control to a stack frame restores any
evicted register values from the stack to the active register set.
2.3 The Stack and Subroutine Calls
The basic layout of the SPARC stack is illustrated in Fig. 1. On
a subroutine call, the calling stack frame writes the address of the
call instruction into %o7 and branches program control to the sub-
routine.
After transfer to the subroutine, the ﬁrst instruction is typically
save, which shifts the register window and allocates new stack
space. The top stack address is stored in %sp (%o6). The following
64 bytes (%sp - %sp+63) hold evicted local / input registers. Stor-
age for outgoing and return parameters takes up %sp+64 to %sp+91.
The space from %sp+92 to %fp is available for local stack variables
and padding for proper byte alignment. The previous frame’s stack
pointer becomes the current frame pointer %fp (%i6).
A subroutine terminates with ret and restore, which slides the
register window back down and unwinds one stack frame. Program
control returns to the address in %i7 (plus eight to skip the original
call instruction and delay slot). By convention, subroutine return
values are placed in %i0 and are available in %o0 after the slide. Al-
though there are versions of restore that place different values in
the return %o0 register, we only use %o0 values from plain restore
instructions in this paper.
2.4 Buffer Overﬂows and Return-to-Libc
SPARC stack buffer exploits typically overwrite the stack save
area for the %i7 register with the address of injected shell code or
an entry point into a libc function. As SPARC keeps values in regis-
ters whenever possible, buffer exploits usually aim to force register
window eviction to the stack, then overﬂow the %i7 save area of a
previous frame, and gain control from the register set restore of a
stack frame return.
In 1999, McDonald published a return-to-libc exploit of Solaris
2.6 on SPARC [11], modeled after Solar Designer’s original ex-
ploit. McDonald overﬂowed a strcpy() function call into a pre-
vious stack frame with the address of a “fake” frame stored in the
environment array. On the stack return, the fake frame jumped con-
trol (via %i7) to system() with the address of “/bin/sh” in the
%i0 input register, producing a shell. Other notable exploits in-
clude Ivaldi’s [8] collection of various SPARC return-to-libc exam-
ples ranging from pure return-to-libc attacks to hybrid techniques
for injecting shell code into executable segments outside the stack.
Storage
Address
Low Memory
Top of the stack
%sp
Saved registers %l[0-7]
%sp
- %sp+31
Saved registers %i[0-7]
%sp+32 - %sp+63
%sp+64 - %sp+67 Return struct for next call
%sp+68 - %sp+91 Outgoing arg. 1-5 space for caller
%sp+92 - up
%sp+__
%fp-__
%fp
%fp
- %fp+31
%fp+32 - %fp+63
%fp+64 - %fp+67 Return struct for current call
%fp+68 - %fp+91
%fp+92 - up
High Memory
Outgoing arg. 6+ for caller (variable)
Current local variables (variable)
Top of the frame (previous %sp)
Prev. saved registers %l[0-7]
Prev. saved registers %i[0-7]
Incoming arg. 1-5 space for callee
Incoming arg. 6+ for callee (variable)
Figure 1: SPARC Stack Layout
3. RETURN-ORIENTED PROGRAMMING
ON SPARC
Like other modern operating systems, Solaris includes an im-
plementation of W⊕X [16], supported by page-table hardware in
the SPARC processor. In this section we answer in the afﬁrmative
the natural question: Is return-oriented programming feasible on
SPARC?
Shacham’s original techniques make crucial use of the diversity
of unintended instructions found by jumping into the middle of x86
instructions — which simply does not exist on a RISC architecture
where all instructions are 4 bytes long and alignment is enforced
on instruction read. Furthermore, as we discussed in Section 2,
the SPARC platform is architecturally as different from the x86 as
any mainstream computing platform. None of the properties that
Shacham relied on in designing x86 gadgets carry over to SPARC.
Nevertheless, using new methods we demonstrate the feasibility
of return-oriented programming on SPARC. Our main new tech-
niques include the following:
• we use instruction sequences that are sufﬁxes of functions:
sequences of intended instructions ending in intended ret-
restore instructions;
• between instruction sequences in a gadget we use a struc-
tured data ﬂow model that dovetails with the SPARC calling
convention; and
• we implement a memory-memory gadget set, with registers
used only within individual gadgets.
A return-oriented program is really a carefully packed exploit
string buffer. Once delivered via a stack overﬂow, the program
operates as illustrated in Fig. 2. Packed exploit frames contain reg-
ister values that inﬂuence program control to jump into short in-
struction sequences in libc. Once a given libc instruction sequence
ﬁnishes and returns, the next exploit frame loads new register val-
ues and jumps to a different instruction sequence in libc. By piec-
ing together instruction sequences, we form gadgets which perform
a small unit of computation (constant assignment, addition, etc.).
And, by assembling various gadgets, we construct a return-oriented
program, capable of Turing-complete computation.
(Fig. 2 also
depicts gadget variable storage and the function call gadget stack
frame, which will be explained later).
Figure 2: Return-Oriented Program
3.1 Finding SPARC Instruction Sequences
We ﬁrst examine Solaris libc for “useful” instruction sequences,
considering the effective “operation” of the entire sequence, the
persistence of the sequence result (in registers or memory), and any
unintended side effects. We perform our experiments on a SUN
SPARC server running Solaris 10 (SunOS 5.10), with a kernel ver-
sion string of “Generic_120011-14”. We use the standard (SUN-
provided) Solaris C library (version 1.23) in “/lib/libc.so.1”
for our research, which is around 1.3 megabytes in size.
Our search relies on static code analysis (with the help of some
Python scripts) of the disassembled Solaris libc. The library con-
tains over 4,000 ret, restore terminations, each of which poten-
tially ends a useful instruction sequence. Unlike Shacham’s search
for unintended instructions and returns on x86, we are limited to
real subroutine sufﬁxes due to SPARC instruction alignment re-
strictions.
When choosing instruction sequences to form gadgets, our chief
concern is persisting values (in registers or memory) across both
individual instruction sequences as well as entire gadgets. Because
the ret, restore sufﬁx slides the register window after each se-
quence, chaining computed values solely in registers is difﬁcult.
Thus, for persistent (gadget-to-gadget) storage, we rely exclusively
on memory-based instruction sequences. By pre-assigning memory
locations for value storage, we effectively create variables for use
as operands in our gadgets.
For intermediate value passing (sequence-to-sequence), we use
both register- and memory-based instruction sequences. For register-
based value passing, we compute values into the input %i[0-7]
registers of one instruction sequence / exploit frame, so that they
are available in the next frame’s %o[0-7] registers (after the reg-
ister window slide). Memory-based value passing stores computed
/ loaded values from one sequence / frame into a future exploit
stack frame. When the future sequence / stack frame gains control,
register values are “restored” from the speciﬁc stack save locations
written by previous sequences. This approach is more complicated,
but ultimately necessary for many of our gadgets.
3.2 Constructing SPARC Gadgets
At a high level, a gadget is a combination of one or more in-
struction sequences that reads from a memory location, performs
some computational operation, and then either stores to a memory
location or takes other action. Our goal is to construct a catalog
of gadgets capable of simple memory, assignment, mathematical,
logic, function call and control ﬂow operations. We review our
useful instruction sequences found from static analysis of libc and
group together sequences to collectively form a given gadget.
We describe our gadget operations in a loose C-like syntax. In
our model, a variable (e.g., v1) is a pre-designated four-byte mem-
ory location that is read or modiﬁed in the course of the instruction
sequences comprising the gadget. Thus, for “v1 = v2 + v3”, an
attacker pre-assigns memory locations for v1, v2 and v3, and the
gadget is responsible for loading values from the memory locations
of v2 and v3, performing the addition, and storing the result into the
memory location of v1. Gadget variable addresses must be desig-
nated before exploit payload construction, reference valid memory,
and have no zero bytes (for string buffer encoding).
3.3 Crafting a Return-Oriented Program
Once we have a Turing-complete set of gadget operations, we
turn to creating a return-oriented program, which is just a stack
buffer overﬂow payload composed of fake exploit frames that en-
code the instruction sequences forming gadgets and designate mem-
ory locations for gadget variables. Each exploit frame encodes
saved register values for input or local registers used in an instruc-
tion sequence, including the future stack pointer (%i6) and the re-
turn address (%i7) for the next sequence. Because a string buffer
overﬂow cannot contain null bytes, we ensure that all addresses
(e.g., gadget variables, fake exploit stack frames, libc instruction
sequence entry points) are encoded without zero bytes. The ex-
ploit payload is passed via an argument string to a vulnerable ap-
plication, where it overﬂows a local stack buffer and overwrites a