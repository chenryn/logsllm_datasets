# 浅谈在Mac上进行ASP和ASP.NET代码审计（一）

## 译文声明
本文为翻译文章，具体内容表达及含义以原文为准。

## 0x1 前言
尽管ASP技术已相对落后，但在一些内网老旧系统中仍可见其身影。而ASP.NET则是我之前计划学习的技术。由于这两种技术的搭建环境较为相似，因此本文将两者结合讨论，以便于查阅和学习。特别说明：本文主要探讨如何在Mac环境下开始ASP和ASP.NET的代码审计工作。本文从零基础出发，对于已经熟练掌握相关知识的专业人士可能并不适用。

## 0x2 环境搭建
### 当前环境:
- 操作系统: MAC OS
- 使用PD虚拟机创建Windows 10
- Web服务器: IIS

#### 安装过程:
安装IIS的过程非常简单，只需通过“控制面板 -> 程序与功能 -> Windows功能”路径选择相应的设置即可完成。

关于CGI和ISAPI，这里推荐以下两篇文章供参考：
- [IIS里ISAPI扩展与ISAPI筛选器的区别和相同之处](http://www.webkaka.com/tutorial/iis/2017/040722/#asipi_summary)
- [IIS里ISAPI和CGI比较：几种执行方式的不同](http://www.webkaka.com/tutorial/iis/2017/040723/)

虽然CGI、ASP、JSP和PHP都是常用的动态网页技术，但它们与本文主题关系不大，可以适当了解。

## 0x3 创建一个ASP测试站点
打开IIS管理器并添加网站。查看当前IP信息（这里采用的是共享网络）。示例中的IP地址为`10.211.55.20`。

在桌面创建文件夹 `C:\Users\xq17\Desktop\asptest` 用于存放网站内容。接着，在该目录下创建一个名为 `index.asp` 的文件。如果遇到401访问权限错误，可以通过配置文件夹权限解决此问题，具体操作步骤请参见[此处](https://blog.csdn.net/wyz670083956/article/details/79092446)。

随后，我们需要在IIS中设置默认文档并添加 `index.asp`。为了便于调试，还需开启目录浏览功能。若Mac访问失败，则需要关闭Windows自带防火墙。

## 0x4 ASP代码审计初步准备
进行代码审计的基础是对所使用语言的基本语法有所掌握。为此，推荐阅读[菜鸟教程](https://www.runoob.com/asp/asp-tutorial.html)来快速入门ASP编程。

检验学习成果的最佳方法是尝试编写一个包含漏洞的网站，并熟悉整个开发流程。接下来我们将针对几个高危审计点进行讲解：

### 0x4.1 编写基于Access数据库的注入测试网站
**0. 开启错误提示(debug模式)**  
这有助于我们迅速定位代码中的问题。

**1. 利用Office自带的Access创建数据库:**  
- 数据库名: sql.mdb
- 表名: sql
- 列: id, username, password

**2. 编写sql.asp页面**
```asp
<%
' DSN-less 连接
Dim conn, rs
Set conn = Server.CreateObject("ADODB.Connection")
conn.Open "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" & Server.MapPath("/sql.mdb") & ";"

Set rs = Server.CreateObject("ADODB.Recordset")
rs.Open "SELECT * FROM sql WHERE username='" & Request.QueryString("username") & "' AND password='" & Request.QueryString("password") & "'", conn, 1, 3

If rs.EOF Then
    Response.Write("登录失败")
Else
    Response.Write("当前登录的信息为:")
    Do Until rs.EOF
        For Each x In rs.Fields
            Response.Write(x.Name & " = " & x.Value & "<br>")
        Next
        rs.MoveNext
    Loop
End If
rs.Close
Set rs = Nothing
Set conn = Nothing
%>
```
这段代码直接使用了 `Request.QueryString` 获取参数并拼接到SQL语句中，从而导致了SQL注入风险。

### 0x4.2 经典双文件上传漏洞及其成因
常见的ASP源码安全问题主要包括越权、注入和上传三类。其中，经典的双文件上传漏洞值得特别关注。更多详情可参考[这篇文章](https://blog.51cto.com/blackvan/842156)。

### 0x4.3 经典命令执行木马
审计时应重点关注类似 `Eval`、`Execute` 和 `ExecuteGlobal` 函数，当这些函数的参数可控时，攻击者可以直接获取shell权限。

## 0x5 ASPX代码审计初步准备
对于ASP.NET代码审计，首先需要理解C#的基本语法结构。建议先自行开发一个简单的ASP.NET项目，再通过逆向工程对比源码与编译后的差异，以此加深理解。

### 0x5.1 IDE的选择
推荐使用Visual Studio社区版作为开发工具。通过阅读官方文档，你可以快速掌握Visual Studio的基本使用技巧，包括但不限于创建Hello World程序以及构建ASP.NET Web项目等。

### 0x5.2 C#快速入门
[C# 菜鸟教程](https://www.runoob.com/csharp/csharp-tutorial.html)是一个很好的起点。此外，还应了解注释、程序基本结构、控制流以及异常处理等内容。

### 0x5.3 尝试建立一个Hello World C#程序
按照教程逐步实践，直至能够成功运行一个简单的C#应用程序。

### 0x5.4 建立一个ASP.NET Web项目
遵循官方指南创建并部署你的第一个ASP.NET Web应用。后续还可以深入研究MVC架构和Razor视图引擎等高级主题。

## 0x6 远程搭建调试环境思路
当需要在远程服务器（如阿里云上的Windows Server 2008）上搭建调试环境时，可以通过NFS实现本地电脑与远程服务器之间的文件共享。具体步骤如下：
- 在Windows端安装并配置Hane Win NFS Server。
- 在Linux端安装nfs-kernel-server并配置/etc/exports文件。
- 最后，在Mac上挂载远程目录以方便访问。

## 0x7 总结与反思
本文记录了我在探索ASP和ASP.NET代码审计过程中的一些心得与体会。鉴于本人是从零开始学习，文中可能存在不少疏漏或低级错误，欢迎大家批评指正并提供宝贵资料供我进一步学习。未来我将重点加强对ASP.NET审计的研究，特别是开发流程和反编译原理等方面，力求找到一种高效且实用的审计方案。