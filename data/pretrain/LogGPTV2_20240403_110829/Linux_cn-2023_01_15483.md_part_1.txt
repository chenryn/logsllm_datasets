---
author: Sylvain Leroux
category: 技术
comments_data:
- date: '2023-01-27 16:25:44'
  message: 外国人的电脑里有没有中文字体呢？
  postip: 117.181.102.154
  username: 来自117.181.102.154的 Chrome 109.0|Windows 10 用户
- date: '2023-01-28 09:13:34'
  message: 有的
  postip: 223.11.229.242
  username: 来自山西的 Chrome 109.0|Windows 10 用户
- date: '2023-01-30 13:56:59'
  message: 感觉这篇翻译的质量比上次来看某些翻译文章时要好很多，赞
  postip: 219.156.91.157
  username: 来自河南郑州的 Firefox 109.0|Windows 10 用户
- date: '2023-01-31 09:14:34'
  message: "你去试试英文版的 Windows 就知道了。带了中文字体的，但没有中文版系统带的那么全。\r\n\r\n参考: learn.microsoft.com/en-us/typography/fonts/windows_10_font_list"
  postip: 112.44.84.179
  username: 来自四川的 Chrome 108.0|Windows 10 用户
count:
  commentnum: 4
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 3372
date: '2023-01-27 12:35:27'
editorchoice: true
excerpt: 我们都知道如何从键盘输入文字，不是吗？
fromurl: https://itsfoss.com/unicode-linux/
id: 15483
islctt: true
largepic: /data/attachment/album/202301/27/123501fod5doujjgo5jfjk.jpg
permalink: /article-15483-1.html
pic: /data/attachment/album/202301/27/123501fod5doujjgo5jfjk.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lkxed
summary: 我们都知道如何从键盘输入文字，不是吗？
tags:
- Unicode
thumb: false
title: 文字间的战斗与其救世主 Unicode
titlepic: true
translator: yzuowei
updated: '2023-01-27 12:35:27'
---
![](/data/attachment/album/202301/27/123501fod5doujjgo5jfjk.jpg)
我们都知道如何从键盘输入文字，不是吗？
那么，请允许我挑战你在你最爱的文本编辑器中输入这段文字：
![«Ayumi moved to Tokyo in 1993 to pursue her career» said Dmitrii](/data/attachment/album/202301/27/123527d9c9ychhryc54rte.png)
这段文字难以被输入因为它包含着：
* 键盘上没有的印刷符号，
* 平假名日文字符，
* 为符合平文式罗马字标准，日本首都的名字中的两个字母 “o” 头顶带有长音符号，
* 以及最后，用西里尔字母拼写的名字德米特里。
毫无疑问，想要在早期的电脑中输入这样的句子是不可能的。这是因为早期电脑所使用的字符集有限，无法兼容多种书写系统。而如今类似的限制已不复存在，马上我们就能在文中看到。
### 电脑是如何储存文字的？
计算机将字符作为数字储存。它们再通过表格将这些数字与含有意义的字形一一对应。
在很长一段时间里，计算机将每个字符作为 0 到 255 之间的数字储存（这正好是一个字节的长度）。但这用来代表人类书写所用到的全部字符是远远不够的。而解决这个问题的诀窍在于，取决于你住在地球上的哪一块区域，系统会分别使用不同的对照表。
这里有一张在法国常被广泛使用的对照表 [ISO 8859-15](https://en.wikipedia.org/wiki/ISO/IEC_8859-15)：
![The ISO 8859-15 encoding](/data/attachment/album/202301/27/123527ewo76mwrhmw33v00.png)
如果你住在俄罗斯，你的电脑大概会使用 [KOI8-R](https://en.wikipedia.org/wiki/KOI8-R) 或是 [Windows-1251](https://en.wikipedia.org/wiki/Windows-1251) 来进行编码。现在让我们假设我们在使用后者：
![The Windows-1251 encoding is a popular choice to store text written using the Cyrillic alphabets](/data/attachment/album/202301/27/123528rs4w7fpuumjiwhmm.png)
对于 128 之前的数字，两张表格是一样的。这个范围与 [US-ASCII](https://en.wikipedia.org/wiki/ASCII) 相对应，这是不同字符表格之间的最低兼容性。而对于 128 之后的数字，这两张表格则完全不同了。
比如，依据 Windows-1251，字符串 “said Дмитрий” 会被储存为：
```
115 97 105 100 32 196 236 232 242 240 232 233
```
按照计算机科学的常规方法，这十二个数字可被写成更加紧凑的十六进制：
```
73 61 69 64 20 c4 ec e8 f2 f0 e8 e9
```
如果德米特里发给我这份文件，我在打开后可能会看到：
```
said Äìèòðèé
```
这份文件 *看起来* 被损坏了，实则不然。这些储存在文件里的数据，即数字，并没有发生改变。被显示出的字符与 *另一张表格* 中的数据相对应，而非文字最初被写出来时所用的编码表。
让我们来举一个例子，就以字符 “Д” 为例。按照 Windows-1251，“Д” 的数字编码为 196（c4）。储存在文件里的只有数字 196。而正是这同样的数字在 ISO8859-15 中与 “Ä” 相对应。这就是为什么我的电脑错误地认为字形 “Ä” 就是应该被显示的字形。
![When the same text file is written then read again but using a different encoding](/data/attachment/album/202301/27/123528ycym6nr2nm8rfers.png)
多提一句，你依然可以时不时地看到一些错误配置的网站展示，或由 [用户邮箱代理](https://en.wikipedia.org/wiki/Email_client) 发出的对收件人电脑所使用的字符编码做出错误假设的邮件。这样的故障有时被称为乱码（LCTT 译注：原文用词为 [mojibake](https://en.wikipedia.org/wiki/Mojibake)， 源自日语 *文字化け*）。好在这种情况在今天已经越来越少见了。
![Example of Mojibake on the website of a French movie distributor. The website name has been changed to preserve the innocent.](/data/attachment/album/202301/27/123528jpbpepvbmyrpml1b.png)
### Unicode 拯救了世界
我解释了不同国家间交换文件时会遇到的编码问题。但事情还能更糟，同一个国家的不同生产商未必会使用相同的编码。如果你在 80 年代用 Mac 和 PC 互传过文件你就懂我是什么意思了。
也不知道是不是巧合，[Unicode](https://en.wikipedia.org/wiki/Unicode) 项目始于 1987 年，主导者来自 施乐   Xerox 和…… 苹果   Apple  。
这个项目的目标是定义一套通用字符集来允许同一段文字中 *同时* 出现人类书写会用到的任何文字。最初的 Unicode 项目被限制在 65536 个不同字符（每个字符用 16 位表示，即每个字符两字节）。这个数字已被证实是远远不够的。
于是，在 1996 年 Unicode 被扩展以支持高达 100 万不同的    代码点    code point 。粗略来说，一个“代码点”可被用来识别字符表中的一个条目。Unicode 项目的一个核心工作就是将世界上正在被使用（或曾被使用）的字母、符号、标点符号以及其他文字仓管起来，并给每一项条目分配一个代码点用以准确分辨对应的字符。
这是一个庞大的项目：为了让你有个大致了解，发布于 2017 年的 Unicode 版本 10 定义了超过 136,000 个字符，覆盖了 139 种现代和历史上的语言文字。
随着如此庞大数量的可能性，一个基本的编码会需要每个字符 32 位（即 4 字节）。但对于主要使用 US-ASCII 范围内字符的文字，每个字符 4 字节意味着 4 倍多的储存需求以及 4 倍多的带宽用以传输这些文字。
![Encoding text as UTF-32 requires 4 bytes per character](/data/attachment/album/202301/27/123529l9rsusejro9j9ozr.png)
所以除了 [UTF-32](https://en.wikipedia.org/wiki/UTF-32)，Unicode 联盟还定义了更加节约空间的 [UTF-16](https://en.wikipedia.org/wiki/UTF-16) 和 [UTF-8](https://en.wikipedia.org/wiki/UTF-8) 编码，分别使用了 16 位和 8 位。但只有 8 位该如何储存超过 100,000 个不同的值呢？事实是，你不能。但这其中窍门在于用一个代码值（UTF-8 中的 8 位以及 UTF-16 中的 16 位）来储存最常用的一些字符。再用几个代码值储存最不常用的一些字符。所以说 UTF-8 和 UTF-16 是 *可变长度* 编码。尽管这样也有缺陷，但 UTF-8 是空间与时间效率之间一个不错的折中。更不用提 UTF-8 可以向后兼容大部分 Unicode 之前的 1 字节编码，因为 UTF-8 经过了特别设计，任何有效的 US-ASCII 文件都是有效的 UTF-8 文件。你也可以说，UTF-8 是 US-ASCII 的超集。而在今天已经找不到不用 UTF-8 编码的理由了。当然除非你书写主要用的语言需要多字节编码，或是你不得不与一些残留的老旧系统打交道。
在下面两张图中，你可以亲自比较一下同一字符串的 UTF-16 和 UTF-8 编码。特别注意 UTF-8 使用了一字节来储存拉丁字母表中的字符，但它使用了两字节来存储西里尔字母表中的字符。这是 Windows-1251 西里尔编码储存同样字符所需空间的两倍。
![UTF-16 is a variable length encoding requiring 2 bytes to encode most characters. Some character still requires 4 bytes though (for example](/data/attachment/album/202301/27/123529vkgg89rc6vd4e87a.png)
![UTF-8 is a variable length encoding requiring 1, 2, 3 or 4 bytes per character](/data/attachment/album/202301/27/123529zgpxzfp5atzapxdb.png)
### 而这些对于打字有什么用呢？
啊……知道一些你的电脑的能力与局限以及其底层机制也不是什么坏事嘛。特别是我们马上就要说到 Unicode 和十六进制。现在……让我们再聊点历史。真的就一点，我保证……
……就说从 80 年代起，电脑键盘曾经有过 [`Compose` 键](https://en.wikipedia.org/wiki/Compose_key)（有时候也被标为 `Multi` 键）就在 `Shift` 键的下边。当按下这个键时，你会进入 “ 组合   Compose ” 模式。一旦在这个模式下，你便可以通过输入助记符来输入你键盘上没有的字符。比如说，在组合模式下，输入 RO 便可生成字符 ®（当作是 O 里面有一个 R 就能很容易记住）。