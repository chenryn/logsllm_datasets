.ip *
the
.b secbit_keep_caps
.i securebits
flag is cleared.
see
.br capabilities (7).
.ip *
the termination signal is reset to
.b sigchld
(see
.br clone (2)).
.ip *
the file descriptor table is unshared, undoing the effect of the
.b clone_files
flag of
.br clone (2).
.pp
note the following further points:
.ip * 3
all threads other than the calling thread are destroyed during an
.br execve ().
mutexes, condition variables, and other pthreads objects are not preserved.
.ip *
the equivalent of \fisetlocale(lc_all, "c")\fp
is executed at program start-up.
.ip *
posix.1 specifies that the dispositions of any signals that
are ignored or set to the default are left unchanged.
posix.1 specifies one exception: if
.b sigchld
is being ignored,
then an implementation may leave the disposition unchanged or
reset it to the default; linux does the former.
.ip *
any outstanding asynchronous i/o operations are canceled
.rb ( aio_read (3),
.br aio_write (3)).
.ip *
for the handling of capabilities during
.br execve (),
see
.br capabilities (7).
.ip *
by default, file descriptors remain open across an
.br execve ().
file descriptors that are marked close-on-exec are closed;
see the description of
.b fd_cloexec
in
.br fcntl (2).
(if a file descriptor is closed, this will cause the release
of all record locks obtained on the underlying file by this process.
see
.br fcntl (2)
for details.)
posix.1 says that if file descriptors 0, 1, and 2 would
otherwise be closed after a successful
.br execve (),
and the process would gain privilege because the set-user-id or
set-group-id mode bit was set on the executed file,
then the system may open an unspecified file for each of these
file descriptors.
as a general principle, no portable program, whether privileged or not,
can assume that these three file descriptors will remain
closed across an
.br execve ().
.\" on linux it appears that these file descriptors are
.\" always open after an execve(), and it looks like
.\" solaris 8 and freebsd 6.1 are the same. -- mtk, 30 apr 2007
.ss interpreter scripts
an interpreter script is a text file that has execute
permission enabled and whose first line is of the form:
.pp
.in +4n
.ex
\fb#!\fp\fiinterpreter \fp[optional-arg]
.ee
.in
.pp
the
.i interpreter
must be a valid pathname for an executable file.
.pp
if the
.i pathname
argument of
.br execve ()
specifies an interpreter script, then
.i interpreter
will be invoked with the following arguments:
.pp
.in +4n
.ex
\fiinterpreter\fp [optional-arg] \fipathname\fp arg...
.ee
.in
.pp
where
.i pathname
is the pathname of the file specified as the first argument of
.br execve (),
and
.i arg...
is the series of words pointed to by the
.i argv
argument of
.br execve (),
starting at
.ir argv[1] .
note that there is no way to get the
.ir argv[0]
that was passed to the
.br execve ()
call.
.\" see the p - preserve-argv[0] option.
.\" documentation/admin-guide/binfmt-misc.rst
.\" https://www.kernel.org/doc/html/latest/admin-guide/binfmt-misc.html
.pp
for portable use,
.i optional-arg
should either be absent, or be specified as a single word (i.e., it
should not contain white space); see notes below.
.pp
since linux 2.6.28,
.\" commit bf2a9a39639b8b51377905397a5005f444e9a892
the kernel permits the interpreter of a script to itself be a script.
this permission is recursive, up to a limit of four recursions,
so that the interpreter may be a script which is interpreted by a script,
and so on.
.ss limits on size of arguments and environment
most unix implementations impose some limit on the total size
of the command-line argument
.ri ( argv )
and environment
.ri ( envp )
strings that may be passed to a new program.
posix.1 allows an implementation to advertise this limit using the
.b arg_max
constant (either defined in
.i 
or available at run time using the call
.ir "sysconf(_sc_arg_max)" ).
.pp
on linux prior to kernel 2.6.23, the memory used to store the
environment and argument strings was limited to 32 pages
(defined by the kernel constant
.br max_arg_pages ).
on architectures with a 4-kb page size,
this yields a maximum size of 128\ kb.
.pp
on kernel 2.6.23 and later, most architectures support a size limit
derived from the soft
.b rlimit_stack
resource limit (see
.br getrlimit (2))
that is in force at the time of the
.br execve ()
call.
(architectures with no memory management unit are excepted:
they maintain the limit that was in effect before kernel 2.6.23.)
this change allows programs to have a much larger
argument and/or environment list.
.\" for some background on the changes to arg_max in kernels 2.6.23 and
.\" 2.6.25, see:
.\"     http://sourceware.org/bugzilla/show_bug.cgi?id=5786
.\"     http://bugzilla.kernel.org/show_bug.cgi?id=10095
.\"     http://thread.gmane.org/gmane.linux.kernel/646709/focus=648101,
.\"     checked into 2.6.25 as commit a64e715fc74b1a7dcc5944f848acc38b2c4d4ee2.
for these architectures, the total size is limited to 1/4 of the allowed
stack size.
(imposing the 1/4-limit
ensures that the new program always has some stack space.)
.\" ollie: that doesn't include the lists of pointers, though,
.\" so the actual usage is a bit higher (1 pointer per argument).
additionally, the total size is limited to 3/4 of the value
of the kernel constant
.b _stk_lim
(8 mib).
since linux 2.6.25,
the kernel also places a floor of 32 pages on this size limit,
so that, even when
.br rlimit_stack
is set very low,
applications are guaranteed to have at least as much argument and
environment space as was provided by linux 2.6.22 and earlier.
(this guarantee was not provided in linux 2.6.23 and 2.6.24.)
additionally, the limit per string is 32 pages (the kernel constant
.br max_arg_strlen ),
and the maximum number of strings is 0x7fffffff.
.sh return value
on success,
.br execve ()
does not return, on error \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b e2big
the total number of bytes in the environment
.ri ( envp )
and argument list
.ri ( argv )
is too large.
.tp
.b eacces
search permission is denied on a component of the path prefix of
.i pathname
or the name of a script interpreter.
(see also
.br path_resolution (7).)
.tp
.b eacces
the file or a script interpreter is not a regular file.
.tp
.b eacces
execute permission is denied for the file or a script or elf interpreter.
.tp
.b eacces
the filesystem is mounted
.ir noexec .
.tp
.br eagain " (since linux 3.1)"
.\" commit 72fa59970f8698023045ab0713d66f3f4f96945c
having changed its real uid using one of the
.br set*uid ()
calls, the caller was\(emand is now still\(emabove its
.br rlimit_nproc
resource limit (see
.br setrlimit (2)).
for a more detailed explanation of this error, see notes.
.tp
.b efault
.i pathname
or one of the pointers in the vectors
.i argv
or
.i envp
points outside your accessible address space.
.tp
.b einval
an elf executable had more than one pt_interp segment (i.e., tried to
name more than one interpreter).
.tp
.b eio
an i/o error occurred.
.tp
.b eisdir
an elf interpreter was a directory.
.tp
.b elibbad
an elf interpreter was not in a recognized format.
.tp
.b eloop
too many symbolic links were encountered in resolving
.i pathname
or the name of a script or elf interpreter.
.tp
.b eloop
the maximum recursion limit was reached during recursive script
interpretation (see "interpreter scripts", above).
before linux 3.8,
.\" commit d740269867021faf4ce38a449353d2b986c34a67
the error produced for this case was
.br enoexec .
.tp
.b emfile
the per-process limit on the number of open file descriptors has been reached.
.tp
.b enametoolong
.i pathname
is too long.
.tp
.b enfile
the system-wide limit on the total number of open files has been reached.
.tp
.b enoent
the file
.i pathname
or a script or elf interpreter does not exist.
.tp
.b enoexec
an executable is not in a recognized format, is for the wrong
architecture, or has some other format error that means it cannot be
executed.
.tp
.b enomem
insufficient kernel memory was available.
.tp
.b enotdir
a component of the path prefix of
.i pathname
or a script or elf interpreter is not a directory.
.tp
.b eperm
the filesystem is mounted
.ir nosuid ,
the user is not the superuser,
and the file has the set-user-id or set-group-id bit set.
.tp
.b eperm
the process is being traced, the user is not the superuser and the
file has the set-user-id or set-group-id bit set.
.tp
.b eperm
a "capability-dumb" applications would not obtain the full set of
permitted capabilities granted by the executable file.
see
.br capabilities (7).
.tp
.b etxtbsy
the specified executable was open for writing by one or more processes.
.sh conforming to
posix.1-2001, posix.1-2008, svr4, 4.3bsd.
posix does not document the #! behavior, but it exists
(with some variations) on other unix systems.
.\" svr4 documents additional error
.\" conditions eagain, eintr, elibacc, enolink, emultihop; posix does not
.\" document etxtbsy, eperm, efault, eloop, eio, enfile, emfile, einval,
.\" eisdir or elibbad error conditions.
.sh notes
one sometimes sees
.br execve ()
(and the related functions described in
.br exec (3))
described as "executing a
.i new
process" (or similar).
this is a highly misleading description:
there is no new process;
many attributes of the calling process remain unchanged
(in particular, its pid).
all that
.br execve ()
does is arrange for an existing process (the calling process)
to execute a new program.
.pp
set-user-id and set-group-id processes can not be
.br ptrace (2)d.
.pp
the result of mounting a filesystem
.i nosuid
varies across linux kernel versions:
some will refuse execution of set-user-id and set-group-id
executables when this would
give the user powers they did not have already (and return
.br eperm ),
some will just ignore the set-user-id and set-group-id bits and
.br exec ()
successfully.
.pp
on linux,
.i argv
and
.i envp
can be specified as null.
in both cases, this has the same effect as specifying the argument
as a pointer to a list containing a single null pointer.
.b "do not take advantage of this nonstandard and nonportable misfeature!"
on many other unix systems, specifying
.i argv
as null will result in an error
.rb ( efault ).
.i some
other unix systems treat the
.i envp==null
case the same as linux.
.\" e.g., efault on solaris 8 and freebsd 6.1; but
.\" hp-ux 11 is like linux -- mtk, apr 2007
.\" bug filed 30 apr 2007: http://bugzilla.kernel.org/show_bug.cgi?id=8408
.\" bug rejected (because fix would constitute an abi change).
.\"
.pp
posix.1 says that values returned by
.br sysconf (3)
should be invariant over the lifetime of a process.
however, since linux 2.6.23, if the
.br rlimit_stack
resource limit changes, then the value reported by
.b _sc_arg_max
will also change,
to reflect the fact that the limit on space for holding
command-line arguments and environment variables has changed.
.pp
in most cases where
.br execve ()
fails, control returns to the original executable image,
and the caller of
.br execve ()
can then handle the error.
however, in (rare) cases (typically caused by resource exhaustion),
failure may occur past the point of no return:
the original executable image has been torn down,
but the new image could not be completely built.
in such cases, the kernel kills the process with a
.\" commit 19d860a140beac48a1377f179e693abe86a9dac9
.br sigsegv
.rb ( sigkill
until linux 3.17)
signal.
.\"
.ss interpreter scripts
the kernel imposes a maximum length on the text that follows the
"#!" characters at the start of a script;
characters beyond the limit are ignored.
before linux 5.1, the limit is 127 characters.
since linux 5.1,
.\" commit 6eb3c3d0a52dca337e327ae8868ca1f44a712e02
the limit is 255 characters.
.pp
the semantics of the
.i optional-arg
argument of an interpreter script vary across implementations.
on linux, the entire string following the
.i interpreter
name is passed as a single argument to the interpreter,
and this string can include white space.
however, behavior differs on some other systems.
some systems
.\" e.g., solaris 8
use the first white space to terminate
.ir optional-arg .
on some systems,
.\" e.g., freebsd before 6.0, but not freebsd 6.0 onward
an interpreter script can have multiple arguments,
and white spaces in
.i optional-arg
are used to delimit the arguments.
.pp
linux (like most other modern unix systems)
ignores the set-user-id and set-group-id bits on scripts.
.\"
.\" .sh bugs
.\" some linux versions have failed to check permissions on elf
.\" interpreters.  this is a security hole, because it allows users to
.\" open any file, such as a rewinding tape device, for reading.  some
.\" linux versions have also had other security holes in
.\" .br execve ()
.\" that could be exploited for denial of service by a suitably crafted
.\" elf binary. there are no known problems with 2.0.34 or 2.2.15.
.ss execve() and eagain
a more detailed explanation of the
.br eagain
error that can occur (since linux 3.1) when calling
.br execve ()
is as follows.
.pp
the
.br eagain
error can occur when a
.i preceding
call to
.br setuid (2),
.br setreuid (2),
or
.br setresuid (2)
caused the real user id of the process to change,
and that change caused the process to exceed its
.br rlimit_nproc
resource limit (i.e., the number of processes belonging
to the new real uid exceeds the resource limit).
from linux 2.6.0 to 3.0, this caused the
.br set*uid ()
call to fail.
(prior to 2.6,
.\" commit 909cc4ae86f3380152a18e2a3c44523893ee11c4
the resource limit was not imposed on processes that
changed their user ids.)
.pp
since linux 3.1, the scenario just described no longer causes the
.br set*uid ()
call to fail,
because it too often led to security holes where buggy applications
didn't check the return status and assumed
that\(emif the caller had root privileges\(emthe call would always succeed.
instead, the
.br set*uid ()
calls now successfully change the real uid,
but the kernel sets an internal flag, named
.br pf_nproc_exceeded ,
to note that the
.br rlimit_nproc
resource limit has been exceeded.
if the
.br pf_nproc_exceeded
flag is set and the resource limit is still
exceeded at the time of a subsequent
.br execve ()
call, that call fails with the error
.br eagain .
this kernel logic ensures that the
.br rlimit_nproc
resource limit is still enforced for the
common privileged daemon workflow\(emnamely,
.br fork (2)
+
.br set*uid ()
+
.br execve ().
.pp
if the resource limit was not still exceeded at the time of the
.br execve ()
call
(because other processes belonging to this real uid terminated between the
.br set*uid ()
call and the
.br execve ()
call), then the
.br execve ()
call succeeds and the kernel clears the
.br pf_nproc_exceeded
process flag.
the flag is also cleared if a subsequent call to
.br fork (2)
by this process succeeds.
.ss historical
with unix\ v6, the argument list of an
.br exec ()
call was ended by 0,
while the argument list of
.i main
was ended by \-1.
thus, this argument list was not directly usable in a further
.br exec ()
call.
since unix\ v7, both are null.
.\"
.\" .sh bugs
.\" some linux versions have failed to check permissions on elf
.\" interpreters.  this is a security hole, because it allows users to
.\" open any file, such as a rewinding tape device, for reading.  some
.\" linux versions have also had other security holes in
.\" .br execve ()
.\" that could be exploited for denial of service by a suitably crafted
.\" elf binary. there are no known problems with 2.0.34 or 2.2.15.
.sh examples
the following program is designed to be execed by the second program below.
it just echoes its command-line arguments, one per line.
.pp
.in +4n
.ex
/* myecho.c */
#include 
#include 
int
main(int argc, char *argv[])
{
    for (int j = 0; j < argc; j++)
        printf("argv[%d]: %s\en", j, argv[j]);
    exit(exit_success);
}
.ee