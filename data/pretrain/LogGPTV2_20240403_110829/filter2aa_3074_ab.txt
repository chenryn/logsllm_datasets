User-Agent: PostmanRuntime/7.6.0 Authorization: Digest username="123", 
realm="digest#Realm", 
nonce="MTU1NTMzMDg2MDA4MDo5MTdiMGI4ZmIwMDc2ZTgzOWU5NzA4YzEyZWEwNzlmMg==", 
uri="/digest/auth", algorithm="MD5", qop=auth, nc=00000001, 
cnonce="eYnywapi", response="0568a40f79a6960114e21f6ef2b60807"
Connection: keep-alive
HTTP
HTTP/1.1 200
Expires: 0
Content-Type: application/json;charset=UTF-8
Content-Length: 22
** digest auth is success **
//RFC2617示例 nonce = BASE64(time-stamp MD5(time-stamp ":" ETag ":" private-key)) 
//下面是spring-security的实现
long expiryTime = System.currentTimeMillis() + (long)(this.nonceValiditySeconds 
* 1000);
String signatureValue = DigestAuthUtils.md5Hex(expiryTime + ":" + this.key);
String nonceValue = expiryTime + ":" + signatureValue;
String nonceValueBase64 = new 
String(Base64.getEncoder().encode(nonceValue.getBytes()));
nonce: 每次随返回的 401 响应生成的任意随机字符串
nc: 16进制请求认证计数器,第一次 00000001
algorithm: 默认MD5算法
cnonce: 客户端密码随机数
Request-Digest摘要计算过程
1. 若算法是：MD5 或者是未指定 
 则 A1= ::
2. 若 qop 未定义或者 auth：
 则 A2= : 
3. 若 qop 为 auth
 response=MD5(MD5(A1):::::MD5(A2))
4. 若 qop 没有定义 
 response=MD5(MD5(A1)::MD5(A2)) 
摘要计算工具与计算方法
• DigestAuthUtils
• http Digest认证计算方法整理_TYINY的博客-CSDN博客
优点
密码并非直接在摘要中使用，而是 HA1 = MD5(username:realm:password)。可解决明文方式在
网络上发送密码的问题。
 服务器随机数 nonce 允许包含时间戳。因此服务器可以检查客户端提交的随机数 nonce，以防止
重放攻击
缺点
将存储密钥用的SALT通知到客户端本身就是很不安全的行为，如SALT被截获就大大增加了别人破
解密码的可能性
其次，由于这次做的产品本身属于标准化产品，登陆过程需支持标准DIGEST方式，无法限制其他
客户端的行为，如采用此方式，必然在标准化测试与对接时面临问题。
HOBA(RFC7486)
HTTP源绑定身份验证
是一种基于数字签名的HTTP 身份验证方法的设计
用于嵌入在 HTML 中的基于 JavaScript 的身份验证
是一个需要密码的 HTTP 身份验证方案的替代方案
因此避免了与密码相关的所有问题，例如泄漏服务器端密码数据库。
验证过程
1. 客户端连接到服务器，并发出请求，然后服务器的响应的响应包括一个WWW-Authenticate标头字
段
2. 如果客户端未注册到WEB资源，并且试图强制访问。加入 过程被调用。这将创建一个密钥对并使 
CPK服务器已知，以便服务器可以进行帐户需要的创建过程。
3. 客户端使用来自HOBA auth-scheme参数，来创建和签署HOBA代签名。
4. 客户端创建的HOBA结果HOBA-RES，作为sig值
5. 客户端在其下一个请求中包含Authorization头字段，使用HOBA”auth-scheme 并将 HOBA client-
result 在名为“result”的 auth-param 中
6. 服务器验证HOBA客户端结果
CPK准备阶段
客户端确定它是否已经需要进行身份验证的 Web 源的 CPK。如果客户端有CPK，客户端就会使用它；如
果客户端没有CPK，它会在预期服务器要求一个 CPK 时生成一个。
签名阶段
在签名阶段，客户端连接到服务器，服务器请求基于 HOBA 的身份验证，客户端通过签名一个 blob 信
息进行身份验证，
格式
HOBA-TES是客户端签名过程的输入，本身过程中不会通过网络发送
包含以下内容：
len：每个字段前面都有对应的长度值。长度与字段值之间用冒号分隔
nonce：由 UA 选择的随机值，并且必须在包含在 HOBA-TBS 值之前进行 base64url编码。
alg：指定正在使用的签名算法
Origin：访问来源
Realm：如果没有为身份验证指定此领域，则不存在
Kid：关键标识符，必须是HOBA客户端中呈现给服务器的base64编码值
HOBA-RES = kid "." challenge "." nonce "." sig
   sig = 1*base64urlchars
必须属性：challenge max-age
HOBA-TBS = len ":" nonce
              len ":" alg
              len ":" origin
              len ":" [ realm  ]
              len ":" kid
              len ":" challenge
      len = 1*DIGIT
      nonce = 1*base64urlchars
      alg = 1*2DIGIT
      origin = scheme "://" authority ":" port
可选属性：realm
HOBA-js机制
使用JavaScript的网站也可以执行源绑定身份验证，而无需涉及HTTP层。
需要属性：WebCrypto
如果没有上述属性，HOBA-js 需要一个元素；HTML5 中的localStorage ，用于持久性的密钥存储
Window.localStorage - Web API 接口参考 | MDN
由于 JavaScript 的同源策略，子域中的脚本无法访问与其父域中的脚本相同的 localStorage。对于更大
或更复杂的站点。
解决此问题的一种方法是使用会话 cookie，因为它们可以跨子域使用。也就是说，在 HOBA-js 中，用
户可能使用单个知名域登录，然后在用户浏览站点时使用会话 cookie 。
Mutual(RFC 8120)
HTTP双向认证
先说一下优缺点
优点
在通信中根本不交换密码信息，避免了任何密码在网络传输中泄露的可能性，离线密码字典攻击无
效
能够检测通信对方是否为伪造服务器，避免被网络钓鱼。
缺点
浏览器尚未原生支持
框架尚未内置，只能开发人员自己实现。
过程
1. 客户端请求访问受保护的资源（目标URI：GET localhost/resource)
2. 目标URL收到请求后，检查请求头是否包含Authorization字段，如果不包含，则服务器将发起质
询，返回401-INIT消息（即参数reason=initial的401 Unauthorized响应），响应头带有WWW-
Authenticate字段，指定认证机制为Mutual并提供认证所需参数。
参数
Mutual：表明认证方式为HTTP相互认证。
HTTP
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Mutual
   realm="example_space_name",
   version=1,
   algorithm=SHA-256,
   validation=http://localhost:8000,
   auth-scope=localhost,
   reason=initial
realm：保护空间标识名称，告知客户端自动应用账密的范围，是 HTTP 认证框架（RFC 7235）定
义的参数。
version：表明服务器采用的相互认证协议的版本，用于避免未来版本不兼容的问题，目前只有一
个版本，其值固定为1。
algorithm：指定采用哪种算法计算kc1、ks1、vkc、vks，协议目前支持4种算法：iso-kam3-dl-
2048-sha256、iso-kam3-dl-4096-sha512、iso-kam3-ec-p256-sha256、iso-kam3-ec-p521-
sha512，算法详情定义在RFC 8121。
validation：表明与服务器绑定的底层协议验证机制，客户端可以利用此机制来初步检查通信对
方，以防止恶意服务器通过转发客户端凭据而向真实服务器冒充用户。当服务器底层是HTTP时，
只能采用 host 验证机制，即参数值的格式为://:，表明通过判断这三部分是否与真实服务器一致来
检查通信对方。当服务器底层是HTTPS时，可以选择 tls-server-end-point 验证机制，即参数值为
服务器TLS公钥证书散列值的八位字符串；或者选择 tls-unique 验证机制，即参数值为通道绑定材
料。
客户端可以利用参数validation提供的方法来初步检查通信对方
 a. 如果检查不通过，说明通信对方是恶意服务器，则停止通信，并提示用户。这样一来，
恶意服务器将无法拿到客户端凭据，从而无法能向真实服务器冒充用户。
 b. 如果检查通过，则要求用户输入账密，然后发送一条密钥交换消息（req-KEX-C1）来启
动身份验证。即在请求头Authorization字段中通过Mutual关键词传递user、kc1（客户端的
密钥交换值）等参数，重新请求目标URL：
auth-scope：告知客户端自动应用会话秘钥的跨域范围。Single-server type：参数值的格式
为://:，例如：http://localhost:8000，表明scheme、host、port三个部分都相同时才自动应用会
话秘钥，即不能跨域应用。Single-host type（缺省默认），参数值的格式为，例如：localhost，
表明只要host部分相同就可以跨域应用会话秘钥。Wildcard-domain type，参数值的格式为 
*.example.com，表明只要一级域名相同就可以跨域应用会话秘钥。
reason：描述返回401的原因，initial表示请求中头没有包含Authorization字段。
过程
1. 客户端可以利用参数validation提供的方法来初步检查通信对方
a. 如果检查不通过，说明通信对方是恶意服务器，则停止通信，并提示用户。这样一来，恶意服务
器将无法拿到客户端凭据，从而无法能向真实服务器冒充用户。
b. 如果检查通过，则要求用户输入账密，然后发送一条密钥交换消息（req-KEX-C1）来启动身份
验证。即在请求头Authorization字段中通过Mutual关键词传递user、kc1（客户端的密钥交换值）
等参数，重新请求目标URL：
GET /resource HTTP/1.1
Host: localhost
Authorization: Mutual
   realm="example_space_name",
   version=1,
   algorithm=SHA-256,
   validation=host,
   auth-scope=localhost,
   user="jane",
   kc1="4e2e272a28d1802ca10daf4496794697cf"
2. 服务器收到req-KEX-C1消息，在其用户数据库中查找用户在realm="example_space_name"这一
保护空间设置的账密，用于计算服务器的密钥交换值（ks1）。然后，服务器创建一个会话标识符
（sid），用于标识紧随其后的消息集。最后，返回401-KEX-S1消息，即返回401 Unauthorized，
在响应头WWW-Authenticate字段中通过Mutual关键词传递sid、ks1等参数。
3.  客户端、服务器各自使用密钥交换消息中的交换值计算会话秘钥。只有当双方使用相同的用户密码
进行计算时，会话秘钥值才会相同。以后双方在每个请求响应中都携带此会话秘钥，用于代替账密
在网络中传递
4. 客户端发送req-VFY-C请求，即在请求头Authorization字段中通过Mutual关键词传递sid、vkc（客
户端计算的会话秘钥值）等参数，重新请求目标URI。
5. 服务器收到req-VFY-C请求，比较vkc是否与自己计算的会话秘钥值（vks）相同
 a. 如果相同，表明对客户端身份和用户身份认证通过，则返回200-VFY-S消息，即返回保护资源
作为响应，并在响应头的Authentication-Info字段中通过Mutual关键词传递vks等参数。
 b. 如果不同，表明用户可能输错了密码，或客户端可能是冒牌的，或用户可能是冒牌的，则服务
器返回401-INIT消息，与步骤2中的响应基本相同，区别是参数reason=auth-failed：表示身份验证
失败。
6. 客户端收到200-VFY-S消息，比较服务器返回的vks是否与自己的vkc相同
HTTP/1.1 401 Unauthorized