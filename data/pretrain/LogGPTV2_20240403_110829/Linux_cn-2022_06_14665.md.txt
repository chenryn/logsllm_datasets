---
author: Mihalis Tsoukalos
category: 软件开发
comments_data:
- date: '2022-06-27 10:45:13'
  message: 原文中“你对函数内部的切片所做的任何修改，都不会在函数退出后丢失”有误。在函数内进行切片的append操作导致函数内的切片len&gt;cap时，会发生底层数组重新分配，函数内切片会指向新内存块的地址，也就与一开始函数外的切片指向了不同的内存块。这时候对函数内的切片继续操作将不会影响到外部的切片变量。而且go是没有引用传递一说，本质上还是值传递。
  postip: 119.147.184.164
  username: 来自广东广州的 Chrome 102.0|Windows 10 用户
- date: '2022-06-27 11:24:08'
  message: "我是个 Go 初学者，感谢指教，学到了！\r\n关于“引用传递”还是“值传递”这个事，当然是“值传递”，没有任何异议。原作者的“引用”的意思应该就是指向这个切片的变量。可能是我翻译得不好～"
  postip: 39.173.62.117
  username: 来自39.173.62.117的 Safari 15.5|Mac 10.15 用户
count:
  commentnum: 2
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2217
date: '2022-06-02 10:57:00'
editorchoice: false
excerpt: 了解使用数组和切片在 Go 中存储数据的优缺点，以及为什么其中一个更好。
fromurl: https://opensource.com/article/18/7/introduction-go-arrays-and-slices
id: 14665
islctt: true
largepic: /data/attachment/album/202206/02/105657zahhco3612vv1bbo.jpg
permalink: /article-14665-1.html
pic: /data/attachment/album/202206/02/105657zahhco3612vv1bbo.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 14658
reviewer: wxy
selector: lkxed
summary: 了解使用数组和切片在 Go 中存储数据的优缺点，以及为什么其中一个更好。
tags:
- Go
- 数组
- 切片
thumb: false
title: Go 数组和切片的介绍
titlepic: true
translator: lkxed
updated: '2022-06-02 10:57:00'
---
![](/data/attachment/album/202206/02/105657zahhco3612vv1bbo.jpg)
> 
> 了解使用数组和切片在 Go 中存储数据的优缺点，以及为什么其中一个更好。
> 
> 
> 
在本系列的第四篇文章中，我将解释 [Go](https://golang.org/) 数组和切片，包括如何使用它们，以及为什么你通常要选择其中一个而不是另一个。
### 数组
数组是编程语言中最流行的数据结构之一，主要原因有两个：一是简单易懂，二是可以存储许多不同类型的数据。
你可以声明一个名为 `anArray` 的 Go 数组，该数组存储四个整数，如下所示：
```
anArray := [4]int{-1, 2, 0, -4}
```
数组的大小应该在它的类型之前声明，而类型应该在声明元素之前定义。`len()` 函数可以帮助你得到任何数组的长度。上面数组的大小是 4。
如果你熟悉其他编程语言，你可能会尝试使用 `for` 循环来遍历数组。Go 当然也支持 `for` 循环，不过，正如你将在下面看到的，Go 的 `range` 关键字可以让你更优雅地遍历数组或切片。
最后，你也可以定义一个二维数组，如下：
```
twoD := [3][3]int{
  {1, 2, 3},
  {6, 7, 8},
  {10, 11, 12}}
```
`arrays.go` 源文件中包含了 Go 数组的示例代码。其中最重要的部分是：
```
for i := 0; i 
作者：[Mihalis Tsoukalos](https://opensource.com/users/mtsouk) 选题：[lkxed](https://github.com/lkxed) 译者：[lkxed](https://github.com/lkxed) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出