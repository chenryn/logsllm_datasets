concatenation. This is the case for the class C6 Table 1 in which W3af and
Skipﬁsh passed only six tests out of 27. In these six tests, the URL is placed
3 This model is the event bubbling and is the default model. Another model is the event
capturing in which the event are propagated from the outermost to the innermost.
310
G. Pellegrino et al.
in a JavaScript variable and it maintains the URL path separator. With the
use of regular expressions, W3af and Skipﬁsh recognized the string as URL and
submitted the server side thus passing the tests. However, in the remaining 21,
URLs are created as the concatenation string variables and a JavaScript arrays.
While regular expressions may be extended to include these speciﬁc cases, they
will likely never be as complete as dynamic analysis.
5.2 Assessment Using Web Applications
Finally, we compare j¨Ak to the other crawlers by crawling popular web
applications.
Table 2. Number of unique event-handler registrations extracted by j¨Ak, grouped by
event category
DII
220
7
8
144
26
42
905
651
1,323
DDI
Web Apps.
34
WP
930
Gallery
636
phpBB
Joomla
46
Tidios w/ WP 14,041
12
Nibbleblog
826
Owncloud 8
126
Owncloud 4
Piwigo
1,609
Mediawiki
ModX
MyBB 1.8.1
MyBB 1.8.4
UI Chg API Errs. Cust. Total
156
424
2,520
1,257
1,373
729
232
448
641 18,738
3,715
61
0
2,236
274
1,125
234
281
3,297
5,204 64,646
13,538 24,837 18,102
0 25,900
4,483
9,486
532
725
7,742
14
23
0
26
192
7
53
68
44
2,174
19
1,502
150
0
0
0
0
111
0
44
10
0
791
0
27
28
6,772 14,626
6,034
5,339
947
891
0
0
0
0
12
0
0
0
0
0
0
2
2
0
303
0
0
0
134
36
40
442
607
We ﬁrst evaluated how well the crawlers cover a web application. A measure
for the coverage is the code coverage, i.e., the number of lines of code that
have been exercised by the testing tool. While this measure is adequate for
code-based testing tools, it may not be for web application crawlers. As web
crawlers operate in a black-box setting, it has a limited visibility of the web
application. In addition, web crawlers do not fuzz input ﬁelds, but they rather
use a user-provided list of inputs. As a result, it may not exercise all the branches,
thus, leaving unvisited signiﬁcant portion of the web application. An alternative
measure can be the number of URLs a crawler can extract.
A web crawler is a component which provides a web scanner with the URLs
to be tested. As the goal of a web scanner is the detection of web vulnerabilities,
the second aspect to evaluate is the detection power. The detection power can be
measured in terms of the number of reported vulnerabilities. Unfortunately, such
a metric may not be fair. Prior research has shown that this type of evaluation is
not an easy task. Web scanners do not support the same classes of vulnerabilities
j¨Ak: Using Dynamic Analysis to Crawl and Test Modern Web Applications
311
and they may diﬀerentiate the target vulnerabilities. In result, the number of
discovered vulnerabilities cannot be comparable among the diﬀerent crawlers.
For this reason, in this paper we limited our comparison to a speciﬁc class of
vulnerabilities, i.e., reﬂected XSS. Second, the number of reported vulnerabilities
may contain false positives. A false positive happens when the scanner reports
the existence of a vulnerability but the vulnerability does not acutally exist.
The number of false positives also measures the accuracy of the web scanner
and indicates whether a scanner adequately veriﬁes if the observed behavior
qualiﬁes as a vulnerability.
Case Studies. We performed our assessment using 13 popular web applications.
These applications include three content management systems (i.e., Joomla 3.4.1,
Modx-CMS 2.02.14, and Nibbleblog 4.0.1), a blogging tool with plugins (i.e.,
WordPress 3.7 and 4.0.1, and Tidio 1.1), discussion forum software (i.e., MyBB
1.8.01 and 1.8.04, and phpNN 3.0.12), photo gallery applications (i.e., Gallery
2.7.1 and Piwigo 2.7.1), cloud storage applications (i.e., OwnCloud 4.0.1 and
8.0.3), and wiki web application (i.e., MediaWiki 1.24.2). Among these, the fol-
lowing ﬁve web application are already known to be vulnerable to reﬂected XSS:
Modx-CMS, MyBB 1.8.01, phpBB, Piwigo, and OwnCloud 4. These web applica-
tions vary in size, complexity, and functionality. We set up these web applications
on our own servers. Each web application was installed in a virtual machine. We
reset the state of the virtual machines upon each test.
Results. We divide the evaluation results into two parts. First, we investigate
the diversity of events that j¨Ak has found and measure the coverage of the
crawlers. Second, we assess how well j¨Ak performs in detecting XSS vulnerabil-
ities as compared to other scanners.
Coverage — Table 2 shows the number of unique event-handler registrations
extracted by j¨Ak. The number of events are shown for each web application,
grouped by event category, i.e., device-dependent input events (DDI), device-
independent input events (DII), Change events (Chg), API events, Error events,
and custom errors. These events are extracted via the dynamic analysis of the
client-side JavaScript program of the case studies.
Table 2 shows that web applications can rely on JavaScript events in a mod-
erate way, i.e., Nibbleblog, or more heavily, i.e., Mediawiki. Most of the regis-
tered event handlers are of the device input and UI categories. Just these events
amount to 68 % of all events, whereas UI events amount to 22 %.
Next we show asses whether j¨Ak outperforms existing crawlers in terms of
coverage. To this end, we measure the number of unique URL structures each
crawler found. The URL structure is a URL without the query string values.
Table 3 shows the results, excluding all URLs for static and external resources.
Numbers in bold mark the tool that extracted the highest number of URL struc-
tures. The symbol ∗ indicates that the results of W3af and Skipﬁsh do not take
into account invalid URLs that have been found via URL forgery (as explained
312
G. Pellegrino et al.
Table 3. Coverage of the web applications in terms of unique URL structures, exclud-
ing linked and static resources, e.g., CSS documents, external JS ﬁles, and images. The
indicates the numbers which do not count URL forgery by W3af and Skipﬁsh.
symbol
∗
Web Apps.
WP
Gallery
phpBB
Joomla
Tidios w/ WP
NibbleBlog
OwnCloud 8
OwnCloud 4
Piwigo
Mediawiki
ModX
MyBB 1.8.1
MyBB 1.8.4
Total
j¨Ak Crawljax W3af
∗
21
17
180
35
50
44
∗
7
4
∗
251
166
∗
7
7
∗
98
54
80
58
277
58
1,258
480
57
21
152
95
152
92
2502
1219
15
7
11
5
21
6
2
–
15
24
2
22
12
142
Wget Skipﬁsh
∗
17
24
27
∗