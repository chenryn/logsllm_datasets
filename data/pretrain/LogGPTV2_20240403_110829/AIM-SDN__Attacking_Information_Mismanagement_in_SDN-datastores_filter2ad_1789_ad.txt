×
×
✓
✓
✓
×
A
✓
✓
✓
✓
✓
✓
×
✓
×
×
C
×
×
×
×
×
×
✓
×
✓
✓
Attack
duration
Privileges
required
Attack
complexity
Severity
Detection
risk
Scope
Status
short
long
long
long
long
long
moderate
moderate
long
short
M
L
L
L
M
L/M
L/M
L/M
L
L
L
L
L
M
H
M
H
H
H
L
H
M
L
H
L
M
H
L
L
H
M
L
L
M
L
H
L
L
M
L
H
M
H
H
M
H
H
M
H
L
reported
CVE1, CVE2
reported
CVE1
reported
CVE2
CVE2, in-progress
in-progress
on-hold
CVE3
CVEs: (1: DoS, 2: APT, 3: credentials); Risk measurement metrics: (L: low, M: medium, H: high); Security properties: (C: Confidentiality, I: Integrity, A: Availability)
communication is completed, a reset of the expired flow rule (via
switch reconciliation) leads to reset of the timers and counters. At
this point, unauthorized traffic is allowed in the network for the
additional 25 seconds (shown red in Figure 8a), overwriting the
values with the statistics of the flow.
In this attack, when a QoS service (for eg., a load balancer) polls
for the flow statistics, the information collected from the network
is misleading which will influence its further decisions.
AT-5 (Unsolicited Configuration): As mentioned in AT-3, the
NMDA datastore architecture allows the applications to store the
configuration for nodes and entities not present in the network.
Present implementations of this otherwise-essential feature lack
security consideration. The present datastore in OpenDayLight
lacks the capability for the user to specify when the timer for the
flow rules (Figure 7) stored in the configuration datastore should
actually begin. Such issues are primarily due to no sense of state or
time maintenance in the configuration datastore. The operational
datastore simply stores the current operational state of the network.
The future of the present configuration for the absent nodes remain
unclear and thus leads to security issues in the network in the event
of a previously-configured node joins the network.
5.3 Attacks on Confidentiality
As described in Section 2.4, the management information of the
SDN controller is stored in a datastore which is different from those
defined by the NMDA (configuration and state). The design flaws
present in the configuration and state datastores may not appear
in the management datastore. Therefore, we undertake a different
approach to detect security issues with the storage and access of
management information.
Unlike the previously-mentioned vulnerabilities, the attacks on
management data primarily originate from the northbound channel.
This is because events and updates in the forwarding plane do not
have impact on the information stored in management datastore.
AT-6 (Cache invalidation): In our testing we observed that
OpenDayLight controller failed to delete the cache after an update
of the users’ credentials. Thus, even after modifying the controller’s
management credentials, the old credentials still could be used to
9
authenticate users and north-bound applications. This leads to priv-
ilege escalation and spoofed authentication by anyone, allowing an
attacker full access to controller’s services and stored information.
5.4 Impact Analysis
From our investigation we observe that there are inherent vulnera-
bilities stemming from the semantic gap problem in the datastore
design adopted by SDN. The attacks described in this work invali-
dates the claim by RFC-8342 (NDMA) [31] which mentions that the
datastore design does not have any security impact on the network
being managed.
In Table 4, we capture the principal characteristics of the vulner-
abilities and attacks reported in this paper. We analyze the risks
with respect to the ease of execution, required privileges and the du-
ration of a successful exploit. Additionally, we evaluate the threats
against the possibility of detection and also the extent of the prob-
lem in diverse SDN-based platforms. With this, we derive an overall
view of the prevailing issues in SDN that stem from the problem of
semantic gap.
AT-1 takes an advantage of limited resources in SDN controller
which is also a central point of failure (controller) and can be trig-
gered by one malicious application as also shown in [20]. When an
attacker crashes the SDN controller, applications cannot configure
the network and control over the network is entirely lost (denial of
service).
AT-2 and AT-3 are covert threats targeted on impacting the
availability of SDN controller. Unlike AT-1, an attacker in AT-2 and
AT-3 does not require one continuous attempt at the target (which
increases the probability of evading detection). The attack in AT-1
requires large amount of configurational updates to be made in a
short duration. However, in the case of AT-2 and AT-3, the attack
can be spread out for a considerably longer duration (even months).
The size of configuration updates in AT-2 and AT-3 does not
have a lower bound, making detection difficult. When performed
in a distributed manner over a long period, these attacks make it
difficult to perform root cause analysis: small amounts of updates
from a large number of clients over a long duration increases the
entropy of attack footprint.
The attacks under AT-4 leverage the idea and techniques of flow
table attack when an attack originates from the network (adversarial
Accepted submission #476 to ACM CCS 2018 (PREPRINT, NOT FINAL)
Table 5: Summary of impacted SDN platforms and enterprises.
Platform
OpenDayLight (ODL)
Open Network OS (ONOS)
Cisco Open-SDN
Contrail / OpenContrail
Lumina SDN
Ericsson Cloud SDN
Huawei Agile
Big Cloud Fabric (BCF)
HP VAN Controller
Cisco APIC
Open Networking Platform
AT&T Integrated Cloud (AIC)
ZENIC vDC Controller
Base design
-
-
ODL
-
ODL
ODL / OpenStack
ODL / ONOS
FloodLight
-
-
ODL
Juniper
OpenStack
Vendor
Linux-NF
Linux-NF
Cisco Systems
Juniper
Lumina
Ericsson
Huawei
Big Switch Networks
HP
Cisco Systems
Inocybe
AT&T
ZTE Corporation
Management
NETCONF / NMDA
NETCONF / NMDA
NETCONF / NMDA
OPENSTACK
NETCONF / NMDA
NETCONF / NMDA
NETCONF / NMDA
OF
-
OF / NETCONF
NETCONF / NMDA
OF / OPENSTACK
OPENSTACK
Open Source
✓
✓
×
✓×
×
✓×
×
×
×
✓
×
×
×
Impact
AT-(1,2,3,4,5,6)
AT-(1,3,4,5)
AT-(1,2,3,4,5,6)
AT-(1,2,3,4,5,6)
AT-(1,2,3,4,5,6)
AT-(1,2,3,4,5)
AT-(1,2,3,4,5)
-
AT-(2,4)
AT-(1,2,3,4,5,6)
AT-1
AT-1
hosts). For attacks originating from the southbound channel, there
exist work on the detection of flow table flooding attacks [34, 36].
However, an attacker in our scenario does not primarily target the
switch’s flow tables. The attacker’s interest lies in the intermediate
impact that a flow table attack has on the controller (and datas-
tores). The performance of the controller can be impacted in such
a situation even if the flow table attack was not successful.
We also analyzed the capabilities that adversary gains when a
forwarding element (e.g., a switch) is already compromised. SDN
security is often analyzed from the scenario of an attacker being able
to compromise a switch on the network and attack the controller-
switch channel. These attacks are widely popular and therefore,
the counter measures are readily available. For example, switch
table overflow can be mitigated [36] and a SYN-Flood attack can
be prevented using [34]. However, the attacks that we describe
don’t need to flood the communication channel, but rather target
the datastore, evading detection from existing techniques.
Lastly, because we do not focus on the vulnerabilities in appli-
cations that run inside SDN controllers, our attacks are agnostic
to any specific implementation of controller. Therefore, the design
flaws highlighted in this work are not limited in nature to ODL and
ONOS and their users [26, 28]. As shown in Table 5, they also im-
pact SDN controllers and cloud management systems—using NMDA
design—by enterprises such as RedHat, Cisco, Brocade, IBM, Erics-
son, Extreme Networks, Huawei, etc.
5.5 Responsible Disclosure
We demonstrated the importance of the discovered vulnerabili-
ties by verifying them in different carrier-grade controllers (ODL,
ONOS). The organizations involved in the design and development
of these platforms verified the feasibility and impact of the attacks
that we reported. Additionally, in conjunction with the organiza-
tions, we responsibly disclosed some of the vulnerabilities, and were
assigned CVEs: CVE-2017-1000411 (DoS), CVE-2018-1078 (Advance
Persistent Threat), CVE-2017-1000406 (cached credentials)1. We are
actively working with engineers to identify the root cause of some
other attacks which are not publicly disclosed yet, including one
confirmed issue on the ONOS bug tracker: ONOS-74562.
1Note, searching for these CVEs will compromise our anonymity.
2Note, this issue is not publicly available as it concerns an open security vulnerability.
10
6 BRIDGING THE SEMANTIC GAP
Through our assistance to the engineers responsible for the SDN
controllers impacted by our identified vulnerabilities, we have iden-
tified several approaches can be incorporated to prevent at least
some of the attacks mentioned in this paper. The mitigation mea-
sures can be employed at several different layers of the SDN design.
However, as the underlying issue lies in the NMDA design, each
mitigation has drawbacks.
6.1 External applications
To prevent the overflow of data, we propose to use a mechanism
to limit the amount of configuration that an application can install.
One can use a rate limiting proxy at the API level to monitor the
REST channel for any suspicious amount of traffic. For strength-
ening the security of the management data, the management APIs
within SDN controller should only ever be deployed within a seg-
regated private network
6.2 Mitigating denial of service
Preventive measures should be placed at the controller level as
the applications are consumers of the services provided by the
controller. Therefore, we propose to set the percentage of heap uti-
lization for the resources and datastores inside the controller. This
threshold can be defined as part of the modeling scheme (YANG)
used by services inside the controller. Based on the dynamic statis-
tics of heap utilization, the resources within the controller can be
dynamically scaled. After reaching the threshold of utilization, the
application can no longer install the configuration and server will
respond accordingly.
Lack of systematic synchronizations between configuration and
operational datastores is a major downside in the present design.
The expired configuration persists in the configuration datastore
only because the datastore is oblivious to the state of the configu-
ration in the network. It will be a huge performance overhead if an
application must continuously (every millisecond) probe the state
of the network in the operational datastore. Instead, we propose
to introduce a system clock in the datastores. An application can
easily know the state of the configuration with respect to time if