ing workloads at public cloud. 2) Correctness: the timing
analysis results from our framework should be exactly the
same as the ones computed from the original timing analy-
sis approach. 3) Eﬃciency: the local computation should be
substantially less than performing timing analysis over the
full IC. The communication cost should be minimized.
4. OUR PROPOSED DESIGN
This section presents our practical privacy-preserving tim-
ing analysis system. We start from the system functions, and
then elaborate on them including the extraction methodol-
ogy for the critical timing graph, the pairwise longest path
computation for conducting Monte Carlo simulations over
non-critical timing graph, a heuristic reduction algorithm
on cloud’s intermediate results, and the integration on in-
termediate results with the reserved critical timing graph.
4.1 System Framework
The processes at LS comprise two functions Extract and
Integrate. The process on CS is represented by one function
Compute. Each function is summarized below:
• Extract(G) → {Gc, Go}: The function protects critical
IP design data and functionalities. It takes the full cir-
cuit timing graph G as input, and outputs the critical
timing graph Gc and the outsourced timing graph Go.
• Compute(Go, N ) → {Gr}: The function performs sim-
ulations at CS. It takes Go and the number of Monte
Carlo simulations N as inputs, and outputs the inter-
mediate results Gr.
• Integrate(Gc, Gr, N ) → {χ}: The function obtains the
ﬁnal timing analysis result. It takes Gc, Gr and N as
inputs, and outputs the longest path distribution χ.
4.2 Critical Subgraph Extraction
One fundamental requirement of our timing analysis sys-
tem is to protect the critical design data. We leverage the
observation of IP reuse design methodology [19, 25]. Most
of the reused IP blocks are standard, and the critical design
(a) Anonymize timing graph
(b) Extract vertex
(c) Re-index vertices
(d) Color boundary vertices
Figure 4: The procedure of Extract function
data such as newly designed IP blocks are only a small por-
tion in the whole design. Therefore, we plan to extract the
corresponding critical timing graph from the full-circuit tim-
ing graph, and simultaneously generate a non-critical out-
sourced timing graph. Our extraction does not place any
critical design data to CS, and it further ensures the correct
computation at CS on outsourced data and facilitates the
subsequent integration at LS.
An illustrative example. To illustrate our idea, we con-
sider a simple example of extracting discrete vertices in Fig-
ure 4. The circuit timing graph with topological-order in-
dexed vertices is ﬁrstly anonymized as shown in Figure 4a.
Assume that v4 is critical, we then extract v4 and its ad-
jacent weighted edges in Figure 4b, to prevent reverse en-
gineering from using such information to identify its rep-
resentative gate and functionality. However, v4 is possibly
revealed from the vertex index information. Accordingly, we
re-index the vertices by starting from 1 continuously to be
compatible with the topological-order, shown in Figure 4c.
Such index mapping information is reserved locally for the
correctness of integration later. While doing so achieves pri-
vacy protection, it does not facilitate the correct computa-
tion at CS. Therefore, we have to further provide CS with
some hints, i.e., v4’s adjacent vertices, source S and sink D
should be gray colored as boundary vertices in Figure 4d.
As shown in Section 5, revealing these hints does not com-
promise the security. To present Extract formally, we ﬁrst
give some auxiliary deﬁnitions:
Deﬁnition 1
(Sub critical timing graph). Sub crit-
i , where 1 ≤ i ≤ n. They
ical timing graph is deﬁned as Gs
map to the total n critical IP blocks. Gs is the union set,
where Gs = Gs
n).
2)(cid:83) . . .(cid:83) Gs
1)(cid:83) Gs
2(V s
2 , Es
n(V s
n , Es
1(V s
1 , Es
Deﬁnition 2
(Boundary vertex). The vertex adja-
cent to Gs
i . And source S
and sink D are also set to boundary vertices. The set of
boundary vertices is deﬁned as V b.
i is deﬁned as boundary vertex vb
Deﬁnition 3
ary vertex is deﬁned as boundary edge eb
ary edges is deﬁned as Eb.
(Boundary edge). The edge with bound-
i,j. The set of bound-
101132320011Sv1v2v3v4v5v7v6D10113320011Sv1v2v3v4v5v7v6D10113320011Sv1v2v3v4v6v5D0113320011Sv1v2v3v4v6v5D240Algorithm 1: Single-source prime path SP P (vi):
Data: vi: Pi,j’s starting vertex vi, where vi ∈ V b.
Result: Wi,j: the weights of Pi,j.
begin
for each vj ∈ Vo do
tj ← 0; lj ← 0;
li ← 1;
for j ← i + 1 to |Vo| do
for each vk ∈ vj.adjin do
if lk = 1 then
tj ← max{wk,j + tk, tj};
lj ← 1;
if vj ∈ V b then
Wi,j.insert(tj);
1
2
3
4
5
6
7
8
9
10
Deﬁnition 4
(Critical timing graph). Critical tim-
ing graph is deﬁned as Gc(Vc, Ec), where Vc = V s(cid:83) V b and
Ec = Es(cid:83) Eb.
(V − Vc)(cid:83) V b and Eo = E − Ec.
Outsourced timing graph is deﬁned as Go(Vo, Eo), where Vo =
(Outsourced timing graph).
Deﬁnition 5
Based on the deﬁnitions, Extract is conducted as follows:
1) Extract critical timing graph: Critical IP blocks’ corre-
sponding timing graphs Gs are all extracted from G, and
V b and Eb which are adjacent to Gs is extracted too. As a
result, Gc including Gs, V b and Eb is reserved at LS.
2) Re-index vertices: The inconsecutive indexes indicate the
gate numbers in critical IP blocks, so we re-index Vo in con-
secutive order starting from value 1. It is compatible with
the topological-order for computation correctness later.
3) Color boundary vertices: Boundary vertices V b are gray
colored in Go to indicate the starting and ending vertices of
truncated paths for the outsourced workloads at CS and the
integration for ﬁnal timing analysis at LS.
Purpose of boundary vertices.
For correctness, the
boundary vertices are colored in the outsourced timing graph.
It not only enables cloud to generate the intermediate re-
sults, but also ensures the correct integration later at the
local server. Although cloud wants to infer the input and
output vertices from those boundary vertices for IC reverse
engineering, we note that such limited capability of cloud
is not able to compromise the conﬁdentiality of critical IP
design data. We show that the IP protection of our system
still holds from the security analysis later in Section 5.
Guideline on deﬁning critical IP blocks.
In prac-
tice, IC companies also want to protect IP blocks with sen-
sitive functionalities in addition to newly designed ones. For
examples, some IP blocks are security-critical and safety-
critical [18]. The former ones contribute to economic and na-
tional security as they could be fundamental building blocks
for commercial, industrial, and national security electronic
systems. The latter ones are used in automotive systems
and healthcare applications which aﬀect human safety and
personal privacy. Those IP blocks revealing other sensitive
information should be extracted too. We note that introduc-
ing more critical IP blocks will introduce more computation
cost locally, but it is necessary for IP protection.
Algorithm 2: Compute on the outsourced timing graph
Compute(Go, N )
Data: Go: the outsourced timing graph;
N : the number of MC simulations.
Result: Gr: the reduced timing graph.
begin
for n ← 0 to N do
// Generate gate delays (See Appendix).
W eightGen(Go);
for each vi ∈ vb, and vi.adjout (cid:54)= ∅ do
// Compute prime path weights;
SP P (vi) ;
// Reduce bandwidth;
Gr ← T ransf orm(Gr); ;
1
2
3
4
5
4.3 Compute on Outsourced Timing Graph
Originally, each simulation of timing analysis computes
the longest path from source S to sink D, while Go only
contains the non-critical truncated subpaths. For the state-
of-the-art longest path algorithms like PERT, they are usu-
ally based on the sequential processing of vertices, and di-
rectly applying them will result in tremendous interactions
between CS and LS. To overcome such obstacle, we pro-
pose Compute to perform pairwise longest path computation
based on boundary vertex information indicated in Extract.
That design provides beneﬁts in two-fold: it can shift most
workloads to CS; it only requires one round interaction to re-
turn the intermediate results while ensuring the correctness
of computations in Integrate later. For security, Compute
only carries out computations over Go without retrieving
any data from LS.
Our new design still utilizes the topologically-sorted or-
der of vertices for correctness and eﬃciency, but targets the
pairwise longest paths that start and end only at bound-
ary vertices. We leverage the fact that the subpaths of
longest paths are also longest paths. Hence, we propose to
ﬁnd all the boundary-vertex pairwise subpaths, and each of
those longest subpaths can be further treated as a directed
edge with some weight equivalent to the path weight. Ac-
cordingly, Compute will obtain all boundary-vertex pairwise
longest paths for each simulation, and load them to a re-
duced timing graph, as the intermediate results for Integrate.
Prime path computation . To solve the problem, we pro-
pose a single-source prime path (SPP ) algorithm which will
be called multiple times in each simulation. Here, we present
several deﬁnitions for the algorithm ﬂow in Algorithm 1:
Deﬁnition 6
(Boundary-vertex pairwise path).
Boundary-vertex pairwise path pi,j is deﬁned as a set of or-
dered edges from vi and vj, where vi and vj are the only
boundary vertices along the path.
Deﬁnition 7
(Prime path). Prime path Pi,j is deﬁned
as the longest pi,j from vi to vj.
Deﬁnition 8
(Prime path weights). Prime path
weights are deﬁned as Wi,j, where Wi,j is a set of {W k
and W k
i,j is derived from the k-th simulations.
i,j},
SP P (vi) starts from one of boundary vertices vi and per-
forms one round graph traversal to obtain all weights of
241Algorithm 3: Transform the reduced timing graph
T ransf orm(Gr)
Data: Gr(Vr, Er): the reduced timing graph;
Result: G(cid:48)
begin
r): the transformed timing graph.
r , E(cid:48)
r(V (cid:48)
for ∀vk, where vk ∈ Pi,j do
compute βk;
if βk > 0 then
Q.push(βk);
Sort(Q) in descending order;
Qsrc ← ∅, Qsink ← ∅;
while Q (cid:54)= ∅ do
ﬁnd vk, where βk ← Q.pop;
src = ∅ and Qsink
if Qsrc
(cid:84) Qk
(cid:84) Qk
sink = ∅ then
V b.insert(vk);
for each ei,j passing vk, where vi ∈ Qk
vj ∈ Qk
sink do
src,
Er.delete(ei,j);
for each ei,k do
Er.insert(ei,k), wi,k ← ti
k;
for each ek,j, and ek,j /∈ Er do
j − ti
Er.insert(ek,j), wk,j ← ti
k;
src), Qsink.push(Qk
Qsrc.push(Qk
sink);
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
vi+m has prime paths that end at every boundary one from
vj+1 to vj+n. If all those prime paths pass vk, Gr can be
transformed to another timing graph. During the transfor-
mation, vk is deﬁned as bridge vertex and set as new bound-
ary vertex splitting those prime paths. Meantime, the sub
longest path weights are assigned. As a result, mn edges
are removed and m + n edges are introduced. We deﬁne the
saving as βk for vk, where βk = mknk − (mk + nk). As long
as βk is positive, the bandwidth will be saved.
Based on the observation, our heuristic approach ﬁrst re-
quires algorithm SPP to trace and cache all vertices like vk,
and then selects new boundary vertices in the descending or-
der of their related savings to invoke the above Transform.
Since the tracing and caching is integrated in one-pass SPP,
the introduced overhead is acceptable, which is also shown
later from our evaluation in Section 6.
Heuristic implementation. Our implementation of band-
width reduction is presented in Algorithm 3. It is embedded
in each simulation of Compute as shown in Algorithm 2. In
particular, all the {Pi,j} are traced in each SPP, i.e., the ver-
tex’s ancestor on a prime path is updated and cached after
the max operation in SPP. With the prime path informa-
tion, subroutine Transform transforms the graph Gr to G(cid:48)
r
with fewer edges. We heuristically evaluate all the cached
bridge vertices {vk} with positive saving {βk}, where {βk}
are stored in a descending order at a queue Q. The ﬁrst
element of Q is popped up because of its maximum saving.
Then we ﬁnd the corresponding bridge vertices vk and color
it as boundary vertex. After that, ei,j is removed, while ei,k
and ek,j are introduced with updated weights.
Ordering by {βk}, the corresponding vertices are set as
bridge ones sequentially if they have no overlapping on their
paths’ source and sink boundary vertices respectively. Such
heuristic strategy is to avoid repetitive transformations. If
(a) Prime paths {Pi,j} in Gr
(b) {Pi,j} that pass vk
Figure 5: Observation on bandwidth reduction
prime paths which start from vi. Initially, the longest path
weight tj from vi to vj is set to 0 for all vertices in Vo. Note
that the vertex indexes still follow the topological-order after
re-indexing in Extract. To leverage such beneﬁt while guar-
anteeing the correctness, only vertices on prime paths {pi,j}
should be processed. As vertices on {pi,j} are all reachable
from vi, we introduce a reachable label li to indicate the
reachability. In line 6 of Algorithm 1, if vk is reachable from
vi, where vk is in vj’s incoming adjacent list vj.adjin, vj
is also reachable from vi. Then vj should be processed in
line 7 and lj should be updated too. When another bound-
ary vertex vj is processed, tj is inserted to Wi,j. SP P (vi)
terminates when the last vertices in Vo is processed.
As shown, SP P (vi) does not have to traverse the whole
Go as long as vi is in the middle of Vo. The complexity is
bounded by O(|Vo| + |Eo|). After all boundary vertices are
processed, Go is simultaneously reduced as a relatively small
graph called the reduced timing graph Gr, which contains
the boundary vertices only, and its edge number |Er| is equal
to the number of prime paths. When all N simulations are
completed, each edge in Gr will obtain N weights. And Gr
is the intermediate result for integration later at LS.
Acceleration via parallel computing. To further accel-
erate Compute, we can leverage the parallel computing with
cloud. In Monte Carlo simulations, because each simulation
is independent of any other ones, Compute can naturally
be conducted in parallel through distributing Monte Carlo
simulations on Go over multiple cloud servers.
4.4 Bandwidth Reduction
After Compute at cloud, the reduced graph Gr has fewer
edges than Go. However, it still introduces potentially large