)。于是我下载了源码，开始对源码进行分析。我在`jdk.nashorn.internal.parser`包下面发现了`Lexer`类。类中有几个函数是用来判断`js空格`和`js换行符`
的，其中主要的三个字符串如下。
    private static final String LFCR     = "\n\r"; // line feed and carriage return (ctrl-m) 
    private static final String JAVASCRIPT_WHITESPACE_EOL =
        LFCR +
        "\u2028" + // line separator
        "\u2029"   // paragraph separator
        ;
    private static final String JAVASCRIPT_WHITESPACE =
        SPACETAB +
        JAVASCRIPT_WHITESPACE_EOL +
        "\u000b" + // tabulation line
        "\u000c" + // ff (ctrl-l)
        "\u00a0" + // Latin-1 space
        "\u1680" + // Ogham space mark
        "\u180e" + // separator, Mongolian vowel
        "\u2000" + // en quad
        "\u2001" + // em quad
        "\u2002" + // en space
        "\u2003" + // em space
        "\u2004" + // three-per-em space
        "\u2005" + // four-per-em space
        "\u2006" + // six-per-em space
        "\u2007" + // figure space
        "\u2008" + // punctuation space
        "\u2009" + // thin space
        "\u200a" + // hair space
        "\u202f" + // narrow no-break space
        "\u205f" + // medium mathematical space
        "\u3000" + // ideographic space
        "\ufeff"   // byte order mark
        ;
很显然到这里我们已经获取了非常多的可以替换空格和换行符的unicode码。于是我就简单尝试了一下绕过。在尝试过程中发现部分也是可以被检测出来的，而另外一部分不起作用。
**我猜想是js和java的处理这些字符的逻辑不同导致的**
    String test62="var test = mainOutput(); function mainOutput() { var x=java.\u2029lang.Runtime.getRuntime().exec(\"calc\");};";
### 4.2 注释函数分析
先把原来的一个注释过滤的代码拿过来，可以看到对注释的处理用的是正则，所以才被上面的unicode绕过了。
    String removeComment = StringUtils.replacePattern(code, "(?:/\\*(?:[^*]|(?:\\*+[^*/]))*\\*+/)|(?://.*)", " ");
看上面的正则，我们发现对于单行注释的替换非常简单，就是以`//`开头的后面的内容都替换为空，这就出现了新的绕过。这个绕过的原因是因为和解析器对于注释的解析不同造成的。  
先看一下`skipComments`函数。
    protected boolean skipComments() {
            // Save the current position.
            final int start = position;
            if (ch0 == '/') {
                // Is it a // comment.
                if (ch1 == '/') {
                    // Skip over //.
                    skip(2);
                    // Scan for EOL.
                    while (!atEOF() && !isEOL(ch0)) {
                        skip(1);
                    }
                    // Did detect a comment.
                    add(COMMENT, start);
                    return true;
                } else if (ch1 == '*') {
                    // Skip over /*.
                    skip(2);
                    // Scan for */.
                    while (!atEOF() && !(ch0 == '*' && ch1 == '/')) {
                        // If end of line handle else skip character.
                        if (isEOL(ch0)) {
                            skipEOL(true);
                        } else {
                            skip(1);
                        }
                    }
                    if (atEOF()) {
                        // TODO - Report closing */ missing in parser.
                        add(ERROR, start);
                    } else {
                        // Skip */.
                        skip(2);
                    }
                    // Did detect a comment.
                    add(COMMENT, start);
                    return true;
                }
            } else if (ch0 == '#') {
                assert scripting;
                // shell style comment
                // Skip over #.
                skip(1);
                // Scan for EOL.
                while (!atEOF() && !isEOL(ch0)) {
                    skip(1);
                }
                // Did detect a comment.
                add(COMMENT, start);
                return true;
            }
            // Not a comment.
            return false;
        }
从上面的代码可以看出来，当遇到以`/`开头的就会检测第二个是不是`/`如果是的话就回去找`EOF换行符`，而这些`//......EOF`之间的内容都会被当做注释绕过的。  
那么当我们的代码是如下的样子
    String test61="var test = mainOutput(); function mainOutput() { var x=java.lang.//\nRuntime.getRuntime().exec(\"calc\");};";
因为我们的正则不严谨，用于匹配的字符串为`var test = mainOutput(); function mainOutput() { var
x=java.lang.`而被解析后的代码为`var test = mainOutput(); function mainOutput() { var
x=java.lang.Runtime.getRuntime().exec(\"calc\");};` 成功绕过了我们的检测。  
上面的代码还有一个关于`#`的注释，但是一直没有尝试成功，猜测可能跟`assert scripting`这行代码有关。
## 附录
### 源码下载
### 参考
### 鸣谢
[@feihong](https://xz.aliyun.com/u/36266) 非常感谢飞鸿师傅的帮助。  
[@小路鹿快跑](https://xz.aliyun.com/u/39987) 还有这位师傅给的建议也给了我新的启发