我们专注漏洞检测方向：danenmao、arnoxia、皇天霸、lSHANG、KeyKernel、BugQueen、zyl、隐形人真忙、oxen（不分先后）
欢迎关注我们的微信公众号：[EnsecTeam](http://t.cn/Rgs1Bew "EnsecTeam")  
作者：隐形人真忙 & KeyKernel
**TL;DR**
本文主要介绍通过Hook技术和漏洞Fuzz的方式来构建灰盒自动化漏洞挖掘系统的技术原理与细节，并给出企业级部署实践与检出效果。
**1\. 什么是灰盒扫描**
传统扫描器的原理实际上是构造一些探测串，一般称之为载荷（payload），用这些构造出来的数据进行组包并发送给服务器，当服务器返回数据或者做出的反应符合某种判定规则时，就认为有漏洞。这个过程是一个黑盒探测的过程，并不涉及到服务的具体逻辑，而且受网络通信的制约较大——如进行延时SQL注入扫描时，网络延迟的大小直接影响扫描的准确性。此外，基于黑盒的传统扫描往往需要发送大量的数据包，如布尔型SQL注入漏洞扫描中，需要构造大量的闭合语法扫描payload，可能仅仅检测一条URL就要发送1000个以上的请求。  
灰盒漏洞扫描正是为了弥补传统黑盒扫描的不足，通过HOOK需要检测的敏感函数，可以在web应用运行时获取到对应的危险参数，配合Fuzz技术，可以更加高效、准确地发现漏洞。
**2\. 灰盒扫描架构设计**
本节以PHP语言为例，来讲解如何构建一个适用于PHP的动态灰盒扫描系统。灰盒扫描系统一般分为三部分：  
（1） HOOK部分  
主要实现对一些危险函数进行HOOK，确保在运行时环境中能够获取到传入函数的任意参数。  
（2） Fuzz部分  
主要生产一些精心构造的污染数据，比如包含一些特殊符号的字符串等。通过扫描发包的方式将脏数据插入到各个待检测的地方。  
（3） 规则部分  
主要负责对漏洞的识别。通过和Fuzz系统进行配合，检查HOOK到的参数是否符合判别规则，从而判断是否存在漏洞，如果存在则发起上报流程。  
这三个模块如下图所示进行整合：
当然，基于fuzz的思路也有缺点，那就是非常依赖于待测web应用的URL输入源的质量。如果URL不够完整，很可能会漏掉某些代码片段，无法做到像静态代码扫描一样的全面检查。事实上，这也是静态分析技术和动态分析技术的区别，即动态分析技术的代码覆盖很难做到非常全面。
**3\. 构建灰盒扫描系统**  
3.1 构建HOOK层  
3.1.1 HOOK原理  
3.1.1.1 Zend和PHP
PHP是一个解释型语言，我们编写的PHP脚本文件需要解释器进行解析，生成中间代码然后执行。实现一个解释语言一般需要三个部分：  
（1） 解释器部分：分析输入的代码，翻译该代码，然后执行代码。  
（2） 功能部分：完成语言的一些特性和功能（如函数、类等等）  
（3） 接口部分：提供外部统一交互接口（如与Web通信等）  
Zend引擎是PHP实现的核心，它完成了解释器部分的实现，并且部分参与  
PHP的功能部分实现，如一些PHP语言的实现、扩展机制、内存管理机制等。Zend引擎与PHP的关系图如下：  
通常我们都选择使用实现一个扩展的形式来扩展PHP，在PHP扩展中，我们可以调用Zend
API做很多定制化的功能，包括实现对PHP内置函数调用的HOOK操作。
3.1.1.2 PHP Opcode
PHP是一种解释型语言，运行一段PHP代码通常包含两个阶段：编译和执行，其中编译部分包含语义分析、语法分析等阶段，这些功能由Zend引擎负责提供。一段PHP脚本文件经过Zend内核的处理，会变为一系列的操作码，称为opcode。这是一种Zend内核可以理解的中间语言，在执行阶段就是去执行这些opcode完成操作。  
我们可以使用vld扩展（
    [root@localhost]# wget http://pecl.php.net/get/vld-0.14.0.tgz
    [root@localhost]# tar zxvf vld-0.14.0.tgz
    [root@localhost]# cd vld-0.14.0/
    [root@localhost]# phpize
    [root@localhost]# ./configure - -with-php-config=[your path of php-config] - -enable-vld
    [root@localhost]# make && make install
安装完成后，编辑一段PHP代码如下：
执行下面的命令输出opcode：
    [root@localhost]# php –dvld.active=1 test.php
可以清晰地看到在Zend内核中，针对echo是有一个名为“ZEND_ECHO”的opcode对应的。通过vld工具，我们可以看到函数调用过程中，Zend是分配了一个名为”ZEND_DO_FACALL”的opcode进行处理。  
Opcode对应的结构体定义在{$PHP_HOME}/Zend/zend_compile.h，{$PHP_HOME}代指本地的PHP源码文件所在路径，下文的描述中统一使用这个替代符。  
这里以PHP 5.4为例，低版本的PHP如5.2中opcode的定义截然不同。
    struct _zend_op {
        opcode_handler_t handler;  // opcode对应的处理函数
        znode_op op1;  //第一个操作数
        znode_op op2;  //第二个操作数
        znode_op result;   //该opcode执行结果
        ulong extended_value;  //附带信息
        uint lineno;   //对应的行号
        zend_uchar opcode;   //对应的op指令
        zend_uchar op1_type;  //op1的类型
        zend_uchar op2_type;   //op2的类型
        zend_uchar result_type;  //返回值类型
    };
每个opcode对应一个opcode_handler_t类型的函数，该函数用于实现opcode对应的操作。Handler函数定义可以在{$PHP_HOME}/Zend/zend_vm_execute.h中找到，比如ZEND_ECHO指令的一个handler函数如下：
    static int ZEND_FASTCALL ZEND_ECHO_SPEC_CONST_HANDLER(ZEND_OPCODE_HANDLER_ARGS)
    {
        USE_OPLINE
        zval *z;
        SAVE_OPLINE();
        z = opline->op1.zv;  // 提取操作数
        if (IS_CONST == IS_TMP_VAR && Z_TYPE_P(z) == IS_OBJECT) {
            INIT_PZVAL(z);
        }
        zend_print_variable(z);  // 执行打印操作
        CHECK_EXCEPTION();  // 检测异常
        ZEND_VM_NEXT_OPCODE();  // 移动至下一个opcode
    }
PHP内核的知识非常之丰富，但毕竟不是本文的重点，编写健壮、可持续运行的HOOK机制还需要对Zend内核源码更加细致的研究才能实现，这里由于篇幅限制不进行赘述。
3.1.2 HOOK实现  
对PHP内置函数进行HOOK以获取运行时的函数参数，一般来说有下面三种方式：  
（1） 对特定的Opcode进行HOOK  
（2） 对ZEND_DO_FCALL进行HOOK  
（3） 对PHP_FUNCTION实现函数进行HOOK  
下面分别介绍这三种方式如何实现函数的HOOK
3.1.2.1 HOOK FCALL  
在PHP内核中，每一个OP操作都是由一个固定的op Handler函数去负责的，即_zend_op结构体的handler属性，表示该OP对应的op
handler函数。  
我们可以通过调用zend_set_user_opcode_handler，将对应的Zend
Opcode的handler函数替换成自己定义的函数实现HOOK机制：
    zend_set_user_opcode_handler(ZEND_ECHO, hook_echo_handler);
当PHP执行ZEND_ECHO（即调用echo输出字符串）的时候就会调用我们的handler函数，这样就实现了HOOK，完成我们自定义的操作后，将opcode的处理转给默认的Opcode
handler函数即可。  
很多PHP内置函数的调用底层都是ZEND_FCALL进行实现的。  
因此，我们需要HOOK两个opcode，ZEND_DO_FCALL和ZEND_DO_FCALL_BY_NAME，后者是通过动态参数调用的opcode。  
而在我们自己的handler中，可以通过获取这两个opcode函数名称来对不同的函数进行hook操作。在PHP 5.4版本中，HOOK思路如下：  
（1）从EG(current_execute_data)->function_state.function中获取原有的函数。  
（2）然后对函数调用和类方法调用分别来执行HOOK操作  
（3）HOOK完成后，恢复原有函数，将function_state.function重新赋值  
注意，对于不同的PHP版本，所使用的结构体是不一样的。  
在执行函数调用时，函数参数是保存在一个Zend虚拟机的栈结构中，因此我们需要移动指针来获取函数中的所有参数。  
在FCALL的自定义handler中，函数参数分布图如下：
参数放入了EG(argument_stack)结构，因此首先获取一个栈顶指针：