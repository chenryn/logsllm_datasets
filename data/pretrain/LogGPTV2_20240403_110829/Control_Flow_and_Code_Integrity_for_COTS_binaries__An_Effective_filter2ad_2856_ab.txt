they contain some internal functions such as _dl_map_object,
_dl_open and _dl_open _worker that can be utilized by an
attacker to load malicious libraries.
Turning on stack executability. A common assumption
for many security defenses is the existence of DEP, which
is also the ﬁrst obstacle for attackers. However, on Linux,
this assumption can be invalidated by invoking a function
3
_dl_make_stack_executable in the loader
2.2.2 Data corruption attacks
Library hijacking attacks. Executable ﬁles specify the
libraries they depend on, but not the search path used to
locate these libraries. Recent vulnerability reports [8, 6, 7]
indicate that by subverting the search path, attackers can
load malicious libraries. Search path can also be controlled
using environment variables such as LD_PRELOAD, LD_AUDIT,
LD_LIBRARY_PATH, or search path features like: $ORIGIN, and
RPATH. Equally important, memory corruption attacks can
modify search path related data structures, thus overriding
the original path setting.
.
Leveraging these attack vectors, attackers can load unex-
pected libraries in place of original libraries [1, 11]. This may
lead to privilege escalation attacks [10, 4, 9, 5]. On Win-
dows, FireEye reports [56] an increasing use of the WinSxS
side-by-side assembly feature [15] to load malicious libraries,
bypassing normal search for libraries in typical directories
containing DLLs.
Malformed ELF binaries. Like any complex piece of
software, the dynamic loader is bound to contain vulnera-
bilities [2]. Malformed binaries are one of the best ways to
trigger them [3, 12]. It has been reported that malformed
relocation data can be used to circumvent code-signing on
certain Apple iOS versions [13]. Researchers have also doc-
umented more general attacks, showing how malformed re-
location information can be utilized to perform arbitrary
operations [53].
Corrupting loader data. Some binaries require the loader
2vDSO is a dynamic library exported by the Linux kernel to sup-
port fast system calls.
3Stack executability is a “feature” that is available to support
GCC nested functions, a legacy feature.
to perform relocation.
It is possible to exploit this capa-
bility to modify existing code. In particular, we found an
attack that ﬁrst corrupts the relocation ﬂag, then replaces
the relocation table and symbol table with forged versions by
overwriting loader data structures in memory. A subsequent
code reuse attack, involving a call to the loader function for
performing relocation, resulted in a successful attempt to
modify already loaded code. Note that some details of our
attack is similar with a previous paper [53].
We note that this attack is available not only on glibc,
but also other loader implementations such as those pack-
aged with bionic libc for Android (before 4.3), uClibc for
embedded systems and other POSIX-compliant libc such as
musl-libc.
2.2.3 Attacks based on data races
Several potential opportunities exist through which an at-
tacker controlled thread can modify loader data while it is
being used and/or modiﬁed by the loader. We identify three
of the most attractive avenues in this regard:
• File descriptor race: In order to load a library, the loader
ﬁrst performs an open on the ﬁle to obtain a ﬁle descriptor
f d, and then uses f d in an mmap operation to map the
code and data pages into program memory. An attacker’s
thread can race with the loader to change the ﬁle pointed
by f d. This can be accomplished using system calls such
as dup2.
• Racing to corrupt data segments used during loading: Data
segments in the library are loaded with write-permission
enabled. An attacker’s thread can race with the loader to
corrupt parts of this data that contain ELF segment infor-
mation. When this corrupted data is used by the loader
to load code segments, the loader may end up doing the
attacker’s bidding.
• Racing during relocation: Binaries that rely on text re-
location provide another opportunity. Speciﬁcally, dur-
ing the time of relocation, the loader maps the executable
pages for writing. An attacker’s thread can now overwrite
the code being patched by the loader.
2.2.4 Text Relocation Attack
Through our experiment, we found a new code injection
attack using relocation metadata.
In particular, we ﬁnd
that adding a text relocation ﬂag can fool the loader into
“repatching” the executable sections of a library. Moreover,
by corrupting the loader’s data structures, we could replace
the original relocation table and symbol table with forged,
malicious tables. When the loader performed relocation us-
ing these forged tables, it resulted in a code injection attack.
This attack is available not only on typical Linux distribu-
tions, but also other loader implementations such as those
packaged with bionic libc for Android, uClibc for embedded
systems and other POSIX-compliant libc such as musl-libc.
It aﬀects not only Linux, but also iOS (before v7.1) and
Android (before v4.3). Further details of the attack can be
found in our technical report [67]
3. SYSTEM DESIGN
To defeat the kind of attacks described in the previous sec-
tion, we develop a security primitive for code loading which
ensures that a process executes only the native code that it
is explicitly authorized to execute. Our design ensures the
integrity of all code from the binary ﬁle to its execution.
93
While the design of CFCI is independent of underlying CFI,
our implementation builds on the static binary instrumen-
tation platform PSI [65], which implements BinCFI [66].
CFCI secures the loader using a small reference monitor
that operates by intercepting key operations relating to code
loading. This reference monitor is based on a state model of
a loader described below.
3.1 Loader State Model
Our state model captures the essential steps involved in
loading a binary and setting up various code sections con-
tained in it. It does not rely on non-essential characteristics
that may diﬀer across loaders, and hence is compatible with
diﬀerent dynamic loaders, including eglibc, uClibc, musl-
libc and bionic-libc. The key operations performed by most
dynamic loaders on UNIX are:
• Step 1: Open a library ﬁle for read.
• Step 2: Read ELF metadata. (This metadata governs the
rest of the loading process.)
• Step 3: Memory-map the whole ELF ﬁle as a read-only
memory region.
• Step 4: Remap each segment of the ELF ﬁle with the
correct oﬀset and permission.
• Step 5: Close the library ﬁle.
Calls to system functions used by the loader to perform these
operations are rewritten by CFCI so that they are forwarded
to the state model, which checks these operations against a
policy, and if permitted by the policy, forwards them to the
original system functions. All checks are performed using
binary instrumentation. Note that the underlying CFI en-
forcement ensures that none of these checks can be bypassed.
Note also that our policies need to maintain some state,
and this state needs to be protected from attacks by compro-
mised execution threads within the vulnerable process. We
describe in Section 3.5 our design of this protected memory.
Figure 1 illustrates the state model and summarizes the
enforcement actions in each step of the model. This state
model ensures the following properties:
• Only allowed libraries can be loaded into memory address
space. These libraries may be speciﬁed using their full
path names. Alternatively, the policy could permit loads
from speciﬁed directories.
• Each segment in the module must be loaded in the correct
location as speciﬁed in the ELF metadata.
• An executable segment is never mapped with write per-
missions. Moreover, any memory page that was ever writable
will never be made executable.
• No two segments can overlap, nor can there be an overlap
between a segment and any previously mapped (and still
active) memory page.
3.2 State Model Enforcement
CFCI maintains the current state of an ongoing load, and
permits only those operations that are legal in that state.
For simplicity, the state model serializes ﬁle loading, i.e., one
library cannot be loaded until the completion of loading of
a previous library. The state model handles some common
errors that can occur during a ﬁle load, such as errors in
opening of ﬁles, obtaining enough memory and/or address
space for mapping.
3.2.1 Checking library open operation
(cid:40)(cid:47)(cid:41)(cid:3)(cid:47)(cid:76)(cid:69)(cid:85)(cid:68)(cid:85)(cid:92)(cid:3)(cid:47)(cid:82)(cid:68)(cid:71)(cid:76)(cid:81)(cid:74)(cid:3)(cid:51)(cid:85)(cid:82)(cid:70)(cid:72)(cid:71)(cid:88)(cid:85)(cid:72) (cid:54)(cid:87)(cid:68)(cid:87)(cid:72)(cid:3)(cid:48)(cid:82)(cid:71)(cid:72)(cid:79)(cid:3)(cid:73)(cid:82)(cid:85)(cid:3)(cid:47)(cid:76)(cid:69)(cid:85)(cid:68)(cid:85)(cid:92)(cid:3)(cid:47)(cid:82)(cid:68)(cid:71)(cid:76)(cid:81)(cid:74)
(cid:50)(cid:83)(cid:72)(cid:81)(cid:3)(cid:40)(cid:47)(cid:41)(cid:3)(cid:41)(cid:76)(cid:79)(cid:72)
(cid:57)(cid:72)(cid:85)(cid:76)(cid:73)(cid:92)(cid:3)(cid:40)(cid:47)(cid:41)(cid:3)(cid:43)(cid:72)(cid:68)(cid:71)(cid:72)(cid:85)(cid:3)
(cid:51)(cid:68)(cid:85)(cid:86)(cid:72)(cid:3)(cid:40)(cid:47)(cid:41)(cid:3)(cid:80)(cid:72)(cid:87)(cid:68)(cid:71)(cid:68)(cid:87)(cid:68)
(cid:57)(cid:68)(cid:79)(cid:76)(cid:71)(cid:3)(cid:40)(cid:47)(cid:41)(cid:34)
(cid:80)(cid:80)(cid:68)(cid:83)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:90)(cid:75)(cid:82)(cid:79)(cid:72)(cid:3)(cid:40)(cid:47)(cid:41)(cid:3)(cid:73)(cid:76)(cid:79)(cid:72)
(cid:53)(cid:72)(cid:80)(cid:68)(cid:83)(cid:3)(cid:72)(cid:68)(cid:70)(cid:75)(cid:3)(cid:3)(cid:40)(cid:47)(cid:41)(cid:3)
(cid:53)(cid:72)(cid:80)(cid:68)(cid:83)(cid:3)(cid:72)
(cid:54)(cid:72)(cid:74)(cid:80)(cid:72)
(cid:54)(cid:72)(cid:74)(cid:80)(cid:72)(cid:81)(cid:87)
(cid:40)(cid:81)(cid:71)(cid:34)
(cid:38)(cid:79)(cid:82)(cid:86)(cid:72)(cid:3)(cid:40)(cid:47)(cid:41)(cid:3)(cid:41)(cid:76)(cid:79)(cid:72)
(cid:70)(cid:82)(cid:83)(cid:92)(cid:3)(cid:81)(cid:68)(cid:80)(cid:72)(cid:3)(cid:87)(cid:82)(cid:3)(cid:86)(cid:68)(cid:73)(cid:72)(cid:3)(cid:80)(cid:72)(cid:80)
(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:3)(cid:80)(cid:82)(cid:71)(cid:72)(cid:79)(cid:3)(cid:86)(cid:87)(cid:68)(cid:87)(cid:72)
(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:3)(cid:79)(cid:76)(cid:69)(cid:85)(cid:68)(cid:85)(cid:92)(cid:3)(cid:3)(cid:83)(cid:82)(cid:79)(cid:76)(cid:70)(cid:92)
(cid:89)(cid:72)(cid:85)(cid:76)(cid:73)(cid:92)(cid:3)(cid:72)(cid:79)(cid:73)(cid:3)(cid:75)(cid:72)(cid:68)(cid:71)(cid:72)(cid:85)
(cid:73)(cid:76)(cid:74)(cid:88)(cid:85)(cid:72)(cid:3)(cid:82)(cid:88)(cid:87)(cid:3)(cid:68)(cid:79)(cid:79)(cid:3)(cid:86)(cid:72)(cid:74)(cid:80)(cid:72)(cid:81)(cid:87)(cid:3)
(cid:76)(cid:81)(cid:73)(cid:82)(cid:29)(cid:3)(cid:82)(cid:73)(cid:73)(cid:86)(cid:72)(cid:87)(cid:86)(cid:15)(cid:3)(cid:83)(cid:72)(cid:85)(cid:80)(cid:76)(cid:86)(cid:86)(cid:76)(cid:82)(cid:81)
(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:3)(cid:73)(cid:76)(cid:79)(cid:72)(cid:3)(cid:71)(cid:72)(cid:86)(cid:70)(cid:85)(cid:76)(cid:83)(cid:87)(cid:82)(cid:85)
(cid:80)(cid:68)(cid:83)(cid:3)(cid:90)(cid:75)(cid:82)(cid:79)(cid:72)(cid:3)(cid:73)(cid:76)(cid:79)(cid:72)(cid:3)(cid:85)(cid:72)(cid:68)(cid:71)(cid:82)(cid:81)(cid:79)(cid:92)
(cid:73)(cid:76)(cid:74)(cid:88)(cid:85)(cid:72)(cid:3)(cid:82)(cid:88)(cid:87)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)(cid:69)(cid:68)(cid:86)(cid:72)(cid:3)(cid:68)(cid:71)(cid:71)(cid:85)
(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:3)(cid:73)(cid:76)(cid:79)(cid:72)(cid:3)(cid:71)(cid:72)(cid:86)(cid:70)(cid:85)(cid:76)(cid:83)(cid:87)(cid:82)(cid:85)
(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:3)(cid:68)(cid:74)(cid:68)(cid:76)(cid:81)(cid:86)(cid:87)(cid:3)(cid:86)(cid:72)(cid:74)(cid:3)(cid:76)(cid:81)(cid:73)(cid:82)
(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:3)(cid:76)(cid:73)(cid:3)(cid:82)(cid:89)(cid:72)(cid:85)(cid:79)(cid:68)(cid:83)
(cid:88)(cid:83)(cid:71)(cid:68)(cid:87)(cid:72)(cid:3)(cid:69)(cid:82)(cid:82)(cid:78)(cid:78)(cid:72)(cid:72)(cid:83)(cid:76)(cid:81)(cid:74)
(cid:70)(cid:75)(cid:72)(cid:70)(cid:78)(cid:3)(cid:73)(cid:76)(cid:79)(cid:72)(cid:3)(cid:71)(cid:72)(cid:86)(cid:70)(cid:85)(cid:76)(cid:83)(cid:87)(cid:82)(cid:85)
(cid:88)(cid:83)(cid:71)(cid:68)(cid:87)(cid:72)(cid:3)(cid:80)(cid:82)(cid:71)(cid:72)(cid:79)(cid:3)(cid:86)(cid:87)(cid:68)(cid:87)(cid:72)
Figure 1: State Model for Module Loading
CFCI intercepts calls made by the loader to open ﬁles for
the purpose of loading libraries. It ﬁrst copies the ﬁle name
into protected memory, and this copy is passed onto the sys-
tem call to preclude TOCTTOU attacks. The actual check
on ﬁle name validity is deferred until the ﬁle open operation
returns with success. At this point, the ﬁle descriptor value
is also copied into protected memory for use in subsequent
stages of the state model.
Ideally, the policy will ensure that all loaded libraries are
from a predeﬁned set. However, in practice, the exact set of
libraries needed may not be known until runtime, especially
for many graphical programs. To simplify policies for such
applications, CFCI can permit loading of ﬁles from speciﬁed
directories such as /lib and /usr/lib/*.
We conﬁgured PSI to load only libraries transformed for
CFI. If a process attempts to load an untransformed library,
PSI transforms it before loading.
3.2.2 Checking operations to map ﬁles into memory
Note that mmap operations that load libraries into mem-
ory are based on ﬁle descriptors rather than ﬁle names. A
table in protected memory is used to maintain associations
between ﬁle names and ﬁle descriptors, and is populated by
the state model in Step 1. Any attack that invalidates this
association can compromise the library loading policy, and
hence CFCI guards against such invalidation. Ultimately,
4
,
any such invalidation must happen through a call to close
so our state model intercepts this operation, and deletes the
corresponding ﬁle-descriptor from its table. This prevents
any subsequent use of that descriptor in mmap operations.
3.2.3 Checking segment boundaries
The read operation of the loader in Step 2 is intercepted
and modiﬁed so that its results will be stored into protected
memory. CFCI then parses this ELF metadata to obtain in-
formation about segments and where they should be loaded.
A copy of this data is then returned to the loader.
In Step 4, the information saved about segment oﬀsets
4Functions such as dup also end up calling close.
94
(cid:42)(cid:79)(cid:82)(cid:69)(cid:68)(cid:79)(cid:3)(cid:55)(cid:85)(cid:68)(cid:81)(cid:86)(cid:79)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:55)(cid:68)(cid:69)(cid:79)(cid:72)
(cid:72)(cid:91)(cid:72)(cid:70)(cid:88)(cid:16)
(cid:87)(cid:68)(cid:69)(cid:79)(cid:72)
(cid:171)(cid:171)(cid:171)(cid:17)(cid:17)(cid:17)
(cid:55)
(cid:82)(cid:85)(cid:76)(cid:74)(cid:76)(cid:81)(cid:68)(cid:79)(cid:3)(cid:70)(cid:82)(cid:71)(cid:72)
(cid:82)(cid:85)(cid:76)(cid:74)(cid:76)(cid:81)(cid:68)(cid:79)(cid:3)(cid:70)(cid:82)(cid:71)
(cid:85)(cid:72)(cid:79)(cid:85)(cid:82)
(cid:82)(cid:85)(cid:76)(cid:74)(cid:76)(cid:81)(cid:68)(cid:79)(cid:3)(cid:71)(cid:68)(cid:87)(cid:68)
(cid:81)(cid:72)(cid:90)(cid:3)(cid:70)(cid:82)(cid:71)(cid:72)(cid:3)(cid:9)(cid:3)(cid:71)(cid:68)(cid:87)(cid:68)
(cid:72)(cid:80)(cid:83)(cid:87)(cid:92)(cid:3)(cid:86)(cid:83)(cid:68)(cid:70)(cid:72)
(cid:79)(cid:76)(cid:69)(cid:70)(cid:17)(cid:86)(cid:82)
(cid:171)(cid:171)(cid:3)(cid:171)(cid:17)(cid:17)(cid:17)
(cid:72)(cid:80)(cid:83)(cid:87)(cid:92)(cid:3)(cid:86)(cid:83)(cid:68)(cid:70)(cid:72)
(cid:42)(cid:55)(cid:55)(cid:3)(cid:71)(cid:68)(cid:87)(cid:68)
(cid:50)(cid:38)
(cid:53)(cid:50)
(cid:50)(cid:39)
(cid:50)(cid:39)
(cid:38)(cid:39)
(cid:40)(cid:54)
(cid:40)(cid:54)
(cid:42)
Figure 2: Layout of Memory Map Table
will be used to validate requests to map segments of the
library into memory. In particular, CFCI ensures that each
code segment is mapped at the oﬀset speciﬁed in the ELF
header, it is never mapped with write permissions, and that
the segment does not overlap any other segment. As a result,
even if attackers corrupt the loader’s data structures holding
ELF metadata, they will not be able to circumvent CFCI.
3.3 Code Integrity Enforcement
Our state model ensures that code is safely loaded from
disk to memory. To ensure its continued integrity, CFCI
maintains a table of relevant memory segments as shown
in Figure 2, and enforces policies on operations that modify
their permissions. This table consists of several segments, in-
cluding the original code (non-executable), the original data,
(new) instrumented code (executable) and data. Note that
“relro” is a special data region that contains important code
and data pointers. It is ﬁrst made writable by the loader,
then “patched” and then made read-only. The following poli-
cies are enforced on these segments: