meta-data and information to be Web Accessibility Ini-
tiative (WAI) compliant, i.e., visually impaired users
can extract relevant information by having their tools
parse and read the meta-data embedded in the SVG.
The SVG family consists of several members and we use
the following three ﬁle types as examples in later sections:
• SVG Full 1.1: SVG Full describes the full SVG fea-
ture set including 81 diﬀerent SVG elements and tags.
The speciﬁcation is designed without a special focus
on the devices parsing the SVG data.
• SVG Basic 1.1: SVG Basic is supposed to deliver a
subset of the SVG Full speciﬁcation to ease the im-
plementation for developers of browsers for PDAs and
handheld devices. SVG Basic only provides 70 of the
81 SVG elements speciﬁed in SVG Full 1.1. Contrary
to SVG Tiny 1.2, the SVG Basic 1.1 features also in-
clude support for SVG fonts.
• SVG Tiny 1.2: SVG Tiny is speciﬁcally designed for
smartphones and similar mobile devices with limited
computing, rendering, and display capabilities. The
subset of allowed SVG elements and tags has been re-
duced to 47 elements. SVG Tiny also ships several
exclusive possibilities for event binding and external
resource loading which we discuss in Section 3.
Additionally, the SVG speciﬁcation provides interface de-
scriptions for an SVG Document Object Model (DOM), which
implies that SVG ﬁles also oﬀer some dynamic capabilities.
Users can create SVG ﬁles capable of providing event han-
dling, eﬀects, time-based changes and animations, as well
as zoom eﬀects and other helpful display enhancements. A
large set of ﬁlters can be applied to the elements of SVG
ﬁles to even more greatly increase the possibilities for image
transformation and animation.
The ability to combine SVG with the XML Linking Lan-
guage (XLink) features allows SVG ﬁles to link elements
to other elements in the same image ﬁle, other image ﬁles
or arbitrary objects referenced via Uniform Request Iden-
tiﬁers (URIs). Furthermore, these image ﬁles support the
implementation of International Color Consortium (ICC)
and Standard Red-Green-Blue (sRGB) color proﬁles, allow-
ing the embedment of arbitrary content such as Flash, PDFs,
Java and HTML via the  element.
2.2 HTML, SVG, and XML
Being historically an XML-based language, processing of
SVG documents has been quite diﬀerent from the way brow-
sers process classic HTML websites. For instance, a slight
violation of the XML syntax, such as missing closing tags
or attribute value quotations, typically cause SVG proces-
sors to exit with an error. However, with the integration of
SVG capabilities into modern browsers, this strict parsing
approach got amalgamated with their more tolerant way of
processing HTML, CSS, JavaScript and the like.
This mixture is causing browsers to process SVG through
using two diﬀerent processing modes: an HTML proces-
sor engine for CSS and JavaScript contents, and an ad-
ditional SVG parser supporting XML-speciﬁc features like
XML transformations (e.g. XSLT), XML Entity resolu-
tion, and tracking of XML Namespace bindings. Depending
241on the particular website’s style of using SVG, the browser
switches between the two processing modes on the go. For
instance, encountering an inline  tag within an HTML5
document causes the browser to switch from HTML mode to
XML/SVG mode. Vice versa, if the browser encounters an
HTML-speciﬁc tag (e.g. ) within an SVG mode context,
it automatically closes all open SVG elements, switches to
HTML mode, and renders the given tag.
As we show in the following sections, this approach is
error-prone and may cause a lot of SVG-related vulnerabil-
ities in most state-of-the-art browser engines.
2.3 Deployment Techniques
The capabilities, in terms of scripting and content inclu-
sion of SVG ﬁles, strongly depend on how they are embedded
in a website or loaded by the browser attempting to display
them. In this section, we focus on ﬁve diverse manners of
SVG ﬁles being deployed by a webserver or web application.
In addition, we outline the attack surface we have discov-
ered in connection to the ﬁve deployment techniques. The
speciﬁc attack vectors we use are discussed in detail in Sec-
tion 3, followed by Section 4 focusing on how to mitigate
and defend against those attacks.
1. SVG deployed via uploaded ﬁles: A large num-
ber of tested web applications (e.g., MediaWiki and
Wikipedia, OpenStreetMaps, DeviantArt, OpenClip-
Art, and several other free image hosting services) con-
sider SVG ﬁles to be equivalent to raster images such
as PNG, JPEG, and GIF ﬁles in terms of security im-
plications. MediaWiki and Wikipedia claim to block
the upload of SVG ﬁles containing script code, but
we did manage to easily bypass this restriction. As we
show in the next section, SVG ﬁles should be displayed
and executed with a heavily limited set of features to
prevent universal XSS attacks, since these ﬁles might
contain scripts, embed arbitrary content and process
events. In addition, we discovered alternative course
of action for outmaneuvering the capability limitations
of current browsers, which are used to protect sensitive
DOM properties such as a website’s cookies. Those are
discussed in detail in Section 3.2
2. SVG deployed via CSS backgrounds and img
tags: This way of deploying malicious SVG ﬁles can
be considered as the most dangerous and eﬀective at-
tack, granted that the majority of the web applications
judge  tags as part of user generated HTML to
be harmless: 
Filter software, such as the HTMLPuriﬁer [43], OWASP
AntiSamy [16], and similar tools whitelist image tags
and a large number of web applications allowing user
generated HTML are prone to be sensitive to a novel
class of attacks we term active image injections. Again,
we underline that SVG ﬁles should be displayed and
executed with a heavily limited set of features to pre-
vent universal XSS attacks.
In Section 3.2 and 3.5,
we particularize on the attack vectors we discovered
through using this presumably harmless way of deploy-
ment, and outline an innovative method of attacking
browsers and high traﬃc web applications.
3. SVG deployed via inline SVG: The HTML5 spec-
iﬁcation draft suggests the web browsers to support
websites providing inline SVG. This means a developer
and an attacker are equally able to inject arbitrary
SVG content right into the markup tree of a HTML
document. The browser will then switch its parsing
mode, use an intermediary layer to parse the (possi-
bly non-well-formed) SVG content, clean it up, pass it
on to the internal XML parser and layout engine, and
then commence parsing and rendering the remaining
optional HTML content. The last step likely includes
even more inline SVG elements [17] that are capable
of interacting with the already parsed content. In Sec-
tion 3.4, we illustrate how this facilitates XSS ﬁlter
bypasses of existing websites, ﬁlter libraries, and most
importantly browsers and comparable user agents.
4. SVG deployed as font ﬁle (SVG Fonts): The
SVG standard speciﬁes several possibilities to create
font ﬁles completely consisting of SVG data [3]. Mod-
ern browsers allow their inclusion via CSS and the
@font directive.
In case when the browser supports
SVG fonts, for every character with an SVG font as-
signed, the parser checks whether the character has a
representation as an SVG path/glyph data and applies
this to the view port if possible. SVG fonts provide a
prominent range of features for detailed and complex
font formatting, Unicode support, alternative glyphs,
default behavior for missing glyphs, and more. We
detected attack vectors allowing the deployment of ar-
bitrary plug-in content via SVG fonts working on a
variety of desktop and mobile user agents.
5. SVG deployed via iframe, embed, or object tags:
The attack surface is comparably large to the one for
the classic XSS and does not diﬀer much from the reg-
ular  and  injections.
It will thus
not be discussed in more depth in this paper.
3. ATTACK VECTORS USING SVG FILES
Based on the prerequisites discussed in the previous sec-
tion, we now introduce several diﬀerent attacks based on
SVG ﬁles and discuss their security impact.
3.1 Responsible Disclosure and Ethical Aspects
We describe several novel attacks related to SVG ﬁles and
their security impact, ranging from universal XSS attacks
to triggering vulnerabilities based on SVG images. Present-
ing such attacks is obviously an ethically sensitive area and
one question that arises is if it is acceptable and justiﬁable
to publish the attack details. In the following, we describe
most attack vectors from a high-level point of view and do
not present all implementation details. If a (legitimate) re-
searcher is interested in test cases, we are happy to share
them. Furthermore, we have contacted all major browser
vendors and informed them about these problems. We are
in contact with them and several reported problems have
already been ﬁxed. As a result, an attacker cannot easily
take advantage of these identiﬁed attack vectors.
In addition, we introduce in Section 4 an approach to mit-
igate the attacks presented in this paper based on removing
suspicious content from SVG ﬁles at the server side. We are
in contact with the aﬀected website’s security teams, and
discuss with them the possibility to deploy our countermea-
sure for these attacks. The WikiMedia team is interested in
242testing and deploying the tool we created and discuss in Sec-
tion 4. Our mitigation approach can also be implemented
as a local ﬁlter proxy to protect a web browser against mali-
cious SVG images and we evaluate at the moment the eﬀort
required to implement this local mitigation approach.
3.2 Local JavaScript Execution and
SVG Chameleons
One of the least sophisticated attack techniques (that is
still rather likely to work in real-world scenarios) is tricking
the victim into saving an SVG image from a website and
opening it later on for repeated viewing pleasure. There
are only a few ways for technically less aﬃne users to tell
a classic raster-based image (PNG/JPEG/GIF) apart from
an SVG image. Once saved locally and double-clicked, the
browser will open the ﬁle – since most users do not have a
dedicated software installed that changes the application to
handle the SVG MIME type. The SVG ﬁle is consequently
opened from a ﬁle URI and in case it contains JavaScript,
this code will be executed in the same context. Depend-
ing on the web browser the victim is using, the JavaScript
can then attempt to read other ﬁles from the hard-disk or
neighboring directories, and cause a data leakage incident.
A thrifty adversary can cause the locally running JavaScript
to load an applet from an arbitrary domain, thus even by-
passing many of the security restrictions modern browsers
apply for local script execution.
Similar attacks could be performed with SVG Chameleons,
i.e., ﬁles containing both SVG and HTML content. Using
in-line XML transformation (XSLT), we managed to craft
an SVG ﬁle that acts like an image if embedded via ,
CSS or similar ways, but unfolds to a full stack HTML ﬁle
containing no SVG elements anymore as soon as opened di-
rectly [14]. This attack works with Gecko-based browsers,
since it appears to be the only layout engine supporting
in-line XSLT in SVG ﬁles. The attack would involve up-
loading an SVG Chameleon to a website such as Wikipedia,
and trick the victim into right-clicking the image shown em-
bedded and choosing to view the original. As soon as that
happens, the XSLT will transform the SVG into an HTML
ﬁle and execute embedded script code or worse [23].
Interestingly, some browsers such as Firefox do not allow
cookie access in case the SVG ﬁle is being opened directly.
This is especially important in cases where an attacker can
upload SVG ﬁles to the same domain a targeted user is be-
ing logged into. The reason for that limitation is a diﬀerent
handling of the SVGDOM compared to the regular web-
site’s DOM. The SVGDOM does not know properties such
as document.cookie or even document.body. We discovered
ways to get around this limitation, though, by having the
SVG create a  tag containing an Iframe
loading the aﬀected website. After the onload event of the
Iframe, we injected JavaScript into its scope capable of ex-
tracting sensitive data such as the cookies and bypassing the
more or less unconscious security restrictions.
3.3 Facilitating Cross Site Scripting Exploits
SVG images provide many possibilities for executing Java-
Script in uncommon ways. Many of these are not known
to typical web developers and thus are not covered by ﬁl-
ter software protecting websites against XSS attacks. SVG
Tiny, for example, allows to execute JavaScript by using a
handler element with an event attribute, as shown in List-
ing 1. In case the event assigned to the handler element is
speciﬁed as load, the text content of the handler element
will be executed as JavaScript without any user interaction.
Blacklist-based XSS ﬁlter systems are usually not aware of
such ways of executing code, thus they are not capable of
detecting this kind of attacks.
alert (1)
Listing 1: Example for uncommon SVG-based
JavaScript execution via  tag
Another uncommon way of embedding malicious Java-
Script in SVG ﬁles is shown in Listing 2. Using SVG’s
 tag, we dynamically equip an  tag with
an xlink:href pointing to a data: URI. This kind of im-
age element is meant to be used to apply overlay eﬀects
for SVG elements utilizing external resources. Shielded by
the Base64 encoding, this URI contains another SVG im-
age that itself contains malicious JavaScript – which is run
immediately on loading the  tag.
< set
a t t r i b u t e N a m e = " xlink : href "
to = " data : image / svg + xml ; charset = utf -8;
base64 , P H N 2 Z y B 4 b W x u c z 0 i a H R 0 c D o v L 3 d 3 d y 5 3
M y 5 v c m c v M j A w M C 9 z d m c i P j x z Y 3 J p c H Q %2 BYWxl