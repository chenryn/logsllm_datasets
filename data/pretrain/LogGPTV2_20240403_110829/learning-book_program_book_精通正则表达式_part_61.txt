+m.start()
+·to·+m.end（）+")\n"+
"Protocol["+m.group(1）+"]”+
"（from"
+m.start（1）+*to*+m.end（1）+*)\n"+
"Hostname["+m.group（2）+*]*+
（from#
+m.start（2）+"to"+m.end(2）+")\n"
//
grouD（3）可能未参与匹配，此处应小心对待
if (m.group(3) == nul1)
System.out.println("No port; default of '80′is assumed");
else{
System.out.print("Port is[+m.group(3）+*]*+
"（from"+m.start（3）+*to*+m.end（3）+*)\n*）;
执行的结果是：
Overal1(http://regex.info]（from 0 to 17)
Protocol[http]（from0to4)
Hostname [regex.info] (from 7 to 17)
No port;default of'80'is assumed
简单查找-替换
SimpleSearchandReplace
上面介绍的方法足够进行查找-替换操作了，只是比较麻烦，但是Matcher提供了简便的方
法。
String replaceAll(String replacement)
返回目标字符串的副本，其中Matcher能够匹配的文本都会被替换为replacemenr、具
体处理过程在380页。
此方法不受检索范围的影响（它会在内部调用reset方法），不过第382页介绍了在检
索范围中进行这样操作的方法。
String类也提供了replaceAll的方法，所以：
string.replaceAll(regex,replacement)
就等于：
Pattern.compile(regex).matcher(string).replaceAll(replacement)
---
## Page 405
Matcher对象
379
S:ir( replaceFirst(St:ing replacement)
此方法类似replaceAll，但它只对第一次匹配（如果存在）进行替换。
String类也提供了replaceFirst方法。
Sta:iSing quoteReplacement(Stringtext)
此static方法从Java1.5开始提供，返回text的文字用作replacement的参数。它为text
副本中的特殊字符添加转义，避免了下一页讲解的正则表达式特殊字符处理（下一-节
也给出了Matcher.quoteReplacement的例子)。
简单查找-替换的例子
下面的程序将所有的“Java1.5”改为“Java5.0”，用市场化的名称取代开发名称：
Striig text = *Before Java 1.5 was Java 1.4.2. After Java 1. Is livr i.6";
Strig 7egex = *\bJava\\s *1\1.5\b*;
Matcl.1 n : Fattert:, compile(regex) .matcher (Lext ) ;
String result = m.replaceAll(*Java 5.0*);
Systom. out .println(result) ;
结果是：
Before Java 5.0 was Java 1.4.2. After Java 5.0 is Java 1.6
如果patterm和matcher不需要复用，可以使用链式编程：
Pattern.compile("\\bJava\\s*1\\.5\\b*).matcher(text).replaceAl1(*Java 5.0*)
（如果单个线程中需要多次用到同一pattern，预编译pattermn对象可以提升效率?372）
对正则表达式稍加修改，就可以用它来把“Java1.6”改为“Java6.0”（当然也需要修改
replacement字符串，讲解见下页）。
Patterm. compile("\\bJava\\s*1\\. ([56])\\b*).matcher(text).replaceAl1(*Java $1.0")
对于同样的输人文本，结果如下：
Before Java 5.0 was Java 1.4.2. After Java 5.0 is Java 6.0
如果只需要替换第一次出现的文本，可以使用replaceFirst，而不是replaceAll。除了
这种情况，还有一种情况可以使用replaceFirst，即明确知道目标字符串中只存在-个匹
配时，使用replaceFirst可以提高效率（如果了解正则表达式或是目标字符串，可以预
知这一点）。
---
## Page 406
380
第8章：Java
replacement参数
replaceAl1和replaceFirst方法（以及下一节的appendReplacement方法）接收的
replacement参数在插入到匹配结果之前，会进行特殊处理：
“$1”、$2’之类会替换为对应编号的捕获型括号匹配的文本（$0会被替换为所有匹
配的文本)。
如果‘s’之后出现的不是ASClI的数字，会抛出IllegalArgumentException异常。
‘S’之后的数字，只会应用“有意义”的部分。如果只有3组捕获型括号，则‘$25
会被视为s2然后是‘5'，而此时s6会抛出IndexOutOfBoundsException。
反斜线用来转义后面的字符，所以“S”表示美元符号。同样的道理，\\’表示反斜
线（在Java的字符串中，表示正则表达式中的\’需要用四个斜线\\\\）。同样，
如果有12组捕获型括号，而我们希望使用第一组捕获型括号匹配的文本，然后是“2，
应该是这样$1\2。
如果不清楚replacement字符串的内容，最好使用Matcher.quoteReplacement方法，确保
不会出错。如果用户的正则表达式是uRegex，replacement是uRepl，下面的做法可以确保
替换的安全：
高级查找-替换
AdiancedSearchandReplace
有两个方法可以直接操作Matcher的查找-替换过程。它们配合起来，把结果存入用户指定
的StringBuffer中。第一种方法每次匹配之后都会调用，在result中存入replacement字
符事和匹配之间的文本。第二种方法会在所有匹配完成之后调用，将目标字符事中最后的
文本拷贝过来。
Aat*rappendReplacement(Stlgtuffe:result,St:ing replacement)
在正则表达式应用成功之后（通常是find）马上调用此方法会把两个字符事添加到指
定的result中：第一个是原始目标字符串匹配之前的文本，然后是经过上面讲解的特
殊处理的replacement字符串。
---
## Page 407
Matcher对象
381
举例来说，如果matcherm与正则表达式“\w+i和‘-->one+testene+test”，跳过匹配的文本，再插入replacement字符串‘xxx。
While循环的第二轮，find匹配‘-->one+七estxxx+xxx'，m在原始目标字符串中对应的位置是‘-->one+tést，
XXX+XXX"：
StringBuilder text = new StringBuilder("It's SO very RUDE to shout!");
Matcher m=Pattern.compile("\\b[\\p{Lu}\\p(Lt)}+\\b*).matcher(text）;
intmatchPointer=0;//首先从字符串起始位置开始
while(m.find(matchPointer))(
matchPointer=m.end（)；/记录本次匹配结束的位置
text.replace(m.start()..end()，**+m.group().toLowerCase() +");
matchPointer+=7；//算上添加的''和'
System.out.println(text);
结果是：
It'ssoveryrudeto shout！
注5：代码中的表达式是\b[\p{Lu）\p(Lt）]+\bl。在第3章（123）介绍过，\p(Lu）匹配
Unicode中的所有大写宇母，\p（Lt）匹配首宇母形式字符。对应ASCII编码的正则表达式
是\b[A-Z]+\b]。
---
## Page 410
384
第8章：Java
Matcher的检索范围
The Matcher ' s Region
从Javal.5开始，Matcher支持可变化的检索范围，通过它，我们可以把匹配尝试限制在目
标字符串之中的某个范围。通常情况下，Matcher的检索范围包含整个目标字符串，但可以
通过region方法实时修改。
下面的例子检索HTML代码字符串，报告不包含ALT属性的imagetag。对同一段文本
尽管两个Matcher应用到同-一个字符串，但它们的关联只局限于，用找到的imagetag来限
定寻找ALT属性的范围。在调用ALT-matcher的find方法之前，我们用刚刚完成的image-tag
的匹配来设定ALT-matcher的检索范围。
单拿出imagetag的body之后，就可以通过查找ALT来判断当前的tag内是否包含ALT属
性：
//查找imagetag的matcher。变量·html·包含需要处理的HTMl代码
Matcher mImg = Pattern.compile(*(?id)").matcher (html);
//查找ALT属性的matcher（应用于刚刚找到的IMGtag中）
Matcher mAlt =Pattern.compile(*(?ix)\\b ALT \\s*=*).matcher(html);
//对html中的每个imagetag
while(mImg.find())(
//把查找范围局限在剧刚找到的tag中
mAlt.region(mImg.start (1), mImg.end(1) );
1/如果没有找到，则报错，输出找到的整个imagetag
if (! mAlt.find())
System.out.println(*Missing ALT attribute in: *+ mImg.group());
）
或许在-一处指定目标字符串（创建mAltMatcher时），另一处指定检索范围（调用
mAlt.region时）的做法有些怪异。果真如此的话，我们可以为mAlt创建虚构的目标字符
串（一个空字符串），然后每次都调用mAlt.reset（html）.region（….）。调用reset可能
会降低些效率，但是同时设定目标字符串和检索范围的逻辑更加清晰。
无论采取哪种办法，都必须明白，如果不设定ALTMatcher的检索范围，对它调用find就
会检索整个目标字符串，返回无关的‘ALT=’属性。
下面继续完善这个程序，返回找到的imagetag在HTML代码中的行数。我们首先隔离出
imagetag之前的HTML代码，然后计算其中的换行符数。
---
## Page 411