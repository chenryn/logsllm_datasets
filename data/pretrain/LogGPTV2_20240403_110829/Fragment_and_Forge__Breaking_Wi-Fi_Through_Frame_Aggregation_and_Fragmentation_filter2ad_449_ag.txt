fragile. RFC 8900, 2020.
[15] Sergey Bratus, Travis Goodspeed, Ange Albertini, and
Debanjum S Solanky. Fillory of PHY: Toward a peri-
odic table of signal corruption exploits and polyglots in
digital radio. In USENIX WOOT, 2016.
[16] Sebastian Brenza, Andre Pawlowski, and Christina Pöp-
per. A practical investigation of identity theft vulnera-
bilities in eduroam. In WiSec, 2015.
[17] Giovanni Camurati, Sebastian Poeplau, Marius Muench,
Tom Hayes, and Aurélien Francillon. Screaming chan-
nels: When electromagnetic side channels meet radio
transceivers. In CSS, 2018.
[18] Cas Cremers, Benjamin Kiesl, and Niklas Medinger. A
formal analysis of IEEE 802.11’s WPA2: Countering
the kracks caused by cracking the counters. In USENIX
Security, 2020.
[19] Ralph Droms. Dynamic Host Conﬁguration Protocol.
RFC 2131, 1997.
[20] T. Duong and J. Rizzo. Here come the xor ninjas. In
Ekoparty Security Conference, 2011.
[25] Dan Harkins, Jouni Malinen, and Mike Montemurro.
Finding PWE in constant time. Retrieved 14 June 2020
from https://mentor.ieee.org/802.11/dcn/19/
11-19-1173-18-000m-pwe-in-constant-time.
docx, 2019.
[26] Changhua He, Mukund Sundararajan, Anupam Datta,
Ante Derek, and John C Mitchell. A modular correctness
proof of IEEE 802.11i and TLS. In CCS, 2005.
[27] Alex Hern. Major sites including new york times and
BBC hit by ransomware malvertising. The Guardian,
2016.
[28] Amir Herzberg and Haya Shulman. Fragmentation con-
sidered poisonous, or: one-domain-to-rule-them-all.org.
In IEEE CNS, 2013.
[29] René Hummen, Jens Hiller, Hanno Wirtz, Martin Henze,
Hossein Shafagh, and Klaus Wehrle. 6LoWPAN frag-
mentation attacks and mitigation mechanisms. In WiSec,
2013.
[30] IEEE P802.11ax/D4.3. Amendment 1: Enhancements
for High Efﬁciency WLAN (draft), 2019.
[31] IEEE Std 802.11. Wireless LAN Medium Access Control
(MAC) and Physical Layer (PHY) Spec, 2016.
[32] IEEE Std 802.11ac. Amendment 4: Enhancements for
Very High Throughput for Operation in Bands below 6
GHz, 2013.
[33] IEEE Std 802.11n. Amendment 5: Enhancements for
Higher Throughput, 2009.
[34] Jaehoon Paul Jeong, Soohong Daniel Park, Luc Beloeil,
IPv6 Router Advertisement
and Syam Madanapalli.
Options for DNS Conﬁguration. RFC 8106, 2017.
[35] Lars-Erik Jonsson, Lars Åke Larzon, Gorry Fairhurst,
Stephen Pink, and Mikael Degermark. The Lightweight
User Datagram Protocol (UDP-Lite). RFC 3828, 2004.
[21] Julien Freudiger. How talkative is your mobile device?
an experimental study of Wi-Fi probe requests. In WiSec,
2015.
[36] Malachi Kenney. Ping of death. Retrieved 14 June
2020 from https://insecure.org/sploits/ping-
o-death.html, 1996.
176    30th USENIX Security Symposium
USENIX Association
[37] Amit Klein and Benny Pinkas. From IP ID to device ID
and KASLR bypass. In USENIX Security, 2019.
[38] Changyu Li, Quanpu Cai, Juanru Li, Hui Liu, Yuanyuan
Zhang, Dawu Gu, and Yu Yu. Passwords in the air: Har-
vesting Wi-Fi credentials from SmartCfg provisioning.
In WiSec, 2018.
[50] Domien Schepers, Aanjhan Ranganathan, and Mathy
Vanhoef. Practical side-channel attacks against WPA-
TKIP. In ASIA CCS, 2019.
[51] Rajiv Ranjan Singh, José Moreira, Tom Chothia, and
Mark Ryan. Modelling of 802.11 4-way handshake at-
tacks and analysis of security properties. In STM, 2020.
[39] Jie Liang. Simplifying implementation of CCMP mode.
Retrieved 29 May 2020 from mentor.ieee.org/802.
11/dcn/03/11-03-0122-00-000i-simplifying-
implementation-of-ccmp-mode.ppt, 2003.
[40] Karim Lounis and Mohammad Zulkernine. Bad-token:
denial of service attacks on WPA3. In SIN, 2019.
[41] Jouni Malinen and Mark Rison. GCMP decapsulation.
Retrieved 18 May 2020 from https://mentor.ieee.
org/802.11/dcn/15/11-15-1132-02-000m-gcmp-
decapsulation.docx, 2015.
[42] Bodo Möller, Thai Duong, and Krzysztof Kotowicz.
This POODLE bites: exploiting the SSL 3.0 fallback,
2014.
[43] Nick Nikiforakis, Luca Invernizzi, Alexandros Kaprav-
elos, Steven Van Acker, Wouter Joosen, Christopher
Kruegel, Frank Piessens, and Giovanni Vigna. You
are what you include: Large-scale evaluation of remote
JavaScript inclusions. In CCS. ACM, 2012.
[44] J. Postel and J. Reynolds. Standard for the transmission
of IP datagrams over IEEE 802 networks. RFC 1042,
1988.
[45] Pieter Robyns, Peter Quax, and Wim Lamotte. Injection
attacks on 802.11n MAC frame aggregation. In WiSec,
2015.
[46] Eyal Ronen, Robert Gillham, Daniel Genkin, Adi
Shamir, David Wong, and Yuval Yarom. The 9 lives
of bleichenbacher’s CAT: New cache attacks on TLS
implementations. In IEEE S&P, 2019.
[47] Eyal Ronen, Kenneth G. Paterson, and Adi Shamir.
Pseudo constant time implementations of TLS are only
pseudo secure. In CCS, 2018.
[48] Jon Rosdahl, Mark Hamilton, and Michael Montemurro.
Minutes REVmd – may 2018 – warsaw. Retrieved 14
September 2020 from https://mentor.ieee.org/
802.11/dcn/18/11-18-0616-00-000m-minutes-
revmd-may-2018-warsaw.docx, 2018.
[49] Flavia Salutari, Danilo Cicalese, and Dario J Rossi. A
closer look at IP-ID behavior in the wild. In Interna-
tional Conference on Passive and Active Network Mea-
surement. Springer, 2018.
[52] Christopher McMahon Stone, Tom Chothia, and Joeri
de Ruiter. Extending automated protocol state learning
for the 802.11 4-way handshake. In ESORICS, 2018.
[53] Dr. Joseph D. Touch. Updated Speciﬁcation of the IPv4
ID Field. RFC 6864, 2013.
[54] Mathy Vanhoef, Prasant Adhikari, and Christina Pöpper.
Protecting Wi-Fi beacons from outsider forgeries. In
WiSec, 2020.
[55] Mathy Vanhoef, Nehru Bhandaru, Thomas Derham, Ido
Ouzieli, and Frank Piessens. Operating channel val-
idation: Preventing multi-channel man-in-the-middle
In WiSec,
attacks against protected Wi-Fi networks.
2018.
[56] Mathy Vanhoef and Frank Piessens. Advanced Wi-Fi
attacks using commodity hardware. In ACSAC, 2014.
[57] Mathy Vanhoef and Frank Piessens. Key reinstallation
attacks: Forcing nonce reuse in WPA2. In CCS, 2017.
[58] Mathy Vanhoef and Frank Piessens. Release the kraken:
new KRACKs in the 802.11 standard. In CCS, 2018.
[59] Mathy Vanhoef and Eyal Ronen. Dragonblood: Analyz-
ing the Dragonﬂy handshake of WPA3 and EAP-pwd.
In IEEE S&P, 2020.
[60] Wi-Fi Alliance. WPA3 speciﬁcation version 2.0. Re-
trieved 24 May 2020 from https://www.wi-fi.org/
file/wpa3-specification, 2019.
A Driver and ﬁrmware modiﬁcations
Our test tool relies on Linux’s virtual interface support and
we used it with a TL-WN722N to inject frames. To avoid the
kernel function ieee80211_tx_h_sequence from overwrit-
ing sequence numbers when using multiple virtual interfaces,
we patched it to not modify non-zero sequence numbers. To
avoid the ﬁrmware from overwriting the sequence and frag-
ment number, we patched ath_tgt_tx_seqno_normal to
not modify wh->i_seq and wh->i_seq[0].
To prevent injected frames with a different QoS priority
from being reordered, we patched ath9k_htc_tx_data to
set tx_hdr.tidno to zero independent of the frame’s priority.
More details and other required workarounds, including
patches for other wireless network cards, can be found on [1].
USENIX Association
30th USENIX Security Symposium    177
B Non-consecutive packet number attack
D Plaintext fragment injection against Linux
Client
Attacker
AP (vulnerable)
Client
Attacker
AP (vulnerable)
Visit attacker’s website
k{Frag0(s)}
{Frag1(s)}
Encn
Encn+1
k
Detect packet to
attacker’s server
Encn
k{Frag0(s)}
Decrypt & store fragment
Send sentitive data
k
Encn+d
Encn+d+1
{Frag0(s(cid:48))}
{Frag1(s(cid:48))}
k
Detect packet with
sensitive data
Encn+d+1
k
{Frag1(s)}
1(cid:13)
e
g
a
t
S
2(cid:13)
e
g
a
t
S
Reassemble frame
Packet with sensitive
data is sent to attacker
Figure 9: Attacking an AP that accepts fragments with non-
consecutive PNs. The ﬁrst fragment is the start of an IP packet
to the attacker’s server, which is appended in stage 2(cid:13) with
user data. The reassembled packet is sent to the attacker’s
server, exﬁltrating the user data. Between stages 1(cid:13) and 2(cid:13), the
attacker never uses sequence number s in forwarded frames.
C Advanced Aggregation (A-MSDU) attacks
In our aggregation attack, we used IPv4 packets with an at-
tacker-controlled IP identiﬁcation value and payload. How-
ever, it may be infeasible to send such IPv4 packets to a victim.
Instead, an adversary may wish to abuse devices that send
IPv4 packets with an IP ID value of zero. This is useful when
combined with the fragmentation bug of Section 6.3 to control
a second plaintext fragment containing injected packets, or to
attack an AP using a client in the BEAST threat model.
When setting the A-MSDU ﬂag of an encrypted frame that
transports an IPv4 packet with an ID value of zero, the last
two bytes of the destination IP address become the length
ﬁeld of the second A-MSDU subframe. Depending on the
IP addresses used by the network, this results in a short sub-
frame, allowing an adversary to control the content of the
third A-MSDU subframe. For instance, when using the subnet
192.168.1.0/24, the length of the second subframe is between
256 and 512 bytes, leaving enough space to inject frames by
controlling the content of the third subframe. When targeting
IPv4 packets sent to the internet that have an identiﬁcation
value of zero, we conjecture that trafﬁc analysis can be used
to detect which server a user is connecting to, and based on
this the adversary can predict when the last two bytes of the
IP address result in a short A-MSDU subframe.
Encn
k{Frag0(s)}
Encn
k{Frag0(s)}
Decrypt & store fragment
Encn+1
k
{Frag1(s)}
Encn+1
k
{Frag1(s’)}
Update latest received PN
Frag1(s)
Reassemble frame
1(cid:13)
e
g
a
t
S
2(cid:13)
e
g
a
t
S
Figure 10: Tricking Linux into accepting plaintext fragments.
In stage 1(cid:13) the attacker forwards a legitimate encrypted Frag0.
The second fragment is forwarded under a different sequence
number so it will not be combined with Frag0. However, Linux
does update the session variable containing the latest received
PN to n + 1. In stage 2(cid:13) the attacker injects a plaintext frag-
ment with sequence number s. The PN in the session variable
is now consecutive to the one of Frag0, and since the plain-
text fragment has the same sequence number s as Frag0, the
encrypted and plaintext fragment will be combined. The re-
sulting frame will then be processed (or forwarded) by Linux.
E Fragmentation attacks against FreeBSD
The default mixed key and fragment cache attack do not work
against FreeBSD, because it rejects fragments if an unrelated
frame (of the same sender) is received in-between these frag-
ments.
This can be overcome by realizing that broadcast frames
do not inﬂuence the defragmentation process of FreeBSD. An
adversary can use this to forward 4-way handshake frames
without affecting the defragmentation process by encapsulat-
ing them inside an A-MSDU frame with a broadcast receiver
address, where the destination MAC address in the A-MSDU
subframe equal the unicast address of the receiver.
To use this technique in an attack, the other station has
to send plaintext 4-way handshake messages. This is the de-
fault behavior of devices in the cache attack, but not during
the rekey handshake in the mixed key attack. Nevertheless,
the RT-AC51U AP does send 4-way handshake frames in
plaintext during a rekey. Therefore, when a FreeBSD client is
connected to such an AP, an adversary can capture the plain-
text 4-way handshake messages, and encapsulate them into
broadcast A-MSDU frames. This causes FreeBSD to renew
the pairwise session key without affecting the defragmenta-
tion process, allowing an adversary to perform a mixed key
attack against FreeBSD. We successfully tested this technique
against FreeBSD 12.1 when connected to our RT-AC51U. We
also performed a fragment cache attack against a FreeBSD
AP when it was using an TL-WN725N as a network card.
178    30th USENIX Security Symposium
USENIX Association