void *malloc_zone_malloc(malloc_zone_t *zone, size_t size);
// Allocate cleared (zero-filled) memory from the given zone for num_items
// objects, each of which is size bytes large
void *malloc_zone_calloc(malloc_zone_t *zone, size_t num_items, size_t size);
// Allocate page-aligned, cleared (zero-filled) memory from the given zone
void *malloc_zone_valloc(malloc_zone_t *zone, size_t size);
// Free memory referred to by the given pointer in the given zone
void malloc_zone_free(malloc_zone_t *zone, void *ptr);
// Change the size of an existing allocation in the given zone
// The "existing" pointer can be NULL
void *malloc_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size);
// Retrieve the zone, if any, corresponding to the given pointer
malloc_zone_t *malloc_zone_from_ptr(const void *ptr);
// Retrieve the actual size of the allocation corresponding to the given pointer
size_t malloc_size(const void *ptr);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 85 of 135
// Batch Allocation
// Allocate num_requested blocks of memory, each size bytes, from the given zone
// The return value is the number of blocks being returned (could be less than
// num_requested, including zero if none could be allocated)
unsigned malloc_zone_batch_malloc(malloc_zone_t *zone, size_t size,
void **results, unsigned num_requested);
// Batch Deallocation
// Free num allocations referred to in the to_be_freed array of pointers
void malloc_zone_batch_free(malloc_zone_t *zone, void **to_be_freed,
unsigned num);
Malloc Zones in Cocoa
The Cocoa API provides wrappers for several malloc_zone_* functions. For example,
NSCreateZone() and NSRecycleZone() can be used to create and destroy, respectively,
malloc zones. A malloc zone exists in Cocoa as an NSZone structure.
The NSObject class provides the allocateWithZone: method to create an instance of the
receiving class with memory allocated from the specified zone.
The actual zone allocator is implemented in an independent moduleseparate from the malloc layer that
consists of the programmer-visible malloc family of functions. The malloc layer uses well-defined
functions exported by the zone layer, and in fact, the malloc front-end can support an alternate underlying
allocator or even multiple allocators. Figure 830 shows an overview of the communication between the
malloc layer and the zone allocator. The latter is called the scalable zone allocator because it uses
allocation strategies that scale from very small to very large allocation sizes.
Figure 830. An overview of the Mac OS X malloc implementation
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 86 of 135
In the malloc layer, a malloc zone is represented by the malloc_zone_t structure, which is a substructure
of the szone_t structure. The latter is visible only to the scalable zone layer. The malloc layer provides
the malloc_create_zone function for creating zones. This function calls create_scalable_zone(),
which creates a new scalable zone by allocating and initializing an szone_t structure. As part of this
initialization, the scalable malloc layer populates the malloc_zone_t substructure, a pointer to which is
returned to the malloc layer. Before returning, malloc_create_zone() calls malloc_zone_register(),
which saves the malloc_zone_t pointer in a global array of malloc zones. Note that although the malloc
layer directly calls create_scalable_zone(), it calls the other scalable zone functions only through the
function pointers set up in the malloc_zone_t structure. As shown in Figure 830, the scalable zone layer
provides standard malloc family functions, batch allocation and deallocation functions, and functions for
introspection.
The scalable zone allocator categorizes memory allocation requests based on size into tiny, small, large,
and huge requests. As shown in Figure 831, it maintains internal bookkeeping data structures for each of
these categories. Tiny and small allocations are made from tiny and small regions, respectively. We earlier
said that a zone is analogous to a program's heap. A specific tiny or small region can be regarded as a
bounded subheap from which allocations falling within a certain size range are made.
Figure 831. Scalable zone data structures
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 87 of 135
#define NUM_TINY_SLOTS 32
#define INITIAL_NUM_TINY_REGIONS 24
#define NUM_SMALL_SLOTS 32
#define INITIAL_NUM_SMALL_REGIONS 6
...
typedef struct {
uintptr_t checksum;
void *previous;
void *next;
} free_list_t;
typedef struct {
// Data structure for "compact" (small) pointers
// Low bits represent number of pages, high bits represent address
uintptr_t address_and_num_pages;
} compact_range_t;
typedef struct {
vm_address_t address;
vm_size_t size;
} vm_range_t;
typedef void *tiny_region_t;
typedef void *small_region_t;
typedef compact_range_t large_entry_t;
typedef vm_range_t huge_entry_t;
typedef struct {
malloc_zone_t basic_zone; // This substructure is seen by the malloc layer
...
// Regions for tiny objects
unsigned num_tiny_regions;
tiny_region_t *tiny_regions;
void *last_tiny_free;
unsigned tiny_bitmap; // Cache of the free lists
free_list_t *tiny_free_list[NUM_TINY_SLOTS]; // Free lists
...
// Regions for small objects
unsigned num_small_regions;
small_region_t *small_regions;
...
// Large objects
unsigned num_large_entries;
large_entry_t *large_entries; // Hashed by location
// Huge objects
unsigned num_huge_entries;
huge_entry_t *huge_entries;
...
// Initial region list
tiny_region_t initial_tiny_regions[INITIAL_NUM_TINY_REGIONS];
small_region_t initial_small_regions[INITIAL_NUM_SMALL_REGIONS];
} szone_t;
Table 87 shows the size ranges and the corresponding allocation quanta for the categories in the case of
the 32-bit system library. Table 88 shows the numbers for the 64-bit version.
Table 87. Scalable Malloc Allocation Categories (32-bit)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 88 of 135
Allocation Region
Region Size Allocation Sizes Allocation Quantum
Tiny 1MB 1496 bytes 16 bytes
Small 8MB 49715,359 bytes 512 bytes
Large 15,36016,773,120 bytes 1 page (4096 bytes)
Huge 16,773,121 bytes and more 1 page (4096 bytes)
Table 88. Scalable Malloc Allocation Categories (64-bit)
Allocation Region
Region Size Allocation Sizes Allocation Quantum
Tiny 2MB 1992 bytes 32 bytes
Small 16MB 99315,359 bytes 1024 bytes
Large 15,36016,773,120 bytes 1 page (4096 bytes)
Huge 16,773,121 bytes and more 1 page (4096 bytes)
The following are some noteworthy points about scalable malloc's allocation strategies.
The maximum allocation size for a tiny request is 31 times the tiny allocation quantumthat is, 31 x
16 and 31 x 32 bytes for 32-bit and 64-bit, respectively.
The minimum allocation size for a large request is 15 x 1024 bytes.
The maximum allocation size for a large request is 4095 pages.
Tiny requests are satisfied from tiny regions. Each such region is akin to a heap whose size is 1MB
(32-bit) or 2MB (64-bit). Similarly, memory in the small range is allocated from small regions, each
of which is akin to an 8MB heap.
Let us now look at the details of the individual strategies.
8.15.2.1. Tiny Allocations
Tiny allocations are made from tiny regions. The allocator divides a tiny region into equal-size pieces
called tiny quanta. Each tiny quantum is TINY_QUANTUM bytes in size.
TINY_QUANTUM is the minimum allocation size, regardless of the actual amount requested by the caller.
For example, the amounts of memory actually allocated to satisfy allocation requests of one byte,
TINY_QUANTUM bytes, and (TINY_QUANTUM+1) bytes are TINY_QUANTUM bytes, TINY_QUANTUM bytes, and
2xTINY_QUANTUM bytes, respectively.
The tiny region is laid out as a contiguous chunk of memory containing NUM_TINY_BLOCKS quanta.
Immediately following the last quantum is a metadata area that has the following structure.
At the beginning of the metadata is a header bitmap that contains one bit for each quantum in the
tiny region. Thus, it contains NUM_TINY_BLOCKS bits.
Following the header bitmap is a 32-bit pad word all of whose bits are setthat is, its value is
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 89 of 135
0xFFFF_FFFF.
Following the pad word is an in-use bitmap. Like the header bitmap, this bitmap contains
NUM_TINY_BLOCKS bits, one for each tiny quantum.
Following the in-use bitmap is a 32-bit pad word that is not written to by the allocator.
Even though a tiny quantum's size is fixed, a tiny allocation can range from as small as 1 byte to as large
as 31xTINY_QUANTUM. Allocations larger than a quantum will consist of multiple contiguous quanta. A set
of such contiguous tiny quanta, whether allocated or free, is called a tiny block. The header and in-use
bitmaps are used to maintain the notions of free and allocated blocks as follows.
If a given quantum is the first quantum of a block in use, the corresponding bits in both the header
bitmap and the in-use bitmap are 1.
If a given quantum is part of a block in use (but is not the first quantum of that block), the
corresponding bit in the header bitmap is 0, whereas the corresponding bit in the in-use bitmap is
irrelevant.
If a given quantum is the first quantum of a free block, the corresponding bits in the header and in-
use bitmaps are 1 and 0, respectively.
If a given quantum is part of a free block (but is not the first quantum of that block), the
corresponding bits in both the header bitmap and the in-use bitmap are irrelevant.
When a pointer is freed, the corresponding block's header and in-use bits are appropriately modified.
Moreover, information is written to the first few bytes of the pointed-to memory to convert that block into
a free block. Free blocks are chained together in free lists. The allocator maintains 32 free lists for tiny
region memory. Each list contains free blocks containing a particular number of quantathe first list
contains free blocks that are all one quantum in size, the second list contains free blocks that are all two
quanta in size, and so on. Although the maximum allocation size contains 31 quanta, it is possible to have
free blocks that are larger, since adjacent blocks can be coalesced. The last list holds these extra-large free
blocks.
The structure of a free block is as follows:
The first pointer-sized field contains a checksum computed by XOR'ing the free block's previous
pointer, next pointer, and the constant CHECKSUM_MAGIC (defined to be 0x357B).
The next pointer-sized field contains a pointer to the previous free block, if any, in the chain. If
there is no previous free block, this field contains a 0.
The next pointer-sized field contains a pointer to the next free block, if any, in the chain. Again, the
field is 0 if there is no next free block.
The next field is an unsigned short value that specifies the free block's size in units of quanta.
Consider the free and allocated blocks shown in Figure 832. The free block starting at quantum q contains
i
m quanta, whereas the allocated block starting at quantum q contains n quanta. Bits i and k are both set in
k
the header bitmap. However, only bit k is set in the in-use block.
Figure 832. Internal bookkeeping of tiny allocations (32-bit)
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 90 of 135
Let us examine the working of the allocator by using the debugger on a simple program. Figure 833
shows a program that performs four tiny allocations. We will examine the allocator's state immediately
after performing these allocations. Next, we will free the pointers and examine the state again. We will
use a debugger watchpoint to stop execution of the program at the desired locations.
Figure 833. A program that performs tiny allocations
// test_malloc.c (32-bit)
#include 
int watch = -1;
int
main(void)
{
void *ptr1, *ptr2, *ptr3, *ptr4;
ptr1 = malloc(490); // 31 TINY_QUANTUMs
ptr2 = malloc(491); // 31 TINY_QUANTUMs
ptr3 = malloc(492); // 31 TINY_QUANTUMs
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 91 of 135
ptr4 = malloc(493); // 31 TINY_QUANTUMs
watch = 1; // breakpoint here
free(ptr1);
free(ptr3);
watch = 2; // breakpoint here
free(ptr2);
free(ptr4);
watch = 3; // breakpoint here
return 0;
}
To examine the tiny region's metadata area, we first need to determine the area's base address. Given a
pointer known to be allocated from a tiny region, we can determine the base address of that tiny region
since the region is always aligned on a boundary defined by the product of NUM_TINY_BLOCKS and
TINY_QUANTUMthat is, the total allocatable size of the tiny region. The allocator ensures this alignment
when it allocates memory for the tiny region itself. Therefore, given a tiny region pointer p, the following
formula will give us the tiny region's base address:
TINY_REGION_FOR_PTR(p) = p & ~((NUM_TINY_BLOCKS * TINY_QUANTUM) - 1)
Since we are dealing with a 32-bit program, we must use the 32-bit-specific values of NUM_TINY_BLOCKS
and TINY_QUANTUM. As shown in Figure 832, these values are 65,536 and 16, respectively. Using these
values, the product is calculated to be 0x100000. Our formula then reduces to the following:
TINY_REGION_FOR_PTR(p) = p & 0xFFF00000
Given the tiny region's base address, we can readily compute the metadata area's base address, since the
metadata area immediately follows the last tiny quantum. This means that the metadata area starts
(NUM_TINY_BLOCKS * TINY_QUANTUM) bytes from the tiny region's base address, which gives us the
following formula for the metadata area's base address:
TINY_REGION_END(p) = (p & 0xFFF00000) + 0x100000
The metadata area's base address is where the header bitmap is located. The location of the in-use bitmap
can be calculated by adding NUM_TINY_BLOCKS/8 bytes (the size of the header bitmap) and a further 4
bytes (the size of the pad word). We finally have the following expressions:
HEADER_BITMAP_32(p) = (p & 0xFFF00000) + 0x100000
INUSE_BITMAP_32(p) = HEADER_BITMAP_32(p) + 0x2004
Now that we know how to calculate the addresses we wish to look at, let us compile and run the program
shown in Figure 833.
$ gcc -Wall -g -o test_malloc test_malloc.c
$ gdb ./test_malloc
...
(gdb) watch watch
Hardware watchpoint 1: watch
(gdb) run
Starting program: /private/tmp/test_malloc
Reading symbols for shared libraries . done
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 92 of 135
Hardware watchpoint 1: watch
Old value = -1
New value = 1
main () at test_malloc.c:18
18 free(ptr1);
(gdb) where full
#0 main () at test_malloc.c:18
ptr1 = (void *) 0x300120
ptr2 = (void *) 0x300310
ptr3 = (void *) 0x300500
ptr4 = (void *) 0x3006f0
(gdb)
When the first watchpoint is hit, our program has performed the four tiny allocations. Given the pointer
values and the formulas devised earlier, we see that for all four pointers, the tiny region's base address is
0x300000, the header bitmap is at address 0x400000, and the in-use bitmap is at address
0x400000+0x2004. Thus, the pointers are 0x120, 0x310, 0x500, and 0x6f0 bytes away, respectively, from
the base address. We can divide these distances by TINY_QUANTUMthat is, 16to get the starting quantum
number for each pointer. The starting quanta are 18, 49, 80, and 111, with the first quantum being
numbered 0. If we call the first bit in a bitmap as bit 0, we should examine bits 18, 49, 80, and 111 in both
the header and in-use bitmaps.
(gdb) x/4x 0x400000
0x400000: 0x25920400 0x00000200 0x00000100 0x00800000
(gdb) x/4x 0x400000+0x2004
0x402004: 0x25920400 0x00000200 0x00000100 0x00800000
Indeed, each of the four bits is set in both the bitmaps. Note that while accessing a bit, the allocator first
locates the byte that contains the bit. The leftmost byte is byte 0, the next byte to the right is byte 1, and so
on. Within a byte, the lowest numbered bit is the rightmost one.
Let us continue the program, which will cause ptr1 and ptr3 to be freed before the next watchpoint is hit.
(gdb) cont
Continuing.
Hardware watchpoint 1: watch