2 . In these cases, we create a query to re-
trieve terminal nodes of HTTP and SQL trees that are reachable
via causality edges as shown in Figure 5. The variables associated
to these terminal nodes are then linked via a propag. edge. In the
second case, the data items propagates from e1 to e(cid:48)
2 using (cid:27)rst an
edge next, and then a causality edge. We create a query to retrieve
the terminal nodes from user actions to HTTP requests using the
query pattern in Figure 5, and then we place propag. edges between
the variables.
Type Inference—We use types to distinguish security-relevant
data values (e.g., anti-CSRF tokens) from uninteresting ones (e.g.,
constants). Starting from a state transition, we select all variables of
a state and group by variable name. Each group is passed to a type
inference algorithm which returns the types matching each group.
The type inference extracts both syntactical types, e.g., integer,
decimal, and boolean, and semantic ones, e.g., session unique (SU),
user unique (UU) and constant (CO). The rules to infer a semantic
type are the following. If all values are the same, then the type is CO.
If the data values are the same within a trace session but di(cid:29)erent
between sessions, then the type is SU. If the data values are the
same within the traces of a user, but di(cid:29)erent between users, then
the type is user unique, i.e., UU. The user-generated (UG) semantic
type is added when there is a propagation chain that starts from a
user action. For example, the chain for pwnd is of type UG.
6 MODEL MINING AND TEST EXECUTION
We now present the test generation via model mining (Section 6.1)
and the process of test execution and evaluation (Section 6.2).
6.1 Test Generation
A test of our approach is a state-changing HTTP request and, op-
tionally, an HTTP request parameter carrying an anti-CSRF token.
First, we query our model to retrieve all relevant state-changing
HTTP requests. Second, for each HTTP request, we mine our model
to retrieve HTTP parameter names that carry an anti-CSRF token.
As a (cid:27)nal step, we query our model to extract the oracle. The oracle
represents expected behavior that we need to observe during a test
to decide whether a relevant state transition occurred.
We begin with a query to detect HTTP requests that trigger
security-relevant state transitions. Then, we present the query to
identify parameters. Finally, we present a traversal to extract the
test oracle.
6.1.1 State Transitions. State-changing HTTP requests can
be retrieved by starting from all state transition nodes, and then
by traversing the accepts to reach an HTTP request. If such an
edge exists, then the HTTP request is causing a change of state.
We can express this graph traversal as follows. The graph pattern
representing connections between an HTTP request parse tree pt,
and a state transition node t, is the following:
SC(pt, q
(cid:48)
, tr , q
(cid:48)(cid:48)) def:= Trans(q
(cid:48)
(cid:48)(cid:48)) ∧ Accepts(tr , pt)∧
, tr , q
HTTPReq(pt)
where q(cid:48) and q(cid:48)(cid:48) are the two states involved in the state transition
tr and pt is an HTTP request. Then, we use the predicate in a query:
def:= {pt : ∀q
(cid:48)
(cid:48)(cid:48)
, tr , SC(pt, q
(cid:48)
, q
(cid:48)(cid:48))}
, tr , q
QSC
This set contains all parse tree roots pt that can trigger any transi-
tion of state.
6.1.2 Relevant State Transitions. QSC contains all HTTP re-
quests that cause a change of state. However, not all changes of
state are relevant. For example, requests may result in database
operations to log user activities, which is not a security-critical
action. To identify such non-critical state changes, we hypothesize
that irrelevant queries are likely to occur multiple times within a
trace. The occurrence of queries can be determined via abstract
parse trees for queries. As a result of the FSM construction, all
SQL parse trees reachable via abstracts from the same abstract
SQL query are similar queries. The number of outgoing abstracts
edges is the number of occurrences of similar queries.
Starting from this observation, we re(cid:27)ne QSC to take into account
abstract parse trees of SQL queries and their outgoing abstracts
edges. The re(cid:27)nement extends QSC by traversing (i) an edge parses
from the HTTP request to the HTTP message event, (ii) a causality
edge from HTTP message to the data layer event, (iii) a parses
edge from the data event to the SQL query, and (iv) the SQL query
to the abstract SQL query. This query returns a list of pairs of the
root of an HTTP request and the root of an abstract SQL query.
From this list, we remove all pairs whose abstract SQL query has a
number of outgoing edges greater than 1. The HTTP requests of
the remaining pairs are called relevant state change transitions. We
show the accuracy of this heuristic in Section 7.
6.1.3 Security Tokens. After having identi(cid:27)ed relevant state-
changing requests, we search for parameters carrying anti-CSRF
tokens. Anti-CSRF tokens can be transported as URL parameters,
POST parameters, or in custom HTTP headers. During the con-
struction of the DFM, we created variables with semantic types. For
example, variables labeled as SU or UU carry a value that changes
across sessions. As anti-CSRF tokens are required to be unpre-
dictable for the attacker, these variables can carry these tokens. For
each state-changing HTTP request, we select all variables with type
SU or UU. Given the root of the parse tree of an HTTP request, we
traverse the accepts to reach the transition node. From the transi-
tion node, we traverse the to, thus reaching the new state. Then,
we retrieve all variables with sem_type ∈ {UU, SU}. The output of
these queries is a list of pairs of a state-changing HTTP request
and a variable name carrying a potential anti-CSRF token.
6.1.4 Oracle. The HTTP request and, optionally, the parame-
ter carrying an anti-CSRF token are used to generate a test against
the web application. At the end of a test, we need a way to establish
whether a security-relevant state transition occurred. As discussed,
a state transition is relevant if it executes a non-reoccurring SQL
query. Accordingly, for each HTTP request that we intend to test,
we retrieve the abstract parse tree roots of SQL queries with an
out-degree equal to one. The traversal to reach abstract SQL queries
is shown in Figure 4. These abstract SQL queries are the oracle for
the HTTP request.
6.2 Security Tests
We now have pairs of parse trees of state-changing HTTP requests
and parameters. The goal of our security tests is to verify the replay-
ability of the requests and check whether they cause SQL queries
that are similar to ones in the oracle.
We test web applications as follows. If the HTTP request has an
anti-CSRF parameter, we generate an HTTP request by omitting
the parameter. If the HTTP request does not have an anti-CSRF
parameter, we generate an HTTP request from scratch. In both
cases, we update the request’s session cookie by replaying the
user login user actions2. During the test execution, we retrieve
the resulting server-side call graph trace to extract SQL queries.
Then, we compare SQL queries with our oracle. The comparison can
result in one of the following cases. If one of the observed queries
matches a relevant query of our model, then our test managed to
reproduce the same change of state. In this case, we mark the test
as successful. If all queries either match a repeated query or are not
in our model, then we conclude that we cannot reproduce the same
state-changing operation, and mark the test as failed.
7 EVALUATION
We now present the evaluation of Deemon against popular web
applications.
Category
Accounting
eCommerce
Forum
eMail
Web Application
Invoice Ninja (IN)
Simple Invoices (SI)
AbanteCart
OpenCart
OXID eShop
PrestaShop
MyBB
Simple Machines Forum (SMF)
Horde Groupware Webmail (Horde)
Mautic
Version
2.5.2
2013.1b.8
1.2.4
2.1.0
4.9.8
1.6.1.2
1.8.8
2.0.12
5.12.14
1.4.1
LoC
1,576,957
601,532
151,807
153,863
370,723
420,626
150,622
153,072
178,880
2,190,920
Table 3: Web applications for the evaluation.
7.1 Testbed
We assessed Deemon against ten web applications retrieved from
the Bitnami catalog [8]. Bitnami is a provider of packaged, ready-
to-deploy applications that are typically created upon a customer
request. Based on this model, we consider the Bitnami catalog to
contain popular web applications.
We selected web applications from four categories, i.e., account-
ing, eCommerce, email, and forum, in order of appearance. We
collected initially 20 applications. Then, during the instrumentation
and trace generation, we decided to discard 10 of them: Four used
an unsupported runtime environment (i.e., Java or Python), two
required paying fees, three of them su(cid:29)ered from a bug in Xdebug
(an important component for our approach), and one required a
publicly available email server. The list of selected web applications
is shown in Table 3.
7.2 Instrumentation
The (cid:27)rst step of our evaluation is the instrumentation of the Bitnami
applications. Bitnami applications are distributed as self-contained
virtual machine (VM) images. Deemon (cid:27)rst extracts the virtual disk
from the VM image, assigns the disk local mount point, and cre-
ates a folder to store program traces. Then, Deemon edits the PHP
interpreter con(cid:27)guration (cid:27)le (i.e., php.ini) to enable Xdebug—a
PHP extension that generates function call tree (cid:27)les—and to change
the default Xdebug settings parameters3. Finally, Deemon adds a
system user and enables the OpenSSH server for the remote access
to retrieve call tree (cid:27)les.
After the instrumentation, Deemon imports the VM image in the
Virtual Box hypervisor. It boots the VM and takes a snapshot. This
snapshot will be the starting point for the rest of the analysis.
7.3 User Actions Input Trace
We captured user actions traces using Selenium IDE [37], a plugin
for Firefox. For each category of web application, we used two user
roles: regular user (e.g., customer for eCommerce applications) and
2User actions traces are factored in two parts: actions for the user login and actions
for the web application operation. Existing tools to capture user actions, e.g., Selenese
IDE [37], support trace factoring. Factoring can be done during the capture or after
the generation by searching for user credentials in the trace. We detail the creation of
factored user actions traces in Section 7.
3Deemon requires the collection of full function variable name and content, function
return values, and a computer readable trace (cid:27)le format. These are disabled by default.
For more details, please refer to [35].
administrator. For each role, we registered user actions for a selec-
tion of web application work(cid:30)ows. We focused on work(cid:30)ows that
are common to all categories, such as user sign-up and credential
update, and work(cid:30)ows which are speci(cid:27)c to a category, e.g., invoice
creation for accounting web applications.
Deemon uses user actions traces both to generate dynamic traces
and to test the web application against aCSRF. In the (cid:27)rst case,
Deemon replays all user actions (See Section 7.4). In the second
case, Deemon replays only user login actions to update the HTTP
request’s session cookie (See Section 6.2). To distinguish user lo-
gin actions from the rest, we use the trace factoring functionality
of Selenium IDE. More speci(cid:27)cally, we captured input traces as
follows:
• New work(cid:30)ow and no traces for a role: We use Selenium IDE
to capture the entire sequence of user actions of the work-
(cid:30)ow. Then, we factor actions in two sub-traces: one con-
tains user login actions and the other contains work(cid:30)ow-
speci(cid:27)c actions. Each sub-trace is stored in its own (cid:27)le;
• New work(cid:30)ow and a trace for the user exists: We import
user login actions in Selenium IDE and then capture the
new work(cid:30)ow-speci(cid:27)c user actions;
• Same work(cid:30)ow but new user: We duplicate the existing
trace (cid:27)les, and replace credentials in the user login trace
(cid:27)le. As traces are plain-text (cid:27)les, we use a script to (cid:27)nd
and replace user credentials.
The number of work(cid:30)ows (WFs) per web application is shown in
Table 4. The number varies according to availability of o(cid:29)-the-shelf
functionalities and the types of roles.
7.4 Dynamic Traces Generation
To generate dynamic traces, Deemon replays user actions against an
instrumented VM. Action replaying is done step-by-step using Sele-
nese Runner Java (SRJ) [37], an interpreter of Selenium user actions,
that controls a headless Firefox. The resulting requests are sent to
an HTTP proxy that forwards them one-by-one to the server. When
the rendering process of the browser is (cid:27)nished, SRJ signals that all
statically referenced external resources are retrieved (e.g., images,
CSS). Then, Deemon waits for 4 seconds (con(cid:27)gurable) to honor any
JavaScript asynchronous requests. After that, no more requests are
accepted, and the next action is (cid:27)red. The (cid:27)rst request that entered
the queue is associated to the (cid:27)red user action. The association is
used during the model construction to establish causality. Images
and CSS are not likely to change the state and Deemon does not
include them in the network trace. Deemon uses a customizable list
of MIME-types and (cid:27)le extensions to exclude these resources.
Throughout the replaying of user actions, whenever Deemon
receives an HTTP response, it accesses the VM to retrieve the
generated PHP function call tree and session data. The call tree
(cid:27)le is associated to the request. This association is used during the
model construction to establish causality. Finally, the call tree (cid:27)les
are then processed to extract the MySQL queries executed by the
web application.
7.5 Performance
In our assessment we used two computers. To generate traces and
test for execution, we used a workstation with an Intel i5-4690 CPU,
Web Apps
AbanteCart
Horde
IN
Mautic
MyBB
OpenCart
Oxid
Prestashop
SI
SMF
WFs
10
3
11
6
12
8
14
13
9
7
Tr. Gen. Mod. Gen.
1,446s
218s
215s
485s
261s
312s
372s
396s
170s
159s
212s
177s
152s
176s
214s
179s
163s
296s
128s
134s
Nodes
1,689,083
23,395
97,465
191,038
96,766
160,401
484,651
214,369
34,248
61,738
Edges
2,174,622
30,920
123,419
237,036