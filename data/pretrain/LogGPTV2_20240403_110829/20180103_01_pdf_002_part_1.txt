3D City Database for CityGML
3D City Database Version 2.0.6-postgis
Importer/Exporter Version 1.5.0-postgis
Release Version
Port documentation: Java
21 January 2013
Geoinformation Research Group Institute for Geodesy and
Department of Geography Geoinformation Science
University of Potsdam Technische Universität Berlin
Felix Kunde Thomas H. Kolbe
Hartmut Asche Claus Nagel
Javier Herreruela
Gerhard König
(Page intentionally left blank)
Content:
0 Legend...................................................................................................4
1 Connection to the database.......................................................................5
2 Calling the PL/pgSQL functions..................................................................6
2.1 Index functions, database report, utility functions inside of SQL statements...........7
2.2 Calculation of the BoundingBox.........................................................................8
3 Database specifics in Java.........................................................................8
3.1 The Database SRS.........................................................................................10
3.2 BoundingBox filter and Optimizer Hints in DBSplitter.java...................................12
3.3 Queries for import.........................................................................................13
3.4 Create Table without “nologging“.....................................................................14
3.5 Data types in cached tables............................................................................14
4 Implicit sequences.................................................................................15
5 How to work with database geometries in Java..........................................16
5.1 From CityGML to 3DCityDB.............................................................................16
5.2 From 3DCityDB back to CityGML......................................................................26
5.3 Synchronization of geometric functions............................................................36
6 How to deal with textures.......................................................................37
6.1 Import of textures.........................................................................................38
6.2 Export of textures..........................................................................................42
7 The batchsize of PostgreSQL....................................................................44
8 Workspace Management.........................................................................45
9 KML-Exporter.........................................................................................46
9.1 Queries........................................................................................................46
9.2 Geometries for KML placemarks......................................................................52
9.3 Textures for COLLADA export..........................................................................57
10 References............................................................................................58
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
Welcome to the documentation about ported java classes for the PostGIS version of the
Importer/Exporter tool. This document only shows exemplary parts of classes that hold
database-specific Java code. Even though they are of a large number the software works
mostly database-independent and had not been changed too much in the end. This
documentation is divided into thematic parts and not in software packages. Info boxes at the
start of each chapter should provide a quick overview which classes had to be changed and
which packages were affected by this.
0. Legend
Packages:
 api = no classes in this package were changed
 database = some parts of this package were changed
 modules = package contains parts which need to be translated in the future
Location of classes:
[A] from package api [M cityC] modules.citygml.common
[Cmd] cmd [M cityE] modules.citygml.exporter
[C] config [M cityI] modules.citygml.importer
[D] database [M com] modules.common
[E] event [M db] modules.database
[G] gui [M kml] modules.kml
[L] log [M pref] modules.prefrences
[P] plugin [oracle] oracle.spatial.geometry
[U] util
Code:
59 changes start at line 59 in the corresponding class
115+ these lines could not be translated but were also not necessary in function
rep this code example is repeating itself in the same class
rep+ this code example is repeating itself in the same class and/or in other classes
//private Integer port = 1521; uncommented Oracle-specific code
(already deleted from the classes)
private Integer port = 5432; PostGIS-specific code
4
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
1. Connection to the Database
Packages: Classes:
 api [Cmd] ImpExpCmd
 cmd [C] DBConnection
[D] DatabaseConnectionPool
 config
[D] DatabaseControllerImpl
 database [M cityC] BranchTemporaryCacheTable
 event [M cityC] CacheManager
 gui [M cityC] HeapCacheTable
[M cityC] TemporaryCacheTable
 log
[M cityE] DBExportWorker
 modules [M cityE] DBExportWorkerFactory
 plugin [M cityE] DBXlinkWorker
 util [M cityE] DBXlinkWorkerFactory
[M cityE] Exporter
[M cityE] DBSplitter
[M cityE] ExportPanel
[M cityI] DBImportWorker
[M cityI] DBImportWorkerFactory
[M cityI] DBImportXlinkResolverWorker
[M cityI] DBImportXlinkResolverWorkerFactory
[M cityI] Importer
[M cityI] DBCityObject
[M cityI] DBStGeometry
[M cityi] DBSurfaceData
[M cityi] DBSurfaceGeometry
[M cityi] XlinkWorldFile
[M cityi] ImportPanel
[M com] BoundingBoxFilter
[M db] SrsPanel
[G] ImpExpGui
[G] SrsComboBoxFactory
[P] llegalPluginEventChecker
[U] DBUtil
Connection handling has not changed much for the PostgreSQL database because the
Universal Connection Pool (UCP) [www1] by Oracle is still used. The PoolDataSource of the
UCP must pool a proper DataSource of PostgreSQL. If using the class PGSimpleDataSource,
the URL which usually addresses the JDBC driver of an DBMS will not work properly as the
result of conn.getSid() is not interpreted as the actual database name. To work within a
network the server name and the port number would need to be set as well. Therefore the
org.postgresql.Driver class was chosen in order to be able to use a connection URL.
Connection properties were uncommented as the PGconnection class of PostgreSQL only
holds the same attributes than the Java Connection class. CONNECTION_PROPERTY_USE_
THREADLOCAL_BUFFER_CACHE was not offered.
Unfortunately the use of Oracle’s UCP is not conform to the OpenSource effort behind the
PostGIS version of the 3DCityDB. The Apache Jakarta DBCP [www2] was tested by the
developers but found to work unacceptably worse than the UCP. The Connection Pools of
Apache’s Tomcat 7 [www3] or C3PO [www4] should be an alternative. As seen by the number
of orange packages in the overview box changing the connection pooling API would cause a lot
of code rework.
5
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
de.tub.citydb.config.project.database.DBConnection
59 //private Integer port = 1521;
private Integer port = 5432;
de.tub.citydb.database.DatabaseConnectionPool
64 //private final String poolName = "oracle.pool";
private final String poolName = "postgresql.pool";
115 // poolDataSource.setConnectionFactoryClassName(
// "oracle.jdbc.pool.OracleDataSource");
//
// poolDataSource.setURL("jdbc:oracle:thin:@//" + conn.getServer() + ":" +
conn.getPort()+ "/" + conn.getSid());
poolDataSource.setConnectionFactoryClassName("org.postgresql.Driver");
poolDataSource.setURL("jdbc:postgresql://" + conn.getServer() + ":" +
conn.getPort() + "/" + conn.getSid());
120+ // set connection properties
2. Calling the PL/pgSQL functions
Packages: Classes:
 api [M db] IndexOperation
 cmd [M cityI] Importer
[M cityE] DBAppearance
 config
[M cityE] DBBuilding
 database [M cityE] DBBuildingFurniture
 event [M cityE] DBCityFurniture
 gui [M cityE] DBCityObject
[M cityE] DBCityObjectGroup
 log
[M cityE] DBGeneralization
 modules [M cityE] DBGenericCityObject
 plugin [M cityE] DBReliefFeature
 util [M cityE] DBSolitaryVegetatObject
[M cityE] DBSurfaceGeometry
[M cityE] DBThematicSurface
[M cityE] DBTransportationComplex
[M cityE] DBWaterBody
[U] DBUtil
Most of the functionalities in the database panel of the Importer/Exporter are calling stored
procedures in the database. So the main changes in code were done in the PL/pgSQL scripts
(check the port documentation of PL/SQL scripts for more details) [1]. Within Java only the
names of the called functions were changed. The functions are bundled inside of a database
schema called “geodb_pkg”.
6
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
2.1 Index functions, database report, utility functions inside of
statements
The bigger the size of files to be imported the longer it takes to index the data after every
inserted tuple. It is recommended to drop the indexes before importing big data sets and
recreate them afterwards. Oracle keeps metadata of a dropped index, PostgreSQL does not. An
alternative way was programmed but it is not used now. The idea was to just set the index
status to invalid (pg_index.indisvalid) that it stays inactive during the import and then
REINDEX it afterwards. It was only tested with small datasets but no performance
improvement could be detected. The functions are already written but they are not a part of
the recent release.
de.tub.citydb.modules.citygml.exporter.database.content.DB*
//geodb_util.transform_or_null(...
geodb_pkg.util_transform_or_null(...
de.tub.citydb.util.database.DBUtil
64 // private static OracleCallableStatement callableStmt;
private static CallableStatement callableStmt;
80 // rs = stmt.executeQuery("select * from table(geodb_util.db_metadata)");
rs = stmt.executeQuery("select * from geodb_pkg.util_db_metadata() as t");
199 // callableStmt = (OracleCallableStatement)conn.prepareCall("{? = call
// geodb_stat.table_contents}");
rep // callableStmt.registerOutParameter(1, OracleTypes.ARRAY, "STRARRAY");
// callableStmt.executeUpdate();
// ARRAY result = callableStmt.getARRAY(1);
callableStmt = (CallableStatement)conn.prepareCall("{? = call
geodb_pkg.stat_table_contents()}");
callableStmt.registerOutParameter(1, Types.ARRAY);
callableStmt.executeUpdate();
Array result = callableStmt.getArray(1);
375 // String call = type == DBIndexType.SPATIAL ?
rep // "{? = call geodb_idx.drop_spatial_indexes}" :
// "{? = call geodb_idx.drop_normal_indexes}";
Drop case:
String call = type == DBIndexType.SPATIAL ?
"{? = call geodb_pkg.idx_drop_spatial_indexes()}" :
"{? = call geodb_pkg.idx_drop_normal_indexes()}";
or Switch case:
String call = type == DBIndexType.SPATIAL ?
"{? = call geodb_pkg.idx_switch_off_spatial_indexes()}" :
"{? = call geodb_pkg.idx_switch_off_normal_indexes()}";
// callableStmt = (OracleCallableStatement)conn.prepareCall(call);
callableStmt = (CallableStatement)conn.prepareCall(call);
7
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
2.2 Calculation of the BoundingBox
For calculating the BoundingBox workspace variables were uncommented. The query strings
had to call equivalent PostGIS functions (e.g. sdo_aggr_mbr --> ST_Extent,
geodb_util.to2d --> ST_Force_2d). As rectangle geometries can not be shorten in
number of points like in Oracle (LLB, URT), 5 Points were needed for the coordinate
transformation. As placeholders for single coordinates did not work with a
PreparedStatement the whole String in the PostGIS function ST_GeomFromEWKT(?) was
used as the exchangeable variable.
de.tub.citydb.util.database.DBUtil
236 // public static BoundingBox calcBoundingBox(Workspace workspace,
// FeatureClassMode featureClass) throws SQLException {
public static BoundingBox calcBoundingBox(FeatureClassMode featureClass)
throws SQLException {
248 // String query = "select sdo_aggr_mbr(geodb_util.to_2d(
// ENVELOPE, (select srid from database_srs)))
// from CITYOBJECT where ENVELOPE is not NULL";
String query = "select ST_Extent(ST_Force_2d(envelope))::geometry
from cityobject where envelope is not null";
317 // double[] points = jGeom.getOrdinatesArray();
// if (dim == 2) {
// xmin = points[0];
// ymin = points[1];
// xmax = points[2];
// ymax = points[3];
// } else if (dim == 3) {
// xmin = points[0];
// ymin = points[1];
// xmax = points[3];
// ymax = points[4];
// }
xmin = (geom.getPoint(0).x);
ymin = (geom.getPoint(0).y);
xmax = (geom.getPoint(2).x);
ymax = (geom.getPoint(2).y);
629 // psQuery = conn.prepareStatement("select SDO_CS.TRANSFORM(
// MDSYS.SDO_GEOMETRY(2003, " + sourceSrid + ", NULL,
// MDSYS.SDO_ELEM_INFO_ARRAY(1, 1003, 1), " +
// "MDSYS.SDO_ORDINATE_ARRAY(?,?,?,?)), " + targetSrid + ")from dual");
// psQuery.setDouble(1, bbox.getLowerLeftCorner().getX());
// psQuery.setDouble(2, bbox.getLowerLeftCorner().getY());
// psQuery.setDouble(3, bbox.getUpperRightCorner().getX());
// psQuery.setDouble(4, bbox.getUpperRightCorner().getY());
psQuery = conn.prepareStatement("select ST_Transform(ST_GeomFromEWKT(?), "
+ targetSrid + ")");
8
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
boxGeom = "SRID=" + sourceSrid + ";POLYGON((" +
bbox.getLowerLeftCorner().getX() + " " +
bbox.getLowerLeftCorner().getY() + "," +
bbox.getLowerLeftCorner().getX() + " " +
bbox.getUpperRightCorner().getY() + "," +
bbox.getUpperRightCorner().getX() + " " +
bbox.getUpperRightCorner().getY() + "," +
bbox.getUpperRightCorner().getX() + " " +
bbox.getLowerLeftCorner().getY() + "," +
bbox.getLowerLeftCorner().getX() + " " +
bbox.getLowerLeftCorner().getY() + "))";
psQuery.setString(1, boxGeom);
645 // double[] ordinatesArray = geom.getOrdinatesArray();
// result.getLowerCorner().setX(ordinatesArray[0]);
// result.getLowerCorner().setY(ordinatesArray[1]);
// result.getUpperCorner().setX(ordinatesArray[2]);
// result.getUpperCorner().setY(ordinatesArray[3]);
result.getLowerLeftCorner().setX(geom.getPoint(0).x);
result.getLowerLeftCorner().setY(geom.getPoint(0).y);
result.getUpperRightCorner().setX(geom.getPoint(2).x);
result.getUpperRightCorner().setY(geom.getPoint(2).y);
9
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
3. Database specifics in Java
Packages: Classes:
 api [A] DatabaseSrsType
 cmd [A] DatabaseSrs
[G] SrsComboBoxFactory
 config
[M cityC] CacheTableBasic
 database [M cityC] CacheTableDeprecatedMaterial
 event [M cityC] CacheTableGlobalAppearance
 gui [M cityC] CacheTableGmlId
[M cityC] CacheTableGroupToCityObject
 log
[M cityC] CacheTableLiberaryObject
 modules [M cityC] CacheTableSurfaceGeometry
 plugin [M cityC] CacheTableTextureAssociation
 util [M cityC] CacheTableTextureFile
[M cityC] CacheTableTextureParam
[M cityC] CacheTableModel
[M cityC] HeapCacheTable
[M cityE] Exporter
[M cityE] DBAppearance
[M cityE] DBSplitter
[M cityI] DBCityObject
[M cityI] DBCityObjectGenericAttrib
[M cityI] DBExternalReference
[M cityI] DBSequencer
[M cityI] DBSurfaceGeometry
[M cityI] XlinkSurfaceGeometry
[U] DBUtil
3.1 The database SRS
Until now PostGIS does not offer 3D spatial reference systems by default. INSERT examples for
PostGIS can be found at spatialreference.org. Unfortunately 2D and 3D geographic reference
systems are equally classified as GEOGCS. The function is3D() in the DBUtil class would not
detect 3D SRIDs though. If the INSERT statement by spatialreference.org [www5] is changed
manually from GEOGCS to GEOGCS3D is3D(), it would work because the type is listed in the
DatabaseSrsType class. It is not sure how 3D SRIDs will be handled in future PostGIS
releases. Oracle Spatial has got some strict rules how to work with them. This includes certain
checks on the data, which are not needed for the PostGIS version at the moment. It can be
noticed that the spatial_ref_sys table in PostGIS contains less columns than Oracle's
SDO_COORD_REF_SYS table. Most of the information is stored in the text column srtext. It
can be extracted with String functions.
de.tub.citydb.api.database.DatabaseSrsType
33 // PROJECTED("Projected"),
// GEOGRAPHIC2D("Geographic2D"),
// GEOCENTRIC("Geocentric"),
// VERTICAL("Vertical"),
// ENGINEERING("Engineering"),
// COMPOUND("Compound"),
// GEOGENTRIC("Geogentric"),
// GEOGRAPHIC3D("Geographic3D"),
10
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
// UNKNOWN("n/a");
PROJECTED("PROJCS", "Projected"),
GEOGRAPHIC2D("GEOGCS", "Geographic2D"),
GEOCENTRIC("GEOCCS", "Geocentric"),
VERTICAL("VERT_CS", "Vertical"),
ENGINEERING("LOCAL_CS", "Engineering"),
COMPOUND("COMPD_CS", "Compound"),
GEOGENTRIC("n/a", "Geogentric"),
GEOGRAPHIC3D("GEOGCS3D", "Geographic3D"),
UNKNOWN("", "n/a");
de.tub.citydb.util.database.DBUtil
141 // psQuery = conn.prepareStatement("select coord_ref_sys_name,
// coord_ref_sys_kind from sdo_coord_ref_sys where srid = ?");
psQuery = conn.prepareStatement("select split_part(srtext, '\"', 2) as
coord_ref_sys_name, split_part(srtext, '[', 1) as coord_ref_sys_kind
FROM spatial_ref_sys WHERE SRID = ? ");
704 // psQuery = conn.prepareStatement(srs.getType() ==
// DatabaseSrsType.GEOGRAPHIC3D ?
// "select min(crs2d.srid) from sdo_coord_ref_sys crs3d,
// sdo_coord_ref_sys crs2d where crs3d.srid = " + srs.getSrid() +
// " and crs2d.coord_ref_sys_kind = 'GEOGRAPHIC2D'
// and crs3d.datum_id = crs2d.datum_id" :
// "select cmpd_horiz_srid from sdo_coord_ref_sys
// where srid = " + srs.getSrid());
psQuery = conn.prepareStatement(srs.getType()== DatabaseSrsType.COMPOUND ?
"select split_part((split_part(srtext,'AUTHORITY[\"EPSG\",\"',5)),'\"',1)
from spatial_ref_sys where auth_srid = " + srs.getSrid() :
// searching 2D equivalent for 3D SRID
"select min(crs2d.auth_srid) from spatial_ref_sys crs3d, spatial_ref_sys
crs2d where (crs3d.auth_srid = " + srs.getSrid() + " and split_part
(crs3d.srtext, '[', 1) LIKE 'GEOGCS' AND
split_part(crs2d.srtext, '[', 1) LIKE 'GEOGCS' " +
//do they have the same Datum_ID?
"and split_part(
(split_part(crs3d.srtext,'AUTHORITY[\"EPSG\",\"',3)),'\"',1)