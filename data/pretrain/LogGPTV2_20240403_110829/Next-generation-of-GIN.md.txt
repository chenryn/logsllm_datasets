Next generation of GIN
Alexander Korotkov
Oleg Bartunov
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
Two GIN applications
Full-text search
●
tsvector @@ tsquery
–
Indexing tsvector data type
–
Hstore
●
(key,value) storage
–
Indexing keys, values
–
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
FTS in PostgreSQL
Full integration with PostgreSQL
●
27 built-in configurations for 10 languages
●
Support of user-defined FTS configurations
●
Pluggable dictionaries ( ispell, snowball, thesaurus ), parsers
●
Relevance ranking
●
GiST and GIN indexes with concurrency and recovery support
●
Rich query language with query rewriting support‏
●
It's cool, but we want faster FTS !
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
ACID overhead is really big :(
Foreign solutions: Sphinx, Solr, Lucene....
●
Crawl database and index (time lag)
–
No access to attributes
–
Additional complexity
–
BUT: Very fast !
–
Can we improve native FTS ?
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
Can we improve native FTS ?
156676 Wikipedia articles:
postgres=# explain analyze
SELECT docid, ts_rank(text_vector, to_tsquery('english', 'title')) AS rank
FROM ti2
WHERE text_vector @@ to_tsquery('english', 'title')
ORDER BY rank DESC HEAP IS SLOW
LIMIT 3; 400 ms !
Limit (cost=8087.40..8087.41 rows=3 width=282) (actual time=433.750..433.752 rows=3 loops=1)
-> Sort (cost=8087.40..8206.63 rows=47692 width=282)
(actual time=433.749..433.749 rows=3 loops=1)
Sort Key: (ts_rank(text_vector, '''titl'''::tsquery))
Sort Method: top-N heapsort Memory: 25kB
-> Bitmap Heap Scan on ti2 (cost=529.61..7470.99 rows=47692 width=282)
(actual time=15.094..423.452 rows=47855 loops=1)
Recheck Cond: (text_vector @@ '''titl'''::tsquery)
-> Bitmap Index Scan on ti2_index (cost=0.00..517.69 rows=47692 width=0)
(actual time=13.736..13.736 rows=47855 loops=1)
Index Cond: (text_vector @@ '''titl'''::tsquery)
Total runtime: 433.787 ms
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
Can we improve native FTS ?
156676 Wikipedia articles:
postgres=# explain analyze
SELECT docid, ts_rank(text_vector, to_tsquery('english', 'title')) AS rank
FROM ti2
WHERE text_vector @@ to_tsquery('english', 'title')
ORDER BY rank DESC
LIMIT 3;
What if we have this plan ?
Limit (cost=20.00..21.65 rows=3 width=282) (actual time=18.376..18.427 rows=3 loops=1)
-> Index Scan using ti2_index on ti2 (cost=20.00..26256.30 rows=47692 width=282)
(actual time=18.375..18.425 rows=3 loops=1)
Index Cond: (text_vector @@ '''titl'''::tsquery)
Order By: (text_vector >
●
select count(*) from hs where h @> 'tags=>{{term=>NYC}}';
–
0.98 s (seq) vs 0.1 s (GIN) → We want faster operation !
Observation
●
GIN indexes separately keys and values
–
Key 'tags' is very frequent -1138532,
–
value '{{term=>NYC}}' is rare — 285
Current GIN: time (freq & rare) ~ time(freq)
–
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
Hstore
Observation
●
– GIN indexes separately keys and values
– Key 'tags' is very frequent -1138532,
value '{{term=>NYC}}' is rare — 285
– Current GIN: time (freq & rare) ~ time(freq)
What if GIN supports
●
– time (freq & rare) ~ time(rare)
=# select count(*) from hs where h::hstore @> 'tags=>{{term=>NYC}}'::hstore;
count
-------
0.98 s (seq) vs 0.1 s (GIN) vs 0.017 s (GIN++)
285
(1 row)
Time: 17.372 ms
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
These two examples motivate
GIN improvements !
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
Summary of changes
Compressed storage
●
Fast scan («frequent_entry &
●
rare_entry» case)
Store additional information
●
Return ordered results by index
●
(ORDER BY optimization)
Planner optimization
●
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
ItemPointer
typedef struct ItemPointerData
{
BlockIdData ip_blkid;
OffsetNumber ip_posid;
}
6 bytes
typedef struct BlockIdData
{
uint16 bi_hi;
uint16 bi_lo;
} BlockIdData;
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
Compressed storage
What we have:
Offset is typically low
●
Block number is ascending
●
What to do:
Use var-byte encoding
●
Store increments for block numbers
●
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
Varbyte compression
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
Compressed storage
Diff
Varbyte encoding
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
Tests
Dataset: mailing lists archives
976488 messages of 1300 characters average length
Parameter master patched
Index build time 110 s 105 s
Initial index size 844 MB 400 MB
24K queries execution 1521 s 1447 s
Whole index update time 318 s 317 s
Index size after updates 1521 MB 683 MB
24K queries execution after 1557 1585
updates
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
Fast scan: idea
entry1 && entry2
Visiting parts of 3 pages instead of 7
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
Fast scan interface
New consistent method using tri-state
logic:
true
●
false
●
unknown
●
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
Fast scan interface
Can actually we skip these?
If consistent([false, unknown]) = false then we really can.
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
Store additional information
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
WordEntryPos
/*
* Equivalent to
* typedef struct {
* uint16
* weight:2,
2 bytes
* pos:14;
* }
*/
typedef uint16 WordEntryPos;
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
OffsetNumber compression
O0-O15 – OffsetNumber bits
N – Additional information NULL bit
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
WordEntryPos compression
P0-P13 – position bits
W0,W1 – weight bits
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
Example
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
ORDER BY using index
Before After
SELECT itemid, title SELECT itemid, title
FROM items FROM items
WHERE fts @@ to_tsquery('english', 'query') WHERE fts @@ to_tsquery('english', 'query')
ORDER BY ORDER BY
ts_rank(fts, to_tsquery('english', 'query')) DESC fts > Index Scan using test_idx on public.test (cost=0.00..309.25 rows=1000 width=16)
(actual time=11.341..103.422 rows=10 loops=1)
Output: x, y, slow_func(x, y)
Total runtime: 103.524 ms
(5 rows)
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
After
test=# EXPLAIN (ANALYZE, VERBOSE) SELECT * FROM test ORDER BY slow_func(x,y)
LIMIT 10;
QUERY PLAN
-------------------------------------------------------------------------------------------------------------------
Limit (cost=0.00..3.09 rows=10 width=16) (actual time=0.062..0.093 rows=10 loops=1)
Output: x, y
-> Index Scan using test_idx on public.test (cost=0.00..309.25 rows=1000 width=16)
(actual time=0.058..0.085 rows=10 loops=1)
Output: x, y
Total runtime: 0.164 ms
(5 rows)
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
Current state
Patches taked one round of review by Heikki
●
Linnakangas
Compression and planner optimization are
●
now on commitfest
Other patches are under reworking
●
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin
Thanks for attention!
Alexander Korotkov Next generation of GIN
Oleg Bartunov PGConf.EU-2013, Dublin