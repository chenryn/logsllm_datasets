# Next Generation of GIN
## Alexander Korotkov and Oleg Bartunov
### PGConf.EU-2013, Dublin

## Two GIN Applications
### 1. Full-Text Search (FTS)
- **tsvector @@ tsquery**: Indexing `tsvector` data type.
- **Hstore**: (key, value) storage with indexing for keys and values.

## FTS in PostgreSQL
- **Full Integration**: 
  - 27 built-in configurations for 10 languages.
  - Support for user-defined FTS configurations.
  - Pluggable dictionaries (e.g., ispell, snowball, thesaurus) and parsers.
  - Relevance ranking.
  - GiST and GIN indexes with concurrency and recovery support.
  - Rich query language with query rewriting support.
- **Performance Goal**: Faster FTS.

## Challenges with ACID Overhead
- **Foreign Solutions** (Sphinx, Solr, Lucene):
  - Crawl database and index (time lag).
  - No access to attributes.
  - Additional complexity.
  - Very fast, but not integrated natively.

## Improving Native FTS
- **Example Query**:
  ```sql
  EXPLAIN ANALYZE
  SELECT docid, ts_rank(text_vector, to_tsquery('english', 'title')) AS rank
  FROM ti2
  WHERE text_vector @@ to_tsquery('english', 'title')
  ORDER BY rank DESC
  LIMIT 3;
  ```
  - **Current Performance**: 400 ms.
  - **Desired Plan**:
    ```sql
    Limit (cost=20.00..21.65 rows=3 width=282) (actual time=18.376..18.427 rows=3 loops=1)
    -> Index Scan using ti2_index on ti2 (cost=20.00..26256.30 rows=47692 width=282)
      (actual time=18.375..18.425 rows=3 loops=1)
      Index Cond: (text_vector @@ '''titl'''::tsquery)
    ```

- **Hstore Example**:
  - Query: `SELECT count(*) FROM hs WHERE h @> 'tags=>{{term=>NYC}}';`
  - **Performance**:
    - Sequential scan: 0.98 s.
    - GIN: 0.1 s.
    - Improved GIN (GIN++): 0.017 s.

## Observations and Motivations
- **GIN Indexes**:
  - Separately indexes keys and values.
  - Frequent key: 1,138,532 occurrences.
  - Rare value: 285 occurrences.
  - Current GIN: Time (frequent & rare) ~ Time(frequent).

- **Improvements**:
  - Time (frequent & rare) ~ Time(rare).

## Summary of Changes
- **Compressed Storage**:
  - Fast scan for frequent and rare entries.
  - Store additional information.
  - Return ordered results by index (ORDER BY optimization).
  - Planner optimization.

- **ItemPointer**:
  - Structure: `BlockIdData` and `OffsetNumber`.
  - Size: 6 bytes.

- **Compression Techniques**:
  - **Var-byte Encoding**:
    - Use var-byte encoding.
    - Store increments for block numbers.

- **Tests**:
  - **Dataset**: Mailing lists archives (976,488 messages, 1,300 characters average length).
  - **Results**:
    - Index build time: 110 s (master) vs 105 s (patched).
    - Initial index size: 844 MB (master) vs 400 MB (patched).
    - 24K queries execution: 1521 s (master) vs 1447 s (patched).
    - Whole index update time: 318 s (master) vs 317 s (patched).
    - Index size after updates: 1521 MB (master) vs 683 MB (patched).
    - 24K queries execution after updates: 1557 s (master) vs 1585 s (patched).

- **Fast Scan**:
  - Idea: Visiting parts of 3 pages instead of 7.
  - New consistent method using tri-state logic (true, false, unknown).

- **Store Additional Information**:
  - **WordEntryPos**:
    - Structure: `uint16` with weight and position bits.
    - Size: 2 bytes.

- **OffsetNumber Compression**:
  - Bits: OffsetNumber (O0-O15), Additional information (N).

- **WordEntryPos Compression**:
  - Bits: Position (P0-P13), Weight (W0, W1).

- **Example**:
  - Before and after compression.

- **ORDER BY Using Index**:
  - **Before**:
    ```sql
    SELECT itemid, title
    FROM items
    WHERE fts @@ to_tsquery('english', 'query')
    ORDER BY ts_rank(fts, to_tsquery('english', 'query')) DESC;
    ```
  - **After**:
    ```sql
    SELECT itemid, title
    FROM items
    WHERE fts @@ to_tsquery('english', 'query')
    ORDER BY fts > Index Scan using test_idx on public.test (cost=0.00..309.25 rows=1000 width=16)
    (actual time=11.341..103.422 rows=10 loops=1)
    Output: x, y, slow_func(x, y)
    Total runtime: 103.524 ms
    ```

- **Current State**:
  - Patches have undergone one round of review by Heikki Linnakangas.
  - Compression and planner optimization are now on commitfest.
  - Other patches are under reworking.

## Thanks for Your Attention!
- Alexander Korotkov
- Oleg Bartunov
- PGConf.EU-2013, Dublin