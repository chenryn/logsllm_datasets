## ShardingSphere PostgreSQL proxy模式分库分表的使用  
### 作者                                                                        
digoal                                                                                                                 
### 日期                                                                                                                 
2020-02-09                                                                                                             
### 标签                                                                                                                 
PostgreSQL , shardingsphere , sharding      
----               
## 背景      
PostgreSQL除了citus, pg-xc, pg-xl, pg-x2, antdb, greenplum, redshift, asterdata, pg_shardman, pl/proxy 等这类与数据库结合比较紧密的sharding插件或mpp产品以外(这类产品有的商业化程度往往比较高,适合的场景更广泛,但是也更中庸或更有场景指向型), 也有shardingsphere PostgreSQL sharding 这种与MySQL 最流行的sharding中间件类似的中间件.    
ShardingSphere适合分片彻底, 数据库逻辑极其简单的业务, 那些mysql sharding的坑、最佳实践在ShardingSphere上都比较适用.   
shardingsphere 支持多种模式，建议根据实际情况选择。   
说明  | Sharding-JDBC|	Sharding-Proxy|	Sharding-Sidecar
---|---|---|---
数据库|	任意|	MySQL、PG|	MySQL、PG
连接消耗数|	高|	低|	高
异构语言|	仅Java|	任意|	任意
性能|	损耗低|	损耗略高|	损耗低
无中心化|	是|	否|	是
静态入口|	无|	有|	无
## 功能列表  
- 数据分片  
    - 分库 & 分表  
    - 读写分离  
    - 分片策略定制化  
    - 无中心化分布式主键  
- 分布式事务  
    - 标准化事务接口  
    - XA强一致事务  
    - 柔性事务  
- 数据库治理  
    - 配置动态化  
    - 编排 & 治理  
    - 数据脱敏  
    - 可视化链路追踪  
    - 弹性伸缩(规划中)  
## 配置模板  
```  
cd apache-shardingsphere-incubating-4.0.0-sharding-proxy-bin  
cd conf  
```  
配置示例  
```  
# ll  
total 24  
-rw-r--r-- 1 501 games 3019 Jul 30  2019 config-encrypt.yaml  
-rw-r--r-- 1 501 games 3582 Apr 22  2019 config-master_slave.yaml  
-rw-r--r-- 1 501 games 4278 Apr 22  2019 config-sharding.yaml  
-rw-r--r-- 1 501 games 1322 Apr 22  2019 logback.xml  
-rw-r--r-- 1 501 games 1918 Jul 30  2019 server.yaml  
```  
config-xxx.yaml  
数据分片例子  
```  
schemaName: #逻辑数据源名称  
dataSources: #数据源配置，可配置多个data_source_name  
  : #与Sharding-JDBC配置不同，无需配置数据库连接池  
    url: #数据库url连接  
    username: #数据库用户名  
    password: #数据库密码  
    connectionTimeoutMilliseconds: 30000 #连接超时毫秒数  
    idleTimeoutMilliseconds: 60000 #空闲连接回收超时毫秒数  
    maxLifetimeMilliseconds: 1800000 #连接最大存活时间毫秒数  
    maxPoolSize: 65 #最大连接数  
shardingRule: #省略数据分片配置，与Sharding-JDBC配置一致  
```  
读写分离例子  
```  
schemaName: #逻辑数据源名称  
dataSources: #省略数据源配置，与数据分片一致  
masterSlaveRule: #省略读写分离配置，与Sharding-JDBC配置一致  
```  
公共配置例子  
conf/server.yaml  
```  
Proxy属性  
#省略与Sharding-JDBC一致的配置属性  
props:  
  acceptor.size: #用于设置接收客户端请求的工作线程个数，默认为CPU核数*2  
  proxy.transaction.type: #默认为LOCAL事务，允许LOCAL，XA，BASE三个值，XA采用Atomikos作为事务管理器，BASE类型需要拷贝实现ShardingTransactionManager的接口的jar包至lib目录中  
  proxy.opentracing.enabled: #是否开启链路追踪功能，默认为不开启。详情请参见[链路追踪](/cn/features/orchestration/apm/)  
  check.table.metadata.enabled: #是否在启动时检查分表元数据一致性，默认值: false  
  proxy.frontend.flush.threshold: # 对于单个大查询,每多少个网络包返回一次  
权限验证  
用于执行登录Sharding Proxy的权限验证。配置用户名、密码、可访问的数据库后，必须使用正确的用户名、密码才可登录Proxy。  
authentication:  
  users:  
    root: # 自定义用户名  
      password: root # 自定义用户名  
    sharding: # 自定义用户名  
      password: sharding # 自定义用户名  
      authorizedSchemas: sharding_db, masterslave_db # 该用户授权可访问的数据库，多个用逗号分隔。缺省将拥有root权限，可访问全部数据库。  
```  
## 测试例子  
准备测试环境  
java  
```  
https://www.java.com/zh_CN/download/help/linux_x64rpm_install.xml#download  
yum install -y java  
```  
v12 数据库:  
```  
pg_hba.conf  
host all r1 0.0.0.0/0 md5  
```  
```  
user: r1  
pwd: PW123321!  
schemaname: digoal  
```  
```  
create role r1 login encrypted password 'PW123321!';  
create database db0 with owner r1;  
create database db1 with owner r1;  
create database db2 with owner r1;  
create database db3 with owner r1;  
```  
主库  
```  
127.0.0.1:1921:db0  
127.0.0.1:1921:db1  
127.0.0.1:1921:db2  
127.0.0.1:1921:db3  
```  
对应从库(采用PG物理流复制的从库)  
```  
127.0.0.1:1922:db0  
127.0.0.1:1922:db1  
127.0.0.1:1922:db2  
127.0.0.1:1922:db3  
```  
公共配置  
```  
vi /root/apache-shardingsphere-incubating-4.0.0-sharding-proxy-bin/conf/server.yaml  
authentication:  
  users:  
    r1:  
      password: PW123321!  
      authorizedSchemas: db0,db1,db2,db3  
props:  
  executor.size: 16  
  sql.show: false  
```  
### 水平分片测试配置  
```  
vi /root/apache-shardingsphere-incubating-4.0.0-sharding-proxy-bin/conf/config-sharding.yaml  
schemaName: sdb  
dataSources:  
  db0:   
    url: jdbc:postgresql://localhost:1921/db0  
    username: r1  
    password: PW123321!  
    connectionTimeoutMilliseconds: 30000  
    idleTimeoutMilliseconds: 60000  
    maxLifetimeMilliseconds: 1800000  
    maxPoolSize: 65  
  db1:  
    url: jdbc:postgresql://localhost:1921/db1  
    username: r1  
    password: PW123321!  
    connectionTimeoutMilliseconds: 30000  
    idleTimeoutMilliseconds: 60000  
    maxLifetimeMilliseconds: 1800000  
    maxPoolSize: 65  
  db2:  
    url: jdbc:postgresql://localhost:1921/db2  
    username: r1  
    password: PW123321!  
    connectionTimeoutMilliseconds: 30000  
    idleTimeoutMilliseconds: 60000  
    maxLifetimeMilliseconds: 1800000  
    maxPoolSize: 65  
  db3:  
    url: jdbc:postgresql://localhost:1921/db3  
    username: r1  
    password: PW123321!  
    connectionTimeoutMilliseconds: 30000  
    idleTimeoutMilliseconds: 60000  
    maxLifetimeMilliseconds: 1800000  
    maxPoolSize: 65  
shardingRule:  
  tables:  
    t_order:  
      actualDataNodes: db${0..3}.t_order${0..7}  
      databaseStrategy:  
        inline:  
          shardingColumn: user_id  
          algorithmExpression: db${user_id % 4}  
      tableStrategy:   
        inline:  
          shardingColumn: order_id  
          algorithmExpression: t_order${order_id % 8}  
      keyGenerator:  
        type: SNOWFLAKE  
        column: order_id  
    t_order_item:  
      actualDataNodes: db${0..3}.t_order_item${0..7}  
      databaseStrategy:  
        inline:  
          shardingColumn: user_id  
          algorithmExpression: db${user_id % 4}  
      tableStrategy:  
        inline:  
          shardingColumn: order_id  
          algorithmExpression: t_order_item${order_id % 8}  
      keyGenerator:  
        type: SNOWFLAKE  
        column: order_item_id  
  bindingTables:  
    - t_order,t_order_item  
  defaultTableStrategy:  
    none:  
```  