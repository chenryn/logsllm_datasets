DEFCON30 | 拯救环境变量
收录于合集
#红队
18个
通过在进程级别操纵环境变量，可以让受信任的应⽤程序加载任意 DLL 并执⾏恶意代
码。这篇⽂章列出了近 100 个在 Windows 11 (21H2) 上易受此类 DLL 劫持的可执⾏⽂
件；它演示了如何仅⽤三⾏ VBScript 就可以实现这⼀点。
环境变量
环境变量是在 1970 年代后期在 Unix V7 [ 1 , p.99-101 ] 中引⼊的，作为将信息传递给进程的
⼀种简单⽅法。事实证明它很受欢迎：⼏年后它也被 PC DOS 2.0 [ 2 , p.477 ] 采⽤，最终演
变成 Windows 操作系统。⼤约四⼗年后，环境变量仍然存在于 Windows 中——尽管其他发
展，例如在 Windows 3.1 中引⼊注册表，已经在⼀定程度上改变了它的⻆⾊。
环境变量的概念很简单：键值对的集合在进程启动时可供进程使⽤，并可⽤作程序流的⼀部
分。顾名思义，这些变量通常包含有关操作系统环境的信息。例如，如果将 HOMEDRIVE 具有
值 C: 的环境变量提供给进程，它可能会使⽤该信息来决定将⽂件存储到 C: 驱动器，⽽不是
任何其他驱动器。
开卷[益 · 不
2022-08-16 11:50 发表于新加坡
原创
bggsec 甲⽅安全建设
显示环境变量在进程环境块 (PEB) 中的存储位置的图表
显示环境变量在进程环境块 (PEB) 中的存储位置的图表。
Windows 中的每个进程都有⼀个关联的进程环境块 (PEB)，这是⼀种包含进程可⽤的各种信息
的数据结构 [ 3 ]。如上图所示，环境变量是该结构的⼀部分：所有变量键和值都存储在单个字
符串中，总共可以包含多达 32,767 (2 15 -1) 个字符 [ 4 ]。
⾄关重要的是，这意味着环境变量可以从进程更改为进程。当⼀个新进程启动时，⽗进程负责
提供环境变量；这些将包含在新流程的 PEB 中。在⼤多数情况下，⽗级将简单地传递它⾃⼰
启动时收到的环境变量。
这就引出了最⽗进程从哪⾥获取其环境变量的问题。不同的级别上设置环境变量：系统、⽤户
和进程 [ 5 ]。在系统级别设置的环境变量适⽤于所有⽤户；⽤户级变量仅适⽤于当前⽤户。两
者都存储在注册表中，前者在HKLM下，后者在HKCU下。当 Windows 启动时，它⾸先获取
所有系统环境变量。当⽤户登录时，它会添加（并可能覆盖）任何⽤户环境变量。例如， HOM
EDRIVE 可能设置为 C: 系统级别，但个别⽤户可能已决定将其设置为 D: . 当在该⽤户的上下
⽂中启动⼀个新进程时，它将 HOMEDRIVE=D: 作为环境变量接收。最后，当在进程级别设置环
境变量时，它会在单个进程中更改，尽管它可以传递给所有新的⼦进程，但它不像系统和⽤户
级别的环境变量那样“持久” . ⼀个很好的例⼦是 set HOMEDRIVE=X: 在 Windows 命令提示符
中运⾏；从此提示启动的任何新进程都将 HOMEDRIVE=X: 作为环境变量接收，但如果提示关闭
并重新打开，该 HOMEDRIVE 变量将重置为其原始值。
Windows 开箱即⽤地定义了许多环境变量。尽管可以覆盖这些值，但这些值通常是在安装
Windows 时设置的，并且永远不会更改。包括系统组件在内的各种程序都依赖于这些变量；
例如，某些程序使⽤ SYSTEMROOT （或更旧的 WINDIR ）来获取 Windows ⽂件夹的路径，通
常是 C:\Windows .
劫持机会
如前所述，程序可能依赖这些“标准”环境变量来确定某些⽂件的路径。例如，事实证明有相当
多的程序依赖 SYSTEMROOT 并 WINDIR 加载位于 C:\Windows\System32 ⽂件夹中的 DLL。 h
ostname.exe 例如，尝试在 %SYSTEMROOT%\System32\mswsock.dll 运⾏时加载带有路径的
DLL；在正常情况下，这将解析为 C:\Windows\System32\mswsock.dll . 因为这是⼀条绝对
路径，所以不会调⽤ DLL 搜索顺序，因此⼈们可能会得出结论，这不会为我们提供 DLL 劫持
机会 [ 6 ]。
然⽽，由于涉及到⼀个变量，这仍然可以被利⽤：如果要更改 to 的值 SYSTEMROOT ， C:\Ev
il 程序将尝试加载 C:\Evil\System32\mswsock.dll 。如果攻击者将恶意 DLL 放在该位
置，则会导致合法 hostname.exe 的 DLL 被欺骗加载攻击者的 DLL；因此，这毕竟为我们提
供了⼀种新型的 DLL Hijacking
可以说，执⾏这种技术说起来容易做起来难。在系统或⽤户级别更改值的⼀个主要问题 SYSTE
MROOT 是它实际上会破坏整个操作系统。如此多的系统组件依赖于 SYSTEMROOT 许多程序，如
果您将其指向⼀个不包含它们所期望的 DLL 的⽬录，那么许多程序将⽆法正常⼯作。这会导
致系统不稳定，甚⾄可能导致操作系统完全停⽌⼯作。因此，在⼤多数情况下，它⾸先会破坏
执⾏ DLL 劫持的⽬的。
但是，正如我们所⻅，也可以仅在进程级别更改环境变量。这意味着只有那个单⼀的新进程将
具有更新的值（或者，如果它碰巧创建了任何⼦进程，那么这些也可能）。因此，其他程序将
不受影响，系统不应因此⽽变得不稳定。
[与其他 DLL 劫持⽅法  6 ]相⽐，这种⽅法有许多优点。例如，⽆需移动易受攻击的可执⾏⽂
件：只需在从正常位置执⾏易受攻击的程序之前更改环境变量，就会导致加载恶意 DLL。此
外，由于可以使⽤更改的环境变量启动程序，⽽不必执⾏诸如⽂件写⼊或注册表更改之类的嘈
杂操作，因此检测机制不太可能检测到劫持本身。最后，可以通过多种⽅式使⽤更改的环境变
量启动新进程。除了从已编译的可执⾏⽂件中执⾏此操作外，PowerShell、VBScript 和 JScript
等内置脚本引擎也⽀持这⼀点。
显示基于环境变量的 DLL 劫持⼯作的图表。
上图从⾼层次展示了成功的基于环境变量的 DLL 劫持可能是什么样⼦。VBScript 不必特别复
杂；例如，下⾯的代码就⾜够了：
Set shell = WScript.CreateObject("WScript.Shell") 
shell.Environment("Process")("SYSTEMROOT") = "C:\Evil" 
shell.Exec("C:\windows\system32\hostname.exe") 
在 Windows 11 上，在创建后运⾏此脚本 C:\Evil\system32\mswsock.dll 确实会 hostnam
e.exe 加载 DLL，如下所示：
示例显示执⾏ VBScript ⽂件导致位于 C:\windows\system32 中的合法 hostname.exe 被执⾏并
成功加载 mswsock.dll 的恶意版本。
在 PowerShell 中这样做可以通过 $env:SYSTEMROOT="C:\Evil" 在调⽤⽬标进程之前的简单
语句来实现；但是，由于 PowerShell 本身也将使⽤这个新值，它可能会导致 PowerShell 在某
些情况下中断。⼀种更可靠的启动新进程并且只更新新进程的环境变量的⽅法如下：
$s = New-Object System.Diagnostics.ProcessStartInfo 
$s.FileName="C:\windows\system32\hostname.exe" 
$s.EnvironmentVariables.Remove("SYSTEMROOT") 
$s.EnvironmentVariables.Add("SYSTEMROOT", "C:\Evil") 
$s.UseShellExecute = $false 
$p = New-Object System.Diagnostics.Process 
$p.StartInfo = $s 
$p.Start()
识别易受攻击的可执⾏⽂件
要了解这种技术引⼊的问题的规模，应该通过针对更⼤的可执⾏⽂件组进⾏测试来调查这种类
型的 DLL 劫持易受攻击的普遍程度。我们将⾃⼰限制在 System32 标准 Windows 11 安装⽂
件夹中的签名可执⾏⽂件中，我们有⼀个包含 600 多个可执⾏⽂件的测试组。
⼀个简单的⽅法是在进程级别设置⼀个有趣的环境变量，例如 SYSTEMROOT or WINDIR ，将
其指向⼀个唯⼀的⽬录，然后执⾏我们测试组中的每个可执⾏⽂件（没有任何特殊的命令⾏参
数）。使⽤ Procmon [ 9 ]，可以有效地监控位于我们⽬录下的 DLL 加载尝试。尽管这⽴即为
我们提供了许多可能的候选者，但它并没有为我们提供任何证据证明如果存在恶意 DLL ⽂
件，它们实际上会被加载。
为此，将⾃定义 DLL ⽂件放在提供的位置并验证哪些⽂件已成功加载将是有益的。在通常解
析为的 SYSTEMROOT 和的情况下，这意味着必须编译超过 20,000 个“⾃定义”DLL ⽂件才能使
测试尽可能完整。编译⾃定义 DLL 并不像听起来那样简单 [ 6 ]，更不⽤说必须编译数千个
DLL。 WINDIR``C:\Windows
在本研究采⽤的⽅法中，编译的 DLL ⽂件将在加载时将指纹⽂件写⼊磁盘，从⽽识别哪个
DLL 是由哪个进程加载的。如果这些“植⼊”DLL 都被复制到前⾯提到的唯⼀⽂件夹中，执⾏我
们测试组中的每个可执⾏⽂件应该会⽣成许多正在创建的指纹⽂件；准确告诉我们哪些进程易
受攻击，以及涉及哪些 DLL。
⽀持代码，可⽤于编译⼤量 DLL 以实现 DLL 劫持、利⽤开源⼯具并使⽤“DLL 导出代理”和
“DLL 资源克隆”以最⼤限度地与测试的可执⾏⽂件兼容，可以在以下位置找到GitHub [ 10 ]。
那⾥还提供了对所采⽤⽅法的更彻底和技术性的解释。
已确认易受攻击的应⽤程序
应⽤此⽅法后，下表列出了 C:\windows\system32 Windows 11 (21H2) 上易受基于环境变量
的 DLL 劫持的所有可执⾏⽂件。第⼀列显示了更改的环境变量，第⼆列显示了易受攻击的应
⽤程序，第三列显示了从更改的位置（相对于环境变量）加载的 DLL。如上⼀节所述，这些不
仅仅是理论上的⽬标，它们经过测试并确认是有效的。该列表包括 82 个可执⾏⽂件和 91 个
唯⼀的 DLL。
显示298个条⽬
搜索：
环境变量
可执⾏⽂件
DLL（相对于变量）
%SYSTEMROO
T%
AppHostRegistrationVeriﬁer.exe
\system32\npmproxy.dll
%SYSTEMROO
T%
ApplicationFrameHost.exe
\system32\ApplicationFrame.
dll
%SYSTEMROO
T%
calc.exe
\system32\twinui.appcore.dll
%SYSTEMROO
T%
\system32\propsys.dll
%SYSTEMROO
T%
\system32\execmodelproxy.dll
%SYSTEMROO
T%
\system32\windows.storage.dll
%SYSTEMROO
T%
certreq.exe
\system32\NetworkExplorer.dl
l
环境变量
可执⾏⽂件
DLL（相对于变量）
%SYSTEMROO
T%
\system32\wpdshext.dll
%SYSTEMROO
T%
\system32\explorerframe.dll
%SYSTEMROO
T%
\system32\comdlg32.dll
%SYSTEMROO
T%
\system32\MMDevApi.dll
%SYSTEMROO
T%
\system32\p9np.dll
%SYSTEMROO
T%
\system32\cscobj.dll
%SYSTEMROO
T%
\system32\windows.storage.dll
%SYSTEMROO
T%
\system32\dataexchange.dll
%SYSTEMROO
T%
\system32\drprov.dll
%SYSTEMROO
T%
\system32\propsys.dll
%SYSTEMROO
T%
\system32\davclnt.dll
%SYSTEMROO
T%
\system32\windowscodecs.dll
%SYSTEMROO
T%
\system32\Windows.Storage.Search.
dll
%SYSTEMROO
T%
\system32\ntlanman.dll
%SYSTEMROO
T%
\system32\shell32.dll
%SYSTEMROO
T%
\system32\cscui.dll
%SYSTEMROO
T%
\system32\StructuredQuery.dll
环境变量
可执⾏⽂件
DLL（相对于变量）
%SYSTEMROO
T%
charmap.exe
\system32\dataexchange.dll
%SYSTEMROO
T%
cleanmgr.exe
\system32\propsys.dll
%SYSTEMROO
T%
CloudNotiﬁcations.exe
\system32\UIAnimation.dll
%SYSTEMROO
T%
CompMgmtLauncher.exe
\system32\rsaenh.dll
%SYSTEMROO
T%
\system32\SspiCli.dll
%SYSTEMROO
T%
\system32\cscui.dll
%SYSTEMROO
T%
\system32\propsys.dll
%SYSTEMROO
T%
\system32\WindowsCodecs.dll
%SYSTEMROO
T%
\system32\windowsudk.shellcommo
n.dll
%SYSTEMROO
T%
\system32\cscobj.dll
%SYSTEMROO
T%
\system32\XmlLite.dll
%SYSTEMROO
T%
\system32\ntshrui.dll
%SYSTEMROO
T%
\system32\twext.dll
%SYSTEMROO
T%
\system32\windows.storage.dll
%SYSTEMROO
T%
conhost.exe
\system32\msctf.dll
%SYSTEMROO
T%
control.exe
\system32\StructuredQuery.dl
l
%SYSTEMROO
T%
\system32\windows.storage.dll
环境变量
可执⾏⽂件
DLL（相对于变量）
%SYSTEMROO
T%
\system32\propsys.dll
%SYSTEMROO
T%
\system32\MSWB7.dll
%SYSTEMROO
T%
\system32\explorerframe.dll
%SYSTEMROO
T%
\system32\shell32.dll
%SYSTEMROO
T%
\system32\Windows.Storage.Search.
dll
%SYSTEMROO
T%
cttune.exe
\system32\fastprox.dll
%SYSTEMROO
T%
\system32\wbemsvc.dll
%SYSTEMROO
T%
\system32\wbemprox.dll
%SYSTEMROO
T%
curl.exe
\system32\mswsock.dll
%SYSTEMROO
T%
ddodiag.exe
\system32\PROPSYS.dll
%SYSTEMROO
T%
\system32\FdDevQuery.dll
%SYSTEMROO
T%
DeviceCensus.exe
\system32\IDStore.dll
%SYSTEMROO
T%
\system32\FlightSettings.dll
%SYSTEMROO
T%
\system32\npmproxy.dll
%SYSTEMROO
T%
\system32\wlidprov.dll
%SYSTEMROO
T%
\system32\sapi_onecore.dll
%SYSTEMROO
T%
\system32\MMDevApi.dll
环境变量
可执⾏⽂件
DLL（相对于变量）
%SYSTEMROO
T%
\system32\wbemprox.dll
%SYSTEMROO
T%
\system32\mswsock.dll
%SYSTEMROO
T%
\system32\wbemsvc.dll
%SYSTEMROO
T%
\system32\fastprox.dll
%SYSTEMROO
T%
DevicePairingWizard.exe
\system32\xwtpw32.dll
%SYSTEMROO
T%
\system32\DevicePairing.dll
%SYSTEMROO
T%
\system32\xwizards.dll
%SYSTEMROO
T%
dfrgui.exe
\system32\defragproxy.dll
%SYSTEMROO
T%
\system32\windows.storage.dll
%SYSTEMROO
T%
\system32\propsys.dll
%SYSTEMROO
T%
\system32\windowscodecs.dll
%SYSTEMROO
T%
directxdatabaseupdater.exe
\system32\npmproxy.dll
%SYSTEMROO
T%
DiskSnapshot.exe
\system32\rsaenh.dll
%SYSTEMROO
T%
DpiScaling.exe
\system32\ndfapi.dll
%SYSTEMROO
T%
\system32\IPHLPAPI.DLL
%SYSTEMROO
T%
\system32\shell32.dll
%SYSTEMROO
T%
\system32\wdi.dll
环境变量
可执⾏⽂件
DLL（相对于变量）
%SYSTEMROO
T%
driverquery.exe
\system32\wbemsvc.dll
%SYSTEMROO
T%
\system32\wbemprox.dll
%SYSTEMROO
T%
\system32\fastprox.dll
%SYSTEMROO
T%
explorer.exe
\system32\explorerframe.dll
%SYSTEMROO
T%
\system32\cscui.dll
%SYSTEMROO
T%
\system32\Windows.Storage.Search.
dll
%SYSTEMROO
T%
\system32\propsys.dll
%SYSTEMROO
T%
\system32\StructuredQuery.dll