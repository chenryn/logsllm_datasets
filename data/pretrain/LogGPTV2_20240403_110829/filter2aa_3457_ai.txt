certificate’s private key, the root certificate, any intermediate certificates, and the domain 
certificate provided by your SSL certificate vendor. Cobalt Strike expects to find the Java 
Keystore file in the same folder as your Malleable C2 profile. 
https-certificate { 
set keystore "domain.store"; 
set password "mypassword"; 
} 
The parameters to use a valid SSL certificate are: 
Option 
Example 
Description 
keystore 
domain.store 
Java Keystore file with certificate information 
password 
mypassword 
The password to your Java Keystore 
Here are the steps to create a Valid SSL certificate for use with Cobalt Strike’s Beacon: 
1. Use the keytool program to create a Java Keystore file. This program will ask “What is your 
first and last name?” Make sure you answer with the fully qualified domain name to your Beacon 
server. Also, make sure you take note of the keystore password. You will need it later. 
$ keytool -genkey -keyalg RSA -keysize 2048 -keystore domain.store 
2. Use keytool to generate a Certificate Signing Request (CSR). You will submit this file to your 
SSL certificate vendor. They will verify that you are who you are and issue a certificate. Some 
vendors are easier and cheaper to deal with than others. 
$ keytool -certreq -keyalg RSA -file domain.csr -keystore domain.store 
3. Import the Root and any Intermediate Certificates that your SSL vendor provides.  
$ keytool -import -trustcacerts -alias FILE -file FILE.crt -keystore 
domain.store 
4. Finally, you must install your Domain Certificate.  
$ keytool -import -trustcacerts -alias mykey -file domain.crt -keystore 
domain.store 
And, that’s it. You now have a Java Keystore file that’s ready to use with Cobalt Strike’s 
Beacon. 
www.cobaltstrike.com/
/
78/
11.9 Profile Variants 
Malleable C2 profile files, by default, contain one profile. It’s possible to pack variations of the 
current profile by specifying variant blocks for http-get, http-post, http-stager, and https-
certificate. 
A variant block is specified as [block name] “variant name” { … }. Here’s a variant http-get 
block named “My Variant”: 
http-get "My Variant" { 
client { 
parameter "bar" "blah"; 
A variant block creates a copy of the current profile with the specified variant blocks replacing 
the default blocks in the profile itself. Each unique variant name creates a new variant profile. 
You may populate a profile with as many variant names as you like. 
Variants are selectable when configuring an HTTP or HTTPS Beacon listener. Variants allow 
each HTTP or HTTPS Beacon listener tied to a single team server to have network IOCs that 
differ from eachother. 
11.10 Code Signing Certificate 
Attacks -> Packages -> Windows Executable and Windows Executable (S) give you the 
option to sign an executable or DLL file. To use this option, you must specify a Java Keystore 
file with your code signing certificate and private key. Cobalt Strike expects to find the Java 
Keystore file in the same folder as your Malleable C2 profile. 
code-signer { 
set keystore "keystore.jks"; 
set password "password"; 
set alias    "server"; 
} 
The code signing certificate settings are: 
Option 
Example 
Description 
alias 
server 
The keystore’s alias for this certificate 
digest_algorithm SHA256 
The digest algorithm 
keystore 
keystore.jks 
Java Keystore file with certificate information 
password 
mypassword 
The password to your Java Keystore 
timestamp 
false 
Timestamp the file using a third-party service  
timestamp_url 
http://timestamp.digicert.com 
URL of the timestamp service 
www.cobaltstrike.com/
/
79/
11.11 Which is more dangerous, Malleable C2 or a swimming pool? 
The answer? Both. Malleable C2 gives you a new level of control over your network and host 
indicators. With this power also comes responsibility. Malleable C2 is an opportunity to make a 
lot of mistakes too. Here are a few things to think about when you customize your profiles: 
1. Each Cobalt Strike instance uses one profile at a time. If you change a profile or load a new 
profile, previously deployed Beacons cannot communicate with you. 
2. Always stay aware of the state of your data and what a protocol will allow when you develop a 
data transform. For example, if you base64 encode metadata and store it in a URI parameter—
it’s not going to work. Why? Some base64 characters (+, =, and /) have special meaning in a 
URL. The c2lint tool and Profile Compiler will not detect these types of problems.  
3. Always test your profiles, even after small changes. If Beacon can’t communicate with you, 
it’s probably an issue with your profile. Edit it and try again. 
4. Trust the c2lint tool. This tool goes above and beyond the profile compiler. The checks are 
grounded in how this technology is implemented. If a c2lint check fails, it means there is a real 
problem with your profile. 
www.cobaltstrike.com/
/
80/
12. Malleable PE, Process Injection, and Post Exploitation 
12.1 Overview 
Malleable C2 profiles are more than communication indicators. Malleable C2 profiles also 
control Beacon’s in-memory characteristics, determine how Beacon does process injection, and 
influence Cobalt Strike’s post-exploitation jobs too. This chapter documents these extensions to 
the Malleable C2 language. 
12.2 PE and Memory Indicators 
The stage block in Malleable C2 profiles controls how Beacon is loaded into memory and edit 
the content of the Beacon DLL.  
stage { 
set userwx "false";  
set compile_time "14 Jul 2009 8:14:00"; 
set image_size_x86 "512000"; 
set image_size_x64 "512000"; 
set obfuscate "true"; 
transform-x86 { 
prepend "\x90\x90"; 
strrep "ReflectiveLoader" "DoLegitStuff"; 
} 
transform-x64 { 
# transform the x64 rDLL stage 
} 
stringw "I am not Beacon"; 
} 
The transform-x86 and transform-x64 blocks pad and transform Beacon’s Reflective DLL 
stage. These blocks support three commands: prepend, append, and strrep. 
The prepend command inserts a string before Beacon’s Reflective DLL. The append command 
adds a string after the Beacon Reflective DLL. Make sure that prepended data is valid code for 
the stage’s architecture (x86, x64). The c2lint program does not have a check for this. The strrep 
command replaces a string within Beacon’s Reflective DLL.  
The stage block accepts commands that add strings to the .rdata section of the Beacon DLL. The 
string command adds a zero-terminated string. The stringw command adds a wide (UTF-16LE 
encoded) string. The data command adds your string as-is. 
www.cobaltstrike.com/
/
81/
The stage block accepts several options that control the Beacon DLL content and provide hints to 
change the behavior of Beacon’s Reflective Loader: 
Option 
Example 
Description 
allocator 
HeapAlloc 
Set how Beacon's Reflective Loader allocates 
memory for the agent. Options are: HeapAlloc, 
MapViewOfFile, and VirtualAlloc.  
cleanup 
false 
Ask Beacon to attempt to free memory 
associated with the Reflective DLL package that 
initialized it. 
magic_mz_x86 MZRE 
Override the first bytes (MZ header included) of 
Beacon's Reflective DLL. Valid x86 instructions 
are required. Follow instructions that change 
CPU state with instructions that undo the 
change. 
magic_mz_x64 MZAR 
Same as magic_mz_x86; affects x64 DLL 
magic_pe 
PE 
Override the PE character marker used by 
Beacon's Reflective Loader with another value. 
module_x86 
xpsservices.dll 
Ask the x86 ReflectiveLoader to load the 
specified library and overwrite its space instead 
of allocating memory with VirtualAlloc. 
module_x64 
xpsservices.dll 
Same as module_x86; affects x64 loader 
obfuscate 
false 
Obfuscate the Reflective DLL’s import table, 
overwrite unused header content, and ask 
ReflectiveLoader to copy Beacon to new 
memory without its DLL headers. 
sleep_mask 
false 
Obfuscate Beacon, in-memory, prior to sleeping 
smartinject 
false 
Use embedded function pointer hints to 
bootstrap Beacon agent without walking 
kernel32 EAT 
stomppe 
true 
Ask ReflectiveLoader to stomp MZ, PE, and 
e_lfanew values after it loads Beacon payload 
userwx 
false 
Ask ReflectiveLoader to use or avoid RWX 
permissions for Beacon DLL in memory 
Cloning PE Headers 
The stage block has several options that change the characteristics of your Beacon Reflective 
DLL to look like something else in memory. These are meant to create indicators that support 
analysis exercises and threat emulation scenarios. 
Option 
Example 
Description 
checksum 
0 
The CheckSum value in Beacon’s PE header 
compile_time 
14 July 2009 8:14:00 
The build time in Beacon’s PE header 
entry_point 
92145 
The EntryPoint value in Beacon’s PE header 
image_size_x64 512000 
SizeOfImage value in x64 Beacon’s PE header  
www.cobaltstrike.com/
/
82/
image_size_x86 512000 
SizeOfImage value in x86 Beacon’s PE header 
name 
beacon.x64.dll 
The Exported name of the Beacon DLL 
rich_header 
Meta-information inserted by the compiler 
Cobalt Strike’s Linux package includes a tool, peclone, to extract headers from a DLL and 
present them as a ready-to-use stage block: 
./peclone [/path/to/sample.dll] 
In-memory Evasion and Obfuscation 
Use the stage block’s prepend command to defeat analysis that scans the first few bytes of a 
memory segment to look for signs of an injected DLL. If tool-specific strings are used to detect 
your agents, change them with the strrep command.  
If strrep isn’t enough, set sleep_mask to true. This directs Beacon to obfuscate itself in-memory 
before it goes to sleep. After sleeping, Beacon will de-obfuscate itself to request and process 
tasks. The SMB and TCP Beacons will obfuscate themselves while waiting for a new connection 
or waiting for data from their parent session. 
Decide how much you want to look like a DLL in memory. If you want to allow easy detection, 
set stomppe to false. If you would like to lightly obfuscate your Beacon DLL in memory, set 
stomppe to true. If you’d like to up the challenge, set obfuscate to true. This option will take 
many steps to obfuscate your Beacon stage and the final state of the DLL in memory.  
One way to find memory injected DLLs is to look for the MZ and PE magic bytes at their 
expected locations relative to eachother. These values are not usually obfuscated as the reflective 
loading process depends on them. The obfuscate option does not affect these values. Set 
magic_pe to two letters or bytes that mark the beginning of the PE header. Set magic_mz_x86 
to change these magic bytes in the x86 Beacon DLL. Set magic_mz_x64 for the x64 Beacon 
DLL. Follow instructions that change CPU state with instructions that undo the change. For 
example, MZ is the easily recognizable header sequence, but it's also valid x86 and x64 
instructions. The follow-on RE (x86) and AR (x64) are valid x86 and x64 instructions that undo 
the MZ changes. These hints will change the magic values in Beacon's Reflective DLL package 
and make the reflective loading process use the new values. 
Figure 46. Disassembly of default module_mz_x86 value 
www.cobaltstrike.com/
/
83/
Set userwx to false to ask Beacon’s loader to avoid RWX permissions. Memory segments with 
these permissions will attract extra attention from analysts and security products. 
By default, Beacon’s loader allocates memory with VirtualAlloc. Use the allocator option to 
change this. The HeapAlloc option allocates heap memory for Beacon with RWX permissions. 
The MapViewOfFile allocator allocates memory for Beacon by creating an anonymous memory 
mapped file region in the current process. Module stomping is an alternative to these options and 
a way to have Beacon execute from coveted image memory. Set module_x86 to a DLL that is 
about twice as large as the Beacon payload itself. Beacon’s x86 loader will load the specified 
DLL, find its location in memory, and overwrite it. This is a way to situate Beacon in memory 
that Windows associates with a file on disk. It’s important that the DLL you choose is not needed 
by the applications you intend to reside in. The module_x64 option is the same story, but it 
affects the x64 Beacon. 
If you’re worried about the Beacon stage that initializes the Beacon DLL in memory, set cleanup 
to true. This option will free the memory associated with the Beacon stage when it’s no longer 
needed. 
12.3 Process Injection 
The process-inject block in Malleable C2 profiles shapes injected content and controls process 
injection behavior for the Beacon payload. 
process-inject { 
# set how memory is allocated in a remote process 
set allocator "VirtualAllocEx"; 
# shape the memory characteristics and content 
set min_alloc "16384"; 
set startrwx  "true"; 
set userwx    "false"; 
transform-x86 { 
prepend "\x90\x90"; 
} 
transform-x64 { 
# transform x64 injected content 
} 
# determine how to execute the injected code 
execute { 
CreateThread "ntdll.dll!RtlUserThreadStart"; 
SetThreadContext; 
RtlCreateUserThread; 
www.cobaltstrike.com/
/
84/
} 
} 
The process-inject block accepts several options that control the process injection process in 
Beacon: 
Option 
Example 