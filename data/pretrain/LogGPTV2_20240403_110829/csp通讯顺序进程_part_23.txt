doub.leftje->(doub.right?x-→.-)
(n:(m:P/Q)/R)
m.c.t
（关于D0UBLE可见4.2节X2)
151
口
---
## Page 175
X5名为st的堆栈
予y。当队列是空时，队列不响应后一操作，系统就可能死锁。
尾增添值u，用输入9.right?y从队列头移走一个元素，并将其值赋
这个附庸进程是一个名为g的无界队列。Q用输出q.left!向队列
X4 (4:BUFFER/Q)
见2.6.2节X2。如
在主进程Q中，可使用输入和输出对m进行赋值、读出和更新，详
X3常见的程序变元也可由附庸进程模拟，设变元名为m，则模
QUADRUPLE的这个版本类似于4.4节X1，但不具有双倍缓冲
这个进程本身也可作为一个子程序
用不同的通道。
当堆栈非空时，选取第一种可能；空时，选取第二种可能，就避
栈顶值。在取出栈项值时，要处理可能出现的空栈情形，故可用
在主进程Q中，st,left{u可用于压大值u，而st,right?x可弹出
拟作
兔了死锁。
选择结构
功能。
m:=m+3;P实施为(m.right?y-m,left!(y+3)→P)
m:=3; P
152
附庸进程还可用来实施，比之简单变元更复杂的数据结构。
具有多个通道的附庸进程可供多个并发进程调用，但要求各
(st,right?x→Q1(x)|st.empty→Q2)
实施为（m.right?x→P)
实施为（m.left13→P)
quad:QUADRUPLE/Q
(st:STACK /Q)
m:VAR/Q
doub.right?y-→doub.left1y
doub,right?z-right!z-→X))
（见4,2节X10）
（见4.2节X9）
口
门
口
---
## Page 176
2.6.2节X4中的集合，但它可贮存任何种类的消息
FAC的附庸进程和它自身同构。
看，它类似于X2中的QUADRUPLE子程序。唯一的不同点是，
X7阶乘
层除外）都会产生一个新的局部子程序。
只是R的这种要求不会立即满足，而要推迟到Q再输出一个值。
注意，即使R试图从空缓存输入消息，也不一定会造成系统死锁；
Q使用通道b.left输出，而R使用通道b.right输人。构成
构的一个单一的成份，并且宣布一个新的局部附庸数据结构来处
子程序FAC使用通道left和right和其调用进程间传递参数和结
递同样的数值。这就完全不符合我们的设计要求了。）
它们两者的字母表中出现，叉由I的定义，要求它们总是同时传
传递的值；这样，当R的输入尚未就绪时，Q的输出仍可进行。
了一个已经输入过的元素，就输出YES，否则输出 NO。这很象
X8无界的有穷集
理其余的成份。
果；而使用f.left和f.right和它的附庸进程f通信。从这些方面
X6进程Q向R传送一串值；并用附庸的、名为b的缓存进程缓存
无界的数据结构就比较新鲜了。每个递归层次上，.存储了数据结
但比较戚烦的记号法重新表示了一下。用递归式和附磨进程定义
（如果Q和R使用同一个通道和缓存通信，那末这个通道必须在
阶乘是一个用俗的递归定义的例子，只是使用了一种陌生的，
附庸算子亦可用于定义递归子程序。每层递归调用（最后一
SET= left?x-→right1NO-→(rest:SET/LOOP(x))
用进程来实施一个集合，它从左通道上输入元素。如果输入
FAC=μX,left?n→(if n=0 then (right1l→X)
elsa(f:X/(f.left!(n-1)→f.right?y
(b:BUFFER/(QR))
→right!(nxy)-x)))
153
口
---
## Page 177
只有主进程才能对附庸进程做出选择
L2(m:P/(b1e-→Q))=(b1e-→(n:P/Q))
下，在b上通信
若b为不带有名字m的通道，则主进程可在不影响附庸进程情况
L7B
程及附庸进程间每个方向上的通信都被屏蔽
4.5.1法则
LOOP的设计则留作练习。
L1A 
另一个则贮存大于它的元案。树的外部描逃同于X8。合
并且建立两个附庸树，一个用于贮存小于这个最先元素的元素，
依赖于元素间的某种全序≤。每个节点上保存最早登入的元素，
X9二叉树
从右通道上发回YES。否则将新元素传给rest，由它贮存起来。
上逃过程。
LOOP是用于输入集合的其它元索。若新输入的元素等于x，立即
后建立一个附庸进程rest，它将贮存集合中除x外的其它元素。
其中
154
支配进程及其附庸间通信的法则如下。第一个法则说明主进
μX.left?y-→(if y=x then right1YES-→X
L00P(x)=
用二叉树可得到集合的另一种效率更高的表示方法，二叉树
开始时集合为空；输人第一个元素x后，立即输出NO。然
(m:(d1u→P))/(m.d?x-→Q(x))=(m:P)/Q(u)
(m:(c7x=P(x)))/(m.c1u-=Q)=(m:P(v))/Q
TREE- leftix→right1NO-
else (rest.left!y->rest.right?z-
right1z-X))
口
口
---
## Page 178
使用L1和L2，经一系列步骤，可算出SETIs的值
X1SET的一个典型迹是
不能产生了。
为迹是如何产生的。更重要的是，它还说明稍有改动的迹为何就
义的进程是如何动作的。下面的例子中，说明一个特定的进程行
定所定义的进程能否正常工作。为减少这种疑虑，需要说男所定
L5若m和n是不同的名字
附庸进程的书写次序通常是不起作用的
L4 m:P/(m:Q/R)=(m:Q/R)
两个同名的附进程中，必有一个是不可能调用的
L3(m:(c?x-P1(x)|d?y-→P2(y)))/(m.c10-→Q)
SET Kleft.1, right.NO,left.2>
在使月递归式定义附庸进程时，会使人很吃惊，简直无法肯
举例
((D)d007*-0214461)/((2)4007/118:18a1): 18a1 =
=(rest:(right(NO→(rest:SET /LOOP(2)))
=(rest:SET/rest.left12rest.right? z-right1z
s=
SET Kleft.1, right.NO>=(rest:SET /LOOP(1))
SET (=right;NO-→(rest:SET /LO0P(1))
/(rest.right?z-→right1z→LD0P(1)))
m:P/(n:Q/R)=n:Q/(m:P/R)
= (m:P1(v) /Q)
-→L00P(1))
155
---
## Page 179
X2的示意图。
部，图4,10是4.5节X1的示意图。
4.5.2连接图
及SETjs~= SET !s
在嵌套附庸进程的示意图中，方框间也多重镶嵌，如4.5节
SET /s= rest:(rest:SET /LO0P(2))/L00P(1)
doub.ler
图4.10
DOUBLE
doub:
doub.righ!
L00P(5))/L00P(2))
I
L00P(1)
口
---
## Page 180
存储分配，
继续工作。传统顺序程序设计中实现递归式的有效方法是堆栈式
果在网络操作过程中，越出了给定的层次界限，那么网络就不能
然必须先将递归式展开到一定层次，然后才能启动有关网络；
代表集成线路，箭头代表集成块间的连线。在实现递归式时，
图4.13。类似地，TREE(4.5节X9)可画作图4.14。
X1小的集合的早期的活动史可分阶段地表示在图4,12中。
活动过程中，它是如何按人们要求自动地展开的。这样，4.5.1节
的。好在对于进程而言，不需要一幅完成的图，只要说明在它的
一个画架挂着一幅完成了的画，“…。实际上是无法画完这幅画
的阿，在工作室的画架上挂着这幅完成了的画，而这幅画上叉有
连接图告诉人们如何由硬部件构成相应的网络，其中的方框
如对方框的嵌套图不威兴趣，则可月线性结构表示集合，见
一个递归进程是自嵌套的一幅图，就象一幅画着面家工作室
，但硬件网络的动态分配和重构向题就远为困难了。递
quad.ief
quod:
I1l
图4,11
doub:DOUB
L00P
y8!r'ponb
iT
157
当
---
## Page 181
SET/Uef.1. righ.NO)
resr.
SET
esr.lef
LO0P(2)
LOOP(1)
LOOP(!)
rest:SET
resr.rigft
4.
---
## Page 182
那些能理解和能使用递归式的人带来精神享受。
归式的存在价值在于，
它有助于算法的发明和设计；至少还可给
LO0P(y)
LOOP()
LO0P(2)
4.14
.1
---
## Page 183
就按Q动作。如果P不终止，则(P；Q)也不终止。
亦是一个进程。这个进程先按P动作；当P成功终止后，（P；Q)
务。设P和Q是具有相同字母表的顺序进程，它们的顺序组合
X1只向一位顾客出售巧克力或太妃糖，然后就终止的售货机为
和往常一样，我们经常略写字母表下标。
是无效的。SKIP是一个什么都不做，只表示成功终止的进程，
务，
有
许出现V，即若V∈B，则
√是其执行的最后一个事件。因此，我们规定在选择结构中不允
用符号√记之。顺序进程是字母表中包含有√的一种进程，而且
为了区分STOP和终止，我们将成功终止看作是“种特殊的事件
停下来不去做任何更多的事情。这时称这个进程成功地终止了。
成的。然而，当进程已经完成设计者交付的任务时，它就有理由
用处，多毕不是设计者有意选用的，而是死锁现象或设计错误道
160
其中之一先执行，只有当它成功终止后，才启动另一子任
VMONE=(coin→(choe→SKIP|toffee→SKIP))
举例
STOP是一个从不执行任何动作的进程。这个进程没有多大
在设计进程解决复杂任务时，往往将该任务分成为两个子任
第五章顺 序 进程
αSKIP,=AU(V}
5.1 引1 
(x:B→P(x))
 P,Q 
叫
口
---
## Page 184
X3可为任意多个顾客服务的售货机
很明显，
递归式的特例，给出其定义
X2顺序地为两位顾客服务的售货机
Pidgingol的句子如
它成分的定义形式地给出如下
谓语组成的。一个谓语则是跟有名词子句的动词。名词子句及其
X4一个语言称作Pidgingol，其句子是由名词子句及其后随的
这种语言也许可用作人机间的通信。
。故用来描绘顺序进程的记号也可用来定义简单语言的文法，
序列就称作是进程P的一个句子。P的所有句子称作P所接受的语
这和1.1.3节X3中的VMCT完杀一样。
的原因。
若进程P执行一系列动作后就终止，这串动作所对应的 符号
能按要求不断重复类似动作的进程，称作循环进程：可作为