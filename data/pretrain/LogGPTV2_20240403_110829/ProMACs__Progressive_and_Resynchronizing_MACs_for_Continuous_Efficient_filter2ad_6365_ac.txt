and so on.
Definition 4.2 (Area of Dependency). Consider a ProMAC with an
update function Upd. We say that Upd has (𝑢 + 1)-independence if
the following holds: for any state 𝑠 ∈ S, any key 𝑘 given by Gen,
and any packets 𝑚2, . . . , 𝑚𝑢+1, there exists a state 𝑠′, such that
Upd𝑢+1
(𝑠, 𝑚′, 𝑚2, . . . , 𝑚𝑢+1) = 𝑠′ ∀𝑚′ ∈ M.
(2)
The Area of Dependency of Upd, denoted by ad(Upd), is defined to
be smallest 𝑢 such that Upd has 𝑢 + 1-independence. If all previous
packets might impact the current state, we write ad(Upd) = ∞.
𝑘
Note that this definition requires that the condition must hold for
any state 𝑠 and is not restricted to states sampled by Init. The intent
of this definition is that an update function Upd with ad(Upd) = 𝑢
has the property that the current state is independent from the
(𝑢 + 1)th-last packet. Consequently, each state depends on (at most)
last 𝑢 packets, the initial state, and the current index, as we show
next:
Proposition 4.3. Consider a ProMAC with an update function
Upd with ad(Upd) = 𝑢. Let 𝑖 > 𝑢 and
Upd𝑖
𝑘(𝑠0, 𝑚1, 𝑚2, . . . , 𝑚𝑖) = 𝑠𝑖 .
(3)
for some arbitrary initial state 𝑠0 given by Init, arbitrary key 𝑘 given
by Gen, and arbitrary packets 𝑚1, . . . , 𝑚𝑖. Then, it holds that 𝑠𝑖 and
all follow-up states 𝑠𝑖+1, 𝑠𝑖+2, . . . are independent from the content
of the packets 𝑚1, . . . , 𝑚𝑖−𝑢. In other words, the current state 𝑠𝑖 can
depend only on the initial state, the key, the last 𝑢 − 1 packets and
the index 𝑖. That is, the current state is independent of the last-but-𝑢
packets, and depends only on the initial state and the last 𝑢−1 packets
(or less).
Proof. We show the claim by induction over 𝑖.
Now let 𝑗 ≥ 1 be arbitrary. Since 𝑠𝑖+𝑗 = Upd𝑗
this state is independent from from 𝑚1 as well.
Let 𝑖 := 𝑢+1. Following Definition 4.2, 𝑠𝑖 is independent from 𝑚1.
𝑘(𝑠𝑖, 𝑚𝑖+1, . . . , 𝑚𝑖+𝑗),
Now assume that the claim holds for some 𝑖 ≥ 𝑢+1, i.e., all states
𝑠𝑖, 𝑠𝑖+1, . . . are independent from packets: 𝑚1, . . . , 𝑚𝑖−𝑢. It suffices
to show that states: 𝑠𝑖+1, . . . are independent from 𝑚𝑖−𝑢+1. The fact
that 𝑠𝑖+1 is independent from 𝑚𝑖−𝑢+1 follows from Definition 4.2
(note that the definition is not restricted to states sampled by Init)
and the fact that 𝑠𝑖+2, . . . are independent from 𝑚𝑖−𝑢+1 can be shown
as above for 𝑖 = 𝑢 + 1.
□
A consequence of Proposition 4.3 is that for each 𝑖 ≥ 1, there
exists a procedure Upd[𝑖], such that for all initial states 𝑠0 given
by Init, all keys 𝑘 given by Gen, and all packets 𝑚1, . . . , 𝑚𝑖, it holds
that:
𝑘(𝑠0, 𝑚1, . . . , 𝑚𝑖) = Upd
[𝑖]
𝑘 (𝑠0, 𝑖, 𝑚max{1,𝑖−𝑢+1}, . . . , 𝑚𝑖).
(4)
Upd𝑖
That is, Upd[𝑖] gets as input only the initial state 𝑠0, the index 𝑖,
and the last 𝑢 − 1 packets (or less if 𝑖  𝑢.
𝑖 ≤ 𝑢: The attacker sends a query 𝑄 := [𝑠, 𝑖, 𝑚1, . . . , 𝑚𝑖] ∈ S ×
N × M𝑖 to O where N denotes the set of positive integers
and 𝑠 is some initial state. The oracle O first computes 𝑠′ :=
Upd𝑖−1
(𝑠, 𝑚1, . . . , 𝑚𝑖−1) where we set 𝑠′ := 𝑠 in case of 𝑖 = 1.
Afterwards, it computes 𝑡 := Sig𝑘(𝑠′, 𝑚𝑖), appends it to 𝑄,
and returns 𝑡 to A.
𝑖 > 𝑢: The attacker sends a query 𝑄 := [𝑠, 𝑖, 𝑚1, . . . , 𝑚𝑢] to O. The
oracle determines 𝑠′ := Upd
(𝑠, 𝑚1, . . . , 𝑚𝑢−1) and then
𝑡 := Sig𝑘(𝑠′, 𝑚𝑢). Finally, it appends 𝑡 to the query 𝑄 and
returns 𝑡 to the attacker.
In both cases, the sequence 𝑄 is inserted into Q, i.e., Q := Q ∪ {𝑄}.
We call the elements stored in Q the query sequences.
Eventually, the attacker A outputs potential forgery, in the form
of a sequence: 𝑄∗ := [𝑠∗
𝑟 ] for 𝑟 ≥ 1. The attacker
wins the game if the tags are accepted while not all of them have
been previously queried in this form by the attacker. To make “in
this form” more precise, we need to take a look at all subsequences
from 𝑄∗. These are defined as follows, where 𝑢 := ad(Upd):
𝑢, 𝑡∗
𝑢],
1, . . . , 𝑚∗
1, . . . , 𝑚∗
[𝑢−1]
𝑘
0, 𝑚∗
1, 𝑡∗
𝑘
𝑟 , 𝑡∗
0, 1, 𝑚∗
Q∗ := {[𝑠∗
1, 𝑡∗
[𝑠∗
0, 𝑢 + 1, 𝑚∗
[𝑠∗
0, 𝑟, 𝑚∗
0, 𝑢 − 1, 𝑚∗
𝑢+1, 𝑡∗
𝑢+1], . . . ,
𝑟 , 𝑡∗
𝑟 ]}.
2The case of ad(Upd) = ∞ will be discussed at the end.
1], . . . , [𝑠∗
2, . . . , 𝑚∗
𝑟−𝑢+1, . . . , 𝑚∗
We call the elements of Q∗ the forgery sequences. Note that for each
Q∗ that also appears in Q, it holds that the attacker already knew
that this combination of initial state, index, and packets leads to
the respective tag. Thus, the attacker wins if at least one of these
forgery sequence has not been asked before, i.e., is not equal to a
query sequence stored in Q. We denote forgery sequences that are
not part of Q as fresh forgery sequence. Thus, the winning condition
can be reformulated to mean that an attacker produces a packet
stream with associated tags, such that: (i) all tags are accepted, and
(ii) at least one forgery sequence is fresh, i.e., Q∗ ⊈ Q.
We define a progressive MAC to be (𝑞, Δ, 𝜖)-secure if no adver-
sary that makes at most 𝑞 Sig-queries can succeed in the above
experiment to generate Δ fresh forgery sequences with probability
above 𝜖, i.e.,
𝑃𝑟 [A wins] ≤ 𝜀.
(5)
We say that the scheme is (𝑞, 𝜖)-secure if the attacker can freely
choose the number Δ ≥ 1 of fresh sequences.
The Case of ad(Upd) = ∞. The treatment of the case ad(Upd) =
∞ is quite similar. In a nutshell, the difference is that the queries
contain all 𝑖 packets and not the last 𝑢 packets only. For instance,
the forgery sequences are [𝑠∗
𝑖 ] for 𝑖 = 1, . . . , 𝑟.
1, . . . , 𝑚∗
0, 𝑖, 𝑚∗
𝑖 , 𝑡∗
4.4 Relation to Classical MACs and
Duplex-based Constructions
Before discussing concrete ProMACs instantiations of ProMACs in
the next section, we note that the definition (including the notion
of security) extends the concept of classical MACs that operates on
M and also stateful MACs as duplex-based constructions.
essentially ignoring the internal state. That is we set S = {𝑠0} for
some dummy value 𝑠0 and define Upd𝑘(𝑠0, 𝑚) := 𝑠0 for any packet
More precisely, let (cid:101)𝑀 denote a classical MAC with algorithms
(cid:101)𝑀.Gen, (cid:101)𝑀.Sig, and (cid:101)𝑀.Vrfy. We define a ProMAC 𝑀 based on (cid:101)𝑀 by
𝑚. Finally, we set 𝑀.Gen := (cid:101)𝑀.Gen, 𝑀.Sig𝑘(𝑠0, 𝑚) := (cid:101)𝑀.Sig𝑘(𝑚),
and 𝑀.Vrfy𝑘(𝑠0, 𝑚, 𝑡) := (cid:101)𝑀.Vrfy𝑘(𝑚, 𝑡) for all keys 𝑘 and all packets
equivalent to (cid:101)𝑀.
𝑚. Note that ad(Upd) = 1, i.e., current state depends only on the
current packet. Consequently, all query sequences stored during
the security game have the form [𝑠0, 𝑚, 𝑡] where 𝑠0 can be ignored.
Thus, both the working principle and security of 𝑀 is effectively
On the other hand, if we set ad(Upd) = ∞, i.e., each tag de-
pends on all packets so far, we have a stateful MAC similar to the
duplex-based constructions. In that sense, ProMACs can be seen as
a tradeoff between both constructions.
Finally, we stress that a ProMAC can be expressed as a classical,
deterministic MAC with packets of the form: [𝑠, 𝑖, 𝑚1, . . . , 𝑚min{𝑢,𝑖}]
(see Definition of Sig-queries in Section 4.3.3). In particular, for each
such query the resulting tag there exists exactly one tag. Using
the notions and arguments from [5] (which also considers MACs
that operate on packets of varying lengths), it follows that: (i) the
security definition given in Section 4.3 captures SUF-1 (strong un-
forgeability with single access to a verification algorithm), and (ii)
SUF-1 implies SUF-m (strong unforgeability with multiple access
to a verification algorithm). Therefore, it is unnecessary to define
verification queries in the security game.
𝑡𝑖
sig
𝑘′′
𝐹
𝑚𝑖
]
𝑢
,
𝑖
[
˜𝑠
𝑖
𝑠
0
˜𝑠
upd
𝑘′
𝐹
++
𝑖
𝑡𝑖+1
sig
𝑘′′
𝐹
𝑚𝑖+1
]
𝑢
,
1
+
𝑖
[
˜𝑠
1
+
𝑖
𝑠
0
˜𝑠
upd
𝑘′
𝐹
++
1
+
𝑖
0
˜
𝑠
𝑖
Figure 3: Core concept of the ProMAC instantiation Whips, with state update Upd and tag generation Sig realised through one
PRF each.
5 WHIPS
In this section, we present a concrete ProMACs instantiation, dubbed
sig
Whips 3. It uses two pseudorandom functions (PRFs) 𝐹
𝑘′′
as building blocks and allows one to freely choose the tag size. This
makes them compelling candidates for wireless communication.
To achieve high bandwidth efficiency, the practical constructions
employ a small tag space, i.e., the tag length 𝜏 is small (which re-
sembles simple truncation). Moreover, it allows re-synchronization
after 𝑢 packets.4 To this end, the current state is composed of a
counter and 𝑢 so-called substates where one packet determines one
substate.
and 𝐹
upd
𝑘′
5.1 Specification
We start by defining the sets:
• M := {0, 1}𝜇 - the packet space
• K := {0, 1}𝜅upd+𝜅sig - the key space
• S := {0, 1}𝛾+(𝑢+1)·𝜎 - the state space with 𝛾 being the length
• T := {0, 1}𝜏 - the tag space
of a counter and 𝜎 being the length of substates
Whips maintains internal state 𝑠𝑖 composed of: counter 𝑖, initial
substate ˜𝑠0 ∈ {0, 1}𝜎, and 𝑢 previous substates ˜𝑠𝑖−𝑢, . . . , ˜𝑠𝑖−𝑢 ∈
{0, 1}𝜎. To simplify the description, we define the term ˜𝑠[𝑖,𝑢] ∈
{0, 1}𝑢·𝜎 for 𝑖 ≥ 0 as:
˜𝑠[𝑖,𝑢] :=
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
˜𝑠𝑖−𝑢+1, ˜𝑠𝑖−𝑢+1, . . . , ˜𝑠𝑖
˜𝑠0, . . . , ˜𝑠0
𝑢−(𝑖+1) times
, ˜𝑠0, ˜𝑠1, . . . , ˜𝑠𝑖
, 𝑖 − 𝑢 + 1 ≥ 0
, else
.
(6)
Using this, internal state is defined as:
𝑠𝑖 = (𝑖, ˜𝑠0, ˜𝑠[𝑖,𝑢]),
(7)
where 𝑠0 is the initial state. In each round, the next packet 𝑚𝑖+1 is
processed to compute: (i) the next state 𝑠𝑖+1, and (ii) the next tag
sig