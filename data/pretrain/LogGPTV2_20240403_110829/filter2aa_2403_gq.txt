r0,r2,r3 
          BL    
||f1|| 
          MOV   
r12,r0 
          MOV   
r0,r2 
          BL    
||f1|| 
          LSR   
r2,r2,r0 
|L0.196| 
          MOV   
r0,r3 
          BL    
||f1|| 
          LSR   
r0,r3,r0 
          CMP   
r2,r0 
          EORHI 
r1,r2,r0 
          EORHI 
r0,r0,r1 
          EORHI 
r2,r1,r0 
          BEQ   
|L0.240| 
          CMP   
r2,#1 
          SUBNE 
r3,r0,r2 
          BNE   
|L0.196| 
|L0.240| 
          LSL   
r0,r2,r12 
          POP   
{pc} 
          ENDP 
100.5.3  GCC 4.6.3 for Raspberry Pi（ARM mode） 
f: 
          subs  
r3, r0, #0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 100 章  中等难度练习题 
889 
          beq   
.L162 
          cmp   
r1, #0 
          moveq 
r1, r3 
          beq   
.L162 
          orr   
r2, r1, r3 
          rsb   
ip, r2, #0 
          and   
ip, ip, r2 
          cmp   
r2, #0 
          rsb   
r2, r3, #0 
          and   
r2, r2, r3 
          clz   
r2, r2 
          rsb   
r2, r2, #31 
          clz   
ip, ip 
          rsbne 
ip, ip, #31 
          mov   
r3, r3, lsr r2 
          b     
.L169 
.L171: 
          eorhi 
r1, r1, r2 
          eorhi 
r3, r1, r2 
          cmp   
r3, #1 
          rsb   
r1, r3, r1 
          beq   
.L167 
.L169: 
          rsb   
r0, r1, #0 
          and   
r0, r0, r1 
          cmp   
r1, #0 
          clz   
r0, r0 
          mov   
r2, r0 
          rsbne 
r2, r0, #31 
          mov   
r1, r1, lsr r2 
          cmp   
r3, r1 
          eor   
r2, r1, r3 
          bne   
.L171 
.L167: 
          mov   
r1, r3, asl ip 
.L162: 
          mov   
r0, r1 
          bx    
lr 
100.5.4  Optimizing GCC 4.9.1（ARM64） 
指令清单 100.6  Optimizing GCC 4.9.1（ARM64） 
f: 
          mov   
w3, w0 
          mov   
w0, w1 
          cbz   
w3, .L8 
          mov   
w0, w3 
          cbz   
w1, .L8 
          mov   
w6, 31 
          orr   
w5, w3, w1 
          neg   
w2, w3 
          neg   
w7, w5 
          and   
w2, w2, w3 
          clz   
w2, w2 
          sub   
w2, w6, w2 
          and   
w5, w7, w5 
          mov   
w4, w6 
          clz   
w5, w5 
          lsr   
w0, w3, w2 
          sub   
w5, w6, w5 
          b     
.L13 
.L22: 
          bls   
.L12 
          eor   
w1, w1, w2 
          eor   
w0, w1, w2 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
890 
逆向工程权威指南（下册） 
.L12: 
          cmp   
w0, 1 
          sub   
w1, w1, w0 
          beq   
.L11 
.L13: 
          neg   
w2, w1 
          cmp   
w1, wzr 
          and   
w2, w2, w1 
          clz   
w2, w2 
          sub   
w3, w4, w2 
          csel  
w2, w3, w2, ne 
          lsr   
w1, w1, w2 
          cmp   
w0, w1 
          eor   
w2, w1, w0 
          bne   
.L22 
.L11: 
          lsl   
w0, w0, w5 
.L8: 
          ret 
100.5.5  Optimizing GCC 4.4.5（MIPS） 
指令清单 100.7  Optimizing GCC 4.4.5（MIPS）（IDA） 
f: 
var_20         
= -0x20 
var_18         
= -0x18 
var_14         
= -0x14 
var_10         
= -0x10 
var_C          
= -0xC 
var_8          
= -8 
var_4          
=-4 
lui      $gp, (__gnu_local_gp >> 16) 
addiu    $sp, -0x30 
la       $gp, (__gnu_local_gp & 0xFFFF) 
sw      $ra, 0x30+var_4($sp) 
sw       $s4, 0x30+var_8($sp) 
sw       $s3, 0x30+var_C($sp) 
sw       $s2, 0x30+var_10($sp) 
sw       $s1, 0x30+var_14($sp) 
sw       $s0, 0x30+var_18($sp) 
sw       $gp, 0x30+var_20($sp) 
move    $s0, $a0 
beqz    $a0, loc_154 
move    $s1, $a1 
bnez    $a1, loc_178 
or      $s2, $a1, $a0 
move    $s1, $a0 
loc_154:                                        # CODE XREF: f+2C 
lw       $ra, 0x30+var_4($sp) 
move    $v0, $s1 
lw      $s4, 0x30+var_8($sp) 
lw      $s3, 0x30+var_C($sp) 
lw      $s2, 0x30+var_10($sp) 
lw      $s1, 0x30+var_14($sp) 
lw      $s0, 0x30+var_18($sp) 
jr      $ra 
addiu    $sp, 0x30 
loc_178:                                        # CODE XREF: f+34 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 100 章  中等难度练习题 
891 
lw      $t9, (__clzsi2 & 0xFFFF)($gp) 
negu    $a0, $s2 
jalr    $t9 
and     $a0, $s2 
lw      $gp, 0x30+var_20($sp) 
bnez    $s2, loc_20C 
li      $s4, 0x1F 
move    $s4, $v0 
loc_198:                                        # CODE XREF: f:loc_20C 
lw      $t9, (__clzsi2 & 0xFFFF)($gp) 
negu    $a0, $s0 
jalr    $t9 
and     $a0, $s0 
nor     $v0, $zero, $v0 
lw      $gp, 0x30+var_20($sp) 
srlv    $s0, $v0 
li      $s3, 0x1F 
li      $s2, 1 
loc_1BC:                                        # CODE XREF: f+F0 
lw      $t9, (__clzsi2 & 0xFFFF)($gp) 
negu    $a0, $s1 
jalr    $t9 
and     $a0, $s1 
lw      $gp, 0x30+var_20($sp) 
beqz    $s1, loc_1DC 
or      $at, $zero 
subu    $v0, $s3, $v0 
loc_1DC:                                        # CODE XREF: f+BC 
srlv    $s1, $v0 
xor     $v1, $s1, $s0 
beq     $s0, $s1, loc_214 
sltu    $v0, $s1, $s0 
beqz    $v0, loc_1FC 
or      $at, $zero 
xor     $s1, $v1 
xor     $s0, $s1, $v1 
loc_1FC:                                       # CODE XREF: f+D8 
beq     $s0, $s2, loc_214 
subu    $s1, $s0 
b        loc_1BC 
or       $at, $zero 
loc_20C:                                        # CODE XREF: f+78 
b        loc_198 
subu    $s4, $v0 
loc_214:                                        # CODE XREF: f+D0 
                                                  # f:loc_1FC 
lw      $ra, 0x30+var_4($sp) 
sllv    $s1, $s0, $s4 
move    $v0, $s1 
lw      $s4, 0x30+var_8($sp) 
lw      $s3, 0x30+var_C($sp) 
lw      $s2, 0x30+var_10($sp) 
lw      $s1, 0x30+var_14($sp) 
lw      $s0, 0x30+var_18($sp) 
jr      $ra 
addiu   $sp, 0x30 
100.6  练习题 2.15 
这个程序实现了一种著名的算法。请问，这个算法的名称是什么？ 
在 x86 平台上，程序使用 FPU 进行运算；而在 x64 平台上，程序使用的是 SIMD 指令集。这属于正常
异步社区会员 dearfuture(15918834820) 专享 尊重版权
892 
逆向工程权威指南（下册） 
现象，详细介绍请参见本书第 27 章。 
100.6.1  Optimizing MSVC 2012 x64 
__real@412e848000000000 DQ 0412e848000000000r     ; 1e+006 
__real@4010000000000000 DQ 04010000000000000r     ;4 
__real@4008000000000000 DQ 04008000000000000r     ;3 
__real@3f800000 DD 03f800000r                         ;1 
tmp$1 = 8 
tmp$2 = 8 
f         PROC 