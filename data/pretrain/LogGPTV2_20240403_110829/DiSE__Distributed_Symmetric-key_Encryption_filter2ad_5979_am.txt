Let xj denote the j-th distinct x on which an evaluation/challenge query is made. Suppose
the ﬁrst RO query made on xk is the η-th one. Let us consider the case when η(cid:63) = η. First
of all, pc never returns ⊥ in Step 6. because r is set to ⊥ only for the η(cid:63)-th call and we have
assumed that this call is for the k-th distinct x. Secondly, note that RO returns gβ when
queried on xk and β is associated with xk only.
Let’s consider the two possibilities for y0, y(cid:96)+1, . . . , yt−1. When they are equal to gα0β,
gα(cid:96)+1β, . . ., gαt−1β, respectively, then pc’s return value ¯gi on j = k is equal to H(xk)f (k)(i)
where f (k) is the (t − 1)-degree polynomial that satisﬁes f (k)(0) = α0, f (k)(1) = s1, . . .,
f (k)((cid:96)) = s(cid:96), f (k)((cid:96) + 1) = α(cid:96)+1, . . ., f (k)(t − 1) = αt−1. This is exactly the same polynomial
f as deﬁned in Step 3.. Thus A(cid:48) perfectly simulates Hybk−1A (b) in this case.
it “matches” with f on s1, . . . , s(cid:96). Thus, in this case, A(cid:48) simulates HybkA(b) perfectly.
When y0, y(cid:96)+1, . . . , yt−1 are random, f (k) is a completely random polynomial except that
As a result, when η(cid:63) = η, which happens with probability 1/qH, A(cid:48) distinguishes between
the two possibilities described above with non-negligible probability. Since qH is polynomial
in the security parameter, this breaks the (extended version of) DDH assumption.
52
Now, we claim that the views of any adversary in the games Hyb(qE )A (0) and Hyb(qE )A (1)
are statistically close. Irrespective of whether x(cid:63) is queried in the evaluation phase or not,
a unique (t − 1)-degree polynomial, say f(cid:48), is used for it. f(cid:48) “matches” with any other
polynomial only on 1, . . . , (cid:96), and is completely random otherwise. Adversary is allowed to
make up to g − 1 = t − (cid:96) − 1 evaluation queries on x(cid:63). Thus, it could learn H(x(cid:63))f(cid:48)(i) for
g − 1 additional values of i. In total, information-theoretically, adversary learns the value
λ0,i,S (|S| ≥ t) computed in
i for which adversary has no information. So the product
of f(cid:48) on at most t − 1 points. As a result, the product (cid:81)
the b = 0 case has at least one g(cid:63)
appears random to the adversary, making the b = 0 case indistinguishable from b = 1.
i∈S g(cid:63)
i
C.5 Proof of Theorem 8.2
A strongly secure DPRF needs to be consistent, pseudorandom and correct. Consistency
easily follows from the properties of Shamir’s secret sharing and completeness of NIZK.
Pseudorandomness. The overall approach is the same as the proof of Theorem 8.1 in
Appendix C.4 but due to the presence NIZK and commitments, we need to go through a
couple of hybrids. We will use the zero-knowledge property of NIZKs to simulate proofs and
the trapdoor property of commitments to produce fake commitments.
A(b) be a shorthand for the game PseudoRandΠZK-DDH-DP,A(1κ, b). We ﬁrst
describe this game in detail, highlighting diﬀerences from the game PseudoRandA(b) of Ap-
pendix C.4.
Let PseudoRand(cid:48)
PseudoRand(cid:48)
A(b) :
1. Let G be a cyclic group of order p and g a generator of G. Sample s ←$ Zp and
get (s1, . . . , sn) ← SSS(n, t, p, s). Run Setupcom(1κ) to get ppcom. Compute a com-
:= Com(si, ppcom; ri) by picking ri at random. Send public parameters
mitment γi
pp = (p, g, G, γ1, . . . , γn, ppcom) to A.
2. Get the set of corrupt parties C from A. Without loss of generality assume that C =
{1, . . . (cid:96)}. Send the corresponding secret keys {(s1, r1), . . . , (s(cid:96), r(cid:96))} to A.
3. On an evaluation query (Eval, x, i) for an honest i, compute w := H(x) and hi := wsi.
with the statement stmti: {∃s, r s.t. hi = ws ∧ γi = Com(s, ppcom; r)} and
Run ProveH(cid:48)
witness (si, ri) to obtain a proof πi. Return ((w, hi), πi) to A.
4. On the challenge query (Challenge, x(cid:63), S, ((w, g(cid:63)
out loss of generality assume that S ∩ C = [u]):
1. If A has already made at least t − |C| queries of the form (Eval, x(cid:63),∗), then output
1), π1), . . . , ((w, g(cid:63)
u), πu)) for u ≤ (cid:96) (with-
0 and stop.
(stmti, πi) (cid:54)= 1 for any i ∈ [u], output 0 and stop.
2. Otherwise do as follows:
1. If VerifyH(cid:48)
i := H(x(cid:63))si for i ∈ S \ C.
2. Set g(cid:63)
3. Depending on b do as follows:
1. If b = 0 then compute z :=(cid:81)
2. Else, choose a random z ←$ G.
i∈S g(cid:63)
i
λ0,i,S .
53
3. Send z to A.
5. Continue answering evaluation queries as before, but if A makes a query of the form
(Eval, x(cid:63), i) for some i ∈ [n] \ C and i is the g-th party it contacted, then output 0 and
stop.
6. Receive a guess b(cid:48) from A; output b(cid:48).
First hybrid. Deﬁne a hybrid Hyb(zk)A (b) which is similar to PseudoRand(cid:48)
A(b) except that real
proofs πi in Step 3. and 5. are replaced with simulated proofs. (As a result, the witness
(si, ri) is not needed anymore.) PseudoRand(cid:48)
A(b) is indistinguishable from Hyb(zk)A (b) for any
PPT A and b ∈ {0, 1} due to the zero-knowledge property of NIZKs.
Second hybrid. Deﬁne a hybrid Hyb(com)A
− In step 1., SimSetup of TDC is run to get (pp(cid:48)
com in the
public parameters, and γi becomes a commitment to some ﬁxed value s(cid:63) for all i ∈ [n].
com, τcom), ppcom is replaced by pp(cid:48)
(b) which is similar to the previous one except:
− In step 2., SimOpen(pp(cid:48)
(s(cid:96), r(cid:48)
(cid:96)) is sent to A.
com, τcom, si, (s(cid:63), ri)) is run to get randomness r(cid:48)
i, and (s1, r(cid:48)
1), . . . ,
(b) for any PPT A and b ∈ {0, 1}
One can see that Hyb(zk)A (b) is indistinguishable from Hyb(com)A
due to the trapdoor property of commitments.
Reduction. We now show that if a PPT adversary A can distinguish between the b = 0
and b = 1 cases in the hybrid game above with a non-negligible probability, then one
can build a PPT adversary A(cid:48) to break the pseudorandomness property of the scheme
ΠDDH-DP, which would be in contradiction to Theorem 8.1. Let Chal denote the challenger in
PseudoRandΠDDH-DP,A(cid:48)(1κ, b), described in Appendix C.4 using the shorthand PseudoRandA(cid:48)(b).
We construct A(cid:48) as follows:
− Get group parameters (p, g, G) from Chal. Run SimSetup of TDC to get pp(cid:48)
com and τcom.
n to the ﬁxed value s(cid:63) using randomness r1, . . . , rn.
Generate n commitments γ(cid:48)
n, pp(cid:48)
Send (p, g, G, γ(cid:48)
1, . . . , γ(cid:48)
1, . . . , γ(cid:48)
com) to A.
− Get the set of corrupt parties C = {1, . . . , (cid:96)} from A. Pass it along to Chal and get
i. Send
com, τcom, si, ((cid:126)0, ri)) to get randomness r(cid:48)
back shares s1, . . . , s(cid:96). Run SimOpen(pp(cid:48)
(s1, r(cid:48)
1), . . . , (s(cid:96), r(cid:48)
(cid:96)) to A.
− On an evaluation query (Eval, x, i) for an honest i from A, send the same query to Chal
i) to
and get back hi. Compute w := H(x) and a simulated proof π(cid:48)
A.
i. Return ((w, hi), π(cid:48)
− On the challenge query (Challenge, x(cid:63), S, ((w, g(cid:63)
u), πu)) from A, if A
has already made at least t − |C| queries of the form (Eval, x(cid:63),∗) or one of the proofs
does not verify, then output 0 and stop. Query Chal with (Challenge, x(cid:63), S, g(cid:63)
1, . . . , g(cid:63)
u)
and get back z. Return z to A.
1), π1), . . . , ((w, g(cid:63)
− Continue answering evaluation queries as before, but if A makes a query of the form
(Eval, x(cid:63), i) for some i ∈ [n] \ C and i is the g-th party it contacted, then output 0 and
stop.
54
− Receive a guess b(cid:48) from A; output b(cid:48).
Observe that for b ∈ {0, 1}, when A(cid:48) is in the game PseudoRandA(cid:48)(b), the view of A in
(0)
(1), the output of PseudoRandA(cid:48)(0) would
the reduction is exactly the same as that in Hyb(com)A
is computationally distinguishable from Hyb(com)A
also be so from PseudoRandA(cid:48)(1).
(b). Thus, if the output of Hyb(com)A
Correctness. To prove correctness of ΠZK-DDH-DP, we will exploit the extractibility prop-
erty of proofs and the binding property of commitments. We ﬁrst describe the correctness
game (Deﬁnition 5.4) in detail. (The ﬁrst three steps are same as that of PseudoRand(cid:48)
A(b) in
Appendix C.5.)
1. Let G be a cyclic group of order p and g a generator of G. Sample s ←$ Zp and
get (s1, . . . , sn) ← SSS(n, t, p, s). Run Setupcom(1κ) to get ppcom. Compute a com-
:= Com(si, ppcom; ri) by picking ri at random. Send public parameters
mitment γi
pp = (p, g, G, γ1, . . . , γn, ppcom) to A.
2. Get the set of corrupt parties C from A. Without loss of generality assume that C =
{1, . . . (cid:96)}. Send the corresponding secret keys {(s1, r1), . . . , (s(cid:96), r(cid:96))} to A.
3. On an evaluation query (Eval, x, i) for an honest i, compute w := H(x) and hi := wsi.
with the statement stmti: {∃s, r s.t. hi = ws ∧ γi = Com(s, ppcom; r)} and
Run ProveH(cid:48)
witness (si, ri) to obtain a proof πi. Return ((w, hi), πi) to A.
u), πu)) for u ≤ (cid:96) (with-
4. On the challenge query (Challenge, x(cid:63), S, ((w, g(cid:63)
out loss of generality assume that S ∩ C = [u]):
1. If |S| < t or any of π1, . . . , πu do not verify, output 1.
2. Else, compute gj := H(x(cid:63))sj for j ∈ S, g(cid:63)
i := H(x(cid:63))si for i ∈ S \ C, z :=(cid:81)
1), π1), . . . , ((w, g(cid:63)
i∈S gi
λ0,i,S
and z(cid:63) :=(cid:81)
i∈S g(cid:63)
i
λ0,i,S . If z(cid:63) = z, output 1.
3. Else, output 0.
Suppose there exists an adversary A s.t. the correctness game reaches the very last step
(3.), leading the challenger to output 0, with non-negligible probability. We will show that
this leads to a contradiction. Towards this, we deﬁne a few intermediate hybrid games. In
the ﬁrst hybrid game, the hash function H(cid:48) is replaced with the simulator S1 guaranteed by
the zero-knowledge property of NIZK.
In the second hybrid, instead of producing a zero in the very last step (3.), the challenger:
− ﬁnds an i(cid:63) ∈ [u] s.t. g(cid:63)
− invokes the extractor E guaranteed by the argument of knowledge property on the adver-
sary with inputs (stmti(cid:63), πi(cid:63), Q) (Q is the list of queries made to S1 and their responses);
and,
i(cid:63) (cid:54)= gi(cid:63) (such an i(cid:63) exists because z(cid:63) (cid:54)= z);
− outputs whatever the extractor does.
If the ﬁrst hybrid game reaches the very last step, it means that all the proofs provided by A
were valid. Thus, if the game outputs 0 with non-negligible probability, the challenger will
output a witness (s(cid:48)
i(cid:63)) for stmti with non-negligible probability.
i(cid:63), r(cid:48)
55
i(cid:63) (cid:54)= si(cid:63). Therefore, the challenger ﬁnds two distinct pairs (si(cid:63), ri(cid:63)) and (s(cid:48)
In the last hybrid, the challenger outputs (si(cid:63), ri(cid:63)) along with the extracted witness. Since
i(cid:63) (cid:54)= gi(cid:63), s(cid:48)
i(cid:63), r(cid:48)
g(cid:63)
i(cid:63))
that produce the same committed value (with non-negligible probability). This breaks the
binding property of TDC.
C.6 Proof of Theorem 8.4
First observe that the consistency property is trivially true. Next, we construct a P P T
adversary B that breaks the security of PRF f if there exists a P P T adversary A that gains
a non-negligible advantage in the pseudo-randomness game PseudoRand.
B gets access to fk(cid:63) for a randomly chosen k(cid:63) in the PRF game. It can make an arbitrary
polynomial number of queries to fk(cid:63), and output a value x(cid:63) at some point. Then, B is
supposed to distinguish between fk(cid:63)(x(cid:63)) and a random value from the range of f , provided
that x(cid:63) was never queried. Let γ denote the PRF challenge.
Note that in PseudoRand adversary is allowed to query on the challenge input in the
evaluation phase, but it must make less than t − |C| queries, where C denotes the set of
corrupt parties. Therefore, there is a set of size n − t + 1 honest parties that the adversary
never queries. We denote this set by D(cid:63). In the following reduction, B will guess this set
at the beginning of the game, and (implicitly) set the key for it to be k(cid:63). Recall that we
(cid:1) is polynomial in the security parameter. So we only suﬀer a
have assumed that d :=(cid:0) n
n−t+1
polynomial loss in the security reduction.
B plays the role of challenger in PseudoRand with A as follows:
− Initialization and corruption. Deﬁne d and D1, . . . , Dd in the same manner as Setup.
Pick a subset D(cid:63) of [n] \ C of size n − t + 1 at random. Implicitly set the key for D(cid:63) to
be k(cid:63). Pick all the other PRF keys at random, use them to deﬁne {SKj}j∈C, and give
{SKj}j∈C to A. Initialize list L and gap g as in PseudoRand. Add elements to L in the
same way as well.
− Pre-challenge evaluation queries. Let (Eval, x, i) be an evaluation query for some i ∈
[n] \ C. Send hi,k := fk(x) for all k ∈ SKi to A. When k = k(cid:63), query the PRF to get
fk(cid:63)(x).
− Challenge. Let (Challenge, x(cid:63), S,{(i, z(cid:63)
i )}i∈U ) such that |S| ≥ t and U ⊆ S ∩ C be the
If x(cid:63) ∈ L, output 0 and stop. Let V be the set of parties queried
challenge query.
on x(cid:63) in the previous phase. If V ∩ D(cid:63) (cid:54)= ∅, then abort. Else, output x(cid:63) to the PRF
challenger and get γ in return. For i ∈ S \ U , compute zi by evaluating hi,k := fk(x) for
all k ∈ SKi. Whenever k = k(cid:63) in these evaluations, use γ as the value for fk(cid:63)(x(cid:63)). Send
z(cid:63) := Combine({(i, zi)}i∈S\U ∪ {(i, z(cid:63)
i )}i∈U , pp) to A.
− Post-challenge evaluation queries. Same as before. If at any point A makes a query of
type (Eval, x(cid:63), i) for some i ∈ [n] \ C so that i ∈ D(cid:63), then abort.
− Guess. Finally, A returns a guess b(cid:48). Output b(cid:48).
As long as B does not abort, it perfectly simulates PseudoRand for A. If γ = fk(cid:63)(x(cid:63)), then
A gets the view with b = 0, and if γ is random, then A gets the view with b = 1.
56