title:Automating Isolation and Least Privilege in Web Services
author:Aaron Blankstein and
Michael J. Freedman
2014 IEEE Symposium on Security and Privacy
Automating Isolation and Least Privilege in Web Services
Aaron Blankstein and Michael J. Freedman
Department of Computer Science
Princeton University
Princeton, USA
PI:EMAIL and PI:EMAIL
Abstract—In many client-facing applications, a vulnera-
bility in any part can compromise the entire application.
This paper describes the design and implementation
of Passe, a system that protects a data store from
unintended data leaks and unauthorized writes even
in the face of application compromise. Passe automat-
ically splits (previously shared-memory-space) applica-
tions into sandboxed processes. Passe limits communica-
tion between those components and the types of accesses
each component can make to shared storage, such as
a backend database. In order to limit components to
their least privilege, Passe uses dynamic analysis on
developer-supplied end-to-end test cases to learn data
and control-ﬂow relationships between database queries
and previous query results, and it then strongly enforces
those relationships.
Our prototype of Passe acts as a drop-in replace-
for the Django web framework. By running
ment
eleven unmodiﬁed, off-the-shelf applications in Passe,
we demonstrate its ability to provide strong security
guarantees—Passe correctly enforced 96% of the appli-
cations’ policies—with little additional overhead. Addi-
tionally, in the web-speciﬁc setting of the prototype, we
also mitigate the cross-component effects of cross-site
scripting (XSS) attacks by combining browser HTML5
sandboxing techniques with our automatic component
separation.
Keywords-security policy inference; isolation; capabilities;
principle of least privilege; web security
I. INTRODUCTION
Network services play a central role in users’ online expe-
riences. In doing so, these services often gather signiﬁcant
amounts of valuable, user-speciﬁc, and sometimes privacy-
sensitive data. Unfortunately, despite the importance of this
data, client-facing applications are susceptible to frequent,
sometimes high-proﬁle [1, 2], break-ins that ultimately
compromise user data. Many times, a security failure in
a single faulty part of the application exposes data from
other parts. In other cases, aberrant application behavior can
be exploited to release otherwise protected data [3].
Mitigating these threats is typically not easy. Convention-
ally, an entire application or network service runs with one
privilege, and often in one shared-memory address space.
This has problematic security implications, because attacks
that manage to overcome one portion of the application may
affect its entirety. Even if application components can be
better isolated by running with limited privileges and in
separate processes, attack channels commonly exist through
communication channels or shared persistent storage, such
as backend databases in web applications. In this manner,
attackers can target the “weakest link” of an application
(which may undergo less scrutiny by developers) and then
escalate their control. For example, breaking into a website’s
public forums can lead to access to sensitive user data
and passwords, either through explicit database queries or
by directly accessing values in program memory. In some
cases, attackers need not even compromise application code;
unexpected application behavior can lead to execution paths
which ultimately leak or compromise user data [3].
To deal with these threats, our work applies three design
principles. First, we split portions of application code into iso-
lated components along natural isolation boundaries, taking
advantage of the typical “switched” design of networked
applications. Second,
in applying the principle of least
privilege [4], we minimize the amount of privilege given to
each component to only that privilege which the component
needs to execute at that speciﬁc time. Finally, we use dynamic
analysis to infer each component’s required privilege, such
that the principle of least privilege can be largely automated.
While the principle of least privilege and the goal of
maximizing isolation between components are old concepts,
we believe that today’s network-facing services provide a
unique opportunity to apply these concepts. Automatically
partitioning traditional, single-process applications is notori-
ously difﬁcult [5, 6]: they are typically designed with large
amounts of shared memory and application traces can be
long, with many user interactions intertwined in the execution
trace. However, today’s scale-out architectures and their
client/server division-of-labor offer new possibilities. They
encourage developers to write server-side applications with
components that offer narrowly deﬁned interfaces and handle
short requests. While this often leads developers to design
their applications to support isolation, these applications
usually all run in a single privilege domain and address
© 2014, Aaron Blankstein. Under license to IEEE.
DOI 10.1109/SP.2014.16
133
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:26 UTC from IEEE Xplore.  Restrictions apply. 
space. We, however, leverage these properties to automatically
decompose applications into isolatable components.
This paper presents Passe, a system which realizes these
design principles in a typical client-facing network appli-
cation and allows for the enforcement of learned security
policies in a large-scale datacenter architecture. Passe runs
developer supplied applications as a set of strongly isolated
OS processes, though the design also supports running each
component on a separate machine. The isolated components,
or what we call views, are restricted to what data they can
access or modify. Passe protects data by limiting views to
particular data queries. For example, a view which only
handles displaying user messages will be restricted to only
making queries which fetch user messages. These queries are
restricted further by applying integrity constraints to capture
and enforce the data and control-ﬂow relationships between
queries and other data sources in the system. If the argument
to the above query is always derived from the “current user”,
then a data-ﬂow constraint would assert that “current user”
is the only valid argument to the fetch message query. If
a permissions check is always executed (and returns True)
before the fetch, then a control-ﬂow constraint would assert
that a permission check must be executed and must return
True prior to the fetch query.
To discover the constraints for these queries, Passe mon-
itors normal application behavior during a trusted learning
phase. During this phase, our analysis engine not only learns
which views make which database queries, but it also infers
data-ﬂow and control-ﬂow relationships between database
query results and later database queries. In particular, Passe
captures these relationships when the dependency is one
of equality or set-membership. While more limited than
general control-ﬂow or data-ﬂow dependencies, this approach
captures relationships based on object identiﬁers, which are
how applications typically express security policies (e.g., a
particular message or post is associated with a particular
set of allowable user IDs). Further, by restricting the set of
relationships we enforce, Passe avoids a problem where most
objects in the system are control-ﬂow or data-ﬂow dependent,
even though they may only be “weakly” dependent (i.e., due
to over-tainting). Ultimately, Passe’s learning phase outputs
an inferred policy. These policies are capable of capturing
direct data-ﬂow and control-ﬂow dependencies between query
results and subsequent queries. For example, an application
may use two queries to implement an access control: the
ﬁrst query checks whether the current user is in the set of
authorized users, and the second query only executes if the
ﬁrst query returns true. Passe would enforce this by requiring
that the ﬁrst query always return true before the second query
could ever be issued.
Our analysis phase is related to work in Intrusion Detection
Systems (IDS) [7, 8], which similarly analyze the behavior of
applications to infer the “normal” behavior of the application.
Unlike prior work in IDS, however, Passe translates these
inferred relationships into integrity constraints which the
runtime will later enforce. This translation from dependency
relationships to integrity constraints is exactly what enables
Passe to support rich data policies in a large-scale application
architecture. Our analyzer may in some cases make inferences
which are too strong, leading to some normal application
functionality being denied. In this sense, Passe is a default-
deny system: if particular queries have not been witnessed
by the analyzer, then those queries will not be allowed.
Developers can ﬁx overly-strict constraints by either adding
test cases to correct Passe’s inferences or by modifying the
policy constraints manually.
While it may be a source of developer frustration, we
believe such behavior has additional security beneﬁts. The
history of web application break-ins shows that applications
are too often written such that, even without a remote code
execution exploit, attackers can make database reads or writes
that are inappropriate given what the developer actually
intended [3]. Because the application’s testing phase forms
the basis for policy generation under Passe, it can serve as
a check for such intent and helps prevent aberrant program
behavior leading to data policy violations. Interestingly, code
analysis techniques like symbolic execution, in ﬁnding the
program’s exact constraints, would not provide such a feature.
We built a prototype of Passe on Django, a framework
for building database-backed web applications in Python.
Our prototype’s analysis engine runs unmodiﬁed Django
applications and infers a policy conﬁguration for the appli-
cations. This conﬁguration speciﬁes (i) how to split Django
application into separate views, each running in their own
sandboxed OS process, (ii) how to limit access for each
view’s database queries, according to the principle of least
privilege, and (iii) what integrity constraints to place on
these queries. Our design was not speciﬁc to Django, and
we expect the same mechanisms could be built into other
popular frameworks.
We evaluated Passe’s effectiveness and ease-of-use by
analyzing and running 11 off-the-shelf Django applications.
We found that Passe can both restrict the set of queries each
component can make, and infer richer application security
policies through data-ﬂow dependency relationships. We also
evaluate the performance of our prototype on a series of
application tests, measuring an increase in median request
latency of 5-15 ms over normal Django, mostly due to the
cost of data serialization between Passe’s isolated processes.
While workloads served entirely from memory suffer a 37%
drop in throughput, workloads requiring database interactions,
as is typical for web applications, experienced a throughput
reduction of about 25%.
II. SECURITY GOALS AND ASSUMPTIONS
The goal of Passe’s analysis is to infer the strongest
possible query constraints which may be applied to isolated
views. There are several potential problems with this. First, if
134
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:26 UTC from IEEE Xplore.  Restrictions apply. 
an application is not easily decomposed, then Passe will fail
to separate it into views, or if single views are responsible
for large portions of the application’s behavior, the provided
isolation will not be particularly useful. Second, if database
queries are highly dynamic, Passe may not allow the queries
at all. If queries are not protectable through simple data-
ﬂows (as one might expect in very complex applications),
then Passe will not provide protections. We developed our
prototype of Passe to explore how well these goals can be
achieved with common web applications.
A. Threat Model
Passe assumes that application developers supply non-
malicious, although possibly exploitable, application code
to our framework, which runs on one or more application
servers. This possibly faulty code may also include many
third-party libraries. Thus, we do not trust that applications
or their included libraries are secure. An attacker can exploit
bugs in application views with the goal of compromising
other views or shared data. Additionally, in the web setting,
an attacker can return scripts to a client’s browser which
attempt to access or extract information from other views
(this includes traditional cross-site scripting attacks).
We do, however, assume that attackers are unable to com-
promise the trusted components of Passe. Further, we trust the
underlying data store, the OS running our components, and,
for web browser sandboxing, we trust that browsers correctly
enforce the new sandboxing features in HTML5. While these
components may and do have bugs, they can be patched and
updated. As a common platform shared by many websites,
we believe there are greater incentives and opportunities
to secure these components, as opposed to securing each
application. Similar to the operating system, securing the
framework only has to be done “once” to beneﬁt all its users.
Further, Passe’s trusted components provide functionality
which is much simpler than the actual application code.
B. Motivating Classes of Vulnerabilities
There are three classes of vulnerabilities common to
networked applications—and web applications in particular—
that Passe is able to mitigate. We further discuss how Passe
mitigates these vulnerabilities in §VII.
1) Poorly understood application behavior. Even while
using frameworks which prevent vulnerabilities in
data operations (such as SQL queries), application
developers may use library calls which have surprising
behavior in unexpected settings. For example, the 2012
Github / Ruby-on-Rails vulnerability was caused by the
default behavior of the Rails mass assignment operation.
This operation allows web requests to set arbitrary
attributes of an UPDATE query.
2) Cross-Site Scripting (XSS). A client’s web browser
presents a possible channel to attack Passe’s isolation
of views. Traditional XSS attacks may allow a vulner-
ability in one view to make AJAX requests to other
views. For example, user input on a forum page is
not properly sanitized, allowing one user to upload
Javascript which, when executed by another user, has
malicious effects such as changing the second user’s
password or accessing their sensitive data. Additionally,
a compromised server-side view could use XSS as
a side-channel
the server-side isolations
of Passe. While numerous approaches exist to ﬁlter
user inputs, discover vulnerabilities, and help translate
applications to use proposed W3C Content Security
Policies features, these techniques either cannot ﬁnd all
XSS vulnerabilities, or they require programmer effort
to modify Javascript code. Passe is able to mitigate
many of the effects of XSS attacks using the same
isolation model that it applies to application views.
to defeat
3) Arbitrary Code Execution. Even when applications
are programmed in high-level languages such as Python,
there are occasional vulnerabilities allowing attackers
to execute arbitrary code. While these problems may be
infrequent, they are particularly damaging. For example,
a vulnerability in the Python YAML library enabled
attackers to gain complete control of an attacked
Django runtime [9].
C. Security Properties of Passe
In the event that an attack against a particular view
succeeds, Passe continues to provide the following security
properties:
P1: Isolation of Execution. An attacker is unable to
inspect or alter the memory of other application views.
This provides security for the execution of other views.
In the context of web applications, this applies to cross-
site AJAX requests: only application views which normally
communicate using AJAX are allowed to communicate during
the secure execution mode.
P2: Isolation of Data. An attacker is unable to read
or modify portions of the durable data store that are not
accessed by the compromised view during its normal (i.e.,
correct) execution. For example, if the application is an
online store with an attached discussion forum, and an
attacker compromises only the forum view, he would still
be unable to read or modify data associated only with the
store’s functionality.
P3: Enforcement of Data Policy. An attacker is unable
to violate high-level application data policies, even when the
data concerned is normally accessible by the compromised
view. For example, a correctly-behaving view may only fetch
messages for end users that are “logged in” to the service, but
because different users are logged in at different times, the
view has high-level access to the entire set of messages. Even
so, Passe ensures the ﬁner-grain application security policy:
even once comprising the view, an attacker cannot read
135
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:26 UTC from IEEE Xplore.  Restrictions apply. 

















