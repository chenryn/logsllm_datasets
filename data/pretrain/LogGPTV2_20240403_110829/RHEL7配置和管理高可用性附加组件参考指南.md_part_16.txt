执行 [**pcs resource move**]{.command}
命令时，这会向资源添加一个约束，以防止其在当前运行的节点中运行。您可以执行
[**pcs resource clear**]{.command} 或 [**pcs constraint
delete**]{.command} 命令删除约束。这不一定将资源重新移到原始节点 ;
此时可以在哪里运行这些资源取决于您最初配置的资源。
:::
如果您指定 [**pcs resource move**]{.command} 命令的 `--master`{.literal}
参数，则约束的范围仅限于 master 角色，您必须指定 *`master_id`* 而不是
*`resource_id`*。
您可选择为 `pcs resource move`{.literal} 命令配置 Life
`参数`{.literal}，以指示约束应保留的时间。根据 ISO 8601 中定义的格式指定
Life `参数`{.literal} 的单元，它要求您将单位指定为大写字母，例如
Y（年）、M（月）、W（周）、D（天）、H（小时）、M（分钟）和 S（秒）。
为了将分钟（M）与月（M）区分开，需要在分钟值前添加 PT
来指定。例如，`生命周期`{.literal} 参数为 5M 表示 5 个月的间隔，而 PT5M
`的生命周期`{.literal} 参数则表示间隔为五分钟。
Life `参数`{.literal} 按照 `cluster-recheck-interval`{.literal}
集群属性定义的间隔进行检查。默认值为 15
分钟。如果您的配置需要更频繁地检查这个参数，您可以使用以下命令重置这个值。
``` screen
pcs property set cluster-recheck-interval=value
```
您可以选择为 `pcs resource move`{.literal} 命令配置
`--wait[=n`{.literal}``{=html}\] 参数``{=html}，以指示在返回
0（资源尚未启动）之前在目标节点上等待资源启动的秒数。如果没有指定
n，将使用默认的资源超时时间。
以下命令将资源 `resource1`{.literal} 移到 node
`example-node2`{.literal}，并阻止它重新移至最初运行 1 小时和 30
分钟的节点。
``` screen
pcs resource move resource1 example-node2 lifetime=PT1H30M
```
以下命令将资源 `resource1`{.literal} 移到 node
`example-node2`{.literal}，并阻止它重新移至最初运行 30 分钟的节点。
``` screen
pcs resource move resource1 example-node2 lifetime=PT30M
```
有关资源限制的详情请参考 [第 7 章
*资源约束*](#ch-resourceconstraints-HAAR.html "第 7 章 资源约束"){.xref}。
:::
::: section
::: titlepage
## []{#ch-manageresource-HAAR.html#s2-moving_resources_relocate-HAAR}将资源移动到首选节点 {.title}
:::
由于故障转移或管理员手动移动节点，在资源移动后，即使解决了造成故障转移的情况，它也不一定会迁移到其原始的节点。要将资源重新定位到首选节点，请使用以下命令。首选节点由当前的集群状态、约束、资源位置和其他设置决定,并可能随时间变化。
``` screen
pcs resource relocate run [resource1] [resource2] ...
```
如果没有指定任何资源，则所有资源都会重新定位到首选节点。
此命令在忽略资源粘性时为每个资源计算首选的节点。在计算首选节点后，它会创建位置限制，导致资源移至首选节点。移动资源后，这些限制会自动被删除。要删除由
[**pcs resource relocate run**]{.command} 命令创建的所有限制，您可以输入
[**pcs resource relocate clear**]{.command}
命令。要显示资源的当前状态及其最佳节点忽略资源粘性，请输入 [**pcs
resource relocate show**]{.command} 命令。
:::
:::
::: section
::: titlepage
# []{#ch-manageresource-HAAR.html#s1-failure_migration-HAAR}因为失败而移动资源 {.title}
:::
当您创建资源时，您可以通过为该资源设置 `migration-threshold`{.literal}
选项来配置资源，使其在定义多个故障后移至新节点。达到阈值后，这个节点将不再被允许运行失败的资源，直到：
::: itemizedlist
-   管理员使用 [**pcs resource `failcount`{.literal}** ]{.command}
    命令手动重置资源的故障计数。
-   达到资源的 `failure-timeout`{.literal} 值。
:::
`migration-threshold`{.literal} 的值默认设置为
`INFINITY`{.literal}。`INFINITY`{.literal}
在内部被定义为一个非常大但有限的数字。值 0 会禁用
`migration-threshold`{.literal} 功能。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
为资源设置 `migration-threshold`{.literal}
与为迁移配置资源不同，其中资源移动到另一个位置而不丢失状态。
:::
以下示例在名为 `dummy_resource`{.literal} 的资源中添加了一个迁移阈值
10，这表示资源将在 10 个故障后移到新节点。
``` screen
# pcs resource meta dummy_resource migration-threshold=10
```
您可以使用以下命令为整个集群的默认值添加迁移阈值。
``` screen
# pcs resource defaults migration-threshold=10
```
要确定资源当前的故障状态和限值，请使用 [**pcs resource
failcount**]{.command} 命令。
迁移阈值概念有两个例外，当资源无法启动或无法停止时会出现这种情况。如果集群属性
`start-failure-is-fatal`{.literal} 设为 `true`{.literal}
（默认值），启动失败会导致故障 `计数`{.literal} 设置为
`INFINITY`{.literal}，因此始终会导致资源立即移动。有关
`start-failure-is-fatal`{.literal} 选项的详情请参考 [表 12.1
"集群属性"](#ch-clusteropts-HAAR.html#tb-clusterprops-HAAR "表 12.1. 集群属性"){.xref}。
停止失败会稍有不同，且非常关键。如果资源无法停止，并且启用了
STONITH，那么集群将隔离该节点以便可以在其他位置启动该资源。如果没有启用
STONITH，那么集群就无法继续，也不会尝试在其他位置启动资源，而是会在失败超时后尝试再次停止它。
:::
::: section
::: titlepage
# []{#ch-manageresource-HAAR.html#s1-moving_resources_due_to_connectivity_changes-HAAR}由于连接更改而移动资源 {.title}
:::
将集群设置为在外部连接丢失时移动资源分为两个步骤。
::: orderedlist
1.  在集群中添加 `ping`{.literal} 资源。`ping`{.literal}
    资源使用相同名称的系统实用程序来测试是否可以访问（由 DNS 主机名或
    IPv4/IPv6 地址指定）的计算机列表，并使用结果维护名为
    `pingd`{.literal} 的节点属性。
2.  为资源配置位置约束，该限制将在连接丢失时将资源移动到不同的节点。
:::
[表 6.1
"资源属性"](#ch-clustresources-HAAR.html#tb-resource-props-summary-HAAR "表 6.1. 资源属性"){.xref}
描述您可以为 `ping`{.literal} 资源设置的属性。
::: table
[]{#ch-manageresource-HAAR.html#tb-pingoptions-HAAR}
**表 8.1. ping 资源的属性**
::: table-contents
  项                       描述
  ------------------------ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  `dampen`{.literal}       等待（强化）时间进一步发生更改。这会防止，当集群节点在稍有不同的时间发现连接丢失时资源在集群中移动。[]{#ch-manageresource-HAAR.html#idm140680361977024 .indexterm}[]{#ch-manageresource-HAAR.html#idm140680361975904 .indexterm} []{#ch-manageresource-HAAR.html#idm140680362326336 .indexterm}[]{#ch-manageresource-HAAR.html#idm140680353026064 .indexterm}[]{#ch-manageresource-HAAR.html#idm140680353024960 .indexterm}
  `multiplier`{.literal}   连接的 ping 节点数量乘以这个值来获得分数。在配置了多个 ping 节点时很有用。[]{#ch-manageresource-HAAR.html#idm140680347066944 .indexterm}[]{#ch-manageresource-HAAR.html#idm140680309653920 .indexterm} []{#ch-manageresource-HAAR.html#idm140680308610128 .indexterm}[]{#ch-manageresource-HAAR.html#idm140680308608816 .indexterm}[]{#ch-manageresource-HAAR.html#idm140680243202688 .indexterm}
  `host_list`{.literal}    要联系的机器以确定当前的连接状态。允许的值包括可解析 DNS 主机名、IPv4 和 IPv6 地址。主机列表中的条目是空格分开的。[]{#ch-manageresource-HAAR.html#idm140680236884304 .indexterm}[]{#ch-manageresource-HAAR.html#idm140680241451216 .indexterm} []{#ch-manageresource-HAAR.html#idm140680241450256 .indexterm}[]{#ch-manageresource-HAAR.html#idm140680238909712 .indexterm}[]{#ch-manageresource-HAAR.html#idm140680238908608 .indexterm}
:::
:::
以下示例命令会创建一个 `ping`{.literal} 资源来验证与
`gateway.example.com`{.literal}
的连接。在实践中，您可以验证到网络网关/路由器的连接。您可以将
`ping`{.literal} 资源配置为克隆，以便资源在所有集群节点中运行。
``` screen
# pcs resource create ping ocf:pacemaker:ping dampen=5s multiplier=1000 host_list=gateway.example.com clone
```
以下示例为名为 `Webserver`{.literal}
的现有资源配置位置约束规则。如果当前运行的主机无法 ping
`gateway.example.com`{.literal}，这将导致 `Webserver`{.literal}
资源移至能够 ping `gateway.example.com`{.literal} 的主机。
``` screen
# pcs constraint location Webserver rule score=-INFINITY pingd lt 1 or not_defined pingd
```
:::
::: section
::: titlepage
# []{#ch-manageresource-HAAR.html#s1-resource_control-HAAR}启用、禁用和禁止集群资源 {.title}
:::
除了
["手动在集群中移动资源"一节](#ch-manageresource-HAAR.html#s1-manually_moving_resources-HAAR "手动在集群中移动资源"){.xref}
[**中描述的 [**pcs resource move**]{.command} 和 pcs
resource**]{.command} relocate
命令外，您还可以使用其他各种命令来控制集群资源的行为。
您可以手动停止正在运行的资源，并使用以下命令防止集群再次启动它。根据其他配置（约束、选项、失败等）配置，资源可能会继续启动。如果您指定了
`--wait`{.option} 选项，pcs [将等待]{.application} \'n\'
秒以便资源停止，然后如果资源停止，则返回 0 或
1（如果资源尚未停止）。如果没有指定 \'n\'，则默认为 60 分钟。
``` screen
pcs resource disable resource_id [--wait[=n]]
```
您可以使用以下命令来允许集群启动资源。根据其余配置，资源可能会继续停止。如果您指定了
`--wait`{.option} 选项，pcs [将等待]{.application} \'n\'
秒以便资源启动，然后如果资源启动，则返回 0 或
1（如果资源尚未启动）。如果没有指定 \'n\'，则默认为 60 分钟。
``` screen
pcs resource enable resource_id [--wait[=n]]
```
使用以下命令来防止资源在指定节点上运行，如果没有指定节点则在当前节点上运行。
``` screen
pcs resource ban resource_id [node] [--master] [lifetime=lifetime] [--wait[=n]]
```
请注意，当执行 [**pcs resource ban**]{.command} 命令时，这会向资源添加
-INFINITY 位置约束，以防止其在指定节点上运行。您可以执行 [**pcs resource
clear**]{.command} 或 [**pcs constraint delete**]{.command}
命令删除约束。这不一定将资源回指定节点 ;
此时可以在哪里运行这些资源取决于您最初配置的资源。有关资源限制的详情请参考
[第 7 章
*资源约束*](#ch-resourceconstraints-HAAR.html "第 7 章 资源约束"){.xref}。
如果您指定 [**pcs resource ban**]{.command} 命令的 `--master`{.literal}
参数，则约束的范围仅限于 master 角色，您必须指定 *`master_id`* 而不是
*`resource_id`*。
您可选择为 `pcs resource ban`{.literal} 命令配置 Life
`参数`{.literal}，以指示约束应保留的时间。有关为 Life `参数`{.literal}
指定单位以及指定要检查 `生命周期`{.literal} 参数的间隔的详情请参考
["手动在集群中移动资源"一节](#ch-manageresource-HAAR.html#s1-manually_moving_resources-HAAR "手动在集群中移动资源"){.xref}。
您可以选择为 `pcs resource ban`{.literal} 命令配置
`--wait[=n`{.literal}``{=html}\] 参数``{=html}，以指示在返回
0（资源尚未启动）之前在目标节点上等待资源启动的秒数。如果没有指定
n，将使用默认的资源超时时间。
您可以使用 [**pcs resource**]{.command} [**命令的
debug-start**]{.command}
参数强制指定的资源在当前节点上启动，忽略群集建议并打印启动资源的输出。这主要用于调试资源；群集上启动资源总是（几乎）由
Pacemaker 完成，而不是直接通过 [**pcs**]{.command}
命令完成。如果您的资源没有启动，这通常是由于资源配置错误（您在系统日志中调试）、阻止资源启动的限制，或者禁用资源。您可以使用这个命令来测试资源配置，但通常不应该用来启动集群中的资源。
[**debug-start**]{.command} 命令的格式如下：
``` screen
pcs resource debug-start resource_id
```
:::
::: section
::: titlepage
# []{#ch-manageresource-HAAR.html#s1-monitordisable-HAAR}禁用 monitor 操作 {.title}
:::
停止重复 monitor
的最简单方法是删除它。然而，在有些情况下，您可能只想临时禁用它。在这种情况下，使用
[**pcs resource update**]{.command} 命令将 `enabled="false"`{.literal}
添加到操作的定义中。当您要重新恢复监控操作时，请将
`enabled="true"`{.literal} 设置为操作的定义。
当您使用 [**pcs resource update
命令更新资源操作时**]{.command}，您没有特别调用的任何选项都将重置为默认值。例如，如果您已经配置了自定义超时值
600 的监控操作，运行以下命令可将超时值重置为默认值 20（或通过 [**pcs
resource ops default 命令将默认值设置为**]{.command} ）。
``` screen
# pcs resource update resourceXZY op monitor enabled=false
# pcs resource update resourceXZY op monitor enabled=true
```
为了保持这个选项的原始值 600，当您重新启用 monitor
控操作时，必须指定那个值，如下例所示。
``` screen
# pcs resource update resourceXZY op monitor timeout=600 enabled=true
```
:::
::: section
::: titlepage
# []{#ch-manageresource-HAAR.html#s1-managedresource-HAAR}受管资源 {.title}
:::
您可以将资源设置为 `非受管`{.literal} 模式，这表示资源仍然在配置中，但
Pacemaker 不管理该资源。
以下命令将指定的资源设置为 `非受管`{.literal} 模式。
``` screen
pcs resource unmanage resource1  [resource2] ...
```
以下命令将资源设置为 `受管`{.literal} 模式，这是默认状态。
``` screen
pcs resource manage resource1  [resource2] ...
```
您可以使用 pcs resource [**manage 或 [**pcs resource**]{.command}
unmanage**]{.command}
命令来指定资源组的名称。命令将对组中的所有资源执行操作，以便您可以通过单个命令将组中的所有资源设置为
`受管`{.literal} 或非 `受管`{.literal} 模式，然后单独管理包含的资源。
:::
:::
[]{#ch-advancedresource-HAAR.html}
::: chapter
::: titlepage
# []{#ch-advancedresource-HAAR.html#ch-advancedresource-HAAR}第 9 章 高级配置 {.title}
:::
本章论述了 Pacemaker 支持的高级资源类型和高级配置功能。
::: section
::: titlepage