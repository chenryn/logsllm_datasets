---
## Page 201
工厂模式
设计谜题解答
我们需要另一种比萨来符合那些疯狂加州人的需求（当然，这里的疯狂是指好的那一
方面）。请绘制出另一组平行的类，把加州区域纳入PizzaStore中。
PizzaStore
creatoPizza()
orderPizza8)
你常要加到加州比萨店的一
切都在这里，有具体的比萨
店类和加州风味的比萨。
NYPizzaStore
ChicagoPizzaStore
CalifomiaPizzaSto
createPizza()
createPiza()
(ezzi,ae9o
NYStyleCheesePizza
ChicagoStyleCheesePizza
NYStylePepperoniPizza
ChicagoStylePepperoniPizza
CaliforniaStylePepperoniPiz
NYStyleClamPizza
ChicagoStyleClamPizza
NYStyleVegglePlzza
ChicagoStyleVeggiePizza
CaliforniaStyleVeggiePizza
好了，发挥你的想象力，找出五个“最奇特”的东西加人到比萨中。然后你就可
以准备到加州去开比萨店了！
这是我们的建
马岭筹泥加烤大蒜
烤肉馨
PDG
朝鲜勤果实
M&M巧克力
花生
你现在的位置
165
---
## Page 202
习题解答
一个很依赖的比萨店
harpenyourpencil
假设你从未听说过OO工厂。下面是一个不使用工厂模式的比萨店版本。数一数，
这个类所依赖的具体比萨对象有几种。如果又加了一种加州风味比萨到这个比萨
店中，那么届时又会依赖几个对象？
public class DependentPizzaStore {
public Pizza createPizza(String style, String type) {
Pizza pizza = null;
if (style.equals("Ny")){
if (type.equals("cheese")){
pizza = new NYStyleCheesePizza ();
}else if (type.equals("veggie"))(
处理所有纽约风味
pizza = new NYStyleVeggiePizza ();
}else if (type.equals("clam"))(
比萨
pizza = new NYStyleClamPizza() ;
)else if (type.equals("pepperoni"))(
pizza = new NYStylePepperoniPizza ();
}else if (style.equals("Chicago")){
if (type.equals("cheese")){
pizza = new ChicagoStyleCheesePizza();
}else if (type.equals("veggie"))(
处理所有芝加哥风
pizza = new ChicagoStyleVeggiePizza();
味比萨
}else if (type.equals("clam")){
pizza = new ChicagoStyleClamPizza ();
}else if (type.equals("pepperoni")){
pizza = new ChicagoStylePepperoniPizza() ;
1
}else{
System.out.println("Error: invalid type of pizza"
return null;
pizza.prepare () ;
pizza.bake () ;
pizza.cut ();
pizza.box ();
return pizza;
可以把答素写在
这里
8
数0
12
加上加州风味后的数目
166
第4章
---
## Page 203
工厂模式
harpenyour
写下ChicagoPizzalngredientFactory的代码。你可以参考下面的类，写出你
的实现：
public class ChicagoPizzaIngredientFactory
implements PizzaIngredientFactory
public Dough createDough(){
return new ThickCrustDough() ;
public Sauce createSauce(){
return new PlumTomatoSauce() ;
public Cheese createCheese()(
return new MozzarellaCheese();
public Veggies[] createVeggies(）(
Veggies veggies[] = ( new Blackolives(),
new Spinach (),
new Eggplant ()
：
return veggies;
public Pepperoni createPepperoni()(
return new SlicedPepperoni ();
public Clams createClam()(
return new FrozenClams () ;
EggPlant
Spinach
ThickCrustDough
BlackOlives
PlumTo
你现在的位置
167
---
## Page 204
填字游戏解答
习题解答
suB|cL
ss
M
REGGI
ANO
L
IN
y
RyMETHOD
CAGOSTyLE
z
DEPENDENT
R
ENCAPSULATE
PDG
168
第4章
---
## Page 205
5单件模式
独一无二的对象
我说过，地是“独一无
二的”，意意这线录，这
个弧度，盈妙的身体，还
你说的是我还是车？够了！你打算
有那车头灯。
什么时候把烤箱手套还我？
下一站是单件模式（SingletonPattern）：用来创建独一无
二的，只能有一个实例的对象的入场券。告诉你一个好消息，单件模
式的类图可以说是所有模式的类图中最简单的，事实上，它的类图上只有一个类！
但是，可不要兴奋过头，尽管从类设计的视角来说它很简单，但是实现上还是会遇
到相当多的波折。所以，系好安全带，出发了！
这是新的一章
169
---
## Page 206
二关一
什么？！整章的内
容就是如何实例化
个对象”！
这可是“唯一”的对
呀！
开发人员：这有什么用处？
大师：有一些对象其实我们只需要一个，比方说：线程池（threadpool）、缓存（cache）、对话框、处理偏
好设置和注册表（rcgistry）的对象、日志对象，充当打印机、显卡等设备的驱动程序的对象。事实上，这
类对象只能有一个实例，如果制造出多个实例，就会导致许多问题产生，例如：程序的行为异常、资源使
用过量，或者是不一致的结果。
开发人员：好吧！或许的确有一些类应该只存在一个实例，但这需要花整个章节的篇幅来说明吗？难道不
能靠程序员之间的约定或是利用全局变量做到？你知道的，利用Java的静态变量就可以做到。
大师：许多时候，的确通过程序员之间的约定就可以办到。但如果有更好的做法，大家应该都乐意接受。
别忘了，就跟其他的模式一样，单件模式是经得起时间考验的方法，可以确保只有一个实例会被创建。单
件模式也给了我们一个全局的访问点，和全局变量一样方便，又没有全局变量的缺点。
开发人员：什么缺点？
大师：举例来说：如果将对象赋值给一个全局变量，那么你必须在程序一开始就创建好对象★，对吧？万一
这个对象非常耗费资源，而程序在这次的执行过程中又一直没用到它，不就形成浪费了吗？稍后你会看到，
利用单件模式，我们可以在需要时才创建对象。
开发人员：我还是觉得这没什么困难的。
大师：利用静态类变量、静态方法和适当的访问修饰符（accessmodifier），你的确可以做到这一点。但是，
不管使用哪一种方法，能够了解单件的运作方式仍然是很有趣的事。单件模式听起来简单，要做得对可不
简单。不信问问你自己：要如何保证一个对象只能被实例化一次？答案可不是三言两语就说得完的，是不
是？
★这其实和实现有关。有些JVM的实现是：在用到的时候才创建对象。
170
享SL
---
## Page 207
单件模式
小小单件
苏格拉底式的诱导问答
如何创建一个对象？
new Myobject ();
万一另一个对象想创建MyObject会怎样？可以再次
是的，当然可以。
newMyObject吗？
所以，一且有一个类，我们是否都能多次地实
如果是公开的类，就可以。
例化它？
如果不是的话，会怎样？
如果不是公开类，只有同一个包内的类可以实例化
它，但是仍可以实例化它多次。
嗯！有意思！你知道可以这么做吗？
我没想过。但是，这是合法的定义，有·定的道
理。
public MyClass (
private MyClass()(1
怎么说呢？
我认为含有私有的构造器的类不能被实例化。
有可以使用私有的构造器的对象吗？
嗯，我想MyClass内的代码是唯一能调用此构
造器的代码。但是这又不太合乎常理。
你现在的位置，
171
---
## Page 208
建立一个单件模式
为什么？
因为必须有MyClass类的实例才能调用MyClass构
造器，但是因为没有其他类能够实例化MyClass，
所以我们得不到这样的实例。这是“鸡生蛋，蛋
生鸡”的问题。我可以在MyClass类型的对象上
使用MyClass构造器，但是在这之前，必须有一
个MyClass实例。在产生MyCalss实例之前，又必
须在MyClass实例内才能调用私有的构造器..
嘿！我有个想法。
MyClass有一个静态方法。我们可以这样调用这
你认为这样如何？
个方法：
MyClass.getInstance ();
public MyClass {
public static MyClass getInstance ()
为何调用的时候用MyClass的类名，
因为getlnstance(）是一个静态方法，换句话说，
而不是用对象名？
是一个“类”方法。引用一个静态方法，你需
要使用类名。
有意思。假如把这些合在一起“是否”就可
当然可以。
以初始化一个MyClass？
public MyClass {
private MyClass()(}
public static MyClass getInstance ()
return new MyClass () ;
好了，你能想出第二种实例化对象的方式吗？
MyClass.getInstance ();
你能够完成代码使MyClass只有一个实例被产生
嗯，大概可以吧….
吗？
（下一页有这个代码。）
172
第5章
---
## Page 209
单件模式
剖析经典的单件模式实现
把MyClass改名为
Singleton.
利用一个静态变量来
记录Sinsleton类的唯
如果你只是很快地翻
一一实例。
到这一页，不要盲目
public class Singleton {
private
static
Singleton
地键入代码。在本章
uniqueInstance;
把构造器声明为
后面的部分中，你会
//这里是其他的有用实例化变量
看到这个版本有一些
私有的，只有自
private Singleton() ()
问题。
Singleton类内才可以
publie
static
sengleton
调用构造器。
getInstance(）{
if (uniqueInstance == null)
用setJnstance(）方法实例
Singleton();
uniqueInstance = new
化对象，并返回这个实
return uniqueInstange;
例。
/这里是其他的有用方法
它然，Sinsleton是一个正常
的类，具有一些其他用途
的实例变量和方法。
再靠近一点
αniqzeJnstance拥有“
如果unigueJnstance是空的，表示
还没有创建实例
…….而如果它不存在，我们就利用
个”实例，别忘了，它是个
私有的构造器产生一个Sinsleton实
静态变量。
例并把它映值到unigueJnstance静
态变量中。请注象，如果我们不
需要这个实例，它就永远不会产
if (uniqueInstance == null){
生。这就是延迟实例化”（laxy
uniqueInstance = new MyClass ();
instantiaxe)
return uniqueInstance;
如果uniquenstance不是nall，就
当执行到这个retutn，就表
表示之前已经创建过对象。我
示我们已经有了实例，并将
们就直接融到retutn语句。
unigueJnstance当返回值。
你现在的位置
173
---
## Page 210
单件访谈
模式告白
本周访问：
单件的告白
HeadFirst：今天我们很高兴专访单件对象。一开始，不妨先介绍一下你自己。
单件：关于我，我只能说我很独特，我是独一无二的。
HeadFirst：独一无二？
单件：是的，独一无二。我是利用单件模式构造出来的，这个模式让我在任何时刻都只有一个对象。
HeadFirst：这样不会有点浪费吗？毕竞有人花了这么多时间写了类的代码，而这个类竞然只产生一个
对象。
单件：不，一点儿也不浪费！“一个”的威力很强大呢！比方说，如果有一个注册表设置（registry
setting）的对象，你不希望这样的对象有多个拷贝吧？那会把设置搞得一团乱。利用像我这样的单件对
象，你可以确保程序中使用的全局资源只有一份。
HeadFirst：请继续....
单件：嗯！我擅长许多事。有时候独身是有些好处的。我常常被用来管理共享的资源，例如数据库连
接或者线程池。
HeadFirst：但我还是觉得，一个人好像有一点孤单。
单件：因为只有我一个人，所以通常很忙，但还是希望更多开发人员能认识我。许多开发人员因为产
生了太多同一类的对象而使他们的代码出现了bug，但他们却浑然不觉。
HeadFirst：那么，请允许我这么问，你怎么能确定只有一个你？说不定别人也会利用new产生多个你
呢。
单件：不可能，我是独一无二的。
HeadFirst：该不会要每个开发人员都发毒哲绝对不会实例化多个你吧？
单件：当然不是，真相是.噢呀！这牵扯到个人隐私…其实·我没有公开的构造器。
HeadFirst：没有公开的构造器！！噢！抱款！我太激动了。没有公开的构造器？
单件：是的，我的构造器是声明为私有的。
HeadFirst：这怎么行得通？你“究竞”是怎样被实例化的？
单件：外人为了要取得我的实例，他们必须“请求”得到一个实例，而不是自行实例化得到一个实
例。我的类有一个静态方法，叫做getInstance()。调用这个方法，我就立刻现身，随时可以工作。事实
上，我可能是在这次调用的时候被创建出来的，也可能是以前早就被创建出来了。
HeadFirst：单件先生，你的内在比外表更加深奥。谢谢你如此坦白，希望能很快再与你见面。
174第5章