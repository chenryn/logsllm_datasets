22
23 window.addEventListener("load",
extractFilesFromSDcard, true);
Fig. 4: Directly reading local ﬁles
mobile context. It gives mobile ads a 1-bit local resource
oracle. By attempting to load a DOM element whose
URI points to a local ﬁle, a mobile ad learns whether
a ﬁle with this name exists on the device. As explained
in Section III-B, AdSDKs have the same privileges as
the host app, including READ EXTERNAL STORAGE.
Therefore, a mobile ad can check the existence of a ﬁle
with a particular name in the device’s external storage,
even though it cannot read this ﬁle’s contents.
The following conditions are necessary for mobile ads
displayed by an AdSDK to take advantage of the local
resource oracle:
•
•
(Since Android 5.0 Lollipop) To load ads into a
WebView instance, AdSDK uses loadDataWith-
BaseURL with a scheme other than https:// for
the baseU rl argument.
The WebView instance enables setJavascriptEn-
abled. The default value of this ﬂag is false, but
since running JavaScript in WebView is essential
7
•
•
for mobile advertising, all AdSDKs from Table II
enable setJavascriptEnabled.
The WebView instance enables setAllowFileAc-
cess (default is true).
(Since Android 4.4 KitKat) The host app has the
READ EXTERNAL STORAGE permission.
The local resource oracle exploits a subtle but crucial
difference between the mobile and Web security models.
On the Web, public resources can typically be retrieved via
cross-origin requests. For sensitive resources, the recipient
of a cross-origin request can perform access-control checks
or ask the user’s browser to enforce the same origin policy
by sending back cross-origin resource sharing (CORS)
headers. Local ﬁles are cross-origin resources, too, but
there is no entity that can request or perform access-control
checks. Therefore, Web browsers including Chrome, Fire-
fox, and Safari strictly forbid accessing ﬁle resources from
fetched Web pages. On the other hand, embedded browser
components such as WebView allow this ﬁle access to give
app developers more ﬂexibility.
In contrast to the Web, on mobile devices the mere
existence of a particular ﬁle can be sensitive because
external storage is used as a cache by multiple apps. In
the rest of this paper, we demonstrate how the presence of
certain ﬁles can be used to infer conﬁdential information
about the state of various apps used by the device’s user
and thus about this user’s activities.
D. Inferring users’ trajectories
Table II shows device identiﬁers collected by AdSDKs.
MoPub, one of the largest advertising services, reveals both
the identiﬁers and, indirectly, locations to ads, enabling
advertisers’ to link multiple locations of the same device
and thus construct the user’s trajectory.
Figure 5 shows how advertisers can collect location
data using the MoPub AdSDK. The ﬂow of location data
from the device to the advertiser is quite convoluted. It
is collected by AdSDK on the device, then sent to the
AdSDK server, then back to the device as part of the ad,
and ﬁnally from the ad to the advertiser.
First,
the advertiser uploads an advertising creative
along with a tracking URL to the MoPub server. MoPub
lets advertisers use macro parameters in the tracking URL.
When the MoPub AdSDK on the device sends a request
for advertising, the MoPub server replaces the macros in
the tracking URL with the actual location data received
from the device and sends this URL to the device as
part of the advertising creative. A WebView instance in
the MoPub AdSDK displays this creative, and HTTP(S)
requests sent by the creative to the tracking URL reveal
the device’s location. We conﬁrmed this data ﬂow by
examining network trafﬁc between a mobile device running
a MoPub-supported app and MoPub servers.
Since MoPub reveals both location data and device
identiﬁers (GAID or the hash of Android ID), advertis-
ers can easily determine if two locations were reported
from the same device and thus reconstruct partial user
added script element fetches a JavaScript ﬁle from our
server. This script runs in the context of the advertising
creative and simulates a malicious advertiser by attempting
to collect or infer information from the device using the
methods described in Section IV.
This setup accurately models the capabilities of a ma-
licious advertiser, in particular his ability to include an
undetected malicious script into an ad. AdSDKs on the
device cannot distinguish an advertising creative rewritten
by our proxy from a “genuine” creative because none
of the existing AdSDKs check the integrity of delivered
creatives. Furthermore, they could not do so even if they
wanted to because fetched creatives often come from other
advertising networks out of their control. We conﬁrmed
that advertising creatives from the MoPub and AirPush
networks include third-party script elements whose source
domains are not related to MoPub or AirPush.
Manual review of creatives and automatic monitoring
systems operated by advertising services may prevent
some malicious creatives from being delivered to users.
Measuring the detection rates of these techniques is com-
plementary to our work. Furthermore,
these ﬁlters are
designed to detect ads that actively push malware, not those
that surreptitiously collect information from the devices on
which they are displayed.
Fig. 6: Overview of inference attacks
VI.
Inferring sensitive information
Section IV-C described the local resource oracle that
enables a malicious ad to check the existence of a par-
ticular ﬁle in the external storage of the victim’s Android
8
Fig. 5: The ﬂow of location data in MoPub
trajectories. Even if the user periodically changes his or
her pseudonymous GAID, sparse trajectories—e.g., work-
home location pairs—are known to be strongly identifying
(see Section VI-E) and allow the advertiser to link old and
new GAID, effectively turning GAID into a permanent
identiﬁer. Furthermore, when the MoPub AdSDK uses An-
droid ID as the device identiﬁer in the absence of Google
Play Services, each collected location becomes paired with
a semi-permanent identiﬁer. MoPub recommends devel-
opers to include the ACCESS COARSE LOCATION
permission, but if the app requires ACCESS FINE LOC-
ATION for its core functionality, location-identiﬁer pairs
leak to advertisers.
AirPush and AdMarvel let advertisers collect device
identiﬁers but not ﬁne-grained locations. Advertisers can
still infer devices’ locations from the source IP addresses
of HTTP requests, but this information is much less precise
than the device-reported locations revealed by MoPub.
V. Experimental setup
We evaluated the feasibility of inference mechanisms
described in Section IV on three Android devices: Nexus
6, Samsung Galaxy S6, and Motorola Moto X. Table IV
shows the OS version for each device.
Brand
Google Nexus
Samsung Galaxy S6
Motorola Moto X
Model
Nexus 6
SAMSUNG-SM-G925A
XT1058
Android OS
Android 5.1
Android 5.0.2
Android 4.4.4
TABLE IV: Testing devices
To simulate malicious advertisers, all testing devices
were conﬁgured to use our proxy server. We did not upload
advertising creatives with malicious payloads to the actual
advertising networks lest we affect real users. Instead, the
proxy server intercepts the creatives sent by the advertising
networks to mobile devices and rewrites them by adding
one script element as shown at the top of Figure 7. The
device. Figure 6 shows the overview of our experimental
setup for evaluating attack feasibility.
Each exploit involves two apps. The target app creates
local ﬁles in the device’s external storage whose mere
presence leaks sensitive information about the user. Target
apps need not use AdSDKs or show any advertising at all.
The attack-vector app is a different, advertising-supported
app that happens to show a malicious advertising creative
using one of the AdSDKs in our study. The target app and
the attack-vector app run on the same device, but their
execution need not be concurrent.
As our sample attack-vector apps, we selected four
popular advertising-supported apps, each of which includes
a different AdSDK, as shown in Table V. In Figure 6, the
right-hand app represents one of the apps from Table V.
Our experiments illustrate what an ad shown in any of
these apps can learn about the user via the local resource
oracle. We emphasize that these apps are just arbitrary ex-
amples. Any app using the same AdSDK can be exploited
as an attack vector in exactly the same manner.
Android app
Dictionary.com
TuneIn Radio
Download Music MP3 2
Personality Analysis Test
AdSDK
AdMob
MoPub
AirPush
AdMarvel
Number of installs
10,000,00-50,000,000
100,000,000-500,000,000
1,000,000-5,000,000
100,000-500,000
TABLE V: Sample apps that use each AdSDK
Table VI shows four target apps that we chose to
illustrate the diversity of sensitive personal information
that can be inferred using the local resource oracle. The
real targets of the attacker are the local ﬁles created by
these target apps, as Figure 6 shows. These ﬁles reﬂect
the state of the app and thus leak information about the
user’s activities that led to this state.
information a mobile ad can infer if it
The second column in Table VI shows, for each target
app, what
is
displayed in any other app on the same device that happens
to include any of the AdSDKs in our study. The third
column shows the numbers of installs for each target app.
Each of the last four columns in Table VI shows
whether the inference attack is feasible against the target
app using a particular AdSDK. For example, the cell at the
intersection of “GoodRx” and “MoPub” contains (cid:88). This
means that if the user has on his device both GoodRx and
any app that includes MoPub (such as TuneIn Radio—see
Table V), any ad shown in the latter app can ﬁnd out which
medications the user has been shopping for.
Each of our target apps caches images and/or HTML
ﬁles in external storage or its app-speciﬁc directory. Pre-
sumably,
they do this to improve user experience by
making content load faster. The names of the cached ﬁles
are deterministic and predictable across all installations of
the app regardless of the Android OS version and device.
Therefore, an attacker can pre-compute an ofﬂine database
of ﬁle names, then use the local resource oracle in his ads
to check the presence of these ﬁles on users’ devices.
A. Medications
GoodRx is a popular Android app that has between
500,000 and 1,000,000 installs. It helps users ﬁnd drug
stores that sell a particular medication and compare
prices [21]. The app has bookmark functionality that lets
users register frequently searched medications.
This app caches bookmarked and searched medication
images in the external storage of the user’s device. We
created a list of 12 medications for depression and anxiety
disorders and prepared the list of names of the correspond-
ing image ﬁles. Figure 7 gives the exploit to check the
existence of cached GoodRx images using JavaScript event
handlers. As Table VI shows, this exploit was successful
in all AdSDKs on all tested Android devices, enabling
a malicious ad to determine whether the user has been
searching for depression or anxiety drugs.
B. Gender preferences for dating partners
POF Free Dating App is a popular dating app with
over 10,000,000 installs [38]. It caches images of possible
dating partners in external storage.
We made a list of names for 10 female and 10 male
cached image ﬁles and installed the app with different
dating preferences for each device. Using the same method
as in Section VI-A, a malicious ad can infer the user’s
gender preference.
C. Browsing history
The Dolphin browser for Android is a popular mobile
browser, with over 50,000,000 installs [15]. This browser
caches images and fetched HTML pages in external storage
to reduce network usage. We made a list of cached images
and HTML pages for three different sites, including a state
DMV, a local hospital, and a local restaurant.
WebView triggers the same event when the ﬁle is
absent and when the ﬁle is of a non-supported image type.
Therefore, the script in Figure 7 cannot be used to infer
the existence of non-image ﬁles. Instead, a malicious ad
can use “script” elements as shown in Figure 8. The src
property of the script element is not JavaScript, but if the
target ﬁle is present on the device, WebView still invokes
the callback for a successful load event. This technique
correctly identiﬁed all sites visited in Dolphin.
Dolphin uses a String.hashCode() value for the ﬁle
names of cached URLs. This is a 32-bit integer value [25],
thus there is a small probability that two different pages are
cached with the same ﬁle name. To estimate the collision
rate of cached ﬁle names, we started from the front pages
of the Alexa top 1,000 sites and crawled link, script, and
image DOM URLs. This crawl collected 210,016 URL
strings. We then computed their hashCode() values. There
were only 7 pairs of URLs that hashed to the same value.
9
App
Target apps
Private information
Installs
GoodRx Drug Prices and Coupons Medication
500,000-1,000,000
POF Free Dating App
Gender preference
10,000,000-50,000,000
Dolphin Browser
Browsing history
50,000,000-100,000,000
Kakao Talk
Social graph
100,000,000-500,000,000
Test devices
Samsung Galaxy S6
Nexus 6
Motorola Moto X
Samsung Galaxy S6
Nexus 6
Motorola Moto X
Samsung Galaxy S6
Nexus 6
Motorola Moto X
Samsung Galaxy S6
Nexus 6
Motorola Moto X
Attack ad shown in another app using. . .
AdMob
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
AirPush
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
AdMarvel
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)