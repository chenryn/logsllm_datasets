title:OBLIVIATE: A Data Oblivious Filesystem for Intel SGX
author:Adil Ahmad and
Kyungtae Kim and
Muhammad Ihsanulhaq Sarfaraz and
Byoungyoung Lee
OBLIVIATE: A Data Oblivious File System
for Intel SGX
Adil Ahmad
Purdue University
Kyungtae Kim
Purdue University
PI:EMAIL
PI:EMAIL
Muhammad Ihsanulhaq Sarfaraz
Purdue University
PI:EMAIL
Byoungyoung Lee
Purdue University
PI:EMAIL
Abstract—Intel SGX provides confidentiality and integrity
of a program running within the confines of an enclave, and
is expected to enable valuable security applications such as
private information retrieval. This paper is concerned with the
security aspects of SGX in accessing a key system resource, files.
Through concrete attack scenarios, we show that all existing SGX
filesystems are vulnerable to either system call snooping, page
fault, or cache based side-channel attacks. To address this security
limitations in current SGX filesystems, we present OBLIVIATE,
a data oblivious filesystem for Intel SGX. The key idea behind
OBLIVIATE is in adapting the ORAM protocol to read and write
data from a file within an SGX enclave. OBLIVIATE redesigns
the conceptual components of ORAM for SGX environments,
and it seamlessly supports an SGX program without requiring
any changes in the application layer. OBLIVIATE also employs
SGX-specific defenses and optimizations in order to ensure
complete security with acceptable overhead. The evaluation of the
prototype of OBLIVIATE demonstrated its practical effectiveness
in running popular server applications such as SQLite and
Lighttpd, while also achieving a throughput improvement of 2×-
8× over a baseline ORAM-based solution, and less than 2×
overhead over an in-memory SGX filesystem.
I.
INTRODUCTION
Hardware-assisted trusted computing solutions are gaining
popularity today. One such solution is Intel SGX, which guaran-
tees confidentiality and integrity of a user program despite the
program being executed in a remote and potentially adversarial
environment. Using SGX, the user program runs within an
enclave, a protected region provided by the Intel hardware. The
program’s execution semantics including registers and memory
footprints are isolated from the remaining system components
such as kernel, VMM, BIOS, etc. This isolation allows the user
program to run securely even when an attacker with higher
privilege i.e., kernel, tries to actively modify program execution.
SGX also supports a remote attestation mechanism so that the
user can verify that his/her application is actually being executed
within an SGX context.
An SGX enclave is designed to run user-level programs,
and therefore relies on external system components to access
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23284
www.ndss-symposium.org
Model
Naive (§III-A)
In-memory (§III-B)
Hybrid (§III-C)
OBLIVIATE (§VI)
Metadata
Location
Kernel
Enclave
Enclave
Enclave
×
✓
△
✓
Side-Channel Attacks
Syscall
Cache
PF
×
×
×
✓
×
×
×
✓
Implementation
for SGX
SCONE [7], Intel FS [3]
Haven [9], Ryoan [18]
Graphene [47, 48]
This paper
TABLE I: The comparison of file systems models for SGX. Columns
under side-channel attacks indicate whether each filesystem model is
secure against corresponding attacks: Syscall denotes syscall snooping
based attack, PF denotes page fault based attacks, and Cache denotes
cache based attacks.
I/O resources. Amongst these resources, we note that accessing
files is especially important in order to realize various security
applications with SGX. This is because most of the computing
data is present in the form of files. For example, running
database systems in SGX environments, where the database is
backed up by files, can enable the concept of private information
retrieval (PIR) [13]. As another example, web servers or content
delivery networks (CDNs) in SGX environments can ensure
user’s privacy, and most of this data is presented in a file
(e.g. HTML file, JavaScript code, and images). Other potential
applications include cloud-based backup storage where the user
wants to securely store and access their data without going
through the hassle of maintaining a local copy.
Recognizing these needs, Intel recently released Protected
File System Library for SGX [3]. To perform filesystem
operations, it allows an enclave to delegate such operations to
the untrusted kernel, i.e., relaying all filesystem system calls
from an enclave to the untrusted kernel. It also provides an
encryption module in order to protect confidentiality. However,
this can still result in critical security breaches because the
untrusted kernel can observe detailed interactions between the
enclave and the kernel (i.e., parameters in the system call
including filename and file offset) while the enclave is accessing
a certain file. In-memory filesystems for SGX [9, 18] prevent
the above mentioned system call based attack. In the in-memory
filesystem, an enclave pre-loads all the required file contents
within its protective memory region and handles all filesystem
interactions from within the enclave. Thus, when the enclave
program tries to access a file, the request does not need to
be forwarded to the kernel and can be served by the enclave.
Unfortunately, in-memory filesystems are still susceptible to
side-channel attacks adapted for the SGX environments, namely
page fault based attacks [50] and cache based attacks [10, 40].
By observing memory access patterns, these attacks can gain
insight into the internal processing semantics of the enclave
application.
To demonstrate the feasibility of these attacks on the filesys-
tem, we performed concrete attacks using current filesystem
models for SGX. For our demonstration, we assume a scenario
where an insurance company runsa SQLite database storing
medical records. The company wants to use a secure cloud
infrastructure to protect its medical data as well as associated
operations. As such, the company runs SQLite inside an SGX
enclave, where the database is stored in an encrypted file
and the database communication channel is encrypted as well.
According to our results, sensitive information carried in the
database query can be leaked to potential attackers (e.g, the
untrusted kernel) using current filesystems for Intel SGX. More
specifically, through syscall snooping and page fault based
side-channel attacks, we confirm that both system call traces
and memory access patterns can be exploited to learn which
row and column a specific database query is processing. We
believe our case study on this attack advocates the strong need
for introducing a side-channel resistant filesystem model for
Intel SGX.
This paper presents OBLIVIATE1, a data oblivious file
system for Intel SGX. The key idea behind OBLIVIATE is
to employ ORAM operations for SGX to hide file access
patterns. OBLIVIATE carefully materializes the conceptual
components of ORAM for SGX such that it can seamlessly
function as a filesystem while providing systematic preventions
against above mentioned side-channel attacks. At a higher
level, OBLIVIATE runs an isolated filesystem enclave in a
separate process, where the application enclave relays filesystem
related operations through encrypted communication channels.
In order to optimize communication overheads due to this
isolated and separate filesystem design, OBLIVIATE utilises
exitless communication schemes, namely message queues and
shared memory, each of which facilitates intra-process and inter-
process communication. In terms of adopting ORAM, since the
ORAM implementation itself is exposed to side-channel attacks
against the enclave (e.g., page fault based [50] or cache based
attacks [10, 40]), OBLIVIATE uses data oblivious algorithms
in accessing key data structures of ORAM.
OBLIVIATE presents two performance optimization tech-
niques in applying ORAM for SGX: (1) To efficiently maintain
ORAM server storage, OBLIVIATE develops an additional
security memory region with non-encrypted memory regions
of SGX (i.e. more precisely, non-EPC memory §II-A). This
enables OBLIVIATE to avoid costly context switches, which
arise due to limited EPC memory, if it were directly stored
within the enclave memory. (2) To reduce ORAM latency,
we exploit the internal working characteristics of ORAM and
employ asynchronous ORAM server update schemes. As such,
OBLIVIATE returns the required data as soon as it becomes
available and performs path updates asynchronously, rather
than waiting for expensive ORAM path updates.
To summarize, this paper makes following contributions:
• We demonstrate the feasibility of side-channel attacks
against current filesystems for SGX by developing concrete
attacks for them. We assumed a realistic usage scenario
where the victim runs SQLite within an enclave, and our
1 The term "Obliviate" is used as an incantation in the Harry Potter series
which is used to wipe a person’s memory.
attacks confirm that the security of current SGX filesystems
can be breached through side-channel attacks.
• We design and implement OBLIVIATE, a secure file system
support for SGX. It systematically adopts ORAM protocols
to hide file access patterns. As the ORAM implementation
itself running inside an SGX enclave can be vulnerable to
side-channel attacks, OBLIVIATE employs data oblivious al-
gorithms in accessing ORAM’s data structures. OBLIVIATE
also employs systematic performance optimizations while
keeping in mind the nature of applications it services.
• We provide a security analysis of OBLIVIATE against page
fault based side-channel attacks and explain how and why
these attacks become futile under OBLIVIATE.
• We evaluate OBLIVIATE on real SGX hardware. To show
its practical aspects, we not only run IOZone filesystem
benchmarks [30] but also real-world applications including
SQLite [33] and Lighttpd [22]. We show that OBLIVIATE
achieves a throughput improvement of 2×- 8× compared
to a baseline solution employing traditional ORAM, and
slows down within the range of 1.5×- 2× compared to the
in-memory SGX filesystem.
The rest of this paper is organized as follows. §II provides
background of paper, and §III describes existing filesystem
models for SGX. §IV provides our case studies on launching
side-channel attacks against existing filesystem models. §VI
describes the design of OBLIVIATE, and §VIII evaluates various
aspects of OBLIVIATE. §IX discusses potential applications of
OBLIVIATE. §X provides related work of this paper, and lastly
§XI concludes the paper.
II. BACKGROUND
A. Intel SGX
Intel SGX [4] is a set of hardware instructions introduced
by Intel, and recently commoditized with the Intel Skylake
CPU architecture. The primary motivation behind Intel SGX
is to provide confidentiality and integrity of a user program
while reducing the trust model up to the CPU itself. Thus,
a user program can be securely run on top of hostile,
potentially adversarial system components, including high-
privileged software such as kernel, VMM, and BIOS. The key
enabling technology of Intel SGX is in its protected execution
region, termed as an enclave, which uses hardware protections
guaranteed by Intel SGX. In particular, the user program is
run within an enclave, and any transition to the untrusted
execution context (e.g. transition to the untrusted kernel, either
by synchronous or asynchronous exit events) is preceded by
complete encryption of all enclave execution contexts, including
CPU registers and enclave memory footprints. Since this
encrypted execution context can be only decrypted under the
enclave execution context, all other system components cannot
harm its confidentiality and/or integrity. In order to validate
the initial integrity of a user program, SGX provides a remote
attestation mechanism. Moreover, SGX also provides a sealing
mechanism (i.e. generating per-enclave or per-authority unique
encryption key) to support persistent data storage for an enclave
program.
Limitation: Memory Resource Use. The strong security
guarantees of SGX are achieved with a few constraints on
2
hardware resource usage. One key limitation is that the enclave
has a limited memory allowance for its execution. More
precisely, Enclave Page Cache (EPC), the physical memory
space for enclave programs, is allowed to utilize only up to
128 MB. It is worth noting that an enclave program can have
more than 128 MB of virtual address space. This is supported
by the untrusted kernel (i.e., Intel SGX SDK drivers), which
performs swap in/out of memory pages between EPC and
non-EPC physical memory regions.
Limitation: Side-Channel Attacks.
Intel SGX does not
provide systematic protection mechanisms against side-channel
attacks and relies on the application developer. While there can
be many possible attack vectors (e.g. power monitoring attacks,
electromagnetic attacks, and access pattern analysis based on
bus snooping attacks [15]), we mainly focus on following three
feasible attacks, which do not require physical accesses to the
machine: (a) syscall snooping, (b) page fault based and (c)
cache-based side-channel attacks.
The root cause of syscall snooping attacks is that an enclave
program has to rely on other system components (e.g. kernel)
for accessing computing resources including files or network
functionality. This is because an enclave is designed to be run
with user-level privileges (i.e. ring-3) while accessing system
resources require higher privileges (i.e. ring-0). As a result,
Intel SGX SDK [19], a programming toolkit for SGX platform
released by Intel, provides ocall, which can be used to forward