- [3 种常用的缓存读写策略详解](./database/redis/3-commonly-used-cache-read-and-write-strategies.md)
- [Redis 5 种基本数据结构详解](./database/redis/redis-data-structures-01.md)
- [Redis 3 种特殊数据结构详解](./database/redis/redis-data-structures-02.md)
- [Redis 持久化机制详解](./database/redis/redis-persistence.md)
- [Redis 内存碎片详解](./database/redis/redis-memory-fragmentation.md)
- [Redis 常见阻塞原因总结](./database/redis/redis-common-blocking-problems-summary.md)
- [Redis 集群详解](./database/redis/redis-cluster.md)
### MongoDB
- [MongoDB 常见知识点&面试题总结(上)](./database/mongodb/mongodb-questions-01.md)
- [MongoDB 常见知识点&面试题总结(下)](./database/mongodb/mongodb-questions-02.md)
## 搜索引擎
[Elasticsearch 常见面试题总结(付费)](./database/elasticsearch/elasticsearch-questions-01.md)
![JavaGuide 官方公众号](https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png)
## 开发工具
### Maven
- [Maven 核心概念总结](./tools/maven/maven-core-concepts.md)
- [Maven 最佳实践](./tools/maven/maven-best-practices.md)
### Gradle
[Gradle 核心概念总结](./tools/gradle/gradle-core-concepts.md)（可选，目前国内还是使用 Maven 普遍一些）
### Docker
- [Docker 核心概念总结](./tools/docker/docker-intro.md)
- [Docker 实战](./tools/docker/docker-in-action.md)
### Git
- [Git 核心概念总结](./tools/git/git-intro.md)
- [GitHub 实用小技巧总结](./tools/git/github-tips.md)
## 系统设计
- [系统设计常见面试题总结](./system-design/system-design-questions.md)
- [设计模式常见面试题总结](./system-design/design-pattern.md)
### 基础
- [RestFul API 简明教程](./system-design/basis/RESTfulAPI.md)
- [软件工程简明教程简明教程](./system-design/basis/software-engineering.md)
- [代码命名指南](./system-design/basis/naming.md)
- [代码重构指南](./system-design/basis/refactoring.md)
- [单元测试指南](./system-design/basis/unit-test.md)
### 常用框架
#### Spring/SpringBoot (必看 :+1:)
**知识点/面试题总结** :
- [Spring 常见知识点&面试题总结](./system-design/framework/spring/spring-knowledge-and-questions-summary.md)
- [SpringBoot 常见知识点&面试题总结](./system-design/framework/spring/springboot-knowledge-and-questions-summary.md)
- [Spring/Spring Boot 常用注解总结](./system-design/framework/spring/spring-common-annotations.md)
- [SpringBoot 入门指南](https://github.com/Snailclimb/springboot-guide)
**重要知识点详解**：
- [IoC & AOP 详解（快速搞懂）](./system-design/framework/spring/ioc-and-aop.md)
- [Spring 事务详解](./system-design/framework/spring/spring-transaction.md)
- [Spring 中的设计模式详解](./system-design/framework/spring/spring-design-patterns-summary.md)
- [SpringBoot 自动装配原理详解](./system-design/framework/spring/spring-boot-auto-assembly-principles.md)
#### MyBatis
[MyBatis 常见面试题总结](./system-design/framework/mybatis/mybatis-interview.md)
### 安全
#### 认证授权
- [认证授权基础概念详解](./system-design/security/basis-of-authority-certification.md)
- [JWT 基础概念详解](./system-design/security/jwt-intro.md)
- [JWT 优缺点分析以及常见问题解决方案](./system-design/security/advantages-and-disadvantages-of-jwt.md)
- [SSO 单点登录详解](./system-design/security/sso-intro.md)
- [权限系统设计详解](./system-design/security/design-of-authority-system.md)
- [常见加密算法总结](./system-design/security/encryption-algorithms.md)
#### 数据脱敏
数据脱敏说的就是我们根据特定的规则对敏感信息数据进行变形，比如我们把手机号、身份证号某些位数使用 \* 来代替。
#### 敏感词过滤
[敏感词过滤方案总结](./system-design/security/sentive-words-filter.md)
### 定时任务
[Java 定时任务详解](./system-design/schedule-task.md)
### Web 实时消息推送
[Web 实时消息推送详解](./system-design/web-real-time-message-push.md)
## 分布式
### 理论&算法&协议
- [CAP 理论和 BASE 理论解读](./distributed-system/protocol/cap-and-base-theorem.md)
- [Paxos 算法解读](./distributed-system/protocol/paxos-algorithm.md)
- [Raft 算法解读](./distributed-system/protocol/raft-algorithm.md)
- [Gossip 协议详解](./distributed-system/protocol/gossip-protocl.md)
### RPC
- [RPC 基础知识总结](./distributed-system/rpc/rpc-intro.md)
- [Dubbo 常见知识点&面试题总结](./distributed-system/rpc/dubbo.md)
### ZooKeeper
> 这两篇文章可能有内容重合部分，推荐都看一遍。
- [ZooKeeper 相关概念总结(入门)](./distributed-system/distributed-process-coordination/zookeeper/zookeeper-intro.md)
- [ZooKeeper 相关概念总结(进阶)](./distributed-system/distributed-process-coordination/zookeeper/zookeeper-plus.md)
### API 网关
- [API 网关基础知识总结](./distributed-system/api-gateway.md)
- [Spring Cloud Gateway 常见知识点&面试题总结](./distributed-system/spring-cloud-gateway-questions.md)
### 分布式 ID
- [分布式 ID 常见知识点&面试题总结](./distributed-system/distributed-id.md)
- [分布式 ID 设计指南](./distributed-system/distributed-id-design.md)
### 分布式锁
- [分布式锁介绍](https://javaguide.cn/distributed-system/distributed-lock.html)
- [分布式锁常见实现方案总结](https://javaguide.cn/distributed-system/distributed-lock-implementations.html)
### 分布式事务
[分布式事务常见知识点&面试题总结](./distributed-system/distributed-transaction.md)
### 分布式配置中心
[分布式配置中心常见知识点&面试题总结](./distributed-system/distributed-configuration-center.md)
## 高性能
### 数据库优化
- [数据库读写分离和分库分表](./high-performance/read-and-write-separation-and-library-subtable.md)
- [数据冷热分离](./high-performance/data-cold-hot-separation.md)
- [常见 SQL 优化手段总结](./high-performance/sql-optimization.md)
- [深度分页介绍及优化建议](./high-performance/deep-pagination-optimization.md)
### 负载均衡
[负载均衡常见知识点&面试题总结](./high-performance/load-balancing.md)
### CDN
[CDN（内容分发网络）常见知识点&面试题总结](./high-performance/cdn.md)
### 消息队列
- [消息队列基础知识总结](./high-performance/message-queue/message-queue.md)
- [Disruptor 常见知识点&面试题总结](./high-performance/message-queue/disruptor-questions.md)
- [RabbitMQ 常见知识点&面试题总结](./high-performance/message-queue/rabbitmq-questions.md)
- [RocketMQ 常见知识点&面试题总结](./high-performance/message-queue/rocketmq-questions.md)
- [Kafka 常常见知识点&面试题总结](./high-performance/message-queue/kafka-questions-01.md)
## 高可用
[高可用系统设计指南](./high-availability/high-availability-system-design.md)
### 冗余设计
[冗余设计详解](./high-availability/redundancy.md)
### 限流
[服务限流详解](./high-availability/limit-request.md)
### 降级&熔断
[降级&熔断详解](./high-availability/fallback-and-circuit-breaker.md)
### 超时&重试
[超时&重试详解](./high-availability/timeout-and-retry.md)
### 集群
相同的服务部署多份，避免单点故障。
### 灾备设计和异地多活
**灾备** = 容灾 + 备份。
- **备份**：将系统所产生的的所有重要数据多备份几份。
- **容灾**：在异地建立两个完全相同的系统。当某个地方的系统突然挂掉，整个应用系统可以切换到另一个，这样系统就可以正常提供服务了。
**异地多活** 描述的是将服务部署在异地并且服务同时对外提供服务。和传统的灾备设计的最主要区别在于“多活”，即所有站点都是同时在对外提供服务的。异地多活是为了应对突发状况比如火灾、地震等自然或者人为灾害。
## Star 趋势
![Stars](https://api.star-history.com/svg?repos=Snailclimb/JavaGuide&type=Date)
## 公众号
如果大家想要实时关注我更新的文章以及分享的干货的话，可以关注我的公众号“**JavaGuide**”。
![JavaGuide 官方公众号](https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png)