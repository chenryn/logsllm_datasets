1
1
1
1
2
1
Invisible Designated Conﬁrmer Signatures without Random Oracles
15
1. CV erV sends c00 = Hash(c0).
2. CV erC sends T0, ··· , T4, and
1
D0
1 = grx,1
D1 = grx,1
D5 = T rx,1
1
1
, D0
gry,2
2
2 = gry,1
grx,2
2
, D2 = gry,1
1 , D6 = T ry,1
gr1
1
, D3 = grx,2
2
2
3
, D0 = v−r0ur1+r2α
1
, D4 = gry,2
,
1 , D7 = T rx,2
gr2
3
4
1 , D8 = T rx,2
gr3
4
gr4
1
ur3+r4α
2
,
where s1 = s0x1, s2 = s0y1, s3 = s0x2, s4 = s0y2.
3. CV erV checks T0 6= 1, sends c0.
The remaining moves are straightforward and omitted. Cases 2):
2 ∧ (u−1
ConZKP{(z1, z2, R, p0, q0) : d3 = gz1
1 gz2
⇔ ConZKP{(z1, z2, R, p0, q0) : d3 = gz1
2 ∧ T3 = (u−1
∧ (2p0 + 1)(2q0 + 1) = n ∧ gmhR 6= φ}
1 gz2
∧ T2 = uz1
3 T2)p0
∧ 1 = T q0
∧ 1 = T q0
∧ T n
∧ T5 = (gmφ−1)s0hs1}
1 uz2
2 gR
2 ∧ T1 = gs0
g−s2gs0
1 g−s3
1 uz2
2 gR
3 g−s3
1 = T 4q0+2
0 gs2
∧ 1 = T p0
T 2q0+1
1 g−s2
g−4s3−2s0
3 uz1
1
1
1
3
4
1
4
3 ∧ 1 = T R
∧ T4 = T p0
1 g−s1
1 gs0
1
4
0 )p0q0 = 1
where CV erC uses s1 = Rs0, s2 = s0p0, s3 = s0q0, and CV erV checks
T5 6= 1. The four-move concurrent zero-knowledge protocol is straightfor-
ward and omitted. The case 3):
2 ∧ (u−1
ConZKP{(z1, z2, R, p0, q0) : d3 = gz1
3 uz1
1 gz2
∧ (2p0 + 1)(2q0 + 1) = n ∧ u−1
0 6= 1}
3 uz1
1 uz2
⇔ ConZKP{(z, R, p0, q0) : d3 = gz1
2 ∧ T1 = gs0
1 gz2
2 ∧ T3 = (u−1
∧ T2 = uz1
g−s2gs0
3 T2)p0
∧ 1 = T q0
∧ 1 = T q0
1 g−s2
1 g−s3
∧ T5 = u−s0
g−4s3−2s0
∧ T n
3 us4
1 g−s5
∧ 1 = T z1
}
1 uz2
2 gR
3 g−s3
1 = T 4q0+2
1 g−s4
0 gs2
∧ 1 = T p0
T 2q0+1
∧ 1 = T z2
2 gR
1
1
1
4
1
3
4
1
1
1 uz2
2 gR
0 )p0q0 = 1
3 ∧ 1 = T R
∧ T4 = T p0
1 us5
2 gs1
1 g−s1
1 gs0
1
4
0
where CV erC uses s1 = Rs0, s2 = s0p0, s3 = s0q0, s4 = s0z1, s5 = s0z2,
and CV erV checks T5 6= 1. The four-move concurrent zero-knowledge
protocol is straightforward and omitted.
The soundness of our instantiation can be proved in the standard two-
stage model [4, 13] for authentications. The zero-knowledge comes from
using the standard four-move concurrent zero-knowledge protocol [14, 22].
Random oracles are not used in these proofs. The security reduction is to
the DDH assumption in QRn2 for our protocols. Note this assumption is
included in Theorem 4’s assumptions.
16
Victor K. Wei
B Proof Sketch of Theorem 4
The DCS scheme DCSGMR+ is modiﬁed from [15]’s by only one step:
Including more parameters to the input of ¯H. Therefore, the proofs of
corectnesses, validity, unforgeability, and non-transferability are all simi-
lar to that of the proofs in [15]. We omit them here. It remains to prove
the invisibility. Note [15] did not even claim the invisibility. There is noth-
ing in their proof to base our proof on. We have to prove our invisibility
of the DCS from scratch.
Setup: Let (˜g, ˜ga, ˜gb, ˜gc) be the DDH problem instance, where a, b,
c are unknown. The simulator B invokes CKGS and CKGC to set up.
B sets g1=˜g, g2 = ˜gb. ˜ga and ˜gc will be used in the gauntlet below.
Simulating oracles: CSig is computed using skS. B uses the modi-
ﬁed skC to compute CV erC as follows: checks σ3 is a valid signature on
(σ − 1, σ2) by pkS; checks v = ux1+αy1
where α is computed via
1 u−z2
Eq. (5), computes R equalling the partial discrete logarithm of u3u−z1
with base g0; checks u3u−z1
0 ; checks gmhR = φ. If all pass indi-
cate to conﬁrm. Else indicate to disavow. Using skC, B can complete the
computations of CV erC in conirmation or disavow.
1 u−z2
2 = gR
gx2+αy2
2
1
2
0
1
ˆux2+αy2
2
2 gmga,b
Simulation deviation: It is obviously negligible.
Gauntlet: A selects a message mga,1. B selects a random message
mga,0, ﬂips a fair coin b, computes the gauntlet DCS σga = (σga,1, σga,2,
σga, 3), σga,1 = gmga,bhRga, σga,3 = Sign(skS, (σga,1, σga,2) ), σga,2 =
(ˆu1, ˆu2, ˆu3, ˆu4) where ˆu1 = ˜ga, ˆu2 = ˜gc, ˆu4 = ˆux1+αy1
, ˆu3 =
uz1
1 uz2
, α is computed via Eq. (5). The gauntlet DCS is σga = (φga
= gmga,bhRga, σga,2, Sign(pkS, (φga, σga,2) ), where σga,2 = (ˆu1, ˆu2, ˆu3,
ˆu4).
Extraction: Eventually A returns ˆb. B answers yes to the DDH prob-
), R is the partial discrete logarithm of u3u−z1
lem instance if ˆb = 1. Else, the DDH answer is no.
We need to prove that when (g1, u1, g2, u2) is not a DDH-yes tuple
1 u−z2
or (g1, u1, d3, u3g−R
w.r.t. base g0, is not a DDH-yes tuple, it is hard for A to compute in
the real world a putative DCS containing these parameters to pass the
checkings u4
. This can be done by extending Cramer
and Shoup [11]’s proof technique of the smooth projective family adapted
to our new deﬁnition of α in Eq. (5). This part of our proof is quite
complicated. We leave it to the full version of our paper.
It remains to consider CV erC queries (m0, σ0, pkS0, pkC) that can
be transformed from the gauntlet tuple (mga,b, σga, pkS, pkC) that can
help A distinguish b: There are two cases: (Case 1): Inputs to α in Eq.
?= ux1+αy1
ux2+αy2
2
0
1
2
Invisible Designated Conﬁrmer Signatures without Random Oracles
17
(5) in the transformed DCS and the gauntlet DCS are identical. Thn a
contradiction can be shown that the same method can be used to compute
a query to the Cramer-Shoup encryption’s decryption oracle and break
the Cramer-Shoup encryption. (Case 2): α’s inputs are diﬀerent from the
gauntlet DCS to the transformed DCS. Then σ2 must remain intact in
order to be relavant to b. These putative tuples (m0, σ0, pkS0, pkC) will
result in disavowal by B.
ut