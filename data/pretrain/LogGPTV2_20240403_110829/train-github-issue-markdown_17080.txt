In the following program:
    package main
    import "fmt"
    func main() {
        const A = 0xfffffffffffffffff // error
        // const A = 0x8000000000000000 // error
        // const A = 0x7fffffffffffffff // ok
        a := string(A)
        for i, r := range a {
            fmt.Printf("%d: %x\n", i, r)
        }
    }
The compiler issues error message `overflow in int -> string`.
Form the Go Spec https://golang.org/ref/spec#Conversions
> A constant value x can be converted to type T in any of these cases:
>
>   * x is an integer constant and T is a string type. The same rule as for
> non-constant x applies in this case.
>
...
> A non-constant value x can be converted to type T in any of these cases:
>
>   * x is an integer or a slice of bytes or runes and T is a string type.
>
...
> Conversions to and from a string type
>
>   1. Converting a signed or unsigned integer value to a string type yields a
> string containing the UTF-8  
>  representation of the integer. Values outside the range of valid Unicode
> code points are converted to  
>  "\uFFFD".
>
According to the above, the conversion should succeed, with the resulting
string containing the UTF-8 encoding of `0xfffd`.
`gccgo` does not issue an error and behaves as in the spec.