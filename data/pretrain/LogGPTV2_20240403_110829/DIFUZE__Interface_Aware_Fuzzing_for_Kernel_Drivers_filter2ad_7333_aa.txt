title:DIFUZE: Interface Aware Fuzzing for Kernel Drivers
author:Jake Corina and
Aravind Machiry and
Christopher Salls and
Yan Shoshitaishvili and
Shuang Hao and
Christopher Kruegel and
Giovanni Vigna
Jake Corina
UC Santa Barbara
PI:EMAIL
Yan Shoshitaishvili
Arizona State University
PI:EMAIL
DIFUZE: Interface Aware Fuzzing for Kernel Drivers
Christopher Salls
UC Santa Barbara
PI:EMAIL
Aravind Machiry
UC Santa Barbara
PI:EMAIL
Shuang Hao
University of Texas at Dallas
PI:EMAIL
Giovanni Vigna
UC Santa Barbara
PI:EMAIL
Christopher Kruegel
UC Santa Barbara
PI:EMAIL
ABSTRACT
Device drivers are an essential part in modern Unix-like systems to
handle operations on physical devices, from hard disks and print-
ers to digital cameras and Bluetooth speakers. The surge of new
hardware, particularly on mobile devices, introduces an explosive
growth of device drivers in system kernels. Many such drivers are
provided by third-party developers, which are susceptible to se-
curity vulnerabilities and lack proper vetting. Unfortunately, the
complex input data structures for device drivers render traditional
analysis tools, such as fuzz testing, less effective, and so far, research
on kernel driver security is comparatively sparse.
In this paper, we present DIFUZE, an interface-aware fuzzing
tool to automatically generate valid inputs and trigger the execu-
tion of the kernel drivers. We leverage static analysis to compose
correctly-structured input in the userspace to explore kernel dri-
vers. DIFUZE is fully automatic, ranging from identifying driver
handlers, to mapping to device file names, to constructing complex
argument instances. We evaluate our approach on seven modern
Android smartphones. The results show that DIFUZE can effectively
identify kernel driver bugs, and reports 32 previously unknown vul-
nerabilities, including flaws that lead to arbitrary code execution.
CCS CONCEPTS
• Security and privacy → Mobile platform security; Vulnera-
bility scanners;
KEYWORDS
Fuzzing, Kernel drivers, Interface aware
1 INTRODUCTION
Smartphones and other mobile devices occupy a central part of our
modern lives. They are the last thing many of us interact with at
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134069
night and the first thing we reach for in the morning. We use them
to carry out financial transactions and to communicate with family,
friends, and coworkers, and allow them to record location, audio,
and video. Increasingly, they are used not just for personal and
commercial purposes, but also to facilitate government activity.
The importance of the security of these devices is obvious. If
an adversary compromises the device that has become our gate-
way to the connected world, he gains an enormous amount of
power. Therefore, much effort has gone into ensuring the secu-
rity of smartphones. This security is achieved using sophisticated
application sandboxing, by leveraging many attack mitigation tech-
niques targeting userspace applications (such as Address Space
Layout Randomization, Data Execution Protection, and SELinux),
and by making security a first-tier development goal. However,
there is a weakness in the security of mobile devices: their kernels.
Unlike userspace applications, for which several vulnerability
mitigation techniques are available and used, the kernels of modern
operating systems are relatively vulnerable to attack despite avail-
able protections [43]. As a result, as vulnerabilities in userspace
applications become rarer, attackers turn their focus on the kernel.
For example, over the last three years, the share of Android vulner-
abilities that are in kernel code increased from 4% (in 2014) to 39%
(in 2016) [62], highlighting the need for techniques to detect and
eliminate kernel bugs.
The kernel can itself be split into two types of code: core kernel
code and device drivers. The former is accessed through the system
call (syscall) interface, allowing a user to open files (the open()
system call), execute programs (the execve() system call), and so
on. The latter, on POSIX-compliant systems (such as Linux/An-
droid and FreeBSD/iOS which cover over 98% of the mobile phone
market), are typically accessed via the ioctl interface. This inter-
face, implemented as a specific system call, allows for the dispatch
of input to be processed by a device driver. According to Google,
85% of the bugs reported against the Android kernel (which is a
close fork of Linux) are in driver code written by third-party de-
vice vendors [62]. With the continually growing number of mobile
devices in use, and with the criticality of their security, automated
approaches to identify vulnerabilities in device drivers before they
can be exploited by attackers are critical.
While automatic analysis of the system call interface has been
thoroughly explored by related work [28, 34], ioctls have been
neglected. This is because, while interaction with syscalls follows a
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2123unified, well-defined specification, interaction with ioctls varies
depending on the device driver in question. Specifically, the ioctl
interface comprises structured arguments for each of a set of valid
commands, with both the commands and the data structures be-
ing driver-dependent. While this has security implications (i.e.,
pointers, dynamically-sized fields, unions, and sub-structures in
these structures increase the chance of a vulnerability resulting
from the mis-parsing of the structure), it also makes these devices
hard to analyze. Any automated analysis of such devices must be
interface-aware, in the sense that, to be effective, it must interact
with ioctls using the command identifiers and data structures
expected by them.
In this paper, we present DIFUZE, a novel combination of tech-
niques to enable interface-aware fuzzing, and facilitate the dynamic
exploration of the ioctl interface provided by device drivers. DI-
FUZE performs an automated static analysis of kernel driver code to
recover their specific ioctl interface, including the valid commands
and associated data structures. It uses this recovered interface to
generate inputs to ioctl calls, which can be dispatched to the ker-
nel from userspace programs. These inputs match the commands
and structures used by the driver, enabling efficient and deeper ex-
ploration of the ioctls. The recovered interface allows the fuzzer
to make meaningful choices when mutating the data: i.e., typed
fields like pointers, enums, and integers should not be handled as
simply a sequence of bytes. DIFUZE stresses assumptions made by
the drivers in question and exposes serious security vulnerabilities.
In our experiments, we analyzed seven modern mobile devices and
found 36 vulnerabilities, of which 32 were previously unknown (4
vulnerabilities found by DIFUZE were patched during the course
of our experiments), ranging in severity from flaws that crash the
device in question causing Denial of Service (DoS) to bugs that can
give the attacker complete control over the phone.
In summary, our paper makes the following contributions:
Interface-aware fuzzing. We design a novel approach to facili-
tate the fuzzing of interface-sensitive targets, such as the
ioctl kernel driver interface on POSIX systems.
Automated driver analysis. We developed a fuzzing framework,
that can automatically analyze the kernel sources of a device.
For every driver the tool identifies all the ioctl entry points,
as well as the corresponding structures, and device file names.
We apply our technique to analyze seven devices, identifying
36 vulnerabilities. These vulnerabilities, ranging from DoS to
code execution flaws, demonstrate the efficacy and impact of
our approach. We are in the process of responsibly disclosing
these vulnerabilities to the respective driver vendors.
DIFUZE prototype. We are releasing DIFUZE as an open-source
tool at www.github.com/ucsb-seclab/difuze in the hope that
it will be useful for future security researchers.
2 BACKGROUND AND RELATED WORK
In this section, we will explain the unique challenges that we must
overcome (and why these challenges make existing state-of-the-
art systems inapplicable to ioctl fuzzing), introduce the platform
(Android) in which our fuzzing tool operates, and compare previous
work on finding program vulnerabilities.
2.1 POSIX Device Drivers
The POSIX standard specifies an interface for the interaction of
userspace applications with device drivers. This interface supports
interaction with the device through device files, which are special
files that represent the userspace presence of the kernel-resident
device drivers. After a userspace application obtains a handle to
the device file with the open() system call, there are multiple ways
in which the application can interact with these files.
Different devices require different system calls to fulfill their
functionalities. For example, read(), write(), and seek() are pre-
sumably applicable for a hard drive device file (showing the con-
tents of the hard drive as, essentially, a single file). For an audio
device, read() might read raw audio data from the microphone, and
write() might write raw audio data to the speakers, and seek()
might be unused.
However, some functionality cannot be implemented through
traditional system calls. For example, for the audio device, how
would a userspace application configure the sampling rate at which
to record or play audio? Such out-of-band actions are supported by
the POSIX standard through the ioctl() interface1. This system
call allows drivers to expose functionality that is hard to model as
a traditional file.
To support generality, the ioctl() interface can receive arbi-
trary driver-specified structures as input. It’s C prototype looks like
int ioctl(int file_descriptor, int request, ...), where
the first argument is the open file descriptor, the second argument
is an integer commonly known as the command identifier, and the
type and quantity of the remaining arguments are dependent on
the driver and the command identifier.
Challenges. The aforementioned property makes ioctl system
calls especially susceptible to vulnerabilities: First, unlike with
read() and write(), the data provided to an ioctl() call are of-
ten instances of extremely complex, non standard, data structures.
Parsing of such structures is not trivial, and any mistake could
introduce critical vulnerabilities directly into the kernel context.
Second, the generality of the data structure also makes the analysis
of ioctl() interfaces difficult, as an analyst must have knowledge
of how the driver in question processes different command identi-
fiers, and what type of data it expects for the optional arguments.
These are the core problems that we aim to solve. We designed
DIFUZE to automatically recover command identifiers and structure
information, build the required complex data structures, and fuzz
devices with ioctl() interfaces to find security vulnerabilities,
with minimal human intervention.
2.2 Android Operating System
Android is designed as an operating system for smartphones. A
recent report shows that Android has dominated the smartphone
OS market, with an 86.8% share in 2016 Q3 [15]. Although Android
designers take cautious steps to safeguard the devices, there are
several vulnerabilities in smartphone systems [20]. Given the pop-
ularity and increasing security problems of Android, we choose
1In the original standard, this interface was only designed for certain types of devices,
but this has changed in modern implementations.
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2124Android systems as our main target platform to evaluate our anal-
ysis approach. Note that DIFUZE also works on other Unix-like
systems.
Android is based on the Linux kernel, which has a monolithic
architecture. Although kernel modules (such as device drivers)
provide a certain level of modularity, the design principle is still
monolithic, in the sense that the entire kernel runs in a single mem-
ory space, with all its parts being equally privileged [65]. Therefore,
any vulnerability in a device driver could compromise the entire
kernel. Indeed, in 2016 more than 80% of the bugs reported in the
Android kernel were from driver code written by vendors [62]. The
Android Open Source Project allows vendors (e.g., Sony, HTC) to
customize Android kernel drivers to support new hardware, such
as digital cameras, accelerometers, or GPS devices. Because security
often takes a back seat to time-to-market for such companies, their
development process is susceptible to the introduction of security
vulnerabilities. Thankfully, the openness of the Android system
makes the source code publicly available under the GNU General
Public License [22]. This facilitates our approach, as it provides
access to a high-level, semantically rich information about a driver.
2.3 Fuzz Testing
Fuzzing is a well-known technique for program testing by gen-
erating random data as input to the programs [45]. It has drawn
much research attention, such as SPIKE [3], Valgrind [47], and
PROTOS [55].
Fuzzing. The key prospect of fuzzing is to generate “mostly-valid”
inputs to execute a target program, exercise a wide range of func-
tionality, and trigger some corner case leading to a vulnerability.
Dynamic taint tracking is a widely-used strategy to generate po-
tential inputs. Dowser [30] and BuzzFuzz [21] use taint tracking
to generate inputs that are more likely to trigger certain classes
of vulnerabilities. However, for ioctl functions, which require
highly constrained inputs, these techniques are less effective. Ap-
proaches based on taint analysis exist to recover the input format
used by the underlying program [13, 40], but they cannot recover
the cross-dependency between values, e.g., given a particular com-
mand identifier an ioctl handler will expect a further argument of
a particular type.
Evolutionary techniques represent another common input gen-
eration strategy in fuzzing systems [19, 41, 69]. VUzzer [53], and
SymFuzz [12] combine static analysis with mutation-based evolu-
tionary techniques to efficiently generate inputs. However, these
techniques are ineffective in generating highly constrained input.
DIFUZE solves this problem by first collecting possible ioctl com-
mand values and then fuzzing only the unconstrained values with
the expected input format.
If the input format of a program is known, fuzzing can be en-
hanced with a specification of the valid inputs. Peach [49] is one
of the industry standard tools. However, it cannot generate live
data (i.e., data containing active pointers to other data), and, as we
show in Section 8, many device drivers require input structures that
contain pointers. Grammar-based techniques have been used to
fuzz file formats [29], interpreters [23, 31], and compilers [18, 37],
but these techniques require inputs to have a fixed format.
Kernel and driver fuzzing. Fuzzing operating system interfaces
or system calls is a practical approach to testing the operating sys-
tem kernel [28, 34]. Most drivers use ioctl functions, a POSIX
standard, to interact with userspace. As discussed in Section 3.1,
ioctls are complex, and they require specific command values
and data formats generated by users. Identifying valid command
values and their associated data structures are the two key problems
in ioctl fuzzing. Some tools have been developed to test ioctl
interfaces for Windows kernels, such as iofuzz [17], ioattack [44],
ioctlbf [67] and ioctlfuzzer [16]. However, these tools depend on
the extensive logging and tracing of information provided by the
Windows kernel, as well as the format of ioctl commands spe-
cific to Windows. Moreover, many of these tools are simplistic in
nature. They involve simply attaching to processes and hooking
the Windows ioctl call. Once hooked, the tool mutates the values
when a call is made.This is lacking in several aspects e.g. the pro-
cesses may not exercise the full capability of the drivers, and you
cannot know the type information of the incoming data. To solve
this problem, DIFUZE analyzes the source code of device drivers
to identify valid commands and the corresponding data structure.
The analysis techniques that we use require no modification to the
actual device.
The extraction of valid ioctl commands was previously at-
tempted by Stanislas, et al., but the state-of-the-art system was
unable to scale to real-world kernel modules [38]. Conversely, as
we show in Section 8, DIFUZE scales to (and finds vulnerabilities
in) large kernel modules on real devices.
Trinity [34] and syzkaller [28] are specifically developed for
Linux syscall fuzzing. As we show in Section 8, they perform badly
when fuzzing ioctl handlers of device drivers. Although syzkaller
uses additional instrumentation techniques, like Kernel Address
Sanitizer [26], to detect more bugs, these techniques cannot be
directly used on vendor devices, since they require the analyst to
reflash the devices using custom firmware. Several approaches [8,
42, 58, 59, 64] concentrate on fuzzing specifically-chosen syscalls
and drivers. However, they only focus on specific functions and
cannot be generalized to other syscalls and drivers. DIFUZE is the
first completely automated system that can be generalized to fuzz
all Linux kernel drivers on a device running an unmodified kernel.
2.4 Other Analyses
Aside from fuzzing, there are two other analysis techniques, sym-
bolic execution, and static analysis, that are related to our work.
We will introduce these mechanisms and explain how they affect
our design.
Symbolic execution. Symbolic execution is a technique that uses
symbolic variables to generate constrained input and satisfy com-
plex checks [10].
DART [24], SAGE [25], Fuzzgrind [11] and Driller [61] combine
symbolic execution with random testing to increase the code cov-
erage. BORG [48] uses symbolic execution to generate inputs more
likely to trigger buffer overreads. Engineering issues of performing
symbolic execution on the raw devices and the fundamental path
explosion problem (made all the worse by complex system kernels)
render these techniques impractical for kernel drivers.
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2125Figure 1: The DIFUZE approach diagram. DIFUZE analyzes the provided kernel sources using a composition of analyses to
extract driver interface information, such as valid ioctl commands and argument structure types. It synthesizes instances of
these structures and dispatches them to the target device, which triggers ioctl execution with the given inputs and, eventually,
finds crashes in the device drivers.
Static analysis. Static analysis is a popular technique to find pro-
gram vulnerabilities without executing the program in question [2].
To maximize precision, these techniques typically require source
code to perform the analysis. Since many system kernels (includ-
ing the Linux kernel) and device drivers are open-source, kernel