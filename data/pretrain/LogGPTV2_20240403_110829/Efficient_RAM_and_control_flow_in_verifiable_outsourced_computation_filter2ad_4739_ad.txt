is determined at runtime. The programmer might naively try
to make the program suitable for Pantry by upper-bounding
both loops separately, but this would come at a quadratic cost,
specifically MAX1 · LIMIT unrolled iterations (where LIMIT is
the maximum possible value that get_limit can return).
An alternative transformation is shown in Figure 6b. The
compiler creates one outer loop that implements a state ma-
chine; the state is which loop or block the program is in. In more
detail,when state transitions from 0 to 1 in the flattened code,
this corresponds in the original code to onset of the inner loop;
similarly, the transition from 1 to 2 corresponds to the inner
loop’s exit. If j reaches the original outer loop’s bound before
dummy reaches MAXITERS (for example, because of data de-
pendent logic in ), state becomes 3, which causes
implicit self-transitions for the remainder of execution, corre-
sponding to termination of the original outer loop.
Note that the MAXITERS bound on dummy cannot be automat-
ically determined for general data dependent code. The pro-
grammer supplies this bound when annotating the loop (§4.1).
Transformations for while and do are similar to the example
just given. All of these are inspired by similar, but not identical,
transformations in the context of parallelizing compilers [42,
48, 50, 65, 79] (see Section 6).
break and continue. Figure 7 depicts Buffet’s handling of
break. The flattened code achieves the desired control flow as
follows: (1) the break statement is replaced by an assignment
while j 
// data dependent bound
limit = get_limit(j)
for i in [0, limit):
// data dependent break
if condition(i, j):
break
state = dummy = 0
while dummy 
limit = get_limit(j)
i = 0
state = 1
else:
state = 3
if state == 1:
if i 
i++
else:
state = 2
if state == 2:
state = 0
dummy++
(a) Original.
(b) Flattened.
FIGURE 7—Flattening a loop containing break statements. The flat-
tened pseudocode emulates the control flow of break.
updating state; and (2)  is if guarded such that it
is not executed after a break.
Similarly, for a continue before : (1) the
continue statement is replaced by an assignment increment-
ing the inner loop counter; and (2)  is if guarded.
Generalizing the transformation. The flattening transforma-
tion for a single nested loop generalizes directly to deeper
nesting and sequential inner loops. In fact, the Buffet compiler
flattens arbitrary loop nests, with break and continue.
The key observation is that each loop comprises one or more
states, with state transitions determined by the loop condition-
als. When the compiler reaches a loop to be flattened, it con-
structs a control flow graph in which the vertices correspond
to segments of code inside which control flow is unconditional.
The edges of this graph correspond to control flow decisions
connecting these code segments; the compiler determines these
decisions by analyzing the loop body and conditionals. For
example, when the compiler encounters a break statement, it
(1) splits the enclosing vertex into two vertices, corresponding
to code before and after the break statement, and (2) adds two
new edges to the graph, one that connects from the pre-break
vertex to the post-break vertex (no break executed), and the
other connecting the pre-break vertex to the vertex containing
the next statement after loop execution ends (break executed).
After the compiler has assembled this control flow graph,
it emits corresponding C code. This code comprises a stati-
cally bounded while loop containing a sequence of states and
transitions as in the examples above. The states are code se-
quences corresponding to the vertices of the control flow graph,
with if guards that test the value of a state variable. Transi-
tions, which correspond to the graph edges, are expressed as
assignments that update the state variable.
9
4.3 Discussion
With regard to control flow, the three systems (Pantry, BCTV,
and Buffet) can be seen as points on the same design spectrum,
with different tradeoffs. We first cover their similarities and
then their differences.
All three systems require static bounds on execution length.
Pantry requires the programmer to impose bounds on all loops,
nested or otherwise (§2.2, Step 1); BCTV requires the pro-
grammer to set t to bound the processor’s loop (§2.3); and for
each flattened loop in Buffet, the programmer must provide a
bound (§4.1).
In addition, the three systems handle conditionality in similar
ways. For each if statement in the original computation, Pantry
includes constraints to represent both branches (§2.2, Fig. 1).
In BCTV, the constraint set for each processor step includes
separate constraints for every instruction type (§2.3, Fig. 2).
Buffet has aspects of BCTV and Pantry: the constraint set for
each iteration of a flattened loop includes separate constraints
for every case within the switch. Note that Buffet and BCTV
support data dependent control flow using essentially the same
mechanism: each iteration of a flattened loop and each fetch-
decode-execute step is a state machine transition, where the
choice of the next state is dynamically determined.
The source of these correspondences is the underlying con-
straint formalism, specifically that constraints project time and
conditionality onto space. Indeed, constraints are equivalent to
(Boolean or arithmetic) acyclic circuits, where the flow through
the circuit is analogous to the passage of time.
One distinction between Buffet and BCTV is that the former
transforms sections of the program into a state machine, while
the latter simulates the (finite state) execution of a general-
purpose CPU on which the program runs. Buffet’s approach is
consistent with paying only for what is needed, first, because
Buffet’s compiler tailors the transition function to the loop, and
second, because the Buffet compiler applies the transformation
only as directed by the programmer. Buffet thus pays lower
overhead than BCTV in almost all cases.8
Another apparent distinction between the systems concerns
programmability. BCTV elegantly supports not only all of C (as
noted throughout) but also in principle any high-level program-
ming language. Indeed, this programmability was the motiva-
tion for BCTV’s simulated CPU abstraction [15, §1.1]. Buffet,
by contrast, does not expose a machine interface; hence, it has
no concept of a software-controlled program counter, and thus
does not easily support language features that involve choos-
ing arbitrary control flow at run time. In the context of C, this
means that Buffet does not support function pointers. (Buffet
also lacks goto support, as noted earlier, but this lacuna is not
fundamental.) We discuss programmability further in Section 7.
8In principle, Buffet’s tailored transition function could incur greater overhead
than BCTV’s simulated CPU. However, we believe that this is not a problem
in practice, as such behavior occurs only in degenerate cases (extremely deep
nesting and complex conditionals). Further, all programs can be compiled
with overhead at most equal to BCTV’s: the compiler could determine which
approach is less costly and produce constraints accordingly [76].
10
Implementation and empirical evaluation
5
This section answers the following questions:
1. How do Pantry and BCTV compare on (a) straight line
computations and (b) random memory access?
2. What is the gain of Buffet’s RAM abstraction (§3)?
3. What is the gain of Buffet’s flattening transformation (§4)?
We base this evaluation on implementations of Buffet, Pantry,
and BCTV, running on several benchmarks.
Our principal focus is on the various front-ends. As noted
earlier (§2.4, Fig. 3), the costs imposed by the front-end appear
in the number of constraints that the back-end works over. To
provide context, we will also report end-to-end costs, although
these depend upon both front-end and back-end performance.
The summary of the comparison is as follows. For straight
line computations, Buffet matches Pantry’s performance; both
outperform BCTV by 2–4 orders of magnitude. For RAM oper-
ations, Buffet improves on BCTV’s performance by 1–2 orders
of magnitude, and on Pantry’s by 2–3 orders of magnitude. For
data dependent looping, Buffet again exceeds BCTV’s perfor-
mance by 1–2 orders of magnitude.
5.1
Our Buffet implementation is built on the Pantry codebase [1].
We extended the compiler to provide support for RAM oper-
ations using C syntax. (Pantry’s compiler requires arrays and
pointers to be statically determined, and RAM operations re-
quire explicit annotation [28, §3].)
Implementation
The Pantry and Buffet compilers operate in two stages. The
first stage transforms programs into an intermediate set of con-
straints and pseudoconstraints, which abstract operations that
require multiple constraints (for example, inequalities). In the
second stage, the compiler expands pseudoconstraints and adds
annotations (§2.2).
Buffet enhances the first stage by adding new pseudocon-
straints corresponding to RAM operations (§3.1), and by opti-
mizing the generation of these pseudocontraints (§3.2). In the
second stage, Buffet adds new annotations for RAM operations.
To support the flattening transformation (§4), Buffet uses
a separate C source-to-source compiler based on Clang [4];
we modify Clang to support the buffet::fsm attribute (§4.1).
The output of this compiler is the input to the compiler de-
scribed just above.
The modifications to the Pantry compiler comprise 1700
lines of Java, 400 lines of Python, and 340 lines of C++. The
source-to-source compiler comprises 1000 lines of C++.
5.2 Baselines and benchmarks
Pantry. Our Pantry evaluation uses the released codebase [1].
BCTV. No source code was available for BCTV’s front-end
or its simulated CPU architecture, TinyRAM [17], so we built
an independent implementation. Our implementation differs
from the original in several ways, described below. However, as
discussed later (§5.3), the two have comparable performance.
First, our instruction set is slightly different from the pub-
lished description [17], with the aim of optimizing the cost of
computation (Ψ)
Matrix multiplication
PAM clustering [75]
Fannkuch benchmark [6]
Pointer chasing
Merge sort
Boyer-Moore delta1 table
generation [25]
Knuth-Morris-Pratt
string search [51]
RLE decoding
CSR sparse matrix–vector
multiplication [42]
size
m×m
m points, d dimensions,
k medoids, ℓ iterations
m elements, ℓ iterations
type
straight line
straight line
straight line
m dereferences
m elements
m length pattern,
k length alphabet
m length pattern,
k length string
output length m
m×m matrix,
k nonzero elements
RAM
RAM
RAM
data dependent
data dependent
data dependent
FIGURE 8—Benchmark applications.
Ccpu (§2.3) while retaining equivalent functionality. In brief, we
borrow the zero register concept from MIPS [59], obviating
several of the TinyRAM architecture’s conditional instructions.
We also shorten immediate operands such that instructions fit in
one rather than two memory words, and update the immediate
semantics of several operations (e.g., SUB) to compensate.
Second, we use a different method to generate the simulated
CPU’s constraint set (Ccpu, Cperm, and Cck-sort). Whereas the
original implementation uses a hand-optimized “circuit gadget”
approach [16, §2.3.3], we implement the CPU logic, permuta-
tion network, and coherence checks (§2.3) in the Pantry subset
of C, and compile this code with the Pantry compiler. To ac-
commodate this, we added support for a new pseudoconstraint,
exo_compute, to the Pantry prover. This primitive instructs
P to execute a program on a simulated CPU and to retain an
execution-ordered transcript, which P then uses (together with
switch settings that it computes) as the satisfying assignment.
Third, to permute memory operation tuples (§2.3, §3.1), our
implementation uses a Beneš network [20], whereas BCTV
uses a Waksman network [13]. The former requires a power-of-
2 sized input; the latter does not.
Finally, during compilation (§2.1, step 1), our software ana-
lyzes the simulated CPU’s assembly code and removes from
Ccpu the logic corresponding to unused instructions. For many
programs, this results in substantially fewer constraints.9
Our BCTV implementation comprises 280 lines of Pantry-C
for the simulated CPU and memory constraints, and 7200 lines
of Java for the CPU’s assembler, disassembler, and simulator.
BCGTV [16] report on a compiler from standard C to the
simulated CPU’s assembly (Ψ → xΨ, §2.3). We did not reim-
plement this; instead, we programmed the benchmarks, de-
scribed below, directly in assembly.