### System Information
- **OpenCV Version:** 3.4.5
- **Operating System/Platform:** Ubuntu 16.04
- **Compiler:** GCC/G++ & CMake
- **CUDA Version:** 9.2

### Detailed Description
I have attempted to run the `video_reader.cpp` sample provided by OpenCV, using versions ranging from 3.4.5 to 4.0.1. However, none of these versions seem to work perfectly. I am using an AWS EC2 instance with a Tesla K80 GPU that supports CUDA 9.2/9.1. I am unsure whether the issue is with OpenCV or the AWS EC2 instance. I have also researched related issues, such as #6231, but they remain unresolved.

The sample code demonstrates both CPU and CUDA methods. The CPU method works perfectly (I modified `cv::imshow("CPU", frame)` to `cv::imwrite(name, frame)`), but the CUDA method does not. I have confirmed that CUDA and NVCUVID are enabled with CMake.

### Steps to Reproduce
#### OpenCV Build Information
- **Video I/O:**
  - **DC1394:** YES (ver 2.2.4)
  - **FFMPEG:**
    - **avcodec:** YES (ver 56.60.100)
    - **avformat:** YES (ver 56.40.101)
    - **avutil:** YES (ver 54.31.100)
    - **swscale:** YES (ver 3.1.101)
    - **avresample:** YES (ver 2.1.0)
  - **GStreamer:**
    - **base:** YES (ver 1.8.3)
    - **video:** YES (ver 1.8.3)
    - **app:** YES (ver 1.8.3)
    - **riff:** YES (ver 1.8.3)
    - **pbutils:** YES (ver 1.8.3)
  - **libv4l/libv4l2:** 1.10.0 / 1.10.0
  - **v4l/v4l2:** linux/videodev2.h
- **Parallel framework:** pthreads
- **Trace:** YES (with Intel ITT)
- **Other third-party libraries:**
  - **Intel IPP:** 2019.0.0 Gold [2019.0.0] at `/home/ubuntu/opencv/opencv-3.4.5/release/3rdparty/ippicv/ippicv_lnx/icv`
  - **Intel IPP IW:** sources (2019.0.0) at `/home/ubuntu/opencv/opencv-3.4.5/release/3rdparty/ippicv/ippicv_lnx/iw`
  - **Eigen:** NO
  - **Custom HAL:** NO
  - **Protobuf:** build (3.5.1)
- **NVIDIA CUDA:** YES (ver 9.0, CUFFT CUBLAS NVCUVID FAST_MATH)
  - **NVIDIA GPU arch:** 30 35 37 50 52 60 61 70
  - **NVIDIA PTX archs:**
- **OpenCL:** YES (no extra features)
  - **Include path:** `/home/ubuntu/opencv/opencv-3.4.5/3rdparty/include/opencl/1.2`
  - **Link libraries:** Dynamic load
- **Python 3:**
  - **Interpreter:** `/usr/bin/python3` (ver 3.5.2)
  - **Libraries:** `/usr/lib/x86_64-linux-gnu/libpython3.5m.so` (ver 3.5.2)
  - **numpy:** `/usr/local/lib/python3.5/dist-packages/numpy/core/include` (ver 1.15.4)
  - **install path:** `/usr/lib/python3/dist-packages/cv2/python-3.5`
- **Python (for build):** `/usr/bin/python2.7`

#### Code Snippet
```cpp
cv::Mat frame;
cv::VideoCapture reader(fname);
cv::cuda::GpuMat d_frame;
cv::Ptr<cv::cudacodec::VideoReader> d_reader = cv::cudacodec::createVideoReader(fname);

// CPU method
for (;;)
{
    tm.reset(); tm.start();
    if (!reader.read(frame))
        break;
    tm.stop();
    cpu_times.push_back(tm.getTimeMilli());
    cpu_frame_count++;
    const std::string name("./test.jpg");
    cv::imwrite(name, frame);
    if (cv::waitKey(3) > 0)
        break;
}

// CUDA method
for (;;)
{
    tm.reset(); tm.start();
    if (!d_reader->nextFrame(d_frame))
        break;
    tm.stop();
    gpu_times.push_back(tm.getTimeMilli());
    gpu_frame_count++;
    const std::string name("./test_cuda.jpg");
    cv::imwrite(name, d_frame); // This line triggers the getMat_ problem.
    if (cv::waitKey(3) >= 0)
        break;
}
```

### Error Log
```
terminate called after throwing an instance of 'cv::Exception'
  what():  OpenCV(3.4.5) /home/ubuntu/opencv/opencv-3.4.5/modules/core/src/matrix_wrap.cpp:118: error: (-213:The function/feature is not implemented) You should explicitly call download method for cuda::GpuMat object in function 'getMat_'
Aborted (core dumped)
```

### Additional Notes
- The CPU method works as expected.
- The CUDA method fails when attempting to write the `d_frame` to a file.
- The error indicates that the `getMat_` function is not implemented for `cuda::GpuMat` and suggests explicitly calling the `download` method.