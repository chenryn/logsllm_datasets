### Attractive Method for Generating (Near) Optimal Codes for Finite \( n \)

**Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04)  
0-7695-2052-9/04 $ 20.00 © 2004 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021, at 11:51:25 UTC from IEEE Xplore. Restrictions apply.**

An attractive method that yields (near) optimal codes for finite \( n \) would be exceptionally useful. This is highlighted by the fact that one-level Systematic codes vastly outperform Gallager codes for small \( n \), even though equivalent Gallager codes can be constructed from the Systematic codes.

### 6.3 Question 3

**How do the published distributions fare in producing good codes for finite values of \( n \)?**

In the following two graphs, we limit our scope to \( R = \frac{1}{2} \), as the results for the other rates are similar. First, we present the performance of the three code generation methods for the three coding methods for small \( n \) in Figure 7. As in the other graphs, the best-performing instance for each value of \( n \) is plotted.

**Figure 7: Performance of various codes for \( n \leq 150 \) when \( R = \frac{1}{2} \)**

- **Monte Carlo**
- **Published**
- **Derived**

| \( O/F \) | 1.25 | 1.20 | 1.15 | 1.10 | 1.05 | 1.00 |
|-----------|------|------|------|------|------|------|
| \( n \)   | 50   | 100  | 150  |      |      |      |

- **Systematic**
- **Gallager**
- **IRA**

For all coding methods, the Monte Carlo generation method produces better codes than the published distributions when \( n \) is roughly less than 15. Beyond this point, the exponential number of possible \(\Lambda/P\) combinations drastically reduces the effectiveness of Monte Carlo code generation. From \( n \approx 15 \) until \( n \) reaches the high double-digits, the performance of the published codes is worse than the derived codes. As \( n \) grows past 100, the derived and published codes perform roughly equally. Thus, for small \( n \) (\( < 100 \)), the answer to Question 3 is clearly inadequate.

**Figure 8: Performance of published distributions for \( n \leq 150 \) when \( R = \frac{1}{2} \)**

- **Same Code, Same Rate**
- **Same Code, Different Rate**
- **Different Code**
- **Best Instance**

| \( O/F \) | 1.20 | 1.15 | 1.10 | 1.05 | 1.00 |
|-----------|------|------|------|------|------|
| \( n \)   | 50   | 100  | 150  |      |      |

- **Systematic**
- **Gallager**
- **IRA**

In all three graphs, the worst codes were generated from distributions designed for the particular code but for a different rate. In both the Gallager and IRA codes, the best codes were generated from distributions designed for the code and rate. For Systematic codes, the best codes were clearly derived from distributions designed for other codes. Clearly, the derivation of good Systematic codes for small \( n \) is not well understood at this point.

**Figure 9: Performance of all codes and rates for large \( n \)**

For large \( n \), we plot the best published and derived codes for all rates and coding methods in Figure 9. Note that in each graph, the y-axis has a different scale. There are several interesting features of these graphs.

- **Syst. Published**
- **Syst. Derived**
- **Gallager Published**
- **Gallager Derived**
- **IRA Published**
- **IRA Derived**

| \( O/F \) | 1.25 | 1.20 | 1.15 | 1.10 | 1.05 | 1.00 |
|-----------|------|------|------|------|------|------|
| \( n \)   | 100  | 200  | 300  | 400  | 500  | 600  |

- **Rate = \(\frac{1}{3}\)**
- **Rate = \(\frac{1}{2}\)**
- **Rate = \(\frac{2}{3}\)**

In the middle graph, where \( R = \frac{1}{2} \), the published distributions perform best relative to the derived distributions. This is not surprising, since the bulk of the published distributions (46 of the 80) are for \( R = \frac{1}{3} \). For \( R = \frac{1}{3} \), it is not surprising that the published distributions fare poorly in relation to the derived distributions, since only 10 of the 80 published distributions are for \( R = \frac{1}{3} \), and these are only for Gallager codes. It is interesting that given this fact, the derived IRA codes significantly outperform the others. It is also interesting that the published IRA codes for \( R = \frac{2}{3} \) perform so poorly in comparison to the derived codes.

As in the results on small \( n \), in analyzing which distributions produce good graphs for large \( n \), we found that for IRA and Gallager codes, the best codes are produced by distributions designed specifically for the code and rate. For Systematic codes, the best codes are produced by distributions for other codes. We omit the data here for brevity. It may be obtained in [PT03].

### 6.4 Question 4

**Is there a great deal of random variation in code generation from a given probability distribution?**

This depends on the distribution and how it is utilized. In Table 2, we select six probability distributions to test their variation in code generation. For each distribution, we generated over 1000 random codes for \( n = 125,000 \), and present a digest of the results in Figure 10. For each distribution, we draw a Tukey plot [Tuf83], which shows the quartiles for the data and its mean.

**Table 2: Range of code generation for given probability distributions**

| Source | Code | Designed Rate | Used Rate | \(\Lambda\) Range | \(P\) Range |
|--------|------|---------------|-----------|------------------|-------------|
| S99    | Gallager | \(\frac{2}{3}\) | \(\frac{1}{2}\) | 2 | 2 |
| S99*   | Gallager | \(\frac{1}{2}\) | \(\frac{1}{2}\) | 6 | 6 |
| RU03   | Gallager | \(\frac{1}{2}\) | \(\frac{1}{2}\) | 7 | 2-13 |
| U03    | IRA     | \(\frac{1}{2}\) | \(\frac{1}{2}\) | 2-100 | 2-100 |
| R03    | IRA     | \(\frac{1}{2}\) | \(\frac{1}{2}\) | 3-1M | 11-30K |
| L97A   | Syst.   | \(\frac{2}{3}\) | \(\frac{2}{3}\) | 10-11 | 8 |

The first distribution, S99, from [Sho99], is for a regular graph where the left nodes each have two outgoing edges, and the right nodes have six incoming edges. As such, we expect little random deviation, which is borne out by the experiments. (We do expect some, because of the random nature of graph generation and of the downloading simulation).

**Figure 10: Tukey plot of code generation variation**

| Statistic | Max | 3rd Quartile | Mean | Median | 1st Quartile | Min |
|-----------|-----|--------------|------|--------|--------------|-----|
| \( O/F \) | 2.0 | 1.9          | 1.8  | 1.7    | 1.6          | 1.5 |

- **Max**
- **3rd Quartile**
- **Mean**
- **Median**
- **1st Quartile**
- **Min**

| \( O/F \) | 2.0 | 1.9 | 1.8 | 1.7 | 1.6 | 1.5 | 1.4 | 1.3 | 1.2 | 1.1 | 1.0 |

- **n** | 100 | 200 | 300 | 400 | 500 | 600 |

This structured and detailed presentation should make the content more clear, coherent, and professional.