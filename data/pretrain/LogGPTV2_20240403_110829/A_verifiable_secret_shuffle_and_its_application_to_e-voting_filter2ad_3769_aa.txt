title:A verifiable secret shuffle and its application to e-voting
author:C. Andrew Neff
A Veriﬁable Secret Shufﬂe and its Application to E-Voting
C. Andrew Neff
VoteHere, Inc.
Bellevue, WA 98004
3101 Northup Way
Suite 250
PI:EMAIL
ABSTRACT
We present a mathematical construct which provides a cryp-
tographic protocol to veriﬁably shuﬄe a sequence of k modu-
lar integers, and discuss its application to secure, universally
veriﬁable, multi-authority election schemes. The output of
the shuﬄe operation is another sequence of k modular in-
tegers, each of which is the same secret power of a corre-
sponding input element, but the order of elements in the
output is kept secret. Though it is a trivial matter for the
“shuﬄer” (who chooses the permutation of the elements to
be applied) to compute the output from the input, the con-
struction is important because it provides a linear size proof
of correctness for the output sequence (i.e. a proof that it
is of the form claimed) that can be checked by an arbitrary
veriﬁers. The complexity of the protocol improves on that of
Furukawa-Sako[16] both measured by number of exponenti-
ations and by overall size.
The protocol is shown to be honest-veriﬁer zeroknowledge
in a special case, and is computational zeroknowledge in
general. On the way to the ﬁnal result, we also construct a
generalization of the well known Chaum-Pedersen protocol
for knowledge of discrete logarithm equality ([10], [7]). In
fact, the generalization specializes exactly to the Chaum-
Pedersen protocol in the case k = 2. This result may be of
interest on its own.
An application to electronic voting is given that matches
the features of the best current protocols with signiﬁcant
eﬃciency improvements. An alternative application to elec-
tronic voting is also given that introduces an entirely new
paradigm for achieving Universally Veriﬁable elections.
Keywords:
Electronic Voting, Universal Veriﬁability, Anony-
mous Credentials, Mix-net, Permutation, Veriﬁable Mix, Veri-
ﬁable Shuﬄe, Honest-veriﬁer, Zeroknowledge.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’01, November 5-8, 2001, Philadelphia, Pennsylvania, USA.
Copyright 2001 ACM 1-58113-385-5/01/0011 ...$5.00.
1.
INTRODUCTION
The notion of a shuﬄe of a collection of objects, records, or
tokens is simple and intuitive, and useful examples abound
in various daily human activities. A gambler in a casino
knows that among the cards in his hand, each will be one
of 52 unique values, and that no one else at the table will
have duplicates of the ones he holds. He does not, however,
have any knowledge of how the cards are distributed, even
though he may have recorded the exact card order before
they were shuﬄed by the dealer.
In the context of electronic data, the problem of achiev-
ing the same kind of random, yet veriﬁable permutation of
an input sequence is surprisingly diﬃcult. The problem is
that the data itself is either always visible to the auditor,
or it isn’t. If it is, then the correspondence between input
records and output records is trivial to reconstruct by the
auditor, or other observer. If it isn’t, then input and output
records must be diﬀerent representations of the same under-
lying data. But if the output is diﬀerent enough (that is,
encrypted well enough) that the auditor cannot reconstruct
the correspondence, then how can the auditor be sure that
the shuﬄer did not change the underlying data in the pro-
cess of shuﬄing?
Most of the paper is devoted to giving an eﬃcient (linear)
method for solving this problem in an important context
– ElGamal, or Diﬃe-Hellman encrypted data. In order to
make the exposition as clear and concise as possible, the ma-
jority of the paper explicitly refers to the speciﬁc case where
the operations are carried out in a prime subgroup of Z∗
p, the
multiplicative group of units modulo a large prime, p. How-
ever, the only properties of the underlying (multiplicative)
group that we use is that the associated Diﬃe-Hellman prob-
lem is intractable. Thus, the shuﬄe protocol is also useful
when the ElGamal cryptosystem is implemented over other
groups such as elliptic curves.
The general Boolean proof techniques of [5] and [11] can
also be used to construct a proof with the same properties,
however, the resulting proof size (complexity) is quadratic,
or worse, in the size of the input sequence.
The technique of this paper also oﬀers several advantages
over the cut-and-choose technique used in [26]. In this ap-
proach, the size of proof is dependent on the probability of
a cheating prover that is required to satisfy all participants.
In the shuﬄe protocol of this paper, this cheating proba-
bility is essentially k/q, where k is the number of elements
to be shuﬄed, and q is the size of the subgroup of Z∗
p in
which the elements are encrypted. Although no analysis of
the proof size dependence on cheating probability is done in
116[26], it appears that, in order to obtain similarly low cheat-
ing probability, it will need to be orders of magnitude larger
than the size of the proof given in this paper. (Moreover, if
the [26] protocol is implemented non-interactively, the cheat-
ing probability would need to be chosen exceedingly small,
because a malicious participant might use considerable oﬀ-
line computation to generate a forged proof by exhaustive
search. This of course, could be the case with the protocol
of this paper as well, but the probability k/q is, for all prac-
tical values of k and q, certainly small enough – even for
oﬄine attacks.)
The results of this paper provide for several ways to imple-
ment a universally veriﬁable election protocol. Some of these
are presented in the ﬁnal sections. In this context, it is worth
comparing the elegant homomorphic election protocol of [7].
That protocol works well when ballots have only questions
of a simple “choose (at most) m of n” type. This eﬀectively
precludes “write-in” responses, as well as “proportional type”
questions where the voter is expected to indicate answers in
preferential order, and questions are tabulated in accordance
with this preference. (Theoretically, proportional type ques-
tions can be handled by mapping each valid permutation of
selections to a single yes/no response. However, in practice
this is infeasible unless the number of choices is quite small.)
A couple of somewhat less important disadvantages of the
[7] scheme are that it expands vote data size considerably,
and that it requires a voter validity proof. This proof further
expands the vote data size by about an order of magnitude,
and is unattractive from a practical perspective, because it
presumes special purpose code to be running on the voter’s
computer.
The shuﬄe protocols are constructed entirely from ele-
mentary arithmetic operations. They are thus simple to im-
plement, and are imminently practical for the anonymous
credential application described.
1.1 Comparison to previous results
The number of exponentiations required to construct the
proof is 8k + 5, where as the protocol of Furukawa-Sako[16]
requires 18k + 18, which itself is a signiﬁcant improvement
over the roughly 642k exponentiations required by Sako-
Kilian[26] and the 22k log k exponentiations required by Abe-
Hoshino[1]([2]).
In the special case where the shuﬄer, or
prover, knows the encrypted data, only k + 4 exponentia-
tions are required by the present protocol. The construc-
tion of this paper also has advantages when measured by
size, or length, which is 8k + 5 modular integers, or group
elements. In the case of Zp implementation, most of these
are “smaller” integers – typically 160 bits – though some of
them are “larger” integers – typically 1024 bits. Furukawa-
Sako[16] claim their proof size is 211k bits, and that the
sizes for for Sako-Kilian[26] and Abe-Hoshino[1][2] respec-
tively are 218k and 214k log k bits.
It is not clear at this
time exactly how these size estimates compare with those
of this paper, since they seem to have left out a dependence
on the bit size of an integer. However, a rough count of the
integers used in their protocol, seems to indicate more than
8k + 5.
All estimates of the eﬃciency of other papers are taken
from [16]. However, in the case of [26] and [1]([2]) they may
be conservative for a non-interactive implementation of the
protocol.
1.2 Applications to voting
The voting application that occurs immediately is that
which employs the usual tabulation/mixing center approach
to provide anonymity. In this setting, the protocols of this
paper oﬀer important advantages. They are much more ef-
ﬁcient, and allow the mixing centers to be completely inde-
pendent of the authorities who hold some share of the key
necessary to decrypt ballots.
Perhaps, however, a more valuable and exciting applica-
tion of the new protocol is for creating “anonymous creden-
tials”. A member of an authorized group, identiﬁed only by
a set of DSA, or Diﬃe-Hellman public keys, can authenticate
group membership, and/or sign in a one time way, without
revealing his/her individual identity. This leads to a novel
solution to the voting problem that is universally veriﬁable,
but does not require any special set of “authorities” in or-
der to tabulate. It also oﬀers a better privacy model to the
voter, and speeds tabulation enormously since ballots do not
need to be encrypted/decrypted. In eﬀect, instead of mixing
encrypted vote cyphertexts after ballots have been received
at the vote collection center, voter credentials are mixed be-
fore the start of the election. This mixing can naturally be
done by the voters themselves to achieve “anonymous au-
thentication”. (See section 6.1.) (It should be noted that
the mixing could also be done by a set of authorities, thus
providing a more eﬃcient means to implement a threshold
privacy election. One where, again, ballots do not need to
be encrypted/decrypted.)
2. NOTATION
In the following, unless explicitly stated otherwise, n will
be a positive integer, p and q will be prime integers, publicly
known. Arithmetic operations are performed in the modular
ring Zp (or occasionally Zn), and g ∈ Zp will have (prime)
multiplicative order q. (So, trivially, q | (p − 1).) In each
proof protocol, P will be the prover (shuﬄer) and V the
veriﬁer (auditor).
We recall the Chaum-Pedersen proof of equality for dis-
crete logarithms. For G, X, H, Y ∈ Zp this is a proof of
knowledge for the relation
logG X = logH Y
(1)
It is not known to be zero-knowledge, however it is known
to be honest-veriﬁer zeroknowledge.
In the next section,
we will give a natural multi-variable generalization of this
protocol which also has these properties. These are suﬃcient
for our main application where the veriﬁer is implemented
via the Fiat-Shamir heuristic. (See [15] and [7].)
Definition 1. An instance of this proof, as above, will
be denoted by
CP (G, X, H, Y ) .
Definition 2. For ﬁxed g ∈ Z∗
operator on (cid:104)g(cid:105) × (cid:104)g(cid:105) deﬁned by
p, let ⊗g be the binary
logg (x ⊗g y) = logg x logg y
for all x, y ∈ (cid:104)g(cid:105). Alternatively
ga ⊗g gb = gab = (ga)b = (gb)a
117for all a, b ∈ Zq. Following the conventions used for sum-
mations and multiplications, we also use the notation
g Xi = X0 ⊗g X1 ⊗g ··· ⊗g Xk
ki=1
We refer to this operation as logarithmic multiplication base,
g.
3. PROOFS FOR ITERATED LOGARITH-
MIC MULTIPLICATION
For the rest of this section, all logarithmic multiplications
will be computed relative to a ﬁxed element g, and hence we
will omit the subscript in notation. The following problem
is fundamental to the shuﬄe protocols which are to come
later.
In each of the notations in the preceding deﬁnition, the sub-
script g may be omitted when its value is clear from context.
Remark 1. Notice that
logG X = logH Y ⇐⇒ G ⊗g Y = H ⊗g X
(2)
i=1 and {Yi}k
Iterated Logarithmic Multiplication Problem: Two
sequences {Xi}k
i=1 are publicly known. The
prover, P, also knows ui = logg Xi and vi = logg Yi for all
i, but these are unknown to the veriﬁer, V. P is required to
convince Vof the relation
We note the following collection of well know results since
they will be heavily used in the remainder of the paper.
Lemma 1. Let f (x) ∈ Zq[x], be a polynomial of degree d.
Then there are at most d values z1, . . . , zd−1 ∈ Zq such that
f (zi) = 0.
Corollary 1. Let f (x) , g(x) ∈ Zq[x] be two monic poly-
nomials of degree at most d, with f (cid:54)= g. Then there are at
most d − 1 values z1, . . . , zd−1 ∈ Zq such that f (zi) = g(zi).
Corollary 2. Let f (x) , g(x) ∈ Zq[x] be two monic poly-
nomials of degree at most d, with f (cid:54)= g. If t ∈R Zq (t is
selected at random from Zq), then
P ({t : f (t) = g(t)}) ≤ d − 1
q
Corollary 3. Let f (x) , g(x) ∈ Zq[x] be any two poly-
nomials of degree at most d. Then for every constant R (cid:54)=
0, there are at most d values, z1(R), . . . , zd(R), such that
f (zi(R)) = R g(zi(R)).
Definition 3. Let f (x) be a polynomial in Zq[x]. We
denote by χf the (unordered) set of all roots of f .
= { t ∈ Zq : f (t) = 0}
.
χf
Definition 4. If Λ ⊂ Zq, and R ∈ Zq, we write
R Λ
= { t ∈ Zq : t = Ru , u ∈ Λ}
.
(4)
Corollary 4. Let f (x) , g(x) ∈ Zq[x] be any two poly-
nomials of degree at most d. Fix constants, R (cid:54)= 0, γ (cid:54)= 0,
and δ (cid:54)= 0. If t ∈R Zq, then
P ({t : f (γt) = R g(δt)}) ≤ d
q
Lemma 2. Let Zk
space over Zq, and ﬁx v = (v1, . . . , . . . vk) ∈ Zk
r ∈R Zk
q is chosen at random, then
q be the standard k-dimensional vector
q , v (cid:54)= 0. If
P ({r : v · r = 0}) =
1
q
Definition 5. Let M = (mij) be a k × l matrix. We
denote the ith row vector of M by ρi(M ) and the jth column
vector of M by τj(M ). That is
Xi =
ki=1
Yi
ki=1
(7)
without revealing any information about the secret loga-
rithms ui and vi.
The protocol we give is precisely a higher dimensional
generalization of the Chaum-Pedersen protocol discussed at
the beginning of section 2. In fact, we will see that in the
case k = 2, the protocol is exactly the Chaum-Pedersen
protocol. The presentation will be considerably simpliﬁed
by restricting the problem instance to a case where
Xi (cid:54)= 1 , Yi (cid:54)= 1 ∀1 ≤ i ≤ k
(8)
Clearly, if any of these inequalities do not hold, then there
is no sense in constructing a proof since equation (7) can be
seen to hold or not by inspection. (If Xi = 1 then xi = 0
and so equation (7) holds if and only if Yj = 1 for some j.
Similarly with the roles of X and Y reversed.)
(3)
Iterated Logarithmic Multiplication Proof Protocol
(ILMPP) :