          v11 -= 16;
        }
      }
      return __readfsqword(0x28u) ^ v16;
将用户名转换成为的ASCII码数组复制到该函数的V8，执行该函数的401362函数，进入401362函数分析
    unsigned __int64 __fastcall sub_401362(__int64 a1, unsigned __int8 *a2, _BYTE *a3)
    {
    unsigned __int8 *encode_username; // ST10_8
      _BYTE *encode_username2; // [rsp+8h] [rbp-168h]
      unsigned __int64 v6; // [rsp+28h] [rbp-148h]
      unsigned __int64 s; // [rsp+30h] [rbp-140h]
      unsigned __int64 v8; // [rsp+38h] [rbp-138h]
      unsigned __int64 v9; // [rsp+40h] [rbp-130h]
      unsigned __int64 v10; // [rsp+48h] [rbp-128h]
      __int64 v11; // [rsp+130h] [rbp-40h]
      __int64 v12; // [rsp+138h] [rbp-38h]
      __int64 v13; // [rsp+140h] [rbp-30h]
      __int64 v14; // [rsp+148h] [rbp-28h]
      unsigned __int64 v15; // [rsp+158h] [rbp-18h]
      encode_username = a2;
      encode_username2 = a3;
      v15 = __readfsqword(0x28u);
      v6 = 0LL;
      memset(&s, 0, 0x120uLL);
      s = ((unsigned __int64)encode_username[2] > 14)) ^ v5 ^ (4LL * ((v3 > 30)) ^ (((unsigned __int64)(unsigned int)v5 > 22)) ^ (((unsigned __int64)((v3 > 8));
    }
4个异或后的数字将其分成4组，在下图表中执行4次变换，重新生成4个字符
并将这四个字符合并成新的字符，最后一步过长。。就不分析了。。。但是从这一遍流程
走下来，我们大概就能看出来是某种特定的加密方式，尤其是这个字母表更让人确信不疑。
如果了解SM4加密就知道其位SM4加密了，而那串未知的数字就是经过处理的密钥。
[SM4加密参考教程](https://github.com/yang3yen/pysm4)
密钥加密的函数在主函数401738也就是我们之前未分析的函数进入该函数看一下
    unsigned __int64 __fastcall sub_401738(_DWORD *a1, __int64 a2)
    {
      unsigned __int64 v2; // ST18_8
      v2 = __readfsqword(0x28u);
      *a1 = 1;
      sub_401063((__int64)(a1 + 2), (unsigned __int8 *)a2);
      return __readfsqword(0x28u) ^ v2;
    }
再进入401063函数
    unsigned __int64 __fastcall sub_401063(__int64 a1, unsigned __int8 *a2)
    {
      unsigned __int64 v2; // ST28_8
      unsigned __int64 v3; // ST30_8
      unsigned __int64 v4; // ST38_8
      __int64 v5; // r12
      unsigned __int64 v7; // [rsp+18h] [rbp-168h]
      unsigned __int64 v8; // [rsp+40h] [rbp-140h]
      unsigned __int64 v9; // [rsp+48h] [rbp-138h]
      unsigned __int64 v10; // [rsp+50h] [rbp-130h]
      unsigned __int64 v11; // [rsp+58h] [rbp-128h]
      unsigned __int64 v12; // [rsp+168h] [rbp-18h]
      v12 = __readfsqword(0x28u);
      v7 = 0LL;
      v2 = ((unsigned __int64)a2[6] << 8) | ((unsigned __int64)a2[5] << 16) | ((unsigned __int64)a2[4] << 24) | a2[7];
      v3 = ((unsigned __int64)a2[10] << 8) | ((unsigned __int64)a2[9] << 16) | ((unsigned __int64)a2[8] << 24) | a2[11];
      v4 = ((unsigned __int64)a2[14] << 8) | ((unsigned __int64)a2[13] << 16) | ((unsigned __int64)a2[12] << 24) | a2[15];
      v8 = (((unsigned __int64)a2[2] << 8) | ((unsigned __int64)a2[1] << 16) | ((unsigned __int64)*a2 << 24) | a2[3]) ^ 0xA3B1BAC6;
      v9 = v2 ^ 0x56AA3350;
      v10 = v3 ^ 0x677D9197;
      v11 = v4 ^ 0xB27022DC;
      while ( v7 <= 0x1F )
      {
        v5 = *(&v8 + v7);
        *(&v8 + v7 + 4) = v5 ^ sub_400F3F(*(&v8 + v7 + 3) ^ *(&v8 + v7 + 2) ^ *(&v8 + v7 + 1) ^ qword_406D80[v7]);
        *(_QWORD *)(a1 + 8 * v7) = *(&v8 + v7 + 4);
        ++v7;
      }
      return __readfsqword(0x28u) ^ v12;
在这里我们看到了系统参数FK分别为
0xA3B1BAC6  
0x56AA3350  
0x677D9197  
0xB27022DC  
与其异或的就是密钥为主函数的v17将其整理一下  
0xDA98F1DA  
0X312AB753  
0XA5703A0B  
0XFD290DD6
密钥也便可以得知。
接着分析主函数的4067BD
    unsigned __int64 __fastcall sub_4067BD(__int64 a1, __int64 a2, int a3)
    {
      int v4; // [rsp+Ch] [rbp-34h]
      int i; // [rsp+2Ch] [rbp-14h]
      char s[2]; // [rsp+30h] [rbp-10h]
      unsigned __int64 v7; // [rsp+38h] [rbp-8h]
      v4 = a3;
      v7 = __readfsqword(0x28u);
      for ( i = 0; i < v4; ++i )
      {
        sprintf(s, "%02X", *(unsigned __int8 *)(i + a1));
        *(_WORD *)(a2 + 2 * i) = *(_WORD *)s;
      }
      return __readfsqword(0x28u) ^ v7;
    }
#### 变种base64
将加密之后的ASCII码转换为字符，之后进入400AA6函数
    _BYTE *__fastcall sub_400AA6(char *a1, __int64 a2)
    {
      _BYTE *result; // rax
      signed int v3; // edx
      char *v4; // rax
      __int64 v5; // rax
      __int64 v6; // rax
      __int64 v7; // rax
      __int64 v8; // rax
      signed int v9; // eax
      __int64 v10; // [rsp+0h] [rbp-50h]
      char *v11; // [rsp+8h] [rbp-48h]
      signed int v12; // [rsp+18h] [rbp-38h]
      signed int i; // [rsp+18h] [rbp-38h]
      signed int j; // [rsp+1Ch] [rbp-34h]
      int k; // [rsp+1Ch] [rbp-34h]
      void *ptr; // [rsp+20h] [rbp-30h]
      __int64 v17; // [rsp+28h] [rbp-28h]
      unsigned __int8 v18; // [rsp+30h] [rbp-20h]
      unsigned __int8 v19; // [rsp+31h] [rbp-1Fh]
      unsigned __int8 v20; // [rsp+32h] [rbp-1Eh]
      char v21; // [rsp+40h] [rbp-10h]
      char v22; // [rsp+41h] [rbp-Fh]
      char v23; // [rsp+42h] [rbp-Eh]
      char v24; // [rsp+43h] [rbp-Dh]
      unsigned __int64 v25; // [rsp+48h] [rbp-8h]
      v11 = a1;
      v10 = a2;
      v25 = __readfsqword(0x28u);
      v12 = 0;
      v17 = 0LL;
      ptr = malloc(1uLL);
      if ( !ptr )
        return 0LL;
      while ( 1 )
      {
        v6 = v10--;