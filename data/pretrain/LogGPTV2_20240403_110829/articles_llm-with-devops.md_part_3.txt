### MVP 试验与构建

#### 下游 API 格式（Spring、Django）

**Discover, Define, Delivery**

- **流程与语言工程**
- **数据与工程**
- **上下文与平台工程**

### 软件开发过程资产化与微调试验

- **MVP**
- **软件开发过程资产化**
- **上下文工程**

#### 资产的语言建模
- **增量引导指标设计**
- **持续反馈的平台工程**

### 探索阶段 (Discover)

- **API 示例**
- **基于私有化的LLM新工序**
  - 已有的软件过程资产（基于架构规范）
  - **挑战：**
    1. 定义概念
    2. 标准化流程
    3. 审视规范
    4. 过程资产
  - **新机遇？**
    - **资产的语言建模**
      - 探索适合于大语言模型的资产代码化形式
    - **功能需求**
      - 建模 API Spec
      - 源格式
        - **API Method | Request | Response | Error Response**
          - `/v3/alipay/boss/fnc/invoice/apply` (POST)
            - 200: `{ "resultset": "123" }`
            - 400: `{ "error": "String" }`
            - 500: `{}`
          - `/v3/alipay/boss/fnc/invoice/batchquery` (POST)
            - 200: `{}`
            - 400: `{ "error": "String" }`
            - 500: `{ "value": "" }`
          - `/v3/alipay/boss/fnc/invoice/query?invoice_id=123` (GET)
            - 200: `{}`
            - 400: `{ "error": "String" }`
            - 500: `{ "value": "" }`

### 定义阶段 (Define)

- **MVP Prompt 与微调试验**
  - **数据处理与优化**
    - 对已有数据进行标准化，生成指令格式数据集（反复多次）
    - 预期数据结果
      - 两种不同方式
      - 示例：
        ```json
        {
          "instruction": "生成 RESTful API 接口",
          "input": "查看账户收入,添加收入记录,修改收入记录,删除收入记录",
          "output": "## Enrichment API\n\n> Incomes\n| API | Method | Description | Request | Response | Error Response |\n| --- | --- | --- | --- | --- | --- |\n| /api/incomes/?page=1&account=uuid | GET | page: 1, account: uuid | [200: {}, 401: {\"code\": \"\", \"message\": \"\", \"request_id\": \"\"}], [400: {\"error\": \"String\"}]\n| …"
        }
        ```
  - **内部数据集不够时的解决方案**
    1. 模拟场景
    2. 收集公开数据集（如HuggingFace等）
    3. 降低人工成本
    4. 收集和公司内部的私有数据（整理）

- **设计增量引导指标**
  - 分阶段的微调目标：例如 5% -> 10%
  - **HumanEval 和 API Eval 量级评估**
    - 场景 | 数据 | 数据来源
    - 辅助功能需求 | 1k, 3k 个用户故事 | 结合公开搜集到的应用类
    - 微调及生成结果对比 | 10k, 20k, 40k, 80k 个代码片段 | 公开的代码数据集
    - 辅助编码 | 特定上下文 | 微调及生成结果对比
    - 辅助API设计 | 1k, 3k 个API spec | 业界各银行的开放银行API资料数据格式化后作为数据集
    - 基于 ChatGLM（6B）、LLaMA（7B）微调试验
    - 3k 能达到初步可用

### 交付阶段 (Delivery)

- **有限的上下文工程**
  - 提供足够丰富的上下文
  - 上下文的构建应该被当作是一个工程、策略，而不是一个简单的事情
  - Prefix (文件路径 + 其它文件 + 光标前代码) | Suffix (光标后代码) | 2048 上限
- **IDEA Prompt**
  - 潜在的相关信息生成
  - 参考来源：
    - [GitHub Copilot Explorer](https://github.com/thakkarparth007/copilot-explorer)
    - [GitHub Copilot](https://github.com/saschaschramm/github-copilot)
- **持续反馈的平台工程**
  - 与已有工具集成，构建起自动调优闭环，持续收集数据和反馈
  - 迭代调整建议
  - 更新格式
  - 迭代更新数据集或Prompt
- **BizDevOps 在工具平台**
  - 收集组织中已有需求资产
  - 微调定义代码化
  - 应用并记录采纳结果（如测试用例）
  - 转换为 LLM 格式规范及反馈信息
  - 代码化规范格式数据集
  - 集成数据
  - 训练管理工具
  - 各系统

### 未来展望

- **设计端到端实验**
- **验证可行性**
- **新工序假设**
- **软件工程流程重新梳理**
- **语言建模**
- **最好的大语言模型能带来什么？**
- **持续反馈的平台工程**
- **Showcase 工具链集成**
- **MVP 微调试验**
- **数据收集**
- **Test and review**
- **Analyse Manager Deploy**
- **如何工程化？**
- **Design Develop AI**
- **无缝集成到研发工具链**
- **AI BizDevOps**
- **探索如何把 AI 无缝集成到工具链中**
- **评估技术可行性和实施难度**
- **产品规划**
- **需求分析**
- **研发实现**
- **发布运维**
- **持续运营**

### 业务术语清单

- **特性功能流程图**
- **领域模型图**
- **部署脚本**
- **文案内容**
- **业务分析结果**
- **用户故事清单**
- **序列图**
- **发布说明**
- **营销图片文案**
- **专题画布/电梯演讲**
- **用户故事编写**
- **状态图**
- **产品说明文档**
- **营销视频脚本**
- **验收标准生成**
- **API接口定义**
- **FAQ**
- **评价分析结果**
- **低保真原型图**
- **测试代码**
- **MVP特性清单**
- **代码**
- **发布计划**
- **Chatbot IDE Copilot Plugin**
- **AutoDev示例**
- **BizDevOps工具台**
- **PS：先验证公开可用的 LLM 带来的提升**
- **对人才和组织结构的影响？**
- **如何看待 LLM**
  - **LLM as toolset**
  - **LLM as member**
  - **LLM as God**

欢迎一起探讨：[GitHub Unit Mesh](https://github.com/unit-mesh)