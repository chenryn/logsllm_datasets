最后会由sToRE_NAME指令将符号“xmlreader”与mport_from中搜索得到的结果
非常简单，其实就是在“xml.sax”对应的modul对象的名字空间中搜索符号
现在已经很清楚了，在IMPORT_FROM指令执行时，w是值为“xmlreader”的PyString-
import&as
return x;
PyObjeet *x;
PyErr_Format(PyExc
存放到当前的local名字空间中。
PUSH(X)E
深度探索动态语言核心技术
TOP(0:
GEPITEM(names,oparg);
Pystring_AsString(name));
import_Erom(Pyobject*y.Pyobject*name)
0（-1）
xmlreader as myreader
ionMatches(PyExc_AttributeError)) [
al1_
”，我们利用这个符号可以控制
---
## Page 415
14.4.5
代码清单14-12
对应的module对象（见代码清单1412）。
到为什么在stemer.py中的删除操作不会影响到sys.modules中的那个与stemermodule
module这个函数中，将进入pyImport_ExecCodeModuleex，在这个函数中，我们就能看
虚拟机将调用与py文件对应的加载操作1oad_sourcemodule。而在1oad_source
reload）来完成重新载入的动作。在buiitin_reloaa中，将最终调用1oad_module，
是我们通过“as”指定的符号“myreader”，而不再是“xmlreader”了。
析完全一致，只是在通过STORB_NAME指令向当前的1coal名字空间引入符号时，加入的
喏，
Pyobject
[import.c]
就是这个我们之前详细分析过的家伙。
*pathname)
假如stemer module是由py文件实现的module，那么在1oad_module中，Python
Python虚拟机最终将调用builtin module中的reloaa操作（对应函数builtin
CALL_FUNOTION
LOAD_NAME
oad(atemer)
IMPORT_NAME
在import动作中加入符号重命名的机制非常简单，动态加载的过程与我们之前的分
STORE_NAME
IMRORT_FROM
MPORTNAME
LOAD_CONST
/7[4]：以a作为 local 名宇空间和global 名字空间，最终调用pyEval_EvalFrame
d=PyModule_GetDict（m）;
PyObject
Pyobriect
//E1]:获得sys.modules
reload
工
*PyImport_ExecCodeModuleRx(ahar *name,PyObject co, char
*modules=Pyimport_GetModulaDiat(）;
d，
AadModule(name)
1（rxmlreader）)
Wv:
(stemer)
(reload)
(stemer
(stemer)
(euoN)
（-1)
(xmlreader)
xml
sax)
reloaded,
Python源码剖析
14.4Python中的import操作
we get
theoldmoduleback
一深度操索动态语言核心技术
385
---
## Page 416
Python源码剖析
14.5
14.4.6
386
代码清单14-13
例子是与module相关的，来回顾一下（见代码清单1413）
的包装而已。
[module2.py]
module2.show_owmer() //[1]
(module1.py]
代码，你会发现，这些操作其实就是对我们之前讨论的Python中import机制的核心函数
import module2
与之对应，没错，这个imp_methods正是在importc中。
暴露了我们之前所考察的用于import机制的核心接口。
机制，即在运行时动态地选择需要mport的对象，Python通过一个mp的内建module
中的aict的。
符号。如果有符号在源文件中被删除，那么这种删除是不会影响到stemer的module对象
owner
[import.c]
与module有关的名字空间问题
在“Pyhon虚拟机框架”一章中，当我们初次系统性地接触名字空间时，其中有一个
这里，我们就不再详细地剖析mp_methods了，有兴趣的读者可以参考Pyhon的源
我们说imp是一个内建module，那么根据我们现在的经验，一定有一个imp_methods
“"findLmodule",
在py源代码文件中的import语句是静态的，其实，Python也提供了动态的import
在代码清单14-12的[41处，只是向stemer.py对应的module对象中更新或添加了新的
第14章Python模块的动态加载机制
("loadmodule",
内建module：imp
(NULIN,
=RyEvalEvalcode((PyCodeObject）eo,d,d）
"modulel"
深度探索动态语言核心技术
向a中更新或添加新的符号
NULLY
imp_load_module,METH_VARARGs,doc_load_module)
imp_load_source,
METH_VARARGs,doc_find_module)
METH_VARARGS
---
## Page 417
FUNCTIONo”这条函数调用指令了，而改动global名字空间的动作就发生在这里。
14-26展示了这一过程。
而“21LOAD_ATTR2”指令则是一个纯粹的名字空间搜索指令，它将使Python虚拟机在
modulel>才对吗？看来唯一的答案就是其中这个global 名字空间发生了变化，问题的
我们接受LEGB，但在调用show_owmer时，不是应该在global名字空间中找到。好，
关键在于函数调用机制。
怎么实现的？
所以根据LEGB规则，找到的是在module2.py中的符号owner。但是，问题是，这一切是
是Pyhon的LEGB规则所导致的结果，因为printowner这个语句是在module2.py中，
清单1413的[1]处，输出的结果却是module2.py中的符号“owner”对应的值。我们说这
24CALL_HUNCTION
[modulel.py]
defshow_owner():
owner=*module2
iodule2.show_owmer()
owner=
import module2
Python虚拟机执行“18LOAD_NAMEo”的结果是得到了一个PyModuleObject对象，
LOAD
为了搞清楚这一切，我们先来看看moduie2showowmer(）这条表达式的编译结果。
根据上一章中对初始化时名字空间的分析，我们知道，在代码清单1413的[1]之前，
但是，在这两条指令中，都不会改动giobai名字空间，而下一步就是“24cALL_
printowmer//[2]
NAME
"modulel'
图14-26Python虚拟机获得符号“show_ower”的过程
modlule2
一深度探索动态语言核心技术
387
图
---
## Page 418
Python源码剖析
388
指令就会被 Python虚拟机执行，我们看到，确实，MAKE_FUNCTION 将当前活动的
进行mport动作，实际上，也就是执行以下module2.py，在这个过程中，MAKE_rUNcrION
MAKE_FUNCTION指令。来回顾一下这条指令都干了什么。
PyFunctionobject对象中。
名字空间的aiet对象。这个对象恰恰就在图1426中符号“show_owner”对应的
不够，还得Pyhon虚拟机在调用PyFrame_New时传入一个不同于module1.py中global
空间的动作。
再回忆下创建PyFrameObject对象的函数，我们会发现，果然就有一个设置global名字
帧”（PyFrameObject对象），在这个PyFrameObject对象的环境中执行函数内的指令
Pyobtect*Pyrunction_New(Pyobjectcode,
[MARE_FUNCTION的指令代码]
typedef struct
PyFrameobject
[frameobject.c]
PyPunctionobject;
Python对module2.py的编译结果中，“defshow_ower（）:”这条表达式会对应一条
第14章Python模块的动态加载机制
PyObjectHEAD
但是俗话说得好，
PyEunctionobiect*op=
f->f_globals =globals;
回忆一下前面剖析的函数调用机制，我们知道，函数调用实际上会创建一个新的“栈
//设置global名字空间
ByobjectGC_New(PyFunationobject,&PyEunetionlType）:
Pyobjeot
一深度探索动态语言核心技术
PyFunetion_New(v,
一个巴掌拍不响，光有PyFrame_New内部安图改朝换代的愿望还
f->f_globals）;
Byobjeot *globals)
---
## Page 419
规则的正确性。这么一个简单的现象，却涉及了Python内部运作的方方面面，但最关键
场了。
module2.py中所有符号的func_globals，并将其传递给了PyFrame_New，这样才能保证
module2.py中的所有符号。
module2.py中的代码时，会影响1ocal名字空间，也就影响了globai名字空间，最终MAKE
fast_Function(pyobject *func,Pyobjeat **pp_stack,int n.intna,int nk)
staticPyobject
对象（回忆一下上一章对Pyhon初始化时第一个名字空间创建过程的观察），所以在执行
这个新建的ryFrameobject对象中的1ocal名字空间和global空间都指向同一个dict
PyErameObject对象中的global名字空间最初会是一个空的aict对象，但是关键在于
的调用，这意味着Python在import时，会创建新的PyFrameobject对象，这个
source_module函数，如果你顺着这个函数追下去，会最终发现对pyEval_EvalcodeEx
Pyobject*
[ceval.c]
func.globals)
正是在fast_function中，一个全新的global名字空间产生了，并最终维护了LEGB
现在只剩下最后一步了，在modulel.py中，对show_owner函数进行调用时，在某个
在本章14.3.2.2节中，我们看到，对.py文件的import动作最终将委托给1oad
PyFrame
PyObject*glabals=PyPunction_GET_GLoBALS(fune);
Pyobject*
Pyobject
_EvalCodeEx(PyCodeobject *co,
PyFunction_GEm GLoBALS(fune)
New(tstate,co,globais.
**@efs,
PyFunctionGET_CLosURE（fune)):
(*pp_stack)-z*nk,
ar
Int defcount,
globals,
14.5与module有关的名字空间问题
Python源码剖析
Pyobject
locals）
Pyobiect
Pyob
《（（PyFunctionobject)fune)
ect
closure)
*kws"
一深度探索动态语言核心技术
int
Dyobject locals
kwcount,
389
---
## Page 420
Python源码剖析
390
另外一个灵魂：最内嵌套作用域规则，正是这个规则决定了这些实现。
的一点，还是名字空间，名字空间可谓是Python的灵魂所在。当然，
第14章Python模块的动态加载机制
一深度探索动态语言核心技术
，更准确地说，还有
---
## Page 421
15.1GIL与线程调度
这时obj->ob_refcnt的值为2。如果A销毁对obj的引用，显然，A将通过py_DECREF
两个线程A、B，在两个线程中，都同时保存着对内存中同一对象obj的引用，也就是说，
程对Pyuhon虚拟机的使用。
而Python虚拟机也同样使用一个全局解释器锁（Global InterpreterLock，GIL）来互斥线
才能成为活动的线程，从而使用Ruby虚拟机的全局资源。
在YARV中，将操作系统的原生线程引入了Ruby。每一个Ruby线程都对是操作系统上的
（在以后的描述中，我们称为原生线程）。Ruby1.9中整合了YARV作为Ruby新的虚拟机，
制是在语言的实现中模拟了线程及线程调度机制，而并没有使用操作系统本身的线程机制
中。Py山on也为多线程系统的开发提供了很好的支持。
都为多线程开发提供了很好的支持，无论是通过库的支持还是将多线程机制内建在语言之
调整obj的引用计数值。我们知道，Py_DECREP的整个动作可以分为两个部分：
一个线程，在Ruby内部，维护着一个全局资源锁，
这一切，在Python中早已实现，Pyhon中的线程从一开始就是操作系统的原生线程，
同样身为动态语言，Ruby也提供了多线程的支持，但是在Ruby1.9之前的多线程机
if(obj->ob_refcnt == O) destory abjectland free memorye
为了理解Python为什么需要Global Interpreter Lock（GIL），考虑这样的情形：假设有
开发多线程的应用系统，是在日常的软件开发中经常会遇到的需求。现在的编程语言
如果A在执行完第一个动作之后，obj->ob_refcnt的值变为1。不幸的是，恰恰在
-obj->ob_refcnt:
Python多线程机制
Python源码剖析
一个Ruby线程必须首先获得这个锁
一深度探索动态语言核心技术
第
CHAPTER
15
---
## Page 422
392
Python源码剖析
A又被重新唤醒，可惜现在已经物是人非，obj->ob_refcnt已经被B减少到o，而不是当
的引用。B完成第一个动作之后，obj->ob_refcnt为O，B是一个幸运儿，它没有被线程
这个时候，线程调度机制将A挂起，而唤醒了B。更为不幸的是，B同样也开始销毁对obj
branch，但是很不幸，这个分支在很多基准测试上，尤其是单线程操作的测试上，效率只
性能大打折扣。这一点其实早已被Pyton社区所认识，也进行了大量的探索。大约在
独立运行，然而Python的GIL限制了这样的情形，使得多处理器最终退化为单处理器，