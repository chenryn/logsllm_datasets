不幸的是，这个问题的细节没有暴露，但是可能使用 AWS CLI 来发现，这是一个工具，允许
你和 AWS 服务在你的共领航上交互。虽然你需要一个 AWS 账户来做这个事情，创建账户实
际上也是免费的，因为你不需要任何服务。因此，使用 CLI 你就可以在 AWS 上认证你自己，
并且随后测试是否可以访问（这也是我发现 HackerOne Bucket 的方式，它在下面列出）。
重要结论
当你侦查一个潜在的目标时，确保注意到所有不同的工具，包含 Web 服务，它们明显可
以使用。每个服务或软件，OS，以及其他。你可以寻找或发现新的攻击向量。此外，使
你自己熟悉流行的 Web 工具，例如 AWS S3，Zendesk，Rails，以及其他是个好主意。
许多站点都使用它们。
6. HackerOne S3 Bucket 开放
难度：中
URL：
[REDACTED].s3.amazonaws.com
报告链接：
https://hackerone.com/reports/128088
32
九、应用逻辑漏洞
报告日期：2016.4.3
奖金：$2500
描述：
我们打算讲一些有些不同的东西。这是一个漏洞，我实际上发现了他，并且和上面描述的
Shopify 的问题有些不同，所以我打算详细分享关于我如何发现他的任何事情。
所以，一开始，上面描述的漏洞就是，一个 Bucket 公开链接到了 Shopify。意思是，当你访
问这个想点时，你会看到 AWS 服务的调用，所以黑客就知道 Bucket 指向哪里。但是我并没
有 -- 我使用了一个很酷的脚本和一些工具来发现了 Bucket。
在 4 月 3 日的周末，我不知道为什么，但是我决定跳出思维定式，并尝试攻击 HackerOne。
我一开始就玩了玩它们的站点，并且每次新漏洞发现时，都迫使我自己阅读信息披露，想了
解为什么我错过了它。我想知道他们的 S3 Bucket 是否存在类似 Shopify 的漏洞。我也想知
道，黑客如何访问了 Shopify 的 Bucket。我了解到它是通过 Amazon 命令行工具来访问的。
现在，通常我会使自己停下，因为 HackerOne 这个时候不可能还拥有漏洞。但是我突然有一
个想法，它来源于我和 Ben Sadeghipour (@Nahamsec) 的访谈，就是不要怀疑自己，或者
公司犯错的可能。
所以我在 Google 上搜索一些细节，并碰到了两个有意思的页面：
There’s a Hole in 1,951 Amazon S3 Buckets
S3 Bucket Finder
第一个是个有趣的文章，来自 Rapid7，它是个安全公司，这篇文章关于如何发现公开可写的
S3 Bucket ，并通过模糊测试，或者猜测 Bucket 名称来实现。
第二个是个很酷的工具，它接受一个单词列表，并调用 S3 来寻找 Bucket。但是，它没有自
带列表。在 Rapid7 的文章中有一行关键字，“通过一个不同的列表来猜测名称，列表包含
1000 强公司的名称，以 .com, -backup, -media 排列。”
这就很有意思了。我很快为 HackerOne 创建了一列 Bucket 可能名称，像这样：
hackerone, hackerone.marketing, hackerone.attachments, hackerone.users, hackerone.file
s
这些都不是真正的 Bucket。它们来自于报告。所以我觉得我肯定能够发现它。我将其留作一
个挑战。
现在，使用 Ruby 脚本，我开始调用那些 Bucket。事情刚开始并不是那么好，我发现了几个
Bucket 但是都拒绝访问。很不幸，所以我先离开，看看 NetFlix。
33
九、应用逻辑漏洞
但是这个想法还在提醒着我，所以在我睡觉之前，我决定再次使用更多组合来执行脚本。我
再次发现了大量的 Bucket，它们看起来是 HackerOne 的，但是所有都拒绝访问。我意识
到，拒绝访问起码告诉我它们是存在的。
我打开了 Ruby 脚本，它在 Buckets调用了 ls 的等价函数。换句话说，我尝试观察它们是否
公开可读的。我想知道它，以及它们是否公开可写的。
此外，现在 AWS 提供了命令行工具，aws-cli。我知道它，因为我之前用过，所以我在我的
VM 上快速执行 sudo apt-get aws-cli ，并准备好了。你可以
在 上找到这个东西的指南。
docs.aws.amazon.com/cli/latest/userguide/installing.html
现在，命令 awss3help 会打开 S3 的帮助，并列出可用的命令。这些命令之一是 mv ，以 aws
的形式，所以我尝试：
s3 mv [FILE] [s3://BUCKET]
touch test.txt
aws s3 mv test.txt s3://hackerone.marketing
这是第一个 Bucket，我从中收到了拒绝访问，并在调用 操作时，我收到了
PutObject move
。
failed: ./test.txt to s3://hackerone.marketing/test.txt A client error(Access Denied)
所以尝试下一个， ，并且成功了。我收到了这个消
aws s3 mv test.txt s3://hackerone.files
息， 。
move: ./test.txt to s3://hackerone.files/test.txt
真是神奇！现在我尝试删除文件： ，同样成功了。
aws s3 rm s3://hackerone.files/test.txt
但是现在我还是怀疑自己。我快速登出了 HackerOne 来报告。并且在我键入时，我意识到我
并没有实际确认 Bucket 的所有权。AWS 允许任何人在全局名字空间下创建任何 Bucket。意
思是，你，或者读者都可能实际拥有我在测试的 Bucket。
我不确定是否应该不验证就报告。我搜索了 Google 来看看我是否可以找到任何 Bucket 的引
用。我没有找到什么东西。我离开了电脑，来理清头绪。我意识到，最坏的事情就是我得到
了另一个无效报告，以及贡献 -5。另一方面，我知道这至少值 $500，基于 Shopify 的漏洞也
可能是 $1000。
我按下了提交，并去睡觉了。当我醒来的时候，HackerOne 回复了恭喜，并说它们已经修复
了它和一些其他的存在漏洞的 Bucket。成功了！并且按照它们的条款，当他们授予奖励的时
候，它们会考虑潜在的安全性，包括我没有发现但存在漏洞的其它 Bucket。
34
九、应用逻辑漏洞
重要结论
有多个重要结论：
1. 不要低估你的能力，以及开发者犯错的可能性。HackerOne 是个优秀的团队，拥有
优秀的安全研究员。但是人们都会犯错。挑战你的假设吧。
2. 不要在首次尝试之后就放弃。当我发现它的时候，浏览器每个 Bucket 都不可用，并
且我几乎离开了。但是之后我尝试写入文件，它成功了。
3. 所有的东西都在于只是。如果你知道存在了哪种漏洞，你就知道了要寻找以及测试
什么。读这本书就是一个良好的开始。
4. 我之前说过，又再说一遍，一个攻击面要好于站点，它也是公司所使用的的服务。
要跳出思维定式。
7. 绕过 Gitlab 的双因素认证
难度：中
URL：无
报告链接：
https://hackerone.com/reports/128085
报告日期：2016.4.3
奖金：无
描述：
4 月 3 日，Jobert Abma（HackerOne 的联合创始人）向 Gitlab 报告称，在双因素认证开启
情况下，攻击者能够登录受害者的账户，而不需知道受害者的密码。
对于那些不熟悉的人，双因素认证是两个登录步骤，通常用户输入它们的用户名和面，之后
站点会发送验证码，通常通过电子邮件或者 SMS，用户需要输入它来完成登录过程。
这里，Jobert 注意到，在这个过程中，一旦攻击者输入了用户名和密码，会发送一个 Token
来结束登录。在提交这个 Token 时，POST 调用为：
POST /users/sign_in HTTP/1.1
Host: 159.xxx.xxx.xxx ...
----------1881604860
Content-Disposition: form-data; name="user[otp_attempt]"
212421
----------1881604860-
35
九、应用逻辑漏洞
如果攻击者拦截了它并向调用添加了用户名，例如：
POST /users/sign_in HTTP/1.1
Host: 159.xxx.xxx.xxx ...
----------1881604860
Content-Disposition: form-data; name="user[otp_attempt]"
212421
----------1881604860
Content-Disposition: form-data; name="user[login]"
john
----------1881604860-
攻击者就能够登录进 John 的账户，如果 otp_attempt 对 John 可用。换句话说，在两步认证
期间，如果攻击者添加了 参数，它们就能修改被登录的账户。
user[login]
现在，唯一的麻烦就是攻击者需要拥有有效的 OTP Token，用于受害者。但是这就是爆破登
场的时候了。如果站点管理员没有实现速率限制，Jobert 就可以对服务器执行重复调用来猜
测有效的 Token。攻击成功的可能性取决于向服务器发送请求的传输时间，以及 Token 有效
时间的长度，但是无论如何，这里的漏洞都很明显。
重要结论
双因素验证是个机巧的系统，难以正确实现。当你注意到站点使用了它时，你需要完整
测试所有功能，包括 Token 的生命周期，尝试的最大次数，复用过期的 Token，猜测
Token 的可能性，以及其他。
8. 雅虎 PHP 信息泄露
难度：中
URL：
http://nc10.n9323.mail.ne1.yahoo.com/phpinfo.php
报告链接：
https://blog.it-securityguard.com/bugbounty-yahoo-phpinfo-php-disclosure-2/
报告日期；2014.10.16
奖金：无
描述：
虽然它并没有巨额奖金，像是其他漏洞那样（实际上没有奖金，非常意外），但这是我最喜
欢的报告之一，因为它教会了我网络扫描和自动化的重要性。
36
九、应用逻辑漏洞
在 2014 年 10 月，Patrik Fehrenbach（你应该从“Hacking Pro Tips Interview#2”中了解了
他，很棒的一个家伙）发现了雅虎的服务器中存在可访问的 文件。如果你不熟
phpinfo()
悉 ，这是一个敏感的命令，它不应该在生产环境能够访问，以及公开访问，因为
phpinfo()
它泄露了所有类型的服务器信息。
现在，你可能想知道 Patrik 如何找到了 http://nc10.n9323.mail.ne1.yahoo.com ，我保证。结
果它 PING 了 yahoo.com ，它返回了 98.138.253.109 。之后它将其传给了 WHOIS，并发现雅
虎实际上拥有下面这些东西：
NetRange: 98.136.0.0 - 98.139.255.255
CIDR: 98.136.0.0/14
OriginAS:
NetName: A-YAHOO-US9
NetHandle: NET-98-136-0-0-1
Parent: NET-98-0-0-0-0
NetType: Direct Allocation
RegDate: 2007-12-07
Updated: 2012-03-02
Ref: http://whois.arin.net/rest/net/NET-98-136-0-0-1
要注意第一行，雅虎拥有大量的 IP 地址，从 98.136.0.0 到 98.139.255.255 ，或
者 98.136.0.0/14 ，这是 260000 个独立 IP 地址。这是大量的潜在目标。
Patrik 之后写了个简单的 bash 脚本来寻找可用的 phpinfo 文件：
#!/bin/bash
for ipa in 98.13{6..9}.{0..255}.{0..255}; do
wget -t 1 -T 5 http://${ipa}/phpinfo.php; done &
执行了这个，他在随机的雅虎服务器上发现了它。
重要结论
在渗透的时候，考虑公司的整个设施，除非他们告诉你这超出范围了。虽然这个报告没
有得到一分钱的奖金，我知道 Patrik 使用了相似的技巧来寻找一些重要的漏洞来获得奖
金。
此外，你会注意到，这里有 260000 个潜在的地址，他们不可能手动扫描。在执行这一
类型的测试时，自动化非常重要，并且是应该使用的东西。
9. HackerOne Hacktivity 投票
难度：中
URL：
https://hackerone.com/hacktivity
37
九、应用逻辑漏洞
报告链接：
https://hackerone.com/reports/137503
报告日期：2016.5.10
奖金：Swag
描述：
虽然严格来说，这里没有真正的安全漏洞，这个报告是个跳出思维定式的良好示例。
2016 年 4 月到 5 月的一段时间，HackerOne 为黑客开发了一个新功能，来通过 Hacktivity 列