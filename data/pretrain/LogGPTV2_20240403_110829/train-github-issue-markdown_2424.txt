I want to perform on the GPU non-maximum-suppression on the output of a
darknet/yolo CNN.  
The following testing code works fine :
//Credits: adapted from https://github.com/pprp to test nms parallel algo with
at::Tensor as input  
#include   
#include   
#include "string"  
//#include //needed for LoadLibrary  
#include   
#include  
#include   
#include   
#include "opencv2/imgproc/imgproc.hpp"  
#include "device_launch_parameters.h"
#include "device_functions.h"
#include   
#include   
#include   
#include 
#include "torch/torch.h"//->including torch gives problems!!!???
using namespace std;
#define HANDLE_ERROR(ans) { gpuAssert((ans), **FILE** , **LINE** ); }
inline void gpuAssert(cudaError_t code, const char *file, int line, bool
abort=true)  
{  
if (code != cudaSuccess)  
{  
fprintf(stderr,"GPUassert: %s %s %d\n", cudaGetErrorString(code), file, line);  
if (abort) exit(code);  
}  
}
typedef struct  
{  
double x,y,w,h;  
char s[100];  
char cls[100];  
double cmps;  
}box;
**device** inline float devIoU(float const* const b1, float const* const b2) {  
float ai = (float)(b1[2] + 1) * (b1[3] + 1);  
float aj = (float)(b2[2] + 1) * (b2[3] + 1);  
float x_inter, x2_inter, y_inter, y2_inter;
    x_inter = max(b1[0], b2[0]);
    y_inter = max(b1[1], b2[1]);
    x2_inter = min((b1[0] + b1[2]), (b2[0] + b2[2]));
    y2_inter = min((b1[1] + b1[3]), (b2[1] + b2[3]));
    float w = (float)max((float)0, x2_inter - x_inter);
    float h = (float)max((float)0, y2_inter - y_inter);
    float inter = ((w * h) / (ai + aj - w * h));
    return inter;
}
**global** void NMS_GPU(const int n_boxes, const float nms_overlap_thresh,  
const float* dev_boxes, bool* d_res) {  
unsigned int xIndex = blockIdx.x * blockDim.x + threadIdx.x;  
//unsigned int xIndex = threadIdx.x;//only 1 block with index 0!  
float cur_box[5];  
float a_box[5];  
cur_box[0] = dev_boxes[xIndex * 5 + 0];  
cur_box[1] = dev_boxes[xIndex * 5 + 1];  
cur_box[2] = dev_boxes[xIndex * 5 + 2];  
cur_box[3] = dev_boxes[xIndex * 5 + 3];  
cur_box[4] = dev_boxes[xIndex * 5 + 4];  
//__syncthreads();//not necessary as cur_box is not a shared resource  
for (int i = 0; i  nms_overlap_thresh)  
{  
d_res[i] = false;  
}  
}  
}  
}  
}
int main()  
{  
int const threadsPerBlock = sizeof(unsigned long long) * 8;//Bufo : =64(float
size)  
//LoadLibrary(TEXT("D:\dev\Cpp\dependencies\torchnew\lib\torch_cuda.dll"));  
at::DeviceType device_type;
    if (at::cuda::is_available()) {
    	device_type = at::kCUDA;
    }
    else {
    	device_type = at::kCPU;
    	std::cout ();//convert at::tensor to a flat array
    float nms_overlap_thresh = 0.1;
    //Comment: this piece of code is apparently necessary to assign the Torch cuda context to the global cuda context
    THCState* state = at::globalContext().lazyInitCUDA(); // TODO replace with getTHCState
    const int col_blocks = THCCeilDiv(count, threadsPerBlock);
    unsigned long long* mask_dev = NULL;
    mask_dev = (unsigned long long*) THCudaMalloc(state,count * col_blocks * sizeof(unsigned long long));
    //-------------------------------------------------------------------------------------------------------------
    bool *d_res;
    //port h_res to GPU
    HANDLE_ERROR(cudaMalloc((void**)&d_res, count*sizeof(bool)));
    HANDLE_ERROR(cudaMemcpy(d_res, h_res,sizeof(bool)*count, cudaMemcpyHostToDevice));
    NMS_GPU>>(count,nms_overlap_thresh, boxes_as_array,d_res);
    //port d_res to CPU
    HANDLE_ERROR(cudaMemcpy(h_res, d_res, sizeof(bool)*count, cudaMemcpyDeviceToHost));
    //display result
    for(int i =0; i<count ; i++)
    {
    	if(*(h_res+i) == true)
    	{
    		//printf("GPU Draw: %d--%d\n",i,*(h_res+i));
    		cv::putText(temp,b[i].cls,cv::Point((int)b[i].x,(int)b[i].y-5),cv::FONT_HERSHEY_SIMPLEX,1.7,cv::Scalar(255,255,255),5,8,0);
    		cv::putText(temp,b[i].s,cv::Point((int)b[i].x+120,(int)b[i].y-5),cv::FONT_HERSHEY_SIMPLEX,1.7,cv::Scalar(255,255,255),5,8,0);
    		cv::rectangle(temp,cv::Point((int)b[i].x,(int)b[i].y),cv::Point((int)b[i].x + (int)b[i].w,(int)b[i].y + (int)b[i].h),cv::Scalar(92.185,194),8,8,0);
    	}
    }
    cv::namedWindow("Window",0);
    cv::resizeWindow("Window",1064,800);
    cv::imshow("Window",temp);
    cv::waitKey(0);
    return 0;
}
Problem : When I include "torch/torch.h" (uncomment line 23) - something I
need for rest of the project - I get the following error (Visual Studio 2019):
"Error member "torch::jit::detail::ParameterPolicy::all_slots" may not be
initialized acudaNMSTEST
D:\dev\Cpp\dependencies\torchnew\include\torch\csrc\jit\api\module.h 490 "
I struggled a couple of days to find a solution, but in vain. Any idea what is
going on/what I did wrong?
cc @malfet @yf225 @glaringlee @peterjc123 @nbcsm @guyang3532