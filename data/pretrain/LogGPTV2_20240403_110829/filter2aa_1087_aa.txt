# 新的漏洞利用机制：Mi-ga-on 在 Internet Explorer 中的应用

## HITCON X
- @K33nTeam
- @KeenTeam
- @promised_lu

## 关于我
- 业余浏览器漏洞利用者
- 主要工作是编写模糊测试工具（fuzzers）

## 背景
### Internet Explorer 漏洞统计
#### 2013 年
- **CVE-2013-0025** - CParaElement Use-After-Free (UAF)
- **CVE-2013-1311** - CDOMTextNode UAF
- **CVE-2013-1347** - CGenericElement UAF
- **CVE-2013-2551** - COALineDashStyleArray 整数溢出 (Pwn2Own)
- **CVE-2013-3184** - CFlatMarkupPointer UAF
- **CVE-2013-3205** - CCaret UAF
- **CVE-2013-3893** - CTreeNode UAF
- **CVE-2013-3897** - CDisplayPointer UAF

#### 2013 年总结
- 129 个 CVE
- 大多数是 UAF

#### 2014 年
- **CVE-2014-0322** - CMarkup UAF
- **CVE-2014-1776** - CMarkup UAF

#### 2014 年总结
- 从 1 月到 7 月共 135 个 CVE
- 数量超过 2013 年

## 漏洞利用机制
- **虚拟表保护** - 在 Internet Explorer 10 中引入
- **反 UAF**

### 虚拟表保护
- **新漏洞利用机制**
  - **隔离堆** - 在 MS14-035 中引入
  - **内存保护器** - 在 MS14-037 中引入
  - **Internet Explorer 6~11**
  - **反 UAF**

## 议程
- 隔离堆
- 内存保护器
- 模糊测试问题
- 对策

## 隔离堆
```c
g_hIsolatedHeap = HeapCreate(0, 0, 0);
if (g_hIsolatedHeap) {
    ULONG HeapInformation = 2; // 启用 LFH
    HeapSetInformation(g_hIsolatedHeap, 0, &HeapInformation, sizeof(HeapInformation));
}
```

### _MemIsolatedAlloc
```c
LPVOID __stdcall _MemIsolatedAlloc(SIZE_T dwBytes) {
    if (!dwBytes) dwBytes = 1;
    return HeapAlloc(g_hIsolatedHeap, 0, dwBytes);
}
```

### _MemIsolatedAllocClear
```c
LPVOID __stdcall _MemIsolatedAllocClear(SIZE_T dwBytes) {
    return HeapAlloc(g_hIsolatedHeap, 8, dwBytes);
}
```

### _MemIsolatedFree
```c
void __stdcall _MemIsolatedFree(LPVOID lpMem) {
    if (lpMem) MemoryProtection::HeapFree(g_hIsolatedHeap, 0, lpMem);
}
```

### Internet Explorer 6
- **隔离对象**
  - 所有 DOM 对象
  - 一些渲染对象

### 如何在 UAF 中填充隔离对象
- BSTR
- 字符串
- 结构体
- 隔离对象

## 内存保护器
### SBlockDescriptor
```c
ULONG_PTR m_Block; // 堆块地址
SIZE_T m_Size; // 堆块大小
```

### SBlockDescriptorArray
```c
SBlockDescriptor *m_BlockDescriptors; // 堆块数组
SIZE_T m_Size; // 所有堆块的总大小
ULONG m_Count; // 堆块数量
```

### MemoryProtection::HeapFree
- 替换 MSHTML 中的 HeapFree

### MemoryProtection::HeapFree 实现
```c
BOOL __stdcall MemoryProtection::HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem) {
    CMemoryProtector::ProtectedFree(hHeap, dwFlags, lpMem);
    return TRUE;
}
```

### CMemoryProtector::ProtectedFree
- 回收内存
- 将堆块添加到 SBlockDescriptorArray 而不是释放

### CMemoryProtector::ProtectedFree 实现
```c
static void __stdcall CMemoryProtector::ProtectedFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem) {
    …
    MemoryProtector->ReclaimMemory((ULONG_PTR *)&lpMem, 100000);
    …
    if (MemoryProtector->AddBlockDescriptor((ULONG_PTR)lpMem, hHeap == g_hIsolatedHeap, &Size))
        memset(lpMem, 0, Size);
    …
}
```

### CMemoryProtector::ReclaimMemory
- 如果 SBlockDescriptorArray 的总大小小于 100000，则不执行任何操作
- 标记块
- 回收未标记的块

### CMemoryProtector::ReclaimMemory 实现
```c
void CMemoryProtector::ReclaimMemory(ULONG_PTR *Blocks, UINT Size) {
    if (GetCount() && (GetSize() >= Size || m_ForceReclaim)) {
        MarkBlocks(Blocks);
        ReclaimUnmarkedBlocks();
    }
}
```

### CMemoryProtector::MarkBlocks
- 遍历线程栈作为指针数组
- 如果指针指向 SBlockDescriptorArray 中的块，则标记该块

### CMemoryProtector::MarkBlocks 实现
```c
void CMemoryProtector::MarkBlocks(ULONG_PTR *Blocks) {
    ULONG_PTR Low = LowAddress();
    ULONG_PTR High = HighAddress();
    for (ULONG i = (m_StackHighAddress - (ULONG_PTR)Blocks) / sizeof(ULONG_PTR); i != 0; i--) {
        MarkBlockForAddress(*Blocks++, Low, High);
    }
}
```

### CMemoryProtector::ReclaimUnmarkedBlocks
- 释放未标记的块
- 取消标记已标记的块

### CMemoryProtector::ReclaimUnmarkedBlocks 实现
```c
void CMemoryProtector::ReclaimUnmarkedBlocks() {
    for (ULONG i = 0; i < m_Count; i++) {
        SBlockDescriptor *BlockDescriptor = &m_BlockDescriptors[i];
        if (BlockDescriptor->IsMarked())
            BlockDescriptor->Unmark();
        else
            ::HeapFree(hHeap, 0, (LPVOID)BlockDescriptor->BaseAddress());
    }
}
```

## Visual Studio 端口
- [https://github.com/promised-lu/MemoryProtection](https://github.com/promised-lu/MemoryProtection)

## 延迟释放或永不 UAF
- 无法填充 UAF 对象

## 模糊测试问题
### 隔离堆
- 隔离堆减少了 PageHeap 关闭时的 UAF 概率
- 修补 g_hIsolatedHeap 到进程堆

### 内存保护器
- 内存保护器显著减少了 UAF 概率
- 修补 CMemoryProtector::ProtectedFree 中的 memset (内联问题)
- 通过注册表关闭内存保护器
  ```ini
  [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\MAIN\FeatureControl\FEATURE_MEMPROTECT_MODE]
  "iexplore.exe"=dword:00000000
  ```

## 对策
### 释放问题
- 填充 SBlockDescriptorArray 以触发 ReclaimUnmarkedBlocks
- Windows 7 x86
- Internet Explorer 11

### CollectGarbage2 函数
```javascript
function CollectGarbage2() {
    var video = new Array();
    for (var i = 0; i < 250; i++) {
        video[i] = document.createElement("video"); // 400 字节
    }
    video = null;
    CollectGarbage(); // ReclaimUnmarkedBlocks
}
```

### 延迟释放