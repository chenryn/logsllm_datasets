### Bilinear Maps

In summary, let `BilGen` be an algorithm that outputs the parameters \((p, \hat{e}, G_1, G_2, G_T, g_1, g_2)\) for a Type-III pairing. For our instantiation, we select the BN curve family, specifically the BN254 curve, which provides approximately 100 bits of security. If a higher security level is desired with comparable performance, one can follow the approach used by Zcash and choose the BLS curve family, particularly the BLS12-381 curve, which offers roughly 120 bits of security.

### RSA

To achieve a security level for RSA parameters comparable to that of our chosen bilinear groups, we selected moduli of 2048 bits in size.

### A Concrete PCH (Policy-Based Chameleon Hash)

We now present an efficient instantiation of a Policy-Based Chameleon Hash (PCH). Specifically, we instantiate our PCH using the concrete CHET (Chameleon Hash Encryption Transformation) introduced in Section IV-B. It is important to note that although our construction involves components based on both the RSA setting and a prime order group, the choice of security parameters for each component is independent, and this design is a compromise to achieve overall efficiency.

#### Our Construction

In Scheme 3, we present our concrete instantiation. Similar to the abstract algorithmic definition of PCHs, all algorithms implicitly have access to the public key \(pk\). We use the CP-ABE (Ciphertext-Policy Attribute-Based Encryption) scheme, which is made IND-CCA2 secure as discussed in Section IV-A. This scheme is employed as a CCA-secure KEM (Key Encapsulation Mechanism) and combined with an IND-CCA2-secure symmetric encryption scheme to create a CCA2-secure hybrid encryption scheme (using the compiler formalized in [20]). Consequently, we encrypt the ephemeral trapdoor using the symmetric scheme (denoted by \((KGenSE, EncSE, DecSE)\) in our construction). It is straightforward to show that this modification preserves the adaptive IND-CCA2 security of the modified CP-ABE scheme. The hash functions \(H_1, H_2, H_3, H_4\) are modeled as random oracles (ROs) [13], and let \(enc: \{0, 1\}^{\ell + \kappa} \to G_T\) be an injective encoding function, where \(\ell\) is the maximum length of keys output by \(KGenSE(1^\kappa)\).

Combining the results from Theorems 1-3, 4, and Theorem 1 from [16], we obtain the following:

**Corollary 1.** The construction in Scheme 3 is an indistinguishable, outsider, and insider collision-resistant PCH.

### Performance Evaluation

To evaluate the practicality of our scheme, we implemented our construction from Scheme 3 in Python 3.5.3, using the Charm [2] framework version 0.5010 and the FAME implementation from the authors of [1]. We conducted the measurements on a laptop with an Intel Core i7-7600U CPU @ 2.80GHz with 16GB RAM running Ubuntu 18.04. All frequent operations, such as key generation (KGen), hashing (Hash), verification (Verify), and adaptation (Adapt), for a policy of 64 attributes (consisting of two OR clauses with 32 attributes connected via AND) were significantly below one second. Due to space constraints, detailed performance analysis is provided in the full version.

### Blockchain Transaction-Level Rewriting

In this section, we return to the application of policy-based chameleon-hash functions (PCHs) to rewriting objects in blockchains, using the syntax of the Bitcoin blockchain for our discussion. While Ateniese et al. [6] focus on rewriting entire blocks within a blockchain, we propose transaction-level rewriting. In this approach, blocks in the blockchain remain intact, but specific transactions inside a block can be rewritten. This application is more granular and keeps the overall blockchain intact. Each block in a blockchain stores a compact representation of a set of transactions, i.e., the root hash of a Merkle tree (denoted TX ROOT) that accumulates all transactions associated with a block. To integrate transaction-level rewriting capabilities into blockchains using PCHs, every participant who acts as an attribute authority includes \(pk\) using a transaction signed under the key corresponding to the public key of an address owner. The attribute authority can then issue PCH secret keys to other users. If a user wants to include a modifiable transaction, the transaction needs to be hashed using the PCH.

In Figure 5, we consider a toy example of a block \(B_i\) that accumulates four transactions \(T_{i,1}, T_{i,2}, T_{i,3}, T_{i,4}\). Suppose transaction \(T_{i,1}\) should be rewritable by users satisfying access policy \(A\). The last three transactions (\(T_{i,2}\) to \(T_{i,4}\)) are processed as usual, i.e., input to the hash computation based on \(H\), but the first transaction is preprocessed using the PCH, and the hash value \(A\) is input into the Merkle tree. The randomness \(r_i\) is not included in the hash computation of the aggregation and is provided as a non-hashed part of the transaction/block. When the transaction needs to be updated, anyone with a secret key satisfying \(A\) can compute a collision for hash value \(A\) and provide the new randomness \(r'_i\). Note that, unlike in the scenario of Ateniese et al. [6], the hash function used to chain blocks remains a conventional collision-resistant hash function, and the PREV H values are never updated.

The security properties of the PCH come into play as follows:
- **Indistinguishability** ensures that it is not detectable whether a hash computed by the PCH has been adapted, i.e., whether a rewrite occurred. This holds even if PCH secret keys that would allow computing a collision are leaked.
- **Insider and Outsider Collision-Resistance** guarantees that only someone in possession of a secret key (trapdoor) whose attributes satisfy the access policy used upon computing the hash can perform editing.

### Conclusion

We address the problem of rewriting objects in blockchains with a granularity that is flexible enough for real-world needs regarding who can perform such an operation. Our approach, which focuses on transaction-level rewriting, maintains the integrity of the blockchain while allowing for fine-grained control over which transactions can be modified.