# 外部文件访问（Android）
**漏洞特征：** ANDROID_EXTERNAL_FILE_ACCESS  
应用经常向外部存储设备（如SD卡）写入数据，这可能会引发多种安全问题。首先，应用可通过[READ_EXTERNAL_STORAGE](http://developer.android.com/reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE)权限读取SD卡上的文件。如果这些数据包含用户的敏感信息，则需要对这些数据进行加密。

**有漏洞的代码：**
```java
File file = new File(getExternalFilesDir(TARGET_TYPE), filename);
fos = new FileOutputStream(file);
fos.write(confidentialData.getBytes());
fos.flush();
```

**更优的做法：**
```java
fos = openFileOutput(filename, Context.MODE_PRIVATE);
fos.write(string.getBytes());
```

**引用：**
- [Android官方文档：安全提示](http://developer.android.com/training/articles/security-tips.html#ExternalStorage)
- [CERT：DRD00-J：不要在外部存储上存储敏感信息（除非先加密）](https://www.securecoding.cert.org/confluence/display/java/DRD00-J.+Do+not+store+sensitive+information+on+external+storage+%28SD+card%29+unless+encrypted+first)
- [Android官方文档：使用外部存储](http://developer.android.com/guide/topics/data/data-storage.html#filesExternal)
- [OWASP移动Top 10 2014-M2：不安全的数据存储](https://www.owasp.org/index.php/Mobile_Top_10_2014-M2)
- [CWE-312：明文存储敏感信息](https://cwe.mitre.org/data/definitions/312.html)

---

# 广播漏洞（Android）
**漏洞规则：** ANDROID_BROADCAST  
所有应用都可以通过申请适当的权限来监听广播意图，因此应尽量避免通过广播传输敏感数据。

**有漏洞的代码：**
```java
Intent i = new Intent();
i.setAction("com.insecure.action.UserConnected");
i.putExtra("username", user);
i.putExtra("email", email);
i.putExtra("session", newSessionId);
this.sendBroadcast(i);
```

**解决方案（如果可能的话）：**
```java
Intent i = new Intent();
i.setAction("com.secure.action.UserConnected");
sendBroadcast(i);
```

**配置（接收者）**
```xml
...
```

**配置（发送者）**

**引用：**
- [CERT：DRD03-J：不要使用隐式意图广播敏感信息](https://www.securecoding.cert.org/confluence/display/java/DRD03-J.+Do+not+broadcast+sensitive+information+using+an+implicit+intent)
- [Android官方文档：BroadcastReceiver（安全性）](http://developer.android.com/reference/android/content/BroadcastReceiver.html#Security)
- [Android官方文档：接收器配置（参见android:permission）](http://developer.android.com/guide/topics/manifest/receiver-element.html)
- [StackOverflow：如何在Android中设置广播发送者和接收者的权限](http://stackoverflow.com/a/21513368/89769)
- [CWE-925：广播接收器对意图的不当验证](https://cwe.mitre.org/data/definitions/925.html)
- [CWE-927：使用隐式意图进行敏感通信](https://cwe.mitre.org/data/definitions/927.html)

---

# 任意文件写（Android）
创建文件时使用MODE_WORLD_READABLE模式会使得文件可以被环境中的任何位置写入。如果某些文件被改写，可能会导致意外的情况发生。

**有漏洞的代码：**
```java
fos = openFileOutput(filename, MODE_WORLD_READABLE);
fos.write(userInfo.getBytes());
```

**解决方案（使用MODE_PRIVATE）：**
```java
fos = openFileOutput(filename, MODE_PRIVATE);
```

**解决方案（使用本地SQLite数据库）**  
使用本地SQLite数据库可能是存储结构化数据的最佳方案之一。确保数据库文件不会被创建到外部存储中。请参阅以下开发文档引用。

**引用：**
- [CERT：DRD11-J：确保敏感数据的安全](https://www.securecoding.cert.org/confluence/display/java/DRD11-J.+Ensure+that+sensitive+data+is+kept+secure)
- [Android官方文档：安全提示](http://developer.android.com/training/articles/security-tips.html#InternalStorage)
- [Android官方文档：Context.MODE_PRIVATE](http://developer.android.com/reference/android/content/Context.html#MODE_PRIVATE)
- [vogella.com：Android SQLite数据库和内容提供者教程](http://www.vogella.com/tutorials/AndroidSQLite/article.html#databasetutorial_database)
- [OWASP移动Top 10 2014-M2：不安全的数据存储](https://www.owasp.org/index.php/Mobile_Top_10_2014-M2)
- [CWE-312：明文存储敏感信息](https://cwe.mitre.org/data/definitions/312.html)

---

# 已激活地理位置的WebView（Android）
**漏洞特征：** ANDROID_GEOLOCATION  
建议询问用户是否允许获取其位置信息。

**有漏洞的代码：**
```java
webView.setWebChromeClient(new WebChromeClient() {
    @Override
    public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {
        callback.invoke(origin, true, false);
    }
});
```

**建议代码：**  
限制使用地理位置，并获得用户确认。
```java
webView.setWebChromeClient(new WebChromeClient() {
    @Override
    public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {
        callback.invoke(origin, true, false);
        // 询问用户确认
    }
});
```

**引用：**
- [CERT：DRD15-J：使用地理位置API时考虑隐私问题](https://www.securecoding.cert.org/confluence/display/java/DRD15-J.+Consider+privacy+concerns+when+using+Geolocation+API)
- [Wikipedia：W3C地理位置API](http://en.wikipedia.org/wiki/W3C_Geolocation_API)
- [W3C：地理位置规范](http://dev.w3.org/geo/api/spec-source.html)

---

# 允许JavaScript脚本运行的WebView（Android）
**漏洞特征：** ANDROID_WEB_VIEW_JAVASCRIPT  
启用JavaScript的WebView容易受到XSS攻击。应检查页面渲染以避免潜在的反射型XSS、存储型XSS和DOM型XSS。

**有漏洞的代码：**
```java
WebView myWebView = (WebView) findViewById(R.id.webView);
WebSettings webSettings = myWebView.getSettings();
webSettings.setJavaScriptEnabled(true);
```

**说明：**  
允许JavaScript运行是一个不良习惯，意味着后端代码需要经过审计以避免XSS。XSS也可能以DOM XSS的形式引入客户端。

**引用：**
- [问题：使用setJavaScriptEnabled可能引入XSS漏洞](http://www.technotalkative.com/issue-using-setjavascriptenabled-can-introduce-xss-vulnerabilities-application-review-carefully/)
- [Android官方文档：WebView](http://developer.android.com/guide/webapps/webview.html#UsingJavaScript)
- [WASC-8：跨站脚本攻击](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)
- [OWASP：XSS预防备忘单](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)
- [OWASP：2013 Top 10-A3：跨站脚本攻击（XSS）](https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29)
- [CWE-79：网页生成过程中输入未正确中立化（'跨站脚本'）](http://cwe.mitre.org/data/definitions/79.html)

---

# 带有JavaScript接口的WebView（Android）
**漏洞特征：** ANDROID_WEB_VIEW_JAVASCRIPT_INTERFACE  
使用JavaScript接口可能会将WebView暴露给有害的API。如果在WebView中触发XSS，恶意的JavaScript代码可能会利用一些敏感类。

**有漏洞的代码：**
```java
WebView myWebView = (WebView) findViewById(R.id.webView);
myWebView.addJavascriptInterface(new FileWriteUtil(this), "fileWriteUtil");
WebSettings webSettings = myWebView.getSettings();
webSettings.setJavaScriptEnabled(true);

class FileWriteUtil {
    Context mContext;
    FileWriteUtil(Context c) {
        mContext = c;
    }
    public void writeToFile(String data, String filename, String tag) {
        [...]
    }
}
```

**引用：**
- [Android官方文档：WebView.addJavascriptInterface()](http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface%28java.lang.Object,%20java.lang.String%29)
- [CWE-749：暴露危险的方法或函数](https://cwe.mitre.org/data/definitions/749.html)

---

# 没有用secure标志的Cookie
**漏洞特征：** INSECURE_COOKIE  
新创建的Cookie应设置Secure标志。Secure标志命令浏览器确保Cookie不会通过不安全的链路发送（例如HTTP）。

**有漏洞的代码：**
```java
Cookie cookie = new Cookie("userName", userName);
response.addCookie(cookie);
```

**解决方案（特殊设置）：**
```java
Cookie cookie = new Cookie("userName", userName);
cookie.setSecure(true); // Secure标志
cookie.setHttpOnly(true);
```

**解决方案（Servlet 3.0 配置）：**
```xml
<session-config>
    <cookie-config>
        <secure>true</secure>
        <http-only>true</http-only>
    </cookie-config>
</session-config>
```

**引用：**
- [CWE-614：HTTPS会话中的敏感Cookie没有'Secure'属性](https://cwe.mitre.org/data/definitions/614.html)
- [CWE-315：在Cookie中明文存储敏感信息](https://cwe.mitre.org/data/definitions/315.html)
- [CWE-311：缺少敏感信息的加密](https://cwe.mitre.org/data/definitions/311.html)