l自修改代码是由处理器自动处理的:“如果“写”影响了一个预取指令,指令队列是无效的。”
l没有堆栈溢出保护(SSP)。
l没有地址空间布局随机化(ASLR)。
因此,跳到0x0本身并不会陷入陷阱,但我们需要控制执行流到达目标函数,grub_rescue_run()，其中就包含了Grub2 Rescue
Shell的主循环。
当跳到0x0的时候那些是我们可控的？
grub_username_get() 的主“while”循环结束时,用户点击任一[回车]或[退出]键。寄存器%ebx会包含上次输入的健的值(或0x8
0XD，分别表示enter或esc的 ASCII码)。寄存器%esi持有的cur_len变量的值。  
指令指针指向0x0地址。% ESI寄存器包含值28(按28次退格键),然后点[回车](%ebx = = 0xb)。
IVT逆向  
如果处理器的状态是一个总结上表,在IVT的代码实现类似memcpy(),复制0x%esi到0x0所指的地址0x0
%esi(到它自己)。因此,IVT是自修改代码,我们可以选择我们要复制的代码块。  
下列顺序显示的代码序列实际执行寄存器%esi的值—28(0xffffffe4):
———-
在第三次迭代中,生成的代码在0x0007包含一个retw指令。通过%ESP指针的值是0xe00c。所以,当retw指令执行,执行流程跳转到0xe00c。这个地址属于功能grub_rescue_run():  
在这一点上,GRUB2是在 grub rescue函数,这是一个强大的shell。  
幸运的是,内存受到了轻微的修改,它可以使用所有GRUB的功能。只是,第一中断IVT的载体已被修改,因为现在的处理器处于保护模式下,IVT不再被使用。
继续深入  
虽然我们到达GRUB2
rescue功能函数,我们并不能真正的得到认证。如果我们回到“normal”的模式,这种模式是Grub菜单和完整的编辑功能,GRUB将申请一个有效的用户名和密码。所以,我们可以直接键入grub2的命令,甚至包括新的模块来添加新的
GRUB功能,部署恶意软件到系统中或从Linux上运行一个完整的bash
shell启动一个更舒适自由的环境。在Linux中运行bash,我们可以使用grub2的命令如Linux,initrd或者insmod。  
虽然使用grub2的命令来运行一个Linux内核部署恶意软件是完全可能的,我们发现,一个简单的解决方案是修补RAM中GRUB2的代码,从而总是认证然后回到“normal”模式。这样的想法,是修改条件检用户是否已经通过身份验证或者没有没有通过。这个功能是grub-core/normal/auth.c文件中的_authenticated()函数。
我们的目标是用nop指令覆盖条件。  
这种修改是通过使用GRUB2 rescue
命令write_word。然后,一切都准备好了回到grub2的正常模式。换句话说,我们可以进入“编辑模式”并且grub2不会询问用户或密码。
APT如何利用这个0-day?  
物理访问是一个“进阶”的特征,归结到系统(或内部)。一个APT的主要目标是窃取敏感信息或者成为网络间谍。下面只是一个很简单的例子,一个APT可以感染系统并能够持久后方窃取用户数据。以下总结了系统配置:  
BIOS和UEFI有密码保护。  
GRUB2编辑模式受到密码保护。  
外部禁用:光盘,DVD,USB,网络引导,PXE…  
用户数据加密(本地)。
引导系统概述。
正如前面所述,我们的目标是窃取用户的数据。由于数据是加密的,我们所使用的策略是感染系统并等待用户解密数据(通过登录系统),然后直接获取信息。
配置使用恶意软件的环境
通过如前面所示的修复GRUB2,我们可以很容易地编辑linux项来加载Linux内核并得到一个root
shell。这是一个古老的但仍然可用的把戏,仅仅通过加init=/bin/bash到linux项,我们就能得到一个root Linux
shell,从而得到一个更好用的环境来部署我们的恶意软件。
请注意,由于/bin/bash是运行的第一道进程,系统日志监护程序没有运行,因此,日志不会被记录。也就是说,该访问将不能被普通的Linux监测程序检测到。
部署恶意软件并获取持续性
为了显示你可以通过利用这种0-Day
Grub2漏洞做多少事情,我们已经开发出一个简单的PoC。该PoC是一种改进的Firefox库,它可以创建新的进程,并在53端口对一个控制服务器运行一个逆向shell。显然,这只是一个简单的例子,实际的恶意软件将更加隐秘地获取信息。
修改后的库上传到[virustotal](https://www.virustotal.com/),其中报告55个工具中0 infections/virus
。 Firefox是使用Internet的web浏览器,并且向HTTP和DNS端口发送请求,所以它并不会提防我们使用这些端口与恶意软件通信。
为了感染系统,我们简单地把我们的修改版的libplc4.so库插入USB,然后替换原来的版本。我们必须安装具有写权限的系统并安装USB,如下图所示:
当任何用户执行Firefox浏览器,一个逆向shell将被调用。此时用户的所有数据会被解密,使我们能够窃取任何种类的用户信息。下面的图片显示了用户Bob(目标用户)使用Firefox,而用户Alice(攻击者)如何完全获取到Bob的数据。
要完成持续性的部分,值得一提的是使用驻留在/
boot分区的,且默认情况下是不加密的一个简单内核的修改版本,我们就可以提权部署一个更持久的恶意软件。只有你想不到的没有做不到的。
修复
该漏洞通过阻止cur_len溢出就很容易修复。主要的厂商都已经意识到了这个漏洞。顺便说一句,我们已经在主要的GRUB2 Git库创建了下面的“紧急补丁”:
    From 88c9657960a6c5d3673a25c266781e876c181add Mon Sep 17 00:00:00 2001
    From: Hector Marco-Gisbert 
    Date: Fri, 13 Nov 2015 16:21:09 +0100
    Subject: [PATCH] Fix security issue when reading username and password
      This patch fixes two integer underflows at:
        * grub-core/lib/crypto.c
        * grub-core/normal/auth.c
    Signed-off-by: Hector Marco-Gisbert 
    Signed-off-by: Ismael Ripoll-Ripoll 
    ---     grub-core/lib/crypto.c  | 2 +-     grub-core/normal/auth.c | 2 +-     2 files changed, 2 insertions(+), 2 deletions(-)
    diff --git a/grub-core/lib/crypto.c b/grub-core/lib/crypto.c
    index 010e550..524a3d8 100644
    --- a/grub-core/lib/crypto.c
    +++ b/grub-core/lib/crypto.c
    @@ -468,7 +468,7 @@ grub_password_get (char buf[], unsigned buf_size)
          break;
        }
    -      if (key == 'b')
    +      if (key == 'b' && cur_len)
        {
          cur_len--;
          continue;
    diff --git a/grub-core/normal/auth.c b/grub-core/normal/auth.c
    index c6bd96e..5782ec5 100644
    --- a/grub-core/normal/auth.c
    +++ b/grub-core/normal/auth.c
    @@ -172,7 +172,7 @@ grub_username_get (char buf[], unsigned buf_size)
          break;
        }
    -      if (key == 'b')
    +      if (key == 'b' && cur_len)
        {
          cur_len--;
          grub_printf ("b");
    --    1.9.1
修复GRUB 2.02:
    $ git clone git://git.savannah.gnu.org/grub.git grub.git
    $ cdgrub.git
    $ wget http://hmarco.org/bugs/patches/0001-Fix-CVE-2015-8370-Grub2-user-pass-vulnerability.patch
    $ git apply 0001-Fix-CVE-2015-8370-Grub2-user-pass-vulnerability.patch
讨论
此漏洞的利用已经成功了,因为我们关于这个bug的所有组成部分做了非常深入的分析。可以看出,成功的利用取决于很多因素:BIOS版本,GRUB版本,RAM容量,还有内存布局的修改。而且每个系统都需要深入的分析来构建特定的漏洞。
还有,我们没有使用的是:grub_memset()函数可以被滥用,从而将存储块设置为零而且不跳到0x0,且用户名和密码缓冲器可以用于存储有效载荷。
此外,在更复杂的攻击下(那些需要更大的有效载荷),使用键盘仿真装置将非常有用,例如[Teensy
device](https://www.pjrc.com/teensy/)。我们可以记录攻击序列所按下的键,并在目标系统上重播它们。
幸运的是,这里介绍的利用GRUB2漏洞的方法是不通用的,但也有其他的替代可以为你所用。在这里我们只介绍一种适合我们的。