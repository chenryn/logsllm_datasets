    24411:   ./test2 foo bar
    0000564cf542f000      8K r-x-- test2 # Notice ASLR!
    0000564cf5631000      4K rw--- test2 # Notice ASLR!
    00007ffe98c8e000    132K rw---   [ stack ]
    00007ffe98d55000      8K r----   [ anon ]
    00007ffe98d57000      8K r-x--   [ anon ]
    ffffffffff600000      4K r-x--   [ anon ]
     total              164K
    *** static_to_dyn.c ***
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define HUGE_PAGE 0x200000
    int main(int argc, char **argv)
    {
          ElfW(Ehdr) *ehdr;
          ElfW(Phdr) *phdr;
          ElfW(Shdr) *shdr;
          uint8_t *mem;
          int fd;
          int i;
          struct stat st;
          uint64_t old_base; /* original text base */
          uint64_t new_data_base; /* new data base */
          char *StringTable;
          fd = open(argv[1], O_RDWR);
          if (fd e_phoff];
          shdr = (ElfW(Shdr) *)&mem[ehdr->e_shoff];
          StringTable = (char *)&mem[shdr[ehdr->e_shstrndx].sh_offset];
          printf("Marking e_type to ET_DYN\n");
          ehdr->e_type = ET_DYN;
          printf("Updating PT_LOAD segments to become relocatable from base 0\n");
          for (i = 0; i e_phnum; i++) {
                 if (phdr[i].p_type == PT_LOAD && phdr[i].p_offset == 0) {
                       old_base = phdr[i].p_vaddr;
                       phdr[i].p_vaddr = 0UL;
                       phdr[i].p_paddr = 0UL;
                       phdr[i + 1].p_vaddr = HUGE_PAGE + phdr[i + 1].p_offset;
                       phdr[i + 1].p_paddr = HUGE_PAGE + phdr[i + 1].p_offset;
                 } else if (phdr[i].p_type == PT_NOTE) {
                       phdr[i].p_vaddr = phdr[i].p_offset;
                       phdr[i].p_paddr = phdr[i].p_offset;
                 } else if (phdr[i].p_type == PT_TLS) {
                       phdr[i].p_vaddr = HUGE_PAGE + phdr[i].p_offset;
                       phdr[i].p_paddr = HUGE_PAGE + phdr[i].p_offset;
                       new_data_base = phdr[i].p_vaddr;
                 }
          }
          /*
           * If we don't update the section headers to reflect the new address
           * space then GDB and objdump will be broken with this binary.
           */
          for (i = 0; i e_shnum; i++) {
                 if (!(shdr[i].sh_flags & SHF_ALLOC))
                       continue;
                 shdr[i].sh_addr = (shdr[i].sh_addr e_entry - old_base);
          ehdr->e_entry = ehdr->e_entry - old_base;
          munmap(mem, st.st_size);
          exit(0);
          fail:
                 exit(-1);
    }
# 6 总结
本文的目的是澄清并帮助揭开周围模糊性的错误概念——静态链接可执行文件中攻击面的内容，以及默认情况下缺少哪些安全缓解措施。RELRO和ASLR不适用于静态链接的可执行文件。但是，在本文中，我们介绍了“RelroS”工具，该工具是在静态链接的可执行文件上启用完整RELRO的原型。我们还创建了一种将编译/链接技术与仪器技术相结合的混合方法，结合我们的RELRO启用，这种解决方案可以用于制作与ASLR一起使用的静态二进制文件。目前，我们的RELRO解决方案仅适用于传统构建的静态二进制文件（例如，-static标志），因为该工具会修补glibc初始化函数。
# 6.1 给读者的课外作业
目前，relros.c和static_to_dyn.c可以单独应用，但不能同时应用;
这是因为static_to_dyn.c不适用于标准的静态链接可执行文件，而relros.c仅适用于标准的静态链接可执行文件。理想情况下，我们需要一个可以在同一个静态链接的可执行文件上应用ASLR和RELRO的工具。完成此操作的一些常规步骤：  
1.使用5.4节中的方法创建静态二进制文件。这将-nostdlib标志与使用位置无关代码编译的dietlibc版本相结合.
2.使用现有的static_to_dyn.c源代码将二进制文件转换为ET_DYN，以便可以将ASLR应用于它。
3.修改relros.c，使其适用于我们的静态PIE可执行文件。使用感染技术注入enable_relro()代码，将代码放入常规文本段，以便我们可以使用4.2节中讨论的立即调用指令;
这将使得标准的deinitialization例程在我们的代码之后运行，并且在main()之后在generic_start_main()中运行。
小贴士：  
1..got.plt攻击存在于静态链接的可执行文件中
2.RELRO不适用于静态链接的可执行文件
3.ASLR不适用于静态链接的可执行文件
4.本文提供了一些原型解决方案
5.最干净的修复方法是通过gcc/ld工具链代码
本文介绍的自定义软件：
# 参考文献：
[1] RELRO -   
[2] ASLR -   
[3] checksec.sh -   
[4] PAGEEXEC -   
[5] RANDEXEC -   
[6] static-pie -   
[7]静态补丁 -[https://gcc.gnu.org/viewcvs/gcc?view=revision&revision=252034](https://gcc.gnu.org/viewcvs/gcc?view=revision&revision=252034)  
[8]   
[9]   
[10] libelfmaster -   
[11] Relros / ASLRs - 