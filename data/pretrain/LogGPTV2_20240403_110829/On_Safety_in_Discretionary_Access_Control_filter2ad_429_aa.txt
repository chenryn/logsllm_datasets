# On Safety in Discretionary Access Control

**Authors:**
- Ninghui Li
- Mahesh V. Tripunitara

**Affiliation:**
- Department of Computer Sciences and CERIAS, Purdue University, West Lafayette, IN, USA
- Email: {ninghui, tripunit}@cerias.purdue.edu

## Abstract
A common misconception is that safety is undecidable in Discretionary Access Control (DAC). This has led to the development of new DAC schemes with decidable safety properties. In this paper, we challenge this view. We argue that DAC should not be equated with the Harrison-Ruzzo-Ullman (HRU) access matrix scheme, where safety is indeed undecidable. We present an efficient algorithm (with a cubic running time relative to input size) for deciding safety in the Graham-Denning DAC scheme, which encompasses many DAC models used in the literature. We also address several claims made by Solworth and Sloan [27], who propose a new label-based access control scheme and assert that it can implement the full range of DAC models. We provide a precise characterization of their scheme and demonstrate that it does not adequately capture even relatively simple DAC schemes.

## 1. Introduction
Safety analysis, first introduced by Harrison, Ruzzo, and Ullman [10] for the access matrix model, is a fundamental problem in access control. It determines whether unauthorized principals can acquire rights in future states. While safety analysis is undecidable in the HRU scheme, significant research has focused on designing access control schemes with decidable safety properties [1, 2, 5, 11, 17, 19, 20, 23, 24, 25, 26, 27, 29, 30].

Safety analysis is particularly relevant in DAC, where subjects receive rights to resources at the discretion of other subjects. Recent work by Solworth and Sloan [27] suggests that safety is generally undecidable in DAC, motivating the introduction of a new label-based access control scheme with decidable safety properties.

Our goals in this paper are to clarify the status of safety in DAC and to refute several claims made by Solworth and Sloan [27]. The premise of their work is that safety is undecidable in DAC, necessitating the design of new DAC schemes. We argue that this premise is a myth, likely due to the erroneous conflation of DAC with the HRU scheme [10]. 

First, the HRU scheme can encode non-DAC schemes, so its undecidability does not imply undecidability in DAC. Second, certain features of DAC, such as the requirement that each object be owned by exactly one subject, cannot be fully captured by the HRU scheme. For example, removing a subject and transferring ownership of its objects to another subject in a single state change is not possible with a single HRU command.

We dispel the myth by presenting an efficient algorithm for deciding safety in the Graham-Denning DAC scheme. Our algorithm runs in cubic time relative to the input size. The Graham-Denning scheme is, to our knowledge, the first proposed DAC scheme, and many subsequent DAC schemes are either subsumed by or are simple extensions of it. This suggests that safety in these DAC schemes can be efficiently decided without the need for new access control schemes.

Some may argue that safety in DAC schemes is trivially decidable. However, while identifying some unsafe conditions may be straightforward, a comprehensive analysis is not. To our knowledge, no algorithms for deciding safety in the Graham-Denning or related DAC schemes have been published. The correctness proof for our algorithm, detailed in our technical report [15], was non-trivial.

We also provide a precise characterization of the Solworth-Sloan scheme and its implementation of the SDCO scheme [21]. We counter several claims from Solworth and Sloan [27] and show that their scheme has significant deficiencies, such as the lack of support for removing subjects and objects and ensuring unique ownership of objects, as required by DAC schemes like SDCO. Additionally, the implementation incurs substantial overhead, requiring data structures of exponential size for each new object.

The rest of the paper is organized as follows: Section 2 discusses related work, Section 3 defines safety analysis in DAC, Section 4 studies safety in the Graham-Denning scheme, Section 5 analyzes the Solworth-Sloan scheme, and Section 6 concludes the paper.

## 2. Related Work
Significant research has been conducted on DAC and safety analysis. Graham and Denning [8] proposed the first DAC scheme based on Lampson's access matrix model [13]. Subsequent work includes GrifÔ¨Åths and Wade's DAC scheme for relational databases [9], and Downs et al.'s discussion of key aspects of DAC [7], which was later subsumed by the NCSC's guide to DAC [6]. Lunt [18] and Samarati and de Capitani di Vimercati [22] also contributed to the field. Osborn et al. [21] compared DAC to Role-Based Access Control (RBAC), and Bertino et al. [3, 4] extended DAC to include temporal constructs. Solworth and Sloan [27, 28] introduced a new DAC scheme based on labels and relabeling rules.

Safety, first proposed by Harrison et al. [10], has been extensively studied in various security contexts [1, 2, 5, 11, 14, 16, 17, 19, 20, 23, 24, 25, 26, 27, 29, 30]. Recent work by Li et al. [14, 16] views safety as a special case of more general security properties. To our knowledge, Solworth and Sloan [27] were the first to directly address safety in DAC. Other work on safety has focused on specific schemes like the HRU scheme [10], ESPM scheme [1], and trust management schemes [16]. There is no prior work on safety analysis in the context of specific DAC schemes like the Graham-Denning scheme [8].

## 3. Defining Safety Analysis in DAC
In this section, we define access control schemes and systems, and the general problem of security analysis. We then define safety analysis as a special case of security analysis, using the meta-formalism introduced by Li et al. [16, 14].

### Definition 1: Access Control Schemes and Systems
An access control scheme is a four-tuple \( \langle \Gamma, \Psi, Q, \models \rangle \), where:
- \(\Gamma\) is a set of states.
- \(\Psi\) is a set of state-change rules.
- \(Q\) is a set of queries.
- \(\models: \Gamma \times Q \rightarrow \{true, false\}\) is the entailment function, specifying whether a propositional logic formula of queries is true or false in a state.

A state-change rule \(\psi \in \Psi\) determines how the system transitions between states. Given two states \(\gamma\) and \(\gamma_1\) and a state-change rule \(\psi\), we write \(\gamma \xrightarrow{\psi} \gamma_1\) if the transition from \(\gamma\) to \(\gamma_1\) is allowed by \(\psi\), and \(\gamma \xrightarrow{*} \gamma_1\) if a sequence of zero or more allowed state changes leads from \(\gamma\) to \(\gamma_1\).

An access control system based on a scheme is a state-transition system specified by the four-tuple \(\langle \gamma, \psi, Q, \models \rangle\), where \(\gamma \in \Gamma\) is the start (or current) state, and \(\psi \in \Psi\) specifies how states may change.

Our formalism is abstract but necessary to represent various access control schemes, such as those based on the access matrix, role-based access control, and trust management approaches. When specifying a particular scheme, we use well-understood constructs to define each component precisely.

### Example: HRU Scheme
In the HRU scheme [10], the state consists of a finite set of subjects, a finite set of objects, and an access matrix. Each cell in the matrix represents the set of rights a subject has over an object. Queries \(q_1, q_2 \in Q\) in the HRU scheme might be "subject \(s\) has right \(r\) over object \(o\)" and "subject \(s\) does not have right \(r'\) over object \(o\)." Given a state \(\gamma\) and a state-change rule \(\psi\), let \(S_\gamma\) be the set of subjects, \(O_\gamma\) be the set of objects, \(M_\gamma[ ]\) be the access matrix, and \(R_\psi\) be the set of rights. Then, \(\gamma \models q_1 \land \neg q_2\) if and only if \(s \in S_\gamma \land o \in O_\gamma \land r \in M_\gamma[s, o] \land r' \notin M_\gamma[s, o]\).

### Trusted Subjects
Each instance of the analysis is associated with a set \(T\) of trusted subjects. Trusted subjects are expected to be "well-behaved," meaning they do not initiate state changes that violate desirable properties (e.g., safety). Harrison et al. [10] considered trusted subjects, but their approach, which involves deleting rows and columns corresponding to trusted subjects, is incorrect. In this paper, we require only that trusted subjects not initiate state changes; otherwise, they remain part of the system.

### Definition 2: Security Analysis
Given an access control scheme \(\langle \Gamma, \Psi, Q, \models \rangle\), a security analysis instance is of the form \(\langle \gamma, \psi, T, \Box \phi \rangle\), where \(\phi\) is a propositional logic formula of queries and \(\Box\) stands for "in the current and all future states." The instance is true if for all states \(\gamma_0\) such that \(\gamma \xrightarrow{*} \gamma_0\), \(\gamma_0 \models \phi\). That is, \(\phi\) must hold in all states reachable from \(\gamma\) under \(\psi\), with no state change initiated by a user from the set \(T\). Otherwise, the instance is false.

Harrison et al. [10] informally characterized safety as the condition that a system enables one to keep one's own objects "under control." This is appropriate for DAC systems, where the purpose is for subjects to maintain control over their objects. Formally, safety analysis is a special case of security analysis, where the invariant is that an unauthorized subject should not have a particular right over an object.