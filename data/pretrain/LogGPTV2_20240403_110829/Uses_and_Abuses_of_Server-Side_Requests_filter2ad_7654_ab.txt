### Reason for Classification Limitations
Our classification cannot be considered a taxonomy due to its reliance on the current understanding of SSR abuse, which may evolve. While the target and control dimensions cover all possible combinations, the flaw and behavior dimensions are enumerative and, therefore, may not be exhaustive. As the SSR pattern gains more popularity, new types of vulnerabilities and behaviors may be discovered. These new findings can be used to extend both the flaw and behavior dimensions. In the following sections, we provide a detailed description of each category.

### SSR Classification Overview
![SSR Classification](fig2.png)

### 3.1 Flaw-Based Classification
The first classification is based on the type of flaw in the service S. A flaw can occur when S accepts and processes inputs from the client C or when it processes the resource from the external service ES. This classification includes known vulnerabilities such as forgery and information disclosure from the CWE database and OnSec classification. Additionally, we introduce a new class of vulnerabilities called "insufficient security policy enforcement."

#### Insufficient Security Policy Enforcement
An HTTP conversation between the browser of C and ES can involve different security policies. For example, C might use URL-based reputation lists to avoid malicious pages, and the server may restrict access using the Access-Control-Allow-Origin (ACAO) header. Problems arise when S, acting as an intermediary, fails to enforce these policies. We distinguish two types of this flaw based on which side of the security policy is not enforced. Since SSRs are designed to bypass the Same-Origin Policy (SOP) for Cross-Origin Requests (CORs), SSR services inherently suffer from the server-side variant of this flaw. Therefore, we focus on client-side security policies. Although this flaw is not a vulnerability per se, insufficient client-side security policy enforcement is the root cause of Web Origin Laundering attacks, as discussed in Section 4.1.

#### Forgery
SSR forgeries occur when S does not properly validate user input used to generate the SSR, such as XML documents, PDF files, and URLs. This encompasses all currently known SSRF vulnerabilities, including those from Common Weaknesses Enumeration (CWE-113, CWE-661, CWE-829), OnSec, and Polyakov et al. [25, 16, 22]. Our classification also introduces improper URL validation vulnerabilities, which supersedes the improperly-called class of SSRF flaws (CWE-918). This group of flaws occurs when S does not validate user-provided URLs, such as rejecting URLs with unexpected schemes (e.g., file://), blacklisted domains, or invalid characters. We further classify two special cases: improper enforcement of expected destination and improper neutralization of CRLF in HTTP headers (CWE-113).

#### Information Gathering
A service S can unintentionally disclose sensitive information about ES to an attacker. This class includes SSR vulnerabilities from the 2xx group of the CWE catalog, specifically:
- **Improper Neutralization of Error Messages**: S reveals information about exceptional behavior of ES in resS.
- **Side Channels**: S leaks information about ES through differences in response times or variations in the type and size of responses.

### 3.2 Behavior-Based Classification
SSRs can be classified based on the behavior of S. We observed seven distinct behaviors that capture how a service can be abused. While some of these behaviors may seem legitimate in isolation, their combination can lead to sophisticated attacks.

#### Proxy
S acts as a proxy when it returns resES to C. We distinguish between transparent proxies (where resES is forwarded without modification) and non-transparent proxies (where resES is embedded inside resS).

#### Open Origin Policy
An open origin policy (OOP) service always returns the least restrictive ACAO:* header, ignoring the actual value set by ES. OOP services allow bypassing SOP for CORs if ES did not include the ACAO header, thus enabling any cross-origin resource sharing policy.

#### Storage
A storage service fetches resES from ES and stores it locally. S then returns an ID to C, which can be used later to retrieve resES.

#### Amplifier
An amplifier service increases the number of SSRs and/or the amount of data sent in SSRs compared to client-side requests (CSRs). We classify amplifiers as request amplifiers (increasing the number of requests) or data amplifiers (increasing the size of each request or response).

#### Bridge
A bridge service connects different layers of a protocol stack, allowing S to send packets to non-HTTP services. This behavior often results from forgery vulnerabilities, such as improper URL validation.

#### Interpreter
An interpreter service uses HTTP clients capable of interpreting JavaScript code, allowing S to control different parts of a complex attack or perform computations on the attacker's behalf.

#### Probe
A probe service collects information about an external service ES. Information can be leaked to C over side channels, enabling port scanning, host discovery, or application fingerprinting. This type of service results from forgery and information gathering flaws.

### 3.3 Control-Based Classification
The third classification is based on the control an attacker has over the content of SSRs and responses generated by S. We distinguish between control over the destination (domain, IP address, HTTP Host header, and path) and the content of the request (parameters and body). This classification supersedes Polyakovâ€™s classification [22] by adding control over the response content (i.e., the body of resS).

### 3.4 Target-Based Classification
Finally, we examine who can be the target of an SSR-based attack. We distinguish between attacks against the client C, the SSR service S, and the remote service ES. Most previously discovered vulnerabilities target ES, such as those on Facebook and Google services [27], XXE on SAP NetWeaver [22], and DB4Web (CVE-2002-1484). We extend this threat model to include attacks against the client, such as the Web Origin Laundering attack, and define S as a potential target, e.g., for resource exhaustion attacks.

### 4. Attacks
We now instantiate our classification and present seven attacks, divided into four categories: browser countermeasure evasions (Section 4.1), DoS attacks (Section 4.2), reconnaissance (Section 4.3), and bridging attacks (Section 4.4). The mapping between attacks and our classification (including the root cause flaw) is shown in Table 1. Unlike previous exploitations of SSRF, two out of seven attacks target C, highlighting the need for additional attention to SSR abuse.

### 4.1 Web Origin Laundering
Web browsers implement various URL-based defenses to protect users and data from attacks, such as Google Safe Browsing [9], NoScript [13], or AdBlock [6]. These mechanisms make security decisions based on requested URLs, e.g., limiting the scope of JavaScript programs or denying JavaScript execution. Web origin laundering is an attack that hides resource origins, bypassing URL-based defenses and leaving users exposed. In our threat model, this is an attack against C (risk R3).

**Attack 1.1**
The attacker prepares a URL that is distributed to C, e.g., `http://ssr.com/?url=host.com/mal.html`. The attacker sends this URL to C via phishing emails or social networks. When C clicks the URL, the browser verifies whether the URL is blacklisted. Since `ssr.com` is not blacklisted, C sends message 1 to S. S extracts the URL from the parameter `url`, fetches the malicious content from `host.com/mal.html`, and returns it to C. We have successfully performed this attack, bypassing the Google Safe Browsing mechanism in Google Chrome 43.0.2357.130 and Mozilla Firefox 39.0. In these attacks, we used two proxy services to relay known phishing pages, drive-by download pages, and malware binaries (e.g., EICAR Standard Anti-Virus Test File and Virus.Win32.Virut).

Researchers have recently found criminals using a similar technique to distribute links to phishing pages. The attacker distributes a Google URL that redirects to the malicious target. However, browser countermeasures can detect and block the attempt to redirect the user to a malicious domain. Our attack, however, does not rely on redirects but instead uses SSRs to hide the true origin of the malicious content. An additional confirmation of the severity of this threat was provided in a recent NoScript bypass attack based on an SSRF vulnerability in the Akamai content delivery network.

**Attack 1.2 (Escaping Content Dispositions)**
Attack 1.1 can be blocked by the Content-Disposition response header of S, which suggests that the browser should not display the returned resource to the user. However, even with the Content-Disposition header, it is still possible to deliver and display malicious content. Consider the following JavaScript code embedded in a malicious web page hosted by a third-party service:

```javascript
var malware = "http://host.com/mal.html";
var cor = new XMLHttpRequest();
cor.onreadystatechange = function() {
    var ct = this.getResponseHeader("content-type");
    window.location = "data:" + ct + "," + encodeURIComponent(cor.responseText);
}
cor.open("GET", "http://ssr.com/?url=" + encodeURIComponent(malware), false);
cor.send();
```

The URL of the malicious resource, `urlES`, is stored in the variable `malware` and retrieved with an asynchronous request. If the attacker directly used the value in `malware`, the attempt to reach a malicious server would be detected. Instead, the JavaScript program transforms the fetched malicious resource into a data URL, which does not point to a resource but contains the resource within the URL itself. The browser is then directed to the data URL, and the malicious content is displayed to the user. We have developed proofs of concept for these attacks and bypassed the Google Safe Browsing mechanism in Chrome and Firefox using a proxy service that returned the Content-Disposition response header. We used URLs of real phishing pages and actual malware binaries.

### 4.2 Denial of Service
We present three scenarios where SSR is abused to perform DoS attacks against S. These attacks are grouped into two categories: domain blacklisting and resource exhaustion.

**Attack 2.1 (DoS via Domain Blacklisting)**
Browsers prevent users from visiting websites known to host malicious content. An attacker can poison these blacklists to block benign sites that expose a proxy behavior by using the web origin laundering technique. The attacker prepares a URL for the proxy service that contains the URL of a malicious page and submits it to the blacklist operator (e.g., Google for Safe Browsing) to initiate a scan. Since the malicious content seems to come from the proxy service, the benign site may be blacklisted, leading to a DoS condition.