###  MEUZZ
本文一作和 Savior 是同一人，所以思路也是相似的，也是对 seed 做一个排序调度，只不过本文是基于机器学习的方法做的。
本文认为，seed selection 在 hybrid fuzzing 中有很重要的作用，因为 fuzzing 速度远大于
concolic，由于时间和资源有限，concolic execution 只能执行部分的 seed，故需要对 seed 进行调度排序。
而现有的工作对 seed
的挑选都是基于一些启发式规则，这些规则并不能完全适用于所有程序。基于学习的方法是最适合于不同的程序的，可以根据程序的执行情况进行学习，从而调整 seed
selection 策略。
所以 MEUZZ 提出基于机器学习的方法来进行 seed selection。首先是对程序和 seed 进行特征提取，然后对 concolic engine
产生的每个 seed 构建一个后代树，记录在 fuzz 过程中，从该 seed 产生的后代 seed，将这棵树的大小，即 node 数量作为 seed 的
label，在 hybrid fuzzing 过程中不断更新模型，挑选 seed。
###  Intriguer
####  问题
本文认为，hybrid fuzzing 中还存在一些问题可以改进：
(1) 符号模拟非常慢  
(2) 一些不必要的求解占据了大多数的时间  
(3) 资源被过度分配  
(4) 一些难触发的漏洞被忽略了
下面具体来说明一下这些问题：
#####  符号模拟执行慢
根据本文调研，发现程序中大部分的数据转移指令，例如 mov 一类的指令，在程序中占比很大，但是这些指令没有符号模拟的必要，因为只需要对 mov
指令的前后两条指令的数据的值进行比较，就可以知道数据的转移位置。
所以，如果可以避免这些 mov 类的指令执行，可以大大缩短符号模拟的时间。
#####  不必要的求解
程序中存在一些复杂的函数，例如 hash
函数，加密解密函数，压缩函数等等，这些函数操作非常复杂，涉及的输入很多，且容易产生无法求解的约束，减少对这些约束的求解，避免多数时间浪费在这些不必要的求解上。
#####  资源过度分配
concolic execution 相比 fuzzing，求解能力强很多，类似 magic byte
这样程序中常见的约束很容易解掉，但是本文认为，类似于`x == 0xdeadbeef`，以及`x > 0 ^ x  INT_MAX`、`F-100 195`简化为`0195`
本文的 key idea 就是保留和重用路径上一个阶段的解空间，本文称为：多边形路径摘要 (polyhedral path
abstraction)，这些路径摘要是与目标路径约束相关的输入变量的边界范围。
首先需要推断出路径摘要，文章提出一种方法，可以将路径约束简化为一组线性不等式，这个不等式是近似但不完全等于路径约束，是包含的关系，保证不等式的范围完全覆盖路径约束的数据范围。
然后引导 fuzzing
变异，保证变异的范围在路径摘要的范围内，且满足均匀分布。同时能够加快求解的速度，主要是能快速验证约束是否可解，因为简化后的不等式组都是线性的，如果简化后的不等式组都不可解，说明真正的路径约束更加不可能求解，直接剪枝。
###  CAB-Fuzz
本文是对闭源 OS 进行的一个 concolic execution 工作，其实不能算是 hybrid fuzzing。CAB-Fuzz
的取名意为Context-Aware and Boundary-focused。其次值得一提的是，本文的作者中有 QSYM 的作者Insu Yun。
对闭源 OS 进行符号执行，常见的挑战就是状态爆炸问题，而且对于闭源的 OS，缺少文档和配套的 test suites，很难构建一个合适 pre-context。
本文实际上是绕过了这两个问题：
(1)
因为状态太多，本文就集中于边界的值上，文章观察到，边界值是最容易出问题的地方，特别是循环的边界和数组的边界，所以在循环时取0次、1次、最大次的值进行符号执行，数组的值取最低地址和最高地址的值进行符号执行。
(2)至于如何构建context，文章直接采用 real world program 执行，在执行后自然构建 context 以后，再进行 on-the-fly concolic execution，绕过了这个问题。
###  HFL
本文是对 Linux kernel 的一个 hybrid fuzzing 工具，面临的 challenge 主要是以下几点 kernel 特定的问题：
(1) 由 syscall 参数决定的间接控制流跳转  
(2) syscall 决定的系统内部状态  
(3) syscall 调用时需要推断嵌套参数类型
现有的 hybrid fuzzing 要么是没有解决这些问题，要么是用静态分析不准确的部分解决这些问题。
本文针对以上问题的解决方法如下：
(1) 在编译时将原有的间接控制流跳转转为直接的跳转，例如图
(2) 对 syscall 的调用顺序进行推断，首先进行静态的指针分析，收集所有对相同地址进行读写的指令对，作为 candidate
pair，然后在运行时对 candidate pair
进行进一步验证，符号执行时是否确实是对相同地址的读写。最后对这些指令操作的数据进行追踪，相关的函数就是存在调用顺序依赖的关系。
(3) 最后是识别嵌套的参数类型，具体是先对一些 transfer 函数进行监控，通过内存位置和内存 buffer 的长度来进行判断嵌套的参数类型。
## 参考文献
[1] [Driller: Augmenting Fuzzing Through Selective Symbolic
Execution](https://www.ndss-symposium.org/wp-content/uploads/2017/09/driller-augmenting-fuzzing-through-selective-symbolic-execution.pdf)  
[2] [QSYM: A Practical Concolic Execution Engine Tailored for Hybrid
Fuzzing](https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-yun.pdf)  
[3] [Send Hardest Problems My Way: Probabilistic Path Prioritization for
Hybrid Fuzzing](https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_04A-5_Zhao_paper.pdf)  
[4] [SAVIOR: Towards Bug-Driven Hybrid
Testing](http://arxiv.org/abs/1906.07327)  
[5] [MEUZZ: Smart Seed Scheduling for Hybrid
Fuzzing](https://www.usenix.org/system/files/raid20-chen.pdf)  
[6] [Intriguer: Field-Level Constraint Solving for Hybrid
Fuzzing](https://dl.acm.org/doi/10.1145/3319535.3354249)  
[7] [Pangolin: Incremental Hybrid Fuzzing with Polyhedral Path
Abstraction](https://www.researchgate.net/profile/Heqing-Huang-14/publication/343342810_Pangolin_Incremental_Hybrid_Fuzzing_with_Polyhedral_Path_Abstraction/links/61418d04ea4aa80011048dfd/Pangolin-Incremental-Hybrid-Fuzzing-with-Polyhedral-Path-Abstraction.pdf)  
[8] [CAB-FUZZ: Practical Concolic Testing Techniques for COTS Operating
Systems](https://www.usenix.org/system/files/conference/atc17/atc17-kim.pdf)  
[9] [HFL: Hybrid Fuzzing on the Linux Kernel](https://www.ndss-symposium.org/wp-content/uploads/2020/02/24018.pdf)