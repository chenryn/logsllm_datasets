### MEUZZ
MEUZZ 与 Savior 的作者为同一人，因此两者的思路有相似之处。本文提出了一种基于机器学习的种子调度方法。在混合模糊测试（hybrid fuzzing）中，种子选择（seed selection）至关重要，因为模糊测试的速度远高于符号执行（concolic execution）。由于时间和资源有限，符号执行只能处理部分种子，因此需要对种子进行调度排序。

现有的种子选择方法大多依赖于启发式规则，但这些规则并不适用于所有程序。相比之下，基于机器学习的方法能够根据程序的具体执行情况动态调整种子选择策略，从而更好地适应不同程序的需求。MEUZZ 提出了一种基于机器学习的方法来进行种子选择。具体步骤如下：
1. **特征提取**：从程序和种子中提取特征。
2. **后代树构建**：为每个由符号执行引擎生成的种子构建一个后代树，记录在模糊测试过程中从该种子产生的后代种子。
3. **标签生成**：将后代树的大小（即节点数量）作为种子的标签。
4. **模型更新**：在混合模糊测试过程中不断更新模型，并根据模型挑选种子。

### Intriguer
Intriguer 认为，在混合模糊测试中存在一些可以改进的问题：
1. **符号模拟执行慢**：程序中的许多数据转移指令（如 `mov` 指令）不需要进行符号模拟。通过避免这些指令的执行，可以显著缩短符号模拟的时间。
2. **不必要的求解**：复杂的函数（如哈希函数、加密解密函数、压缩函数等）涉及大量输入且容易产生无法求解的约束。减少对这些约束的求解可以避免浪费时间。
3. **资源过度分配**：符号执行虽然求解能力强，但在某些情况下会导致资源过度分配。例如，对于常见的约束（如 `x == 0xdeadbeef`），符号执行很容易解决，但可能会导致资源浪费。
4. **忽略难触发的漏洞**：一些难以触发的漏洞可能被忽略。

Intriguer 的关键思想是保留和重用路径上的解空间，称为多边形路径摘要（polyhedral path abstraction）。这些摘要是与目标路径约束相关的输入变量的边界范围。具体步骤如下：
1. **推断路径摘要**：将路径约束简化为一组线性不等式，这些不等式近似但不完全等于路径约束，并保证其范围完全覆盖路径约束的数据范围。
2. **引导模糊变异**：确保变异的范围在路径摘要的范围内，并满足均匀分布。这有助于加快求解速度，特别是快速验证约束是否可解。如果简化后的不等式组都不可解，则真正的路径约束更不可能求解，从而直接剪枝。

### CAB-Fuzz
CAB-Fuzz 是针对闭源操作系统的符号执行工作，不能严格算作混合模糊测试。CAB-Fuzz 的命名意为“上下文感知和边界聚焦”。值得一提的是，本文的作者之一是 QSYM 的作者 Insu Yun。

对闭源操作系统进行符号执行面临的主要挑战包括状态爆炸问题和缺乏文档及配套测试套件，难以构建合适的预置上下文。CAB-Fuzz 通过以下方法绕过了这些问题：
1. **集中于边界值**：观察到边界值（如循环边界和数组边界）最容易出现问题，因此在循环时取 0 次、1 次和最大次的值进行符号执行，数组的值取最低地址和最高地址的值进行符号执行。
2. **构建上下文**：直接采用真实世界程序的执行来自然构建上下文，然后进行实时符号执行。

### HFL
HFL 是针对 Linux 内核的混合模糊测试工具，主要面临的挑战包括：
1. **由系统调用参数决定的间接控制流跳转**。
2. **系统调用决定的系统内部状态**。
3. **系统调用时需要推断嵌套参数类型**。

现有混合模糊测试工具要么没有解决这些问题，要么使用静态分析方法但不够准确。HFL 针对这些问题提出了以下解决方案：
1. **编译时转换**：将原有的间接控制流跳转转换为直接跳转。
2. **系统调用顺序推断**：首先进行静态指针分析，收集所有对相同地址进行读写的指令对作为候选对，然后在运行时进一步验证这些候选对是否确实是对相同地址的读写。最后，对这些指令操作的数据进行追踪，确定存在调用顺序依赖关系的函数。
3. **识别嵌套参数类型**：监控一些传输函数，通过内存位置和内存缓冲区长度来判断嵌套参数类型。

## 参考文献
[1] [Driller: Augmenting Fuzzing Through Selective Symbolic Execution](https://www.ndss-symposium.org/wp-content/uploads/2017/09/driller-augmenting-fuzzing-through-selective-symbolic-execution.pdf)  
[2] [QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing](https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-yun.pdf)  
[3] [Send Hardest Problems My Way: Probabilistic Path Prioritization for Hybrid Fuzzing](https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_04A-5_Zhao_paper.pdf)  
[4] [SAVIOR: Towards Bug-Driven Hybrid Testing](http://arxiv.org/abs/1906.07327)  
[5] [MEUZZ: Smart Seed Scheduling for Hybrid Fuzzing](https://www.usenix.org/system/files/raid20-chen.pdf)  
[6] [Intriguer: Field-Level Constraint Solving for Hybrid Fuzzing](https://dl.acm.org/doi/10.1145/3319535.3354249)  
[7] [Pangolin: Incremental Hybrid Fuzzing with Polyhedral Path Abstraction](https://www.researchgate.net/profile/Heqing-Huang-14/publication/343342810_Pangolin_Incremental_Hybrid_Fuzzing_with_Polyhedral_Path_Abstraction/links/61418d04ea4aa80011048dfd/Pangolin-Incremental-Hybrid-Fuzzing-with-Polyhedral-Path-Abstraction.pdf)  
[8] [CAB-FUZZ: Practical Concolic Testing Techniques for COTS Operating Systems](https://www.usenix.org/system/files/conference/atc17/atc17-kim.pdf)  
[9] [HFL: Hybrid Fuzzing on the Linux Kernel](https://www.ndss-symposium.org/wp-content/uploads/2020/02/24018.pdf)