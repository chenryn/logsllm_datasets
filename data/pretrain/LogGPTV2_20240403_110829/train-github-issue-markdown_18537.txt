### Describe your issue.
When the `hybr` method doesn't converge, it may sometimes report erroneously
`success = True`. For example, looking at the function $f(x) = x^2-2x$ for
initial value $x_0=1$ (or values very close to $1$), this method reports
convergence on `1.01` .
When looking at other methods available in `root`, `hybr` is the only one to
falsely report success while being clearly not converged.
I would propose adding a last function call to `hybr` and setting `success`
accordingly
### Reproducing Code Example
    >>> root(lambda x: x**2-2*x, x0=1.)
        fjac: array([[-1.]])
         fun: array([-0.9999])
     message: 'The solution converged.'
        nfev: 6
         qtf: array([0.9999])
           r: array([-0.02000001])
      status: 1
     success: True
           x: array([1.01])
    >>> methods = ['hybr', 'lm', 'broyden1', 'broyden2',
    ... 'anderson', 'linearmixing', 'diagbroyden', 'excitingmixing',
    ... 'krylov', 'df-sane']
    >>> for m in methods:
    ...     r = root(lambda x: x**2-2*x, x0=1., method=m)
    ...     print(f"{m}: {r.success = }, {r.x = }")
    ... 
    hybr: r.success = True, r.x = array([1.01])
    lm: r.success = True, r.x = array([2.])
    broyden1: r.success = True, r.x = array(4.46196389e-07)
    broyden2: r.success = True, r.x = array(4.46196389e-07)
    anderson: r.success = True, r.x = array(1.4289777e-06)
    linearmixing: r.success = True, r.x = array(4.65661287e-10)
    diagbroyden: r.success = True, r.x = array(4.46196389e-07)
    excitingmixing: r.success = True, r.x = array(1.18976516e-07)
    krylov: r.success = False, r.x = array(1.)
    df-sane: r.success = True, r.x = array(2.)
### Error message
    -
### SciPy/NumPy/Python version information
1.9.3 1.23.4 sys.version_info(major=3, minor=10, micro=6,
releaselevel='final', serial=0)