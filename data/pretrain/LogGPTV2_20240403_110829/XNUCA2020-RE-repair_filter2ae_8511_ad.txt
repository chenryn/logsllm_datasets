        elif p.type == inst_type.COND:
            # 条件跳转
            asm += "\tcmp r6, #0\r\n"
            asm += "\tbeq pos_%d\r\n" % p.address[0]
            asm += "\tb pos_%d\r\n" % p.address[1]
    # 程序判断输入正确的跳转
    asm += "pos_6452:\r\n" 
    for i in cs.disasm(repair_bytes[0x1934:0x193C], 0x11934):
        asm += "\t%s\t%s\r\n" % (i.mnemonic, i.op_str)
    assembly, _ = ks.asm(asm, 0x10A54) 
    # 输出
    repair_bytes = list(repair_bytes)
    repair_bytes[0xA54: 0xA54 + len(assembly)] = assembly
    fp = open(r"E:\Ctf\XNUCA2020\repair\repair\repaired", 'wb')
    fp.write(bytes(repair_bytes))
    fp.close()
## 还原后分析
还原后代码如下
    int __fastcall sub_10A54(unsigned __int8 *a1, unsigned __int8 *a2, int *a3)
    {
      int v5; // [sp+14h] [bp+14h]
      v5 = 0;
      do
      {
        while ( 1 )
        {
          while ( 1 )
          {
            while ( 1 )
            {
              while ( 1 )
              {
                while ( 1 )
                {
                  while ( 1 )
                  {
                    while ( 1 )
                    {
                      while ( !a2[v5] )
                      {
                        a3[a2[v5 + 1]] = (16975111 * (a2[v5 + 1] + 127)) ^ a1[(16975111 * (a2[v5 + 2] + 127)) ^ a3[a2[v5 + 2]]];
                        v5 += 3;
                      }
                      if ( a2[v5] != 1 )
                        break;
                      a3[a2[v5 + 1]] = (16975111 * (a2[v5 + 1] + 127)) ^ ((a3[a2[v5 + 3]] ^ (16975111 * (a2[v5 + 3] + 127)))
                                                                        + ((16975111 * (a2[v5 + 2] + 127)) ^ a3[a2[v5 + 2]]));
                      v5 += 4;
                    }
                    if ( a2[v5] != 2 )
                      break;
                    a3[a2[v5 + 1]] = (16975111 * (a2[v5 + 1] + 127)) ^ ((a3[a2[v5 + 3]] ^ (16975111 * (a2[v5 + 3] + 127)))
                                                                      - ((16975111 * (a2[v5 + 2] + 127)) ^ a3[a2[v5 + 2]]));
                    v5 += 4;
                  }
                  if ( a2[v5] != 3 )
                    break;
                  a3[a2[v5 + 1]] = (16975111 * (a2[v5 + 1] + 127)) ^ ((a3[a2[v5 + 3]] ^ (16975111 * (a2[v5 + 3] + 127)))
                                                                    * ((16975111 * (a2[v5 + 2] + 127)) ^ a3[a2[v5 + 2]]));
                  v5 += 4;
                }
                if ( a2[v5] != 4 )
                  break;
                a3[a2[v5 + 1]] = (16975111 * (a2[v5 + 1] + 127)) ^ a3[a2[v5 + 3]] ^ (0x1030507 * (a2[v5 + 3] + 127)) ^ (16975111 * (a2[v5 + 2] + 127)) ^ a3[a2[v5 + 2]];
                v5 += 4;
              }
              if ( a2[v5] != 5 )
                break;
              a3[a2[v5 + 1]] = (16975111 * (a2[v5 + 1] + 127)) ^ (a3[a2[v5 + 3]] ^ (0x1030507 * (a2[v5 + 3] + 127))) & ((0x1030507 * (a2[v5 + 2] + 127)) ^ a3[a2[v5 + 2]]);
              v5 += 4;
            }
            if ( a2[v5] != 6 )
              break;