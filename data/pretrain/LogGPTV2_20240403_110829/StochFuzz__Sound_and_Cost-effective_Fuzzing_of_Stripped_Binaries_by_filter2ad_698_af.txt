0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
37
0
0
0
0
0
0
304
98
0
10
1
5
0
0
0
4
0
1
2
0
45
3
186
7
2
1
2
7
7
19
1
17
0.09
0.00
0.03
0.01
0.04
0.02
0.06
0.04
0.03
0.01
0.04
0.04
0.00
0.18
0.03
0.13
0.06
0.00
0.02
0.09
0.02
0.04
0.02
0.05
0.04
6.18
212 12.59
0.00
2 17.49
2.47
461 10.58
0.16
8.46
201
4.64
453
9.25
0.00
80 14.40
0.04
137 16.90
0.00
215 11.35
2.91
9.11
81
0.00
32
8.17
0.09
124 19.56
0.05
317
8.80
0.00
7,258 7,562 12.86
0.50
211 12.29
0.00
28
9.74
2.61
369 11.11
0.37
26 13.77
0.97
437
5.64
0.14
47 13.16
0.37
135 18.80
0.31
9.03
700
8.74
58
3.25
5.31 10.45
52
894 14.53
0.00
1.48
535 11.74
%FN %FP %FN %FP
114
boringssl
0.08
2
c-ares
0.00
335
freetype2
0.05
200
guetzli
0.00
448
harfbuzz
0.14
80
json
0.00
137
lcms
0.01
215
libarchive
0.00
77
libjpeg-turbo
0.26
32
libpng
0.00
123
libssh
0.00
libxml2
315
0.00
llvm-libcxxabi 304
0.00
openssl-1.0.1f
166
0.01
openssl-1.0.2d
25
0.00
openssl-1.1.0c 183
0.08
19
openthread
0.00
398
pcre2
0.00
proj4
46
0.00
133
re2
0.02
693
sqlite
0.00
51
vorbis
0.10
33
woff2
0.04
wpantund
893
0.00
Average
209
0.03
At the end, they are reduced to almost non-existent (0.04%
and 0.03%, respectively). These results are consistent with
our theoretical bounds developed in Section IV. We randomly
inspect some of the FPs and ﬁnd that all of them are data
bytes that have no effect on execution path (and hence have
no negative impact on fuzzing results). Neither do they cause
crashes. Also note that the FNs are at the byte level. If we look
at the basic block level, STOCHFUZZ does not miss any basic
blocks. In other words, in very rare cases (0.04%), it may miss
the ﬁrst one or two bytes in a basic block, but recognizes and
instruments the following instructions. These FNs hence have
no impact on fuzzing results. Also observe that the number
of crashes by rewriting errors is very small (17) compared
to that of intentional crashes (209). The former entails the
relatively more expensive error diagnosis and repair process.
It implies that most rewriting errors are ﬁxed by observing
new coverage, without triggering unintentional crashes. Fig. 11
shows how these numbers change over time for freetype2.
Observe that they stabilize/converge quickly. The results for
others are similar and elided.
C. Comparison with RetroWrite
Different from other techniques, RetroWrite has a number
of strong prerequisites about target binaries. The binary has
to contain symbols and relocation information, should not
be written in C++, should not contain inlined data, and is
position independent. Hence, RetroWrite cannot be used in
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:54 UTC from IEEE Xplore.  Restrictions apply. 
12670
VIII. RELATED WORK
Binary-only Fuzzing. Closely related to STOCHFUZZ is
binary-only fuzzing that
targets on closed-source software
which has only binary executables available [12], [14]–[16],
[18], [22]–[25]. As aforementioned, these works either reply
on expensive operations or make impractical assumptions,
limiting their wide adoption on real-world stripped binaries.
Probabilistic Analysis. Probabilistic techniques have been
increasingly used in program analysis in recent years. Suc-
cessful cases include symbolic execution [48], [49], model
checking [50]–[52], type inference [32], etc. By introducing
stochastic algorithms, those hard-to-solve problems using tra-
ditional program analysis techniques can be (partially) solved
in a light-weight manner, whose correctness has probabilistic
guarantees under practical assumptions. STOCHFUZZ lever-
ages probabilistic analysis to aggregate evidence through many
sample runs and improve rewriting on-the-ﬂy.
N-version Programming. N-version programming [53] is a
software fault-tolerance technique, in which multiple variants
of a program are executed in parallel and the results of
individual executions are aggregated to reduce the likelihood
of errors. It has been adopted to ensure memory safety [54],
[55], concurrency security
[56], [57], and computing cor-
rectness [58], [59], etc. UnTracer [60] continuously modi-
ﬁes target programs on the ﬂy during fuzzing using source
instrumentation so that
they self-report when a test case
causes new coverage, in order to improve fuzzing efﬁciency.
Inspired by these works, STOCHFUZZ also uses many versions
of rewritten binaries whose validity can be approved/disap-
proved by numerous fuzzing runs. The difference lies that our
versioning is driven by a rigorous probability analysis that
updates probabilities on-the-ﬂy. Our idea of disassembling at
all addresses is inspired by Superset Disassembly [38], which
however does not leverage probabilities.
IX. CONCLUSION
We develop a new fuzzing technique for stripped binaries. It
features a novel incremental and stochastic rewriting technique
that piggy-backs on the fuzzing procedure. It leverages the
large number of trial-and-error chances provided by the nu-
merous fuzzing runs to improve rewriting accuracy over time.
It has probabilistic guarantees on soundness. The empirical
results show that it outperforms state-of-the-art binary-only
fuzzers that are either not sound or having higher overhead.
ACKNOWLEDGMENT
The authors would like to thank the anonymous reviewers
for their constructive comments.
The Purdue authors were supported in part by NSF 1901242
and 1910300, ONR N000141712045, N000141410468 and
N000141712947, and IARPA TrojAI W911NF-19-S-0012.
The RUC author was supported in part by NSFC under grants
62002361 and U1836209. The Waterloo author was supported,
in part by NSERC under grant RGPIN-07017. Any opinions,
ﬁndings, and conclusions in this paper are those of the authors
only and do not necessarily reﬂect the views of our sponsors.
Fig. 11: Change of intentional/unintentional crashes and false
positive/negative rate over time for freetype2
the Google FTS experiments. To compare with RetroWrite,
we use their benchmarks that satisfy all the above conditions.
Fig. 12 (in Appendix) and Table VI (in Appendix) show
the numbers of fuzzing executions and the path coverage in
24 hours, respectively. STOCHFUZZ led to 98.7M executions
and RetroWrite led to 94.7M executions, on average. The
results show STOCHFUZZ achieves similar performance to
RetroWrite.
VII. CASE STUDIES
A. Finding Zero-days in Closed-source Programs
We further run STOCHFUZZ on a set of 7 closed-source
or Commercial Off-The-Shelf (COTS) binaries and ﬁnd two
zero-day vulnerabilities in a week. One is in CUDA Binary
Utilities (by NVIDIA), a set of utilities that can extract
information from CUDA binary ﬁles [45] and the other is
in PNGOUT, a closed-source PNG ﬁle compressor adopted
by multiple commercial or non-commercial image optimizers
used in thousands of websites [46], [47]. We have reported the
bugs to the vendors. The former has been ﬁxed by NVIDIA
and the latter has been assigned a CVE ID. Details can be
found in Appendix X-F.
B. Collect Other Runtime Feedback Than Coverage
We conduct a case study in which we use STOCHFUZZ to
collect other runtime feedback than coverage. IJON [21], a
state-aware fuzzing technique, increases fuzzing effectiveness
by observing how the values of given variables change.
Speciﬁcally, the tester annotates important variables in source
code and the compiler instruments accesses to these variables
to track their runtime changes. The changes, together with
code coverage, guide input mutation. As reported in [21], it
substantially improves fuzzer performance for speciﬁc kinds