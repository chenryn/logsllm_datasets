对于桌面工作站而言，通常都能够通过宽带Internet或本地网络连接
到群件服务器上，可以快速地在线访问服务器中的数据。这就意味
着除非用户出于备用或节省带宽的想法，希望在本地保留一个副
本，否则就可以对缓存采用十分被动的策略，或许只保存已下载的
附件以供本地索引和引用。这些缓存策略可以按文件夹、账户、后
端进行设置，并且可以由服务器的一个线程中运行的线程来强制执
行，对于数据库的低优先级的、常规的查询结果可以根据所有适用
的策略进行清理。
在2007年的会议上，发现了架构中一个主要的缺失，那就是如何处
理搜索和语义性链接。KDE4.0平台已经通过Strigi和Nepomuk两个
项目为扩散式索引（pervasiveindexing）、富元数据管理和语义Web
提供了一些强大的解决方案，将其集成到Akonadi是十分有趣的。不
清楚的地方在于，是将负责向Strigi提供用来全面索引的数据的组件
实现为一个代理，再通过一个独立的进程处理源于内核的消息提
醒；或者为了获得更好的性能，将其集成到服务器应用程序中。由
于至少全文索引信息会存储在Akonadi之外，那么就将引出一个相关
的问题，那就是如何分解搜索查询，如何集成源于Strigi和Akonadi
自身的查询结果，以及如何将查询传给能够提供在线查询的后端服
务器系统，诸如LDAP服务器。同样，还讨论了应该使用什么样的
策略来和Nepomuk划分职责边界，例如添加标签的工作是否可以完
全委托给它。从某种程度上看，这些讨论仍旧在继续，其涉及的技
术也随着Akonadi的发展而不断变化，而当前使用的方法仍然能够有
效地应用到产品中。在本书编写时，有一些负责向Nepomuk和Strigi
提供数据的代理；这些是独立的进程，它们和所有其他客户端、资
源使用相同的API来访问存储层。进入的搜索查询将以XESAM或
1207
---
## Page 1209
SPARQL表示，它们分别是Strigi和Nepomuk中的查询语言，在其他
搜索引擎（例如Beagle）中也有相应的实现，然后将其通过DBUS转
发出去。这一转发操作发生在Akonadi服务器进程中。其结果将通过
DBUS返回，并以标识符列表的形式提供，Akonadi根据这一列表能
够生成源于存储层的实际数据项，并将其返回给用户。此时数据层
本身并不执行任何搜索和内容索引操作。
针对KDE的、C++访问程序库的API的发展成熟还需一段时间，最主
要的原因是它还没有在程序库中清晰地解决服务器如何从类型无关
的基础上输出多种类型信息。通过2007年4月的会议，它明确了对
访问程序库进行扩展以支持新类型的方法，也就是被称为序列化器
（serializer）的插件。这是运行时可载入的程序库，它能够将某种
特定格式的数据（以mime类型标识）转化为二进制表示，以便以
BLOB类型字段存储在服务器上，同时也能将二进制表示的数据转
成特定格式的数据，还可以从序列化后的数据恢复成内存中的表
示。它与添加新的存储层后台支持是正交的，例如需要添加一种新
的数据格式，它是由一个新的资源进程（一个代理）实现的。这个
资源的职责就是将服务器下发的内容转化为有类型的、内存中的表
现形式，它知道如何处理这种表现形式。然后，再利用一个序列化
插件，将它转化为二进制数据流，以便能够存入Akonadi存储库，并
在访问该库时进行反向转换。这个插件还能够将数据分成多个部
分，以便对局部访问提供支持（例如只访问邮件正文或附件）。该
程序库中的核心类是Akonadi：Item，它表示的是存储层中的一个数
据项。它拥有唯一ID，它是一个全局标识符，用来标识在用户桌面
中的实体，并作为语义链接的一部分，与其他实体关联（例如
remote标识符）。它将映射到一个源存储位置、属性、一个数据负
载，以及其他一些有用的基础设施，如标志位（flag）或修订计数
器。属性和负载都是强类型的，用来设置和获取它们的方法都是模
板化的。Akonadi：Item实例可以自己赋值，是易于复制的、轻量级
的。数据项可以对负载和属性的类型进行参数化，而无需使用模板
类本身。模板逻辑使其变得有些棘手，但得到的API是十分易用
的。负载被假定是一个值类型，以避免赞成所有权语义的不清晰。
当负载需要多态时就需要一个指针，或者当它已经是一个用来处理
特定类型数据的、基于指针的程序库（例如libkcal程序库，它是
KDE中用来实现事件和任务管理的），都将共享指针（如boost：
shared_ptr），用来提供值的语义。为负载设置一个原始指针有助于
检查模板的特化，还能够设置运行时断言。
1208
---
## Page 1210
下面的示例展示了在Akonadi中添加一种新的数据类型支持是多么简
单，在通常情况下，已经有能够处理此种格式数据的程序库。它展
示了联系人的序列化器插件的源代码，KDE库将联系人称为
KABC：Addressee对象：
bool SerializerPluginAddressee: deserialize (Item&item,
const QByteArray&label,
QIODevice & data,
int version)
if (label! =Item: FullPayloadllversion! =1)
return false:
KABC: Addressee
a=m_converter.parseVCard (data.readAll () ） ;
if (! a.isEmpty () )(
item.setPayload (a) ;
}else {
kWarning ()  () )
return;
const KABC: Addressee a=item.payload () :
data.write (m_converter.createVCard (a) ):
version=1:
上
通过设置负载类型的setPayload以及Item类中的hasPayload方法，开
发人员能够直接、方便地使用其数据类型程序库中的原生类型。与
存储层的交互通常表示为一个任务，这是command（命令）模式的
一个应用。这些任务将跟踪一个操作的生命周期，提供取消操作的
功能并能够访问错误上下文，并允许单步跟踪。通过Monitor类可以
监控存储层中你感兴趣的范围内的修改，如某种mime类型、某个集
合，或者甚至是某些特定数据项。下面这个源于电子邮件通知
Applet程序的示例中展现了这些概念。在该例中，负载类型就是多
态的，并封装在一个共享的指针中：
Monitor*monitor=new Monitor (this) ;
monitor->setMimeTypeMonitored ("message/rfc822") ;
Envelope) :
connect (monitor,SIGNAL (itemAdded (Akonadi: Item, Akonadi:
Collection) ),
SLOT (itemAdded (Akonadi: Item) ) );
connect (monitor, SIGNAL (itemChanged (Akonadi: Item, QSet) ),
SLOT (itemChanged (Akonadi: Item) ) ) ;
1210
---
## Page 1212
//开始下载最初的电子邮件，以显示第一封电子邮件
ItemFetchJob*fetch=new
ItemFetchJob (Collection (myCollection)， this);
fetch->fetchScope () .fetchPayloadPart (MessagePart:
Envelope ) :
Connect (fetch, SIGNAL (result (KJob*) ),
SLOT（fetchDone（KJob*)));
typedef boost: shared_ptrMessagePtr:
void MyMessageModel: itemAdded (const Akonadi: Item&item)
if (! item.hasPayload () )
return;
MessagePtr msg=item.payload () ;
doSomethingWith (msg->subject （) );
[l].与Akonadi服务器交互并读、写其数据的实体称为代理
（agent）。数据挖掘代理就是一个很常见的例子。特定用来处理本
地缓冲和远程服务器间数据同步的代理称为资源（resource）。
[2]_http://pim.kde.org/development/meetings/osnabrueck4/icaldir.php
12.3.4第一次发布和未来
2008年1月，当开发小组再次聚集在寒冷、多雨的Osnabrueck时，就
有并发人员展示了使用Akonadi的第一个应用程序，他们是受邀参加
的。Mailody（KDE中默认电子邮件应用程序的一个竞争者）的作者
在Akonadi能够帮他们并发出更好的应用程序之前就决定选择它，并
且成为第一批尝试使用它的工具和API的团队。他们的反馈是十分
1211
---
## Page 1213
有价值的，对于大家找出哪些过于复杂、哪里要进一步细化、哪些
概念还没有良好的文档化或良好地实现都是十分有帮助的。Akonadi
的另一个早期采用者KevinKrammer也参加了会议，他曾经着手开始
完成一些有意思的任务，希望能让KDE中针对PIM数据的遗留程序
库进行修改，通过兼容的代理和资源来使其能够访问Akonadi。他所
遇到的问题是如何在API中开些小口，并验证至少所有的功能能够
在新工具中存在。
本次会议最值得注意的讨论结果是决定与IMAP在协议级实现向后
兼容。它现在已经逐渐变得不再是最初的支撑Akonadi服务器能力
的、仅限于电子邮件的标准，而是一个符合标准的IMAP服务器，
承担起了电子邮件访问的功能，提供了更大的效益。IMAP协议是
一个很好的起点，它的许多概念都在Akonadi访问协议中保留下来
但它不再有理由称为IMAP。或许在该服务器的后续版本中会回到
该机制，或许会以兼容的代理服务器模式实现。
由于马上要发布KDE4.1版本，因此在2008年3月大家都再次聚集在
一起，以便在第一次公开发布之前再次对API做一次详细的评审，
以便在可预知的未来能够保证其稳定性和二进制兼容。经过两天的
讨论，出现了数量惊人的、大大小小的问题，有些文档缺少了，有
些实现模式十分怪异，发现了一些不适当的命名模式，因此在接下
来的一周内他们做了许多矫正工作。
在本书写作时，KDE4.1版本马上就要发布，Akonadi团队兴奋地看
到了KDE社区中许多应用程序和程序库的并发人员予以反应，这些
都是其目标客户。有兴趣为不同的存储后面编写资源的人在逐渐增
加，有人开始为Akonadi添加对Facebook地址薄、Delicious书签
MSExchange电子邮件、基于OpenChange程序库的群件服务器、博
客的RSS文件等的支持。现在很高兴地看到整个社区能够简单、深
入、可靠地创建针对新数据格式的支持；能够高效地查询；能够对
数据进行注释、实现数据的相互链接、为其创建语义和上下文；能
够利用它使用户在其软件中完成更多功能，更好地使用它。
对于迄今仍未实现的优化工作，存在两种相关的观点。第一个是避
免将负载数据以blob格式存储到数据库中，而是只在数据库表中存
储指向文件系统的URL，而数据本身则直接存储在前面提及的文件
系统中。采用这种方法之后，就可能避免将数据从文件系统中复制
到内存中，避免通过socket通信将其分发到客户端（它涉及另一个
处理器），从而导致虽然发布一份副本却在内存中创建了第二个副
1212
---
## Page 1214