        function __destruct(){
            if(preg_match('/(log|etc|session|proc|read_secret|history|class|data|\.\.)/i', $this->file_path)){
                die("Sorry Sorry Sorry");
            }
        include_once($this->file_path);
     }
    }
也就是说，我们只要构造好这个对象的属性让他的值为我们可以控制的文件，对其进行反序列化的时候我们能成功实现文件包含然后 getshell(题目已经说了是要
getshell 这里就不用考虑去包含 flag 文件了)
#### 改动二：
我在原先的 upload 方法中添加了 协议的过滤
    function upload($path) {
        if(isset($_GET['url'])){
             if(preg_match('/^(http|https).*/i', $_GET['url'])){
                $data = file_get_contents($_GET["url"] . "/avatar.gif");                                                                                     
                if (substr($data, 0, 6) !== "GIF89a"){
                    die("Fuck off");
                }
                file_put_contents($path . "/avatar.gif", $data);
                die("Upload OK");
            }else{
                die("Hacker");
            }           
        }else{
            die("Miss the URL~~");
        }
    } 
可以看到我只允许你使用 https 或者 http 协议进行文件的上传，我将原来能反序列化的点抹去了，很明显我的意思是不能再使用这个
file_get_contents 进行反序列化
#### 改动三：
我新增了两个有意思的方法，check 和 move ，很明显，这两个方法是有问题的，利用点也肯定在这里
##### 1.check
check 的作用就是根据你提供的 URL 地址给出图片的大小，这里很明显是一个可控制点，能让我们输入自定义的路径(非常像 Orange
题目中的反序列化的点)，但是这个函数没有文件上传的功能，并且对传入的参数进行了一些过滤，把 phar:// 开头的直接 Ban
了，也就是我要求你要用另外的反序列化的方式，这种方式不能使用 phar:// 开头，我这里打算使用的是
compress.://xxxx 这种方式。
    function check($path){
        if(isset($_GET['c'])){
            if(preg_match('/^(ftp|php|zlib|data|glob|phar|ssh2|rar|ogg|expect)(.|\\s)*|(.|\\s)*(file|data|\.\.)(.|\\s)*/i',$_GET['c'])){
                die("Hacker Hacker Hacker");
            }else{
                $file_path = $_GET['c'];
                list($width, $height, $type) = @getimagesize($file_path);
                die("Width is ：" . $width." px" .
                    "Height is ：" . $height." px");
            }
        }else{
            list($width, $height, $type) = @getimagesize($path."/avatar.gif");
            die("Width is ：" . $width." px" .
                "Height is ：" . $height." px");
        }
    }
而且 我这里的利用的函数也不再是之前的简单的 file_get_contents 或者 is_file 再或者 is_dir 之类的，通过阅读zsx
大佬的博客，以及自己对 PHP 源码的分析，我最终选择了 getimagesize(） 这个函数去代替 file_get_contents 进行反序列化。
##### 2.move
这个函数就更可疑了，他能把一个确定的文件通过 copy 转移到我们自己的一个已知的目录下(我这里设计了两个目录，data 和 file 并且 data
目录下面的子目录我们是不知道目录的，但是 file 下面的目录名 我们却能知道)，并且能自定义文件名，看到这里应该能联想到我们获取 flag
的方式就是文件包含，我们这里希望你能将你控制的文件通过这个函数弄到 file 目录下的你已知的自己的目录,并最终对其进行文件包含来达到 getshell
的目的。
    function move($source_path,$dest_name){
        global $FILEBOX;
        $dest_path = $FILEBOX . "/" . $dest_name;
        if(preg_match('/(log|etc|session|proc|root|secret|www|history|file|\.\.|ftp|php|phar|zlib|data|glob|ssh2|rar|ogg|expect|http|https)/i',$source_path)){
            die("Hacker Hacker Hacker");
        }else{
            if(copy($source_path,$dest_path)){
                die("Successful copy");
            }else{
                die("Copy failed");
            }
        }
    }
### 3.发现的问题：
按照上面的思路对代码进行简单的分析以后，似乎我们已经找到了大致的解决问题的途径，但是问题依然存在，我们需要一个文件上传点才能串起来我们的利用链，我们来列举一下目前已知的上传点。
(1) upload 函数上传的文件我们不知道路径，因为路径被 secret 加密了，这个上传点被 Pass ，我们无法利用  
(2) 因为代码本身的 check 需要用到 allow_url_fopen 打开,于是 move
函数也就成了一个隐藏的文件上传点，但是能不能用呢？因为这里我过滤了常见的 wapper 和 http Https 协议，想从外界复制文件应该也是不可行的。  
(3)别忘了我们的评论框
## 0X03 深入研究
### 对评论框的详细分析
这个评论框是做什么的呢？其实到这里为止题目才刚刚开始，利用这个评论框进行文件的上传是这道题我要考察的重点，也是我个人认为这道题最难的地方，我们先来抓包看一下。
如图所示：
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20%E8%AF%84%E8%AE%BA%E6%A1%86_1.png "此处输入图片的描述")
我们看到评论框输入的内容被转化成了 json 格式发往了相同服务器的一个 API ，端口是 8080 ，8080 是 tomcat
的默认端口，熟悉的同学应该猜的出来，这是我用 java 写的一个 api 接口，根据你输入的请求得到 json 格式的返回结果，很多人第一反应肯定是 xss
之类的，所以这里我对输入做了过滤
如图所示：
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20%E8%AF%84%E8%AE%BA%E6%A1%862.png "此处输入图片的描述")
我直接把尖括号过滤了，当然还有一些常见的符合 xml 的内容，其实就是传达这里不能输入不规范的内容
如图所示：
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20%E8%AF%84%E8%AE%BA%E6%A1%86_3.png "此处输入图片的描述")
如果你熟悉 XEE 的 实战，知道在现实中 XXE 一般出现在调用 API 的接口、传递 json 等地的话，你就会立刻反应过来这里的 json
接口完全有可能去解析客户端发来的 XML 数据，没错，为了模拟这种情况我就是用 Java 写了这样一个能解析 json 还能解析 XML
的接口,只要我们将传递过去的 content-type 修改成 application/xml 就可以了，我们可以传一个 xml 格式的数据过去看看
如图所示：
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20%E8%AF%84%E8%AE%BA%E6%A1%86_4.png "此处输入图片的描述")
可以看到我们传入的内容被成功解析并在 json 中完整的返回，只要能解析外部实体这其实就是一个很明显的 XXE 了，只不过是 Java
的而已，我们尝试传入实体，看卡有没有被过滤(过滤了 & 就只能 OOB了)
如图所示：
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20%E8%AF%84%E8%AE%BA%E6%A1%865.png "此处输入图片的描述")
成功解析，好了，是不是感觉柳暗花明，XXE 漏洞最基本的是干什么？列目录，正好我们试一下解析外部实体
如图所示：
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20%E8%AF%84%E8%AE%BA%E6%A1%86_6.png "此处输入图片的描述")
你的内心一定是 mmp 的，其实我就知道你会用 file 列目录，想给你一个打击，于是特地把 file 过滤了，看一下我的源码
如图所示：
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018_%E8%AF%84%E8%AE%BA%E6%A1%867.png "此处输入图片的描述")
由于图片显示不完整，我贴出代码：
    public String XmlRe(@RequestBody String data, HttpServletRequest request) throws Exception {
           if(Pattern.matches("(?i)(.|\\s)*(file|ftp|gopher|CDATA|read_secret|logs|log|conf|etc|session|proc|root|history|\\.\\.|data|class|bash|viminfo)(.|\\s)*",data)){
               return "{\"status\":\"Error\",\"message\":\"Hacker! Hacker! Hacker!\"}";
           }else{
               Map test = xmlToMap(data);
               return "{\"status\":\"Error\",\"message\":\""+ test +"\"}";
           }
       }
其实我不只是过滤了 file 协议，我们知道低版本的jdk 支持 gopher
协议，我防止思路跑偏直接过滤了，还有就是有些时候想看一写带有特殊字符的文件的话可能会用到 CDATA
结，为了能尽量少的暴露敏感文件我也过滤了，毕竟题目不是要你读文件用的。但是如果你看一下文档的话，就能发现， java 还支持一个 netdoc
协议，能完成列目录的功能。
如图所示：
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20%E8%AF%84%E8%AE%BA%E6%A1%868.png "此处输入图片的描述")
很多人肯定去忙着找 flag ，其实我 flag 没有写在文件里，找到 flag 的唯一方式就是拿到 shell 然后执行全局搜索。
别忘了现在的当务之急就是找文件上传点，这里我考察的是一个比较少见也比较细节的东西，java 的 jar://
协议，通过这个协议我们能向远程服务器去请求文件（没错是一个远程的文件，这相比于 php 的 phar
只能请求本地文件来说要强大的多），并且在传输过程中会生成一个临时文件在某个临时目录中，好了分析到这里又有一些问题了
#### 发现的问题：
(1)如果我们能通过 jar 协议在题目 服务器生成一个临时文件，那我们就能利用其进行包含，但是似乎我们不知道文件路径更没法预测文件名  
(2)我们的包含是要通过反序列化实现的，也就是说我们如果想要包含临时文件，那么我们必须要在 payload 文件中写好临时文件名，但是 payload
是在生成临时文件以前生成的(或者说 payload 就是那个临时文件)，于是这里就形成了一个死循环  
(3)临时文件很快就会消失，但是我们的反序列化一以及后面的操纵非常的复杂，甚至没法直接通过脚本实现，那么在没法条件竞争的情况下如何延长文件的传输时间
#### 问题解决
##### 问题一：
想知道文件名和文件路径，很简单我们只要知道文件路径然后利用我们的 netdoc 去列目录就能知道文件名了，那么路径怎么知道，这里有两种方法
方法一：
先列一下目录，大概判断一下环境，本地搭一个相似的环境去测试，找到临时文件的路径，但我想这个方法没人用，代价太大了。
方法二：
其实你在测试过程中应该能发现报错信息没有屏蔽，我们可以通过报错拿到我们的文件路径，但是如何报错？这其实还是一个问题，因为 Jar
协议本身有一个解包的过程，如果你请求的文件包里面没有那么就会报错，获取这个包的临时文件的位置(下图的 jar.zip 就是一个单纯的压缩包文件，如果是
Phar 文件是不会成功的，jar 不能解析 phar 格式的文件)
如图所示：
[](https://picture-1253331270.cos.ap-beijing.myqcloud.com/LCTF2018%20%E8%AF%84%E8%AE%BA%E6%A1%869.png "此处输入图片的描述")
##### 问题二：