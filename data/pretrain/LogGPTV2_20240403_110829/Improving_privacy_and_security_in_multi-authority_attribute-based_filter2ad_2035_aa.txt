title:Improving privacy and security in multi-authority attribute-based
encryption
author:Melissa Chase and
Sherman S. M. Chow
Improving Privacy and Security in Multi-Authority
Attribute-Based Encryption
Melissa Chase
Microsoft Research
1 Microsoft Way
Redmond, WA 98052, USA
PI:EMAIL
Department of Computer Science
Courant Institute of Mathematical Sciences
New York University, NY 10012, USA
Sherman S.M. Chow∗
PI:EMAIL
ABSTRACT
Attribute based encryption (ABE) [13] determines decryp-
tion ability based on a user’s attributes. In a multi-authority
ABE scheme, multiple attribute-authorities monitor diﬀer-
ent sets of attributes and issue corresponding decryption
keys to users, and encryptors can require that a user ob-
tain keys for appropriate attributes from each authority be-
fore decrypting a message. Chase [5] gave a multi-authority
ABE scheme using the concepts of a trusted central author-
ity (CA) and global identiﬁers (GID). However, the CA in
that construction has the power to decrypt every ciphertext,
which seems somehow contradictory to the original goal of
distributing control over many potentially untrusted author-
ities. Moreover, in that construction, the use of a consistent
GID allowed the authorities to combine their information
to build a full proﬁle with all of a user’s attributes, which
unnecessarily compromises the privacy of the user. In this
paper, we propose a solution which removes the trusted cen-
tral authority, and protects the users’ privacy by preventing
the authorities from pooling their information on particular
users, thus making ABE more usable in practice.
Categories and Subject Descriptors
E.3 [Data Encryption]: Public key cryptosystems
General Terms
Security, Algorithms, Design
Keywords
attribute based encryption, anonymous credential, privacy,
multi-authority, removing trusted party
∗Work done while an intern with Microsoft Research
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’09, November 9–13, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-352-5/09/11 ...$10.00.
1.
INTRODUCTION
We often identify people by their attributes. In 2005, Sa-
hai and Waters [13] proposed a system (described in more re-
cent terminology as a key-policy attribute-based encryption
(ABE) system for threshold policies) in which a sender can
encrypt a message specifying an attribute set and a number
d, such that only a recipient with at least d of the given at-
tributes can decrypt the message. However, the deployment
implications of their scheme may not be entirely realistic,
in that it assumes the existence of a single trusted party
who monitors all attributes and issues all decryption keys.
Instead, we often have diﬀerent entities responsible for mon-
itoring diﬀerent attributes of a person, e.g. the Department
of Motor Vehicles tests whether you can drive, a university
can certify that you are a student, etc. Thus, Chase [5] gave
a multi-authority ABE scheme which supports many diﬀer-
ent authorities operating simultaneously, each handing out
secret keys for a diﬀerent set of attributes.
However, this solution was still not ideal. There are two
main problems: one concern of security of the encryption,
the other the privacy of the users.
1.1 Protecting the User’s Privacy
Since each authority is responsible for diﬀerent attributes,
we want to allow them to issue decryption keys indepen-
dently, without having to communicate with one another.
As argued in [5], in order to prevent collusion in such a set-
ting, we need some consistent notion of identity. (Otherwise,
a user could easily obtain keys from one authority and then
give them all to a friend.) The solution in that work is to
require that each user have a unique global identiﬁer (GID),
which they must present to each authority (and to require
that the user prove in some way that he is the owner of
the GID he presents).1 Unfortunately, the mere existence
of GID makes it very hard for the users to guarantee any
kind of privacy. Because a user must present the same GID
to each authority, it is very easy for colluding authorities to
pool their data and build a “complete proﬁle” of all of the
attributes corresponding to each GID. However, this might
be undesirable, particularly if the user uses the ABE system
in many diﬀerent settings, and wishes to keep information
about some of those settings private.
This situation seems to be unavoidable if all one’s at-
tributes are determined by some kind of public identity like
a name or SSN – in that case users will need to identify
themselves in any case in order to get the decryption keys
for a certain set of attributes, so privacy is unavoidably com-
1see [5] for further discussion.
121promised. However, there are many attributes which do not
belong to this category. The ability to drive is a good exam-
ple. One should be able to prove the ability to do something
in an examination and then get the corresponding creden-
tial, without presenting any identifying information. Alter-
natively, one might interact with a service via a pseudonym
(e.g. a login name) and wish to obtain attributes relating to
this interaction without revealing one’s full identity.
Regardless, as the attribute-authorities (AAs) are respon-
sible for managing each user’s attributes, it seems inevitable
that they will learn which subsets of its attributes are held
by diﬀerent users. However, we could imagine applications
where some of the authorities are diﬀerent online service
providers giving attributes related to online activities like
blog/wiki contributions, access to online news sites, partic-
ipation in social networking sites, or purchases at an online
store. In this case, it would make sense for the user to be able
to maintain diﬀerent, unlinkable attribute sets with each au-
thority. At the same time, it also makes sense for each AA to
gather the statistics of their system usage (e.g. the number
of users subscribed a particular service as indicated by the
number of users who requested a decryption key for a certain
attribute) without compromising individual’s privacy.
1.2 Removing the Trusted Authority
The solution presented in [5] assumed the presence of a
single trusted “central authority” (CA) in addition to the at-
tribute authorities. This CA did not manage any attributes,
but was responsible for issuing each user a unique key.
To see why the CA is crucial in [5], we ﬁrst recall the intu-
ition. The idea was that, for each user, each AA would use
his own secret (not known by other AAs) to generate a share
of a system-wide master secret key. The authorities needed
to be able to generate these shares independently (i.e. with-
out communicating with any other authority during user key
issuing). At the same time, in order to prevent collusion it is
necessary to use a diﬀerent sharing for each user. This made
it diﬃcult to guarantee that all shares always add up to the
same master secret. The solution was to have the CA issue
each user a special value to cancel out all these shares from
the AAs and enable the user to “recover” a function of the
system-wide master secret key. Obviously, this computation
requires the CA to know the master secret of the system,
and the secret information of each AA. This implies that it
must also have the power to decrypt any ciphertext.
However, this decryption power seems somehow contra-
dictory to the original motivation of distributing control of
the attributes over many potentially untrusted authorities.
Thus, we asked whether it would be possible to instead dis-
tribute the functionality of the CA over all of the AAs, so
that as long as some of them are honest, the scheme will still
be secure.
1.3 Our Contributions
Here we present a multi-authority ABE with user privacy
and without the trusted authority. These requirements are
non-trivial to satisfy, due in both cases to the collusion re-
sistance requirement of ABE.
Brent Waters suggested an approach for removing the
CA requirement, in which each pair of attribute authori-
ties would share a secret key. We formalize this idea, and
prove that it is secure as long as at least two of the AAs are
honest. The new solution uses techniques for distributed
pseudorandom functions (PRF) introduced in [11].
Note that Lin et al. [10] recently proposed a diﬀerent ap-
proach for building a multi-authority ABE scheme without
a central authority. However, their construction requires de-
signers to ﬁx a constant m for the system, which directly de-
termines eﬃciency. The resulting construction is such that
any group of m + 1 colluding users will be able to break
security of the encryption. Our scheme on the other hand is
secure no matter how many users collude.
We also present an anonymous key issuing protocol which
allows multi-authority ABE with enhanced user privacy – 1)
we allow the users to communicate with AAs via pseudonyms
instead of having to provide their GIDs in the clear, and 2)
we prevent the AAs from pooling their data and linking mul-
tiple attribute sets belonging to the same user.
As a building block we construct a protocol for an obliv-
ious computation of a key of the form (SK · P RFβ(u))γ,
where u is a user’s GID, 2 SK represents some secret infor-
mation related to the private key of an authority, β is the
secret seed for the PRF owned by an authority and γ corre-
sponds to some secret related to an attribute controlled by
an authority. The key is produced obliviously, i.e. without
either the authority or the user revealing any of their se-
cret information ((SK, β, γ) or u respectively). We chose to
present the protocol in this “generic” way (without coupling
with any particular ABE scheme) to illustrate its applica-
bility. Our protocol can be applied to Chase system (with a
little modiﬁcation) in a rather straightforward manner (see
full version for details). We also show how to eﬃciently
apply this protocol to our scheme which removes the CA.
(In this case the keys are a bit more complex, so we need
somewhat more involved techniques - see Section 5.)
Finally, our results may be of additional interest because
they show new applications of the distributed PRF of Naor,
Pinkas, and Reingold [11], and a generalization of the obliv-
ious PRF techniques of Jarecki and Liu [9].
2. RELATED WORK
2.1 ABE for Different Policies
ABE is actually a generalization of IBE (identity-based
encryption [14]): in an IBE system, ciphertexts are associ-
ated with only one attribute (the identity).
The ABE scheme of Sahai-Waters [13] was proposed as a
fuzzy IBE scheme, which allowed for some error tolerance
around the chosen identity.
In more recent terminology,
it would be described as a key-policy (KP) ABE scheme
that allows for threshold policies. Key-policy means that
the encryptor only gets to label a ciphertext with a set of
attributes. The authority chooses a policy for each user that
determines which ciphertexts he can decrypt. A threshold
policy system would be one in which the authority speci-
ﬁes an attribute set for the user, and the user is allowed to
decrypt whenever the overlap between this set and the set
associated with a particular ciphertext is above a threshold.
Goyal et al. [8] proposed a KP-ABE scheme which sup-
ports any monotonic access formula consisting of AND, OR,
or threshold gates. A construction for KP-ABE with non-
monotonic access structures (which also include NOT gates,
i.e. negative constraints in a key’s access formula) was pro-
2See footnote 6.
122posed by Ostrovsky, Sahai and Waters [12]. All of these
schemes are characterized as key-policy ABE since the access
structure is speciﬁed in the private key, while the attributes
are used to describe the ciphertexts.
The roles of the ciphertexts and keys are reversed in the
ciphertext-policy ABE (CP-ABE) introduced by Bethen-
court, Sahai and Waters [2], in that the ciphertext is en-
crypted with an access policy chosen by an encryptor but a
key is simply created with respect to an attributes set. The
security of their scheme is argued in the generic group model.
Recently, [15] proposed CP-ABE constructions based on a
few diﬀerent pairing assumptions which work for any access
policy that can be expressed in terms of an LSSS matrix.
In this paper, we will look only at the KP-ABE setting.
We will look at both the simple threshold, and the more
complicated monotonic access structure case, and will build
a construction based on the same assumptions as Sahai and
Waters [13] and Goyal et al.[8]. Both non-monotonic access
structures and the ciphertext policy schemes require much
stronger assumptions, and very diﬀerent techniques, so we
will not consider these cases in our work.
2.2 Multi-Authority ABE
All of the prior work described above considers the sce-
nario where all of the attributes are monitored by a single
authority. However, as we mentioned in Section 1, it seems
natural that one might want to divide control of the various
attributes over many diﬀerent authorities. The main chal-
lenge here is to guarantee that two colluding users cannot
each obtain keys from a diﬀerent authority, and then pool
their keys to decrypt a message that they are not entitled
to. Furthermore, in the multi-authority case, we may wish
to allow for some of the authorities to be untrusted. The
techniques for single authority ABE cannot be easily gen-
eralized in this case – they rely on the fact that the single
authority can generate all of a user’s keys at once, to en-
sure that they can only be used together, and cannot be
combined with any other user’s keys.
The only multi-authority ABE schemes we are aware of
are Chase’s original proposal [5] (which has already been dis-
cussed in Section 1) and the very recent Lin et al. extension
[10]. Both schemes are KP-ABE and operate in a setting
where multiple authorities are responsible for disjoint sets
of attributes. The disadvantages of Chase’s scheme have
already been discussed in Section 1.
The scheme of [10], like the scheme we will present here,
has the advantage that it does not rely on a central authority.
However, their scheme only achieves m-resilience, in that se-
curity is only guaranteed against a maximum of m colluding
users. (In contrast, the results of [5] and our new results con-
sider a much stronger model, which remains secure against
any number of colluding users.) And this is not merely an
issue of formal security: Lin et al. demonstrated a collusion
attack of m + 1 users [10]. In their scheme m is the number
of secret keys that each authority obtains from a distributed
key generation protocol. (This also means m must be deter-
mined when the system is initialized.) Clearly, for a large-
scale system, m should set reasonably high in order to guar-
antee security (a very loose desirable lower bound should
be N 2, where N is the number of authorities). This im-
poses burdens on the interactive distributed key generation
protocol among all the authorities, and on their secure stor-
age. Finally, O(m) online modular operations are required
by each authority to issue secret keys to a user. We further
note that this weaker notion of security seems undesirable.
It may be of commercial interest to have as many users as
possible, yet it simultaneously increases the risk of being
compromised. (Even if users themselves are not malicious,
one might worry about malware on a user’s machine, or
information leaked unintentionally through side channels.)
Thus, we argue that it is still a very important open prob-
lem to design an eﬃcient and secure multi-authority ABE
scheme without a trusted CA, and this is one of the problems
we will attempt to solve here.
2.3 Anonymous Credentials
Up until now, there has been little relationship between
anonymous credentials and ABE (except a recent work in
[6] which borrows some techniques from anonymous creden-
tial to address the key-escrow problem of IBE). In our new
schemes we will make use of some basic techniques in anony-
mous credential systems to protect the privacy of ABE users.
In an anonymous credential system (see [3, 4]), users wish
to obtain and prove possession of credentials while remain-
ing anonymous. In such work it is assumed that each user
has a unique secret key (and there are diﬀerent proposals for
how to prove that a given key is valid and to prevent users
from loaning out their keys ). Then the user can interact
with each authority under a diﬀerent pseudonym in such a
way that it is impossible to link multiple pseudonyms be-
longing to the same user. At the same time, all of a user’s
pseudonyms, and the resulting credentials, are tied to the
same secret key so that the user can prove that he has both
attribute set A from one authority and set B from another.
We will use techniques from anonymous credentials to al-
low the users to obtain decryption keys from the authorities
without revealing their GID’s.
The basic idea is to let the GID play the role of the anony-
mous credential secret key. We will now assume that each
user has a unique and secret GID value. He interacts with
authorities using pseudonyms based on this value, and thus