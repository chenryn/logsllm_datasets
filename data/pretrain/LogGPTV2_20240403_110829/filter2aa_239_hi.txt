包括脚本文件后，可以创建自定义脚本代码来调用集线器和收听广播。在下面的代码
段中，$.connection.chatHub返回一个集线器代理来调用ChatHub类的方法。chat是一个变
量，定义为使用这个变量，而不是访问$.connection.chatHub。通过把一个函数赋予
chat.client.broadcastMessage，就定义了服务器端集线器代码调用BroadcastMessage时调用
的函数。BroadcastMessage方法为名称和消息传递两个字符串参数，所以所声明的函数匹
配相同的参数。参数值被添加到列表项元素中的无序列表项。定义broadcastMessage调用
的实现代码后，用$.connection.hub.start（）启动连接，以连接服务器。连接的启动完成
后，就调用分配给done函数的函数。这里，定义了sendmessage按钮的单击处理程序。单
击这个按钮时，使用chat.server.send把一条消息发送到服务器，传递两个字符串值（代码
文件ChatServer/ChatWindow.html）：
      $(function () {
        var chat = $.connection.chatHub;
        chat.client.broadcastMessage = function (name, message) {
          var encodedName = $('').text(name).html();
          var encodedMessage = $('').text(message).html();
          $('#messages').append('' + encodedName + ': &nbsp; &nbsp; ' +
            encodedMessage + '');
        };
        $.connection.hub.start().done(function () {
          $('#sendmessage').click(function () {
            chat.server.send($('#name').val(), $('#message').val());
            $('#message').val('');
            $('#message').focus();
          });
        });
      });
运行应用程序时，可以打开多个浏览器窗口——甚至可以使用多种浏览器，为聊天输
入名称和消息（参见图43-3）。
图43-3
使用Internet Explorer Developer Tools（在Internet Explorer打开时按F12功能键），可
以使用Network Monitoring查看从HTTP协议到WebSocket协议的升级，如图43-4所示。
图43-4
43.3.3 创建SignalR .NET客户端
使用SignalR服务器的示例.NET客户应用程序是一个WPF应用程序。其功能类似于前
面所示的HTML/JavaScript应用程序。该应用程序使用下列NuGet包和名称空间：
NuGet包
    Microsoft.AspNet.SignalR.Client
    Microsoft.Extensions.DependencyInjection
    Newtonsoft.Json
名称空间
    Microsoft.AspNet.SignalR.Client
    Microsoft.Extensions.DependencyInjection
    System
    System.Collections.ObjectModel
    System.Net.Http
    System.Windows
WPF应用程序的用户界面定义了两个文本框、两个按钮和一个列表框元素，用于输
入名称和消息、连接到服务集线器并显示接收到的消息列表（代码文件
WPFChatClient/MainWindow.xaml）：
在应用程序的启动代码中，定义了依赖注入容器，注册了服务以及视图模型（代码文
件WPFChatClient/App.xaml.cs）：
    public partial class App: Application
    {
      protected override void OnStartup(StartupEventArgs e)
      {
        base.OnStartup(e);
        IServiceCollection services = new ServiceCollection();
        services.AddTransient();
        services.AddTransient();
        services.AddSingleton();
        Container = services.BuildServiceProvider();
      }
      public IServiceProvider Container { get; private set; }
    }
在视图的代码隐藏文件中，使用依赖注入容器把ChatViewModel分配给ViewModel属
性（代码文件WPFChatClient/MainWindow.xaml.cs）：
    public partial class MainWindow: Window
    {
      public MainWindow()
      {
        InitializeComponent();
        this.DataContext = this;
      }
      public ChatViewModel ViewModel { get; } =
        (App.Current as App).Container.GetService();
    }
  注意： WPF参见第34章。Model-View-ViewModel（MVVM）模式参见第31
章。
集线器特定的代码在ChatViewModel类中实现。首先看看绑定属性和命令。绑定属性
Name用于输入聊天名称，Message属性用于输入消息。ConnectCommand属性映射到
OnConnect方法上，发起对服务器的连接；SendCommand属性映射到OnSendMessage方法
上，发送聊天消息（代码文件WPFChatClient/ViewModels/ChatViewModel.cs）：
      public sealed class ChatViewModel: IDisposable
      {
        private const string ServerURI = "http://localhost:45269/signalr";
        private readonly IMessagingService _messagingService;
        public ChatViewModel(IMessagingService messagingService)
        {
          _messagingService = messagingService;
          ConnectCommand = new DelegateCommand(OnConnect);
          SendCommand = new DelegateCommand(OnSendMessage);
        }
        public string Name { get; set; }
        public string Message { get; set; }
        public ObservableCollection Messages { get; } =
          new ObservableCollection();
        public DelegateCommand SendCommand { get; }
        public DelegateCommand ConnectCommand { get; }
        // etc.
      }
OnConnect方法发起到服务器的连接。首先，给服务器传递URL，创建一个新的
HubConnection对象。有了HubConnection，可以使用CreateHubProxy传递集线器的名称，
创建代理。使用代理可以调用服务的方法。为了用服务器返回的信息注册，调用On方
法。传递给On方法的第一个参数定义由服务器调用的方法名称，第二个参数定义待调用
方法的委托。方法OnMessageReceived的参数用On方法的泛型参数指定：两个字符串。最
后为了发起连接，调用HubConnection实例的Start方法（代码文件
WPFChatClient/ViewModels/ChatViewModel.cs）：
    private HubConnection _hubConnection;
    private IHubProxy _hubProxy;
    public async void OnConnect()
    {
      CloseConnection();
      _hubConnection = new HubConnection(ServerURI);
      _hubConnection.Closed += HubConnectionClosed;
      _hubProxy = _hubConnection.CreateHubProxy("ChatHub");
      _hubProxy.On("BroadcastMessage", OnMessageReceived);
      try
      {
        await _hubConnection.Start();
      }
      catch (HttpRequestException ex)
      {
        _messagingService.ShowMessage(ex.Message);
      }
      _messagingService.ShowMessage("client connected");
    }
给SignalR发送消息只需要调用IHubProxy的Invoke方法。第一个参数是服务器应该调
用的方法名称，其后的参数是服务器上方法的参数（代码文件
WPFChatClient/ViewModels/ChatViewModel.cs）：
    public void OnSendMessage()
    {
      _hubProxy.Invoke("Send", Name, Message);
    }
收到消息时，调用OnMessageReceived方法。因为这个方法从后台线程中调用，所以
需要切换回更新绑定属性和集合的UI线程（代码文件
WPFChatClient/ViewModels/ChatViewModel.cs）：
    public void OnMessageReceived(string name, string message)
    {
      App.Current.Dispatcher.Invoke(() =>
      {
        Messages.Add($"{name}: {message}");
      });
    }
运行应用程序时，可以从WPF客户端收发消息，如图43-5所示。也可以同时打开Web
页面，在它们之间通信。
图43-5
43.4 分组连接
通常不希望与所有客户端通信，而是希望与一组客户端交流。SignalR支持这种情
形。
本节用分组功能添加另一个聊天集线器，也看看使用SignalR集线器时的其他选项。
WPF客户应用程序扩展为输入分组，给选中的分组发送消息。
43.4.1 用分组扩展集线器
为了支持分组聊天，应创建类GroupChatHub。在以前的集线器中，学习了如何使用
dynamic关键字来定义发送到客户端的消息。不使用dynamic类型的话，也可以创建一个自
定义界面，如下面的代码段所示。这个接口用作基类Hub的泛型参数（代码文件
ChatServer/GroupChatHub.cs）：
    public interface IGroupClient
    {
      void MessageToGroup(string groupName, string name, string message);
    }
    public class GroupChatHub: Hub
    {
      // etc.
    }
AddGroup和LeaveGroup方法被定义为由客户端调用。注册分组后，客户端用
AddGroup方法发送一个组名。Hub类定义了Groups属性，在其中可以注册对组的连接。
Hub类的Groups属性返回IGroupManager。这个接口定义了两个方法：Add和Remove。这
两个方法需要一个组名和一个连接标识符，来添加或删除对组指定的连接。连接标识符是
与客户端连接关联的唯一标识符。客户端连接标识符以及客户端的其他信息可以用Hub类
的Context属性访问。下面的代码段调用IGroupManager的Add方法向连接注册一个分组，
Remove方法则用于注销分组（代码文件ChatServer/GroupChatHub.cs）：
    public Task AddGroup(string groupName) =>
      Groups.Add(Context.ConnectionId, groupName);
    public Task LeaveGroup(string groupName) =>
      Groups.Remove(Context.ConnectionId, groupName);
  注意： Hub类的Context属性返回一个HubCallerContext类型的对象。通过这个
类，不仅可以访问与连接相关联的连接标识符，还可以访问客户端的其他信息，如
HTTP请求中的标题、查询字符串和cookie信息，以及访问用户的信息。此信息可以用
于用户的身份验证。
调用Send方法（这次使用三个参数，包括分组）可把信息发送给与分组相关联的所有
连接。现在Clients属性用于调用Group方法。Group方法接受一个分组字符串，用于把
MessageToGroup消息发送给所有与组名相关联的连接。在Group方法的一个重载版本中，
可以添加应该排除在外的连接ID。因为Hub实现了接口IGroupClient，所以Groups方法返
回IGroupClient。这样，MessageToGroup方法可以使用编译时支持调用（代码文件
ChatServer/GroupChatHub.cs）：
    public void Send(string group, string name, string message)
    {
      Clients.Group(group).MessageToGroup(group, name, message);
    }
其他几个扩展方法定义为将信息发送到一组客户端连接。前面介绍了Group方法将消
息发送到用组名指定的一组连接。使用这个方法，可以排除客户端连接。例如，发送消息
的客户端可能不需要接收它。Groups方法接受一个组名列表，消息应该发送给它们。前面
讨论过All属性给所有连接的客户端发送消息。OthersInGroup和OthersInGroups是拒绝把消
息发送给调用者的方法。这些方法把消息发送给不包括调用者的特定分组或分组列表。
也可以将消息发送到不基于内置分组功能的自定义分组。在这里，它有助于重写
OnConnected、OnDisconnected和OnReconnected方法。每次客户端连接时，都调用
OnConnected方法；客户端断开连接时，调用OnDisconnected方法。在这些方法中，可以
访问Hub类的Context属性，访问客户端信息以及与客户端关联的连接ID。在这里，可以把
连接信息写入共享状态，允许使用多个实例伸缩服务器，访问同一个共享状态。也可以根
据自己的业务逻辑选择客户端，或在向具有特定权限的客户端发送消息时实现优先级。
    public override Task OnConnected()
    {
      return base.OnConnected();
    }
    public override Task OnDisconnected(bool stopCalled)
    {
      return base.OnDisconnected(stopCalled);
    }
43.4.2 用分组扩展WPF客户端
集线器的分组功能准备好后，可以扩展WPF客户端应用程序。对于分组功能，定义
另一个与GroupChatViewModel类相关联的XAML页面。
与前面定义的ChatViewModel相比，GroupChatViewModel类定义了更多的属性和命
令。NewGroup属性定义了用户注册的分组。SelectedGroup属性定义了用于继续通信的分
组，例如给分组发送消息或退出分组。SelectedGroup属性需要更改通知，以在改变这个属
性时更新用户界面；所以INotifyPropertyChanged接口用GroupChatViewModel类实现，
SelectedGroup属性的set访问器触发一个通知。另外还定义了加入和退出分组的命令：
EnterGroupCommand和LeaveGroupCommand属性（代码文件
WPFChatClient/ViewModels/GroupChatViewModel.cs）：
    public sealed class GroupChatViewModel: IDisposable, INotifyPropertyChanged
    {
      private readonly IMessagingService _messagingService;
      public GroupChatViewModel(IMessagingService messagingService)
      {
        _messagingService = messagingService;
        ConnectCommand = new DelegateCommand(OnConnect);
        SendCommand = new DelegateCommand(OnSendMessage);
        EnterGroupCommand = new DelegateCommand(OnEnterGroup);
        LeaveGroupCommand = new DelegateCommand(OnLeaveGroup);
      }
      private const string ServerURI = "http://localhost:45269/signalr";
      public event PropertyChangedEventHandler PropertyChanged;
      public string Name { get; set; }
      public string Message { get; set; }
      public string NewGroup { get; set; }
      private string _selectedGroup;
      public string SelectedGroup
      {
        get { return _selectedGroup; }
        set
        {
          _selectedGroup = value;
          PropertyChanged? .Invoke(this, new PropertyChangedEventArgs(
            nameof(SelectedGroup)));
        }
      }
      public ObservableCollection Messages { get; } =
        new ObservableCollection();
      public ObservableCollection Groups { get; } =
        new ObservableCollection();
      public DelegateCommand SendCommand { get; }
      public DelegateCommand ConnectCommand { get; }
      public DelegateCommand EnterGroupCommand { get; }
      public DelegateCommand LeaveGroupCommand { get; }
      // etc.
    }
EnterGroupCommand和LeaveGroupCommand命令的处理方法如下面的代码段所示。
这里，AddGroup和RemoveGroup方法在分组集线器中调用（代码文件
WPFChatClient/ViewModels/Group-ChatViewModel.cs）：
    public async void OnEnterGroup()
    {
      try
      {
        await _hubProxy.Invoke("AddGroup", NewGroup);
        Groups.Add(NewGroup);
        SelectedGroup = NewGroup;
      }
      catch (Exception ex)
      {
        _messagingService.ShowMessage(ex.Message);
      }
    }
    public async void OnLeaveGroup()
    {
      try
      {