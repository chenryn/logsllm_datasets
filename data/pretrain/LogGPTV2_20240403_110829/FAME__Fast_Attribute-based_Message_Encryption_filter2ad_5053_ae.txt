CGW-2
GPSW
-
100
100
100
Time
0.11s
4.08s
9.33s
0.64s
Figure 5.3: Set-up times for CP-ABE (left) and KP-ABE
(right).
universe schemes, we used the smallest bound possible, i.e., 100.
The advantage of using an unbounded universe scheme is clear
from this table: our scheme takes a mere one-tenth of a second to be
set-up no matter how many attributes need to be supported. This
is only slightly worse than BSW, another unbounded scheme only
known to be secure in the generic group model, and substantially
better than the best known fully secure scheme, even for a universe
of size 100.
Figure 5.1 compares the running time of key generation, en-
cryption and decryption algorithms for the CP-ABE schemes we
Key generation
Encryption
Schemes Mul
Our
8T + 9
CGW-1
CGW-2
Waters
BSW
T + 1
-
-
1
G
Exp
9T + 9
-
-
T + 1
T + 2
Hash
6(T + 1)
-
-
-
T
Mul
-
-
-
-
-
H
Exp
3
2(T + 2)
3(T + 2)
1
T
Hash
-
-
-
-
-
12n1n2 + 6n1
Mul
∼ 4n1n2
∼ 6n1n2
n1
-
G
Exp
6n1
2n1
n1
2n1 + 4n2
6n1 + 9n2
Hash
6(n1 + n2)
-
-
-
n1
Mul
-
-
-
-
-
H
Exp
3
-
-
n1 + 1
n1 + 1
Hash
-
-
-
-
-
Table 5.2: The number of various operations in G and H for key-generation and encryption in the implementations of CP-ABE
schemes we consider. Here T denotes the number of attributes input to KeyGen; and n1, n2 are the dimensions of the MSP input
to Encrypt. The exact number for CGW-1 and CGW-2 multiplications in G are 2(n1 + 2n2 + 2n1n2 − 1) and 3(2n1 + 3n2 + 2n1n2 − 1),
respectively.
Decryption
Multiplication
GT
G
6
4
6
3
6I + 3
2I
3I
I
-
H
-
2I
3I
-
-
2I + 1
Pairing
6
4
6
I + 2
2I + 1
Schemes
Our
CGW-1
CGW-2
Waters
BSW
Figure 5.4: The number of various operations in G, H and
GT for decryption in the implementations of CP-ABE
schemes we consider. Here I is the number of attributes
used in decryption.
Schemes
Our
CGW-1
CGW-2
Waters
BSW
Key size
G
3(T + 1)
-
-
T + 1
T + 1
2(T + 2)
3(T + 2)
H
3
1
T
G
3n1
Ciphertext size
H
3
-
-
2(n1 + 1)
3(n1 + 1)
n1
n1
n1 + 1
n1 + 1
Figure 5.5: The size of ciphertexts and keys in the CP-
ABE schemes we consider. ‘G’ and ‘H’ columns denote the
number of elements in groups G and H, respectively. T
denotes the number of attributes input to KeyGen; and n1,
n2 are the dimensions of the MSP input to Encrypt. Note
that the size of an element of H is 3 times that of G in the
MNT224 curve.
consider. Tables 5.2, 5.4 list the number of various group operations
involved in the implementations of these algorithms. 11 12
Even though our scheme is based on the DLIN version of CGW,
it outperforms even the SXDH version for key generation: when
the number of attributes is 100, it takes roughly half the time of
CGW SXDH. Only Waters’ scheme does better but at the cost of
much weaker security guarantees (selective security under a q-type
assumption).
To understand why the schemes compare in this way, it is useful
to study the key-generation column of Table 5.2. We can focus on
the number of exponentiations because it is a lot more expensive
than multiplication and hashing, see Table 5.1. (Hashing in H is
most expensive but it is never used.) Our scheme has a total of
about 4.5 times more exponentiations than CGW-1 and BSW but
still performs better than both because we have found a way to
do almost all the operations in the faster group G. Waters’ scheme
does not have any operation in H (except one) and 9 times less
exponentiations in G, therefore it does better.
In terms of encryption time, we do better than all the other
schemes: it takes just about a second to encrypt a policy of size 100!
It is clear from Table 5.2 why Waters and BSW are worse: exponen-
tiation in H is about 11 times slower than in G. What is less clear is
11An ABE ciphertext has a few target group elements that hide the message. The
number of operations required to generate them have not been included in this table.
12If an entry of the MSP matrix is used in the exponent of an exponentiation operation,
then we count the operation as a multiplication. Recall that the entries are either 0, 1
or −1 (§2.1), so even in the worst case there will be an inversion operation, which is
faster than multiplication.
11
our better performance with respect to CGW, specifically CGW-1.
This is because the randomness complexity of their encryption
scheme is unusually high. As many as 4n2 random numbers need to
be sampled for every encryption, and sampling needs much more
time than hashing or multiplication (for the MNT224 curve in the
Charm framework).
Perhaps the most striking aspect of our scheme is the decryp-
tion time. While it increases almost linearly for BSW and Waters’
schemes with the number of attributes required to decrypt, both
CGW’s and our schemes always need just about 0.06 seconds! This
is due to the fact that only a constant number of pairing operations
are required. (The number of multiplication operations does grow
linearly in all schemes according to Table 5.4 but that has no sig-
nificant effect because even multiplication in H is about 150 times
slower than pairing.)
Finally, we would like to draw the attention of the reader to
Table 5.5 which lists the size of ciphertexts and keys in terms of the
number of elements from G and H. 13 A cursory look may give the
impression that ciphertexts/keys of our scheme are not smaller than
anyone else. However, recall that an element of H is 3 times as large
as that of G. So our key size is much smaller than all the schemes
except Waters’; and ciphertext size is comparable to CGW-2 and
smaller than both Waters and BSW.
KP-ABE. We briefly discuss the performance of our KP-ABE scheme
(Appendix B). For comparison, we also implemented CGW’s (SXDH
13An ABE ciphertext has a few target group elements that hide the message. They
have not been included in this table.
and DLIN) [20, Appendix B.1] and Goyal et al.’s (GPSW) KP-ABE
schemes [29, Appendix A.1]. Figure 5.3 (right) lists the set-up time
and Figure 5.2 plots the time taken by other operations. Also see
Appendix F for the asymmetric version of GPSW that we imple-
mented.
Once again the set-up time is a very small constant, the decryp-
tion time is only about 0.06s, and key generation is better than
CGW-1 (only about a second for a policy size of 40). Encryption
time, though larger than other schemes, is no more than 0.9s for as
many as 100 attributes.
Further improvements. There are a number of ways to further
optimize the performance of our schemes. A natural idea is to
use C/C++ instead of Python and interface directly with a pairing
library (instead of using Charm’s wrappers). The Charm framework,
however, does have several benefits like pre-computation tables that
significantly speed up exponentiations, which we have not exploited
here. One could also take advantage of multi-exponentiation and
products of pairings.
Another option would be to use a different curve for pairings,
like the Bareto-Naehrig (BN) curves. Please note that there are
attacks known on certain parameters for both MNT and BN curves
[34, 39]. Hence one must choose a curve carefully for a real world
application.
6 RELATED WORK
We discuss some related work in this section that has not been
referred to or discussed in detail in the introduction.
A number of methods have been devised to translate schemes
based on composite-order groups to the prime-order setting [23,
35, 41] but they are not general purpose. Moreover, the resulting
schemes usually have a factor more group elements in the cipher-
texts/keys than the original scheme.
Some sophisticated tools have been developed to automate the
translation of Type-I to Type-III pairings [3, 6, 8] but they have
been applied to (hierarchical) identity-based encryption, broadcast
encryption and signature schemes only. It is not clear if the tools
can handle more advanced encryption primitives like ABE.
Okamoto and Takashima have developed fully secure schemes
under the DLIN assumption on symmetric maps which support a
large number of attributes [47], but theirs is not a large-universe
construction in the standard sense. They consider (attribute, value)
pairs where each attribute takes a value from an exponential-sized
space, instead of being present or not present. Their security proof re-
quires a polynomial sized set of all possible attributes to be known in
advance. Moreover, 14 group elements are needed in ciphertext/key
for every attribute, and decryption is similarly slow. On the other
hand, their approach makes it easy to handle non-monotonic poli-
cies where one could have conditions like an attribute should not
have a particular value.
Attrapadung has recently proposed some large universe con-
structions on asymmetric maps [11] under q-type assumptions. Our
use of random oracle not only eliminates such non-standard as-
sumptions but also gives much more efficient constructions. For
example, Attrapadung’s unbounded KP-ABE scheme has cipher-
texts with 6 group elements per attribute, keys with 9 elements
12