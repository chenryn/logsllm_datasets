# Introduction to the Online Shopping Application Vulnerability Analysis

Table 4. Object Creation Statistics for the Online Shopping Application
| Acunetix | Use Case Guided Fuzzing | Extended Stateful Fuzzing |
|----------|-------------------------|---------------------------|
| 1        | 2                       | 3                         |
| 1        | 1                       | 1                         |
| 1        | 1                       | 1                         |
| 1        | 1                       | 1                         |
| 1        | 1                       | 1                         |
| 1        | 1                       | 1                         |
| 1        | 1                       | 1                         |
| 1        | 1                       | 1                         |
| 1        | 1                       | 1                         |
| 1        | 1                       | 1                         |
| 1        | 1                       | 1                         |
| 1        | 1                       | 1                         |
| 1        | 1                       | 1                         |
| 2        | 2                       | 3                         |
| 3        | 5                       | 11                        |
| 1        | 2                       | 7                         |
| 5        | 2                       | 2                         |
| 2        | 1                       | 2                         |
| 2        | 2                       | 3                         |
| 3        | 5                       | 96                        |
| 1        | 1                       | 1                         |

## Object Classes
- OrderItem
- AddressBook
- PhoneNumber
- Contact
- CreditCardDetail
- OrderStatus
- OrderPayment
- Order
- Cart
- CartItem
- Comment
- User

### Test Cases
- **#1**: 
  - Objects: Contact, Order, Cart, CartItem, Comment, User
  - Counts: 1, 2, 2, 1
- **#2**: 
  - Objects: Order, Cart, CartItem, User
  - Counts: 1, 1, 1, 1

## Analysis and Results
In the analysis of the online shopping application, both tools (Acunetix and Use Case Guided Fuzzing) failed to reach and correctly fill out the form that allows users to change their contact information. This form contained eight stored Cross-Site Scripting (XSS) vulnerabilities, as the application did not validate the input for malicious values. However, the server did check the phone number and email address for validity, rejecting the form if either value was incorrect.

Guided fuzzing, in contrast, was able to analyze a large part of the application, including the login form and user data form, and reported a total of nine vulnerable entry points. The stateful fuzzing approach allowed for a broader exploration of entry points and maintained the ability to replay test cases using the snapshot mechanism. The number of database objects created by the different approaches (as shown in Table 4) confirms the effectiveness of these techniques in creating a wide variety of valid objects, reflecting the extensive analysis of the application.

## Discussion
All vulnerabilities found in our experiments were previously unknown and have been reported to the developers of the web applications. Our results show that our fuzzing techniques consistently find more (or at least the same amount) of bugs compared to other open-source and commercial scanners. Additionally, the different approaches carried out meaningful interactions with the web applications, visiting many locations and creating a large variety of database objects. Each technique has its strengths; for example, stateful fuzzing is particularly useful for complex and sensitive applications.

## Related Work
Vulnerability testing, test case generation, and fuzzing are well-known concepts in software engineering and vulnerability analysis [3, 4, 11]. For web applications, black-box fuzzing tools [1, 5, 31] are popular but suffer from limited test coverage, especially for applications requiring complex interactions or specific input values. SecuBat [16], a web vulnerability scanner we developed, can detect reflected XSS and SQL injection vulnerabilities but cannot fill out forms, thus it was not included in our experiments.

There are also general vulnerability detection and security assessment tools like Nikto [19] and Nessus [29], which rely on known vulnerabilities. Our tool, however, aims to discover unknown vulnerabilities. Other web-specific tools include Scott and Sharp’s application-level firewall [25] and Huang et al.’s [13] vulnerability detection tool. Static source code analysis tools [15, 27, 32] are also widely used to identify vulnerabilities.

Automated test case generation methods include random, specification-based [20, 22], and model-based [21] approaches. By introducing use cases and guided fuzzing, we improve the effectiveness of random tests by providing inputs that are likely valid, allowing the scanner to reach deeper into the application. Tools like WinRunner allow human testers to record and replay user actions, but require manual scripting and checkpoints. Our approach combines the advantages of such tools with black-box fuzzers and provides techniques to generalize from recorded use cases.

Finally, several approaches [6, 12, 18] aim to explore alternative execution paths to increase test coverage. Our system leverages known, valid input to directly reach a large part of an application and then uses a black-box fuzzer to find vulnerabilities, providing better scalability and allowing us to quickly examine large parts of the application.

## Conclusions
We presented a web application testing tool to detect reflected and stored cross-site scripting (XSS) vulnerabilities. The core of our system is a black-box vulnerability scanner. To overcome the limitations of black-box testing, we introduced guided fuzzing, extended guided fuzzing, and stateful fuzzing. These techniques leverage previously recorded user input to create comprehensive test cases and mitigate undesirable side effects. Our experimental results demonstrate that our approach identifies more bugs than several open-source and commercial web vulnerability scanners.

## Acknowledgments
This work was supported by the Austrian Science Foundation (FWF) under grant P-18764, the FIT-IT project SECoverer, and the Secure Business Austria Competence Center.

## References
[1] Acunetix. Acunetix Web Vulnerability Scanner (2008), http://www.acunetix.com/
[2] Balzarotti, D., Cova, M., Felmetsger, V., Jovanov, N., Kirda, E., Kruegel, C., Vigna, G.: Saner: Composing Static and Dynamic Analysis to Validate Sanitization in Web Applications. In: IEEE Security and Privacy Symposium (2008)
[3] Beizer, B.: Software System Testing and Quality Assurance. Van Nostrand Reinhold (1984)
[4] Beizer, B.: Software Testing Techniques. Van Nostrand Reinhold (1990)
[5] Spider, B.: Web Application Security (2008), http://portswigger.net/spider/
[6] Cadar, C., Ganesh, V., Pawlowski, P., Dill, D., Engler, D.: EXE: Automatically Generating Inputs of Death. In: ACM Conference on Computer and Communication Security (2006)
[7] Hannson, D.: Ruby on Rails (2008), http://www.rubyonrails.org/
[8] Django. The Web Framework for Professionals with Deadlines (2008), http://www.djangoproject.com/
[9] Basic Django Blog Application, http://code.google.com/p/django-basic-blog/
[10] Endler, D.: The Evolution of Cross Site Scripting Attacks. Technical report, iDEFENSE Labs (2002)
[11] Ghezzi, C., Jazayeri, M., Mandrioli, D.: Fundamentals of Software Engineering. Prentice-Hall International, Englewood Cliffs (1994)
[12] Godefroid, P., Klarlund, N., Sen, K.: DART. In: Programming Language Design and Implementation (PLDI) (2005)
[13] Huang, Y., Huang, S., Lin, T.: Web Application Security Assessment by Fault Injection and Behavior Monitoring. In: 12th World Wide Web Conference (2003)
[14] Insecure.org. NMap Network Scanner (2008), http://www.insecure.org/nmap/
[15] Jovanovic, N., Kruegel, C., Kirda, E.: Pixy: A Static Analysis Tool for Detecting Web Application Vulnerabilities (Short Paper). In: IEEE Symposium on Security and Privacy (2006)
[16] Kals, S., Kirda, E., Kruegel, C., Jovanovic, N.: SecuBat: A Web Vulnerability Scanner. In: World Wide Web Conference (2006)
[17] Mitre. Common Vulnerabilities and Exposures, http://cve.mitre.org/
[18] Moser, A., Kruegel, C., Kirda, E.: Exploring Multiple Execution Paths for Malware Analysis. In: IEEE Symposium on Security and Privacy (2007)
[19] Nikto. Web Server Scanner (2008), http://www.cirt.net/code/nikto.shtml
[20] Offutt, J., Abdurazik, A.: Generating Tests from UML Specifications. In: Second International Conference on the Unified Modeling Language (1999)
[21] Offutt, J., Abdurazik, A.: Using UML Collaboration Diagrams for Static Checking and Test Generation. In: Evans, A., Kent, S., Selic, B. (eds.) UML 2000. LNCS, vol. 1939, pp. 383–395. Springer, Heidelberg (2000)
[22] Offutt, J., Liu, S., Abdurazik, A., Ammann, P.: Generating Test Data from State-based Specifications. In: Journal of Software Testing, Verification and Reliability (2003)
[23] Poulton, R.: Django Forum Component, http://code.google.com/p/django-forum/
[24] Satchmo, http://www.satchmoproject.com/
[25] Scott, D., Sharp, R.: Abstracting Application-level Web Security. In: 11th World Wide Web Conference (2002)
[26] WhiteHat Security. Web Application Security 101 (2005), http://www.whitehatsec.com/articles/webappsec101.pdf
[27] Su, Z., Wassermann, G.: The Essence of Command Injection Attacks in Web Applications. In: Symposium on Principles of Programming Languages (2006)
[28] Sun. Java Servlets (2008), http://java.sun.com/products/servlet/
[29] Tenable Network Security. Nessus Open Source Vulnerability Scanner Project (2008), http://www.nessus.org/
[30] Twill. Twill: A Simple Scripting Language for Web Browsing (2008), http://twill.idyll.org/
[31] Web Application Attack and Audit Framework, http://w3af.sourceforge.net/
[32] Xie, Y., Aiken, A.: Static Detection of Security Vulnerabilities in Scripting Languages. In: 15th USENIX Security Symposium (2006)