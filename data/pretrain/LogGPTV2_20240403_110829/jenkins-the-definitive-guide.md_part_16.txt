### Configuring a Grails Build Step

In the "Configuring a Grails build step" section, you specify the Grails targets or multiple targets you wish to execute. Unlike the command line, where you can only run one target at a time, Jenkins allows you to execute several targets in a single command. If you need to pass arguments to a specific target, enclose the target and its arguments in double quotes. For example, in Figure 5.50, we run `grails clean`, followed by `grails test-app -unit -non-interactive`. To ensure this works correctly, we enclose the options of the second command in quotes, resulting in `grails clean "test-app -unit -non-interactive"`.

**Figure 5.50: Configuring a Grails build step**

The Grails build step supports many optional parameters. For instance, Grails is sensitive to version differences; if your project was created with an older version, Grails will prompt you to upgrade it. To avoid this, you can check the "Force Upgrade" checkbox, which ensures that `grails upgrade --non-interactive` runs before the main targets.

You can also specify the server port (useful for web tests) and any other properties you want to pass to the build.

### Building Projects with Gradle

Contributed by Rene Groeschke

Compared to the established build tools Ant and Maven, Gradle is a relatively new open-source build tool for the Java Virtual Machine (JVM). Gradle build scripts are written in a Domain Specific Language (DSL) based on Groovy. Gradle follows the principle of "convention over configuration," allows direct access to Ant tasks, and uses Maven-like declarative dependency management. The concise nature of Groovy scripting enables you to write expressive build scripts with minimal code, although this comes at the cost of reduced IDE support compared to Ant and Maven.

There are two ways to run Gradle builds with Jenkins: using the Gradle plugin for Jenkins or the Gradle wrapper functionality.

#### The Gradle Plugin for Jenkins

To install the Gradle plugin, go to the "Manage Plugins" screen in Jenkins, select the Jenkins Gradle plugin, and click "Install." After installation, restart your Jenkins instance.

Once Jenkins has restarted, configure the new Gradle plugin. You should find a new "Gradle" section in the "Configure System" screen. Here, add the Gradle installation you want to use. Click the "Add Gradle" button to add a new Gradle installation and enter an appropriate name (see Figure 5.51, "Configuring the Gradle plugin"). If Gradle is already installed on your build server, point to the local Gradle home directory. Alternatively, use the "Install automatically" feature to download a Gradle installation from a URL, such as a ZIP or GZipped TAR file.

**Figure 5.51: Configuring the Gradle plugin**

Typically, you use Freestyle build jobs to configure your Gradle builds. When adding a build step to a Freestyle build job, you will now have a new option called "Invoke Gradle script," which allows you to add Gradle-specific settings to your build job.

Here is a simple Gradle build script for a Java project using a Maven directory structure and a Maven repository manager:

```groovy
apply plugin: 'java'
apply plugin: 'maven'

version = '1.0-SNAPSHOT'
group = 'org.acme'

repositories {
    mavenCentral()
    mavenRepo urls: 'http://build.server/nexus/content/repositories/public'
}

dependencies {
    testCompile 'junit:junit:4.8.2'
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.archives
        repository(url: 'http://build.server/nexus/content/repositories/snapshots') {
            authentication(userName: 'admin', password: 'password')
        }
    }
}
```

In Figure 5.52, "Setting up a Gradle build job," we use the configured "Gradle-0.9RC2" instance to run this Gradle build. We run JUnit tests and upload the build artifacts to our local Maven repository. Additionally, we configure the job to collect test results from **/build/test-results, the default directory for storing test results in Gradle.

**Figure 5.52: Setting up a Gradle build job**

#### Incremental Builds

When running a Gradle build job with unchanged sources, Gradle performs incremental builds. If the output of a Gradle task is still available and the sources haven't changed since the last build, Gradle skips the task execution and marks it as up-to-date. This feature can significantly reduce the duration of a build job.

If Gradle evaluates the test task as up-to-date, it skips the execution of unit tests. This can cause issues when running Gradle builds with Jenkins. In our sample build job, we configured a post-build action to publish JUnit reports. If the test task is skipped, the Jenkins job will be marked as failed with the message: "Test reports were found but none of them are new. Did tests run?"

To fix this, invalidate the output and force a re-execution of the tests by adding the following snippet to your Gradle file:

```groovy
test {
    outputs.upToDateWhen { false }
}
```

**Figure 5.53: Incremental Gradle job**

After adding the snippet, your job console output should look like the one in Figure 5.53, "Incremental Gradle job." As shown, all tasks except `test` and `uploadArchives` are marked as up-to-date and not executed.

### Building Projects with Visual Studio MSBuild

Jenkins, a Java application, provides excellent support for .NET projects. To build .NET projects in Jenkins, you need to install the MSBuild plugin. You may also want to install the MSTest and NUnit plugins to display your test results.

Once the .NET plugins are installed and Jenkins is restarted, configure your .NET build tools. Go to the "Configure System" page and specify the path of the MSBuild executable (see Figure 5.54, "Configuring .NET build tools in Jenkins").

**Figure 5.54: Configuring .NET build tools in Jenkins**

With this set up, return to your freestyle project and add your .NET build step configuration. In the "Build" section, choose the "Build a Visual project or solution using MSBuild" option. Enter the path to your MSBuild build script (a .proj or .sln file) and any required command-line options (see Figure 5.55, "A build step using MSBuild").

**Figure 5.55: A build step using MSBuild**

### Building Projects with NAnt

Another way to build .NET projects is to use NAnt, a .NET version of the Ant build scripting tool. NAnt build scripts are XML files (typically with a .build extension) with a format similar to Ant build scripts.

To build with NAnt in Jenkins, install the Jenkins NAnt plugin. After installation and restarting Jenkins, go to the "Configure System" page and specify the NAnt installation directory in the Nant Builders section (see Figure 5.54, "Configuring .NET build tools in Jenkins").

Now, go to the "Build" section of your freestyle project and choose "Execute NAnt build" (see Figure 5.56, "A build step using NAnt"). Specify your build script and the target you want to invoke. You can also set property values to be passed into the NAnt script by clicking the "Advanced..." option.

**Figure 5.56: A build step using NAnt**

### Building Projects with Ruby and Ruby on Rails

Jenkins is an excellent choice for integrating Continuous Integration (CI) into Ruby and Ruby on Rails projects. The Rake Plugin lets you add Rake build steps to your build jobs, and the Ruby Plugin lets you run Ruby scripts directly. The Ruby Metrics Plugin provides support for Ruby code quality metrics tools such as RCov, Rails stats, and Flog.

Another valuable tool is CI:Reporter, an add-on to Test::Unit, RSpec, and Cucumber that generates JUnit-compatible XML reports for your tests. Install CI:Reporter using Gem:

```sh
$ sudo gem install ci_reporter
Successfully installed ci_reporter-1.6.4
1 gem installed
```

Next, set up CI:Reporter in your Rakefile:

```ruby
require 'rubygems'
gem 'ci_reporter'
require 'ci/reporter/rake/test_unit' # use this if you're using Test::Unit
```

In Chapter 9, "Code Quality," we discuss integrating code quality metrics into your Jenkins builds. Jenkins also supports code coverage metrics in Ruby. The Ruby Metrics Plugin supports code coverage metrics using RCov and general code statistics with Rails stats. To install the rcov-plugin, run:

```sh
$ ./script/plugin install http://svn.codahale.com/rails_rcov
```

Once set up, you can display your test results and test result trends in Jenkins. Configure a Rake build by using a Rake build step (see Figure 5.57, "A build step using Rake").

**Figure 5.57: A build step using Rake**

Configure Jenkins to report on the test and quality metrics results by activating the "Publish JUnit test result report," "Publish Rails stats report," and "Publish Rcov report" options (see Figure 5.58, "Publishing code quality metrics for Ruby and Rails"). The JUnit XML reports will be found in the `results` directory (enter `results/*.xml` in the "Test report XMLs" field), and the Rcov data in the `coverage/units` directory.

**Figure 5.58: Publishing code quality metrics for Ruby and Rails**

### Conclusion

In this chapter, we covered the basics of creating new build jobs for common scenarios. Later in the book, we will explore more advanced options such as parameterized builds, matrix builds, and build promotion strategies.

### Chapter 6: Automated Testing

#### Introduction

Automated testing is a crucial component of Continuous Integration (CI). Without automated tests, CI is just a minor improvement over scheduled builds. One of the fundamental principles of CI is that a build should be verifiable. Automated tests provide an objective way to determine if a build is ready to proceed to the next stage.

There are many ways to integrate automated tests into your application. Techniques like Test-Driven Development (TDD) and Behavior-Driven Development (BDD) are efficient for writing high-quality tests. These approaches focus on testing the expected behavior rather than the implementation, leading to more comprehensive and accurate tests.

Jenkins is not limited to unit testing. It supports various types of automated testing, including integration, web, functional, performance, and load testing. BDD frameworks like easyb, fitnesse, jbehave, rspec, and Cucumber present acceptance tests in terms that non-technical stakeholders can understand, making Jenkins a powerful communication tool.

For legacy applications with little or no automated testing, it can be challenging to retrofit comprehensive unit tests. In such cases, writing automated functional tests ("regression" tests) that simulate user interactions can be effective. Tools like Selenium and WebDriver can be used for high-level web testing.

In this chapter, we will see how Jenkins helps you track automated test results and use this information to monitor and analyze your build process.

#### Automating Your Unit and Integration Tests

Integrating unit tests into Jenkins is generally straightforward. There are many unit testing tools available, with the xUnit family being predominant. In the Java world, JUnit is the standard, while TestNG is another popular framework. For C# applications, NUnit is widely used, and for Ruby, there is Test::Unit. Other languages have their own xUnit-compatible frameworks.

These tools can also be used for integration, functional, and web tests. Many web testing tools, such as Selenium and WebDriver, generate xUnit-compatible reports. BDD and automated acceptance test tools like easyb, Fitnesse, and Concordion are also xUnit-friendly.

From a configuration perspective, Jenkins treats these different types of tests similarly. However, you should categorize your tests in your build jobs to get the fastest possible feedback loop. Start with fast-running unit tests, then proceed to integration tests, and finally run slower functional and web tests.

#### Configuring Test Reports in Jenkins

Once your build generates test results, configure your Jenkins build job to display them. Jenkins works with any xUnit-compatible test reports, regardless of the language.

For Maven build jobs, no special configuration is needed—just ensure you run a goal that executes your tests, such as `mvn test` (for unit tests) or `mvn verify` (for unit and integration tests). An example of a Maven build job configuration is shown in Figure 6.1, "You configure your Jenkins installation in the Manage Jenkins screen."

**Figure 6.1: You configure your Jenkins installation in the Manage Jenkins screen**

For freestyle build jobs, you need to do some additional configuration. Ensure your build runs the tests and tell Jenkins to publish the JUnit test report. Configure this in the "Post-build Actions" section (see Figure 6.2, "Configuring Maven test reports in a freestyle project"). Provide the path to the JUnit or TestNG XML reports. For a Maven project, a path like `**/target/surefire-reports/*.xml` will usually work. For an Ant-based project, the path depends on how you configured the Ant JUnit task.

**Figure 6.2: Configuring Maven test reports in a freestyle project**

For Java projects, whether using JUnit or TestNG, Jenkins provides excellent out-of-the-box support. For non-Java projects, you might need the xUnit Plugin. This plugin allows Jenkins to process test reports from non-Java tools consistently. It supports MSUnit and NUnit (for C# and other .NET languages), UnitTest++ and Boost Test (for C++), and PHPUnit (for PHP), among others (see Figure 6.3, "Installing the xUnit plugin").

**Figure 6.3: Installing the xUnit plugin**

After installing the xUnit Plugin, configure the reporting for your particular xUnit reports in the "Post-build Actions" section. Check the "Publish testing tools result report" checkbox and enter the path to the XML reports generated by your testing library (see Figure 6.4, "Publishing xUnit test results"). When the build job runs, Jenkins will convert these reports to JUnit reports for display.

**Figure 6.4: Publishing xUnit test results**

#### Displaying Test Results

[Continue with the rest of the content as needed]