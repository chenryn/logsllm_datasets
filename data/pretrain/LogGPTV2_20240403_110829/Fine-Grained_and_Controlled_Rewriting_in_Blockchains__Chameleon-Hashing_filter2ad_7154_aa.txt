title:Fine-Grained and Controlled Rewriting in Blockchains: Chameleon-Hashing
Gone Attribute-Based
author:David Derler and
Kai Samelin and
Daniel Slamanig and
Christoph Striecks
Fine-Grained and Controlled Rewriting in
Blockchains: Chameleon-Hashing Gone
Attribute-Based
David Derler
DFINITY
david@dﬁnity.org
Kai Samelin
T ¨UV Rheinland i-sec GmbH
PI:EMAIL
Daniel Slamanig and Christoph Striecks
{daniel.slamanig, christoph.striecks}@ait.ac.at
AIT Austrian Institute of Technology
Abstract—Blockchain technologies recently received a consid-
erable amount of attention. While the initial focus was mainly
on the use of blockchains in the context of cryptocurrencies such
as Bitcoin, application scenarios now go far beyond this. Most
blockchains have the property that once some object, e.g., a block
or a transaction, has been registered to be included into the
blockchain, it is persisted and there are no means to modify
it again. While this is an essential feature of most blockchain
scenarios, it is still often desirable—at times it may be even legally
required—to allow for breaking this immutability in a controlled
way.
Only recently, Ateniese et al. (EUROS&P 2017) proposed an
elegant solution to this problem on the block level. Thereby,
the authors replace standard hash functions with so-called
chameleon-hashes (Krawczyk and Rabin, NDSS 2000). While
their work seems to offer a suitable solution to the problem
of controlled re-writing of blockchains, their approach is too
coarse-grained in that it only offers an all-or-nothing solution.
We revisit this idea and introduce the novel concept of policy-
based chameleon-hashes (PCH). PCHs generalize the notion of
chameleon-hashes by giving the party computing a hash the
ability to associate access policies to the generated hashes. Anyone
who possesses enough privileges to satisfy the policy can then ﬁnd
arbitrary collisions for a given hash. We then apply this concept to
transaction-level rewriting within blockchains, and thus support
ﬁne-grained and controlled modiﬁability of blockchain objects.
Besides modeling PCHs, we present a generic construction
of PCHs (using a strengthened version of chameleon-hashes with
ephemeral trapdoors which we also introduce), rigorously prove
its security, and instantiate it with efﬁcient building blocks. We
report ﬁrst implementation results.
I.
INTRODUCTION
Blockchains technologies have attracted a tremendous
amount of attention. This increase in interest was mainly
triggered by the ﬁrst large-scale application of blockchains,
i.e., the decentralized cryptocurrency Bitcoin. Meanwhile ap-
plications go far beyond their use in cryptocurrencies. Ex-
amples include application domains such as supply chains,
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23066
www.ndss-symposium.org
digital twins, insurance, healthcare, or energy.1 In a nutshell,
a blockchain is a decentralized, distributed, potentially public,
and immutable log of objects such as transactions. It is created
by establishing consensus between the chain’s participants and
can be thought of as a hash-chain which links blocks together.
That is, each block includes the hash of the previous block as
a reference to link them. Each block typically also includes
some other information and a set of valid transactions, which,
in turn, are usually accumulated into a single hash value by
means of a Merkle tree [36]. A transaction can be a monetary
transaction (as in cryptocurrencies) or include any other object
of interest which needs to be recorded, e.g., data related to
smart contracts.
Blockchains can be of different types. They can be public
as for example used within Bitcoin or Ethereum, where the
consensus protocol is executed between many pseudonymous
participants. Here, the blockchain can be read and written
by everyone. In such blockchains, the consensus ﬁnding is
typically either implemented via proofs of work (PoW), or
proofs of stake (PoS) combined with some alternative, less
resource intensive consensus ﬁnding algorithm (e.g., byzantine
fault tolerance algorithms [33]). Such public blockchains can
also be viewed as permissionless, because everyone can join
the system, can participate in the consensus protocol, and can
also establish smart contracts. Blockchains, however, can also
be private (also called enterprise or permissioned blockchains)
like Hyperlegder, Ethereum Enterprise, Ripple, or Quorum.
Here, all the participants and their (digital) identities are known
to one or more trusted organizations. Actors have (policy-
based) write and read permissions, and reading and writing
usually requires consensus of several participants. Such private
blockchains can thus be viewed as permissioned, because they
restrict the actors who can contribute to the consensus on the
system state to validate the block transactions. Hyperledger [3]
for instance uses so-called endorsement policies in the form
of monotone Boolean formulas, e.g., (A AND D) OR C to
determine which peers are required to endorse a transaction.
Moreover, among others, they allow also to restrict access to
approved actors who can create smart contracts.
Problem and Motivation. One particular issue that
is of
interest
in this work is that once some object has been
registered in the blockchain (be it private or public), the object
1http://www.businessinsider.de/blockchain-technology-applications-use-
cases-2017-9?r=US&IR=T
is persisted as is and there is no means to alter it ever again.
While this is one of the crucial properties of blockchains, it
is often desirable—at times may be even legally required—
to introduce features which allow to “break” the immutability
of objects in the blockchain, preferably in a ﬁne-grained and
controlled way. While this might sound dangerous at ﬁrst
glance, there are surprisingly many scenarios which do beneﬁt
or even crucially require such a functionality.
With the increasing number of application of blockchains
already listed, which may include sensitive information into
blockchains, features to redact or correct objects in blockchains
might evolve to an important requirement and may often
be even legally obliged. For example, the upcoming general
data protection regulation (GDPR)2 of the European Union
imposes the Right to be Forgotten as a key Data Subject Right.
In light of this regulation, it is no longer legally possible
to use immutable blockchains in processes where personal
data are recorded within blockchains. Also various other legal
regulations such as the United States Fair Credit Reporting Act,
the Gramm-Leach-Bliley Act, and the Securities and Exchange
Commission’s Regulation S-P are relevant here.3
Mitigation Strategies. To mitigate this problem, there are
different strategies that can be used. Central to the problem are
thereby the questions of (1) who is allowed to perform these
modiﬁcations and (2) what data can be modiﬁed. Thereby it
seems desirable that (1) the person who introduces an object
into the blockchain should be able to determine who will be
able to modﬁy the object if required and (2) only the object,
i.e., the transaction, can be modiﬁed, while the blockchain (i.e.,
the chaining of the blocks) does not need to be touched. As
we will discuss below, some straight-forward solutions do not
satisfactorily address these issues.
A ﬁrst strategy is to simply create new objects, i.e., a new
version of a transaction or smart contract, to be integrated into
the next block of the blockchain. This new object points to
the old one and invalidates it. However, this keeps a history of
all modiﬁcation which is not always desired. Moreover, this
may also infringe laws, e.g., EU privacy laws, and in particular
the Right to be Forgotten, when the objects include sensitive
and/or person related data, as in this case, the content does
effectively not disappear from the blockchain.
Another strategy could be to simply perform a hard-fork
whenever transactions in some block require to be edited or
ﬁxed, and to develop the new blockchain from there. Apart
from being not oblivious to the users, i.e., it requires every user
to download new client software which accepts the new chain,
this is a signiﬁcant intervention in the blockchain ecosystem
on every correction. In particular, one needs to invalidate
all conﬁrmed later blocks including the modiﬁed one. The
impractically of the method, for example, becomes apparent
when thinking of a block from years ago, which needs to be
removed due to data protection reasons.
Another solution is to rewind and replay the blockchain
to the point where the modiﬁcation needs to take place and
including a new
to recompute everything from this point
2https://www.eugdpr.org
3https://www.nytimes.com/2016/09/10/business/dealbook/downside-of-
virtual-currencies-a-ledger-that-cant-be-corrected.html
consensus ﬁnding for all already computed blocks. For the
same reasons as discussed above, this is highly inefﬁcient,
does not scale, and—likewise to the hard-fork strategy—is not
oblivious to the users.
Arguably all the above strategies, besides their inefﬁciency,
neither allow to control who will be able to modify nor what
can be modiﬁed. A more desirable strategy is one which is
controlled by the users in a ﬁne-grained way, oblivious to the
other users, highly efﬁcient, and only requires changes that
are local to the point where a transaction needs to be edited.
A solution providing those properties may seem too good to
be true, especially because the hash function involved in the
block computation (or transaction aggregation) prevents any
modiﬁcation, i.e., any alteration of a transaction will change
the hash value and break the link to the following block.
Existing Solution. Recently, Ateniese, Magri, Venturi, and
Andrade [6] came up with a clever idea and showed that
the problem of rewriting entire blocks in a blockchain can be
efﬁciently solved by means of chameleon-hash functions [31].
A chameleon-hash (CH) is a hash function, where hashing is
parametrized by a public key pk. It behaves like a collision-
resistant hash function as long as the trapdoor (the secret key sk
corresponding to pk) is not known. Conversely, if the trapdoor
sk is known, arbitrary collisions can be found. Using such
hash functions as a replacement for collision-resistant ones in
blockchains allows to introduce some entity that possesses the
trapdoor. By computing collisions in the hash function, this
entity can efﬁciently edit the blockchain. This solution has
recently seen practical adoption by Accenture.4
i.e.,
Although very elegant, the approach by Ateniese et al. is
rather limited. Firstly, it considers rewriting of a blockchain
on the block level,
to replace the hash of an entire
block, which seems to be far too coarse-grained and powerful
and rewriting on a transaction level seems more reasonable.
Secondly, it can only be decided in a coarse-grained way who
can compute collisions. This is because one always hashes with
respect to a single ﬁxed public key. Consequently, a single
ﬁxed secret key is useful to ﬁnd collisions. Furthermore, the
party who computes the hash is totally oblivious about who is
later able to compute collisions in the chameleon-hash. This
means that the party who computes the hash does not know
who is allowed to rewrite the blockchain (apart from the entity
behind pk). However, when an object should be included into
the blockchain, the party performing this operation should be
able to specify who is able to perform editing on this object
in a ﬁne-grained way. For example, for every transaction, one
should be able to separately specify the identities of the user
or roles of users within an organization (e.g., a data protection
ofﬁcer or a member of the board), which is required to later
update/correct the respective object.
Our Envisioned Improved Solution. Our starting point is
attribute-based access control (ABAC) [27], where users are
tagged by (ad-hoc) attributes and there are policies that express
(potentially complex) Boolean formulas over attributes. On a
very high level, access decisions are made by evaluating the
respective access policies on the set of attributes associated to a
user. For instance, assume that a user has associated attributes
4https://www.accenture.com/us-en/service-blockchain-ﬁnancial-services
2
{A, B, C} out of the attribute set {A, B, C, D} and access to a
resource, protected by a policy (A AND D) OR C, then access
for this user would be granted. Note that attributes can also
directly describe users’ identities {user1, user2, user3, . . .} and
restricting the Boolean formulas to OR’s allows for specifying
the set of authorized users, e.g., user1 OR user2 OR user3.
In addition, we consider a decentralized setting, where, in
general, every entity can play the role of an attribute authority
and tag other users with attributes (in our realization this
will amount to issuing keys for corresponding attributes to
those users). Then, when some user decides that some object
should be integrated into the blockchain, the user can “tag”
the object with an access policy corresponding to an attribute
authority (managed by some other user) of it’s choice (in our
realization this amounts to hashing the object with a novel type
of chameleon-hash). If at some later point in time the objects
needs to be modiﬁed, every user that satisﬁes the associated
policy can perform the update (in our realization this amounts
to computing a collision in the novel type of chameleon-hash).
An important property that we want to achieve thereby is
that original and modiﬁed objects cannot be told apart (are
indistinguishable) and that even if user keys associated to
attributes leak, no information about the history of an object
can be reconstructed (e.g., its previous state).
A. Contribution
In this work, we introduce a cryptographic solution to
the scenario outlined above, i.e., the scenario of rewriting
objects in blockchains in a ﬂexible, controlled, and ﬁne-
grained way. To achieve this goal, we introduce the notion
of policy-based chameleon-hashes (PCHs), which generalizes
chameleon-hashes in the sense that hashing additionally takes
an access policy as input and collision ﬁnding is much more
ﬁne-grained than in existing chameleon-hashing, i.e., a colli-
sion can only be found by users satisfying the policy speciﬁed
during hashing. In particular, when computing a hash, an
access policy can be included so that only entities that possess
secret keys corresponding to attributes satisfying the access
policy can ﬁnd collisions. We rigorously model the security
one would expect from such a primitive.
A cryptographic primitive that allows for elegantly mod-
eling the access-control requirements in such a setting is
ciphertext-policy attribute-based encryption (CP-ABE) which
was ﬁrst envisioned by Goyal, Pandey, Sahai, and Waters [26]
and later efﬁciently instantiated by Bethencourt, Sahai, and
Waters [14]. Here, one speciﬁes access policies over attributes
upon computing ciphertexts, and secret keys are associated to
attributes. Only someone who possesses a secret key whose
corresponding attributes satisfy the access policy is able to
decrypt. The important feature thereby is that the encrypting
party does not even need to know the entities who will later
be able to decrypt, but only needs to specify an access policy.
However, it turns out to be non-trivial to achieve a similar
functionality in the context of chameleon-hashes, e.g., by ex-
tending the approach of Ateniese et al. [6]. The main technical
hurdle, when going for a naive integration of the functionality
of CP-ABE into chameleon-hashes,
the party who
computes a hash somehow needs to encrypt a trapdoor which
will later be useful to compute collisions. Now, in conventional
is that
chameleon-hashes,
the trapdoor, which enables computing
collisions, is essentially the secret key corresponding to the
public hashing key being ﬁxed in the system parameters. This
trapdoor remains the same for all hashes computed with respect
to one public hashing key. Consequently, after computing