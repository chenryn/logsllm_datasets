try { 
XPathExpression expr = xpath.compile(path); 
Object result = expr.evaluate(doc, XPathConstants.NODESET); 
NodeList nodes = (NodeList) result; 
len = nodes.getLength(); 
} catch (XPathExpressionException e) { 
logger.warn("Exception", e); 
} 
return len; 
} 
解决方案：
public int fix(HttpServletRequest request,  
Document doc, XPath xpath ,org.apache.log4j.Logger logger) { 
int len = 0; 
String path = request.getParameter("path"); 
try { 
// 使用过滤函数 
String filtedXPath = filterForXPath(path); 
XPathExpression expr = xpath.compile(filtedXPath); 
Object result = expr.evaluate(doc, XPathConstants.NODESET); 
NodeList nodes = (NodeList) result; 
len = nodes.getLength(); 
} catch (XPathExpressionException e) { 
logger.warn("Exception", e); 
} 
return len; 
} 
// 限制用户的输入数据，尤其应限制特殊字符 
public String filterForXPath(String input) { 
if (input == null) { 
return null; 
} 
StringBuilder out = new StringBuilder(); 
for (int i = 0; i = 'A' && c = 'a' && c = '0' && c = 0x4e00 && c  
    org.javadelight 
    delight-nashorn-sandbox 
    [insert latest version] 
// 创建沙盒 
NashornSandbox sandbox = NashornSandboxes.create(); 
// 沙盒内默认禁止js代码访问所有的java类对象 
// 沙盒可以手工授权js代码能访问的java类对象 
sandbox.allow(File.class); 
// eval执行js代码 
sandbox.eval("var File = Java.type('java.io.File'); File;") 
java 7 使用 Rhino 引擎
public void runCustomTrigger(String script) { 
// 启用 Rhino 引擎的js沙盒模式 
SandboxContextFactory contextFactory = new SandboxContextFactory(); 
Context context = contextFactory.makeContext(); 
contextFactory.enterContext(context); 
try { 
ScriptableObject prototype = context.initStandardObjects(); 
prototype.setParentScope(null); 
Scriptable scope = context.newObject(prototype); 
scope.setPrototype(prototype); 
context.evaluateString(scope,script, null, -1, null); 
} finally { 
context.exit(); 
} 
} 
JavaBeans属性注入
如果系统设置bean属性前未进行严格的校验，攻击者可以设置能影响系统完整性的任意bean属性。例
如BeanUtils.populate函数或类似功能函数允许设置Bean属性或嵌套属性。攻击者可以利用此功能来访
问特殊的Bean属性 class.classLoader，从而可以覆盖系统属性并可能执行任意代码。
脆弱代码：
MyBean bean = ...; 
HashMap map = new HashMap(); 
Enumeration names = request.getParameterNames(); 
while (names.hasMoreElements()) { 
String name = (String) names.nextElement(); 
map.put(name, request.getParameterValues(name)); 
} 
BeanUtils.populate(bean, map); 
解决方案：
Bean属性的成分复杂，用户输入的数据应严格校验后才能填充到Bean的属性。
跨站脚本攻击（XSS）
攻击者嵌入恶意脚本代码到正常用户会访问到的页面中，当正常用户访问该页面时，则可导致嵌入的恶
意脚本代码的执行，从而达到恶意攻击用户的目的。
常见的攻击向量：
">”>’> 
"> 
"> 
解决方案：
禁止简单的正则过滤，浏览器存在容错机制会将攻击者精心构造的变形前端代码渲染成攻击向量。
原则上禁止用户输入特殊字符，或者转义用户输入的特殊字符。
对富文本输出内容进行白名单校验，只能对用户渲染安全的HTML标签和安全的HTML属性，请参
照以下链接。
https://github.com/cure53/DOMPurify
https://github.com/leizongmin/js-xss/blob/master/README.zh.md
第九条 必须过滤上传文件
必须检查上传文件的类型、名称等，并使用正则表达式等
对文件名做严格的检查，限定文件名只能包括字母和数
字，同时限制文件的操作权限，并对文件的访问路径进行
验证。
编码类要求：
潜在的路径遍历（读取文件）
当系统读取文件名打开对应的文件以读取其内容，而该文件名来自于用户的输入数据。如果将未经过滤
的文件名数据传递给文件API，则攻击者可以从系统中读取任意文件。
脆弱代码：
@GET 
@Path("/images/{image}") 
@Produces("images/*") 
public Response getImage(@javax.ws.rs.PathParam("image") String image) { 
// image变量中未校验 ../ 或 ..\ 
File file = new File("resources/images/", image);  
if (!file.exists()) { 
return Response.status(Status.NOT_FOUND).build(); 
} 
return Response.ok().entity(new FileInputStream(file)).build(); 
} 
解决方案：
import org.apache.commons.io.FilenameUtils; 
@GET 
@Path("/images/{image}") 
@Produces("images/*") 
public Response getImage(@javax.ws.rs.PathParam("image") String image) { 
// 首先进行逻辑校验，判断用户是否有权限访问接口 以及 用户对访问的资源是否有权限 
// 过滤image变量中的 ../ 或 ..\ 