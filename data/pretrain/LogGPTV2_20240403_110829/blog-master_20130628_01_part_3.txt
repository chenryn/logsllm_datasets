digoal=# select reltoastrelid::regclass from pg_class where relname='deadtuple_teste';  
      reltoastrelid        
-------------------------  
 pg_toast.pg_toast_33317  
(1 row)  
```  
## 三. 最后的绝招来了, 使用freespace map来计算膨胀是最赤裸的方法, 因为PostgreSQL 本身也是使用freespace map来获取定位所需空间的数据块的.  
自从8.4以后, 每个数据库对象有自己的fsm文件, 详细介绍可参考.  
[《PostgreSQL Free Space Map Principle》](../201005/20100511_02.md)  
fsm中存储的并不是每个表page的详细剩余字节数, 而是使用1个字节来存储1个page的剩余空间, 因此一个表的page被拆分成了256份, 剩余空间200代表这个page剩余blocksize*(200/256).  
fsm page内部使用binary tree存储, 1个fsm的page默认为8KB, 所以理论上可以存储8192/2-1个表page的剩余空间信息. 但是除掉fsm头信息实际上一个fsm page只能存储4069个表对象的page剩余空间信息.  
fsm pages本身也是树结构, 一个数据库对象最大为2^32-1个page组成. 所以只要3级就足以记录一个对象的page剩余空间信息 :   
```  
4069^3 > (2^32-1)  
```  
fsm page内部结构图例 :   
以下为第三级的fsm page内部结构举例 :   
```  
level  
1  
2  
4  
8  
16  
32  
64  
128  
256  
512      以上略, 逐渐收缩. 直到顶端.  
1024         4 ...  
2048      4     2  ...  
4069    3 4   0 2  ....    <- This level represents heap pages (如果是第二级或者第一级的fsm page, 这里表示child fsm page的信息)  
```  
(上面的3,4,0,2)每个数字代表heap page的剩余空间, 1个字节表示, 后面会打印fsm page的内容, 一目了然.  
fsm pages 结构图例 :   
```  
 0     <-- page 0 at level 2 (root page)  
  0     <-- page 0 at level 1  
   0     <-- page 0 at level 0  
   1     <-- page 1 at level 0  
   2     <-- ...  
   ...  
   4069  
  1     <-- page 1 at level 1  
   4069  
   ...  
  2  
   ...  
   4069*2  
  3  
   ...  
   4069*3  
  4069  
   ....  
   4069*4069  
1  
....  
....  
4069*4069*4069  
```  
一个二级节点,4069个三级节点可以记录大表的所有page信息呢?  
(注意图中有误, 4070应该改成4069)  
![pic](20130628_01_pic_001.png)  
32MB的fsm page可以记录126.38GB的数据库对象的free space map信息.   
创建测试表 :   
```  
digoal=# create table fsm_test(id int, info text);  
CREATE TABLE  
```  
插入测试数据  
```  
digoal=# insert into fsm_test select generate_series(1,1000000),'test';  
INSERT 0 1000000  
```  
查看对象大小 :   
```  
digoal=# select pg_relation_size('fsm_test');  
 pg_relation_size   
------------------  
         44285952  
(1 row)  
```  
表对应的文件  