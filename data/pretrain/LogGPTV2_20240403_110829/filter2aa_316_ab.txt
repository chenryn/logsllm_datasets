### Scanrand: High-Speed Port Scanner and Route Tracer

**Overview:**
- **Scanrand** is a high-speed port scanner and route tracer.
- It features a stateless design, embedding a cookie in the SYN packet, which is reflected in the SYN|ACK or RST|ACK responses.

**Key Features:**
- **Stateless Design:** The sender and receiver do not need to be on the same host. This allows for flexibility in deployment.
- **ICMP Analysis:** Scanrand can analyze ICMP replies to determine the original IP/L4 source. ICMP errors clone the entire IP packet (including options) and the first eight bytes of TCP/UDP/ICMP, etc.
- **TTL Estimation:** By using TTL values, Scanrand can estimate the distance a packet has traveled, which is useful for generating network graphs and tracing DDoS attacks.
- **Peer-to-Peer and Grid Computing:** Scanrand is particularly useful in peer-to-peer and grid computing designs due to its ability to handle large-scale, distributed networks.
- **Network Trickery Detection:** Third parties often struggle to set the appropriate initial TTL, making their packets stand out from legitimate traffic.

### Scanrand Examples

#### Example 1: Email Hijacking
```bash
root@arachnadox:~/new_talk# scanrand local.doxpara.com
UP: 64.81.64.164:80 [19] 0.092s
UP: 64.81.64.164:25 [04] 0.095s
UP: 64.81.64.164:443 [19] 0.099s
UP: 64.81.64.164:22 [19] 0.106s
UP: 64.81.64.164:993 [19] 0.121s
```
```bash
root@arachnadox:~# telnet www.microsoft.com 25
Trying 207.46.134.155...
Connected to microsoft.com. Escape character is '^]'.
220 ArGoSoft Mail Server Pro for WinNT/2000/XP, Version 1.8 (1.8.2.9)
```

#### Example 2: Hopcount Desynchronization
```bash
root@arachnadox:~# scanrand -b1k -e local.doxpara.com:80,21,443,465,139,8000,31337
UP:     64.81.64.164:80    [11]   0.477s
DOWN:     64.81.64.164:21    [12]   0.478s
UP:     64.81.64.164:443   [11]   0.478s
DOWN:     64.81.64.164:465   [12]   0.478s
DOWN:     64.81.64.164:139   [22]   0.488s
DOWN:     64.81.64.164:8000  [22]   0.570s
DOWN:     64.81.64.164:31337 [22]   0.636s
```
**Explanation:**
- The host is genuinely 11 or 12 hops away. The up ports reflect this, but some downed ports show double the remote distance. This is due to a PIX firewall reflecting the SYN packet back as a RST|ACK without resetting the TTL, causing the TTL to decrement twice.

#### Example 3: Serverless NAT Identification
```bash
root@arachnadox:~# scanrand -l1-3 www.doxpara.com
001 =       172.16.0.1|80    [01]   0.024s(     172.16.1.97 -> 209.81.42.254   )
002 =     216.137.24.1|80    [01]   0.030s(  216.137.24.246 -> 209.81.42.254   )
003 =    216.137.10.45|80    [03]   0.100s(  216.137.24.246 -> 209.81.42.254   )
```
```bash
root@arachnadox:~/new_talk# scanrand -l2 -vv www.doxpara.com
Stat|=====IP_Address==|Port=|Hops|==Time==|=============Details============|
SENT: 209.81.42.254:80 [00] 0.000s Sent 40 on eth0:
IP: i=172.16.1.97->209.81.42.254 v=4 hl=5 s=0 id=2 o=64 ttl=2 pay=20
TCP: p=193->80, s/a=3012956787 -> 0 o=5 f=2 w=4096 u=0 optl=0
Got 70 on eth0:
IP: i=216.137.24.1->172.16.1.97 v=4 hl=5 s=0 id=35273 o=0 ttl=127 pay=36
ICMP: IP: i=216.137.24.246->209.81.42.254 v=4 hl=5 s=0 id=2 o=64 ttl=1 pay=20 ICMP: TCP: p=193->80, 
s/a=3012956787
002 = 216.137.24.1|80 [01] 0.049s( 216.137.24.246 -> 209.81.42.254 )
```

### Multihomed Node Detection

**Objective:**
- Detect clients that are directly connected to both the internal, firewalled LAN and the outside world.

**Method:**
- Use Scanrand in Split Mode:
  - Fake a scan from the outside world and pick up replies that bypass the firewall.
  - Internal network is flooded with requests spoofed from the external network.
  - Nodes receive the request and check routing tables to determine where to send replies.
  - Replies routed through the firewall are dropped, while those routed through an unprotected link will leak out with the IP address.

### Multihomed Node Detection with NAT

**Objective:**
- Detect clients that are indirectly connected through a NAT, both to the internal, firewalled LAN and the outside world.

**Method:**
- Use different types of requests:
  - Standard TCP SYNs may not match up with anything in the NAT State Table.
  - ICMP Pings can also have state table issues.
  - UDP Ping (symmetric in and out) may work, though it is often firewalled by certain DSL providers.
  - SNMP (UDP/161) works but is not common on most clients.
  - Spoofing internal packets from an external IP can detect DMZs.

### The State of State

**Overview:**
- Scanrand maintains state through stdout, where logs are dumped and integrated visually.
- Each line of output contains information extracted from each single packet as it arrives.
- However, packets do not exist in isolation, and state is maintained through the context provided by the output.

### Hidden Bits Between the Packets

**TCP Connection Repair:**
- If a packet is dropped, TCP will retry, leading to a series of retries.
- The timing and number of retries vary between different TCP/IP stacks.
- Scanrand uses the kernel to RST incoming replies, stopping the flood. To allow the flood, use a different IP while having the kernel serve the MAC.

### Temporal Fingerprinting with Scanrand 1.x

**Example:**
```bash
root@bsd:~# arp -s 10.0.1.190 00:e0:18:02:91:9f pub
root@bsd:~# arp -an | grep 10.0.1.190
? (10.0.1.190) at 0:e0:18:2:91:9f permanent published [ethernet]
root@bsd:~# scanrand -i 10.0.1.190 -t0 -b100k 10.0.1.1-254:139
(OUTPUT SORTED)
UP:        10.0.1.12:139   [01]   0.235s
UP:        10.0.1.12:139   [01]   3.191s
UP:        10.0.1.12:139   [01]   9.109s
(+3+6)   # Windows
UP:        10.0.1.36:139   [01]   0.715s
UP:        10.0.1.36:139   [01]   3.624s
UP:        10.0.1.36:139   [01]   9.639s
(+3+6)   # Windows
UP:        10.0.1.38:139   [01]   0.755s
UP:        10.0.1.38:139   [01]   4.560s
UP:        10.0.1.38:139   [01]  10.560s
UP:        10.0.1.38:139   [01]  22.758s
UP:        10.0.1.38:139   [01]  46.756s
(+4+6+12+24)  # Linux
```
**Significance:**
- No individual packet is special, but the timing of each packet leaks the operating system of all hosts. This impacts NAT detection, as each TCP session can be independently fingerprinted.

### State Reconstruction Theory

**Objective:**
- Extract deep information from hosts without losing the raw speed of a stateless network scan.

**Method:**
- Introduce a database to collate scan results:
  - **Slow Model:** Scan a host, compile results, print out, then repeat.
  - **Fast Model:** Scan all hosts, enter all results into a dedicated state management engine (database), compile results, and perform a secondary, smaller scan if necessary.
- **Split Mode Redux:** Sender and receiver processes have different philosophies:
  - Sender optimized for speed and deployability.
  - Receiver optimized for comprehensive reports, dumping SQL for a DB engine instead of formatted text.

### State Reconstruction HOWTO

**Database Considerations:**
- **Why DB?** To avoid reinventing the wheel with a homegrown hash table.
- **Which DB?** Options include MySQL, PostgreSQL, Oracle, SQLite, SAP, and Informix.
- **API Support:** Scanrand can output raw SQL, leveraging existing database engines for efficient data management.

---

Copyright Â© 2003 Avaya Inc. All rights reserved.  
Avaya - Proprietary (Restricted) Solely for authorized persons having a need to know pursuant to Company instructions