Distributed Network Simulator (PDNS) is an extension
of  the  popular  ns-2  simulator.    The  Georgia  Tech 
Network Simulator (GTNetS) is a C++-based simulator
developed  at  Georgia  Tech.    Both  these  packages  are
downloadable  on  the  Web[16,  17].    We chose these
packages due to  our  intimate  familiarity with  them,
although  one could  choose  another  similar  parallel
simulator such as DaSSF[18].
The  simulators  allow  an  arbitrary  subject network
configuration to  be  specified  (topology,  normal  user 
traffic,  etc.)  and  initialized  accordingly. Normal  user 
initialized 
into 
behavior  or 
traffic  can  be  realized  as  end-applications  with either
customized  packet-level
aggregate
statistical  traffic.    Malware (worms)  can be  injected,
activated,  and/or 
this  network.
Complex  scripts  of  attack/detection/defense  scenarios
can then be enacted.  Several different types of outputs
can  be  obtained  from 
the  simulated  scenarios,
including  the obvious ones  such  as  the  number  of
infected  hosts at  any given  instant.    Since the  test-bed
is  a  time-controlled  software-based  simulation,  certain 
network  measurements  and statistics  can  be  obtained
from  the  scenario  execution,  which  are  difficult  or
impossible  to obtain  in  a  hardware  test-bed  (e.g., sub-
millisecond granularity  of  network  event  statistics,  or
an accurate  global  snapshot  of  entire  network). Both
simulators  boast  demonstrated  scalability,  simulating
several  million  TCP/IP  packet  transfers  in  a  single
wall-clock second.
We  have  developed  worm models in both PDNS
  Both  implementations  realize  the
and GTNetS. 
generalized worm model framework described next.
3.2 Models
As  a  generalization of  several  worm  types, we
.  This  model
chose  the  model  depicted  in
contains the following components:
(cid:120) Worm  Node:  This  represents  an  end-host  in  the
network  which  can  potentially  act  as  a  node
spreading the worm.
Figure 2
(cid:120) Vulnerable  Service:  This represents  the  flawed 
network  service  that  is  penetrated by  the worms  to 
infect the host machine. 
(cid:120) Shooting  Agents:  Once  a  worm node 
is
compromised, Shooting Agents take over the task of
propagating the worm from the current host to other
vulnerable hosts.
(cid:120) Backdoor  Agents:  These  agents  model 
the
backdoor  entry  which  is  opened  by  the  initial
infection on a vulnerable host. The backdoor is used
to transfer larger worm payload, if any.
Infected Node 
Shooting
Agent
1
Worm Node 
Vulnerable
Service
3
2
5
Backdoor
Agent
4
Shooting
Agent
Figure 2: Models of vulnerable worm nodes, agents and
their interaction sequence.
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:04 UTC from IEEE Xplore.  Restrictions apply. 
  We  start  the  simulation  by  marking  one  node  as 
infected.  A  shooting  agent  is  instantiated  which  starts 
generating random scans for spreading that infection. 
As  illustrated  in 
Figure  2
,  the  following  steps  are 
involved during the worm propagation. 
1. The shooting agent finds a random host and makes 
a  connection  to  that  host.  A  vulnerable  service  on 
the worm node responds to this connection request 
and  the  shooting  agent  transfers  a  payload  to  it.  
This  typically  models  a  worm’s  initial  step  (e.g., 
malicious URL sent by a worm to a web server). 
2. The infection triggers a backdoor port to be opened 
on the worm node. 
3. The  worm  payload  is  (attempted  to  be)  transferred 
to  the  worm  node by  initiating  a  connection  to  the 
opened backdoor port. 
4. Once  the  worm  payload  is  transferred  the  worm 
application  instantiates  a  shooting  agent  on  the 
worm node. This node is now infected and follows 
the preceding steps to propagate itself. 
5. The  original  worm  is  finished  with  this  infection 
attempt,  and  hence  goes  back  to  repeating  the 
preceding steps all over again.  An adjustable delay 
is modeled between infections at this step. 
3.2.1 Model Parameters 
Almost  every  aspect  of  the  preceding  model  is 
customizable  via  a  corresponding  parameter.    The 
following are examples of such parameters: 
(cid:120) Scan Rate: The scan rate in worm propagation could 
affect  the  overall  pattern  of  the  infection.  This 
parameter  is  configurable  in  our  system.    Multi-
threaded  worms  are  modeled  by  instantiating  one 
shooting agent per thread on each node. 
(cid:120) Topology:  The  worm  model  we  have  developed  is 
completely  independent  of  the  underlying  network 
topology.  One  could  deploy  our  model  in  any  kind 
of  network 
the 
vulnerable  nodes  and  attaching  the  corresponding 
agents to those nodes. 
topology  by 
just 
instantiating 
(cid:120) Background  traffic:  During  the  worm  propagation 
we inject normal  traffic going through the network. 
The amount and pattern of background traffic could 
affect the propagation of a worm. In our model, one 
could introduce background traffic in addition to the 
normal worm traffic. 
3.3 Unused IP Addresses 
In  the  Internet,  not  all  IP  addresses  allocated  to  an 
organization are used. “Holes” are typically present in 
the  address  space  covered  by  each  organization.  
Packets  destined  to  these  unused  addresses  usually 
travel  all  the  way  to  the  closest  router  of  the  unused 
address  and  then  get  dropped  at  that  router.    Such 
packet  drops  corresponding  to  unused  IP  addresses 
become  the  common  case  during  worm  propagation, 
and  hence  become  especially  important  to  model 
accurately.
When  worm  models  generate  random  IP  addresses 
during  their  scans,  packets  destined  to  unused  IP 
addresses should not be dropped at the source, because 
doing  so  will  not  correctly  model  congestion  effects 
that  would  otherwise  be  created  by  such  packets 
further down in the network. 
Unfortunately,  most  network  simulators  drop  the 
packets at the source if their destination is not present 
in  the  simulated  network  topology  (some  simulators 
are  even  worse  in  that  they  terminate  with  a  runtime 
error).  We were faced with this challenge, namely, to 
find a way to model this correctly. 
3.3.1 Maximal Prefix Match Scheme 
One way to deal with this is to modify the simulator 
to  route  the  packet  as  far  as  it  can,  similar  to  the 
Internet’s  operation. 
  While  an  entirely  accurate 
approach  would  be  to  model  the  Border  Gateway 
Protocol  (BGP),  modeling  BGP  in  fully  glory  is  an 
extremely  complex  endeavor.    A  compromise  is  to 
perform  “maximal  prefix  match”  on  addresses  –  route 
a  packet  towards  the  address  that  maximally  matches 
the  prefix  of  the  packet’s  destination  address[19].    A 
drawback  of  this  approach  is  that  it  requires  complex 
overhaul of the simulator.  Another disadvantage is that 
the  prefix  match  operation  potentially  needs  to  be 
performed  at  every  hop  along  the  packet  path, 
incurring substantial runtime overhead. 
3.3.2
Blackhole Scheme 
We  developed  a  novel  approach  that  is  an  efficient 
alternative  to  the  preceding  approach  and  avoids  both 
aforementioned  drawbacks.    At  every  intermediate 
router,  a  “blackhole”  end-host  is  instantiated  and 
attached  to  that  router.    The  blackhole  is  assigned  a 
unique  unused  IP  address  that  is  reachable  via  that 
router.    A  table  is  maintained  that  maps  the  subnets 
reachable  via  a  router  to  its  corresponding  blackhole 
end-host.  Instantiated (used) IP addresses simply map 
to  themselves.    When  a  source  generates  a  packet,  it 
first checks the table to determine the mapped address 
for the destination address.  For used IP addresses, the 
destination  remains  unchanged  since  they  map  to 
themselves  in  the  mapping  table.    For  unused  IP 
addresses,  the destination  is  replaced by  the  blackhole 
address  whose  subnet  maximally  matches  the  original 
destination  address.    The  blackhole  end-hosts  are 
configured to simply drop all packets destined to them. 
This  scheme  ensures  three  things:  (1)  it  forwards 
packets  to  the  blackhole  closest  to  the  unused  IP 
address  (2)  performs  the  maximal  prefix  mapping 
exactly  once  per  packet  (3)  the  lookup  into  the 
mapping table is optimized to reduce the table size by 
eliminating the identity mapping for used IP addresses 
if  the  addresses  happen  to  be  contiguous.    While  this 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:04 UTC from IEEE Xplore.  Restrictions apply. 
tree  hangs
off  each  core 
For our TCP worm experiments, we simulated a clique
network of core routers, mapped one per CPU.  A two-
level 
router,  with
parameterized  fan-out  at  each  level.    A  128,000 node
network  is  instantiated  on  128  CPUs,  with  a  tree  of
10x100  on  each  CPU.    Similarly,  a  64,000 node
network uses 64 CPUs, with 10x100 nodes mapped per
CPU.    The  1.28  million  node  network contains  a
100x100-node tree per CPU.
80
60
40
20
0
s
d
n
o
c
e
S
0
10
20
30
40
50
60
70
No. of infected nodes
Thousands
128,000 nodes
64,000 nodes
Figure 4: Propagation of a Code Red II-like worm in 
relatively smaller networks (packet-level GTNetS model).
Figure 3
plots  the propagation  of  the  TCP-based
worm.  This execution is among the largest TCP worm 
models  simulated  to  date  at  packet-level.
Figure 4
plots the propagation of the same TCP-based worm on
networks of 64,000 and 128,000 nodes.
3.5.2
UDP Worm Models
scheme  pushes  the  modeling burden  to  the  user,  this
was not  a  major problem  for  us,  since  the random  IP 
address generation is quite isolated and easy to modify
in our worm models.
3.4 Other Issues
3.4.1
Pre-allocation
An obvious runtime performance improvement is to
minimize  dynamic memory  allocation.    Buffers  could
be  pre-allocated  during  initialization  and  reused  at
runtime.  Pre-allocation was done at all possible place
to  reduce  runtime  overhead.    This  includes  pre-
allocation  of  a  sufficient number  of  TCP  agents  for 
modeling incoming and outgoing connections made by
the  worms. Without  pre-allocation,  this  overhead
could dominate the simulation runtime, because worm
models make heavy use of such agents for infections.
3.4.2
TCP vs. UDP Worm Models
to  model,  due 
We  have  modeled  both  TCP  and  UDP  versions of
the  worms  and  have  found  a  significant  difference
  TCP 
implementation  complexity  between  the  two.
worms  are  more  complex 
to
bookkeeping complexities in connection establishment,
and  the  need  for  creating  a  new  TCP  agent  object  for
every  new  random  connection.    Such  complexity  is
absent in UDP models, as it is sufficient to simply send
a  packet  with  the  worm  payload  and  easily  mark  the 
destination node  as  infected when  the packet  is
received (e.g., for modeling SQL Slammer).
3.5
3.5.1
Performance Study 
TCP Worm Models
s
e
d
o
n
d
e
t
c
e
f
n
i
f
o
.
o
N
3000
2500
2000
1500
1000
500
0