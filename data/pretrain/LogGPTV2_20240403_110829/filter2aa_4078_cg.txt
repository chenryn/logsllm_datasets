• A. 使用安全设计原则实施和管理工程过程
• B. 理解安全模型的基本概念(例如 ， 机密性、 完整性和多级模型)
• C. 根据系统安全评价模型选择控制与对策
• D. 理解信息系统的安全保障能力(例如， 内 存保护、 虚拟化、 信任平台模型、 接口、 故障
容错)
理解安全解决方案后面隐含的基本原则， 通常有助于缩小搜寻满足特定情况下、 特定安全需求
的 最佳控制方法的范围 。 在本章中， 我们将讨论安全模型 ， 包括状态机、 B巳ll-LaPadula， Biba、
Clark-Wilson、 Take-Grant 以及 Brewer 和 Nash 模型。 本章还将讨论政府和公司用于从安全性角度评
估信息系统的通用准则和其他方法， 并且着重讲述美国 国防部和国际性的安全评估标准。 最后， 我
们会讨论导致信息系统易受攻击的常见设计缺陷和其他安全相关问题。
决定如何保护系统安全的过程是十分困难且非常耗时的 。 在这一章中 ， 我们将会描述这个过程，
以及这个过程涉及的用于评估计算机系统的安全级别。 我们将首先介绍和解释用于描述信息系统安
全性的基本概念和术语， 并且对安全计算、 安全边界、 安全性和访问监控器以及内核代码进行讨论。
随后， 我们将通过安全模型来阐述如何实现访问和安全控制。 我们还会简要介绍如何对系统安全进
行分类(例如， 开放式或封闭式)， 描述一组用于确保数据机密性、 完整性和可用性的标准安全技术;
讨论安全控制 以及介绍一套标准的安全网络连接协议组 。
这个领域的额外内 容分布于不同的章节: 第6章 " 密码学与对称加密算法飞 第 7 章 "p阳 和密
码学应用 "、 第9章 " 安全脆弱性、 威胁和对策" 以及第 1 0 章 "物理安全需求飞 确保回顾了所有这
些章， 并对这个领域 内 的所有主题都有完整的认识。
8.1 使用 安全设计原则实施和管理工程过程
在每一个系统的开发阶段都应该考虑安全， 程序员应该努力为他们开发的每一个应用手固芋建立
1 88
CISSP 官方学 习指南(第 7 版)
安全， 提供更高层次的安全性给关键应用程序和那些处理敏感信息的应用程序。 在开发项 目 的早期
阶段考虑安全是非常重要的 ， 因为它比将安全添加到现有系统中更容易实现。 下面将讨论的一些基
本安全原则被应用在 实施和管理硬件或软件项 目 工程的早期过程中。
8.1.1 客体和主体
对安全系统中任何资源的访问控制涉及两个实体 。 主体是请求访问 资源的用户或进程。 访问的
意思是可以对资源进行读或写操作 。 客体是用户或进程想要访问的资源。 需要记住的是， 主体和客
体针对特定的访 问请求， 因此对于不同的同一资源既可以成为主体， 也可以在不同 的访问请求中成
为客体。
例如， 进程 A 可能向进程 B 请求数据， 为 了满足进程 A 的请求， 进程 B 必须 向进程 C 请求数
据 。 在这个例子中 ， 进程 B 不仅是第一个请求的客体， 而且也是第二个请求的主体， 如下所示:
第 一个请求 进程 A (主体) 进程 B (客体)
第 二个请求 进程 B (主体) 进程 C (客体)
这也是信任传递的一个例子。 信任传递的概念是: 如果 A 信任B井且B信任 C， 然后 A 通过
传递性继承信任 C。 就像数学方程: 如果 A = B ， B=C， 那么 A=C。 在前面的例子中 ， 当A请求
的数据从 B 而来， 然后 B 从 C 请求数据， A 接收的数据本质上是从 C 而来的。 信任传递存在严重
的安全问题， 因 为可能绕过 A 和 C 之间的约束或限制， 特别是如果 A 和 C 都支持和 B 进行交互的
话。 例如， 组织可能需要禁用对 FaceBook 或 YouTube 的访问 来提升雇 员 的生产力。 虽然雇员(A)不
能访问 既定的某些互联网网站(c)。 然而， 如果雇员能够访问 Web 代理、 VPN 或匿名服务 ， 就可以
将之作为一种手段来绕过本地网络限制 。 换句话说， 雇员(A)访问 VPN 服务(B)， 然后通过 VPN 服
务(B)， 可 以访 问屏 蔽的互联网服务(C); 因 此 A 可 以通过 B ， 利用信任传递漏洞访 问 C。
8. 1 .2 封闭式系统和开放式系统
可 以根据下列两种不同 的理念来设计和构建系统: 封闭式系统被设计用于与较小范围 内 的其他
系统协同工作， 通常所有系统都来自相同的制造厂商。 封闭式系统的标准一般是专有的， 通常不对
外公开。 另 一方面， 开放式系统被设计为使用统一的行业标准。 这些开放式系统比较容易与来自 不
同 制造厂商但支持相 同标准的系统集成在一起。
封闭式系统很难与不同的系统集成在一起 ， 但是它们更为安全。 封闭式系统通常由专用硬件和
软件组成， 这些软硬件是不符合行业标准的。 缺乏容易集成的特点， 意味着针对许多普通系统组件
的攻击可能不起作用 ， 或者这些攻击需要经过定制才能成功。 许多情况中 ， 攻击封闭式系统比攻击
开放式系统更难。 许多具有己知脆弱性的软件和硬件组件在封闭式系统中可能不存在 。 除了封闭式
系统不存在己知的易受攻击的组件之外， 要想、发动一次成功的攻击往往需要对具体 目 标系统进行比
较深入的了解。
一般来说， 一个开放式系统与其他开放式系统相集成较为容易 。 例如， 使用 Microsoft Windows
Se凹er 的计算机、 使用 Linux 的计算机和使用 Macintosh 的计算机之间很容易建立 LA1'词。 虽然这三
种计算机使用不 同的操作系统， 而且至少代表着三种不同的硬件体系结构， 但是它们都支持行业标
准， 并使得网络通信(或其他通信)变得容易 。 不过， 这种便利的特性总是伴随着很高的代价。 因 为
标准的通信组件被并入上述三种开放式系统， 所 以存在许多发动攻击的入口点和方法。 通常， 这种
第B章 安全模型的原则 、 设计和功能
系统的开放性使它们更容易 受到攻击， 并且广泛的可用性使攻击者能够查找(甚至实践)大量的潜在
目 标。 此外， 开放式系统 比封闭式系统的使用程度更为普及， 也更容易引起攻击者的关注。 研究基
本破坏技术的攻击者在开放式系统中查找到的 目 标比在封闭式系统中查找到的目标要多 。 潜在 目 标
的更大 "市场" 往往意味着对开放式系统应给予更多的关注。 不可否认的是， 攻击开放式系统的共
享知识和经验远远超过攻击封闭式系统的相关知识和经验。
开源与闭源
记住开源和闭源系统之间 的 区别是有用 的 。 开源解决方案是指源代码和其他内部逻辑对公众开
放， 闭 源解决方案是指源代码和其他内 部逻辑对公众是隐藏的。 开源解决方案往往依赖于公众的检
查和审计， 并随着时间 的推移改进产品。 闭源解决方案是依赖于供应商/程序 员 ， 并随着时间 的推移
改进产品。 开源和闭 源解决方案都可供出售或不收费， 但长期的商用通常意味着闭 源。 然而， 闭 源
千元Z萄往往是通过厂商被迫地或通过反编译进行披露。 前者通常是对道德和法律的违背， 而后者是道
德逆向 工程或 系 统分析的标准元素 。
也有这样的情况， 闭 源程序既可是开放式系统， 也可以是封闭 式系统; 对于开源程序也同 样
女口业忆。
8.1 .3 用 于确保机密性、 完整性和可用性的技术
为 了保证数据的机密性、 完整性和可用性， 必须确保对数据进行访问 的所有组件都是安全的和
工作状态 良好的。 软件设计人员使用不 同的技术来确保所设计的程序只完成要求它做的事情， 而不
会多做其他事情。 假如某个程序对正在被另一个程序使用的 内存区域进行数据读写操作， 那么第一
个程序实际上违反了全部的三个安全宗 旨 : 机密'性、 完整性以及可用性。 如果受影响的手里芋正在处
理敏感的或秘密的数据， 那么数据的机密性将不再得到保证。 如果数据通过不可预测的方式被重写
或更改(多个读取者和写入者不经意间访问 同一共享数据时出现的常见问题)， 那么就不能保证完整
性。 此外， 如果数据的更改导致数据损坏或完全丢失， 那么数据在今后也变得不可用。 虽然接下来
要讨论的概念全部与软件程序有关， 但这些概念也都适用于所有的安全领域。 例如， 物理限制措施
能够保证对硬件的所有物理访 问 都是受控的。
1 . 限制
软件设计人员使用进程限制来约束程序的操作。 简单来讲， 进程限制允许进程只能在确定的 内
存地址和资源中读取和写入数据。 这就是常说的沙箱。 操作系统或其他一些安全组件不允许非法的
读/写请求。 如果进程试图执行的动作超出 了为其授予的权限 ， 那么动作会被拒绝， 并且系统将采取
进一步的行动， 例如记录违法行为的 日 志。 必须符合更高安全性评级的系统通常记录所有违规行为
以及通过某些具体方式做出 的响应。 一般情况下， 违规的进程会被终止。 限制可以在操作系统中进
行(如通过进程隔离和保护)， 也可通过限制应用程序或服务(例如， www.sandboxie.com 的 Sandboxie)
的使用来进行， 或通过虚拟化或虚拟机(如 VMware 或 Oracle 的 VirωalBox)解决方案来进行 。
2. 界限
在系统上运行的每一个进程都被分配了 一个授权级别。 授权级别 告知操作系统进程可以执行哪
些操作。 在 比较简单的系统中 ， 可能只存在两个授权级别: 用户和内核。 授权级别告知操作系统该
1 89
CISSP 官方学 习指南(第 7 版)
如何为进程设定界限 。 进程的界限由对进程可 以访问的内存和 资源所设置的限制组成。 进程在界限
所划定的区域之内。 在大多数系统中， 这些界限为每个进程划分其使用 的 内存逻辑区域。 操作系统
负责实施这些逻辑界限并且不准许其他进程访问 。 更安全的系统要求从物理上限制进程 。 物理界限
要求每个被限制的进程所运行的内存区域与其他受限进程的 内存区域， 通过物理方式隔开而不仅仅
使用相同 内存空间中的逻辑界限。 对内存实施物理界限可能非常昂贵， 但是也比逻辑界限更为安全。
3. 隔离
当通过实施访问界限对进程进行限制时， 进程就运行在隔离状态中 。 进程隔离能够确保任何行
为只影响与隔离进程有关的内存和资源。 隔离用来保护操作环境、 操作系统的 内核和其他独立的应
用程序 。 隔离是稳定操作系统的重要组成部分之一。 隔离能防止某个应用草里芋访问 只属于另一个应
用程序的内存或资源， 无论是好意的还是恶意的。 操作系统可以提供中间服务， 如剪切、 粘贴和资
源共享(如键盘 、 网络接 口 和存储设备访 问)。
上述三个概念(限制 、 界限和隔离)使安全程序和操作系统的设计工作变得更为困难， 但能使实
现更安全的系统成为可能 。
8. 1 .4 控制
为 了确保系统的安全性， 必须只有经过授权的主体才允许访问客体。 控制使用访问规则来限制
主体对客体的访问。 访问规则声明 了每个主体相对应的合法客体。 进一步说， 客体对某一种访问 类
型来说可能是合法的， 但是对另一种访问类型来说可能是非法的。 针对文件的访问 是一种常见的控
制 。 为了保护文件不被修改， 可 以将文件设置为对大多数用 户来说是只读文件， 而对很少一些具有
文件修改权限的用户来说是可读写文件。
1 90
有两种控制: 强制访问控制和 自 主访问控制 ， 分别被称为 MAC(Mandatory A∞ess Control)和
DAC(Discretionary Acc棚 Control)。 在强制访问控制中， 主体和客体的静态特性被用于确定访问 的容
许性。 每个主体所具有的特性， 定义了其访问资源的许可或授权。 每个客体所具有的特性， 定义了
其分类。 不同类型的安全方法 以不同的方式为资源分类。 例如， 如果安全系统能够找出允许主体 A
所在许可级别的主体访问 客体 B 所在分类级别的客体的规则 ， 那么主体 A 就被允许访问 客体 B。 这
被称为规则型访问控制(Rule-Based Access Control ， RBAC)。 预定义的规则中说明了哪种主体能够访
问 哪种客体。
自 主访问控制与强制访问控制 的不同之处在于: 主体具有一些定义访问 客体的能力。 在受到限
制 的情况下， 自 主访问控制允许主体根据需要定义访问客体的列表。 这个访问控制列表作为动态的
访问规则组， 并且主体能够对其进行修改。 更改己实施的限制 ， 通常与主体的身份有关 。 根据主体
的身份， 可 以 允许主体增加或修改访 问 客体的规则 。