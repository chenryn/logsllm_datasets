Maximum match is normally at least linear in the num-
ber of inputs in theory. PIM, and then iSLIP, intro-
duced new algorithms for maximal match that com-
puted a match in nanoseconds and worked very well
in practice.
While PIM and iSLIP work well for small switches
and unicast traﬃc, Jon Turner showed how to build
scalable broadcast switches [28].
Between algorithmics for fast switching, IP Lookups,
and packet scheduling, there was generally a sense by
the 2000s that people knew how to build fast routers.
There was Cisco’s Catalyst 6K (the ﬁrst router with
a crossbar), Juniper’s M40 (arguably the ﬁrst router to
use ASICs for forwarding), and Cisco’s GSR (one of the
ﬁrst commercial routers to avoid head-of-line blocking).
Better still, the solutions scaled with link speeds. Sili-
con Valley, with a little help from academia, had ﬁgured
out routers. Was there nothing left for router algorith-
mics?
4. MEASUREMENT ALGORITHMICS
In the early 2000, a new inﬂection point arrived for
routers. The perils that accompany success beset the
Internet in terms of large scale attacks such as worms
and Denial-of-Service attacks. Compounding these tac-
tical issues was the strategic diﬃculty of ﬁnding traf-
ﬁc estimates to provision networks. It turns out that
both detecting security attacks and ﬁner-grain mea-
surement require detecting patterns across packets, a
milieu change from standard algorithmics that only de-
tects patterns (such as preﬁxes) within packets.
Naive methods require keeping massive amount of
state across packets. However, theoretical bounds show
that randomized algorithms can do much better. To il-
lustrate measurement algorithmics as a conﬂuence (Fig-
ure 8) between randomized algorithms and algorith-
mics, consider the following algorithm called Sample-
and-Hold, which diﬀers from standard sampling, as em-
ployed in say Cisco’s NetFlow [1].
Consider the problem of estimating the traﬃc sent by
the heavy “elephant” ﬂow such as F 1 without keeping
track of potentially millions of “mice” ﬂows like F 3.
The basic idea in Sample-and-Hold [12] is that ordinary
sampling is used to decide whether a ﬂow like F 1 is
sampled. But once F 1 is sampled, it is placed in a hash
VOQs Maximal Match chance. Next, researchers have gone beyond heavy-
hitter measurements to obtain more complex estimates
including ﬂow distributions [22] using small space.
Finally, super-spreader algorithms [32] detect more
complex security predicates in streaming fashion such
as sources that send packets to a large number of des-
tinations, sometimes indicative of an intruder trying to
break into any compromised machine. Some aspects of
these ideas are in chips and software; for example, Cisco
fabricated a chip based on automated worm detection
technology [27]. Despite this, I do not think that mea-
surement algorithmics is mainstream as yet.
5. OTHER NETWORKING CONFLUENCES
Conﬂuences in networking are not new. Examples
of past conﬂuences with the impacting ﬁeld shown in
parentheses include queuing networks (Queuing The-
ory), Pricing the Internet (Economics), and Network
Security (Computer Security). More current conﬂu-
ences include Data Center Networks (High Performance
Computing) and Wireless Network Coding (Informa-
tion Theory).
One can argue that each conﬂuence was triggered
by an inﬂection point such as the need to understand
packet delays in the early Internet (queuing networks),
the shift to the commercial Internet (Internet Pricing),
the advent of large scale attacks and cyber-crime (Net-
work Security), the need for large scale data centers to
support Cloud Services (Data Center Networks), and
the advent of Software Deﬁned Radios together with the
dearth of wireless spectrum (Wireless Network Coding).
Each introduces a milieu change from their impact-
ing ﬁelds: networks of queues, the reduced importance
of marginal costs in Internet economics, the ability to
rapidly amplify a security attack, the need to scale clus-
ters to hundreds of thousands of nodes, and the possibil-
ity of embracing wireless interference instead of shun-
ning it. Each conﬂuence has produced new ideas in-
cluding the independence assumption [20], edge pric-
ing [26], ecosystem analysis [23], data center transports
with lower latency than TCP [7], and Zig Zag coding
to recover information in the face of collisions [16].
An area that excites me personally is what several
researchers call “Network Veriﬁcation”. Nick McKe-
own’s SIGCOMM Keynote two years ago, described the
opportunity in network veriﬁcation by comparing it to
hardware and software veriﬁcation [24]. Network ver-
iﬁcation can also be viewed as a conﬂuence between
Programming Languages and Networking as shown in
Figure 9.
The inﬂection point that makes Network Veriﬁcation
compelling is the emergence of cloud services. Stud-
ies [35] have shown that network failures are a signiﬁ-
cant and debilitating source of operational expenditures
that can impact the economic viability of such services.
Figure 7: Measurement Algorithmics as a Conﬂuence
table (Flow Table) and all subsequent traﬃc sent by F 1
is watched.
Unlike sampling, the uncertainty in the measurement
√
of F 1 occurs only at the start and this translates into a
M to 1/M , where
reduction of standard error from 1/
M is the amount of memory available for the ﬂow table.
M is typically limited, being high speed on-chip mem-
ory. Hence, a reduction of error from 1/100 to 1/10, 000
is appreciable. Of course, the real edge of Sample-and-
Hold over sampling occurs because of a milieu change:
the router gets to see every packet. By contrast, the
Gallup Poll ﬁnds it expensive to survey individuals, and
hence must resort to standard sampling.
Figure 8: Sample-and-Hold samples ﬂows but then
keeps track of all subsequent packets for each sampled
ﬂow
Sample-and-Hold was ﬁrst described in a very nice
paper by Gibbons and Mathias on databases [15]. We [12]
did, however, add a new analysis and made other changes
to ﬁt the networking mileu.
Measurement and security algorithmics have been well
developed by many researchers. The following is a sam-
ple of three pieces of work I like. First, Elephant traps [17]
improve sample-and-hold by periodically removing mice
ﬂows that have drifted into the ﬂow table by random
Algorithmics Randomized Algs  Security Algorithmics  Attacks, worms Within Across packets Sampling to Sample & Hold  F1 F1 F1 F1 F2 F1 3 F2  1 F1 F3 Uncertainty only at start  Sampling Flow table Figure 9: Network Veriﬁcation as a Conﬂuence
On the other hand, the ﬁeld of programming language
has produced a variety of tools from debuggers to static
checkers. Network veriﬁcation seeks to ﬁnd analogous
tools for networks.
The milieu changes in going from programs to net-
works. Networks can be regarded as programs that
transform packets, and such network “programs” typi-
cally have simple control ﬂow. However, the large pos-
sible space of packet headers complicates the task com-
pared even to large-scale software such as operating
systems. New ideas have emerged in this conﬂuence
including new forms of compression to compactly rep-
resent the header space [19, 18], the automatic synthe-
sis of forwarding rules at routers [17], the extension of
the notion of test coverage to covering links and router
queues [35], and the use of causality in network debug-
ging [13].
I started with life in the fast lane and I ended in the
2000s with measurement algorithmics and security al-
gorithmics both of which have been well studied. Are
there any unexplored directions for network algorith-
mics? One I ﬁnd promising, a conﬂuence between net-
work algorithmics and virtualization as depicted in Fig-
ure 10, was brought to my attention by Daniel Fire-
stone, Ramana Kompella, and Sylvia Ratnasamy.
The milieu change is the placement of network func-
tions [2] in virtual machines running on multiple cores
instead of on pipelined router hardware, once again
caused by the inﬂection point of cheap cloud services.
Examples of transformed ideas in this space include re-
thinking TCP performance [14] in virtualized environ-
ments and the Route Bricks approach to software router
design [9].
6. CONCLUSION
Network algorithmics has played out from a focus
on speed and scale in the 90s to a focus on measure-
ment and security algorithmics in the 2000s. A conﬂu-
ence that suggests new problems in network algorith-
Figure 10: Networking using Virtual Machines as a
Conﬂuence
mics may arise from the inﬂection point caused by net-
work processing in software on virtual machines. Be-
sides current conﬂuences in networking such as Data
Center Networking and Wireless Network Coding, Net-
work Veriﬁcation is a promising new conﬂuence.
Conﬂuence thinking is useful because it allows a re-
searcher to discern a new direction, ﬁnd a unifying theme,
and produce research that balances beauty (via trans-
formed ideas) and impact (via the inﬂection point). The
milieu change allows rethinking ideas in both the exist-
ing and impacting ﬁelds to produce research ideally of
interest to both communities. Of course, this begs the
question: are there more systematic techniques to use
conﬂuence thinking in research? The slides published
online [30] have some hints such as “embrace collisions”
and “seek coherence”.
This article began with a review of network algorith-
mics but gradually segued to a framework for thinking
about interdisciplinary research. Perhaps the ultimate
excitement is not making things fast, but the thrill of
discerning a new ﬁeld with ideas to explore and impact
that potentially awaits. I hope seeking conﬂuences will
provide readers with that same rush.
7. REFERENCES
[1] Netﬂow. http://en.wikipedia.org/wiki/NetFlow.
[2] Network Functions Virtualization http://en.wikipedia.
org/wiki/Network_Functions_Virtualization.
[3] Remote direct memory access. http:
//en.wikipedia.org/wiki/Remote_direct_memory_access.
[4] V. Jacobson’s notes on TCP header prediction.
http://yangchi.me/
v-jacobsons-notes-on-tcp-header-prediction.html.
[5] Virtual Interface Architecture. http://en.wikipedia.org/
wiki/Virtual_Interface_Architecture.
[6] Zero-copy. http://en.wikipedia.org/wiki/Zero-copy.
[7] M. Alizadeh and et al. Data center TCP (DCTCP). In
Proceedings of ACM SIGCOMM 2010.
[8] T. Anderson, S. Owicki, J. Saxe, and C. Thacker.
High-speed switch scheduling for local-area networks. ACM
Trans. Comput. Syst., 11(4), Nov. 1993.
[9] M. Dobrescu and et al. Routebricks: Exploiting parallelism
to scale software routers. Proceedings of SOSP ’09.
Networking Programming Languages Programs networks   Cloud services 1 Solution to many, SAT to AllSAT  Algorithmics Virtualization  Network functions  moved to Virtual Switch Improving TCP throughput affected by virtualization Pipelined HW to multicore CPUs with VMs  [10] P. Druschel and L. Peterson. Fbufs: A high-bandwidth
[23] K. Levchenko and et al. Click trajectories: End-to-end
cross-domain transfer facility. SIGOPS Oper. Syst. Rev.,
27(5), Dec. 1993.
analysis of the spam value chain. In Proceedings of the 2011
IEEE Symposium on Security and Privacy.
[11] P. Druschel, L. Peterson, and B. Davie. Experiences with a
[24] N. McKeown. Mind the gap. http://yuba.stanford.edu/
high-speed network adaptor: A software perspective.
SIGCOMM Comput. Commun. Rev., 24(4), Oct. 1994.
~nickm/talks/Sigcomm%202012%20POSTED.ppt.
[25] N. McKeown. iSLIP: A scheduling algorithm for
[12] C. Estan and G. Varghese. New directions in traﬃc
measurement and accounting. SIGCOMM Comput.
Commun. Rev., 32(4), Aug. 2002.
[13] R. Fonseca, G. Porter, R. Katz, S. Shenker, and I. Stoica.
X-trace: A pervasive network tracing framework. In
Proceedings of the 4th USENIX NSDI, 2007.
[14] S. Gamage, R. Kompella, D. Xu, and A. Kangarlou.
Protocol responsibility oﬄoading to improve TCP
throughput in virtualized environments. ACM Trans.
Comput. Syst., 31(3), Aug. 2013.
input-queued switches. IEEE/ACM Trans. Netw., 7(2),
Apr. 1999.
[26] S. Shenker, D. Clark, D. Estrin, and S. Herzog. Pricing in
computer networks: Reshaping the research agenda.
SIGCOMM Comput. Commun. Rev., 26, 1996.
[27] S. Singh, C. Estan, G. Varghese, and S. Savage. Automated
worm ﬁngerprinting. In Proceedings of the 6th Conference
on Symposium on Operating Systems Design &
Implementation, 2004.
[28] J. Turner. Design of a broadcast packet switching network.
[15] P. Gibbons and Y. Matias. New sampling-based summary
In Proceedings of Infocom 1986.
statistics for improving approximate query answers. In
Proceedings of SIGMOD 1998.
[16] S. Gollakota and D. Katabi. Zigzag decoding: Combating
hidden terminals in wireless networks. In Proceedings of
ACM SIGCOMM 2008.
[17] N. Kang, Z. Liu, J. Rexford, and D. Walker. Optimizing
the ”one big switch” abstraction in software-deﬁned
networks. In Proceedings of the Ninth ACM Conference on
Emerging Networking Experiments and Technologies, 2013.
[18] P. Kazemian, G. Varghese, and N. McKeown. Header space
analysis: Static checking for networks. In Proceedings of the
9th USENIX Conference on Networked Systems Design
and Implementation, 2012.
[19] A. Khurshid, W. Zhou, M. Caesar, and N. Godfrey.
Veriﬂow: Verifying network-wide invariants in real time. In
Proceedings of the First Workshop on Hot Topics in
Software Deﬁned Networks, 2012.
[20] L. Kleinrock. Theory, Volume 2, Computer Applications.
Wiley-Interscience, 1975.
[21] N. Kronenberg, H. Levy, and W. Strecker. VAXcluster: A
closely-coupled distributed system. ACM Trans. Comput.
Syst., 4(2), May 1986.
[22] A. Kumar, M. Sung, J. Xu, and J. Wang. Data streaming
algorithms for eﬃcient and accurate estimation of ﬂow size
distribution. SIGMETRICS Perform. Eval. Rev.
[29] P. van Emde Boas. Preserving order in a forest in less than
logarithmic time. In Proceedings of the 16th Annual
Symposium on Foundations of Computer Science, SFCS
’75, 1975.
[30] G. Varghese. Life in the fast lane. http://conferences.
sigcomm.org/sigcomm/2014/doc/slides/2.pdf.
[31] G. Varghese. Network Algorithmics. Morgan-Kaufman,
2004.
[32] S. Venkataraman, D. Song, P. Gibbons, and A. Blum. New
streaming algorithms for fast detection of superspreaders.
In in Proceedings of 15th IEEE Symposium on High
Performance Interconnects, 2007.
[33] T. von Eicken and et al. Active messages: A mechanism for
integrated communication and computation. SIGARCH
Comput. Archit. News, 20(2), Apr. 1992.
[34] M. Waldvogel, G. Varghese, J. Turner, and B. Plattner.
Scalable high speed ip routing lookups. In Proceedings of
the ACM SIGCOMM ’97, 1997.
[35] H. Zeng, P. Kazemian, G. Varghese, and N. McKeown.
Automatic test packet generation. In Proceedings of the 8th
International Conference on Emerging Networking
Experiments and Technologies, 2012.