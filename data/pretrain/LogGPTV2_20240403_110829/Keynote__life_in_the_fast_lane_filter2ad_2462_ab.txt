### Maximum Match and Scalable Switching Algorithms

In theory, the maximum match is typically at least linear in the number of inputs. PIM (Parallel Iterative Matching) and iSLIP (Iterative Scheduling with Limited Instantaneous Parallelism) introduced new algorithms for maximal matching that could compute a match in nanoseconds, demonstrating excellent performance in practical applications.

While PIM and iSLIP are effective for small switches and unicast traffic, Jon Turner proposed scalable broadcast switch designs [28]. These innovations addressed the limitations of existing switching algorithms, particularly in handling larger and more complex network environments.

### Fast Switching and Router Design

By the 2000s, significant advancements were made in the areas of fast switching, IP lookups, and packet scheduling. Key developments included:

- **Cisco’s Catalyst 6K**: The first router to use a crossbar switch.
- **Juniper’s M40**: Arguably the first router to employ ASICs (Application-Specific Integrated Circuits) for forwarding.
- **Cisco’s GSR (Gigabit Switch Router)**: One of the first commercial routers to avoid head-of-line blocking.

These solutions not only improved performance but also scaled well with increasing link speeds. Silicon Valley, with contributions from academia, had effectively solved many of the challenges in router design. However, this raised the question: Was there still room for innovation in router algorithmics?

### Measurement Algorithmics

In the early 2000s, a new challenge emerged for routers: the need to detect and mitigate large-scale attacks such as worms and Denial-of-Service (DoS) attacks. Additionally, there was a strategic need for finer-grained traffic measurement to provision networks. This required detecting patterns across packets, a significant departure from traditional algorithmics, which focused on detecting patterns within individual packets.

#### Naive Methods and Randomized Algorithms

Naive methods for detecting these patterns require maintaining a massive amount of state across packets, which is impractical. Theoretical bounds, however, show that randomized algorithms can achieve better results. For example, the **Sample-and-Hold** algorithm [12] differs from standard sampling techniques, such as those used in Cisco’s NetFlow [1].

**Sample-and-Hold** works as follows:
- **Sampling Decision**: Initially, it uses ordinary sampling to decide whether a flow, such as F1, should be sampled.
- **State Maintenance**: Once a flow like F1 is sampled, it is placed in a hash table, and all subsequent traffic from F1 is monitored.

This approach reduces the uncertainty in measurements, translating into a significant reduction in standard error. For instance, if the available memory for the flow table is M, the error can be reduced from 1/√M to 1/M. This is particularly useful given that M is typically limited to high-speed on-chip memory.

### Security and Complex Estimations

Researchers have extended the Sample-and-Hold approach to obtain more complex estimates, including flow distributions [22], using minimal space. Additionally, super-spreader algorithms [32] have been developed to detect more complex security predicates in streaming data, such as sources sending packets to a large number of destinations, which may indicate an intruder attempting to compromise machines.

Some of these ideas have been implemented in hardware and software. For example, Cisco developed a chip based on automated worm detection technology [27]. Despite these advancements, measurement algorithmics has not yet become mainstream.

### Other Networking Confluences

Confluences in networking are not new. Examples include:
- **Queuing Networks (Queuing Theory)**
- **Pricing the Internet (Economics)**
- **Network Security (Computer Security)**
- **Data Center Networks (High Performance Computing)**
- **Wireless Network Coding (Information Theory)**

Each confluence was triggered by an inflection point, such as the need to understand packet delays in the early Internet, the shift to the commercial Internet, the advent of large-scale attacks, the need for large-scale data centers, and the scarcity of wireless spectrum.

### Network Verification

An exciting area is "Network Verification," which can be seen as a confluence between Programming Languages and Networking. Nick McKeown's SIGCOMM keynote highlighted the potential of network verification by comparing it to hardware and software verification [24].

The inflection point making network verification compelling is the emergence of cloud services. Studies [35] have shown that network failures significantly impact operational expenditures and the economic viability of cloud services. Network verification seeks to develop tools analogous to those in programming, such as debuggers and static checkers, to ensure the correctness and reliability of network configurations.

### Virtualization and Network Algorithmics

A promising direction is the confluence between network algorithmics and virtualization. This involves placing network functions in virtual machines running on multiple cores, rather than on pipelined router hardware. This shift is driven by the availability of cheap cloud services.

Examples of transformed ideas in this space include:
- **Rethinking TCP Performance** in virtualized environments [14]
- **Route Bricks Approach** to software router design [9]

### Conclusion

Network algorithmics has evolved from a focus on speed and scale in the 1990s to a focus on measurement and security in the 2000s. New confluences, such as network processing in software on virtual machines, suggest new problems and opportunities. Besides current confluences like Data Center Networking and Wireless Network Coding, Network Verification is a promising new area.

Confluence thinking is valuable as it helps researchers identify new directions, find unifying themes, and produce research that balances beauty and impact. The milieu change allows for rethinking ideas in both existing and impacting fields, potentially benefiting both communities. 

This article began with a review of network algorithmics but gradually transitioned to a framework for interdisciplinary research. The ultimate excitement lies not just in making things fast, but in discerning new fields with ideas to explore and impacts that await. I hope that seeking confluences will provide readers with the same thrill.

### References

[1] NetFlow. http://en.wikipedia.org/wiki/NetFlow.
[2] Network Functions Virtualization. http://en.wikipedia.org/wiki/Network_Functions_Virtualization.
[3] Remote Direct Memory Access. http://en.wikipedia.org/wiki/Remote_direct_memory_access.
[4] V. Jacobson’s notes on TCP header prediction. http://yangchi.me/v-jacobsons-notes-on-tcp-header-prediction.html.
[5] Virtual Interface Architecture. http://en.wikipedia.org/wiki/Virtual_Interface_Architecture.
[6] Zero-copy. http://en.wikipedia.org/wiki/Zero-copy.
[7] M. Alizadeh et al. Data center TCP (DCTCP). In Proceedings of ACM SIGCOMM 2010.
[8] T. Anderson et al. High-speed switch scheduling for local-area networks. ACM Trans. Comput. Syst., 11(4), Nov. 1993.
[9] M. Dobrescu et al. Routebricks: Exploiting parallelism to scale software routers. Proceedings of SOSP ’09.
[10] P. Druschel and L. Peterson. Fbufs: A high-bandwidth cross-domain transfer facility. SIGOPS Oper. Syst. Rev., 27(5), Dec. 1993.
[11] P. Druschel, L. Peterson, and B. Davie. Experiences with a high-speed network adaptor: A software perspective. SIGCOMM Comput. Commun. Rev., 24(4), Oct. 1994.
[12] C. Estan and G. Varghese. New directions in traffic measurement and accounting. SIGCOMM Comput. Commun. Rev., 32(4), Aug. 2002.
[13] R. Fonseca et al. X-trace: A pervasive network tracing framework. In Proceedings of the 4th USENIX NSDI, 2007.
[14] S. Gamage et al. Protocol responsibility offloading to improve TCP throughput in virtualized environments. ACM Trans. Comput. Syst., 31(3), Aug. 2013.
[15] P. Gibbons and Y. Matias. New sampling-based summary statistics for improving approximate query answers. In Proceedings of SIGMOD 1998.
[16] S. Gollakota and D. Katabi. Zigzag decoding: Combating hidden terminals in wireless networks. In Proceedings of ACM SIGCOMM 2008.
[17] N. Kang et al. Optimizing the “one big switch” abstraction in software-defined networks. In Proceedings of the Ninth ACM Conference on Emerging Networking Experiments and Technologies, 2013.
[18] P. Kazemian et al. Header space analysis: Static checking for networks. In Proceedings of the 9th USENIX Conference on Networked Systems Design and Implementation, 2012.
[19] A. Khurshid et al. VeriFlow: Verifying network-wide invariants in real time. In Proceedings of the First Workshop on Hot Topics in Software Defined Networks, 2012.
[20] L. Kleinrock. Theory, Volume 2, Computer Applications. Wiley-Interscience, 1975.
[21] N. Kronenberg et al. VAXcluster: A closely-coupled distributed system. ACM Trans. Comput. Syst., 4(2), May 1986.
[22] A. Kumar et al. Data streaming algorithms for efficient and accurate estimation of flow size distribution. SIGMETRICS Perform. Eval. Rev.
[23] K. Levchenko et al. Click trajectories: End-to-end analysis of the spam value chain. In Proceedings of the 2011 IEEE Symposium on Security and Privacy.
[24] N. McKeown. Mind the gap. http://yuba.stanford.edu/~nickm/talks/Sigcomm%202012%20POSTED.ppt.
[25] N. McKeown. iSLIP: A scheduling algorithm for input-queued switches. IEEE/ACM Trans. Netw., 7(2), Apr. 1999.
[26] S. Shenker et al. Pricing in computer networks: Reshaping the research agenda. SIGCOMM Comput. Commun. Rev., 26, 1996.
[27] S. Singh et al. Automated worm fingerprinting. In Proceedings of the 6th Conference on Symposium on Operating Systems Design & Implementation, 2004.
[28] J. Turner. Design of a broadcast packet switching network. In Proceedings of Infocom 1986.
[29] P. van Emde Boas. Preserving order in a forest in less than logarithmic time. In Proceedings of the 16th Annual Symposium on Foundations of Computer Science, SFCS ’75, 1975.
[30] G. Varghese. Life in the fast lane. http://conferences.sigcomm.org/sigcomm/2014/doc/slides/2.pdf.
[31] G. Varghese. Network Algorithmics. Morgan-Kaufman, 2004.
[32] S. Venkataraman et al. New streaming algorithms for fast detection of superspreaders. In Proceedings of 15th IEEE Symposium on High Performance Interconnects, 2007.
[33] T. von Eicken et al. Active messages: A mechanism for integrated communication and computation. SIGARCH Comput. Archit. News, 20(2), Apr. 1992.
[34] M. Waldvogel et al. Scalable high speed IP routing lookups. In Proceedings of the ACM SIGCOMM ’97, 1997.
[35] H. Zeng et al. Automatic test packet generation. In Proceedings of the 8th International Conference on Emerging Networking Experiments and Technologies, 2012.