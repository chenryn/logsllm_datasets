After evaluating template trees, the analysis knows for
each call site of an injection API the set of templates
that represent the string values passed to the call. If all
templates for a particular call site are constant strings,
i.e., there are no unknown parts in the template, then
the analysis concludes that the call site is statically safe.
For such statically safe call sites, no runtime checking is
required. In contrast, the analysis cannot statically ensure
the absence of injections if the templates for the call site
contain unknown values. In this case, checking is deferred
to runtime, as explained in Section VI.
For our running example, the analysis determines that
the eval call site at line 10 of Figure 1 is statically safe
because both possible values passed to the function are
known. In contrast, parts of the strings that may be passed
to exec at line 7 are unknown and therefore the check
whether an injection happens is deferred to runtime.
VI. Dynamic Enforcement
For call sites where the values passed to the injection
API cannot be statically determined, we provide a dynamic
enforcement mechanism. The goal of this mechanism is to
reject values found to be dangerous according to a policy.
Intuitively, we want to prevent values that expand the
template computed for the call site in a way that is likely
to be unforeseen by the developer. Our approach achieves
this goal in two steps:
1) Before executing the module, the approach transforms
the statically extracted set of templates for a call site
into a set of partial abstract syntax trees (PAST) that
represents the expected structure of benign values.
The trees are partial because the unknown parts of
the template are represented as unknown subtrees.
2) While executing the module, the approach parses the
runtime value passed to an injection API into an AST
and compares the PASTs from step 1 against the AST.
The runtime mechanism enforces a policy that ensures
that the runtime AST is (i) derivable from at least one
of the PASTs by expanding the unknown subtrees and
(ii) these expansions remain within an allowed subset
of all possible AST nodes.
The following two subsections present the two steps of the
dynamic enforcement mechanism in detail.
A. Synthesizing a Tree-based Policy
Deﬁnition 3 (Partial AST). The partial AST (PAST)
for a template of an injection API call site is an acyclic,
connected, directed graph (N ,E) where
• Nsub ⊆ N is a set of nodes that each represent a
subtree of which only the root node nsub ∈ Nsub is
known, and
• (N ,E) is a tree that can be expanded into a valid AST
of the language accepted by the API.
For example, Figure 9a shows the PAST for the tem-
plate td1 from Figure 8. For this partial tree, Nsub =
{HOLE}, i.e., the hole node can be further expanded, but
all the other nodes are ﬁxed.
To synthesize the PAST for a template, the approach
performs the following steps. At ﬁrst, it instantiates the
template by ﬁlling its unknown parts with simple string
values known to be benign. The set of known benign
values must be deﬁned only once for each injection API.
Figure 10 shows the set of values we use for exec and eval,
respectively. The approach exhaustively tries all possible
assignments of these values to the unknown parts of a
template. Then, each of the resulting strings is given to
a parser of the language, e.g., a JavaScript or Bash parser.
If and only if the string is accepted as a legal member of
the language, then the approach stores the resulting AST
into a set of legal example ASTs.
Given the legal example ASTs for a template, the next
step is to merge all of them into a single PAST. To this
end, the approach identiﬁes the least common nodes of all
ASTs, i.e., nodes that are shared by all ASTs but that have
a subtree that diﬀers across the ASTs. At ﬁrst, the given
ASTs are aligned by their root nodes, which must match
because all ASTs belong to the same language. Then, the
approach simultaneously traverses all ASTs in a depth-
ﬁrst manner and searches for nodes nlc with children that
diﬀer across at least two of the ASTs. Each such node nlc
is a least common node. Finally, the approach creates a
single PAST that contains the common parts of all ASTs
and where the least common nodes remain unexpanded
and form the set Nsub (Deﬁnition 3). Note that Nsub is
eﬀectively an under-approximation of the possible valid
inputs, given that we construct it using a small number
of known benign inputs. However, in practice we do not
observe any downsides to this approach, as discussed in
Section VIII.
Policy synthesizing example. For example, for the
template td1 and the known benign inputs for Bash in
Figure 10, the ﬁrst argument passed to cp will be expanded
to the values ./file.txt.ls, ls.ls, ./file.txt../file.txt
and ls../file.txt. All these values are valid literals ac-
cording to the Bash grammar, i.e., we obtain four legal
example ASTs. By merging these ASTs, the approach
obtains the PAST in Figure 9a because the only variations
observed across the four ASTs are in the value of the
literal.
The goal of the ﬁrst step is to synthesize for each call
site a set of trees that represents the benign values that
may be passed to the injection API. Formally, we deﬁne
these trees as follows:
B. Checking Runtime Values Against the Policy
The set of PASTs synthesized for a call site is the basis
of a policy that our mechanism enforces for each string
8
command
command
args
literal
list
value
command
command
args
literal
list
value
cp
literal
literal
cp
literal
literal
value
value
value
value
HOLE
˜/.localBackup
ﬁle.txt
˜/.localBackup
command
command
args
literal
list
value
cp
literal
literal
value
value
commandSubstitution
˜/.localBackup
(a) Partial AST for the template in
Figure 8.
(b) AST accepted by the policy derived
from the partial AST.
commands
list
command
next
command
args
literal
list
control
||
value
command
command
args
literal
list
cp
literal
literal
value
value
value
ﬁle.txt
˜/.localBackup
rm
glob
literal
value
value
*
-rf
command
args
list
command
literal
value
rm
glob
literal
value
value
*
-rf
(c) AST rejected by the policy derived from the partial AST.
(d) AST rejected by the policy derived from
the partial AST.
Fig. 9: A partial AST and three ASTs compared against it. The blue nodes are holes and runtime values ﬁlled into the
holes at runtime.
API
exec
eval
Language
Bash
JavaScript
Known benign values
"./file.txt", "ls"
x, y, "x", x.p, {x:23}, 23
Fig. 10: Known benign values used to synthesize PASTs.
passed at the call site. We implement this enforcement
by rewriting the underlying JavaScript code at the call
site. When a runtime value reaches the rewritten call site,
then the runtime mechanism parses it into an AST and
compares it with the PASTs of the call site. During this
comparison, the policy enforces two properties:
• P1: The runtime value must be a syntactically valid
expansion of any of the available PASTs. Such an
expansion assigns to each node nsub ∈ Nsub a subtree
so that the resulting tree (i) is legal according to the
language and (ii) structurally matches the runtime
value’s AST.
• P2: The expansion of a node nsub of the PAST is
restricted to contain only AST nodes from a pre-
deﬁned set of safe node types. The set of safe node
types is deﬁned once per language, i.e., it is indepen-
dent of the speciﬁc call site and its PASTs. For shell
commands passed to exec, we consider only nodes that
represent literals as safe. For JavaScript code passed
to eval, we allow all AST node types that occur in
JSON code, i.e., literals, identiﬁers, properties, array
expressions, object expressions, member expressions,
and expression statements. The rationale for choosing
safe node types is to prevent an attacker from injecting
code that has side eﬀects. With the above safe node
types, an attacker can neither call or deﬁne functions,
nor update the values of properties or variables. As
noted in previous work [30], such a restrictive mech-
anism may cause false positives, which we ﬁnd to be
manageable in practice though.
Policy checking example. To illustrate these proper-
ties, suppose that the three example inputs in Figure 11
are given to the backupFile function in Figure 1. Input 1
uses the function as expected by the developer. In contrast,
inputs 2 and 3 exploit the vulnerability in the call to exec
by passing data that will cause an additional command to
be executed. Figure 9 shows the PAST derived (only one
because there is only one template available for this call
site) for the vulnerable call site and the ASTs of the three
example inputs. Input 1 fulﬁlls both P1 and P2 and the
value is accepted. In contrast, the policy rejects input 2
because it does not fulﬁll P1. The reason is that the AST
of the input (Figure 9c) does not structurally match the
PAST. Likewise, the policy rejects input 3 because it fulﬁlls
P1 but not P2. The reason for not fulﬁlling P2 is that the
expanded subtree (i.e., the highlighted nodes in Figure 9d)
contain nodes that are not in the set of safe node types.
To summarize, the enforced policy can be formalized
as follows:
Deﬁnition 4 (Security Policy). Given a runtime value v,
a set of PASTs T , and a set Nsaf e of safe node types, v is
rejected unless there exists an expansion t(cid:48) of some t ∈ T ,
9
ID
name
ext
Property
P1
P2
Kind of template tree
Call sites
exec
eval
1
2
3
file
file
file
txt
txt || rm * -rf
$(rm * -rf)




–

Fig. 11: Inputs compared against the partial AST in
Figure 9a.
Evaluates to constant string without holes 31.05% 39.29%
49.02% 34.52%
Holes due to symbolic variables only
Holes due to unsupported operations
19.93% 26.19%
Fig. 12: Template trees extracted by the static analysis.
where
• t(cid:48) is isomorphic to the AST of v, and
• let Ninput be the set of nodes that belong to a subtree
in the AST of v that matches a node in Nsub ∈ t, then
the node type of all n ∈ Ninput is in Nsaf e.
Our runtime enforcement approach can be applied to any
kind of injection API that expects string values speciﬁed by
a context-free grammar. The eﬀectiveness of the enforce-
ment depends on two language-speciﬁc ingredients: the set
of benign example inputs and the set of safe AST node
types. Given that we are primarily interested in eval and
exec sinks, we have created these ingredients for JavaScript
and Bash, and Section VIII-B shows both to be eﬀective
for real-world Node.js code.
VII.
Implementation
Static analysis: We implement the static analysis in
Java, building upon the Google Closure Compiler8. The
analysis is an intraprocedural, backward data ﬂow analysis,
as described in Section V-A. The states propagated along
the control ﬂow edges are sets of template trees and the
join operation is the union of these sets. To handle loops
and recursion, the static data ﬂow analysis limits the
number of times a statement is revisited while computing a
particular data ﬂow fact to ten. When applying the static
analysis to a module, we impose a one minute timeout per
module. Considering the deployment strategy we propose
for Synode later in this section, we believe that an analysis
that takes longer would be of little practical use. We show
in the evaluation that the cases in which the timeout
expires are rare and therefore for these cases, Synode
alerts the user that a manual inspection of the module
is needed. As described in Section V-B, after ﬁnishing
the data ﬂow analysis of a module, the implementation
transforms the collected template trees into templates.
Lastly, the analysis writes the set of templates for each call
site into a text ﬁle to be used by the dynamic analysis.
Runtime analysis: We implement the dynamic analysis
in JavaScript. Before executing the module, the analysis
pre-computes the PASTs for each call site based on the
templates gathered by the static analysis. While executing
a module, the analysis intercepts all calls to exec and
eval and extracts the strings passed to these function to
be checked against our policy. To parse strings given to
8https://developers.google.com/closure/
exec and eval, we build upon the esprima9 and shell-parse10
modules.
Automatic deployment: As shown by our study (Sec-
tion III), the practical beneﬁts of a technique to prevent
injection attacks depend on how seamlessly the technique
can be deployed. A particular challenge is how to apply
a mitigation technique to code written by third parties
that may not be willing to modify their code. To make
the deployment of Synode as easy as possible without
relying on the cooperation of third-party code providers,
we advocate an approach in which a module developer or
a system administrator adds a post-installation script11 to
the application packaged as an npm module.
The script runs on each explicitly declared third-party
dependent module and, if necessary, performs the code
rewriting step that adds dynamic enforcement at each
statically unsafe call site of an injection API. As a result,
our technique to prevent injection attacks can be deployed
with very little eﬀort and without requiring any knowledge
about third-party code.
VIII. Evaluation
We evaluate our mitigation technique by applying it to
all 235,850 Node.js modules. To avoid analyzing modules
without any injection call sites, we ﬁlter modules by search-
ing for call sites of these methods and include all 15,604
modules with at least one such call site in our evaluation.
We apply our static analysis for each module separately
to decide whether the sink call sites are statically safe
or runtime protection is needed for that module. Since
evaluating the runtime mechanism requires inputs that
exercise the modules, we consider a subset of the modules,
with known vulnerabilities, found by others or by us during
the study (Section III).
We perform all our measurements on a Lenovo
ThinkPad T440s laptop with an Intel Core i7 CPU
(2.10GHz) and 12 GB of memory, running Ubunu 14.04.
A. Static Analysis
Statically safe call sites: The static analysis ﬁnds 18,924
of all 51,627 call sites (36.66%) of injection APIs to be
statically safe. That is, the values that are possibly passed
to each of these call sites are statically known, and an
attacker cannot modify them. To further illustrate this
point, Figure 12 shows to what extent the analysis can
9http://esprima.org/
10https://www.npmjs.com/package/shell-parse
11https://docs.npmjs.com/misc/scripts
10
evaluate trees into templates. For 31.05% and 39.29% of
all call sites of exec and eval, respectively, the template
tree contains only constant nodes, operators supported by
the analysis, and alternative nodes, which yield constant
strings after evaluating the tree.
The remaining template trees also contain symbolic
variable nodes. Most of these trees (49.02% and 34.52%)
are fully evaluated by the analysis, i.e., they contain no
unsupported operators. It is important to note that the
static analysis may provide a useful template even if the
template tree contains an unsupported operation. The
reason is that the other nodes in the tree often provide
enough context around the unknown part created by the
unsupported operation.
Context encoded in templates: To better understand