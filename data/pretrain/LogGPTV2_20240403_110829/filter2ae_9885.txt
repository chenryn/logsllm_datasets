# VCSA 6.5-7.0 远程代码执行漏洞 CVE-2021-21985 深度分析

## 译文声明
本文为翻译文章，原作者为360 Noah Lab，原始出处为[360 Noah Lab](360 Noah Lab)。译文仅供读者参考，具体含义和表达以原文为准。
- 译者：Ricter Z

vSphere vCenter Server 的 `vsphere-ui` 基于 OSGi 框架，包含数百个 bundle。最近发现的一个任意文件写入漏洞与 `vrops` 相关的 bundle 有关。在对其他 bundle 进行审计时，我们注意到 `h5-vsan` 相关的 bundle 提供了一些未经授权即可访问的 API 端点。进一步利用这些端点，我们发现其中一个存在安全问题，允许执行任意 Spring Bean 的方法，从而导致命令执行。

## 漏洞时间线
- 2021/04/13: 发现漏洞并实现 RCE；
- 2021/04/16: 向 VMware 官方提交漏洞报告并获得回复；
- 2021/05/26: VMware 发布漏洞公告（[VMSA-2021-0010](https://www.vmware.com/security/advisories/VMSA-2021-0010.html)）；
- 2021/06/02: Exploit 公开（来源：[随风’s blog](https://www.iswin.org/2021/06/02/Vcenter-Server-CVE-2021-21985-RCE-PAYLOAD/)）；
- 2021/06/05: 本文公开。

## 0x01. 漏洞分析
### 存在漏洞的 API 端点
该 API 端点首先从请求路径中获取 Bean 名称或类名及方法名称，然后从 POST 数据中读取 `methodInput` 列表作为参数，最后调用 `invokeService` 方法。

#### invokeService 方法
此方法先获取 Bean 实例，再获取其方法列表。通过比对方法名和参数长度后，它将用户输入的参数反序列化并调用相应的方法。系统中存在大量的 Bean（数量因版本不同而略有差异），其中不乏危险方法和可被利用的 Bean。

### PoC 中使用的 Bean
在本文提供的概念验证代码中，所使用的 Bean 是 `vmodlContext`，对应的类是 `com.vmware.vim.vmomi.core.types.impl.VmodContextImpl`。特别关注的是其 `loadVmodlPackage` 方法：
```java
public void loadVmodlPackage(String vmodlPackage) {
    // ...
}
```
此方法会调用 `SpringContextLoader` 加载指定包，而 `vmodlPackage` 参数可控。

#### 调用 `SpringContextLoader`
最终，`SpringContextLoader` 会调用 `ClassPathXmlApplicationContext` 的构造函数。后者可以接收一个 XML 文件路径，并解析 XML 内容，这可能导致 SpEL 注入，进而执行任意代码。

### 注意事项
在 `SpringContextLoader` 的 `getContextFileNameForPackage` 方法中，路径中的 `.` 会被替换为 `/`，因此不能直接使用 IPv4 地址，但可以通过数字 IP 绕过这一限制。

## 0x02. 不出网利用（适用于 6.7 / 7.0 版本）
为了利用此漏洞，我们需要获取一个 XML 文件的内容。然而，Java 的 URL 类不支持 data 协议，因此需要找到一种返回内容可控的 SSRF 或文件上传漏洞。在此案例中，我们利用了 vSAN Health 组件中的 `VsanHttpProvider.py` 文件中的 SSRF 漏洞。

#### VsanHttpProvider.py 文件
该文件使用 Python 的 `urlopen` 函数发起请求，随后在内存中解压响应内容，并匹配名为 `.*offline_bundle.*` 的文件内容。由于 `urlopen` 支持 data 协议，我们可以构造一个压缩包并通过 Base64 编码来创建 data 协议的 URL。

### 利用过程
- 将 IP 地址替换为 `localhost` 以避免 `.` 被替换。
- 在 6.5 版本中，vSAN Health 组件不存在此端点，因此无法进行不出网利用。
- 通过查看 Bean 列表，我们发现了名为 `systemProperties` 的 Bean，它可以用于获取属性内容。

### 最终利用
整个攻击流程包括两个 HTTP 请求：
1. 第一个请求利用 `h5-vsan` 组件的 SSRF 漏洞向本地 vSAN Health 组件发起请求，触发第二个 SSRF 漏洞以返回可控的 XML 文件内容。XML 文件将执行命令并将结果存储到 System Properties 中。
2. 第二个请求调用 `systemProperties` Bean 的 `getProperty` 方法以获取输出。

## 0x03. 技术总结
通过对 VCSA 6.5-7.0 中的远程代码执行漏洞进行深入分析，我们揭示了如何利用未授权的 API 端点以及 SSRF 漏洞来实现命令执行。同时，我们也展示了如何在不依赖外部网络的情况下完成攻击链。希望本文能够帮助读者更好地理解此类漏洞及其潜在风险。