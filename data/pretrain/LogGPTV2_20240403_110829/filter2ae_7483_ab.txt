通过`OpenProcess()`获取当前进程/线程的句柄
调用`OpenProcessToken()`打开与进程相关的token句柄
使用`DuplicateTokenEx()`使用目标进程token创建一个新的模拟token
调用`SetThreadToken()`设置当前线程的token为上一步创建的新的模拟token
由于窃取token是Access Token利用的重点，该过程放在本文后面分析
### 4\. token::run
该功能是使用指定的token来运行程序，也可以使用`token::elevate`中的几个参数来指定运行程序的token，除此之外还有一个参数：
**/process** ：指定要运行的程序，默认值为whoami.exe  
`来使用新的primary
token创建一个进程
    BOOL CreateProcessAsUserA(
      HANDLE                hToken,
      LPCSTR                lpApplicationName,
      LPSTR                 lpCommandLine,
      LPSECURITY_ATTRIBUTES lpProcessAttributes,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      BOOL                  bInheritHandles,
      DWORD                 dwCreationFlags,
      LPVOID                lpEnvironment,
      LPCSTR                lpCurrentDirectory,
      LPSTARTUPINFOA        lpStartupInfo,
      LPPROCESS_INFORMATION lpProcessInformation
    );
创建进程后，利用匿名管道做进程间通信，将新创建进程的标准输出写入到匿名管道的write端，从管道read端读取数据进行回显（在webshell等非交互场景下很有用）
    if (CreatePipe(&hStdoutR, &hStdoutW, &saAttr, 0))
    {
        SetHandleInformation(hStdoutR, HANDLE_FLAG_INHERIT, 0);
        si.cb = sizeof(STARTUPINFO);
        si.hStdOutput = hStdoutW;
        si.hStdError = si.hStdOutput;
        si.dwFlags |= STARTF_USESTDHANDLES;
        if (CreateProcessWithTokenW(hDupToken, LOGON_WITH_PROFILE, NULL, cmd, CREATE_NO_WINDOW | CREATE_UNICODE_ENVIRONMENT, NULL, NULL, &si, &pi))
        {
            CloseHandle(si.hStdOutput);
            si.hStdOutput = si.hStdError = NULL;
            while (ReadFile(hStdoutR, resultBuf, sizeof(resultBuf), &dwRead, NULL) && dwRead)
            {
                for (i = 0; i  system的常见手法之一，还经常被用于降权等用户切换操作
### 1\. 原理
窃取token主要涉及以下几个API：
1 . **OpenProcess**
    HANDLE OpenProcess(
      DWORD dwDesiredAccess,
      BOOL  bInheritHandle,
      DWORD dwProcessId
    );
该函数打开指定PID的进程的句柄，需要注意的是第一个参数 **dwDesiredAccess** ，主要会用到的是以下三个权限
PROCESS_ALL_ACCESS
PROCESS_QUERY_INFORMATION (0x0400)
PROCESS_QUERY_LIMITED_INFORMATION (0x1000)
我在编写窃取Token的代码时，发现对部分进程（如smss.exe、csrss.exe等）调用OpenProcess会出现拒绝访问的情况，查阅网上资料后发现这些进程存在保护，需要使用`PROCESS_QUERY_LIMITED_INFORMATION`权限打开句柄，详情请参考[这篇文章](https://posts.specterops.io/understanding-and-defending-against-access-token-theft-finding-alternatives-to-winlogon-exe-80696c8a73b)
2 . **OpenProcessToken**
    BOOL OpenProcessToken(
      HANDLE  ProcessHandle,
      DWORD   DesiredAccess,
      PHANDLE TokenHandle
    );
该函数打开与进程相关联的令牌的句柄，其中第二个参数 **DesiredAccess** 同样用来指定令牌的访问权限，需要以下几个：
TOKEN_DUPLICATE：复制令牌需要的权限
TOKEN_QUERY：查询令牌需要的权限
如果要调用`DuplicateTokenEx`需要指定TOKEN_DUPLICATE，如果调用`ImpersonatedLoggedOnUser`则需要指定TOKEN_DUPLICATE和TOKEN_QUERY
3 . **DuplicateTokenEx**
    BOOL DuplicateTokenEx(
      HANDLE                       hExistingToken,
      DWORD                        dwDesiredAccess,
      LPSECURITY_ATTRIBUTES        lpTokenAttributes,
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
      TOKEN_TYPE                   TokenType,
      PHANDLE                      phNewToken
    );
`DuplicateTokenEx`用来复制现有的令牌来生成一张新令牌，该函数可以选择生成主令牌还是模拟令牌
**hExistingToken** ：指定现有的令牌句柄，可以使用`OpenProcessToken`获得
**dwDesiredAccess** ：用来指定令牌访问权限，需要指定以下几个来支持后面调用`CreateProcessWithToken`：
TOKEN_DUPLICATE：需要复制访问令牌
TOKEN_QUERY：需要查询访问令牌
TOKEN_ASSIGN_PRIMARY：将令牌附加到主进程的权限
TOKEN_ADJUST_DEFAULT：需要更改访问令牌的默认所有者、主要组或 DACL
TOKEN_ADJUST_SESSIONID：需要调整访问令牌的会话 ID，需要 SE_TCB_NAME 权限
**lpTokenAttributes** ：指向SECURITY_ATTRIBUTES结构的指针，该
结构指定新令牌的安全描述符并确定子进程是否可以继承该令牌
**ImpersonationLevel** ：指定令牌的[模拟级别](https://docs.microsoft.com/en-us/windows/win32/api/winnt/ne-winnt-security_impersonation_level)，当进行复制令牌时，主令牌被复制为模拟令牌是始终被允许的，而模拟令牌复制为主令牌则需要模拟级别
>= Impersonate
**TokenType** ：指定新令牌的类型，是主令牌（Primary Token）还是模拟令牌（Impersonate Token）
**phNewToken** ：返回令牌句柄的地址
复制完一张新令牌后，我们就可以利用这张新令牌来运行我们指定的进程了
4 . **CreateProcessWithTokenW**
    BOOL CreateProcessWithTokenW(
      HANDLE                hToken,
      DWORD                 dwLogonFlags,
      LPCWSTR               lpApplicationName,
      LPWSTR                lpCommandLine,
      DWORD                 dwCreationFlags,
      LPVOID                lpEnvironment,
      LPCWSTR               lpCurrentDirectory,
      LPSTARTUPINFOW        lpStartupInfo,
      LPPROCESS_INFORMATION lpProcessInformation
    );
该函数创建一个新进程及其主线程，新进程在指定令牌的安全上下文中运行。我们直接指定前面复制出来的新令牌，使用该令牌创建我们指定的进程即可
### 2\. 利用
根据mimikatz的token模块的原理，简单实现了一个[demo](https://github.com/loong716/CPPPractice/tree/master/TokenTest)，也有许多token相关的工具如incognito等
当获取管理员权限后，我们可以列出系统中进程对应的token：  
然后窃取指定进程的token来运行我们的程序，如直接运行上线马  
如果想要拿回程序输出的话，则可以通过管道等进程间通信的方法来回显输出  
如果拿到一台机器有域管的进程，那么我们可以直接窃取域管进程的token来进行DCSync攻击  
## 0x04 参考链接