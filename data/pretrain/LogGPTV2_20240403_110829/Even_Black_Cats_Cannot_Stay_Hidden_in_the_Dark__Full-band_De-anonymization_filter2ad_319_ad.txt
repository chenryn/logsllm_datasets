### 图11：系统在5天活动期间每15分钟平均解决的独特汽车UAP数量

- **时间（小时）**:
  - 从16到19小时
- **数据点**:
  - 50, 40, 30, 20, 10, 9, 10, 11, 12, 14, 13, 15

图11展示了我们的系统在5天内每15分钟平均解决的独特汽车UAP数量。如果观察到20或10个通道，可以在几十毫秒内确定UAP。然而，当仅观察2个通道时，中位数解决时间为约400毫秒；而单个通道的中位数解决时间为1秒。我们进一步研究了野外嗅探频谱宽度的影响，详见第七章D部分。

### 图12：在5天捕获期间检测到的30个重复用户的通勤模式

- **设备编号**:
  - 从1到30
- **符号颜色**:
  - 蓝色/红色交替显示，以便更好地区分不同的捕获日

图12展示了在5天捕获期间检测到的30个重复用户的通勤模式。通过使用交替的蓝色和红色符号来更好地区分不同天的数据。这些结果揭示了蓝牙用户面临严重的隐私问题。例如，我们可以准确地识别出车辆1、3、16、20、26和27的通勤时间。

### 图13：16通道与4通道嗅探器在解决独特UAP数量方面的性能比较

- **UAP计数比率**:
  - 从1到10
- **累积分布函数 (ECDF)**:
  - 1, 0.8, 0.6, 0.4, 0.2, 0

图13展示了16通道和4通道嗅探器在野外环境中解决独特UAP数量的性能比较。60%的时间内，16通道嗅探器至少可以解决3倍以上的UAP。

### D. 监控攻击

到目前为止，所有实验都是在受控环境中进行的。接下来，我们将展示在野外环境中的结果（见第六章C部分），以展示系统的监控能力。通过将我们的嗅探和重新识别系统指向交通路口前方的一段单向道路，我们首先计算在典型工作时间（上午9点至下午7:30）内，具有蓝牙技术且可以被攻击者去匿名化的车辆数量。我们能够检测到最远114.38米范围内的车辆，这已经通过控制车辆进行了验证。图11展示了每15分钟平均检测到的车辆数量。平均每小时检测到约200台设备。如预期的那样，我们在上午9点、中午12:30和下午6点左右观察到更密集的交通——这是典型的上下班时间和午餐时间。

### 进一步分析

我们还检查了发现的蓝牙驱动汽车的通勤模式。特别是，我们记录了在每次收集测量数据的日子里，被去匿名化的设备何时被我们的嗅探系统看到。这些结果如图12所示，揭示了蓝牙用户面临的严重隐私问题。显然，可以从观察到的通勤模式推断出用户的人格、日常习惯和行为。例如，我们注意到车辆1、3、16、20、26和27的确切通勤时间。

我们进一步研究了在野外环境中观察到的通道数量对可检测连接数量的影响。具体来说，我们研究了在16通道与4通道嗅探下，能检测和去匿名化的蓝牙连接数量。结果显示，在相同时间内，使用16通道可以检测并重新识别3.31倍更多的连接，这与图10中的受控实验结果一致。

我们还将系统放置在车内，并评估其在高速公路上行驶时的嗅探性能。相关结果见附录B。

### 八. 与现有解决方案的比较

**Ubertooth One** 是一个“适用于蓝牙实验的开源无线开发平台”。它通过USB连接主机，并通过自定义固件控制CC2400收发器来处理MAC和PHY层。其主要优点是价格低廉，但缺点是一次只能捕获一个通道。为了发现正在进行的会话，该平台要么停留在一个固定通道上（这在尝试检测多个活跃会话时非常有用），要么“随机”跳频（以增加遇到会话的机会）。由于基于硬件，平台无法更新，CC2400无线电只能处理基本速率（即1 Mb/s）编码的蓝牙帧。

接下来，我们详细比较了Ubertooth和我们系统在不同场景下的性能。具体来说，我们研究了每个平台在有无流量的情况下，发现Android Auto会话和蓝牙扬声器与智能手机之间的连接所需的UAP时间。图14显示了这些测量的ECDF。在两种情况下，我们的方法在超过95%的实验中不到一秒钟就能发现UAP，无论是否有流量。相比之下，Ubertooth在没有数据交换时需要超过一分钟才能解决20%的实验中的UAP。这使得它在高移动性场景中不适用，因为观察时间可能非常短。

我们还在第六章A部分描述的多设备测试平台上评估了10秒内能发现多少设备，并在图15中报告了结果。注意，我们的系统在单通道模式下的性能与Ubertooth相当；而在有流量的情况下，Ubertooth平均比我们的系统多检测一个UAP，但在无流量时，我们的系统表现更好。为了理解Ubertooth的行为差异，我们检查了其嗅探代码。我们发现，与文档中所述不同，Ubertooth并不使用连续捕获帧的时间戳来恢复目标UAP，而是基于帧负载的一些合理性检查迭代地移除不可能的UAP。虽然这种方法在帧载荷存在时相当有效，但在只交换NULL或POLL帧以保持会话活跃时，该方法不起作用。在这种情况下，Ubertooth需要等待很长时间才能收集到有用的数据帧。此外，Ubertooth遵循的跳频序列与设备的不同，因此只能捕获一小部分这些帧。此外，值得注意的是，虽然我们的解决方案只识别有效的LAP，但Ubertooth在这些情况下可能会出现假阳性。

最后，尽管我们依赖于Ettus的B210 SDR进行实现和测试，但将我们的系统移植到其他支持IQ采样的平台也非常直接。例如，使用HackRF One（一种提供高达20 MS/s的SDR平台）并通过时钟菊花链同步多个设备将是有趣的。使用单个HackRF One并限制捕获到8或16个通道，我们预计可以以比Ubertooth更低的价格实现非常好的性能。我们将这种实验留作未来的工作。我们的系统的开源性质及其提供的灵活性（相比专有的“黑盒”商业平台）降低了攻击者和未来蓝牙安全研究的进入门槛。