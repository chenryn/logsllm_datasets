into a NIDS, or extending packet ﬁlters for enhanced performance.
Earlier work has discussed the central role which packet ﬁlters can play in high-
performance network intrusion detection [18,21]. More recent work has also explored
precompiling a set of ﬁlters that a NIDS can then switch among depending on its work-
load [15,5] or upon detecting ﬂoods. To our knowledge, however, supplementing a
NIDS’s primary ﬁlter with an additional, quite different ﬁlter, has not been previously
explored in the literature.
Related to our packet ﬁlter extensions, MPF [25] explored adding state to BPF [16]
in order to process IP fragments. xPF added persistent memory to BPF in the form of
an additional memory bank that BPF ﬁlters can switch to and from [12]. This work
also removed BPF’s prohibition of backward jumps, with an intent to enabling packet
ﬁlters to perform in-kernel analysis (such as computing connection round-trip times) as
opposed to simply ﬁltering. xPF’s persistent state is similar in spirit to what we have
added to BPF, though implemented at a lower level of abstraction, which can provide
greater ﬂexibility but at a cost of requiring many more BPF instruction executions,
and permitting arbitrary looping in BPF programs. mmdump introduces a method to
construct dynamic ﬁlters in order efﬁciently to support capture of multimedia sessions
274
J.M. Gonzalez and V. Paxson
for which some of the connections use dynamic ports [24]. Finally, some ﬁrewall packet
ﬁlters (Linux Netﬁlter, BSD pf) offer similar functionality to that of the packet ﬁlter
extensions, namely randomness and some state control.
The example applications described in Section 5 have roots in previous work. The
problem of detecting large connections is similar in spirit to previous work on “sample
and hold” [9], though our approach exploits the transport sequencing structure of TCP
rather than enhancing random sampling. (We note that we can combine our random-
number and associative table enhancements to BPF to implement sample-and-hold.)
Our “heavy hitters” detector, which aims to capture the quantitative importance of dif-
ferent granularities of trafﬁc, was inspired by Autofocus, a tool that automatically char-
acterizes network trafﬁc based on address/port/protocol ﬁve-tuples [8]. Finally, we take
our backdoor detectors from [26]. We use them as examples of the ease-of-expression
that the Secondary Path can provide.
3 New Packet Filter Mechanisms
In this section we introduce two extensions to BPF that bolster the expressive power of
the Secondary Path while minimizing the performance overhead of the additions. For
details and more discussion, including performance experiments, see [11].
3.1 Random Number Generation
When dealing with large volumes of network trafﬁc, we can often derive signiﬁcant
beneﬁt while minimizing the processing cost by employing sampling. Generally, this
is done on either a per-packet or per-connection basis. BPF does not provide access
to pseudo-random numbers, so applications have had to rely on proxies for random-
ness in terms of network header ﬁelds with some semblance of entropy across packets
(checksum and IP fragment identiﬁer ﬁelds) or connections (ephemeral ports). These
sometimes provide acceptable approximations to random sampling, but can also suffer
from signiﬁcant irregularities due to lack of entropy or aliasing; see [11] for an analysis.
To address these problems, we added pseudo-random number generation to BPF.
We do so by providing a new instruction that returns a pseudo-random number in a
user-provided range. We also provide high-level access to these numbers via a new
“random” keyword for tcpdump’s expression syntax. The semantics of the new term
are straightforward: “random(x)” yields a random number between 0 and x − 1, so, for
example, the expression “random(3) = 0” returns true with probability 1 in 3.
Our implementation provides two different PRNGs, a fast-but-not-strong Linear
Congruential Generator [17], and a slower-but-stronger random number generator based
on RC4 [22]. We also permit the user to seed the PRNG directly to enforce deterministic
behavior, useful for debugging purposes.
The main implementation difﬁculties relate to BPF’s optimizer, which considers it-
self free to arbitrarily reorder terms. Doing so can change the expression semantics
when using “random”. This problem also arises when using persistent state (see next
section), as an insert may affect a later retrieve. Moreover, BPF is keen to collapse
two equivalent subexpressions with no dependencies, which would cause two calls to
“random” with the same value of x to produce the same result. We avoid these problems
Enhancing Network Intrusion Detection
275
by modifying the optimizer to forbid reordering around “random” terms or hash table
accesses, and by marking all “random” instructions differently so none are viewed as
equivalent [11].
3.2 Persistent State
The second modiﬁcation to BPF consists of the introduction of persistent state, i.e., a
mechanism for storing and recovering information across packets. Our implementation
does so by providing multiple ﬁxed-size associative arrays, which can be indexed using
a subset of packet header ﬁelds as hash keys, or, more generally, any values we can
compute using BPF expressions. For each associative array, the user can specify the key
length, value (yield) length, and table size. Access is via functions to insert, retrieve, and
delete entries.
Associative arrays permit efﬁcient, dynamic, ﬁne-grained control of the ﬁlter pro-
gram. For example, we can conﬁgure an associative array to keep one bit per connec-
tion to indicate whether to ﬁlter packets from the connection in or out (essentially a
Bloom ﬁlter [1]). Testing this for the presence of a given packet’s connection is O(1)
(efﬁciency), and adding or deleting elements in the table requires only an insert or a
delete operation (dynamic access).
A key issue, however, is sizing the arrays. We need to limit the size of each array lest
they grow to consume too much kernel memory; particularly problematic if an attacker
can cause the ﬁlter to continually add new entries. One possibility would be to allow
dynamic expansion of arrays up to a given point, using incremental resizing as discussed
in [5] to avoid processing spikes within the kernel as we expand an array.
This introduces considerable implementation complexity, however, so currently we
keep the arrays ﬁxed-size. Doing so exacerbates a different problem, however: when
inserting a new entry, a collision in the hash table may require eviction of an existing
tuple without the BPF program explicitly requesting it, violating the consistency of the
state used by the program. We diminish this effect by providing pseudo-random hash
functions (to resist adversaries) and by introducing set-associativity in the tables, as
described below. However, these do not provide a complete solution, so for now we
must restrict ourselves to those applications for which we can tolerate such evictions.
Associative tables require hash functions to index them, and different applications
call for different tradeoffs in the properties of these functions. Our implementation pro-
vides three function types: (a) LCG [17], a simple, fast function, but prone to worst-
case behavior with either degenerated workloads or algorithm complexity attacks [3];
(b) MD5, slow but with cryptographic strength [20]; and (c) UHASH, a universal hash
function that provides less strong guarantees than cryptographic hash functions, but
runs much faster [2].
In addition, the user can specify for each table its set-associativity, i.e., how many
different keys reside at each hash location in the table. The higher the set-associativity,
the fewer forced evictions, but also the more processing required per lookup.
We provide two types of access to the associative arrays: from within BPF programs,
which lets us maintain ﬁltering decisions across packets (such as for random sampling
on a per-connection basis, in order to remember which connections we previously se-
lected), and directly from user-level (via ioctl, though the implementation of this is not
276
J.M. Gonzalez and V. Paxson
complete yet). This latter allows us to ﬂexibly and quickly tailor packet capture in re-
sponse to changing conditions. For example, we can use a ﬁlter that consults a table
indexed by connection 5-tuples (addresses, ports, transport protocol) to capture packets
corresponding to speciﬁc connections of interest, and might update this dynamically
when our user-level analysis parses an FTP control channel to ﬁnd the dynamic port
negotiated for a pending FTP data connection.
User-level control also facilitates downloading very large tables; for example, a list
of 1000s of botnet addresses for which we wish to capture trafﬁc involving any of
them. This application is infeasible using unmodiﬁed BPF. Even if the in-line BPF code
to check so many addresses ﬁt within the space allowed for BPF programs, the O(N)
processing for BPF to scan such a list would be prohibitive. Similarly, for unmodiﬁed
BPF, if an application needs to make any change to its ﬁlter (e.g., add a new connection
or delete an existing one), it must create the new ﬁlter from scratch, write the tcpdump
expression, compile and optimize it, and then send it to the kernel for the latter to check
and install.
Here is an example1 of a tcpdump ﬁlter that checks whether the connection asso-
ciated with a given packet is in table #2 (using the LCG hash function), and, if not
and the packet represents an initial SYN (no ACK), randomly samples the packet with
probability 1% by adding it in that case to the table (with a yield value of 1):
(lookup(2, hash_lcg(ip[12:4], ip[16:4], tcp[0:2], tcp[2:2]))) or
(lookup(2, hash_lcg(ip[16:4], ip[12:4], tcp[2:2], tcp[0:2]))) or
( (tcp[13] & 0x12 = 0x2) and
(random(100) = 1) and
(insert(2, hash_lcg(ip[12:4], ip[16:4], tcp[0:2], tcp[2:2]), 1)) )
Note that this code is imperfect: if the sender retransmits the initial SYN, we will
generate a fresh random number, increasing the probability that we sample the connec-
tion. We could avoid this problem by always inserting connections into the table and
using different yield values to indicate whether or not to subsequently sample packets
belonging to the connection. The code will always be imperfect, however, since the
“insert” might cause eviction of a previous connection due to a collision. In general, we
cannot use our associative tables for bullet-proof analysis, but only for often-correct-is-
good-enough analysis (with which our example applications below conform).
4 Introducing a Secondary Path for Packet Processing
The structure of a stateful NIDS typically consists of (a) capturing trafﬁc from one
or several packet-capture devices, (b) checking network- and transport-layer headers,
(c) reassembling application-layer contents (ADUs), and (d) dispatching the contents
to an application-speciﬁc analyzer. We call this mechanism the “Main Path.” The conn-
ection-oriented nature of the Main Path permits hiding the details of header veriﬁcation
and reassembly from the application-layer analyzers.
1 The expression begins with two “lookup”’s to test both directions of the connection for pres-
ence in the table. Clearly, it would be useful to introduce some tcpdump idioms for some of
the common constructions.
Enhancing Network Intrusion Detection
277
The main drawback of designing for full, application-oriented analysis is that the
trafﬁc processed by the Main Path must correspond to full connections. This limits
substantially the use of input-volume control techniques (sampling or ﬁltering)—which
may be highly desirable for performance reasons—to those that we can express on a
per-connection basis (such as ﬁltering on elements of the connection 5-tuple).
While we view full-payload analysis as a must for sound, deep, stateful analysis,
for some forms of analysis we can obtain complementary information much more efﬁ-
ciently by the analysis of isolated packets. In our architecture, we obtain this informa-
tion in a fashion independent from the Main Path, and use it to supplement or disam-
biguate the analysis produced by the latter.
The “Secondary Path” provides an alternate channel for acquiring packets. It works
by capturing packets from one or several packet-capture devices in addition to those
used by the Main Path, and dispatching the packets to corresponding analyzers without
any previous analysis.
It is very important to note that the Secondary Path is an alternate channel: it provides
a stateful NIDS with a means to obtain information about the monitored trafﬁc whose
generation using the Main Path is either inefﬁcient or ambiguous. It does not aim to
substitute for the Main Path, but to complement it.
Our main contribution regards not the analysis by a NIDS of isolated (e.g., sampled)
packets, but rather the integration of the results from such analysis with a NIDS’s reg-
ular, full-payload analysis. In our case, this integration is facilitated by the ﬂexible and
powerful state capabilities of Bro. We use the Secondary Path to distill information that
when solely employing Primary Path processing would be expensive (due to volume)
or difﬁcult to obtain (due to the Primary Path’s initial ﬁltering not capturing the neces-
sary information). For example, we can use the Secondary Path to spot ﬂooding sources
or victims via random sampling, which can then inform load-shedding decisions made
by the Primary Path [5]. For a number of types of analysis, Secondary Path processing
can be quite cheap because we can perform it at a much lower rate than Primary Path
processing, such as illustrated in the example applications discussed in § 5.
It is important to stress that the information distilled from the Secondary Path is
typically limited to identifying subsets of trafﬁc that are either large enough to ensure
they can be detected by sampling, or distinctive enough to ensure they can be spotted
using static ﬁltering. The Secondary Path is therefore not a tool to detect speciﬁc attacks
(unless their signature is distinctive enough as to permit detection by packet ﬁltering),
but a means for gathering additional information or context.
One signiﬁcant feature of the Secondary Path is its simplicity. It serves analyzers
isolated packets instead of full connections. Because it does not carry out reassembly,
its can operate in a stateless fashion, unless the analyzer itself chooses to maintain state.
However, an important, negative consequence of this stateless operation is that analysis
through the Secondary Path is often susceptible to evasion due to the inability to detect
or resolve trafﬁc ambiguities [19,18]. Similarly, Secondary Path analyzers must exercise
care when using transport- or application-layer contents, as these may be only partially
present, or arrive out of order or even duplicated.
Table 1 summarizes the main differences between the Main Path and the Secondary
Path.
278
J.M. Gonzalez and V. Paxson
Table 1. List of Differences between the Main and Secondary Paths
Main Path
Processing performed L3, L4 analysis
Objects provided
L4 reassemble
Memory
Filtering ﬂexibility
L7 ADUs
yes
stateful
port-, address-oriented
Secondary Path
none
L3 packets
no
stateless
rich when coupled with stateful
BPF (see § 3.2)
Sampling
connection-oriented only rich when coupled with randomness
in BPF (see § 3.1)
4.1 Filtering
A major beneﬁt of the Secondary Path is its potential efﬁciency, with its key application
being to tasks for which only a low volume of trafﬁc will match the ﬁlters it employs.
Such ﬁlters can be in terms of network- and/or transport-layer headers, which are readily
supported by packet capture mechanisms such as BPF. Note however that transport-
layer based ﬁltering is less reliable, as TCP headers can be divided across multiple IP
packets. On the other hand, in the absence of adversary evasion, such fragmentation is
generally rare [23].
The ﬁlter can also include application-layer contents. While BPF limits ﬁltering to
matching bytes at essentially ﬁxed positions, modern application-layer protocols some-
times use headers with distinctive contents in speciﬁc locations [26]. For example,
HTTP request headers start with one of seven different method strings (“GET”, “POST”,
etc.), and HTTP response headers start always with the string “HTTP/” [10]. We could
thus ﬁlter on the ﬁrst 5 bytes of TCP payload being “HTTP/” to capture with high
probability exactly one packet per HTTP transaction, since HTTP entity headers are
typically sent in a different packet than the previous entity body. Such an analyzer can
also access HTTP responses seen using non-standard ports.
Due to the ﬁxed-location limitation of packet ﬁltering, and the stateless condition of
the Secondary Path, application-layer contents provide less leverage than network- or
transport-layer contents, and more vulnerability to attacker manipulation. For example,
if an attacker wants to avoid detection of an HTTP connection, they can split the ﬁrst
5 bytes across two TCP packets; if they want burden a NIDS trying to detect HTTP
trafﬁc, they can cheaply forge faked packets with those 5 bytes at the beginning.
4.2 Sampling
A particularly handy form of of ﬁltering in terms of thinning the volume of trafﬁc the
NIDS must process for some types of analysis concerns sampling. Using our extensions
to BPF presented in the previous section, we can do this on (for example) either a per-
packet or per-connection basis. When deciding which to use, it is important to bear in
mind that packet-based sampling generates a completely unstructured trafﬁc stream, but
for which many properties remain related to those of the original stream [6,7].
An example of the utility that sampling can provide is in efﬁciently detecting “heavy
hitters,” i.e., connections, hosts, protocols, or host pairs that account for large subsets
Enhancing Network Intrusion Detection
279
of all the trafﬁc, or that have peculiarly large properties (such as very high fan-out).
Given unbiased sampling (which our BPF “random” operator provides, unlike previous
approaches based on masking out header bits), a heavy hitter in the full trafﬁc stream is
very likely also a heavy hitter in a sampled trafﬁc stream. We explore this further as an
example application in Section 5.2.
4.3 Operation
The operation of the Secondary Path is fairly simple: analyzers provide a packet ﬁlter
expression that deﬁnes the trafﬁc subset for which they wish to perform isolated packet
analysis. The Secondary Path creates a ﬁlter resulting from the union of all the analyzer
ﬁlters (Secondary Filter), and opens a packet ﬁlter device with it. When a packet matches
the common ﬁlter, the Secondary Path runs each particular analyzer ﬁlter against the
packet, demultiplexing the packet to all analyzers whose ﬁlters match the packet.
One subtlety arises, however, due to the fact that during Secondary Path operation
we actually run each analyzer ﬁlter twice (ﬁrst as a part of the full Secondary Filter,
second to see whether the analyzer’s particular ﬁlter matched). This “re-ﬁltering” does
not present problems for stock BPF ﬁlters, since they are idempotent—running a ﬁlter
F over a set of packets already ﬁltered by F does not cause the rejection of any packet.
However, when using our BPF extensions for randomness and maintaining state, ﬁlters
are no longer idempotent.
This generally will not present a problem for ﬁlters that maintain state, since two
copies of the state exist, one in the kernel used for the initial ﬁltering (i.e., the matching
of the entire Secondary Filter), and the other at user-level used for the demultiplexing.
The latter will be brought into sync with the former when we rerun the ﬁlter.
However, the random operator remains problematic. Our current implementation
maintains a separate packet ﬁlter device for each ﬁlter that uses “random”, so that we
do not require re-ﬁltering to demultiplex what the ﬁlter captures. A drawback of doing
so is that the BPF optimizer can no longer factor out common elements of ﬁlters that
use “random”, which may signiﬁcantly degrade performance if we have multiple such
ﬁlters. A second drawback is that the OS often limits the number of packet ﬁlter devices
available.
An alternate approach would be to modify BPF to track which elements of a ﬁlter
have been matched and to return this set when a packet is accepted. Designed correctly,
this would allow optimization across all packet ﬁlters (including the one used by the
Main Path), but is a signiﬁcant undertaking given that the notion of “element of a ﬁlter”
becomes blurred as BPF’s optimizer rearranges and collapses terms within a ﬁlter.
4.4 Implementation
We have implemented the Secondary Path in Bro, a stateful, event-oriented NIDS [18].
Bro’s analyzers are structured around a Main Path such as we have outlined in this paper.
We added a new script-accessible table, secondary_filters, which is indexed by
a packet ﬁlter (expressed as a string) and yields a Bro event handler for packets the ﬁlter
matches.
We open the interface(s) being monitored twice, once for the Main Path and once