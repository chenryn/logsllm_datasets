### Mobile Software Landscape and Security Implications

In the evolving mobile software landscape, many developers may not fully understand the security implications of integrating multiple layers with distinct security models (as detailed in Section III). From a security perspective, the critical components of any hybrid framework are the bridges that connect its web-facing JavaScript half with its device-based local half, as illustrated in Figure 2.

#### Stack Architecture

At the bottom of the stack is the operating system (e.g., Android, iOS, macOS, etc.), which manages local device resources such as the camera, file system, and location. The local half of the hybrid framework is implemented in Java (for Android and BlackBerry), Objective-C (for iOS), or C# (for Windows Phone). This local component is integrated into the hybrid app and runs as a native application from the OS's perspective. Upon installation, it gains access to device resources using one of the mechanisms described in Section III-B.

The local half of the framework includes an embedded web browser, which is platform-specific: WebView for Android, UIWebView for iOS, WebBrowser for Windows Phone, and WebWorks for BlackBerry. The framework executes the app’s code within this browser, allowing it to access local resources as if it were a native process. To achieve this, the framework provides one or more bridges that bypass the browser sandbox. Each bridge consists of:
1. A local component with access to device resources.
2. A mechanism for the JavaScript code in the browser to invoke the bridge and pass calls and their arguments to the local component.

The technical implementation details vary among different bridges (see Section IV).

#### Hybrid App Implementation

The hybrid app itself is implemented using HTML and JavaScript, executing within the embedded browser. Unlike traditional web content, it can access local resources via the bridges provided by the framework. Our survey in Section VI indicates that hybrid apps often include third-party content, such as ads fetched over HTTP or, less frequently, HTTPS.

### Security Models

#### Web Attackers

This paper primarily focuses on web attackers who control one or more domains and may host malicious JavaScript. These attackers do not control the network and cannot tamper with or observe communications between users and other domains. We assume they cannot execute native code on the user’s device, thus excluding mobile malware from our scope.

Web content served by a hybrid app may include iframes with ads or other third-party content. These ads are supplied by ad brokers, and the app owner often has no control over their source or content. A web attacker can trick a legitimate app into including malicious content via syndicated advertising. However, this alone does not constitute a security hole, as foreign-origin content is confined by the browser’s same-origin policy (SOP) (see Section III-A).

A more potent threat model is the network attacker, who can act as a man-in-the-middle (MITM) between the device and the origins of its web content. Any content fetched over HTTP is vulnerable to the network attacker, who can inject arbitrary malicious scripts into any HTTP origin.

#### Web Security

The web content of a hybrid app is governed by the same-origin policy (SOP). The origin of web content is defined by its protocol (HTTP or HTTPS), domain, and port number [2]. SOP is enforced by all embedded web browsers used in hybrid frameworks (see Section II-B). For example, if an app’s web content includes an iframe with an ad, SOP prevents scripts in this ad from reading or modifying any non-trivial DOM attributes of the app’s own content.

Scripts from ad brokers, analytics services, and social networks are usually included directly into the app’s web content and run in the app’s origin. For instance, an app may include a script from an ad syndicator, which creates an iframe and fetches an ad to display within it. The syndicator’s script runs in the app’s origin, but the actual ad runs in its own origin, isolated from the rest of the app’s content by SOP. In our threat model, we consider malicious advertisers but not malicious ad brokers, as the latter are trusted by app developers and their web code is indistinguishable from the app’s own code under SOP.

#### Local Security

The local half of the hybrid app is provided by the hybrid framework, and its security model is determined by the OS, which mediates access to device resources. This model differs significantly from the web security model described in Section III-A.

- **Android**: Uses static permissions (130 as of this writing). An app requests them at installation, and the user can either grant all or decline to install the app.
- **Windows Phone 7.1**: Has 28 static install-time permissions [30].
- **BlackBerry OS 5 and 6**: Has 20 permissions in three categories: connections (6), interactions (10), and user data (4) [3]. Unlike other mobile OSes, BlackBerry OS allows the user to grant only a subset of requested permissions.
- **iOS**: Uses dynamic run-time access control. When an app accesses a resource for the first time, iOS prompts the user to grant the permission. iOS 6 has only a few permissions, controlling access to location, social networks, address book, calendar, Bluetooth, and camera.

Fracking vulnerabilities affect all platforms, regardless of their access-control model, including desktop platforms like macOS that do not rely on user-granted permissions. Fracking is more dangerous when permissions are coarse-grained, as a single vulnerability can expose more native resources. For example, Windows Phone 7.1 has a single permission for all sensors (ID CAP SENSORS). If a hybrid app requests this permission and exposes it to untrusted web content, the latter can access any sensor on the device.

#### Hybrid Security

The security of hybrid apps depends on subtle trust relationships. On a permission-based platform like Android, the app requests access to device resources from the user. The user grants these permissions to the app but not to foreign-origin content (such as ads) included in the app. The app owner trusts the ad broker and includes the broker’s scripts into its own origin. These scripts create iframes and display ads in them. Neither the user, the app, nor the ad broker trusts the advertisers and their content, so ads and other foreign-origin content are isolated in iframes, where SOP can block them from accessing other parties’ resources.

Hybrid frameworks must ensure that web content from untrusted domains included in a hybrid app cannot access device resources available to the app. To achieve this, hybrid frameworks must carefully integrate two very different security policies: the same-origin policy governing the app’s web content and the OS access-control policy governing the framework’s local half. Specifically, hybrid frameworks must correctly propagate the same-origin policy to local objects outside the web browser when these objects are accessible from inside the browser via the framework’s bridges.

In practice, hybrid frameworks attempt to enforce one of the following two properties:
1. **NoBridge**: Web content from unauthorized domains cannot access the bridges created by the framework.
2. **NoLoad**: The app cannot load any content from untrusted domains.

Both properties prevent undesired access to resources, but NoLoad breaks the business model of many free apps because it prevents them from displaying foreign-origin ads. In Section VII, we show that the frameworks' defenses are inconsistent and apply different policies in different parts of the same code, often incorrectly.

### Bridges

The primary function of any hybrid framework is to provide bridges that enable the app’s web content to access local device resources. The app does not invoke these bridges directly but uses the framework’s JavaScript library, which presents a structured, platform-independent API for resource access. This library internally invokes the bridges, making the mechanics of different bridge architectures transparent to the app.

To enable asynchronous resource access, frameworks often provide separate web-to-local bridges (for invoking a local function) and local-to-web bridges (for receiving the result). With this separation, JavaScript executing in the embedded browser does not block while the device is accessing the resource.

#### Web-to-Local Bridges

**Interfaces**: Several embedded browsers allow local code to expose arbitrary functions to JavaScript running within the browser. For example, `addJavascriptInterface` in Android’s WebView makes local Java objects visible to JavaScript. Other platforms have similar functionalities, such as `windowScriptObject` in macOS and `ScriptEngine.addExtension` in BlackBerry WebWorks.

This technique is used by frameworks like PhoneGap, AppCelerator Titanium, and Sencha Touch to enable direct access to local device resources by web content. On Android prior to API level 17, these interfaces are generically insecure. Malicious JavaScript can use the Java reflection API to invoke any method of any Java object exposed via `addJavascriptInterface` and take control of the local side of the application. Starting from Android API level 17, only methods explicitly annotated with `@JavascriptInterface` are visible in the Java objects exposed to WebView.

**Events**: Another common mechanism for the local half of the framework to receive messages from the web half is via various JavaScript events. The local half must override the event handlers in the embedded browser. JavaScript on the web side triggers events and encodes messages in arbitrary strings, which the handlers intercept and decode.

For example, WebView, Android’s embedded browser class, allows local Java code to customize the handling of `prompt`, `alert`, and `confirm` events by overriding the `onJsPrompt`, `onJsAlert`, and `onJsConfirm` functions, respectively. This bridge mechanism is used by PhoneGap on Android 2.3 due to a bug that precludes the use of an interface-based bridge. On the local side, PhoneGap implements a custom `onJsPrompt` handler. On the web side, JavaScript makes a `prompt` call to invoke this handler; the name and arguments of the local object to be called are serialized and sent to the local side by encoding them as prompt messages. MoSync on Android uses a similar mechanism.

Similarly, WebBrowser, the embedded browser class in Windows Phone, allows local C# code to install custom handlers for `ScriptNotify` events. JavaScript on the web side uses `window.external.Notify` to trigger these events and invoke local functions. This technique is used by PhoneGap on Windows Phone.

Event-based bridges can be synchronous (JavaScript pauses until the call returns) or asynchronous (the call returns a placeholder or null, but the actual data is returned later via a local-to-web bridge).

**URL Loading Interposition**: Embedded browsers typically allow local code to interpose on and handle URL loading within the browser. This feature is intended to support the implementation of custom protocols, but hybrid frameworks overload it so that the web half of the framework can pass arbitrary messages to the local half by encoding them in the URL, thereby constructing a web-to-local bridge.

URLs intended for interposition cannot be loaded in the main browser frame, as this would block the entire app. Instead, hybrid frameworks use one of the following methods:

- **Iframe Method**: JavaScript on the web side can create an invisible iframe and set its source to an arbitrary URL. The loading of this URL is intercepted by a handler supplied by the framework’s local half, without affecting the execution of the main frame on the web side. The handler decodes the URL and passes the message to the local half. For example, PhoneGap on iOS creates its own subclass of `NSURLProtocol` named `CDVURLProtocol` and calls `registerClass` to intercept URLs loaded in the `UIWebView` embedded browser. PhoneGap’s JavaScript library creates an iframe whose URL starts with `gap://`, and the local half intercepts the loading of this URL and calls the corresponding local function.
- **XMLHttpRequest Method**: As an alternative to iframe-based communication, JavaScript on the web side can make an asynchronous `XMLHttpRequest` to a URL, which is intercepted and decoded by the framework’s local handler. PhoneGap uses this technique on iOS in addition to the iframe URL interception.

**Cookies (Obsolete)**: The framework’s web half can set cookies that are readable by the local half, and vice versa. PhoneGap used this technique on older platforms like BlackBerry 4.x.

#### Local-to-Web Bridges

Local-to-web bridges are used by the framework’s local half to return data to the framework’s JavaScript library on the web side. Some data, such as device ID, can be returned synchronously via the function’s return value, but usually, the results of device access (e.g., contact list, local files) are returned asynchronously to avoid blocking web code while access is performed.

**Multiplexing a Web-to-Local Bridge**: Messages from the local half to the web half can be sent over the same bridge as the web-to-local messages. There are two asynchronous mechanisms for doing this:

- **Event-Based Mechanism**: Local code can trigger events to notify the JavaScript library that there is data waiting for it. JavaScript then reads the data via one of the web-to-local bridges from Section IV-A. This mechanism, using online/offline events, is employed by PhoneGap on Android.
- **Polling Mechanism**: On many platforms, event-based synchronization is not available if the framework’s JavaScript is running inside an iframe. Many embedded browsers, including WebView on Android, UIWebView on iOS, and WebBrowser on Windows Phone, incorrectly deliver some events to the main frame even if the handler is registered inside an iframe. This issue is sometimes referred to as "frame confusion" [17]. The alternative is to have JavaScript poll the web-to-local bridge at periodic intervals to check whether data is ready. PhoneGap on Android supports this technique.

**Interfaces**: Many embedded browsers have helper functions that let local code execute arbitrary JavaScript inside the browser. For example, Android’s WebView has a private reflection API and the `loadUrl` function, which allows Java code to load a `javascript:` URL inside the browser. PhoneGap on Android uses both. PhoneGap on iOS, BlackBerry, and Windows Phone uses `stringByEvaluatingJavaScriptFromString`, `ScriptEngine.executeScript`, and `WebBrowser.InvokeScript` functions, respectively, to execute JavaScript inside the corresponding embedded browsers.

#### Custom Cross-Origin Communication

As mentioned, many local-to-web bridges do not work if the framework’s JavaScript library is running inside an iframe. For example, on iOS and Windows Phone 7, bugs in embedded browsers cause the data to be returned to the main frame rather than the iframe that invoked the bridge.

This forces app developers to implement "home-brewed" cross-origin mechanisms to deliver the data from the device to the iframe that needs it. These custom, hand-coded hacks open holes in the same-origin policy and can introduce serious security vulnerabilities, including cross-site scripting (e.g., see [25]). While interesting, this class of vulnerabilities is not specific to hybrid apps and is left for future work.

### Fracking

As explained in Section III-C, the hybrid framework must ensure that untrusted foreign-origin content included in the app, such as ads, cannot access local device resources such as the file system, contacts, SMS, etc., via the bridges provided by the framework. Unauthorized access can be exploited for privacy violations (e.g., stealing the user’s contacts list), security breaches (e.g., using personal data for targeted phishing), monetary gains (e.g., sending SMS to premium numbers), or denial of service (e.g., causing the phone to vibrate or beep incessantly).

To prevent unauthorized resource access by foreign-origin content, hybrid frameworks must implement robust security measures and consistently enforce the same-origin policy across both the web and local halves of the app.