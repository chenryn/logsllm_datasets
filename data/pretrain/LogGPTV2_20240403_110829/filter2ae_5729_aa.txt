原文：https://www.apriorit.com/dev-blog/367-anti-reverse-engineering-protection-techniques-to-use-before-releasing-software
# 前言
在软件方面，逆向工程是研究程序以获得有关其工作原理和使用的算法的封闭信息的过程。虽然逆向工程可以用于[合法目的](https://www.apriorit.com/competences/reverse-engineering "合法目的")，特别是恶意软件分析或无证系统研究，但提起它，第一反应还是黑客用来进行非法活动的常用手段。
# 反调试方法简介
这里有几种分析软件的方法：  
1.使用数据包嗅探器分析通过网络交换的数据。  
2.软件二进制代码反汇编  
3.二进制或字节码的反编译，以高级编程语言重新创建源代码。  
本文考虑了当下流行的防破解和反逆向工程保护技术，即Windows中的反调试方法。要完全保护软件免受逆向工程的影响是不可能的。各种反逆向工程技术的主要目标就是尽可能地使过程复杂化。  
要想防御，得先知道攻击来自哪里。本文介绍了流行的反调试技术，循序渐进，并且详细阐明如何绕过它们。我们不会考虑不同的软件保护理论，只考虑实际例子。
# IsDebuggerPresent
也许最简单的反调试方法是调用`IsDebuggerPresent`函数。此函数检测用户模式调试器是否正在调试调用进程。最简单的一个例子：
    int main()
    {
        if (IsDebuggerPresent())
        {
            std::cout = _WIN32_WINNT_WIN8; }
    BOOL IsVistaOrHigher() { return GetVersionWord() >= _WIN32_WINNT_VISTA; }
# 如何绕过IsDebuggerPresent检查
若要绕过IsDebuggerPresent检查，请在执行检查代码之前将BeingDebugged设置为0。DLL注入可以用来做到这一点:
    mov eax, dword ptr fs:[0x30]  
    mov byte ptr ds:[eax+2], 0
对于x64进程:
    DWORD64 dwpeb = __readgsqword(0x60);
    *((PBYTE)(dwpeb + 2)) = 0;
# TLS回调
检查主函数中是否存在调试器并不是最好的主意，因为在查看反汇编程序列表时，逆向人员首先会查看这个位置。  
在主函数中实现的检查可以通过NOP指令删除，从而解除保护。如果使用CRT库，主线程在将控制转移到主函数之前将已经有一个特定的调用堆栈。因此，执行调试器状态检查的好地方是在TLS回调中。回调函数将在可执行模块入口点调用之前调用。
    #pragma section(".CRT$XLY", long, read)
    __declspec(thread) int var = 0xDEADBEEF;
    VOID NTAnopPI TlsCallback(PVOID DllHandle, DWORD Reason, VOID Reserved)
    {
        var = 0xB15BADB0; // Required for TLS Callback call
        if (IsDebuggerPresent())
        {
            MessageBoxA(NULL, "Stop debugging program!", "Error", MB_OK | MB_ICONERROR);
            TerminateProcess(GetCurrentProcess(), 0xBABEFACE);
        }
    }
    __declspec(allocate(".CRT$XLY"))PIMAGE_TLS_CALLBACK g_tlsCallback = TlsCallback;
# NtGlobalFlag
在WindowsNT中，有一组标志存储在全局变量NtGlobalFlag中，这在整个系统中是常见的。启动时，将使用系统注册表项中的值初始化NtGlobalFlag全局系统变量：
    [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\GlobalFlag]
此变量值用于系统跟踪、调试和控制。变量标志未被文档化，但是SDK包含gflags实用程序，它允许您编辑全局标志值。PEB结构还包括NtGlobalFlag字段，它的位结构不对应于NtGlobalFlag全局系统变量。调试过程中，在NtGlobalFlag字段中设置这些标志:
    FLG_HEAP_ENABLE_TAIL_CHECK (0x10)
    FLG_HEAP_ENABLE_FREE_CHECK (0x20)
    FLG_HEAP_VALIDATE_PARAMETERS (0x40)
若要检查是否已使用调试器启动进程，请检查PEB结构中NtGlobalFlag字段的值。在x32和x64系统中,该字段位于PEB结构的开始处的0x068和0x0bc偏移处。
    0:000> dt _PEB NtGlobalFlag @$peb  
    ntdll!_PEB 
       +0x068 NtGlobalFlag : 0x70
对于64位进程：
    0:000> dt _PEB NtGlobalFlag @$peb
    ntdll!_PEB
       +0x0bc NtGlobalFlag : 0x70
以下代码片段是基于NtGlobalFlag标志检查的反调试保护示例：
    #define FLG_HEAP_ENABLE_TAIL_CHECK   0x10
    #define FLG_HEAP_ENABLE_FREE_CHECK   0x20
    #define FLG_HEAP_VALIDATE_PARAMETERS 0x40
    #define NT_GLOBAL_FLAG_DEBUGGED (FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK | FLG_HEAP_VALIDATE_PARAMETERS)
    void CheckNtGlobalFlag()
    {
        PVOID pPeb = GetPEB();
        PVOID pPeb64 = GetPEB64();
        DWORD offsetNtGlobalFlag = 0;
    #ifdef _WIN64
        offsetNtGlobalFlag = 0xBC;
    #else
        offsetNtGlobalFlag = 0x68;
    #endif
        DWORD NtGlobalFlag = *(PDWORD)((PBYTE)pPeb + offsetNtGlobalFlag);
        if (NtGlobalFlag & NT_GLOBAL_FLAG_DEBUGGED)
        {
            std::cout << "Stop debugging program!" << std::endl;
            exit(-1);
        }
        if (pPeb64)
        {
            DWORD NtGlobalFlagWow64 = *(PDWORD)((PBYTE)pPeb64 + 0xBC);
            if (NtGlobalFlagWow64 & NT_GLOBAL_FLAG_DEBUGGED)
            {
                std::cout << "Stop debugging program!" << std::endl;