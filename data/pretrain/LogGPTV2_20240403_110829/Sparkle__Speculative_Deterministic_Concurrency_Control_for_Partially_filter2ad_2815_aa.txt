title:Sparkle: Speculative Deterministic Concurrency Control for Partially
Replicated Transactional Stores
author:Zhongmiao Li and
Paolo Romano and
Peter Van Roy
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Sparkle: Speculative Deterministic Concurrency
Control for Partially Replicated Transactional Stores
Zhongmiao Li1,2, Paolo Romano2, and Peter Van Roy1
1Université catholique de Louvain, 2Instituto Superior Técnico, Lisbon University & INESC-ID
using a deterministic concurrency control, which ensures that
their serialization order is equivalent to the ﬁnal order [19].
Several recent works [5], [32], [42] have focused on address-
ing what is arguably the key scalability limitation of the classic
SMR approach, namely its full replication model, by sharding
applications’ state across multiple partitions, which are then
replicated across a number of machines. This approach, which
we call Partially Replicated State Machine (PRSM), allows,
at least theoretically, for scaling out the volume of data main-
tained by the platform, as well as the achievable throughput,
by increasing the number of data partitions.
Abstract—Modern transactional platforms strive to jointly
ensure ACID consistency and high scalability. In order to pursue
these antagonistic goals, several recent systems have revisited the
classical State Machine Replication (SMR) approach in order to
support sharding of application state across multiple data parti-
tions and partial replication. By promoting and exploiting locality
principles, these systems, which we call Partially Replicated State
Machines (PRSMs), can achieve scalability levels unparalleled by
classic SMR. Yet, existing PRSM systems suffer from two major
limitations: 1) they rely on a single thread to execute or serialize
transactions within a partition, thus failing to fully untap the
parallelism of multi-core architectures, and/or 2) they rely on
the ability to accurately predict the data items to be accessed by
transactions, which is non-trivial for complex applications.
This paper proposes Sparkle, an innovative deterministic
concurrency control that enhances the throughput of state of
the art PRSM systems by more than one order of magnitude
under high contention, through the joint use of speculative
transaction processing and scheduling techniques. On the one
hand, speculation allows Sparkle to take full advantage of modern
multi-core micro-processors, while avoiding any assumption on
the a-priori knowledge of the transactions’ access patterns, which
increases its generality and widens the scope of its scalability.
Transaction scheduling techniques, on the other hand, are aimed
to maximize the efﬁciency of speculative processing.
I. INTRODUCTION
Nowadays,
large-scale online services are faced with a
number of challenging requirements. On the one hand, to
tame the growing complexity of applications, distributed data
storage systems have started embracing strong, transactional,
semantics [6]. On the other hand, a number of works [20]
have shown that the proﬁtability of large-scale online services
hinges on their ability to deliver low latency and high avail-
ability — an arduous goal given the sheer volume of trafﬁc
and data that modern applications need to cope with.
The above trends have fostered signiﬁcant interest in the
design of high performance transactional platforms capable
of ensuring strong consistency and fault-tolerance even when
deployed on large scale infrastructures, e.g., [5], [32], [42].
The techniques proposed by recent works in this area extend
the classic State-Machine Replication (SMR) approach [40], a
long-studied technique for building strongly consistent, fault
tolerant systems. In a nutshell, SMR operates according to
an order then execute approach: replicas rely on a consensus
protocol [26] to agree, in a fault-tolerant way, on a total order
in which transactions should be executed — which we refer to
as ﬁnal order. Transactions are then executed at each replica
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00029
164
However, the partial replication model at the basis of the
PRSM approach introduces also a major source of complexity:
how to efﬁciently regulate the execution of transactions that
access multiple partitions. While single-partition transactions
(SPTs) can be processed at the partitions they access as in
classic SMR systems, multi-partition transactions (MPTs) need
to access data hosted at remote partitions and, as such, the
deterministic concurrency control also needs to cope with
distributed inter-partition conﬂicts and enforce a transaction
serialization order deterministically across replicas.
A simple approach to ensure that, at each partition’s replica,
the transactions serialization order is equivalent to the ﬁnal
order is to execute all the transactions in a partition’s replica
sequentially [5], [23]. Unfortunately, this solution limits the
maximum throughput achievable by any partition to the pro-
cessing rate of a single thread, failing to fully untap the
performance potential of modern multi-core systems.
Other approaches, like Calvin [42], enable multiple threads
to process a partition’s transactions concurrently [34], [42],
but employ deterministic concurrency control techniques that
suffer from two crucial limitations: (i) they rely on a single
thread to schedule, in a deterministic way, the execution of
all transactions, which inherently limits the scalability of the
solution, and (ii) they assume the ability to accurately predict
the data items to be accessed by transactions, which is a non-
trivial task for complex, real-life applications [1].
This work tackles the above discussed limitations by intro-
ducing Sparkle, a novel distributed deterministic concurrency
control that enhances the throughput of state of the art PRSM
systems by more than one order of magnitude through the use
of speculative transaction processing techniques.
Speculation is used in Sparkle to allow transactions to
be processed “out of order”, i.e., to be tentatively executed
in a serialization order that may potentially differ from the
one established by the replica coordination phase. Thanks to
speculative execution, not only can Sparkle take full advantage
of modern multi-core CPUs — by avoiding inherently non-
scalable designs that rely on a single thread for executing [5]
or scheduling transactions [42]. It also avoids any assumption
on the a-priori knowledge of the transactions’ working sets,
thus increasing the solution’s generality.
The key challenge one has to cope with when designing
speculative systems, like Sparkle, is to minimize the cost and
frequency of misspeculation, which, in Sparkle occur when
two conﬂicting transactions are speculatively executed in a
serialization order that contradicts the ﬁnal order dictated by
the replica coordination phase. This problem is particularly
exacerbated in PRSM systems, since misspeculations that
affect a MPT (e.g., exposing inconsistent data to remote
partitions) can only be detected by exchanging information
among remote partitions. As such, the latency to conﬁrm the
correctness of speculative MPTs is order of magnitudes larger
than for the case of SPTs, and can severely hinder throughput.
Sparkle tackles these challenges via two key, novel, tech-
niques, which represent the main contributions of this work:
Sparkle’s deterministic concurrency control, which combines
optimistic techniques with a timestamp-based locking scheme.
The former aims to enhance parallelism. The latter increases
the chances that the spontaneous serialization order of transac-
tions matches the one established by the replica coordination
phase and allows for detecting possible divergences in a timely
way, reducing the frequency and cost of misspeculations.
Sparkle strives to remove the inter-partition conﬁrmation
phase of MPTs from the critical path of execution of other
transactions via two complementary approaches: i) controlling,
in a deterministic way,
the ﬁnal order of transactions, so
as to schedule MPTs that access the same set of partitions
consecutively; ii) taking advantage of this scheduling tech-
nique to establish the correctness of MPTs via a distributed
coordination phase, which we call Speculative Conﬁrmation
(SC). SC is designed to minimize overhead, by exploiting
solely information opportunistically piggybacked on remote
read messages exchanged by MPTs, and maximize parallelism,
by removing the MPT coordination phase from the critical path
of transaction processing.
Via an extensive experimental study, based on both synthetic
and standard benchmarks, we show that Sparkle can achieve
more than one order of magnitude throughput gains versus
state of the art PRSM systems [5], [42], while ensuring robust
performance even when faced with challenging workloads
characterized by high contention and frequent MPTs.
The reminder of the paper is organized as follows. §II
discusses related work. §III deﬁnes the assumed system model
and §IV describes the execution model of generic PRSM sys-
tems. §V details the Sparkle protocol, which is experimentally
evaluated in §VI. §VII concludes the paper.
II. RELATED WORK
Transactional stores. A large body of works has investigated
how to build consistent, yet scalable,
transactional stores.
165
Existing systems can be coarsely classiﬁed based on whether
they adopt the deferred update replication (DUR) [22] or the
state-machine replication (SMR) [26] approaches. In DUR-
based systems, e.g. [6], [25], [31], [45], transactions are ﬁrst
locally executed at a single replica and then globally veriﬁed,
via an agreement protocol based on consensus [22] and/or Two
Phase Commit [16]. Speculation has been employed in DUR-
based solutions either at the level of the local concurrency
control scheme (e.g., exposing pre-committed state rather than
blocking processing [31], [36]) or at the consensus level (e.g.,
skipping communication steps in absence of conﬂicts among
concurrently submitted transactions [25], [35], [45]).
Some
approaches
Unlike DUR-systems, with SMR, e.g., [11], [42], replicas
ﬁrst agree on the serialization order of transactions, using
consensus-based coordination schemes, and then execute them
using a deterministic concurrency control. The DUR and
SMR approaches have complementary pros and cons and are
ﬁt for different workloads [7], [8], [44]. The focus of this
work is on SMR-based systems, which excel in contention-
prone workloads, whereas DUR systems can suffer from lock-
convoying and high abort rates [44].
Partially-replicated state machines. The PRSM ap-
proach [5], [30], [32], [42] extends the classic SMR scheme
to support a more scalable partial replication model. Existing
PRSM systems rely on diverse techniques to implement a
deterministic concurrency control.
eliminate
the possibility of non-
deterministic execution [5], [23] by allowing the execution
of only a single thread per partition. This approach spares
from the use (and cost) of any concurrency control, but it
also inherently limits the maximum throughput achievable
by any partition to the processing rate of a single thread.
Some works [23], [27] have argued that this limitation can be
circumvented by using a larger number of smaller partitions,
delegating each partition to a different thread of the same
machine. However, this approach can increase signiﬁcantly the
frequency of MPTs, since, when using smaller partitions, it
is more likely for transactions to access data scattered over
multiple partitions. Accesses to multiple partitions, even if
maintained by the same machine, impose severe synchroniza-
tion overheads among the different instances of the same MPT
running at different partitions, which need to block until the
corresponding remote instances execute and disseminate data
to other partitions (see §VI).
Other systems, e.g., [34], [42], conversely, allow for con-
current execution of transactions and enforce deterministic
execution by relying on a single thread to acquire, according
to the ﬁnal order, the locks required by transactions, before ex-
ecuting them. Unfortunately, as we show in Sec. VI, in typical
OLTP workloads dominated by short running transactions, the
scheduler thread quickly becomes a bottleneck as the degree of
parallelism increases. Further, in order to acquire all the locks
needed by a transaction before its execution, these solutions
require mechanisms for predicting the transaction’s data access
pattern — a non-trivial problem in complex real-life appli-
cations [1]. The solutions proposed in the literature to cope
with this issue are quite unsatisfactory: existing techniques
either require programmers to conservatively over-estimate
the transaction’s working set [34] (e.g., at the granularity of
transaction tables, even though transactions need to access just
a few tuples), or they estimate it by simulating the transactions
execution, and then abort them if the working set’s estimation
turns out to be inaccurate during (real) execution. The former
approach can severely hinder parallelism. The latter can impair
performance in workloads that contain even a small fraction
of, so called, dependent transactions [42], i.e., whose set of
accessed data items is inﬂuenced by the snapshot they observe.
Sparkle tackles these limitations by combining speculative
transaction processing techniques — which exploit out of
order processing techniques to enhance parallelism with no a
priori knowledge of transactions’ working sets — and schedul-
ing mechanisms — which redeﬁne, in a deterministic way, the
serialization order of transactions established by the ordering
phase to minimize the cost of detecting misspeculations.
Deterministic execution. The problem of designing efﬁcient
deterministic concurrency controls has also been studied for
classical SMR systems adopting a full replication model [18],
[19], [24], [33], [36]. Some of these works, e.g., [19], [24],
[36], employ speculative transaction processing techniques, as
in Sparkle. Though, unlike these solutions, Sparkle targets a
partial replication model, which, as already discussed, raises
additional challenges related to the processing of MPTs.
Analogously to Sparkle, Eve [24] incorporates scheduling
techniques to maximize the efﬁciency of speculation. However,
unlike Sparkle, Eve’s scheduling mechanism requires a priori
knowledge on transactions’ conﬂict patterns.
The deterministic concurrency control of Sparkle has re-
lations also with the works on deterministic execution of
multi-threaded applications, typically aimed at debugging and
testing [2], [3], [9], [10], [39]. These mechanisms intercept
all non-deterministic events affecting threads’ execution (to
be later replayed). In the context of SMR/PRSM systems,
though, a deterministic concurrency control scheme has to
tackle a different problem: ensuring that the serialization order
of transactions is equivalent to the one established by the
replica coordination phase.
III. SYSTEM AND TRANSACTION MODEL
System model. We consider the typical system model assumed
by PRSM approaches, e.g., [5], [30], [42], in which application
data is sharded across a predetermined number of partitions,
each of which is replicated over a set of servers, which
we refer to as replication group. In the following, we use
the terms partition’s replica and server, interchangeably. The
architecture illustrated in Fig. 1 depicts a possible scenario, in
which every partition is replicated in every data center. This
deployment provides disaster tolerance, while allowing MPTs
to be ordered and executed without requiring communication
across data centers [42]. However, our model is generic enough
3 Dispatching
4 Execution
DC1
DC2
Partition1
Partition2
Replication 
group1
Replication 
group2
Partition3
Replication 
group3
Partition1
Partition2
Partition3
ng
1 Batching
2 Replication
1 Batchingng
Fig. 1: Example of a typical deployment scenario for Sparkle.
to support scenarios in which certain data partitions may be
replicated only in a sub-set of the available data centers.
We assume that servers may crash and that there exists
a majority of correct replicas of each partition. While the
techniques adopted by existing PRSM systems during the
ordering phase are orthogonal to this work, they are normally
based on consensus protocols. Therefore, we assume that the
synchrony level
in the system is sufﬁcient (e.g., eventual
synchrony [12]) to allow implementing consensus [13].
Transaction model. Sparkle provides a basic CRUD transac-
tional interface (create/insert, read, update and delete). Trans-
actions can be aborted and re-executed multiple times before
they are committed. We call the various (re-)executions of a
transaction transaction instances.
Like in any PRSM system, e.g. [5], [30], [42], we assume
that the transaction logic is deterministic and that, given a
transaction and its input parameters, it is possible to identify
which data partitions it accesses. This information is exploited