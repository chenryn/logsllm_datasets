**CATEGORIZATION OF PROPOSED ANDROID SECURITY COUNTERMEASURES, THEIR POTENTIAL IMPLEMENTERS, AND ADDRESSED ATTACKER MODELS**

**Table III: Model Overview**

| **Problem Area** | **Focus** | **Solution** | **Possible Implementers** | **Considered Attacker Model** |
|------------------|-----------|--------------|---------------------------|-------------------------------|
| System Security Extension | Permission Evolution (Section IV-A) | Kirin, TaintDroid, Apex, Sorbet, QUIRE, IPC Inspection, XManDroid, Stowaway, PScout, Curbing Permissions, Decision Making Process, Using Personal Information, WHYPER, AutoCog, DescribeMe, User Study, Permissions Remystified | End Users, App Developers, OS Vendors | Malicious Apps, Unauthorized Access, Data Leakage |
| SDK / Tool-chain Extension | HCI Modifications |  |  |  |
| (Meta) Data Analysis |  |  |  |  |
| System Security Extension | Permission Revolution (Section IV-B) | Webification (Section IV-C), Programming-induced Leakage (Section IV-D), Software Distribution (Section IV-E), Binary Modifications, System Security Extensions, SDK / Tool-chain Modification, SDK / Tool-chain Extension, App Analysis, Market Solution, (Meta) Data Analysis, Software Update Mechanism (Section IV-G) | OS Vendors, App Developers, Market Operators | Malicious Apps, Code Injection, Data Leakage, Unauthorized Access |
| SDK / Tool-chain Extension |  | Saint, CRePE, TISSA, SE Android, TrustDroid, FlaskDroid, ASM, Compac, AdDroid, AdSplit, LayerCake, Aurasium, Dr. Android, Mr. Hide, I-ARM Droid, AppGuard, Boxify, Morbs, NoFrak, NoInjection, MalloDroid, CryptoLint, SSL API Redesign, SMV-Hunter, CHEX, SCanDroid, AndroidLeaks, FlowDroid, Meteor, MAST, Application Transparency, DroidRanger, DNADroid, RiskRanker, CHABADA, Collaborative Verification, MassVet, AppInk, SecUp |  |  |

**Key:**
- \( \checkmark \): Actor must implement solution/attacker capability fully addressed
- \( \circ \): Actor should/can participate in solution/attacker capability partially addressed
- \( \times \): Actor not involved/attacker capability not addressed

**IV. SYSTEMATIZATION OF RESEARCH AREAS IN APPIFIED ECOSYSTEMS**

Building on the differences between conventional and appified ecosystems, as well as the actor and global threat model of the Android ecosystem, we identify key research areas that need to be systematized. We consider a number of representative research papers for each field, discussing the challenges, the involved actors, their roles in causing and resolving specific problems, and the attacker capabilities assumed in the threat models.

**A. Permission Evolution**

The concept of permission-based access control for privileged resources is a fundamental aspect of Android's security design and has been extensively studied by the security research community.

**1. Challenges:**

We categorize the identified problems and challenges based on the most affected actors in the ecosystem: end users and app developers.

**a. Permission Comprehension and Attention by End Users:**

- **Challenge:** End users often struggle to understand the implications of permissions requested by apps, leading to potential security and privacy risks.
- **Solution:** Develop user-friendly interfaces and educational materials to enhance users' understanding and decision-making processes regarding app permissions.

**b. Permission Management by App Developers:**

- **Challenge:** App developers face difficulties in managing and documenting permissions, which can lead to over-privilege or under-privilege issues.
- **Solution:** Provide tools and guidelines to help developers manage permissions more effectively, ensuring that only necessary permissions are requested and documented clearly.

By addressing these challenges, we aim to improve the overall security and privacy of the Android ecosystem, making it more robust against various threats.