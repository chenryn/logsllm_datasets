                }
                #mainarea {
                        height: 31em;
                        display: flex;
                        justify-content: center;
                }
                .custom-select > select {
                        background: black;
                        color: white;
                        width: 100%;
                }
                #tomove, #frommove {
                        margin-left: 1em;
                        margin-right: 1em;
                }
                #row1 {
                        padding: 0;
                }
                #row1 > #title {
                        font-size: 1em;
                }
                #row1 > * {
                        width: 33%;
                }
                #start {
                        margin: 4em;
                }
                #timer {
                        top: 0;
                }
                #row1 > #lvl {
                        width: 9.3%;
                }
                #header, #row1 {
                        display: flex;
                        justify-content: space-between;
                        width: 100%;
                }
                #header {
                        display: flex;
                        justify-content: center;
                        flex-direction: column;
                }
                #row2 {
                        display: flex;
                        justify-content: center;
                        width: 100%;
                }
                #boardwrapper {
                        padding: 0em;
                }
::-webkit-scrollbar {
  -webkit-appearance: none;
  width: 7px;
}
::-webkit-scrollbar-thumb {
  border-radius: 4px;
  background-color: rgba(0, 255, 0, .5);
  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);
}
                HACKER CHESS
                00:00
    DIFFICULTY
    >Impossible
    >Unbeatable
    >Invincible
 'true');
    public $descriptorspec = array(
        0 => array("pipe","r"),
                1 => array("pipe","w"),
    );
    private $process;
    private $pipes;
    private $thinking_time;
    public function __construct()
    {
        $other_options = array('bypass_shell' => 'true');
        //echo "Stockfish options" . $_SESSION['thinking_time'];
        if (isset($_SESSION['thinking_time']) && is_numeric($_SESSION['thinking_time'])) {
            $this->thinking_time = $_SESSION['thinking_time'];
        } else {
            $this->thinking_time = 10;
        }
        $this->process = proc_open($this->binary, $this->descriptorspec, $this->pipes, $this->cwd, null, $this->other_options) ;
    }
    public function passUci()
    {
        if (is_resource($this->process)) {
            fwrite($this->pipes[0], "uci\n");
            fwrite($this->pipes[0], "ucinewgame\n");
            fwrite($this->pipes[0], "isready\n");
        }
    }
    public function passPosition(string $fen)
    {
        fwrite($this->pipes[0], "position fen $fen\n");
        fwrite($this->pipes[0], "go movetime $this->thinking_time\n");
    }
    public function readOutput()
    {
        while (true) {
            usleep(100);
            $s = fgets($this->pipes[1], 4096);
            $str .= $s;
            if (strpos(' '.$s, 'bestmove')) {
                break;
            }
        }
        return $s;
    }
    public function __toString()
    {
        return fgets($this->pipes[1], 4096);
    }
    public function __wakeup()
    {
        $this->process = proc_open($this->binary, $this->descriptorspec, $this->pipes, $this->cwd, null, $this->other_options) ;
        echo 'pipes[1], 4096).'-->';
    }
}
function applyCheatsAI(Chess $chess)
{
    $firstSquare = Board::SQUARES['a8'];
    $lastSquare  = Board::SQUARES['h1'];
    for ($i = $firstSquare; $i board[$i];
        if ($piece == null) {
            continue;
        }
        if ($piece->isPawn() && $piece->getColor() !== Piece::WHITE) {
            $chess->board[$i] = new Piece(Piece::QUEEN, Piece::BLACK);
        }
    }
}
final class MyHtmlOutput extends HtmlOutput
{
    /**
     * @return array>
     */
    private static function getAllowedMoves(Chess $chess, ?string $from = null): array
    {
        $moves = $chess->moves($from ? Board::SQUARES[$from] : null);
        $return = [];
        foreach ($moves as $move) {
            $return[$move->from][] = (string) $move->san;
        }
        return $return;
    }
    private static function isTurn(Chess $chess, Piece $piece): bool
    {
        return $piece->getColor() === $chess->turn;
    }
    /**
     * @param array $allowedMoves Moves resulting from self::getAllowedMoves()
     */
    private static function canMove(string $from, int $to, array $allowedMoves): bool
    {
        $toSan = Board::algebraic($to);
        if (!isset($allowedMoves[$from])) {
            return false;
        }
        $cleanMoves = \array_map(static function (string $san) use ($from): string {
            $check = \substr($san, -1);
            $equalsPos = \strpos($san, '=');
            if ('+' === $check || '#' === $check) {
                $san = \substr($san, 0, -1);
            } elseif ('O-O-O' === $san) {
                $san = 'e1' === $from ? 'c1' : 'c8';
            } elseif ('O-O' === $san) {
                $san = 'e1' === $from ? 'g1' : 'g8';
            } elseif (false !== $equalsPos) {
                $san = \substr($san, 0, $equalsPos);
            }
            return \substr($san, -2);
        }, $allowedMoves[$from]);
        return \in_array($toSan, $cleanMoves, true);
    }
    public function generateLinks(Chess $chess, ?string $from = null, $identifier = null): array
    {
        $links = [];
        $allowedMoves = self::getAllowedMoves($chess, $from);
        /** @var int $i */
        foreach ($chess->board as $i => $piece) {
            $url = null;
            $class = null;
            $san = Board::algebraic($i);
            if (null === $from) {
                // move not started
                if (null !== $piece && isset($allowedMoves[$san]) && self::isTurn($chess, $piece)) {
                    $url = $this->getStartUrl($san, $identifier);
                }
            } elseif ($from !== $san) {
                // move started
                if (self::canMove($from, $i, $allowedMoves)) {
                    if (null !== $movingPiece = $chess->board[Board::SQUARES[$from]]) {
                        if ('p' === $movingPiece->getType() && (0 === Board::rank($i) || 7 === Board::rank($i))) {
                            $url = $this->getPromotionUrl($from, $san, $identifier);
                        } else {
                            $url = $this->getEndUrl($from, $san, $identifier);
                        }
                    }
                    $class = 'target';