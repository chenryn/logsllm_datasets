有这么多 CI/CD 工具，比如 Jenkins、Spinnaker、螺丝刀等供你使用。在本节中，我们将展示如何将映像扫描集成到 GitHub 工作流中。GitHub 中的工作流是包含多个作业的可配置自动化流程。这是一个类似于詹金斯管道的概念，但定义在 YAML 格式。映像扫描的简单工作流程就像定义一个触发器。通常在推送拉请求或提交时完成，建立构建环境，例如 Ubuntu。
然后定义工作流程中的步骤:
1.  看看公关部门。
2.  从分支构建映像。
3.  将映像推送到注册表-这是可选的。当映像在本地构建时，您应该能够启动映像扫描仪来扫描映像。
4.  扫描新建立或推送的映像。
5.  如果发生策略违规，工作流将失败。
以下是 GitHub 中定义的示例工作流:
```
name: CI
...
  build:
    runs-on: ubuntu-latest
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    # Runs a set of commands using the runners shell
    - name: Build and Push
      env:
        DOCKER_SECRET: ${{ secrets.DOCKER_SECRET }} 
      run: |
        cd master/chapter9 && echo "Build Docker Image"
        docker login -u kaizheh -p ${DOCKER_SECRET}
        docker build -t kaizheh/anchore-cli . && docker push kaizheh/anchore-cli
    - name: Scan
      env:
        ANCHORE_CLI_URL: ${{ secrets.ANCHORE_CLI_URL }} 
        ANCHORE_CLI_USER:  ${{ secrets.ANCHORE_CLI_USER }}
        ANCHORE_CLI_PASS:  ${{ secrets.ANCHORE_CLI_PASS }}
      run: |      
        pip install anchorecli            # install anchore-cli
        export PATH="$HOME/.local/bin/:$PATH"       
        img="kaizheh/anchore-cli"
        anchore-cli image add $img        # add image
        sha=$(anchore-cli --json --api-version=0.2.4 image get $img | jq .[0].imageDigest -r)                   # get sha value
        anchore-cli image wait $img       # wait for image analyzed
        anchore-cli --json evaluate check $sha --tag $img # evaluate       
    - name: Post Scan
      run: |
        # Slack to notify developers scan result or invite new reviewer if failed
        exit 1  # purposely ends here
```
在构建管道的第一步中，我使用了`checkout` GitHub 动作来检查分支。工作流的 GitHub 动作就像编程语言的函数。它封装了你不需要知道的细节，但是为你执行任务。它可能接受输入参数并返回结果。在第二步中，我们运行了几个命令来构建映像`kaizheh/anchore-cli`并将映像推送到注册表。第三步，我们使用`anchore-cli`扫描映像(是的，我们使用 Anchore Engine 扫描我们自己的`anchore-cli`映像)。
请注意，我配置了 GitHub 机密来存储敏感信息，如 Docker Hub 访问令牌、Anchore 用户名和密码。在最后一步中，出于演示目的，我们故意失败了。但通常，最后一步会根据评论的建议，对映像扫描结果进行通知和响应。您将在 GitHub 中找到工作流的结果细节，如下所示:
![Figure 9.3 – GitHub image scanning workflow ](img/B15566_09_003.jpg)
图 9.3–GitHub 映像扫描工作流程
前面的截图展示了工作流程中每一步的状态，点进去就会发现每一步的细节。Anchore 还提供了一个名为 **Anchore Container Scan** 的映像扫描 GitHub 动作。它在新构建的映像上启动 Anchore Engine 扫描程序，并返回漏洞、清单和通过/失败策略评估，如果需要，可使用使构建失败。
## 部署阶段的扫描
虽然部署是一个无缝的过程，但出于两个原因，我想在关于在部署阶段进行映像扫描的单独章节中提出它:
*   当您将应用部署到 Kubernetes 集群时，可能会发现新的漏洞，即使它们在构建时通过了映像扫描检查。当它们在 Kubernetes 集群中运行时，最好在发现漏洞之前阻止它们。
*   映像扫描可以是 Kubernetes 中验证许可过程的一部分。
我们已经在 [*第 7 章*](07.html#_idTextAnchor186)*认证、授权和准入控制*中介绍了`ValidatingAdmissionWebhook`的概念。现在，让我们看看在工作负载被允许在 Kubernetes 集群中运行之前，映像扫描如何通过扫描其映像来帮助验证工作负载。映像扫描入场控制器是来自 Sysdig 的开源项目。它从即将部署的工作负载中扫描映像。如果映像扫描策略失败，工作负载将被拒绝。以下是工作流程图:
![Figure 9.4 – Image scanning admission workflow ](img/B15566_09_004.jpg)
图 9.4–映像扫描入院工作流程
上图显示了基于映像扫描验证的工作负载接纳过程:
1.  有一个工作负荷创建请求发送到`kube-apiserver`。
2.  `kube-apiserver`基于验证网络钩子配置将请求转发到注册的验证网络钩子服务器。
3.  验证网络钩子服务器从工作负载的规范中提取映像信息，并将其发送到锚定引擎应用编程接口服务器。
4.  根据映像扫描策略，Anchore Engine 会将策略评估结果作为验证决策返回给服务器。
5.  验证网络挂钩服务器将验证决定转发给`kube-apiserver`。
6.  `kube-apiserver`基于来自映像扫描策略评估结果的验证决定，接受或拒绝工作负载。
要部署映像扫描准入控制器，首先签出 GitHub 存储库([https://GitHub . com/sysdiglabs/映像扫描准入控制器](https://github.com/sysdiglabs/image-scanning-admission-controller))，然后运行以下命令:
```
$ make deploy
```
您应该会发现创建了 webhook 服务器和服务:
```
NAME                                              READY   STATUS    RESTARTS   AGE
pod/image-scan-k8s-webhook-controller-manager-0   1/1     Running   1          16s
NAME                                                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE
service/image-scan-k8s-webhook-controller-manager-service   ClusterIP   100.69.225.172           443/TCP   16s
service/webhook-server-service                              ClusterIP   100.68.111.117           443/TCP   8s
NAME                                                         READY   AGE
statefulset.apps/image-scan-k8s-webhook-controller-manager   1/1     16s
```
除了 webhook 服务器部署之外，脚本还创建了一个`ValidatingWebhookConfiguration`对象来注册映像扫描准入 webhook 服务器，该对象在`generic-validatingewebhookconfig.yaml`中定义为`kube-apiserver`:
```
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: validating-webhook-configuration
webhooks:
- name: validating-create-pods.k8s.io
  clientConfig:
    service:
      namespace: image-scan-k8s-webhook-system
      name: webhook-server-service
      path: /validating-create-pods
    caBundle: {{CA_BUNDLE}}
  rules:
  - operations:
    - CREATE
    apiGroups:
    - ""
    apiVersions:
    - "v1"
    resources:
    - pods
  failurePolicy: Fail
```
验证网络钩子配置对象基本上告诉`kube-apiserver`使用`/validating-create-pod`网址路径将任何 pod 创建请求转发到`image-scan-webhook-system`命名空间中的`webhook-server-service`。
您可以使用映像扫描许可控制器提供的测试用例来验证您的设置，如下所示:
```
$ make test
```
在测试中，三个不同的 Pod 将部署在 Kubernetes 集群中。其中一个有违反映像扫描策略的严重漏洞。因此，具有严重漏洞的工作负载被拒绝，如下所示:
```
+ kubectl run --image=bitnami/nginx --restart=Never nginx
pod/nginx created
+ kubectl run --image=kaizheh/apache-struts2-cve-2017-5638 --restart=Never apache-struts2
Error from server (Image failed policy check: kaizheh/apache-struts2-cve-2017-5638): admission webhook "validating-create-pods.k8s.io" denied the request: Image failed policy check: kaizheh/apache-struts2-cve-2017-5638
+ kubectl run --image=alpine:3.2 --restart=Never alpine
pod/alpine created
```
前面的输出显示带有映像`kaizheh/apache-struts2-cve-2017-5638`的工作量被拒绝。该映像运行 Apache Struts 2 服务，该服务包含一个关键漏洞，CVSS 评分为 10([https://nvd.nist.gov/vuln/detail/CVE-2017-5638](https://nvd.nist.gov/vuln/detail/CVE-2017-5638))。虽然测试中的 CVE 是旧的，但你应该可以在更早的阶段发现它。但是，会发现新的漏洞，漏洞数据库会不断更新。为将要部署在 Kubernetes 集群中的任何工作负载设置一个网关守护设备至关重要。映像扫描作为验证许可对于 Kubernetes 部署来说是一个很好的安全实践。现在，让我们来谈谈在 Kubernetes 集群中的运行阶段对 T4 进行映像扫描。
## 运行时阶段的扫描
干得好！工作负载的映像在构建和部署阶段通过了映像扫描策略评估。但这仍然不意味着映像没有漏洞。记住，新的漏洞会被发现。通常，映像扫描仪使用的漏洞数据库会每隔几个小时更新一次。漏洞数据库更新后，您应该触发映像扫描程序来扫描 Kubernetes 集群中正在运行的映像。有几种方法可以做到这一点:
*   直接扫描每个工作节点上提取的映像。要扫描工作节点上的映像，可以使用 Sysdig([https://github.com/sysdiglabs/secure-inline-scan](https://github.com/sysdiglabs/secure-inline-scan))中的`secure-inline-scan`等工具。
*   在漏洞数据库更新后，直接定期扫描注册表中的映像。
同样，一旦您在使用中的映像中识别出个有影响的漏洞，您应该修补易受攻击的映像并重新部署它们以减少攻击面。
# 总结
在本章中，我们首先简单介绍了容器映像和漏洞。然后我们介绍了一个开源的映像扫描工具 Anchore Engine，并展示了如何使用`anchore-cli`进行映像扫描。最后，我们讨论了如何在三个不同的阶段将映像扫描集成到 CI/CD 管道中:构建、部署和运行时。映像扫描显示了在保护 DevOps 流方面的巨大价值。一个安全的 Kubernetes 集群需要保护整个 DevOps 流。
现在，您应该可以放心部署 Anchore Engine 并使用`anchore-cli`触发映像扫描了。一旦您在映像中发现任何漏洞，请使用 Anchore Engine 策略将其过滤掉，并了解其实际影响。我知道这需要时间，但是在你的配置项/光盘管道中设置映像扫描作为看门人是必要的，也是令人敬畏的。通过这样做，您将使您的 Kubernetes 集群更加安全。
在下一章中，我们将讨论 Kubernetes 集群中的资源管理和实时监控。
# 问题
让我们用一些问题来帮助您更好地理解这一章:
1.  哪个 Docker 命令可用于列出映像文件图层？
2.  根据 CVSS3 标准，什么样的漏洞得分范围被认为是高的？
3.  开始扫描映像的`anchore-cli`命令是什么？
4.  列出映像漏洞的`anchore-cli`命令是什么？
5.  使用 Anchore Engine 策略评估映像的`anchore-cli`命令是什么？
6.  为什么将映像扫描集成到 CI/CD 管道中如此重要？
# 进一步参考
*   要了解有关 Anchore Engine 的更多信息，请阅读:[https://docs.anchore.com/current/docs/engine/general/](https://docs.anchore.com/current/docs/engine/general/)
*   要了解有关 Anchore 扫描操作的更多信息:https://github . com/market/actions/Anchore-container-scan
*   想了解更多关于 Sysdig 的映像扫描准入控制器:[https://github . com/sysdiglabs/映像扫描准入控制器](https://github.com/sysdiglabs/image-scanning-admission-controller)
*   要了解更多关于 GitHub 动作的信息:[https://help.github.com/en/actions](https://help.github.com/en/actions)