User: 请完成其他领域的自动化脚本类任务如何在C++中使用线程池实现并行计算？

Assistant: 使用线程池可以将任务拆分成多个线程，从而实现并行计算。下面是一个简单的示例：

```c++
#include <iostream>
#include <vector>
#include <thread>
#include <queue>
#include <mutex>
#include <condition_variable>
#include <functional>

class ThreadPool {
public:
 explicit ThreadPool(size_t threadCount)
 : stop(false)
 {
 for (size_t i = 0; i < threadCount; ++i)
 workers.emplace_back(
 [this]() {
 for (;;) {
 std::function<void()> task;
 {
 std::unique_lock<std::mutex> lock(this->queue_mutex);
 this->condition.wait(lock, [this] {
 return this->stop || !this->tasks.empty();
 });
 if (this->stop && this->tasks.empty())
 return;
 task = std::move(this->tasks.front());
 this->tasks.pop();
 }
 task();
 }
 }
 );
 }

 template <typename F, typename... Args>
 auto addTask(F&& f, Args&&... args) -> std::future<typename std::result_of<F(Args...)>::type>
 {
 using return_type = typename std::result_of<F(Args...)>::type;

 auto task = std::make_shared<std::packaged_task<return_type()>>(std::bind(std::forward<F>(f), std::forward<Args>(args)...));

 std::future<return_type> result = task->get_future();
 {
 std::unique_lock<std::mutex> lock(queue_mutex);

 if (stop)
 throw std::runtime_error("addTask on stopped ThreadPool");

 tasks.emplace([task]() { (*task)(); });
 }
 condition.notify_one();
 return result;
 }

 ~ThreadPool()
 {
 {
 std::unique_lock<std::mutex> lock(queue_mutex);
 stop = true;
 }
 condition.notify_all();
 for (std::thread& worker : workers)
 worker.join();
 }

private:
 std::vector<std::thread> workers;
 std::queue<std::function<void()>> tasks;
 std::mutex queue_mutex;
 std::condition_variable condition;
 bool stop;
};

int main() {
 ThreadPool pool(4);
 std::vector<std::future<int>> results;

 for (int i = 0; i < 8; ++i) {
 results.emplace_back(
 pool.addTask([i] {
 std::cout << "working on task " << i << std::endl;
 std::this_thread::sleep_for(std::chrono::seconds(1));
 return i * i;
 })
 );
 }

 for (auto&& result : results)
 std::cout << result.get() << ' ';

 std::cout << std::endl;
 return 0;
}
```

这个示例中，我们创建了一个ThreadPool类来管理线程池，使用std::function和std::packaged_task来封装任务，使用std::future来获取任务结果。

在main函数中，我们创建了一个ThreadPool实例并添加了8个任务，每个任务都是计算i的平方，然后等待任务完成并输出结果。由于ThreadPool在析构时会等待所有任务完成，所以我们不需要显式等待任务完成。

此外，ThreadPool还提供了一个addTask成员函数，可以在运行时添加新的任务到线程池。我们可以使用该函数在程序运行期间动态地分配任务。