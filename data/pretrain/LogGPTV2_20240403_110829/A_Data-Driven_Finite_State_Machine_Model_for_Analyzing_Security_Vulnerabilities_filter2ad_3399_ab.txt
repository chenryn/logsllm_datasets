classified as input  validation  error, #5493 as a boundary 
condition  error,  and  so  on.  The  existence  of  three 
categories for the signed integer overflow  vulnerabilities 
suggest  that  the  code  executions  of  the  corresponding 
applications  contain  at  least  three  activities:  (1)  get  an 
input integer, (2) use the integer as the index to an array, 
and (3) execute a code referred to by a function pointer or 
a return address.  
Data on buffer overflow vulnerabilities also indicates 
the  existence  of  at  least  three  potentially  vulnerable 
activities:  (1)  get  input  string  (#6157:  interpreted  as an
input  validation  error),  (2)  copy  the  string  to  a  buffer 
(#5960:  interpreted  as a  boundary  condition  error),  and 
(3) handle data (e.g., return address) following the buffer 
(#4479:  interpreted  as a failure  to  handle  exceptional 
conditions). Again, each elementary activity provides an 
opportunity  to  apply  a  security  check.  For  example, 
programmers  can  either  check  the  input  length  in 
elementary  activity  1,  use  boundary-checked  string 
functions  (e.g.,  getns, strncpy)  in  elementary  activity  2, 
or  deploy  return  address  protection  techniques,  such  as 
StackGuard  [15]  and  split-stack  [16],  in  elementary 
activity 3. 
Similarly, an analysis of format string vulnerabilities
(i.e.,  user’s  input  strings  containing  format  directives, 
such  as  %n,  %x,  %d)  reinforces  the  validity  of  our 
observation: format string vulnerabilities are classified as 
input validation error (e.g., #1387 wu-ftpd remote format 
string  stack  overwrite  vulnerability),  access  validation 
error  (e.g.,  #2210  splitvt  format  string  vulnerability),  or 
boundary 
icecast
print_client()  format  string  vulnerability).  Therefore, 
format  string  vulnerabilities  also  involve  at  least  three 
elementary activities. 
(e.g.,  #2264 
condition 
error 
Observation 1 forms the basis of our FSM model. As 
we will see in Section 4, each elementary activity can be 
modeled  as  a  primitive  finite  state  machine  (pFSM) 
defined  by  a  predicate  which,  if  violated,  results  in  an 
exploit. Multiple activities performed on the same object 
form an operation, which is modeled as a FSM consisting 
of multiple pFSMs in series. 
Table 1: Example of Ambiguity among Vulnerability Categories 
Vulnerability 
#3163 Sendmail debugging 
function signed integer overflow*
#5493 FreeBSD System Call 
Signed Integer Buffer Overflow 
Vulnerability
#3958 rsync Signed Array Index 
Remote Code Execution 
Vulnerability
Description 
A negative input integer accepted as an 
array index 
A negative value supplied for the 
argument allowing exceeding the 
boundary of an array
A remotely supplied signed value used as 
an array index, allowing the corruption of 
a function pointer or a return address.
Elementary activity 
Get an input integer 
Assigned Category 
Input validation error 
Use the integer as the 
index to an array 
Boundary condition 
error 
Execute a code referred 
by a function pointer or a 
return address 
Access validation 
error 
* #3163 denotes the vulnerability with ID 3163 in Bugtraq. The original information about this vulnerability can be found at 
http://online.securityfocus.com/bid/3163.  Other Bugtraq vulnerabilities are also denoted in this way.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:06:47 UTC from IEEE Xplore.  Restrictions apply. 
Observation  2:  Exploiting  a  vulnerability  involves 
multiple  vulnerable  operations  on  several  objects. Let 
consider  again  the  example  #3163 Sendmail  debugging 
function  signed 
integer  overflow.  This  vulnerability 
involves  two  operations:  (a)  manipulate  the  input  integer 
(the  object  of  this  operation),  consisting  of  elementary 
activity 1 (get an input integer) and elementary activity 2 
(use  the  integer  as  the  index  to  an  array),  and  (b)
manipulate  the  function  pointer  (the  object  of  this 
operation),  consisting  of  elementary  activity  3  (execute  a 
code referred by a function pointer).  
involves 
Similarly, 
the  vulnerability  #5774  Null  HTTPD
remote  heap  overflow  vulnerability 
three 
operations  performed  on  three  objects:  (i)  copying  the 
oversized user input (the object) to a buffer allocated on a 
heap  memory,  which  permits  overwriting  pointers 
following  the  buffer,  (ii)  freeing  the  buffer  (the  object), 
which  allows  writing  a  user-specified  value  to  a  user-
specified 
location  (e.g.,  function  pointer),  and  (iii) 
executing  the  malicious  code  pointed  to  by  the  function 
pointer  (the  object).  Aside  from  the  heap  overflow  and 
signed  integer  overflow  vulnerabilities  shown  here,  stack 
buffer  overflow  and  format  string  vulnerability  also 
require  multiple  vulnerable  operations.  Thus  following 
observation  1,  since  each  operation  can  have  multiple 
pFSMs,  multiple  operations  will  then  be  a  chain  of  such 
pFSMs. 
Observation  3:  For  each  elementary  activity,  the 
vulnerability  data  and  corresponding  code  inspections 
allow us to define a predicate, which if violated, results in 
a  security  vulnerability. For  example,  in  the  vulnerability 
#3163  Sendmail  debugging 
integer 
overflow, an integer index x is assumed to be in the range 
[0,100],  but  the  implementation  only  checks  to  guarantee 
that  x  ≤  100,  hence  the  problem  (the  vulnerability): 
allowing x to be a negative index and underflow an array. 
The correct predicate to eliminate this vulnerability would 
be 0 ≤ x ≤ 100.  
function  signed 
the  operation,  satisfies 
4.  State Machine Approach to Vulnerability Analysis 
Our purpose in this section is to use our observations 
to  develop  an  FSM  characterization  of  the  vulnerable 
operations. The goal of this FSM is to reason whether the 
implemented operation, or more precisely each elementary 
activity  within 
the  derived 
predicate.  To  this  end,  we  take  three  steps:  (1)  we 
represent  each  elementary  activity  as  a  primitive  FSM 
(pFSM)  expressing  a  predicate  for  accepting  an  input 
object.  The  predicate  is  first  checked  with  respect  to  the 
specification and then with respect to the implementation. 
(2)  We  model  an  operation  on  an  object  as  a  series  of 
pFSMs.  (3)  We  cascade  the  operations  to  model  the 
vulnerable implementation. While our objective here is to 
reason 
that  a  vulnerability  (violation  of  a  derived 
predicate)  is  not  present  in  the  implementation,  we  shall 
see  that  the  process  of  this  reasoning  can  allow  us  to 
uncover a previously unknown vulnerability.  
in 
the 
function 
In  order  to  show  how  a  vulnerability  can  be  analyzed 
using an FSM, consider the Sendmail Debugging Function 
Signed  Integer  Overflow  Vulnerability  (#3163).  A  signed 
integer  overflow  condition  exists  in  writing  the  array 
tTvect[100] 
tTflag()  of  Sendmail 
application.  As  a  result,  an  attacker  can  overwrite  the 
global offset table (GOT) entry4 of the function setuid()5 to 
be  the  starting  point  of  attacker-specified  malicious  code 
(Mcode).  Two  operations  are  involved  in  exploiting  this 
vulnerability:  (1)  writing  debug  level  i  to  array  location 
tTvect[x]  (i  and  x  are  specified  by  the  user)  and  (2) 
manipulating the GOT entry of function setuid (represented 
as  addr_setuid  for  convenience  in  our  description).  The 
first  operation  consists  of  two  pFSMs  (activities):  (i) 
pFSM1 – get i and x, and (ii) pFSM2 – write i to tTvect[x].
The second operation consists of a single pFSM3 – call the 
function  referred  by  addr_setuid.  Recall  that  a  pFSM 
represents  a  predicate  for  accepting  an  input  object  with 
respect  to  the  specification  and  implementation.  This  is 
explicitly defined as follows: 
three 
request), 
transition 
i.e., 
the 
states.  The 
transitions  and 
respectively.  The 
rejected  according 
implementation  conforms 
Primitive FSM (pFSM). The primitive FSM consists of 
four 
transitions 
SPEC_ACPT  and  SPEC_REJ  depict  the  specification 
predicates of accepting and rejecting objects (e.g., a user or 
IMPL_REJ
a 
represents  the  condition  under  which  the  implementation 
rejects  what  should  be 
the 
specification. This transition depicts the expected or correct 
behavior, 
the 
specification.  A  dotted  transition  IMPL_ACPT  represents 
the condition under which an object that should be rejected 
according  to  the  specification  is  accepted  in  an  actual 
implementation.  This 
is  a  hidden  path 
representing a vulnerability. Three states are identified: (1) 
the  SPEC  check  state  (where  an  object  is  checked  against 
the  specification),  (2)  the  reject  state
 –  transition  to 
reject state indicates that the object is insecure, according to 
the specification, and (3) the accept state 
 – transition to 
accept state indicates that the object is considered as secure 
object. See Figure 2. 
transition 
to 
to 
Since  each  elementary  activity  is  simple,  it  is  feasible 
(using  the  data  and  the  application  code)  to  develop  a 
predicate and a corresponding pFSM. The pFSMs can then 
be  easily  combined  to  depict  FSM,  modeling  vulnerable 
operations and possible exploits. 
4 The  GOT  entry  is  a  function  pointer  to  a  specific  function.  Usually,  in 
position-independent  codes,  e.g.,  shared  libraries,  all  absolute  symbols 
must be located in the GOT table, leaving the code position-independent. 
A GOT  lookup  is  performed  to  decide  the  callee’s  entry  when  a  library 
function is called. 
5 The  published  exploit  chooses  setuid()  as  the  target  function  of  GOT
entry corruption, although the targets could be other functions. 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:06:47 UTC from IEEE Xplore.  Restrictions apply. 
SPEC check
state
SPEC_REJ
SPEC_ACPT
SPEC_ACPT
IMPL_REJ
T
T
P
P
C
C
A
A
_
_
L
L
P
P
M
M
I
I
Reject State
Accept State
Figure 2: Primitive FSM (pFSM) 
Figure 3 uses the semantic of the primitive FSMs and 
depicts the complete model of the process of exposing the 
Sendmail  Debugging  Function  Signed  Integer  Overflow 
Vulnerability. As in a canonical FSM, we associate a label 
Condition♦Action  with  each  transition.  (Canonical  FSM 
uses  Condition/Action  instead  of  the  symbol  ♦.  Our 
modification is made because some of our examples need 
the slash symbol  to represent filenames.) Condition refers 
to the condition for taking the transition, and Action is the 
action performed by the transition.  
In  the  example  (#3163),  in Operation  1,  elementary 
activity 1, the user inputs strings str_x and str_i, which are 
converted  to  signed  integers  x  and  i.  The  predicate  of 
pFSM1 specifies  that  if  str_x  represents  an  integer  larger 
than  231,  it  should  be  rejected,  i.e.,  pFSM1  reaches  the 
reject  state,  because  signed  integer  x  (4-byte  variable) 
cannot correctly represent an integer larger than 231. (The 
signed  integer  i  can  also  overflow,  although  it  may  not 
cause  consequences  as  severe  as  an  overflow  of  x.)  The 
real  implementation  does  not  check  str_x,  i.e.,  the 
transition of IMPL_REJ (marked by ?) does not exist, and 
the  dotted  transition  (IMPLE_ACPT)  is  taken,  allowing 
any  str_x  to  arrive  at  the  accept  state  of  pFSM1.  At  the 
object accept state, str_x and str_i are converted to signed 
integers  x  and  i,  which  may  become  negative  integers  if 
overflow  occurs.  The  error  exposed  in  pFSM1  is  that  the 
system neglects checking the input str_x.
In Operation 1, pFSM2 depicts the elementary activity 
write i to tTvect[x]. The predicate represented in pFSM2 is
the  same  as  in  the  example  in  Observation  3,  i.e.,  if  an 
integer  index  x  is  in  the  range  [0,100],  accept  the  x.
However, the implementation checks only for the condition 
x ≤ 100. As a result, negative x can be accepted and used in 
the operation tTvect[x]=i (arrive at termination state 
). A 
potential  security  violation  in  Operation  1  is  that  the 
attacker can overwrite the GOT entry of setuid()  so that it 
points  to  the  location  of  a  malicious  code  Mcode.  
Summarizing,  Operation  1  consists  of  two  pFSMs,  each 
offering  a  security  check,  each,  if  provided,  can  foil  an 