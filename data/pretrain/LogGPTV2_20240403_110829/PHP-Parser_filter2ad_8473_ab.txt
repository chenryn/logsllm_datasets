    $v55 = str_rot13(@gzuncompress(func2(substr($v51,-974,$v55))));
其中func2是解密函数
最后是拿func2解密之后的代码放在这个eval中执行.
还有一种比较简单快捷的方法是通过`hook eval`去获取eval的参数，因为不涉及`PHP-Parser`所以就不过多展开了。
## enphp混淆
官网：
github: [github](https://github.com/djunny/enphp)
使用官方的加密例子：
     2,
            //混淆函数产生变量最大长度
            'ob_function_length' => 3,
            //混淆函数调用 1=混淆 0=不混淆 或者 array('eval', 'strpos') 为混淆指定方法
            'ob_call'            => 1,
            //随机插入乱码
            'insert_mess'        => 0,
            //混淆函数调用变量产生模式  1=字母混淆 2=乱码混淆
            'encode_call'        => 2,
            //混淆class
            'ob_class'           => 0,
            //混淆变量 方法参数  1=字母混淆 2=乱码混淆
            'encode_var'         => 2,
            //混淆变量最大长度
            'encode_var_length'  => 5,
            //混淆字符串常量  1=字母混淆 2=乱码混淆
            'encode_str'         => 2,
            //混淆字符串常量变量最大长度
            'encode_str_length'  => 3,
            // 混淆html 1=混淆 0=不混淆
            'encode_html'        => 2,
            // 混淆数字 1=混淆为0x00a 0=不混淆
            'encode_number'      => 1,
            // 混淆的字符串 以 gzencode 形式压缩 1=压缩 0=不压缩
            'encode_gz'          => 0,
            // 加换行（增加可阅读性）
            'new_line'           => 1,
            // 移除注释 1=移除 0=保留
            'remove_comment'     => 1,
            // debug
            'debug'              => 1,
            // 重复加密次数，加密次数越多反编译可能性越小，但性能会成倍降低
            'deep'               => 1,
            // PHP 版本
            'php'                => 7,
        );
    $file = 'test.php';
    $target_file = 'en_test.php';
    enphp_file($file, $target_file, $options);
    ?>
加密之后大概长这样子
可以看到，我们的大部分字符串、函数等等都被替换成了类似于`$GLOBALS{乱码}[num]`这种形式，我们将其输出看一下：
可以看到我们原本的脚本中的字符串都在此数组里面，所以我们只要将`$GLOBALS{乱码}[num]`还原成原来对应的字符串即可。
那么我们如何获取`$GLOBALS{乱码}`数组的内容，很简单，在我们获取AST节点处打断点即可找到相关内容：
    $split=$ast[2]->expr->expr->args[0]->value->value;
    $all=$ast[2]->expr->expr->args[1]->value->value;
    $str=explode($split,$all);
    var_dump($str);
可以看到，和上面输出的是一样的（如果加密等级不一样则还需要加一层`gzinflate`）
然后就是通过AST一个节点一个节点将其替换即可，如果不知道节点类型的同学可以用`$GLOBALS[A][1]`，将其输出出来看一下即可，然后根据节点的类型和数据进行判断即可，如下：
    class PhpParser\Node\Expr\ArrayDimFetch#1104 (3) {
      public $var =>
      class PhpParser\Node\Expr\ArrayDimFetch#1102 (3) {
        public $var =>
        class PhpParser\Node\Expr\Variable#1099 (2) {
          public $name =>
          string(7) "GLOBALS"
          protected $attributes =>
          array(2) {
            ...
          }
        }
        public $dim =>
        class PhpParser\Node\Expr\ConstFetch#1101 (2) {
          public $name =>
          class PhpParser\Node\Name#1100 (2) {
            ...
          }
          protected $attributes =>
          array(2) {
            ...
          }
        }
        protected $attributes =>
        array(2) {
          'startLine' =>
          int(2)
          'endLine' =>
          int(2)
        }
      }
      public $dim =>
      class PhpParser\Node\Scalar\LNumber#1103 (2) {
        public $value =>
        int(1)
        protected $attributes =>
        array(3) {
          'startLine' =>
          int(2)
          'endLine' =>
          int(2)
          'kind' =>
          int(10)
        }
      }
      protected $attributes =>
      array(2) {
        'startLine' =>
        int(2)
        'endLine' =>
        int(2)
      }
    }
根据上面的节点编写脚本
    public function leaveNode(Node $node)
    {
        if ($node instanceof PhpParser\Node\Expr\ArrayDimFetch
            && $node->var instanceof PhpParser\Node\Expr\ArrayDimFetch
            && $node->var->var instanceof PhpParser\Node\Expr\Variable
            && $node->var->var->name==="GLOBALS"
            && $node->var->dim instanceof PhpParser\Node\Expr\ConstFetch
            && $node->var->dim->name instanceof PhpParser\Node\Name
            && $node->var->dim->name->parts[0]===$this->str
            && $node->dim instanceof PhpParser\Node\Scalar\LNumber
        ){
            return new PhpParser\Node\Scalar\String_($this->str_arr[$node->dim->value]);
        }
        return null;
    }
解出来的内容如下，可以看到大部分已经成功解密出来了
还有就是解密的一部分出现这样语句：`('highlight_file')(__FILE__);`，很明显不符合我们平时的写法，将其节点重命名一下
    if (($node instanceof Node\Expr\FuncCall
        || $node instanceof Node\Expr\StaticCall
        || $node instanceof Node\Expr\MethodCall)
        && $node->name instanceof Node\Scalar\String_) {
        $node->name = new Node\Name($node->name->value);
    }
现在看起来就舒服多了
我们分析剩下乱码的部分
可以看到是函数里面的局部变量还是乱码，从第一句可以看出所有的局部变量都是以`& $GLOBALS[乱码]`为基础的，而`&
$GLOBALS[乱码]`是我们上面已经找出来的，所以也是将其替换即可。
    if ($node instanceof \PhpParser\Node\Stmt\Expression
        && $node->expr instanceof \PhpParser\Node\Expr\AssignRef
        && $node->expr->var instanceof \PhpParser\Node\Expr\Variable
        && $node->expr->expr instanceof \PhpParser\Node\Expr\ArrayDimFetch
        && $node->expr->expr->var instanceof \PhpParser\Node\Expr\Variable
        && $node->expr->expr->var->name==="GLOBALS"
        && $node->expr->expr->dim instanceof \PhpParser\Node\Expr\ConstFetch
        && $node->expr->expr->dim->name instanceof \PhpParser\Node\Name
        && $node->expr->expr->dim->name->parts!=[]
    ){
        $this->Localvar=$node->expr->var->name;
        return NodeTraverser::REMOVE_NODE;
    }else if ($node instanceof \PhpParser\Node\Expr\ArrayDimFetch
        && $node->var instanceof \PhpParser\Node\Expr\Variable
        && $node->var->name===$this->Localvar
        && $node->dim instanceof \PhpParser\Node\Scalar\LNumber
    ){
        return new \PhpParser\Node\Scalar\String_($this->str_arr[$node->dim->value]);
    }
替换之后，可以看到与`& $GLOBALS[乱码]`有关的已经全部被替换了，只有变量部分是乱码了
替换变量为`$v`这种形式
    function BeautifyVariables($code){
        $v = 0;
        $map = [];
        $tokens = token_get_all($code);
        foreach ($tokens as $token) {
            if ($token[0] === T_VARIABLE) {
                if (!isset($map[$token[1]])) {
                    if (!preg_match('/^\$[a-zA-Z0-9_]+$/', $token[1])) {
                        $code = str_replace($token[1], '$v' . $v++, $code);
                        $map[$token[1]] = $v;
                    }
                }
            }
        }
        return $code;
    }
至此所有代码全部被还原（除了变量名这种不可抗拒因素之外）
还有一部分是没有用的全局变量和常量，手动或者根据AST去进行删除即可，下面贴一下完整解密脚本
    var instanceof \PhpParser\Node\Expr\ArrayDimFetch
                && $node->var->var instanceof \PhpParser\Node\Expr\Variable
                && $node->var->var->name==="GLOBALS"
                && $node->var->dim instanceof \PhpParser\Node\Expr\ConstFetch
                && $node->var->dim->name instanceof \PhpParser\Node\Name
                && $node->var->dim->name->parts[0]===$this->str
                && $node->dim instanceof \PhpParser\Node\Scalar\LNumber
            ){
                return new \PhpParser\Node\Scalar\String_($this->str_arr[$node->dim->value]);
            }
            if (($node instanceof Node\Expr\FuncCall
                || $node instanceof Node\Expr\StaticCall
                || $node instanceof Node\Expr\MethodCall)
                && $node->name instanceof Node\Scalar\String_) {
                $node->name = new Node\Name($node->name->value);
            }
            if ($node instanceof \PhpParser\Node\Stmt\Expression
                && $node->expr instanceof \PhpParser\Node\Expr\AssignRef
                && $node->expr->var instanceof \PhpParser\Node\Expr\Variable
                && $node->expr->expr instanceof \PhpParser\Node\Expr\ArrayDimFetch
                && $node->expr->expr->var instanceof \PhpParser\Node\Expr\Variable
                && $node->expr->expr->var->name==="GLOBALS"
                && $node->expr->expr->dim instanceof \PhpParser\Node\Expr\ConstFetch
                && $node->expr->expr->dim->name instanceof \PhpParser\Node\Name
                && $node->expr->expr->dim->name->parts!=[]
            ){
                $this->Localvar=$node->expr->var->name;
                return NodeTraverser::REMOVE_NODE;
            }else if ($node instanceof \PhpParser\Node\Expr\ArrayDimFetch
                && $node->var instanceof \PhpParser\Node\Expr\Variable
                && $node->var->name===$this->Localvar
                && $node->dim instanceof \PhpParser\Node\Scalar\LNumber
            ){
                return new \PhpParser\Node\Scalar\String_($this->str_arr[$node->dim->value]);
            }
            return null;
        }
    }
    function BeautifyVariables($code){
        $v = 0;
        $map = [];
        $tokens = token_get_all($code);
        foreach ($tokens as $token) {
            if ($token[0] === T_VARIABLE) {
                if (!isset($map[$token[1]])) {
                    if (!preg_match('/^\$[a-zA-Z0-9_]+$/', $token[1])) {
                        $code = str_replace($token[1], '$v' . $v++, $code);
                        $map[$token[1]] = $v;
                    }
                }
            }
        }
        return $code;
    }
    $code = file_get_contents("./en_test.php");
    $parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);
    try {
        $ast = $parser->parse($code);
    } catch (Error $error) {
        echo "Parse error: {$error->getMessage()}\n";
        return;
    }
    var_dump($ast);
    $split=$ast[2]->expr->expr->args[0]->value->value;
    $all=$ast[2]->expr->expr->args[1]->value->value;
    $str1=$ast[2]->expr->var->dim->name->parts[0];
    $str_arr=explode($split,$all);
    $visitor=new MyVisitor;
    $visitor->str=$str1;
    $visitor->str_arr=$str_arr;
    $traverser = New NodeTraverser;
    $traverser->addVisitor($visitor);
    $stmts = $traverser->traverse($ast);
    $prettyPrinter = new Standard;
    $code=$prettyPrinter->prettyPrintFile($stmts);
    $code=BeautifyVariables($code);
    echo $code;
**注：需要注意的是enphp使用的全局变量不一定是GLOBALS，也可能是_SERVER、_GET等等，根据具体情况进行判断，还有就是加密等级不同对应的解密方式也是不同的，不过其中的思想都是大同小异**
# Reference