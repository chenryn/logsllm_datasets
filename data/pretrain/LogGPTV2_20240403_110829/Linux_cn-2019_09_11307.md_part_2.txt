| [BitBake](https://www.yoctoproject.org/software-item/bitbake) | GPLv2 | Python |
| [Cake](https://github.com/cake-build/cake) | MIT | C# |
| [ASDF](https://common-lisp.net/project/asdf) | Expat (MIT) | LISP |
| [Cabal](https://www.haskell.org/cabal) | BSD | Haskell |
太棒了！现在你可以将自动化构建工具的配置文件放进源代码控制管理系统中，并让你的 CI/CD 工具构建它。
![Build automation tool](/data/attachment/album/201909/05/060341rfvzwege306dapue.jpg "Build automation tool")
一切都如此美好，对吧？但是在哪里部署它呢？
### 第四步：网页应用服务器
到目前为止，你有了一个可执行或可部署的打包文件。对任何真正有用的应用程序来说，它必须提供某种服务或者接口，所以你需要一个容器来发布你的应用。
对于网页应用，网页应用服务器就是容器。应用程序服务器提供了环境，让可部署包中的编程逻辑能够被检测到、呈现界面，并通过打开套接字为外部世界提供网页服务。在其他环境下你也需要一个 HTTP 服务器（比如虚拟机）来安装服务应用。现在，我假设你将会自己学习这些东西（尽管我会在下面讨论容器）。
这里有许多开源的网页应用服务器。
| 名称 | 协议 | 编程语言 |
| --- | --- | --- |
| [Tomcat](https://tomcat.apache.org) | Apache 2.0 | Java |
| [Jetty](https://www.eclipse.org/jetty/) | Apache 2.0 | Java |
| [WildFly](http://wildfly.org) | GNU Lesser Public | Java |
| [GlassFish](https://javaee.github.io/glassfish) | CDDL & GNU Less Public | Java |
| [Django](https://www.djangoproject.com/) | 3-Clause BSD | Python |
| [Tornado](http://www.tornadoweb.org/en/stable) | Apache 2.0 | Python |
| [Gunicorn](https://gunicorn.org) | MIT | Python |
| [Python Paste](https://github.com/cdent/paste) | MIT | Python |
| [Rails](https://rubyonrails.org) | MIT | Ruby |
| [Node.js](https://nodejs.org/en) | MIT | Javascript |
现在 DevOps 流水线差不多能用了，干得好！
![Web application server](/data/attachment/album/201909/05/060342cd8rboq080odd88u.jpg "Web application server")
尽管你可以在这里停下来并进行进一步的集成，但是代码质量对于应用开发者来说是一件非常重要的事情。
### 第五步：代码覆盖测试
实现代码测试件可能是另一个麻烦的需求，但是开发者需要尽早地捕捉程序中的所有错误并提升代码质量来保证最终用户满意度。幸运的是，这里有许多开源工具来测试你的代码并提出改善质量的建议。甚至更好的，大部分 CI/CD 工具能够集成这些工具并将测试过程自动化进行。
代码测试分为两个部分：“代码测试框架”帮助进行编写与运行测试，“代码质量改进工具”帮助提升代码的质量。
#### 代码测试框架
| 名称 | 许可证 | 编程语言 |
| --- | --- | --- |
| [JUnit](https://junit.org/junit5) | Eclipse Public License | Java |
| [EasyMock](http://easymock.org) | Apache | Java |
| [Mockito](https://site.mockito.org) | MIT | Java |
| [PowerMock](https://github.com/powermock/powermock) | Apache 2.0 | Java |
| [Pytest](https://docs.pytest.org) | MIT | Python |
| [Hypothesis](https://hypothesis.works) | Mozilla | Python |
| [Tox](https://github.com/tox-dev/tox) | MIT | Python |
#### 代码质量改进工具
| 名称 | 许可证 | 编程语言 |
| --- | --- | --- |
| [Cobertura](http://cobertura.github.io/cobertura) | GNU | Java |
| [CodeCover](http://codecover.org/) | Eclipse Public (EPL) | Java |
| [Coverage.py](https://github.com/nedbat/coveragepy) | Apache 2.0 | Python |
| [Emma](http://emma.sourceforge.net) | Common Public License | Java |
| [JaCoCo](https://github.com/jacoco/jacoco) | Eclipse Public License | Java |
| [Hypothesis](https://hypothesis.works) | Mozilla | Python |
| [Tox](https://github.com/tox-dev/tox) | MIT | Python |
| [Jasmine](https://jasmine.github.io) | MIT | JavaScript |
| [Karma](https://github.com/karma-runner/karma) | MIT | JavaScript |
| [Mocha](https://github.com/mochajs/mocha) | MIT | JavaScript |
| [Jest](https://jestjs.io) | MIT | JavaScript |
注意，之前提到的大多数工具和框架都是为 Java、Python、JavaScript 写的，因为 C++ 和 C# 是专有编程语言（尽管 GCC 是开源的）。
现在你已经运用了代码覆盖测试工具，你的 DevOps 流水线应该就像教程开始那幅图中展示的那样了。
### 可选步骤
#### 容器
正如我之前所说，你可以在虚拟机（VM）或服务器上发布你的应用，但是容器是一个更好的解决方法。
[什么是容器](/resources/what-are-linux-containers)？简要的介绍就是 VM 需要占用操作系统大量的资源，它提升了应用程序的大小，而容器仅仅需要一些库和配置来运行应用程序。显然，VM 仍有重要的用途，但容器对于发布应用（包括应用程序服务器）来说是一个更为轻量的解决方式。
尽管对于容器来说也有其他的选择，但是 Docker 和 Kubernetes 更为广泛。
| 名称 | 许可证 |
| --- | --- |
| [Docker](https://www.docker.com) | Apache 2.0 |
| [Kubernetes](https://kubernetes.io) | Apache 2.0 |
了解更多信息，请查看 [Opensource.com](http://Opensource.com) 上关于 Docker 和 Kubernetes 的其它文章：
* [什么是 Docker？](https://opensource.com/resources/what-docker)
* [Docker 简介](https://opensource.com/business/15/1/introduction-docker)
* [什么是 Kubernetes？](https://opensource.com/resources/what-is-kubernetes)
* [从零开始的 Kubernetes 实践](https://opensource.com/article/17/11/kubernetes-lightning-talk)
#### 中间件自动化工具
我们的 DevOps 流水线大部分集中在协作构建与部署应用上，但你也可以用 DevOps 工具完成许多其他的事情。其中之一便是利用它实现 基础设施管理   Infrastructure as Code （IaC）工具，这也是熟知的中间件自动化工具。这些工具帮助完成中间件的自动化安装、管理和其他任务。例如，自动化工具可以用正确的配置下拉应用程序，例如网页服务器、数据库和监控工具，并且部署它们到应用服务器上。
这里有几个开源的中间件自动化工具值得考虑：
| 名称 | 许可证 |
| --- | --- |
| [Ansible](https://www.ansible.com) | GNU Public |
| [SaltStack](https://www.saltstack.com) | Apache 2.0 |
| [Chef](https://www.chef.io) | Apache 2.0 |
| [Puppet](https://puppet.com) | Apache or GPL |
获取更多中间件自动化工具，查看 [Opensource.com](http://Opensource.com) 上的其它文章：
* [Ansible 快速入门指南](https://opensource.com/article/19/2/quickstart-guide-ansible)
* [Ansible 自动化部署策略](https://opensource.com/article/19/1/automating-deployment-strategies-ansible)
* [配置管理工具 Top 5](https://opensource.com/article/18/12/configuration-management-tools)
### 之后的发展
这只是一个完整 DevOps 流水线的冰山一角。从 CI/CD 工具开始并且探索其他可以自动化的东西来使你的团队更加轻松的工作。并且，寻找[开源通讯工具](https://opensource.com/alternatives/slack)可以帮助你的团队一起工作的更好。
发现更多见解，这里有一些非常棒的文章来介绍 DevOps ：
* [什么是 DevOps](https://opensource.com/resources/devops)
* [掌握 5 件事成为 DevOps 工程师](https://opensource.com/article/19/2/master-devops-engineer)
* [所有人的 DevOps](https://opensource.com/article/18/11/how-non-engineer-got-devops)
* [在 DevOps 中开始使用预测分析](https://opensource.com/article/19/1/getting-started-predictive-analytics-devops)
使用开源 agile 工具来集成 DevOps 也是一个很好的主意：
* [什么是 agile ？](https://opensource.com/article/18/10/what-agile)
* [4 步成为一个了不起的 agile 开发者](https://opensource.com/article/19/2/steps-agile-developer)
---
via: 
作者：[Bryant Son](https://opensource.com/users/brson/users/milindsingh/users/milindsingh/users/dscripter) 选题：[lujun9972](https://github.com/lujun9972) 译者：[LuMing](https://github.com/LuuMing) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出