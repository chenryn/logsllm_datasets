Stack mid redzone: f2
Stack right redzone: f3
Stack after return: f5
Stack use after scope: f8
Global redzone: f9
Global init order: f6
Poisoned by user: f7
Container overflow: fc
Array cookie: ac
Intra object redzone: bb
ASan internal: fe
622
4.3 GCC 编译参数解析
Left alloca redzone: ca
Right alloca redzone: cb
==9399==ABORTING
确实检测出了问题。在实战篇中，为了更好地分析软件漏洞，我们可能会经常用到
这个选项。
参考：https://en.wikipedia.org/wiki/AddressSanitizer
mcheck
利用 mcheck 可以实现堆内存的一致性状态检查。其定义在
/usr/include/mcheck.h ，是一个 GNU 扩展函数，原型如下：
#include 
int mcheck(void (*abortfunc)(enum mcheck_status mstatus));
可以看到参数是一个函数指针，但检查到堆内存异常时，通过该指针调用
abortfunc 函数，同时传入一个 mcheck_status 类型的参数。
举个例子，下面的程序存在 double-free 的问题：
#include 
#include 
void main() {
char *p;
p = malloc(1000);
fprintf(stderr, "About to free\n");
free(p);
fprintf(stderr, "About to free a second time\n");
free(p);
fprintf(stderr, "Finish\n");
}
通过设置参数 -lmcheck 来链接 mcheck 函数：
623
4.3 GCC 编译参数解析
$ gcc -lmcheck t_mcheck.c
$ ./a.out
About to free
About to free a second time
block freed twice
Aborted (core dumped)
还可以通过设置环境变量 MALLOC_CHECK_ 来实现，这样就不需要重新编译程
序。
$ gcc mcheck.c
$ #检查到错误时不作任何提示
$ MALLOC_CHECK_=0 ./a.out
About to free
About to free a second time
Finish
$ #检查到错误时打印一条信息到标准输出
$ MALLOC_CHECK_=1 ./a.out
About to free
About to free a second time
*** Error in `./a.out': free(): invalid pointer: 0x0000000001fb9
010 ***
Finish
$ #检查到错误时直接中止程序
$ MALLOC_CHECK_=2 ./a.out
About to free
About to free a second time
Aborted (core dumped)
具体参考 man 3 mcheck 和 man 3 mallopt 。
glibc 还提供了 mtrace() 和 muntrace() 函数分别在程序中打开和关闭对内存
分配调用进行跟踪的功能。这些函数需要与环境变量 MALLOC_TRACE 配合使用，
该变量定义了写入跟踪信息的文件名。在被调用时， mtrace() 会检查是否定义
了该文件，又是否可以读写该文件。如果一切正常，那么会在文件里跟踪和记录所
有对 malloc 系列函数的调用。由于生成的文件不易于理解，还提供了脚本
（ mtrace ）用于分析文件，并生成易于理解的汇总报告。
624
4.3 GCC 编译参数解析
将上面的例子修改一下：
#include 
#include 
#include 
void main() {
char *p;
mtrace();
calloc(16, 16);
fprintf(stderr, "calloc some chunks that will not be freed\n"
);
p = malloc(1000);
fprintf(stderr, "About to free\n");
free(p);
fprintf(stderr, "About to free a second time\n");
free(p);
fprintf(stderr, "Finish\n");
muntrace();
}
625
4.3 GCC 编译参数解析
$ gcc t_mtrace.c
$ export MALLOC_TRACE=/tmp/t
$ ./a.out
calloc some chunks that will not be freed
About to free
About to free a second time
Finish
$ mtrace /tmp/t
- 0x000055e427cde7b0 Free 5 was never alloc'd 0x55e425da287c
Memory not freed:
-----------------
Address Size Caller
0x000055e427cde6a0 0x100 at 0x55e425da27f6
于是 double-free 和内存泄漏被检测出来了。
参考资料
GCC online documentation
626
4.4 GCC 堆栈保护技术
4.4 GCC 堆栈保护技术
技术简介
编译参数
保护机制检测
地址空间布局随机化
技术简介
Linux 中有各种各样的安全防护，其中 ASLR 是由内核直接提供的，通过系统配置
文件控制。NX，Canary，PIE，RELRO 等需要在编译时根据各项参数开启或关
闭。未指定参数时，使用默认设置。
CANARY
启用 CANARY 后，函数开始执行的时候会先往栈里插入 canary 信息，当函数返回
时验证插入的 canary 是否被修改，如果是，则说明发生了栈溢出，程序停止运
行。
下面是一个例子：
#include 
void main(int argc, char **argv) {
char buf[10];
scanf("%s", buf);
}
我们先开启 CANARY，来看看执行的结果：
$ gcc -m32 -fstack-protector canary.c -o f.out
$ python -c 'print("A"*20)' | ./f.out
*** stack smashing detected ***: ./f.out terminated
Segmentation fault (core dumped)
627
4.4 GCC 堆栈保护技术
接下来关闭 CANARY：
$ gcc -m32 -fno-stack-protector canary.c -o fno.out
$ python -c 'print("A"*20)' | ./fno.out
Segmentation fault (core dumped)
可以看到当开启 CANARY 的时候，提示检测到栈溢出和段错误，而关闭的时候，
只有提示段错误。
下面对比一下反汇编代码上的差异：
开启 CANARY 时：
gdb-peda$ disassemble main
Dump of assembler code for function main:
0x000005ad : lea ecx,[esp+0x4]
0x000005b1 : and esp,0xfffffff0
0x000005b4 : push DWORD PTR [ecx-0x4]
0x000005b7 : push ebp
0x000005b8 : mov ebp,esp
0x000005ba : push ebx
0x000005bb : push ecx
0x000005bc : sub esp,0x20
0x000005bf : call 0x611 
0x000005c4 : add eax,0x1a3c
0x000005c9 : mov edx,ecx
0x000005cb : mov edx,DWORD PTR [edx+0x4]
0x000005ce : mov DWORD PTR [ebp-0x1c],edx
0x000005d1 : mov ecx,DWORD PTR gs:0x14
; 将 canary 值存入 ecx
0x000005d8 : mov DWORD PTR [ebp-0xc],ecx
; 在栈 ebp-0xc 处插入 canary
0x000005db : xor ecx,ecx
0x000005dd : sub esp,0x8
0x000005e0 : lea edx,[ebp-0x16]
0x000005e3 : push edx
0x000005e4 : lea edx,[eax-0x1940]
0x000005ea : push edx
0x000005eb : mov ebx,eax
628
4.4 GCC 堆栈保护技术
0x000005ed : call 0x450 
0x000005f2 : add esp,0x10
0x000005f5 : nop
0x000005f6 : mov eax,DWORD PTR [ebp-0xc]
; 从栈中取出 canary
0x000005f9 : xor eax,DWORD PTR gs:0x14
; 检测 canary 值
0x00000600 : je 0x607 
0x00000602 : call 0x690 
0x00000607 : lea esp,[ebp-0x8]
0x0000060a : pop ecx
0x0000060b : pop ebx
0x0000060c : pop ebp
0x0000060d : lea esp,[ecx-0x4]
0x00000610 : ret
End of assembler dump.
关闭 CANARY 时：
629
4.4 GCC 堆栈保护技术
gdb-peda$ disassemble main
Dump of assembler code for function main:
0x0000055d : lea ecx,[esp+0x4]
0x00000561 : and esp,0xfffffff0
0x00000564 : push DWORD PTR [ecx-0x4]
0x00000567 : push ebp
0x00000568 : mov ebp,esp
0x0000056a : push ebx
0x0000056b : push ecx
0x0000056c : sub esp,0x10
0x0000056f : call 0x59c 
0x00000574 : add eax,0x1a8c
0x00000579 : sub esp,0x8
0x0000057c : lea edx,[ebp-0x12]
0x0000057f : push edx
0x00000580 : lea edx,[eax-0x19e0]
0x00000586 : push edx
0x00000587 : mov ebx,eax
0x00000589 : call 0x400 
0x0000058e : add esp,0x10
0x00000591 : nop
0x00000592 : lea esp,[ebp-0x8]
0x00000595 : pop ecx
0x00000596 : pop ebx
0x00000597 : pop ebp
0x00000598 : lea esp,[ecx-0x4]
0x0000059b : ret
End of assembler dump.
FORTIFY
FORTIFY 的选项 -D_FORTIFY_SOURCE 往往和优化 -O 选项一起使用，以检测
缓冲区溢出的问题。
下面是一个简单的例子：
630
4.4 GCC 堆栈保护技术
#include
void main() {
char str[3];
strcpy(str, "abcde");
}
$ gcc -O2 fortify.c
$ checksec --file a.out
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO No canary found NX enabled PIE enabled
No RPATH No RUNPATH No 0 0 a.out
$ gcc -O2 -D_FORTIFY_SOURCE=2 fortify.c
In file included from /usr/include/string.h:639:0,
from fortify.c:1:
In function ‘strcpy’,
inlined from ‘main’ at fortify.c:4:2:
/usr/include/bits/string3.h:109:10: warning: ‘__builtin___memcpy
_chk’ writing 6 bytes into a region of size 3 overflows the dest
ination [-Wstringop-overflow=]
return __builtin___strcpy_chk (__dest, __src, __bos (__dest))
;
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$ checksec --file a.out
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled PIE enabled
No RPATH No RUNPATH Yes 2 2 a.out
开启优化 -O2 后，编译没有检测出任何问题，checksec 后 FORTIFY 为 No。当
配合 -D_FORTIFY_SOURCE=2 （也可以 =1 ）使用时，提示存在溢出问题，
checksec 后 FORTIFY 为 Yes。
NX
631
4.4 GCC 堆栈保护技术
No-eXecute，表示不可执行，其原理是将数据所在的内存页标识为不可执行，如果
程序产生溢出转入执行 shellcode 时，CPU 会抛出异常。
在 Linux 中，当装载器将程序装载进内存空间后，将程序的 .text 段标记为可执行，
而其余的数据段（.data、.bss 等）以及栈、堆均为不可执行。因此，传统利用方式
中通过修改 GOT 来执行 shellcode 的方式不再可行。
但这种保护并不能阻止攻击者通过代码重用来进行攻击（ret2libc）。
PIE
PIE（Position Independent Executable）需要配合 ASLR 来使用，以达到可执行文
件的加载时地址随机化。简单来说，PIE 是编译时随机化，由编译器完成；ASLR
是加载时随机化，由操作系统完成。ASLR 将程序运行时的堆栈以及共享库的加载
地址随机化，而 PIE 在编译时将程序编译为位置无关、即程序运行时各个段加载的
虚拟地址在装载时确定。开启 PIE 时，编译生成的是动态库文件（Shared object）
文件，而关闭 PIE 后生成可执行文件（Executable）。
我们通过实际例子来探索一下 PIE 和 ASLR：
#include
void main() {
printf("%p\n", main);
}
$ gcc -m32 -pie random.c -o open-pie
$ readelf -h open-pie
ELF Header:
Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00
Class: ELF32
Data: 2's complement, little endi
an
Version: 1 (current)
OS/ABI: UNIX - System V
ABI Version: 0
Type: DYN (Shared object file)