STMIA R0!,[R3-R9}：将R3~R9中数
STM{cond}{mode]Rn{!},Reg列表
据存储到地址为RO的存储器中
寄存器和存储
SWPR0.R1.[R2]：将R2所指向的存
SWP
SWP(cond)
器字数据交换
Rd,Rm,Rn
储器中的字数据传送到R0，同时将R1中
的字数据传送到R2所指向的存储单元
SWPBR0,R1,[R2]：将R2所指向的存
SWPB
寄存器和存储
SWP(cond) B Rd,Rm,Rn
储器中的字节数据传送到R0，R0的高24
器字节数据交换
位清零，同时将R1中的低8位数据传送
到R2所指向的存储单元
2.数据处理指令
数据处理指令可分为数据传送指令、算术逻辑运算指令、乘法指令和比较指令。数据传送
指令用于在寄存器和存储器之间进行数据的双向传输：算术逻辑运算指令完成常用的算术与逻
辑的运算，该类指令不但将运算结果保存在目的寄存器中，同时更新CPSR中的相应条件标志
位：乘法指令来计算乘法与乘加运算：比较指令不保存运算结果，只更新CPSR中相应的条件
标志位。这些指令如图7-2-3所示。
表7-2-3数据处理指令
助记符
指令功能描述
格式
示例
MOV
数据传送
MOV(cond)(S} Rd,operand2
MOVR0,R1：将R1值赋给R0
MVNR0,R1：将R1取反，结果赋
MVN
数据非传送
MOV(cond)(S} Rd,operand2
给RO
ADCR0,RO,R1：将RO+R1+C标志
ADC
带进位加法
MOV(cond)(S} Rd,Rn,operand2
位的值赋给RO中
216
---
## Page 242
续表
7
助记符
指令功能描述
格
示
例
章
加法
MOV(cond}{S}Rd,Rn.operand2
ADDRO.RO.R1：将RO+R1的值赋
ADD
手
给RO中
机
AND
逻辑与
ANDR0,R1.R2：将R1和R2相与，
MOV (condH(S} Rd,Rn,operand2
里
结果赋给RO中
的
BICR0,R1,R2:将R2的反码和R1
缓
BIC
位清除
MOV(cond)}{S} Rd,Rn,operand2
相与，结果赋给RO中
冲
EORR0.R1,R2：将R1和R2异或，
区
EOR
逻辑异或
MOV (cond)(S} Rd,Rn,operand2
溢
结果赋给RO中
出
逻辑或
MOV(cond}(S}Rd,Rn.operand2
ORRR0.R1,R2：将R1和IR2相或，
ORR
结果赋给RO中
逆向减法
MOV (cond}(S} Rd,Rn,operand2
RSBR0,R1,R2：将R2-R1的结果赋
RSB
给RO中
RSC
带进位逆向减法
RSCR0,R1,R2：将R2-RI-C标志位
MOV (cond)(S) Rd,Rn.operand2
的结果赋给RO中
SBC
带进位减法
RSC R0,R1,R2：将R1-R2-C标志位
MOV (cond)(S) Rd,Rn,operand2
的结果赋给RO中
SUB
减法
RSCR0.R1.R2：将R1-R2结果赋给
MOV (cond }(S) Rd,Rn,operand2
RO中
乘加
MLA R0,R1,R2,R3:将 R1*R2+R3
MLA
MLA(cond)(S) Rd,Rm,Rs,Rn
赋给RO
MUL
乘法
MUL(cond)(S} Rd,Rm,Rs
MLAR0,R1,R2：将R1*R2赋给R0
SMLALR0,R1,R3,R4:将 R3*R4
SMLAL{cond}{S}RdL_RdH,Rm,Rs
为有符号64值，然后加上（R1,R0），
SMLAL
64位有符号乘加
最后将结果中高32位放入R1，低32
位放入RO
SMULLR0.R1.R3,R4:将R3*R4作
SMULL
64位有符号乘
SMULL|cond)(S)RdL,RdH,Rm,Rs
为有符号64值，将结果中高32位放
入R1，低32位放入R0
UMLALR0,R1,R3,R4;将R3*R4 
为无符号64值，然后加上（R1,R0），
UMLAL
64位无符号乘加
UMLAL(cond)(S)RdL,RdH,Rm,Rs
最后将结果中高32位放入R1.低32
位放入RO
SMULLR0,R1,R3,R4:将R3*R4作：
UMULI.
64位无符号乘
UMULL(cond)(S}RdL.RdH.Rm,Rs
为无符号64值，将结果中高32位放
入R1，低32位放入R0
CMN
负数比较
CMNR0,#1：判断R0是否为1的补
CMN(cond}{S}Rn,operand2
码，若是则Z标志位置位
217
---
## Page 243
0
day
续表
安
助记符
指令功能描述
格式
示
例
全
比较指令
CMP(cond)(S) Rn,operand2
CMPR0.R1：比较R1.R2，并设置相关
CMP
标志位
软
件
TEQ
相等测试
TEQ|cond}(S} Rn,operand2
TEQRO,R1：比较R0与R1是否相等
漏
TST
位测试
TST{cond}{S} Rn.operand2
TSTRO.#Ox01：判断RO最低位是否为0
洞
3.跳转指令
分
析
跳转指令用于实现程序流程的跳转，ARM指令集中的跳转指令可以完成从当前指令向前
技
或向后的32MB的地址空间的跳转，跳转指令如表7-2-4所示。
术
（第
表7-2-4
跳转指令
助记符
指令功能描述
格
式
示例
2
B
跳转
B(cond}目标
版
B0x1234：跳转到0x1234
BL
带链接跳转
BL(cond}目标
BL0x1234：下指令保存到R14并跳转
BXR0：跳转到RO指向地址，并根据RO
BX
带状态切换跳转
BX[cond} Rm
最低位切换处理器状态
4.协处理器指令
协处理器指令主要用于初始化ARM协处理器的数据处理、在ARM处理器的寄存器和协
处理器的寄存器之间传送数据，以及在ARM协处理器的寄存器和存储器之间传送数据。这些
指令如表7-2-5所示。
表7-2-5协处理器指令
助记符
指令功能描述
格
式
示
例
CDP(cond} coproc.opcodel,
CDPP6,1.C3.C4.C5：协处即器6操
CDP
数据操作指令
CRd,CRn,CRm{.opcode2}
作，操作码为1
LDCP6,C2,[R1]：读取R1指向的内
LDC
数据读取指令
LDC[cond} coproc, CRd,地h址:
存数据，并传递到P6协处理器的C2寄
存器中
MCR{cond} coproc, opcodel,
MCRP3.3,R0.C4.C5.6:将R0中的数
寄存器到协处理
MCR
据传送到协处理器P3的C4和C5寄存
器数据传送
Rd, CRn,CRm {,opcode2}
器中
协处理器到寄存
MRC(cond} coproc. opcodel,
MRCP3.3.R0.C4.C5.6：将协处理器
MRC
器数据传送
Rd, CRn,CRm {,opcode2}
P3的寄存器中的数据传送到RO中
STCP3.C4,[R0]：将协处理器P3的
STC
数据写入指令
STC{cond}coproc,CRs,地l
寄存器C4中的字数据传送到R0所指
向的空间中
218
---
## Page 244
第
5.杂项指令
7
ARM微处理器的杂项指令包括中断指令、读写状态寄存器指令等，如表7-2-6所示。
章
表7-2-6杂项指令
手
助记符
指令功能描述
格
式
机
SWIIcond}随机数
里
SW1
软中断指令
SWI0:软中断，中断立即数0
的
MRS
读状态寄存器指令
MRS{cond} Rd.psr
MRS R1.CPSR：将CPSR状态值放入R1
缓
MSR
写状态寄存器指令
MRS{cond} psr,Rm
MRSCPSR_cxsf,R3：将R3值频给CPSR
冲
区
6.伪指令
溢
实际上ARM微处理器的伪指令并不属于ARM指令集，它是为了方便编程而定义的，在
出
编译时编译器会自动将其替换为等效的ARM指令。这些指令如表7-2-7所示。
表7-2-7杂项指令
助记符
指令功能描述
格
式
示
LOOPMOV R1,#1
ADR
小范围地址读取
ADR(cond}Rd.表达式
ADRR1,LOOP：将LOOP值放入R1中
ADRL
中等范围地址读取
ADRL[cond}Rd，表达式
类似ADR
LDR
大等范围地址读取
LDR[cond}Rd.表达式
类似ADR
NOP
空指令
NOP
NOP
ARM的执行条件与x86下面的标识位有些类似，系
系统通过对这些标识位的判断来确定是
否满足执行条件。几乎所有的ARM指令都包含一个4位的条件码，位于指令的最高4位。条
件码共有16种，每种条件码可用两个字符表示，这两个字符可以添加在指令助记符的后面和
指令同时使用。例如，跳转指令B可以加上后缀EQ变为BEQ表示“相等则跳转”，即当CPSR
中的Z标志置位时发生跳转。在16种条件标志码中，只有15种可以使用，如表7-2-8所示，
第16种（1111）为系统保留，暂时不能使用。
表7-2-8指令条件码表
编码
条件助记符
标志位
含
0000
EQ
Z=1
相等
1000
NE
Z=0
不相等
0010
CS
C=1
无符号大于或等于
0011
CC
C=0
无符号小于
0100
MI
N=1
负值
1010
PL
N=0