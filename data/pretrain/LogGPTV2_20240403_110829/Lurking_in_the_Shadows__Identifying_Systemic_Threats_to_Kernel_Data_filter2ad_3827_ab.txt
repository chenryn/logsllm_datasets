### Table 3. Results of Running the Diehard Battery of Tests After Contamination of the Entropy Pool

| Test Name | Results |
|-----------|---------|
| 0.143452  | 0.000000 |
| 0.467953  | 0.000000 |
| 0.010857  | 0.000000 |
| 0.754544  | 0.000000 |
| 0.003450  | 0.000000 |
| 0.014060  | 0.000000 |
| 0.115478  | 0.000000 |
| 0.138635  | 0.000000 |
| 0.212463  | 0.000000 |
| cnt1s     | 0.000000 |
| parkinglot mindist | 0.000000 |
| 0.159241  | 0.000000 |
| 0.012559  | 0.000000 |
| 0.132155  | 0.000000 |
| 0.400118  | 0.000000 |
| 0.065416  | 0.000000 |
| 0.004431  | 0.000000 |
| 0.002061  | 0.000000 |
| 0.192544  | 0.000000 |
| 0.311526  | 0.000000 |
| 0.072483  | 0.000000 |
| sphere    | 0.893287 |
| 0.055361  | 0.000000 |
| 0.001550  | 0.000000 |
| 0.000258  | 0.000000 |
| 0.212797  | 0.000000 |
| 0.021339  | 0.000000 |
| 0.000010  | 0.000000 |
| 0.001535  | 0.000000 |
| 0.071177  | 0.000000 |
| 0.212785  | 0.000000 |
| squeeze   | 0.423572 |
| 0.769919  | 0.000000 |
| 0.190808  | 0.000000 |
| 0.573443  | 0.000000 |
| 0.276961  | 0.000000 |
| 0.047575  | 0.000000 |
| 0.044232  | 0.000000 |
| 0.024058  | 0.000000 |
| 0.296367  | 0.000000 |
| 0.338967  | 0.000000 |
| osum      | 0.641313 |
| 0.002603  | 0.000000 |
| 0.032007  | 0.000000 |
| 0.051299  | 0.000000 |
| 0.009343  | 0.000000 |
| 0.139662  | 0.000000 |
| 0.068223  | 0.000000 |
| 0.000078  | 0.000000 |
| 0.003107  | 0.000000 |
| 0.122016  | 0.000000 |
| craps     | 0.147407 |
| 0.066102  | 0.000000 |
| 0.468605  | 0.000000 |
| 0.057709  | 0.000000 |
| 0.389614  | 0.000000 |
| 0.082087  | 0.000000 |
| 0.836221  | 0.000000 |
| 0.214631  | 0.000000 |
| 0.679244  | 0.000000 |
| 0.710536  | 0.000000 |

### 2.3. Entropy Pool Contamination

**Impact:**
This attack is a more subtle version of the resource exhaustion attack, which has traditionally been carried out over the network [17, 12, 11]. The goal is to overwhelm the compromised system by creating artificial memory pressure, leading to significant performance overhead and resource wastage. The attacker can maintain this degradation at a level that escapes detection for extended periods.

**Background:**
The Pseudo-Random Number Generator (PRNG) in the Linux kernel provides two interfaces to user applications: `/dev/random` and `/dev/urandom`. The PRNG relies on three pools for entropy: the primary pool, the secondary pool, and the urandom pool. `/dev/random` is a blocking interface used for highly secure applications, while `/dev/urandom` is non-blocking. Entropy is added to the primary pool from external events such as keystrokes, mouse movements, disk activity, and network activity. When random bytes are requested, they are moved from the primary pool to the secondary and urandom pools. A detailed analysis of the Linux random number generator is available in [6].

**Attack Description:**
This attack continuously contaminates the entropy pool by writing zeroes into all the pools. It does so by loading an attack module that includes a kernel thread. This thread constantly wakes up and writes zeroes into the entropy pools, also attacking the polynomials used to stir the pool. Zeroing out these polynomials nullifies part of the extraction algorithm used by the PRNG. The location of the entropy pool is not exported by the Linux kernel, but it can be found by scanning kernel memory. Since the entropy pool has the cryptographic property of being completely random [15], its location can be determined by running a sliding window through memory and calculating the entropy of the data within the window.

We measured the quality of the random numbers generated using the diehard battery of tests [2]. The results, summarized in Table 3, show that the sequence generated after the attack fails miserably in two tests (cnt1s and mindist) and partially in others. A failure in any test indicates that the PRNG is no longer cryptographically secure.

**Impact:**
After the attack, the generated pseudo-random numbers are of poor quality, making the system and applications vulnerable to cryptanalysis attacks.

### 2.4. Disable Pseudo-Random Number Generator (PRNG)

**Attack Description:**
This attack overwrites the addresses of the device functions registered by the PRNG with the function addresses of the attack code. The original functions are never invoked, and the attack functions always return zero when random bytes are requested from `/dev/random` or `/dev/urandom`. This attack is similar to traditional rootkit techniques that hook into function pointers, but it is not monitored by kernel integrity monitors because it does not affect the user-level view of objects.

The kernel provides functions for reading and writing to the `/dev/random` and `/dev/urandom` devices. These functions are registered in data structures called `random_state_ops` and `urandom_state_ops` for `/dev/random` and `/dev/urandom`, respectively. These symbols are exported by the 2.4 kernel but not by the 2.6 kernel. The attack module locates these data structures by scanning for function opcodes and then replaces the genuine functions with attack functions. After the attack, every read from the device returns zero.

**Impact:**
All security functions within the kernel and other security applications rely on the PRNG to supply pseudo-random numbers. This attack stealthily compromises the security of the system without raising any suspicions from the user.

### 3. Categorizing Attacks

We have identified several attack categories based on the tampering techniques employed. These categories include control hijacking, control interception, control tapping, data value manipulation, and inconsistent data structures. Our motivation behind creating these categories is to identify broader systemic problems in the kernel, rather than individual attacks, to build generic defense techniques that can be applied comprehensively throughout the kernel.

### 3.1. Control Hijacking

Control hijacking attacks manipulate the control flow within a kernel control path, redirecting it to the attack code. Examples include the disable firewall attack and the disable PRNG attack. All layers, jump tables, and function pointers are susceptible to this form of attack.

### 3.2. Control Interception

Control interception is a technique used by traditional rootkits to change the system call table, IDT, and kernel code. These attacks intercept the kernel control path, allowing the attacker to filter requests to and responses from the original code. This method is typically used for hiding the attackerâ€™s files, processes, and network connections. All layers, jump tables, and function pointers are susceptible to this form of attack.

### 3.3. Control Tapping

Control tapping ensures that the attack code is invoked en route to the original function. The interception takes place in such a way that the attack code cannot manipulate the arguments and results of the original function. The only assurance is that the attack code will be invoked on every call to the original function. An example of this form of attack is hooking to the `execve` system call by registering a new binary format, as discussed in [3].

### 3.4. Data Value Manipulation

These attacks manipulate the values of critical variables, directly or indirectly influencing the algorithms used by the kernel. Defending against such attacks requires a close analysis of data structure values and some form of value-based monitoring. Examples include the resource wastage attack and the entropy pool contamination attack.

### 3.5. Inconsistent Data Structures

This class of attacks makes kernel data structures inconsistent, which are otherwise supposed to be consistent during normal operation. Common methods include process hiding and module hiding. Process hiding is achieved by removing the malicious process from the accounting list but not from the scheduler list, so the process is still scheduled. Module hiding is done by removing the module entry from the module list after the module is loaded in memory, making it invisible to accounting commands.

### 4. Related Work

Garfinkel et al. [5] proposed using virtual machine introspection, while Zhang et al. [18] suggested using a secure coprocessor to verify kernel integrity. Petroni et al. [7] demonstrated a prototype that could monitor the integrity of kernel code and static tables from a secure coprocessor. In another recent work [8], they built a specification-based compiler that could compile high-level manually specified constraints and monitor for those constraints within kernel dynamic data. Several attestation-based approaches have been proposed to verify the integrity of running code [14, 9, 16, 13], but these approaches cannot check the integrity of data.

### 5. Conclusion and Future Work

In this paper, we have demonstrated a new class of stealth attacks that do not employ the traditional hiding behavior used by rootkits. We have designed attack prototypes to show that such attacks are realistic and indicative of a more systemic problem in the kernel. Furthermore, they cannot be detected by currently known monitoring approaches without prior knowledge of the attack signatures. We have also classified the data tampering techniques used by all known kernel tampering malware. As part of future work, our goal is to design an automated comprehensive integrity monitor for kernel data.

### Acknowledgments

We would like to thank Joe Kilian for his insightful comments and discussions on this work and early drafts of the paper. We also thank Trent Jaeger (shepherd) and the anonymous reviewers for their feedback in refining the paper. This work has been supported in part by the NSF CAREER grant CCR-0133366.

### References

[1] Advanced Intrusion Detection Environment. http://sourceforge.net/projects/aide.
[2] G. Marsaglia. The Marsaglia Random Number CDROM including the Diehard Battery of Tests of Randomness. http://stat.fsu.edu/pub/diehard, 1996.
[3] Registration of Binary Kernel's Shellcode Weakness Formats. See http://www.packetstormsecurity.org/papers/general/binfmt-en.pdf, 2006.
[4] D. Beck, B. Vo, and C. Verbowski. Detecting Stealth Software with Strider GhostBuster. In Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSNâ€™05).
[5] T. Garfinkel and M. Rosenblum. A Virtual Machine Introspection Based Architecture for Intrusion Detection. In Proc. Network and Distributed Systems Security Symposium, 2003.
[6] Z. Gutterman, B. Pinkas, and T. Reinman. Analysis of the Linux Random Number Generator. In Proceedings of the 2006 IEEE Symposium on Security and Privacy. IEEE Computer Society, 2006.
[7] N. L. P. Jr., T. Fraser, J. Molina, and W. A. Arbaugh. Copilot - A Coprocessor-Based Kernel Runtime Integrity Monitor. In USENIX Security Symposium, 2004.
[8] N. L. P. Jr., T. Fraser, A. Walters, and W. A. Arbaugh. An Architecture for Specification-Based Detection of Semantic Integrity Violations in Kernel Dynamic Data. In USENIX Security Symposium, 2006.
[9] R. Kennell and L. H. Jamieson. Establishing the Genuinity of Remote Computer Systems. 12th USENIX Security Symposium, Washington DC, 09 2003.
[10] G. H. Kim and E. H. Spafford. The Design and Implementation of Tripwire: A File System Integrity Checker. In Proceedings of the 2nd ACM Conference on Computer and Communications Security, 1994.
[11] D. Moore, C. Shannon, D. J. Brown, G. M. Voelker, and S. Savage. Inferring Internet Denial-of-Service Activity. ACM Trans. Comput. Syst., 24(2):115â€“139, 2006.
[12] C. L. Schuba, I. V. Krsul, M. G. Kuhn, E. H. Spafford, A. Sundaram, and D. Zamboni. Analysis of a Denial of Service Attack on TCP. sp, 00:0208, 1997.
[13] A. Seshadri, M. Luk, E. Shi, A. Perrig, L. van Doorn, and P. K. Khosla. Pioneer: Verifying Code Integrity and Enforcing Untampered Code Execution on Legacy Systems. In SOSP, pages 1â€“16, 2005.
[14] A. Seshadri, A. Perrig, L. van Doorn, and P. Khosla. Swatt: Software-Based Attestation for Embedded Devices. sp, 00:272, 2004.
[15] A. Shamir and N. van Someren. Playing "Hide and Seek" with Stored Keys. In FC '99: Proceedings of the Third International Conference on Financial Cryptography, pages 118â€“124, London, UK, 1999. Springer-Verlag.
[16] E. Shi, A. Perrig, and L. van Doorn. BIND: A Fine-Grained Attestation Service for Secure Distributed Systems. In IEEE Symposium on Security and Privacy, pages 154â€“168, 2005.
[17] H. Wang, D. Zhang, and K. Shin. Detecting SYN Flooding Attacks. 2002.
[18] X. Zhang, L. van Doorn, T. Jaeger, R. Perez, and R. Sailer. Secure Coprocessor-Based Intrusion Detection. In Proceedings of the 10th Workshop on ACM SIGOPS European Workshop: Beyond the PC, 2002.