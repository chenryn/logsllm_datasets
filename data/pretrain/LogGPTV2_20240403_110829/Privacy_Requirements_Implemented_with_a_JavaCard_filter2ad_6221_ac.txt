{IDApat|Proj} Kshosp
(IDA (pat|Projα), 
(IDA (pat|Projα), 
(IDA (pat|Projα), 
(IDA (pat|Projα), 
Medical data for Projα)
Medical data for Projα)
Medical data for Projα)
Medical data for Projα)
✇
✇
✇
T2-1 : 
T2-1 : 
T2-1 : 
IDApat|Proj = [IDAhosp(pat|Proj)] Kphosp
IDApat|Proj = [IDAhosp(pat|Proj)] Kphosp
IDApat|Proj = [IDAhosp(pat|Proj)] Kphosp
Anonymous DB for Projα
Anonymous DB for Projα
Anonymous DB for Projα
(IDAhosp(pat|Projα), 
(IDAhosp(pat|Projα), 
(IDAhosp(pat|Projα), 
Medical data for Projα)
Medical data for Projα)
Medical data for Projα)
…
…
…
…
The project Projβ
The project Projβ
The project Projβ
The project Projβ
T3
T3
T3
⌦
⌦
⌦
DB for Userx
DB for Userx
DB for Userx
Anonymous identifier
Anonymous identifier
Anonymous identifier
Specific to each final user
Specific to each final user
Specific to each final user
+ filttered data
+ filttered data
+ filttered data
DB for UserY
DB for UserY
DB for UserY
Medical DB
Medical DB
Medical DB
(Stay identifier,
(Stay identifier,
(Stay identifier,
Medical data)
Medical data)
Medical data)
Anonymous DB 
Anonymous DB 
Anonymous DB 
for Projβ
for Projβ
for Projβ
⊕ ⊗
⊕ ⊗
⊕ ⊗
T1 ; T2
T1 ; T2
T1 ; T2
DB for Projβ
DB for Projβ
DB for Projβ
DB for Projβ
✇
✇
✇
T2-1
T2-1
T2-1
⌦
⌦
⌦
T3
T3
T3
Legend
Legend
Legend
Legend
⊕ : (T1) hashing
⊕ : (T1) hashing
⊕ : (T1) hashing
⊕ : (T1) hashing
⊗ : (T2) encryption
⊗ : (T2) encryption
⊗ : (T2) encryption
⊗ : (T2) encryption
✇: (T2-1) decryption
✇: (T2-1) decryption
✇: (T2-1) decryption
✇: (T2-1) decryption
⌦ : (T3) filtering
⌦ : (T3) filtering
⌦ : (T3) filtering
⌦ : (T3) filtering
focused studies such as cancer research protocols and 
Figure 2: The suggested anonymization procedure. 
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:01 UTC from IEEE Xplore.  Restrictions apply. 
Medical 
DB
Patient card
Project DB
Hospital
HCP card
Anonymous 
DB per project
Administrative 
DB
Project 
Creation 
Server
Processing
center
Project DB 
for this 
processing center
End user
End user
DB
Figure 3: Architecture scheme. 
5.2.  Transformations processed in hospitals 
In  hospitals,  three  kinds  of  databases  can  be 
distinguished:  administrative,  medical  and  several 
anonymized  databases.  Each  anonymized  database 
contains  the  information  for  a  particular  project.  A 
project is a program or a study intended for statistical, 
epidemiological 
data 
processing.  
or  medico-economical 
The  transition  from  a  medical  database  to  an 
anonymized  one  requires  the  application  of  two 
transformations (T1, T2). 
T1:  consists 
in  calculating  “IDApat|Proj”,  an 
anonymous  identifier  per  person  and  per  project. 
“IDproj” is the project identifier; while “IDpat” is the 
patient anonymous  identifier  (a random number).  We 
suggest that IDpat is held under the patient’s control, 
e.g., on his personal medical data smart card. 
In the hospital, when entering data into anonymous 
databases, the user sends IDproj to the card. The card 
already  contains  IDpat.  By  supplying  his  card,  the 
patient gives his consent to exploit his data as part of 
this project. The T1 procedure, run by the smart card, 
consists  in  applying  a  one-way  hash  function  (i.e., 
SHA-2) to the concatenated set (IDproj | IDpat): 
(T1) 
IDApat|Proj = H (IDproj | IDpat) 
Nevertheless, the transformation T1 does not protect 
against attacks where attackers try to link data held by 
two different hospitals. To make this clearer, let us take 
an  example  where  Paul  has  been  treated  in  the 
hospitals  HospA  and  HospB.  In  each  of  these  two 
hospitals,  Paul  has  consented  to  give  his  data  to  the 
project  Projα.  Let  us  assume  that  Bob,  an  HospB 
employee, 
fingerprint  X 
(=IDAPaul|Projα)  corresponds  to  Paul,  and  that  Bob 
obtains  (illicitly)  access  to  the  anonymous  database 
knows 
that 
the 
held by HospA and concerning Projα. In this case, the 
malicious  user  Bob  can  easily  establish  the  link 
between Paul and his medical data (concerning Projα) 
held by HospA and HospB. 
In order to face this type of attacks, a cryptographic 
asymmetric transformation (T2) is added. Thus, before 
setting  up the  anonymous  databases  (specific  to  each 
project),  the  hospital  encrypts  (using  an  asymmetric 
cipher)  the  fingerprint  IDApat|Proj  with the  key  Kshosp 
specific to the hospital; (the notation “{M}K” indicates 
that M is encrypted with key K): 
(T2)   IDAhosp(pat|Proj) = {IDApat|Proj}Kshosp 
If we take again the previous scenario, the malicious 
user  Bob  cannot  re-identify  the  patients  because  he 
does  not  know  the  decryption  key  KpA.  Kshosp  and 
Kphosp are a key pair of a public key cryptosystem, but 
that  does  not  mean  that  Kphosp  is  really  public :  it  is 
known  only  by  the  project  processing  centers  and  by 
the hospital’s security officer (who knows also Kshosp, 
of course). 
Basically, the anonymous databases intended to one 
or several projects are permanently sent by hospitals to 
processing  centers.  A  processing  center  could  be  an 
association,  an  office  for  medical  statistics,  or  a 
research center. 
5.3.  Transformations  carried  out  upstream 
from processing centers 
Data  contained 
in 
the  anonymous  databases 
undergoes  transformations  that  depend  on  IDAproj|pat 
and on Kshosp. Every center decrypts received data by 
using Kphosp:  
[IDAhosp(pat|Proj)]Kphosp      = 
[{IDApat|Proj}Kshosp]Kphosp  =  
IDApat|Proj 
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:01 UTC from IEEE Xplore.  Restrictions apply. 
Note  that  since  the  resulting  data  is  associated  to 
IDApat|Proj, each project can link data corresponding to 
the  same  patient  (even  if  they  come  from  different 
hospitals). 
5.4.  Transformations  carried  out  before  the 
distribution to the final users 
Before  their  distribution  to  the  final  users  (web 
publishing,  press,  etc.)  the  anonymized  data  can 
undergo  a  targeted  filtering  (a  data  aggregation,  data 
impoverishment,  etc.).  If,  in  addition,  the  security 
objective  is  to  forbid  file  linkage,  it  is  advisable  to 
apply  another  anonymization  (e.g.,  by  MD5)  with  a 
secret key Kutil|proj generated randomly. 
(T3)   IDApat|util = H (IDApat|Proj | Kutil|proj)  
In  accordance  with  the  needs,  this  last  case 
corresponds to two different processes:  
- 
if the aim is to allow full time linking, Kutil|proj 
has to be stored by the processing center;  
inversely,  if  the  center  wishes  to  forbid  linking 
data,  the  key  is  randomly  generated  just  before 
each distribution. 
- 
 6. Implementation 
6.1.  Architecture and components 
Figure 3 describes a very-simplified architecture of 
our implementation. Our prototype has been tested on 
several  platforms:  Unix  (CPU:  HP  9000/L2000;  OS: 
HPUX  11.00)  Linux  (CPU:  Athlon  1.4  Ghz;  OS: 
Mandrake Linux 10; kernel v2.6.3.4) Macintosh (CPU: 
Power  G3  600MHz;  OS:  MacOS  X  10.x)  and 
Windows. The prototype requires about 50 Mbytes free 
disk space, MySQL or Oracle 10g, Java JRE 1.4.2 or 
later  and 
recommend  a 
configuration with 1 Ko RAM, 16 Ko EEPROM, and 
24 Ko ROM [8]. 
JavaCard  2.1.  SUN 
For the implementation, it is advisable to use cards 
that  support  cryptographic  procedures  (smartcards). 
The  kit  should  provide  a  complete  environment  of 
development  and  should  contain  an  interface  that 
makes  the  communication  easier  with  the  smart  card 
(e.g.,  the  "JCardManager"  interface  provided  in  the 
Gemexpresso  RAD  III  kit).  Programming  is  done  in 
the  standardized  language  “Javacard”.  Javacard  is  a 
reduced-API  Java.  Even  if  this  API  provides  most 
characteristics  of  Java  (e.g.,  exceptions,  constructors, 
inheritance, unidimensional arrays), it has some limits, 
insofar  as  the  primitive  types  are  limited  to  byte, 
shorts,  and  Boolean;  it  does  not  support  cloning, 
threads, garbage collector, etc. 
In  order  to  use  the  application,  you  should  have 
some software components such as: the patient cards, 
the Health Care Professional certificates (embedded in 
the  “Health  Care  Professional”  cards),  the  hospital 
keys  (public  and  private  keys)  and  the  certification 
authority public key. 
6.2.  Keys generation 
We  used  RSA  for  asymmetric  keys  (e.g.,  Kphosp 
and Kshosp). The implementation was as follows: 
throw 
/* generateRSAKey */ 
public  static  KeyPair  generateRSAKey()  throws 
RSAException { 
        KeyPairGenerator kpg ; 
        KeyPair kp ; 
        try { 
/* Define the encryption mechanism */ 
   kpg=KeyPairGenerator.getInstance("RSA") ; 
      } 
/* Managing the exceptions */ 
   catch (NoSuchAlgorithmException nsae) { 
   throw  new  RSAException("Algo  does  not 
exist") ; 
        } 
/* Specify the keys length: e.g., 2048 bits */ 
    kpg.initialize(2048) ; 
/* Keys generation */ 
    kp = kpg.generateKeyPair() ; 
    if 
(kp==null) 
RSAException("Error") ; 
return  kp ; } 