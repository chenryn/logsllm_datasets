# asm1
Reverse Engineering, 200 points
## Description:
> What does asm1(0x1f3) return? Submit the flag as a hexadecimal value (starting with '0x').
```assembly
asm1:
	:	push   ebp
	:	mov    ebp,esp
	:	cmp    DWORD PTR [ebp+0x8],0x767
	:	jg     0x512 
	:	cmp    DWORD PTR [ebp+0x8],0x1f3
	:	jne    0x50a 
	:	mov    eax,DWORD PTR [ebp+0x8]
	:	add    eax,0xb
	:	jmp    0x529 
	:	mov    eax,DWORD PTR [ebp+0x8]
	:	sub    eax,0xb
	:	jmp    0x529 
	:	cmp    DWORD PTR [ebp+0x8],0xcde
	:	jne    0x523 
	:	mov    eax,DWORD PTR [ebp+0x8]
	:	sub    eax,0xb
	:	jmp    0x529 
	:	mov    eax,DWORD PTR [ebp+0x8]
	:	add    eax,0xb
	:	pop    ebp
	:	ret    
```
## Solution: 
This is how the stack looks after performing the `mov ebp,esp` command:
```
+---------+
| old ebp | :	push   ebp
	:	mov    ebp,esp
	:	cmp    DWORD PTR [ebp+0x8],0x767    ; Compare 0x1f3 to 0x767
	:	jg     0x512               ; Jump not taken (0x1f3 is smaller)
	:	cmp    DWORD PTR [ebp+0x8],0x1f3    ; Compare 0x1f3 to 0x1f3
	:	jne    0x50a               ; Jump not taken (they are equal)
	:	mov    eax,DWORD PTR [ebp+0x8]      ; eax = 0x1f3
	:	add    eax,0xb                      ; eax = 0x1f3 + 0xb = 0x1fe
	:	jmp    0x529               ; Jump taken
	:	mov    eax,DWORD PTR [ebp+0x8]
	:	sub    eax,0xb
	:	jmp    0x529 
	:	cmp    DWORD PTR [ebp+0x8],0xcde
	:	jne    0x523 
	:	mov    eax,DWORD PTR [ebp+0x8]
	:	sub    eax,0xb
	:	jmp    0x529 
	:	mov    eax,DWORD PTR [ebp+0x8]
	:	add    eax,0xb
	:	pop    ebp                          ; We jump here
	:	ret 
```
So the return value is `0x1fe`.