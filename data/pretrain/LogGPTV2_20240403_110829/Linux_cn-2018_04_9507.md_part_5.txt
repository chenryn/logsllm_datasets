与 eBPF 一起工作的其它必需的文件是来自内核树的两个**用户空间库**，它们可以用于管理 eBPF 程序或者映射来自外部的程序。这个函数可以通过 [linux/tools/lib/bpf/](https://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git/tree/tools/lib/bpf) 目录中的头文件 `bpf.h` 和 `libbpf.h`（更高层面封装）来访问。比如，工具 `bpftool` 主要依赖这些库。
#### 其它值得关注的部分
如果你对关于 BPF 的不常见的语言的使用感兴趣，bcc 包含 [一个 BPF 目标的 **P4 编译器**](https://github.com/iovisor/bcc/tree/master/src/cc/frontends/p4/compiler)以及 [**一个 Lua 前端**](https://github.com/iovisor/bcc/tree/master/src/lua)，它可以被用以代替 C 的一个子集，并且（用 Lua ）替代 Python 工具。
#### LLVM 后端
这个 BPF 后端用于 clang / LLVM 将 C 编译到 eBPF ，是在 [这个提交](https://reviews.llvm.org/D6494) 中添加到 LLVM 源代码的（也可以在 [这个 GitHub 镜像](https://github.com/llvm-mirror/llvm/commit/4fe85c75482f9d11c5a1f92a1863ce30afad8d0d) 上访问）。
#### 在用户空间中运行
到目前为止，我知道那里有至少两种 eBPF 用户空间实现。第一个是 [uBPF](https://github.com/iovisor/ubpf/)，它是用 C 写的。它包含一个解析器、一个 x86\_64 架构的 JIT 编译器、一个汇编器和一个反汇编器。
uBPF 的代码似乎被重用来产生了一个 [通用实现](https://github.com/YutaroHayakawa/generic-ebpf)，其声称支持 FreeBSD 内核、FreeBSD 用户空间、Linux 内核、Linux 用户空间和 Mac OSX 用户空间。它被 [VALE 交换机的 BPF 扩展模块](https://github.com/YutaroHayakawa/vale-bpf)使用。
其它用户空间的实现是我做的：[rbpf](https://github.com/qmonnet/rbpf)，基于 uBPF，但是用 Rust 写的。写了解析器和 JIT 编译器 （Linux 下两个都有，Mac OSX 和 Windows 下仅有解析器），以后可能会有更多。
#### 提交日志
正如前面所说的，如果你希望得到更多的关于一些特定的 BPF 特性的信息，不要犹豫，去看一些提交日志。你可以在许多地方搜索日志，比如，在 [git.kernel.org](https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git)、[在 GitHub 上](https://github.com/torvalds/linux)、或者如果你克隆过它还有你的本地仓库中。如果你不熟悉 git，你可以尝试像这些去做 `git blame ` 去看看介绍特定代码行的提交内容，然后，`git show ` 去看详细情况（或者在 `git log` 的结果中按关键字搜索，但是这样做通常比较单调乏味）也可以看在 bcc 仓库中的 [按内核版本区分的 eBPF 特性列表](https://github.com/iovisor/bcc/blob/master/docs/kernel-versions.md)，它链接到相关的提交上。
### 排错
对 eBPF 的追捧是最近的事情，因此，到目前为止我还找不到许多关于怎么去排错的资源。所以这里只有几个，是我在使用 BPF 进行工作的时候，对自己遇到的问题进行的记录。
#### 编译时的错误
* 确保你有一个最新的 Linux 内核版本（也可以看 [这个文档](https://github.com/iovisor/bcc/blob/master/docs/kernel-versions.md)）。
* 如果你自己编译内核：确保你安装了所有正确的组件，包括内核镜像、头文件和 libc。
* 当使用 `tc-bpf`（用于去编译 C 代码到 BPF 中）的 man 页面提供的 `bcc` shell 函数时：我曾经必须添加包含 clang 调用的头文件：
```
__bcc() {
        clang -O2 -I "/usr/src/linux-headers-$(uname -r)/include/" \
                  -I "/usr/src/linux-headers-$(uname -r)/arch/x86/include/" \
                -emit-llvm -c $1 -o - | \
        llc -march=bpf -filetype=obj -o "`basename $1 .c`.o"
}
```
（现在似乎修复了）。
* 对于使用 `bcc` 的其它问题，不要忘了去看一看这个工具集的 [答疑](https://github.com/iovisor/bcc/blob/master/FAQ.txt)。
* 如果你从一个并不精确匹配你的内核版本的 iproute2 包中下载了示例，可能会由于在文件中包含的头文件触发一些错误。这些示例片断都假设安装在你的系统中内核的头文件与 iproute2 包是相同版本的。如果不是这种情况，下载正确的 iproute2 版本，或者编辑示例中包含的文件的路径，指向到 iproute2 中包含的头文件上（在运行时一些问题可能或者不可能发生，取决于你使用的特性）。
#### 在加载和运行时的错误
* 使用 `tc` 去加载一个程序，确保你使用了一个与使用中的内核版本等价的 iproute2 中的 `tc` 二进制文件。
* 使用 `bcc` 去加载一个程序，确保在你的系统上安装了 bcc（仅下载源代码去运行 Python 脚本是不够的）。
* 使用 `tc`，如果 BPF 程序不能返回一个预期值，检查调用它的方式：过滤器，或者动作，或者使用 “直传” 模式的过滤器。
* 还是 `tc`，注意不使用过滤器，动作不会直接附着到 qdiscs 或者接口。
* 通过内核校验器抛出错误到解析器可能很难。[内核文档](https://www.kernel.org/doc/Documentation/networking/filter.txt)或许可以提供帮助，因此，可以 [参考指南](https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md) 或者，万不得一的情况下，可以去看源代码（祝你好运！）。记住，校验器 *不运行* 程序，对于这种类型的错误，记住这点是非常重要的。如果你得到一个关于无效内存访问或者关于未初始化的数据的错误，它并不意味着那些问题真实发生了（或者有时候是，它们完全有可能发生）。它意味着你的程序是以校验器预计可能发生错误的方式写的，并且因此而拒绝这个程序。
* 注意 `tc` 工具有一个 `verbose` 模式，它与 BPF 一起工作的很好：在你的命令行尾部尝试追加一个 `verbose`。
* `bcc` 也有一个 `verbose` 选项：`BPF` 类有一个 `debug` 参数，它可以带 `DEBUG_LLVM_IR`、`DEBUG_BPF` 和 `DEBUG_PREPROCESSOR` 三个标志中任何组合（详细情况在 [源文件](https://github.com/iovisor/bcc/blob/master/src/python/bcc/__init__.py)中）。 为调试该代码，它甚至嵌入了 [一些条件去打印输出代码](https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md#output)。
* LLVM v4.0+ 为 eBPF 程序 [嵌入一个反汇编器](https://www.spinics.net/lists/netdev/msg406926.html)。因此，如果你用 clang 编译你的程序，在编译时添加 `-g` 标志允许你通过内核校验器去以人类可读的格式去转储你的程序。处理转储文件，使用：
```
$ llvm-objdump -S -no-show-raw-insn bpf_program.o
```
* 使用映射？你应该去看看 [bpf-map](https://github.com/cilium/bpf-map)，这是一个为 Cilium 项目而用 Go 创建的非常有用的工具，它可以用于去转储内核中 eBPF 映射的内容。也有一个用 Rust 开发的 [克隆](https://github.com/badboy/bpf-map)。
* [在 **StackOverflow** 上有个旧的 bpf 标签](https://stackoverflow.com/questions/tagged/bpf)，但是，在这篇文章中从没用过它（并且那里几乎没有与新版本的 eBPF 相关的东西）。如果你是一位来自未来的阅读者，你可能想去看看在这方面是否有更多的活动（LCTT 译注：意即只有旧东西）。
### 更多！
* 如果你想轻松地 **测试 XDP**，有 [一个配置好的 Vagrant](https://github.com/iovisor/xdp-vagrant)  可以使用。你也可以 [在 Docker 容器中](https://github.com/zlim/bcc-docker) **测试 bcc**。
* 想知道 BPF 的 **开发和活动** 在哪里吗？好吧，内核补丁总是出自于 [netdev 上的邮件列表](http://lists.openwall.net/netdev/)（相关 Linux 内核的网络栈开发）：以关键字 “BPF” 或者 “XDP” 来搜索。自 2017 年 4 月开始，那里也有 [一个专门用于 XDP 编程的邮件列表](http://vger.kernel.org/vger-lists.html#xdp-newbies)（是为了架构或者寻求帮助）。[在 IO Visor 的邮件列表上](http://lists.iovisor.org/pipermail/iovisor-dev/)也有许多的讨论和辨论，因为 BPF 是一个重要的项目。如果你只是想随时了解情况，那里也有一个 [@IOVisor Twitter 帐户](https://twitter.com/IOVisor)。
请经常会回到[这篇博客](https://qmonnet.github.io/whirl-offload/2016/09/01/dive-into-bpf/)中，来看一看 [关于 BPF](https://qmonnet.github.io/whirl-offload/categories/#BPF) 有没有新的文章！
*特别感谢 Daniel Borkmann 指引我找到了 [更多的文档](https://github.com/qmonnet/whirl-offload/commit/d694f8081ba00e686e34f86d5ee76abeb4d0e429)，因此我才完成了这个合集。*
---
via: 
作者：[Quentin Monnet](https://qmonnet.github.io/whirl-offload/about/) 译者：[qhwdw](https://github.com/qhwdw) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出