              | push dword [key]                   |
              | ; size_t strlen(const char *s)     |
              | call sym.imp.strlen;[ga]           |
              | add esp, 0x10                      |
              | mov dword [key_len], eax           |
              | mov dword [sum], 0                 |
              | mov dword [i], 0                   |
              | jmp 0x80487c9;[gb]                 |
              `------------------------------------'
                  v
                  |
               .--'
 .---------------.
 |             | |
 |       .-----------------------------------------------.
 |       |  0x80487c9 [gb]                               |
 |       | ; CODE XREF from sym.validate_key (0x8048797) |
 |       | mov eax, dword [key_len]                      |
 |       | sub eax, 1                                    |
 |       | cmp eax, dword [i]                            |
 |       | jg 0x8048799;[ge]                             |
 |       `-----------------------------------------------'
 |             t f
 |             | |
 |    .--------' |
 |    |          '----------------------------.
 |    |                                       |
 |.-----------------------------------.   .----------------------------------.
 ||  0x8048799 [ge]                   |   |  0x80487d4 [gf]                  |
 || mov edx, dword [i]                |   | mov ecx, dword [sum]             |
 || ; [0x8:4]=-1                      |   | mov edx, 0x38e38e39              |
 || ; 8                               |   | mov eax, ecx                     |
 || mov eax, dword [key]              |   | mul edx                          |
 || add eax, edx                      |   | mov ebx, edx                     |
 || movzx eax, byte [eax]             |   | shr ebx, 3                       |
 || movsx eax, al                     |   | mov eax, ebx                     |
 || sub esp, 0xc                      |   | shl eax, 3                       |
 || push eax                          |   | add eax, ebx                     |
 || call sym.ord;[gd]                 |   | shl eax, 2                       |
 || add esp, 0x10                     |   | sub ecx, eax                     |
 || movsx eax, al                     |   | mov ebx, ecx                     |
 || ; 1                               |   | mov eax, dword [key_len]         |
 || lea edx, [eax + 1]                |   | lea edx, [eax - 1]               |
 || mov eax, dword [i]                |   | ; [0x8:4]=-1                     |
 || add eax, 1                        |   | ; 8                              |
 || imul eax, edx                     |   | mov eax, dword [key]             |
 || add dword [sum], eax              |   | add eax, edx                     |
 || add dword [i], 1                  |   | movzx eax, byte [eax]            |
 |`-----------------------------------'   | movsx eax, al                    |
 |    v                                   | sub esp, 0xc                     |
 |    |                                   | push eax                         |
 |    |                                   | call sym.ord;[gd]                |
 |    |                                   | add esp, 0x10                    |
 |    |                                   | movsx eax, al                    |
 |    |                                   | cmp ebx, eax                     |
 |    |                                   | sete al                          |
 |    |                                   | mov ebx, dword [local_4h]        |
 |    |                                   | leave                            |
 |    |                                   | ret                              |
 |    |                                   `----------------------------------'
 |    |
 |    |
 `----' 
```
Translated to Python, this is equivalent to:
```python
def validate_key(key):
    log.info("Validating key: {}".format(key))
    if len(key) != 16:
        raise Exception("Bad length")
    if not re.match('^[A-Z0-9]+$', key):
        raise Exception("Bad characters")
    s = 0
    for i in range(len(key) - 1):
        edx = my_ord(key[i]) + 1
        eax = i + 1
        s += (edx * eax)
    ebx = 0x38E38E39 * s
    ebx = int(ebx >> 32) # needed only for python, mul puts lower bytes in eax, higher in edx
    ebx = ebx >> 3
    eax = ebx << 3
    eax += ebx
    eax = eax << 2
    ecx = s - eax
    log.info("ecx: {}".format(hex(ecx)))
    log.info("ord(key[-1]): {}".format(hex(my_ord(key[-1]))))
    return ecx == my_ord(key[-1])
```
The `ord` function has a custom implementation, as follows:
```
          .------------------------------------------------------------.
          | [0x80486b8]                                                |
          | (fcn) sym.ord 82                                           |
          |   sym.ord (int arg_8h);                                    |
          | ; var int local_ch @ ebp-0xc                               |
          | ; arg int arg_8h @ ebp+0x8                                 |
          | ; CALL XREFS from sym.validate_key (0x80487ab, 0x8048808)  |
          | push ebp                                                   |
          | mov ebp, esp                                               |
          | sub esp, 0x18                                              |
          | ; [0x8:4]=-1                                               |
          | ; 8                                                        |
          | mov eax, dword [arg_8h]                                    |
          | mov byte [local_ch], al                                    |
          | ; '/'                                                      |
          | cmp byte [local_ch], 0x2f                                  |
          | jle 0x80486d9;[ga]                                         |
          `------------------------------------------------------------'
                  f t
                  | |
                  | '-------------------------------.
                .-'                                 |
                |                                   |
            .----------------------------------.    |
            |  0x80486ca [gc]                  |    |
            | ; '9'                            |    |
            | cmp byte [local_ch], 0x39        |    |
            | jg 0x80486d9;[ga]                |    |
            `----------------------------------'    |
                    f t                             |
                    | |                             |
                    | '------------------------.    |
     .--------------'                          |    |
     |                                         | .--'
     |                                         | |
 .----------------------------------.    .----------------------------------.
 |  0x80486d0 [ge]                  |    |  0x80486d9 [ga]                  |
 | movzx eax, byte [local_ch]       |    | ; '@'                            |
 | ; '0'                            |    | cmp byte [local_ch], 0x40        |
 | sub eax, 0x30                    |    | jle 0x80486ee;[gf]               |
 | jmp 0x8048708;[gd]               |    `----------------------------------'
 `----------------------------------'            f t
     v                                           | |
     |                                           | |
     '-------------.                             | |
                   |                             | '-----------.
                   |       .---------------------'             |
                   |       |                                   |
                   |   .----------------------------------.    |
                   |   |  0x80486df [gg]                  |    |
                   |   | ; 'Z'                            |    |
                   |   | cmp byte [local_ch], 0x5a        |    |
                   |   | jg 0x80486ee;[gf]                |    |
                   |   `----------------------------------'    |
                   |           f t                             |
                   |           | |                             |
                   |           | '-----------------------------|-----.
                   |       .---'                               '-------.
                   |       |                                         | |
                   |   .----------------------------------.    .-----------------------------------------.
                   |   |  0x80486e5 [gh]                  |    |  0x80486ee [gf]                         |
                   |   | movzx eax, byte [local_ch]       |    | sub esp, 0xc                            |
                   |   | ; '7'                            |    | ; 0x8048984                             |
                   |   | sub eax, 0x37                    |    | ; "Found Invalid Character!"            |
                   |   | jmp 0x8048708;[gd]               |    | push str.Found_Invalid_Character        |
                   |   `----------------------------------'    | ; int puts(const char *s)               |
                   |       v                                   | call sym.imp.puts;[gi]                  |
                   |       |                                   | add esp, 0x10                           |
                   |       |                                   | sub esp, 0xc                            |
                   |       |                                   | push 0                                  |
                   |       |                                   | ; void exit(int status)                 |
                   |       |                                   | call sym.imp.exit;[gj]                  |
                   |       |                                   `-----------------------------------------'
                   |       |
                   |       |
          .--------|-------'
          | .------'
          | |
    .--------------------------------------------------.
    |  0x8048708 [gd]                                  |
    | ; CODE XREFS from sym.ord (0x80486d7, 0x80486ec) |
    | leave                                            |
    | ret                                              |
    `--------------------------------------------------'  
```
Basically, this translates to:
```python
def my_ord(c):
    if c.isalpha():
        return ord(c) - ord('7')
    else:
        return ord(c) - ord('0')
```
So we have everything we need to understand how a valid key looks like.
Now, we can play with the key a bit:
```console
root@kali:/media/sf_CTFs/pico/keygen-me-1# python solve.py
[*] Validating key: ZZZZZZZZZZZZZZZZ
[*] ecx: 0x0
[*] ord(key[-1]): 0x23
False
```
We want the `ord` of the last character to match `ecx` - `0` will do the trick:
```console
root@kali:/media/sf_CTFs/pico/keygen-me-1# python solve.py
[*] Validating key: ZZZZZZZZZZZZZZZ0
[*] ecx: 0x0
[*] ord(key[-1]): 0x0
True
```
Let's try:
```console
$ ./activate $(python -c 'print ("Z"*15) + "0"')
Product Activated Successfully: picoCTF{k3yg3n5_4r3_s0_s1mp13_3718231394}
```
The flag: picoCTF{k3yg3n5_4r3_s0_s1mp13_3718231394}