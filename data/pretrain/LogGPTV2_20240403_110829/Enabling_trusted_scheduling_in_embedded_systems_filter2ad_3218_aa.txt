title:Enabling trusted scheduling in embedded systems
author:Ramya Jayaram Masti and
Claudio Marforio and
Aanjhan Ranganathan and
Aur&apos;elien Francillon and
Srdjan Capkun
Enabling Trusted Scheduling in Embedded Systems
Ramya Jayaram Masti†, Claudio Marforio†, Aanjhan Ranganathan†,
Aurélien Francillon‡, Srdjan Capkun†
†Institute of Information Security, ETH Zurich, Switzerland
†{rmasti, maclaudi, raanjhan, capkuns}@inf.ethz.ch
‡Eurecom, Sophia-Antipolis, France
‡PI:EMAIL
ABSTRACT
The growing complexity and increased networking of securi-
ty and safety-critical systems expose them to the risk of ad-
versarial compromise through remote attacks. These attacks
can result in full system compromise, but often the attacker
gains control only over some system components (e.g., a pe-
ripheral) and over some applications running on the system.
We consider the latter scenario and focus on enabling on-
schedule execution of critical applications that are running
on a partially compromised system — we call this trusted
scheduling. We identify the essential properties needed for
the realization of a trusted scheduling system and we design
an embedded system that achieves these properties. We
show that our system protects not only against misbehav-
ing applications but also against attacks by compromised
peripherals. We evaluate the feasibility and performance of
our system through a prototype implementation based on
the AVR ATmega103 microcontroller.
1.
INTRODUCTION
Today, security- and safety-critical systems are being in-
creasingly networked to facilitate their remote conﬁguration,
control and monitoring. As a result, they face an increased
risk of adversarial compromise and therefore have to be de-
signed to meet their real-time constraints even if they are
partially compromised. More speciﬁcally, it is necessary to
architect them such that they can guarantee the execution
of certain critical functionality despite the presence of other
misbehaving system components (e.g., compromised appli-
cations, peripherals). We refer to this property of preventing
applications and components under the attacker’s control
from changing the execution times of other applications as
trusted scheduling. Recent examples of compromised embed-
ded systems [10], control systems [16] and peripherals [15]
show that this is an emerging problem.
Most safety-critical systems include a real-time operating
system (RTOS) [5, 6] or similar system management soft-
ware (e.g., microkernel [18]) whose primary goal is to en-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’12 Dec. 3-7, 2012, Orlando, Florida USA
Copyright 2012 ACM 978-1-4503-1312-4/12/12 ...$15.00.
sure that their real-time constraints are met. More recently,
these RTOS also include mechanisms to contain the eﬀects of
other misbehaving software components/applications. How-
ever, RTOS do not address threats by untrusted peripherals
(e.g., an RTOS cannot prevent a compromised peripheral
from making the peripheral bus unusable by not adhering
to the bus protocol). Furthermore, their complexity makes
them prone to vulnerabilities that can be exploited to force
the system to deviate from its expected behavior [4].
In this work, we address the problem of enabling trusted
scheduling in the context of security- and safety-critical em-
bedded systems. These are specialized devices that typically
include a CPU, memory and some peripherals connected to
the CPU via the peripheral bus. They usually run a ﬁxed set
of applications whose resource requirements are well-known
in advance. We ﬁrst identify three essential components of a
trusted scheduling architecture, namely, secure scheduling,
secure resource allocation and application state protection.
This is in contrast to conventional scheduling that only fo-
cuses on the CPU allocation.
Second, we describe an embedded system architecture that
achieves trusted scheduling and analyze its security. Our ar-
chitecture includes ﬁve main hardware components, namely,
a scheduler which decides the order in which applications
execute, time-slice and atomicity monitors that ensure CPU
availability, an application-aware memory protection unit
which mediates memory access and a peripheral bus man-
ager which controls access to the peripheral bus. These com-
ponents, together with a thin layer of software, ensure that
misbehaving applications and peripherals cannot inﬂuence
the system’s expectation for other applications. We show
that our architecture provides strong guarantees against re-
mote attacks that exploit software vulnerabilities which we
believe is crucial for today’s safety-critical systems. We
then evaluate the feasibility of realizing such an architec-
ture through a prototype implementation based on the AVR
ATmega103. Finally, we discuss how the design of system
components (e.g., bus, peripherals) can aﬀect the feasibility
of achieving trusted scheduling on a particular architecture.
The rest of the paper is organized as follows. In Section 2
we discuss the problem of enabling trusted scheduling and
identify the functions needed to achieve it in a system. In
Section 3, we describe a trusted scheduling architecture for
embedded systems and analyze its security. In Section 4, we
discuss several practical security issues involved in realizing
a trusted scheduling architecture. We present preliminary
performance considerations in Section 4.2. Finally, we dis-
cuss related work in Section 5 and conclude in Section 6.
61
(cid:1)(cid:2)(cid:3)
(cid:4)(cid:5)(cid:6)
(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)(cid:10)(cid:5)(cid:12)(cid:12)(cid:13)(cid:14)(cid:15)(cid:16)(cid:17)(cid:14)(cid:18)(cid:19)(cid:20)(cid:21)
(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)
(cid:1)
(cid:15)
(cid:1)(cid:2)(cid:3)
(cid:12)(cid:7)(cid:13)(cid:14)(cid:9)(cid:10)
(cid:15)(cid:16)(cid:17)(cid:18)(cid:19)(cid:17)(cid:9)(cid:10)
(cid:20)(cid:19)(cid:21)(cid:22)(cid:9)
(cid:9)(cid:29)(cid:20)(cid:17)(cid:26)(cid:25)(cid:10)(cid:30)(cid:31)(cid:20)
(cid:2)(cid:26)(cid:27)(cid:14)(cid:12)(cid:32)(cid:26)(cid:27)(cid:16)(cid:13)(cid:10)(cid:30)(cid:31)(cid:20)
(cid:22)(cid:22)(cid:2)(cid:4)(cid:8)(cid:6)
(cid:4)(cid:16)(cid:23)(cid:14)(cid:18)(cid:10)
(cid:28)(cid:28)(cid:28)(cid:28)(cid:28)(cid:28)(cid:28)
(cid:10)(cid:10)(cid:24)(cid:14)(cid:25)(cid:26)(cid:27)(cid:7)(cid:20)(cid:21)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:4)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)
(cid:12)(cid:7)(cid:13)(cid:14)(cid:9)(cid:10)(cid:4)(cid:5)(cid:4)(cid:15)(cid:16)(cid:17)(cid:18)(cid:19)(cid:17)(cid:9)(cid:10)
(cid:20)(cid:19)(cid:21)(cid:22)(cid:9)
(cid:17)(cid:22)(cid:8)(cid:7)
(cid:23)(cid:13)(cid:17)(cid:7)(cid:13)(cid:21)(cid:7)(cid:21)(cid:4)(cid:14)(cid:16)(cid:24)(cid:7)(cid:21)(cid:18)(cid:25)(cid:7)(cid:4)
(cid:15)(cid:4)(cid:21)(cid:7)(cid:25)(cid:19)(cid:11)(cid:14)(cid:4)(cid:1)
(cid:20)(cid:19)(cid:21)(cid:22)(cid:9)(cid:4)(cid:21)(cid:7)(cid:25)(cid:19)(cid:11)(cid:14)(cid:4)(cid:1)
Figure 1: Most embedded systems consist of a CPU,
memory (for code and data) and a set of peripher-
als that interact over a system bus and a peripheral
bus. Typically, the peripherals are connected on a
separate bus for eﬃciency reasons.
Figure 2: The execution schedule of a critical appli-
cation C can be disrupted by a misbehaving (non-
critical) application A that does not release the CPU
on-time or exhausts the memory or by the radio pe-
ripheral that does not release the bus on-time.
2. TRUSTED SCHEDULING
In this section, we deﬁne trusted scheduling and identify
the requirements that a system must satisfy in order to en-
able trusted scheduling.
2.1 Problem Statement
Trusted scheduling is the property of ensuring adherence
to the intended execution schedule in adversarial settings.
To illustrate the problem of enabling trusted scheduling,
we consider a simple embedded system S (Figure 1) that
consists of a CPU, memory unit(s) and peripherals that are
connected over one or more buses. Most embedded systems
have two such buses: a system bus that is used to connect
main components (e.g., CPU) to the memory unit(s) and a
slower peripheral bus (e.g., SPI [9], I2C [12]) that is used to
connect the CPU to the peripherals (e.g., EEPROM, real-
time clock, radio and other I/O interfaces). The system
hosts a number of applications that are entirely independent
and self-contained.
We consider an attacker M who controls a subset of ap-
plications and system components and is interested in in-
terfering with the execution schedule of other (critical) ap-
plications that it does not control. For example, M could
compromise an application and use it to gain control over
the network card on the peripheral bus. We assume that
M does not have physical access to the system and hence
cannot launch physical attacks. We further assume that the
attacker cannot inﬂuence any external inputs that aﬀect the
system’s execution schedule.
This model corresponds to systems where critical and non-
critical applications/peripherals co-exist. For example, a
system can consist of a critical control (sensing/actuating)
application and a non-critical communication application
used for the sole purpose of reporting (Figure 2(a)). In this
example system, if the radio peripheral or status reporting
application is compromised, they could attempt to inﬂuence
the execution schedule of the critical control application; this
is illustrated in Figure 2(b). While conventional scheduling
(or CPU scheduling) suﬃces to guarantee adherence to the
intended schedule as long as all applications and peripher-
als are benign, it alone cannot provide similar guarantees in
the presence of compromised applications and peripherals.
Hence, in this work we focus on a broader notion of schedul-
ing in adversarial contexts that we call trusted scheduling
and deﬁne below.
We say that a system enforces trusted scheduling if it pre-
vents (possibly colluding) applications and components under
the attacker’s control from changing the execution times of
other applications such that they do not correspond to the
intended schedule. In this work, we primarily focus on at-
tacks that aim to delay or entirely prevent the execution of
applications. We further assume that the applications do
not fully depend on attacker-controlled applications or com-
ponents for their execution; otherwise, little can be done to
ensure trusted scheduling. Similarly, we also assume that
the data inﬂuencing the execution schedule of applications
either directly (e.g., as an input to the scheduler) or indi-
rectly (e.g., persistent system data) cannot be modiﬁed by
an attacker.
The problem that we want to solve in this work is that of
designing an embedded system that enforces trusted schedul-
ing, assuming that the attacker controls a subset of appli-
cations and system components. Existing real-time systems
include software [6, 5, 18] and hardware [13, 19] to provide
resilience against compromised applications, but do not con-
sider misbehaving system components (peripherals).
2.2 Realizing Trusted Scheduling
Although systems are diverse and the application scenar-
ios in which they are used largely diﬀer, there are still some
common functionalities that all systems must realize to sup-
port trusted scheduling which we discuss below.
To support trusted scheduling, a system should implement
a robust scheduler, protect system resources and protect the
applications. More precisely, the system must be designed
such that the attacker (i) cannot modify the execution sched-
ule of applications (ii) cannot interfere with the allocation
of resources to the applications and (iii) cannot modify the
state of applications (code and data).
This eﬀectively implies that, a trusted scheduling system
should implement a secure scheduler that schedules the exe-
cution of applications and enforces adherence to this sched-
ule. Furthermore, this system should securely isolate appli-
62
(cid:23)(cid:3)(cid:17)(cid:24)(cid:4)(cid:8)(cid:9)(cid:10)(cid:25)(cid:6)(cid:26)(cid:2)(cid:5)(cid:7)(cid:10)(cid:10)(cid:10)(cid:10)(cid:10)(cid:10)
(cid:10)(cid:10)(cid:10)(cid:10)(cid:10)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)(cid:13)
(cid:12)(cid:19)(cid:19)(cid:18)(cid:5)(cid:15)(cid:2)(cid:4)(cid:5)(cid:6)(cid:7)(cid:20)(cid:2)(cid:21)(cid:2)(cid:3)(cid:8)(cid:10)(cid:13)(cid:1)(cid:22)
(cid:14)(cid:30)(cid:24)(cid:4)(cid:8)(cid:26)(cid:10)(cid:31)(cid:17)(cid:24)
(cid:14)(cid:15)(cid:16)(cid:8)(cid:9)(cid:17)(cid:18)(cid:8)(cid:3)
(cid:23)(cid:5)(cid:26)(cid:8)(cid:20)(cid:24)(cid:18)(cid:5)(cid:15)(cid:8)(cid:10)(cid:10)
(cid:13)(cid:6)(cid:7)(cid:5)(cid:4)(cid:6)(cid:3)
(cid:12)(cid:4)(cid:6)(cid:26)(cid:5)(cid:15)(cid:5)(cid:4)(cid:30)(cid:10)
(cid:13)(cid:6)(cid:7)(cid:5)(cid:4)(cid:6)(cid:3)
(cid:27)(cid:1)(cid:22)
(cid:28)(cid:28)(cid:1)(cid:11)(cid:29)(cid:13)
(cid:11)(cid:2)(cid:9)(cid:5)(cid:6)
(cid:1)(cid:8)(cid:3)(cid:5)(cid:19)(cid:16)(cid:8)(cid:3)(cid:2)(cid:18)(cid:10)(cid:31)(cid:17)(cid:24)(cid:10)(cid:13)(cid:2)(cid:7)(cid:2)(cid:32)(cid:8)(cid:3)
(cid:1)(cid:8)(cid:3)(cid:5)(cid:19)(cid:16)(cid:8)(cid:3)(cid:2)(cid:18)(cid:10)(cid:31)(cid:17)(cid:24)
Figure 3: Our trusted scheduling architecture uses a thin layer of software (trusted domain) to initialize and
conﬁgure its hardware components. The scheduler informs the trusted domain when a new application has to
be executed. The trusted domain saves the current system state and transfers control to the new application.
The CPU time-slice monitor and the atomicity monitor together guarantee that the trusted domain can
regain control of the CPU when needed. Each application is allocated its own dedicated memory partition
and application boundaries are enforced using an application-aware memory protection unit (MPU). Finally,
the peripheral bus manager controls access to peripherals and also prevents misbehaving peripherals from
denying applications access to the bus.
cations such that their code and data are protected, prevent-
ing the attacker from modifying applications or preventing
their correct execution by modifying their data. Finally, the
system should be able to securely multiplex shared system
resources and ensure that applications are able to obtain all
resources they need on-time for their correct execution. En-
suring the correct allocation of resources prevents internal
Denial-of-Service (iDoS) attacks in which an attacker holds
on to a system resource (e.g., a bus or a peripheral) required
by another application or exhausts system resources to pre-
vent other applications from running (e.g., dynamically al-
locating memory until it runs out).
In the next section, we describe our design of an embed-
ded system that follows the above reasoning and supports
trusted scheduling.
3. TRUSTED SCHEDULING SYSTEM
Our trusted scheduling system is designed for real-time
systems with a pre-deﬁned set of applications.
It is tai-
lored for embedded devices that are used in security- and
safety-critical applications that have a well-deﬁned and fo-
cused purpose. The system is initialized and conﬁgured by
a trusted administrator and is not expected to be modiﬁed
by the user during use.
3.1 System Overview
Our system is shown in Figure 3. It includes standard em-
bedded system components (shown in white): CPU, RAM,
system bus, peripheral bus, peripherals and trusted schedul-
ing extensions (shown in gray): trusted domain, scheduler,
application-aware MPU, time-slice and atomicity monitors
and a peripheral bus manager.
The scheduler manages the execution of applications and
informs the trusted domain when a new application must be
executed. The scheduler triggers execution of applications
according to its pre-determined schedule or in response to
external events. The scheduler is therefore conﬁgured with
the scheduling policy it must enforce and is aware of the
applications that are running on the system. When a new
application is scheduled to be executed, the trusted domain