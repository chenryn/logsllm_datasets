commit
fee8adc6c8fce9dd1ab62d7ff8f0697b44a188c1
†Chrome Zero currently only supports a global protection policy that
can be changed but applies to all websites.
‡The Chrome Zero extension uses the name “Tin Foil Hat” for Paranoid.
We stick to the naming in Schwarz et al. [67].
USENIX Association
30th USENIX Security Symposium    2871
0.00.20.40.60.81.0 1 5 10 15 20 25AccuracyAdded Jitter (msec)Top-1Top-50.00.20.40.60.81.0 1 5 10 15 20 25AccuracyAdded Jitter (msec)Top-1Top-50.00.10.20.30.4 1 5 10AccuracyAdded Jitter (msec)Top-1Top-5 0.02 0.04 0.06 0.08 0.1 0.12 0.14 0.16 0.18-1-0.5 0 0.5 1Probability DensityJitter (ms)Local LAN ServerCross-Continent ServerMedium
Policy Level
Low
Buffer ASLR Array preloading
Memory Addresses
Ask User
Timer manipulation
Multithreading
—
Shared Array Buffer —
—
Sensor API
Low-resolution timestamp
Message delay
Slow SharedArrayBuffer
Ask User
Paranoid
High
Non-deterministic array Array index randomization
Fuzzy time
WebWorker polyﬁll
Disabled
Fixed Value
Disabled
Disabled
Disabled
Disabled
Table 5: Defense techniques used in each Chrome Zero Policy Level.
protection policy, Chrome Zero applies a “rounded ﬂoor”
function, matching the 100 ms resolution of the Tor Browser.
While this already prevents many attacks [66], higher reso-
lution timers may still be constructed [42, 66, 72]. Thus, at
higher protection levels, instead of using a simple “rounded
ﬂoor” 100 ms timers, Chrome Zero follows the approach of
Vattikonda et al. [73] and fuzzes the timer measurements by
adding random microsecond-level noise. Finally, at its highest
protection level, Chrome Zero disables timers altogether.
Arrays. Schwarz et al. [67] identify that many side-channel
attacks in browsers [24, 26, 28, 30, 57, 66] require some
information about memory addresses. Typically, recovering
the page offset (least signiﬁcant 12 of 21 bits of the address)
facilitates the attacks. Using this information the attacker then
analyzes the victim’s behavior, deducing information about its
control ﬂow and internal data. Chrome Zero therefore applies
several mitigations to JavaScript array APIs.
More speciﬁcally, Chrome Zero’s second-highest protec-
tion level introduces array non-determinism, adding an access
to a random element for each array access. The idea is that
the random accesses themselves force page faults, impeding
the use of page faults as signals for page boundaries. Schwarz
et al. [67] argue that this method prevents eviction set con-
struction [24, 30, 57, 66, 81], as it interferes with the speciﬁc
sequences required to construct an eviction set, while adding
noise to the timing information.
Next, Chrome Zero further deploys the buffer ASLR policy,
which shifts the entire buffer by a random offset. This is
achieved by intercepting the array constructors and access
methods. To prevent page alignment, Chrome Zero increases
the requested array size by 4 KiB, and associates a random
page offset with the array. On array access, Chrome Zero
adds the random offset to the requested array index, thereby
shifting the access by the random offset.
Finally, to protect the offset from being discovered, Chrome
Zero attempts to use the additional accesses to random ele-
ments to pre-load all the array’s memory pages into the cache,
thus preventing attackers from detecting page boundaries by
looking for array elements which have an increased access
time due to page faults.
Protecting Against Browser Exploits. While not being a
primary goal of Chrome Zero, Schwarz et al. [67] argue that
Chrome Zero is also capable of protecting users against some
Figure 6: High-level concept of Chrome Zero
usability study. They claim that Chrome Zero has an aver-
age overhead of 1.82% at the second-highest protection level
(High) and that its presence is indistinguishable to users in 24
of Alexa’s Top 25 websites.
Chrome Zero’s Access Control Implementation. To en-
force security policies, Chrome Zero intercepts JavaScript
API calls using Virtual Machine Layering. Speciﬁcally,
Chrome Zero is implemented as JavaScript code that is in-
jected into a web page when upon initialization. This injected
code wraps sensitive API functions, having the wrappers im-
plement actions speciﬁed by Chrome Zero’s policy. Chrome
Zero uses closures to ensure that the wrapper contains the
only reference to the original API functions, thus ensuring
that websites do not trivially bypass its protection (Figure 6).
Protecting Timers. Traditionally, microarchitectural side-
channel attacks rely on having access to a high-resolution
timer, e.g. to distinguish cache hits from cache misses. This
includes attacks implemented in native code [3, 27, 29, 31,
49, 58, 60, 80, 82] as well as attacks in JavaScript run-
ning inside the browser [24, 26, 57, 66]. As a countermea-
sure for such attacks, Chrome’s current implementation of
performance.now() already reduces timer resolution from
nanoseconds to microseconds and introduces a small amount
of jitter. Although these mitigations protect against some high-
resolution attacks [26, 57, 66], microsecond-accurate timers
still provide sufﬁcient resolution for other side-channel at-
tacks from within JavaScript [28, 30, 66, 70, 72].
To block attacks that exploit microsecond-accurate timers,
Chrome Zero employs two main strategies. At its Medium
2872    30th USENIX Security Symposium
USENIX Association
     JavaScript engine(V8)Chrome ZeroClient JavaScript codeBenign JavaScriptMalicious JavaScriptBenign JavaScriptbrowser exploits. To validate their claim, they reproduced
12 CVEs in the then-current Chrome JavaScript engine, and
found that Chrome Zero prevents exploiting half of the CVEs.
Schwarz et al. [67] attribute this protection to the modiﬁcation
of JavaScript objects in Chrome Zero, which breaks the CVE
exploit code.
1
2
3
4
5
let secureArray = new Array (10) ;
let secureTimer = performance.now () ;
let insecureArray = new
secureArray.__proto__.constructor (10) ;
let insecureTimer =
performance.__proto__.now.call (
performance );
5.2 API Coverage
As stated above, Chrome Zero is essentially an interception
layer, which intercepts the critical JavaScript API calls and
subsequently directs them to the appropriate logic based on
the current website and protection policy. Thus, to guaran-
tee security, it is critical to ensure that malicious JavaScript
code cannot access the original API or otherwise bypass the
Chrome Zero protections.
Our investigation of Chrome Zero demonstrated that API
coverage in Chrome Zero leaves a lot to be desired. Speciﬁ-
cally, we have identiﬁed multiple instances of APIs that are
not protected by Chrome Zero. These include:
• Delayed Extension Initialization. The Chrome Zero ex-
tension initializes after the browser ﬁnishes constructing
the Document Object Model (DOM) for the page. Conse-
quently, Chrome Zero does not protect JavaScript objects
created before the DOM is constructed.
• Missed Contexts. Chrome Zero only applies its security
policies in the context of the topmost page in each browser
tab. It does not, however, protect code in sub-contexts of
the page, including worker threads and iframes.
• Unprotected Prototype Chains. As we discuss in Sec-
tion 2.3, properties of global objects may be inherited from
their prototypes. Yet, while Chrome Zero does protect
global objects, it fails to protect their prototype chains, al-
lowing attackers to access the original JavaScript API.
Exploitation. We have exploited each of those omissions and
demonstrated complete bypass of Chrome Zero protections.
In most cases, such bypasses are fairly trivial. As an example
we show how we exploit unprotected prototype chains.
Figure 7: Object hierarchy with Chrome Zero.
Figure 7 shows the object hierarchy for Array with Chrome
Zero (solid line) and without it (dotted line). The original un-
protected Array class can be accessed using the Array con-
structor method of the prototype object. Figure 8 shows a by-
Figure 8: Bypassing Chrome Zero defenses using prototypes.
pass of Chrome Zero object protections, allowing the attacker
to create original non-proxied JavaScript objects. Lines 1
and 2 show the standard ways of creating an array or get-
ting the timer, both protected by Chrome Zero. In contrast,
Lines 4 and 5 show how to use prototypes to achieve the same
functionality, bypassing Chrome Zero.
Evaluating Chrome Zero’s CVE Protection. We also
evaluate Chrome Zero’s claimed protection against browser
exploits. We ﬁrst reproduce the results of Schwarz et al. [67]
ﬁnding that Chrome Zero prevents six of the 12 exploits they
experiment with. We then extend the evaluation to CVEs
reported after the Chrome Zero publication and ﬁnd that
Chrome Zero blocks four of the 17 exploits we managed
to reproduce in Chrome. We then modify the exploits that
Chrome Zero blocks to use APIs that Chrome Zero fails to
protect, allowing the attacks to run unhindered.
We further note that Chrome Zero only protects incidental
properties of the exploits rather than addressing the underly-
ing vulnerabilities. Speciﬁcally, we can easily modify many
of the blocked exploits to avoid using features that Chrome
Zero protects. For the four exploits we cannot modify to by-
pass Chrome Zero, we ﬁnd that the cause is that the use of
protected typed arrays prevents Chrome from compiling Web
Assembly [75, “read the imports”]. Since the Web Assembly
compiler is not invoked, the browser remains protected.
5.3 Fixing and Re-evaluating Chrome Zero
Chrome Zero’s failure to protect all of the JavaScript API
has implications beyond security. Unprotected objects do not
affect the usability or the performance of the browser. To
evaluate the impact of the approach on usability and perfor-
mance, we ﬁx Chrome Zero to improve its API coverage.
Speciﬁcally, we set Chrome Zero to initialize before any other
script executes and to also apply to frames. We further modify
Chrome Zero to apply its interception to protected objects
and all the objects in their prototype chain. We do not protect
Web Workers, hence our analysis below may still understate
the impact on usability and performance. We further remove
bypasses of array protections that apply to some hard-coded
websites. Speciﬁcally, Chrome Zero does not apply some
array protections to YouTube and to Google Maps.§
§We note that without the bypass, YouTube does not play videos. We
could not ﬁnd any indication of this bypass in Schwarz et al. [67], which we
USENIX Association
30th USENIX Security Symposium    2873
new Array()ArrayProtected ArrayArray PrototypeprototypeprototypeconstructorWithout CRZWith CRZFinally, Schwarz et al. [67] argue that Chrome Zero offers
no noticeable impact on user experience while only having
a negligible performance cost. We test this claim with and
without our security ﬁxes.
Experimental Setup. We use a ThinkPad P50 featuring an
Intel Core i7-6820HQ CPU, with 16 GiB of memory, running
Ubuntu version 18.04, with a Chrome 80 browser without any
extensions. We evaluate usability on Alexa’s Top 25 USA
websites, checking for discernible differences in behavior.
Usability Results. We ﬁrst replicate the results of Schwarz
et al. [67], ﬁnding that an unmodiﬁed Chrome Zero has no
discernible impact on the usability of websites. However, after
ﬁxing the issues identiﬁed in Section 5, we observe a signiﬁ-
cant impact on the usability of websites. Even when setting
Chrome Zero to the Low policy, less than half of the websites
function without noticeable problems. At the a higher protec-
tion level, High, only the websites for Wikipedia and eBay
function properly.
Strict Type Checking.
Investigating the difference in web-
site usability between the original and modiﬁed Chrome Zero,
we ﬁnd that forcing Chrome Zero to apply its policies before
document loading results in type mismatch exceptions while
loading many JavaScript-enabled web sites.
The cause of the issue is that as part of applying its policies,
Chrome Zero replaces any JavaScript object it protects with a
proxy that masquerades as the original object. Typically this
does not cause any problems due to JavaScript’s use of “duck
typing”, since replacing objects with the corresponding proxy
objects is transparent to most JavaScript code, as long as the
original object’s properties are all supported. However, the
W3C standard [20] dictates strict type checking for many in-
ternal JavaScript functions, especially for typed array objects.
In this case, passing a proxy object instead of the original ob-
ject results in a type mismatch exception from the browser’s
JavaScript engine, causing the website’s loading to fail.
Unfortunately, ﬁxing this issue turns out to be a non-trivial
problem, as a signiﬁcant portion of the JavaScript environment
is forced to strictly type check its inputs. This goes well
beyond the member functions of TypedArrays and includes
diverse JavaScript libraries, such as, for example, the Web
Crypto and Web Socket APIs.
Estimating Performance Impact. While we do not claim to
know an efﬁcient method of automatically solving this prob-
lem for the entire JavaScript API, we can efﬁciently solve
the issue for speciﬁc functions through manual intervention,
allowing us to benchmark the result. While we acknowledge
that this does not produce a secure or even correct implemen-
tation, we argue that it nonetheless allows us to measure a
lower-bound of the performance impact that any JavaScript
zero implementation must have. To that aim, we enumerate
ﬁnd odd given the use of YouTube in the usability evaluation. The Chrome
Zero source code claims that the bypass is due to a bug in Chrome, however
our root cause analysis shows that YouTube fails to play videos due to the
type mismatch we discuss in this section.
all of the functions used by the JetStream 1.1 benchmark, and
manually implement ﬁxes for functions that perform strict
type checking. We note that only the set and subarray meth-
ods for typed arrays need to be ﬁxed, while all other parts of
the JavaScript environment can remain unaltered.
Benchmarking Performance For performance benchmarks
we ﬁrst try to reproduce the results of Schwarz et al. [67]. We
use the JetStream 1.1 benchmark to facilitate comparison with
Schwarz et al. [67]. We ﬁnd a slight performance impact of
1.54% when using an unmodiﬁed Chrome Zero. However,
when ensuring that Chrome Zero applies its protections cor-
rectly and applying the minimum level of ﬁxes for strict type
checking we observe a performance impact of 26% in the
latency benchmarks and 98% in the throughput benchmarks.
5.4 Bypassing Non-Deterministic Arrays
With the exception of speculative execution attacks [9, 13,
41, 48], most microarchitectural side-channel attacks retrieve
information about memory access patterns performed by the
victim. For a language such as JavaScript with no notion of
pointers or addresses, most attacks exploit the contiguous
nature and predictable memory layout of arrays to reveal
information about the least signiﬁcant 12 or 21 bits of the
addresses accesses by the victim [26, 30, 57, 66].
To prevent this leakage, Chrome Zero’s second-highest pro-
tection level introduces array non-determinism, performing a
spurious access to a random array index whenever the script
accesses an array element. Chrome Zero further deploys the
buffer ASLR policy, which shifts the entire buffer by a ran-
dom offset, thereby preventing the attacker from obtaining
page-aligned buffers. The main idea is to use the random
offset to deny the attacker from ﬁnding the array elements
located on page boundaries. To protect the offset from being
discovered, Chrome Zero attempts to use the additional ac-
cesses to random elements in order to pre-load all the array’s
memory pages into the cache, thus preventing the attacker
from discovering the array elements which have an increased
accesses time due to page faults.
We now show how we can reliably recover the array ele-
ments corresponding to page boundaries, despite Chrome
Zero’s use of buffer ASLR, non-deterministic arrays, and
fuzzy timers.
Array Implementation in Chrome. Unlike their C coun-
terparts, JavaScript arrays are quite ﬂexible and can be ex-
tended [5], shrunk [4] and even have their type changed [52]
at run-time. While the W3C standards require browsers to
support the extension and shrink APIs, the implementation of
these capabilities is left entirely to the browser vendors.
In Chrome’s V8 JavaScript engine, whenever an array is
initialized, V8 allocates the memory required for the array,
along with an additional memory to support insertion of more
elements in O(1) amortized time. However, after the addi-
tion of enough elements, memory reallocation is eventually
2874    30th USENIX Security Symposium
USENIX Association
needed. Hence V8 allocates a new chunk of memory which is
about 1.5× larger than the old one, and frees the old one after
copying the array’s content to the new location. The formula
used by V8 to determine the size of the new memory buffer is
new_size = size + size (cid:29) 1 + 16,
(1)
where (cid:29) is a bit-wise shift-right operation.
1
2
3
4
5
6
7
8
9
let array = new Array () ;
let times = new Array () ;
for( let i=0; i<10000000; i ++) {
let start = performance.now () ;
array.push (0) ;
let delta = performance.now () - start;
times.push ( delta );