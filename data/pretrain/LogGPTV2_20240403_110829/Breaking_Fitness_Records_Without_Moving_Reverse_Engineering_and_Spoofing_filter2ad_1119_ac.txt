### Communication and Memory Readout

We successfully established communication with the MCU, as illustrated in Figure 11. Since memory readout protection was not activated, we were able to extract the entire firmware image. The STM32L microcontroller offers three levels of memory protection:
1. **Level 0**: No readout protection.
2. **Level 1**: Memory readout protection, where the Flash memory cannot be read from or written to.
3. **Level 2**: Chip readout protection, which disables debug features and boot in RAM selection (JTAG fuse).

In both the Fitbit Flex and Fitbit One, the memory protection was set to level 0, meaning there was no memory readout protection. This allowed us to extract the contents of various memory banks, such as FLASH, SRAM, ROM, and EEPROM, for further analysis.

It is also possible to extract the complete firmware via a Man-in-the-Middle (MITM) setup during an upgrade process, provided the tracker firmware does not use encryption. While sniffing is generally easier to perform, it does not reveal the memory layout and temporal storage contents. Additionally, hardware access enables us to modify memory contents at runtime.

### Device Key Extraction

Initially, we monitored the communications between the Fitbit tracker and the Fitbit server to determine if a key exchange protocol was in place, but found that this was not the case. Therefore, we expected pre-shared keys on the Fitbit trackers, including two different Fitbit One and three different Fitbit Flex devices. By reading the EEPROM, we discovered that the device encryption key is stored there. We identified the exact memory addresses where the 6-byte serial ID and 16-byte encryption key are stored, as shown in Figure 13. We confirmed that each device has a unique, device-specific key, likely programmed during manufacturing [12].

### Disabling Device Encryption

Through our analysis of the device memory content, we found that by flipping one byte at a specific address in the EEPROM, we could force the tracker to operate in unencrypted mode, thereby disabling the encryption. Even trackers previously communicating in encrypted mode switched to plaintext after modifying the encryption flag (byte). Figure 13 illustrates how to flip the byte, causing the tracker to send all sync messages in plaintext format (Base64 encoded), effectively disabling encryption.

### Injecting Fabricated Data Activities

We investigated the EEPROM and SRAM content to find the exact memory addresses where the total step count and other data fields are stored. Based on our knowledge of the packet format and previously sniffed megadumps, we determined that activity records are stored in the EEPROM in the same format. Even encrypted frames are generated based on the EEPROM plaintext records. Thus, fabricated data can be injected, even with the newest firmware that has encryption enabled. As shown in Figures 14a and 14b, we successfully injected 0X00FFFFFF steps (equal to 16,777,215 in decimal) into the Fitbit server by modifying the corresponding address field in the EEPROM and subsequently synchronizing the tracker with the server.

### Discussion

In this section, we provide a set of implementation guidelines for fitness trackers. Although Fitbit is currently the only manufacturer that puts significant effort into securing their trackers [15], these guidelines are applicable to other health-related IoT devices. Our goal is to transfer the lessons learned into open security and privacy standards that are being developed [4].

**False Data Injection:**
The ability to inject false data, as described in the previous sections, is made possible by certain design choices in the implementation of the Fitbit trackers and the communication protocol used between the trackers and the Fitbit application servers. These design choices relate to the application of encryption techniques, the design of protocol messages, and the implementation of the hardware itself. To mitigate such weaknesses in future system designs, we propose the following mitigation techniques:

1. **Application of Encryption Techniques:**
   - The examined trackers support full end-to-end encryption but do not consistently enforce its use. This allows for an in-depth analysis of the data synchronization protocol and the fabrication of messages with false activity data, which are accepted as genuine by the Fitbit servers.
   - **Suggestion 1:** End-to-end encryption between trackers and remote servers should be consistently enforced, if supported by the device firmware.

2. **Protocol Message Design:**
   - Generating valid protocol messages without a clear understanding of the CRC in use is facilitated by the fact that the server responds to invalid messages with information about the expected CRC values, rather than a simple "invalid CRC" or a more general "invalid message" response.
   - **Suggestion 2:** Error and status notifications should not include additional information related to the contents of actual protocol messages.
   - **Suggestion 3:** Messages should be signed with an individual signature subkey derived from the device key.

3. **Hardware Implementation:**
   - The microcontroller hardware used in the analyzed trackers provides memory readout protection mechanisms, but these were not enabled. This opens an attack vector for gaining access to tracker memory, allowing us to circumvent even the relatively robust protection provided by end-to-end message encryption.
   - **Suggestion 4:** Hardware-supported memory readout protection should be applied by default.
   - Specifically, on the MCUs of the investigated tracking devices, the memory should be protected by enabling chip readout protection level 2.

4. **Fraud Detection Measures:**
   - In our experiments, we were able to inject fabricated activity data with clearly unreasonable high performance values (e.g., more than 16 million steps in a single day). This suggests that data should be more closely monitored by the servers before accepting activity updates.
   - **Suggestion 5:** Fraud detection measures should be applied to screen for data resulting from malicious modifications or malfunctioning hardware. For example, accounts with unusual or abnormal activity profiles should be flagged and potentially disqualified if obvious irregularities are detected.

### Related Work

- **University of Toronto [18]:** Researchers investigated transmission security, data integrity, and Bluetooth privacy of eight fitness trackers, including the Fitbit Charge HR. They focused on whether personal data is encrypted when transmitted over the Internet and examined data integrity. They did not attempt to reverse engineer the proprietary encoding or encryption used for transmitting data.
- **Rahman et al. [9] (2013):** Studied the communication between the Fitbit Ultra and its base station, identifying critical vulnerabilities, such as the use of plaintext login information and HTTP data processing. They proposed FitLock as a solution, which has since been patched by Fitbit.
- **Zhou et al. [20]:** Followed up on Rahman's work, identifying shortcomings in FitLock but did not propose countermeasures.
- **Rahman et al. [21] (2014):** Detailed weaknesses in Fitbit’s communication protocol, enabling them to inject falsified data. They proposed SensCrypt, a protocol for securing and managing low-power fitness trackers.
- **Cyr et al. [10]:** Analyzed the Fitbit Flex ecosystem, focusing on Bluetooth LE, the associated Android app, and network analysis.
- **AV TEST [19]:** Evaluated the security and privacy of nine fitness trackers, including the Fitbit Charge, and reported some security issues, which have since been fixed by Fitbit.
- **[12]:** Captured the firmware image of the Fitbit Charge HR during a firmware update, reversed engineered the cryptographic primitives, and recovered the authentication protocol. They also extracted the device-specific encryption key using the Bluetooth interface. Memory readout has been fixed in recent firmware versions.

### Conclusion

Trusting the authenticity and integrity of the data generated by fitness trackers is crucial, as these records are increasingly used in critical scenarios such as court trials and healthcare insurance premium adjustments. In this paper, we conducted an in-depth security analysis of two popular Fitbit activity trackers, revealing serious security and privacy vulnerabilities. We reverse-engineered the communication primitives, implemented an open-source tool to extract sensitive personal information, and demonstrated the injection of spoofed activity records. To circumvent the end-to-end protocol encryption mechanism present in the latest firmware, we performed hardware-based reverse engineering and documented the successful injection of falsified data that appears legitimate to the Fitbit cloud. We believe more rigorous security controls should be enforced by manufacturers to verify the authenticity of fitness data. To this end, we provided a set of guidelines to address the identified vulnerabilities.

### Acknowledgments

Hossein Fereidooni is supported by the Deutsche Akademische Austauschdienst (DAAD). Mauro Conti is supported by the EU TagItSmart! Project (agreement H2020-ICT30-2015-688061) and IT-CNR/Taiwan-MOST 2016-17 “Verifiable Data Structure Streaming”. This work has been co-funded by the DFG as part of projects S1 and S2 within the CRC 1119 CROSSING, and by the BMBF within CRISP. Paul Patras has been partially supported by the Scottish Informatics and Computer Science Alliance (SICSA) through a PECE grant.

We thank the Fitbit Security Team for their professional collaboration, availability to discuss our findings, and efforts to address the vulnerabilities we identified.

### References

1. Forbes. Wearable tech market to be worth $34 billion by 2020. February 2016. https://www.forbes.com/sites/paullamkin/2016/02/17/wearable-tech-market-to-be-worth-34-billion-by-2020
2. International Data Corporation. Worldwide quarterly wearable device tracker, March 2017. https://www.idc.com/tracker/showproductinfo.jsp?prod_id=962
3. Mashable. Husband learns wife is pregnant from her Fitbit data, February 2016. http://mashable.com/2016/02/10/fitbit-pregnant/
4. The Wall Street Journal. Prosecutors in rape case say Fitbit device exposed fibbing, April 2016. http://blogs.wsj.com/law/2016/04/21/prosecutors-say-fitbit-device-exposed-fibbing-in-rape-case/
5. The Guardian. Court sets legal precedent with evidence from Fitbit health tracker, November 2014. https://www.theguardian.com/technology/2014/nov/18/court-accepts-data-fitbit-health-tracker
6. VitalityHealth. https://www.vitality.co.uk/rewards/partners/activity-tracking/
7. AchieveMint. https://www.achievemint.com
8. StepBet. https://www.stepbet.com/
9. Rahman, M., Carbunar, B., Banik, M.: Fit and vulnerable: attacks and defenses for a health monitoring device. In: Proceedings of the Privacy Enhancing Technologies Symposium (PETS), Bloomington, IN, USA (2013)
10. Cyr, B., Horn, W., Miao, D., Specter, M.: Security Analysis of Wearable Fitness Devices (Fitbit) (2014). https://courses.csail.mit.edu/6.857/2014/files/17-cyrbritt-webbhorn-specter-dmiao-hacking-fitbit.pdf
11. Clausing, E., Schiefer, M., Morgenstern, M.: AV TEST Analysis of Fitbit Vulnerabilities (2016). https://www.av-test.org/fileadmin/pdf/avtest_2016-04_fitbit_vulnerabilities.pdf
12. Schellevis, M., Jacobs, B., Meijer, C.: Security/privacy of wearable fitness tracking IoT devices. Radboud University. Bachelor thesis: Getting access to your own Fitbit data, August 2016
13. Accenture. Digital trust in the IoT era (2015)
14. PwC 2016: Use of wearables in the workplace is halted by lack of trust. http://www.pwc.co.uk/who-we-are/regional-sites/northern-ireland/press-releases/use-of-wearables-in-the-workplace-is-halted-by-lack-of-trust-pwc-research.html
15. Fereidooni, H., Frassetto, T., Miettinen, M., Sadeghi, A.-R., Conti, M.: Fitness Trackers: Fit for health but unfit for security and privacy. In: Proceedings of the IEEE International Workshop on Safe, Energy-Aware, & Reliable Connected Health (CHASE workshop: SEARCH 2017), in press, Philadelphia, Pennsylvania, USA, July 17–19 (2017)
16. Galileo project. https://bitbucket.org/benallard/galileo/
17. Wireshark network protocol analyzer. https://www.wireshark.org/
18. Hilts, A., Parsons, C., Knockel, J.: Every Step You Fake: A Comparative Analysis of Fitness Tracker Privacy and Security. Open Effect Report (2016). https://openeffect.ca/reports/Every_Step_You_Fake.pdf
19. Clausing, E., Schiefer, M., Morgenstern, M.: Internet of Things: Security Evaluation of nine Fitness Trackers. AV TEST, The Independent IT-Security institute, Magdeburg, Germany (2015)
20. Zhou, W., Piramuthu, S.: Security/privacy of wearable fitness tracking IoT devices. In: IEEE Iberian Conference on Information Systems and Technologies (2014)
21. Rahman, M., Carbunar, B., Topkara, U.: Secure management of low power fitness trackers. Published IEEE Trans. Mob. Comput. 15(2), 447–459 (2016)