RHEL 8 中包含的库提供的默认设置足以满足大多数部署的需要。TLS
实现尽可能使用安全算法，而不阻止来自或到旧客户端或服务器的连接。在具有严格安全要求的环境中应用强化设置，在这些环境中，不支持安全算法或协议的旧客户端或服务器不应连接或不允许连接。
强化 TLS 配置的最简单方法是使用
`update-crypto-policies --set FUTURE`{.literal}
命令将系统范围的加密策略级别切换到 `FUTURE`{.literal} 。
如果您决定不遵循 RHEL
系统范围的加密策略，请在自定义配置中对首选协议、密码套件和密钥长度使用以下建议：
::: section
::: titlepage
## []{#planning-and-implementing-tls_securing-networks.html#_protocols}协议 {.title}
:::
TLS 的最新版本提供了最佳安全机制。除非有充分的理由包含对旧版本的 TLS
的支持，否则请允许您的系统使用至少 TLS 版本 1.2 来协商连接。请注意，虽然
RHEL 8 支持 TLS 版本 1.3，但 RHEL 8
组件并不完全支持此协议的所有功能。例如，Apache 或 Nginx web
服务器尚不完全支持 0-RTT(Zero Round Trip
Time)功能，该功能可降低连接延迟。
:::
::: section
::: titlepage
## []{#planning-and-implementing-tls_securing-networks.html#_cipher_suites}密码套件 {.title}
:::
现代、更安全的密码套件应该优先于旧的不安全密码套件。一直禁止 eNULL 和
aNULL 密码套件的使用，它们根本不提供任何加密或身份验证。如果有可能，基于
RC4 或 HMAC-MD5
的密码套件也必须被禁用。这同样适用于所谓的出口密码套件，它们被有意地弱化了，因此很容易被破解。
虽然不会立即变得不安全，但提供安全性少于 128
位的密码套件在它们的短使用期中不应该被考虑。使用 128
位或者更高安全性的算法可以预期在至少数年内不会被破坏，因此我们强烈推荐您使用此算法。请注意，虽然
3DES 密码公告使用 168 位但它们实际只提供了 112 位的安全性。
始终优先使用支持(完美)转发保密(PFS)的密码套件，这样可确保加密数据的机密性，以防服务器密钥被泄露。此规则排除了快速
RSA 密钥交换，但允许使用 ECDHE 和 DHE。在两者中，ECDHE
更快，因此是首选。
您还应该在 CBC 模式密码之前优先使用 AEAD 密码，如
AES-GCM，因为它们不易受到 padding oracle 攻击。此外，在很多情况下，在
CBC 模式下，AES-GCM 比 AES 快，特别是当硬件具有 AES 加密加速器时。
另请注意，在使用带有 ECDSA 证书的 ECDHE 密钥交换时，事务的速度甚至比纯
RSA
密钥交换要快。为了给旧客户端提供支持，您可以在服务器上安装两对证书和密钥：一对带有
ECDSA 密钥（用于新客户端），另一对带有 RSA 密钥（用于旧密钥）。
:::
::: section
::: titlepage
## []{#planning-and-implementing-tls_securing-networks.html#_public_key_length}公钥长度 {.title}
:::
在使用 RSA 密钥时，总是首选使用至少由 SHA-256 签名的 3072
位的密钥长度，对于真实的 128 位安全性来说，这个值已经足够大。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
您的系统安全性仅与链中最弱的连接相同。例如，只是一个强大的密码不能保证良好安全性。密钥和证书以及认证机构(CA)用来签署您的密钥的哈希功能和密钥同样重要。
:::
::: itemizedlist
**其它资源**
-   [RHEL 8
    中的系统范围的加密策略](https://access.redhat.com/articles/3666211){.link}。
-   `update-crypto-policies(8)`{.literal} man page。
:::
:::
:::
::: section
::: titlepage
# []{#planning-and-implementing-tls_securing-networks.html#hardening-tls-configuration-in-applications_planning-and-implementing-tls}在应用程序中强化 TLS 配置 {.title}
:::
在 Red Hat Enterprise Linux 8
中，[系统范围的加密策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening){.link}
提供了一种便捷的方法，以确保使用加密库的应用程序不允许使用已知不安全的协议、密码或算法。
如果要使用自定义加密设置来强化与 TLS
相关的配置，您可以使用本节中描述的加密配置选项，并以最少的需求量覆盖系统范围的加密策略。
无论您选择使用什么配置，请始终确保您的服务器应用程序强制实施
[*服务器端密码顺序*]{.emphasis}，以便使用的密码套件由您配置的顺序来决定。
::: section
::: titlepage
## []{#planning-and-implementing-tls_securing-networks.html#configuring-the-apache-http-server_planning-and-implementing-tls}配置 `Apache HTTP 服务器`{.literal} {.title}
:::
`Apache HTTP 服务器`{.literal} 可以使用 `OpenSSL`{.literal} 和
`NSS`{.literal} 库来满足其 TLS 的需求。Red Hat Enterprise Linux 8 通过
eponymous 软件包提供 `mod_ssl`{.literal} 功能：
``` screen
# yum install mod_ssl
```
`mod_ssl`{.literal} 软件包将安装 `/etc/httpd/conf.d/ssl.conf`{.literal}
配置文件，该文件可用来修改 `Apache HTTP 服务器`{.literal} 与 TLS
相关的设置。
安装 `httpd-manual`{.literal} 软件包以获取
`Apache HTTP 服务器`{.literal} 的完整文档，包括 TLS
配置。`/etc/httpd/conf.d/ssl.conf`{.literal} 配置文件中的指令在
[/usr/share/httpd/manual/mod_ssl.html](file:///usr/share/httpd/manual/mod/mod_ssl.html){.link}
中有详细介绍。各种设置示例位于
[/usr/share/httpd/manual/ssl/ssl_howto.html](file:///usr/share/httpd/manual/ssl/ssl_howto.html){.link}。
修改 `/etc/httpd/conf.d/ssl.conf`{.literal}
配置文件中的设置时，请确保至少考虑以下三个指令：
::: variablelist
[`SSLProtocol`{.literal}]{.term}
:   使用这个指令指定您要允许的 TLS 或者 SSL 版本。
[`SSLCipherSuite`{.literal}]{.term}
:   使用这个指令来指定您首选的密码套件或禁用您要禁止的密码套件。
[`SSLHonorCipherOrder`{.literal}]{.term}
:   取消注释并将此指令设置为
    `on`{.literal}，以确保连接的客户端遵循您指定的密码顺序。
:::
例如，只使用 TLS 1.2 和 1.3 协议：
``` screen
SSLProtocol             all -SSLv3 -TLSv1 -TLSv1.1
```
如需更多信息，请参阅
[部署不同类型的服务器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/deploying_different_types_of_servers/index){.link}
文档中的 [在 Apache HTTP 服务器上配置 TLS
加密](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/deploying_different_types_of_servers/setting-apache-http-server_deploying-different-types-of-servers#configuring-tls-encryption-on-an-apache-http-server_setting-apache-http-server){.link}
一章。
:::
::: section
::: titlepage
## []{#planning-and-implementing-tls_securing-networks.html#configuring-the-nginx-http-and-proxy-server_planning-and-implementing-tls}配置 `Nginx`{.literal} HTTP 和代理服务器 {.title}
:::
要在 `Nginx`{.literal} 中启用 TLS 1.3 支持，请将 `TLSv1.3`{.literal}
值添加到 `/etc/nginx/nginx.conf`{.literal} 配置文件的 `server`{.literal}
部分的 `ssl_protocols`{.literal} 选项：
``` screen
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    ....
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers
    ....
}
```
如需更多信息，请参阅
[部署不同类型的服务器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/deploying_different_types_of_servers/index){.link}
文档中的 [向 Nginx web 服务器添加 TLS
加密](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/deploying_different_types_of_servers/setting-up-and-configuring-nginx_deploying-different-types-of-servers#adding-tls-encryption-to-an-nginx-web-server_setting-up-and-configuring-nginx){.link}
一章。
:::
::: section
::: titlepage
## []{#planning-and-implementing-tls_securing-networks.html#configuring-the-Dovecot-mail-server_planning-and-implementing-tls}配置 Dovecot 邮件服务器 {.title}
:::
要将 `Dovecot`{.literal} 邮件服务器的安装配置为使用 TLS，请修改
`/etc/dovecot/conf.d/10-ssl.conf`{.literal} 配置文件。您可以在
[/usr/share/doc/dovecot/wiki/SSL.DovecotConfiguration.txt](/usr/share/doc/dovecot/wiki/SSL.DovecotConfiguration.txt){.link}
文件中找到其提供的一些基本配置指令的说明，该文件与 `Dovecot`{.literal}
的标准安装一起安装。
修改 `/etc/dovecot/conf.d/10-ssl.conf`{.literal}
配置文件中的设置时，请确保至少考虑以下三个指令：
::: variablelist
[`ssl_protocols`{.literal}]{.term}
:   使用这个指令指定您要允许或者禁用的 TLS 或者 SSL 版本。
[`ssl_cipher_list`{.literal}]{.term}
:   使用这个指令指定您首选的密码套件或禁用您要禁止的密码套件。
[`ssl_prefer_server_ciphers`{.literal}]{.term}
:   取消注释并将此指令设置为
    `yes`{.literal}，以确保连接的客户端遵循您指定的密码顺序。
:::
例如，`/etc/dovecot/conf.d/10-ssl.conf`{.literal} 中的以下行只允许 TLS
1.1 及之后的版本：
``` screen
ssl_protocols = !SSLv2 !SSLv3 !TLSv1
```
::: itemizedlist
**其它资源**
-   [在 RHEL 8
    上部署不同类型的服务器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/deploying_different_types_of_servers/index){.link}
-   `config(5)`{.literal} 和 `ciphers(1)`{.literal} 手册页。
-   [安全使用传输层安全性(TLS)和数据报传输层安全性(DTLS)的建议](https://tools.ietf.org/html/rfc7525){.link}。
-   [Mozilla SSL
    配置生成器](https://mozilla.github.io/server-side-tls/ssl-config-generator/){.link}。
-   [SSL 服务器测试](https://www.ssllabs.com/ssltest/){.link} 。
:::
:::
:::
:::
[]{#configuring-a-vpn-with-ipsec_securing-networks.html}
::: chapter
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#configuring-a-vpn-with-ipsec_securing-networks}第 4 章 使用 IPsec 配置 VPN {.title}
:::
在 Red Hat Enterprise Linux 8 中，可以使用 `IPsec`{.literal}
协议来配置虚拟专用网络(VPN)，该协议得到 `Libreswan`{.literal}
应用程序的支持。
::: section
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#libreswan-as-an-ipsec-vpn-implementation_configuring-a-vpn-with-ipsec}libreswan 作为 IPsec VPN 的实现 {.title}
:::
在 Red Hat Enterprise Linux 8 中，可以使用 `IPsec`{.literal}
协议来配置虚拟专用网络(VPN)，该协议得到 `Libreswan`{.literal}
应用程序的支持。`Libreswan`{.literal} 是 `Openswan`{.literal}
应用的延续，`Openswan`{.literal} 文档中的许多示例可与
`Libreswan`{.literal} 互换。
VPN 的 `IPsec`{.literal}
协议是使用互联网密钥交换(`IKE`{.literal})协议进行配置的。术语 IPsec 和
IKE 可互换使用。IPsec VPN 也称为 IKE VPN、IKEv2 VPN、XAUTH VPN、Cisco
VPN 或 IKE/IPsec VPN。同样使用级别 2 隧道协议(`L2TP`{.literal})的 IPsec
VPN 变体通常称为 L2TP/IPsec VPN，其需要可选通道 `xl2tpd`{.literal}
应用程序。
`Libreswan`{.literal} 是一种开源的、用户空间 `IKE`{.literal}
实现。`IKE`{.literal} v1 和 v2 作为用户级守护进程来实现。IKE
协议也加密。`IPsec`{.literal} 协议是通过 Linux
内核实现的，`Libreswan`{.literal} 配置内核以添加和删除 VPN 隧道配置。
`IKE`{.literal} 协议使用 UDP 端口 500 和 4500。`IPsec`{.literal}
协议由两个协议组成：
::: itemizedlist
-   封装的安全有效负载(`ESP`{.literal})，其协议号为 50。
-   经过身份验证的标头(`AH`{.literal})，其协议号为 51。
:::
不建议使用 `AH`{.literal} 协议。建议 `AH`{.literal} 的用户迁移到使用
null 加密的 `ESP`{.literal}。
`IPsec`{.literal} 协议提供了两种操作模式：
::: itemizedlist
-   `隧道模式`{.literal} （默认）
-   `传输模式`{.literal} 。
:::
您可以用没有 IKE 的 IPsec 来配置内核。这称为 `手动密钥`{.literal}
。您还可以使用 `ip xfrm`{.literal}
命令来配置手动密钥，但为了安全起见，强烈建议您不要这样做。`Libreswan`{.literal}
使用 netlink 与 Linux 内核连接。在 Linux 内核中进行数据包加密和解密。
`libreswan`{.literal}
使用网络安全服务(`NSS`{.literal})加密库。`Libreswan`{.literal} 和
`NSS`{.literal} 均通过了 [*联邦信息处理标准*]{.emphasis}
([**FIPS**]{.strong})出版物 140-2 的认证。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
由 `Libreswan`{.literal} 和 Linux 内核实现的
`IKE`{.literal}/`IPsec`{.literal} VPN 是 Red Hat Enterprise Linux 8
推荐使用的唯一的 VPN 技术。在不了解这样做风险的情况下不要使用任何其他
VPN 技术。
:::
在 Red Hat Enterprise Linux 8 中，`Libreswan`{.literal} 默认遵循
[**系统范围的加密策略**]{.strong}。这样可确保 `Libreswan`{.literal}
将当前威胁模型包括 （`IKEv2`{.literal}
）的安全设置用作默认协议。如需更多信息，请参阅[使用系统范围的加密策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/security_hardening/index#using-the-system-wide-cryptographic-policies_security-hardening){.link}。
`Libreswan`{.literal}
不使用术语\"源\"和\"目的地\"或\"服务器\"和\"客户端\"，因为 IKE/IPsec
是对等协议。相反，它使用术语\"左\"和\"右\"来指端点（主机）。这也允许您在大多数情况下在两个端点使用相同的配置。但是，管理员通常选择始终对本地主机使用\"左\"，对远程主机使用\"右\"。
:::
::: section
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#installing-libreswan_configuring-a-vpn-with-ipsec}安装 Libreswan {.title}
:::
这个流程描述了安装和启动 `Libreswan`{.literal} IPsec/IKE VPN
实现的步骤。
::: itemizedlist
**先决条件**
-   `AppStream`{.literal}存储库已启用。
:::
::: orderedlist
**流程**
1.  安装 `libreswan`{.literal} 软件包：
    ``` screen
    # yum install libreswan
    ```
2.  如果您要重新安装 `Libreswan`{.literal}，请删除其旧数据库文件：
    ``` screen
    # systemctl stop ipsec