it uses two calls to
setsockopt to provide the location of its private key
and certiﬁcate chain ﬁle to be used for authenticating
itself to clients during the TLS handshake. After the
listening descriptor is established, the server then iter-
atively handles requests from incoming client connec-
tions, and the SSA performs a handshake with clients
transparently using the provided options. As with the
client case, calls to send and recv have their data en-
crypted and decrypted in accordance with the TLS ses-
sion, before they are delivered to relevant destinations.
5.2 Administrator Options
Our second design goal is to enable administrator control
over TLS parameters set by the SSA. Administrators gain
this control through a protected conﬁguration ﬁle, which
exports the following options:
• TLS Version: Select which TLS versions to enable,
in order of preference (default: TLS 1.2, TLS 1.1,
TLS 1.0).
• Cipher Suites: Select which cipher suites to enable,
in order of preference (vulnerable ciphers are dis-
abled by default).
• Certiﬁcate Validation: Select active certiﬁcate val-
idation mechanisms and strengthening technologies.
We cover this in more detail at the end of this section.
• Honor Application Validation: Specify whether to
honor validation against root stores supplied by ap-
plications (default: true).
804    27th USENIX Security Symposium
USENIX Association
POSIX Function
General Behavior
socket
connect
bind
listen
accept
Create an endpoint for communication uti-
lizing the given protocol family, type, and
optionally a speciﬁc protocol.
Connect the socket to the address speciﬁed
by the addr parameter for stream protocols,
or indicate a destination address for subse-
quent transmissions for datagram protocols.
Bind the socket to a given local address.
Mark a connection-based socket
(e.g.,
SOCK STREAM) as a passive socket to be
used for accepting incoming connections.
Retrieve connection request from the pend-
ing connections of a listening socket and
create a new socket descriptor for interac-
tions with the remote endpoint.
send, sendto, etc.
Transmit data to a remote endpoint.
recv, recvfrom, etc. Receive data from a remote endpoint.
shutdown
close
select, poll, etc.
setsockopt
getsockopt
Perform full or partial tear-down of connec-
tion, based on the how parameter.
Close a socket, perform connection tear-
down if there are no remaining references
to socket.
Wait for one or more descriptors to become
ready for I/O operations.
Manipulate options associated with a
socket, assigning values to speciﬁc options
for multiple protocol
levels of the OSI
stack.
Retrieve a value associated with an option
from a socket, speciﬁed by the level and
option name parameters.
Behavior under IPPROTO TLS
Create an endpoint for TLS communica-
tion, which utilizes TCP for its trans-
port protocol
if the type parameter is
SOCK STREAM and uses DTLS over UDP if
type is SOCK DGRAM.
Perform a connection for the underlying
transport protocol if applicable (e.g., TCP
handshake), and perform the TLS hand-
shake (client-side) with the speciﬁed re-
mote address. Certiﬁcate and hostname val-
idation is performed according to adminis-
trator and as optionally speciﬁed by the ap-
plication via setsockopt.
No TLS-speciﬁc behavior.
No TLS-speciﬁc behavior.
Retrieve a connection request from the
pending connections, perform the TLS
handshake (server-side) with the remote
endpoint, and create a new descriptor for in-
teractions with the remote endpoint.
Encrypt and transmit data to a remote end-
point.
Receive and decrypt data from a remote
endpoint.
Send a TLS close notify.
Close a socket, send a TLS close notify, and
tear-down connection, if applicable.
No TLS-speciﬁc behavior.
Manipulate TLS speciﬁc options when the
level parameter is IPPROTO TLS, such as
specifying a certiﬁcate or private key to as-
sociate with the socket. Other level values
interact with the socket according to their
existing semantics.
For a level value of IPPROTO TLS, re-
trieve TLS-speciﬁc option values. Other
level values interact with the socket ac-
cording to their existing semantics.
Table 2: Brief descriptions of the behavior of POSIX socket functions generally and under IPPROTO TLS speciﬁcally.
General behavior is paraphrased from relevant manpages.
USENIX Association
27th USENIX Security Symposium    805
/* Use h o s t n a m e address family */
struct s o c k a d d r _ h o s t addr ;
addr . s i n _ f a m i l y = A F _ H O S T N A M E ;
strcpy ( addr . s i n _ a d d r . name , " www . example . com " ) ;
addr . s i n _ p o r t = htons (443) ;
/* Request a TLS socket ( instead of TCP ) */
fd = socket ( PF_INET , SOCK_STREAM , I P P R O T O _ T L S ) ;
/* TLS H a n d s h a k e ( v e r i f i c a t i o n done for us ) */
connect ( fd , & addr , sizeof ( addr ) ) ;
/* H a r d c o d e d HTTP request */
char h t t p _ r e q u e s t [] = " GET / HTTP /1.1\ r \ n ... "
char h t t p _ r e s p o n s e [2048];
memset ( http_response , 0 , 2048) ;
/* Send HTTP request e n c r y p t e d with TLS */
send ( fd , http_request , sizeof ( h t t p _ r e q u e s t ) -1 ,0) ;
/* Receive d e c r y p t e d r e s p o n s e */
recv ( fd , http_response , 2047 , 0) ;
/* S h u t d o w n TLS c o n n e c t i o n and socket */
close ( fd ) ;
/* Print r e s p o n s e */
printf ( " R e c e i v e d :\ n % s " , h t t p _ r e s p o n s e ) ;
return 0;
(a) A simple HTTPS client example under the SSA.
Error checks and some trivial code are removed for
brevity. Alternatively,
the client could have used the
TLS REMOTE HOSTNAME option with setsockopt to indi-
cate the hostname, and called connect using traditional
AF INET or AF INET6 address families.
/* Use s t a n d a r d IPv4 address */
struct s o c k a d d r _ i n addr ;
addr . s i n _ f a m i l y = AF_INET ;
addr . s i n _ a d d r . s_addr = I N A D D R _ A N Y ;
/* We want to listen on port 443 */
addr . s i n _ p o r t = htons (443) ;
/* Request a TLS socket ( instead of TCP ) */
fd = socket ( PF_INET , SOCK_STREAM , I P P R O T O _ T L S ) ;
/* Bind to local address and port */
bind ( fd , & addr , sizeof ( addr ) ) ;
/* Assign c e r t i f i c a t e chain */
s e t s o c k o p t ( fd , IPPROTO_TLS ,
T L S _ C E R T I F I C A T E _ C H A I N ,
CERT_FILE , sizeof ( C E R T _ F I L E ) ) ;
/* Assign private key */
s e t s o c k o p t ( fd , IPPROTO_TLS , T LS _ P RI V AT E _ KE Y ,
KEY_FILE , sizeof ( K E Y _ F I L E ) ) ;
listen ( fd , S O M A X C O N N ) ;
while (1) {
struct s o c k a d d r _ s t o r a g e addr ;
s o c k l e n _ t a d d r _ l e n = sizeof ( addr ) ;
/* Accept new client and do TLS h a n d s h a k e
using cert and keys p r o v i d e d */
int c_fd = accept ( fd , & addr , & a d d r _ l e n ) ;
/* Receive d e c r y p t e d request */
recv ( c_fd , request , BUFFER_SIZE , 0) ;
h a n d l e _ r e q ( request , r e s p o n s e ) ;
/* Send e n c r y p t e d r e s p o n s e */
send ( c_fd , response , BUFFER_SIZE , 0) ;
close ( c_fd ) ;
}
(b) A simple server example under the SSA. Error checks
and some trivial code are removed for brevity.
Figure 1: Code examples for applications using the SSA.
to employ (e.g., “ALPN”).
• Enabled Extensions: Specify names of extensions
• Session Caching: Conﬁgure session cache informa-
• Default Paths: Specify default paths for the private
keys and certiﬁcates to employ when developers do
not supply them.
tion (TTL, size, location).
5.2.1 Application Proﬁles
The settings mentioned are applied to all TLS connec-
tions made with the SSA on the machine. However, addi-
tional conﬁguration proﬁles can be created or installed by
the administrator for speciﬁc applications that override
the global settings. The SSA enforces global TLS pol-
icy for any application, unless a conﬁguration proﬁle for
that speciﬁc application is present, in which case it en-
forces the settings from the application-speciﬁc proﬁle.
We do this in a fashion similar to the application-speciﬁc
proﬁles of AppArmor [24], the mandatory access con-
trol module used by Ubuntu and other Linux distribu-
tions. Under AppArmor, application-speciﬁc access con-
trol policy is deﬁned in a textual conﬁguration ﬁle, which
speciﬁes the target application using the ﬁle system path
to the executable of the application. When the applica-
tion is run, AppArmor uses the rules in the custom proﬁle
when enforcing access control policy. Ubuntu ships with
AppArmor proﬁles for a variety of common applications.
Administrators can create their own proﬁles or customize
those supplied by their OS vendor. We adopt a simi-
lar scheme, in which TLS conﬁguration can be tailored
to speciﬁc applications using custom SSA conﬁguration
proﬁles. These application proﬁles can be distributed by
OS vendors, application developers, and third parties, or
created by administrators. In any case, administrators are
free to modify any conﬁguration to match their policies.
5.2.2 Certiﬁcate Validation
Special care is given to certiﬁcate validation as it is
complex and commonly misused. In an effort to max-
imize security and the ﬂexibility available to adminis-
trators, the SSA allows administrators to select between
standard validation and TrustBase [18]. Under standard
validation, traditional certiﬁcate validation will be per-
formed. This includes some additional checks made by
strengthening technologies, such as revocation checks,
where available. TrustBase is available for administra-
tors who wish to have ﬁner-grained control over vali-
dation, or who wish to employ more exotic validation
mechanisms. Under TrustBase, administrators can em-
ploy multiple validation strategies, and use them simulta-
neously with various aggregation policies. For example,
using TrustBase, we have deployed validation strategies
806    27th USENIX Security Symposium
USENIX Association
IPPROTO TLS socket option
Purpose
TLS REMOTE HOSTNAME
TLS HOSTNAME
TLS CERTIFICATE CHAIN
TLS PRIVATE KEY
TLS TRUSTED PEER CERTIFICATES
TLS ALPN
TLS SESSION TTL
TLS DISABLE CIPHER
TLS PEER IDENTITY
TLS PEER CERTIFICATE CHAIN
Used to indicate the hostname of the remote host. This option will cause the SSA to use the Server
Name Indication in the TLS Client Hello message, and also use the speciﬁed hostname to verify the
certiﬁcate in the TLS handshake. Use of the AF HOSTNAME address type in connect will set this option
automatically.
Used to specify and retrieve the hostname of the local socket. Servers can use this option to multiplex
incoming connections from clients requesting different hostnames (e.g., hosting multiple HTTPS sites
on one port).
Used to indicate the certiﬁcate (or chain of certiﬁcates) to be used for the TLS handshake. This option
can be used by both servers and clients. A single certiﬁcate may be used if there are no intermediate
certiﬁcates to be used for the connection. The value itself can be sent either as a path to a certiﬁcate
ﬁle or an array of bytes, in PEM format. This option can be set multiple times to allow a server to use
multiple certiﬁcates depending on the requests of the client.
Used to indicate the private key associated with a previously indicated certiﬁcate. The value of this
option can either be a path to a key ﬁle or an array of bytes, in PEM format. The SSA will report an
error if the provided key does not match a provided certiﬁcate.
Used to indicate one or more certiﬁcates to be a trust store for validating certiﬁcates sent by the remote
peer. These can be leaf certiﬁcates that directly match the peer certiﬁcate and/or those that directly or
indirectly sign the peer certiﬁcate. Note that in the presence or absence of this option, peer certiﬁcates
are still validated according to system policy.
Used to indicate a list of IANA-registered protocols for Application-Layer Protocol Negotiation (e.g.,
HTTP/2), in descending order of preference. This option can be fetched after connect/accept to
determine the selected protocol.
Request that the SSA expire sessions after the given number of seconds. A value of zero disables
session caching entirely.
Request that the underlying TLS connection not use the speciﬁed cipher.
Request the identity of remote peer as indicated by the peer’s certiﬁcate.
Request the remote peer’s certiﬁcate chain in PEM format for custom inspection.
Table 3: Sample of socket options at the IPPROTO TLS level
consisting of combinations of standard validation, OCSP
checking [22], Google CRLset checking [21], certiﬁcate
pinning, and DANE [13]. Additional validation mecha-
nisms not listed can also be used, such as notary-based
validation, through the TrustBase plugin API.
5.3 Developer Options and Use Cases
The setsockopt and getsockopt POSIX functions
provide a means to support additional settings in cases
where a protocol offers more functionality than can be
expressed by the limited set of principal functions. Un-
der Linux, 34 TCP-speciﬁc socket options exist to cus-
tomize protocol behavior. For example, the TCP MAXSEG
option allows applications to specify the maximum seg-
ment size for outgoing TCP packets. Arbitrary data can
be transferred to and from the API implementation us-
ing setsockopt and getsockopt, because they take a
generic pointer and a data length (in bytes) as parame-
ters, along with an optname constant identiﬁer. Adding
a new option can be done by merely deﬁning a new
optname constant to represent it, and adding appropri-
ate handling code to the implementation of setsockopt
and getsockopt.
In accordance with this standard, the SSA adds a few
options for IPPROTO TLS. These options and their uses
are described in Table 3. These reﬂect a minimal set of
recommendations gathered from our analysis of existing
TLS use by applications, reﬂecting our third design goal.
This set can easily be expanded to include other options
as their use cases are explored and justiﬁed. We caution
against adding to this list ad nauseam, as it may under-
mine the simplicity with which developers interact with