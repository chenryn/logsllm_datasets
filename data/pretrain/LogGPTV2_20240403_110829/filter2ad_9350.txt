# CVE-2015-1641 及利用样本分析

## 译文声明
本文为翻译文章，仅供参考。具体内容和含义以原文为准。

- **字数**：1920 字
- **图片**：58 张
- **预计阅读时间**：12 分钟
- **作者**：erfze（Gcow 安全团队复眼小组）
- **版权**：未经许可禁止转载
- **适用人群**：适合漏洞安全研究人员及威胁分析人员学习交流
- **反馈**：如发现文中表述不清或错误之处，请在公众号后台留言指正，不胜感激

## 0x01 漏洞描述
### 漏洞成因
CVE-2015-1641 是一个类型混淆漏洞。Word 在处理 `displacedByCustomXml` 属性时，未对 `customXml` 标签对象进行有效性验证。攻击者可以通过传入其他标签对象，利用类型混淆实现任意内存写，从而达到远程代码执行 (RCE) 的目的。

### 影响版本
- Microsoft Word 2007 SP3
- Office 2010 SP2
- Word 2010 SP2
- Word 2013 SP1
- Word 2013 RT SP1
- Word for Mac 2011
- Office Compatibility Pack SP3
- Word Automation Services on SharePoint Server 2010 SP2 & 2013 SP1
- Office Web Apps Server 2010 SP2 & 2013 SP1

## 0x02 漏洞分析
### 样本信息及分析环境
- **MD5**: A69F778D1F511268019B1080F5E3B98B
- **操作系统**: Windows 7 SP1 (x86)
- **Word 版本**: 2007
- **WWLIB.DLL 版本**: 12.0.4518.1014

#### 0x02.1 类型混淆导致的任意地址写
通过 `rtfobj` 查看该文档的 OLE 对象，并手动提取第 2 号对象存为 RTF 文档。使用 Windbg 附加到 Word 2007 并打开该文档，崩溃点如下：

将第 0 号与第 2 号对象提取出来存为 RTF 文档，并设置断点：
```shell
bp wwlib!DllGetClassObject+0x50e6 ".if(ecx=7c38bd50){}.else{gc}"
```

在执行 `call wwlib!DllGetClassObject+0x50fe` 前查看栈中参数，可以看到 `smartTag` 标签属性值与栈中参数的对应关系。

根据微软文档，`displacedByCustomXml` 属性指定替换标签应为 `customXml`。继续跟进分析，计算写入地址：
```shell
[[Parameter 1]+0x8]*[Parameter 2]+[[Parameter 1]+0xC]+[Parameter 1]
```
具体参数值见图 5。步过该函数后，可以看到其结果与公式结果一致。

跟进 `memcpy` 传递参数：
```shell
向 0x7c38bd74 地址处写入 0xffffe696，该值用于第二次计算 Dst Address。
```

重新设断：
```shell
bp wwlib!DllGetClassObject+0x50e6 ".if(ecx=7c38bd68){}.else{gc}"
```

断下之后跟进到其计算 Dst Address 函数，可以看到 [[Parameter 1]+0xC] 为之前写入值。第二次写入覆盖 MSVCR71.DLL 虚函数表中的函数调用地址。

第三次写入：
```shell
该值用于第四次计算 Dst Address。
```

第四次写入：
```shell
...
```

#### 0x02.2 劫持执行流
继续向下执行，崩溃点如下：
```shell
重新载入 RTF 文档，于 0x7c376fc4 处设断。
```

由上图可知，第二次内存写入覆盖了 MSVCR71.DLL 虚函数表中的函数调用地址，第四次内存写入覆盖了传递参数。

将第 1 号对象加入后存为 RTF 文档，重新载入分析：
```shell
bp 0x7c376fc8 设断。
```

可以看到堆喷布局由第 1 号对象 `\word\activeX` 目录中的 `activeX1.bin` 完成。根据其布局，不断执行 `ret`，到 `0x7c3651EB` 处开始 ROP 链：
```shell
执行 VirtualProtect 以绕过 DEP 保护。
```

然后开始执行 `activeX1.bin` 内的 Shellcode 部分。

#### 0x02.3 activeX1.bin 中的 Shellcode
遍历当前进程中打开的文件句柄，查找其大小符合以下条件的文件：
```shell
映射到内存中。
```

通过文件头与 `FEFEFEFE FEFEFEFE FFFFFFFF` 判断是否为样本文件及 Shellcode 起始位置：
```shell
复制 Shellcode 到 VirtualAlloc 开辟的空间内，之后跳转到第二部分 Shellcode 执行。
```

#### 0x02.4 RTF 中的 Shellcode
解密后续 Shellcode：
```shell
由 ANY.RUN 可见其后续行为（有兴趣的读者请自行下载样本分析）。
```

### 附
正常情况下，Word 在解析 `customXml` 标签时会开辟新空间，而在解析 `smartTag` 时则不会。因此可以借此控制目标写入地址。

## 0x03 Patchwork 组织某利用样本分析
### 0x03.1 RTF 文档分析
- **MD5**: 2C22EA1CED258346351EAD09B1DC6074

查看 OLE 对象：
- 第 0 号对象用于加载 OTKLOADR.DLL 以引入 MSVCR71.DLL 绕过 ASLR；
- 第 1 号对象用于完成堆喷及 Shellcode 布局；
- 第 2 号对象用于触发 CVE-2015-1641 漏洞，触发点位于 `styles.xml` 中。

载入 RTF 文档并设置断点：
```shell
bp 0x7c376fc8
```

执行 ROP 链后调用 `VirtualProtect` 更改内存属性，跳转到 Shellcode：
```shell
通过 jmp + call + pop 给传参，解密后续 Shellcode。
```

解密逻辑如下：
```shell
开辟内存空间，复制加密 Shellcode 并解密。
```

通过 `call` 指令为函数传递参数：
```shell
后续仍有数次解密 Shellcode 过程，不再一一列出。
```

在 `C:\Users\xxx\AppData\Roaming\Microsoft\Templates` 目录下创建文件：
```shell
写入文件内容。
```

在同一目录下创建 `~$Normal.dat` 并写入内容：
```shell
该文件具有隐藏属性。
```

在 `HKEY_CURRENT_USER` 下创建注册表项：
```shell
设置注册表键值。
```

删除注册表禁用项：
```shell
后续将由 wscript.exe 执行 C:\Users\xxx\AppData\Roaming\Microsoft\Templates\Normal.domx，该文件实际为 VBE 格式。
```

可借由 [scrdec18](https://gist.github.com/bcse/1834878) 工具解密。

### 0x03.2 Normal.domx 分析
该文件本质为 VBE 格式，可由 `wscript.exe` 正常加载。分析时需通过工具解密出 VBS 脚本。

读取 `~$Normal.dat` 第一部分内容并解密，写入 `%USERPROFILE%\AppData\Local\Microsoft\Windows\Temporary Internet Files\Content.Word\PLAs_NEW_ORBAT.doc`：
```shell
该文档用于迷惑受害者。
```

之后释放三个 PE 文件并设置隐藏属性：
```shell
执行 MicroScMgmt.exe 并删除自身以及 ~$Normal.dat。
```

### 0x03.3 MicroScMgmt.exe 分析
查看导入表：
```shell
该文件为带有数字签名的白文件。
```

其用于加载恶意 DLL——`jli.dll`。

### 0x03.4 jli.dll 分析
- **MD5**: 051573B9173DE6886E0575F81778EA03

查看其导出函数：
```shell
该文件带有无效签名。
```

其与 Patchwork 组织之前使用的 BADNEWS 木马存在相似性，此处暂不展开分析。完整攻击链如下：
```shell
...
```

## 0x04 参阅链接
- [CVE-2015-1641 Word 利用样本分析]()
- [Microsoft Docs——displacedByCustomXml]()
- [手把手教你如何构造 office 漏洞 EXP（第四期）]()