### Distributions for Oracle Traffic over March 12–16, 2007

The following figures and text describe the distribution of Oracle traffic between servers internal to a monitored network and their clients (both internal and external) over the period from March 12 to March 16, 2007. The data is fitted to normal distributions.

#### Figure 1: Traffic Distribution Plots
- **Figure 1(a)**: Logarithmic plot of traffic activity, showing anomalous behavior after 18:00 GMT due to multiple bots scanning the network for Oracle servers.
- **Figure 1(b)**: Plot of |V(Λπ)|, which represents the number of vertices in the protocol graph.
- **Figure 1(c)**: Plot of |C(Λπ)|, which represents the size of the largest component in the protocol graph.

**Note**: External servers are excluded from the analysis because the vantage point of the monitored network does not allow for the detection of external attacks on external servers.

#### Data Preprocessing
To model the traffic distribution, we first remove scan events using Jung et al.’s sequential hypothesis testing method [8]. This method identifies scanners by detecting attempts to connect to non-existent servers within the targeted network. After removing these scans, the traffic can be modeled with normal distributions.

We divide the day into two intervals:
- **am**: [00:00 GMT, 11:59 GMT]
- **pm**: [12:00 GMT, 23:59 GMT]

For each protocol, we define random variables:
- \( V_{\text{60s}}^{\text{am}} \) and \( V_{\text{60s}}^{\text{pm}} \) for the number of vertices.
- \( C_{\text{60s}}^{\text{am}} \) and \( C_{\text{60s}}^{\text{pm}} \) for the size of the largest component.

By taking observations from all of March 12–16, 2007, we fit normal distributions to these random variables. For example, in Figure 1(b), the left half plots \( \mu(V_{\text{60s}}^{\text{am}}) \) as a horizontal line and \( t \sigma(V_{\text{60s}}^{\text{am}}) \) as error bars with \( t = 3.5 \). Similarly, the right half plots \( \mu(V_{\text{60s}}^{\text{pm}}) \) and \( t \sigma(V_{\text{60s}}^{\text{pm}}) \).

#### Detection and False Alarm Rate
Our detection system uses hypothesis testing. The null hypothesis is that an observed log file Λ does not include a worm propagation. For a fixed interval Π ∈ {am, pm}, the graph size \( V_{\text{dur}}^{\Pi} \) and the largest component size \( C_{\text{dur}}^{\Pi} \) are normally distributed with mean \( \mu(V_{\text{dur}}^{\Pi}) \) and standard deviation \( \sigma(V_{\text{dur}}^{\Pi}) \), respectively. An alarm is raised if either of the following conditions holds:

\[ |V(\Lambda\pi)| > \mu(V_{\text{dur}}^{\Pi}) + t \sigma(V_{\text{dur}}^{\Pi}) \]
\[ |C(\Lambda\pi)| > \mu(C_{\text{dur}}^{\Pi}) + t \sigma(C_{\text{dur}}^{\Pi}) \]

The false rejection (alarm) rate \( frr \) for a given threshold \( t \) can be computed using the error function \( erf \):

\[ \Pr[X \leq x] = \frac{1}{2} \left( 1 + \operatorname{erf} \left( \frac{x - \mu(X)}{\sqrt{2} \sigma(X)} \right) \right) \]

Given a desired \( frr \), we can compute the threshold \( t \) such that the false alarm rate is not exceeded:

\[ t = \sqrt{2} \operatorname{erf}^{-1} \left( \frac{1}{2} - \frac{frr}{2} \right) \]

For the remainder of this paper, we aim for a false alarm frequency of one per day, yielding a threshold of \( t = 3.5 \).

#### Protocol Graph Change During Attack
We simulate hit-list attacks to test the effectiveness of our detection mechanism. A hit list is a pre-identified list of target servers. We hypothesize that an attacker with a hit list will be detectable by examining the total graph size \( |V(\Lambda\pi)| \) and the largest component size \( |C(\Lambda\pi)| \).

- **Graph Inflation**: Occurs when an attacker communicates with servers not active during the observation period, inflating the number of vertices.
- **Component Inflation**: Occurs when the attacker merges components in the graph, making the largest component size detectably large.

#### Experiment Construction
- **Training Period**: March 12–16, 2007.
- **Test Period**: March 19, 2007.
- **Duration (dur)**: 30s and 60s.

We generate attack logs by merging normal traffic logs with traffic generated by the attacker using a hit list. The means and standard deviations for the training period are provided in Table 1.

#### Table 1: Means and Standard Deviations for Vdur and Cdur
| Protocol | μ (V30s) | σ (V30s) | μ (C30s) | σ (C30s) | μ (V60s) | σ (V60s) | μ (C60s) | σ (C60s) |
|----------|----------|----------|----------|----------|----------|----------|----------|----------|
| HTTP     | 10263    | 878      | 2653     | 357      | 14760    | 1210     | 4520     | 634      |
| SMTP     | 9502     | 851      | 2100     | 367      | 13940    | 1180     | 4069     | 650      |
| Oracle   | 16460    | 2540     | 3859     | 336      | 23280    | 3480     | 6540     | 935      |
| FTP      | 15420    | 2420     | 3454     | 570      | 22140    | 3320     | 6200     | 937      |

#### Table 2: Count of Servers Observed
| Protocol | Servers |
|----------|---------|
| SMTP     | 2818    |
| HTTP     | 8145    |
| Oracle   | 262     |
| FTP      | 1409    |

The attacker targets servers observed as active between 12:00 GMT and 13:00 GMT on each of March 12–16, 2007. The results of our simulations and the detection performance are discussed in Section 5.3.