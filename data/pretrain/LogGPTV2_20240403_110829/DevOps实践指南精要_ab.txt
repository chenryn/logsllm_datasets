⾃自动化测试使⽤用很⼩小数据集，不不真实
现在
交叉培训开发，⾃自动化Schema变更更，
每天执⾏行行，移除与DBA的交接
在脱敏敏的客户数据上进⾏行行真实压⼒力力测试
结果
⽣生产环境事故下降91%
MTTR下降80%
⽣生产环境部署前置时间从14天减少到1天
Etsy—Self-Service Developer 
Deployment, an Example of 
Continuous Deployment 
Etsy的部署由希望执⾏行行部署的任何⼈人
进⾏行行，如开发、运维、信息安全
部署流程安全和常规化
新员⼯工第⼀一天上班就能做⽣生产环境部署
想要部署的⼯工程师进⼊入⼀一个聊天室
把⾃自⼰己加⼊入到部署队列列中，看到部署活动进展
⿎鼓励⼯工程师相互帮助
⽬目标是简单和安全部署到⽣生产环境，⽤用最少的步骤和仪式
解决⽅方案
在开发提交代码之前，他们在⾃自⼰己的
⼯工作站在⼀一分钟内运⾏行行4500个单测
所有外部调⽤用，如数据库等都被模拟
代码提交到主⼲干后，超过7000主⼲干
⾃自动化测试在CI服务器器执⾏行行
最⻓长的测试11分钟可以执⾏行行完
这些测试如果顺序执⾏行行要半⼩小时
分拆为不不同⼦子集，10台机器器并⾏行行
冒烟测试：系统级测试，运⾏行行curl调
⽤用phpunit测试案例例
端到端GUI驱动的测试
在QA或准⽣生产环境（使⽤用⽣生产硬件）
⼀一键式部署QA，准⽣生产和⽣生产环境
在IRC（聊天室）的⼈人知道部署了了什什
么代码，diﬀ的链接
不不在⾥里里⾯面的⼈人通过邮件等⽅方式通知
效果
2009年年，Etsy部署是有压⼒力力和恐惧的事情
2011年年，部署例例⾏行行化，每天25~50次
帮助⼯工程师快速把代码上到⽣生产环境，交付价值给客户
Dixons Retail—Blue-Green 
Deployment for Point-Of-Sale 
System (2008)
背景
最⼤大的英国零售商
数千POS系统，分布在数百零售商店
尽管蓝绿部署通常是在线web服务，但
是也可以显著降低POS系统升级的⻛风险
传统上，升级POS系统是
big bang式的瀑布项⽬目
POS客户端和服务端⼀一同升级
带来⼤大范围的不不可⽤用时⻓长（通常整个周末）
显著的⽹网络带宽（推送新客户端软件到零售商店）
如果没有完全按照计划，会给商店运营带来混乱
解决⽅方案
蓝绿策略略，建⽴立2个服务端⽣生产环境版本，同时⽀支持POS客户端新⽼老老版本
在计划的POS升级之前，开始通过缓慢的⽹网
络给零售商店发送客户端新版本的安装包
安装新软件保持⾮非活跃状态
同时⽼老老版本正常运⾏行行
当所有POS客户端就绪
升级的客户端与服务端测试成功
新客户端软件部署到所有的客户
商店经理理被授权可以决定是否发布新版本
可以根据业务需要选择升级或等待
结果
显著平滑和快速发布
更更⾼高的商店经理理满意度
更更少的打断商店运营
Dark Launch of Facebook Chat 
(2008)
背景
2008年年，有超过7000万⽇日活⽤用户
2015年年超过⼗十亿⽇日活⽤用户
有⼀一个聊天的新功能
最资源密集型的操作不不是发送聊天消息
⽽而是保持每⼀一个在线⽤用户获知他们好
友的在线/空闲/离线状态
这个计算密集型的功能，是⼀一个最⼤大技术任务，花费⼀一年年完成
复杂性部分来⾃自达到性能需求所采⽤用的多样化的技术，包括
C++，JavaScript，PHP，Erlang
解决⽅方案
Chat团队将代码签⼊入版本控制库，可以每天部署⽣生产环境
⼀一开始，聊天功能只对Chat团队内部可⻅见
然后对所有内部员⼯工可⻅见，但对外部
⽤用户通过GateKeeper功能开关隐藏
每个⽤用户Session，在浏览器器中运⾏行行
的JavaScript，都有⼀一个测试⼯工具
聊天的UI元素隐藏
浏览器器可以发送隐藏的测试聊天信息
到后台⽣生产环境的聊天服务
模拟类⽣生产环境的负载
在发布给客户之前找到和修复性能问题
聊天功能发布只需两个步骤
修改Gatekeeper的配置，让部分外部⽤用户可⻅见
让⽤用户加载新的JavaScript，呈现UI，并禁⽤用测试
结果
正式发布时，⾮非常顺利利，轻松⼀一夜之间完成从0到7000万⽤用户的规模化
在发布过程中，逐步扩⼤大规模，从内部⽤用户到1%，到5%等等
Evolutionary Architecture at 
Amazon (2002)
背景
Amazon.com 始于1996
单体应⽤用
运⾏行行在WebServer上，后台数据库通信
Obidos，奥⽐比都斯
管理理所有业务逻辑，所
有展示逻辑，所有功能
相似
推荐
定制
评论
Obidos发展为过于紊乱，复杂的共享关系，
独⽴立的块⽆无法按需扩展
解决⽅方案
SOA架构，隔离，很多组件可以快速和独⽴立
⼤大型架构变更更进⾏行行了了五年年（2001-2005）
从2层单体架构到完全分布式、去中⼼心，
服务平台服务很多不不同应⽤用
Lesson1：严格的⾯面向服务，带来隔离
Lesson2：禁⽌止客户端直接数据库访问，服务
伸缩和改进可靠性时，不不必包含客户端
Lesson3：开发和运维流程从⾯面向服务受益
服务模式是团队快速创新的使能者
每个服务有团队完全负责
功能架构、构建、运维
结果
惊⼈人的提升⽣生产率和稳定性
2011年年，每天执⾏行行⼤大约15000次部署
2015年年，每天解决136000次部署
Strangler Pattern at Blackboard 
Learn (2011)
背景
技术学习机构，2011年年收⼊入$650 million 
始于1997年年的J2EE代码，部分Perl
代码嵌⼊入其中
2010年年，聚焦在⽼老老系统的复杂性和
增⻓长的前置时间
构建、集成和测试越来越复杂和易易出错
产品越⼤大，越⻓长前置时间和更更差的产出
从集成流程获取反馈需要24到36个⼩小时
代码提交数开始减少，代码⾏行行数
量量持续增加，客观的展示出代码
变更更复杂度不不断提升
解决⽅方案
2012年年开始，进⾏行行代码重构，使⽤用绞杀者模式
创建构件块，让开发者⼯工作在分离的模块上，
与单体代码基解耦，通过特定的API访问
⼯工作更更加⾃自治，不不需要与其他开发组⼤大量量沟通和协调
单体应⽤用的仓库代码开始减少
因为开发将代码转移到构建块的仓库
每个⼯工程师选择⼯工作在构建块仓库，
更更⾃自治、⾃自由和安全
构件库代码库快速增⻓长代码⾏行行和提交数
结果
开发⼯工作在构建块架构上
改进代码模块化
⼯工作更更独⽴立和⾃自由
更更快，更更好的反馈，更更好的质量量
Creating Self-Service Metrics at 
LinkedIn (2011)
Auto-Scaling Capacity at Netﬂix 
(2012)
Netﬂix开发Scryer⼯工具，作为
Amazon Auto Scaling的补充
根据历史使⽤用模式，预测客户需求，
分配必要的容量量
解决AAS的三个问题
处理理快速峰值
AWS实例例启动过慢，需要10~45分钟
中断后迅速缩减的客户需求导致AAS
移除⼤大量量计算资源，⽤用于未来需求
AAS在容量量安排时，未考虑流量量使⽤用模式
客户访问模式可预测，虽然不不符合⾼高松分布
Scryer使⽤用差异点分析排除异常点，然后使⽤用FFT快
速傅⾥里里叶变换，线性回归等技术，保护合法的流量量
显著提升客户访问体验，改进服务可
⽤用性，降低Amazon EC2成本
Advanced Anomaly Detection 
(2014)
The Launch and Hand-oﬀ 
Readiness Review at Google 
(2010)
背景
⾯面向职能的运维⼯工程师，SRE（2004）
2004年年SREs共7⼈人，2014年年1200⼈人
软件⼯工程师做运维的任务
即使新产品⾜足够重要，开发仍然要⾃自管理理服
务⾄至少6个⽉月时间，然后才有资格申请SRE
解决⽅方案
发布新服务安全检查清单
Launch Readiness Review
⾯面向⽤用户和接受⽣生产流量量之前
Hand-Oﬀ Readiness Review
服务转交给运维团队，LRR之后数⽉月
每个阶段会分配⼀一个SRE帮助他们
理理解需求和达到需求
让产品团队⾃自管理理⽣生产环境的服务
让开发按运维⽅方式⼯工作
根据LRR和HRR指导
服务转交更更容易易和可预测
上下游共情
SRE在早期帮助产品团队，是重要的⽂文化规范
Doubling Revenue Growth through 