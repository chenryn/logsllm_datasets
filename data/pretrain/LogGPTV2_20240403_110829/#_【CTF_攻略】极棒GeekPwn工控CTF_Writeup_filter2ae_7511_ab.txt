              get_user_profile(user_profile);       // RAX : 000000000012FEC0     &L"C:\Users\test\"
                                                    // 
              v9 = *v3;
              idx = -1i64;
              do
                ++idx;
              while ( v9[idx] );
              sub_14000B500(v27, (__int64)v9, (__int64)&v9[idx]);
              v11 = sub_14000B590((__int64)&v24);
              v12 = sub_140009C50((__int64)&v23, user_profile);
              strcat(file_path, (__int64)v12, v11); // [rbp-30]:L"C:\Users\test\industrial_ctf_final_malware.exe"
              finalize((const void **)&v23, 1, 0i64);
              finalize((const void **)&v24, 1, 0i64);
              v13 = sub_140004CD0(file_path, (__int64)&homepath);
              if ( (unsigned __int8)sub_140005740(v13) )
              {
                v17 = (_QWORD *)sub_14000D3E0();
                sub_14000D8D0(v17);
                while ( GetMessageA(&Msg, 0i64, 0, 0) )
                {
                  TranslateMessage(&Msg);
                  DispatchMessageA(&Msg);
                }
              }
              else
              {
                v20 = &homepath;
                v14 = sub_140004CD0(file_path, (__int64)&homepath);
                v15 = sub_140006490(&Msg, v27);
                if ( registry((__int64)v15, v14) )
                {
                  v16 = sub_140009C50((__int64)&Msg, v27);
                  clean((__int64)v16);
                }
              }
              finalize(file_path, 1, 0i64);
              finalize(v27, 1, 0i64);
              finalize(user_profile, 1, 0i64);
              finalize((const void **)&Dst, 1, 0i64);
            }
            return 0;
          }
        }
      }
      return 0;
    }
可以看到它首先是获得了一个时间戳，通过这个时间戳来判断程序是否执行。
之前的时间戳恰好是1024比赛开始之前，因此我patch了这个时间，好让程序能够继续的执行。
之后是在check_volume_serial_num函数里面检查了卷的序列号
    bool check_volume_serial_num()
    {
     [...]
      GetDriveTypeA(0i64);
      if ( !GetVolumeInformationA(
              0i64,
              &VolumeNameBuffer,
              0x104u,
              &VolumeSerialNumber,
              &MaximumComponentLength,
              &FileSystemFlags,
              &FileSystemNameBuffer,
              0x104u) )
        return 0;
       [...]
      return VolumeSerialNumber == 0x2D98666;
    }
patch掉这个返回的比较，把判断相等变成判断不相等就能够继续进行动态的调试了。
之后在 **if ( (unsigned __int8)sub_140005740(v13) )**
check了一下malware所运行位置是不是HOMEPATH。
如果不是的话，就进入下面的流程，把这个程序复制到HOMEPATH里面，然后删除当前的程序。
如果是在HOMEPATH里面执行的话，就进入 **sub_14000D8D0** 里面操作。
    __int64 __fastcall sub_14000D8D0(_QWORD *a1)
    {
    [...]
      v2 = GetModuleHandleA(0i64);
      v3 = v2;
      if ( !v2 )
        exit(1);
      v1[5] = SetWindowsHookExA(13, fn, v2, 0);
      v1[6] = SetWindowsHookExA(14, fn, v3, 0);
      create_folder(&folder);
      sub_14000FC30();
      sub_14000FC30();
      folder = (__int64 *)&folder;
      v5 = Stat(folder, &v15);
      v6 = v5 != 8 && v5 != -1;
      v7 = v6 == 0;
      finalize((const void **)&folder, 1, 0i64);
      if ( v7 )
      {
        create_folder(&folder);
        sub_14000BB40(&folder);
        finalize((const void **)&folder, 1, 0i64);
      }
      v10 = sub_14000D750(v8, &folder);
      v15 = v10;
      if ( v1 + 55 != v10 )
        sub_140003050(v1 + 55);
      LOBYTE(v9) = 1;
      return std::basic_string,std::allocator>::_Tidy(v10, v9, 0i64);
    }
这个函数大致的处理流程是这样子的，首先通过 **SetWindowsHookExA** 对事件 **WH_KEYBOARD_LL** 和事件
**WH_MOUSE_LL** 进行了hook。
fn函数就是当有键盘操作或者鼠标点击的时候在data文件家里面创建截图。
    LRESULT __fastcall fn(int code, WPARAM wParam, LPARAM lParam)
    {
      LPARAM v3; // rsi
      WPARAM v4; // rdi
      int v5; // er14
      _QWORD *v6; // rbx
      _QWORD *v7; // rbx
      __m128i v8; // xmm6
      __int64 v9; // rax
      __int64 v10; // rcx
      char v12; // [rsp+38h] [rbp-A0h]
      __int128 v13; // [rsp+48h] [rbp-90h]
      __int64 Dst; // [rsp+58h] [rbp-80h]
      __int64 v15[2]; // [rsp+60h] [rbp-78h]
      __int64 v16; // [rsp+70h] [rbp-68h]
      void **v17; // [rsp+F0h] [rbp+18h]
      Dst = -2i64;
      v3 = lParam;
      v4 = wParam;
      v5 = code;
      v6 = *(_QWORD **)&qword_140110118;
      if ( !*(_QWORD *)&qword_140110118 )
      {
        v7 = operator new(0x1D8ui64);
        memset(v7, 0, 0x1D8ui64);
        v6 = sub_14000BCC0(v7);
        *(_QWORD *)&qword_140110118 = v6;
      }
      if ( v5 >= 0 )
      {
        if ( !((v4 - 256) & 0xFFFFFFFFFFFFFFFBui64) )
        {
          *(_QWORD *)&v13 = *(_QWORD *)(v3 + 16);
          switch ( *(_DWORD *)v3 )
          {
            case 0xA0:
              *((_BYTE *)v6 + 36) = 1;
              break;
            case 0xA1:
              *((_BYTE *)v6 + 37) = 1;
              break;
            case 0xA2:
              *((_BYTE *)v6 + 34) = 1;
              break;
            case 0xA3:
              *((_BYTE *)v6 + 35) = 1;
              break;
            case 0xA4:
              *((_BYTE *)v6 + 32) = 1;
              break;
            case 0xA5:
              *((_BYTE *)v6 + 33) = 1;
              break;
            default:
              sub_14000DA20((__int64)v6, *(_DWORD *)v3);
              break;
          }
        }
        if ( !((v4 - 257) & 0xFFFFFFFFFFFFFFFBui64) )
        {
          *(_QWORD *)&v13 = *(_QWORD *)(v3 + 16);
          switch ( *(_DWORD *)v3 )
          {
            case 0xA0:
              *((_BYTE *)v6 + 36) = 0;
              break;
            case 0xA1:
              *((_BYTE *)v6 + 37) = 0;
              break;
            case 0xA2:
              *((_BYTE *)v6 + 34) = 0;
              break;
            case 0xA3:
              *((_BYTE *)v6 + 35) = 0;
              break;
            case 0xA4:
              *((_BYTE *)v6 + 32) = 0;
              break;
            case 0xA5:
              *((_BYTE *)v6 + 33) = 0;
              break;
            default:
              break;
          }
        }
        if ( v4 == 0x201 || v4 == 0x206 )
        {
          v8 = *(__m128i *)v3;
          v13 = *(_OWORD *)(v3 + 16);
          memset(&Dst, 0, 0xF8ui64);
          sub_14000E290(&Dst);
          _mm_storeu_si128((__m128i *)v15, (__m128i)0i64);
          v16 = 0i64;
          sub_140010E70(_mm_cvtsi128_si32(v8) - 50, _mm_cvtsi128_si32(_mm_srli_si128(v8, 4)) - 50, (__int64)v15);
          v9 = sub_140006300(&v12, v15);
          sub_1400050F0(v10, v9);
          v15[1] = v15[0];
          sub_140007BB0(v15);
          sub_14000E150(&v17);
          v17 = &std::ios_base::`vftable';
          std::ios_base::_Ios_base_dtor((struct std::ios_base *)&v17);
        }
      }
      return CallNextHookEx((HHOOK)v6[5], v5, v4, v3);
    }
大致的结果如下
所以之后的工作就是到用户目录的data文件夹下找下一步的线索。
Data目录在上一步挂载的磁盘中，后续的题目还没来得及跟进。
**0x04# 写在最后**
****
非常感谢GeekPwn官方给了这次参加工控CTF的机会，也感受到了自己实力的不足。
有想研究题目的可以微博私信[ **@MMMXny**](https://weibo.com/u/1390260711)，我可以分享文件给你。