title:Database Intrusion Detection and Response
author:Ashish Kamra and
Elisa Bertino
Database Intrusion Detection and Response
(Extended Abstract)(cid:2)
Ashish Kamra and Elisa Bertino
Purdue University
PI:EMAIL, PI:EMAIL
Why is it important to have an intrusion detection (ID) mechanism tailored for
a database management system (DBMS)? There are three main reasons for this.
First, actions deemed malicious for a DBMS are not necessarily malicious for the
underlying operating system or the network; thus ID systems designed for the
latter may not be eﬀective against database attacks. Second, organizations have
stepped up data vigilance driven by various government regulations concerning
data management such as SOX, GLBA, HIPAA and so forth. Third, and this is
probably the most relevant reason, the problem of insider threats is being recog-
nized as a major security threat; its solution requires among other techniques
the adoption of mechanisms able to detect access anomalies by users internal to
the organization owning the data.
Our approach to an ID mechanism tailored for a DBMS consists of two main
elements: an anomaly detection (AD) system and an anomaly response system.
We have developed algorithms for detecting anomalous user/role accesses to a
DBMS [2]. Our approach considers two diﬀerent scenarios. In the ﬁrst scenario,
it is assumed that the DBMS has a Role Based Access Control (RBAC) model
in place. Our AD system is able to determine role intruders, that is, individuals
that while holding a speciﬁc role, behave diﬀerently than expected. The problem
in this case is treated as a supervised learning problem. The roles are used as
classes for the classiﬁcation purpose. For every user request under observation,
its role is predicted by a classiﬁer. If the predicted role is diﬀerent from the role
associated with the query, an anomaly is detected. In the second case, the same
problem is addressed in the context of a DBMS without any role deﬁnitions. In
such setting, every request is associated with the user that issued it. We build
user-group proﬁles based on the SQL commands users submit to the database.
The speciﬁc methodology used for anomaly detection is as follows. The training
data is partitioned into clusters using standard clustering techniques. A mapping
is maintained for every user to its representative cluster (RC). For a new query
under observation, its RC is determined by examining the user-cluster mapping.
For the detection phase, two diﬀerent approaches are followed. In the ﬁrst ap-
proach, the classiﬁer is applied in a manner similar to the supervised case with
the RCs as classes. In the second approach, a statistical test is used to identify
if the query is an outlier in its RC. If the result of the statistical test is positive,
the query is marked as an anomaly.
(cid:2) The work reported here has been partially supported by the NSF grant 0712846
“IPS: Security Services for Healthcare Applications”.
R. Lippmann, E. Kirda, and A. Trachtenberg (Eds.): RAID 2008, LNCS 5230, pp. 400–401, 2008.
c(cid:2) Springer-Verlag Berlin Heidelberg 2008
Database Intrusion Detection and Response
401
In order to build proﬁles, the log-ﬁle entries need to be pre-processed and con-
verted into a format that can be analyzed by the detection algorithms. Therefore,
each entry in the log ﬁle is represented by a basic data unit that contains ﬁve
ﬁelds, and thus it is called a quiplet. The abstract form of a quiplet consists of ﬁve
ﬁelds (SQL Command, Projection Relation Information, Projection Attribute In-
formation, Selection Relation Information and Selection Attribute Information).
Depending on the level of details required, the quiplets are captured from the log
ﬁle entries using three diﬀerent representation levels. Each level is characterized
by a diﬀerent amount of recorded information. For details, we refer the reader
to [2]. Our approach towards a DBMS speciﬁc AD mechanism has several ad-
vantages. By modeling the access patterns of users based on the SQL command
syntax, the insider threat scenario is directly addressed. Our approach is able to
capture users/roles that access relations not conforming to their normal access
pattern. Second, the three diﬀerent granularity levels of representation proposed
in the scheme oﬀer alternatives for space/time/accuracy overhead. Third, the
proﬁles themselves can be used by the security administrators to reﬁne existing
access control policies of the DBMS or deﬁne new ones.
The second element of our approach addresses a common shortcoming of
all other DBMS-speciﬁc ID mechanisms, that is, a limited number of possible
anomaly response options. In all such mechanisms, the response is either aggres-
sive, thus dropping the malicious request, or conservative, thus simply raising an
alarm while letting the malicious request go through. So what more can a DBMS
do to respond to a database access anomaly signaling a possible intrusion? Con-
sider an AD system in place for a DBMS. AD systems are useful for detecting
novel zero-day attacks, but they are also notorious for generating a large number
of false alarms. Taking an aggressive action on every alarm can result in poten-
tial denial of service to legitimate requests, while only logging the alarms will
nullify the advantages of the AD mechanism. We address these problems using
a two-pronged approach [1]. First we propose the notion of database response
policies that specify appropriate response actions depending on the details of
the anomalous request. Second we propose more ﬁne-grain response actions by
introducing the concept of privilege states in the access control system. For ex-
ample, as we discuss in [1], the privilege corresponding to an anomalous action
may be moved into a suspended state until a remedial action, such as a 2nd-factor
authentication, is executed by the user. We have implemented a policy language
and extended the PostgreSQL DBMS with an engine supporting the enforcement
of the response policies. We have also extended the access control mechanism
of PostgreSQL to support privilege states. Initial performance evaluation shows
that our approach is very eﬃcient.
References
1. Kamra, A., Bertino, E., Nehme, R.: Responding to anomalous database requests.
In: Proceedings of Secure Data Management (SDM) (to appear, 2008)
2. Kamra, A., Bertino, E., Terzi, E.: Detecting anomalous access patterns in relational
databases. VLDB Journal (2008)