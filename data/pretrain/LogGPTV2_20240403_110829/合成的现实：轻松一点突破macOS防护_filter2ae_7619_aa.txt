# 合成的现实：轻松一点突破macOS防护
|
##### 译文声明
本文是翻译文章，文章来源：objective-see.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
假如我们是成功获得Mac访问权限的一名黑客（或者恶意软件），我们可能会执行如下操作：
1、转储用户keychain信息；
2、确定当前系统的（地理）位置；
3、枚举用户联系人信息；
4、加载内核扩展（kext）；
5、绕过第三方安全产品。
（对我们攻击者而言）不幸的是，较新版的macOS上有些安全机制会阻止这些操作。现在执行这些操作时，这些安全机制将弹出警告信息。根据macOS的设计，只有用户才能与这些警告交互，如下所示：
然而如果我们能找到一种办法，采用编程方式或者“synthetic（合成的）”方式与这些警告窗口交互，我们就可以一举绕过这些安全机制。也就是说，如果这种攻击行之有效，那么UI就会成为唯一的突破口。本文将深入分析macOS上各类“合成”事件的各方面内容，从滥用这些功能的恶意软件到现在仍未修复的0day攻击。
> 注意：本文覆盖了我最近在DefCon上的演讲：“The Mouse is Mightier than the
> Sword”，同时包含了一些新的技术细节，请访问[此链接](https://speakerdeck.com/patrickwardle/the-> mouse-is-mightier-than-the-sword)获取完整的演讲材料。
## 二、Synthetic攻击简史
采用“合成的”或者编程的方式与UI交互并不是一个创新的想法，我们可以先来看下滥用这种事件的某些恶意软件。
> 注意：本节中描述的攻击方法已不适用于较新版本的macOS，然而下文我们将介绍一些0day方法，可以适用于最新版的Apple操作系统。
`OSX.FruitFly`编写于十多年前，但直到2017年初才引起人们注意。我之前写过介绍这款恶意软件的一份长篇白皮书（[“Offensive
Malware Analysis: Dissecting OSX.FruitFly.B via a Custom C&C
Server”](https://www.virusbulletin.com/uploads/pdf/magazine/2017/VB2017-Wardle.pdf)），其中提到了该恶意软件具备生成“synthetic（合成的）”鼠标及键盘事件的功能：
下面这张动图演示了远程攻击者如何通过`OSX.FruitFly`远程绕过（keychain）安全访问提示窗口：
诞生于2011年的另一款Mac恶意软件（[OSX.DevilRobber](https://nakedsecurity.sophos.com/2011/10/29/devilrobber-mac-os-x-trojan-horse-spies-on-you-uses-gpu-for-bitcoin-mining/)）同样利用了这种“合成的”事件：
@noarfromspace曾提到过，这款恶意软件会导出用户keychain信息，通过几个简单的`AppleScript`命令绕过“keychain
access”提示窗口：
广告软件（adware）也会利用这种“合成的”事件。比如`OSX.Genieo`会把自己安装为浏览器扩展。然而通过代码安装（Safari）浏览器扩展的过程中会有个安全提示窗口阻止这种操作，为了完成这个任务，`OSX.Genieo`必须绕过这个提示窗口。这款广告软件如何实现这一点？只需发送一个“合成的”鼠标事件来点击“Allow”按钮即可！
更具体一点，如果我们（利用[jtool](http://www.newosxbook.com/tools/jtool.html)工具）导出`OSX.Genieo`的方法，可以看到名为`SafariExtensionInstaller`的一个类：
    $ jtool -d objc -v Installer.app/Contents/MacOS/AppAS
    @interface SafariExtensionInstaller : ?
    ...
    /* 2 - 0x1000376e1 */ + getPopupPosition;
    ...
    /* 4 - 0x100037c53 */ + clickOnInstallButton;
    /* 5 - 0x100037d71 */ + clickOnAllowButtonKeychain;
    ....
    /* 8 - 0x100038450 */ + clickOnTrustButton;
来看一下`clickOnInstallButton`的具体行为：
    char +[SafariExtensionInstaller clickOnInstallButton]{
     (@selector(getPopupPosition))(&var_40);
     r14 = CGEventCreateMouseEvent(0x0, 0x5, 0x0, rcx);
     r15 = CGEventCreateMouseEvent(0x0, 0x1, 0x0, rcx);                  
     rbx = CGEventCreateMouseEvent(0x0, 0x2, 0x0, rcx);
     CGEventPost(0x0, r14);
     CGEventPost(0x0, r15);
     CGEventPost(0x0, rbx);
首先代码调用`getPopupPosition`方法获取弹出窗口的位置，然后通过`CGEventCreateMouseEvent`以及`CGEventPost`
API发送一些“合成”的鼠标事件。`0x5`对应的是鼠标移动事件，`0x1`和`0x2`分别对应左键按下及松开事件。最终恶意软件可以通过这种方式解除警报，将自己安装为恶意浏览器扩展。
## 三、防御Synthetic事件
在最近版本的macOS上，Apple部署了各种防御措施来阻止这类“合成”攻击。然而这些防御措施并不通用，只能保护特定的UI组件（例如某些安全性或者访问提示窗口）。
在High
Sierra系统上（可能包括较老版本的macOS），如果有人尝试通过代码将鼠标事件发送至访问keychain之类的提示窗口时，操作系统会检测到这种行为并加以阻止：
    $ log show
    tccd  PID[44854] is checking access for target PID[44855]
    tccd Service kTCCServiceAccessibility does not allow prompting; returning preflight_unknown
    execution error: System Events got an error: osascript is not allowed assistive access. (-1719)
更具体一些，macOS会检查进程在生成“合成”事件时是否已通过辅助访问（assistive
access）检测（是的你没猜错，辅助访问提示窗口也能防御这种攻击方式）：
“辅助访问”权限只能通过手动方式赋予特定的应用，我们可以通过`System
Preferences`（系统偏好设置）应用程序，查看已获取该权限的应用，也可以转储`/Library/Application
Support/com.apple.TCC/TCC.db`系统隐私数据库（受SIP保护）来获取这些信息：
如下系统日志输出给出的信息，现在通过`CoreGraphics`生成的“合成”事件会被过滤及阻止（但同样只适用于被保护的目标UI组件）：
    default 08:52:57.441538 -1000 tccd  PID[209] is checking access for target PID[25349]
    error   08:52:57.657628 -1000 WindowServer Sender is prohibited from synthesizing events
如果我们grep查找`Sender is prohibited from synthesizing
events`，可以在某个核心库的`post_filtered_event_tap_data`函数中找到这个字符串：
    int post_filtered_event_tap_data(int arg0, int arg1, int arg2, ...)
        if (CGXSenderCanSynthesizeEvents() == 0x0) &&
           (os_log_type_enabled(*_default_log, 0x10) != 0x0)) {
              rbx = *_default_log;
              _os_log_error_impl(..., "Sender is prohibited from synthesizing events",...);
        }
    int CGXSenderCanSynthesizeEvents() {
       ...   
       rax = sandbox_check_by_audit_token("hid-control", 0x0, rdx, rdx);
在如上反编译代码中我们可以看到，如果`CGXSenderCanSynthesizeEvents`函数返回`0`（`false`或者`NO`）则会记录这个错误消息。如果`sandbox_check_by_audit_token`方法调用失败就会出现这种情况。
如函数名所示，`sandbox_check_by_audit_token`函数会检查发送“合成”事件的进程是否具备`hid-control`权限。这个检查过程似乎会在内核中执行，位于`mpo_iokit_check_hid_control_t`函数内部：
## 四、绕过Apple防护措施
现在我们可以戴上黑客帽子（也有可能是白帽子或者灰帽子），讨论某些漏洞以及0day！
我的目标很简单：在打全补丁的High
Sierra系统中通过“合成的”方式与任何/所有UI提示框（如安全、隐私及访问等）交互，像普通用户那样转储keychain或者加载内核扩展！
探索一番后，我发现了名为“Mouse Keys”的一个功能。
“Mouse
Keys”是macOS系统中有[文档说明](https://support.apple.com/kb/ph25642?locale=en_US)的一个功能，根据Apple的说法，该功能可以允许我们把键盘当成鼠标来使用！启用Mouse
Keys功能后，如果想将鼠标移动到右侧，我们只需要按下`O`（或者数字键`6`）即可。如果想生成鼠标点击事件，只需按下`I`（或者数字键`5`即可）：
这就会引出一些问题：
1、能否通过编程方式启动“Mouse Keys”功能？
2、“合成的”键盘事件能否生成可信的“合成的”鼠标事件？
这两个问题的答案都是肯定的！
首先，我们可以使用`AppleScript`在代码中打开`System Preferences`应用面板，面板上有个启用”Mouse
Keys“功能的复选框，然后使用`CoreGraphics`来发送”合成的“鼠标事件，启用该功能：
    //enable 'mouse keys'
    void enableMK(float X, float Y){
        //apple script
        NSAppleScript* scriptObject =
         [[NSAppleScript alloc] initWithSource:
            @"tell application "System Preferences"n" 
            "activaten" 
            "reveal anchor "Mouse" of pane id "com.apple.preference.universalaccess"n" 
            "end tell"];
        //exec
        [scriptObject executeAndReturnError:nil];