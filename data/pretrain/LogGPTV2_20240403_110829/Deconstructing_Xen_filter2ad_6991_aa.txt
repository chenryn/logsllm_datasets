title:Deconstructing Xen
author:Le Shi and
Yuming Wu and
Yubin Xia and
Nathan Dautenhahn and
Haibo Chen and
Binyu Zang and
Jinming Li
Deconstructing Xen
Lei Shi∗†, Yuming Wu∗†, Yubin Xia∗†, Nathan Dautenhahn‡, Haibo Chen∗†,
Binyu Zang†, Haibing Guan∗, Jinming Li§
∗Shanghai Key Laboratory of Scalable Computing and Systems, Shanghai Jiao Tong University
†Institute of Parallel and Distributed Systems, Shanghai Jiao Tong University
‡Department of Computer and Information Sciences, University of Pennsylvania
§Huawei Technologies, Inc.
{PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL
PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL}
Abstract—Hypervisors have quickly become essential but are
vulnerable to attack. Unfortunately, efﬁciently hardening hypervi-
sors is challenging because they lack a privileged security monitor
and decomposition strategies. In this work we systematically
analyze the 191 Xen hypervisor vulnerabilities from Xen Security
Advisories, revealing that the majority (144) are in the core
hypervisor not Dom0. We then use the analysis to provide
a novel deconstruction of Xen, called Nexen,
into a security
monitor, a shared service domain, and per-VM Xen slices that
are isolated by a least-privileged sandboxing framework. We
implement Nexen using the Nested Kernel architecture, efﬁciently
nesting itself within the Xen address space, and extend the
Nested Kernel design by adding services for arbitrarily many
protection domains along with dynamic allocators, data isolation,
and cross-domain control-ﬂow integrity. The effect is that Nexen
conﬁnes VM-based hypervisor compromises to single Xen VM
instances, thwarts 74% (107/144) of known Xen vulnerabilities,
and enforces Xen code integrity (defending against all code
injection compromises) while observing negligible overhead (1.2%
on average). Overall, we believe that Nexen is uniquely positioned
to provide a fundamental need for hypervisor hardening at
minimal performance and implementation costs.
I.
INTRODUCTION
Virtualization is one of the key enabling technologies of to-
day’s multi-tenant cloud. Through adding a privileged software
layer (i.e., the hypervisor), virtualization can simultaneously
support tens, hundreds, or even thousands of guest virtual
machines (VMs) on a single server. However, as the number
of concurrent VMs increases so too does the impact of a
hypervisor compromise, i.e., any single exploit undermines all
VM security.
Unfortunately, one of the most widely-used hypervisors,
Xen [7], is highly susceptible to attack because it employs
a monolithic design (a single point of failure) and com-
prises a complex set of growing functionality including VM
management, scheduling,
instruction emulation, IPC (event
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes  is  granted  provided  that  copies  bear  this  notice  and  the  full  citation 
on  the  ﬁrst  page.  Reproduction  for  commercial  purposes  is  strictly  prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23455
channels), and memory management. As Xen’s functionality
has increased so too has its code base, rising from 45K
lines-of-code (LoC) in v2.0 to 270K LoC in v4.0. Such a
large code base inevitably leads to a large number of bugs
that become security vulnerabilities [31]. Attackers can easily
exploit a known hypervisor vulnerability to “jail break” from
a guest VM to the hypervisor to gain full control of the
system. For example, a privilege escalation caused by non-
canonical address handling (in a hypercall) can lead to an
attacker gaining control of Xen [13], undermining all security
in multi-tenant cloud environments.
To understand the security threat to Xen, we systematically
studied all 191 security vulnerabilities published on the Xen
Security Advisories (XSA) list1 [35], of which 144 (75.39%)
are directly related to the core hypervisor. Among the 144
vulnerabilities, 61.81% lead to host denial-of-service (DoS)
attacks, 15.28% lead to privilege escalation, 13.89% lead to
information leak, and 13.20% use the hypervisor to attack
guest VMs. Furthermore, we found that more than half of
the core vulnerabilities are located in per-VM logic (e.g.,
guest memory management, CPU virtualization, instruction
emulation).
While there has been much work aiming at improving the
security of the virtualization layer [37], [12], [23], none of
it has provided an efﬁcient way to harden the Xen core. For
example, CloudVisor [37] uses an “out-of-the-box” approach
by introducing a tiny nested hypervisor to protect VMs from
the potentially malicious Xen. Colp et al. [12] propose an
approach to decomposing the management VM of Xen (i.e.,
Dom0) into multiple unprivileged domains while Nguyen et
al. [23] propose Min-V, a hypervisor based on Microsoft’s
Hyper-V to disable non-critical virtual devices for a VM,
reducing the attack surface. However, none of them aim at
hardening the hypervisor itself. While DeHype [34] aims at
removing KVM out of the globally shared trusted computing
base (TCB), the hosted hypervisor, which includes a complete
Linux, remains in each VMs TCB while being large and
vulnerable (including all Linux vulnerabilities).
As our security analysis demonstrates, the Xen core is
fundamentally at risk. However, it is unclear how to effectively
1The actual number is 201, but 7 of them are not used, XSA-166 is too
vague to be counted in our study, XSA-161 was withdrawn, and XSA-99 is
irrelevant
mitigate these threats. Therefore, we present Nexen, a novel
deconstruction and reorganization of Xen that separates and
conﬁnes hypervisor operations. The design of Nexen is inspired
by the principle of least privilege [24] and informed directly
by our vulnerability analysis. We decompose Xen into multiple
internal domains (iDoms): a privileged security monitor, one
shared service domain, and multiple per-VM Xen slices. A
VM-slice contains a subset of duplicated Xen code and per-
instance private data. In this way, a malicious slice cannot
directly access data within guest VM address spaces, and
a malicious guest VM cannot affect other VMs or the host
system, even if it has compromised the per-VM slices.
In addition to deconstructing Xen we also address the
core challenge of efﬁciently enforcing separation, a unique
issue for Xen because the hypervisor operates at the highest
hardware privilege level. Nexen achieves this through same-
privilege memory isolation [14], [4] to enforce cross-VM
data and control-ﬂow integrity. Speciﬁcally, Nexen extends
the privileged security monitor from the Nested Kernel ar-
chitecture, to isolate and control the memory management
unit (MMU), which mediates all memory mapping updates to
provide high level security policies. Nexen extends the Nested
Kernel by adding secure and private memory allocators, multi-
slice support, secure slice control transfers, and private and
shared slice data control: in this sense a slice is analogous to
a lightweight process.
We have implemented a prototype of our design which mit-
igates 107 out of 144 vulnerability (74%). Evaluation results
also indicate that the performance overhead is negligible.
Our contributions: To summarize, this paper makes the
following contributions:
•
•
•
•
A systematic analysis on 191 Xen vulnerabilities (Sec-
tions II and V).
Nexen, a novel deconstruction of Xen into a security
monitor, shared service domain, and sandboxed per-
VM slices (Section III) implemented in Xen (Sec-
tion IV) that efﬁciently uses paged based isolation
mechanisms for ﬁne-grained data isolation.
As informed by the analysis, a novel least-privilege
decomposition strategy that places highly vulnerable
code into per-VM slices while maintaining high per-
formance and either eliminating vulnerabilities en-
tirely or conﬁning exploits (evaluated in Section V).
Efﬁcient code, memory, and control-ﬂow integrity
enforcement between Xen and VMs (evaluated in
Section VI).
II. MOTIVATION AND BACKGROUND
A. Attack Surface of Xen
The Xen virtualization layer comprises the Xen hypervisor,
a privileged VM (i.e., Dom0) and a number of unprivileged
VMs. Each of these can be compromised in one of the fol-
lowing ways: 1) an unprivileged VM may attack another VM
through inter-domain communication (mostly shared mem-
ory); 2) a malicious platform user may compromise Dom0
through the management interface, resulting in control of all
management operations and I/O stacks of other VMs; and
TABLE I.
XEN MODULES THAT THE ATTACKS TARGET
Target
Ratio
Target
Ratio
Memory management
25.69%
Domain control
4.17%
CPU virtualization
21.53%
Domain building
3.47%
Code emulation
13.19%
Event channel
I/O
Exception handling
Grant table
Global
9.03%
5.56%
4.86%
4.17%
XSM
Scheduler
Others
2.08%
1.39%
0.69%
3.47%
worst of all, 3) an unprivileged VM may attack the hypervisor
through vulnerable hypercalls or buggy code emulation, fully
compromising all security on the system.
In this section we summarize our investigation of Xen
attacks as they relate to the target code module, vulnerability
steps, and high level compromise result. Our results are derived
from analyzing the Xen Security Advisories (XSA) vulnerabil-
ity database, which lists 191 discovered vulnerabilities between
early 2011 to the middle 2016. A comprehensive evaluation
and analysis of these results as well as how Nexen defends
against them is presented in an online appendix located at
http://ipads.se.sjtu.edu.cn/xsa/ [1].
A large portion of such vulnerabilities (75.39%) are related
to the hypervisor. They either directly target the hypervisor or
aims at VMs but take advantage of bugs in the hypervisor.
Other ones (24.61%) are mostly ﬂaws in QEMU and tool stack,
which reside in Dom0. Since the latter ones can be effectively
mitigated by disaggregating drivers and domain management
tools, e.g., using different driver domains and management
domains for different guest VMs, we focus on vulnerabilities
related to the hypervisor in this paper.
We classiﬁed these vulnerabilities in three different ways.
The ﬁrst way is based on target, i.e., the functionality module
where the exploit happens. Table I presents the distribution
of vulnerabilities. We can see that I/O, memory management
and CPU virtualization(including code emulation) are the most
dangerous modules, while modules like scheduler and event
channel has nearly no known vulnerabilities.
The second way is based on the result that a vulnerability
may cause. We can observe from the Table III that most of
these vulnerabilities cause host DoS, information leakage or
privilege escalation to the hypervisor.
Table II shows the result of our third way of classiﬁcation
based on the key step of exploiting a vulnerability. Here live
lock means long non-preemptible operation can be performed
without rate limiting. An observation is that most vulnerabil-
ities simply cause a CPU hanging or a fault that will kill
the host. Although many vulnerabilities can cause memory
corruption, their affecting ranges are usually very limited. As
shown in the above table, only a few of them have the potential
to eventually achieve privilege escalation.
Another key observation is that, although most of the
catastrophic vulnerabilties and CPU hangings can be caught,
in most cases, the handler still has to kill the entire host instead
of recovering. The main reason is that the hypervisor lacks the
precision to identify individually corrupted components.
2
n
e
X
M
V
K
e
d
o
m
t
o
o
r
-
n
o
N
e
d
o
m
t
o
o
R
e
d
o
m
t
o
o
r
-
n
o
N
e
d
o
m
t
o
o
R
3
-
g
n
i
r
0
-
g
n
i
r
3
-
g
n
i
r
0
-
g
n
i
r
3
-
g
n
i
r
0
-
g
n
i
r
3
-
g
n
i
r
0
-
g
n
i
r
VM-1 VM-2
VM-1
VM-2
VM-1
VM-2
Dom0
VM
VM-1 VM-2
Xen
Dom0
0
m
o
D
B
m
o
D
Dom0
Xen
(a) Xen
VM-1 VM-2
Xen
Xen
CloudVisor
ShdSrv
Slice-1 Slice-2
(b) Disaggregated Xen
(c) Xoar
(d) CloudVisor
Secure Monitor
(e) Nexen
L2:
Qemu