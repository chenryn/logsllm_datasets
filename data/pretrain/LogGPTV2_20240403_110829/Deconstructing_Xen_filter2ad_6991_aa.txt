# Deconstructing Xen

**Authors:**
- Lei Shi\*†
- Yuming Wu\*†
- Yubin Xia\*†
- Nathan Dautenhahn‡
- Haibo Chen\*†
- Binyu Zang†
- Haibing Guan\*†
- Jinming Li§

\*Shanghai Key Laboratory of Scalable Computing and Systems, Shanghai Jiao Tong University  
†Institute of Parallel and Distributed Systems, Shanghai Jiao Tong University  
‡Department of Computer and Information Sciences, University of Pennsylvania  
§Huawei Technologies, Inc.  

{PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL}

## Abstract
Hypervisors have become essential components in modern computing, but they are also vulnerable to attacks. Efficiently hardening hypervisors is challenging due to the lack of a privileged security monitor and effective decomposition strategies. In this work, we systematically analyze 191 Xen hypervisor vulnerabilities from the Xen Security Advisories (XSA), revealing that 144 (75.39%) are in the core hypervisor, not Dom0. Based on this analysis, we propose Nexen, a novel deconstruction of Xen into a security monitor, a shared service domain, and per-VM Xen slices isolated by a least-privileged sandboxing framework. We implement Nexen using the Nested Kernel architecture, which efficiently nests itself within the Xen address space and extends the design with services for multiple protection domains, dynamic allocators, data isolation, and cross-domain control-flow integrity. Nexen confines VM-based hypervisor compromises to single Xen VM instances, thwarts 74% (107/144) of known Xen vulnerabilities, and enforces Xen code integrity while incurring negligible overhead (1.2% on average). Overall, Nexen provides a fundamental approach to hypervisor hardening with minimal performance and implementation costs.

## 1. Introduction
Virtualization is a key enabling technology in today's multi-tenant cloud environments. By adding a privileged software layer (the hypervisor), virtualization can support tens, hundreds, or even thousands of guest virtual machines (VMs) on a single server. However, as the number of concurrent VMs increases, so does the impact of a hypervisor compromise, where any single exploit can undermine the security of all VMs.

Unfortunately, one of the most widely-used hypervisors, Xen [7], is highly susceptible to attacks due to its monolithic design and complex functionality, including VM management, scheduling, instruction emulation, inter-process communication (IPC) channels, and memory management. As Xen's functionality has expanded, so has its codebase, growing from 45K lines-of-code (LoC) in v2.0 to 270K LoC in v4.0. This large codebase inevitably leads to a significant number of bugs, many of which become security vulnerabilities [31]. Attackers can exploit these vulnerabilities to "jailbreak" from a guest VM to the hypervisor, gaining full control of the system. For example, a privilege escalation caused by non-canonical address handling in a hypercall can lead to an attacker gaining control of Xen [13], compromising the security of multi-tenant cloud environments.

To understand the security threats to Xen, we systematically studied all 191 security vulnerabilities published in the Xen Security Advisories (XSA) list [35]. Our analysis revealed that 144 (75.39%) of these vulnerabilities are directly related to the core hypervisor. Among these 144 vulnerabilities, 61.81% lead to host denial-of-service (DoS) attacks, 15.28% lead to privilege escalation, 13.89% lead to information leaks, and 13.20% use the hypervisor to attack guest VMs. Furthermore, more than half of the core vulnerabilities are located in per-VM logic, such as guest memory management, CPU virtualization, and instruction emulation.

While there has been extensive research aimed at improving the security of the virtualization layer [37], [12], [23], none of these approaches have provided an efficient way to harden the Xen core. For example, CloudVisor [37] uses an "out-of-the-box" approach by introducing a tiny nested hypervisor to protect VMs from potentially malicious Xen. Colp et al. [12] propose decomposing the management VM of Xen (i.e., Dom0) into multiple unprivileged domains, while Nguyen et al. [23] propose Min-V, a hypervisor based on Microsoft’s Hyper-V, to disable non-critical virtual devices for a VM, reducing the attack surface. However, none of these approaches aim to harden the hypervisor itself. DeHype [34] aims to remove KVM from the globally shared trusted computing base (TCB), but the hosted hypervisor, which includes a complete Linux, remains in each VM's TCB, making it large and vulnerable to all Linux vulnerabilities.

Our security analysis demonstrates that the Xen core is fundamentally at risk. To mitigate these threats, we present Nexen, a novel deconstruction and reorganization of Xen that separates and confines hypervisor operations. The design of Nexen is inspired by the principle of least privilege [24] and informed by our vulnerability analysis. We decompose Xen into multiple internal domains (iDoms): a privileged security monitor, one shared service domain, and multiple per-VM Xen slices. A VM-slice contains a subset of duplicated Xen code and per-instance private data. This design ensures that a malicious slice cannot directly access data within guest VM address spaces, and a compromised guest VM cannot affect other VMs or the host system, even if it has compromised the per-VM slices.

In addition to deconstructing Xen, we address the core challenge of efficiently enforcing separation, a unique issue for Xen because the hypervisor operates at the highest hardware privilege level. Nexen achieves this through same-privilege memory isolation [14], [4] to enforce cross-VM data and control-flow integrity. Specifically, Nexen extends the privileged security monitor from the Nested Kernel architecture to isolate and control the memory management unit (MMU), which mediates all memory mapping updates to provide high-level security policies. Nexen extends the Nested Kernel by adding secure and private memory allocators, multi-slice support, secure slice control transfers, and private and shared slice data control. In this sense, a slice is analogous to a lightweight process.

We have implemented a prototype of our design, which mitigates 107 out of 144 vulnerabilities (74%). Evaluation results indicate that the performance overhead is negligible.

### Our Contributions
This paper makes the following contributions:
- A systematic analysis of 191 Xen vulnerabilities (Sections II and V).
- Nexen, a novel deconstruction of Xen into a security monitor, shared service domain, and sandboxed per-VM slices (Section III), implemented in Xen (Section IV) using page-based isolation mechanisms for fine-grained data isolation.
- A novel least-privilege decomposition strategy, informed by the analysis, that places highly vulnerable code into per-VM slices while maintaining high performance and either eliminating vulnerabilities entirely or confining exploits (evaluated in Section V).
- Efficient code, memory, and control-flow integrity enforcement between Xen and VMs (evaluated in Section VI).

## 2. Motivation and Background

### 2.1. Attack Surface of Xen
The Xen virtualization layer comprises the Xen hypervisor, a privileged VM (i.e., Dom0), and multiple unprivileged VMs. Each of these components can be compromised in the following ways:
1. An unprivileged VM may attack another VM through inter-domain communication (mostly shared memory).
2. A malicious platform user may compromise Dom0 through the management interface, resulting in control of all management operations and I/O stacks of other VMs.
3. An unprivileged VM may attack the hypervisor through vulnerable hypercalls or buggy code emulation, fully compromising all security on the system.

In this section, we summarize our investigation of Xen attacks, focusing on the target code module, vulnerability steps, and high-level compromise results. Our results are derived from analyzing the Xen Security Advisories (XSA) vulnerability database, which lists 191 discovered vulnerabilities between early 2011 and mid-2016. A comprehensive evaluation and analysis of these results, along with how Nexen defends against them, is presented in an online appendix located at http://ipads.se.sjtu.edu.cn/xsa/ [1].

A large portion of these vulnerabilities (75.39%) are related to the hypervisor. They either directly target the hypervisor or aim at VMs but take advantage of bugs in the hypervisor. Other vulnerabilities (24.61%) are mostly flaws in QEMU and tool stack, which reside in Dom0. Since the latter can be effectively mitigated by disaggregating drivers and domain management tools, we focus on vulnerabilities related to the hypervisor in this paper.

We classified these vulnerabilities in three different ways:
1. **Target**: The functionality module where the exploit happens. Table I presents the distribution of vulnerabilities. I/O, memory management, and CPU virtualization (including code emulation) are the most dangerous modules, while modules like the scheduler and event channel have nearly no known vulnerabilities.
2. **Result**: The outcome of a vulnerability. Table III shows that most of these vulnerabilities cause host DoS, information leakage, or privilege escalation to the hypervisor.
3. **Key Step**: The critical step in exploiting a vulnerability. Table II shows that most vulnerabilities cause a CPU hang or a fault that will kill the host. Although many vulnerabilities can cause memory corruption, their affecting ranges are usually limited. Only a few have the potential to achieve privilege escalation.

Another key observation is that, although most catastrophic vulnerabilities and CPU hangings can be caught, in most cases, the handler still has to kill the entire host instead of recovering. The main reason is that the hypervisor lacks the precision to identify individually corrupted components.

### 2.2. Existing Approaches
Several existing approaches aim to improve the security of the virtualization layer, but none of them provide an efficient way to harden the Xen core. For example:
- **CloudVisor [37]**: Uses an "out-of-the-box" approach by introducing a tiny nested hypervisor to protect VMs from potentially malicious Xen.
- **Colp et al. [12]**: Propose decomposing the management VM of Xen (Dom0) into multiple unprivileged domains.
- **Nguyen et al. [23]**: Propose Min-V, a hypervisor based on Microsoft’s Hyper-V, to disable non-critical virtual devices for a VM, reducing the attack surface.
- **DeHype [34]**: Aims to remove KVM from the globally shared trusted computing base (TCB), but the hosted hypervisor, which includes a complete Linux, remains in each VM's TCB, making it large and vulnerable to all Linux vulnerabilities.

### 2.3. Proposed Solution: Nexen
Nexen is a novel deconstruction and reorganization of Xen that separates and confines hypervisor operations. The design is inspired by the principle of least privilege and informed by our vulnerability analysis. We decompose Xen into multiple internal domains (iDoms):
- **Privileged Security Monitor**: Manages and isolates the memory management unit (MMU).
- **Shared Service Domain**: Provides shared services to all VMs.
- **Per-VM Xen Slices**: Contain a subset of duplicated Xen code and per-instance private data, ensuring that a malicious slice cannot directly access data within guest VM address spaces.

Nexen achieves efficient separation through same-privilege memory isolation, extending the Nested Kernel architecture with secure and private memory allocators, multi-slice support, secure slice control transfers, and private and shared slice data control. This design allows Nexen to confine VM-based hypervisor compromises to single Xen VM instances, thwart 74% (107/144) of known Xen vulnerabilities, and enforce Xen code integrity with negligible performance overhead (1.2% on average).

### 2.4. Implementation and Evaluation
We have implemented a prototype of Nexen, which mitigates 107 out of 144 vulnerabilities (74%). Evaluation results indicate that the performance overhead is negligible, demonstrating that Nexen provides a fundamental approach to hypervisor hardening with minimal performance and implementation costs.