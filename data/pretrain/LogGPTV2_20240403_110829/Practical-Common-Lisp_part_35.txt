从给定字符串中创建字符串输入流，并在该流绑定到你提供的变量的情况下执行它的主体形式。
STRING提供了一个更加便利的接口。WITH-INPUT-FROM-STRING和WITH-OPEN-FILE相似，它
字符串输出流。
用GET-OUTPUT-STREAM-STRING时，该流的内部字符串会被清空，因此就可以重用一个已有的
到字符串中，你随后可以通过函数GET-OUTPUT-STREAM-STRING来获取该字符串。每次当你调
WRITE-CHAR以及WRITE-LINE等。它不接受参数。无论你写了什么，字符串输出流都将被累积
字符串，那么你可以像下面这样将它转化成一个浮点数：
些基于字符的输入函数中的字符流。例如，如果你有一个含有Common Lisp语法的字面浮点数的
① 通过不带参数地调用它，MAKE-BROADCAST-STREAM可以生成--个数据黑洞。
两种可以将流以多种方式拼接在一起的双向流是TWO-WAY-STREAM和ECHO-STREAM。它们
(with-input-from-string (s "1.23")
不过你将很少直接使用这些函数，因为宏WITH-INPUT-FROM-STRING和WITH-OUTPUT-TO
语言标准中定义的其他流提供了多种形式的流拼接技术，它允许你以几乎任何配置将流拼接
CL-USER> (with-output-to-string (out)
宏WITH-OUTPUT-TO-STRING与之相似：它把新创建的字符串输出流绑定到你所命名的变量
类似地，MAKE-STRING-OUTPUT-STREAM创建一个流，其可被用于FORMAT、PRINT、
(let ((s (make-string-input-stream "1.23")))
"hello, world (1 2 3)
(read s)}
(close s)))
(format out "hello,
tect (read s)
www.TopSage.com
world ")
14.11 其他 I/O 类型
155
---
## Page 173
一些区别了。
并且通常将socket实现成另一种类型的流，因此你可以使用正规I/O函数来操作它们。?
现在，你已准备好开始构建一个库来消除不同CommonLisp实现在基本路径名函数行为上的
156
① Common Lisp的标准I/O机制最缺失的是一种允许用户定义新的流类（stream class）的方式。不过，存在两种用户
最后，尽管CommonLisp标准并没有涉及有关网络API的内容，但多数实现都支持socket编程
使用这五种流，你可以构造出几乎任何你想要的流拼接拓扑结构。
Streams的性能，并且已经被某些开源Common Lisp实现所采用。
如此，许多实现都支持某种形式的所谓Gray Streams，它们的API都是基于Gray的草案。另一种更新的API称为
自定义流的事实标准。在Common Lisp标准化期间，德州仪器的David Gray编写了一份API草案，其中允许用户定
第14章文件和文件 I/O
www.TopSage.com
---
## Page 174
写实现相关代码的手法。
15.2
这些均属于语言标准的有效解释，因此你希望编写新的函数，以在不同实现间提供一致的行为。
PROBE-FILE提供了。不过正如你将看到的那样，会有许多不同的方式来实现这些函数—所有
也将编写函数用于递归遍历目录层次，并在目录树的每个路径名上调用给定的函数。
15.1
区别的代码。
可以获得后续几章将会用到的几个有用的函数，还可以有机会学习如何编写处理不同Lisp实现间
多数跨越不同实现的常见操作提供一致的接口。这就是你在本章中的任务。编写这个库，你不但
函数上不可避免地提供了不同的行为。
象，但在一些关键点上却做出了不同的选择，从而导致遵循标准的实现在一些主要的路径名相关
任何特定文件系统上。这样带来的结果是，不同的实现者虽然在相同的文件系统上实现路径名抽
Common Lisp的设计者们留给了实现者们大量的选择空间，来决定究竟如何将路径名抽象映射到
泛的系统上的文件名。不幸的是，为了让路径名足够抽象从而可以应用于广泛的文件系统，
变得有些复杂。
一个有用的API来管理作为路径的名字，但是当它涉及实际与文件系统交互的函数时，事情就会
在能够实现这个可在多个Common Lisp实现上正确运行的库的API之前，我需要首先介绍编
从理论上来讲，这些列目录和测试文件存在性的操作已经由标准函数DIRECTORY和
然而，所有的实现都以这样或那样的方式提供了相同的基本功能，因此你可以写一个库，对
如同我提到的，问题的根源在于，路径名抽象被设计用来表示比当今常用的文件系统更加广
“在任何符合标准的CommonLisp实现上正确运行的代码都将产生相同的行为”，从这个意义
该库支持的基本操作是获取目录中的文件列表，并检测给定名字的文件或目录是否存在。你
*FEATURES*和读取期条件化
API
实践：可移植路径名库
www.TopSage.com
---
## Page 175
而在一个不属于上述特定条件化实现的平台上，它将被读取成下面这样：
在SBCL中读取器将读到下面的内容：
成关键字符号。因此，你可以像下面这样编写一个在前面提到的每个实现中行为稍有不同的函数：
器在读取特性表达式时将*PACKAGE*绑定到KEYWORD包上。这样，不带包限定符的名字将被读取
为了避免依赖于在不同实践中可能不存在的包，*FEATURES*中的符号通常是关键字，并且读取
CommonLisp含有符号：allegro，CLISP含有：clisp，SBCL含有：sbcl，而CMUCL含有：cmu。
现定义的。尽管如此，所有的实现都包含至少一个符号来指示当前是什么实现。例如，Allegro
方式工作，只是它在特性表达式为假时才读取后面的形式，而在特性表达式为真时跳过它。
bar存在时才被包含，那么可以将特性表达式写成（andfoobar）。
在NOT、AND和OR操作符上的布尔表达式。例如，如果要条件化某些代码使其只有当特性foo和
式是单个符号，当符号在*FEATURES*中时该表达式为真，否则为假。其他的特性表达式是构造
特性表达式中，根据表达式中的符号是否存在于*FEATURES*求值为真或假。最简单的特性表达
现等各种特性的代码。
CommonLisp提供了一种称为读取期条件化的机制，从而允许你有条件地包含基于当前运行的实
读
年
一个符号的列表，每个符号代表存在于当前实现或底层平台的一个“特性”。这些符号随后用在
或者为不同实现编写稍有差别的代码。为了使你在不完全破坏代码可移植性的情况下做到这点
上说，尽管你所编写的多数代码都是“可移植的”，但你可能偶尔需要依赖于实现相关的功能，
取器会正常读取下一个表达式，否则它会跳过下一个表达式，将它作为空白对待。#-以相同的
*FEATURES*的初始值是实现相关的，并且任何给定符号的存在所代表的功能也同样是由实
158
①这种读取器条件化工作方式所带来的一个稍为麻烦的后果是，无法简单地编写fall-throughcase。例如，如果通过
该机制由一个变量*FEATURES*和两个被Lip读取器理解的附加语法构成。*FEATURES*是
因为条件化过程发生在读取器中，编译器根本无法看到被跳过的表达式，
(defun foo()
(defunfoo()
(defun foo（)
在Allegro中读取上述代码，就好像代码原本就写成下面这样：
(defun foo()
它首先读取特性表达式并按照我刚刚描述的方式求值。当跟在#+之后的特性表达式为真时，
读取器将特性表达式与两个语法标记#+和#-配合使用。当读取器看到任何一个这样的语法
表达式中添加同样的特性，否则ERROR形式将会在新代码运行以后被求值。
在foo中增加另一个#+前缀的表达式来为其添加对另一种实现的支持，那么你需要记得也要在#-之后的or特性
(error"Notimplemented"))
(do-another-thing))
(do-one-thing))
一#
#+clisp (something-else)
#+sbcl（do-another-thing）
#+allegro（do-one-thing)
第15章实践：可移植路径名库
another-version)
www.TopSage.com
(error"Not implemented"))
大宝
，“这意味着你不会
弘网
---
## Page 176
与Windows上的多数实现遵循了相同的基本模式。
匹配算法和多数在Lisp与一个特定文件系统之间的交互一样，它没有被语言标准定义，但Unix
殊值：wila的组件，然后返回一个路径名的列表，用来表示文件系统中匹配该通配路径名的文件。
个包装层。DIRECTORY接受一种特殊类型的路径名，称为通配路径名，其带有一个或多个含有特
15.3
以使其更容易被其他代码使用，你在后续几章中将看到这一点。
① 另一个特殊值:wild-inferiors可以作为--个通配路径名的目录组件的一部分出现，但在本章里你不需要
将库以这种方式打包，除了可以避免与那些已存在于CL-USER包中的符号产生冲突以外，还可
接着加载它，然后在REPL中或者在你输入定义的文件顶端，输入下列表达式：
你可以将用于列举单独目录的函数list-directory,实现成标准函数DIRECToRy外围的一
一个称为packages.lisp的文件，其中带有下面的内容：
些函数，可能会得到关于破坏了已有定义的错误或警告。为了避免发生这种情况，你可以创建
字，并且这些名字可在CL-USER包中访问。这样，如果你试图在CL-USER包中定义该库中的某
某些实现提供了它们自己的包，其中含有一些函数与你将在本章中定义的一些函数有相同的名
gigamonkeys.pathnames中。我将在第21章讨论定义以及使用包的细节。目前你应当注意，
留其中的符号，因此被跳过的表达式可以安全地包含在其他实现中可能不存在的包中的符号。
为不同实现的不同版本付出任何运行时代价。另外，当读取器跳过条件化的表达式时，它不会保
它们。
从包的角度讲，如果你下载了该库的完整代码，会看到它被定义在一个新的包com。
(tasn-to: abeyoed-ut)
列目录
(defpackage :com.gigamonkeys .pathnames
--file-p)).
:directory-p
:list-directory
(:export.
walk-directory
:pathname-as-directory
:file-exists-p
www.TopSage.com
对库打包
15.3列目录
：
159
---
## Page 177
pathname-as-directory可以将任何路径名转换成目录形式的路径名。
是directory-pathname-p，用来测试-一个路径名是否已经是目录形式，而第三个函数
的给定组件是否“存在”，也就是说该组件既不是NIL也不是特殊值:unspecific。?另一个函数
名，
成:wild。
来创建，那么同样的表达式将列出/home中的所有文件，因为名字组件"peter"将被替换
述写法是有效的。但如果它以文件形式表示，例如，它通过解析名字字符串"/home／peter"
其中的home-dir是代表/home/petér/的路径名。如果home-dir是以目录形式表示的，那么上
件，需要这样来写：
组件是你想要列出的目录，其名称和类型组件是:wild。因此，为了列出/home/peter/中的文
式和文件形式。
忘记它们。
可能令人沮丧。你可以通过编写list-directory来一次性地处理所有这些细节和特征，并从此
可移植代码来使用DIRECTORY完成一些像列出单个目录中所有文件和子目录这样简单的事情,都
要对路径名抽象有相当细致的理解。在这些不同细微之处和不同实现的特征影响下，实际编写
一个问题在于，尽管DIRECTORY提供了一个强大的用于列举文件的接口，但要想正确地使用它需
相同的操作系统上，其行为的特定方面在不同的Common Lisp的实现间也具有相当大的区别。另
为了让DIREcroRx返回/home/peter/中的文件列表，需要传给它一个通配路径名，其目录
DIREcroRy函数有两个需要在list-directory中解决的问题。其中主要的一个是，即便在
160
① 具体实现返回:un specific来代替NIL，作为某些特定情况下路径名组件的值，例如当该组件没有被该实现使
为此，应当定义一些助手函数。其中一个是component-present-p，它将测试一个路径名
为了避免两种形式间的显式转换，可以定义list-αirectory来接受任何形式的非通配路径
(directory (make-pathname :name :wild :type :wild :defaults home-dir))
(defun pathname-as-directory (name)
(defun directory-pathname-p 
(defun component-present-p (value)
随后它将被转化成适当的通配路径名。
用时。
(and value (not (eql value :unspecific))))
(and
(when (wild-pathname-p pathname)
(id
(not
(not
(if
第15章实践：可移植路径名库
(make-pathname 
{error 
d-quasaxd-zuauoduoo)
(component-present-p (pathname-name p)))
"Can't reliably
www.TopSage.com
 convert wild pathnames."))
(pathname-type p)))
(p)
---
## Page 178
地将不同版本用读取期条件组合起来了。
现相关的、值为NIL的关键字参数:directories-are-files，从而使其以目录形式返回目录。
和正规文件。除Alegro之外，所有实现都支持做到这点。Allegro要求为DIRECTORY传递一个实
式的。你想要list-directory总是返回目录形式的目录名，以便可以只通过名字来区分子目录
用不同的通配符，调用DIRECTORY两次并组合结果。
NIL的通配路径名时，才可以返回子目录。而且，在这种情况下，它只返回子目录，因此需要使
的DIRECTORY，只有当传递给它一个以:wild作为目录组件的最后一个元素且名字和类型组件为