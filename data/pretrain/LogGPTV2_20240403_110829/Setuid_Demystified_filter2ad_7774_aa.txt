title:Setuid Demystified
author:Hao Chen and
David A. Wagner and
Drew Dean
USENIX Association
Proceedings of the
11th USENIX Security
Symposium
San Francisco, California, USA
August 5-9, 2002
© 2002 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Setuid Demystiﬁed∗
Hao Chen
David Wagner
University of California at Berkeley
{hchen,daw}@cs.berkeley.edu
Drew Dean
SRI International
PI:EMAIL
Abstract
Access control in Unix systems is mainly based on user
IDs, yet the system calls that modify user IDs (uid-setting
system calls), such as setuid, are poorly designed, in-
sufﬁciently documented, and widely misunderstood and
misused. This has caused many security vulnerabilities
in application programs. We propose to make progress
on the setuid mystery through two approaches. First,
we study kernel sources and compare the semantics of
the uid-setting system calls in three major Unix systems:
Linux, Solaris, and FreeBSD. Second, we develop a for-
mal model of user IDs as a Finite State Automaton (FSA)
and develop new techniques for automatic construction
of such models. We use the resulting FSA to uncover
pitfalls in the Unix API of the uid-setting system calls, to
identify differences in the semantics of these calls among
various Unix systems, to detect inconsistency in the han-
dling of user IDs within an OS kernel, and to check the
proper usage of these calls in programs automatically.
Finally, we provide general guidelines on the proper us-
age of the uid-setting system calls, and we propose a
high-level API that is more comprehensible, usable, and
portable than the usual Unix API.
1 Introduction
Access control in Unix systems is mainly based on the
user IDs associated with a process. In this model, each
process has a set of user IDs and group IDs which deter-
mine which system resources, such as ﬁles and network
ports, the process can access1. Certain privileged user
IDs and groups IDs allow a process to access restricted
∗This research was supported in part by DARPA Contract ECU01-
401U subcontract 27-000765 and NSF CAREER 0093337.
1In many Unix systems, a process has also a set of supplementary
group IDs, which are not closely related to the topic of this paper and
which will not be discussed.
system resources. In particular, user ID zero, reserved for
the superuser root, allows a process to access all system
resources.
In some applications, a user process needs extra privi-
leges, such as permission to read the password ﬁle. By
the principle of least privilege, the process should drop
its privileges as soon as possible to minimize risk to the
system should it be compromised and execute malicious
code. Unix systems offer a set of system calls, called the
uid-setting system calls, for a process to raise and drop
privileges. Such a process is called a setuid process. Un-
fortunately, for historical reasons, the uid-setting system
calls are poorly designed, insufﬁciently documented, and
widely misunderstood. “Many years after the inception
of setuid programs, how to write them is still not well un-
derstood by the majority of people who write them” [1].
In short, the Unix setuid model is mysterious, and the
resulting confusion has caused many security vulnerabil-
ities.
We approach the setuid mystery as follows. First, we
study the semantics of the uid-setting system calls by
reading kernel sources. We compare and contrast the se-
mantics among different Unix systems, which is useful
for authors of setuid programs. In doing so, we found
that manual inspection is tedious and error-prone. This
motivates our second contribution: we construct a for-
mal model to capture the behavior of the operating sys-
tem and use it to guide our analysis. We will describe a
new technique for building this formal model in an au-
tomated way. We have used the resulting formal model
to more accurately understand the semantics of the uid-
setting system calls, to uncover pitfalls in the Unix API
of these calls, to identify differences in the semantics of
these calls among various Unix systems, to detect incon-
sistency in the handling of user IDs within an OS kernel,
and to check for the proper usage of user IDs in programs
automatically.
Formal methods have gained a reputation as being im-
practical to apply to large software systems, so it may
be surprising that we found formal methods so useful in
our effort. We will show how our formal model enables
many tasks that would otherwise be too error-prone or
laborious to undertake. Our success comes from using
lightweight techniques to answer a well-deﬁned question
about the system; we are not attempting to prove that a
kernel is correct! Abstraction plays a major role in sim-
plifying the system so that simple analysis techniques are
sufﬁcient.
This paper is organized as the follows. Section 2 dis-
cusses related work. Section 3 provides background on
the user ID model. Section 4 reviews the evolution of
the uid-setting system calls. Section 5 compares and
contrasts the semantics of the uid-setting system calls in
three major Unix systems. Section 6 describes the formal
user ID model and its applications. Section 7 analyzes
two security vulnerabilities caused by misuse of the uid-
setting system calls. Section 8 provides guidelines on the
proper usage of the uid-setting system calls and proposes
a high-level API to the user ID model.
2 Related Work
Manual pages in Unix systems are the primary source
of information on the user ID model for most program-
mers. See, for example, setuid(2) and setgid(2). But
unfortunately, they are often incomplete or even wrong
(Section 6.4.1). Many books on Unix programming also
describe the user ID model, such as Stevens’ [2], but of-
ten they are speciﬁc to one Unix system or release, are
outdated, or lack important details.
Bishop discussed security vulnerabilities in setuid pro-
grams [3]. His focus is on potential vulnerabilities that
a process may be susceptible to once it gains privilege,
while our focus is on how to gain and drop privilege con-
ﬁdently and securely. Unix systems have evolved and
diversiﬁed a great deal since Bishop’s work in 1987, and
a big problem today is how to port setuid programs se-
curely to various Unix systems.
3 User ID Model
access. In particular, user ID zero is reserved for the su-
peruser root who can access all resources.
Each process has three user IDs: the real user ID (real
uid, or ruid), the effective user ID (effective uid, or euid),
and the saved user ID (saved uid, or suid). The real uid
identiﬁes the owner of the process, the effective uid is
used in most access control decisions, and the saved uid
stores a previous user ID so that it can be restored later.
Similarly, a process has three group IDs: the real group
ID, the effective group ID, and the saved group ID. In
most cases, the properties of the group IDs parallel the
properties of their user ID counterparts. For simplicity,
we will focus on the user IDs and will mention the group
IDs only when there is the potential for confusion or pit-
falls.
In Linux, each process has also an fsuid and an
fsgid which are used for access control to the ﬁlesystem.
The fsuid usually follows the value in the effective uid
unless explicitly set by the setfsuid system call. Simi-
larly, the fsgid usually follows the value in the effective
gid unless explicitly set by the setfsgid system call. Since
the fsuid and fsgid are Linux speciﬁc, we will not discuss
them except when we point out an inconsistency in the
handling of them in the Linux kernel.
When a process is created by fork, it inherits the three
user IDs from its parent process. When a process exe-
cutes a new ﬁle by exec. . . , it keeps its three user IDs
unless the set-user-ID bit of the new ﬁle is set, in which
case the effective uid and saved uid are assigned the user
ID of the owner of the new ﬁle.
Since access control is based on the effective user ID, a
process gains privilege by assigning a privileged user ID
to its effective uid, and drops privilege by removing the
privileged user ID from its effective uid. Privilege may
be dropped either temporarily or permanently.
• To drop privilege temporarily, a process removes
the privileged user ID from its effective uid but
stores it in its saved uid. Later, the process may
restore privilege by restoring the privileged user ID
in its effective uid.
This section provides background on the user ID model.
Each user in a Unix system has a unique user ID. The
user ID determines which system resources the user can
• To drop privilege permanently, a process removes
the privileged user ID from all three user IDs.
Thereafter, the process can never restore privilege.
4 History
Bell Laboratories ﬁled a patent application on Den-
nis Ritchie’s invention of a bit to specify that a pro-
gram should execute with the permissions of its owner,
rather than invoker, in 1973. The patent was granted in
1979 [4]. Thus, setuid programs and related system calls
have existed through most of Unix history.
4.1 Early Unix
In early Unix systems, a process had two user IDs: the
real uid and the effective uid. Only one system call, se-
tuid, modiﬁed them according to the following rule: if
the effective uid was zero, setuid set both the real uid
and effective uid; otherwise, setuid could only set the
effective uid to the real uid [1]. This model had the prob-
lem that a process could not temporarily drop the root
privilege in its effective uid and restore it later. As Unix
diverged into System V and BSD, each system solved the
problem in a different way.
4.2 System V
System V added a new user ID called the saved uid to
each process. Also added was a new system call, seteuid,
whose rules were:
• If the effective uid was zero, seteuid could set the
effective uid to any user ID.
• Otherwise, seteuid could set the effective uid to only
the real uid or saved uid.
seteuid did not change the real uid or saved uid. Further-
more, System V modiﬁed setuid so that if the effective
uid was not zero, setuid functioned as seteuid (changing
only the effective uid); otherwise, setuid set all three user
IDs.
4.3 BSD
• If the effective uid was zero, then the real uid and
effective uid could be set to any user ID.
• Otherwise, either the real uid or the effective uid
could be set to value of the other one.
Therefore, the setreuid system call enabled a process to
swap the real uid and effective uid.
The POSIX standard [5] codiﬁed a new speciﬁcation for
the setuid call.
In an attempt to be POSIX compliant,
4.4 BSD replaced 4.2 BSD’s old setreuid model with
the POSIX/System V style saved uid model. It modiﬁed
setuid so that setuid set all three user IDs regardless of
whether the effective uid of a process was zero, therefore
allowing any process to permanently drop privileges.
4.4 Modern Unix
As System V and BSD inﬂuenced each other, both sys-
tems implemented setuid, seteuid, and setreuid, although
with different semantics. None of these system calls,
however, allowed the direct manipulation of the saved
uid (although it could be modiﬁed indirectly through se-
tuid and setreuid). Therefore, some modern Unix sys-
tems introduced a new call, setresuid, to allow the modi-
ﬁcation of each of the three user IDs directly.
5 Complexity of Uid-setting System Calls
A process modiﬁes its user IDs by the uid-setting sys-
tem calls: setuid, seteuid, setreuid, and in some systems,
setresuid. Each of the system calls involves two steps.
First, it checks if the process has permission to invoke
the system call. If so, it then modiﬁes the user IDs of the
process according to certain rules.
In this section, we compare and contrast the semantics
of the uid-setting system calls among Linux 2.4.18 [6],
Solaris 8 [7], and FreeBSD 4.4 [8]. The behavior of the