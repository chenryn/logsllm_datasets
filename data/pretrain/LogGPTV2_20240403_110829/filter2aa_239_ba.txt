义一个结构CurrencyStruct，它把货币值表示为美元和美分，再定义一个等价的类
CurrencyClass（代码文件PointerPlayground2/Currency.cs）：
    internal struct CurrencyStruct
    {
      public long Dollars;
      public byte Cents;
      public override string ToString() => $"$ {Dollars}.{Cents}";
    }
    internal class CurrencyClass
    {
      public long Dollars = 0;
      public byte Cents = 0;
      public override string ToString() => $"$ {Dollars}.{Cents}";
    }
定义好结构和类后，就可以对它们应用指针了。下面的代码是一个新的示例。这段代
码比较长，我们对此将做详细讲解。首先显示CurrencyStruct结构的字节数，创建它的两
个实例和一些指针，然后使用pAmount指针初始化一个CurrencyStruct结构amount1的成
员，显示变量的地址（代码文件PointerPlayground2/Program.cs）：
    unsafe public static void Main()
    {
      WriteLine($"Size of CurrencyStruct struct is {sizeof(CurrencyStruct)}");
      CurrencyStruct amount1, amount2;
      CurrencyStruct＊ pAmount = &amount1;
      long＊ pDollars = &(pAmount->Dollars);
      byte＊ pCents = &(pAmount->Cents);
      WriteLine("Address of amount1 is 0x{(ulong)&amount1:X}");
      WriteLine("Address of amount2 is 0x{(ulong)&amount2:X}");
      WriteLine("Address of pAmount is 0x{(ulong)&pAmount:X}");
      WriteLine("Address of pDollars is 0x{(ulong)&pDollars:X}");
      WriteLine("Address of pCents is 0x{(ulong)&pCents:X}");
      pAmount->Dollars = 20;
      ＊pCents = 50;
      WriteLine($"amount1 contains {amount1}");
现在根据栈的工作方式，执行一些指针操作。因为变量是按顺序声明的，所以
amount2存储在amount1后面的地址中。sizeof（CurrencyStruct）运算符返回16（见后面的
屏幕输出），所以CurrencyStruct结构占用的字节数是4的倍数。在递减了Currency指针
后，它就指向amount2：
    --pAmount;  // this should get it to point to amount2
    WriteLine($"amount2 has address 0x{(ulong)pAmount:X} " +
        $"and contains {＊pAmount}");
在调用WriteLine（）语句时，它显示了amount2的内容，但还没有对它进行初始化。
显示出来的东西就是随机的垃圾——在执行该示例前内存中存储在该单元中的内容。但这
有一个要点：一般情况下，C#编译器会禁止使用未初始化的变量，但在开始使用指针
时，就很容易绕过许多通常的编译检查。此时我们这么做，是因为编译器无法知道我们实
际上要显示的是amount2的内容。因为知道了栈的工作方式，所以可以说出递减pAmount
的结果是什么。使用指针算术，可以访问编译器通常禁止访问的各种变量和存储单元，因
此指针算术是不安全的。
接下来在pCents指针上进行指针运算。pCents指针目前指向amount1.Cents，但此处的
目的是使用指针算术让它指向amount2.Cents，而不是直接告诉编译器我们要做什么。为
此，需要从pCents指针所包含的地址中减去sizeof（Currency）：
    // do some clever casting to get pCents to point to cents
    // inside amount2
    CurrencyStruct＊ pTempCurrency = (CurrencyStruct＊)pCents;
    pCents = (byte＊) ( -pTempCurrency );
    WriteLine("Address of pCents is now 0x{0:X}", (ulong)&pCents);
最后，使用fixed关键字创建一些指向类实例中字段的指针，使用这些指针设置这个
实例的值。注意，这也是我们第一次查看存储在堆中（而不是栈）的项的地址：
    WriteLine("\nNow with classes");
    // now try it out with classes
    var amount3 = new CurrencyClass();
    fixed(long＊ pDollars2 = &(amount3.Dollars))
    fixed(byte＊ pCents2 = &(amount3.Cents))
    {
      WriteLine($"amount3.Dollars has address 0x{(ulong)pDollars2:X}");
      WriteLine($"amount3.Cents has address 0x{(ulong)pCents2:X}");
      ＊pDollars2 = -100;
      WriteLine($"amount3 contains {amount3}");
    }
编译并运行这段代码，得到如下所示的结果：
    Size of CurrencyStruct struct is 16
    Address of amount1 is 0xD290DCD7C0
    Address of amount2 is 0xD290DCD7B0
    Address of pAmount is 0xD290DCD7A8
    Address of pDollars is 0xD290DCD7A0
    Address of pCents is 0xD290DCD798
    amount1 contains $ 20.50
    amount2 has address 0xD290DCD7B0 and contains $ 0.0
    Address of pCents is now 0xD290DCD798
    Now with classes
    amount3.Dollars has address 0xD292C91A70
    amount3.Cents has address 0xD292C91A78
    amount3 contains $ -100.0
注意，在这个结果中，显示了未初始化的amount2的值，CurrencyStruct结构的字节数
是16，大于其字段的字节数（一个long数占用8个字节，加上1个字节等于9个字节）。
5.5.3 使用指针优化性能
前面用许多篇幅介绍了使用指针可以完成的各种任务，但在前面的示例中，仅是处理
内存，让有兴趣的人们了解实际上发生了什么事，并没有帮助人们编写出更好的代码！本
节将应用我们对指针的理解，用一个示例来说明使用指针可以大大提高性能。
1．创建基于栈的数组
本节将探讨指针的一个主要应用领域：在栈中创建高性能、低系统开销的数组。第2
章介绍了C#如何支持数组的处理。第7章详细介绍了数组。C#很容易使用一维数组和矩形
或锯齿形多维数组，但有一个缺点：这些数组实际上都是对象，它们是System.Array的实
例。因此数组存储在堆上，这会增加系统开销。有时，我们希望创建一个使用时间比较短
的高性能数组，不希望有引用对象的系统开销。而使用指针就可以做到，但指针只对于一
维数组比较简单。
为了创建一个高性能的数组，需要使用另一个关键字：stackalloc。stackalloc命令指
示.NET运行库在栈上分配一定量的内存。在调用stackalloc命令时，需要为它提供两条信
息：
● 要存储的数据类型
● 需要存储的数据项数
例如，要分配足够的内存，以存储10个decimal数据项，可以编写下面的代码：
    decimal＊ pDecimals = stackalloc decimal[10];
注意，这条命令只分配栈内存。它不会试图把内存初始化为任何默认值，这正好符合
我们的目的。因为要创建一个高性能的数组，给它不必要地初始化相应值会降低性能。
同样，要存储20个double数据项，可以编写下面的代码：
    double＊ pDoubles = stackalloc double[20];
图5-7
虽然这行代码指定把变量的个数存储为一个常数，但它等于在运行时计算的一个数
字。所以可以把上面的示例写为：
    int size;
    size = 20; // or some other value calculated at runtime
    double＊ pDoubles = stackalloc double[size];
从这些代码段中可以看出，stackalloc的
语法有点不寻常。它的后面紧跟要存储的数
据类型名（该数据类型必须是一个值类
型），之后把需要的项数放在方括号中。分
配的字节数是项数乘以sizeof（数据类型）。
在这里，使用方括号表示这是一个数组。如
果给20个double数分配存储单元，就得到了
一个有20个元素的double数组，最简单的数
组类型是逐个存储元素的内存块，如图5-7所
示。
在图5-7中，显示了stackalloc返回的指
针，stackalloc总是返回分配数据类型的指针，它指向新分配内存块的顶部。要使用这个内
存块，可以取消对已返回指针的引用。例如，给20个double数分配内存后，把第一个元素
（数组的元素0）设置为3.0，可以编写下面的代码：
    double＊ pDoubles = stackalloc double[20];
    ＊pDoubles = 3.0;
要访问数组的下一个元素，可以使用指针算术。如前所述，如果给一个指针加1，它
的值就会增加它指向的数据类型的字节数。在本例中，就会把指针指向已分配的内存块中
的下一个空闲存储单元。因此可以把数组的第二个元素（元素编号为1）设置为8.4：
    double＊ pDoubles = stackalloc double[20];
    ＊pDoubles = 3.0;
    ＊(pDoubles + 1) = 8.4;
同样，可以用表达式*（pDoubles+X）访问数组中下标为X的元素。
这样，就得到一种访问数组中元素的方式，但对于一般目的，使用这种语法过于复
杂。C#为此定义了另一种语法。对指针应用方括号时，C#为方括号提供了一种非常精确
的含义。如果变量p是任意指针类型，X是一个整数，表达式p[X]就被编译器解释为
*（p+X），这适用于所有的指针，不仅仅是用stackalloc初始化的指针。利用这个简洁的
表示法，就可以用一种非常方便的语法访问数组。实际上，访问基于栈的一维数组所使用
的语法与访问由System.Array类表示的基于堆的数组完全相同：
    double＊ pDoubles = stackalloc double [20];
    pDoubles[0] = 3.0; // pDoubles[0] is the same as ＊pDoubles
    pDoubles[1] = 8.4; // pDoubles[1] is the same as ＊(pDoubles+1)
  注意： 把数组的语法应用于指针并不是新东西。自从开发出C和C++语言以
来，它就是这两种语言的基础部分。实际上，C++开发人员会把这里用stackalloc获得
的、基于栈的数组完全等同于传统的基于栈的C和C++数组。这种语法和指针与数组的
链接方式是C语言在20世纪70年代后期流行起来的原因之一，也是指针的使用成为C和
C++中一种流行的编程技巧的主要原因。
尽管高性能的数组可以用与一般C#数组相同的方式访问，但需要注意：在C#中，下
面的代码会抛出一个异常：
    double[] myDoubleArray = new double [20];
    myDoubleArray[50] = 3.0;
抛出异常的原因是：使用越界的下标来访问数组：下标是50，而允许的最大下标是
19。但是，如果使用stackalloc声明了一个等价的数组，对数组进行边界检查时，这个数组
中就没有封装任何对象，因此下面的代码不会抛出异常：
    double＊ pDoubles = stackalloc double [20];
    pDoubles[50] = 3.0;
在这段代码中，我们分配了足够的内存来存储20个double类型的数。接着把
sizeof（double）存储单元的起始位置设置为该存储单元的起始位置加上
50*sizeof（double）个存储单元，来保存双精度值3.0。但这个存储单元超出了刚才为
double数分配的内存区域。谁也不知道这个地址存储了什么数据。最好是只使用某个当前
未使用的内存，但所重写的存储单元也有可能是在栈上用于存储其他变量，或者是某个正
在执行的方法的返回地址。因此，使用指针获得高性能的同时，也会付出一些代价：需要
确保自己知道在做什么，否则就会抛出非常古怪的运行错误。
2. QuickArray示例
下面用一个stackalloc示例QuickArray来结束关于指针的讨论。在这个示例中，程序仅
要求用户提供为数组分配的元素数。然后代码使用stackalloc给long型数组分配一定的存储
单元。这个数组的元素是从0开始的整数的平方，结果显示在控制台上（代码文件
QuickArray/Program.cs）：
    using static System.Console;
    namespace QuickArray
    {
      public class Program
      {
        unsafe public static void Main()
        {
        Write("How big an array do you want? \n> ");
        string userInput = ReadLine();
        uint size = uint.Parse(userInput);
        long＊ pArray = stackalloc long[(int) size];
        for (int i = 0; i  15
    Element 0 = 0
    Element 1 = 1
    Element 2 = 4
    Element 3 = 9
    Element 4 = 16
    Element 5 = 25
    Element 6 = 36
    Element 7 = 49
    Element 8 = 64
    Element 9 = 81
    Element 10 = 100
    Element 11 = 121
    Element 12 = 144
    Element 13 = 169
    Element 14 = 196
    _
5.6 平台调用
并不是Windows API调用的所有特性都可用于.NET Framework。旧的Windows API调
用是这样，Windows 10或Windows Server 2016中的新功能也是这样。也许开发人员会编
写一些DLL，导出非托管的方法，在C#中使用它们。
要重用一个非托管库，其中不包含COM对象，只包含导出的功能，就可以使用平台
调用（P /Invoke）。有了P / Invoke, CLR会加载DLL，其中包含应调用的函数，并编组参
数。
要使用非托管函数，首先必须确定导出的函数名。为此，可以使用dumpbin工具
和/exports选项。例如，命令：
    dumpbin /exports c:\windows\system32\kernel32.dll | more
列出DLL kernel32.dll中所有导出的函数。这个示例使用Windows API函数CreateHardLink
来创建到现有文件的硬链接。使用此API调用，可以用几个文件名引用相同的文件，只要
文件名在一个硬盘上即可。这个API调用不能用于.NET Framework 4.5.1，因此必须使用平
台调用。
为了调用本机函数，必须定义一个参数数量相同的C#外部方法，用非托管方法定义
的参数类型必须用托管代码映射类型。
在C++中，Windows API调用CreateHardLink有如下定义：
    BOOL CreateHardLink(
      LPCTSTR lpFileName,
      LPCTSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes);
这个定义必须映射到.NET数据类型上。非托管代码的返回类型是BOOL；它仅映射到
bool数据类型。LPCTSTR定义了一个指向const字符串的long指针。Windows API给数据类
型使用Hungarian命名约定。LP是一个long指针，C是一个常量，STR是以null结尾的字符
串。T把类型标志为泛型类型，根据编译器设置为32还是64位，该类型解析为
LPCSTR（ANSI字符串）或LPWSTR（宽Unicode字符串）。C字符串映射到.NET类型为
String。LPSECURITY_ATTRIBUTES是一个long指针，指向SECURITY_ATTRIBUTES类
型的结构。因为可以把NULL传递给这个参数，所以把这种类型映射到IntPtr是可行的。该
方法的C#声明必须用extern修饰符标记，因为在C#代码中，这个方法没有实现代码。相
反，该方法的实现代码在DLL 
kernel32.dll中，它用属性[DllImport]引用。.NET声明
CreateHardLink的返回类型是bool，本机方法CreateHardLink返回一个布尔值，所以需要一
些额外的澄清。因为C++有不同的Boolean数据类型（例如，本机bool和Windows定义的
BOOL有不同的值），所以特性[MarshalAs]指定.NET类型bool应该映射为哪个本机类型：
    [DllImport("kernel32.dll", SetLastError="true",
              EntryPoint="CreateHardLink", CharSet=CharSet.Unicode)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool CreateHardLink(string newFileName,
                                      string existingFilename,
                                      IntPtr securityAttributes);
  注意： 网站http://www.pinvoke.net非常有助于从本机代码到托管代码的转
换。
可以用[DllImport]特性指定的设置在表5-2中列出。
表5-2
DLLIMPORT属性或字
段
说明
EntryPoint
可以给函数的C#声明指定与非托管库不同的名称。非托管
库中方法的名称在EntryPoint字段中定义
CallingConvention
根据编译器或用来编译非托管函数的编译器设置，可以使用
不同的调用约定。调用约定定义了如何处理参数，把它们放
在堆栈的什么地方。可以设置一个可枚举的值，来定义调用
约定。Windows API在Windows操作系统上通常使用StdCall
调用约定，在Windows CE上使用Cdecl调用约定。把值设置
为CallingConvention.Winapi，可让Windows API用于
Windows和Windows CE环境
CharSet
字符串参数可以是ANSI或Unicode。通过CharSet设置，可以
定义字符串的管理方式。用CharSet枚举定义的值有Ansi、
Unicode和Auto.CharSet。Auto在Windows NT平台上使用
Unicode，在微软的旧操作系统上使用ANSI
SetLastError
如果非托管函数使用Windows API SetLastError设置一个错
误，就可以把SetLastError字段设置为true。这样，就可以使
用Marshal. GetLastWin32Error读取后面的错误号
为了使CreateHardLink方法更易于在.NET环境中使用，应该遵循如下规则：
● 创建一个内部类NativeMethods，来包装平台调用的方法调用。
● 创建一个公共类，给.NET应用程序提供本机方法的功能。
● 使用安全特性来标记所需的安全。
在接下来的例子中，类FileUtility中的公共方法CreateHardLink可以由.NET应用程序使
用。这个方法的文件名参数，与本机Windows 
API方法CreateHardLink的顺序相反。第一
个参数是现有文件的名称，第二个参数是新的文件。这类似于框架中的其他类，如