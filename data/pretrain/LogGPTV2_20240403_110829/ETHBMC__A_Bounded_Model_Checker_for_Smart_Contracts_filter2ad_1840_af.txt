### Transparency and Vulnerability Analysis

Given the fully transparent nature of the blockchain, an attacker could monitor it and extract funds from accounts when they contain a significant amount of Ether. To assess the potential impact, we analyzed the highest value recorded for each identified vulnerable account, providing an upper bound on the potential loss. This analysis revealed that approximately 155,000 Ether were at risk. However, using EthBMC, we can recreate the Parity hack. If this tool had been available at the time, more than 370,000 Ether could have been extracted. These amounts are equivalent to approximately $40 million and $89 million, respectively, based on the exchange rate at the end of February 2020.

### Related Work

In addition to the static analyzers discussed in Section 3.3, we now review other works closely related to our research. ZEUS [28] analyzes Solidity source code using abstract interpretation and deploys its own policy language to specify violations. Similarly, VerX [51] is a recently proposed framework for verifying temporal properties, utilizing symbolic execution and abstract interpretation-based predicate abstraction in conjunction with its own policy language. However, since the source code for both ZEUS and VerX is not publicly available, we exclude them from our survey.

Two other approaches for detecting vulnerabilities are Osiris [60] and EthRacer [31]. Osiris uses symbolic execution and taint tracking to discover integer overflow bugs, built on top of Oyente. It first analyzes contracts symbolically and then uses taint tracking to check for source-sink patterns of integer overflows. EthRacer [31] focuses on analyzing multi-transaction relationships, specifically event ordering bugs, where different behaviors are exhibited based on the order of execution. EthRacer uses symbolic analysis to extract happens-before relations [34] and then performs fuzz testing to generate long chains of transactions, searching for different outputs to detect event ordering bugs.

Formal verification takes a different approach by validating contracts against a handwritten formal specification rather than checking for a predefined set of bugs. The K-Framework [27] provides full semantics for the EVM, allowing users to specify properties in reachability logic, which are then checked against the formal semantics. Grishchenko et al. [25] formalize the EVM semantics in the F* proof assistant, identifying multiple flaws in existing verification tools for Ethereum smart contracts and defining several security properties for contract verification.

Zhou et al. [65] introduce ERAYS, a reverse engineering tool for the EVM, and conduct an analysis of function reuse in the Solidity ecosystem, finding that some functions reappear in over 10,000 contracts. Rodler et al. [53] use taint tracking to detect reentrancy attacks during the execution of smart contracts, with miners running an extended Ethereum node to protect against these attacks at runtime.

### Conclusion

In this paper, we first presented a survey of recent static analysis tools for smart contracts, demonstrating that all of these tools employ imprecise reasoning in at least one category. Recognizing these flaws, we introduced ETHBMC, a symbolic executor capable of capturing inter-contract relations, cryptographic hash functions, and memcopy-style operations. We evaluated ETHBMC's implementation against several previous works and showed that its accuracy significantly outperforms them. Additionally, we conducted a vulnerability analysis of the current contract landscape and provided multiple studies into the inner workings of ETHBMC.

### Acknowledgements

We would like to thank our shepherd Jelena Mirkovic, our colleagues Moritz Contag, Andre Pawlowski, Emre Güler, Ali Abbasi, Tim Blazytko, Moritz Schlögel, Thorsten Eisenhofer, Lukas Bernhard, and our anonymous reviewers for their valuable feedback. This work was supported by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) under Germany’s Excellence Strategy – EXC-2092 CASA – 390781972, and the German Federal Ministry of Education and Research (BMBF, project iBlockchain – 16KIS0901K).

### References

[References listed here as in the original text]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.