is fully transparent to the outside world, an attacker could
monitor the blockchain and extract funds from the accounts
when they contain an attractive amount of Ether. Thus, we
performed an analysis of the highest value recorded for each
vulnerable account we identiﬁed, giving us an upper bound
on the potential impact. This yielded a maximum impact of
around 155,000 Ether at risk. However, EthBMC can recreate
the Parity hack. If the tool had been around at the time, we
could have extracted more than 370,000 Ether. These equal
about 40 Million USD and 89 Million USD, respectively, at
the rate in the end of February 2020.
8 Related Work
Beyond the static analyzers discussed in Section 3.3, we now
review other works closely related to ours. ZEUS [28] ana-
lyzes Solidity source code using abstract interpretation and
deploys its own policy language, which can be used to specify
violations to check against. In the same vein, VerX [51] is
a recently proposed framework for verifying temporal prop-
erties. They utilize symbolic execution as well as abstract
interpretation based predicate abstraction in conjunction with
their own policy language to check these properties. However,
since the source code of neither ZEUS nor Verx is available,
we exclude them from our survey. Two other approaches for
detecting vulnerabilities are Osiris [60] and EthRacer [31].
Osiris utilizes symbolic execution and taint tracking to dis-
cover integer overﬂow bugs. Osiris is built on top of Oyente,
ﬁrst analyzing contracts symbolically and afterwards utiliz-
ing taint tracking to check a source-sink pattern for integer
USENIX Association
29th USENIX Security Symposium    2771
overﬂows. EthRacer [31] is another approach to analyzing
multi-transaction relationships. They focus on event order-
ing bugs, i.e., events which exhibit different behaviours when
executed in different order. They utilize symbolic analysis
to ﬁrst extract happens-before relations [34]. Based on these
ﬁndings, they perform fuzz testing to generate long chains of
transactions searching for different outputs, thus, detecting
event ordering bugs.
A different approach is taken by formal veriﬁcation. In-
stead of checking a contract against a predeﬁned set of bugs,
the contract is validated against a handwritten formal speciﬁ-
cation. The K-Framework [27] provides full semantics for the
EVM. These allow users to specify properties in reachability
logic, which in turn gets checked against the formal semantics.
Grishchenko et. al. [25] formalize the EVM semantics in in
the F* proof assistance, also ﬁnding multiple ﬂaws in existing
veriﬁcation tools for Ethereum smart contracts. Furthermore
they deﬁne multiple security properties, which can be utilized
while verifying one’s contract.
Zhou et al. [65] introduce ERAYS, a reverse engineering
tool for the EVM. They additionally conduct an analysis on
function reuse in the Solidity ecosystem, ﬁnding that some
functions reappear in over 10,000 contracts. Rodler et al. [53]
utilize taint tracking to discover reentrancy attacks while exe-
cuting smart contracts. In their setting, miners run an extended
Ethereum node which protects against attacks at runtime.
9 Conclusion
In this paper, we ﬁrst presented a survey of recent static anal-
ysis tools for smart contracts. We demonstrated that all of
these tools employ imprecise reasoning in at least one cat-
egory. Recognizing these ﬂaws, we presented ETHBMC, a
symbolic executor able to capture inter-contract relations,
cryptographic hash functions, and memcopy-style operations.
We demonstrated its effectiveness by evaluating the imple-
mentation against several previous works and showed that
ETHBMC’s accuracy signiﬁcantly outperforms them. Addi-
tionally, we presented a vulnerability analysis of the current
contract landscape, as well as multiple studies into the inner
workings of ETHBMC.
Acknowledgements We would like to thank our shep-
herd Jelena Mirkovic, our colleagues Moritz Contag, Andre
Pawlowski, Emre Güler, Ali Abbasi, Tim Blazytko, Moritz
Schlögel, Thorsten Eisenhofer, Lukas Bernhard, and our
anonymous reviewers for their valuable feedback. This work
was supported by the Deutsche Forschungsgemeinschaft
(DFG, German Research Foundation) under Germany’s Ex-
cellence Strategy – EXC-2092 CASA – 390781972, and the
German Federal Ministry of Education and Research (BMBF,
project iBlockchain – 16KIS0901K).
References
[1] Shehar Bano, Alberto Sonnino, Mustafa Al-Bassam,
Sarah Azouvi, Patrick McCorry, Sarah Meiklejohn, and
George Danezis.
Sok: Consensus in the age of
blockchains. In ACM Conference on Advances in Finan-
cial Technologies (AFT), 2019.
[2] Aaron R Bradley and Zohar Manna. The Calculus of
Computation: Decision Procedures with Applications to
Veriﬁcation. Springer-Verlag, 2007.
[3] Lexi Brent, Anton Jurisevic, Michael Kong, Eric Liu,
Francois Gauthier, Vincent Gramoli, Ralph Holz, and
Bernhard Scholz. Static program analysis framework for
ethereum smart contract bytecode. github.com/vandal.
[4] Lexi Brent, Anton Jurisevic, Michael Kong, Eric Liu,
Francois Gauthier, Vincent Gramoli, Ralph Holz, and
Bernhard Scholz. Vandal: A scalable security anal-
ysis framework for smart contracts. arXiv preprint
arXiv:1809.03981, 2018.
[5] Vitalik Buterin et al.
contract and decentralized application
github.com/ethereum/whitepaper, 2014.
A next-generation smart
platform.
[6] Christian Cachin. Architecture of the hyperledger
blockchain fabric. In Workshop on Distributed Cryp-
tocurrencies and Consensus Ledgers, 2008.
[7] Cristian Cadar, Daniel Dunbar, Dawson R Engler, et al.
Klee: Unassisted and automatic generation of high-
coverage tests for complex systems programs. In Sympo-
sium on Operating Systems Design and Implementation
(OSDI), 2008.
[8] Cristian Cadar, Vijay Ganesh, Peter M Pawlowski,
David L Dill, and Dawson R Engler. EXE: Automati-
cally Generating Inputs of Death. ACM Transactions on
Information and System Security (TISSEC), 2008.
[9] Cristian Cadar and Koushik Sen. Symbolic execution for
software testing: Three decades later. Communications
of the ACM (CACM), 2013.
[10] Ran Canetti and Marc Fischlin. Universally compos-
able commitments. In Annual International Cryptology
Conference, 2001.
[11] Allen Day and Evgeny Medvedev. Ethereum in big-
query: a public dataset for smart contract analytics.
cloud.google.com/ethereum-bigquery.
[12] Leonardo De Moura and Nikolaj Bjørner. Z3: An efﬁ-
cient smt solver. In International conference on Tools
and Algorithms for the Construction and Analysis of
Systems, 2008.
2772    29th USENIX Security Symposium
USENIX Association
[13] Solidity Documentation.
Solidity.
ity.readthedocs.io/overview, 2017.
[14] Solidity Documentation. Solidity in depth.
ity.readthedocs.io/indepth, 2017.
solid-
solid-
[15] Bruno Dutertre. Yices 2.2. In International Confernce
on Computer-Aided Veriﬁcation (CAV), 2014.
[16] Stefan Dziembowski, Lisa Eckey, Sebastian Faust, and
Daniel Malinowski. Perun: Virtual payment hubs over
cryptocurrencies. In IEEE Symposium on Security and
Privacy (S&P), 2019.
[17] Stephan Falke, Florian Merz, and Carsten Sinz. Extend-
ing the theory of arrays: memset, memcpy, and beyond.
In Conference on Veriﬁed Software: Theories, Tools and
Experiments (VSTTE), 2013.
[18] Stephan Falke, Carsten Sinz, and Florian Merz. A theory
of arrays with set and copy operations. In SMT@ IJCAR,
2012.
[19] David Floyd. The top 5 ethereum dapps by daily active
users. coindesk.com/top-applications, 2018.
[20] Ethereum Foundation. Go-ethereum. github.com/go-
ethereum, 2015.
[21] Vijay Ganesh and David L Dill. A decision procedure
for bit-vectors and arrays. In International Confernce
on Computer-Aided Veriﬁcation (CAV), 2007.
[22] Neville Grech, Michael Kong, Anton Jurisevic, Lexi
Brent, Bernhard Scholz, and Yannis Smaragdakis. Mad-
max: Surviving out-of-gas conditions in ethereum smart
contracts. github.com/MadMax.
[23] Neville Grech, Michael Kong, Anton Jurisevic, Lexi
Brent, Bernhard Scholz, and Yannis Smaragdakis. Mad-
max: Surviving out-of-gas conditions in ethereum smart
contracts. In ACM SIGPLAN Conference on Object-
Oriented Programming Systems, Languages, and Appli-
cations (OOPSLA), 2018.
[24] Matthew Green and Ian Miers. Bolt: Anonymous pay-
ment channels for decentralized currencies. In ACM
Conference on Computer and Communications Security
(CCS), 2017.
[25] Ilya Grishchenko, Matteo Maffei, and Clara Schnei-
dewind. A Semantic Framework for the Security Anal-
In International
ysis of Ethereum Smart Contracts.
Conference on Principles of Security and Trust, 2018.
[26] Matthias Heizmann, Aina Niemetz, Giles Reger,
smt-
Smt-comp 2018.
and Tjark Weber.
comp.sourceforge.net/2018, 2018.
[27] Everett Hildenbrandt, Manasvi Saxena, Xiaoran Zhu,
Nishant Rodrigues, Philip Daian, Dwight Guth, and
Grigore Rosu. Kevm: A complete semantics of the
ethereum virtual machine. In IEEE Computer Security
Foundations Symposium (CSF), 2017.
[28] Sukrit Kalra, Seep Goel, Mohan Dhawan, and Subodh
Sharma. Zeus: Analyzing safety of smart contracts. In
Symposium on Network and Distributed System Security
(NDSS), 2018.
[29] Lucianna Kiffer, Dave Levin, and Alan Mislove. Analyz-
ing ethereum’s contract topology. In ACM SIGCOMM
Conference on Internet Measurement (IMC), 2018.
[30] James C King. Symbolic execution and program testing.
Communications of the ACM (CACM), 1976.
[31] Aashish Kolluri, Ivica Nikolic, Ilya Sergey, Aquinas Ho-
bor, and Prateek Saxena. Exploiting the laws of order
in smart contracts. In International Symposium on Soft-
ware Testing and Analysis (ISSTA), 2019.
[32] Johannes Krupp and Christian Rossow. teether: Gnaw-
ing at ethereum to automatically exploit smart contracts.
github.com/teether.
[33] Johannes Krupp and Christian Rossow. teether: Gnaw-
ing at ethereum to automatically exploit smart contracts.
In USENIX Security Symposium, 2018.
[34] Leslie Lamport. Time, clocks, and the ordering of events
in a distributed system. Communications of the ACM
(CACM), 1978.
[35] Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena,
and Aquinas Hobor. An analysis tool for smart contracts.
In ACM Conference on Computer and Communications
Security (CCS), 2016.
[36] Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena,
and Aquinas Hobor. Making smart contracts smarter.
In ACM Conference on Computer and Communications
Security (CCS), 2016.
[37] Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena,
Aquinas Hobor, and Melonport Security. Oyente sha3
computation. github.com/oyente, 2018.
[38] Microsoft. Microsoft and Bank of America Merrill
Lynch collaborate to transform trade ﬁnance transacting
with Azure Blockchain as a Service. Microsoft News
Center, 2016.
[39] Mark Mossberg, Felipe Manzano, Eric Hennenfent, Alex
Groce, Gustavo Grieco, Josselin Feist, Trent Brunson,
and Artem Dinaburg. Manticore: A user-friendly sym-
bolic execution framework for binaries and smart con-
tracts. In ACM/IEEE International Conference on Auto-
mated Software Engineering (ASE), 2019.
USENIX Association
29th USENIX Security Symposium    2773
[55] Carsten Sinz, Stephan Falke, and Florian Merz. A pre-
cise memory model for low-level bounded model check-
ing. In International Conference on Systems Software
Veriﬁcation, 2010.
[56] Nick Stephens, John Grosen, Christopher Salls, Andrew
Dutcher, Ruoyu Wang, Jacopo Corbetta, Yan Shoshi-
taishvili, Christopher Kruegel, and Giovanni Vigna.
Driller: Augmenting fuzzing through selective symbolic
execution. In Symposium on Network and Distributed
System Security (NDSS), 2016.
[57] Nick Szabo. Formalizing and securing relationships on
public networks. First Monday, 1997.
[58] The Raiden Team. Raiden network. raiden.network.
[59] Parity Tech. A postmortem on the parity multi-sig li-
brary self-destruct. paritytech.io/postmortem, 2017.
[60] Christof Ferreira Torres, Julian Schütte, et al. Osiris:
Hunting for integer bugs in ethereum smart contracts.
In ACM Conference on Computer and Communications
Security (CCS), 2018.
[61] Petar Tsankov, Andrei Dan, Dana Drachsler Cohen,
Arthur Gervais, Florian Buenzli, and Martin Vechev. Se-
curify: Practical security analysis of smart contracts.
github.com/securify.
[62] Petar Tsankov, Andrei Dan, Dana Drachsler Cohen,
Arthur Gervais, Florian Buenzli, and Martin Vechev. Se-
curify: Practical security analysis of smart contracts. In
ACM Conference on Computer and Communications
Security (CCS), 2018.
[63] Oscar Williams-Grut. Goldman Sachs: 5 Practical Uses
for Blockchain — from Airbnb to Stock Markets. Busi-
ness Insider, 2016.
[64] Gavin Wood.
Ethereum: A secure decen-
eip-
(commit 759dccd - 2017-08-07).
tralised
150 revision
github.com/ethereum/yellowpaper, 2014.
generalised
transaction
ledger,
[65] Yi Zhou, Deepak Kumar, Surya Bakshi, Joshua Mason,
Andrew Miller, and Michael Bailey. Erays: Reverse engi-
neering ethereum’s opaque smart contracts. In USENIX
Security Symposium, 2018.
[40] Bernhard Mueller. Mythril - security analysis tool for
ethereum smart contracts. github.com/mythril, 2018.
[41] Bernhard Mueller. Smashing ethereum smart contracts
for fun and real proﬁt. github.com/smashing-smart-
contracts, 2018.
[42] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic
cash system. www.bitcoin.org, 2008.
[43] Flemming Nielson, Hanne R Nielson, and Chris Hankin.
Principles of Program Analysis. Springer-Verlag, 2015.
[44] Aina Niemetz, Mathias Preiner, and Armin Biere.
Boolector 2.0 system description. Journal on Satis-
ﬁability, Boolean Modeling and Computation, 2014.
[45] Ivica Nikolic, Aashish Kolluri, Ilya Sergey, Prateek Sax-
ena, and Aquinas Hobor. Maian: Automatic tool for
ﬁnding trace vulnerabilities in ethereum smart contracts.
github.com/MAIAN.
[46] Ivica Nikolic, Aashish Kolluri, Ilya Sergey, Prateek Sax-
ena, and Aquinas Hobor. Finding the greedy, prodigal,
In Annual Computer
and suicidal contracts at scale.
Security Applications Conference (ACSAC), 2018.
[47] Ivica Nikolic, Aashish Kolluri, Ilya Sergey, Prateek Sax-
ena, and Aquinas Hobor. Maian: Automatic tool for
ﬁnding trace vulnerabilities in ethereum smart contracts.
github.com/MAIAN/issues, 2018.
[48] Trail of Bits. Maticore symbolic execution tool.
github.com/manticore, 2017.
[49] Trail
of
Bits.
Not
so-smart-contracts.
github.com/trailofbits/not-so-smart-contracts, 2018.
[50] Santiago Palladino. The parity wallet hack explained.
zeppelin.solutions/parity-wallet-hack, 2017.
[51] Anton Permenev, Dimitar Dimitrov, Petar Tsankov,
Dana Drachsler-Cohen, and Martin Vechev. Verx: Safety
veriﬁcation of smart contracts. In IEEE Symposium on
Security and Privacy (S&P), 2019.
[52] Nathaniel Popper and Steve Lohr. Blockchain: A better
way to track pork chops, bonds, bad peanut butter? New
York Times, 2017.
[53] Michael Rodler, Wenting Li, Ghassan O Karame, and
Lucas Davi. Sereum: Protecting existing smart contracts
against re-entrancy attacks. In Symposium on Network
and Distributed System Security (NDSS), 2018.
[54] Edward J Schwartz, Thanassis Avgerinos, and David
Brumley. All you ever wanted to know about dynamic
taint analysis and forward symbolic execution (but might
have been afraid to ask). In IEEE Symposium on Secu-
rity and Privacy (S&P), 2010.
2774    29th USENIX Security Symposium
USENIX Association