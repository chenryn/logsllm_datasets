9字符串拆分hash解析
10一致性hash
### 1.2.2服务工作过程
查询,插入过程
![](media/image45.png){width="5.764583333333333in"
height="4.080555555555556in"}
![](media/image46.png){width="5.767361111111111in"
height="2.8930555555555557in"}
### 1.2.3实验拓扑结构
sql53 数据库服务器1 192.168.53/24
sql54 数据库服务器2 192.168.54/24
sql55 数据库服务器3 192.168.55/24
sql56 mycat服务器 192.168.56/24
### 1.2.4配置数据分片服务
#### 1:装包
\[root@sql56 \~\]# rpm -qa \|grep jdk
java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64
java-1.8.0-openjdk-headless-1.8.0.131-11.b12.el7.x86_64
copy-jdk-configs-2.2-3.el7.noarch
\[root@sql56 \~\]# java -version
openjdk version \"1.8.0_131\"
\[root@sql56 \~\]# tar -xf
Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz
\[root@sql56 \~\]# mv mycat /usr/local/
\[root@sql56 \~\]# ls /usr/local/mycat/
bin catlet conf lib logs version.txt
目录结构说明
-bin: mycat管理命令
catlet: mycat扩展功能
conf: mycat配置文件
lib: mycat使用的jar(库文件:开发者写好的功能脚本)
log: mycat启动日志和运行日志
wrapper.log: mycat服务启动日志
mycat.log: mycat记录sql脚本执行后报错内容
\[root@sql56 \~\]# cd /usr/local/mycat/conf/
\[root@sql56 conf\]# ls #配置目录重要的文件
Server.xml 设置连mycat的账号信息
Schema.xml 配置mycat的真实库表,
rule.xml 定义mycat分片规则
\[root@sql56 conf\]# vim rule.xml #简单查看分片规则,此处不做操作
12 \ #规则名称
13 \
14 \id\
15 \func1\ #算法
16 \
17 \
18
规则定义
110 \
111 \8\
112 \128\
113 \
#### 2修改配置文件
**定义连接mycat服务器使用用户名密码及数据库名和权限**
server.xml文件作用:设置连mycat的账号信息
\[root@sql56 \]# vim /usr/local/mycat/conf/server.xml
设置连mycat的账号信息
\[root@sql56 \~\]# cd /usr/local/mycat/conf/
\[root@sql56 conf\]# cp server.xml /root #备份server.xml配置文件
80 \ #连接mycat用户名
81 \123456\ #密码
82 \TESTDB\ #能看到库名
83
84 \
85 \
87 \
88 \\
89 \\
90 \
91 \
92 \--\> #注释结束
93 \
94
95 \ #连接mycat用户名
96 \user\ #密码
97 \TESTDB\ #能看到库名
98 \true\ #定义只读
99 \
100
**配置数据分片**
schema.xml文件作用:配置mycat的真实库表,
\[root@sql56 \]# vim /usr/local/mycat/conf/schema.xml
\[root@sql56 \~\]# cd /usr/local/mycat/conf/
\[root@sql56 conf\]# cp schema.xml /root #备份schema.xml 配置文件
\[root@sql56 conf\]# sed -i \'56,77d\' schema.xml
\[root@sql56 conf\]# sed -i \'39,42d\' schema.xml
\[root@sql56 conf\]# vim schema.xml #定义规则
5 \
6 \
7 \ \#
11 \
33\ #global全局规则,dn1,dn2,dn3数据库服务节点名
**#节点名对应的数据库服务器主机localhost53 localhost54
localhost55自己定义**
**#例如:**\\**定义数据库主机"localhost53"用数据库db1来存储数据**
36 \
37 \
38 \
**#删除不相关行,如下,并修改\\指定数据库地址以及用户信息**
40\
42 \select user()\
43 \
45 \
46 \
47\
49 \select user()\
50 \
52 \
53 \
54\
56 \select user()\
57 \
59 \
60\
#### 3启动服务并查看是否正常
\[root@sql56 conf\]# /usr/local/mycat/bin/mycat start
Starting Mycat-server\...
\[root@sql56 conf\]# netstat -nutlp \| grep :8066 #一定要查看端口
tcp6 0 0 :::8066 :::\* LISTEN 6836/java
\[root@sql56 conf\]# ps -C java
PID TTY TIME CMD
6836 ? 00:00:02 java
\[root@sql56 conf\]# /usr/local/mycat/bin/mycat status #查看服务
Mycat-server is running (6834).
\[root@sql56 conf\]# /usr/local/mycat/bin/mycat stop #停止服务
\[root@sql56 \~\]# /usr/local/mycat/bin/mycat help #查看命令
Usage: /usr/local/mycat/bin/mycat { console \| start \| stop \| restart
\| status \| dump }
#### 4处理异常
一个终端查看启动日志wrapper.log,
再开一个终端去启动mycat,则可以实时查看启动信息
\[root@sql56 \~\]#tail -f /usr/local/mycat/logs/wrapper.log
有时候启动不了是mycat服务机内存不够,重启主机,
#### 5客户机连接:
\[root@client-50 \~\]# mysql -h192.168.4.56 -P8066 -uroot -p123456
mysql\> show databases;
+\-\-\-\-\-\-\-\-\--+
\| DATABASE \|
+\-\-\-\-\-\-\-\-\--+
\| TESTDB \|
+\-\-\-\-\-\-\-\-\--+
mysql\>use TESTDB;
mysql\> show tables; #此时的表都是不存在的
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Tables in TESTDB \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| company \|
\| customer \|
\| customer_addr \|
\| employee \|
\| goods \|
\| hotnews \|
\| orders \|
\| order_items \|
\| travelrecord \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
9 rows in set (0.00 sec)
根据数据分片的配置做相应的设置
### 1.2.5测试数据分片
根据表使用的分片规则建表
schema.xml文件作用:配置mycat的真实库表,此文件定义了表规则
#### 测试全局"global"规则
例如:commpany表的规则为:global全局存放在dn1,dn2,dn3,且表里面必须有个ID字段为主键
\
**客户端登录56**
\[root@client-50 \~\]# mysql -h192.168.4.56 -P8066 -uroot -p123qqq\...A
mysql\> show databases;
+\-\-\-\-\-\-\-\-\--+
\| DATABASE \|
+\-\-\-\-\-\-\-\-\--+
\| TESTDB \|
+\-\-\-\-\-\-\-\-\--+
mysql\> show tables;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Tables in TESTDB \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| company \|
\| customer \|
\| customer_addr \|
\| employee \|
\| goods \|
\| hotnews \|
\| orders \|
\| order_items \|
\| travelrecord \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
9 rows in set (0.00 sec)
mysql\> desc company;
mysql\> create table company(ID int primary key auto_increment,cname
char(50),address char(50),tel char(11));
Query OK, 0 rows affected (0.52 sec)
mysql\> desc company;
+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Field \| Type \| Null \| Key \| Default \| Extra \|
+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| ID \| int(11) \| NO \| PRI \| NULL \| auto_increment \|
\| cname \| char(50) \| YES \| \| NULL \| \|
\| address \| char(50) \| YES \| \| NULL \| \|
\| tel \| char(11) \| YES \| \| NULL \| \|
+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+\-\-\-\-\--+\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
4 rows in set (0.01 sec)
mysql\> insert into company(cname,address,tel)
values(\"tarena\",\"bejing\",\"888888\");
Query OK, 1 row affected (0.17 sec)
mysql\> insert into company(cname,address,tel)
values(\"tarena\",\"bejing\",\"888888\");
Query OK, 1 row affected (0.08 sec)
**53 54 55都能看到客户端50登录56数据库后创建的company表以及插入的数据**
**以53为例:**
\[root@sql53 \~\]# mysql -uroot -p123456
mysql\> show databases;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Database \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| information_schema \|
\| db1 \|
\| mysql \|
\| performance_schema \|
\| sys \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
5 rows in set (0.00 sec)
mysql\> use db1;
mysql\> show tables;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Tables_in_db1 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| company \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
1 row in set (0.00 sec)
mysql\> select \* from company ;
+\-\-\--+\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\--+
\| ID \| cname \| address \| tel \|
+\-\-\--+\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\--+
\| 1 \| tarena \| bejing \| 888888 \|
\| 2 \| tarena \| bejing \| 888888 \|
+\-\-\--+\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\--+
2 rows in set (0.00 sec)