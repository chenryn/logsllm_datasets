write函数：
    1. ssize_t __fastcall babywrite(file *filp, const char *buffer, size_t length, loff_t *offset)
    2.  {
    3. unsigned __int64 copy_len; // rdx@1
    4. ssize_t result; // rax@2
    5. ssize_t v6; // rbx@3
    6. 
    7. _fentry__(filp, buffer, length, offset);
    8. if ( babydev_struct.device_buf )
    9. {
    10. result = -2LL;
    11. if ( babydev_struct.device_buf_len > copy_len )
    12. {
    13. v6 = copy_len;
    14. copy_from_user(babydev_struct.device_buf, buffer, copy_len);
    15. result = v6;
    16. }
    17. }
    18. else
    19. {
    20. result = -1LL;
    21. }
    22. return result;
    23.}
read函数：
    1.  ssize_t __fastcall babyread(file *filp, char *buffer, size_t length, loff_t *offset)
    2.  {
    3. unsigned __int64 copy_len; // rdx@1
    4. ssize_t result; // rax@2
    5. ssize_t v6; // rbx@3
    6. 
    7. _fentry__(filp, buffer, length, offset);
    8. if ( babydev_struct.device_buf )
    9. {
    10. result = -2LL;
    11. if ( babydev_struct.device_buf_len > copy_len )
    12. {
    13. v6 = copy_len;
    14. copy_to_user(buffer, babydev_struct.device_buf, copy_len);
    15. result = v6;
    16. }
    17. }
    18. else
    19. {
    20. result = -1LL;
    21. }
    22. return result;
    23.}
源码非常简单，大概就是有一个struct，其中保存了一个buf和一个size，buf在open时通过kmem_cache_alloc进行分配，这个分配其实是和kmalloc一个原理，这里我是通过查看源码发现的，具体查看的源码如下：
    1.  static __always_inline void *kmalloc(size_t size, gfp_t flags)
    2.  {
    3.  if (__builtin_constant_p(size)) 
    4. {
    5. if (size > KMALLOC_MAX_CACHE_SIZE)
    6. return kmalloc_large(size, flags);
    7.  #ifndef CONFIG_SLOB
    8.  if (!(flags & GFP_DMA)) 
    9.   {
    10. int index = kmalloc_index(size);
    11. 
    12.  if (!index)
    13. return ZERO_SIZE_PTR;
    14. 
    15. return kmem_cache_alloc_trace(kmalloc_caches[index], flags, size);
    16. }
    17.#endif
    18. }
    19. return __kmalloc(size, flags);
    20.}
ifndef 是满足的，因为我们可以默认没有使用slob（猜的，因为大多数时候都是slub和slab，其中又以slub居多），所以return
kmem_cache_alloc_trace其实就是open时候调用的，这里是因为常数时候编译器做了一个优化，所以看起来和kmalloc好像不太一样。
好了，open的时候kmalloc了一个大小为64的空间，然后size设置为64，release的时候将会释放这个空间。read和write都会先检查buf指针是不是为NULL，不为NULL再检查大小是否满足要求，之后进行read和write操作，也就是向用户空间写或者读。
ioctl比较特殊，首先判断command是不是为0x10001，如果满足，将会释放之前的buf，新分配一个用户决定大小的空间，并且设置为size。
功能基本上就讲完了，乍一看好像没有漏洞，那是因为用户空间pwn的思维在限制你使用单线程的思维去考虑。如果是多线程呢？
我们假设我们打开了两个设备文件，也就是调用了两次open，第一次分配了，第二次其实将会覆盖第一次分配的buf，因为是全局的。有了这个思维，剩下的就好想了，如果我们release了第一个，第二个其实就已经是被释放过的了，这样，就造成了一个UAF了。
接下来我们就来讨论如何进行提权了，注意，题目是开启了SMEP保护的，从boot.sh中可以看出来。
**2\. 题目思路1.0**
通过我们对slub分配器的了解，相同大小的会被放在一块，现在我们来想想，一个进程的权限，是由什么定的？相信你们都知道，uid，uid又保存在哪儿呢？答案是cred结构。cred结构在每一个进程中都有一个，并且保存了该进程的权限信息，如果我们能够修改到cred信息，那么事情就很简单了。
于是思路是，我们有了一个UAF，使某个进程的cred结构体被放进这个UAF的空间，然后我们能够控制这个cred结构体，通过write写入uid，万事大吉！
问题是，如何控制cred结构？别忘了，**相同大小的会被放在一块**，我们首先通过ioctl改变大小，使得和cred结构大小一样，接下来只需要在触发UAF的时候新建一个cred结构，新建的结构就很有可能被放进这个UAF的空间里，创建方法嘛，每一个进程都有，那么，新建一个进程不就好了？新建进程嘛，fork就解决了。
好了，只剩下一个问题，大小是多少？
方法一：查看源码。因为配置比较多，效率比较低，还容易错。
方法二：编译一个带符号的内核，直接查看。
这里怎么使用方法二就是另外一篇文章的内容了，大概就是编译一个源码，然后去看符号就行了。因为一般这种内核也就是默认编译，所以相对也会比较准确的。
如果查看源码，去掉debug选项，也可以计算出来，大小是0xa8。源码如下：
    1.  struct cred {
    2.  atomic_t usage;
    3.  #ifdef CONFIG_DEBUG_CREDENTIALS
    4.  atomic_t subscribers; /* number of processes subscribed */
    5.  void *put_addr;
    6.  unsigned magic;
    7.  #define CRED_MAGIC 0x43736564
    8. #define CRED_MAGIC_DEAD 0x44656144
    9. #endif
    10. kuid_t uid; /* real UID of the task */
    11. kgid_t gid; /* real GID of the task */
    12. kuid_t suid; /* saved UID of the task */
    13. kgid_t sgid; /* saved GID of the task */
    14. kuid_t euid; /* effective UID of the task */
    15. kgid_t egid; /* effective GID of the task */
    16. kuid_t fsuid; /* UID for VFS ops */
    17. kgid_t fsgid; /* GID for VFS ops */
    18. unsigned securebits; /* SUID-less security management */
    19. kernel_cap_t cap_inheritable; /* caps our children can inherit */
    20. kernel_cap_t cap_permitted; /* caps we're permitted */
    21. kernel_cap_t cap_effective; /* caps we can actually use */
    22. kernel_cap_t cap_bset; /* capability bounding set */
    23. kernel_cap_t cap_ambient; /* Ambient capability set */
    24.#ifdef CONFIG_KEYS
    25. unsigned char jit_keyring; /* default keyring to attach requested keys to */
    26. struct key __rcu *session_keyring; /* keyring inherited over fork */
    27. struct key *process_keyring; /* keyring private to this process */
    28. struct key *thread_keyring; /* keyring private to this thread */
    29. struct key *request_key_auth; /* assumed request_key authority */
    30.#endif
    31.#ifdef CONFIG_SECURITY
    32. void *security; /* subjective LSM security */
    33.#endif
    34. struct user_struct *user; /* real user ID subscription */
    35. struct user_namespace *user_ns; /* user_ns the caps and keyrings are relative to. */
    36. struct group_info *group_info; /* supplementary groups for euid/fsgid */
    37. struct rcu_head rcu; /* RCU deletion hook */
    38.};
对于不是很明确的type可以直接查找reference去查看typedef。同时通过查看源码，我们还轻松的找到了uid等等各种id的位置。那么直接把该改的都改为0就可以了。
方法就很简单了，看看exp吧。
    1.  #include 
    2.  #include 
    3.  #include 
    4.  #include 
    5.  #include 
    6.  #include 
    7.  #include 
    8.  #include 
    9.  #include 
    10.#define CRED_SIZE 168
    11.#define DEV_NAME "/dev/babydev"
    12.char buf[100];
    13.int main() 
    14.{
    15. int fd1, fd2, ret;
    16. char zero_buf[100];
    17. memset(zero_buf, 0, sizeof(char) * 100);