传递给extract()的字符串，必须匹配namelist()返回的字符串列表中的一个。或
者，你可以向 extract()传递第二个参数，将文件解压缩到指定的文件夹，而不是当
前工作目录。如果第二个参数指定的文件夹不存在，Python 就会创建它。extract()
的返回值是被压缩后文件的绝对路径。
9.3.3 创建和添加到 ZIP 文件
要创建你自己的压缩ZIP文件，必须以“写模式”打开ZipFile对象，即传入'w'
作为第二个参数（这类似于向open()函数传入'w'，以写模式打开一个文本文件）。
如果向 ZipFile 对象的 write()方法传入一个路径，Python 就会压缩该路径所指
的文件，将它加到 ZIP 文件中。write()方法的第一个参数是一个字符串，代表要添
加的文件名。第二个参数是“压缩类型”参数，它告诉计算机使用怎样的算法来压
缩文件。可以总是将这个值设置为 zipfile.ZIP_DEFLATED（这指定了 deflate 压缩
算法，它对各种类型的数据都很有效）。在交互式环境中输入以下代码：
>>> import zipfile
>>> newZip = zipfile.ZipFile('new.zip', 'w')
>>> newZip.write('spam.txt', compress_type=zipfile.ZIP_DEFLATED)
>>> newZip.close()
164 Python编程快速上手——让繁琐工作自动化
这段代码将创建一个新的ZIP文件，名为new.zip，它包含spam.txt压缩后的内容。
要记住，就像写入文件一样，写模式将擦除ZIP文件中所有原有的内容。如果
只是希望将文件添加到原有的 ZIP 文件中，就要向 zipfile.ZipFile()传入'a'作为第二
个参数，以添加模式打开ZIP文件。
9.4 项目：将带有美国风格日期的文件改名为欧洲风格日期
假定你的老板用电子邮件发给你上千个文件，文件名包含美国风格的日期
（MM-DD-YYYY），需要将它们改名为欧洲风格的日期（DD-MM-YYYY）。手工 完
成这个无聊的任务可能需要几天时间！让我们写一个程序来完成它。
下面是程序要做的事：
• 检查当前工作目录的所有文件名，寻找美国风格的日期。
• 如果找到，将该文件改名，交换月份和日期的位置，使之成为欧洲风格。
这意味着代码需要做下面的事情：
• 创建一个正则表达式，可以识别美国风格日期的文本模式。
• 调用os.listdir()，找出工作目录中的所有文件。
• 循环遍历每个文件名，利用该正则表达式检查它是否包含日期。
• 如果它包含日期，用shutil.move()对该文件改名。
对于这个项目，打开一个新的文件编辑器窗口，将代码保存为renameDates.py。
第1步：为美国风格的日期创建一个正则表达式
程序的第一部分需要导入必要的模块，并创建一个正则表达式，它能识别
MM-DD-YYYY 格式的日期。TODO 注释将提醒你，这个程序还要写什么。将它们作
为TODO，就很容易利用IDLE的Ctrl-F查找功能找到它们。让你的代码看起来像这样：
#! python3
# renameDates.py - Renames filenames with American MM-DD-YYYY date format
# to European DD-MM-YYYY.
 import shutil, os, re
# Create a regex that matches files with the American date format.
 datePattern = re.compile(r"""^(.*?) # all text before the date
((0|1)?\d)- # one or two digits for the month
((0|1|2|3)?\d)- # one or two digits for the day
((19|20)\d\d) # four digits for the year
(.*?)$ # all text after the date
 """, re.VERBOSE)
# TODO: Loop over the files in the working directory.
# TODO: Skip files without a date.
# TODO: Get the different parts of the filename.
第9章 组织文件 165
# TODO: Form the European-style filename.
# TODO: Get the full, absolute file paths.
# TODO: Rename the files.
通过本章，你知道 shutil.move()函数可以用于文件改名：它的参数是要改名的文件
名，以及新的文件名。因为这个函数存在于shutil模块中，所以你必须导入该模块。
在为这些文件改名之前，需要确定哪些文件要改名。文件名如果包含
spam4-4-1984.txt和01-03-2014eggs.zip这样的日期，就应该改名，而文件名不包含
日期的应该忽略，诸如littlebrother.epub。
可以用正则表达式来识别该模式。在开始导入 re 模块后，调用 re.compile()创
建一个Regex对象。传入re.VERBOSE作为第二参数，这将在正则表达式字符
串中允许空白字符和注释，让它更可读。
正则表达式字符串以^(.*?)开始，匹配文件名开始处、日期出现之前的任何文本。
((0|1)?\d)分组匹配月份。第一个数字可以是0或1，所以正则表达式匹配12，作为
十二月份，也会匹配 02，作为二月份。这个数字也是可选的，所以四月份可以是
04或4。日期的分组是((0|1|2|3)?\d)，它遵循类似的逻辑。3、03和31是有效的日期
数字（是的，这个正则表达式会接受一些无效的日期，诸如 4-31-2014、2-29-2013
和 0-15-2014。日期有许多特例，很容易被遗漏。为了简单，这个程序中的正则表
达式已经足够好了）。
虽然 1885 是一个有效的年份，但你可能只在寻找 20 世纪和 21 世纪的年份。
这防止了程序不小心匹配非日期的文件名，它们和日期格式类似，诸如
10-10-1000.txt。
正则表达式的(.*?)$部分，将匹配日期之后的任何文本。
第2步：识别文件名中的日期部分
接下来，程序将循环遍历os.listdir()返回的文件名字符串列表，用这个正则表达
式匹配它们。文件名不包含日期的文件将被忽略。如果文件名包含日期，匹配的文
本将保存在几个变量中。用下面的代码代替程序中前3个TODO：
#! python3
# renameDates.py - Renames filenames with American MM-DD-YYYY date format
# to European DD-MM-YYYY.
--snip--
# Loop over the files in the working directory.
for amerFilename in os.listdir('.'):
mo = datePattern.search(amerFilename)
# Skip files without a date.
 if mo == None:
166 Python编程快速上手——让繁琐工作自动化
 continue
 # Get the different parts of the filename.
beforePart = mo.group(1)
monthPart = mo.group(2)
dayPart = mo.group(4)
yearPart = mo.group(6)
afterPart = mo.group(8)
- -snip--
如果search()方法返回的Match对象是None，那么amerFilename中的文件名
不匹配该正则表达式。continue语句将跳过循环剩下的部分，转向下一个文件名。
否则，该正则表达式分组匹配的不同字符串，将保存在名为 beforePart、
monthPart、dayPart、yearPart和afterPar的变量中。这些变量中的字符串将在下一
步中使用，用于构成欧洲风格的文件名。
为了让分组编号直观，请尝试从头阅读该正则表达式，每遇到一个左括号就计数加
一。不要考虑代码，只是写下该正则表达式的框架。这有助于使分组变得直观，例如：
datePattern = re.compile(r"""^(1) # all text before the date
(2 (3) )- # one or two digits for the month
(4 (5) )- # one or two digits for the day
(6 (7) ) # four digits for the year
(8)$ # all text after the date
""", re.VERBOSE)
这里，编号1至8代表了该正则表达式中的分组。写出该正则表达式的框架，
其中只包含括号和分组编号。这让你更清楚地理解所写的正则表达式，然后再转向
程序中剩下的部分。
第3步：构成新文件名，并对文件改名
作为最后一步，连接前一步生成的变量中的字符串，得到欧洲风格的日期：日
期在月份之前。用下面的代码代替程序中最后3个TODO：
#! python3
# renameDates.py - Renames filenames with American MM-DD-YYYY date format
# to European DD-MM-YYYY.
--snip--
# Form the European-style filename.
 euroFilename = beforePart + dayPart + '-' + monthPart + '-' + yearPart +
afterPart
# Get the full, absolute file paths.
absWorkingDir = os.path.abspath('.')
amerFilename = os.path.join(absWorkingDir, amerFilename)
euroFilename = os.path.join(absWorkingDir, euroFilename)
# Rename the files.
 print('Renaming "%s" to "%s"...' % (amerFilename, euroFilename))
 #shutil.move(amerFilename, euroFilename) # uncomment after testing
第9章 组织文件 167
将连接的字符串保存在名为euroFilename的变量中。然后将 amerFilename中
原来的文件名和新的euroFilename变量传递给shutil.move()函数，将该文件改名。
这个程序将 shutil.move()调用注释掉，代之以打印出将被改名的文件名。先
像这样运行程序，你可以确认文件改名是正确的。然后取消 shutil.move()调用的注
释，再次运行该程序，确实将这些文件改名。
第4步：类似程序的想法
有很多其他的理由，导致你需要对大量的文件改名。
• 为文件名添加前缀，诸如添加spam_，将eggs.txt改名为spam_eggs.txt。
• 将欧洲风格日期的文件改名为美国风格日期。
• 删除文件名中的0，诸如spam0042.txt。
9.5 项目：将一个文件夹备份到一个 ZIP 文件
假定你正在做一个项目，它的文件保存在C:\AlsPythonBook文件夹中。你担心工作
会丢失，所以希望为整个文件夹创建一个ZIP文件，作为“快照”。你希望保存不同的版
本，希望 ZIP 文件的文件名每次创建时都有所变化。例如 AlsPythonBook_1.zip、
AlsPythonBook_2.zip、AlsPythonBook_3.zip，等等。你可以手工完成，但这有点烦人，
而且可能不小心弄错ZIP文件的编号。运行一个程序来完成这个烦人的任务会简单得多。
针对这个项目，打开一个新的文件编辑器窗口，将它保存为backupToZip.py。
第1步：弄清楚ZIP 文件的名称
这个程序的代码将放在一个名为backupToZip()的函数中。这样就更容易将该函
数复制粘贴到其他需要这个功能的Python程序中。在这个程序的末尾，会调用这个
函数进行备份。让你的程序看起来像这样：
#! python3
# backupToZip.py - Copies an entire folder and its contents into
# a ZIP file whose filename increments.
 import zipfile, os
def backupToZip(folder):
# Backup the entire contents of "folder" into a ZIP file.
folder = os.path.abspath(folder) # make sure folder is absolute
# Figure out the filename this code should use based on
# what files already exist.
 number = 1
 while True:
zipFilename = os.path.basename(folder) + '_' + str(number) + '.zip'
if not os.path.exists(zipFilename):
168 Python编程快速上手——让繁琐工作自动化
break
number = number + 1
 # TODO: Create the ZIP file.
# TODO: Walk the entire folder tree and compress the files in each folder.
print('Done.')
b ackupToZip('C:\\delicious')
先完成基本任务：添加#!行，描述该程序做什么，并导入zipfile和os模块。
定义backupToZip()函数，它只接收一个参数，即folder。这个参数是一个字符
串路径，指向需要备份的文件夹。该函数将决定它创建的ZIP文件使用什么文件名，
然后创建该文件，遍历folder文件夹，将每个子文件夹和文件添加到ZIP文件中。
在源代码中为这些步骤写下TODO注释，提醒你稍后来完成。
第一部分命名这个ZIP文件，使用folder的绝对路径的基本名称。如果要备份
的文件夹是C:\delicious，ZIP文件的名称就应该是delicious_N.zip，第一次运行该程
序时N=1，第二次运行时N=2，以此类推。
通过检查delicious_1.zip是否存在，然后检查delicious_2.zip是否存在，继续下
去，可以确定 N 应该是什么。用一个名为 number 的变量表示 N，在一个循环内
不断增加它，并调用os.path.exists()来检查该文件是否存在。第一个不存在的文件
名将导致循环break，因此它就发现了新ZIP文件的文件名。
第2步：创建新ZIP 文件
接下来让我们创建ZIP文件。让你的程序看起来像这样：
#! python3
# backupToZip.py - Copies an entire folder and its contents into
# a ZIP file whose filename increments.
--snip--
while True:
zipFilename = os.path.basename(folder) + '_' + str(number) + '.zip'
if not os.path.exists(zipFilename):
break
number = number + 1
# Create the ZIP file.
print('Creating %s...' % (zipFilename))
 backupZip = zipfile.ZipFile(zipFilename, 'w')
# TODO: Walk the entire folder tree and compress the files in each folder.
print('Done.')
b ackupToZip('C:\\delicious')
既然新 ZIP 文件的文件名保存在 zipFilename 变量中，你就可以调用
zipfile.ZipFile()，实际创建这个ZIP文件。确保传入'w'作为第二个参数，这样ZIP
第9章 组织文件 169
文件以写模式打开。
第3步：遍历目录树并添加到ZIP 文件
现在需要使用os.walk()函数，列出文件夹以及子文件夹中的每个文件。让你的
程序看起来像这样：
#! python3
# backupToZip.py - Copies an entire folder and its contents into
# a ZIP file whose filename increments.