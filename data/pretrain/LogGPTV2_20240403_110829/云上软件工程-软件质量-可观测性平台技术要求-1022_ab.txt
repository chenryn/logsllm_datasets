要求：
业务系统各个环节支持请求的标识方案
组件提供可观测性的标准化集成
1)对于基础设施，系统，容器等基础环境提供相关指标和日志1)对于基础设施，系统，容器等基础环境提供相关指标和日志
2)对于中间件，数据库，如MySQL，Kafka等提供相关的指标和日志
3)应用程序发布者提供指标，日志，链路的可观测性方案，如指标提供Prometheus Exporter方式的输出，标准化日志数据模型，自带基于OpenTelemetry协议的链路追踪暴露。
4)端应用（H5，小程序，Android，IOS，win/mac客户端，IOT终端）提供相应的指标和日志以及追踪
5)支持导入复杂的业务指标
观测指标
1) 基础通用指标，服务或平台基础性通用指标，如性能类；
2) 服务特性指标，服务或平台特有的属性描述指标，如业务充值数、流失数、访问失败率
3) 其他分类指标，其它更多用户自定义指标。
4) 日志指标化，可以将日志的数据提取为指标
5）Trace指标化，可以将Traces的数据提取为指标
平台运维支撑能力要求平台运维支撑能力要求
运维支撑部分是指对可观测平台自身系统运维能力的要求。
容器化支持
描述：可观测系统可以部署到容器环境，支持k8s编排，增加服务的可用性，提升系统自身的运维效率
要求：
1.支持模块微服务容器化部署；
2.支持Kubernetes容器编排；
弹性伸缩
描述：根据可观测性系统的负载情况可以动态的增加集群资源或者减少资源做到扩容和缩容。
要求：
1.支持资源水平扩展与伸缩。
2.支持在固定时间内完成资源的伸缩。
3.支持扩容后节点负载的均衡。
高可用性
描述：描述可观测性系统无故障运行的时间比、容灾策略等。
要求：架构应具备容灾能力，系统内任何单实例故障，不影响系统核心功能和体验。
1.	应具备容灾能力，在服务出现问题时，可以在规定时间内在模块层面实现平滑的容灾处理。
2.应支持多种容灾能力、高可用架构策略。
日志管理2.应支持多种容灾能力、高可用架构策略。
日志管理
描述：提供日志管理功能，记录可观测性系统运行过程中生成日志文件，包括运行信息、传输的数据包和文件信息、系统错误等。日志可用于系统的运行状态监控，通过对日志的实时采集、分析、展示等，便于自监控分析。
要求：系统运行输出完善的运行状态日志
1.提供平台日志查询和管理功能。
2.支持日志收集、检索、聚合、分析展示功能。
3.应保障日志采集的完整性，通过跟踪日志文件状态日志落盘等方式，防止Agent故障重启后的数据丢失。
数据异地灾备
描述：支持监控数据在多个集群间备份的能力。
要求：支持数据异地灾备能力。
操作系统与处理器适配
1)支持包括Windows，Linux，甚至嵌入式的RTOS
2)支持x86，amd64，arm，arm64，risc，AIX等硬件环境
平台安全能力要求
可观测性系统采集了大量的业务信息，信息安全保障是平台需要提供的重要基础能力之一，本节定义了可观测性系统安全相关内容。身份认证
描述：身份认证是采集端与服务端连接时进行身份认证，实现对推拉权限控制， 以及对外提供服务的界面、功能、API鉴权。
要求：
1.应支持SSL（通道加密）、SASL等身份认证机制。
2.应对用户进行身份标识和鉴别。
3.应具有权限控制功能，支持推拉数据权限的配置。
数据加密
描述：通过在数据层、网络传输层提供加密功能对重要或敏感数据进行加密处理来保证metrics和logs数据传输的安全。 
要求：应支持传输通道加密。
应通过技术手段对所集指标数据、日志文件、告警数据等进行完整性保护。
开放API供外部系统集成，如：
服务网格可集成可观测平台遥测
kubernetes集成可观测平台实现弹性伸缩
serverless集成可观测平台实现事件触发
GitOps集成可观测平台实现代码控制采集告警配置
测试平台集成……
技术风险平台集成……
性能项要求
描述不同应用场景下的性能需求，性能可参考以下指标：性能项要求
描述不同应用场景下的性能需求，性能可参考以下指标：
Agent采集器性能相关指标
资源占用比消耗
占用情况包含采集器cpu数量占用情况(百分比),内存大小(MB),磁盘占用情况(MB大小，网络带宽 
采集时效性
在一定的监控应用数量和度量及日志量前提下，从数据出现到数据上报的延迟,毫秒(ms)
端处理能力
同时监控多少个点(个),  每秒处理多少日志 (MB)，需满足资源占用比和采集时效性 
服务端写入相关性能指标
指标类写入性能
-在一定的资源规模下每秒能插入多少个数据点; 
日志类写入性能
-在一定的资源规模下每秒能插入多少行日志;
存储相关性能指标
数据压缩比
-在一定的资源规模下存储之后的数据量大小 / 数据源的数据大小 
查询相关性能
查询并发
-在一定的资源规模下同时进行查询的请求数Qps
查询返回时间
-在一定的资源规模下单次查询的返回时间Ms查询返回时间
-在一定的资源规模下单次查询的返回时间Ms
查询处理范围
-在一定的资源规模下能查询多久的数据
告警预警性能
告警的时效性
-在一定的资源规模下故障出现到告警的延迟
告警预警有效性
-在一定的资源规模下的误报率
吞吐量
指标：吞吐量指在指定并发数和数据量的前提下，服务端单位时间内处理的metrics和logs数据量。 
描述：在指定metrics和logs量和资源数前提下，测试可观测性系统在不同场景下的吞吐量，同时确保在高延迟网络状态下仍能保持较高的吞吐量。
时延
指标：从采集端把数据发送到服务端，完成各项策略适配后，最终落库存储、发出告警、完成展示的整个过程消耗的时间。
描述：在指定metrics和logs量和资源数前提下，测试可观测性系统的请求响应时延，如数据推送时延、数据处理时延、数据告警时延、数据通知时延、数据展示时延。
可观测性应用场景
诊断能力要求可观测性应用场景
诊断能力要求
诊断能力是在数据能力的基础上，构建数据智能应用的能力。诊断能力贯穿了故障的发现（异常检测、故障预测）、触达（告警关联收敛、告警分级、告警升级/降级、告警排班等）、故障分析（根源分析、根因分析，关联搜索分析）、故障修复的全流程，核心的应用场景包括异常的检测、告警的触达与可执行性、分析（根源分析、根因分析）、故障恢复能力。
故障发现
异常检测
描述：异常检测是诊断的前提、只有准确可靠的发现异常，后续才能对异常进行分析。 
要求：
-- 检测架构能力、数据粒度能力
-- 检测方法
-- 检测效果
初级-支持人工规则检测的能力。
支持专家经验/模板在某些场景中的复用。
中级-具备一定的统计分析算法检测能力，在一部分场景下，取得很好的业务效果。
具备构建数据集的机制和能力，可以逐步的收集业务中各种形态的数据集，供模型使用。
高级-具备高级的智能算法检测能力，同时检测准确率召回率都已经达到90%以上。高级-具备高级的智能算法检测能力，同时检测准确率召回率都已经达到90%以上。 
适配各种不同的应用场景，比如应用运行时、发布状态等，都可以达到很好的检测效果。
同时系统可具备收集反馈的能力，支持自适应的模型迭代升级。
故障触达
发现的问题，需要有效的触达到需要关注的开发/运维人员。缺少了有效的触达，往往形成监而不控的局面， 最后告警质量变差、数量变多，没人关注。
告警收敛
描述： 检测不合理导致告警过多，或者发生大范围的故障，都会导致告警量过多，甚至形成高精风暴。 
要求：
-- 收敛的方式
-- 告警的关联能力
初级- 支持针对时间、或者其他关键字，在用户设定后，进行简单合并。
中级- 在人工规则的基础上，有一些简单算法进行收敛的场景应用。专家经验逐步沉淀到告警收敛的规则库。
高级- 依托数据和算法、可以自适应的挖掘相关性进行收敛。同时收敛后，将相关/相似的收敛后，可以进一步挖掘出其中的规律和相关，给用户提供更多的告警相关信息。告警分级
描述：分级可以帮助更严重的故障得到更多的关注， 避免严重故障淹没在大量告警中，酿成大的事故。
要求：
-- 分级方式
-- 场景覆盖度
初级- 在配置告警策略时，支持用户配置告警的策略级别。
中级- 在1-2种特定场景下，已经支持算法自动挖掘出告警级别， 并在业务上取得比较好的效果。
高级- 基于指标、日志和链路的多数据联动和告警处理反馈，支持全部场景的自动告警分级。 同时模型支持自适应的优化升级，不断提供更好的分级效果。
告警协同
描述：发现的问题，需要有效的触达到需要关注的开发/运维人员。缺少了有效的触达，往往形成监而不控的局面， 最后告警慢慢失效，没人关注。  
要求：
-- 告警的关联收敛能力
-- 告警的排班、升级/降级、多种通知渠道等
故障分析
根因分析
描述：根因分析则是整个智能诊断最核心的部分，有效的根因分析，可以快速的定位到故障原因，从而可以帮助运维人员有效的解决故障。要求：
-- 应用的数据类型和范围
-  分析给出的程度：定位到应用层级，还是近一步缩小范围到代码段、中间件等
-- 定位时长和效果
初级- 依赖简单的数据统计分析、对比分析能力结合人工经验探判断故障根因。
中级- 部分场景已经开始有算法能力的参与。基于算法辅助，人工为主进行一些简单场景的根因分析，同时，专家经验逐步沉淀，有故障库的建设机制。
高级- 根因分析技术进一步丰富，例如：支持多维时间序列分析、告警关联分析、调用链路分析等多种方式，同时算法可以在多种场景、甚至跨场景实现智能化的完成根因分析任务。不仅给出具备可解释性的根因，还需要给出解决的建议帮助。
故障恢复
描述：故障的恢复则对应了诊断的最后一步—决策。 
要求：
-- 自动化能力：包括自动化脚本的能力，以及和各种平台集成的能力
-- 决策能力
-- 决策效果
初级-基于故障的告警事件、指标、日志等数据联动展示，运维人员根据信息的排查，可以找到故障的原因。中级-基于对故障的诊断分析，原有的流程化排查信息已经沉淀成自动化/智能化流程，自动的给出排障链路， 运维人员可以快速的发现导致故障的原因。 同时在平台给出的建议下，便捷的进行故障恢复的操作。 
高级-系统通过智能化的诊断，具备自动的故障恢复能力。 无需人工或少许人工的辅助，可以完成故障的修复工作。 同时修复经验进一步沉淀，支持系统的持续迭代升级。
根因分析