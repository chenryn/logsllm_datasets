}
sub vcl_hit {
if (req.request == "PURGE") {
# Note that setting ttl to 0 is magical.
# the object is zapped from cache.
set obj.ttl = 0s;
error 200 "Purged.";
}
}
sub vcl_miss {
if (req.request == "PURGE") {
error 404 "Not in cache.";
}
}
您可以看见，使用了新的VCL子程序，vcl_hit和vcl_miss。当您调用lookup时将在
缓存中查找目标，结果只会是miss或者hit，然后对应的子程序就会被调用，如果vcl_hit
的目标存储在缓存中，并且可用，我们可以修改TTL值。
所以对于vg.no 的无效首页，他们使用varnish做如下处理：
PURGE / HTTP/1.0
Host: vg.no
如果varnish想要丢弃主页，如是很多相同URL的变体在cache中，只有匹配的变
体才会被清除。清除一个相同页面的gzip变体可以使用下面命令：
PURGE / HTTP/1.0
Host: vg.no
Accept-Encoding: gzip
Bans
这是另外一种清空无效内容的方法，bans。您可以认为 bans 是一种过滤方法，您
可以禁止某些存在cache中存在的数据。您可以基于我们拥有的元数据来禁止。
Varnish内置的CLI接口就是支持bans的。禁止vg网站上的所有png目标代码如下：
purge req.http.host == "vg.no" && req.http.url ~ "\.png$"
是不是很强大？
在没有被 bans 命中之前的 cache，是能够提供服务的。一个目标只被最新的
bans检查。如果您有很多长TTL的目标在缓存中，您需要知道执行很多的Bans对性能
照成的影响。
您也可以在varnish中添加bans，这样做需要一点VCL：
17
www.linuxidc.com
sub vcl_recv {
if (req.request == "BAN") {
# Same ACL check as above:
if (!client.ip ~ purge) {
error 405 "Not allowed.";
}
purge("req.http.host == " req.http.host
"&& req.url == " req.url);
# Throw a synthetic page so the
# request wont go to the backend.
error 200 "Ban added"
}
}
这是一个实用varnish的VCL处理ban的方法。添加一个ban在URL上，包含它的
主机部分。
●advanced backend configuration（后端服务器高级配
置）
在某些时刻您需要 varnish 从多台服务器上缓存数据。您可能想要 varnish 映射所有的
URL到一个单独的主机或者不到这个主机。这里很多选项。
我们需要引进一个java程序进出php的web站点。假如我们的java程序使用的URL开
始于/JAVA/
我们让它运行在8000端口，现在让我们看看默认的default.vcl：
backend default {
.host = "127.0.0.1";
.port = "8080";
}
我们添加一个新的backend：
backend java {
.host = "127.0.0.1";
.port = "8000";
}
现在我们需要告诉特殊的URL被发送到哪里：
sub vcl_recv {
if (req.url ~ "^/java/") {
set req.backend = java;
} else {
set req.backend = default.
}
}
18
www.linuxidc.com
这真的很简单，让我们停下来并思考一下。正如您所见，可以通过任意的后端来选
择您要的数据。您想发送移动设备的请求到不同的后端？没问题
if (req.User-agent ~ /mobile/) .... \\这样做应该就可以成功。
●Directors
您可以把多台 backends 聚合成一个组，这些组被叫做 directors。这样可以增强性
能和弹力。您可以定义多个backends和多个group在同一个directors。
backend server1 {
.host = "192.168.0.10";
}
backend server2{
.host = "192.168.0.10";
}
现在我们创建一个director：
director example_director round-robin {
{
.backend = server1;
}
# server2
{
.backend = server2;
}
# foo
}
这个 director 是一个循环的 director。它的含义就是 director 使用循环的方式把
backends分给请求。
但是如果您的一个服务器宕了？varnish 能否指导所有的请求到健康的后端？当然
可以，这就是健康检查在起作用了。
●Health checks(健康检查)
让我们设置一个director和两个后端，然后加上健康检查：
backend server1 {
.host = "server1.example.com";
.probe = {
.url = "/";
.interval = 5s;
.timeout = 1 s;
.window = 5;
.threshold = 3;
}
}
19
www.linuxidc.com
backend server2 {
.host = "server2.example.com";
.probe = {
.url = "/";
.interval = 5s;
.timeout = 1 s;
.window = 5;
.threshold = 3;
}
}
这些新的就是探针，varnish将检查通过探针检查每个后端服务器是否健康：
url \\哪个url需要varnish请求。
Interval \\检查的间隔时间
Timeout \\等待多长时间探针超时
Window \\varnish将维持5个sliding window的结果
Threshold \\至少有3次.windows检查是成功的，就宣告backends健康
现在我们定义director：
director example_director round-robin {
{
.backend = server1;
}
# server2
{
.backend = server2;
}
}
您的站点在您需要的时候使用这个director，varnish不会发送流量给标志为不健康
的主机。如果所有的 backends 都宕掉了，varnish 可以照常服务。参照“Misbehaving
servers”获得更多的信息。
● Misbehaving servers（服务器停止运转）
Varnish的一个关键特色就是它有能力防御web和应用服务器宕机。
Grace mode
当几个客户端请求同一个页面的时候，varnish只发送一个请求到后端服务器，
然后让那个其他几个请求挂起等待返回结果，返回结果后，复制请求的结果发送给客户
端。
如果您的服务每秒有数千万的点击率，那么这个队列是庞大的，没有用户喜欢
等待服务器响应。为了使用过期的cache给用户提供服务，我们需要增加他们的TTL，
保存所有cache中的内容在TTL过期以后30分钟内不删除，使用以下VCL：
sub vcl_fetch {
set beresp.grace = 30m;
20
www.linuxidc.com
}
Varnish 还不会使用过期的目标给用户提供服务，所以我们需要配置以下代码，在
cache过期后的15秒内，使用旧的内容提供服务：
sub vcl_recv {
set req.grace = 15s;
}
你会考虑为什么要多保存过去的内容30分钟？当然，如果你使用了健康检查，你
可以通过健康状态设置保存的时间：
if (! req.backend.healthy) {
set req.grace = 5m;
} else {
set req.grace = 15s;
}
Saint mode
有时候，服务器很古怪，他们发出随机错误，您需要通知 varnish 使用更加优雅的
方式处理它，这种方式叫神圣模式（saint mode）。Saint mode允许您抛弃一个后端服务器或
者另一个尝试的后端服务器或者cache中服务陈旧的内容。让我们看看VCL中如何开启这个
功能的：
sub vcl_fetch {
if (beresp.status == 500) {
set beresp.saintmode = 10s;
restart;
}
set beresp.grace = 5m;
}
当我们设置 beresp.saintmode 为10 秒，varnish在 10 秒内将不会访问后端服务器
的这个 url。如果有一个备用列表，当重新执行此请求时您有其他的后端有能力提供此服务
内容，varnish会尝试请求他们，当您没有可用的后端服务器，varnish将使用它过期的cache
提供服务内容。
它真的是一个救生员。
God mode
还未应用。
●advanced topics（重要的话题）
这里指南涵盖所有 varnish 基本的东西。如果您熟读上面的内容，您现在已经可以使用
varnish。
下面是一个简单的概括，没有完全覆盖指南。
More VCL
VCL是一个比较复杂的，我们已经讨论至今。这里还有很多可用的子程序和一些动
作我们没有讨论。关于完整的VCL手册，请参见man page。
Using Inline C to extend Varnish
21
www.linuxidc.com
使用内置的C 延伸varnish，如果您在varnish 使用这种方法要小心，c语言运行在
varnish内部，如果您的c语言有问题，那么varnish可能会宕掉。
首先使用C语言记录日志到syslog：
# The include statements must be outside the subroutines.
C{
#include 
}C
sub vcl_something {
C{
syslog(LOG_INFO, "Something happened at VCL line XX.");
}C
}
Edge side Includes
Varnish 可以在 cache 中创建一个 web 页面和其他页面不放在一起，这个片段有个
特殊的缓存策略，如果您的网站有一个列表显示您最受欢迎的5篇文章。如果您的网站
有这个页面，您可以制造一个缓存包括其他所有的页面。使用得当，可以大大提高您的
命中率，减少对服务器的负载。ESI代码如下：
The time is: 
at this very moment.
在vcl_fetch中使用esi关键字：
sub vcl_fetch {
if (req.url == "/test.html") {
esi; /* Do ESI processing */
}
}
●Troubleshooting varnish（varnish 排错）
有时候 varnish 会出错，为了使您知道该检查哪里，您可以检查 varnishlog，
/var/log/syslog/,var/log/messages 这里可以发现一些信息，知道varnish怎么了。
When varnish won’t start
有些时候，varnish不能启动。这里有很多varnish不能启动的原因，通常我们可以
观看/dev/null的权限和是否其他软件占用了端口。
使用debug模式启动varnish，然后观看发生了什么：
varnishd -f /usr/local/etc/varnish/default.vcl -s malloc,1G -T 127.0.0.1:2000 -a
0.0.0.0:8080 –d
提示-d 选项，它将给您更多的信息关于接下来发生了什么。让我们看看如果其他
22
www.linuxidc.com
程序暂用了varnish的端口，它将显示什么：
# varnishd -n foo -f /usr/local/etc/varnish/default.vcl -s malloc,1G -T 127.0.0.1:2000
-a 0.0.0.0:8080 -d
storage_malloc: max size 1024 MB.
Using old SHMFILE
Platform: Linux,2.6.32-21-generic,i686,-smalloc,-hcritbit
200 193
-----------------------------
Varnish HTTP accelerator CLI.
-----------------------------
Type 'help' for command list.
Type 'quit' to close CLI session.
Type 'start' to launch worker process.
现在 varnish 的主程序已经运行，在 debug 模式中，cache 现在还没有启动，现在
您在终端中使用“start”命令来让主程序开启cache功能
start
bind(): Address already in use
300 22
Could not open sockets
在这里，我们发现一个问题。Varnish要使用的端口被HTTP使用了。
Varnish is creashing
当varnish宕掉的时候。
Varnish gives me guru mediation
首先查找varnishlog，这里可能会给您一些信息。
Varnish doesn’t cache
请参考“提高命中率”这章。
三、Varnish 参考手册
●VCL（varnish configuration language）
Author: Dag-Erling Smørgrav
Author: Poul-Henning Kamp
Author: Kristian Lyngstøl
Author: Per Buer
Date: 2010-06-02
Version: 1.0
Manual section: 7
DESCRIPTION描述
23
www.linuxidc.com
VCL语言是varnish （HTTP加速器）的一种限定域语言，目的在于规定请求的处理
和内容的缓存策略。
当一个新的配置文件被加载，varnish管理进程把vcl转换成c代码，然后编译成动
态共享库连接到服务器进程。
SYNTAX语法
VCL 的语法相当简单，和 c，perl 相似。使用花括号做界定符，使用分号表示声明
结束。注释和C、C++、perl语法一样，你可以自己选择。
除此之外还类似c语法，比如赋值（=）、比较（==）、和一些布尔值（！、&&、||），
VCL支持正则表达式，ACL匹配使用 ~ 操作。
不同于C和perl的地方，反斜杠（\）在VCL中没有特殊的含义。只是用来匹配URLs，
所以没有反斜线，请大家自由使用正则表达式。
把所有的字符串都连接在一起，并不对他们做任何操作。
分配和介绍设置关键字，VCL 没有用户定义的变量，只能给 backend、请求、内容
这些目标的变量赋值，这些内容大部分是手工输入得，而且给这些变量分配值的时候，
必须有一个VCL兼容的单位
VCL有if测试，但是没有循环。
Backend declarations（声明backend）
一个backend申明创建和初始化一个backend目标：
backend www {
.host = "www.example.com";
.port = "http";
}
一个请求可以选着一个Backend：
if (req.http.host ~ "^(www.)?example.com$") {
set req.backend = www;