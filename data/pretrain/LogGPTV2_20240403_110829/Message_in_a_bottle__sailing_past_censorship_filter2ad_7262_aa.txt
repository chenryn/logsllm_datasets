title:Message in a bottle: sailing past censorship
author:Luca Invernizzi and
Christopher Kruegel and
Giovanni Vigna
Message In A Bottle: Sailing Past Censorship
Luca Invernizzi
UC Santa Barbara
California, USA
PI:EMAIL
Christopher Kruegel
UC Santa Barbara
California, USA
PI:EMAIL
Giovanni Vigna
UC Santa Barbara
California, USA
PI:EMAIL
ABSTRACT
Exploiting recent advances in monitoring technology and the drop
of its costs, authoritarian and oppressive regimes are tightening
the grip around the virtual lives of their citizens. Meanwhile,
the dissidents, oppressed by these regimes, are organizing online,
cloaking their activity with anti-censorship systems that typically
consist of a network of anonymizing proxies. The censors have
become well aware of this, and they are systematically finding
and blocking all the entry points to these networks. So far, they
have been quite successful. We believe that, to achieve resilience
to blocking, anti-censorship systems must abandon the idea of
having a limited number of entry points. Instead, they should
establish first contact in an online location arbitrarily chosen
by each of their users. To explore this idea, we have developed
Message In A Bottle, a protocol where any blog post becomes a
potential “drop point” for hidden messages. We have developed
and released a proof-of-concept application of our system, and
demonstrated its feasibility. To block this system, censors are
left with a needle-in-a-haystack problem: Unable to identify what
bears hidden messages, they must block everything, effectively
disconnecting their own network from a large part of the Internet.
This, hopefully, is a cost too high to bear.
Keywords
Censorship Resistance, Deniable Communications, Steganography
1.
INTRODUCTION
The revolutionary wave of protests and demonstrations known
as the Arab Spring rose in December 2010 to shake the foundations
of a number of countries (e.g., Tunisia, Libya, and Egypt), and
showed the Internet’s immense power to catalyze social awareness
through the free exchange of ideas. This power is so threatening
to repressive regimes that censorship has become a central point in
their agendas: Regimes have been investing in advanced censoring
technologies [43], and even resorted to a complete isolation from
the global network in critical moments [14]. For example, Pakistan
recently blocked Wikipedia, YouTube, Flickr, and Facebook [2],
and Syria blocked citizen-journalism media sites [51].
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee. Request permissions from Permissions@acm.org.
ACSAC ’13 December 09-13, 2013, New Orleans, LA, USA
Copyright 2013 ACM 978-1-4503-2015-3/13/12 ...$15.00.
To sneak by the censorship, the dissident populations have re-
sorted to technology. A report from Harvard’s Center for Internet
& Society [44] shows that the most popular censorship-avoidance
vectors are web proxies, VPNs, and Tor [17]. These systems share
a common characteristic: They have a limited amount of entry
points. Blocking these entry points, and evading the block, has
become an arms race: Since 2009, China is enumerating and
banning the vast majority of Tor’s bridges [57]. In 2012, Iran
took a more radical approach and started blocking encrypted
traffic [54], a move that Tor countered the same day by deploying
a new kind of traffic camouflaging [53].
In this paper, we take a step back and explore whether it is
possible to design a system with so many available entry points
that it is impervious to blocking, without disconnecting from the
global network.
Let’s generalize the problem at hand with the help of Alice,
a dissident who lives in the oppressed country of Tyria. Alice
wants to establish, for the first time, a confidential communication
with Bob, who lives outside the country. To use any censorship-
resistant protocol, Alice must know something about Bob, and
how to bootstrap the protocol. In the case of anonymizing proxies
or onion-routing/mix networks (e.g., Tor), Alice needs the address
of at least one of the entry points into the network, and Bob’s
address. Also, to achieve confidentiality, Alice needs Bob’s public
key, or something equivalent to that. In protocols that employ
steganography to hide messages in files uploaded to media-hosting
sites (such as Collage [12]) or in network traffic (such as Telex [62]),
Alice must know the location of the first rendezvous point, and
Bob’s public key1.
The fact that Alice needs to know this information inevitably
means that the censor can learn it too (as he might pose as
Alice). Bob cannot avoid this, without having some way to
distinguish Alice from the censor (but this becomes a chicken-
and-egg problem: How did Bob come to know that, since he
never had any confidential communication with Alice before?).
We believe that this initial something that Alice must know is a
fundamental weakness of existing censorship-resistant protocols,
which forms a crack in their resilience to blocking. For example,
this is the root cause of the issues that Tor is facing when trying
to distribute bridge addresses to its users, without exposing these
addresses to the censor [52]. It is because of this crack that China
has been blocking the majority of Tor traffic since 2009 [57]: The
1To be precise, in Telex, Alice does not need to know the precise
location of the proxy running the Telex protocol. However, she
needs to be aware that a Telex proxy will occur somewhere in the
path to the decoy destination. Here, we consider this destination
to be the rendezvous point she must know.
number of entry points is finite, and a determined attacker can
enumerate them by pretending to be Alice.
With Message In A Bottle (miab), we propose a protocol in
which Alice needs to know the least possible about Bob, and how
to bootstrap the protocol. In fact, we will show that it is enough
for Alice to know Bob’s public key, and nothing else. Alice must
know at least Bob’s public key to authenticate him, so that she
can be sure she is not talking to a disguised censor. However,
contrary to systems like Collage and Telex, there is no prearranged
rendezvous point where Alice and Bob must meet.
This may now sound like a needle-in-a-haystack problem: If
neither Alice nor Bob know how to contact the other one, how
can they ever meet? To make this possible, and reasonably fast,
miab exploits one of the mechanisms that search engines employ
to generate real-time results from blog posts and news articles:
blog pings. Using these pings as a broadcast system, Bob gets
covertly notified that a new message from Alice is available, and
where to fetch it from. We will show that, just like a search
engine, Bob can monitor the majority of the blogs published on
the entire Internet with limited resources, and in quasi real-time.
In some sense, every blog becomes a potential meeting point
for Alice and Bob. However, there are over 165 million blogs
online [8], and since a blog can be opened trivially by anybody,
for our practical purposes they constitute an infinite resource.
As a result of one of our experiments (see Section 5.1), we will
show that, to blacklist all the potential miab’s drop points in a
three-months period, the Censor should block at least 40 million
fully qualified domain names, and four million IP addresses (as
we will show, these are conservative estimates). For comparison,
blacklisting a single IP address would block Collage’s support for
Flickr (the only one implemented), and supporting additional
media-hosting sites requires manual intervention for each one.
In miab, Alice will prepare a message for Bob and encrypt it
with his public key. This ciphertext will be steganographically
embedded in some digital photos. Then, Alice will prepare a blog
post about a topic that fits those photos, and publish it, along
with the photos, on a blog of her choosing. Meanwhile, Bob will
be monitoring the stream of posts as they get published. He will
recognize Alice’s post (effectively, the bottle that contains the
proverbial message), and recover the message.
To achieve these properties, the miab protocol imposes sub-
stantial overhead. We do not strive for miab’s performance to
be acceptable for low latency (interactive) communication over
the network (such as web surfing). Instead, we want our users
to communicate past the Censor by sending small delay-tolerant
messages (e.g., emails, articles, tweets). Also, miab can be em-
ployed to exchange the necessary information to bootstrap more
demanding censorship-resistant protocols. These might be more
efficient than miab, at the cost of requiring more data upon
bootstrap (such as Collage, or Telex). We will showcase a few
applications of miab in Section 4.
Our main contributions are:
• A new primitive for censorship-resistant protocols that
requires Alice to have minimal initial knowledge about Bob,
and how to bootstrap the protocol;
• A study of the feasibility of this approach;
• An open-source implementation of a proof-of-concept ap-
plication of miab that lets user tweet anonymously and
deniably on Twitter.
2. THREAT MODEL
His intent is to discover and suppress the spreading of dissident
ideas. Determining the current and potential capabilities of
modern censors of this kind (e.g., Iran and China) is a difficult
task, as the inner workings of the censoring infrastructure are
often kept secret. However, we can create a reasonable model for
our adversary by observing that, ultimately, the Censor will be
constrained by economic factors. Therefore, we postulate that
the censorship we are facing is influenced by these two factors:
• The censoring infrastructure will be constrained by its cost
• Over-censoring will have a negative impact on the economy
and technological effort;
of the country.
From these factors, we can now devise the capabilities of our
Censor. We choose to do so in a conservative fashion, preferring
to overstate the Censor’s powers than to understate them. We
make this choice also because we understand that censorship is an
arms race, in which the Censor is likely to become more powerful
as technology advances and becomes more pervasive.
We assume that it is in the Censor’s interest to let the general
population benefit from Internet access, because of the social
and economic advantages of connectivity. This is a fundamental
assumption for any censorship-avoidance system: If the country
runs an entirely separate network, there is no way out2.
The Censor’s Capabilities. As part of his infrastructure,
the Censor might deploy multiple monitoring stations anywhere
within his jurisdiction. Through these stations, he can capture,
analyze, modify, disrupt, and store indefinitely network traffic.
In the rest of the world, he will only be able to harness what is
commercially available to him. The Censor can analyze traffic
aggregates to discover outliers in traffic patterns, and profile
encrypted traffic with statistical attacks on the packets content
or timing. Also, he might drill down to observe the traffic of
individual users.
The Censor might issue false TLS certificates with a Certificate
Authority under its control. With them, he might man-in-the-
middle connections with at least one endpoint within his country.
The Censor will have knowledge of any publicly available
censorship-avoidance technology, including miab. In particular,
he might join the system as a user, or run a miab instance to lure
dissidents into communicating with him. Also, he might inject
additional traffic into an existing miab instance to try to confuse
or overwhelm it.
Because the Censor bears some cost from over-blocking, he
will favor blacklisting over whitelisting, banning traffic only when
it deems it suspicious. When possible, the Censor will prefer
traffic disruption over modification, as the cost of deep-packet
inspection and modification is higher than just blocking the
stream. For example, if the Censor suspects that the dissidents are
communicating through messages hidden in videos on YouTube,
he is more likely to block access to the site rather than re–encoding
every downloaded video, as this would impose a high toll on his
computational capabilities. Also, we assume that if the Censor
chooses to alter uncensored suspicious traffic, he will do so in a
manner that the user would not easily notice.
3. DESIGN
In its essence, miab is a system devised to allow Alice, who
lives in a country ruled by an oppressive regime, to communicate
confidentially with Bob, who resides outside the country. Alice
does not need to know any information, but Bob’s public key.
The adversary we are facing, Tyria’s Censor, is a country-wide
authority that monitors and interacts with online communications.
2We are strictly speaking about traditional ways to leak messages
to the Internet through network communication.
3. Alice uses the miab client software to embed software to
embed a message M into the photos. The message is
hidden using public-key steganography [58] (PKS), with
Bob’s public key. We will discuss the available choices for
the steganographic algorithm in Section 3.2.
4. Alice publishes the blog post, containing the processed
photos. Alice can choose the blog arbitrarily, provided it
supports blog pings. In Section 5.1, we will show that most
of the popular blog engines provide blog pings.
5. The blog emits a ping to some ping servers.
6. Meanwhile, Bob is monitoring some of the ping servers,
looking for steganographic content encrypted with his public
key. Within minutes, he discovers Alice’s post, and decrypts
the message.
7. Bob reads the message, and acts upon its content (more on
this later).
This concludes the miab protocol in its basic form; we will expand
it further in Section 4.