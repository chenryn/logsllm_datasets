Needless to say, any storage service that offers causal
consistency needs to keep track of the causal order relations
among read and write operations. Instead of embedding such
operations in the code of OmegaKV, our implementation
makes extensive use of Omega. As a result, OmegaKV il-
lustrates the beneﬁts than can be achieved by having an event
ordering service implemented at the fog level, and also shows
how applications can leverage the fact that Omega is secured
to harden their own behaviour.
III. VIOLATIONS OF THE EVENT ORDERING
it
Before we describe the design and implementation of
Omega,
is worth enumerating the problems that might
occur if the event ordering service is compromised. In this
discussion, we assume that
the event ordering service is
executed in a fog node and that the clients of the service are
edge nodes, servers in cloud data centers, or other fog nodes.
In this work, we assume that clients are always non-faulty and
we only address the implications of a faulty implementation
of the event ordering service.
The detailed API of the Omega service will be described
later in the text. For now, just assume that clients can: i)
register events with the event ordering service in an order
that respects causality and, ii) query the service to obtain
a history of the events that have been registered. Typically,
clients that query the event ordering service will be interested
in obtaining a subset of the event history that matches the
complete registered history (i.e., it has no gaps), and that is
fresh (i.e., includes events up to the last registered event).
Informally, a faulty event ordering service can: i) Expose
an event history that is incomplete (omitting one or multiple
events from the history); ii) Expose an event history that
depicts events in the wrong order, in particular, in an order
that does not respect the cause-effect relations among those
events; iii) Expose a history that is stale, by omitting all events
subsequent to a given event in the past (that is falsely presented
as the last event to have occurred); iv) Add false events, that
have never been registered, at arbitrary points in the event
history. These behaviours break the causal consistency and
may leave applications in an unpredictable state.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:36:47 UTC from IEEE Xplore.  Restrictions apply. 
491
Fig. 1. predecessorEvent and predecessorWithTag functions.
IV. OMEGA SERVICE
Omega is a secure event ordering service that runs in a fog
node and that assigns logical timestamps to events in a way
that these cannot be tampered with, even if the fog node has
been compromised. Clients can ask Omega to assign logical
timestamps to events they produce, and can use these logical
timestamps to extract information regarding potential cause-
effect relations among events. Furthermore, Omega keeps track
of the last events that have been registered in the system and
also keeps track of the predecessor of each event. These last
features are relevant as they allow a client to check if the
information provided by a fog node is fresh and complete (i.e,
if a compromised fog node omits some events in the causal
past of a client, the client can ﬂag the fog node as faulty).
More precisely, Omega establishes a linearization [57] of all
timestamp requests it receives, effectively deﬁning a total order
for all events that occur at the fog node. Any linearization of
the event history is consistent with causality.
A. Omega API
The interface of the Omega service is depicted in Table I.
Omega assigns, upon request, logical timestamps to applica-
tion level events. Each event is assumed to have a unique
identiﬁer that is assigned by the client of the Omega service,
so Omega is oblivious to the process of assigning identiﬁers
to events, which is application speciﬁc. Omega also allows
the application to associate a given tag to each event. Again,
Omega is oblivious to the way the application uses tags (tags
can be associated to users, to keys in a key-value store, to event
sources, etc.), but requires all tags to be registered before they
are used (registerTag). In Section IV-B, we provide examples
that illustrate how tags can be used by different applications.
The createEvent operation assigns a timestamp to a user
event and returns an object of type Event that securely binds
a logical timestamp to an event and a tag.
Clients are not required to know the internal format used by
Omega to encode logical timestamps, which is encapsulated
in an object of type Event. Instead, the client can use the
remaining primitives in Omega to query the order of events
and to explore the event linearization that has been deﬁned
by Omega. The primitive orderEvents receives two events
and returns the oldest according to the linearization order.
The client can also ask Omega for the last event that has
been timestamped (lastEvent), or by the most recent event
associated with a given tag (lastEventWithTag), as shown
in Figure 1. Given a target event, the client can also obtain
the event
is the immediate predecessor of the target
in the linearization order (predecessorEvent), or the most
recent predecessor that shares the same tag with the target
that
TABLE I
THE OMEGA API.
Register a tag with Omega
void registerTag (EventTag tag)
Create a timestamped event with a given identiﬁer and a given tag
Event createEvent (EventId id, EventTag tag)
Order two events and return the ﬁrst
Event orderEvents (Event e1, Event e2)
Return the last event timestamped by Omega
Event lastEvent ()
Return the last timestamped event with a given tag
Event lastEventWithTag (EventTag tag)
Return immediate predecessor of a given event
Event predecessorEvent (Event e)
Return the most recent predecessor with the same tag
Event predecessorWithTag (Event e)
Return the application level identiﬁer of an event
EventId getId (Event e)
Return the tag associated with an event
EventTag getTag (Event e)
(predecessorWithTag). Finally getId and getTag extract
the application level event identiﬁer and tag that have been
securely bound with the target logical timestamp.
Note that, although Omega is inspired by services such as
Kronos, it offers an interface that makes different tradeoffs.
First, it allows clients to associate events with speciﬁc ob-
jects / tags and to fetch all previous events that have updated
that speciﬁc object; Kronos requires clients to crawl the event
history to get the previous version of a particular object. Sec-
ond, Kronos requires the application to explicitly declare the
cause effect relations among objects. This is more versatile but
more complex to use than Omega, that automatically deﬁnes
a causal dependency among the last operation of a client and
all operations that this client has performed or observed in its
past. Finally, unlike Kronos, Omega automatically establishes
a linearization of all operations, which simpliﬁes the design of
applications that need to totally order concurrent operations.
B. Example Use Cases
Many applications, such as online augmented-reality multi-
player games, assisted car driving, and distributed key-value
stores, can leverage an event ordering service such as Omega.
In the following, we use two of these examples to illustrate
how the API exported by Omega can be used for different
purposes.
1) Fog-Assisted Car Driving: Edge computing has the po-
tential to play a key role in vehicular networks, an area whose
signiﬁcance is growing given the increasing number of sen-
sors deployed in current cars and the increasing autonomous
functions that cars can execute. An important component
of vehicular networks is the vehicle-to-infrastructure (V2I)
communication [58], [59], that allows vehicles to share the
information they produce and also to consume information that
can improve their autonomous behaviour. The infrastructure in
the V2I is made up of Road Side Units (RSU)s that are situated
at multiple points along roads; RSUs provide resources to
local vehicles and inform the cloud of local events. Recent
research indicates that fog nodes are promising candidates to
operate as upgraded RSUs, with more memory and processing
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:36:47 UTC from IEEE Xplore.  Restrictions apply. 
492
power [24].
Among the many services that can be provided by RSUs/
fog nodes, one is to support information sharing regarding road
events or constraints such as accident warnings, congestion
control, driving conditions, curve speed warning, stop signal
gap assist, speed limits, road-weather information, and others.
These features will allow to deploy intelligent trafﬁc lights
and other smart cities applications [60]. In such scenarios, the
operation of trafﬁc lights, and the routes used in urban areas
can be optimized using the information provided by fog nodes.
Unfortunately, these applications also make RSUs appealing
targets for cyberterrorism, and there is a growing concern
regarding the risks and attacks to vehicular networks [59], [61],
[62]. If an attacker could selectively select which events are
propagated to a given trafﬁc light or to a given vehicle it could
easily distort the perception of the actual road conditions, and
would be able to manipulate trafﬁc and generate congestion.
A service such as Omega can play an essential role to
secure such infrastructure by providing the means that allow
intelligent trafﬁc lights and intelligent cars to check if the
RSU is providing a fresh and gapless record of the incidents
reported by other vehicles. Vehicles could use the Omega
service to report occurrences to fog nodes, and use the Omega
ability to securely crawl the event log to detect malicious gaps
in the information reported. If a fog node is detected to be
compromised, the trafﬁc light could simply fallback to a ﬁxed
round-robin schedule of green/red signs to ensure trafﬁc safety.
2) Key-Value Stores: Key-value stores are widely used in
cloud computing today, and a large number of designs have
been implemented [63]–[65]. Most of these systems support
geo-replication, where copies of the key-value store are kept
in multiple data centers. Geo-replication is relevant to ensure
data availability in case of network partitions and catastrophic
faults, but it is also instrumental to serve clients with lower
latency than what would be possible with a non-replicated
system. However, as discussed previously, cloud-based geo-
replication may not sufﬁce to achieve the small
latencies
required by novel latency-critical applications. Therefore, ex-
tending key-value stores to operate on fog-nodes is a relevant
research challenge. Many geo-replicated key-value stores, such
as COPS [11], Saturn [18], or Occult [66], support causal
consistency. As the name implies, causal consistency requires
the ability to keep track of causal relations among multiple
put and get operations. This can be achieved with the help
of a service such as Omega. We have decided to implement
an extension for an existing key-value store to illustrate the
beneﬁts of Omega. Therefore, we postpone further discussion
on how to use Omega for the implementation of key-value
stores to Section VI, where we present OmegaKV.
V. OMEGA DESIGN AND IMPLEMENTATION
In this section, we describe the design and implementation
of the Omega service. We start by presenting the system
architecture,
the system model and the threats they face.
Then, we describe in detail the most important aspects of the
implementation.
Fig. 2. Omega architecture. CA is certiﬁcation authority, AS is attestation
server, ΩC is Omega client, ΩV is Omega Vault and ΩL is the event log.
A. System Architecture and Interactions
The Omega service is executed on fog nodes and is used
by processes that run in the edge or in cloud data centers, as
shown in Figure 2. Both the edge devices and the cloud can
use Omega to create and read events on the fog node in a
secure manner. For instance, edge devices can make updates
to data stored on the fog node that are later shipped to the
cloud (in this case, edge devices create events and the cloud
reads them). Moreover, the cloud can receive updates from
other locations and update the content of the fog node with
new data that is subsequently read by the edge devices. For the
operation of Omega, we do not need to distinguish processes
running on the edge devices from processes running on the
cloud, we simply denote them as clients. The method used
by clients to obtain the address of fog nodes is orthogonal
to the contribution of this paper. We can simply assume that
cloud nodes are aware of all fog nodes (via some registration
procedure) and the edge devices can ﬁnd fog nodes using a
request to the Domain Name System (DNS), e.g., using a name
associated with the application, or to the cloud, e.g., using an
URL associated with the application.
The implementation of Omega assumes the existence of two
external components, that are executed in the cloud and are
assumed to be secure. These components are a Certiﬁcation
Authority (CA), that is used to generate public key certiﬁcates,
and an Attestation Server (AS) , which is used when a fog node
binds to the Omega implementation via a binding procedure
(described in Section V-D). The techniques used to ensure the
correctness of these two external components are orthogonal
to this work (e.g. using standard Byzantine fault-tolerance
techniques [67], [68]).
As previously mentioned, we take advantage of Intel SGX.
The use of an enclave could lead to memory constraints in our
implementation. However, as will be explained in Section V-E,
Omega is not constrained by the memory available to the
enclave. This is a fundamental advantage of Omega and a
key distinctive feature with regard to related systems such as
ShieldStore [54]. In Omega, only the top hash of a Merkel
tree is required to be stored in the enclave, the rest of the
tree is stored in RAM in the untrusted zone. Also, the cost
of Omega functions only grows logarithmically with the size
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:36:47 UTC from IEEE Xplore.  Restrictions apply. 
493
of the dataset, as opposed to ShieldStore, Speicher [55], and
Pesos [56], whose cost grows linearly. Scalability is a key
attribute of Omega.
B. Components of the Omega Implementation
An important aspect of Omega is how to maintain the
functionality of the system in case a fog node is compromised.
To tackle this issue, Omega takes advantage of Intel SGX,
as show in Figure 2; Omega generates all events inside the
enclave, i.e., it executes createEvent operations inside the
enclave. Moreover, all events take a digital signature obtained
inside the enclave using the private key of the fog node,
also stored inside the enclave. Omega includes the following
modules: i) a protocol used by clients to ensure that they are
interacting with the correct implementation of Omega running
on the enclave and not with a compromised version of the
same service (Section V-D); ii) two sub-components named
vault and event log that are used to preserve the Omega state
(Section V-E); iii) an implementation of each method in the
API (Section V-F).
C. Threat Model and Security Assumptions
The cloud and its services (AS, CA) are considered trust-
worthy, i.e., are assumed to fail only by crashing (essentially,
we make the same assumptions as the related work [11],
[16], [18]–[20]). Clients running on edge devices are also
considered trustworthy and may also fail only by crashing.
Due to their exposed location, fog nodes can suffer numer-
ous attacks and be compromised (an attacker might even gain
physical access to a fog node). We assume that fog nodes
may fail arbitrarily. They receive operations from clients and
communicate with the cloud, so we assume that a faulty fog
node can: modify the order of messages in the system; modify
the content of messages; repeat messages (replay attack);
tamper with stored data; and generate incorrect events. All
these actions, if not addressed carefully, may lead the system to
a faulty state, cause Omega to break the causal consistency of
the events, and therefore affect the correctness of applications
that use Omega.