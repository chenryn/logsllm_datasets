title:SCOBA: source code based attestation on custom software
author:Liang Gu and
Yao Guo and
Anbang Ruan and
Qingni Shen and
Hong Mei
SCOBA: Source Code Based Attestation on Custom
Software ∗
Liang Gu‡, Yao Guo‡†
‡Institute of Software, School of Electronics Engineering and Computer Science, Peking University, Beijing, China
‡Key Laboratory of High Conﬁdence Software Technologies (Ministry of Education),
, Anbang Ruan§, Qingni Shen§,Hong Mei‡
§School of Software and Microelectronics, Peking University, Beijing, China
‡{guliang05,yaoguo,meih}@sei.pku.edu.cn,§{ruanab, shenqn}@infosec.pku.edu.cn
ABSTRACT
Most existing attestation schemes deal with binaries and
typically require an exhaustive list of known-good measure-
ments beforehand in order to perform veriﬁcation. However,
many programs nowadays are custom-built: the end user is
allowed to tailor, compile and build the source code into
various versions, or even build everything from scratch. As
a result, it is very diﬃcult, if not impossible, for existing
schemes to attest the custom-built software with theoret-
ically unlimited number of valid binaries available. This
paper introduce SCOBA, a new Source COde Based Attes-
tation framework, to speciﬁcally deal with the attestation
on custom software.
Instead of trying to obtain a know-
good measurement list, SCOBA focuses on the source code
and provides a trusted building process to attest the result-
ing binaries based on the source ﬁles and building conﬁgu-
ration. SCOBA introduces a trusted veriﬁer to certify the
binary code of custom-build program according to its source
code and building conﬁguration. For custom-built software
based on open-source distributions, we implemented a fully
automatic trusted building system prototype for SCOBA
based on GCC and TPM. As a case study, we also applied
SCOBA to Gentoo and its Portage, which is a source code
based package management system. Experimental results
show that remote attestation, one of the key TCG features,
can be made practically available to the free software com-
munity.
∗This work is supported by the National Basic Research Pro-
gram of China (973) under Grant No. 2009CB320703, the
Science Fund for Creative Research Groups of China under
Grant No. 60821003, National Key S & T Special Projects
under Grant No. 2009ZX01039-001-001 and the National
High-Tech Research and Development Plan of China under
Grant No. 2007AA010304 and No.2009AA01Z139, and Na-
tional Natural Science Foundation of China under Grant No.
60873238 and No. 60903178.
†corresponding author
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’10 Dec. 6-10, 2010, Austin, Texas USA
Copyright 2010 ACM 978-1-4503-0133-6/10/12 ...$10.00.
Categories and Subject Descriptors
D.4.6 [Operating System]: Security and Protection—Au-
thentication, Invasive software; D.2.4 [Software Engineer-
ing]: Distribution, Maintenance, and Enhancement—Re-
structuring, reverse engineering, and reengineering
General Terms
Security
Keywords
Remote attestation, custom software, trusted computing,
free software, property-based attestation
1.
INTRODUCTION
Many IT systems nowadays are conducted on open com-
puter platforms across heterogeneous domains or over the
public Internet. Entities in such an open, distributed and
dynamic environment usually behave on their own behalf
and may not trust each other for mission-critical operations
or transactions. Remote attestation provides an important
way to establish trust on parties in an open network.
In
Trusted Computing Group’s trusted computing standard
[23], remote attestation allows a challenging platform, usu-
ally referred to as a challenger, to verify the conﬁguration in-
tegrity of a remote platform (i.e., an attester ). Recent years
have witnessed various evolutions out of the basic TCG at-
testation in many dimensions, including IMA [21], program
semantics attestation [12], security policy enforcement [14],
property attestation [4, 19], BIND [22], remote attestation
on program execution [11], and so on.
Most of the existing remote attestation schemes are based
on the integrity measurement of programs and conﬁgura-
tions. The size of known-good measurements greatly limits
the practicability of the existing attestation schemes. For
example, free software and open-source software make it dif-
ﬁcult, if not impossible, for existing attestation schemes to
verify the genuineness of the corresponding binary code.
From the perspective of software deployment, there are
usually two types of software: custom software and pre-
packaged software. Many software nowadays are based on
open-source software distributions, which greatly accelerate
the software development process. However, since the users
are in control of all the source ﬁles, they are able to tailor,
conﬁgure and build their own executables to be deployed in
their own environment. Even worse, they could also modify
the source ﬁles at their own discretion, which would make
the situation worse for attestation schemes. Custom soft-
ware can be conﬁgured and tailored according to the end
user’s requirements which cannot be predicted by the soft-
ware provider. For example, Linux kernel can be conﬁgured
and built for each and diﬀerent platform, with diﬀerent re-
quirements speciﬁed by the users. The result is that even
all users download a speciﬁc software from the same trusted
source website, the executables they built themselves could
all diﬀer from each others.
Existing remote attestation schemes are not adequate to
verify these custom-built software, mainly because it is im-
possible to hold a known-good measurement database for
so many diﬀerent programs of unpredictable versions. Al-
though existing property-based attestation schemes [4, 19]
introduced the concept of attesting programs based on their
properties, these stated properties are still tied to the binary
code. As a result, these property-based attestation scheme
still need a giant known-good binary database, which is still
not able to handle the custom software.
To deal with these challenges from custom software, we
propose SCOBA, a new Source COde Based Attestation
framework to solve the above problems and initiate an ef-
fort for applying remote attestation, one of the key TCG
features, in the free software community. The rationale of
our scheme is to link speciﬁed binary code of the customized
software with its source code, and certify the generated bi-
nary code of the software according to both its source code
and building conﬁguration.
In order to validate the generated binary code of custom
software, we introduce a Trusted Building System (TBS) to
enable a trusted building process for compiling the custom
software (Figure 1).
In the trusted building process, the
source code of the target program is tailored according to
the end user’s requirements and it is complied into binary
code with the TBS, in which the binary code is bound with
its corresponding source code and building conﬁgurations.
The building process can be attested to prove the validation
of the generated binary code. With the generated binary
code and its corresponding source code as well as building
conﬁguration, a trusted veriﬁer is introduced to certify the
property of the custom software (step a and step b in Figure
1). At runtime, challenger may use the certiﬁcate to enable
remote attestation on the custom software (step c and step
d in Figure 1). So the trust chain of our attestation scheme
can be built from the TPM to the building process, and
ﬁnally to the attested custom software at runtime.
This paper makes the following key contributions:
• SCOBA solves the problem of known-good measure-
ments database for custom software. With the pro-
posed framework, it becomes practical to attest cus-
tomized software in open networks. To our best knowl-
edge, it is the ﬁrst eﬀort for employing attestation to
enhance trust establishment on customized software,
especially for customized open-source software.
• The proposed Trusted Building System enables an-
other party to validate and certify the generated binary
code of custom software according to its source code
and building conﬁguration. Existing solutions can not
attest custom software, because it has no way of vali-
dating the binary code of custom-built software.
• The source code based approach is a more practical
way to obtain the software property. As SCOBA binds
the source code ﬁles and building conﬁguration of the
customized software, the trusted veriﬁer may obtain its
property by evaluating and testing these information.
• The trusted veriﬁer in SCOBA serves as the veriﬁca-
tion agent, which can be customized to accommodate
diﬀerent types of software. As a result, SCOBA pro-
vides a ﬂexible framework, which can be customized
according to diﬀerent types of software development
process, as demonstrated by the case study on Gen-
too.
The paper is organized as follows: we will give a brief in-
troduction on background in Section 2. Section 3 introduces
the design of SCOBA. Section 4 presents the implementa-
tion and evaluation on the prototype of SCOBA. Section 5
introduces the application of SCOBA in Gentoo. Section 6
introduces the related work. Section 7 discusses the possi-
ble solutions for improving our scheme and its application.
Section 8 concludes the paper and discusses the future work.
2. BACKGROUND
2.1 Custom Software
From the perspective of software deployment, there are
usually two types of software: custom software and pre-
packaged software. Custom software, which is also called
bespoke software, allows end user to design and implement
software based on its own requirements. Pre-packaged soft-
ware, or “oﬀ-the-shelf” software is released by software provider
with speciﬁed conﬁgurations, such as the installation pack-
ages under Windows, rpm packages and Debian packages
under Linux.
Sometimes custom software is referred to as conﬁgured
software, or customized software, which is tailored or cus-
tomized from the original version of delivered software. The
custom software starts from an existing structure and it is
ﬂexible for various requirements. Free software and open
software are the most widely available custom software. Like
the Linux kernel, end users may modify and conﬁgure the
free software at will to satisfy their speciﬁc requirements.
However, such ﬂexibility results large number of unpredictable
versions for binary code of free software.
In this paper, we will consider two kinds of custom soft-
ware: custom-built software–customizing without modify-
ing the source code ﬁles; fully custom software–customizing
with modiﬁcations on source code ﬁles. For the ﬁrst type,
the users customize the software distribution before build-
ing, but do not modify individual source code ﬁles that are
attained from trusted parties. For the fully custom soft-
ware, users can modify the source code of the original soft-
ware. For the custom-built software, as it is supposed to
have ﬁxed source code, SCOBA is able to automatically cer-
tify this type of customized software. For the fully custom
software, SCOBA may have to employ experts or more so-
phisticated certiﬁcation techniques to certify these modiﬁed
source code, such as model checking and testing.
When considering their tailoring platform, compilation
platform and execution platform, the custom software de-
ployment can either take place all on the same platform, or
it could be performed on separated platforms. For example,
the compilation and execution are carried out on separated
platforms; the source code is tailored and built on a sep-
arated platform according to the end user’s requirements.
Figure 1: The overview of SCOBA
These approaches may require diﬀerent designs and imple-
mentations of secure execution environment for the trusted
building process in our scheme, and this will be discussed in
Section 3.3 and Section 4. For most existing customized soft-
ware, the ﬁrst approach with the same platform is the most
frequently used, thus we will focus on it most of the time
and point out the diﬀerence if separated platforms might be
used.
2.2 Dynamic Root of Trust
The TCG speciﬁcations introduce authenticated boot (or
secure boot) to prove or guarantee that the system is booted
into a secure state. The authenticated boot and secure boot
provide a static root of trust based on the TPM. How-
ever, the static root of trust can not guarantee the secu-
rity of a runtime system. With AMD’s Secure Virtual Ma-
chine (SVM)[2] and Intel’s Trusted Execution Technology
(TXT)[13], it becomes practical to provide a dynamic root
of trust for runtime system. The dynamic root of trust can
strongly support a secure domain for dedicated system at
runtime. Some studies for leveraging dynamic root of trust
to provide secure execution environment have already been
proposed, such as OSLO [15], Flicker [17] and TrustVisor
[16]. For custom software delivered on the same platform,
the end user may run the compilation process in the secure
domain, which is supported by a dynamic root of trust.
3. SCOBA DESIGN
3.1 Attestation Framework
To provide remote attestation for custom software, we pro-
pose a new source code based attestation framework called
SCOBA, which is illustrated in Figure 2. Instead of trying
to obtain a list of known-good measurement list, SCOBA
focuses on the source code, and provides a trusted build-
ing process to verify the resulting binaries according to the
source ﬁles and building conﬁguration.
Three parties are involved in SCOBA: the challenger, the
attester and the trusted veriﬁer. A typical scenario is as
follows: the builder conﬁgures, tailors and builds a custom
software P according to the challenger’s requirement; the
trusted veriﬁer certiﬁcates the custom software by check-