unsigned int i;
the function pointer’s type. For this method to be valid, some prepro-
cessing of source code is required [26] (e.g., to eliminate type casts
that involve function-pointer types by adding function wrappers).
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
void greeter (char *str) {
printf(str); printf(", welcome!\n"); }
void initkey (int sz) {
key = (char *) (malloc (sz));
// init the key randomly; code omitted
for (i=0; i 0
if t = tn and k = 0
Figure 5: Type-based parameter-tree building.
Algorithm 1 PDG-based program partitioning
Input: G is a PDG
Output: Fs: the set of sensitive functions; Gls; the set of sensitive
global variables
sensitive ← {n | n is marked sensitive}
worklist ← sensitive
while worklist is not empty do
n ← worklist.pop()
for data/control dependence edge n → n′ do
if n′ is not declassified and n′ (cid:60) sensitive then
sensitive ← {n′} ∪ sensitive
worklist ← {n′} ∪ worklist
| f has a node n in sensitive}
Fs ← { f
Gls ← {д | д′s parameter tree has a node n in sensitive}
and an insensitive partition for the rest of the code. The algorithm
performs function-level partitioning and does not split a single
function. Furthermore, since our PDG represents both data and
control dependence, the algorithm considers both explicit flows of
sensitive data (via data dependence) and implicit flows (via control
dependence) when deciding what part of code may have access to
the sensitive data.
The partitioning algorithm is standard. The focus of the paper
is on supporting program partitioning in the presence of general
pointers so that any partitioning algorithm can be supported no
matter where the algorithm decides to split the program. There
are many interesting aspects of the partitioning algorithm that can
be improved, including performing instruction-level partitioning
instead of function-level partitioning and balancing between per-
formance and security. We plan to explore these issues in future
work (discussed in Sec. 8).
Algorithm 1 presents the PDG-based partitioning algorithm. The
input is a PDG and the output is a set of functions Fs and a set
of global variables Gls that should be put into the sensitive par-
tition; the rest of the program is in the insensitive partition. The
sensitive set starts with the set of nodes that programmers mark
as sensitive using attributes (an example is line 1 in Fig. 2). Then
a worklist algorithm is used to compute the set of nodes that a
sensitive node can reach along the data-dependence edges (explicit
data flow) and the control-dependence edges (implicit data flow)
in the PDG, while excluding nodes that programmers mark as de-
classified nodes (also using attributes). At the end of the algorithm,
any function whose PDG contains sensitive nodes is put into the
Figure 6: Parameter tree for head of type Node *.
function and see whether their destination memory locations can
overlap, using the DSA pointer analysis [18]; if so, an edge is added
from the store to the load instruction. This construction is flow-
insensitive as it ignores the ordering of instructions; it makes an
over-approximation.
In addition, we add RAW data-dependence edges between in-
struction nodes and parameter-tree nodes; examples can be found
in Fig. 3 (note for succinctness the figure omits RAW labels on
data-dependence edges). Conceptually, nodes in a formal parameter
tree of a function represent potential reads/writes in the callers
of the function; therefore, if the function has a load/store instruc-