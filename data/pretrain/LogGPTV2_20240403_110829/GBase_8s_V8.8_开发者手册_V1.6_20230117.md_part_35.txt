背景信息
 只有拥有AUDITADMIN属性的用户才可以查看账本历史操作记录。有关数据库用户及
创建用户的办法请参见7.2.4 用户。
 查询全局区块表命令是直接查询gs_global_chain表，操作为：
SELECT * FROM gs_global_chain;
该表有11个字段，每个字段的含义见章节20.2.13GS_GLOBAL_CHAIN。
 查询用户历史表的命令是直接查询BLOCKCHAIN模式下的用户历史表，操作为： 例
如用户表所在的模式为 ledgernsp，表名为 usertable，则对应的用户历史表名为
blockchain.ledgernsp_usertable_hist;
SELECT * FROM blockchain.ledgernsp_usertable_hist;
用户历史表有4个字段，每个字段的含义见表7-19。
用户历史表的表名一般为blockchain.__hist形式。当防
篡改用户表模式名或者表名过长导致前述方式生成的表名超出表名长度限制，则会采用
blockchain.__hist的方式命名。
操作步骤
步骤1 登录数据库查询全局区块表记录。
gbase=# SELECT * FROM gs_global_chain;
例如，查询结果如下：
blocknum | dbname | username | starttime | relid | relnsp | relname |
relhash | globalhash txcommand
----------+----------+----------+-------------------------------+-------+----
-------+-----------+------------------+----------------------------------+---
---------------
------------------------------------------------------------
0 | postgres | gbase | 2021-04-14 07:00:46.32757+08 | 16393 | ledgernsp |
usertable | a41714001181a294 | 6b5624e039e8aee36bff3e8295c75b40 | insert into
ledge
rnsp.usertable values(1, 'alex'), (2, 'bob'), (3, 'peter');
1 | postgres | gbase | 2021-04-14 07:01:19.767799+08 | 16393 | ledgernsp |
usertable | b3a9ed0755131181 | 328b48c4370faed930937869783c23e0 | update
ledgernsp.
南大通用数据技术股份有限公司
206
GBase 8s V8.8开发者手册
usertable set name = 'bob2' where id = 2;
2 | postgres | gbase | 2021-04-14 07:01:29.896148+08 | 16393 | ledgernsp |
usertable | 0ae4b4e4ed2fcab5 | aa8f0a236357cac4e5bc1648a739f2ef | delete from
ledge
rnsp.usertable where id = 3;
该结果表明，用户gbase连续执行了三条DML命令，包括INSERT、UPDATE和DELETE
操作。
步骤2 查询历史表记录。
gbase=# SELECT * FROM blockchain.ledgernsp_usertable_hist;
查询结果如下：
rec_num | hash_ins | hash_del | pre_hash
---------+------------------+-----------------+------------------------------
----
0 | 1f2e543c580cb8c5 | |e1b664970d925d09caa295abd38d9b35
1 | 8fcd74a8a6a4b484 | |dad3ed8939a141bf3682043891776b67
2 | f51b4b1b12d0354b | | 53eb887fc7c4302402343c8914e43c69
3 | 437761affbb7c605 | 8fcd74a8a6a4b484 | c2868c5b49550801d0dbbbaa77a83a10
4 | | f51b4b1b12d0354b | 9c512619f6ffef38c098477933499fe3
(5 rows)
查询结果显示，用户gbase对ledgernsp.usertable表插入了3条数据，更新了1条数据，
随后删除了 1 行数据，最后剩余 2 行数据，hash 值分别为 1f2e543c580cb8c5 和
437761affbb7c605。
步骤3 查询用户表数据及hash校验列。
gbase=# SELECT *, hash FROM ledgernsp.usertable;
查询结果如下：
id | name | hash
----+------+------------------
1 | alex | 1f2e543c580cb8s5
2 | bob2 | 437761affbb7c605
(2 rows)
查询结果显示，用户表中剩余2条数据，与步骤2中的记录一致。
----结束
南大通用数据技术股份有限公司
207
GBase 8s V8.8开发者手册
7.5.3 校验账本数据一致性
前提条件
数据库正常运行，并且对防篡改数据库执行了一系列增、删、改等操作，保证在查询时
段内有账本操作记录结果产生。
背景信息
 账本数据库校验功能目前提供两种校验接口，分别为： ledger_hist_check(text,...和
ledger_gchain_check(text...。普通用户调用校验接口，仅能校验自己有权限访问的表。
 校验防篡改用户表和用户历史表的接口为pg_catalog.ledger_hist_check，操作 为：
SELECTpg_catalog.ledger_hist_check(schema_nametext,table_nametext);
如果校验通过，函数返回t，反之则返回f。
 校验防篡改用户表、用户历史表和全局区块表三者是否一致的接口为
pg_catalog.ledger_gchain_check，操作为：
SELECTpg_catalog.ledger_gchain_check(schema_nametext,table_nametext);
如果校验通过，函数返回t，反之则返回f。
操作步骤
步骤1 校验防篡改用户表ledgernsp.usertable与其对应的历史表是否一致。
gbase=#SELECTpg_catalog.ledger_hist_check('ledgernsp','usertable');
查询结果如下：
ledger_hist_check
-------------------
t
(1row)
该结果表明：防篡改用户表和用户历史表中记录的结果能够一一对应，保持一致。
步骤2 查询防篡改用户表ledgernsp.usertable与其对应的历史表以及全局区块表中关于该表
的记录是否一致。
gbase=#SELECTpg_catalog.ledger_gchain_check('ledgernsp','usertable');
查询结果如下：
ledger_gchain_check
---------------------
南大通用数据技术股份有限公司
208
GBase 8s V8.8开发者手册
t
(1row)
查询结果显示，上述三表中关于ledgernsp.usertable的记录保持一致，未发生篡改行为。
----结束
7.5.4 归档账本数据库
前提条件
 系统中需要有审计管理员或者具有审计管理员权限的角色。
 数据库正常运行，并且对防篡改数据库执行了一系列增、删、改等操作，保证在查询时
段内有账本操作记录结果产生。
 数据库已经正确配置审计文件的存储路径audit_directory。
背景信息
 账本数据库归档功能目前提供两种校验接口，分别为：ledger_hist_archive(text,text)和
ledger_gchain_archive(void)，详见《GBase8sV8.8_SQL参考》中“5.21账本数据库的
函数”章节。账本数据库接口仅审计管理员可以调用。
 归档用户历史表的接口为pg_catalog.ledger_hist_archive，表示归档当前DN节点的用户
历史表数据。操作为：
SELECTpg_catalog.ledger_hist_archive(schema_nametext,table_nametext);
如果归档成功，函数返回t，反之则返回f。
 归档全局区块表的接口为pg_catalog.ledger_gchain_archive，表示归档全局历史表数据。
操作为：
SELECTpg_catalog.ledger_gchain_archive();
如果归档成功，函数返回t，反之则返回f。
操作步骤
步骤1 使用EXECUTEDIRECT对某个DN节点进行归档操作。例如：
gbase=#EXECUTEDIRECTON(dn1)'SELECT
pg_catalog.ledger_hist_archive(''ledgernsp'',''usertable'');';
执行结果如下：
ledger_hist_archive
南大通用数据技术股份有限公司
209
GBase 8s V8.8开发者手册
---------------------
t
(1row)
用户历史表将归档为一条数据：
gbase=#EXECUTEDIRECTON(datanode1)'SELECT*FROM
blockchain.ledgernsp_usertable_hist;';
rec_num| hash_ins | hash_del | pre_hash
---------+------------------+------------------+----------------------------------
3|e78e75b00d396899|8fcd74a8a6a4b484|fd61cb772033da297d10c4e658e898d7
(1row)
该结果表明当前节点用户历史表导出成功。
步骤2 执行全局区块表导出操作。
gbase=#SELECTpg_catalog.ledger_gchain_archive();
执行结果如下：
ledger_gchain_archive
-----------------------
t
(1row)
全局历史表将以用户表为单位归档为N(用户表数量)条数据：
gbase=#SELECT*FROMgs_global_chain;
blocknum| dbname |username| starttime|relid| relnsp | relname| relhash|
globalhash |txcommand
----------+----------+----------+-------------------------------+-------+-----------+-----------+-------------
-----+----------------------------------+-----------
1|postgres|libc |2021-05-1019:59:38.619472+08|16388|ledgernsp|usertable|
57c101076694b415|be82f98ee68b2bc4e375f69209345406|Archived.
(1row)
该结果表明，当前节点全局区块表导出成功。
----结束
7.5.5 修复账本数据库
前提条件
 系统中需要有审计管理员或者具有审计管理员权限的角色。
南大通用数据技术股份有限公司
210
GBase 8s V8.8开发者手册
 数据库正常运行，并且对防篡改数据库执行了一系列增、删、改等操作，保证在查询时
段内有账本操作记录结果产生。
背景信息
 当前的账本数据库机制为：当在异常情况或表被损坏时,需要使用ledger_hist_repair(text,
text)或ledger_gchain_repair(text,text)接口对全局区块表或用户历史表进行修复，修复后
调用全局区块表或用户历史表校验接口结果为true。
 在触发数据重分布时，可能导致防篡改表和用户历史表数据不一致，此时需要使用
ledger_hist_repair(text,text)接口对指定DN节点的用户历史表进行修复。
SELECTpg_catalog.ledger_hist_repair(schema_nametext,table_nametext);
修复后当前DN节点调用历史表校验接口结果为true。
 全 局 区 块 表 数 据 丢 失 或 者 与 用 户 历 史 表 可 能 不 一 致 ， 此 时 需 要 使 用
ledger_gchain_repair(text,text)接口，对整个集群范围内的全局区块表进行修复。
SELECTpg_catalog.ledger_gchain_repair(schema_nametext,table_nametext);
修复后调用全局区块表校验接口结果为true。
操作步骤
步骤1 使用EXECUTEDIRECT对某个DN节点，执行历史表修复操作。
gbase=#SELECTpg_catalog.ledger_hist_repair('ledgernsp','usertable');
查询结果如下：
ledger_hist_repair
--------------------
84e8bfc3b974e9cf
(1row)
该结果表明当前节点用户历史表修复成功，修复造成的用户历史表 hash 增量为
84e8bfc3b974e9cf。
步骤2 执行全局区块表修复操作。
gbase=#SELECTpg_catalog.ledger_gchain_repair('ledgernsp','usertable');
查询结果如下：
ledger_gchain_repair
----------------------
a41714001181a294
南大通用数据技术股份有限公司
211
GBase 8s V8.8开发者手册
(1row)
该结果表明，全局区块表修复成功，且插入一条修复数据，其 hash 值为
a41714001181a294。
----结束
8 接口参考
8.1 JDBC
JDBC接口是一套提供给用户的API方法，本节将对部分常用接口做具体描述。
8.1.1 java.sql.Connection
java.sql.Connection是数据库连接接口。
表 8-1 对 java.sql.Connection 接口的支持情况
方法名 返回值类型 支持JDBC4
abort(Executorexecutor) void Yes
clearWarnings() void Yes
close() void Yes
commit() void Yes
createArrayOf(String typeName, Array Yes
Object[]elements)
createBlob() Blob Yes
createClob() Clob Yes
createSQLXML() SQLXML Yes
createStatement() Statement Yes
createStatement(int resultSetType, int Statement Yes
resultSetConcurrency)
createStatement(int resultSetType, int Statement Yes
resultSetConcurrency, int
南大通用数据技术股份有限公司
212
GBase 8s V8.8开发者手册
resultSetHoldability)
getAutoCommit() Boolean Yes
getCatalog() String Yes
getClientInfo() Properties Yes
getClientInfo(Stringname) String Yes
getHoldability() int Yes
getMetaData() DatabaseMetaData Yes
getNetworkTimeout() int Yes
getSchema() String Yes
getTransactionIsolation() int Yes
getTypeMap() Map> Yes
getWarnings() SQLWarning Yes
isClosed() Boolean Yes
isReadOnly() Boolean Yes
isValid(inttimeout) boolean Yes
nativeSQL(Stringsql) String Yes
prepareCall(Stringsql) CallableStatement Yes
prepareCall(String sql, int CallableStatement Yes
resultSetType, int
resultSetConcurrency)
prepareCall(String sql, int CallableStatement Yes
resultSetType, int
resultSetConcurrency, int
resultSetHoldability)
prepareStatement(Stringsql) PreparedStatement Yes
prepareStatement(String sql, int PreparedStatement Yes
南大通用数据技术股份有限公司
213
GBase 8s V8.8开发者手册
autoGeneratedKeys)
prepareStatement(String sql, int[] PreparedStatement Yes
columnIndexes)
prepareStatement(String sql, int PreparedStatement Yes
resultSetType, int
resultSetConcurrency)
prepareStatement(String sql, int PreparedStatement Yes
resultSetType, int
resultSetConcurrency, int
resultSetHoldability)
prepareStatement(String sql, String[] PreparedStatement Yes
columnNames)
releaseSavepoint(Savepointsavepoint) void Yes
rollback() void Yes