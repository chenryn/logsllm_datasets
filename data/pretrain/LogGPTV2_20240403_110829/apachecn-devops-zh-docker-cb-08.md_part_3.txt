```
 $ echo -n "MyS3cRet123" > ./secret.txt
```
2.  将您的秘密添加到 Kubernetes:
```
 $ kubectl create secret generic my-secret --from-file=./secret.txt
 secret/my-secret created
```
3.  查看机密以确保其添加正确:
```
 $ kubectl describe secrets/my-secret
```
![](img/31557d11-c052-4c3e-86a6-7063b8bc78ed.png)
4.  在一个盒子里用一个卷来使用你的秘密。
创建一个名为`secret_pod.yml`的文件，并将以下内容放入其中。我们将使用该文件创建一个 pod，该 pod 有一个卷，我们将在其中装载我们的机密:
```
apiVersion: v1
kind: Pod
metadata:
 name: mypod
spec:
 containers:
 - name: shell
 image: alpine
 command:
 - "bin/ash"
 - "-c"
 - "sleep 10000"
 volumeMounts:
 - name: secretvol
 mountPath: "/tmp/my-secret"
 readOnly: true
 volumes:
 - name: secretvol
 secret:
 secretName: my-secret
```
5.  使用`secret_pod.yml`创建一个吊舱:
```
 $ kubectl create -f ./secret_pod.yml
```
6.  查看吊舱中的秘密:
![](img/b9adc547-2634-4bbd-a093-b150c10bb3a7.png)
# 它是如何工作的...
当您创建一个秘密时，Kubernetes 将对其进行`base64`编码，并将该秘密存储在支持 REST API 的数据存储中，例如`etcd`。如果您创建了一个引用机密的容器，当容器被创建时，它将获得使用该机密的权限。当它被部署时，它将创建并挂载一个秘密卷，并且秘密值被`base64`解码并作为文件存储在该卷中。您的应用需要引用这些文件才能访问机密。
# 还有更多...
即使不建议这样做，您也可以将秘密作为环境变量公开。为此，创建一个名为`secret_env_pod.yml`的新文件，如下所示，并参考下面的截图:
```
apiVersion: v1
kind: Pod
metadata:
 name: myenvpod
spec:
 containers:
 - name: shell
 image: alpine
 env:
 - name: MY_SECRET
 valueFrom:
 secretKeyRef:
 name: my-secret
 key: secret.txt
 command:
 - "bin/ash"
 - "-c"
 - "sleep 10000"
```
![](img/66db138c-45c0-4f8c-9813-6914d43c3168.png)
# 请参见
您可以在[https://kubernetes.io/docs/concepts/configuration/secret/](https://kubernetes.io/docs/concepts/configuration/secret/)查看 Kubernetes 斯秘密文件了解更多信息。
# 在 Kubernetes 集群中向上和向下扩展
在上一节中，我们提到复制集确保用户指定数量的 pod 复制在任何给定时间运行。要使用副本集管理副本，我们必须定义一个配置文件，其中包含 pod 的副本数量。此配置可以在运行时更改。
# 准备好
确保 Kubernetes 安装程序正在运行，如前面的配方中所述，并且您位于 Kubernetes 目录中，该目录是用前面的安装创建的。
# 怎么做...
请遵循以下步骤:
1.  用副本计数 3 启动 nginx 容器:
```
 $ kubectl run my-nginx --image=nginx --replicas=3 --port=80
```
2.  这将启动 nginx 容器的三个副本。列出吊舱以获取状态，如下图所示:
```
 $ kubectl get pods
```
![](img/e54d2b06-6d20-492c-9823-1883127cac24.png)
3.  获取副本测试配置:
```
 $ kubectl get rs
```
![](img/d5a1ba96-35ad-4207-abc2-16bc2dd9f7f4.png)
如您所见，我们有一个`my-nginx`控制器，它的副本数为`3`。
4.  缩小到 1 的副本并更新副本集:
```
 $ kubectl scale --replicas=1 deployment/my-nginx
 $ kubectl get rs
```
![](img/3ab6b6d6-f979-493c-9ea2-e7e251c80ee9.png)
5.  获取吊舱列表，以验证这是否有效；您应该只看到 nginx 的一个 pod:
```
 $ kubectl get pods
```
# 它是如何工作的...
我们请求在主节点上运行的 ReplicSet 服务更新 pod 的副本，这会更新配置，并请求节点/从属节点相应地执行调整大小的操作。
# 还有更多...
使用以下代码获取服务:
```
$ kubectl get services
```
![](img/c1e4e441-acff-4c1d-884d-576ed2a004db.png)
如您所见，我们没有为之前启动的`nginx`容器定义任何服务。这意味着，尽管我们有一个正在运行的容器，但我们不能从外部访问，因为没有定义相应的服务。
# 用 Kubernetes 集群设置 WordPress
在本食谱中，我们将使用 Kubernetes 文档中给出的 WordPress 示例([https://Kubernetes . io/docs/tutorials/stated-application/MySQL-WordPress-persistent-volume/](https://kubernetes.io/docs/tutorials/stateful-application/mysql-wordpress-persistent-volume/))。这个例子有三个部分:创建一个秘密、部署 MySQL 和部署 WordPress。
# 准备好
遵循以下先决条件:
*   确保 Kubernetes 集群已经设置好，如前一个配方中所述。
*   我们需要下载两个 pod 文件。你可以在这里找到它们:
    *   [https://kubernetes . io/examples/application/WordPress/MySQL-deployment . YAML](https://kubernetes.io/examples/application/wordpress/mysql-deployment.yaml)
    *   [https://kubernetes . io/examples/application/WordPress/WordPress-deployment . YAML](https://kubernetes.io/examples/application/wordpress/wordpress-deployment.yaml)
*   这些 YAML 文件分别描述了 MySQL 和 WordPress 的 pods 和服务。
*   MySQL 和 WordPress 都需要一个地方来存储它们的数据。在 Kubernetes 中，这被称为持久卷。当我们部署我们的 pod 时，将创建 PersistentVolumeClaims。不同的群集有不同的默认存储类，确保您使用的存储类适合您的使用模式。
# 怎么做...
请遵循以下步骤:
1.  我们在之前的食谱中了解到了 Kubernetes 的秘密。我们需要创建一个来存储 MySQL 密码。运行以下命令创建您的密码，并确保您将`THE_PASSWORD`更改为唯一的值:
```
 $ kubectl create secret generic mysql-pass --from-literal=password=THE_PASSWORD
```
检查以确保秘密已成功创建:
```
 $ kubectl get secrets
```
2.  使用`mysql-deployment.yaml`文件部署 MySQL pod:
```
 $ kubectl create -f ./mysql-deployment.yaml
```
确保`PersistentVolume`已创建。
It may take a few minutes, so if it isn't ready right away, wait a little longer.
我们可以通过查看以下命令的输出来检查它的状态。如果它看起来像下面的例子，你就可以走了:
```
 $ kubectl get pvc
```
![](img/8b0e10b2-046a-41ac-b4f4-d3593d6e8599.png)
验证 pod 是否已启动并运行:
```
 $ kubectl get pods
```
3.  现在我们已经启动并运行了 MySQL 数据库，我们需要部署 WordPress。这个 pod 也有持久存储，它使用我们在步骤 1 中创建的秘密作为 MySQL 密码。由于我们想要接受来自集群外部的流量，我们还需要设置一个负载平衡器。
*   使用`wordpress-deployment.yaml`文件部署 WordPress 服务和部署:
```
 $ kubectl create -f ./wordpress-deployment.yml
```
*   验证`PersistentVolume`是否已创建:
```
 $ kubectl get pvc
```
*   验证服务是否已启动并运行:
```
 $ kubectl get services wordpress
```
If you are using Minikube for this example, it can only expose services through NodePort. NodePort, as the name implies, opens a specific port on the host, and any traffic that is sent to this port is forwarded to the service. Since Minikube doesn't offer an integrated load balancer, the EXTERNAL-IP is always going to be pending.
现在我们已经启动并运行了服务，我们需要获取 IP 地址:
```
 $ minikube service wordpress --url
```
用你喜欢的网页浏览器，连接到 IP 地址；然后您应该会看到 WordPress 设置页面。
Make sure you complete the setup wizard by creating a username and password. If you do not, someone else can find it, and set it up for you. If you won't be using it, make sure that you delete it.
# 它是如何工作的...
在这个食谱中，我们首先创建了一个秘密来存储我们的 MySQL 密码。然后，我们使用秘密中提供的密码启动了一个 MySQL 数据库，并将数据存储在主机上的 PersistentStore 中，这样我们就不会在容器重启之间丢失数据。接下来，我们部署了一个 WordPress 服务，该服务使用我们的密码来获取连接到 MySQL 数据库的密码。我们还配置了一个负载平衡器，这样集群之外的流量就可以到达我们的 WordPress 安装。
# 还有更多...
要清理 WordPress 安装，请运行以下命令:
```
$ kubectl delete secret mysql-pass
 $ kubectl delete deployment -l app=wordpress
 $ kubectl delete service -l app=wordpress
 $ kubectl delete pvc -l app=wordpress
```
# 请参见
您可以在[https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/)查看 Kubernetes 文档了解更多信息。