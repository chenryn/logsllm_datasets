**其它资源**
-   `tuned.conf(5)`{.literal} 手册页.
:::
:::
::: section
::: titlepage
# []{#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#the-location-of-tuned-profiles_getting-started-with-tuned}TuneD 配置集的位置 {.title}
:::
[**tuned 将**]{.strong} 配置集存储在以下目录中：
::: variablelist
[`/usr/lib/tuned/`{.literal}]{.term}
:   发行版相关的配置文件存储在
    目录中。每个配置集都有自己的目录。该配置集包含名为
    `tuned.conf`{.literal} 的主配置文件和其他可选文件，如 helper 脚本。
[`/etc/tuned/`{.literal}]{.term}
:   如果需要自定义配置集，请将配置集目录复制到用于自定义配置集的
    目录中。如果有两个同名的配置文件，则使用位于
    `/etc/tuned/ 中的`{.literal} 自定义配置集。
:::
::: itemizedlist
**其它资源**
-   `tuned.conf(5)`{.literal} 手册页.
:::
:::
::: section
::: titlepage
# []{#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#tuned-profiles-distributed-with-rhel_getting-started-with-tuned}RHEL 提供的调优配置集 {.title}
:::
以下是在 Red Hat Enterprise Linux 中随 [**TuneD**]{.strong}
安装的配置文件列表。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
可能有更多特定于产品的或第三方 [**TuneD**]{.strong}
配置文件。此类配置文件通常由单独的 RPM 软件包提供。
:::
::: variablelist
[`balance`{.literal}]{.term}
:   默认节能配置文件.它旨在成为性能和能耗之间的妥协。它尽可能使用自动扩展和自动调整。唯一缺点是增加了延迟。在当前
    [**TuneD**]{.strong} 发行版中，它允许
    CPU、磁盘、音频和视频插件，并激活 `保守的`{.literal} CPU 调控器。The
    `radeon_powersave`{.literal} 选项如果支持，使用
    `dpm-balanced 值`{.literal}，否则将其设置为 `auto`{.literal}。
    它将 energy `_performance_preference`{.literal} 属性更改为
    `普通`{.literal} 能源设置。它还将 `scaling_governor 策略`{.literal}
    属性更改为 `保守`{.literal} 或 `powersave`{.literal} CPU 调控器。
[`powerave`{.literal}]{.term}
:   用于最大节能性能的配置文件。它可以限制性能，从而最大程度减少实际的功耗。在当前的
    [**TuneD**]{.strong} 发行版中，它为 SATA 主机适配器启用 USB
    自动暂停、省电功能以及 Aggressive
    链路电源管理(ALPM)节能。它还为低唤醒率的系统调度多核功率节约，并激活
    `按需监管者`{.literal}。它可节省 AC97 音频功率，或者根据您的系统节省
    HDA-Intel 功耗，而超时为 10 秒。如果您的系统包含启用了 KMS 的 Radeon
    图形卡，配置集将其配置为自动节能。在 ASUS Eee PC 上启用动态 Super
    Hybrid Engine。
    它将 energy `_performance_preference`{.literal} 属性更改为 powera
    `ve 或 power`{.literal} ``{.literal} Energy 设置。它还将
    `scaling_governor 策略`{.literal} 属性更改为 `ondemand`{.literal} 或
    `powersave`{.literal} CPU 调控器。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在某些情况下，与 `powersave`{.literal}
    配置集相比，`balanced`{.literal} 配置文件更高效。
    请考虑需要执行一系列明确的工作，例如需要转码的视频文件。如果在全功率上执行转码，因为任务很快完成，计算机开始空闲，并且可以自动步入到非常高效的节能模式，您的机器可能会消耗较少的能源消耗。另一方面，如果您用限流机器对文件进行转换，则计算机在转码期间消耗的功率较少，但这个过程需要更长的时间，总体消耗的能源可能会更高。
    因此，`平衡`{.literal} 配置文件通常是一个更好的选择。
    :::
[`throughput-performance`{.literal}]{.term}
:   针对高吞吐量优化的服务器配置文件。它禁用节能机制并启用
    `sysctl`{.literal} 设置，以提高磁盘和网络 IO 的吞吐量性能。CPU
    调控器被设置为 `performance`{.literal}。
    它将 energy `_performance_preference`{.literal} 和
    `scaling_governor`{.literal} 属性更改为 `性能`{.literal} 配置集。
[`accelerator-performance`{.literal}]{.term}
:   accelerator `-performance`{.literal} 配置集包含与
    `throughput-performance`{.literal} 配置集相同的调优。另外，它会将
    CPU 锁定为低 C 状态，从而使延迟少于 100us。这提高了某些加速器（如
    GPU）的性能。
[`latency-performance`{.literal}]{.term}
:   针对低延迟而优化的服务器配置文件。它禁用节能机制，并启用可改善延迟的
    `sysctl`{.literal} 设置。CPU 调控器被设置为 `性能`{.literal}，并且
    CPU 被锁定为低 C 状态（通过 PM QoS）。
    它将 energy `_performance_preference`{.literal} 和
    `scaling_governor`{.literal} 属性更改为 `性能`{.literal} 配置集。
[`network-latency`{.literal}]{.term}
:   低延迟网络调优配置文件。它基于 `latency-performance`{.literal}
    配置文件。它还禁用透明大内存页和 NUMA 平衡，并调优其他几个网络相关的
    `sysctl`{.literal} 参数。
    它继承 `latency-performance`{.literal} 配置集，该配置集将
    `energy_performance_preference`{.literal} 和
    `scaling_governor`{.literal} 属性更改为 `性能`{.literal} 配置集。
[`hpc-compute`{.literal}]{.term}
:   针对高性能计算优化的配置集。它基于 `latency-performance`{.literal}
    配置文件。
[`network-throughput`{.literal}]{.term}
:   用于吞吐量网络调优的配置文件。它基于
    `throughput-performance`{.literal}
    配置文件。它还会增加内核网络缓冲区。
    它继承 `latency-performance`{.literal} 或
    `throughput-performance`{.literal} 配置文件，并将 energy
    `_performance_preference`{.literal} 和 `scaling_governor`{.literal}
    属性更改为 `性能`{.literal} 配置集。
[`virtual-guest`{.literal}]{.term}
:   基于 `throughput-performance`{.literal} 配置集为 Red Hat Enterprise
    Linux 8 虚拟机和 VMWare
    客户机设计配置集，它可减少虚拟内存交换性并增加磁盘预读值。它不禁用磁盘障碍。
    它继承 `throughput-performance`{.literal} 配置文件，并将 Energy
    `_performance_preference`{.literal} 和 `scaling_governor`{.literal}
    属性更改为 `性能`{.literal} 配置集。
[`virtual-host`{.literal}]{.term}
:   基于 `throughput-performance`{.literal}
    配置集为虚拟主机设计的配置集，除了其他任务外，还可降低虚拟内存交换性，增加磁盘预读值，并启用更加积极的脏页面回写值。
    它继承 `throughput-performance`{.literal} 配置文件，并将 Energy
    `_performance_preference`{.literal} 和 `scaling_governor`{.literal}
    属性更改为 `性能`{.literal} 配置集。
[`Oracle`{.literal}]{.term}
:   根据 `throughput-performance`{.literal} 配置文件为 Oracle
    数据库负载优化的配置集。它还禁用透明大内存页并修改其他与性能相关的内核参数。此配置集由
    `tuned-profiles-oracle`{.literal} 软件包提供。
[`desktop`{.literal}]{.term}
:   基于 `均衡`{.literal}
    配置集为桌面优化的配置集。它还支持调度程序自动组，以更好地响应交互式应用程序。
[`optimize-serial-console`{.literal}]{.term}
:   通过减少 printk 值将 I/O
    活动向下调整到串行控制台的配置集。这可提高串行控制台的响应速度。这个配置集旨在用作其他配置集上的覆盖。例如：
    ``` screen
    # tuned-adm profile throughput-performance optimize-serial-console
    ```
[`mssql`{.literal}]{.term}
:   为 Microsoft SQL Server 提供的配置集。它基于
    `thoguhput-performance`{.literal} 配置文件。
[`intel-sst`{.literal}]{.term}
:   针对具有用户定义的 Intel Speed Select Technology
    配置的系统优化配置集。这个配置集旨在用作其他配置集上的覆盖。例如：
    ``` screen
    # tuned-adm profile cpu-partitioning intel-sst
    ```
:::
:::
::: section
::: titlepage
# []{#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#tuned-cpu-partitioning-profile_getting-started-with-tuned}tuned cpu-partitioning 配置集 {.title}
:::
为了针对对延迟敏感的工作负载调整 Red Hat Enterprise Linux
8，红帽建议使用 `cpu-partitioning`{.literal} TuneD 配置集。
在 Red Hat Enterprise Linux 8
之前，低延迟红帽文档描述了实现低延迟调优所需的众多低级别步骤。在 Red Hat
Enterprise Linux 8 中，您可以使用 `cpu-partitioning`{.literal} TuneD
配置集更有效地执行低延迟调优。该配置集可根据单个低延迟应用程序的要求轻松自定义。
下图是演示如何使用 `cpu-partitioning`{.literal} 配置集的示例：本例使用
cpu 和 node 布局。
::: figure
[]{#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#cpu-partitioning_getting-started-with-tuned}
**图 2.1. 图 cpu-partitioning**
::: figure-contents
::: mediaobject
![CPU 分区](images/cpu-partitioning.png)
:::
:::
:::
您可以使用以下配置选项在
`/etc/tuned/cpu-partitioning-variables.conf`{.literal} 文件中配置
cpu-partitioning 配置集：
::: variablelist
[使用负载均衡隔离 CPU]{.term}
:   在 cpu-partitioning 图中，编号为 4 到 23 的块是默认的隔离
    cpus。内核调度程序的进程负载平衡在这些 CPU
    上启用。它专为需要内核调度程序负载平衡的多个线程的低延迟进程设计。
    您可以使用
    `isolated_cores=cpu-list 选项在 /etc/tuned/cpu-partitioning-variables.conf`{.literal}
    文件中配置 cpu-``{=html} partitioning 配置集，它列出了 CPU
    来隔离将使用内核调度程序负载均衡的 CPU。
    隔离 CPU 列表用逗号分开，也可以使用破折号来指定范围，如
    `3-5`{.literal}。此选项是必需的。此列表中缺少的任何 CPU
    都会自动被视为内务 CPU。
[没有负载均衡的隔离 CPU]{.term}
:   在 cpu-partitioning 图中，编号为 2 和 3 的块是隔离的
    cpu，不提供任何其他内核调度程序进程负载均衡。
    您可以使用
    `no_balance_cores=cpu-list 选项在 /etc/tuned/cpu-partitioning-variables.conf`{.literal}
    文件中配置 cpu-``{=html} partitioning 配置集，它会列出 CPU
    来隔离不使用内核调度程序负载均衡的 CPU。
    指定 `no_balance_cores`{.literal} 选项是可选的，但此列表中的所有
    cpus 都必须是 `isolated_cores 列表中列出的 cpus`{.literal} 的子集。
    使用这些 CPU 的应用程序线程需要单独固定到各个 cpu。
[内务 CPU]{.term}
:   任何未在 `cpu-partitioning-variables.conf`{.literal} 文件中隔离的
    cpu 都会自动被视为 housekeeping cpu。在内务 CPU
    上，允许执行所有服务、守护进程、用户进程、可移动内核线程、中断处理程序和内核定时器。
:::
::: itemizedlist
**其它资源**
-   `tuned-profiles-cpu-partitioning(7)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#using-the-tuned-cpu-partitioning-profile-for-low-latency-tuning_getting-started-with-tuned}使用 TuneD cpu-partitioning 配置集进行低延迟调整 {.title}
:::
此流程描述了如何使用 TuneD 的 `cpu-partitioning`{.literal}
配置集为低延迟调整系统。它使用了低延迟应用的示例，它可以使用
`cpu-partitioning`{.literal} 和 CPU 布局，如
[cpu-partitioning](#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#cpu-partitioning_getting-started-with-tuned "图 2.1. 图 cpu-partitioning"){.link}
图中所述。
在这种情况下，应用程序使用：
::: itemizedlist
-   从网络读取数据的专用读取线程将固定到 CPU 2。
-   处理这个网络数据的大量线程将被固定到 CPU 4-23。
-   将处理的数据写入网络的一个专用写入线程将固定到 CPU 3。
:::
::: itemizedlist
**先决条件**
-   您已使用
    `yum install tuned -profiles-cpu-partitioning 命令安装 cpu`{.literal}
    -partitioning``{=html} TuneD 配置集。
:::
::: orderedlist
**流程**
1.  编辑 `/etc/tuned/cpu-partitioning-variables.conf`{.literal}
    文件并添加以下信息：
    ``` screen
    # Isolated CPUs with the kernel’s scheduler load balancing:
    isolated_cores=2-23
    # Isolated CPUs without the kernel’s scheduler load balancing:
    no_balance_cores=2,3
    ```
2.  设置 `cpu-partitioning`{.literal} TuneD 配置集：
    ``` screen
    # tuned-adm profile cpu-partitioning
    ```
3.  重启
    重新启动后，系统将根据 cpu-partitioning
    图中的隔离，调优为低延迟。应用可以使用 taskset
    将读取器和写入线程固定到 cpus 2 和 3，并将 cpus 4-23
    上的其余应用线程固定到 cpus 2 和 3。
:::
::: itemizedlist
**其它资源**
-   `tuned-profiles-cpu-partitioning(7)`{.literal} man page
:::
:::
::: section
::: titlepage