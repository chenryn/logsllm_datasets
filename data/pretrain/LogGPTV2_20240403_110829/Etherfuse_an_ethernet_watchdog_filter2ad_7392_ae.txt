### 1. Introduction of Low-Rate Broadcast Stream

We introduce a low-rate broadcast stream of 100 Kb/s. In the absence of EtherFuse, response times are significantly degraded due to packet loss caused by network saturation. This is because the broadcast packets get trapped in a loop, leading to congestion.

### 2. Response Time Analysis

#### Without EtherFuse
- **Response Time (s)**
  - 20
  - 15
  - 10
  - 5
  - 0
- **Time (s)**
  - 0
  - 5
  - 10
  - 15
  - 20
  - 25
  - 30
  - 35
  - 40

**Figure 14(a):** Timeline of response times for HTTP requests generated every tenth of a second under a count-to-infinity induced temporary forwarding loop. The count to infinity starts at t=10. A background broadcast traffic of 100 Kb/s is injected into the network.

#### With EtherFuse
- **Response Time (s)**
  - 20
  - 15
  - 10
  - 5
  - 0
- **Time (s)**
  - 0
  - 5
  - 10
  - 15
  - 20
  - 25
  - 30
  - 35
  - 40

**Figure 14(b):** Timeline of response times for HTTP requests with EtherFuse. The device quickly detects and mitigates the forwarding loop, reducing response times.

### 3. Impact on Web Requests

Some web requests experience a 21-second response time due to three consecutive packet drops during the connection phase, leading to three exponential backoffs. When using EtherFuse, it rapidly detects both the count to infinity and the forwarding loop, cutting the loop to recover from the failure.

### 4. Duplicate Packets Detection

To further understand the scenario, Table 3 shows the number of duplicate packets detected in the network. Note that a large number of duplicate packets are detected when there is background broadcast traffic and no EtherFuse.

| Configuration | Number of Duplicate Frames |
|---------------|---------------------------|
| EtherFuse     | 9                         |
| No EtherFuse  | 57481                     |
| Broadcast     | 1                         |
| No Broadcast  | 2                         |

**Table 3:** Number of duplicate frames detected in the network for the HTTP workload in the event of having a forwarding loop.

### 5. Impact on FTP

Table 4 shows the transfer times for a 400MB file over FTP when there is a count-to-infinity induced forwarding loop. We observe that many duplicate packets persist in the network, as quantified in Table 5.

| Configuration | Transfer Time (s) |
|---------------|-------------------|
| No Failure    | 37.2              |
| With EtherFuse| 141               |
| Without EtherFuse | 35.9           |
| Broadcast     | 36                |
| No Broadcast  | 140               |

**Table 4:** Transfer times for a 400MB file over FTP.

The primary reason for the long transfer time without EtherFuse is forwarding table pollution. This pollution causes the FTP client to be cut off from the network for an extended period. The problem is resolved when the ARP cache entry for the FTP client expires, and the server sends an ARP request, which restores connectivity. With EtherFuse, this issue does not occur because the device detects and cuts the loop, sending a topology change message to flush the forwarding tables.

### 6. Effects of Multiple Forwarding Loops

Multiple forwarding loops can occur due to MaxAge-induced forwarding loops or simultaneous failures. To demonstrate the seriousness of multiple forwarding loops, we use the network topology in Figure 7(b) with STP and a MaxAge value of 2. We inject a single broadcast packet and measure the number of duplicate packets observed every millisecond.

- **Without EtherFuse:**
  - **Duplicate Packets:**
    - 60
    - 50
    - 40
    - 30
    - 20
    - 10
    - 0
  - **Time (ms):**
    - 0
    - 10
    - 20
    - 30
    - 40
    - 50
    - 60
    - 70
    - 80

- **With EtherFuse:**
  - **Duplicate Packets:**
    - 60
    - 50
    - 40
    - 30
    - 20
    - 10
    - 0
  - **Time (ms):**
    - 0
    - 10
    - 20
    - 30
    - 40
    - 50
    - 60
    - 70
    - 80

**Figure 15:** Timeline of the number of duplicate packets observed after the formation of two forwarding loops and injecting an ARP request into the network.

### 7. Discussion

EtherFuse effectively reduces the effects of a forwarding loop. Between the onset of a loop and its detection, the network may experience brief packet duplication. However, EtherFuse quickly stops duplication before it leads to congestion and packet loss. These benefits are achieved without changing spanning tree protocols.

While EtherFuse can mitigate the count-to-infinity problem by reducing spanning tree convergence time, its impact is limited by BPDU transmission rate limits. Solutions that modify spanning tree protocols, such as RSTP with Epochs, can achieve faster convergence.

### 8. Related Work

This work focuses on mitigating Ethernet failures without changing the existing infrastructure. Previous works, such as Loop Guard and UDLD, require manual configuration and are not universally implemented. Other approaches, like SmartBridges and Rbridges, propose new routing mechanisms but do not address all types of forwarding loops.

### 9. Conclusions

Ethernet, despite its pervasiveness, can suffer from serious problems due to local failures. We introduced EtherFuse, a backward-compatible device that requires no changes to existing hardware, software, or protocols. Our prototype demonstrates that EtherFuse effectively reduces the effects of forwarding loops and mitigates the count-to-infinity problem, providing significant benefits in a fully backward-compatible manner.

### 10. References

[1] Emulab - network emulation testbed. At http://www.emulab.net.
[2] A. Barnard. Got paper? Beth Israel Deaconess copes with a massive computer crash. Boston Globe, November 26, 2002.
[3] Beth Israel Deaconess Medical Center. Network Outage Information. At http://home.caregroup.org/templatesnew/departments/BID/network_outage/.
[4] Cisco Systems, Inc. Configuring Broadcast Suppression. At http://www.cisco.com/univercd/cc/td/doc/product/lan/cat6000/sw_8_5/confg_gd/bcastsup.htm.
[5] Cisco Systems, Inc. Internet Protocol Multicast. At http://www.cisco.com/univercd/cc/td/doc/cisintwk/ito_doc/ipmulti.htm.
[6] Cisco Systems, Inc. Spanning-Tree Protocol Enhancements using Loop Guard and BPDU Skew Detection Features. At www.cisco.com/warp/public/473/84.html.
[7] Cisco Systems, Inc. Spanning Tree Protocol Problems and Related Design Considerations. At http://www.cisco.com/warp/public/473/16.html.
[8] Cisco Systems, Inc. Troubleshooting Transparent Bridging Environments. At www.cisco.com/warp/public/112/chapter20.pdf.
[9] Cisco Systems, Inc. Understanding and Configuring the Unidirectional Link Detection Protocol Feature. At www.cisco.com/warp/public/473/77.html.
[10] Cisco Systems, Inc. Understanding Rapid Spanning Tree Protocol (802.1w). At http://www.cisco.com/warp/public/473/146.html.
[11] K. Elmeleegy, A. L. Cox, and T. S. E. Ng. On Count-to-Infinity Induced Forwarding Loops in Ethernet Networks. In IEEE Infocom 2006, Apr. 2006.
[12] K. Elmeleegy, A. L. Cox, and T. S. E. Ng. Supplemental Note on Count-to-Infinity Induced Forwarding Loops in Ethernet Networks. Technical Report TR06-878, Department of Computer Science, Rice University, 2006.
[13] R. Garcia, J. Duato, and F. Silla. LSOM: A link state protocol over MAC addresses for metropolitan backbones using optical Ethernet switches. In Second IEEE International Symposium on Network Computing and Applications (NCA ’03), Apr. 2003.
[14] M. Newbold, M. Hibler, C. Barb, and A. Joglekar. An Integrated Experimental Environment for Distributed Systems and Networks. In Proceedings of the Fifth Symposium on Operating Systems Design and Implementation (OSDI’02), Dec. 2002.
[15] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. F. Kaashoek. The Click modular router. ACM Transactions on Computer Systems, 18(3):263–297, August 2000.
[16] LAN/MAN Standards Committee of the IEEE Computer Society. IEEE Standard for Local and Metropolitan Area Networks: Virtual Bridged Local Area Networks, 2003.
[17] LAN/MAN Standards Committee of the IEEE Computer Society. IEEE Standard for Local and Metropolitan Area Networks: Media Access Control (MAC) Bridges - 802.1D, 2004.
[18] A. Myers and T. S. E. Ng. BridgeSim - bridge simulator. Version 0.03 is available from the author’s web site, http://www.cs.cmu.edu/~acm/bridgesim/, May 2005.
[19] A. Myers, T. S. E. Ng, and H. Zhang. Rethinking the Service Model: Scaling Ethernet to a Million Nodes. In Third Workshop on Hot Topics in Networks (HotNets-III), Mar. 2004.
[20] R. Perlman. Rbridges: Transparent routing. In IEEE Infocom 2004, Mar. 2004.
[21] T. L. Rodeheffer, C. A. Thekkath, and D. C. Anderson. SmartBridge: A scalable bridge architecture. In ACM SIGCOMM 2000, Aug. 2000.
[22] S. Sharma, K. Gopalan, S. Nanda, and T. Chiueh. Viking: A multi-spanning-tree Ethernet architecture for metropolitan area and cluster networks. In IEEE Infocom 2004, Mar. 2004.
[23] B. White, J. Lepreau, L. Stoller, R. Ricci, S. Guruprasad,