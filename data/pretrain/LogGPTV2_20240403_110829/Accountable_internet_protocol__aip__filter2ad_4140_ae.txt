### Advertising Sub-Prefixes for Traffic Engineering

Advertising sub-prefixes of a prefix \( P \) to different upstream routers, all belonging to the same ISP, relies on that ISP to aggregate the sub-prefixes to prevent them from reaching the global routing tables. With AIP as presented so far, achieving such traffic engineering without increasing the number of globally visible AD entries seems challenging.

However, we believe that splitting and then aggregating prefixes for traffic engineering is not widely practiced today. To test this, we conducted a measurement study by obtaining a /17 prefix and advertising various sub-prefixes of size /18 and /19 via BGP. Each sub-prefix had the same AS path and IP layer path, making it easy for an upstream AS to aggregate these sub-prefix advertisements into a single one. Our examination of BGP routing tables at many Internet vantage points revealed that no aggregation occurred, despite many different ISPs having the opportunity to do so. Private conversations with some ISP operators confirmed our findings: such explicit aggregation is almost never done today.

### Explanation and Experimentation

To understand why, we conducted a related experiment. We announced a /18 via two large Tier-1 ISPs, A and B, and the containing /17 from just one of them (B) to emulate the case where an upstream (the /17) owns a larger chunk and a stub is punching a hole to multi-home. The /18 announced to the two upstream ISPs was seen by all of the many BGP vantage points we checked. Using traceroute, we found that some nodes in the Internet reached the /18 via A and some via B. If A had aggregated the /18s into a single /17, longest-prefix matching would likely cause all traffic to arrive via B. Such unilateral filtering and aggregation could be harmful and violate the stub network’s traffic engineering goals.

We then withdrew the /18 through B, simulating the case when the link between the stub and its primary fails. If some AS had filtered the /18s earlier, it would not have seen the withdrawal of the /18 through B, and hence continued to use that route to get to destinations in the withdrawn /18. Instead, we found that all subsequent traceroutes took the valid route through A. This result suggests that ISPs today do not arbitrarily filter route advertisements even when they might be redundant; one reason might be to avoid failing in situations like the one described. Thus, it appears that a stub network’s BGP announcements remain invariant as they propagate across the Internet. The simple approach of making each of today’s prefixes an AD might well be adequate for interdomain traffic engineering.

### Future Considerations

If operators wish to use such load balancing in the future, they can make use of the AIP address interface bits to sub-divide an AD, allowing an operator to announce different routes for each AD:interface bits combination. Specifically, an administrator could partition the EIDs belonging to the different subnetworks of an AD into one of 255 possible “paths” (in practice, we expect the number of paths to be much smaller) by setting a different value of the interface field for each partition. Any upstream network can choose to zero the interface bits in its wide-area advertisements to reduce the amount of global routing table state, similar to how it aggregates prefixes today. Thus, most wide-area routers will forward using AD lookups as before, but those near the destination might need to pay attention to the interface bits of an AD address.

It is important to note that BGP messages are still signed using the AD’s private key, and there remains only one key pair for the entire AD. Finally, AIP leaves unchanged an operator’s ability to perform equal-cost multipath routing by hashing packet header fields to direct traffic to one of \( k \) links.

### DNS-Based Load Balancing

Another component of traffic engineering is a service-centric view: How to load balance traffic destined for a particular service across machines in a cluster or across data centers. In general, the move to AIP has only a small, positive effect on this ability. DNS-based load balancing can still change the AIP-record corresponding to a host or service name. AIP’s interface bits might simplify cluster-based load-balancing by representing a service as a single “host” connected to the network multiple times; we leave the design of such specific mechanisms to future work.

### Related Work

Many features of AIP have similar forerunners in the literature. Below, we list some of the major ideas that AIP draws upon:

- **Self-certifying names**: Some forms of addressing are already self-certifying, such as CGA [5] and HIP [29]. AIP extends self-certification to the entire network-level address.
- **Separating identifiers and locators**: Ever since the GSE/8+8 [30] proposal, it has been widely acknowledged that addressing should separate identification from location. The more recent LISP proposal also suggests forwarding traffic based on routing locators that are separate from endpoint identifiers [9]. AIP provides a similar separation of function: The AD provides location information, while the EID is purely an identifier. Unlike LISP, AIP does not require tunneling to route on locators, and AIP’s addresses are self-certifying.
- **Scalability**: The scalability of Internet routing has been a long-standing concern. CIDR has helped sustain the routing table and control traffic load growth until increases in peering, site-multihoming, and preference for provider-independent addresses have combined to reduce CIDR’s effectiveness. Recent proposals have tried to re-establish aggregation by introducing address aggregates in the control plane [17] or in both the control and forwarding planes [41, 46] to limit the growth of routing tables.
- **Source accountability**: Several mechanisms have been proposed to improve source accountability, such as installing filters on border routers of an AS [10, 20] and using cryptography to prevent spoofing [25].
- **Control-plane accountability**: Various proposals augment the routing protocol with cryptographic mechanisms to prevent routers from originating false routes, such as S-BGP [19] and secure origin BGP (soBGP) [44].

### Conclusion

AIP is our attempt to answer the question: "What might the Internet’s network layer look like if accountability were a first-order goal?" By using a simple hierarchical addressing scheme with self-certifying components, AIP enables simple solutions to source spoofing, shutting off certain kinds of DoS traffic, and securing BGP. The move away from prefixes to flat addresses brings up concerns about route scalability and traffic engineering, while the use of self-certification raises questions of key management and compromise. Our discussion of these issues leads us to conclude that, while hoping for a near-term replacement to IP might be like building castles in the air, these important concerns are not a show-stopper for AIP (or the ideas contained therein) to be widely adopted.

### Acknowledgments

We thank Mythili Vutukuru for conducting the traffic engineering experiments reported in Section 6. We also thank Mythili and Michael Walfish for participating in the early stages of the AIP project and contributing to its design. Jakob Eriksson, Lewis Girod, Ramakrishna Gummadi, Adrian Perrig, Amar Phanishayee, Anirudh Ramachandran, Vijay Vasudevan, the attendees of the 6th HotNets workshop, and the anonymous reviewers provided helpful comments that improved the paper. This work was funded in part by the National Science Foundation under awards CNS-0716273 and CNS-0520241.

### References

[References are listed as provided in the original text.]

This revised version aims to enhance clarity, coherence, and professionalism, ensuring that the content is well-structured and easily understandable.