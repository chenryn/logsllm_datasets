X1保存的是当前cpu的`struct
pmap_cpu_data`结构体指针，0x10偏移为`save_area`，它指向了`arm_context_t`类型的内存区域，将这个内存区域设置为`EL1_Guard
level`的sp地址。在从el1进入`EL1_Guard level`时，将全部的寄存器保存在这个区域。
    ADRP       X1, #_pmap_ppl_locked_down@PAGE
    LDR       X2, [X1,#_pmap_ppl_locked_down@PAGEOFF]
    CBZ       X2, loc_FFFFFFF0098116C0
接着判断`_pmap_ppl_locked_down`值是否为0，如果为0，则一直循环检查下去。在前面的`machine_lockdown`函数中已经将`_pmap_ppl_locked_down`设置为了1，所以会继续运行下面的代码：
    MOVK       X0, #0x2020,LSL#48
    MOVK       X0, #0xA506,LSL#32
    MOVK       X0, #0xF020,LSL#16
    MOVK       X0, #0xF0E0
    MSR       #6, c15, c3, #0, X0
    MOVK       X0, #0,LSL#48
    MOVK       X0, #0,LSL#32
    MOVK       X0, #0,LSL#16
    MOVK       X0, #5
    MSR       #6, c15, c1, #2, X0
    ADRL       X0, _invalid_ttep
    LDR       X0, [X0]
    MSR       #0, c2, c0, #0, X0
将0x2020a506f020f0e0赋值给了`S3_6_C15_C3_0`寄存器，将0x5赋值给了`S3_6_C15_C1_2`寄存器，将`_invalid_ttep`页表地址赋值给了`TTBR0_EL1`。
    SYS       #0, c8, c3, #0
    DSB       ISH
    ISB
    DCD 0x201400
执行0x201400指令，退出`EL1_Guard level`。
至此ppl全部初始化已经完成， el1代码可以请求`EL1_Guard level`的服务了。
## Ppl进入与退出
Ppl给el1代码提供了`_gxf_ppl_enter`接口用于请求其服务。
    _arm_fast_fault_ppl:
    mov   x15, #0x0
    b    _gxf_ppl_enter
    _arm_force_fast_fault_ppl:
    mov   x15, #0x1
    b    _gxf_ppl_enter
    _mapping_free_prime_ppl:
    mov   x15, #0x2
    b    _gxf_ppl_enter
这里只罗列部分函数，x15保存的是ppl服务表的索引。
    _gxf_ppl_enter:
    fffffff008131c3c     pacibsp
    fffffff008131c40     stp   x20, x21, [sp, #-0x20]! ; Latency: 6
    fffffff008131c44     stp   x29, x30, [sp, #0x10]  ; Latency: 6
    fffffff008131c48     add   x29, sp, #0x10
    fffffff008131c4c     mrs   x9, TPIDR_EL1
    fffffff008131c50     ldr   w10, [x9, #0x500]    ; Latency: 4
    fffffff008131c54     add   w10, w10, #0x1
    fffffff008131c58     str   w10, [x9, #0x500]    ; Latency: 4
    fffffff008131c5c     adrp   x14, 5867 ; _pmap_ppl_locked_down
    fffffff008131c60     add   x14, x14, #0x130
    fffffff008131c64     ldr   x14, [x14]        ; Latency: 4
    fffffff008131c68     cbz   x14, _ppl_bootstrap_dispatch
    fffffff008131c6c     mrs   x14, S3_6_C15_C8_0
    fffffff008131c70     cmp   x14, #0x0
    fffffff008131c74     b.ne   0xfffffff008131c74
    fffffff008131c78     mov   w10, #0x0
    fffffff008131c7c     .long  0x00201420
首先检查`_pmap_ppl_locked_down`是否为0，如果为0，说明ppl并没有初始化完成，直接跳转到`_ppl_bootstrap_dispatch`函数：
    CMP       X15, #0x47 ; 'G'
    B.CS       loc_FFFFFFF008131DD4
    ADRL       X9, _ppl_handler_table
    ADD       X9, X9, X15,LSL#3
X15保存的是`_ppl_handler_table`的索引，如果大于0x47,会触发panic。
    LDR       X10, [X9]
    BLRAA      X10, X9
跳转到`_ppl_handler_table[x15ppl_state
W9保存的是ppl的当前状态`ppl_state`，ppl的状态有3个定义：
    PPL_STATE_KERNEL
    PPL_STATE_DISPATCH
    PPL_STATE_EXCEPTION
`_ppl_trampoline_start`这个函数可以由`ppl_enter`由el1代码主动调用，也可以由`EL1_Guard
level`的异常处理调用，在后面会分析到。
    CMP       W9, #0  ; PPL_STATE_KERNEL
    B. EQ       loc_FFFFFFF00980D970
W9为0，即`PPL_STATE_KERNEL`，表示可以请求ppl服务。
    loc_FFFFFFF00980D970           ; CODE XREF: _ppl_trampoline_start+60↑j
    CMP       W10, #0
判断w10是否为0，注意在前面的`ppl_enter`路径中，已经将w10设置为了0，所以代码可以进行前进。
    B.NE       loc_FFFFFFF00980D9AC
    MOV       W13, #1
    STR       W13, [X12,#0x18] ; enter PPL_STATE_DISPATCH mode
更改`ppl_state`状态为1，即 `PPL_STATE_DISPATCH`，表示ppl正处在服务派发状态中。
    LDR       X9, [X12,#8] ; _pmap_cpu_data->ppl_stack
    MOV       X21, SP
    MOV       SP, X9
`_pmap_cpu_data->ppl_stack`保存的是ppl服务要使用的stack区域。注意`_pmap_cpu_data->save_area`保存的是进入`EL1_Guard
level`异常处理时保存全部寄存器用的栈区域。
    STR       X21, [X12] ; save old el1 sp
保存el1原来的sp到`_pmap_cpu_data->ppl_kern_saved_sp`，以后退出ppl服务时还要恢复原来的stack指针。
    ADRL       X9, _ppl_handler_table
    ADD       X9, X9, X15,LSL#3 ; _ppl_handler_table[indexppl_state
    CMP       W9, #1  ; PPL_STATE_DISPATCH
    B.NE       loc_FFFFFFF00980D9D0
    MOV       W9, #0
    STR       W9, [X12,#0x18] ; PPL_STATE_KERNEL
服务执行完之后，要把`ppl_state`再次设置 `PPL_STATE_KERNEL`。
    B        ppl_return_to_kernel_mode
最后调用`ppl_return_to_kernel_mode`退出`EL1_Guard level`，返回el1代码。
    ADRL       X14, ppl_exit
    MSR       #0, c4, c0, #1, X14 ; ELR_EL1
    MRS       X14, #6, c15, c8, #3
    AND       X14, X14, #0xFFFFFFFFFFFFFFFE
    MSR       #6, c15, c8, #3, X14 ; S3_6_C15_C8_3
    MRS       X14, #0, c4, c0, #0 ; SPSR_EL1
    AND       X14, X14, #0xFFFFFFFFFFFFFC3F
    ORR       X14, X14, X10
    MSR       #0, c4, c0, #0, X14 ; SPSR_EL1 -> EL3h
    MRS       X14, #0, c13, c0, #4 ; TPIDR_EL1
    MSR       #6, c15, c9, #1, X14 ; S3_6_C15_C9_1
    DCQ 0x201400
首先将`ELR_EL1`设置为`ppl_exit`，然后将`S3_6_C15_C8_3`的最低位清0，然后将`SPSR_EL1`设置为
EL3h，注意`SPSR_EL1`的第2个bit设置为了1，在arm手册里这个bit是保留的，说明苹果处理器使用了这个bit代表ppl的执行状态，但是很奇怪为啥都设置为EL3h,而不是EL1h？随后将`TPIDR_EL1`值保存在了`S3_6_C15_C9_1`寄存器。
最后执行0x201400退出`EL1_Guard
level`，由于`ELR_EL1`寄存器保存的是`ppl_exit`，cpu跳转到`ppl_exit`继续执行,
`ppl_exit`恢复之前屏蔽的中断，然后使用ret指令返回。
上面分析的是一个正常通过`ppl_enter`请求ppl服务的路径。下面继续返回`_ppl_trampoline_start`代码。
    CMP       W9, #1  ; PPL_STATE_DISPATCH
    C. EQ       loc_FFFFFFF00980D9A4 ; _pmap_cpu_data_array->ppl_kern_saved_sp
如果当前`ppl_state`状态为`PPL_STATE_DISPATCH`，表示有其他cpu正在请求ppl服务，因此恢复之前通过`_pmap_cpu_data_array->ppl_kern_saved_sp`保存的栈，然后退出`EL1_Guard
level`，前面的路径已经分析过了。
    CMP       W9, #3  ; PPL_STATE_EXCEPTION
    B. NE       loc_FFFFFFF00980D9AC
如果`ppl_state`也不是`PPL_STATE_EXCEPTION`，则直接退出`EL1_Guard level`。
    CMP       W10, #3 ; PPL_STATE_EXCEPTION
    C. NE       loc_FFFFFFF00980D9AC
    MOV       W9, #1
    STR       W9, [X12,#0x18] ; PPL_STATE_DISPATCH
    LDR       X0, [X12,#0x10] ; _pmap_cpu_data_array->save_area
    MOV       SP, X0
    B        _return_to_ppl
将sp设置为`_pmap_cpu_data_array->save_area`，`_return_to_ppl`要使用这个栈恢复之前进入`EL1_Guard
level`异常处理时保存的全部寄存器值，恢复`cpsr, ELR_EL1`设置原来的调用地址，恢复bp,sp，通过eret返回原来的el1路径中。
为啥要判断w10的值是否为3？这个路径表示的是`EL1_Guard level`异常处理路径中要请求ppl服务。
`_GuardedExceptionVectorsBase`是`EL1_Guard
level`异常处理地址，我们看到它只对0x000的offset使用了有效函数，表明它只处理来自同层current
level的异常处理，再次证明`EL1_Guard level`也是在EL1 level上。
    __PPLTEXT:__text:FFFFFFF0098114B0 gtr_sync：
    MOV       X26, #1
    ADRL       X1, _fleh_synchronous ; ESR_EL1
    MSR       #0, c4, c0, #1, X1 ; ELR_EL1
可以看到`gtr_sync`把`_fleh_synchronous`赋值给了`ELR_EL1`， x26设置为1很关键，这是一个标识，后面会讲到。
    MOV       X0, SP
    DCD 0x201400