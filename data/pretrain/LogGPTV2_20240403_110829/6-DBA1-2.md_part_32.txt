Query OK, 1 row affected (0.01 sec)
在主库上面查看
mysql\> use aa
mysql\> select \* from t2;
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 777 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
从库（主库同步到从库）
mysql\> use aa
mysql\> select \* from t2;
+\-\-\-\-\--+
\| id \|
+\-\-\-\-\--+
\| 777 \|
+\-\-\-\-\--+
1 row in set (0.00 sec)
2 案例2：配置MySQL多实例
2.1 问题
在主机192.168.4.56上，配置第1个MySQL实例
实例名称mysql1、端口3307
数据库目录/data3307、pid文件mysql1.pid
错误日志mysql1.err
在主机192.168.4.56上，配置第2个MySQL实例
实例名称mysql2、端口3308
数据库目录/data3308、pid文件mysql2.pid
错误日志mysql2.err
步骤一：配置多实例（192.168.4.56上面操作）
什么是多实例：
在一台物理主机上运行多个数据库服务，可以节约运维成本，提高硬件利用率
1）解压软件、修改目录名
\[root@mysql \~\]# cd mysql/
\[root@mysql mysql\]# ls
mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz
\[root@mysql mysql\]# tar -xf mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz
\[root@mysql mysql\]# mv mysql-5.7.20-linux-glibc2.12-x86_64
/usr/local/mysql
2）调整PATH变量
\[root@mysql mysql\]# echo \"export PATH=/usr/local/mysql/bin:\$PATH\"
\\
\>\> /etc/profile
\[root@mysql mysql\]# source /etc/profile
\[root@mysql mysql\]# echo \$PATH
/usr/local/mysql/bin:/usr/local/mycat/bin:/usr/local/mycat/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/root/bin
3）编辑主配置文件/etc/my.cnf
每个实例要有独立的数据库目录、监听端口号、实例名称和独立的sock文件
\[mysqld_multi\] //启用多实例
mysqld = /usr/local/mysql/bin/mysqld_safe //指定进程文件路径
mysqladmin = /usr/local/mysql/bin/mysqladmin //指定管理命令路径
user = root //指定进程用户
\[mysqld1\] //实例进程名称
port=3307 //端口号
datadir=/data3307 //数据库目录 ，要手动创建
socket=/data3307/mysqld.sock //指定sock文件的路径和名称
pid-file=/data3307/mysql1.pid //进程pid号文件位置
log-error=/data3307/mysql1.err //错误日志位置
\[mysqld2\]
port=3308
datadir=/data3308
socket=/data3308/mysqld.sock
pid-file=/data3308/mysql2.pid
log-error=/data3308/mysql2.err
4）创建数据库目录
\[root@mysql mysql\]# mkdir -p /data3307
\[root@mysql mysql\]# mkdir -p /data3308
5）创建进程运行的所有者和组 mysql
\[root@mysql mysql\]# useradd mysql
\[root@mysql mysql\]# chown mysql:mysql /data\*
6）初始化授权库
\[root@mysql mysql\]# mysqld \--user=mysql \--basedir=/usr/local/mysql
\--datadir=/data3307 \--initialize
\...
2018-09-26T07:07:33.443378Z 1 \[Note\] A temporary password is generated
for root@localhost: 7L?Vi!dGKmgu //root用户登录的初始化密码
\[root@mysql mysql\]# mysqld \--user=mysql \--basedir=/usr/local/mysql
\--datadir=/data3308 \--initialize
\...
2018-09-26T07:08:07.770289Z 1 \[Note\] A temporary password is generated
for root@localhost: kC)BbyUp1a-b //root用户登录的初始化密码
7）启动多实例
\[root@mysql mysql\]# mysqld_multi start 1 //1为实例编号
\[root@mysql mysql\]# mysqld_multi start 2
8）查看端口
\[root@mysql mysql\]# netstat -utnlp \| grep :3307
tcp6 0 0 :::3307 :::\* LISTEN 21009/mysqld
\[root@mysql mysql\]# netstat -utnlp \| grep :3308
tcp6 0 0 :::3308 :::\* LISTEN 21177/mysqld
\[root@mysql mysql\]# ps -C mysqld
PID TTY TIME CMD
21009 pts/1 00:00:00 mysqld
21177 pts/1 00:00:00 mysqld
9）访问多实例
使用初始化密码登录多实例1
\[root@mysql mysql\]# mysql -u root -p\'7L?Vi!dGKmgu\' -S
/data3307/mysqld.sock
mysql\> alter user root@\"localhost\" identified by \'123456\';
//修改密码
mysql\> show databases;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Database \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| information_schema \|
\| mysql \|
\| performance_schema \|
\| sys \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
4 rows in set (0.00 sec)
使用初始化密码登录多实例2
\[root@mysql bin\]# mysql -u root -p\'kC)BbyUp1a-b\' -S
/data3307/mysqld.sock
mysql\> alter user root@\"localhost\" identified by \'123456\';
//修改密码
mysql\> show databases;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Database \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| information_schema \|
\| mysql \|
\| performance_schema \|
\| sys \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
4 rows in set (0.00 sec)
10）创建库
mysql\> create database db1;
Query OK, 1 row affected (0.00 sec)
mysql\> show databases;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Database \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| information_schema \|
\| db1 \|
\| mysql \|
\| performance_schema \|
\| sys \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
5 rows in set (0.00 sec)
11）停止启动的实例服务
mysqld_multi \--user=root \--password=密码 stop 实例编号
\[root@mysql mysql\]# mysqld_multi \--user=root \--password=123456 stop
1
\[root@mysql mysql\]# netstat -utnlp \| grep :3307 //查看没有端口
\[root@mysql mysql\]# mysqld_multi \--user=root \--password=123456 stop
2
\[root@mysql mysql\]# netstat -utnlp \| grep :3308 //查看没有端口
\[root@mysql mysql\]# mysql -uroot -p123456 -S /data3307/mysqld.sock
//拒绝连接
mysql: \[Warning\] Using a password on the command line interface can be
insecure.
ERROR 2002 (HY000): Can\'t connect to local MySQL server through socket
\'/data3307/mysqld.sock\' (2)
3 案例3：MySQL性能优化
3.1 问题
练习相关优化选项
启用慢查询日志
查看各种系统变量、状态变量
3.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：mysql性能优化
1）查看服务运行时的参数配置
mysql\> show variables\\G;
\...\...
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 171. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Variable_name: innodb_log_file_size
Value: 50331648
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 172. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Variable_name: innodb_log_files_in_group
Value: 2
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 173. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Variable_name: innodb_log_group_home_dir
Value: ./
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 174. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Variable_name: innodb_log_write_ahead_size
Value: 8192
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 175. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Variable_name: innodb_lru_scan_depth
Value: 1024
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 176. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Variable_name: innodb_max_dirty_pages_pct
Value: 75.000000
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 177. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Variable_name: innodb_max_dirty_pages_pct_lwm
Value: 0.000000
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\* 178. row
\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*
Variable_name: innodb_max_purge_lag
Value: 0
\...\...
mysql\> show variables like \"%innodb%\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
\| ignore_builtin_innodb \| OFF \|
\| innodb_adaptive_flushing \| ON \|
\| innodb_adaptive_flushing_lwm \| 10 \|
\| innodb_adaptive_hash_index \| ON \|
\| innodb_adaptive_hash_index_parts \| 8 \|
\| innodb_adaptive_max_sleep_delay \| 150000 \|
\...\...
\...\...
\| innodb_undo_log_truncate \| OFF \|
\| innodb_undo_logs \| 128 \|
\| innodb_undo_tablespaces \| 0 \|
\| innodb_use_native_aio \| ON \|
\| innodb_version \| 5.7.17 \|
\| innodb_write_io_threads \| 4 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+
134 rows in set (0.01 sec)
2）并发连接数量
查看当前已经使用的连接数
mysql\> flush status;
Query OK, 0 rows affected (0.00 sec)
mysql\> show global status like \"Max_used_connections\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Max_used_connections \| 3 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
1 row in set (0.00 sec)
查看默认的最大连接数
mysql\> show variables like \"max_connections%\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
\| max_connections \| 151 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\--+
1 row in set (0.00 sec)
3）连接超时时间
mysql\> show variables like \"%timeout%\";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+
\| Variable_name \| Value \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+
\| connect_timeout \| 10 \|
\| delayed_insert_timeout \| 300 \|
\| have_statement_timeout \| YES \|
\| innodb_flush_log_at_timeout \| 1 \|
\| innodb_lock_wait_timeout \| 50 \|
\| innodb_rollback_on_timeout \| OFF \|
\| interactive_timeout \| 28800 \|
\| lock_wait_timeout \| 31536000 \|
\| net_read_timeout \| 30 \|
\| net_write_timeout \| 60 \|
\| rpl_stop_slave_timeout \| 31536000 \|
\| slave_net_timeout \| 60 \|
\| wait_timeout \| 28800 \|
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\--+
13 rows in set (0.00 sec)
4）允许保存在缓存中被重用的线程数量
mysql\> show variables like \"thread_cache_size\";