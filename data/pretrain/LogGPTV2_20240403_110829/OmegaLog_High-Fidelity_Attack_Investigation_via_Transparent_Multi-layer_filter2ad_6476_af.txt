### Optimized Text

**From the FTP Server, the Administrator Can Attribute the Theft to Specific User Credentials**

Note that while existing execution-partitioning systems such as ProTracer [42] and BEEP [39] can mitigate dependency explosion in this scenario, they do not fully address the issue.

**Figure 9: Phishing Email Attack Scenario**
- (a) Attack provenance graph generated by traditional solutions.
- (b) Semantic-aware and execution-partitioned provenance graph generated by OmegaLog.

**Evaluation (§IX) Demonstrated:**
We are able to identify log statements in all profiled applications based on our heuristics for event-logging extraction.

**Execution Partitioning Assumptions:**
OmegaLog assumes at least one log message is printed within the event-handling loop to partition execution. It uses ordered log messages in the universal provenance logs to partition syscalls and define unit boundaries. This assumption holds for applications using a synchronous I/O programming model. However, if an application uses asynchronous I/O and only prints one log message at the end of the event-handling loop, concurrent requests will generate multiple syscalls without immediate logging. In such cases, OmegaLog cannot correctly partition each request. One potential solution is to generate a complete syscall mapping along with LMS paths model inside the event-handling loop during offline analysis and use this mapping to divide execution. This remains a topic for future work.

**Handling Malware Binaries:**
Malware binaries may not produce the required application logs for execution partitioning. In such cases, OmegaLog treats the entire malware execution as a single unit, which is acceptable since every input and output event from malware execution is crucial for forensic analysis.

**Related Work (XI)**
In §II, we described several shortcomings of existing provenance-tracking systems that OmegaLog addresses. Here, we provide additional discussion of related work.

**Application Log Analysis:**
Application logs contain valuable information useful for software system maintenance and postmortem analysis [48], anomaly detection [24, 59, 60], program verification [52], and security monitoring [46]. Guidelines and practices [66, 34, 25, 21, 49] highlight the importance of well-designed log messages in failure diagnosis. Xu et al. [59] used machine learning to analyze console logs and detect abnormal patterns at runtime. SherLog [61] infers what must or may have happened during a failed run by using application source code and runtime error logs. Similarly, LogEnhancer [62] and LogAdvisor [66] automatically improve existing log messages and suggest where to log in the code to aid future post-failure debugging. HERCULE [50] uses expert-written log parsers and rules to extract log fields and correlate entries across application logs. Unlike OmegaLog, HERCULE’s rule-based approach does not accurately capture causality across whole-system layers, which can undermine forensic investigations.

Several log analysis systems [56, 63, 44] have been proposed to reconstruct the behavior of applications running on Android OS. These systems are not transparent, as they require code instrumentation or an emulator to collect logs for analysis. DroidHolmes [44] and CopperDroid [56] are single-layer log analysis systems, whereas OmegaLog is a multi-layer log analysis system. DroidForensic [63] collects logs from different layers for forensic analysis, but it requires users to correlate and combine logs from different layers. OmegaLog, on the other hand, integrates logs from different layers without user involvement using program-analysis techniques.

**Application Log Parsing:**
Automated log parsing allows developers and support engineers to extract structured data from unstructured log messages for subsequent analysis. Tools like Logstash [7], Rsyslog [8], VMWare LogInsight [10], and Splunk [9] provide built-in log-parsing modules/recipes for popular applications such as MySQL and Apache httpd, enabling automatic extraction of useful information like PID, hostname, and filenames. For custom parsing, these tools offer easy-to-use, regex-based languages to define parsers.

**Distributed System Tracing:**
End-to-end tracing is essential in distributed systems for comprehensive profiling. Tools like Dtrace [18], Dapper [54], X-trace [23], MagPie [15], Fay [22], and PivotTracing [43] instrument underlying applications to log key metrics at runtime. lprof [65] and Stitch [64] allow users to profile a single request without instrumenting any distributed application. lprof uses static analysis to find identifiers that distinguish output logs of different requests but only correlates logs from the same distributed application. Stitch requires specific identifiers in log messages to correlate logs across different distributed applications. Both systems capture mere correlations rather than true causality between application logs, which can reduce the accuracy of attack reconstruction.

**Conclusion (XII)**
In this work, we introduce OmegaLog, an end-to-end provenance-tracking system that uses the concept of universal provenance to solve the semantic gap and dependency explosion problems in causality analysis frameworks. Universal provenance combines whole-system audit logs and application event logs while preserving the correctness of causality analysis. OmegaLog leverages static binary analysis to parse and interpret application event logs and generates semantic-aware and execution-partitioned provenance graphs. We implemented our prototype using the Angr binary analysis framework and the Linux Audit Module. Evaluation on real-world attack scenarios shows that OmegaLog’s generated graphs are concise and rich with semantic information, compared to state-of-the-art solutions.

**Acknowledgment:**
We thank our shepherd, Yonghwi Kwon, and the anonymous reviewers for their comments and suggestions. We also thank Akul Goyal and Riccardo Paccagnella for feedback on early drafts of this paper. Wajih Ul Hassan was partially supported by the Sohaib & Sara Abbasi Fellowship and the Symantec Graduate Fellowship. This work was supported in part by the National Science Foundation under contracts CNS-16-57534 and CNS-17-50024. Any opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of their employers or the sponsors.

**References:**
[1]–[66] (List of references provided)

---

This optimized text aims to be more coherent, professional, and easier to read, with clear section headings and improved sentence structure.