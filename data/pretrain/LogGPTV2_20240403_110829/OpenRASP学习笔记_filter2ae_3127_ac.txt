    retransformClasses:144, InstrumentationImpl (sun.instrument)
    retransform:93, CustomClassTransformer (com.baidu.openrasp.transformer)
    initTransformer:135, EngineBoot (com.baidu.openrasp)
    start:74, EngineBoot (com.baidu.openrasp)
    start:78, ModuleContainer (com.baidu.openrasp)
    :89, ModuleLoader (com.baidu.openrasp)
    load:118, ModuleLoader (com.baidu.openrasp)
    init:94, Agent (com.baidu.openrasp)
    premain:71, Agent (com.baidu.openrasp)
`transform:155, CustomClassTransformer
(com.baidu.openrasp.transformer)`：CustomClassTransformer
实现了ClassFileTransformer接口，在transorm方法中，通过遍历`hooks`获取所有价值的Hook类，并通过Hook类的`isClassMatched`方法判断当前类是否Hook类的关注类，如果是，之后的具体操作则交由Hook类的`tranformClass`方法
`retransform:93, CustomClassTransformer (com.baidu.openrasp.transformer)`
**1-2-2-5-2-1 Javassit实现hook**
`hookMethod`中先通过``getInvokeStaticSrc`方法获取“桩”的JAVA代码，再调用`insertBefore`方法进行“插”的操作（使用Javassist），如插入在构造方法前，被hook的类在实例化前会调用该插入的方法。
    hookMethod:69, FileOutputStreamHook (com.baidu.openrasp.hook.file)
    transformClass:83, AbstractClassHook (com.baidu.openrasp.hook)
    transform:155, CustomClassTransformer (com.baidu.openrasp.transformer)
    transform:188, TransformerManager (sun.instrument)
    transform:428, InstrumentationImpl (sun.instrument)
    retransformClasses0:-1, InstrumentationImpl (sun.instrument)
    retransformClasses:144, InstrumentationImpl (sun.instrument)
    retransform:93, CustomClassTransformer (com.baidu.openrasp.transformer)
    initTransformer:135, EngineBoot (com.baidu.openrasp)
    start:74, EngineBoot (com.baidu.openrasp)
    start:78, ModuleContainer (com.baidu.openrasp)
    :89, ModuleLoader (com.baidu.openrasp)
    load:118, ModuleLoader (com.baidu.openrasp)
    init:94, Agent (com.baidu.openrasp)
    premain:71, Agent (com.baidu.openrasp)
`hookMethod:69, FileOutputStreamHook (com.baidu.openrasp.hook.file)`
`transformClass:83, AbstractClassHook
(com.baidu.openrasp.hook)`：调用在子类中重写的hookMethod
**1-2-2-6 云管理初始化**
如果配置了集中管理，这里会进行一个云管理的配置加载，好像还涉及到`IAST`技术，本文忽略。
`start:75, EngineBoot (com.baidu.openrasp)`
**请求处理**
这里以官方的文件上传为例，简要概述。
文件上传的后缀名检测流程前会触发ApplicationFilterHook，但是这里最后调用的检测器是`request`，未看到该检测器的逻辑实现，应该是未起作用的，这里就不关注了。
后面流程中，先触发FileUploadHook插桩于FileUploadBase的parseRequest方法前的cacheFileUploadParam方法，这里对当前HTTP请求做了解析并保存到HookHandler，不过这里的requestCache只有获取请求ID的作用，并没有用作检测判断的数据。
之后触发HookHandler
的doRealCheckWithoutRequest，这里调用CheckManger.check进行文件后缀检测，底层走到了JS引擎。
handleBlock用于加载自定义的HTTP响应页面，提示用户当前请求被识别为恶意请求，并向上抛安全异常，记录本次攻击事件。
JS中通过`pulgin.register`注册回调函数，而JAVA代码中通过调用native方法来调用该注册函数，获取是否判黑的结果。下面是文件上传部分JS代码，获取到的文件名后通过正则判断文件名是否非法，返回的JSON数据中指明action、message等消息即可：
    var plugin  = new RASP(plugin_name)
    var algorithmConfig = {
    ...
        // 写文件操作 - NTFS 流
        writeFile_NTFS: {
            name:   '算法1 - 拦截 NTFS ::$DATA 写入操作',
            action: 'block'
        },
            writeFile_script: {
            name:      '算法2 - 拦截 php/jsp 等脚本文件的写入操作',
            reference: 'https://rasp.baidu.com/doc/dev/official.html#case-file-write',
            action:    'block',
            userinput:  true,
            lcs_search: false
        },
        ...
    }
    ...
    // 配置挂载到全局 RASP 变量
    RASP.algorithmConfig = algorithmConfig
    const clean = {
        action:     'ignore',
        message:    'Looks fine to me',
        confidence: 0
    }
    ...
    var scriptFileRegex = /\.(aspx?|jspx?|php[345]?|phtml|sh|py|pl|rb)\.?$/i
    var ntfsRegex       = /::\$(DATA|INDEX)$/
    ...
    plugin.register('writeFile', function (params, context) {
        // 写 NTFS 流文件，通常是为了绕过限制
        if (algorithmConfig.writeFile_NTFS.action != 'ignore')
        {
            if (ntfsRegex.test(params.realpath))
            {
                return {
                    action:     algorithmConfig.writeFile_NTFS.action,
                    message:    _("File write - Writing NTFS alternative data streams", [params.realpath]),
                    confidence: 95,
                    algorithm:  'writeFile_NTFS'
                }
            }
        }
        ...
        return clean
    ...
## 5.绕过分析
###  5.1 已知手法
[多种姿势openrasp命令执行绕过](https://www.anquanke.com/post/id/195016)一文中，作者给出了两种命令执行的绕过手法
①创建新线程，在新线程中进行命令执行，比如在spring中使用如下代码进行命令执行
    @RequestMapping(value = "testCmd.do")
    @ResponseBody
    public String testCmd(final String cmd){
        Thread t = new Thread(new Runnable(){
            public void run() {
                try {
                    Runtime.getRuntime().exec(cmd);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }});
        t.start();
        return "testCmd";
    }
②通过全局的Hook开关关闭rasp，如：
笔者的看法是，OpenRASP的目标应该是漏洞防护，漏洞防护也不能影响业务。如果存在业务的命令执行漏洞如①场景一致，那么应该确实是问题。另外被入侵成功后如何防护，对于该项目可能不是当前重点甚至意义不大。OpenRASP有后台管理（集中），不过目前看不到各主机的hook开关情况。
###  5.2 Hook点
RASP核心是hook并插桩，如果有漏洞的类未被hook到或是hook的类非底层关键类，则该技术会被绕过。如在命令执行中，对于JAVA版本 OpenRASP官方文档
 JVMTM Tool
Interface
 浅谈RASP技术攻防之基础篇
 字节码增强技术探索
 浅谈RASP