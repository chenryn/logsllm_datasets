We provide two sets of wrappers for the Dierckx FITPACK library: `dfitpack` (generated using f2py) and `_fitpack` (handwritten). The duplication of these wrappers is a historical artifact, likely originating from the time when `multipack` was in use, and before the separation of NumPy and SciPy. For a historical archive of `multipack`, see [this GitHub repository](https://github.com/matthew-brett/multipack).

I am curious about the backstory behind this duplication. Both sets of wrappers encapsulate the same Fortran routines but have different default settings and conventions. Over time, some bug fixes have been applied to one set but not the other. Issue #1408 proposes removing `_fitpack` in favor of `dfitpack`. While completely eliminating `_fitpack` may not be feasible, some deduplication would be beneficial for code maintenance. This issue is primarily for tracking this housekeeping task, without any strict urgency or timing guarantees.

### Usage and Structure

- **`dfitpack` Wrappers**:
  - Generated by: [fitpack.pyf](https://github.com/scipy/scipy/blob/main/scipy/interpolate/src/fitpack.pyf)
  - Python-level code: `_fitpack2.py`
  - Used by: OOP interface (`*UnivariateSpline` and related classes)

- **`_fitpack` Wrappers**:
  - Located in: [_fitpackmodule.c](https://github.com/scipy/scipy/blob/main/scipy/interpolate/src/_fitpackmodule.c)
  - Python-level code: `_fitpack_py.py` (a thin layer that dispatches calls to either BSpline methods or `_fitpack_impl`)
  - Used by: `splXXX` routines

### Detailed Usage

#### `dfitpack` Wrappers in `_fitpack2.py`

- **Routines and Their Usage**:
  - `dfitpack.fpcurf0`: `UnivariateSpline.__init__`, `InterpolatedUnivariateSpline`
  - `dfitpack.fpcurf1`: `UnivariateSpline._reset_nest` (`__init__`, `_set_smoothing_factor`)
  - `dfitpack.fpcurfm1`: `LSQUnivariateSpline.__init__`
  - `dfitpack.splint`: `UnivariateSpline.integral`
  - `dfitpack.spalde`: `UnivariateSpline.derivatives`
  - `dfitpack.sproot`: `UnivariateSpline.roots`
  - `dfitpack.fpchec`: `LSQUnivariateSpline.__init__`
  - `dfitpack.parder`: `_BivariateSplineBase.__call__`
  - `dfitpack.bispev`: `_BivariateSplineBase.__call__`
  - `dfitpack.pardeu`: `_BivariateSplineBase.__call__`
  - `dfitpack.bispeu`: `_BivariateSplineBase.__call__`
  - `dfitpack.pardtc`: `_BivariateSplineBase.partial_derivative__`
  - `dfitpack.dblint`: `_BivariateSpline.integral`
  - `dfitpack.surfit_smth`: `SmoothBivariateSpline.__init__`
  - `dfitpack.surfit_lsq`: `LSQBivariateSpline.__init__`
  - `dfitpack.regrid_smth`: `RectBivariateSpline.__init__`
  - `dfitpack.spherefit_smth`: `SmoothSphereBivariateSpline.__init__`
  - `dfitpack.spherefit_lsq`: `LSQSphereBivariateSpline.__init__`
  - `dfitpack.regrid_smth_spher`: `RectSphereBivariateSpline.__init__`

- **From `_fitpack_py`**:
  - `_fitpack.splev`: `UnivariateSpline.__call__` (via `_fitpack_py.splev` and `_fitpack_impl.splev`)
  - `splder`: `UnivariateSpline.derivative` (pure Python, not `fitpack.splder`)
  - `splantider`: `UnivariateSpline.antiderivative` (pure Python)

Note that `UnivariateSpline` evaluation goes through `_fitpack` rather than `dfitpack`.

#### `_fitpack` Wrappers in `_fitpack_impl.py`

- **Routines and Their Usage**:
  - **From `dfitpack`**:
    - `dfitpack.curfit`: `splrep` (note: `curfit.f` calls `fpcurf`, which is separately wrapped for `UnivariateSpline`)
    - `dfitpack.percur`: `splrep`
    - `dfitpack.dblint`: `dblint`

  - **From `_fitpack`**:
    - `_fitpack.parcur`: `splprep`
    - `_fitpack._spl_`: `splev`
    - `_fitpack._splint`: `splint`
    - `_fitpack._sproot`: `sproot`
    - `_fitpack._spalde`: `spalde`
    - `_fitpack._surfit`: `bisplrep`
    - `_fitpack._bispev`: `bisplev`
    - `_fitpack._insert`: `insert`

### Deduplication Candidates

- **First Candidates**: `splint`, `sproot`, and `spalde`.
- **`_fitpack._spl_`**: Used in both OOP and functional interfaces, meaning `dfitpack.splev` and `dfitpack.splder` are not used and untested.
- **Spline Construction**: `_fitpack.parcur` can potentially be replaced by `dfitpack.parcur`, but the latter is untested.
- **`_fitpack.insert`**: A complex routine with non-trivial temporary storage handling, making it challenging to replicate with f2py.

### Considerations for Deduplication

- **Array Lengths**: The f2py interface requires `len(c) == len(t)`, while `_fitpack` allows `len(c) == len(t) - k - 1` and ignores trailing elements in `c`. This restriction should be relaxed to `len(c) >= len(t) - k - 1`.
- **Non-Contiguous Arrays**: Determine if f2py supports non-contiguous arrays and whether it copies them if they are not contiguous.
- **Default Values**: Carefully check for differences in default values (e.g., the default for `s`).

By addressing these points, we can work towards a more streamlined and maintainable codebase.