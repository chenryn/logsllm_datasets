            return *((double *)object + 1);
        return Js::JavascriptConversion::ToNumber_Full(object, context);
    }
该函数检查浮点型数组的`view[0]->unusable`和`count`字段。在执行`valueOf()`方法的过程中，当`ArrayBuffer`被释放时，这两项检查都将失败，因为此时`view[0]->unusable`为1，并且在第一次调用`Js::JavascriptConversion::ToNumber()`时`count`为0。问题在于，`Js::TypedArray::BaseTypedDirectSetItem()`函数仅在解释模式下使用。  
当函数`func()`被即时编译时，JavaScript引擎将会使用以下存在漏洞的代码：
    if ( !((unsigned char)floatArray & 1) && *(void *)floatArray == &Js::TypedArray::vftable )
    {
      if ( floatArray->count > index )
      {
        buffer = floatArray->buffer + 4*index;
        if ( object & 1 )
        {
          *(float *)buffer = (double)(object >> 1);
        }
        else
        {
          if ( *(void *)object != &Js::JavascriptNumber::vftable )
          {
            Js::JavascriptConversion::ToFloat_Helper(object, (float *)buffer, context);
          }
          else
          {
            *(float *)buffer = *(double *)(object->value);
          }
        }
      }
    }
这是`Js::JavascriptConversion::ToFloat_Helper()`函数的代码：
    void Js::JavascriptConversion::ToFloat_Helper(void *object, float *buffer, struct Js::ScriptContext *context)
    {
      *buffer = Js::JavascriptConversion::ToNumber_Full(object, context);
    }
如我们所见，与解释模式不同，在即时编译的代码中，不会检查`ArrayBuffer`的生命周期，并且可以释放它的内存，然后在调用`valueOf()`函数时将其回收。此外，攻击者可以控制将返回值写入到哪个索引中。但是，在`arguments.length
= 0;`和`arguments.push(O2);`的情况下，PoC会将其替换为`arguments[0] =
O2;`，所以`Js::JavascriptConversion::ToFloat_Helper()`就不会触发这个Bug，因为隐式调用将被禁用，并且不会执行对valueOf()函数的调用。  
为了确保及时编译函数`func()`，漏洞利用程序会执行该函数0x10000次，对整数进行无害的转换，并且只有在再次执行`func()`之后，才会触发Bug。为了释放`ArrayBuffer`，漏洞利用使用了一种滥用Web
Workers
API的通用技术。`postMessage()`函数可以用于将对象序列化为消息，并将其发送给worker。但是，这里的一个副作用是，已传输的对象会被释放，并且在当前脚本上下文中变为不可用。在释放`ArrayBuffer`后，漏洞利用程序通过模拟Sleep()函数使用的代码触发垃圾回收机制。这是一个while循环，用于检查`Date.now()`与先前存储的值之间的时间间隔。完成后，漏洞利用会使用整数数组回收内存。
    for (var i = 0; i ::LinkToBeginning()`函数地址。Unicode字符串`split`的地址用于获取对该字符串的代码引用，并借助它来帮助解析函数`Js::JavascriptString::EntrySplit()`的地址，该函数实现了字符串方法`split()`。函数`LinkToBeginning()`的地址用于获取全局链表中第一个`ThreadContext`对象的地址。这个漏洞利用程序会在链表中找到最后一个条目，并利用它为负责执行脚本的线程获取堆栈位置。然后，就到了最后一个阶段。漏洞利用程序执行`split()`方法，并提供一个具有重载`valueOf()`方法的对象作为限制参数。在执行`Js::JavascriptString::EntrySplit()`函数的过程中，执行重载的`valueOf()`方法时，漏洞利用程序将搜索线程的堆栈以查找返回地址，将Shellcode放置在准备好的缓冲区中，获取其地址。最后，通过覆盖函数的返回地址，构建一个面向返回的编程（ROP）链以执行Shellcode。
## 0x02 下一阶段
Shellcode是附加到Shellcode上的可移植可执行（PE）模块的反射DLL加载器。这个模块非常小，全部功能都位于单个函数内。它在名为`ok.exe`的临时文件夹中创建一个文件，将远程执行代码中利用的另一个可执行文件的内容写入到其中。之后，执行`ok.exe`。  
`ok.exe`可执行文件包含针对GDI Print / Print Spooler
API中的任意指针解引用特权提升漏洞（CVE-2020-0986）。该漏洞最初是一位匿名用户通过Trend Micro的Zero Day
Initiative计划向Microsoft报告的。由于该漏洞在报告后的6个月内未发布补丁，因此ZDI将这一0-day漏洞进行披露，披露日期为2020年5月19日。第二天，这一漏洞就已经在先前提到的攻击中被利用。  
利用这一漏洞，可以使用进程间通信来读取和写入`splwow64.exe`进程的任意内存，并绕过CFG和EncodePointer保护，从而实现`splwow64.exe`中的代码执行。该漏洞利用程序的资源中嵌入了两个可执行文件。第一个可执行文件以`CreateDC.exe`的形式写入磁盘，并用于创建设备上下文（DC），这是漏洞利用所必需的。第二个可执行文件的名称为`PoPc.dll`，如果利用成功，会由具有中等完整性级别的`splwow64.dll`执行。我们将在后续文章中提供有关CVE-2020-0986及其漏洞利用的更多信息。  
从`splwow64.exe`执行恶意PowerShell命令：
`PoPc.dll`的主要功能也位于单个函数之中。它执行一个编码后的PowerShell命令，该命令用于从`www[.]static-cdn1[.]com/update.zip`下载文件，将其保存为临时文件`upgrader.exe`并执行。由于卡巴斯基已经在下载可执行文件前阻止了攻击，因此我们未能拿到upgrader.exe，无法对其进行进一步分析。
## 0x03 威胁指标
www[.]static-cdn1[.]com/update.zip  
B06F1F2D3C016D13307BC7CE47C90594  
D02632CFFC18194107CC5BF76AECA7E87E9082FED64A535722AD4502A4D51199  
5877EAECA1FE8A3A15D6C8C5D7FA240B  
7577E42177ED7FC811DE4BC854EC226EB037F797C3B114E163940A86FD8B078B  
B72731B699922608FF3844CCC8FC36B4  
7765F836D2D049127A25376165B1AC43CD109D8B9D8C5396B8DA91ADC61ECCB1  
E01254D7AF1D044E555032E1F78FF38F  
81D07CAE45CAF27CBB9A1717B08B3AB358B647397F08A6F9C7652D00DBF2AE24
原文链接：