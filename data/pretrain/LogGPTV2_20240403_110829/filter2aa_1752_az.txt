### 内存管理

#### 8.10.4 锁定的限制
Linux 对进程能够锁定的内存页数量有限制。具有 `CAP_IPC_LOCK` 权限的进程可以锁定更多页面，但仍然受 `RLIMIT_MEMLOCK` 限制。默认情况下，这个限制是 32KB（对于非特权进程）。这种限制有助于防止过多的内存锁定对系统性能造成负面影响。

#### 8.10.5 这个页面在物理内存中吗？
Linux 提供了 `mincore()` 函数来查询指定内存区域是否在物理内存中。其函数原型如下：
```c
#include <sys/mman.h>
#include <unistd.h>

int mincore(void *start, size_t length, unsigned char *vec);
```
`mincore()` 返回时，`vec` 数组中的每个元素对应一个页面，表示该页面是否驻留在物理内存中。`vec` 的大小应为 `(length-1+page_size)/page_size`。如果页面在物理内存中，对应的位会被设置为 1；否则为 0。如果调用失败，`mincore()` 返回 -1，并设置 `errno` 以指示错误类型，如 `EAGAIN`、`EFAULT` 或 `EINVAL`。

#### 8.11 投机性存储分配策略
Linux 使用投机性存储分配策略来处理进程的内存请求。当进程请求扩展虚拟内存段或创建新的映射时，内核并不会立即为其分配实际的物理内存。只有当进程尝试写入新分配的内存区域时，才会真正分配物理内存页。这种方式允许系统更灵活地管理内存资源，但也可能导致内存过度承诺（overcommitment）的情况。

##### 8.11.1 超量使用和内存耗尽
当内存需求超过系统实际可用内存时，内核会触发 Out-of-Memory (OOM) 处理机制。OOM killer 会选择并终止一些进程以释放内存。为了避免这种情况，可以通过调整 `/proc/sys/vm/overcommit_memory` 文件来控制内核的内存分配策略：
- 设置为 0：启发式过度承诺，默认行为。
- 设置为 1：总是允许过度承诺。
- 设置为 2：严格会计模式，不允许过度承诺，除非有足够的物理内存和交换空间。

此外，还可以通过 `/proc/sys/vm/overcommit_ratio` 文件来设置在严格会计模式下允许的内存过度承诺比例。

### 信号

#### 9.1 信号概念
信号是一种异步通信机制，用于通知进程发生了某些事件。信号可以由用户操作（如按下 Ctrl-C）、硬件异常或系统调用生成。信号可以用来中断进程的执行、传递信息或强制进程退出。常见的信号包括 `SIGINT`（中断信号）、`SIGTERM`（终止信号）和 `SIGKILL`（强制终止信号）等。

##### 9.1.1 信号标识符
信号通常以 `SIG` 开头，例如 `SIGINT`（Ctrl-C 产生的信号）、`SIGABRT`（进程调用 `abort()` 时产生的信号）和 `SIGKILL`（强制终止进程的信号）。可以通过 `kill -l` 命令查看所有支持的信号及其编号。

##### 9.1.2 Linux 支持的信号
表 9-1 列出了 Linux 支持的主要信号及其描述。

| 信号 | 描述 |
|------|------|
| SIGABRT | 调用 `abort()` 时产生 |
| SIGALRM | 闹钟时间到时产生 |
| SIGBUS | 总线错误 |
| SIGCHLD | 子进程状态改变时产生 |
| SIGCONT | 继续暂停的进程 |
| SIGFPE | 算术运算错误 |
| SIGHUP | 挂起信号 |
| SIGILL | 非法指令 |
| SIGINT | 中断信号（Ctrl-C） |
| SIGIO | 异步 I/O 事件 |
| SIGKILL | 强制终止进程 |
| SIGPIPE | 向已关闭的管道写入数据 |
| SIGPROF | 时钟超时（ITIMER_PROF） |
| SIGPWR | 电源故障 |
| SIGQUIT | 退出信号（Ctrl-\） |
| SIGSEGV | 段错误 |
| SIGSTOP | 暂停进程 |
| SIGSYS | 无效系统调用 |
| SIGTERM | 终止进程 |
| SIGTRAP | 跟踪陷阱 |
| SIGTSTP | 停止信号（Ctrl-Z） |
| SIGTTIN | 在后台读取终端 |
| SIGTTOU | 在后台写入终端 |
| SIGURG | 带外数据到达 |
| SIGUSR1 | 用户定义信号 1 |
| SIGUSR2 | 用户定义信号 2 |
| SIGVTALRM | 虚拟定时器超时 |
| SIGWINCH | 窗口大小改变 |
| SIGXCPU | CPU 时间超时 |
| SIGXFSZ | 文件大小超限 |

#### 9.2 基本信号管理
最简单的信号处理方法是使用 `signal()` 函数。其原型如下：
```c
#include <signal.h>

typedef void (*sighandler_t)(int);

sighandler_t signal(int signo, sighandler_t handler);
```
`signal()` 函数允许进程为特定信号 `signo` 设置一个新的处理函数 `handler`。处理函数是一个返回类型为 `void` 的函数，接受一个整数参数（信号编号）。例如：
```c
void my_handler(int signo) {
    // 信号处理逻辑
}

int main() {
    signal(SIGINT, my_handler);
    // 其他代码
    return 0;
}
```
`signal()` 函数符合 ISO C 标准，但在不同的 Unix 系统上可能有细微差别。Linux 使用 `sighandler_t` 类型来表示信号处理函数。