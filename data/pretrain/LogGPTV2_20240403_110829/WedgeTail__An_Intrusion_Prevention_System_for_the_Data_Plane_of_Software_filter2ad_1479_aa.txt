title:WedgeTail: An Intrusion Prevention System for the Data Plane of Software
Defined Networks
author:Arash Shaghaghi and
Mohamed Ali Kâafar and
Sanjay Jha
WedgeTail: An Intrusion Prevention System for the Data
Plane of Software Deﬁned Networks
Arash Shaghaghi1,2, Mohamed Ali Kaafar2 and Sanjay Jha1
1School of Computer Science and Engineering, The University of New South Wales (UNSW), Australia
{a.shaghaghi, sanjay.jha}@unsw.edu.au
2Data61, CSIRO, Australia
{dali.kaafar}@data61.csiro.au
ABSTRACT
Networks are vulnerable to disruptions caused by malicious
forwarding devices. The situation is likely to worsen in Soft-
ware Deﬁned Networks (SDNs) with the incompatibility of
existing solutions, use of programmable soft switches and
the potential of bringing down an entire network through
compromised forwarding devices. In this paper, we present
WedgeTail, an Intrusion Prevention System (IPS) designed
to secure the SDN data plane. WedgeTail regards forward-
ing devices as points within a geometric space and stores the
path packets take when traversing the network as trajecto-
ries. To be eﬃcient, it prioritizes forwarding devices before
inspection using an unsupervised trajectory-based sampling
mechanism. For each of the forwarding device, WedgeTail
computes the expected and actual trajectories of packets
and ‘hunts’ for any forwarding device not processing pack-
ets as expected. Compared to related work, WedgeTail is
also capable of distinguishing between malicious actions such
as packet drop and generation. Moreover, WedgeTail em-
ploys a radically diﬀerent methodology that enables detect-
ing threats autonomously.
In fact, it has no reliance on
pre-deﬁned rules by an administrator and may be easily im-
ported to protect SDN networks with diﬀerent setups, for-
warding devices, and controllers. We have evaluated Wed-
geTail in simulated environments, and it has been capable
of detecting and responding to all implanted malicious for-
warding devices within a reasonable time-frame. We report
on the design, implementation, and evaluation of WedgeTail
in this manuscript.
Keywords
Software Deﬁned Networks; SDN Security; Data Plane Se-
curity; Intrusion Prevention System
1.
INTRODUCTION
An attacker may compromise a network forwarding de-
vice by exploiting its software or hardware vulnerabilities.
Compromised forwarding devices may be then used to drop
or slow down, clone or deviate, inject or forge network traf-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02-06, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 ACM. ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3053039
ﬁc to launch attacks targeting the network operator and its
users. As discussed in [22, 24], compromised forwarding de-
vices may even grant an attacker the capability to wrest
control of an entire Software Deﬁned Network (SDN). This
paper looks at the speciﬁc problem of protecting SDNs from
malicious forwarding devices by determining if the traﬃc
forwarding function of the switch itself is secure.
Securing the network against malicious switches have not
been the subject of many studies in SDN security research
– see [3, 25, 38] for comprehensive surveys of SDN secu-
rity.
In fact, even with the latest proposals, there seems
to be an oversight regarding the malicious forwarding de-
vices that may exist in SDN data plane [13]. In general, the
development of SDN security applications and controllers
and real-time veriﬁcation of network constraints, separately,
have been the primary focus of SDN security literature (see
[3, 25] for surveys). However, no combination of these pro-
vides eﬀective protection against compromised forwarding
devices [8, 11, 13].
Recently, a few proposals speciﬁcally look into the threats
associated with malicious forwarding devices. However, these
either suﬀer from a simplistic threat model (e.g. [17]) or sub-
stantial processing overhead imposed to the network (e.g.
[21, 42, 43]). For example, cryptographic solutions such as
[21] have been designed to enforce path compliance in the
presence of strong adversaries, nevertheless, a universal de-
ployment may be infeasible due to high overload required for
per packet cryptographic operations, increased packet size,
and etc.
SPHINX [11] is one of the solutions designed for securing
the SDN data plane that does not assume forwarding devices
are to be trusted. SPHINX detects and mitigates security
attacks launched by malicious switches by abstracting the
network operations with incremental ﬂow graphs. It detects
attacks as per the policies deﬁned by the administrator and
responds accordingly. SPHINX also checks for ﬂow consis-
tency throughout a ﬂow path using a similarity index metric,
where this metric must be similar for ‘good’ switches on the
path.
We argue the following three factors as the main limita-
tion of SPHINX. First, the system does not tolerate Byzan-
tine forwarding faults. Therefore, SPHINX does not assume
malicious forwarding device could behave arbitrarily and is
not capable of distinguishing between malicious actions (e.g.
packet drop and fabrication), and it cannot detect when
a malicious forwarding device is delaying packets. Second,
the detection mechanism mainly relies on the policies de-
ﬁned by an administrator to detect attacks.
In fact, the
849ﬂow-graph component does not validate forwarding device
actions against the controller policies but only compared to
their behavior over time – hence, radical network conﬁgu-
ration changes will lead to false positives. Moreover, the
ﬂow-graph feature requires that the majority of forward-
ing devices be trustworthy. Indeed, an alternative more ro-
bust solution will have to be independent of this assump-
tion. Thirdly, SPHINX does not prioritize its inspection of
forwarding devices. Arguably, an eﬃcient solution should
prioritize this task to improve detection performance.
Here, we introduce WedgeTail, a controller-agnostic Intru-
sion Prevention System (IPS) designed to ‘hunt’ for forward-
ing devices failing to process packets as expected. WedgeTail
regards packets as ‘random walkers’ [30] in the network and
analyzes packet movements as trajectories in a geometric
space. By analyzing the expected and actual trajectories
of packets, our proposed solution is capable of automati-
cally localizing malicious forwarding device and identifying
the exact malicious behavior (e.g. packet drop, fabrication).
WedgeTail response to threats can be programmed using
administrator-deﬁned policies. For example, an instant iso-
lation policy may be customized such that initially, the po-
tentially malicious device is instructed to reset all the ﬂow
rules and then, evaluated at various intervals by re-iterating
the same packet(s) raising suspicion.
In order to make the scanning more eﬃcient and increase
the probability of ﬁnding malicious devices earlier, Wed-
geTail begins by prioritizing forwarding for inspection. We
adopt Unsupervised Trajectory Sampling [35] to cluster for-
warding devices into scanning groups of varying priority de-
pending on the cumulative frequency of occurrence in packet
paths traversing the network. To retrieve the expected tra-
jectories, WedgeTail intercepts the relevant OpenFlow mes-
sages exchanged between the control and data plane and
maintains a virtual replica of the network. This virtual
replica is processed by its integrated Header Space Analysis
(HSA) [19] component to calculate the expected packet tra-
jectories. The actual packet trajectories are, however, com-
puted by tracking a custom hash of the packet header. Alter-
natively, if NetSight [15] is deployed, WedgeTail queries for
packet history to retrieve the packet trajectory. We brieﬂy
review [15] and [19] in §2.
The contributions of this work can be summarised as fol-
lows:
(a) We deﬁne an advanced threat model for the security
of SDN data plane that has not been considered up to now
(§3). In §4, we ﬁrst discuss the main factors that exacerbate
the protection of SDN networks against malicious forward-
ing devices. Thereafter, the requirements for an eﬀective
solution and the key insights behind our proposed solution
is presented.
(b) In §5, we present WedgeTail’s target identiﬁcation
mechanism, where we detail how to retrieve the packet tra-
jectories and analyze them to create scanning regions.
(c) In §6, we present our proposed attack detection al-
gorithms and localization logic. We also discuss how Wed-
geTail distinguishes between diﬀerent malicious packet pro-
cessing actions (e.g. packet replay and drop). WedgeTail’s
response engine and its capabilities are discussed in §7.
(d) We discuss WedgeTail’s implementation in §8. There-
after, in §9, we evaluate WedgeTail’s performance and accu-
racy over three diﬀerent simulated networks. We conclude
the paper by comparing our solution with related work and
outlining the future work (§10).
2. BACKGROUND
2.1 Header Space Analysis (HSA)
Header Space Analysis (HSA) [19] is a method for debug-
ging network conﬁguration. HSA deals with a L-bit packet
header as L-dimensional space, and models all processes of
routers and middle-boxes as transfer functions, which trans-
form subspaces of the L-dimensional space to other sub-
spaces. Therefore, by analyzing forwarding rules of the net-
work, HSA can calculate the path a packet traversing the
network on a certain port will take. We have included an ex-
ample usage of HSA and how it serves for predicting packet
trajectories in §4.
2.2 NetSight
NetSight [15] is a network troubleshooting solution that
allows SDN application to retrieve the packet history. net-
shark is an example of tools built over this platform, which
enables users to deﬁne and execute ﬁlters on the entire his-
tory of packets. With this tool, a network operator can also
view the complete list of packet’s properties at each hop,
such as input port, output port, and packet header values.
In §6 we show how WedgeTail may inter-operate with Net-
Sight to retrieve the actual packet trajectories.
3. THREAT MODEL
We assume a resourceful adversary who may have taken
full control over one, or all, of the forwarding devices. This
is, in fact, the strongest possible adversary that may exist at
the SDN data plane, which to the best of our knowledge is
not considered in the related work. For example, [11, 18–20,
28], assume all, or the majority, of the forwarding devices to
be trustworthy. Interestingly, we have noticed an imprecise
deﬁnition of adversary leading to oversights in SPHINX [11],
the closest work to ours. For instance, authors discuss an
attack exhausting the TCAM memory of a switch that will
cause a switch dropping packets over a period of time. As
devastating as this may be, this device cannot be used to
execute attacks requiring packet modiﬁcation or misrouting.
Here, we assume the following capabilities for the adversary:
• The attacker may drop, replay, misroute, delay even
generate (includes both modify and fabricate) packets,
in random or selective manner all or part of the traﬃc.
The above capabilities grant the adversary the capability
to launch attacks against the network hosts, other forward-
ing devices or the control plane. For example, executing
a Denial of Service (DoS) attack against the control plane
by replaying or spooﬁng P acket In messages. Note that
detecting packet reordering is currently out of scope (§11.
We regard a forwarding device as ‘malicious’ when both of
the following properties are met: A) The device is not han-
dling the network packets according to the rules speciﬁed
by the control plane. B) The maliciousness is cloaked from
basic troubleshooting tools. For example, the malicious de-
vice ‘correctly’ responds to ping or traceroute probes while
corrupting other packets.
Arguably, the above characteristics may also be witnessed
with a misconﬁgured, or a faulty, forwarding device too. In
fact, the diﬀerentiating factor between these is the underly-
ing intentions and hardly their behavior or impact. Hence,
for the purpose of this work, we expand the deﬁnition of a
malicious forwarding device to encompass both faulty and
850misconﬁgured devices. This implies that the proposed solu-
tion could also be used to detect faulty and misconﬁgured
forwarding devices which are functioning anomalously – see
Section 10.
We make the following assumptions for WedgeTail to work:
1. The control plane itself and the deﬁned policies are
trustworthy and securely transferred to the data plane (e.g.
using TLS protocol [6]). There is an increasing body of lit-
erature aiming to achieve this, see [3, 38] for surveys.
In
other words, with SDN, the policy deﬁnition and enforce-
ment points are separated in networks [25] and here, we ex-
clusively focus on the the Policy Enforcement Point (PEP).
Hence, preventing incidents such as [16] caused by erroneous
administrator deﬁned policies is out of scope.
2. Packet reordering and time behaviour [31] are well-
studied and proposed solutions are complementary to Wed-
geTail. This is also true regarding protocol-level attacks
including TCP/IP and OSPF that can be addressed using
existing solutions.
In fact, WedgeTail is designed to de-
tect forwarding devices failing to execute their main function
and not to protect them from being compromised. In other
words, the prevention refers to the automated triggering of
pre-deﬁned policies against identiﬁed threats.
3. The forwarding devices may lie about anything except
their own identity – similar assumption is also made in [11].
4. WEDGETAIL
As mentioned in §1, securing SDN networks against ma-
licious forwarding devices is challenging.
In fact, similar
to [11], we also argue that the problem of protecting net-
works and their host against malicious forwarding devices
is exacerbated in SDN context. We believe this due to ﬁve
main reasons – the ﬁrst three factors are extracted from [11]
with some minor amendments and additions.
First and foremost is the incompatibility of existing solu-
tions to secure SDN. In fact, due to the removal of intelli-
gence from the forwarding devices, the defense mechanisms
used for traditional networks may no longer work. [11] pos-
tulates that for a comprehensive defense against traditional
attacks either a fundamental redesign of OpenFlow [29] pro-
tocol would be required, or we would need to patch the con-
troller per each attack.
The second factor is the unveriﬁed and complete reliance
of control plane on forwarding devices. An SDN controller
relies on P ACKET IN messages for its view of the network,
yet this is not securely authenticated nor veriﬁed. A mali-
cious forwarding device may send forged spoofed messages
to subvert the controller view of the network – even with
having TLS authentication in place. The same vulnerabil-