title:S-ARP: a Secure Address Resolution Protocol
author:Danilo Bruschi and
A. Ornaghi and
Emilia Rosti
S-ARP: a Secure Address Resolution Protocol∗
D. Bruschi, A. Ornaghi, E. Rosti
Dipartimento di Informatica e Comunicazione
Universit`a degli Studi di Milano, Italy
E-mail: PI:EMAIL, {bruschi, rosti}@dico.unimi.it
Abstract
Tapping into the communication between two hosts on a
LAN has become quite simple thanks to tools that can be
downloaded from the Internet. Such tools use the Address
Resolution Protocol (ARP) poisoning technique, which re-
lies on hosts caching reply messages even though the cor-
responding requests were never sent. Since no message au-
thentication is provided, any host of the LAN can forge a
message containing malicious information.
This paper presents a secure version of ARP that pro-
vides protection against ARP poisoning. Each host has a
public/private key pair certiﬁed by a local trusted party on
the LAN, which acts as a Certiﬁcation Authority. Messages
are digitally signed by the sender, thus preventing the in-
jection of spurious and/or spoofed information. As a proof
of concept, the proposed solution was implemented on a
Linux box. Performance measurements show that PKI based
strong authentication is feasible to secure even low level
protocols, as long as the overhead for key validity veriﬁca-
tion is kept small.
1. Introduction
IP over Ethernet networks are the most popular Local
Area Networks nowadays. They use ARP, the Address Res-
olution Protocol, to resolve IP addresses into hardware, or
MAC (Medium Access Controllers), addresses [12]. All the
hosts in the LAN keep a cache of resolved addresses. ARP
resolution is invoked when a new IP address has to be re-
solved or an entry in the cache expires. The ARP poisoning
attack consists of maliciously modifying the association be-
tween an IP address and its corresponding MAC address.
Various tools available on the Internet [11], [13], [18], al-
low so called “script kiddies” to perform the sophisticated
ARP poisoning attack.
∗
This work was partially sponsored under the Italian Dept. of Educa-
tion and Research F.I.R.S.T. project.
Although this is the most popular version, ARP poison-
ing is not conﬁned to Ethernet networks. Layer 2 switched
LANs, 802.11b networks, and cryptographically protected
connections are also vulnerable. In [3], various scenarios
are described where a wireless attacker poisons two wired
victims, a wireless victim and a wired one, or two wire-
less victims, either through different access points or a sin-
gle one. As for cryptographically protected networks, the
use of cryptography at network layer, e.g., by means of Se-
cure Shell (SSH) [20] or Secure Sockets Layer (SSL) [4],
does not protect against ARP poisoning, since such an at-
tack is performed at the layer below.
By performing ARP poisoning, an attacker forces a host
to send packets to a MAC address different from the one
of the intended destination, which may allow her to eaves-
drop on the communication, modify its content (e.g., ﬁlter-
ing it, injecting commands or malicious code), hijack the
connection. Furthermore, when performed on two differ-
ent hosts at the same time, ARP poisoning enables an ad-
versary to launch a “man in the middle” (MITM) attack.
With MITM attacks trafﬁc between two hosts is redirected
through a third one, which acts as the man in the middle,
without the two knowing it. The MITM may simply relay
the trafﬁc after inspecting it or modify it before resending
it. Note that MITM attacks are possible at various layers of
the OSI stack. ARP poisoning allows to perform such an at-
tack at data link layer. At network layer, the attack exploits
DNS poisoning [5]. The attacker ﬁrst modiﬁes the DNS ta-
bles so as to associate its own IP address with the symbolic
names of both victim hosts. Thus, when the victims will
query the DNS asking for the each other’s IP address, they
will receive the attacker’s IP address. At this point, all the
trafﬁc between the two hosts will ﬁrst be received by the at-
tacker that will forward it to the respective destination, after
possibly modifying it.
In this paper we propose a solution to the ARP poison-
ing problem based on an extension of the ARP protocol.
We introduce a set of functionalities that enable an integrity
and authenticity check on the content of ARP replies, us-
ing asymmetric cryptography. We call our secure extension
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:37:36 UTC from IEEE Xplore.  Restrictions apply. 
to ARP “S-ARP”, Secure ARP. As a proof of concept, S-
ARP has been implemented under the Linux operating sys-
tem and the initial experimental results have shown it is a
feasible and effective solution to the ARP poisoning attack,
despite its use of asymmetric cryptography. Experimental
measurements indicate that S-ARP has a negligible impact
on system performance. Note that similar results can be ob-
tained using Secure Link Layer [6]. However, since such a
protocol provides a broader spectrum of security services at
layer 2 such as trafﬁc conﬁdentiality, it is less efﬁcient than
S-ARP. We will discuss SSL in Section 6.
This paper is organized as follows. Section 2 illustrates
the problem considered in this paper and recalls how ARP
works and why it is vulnerable to poisoning. Section 3 and 4
describe S-ARP and its Linux implementation, respectively.
Section 5 presents the results of experimental evaluation on
a real system. Section 6 discusses related work. Section 7
summarizes our contributions and concludes the paper.
2. Problem Deﬁnition
2.1. Address Resolution Protocol
When an Ethernet frame is sent from one host to another
on the same LAN, the 48 bit Ethernet address determines
the interface to which the frame is destined. The IP ad-
dress in the packet is ignored. ARP provides the mapping
between the 32 bit IPv4 address and the 48 bit Ethernet ad-
dress [15], [12]. In the rest of this section we brieﬂy recall
how ARP works.
When a host needs to send an IP datagram as an Ether-
net frame to another host whose MAC address it ignores, it
broadcasts a request for the MAC address associated with
the IP address of the destination. Every host on the subnet
receives the request and checks if the IP address in the re-
quest is bound to one of its network interfaces. If this is
the case, the host with the matching IP address sends a uni-
cast reply to the sender of the request with the  pair. Every host maintains a table of  pairs, called ARP cache, based on the replies it re-
ceived, in order to minimize the number of requests sent on
the network. No request is made if the  pair
of interest is already present in the cache. ARP cache en-
tries have a typical lifetime of 20 minutes, but some oper-
ating systems may reset the expiration time every time they
use an entry, thus possibly delaying forever entry refresh
[15].
ARP is a stateless protocol, i.e., a reply may be processed
even though the corresponding request was never received.
When a host receives a reply, it updates the corresponding
entry in the cache with the  pair in the reply.
While a cache entry should be updated only if the map-
ping is already present, some operating systems, e.g., Linux
and Windows, cache a reply in any case to optimize per-
formance. Another stateless feature of ARP is the so called
gratuitous ARP. A gratuitous ARP is a message sent by a
host requesting the MAC address for its own IP address. It
is sent either by a host that wishes to determine if there is
another host on the LAN with the same IP address or by a
host announcing that it has changed its MAC address, thus
allowing the other hosts to update their caches.
2.2. ARP Poisoning
By forging an ARP reply, an attacker may easily change
the  association contained in a host ARP cache.
Since each host presumes its local cache to be trustwor-
thy, the poisoned host will send IP packets encapsulated
into Ethernet frames with a bogus MAC address as destina-
tion. This way the attacker may receive all the frames orig-
inally directed to some other host. If also the cache of the
real destination host is poisoned, both communication ﬂows
are under the attacker’s control. The attacker realizes a two-
way man in the middle, where she can forward the received
packets to the correct destination after inspecting and pos-
sibly modifying them. The two end points of the connec-
tion will not notice the extra hop added by the attacker if
the packet TTL is not decremented.
Some operating systems, e.g., Solaris, will not update an
entry in the cache if such an entry is not already present
when an unsolicited ARP reply is received. Although this
might seem an effective precaution against cache poison-
ing, the attack is still possible. The attacker needs to trick
the victim into adding a new entry in the cache ﬁrst, so that
a future (unsolicited) ARP reply can update it. By send-
ing a forged ICMP echo request as if it was from one of
the two victims, the attacker has the other victim create a
new entry in the cache. When the ﬁrst victim receives the
spoofed ICMP echo request, it replies with an ICMP echo
reply, which requires resolving ﬁrst the IP address of the
original ICMP request into an Ethernet address, thus creat-
ing an entry in the cache. The attacker can now update it
with an unsolicited ARP reply.
ARP poisoning is possible also in switched networks. A
layer 2 switch accepts the trafﬁc that comes into each port
and directs it only to the port to which the destination host
is connected, except for broadcast messages which are sent
to all ports. Therefore snifﬁng is no longer possible by sim-
ply conﬁguring the network interface in promiscuous mode.
However, it is possible to poison a host cache by sending an
unsolicited ARP reply to the host containing the attacker’s
MAC address. The same can be done against two hosts at
the same time, thus allowing an attacker to intercept all the
trafﬁc between those two hosts, without the switch realiz-
ing it. Once the attacker has hijacked the packets of a com-
munication, she can modify the payload or even inject new
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:37:36 UTC from IEEE Xplore.  Restrictions apply. 
packets in the communication as long as the TCP sequence
numbers are adjusted so as to maintain the communication
synchronized.
3. Secure ARP
Secure ARP extends ARP with an integrity/authentication
scheme for ARP replies, to prevent ARP poisoning at-
tacks. Since S-ARP is built on top of ARP, its speciﬁca-
tion (as for message exchange, timeout, cache) follows the
original one for ARP [12]. In order to maintain compati-
bility with ARP, an additional header is inserted at the end
of the protocol standard messages to carry the authenti-
cation information. This way, S-ARP messages can also
be processed by hosts that do not implement S-ARP, al-
though in a secure ARP LAN all hosts should run S-ARP.
Hosts that run the S-ARP protocol will not accept non au-
thenticated messages unless speciﬁed in a list of known
hosts. On the contrary, hosts that run the classic ARP pro-
tocol will be able to accept even authenticated messages. A
mixed LAN is not recommended in a production environ-
ment because the part running traditional ARP is still sub-
ject to ARP poisoning. Furthermore, the list of hosts not
running S-ARP must be given to every secured host that
has to communicate with an unsecured one. The interop-
erability with the insecure ARP protocol is given only for
extraordinary events and should be always avoided. It is in-
tended to be used only during the transition phase to a full
S-ARP enabled LAN.
3.1. Protocol Overview
S-ARP provides message authentication only. No trafﬁc
conﬁdentiality is provided as we believe that such a service
should be provided at higher levels in the OSI stack, e.g.,
by means of IPSec [7] or SSL [4] or speciﬁc secure applica-
tion protocols such as SSH [20]. Furthermore, well conﬁg-
ured layer 2 switches operating with S-ARP are sufﬁcient
to protect trafﬁc from most of layer 2 attacks1.
S-ARP uses asymmetric cryptography. Any S-ARP en-
abled host is identiﬁed by its own IP address and has a pub-
lic/private key pair. A simple certiﬁcate provides the bind-
ing between the host identity and its public key. Besides the
host public key, the certiﬁcate contains the host IP address
and the MAC address of the Authoritative Key Distributor
(AKD), a trusted host acting as key repository. Each host
sends its signed certiﬁcate containing the public key and
the IP address to the AKD, which inserts the public key and
the IP address in a local data base, after the network man-
ager’s validation (see Section 3.2). Because of the restricted
1 Although this is not true for bus networks, such a topology is quickly
becoming obsolete, being replaced by layer 2 switched LANs, so we
focus on the latter.
nature of such a repository, both in terms of number of keys
and their exposure to compromise, no revocation lists are
kept. In order to avoid replay attacks and to have a common
time reference to evaluate expired replies, the AKD also dis-
tributes the clock value with which all the other hosts must
synchronize.
In S-ARP all reply messages are digitally signed by the
sender with the corresponding private key. At the receiv-
ing side, the signature is veriﬁed using the host public key.
If the public key of the sender host is not present in the re-
ceiving host key ring or the one in the key ring does not ver-
ify the signature, the public key of the sender is requested
from the AKD. The AKD sends it to the requesting host in
a digitally signed message.
S-ARP adopted the Digital Signature Algorithm (DSA)
as the signature algorithm [9]. Such a choice is not a con-
straint and the signing algorithm could be replaced with any
other public key signature scheme. For the sake of efﬁciency
(see Section 5), we use keys of 512 bits. Although 512 bit
keys are not considered totally secure, they offer a sufﬁcient
degree of security for the type of information they protect
in our case, especially if combined with a key refresh pol-
icy.
3.2. S-ARP Setup
The ﬁrst step when setting up a LAN that uses S-ARP is
to identify the AKD and distribute through a secure channel
its public key and MAC address to all the other hosts. Such
an operation may be performed manually when a host is in-
stalled on the LAN for the ﬁrst time. On the other hand, a
host that wants to connect to the LAN must ﬁrst generate a
public/private key pair and send its signed certiﬁcate to the
AKD. Here the correctness of the information provided is
veriﬁed by the network manager and the host public key to-
gether with its IP address is entered in the AKD repository.
This operation has to be performed only the ﬁrst time a host
enters the LAN. If a host wants to change its key, it commu-
nicates the new key to the AKD by signing the request with
the old one. The AKD will update its key and the associ-
ation is correctly maintained. Section 3.5 explains the pro-
tocol behavior when IP addresses are dynamically assigned
by a DHCP server. Once connected to the LAN, a host syn-
chronizes its local S-ARP clock with the one received from
the AKD.
3.3. Message Format
A S-ARP message is similar to an ARP message, with an
additional portion at the end, to maintain compatibility with
the original protocol. The additional S-ARP portion com-
prises a 12 bytes S-ARP header, and a variable length pay-
load, as shown in Figure 1. ARP replies carry the S-ARP
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:37:36 UTC from IEEE Xplore.  Restrictions apply. 
header while ARP requests do not change. Future versions
of the protocol should consider authenticating ARP requests
too as this would speedup the authentication process.
The S-ARP header contains the sender’s digital signa-
ture, a time-stamp, the type and length of the message. The
ﬁeld “magic” is used to distinguish whether a message car-
ries the S-ARP header. If so, its value is 0x7599e11e.
Since ARP packets are only 42 bytes long and the minimum
Ethernet frame length is 60, packets are usually padded with
junk2 and the length of the received packet cannot be used
as an indicator of additional parts, such as a S-ARP header.
The ﬁeld “type” distinguishes among ﬁve types of mes-
sages:
• Signed address resolution (reply only)
• Public key management (request/reply)
• Time synchronization (request/reply).
Signed address resolution messages are exchanged between
hosts of the LAN. The other types of messages are ex-
changed only between a host and the AKD.
The ﬁelds “siglen” and “datalen” are the length of the
signature and the length of the data in the S-ARP payload,
respectively. The ﬁeld “timestamp” is the value of the lo-
cal S-ARP clock at the moment of the construction of the
packet. Finally, the ﬁeld “signature” is a SHA-1 hash of
the ARP and the S-ARP headers. The resulting 160 bits are
signed with DSA3.
1
8
16
24
32
magic
header (12 bytes)
type
siglen
datalen
data (variable)
timestamp
data
signature