          v7 = 0LL;
          do
          {
            IOAccelCommandQueue::submitCommandBuffer(
              (IOAccelCommandQueue *)v2,
              *((_DWORD *)v6 - 4),//v6 based on input
              *((_DWORD *)v6 - 3),//based on input
              *(v6 - 1),//based on input
              *v6);//based on input
            ++v7;
            v6 += 3;
          }
          while ( v7 > 64) >> 1) & 0x7FFFFFFFFFFFFFF8LL) )
和
    if ( *(_DWORD *)(inputdata + 4) == (unsigned int)((unsigned __int64)(0x0AAAAAAAAAAAAAAABLL
                                                                        * (unsigned __int128)((unsigned __int64)(unsigned int)inputdatalen
                                                                                            - 8) >> 64) >> 4) )
的检查。
在POC运行之后，内核相邻内存的内容就会被leak回用户态。如果边界没有映射内存的话，就会触发一个内核panic。
### 样例Panic Report
    Sat Jun 11 21:49:00 2016
    *** Panic Report ***
    panic(cpu 0 caller 0xffffff801dfce5fa): Kernel trap at 0xffffff7fa039d2a4, type 14=page fault, registers:
    CR0: 0x0000000080010033, CR2: 0xffffff812735f000, CR3: 0x000000000ce100ab, CR4: 0x00000000001627e0
    RAX: 0x000000007fffffff, RBX: 0xffffff812735f008, RCX: 0x0000000000000000, RDX: 0x0000000000000000
    RSP: 0xffffff81276d3b60, RBP: 0xffffff81276d3b80, RSI: 0x0000000000000000, RDI: 0xffffff802fcaef80
    R8:  0x00000000ffffffff, R9:  0x0000000000000002, R10: 0x0000000000000007, R11: 0x0000000000007fff
    R12: 0xffffff8031862800, R13: 0xaaaaaaaaaaaaaaab, R14: 0xffffff812735e000, R15: 0x00000000000000aa
    RFL: 0x0000000000010293, RIP: 0xffffff7fa039d2a4, CS:  0x0000000000000008, SS:  0x0000000000000010
    Fault CR2: 0xffffff812735f000, Error code: 0x0000000000000000, Fault CPU: 0x0, PL: 0
    Backtrace (CPU 0), Frame : Return Address
    0xffffff81276d37f0 : 0xffffff801dedab12 mach_kernel : _panic + 0xe2
    0xffffff81276d3870 : 0xffffff801dfce5fa mach_kernel : _kernel_trap + 0x91a
    0xffffff81276d3a50 : 0xffffff801dfec463 mach_kernel : _return_from_trap + 0xe3
    0xffffff81276d3a70 : 0xffffff7fa039d2a4 com.apple.iokit.IOAcceleratorFamily2 : __ZN19IOAccelCommandQueue22submit_command_buffersEPK29IOAccelCommandQueueSubmitArgs + 0x8e
    0xffffff81276d3b80 : 0xffffff7fa039c92c com.apple.iokit.IOAcceleratorFamily2 : __ZN19IOAccelCommandQueue24s_submit_command_buffersEPS_PvP25IOExternalMethodArguments + 0xba
    0xffffff81276d3bc0 : 0xffffff7fa03f6db5 com.apple.driver.AppleIntelHD5000Graphics : __ZN19IGAccelCommandQueue14externalMethodEjP25IOExternalMethodArgumentsP24IOExternalMethodDispatchP8OSObjectPv + 0x19
    0xffffff81276d3be0 : 0xffffff801e4dfa07 mach_kernel : _is_io_connect_method + 0x1e7
    0xffffff81276d3d20 : 0xffffff801df97eb0 mach_kernel : _iokit_server + 0x5bd0
    0xffffff81276d3e30 : 0xffffff801dedf283 mach_kernel : _ipc_kobject_server + 0x103
    0xffffff81276d3e60 : 0xffffff801dec28b8 mach_kernel : _ipc_kmsg_send + 0xb8
    0xffffff81276d3ea0 : 0xffffff801ded2665 mach_kernel : _mach_msg_overwrite_trap + 0xc5
    0xffffff81276d3f10 : 0xffffff801dfb8dca mach_kernel : _mach_call_munger64 + 0x19a
    0xffffff81276d3fb0 : 0xffffff801dfecc86 mach_kernel : _hndl_mach_scall64 + 0x16
          Kernel Extensions in backtrace:
             com.apple.iokit.IOAcceleratorFamily2(205.10)[949D9C27-0635-3EE4-B836-373871BC6247]@0xffffff7fa0374000->0xffffff7fa03dffff
                dependency: com.apple.iokit.IOPCIFamily(2.9)[D8216D61-5209-3B0C-866D-7D8B3C5F33FF]@0xffffff7f9e72c000
                dependency: com.apple.iokit.IOGraphicsFamily(2.4.1)[172C2960-EDF5-382D-80A5-C13E97D74880]@0xffffff7f9f232000
             com.apple.driver.AppleIntelHD5000Graphics(10.1.4)[E5BC31AC-4714-3A57-9CDC-3FF346D811C5]@0xffffff7fa03ee000->0xffffff7fa047afff
                dependency: com.apple.iokit.IOSurface(108.2.1)[B5ADE17A-36A5-3231-B066-7242441F7638]@0xffffff7f9f0fb000
                dependency: com.apple.iokit.IOPCIFamily(2.9)[D8216D61-5209-3B0C-866D-7D8B3C5F33FF]@0xffffff7f9e72c000
                dependency: com.apple.iokit.IOGraphicsFamily(2.4.1)[172C2960-EDF5-382D-80A5-C13E97D74880]@0xffffff7f9f232000
                dependency: com.apple.iokit.IOAcceleratorFamily2(205.10)[949D9C27-0635-3EE4-B836-373871BC6247]@0xffffff7fa0374000
    BSD process name corresponding to current thread: cmdqueue1
    Boot args: keepsyms=1 -v
    Mac OS version:
    15F34
    Kernel version:
    Darwin Kernel Version 15.5.0: Tue Apr 19 18:36:36 PDT 2016; root:xnu-3248.50.21~8/RELEASE_X86_64
    Kernel UUID: 7E7B0822-D2DE-3B39-A7A5-77B40A668BC6
    Kernel slide:     0x000000001dc00000
    Kernel text base: 0xffffff801de00000
    __HIB  text base: 0xffffff801dd00000
    System model name: MacBookAir6,2 (Mac-7DF21CB3ED6977E5)
查看崩溃RIP寄存器附近的汇编代码
    __text:000000000002929E                 mov     esi, [rbx-10h]  ; unsigned int
    __text:00000000000292A1                 mov     edx, [rbx-0Ch]  ; unsigned int
    __text:00000000000292A4                 mov     rcx, [rbx-8]    ; unsigned __int64
    __text:00000000000292A8                 mov     r8, [rbx]       ; unsigned __int64
在这个崩溃中，rbx寄存器已经出现了越界，意味了内核在读取一个没有映射的内存内容，触发越界。
在 10.11.5 Macbook Airs, Macbook Pros 中测试复现：
    while true; do ./cmdqueue1 ; done
# 苹果的修复
苹果还没有公开XNU 10.11.2的源代码，但让我们先来逆向下binary kernel，并在Diaphora的帮助下定位修补的部分
在未修补的版本，我们可以看到有如下的关键代码
    3741     if (ool_input)
    3742    inputMD = IOMemoryDescriptor::withAddressRange(ool_input, ool_input_size,
    3743                            kIODirectionOut, current_task());
i.e.
    mov     rax, gs:8
    mov     rcx, [rax+308h] ; unsigned int
    mov     edx, 2          ; unsigned __int64
    mov     rsi, [rbp+arg_8] ; unsigned __int64
    call    __ZN18IOMemoryDescriptor16withAddressRangeEyyjP4task ; IOMemoryDescriptor::withAddressRange(ulong long,ulong long,uint,task *)
    mov     r15, rax
但是在10.11.2上，这部分在_is_io_connect_method代码变成了下面的样子
    mov     rax, gs:8
    mov     rcx, [rax+318h] ; unsigned int
    mov     edx, 20002h     ; unsigned __int64
    mov     rsi, [rbp+arg_8] ; unsigned __int64
    call    __ZN18IOMemoryDescriptor16withAddressRangeEyyjP4task ; IOMemoryDescriptor::withAddressRange(ulong long,ulong long,uint,task *)
    mov     r15, rax
一个新的flag (0x20000)
被引入到了IOMemoryDescriptor::withAddressRange。在调用栈接下来的IOGeneralMemoryDescriptor::memoryReferenceCreate函数中被检查
    if ( this->_task && !err && this->baseclass_0._flags & 0x20000 && !(optionsa & 4) ) //newly added source
      err = IOGeneralMemoryDescriptor::memoryReferenceCreate(this, optionsa | 4, &ref->mapRef);
随后在该函数的开头再次对应到映射的属性参数prot
    prot = 1;
    cacheMode = (this->baseclass_0._flags & 0x70000000) >> 28;
    v4 = vmProtForCacheMode(cacheMode);
    prot |= v4;
    if ( cacheMode )
      prot |= 2u;
    if ( 2 != (this->baseclass_0._flags & 3) )
      prot |= 2u;
    if ( optionsa & 2 )
      prot |= 2u;
    if ( optionsa & 4 )
      prot |= 0x200000u;
`prot`最终被用于`mach_make_memory_entry_64`, 描述这个mapping的permission.
0x200000其实就是MAP_MEM_VM_COPY
    382 /* leave room for vm_prot bits */
    383 #define MAP_MEM_ONLY        0x010000 /* change processor caching  */
    384 #define MAP_MEM_NAMED_CREATE    0x020000 /* create extant object      */
    385 #define MAP_MEM_PURGABLE    0x040000 /* create a purgable VM object */
    386 #define MAP_MEM_NAMED_REUSE 0x080000 /* reuse provided entry if identical */
    387 #define MAP_MEM_USE_DATA_ADDR   0x100000 /* preserve address of data, rather than base of page */
    388 #define MAP_MEM_VM_COPY     0x200000 /* make a copy of a VM range */
    389 #define MAP_MEM_VM_SHARE    0x400000 /* extract a VM range for remap */
    390 #define MAP_MEM_4K_DATA_ADDR    0x800000 /* preserve 4K aligned address of data */
    391 
这样就意味着在这个补丁之后，IOKit调用中传入的descriptors已经不再和用户态共享一个映射，免除了被用户态修改的烦恼。苹果选择了一个相对优雅的方案从根源上解决了问题，而不是一个一个地去修补对应的驱动代码。
## 致谢
科恩实验室的陈良对本研究亦有贡献。也感谢苹果安全团队的积极响应和修复。
* * *