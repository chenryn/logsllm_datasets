plementary approach that assumes a set of “correct” sani-
tizers and inserts them to match the browser’s parsing con-
text. Bek [18] focuses on creating sanitization functions au-
tomatically analyzable for preciseness and correctness. Sani-
tization remains the main industry-standard defense against
XSS and related vulnerabilities.
A number of server-side defenses restrict scripts included
in server-generated pages. For example, XSS-GUARD [4]
determines valid scripts dynamically and disallows unex-
pected scripts. The authors report performance overheads
of up to 46% because of the dynamic evaluation of HTML
and JavaScript. Templating approaches [13, 36, 38] generate
correct-by-construction scripts that incorporate correct san-
itization based on context. In addition, schemes based on
code isolation [1,2,26] mitigate XSS by limiting DOM access
for particular scripts, depending on their context.
Certain XSS defenses [21, 22, 27, 29, 34, 35, 39, 44, 49] use
data-ﬂow analysis or taint tracking to identify unsanitized
user input included in a generated web page. These ap-
proaches typically rely on sanitization, encoding, and other
means of separating unsafe inputs from the script code.
Some schemes prevent XSS bugs dynamically, while others
focus on static detection and elimination.
Other approaches [14, 28, 33] combine server-side process-
ing with various client-side components, such as conﬁne-
ment of untrusted inputs and markup randomization. Such
schemes may parse documents on the server and prevent
any modiﬁcations of the resulting parse trees on the client.
In addition, randomization of XHTML tags can render for-
eign script code meaningless, defeating many code-injection
attacks.
8.2 Client-Side Methods
Client-side XSS defenses [20,23,30,42,45,47] mitigate XSS
while receiving or rendering untrusted web content. Some
of these schemes rely on browser modiﬁcations or plug-ins,
often reducing their practical applicability. Others use cus-
tom JavaScript libraries or additional client-side monitoring
software. CSP itself [42] is a browser-based approach, but its
incorporation into WWW standards should facilitate wide
acceptance and support by all popular browsers.
Some client-side XSS defenses focus on detecting and pre-
venting leakage of sensitive data. For example, Noxes [23]
operates as a personal-ﬁrewall plug-in that extracts all static
links from incoming web pages, prompting the user about
disclosure of information via dynamically generated links.
Vogt et al. [45] also aim to address this problem, but use
taint-tracking analysis within a browser to check for sensi-
tive data released via XSS attacks. In contrast, deDacota
simply prevents any XSS exploits that could enable such
leakage.
Client-side HTML security policies mitigate XSS via con-
tent restrictions, such as disallowing unsafe features or exe-
cuting only “known good” scripts. Using a browser’s HTML
parser, BEEP [20] constructs whitelists of scripts, much like
XSS-GUARD’s server-side approach [4]. BEEP assumes no
dynamic scripts whose hashes cannot be pre-computed, lim-
iting its practicality with modern web applications; more-
over, it has been shown that even whitelisted scripts may
be vulnerable to attacks [2]. Another custom content se-
curity policy is Blueprint’s page descriptions, which are
interpreted and rendered safely by a custom JavaScript li-
brary [28]. Script policies enforced at runtime [15, 30] are
also useful for mitigating XSS exploits.
In general, standardized HTML security policies [42, 47]
oﬀer promise as a means of escaping the recent proliferation
of complex, often ad hoc XSS defenses. CSP simpliﬁes the
1214problem by enforcing fairly strong restrictions, such as dis-
abling eval() and other dangerous APIs, prohibiting inline
JavaScript, and allowing only local script resources to be
loaded. While new web applications can be designed with
CSP in mind, legacy code may require signiﬁcant rewrit-
ing. deDacota works on both old and new applications,
facilitating adoption of CSP by developers, primarily by au-
tomating the separation process.
9. CONCLUSION
Cross-site scripting vulnerabilities are pervasive in web
applications. Malicious users frequently exploit these vul-
nerabilities to infect users with drive-by downloads or to
steal personal information.
While there is currently no silver bullet to preventing ev-
ery possible XSS attack vector, we believe that adhering to
the fundamental security principle of code and data separa-
tion is a promising approach to combating XSS vulnerabil-
ities. deDacota is a novel approach that gets us closer to
this goal, by using static analysis to automatically separate
the code and data of a web application. While not a ﬁnal
solution, deDacota and other tools that automate making
web applications secure by construction are the next step in
the ﬁght against XSS and other kinds of vulnerabilities.
10. ACKNOWLEDGMENTS
The authors extend their thanks to David Molnar, Alex
Moshchuk, Helen Wang, and Chris Hawblitzel for their help-
ful discussions, Herman Venter for all his help and sup-
port with CCI, and David Brumley for his insightful sug-
gestions which helped to focus the paper. This work was
supported by the Oﬃce of Naval Research (ONR) under
Grant N000140911042, the Army Research Oﬃce (ARO) un-
der Grant W911NF0910553, the National Science Founda-
tion (NSF) under Grants CNS-0845559 and CNS-0905537,
and Secure Business Austria.
11. REFERENCES
[1] Akhawe, D., Saxena, P., and Song, D. Privilege
Separation in HTML5 Applications. In Proceedings of
the USENIX Security Symposium (USENIX) (2012).
[2] Athanasopoulos, E., Pappas, V., and Markatos,
E. P. Code-Injection Attacks in Browsers Supporting
Policies. In Proceedings of the Workshop on Web 2.0
Security and Privacy (W2SP) (2009).
[3] Balzarotti, D., Cova, M., Felmetsger, V.,
Jovanovic, N., Kirda, E., Kruegel, C., and
Vigna, G. Saner: Composing Static and Dynamic
Analysis to Validate Sanitization in Web Applications.
In Proceedings of the IEEE Symposium on Security
and Privacy (Oakland, CA, 2008).
[4] Bisht, P., and Venkatakrishnan, V.
XSS-GUARD: Precise Dynamic Prevention of
Cross-Site Scripting Attacks. In Proceedings of the
Conference on Detection of Intrusions and Malware
and Vulnerability Assessment (DIMVA) (Paris,
France, 2008).
[5] blogengine.net - an innovative open source blogging
platform. http://www.dotnetblogengine.net, 2013.
[6] BlogSA.NET. http://www.blogsa.net/, 2013.
[7] BugTracker.NET - Free Bug Tracking.
http://ifdefined.com/bugtrackernet.html, 2013.
[8] Top in Frameworks - Week beginning Jun 24th 2013.
http://trends.builtwith.com/framework, 2013.
[9] Chronozoom - A Brief History of the World. http:
//chronozoom.cloudapp.net/firstgeneration.aspx,
2013.
[10] Cui, W., Peinado, M., Xu, Z., and Chan, E.
Tracking Rootkit Footprints with a Practical Memory
Analysis System. In Proceedings of the USENIX
Security Symposium (USENIX) (Bellevue, WA, 2012).
[11] CVE Details. Vulnerabilities by Type.
http://www.cvedetails.com/vulnerabilities-by-
types.php, 2013.
[12] Django. http://djangoproject.com, 2013.
[13] Google. Google AutoEscape for CTemplate.
http://code.google.com/p/ctemplate/.
[14] Gundy, M. V., and Chen, H. Noncespaces: Using
Randomization to Enforce Information Flow Tracking
and Thwart Cross-Site Scripting Attacks. In Network
and Distributed System Security Symposium (NDSS)
(2009).
[15] Hallaraker, O., and Vigna, G. Detecting
Malicious JavaScript Code in Mozilla. In Proceedings
of the IEEE International Conference on Engineering
of Complex Computer Systems (ICECCS) (Shanghai,
China, 2005).
[16] Heiderich, M., Niemietz, M., Schuster, F., Holz,
T., and Schwenk, J. Scriptless Attacks: Stealing the
Pie Without Touching the Sill. In Proceedings of the
ACM Conference on Computer and Communications
Security (CCS) (2012).
[17] Hoff, J. WebGoat.NET.
https://github.com/jerryhoff/WebGoat.NET, 2013.
[18] Hooimeijer, P., Livshits, B., Molnar, D.,
Saxena, P., and Veanes, M. Fast and Precise
Sanitizer Analysis with Bek. In Proceedings of the
USENIX Security Symposium (USENIX) (2011).
[19] Howard, M., and LeBlanc, D. Writing Secure
Code, second ed. Microsoft Press, 2003.
[20] Jim, T., Swamy, N., and Hicks, M. Defeating Script
Injection Attacks with Browser-Enforced Embedded
Policies. In Proceedings of the International World
Wide Web Conference (WWW) (2007).
[21] Johns, M., and Beyerlein, C. SMask: Preventing
Injection Attacks in Web Applications by
Approximating Automatic Data/Code Separation. In
Proceedings of the ACM Symposium on Applied
Computing (SAC) (2007).
[22] Jovanovic, N., Kruegel, C., and Kirda, E.
Precise Alias Analysis for Static Detection of Web
Application Vulnerabilities. In Proceedings of the
Workshop on Programming Languages and Analysis
for Security (PLAS) (2006).
[23] Kirda, E., Kruegel, C., Vigna, G., and
Jovanovic, N. Noxes: A Client-Side Solution for
Mitigating Cross-Site Scripting Attacks. In
Proceedings of the ACM Symposium on Applied
Computing (SAC) (2006).
[24] Klein, A. DOM Based Cross Site Scripting or XSS of
the Third Kind. http://www.webappsec.org/
projects/articles/071105.shtml, 2005.
1215[25] Livshits, B., and Chong, S. Towards Fully
Automatic Placement of Security Sanitizers and
Declassiﬁers. In Proceedings of the Symposium on
Principles of Programming Languages (POPL) (2013).
[26] Livshits, B., and Erlingsson, U. Using Web
Application Construction Frameworks to Protect
Against Code Injection Attacks. In Proceedings of the
Workshop on Programming Languages and Analysis
for Security (PLAS) (2007).
[27] Livshits, V. B., and Lam, M. S. Finding Security
Vulnerabilities in Java Applications with Static
Analysis. In Proceedings of the USENIX Security
Symposium (USENIX) (2005).
[28] Louw, M. T., and Venkatakrishnan, V.
Blueprint: Robust Prevention of Cross-site Scripting
Attacks for Existing Browsers. In Proceedings of the
IEEE Symposium on Security and Privacy (2009).
[29] Martin, M., and Lam, M. S. Automatic Generation
of XSS and SQL Injection Attacks with Goal-Directed
Model Checking. In Proceedings of the USENIX
Security Symposium (USENIX) (2008).
[30] Meyerovich, L., and Livshits, B. ConScript:
Specifying and Enforcing Fine-Grained Security
Policies for JavaScript in the Browser. In Proceedings
of the IEEE Symposium on Security and Privacy
(2010).
[31] Microsoft. ASP.NET. http://www.asp.net/.
[32] Microsoft Research. Common Compiler
Infrastructure. http://research.microsoft.com/en-
us/projects/cci/, 2013.
[33] Nadji, Y., Saxena, P., and Song, D. Document
Structure Integrity: A Robust Basis for Cross-Site
Scripting Defense. In Proceeding of the Network and
Distributed System Security Symposium (NDSS)
(2008).
[34] Nguyen-tuong, A., Guarnieri, S., Greene, D.,
and Evans, D. Automatically Hardening Web
Applications Using Precise Tainting. In Proceedings of
the IFIP International Information Security
Conference (2005).
[35] Pietraszek, T., and Berghe, C. V. Defending
against Injection Attacks through Context-Sensitive
String Evaluations. In Proceedings of the Symposium
on Recent Advances in Intrusion Detection (RAID)
(2005).
[36] Robertson, W., and Vigna, G. Static Enforcement
of Web Application Integrity Through Strong Typing.
In Proceedings of the USENIX Security Symposium
(USENIX) (Montreal, Quebec CA, 2009).
[37] Ruby on Rails. http://rubyonrails.org/, 2013.
[38] Samuel, M., Saxena, P., and Song, D.
Context-Sensitive Auto-Sanitization in Web
Templating Languages Using Type Qualiﬁers. In
Proceedings of the ACM Conference on Computer and
Communications Security (CCS) (2011).
[39] Saxena, P., Akhawe, D., Hanna, S., Mao, F.,
McCamant, S., and Song, D. A Symbolic
Execution Framework for JavaScript. In Proceedings of
the IEEE Symposium on Security and Privacy (2010).
[40] Saxena, P., Molnar, D., and Livshits, B.
ScriptGard: Automatic Context-Sensitive
Sanitization for Large-Scale Legacy Web Applications.
In Proceedings of the ACM Conference on Computer
and Communications Security (CCS) (2011).
[41] ScrewTurn Wiki. http://www.screwturn.eu/, 2013.
[42] Stamm, S., Sterne, B., and Markham, G. Reining
in the Web with Content Security Policy. In
Proceedings of the International World Wide Web
Conference (WWW) (2010).
[43] Su, Z., and Wassermann, G. The Essence of
Command Injection Attacks in Web Applications. In
Proceedings of the Symposium on Principles of
Programming Languages (POPL) (2006).
[44] Tripp, O., Pistoia, M., Fink, S. J., Sridharan,
M., and Weisman, O. TAJ: Eﬀective Taint Analysis
of Web Applications. In Proceedings of the ACM
SIGPLAN Conference on Programming Language
Design and Implementation (PLDI) (2009).
[45] Vogt, P., Nentwich, F., Jovanovic, N., Kirda,
E., Kruegel, C., and Vigna, G. Cross-Site
Scripting Prevention with Dynamic Data Tainting and
Static Analysis. In Proceeding of the Network and
Distributed System Security Symposium (NDSS)
(2007).
[46] Wassermann, G., and Su, Z. Sound and Precise
Analysis of Web Applications for Injection
Vulnerabilities. In Proceedings of the ACM SIGPLAN
Conference on Programming Language Design and
Implementation (PLDI) (2007).
[47] Weinberger, J., Barth, A., and Song, D. Towards
Client-side HTML Security Policies. In Proceedings of
the USENIX Workshop on Hot Topics in Security
(2011).
[48] Weinberger, J., Saxena, P., Akhawe, D.,
Finifter, M., Shin, R., and Song, D. A Systematic
Analysis of XSS Sanitization in Web Application
Frameworks. In Proceedings of the European
Symposium on Research in Computer Security
(ESORICS) (Leuven, Belgium, 2011).
[49] Xie, Y., and Aiken, A. Static Detection of Security
Vulnerabilities in Scripting Languages. In Proceedings
of the USENIX Security Symposium (USENIX)
(2006).
[50] Yu, F., Alkhalaf, M., and Bultan, T. Stranger:
An Automata-based String Analysis Tool for PHP. In
Proceedings of the International Conference on Tools
and Algorithms for the Construction and Analysis of
Systems (TACAS) (2010).
1216