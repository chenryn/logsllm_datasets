### Complementary Approaches to XSS Defense

A complementary approach to defending against Cross-Site Scripting (XSS) involves assuming a set of "correct" sanitizers and inserting them to match the browser's parsing context. Bek [18] focuses on creating sanitization functions that can be automatically analyzed for precision and correctness. Sanitization remains the primary industry-standard defense against XSS and related vulnerabilities.

### Server-Side Defenses

Several server-side defenses restrict scripts included in server-generated pages. For example, XSS-GUARD [4] dynamically determines valid scripts and disallows unexpected ones. The authors report performance overheads of up to 46% due to the dynamic evaluation of HTML and JavaScript. Templating approaches [13, 36, 38] generate contextually correct scripts with appropriate sanitization. Additionally, code isolation schemes [1, 2, 26] mitigate XSS by limiting DOM access for specific scripts based on their context.

Certain XSS defenses [21, 22, 27, 29, 34, 35, 39, 44, 49] use data-flow analysis or taint tracking to identify unsanitized user input included in generated web pages. These approaches typically rely on sanitization, encoding, and other methods to separate unsafe inputs from script code. Some schemes prevent XSS bugs dynamically, while others focus on static detection and elimination.

Other approaches [14, 28, 33] combine server-side processing with various client-side components, such as confining untrusted inputs and randomizing markup. Such schemes may parse documents on the server and prevent any modifications of the resulting parse trees on the client. Randomizing XHTML tags can render foreign script code meaningless, thereby defeating many code-injection attacks.

### Client-Side Methods

Client-side XSS defenses [20, 23, 30, 42, 45, 47] mitigate XSS while receiving or rendering untrusted web content. Some of these schemes rely on browser modifications or plugins, which often reduce their practical applicability. Others use custom JavaScript libraries or additional client-side monitoring software. Content Security Policy (CSP) [42] is a browser-based approach, and its incorporation into web standards should facilitate wide acceptance and support by all popular browsers.

Some client-side XSS defenses focus on detecting and preventing the leakage of sensitive data. For example, Noxes [23] operates as a personal firewall plugin that extracts all static links from incoming web pages, prompting the user about the disclosure of information via dynamically generated links. Vogt et al. [45] also address this problem but use taint-tracking analysis within a browser to check for sensitive data released via XSS attacks. In contrast, deDacota simply prevents any XSS exploits that could enable such leakage.

Client-side HTML security policies mitigate XSS through content restrictions, such as disallowing unsafe features or executing only "known good" scripts. BEEP [20] constructs whitelists of scripts using the browser's HTML parser, similar to XSS-GUARD's server-side approach [4]. However, BEEP assumes no dynamic scripts whose hashes cannot be pre-computed, limiting its practicality with modern web applications. Moreover, even whitelisted scripts may be vulnerable to attacks [2]. Another custom content security policy is Blueprintâ€™s page descriptions, which are interpreted and rendered safely by a custom JavaScript library [28]. Runtime-enforced script policies [15, 30] are also useful for mitigating XSS exploits.

In general, standardized HTML security policies [42, 47] offer promise as a means of escaping the recent proliferation of complex, often ad hoc XSS defenses. CSP simplifies the problem by enforcing strong restrictions, such as disabling `eval()` and other dangerous APIs, prohibiting inline JavaScript, and allowing only local script resources to be loaded. While new web applications can be designed with CSP in mind, legacy code may require significant rewriting. deDacota works on both old and new applications, facilitating the adoption of CSP by developers, primarily by automating the separation process.

### Conclusion

Cross-site scripting vulnerabilities are pervasive in web applications. Malicious users frequently exploit these vulnerabilities to infect users with drive-by downloads or to steal personal information.

While there is currently no single solution to prevent every possible XSS attack vector, adhering to the fundamental security principle of code and data separation is a promising approach to combating XSS vulnerabilities. deDacota is a novel approach that uses static analysis to automatically separate the code and data of a web application. Although not a final solution, deDacota and other tools that automate making web applications secure by construction are the next step in the fight against XSS and other kinds of vulnerabilities.

### Acknowledgments

The authors extend their thanks to David Molnar, Alex Moshchuk, Helen Wang, and Chris Hawblitzel for their helpful discussions, Herman Venter for his support with CCI, and David Brumley for his insightful suggestions. This work was supported by the Office of Naval Research (ONR) under Grant N000140911042, the Army Research Office (ARO) under Grant W911NF0910553, the National Science Foundation (NSF) under Grants CNS-0845559 and CNS-0905537, and Secure Business Austria.

### References

[References list remains unchanged]