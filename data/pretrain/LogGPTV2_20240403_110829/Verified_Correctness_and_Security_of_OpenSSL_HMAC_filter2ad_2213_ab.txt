tional spec of SHA-256, including deﬁnitions of all these
functions, comes to 169 lines of Coq, all of which is in
the trusted base for the security/correctness proof.
In this paper we show the full functional spec for
the HMAC construction applied to hash
HMAC256,
function SHA 256:
Deﬁnition mkKey (l:list Z):list Z :=
zeropad (if |l| > 64 then SHA-256 l else l).
Deﬁnition KeyPreparation (k: list Z):list byte :=
map Byte.repr (mkKey k).
Deﬁnition HASH l m := SHA-256 (l++m)
Deﬁnition HmacCore m k :=
HASH (opad ⊕ k) (HASH (ipad ⊕ k) m)
Deﬁnition HMAC256 (m k : list Z) : list Z :=
HmacCore m (KeyPreparation k)
where zeropad right-extends1 its argument to length 64
(i.e. to SHA256’s block size, in bytes), ipad and opad are
the padding constants from FIPS198-1, ⊕ denotes byte-
wise XOR, and ++ denotes list concatenation.
3 API speciﬁcations of C functions
(Items 10, 12 of the architecture.) Hoare logic [31], dat-
ing from 1969, is a method of proving correctness of im-
perative programs using preconditions, postconditions,
and loop invariants. Hoare’s original logic did not handle
pointer data structures well. Separation logic, introduced
in 2001 [37], is a variant of Hoare logic that encapsulates
“local actions” on data structures.
1The more recent RFC4868 mandates that when HMAC is used
for authentication, a ﬁxed key length equal to the output length of
the hash functions MUST be supported, and key lengths other than
the output length of the associated hash function MUST NOT be sup-
ported. Our speciﬁcation clearly separates KeyPreparation from
HmacCore, but at the top level follows the more permissive standards
RFC2104/FIPS198-1 as well as the implementation reality of even con-
temporary snapshots of OpenSSL and its clones.
Veriﬁable C [6] is a separation logic that applies to the
real C language. Veriﬁable C’s rules are complicated in
some places, to capture C’s warts and corner cases.
The FIPS 180 and FIPS 198 speciﬁcations—and our
deﬁnitions of SHA 256 and HMAC256—do not explain
how the “mathematical” sequences of bytes are laid out
in the arrays and structs passed as parameters to (and
used internally by) the C functions. For this we need an
API spec. Using Veriﬁable C, one speciﬁes the API be-
havior of each function: the data structures it operates on,
its preconditions (what it assumes about the input data
structures available in parameters and global variables),
and the postcondition (what it guarantees about its return
value and changes to data structures). Appel [5, §7] ex-
plains how to build such API specs and shows the API
spec for the SHA 256 function.
Here we show the API spec for HMAC. First we deﬁne
a Coq record type,
Record DATA := { LEN:Z; CONT: list Z }.
If key has type DATA, then LEN(key) is an integer and
CONT(key) is “contents” of the key, a sequence of inte-
gers. We do not use Coq’s dependent types here to en-
force that LEN corresponds to the length of the CONT
ﬁeld, but see the has lengthK constraint below.
To specify the API of a C-language function in Veriﬁ-
able C, one writes
DECLARE f WITH (cid:30)v
PRE[params] Pre POST [ret] Post.
where f is the name of the function, params are the for-
mal parameters (of various C-language types), and ret is
the C return type. The precondition Pre and postcondi-
tion Post have the form PROPP LOCALQ SEPR, where
P is a list of pure propositions (true independent of the
current program state), Q is a list of local/global variable
bindings, and R is a list of separation logic predicates that
describe the contents of memory. The WITH clause de-
scribes logical variables (cid:30)v, abstract mathematical values
that can be referred to anywhere in the precondition and
postcondition.
In our HMAC256-spec, shown below, the ﬁrst “ab-
stract mathematical value” listed in this WITH clause is
the key-pointer kp, whose “mathematical” type is “C-
language value’,’ or val.
It represents an address in
memory where the HMAC session key is passed. In the
LOCAL part of the PREcondition, we say that the formal
parameter -key actually contains the value kp on entry to
the function, and in the SEP part we say that there’s a
data-block at location kp containing the actual key bytes.
In the postcondition we refer to kp again, saying that the
data-block at address kp is still there, unchanged by the
HMAC function.
210  24th USENIX Security Symposium 
USENIX Association
Deﬁnition HMAC256-spec :=
DECLARE -HMAC
WITH kp: val, key:DATA, KV:val,
mp: val, msg:DATA, shmd: share, md: val
PRE [ -key OF tptr tuchar, -key-len OF tint,
-d OF tptr tuchar, -n OF tint,
-md OF tptr tuchar ]
PROP(writable share shmd;
has lengthK (LEN key) (CONT key);
has lengthD 512 (LEN msg) (CONT msg))
LOCAL(temp -md md; temp -key kp; temp -d mp;
temp -key-len (Vint (Int.repr (LEN key)));
temp -n (Vint (Int.repr (LEN msg)));
gvar -K256 KV)
SEP(`(data-block Tsh (CONT key) kp);
`(data-block Tsh (CONT msg) mp);
`(K-vector KV);
`(memory-block shmd (Int.repr 32) md))
POST [ tvoid ]
PROP() LOCAL()
SEP(`(K-vector KV);
`(data-block shmd
(HMAC256 (CONT msg) (CONT key)) md);
`(data-block Tsh (CONT key) kp);
`(data-block Tsh (CONT msg) mp)).
The next WITH value is key, a DATA value, that
is, a mathematical sequence of byte values along
In the PROP clause of
with its (supposed) length.
the precondition, we enforce this supposition with
has lengthK (LEN key) (CONT key).
The function Int.repr injects from the mathemati-
cal integers into 32-bit signed/unsigned numbers. So
temp -n (Vint (Int.repr (LEN msg))) means,
take the
mathematical integer (LEN msg), smash it into a 32-bit
signed number, inject that into the space of C values,
and assert that the parameter -n contains this value on
entry to the function. This makes reasonable sense if
0 ≤ LEN msg < 232, which is elsewhere enforced by
has lengthD. Such 32-bit range constraints are part of
C’s “warts and all,” which are rigorously accounted for
in Veriﬁable C. Both has lengthK and has lengthD are
user-deﬁned predicates within the HMAC API spec.
The precondition contains an uninitialized 32-byte
memory-block at address md, and the -md parameter of
the C function contains the value md. In the postcondi-
tion, we ﬁnd that at address md the memory block has
become an initialized data block containing a represen-
tation of HMAC256 (CONT msg) (CONT key).
For stating and proving these speciﬁcations, the fol-
lowing characteristics of separation logic are crucial:
1. The SEP lists are interpreted using the separat-
ing conjunction ∗ which (in contrast to ordinary
conjunction ∧) enforces disjointness of the mem-
ory regions speciﬁed by each conjunct. Thus,
the precondition requires—and the postcondition
guarantees—that keys, messages, and digests do not
overlap.
2. Implicit in the semantic interpretation of a separa-
tion logic judgment is a safety guarantee of the ab-
sence of memory violations and other runtime er-
rors, apart from memory exhaustion.
In particu-
lar, veriﬁed code is guaranteed to respect the spec-
iﬁed footprint: it will neither read from, nor mod-
ify or free any memory outside the region speci-
ﬁed by the SEP clause of PRE. Moreover, all heap
that is locally allocated is either locally freed, or is
accounted for in POST. Hence, memory leaks are
ruled out.
3. As a consequence of these locality principles, sep-
aration logic speciﬁcations enjoy a frame property:
a veriﬁed judgment remains valid whenever we add
an arbitrary additional separating conjunct to both
SEP-clauses. The corresponding proof rule, the
frame rule, is crucial for modular veriﬁcation, guar-
anteeing, for example, that when we call SHA-256,
the HMAC data structure remains unmodiﬁed.
The HMAC API spec has the 25 lines shown here
plus a few more for deﬁnitions of auxiliary predicates
(has-lengthK 3 lines, has-lengthD 3 lines, etc.); plus the
API spec for SHA-256, all in the trusted base.
Incremental hashing. OpenSSL’s HMAC and SHA
functions are incremental.
One can initialize the
hasher with a key, then incrementally append message-
fragments (not necessarily block-aligned) to be hashed,
then ﬁnalize to produce the message digest. We fully
support this incremental API in our correctness proofs.
For simplicity we did not present it here, but Appel [5]
presents the incremental API for SHA-256. The API
spec for fully incremental SHA-256 is 247 lines of Coq;
the simple (nonincremental) version has a much smaller
API spec, similar to the 25+6 lines shown here for the
nonincremental HMAC.
Once every function is speciﬁed, we use Veriﬁable C
to prove that each function’s body satisﬁes its speciﬁca-
tion. See Section 6.
4 Cryptographic properties of HMAC
(Items 14, 15, 16 of the architecture.) This section de-
scribes a mechanization of a cryptographic proof of se-
curity of HMAC. The ﬁnal result of this proof is similar
to the result of Bellare et al. [15], though the structure
of the proof and some of the deﬁnitions are inﬂuenced
USENIX Association  
24th USENIX Security Symposium  211
by Bellare’s later proof [14]. This proof uses a more ab-
stract model of HMAC (compared to the functional spec
in §2) in which keys are in {0,1}b (the set of bit vectors
of length b), inputs are in {0,1}∗ (bit lists), and outputs
are in {0,1}c for arbitrary b and c such that c ≤ b. An
implementation of HMAC would require that b and c are
multiples of some word size, and the input is an array
of words, but these issues are typically not considered in
cryptographic proofs.
In the context of the larger proof described in this pa-
per, we refer to this model of HMAC in which sizes are
arbitrary as the abstract speciﬁcation of HMAC. In or-
der to use security results related to this speciﬁcation, we
must show that this speciﬁcation is appropriately related
to the speciﬁcation provided in §2. We chose to prove the
security of the abstract speciﬁcation, rather than directly
proving the security of a more concrete speciﬁcation, be-
cause there is signiﬁcant value in this organization. Pri-
marily, this organization allows us to use the exact def-
initions and assumptions from the cryptography litera-
ture, and we therefore gain greater assurance that the def-
initions are correct and the assumptions are reasonable.
Also, this approach demonstrates how an existing mech-
anized proof of cryptographic security can be used in a
veriﬁcation of the security of an implementation. This
organization also helps decompose the proof, and it al-
lows us to deal with issues related to the implementation
in isolation from issues related to cryptographic security.
We address the “gap” between the abstract and con-
crete HMAC speciﬁcations by proving that they are
equivalent. Section 5 outlines the proof and states the
equivalence theorem.
4.1 The
Foundational
Framework
Cryptography
This proof of security was completed using the Founda-
tional Cryptography Framework (FCF), a Coq library for
reasoning about the security of cryptographic schemes
in the computational model [38]. FCF provides a proba-
bilistic programming language for describing all crypto-
graphic constructions, security deﬁnitions, and problems
that are assumed to be hard. Probabilistic programs are
described using Gallina, the purely functional program-
ming language of Coq, extended with a computational
monad that adds sampling uniformly random bit vectors.
The type of probabilistic computations that return values
of type A is Comp A. The code uses {0,1}ˆn to de-
scribe sampling a bit vector of length n. Arrows (<-$)
denote sequencing (i.e. bind) in the monad.
Listing 1 contains an example program implementing
a one-time pad on bit vectors of length c (for any natural
number c). The program produces a random bit vector
and stores it in p, then returns the xor (using the standard
Deﬁnition OTP c (x : Bvector c) : Comp (Bvector c)
:= p <-$ {0, 1}ˆc; ret (BVxor c p x)
Listing 1: Example Program: One-Time Pad.
Coq function BVxor) of p and the argument x.
The language of FCF has a denotational semantics that
relates programs to discrete, ﬁnite probability distribu-
tions. A distribution on type A is modeled as a function
in A → Q which should be interpreted as a probability
mass function. FCF provides a theory of distributions, a
program logic, and a library of tactics that can be used to
complete proofs without appealing directly to the seman-
tics. We can use FCF to prove that two distributions are
equivalent, that the distance between the probabilities of
two events is bounded by some value, or that the proba-
bility of some event is less than some value. Such claims
enable cryptographic proofs in the “sequence of games”
style [16].
In FCF, an oracle has
In some cryptographic deﬁnitions and proofs, an
adversary is allowed to interact with an “oracle”
that maintains state while accepting queries and pro-
viding responses.
type
S → A → Comp (B ∗ S) for types S, A, and B, of state,
input, and output, respectively. The OracleComp type is
provided to allow an adversary to interact with an oracle
without viewing or modifying its state. By combining
an OracleComp with an oracle and a value for the initial
state of the oracle, we obtain a computation returning a
pair of values, where the ﬁrst value is produced by the
OracleComp at the end of its interaction with the oracle,
and the second value is the ﬁnal state of the oracle.
4.2 HMAC Security
We mechanized a proof of the following fact. If h is a
compression function, and h∗ is a Merkle-Damg˚ard hash
function constructed from h, then HMAC based on h∗ is
a pseudorandom function (PRF) assuming:
1. h is a PRF.
2. h∗ is weakly collision-resistant (WCR).
3. The dual family of h (denoted ¯h) is a PRF against
⊕-related-key attacks.
The formal deﬁnition of a PRF is shown in Listing
2. In this deﬁnition, f is a function in K → D → R that
should be a PRF. That is, for a key k : K, an adversary
who does not know k cannot gain much advantage in
distinguishing f k from a random function in D → R.
The adversary A is an OracleComp that interacts with
either an oracle constructed from f or with randomFunc,
212  24th USENIX Security Symposium 
USENIX Association
a random function constructed by producing random val-
ues for outputs and memoizing them so they can be re-
peated the next time the same input is provided. The
randomFunc oracle uses a list of pairs as its state, so an
empty list is provided as its initial state. The value tt is
the “unit” value, where unit is a placeholder type much
like “void” in the C language. This deﬁnition uses alter-
native arrows (such as <-$2) to construct sequences in
which the ﬁrst computation produces a tuple, and a name
is given to each value in the tuple. The size of the tuple
is provided in the arrow in order to assist the parser.
Deﬁnition f-oracle (k : K) (x : unit) (d : D)
ret (f k d, tt).
: Comp (R × unit) :=
Deﬁnition PRF-G0 : Comp bool :=
k <-$ RndKey;
[b, -] <-$2 A (f-oracle k) tt; ret b.
Deﬁnition PRF-G1 : Comp bool :=
[b, -] <-$2 A (randomFunc) nil; ret b.
Deﬁnition PRF-Advantage : Rat :=
| Pr[PRF-G0] -Pr[PRF-G1] |.
Listing 2: Deﬁnition of a PRF. The f oracle function