x (x = 0 before the execution of both transactions) and both
transactions increment this value by one. Both read/writesets
now contain a read for x = 0 and a write for x = 1 in the
endorsements. After ordering TxA before TxB, for example,
we have a write x = 1 for TxB, instead of write x = 2, as
it should be when executing TxA and TxB sequentially. The
validation step solves this problem by invalidating TxB.
The execute-order-validate model is suited for new deploy-
ments of a blockchain system where the base protocol can
dictate that all peers (i.e., system participants like miners)
perform transaction validation. Our goal in this paper is to
add smart contract execution capabilities as a subsystem that
operates on top of an unmodiﬁed legacy cryptocurrency. In
this respect, the execute-order-validate model is not suitable
for such a subsystem, since if the read-/writesets validation
is only performed by the subsystem participants, then money
transfers in the subsystem are not consistent with the rules for
money transfers in the legacy cryptocurrency.
We illustrate this problem with an example. Consider again
two conﬂicting transactions, TxA and TxB, in the same block.
Assume that the transactions were created by a subsystem that
runs on top of unmodiﬁed Bitcoin. Now consider that before
executing these two transactions the contract has a balance of
3
1 coin, and TxB sends this coin to some other party. Given
the execute-order-validate model, TxB will be invalidated by
subsystem participants, even though it has been included in
a block. That is, from the point of view of the subsystem
participants, the contract still has a balance of 1 coin that it
can use in future transactions. However, all participants of the
legacy cryptocurrency will adhere to the Bitcoin protocol and
they do not invalidate this transaction. Thus, from their point of
view, the account associated with the contract has a balance of
0. Any transaction sent by clients of the subsystem that would
cause the balance of the contract to decrease, would thus be
rejected by these other parties, including miners, even though
they would be valid within the subsystem.
Enclaved execution. The next known approach is to outsource
contract execution into trusted execution environments (TEEs)
like SGX enclaves. Ekiden [14] is an example system that
follows this approach. The main problem with such solutions
is that if the adversary compromises the enclave where the
contract is executed, he can arbitrarily violate its integrity and,
e.g., steal all the contract-controlled funds. Recent research
on SGX side channels [11], [45], [29] and micro-architectural
attacks [13], [44] has shown that TEE compromise is a
practical threat that should be considered.
Blockchain multiparty computation. Recent research has
also explored how to run secure multiparty computation (MPC)
on blockchains. The main goal of such works is to improve
fairness of existing MPC protocols, rather than adding contract
execution to legacy blockchains, but such schemes can also be
seen as speciﬁc types of smart contracts.
In MPC, a set of parties provide private inputs and jointly
evaluate a function over them. A common challenge is that
malicious parties can stop participating once they learn the
function output and prevent other parties from learning the
output and thus violate fairness. An impossibility result from
Cleve [15] proves that no MPC protocol can be fair without
an honest majority. In recent research, it has been shown that
this fairness problem can be alleviated, to an extent, using
blockchain. Andrychowicz et al. were the ﬁrst to show how to
implement fair 2-party lottery on Bitcoin [6]. This result was
extended to n-party lotteries [9], playing poker [28] and other
MPC protocols [26]. In such schemes, each party must place a
deposit on the blockchain. If a participant stops participating,
he loses his deposit (i.e., these systems create monetary incen-
tives against fairness violation but cannot completely prevent
it).
If such MPC protocols are treated as smart contracts, they
have several functional limitations. First, these solutions are
customized to very speciﬁc computations and extending the
same ideas to arbitrary business contracts and applications is
hard. Second, all contract participants and the duration of the
contract have to be known in advance which is not true for
many smart contracts in systems like Ethereum. And third,
some of these solutions require modiﬁcations to the underlying
blockchain, such as adding new instructions to the scripting
language [28].
Enclaved multiparty computation. A recent work called
FastKitten [16] combines techniques from Ekiden [14] and
blockchain-based MPC [6], [9], [28], [26] to enable contract-
like computations on top of unmodiﬁed Bitcoin. Similar to
Ekiden, FastKitten also uses an SGX enclave to execute the
smart contract. Similar to MPC schemes, all participants must
place a deposit in the contract before its execution. In addition,
the operator of the TEE has to post a deposit that equals the
sum of all user deposits. If the protocol fails (because one user
misbehaves), all parties except the misbehaving get their initial
deposit back.
From a functional point of view, FastKitten has the same
problems as MPC schemes (contracts must have ﬁxed par-
ticipants and limited lifespan) and the contracts enabled by
FastKitten are therefore much more restricted than in Ethereum
which allows an unlimited lifespan and a dynamic participant
list. FastKitten also has security problems. One example is
an attack where multiple participants collude. For example, if
it becomes clear from an execution up to the last round that
Bob and Charlie will lose all of their deposit to Alice, the
ﬁrst two can collude such that Bob stops sending messages.
While Bob will still lose his deposit, Charlie will receive his
full collateral back and Alice is cheated out of her gain. Thus,
smart contracts in FastKitten are not completely self-enforcing
under malicious behavior. Finally, FastKitten is vulnerable to
TEE compromise similar to Ekiden.
III. BITCONTRACTS OVERVIEW
In this section, we provide an overview of our solution
Bitcontracts. First, we describe our execution model and
discuss the challenges of realizing it. After that, we explain
the main ideas of Bitcontracts and deﬁne common properties
that a blockchain must provide to support it.
A. Execution and Trust Model
The starting point of our work is an off-chain execution
model in which the execution of contracts is decoupled from
the consensus process. An obvious approach is to distribute
trust among several service providers, such that one trusts a
set of service providers collectively, as is done in system like
Arbitrum [25], Fabric [5] or ACE [50]. Service providers in
such a model could be reputable companies or non-proﬁts. In
Bitcontracts, we follow this approach as well.
However, unlike Arbitrum, where all service providers
must unanimously agree on the contract execution results, we
adopt a more ﬂexible trust model similar to ACE and Fabric,
in which the contract creator can choose the requirements for
acceptable execution results per contract. Namely, the creator
of a contract chooses a set E that consists of n service providers
and a threshold t of required authorizations. A state transition
caused by contract call is considered valid if the transaction
committing the results is authorized by at least t members of
the executing set E. Contract participants are free to take part
in contracts only if they agree with the chosen speciﬁcation,
i.e., they agree with the assumption that fewer than t members
of E are malicious. Note that, in order to ensure safety and
liveness at the same time, a majority of the service providers in
E need to be honest, even if the threshold t is lower. Otherwise
a malicious majority could sign wrong results (if t ≤ n/2) or
violate liveness (if t > n/2).
However, it is still valuable that t can be freely chosen to be
able to prioritize either safety or liveness. Such a model allows
ﬂexibility depending on the requirements of the use case. For
4
example, if strong integrity is required, but high availability is
not crucial, one may choose a large E with t close to n = |E|.
If on the other hand, E is chosen such that all of the members
are trusted and high availability is required, one can choose a
low threshold such as t = 1. Contracts that are expected to be
active for a long period could specify conditions for replacing
service providers within the contract itself, as discussed in [50].
Our trust model modiﬁes the typical trust assumptions of
smart contract systems slightly. In Ethereum, the speciﬁcation
of a smart contract is deﬁned by its code (cf. Appendix A).
In our system, the speciﬁcation also includes a set of service
providers and the threshold. Importantly, all users decide if
they trust and agree with this speciﬁcation. They can make
this decision by either performing the due diligence themselves
or by trusting other parties to perform it for them, similar to
checking the trustworthiness of contract code in Ethereum, but
they are not required to trust the contract creator. Finally, also
similar to Ethereum, they only need to trust the speciﬁcation
of contracts they participate in and are not affected by the
execution of other contracts. For example, if one contract’s
executing set is compromised, other contracts remain secure.
B. Challenges
The primary technical challenge that we solve is how to
realize the above outlined execution and trust model securely
and efﬁciently for contract execution on legacy blockchains.
Next, we discuss why simple solutions fail
to solve the
problem.
Where to store state? We start by considering the storage
of a contract’s state. The ﬁrst possible option is to store
the state of each contract off-chain at the service providers.
Due to our quorum-based execution authorization, not every
service provider needs to be involved in every contract call,
and thus some service providers might not have the latest
state of the contract. Therefore, in this approach, the service
providers would need to run a consensus protocol between
them to ensure consistency of the contract’s state. This is
a costly process, adds unnecessary overhead to the service
providers, and incurs restrictions on the size of the quorum
as it needs to be more than 2
3 n given n service providers.
While the consensus process could be simpliﬁed by storing the
hash of the current state on the blockchain (and thus partially
leveraging the blockchain consensus), the service providers
still need to ensure that all of them are in possession of the
latest state. If the system should be able to include multiple
transactions involving the same contract in the same block,
they still need to ensure consistency and thus coordinate to
ensure that they do not end up in diverging states.
The second option is to store the state of each contract on-
chain, i.e., publish it on the blockchain of the underlying cryp-
tocurrency. This option leverages the consensus mechanism of
the underlying cryptocurrency, instead of requiring that the
service providers need to run an expensive and complicated2
consensus protocol separately and ensures that all parties
have access to the latest state. This also allows clients to
individually verify the correctness of every execution result.
Another advantage of storing the full state on-chain is that
2Deploying consensus protocols requires thousands of lines of non-trivial
code that is difﬁcult to check for correctness [23].
service providers themselves can remain completely stateless
and do not need communication with other service providers
or the blockchain, i.e. they only need to communicate with the
client and do not need persistent storage for contract state.
How to ensure consistency? It may seem that storing the
state on the blockchain is sufﬁcient
to ensure consistency
between the service providers and thus the integrity of the
smart contracts they execute, but this is not the case. We
illustrate this with a simple example attack.
3 n and the adversary controls 1
Assume an idealized blockchain where transactions cannot
be reorganized and every created block is ﬁnal. Also assume
that the contract’s issuer sets the authorization threshold to
3 n of the service providers.
t = 2
The adversary triggers two different contract calls to two
distinct sets of honest service providers, sized 1
3 n each. Both
sets authorize the contract call based on the current state of
the contract that is stored on the chain. The adversary then
authorizes both contract calls with the 1
3 n service providers
that he controls, and thus both contract calls have the required
3 n authorizations. Then, the adversary publishes the
t = 2
ﬁrst execution result that updates the contract’s state and, for
example, transfer funds out of the contract. After that, the
adversary publishes the second execution result that updates
the contract’s state based on the previous stale state which
means that the results of the ﬁrst contract call are reverted,
except for their side effects such as money transfers.
A simple solution to this problem would be to mandate that
the threshold t must always be sufﬁciently large to prevent such
3 n. This simple solution has two problems.
attack, i.e., t > 2
First, it prevents deployments where low thresholds should
be used for best possible availability. And second, it would
not prevent the above outlined attacks in blockchains, where
temporary forks are possible (e.g., all legacy blockchains based
on PoW consensus).
In Fabric and ACE (which have a similar trust model to Bit-
contracts and also leverage off-chain execution), this problem
is solved in different ways. ACE uses an order-execute-commit
model and Fabric uses an execute-order-validate approach.
Both systems therefore require additional steps after ordering
the transactions. However, ordering in legacy cryptocurrencies
has side-effects, such as money transfers, as discussed in Sec-
tion II-B, and thus potential inconsistencies need to be resolved
before or during the ordering phase. One of our challenges is,
therefore, how to ensure transaction serializability both in the
subsystem (that adds contract execution capabilities) and the
legacy cryptocurrency without requiring additional steps after
ordering. In other words, our solution needs to be compatible
with an execute-order architecture.
C. Overview of Bitcontracts
Next, we explain the main ideas behind Bitcontracts, and
introduce the properties (1-4) that are required from a legacy
cryptocurrency to enable it. Figure 1 shows an overview.
Bitcontracts combines off-chain execution of contracts
with on-chain storage for contract state. This design decision
allows the service providers to be stateless, enables ﬂexi-
ble trust models and high availability, provides transparency
importantly does
towards the contract’s clients, and most
5
Existing Blockchain System
Clients
P2P
Network
Miners
Ȑ
Ȑ
Ȑ
Bitcontracts
Clients
Service
Providers
P
B
Ȑ
Ȑ
Ȑ
Fig. 1. Bitcontracts overview. Bitcontracts extends existing blockchain
systems without changing their protocol, i.e. existing nodes such as clients and
miners are agnostic to Bitcontracts. Bitcontracts clients interface with the
blockchain and Bitcontracts service providers. Service providers are stateless
and do not need to interact with the blockchain system.
not require a new consensus protocol since it leverages the
consensus of the underlying legacy blockchain instead. We
acknowledge that storing the contract state on the chain comes
with a cost (that we evaluate in Section IX), but argue that
these beneﬁts combined outweigh this drawback.
In Bitcontracts, a smart contract account
is a normal
blockchain account managed jointly by multiple service
providers using (1) multiparty authorization like multi-
signature transactions. The current state of each smart contract
is stored on the chain using another common feature of
blockchains, (2) arbitrary data storage.
Because the contracts’ state is recorded on the chain, the
contracts’ clients can assemble the latest contract state from
the chain at any time. For each contract call, the client that
initiates the call assembles the contract’s state and sends it
to the service providers that are registered for this contract
together with the contract’s code and call input parameters.
The service providers execute the contract call and encode
the execution results as a signed state update transaction that
they return to the client. The client completes the transaction
by combining the received signatures from t service providers
that report the same result so that the required multiparty
authorization is fulﬁlled and broadcast the completed trans-
action to the P2P network. The miners accept the state change
transaction if it is signed by at least t service providers who
control that contract’s account.
We note that it might seem counterintuitive to have the
client assemble and broadcast the ﬁnal transaction, as he can
then choose not to broadcast it if the results are unfavorable
to him. However, in Bitcontracts this design decision does
not provide the client any advantage, since contract execution
is deterministic (see Section VIII-A for details) and therefore
the client can know the results of the contract execution before
initiating the contract call. This means that instead of creating
the contract call and then withholding the result, the client
could simply calculate the result himself and then choose not
to call the contract. The same property holds in other smart
contract systems such as Ethereum.
To prevent the attacks described in Section III-B where the