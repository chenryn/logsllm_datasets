原文链接
# 系统地搜索PHP disable_functions绕过
过去几天，在 **imap_open** 函数
([CVE-2018-19518](https://www.cvedetails.com/cve/cve-2018-19518)中发现了一个漏洞。这个漏洞的主要影响是，本地用户可以使用这个漏洞，绕过经过加固的服务器中的一些限制，并执行OS命令，因为这个功能通常是允许的。这种绕过方式与ShellShock
类似:可以在disable_functions不禁止的函数中注入OS命令。我想找到一种自动发现类似绕过的方法。
分步解决这个问题
  1. 抽取PHP 函数的每个参数
  2. 对于每个函数使用正确的参数 执行 跟踪调用 
  3. 在跟踪的过程中寻找每个可能的危险调用
当然这是一种幼稚的方法，但是同样的工作可以在fuzzing的时候被重用，所以我想这不是一种无用的工作。
## 抽取参数
步骤一中最重要的事情是用一种可行的方法正确地猜测或识别每个函数所使用的参数。当然我们可以从公开的PHP文档上寻找，但是一些函数的参数没有被文档记录，或者文档仅仅记为mixed。这是很重要的如果函数不能被正确的调用，我们的跟踪就会错过潜在的危险函数调用或者调用。
有不同的方式完成识别。各有特色。我们需要组合使用最大化的发现参数和他们的类型。
有一个特别方便的方法，使用类 ReflectionFunction
。通过这个简单的类，我们可以从PHP中获得每个可用的函数的名称和参数，但是他的缺点是我们不知道真正的类型，我们只能区分字符串和数组。举例如下
    getParameters() as $param) {
                if ($param->isArray()) {
                    $parameters .=  "ARRAY ";
                } else {
                    $parameters .= "STRING ";
                }
            }
            echo substr($parameters, 0, -1);
            echo "\n";
        }
        ?>
这段代码生成了一个函数列表，我们可以稍后解析这些函数来生成我们要跟踪调用的测试:
    json_last_error_msg
        spl_classes
        spl_autoload STRING STRING
        spl_autoload_extensions STRING
        spl_autoload_register STRING STRING STRING
        spl_autoload_unregister STRING
        spl_autoload_functions
        spl_autoload_call STRING
        class_parents STRING STRING
        class_implements STRING STRING
        class_uses STRING STRING
        spl_object_hash STRING
        spl_object_id STRING
        iterator_to_array STRING STRING
        iterator_count STRING
        iterator_apply STRING STRING ARRAY
更好的方法是将PHP内部用于解析参数的方法进行hook，就像这篇文章中说的"使用frida寻找PHP内置函数中隐藏的参数"[Hunting for
hidden parameters within PHP built-in functions (using
frida)](http://www.libnex.org/blog/huntingforhiddenparameterswithinphpbuilt-infunctionsusingfrida)。作者用FRIDA hook 了 "zend_parse_parameters"
函数，而且解析了验证参数传递的模式。关于FRIDA的文章，[Hacking a game to learn FRIDA basics (Pwn
Adventure 3)](https://x-c3ll.github.io/posts/Frida-Pwn-Adventure-3/))。这个方式使最好的方式，因为通过这个模式我们可以准确知道参数类型，但是缺点是，这个功能正在被抛弃，未来也不会再用了。
PHP7
和PHP5内部结构不一样，一些参数解析的API收到这些的影响。旧的API是基于字符串的，新的API是基于macros。有了zend_parse_parameters函数，我们就有了宏
**ZEND_PARSE_PARAMETERS_START** 和他的系列。有关PHP如何解析参数可以查看文档[Zend Parameter Parsing
(ZPP
API)](https://phpinternals.net/categories/zend_parameter_parsing)。基本上现在不能简单的志勇FRIDA来完成hook关键函数这件工作了。
如果你记得，在我们的文章中[Improving PHP extensions as a persistence
method](https://x-c3ll.github.io/posts/PHP-extension-backdoor/)，我们看到了使用新的ZPP
API解析了 md5 函数的参数。
    ZEND_PARSE_PARAMETERS_START(1, 2)
        Z_PARAM_STR(arg)
        Z_PARAM_OPTIONAL
        Z_PARAM_BOOL(raw_output)
    ZEND_PARSE_PARAMETERS_END();
为了抽取参数，一个破旧而有效的方式是使用符号编译PHP，并且在GDB中使用脚本来解析这些信息。但是明显有比使用GDB更好的方法，但是最近我不得不在GDB中写一些调试PHP的帮助程序。所以我使用了这个方法，开始来编译最新的PHP版本
    cd /tmp
        wget http://am1.php.net/distributions/php-$(wget -qO- http://php.net/downloads.php | grep -m 1 h3 | cut -d '"' -f 2 | cut -d "v" -f 2).tar.gz
        tar xvf php*.tar.gz
        rm php*.tar.gz
        cd php*
        ./configure CFLAGS="-g -O0"
        make -j10
        sudo make install
我们的GDB脚本工作如下
  1. 执行 `list functionName`
  2. 如果 **ZEND_PARSE_PARAMETERS_END** 不存在，请增加列表中要显示的行数并重试。
  3. 如果已经存在， 就把宏 macros **…_START** 和 **…_END** 中的行抽出来
  4. 解析这两个关键字中间的参数
以下是代码
    # When I do things like this I feel really bad
        # Satanism courtesy of @TheXC3LL
        class zifArgs(gdb.Command):
            "Show PHP parameters used by a function when it uses PHP 7 ZPP API. Symbols needed."
            def __init__(self):
                super (zifArgs, self).__init__("zifargs", gdb.COMMAND_SUPPORT, gdb.COMPLETE_NONE, True)
            def invoke (self, arg, from_tty):
                size = 10
                while True:
                    try:
                        sourceLines = gdb.execute("list zif_" + arg, to_string=True)
                    except:
                        try:
                            sourceLines = gdb.execute("list php_" + arg, to_string=True)
                        except:
                            try:
                                sourceLines = gdb.execute("list php_if_" + arg, to_string=True)
                            except:
                                print("\033[31m\033[1mFunction " + arg + " not defined!\033[0m")
                                return
                    if "ZEND_PARSE_PARAMETERS_END" not in sourceLines:
                        size += 10
                        gdb.execute("set listsize " + str(size))
                    else:
                        gdb.execute("set listsize 10")
                        break
                try:
                    chunk = sourceLines[sourceLines.index("_START"):sourceLines.rindex("_END")].split("\n")
                except:
                    print("\033[31m\033[1mParameters not found. Try zifargs_old \033[0m")
                    return
                params = []
                for x in chunk:
                    if "Z_PARAM_ARRAY" in x:
                        params.append("\033[31mARRAY")
                    if "Z_PARAM_BOOL" in x:
                        params.append("\033[32mBOOL")
                    if "Z_PARAM_FUNC" in x:
                        params.append("\033[33mCALLABLE")
                    if "Z_PARAM_DOUBLE" in x:
                        params.append("\033[34mDOUBLE")
                    if "Z_PARAM_LONG" in x or "Z_PARAM_STRICT_LONG" in x:
                        params.append("\033[36mLONG")
                    if "Z_PARAM_ZVAL" in x:
                        params.append("\033[37mMIXED")
                    if "Z_PARAM_OBJECT" in x:
                        params.append("\033[38mOBJECT")