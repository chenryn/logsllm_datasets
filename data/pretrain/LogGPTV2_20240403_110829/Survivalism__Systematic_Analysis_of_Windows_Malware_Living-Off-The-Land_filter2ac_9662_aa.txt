# Title: Survivalism: Systematic Analysis of Windows Malware Living-Off-The-Land

## Authors
- Frederick Barr-Smith
- Xabier Ugarte-Pedrero
- Mariano Graziano
- Riccardo Spolaor
- Ivan Martinovic

### Affiliations
- **Oxford University**
  - Frederick Barr-Smith
  - Riccardo Spolaor
  - Ivan Martinovic
- **Cisco Systems**
  - Xabier Ugarte-Pedrero
  - Mariano Graziano

## Abstract
As malware detection algorithms and methods become more sophisticated, malware authors adopt equally sophisticated evasion mechanisms to defeat them. Anecdotal evidence suggests that Living-Off-The-Land (LotL) techniques are one of the major evasion techniques used in many malware attacks. These techniques leverage binaries already present in the system to conduct malicious actions. This paper presents the first large-scale systematic investigation of the use of these techniques by malware on Windows systems.

We analyze the prevalence of native system binaries across several malware datasets, containing a total of 31,805,549 samples, and identify an average prevalence of 9.41%. Our results show that the use of LotL techniques is prolific, particularly in Advanced Persistent Threat (APT) malware samples, where the prevalence is 26.26%, over twice that of commodity malware.

To illustrate the evasive potential of LotL techniques, we test their usage against several fully patched Windows systems in a local sandboxed environment and show that there is a generalized detection gap in 10 of the most popular anti-virus products.

## I. Introduction

Malware development and detection is a cat-and-mouse game, with malware authors continuously developing new techniques to bypass detection systems. Security products such as anti-virus (AV) implement static and heuristic analysis technologies to detect, classify, and prevent malware from effective execution. In the past, many solutions heavily relied on signature-based detection, but these approaches have become less effective due to the use of polymorphism and packers. Consequently, many products started developing heuristic analysis solutions, consisting of algorithms that allow them to detect malicious behavior. These algorithms have become a crucial component for AV engines.

Over time, these algorithms have increased in sophistication, thus requiring more innovative evasion techniques. Malware authors and red teams often research and discover new methods to bypass security solutions. While their underlying goals may differ, both types of attackers typically leverage state-of-the-art evasion techniques to accomplish their goals. From a defender's perspective, it is crucial to understand these attacks and study their trends to react in a timely manner. One evasive tactic that has become popular among both red teams and malware authors is the usage of Living-Off-The-Land (LotL) techniques.

LotL techniques refer to the use of binaries that are already present on systems or are easy to install (e.g., signed, legitimate administration tools) to conduct post-exploitation activity. By leveraging these tools, an attacker can achieve registry modification, gain persistence, conduct network or system reconnaissance, or perform proxied execution of other malicious code. They can even be used to reduce the event logs generated by malicious activity without needing additional files to be downloaded onto the system.

Many of these techniques are publicly documented on the internet. Many open-source offensive security tools leverage LotL techniques and are frequently used by a wide spectrum of actors, from legitimate red teams to amateur cybercriminals, organized crime groups, or nation-state actors. PoshSpy, a Russian state-sponsored APT29 attack module, was one of the first detected APT uses of LotL techniques, specifically PowerShell and Windows Management Instrumentation. Iranian threat groups, such as APT33 and APT34, are also well known for using native Windows binaries and other signed tools, particularly PowerShell.

Despite Living-Off-The-Land being a relatively well-known term in the information security community, it is sometimes hard to find a precise definition. Moreover, to the best of our knowledge, no research contains a systematic study of LotL techniques' prevalence in malware samples. Much of the available documentation regarding LotL techniques is in the form of blog posts that document anecdotal findings on certain malware families or technical descriptions of the techniques used by malicious actors once they obtain remote access to a compromised system.

For instance, Emotet and Trickbot, two of the most common Remote Access Trojans (RATs), reportedly use chained LotL binaries for stealthiness. As a countermeasure, Microsoft described steps taken to combat LotL techniques used by commodity RATs. The highly evasive RAT Astaroth, some of TA505â€™s malware arsenal, Dexphot cryptominer, and Nodersok all use multiple LotL binaries simultaneously.

In this paper, we analyze the LotL phenomenon as it pertains to LotL binary usage by commodity malware. Our first step is to describe what a LotL binary is and how it can be leveraged by malicious software to conduct its nefarious actions. We focus our research on Windows, the dominant operating system in terms of popularity and the most frequently targeted by malware. Many LotL-based AV evasions have been documented, leading the security community to assume that LotL techniques such as proxied execution of malware are indeed effective against security solutions. To address this, we raise our first research question:

- **Can LotL techniques effectively evade commercial AV?**

To answer this question, we evaluate a representative set of security products and show how some of these techniques, although well-known to both attackers and defenders, are still a valid method to bypass security solutions and therefore remain an open challenge for the security industry. LotL binaries are often used by system administrators and advanced computer users to perform system administration tasks, making it extraordinarily difficult to distinguish between legitimate and malicious behavior, even for trained analysts. We responsibly disclosed our findings to the affected AV vendors and followed up with many of them as they improved their detection capabilities.

Although existing documentation provides sound evidence of the usage of these techniques, it is still unclear how prevalent the phenomenon is among malware samples. This leads us to our second research question:

- **How prevalent is the use of LotL binaries in malware?**

Building on this, we aim to shed light on some of the trends in the current threat landscape to identify:

- **What purposes do malware binaries use LotL techniques for?**
- **Which malware families and types use LotL binaries most prolifically, and how does their usage differ?**

We also investigate the reasons why these techniques are difficult to detect. Some of the AV firms that engaged with our responsible disclosure communications highlighted the difficulty of separating malicious attacks from totally legitimate administration tasks conducted by system administrators. This brings us to another question:

- **What are the overlaps and differences in the behavior of legitimate and malicious binaries with respect to the usage of LotL binaries? How would this affect detection by heuristic AV engines?**

While there are clear differences in LotL binary usage prevalence between malicious and benign samples, we also noticed certain similarities for categories such as proxied execution.

Finally, we focus our attention on highly evasive and Advanced Persistent Threat (APT) malware to find that it leverages these techniques twice as much as commodity malware. State-sponsored attack groups, attributed to China (APT3/APT10), Iran (APT33/APT34), and Russia (APT28/APT29), among others, motivate this study. We list some of these APT groups that conduct attacks using LotL techniques in Table I.

### Contributions

To the best of our knowledge, this paper presents the largest-scale systematic analysis of the use of LotL techniques by commodity and APT malware to date. We make the following core contributions:

- **Evasiveness Assessment:** We assess the evasiveness of LotL techniques by testing a representative set of the most popular AV engines against malicious payloads deployed via LotL techniques, showing how the detection complexity of LotL represents a challenge for the industry. Even nine months after disclosure, these techniques are still not successfully detected.
- **Large-Scale Measurement Study:** We conduct a large-scale measurement study across several datasets that are representative of modern commodity malware. We determine the prevalence of this technique and the differences among different malware families and types. We also assess the impact that LotL techniques might have in the industry due to false positive risk.
- **APT Malware Evaluation:** We evaluate a dataset of APT malware, which we make public to facilitate further research, and ascertain that it executes LotL techniques twice as frequently as commodity malware. We also identify which APT groups use LotL techniques the most.

## II. Background & Related Work

### A. LotL Binaries

Due to its novelty, there is significant confusion regarding the term "Living-Off-The-Land binary," or its shorter version "LOLbin." In recent years, this term has become a common word used to refer to a wide range of binaries used in cyberattacks. Researchers tend to put many different tools under the umbrella of LOLbins.

The term "Living-Off-The-Land" has historically been used to represent the concept of feeding (or living off) what the land can provide, either by farming or hunting. Transposed to malware and intrusion, an attacker might leverage what is already available to them (either already present on the system or easily installable) to conduct a successful attack and avoid detection.

Some have provided rather restrictive definitions for the term LOLbin, which can be subject to debate, and there is no consensus within the community around this term. For instance, the well-known website LOLBAS project lists a wide range of LotL binaries. Within this list, many of the tools are administrative commands used by system administrators in their daily operations.

In this paper, we define a LotL binary as any binary with a recognized legitimate use that is leveraged during an attack to directly perform a malicious action or to assist indirectly in a sequence of actions that have a final malicious outcome.

Binaries installed by default on Windows systems, such as Reg.exe, Sc.exe, and Wmic.exe, are the most frequently executed by malware. Most binaries installed by default are signed by Microsoft Authenticode. An Authenticode signature proves that a binary has not been tampered with or modified from its compilation. This may have a high impact on the confidence that security tools have in it; as discussed by Kim et al., these binaries may even be explicitly whitelisted. Malware making use of trusted LotL binaries could thereby be more capable of evading AVs. The use of system binaries on Windows systems can be incorporated as part of the operation of malware, and more importantly, many LotL techniques make use of system binaries for the purpose for which these binaries were intended.

External signed binaries, such as PsExec.exe or other SysInternals binaries, can also be used. We included these in our analysis, but they are less commonly used by malware. Examples of nation-state malware using external signed binaries include SoftCell and Havex. These campaigns both used PsExec.exe to stealthily run remote commands for the purpose of lateral movement within compromised networks.

In some rarer cases, vulnerable (but signed) drivers have been used to escalate privileges on the system. This is a technique used by the RobbinHood ransomware and various APT wiper malware samples targeting Saudi Arabian systems, including Dustman, Shamoon, and Zerocleare.

**Traceability:** Certain LotL binaries may leave more system logs than others, which can be leveraged by security tools or forensic analysts to detect a malicious action. For instance, PowerShell can be configured to have comprehensive logging. Microsoft also recommends blocking certain native binaries from executing on systems unless there is a good reason to do otherwise.

### B. Scope of Our Study

In this paper, we focus on Windows malware that executes system binaries for various purposes, typically involving progression along the intrusion kill chain or avoiding AV detection. All of these techniques are deployed within the user space of the system.

Process hollowing and injection are not within the scope of our analysis, despite being common techniques deployed by fileless malware. We do not include these process manipulation techniques as they are not LotL techniques according to our earlier definition.

### C. Related Work

LotL malware and its occasional aliases, such as "advanced volatile threat," have been studied in various contexts. However, there is a lack of systematic and large-scale studies focusing on the prevalence and effectiveness of LotL techniques in malware. Our work aims to fill this gap by providing a comprehensive analysis of LotL techniques in both commodity and APT malware.