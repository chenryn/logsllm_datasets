title:Survivalism: Systematic Analysis of Windows Malware Living-Off-The-Land
author:Frederick Barr-Smith and
Xabier Ugarte-Pedrero and
Mariano Graziano and
Riccardo Spolaor and
Ivan Martinovic
7
4
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
Survivalism: Systematic Analysis of Windows
Malware Living-Off-The-Land
Frederick Barr-Smith
Xabier Ugarte-Pedrero
Mariano Graziano
Oxford University
Cisco Systems
Cisco Systems
Riccardo Spolaor
Oxford University
Ivan Martinovic
Oxford University
Abstract—As malware detection algorithms and methods become
more sophisticated, malware authors adopt equally sophisticated
evasion mechanisms to defeat them. Anecdotal evidence claims
Living-Off-The-Land (LotL) techniques are one of the major
evasion techniques used in many malware attacks. These tech-
niques leverage binaries already present in the system to conduct
malicious actions. We present the ﬁrst large-scale systematic
investigation of the use of these techniques by malware on
Windows systems.
In this paper, we analyse how common the use of these native
system binaries is across several malware datasets, containing
a total of 31,805,549 samples. We identify an average 9.41%
prevalence. Our results show that the use of LotL techniques
is proliﬁc, particularly in Advanced Persistent Threat (APT)
malware samples where the prevalence is 26.26%, over twice
that of commodity malware.
To illustrate the evasive potential of LotL techniques, we test the
usage of LotL techniques against several fully patched Windows
systems in a local sandboxed environment and show that there is
a generalised detection gap in 10 of the most popular anti-virus
products.
I. INTRODUCTION
Malware development and detection is a cat and mouse game,
in which malware authors are continuously developing new
techniques to bypass detection systems. Security products such
as anti-virus (AV) implement static and heuristic analysis
technologies to detect, classify and prevent malware from
effective execution [5]. In the past, many solutions heavily
relied on signature-based detection, but unfortunately these
approaches have become less effective due to the use of
polymorphism and packers. In turn, many products started
developing heuristic analysis solutions, consisting of algo-
rithms that allow them to detect malicious behaviour. These
algorithms have become a crucial component for AV engines.
Over time, these algorithms have increased in sophistication
and thus require more innovative evasion techniques.
Malware authors and red teams often research and discover
new methods to bypass security solutions. While their un-
derlying goals may be different
in nature, both types of
attackers typically leverage state-of-the-art evasion techniques
to accomplish their goals. From a defender’s point of view,
it is crucial to understand these attacks and study their trends
in order to be able to react in a timely manner. One evasive
tactic that has become popular among both red teams and
malware authors is the usage of Living-Off-The-Land (LotL)
techniques.
LotL techniques refer to the use of binaries that are al-
ready present on systems or are easy to install (e.g., signed,
legitimate administration tools) to conduct post-exploitation
activity. By leveraging these tools, an attacker can achieve
registry modiﬁcation, gain persistence, conduct network or
system reconnaissance or perform a proxied execution of other
malicious code. They can even be used to reduce the event logs
generated by malicious activity without needing additional
ﬁles to be downloaded onto the system.
Far from being obscure techniques, many of them are publicly
documented on the internet [32]. Many open source offensive
security tools leverage LotL techniques and are frequently used
by the entire spectrum of actors, from legitimate red teams
to amateur cybercriminals, organised crime groups or nation
state actors. PoshSpy [15], a Russian state-sponsored APT29
attack module, was one of the ﬁrst detected APT uses of LotL
techniques, speciﬁcally Powershell and Windows Management
Instrumentation. Iranian threat groups [1], APT33, APT34 and
others are also well known for using native Windows binaries
and other signed tools, particularly Powershell [8]. Table I
lists the LotL techniques employed by several state-sponsored
actors.
Despite Living-Off-The-Land being a relatively well-known
term in the information security community, it is sometimes
hard to ﬁnd a precise deﬁnition for it. Moreover, to the best
of our knowledge no research contains a systematic study of
LotL techniques’ prevalence in malware samples. Much of the
documentation available regarding LotL techniques is in the
form of blog posts that document anecdotal ﬁndings on certain
malware families, or technical descriptions of the techniques
used by malicious actors once they obtain remote access to a
compromised system.
For instance, Emotet and Trickbot, two of the most common
Remote Access Trojans (RAT) at the time of writing, report-
edly use chained LotL binaries for stealthiness [58]. As a
countermeasure, Microsoft described steps taken to combat
LotL techniques used by commodity RATs [37]. The highly
evasive RAT Astaroth [43], some of TA505’s malware arsenal,
Dexphot cryptominer [38] and Nodersok all use multiple LotL
binaries simultaneously [42].
In this paper, we analyse the LotL phenomenon as it pertains
to LotL binary usage by commodity malware binaries. Our
ﬁrst step is to describe what a LotL binary is and how
© 2021, Frederick Barr-Smith. Under license to IEEE.
DOI 10.1109/SP40001.2021.00047
1557
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:34 UTC from IEEE Xplore.  Restrictions apply. 
APT Group
APT3
APT10
APT29
APT33
APT34
Astaroth
Dexphot
Gallmaker
Havex
Nodersok
SoftCell
TA505
Turla
LotL Binaries Used
Powershell, Rundll32, Schtasks
Certutil, BitsAdmin, Net, Wmic, PsExec
Powershell, Schtasks, Wmic
Powershell, ProcDump, Schtasks, Vbscript
Certutil, Mshta, Schtasks, Powershell
BitsAdmin, Certutil, Regsvr32, Userinit
MsiExec, Rundll32, Nslookup, Schtasks
Powershell, Winword
BitsAdmin, Powershell, PsExec
Mshta, Node, Powershell
At, Net, PsExec, Reg, Wmic
Msiexec, Net, Rundll32, Powershell
Powershell, PsExec, Wmic, Wscript
Purpose Of Execution
Credential Theft, Persistence & Proxied Execution
Data Exﬁltration & Lateral Movement
Data Exﬁltration, Lateral Movement & Persistence
Credential Theft, Data Exﬁltration & Lateral Movement
C+C, Data Exﬁltration, Persistence & Proxied Execution
AV Evasion, C+C, Credential Theft & Proxied Execution
Persistence, Proxied Execution
C+C, Data Exﬁltration & Proxied Execution
Credential Theft & Lateral Movement
AV Evasion, Command and Control & Proxied Execution
Credential Theft, Data Exﬁltration, Lateral Movement & Recon
C+C, Data Exﬁltration, Proxied Execution & Recon
C+C, Data Exﬁltration. & Proxied Execution
TABLE I: APT Groups Using LotL Techniques.
it can be leveraged by malicious software to conduct
its
nefarious actions. We focus our research on Windows as the
dominant operating system in terms of popularity and the
most frequently targeted by malware [63]. Many LotL based
AV evasions have been documented. As a consequence, the
security community has largely assumed that LotL techniques
such as proxied execution of malware are in fact effective
against security solutions. As a ﬁrst step, we question this
assumption and raise our ﬁrst research question:
• Can LotL techniques effectively evade commercial AV?
To answer this question, we evaluate a representative set of
security products and show how some of these techniques,
although well-known for attackers and defenders, are still a
valid method to bypass security solutions and therefore are
an open challenge for the security industry. In fact, LotL
binaries are quite often used by system administrators and
advanced computer users to perform system administration
tasks, making it extraordinarily difﬁcult to distinguish between
legitimate and malicious behavior even for a trained analyst.
We responsibly disclosed our ﬁndings to the affected AV
vendors and followed up with many of them as they improved
their detection capabilities.
Although existing documentation provides sound evidence of
the usage of these techniques, it is still unclear how prevalent
the phenomenon is among malware samples. In this way, we
raise our second research question:
• How prevalent is the use of LotL binaries in malware?
Building on this, we try to shed some light on some of the
trends in the current threat landscape, to identify:
• What purposes do malware binaries use LotL techniques
for?
• Which malware families and types use LotL binaries most
proliﬁcally and how does their usage differ?
We also investigate the reasons why these techniques are
difﬁcult to detect. Some of the AV ﬁrms that engaged with
our responsible disclosure communications highlighted the dif-
ﬁculty of separating malicious attacks from totally legitimate
administration tasks conducted by system administrators. This
brings us to another question:
• What are the overlaps and differences in the behavior
of legitimate and malicious binaries with respect to the
usage of LotL binaries? How would this affect detection
by heuristic AV engines?
While there are some clear differences in LotL binary usage
prevalence between malicious and benign samples, we also
noticed certain similarities for categories such as proxied
execution.
Finally, we focus our attention on highly evasive and Advanced
Persistent Threat (APT) malware to ﬁnd out that it leverages
these techniques twice as much as commodity malware. State-
sponsored attack groups, that researchers attribute to China
(APT3/APT10) [48], Iran (APT33/APT34) [49] and Russia
(APT28/APT29) [50], amongst others, are examples that moti-
vate this study. We list some of these APT groups that conduct
attacks using LotL techniques in Table I.
Contributions. To the best of our knowledge,
this paper
presents the largest scale systematic analysis of the use of
LotL techniques by commodity and APT malware to date. We
make the following core contributions:
• We assess the evasiveness of LotL techniques by testing
a representative set of most popular AV engines against
malicious payloads deployed via LotL techniques, show-
ing how the detection complexity of LotL represents
a challenge for the industry. Even nine months after
disclosure,
these techniques are still not successfully
detected.
• We conduct a large-scale measurement study across sev-
eral datasets that are representative of modern commodity
malware. We determine the prevalence of this technique
and the differences among different malware families and
types. We also assess the impact that LotL techniques
might have in the industry due to false positive risk.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:34 UTC from IEEE Xplore.  Restrictions apply. 
1558
• We evaluate a dataset of APT malware, which we make
public to facilitate further research and ascertain that it
executes LotL techniques twice as frequently as com-
modity malware. We also identify which APT groups use
LotL techniques the most.
II. BACKGROUND & RELATED WORK
In this section, we ﬁrst deﬁne LotL binaries and enumerate
some of the purposes for which these binaries are used by
malware. Then, we provide an overview of related papers and
research on this topic.
A. LotL Binaries
Due to its novelty, there is signiﬁcant confusion regarding
the term Living-Off-The-Land binary, or its shorter version
LOLbin. In recent years, this term has become a common
word used to refer to a wide range of binaries used in
cyberattacks. Researchers tend to put many different tools
under the umbrella of LOLbins.
The term ‘Living-Off-The-Land’ has historically been used
to represent the concept of feeding (or living off) what the
land can provide, either by farming or hunting. Transposed
to malware and intrusion, an attacker might leverage what is
already available to them (either already present on the system,
or easily installable) to conduct a successful attack and avoid
detection.
Some have provided rather restrictive deﬁnitions for the term
LOLbin. This could be subject to debate, and there is no con-
sensus within the community around this term. For instance,
the well-known website LOLBAS project [46] lists a wide
range of LotL binaries. Within this list, we are able to ascertain
that many of the tools are administrative commands used by
system administrators in their daily operation.
In this paper, we deﬁne a LotL binary as any binary with a
recognised legitimate use, that is leveraged during an attack
to directly perform a malicious action; or to assist indirectly,
in a sequence of actions that have a ﬁnal malicious out-
come.
Binaries installed by default on Windows systems like
Reg.exe, Sc.exe and Wmic.exe are the most frequently
executed by malware. Most binaries installed by default are
signed by Microsoft Authenticode [35]. An Authenticode sig-
nature proves that a binary has not been tampered or modiﬁed
from its compilation. This may have a high impact in the
conﬁdence that security tools have on it; as discussed by Kim
et al. [27], these binaries may even be explicitly whitelisted.
Malware making use of trusted LotL binaries could thereby be
more capable of evading AVs. The use of system binaries on
Windows systems can be incorporated as part of the operation
of malware, and more importantly, many LotL techniques
make use of system binaries for the purpose for which these
binaries were intended.
External
such as
PsExec.exe or other SysInternals binaries. We also
can also be used,
signed binaries
included these in our analysis, but they are less commonly
used by malware. Examples of nation state malware using
external signed binaries, amongst many, are SoftCell [30]
and Havex [13]. These campaigns both used PsExec.exe
to stealthily run remote commands for the purpose of lateral
movement within compromised networks.
In some rarer
cases, vulnerable (but signed) drivers have been used to
escalate privileges on the system. This is a technique used
by the RobbinHood ransomware [7] and various APT wiper
malware samples targeting Saudi Arabian systems including
Dustman [51], Shamoon and Zerocleare [25].
Traceability. Certain LotL binaries may leave more system
logs than others, that can be leveraged by security tools or
forensic analysts in order to detect a malicious action. For
instance, Powershell can be conﬁgured to have comprehensive
logging. Microsoft also recommend a number of these native
binaries to be blocked from executing on systems, unless
there is good reason to do otherwise [39].
B. Scope of our Study
In this paper, we focus on Windows malware that executes
system binaries for various purposes. These purposes typically
involve progression along the intrusion kill chain [24] or
avoiding AV detection. All of these techniques are deployed
within the user space of the system.
Process hollowing and injection are also not within the scope
of our analysis, despite being common techniques deployed by
ﬁleless malware. We do not include these process manipulation
techniques as they are not LotL techniques according to our
earlier deﬁnition.
C. Related Work
LotL malware and its occasional aliases, ‘advanced volatile