3. action
action 是描述其后的 process 的运行方式的。action可取的值包括：initdefault、sysinit、boot、bootwait
等：
initdefault是个特别的action值，用于标识缺省的启动级别：当init由核心激活以后，他将读取inittab
中的 initdefault项，取得其中的runlevel，并作为当前的运行级别。如果没有inittab文件，或其中没有
initdefault项，init 将在控制台上请求输入runlevel。
sysinit、boot、bootwait 等action 将在系统启动时无条件运行，而忽略其中的runlevel。
其余的action（不含 initdefault）都和某个runlevel相关。各个action 的定义在inittab的man手册
中有周详的描述。
4. process
process 为具体的执行程序。程序后面能带参数。
第三部分：系统初始化
在init的设置文件中有这么一行：
si:sysinit:/etc/rc.d/rc.sysinit
他调用执行了/etc/rc.d/rc.sysinit，而 rc.sysinit 是个 bash shell的脚本，他主要
在init的设置文件中有这么一行：
si::sysinit:/etc/rc.d/rc.sysinit
他调用执行了/etc/rc.d/rc.sysinit，而rc.sysinit 是个bash shell的脚本，他主要是完成一些系统初始化的
工作，rc.sysinit是每一个运行级别都要首先运行的重要脚本。他主要完成的工作有：激活交换分区，检
查磁盘，加载硬件模块及其他一些需要优先执行任务。
---
## Page 61
rc.sysinit约有850多行，不过每个单一的功能还是比较简单，而且带有注释，建议有兴趣的用户能自行
阅读自已机器上的该文件，以了解系统初始化所周详情况。由于此文件较长，所以不在本文中列出来，
也不做具体的介绍。
当rc.sysinit程序执行完毕后，将返回init继续下一步。
第四部分：启动对应运行级别的守护进程
在rc.sysinit执行后，将返回init继续其他的动作，通常接下来会执行到/etc/rc.d/rc程序。以运行级别5
为例，init将执行设置文件inittab 中的以下这行：
15:5:wait:/etc/rc.d/rc 5
这一行表示以5为参数运行/etc/rc.d/rc，/etc/rc.d/rc是个Shell脚本，他接受5作为参数，去执行/etc/rc.d
/rc5.d/目录下的所有的rc启动脚本，/etc/rc.d/rc5.d/目录中的这些启动脚本实际上都是一些链接文件，
而不是真正的rc启动脚本，真正的rc启动脚本实际上都是放在/etc/rc.d/init.d/目录下。而这些rc启动
脚本有着类似的用法，他们一般能接受start、stop、restart、status等参数。
/etc/rc.d/rc5.d/中的rc启动脚本通常是K或s开头的链接文件，对于以以S开头的启动脚本，将以start
参数来运行。而如果发现存在相应的脚本也存在K打头的链接，而且已处于运行态了（以/var/lock/subsys/
下的文件作为标志)，则将首先以stop为参数停止这些已启动了的守护进程，然后再重新运行。这样做
是为了确保是当init改动运行级别时，所有相关的守护进程都将重启。
至于在每个运行级中将运行哪些守护进程，用户能通过chkconfig或setup中的"System Services"来自行
设定。常见的守护进程有：
amd：自动安装NFS 守护进程
apmd:高级电源管理守护进程
arpwatch：记录日志并构建一个在LAN接口上看到的以太网地址和IP地址对数据库
autofs：自动安装管理进程automount，和 NFS 相关，依赖于NIS
crond：Linux下的计划任务的守护进程
named：DNS 服务器
netfs：安装 NFS、Samba 和 NetWare 网络文件系统
network：激活已设置网络接口的脚本程序
nfs：打开NFS服务
portmap：RPC portmap 管理器，他管理基于 RPC服务的连接
sendmail：邮件服务器 sendmail
smb：Samba文件共享/打印服务
syslog：一个让系统引导时起动syslog和klogd系统日志守候进程的脚本
xfs：XWindow字型服务器，为本地和远程x服务器提供字型集
Xinetd：支持多种网络服务的核心守护进程，能管理wuftp、sshd、telnet等服务
这些守护进程也启动完成了，rc程序也就执行完了，然后又将返回init继续下一步。
第五部分：建立终端
rc执行完毕后，返回init。这时基本系统环境已设置好了，各种守护进程也已启动了。init接下来会打
开6个终端，以便用户登录系统。通过按Alt+Fn(n对应1-6)能在这6个终端中转换。在inittab中的以下
6行就是定义了6个终端：
1:2345:respawn:/sbin/mingetty tty1
2:2345:respawn:/sbin/mingetty tty2
3:2345:respawn:/sbin/mingetty tty3
4:2345:respawn:/sbin/mingetty tty4
5:2345:respawn:/sbin/mingetty tty5
6:2345:respawn:/sbin/mingetty tty6
---
## Page 62
从上面能看出在2、3、4、5的运行级别中都将以respawn 方式运行mingetty程序，mingetty程序能打
开终端、设置模式。同时他会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个
登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份。
第六部分：登录系统，启动完成
对于运行级别为5的图像方式用户来说，他们的登录是通过一个图像化的登录界面。登录成功后能直接
进入KDE、Gnome等窗口管理器。而本文主要讲的还是文本方式登录的情况：
当我们看到mingety的登录界面时，我们就能输入用户名和密码来登录系统了。
Linux的账号验证程序是login，login会接收mingetty传来的用户名作为用户名参数。然后login 会
对用户名进行分析：如果用户名不是root，且存在/etc/nologin文件，login 将输出nologin文件的内容，
然后退出。这通常用来系统维护时防止非root用户登录.只有/etc/securetty中登记了的终端才允许root
用户登录，如果不存在这个文件，则root能在所有终端上登录。/etc/userty文件用于对用户作出附加
访问限制，如果不存在这个文件，则没有其他限制。
在分析完用户名后，login将搜索/etc/passwd及/etc/shadow来验证密码及设置账户的其他信息，比如：
主目录是什么、使用何种shell。如果没有指定主目录，将默认为根目录：如果没有指定shell，将默认
为/bin/bash.
login程序成功后，会向对应的终端在输出最近一次登录的信息（在/var/log/lastlog中有记录)，并检查用
户是否有新邮件(在/usr/spool/mail/的对应用户名目录下)-然后开始设置各种环境变量：对于bash来说，
系统首先寻找/etc/profile脚本文件，并执行他：然后如果用户的主目录中存在.bash_profile文件，就执
行他，在这些文件中又可能调用了其他设置文件，所有的设置文件执行后后，各种环境变量也设好了，
这时会出现大家熟悉的命令行提示符，到此整个启动过程就结束了。
4、相关命令
4.1、查看当前系统运行等级
[root@test ~]# runlevel
 N 5
//"N代表先前的Runlevel;“5'代表目前的Runlevel
4.2、切换系统运行等级
initN//切换到运行级别N
#init0//关机
#init6//重启动系统
十、进程管理
进程就是运行中的程序，一个运行着的程序，可能有多个进程。比如LinuxSir.Org所用的WWW
服务器是apache服务器，当管理员启动服务后，可能会有好多人来访问，也就是说许多用户来同时请
求httpd服务，apache服务器将会创建有多个httpd进程来对其进行服务。
1、
进程分类
进程一般分为交互进程、批处理进程和守护进程三类。
值得一提的是守护进程总是活跃的，一般是后台运行，守护进程一般是由系统在开机时通过脚本自
动激活启动或超级管理用户root来启动。比如在Fedora或Redhat中，我们可以定义httpd服务器的启
动脚本的运行级别，此文件位于/etc/init.d目录下，文件名是httpd，/etc/init.d/httpd 就是httpd服务器
的守护程序，当把它的运行级别设置为3和5时，当系统启动时，它会跟着启动。
[root@localhost ~]# chkconfig  --level 35 httpd on
---
## Page 63
由于守护进程是一直运行着的，所以它所处的状态是等待请求处理任务。比如，我们是不是访问
LinuxSir.Org，LinuxSir.Org的httpd服务器都在运行，等待着用户来访间，也就是等待着任务处理。
2、进程的属性
进程ID（PID)：是唯一的数值，用来区分进程：
父进程和父进程的ID（PPID)：
启动进程的用户ID（UID）和所归属的组（GID）：
进程状态：状态分为运行R、休眠S、僵尸Z：
进程执行的优先级：
进程所连接的终端名：
进程资源占用：比如占用资源大小（内存、CPU占用量）：
3、父进程和子进程
他们的关系是管理和被管理的关系，当父进程终止时，子进程也随之而终止。但子进程终止，父进
程并不一定终止。比如httpd服务器运行时，我们可以杀掉其子进程，父进程并不会因为子进程的终止
而终止。
在进程管理中，当我们发现占用资源过多，或无法控制的进程时，应该杀死它，以保护系统的稳定
安全运行
4、进程管理命令
4.1、ps
ps为我们提供了进程的一次性的查看，它所提供的查看结果并不动态连续的：如果想对进程时间监控，
应该用 top 工具。
4.1.1、ps的参数说明：
p提供了很多的选项参数，常用的有以下几个：
1长格式输出：
u按用户名和启动时间的顺序来显示进程：
j用任务格式来显示进程：
f用树形格式来显示进程：
a显示所有用户的所有进程（包括其它用户）：
X显示无控制终端的进程：
显示运行中的进程：
ww避免详细参数被截断：
我们常用的选项是组合是aux或lax，还有参数f的应用：
ps aux 或 lax 输出的解释：
[orac1eoTest2 ~]$ ps aux
USER
PID %CPU %MEN
VSZRSS TTY
STAT START TIME COMAND
root
10.00.02072632?
Ss
Jun180:01 init [5]
root
20.00.000？
S
Jun180:00 [migration/0]
USER表示启动进程用户。PID表示进程标志号。%CPU表示运行该进程占用CPU的时间与该进
程总的运行时间的比例。%MEM表示该进程占用内存和总内存的比例。VSZ表示占用的虚拟内存大
小，以KB为单位。RSS为进程占用的物理内存值，以KB为单位。TTY表示该进程建立时所对应的
终端，"？"表示该进程不占用终端。STAT表示进程的运行状态，包括以下几种代码：D，不可中断的
睡眠：R，就绪（在可运行队列中）：S，睡眠：T，被跟踪或停止：Z，终止（僵死）的进程，Z不
---
## Page 64
存在，但暂时无法消除：W，没有足够的内存分页可分配： ps001.txt
[root(@localhost ≈]# more ps001.txt
这里是把所有进程显示出来，并输出到ps001.txt文件，然后再通过more来分页查看：
实例二：
和grep 结合，提取指定程序的进程；
[root(@localhost ~]# ps aux Igrep httpd
root
4187
0.0
1.3
24236 10272 ?
Ss
11:55
0:00 /usr/sbin/httpd
apache
4189
0.0
0.6
24368
4940 ?
S
11:55
0:00 /usr/sbin/httpd
apache
4190
0.0
0.6
24368
4932 ?
S
11:55
0:00 /usr/sbin/httpd
apache
4191
0.0
0.6
24368
4932 ?
S
11:55
0:00 /usr/sbin/httpd
apache
4192
0.0
0.6
24368
4932 ?
11:55
0:00 /usr/sbin/httpd
apache
4193
0.0
0.6
24368
4932 ?
S
11:55
0:00 /usr/sbin/httpd
apache
4194
0.0
0.6
24368
4932 ?
S
11:55
0:00 /usr/sbin/httpd
apache
4195
0.0
0.6
24368
4932 ?
S
11:55
0:00 /usr/sbin/httpd
apache
41960.0
0.6
24368
4932 ?
S
11:55
0:00 /usr/sbin/httpd
root
44800.0
0.0
5160
708 pts/3
R+
12:20
0:00 grep httpd
实例二：
父进和子进程的关系友好判断的例子
[root(@localhost ~]# ps auxf
Igrep httpd
root
44840.0
0.0
5160
704 pts/3
S+
12:21
0:00
_ grep
httpd
root
41870.0
1.3
24236 10272 ?
Ss
11:55
0:00 /usr/sbin/httpd
apache