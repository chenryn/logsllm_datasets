    # lsblk
    NAME                         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
    sda                            8:0    0 465.8G  0 disk
    ├─sda1                         8:1    0     1G  0 part /boot
    └─sda2                         8:2    0 464.8G  0 part
      ├─rhel_rdma--virt--03-root 253:0    0    50G  0 lvm  /
      ├─rhel_rdma--virt--03-swap 253:1    0     4G  0 lvm  [SWAP]
      └─rhel_rdma--virt--03-home 253:2    0 410.8G  0 lvm  /home
    nvme0n1
    # cat /sys/class/nvme/nvme0/transport
    rdma
    ```
    使用 NVMe 子系统名称替换 [*testnqn*]{.emphasis}。
    将 [*172.31.0.202*]{.emphasis} 替换为目标 IP 地址。
    使用端口号替换 [*4420*]{.emphasis}。
:::
::: itemizedlist
**验证**
-   列出当前连接的 NVMe 设备：
    ``` screen
    # nvme list
    ```
-   可选：断开与目标的连接：
    ``` screen
    # nvme disconnect -n testnqn
    NQN:testnqn disconnected 1 controller(s)
    # lsblk
    NAME                         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
    sda                            8:0    0 465.8G  0 disk
    ├─sda1                         8:1    0     1G  0 part /boot
    └─sda2                         8:2    0 464.8G  0 part
      ├─rhel_rdma--virt--03-root 253:0    0    50G  0 lvm  /
      ├─rhel_rdma--virt--03-swap 253:1    0     4G  0 lvm  [SWAP]
      └─rhel_rdma--virt--03-home 253:2    0 410.8G  0 lvm  /home
    ```
:::
::: itemizedlist
**其他资源**
-   `nvme(1)`{.literal} man page
-   [Nvme-cli Github
    软件仓库](https://github.com/linux-nvme/nvme-cli){.link}
:::
:::
:::
[]{#nvme-over-fabrics-using-fc_managing-storage-devices.html}
::: chapter
::: titlepage
# []{#nvme-over-fabrics-using-fc_managing-storage-devices.html#nvme-over-fabrics-using-fc_managing-storage-devices}第 6 章 使用 FC 的光纤的 NVMe over fabrics {.title}
:::
当与特定 Broadcom Emulex 和 Marvell Qlogic Fibre Channel
适配器一起使用时，在 initiator 模式中完全支持 NVMe over Fibre
Channel(FC-NVMe)。作为系统管理员，在以下部分中完成任务来部署 FC-NVMe
设置：
::: itemizedlist
-   [为广播适配器配置 NVMe
    initiator](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_storage_devices/nvme-over-fabrics-using-fc_managing-storage-devices#configuring-the-nvme-initiator-for-broadcom-adapters_nvme-over-fabrics-using-fc){.link}
-   [为 QLogic 适配器配置 NVMe
    initiator](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_storage_devices/nvme-over-fabrics-using-fc_managing-storage-devices#configuring-the-nvme-initiator-for-qlogic-adapters_nvme-over-fabrics-using-fc){.link}
:::
::: section
::: titlepage
# []{#nvme-over-fabrics-using-fc_managing-storage-devices.html#overview-of-nvme-over-fabric-devices_nvme-over-fabrics-using-fc}NVMe over fabric 设备概述 {.title}
:::
Non-volatile Memory
Express(NVMe)是一个接口，它允许主机软件实用程序与固态驱动器通信。
使用以下类型的光纤传输来通过光纤设备配置 NVMe：
::: variablelist
[NVMe over Remote Direct Memory Access(NVMe/RDMA)]{.term}
:   有关如何配置 NVMe/RDMA 的详情，请参考[使用 RDMA 的 NVMe over
    fabrics](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_storage_devices/nvme-over-fabrics-using-rdma_managing-storage-devices){.link}。
[NVMe over Fibre Channel(FC-NVMe)]{.term}
:   有关如何配置 FC-NVMe 的详情，请参考[使用 FC 的 NVMe over
    fabrics](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_storage_devices/nvme-over-fabrics-using-fc_managing-storage-devices){.link}。
:::
当使用 Fibre Channel(FC)和 Remote Direct Memory
Access(RDMA)时，固态驱动器不必对您的系统进行本地设置；可以通过 FC 或
RDMA 控制器远程配置。
:::
::: section
::: titlepage
# []{#nvme-over-fabrics-using-fc_managing-storage-devices.html#configuring-the-nvme-initiator-for-broadcom-adapters_nvme-over-fabrics-using-fc}为广播适配器配置 NVMe initiator {.title}
:::
使用这个流程，使用 NVMe 管理命令行界面(`nvme-cli`{.literal})工具为
Broadcom 适配器客户端配置 NVMe initiator。
::: orderedlist
**步骤**
1.  安装 `nvme-cli`{.literal} 工具：
    ``` screen
    # dnf install nvme-cli
    ```
    这会在 `/etc/nvme/`{.literal} 目录中创建 `hostnqn`{.literal}
    文件。`hostn`{.literal} 文件标识 NVMe 主机。
    要生成新的 `hostnqn`{.literal}，请使用以下命令：
    ``` screen
    # nvme gen-hostnqn
    ```
2.  找到本地和远程端口的 WWNN 和 WWPN 标识符，并使用输出查找子系统 NQN：
    ``` literallayout
    # cat /sys/class/scsi_host/host*/nvme_info
    NVME Initiator Enabled
    XRI Dist lpfc0 Total 6144 IO 5894 ELS 250
    NVME LPORT lpfc0 WWPN x10000090fae0b5f5 WWNN x20000090fae0b5f5 DID x010f00 ONLINE
    NVME RPORT       WWPN x204700a098cbcac6 WWNN x204600a098cbcac6 DID x01050e TARGET DISCSRVC ONLINE
    NVME Statistics
    LS: Xmt 000000000e Cmpl 000000000e Abort 00000000
    LS XMIT: Err 00000000  CMPL: xb 00000000 Err 00000000
    Total FCP Cmpl 00000000000008ea Issue 00000000000008ec OutIO 0000000000000002
        abort 00000000 noxri 00000000 nondlp 00000000 qdepth 00000000 wqerr 00000000 err 00000000
    FCP CMPL: xb 00000000 Err 00000000
    ```
    ``` literallayout
    # nvme discover --transport fc \
                    --traddr nn-0x204600a098cbcac6:pn-0x204700a098cbcac6 \
                    --host-traddr nn-0x20000090fae0b5f5:pn-0x10000090fae0b5f5
    Discovery Log Number of Records 2, Generation counter 49530
    =====Discovery Log Entry 0======
    trtype:  fc
    adrfam:  fibre-channel
    subtype: nvme subsystem
    treq:    not specified
    portid:  0
    trsvcid: none
    subnqn:  nqn.1992-08.com.netapp:sn.e18bfca87d5e11e98c0800a098cbcac6:subsystem.st14_nvme_ss_1_1
    traddr:  nn-0x204600a098cbcac6:pn-0x204700a098cbcac6
    ```
    将 [*nn-0x204600a098cbcac6:pn-0x204700a098cbcac6*]{.emphasis} 替换为
    `traddr`{.literal}。
    将 [*nn-0x20000090fae0b5f5:pn-0x10000090fae0b5f5*]{.emphasis} 替换为
    `host-traddr`{.literal}。
3.  使用 `nvme-cli`{.literal} 连接到 NVMe 目标：
    ``` literallayout
    # nvme connect --transport fc \
                   --traddr nn-0x204600a098cbcac6:pn-0x204700a098cbcac6 \
                   --host-traddr nn-0x20000090fae0b5f5:pn-0x10000090fae0b5f5 \
                   -n nqn.1992-08.com.netapp:sn.e18bfca87d5e11e98c0800a098cbcac6:subsystem.st14_nvme_ss_1_1
    ```
    将 [*nn-0x204600a098cbcac6:pn-0x204700a098cbcac6*]{.emphasis} 替换为
    `traddr`{.literal}。
    将 [*nn-0x20000090fae0b5f5:pn-0x10000090fae0b5f5*]{.emphasis} 替换为
    `host-traddr`{.literal}。
    将
    [*nqn.1992-08.com.netapp:sn.e18bfca87d5e11e98c0800a098cbcac6:subsystem.st14_nvme_ss_1\_1*]{.emphasis}
    替换为 `subnqn`{.literal}。
:::
::: itemizedlist
**验证**
-   列出当前连接的 NVMe 设备：
    ``` literallayout
    # nvme list
    Node             SN                   Model                                    Namespace Usage                      Format           FW Rev
    ---------------- -------------------- ---------------------------------------- --------- -------------------------- ---------------- --------
    /dev/nvme0n1     80BgLFM7xMJbAAAAAAAC NetApp ONTAP Controller                  1         107.37  GB / 107.37  GB      4 KiB +  0 B   FFFFFFFF
    ```
    ``` screen
    # lsblk |grep nvme
    nvme0n1                     259:0    0   100G  0 disk
    ```
:::
::: itemizedlist
**其他资源**
-   `nvme(1)`{.literal} man page
-   [Nvme-cli Github
    软件仓库](https://github.com/linux-nvme/nvme-cli){.link}
:::
:::
::: section
::: titlepage
# []{#nvme-over-fabrics-using-fc_managing-storage-devices.html#configuring-the-nvme-initiator-for-qlogic-adapters_nvme-over-fabrics-using-fc}为 QLogic 适配器配置 NVMe initiator {.title}
:::
使用这个流程，使用 NVMe 管理命令行界面(`nvme-cli`{.literal})工具为
Qlogic 适配器客户端配置 NVMe initiator。
::: orderedlist
**步骤**
1.  安装 `nvme-cli`{.literal} 工具：
    ``` screen
    # dnf install nvme-cli
    ```
    这会在 `/etc/nvme/`{.literal} 目录中创建 `hostnqn`{.literal}
    文件。`hostn`{.literal} 文件标识 NVMe 主机。
    要生成新的 `hostnqn`{.literal}，请使用以下命令：
    ``` screen
    # nvme gen-hostnqn
    ```
2.  重新载入 `qla2xxx`{.literal} 模块：
    ``` screen
    # rmmod qla2xxx
    # modprobe qla2xxx
    ```
3.  查找本地和远程端口的 WWNN 和 WWPN 标识符：
    ``` literallayout
    # dmesg |grep traddr
    [    6.139862] qla2xxx [0000:04:00.0]-ffff:0: register_localport: host-traddr=nn-0x20000024ff19bb62:pn-0x21000024ff19bb62 on portID:10700
    [    6.241762] qla2xxx [0000:04:00.0]-2102:0: qla_nvme_register_remote: traddr=nn-0x203b00a098cbcac6:pn-0x203d00a098cbcac6 PortID:01050d
    ```
    使用这些 `host-traddr`{.literal} 和 `traddr`{.literal}
    值，查找子系统 NQN：
    ``` literallayout
    # nvme discover --transport fc \
                    --traddr nn-0x203b00a098cbcac6:pn-0x203d00a098cbcac6 \
                    --host-traddr nn-0x20000024ff19bb62:pn-0x21000024ff19bb62
    Discovery Log Number of Records 2, Generation counter 49530
    =====Discovery Log Entry 0======
    trtype:  fc
    adrfam:  fibre-channel
    subtype: nvme subsystem
    treq:    not specified
    portid:  0
    trsvcid: none
    subnqn:  nqn.1992-08.com.netapp:sn.c9ecc9187b1111e98c0800a098cbcac6:subsystem.vs_nvme_multipath_1_subsystem_468
    traddr:  nn-0x203b00a098cbcac6:pn-0x203d00a098cbcac6
    ```
    将 [*nn-0x203b00a098cbcac6:pn-0x203d00a098cbcac6*]{.emphasis} 替换为
    `traddr`{.literal}。
    将 [*nn-0x20000024ff19bb62:pn-0x21000024ff19bb62*]{.emphasis} 替换为
    `host-traddr`{.literal}。
4.  使用 `nvme-cli`{.literal} 工具连接到 NVMe 目标：
    ``` literallayout
    # nvme connect  --transport fc \
                    --traddr nn-0x203b00a098cbcac6:pn-0x203d00a098cbcac6 \
                    --host-traddr nn-0x20000024ff19bb62:pn-0x21000024ff19bb62 \
                    -n nqn.1992-08.com.netapp:sn.c9ecc9187b1111e98c0800a098cbcac6:subsystem.vs_nvme_multipath_1_subsystem_468
    ```
    将 [*nn-0x203b00a098cbcac6:pn-0x203d00a098cbcac6*]{.emphasis} 替换为
    `traddr`{.literal}。
    将 [*nn-0x20000024ff19bb62:pn-0x21000024ff19bb62*]{.emphasis} 替换为
    `host-traddr`{.literal}。
    将
    [*nqn.1992-08.com.netapp:sn.c9ecc9187b1111e98c0800a098cbcac6:subsystem.vs_nvme_multipath_1\_subsystem_468*]{.emphasis}
    替换为 `subnqn`{.literal}。
:::
::: itemizedlist
**验证**
-   列出当前连接的 NVMe 设备：
    ``` literallayout
    # nvme list
    Node             SN                   Model                                    Namespace Usage                      Format           FW Rev
    ---------------- -------------------- ---------------------------------------- --------- -------------------------- ---------------- --------
    /dev/nvme0n1     80BgLFM7xMJbAAAAAAAC NetApp ONTAP Controller                  1         107.37  GB / 107.37  GB      4 KiB +  0 B   FFFFFFFF
    # lsblk |grep nvme
    nvme0n1                     259:0    0   100G  0 disk
    ```
:::
::: itemizedlist
**其他资源**
-   `nvme(1)`{.literal} man page
-   [Nvme-cli Github
    软件仓库](https://github.com/linux-nvme/nvme-cli){.link}
:::
:::
:::
[]{#enabling-multipathing-on-nvme-devices_managing-storage-devices.html}
::: chapter
::: titlepage
# []{#enabling-multipathing-on-nvme-devices_managing-storage-devices.html#enabling-multipathing-on-nvme-devices_managing-storage-devices}第 7 章 在 NVMe 设备中启用多路径 {.title}
:::
您可以通过光纤传输（如光纤通道(FC)）连接到您的系统的多路径 NVMe
设备。您可以在多个多路径解决方案之间进行选择。
::: section
::: titlepage
# []{#enabling-multipathing-on-nvme-devices_managing-storage-devices.html#native-nvme-multipathing-and-dm-multipath_enabling-multipathing-on-nvme-devices}本地 NVMe 多路径和 DM 多路径 {.title}