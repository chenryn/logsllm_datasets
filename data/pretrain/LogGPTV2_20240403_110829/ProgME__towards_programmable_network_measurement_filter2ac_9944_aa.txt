title:ProgME: towards programmable network measurement
author:Lihua Yuan and
Chen-Nee Chuah and
Prasant Mohapatra
ProgME: Towards Programmable Network MEasurement
Lihua Yuan
PI:EMAIL
Chen-Nee Chuah
PI:EMAIL
Prasant Mohapatra
PI:EMAIL
Univers it y  of  Califor nia,  Dav is
ABSTRACT
Traﬃc measurements provide critical input for a wide range
of network management applications, including traﬃc engi-
neering, accounting, and security analysis. Existing mea-
surement tools collect traﬃc statistics based on some pre-
determined, inﬂexible concept of “ﬂows”. They do not have
suﬃcient built-in intelligence to understand the application
requirements or adapt to the traﬃc conditions. Consequently,
they have limited scalability with respect to the number of
ﬂows and the heterogeneity of monitoring applications.
We present ProgME, a Programmable MEasurement ar-
chitecture based on a novel concept of ﬂowset – arbitrary
set of ﬂows deﬁned according to application requirements
and/or traﬃc conditions. Through a simple ﬂowset com-
position language, ProgME can incorporate application re-
quirements, adapt itself to circumvent the challenges on scal-
ability posed by the large number of ﬂows, and achieve a
better application-perceived accuracy. ProgME can analyze
and adapt to traﬃc statistics in real-time. Using sequential
hypothesis test, ProgME can achieve fast and scalable heavy
hitter identiﬁcation.
Categories and Subject Descriptors
C.2.3 [Network Operations]: Network monitoring; C.4
[PERFORMANCE OF SYSTEMS]: Measurement tech-
niques
General Terms
Algorithms, Design, Measurement
Keywords
Flowset, Flowset Composition Language, Traﬃc Measure-
ment, Programmable Measurement, Multi-Resolution Tiling
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’07,  August  27–31,  2007,  Kyoto,  Japan.
Copyright 2007 ACM 978-1-59593-713-1/07/0008 ...$5.00.
1.
INTRODUCTION
Accurate measurement of network traﬃc is a keystone of
a wide range of network management tasks, e.g., traﬃc en-
gineering, accounting, network monitoring, and anomaly de-
tection. A measurement tool, be it a dedicated hardware or
software running on routers or ﬁrewalls, collects statistics of
network traﬃc. Management applications use these statis-
tics to make network control decisions, such as re-routing
traﬃc, charging customer, or raising alarms to administra-
tors. The insights gained from traﬃc measurement are in-
valuable to administrators in making informed decisions on
network planning or operations.
Figure 1: Traditional Measurement Architecture.
Fundamentally, traﬃc measurement involves counting the
number of packets (or bytes) that satisﬁes some criteria over
a particular period of time. As depicted in Figure 1, tra-
ditional measurement architecture1, e.g., NeTraMet [5, 6],
FlowScan [28] and sFlow [27], ﬁnds a matching ﬂow for ev-
ery sampled packet and increases the corresponding counter.
Such per-ﬂow traﬃc statistics might be, upon a triggering
event like the expiration of a timer or passing of a threshold,
delivered to a centralized storage location. A management
application, be it a network manager or an anomaly detec-
tion tool, can then perform post-processing on the per-ﬂow
statistics to retrieve useful information. For example, to an-
swer user queries like “How much traﬃc goes to a particular
network?”, one can perform selective aggregation to count all
the ﬂows belonging to this query. For monitoring applica-
tions like heavy hitter identiﬁcation, one can search through
the per-ﬂow traﬃc statistics to ﬁnd the elephant ﬂows.
Although the traditional measurement architecture has
had some success in oﬀering insights about network traf-
ﬁc, the scalability of this architecture is limited in practice.
First, the traditional architecture collects statistics based
1This is an extremely simpliﬁed summary. One should not
overlook the tremendous amount of research that reduce the
number of counters or produce traﬃc summaries.
97on the inﬂexible deﬁnition of ﬂow2. In today’s high-speed
network, especially the core of these networks, the number
of ﬂows can be very large – easily reaching millions. Keep-
ing a per-ﬂow traﬃc proﬁle is challenging to the memory
and the processor [15]. Even if the per-ﬂow traﬃc proﬁle
can be managed locally, delivering it to the remote server
and storing it over a prolonged period of time incurs signif-
icant amount of overhead. Second, the traditional architec-
ture takes a post-processing approach. Measurement tools
have little knowledge about the actual requirement of the
management applications and focus only on providing suﬃ-
cient statistics. It is up to the management applications to
process the per-ﬂow traﬃc statistics and extract meaning-
ful information. This disconnection between measurement
tools and management applications forces the measurement
tools to collect all the statistics that might be useful and at
the ﬁnest granularity to meet a certain level of accuracy re-
quirement. Third, the traditional architecture cannot adapt
itself to the changing network condition. It is diﬃcult for
a measurement tool engineered to monitor a few large ﬂows
(elephants) to quickly adapt itself to focus on large amount
of small ﬂows (mice), e.g., in the case of Distributed Denial-
of-Service attack.
Figure 2: Programmable Architecture.
This paper calls for a departure from the traditional archi-
tecture using per-ﬂow traﬃc proﬁle and the post-processing
approach. We present a Programmable MEasurement ar-
chitecture (ProgME ) that can adapt to application require-
ments and traﬃc conditions in real time. Figure 2 shows the
major components of ProgME. Our ﬁrst proposal is to use a
versatile deﬁnition of ﬂowset – arbitrary set of ﬂows – as the
base of traﬃc statistics collection. In other words, ProgME
keeps one counter per ﬂowset. Compared to per-ﬂow traﬃc
statistics, per-ﬂowset statistics enables one to achieve mul-
tiple resolutions within a traﬃc proﬁle. Since ﬂowsets can
be deﬁned arbitrarily, they do not necessarily map to the
same number of unique ﬂows or traﬃc volume. Therefore,
one can track higher resolution statistics to maintain the de-
sired accuracy for a sub-population of network traﬃc, while
collecting coarse-grained aggregate statistics for the remain-
ing traﬃc (e.g., through a ﬂowset that catches uninteresting
traﬃc) to reduce total number of counters required. Fur-
thermore, since a ﬂowset can contain arbitrary set of ﬂows,
one can construct ﬂowsets that directly reﬂect the interest of
management applications. For example, one can use a sin-
gle counter to track packets from invalid source IP address
instead of keeping a large number of per-ﬂow counters and
aggregate them later.
The second key component of ProgME is a program engine
that can dynamically (re)-program the deﬁnitions of ﬂowsets
2There are several diﬀerent deﬁnitions of ﬂow. However, it
is normally ﬁxed once chosen for a measurement task.
based on user queries. By enabling the management applica-
tions to program the measurement tool, one can pre-process
application requirements so that the tool only collects statis-
tics that are directly useful to applications and at a desired
granularity, thus signiﬁcantly improving its scalability and
performance. Note that we do not claim that collecting
statistics according to user requirement is the right solution
for all measurement tasks. ProgME can be most beneﬁcial if
users know their requirements beforehand. However, if one
fails to envision the usefulness of certain traﬃc metrics and
does not measure them directly in the ﬁrst place, a posteri-
ori analysis on aggregate data might not generate accurate
estimates of these metrics.
ProgME is intended as an on-line measurement module
and oﬀers the ﬂexibility to support adaptive measurement
algorithms. For example, the program engine can merge or
partition ﬂowsets and re-allocate the counters dynamically
based on past traﬃc statistics to increase tracking accuracy
and measurement eﬃciency.
The contributions of this paper are summarized as follow:
• We propose a versatile ﬂowset deﬁnition as the base
unit of network measurement. We present a ﬂowset
composition language (FCL) for deﬁning ﬂowsets con-
sisting arbitrary set of ﬂows and a binary decision dia-
gram (BDD)-based data structure for eﬃcient set op-
erations and matching packet to a ﬂowset (Section 2).
• We show that the ﬂexibility oﬀered by our ﬂowset def-
inition is helpful in broad categories of network mea-
surement, including answering user queries (Section 3)
and identifying heavy hitters (Section 4).
• We propose a scalable Flowset-based Query Answer-
ing Engine (FQAE) in (Section 3) to support arbi-
trary user queries. Used in conjunction with sampling,
FQAE can achieve the same accuracy for any given set
of queries compared to an ideal ﬂow-based measure-
ment approach, while achieving orders of magnitude
cost reduction in terms of memory requirements.
• We propose a multi-resolution tiling (MRT) algorithm,
which dynamically re-program the ﬂowset measure-
ment to zoom in on heavy hitters (Section 4). It can
identify heavy hitters under tight memory budget by
re-deﬁning ﬂowsets and re-allocating the associated
counters. MRT analyzes the traﬃc and the statistics
collected sequentially and can be deployed on-line.
After presenting design rationale and major components
of ProgME, we evaluate its performance in Section 5. The
related works are discussed in Section 6 and we conclude the
paper in Section 7.
2. ARBITRARY FLOWSET
Traditionally, network statistics are collected based on the
concept of ﬂows. A ﬂow f refers to a set of packets that
have the same n-tuple value in their header ﬁelds. Let H :
{H1, H2,··· , Hn} denote the header ﬁelds used in the ﬂow
deﬁnition. Typical deﬁnitions of ﬂow include the 5-tuple of
H : {prt, sip, spt, dip, dpt} or the 2-tuple of H : {sip, dip} in
which prt is the protocol ﬁeld, sip and dip are the source
and destination IP address and spt and dpt are the source
and destination port, respectively. Other header ﬁelds, e.g.,
Type-of-Service (TOS), could be used as well. A ﬂow is
often used as the base unit for traﬃc measurement. With a
Symbol
Explanation
f
H
F
Fw
Fc
P
Q
U
A ﬂow
Set of ﬁelds that deﬁnes “ﬂow”
A ﬂowset
The weight of a ﬂowset F
The counter associated with F
A packet enumerator,
either a trace ﬁle or live traﬃc
A list of user queries
The universal set of ﬂows
Table 1: Notations.
n-tuple deﬁnition, a ﬂow can be regarded as a point in the
n-dimension space with each ﬁeld as a dimension.
(cid:2)
In the context of packet classiﬁcation (including routing
and packet ﬁltering), it is often necessary to designate an ac-
tion (e.g., route to a certain interface, ﬁltering the packet)
to a set of ﬂows. The status quo is the concept of super-
ﬂow, which takes a similar form of the deﬁnition of ﬂow
except each ﬁeld is extended to a range of values. In the
: {prtr, sipr, sptr, dipr, dptr}
general 5-tuple superﬂow H
deﬁnition, sipr and dipr are CIDR address blocks and prtr,
sptr and dptr could be value intervals. The semantics of
superﬂow is not ﬂexible enough — it is restricted by the
well-deﬁned structure and can only describe a regular-cut
set of ﬂows, where each ﬁeld contains a contiguous range of
values. Therefore, sipr and dipr should contain IP addresses
that form a valid CIDR block with contiguous IP addresses,
while sptr and dptr should contain continuous interval of
integer values. For example, if one is to visualize a 2-tuple
superﬂow deﬁned by sipr, sptr on a 2-dimension space, su-
perﬂow can only carve out rectangles of various size [12], as
shown by the solid and dotted boxes in Figure 3.
We deﬁne a ﬂowset to be a set of arbitrary ﬂows. A ﬂowset
is not limited by the structure of superﬂow and can take any
shape, even being segmented in the space (as one shall see
shortly). A ﬂow can be considered a special case of ﬂowset
containing only one member. To the best of our knowledge,
there are no existing languages for specifying such a versatile
ﬂowset other than an ineﬃcient enumeration of superﬂows.
Our deﬁnition of ﬂowset should not be confused with the
template ﬂowsets deﬁned by Cisco NetFlow V9 [35], which
is a template-based ﬂow record format used for exporting
per-ﬂow records. It is not semantically expressive enough to
describe all possible set of ﬂows, nor it is designed to do so.
In the following part of this section, we ﬁrst present a
ﬂowset composition language (FCL), which enables user to
specify an arbitrary set of ﬂows as a single entity (Sec-
tion 2.1). Section 2.2 clariﬁes related deﬁnitions and Sec-
tion 2.3 introduce a canonical representation of ﬂowset using
binary decision diagram (BDD). Coupled with the under-
lying BDD representation of ﬂowsets, FCL allows users to
specify their requirement on aggregated traﬃc statistics and
enables measurement tools to pre-process user requirements.
Table 1 summarizes the notations used in this paper.
2.1 Flowset Composition Language (FCL)
We present a simple Flowset Composition Language (FCL)
using set algebra to enable speciﬁcation of arbitrary ﬂowset
(Table 2). The primitive of FCL is the 5-tuple superﬂow
deﬁnition, which by itself is a ﬂowset that deﬁnes a set of
ﬂows. However, the grammar of the 5-tuple deﬁnition is
= e op e | (e) |¬e| pr
::= ∩ | ∪ | \
::= 
e
op
pr
Table 2: Grammar of Flowset Composition Language.
very limited and can only specify a regular-cut set of ﬂows.
One can use other primitives as long as it speciﬁes a set of
ﬂows. We choose the 5-tuple deﬁnition because of its wide
usage in the context of ﬁrewall and policy routing.
S
Since the primitives are ﬂowset themselves, one can use
T
set algebra to construct a ﬂowset that constitutes arbitrary
set of ﬂows. The FCL grammar deﬁned in Table 2 illus-
trates several standard set operators like intersection (
),
), absolute complement (¬), and relative comple-
union (
ment (\). These operations are suﬃcient to build a ﬂowset
with arbitrary set of ﬂows. In addition, one can, using the
operators provided, build more complicated logical opera-
tions, e.g., NAND or NOR. All the laws associated with set
algebra, including the commutative, associative, distributive,
identity, and complement laws, apply to ﬂowset as well.
Table 3 presents two examples of such ﬂowsets that might
be of practical interest to the administrators. Flowset F1
presents all ﬂows originated from private address space. In
practice, administrators are interested in tracking these ﬂows
because packets with unroutable IP address are not legiti-
mate and are often used by attackers and spammers. Flowset
F2 presents incoming FTP traﬃc (port 21/22) except those
from an internal network. F1 and F2 are depicted in Fig-
ure 3 in dashed and solid line rectangles respectively. Notice
that a ﬂowset, as a single entity, can cover disconnected and
irregular parts in the universal set.
2.2 Deﬁnitions
Since ﬂowset is a type of set, concepts and deﬁnitions in
In the following, we highlight the
set theory apply here.
deﬁnitions that are useful for our discussions.
T
B = ∅.
• The universal ﬂowset U contains all the possible ﬂows,
and the empty ﬂowset ∅ contains no ﬂow. Two ﬂowsets
A and B are said to be disjoint if their intersection is
empty, i.e., A
• We denote the cardinality of ﬂowset F as |F|, which
is a measure of the “number of possible ﬂows of the
ﬂowset”. Note that |F| can be larger than the actual
number of active ﬂows one observes in a particular
traﬃc instance, which we denoted as |F|(cid:2)
• We denote |Hi| as the total number of possible values