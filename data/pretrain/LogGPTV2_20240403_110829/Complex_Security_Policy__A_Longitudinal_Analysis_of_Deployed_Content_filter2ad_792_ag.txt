it has evolved into a mechanism that is equally often used to
enforce TLS connections and control framing. Our longitudinal
analysis allowed us to document the struggle developers face
when constructing a secure and functional policy for content
restriction, and highlighted that even secure CSPs are prone
to bypasses through typos and expired domains. Combined
with the lack of adoption of new features such as strict-
dynamic, this leads us to conclude that the script-restricting
parts of CSP are unlikely to succeed in the future. Moreover,
while CSP is increasingly deployed for TLS enforcement
and framing control, its adoption rate is still unsatisfactory.
The insights gathered from our survey indicate that CSP has
earned a bad reputation due to its complexity in content
restriction, resulting in developers shying away from any part
of CSP. Even though the alternative use cases for CSP are easy
to deploy, this bad reputation, unless counteracted by tools,
browser vendors, and informational material alike, signiﬁcantly
hampers CSP’s ability to improve the Web’s security.
Acknowledgements: We thank the reviewers for their helpful
feedback. For Stony Brook University, this work was supported
by the Ofﬁce of Naval Research (ONR) under grant N00014-
17-1-2541, as well as by the National Science Foundation
(NSF) under grants CNS-1617593 and CNS-1813974.
REFERENCES
[1] “Prevent nonce stealing by looking for ”<script” in
attributes of nonced scripts,” https://github.com/w3c/
webappsec-csp/issues/98.
[2] “Dataset used in our analysis,” https://pastebin.com/
NbFxNmc1.
[3] “Google
analytics
https://developers.google.com/analytics/devguides/
collection/gajs.
legacy
documentation,”
[4] Ambroise Maupate, “Nginx CSP example,” https://gist.
github.com/ambroisemaupate/bce4b760405558f358ae,
2019.
16
[5] Bruno Scheuﬂer, “Using security-related headers to se-
cure your application against common attacks,” https:
//tinyurl.com/y68c4lpp, 2019.
[6] S. Calzavara, A. Rabitti, and M. Bugliesi, “Content
security problems? evaluating the effectiveness of content
security policy in the wild,” in CCS, 2016.
[7] ——, “CCSP: controlled relaxation of content security
policies by runtime policy composition,” in USENIX
Security, 2017.
[8] ——, “Semantics-based analysis of content security pol-
icy deployment,” TWEB, 2018.
[9] Can I use..., “Content Security Policy 1.0,” https://
caniuse.com/#feat=contentsecuritypolicy, 2019.
[10] Common Crawl, “So you are ready to get started,” http:
//commoncrawl.org/the-data/get-started/, 2019.
[11] E. Derr, S. Bugiel, S. Fahl, Y. Acar, and M. Backes,
“Keep me updated: An empirical study of third-party
library updatability on android,” in CCS, 2017.
[12] A. Doup´e, W. Cui, M. H. Jakubowski, M. Peinado,
C. Kruegel, and G. Vigna, “dedacota: toward preventing
server-side xss via automatic code and data separation,”
in CCS, 2013.
[13] Experiments with Google, “Content Security Policy,”
https://csp.withgoogle.com/docs/strict-csp.html, 2019.
[14] GitHub Blog, “GitHub CSP Blog Post,” https://blog.
github.com/2013-04-19-content-security-policy/, 2013.
[15] D. Hausknecht, J. Magazinius, and A. Sabelfeld, “May
i? - content security policy endorsement for browser
extensions,” in DIMVA, 2015.
[16] J. Hodges, C. Jackson, and A. Barth, “RFC6797: Http
strict transport security (hsts),” https://tools.ietf.org/html/
rfc6797, 2012.
[17] Internet Archive, “About
the internet archive,” https:
//archive.org, 2019.
[18] E. Lawrence, “This page frames a victim page in myriad
ways,” http://www.enhanceie.com/test/clickjack, 2019.
[19] S. Lekies, K. Kotowicz, S. Groß, E. A. V. Nava, and
M. Johns, “Code-reuse attacks for the web: Breaking
cross-site scripting mitigations via script gadgets,” in
CCS, 2017.
[20] A. Lerner, T. Kohno, and F. Roesner, “Rewriting history:
Changing the archived web from the present,” in CCS,
2017.
[21] A. Lerner, A. K. Simpson, T. Kohno, and F. Roesner,
“Internet jones and the raiders of the lost trackers: An
archaeological study of web tracking from 1996 to 2016,”
in USENIX Security, 2016.
[22] M. Luo, P. Laperdrix, N. Honarmand, and N. Niki-
forakis, “Time Does Not Heal All Wounds: A Longitudi-
nal Analysis of Security-Mechanism Support in Mobile
Browsers,” in NDSS, 2019.
[23] MDN, “Data URIs,” https://developer.mozilla.org/en-US/
docs/Web/HTTP/Basics of HTTP/Data URIs, 2019.
[24] ——, “Content Security Policy (CSP),” https://developer.
[25] ——,
mozilla.org/en-US/docs/Web/HTTP/CSP, 2019.
“SecurityPolicyViolationEvent,”
//developer.mozilla.org/en-US/docs/Web/API/
SecurityPolicyViolationEvent, 2019.
https:
[26] ——,
“X-Frame-Options,”
https://developer.mozilla.
org/en-US/docs/Web/HTTP/Headers/X-Frame-Options,
2019.
17
[27] Microsoft, “CSP Level 3 strict-dynamic source expres-
[28] N. Nikiforakis,
sion,” https://tinyurl.com/y3d6ljjk, 2019.
L.
Invernizzi, A. Kapravelos,
S. Van Acker, W. Joosen, C. Kruegel, F. Piessens,
and G. Vigna, “You are what you include: large-scale
inclusions,” in CCS,
evaluation of
2012.
remote javascript
“HTTP Strict Transport Security Cheat
Sheet,” https://www.owasp.org/index.php/HTTP Strict
Transport Security Cheat Sheet, 2018.
“Clickjacking
Sheet,”
https://www.owasp.org/index.php/Clickjacking Defense
Cheat Sheet, 2017.
Defense
Cheat
[29] OWASP,
[30] ——,
[31] A. Paicu, “CSP ’navigate-to’ directive,” https://www.
[32] ——,
chromestatus.com/feature/6457580339593216, 2018.
‘script-src-attr‘,
“CSP:
‘style-src-attr‘,
//www.chromestatus.com/features/5141352765456384,
2018.
‘script-src-elem‘,
https:
‘style-src-elem‘
directives,”
[33] ——, “CSP3: unsafe-hashed-attributes,” https://www.
chromestatus.com/features/5867082285580288, 2017.
[34] X. Pan, Y. Cao, S. Liu, Y. Zhou, Y. Chen, and T. Zhou,
“Cspautogen: Black-box enforcement of content security
policy upon real-world websites,” in CCS, 2016.
[35] A. Porter Felt, R. Barnes, A. King, C. Palmer, C. Bentzel,
and P. Tabriz, “Measuring https adoption on the web,” in
USENIX Security, 2017.
[36] D. Ross and T. Gondrom, “RFC7034: Http header ﬁeld x-
frame-options,” https://tools.ietf.org/html/rfc7034, 2013.
[37] Q. Scheitle, O. Hohlfeld, J. Gamba, J. Jelten, T. Zimmer-
mann, S. D. Strowes, and N. Vallina-Rodriguez, “A long
way to the top: Signiﬁcance, structure, and stability of
internet top lists,” in IMC, 2018.
[38] Scott Helme, “Security Headers,” https://securityheaders.
com, 2019.
[39] D. F. Som´e, N. Bielova, and T. Rezk, “On the content
security policy violations due to the same-origin policy,”
in WWW, 2017.
[40] S. Stamm, B. Sterne, and G. Markham, “Reining in the
web with content security policy,” in WWW, 2010.
[41] B. Stock, M. Johns, M. Steffens, and M. Backes, “How
the Web Tangled Itself: Uncovering the History of Client-
Side Web (In)Security,” in USENIX Security, 2017.
[42] B. Stock, G. Pellegrino, F. Li, M. Backes, and C. Rossow,
“Didn’t You Hear Me? - Towards More Successful Web
Vulnerability Notiﬁcations,” in NDSS, 2018.
[43] P.
Toomey,
“GitHub’s
CSP
Journey,”
https:
//githubengineering.com/githubs-csp-journey/, 2016.
[44] S. Van Acker, D. Hausknecht, and A. Sabelfeld, “Data
exﬁltration in the face of CSP,” in AsiaCCS, 2016.
[45] T. Van Goethem, P. Chen, N. Nikiforakis, L. Desmet,
and W. Joosen, “Large-scale security analysis of the web:
Challenges and ﬁndings,” in TRUST, 2014.
[46] W3C Working Group, “Content Security Policy (Level
2),” https://www.w3.org/TR/CSP2/, 2016.
[47] ——, “Content Security Policy (Level 3),” https://www.
w3.org/TR/CSP3/, 2018.
[48] Y.-M. Wang, D. Beck, J. Wang, C. Verbowski, and
B. Daniels, “Strider typo-patrol: Discovery and analysis
of systematic typo-squatting,” SRUTI, 2006.
[49] L. Weichselbaum and M. Spagnuolo, “CSP - A Suc-
cessful Mess Between Hardening and Mitigation,” https:
//tinyurl.com/yyohn6o6.
[50] L. Weichselbaum, M. Spagnuolo, S. Lekies, and A. Janc,
“CSP is dead, long live csp! on the insecurity of whitelists
and the future of content security policy,” in CCS, 2016.
[51] M. Weissbacher, T. Lauinger, and W. K. Robertson, “Why
is CSP failing? trends and challenges in CSP adoption,”
in RAID, 2014.
[52] M. West, “Upgrade insecure requests,” https://www.
chromestatus.com/feature/6534575509471232, 2018.
content,”
https://www.w3.org/TR/
[53] ——,
“Mixed
mixed-content/, 2016.
“Explainer:
[54] WICG,
for DOM
Manipulation,” https://github.com/WICG/trusted-types#
limiting-policies, 2018.
Trusted
Types
APPENDIX
and Edge
A. Email notiﬁcation template
Dear $domain team,
We are a team of academic researchers from $institutions
investigating the usage of security headers on the Web.
As part of our analysis, we are investigating the usage of the
X-Frame-Options header (XFO) to control framing on the
Web. Based on our analysis, your site is attempting to control
framing with the following XFO directive: SAMEORIGIN.
We noticed that this directive potentially allows for double-
framing attacks with certain browsers, such as Internet
Explorer
(see https://developer.mozilla.org/en-
US/docs/Web/HTTP/Headers/X-Frame-Options#Browser -
compatibility)
The currently proposed way to ensure that all modern browsers
properly protect against framing attacks is to use the Content
Security Policy directive frame-ancestors. In particular,
for your value of XFO, the corresponding CSP is: frame-
ancestors ’self’.
Note that in order to protect older browsers, keeping XFO
in place is recommended. As CSP takes precedence over
XFO, securing legacy clients without interfering with modern
browsers is possible through the usage of the DENY directive
in XFO.
For more information on CSP’s frame-ancestors, please
see
https://developer.mozilla.org/en-US/docs/Web/HTTP/
Headers/Content-Security-Policy/frame-ancestors
As this email is part of a research project in which we are
trying to understand the lack of adoption of CSP in the wild,
it would be immensely helpful if you could provide us with
feedback regarding the lack of CSP’s frame-ancestors to
protect against framing attacks on your Web site (i.e., were you
not aware of the CSP mechanism, that speciﬁc CSP directive,
or, were you not adopting it for some other reason?)
Please note that this email is only part of an academic research
project and not meant to sell any products or services.
Best regards,
$researchers
18
B. Quotes from Responses
1) Complexity of CSP: “Reading the experience of people
that tried to do a full CSP implementation is just scary”. “In
previous discussions about CSP, we’ve been worried that the
risk of accidentally breaking some interaction we have with
other [sitename] systems (or the few third party tools we
integrate with) outweighs the beneﬁt of implementing these
sorts of changes.” “We are pretty certain that there are a lot of
pitfalls with implementation of these headers, that might break
sections or uses of our site.”
2) XFO Dangers: “We were vaguely aware of the frame-
ancestors option, but our understanding was that XFO was
sufﬁcient for securing all clients”. “While we were aware
of CSP itself, we were unaware of the fact, that X-Frame-
Options allows for attacks under certain conditions, which can
be mitigated by using the frame-ancestors directive of CSP.”
3) frame-ancestors: “In my opinion the only advan-
tage of CSP is to protect against XSS [...]”. “As we were not
that aware of CSP framing control, we were also not aware of
its implementation (no side effects)”
C. Survey Questionnaire
1) Did you know about the inconsistent understanding of
browsers of the XFO header before our notiﬁcation (such
as the lack of support for ALLOW-FROM in Chrome and
Safari as well as the potential threat of double-framing in
Edge/IE)? (Yes/No)
2) Why have you implemented the XFO header on your site?
(Penetration test or consultant suggested it/Tools we used
suggested it/Own decision to restrict framing/Other (free
text))
3) Did you know about CSP before our notiﬁcation?
(Yes/No)
4) (only if Q3 was yes) Would your site work out of the
box if you deployed a script-content restricting CSP
today (disallow eval, inline scripts, and event handlers)?
(Yes/No/Don’t know)
5) (only if Q3 was yes) Do you believe CSP is a viable
option to improve your site’s resilience against XSS
attacks? (Yes/No/Don’t know)
6) (only if Q5 was no) Why do you think CSP is not viable
for your site? (free text)
7) (only if Q3 was yes) Did you know about the frame-
ancestors directive of CSP and its improved protec-
tion capabilities compared to XFO before our notiﬁca-
tion? (Yes/No)
8) (only if Q7 was yes) Did you know that frame-
ancestors can be deployed independently of any other
part of CSP before our notiﬁcation? (Yes/No)
9) (only if Q3 was yes) Did you know that CSP can be
used (in isolation) to ensure no HTTP resources can
accidentally be loaded (through block-all-mixed-
content) and to enforce TLS for all resources (through
upgrade-insecure-requests)? (Yes/No)
10) Do you ever use the developer tools to debug or analyze
your site? (Yes/No)
11) What kind of tool support would be useful to you to
secure your application? (free text)