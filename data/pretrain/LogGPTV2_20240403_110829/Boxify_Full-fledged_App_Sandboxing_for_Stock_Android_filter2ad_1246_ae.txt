USENIX Association  
24th USENIX Security Symposium  703
processes are very restricted in their ﬁlesystem access
(i.e., only world readable/writable ﬁles), a malicious
process has the entire kernel API as an attack vector
and might escalate its privileges through a root or
kernel exploit. In this sense, Boxify is not more secure
than existing approaches that rely on the assumption
that the stock Android kernel is hardened against
root and kernel exploits.
To remedy this situation, additional layers of se-
curity could be provided by the underlying kernel
to further restrict untrusted processes. This is com-
mon practice on other operating systems, e.g., on
modern Linux distributions, where Chromium—the
primary user of isolated process on Android—uses
the seccomp-bpf facility to selectively disable syscalls
of renderer processes and we expect this facility to
become available on future Android versions with
newer kernels. Similarly, common program tracing
facilities could be made available in order to interpose
syscalls more securely and eﬃciently [31, 47, 52].
Violating Least-Privilege Principle. The Broker
must hold the union set of all permissions required
by the apps hosted by Boxify in order to successfully
proxy calls to the Android API. Since it is hard to
predict a reasonable set of permissions beforehand,
this means that the Broker usually holds all available
permissions. This contradicts the principle of least
privilege and makes the Broker an attractive target
for the encapsulated app to increase its permission
set. A very elegant solution to this problem would be
a Broker that drops all unnecessary permissions. This
resembles the privilege separation pattern [48, 57]
of established Linux services like ssh, which drop
privileges of sub-processes based on setting their
UIDs, capabilities, or transitioning them to seccomp
mode. Unfortunately, Android does not (yet) provide
a way toselectively drop permissions at runtime.
Red Pill. Even though Boxify is designed to be
invisible to the sandboxed app, it cannot exclude
that the untrusted app gathers information about
its execution environment that allow the app to de-
duce that it is sandboxed (e.g., checking its runtime
UID or permissions). A malicious app can use this
knowledge to change its runtime behavior when being
sandboxed and thus hide its true intentions or refuse
to run in a sandboxed environment. Prevention of
this information leak is an arms race that a resolute
attacker will typically win. However, while this might
lead to refused functionality, it cannot be used to
escalate the app’s privileges.
6 Conclusion
We presented the ﬁrst application virtualization so-
lution for the stock Android OS. By building on
isolated processes to restrict privileges of untrusted
apps and introducing a novel app virtualization envi-
ronment, we combine the strong security guarantees
of OS security extensions with the deployability of
application layer solutions. We implemented our so-
lution as a regular Android app called Boxify and
demonstrated its capability to enforce established se-
curity policies without incurring signiﬁcant runtime
performance overhead.
Availability and Future Work. We will make
the Boxify source code freely available. Beyond the
immediate privacy beneﬁts for the end-user presented
in this paper (see §5.4), Boxify oﬀers all the security
advantages of traditional sandboxing techniques and
is thus of independent interest for future Android
security research. As future work, we are currently
investigating diﬀerent application domains of Box-
ify, such as application-layer only taint-tracking for
sandboxed apps [24], programmable security APIs in
the spirit of ASM [37]/ASF [14] to facilitate the ex-
tensibility of Boxify, as well as Boxify-based malware
analysis tools.
References
[1] Android developer dashboard.
android.com/about/dashboards/.
06/20/15.
https://developer.
visited:
Last
[2] Android developer’s guide. http://developer.android.
com/guide/index.html. Last visited: 02/19/15.
[3] Chromium: Linux sandboxing. https://code.google.
com/p/chromium/wiki/LinuxSandboxing. Last visited:
02/10/15.
[4] Cyanogenmod. http://www.cyanogenmod.org.
[5] Java SE Documentation:
Security Speciﬁcation.
http://docs.oracle.com/javase/7/docs/technotes/
guides/security/spec/security-specTOC.fm.html.
Last visited: 02/10/15.
[6] OmniROM.
02/19/15.
http://omnirom.org.
Last visited:
[7] Redirecting functions in shared elf libraries.
http:
//www.codeproject.com/Articles/70302/Redirecting-
functions-in-shared-ELF-libraries.
[8] The Chromium Projects:
OSX Sandboxing De-
sign.
http://dev.chromium.org/developers/design-
documents/sandbox/osx-sandboxing-design. Last vis-
ited: 02/10/15.
[9] The Chromium Projects:
http://www.chromium.org/developers/design-
documents/sandbox. Last visited: 02/10/15.
Sandbox
(Windows).
[10] Wine: Run Windows applications on Linux, BSD, Solaris
and Mac OS X. https://www.winehq.org. Last visited:
02/13/15.
704  24th USENIX Security Symposium 
USENIX Association
[11] Zero-Permission Android Applications.
https:
//www.leviathansecurity.com/blog/zero-permission-
android-applications/. Last visited: 02/11/15.
[12] Zero-Permission Android Applications
(Part
http://www.leviathansecurity.com/blog/zero-
permission-android-applications-part-2/.
visited: 02/11/15.
2).
Last
[13] Andrus, J., Dall, C., Hof, A. V., Laadan, O., and
Nieh, J. Cells: A virtual mobile smartphone architecture.
In Proc. 23rd ACM Symposium on Operating Systems
Principles (SOSP’11) (2011), ACM.
[14] Backes, M., Bugiel, S., Gerling, S., and von Styp-
Rekowsky, P. Android Security Framework: Extensible
multi-layered access control on Android. In Proc. 30th
Annual Computer Security Applications Conference (AC-
SAC’14) (2014), ACM.
[15] Backes, M., Gerling, S., Hammer, C., Maffei, M.,
and von Styp-Rekowsky, P. Appguard - enforcing user
requirements on Android apps. In Proc. 19th Interna-
tional Conference on Tools and Algorithms for the Con-
struction and Analysis of Systems (TACAS’13) (2013),
Springer.
[16] Bugiel, S., Davi, L., Dmitrienko, A., Fischer, T.,
Sadeghi, A.-R., and Shastry, B. Towards Taming
Privilege-Escalation Attacks on Android. In Proc. 19th
Annual Network and Distributed System Security Sym-
posium (NDSS’12) (2012), The Internet Society.
[17] Bugiel, S., Davi, L., Dmitrienko, A., Heuser, S.,
Sadeghi, A.-R., and Shastry, B. Practical and
lightweight domain isolation on Android. In Proc. 1st
ACM Workshop on Security and Privacy in Smartphones
and Mobile Devices (SPSM’11) (2011), ACM.
[18] Cai, L., and Chen, H. Touchlogger: inferring keystrokes
on touch screen from smartphone motion. In Proc. 6th
USENIX conference on Hot topics in security (HotSec’11)
(2011), USENIX Association.
[19] Chen, Q. A., Qian, Z., and Mao, Z. M. Peeking into
Your App without Actually Seeing It: UI State Inference
and Novel Android Attacks. In Proc. 23rd USENIX Secu-
rity Symposium (SEC’14) (2014), USENIX Association.
http://www.citrix.com/
[20] Citrix.
Xenapp.
products/xenapp/how-it-works/application-
virtualization.html. Last visited: 02/13/15.
[21] Conti, M., Nguyen, V. T. N., and Crispo, B. CRePE:
Context-Related Policy Enforcement for Android. In Proc.
13th International Conference on Information Security
(ISC’10) (2010).
[22] Davis, B., and Chen, H. Retroskeleton: Retroﬁtting
android apps. In Proc. 11th Annual International Con-
ference on Mobile Systems, Applications, and Services
(MobiSys’13) (2013), ACM.
[23] Davis, B., Sanders, B., Khodaverdian, A., and Chen,
H. I-ARM-Droid: A Rewriting Framework for In-App
Reference Monitors for Android Applications. In Proc.
Mobile Security Technologies 2012 (MoST’12) (2012),
IEEE Computer Society.
[24] Enck, W., Gilbert, P., Chun, B.-G., Cox, L. P., Jung,
J., McDaniel, P., and Sheth, A. N. Taintdroid: An
information-ﬂow tracking system for realtime privacy
monitoring on smartphones. In Proc. 9th USENIX Sym-
posium on Operating Systems Design and Implementa-
tion (OSDI 2010) (2010), pp. 393–407.
[25] Enck, W., Octeau, D., McDaniel, P., and Chaudhuri,
S. A Study of Android Application Security. In Proc. 20th
USENIX Security Symposium (SEC’11) (2011), USENIX
Association.
[26] Enck, W., Ongtang, M., and McDaniel, P. On
In
lightweight mobile phone application certiﬁcation.
Proc. 16th ACM Conference on Computer and Commu-
nication Security (CCS’09) (2009), ACM.
[27] Enck, W., Ongtang, M., and McDaniel, P. Under-
standing android security. IEEE Security and Privacy 7,
1 (2009), 50–57.
[28] Erlingsson, Ú. The Inlined Reference Monitor Approach
to Security Policy Enforcement. PhD thesis, Cornell
University, January 2004.
[29] Fahl, S., Harbach, M., Muders, T., Smith, M.,
Baumgärtner, L., and Freisleben, B. Why Eve and
Mallory love Android: An analysis of Android SSL (in)
security. In Proc. 19th ACM Conference on Computer
and Communication Security (CCS’12) (2012), ACM.
[30] Felt, A. P., Wang, H. J., Moshchuk, A., Hanna, S.,
and Chin, E. Permission re-delegation: Attacks and
defenses. In Proc. 20th USENIX Security Symposium
(SEC’11) (2011), USENIX Association.
[31] Goldberg, I., Wagner, D., Thomas, R., and Brewer,
E. A. A secure environment for untrusted helper applica-
tions conﬁning the wily hacker. In Proc. 6th Conference
on USENIX Security Symposium, Focusing on Appli-
cations of Cryptography (SSYM’96) (1996), USENIX
Association.
[32] Grace, M., Zhou, W., Jiang, X., and Sadeghi, A.-R.
Unsafe exposure analysis of mobile in-app advertisements.
In Proc. 5th ACM conference on Security and Privacy
in Wireless and Mobile Networks (WISEC’12) (2012),
ACM.
[33] Grace, M. C., Zhou, Y., Wang, Z., and Jiang, X.
Systematic detection of capability leaks in stock android
smartphones. In Proc. 19th Annual Network and Dis-
tributed System Security Symposium (NDSS’12) (2012),
The Internet Society.
[34] Guo, P. J., and Engler, D. Cde: Using system call inter-
position to automatically create portable software pack-
ages. In Proc. 2011 USENIX Conference on USENIX
Annual Technical Conference (USENIXATC’11) (2011),
USENIX Association.
Isolatedprocess
[35] Hackborn, D.
introducing
in JellyBean.
Android Developer Group:
tag
https://groups.
Advantage
of
within Services
google.com/forum/?fromgroups=#!topic/android-
developers/pk45eUFmKcM, 2012. Last visited: 02/19/15.
[36] Hao, H., Singh, V., and Du, W. On the Eﬀectiveness
of API-level Access Control Using Bytecode Rewriting in
Android. In Proc. 8th ACM Symposium on Information,
Computer and Communication Security (ASIACCS’13)
(2013), ACM.
[37] Heuser, S., Nadkarni, A., Enck, W., and Sadeghi,
A.-R. ASM: A Programmable Interface for Extending
Android Security. In Proc. 23rd USENIX Security Sym-
posium (SEC’14) (2014), USENIX Association.
[38] Jeon, J., Micinski, K. K., Vaughan, J. A., Fogel, A.,
Reddy, N., Foster, J. S., and Millstein, T. Dr. An-
droid and Mr. Hide: Fine-grained Permissions in Android
Applications.
In Proc. 2nd ACM Workshop on Secu-
rity and Privacy in Smartphones and Mobile Devices
(SPSM’12) (2012), ACM.
USENIX Association  
24th USENIX Security Symposium  705
[39] Kaspersky Lab, and INTERPOL. Mobile cyber-threats.
http://securelist.com/analysis/publications/
66978/mobile-cyber-threats-a-joint-study-by-
kaspersky-lab-and-interpol/, 2014.
02/19/15.
Last visited:
[40] Lange, M., Liebergeld, S., Lackorzynski, A., Warg,
A., and Peter, M. L4android: A generic operating
system framework for secure smartphones. In Proc. 1st
ACM Workshop on Security and Privacy in Smartphones
and Mobile Devices (SPSM’11) (2011), ACM.
[41] Microsoft. Application Virtualization (App-V). http:
//www.microsoft.com/en-us/windows/enterprise/
products-and-technologies/mdop/app-v.aspx.
visited: 02/13/15.
Last
backdoors without
[42] Moulu, A. Android OEM’s applications (in)security
and
http:
//www.quarkslab.com/dl/Android-OEM-applications-
insecurity-and-backdoors-without-permission.pdf.
Last visited: 02/19/15.
permission.
[43] Mulliner, C., Oberheide, J., Robertson, W., and
Kirda, E. PatchDroid: Scalable Third-party Security
Patches for Android Devices.
In Proc. 29th Annual
Computer Security Applications Conference (ACSAC’13)
(2013), ACM.
[44] Nauman, M., Khan, S., and Zhang, X. Apex: Ex-
tending android permission model and enforcement with
user-deﬁned runtime constraints. In Proc. 5th ACM Sym-
posium on Information, Computer and Communication
Security (ASIACCS’10) (2010), ACM.
[45] Ongtang, M., McLaughlin, S. E., Enck, W., and
McDaniel, P. Semantically Rich Application-Centric
Security in Android. In Proc. 25th Annual Computer
Security Applications Conference (ACSAC’09) (2009),
ACM.
[46] Open Signal.
ized (July 2013).
fragmentation-2013/. Last visited: 02/06/2015.
Android Fragmentation Visual-
http://opensignal.com/reports/
[47] Provos, N. Improving host security with system call
policies. In Proc. 12th Conference on USENIX Security
Symposium - Volume 12 (SSYM’03) (2003), USENIX
Association.
[48] Provos, N., Friedl, M., and Honeyman, P. Prevent-
ing privilege escalation. In Proc. 12th Conference on
USENIX Security Symposium - Volume 12 (SSYM’03)
(2003), USENIX Association.
[49] Rasthofer, S., Arzt, S., Lovat, E., and Bodden,
E. DroidForce: Enforcing Complex, Data-Centric,
System-Wide Policies in Android. In Proc. 9th Interna-
tional Conference on Availability, Reliability and Security
(ARES’14) (2014), IEEE Computer Society.
[50] Rastogi, V., Chen, Y., and Jiang, X. DroidChameleon:
Evaluating Android Anti-malware Against Transforma-
tion Attacks. In Proc. 8th ACM Symposium on Infor-
mation, Computer and Communication Security (ASI-
ACCS’13) (2013), ACM.
[51] Russello, G., Conti, M., Crispo, B., and Fernandes,
E. MOSES: supporting operation modes on smartphones.
In Proc. 17th ACM Symposium on Access Control Models
and Technologies (SACMAT’12) (2012), ACM.
[52] Russello, G., Jimenez, A. B., Naderi, H., and van der
Mark, W. FireDroid: Hardening Security in Almost-
stock Android. In Proc. 29th Annual Computer Security
Applications Conference (ACSAC’13) (2013), ACM.
samsung KNOX.
[53] Samsung Electronics. White paper: An overview
http://www.samsung.com/se/
of
business-images/resource/2013/samsung-knox-an-
overview/%7B3%7D/Samsung_KNOX_whitepaper-0-0-
0.pdf, 2013. Last visited: 02/19/15.
[54] Smalley, S., and Craig, R. Security Enhanced (SE) An-
droid: Bringing Flexible MAC to Android. In Proc. 20th
Annual Network and Distributed System Security Sym-
posium (NDSS’13) (2013), The Internet Society.
[55] von Styp-Rekowsky, P., Gerling, S., Backes, M.,
and Hammer, C. Idea: Callee-site rewriting of sealed
system libraries. In Proc. 5th International Symposium
on Engineering Secure Software and Systems (ESSoS’13)
(2013), Springer.
[56] Wangy, X., Sun, K., and Jing, Y. W. J. DeepDroid:
Dynamically Enforcing Enterprise Policy on Android De-
vices. In Proc. 22nd Annual Network and Distributed
System Security Symposium (NDSS’15) (2015), The In-
ternet Society.
[57] Watson, R. N. M., Anderson, J., Laurie, B., and
Kennaway, K. Capsicum: Practical capabilities for unix.
In Proc. 19th USENIX Security Symposium (SEC’10)
(2010), USENIX Association.
[58] Wu, C., Zhou, Y., Patel, K., Liang, Z., and Jiang,
X. Airbag: Boosting smartphone resistance to malware
infection. In Proc. 21st Annual Network and Distributed
System Security Symposium (NDSS’14) (2014), The In-
ternet Society.
[59] Xu, R., Saïdi, H., and Anderson, R. Aurasium –
Practical Policy Enforcement for Android Applications.
In Proc. 21st USENIX Security Symposium (SEC’12)
(2012), USENIX Association.
[60] Xu, Z., Bai, K., and Zhu, S. Taplogger: inferring user in-
puts on smartphone touchscreens using on-board motion
sensors. In Proc. 5th ACM conference on Security and
Privacy in Wireless and Mobile Networks (WISEC’12)
(2012), ACM.
[61] Yee, B., Sehr, D., Dardyk, G., Chen, J. B., Muth, R.,
Ormandy, T., Okasaka, S., Narula, N., and Fulla-
gar, N. Native client: A sandbox for portable, untrusted
x86 native code. In Proc. 30th IEEE Symposium on Se-
curity and Privacy (Oakland’09) (2009), IEEE Computer
Society.
[62] Zhou, Y., and Jiang, X. Dissecting Android malware:
Characterization and evolution.
In Proc. 33rd IEEE
Symposium on Security and Privacy (Oakland’12) (2012),
IEEE Computer Society.
[63] Zhou, Y., Wang, Z., Zhou, W., and Jiang, X. Hey,
You, Get Oﬀ of My Market: Detecting Malicious Apps
in Oﬃcial and Alternative Android Markets. In Proc.
19th Annual Network and Distributed System Security
Symposium (NDSS’12) (2012), The Internet Society.
[64] Zhou, Y., Zhang, X., Jiang, X., and Freeh, V. Tam-
ing information-stealing smartphone applications (on
Android).
In Proc. 4th International Conference on
Trust and Trustworthy Computing (TRUST’11) (2011),
Springer.
706  24th USENIX Security Symposium 
USENIX Association