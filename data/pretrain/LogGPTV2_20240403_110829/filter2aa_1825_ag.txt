dialog for a process can show the complete call stack of a thread, including functions in kernel mode. This
type of information is not possible to obtain from user mode; its driver provides the missing information.
The driver installed by Process Explorer creates a single device object so that Process Explorer is able to
open a handle to that device and make requests. This means that the device object must be named, and
must have a symbolic link in the ?? directory; and it’s there, called PROCEXP152, probably indicating
driver version 15.2 (at the time of writing). Figure 3-4 shows this symbolic link in WinObj.
Figure 3-4: Process Explorer’s symbolic link in WinObj
Notice the symbolic link for Process Explorer’s device points to \Device\PROCEXP152, which is the
internal name only accessible to kernel callers (and the native APIs NtOpenFile and NtCreateFile,
as shown in the next section). The actual CreateFile call made by Process Explorer (or any other client)
based on the symbolic link must be prepended with \\.\. This is necessary so that the I/O manager’s
parser will not assume the string “PROCEXP152” refers to a file with no extension in the current directory.
Here is how Process Explorer would open a handle to its device object (note the double backslashes because
of the backslash being an escape character in C/C++):
HANDLE hDevice = CreateFile(L"\\\\.\\PROCEXP152",
GENERIC_WRITE | GENERIC_READ, 0, nullptr, OPEN_EXISTING,
0, nullptr);
With C++ 11 and later, you can write strings without escaping the backslash character. The
device path in the above code can be written like so: LR"(\\.\PROCEXP152)". L indicates
Unicode (as always), while anything between R"( and )" is not escaped.
Chapter 3: Kernel Programming Basics
52
You can try the above code yourself. If Process Explorer has run elevated at least once on the system
since boot, its driver should be running (you can verify with the tool itself), and the call to CreateFile
will succeed if the client is running elevated.
A driver creates a device object using the IoCreateDevice function. This function allocates and
initializes a device object structure and returns its pointer to the caller. The device object instance is
stored in the DeviceObject member of the DRIVER_OBJECT structure. If more than one device object
is created, they form a singly linked list, where the member NextDevice of the DEVICE_OBJECT points
to the next device object. Note that the device objects are inserted at the head of the list, so the first device
object created is stored last; its NextDevice points to NULL. These relationships are depicted in figure
3-5.
Figure 3-5: Driver and Device objects
Opening Devices Directly
The existence of a symbolic link makes it easy to open a handle to a device with the documented
CreateFile user-mode API (or from the ZwOpenFile API in the kernel). It is sometimes useful,
however, to be able to open device objects without going through a symbolic link. For example, a device
object might not have a symbolic link, because its driver decided (for whatever reason) not to provide one.
The native NtOpenFile (and NtCreateFile) function can be used to open a device object directly.
Microsoft never recommends using native APIs, but this function is somewhat documented for user-mode
use . Its definition is available in the  header file:
NTAPI NtOpenFile (
OUT PHANDLE FileHandle,
IN
ACCESS_MASK DesiredAccess,
IN
POBJECT_ATTRIBUTES ObjectAttributes,
OUT PIO_STATUS_BLOCK IoStatusBlock,
IN
ULONG ShareAccess,
IN
ULONG OpenOptions);
Chapter 3: Kernel Programming Basics
53
Notice the similarity to the ZwOpenFile we used in an earlier section - this is the same function prototype,
just invoked here from user mode, eventually to land at NtOpenFile within the I/O manager. The function
requires usage of an OBJECT_ATTRIBUTES structure, described earlier in this chapter.
The above prototype uses old macros such as IN, OUT and others. These have been replaced by SAL
annotations. Unfortunately, some header files were not yet converted to SAL.
To demonstrate using NtOpenFile from user mode, we’ll create an application to play a single sound.
Normally, the Beep Windows user-mode API provides such a service:
BOOL Beep(
_In_ DWORD dwFreq,
_In_ DWORD dwDuration);
The function accepts the frequency to play (in Hertz), and the duration to play, in milliseconds. The
function is synchronous, meaning it does not return until the duration has elapsed.
The Beep API works by calling a device named \Device\Beep (you can find it in WinObj), but the beep
device driver does not create a symbolic link for it. However, we can open a handle to the beep device
using NtOpenFile. Then, to play a sound, we can use the DeviceIoContol function with the correct
parameters. Although it’s not too difficult to reverse engineer the beep driver workings, fortunately we
don’t have to. The SDK provides the  file with the required definitions, including the device
name itself.
We’ll start by creating a C++ Console application in Visual Studio. Before we get to the main function, we
need some #includes:
#include 
#include 
#include 
#include 
 provides the definition for NtOpenFile (and related data structures), while 
provides the beep-specific definitions.
Since we will be using NtOpenFile, we must also link against NtDll.Dll, which we can do by adding a
#pragma to the source code, or add the library to the linker settings in the project’s properties. Let’s go
with the former, as it’s easier, and is not tied to the project’s properties:
#pragma comment(lib, "ntdll")
Without the above linkage, the linker would issue an “unresolved external” error.
Chapter 3: Kernel Programming Basics
54
Now we can start writing main, where we accept optional command line arguments indicating the
frequency and duration to play:
int main(int argc, const char* argv[]) {
printf("beep [ ]\n");
int freq = 800, duration = 1000;
if (argc > 2) {
freq = atoi(argv[1]);
duration = atoi(argv[2]);
}
The next step is to open the device handle using NtOpenFile:
HANDLE hFile;
OBJECT_ATTRIBUTES attr;
UNICODE_STRING name;
RtlInitUnicodeString(&name, L"\\Device\\Beep");
InitializeObjectAttributes(&attr, &name, OBJ_CASE_INSENSITIVE,
nullptr, nullptr);
IO_STATUS_BLOCK ioStatus;
NTSTATUS status = ::NtOpenFile(&hFile, GENERIC_WRITE, &attr, &ioStatus, 0, 0);
The line to initialize the device name can be replaced with:
RtlInitUnicodeString(&name, DD_BEEP_DEVICE_NAME_U);
The DD_BEEP_DEVICE_NAME_U macro is conveniently supplied as part of .
If the call succeeds, we can play the sound. To do that, we call DeviceIoControl with a control code
defined in  and use a structure defined there as well to fill in the frequency and duration:
if (NT_SUCCESS(status)) {
BEEP_SET_PARAMETERS params;
params.Frequency = freq;
params.Duration = duration;
DWORD bytes;
//
// play the sound
//
printf("Playing freq: %u, duration: %u\n", freq, duration);
::DeviceIoControl(hFile, IOCTL_BEEP_SET, &params, sizeof(params),
nullptr, 0, &bytes, nullptr);
Chapter 3: Kernel Programming Basics
55
//
// the sound starts playing and the call returns immediately
// Wait so that the app doesn't close
//
::Sleep(duration);
::CloseHandle(hFile);
}
The input buffer passed to DeviceIoControl should be a BEEP_SET_PARAMETERS structure, which
we pass in along with its size. The last piece of the puzzle is to use the Sleep API to wait based on the
duration, otherwise the handle to the device would be closed and the sound cut off.
Write an application that plays an array of sounds by leveraging the above code.
Summary
In this chapter, we looked at some of the fundamental kernel data structures, concepts, and APIs. In the next
chapter, we’ll build a complete driver, and a client application, expanding on the information presented
thus far.
Chapter 4: Driver from Start to Finish
In this chapter, we’ll use many of the concepts we learned in previous chapters and build a simple, yet
complete, driver, and an associated client application, while filling in some of the missing details from
previous chapters. We’ll deploy the driver and use its capabilities - perform some operation in kernel
mode that is difficult, or impossible to do, in user mode.
In this chapter:
• Introduction
• Driver Initialization
• Client Code
• The Create and Close Dispatch Routines
• The Write Dispatch Routine
• Installing and Testing
Introduction
The problem we’ll solve with a simple kernel driver is the inflexibility of setting thread priorities using
the Windows API. In user mode, a thread’s priority is determined by a combination of its process Priority
Class with an offset on a per thread basis, that has a limited number of levels.
Changing a process priority class (shown as Base priority column in Task Manager) can be achieved with
the SetPriorityClass function that accepts a process handle and one of the six supported priority
classes. Each priority class corresponds to a priority level, which is the default priority for threads created
in that process. A particular thread’s priority can be changed with the SetThreadPriority function,
accepting a thread handle and one of several constants corresponding to offsets around the base priority
class. Table 4-1 shows the available thread priorities based on the process priority class and the thread’s
priority offset.
Chapter 4: Driver from Start to Finish
57
Table 4-1: Legal values for thread priorities with the Windows APIs
Priority Class
- Sat
-2
-1
0 (default)
+1
+2
+ Sat
Comments
Idle
1
2
3
4
5
6
15
Task Manager refers to Idle as “Low”
Below Normal
1
4
5
6
7
8
15
Normal
1
6
7
8
9
10
15
Above Normal
1
8
9
10
11
12
15
High
1
11
12
13
14
15
15
Only six levels are available (not seven).
Real-time
16
22
23
24
25
26
31
All levels between 16 to 31 can be
selected.
The values acceptable to SetThreadPriority specify the offset. Five levels correspond to the offsets
-2 to +2: THREAD_PRIORITY_LOWEST (-2), THREAD_PRIORITY_BELOW_NORMAL (-1), THREAD_PRIOR-
ITY_NORMAL (0), THREAD_PRIORITY_ABOVE_NORMAL (+1), THREAD_PRIORITY_HIGHEST (+2). The
remaining two levels, called Saturation levels, set the priority to the two extremes supported by that
priority class: THREAD_PRIORITY_IDLE (-Sat) and THREAD_PRIORITY_TIME_CRITICAL (+Sat).
The following code example changes the current thread’s priority to 11:
SetPriorityClass(GetCurrentProcess(),
ABOVE_NORMAL_PRIORITY_CLASS);
// process base=10
SetThreadPriority(GetCurrentThread(),
THREAD_PRIORITY_ABOVE_NORMAL);
// +1 offset for thread
The Real-time priority class does not imply Windows is a real-time OS; Windows does not
provide some of the timing guarantees normally provided by true real-time operating systems.
Also, since Real-time priorities are very high and compete with many kernel threads doing
important work, such a process must be running with administrator privileges; otherwise,
attempting to set the priority class to Real-time causes the value to be set to High.
There are other differences between the real-time priorities and the lower priority classes.
Consult the Windows Internals book for more information.
Table 4-1 shows the problem we will address quite clearly. Only a small set of priorities are available to
set directly. We would like to create a driver that would circumvent these limitations and allow setting a
thread’s priority to any number, regardless of its process priority class.
Driver Initialization
We’ll start building the driver in the same way we did in chapter 2. Create a new “WDM Empty Project”
named Booster (or another name of your choosing) and delete the INF file created by the wizard. Next,
add a new source file to the project, called Booster.cpp (or any other name you prefer). Add the basic
#include for the main WDK header and an almost empty DriverEntry:
Chapter 4: Driver from Start to Finish
58
#include 
extern "C" NTSTATUS
DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) {
return STATUS_SUCCESS;
}
Most software drivers need to do the following in DriverEntry:
• Set an Unload routine.
• Set dispatch routines the driver supports.
• Create a device object.
• Create a symbolic link to the device object.
Once all these operations are performed, the driver is ready to take requests.
The first step is to add an Unload routine and point to it from the driver object. Here is the new
DriverEntry with the Unload routine:
// prototypes
void BoosterUnload(PDRIVER_OBJECT DriverObject);
// DriverEntry
extern "C" NTSTATUS
DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) {
DriverObject->DriverUnload = BoosterUnload;
return STATUS_SUCCESS;
}
void BoosterUnload(PDRIVER_OBJECT DriverObject) {
// empty for now
}
We’ll add code to the Unload routine as needed when we do actual work in DriverEntry that needs to
be undone.
Next, we need to set up the dispatch routines that we want to support. Practically all drivers must support
IRP_MJ_CREATE and IRP_MJ_CLOSE, otherwise there would be no way to open a handle to any device
for this driver. So we add the following to DriverEntry:
Chapter 4: Driver from Start to Finish
59
DriverObject->MajorFunction[IRP_MJ_CREATE] = BoosterCreateClose;
DriverObject->MajorFunction[IRP_MJ_CLOSE]
= BoosterCreateClose;
We’re pointing the Create and Close major functions to the same routine. This is because, as we’ll see
shortly, they will do the same thing: simply approve the request. In more complex cases, these could be
separate functions, where in the Create case the driver can (for instance) check to see who the caller is and
only let approved callers succeed with opening a handle.
All major functions have the same prototype (they are part of an array of function pointers), so we have
to add a prototype for BoosterCreateClose. The prototype for these functions is as follows:
NTSTATUS BoosterCreateClose(PDEVICE_OBJECT DeviceObject, PIRP Irp);
The function must return NTSTATUS, and accepts a pointer to a device object and a pointer to an I/O
Request Packet (IRP). An IRP is the primary object where the request information is stored, for all types
of requests. We’ll dig deeper into an IRP in chapter 7, but we’ll look at the basics later in this chapter, since
we require it to complete our driver.
Passing Information to the Driver
The Create and Close operations we set up are required, but certainly not enough. We need a way to tell
the driver which thread and to what value to set its priority. From a user mode client’s perspective, there
are three basic functions it can use: WriteFile, ReadFile and DeviceIoControl.
For our driver’s purposes, we can use either WriteFile or DeviceIoControl. Read doesn’t make
sense, because we’re passing information to the driver, rather than from the driver. So which is better,
WriteFile or DeviceIoControl? This is mostly a matter of taste, but the general wisdom here is to
use Write if it’s really a write operation (logically); for anything else - DeviceIoControl is preferred,
as it’s a generic mechanism for passing data to and from the driver.
Since changing a thread’s priority is not a purely Write operation, DeviceIoControl makes more sense,
but we’ll use WriteFile, as it’s a bit easier to handle. We’ll look at all the details in chapter 7. WriteFile
has the following prototype:
BOOL WriteFile(
_In_
HANDLE hFile,
_In_reads_bytes_opt_(nNumberOfBytesToWrite) LPCVOID lpBuffer,
_In_
DWORD nNumberOfBytesToWrite,