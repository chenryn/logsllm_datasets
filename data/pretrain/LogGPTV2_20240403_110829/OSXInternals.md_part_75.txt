next. In particular, the next pointer of the processor set's processors field points to the first (master)
processor. Thus, you can traverse the list of all processors in a processor set starting from either the set or
any of the processors. Similarly, you can traverse the list of all active processors in a set using the
active_queue field of the processor_set structure and the processor_queue field of each processor
structure in the set.
Figure 74. A processor set containing two processors
[View full size image]
Figure 75 shows the situation when both processors in Figure 74 are on the active queue of the default
processor set.
Figure 75. A processor set with two processors on its active queue
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 9 of 107
[View full size image]
7.2.3.2. The Processor API
The following are examples of Mach routines that deal with processors.
 host_processors() returns an array of send rights representing all processors in the system. Note
that the user-space caller receives the array as out-of-line data in a Mach IPC messagethe memory
appears implicitly allocated in the caller's virtual address space. In such a case, the caller should
explicitly deallocate the memory when it is no longer needed by calling the vm_deallocate() or
mach_vm_deallocate() Mach routines.
 processor_control() runs machine-dependent control operations, or commands, on the specified
processor. Examples of such commands include setting performance-monitoring registers and
setting or clearing performance-monitoring counters.
 processor_info() retrieves information about the specified processor. Examples of
processor_info() flavors are PROCESSOR_BASIC_INFO (processor type, subtype, and slot number;
whether it is running; and whether it is the master processor) and PROCESSOR_CPU_LOAD_INFO (the
number of tasks and threads assigned to the processor, its load average, and its Mach factor).
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 10 of 107
 On a multiprocessor system, processor_start() starts the given processor if it is currently offline.
The processor is assigned to the default processor set after startup. Conversely, processor_exit()
stops the given processor and removes it from its assigned processor set.
 processor_get_assignment() returns the name port for the processor set to which the given
processor is currently assigned. The complementary callprocessor_assign()assigns a processor
to a processor set. However, since the xnu kernel supports only one processor set,
processor_assign() always returns a failure, whereas processor_get_assignment() always
returns the default processor set.
Several processor-related Mach routines have machine-dependent behavior. Moreover, routines that affect
a processor's global behavior are privileged.
There also exist calls to set or get the processor set affinity of tasks and threads. For example,
task_assign() assigns a task, and optionally all threads within the task, to the given processor set.
Unless all threads are included, only newly created threads will be assigned to the new processor set. As
with other calls dealing with multiple processor sets, task_assign() always returns failure on Mac OS
X.
Let us look at two examples of using the Mach processor API. First, we will write a program to retrieve
information about the processors in a system. Next, we will write a program to disable a processor on a
multiprocessor system.
7.2.3.3. Displaying Processor Information
Figure 76 shows the program for retrieving processor information.
Figure 76. Retrieving information about processors on the host
// processor_info.c
#include 
#include 
#include 
void
print_basic_info(processor_basic_info_t info)
{
printf("CPU: slot %d%s %s, type %d, subtype %d\n", info->slot_num,
(info->is_master) ? " (master)," : ",",
(info->running) ? "running" : "not running",
info->cpu_type, info->cpu_subtype);
}
void
print_cpu_load_info(processor_cpu_load_info_t info)
{
unsigned long ticks;
// Total ticks do not amount to the uptime if the machine has slept
ticks = info->cpu_ticks[CPU_STATE_USER] +
info->cpu_ticks[CPU_STATE_SYSTEM] +
info->cpu_ticks[CPU_STATE_IDLE] +
info->cpu_ticks[CPU_STATE_NICE];
printf(" %ld ticks "
"(user %ld, system %ld, idle %ld, nice %ld)\n", ticks,
info->cpu_ticks[CPU_STATE_USER],
info->cpu_ticks[CPU_STATE_SYSTEM],
info->cpu_ticks[CPU_STATE_IDLE],
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 11 of 107
info->cpu_ticks[CPU_STATE_NICE]);
printf(" cpu uptime %ld h %ld m %ld s\n",
(ticks / 100) / 3600, // hours
((ticks / 100) % 3600) / 60, // minutes
(ticks / 100) % 60); // seconds
}
int
main(void)
{
int i;
kern_return_t kr;
host_name_port_t myhost;
host_priv_t host_priv;
processor_port_array_t processor_list;
natural_t processor_count;
processor_basic_info_data_t basic_info;
processor_cpu_load_info_data_t cpu_load_info;
natural_t info_count;
myhost = mach_host_self();
kr = host_get_host_priv_port(myhost, &host_priv);
if (kr != KERN_SUCCESS) {
mach_error("host_get_host_priv_port:", kr);
exit(1);
}
kr = host_processors(host_priv, &processor_list, &processor_count);
if (kr != KERN_SUCCESS) {
mach_error("host_processors:", kr);
exit(1);
}
printf("%d processors total.\n", processor_count);
for (i = 0; i  for getpid(2) and sleep(3)
printf("processor_list = %p\n", processor_list);
printf("my process ID is %d\n", getpid());
sleep(60);
...
$ sudo ./processor_info
processor_list = 0x6000
my process ID is 2463
...
$ sudo vmmap 2463
Virtual Memory Map of process 2463 (processor_info)
...
==== Writable regions for process 2463
...
Mach message 00006000-00007000 [ 4K] rw-/rwx SM=PRV
...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 13 of 107
7.2.3.4. Stopping and Starting a Processor in a Multiprocessor System
In this example, we will programmatically stop and start one of the processors in a multiprocessor system.
Figure 78 shows a program that calls processor_exit() to take the last processor offline and
processor_start() to bring it online.
Figure 78. Starting and stopping a processor through the Mach processor interface
// processor_xable.c
#include 
#include 
#include 
#define PROGNAME "processor_xable"
#define EXIT_ON_MACH_ERROR(msg, retval) \
if (kr != KERN_SUCCESS) { mach_error(msg, kr); exit((retval)); }
int
main(int argc, char **argv)
{
kern_return_t kr;
host_priv_t host_priv;
processor_port_array_t processor_list;
natural_t processor_count;
char *errmsg = PROGNAME;
if (argc != 2) {
fprintf(stderr,
"usage: %s , where  is \"exit\" or \"start\"\n",
PROGNAME);
exit(1);
}
kr = host_get_host_priv_port(mach_host_self(), &host_priv);
EXIT_ON_MACH_ERROR("host_get_host_priv_port:", kr);
kr = host_processors(host_priv, &processor_list, &processor_count);
EXIT_ON_MACH_ERROR("host_processors:", kr);
// disable last processor on a multiprocessor system
if (processor_count > 1) {
if (*argv[1] == 'e') {
kr = processor_exit(processor_list[processor_count - 1]);
errmsg = "processor_exit:"
} else if (*argv[1] == 's') {
kr = processor_start(processor_list[processor_count - 1]);
errmsg = "processor_start:"
} else {
kr = KERN_INVALID_ARGUMENT;
}
} else
printf("Only one processor!\n");
// this will deallocate while rounding up to page size
(void)vm_deallocate(mach_task_self(), (vm_address_t)processor_list,
processor_count * sizeof(processor_t *));
EXIT_ON_MACH_ERROR(errmsg, kr);
fprintf(stderr, "%s successful\n", errmsg);
exit(0);
}
$ gcc -Wall -o processor_xable processor_xable.c
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 14 of 107
$ sudo ./processor_info
2 processors total.
CPU: slot 0 (master), running, type 18, subtype 100
88141653 ticks (user 2974228, system 2170409, idle 82953261, nice 43755)
cpu uptime 244 h 50 m 16 s
CPU: slot 1, running, type 18, subtype 100
88128007 ticks (user 3247822, system 2088151, idle 82741221, nice 50813)
cpu uptime 244 h 48 m 0 s
$ sudo ./processor_xable exit
processor_exit: successful
$ sudo ./processor_info
2 processors total.
CPU: slot 0 (master), running, type 18, subtype 100
88151172 ticks (user 2975172, system 2170976, idle 82961265, nice 43759)
cpu uptime 244 h 51 m 51 s
CPU: slot 1, not running, type 18, subtype 100
88137333 ticks (user 3248807, system 2088588, idle 82749125, nice 50813)
cpu uptime 244 h 49 m 33 s
$ sudo ./processor_xable start
processor_start: successful
$ sudo ./processor_info
2 processors total.
CPU: slot 0 (master), running, type 18, subtype 100
88153641 ticks (user 2975752, system 2171100, idle 82963028, nice 43761)
cpu uptime 244 h 52 m 16 s
CPU: slot 1, running, type 18, subtype 100
88137496 ticks (user 3248812, system 2088590, idle 82749281, nice 50813)
cpu uptime 244 h 49 m 34 s
7.2.4. Tasks and the Task API
A Mach task is a machine-independent abstraction of the execution environment of threads. We saw
earlier that a task is a container for resourcesit encapsulates protected access to a sparse virtual address
space, IPC (port) space, processor resources, scheduling control, and threads that use these resources. A
task has a few task-specific ports, such as the task's kernel port and task-level exception ports
(corresponding to task-level exception handlers). Figure 79 shows an annotated excerpt from the task
structure.
Figure 79. The task structure in the xnu kernel
// osfmk/kern/task.h
struct task {
...
vm_map_t map; // address space description
queue_chain_t pset_tasks; // list of tasks in our processor set
...
queue_head_t threads; // list of threads in this task
int thread_count; // number of threads in this task
...
integer_t priority; // base priority for threads
integer_t max_priority; // maximum priority for threads
...
// IPC structures
...
struct ipc_port *itk_sself; // a send right
struct exception_action exc_actions[EXC_TYPES_COUNT]; // exception ports
struct ipc_port *itk_host; // host port
struct ipc_port *itk_bootstrap; // bootstrap port
// "registered" ports -- these are inherited across task_create()
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 15 of 107
struct ipc_port *itk_registered[TASK_PORT_REGISTER_MAX];
struct ipc_space *itk_space; // the IPC space
...