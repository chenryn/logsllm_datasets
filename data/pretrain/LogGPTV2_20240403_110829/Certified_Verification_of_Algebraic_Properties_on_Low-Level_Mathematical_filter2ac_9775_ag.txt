2017-05-19.
2017-05-19.
[19] fiat 2015. Fiat-Crypto. https://github.com/mit-plv/fiat-crypto. (2015). Accessed:
[20] Michael R. Garey and David S. Johnson. 1979. Computers and Intractability: A
Guide to the Theory of NP-Completeness. W. H. Freeman and company.
[21] Gert-Martin Greuel and Gerhard Pfister. 2008. A Singular Introduction to Com-
mutative Algebra (2nd ed.). Springer.
John Harrison. 2007. Automating Elementary Number-Theoretic Proofs Using
Gröbner Bases. In CADE (LNCS), Frank Pfenning (Ed.), Vol. 4603. Springer, 51–66.
[23] C. A. R. Hoare. 1969. An axiomatic basis for computer programming. CACM 12,
[22]
10 (1969), 576–580.
[24] Nick Howgrave-Graham, Phong Q. Nguyen, David Pointcheval, John Proos,
Joseph H. Silverman, Ari Singer, and William Whyte. 2003. The Impact of
Decryption Failures on the Security of NTRU Encryption. In CRYPTO (LNCS),
Dan Boneh (Ed.), Vol. 2729. Springer, 226–246.
[25] Peter L. Montgomery. 1987. Speeding the Pollard and Elliptic Curve Methods of
Factorization. Math. Comp. 48, 177 (1987), 243–264.
[26] Magnus O. Myreen and Gregorio Curello. 2013. Proof Pearl: A Verified Bignum
Implementation in x86-64 Machine Code. In Certified Programs and Proofs (LNCS),
Vol. 8307. Springer, 66–81. https://doi.org/10.1007/978-3-319-03545-1_5
[27] Magnus O. Myreen and Michael J. C. Gordon. 2007. Hoare Logic for Realistically
Modelled Machine Code. In TACAS (LNCS), Orna Grumberg and Michael Huth
(Eds.), Vol. 4424. Springer, 568–582.
[28] Loïc Pottier. 2008. Connecting Gröbner Bases Programs with Coq to do Proofs in
Algebra, Geometry and Arithmetics. In Knowledge Exchange: Automated Provers
and Proof Assistants, G. Sutcliffe, P. Rudnicki, R. Schmidt, B. Konev, and S. Schulz
(Eds.). 418.
[29] Loïc Pottier. 2010. Connecting Gröbner Bases Programs with Coq to do Proofs in
Algebra, Geometry and Arithmetics. Technical Report abs/1007.3615. CoRR.
[30] Aaron Tomb. 2016. Automated Verification of Real-World Cryptographic Imple-
mentations. IEEE Security & Privacy 14, 6 (2016), 26–33. https://doi.org/10.1109/
MSP.2016.125
[31] Wikipedia. 2017. Curve25519. https://en.wikipedia.org/wiki/Curve25519. (2017).
Accessed: 2017-05-19.
A APPENDIX
A.1 Multiplication over GF(2255 − 19)
The following bvCryptoLine code implements multiplications over
GF(2255 − 19) for the AMD64 architecture:
1 : mulrax ←
2 : mulrax ←
3 : mulx319 ←
4 : mulrdx mulrax ←
5 : r0 ←
6 : mulr01 ←
7 : mulrax ←
8 : mulrax ←
9 : mulx419 ←
10 : mulrdx mulrax ←
11 : carry r0 ←
12 : mulr01 ←
13 : mulrax ←
14 : mulrdx mulrax ←
15 : carry r0 ←
16 : mulr01 ←
17 : mulrax ←
18 : mulrdx mulrax ←
19 : r1 ←
20 : mulr11 ←
21 : mulrax ←
22 : mulrdx mulrax ←
23 : r2 ←
24 : mulr21 ←
25 : mulrax ←
26 : mulrdx mulrax ←
27 : r3 ←
28 : mulr31 ←
29 : mulrax ←
30 : mulrdx mulrax ←
31 : r4 ←
32 : mulr41 ←
33 : mulrax ←
34 : mulrdx mulrax ←
35 : carry r1 ←
36 : mulr11 ←
37 : mulrax ←
38 : mulrdx mulrax ←
39 : carry r2 ←
40 : mulr21 ←
41 : mulrax ←
42 : mulrdx mulrax ←
43 : carry r3 ←
44 : mulr31 ←
45 : mulrax ←
46 : mulrdx mulrax ←
47 : carry r4 ←
48 : mulr41 ←
49 : mulrax ←
50 : mulrax ←
51 : mulrdx mulrax ←
52 : carry r0 ←
x3;
mulrax × bv64 (19);
mulrax;
mulrax × y2;
mulrax;
mulrdx;
x4;
mulrax × bv64 (19);
mulrax;
mulrax × y1;
r0 + mulrax;
mulr01 + mulrdx + carry;
x0;
mulrax × y0;
r0 + mulrax;
mulr01 + mulrdx + carry;
x0;
mulrax × y1;
mulrax;
mulrdx;
x0;
mulrax × y2;
mulrax;
mulrdx;
x0;
mulrax × y3;
mulrax;
mulrdx;
x0;
mulrax × y4;
mulrax;
mulrdx;
x1;
mulrax × y0;
r1 + mulrax;
mulr11 + mulrdx + carry;
x1;
mulrax × y1;
r2 + mulrax;
mulr21 + mulrdx + carry;
x1;
mulrax × y2;
r3 + mulrax;
mulr31 + mulrdx + carry;
x1;
mulrax ∗ y3;
r4 + mulrax;
mulr41 + mulrdx + carry;
x1;
mulrax × bv64 (19);
mulrax × y4;
r0 + mulrax;
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1986109 : mulr11 r1 ←
110 : r1 ←
111 : mulr21 r2 ←
112 : r2 ←
113 : mulr31 r3 ←
114 : r3 ←
115 : mulr41 r4 ←
116 : r4 ←
117 : mulr41 ←
118 : r0 ←
119 : mult ←
120 : mult tmp ←
121 : mult ←
122 : r1 ←
123 : multtmp2 ←
124 : r0 ←
125 : mult ←
126 : r2 ←
127 : mult tmp ←
128 : r1 ←
129 : mult ←
130 : r3 ←
131 : mult tmp2 ←
132 : r2 ←
133 : mult ←
134 : r4 ←
135 : mult tmp ←
136 : r3 ←
137 : mult ←
138 : r0 ←
139 : r4 ←
140 : z0 ←
141 : z1 ←
142 : z2 ←
143 : z3 ←
144 : z4 ←
(mulr11.r1) ≪ 13;
r1 + mulr01;
(mulr21.r2) ≪ 13;
r2 + mulr11;
(mulr31.r3) ≪ 13;
r3 + mulr21;
(mulr41.r4) ≪ 13;
r4 + mulr31;
mulr41 × bv64 (19);
r0 + mulr41;
r0;
mult@51;
mult + r1;
mult;
mult@51;
tmp;
mult + r2;
mult;
mult@51;
tmp2;
mult + r3;
mult;
mult@51;
tmp;
mult + r4;
mult;
mult@51;
tmp2;
mult × bv64 (19);
r0 + mult;
tmp;
r0;
r1;
r2;
r3;
r4;
Let bMul denote the above program. Define qa ≜ ⊤, qr ≜ 0 ≤ x0,
x1, x2, x3, x4, y0, y1, y2, y3, y4 ≤ bv64 (252), q′
a ≜ radix51V (x4, x3,
x2, x1, x0) × radix51V (y4, y3, y2, y1, y0) ≡ radix51V (z4, z3, z2, z1,
z0) mod bv64 (2255 −19), and q′
r ≜ 0 ≤ z0, z1, z2, z3, z4 ≤ bv64 (252).
Its specification is
(cid:57)q′
(|q′
r |).
a(cid:57)
(|qa(cid:57)
(cid:57)qr |)
bMul
53 : mulr01 ←
54 : mulrax ←
55 : mulrdx mulrax ←
56 : carry r2 ←
57 : mulr21 ←
58 : mulrax ←
59 : mulrdx mulrax ←
60 : carry r3 ←
61 : mulr31 ←
62 : mulrax ←
63 : mulrdx mulrax ←
64 : carry r4 ←
65 : mulr41 ←
66 : mulrax ←
67 : mulrax ←
68 : mulrdx mulrax ←
69 : carry r0 ←
70 : mulr01 ←
71 : mulrax ←
72 : mulrax ←
73 : mulrdx mulrax ←
74 : carry r1 ←
75 : mulr11 ←
76 : mulrax ←
77 : mulrdx mulrax ←
78 : carry r3 ←
79 : mulr31 ←
80 : mulrax ←
81 : mulrdx mulrax ←
82 : carry r4 ←
83 : mulr41 ←
84 : mulrax ←
85 : mulrdx mulrax ←
86 : carry r1 ←
87 : mulr11 ←
88 : mulrax ←
89 : mulrdx mulrax ←
90 : carry r2 ←
91 : mulr21 ←
92 : mulrax ←
93 : mulrdx mulrax ←
94 : carry r4 ←
95 : mulr41 ←
96 : mulrax ←
97 : mulrdx mulrax ←
98 : carry r1 ←
99 : mulr11 ←
100 : mulrax ←
101 : mulrdx mulrax ←
102 : carry r2 ←
103 : mulr21 ←
104 : mulrax ←
105 : mulrdx mulrax ←
106 : carry r3 ←
107 : mulr31 ←
108 : mulr01 r0 ←
mulr01 + mulrdx + carry;
x2;
mulrax × y0;
r2 + mulrax;
mulr21 + mulrdx + carry;
x2;
mulrax × y1;
r3 + mulrax;
mulr31 + mulrdx + carry;
x2;
mulrax × y2;
r4 + mulrax;
mulr41 + mulrdx + carry;
x2;
mulrax × bv64 (19);
mulrax × y3;
r0 + mulrax;
mulr01 + mulrdx + carry;
x2;
mulrax × bv64 (19);
mulrax × y4;
r1 + mulrax;
mulr11 + mulrdx + carry;
x3;
mulrax × y0;
r3 + mulrax;
mulr31 + mulrdx + carry;
x3;
mulrax × y1;
r4 + mulrax;
mulr41 + mulrdx + carry;
mulx319;
mulrax × y3;
r1 + mulrax;
mulr11 + mulrdx + carry;
mulx319;
mulrax × y4;
r2 + mulrax;
mulr21 + mulrdx + carry;
x4;
mulrax × y0;
r4 + mulrax;
mulr41 + mulrdx + carry;
mulx419;
mulrax × y2;
r1 + mulrax;
mulr11 + mulrdx + carry;
mulx419;
mulrax × y3;
r2 + mulrax;
mulr21 + mulrdx + carry;
mulx419;
mulrax × y4;
r3 + mulrax;
mulr31 + mulrdx + carry;
(mulr01.r0) ≪ 13;
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1987