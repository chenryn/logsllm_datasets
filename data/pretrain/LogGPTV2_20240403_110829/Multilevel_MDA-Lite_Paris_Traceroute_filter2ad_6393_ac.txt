vertex at hop i or if the number of predecessors is not identical for
every vertex at hop i + 1, the diamond has width asymmetry and is
considered to be non-uniform, and the MDA-Lite switches over to
the MDA.
Finding non-uniformity depends upon the topology in question
having been fully revealed. Unlike the MDA, the MDA-Lite does not
provide statistical guarantees on full topology discovery. Rather, the
MDA-Lite assumes that any non-uniformity is likely to be low so
that the full topology will most probably be revealed. We empirically
justify this assumption based upon our survey results in Sec. 5.1.
2.4 MDA-Lite evaluation
We have tested the MDA-Lite both through simulations and mea-
surements on the Internet, finding in both cases that it compares
favorably to the full MDA.
2.4.1 Evaluation through simulations. Simulations allow us to com-
pare the MDA-Lite to the MDA on known topologies and in an
environment free of factors, such as variations in router load, that
are not related to the algorithms. We have chosen topologies based
on both the categories of diamond that are relevant to the MDA-Lite
(uniform or asymmetric, meshed or not, see Sec. 2.3), and on what
we found in our survey (Sec. 5.1).
• The max length 2 diamond, found on the trace pl2.prakinf.-
tu-ilmenau.de to 83.167.65.184, consists of a divergence
point, a 28 vertex hop, and a convergence point. Nearly
half of all diamonds in the survey are of maximum length 2,
though this is a particularly wide example. Where the MDA
will perform node control on each of the 28 vertices, the
MDA-Lite will avoid doing so. Finding no adjacent multi-
vertex hops, the MDA-Lite will not apply its meshing test.
• The symmetric diamond, found on the trace ple1.cesnet.cz
to 203.195.189.3, has three multi-vertex hops, with 10 being
the most vertices at a hop. There is no meshing between
the hops. On this diamond, the MDA-Lite will be obliged
to perform a light version of node control in order to test
Figure 3: MDA-Lite versus MDA simulations
for meshing. Finding none, it will not switch over to the full
MDA.
• The asymmetric diamond, found on the trace kulcha.mimuw.-
edu.pl to 61.6.250.1, has nine multi-vertex hops, with 19
being the most vertices at a hop. The edges are laid out
in such a way that at least one of the hops is not uniform,
which is to say that there is a greater probability of a probe
packet with an arbitrarily chosen flow identifier reaching
some vertices at that hop rather than others. It has a “width
asymmetry” of 17 (this metric is defined in Sec. 5). It is un-
meshed. If the MDA-Lite discovers the asymmetry, it will be
obliged to switch over to the full MDA.
• The meshed diamond, found on the trace ple2.planetlab.eu
to 125.155.82.17, has five multi-vertex hops, with 48 being
the most vertices at a hop. It is meshed, and if the MDA-Lite
discovers the meshing it will be obliged to switch over to
the full MDA.
The simulations ran on Fakeroute, the tool that we describe in Sec. 3.
Fig. 3 shows the results of 30 runs on each of the four topologies,
with vertex discovery graphs on the left and edge discovery graphs
0.20.40.60.81.0Fraction of packets0.00.20.40.60.81.0Fraction of verticesMax Length 2 diamond verticesMDA-liteMDA0.20.40.60.81.0Fraction of packets0.00.20.40.60.81.0Fraction of edgesMax Length 2 diamond edgesMDA-liteMDA0.20.40.60.81.0Fraction of packets0.00.20.40.60.81.0Fraction of verticesSymmetric diamond verticesMDA-liteMDA0.20.40.60.81.0Fraction of packets0.00.20.40.60.81.0Fraction of edgesSymmetric diamond edgesMDA-liteMDA0.20.40.60.81.0Fraction of packets0.00.20.40.60.81.0Fraction of verticesAsymmetric diamond verticesMDA-liteMDA0.20.40.60.81.0Fraction of packets0.00.20.40.60.81.0Fraction of edgesAsymmetric diamond edgesMDA-liteMDA0.20.40.60.81.0Fraction of packets0.00.20.40.60.81.0Fraction of verticesMeshed diamond verticesMDA-liteMDA0.20.40.60.81.0Fraction of packets0.00.20.40.60.81.0Fraction of edgesMeshed diamond edgesMDA-liteMDAon the right. Two curves are plotted on each graph: one for the
MDA-Lite with ϕ = 2 and one for the MDA. The portion of the
topologies’ vertices or edges discovered as each algorithm is run-
ning is plotted on the vertical axis. The horizontal axis indicates the
number of probe packets sent, normalized to 1.0 being the number
of packets sent by the MDA in a given run. Since the MDA-Lite
sends fewer packets when confronted with max length 2 and sym-
metric diamonds, its curves stop before reaching the right hand
side of the graph. Error bars are given. We see that the MDA-Lite
tends to discover more of these topologies faster than the MDA,
though not always, and that it discovers the entire topology sooner.
In cases where it does not need to switch over to the full MDA, it
also economizes on the number of probes that it sends, reducing by
40% the full MDA’s overhead on these examples. For these cases,
we see that the MDA-Lite is not sacrificing the ability to discover
the full topology. Because it is more economical in its use of probes,
it discovers more faster. When it does not have to switch over to
the full MDA, it uses significantly fewer probes. In the other cases,
although it discovers the full topology faster than the MDA, the
switch to the full MDA means no economy in its use of probes.
2.4.2 Evaluation through measurements. We performed our mea-
surement-based evaluation on a sample of 10,000 source-destination
pairs from our survey (Sec. 5.1) for which diamonds had been dis-
covered. For each of these, we ran five variants of Paris Traceroute
successively: two with the MDA; one with the MDA-Lite and ϕ = 2;
one with the MDA-Lite and ϕ = 4; and one with just a single flow
ID, the way Paris Traceroute is currently implemented on the RIPE
Atlas infrastructure (Sec. 6.2). As a reminder, the parameter ϕ, de-
fined in Sec. 2.3.2, governs how much effort the MDA-Lite will
expend in trying to detect meshing.
For each topology, the first run with the MDA serves as the
basis for comparing the other algorithms. We calculate the ratio
of vertices discovered, edges discovered, and packets sent. The
results, plotted as CDFs, are shown in Fig. 4. The horizontal axis
plots the ratios in log scale, with 100 indicating that the algorithms
performed the same. For the vertex and edge discovery plots, a
value to the left of this value indicates that the competing algorithm
discovered less than the first MDA run, and so performed worse,
and a value to the right indicates that it discovered more, and so
performed better. For the packets plot, at 1, the tools sent the same
number of packets, whereas a value to the left of this indicates that
the competing algorithm sent fewer packets than the first MDA
run, and so performed better, whereas a value to the right of this
indicates that the competing algorithm sent more packets than the
first MDA run, and so performed worse.
We run the MDA algorithm twice because there are variations
from run to run, both because of changing network conditions and
because of the stochastic nature of MDA and MDA-Lite discov-
ery. The second MDA will sometimes perform better, sometimes
worse than the first, and its curve, shown as a solid black line in
the plots, forms the basis against which to compare the other al-
gorithms. While the second MDA performs close to the first, it
discovers fewer vertices 12% of the time and more vertices 12%
of the time; fewer edges 20% of the time and more edges 20% of
the time. We believe that these differences are largely attributable
to the stochastic nature of the MDA, meaning that either the first
MDA 2
MDA-Lite ϕ = 2
MDA-Lite ϕ = 4
Single flow ID
Vertices
0.998
1.002
1.004
0.537
Edges
0.999
1.007
1.005
0.201
Packets
1.005
0.696
0.711
0.040
Table 1: Comparative performance on aggregated topology:
ratios with respect to a first MDA round over 10,000 mea-
surements in the Internet
or the second run occasionally terminates its discovery process
without having discovered all of the vertices (and hence edges) that
are available to discover. Recall from Sec. 2 that the MDA’s failure
bound for discovering the successors to a vertex is set as a function
of a global failure bound for the entire topology and a maximum
number of branching points that the topology might have. This
latter parameter is set to 30 by default, but in complex topologies
of the sort that we have encountered in our survey, there can be
far more branching points.
For the comparison between the MDA and the MDA-Lite, we
observe that there is no discernible difference between ϕ = 2 and
ϕ = 4 for the MDA-Lite. Most importantly, the MDA-Lite performs
nearly identically to the second MDA run with respect to the first
MDA run: sometimes better, sometimes worse. Compared to the
first MDA run, the MDA-Lite performed better 14% of the time
and worse 14% of the time for the vertices; better 20% of the time
and worse 26% of the time for the edges. We attribute the larger
number of instances of worse performance to the occasional failure
of MDA-Lite to detect meshing or non-uniformity. The impact of
this greater number on overall performance is negligible, as the
ratio curves are hard to distinguish.
Paris Traceroute with a single flow ID performs notably worse
on the whole than the MDA in both vertex and edge discovery. In
only 12% of the cases, we observed at least 90% of the vertices and
in only 10% of the cases, we observed at least 90% of the edges. We
did detect some outliers where Paris Traceroute with a single flow
ID discovers a greater number of vertices and edges than the MDA.
These correspond, we believe, to cases where the route changed
between the runs.
The other aspect of performance that concerns us is the number
of packets that were sent. In 89% of the comparisons, the MDA-Lite
realized probe savings. We find that we save 40% of the probes on
30% of the topologies. The ratio curves for both ϕ = 2 and ϕ = 4
are nearly identical and they are clearly superior to the curve for
the second MDA run, meaning that when there is a diamond in the
topology, the MDA-Lite will tend to use significantly fewer packets
that the MDA.
Paris Traceroute with a single flow ID sends many fewer packets.
The cost of discovering an entire multipath topology via the MDA
can be anywhere from less than 2 times more to 1000 times more
than the cost of tracing a single route with a single flow ID.
From a macroscopic point of view, Table 1 provides results on
the overall topology formed by the aggregation of the 10,000 mea-
surements of the evaluation dataset. Ratios of topology discovered
and probes sent are computed with respect to the first MDA. We
see that the topologies discovered by the MDA and the MDA-Lite
Figure 4: Comparative performance: CDFs over 10,000 measurements in the Internet
are very close, with a maximum of 0.7% difference for the edges.
We see also that the MDA-Lite cuts the number of probe packets
sent by roughly 30%. Paris Traceroute with a single flow ID sends
only 4% of the packets sent by the first MDA, but only discovers
53.7% of the vertices and 20.1% of the edges.
3 FAKEROUTE
For any given multipath route between source and destination,
one can calculate the precise probability of the MDA failing to
detect the entire topology. This calculation is a simple application
of the MDA’s stopping rule with the chosen stopping points, the
values nk described in Sec. 2.1, along with the basic assumptions
underlying the MDA, such as that load balancing will be uniform
at random across successor vertices [47, Sec. II.A]. For a vertex
in the topology that has K > 1 successors, the first successor will
certainly be found by the first probe packet (among the assumptions
is that all probes receive replies), but there is a probability 1/Kn1−1
that a total of n1 probes will fail to discover a second successor,
and the probabilities of failing to discover each of the remaining
successors k ⩽ K are similarly straightforward to calculate. Veitch
et al. provide the details [47, Sec. II.B].
In principle, therefore, it should be possible to test that the MDA
has been correctly implemented by a software tool by running
it repeatedly on a suite of benchmark topologies and seeing that
the failure probabilities are as predicted. For scientific purposes,
we would want, if at all possible, to verify the conformance of a
tool before using it, but we have not had that capability until now
for tools that implement the MDA. Our contribution is a network
multipath topology simulator that takes as input a given topology
and a number of values nk that is at least equal to the highest
branching factor encountered in the topology, that calculates the
probability that the MDA will fail to discover the full topology, and
that runs the actual software tool in question repeatedly on the
topology to verify that the tool does indeed fail at the predicted
rate, not more, not less, providing a confidence interval for this
result.
Our Fakeroute is a complete rewrite of the Fakeroute tool that has
been provided as part of the libparistraceroute library [7], and which
enabled small numbers of runs of a tool on a simulated topology,
for simple debugging purposes, but that was not designed for large
numbers of runs with statistical validation. The new Fakeroute,
written in C++, uses libnetfilter-queue [6] to sniff probe packets
sent by a tool and suck them into the simulated environment rather
than letting them out of the host into Internet. Once a probe is
in, Fakeroute uses libtins [8] to read the flow identifier and TTL
from its header fields. These are used to simulate the probe’s pas-
sage through the topology, with the pseudo randomness of load
balancing being emulated by the Mersenne Twister [2] that comes
with the standard C++ library. Using libtins, Fakeroute crafts either
an ICMP Time Exceeded or an ICMP Port Unreachable reply de-
pending on whether the probe is determined to have reached an