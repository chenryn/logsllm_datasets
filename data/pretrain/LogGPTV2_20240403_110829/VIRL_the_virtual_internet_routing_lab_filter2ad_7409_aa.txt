# VIRL: The Virtual Internet Routing Lab

## Authors
- Joel Obstfeld
- Simon Knight
- Ed Kern
- Qiang Sheng Wang
- Tom Bryan
- Dan Bourque

## Personal Edition
**Beau Williamson**  
CCIE R&S 1346 Emeritus  
T-Mobile

## Housekeeping
- Please turn off all cell phones and pagers.
- **WARNING:** This session is being recorded via the highly sensitive overhead microphones in the room. Please avoid side conversations, as anything you say may be used on social media.

## Acknowledgements
A big thank you to Joel Obstfeld and Alejandro Gallego from the Cisco VIRL team for their assistance with this presentation. Some slides are courtesy of Cisco.

## Opening Statements
- I am not an expert on VIRL, but feel free to ask questions at any time.
- There are no bonus points for stumping the presenter.
- If anyone in the audience has more experience with VIRL, please share your knowledge. We want to benefit from your expertise.

## Agenda
1. What is VIRL?
2. VIRL Architecture
3. VIRL Components
4. VIRL Installation
5. VIRL Basics
6. AutoNetkit
7. Layer-2 Switching
8. VIRL Advanced Features

## What is VIRL?
- **Up to 30 Cisco virtual machines in a box:**
  - Runs the same OS as Cisco's physical routers and switches (IOS, IOS-XR, IOS-XE, NX-OS, IOS L2 Switching, ASA).
  - Powerful GUI for network design and simulation control.
  - Auto-Netkit Configuration engine: Can build complete Cisco configurations automatically (IPv4/v6 Addressing, OSPF Areas, BGP ASN, etc.).
  - Connectivity to external physical networks (requires additional physical network ports on the VIRL server).
  - Portability and repeatability.

## VIRL Architecture – Virtual OS
- **Virtualized Operating Systems:**
  - IOS XRv, NX-OSv, CSR1000v, IOSv, and IOSvL2.
  - Ubuntu, Cirros, and third-party virtual machines.
  - Same control-plane and management plane code.
  - Same memory footprint.
  - Different CPU performance and forwarding plane code.
  - No ASIC emulation.

## Nested Virtualization
- **Virtualized Devices:**
  - KVM/QEMU provides kernel-based hypervisor/host-virtualization.
  - Ubuntu as the host operating system.
  - Intel VT-x/AMD-V capable CPUs expose hardware-virtualization functions to Ubuntu/KVM.

## Built on OpenStack
- **OpenStack Components:**
  - Nova (Compute Services)
  - Swift (Object Storage Services)
  - Cinder (Block Storage Services)
  - Neutron (Networking Services)
  - Keystone (Identity Services)
  - Glance (Image/Repository Services)
  - Horizon (Dashboard)

## VIRL OVA Delivery
- Custom Ubuntu OVA for ESXi and VMWare Workstation Player.

## VIRL ISO Delivery
- Custom Ubuntu ISO for installation.

## VIRL Components (ESXi Version)
- **Browser, VM Maestro, Your Laptop, VIRL VM, ESXi Host IP Address, VIRL Server IP Address, Internet, TCP Ports 4505 & 4506, Every 7 Days, VIRL UWM, VIRL STD, VMWare ESXi.**
- **Minimum Hardware Requirements:**
  - Quad-core Intel processor.
  - 8 GB RAM.
  - 70 GB datastore.

## VIRL Components (Workstation 12.0 Player Version)
- **Browser, VM Maestro, Your Laptop, VIRL VM, VIRL Server IP Address, Internet, TCP Ports 4505 & 4506, Every 7 Days, VIRL UWM, VIRL STD, VMWare Workstation 12.0 Player.**
- **Minimum Hardware Requirements:**
  - Quad-core processor.
  - 8 GB RAM.
  - 70 GB datastore.

## VIRL Installation
1. **Purchase VIRL.**
2. **Install ESXi or VMWare Workstation Player.**
3. **Create VIRL Network Port-Groups (Optional).**
4. **Deploy the VIRL OVA.**
5. **Adjust VIRL VM Resources (Optional).**
6. **Configure Static IP (Optional).**
7. **Configure Internet Proxies (Optional).**
8. **Prepare VIRL for Activation (Optional).**
9. **Activate VIRL.**
10. **Customize VIRL Config (Optional).**
11. **Validate VIRL Installation (Optional).**
12. **Install and Configure VM Maestro.**

### Step 1: Obtain VIRL
- **Hardware Requirements:**
  - Four CPU cores.
  - Minimum 8 GB DRAM (12 GB for 20 nodes, 15 GB for 30 nodes).
  - Internet access on TCP ports 4505 & 4506.
  - Virtualization extensions (Intel VT-x/EPT or AMD-V/RVI) enabled in BIOS.
  - 70 GB of free disk space.
- **Visit the "GetVIRL" website:**
  - http://virl.cisco.com/getvirl/
  - Pricing:
    - Personal Edition 20 nodes: $199.99/yr
    - Personal Edition 30 nodes: $299.99/yr
    - Academic Edition 20 nodes: $79.99/yr (limited to faculty, staff, and students of K-12 or higher education institutions).

### Step 2: Install VMware on Target Machine
- **Supported VMware versions:**
  - ESXi 5.1U2, 5.5U1, 6.0.
  - VM Workstation 12.0 Player.
- **Assumed VMware experience:**
  - If no experience, install VM Workstation 12.0 Player and experiment with creating, configuring, and managing virtual machines.

### Step 3: Create VIRL Network Port-Groups
- **See it done:**
  - http://virl-dev-innovate.cisco.com/video.lb/vdbplayer.swf?volume=100&url=video/client.networking.mp4

### Step 4: Deploy the VIRL OVA
- Follow the instructions provided.

### Step 5: Adjust VIRL VM Resources (Optional)
- **Navigate to VM manifest in vSphere Client.**
- **Right-click on the VIRL VM and select 'Edit Settings'.**
- **Adjust memory and number of vCPUs.**
- **Select 'Resources' tab and enable 'Reserve all guest memory (All locked)'.**

### Step 6: Configure Static IP (Optional)
- **Connect to VM Console and double-click xterm.**
- **Edit interface:**
  ```sh
  sudo nano /etc/network/interfaces
  iface eth0 inet static
  address n.n.n.n
  netmask mmm.mmm.mmm.mmm
  gateway g.g.g.g
  dns-nameservers a.a.a.a b.b.b.b
  ```
- **Exit xterm and reboot:**
  ```sh
  Control-X, Enter ‘Y’ to save.
  sudo reboot now
  ```

### Step 7: Configure Internet Proxies (Optional)
- **If proxies are in use, edit “.bashrc” and “apt.conf” using xterm.**
- **Example “.bashrc” changes:**
  ```sh
  export http_proxy=http://proxy.domain.tld:port/
  export https_proxy=http://proxy.domain.tld:port/
  export HTTP_PROXY=$http_proxy
  export HTTPS_PROXY=$https_proxy
  ```
- **Example “.apt-conf” changes:**
  ```sh
  Acquire::http::proxy "proxy.domain. ld:port/"
  ```

### Step 8: Prepare VIRL for Activation (Optional)
- **Login to VIRL VM Console via vSphere.**
- **Launch xterm and perform the following steps:**
  - Reset SSH server’s RSA key (if not installing from OVA).
  - Confirm KVM acceleration can be used.
  - Confirm internet connectivity.
  - Confirm NTP peering is established (debug and correct if not, following the provided instructions).

This optimized version aims to make the content more clear, coherent, and professional.