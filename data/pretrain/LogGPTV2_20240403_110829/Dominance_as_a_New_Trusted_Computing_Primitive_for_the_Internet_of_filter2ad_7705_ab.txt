results can be accessed through web interfaces [35].
Trafﬁc monitoring and control system. Trafﬁc cameras
and other trafﬁc sensors have been deployed in many cities.
The cameras may (or may not) process the images to infer
trafﬁc density, trafﬁc jams or accidents. The raw or processed
sensor data are sent to the hub which gathers and stores the
sensor data and can run various analytics jobs. This can enable
applications in which the hub computes trafﬁc light settings
that optimize global trafﬁc ﬂows and sends these settings to
internet-connected trafﬁc lights [36].
Remote elevator inspection. The devices are microcontrollers
in elevators. In addition to running the elevators, the devices
periodically gather readings from various sensors and send
them to the hub. The hub can run various analytics jobs to
identify elevators that may need a more thorough inspection
by maintenance personnel [37].
Discussion of examples. At one extreme, pure sensor devices
simply read the current values from peripheral sensors (e.g.,
air quality sensors) and send them directly to the hub. In the
absence of an internet connection, these devices are useless.
At the other extreme are hybrid devices such as the elevator
controller that have IoT functions (e.g., sending diagnostics
information to the hub) in addition to operational functions
(e.g., running the elevator).
B. Building Blocks
This section provides background on components that we
use to build CIDER.
Latches. A hardware latch is a simple state machine with
only two states: {open, locked}. Its initial state is open and
software can cause it to transit into the locked state (e.g., by
writing to a hardware register). However, only a device reset
will cause the latch to transition back into the open state. Each
latch has an associated security function which is enabled if
and only if the latch is in the locked state. We are interested
in two types of latches that operate on persistent storage:
• A read-write latch (RWLatch) that once applied, blocks
any read or write access to one or more storage regions.
• A write latch (WRLatch) that once applied, blocks any
write access to one or more storage regions (read access
is allowed).
CIDER uses RWLatches to protect per-device secrets and
WRLatches to protect its code against unauthorized modiﬁca-
tion or deletion.
Orderly reset. CIDER requires that device reset and power-on
provide a clean-state environment in which early boot code can
execute deterministically, regardless of the actions of software
that was running prior to the reset. We assume this behavior
for CPUs. However, if a CPU is embedded in a platform with
additional active devices (e.g., devices that can bus-master or
reset the main CPU), then these devices must also be reset
when the main CPU is reset. The resets of latched devices
must be tightly coupled to resets of the main CPU.
Attestation. Attestation in CIDER is based on the Device
Identiﬁer Composition Engine (DICE) [38]. DICE supports
device identity and attestation requiring only minimal hardware
support. To support DICE, a device must be equipped with a
256-bit unique per-device secret—KPLATFORM—which must
be read-latchable. Trusted early-boot code uses this secret to
enable untrusted code that may run subsequently to perform
attestations. The hardware requirements of DICE are far simpler
than those of alternatives such as TPM-based attestation.
In a nutshell, DICE code running during early boot reads
KPLATFORM and then latches it so that it becomes inaccessible
to later software. DICE then uses a deterministic key-generation
algorithm to create two asymmetric key pairs: the DeviceID
key pair and the Alias key pair.
The DeviceID key pair is derived solely from KPLATFORM
and remains the same for the life of the device. The Alias key
pair is derived from KPLATFORM and the hash of the device
ﬁrmware. Thus, the Alias key pair will change if the ﬁrmware
is updated. DICE uses the DeviceID private key to certify the
Alias public key and the hash of the device ﬁrmware. Before
passing control to the ﬁrmware, DICE deletes KPLATFORM
and the DeviceID private key from RAM and registers, but
passes the Alias private key and the Alias public key certiﬁcate
on to the ﬁrmware. The ﬁrmware can use these keys to make
attestation claims to a server by signing a server-generated
nonce.
Entropy source. We require a source of entropy such as a
true random number generator (TRNG) in order to generate
nonces that an adversary cannot predict.
(cid:18)(cid:21)(cid:18)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:35 UTC from IEEE Xplore.  Restrictions apply. 
III. ADVERSARY MODEL
We model a realistic and powerful remote attacker who
tries to hack into the devices taking advantage of ﬁrmware
vulnerabilities or conﬁguration errors such as weak passwords.
Attacks requiring physical access or proximity lie outside the
scope of this paper, as we focus on scalable attacks.
The device ﬁrmware, while originally benign, is subject to
exploitation by the adversary, resulting in the device executing
the adversary’s code. The adversary’s capabilities are only
restricted by the properties of the hardware which we assume
to work correctly (i.e., according to speciﬁcation). For example,
the adversary is neither able to overwrite early boot code
in Read-Only Memory (ROM) nor revert hardware latches
without device resets. In addition, we assume that at least a
critical subset of the CIDER code works correctly and is free
of vulnerabilities. With a focus on device security, we assume
the hub is trusted and secure. Securing the hub is out of this
paper’s scope.
The adversary may also attempt to eavesdrop on, tamper
with or block the communications between devices and the hub
with the goal of obtaining sensitive information, controlling the
devices indirectly and preventing the hub from controlling or
recovering devices, respectively. However, we assume that the
adversary cannot block the communication indeﬁnitely because
long-lasting attacks can typically be detected and remediated
by network operators. Symantec observed during Q3 of 2015
that less than one percent of network layer DDoS attacks lasted
more than 24 hours [39].
A. Problem Statement
Our goal is to enable the hub to unconditionally recover
control of all managed devices even after a complete com-
promise of the device ﬁrmware: a property commonly called
availability. With control recovered, the hub may subsequently
issue ﬁrmware updates to patch the vulnerability or change the
security settings that led to the exploit and evict the adversary
from the device. It may further request evidence from the
device that the updates have been applied correctly.
Control recovery is challenging because an attacker may
execute his/her code at the highest privilege and refuse to
cooperate with the hub. However, once this challenge is solved,
the security beneﬁt of control recovery can be ampliﬁed by
what the hub can do after regaining control.
Recovery from a complete software compromise inevitably
requires hardware features or even new hardware constructs.
For the sake of practicality, the hardware features we rely
on must be either readily available on popular IoT devices
or easy to obtain and integrate. More precisely, our design
must be implementable on existing, unmodiﬁed mass market
chips (i.e., microcontrollers, storage), as it is very hard to
achieve broad adoption of custom chip designs. In contrast,
modiﬁcations or extensions at the board level are much easier
to implement and mass deploy. Many IoT boards have various
hardware extension interfaces precisely to allow the user to
attach additional hardware to the board. We take advantage of
this option in a variety of ways.
In addition, any security mechanism we introduce should not
signiﬁcantly interfere with the functionality and performance
of the existing ﬁrmware. We also should neither change the
deployment model (e.g., increasing manual effort) nor require
hardware that would signiﬁcantly increase the cost of the
devices.
IV. DESIGN
In this section, we deﬁne dominance and identify two simpler
primitives, gated boot and a reset trigger, that are sufﬁcient to
implement it. We present a simple secure design that achieves
dominance but has several usability problems. The next section
will describe the complete CIDER design which resolves these
problems.
A. Deﬁning Dominance
Deﬁnition. The hub dominates a device if the hub can choose
arbitrary code and force the device to run it within a bounded
amount of time.
In the example of a smart trafﬁc control system [36], the
bounded amount of time might be 1 hour, and the arbitrary
code can either be the patched ﬁrmware with vulnerabilities
ﬁxed or a temporary operation routine (e.g., ﬂashing red lights).
We decompose dominance into two simpler but related
components, gated boot and reset trigger, each designed to
address one functional requirement.
Gated boot. Gated boot ensures that the device will boot
ﬁrmware that is authorized by the hub at that time. If, no
such ﬁrmware is on the device at boot time (e.g., because the
hub demands a newer version of the ﬁrmware or because the
ﬁrmware was compromised), gated boot will ﬁrst obtain and
install an acceptable ﬁrmware version on the device before
booting into it.
Reset trigger. After gated boot, the ﬁrmware has complete
control over the device (subject only to hardware constraints).
As the ﬁrmware was chosen by the hub, it can, in general,
cooperate in performing regular maintenance tasks such as
installing ﬁrmware updates requested by the hub. However, if
the device is taken over by an attacker, this will not be the case.
In order to prevent the attacker’s code from running on the
device indeﬁnitely, the hub needs a mechanism to force a device
reset (i.e., a reset trigger). This will preempt the ﬁrmware and
invoke gated boot, which can examine and update the ﬁrmware
as requested by the hub.
B. Security Primitives and Protocols
CIDER uses cryptography to provide communications secu-
rity and endpoint authentication and attestation. The essential
security building-blocks and protocols are described in this
section.
Hub authentication. A hub public key is installed in
the device during initial provisioning, and devices perform
signature veriﬁcation to ensure that messages from the hub are
authentic.
Device authentication and attestation. CIDER devices
are furnished with globally unique DICE secrets (i.e.,
(cid:18)(cid:21)(cid:18)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:35 UTC from IEEE Xplore.  Restrictions apply. 
Patch Installer
Patch Downloader
No
Reset
DICE/
RWLatch
Networking
Firmware Valid
Yes
Timeout
Firmware
Reset Trigger
WRLatch
Fig. 1: An overview of a simple dominance design. The ﬁrmware
cannot compromise the conﬁdentiality and integrity of the system.
However, this design has usability problems (frequent resets) and large
attack surface (exposed networking stack). The improved, complete
CIDER design is presented in Figure 2.
KPLATFORM). The hub stores the derived DeviceID public
key for each device during provisioning. This allows CIDER
devices to authenticate themselves using their Alias key pairs
and Alias key certiﬁcates.
Replay protection. CIDER protects all relevant hub-to-device
and device-to-hub messages from replay attacks using nonces.
C. A Simple Dominance Scheme
Figure 1 displays a dominance scheme designed to be as
simple as possible. However, it is a secure design under our
threat model (§III) and protects itself from the ﬁrmware with
the necessary hardware features.
Gated boot. Gated boot is implemented in the software that
runs immediately after a reset. Some devices are hardwired to
run small amounts of code in ROM ﬁrst. In those cases, the
gated boot code runs immediately after the ROM code.
The ﬁrst task of gated boot is to run DICE to derive
the DeviceID and Alias key pairs. This includes applying a
RWLatch such that any attempts to read or write KPLATFORM
will be blocked until the next device reset. The next step is to
ascertain if the hub authorizes the ﬁrmware that is currently on
the device to run. Gated boot computes a cryptographic digest
of the ﬁrmware’s initial binary (digest), requests a nonce from
the hub and sends  signed by the DeviceID
private key to the hub. While this only ensures the integrity
of the initial binary, ﬁrmware features such as dm-verity [40]
can extend integrity assurances to large parts of the ﬁrmware.
If the hub approves the received ﬁrmware digest, it replies
with  signed by the hub private key. Upon
receiving the OK message, gated boot secures the device before
transferring control to the ﬁrmware. In particular, it sets the
WRLatch for the parts of storage where CIDER’s code and
data reside and enables the reset trigger which guarantees
that CIDER will regain control within a bounded time interval.
With these hardware protections enabled, gated boot loads the
ﬁrmware’s initial binary and transfers control to it.
If the hub does not approve the ﬁrmware, it replies with
 (signed by its private key), and gated boot
will ﬁrst download the ﬁrmware update from the hub according
to the patch-id and use it to replace the old ﬁrmware on
storage. In both cases, the net effect of gated boot is that the
device will boot a ﬁrmware image that is approved by the hub.
This behavior differs from prior work. Secure boot [41] will
not boot at all if the ﬁrmware is unexpected. Authenticated
boot [42] will boot any ﬁrmware and simply report to the hub
what that ﬁrmware was.
Reset trigger. The simplest form of a reset trigger is a very
simple timer that is akin to many existing watchdog timers.
Once the timer is set, it cannot be disabled or deferred. When
it expires, it resets the platform (unless the platform resets
itself before that). The reset will invoke gated boot again.
D. Limitations
This simple design has several limitations which we will
resolve in the next section:
Disruptive resets.
If the reset trigger causes frequent and
uncoordinated device resets, it may interrupt the device during
a critical operation or cause in-memory state to be lost. Many
IoT applications may not be able to tolerate this.
Boot delay. Gated boot adds a network interaction with the
hub to every boot. This adds a noticeable delay.
Networking stack. The gated boot code includes a networking
stack which, being large and exposed to attacks from the
network, is a potential threat to the integrity of the CIDER
TCB.
The next section will present an improved design that avoids
these shortcomings. We will address the third problem by
isolating the networking stack. We will solve the ﬁrst two prob-
lems by making disruptive resets and network interactions at
boot time rare events that should only occur under exceptional