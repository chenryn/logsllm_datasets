## 一、网络通信简介
现代的网络传输介质以以太网链路居多，完整的网络数据报结构大致如下。传输层及其以下的机制由操作系统内核提供，应用层由用户进程提供，应用程序对通讯数据的含义进行解释，而传输层及其以下处理通讯的细节，将数据从一台计算机通过一定的路径发送到另一台计算机。应用层数据通过协议栈发到网络上时，每层协议都要加上一个数据首部（header），称为封装（Encapsulation），如下图所示：  
![http_1](../pictures/http_1.jpg)  
假设现在应用层协议为http，那么其中的Data 可以看作是一个http请求或者应答，Data包含真正的报头和请求正文。
## 二、HTTP 协议简介
HTTP 请求由三部分组成，分别是：请求行、消息报头、请求正文；HTTP 响应也是由三个部分组成，分别是：状态行、消息报头、响应正文，它们之间以CRLF 即 `\r\n` 分割，且报头与正文之间有一个空行。一个常规的HTTP请求如下所示：
```
POST /test.html HTTP/
Accept:image/gif,image/x-xbit
HOST:www.jnu.edu.cn
Content-Length:22
Connection:Keep-Alive 
Cache-Control:no-cache
...
```
具体的一些请求METHOD，请求头的含义，响应码的含义就不多说了，wikipedia都可以查得到。
## 三、Cookie
cookie主要分为session cookie 和 persistent cookie。  
session cookie： 是一种临时的cookie，它记录了用户访问站点时的设置和偏好，关闭浏览器，会话cookie就被删除了。比如我们常见的Session ID
> Examples of the names that some programming languages use when naming their cookie include JSESSIONID (JEE), PHPSESSID (PHP), and ASPSESSIONID (Microsoft ASP)
在某些wap站点会使用一种url重写的技术来进行会话跟踪，即每次HTTP交互，URL 后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。sid 出现在 url 中的情形有个安全隐患是，假设一个站点被引入了一个外部图片，打开这个站点会发起图片的get 请求，而 referer 就是受害站点的 url，由此泄露了 sid。  
persistent cookie：存储在硬盘上（不管浏览器退出，或者电脑重启，持久cookie都存在），持久cookie有过期时间。  
下面是典型的client-server交互过程：
```
client :  
Cookie: name=value; name2=value2               
server:
Set-Cookie: LSID=DQAAAK…Eaem_vYg; Path=/accounts; Expires=Wed, 13 Jan 2021 22:23:01 GMT; Secure; HttpOnly
Set-Cookie: HSID=AYQEVn….DKrdst; Domain=.foo.com; Path=/; Expires=Wed, 13 Jan 2021 22:23:01 GMT; HttpOnly
Set-Cookie: SSID=Ap4P….GTEq; Domain=foo.com; Path=/; Expires=Wed, 13 Jan 2021 22:23:01 GMT; Secure; HttpOnly
```
cookie 无法跨浏览器存在。Domain 和 Path 决定浏览器在访问此站点某目录下的网页时cookie 才会被发送出去（domain 可以设置为父域，但不可设置为子域和外域）。Expires 确定cookie的过期时间，没有过期时间则为session cookie，有则是persistent cookie，过期时间是过去时间点则表示删除cookie。Secure 表示只有通过https 连接才会发送cookie。HttpOnly 表示只有通过http 访问才会发送cookie，比如在客户端执行js: document.cookie 是获取不到cookie的，如果只设置了 Secure 而未设置 httponly，那么还是可以通过 客户端 js 获取到 cookie。  
需要注意的是设置 path 不能防止重要的cookie 被盗取，假设在同域下的b路径存在xss漏洞可以执行js，想盗取a 路径的cookie，只需在 b 路径用 iframe 方式加载 a 路径，获取 a 路径的cookie（iframe 加载的是同域页面，故 b路径的js 可以访问 iframe document 的属性），如下图所示：  
![http_2](../pictures/http_2.jpg)  
前面讲了客户端的cookie 设置，那么服务端一般是如何利用cookie 呢？以Web.py 框架中的一小段代码示例如下：  
```
'cookie_name': 'webpy_session_id' // 定义
self.session_id = web.cookies().get(cookie_name) // server 获取sessionId
self._setcookie(self.session_id) // server 设置Client 的cookie，Set-Cookie 头，即调用下面的函数
web.setcookie(cookie_name, session_id, expires=expires, domain=cookie_domain, httponly=httponly, secure=secure, path=cookie_path)
self.store[self.session_id] = dict(self._data) // server 端存储session_id 相关的用户数据
```
即可以认为客户端发送过来的Cookie 头中的某个key-value，此 value 作为服务器端的一个索引，索引到的数据中存储着此用户相关的一系列数据，具体的存储方式可以是内存、数据库、文本等。当客户端的cookie 过期时，此时服务器却是不知道的，故服务器可能会设置一个过期时间，当距离客户端上一次使用session的时间超过这个失效时间时，服务器就可以认为客户端已经停止了活动，才会把这个session删除以节省存储空间。
## 四、URL的构成
url 即我们平时所说的链接，通过它可以找到唯一的资源，格式如下： ```://?#```
需要注意的是，frag 即我们口中的锚是不会传递到后端服务器的，它是一种前端行为，即定位到页面某个位置的功能。
现在常见的参数格式除了最原始的 /path/aa.html?a=1&b=2；还有 restful 的 /page/1/id/2011 即 传入的参数是 page=1&id=2011；
此外还有 rewrite，比如 /path/2015/a(a : 1--100)/b(b: 10--20) 对应后端的cgi 可能是 /path/c.cgi?p=a&q=b；一些 MVC 框架的 cgi 可能需要根据某个参数的值选择不同的逻辑分支，比如 a.cgi?_path=/gdata/6/data&id=5，映射到一个类；还有一种是参数直接跟在uri后面的，如 http://aa.qq.com/m/index/nav/type=bus&cond=3 ， 可以理解为 /m/{module}/{action}/{query_list}，
module 和 action 可以不断对请求进行路由，逐级分发到不同的模块，最终query_list是使用常规的webserver解析方式。
桌面应用程序也通过HTTP协议跟Web服务器交互， 桌面应用程序一般不会使用cookie, 而是把 "用户名+冒号+密码"用BASE64 编码的字符串放在http request 中的header Authorization 中发送给服务端， 这种方式叫HTTP基本认证(Basic Authentication)，在浏览器里可以用 ```http://username:password@url``` 这种方式直接略过这个基本认证，对于某些漏洞来说，这也是个绕过姿势。
这里涉及到了HTTP 状态码 401 与 403的不同之处。401 表示没有认证，而403 表示没有授权，认证的目的是为了认出用户是谁，而授权的目的是为了决定用户能够做什么。  
401 的限制一般可以在某个目录下的 .htaccess 文件(apache)写上
```
AuthName "frank share web" 
AuthType Basic 
AuthUserFile /var/www/test/.htpasswd
require valid-user
```
且 httpd.conf 中对于此目录中的设置中 加上 ```AllowOverride AuthConfig``` 表示进行身份验证。  
有时候访问出现403 forbidden ，有种原因是 apache 设置的user，即运行httpd的user 是nobody（假设），对你想要访问的目
录/文件 没有读或者执行的权限，所以server 没办法读取执行文件，故 禁止访问。还有种情况是配置文件写明 deny xxx，禁止某些来源ip 访问，或者禁止访问某些目录、某种后缀的文件。比如我们直接访问某个目录，此目录下有 index.html 之类的默认文件，则访问到它，如果没有则正常是提示access forbidden，若此时把此目录下的文件都列出来了，就是个目录列举漏洞了。
## 五、四种常见的 POST 提交数据方式
1.**application/x-www-form-urlencoded**  
这应该是最常见的 POST 提交数据的方式了。浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据，请求类似于下面这样（无关的请求头在本文中都省略掉了）：
```
POST http://www.example.com HTTP/1.1 
Content-Type: application/x-www-form-urlencoded;charset=utf-8 
title=test&sub%5B%5D=1&sub%5B%5D=2&sub%5B%5D=3
```
2.**multipart/form-data**  
这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例：
```
POST http://www.example.com HTTP/1.1
Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA
------WebKitFormBoundaryrGKCBY7qhFd3TrwA
Content-Disposition: form-data; name="text"
title
------WebKitFormBoundaryrGKCBY7qhFd3TrwA
Content-Disposition: form-data; name="file"; filename="chrome.png"
Content-Type: image/png
... content of chrome.png ...
------WebKitFormBoundaryrGKCBY7qhFd3TrwA--
```
这个例子稍微复杂点。首先生成了一个 boundary 用于分割不同的字段，为了避免与正文内容重复，boundary 很长很复杂。然后 Content-Type 里指明了数据是以 mutipart/form-data 来编码，本次请求的 boundary 是什么内容。消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 --boundary 开始，紧接着内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息，消息主体最后以 --boundary-- 标示结束。
注意： post body 里面的 boundary 前缀 - 长度比 content-type 里的多 2个；如 post body 里面的"title" 文本位置也是xss or sql注入等 payload 可以 append/replace 的地方；甚至 filename 的值可以填充xss/sql 用例，如果网站直接把上传后的文件名显示出来，也存在xss 漏洞，或者把 filename 没有过滤就带入 sql 查询也存在 sql 注入漏洞。
假设同时上传两个文件，则格式略有区别，如下：
```
  Content-type: multipart/form-data, boundary=AaB03x
  --AaB03x
  content-disposition: form-data; name="field1"
  Joe Blow
  --AaB03x