title:kGuard: Lightweight Kernel Protection against Return-to-User Attacks
author:Vasileios P. Kemerlis and
Georgios Portokalidis and
Angelos D. Keromytis
kGuard: Lightweight Kernel Protection against Return-to-user Attacks
Vasileios P. Kemerlis
Georgios Portokalidis
Network Security Lab
Angelos D. Keromytis
Department of Computer Science
Columbia University, New York, NY, USA
{vpk, porto, angelos}@cs.columbia.edu
Abstract
Return-to-user (ret2usr) attacks exploit the operating sys-
tem kernel, enabling local users to hijack privileged ex-
ecution paths and execute arbitrary code with elevated
privileges. Current defenses have proven to be inade-
quate, as they have been repeatedly circumvented, in-
cur considerable overhead, or rely on extended hypervi-
sors and special hardware features. We present kGuard,
a compiler plugin that augments the kernel with com-
pact inline guards, which prevent ret2usr with low per-
formance and space overhead. kGuard can be used with
any operating system that features a weak separation be-
tween kernel and user space, requires no modiﬁcations
to the OS, and is applicable to both 32- and 64-bit ar-
chitectures. Our evaluation demonstrates that Linux ker-
nels compiled with kGuard become impervious to a va-
riety of control-ﬂow hijacking exploits. kGuard exhibits
lower overhead than previous work, imposing on average
an overhead of 11.4% on system call and I/O latency on
x86 OSs, and 10.3% on x86-64. The size of a kGuard-
protected kernel grows between 3.5% and 5.6%, due to
the inserted checks, while the impact on real-life appli-
cations is minimal (≤1%).
1 Introduction
The operating system (OS) kernel is becoming an in-
creasingly attractive target for attackers [30, 60, 61, 64].
Due to the weak separation between user and kernel
space, direct transitions from more to less privileged pro-
tection domains (e.g., kernel to user space) are permissi-
ble, even though the reverse is not. As a result, bugs
like NULL pointer dereferences that would otherwise
cause only system instability, become serious vulnera-
bilities that facilitate privilege escalation attacks [64].
When successful, these attacks enable local users to ex-
ecute arbitrary code with kernel privileges, by redirect-
ing the control ﬂow of the kernel to a user process.
Such return-to-user (ret2usr) attacks have affected all
major OSs, including Windows [60], Linux [16, 18],
and FreeBSD [19, 59, 61], while they are not limited to
x86 systems [23], but have also targeted the ARM [30],
DEC [31], and PowerPC [25] architectures.
There are numerous reasons to why attacks against the
kernel are becoming more common. First and foremost,
processes running with administrative privileges have be-
come harder to exploit due to the various defense mech-
anisms adopted by modern OSs [34, 52]. Second, NULL
pointer dereference errors had not received signiﬁcant at-
tention, until recently, exactly because they were thought
impractical and too difﬁcult to exploit. In fact, 2009 has
been proclaimed, by some security researchers, as “the
year of the kernel NULL pointer dereference ﬂaw” [15].
Third, exploiting kernel bugs, besides earning attack-
ers administrative privileges, enables them to mask their
presence on compromised systems [6].
Previous approaches to the problem are either im-
practical for deployment in certain environments or can
be easily circumvented. The most popular approach
has been to disallow user processes to memory-map the
lower part of their address space (i.e., the one including
page zero). Unfortunately, this scheme has been circum-
vented by various means [21, 66] and is not backwards
compatible [35]. The PaX [52] patch for x86 and x86-64
Linux kernels does not exhibit the same shortcomings,
but greatly increases system call and I/O latency, espe-
cially on 64-bit systems.
Recent advances in virtualization have fostered a
wave of research on extending virtual machine moni-
tors (VMMs) to enforce the integrity of the virtualized
guest kernels. SecVisor [62] and NICKLE [56] are two
hypervisor-based systems that can prevent ret2usr attacks
by leveraging memory virtualization and VMM intro-
spection. However, virtualization is not always practi-
cal. Consider smartphone devices that use stripped-down
versions of Linux and Windows, which are also vulnera-
ble to such attacks [30]. Running a complex VMM, like
SecVisor, on current smartphones is not realistic due to
their limited resources (i.e., CPU and battery life). On
PCs, running the whole OS over a VM incurs perfor-
mance penalties and management costs, while increas-
ing the complexity and size of a VMM can introduce
new bugs and vulnerabilities [44, 58, 71]. To address the
latter, we have seen proposals for smaller and less error-
prone hypervisors [65], as well as hypervisor protection
solutions [4, 67]. The ﬁrst exclude mechanisms such as
SecVisor, while the second add further complexity and
overhead, and lead to a “turtles all the way down” prob-
lem,1 by introducing yet another software layer to protect
the layers above it. Addressing the problem in hardware
would be the most efﬁcient solution, but even though In-
tel has recently announced a new CPU feature, named
SMEP [37], to thwart such attacks, hardware extensions
are oftentimes adopted slowly by OSs. Note that other
vendors have not publicly announced similar extensions.
We present a lightweight solution to the problem.
kGuard is a compiler plugin that augments kernel code
with control-ﬂow assertions (CFAs), which ensure that
privileged execution remains within its valid boundaries
and does not cross to user space. This is achieved by
identifying all indirect control transfers during compi-
lation, and injecting compact dynamic checks to attest
that the kernel remains conﬁned. When a violation is de-
tected, the system is halted by default, while a custom
fault handler can also be speciﬁed. kGuard is able to
protect against attacks that overwrite a branch target to
directly transfer control to user space [23], while it also
handles more elaborate, two-step attacks that overwrite
data pointers to point to user-controlled memory, and
hence hijack execution via tampered data structures [20].
Finally, we introduce two novel code diversiﬁcation
techniques to protect against attacks that employ by-
pass trampolines to avoid detection by kGuard. A tram-
poline is essentially an indirect branch instruction con-
tained within the kernel. If an attacker manages to ob-
tain the address of such an instruction and can also con-
trol its operand, he can use it to bypass our checks. Our
techniques randomize the locations of the CFA-indirect
branch pairs, both during compilation and at runtime,
signiﬁcantly reducing the attackers’ chances of guessing
their location. The main contributions of this paper can
be summarized in the following:
• We present
the design and implementation of
kGuard, a compiler plugin that protects the kernel
from ret2usr attacks by injecting ﬁne-grained in-
line guards during compilation. Our approach does
not require modiﬁcations to the kernel or additional
software, such as a VMM. It is also architecture in-
1http://en.wikipedia.org/wiki/
Turtles_all_the_way_down
dependent by design, allowing us to compile OSs
for different target architectures and requires little
modiﬁcations for supporting new OSs.
• We introduce two code diversiﬁcation techniques
to randomize the location of indirect branches, and
their associated checks, for thwarting elaborate ex-
ploits that employ bypass trampolines.
• We implement kGuard as a GCC extension, which
is freely available.
Its maintenance cost is low
and can successfully compile functional x86/x86-
64 Linux and FreeBSD kernels. More importantly,
it can be easily combined with other compiler-based
protection mechanisms and tools.
• We assess the effectiveness of kGuard using real
privilege escalation attacks against 32- and 64-bit
Linux kernels. In all cases, kGuard was able to suc-
cessfully detect and prevent the respective exploit.
• We evaluate the performance of kGuard using a set
of macro- and micro-benchmarks. Our technique
incurs minimal runtime overhead on both x86 and
x86-64 architectures. Particularly, we show negligi-
ble impact on real-life applications, and an average
overhead of 11.4% on system call and I/O latency
on x86 Linux, and 10.3% on x86-64. The space
overhead of kGuard due to the instrumentation is
between 3.5% – 5.6%, while build time increases
by 0.05% to 0.3%.
kGuard is to some extent related to previous research
on control-ﬂow integrity (CFI) [2]. Similar to CFI,
we rely on inline checks injected before every unsafe
control-ﬂow transfer. Nevertheless, CFI depends on a
precomputed control-ﬂow graph for determining the per-
missible targets of every indirect branch, and uses binary
rewriting to inject labels and checks in binaries.
CFI is not effective against ret2usr attacks.
Its in-
tegrity is only guaranteed if the attacker cannot overwrite
the code of the protected binary or execute data. Dur-
ing a ret2usr attack, the adversary completely controls
user space memory, both in terms of contents and rights,
and hence, can subvert CFI by prepending his shellcode
with the respective label. Additionally, CFI induces con-
siderable performance overhead, thereby making it difﬁ-
cult to adopt. Ongoing work tries to overcome the lim-
itations of the technique [72]. kGuard can be viewed
as a lightweight variant of CFI and Program Shepherd-
ing [43] that is more suitable and efﬁcient in protecting
kernel code from ret2usr threats.
The rest of this paper is organized as follows. In Sec-
tion 2, we look at how ret2usr attacks work and why
the current protection schemes are insufﬁcient. Section 3
presents kGuard. We discuss the implementation of the
kGuard GCC plugin in Section 4, and evaluate its effec-
tiveness and performance in Section 5. Section 6 dis-
cusses possible extensions. Related work is in Section 7
and conclusions in Section 8.
2 Overview of ret2usr Attacks
2.1 Why Do They Work?
Commodity OSs offer process isolation through private,
hardware-enforced virtual address spaces. However, as
they strive to squeeze more performance out of the hard-
ware, they adopt a “shared” process/kernel model for
minimizing the overhead of operations that cross protec-
tion domains, like system calls. Speciﬁcally, Unix-like
OSs divide virtual memory into user and kernel space.
The former hosts user processes, while the latter holds
the kernel, device drivers, and kernel extensions (inter-
ested readers are referred to Figure 5, in the appendix,
for more information regarding the virtual memory lay-
out of kernel and user space in Linux).
Since code running in user
In most CPU architectures, the segregation of the two
spaces is assisted and enforced by two hardware features.
The ﬁrst is known as protection rings or CPU modes,
and the second is the memory management unit (MMU).
The x86/x86-64 CPU architecture supports four protec-
tion rings, with the kernel running in the most privileged
one (ring 0) and user applications in the least privileged
(ring 3).2 Similarly, the PowerPC platform supports two
CPU modes, SPARC and MIPS three, and ARM seven.
All these architectures also feature a MMU, which im-
plements virtual memory and ensures that memory as-
signed to a ring is not accessible by less privileged ones.
space cannot di-
rectly access or jump into the kernel, speciﬁc hard-
ware facilities (i.e., interrupts) or special instructions
(e.g., SYS{ENTER,CALL} and SYS{EXIT,RET} in
x86/x86-64) are provided for crossing the user/kernel
boundary. Nevertheless, while executing kernel code,
complete and unrestricted access to all memory and sys-
tem objects is available. For example, when servicing a
system call for a process, the kernel has to directly access
user memory for storing the results of the call. Hence,
when kernel code is abused, it can jump into user space
and execute arbitrary code with kernel privileges. Note
that although some OSs have completely separated ker-
nel and user spaces, such as the 32-bit XNU and Linux
running on UltraSPARC, most popular platforms use a
shared layout. In fact, on MIPS the shared address space
is mandated by the hardware.
As a consequence, software bugs that are only a source
of instability in user space, like NULL pointer derefer-
ences, can have more dire effects when located in the
kernel. Spengler [64] demonstrated such an attack by
exploiting a NULL pointer dereference bug, triggered by
the invocation a system call with specially crafted param-
eters. Earlier, it was generally thought that such ﬂaws
could only be used to perform denial-of-service (DoS)
attacks [29], but Spengler’s exploit showed that mapping
code segments with different privileges inside the same
scope can be exploited to execute arbitrary user code
with kernel privileges. Note that SELinux [47], the hard-
ened version of the Linux kernel, is also vulnerable to
this attack.
2.2 How Do They Work?
ret2usr attacks are manifested by overwriting kernel-
level control data (e.g., return addresses, jump tables,
function pointers) with user space addresses.
In early
versions of such exploits, this was accomplished by in-
voking a system call with carefully crafted arguments to
nullify a function pointer. When the null function pointer
is eventually dereferenced, control is transferred to ad-
dress zero that resides in user space. Commonly, that ad-
dress is not used by processes and is unmapped.3 How-
ever, if the attacker has local access to the system, he
can build a program with arbitrary data or code mapped
at address zero (or any other address in his program for
that matter). Notice that since the attacker controls the
program, its memory pages can be mapped both writable
and executable (i.e., W∧X anti-measures do not apply).
736 s o c k
737 f l a g s = ! ( f i l e −> f _ f l a g s & O_NONBLOCK) ? \
738
739 i f
740
741 / ∗ [ ! ] NULL p o i n t e r d e r e f e r e n c e
742 r e t u r n sock −>ops−>s e n d p a g e ( sock , page , o f f s e t ,
743
= f i l e −> p r i v a t e _ d a t a ;
0 : MSG_DONTWAIT ;
f l a g s
| = MSG_MORE;
( s e n d p a g e )
[ ! ] ∗ /
( more )
s i z e ,
f l a g s ) ;
Snippet 1: NULL function pointer in Linux (net/socket.c)
Snippet 1 presents a straightforward NULL function
pointer vulnerability [17] that affected all Linux kernel
versions released between May 2001 and August 2009
(2.4.4/2.6.0 – 2.4.37/2.6.30.4).
In this exploit, if the
sendfile system call is invoked with a socket descrip-
tor belonging to a vulnerable protocol family, the value
of the sendpage pointer in line 742 is set to NULL.
This results in an indirect function call to address zero,
which can be exploited by attackers to execute arbitrary
code with kernel privileges. A more detailed analysis of
this attack is presented in Appendix A.
2Some x86/x86-64 CPUs have more than four rings. Hardware-
assisted virtualization is colloquially known as ring -1, while System
Management Mode (SMM) is supposedly at ring -2.
3In Linux accessing an unmapped page, when running in kernel
mode, results into a kernel oops and subsequently causes the OS to kill
the offending process. Other OSs fail-stop with a kernel panic.
1333 / ∗ [ ! ] NULL p o i n t e r d e r e f e r e n c e
1334 i b u f −>ops−> g e t ( i p i p e ,
1335 o b u f
1336 ∗ o b u f = ∗ i b u f ;
i b u f ) ;
= o p i p e −> b u f s + n b u f ;
( o p s )
[ ! ] ∗ /
Snippet 2: NULL data pointer in Linux (fs/splice.c)
Snippet 2 shows the Linux kernel bug exploited by
Spengler [64], which is more elaborate. The ops ﬁeld
in line 1334, which is a data pointer of type struct
pipe_buf_operations, becomes NULL after the
invocation of the tee system call. Upon dereferencing
ops, the effective address of a function is read via get,
which is mapped to the seventh double word (assuming
an x86 32-bit architecture) after the address pointed by
ops (i.e., due to the deﬁnition of the structure). Hence,
the kernel reads the branch target from 0x0000001C,
which is controlled by the user. This enables an attacker
to redirect the kernel to an arbitrary address.
NULL pointer dereferences are not the only attack
vector for ret2usr exploits. Attackers can partially cor-
rupt, or completely overwrite with user space addresses,
kernel-level control data, after exploiting memory safety
bugs. Examples of common targets include, return ad-
dresses, global dispatch tables, and function pointers
stored in kernel stack and heap. In addition, other vulner-
abilities allow attackers to corrupt arbitrary kernel mem-
ory, and consequently any function or data pointer, due
to the improper sanitization of user arguments [22, 23].
Use-after-free vulnerabilities due to race conditions in
FreeBSD 6.x/7.x and Linux kernels before 2.6.32-rc6
have also been used for the same purpose [19, 20]. These
ﬂaws are more complex and require multiple simulta-
neous kernel entrances to trigger the bug. Once they
succeed, the attacker can corrupt a pointer to a critical
kernel data structure that grants him complete control
over its contents by mapping a tampered data structure at
user space memory. If the structure contains a function
pointer, the attacker can achieve user code execution.
The end effect of all these attacks is that the ker-
nel is hijacked and control is redirected to user space
code. Throughout the rest of this paper, we will refer