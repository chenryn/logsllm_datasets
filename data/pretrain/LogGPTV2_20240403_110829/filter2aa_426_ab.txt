APIs
Node.js APIs
Node.js 
APIs
DOM APIs
IPC
channels
The most basic Electron app, simply loading an HTML page, would thus look like this (saved as main.js):
const { app, BrowserWindow } = require('electron');
function createWindow() {
const window = new BrowserWindow();
window.loadFile('index.html');
}
app.on('ready', createWindow);
This provides no more features than a browser, though. Electron’s main advantage is in being able to
access the user’s computer from the app which isn’t possible from a website in a browser. Most trivially,
this can be done using Node integration which allows using all Node.js APIs directly from the JavaScript
of the page. Consider the following example (saved as index.html) of a minimal note taking application
that automatically saves the entered notes to the user’s disk:
This example now makes use of the Node integration feature to access Node.js’ fs module to write to
2.2. A Basic App
10
the file system. Note that depending on the version, Node integration needs to be enabled through the
webPreferences option of the BrowserWindow first like so:
const window = new BrowserWindow({
webPreferences: {
nodeIntegration: true
}
});
In addition, Electron provides platform APIs that would be available to regular, native apps. For example,
there is an abstraction over the different operating systems’ notification APIs that can be used like this
from the renderer process [12]:
const n = new Notification('Notification title', {
body: 'Notification text'
});
There are also platform-specific APIs like adding menu items to the dock icon on macOS [13]:
const { app, Menu } = require('electron');
const dockMenu = Menu.buildFromTemplate([{
label: 'Say hello',
click() { alert("Hello!"); }
}]);
app.dock.setMenu(dockMenu);
This way, developers can create desktop applications fairly easily and with little required knowledge
other than how to create websites. Note however that the features explained here need careful security
considerations before being used. The examples are only for the purpose of introducing the concepts of
Electron and should not be used in actual apps. While the code as presented doesn’t contain any immediate
exploitable vulnerabilities, it becomes dangerous when the app gets more complex and more features are
added. If an attacker somehow managed to execute JavaScript in the renderer process of this example app,
they could leverage the enabled Node integration to remotely execute arbitrary code on the user’s computer.
These problems and considerations will be discussed in the next two chapters.
3. Electron Attack Vectors
After learning how to create Electron applications, the next step in order to be able to build secure ones
is understanding the possible attack vectors for exploiting them. This chapter will look at the potential
impact these attack vectors have as well as existing mitigations and steps being taken to minimize the risks
stemming from them. This will help with deciding which ones to consider for further analysis.
Table 3.1 gives an overview of all the attack vectors discussed in this chapter.
3.1. Attack Vectors Shared with Web Applications
As established in Section 2.1, Electron applications are essentially websites running in a specialized browser.
When considering attack vectors for Electron apps, it thus seems logical to first look at known attack
vectors for websites accessed through “regular” browsers. Nevertheless, not all attack vectors for the web
also apply to Electron. Comparing the impact of the attack vectors between the browser and Electron will
allow deciding which ones are relevant and warrant further consideration.
3.1.1. OWASP Top Ten
The Open Web Application Security Project (OWASP) is a non-profit organization that focusses on web
application security. They publish the OWASP Top Ten, a widely regarded and cited list of ten critical
security risks commonly occurring in web applications [14]. This section will explain the attacks described
there and evaluate their impact for Electron applications. It is based on the most recent version of 2017,
with the items in the order OWASP considers most dangerous.
Injection (A1:2017)
Injection attacks are possible if untrusted user input is passed directly, i.e. without filtering or suﬀicient san-
itization, into a privileged function. This way, the attacker can alter the program flow, causing unintended
output [15].
Common injection attacks include SQL injection, where the user input is inserted directly into the query,
allowing the attacker to change the query to return different results or have unwanted side effects, like
deleting records, and command injection, where the user input is inserted directly into a shell command,
allowing the attacker to execute their own commands on the host.
SQL injection usually doesn’t apply in the context of Electron. An app might ship a client-side SQLite
database but this attack vector typically applies to systems with a central database. While Electron apps
may well access such a database, the vulnerability would then be in the backend server, not in the Electron
app.
Command injection, on the other hand, can definitely be relevant as Electron exposes the regular Node.js
APIs like child_process.exec() which can be used to execute arbitrary commands on the host system.
If used incorrectly, those can be abused by attackers just like in regular Node.js server apps.
If an app for example uses child_process.exec(`ls -l ${directory}`, callback); and an attacker
manages to inject rm -rf data into the directory variable, the data directory will be deleted [16, p. 75].
There are no mitigations for command injection specific to Electron as they are executed through regular
Node.js APIs.
3.1. Attack Vectors Shared with Web Applications
12
Table 3.1.: Comparing the discussed attack vectors between browsers, servers and Electron apps.
Attack vector
Causes
Applies
to
browser?
Applies
to
server?
Applies
to E.
app?
Relative
severity in E.
apps
Mitigations for E. apps
Injection (A1:2017)
passing user input directly to
sensitive functions
no
yes
yes
/
none
Broken authentication
(A2:2017)
use of weak authentication
mechanisms
no
yes
no
/
/
Sensitive data
exposure (A3:2017)
use of insecure protocols,
accidental information leakage
no
yes
yes
less
security scanners
XML external entities
(A4:2017)
improper XML parsing
no
yes
yes
same (less
common)
none
Broken access control
(A5:2017)
not restricting access to
sensitive data and functions
properly
no
yes
no
/
/
Security
misconfiguration
(A6:2017)
use of insecure defaults,
manually disabling security
features
yes
yes
yes
same
adoption of secure defaults,
security scanners
XSS (A7:2017)
executing user-controlled
JavaScript
yes
no
yes
more
security scanners, secure
settings
Insecure
deserialization
(A8:2017)
improper use of data formats
that are too powerful
yes
yes
yes
same (less
common)
none
Using components
with known
vulnerabilities
(A9:2017)
outdated, vulnerable libraries
yes
yes
yes
same
dependency checkers
Insuﬀicient logging &
monitoring (A10:2017)
no monitoring, monitoring
not checked regularly
no
yes
no
/
/
Replacing the app
source
insuﬀicient awareness by
users, no code-signing
yes
no
yes
more
none
3.1. Attack Vectors Shared with Web Applications
13
Attack vector
Causes
Applies
to
browser?
Applies
to
server?
Applies
to E.
app?
Relative
severity in E.
apps
Mitigations for E. apps
Open redirect,
navigation
trusted domains redirecting to
arbitrary targets
yes
no
yes
more
security scanners
Opening URLs with
shell.openExternal()
improper filtering of the
allowed URLs
no
no
yes
/
security scanners
Missing permission
request handlers
no filtering of permission
requests
no
no
yes
/