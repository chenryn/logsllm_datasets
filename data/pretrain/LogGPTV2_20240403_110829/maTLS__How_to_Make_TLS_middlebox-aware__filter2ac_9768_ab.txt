plication data sent over HTTPS, for the purpose of security or
performance. Figure 1 illustrates how they typically intervene
in a TLS session. A middlebox intercepts the TLS session,
splitting it into two segments. The middlebox then pretends to
be the client while communicating with the server and in turn
impersonates the server in its communication with the client.
In the case of multiple middleboxes, they form a chain of TLS
segments between the client and server, with each middlebox
Fig. 1: Overview of SplitTLS: A client sets up a TLS session
with a server involving multiple middleboxes in-between.
During a TLS handshake, each middlebox splits the TLS
session into two TLS segments while pretending to be the
client’s intended server. To this end, client-side middleboxes
install custom root certiﬁcates on clients’ devices and fabricate
the server’s certiﬁcate signed by the custom root certiﬁcates.
On the other hand, server-side middleboxes take private keys
from the server in order to impersonate the server in SplitTLS.
ultimately playing both the roles of client and server during
each round trip.
Once the end-to-end session is established,
the client
and the server communicate via the middleboxes. When a
middlebox receives an encrypted message over a segment, it
decrypts the message using the key of the segment. Then,
the middlebox performs its functionality on the decrypted
message. Finally, the middlebox encrypts the message with the
key for the next segment and forwards it to the next middlebox
(or the endpoint). Note that we are interested only in those
middleboxes that participate in two segments simultaneously;
for instance, we do not consider middleboxes that play the
role of the intended servers to service the content such as edge
servers in CDNs, since they do not always participate in two
segments.
Depending on which entity installs the middleboxes and
where they are deployed, we can classify middleboxes into
two categories: client-side and server-side. Client-side mid-
dleboxes are employed by users (e.g., anti-virus software)
or operators of client-side networks (e.g., intrusion detection
systems). They are located at vantage points which packets
always pass through. For example, a secure gateway, such as
Bluecoat system4, can be situated at the edge of a corporate
network to inspect all the incoming and outgoing packets.
Server-side middleboxes are deployed by web servers or
by the contracts between the web servers and middlebox
service providers. They are deployed on a server’s networks,
or in clouds that provide middlebox-as-a-service [40]. A client
typically accesses server-side middleboxes through DNS rout-
ing. For example, when a server employs an outsourced web
application ﬁrewall, such as Cloudbric5, he changes the DNS
zone ﬁle in his authoritative name server to direct trafﬁc from
clients to the ﬁrewall. After the ﬁrewall’s inspection, the trafﬁc
is then forwarded to web servers or to further middleboxes
based on the IP address conﬁguration in the ﬁrewall settings.
Also, different techniques are used to intercept TLS ses-
4https://www.symantec.com/products/proxy-sg-and-advanced-secure-gateway
5https://www.cloudbric.com/
3
ClientServerMBMB…Custom Root CertificatePrivate Key / CertificateClient-sideMiddleboxServer-sideMiddleboxSegmentSessionSegmentsions, depending on the middlebox type. For a client-side
middlebox, clients are often required to install custom root cer-
tiﬁcates into the trusted root certiﬁcate store on their devices.
Whenever a middlebox receives a TCP SYN packet sent to
the server from the client, it intercepts the packet, executing
a TCP handshake and then performing a TLS handshake with
the client. During the TLS handshake, the middlebox generates
a new certiﬁcate on-the-ﬂy with the same common name
as the intended server, which is signed by the private key
that corresponds to the custom root certiﬁcate. Thus, if an
attacker learns any private key of a custom root certiﬁcate,
he can impersonate any server to which the client that trusts
the custom root certiﬁcate wishes to connect. Furthermore, as
the certiﬁcate is not issued by CAs, clients cannot verify its
legitimacy by other means, such as through CT or DANE [38].
For server-side middleboxes, web servers are required to
hand over their private keys along with the certiﬁcates so
that the middleboxes can service their content. This breaks
the fundamental principle of authentication and weakens the
security of the servers, which makes middleboxes attractive
targets for attackers [23], [4].
E. Security Problems in SplitTLS
Although SplitTLS complies with the current TLS practice,
several studies have reported that some middleboxes fail to
correctly validate certiﬁcates, degrade to weaker ciphersuites,
or insert malicious scripts [8], [11], [44], [5]. This means
that fundamental security properties (i.e., authentication, con-
ﬁdentiality, and integrity) between two endpoints are broken.
The client is forced to trust the behavior of middleboxes,
since the security of the session is highly dependent on
whether the middleboxes correctly operate the TLS protocol.
We summarize how SplitTLS breaks the security goals of TLS.
Authentication: A client cannot authenticate the intended
server, as the middlebox replaces the server’s certiﬁcate with a
certiﬁcate forged by the middlebox. Even worse, recent studies
showed that some middleboxes do not validate the certiﬁcate
of the intended server. For example, PrivDog [2] was known
to accept every certiﬁcate without checking its validity, and
some anti-virus software always generates valid certiﬁcates
even when it received invalid certiﬁcates from the intended
servers (or another middlebox) [8], [5].
Conﬁdentiality: Because a middlebox splits the original
session into two segments, the client negotiates the key for the
segment with the middlebox, not the intended server. Thus the
middlebox can read or modify all trafﬁc between the client and
the server. Further, the client has no idea of whether the data
has been encrypted (with a strong ciphersuite) after it passes
through the middlebox. For example, when a client sends an
HTTPS request to a server by using Nokia’s Xpress Browser,
it forcibly sends all messages to the Nokia’s forward proxy.
Then, this proxy delivers the messages on behalf of the client
to the server. However, the Xpress Browser does not notify the
clients that their information can be read or modiﬁed by the
proxy [25], [15].
Integrity: SplitTLS cannot guarantee the integrity as a
client cannot detect any modiﬁcation by a middlebox on her
messages with the intended server. For example, Lenovo lap-
tops performed a man-in-the-middle attack to inject sponsored
links on web pages (delivered over TLS) using Superﬁsh [39],
but this injection behavior was not noticeable by the ordinary
client.
The above problems take place mainly because it is difﬁcult
for a client to detect which middleboxes meddle in the session
and what they do to the trafﬁc. Therefore, we propose that
making middleboxes visible to clients and publicly auditable
will help to address the above security and privacy challenges.
III. TRUST AND THREAT MODELS
Entities. Before introducing our threat model, we describe
ﬁve entities in the networking architecture.
(1) Client (C): A client refers to a machine or a piece
of software (e.g., web browsers), used by a user, that com-
municates with middleboxes. We assume the client correctly
performs protocols and is not compromised.
(2) Server (S): A server refers to a machine or a piece
of software, operated by a content provider,
that services
content based on a client’s request. We assume that
the
server to which a client wishes to connect is not malicious
or compromised. The client and the server are collectively
referred to as endpoints.
(3) Middlebox (MB): a middlebox is a machine or a
piece of software, made by a middlebox service provider.
A middlebox is deployed by a network operator, a content
provider, or a user and is located between the client and the
server. The endpoints may not be aware of the middleboxes,
their functions, or their states. If the middleboxes are mis-
conﬁgured or incorrectly implemented, they may accept invalid
certiﬁcates, use deprecated ciphersuites, or attempt to inject
unwanted or malicious content [44], [34].
(4) Certiﬁcate Authority (CA): An organization that issues
and revokes certiﬁcates. A CA issues a certiﬁcate to a re-
quester after a validation process. In our model, A CA can
be compromised; thus, fraudulent certiﬁcates can be issued to
an adversary who can impersonate the server.
(5) Middlebox transparency (MT): A system (similar to
CT [21]) that logs certiﬁcates, which can be publicly mon-
itored and audited by any interested parties. Any trusted
CT operator, such as Google, can operate an MT system.
The only difference from CT is that the MT system targets
middlebox certiﬁcates, which will be detailed in Section (§IV).
Alternatively, the CT system can be assumed to accommodate
middlebox certiﬁcates as well.
Adversary capabilities. We accept the Dolev-Yao model
[10] in which an active adversary can fully control the network;
that is, the network is untrusted. The adversary can not only
capture messages on-the-ﬂy, but also modify, drop, reorder, or
inject messages. Speciﬁcally, he can manipulate middleboxes
(e.g., TLS-intercepting WiFi access points), which then can
capture packets, perform crypt-analysis, or patch software to
inject malicious scripts. We do not consider other attacks such
as side-channel attacks or denial-of-service attacks.
.
IV. AUDITABLE MIDDLEBOXES
In this section, we describe an architecture to make middle-
boxes visible to the endpoints of TLS sessions. To this end, we
4
deﬁne the notion of an auditable middlebox that has its own
middlebox certiﬁcate logged in middlebox transparency (MT)
servers. Middlebox certiﬁcates are written based on the X.509
format, and then signed by CAs, which may require middlebox
service providers to follow a set of established criteria for
certiﬁcate issuance. Like TLS certiﬁcates, middlebox certiﬁ-
cates could also be mis-issued, mis-conﬁgured, or exploited.
To mitigate those attacks, we also introduce MT log servers
where any middlebox certiﬁcates can be publicly logged so that
interested parties can monitor and detect unexpected behaviors.
A. Middlebox Certiﬁcates
The primary purpose of middlebox certiﬁcates is to help
users authenticate middleboxes by providing the information
about behaviors of the middlebox; for example, the role of the
middleboxes (e.g., ﬁrewall) or permissions (e.g., read or write)
can be included. This information can be added into the format
of X.509 certiﬁcate without any modiﬁcation to the existing
infrastructure. Below, we itemize the required information for
a middlebox certiﬁcate along with the names of the ﬁelds.
•
•
Name(s) of the Middlebox Service Provider indi-
cates the name(s) of the middlebox service provider,
which can be speciﬁed at the Common Name ﬁeld.
Subject (Middlebox) Public Key Info carries the
public key and the cryptographic algorithm (e.g.,
ECC) used to generate the key, which can be speciﬁed
at the Subject Public Key Info ﬁeld.
• Middlebox Information Access contains additional
information that can help a user
the mid-
dlebox. To this end, we deﬁne an extension,
Middlebox_InfoAccess where its ASN.1 syntax
is deﬁned as follows.
trust
Middlebox_InfoAccess :: =
SEQUENCE SIZE (1..MAX) OF Middlebox_Description
Middlebox_Description::=
SEQUENCE {
Middlebox_InfoType
Middlebox_Info
OBJECT IDENTIFIER,
GeneralName}
example, permission can be one of
For
the
Middlebox_InfoType ﬁelds, used to indicate
the read or write permission required by the mid-
the TypeofSer-
dlebox for TLS trafﬁc. Similarly,
vice and URL ﬁelds can provide additional
in-
formation about
the middlebox as a form of
Middlebox_Description.
C. Properties of Auditable Middleboxes
We call a middlebox that has a middlebox certiﬁcate logged
in an MT log server an auditable middlebox. It provides the fol-
lowing beneﬁts regarding the trustworthiness of middleboxes:
First, middleboxes now have their own key pairs and
can be authenticated from the endpoints by presenting their
valid certiﬁcate. Thus, middleboxes now no longer require (1)
content providers to share their private keys or (2) users to
install their custom root certiﬁcate.
Second, clients can be assured of the names and properties
of middleboxes or middlebox service providers. This will
hold middlebox service providers accountable.Further, with
the help of maTLS, which will be detailed in §V, clients can
detect if a middlebox has modiﬁed trafﬁc without any autho-
rization. This can be done by checking the Permission item
in the Middlebox_InfoAccess ﬁeld of the middlebox
certiﬁcate, which would encourage middleboxes to have least
privileges. For example, anti-virus software can be issued with
a middlebox certiﬁcate with only read permission to assure
users that it will not modify any trafﬁc.
Third, middlebox certiﬁcates may require some of the
essential X.509 extensions such as Permission ﬁeld to be set to
critical [18], which explicitly indicates that clients must
refuse the connection if they cannot interpret the extension.
Fourth, the MT system provides a global set of auditable
middleboxes; any interested parties, such as monitors, auditors,
and clients, can check any mis-issued, mis-conﬁgured, or
fraudulent certiﬁcates.
Fifth, when a middlebox certiﬁcate’s corresponding private
key is no longer safe due to security breaches, the middlebox
certiﬁcate can be revoked, and the revocation status can be
disseminated through existing revocation mechanisms such as
CRL [7] or OCSP [26]. Thus, clients can be protected from
middleboxes with security risks by leveraging the existing
revocation mechanisms.
introducing additional
the middlebox certiﬁcate by itself does not
Given that the PKI has been suffered from many security is-
sues regarding certiﬁcate management, one might be concerned
that
infrastructure (i.e., MT system)
could exacerbate the current situation. However, we believe
that
introduce
new management problems as it can be easily integrated into
the existing CT architecture. Rather, the use of middlebox
certiﬁcates can mitigate the current insecure practices of mid-
dleboxes splitting TLS connections such as installing custom
root certiﬁcates or sharing private keys.
B. Middlebox Transparency
V. MIDDLEBOX-AWARE TLS (MATLS)
We introduce an MT log server that publicly records
middlebox certiﬁcates. The operation of MT is similar to that