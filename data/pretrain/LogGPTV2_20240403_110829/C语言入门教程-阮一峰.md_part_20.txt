（标准输⼊）：默认来源为键盘，⽂件指针编号为 。
stdin 0
（标准输出）：默认⽬的地为显示器，⽂件指针编号为 。
stdout 1
（标准错误）：默认⽬的地为显示器，⽂件指针编号为 。
stderr 2
Linux 系统的⽂件，不⼀定是数据⽂件，也可以是设备⽂件，即⽂件代表⼀个可以读或写的设备。⽂件指
针 默认是把键盘看作⼀个⽂件，读取这个⽂件，就能获取⽤户的键盘输⼊。同理， 和
stdin stdout
默认是把显示器看作⼀个⽂件，将程序的运⾏结果写⼊这个⽂件，⽤户就能看到运⾏结果了。它们
stderr
的区别是， 写⼊的是程序的正常运⾏结果， 写⼊的是程序的报错信息。
stdout stderr
这三个输⼊和输出渠道，是 Linux 默认提供的，所以分别称为标准输⼊（stdin）、标准输出（stdout）和
标准错误（stderr）。因为它们的实现是⼀样的，都是⽂件流，所以合称为 “标准流”。
Linux 允许改变这三个⽂件指针（⽂件流）指向的⽂件，这称为重定向（redirection）。
如果标准输⼊不绑定键盘，⽽是绑定其他⽂件，可以在⽂件名前⾯加上⼩于号 ，跟在程序名后⾯。这叫
“输出重定向”（output redirection）。
$ demo > out.dat
上⾯示例中， 程序代码⾥⾯的 ，将指向⽂件 ，即向 写⼊数据。
demo stdout out.dat out.dat
输出重定向 会先擦去 的所有原有的内容，然后再写⼊。如果希望写⼊的信息追加在 的
> out.dat out.dat
结尾，可以使⽤ 符号。
>>
$ demo >> out.dat
上⾯示例中， 程序代码⾥⾯的 ，将向⽂件 写⼊数据。与 不同的是，写⼊的开始
demo stdout out.dat >
位置是 的⽂件结尾。
out.dat
标准错误的重定向符号是 。其中的 代表⽂件指针的编号，即 表示将 2 号⽂件指针的写⼊，重定
2> 2 2>
向到 。2 号⽂件指针就是标准错误 。
err.txt stderr
$ demo > out.dat 2> err.txt
上⾯示例中， 程序代码⾥⾯的 ，会向⽂件 写⼊报错信息。⽽ 向⽂件
demo stderr err.txt stdout
写⼊。
out.dat
输⼊重定向和输出重定向，也可以结合在⼀条命令⾥⾯。
$ demo  out.dat
// or
$ demo > out.dat 
int main(void) {
FILE *fp;
fp = fopen("hello.txt", "r");
int c;
while ((c = getc(fp)) != EOF)
printf("%c", c);
fclose(fp);
}
上⾯示例中， 依次读取⽂件的每个字符，将其放⼊变量 ，直到读到⽂件结尾，返回 EOF，循环
getc() c
终⽌。变量 的类型是 ，⽽不是 ，因为有可能等于负值，所以设为 更好⼀些。
c int char int
fputc()，putc() #
和 ⽤于向⽂件写⼊⼀个字符。它们的⽤法跟 类似，区别是 是向
fputc() putc() putchar() putchar()
写⼊，⽽这两个函数是向⽂件写⼊。它们的原型定义在头⽂件 。
stdout stdio.h
int fputc(int char, FILE *stream);
int putc(int char, FILE *stream);
与 的⽤法是⼀样，都接受两个参数，第⼀个参数是待写⼊的字符，第⼆个参数是⽂件指
fputc() putc()
针。它们的区别是， 通常是使⽤宏来实现，⽽ 只作为函数来实现，所以理论上，
putc() fputc() putc()
的性能会好⼀点。
写⼊成功时，它们返回写⼊的字符；写⼊失败时，返回 EOF。
fprintf() #
⽤于向⽂件写⼊格式化字符串，⽤法与 类似。区别是 总是写⼊ ，
fprintf() printf() printf() stdout
⽽ 则是写⼊指定的⽂件，它的第⼀个参数必须是⼀个⽂件指针。它的原型定义在头⽂件
fprintf()
。
stdio.h
int fprintf(FILE* stream, const char* format, ...)
可以替代 。
fprintf() printf()
printf("Hello, world!\n");
fprintf(stdout, "Hello, world!\n");
上⾯例⼦中，指定 写⼊ ，结果就等同于调⽤ 。
fprintf() stdout printf()
fprintf(fp, "Sum: %d\n", sum);
上⾯示例是向⽂件指针 写⼊指定格式的字符串。
fp
下⾯是向 输出错误信息的例⼦。
stderr
fprintf(stderr, "Something number.\n");
fscanf() #
⽤于按照给定的模式，从⽂件中读取内容，⽤法跟 类似。区别是 总是从
fscanf() scanf() scanf()
读取数据，⽽ 是从⽂件读⼊数据，它的原因定义在头⽂件 ，第⼀个参数必须是
stdin fscanf() stdio.h
⽂件指针。
int fscanf(FILE* stream, const char* format, ...);
下⾯是⼀个例⼦。
fscanf(fp, "%d%d", &i, &j);
上⾯示例中， 从⽂件 ⾥⾯，读取两个整数，放⼊变量 和 。
fscanf() fp i j
使⽤ 的前提是知道⽂件的结构，它的占位符解析规则与 完全⼀致。由于 可以
fscanf() scanf() fscanf()
连续读取，直到读到⽂件尾，或者发⽣错误（读取失败、匹配失败），才会停⽌读取，所以 通常
fscanf()
放在循环⾥⾯。
while(fscanf(fp, "%s", words) == 1)
puts(words);
上⾯示例中， 依次读取⽂件的每个词，将它们⼀⾏打印⼀个，直到⽂件结束。
fscanf()
的返回值是赋值成功的变量数量，如果赋值失败会返回 EOF。
fscanf()
fgets() #
⽤于从⽂件读取指定⻓度的字符串，它名字的第⼀个字符是 ，就代表 。它的原型定义在
fgets() f file
头⽂件 。
stdio.h
char* fgets(char* str, int STRLEN, File* fp);
它的第⼀个参数 是⼀个字符串指针，⽤于存放读取的内容。第⼆个参数 指定读取的⻓度，第
str STRLEN
三个参数是⼀个 FILE 指针，指向要读取的⽂件。
读取 STRLEN - 1 个字符之后，或者遇到换⾏符与⽂件结尾，就会停⽌读取，然后在已经读取的
fgets()
内容末尾添加⼀个空字符 ，使之成为⼀个字符串。注意， 会将换⾏符（ ）存储进字符
\0 fgets() \n
串。
如果 的第三个参数是 ，就可以读取标准输⼊，等同于 。
fgets stdin scanf()
fgets(str, sizeof(str), stdin);
读取成功时， 的返回值是它的第⼀个参数，即指向字符串的指针，否则返回空指针 NULL。
fgets()
可以⽤来读取⽂件的每⼀⾏，下⾯是读取⽂件所有⾏的例⼦。
fgets()
#include 
int main(void) {
FILE* fp;
char s[1024];
int linecount = 0;
fp = fopen("hello.txt", "r");
while (fgets(s, sizeof s, fp) != NULL)
printf("%d: %s", ++linecount, s);
fclose(fp);
}
上⾯示例中，每读取⼀⾏，都会输出⾏号和该⾏的内容。
下⾯的例⼦是循环读取⽤户的输⼊。
char words[10];
puts("Enter strings (q to quit):");
while (fgets(words, 10, stdin) != NULL) {
if (words[0] == 'q' && words[1] == '\n')
break;
puts(words);
}
puts("Done.");
上⾯的示例中，如果⽤户输⼊的字符串⼤于 9 个字符， 会多次读取。直到遇到 + 回⻋键，才
fgets() q
会退出循环。
fputs() #
函数⽤于向⽂件写⼊字符串，和 函数只有⼀点不同，那就是它不会在字符串末尾添加换⾏
fputs() puts()
符。这是因为 保留了换⾏符，所以 就不添加了。 函数通常与 配对使
fgets() fputs() fputs() fgets()
⽤。
它的原型定义在 。
stdio.h
int fputs(const char* str, FILE* stream);
它接受两个参数，第⼀个参数是字符串指针，第⼆个参数是要写⼊的⽂件指针。如果第⼆个参数为
stdout
（标准输出），就是将内容输出到计算机屏幕，等同于 。
printf()
char words[14];