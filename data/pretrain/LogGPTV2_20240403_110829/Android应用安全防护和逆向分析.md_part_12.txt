[]{#042.xhtml}
#### 7.1 dex文件格式 {.bodycontent-title2}
下面来看一下dex文件格式说明图，如图7-1所示。
::: bodypic-c
![](OEBPS/Images/7a1-i.jpg){.calibre279}
:::
图7-1 dex文件格式（见书后彩图，图片由@非虫授权）
dex的文件格式如图7-2所示。
::: bodypic-c
![](OEBPS/Images/7a2-i.jpg){.calibre280}
:::
图7-2 dex文件格式
[]{#043.xhtml}
#### 7.2 构造dex文件 {.bodycontent-title2}
在讲解dex文件之前，需要先创建一个简单的例子来帮助来解析。不借助任何IDE工具就可以构造一个dex文件。用javac、dx命令即可。创建Java源文件，内容如下代码：
::: bodypic-c
![](OEBPS/Images/107-i.jpg){.calibre281}
:::
在当前工作路径下，编译方法如下：
1）编译成java class文件。执行命令javac
Hello.java。编译完成后，目录下生成Hello.class文件。可以使用命令java
Hello来测试下，会输出代码中的"Hello，Android！"的字符串。
2）编译成dex文件。编译工具在Android
SDK的路径.：/build-tools/19.0.1/dx，其中19.0.1是Android SDK
build_tools的版本，请按照在本地安装的build_tools版本来设置路径。建议该路径加到path环境变量中。
执行命令如下：
::: bodypic-c
![](OEBPS/Images/107-2-i.jpg){.calibre282}
:::
编译正常会生成Hello.dex文件。
3）使用ADB运行测试。
测试命令和输出结果如下：
::: bodypic-c
![](OEBPS/Images/108-i.jpg){.calibre283}
:::
重要说明：
·测试环境使用真机和Android虚拟机都可以，核心的命令是：
::: bodypic-c
![](OEBPS/Images/108-2-i.jpg){.calibre284}
:::
·-cp是class
path的缩写，后面的Hello是要运行的class名称。网上有描述说输入dalvikvm\--help可以看到dalvikvm的帮助文档，但是在Android
4.4的官方模拟器和自己的手机上测试都提示找不到Class路径，在Android老的版本（4.3）上测试还是有输出的。
·因为命令执行时，dalvikvm会在/data/dalvik-cache/目录下创建.dex文件，因此要求adb的执行Shell对目录/data/dalvik-cache/有读、写和执行的权限，否则无法达到预期效果。
[]{#044.xhtml}
#### 7.3 解析数据结构 {.bodycontent-title2}
下面按照图7-1的思路来一一讲解各个数据结构。
##### 7.3.1 头部信息Header结构 {.bodycontent-title3}
dex文件里的header除了描述.dex文件的文件信息外，还有文件里其他各个区域的索引。header对应为结构体类型，逻辑上的描述用结构体header_item来理解它。先给出结构体里面用到的数据类型ubyte和uint的解释，然后是结构体的描述，后面对各种结构描述的时候也是用这种方法。
代码定义如下：
::: bodypic-c
![](OEBPS/Images/108-3-i.jpg){.calibre285}
:::
::: bodypic-c
![](OEBPS/Images/109-i.jpg){.calibre286}
:::
查看Hex如下：
Header的大小固定为0x70，偏移地址从0x00到0x70，提取信息如下：
::: bodypic-c
![](OEBPS/Images/109-2-i.jpg){.calibre287}
:::
用一张图来描述各个字段的长度：
::: bodypic-c
![](OEBPS/Images/109-3-i.jpg){.calibre288}
:::
里面以_size和_off为后缀的描述为：data_size是以字节为单位描述data区的大小，其余的_size都是描述该区里元素的个数；\_off描述相对于文件起始位置的偏移量。其余的6个是描述dex文件信息的，各项说明如下：
·magic
value：这8个字节一般是常量，为了使dex文件能够被识别出来，它必须出现在dex文件的最开头的位置。数组的值可以转换为一个字符串如下：{0x64
0x65 0x78 0x0a 0x30 0x33 0x35
0x00}=\"dex\\n035\\0\"，中间是一个\'\\n\'符号后面035是dex文件格式的版本。
·checksum和signature：checksum是文件校验码，使用alder32算法校验文件除去maigc、checksum外余下的所有文件区域，用于检查文件错误。signature使用SHA-1算法hash除去magic、checksum和signature外余下的所有文件区域，用于唯一识别本文件。
·file_size：dex文件的大小。
·header_size：header区域的大小，单位字节，一般固定为0x70常量。
·endian_tag：大小端标签，标准dex文件格式为小端，此项一般固定为0x1234
5678常量。
·link_size和link_off：这两个字段表示的是链接数据的大小和偏移值。
·map_off：map
item的偏移地址，该item属于data区里的内值要大于等于data_off的大小。
结构如map_list描述：
::: bodypic-c
![](OEBPS/Images/110-i.jpg){.calibre289}
:::
定义位置：data区。
引用位置：header区。
map_list里先用一个uint描述后面有size个map_item，后续就是对应的size个map_item描述。
map_item结构有4个元素：type表示该map_item的类型，本节能用到的描述如下，详细DalvikExecutable
Format里Type
Code的定义；size表示再细分此item，该类型的个数；offset是第一个元素的针对文件初始位置的偏移量；unuse是用对齐字节的，无实际用处。
结构定义如下：
::: bodypic-c
![](OEBPS/Images/110-2-i.jpg){.calibre290}
:::
header→map_off=0x0244，偏移为0244的位置值为0x000d。每个map_item描述占用12字节，整个map_list占用12\*size+4个字节。所以整个map_list占用空间为12\*13+4=160=0x00a0，占用空间为0x
0244\~0x 02E3。从文件内容上看，也是从0x 0244到文件结束的位置。
::: bodypic-c
![](OEBPS/Images/111-i.jpg){.calibre291}
:::
地址0x0244的一个uinit的值为0x0000000d，map_list-\>size=0x0d=13，说明后续有13个map_item。根据map_item的结构描述在0x0248\~0x02e3里的值，整理出这段二进制所表示的13个map_item内容，汇成表格如下：
map_list→map_item里的内容，有部分item跟header里面相应item的offset地址描述相同。但map_list描述的更为全面些，又包括了HEADER_ITEM、TYPE_LIST，STRING_DATA_ITEM等，最后还有它自己TYPE_MAP_LIST。
至此，header部分描述完毕，它包括描述dex文件的信息，其余各索引区和data区的偏移信息，一个map_list结构。map_list里除了对索引区和数据区的偏移地址又一次描述，也有其他诸如HEAD_ITEM、DEBUG_INFO_ITEM等信息。
·string_ids_size和string_ids_off。这两个字段表示dex中用到的所有字符串内容的大小和偏移值，需要解析完这部分，然后用一个字符串池存起来，后面有其他的数据结构会用索引值来访问字符串池，这个池子也是非常重要的。
·type_ids_size和type_ids_off。这两个字段表示dex中的类型数据结构的大小和偏移值，比如类类型、基本类型等信息。
·proto_ids_size和type_ids_off。这两个字段表示dex中元数据信息数据结构的大小和偏移值，描述方法的元数据信息，比如方法的返回类型，参数类型等信息。
·field_ids_size和field_ids_off。这两个字段表示dex中字段信息数据结构的大小和偏移值。
·method_ids_size和method_ids_off。这两个字段表示dex中方法信息数据结构的大小和偏移值。
·class_defs_size和class_defs_off。这两个字段表示dex中类信息数据结构的大小和偏移值，这个数据结构是整个dex中最复杂的，它内部层次很深，包含了很多其他的数据结构，所以解析起来也很麻烦，所以后面会着重讲解这个数据结构。
·data_size和data_off。这两个字段表示dex中数据区域的结构信息的大小和偏移值，这个结构中存放的是数据区域，比如定义的常量值等信息。
头部包含的信息还是很多的，主要分为两个部分：
·魔数+签名+文件大小等信息。
·后面的各个数据结构的大小和偏移值都是成对出现的。
##### 7.3.2 string_ids数据结构 {.bodycontent-title3}
string_ids区索引了dex文件所有的字符串。这个区里的元素格式为string_ids_item，可以使用结构体如下描述：
::: bodypic-c
![](OEBPS/Images/112-i.jpg){.calibre176}
:::
以_ids结尾的各个段里放置的都是对应数据的偏移地址，只是为一个索引，所以才会在dex文件布局里把这些区归类为"索引区"。
string_data_off只是一个偏移地址，它指向的数据结构为string_data_item，代码定义如下：
::: bodypic-c
![](OEBPS/Images/112-2-i.jpg){.calibre292}
:::
这里涉及LEB128（little endian base
128）格式，是基于1个字节的一种不定长度的编码方式。若第一个字节的最高位为1，则表示还需要下一个字节来描述，直至最后一个字节的最高位为0。每个字节的其余位用来表示数据。LEB128这种数据类型的出现其实是为了解决一个问题，那就是减少内存的浪费，它表示整型类型的数值，但是整型类型四个字节有时候在使用的时候有点浪费，它的原理如下所示：
::: bodypic-c
![](OEBPS/Images/112-3-i.jpg){.calibre293}
:::
图中使用两个字节表示。编码的每个字节有效部分只有低7位，每个字节的最高位用来指示是否是最后一个字节：
·非最高字节的第7位为0。
·最高字节的第7位为1。
将LEB128编码的数字转换为可读数字的规则是：除去每个字节的第7位，将每个字节剩余的7个位拼接在一起，即为数字。
比如：LEB128编码的0x02b0转换后的数字为0x0130。
转换过程如下：
0x02b0=\>0000 0010 1011 0000=\>去除最高位=\>000 0010 011
0000=\>按4位重排=\>00 0001 0011 0000=\>0x130。
底层代码位于：android/dalvik/libdex/leb128.h。
Java中也写了一个工具类：
::: bodypic-c
![](OEBPS/Images/113-i.jpg){.calibre294}
:::
这个方法是读取dex中Uleb128类型的数据，遇到一个字节最高位=0就停止读下个字节的原理来实现即可，还有一个方法就是解码Uleb128类型的数据：
::: bodypic-c
![](OEBPS/Images/113-2-i.jpg){.calibre295}
:::
::: bodypic-c
![](OEBPS/Images/114-i.jpg){.calibre17}
:::
原理是去除每个字节的最高位，接着拼接剩下的7位，然后重新构造一个整型类型的数据，位不够就从低位开始左移。
通过上面的Uleb128的解释来看，其实Uleb128类型就是1～5个字节来回浮动，为什么是5呢？因为它要表示一个4个字节的整型类型，但是每个字节要去除最高位，那么肯定最多只需要5个字节就可以表示4个字节的整型类型数据了。
下面回归正题，继续来看string_ids数据结构。根据string_ids_item和string_data_item的描述，加上header里提供的入口位置string_ids_size=0x0e和string_ids_off=0x70，可以整理出string_ids及其对应的数据如下：
::: bodypic-c
![](OEBPS/Images/114-2-i.jpg){.calibre296}
:::
string_ids_item和string_data_item里提取出的对应数据表格如下：
::: bodypic-c
![](OEBPS/Images/115-i.jpg){.calibre297}
:::
string里的各种标志符号，诸如L、V、VL、\[等在dex文件里有特殊的意思。
string_ids的意思就是找到这些字符串。其实使用二进制编辑器打开dex文件时，一般工具默认翻译成ASCII码，总会有一大片熟悉的字符白生生地很是晃眼。刚才走过的分析流程，就是顺藤摸瓜找到它们是怎么来的。以后的一些type-ids、method_ids也会引用到这一片熟悉的字符串。
[提示：]{.yanse}后面的解析代码会看到，其实没必要用那么复杂地去解析Uleb128类型，因为会看到这个字符串和我们之前解析XML和resource.arsc格式一样，每个字符串的第一个字节表示字符串的长度，那么只要知道每个字符串的偏移地址就可以解析出字符串的内容了，而每个字符串的偏移地址是存放在string_ids_item中的。
到这里就解析完了dex中所有的字符串内容，用一个字符串池来进行存储即可。下面来继续看type_ids数据结构。
##### 7.3.3 type_ids数据结构 {.bodycontent-title3}
type_ids数据结构中存放的数据主要是描述dex中所有的类型，比如类类型、基本类型等信息。type_ids区索引了dex文件里的所有数据类型，包括class类型、数组类型（array
types）和基本类型（primitive
types）。本区域里的元素格式为type_ids_item，结构描述如下：
::: bodypic-c
![](OEBPS/Images/115-2-i.jpg){.calibre298}
:::
::: bodypic-c
![](OEBPS/Images/116-i.jpg){.calibre299}
:::
type_ids_item里面descriptor_idx值的意思是string_ids里的index序号，是用来描述此type的字符串。
根据header里type_ids_size=0x07，type_ids_off=0xa8，找到对应的二进制描述区。00000a0：1a02，如下所示：
::: bodypic-c
![](OEBPS/Images/116-2-i.jpg){.calibre300}
:::
根据type_id_item的描述，整理出表格如下。
::: bodypic-c
![](OEBPS/Images/116-3-i.jpg){.calibre301}
:::
因为type_id_item→descriptor_idx里存放的是指向string_ids的index号，所以也能得到该type的字符串描述。这里出现了3个type
descriptor：
·L表示class的详细描述，一般以分号表示class描述结束。
·V表示void返回类型，只有在返回值的时候有效。