ServerHello 
Certificate 
CertificateRequest 
ServerHelloDone 
Certificate 
ClientKeyExchange 
CertificateVerify 
ChangeCipherSpec 
Finished 
ChangeCipherSpec 
Finished 
Figure 2.  The general TLS handshake 
protocol with optional messages shaded. 
Figure 3.  The TLS handshake protocol for 
client and server authentication using the 
RSA key exchange method. 
from 
the  client  using 
the  server  sends  a  Certificate  message  to  the  client 
that  may  include  a  server  certificate  when  an  RSA  key 
exchange  is  used,  or  Diffie-Hellman  parameters  when  a 
Diffie-Hellman key exchange is used.  The server may also 
request  a  certificate 
the 
CertificateRequest  message.    During  the  third 
phase of the handshake, the client may send its certificate 
to  the  server  in  a  Certificate  message  along  with  a 
CertificateVerify  message  so  that  the  server  can 
verify certificate ownership, if the server requested a client 
certificate during the second phase.  The client must send 
either  a  pre-master  secret  encrypted  using  the  server’s 
public  key,  or  public  Diffie-Hellman  parameters,  in  the 
ClientKeyExchange  message  so  that  the  client  and 
server can compute a shared  master secret.   In  the fourth 
phase  of  the  handshake,  the  client  and  server  finish  the 
handshake so that they may begin exchanging application 
data. 
The  full  range  of  handshake  variants  is  beyond  the 
scope  of  this  paper.    Interested  readers  are  referred  to 
[4][9][12] for a full treatment of the TLS handshake. 
3.1.  TLS client/server authentication 
This  section  describes  the  specific  form  of  a  TLS 
handshake  that  supports  client  and  server  authentication 
using the RSA key exchange method, shown in Figure 3.  
Using  this  method,  the  client  and  server  exchange 
certificates with one another for mutual authentication.   
initiates 
The  client 
the  handshake  by  sending  a 
ClientHello  message  to  the  server.    The  server 
responds  with  a  ServerHello  message. 
  These 
messages  contain  the  necessary  information  to  establish 
the security parameters for the TLS session.  Although the 
messages  contain  the  same  parameter  types,  they  have  a 
slightly different meaning.  Table 1 lists the parameters of 
these two hello messages and describes their meaning.   
The  cipher  suite  parameter  is  a  4-tuple  specifying  the 
cryptographic algorithms to use in the TLS session.  These 
include the server authentication algorithm, key exchange 
algorithm, bulk encryption algorithm, and digest algorithm 
for message integrity.   
Parameters  ClientHello 
Version 
Highest SSL/TLS version supported by client 
Random 
SessionID 
CipherSuite 
Compression 
Method 
Client-generated random structure, used as a nonce 
Variable-length session identifier.  A zero value 
indicates a new session.  A non-zero value refers to an 
earlier session the client wishes to resume. 
List of cryptographic algorithm combinations the client 
supports, in decreasing order of preference. 
List of the compression methods supported by the 
client 
ServerHello 
Lower of the client-suggested version and 
highest server-supported version 
Server-generated random structure 
If client sends a zero value, server returns 
a new session ID, otherwise returns the 
old session ID supplied by the client. 
Single cipher suite selected from the list 
supplied by the client. 
Compression method selected by the 
server. 
Table 1.  A description of the parameters contained in the TLS ClientHello and ServerHello messages. 
  Next, 
The  server  continues  the  handshake  by  sending  a 
Certificate  message  containing  an  X.509  certificate 
or  certificate  chain. 
the  server  sends  a 
CertificateRequest  message,  communicating  the 
following three items of information to the client: first, that 
the  server  requires  a  client  certificate  for  authentication 
purposes;  second,  a  list  of  certificate  types  the  server  is 
willing  to  accept;  and  third,  a  list  of  X.500  distinguished 
names  of  the  certificate  authorities  that  the  server  trusts.  
For  the  kind  of  handshake  being  described,  the  server 
specifies  the  certificate  type  as  RSA.    The  list  of  trusted 
certificate  authorities  assists  the  client  in  selecting  a 
certificate or certificate chain to submit that is signed by a 
root CA that the server trusts.  Finally, the server sends a 
ServerHelloDone  message  indicating  that  it  is  now 
the client’s turn to continue the handshake.   
The  third  phase  of  the  handshake  protocol  consists  of 
messages  sent  from  the  client  to  the  server.    First,  the 
client  sends  a  Certificate  message  to  the  server 
containing an X.509 certificate or certificate chain.   
the  server 
to  decrypt 
Next,  a  ClientKeyExchange  message 
is  sent 
containing a client-generated, pre-master secret to be used 
for  key  generation.    The  client  encrypts  the  pre-master 
secret  using  the  public  key  contained  in  the  server’s 
certificate that was received earlier in the handshake.  The 
only  way  for 
the  message 
successfully  and  obtain  the  pre-master  secret  is  if  the 
server  possesses  the  private  key  associated  with  the 
certificate  the  server  previously  sent  to  the  client.    Thus, 
the  ClientKeyExchange  serves  as  an 
implicit 
challenge for the server to prove ownership of the private 
key.    If  the  server  successfully  decrypts  the  pre-master 
secret, the server can generate the correct keys to be used 
during the TLS session.   
The  third  phase  of  the  handshake  concludes  when  the 
client sends a  CertificateVerify  message  to prove 
ownership of the private key associated with the certificate 
the  client  just  disclosed  to  the  server.    The  message 
consists  of  a  signed  hash  of  all  previous  messages 
exchanged during the handshake.  The server decrypts the 
message  using  the  public  key  contained  in  the  client 
certificate  and  compares  the  result  to  a  hash  of  all  the 
previous messages exchanged during the handshake.  This 
message  serves  as  an  implicit  challenge  for  the  client  to 
prove  ownership  of  the  private  key  associated  with  the 
client certificate. 
The handshake now enters the final phase.  The client 
sends  a  ChangeCipherSpec  message,  indicating  that 
the  client  will  now  begin  encrypting  its  communications 
using the new cryptographic keys that were just computed.  
Then the client sends a Finished message to the server 
containing a hash of all the preceding messages exchanged 
during the handshake.  The server follows suit by sending 
its own ChangeCipherSpec and Finished messages 
to  the  client. 
  Upon  completion  of  the  handshake, 
application data begins to flow through the secure channel.  
Note  that  no  application  data,  such  as  an  HTTP  request, 
flows from the client to the server until after the encrypted 
session is established.   
3.2.  Limitations in TLS authentication 
The following are limitations to authenticating strangers 
on the Internet using TLS client/server authentication:  
1.  Certificates  are  exchanged  in  plain  text  during  the 
initial TLS handshake.  This does not present a danger 
that  an  eavesdropper  can  intercept  the  certificate  and 
misuse  it.    An  attacker  who  intercepts  a  certificate  is 
unable  to  pose  as  the  owner  of  the  certificate  without 
obtaining  possession  of  the  associated  private  key, 
assuming  due  diligence  on  the  part  of  authentication 
services  to  challenge  for  possession  of  the  associated 
private  key  appropriately  whenever  a  certificate  is 
presented.    However,  exchanging  certificates  in  the 
clear does introduce privacy  risks  whenever certificate 
contents  are  sufficiently  sensitive  that  disclosing  the 
certificate  to  anyone  unauthorized  to  receive  it  is 
undesirable.   
2.  The  client  and  the  server  are  limited  to  disclosing  a 
single  certificate  chain  to  each  other.    In  certain 
interest 
in  determining 
circumstances,  disclosing  multiple  certificate  chains 
provides  a  greater  level  of  trust  compared  to  a  single 
certificate chain, especially  when  several attributes are 
of 
trust  and  different 
certification  authorities  are  trusted  to  issue  certificates 
containing 
  Requiring  multiple 
certificate chains for authentication may also mean that 
multiple private keys must be compromised in order for 
an imposter to successfully breach the system.  
those  attributes. 
3.  The  server  specifies  a  list  of  distinguished  names  of 
certifying  authorities  that  the  server  trusts  when  it 
requests a client certificate.   In contrast, the client has 
no such opportunity.   
4.  The  server  discloses  its  certificate  before  the  client 
discloses  a  certificate,  forcing  the  server  to  always 
make the disclosure to a complete stranger. 
5.  The client always receives a certificate from the server 
before it is required to disclose its own certificate to the 
server.  Although the client is able to verify the validity 
of  the  certificate  contents,  at  the  moment  the  client 
discloses  a  certificate  to  the  server,  the  client  has  no 
proof  that  the  server  owns  the  certificate  that  it 
disclosed.    Thus,  the  client  cannot  rely  on  the  server 
certificate  to  determine  conclusively  whether  or  not  to 
trust  the  server  enough  to  disclose  a  sensitive  client 
certificate.   
satisfy 
  The 
completely 
server  does  not 
the  authentication  requirements. 
6.  If  the  certificate  chain  received  by  either  the  client  or 
the 
their 
authentication  requirements,  there  is  no  facility  in  the 
protocol  for  requesting  additional  certificates  to  meet 
all 
typical 
approach is for the client to authenticate the server if a 
trusted  root  CA  known  to  the  client  signs  the  root 
certificate 
typically 
authenticate the server if the distinguished name in the 
certificate  matches  the  DNS  name  for  the  web  server 
host  machine.    Most  often,  if  servers  authenticate 
clients at all, they simply verify that the client possesses 
the private key associated with the public key presented 
certificate.  
  Web  clients 
in 
the  chain. 
4.  Trust negotiation in TLS 
The  Trust  Negotiation  in  TLS  (TNT)  protocol  is  an 
extension to the TLS handshake protocol that is designed 
to use trust negotiation to establish trust between strangers.  
TNT  provides  advanced  client/server  authentication  in 
TLS  by  overcoming  the  limitations  of  TLS  client/server 
authentication  presented  in  the  previous  section.    This 
section  describes 
the  TLS  rehandshake  and  session 
resumption  procedures  and  details  how  TNT  leverages 
those procedures to support confidential trust negotiations.  
This  section  also  describes 
the  TNT  protocol  for 
conducting  trust  negotiation  between  a  TLS  client  and 
server during a rehandshake.  Finally, the definition of new 
messages  added  to  TNT  that  are  not  already  included  in 
TLS  is  given  using  the  syntax  from  the  TLS  protocol 
specification.   
4.1.  TLS rehandshake 
Once  a  TLS  connection  is  established  using 
the 
handshake protocol described in the previous section, it is 
possible to conduct a TLS rehandshake.  The rehandshake 
is simply the TLS handshake performed over an existing, 
and  likely  encrypted,  TLS  connection.    (Although  not 
common,  it  is  possible  for  a  TLS  session  to  provide 
message integrity, but not encryption.)  Either the client or 
server can initiate a rehandshake.   
A  client  initiates  a  rehandshake  by  sending  a  new 
ClientHello  message  to  the  server  after  a  previous 
handshake  has  finished. 
initiate  a 
rehandshake  by  sending  a  ServerHelloRequest 
message  to  a  client. 
  The  client  responds  with  a 
ClientHello message, and the handshake continues as 
usual.  Either party has the option of ignoring a request for 
a rehandshake, but that is rarely done. 
  A  server  can 
The  three  purposes  of  a  rehandshake  in  SSL/TLS  are: 
1)  client  authentication,  2)  cipher  suite  upgrading,  and  3) 
replenishment  of  keying  material.    Suppose  a  server  is 
configured  to  enforce  different  security  requirements 
according  to  the  specific  data  or  service  being  accessed.  
Until  the  server  receives  the  client’s  request,  there  is  no 
basis  for  client  authentication.    In  this  case,  it  is  not 
possible  to  authenticate  the  client  during  the  initial  TLS 
handshake  at  the  beginning  of  a  connection,  because  the 
server  has  not  yet  received  any  application  data  from  the 
client.    Only  after  receiving  application  data,  such  as  an 
HTTP request, can the server authenticate the client based 
on the access control policy of the requested service. 
The rehandshake is used to upgrade the strength of the 
cipher  suite  in  Netscape's  Step-Up  methodology—similar 
to  Microsoft's  Server  Gated  Cryptography,  or  SGC  [9].  
Before the United States’ export regulations were relaxed, 
an exception was granted for the use of strong encryption 
during certain financial transactions.  For example, a client 
using only 40-bit encryption could automatically switch to 
stronger  encryption  when  the  client  determined  it  had 
connected to a web server that was granted an exception to 
use  strong  cryptography,  such  as  a  financial  institution 
outside  the  United  States.    For  example,  suppose  a  client 
connects to a bank in Paraguay and indicates that it is an 
exportable  client  who  is  only  able  to  support  40-bit 
encryption.    The  bank's  server  can  send  back  a  special 
certificate  in  the  TLS  handshake  indicating  that  it  is 
allowed to use strong cryptography with exportable clients.  
After  receiving  this  certificate,  the  client  can  initiate  a 
rehandshake  to  negotiate  a  TLS  session  with  stronger 
encryption.   
re-handshake  at 
the  conclusion  of 
  Microsoft’s  SGC  methodology 
Using Netscape’s Step-Up methodology, a web browser 
the 
initiates  a 
handshake. 
is 
implemented to allow the browser to interrupt the current 
handshake  and  begin  a  rehandshake.    Although  this  is 
arguably  more  efficient,  it  does  violate  the  SSL/TLS 
specification,  which  does  not  allow  for  a  rehandshake  to 
begin in the middle of a handshake. 
A  rehandshake  is  also  used  to  replenish  keying 
material.  This is done to prevent cryptographic attacks on 
long-lived  sessions.    In  TLS,  the  keying  material  can 
consist  of  up  to  six  different  values,  depending  on  the 
cipher suite being used.  This includes an encryption key, 
MAC  key,  and  an  initialization  vector  (IV)  for  both  the 
client and server.  Keys may also need to be replenished to 
prevent  CBC  rollover  when  large  amounts  of  data  are 
being  transmitted  using  a  block  cipher  in  CBC  mode.  
When two data blocks i and j encrypt to the same value c, 
if  blocks  i+1  and  j+1  are  equal,  they  will  also  encrypt  to 
the  same  value,  revealing  patterns  in  the  data  to  a 
cryptanalyst.   
Since  trust  negotiations  involve  sensitive  certificates, 
  During  TLS 
negotiations  must  be  confidential. 
client/server  authentication,  certificates  are  exchanged  in 
plain text in an initial TLS handshake.  To overcome this 
limitation,  TNT  is  intended  for  use  only  during  a 
rehandshake initiated during an encrypted TLS session, to 
keep the trust negotiation confidential.   
This paper assumes the server initiates the rehandshake, 
to establish trust in a client according to the access control 
policy associated with the sensitive resource that the client 
has  requested  to  access.    In  the  future,  TNT  will  also 
permit  a  client  to  establish  trust  in  a  server  prior  to  any 
application data being passed through the secure channel, 
known as client-initiated trust establishment [1].   
Single-round trust negotiations do not involve sensitive 
certificates,  and  therefore  do  not  require  confidentiality.  