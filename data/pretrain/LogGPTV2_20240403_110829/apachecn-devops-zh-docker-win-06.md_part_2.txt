  image: dockeronwindows/ch03-nerd-dinner-db:2e
 env_file:
    - db-credentials.env
  volumes:
    - db-data:C:\data
  networks:
    - nd-net
```
当数据库服务启动时，Docker 将从名为`db-credentials.env`的文件中设置环境变量。我使用了相对路径，因此该文件需要与合成文件位于同一位置。如前所述，该文件的内容是键值对，每个环境变量一行。在这个文件中，我包含了应用的连接字符串，以及数据库的密码，因此凭据都在一个地方:
```
sa_password=4jsZedB32!iSm__
ConnectionStrings:UsersContext=Data Source=nerd-dinner-db,1433;Initial Catalog=NerdDinner...
ConnectionStrings:NerdDinnerContext=Data Source=nerd-dinner-db,1433;Initial Catalog=NerdDinner...
```
敏感数据仍然是纯文本，但是通过将其隔离在单独的文件中，我可以做两件事:
*   首先，我可以保护文件以限制访问。
*   第二，我可以利用服务配置与应用定义的分离，对不同的环境使用相同的 Docker Compose 文件，替换不同的环境文件。
Environment variables are not secure even if you secure access to the file. You can view environment variable values when you inspect a container, so anyone with access to the Docker API can read this data. For sensitive data such as passwords and API keys, you should use Docker secrets with Docker Swarm, which I cover in the next chapter.
对于保存晚餐消息处理程序，我可以对数据库凭证使用相同的环境文件。处理程序依赖于消息队列和数据库服务，但是在这个定义中没有新的属性:
```
nerd-dinner-save-handler:
  image: dockeronwindows/ch05-nerd-dinner-save-handler:2e
  depends_on:
    - nerd-dinner-db
    - message-queue
  env_file:
    - db-credentials.env
  networks:
    - nd-net
```
接下来是由 Traefik 代理的我的前端服务 REST API、新的主页和旧的 NerdDinner web 应用。REST 应用编程接口使用相同的凭据文件来配置 SQL Server 连接，并包括 Traefik 路由规则:
```
nerd-dinner-api:
  image: dockeronwindows/ch05-nerd-dinner-api:2e
  labels:
    - "traefik.frontend.rule=Host:api.nerddinner.local"
  env_file:
    - db-credentials.env
  networks:
    - nd-net
```
主页包括 Traefik 路由规则和高优先级值，以确保在 NerdDinner web 应用使用更通用的规则之前评估该规则:
```
nerd-dinner-homepage:
  image: dockeronwindows/ch03-nerd-dinner-homepage:2e
  labels:
    - "traefik.frontend.rule=Host:nerddinner.local;Path:/,/css/site.css"
    - "traefik.frontend.priority=10"
  networks:
    - nd-net
```
最后一项服务是网站本身。这里，我使用了环境变量和环境文件的组合。跨环境通常一致的变量值可以显式地声明，以使配置清晰明了——我这样做是为了特性标志。敏感数据可以从单独的文件中读取，在这种情况下，包含数据库凭证和 API 密钥:
```
nerd-dinner-web:
  image: dockeronwindows/ch05-nerd-dinner-web:2e
  labels:
    - "traefik.frontend.rule=Host:nerddinner.local;PathPrefix:/"
    - "traefik.frontend.priority=1"
 environment: 
    - HomePage:Enabled=false
    - DinnerApi:Enabled=true
  env_file:
    - api-keys.env
    - db-credentials.env
  depends_on:
    - nerd-dinner-db
    - message-queue
  networks:
    - nd-net
```
网站容器不需要公开，所以没有端口发布。应用需要访问其他服务，因此它连接到同一个网络。
所有的服务现在都配置好了，所以我只需要指定网络和卷资源来完成合成文件。
# 指定应用资源
Docker Compose 将网络和卷定义与服务定义分开，这允许环境之间的灵活性。我将在本章的后面介绍这种灵活性，但是为了完成 NerdDinner Compose 文件，我将从最简单的方法开始，使用默认值。
我的撰写文件中的服务都使用名为`nd-net`的网络，这需要在撰写文件中指定。Docker 网络是隔离应用的好方法。您可能有几个解决方案都使用弹性搜索，但有不同的服务级别协议和存储要求。如果每个应用都有单独的网络，您可以在不同的 Docker 网络中运行单独的 Elasticsearch 服务，为每个应用单独配置，但都命名为`elasticsearch`。这符合预期的约定，但被网络隔离，因此服务只能在自己的网络中看到弹性搜索实例。
Docker Compose 可以在运行时创建网络，也可以定义资源来使用主机上已经存在的外部网络。该规范针对的网络使用 Docker 安装时创建的默认`nat`网络，因此该设置适用于所有标准 Docker 主机:
```
networks:
  nd-net:
   external:
     name: nat
```
还需要指定卷。我的两个有状态服务 Elasticsearch 和 SQL Server 都使用命名卷进行数据存储:`es-data`和`nd-data`。与其他网络一样，卷可以指定为外部卷，因此 Docker Compose 将使用现有卷。Docker 不创建任何默认卷，因此如果我使用外部卷，我需要在运行应用之前在每台主机上创建它。相反，我将指定没有任何选项的卷，因此 Docker Compose 将为我创建它们:
```
volumes:
  es-data:
  db-data:
```
这些卷将数据存储在主机上，而不是存储在容器的可写层中。它们不是主机装载的卷，因此尽管数据存储在本地磁盘上，但我没有指定位置。每个卷将在`C:\ProgramData\Docker`将其数据写入 Docker 数据目录。我将在本章的后面讨论如何管理这些卷。
我的合成文件已经指定了服务、网络和卷，因此可以运行了。完整文件在本章`ch06\ch06-docker-compose`的源代码中。
# 使用 Docker 编写管理应用
Docker Compose 提供了一个类似于 Docker 命令行界面的界面。`docker-compose`命令为其支持的功能使用了一些相同的命令名称和参数，这是完整 Docker CLI 功能的子集。当您通过编写命令行界面运行命令时，它会向 Docker 引擎发送请求，以对编写文件中的资源进行操作。
Docker 编写文件是您的应用所需的状态。当您运行`docker-compose`命令时，它会将合成文件与 Docker 中已经存在的对象进行比较，并进行任何必要的更改以达到所需的状态。这可能是停止容器、启动容器或创建卷。
合成将合成文件中的所有资源视为单个应用，为了消除在同一主机上运行的应用的歧义，运行时会将项目名称添加到它为应用创建的所有资源中。当您通过 Compose 运行应用，然后查看主机上运行的容器时，您不会看到名称与服务名称完全匹配的容器。Compose 将项目名称和索引添加到容器名称中，以支持服务中的多个容器，但这不会影响 Docker 的 DNS 系统，因此容器仍然通过服务名称相互访问。
# 运行应用
我在`ch06-docker-compose`目录中有 NerdDinner 的第一个 Compose 文件，里面也包含了环境变量文件。从该目录中，我可以用一个`docker-compose`命令启动整个应用:
```
> docker-compose up -d
Creating ch06-docker-compose_message-queue_1        ... done
Creating ch06-docker-compose_nerd-dinner-api_1      ... done
Creating ch06-docker-compose_nerd-dinner-db_1            ... done
Creating ch06-docker-compose_nerd-dinner-homepage_1 ... done
Creating ch06-docker-compose_elasticsearch_1        ... done
Creating ch06-docker-compose_reverse-proxy_1        ... done
Creating ch06-docker-compose_kibana_1                    ... done
Creating ch06-docker-compose_nerd-dinner-index-handler_1 ... done
Creating ch06-docker-compose_nerd-dinner-web_1           ... done
Creating ch06-docker-compose_nerd-dinner-save-handler_1  ... done
```
让我们看看前面命令的描述:
*   `up`命令用于启动应用、创建网络、卷和运行容器。
*   `-d`选项运行后台的所有容器，与`docker container run`中的`--detach`选项相同。
可以看到 Docker Compose 尊重服务的`depends_on`设置。首先创建任何依赖于其他服务的服务。没有任何依赖关系的服务将以随机顺序创建。在这种情况下，`message-queue`服务首先被创建，因为许多其他服务依赖于它，`nerd-dinner-web`和`nerd-dinner-save-handler`服务是最后一个，因为它们具有最多的依赖性。
输出中的名称是单独的容器名称，命名格式为`{project}_{service}_{index}`。每个服务只有一个容器在运行，这是默认的，所以索引都是`1`。项目名是我运行`compose`命令的目录名的净化版本。
当您运行`docker-compose up`命令并完成时，您可以使用 Docker Compose 或标准的 Docker CLI 管理容器。容器只是普通的 Docker 容器，由 compose 使用一些额外的元数据作为一个整体来管理它们。列出容器向我展示了所有由`compose`创建的服务容器:
```
> docker container ls
CONTAINER ID   IMAGE                                      COMMAND                     
c992051ba468   dockeronwindows/ch05-nerd-dinner-web:2e   "powershell powershe…"
78f5ec045948   dockeronwindows/ch05-nerd-dinner-save-handler:2e          "NerdDinner.MessageH…"      
df6de70f61df  dockeronwindows/ch05-nerd-dinner-index-handler:2e  "dotnet NerdDinner.M…"      
ca169dd1d2f7  sixeyed/kibana:5.6.11-windowsservercore-ltsc2019   "powershell ./init.p…"      
b490263a6590  dockeronwindows/ch03-nerd-dinner-db:2e             "powershell -Command…"      
82055c7bfb05  sixeyed/elasticsearch:5.6.11-windowsservercore-ltsc2019   "cmd /S /C \".\\bin\\el…"   
22e2d5b8e1fa  dockeronwindows/ch03-nerd-dinner-homepage:2e       "dotnet NerdDinner.H…"     
 058248e7998c dockeronwindows/ch05-nerd-dinner-api:2e            "dotnet NerdDinner.D…"      
47a9e4d91682  sixeyed/traefik:v1.7.8-windowsservercore-ltsc2019  "/traefik --docker -…"      
cfd1ef3f5414  dockeronwindows/ch05-nats:2e              "gnatsd -c gnatsd.co…"
... 
```
运行 Traefik 的容器将端口`80`发布到本地机器，我的主机文件中有本地 NerdDinner 域的条目。NerdDinner 应用及其新的主页、REST API 和 Kibana 分析将按预期运行，因为完整的配置在 Compose 文件中捕获，所有组件都由 Docker Compose 启动。
这是撰写文件格式最强大的功能之一。该文件包含运行应用的完整规范，任何人都可以使用它来运行您的应用。在这种情况下，所有组件都使用 Docker Hub 上的公共 Docker 映像，因此任何人都可以从这个 Compose 文件启动应用。除了 Docker 和 Docker Compose 之外，您不需要任何先决条件来运行 NerdDinner，它现在是一个分布式应用，包含。. NET 框架.NET 核心、Java、Go 和 Node.js 组件。
# 扩展应用服务
Docker Compose 允许您轻松地上下扩展服务，向正在运行的服务添加或移除容器。当服务使用多个容器运行时，网络中的其他服务仍然可以访问它。消费者使用服务名称进行发现，Docker 中的 DNS 服务器在服务中的所有容器之间对请求进行负载平衡。