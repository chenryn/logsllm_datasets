are to the boundary of any protected region (e.g., around
a person). Under this policy, objects would start becom-
ing transparent much farther than three feet away, avoiding
blocking the person’s vision but still being useful.
By having owned-space policies be enforced by apps
themselves (via the sharing module), rather than by users,
they can be applied without changing the underlying permis-
sions on the shared object. This avoids two pitfalls. First, it
prevents malicious users from exploiting the policy, e.g., by
gaining control of an object simply by walking up to it. Sec-
ond, it enables policy enforcement even on objects that the
physical space owner cannot see (protecting even non-AR
user bystanders from the “kick me” sign from Section 2).
5 Implementation
We now describe our prototype, which we implement as an
app-level library for the Microsoft HoloLens, demonstrating
the feasibility of our design for a currently available head-
mounted AR platform. Our prototype, called ShareAR, is
implemented in C# and uses the HoloLens Unity develop-
ment kit. We implemented the concept of an AR object us-
ing the Unity GameObject primitive, which is a virtual en-
tity comprising shape, texture, location, physics properties,
script-controlled behavior, etc. Our implementation consists
of a core module (1888 lines of code), a network shim layer
(1137 lines of code), and a short supplementary script to
accompany any object shared using the toolkit (45 lines of
code), totalling 3070 lines of code.2
The ShareAR core comprises:
• Data and meta-data, including an access control ma-
trix [30] and options for how objects are shared (e.g.,
location coupled or decoupled).
• Methods to instantiate objects, manually or automati-
cally accept shared objects, change permissions on ob-
jects, and sync data between users. Table 2 summarizes
sample corresponding message types in our prototype.
• Simple ﬁxed-radius personal space controls in the form
of Unity’s plane clipping, where the portion of an object
closer to the user than the ﬁxed plane-clipping distance
is not rendered. We did not implement more nuanced
controls, like our proposed transparency gradient.
Though network architecture is out of scope of our design,
in practice we must choose some way to connect between
HoloLens devices. In our prototype, we used the MixedReal-
ityToolkit Sharing toolkit, an open-source library from Mi-
crosoft.3 MixedRealityToolkit does not provide any sharing
control or access control functionality; we use it only as a
basic tunnel to send messages between HoloLens devices.
We build a network shim layer that serializes and deserial-
izes ShareAR messages and uses MixedRealityToolkit Shar-
ing to send them between devices. A developer who wishes
to use a different networking solution — e.g., one relying fur-
ther on a central server for data storage, or one implementing
a more rigorous consensus protocol — may write a replace-
ment network shim layer satisfying the same interface with
the ShareAR core.
Users may join, leave, and re-join the network. To be ro-
bust to access control changes occurring while a user is of-
ﬂine, we include in our implementation a means for a newly
reconnected user to receive a “digest” version of an object
containing only the information needed for consistency with
the other online users. Since consensus is best done with
network architecture in mind, we provide a means to create
this object “digest” as a higher-level functionality but rele-
gate consensus operations to the networking shim layer.
2To calculate lines of code, we use the CLoC tool version 1.80 available
at https://github.com/AlDanial/cloc/releases/tag/v1.80. We
omit lines of code solely related to our performance evaluation.
3https://github.com/Microsoft/MixedRealityToolkit-
Unity
150    28th USENIX Security Symposium
USENIX Association
Message name
InstantiateShared
AcceptObj
SetPermissionNew
SetPermissionObject
SetPermission
UpdateLocation
DeleteShared
Sent when
A new shared object is created
A newly-shared object is accepted
A newly-instantated public object is accepted and there are more than 2 users present
A permission change is made or offered on an existing object
A permission change on an existing object is accepted and there are more than 2 users present
A shared object’s location in space is updated
A shared object is deleted
Bytes
104
22
38
92
54
62
22
Table 2: Example message types and sizes in our prototype. Messages are relatively small because they do not include full AR object meshes
but rather an ID corresponding to the type of object in question and a string of object data that fully speciﬁes the particular object of that
type. Sizes are for basic objects with no additional object data.
Feature
Location-coupled sharing
Location-decoupled sharing
Public permission settings
Ghost-only permission settings
Private permission settings
Auto-accepting content
Accepting content ad hoc
Local deletion
Global location-coupled deletion
Global location-indep. deletion
Updating object location
Updating object data
Paintball
(cid:88)
Cubist Art
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Doc Edit
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Table 3: ShareAR sharing control features in case study apps.
6 Evaluation
We now evaluate our prototype’s functionality (Section 6.1),
security (Section 6.2), and performance (Section 6.3).
6.1 Functionality Evaluation
We evaluate the functionality of our prototype by implement-
ing case study apps and by comparing against existing AR
design guidelines. We ﬁnd that our prototype is ﬂexible
enough to support a range of app sharing control needs and
is compatible with all considered existing design guidelines.
Case study applications. To evaluate the ﬂexibility of our
design to support our functionality goals, and the associated
developer effort, we built bare-bones prototype versions of
our case studies from Section 2.1: Paintball, Doc Edit (a vari-
ant of Multi-Team Whiteboards), and Cubist Art. (We did not
implement Soccer Arena, since it does not surface new secu-
rity, privacy, or functionality requirements not covered by the
other case studies. Section 2 provides further analysis.) Our
prototypes are intended to cover a broad spectrum of sharing
control functionalities; see Appendix A for detailed descrip-
tions of the apps. Screenshots of the apps are in Figure 3, the
range of sharing control features each exercises is in Table 3,
and the sharing-related lines of code for each is in Table 4.
We use lines of code as a proxy measure for developer
effort (see Table 4). For each app, we count the total lines
of code in the app and the lines of code speciﬁc to shar-
ing functionality. The low number of sharing-related lines of
code suggests that the burden on app developers to use our
Figure 3: Screenshots of prototype apps: Cubist Art (top), Doc Edit
(bottom left), and Paintball (bottom right). In the Doc Edit app, the
semitransparent gray box in front of the ﬁle cabinet in the upper left
is a ghost view of another user’s document, and the two red boxes
are two users’ separate instantiations of the same shared document.
toolkit in practice is reasonable. Furthermore, we conjec-
ture that fully ﬂedged apps are likely to contain many more
lines of code unrelated to sharing, further reducing the com-
parative proportion of sharing-related lines of code in the
app. We note also that the repetition of some prototyped fea-
tures across multiple apps (such as location-coupled sharing
in both the Paintball and Shared Blocks apps) suggests that
ShareAR’s features are composable, and that developers can
choose an app-appropriate subset of functionality.
Compatibility with existing guidelines. We also consider
the compatibility of ShareAR with existing design guidelines
from AR headset manufacturers. We focus on guidelines
related to multi-user interactions, asking: Does ShareAR
allow an app developer to meet these guidelines? We in-
USENIX Association
28th USENIX Security Symposium    151
App
Paintball
Doc Edit
Cubist Art
Sharing LoC
13
173
153
Total LoC
240
1236
1131
Table 4: Lines-of-code counts for the three prototype applications.
We report both the total lines of code for the application and the
lines of code dedicated to interfacing with the ShareAR toolkit.
vestigate the Microsoft HoloLens guidelines [43] and Meta
guidelines [40]; we ﬁnd that ShareAR is compatible with all
of them. The results are summarized in Table 5; see Ap-
pendix B for additional information.
6.2 Security Evaluation
We examine the security and privacy of our ShareAR-
enabled apps under our threat model of untrusted users (but
trusted OS and apps). As described in Section 3, we rely on
app developers to use the ShareAR APIs that are appropri-
ate for their use case. For the sake of exposition, we focus
on the Doc Edit app since it invokes all of the restrictions our
ShareAR prototype supports; our observations also extend to
Paintball and Cubist Art where applicable.
We ﬁnd that ShareAR’s security and privacy restrictions
function as intended and meet the security goals in Sec-
tion 2.3. Considering ﬁrst the outbound security goals:
• Support granting/revoking per-user permissions: The
Doc Edit app includes a menu that allows a user to grant
and revoke per-user permissions. A user who never re-
ceived or no longer has view permissions on a document
cannot see it.
• Support granting/revoking per-object permissions: The
aforementioned menu controls permissions on a per-
document basis: only the currently selected document
is affected by a permission change.
• Support physically intuitive access control restrictions:
Doc Edit provides a ghost version of a document ob-
ject (as a ﬂat gray box). A user with permission only to
view the ghost cannot tell if the original document is red
or not; but the user sees the ghost in the same location
as the document’s owner sees the original document,
and this location remains synchronized when the docu-
ment’s owner moves the document in physical space.
Considering the inbound security goals from Section 2.3:
• Support user control of incoming virtual content: The
Doc Edit app surfaces an incoming permission-granting
message to the user via a small menu, through which
the user can choose to accept or decline.
If the user
accepts, a new (location-decoupled) instantiation of the
document appears in front of the user, and the user can
also see the sharer’s instantiation of the document in its
full (rather than ghost) form. If the user declines the
document, no such change occurs.
• Support user control of owned physical space: As de-
scribed in Section 5, our prototype leverages a Unity
plane-clipping feature to implement simple owned
physical space enforcement. We clip parts of any object
closer to the user than 0.85 m (with the distance chosen
to match a HoloLens recommended setting [42]).
6.3 Performance Evaluation
We now evaluate ShareAR’s performance, measuring its op-
erations (and comparing them to baseline operations where
possible) and studying how it scales with numbers of vir-
tual objects and users. We ﬁnd that ShareAR imposes only a
modest overhead on interdevice communication even as the
number of objects and users increases.
Experimental setup. We build an app (1506 lines of C#
code) to exercise ShareAR’s components and measure its
performance. In our test app, a test device creates objects that
are location-coupled or location-decoupled, sharing them
publicly, as ghosts, or keeping them private. One or more
other test devices auto-accept or manually accept objects.
The ﬁrst device changes the objects’ permissions, updates
the objects’ location, and ﬁnally deletes the objects.
Our experimental setup consists of ﬁve HoloLens devices
communicating on the same local network, in two exper-
(1) for each n ∈ {1,2,3,4,5}, we se-
imental scenarios:
lect n devices and ﬁx h = 1 shared AR object; (2) for each
h ∈ {20,21,22,23,24,25}, we set h to be the number of ob-
jects present and ﬁx n = 2 devices. All devices run our eval-
uation app with the same n and h parameters; all devices join
the network sequentially, and then the last device to join the
network triggers the evaluation app.
The operations we measure are Create, Accept
Create, Change Permission, Accept Change, Update
Location, and Delete. Each operation involves work done
on User A’s device to initiate the operation, a message sent
across the network from User A to User B, and work done on
User B’s device to process the operation. Note that in some
cases (for Create and Change Permission) User B’s de-
vice reacts by initiating an operation that we also measure
(Accept Create and Accept Change).
In addition to measuring the within-module time for A’s
initiating action and B’s receiving action, we measure and
report on operation completion time, i.e., the time it takes
from A’s initiating action until B has ﬁnished processing. To
correct for clock skew between the two devices, we add into
the evaluation script a message from B to A containing B’s
timestamps (note that this is not part of our module’s pro-
tocol, but exists solely for the purposes of the evaluation).
Device A then combines this information with its own times-
tamps to compute the ﬁnal timing numbers.
Finally, for the sharing module operations that clearly cor-
respond to a primitive Unity operation (Create, Update
Location, and Delete), we also measure as a baseline the
timing of the Unity operation.
We repeat each evaluation point — deﬁned by operation,
conﬁguration (e.g., location coupled or decoupled), number
152    28th USENIX Security Symposium
USENIX Association
Guideline
How are they sharing?
What is the group size?
Where is everyone?
When are they sharing?
How similar are their physical
environments?
What devices are they using?
Clip planes near user
Do not disturb
The holographic campﬁre
Public by default
Short description
Design for app’s purpose of sharing: presentation,
collaboration, guidance
Accommodate as many users as the app expects to
need
Support users in the same or different physical spaces
as needed
Design for asynchronous or real-time sharing as ap-
propriate
Place objects appropriately in non-co-located users’
environments
Integrate with VR as needed
Set minimum visible distance for object to 0.85 m
Avoid incessant notiﬁcations to user
Allow users to see each other