### 优化后的文本

#### 主动调用 PHP-CGI 与 FastCGI 进程
通过主动调用 `php-cgi`，FastCGI 进程提供了多种辅助功能，如内存管理、垃圾回收等，从而确保了 CGI 的高效性。在 FastCGI 模式下，CGI 进程常驻于内存中，避免了每次请求时重新启动的开销。

#### FastCGI 协议
FastCGI 是一种通信协议，类似于 HTTP 协议，用于在服务器中间件和后端语言之间进行数据交换。HTTP 协议负责浏览器与服务器之间的数据传输，而 FastCGI 协议则负责服务器中间件与后端语言（如 PHP）之间的通信。

##### FastCGI Record 结构
FastCGI 记录由多个记录（record）组成，每个记录包含一个头部（header）和一个主体（body）。记录结构如下：

```c
typedef struct {
    /* Header */
    unsigned char version;            // 版本
    unsigned char type;               // 记录类型
    unsigned char requestIdB1;        // 请求 ID 高字节
    unsigned char requestIdB0;        // 请求 ID 低字节
    unsigned char contentLengthB1;    // 内容长度高字节
    unsigned char contentLengthB0;    // 内容长度低字节
    unsigned char paddingLength;      // 填充长度
    unsigned char reserved;           // 保留字段

    /* Body */
    unsigned char contentData[contentLength];  // 内容数据
    unsigned char paddingData[paddingLength];  // 填充数据
} FCGI_Record;
```

- **版本**：协议版本号。
- **类型**：记录类型，用于标识记录的作用。
- **请求 ID**：两个字节，唯一标识一个请求，以避免多个请求之间的干扰。
- **内容长度**：两个字节，表示 body 的大小。
- **填充长度**：额外的数据块长度，通常设置为 0。
- **保留字段**：保留字段，通常设置为 0。

每个记录的最大 body 大小为 65536 字节（2^16）。

##### FastCGI 类型
FastCGI 记录的类型（type）用于指定记录的作用。常见的类型包括：

| Type 值 | 含义 |
|---------|------|
| 1       | 开始请求的第一个消息 |
| 2       | 异常断开连接 |
| 3       | 正常结束连接 |
| 4       | 传递环境参数 |
| 5       | 传递 POST 数据 |
| 6       | 正常响应消息 |
| 7       | 错误响应消息 |

在一次请求中，首先发送 `type` 为 1 的记录，然后根据需要发送 `type` 为 4、5、6、7 的记录，最后发送 `type` 为 2 或 3 的记录来结束连接。

##### 环境变量
当后端语言接收到 `type` 为 4 的记录时，会将记录的 body 解析为键值对，这些键值对即为环境变量。环境变量的结构如下：

```c
typedef struct {
    unsigned char nameLengthB0;       // 名称长度低字节
    unsigned char valueLengthB0;      // 值长度低字节
    unsigned char nameData[nameLength];  // 名称数据
    unsigned char valueData[valueLength];  // 值数据
} FCGI_NameValuePair11;
```

#### TCP 模式
在 TCP 模式下，php-fpm 进程监听本机上的一个端口（默认 9000），Nginx 通过 FastCGI 协议将客户端数据发送到该端口，php-fpm 接收数据后调用 CGI 进程进行解析。

Nginx 配置示例：
```nginx
location ~ \.php$ {
    index index.php index.html index.htm;
    include /etc/nginx/fastcgi_params;
    fastcgi_pass 127.0.0.1:9000;
    fastcgi_index index.php;
    include fastcgi_params;
}
```

php-fpm 配置示例：
```ini
listen = 127.0.0.1:9000
```

#### Unix Socket 模式
Unix Socket 是一种进程间通信（IPC）方式，使用文件（通常是 `.sock` 文件）作为 socket 描述符。通信双方引用同一个 socket 文件即可建立通道进行通信。相比 TCP 模式，Unix Socket 的性能更优。

Nginx 配置示例：
```nginx
location ~ \.php$ {
    index index.php index.html index.htm;
    include /etc/nginx/fastcgi_params;
    fastcgi_pass unix:/run/php/php7.3-fpm.sock;
    fastcgi_index index.php;
    include fastcgi_params;
}
```

php-fpm 配置示例：
```ini
listen = /run/php/php7.3-fpm.sock
```

#### Nginx 和 IIS7 的解析漏洞
Nginx 和 IIS7 曾经存在一个与 PHP 相关的解析漏洞。用户访问 `http://127.0.0.1/favicon.ico/.php` 时，Nginx 将发送以下环境变量到 php-fpm：

```plaintext
{
    'SCRIPT_FILENAME': '/var/www/html/favicon.ico/.php',
    'SCRIPT_NAME': '/favicon.ico/.php',
    'REQUEST_URI': '/favicon.ico/.php',
    'DOCUMENT_ROOT': '/var/www/html',
    ...
}
```

由于 PHP 中的 `fix_pathinfo` 选项，fpm 会去掉最后一个 `/` 及其后面的内容，直到找到存在的文件。因此，`/var/www/html/favicon.ico` 会被当作 PHP 文件执行，导致解析漏洞。

解决方法有两种：
1. 在 Nginx 端使用 `fastcgi_split_path_info` 移除 path info 信息，并使用 `try_files` 判断文件是否存在。
2. 使用 PHP-FPM 的 `security.limit_extensions` 配置项，限制可解析的文件扩展名。

#### Security.Limit_Extensions 配置项
`security.limit_extensions` 配置项用于限制 php-fpm 可以处理的文件扩展名，从而防止其他扩展名的文件被错误解析。例如：

```ini
security.limit_extensions = .php .php3 .php4 .php5 .php7
```

这样可以有效防止类似上述的解析漏洞。