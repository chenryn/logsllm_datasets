MTVEC CORRUPTION FOR 
HARDENING ISA
Adam 'pi3' Zabrocki
Twitter: @Adam_pi3
GLITCHING RISC-V CHIPS:
Alex Matrosov
Twitter: @matrosov
/USR/BIN/WHOWEARE
Adam ‘pi3’ Zabrocki:
2
•
Phrack author
•
Bughunter (Hyper-V, Intel/NVIDIA vGPU, 
Linux kernel, OpenSSH, Apache, gcc SSP / 
ProPolice, Apache, xpdf, more…) – CVEs
•
The ERESI Reverse Engineering Software 
Interface
•
Creator and a developer of Linux Kernel 
Runtime Guard (LKRG)
•
More…
Private contact:
http://pi3.com.pl
PI:EMAIL
Twitter: @Adam_pi3
Alex Matrosov:
Private contact:
github.com/binarly-io
Twitter: @matrosov
•
Security REsearcher since 1997
•
Conference speaker and trainer
•
Breaking all shades of firmware
•
codeXplorer & efiXplorer IDA plugins
•
Author "Bootkits and Rootkits" book
•
Founder of Binarly, Inc.
•
More...
WHAT IS THIS TALK ABOUT?
3
Hardware:
Software:
WHAT IS THIS TALK ABOUT?
4
Hardware:
Software:
WHAT IS THIS TALK ABOUT?
5
Hardware:
Software:
WHAT IS THIS TALK ABOUT?
6
Hardware:
Software:
Hacker
Pure HW attacks, e.g.:
•
Glitching
•
Side channel
•
Physical probing
•
More...
Pure SW attacks, e.g.:
•
Memory safety (like overflows)
•
Injections (like cmd, XSS, SQL, etc.)
•
Logical issues (like bad design)
•
More...
WHAT IS THIS TALK ABOUT?
7
Hardware:
Software:
Hacker
Pure HW attacks, e.g.:
•
Glitching
•
Side channel
•
Physical probing
•
More...
Pure SW attacks, e.g.,:
•
Memory safety (like overflows)
•
Injections (like cmd, XSS, SQL, etc.)
•
Logical issues (like bad design)
•
More...
Targeting specific 
implementation (e.g., 
programming language, 
compiler, firmware, etc.)
WHAT IS THIS TALK ABOUT?
8
Hardware:
Software:
Hacker
Pure HW attacks, e.g.,:
•
Glitching
•
Side channel
•
Physical probing
•
More...
Pure SW attacks, e.g.,:
•
Memory safety (like overflows)
•
Injections (like cmd, XSS, SQL, etc.)
•
Logical issues (like bad design)
•
More...
Targeting specific 
implementation (e.g., 
programming language, 
compiler, firmware, etc.)
Targeting specific 
implementation (e.g., CPU 
family, implementation of 
architecture, etc.)
WHAT IS THIS TALK ABOUT?
9
Hardware:
Software:
Hacker
Pure HW attacks, e.g.,:
•
Glitching
•
Side channel
•
Physical probing
•
More...
Pure SW attacks, e.g.,:
•
Memory safety (like overflows)
•
Injections (like cmd, XSS, SQL, etc.)
•
Logical issues (like bad design)
•
More...
Targeting specific 
implementation (e.g., 
programming language, 
compiler, firmware, etc.)
Targeting specific 
implementation (e.g., CPU 
family, implementation of 
architecture, etc.)
Mix of HW and SW 
attacks e.g.:
Spectre / Meltdown
WHAT IS THIS TALK ABOUT?
10
Hardware:
Software:
Hacker
Pure HW attacks, e.g.,:
•
Glitching
•
Side channel
•
Physical probing
•
More...
Pure SW attacks, e.g.,:
•
Memory safety (like overflows)
•
Injections (like cmd, XSS, SQL, etc.)
•
Logical issues (like bad design)
•
More...
Targeting specific 
implementation (e.g., 
programming language, 
compiler, firmware, etc.)
Targetting specific 
implementation (e.g., CPU 
family, implementatino of 
architecture, etc.)
Mix of HW and SW 
attacks e.g.:
Spectre / Meltdown
What if the bug is in the 
„reference code” like HW 
ISA itself?
WHAT IS THIS TALK ABOUT?
11
Hardware:
Software:
Hacker
Pure HW attacks, e.g.,:
•
Glitching
•
Side channel
•
Physical probing
•
More...
Pure SW attacks, e.g.,:
•
Memory safety (like overflows)
•
Injections (like cmd, XSS, SQL, etc.)
•
Logical issues (like bad design)
•
More...
Targeting specific 
implementation (e.g., 
programming language, 
compiler, firmware, etc.)
Targetting specific 
implementation (e.g., CPU 
family, implementatino of 
architecture, etc.)
Mix of HW and SW 
attacks e.g.:
Spectre / Meltdown
What if the bug is in the 
„reference code” like HW 
ISA itself?
•
Problem with all implementations
not a specific one!
•
SW can’t trust HW at all...
WHAT IS THIS TALK ABOUT?
12
Hardware:
Software:
Hacker
Pure HW attacks, e.g.,:
•
Glitching
•
Side channel
•
Physical probing
•
More...
Pure SW attacks, e.g.,:
•
Memory safety (like overflows)
•
Injections (like cmd, XSS, SQL, etc.)
•
Logical issues (like bad design)
•
More...
Targeting specific 
implementation (e.g., 
programming language, 
compiler, firmware, etc.)
Targetting specific 
implementation (e.g., CPU 
family, implementatino of 
architecture, etc.)
Mix of HW and SW 
attacks e.g.:
Spectre / Meltdown
What if the bug is in the 
„reference code” like HW 
ISA itself?
•
Problem with all implementations
not a specific one!
•
SW can’t trust HW at all...
13
HOW DID WE FIND IT?
We wanted to analyze Boot-SW where specific microcode runs but…
It was running on the RISC-V chip (which we had 0 experience with)
Moreover, it was a custom implementation of RISC-V with custom extensions and 
functionalities!
Boot-SW was written in AdaCore/SPARK language (which we had 0 experience 
with):
Is there any public offensive research on that language?
Did anyone ever hear about it before?
At that time none of the Reverse Engineering tools natively supported RISC-V
Including IDA Pro and Ghidra
14
HOW DID WE FIND IT?
We wanted to analyze Boot-SW where specific microcode runs but…
It was running on the RISC-V chip (which we had 0 experience with)
Moreover, it was a custom implementation of RISC-V with custom extensions and 
functionalities!
Boot-SW was written in AdaCore/SPARK language (which we had 0 experience 
with):
Is there any public offensive research on that language?
Did anyone ever hear about it before?
At that time none of the Reverse Engineering tools natively supported RISC-V
Including IDA Pro and Ghidra
During this talk we will describe our journey through all of the problems which 
resulted in a discovery of the ambiguity of the RISC-V specification
And one additional problem as well ;-)
15
RISC-V IN A NUTSHELL
RISC-V is an open standard instruction set architecture (ISA) based on 
established RISC principles
Unlike most other ISAs, the RISC-V ISA is provided under open-source licenses 
that do not require fees to use
The same RISC-V chip might have tons of different implementations
RISC-V has a small standard base ISA, with multiple standard extensions:
Potential huge fragmentation of the silicons
Everyone can easily add their own custom RISC-V extension (it’s open source!)
Even bigger fragmentation!
There are more than 500+ members of the RISC-V Foundation
16
RISC-V IN A NUTSHELL
RISC-V is an open standard instruction set architecture (ISA) based on 
established RISC principles
Unlike most other ISAs, the RISC-V ISA is provided under open-source licenses 
that do not require fees to use
The same RISC-V chip might have tons of different implementations
RISC-V has a small standard base ISA, with multiple standard extensions:
Huge fragmentation of the silicons
Everyone can easily add own custom RISC-V extension (it’s open source!)
Even bigger fragmentation!
17
RISC-V VS X86
x86(-64)
RISC-V
License
Fees for ISA and microarchitecture
No fee for ISA & microarchitecture
Instruction Set
CISC* 
RISC
ISA variants
16 / 32 / 64 bits
32 / 64 / 128 bits
Memory model
Register-memory architecture
Load-store architecture
Registers
16-bit: 6 semi-dedicated registers, BP and 
SP are not general-purpose
32-bit: 8 GPRs, including EBP and ESP
64-bit: 16 GPRs, including RBP and RSP
32 (16 in the embedded variant) –
including one always-zero register
XOM
Only using SLAT – requires 
hypervisor
Everywhere
SW ecosystem support
Linux, Windows, MacOS, more...
Linux only...
* Since Pentium Pro, x86 instructions are turned into micro ops (kind of like RISC)
18
RISC-V VS X86
Privilege modes / levels
19
RISC-V VS X86
Privilege modes / levels
https://medium.com/swlh/negative-rings-in-
intel-architecture-the-security-threats-youve-
probably-never-heard-of-d725a4b6f831
X86(-64):
20
RISC-V VS X86
Privilege modes / levels
https://medium.com/swlh/negative-rings-in-
intel-architecture-the-security-threats-youve-
probably-never-heard-of-d725a4b6f831
X86(-64):
RISC-V:
U-mode
S-mode
M-mode
User
Supervisor
Machine
Supported 
combinations:
•
M
•
M + U
•
M + S + U
21
RISC-V VS X86
Privilege modes / levels
https://medium.com/swlh/negative-rings-in-
intel-architecture-the-security-threats-youve-
probably-never-heard-of-d725a4b6f831
X86(-64):
RISC-V:
U-mode
HS-mode
M-mode
User
Hypervisor
Extended 
Supervisor
Machine
Supported 
combinations:
•
M
•
M + U
•
M + S + U
•
M + (V)S + (V)U
VS-mode
VU-mode
Virtualized 
User
Virtualized 
Supervisor
22
RISC-V VS X86
Privilege modes / levels
https://medium.com/swlh/negative-rings-in-
intel-architecture-the-security-threats-youve-
probably-never-heard-of-d725a4b6f831
X86(-64):