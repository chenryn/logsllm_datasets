Figure 914. Initialization of the IPC subsystem
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 29 of 153
[View full size image]
host_notify_init() initializes a system-wide notification mechanism that allows user programs to
request notifications on one of the host notification ports managed by Mach. Mac OS X 10.4 provides
only one notification port as part of this mechanism: HOST_NOTIFY_CALENDAR_CHANGE. A program can
use the host_request_notification() Mach routine to request the kernel to send it a message when
the system's date or time changes. Mac OS X has numerous other notification mechanisms, most of which
we will discuss in Section 9.16.
9.4. Name and Bootstrap Servers
Consider two programs communicating via Mach IPCsay, using the familiar client-server model. The
server will have receive rights to a port, which is how it will receive request messages from a client. A
client must possess send rights to such a port to send messages to the server. How does the client acquire
these rights? A rather contrived and impractical way is that the server task creates the client task. As the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 30 of 153
client task's creator, the server task can manipulate the client task's port space. Specifically, the server task
can insert send rights to the server port into the client's port space. A more reasonable alternativeone used
in practiceis that every task is created with send rights to a system-wide server that acts as a trusted
intermediary. Mach-based systems have such an intermediary: the Network Message Server
(netmsgserver).
9.4.1. The Network Message Server
A Mach program desiring to receive messages on a port can publish the port through the netmsgserver.
The publication process involves the server task registering the server port, along with an associated
ASCII string name, with the netmsgserver. Since a client task will have send rights to a port that
netmsgserver is listening on, it can send a lookup message containing the ASCII string associated with
the desired service.
// ipc_common.h (shared between the client and the server)
#define SERVICE_NAME "com.osxbook.SomeService"
// ipc_server.c
#include "ipc_common.h"
...
kern_return_t kr;
port_t server_port;
server_port = mach_port_allocate(...);
...
kr = netname_check_in(name_server_port,
(netname_name_t)SERVICE_NAME,
mach_task_self(),
server_port);
...
The first argument to the netname_check_in call is the task's port to the Network Name Server. The
global variable name_server_port represents send rights to the default system-wide name server. The
second argument is the ASCII name of the service to be checked in. The third argument is a
signaturetypically a port to which the calling task has send rights. The signature is required later, when
checking out (i.e., removing the port from the name server's namespace) the server port, which is the
fourth argument.
...
kr = netname_check_out(name_server_port,
(netname_name_t)SERVICE_NAME,
mach_task_self());
...
Once a server task checks in a port successfully, a client can look it up using the ASCII name that the
server used for it.
// ipc_client.c
#include "ipc_common.h"
...
kern_return_t kr;
port_t server_port;
...
kr = netname_look_up(name_server_port,
(netname_name_t)"*",
(netname_name_t)SERVICE_NAME,
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 31 of 153
&server_port);
...
The second argument is the host name whose Network Name Server is to be queried. An empty string
represents the local host, whereas the "*" string specifies all hosts on the local network, resulting in a
broadcast lookup.
We noted earlier that the design of Mach's IPC allows for transparent extension to a distributed
environment, even though the kernel does not have any explicit support for distributed IPC. Two
programs residing on different machines can communicate using Mach IPC if both machines are running
an intermediary user-level program that extends Mach IPC across a network. The netmsgserver
transparently handles servers and clients residing on different machines. Whereas it communicates with
tasks on the local machine using regular, local Mach IPC, it can communicate with other netmsgserver
tasks on the network using arbitrary networking protocols, forwarding messages sent to local proxy ports
to the appropriate remote netmsgserver tasks. Thus, the netmsgserver works both as a name server
(allowing a network-wide name registration of ports) and a proxy server for distributed IPC (performing
network-transparent message transfers). Mac OS X provides a conceptually similar facility called
Distributed Objects (see Section 9.14) for use by Cocoa programs.
9.4.2. The Bootstrap Server
Mac OS X does not provide a netmsgserver, or rather, it doesn't provide a network-capable
netmsgserver. It does provide a local name serverthe Bootstrap Serverwhich allows tasks to publish
ports that other tasks on the same machine can send messages to. The Bootstrap Server's functionality is
provided by the bootstrap task, whose program encapsulation is the launchd program. Besides managing
name-port bindings in its role as the Mach name server, the Bootstrap Server also initiates certain
(typically on-demand) system daemonsspecifically those that have not been migrated to the higher-level
server interface exported by launchd.
Why Use a Local Name Server?
The need for a local name server arises from the fact that Mach port namespaces are local to
tasks. Even though the kernel manages port structures, there is no kernel-wide global port
namespace. Exporting services to clients through Mach ports would involve sharing of ports
that provide access to these services. To achieve this, an external entity must act as the port
name server, allowing service names and associated ports to be registered and looked up.
The Bootstrap Server was originally created by NeXT for its NEXTSTEP operating system.
9.4.2.1. The Bootstrap Port
Each task has a bootstrap port that it inherits from its parent task. The bootstrap port allows a task to
access various system services. The Bootstrap Server provides its own service port to its descendant tasks
via their bootstrap ports. Therefore, all direct descendants of the Bootstrap Server receive privileged
bootstrap ports. It is possible for a parent task to change its bootstrap port while creating a tasksay, to limit
the set of services available to the child task. System services that execute untrusted tasks replace the
Mach bootstrap task special port with a subset port. A task can retrieve its default bootstrap port by using
task_get_bootstrap_port().
9.4.2.2. The Bootstrap Context
The scope of the bootstrap task's lookup mechanism available to a subsequent task, as determined by the
latter task's bootstrap port, is referred to as the task's bootstrap context. In other words, a task's bootstrap
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 32 of 153
context determines which services (the corresponding ports, that is) the task can look up. There is a single
top-level bootstrap context when Mac OS X boots: the startup context. launchd executes in this context,
and so do early system services that rely on being able to look up various Mach ports. Subsequent, less
privileged bootstrap contexts can be created by the system for running programs that may be untrusted.
For example, when a user logs in, the bootstrap task creates a login context, which is a subset of the
startup context. All of a user's processes are in the login context.
More Context on Contexts
In general, if a process was started in a user's login context, its children are automatically in
the login context. Similarly, a process running in the startup context will spawn children that
run in the startup context as well, unless the parent explicitly calls the Bootstrap Server to
create a subset context. Recall from Chapter 5 the example of a user logging in both
graphically (through loginwindow.app, at the console) and through SSH. When a user logs
in by providing a username and password to loginwindow.app's GUI (or automatically, if
configured), a new login context is created for the user. Several user-specific services are
present in the login context but not in the startup context. If the same user logs in at the
console, by first providing >console as the username to loginwindow.app (which will cause
it to exit, leading to launchd running a getty process on the console) and then typing his or
her username and password, the user will be in the startup context. All programs in the chain
of processes involved in the console loginlaunchd, getty, login, and the user's shellremain
in the startup context because launchd runs in the startup context, and the others do not
create any subset context.
Similarly, the SSH daemon is launched at system boot time in the startup context. Therefore,
logging in via SSH will put the user in the startup context. We will see an example in Section
9.4.3.1 of using the bootstrap_info() call to retrieve information about all known services
in a context. This call does not return information on services that are defined only in subset
contexts, unless the subset port is an ancestor of the bootstrap port (bootstrap_port).
Consequently, running our service-listing program will show different results depending on
how you are logged in.
9.4.2.3. Debugging the Bootstrap Server
When experimenting with the Bootstrap Server or launchd in general, you may find it worthwhile to
configure launchd to log debugging messages. You can arrange for log messages from launchd to be
written to a file by adjusting launchd's log level and configuring the system log daemon (syslogd) not to
ignore these messages. There are multiple ways to adjust launchd's log level.
If you wish to debug launchd from the point where it starts, you should create a system-wide launchd
configuration file (/etc/launchd.conf) with the following contents:
# /etc/launchd.conf
log level debug
When launchd starts, the contents of launchd.conf are run as subcommands through the launchctl
program.
Setting a log-level value of debug will cause launchd to generate a substantial amount of debugging
output.
Alternatively, you can create a per-user launchd configuration file (~/.launchd.conf), which will apply
the log-level change only to the per-user local scope.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 33 of 153
Moreover, if you only wish to change launchd's log level temporarily, you can run the launchctl
program yourself.
launchd generates its log messages using the syslog(3) API. syslogd selects which messages to log
based on rules specified in its configuration file (/etc/syslog.conf). The default rules do not include
debugging or informational messages from launchd. You can temporarily log all launchd messages to a
specific file by adding a rule such as the following to /etc/syslog.conf:
# /etc/syslog.conf
...
launchd.* /var/log/launchd_debug.log
Thereafter, you must either send syslogd a hangup signal (SIGHUP) or restart it. In particular, you can
examine /var/log/launchd_debug.log after system startup to see subset bootstrap contexts being
created and disabled as users log in and log out.
Registered service 2307 bootstrap 1103: com.apple.SecurityServer
...
Service checkin attempt for service /usr/sbin/cupsd bootstrap 1103
bootstrap_check_in service /usr/sbin/cupsd unknown
received message on port 1103
Handled request.
Server create attempt: "/usr/sbin/cupsd -f" bootstrap 1103
adding new server "/usr/sbin/cupsd -f" with uid 0
Allocating port b503 for server /usr/sbin/cupsd -f
New server b503 in bootstrap 1103: "/usr/sbin/cupsd -f"
received message on port b503
Handled request.
Service creation attempt for service /usr/sbin/cupsd bootstrap b503
Created new service b603 in bootstrap 1103: /usr/sbin/cupsd
received message on port b503
Handled request.
Service checkin attempt for service /usr/sbin/cups
...
Subset create attempt: bootstrap 1103, requestor: ad07
Created bootstrap subset ac07 parent 1103 requestor ad07
...
Received dead name notification for bootstrap subset ac07 requestor port ad07
...
9.4.3. The Bootstrap Server API
Let us first look at examples of functions supported by the Mac OS X Bootstrap Server, after which we
will see examples of communicating with the server using these functions.
bootstrap_create_server() defines a server that can be launched and relaunched by the Bootstrap
Server in the context corresponding to bootstrap_port.
kern_return_t
bootstrap_create_server(mach_port_t bootstrap_port,
cmd_t server_command,
integer_t server_uid,
boolean_t on_demand,
mach_port_t *server_port);
The on_demand argument determines the relaunching behavior as managed by launchd. If on_demand is
true, launchd will relaunch a nonrunning server when any of the registered service ports is used for the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 34 of 153
first time. If on_demand is false, launchd will relaunch the server as soon as the server exits, regardless of
whether any of its service ports are in use. The server task created because of relaunching has
server_port as its bootstrap port. The server abstraction created by this call is automatically deleted
when all of its associated services are deleted and the server program has exited.
Services associated with the server can be declared by calling bootstrap_create_service(), with
server_port (obtained by calling bootstrap_create_server()) specified as the bootstrap port in that
call.
kern_return_t
bootstrap_create_service(mach_port_t bootstrap_port,
name_t service_name,
mach_port_t *service_port);
bootstrap_create_service() creates a port and binds service_name to it. Send rights to the newly
created port are returned in service_port. Later on, a service may call bootstrap_check_in() to check
in the binding: In doing so, the caller will acquire receive rights for the bound port and the service will be
made active. Thus, bootstrap_create_service() allows establishment of a name port binding before
the backing service is even available. Lookups performed on bindings created by this mechanism return
send rights to service_port, even if no service has checked in yet. If a caller uses such rights to send
requests to the port, the messages will be queued until a server checks in.
kern_return_t
bootstrap_check_in(mach_port_t bootstrap_port,
name_t service_name,
mach_port_t *service_port);
bootstrap_check_in() returns the receive rights for the service named by service_name, thus making
the service active. The service must already be defined in the bootstrap context by an earlier call to
bootstrap_create_service(). When used in conjunction with bootstrap_subset(),
bootstrap_check_in() can be used to create services that are available only to a subset of tasks. It is an
error to attempt to check in an already active service.
bootstrap_register() registers a send right for the service port specified by service_port, with
service_name specifying the service.
kern_return_t
bootstrap_register(mach_port_t bootstrap_port,
name_t service_name,
mach_port_t service_port);
After a successful service registration, if a client looks up the service, the Bootstrap Server will provide
send rights for the bound port to the client. Although you cannot register a service if an active binding
already exists, you can register a service if an inactive binding exists. In the latter case, the existing
service port, which the Bootstrap Server would have receive rights to, will be deallocated. In particular, if
service_port is MACH_PORT_NULL, this can be used to undeclare (shut down) a declared service.
Each service created by the Bootstrap Server has an associated backup port, which the Bootstrap Server
uses to detect when a service is no longer being served. When this happens, the Bootstrap Server regains
all rights to the named port. Clients can continue to perform successful lookups on the port while the
Bootstrap Server has receive rights to the port. If a client wishes to determine whether the service is active
or not, it must call bootstrap_status(). A restarting service that wishes to resume serving existing
clients must first attempt to call bootstrap_check_in() to prevent the original port from being
destroyed.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 35 of 153
bootstrap_look_up() returns send rights for the service port of the service specified by service_name.
A successful return means that the service must have been either declared or registered under this name,
although it is not guaranteed to be active. bootstrap_status() can be used to check whether the service
is active.
kern_return_t
bootstrap_look_up(mach_port_t bootstrap_port,
name_service_t service_name,
mach_port_t *service_port);
bootstrap_look_up_array() returns send rights for the service ports of multiple services. The
service_names array specifies the service names to look up, whereas the service_ports array contains
the corresponding looked-up service ports. The Boolean out parameter all_services_known is true on
return if all specified service names are known; it is false otherwise.
kern_return_t
bootstrap_look_up_array(mach_port_t bootstrap_port,
name_array_t service_names,
int service_names_cnt,
port_array_t *service_port,
int *service_ports_cnt,
boolean_t *all_services_known);
bootstrap_status() returns whether a service is known to users of the specified bootstrap port and
whether a server is able to receive messages on an associated service portthat is, whether the service is
active. Note that if a service is known but not active, then the Bootstrap Server has receive rights for the
service port.
kern_return_t
bootstrap_status(mach_port_t bootstrap_port,
name_t service_name,
bootstrap_status_t *service_active);
bootstrap_info() returns information about all services that are known, except those that are defined
only in subset contextsunless the subset port is an ancestor of bootstrap_port. The service_names
array contains the names of all known services. The server_names array contains the namesif knownof
the corresponding servers that provide the services. The service_active array contains a Boolean value
for each name in the service_names array. This value is true for services that are receiving messages sent
to their ports and false for the rest.
kern_return_t
bootstrap_info(port_t bootstrap_port,
name_array_t *service_names,
int *service_names_cnt,
name_array_t *server_names,
int *server_names_cnt,
bool_array_t *service_active,
int *service_active_cnt);
bootstrap_subset() returns a new port to be used as a subset bootstrap port. The new port is similar to
bootstrap_port, but any ports dynamically registered by calling bootstrap_register() are available
only to tasks using subset_port or its descendants.
kern_return_t
bootstrap_subset(mach_port_t bootstrap_port,
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 36 of 153