        r1.i = *(uint64_t*)(ip);
        ip += sizeof(uint64_t);
        r1.i = mem[r1.i];           // Out-of-bounds Read
        push(r1);
        break;
      case OP_POP_M:
        r1.i = *(uint64_t*)(ip);
        ip += sizeof(uint64_t);
        pop(r2);
        mem[r1.i] = r2.i;           // Out-of-bounds Write
        break;
Scratch内存mem放在真正的堆栈上，这意味着可以轻松地使用两个操作码从堆栈中读取内容并编写ROP链：
    int yr_execute_code(
        YR_RULES* rules,
        YR_SCAN_CONTEXT* context,
        int timeout,
        time_t start_time)
    {
      int64_t mem[MEM_SIZE];
      ...truncated
## 扩充已编译的规则
所以我要做的第一件事就是用我手工制作的YARA程序集创建一个编译后的规则。这并不难，我所要做的就是：
  * 将二进制规则作为模板读取
  * 跟随标头到code_start
  * 汇编新代码
  * 注入新代码
  * 在我的代码之后更新所有的提示
  * 将重新定位表更新到正确的偏移量
  * 删除指向旧代码的重定位，这样它们就不会更改我的代码
  * 修补文件散列
我决定从头开始构建一条规则会更容易，或者至少更不容易出错。最基本的考验将是自己重建以前的空规则。
## 大小问题
在这一点上，我想解决让人头疼的文件大小问题。这有点烦人，我认为这是一个很好的测试，我已经学到了什么。
假设YARA只要指向有效数据，就不关心目标指向哪里，我选择将我的代码放在文件体的末尾，这导致了以下结构：
    YR_HDR // file header
    YARA_RULES_FILE_HEADER
    YR_RULE 
    YR_RULE // null rule
    YR_EXTERNAL_VARIABLE // null external
    YR_NAMESPACE
    CHAR[] namespace_name
    CHAR[] rule_name
    YR_AC_MATCH_TABLE
    EMPTY_TRANSITION_TABLE
    MY_CODE
    RELOCATION_TABLE
    END_OF_RELOCATION_MARKER
    FILE_HASH
由于这个事实，重定位表只包含需要重定位的偏移量，所以重定位表要小得多。
直到现在，我还没有讨论YR_AC_MATCH_TABLE和EMPTY_TRANSITION_TABLE结构。我很确定这些都是用在 [Aho-Corasick算法](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm)上的。我尽力不理睬他们。
## 到达这里是乐趣的一半。
遗憾的是，在让YARA在yr_execute_code中执行字节码之前，我们必须通过_yr_rules_scan_mem_block，它使用前面提到的
Aho-Corasick 结构：
    uint16_t index;
    uint32_t state = YR_AC_ROOT_STATE;
    ...
    index = block_data[i++] + 1;  // > 32;
        transition = transition_table[state + index];
      }
      else
      {
        transition = 0;
        break;
      }
    }
    state = transition >> 32;       // objects_table，如果该指针被覆盖，则会崩溃，因为context结构也被分配到堆栈上。
    typedef struct _YR_SCAN_CONTEXT
    {
      uint64_t  file_size;
      uint64_t  entry_point;
      int flags;
      int tidx;
      void* user_data;
      YR_MEMORY_BLOCK_ITERATOR*  iterator;
      YR_HASH_TABLE*  objects_table;    // objects_table)并静默地退出：
    YR_TRYCATCH(
    !(flags & SCAN_FLAGS_NO_TRYCATCH), /* <-- this flag is not set */
    {
        result = yr_execute_code(
            rules,
            &context,
            timeout,
            start_time);
    },{
        result = ERROR_COULD_NOT_MAP_FILE;
    });
## 小工具
我亲手挑选了这些[小玩意](https://github.com/bnbdr/swisscheese/blob/master/gadgets.md)，以适应我的PoC。我用过不止一次。这些文件中的某些部分需要更改yarasm文件中的值。
## Attack vector
任何允许运行用户提供的规则文件而不验证它不是二进制规则的受害者或服务。无论是否扫描目标文件这应该都可以工作。
## 措施
  * 检查对Scratch内存的每一次访问
  * 需要一个显式标志来加载并运行编译后的规则
  * 检查每个重新定位的地址是否在加载的文件中
  * 使加载的文件成为只读的
## CVE
这两个漏洞分别被指定为CVE-ID CVE-2018-12034和CVE-2018-12035。
## 注意
  * 这项研究是在32位YARA 3.7.1上完成的，在正式发布页面的二进制文件上进行了测试
  * 这是在发布之前私下披露的
  * 这是我在业余时间所做的事情，不要对我进行评判。