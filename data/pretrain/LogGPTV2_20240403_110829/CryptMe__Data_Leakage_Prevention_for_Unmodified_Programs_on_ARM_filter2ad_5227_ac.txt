show the advantages and disadvantages of each option in the next paragraphs.
Selecting On-chip Memory. On-chip caches are small static RAM that are tightly
coupled with a processor. It buﬀers recently accessed memories with very low
access latency. In the recently shipped ARM SoCs, the capacity of a Level-2
(L2) cache can achieve several megabytes. When it loses power supply, all of its
contents are lost. Therefore, in literatures, many solutions seek to defeat physical
attacks to the DRAM chip using L2 caches [8,36].
iRAM is another on-chip memory that is more like a traditional DRAM chip.
Most manufacturers integrate a 256 KB iRAM into their products to run boot
code that initializes other SoC components. After that, all of its storage is free
to use. During a reboot, the immutable booting ﬁrmware explicitly erases all the
iRAM content [8]. Therefore, iRAM is also immune to cold-boot attacks. Table 1
summaries pros and cons for both L2 cache and iRAM.
Both options are suitable to defeat physical attacks. However, using cache
has many drawbacks. First, even though cache can be used as SoC-bound mem-
ory storage, the dynamic nature of its allocation algorithm makes it diﬃcult to
lock its mapping to the physical memory address. Second, although many ARM
processors support cache locking, this feature itself only beneﬁts programs requir-
ing customized cache allocation to maximize cache usage. As the size of cache
390
C. Cao et al.
is growing in each generation of processors, the need for customized cache use
is diminishing. As a consequence, this feature is becoming obsolete in the latest
generations of ARM processors such as Cortex-A57 [3]. Furthermore, cache is
designed to ease the bottleneck at the slow memory operations. Monopolizing
cache for security purpose can severely degrade the overall system performances.
Therefore, in CryptMe, we choose iRAM to back the clear-text working memory.
Memory Encryption. Building atop the page table synchronization mecha-
nism introduced in Sect. 4.2, SPC further diﬀerentiates the types of page table
updates for a SenProcess. In particular, within the shared data structure
shared struct, a ﬂag indicating the property of the corresponding fault page
is added. The ﬂag instructs SPC how to set up the page table – to duplicate
the normal-world page table entry that points to an identical normal DRAM
page (e.g., for a code page), or to allocate a new page in the iRAM (e.g., for an
anonymous data page). In the latter case, SPC replaces the target normal-world
DRAM page address with the newly allocated iRAM page address in the secure-
world page table entry, and then maintains the mapping. Since the capacity of
an iRAM chip is limited, SPC cannot meet all the page table requests of a Sen-
Process. We introduce a sliding window mechanism to address this problem.
Sliding Window. SPC assigns a dynamic number of iRAM pages to each Sen-
Process. Starting from the ﬁrst available iRAM page, SPC keeps a circular index
to the next available iRAM page. Page faults corresponding to SenData accesses
continue to consume iRAM pages until the assigned pages are used up. In this
case, the circular index points to the ﬁrst iRAM page in the window. SPC then
encrypts that iRAM page and copies it to the corresponding DRAM page. Finally,
this iRAM page is assigned to be used for the newly occurred page fault request.
4.4 Disabling Access to the Sliding Window
We have ensured that no clear-text SenData would occur in the DRAM. How-
ever, privileged kernel can still read out any program data in the sliding window
contained in iRAM. This ﬂaw actually exists in all the existing software-based
memory encryption solutions, such as Bear [18], RamCrypt [13], and Crypt-
Keeper [29]. Moreover, it is possible that a local attacker issues DMA requests
to iRAM. CryptMe addresses this threat by enforcing hardware-based access
control to iRAM. More speciﬁcally, during booting, CryptMe conﬁgures the
CSU available in TrustZone so that normal world code, including the Linux
kernel, and any other peripherals, cannot access iRAM. This eﬀectively enforces
security requirement R2. That is, iRAM that holds clear-text SenData cannot
be accessed by any entities other than the secure world code.
5 Implementation
We have implemented a full prototype of CryptMe on a Freescale i.MX6q
experiment board which features an ARM Cortex-A9 processor with 1 GB DDR3
CryptMe: Data Leakage Prevention on ARM Devices
391
DRAM and 256 KB iRAM. Our implementation includes two parts. In the secure
world, the implementation of SPC comprises around 5.3K LOC of C, and 0.5K
LOC of assembly. In the normal world, we instrument the Linux kernel version
3.18.24 to be CryptMe-aware with 300 LOC of modiﬁcation.
5.1 Secure World
The experiment board supports High Assurance Boot (HAB), a proprietary
technology to ensure trusted boot. After power on, a proprietary boot ROM
in the board executes to initialize critical system components and verify the
integrity of the next stage image – in our case, the SPC. If SPC passes checking,
it gets execution privilege in the secure world. Otherwise, the ROM will be reset.
To disable access to iRAM from DMA and the Linux kernel, SPC conﬁgures
the CSU to set iRAM as a secure master. In our implementation, we achieve that
by enabling the OCRAM TZ EN bit in register IOMUXC GPR10, and setting access
control policy in the low 8 bits of the CSU CSL26 register in CSU1. Then SPC
locks the conﬁguration. As a result, any intentions to make modiﬁcations to the
CSU conﬁguration will trigger a system reboot, including SPC itself.
Finally, SPC hands the control to the boot loader in the normal world –
uboot, which further boots the Linux OS.
5.2 Normal World
SenProcesses are still created and scheduled by the Linux kernel. We add a
customized system call execve enc to load a SenProcess. A process started
with execve enc has a tz ﬂag set in its task struct. We instrument the
ret to user and ret fast syscall routines, so that whenever a SenProcess
is about to return to user space, an smc instruction is issued to route the exe-
cution in the secure world. To run an unmodiﬁed program as a SenProcess,
the user only needs to invoke a wrapper program with the path of the target
program as a parameter. The wrapper program simply replaces itself with the
target program by invoking the execve enc system call.
5.3 Key Management and Encryption
When a SenProcess is created by execve enc, the SPC invokes the on-board
hardware-based random number generator to extract a 256-bit AES key anew.
This key is used to protect all the SenData of this SenProcess. When the the
process is terminated, the key can be safely discarded, because the anonymous
SenData which it protects, do not persist across invocations.
The experiment board we use integrates Cryptographic Acceleration and
Assurance Module (CAAM), which provides accelerated cryptographic compu-
tation, including AES, DES/3DES, RC4, etc. We employed CAAM to implement
1
CSU CSL is a set of registers only accessible in secure state that can set individual
slave’s access policy. Low 8 bits of CSU CSL26 is marked as reserved in the manual
of our experiment board, we found that it controls access to iRAM by experiments.
392
C. Cao et al.
(a) Image dumped with a
native Linux Kernel.
(b) Image dumped when
CryptMe is enabled.
Fig. 3. Physical memory image with and without CryptMe enabled.
a SoC bounded cryptographic service. Speciﬁcally, during an AES computation,
all the sensitive data, including the original AES key, its key schedule, and inter-
mediate results are redirected into a single reserved iRAM page. As a result, this
page, together with plain-text SenData, has the highest protection level in our
system. In CryptMe, we use AES-256 in CBC mode. The Initialization Vector
(IV) is chosen as the virtual address of the encrypted page.
6 Evaluation
In this section, we evaluate CryptMe in both security and performance. In
terms of security, we designed and conducted experiments to validate the security
requirements R1 and R2 in Sect. 3.2. In terms of performance, we measured the
overhead introduced by CryptMe compared with the base line in the native
Linux environment. Our evaluation was performed on the same board and the
same software environment as our prototype.
6.1 Security Evaluation
This section introduces several simulated attacks we designed to evaluate the
security features of CryptMe.
Meeting Security Requirement R1 . Security requirement R1 states that the
DRAM chip contains no clear-text SenData. In order to obtain the contents of
DRAM chip, we use the “memdump” utility to dump memory contents from the
/dev/mem device ﬁle. To test the eﬀectiveness of our system, we wrote a simple
program which constantly writes a magic string (“Hack Me”) into memory. Then
we dump the whole DRAM image to search for this magic string.
Figure 3 depicts the results on the dumped images we obtained from the
native Linux and CryptMe. The addresses displayed in these ﬁgures are the
oﬀsets from the beginning of the dump ﬁle. The beginning of this ﬁle represents
the contents of the beginning of DRAM, which has an oﬀset from the start
of physical memory map, therefore, the real physical address is calculated by
deducing this DRAM oﬀset from the displayed ﬁle oﬀset. Figure 3a shows the
result from the native Linux kernel. Clearly, we were able to locate a bunch of
magic strings in the dump image. Figure 3b shows the result we obtained when
CryptMe is enabled. Throughout the searching, we did not ﬁnd any occurrence
CryptMe: Data Leakage Prevention on ARM Devices
393
of “Hack Me” string. This indicates that all the magic strings are encrypted in
DRAM.
Meeting Security Requirement R2 . Security requirement R2 states that on-chip
iRAM cannot be accessed by any entities other than the secure-world software. To
simulate an attack targeting iRAM, we wrote a kernel module that deliberately
maps iRAM to the address space of a process using the vm iomap memory kernel
function, and attempted to read the iRAM content in the normal world. The result
shows that we can only obtain zero values, regardless of what we wrote into the
iRAM. On the contrary, after we disabled hardware access control enforcement
on iRAM as mentioned in Sect. 4.4, we were able to read out the data that the
process wrote.
Defeating Attacks Misusing Legitimate OS Functions. In a software-based attack
that misuses legitimate OS functions, the whole address space of a SenProcess
is exposed. A kind of such attacks takes advantage of the coredump function
which was originally designed to assist program analyses when a crash happens.
In particular, the attacker deliberately crashes the target program, and it triggers
a coredump operation which allows the OS to generate an image containing
target process’s memory contents, CPU context etc., when the crash happens.
As the image is stored in the persistent storage (i.e., ﬂash chip in an IoT device),
the attacker could easily read it out.
In order to simulate such an attack, we sent a “SIGSEGV” signal to the
victim SenProcess to trigger a coredump after it writes a bunch of magic values
(0xEF87AE12) into its anonymous memory segment. We got the coredump images
of this process from the systems running with and without CryptMe enabled.
As expected, we successfully found the target value in the image dumped from
the native Linux system. On the contrary, we did not ﬁnd any occurrence of
0xEF87AE12 in the image dumped when CryptMe is enabled throughout the
searching process.
6.2 Performance Evaluation
To evaluate the performance overhead, we compare the benchmarks of pro-
grams in three system conﬁgurations. They are (1) native Linux system without
modiﬁcation, (2) CryptMe using the AES algorithm to encrypt pages being
swapped, and (3) CryptMe using plain copy to swap pages. We ﬁrst tested our
system with the LMbench micro-benchmark [25] to measure the overhead intro-
duced by world switches. This overhead is inevitable if we want to shield the
iRAM from attacks. Next we tested our system with a self-written AES bench-
mark. This lightweight cryptographic primitive is frequently used in IoT devices.
Finally, the performance of Nginx, a large complex web server is measured. Lots
of IoT devices expose a web interface for users to access their functionality or
to perform conﬁguration changes to them. To better understand the introduced
overhead, we designed experiments to measure the time consumption of diﬀerent
steps in the program execution.
394
C. Cao et al.
Fig. 4. System call latency.
Fig. 5. Latency of memory reading
with varying buﬀer sizes.
LMbench. SPC acts as an intermediate layer in-between the user space in secure
world and kernel space in normal world. This design doubles the length of path to
travel from user space to the Linux kernel and increases context-switch overhead.
Therefore, we ﬁrst report our results on the lat syscall test, which measures
the response time for various system calls.
Figure 4 depicts the results of null, read, write, stat, fstat, and open
operations [25]. As shown in the ﬁgure, compared with the native Linux system,
it takes CryptMe almost 3 times longer to complete null and read operations.
However, such overhead is amortized in other non-trivial operations. For exam-
ple, the performance overhead for the open()/close() system call is only about
1.5 times. Moreover, CryptMe with AES encryption and CryptMe with plain
copy exhibit very similar performance. This is expected because a system call is
not likely to trigger a page swapping between DRAM and iRAM.
lat mem rd is a program included in the LMbemch test-suite that measures
memory read latency. It reads memory buﬀers with varying sizes from 512 B to
768 KB. Because the maximum working set is obviously larger than the sliding
window of a SenProcess, lat mem rd eﬀectively exposes and even enlarges
performance overhead caused by CryptMe.
We explain the measured data as following. Since lat mem rd is a memory-
intensive program, when the size of the buﬀer is small enough to be ﬁt in the
sliding window, very few pages need to be swapped in and out of the iRAM. As
a result, no additional CPU cycles are needed. This is what we can see in Fig. 5
before the array size reaches 0.25 MB. At this stage, the three lines overlap
with one another. When the buﬀer size exceeds that of the sliding window,
old pages in the sliding window need to be swapped out to make room for
new page requests. The introduced swapping operations indeed cause an abrupt
performance degradation. Additional overhead can also be observed between
CryptMe with encryption and CryptMe with plain copy. This is caused by
the additional CPU cycles spent on the AES encryption.
Although the overhead introduced by CryptMe appears to be signiﬁcant
in this experiment, we would like to argue that: (1) such extremely memory-
CryptMe: Data Leakage Prevention on ARM Devices
395
intensive use cases are very rare in real-world applications, especially in IoT
devices. And (2) with the development of hardware technologies and reduced
costs, commercial IoT devices on the market are often loaded with computing
powers that are signiﬁcantly beyond their needs.
Table 2. AES-128 throughputs with diﬀerent numbers of threads (completed AES
blocks per second)
Thread # 1
2
3
4
5
6
Native
62011 63832 63862 62847 62858 62863
Encryption 63187 64213 64256 63243 63268 64316
Table 3. Nginx performance (requests per second)
Sliding window = 16 Sliding window = 32 Sliding window = 48
Plain
109.30
Encryption