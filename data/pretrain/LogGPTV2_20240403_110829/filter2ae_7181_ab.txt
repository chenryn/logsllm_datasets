    ALTER PROCEDURE [dbo].[SearchLeaves]
      @searchleavetype NVARCHAR(50) = ''
    AS
    BEGIN
      DECLARE @query NVARCHAR(100)
      DECLARE @msearch NVARCHAR(55)
      SET @msearch = '%' + @searchleavetype + '%'
      SET @query = 'SELECT * FROM LEAVES WHERE category LIKE @search'
      EXEC sp_executesql @query, N'@search VARCHAR(55)', @msearch
    END
可以创建添加“%”字符的新字符串，然后将此新字符串作为参数传递给SQL语句。  
缓解SQL注入漏洞的另一个操作是只向负责执行SQL语句的当前用户授予有限的权限。  
让我们假设有一个网页，它显示员工的休假情况。可以在数据库中创建新的SQL用户。通过映射自定义角色，用户只能执行存储过程。通过在此用户的上下文中执行存储过程，会将预期的数据重新调整到网页。  
考虑创建以下角色和用户以减轻SQL注入：
    CREATE ROLE CustomFetchDataRole
    CREATE LOGIN TestUser WITH PASSWORD = '$Passw0rd@123##’
    ALTER ROLE CustomFetchDataRole ADD MEMBER [TestUser]
    IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = N' TestUser ')
    BEGIN
      CREATE USER [TestUser] FOR LOGIN [TestUser]
    END;
    GO
    GRANT EXECUTE ON dbo.uspGetLeavesInfo TO TestUser
    GRANT EXEC ON TYPE::DBO.MyTableType TO [CustomFetchDataRole]
仅授予对数据库有限的权限可以在保护数据方面起到很大的作用。恶意用户将无法直接访问任何表，即使他能够以某种方式登录到SQL
Server。现在，存储过程(考虑参数化)要么将预期的数据返回到网页，要么不返回任何内容。  
另一件需要记住的重要事情是，数据库管理员应该禁用“xp_cmdshell”存储过程。数据库用户不应具有启用此存储过程的权限。开发人员永远不应使用此存储过程，因为恶意用户可以使用此过程执行操作系统级命令。  
数据库管理员应启用SQL Server审核日志，以保留登录审核，SQL Server审核，SQL跟踪，DML，DDL和登录触发事件的日志。  
考虑到攻击的严重性，SQL注入是最危险的攻击，它可以危害整个数据库服务器和Web服务器。可以通过对存储过程进行参数化并仅向SQL
DB用户授予有限的权限来阻止此攻击。  
SQL DB管理员应创建不同的用户，并仅允许他们访问服务器上的特定数据库。只允许有限数量的用户访问单个数据库。每个用户必须仅具有访问数据库的有限权限。  
应禁用Sysadmin(SA)用户，而应创建具有精简权限的自定义系统管理员用户，这样，如果恶意用户以某种方式获得了对数据库的访问权限，他应该无法使用“SA”用户获得系统级权限。
# ASP.NET（本地文件包含）
LFI漏洞使得恶意用户能够访问Web服务器上的其他文件。这是OWASP 10漏洞列表中列出的最关键漏洞之一。  
下面是允许下载某些文档的示例ASP.NET代码。
    http://abcd.com/?
    Consider the below code:
    public partial class Downloads_Download : System.Web.UI.Page
    {
      string sBasePath="";
      protected void Page_Load(object sender, EventArgs e)
      {
        try
        {
          string filename = Request.QueryString["fname"];
          string sBasePath = System.Web.HttpContext.Current.Request.ServerVariables["APPL_PHYSICAL_PATH"];
          if (sBasePath.EndsWith("\\"))
            sBasePath = sBasePath.Substring(0, sBasePath.Length - 1);
          sBasePath = sBasePath + "\\" + ConfigurationManager.AppSettings["FilesPath"] + "\\" + filename; 
          Response.AddHeader("content-disposition", String.Format("attachment;filename={0}", filename));
          Response.WriteFile(sBasePath);
        }
        catch (Exception ex)
        {
    Response.Redirect("~/Error.aspx?message=" + ex.Message.ToString() + " path=" + sBasePath);
        }
      }
    }
让我们来浏览一下上面的代码，找出它的问题所在。  
“fname”参数在没有任何验证或清理的情况下被接受。此代码容易受到目录遍历漏洞和信息泄漏的影响，这些漏洞可能会泄露导致进一步威胁的敏感数据。  
应该以只允许下载特定文件扩展名的方式编写代码。Content type: application / octet-stream不安全，不应设置为switch
case函数中定义的默认content-type。  
看看下面的代码，它比之前的代码更安全：
    protected void Page_Load(object sender, EventArgs e)
      {
        //string file = Server.MapPath(HttpUtility.UrlEncode(functions.RF("file")));
        string file = Server.MapPath(functions.RQ("file"));
        if (File.Exists(file))
        {
          Regex reg = new Regex(@"\.(\w+)$");
          string ext = reg.Match(file).Groups[1].Value;
          switch (ext)
          {
            case "xls":
              Response.ContentType = "application/vnd.ms-excel";
              break;
            case "xlsx":
              Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
              break;
            case "ppt":
              Response.ContentType = "application/vnd.ms-powerpoint";
              break;
            case "pptx":
              Response.ContentType = "application/vnd.openxmlformats-officedocument.presentationml.presentation";
              break;
            default:
          Response.ContentType = " application/pdf ";
              break;
          }
          byte[] buffer = File.ReadAllBytes(file);
          Response.OutputStream.Write(buffer, 0, buffer.Length);
          Response.AddHeader("Content-Disposition", "attachment;filename=" + Path.GetFileName(file));
        }
        else
        {      
          Response.Write("This file Extension is not allowed");
        }
      }
在上面的代码中，用户只能下载扩展名为xls，xlsx，ppt，pptx和pdf的文件。  
开发者已经为每个文件扩展名设置了一个“content type”，这意味着对于PDF文件类型，content
type是application/pdf，并且只允许下载PDF文件。  
MIME(多用途互联网邮件扩展)内容类型描述内容/文件的媒体类型，帮助浏览器正确处理和显示内容。在下载或上传文件时，应用程序必须描述文件的“content
type”，否则，浏览器将不知道要处理的预期内容与报告的MIME类型不同。  
默认content type不应为“application/octet-stream”。开发人员不应在其代码中使用此content
type，除非是有别的目的。  
除了上述问题外，ASP.NET Web应用程序中还存在其他严重漏洞。虽然所提到的缓解步骤不足以保护ASP.NET
Web应用程序的整体安全，但通过遵循这些步骤，可以至少消除ASP.NET Web应用程序中的基本漏洞。我们将在即将发布的博客中讨论剩余的高风险漏洞。
    原文链接https://www.gspann.com/resources/blogs/high-risk-vulnerabilities-found-in-asp.net-web-applications