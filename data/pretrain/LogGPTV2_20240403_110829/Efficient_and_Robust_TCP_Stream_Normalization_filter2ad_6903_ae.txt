erating an inconsistent retransmission using two bit-strings
that the attacker believes hash to the same value, and check-
ing whether RoboNorm can detect the inconsistency. If the
connection does not get killed in spite of the inconsistent
retransmission, the attacker knows that he has created a col-
lision under RoboNorm’s hash function.
We argue that the attacker cannot break the hash func-
tion by guessing pn, an, and bn. Recall that the number
of prime numbers less than any number m is O( m
log m ).
Thus the number of n-bit prime numbers is approximately
n(cid:0)1 ). To break the hash func-
O( 2n
n(cid:0)1 ) (cid:25) O( 2n(cid:0)1
n ) (cid:0) O( 2n(cid:0)1
107
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:31 UTC from IEEE Xplore.  Restrictions apply. 
tion by guessing pn, an, and bn, the attacker must search
through each of the possible O( 2n(cid:0)1
n(cid:0)1 ) primes, and for each
prime the approximately 2n possible values of the random
numbers an and bn. We can see that guessing the hash func-
tion in this manner is computationally infeasible for n = 64
bit hashes that RoboNorm uses.
If the attacker does not know pn, an, or bn, then the only
way he can hope to generate colliding strings is by ran-
domly guessing pairs of strings. By the property of univer-
sal hash functions, the probability that the attacker guesses
a retransmission that hashes to the same value as any given
2n . This probability is van-
n-bit original segment hash is 1
ishingly small for n = 64 bit hashes, even if the attacker
splits his search amongst a large number of (say, a billion)
parallel connections.
To summarize, coping with attacks on RoboNorm boils
down to developing strategies to handle memory exhaus-
tion gracefully and choosing appropriate secure hash func-
tions. We employ two principal ideas here: (cid:2)rst, a simple
bene(cid:2)t-to-cost eviction scheme that we applied to both the
hash store and retransmission buffer; and second, additional
Bloom (cid:2)lters to augment the connection table.
7. Related Work
Section 1 brie(cid:3)y described the history of evasion attacks
and the normalization problem. Recent work [6] addresses
one type of evasions, namely an attacker attempting to pre-
vent a speci(cid:2)c signature match against text they transmit.
The authors developed a scheme based on introducing a
modest change in end-system TCP behavior in order to al-
low a monitor to detect attempts to ambiguously transmit
byte sequences that match a given set of signatures. Their
scheme is appealing in that by exploiting the introduced
end-system change, they avoid needing to reassemble TCP
byte streams. However, their scheme is also signi(cid:2)cantly
limited in that it only applies to evasions that correspond
to directly manipulating a known byte-sequence signature.
As such, the scheme does not handle cases where the ambi-
guity does not constitute an actual attack in itself, but only
confuses the monitor’s protocol parsing and obscures the
occurrence of an attack later in the stream.
Sugawara et al. [14] describe an FPGA-based solution
to ef(cid:2)cient TCP stream-level signature detection. Their sys-
tem detects inconsistent retransmissions by storing hashes
of transmitted packets. To handle retransmissions that do
not overlap with original segment boundaries, the authors
simply propose holding onto the partial overlaps till other
packets that (cid:147)(cid:2)ll the gap(cid:148) arrive. However, our trace eval-
uation shows that such an approach will result in a signi(cid:2)-
cant number of connections stalling on pending consistency
checks (see Figure 4(ii)); RoboNorm addresses this prob-
lem with the ACK promotion mechanism (x3.3).
108
Normalization as a general feature has been incorporated
into secure operating systems [15] and commercial prod-
ucts [16]. Some of these latter include explicit options to
check for inconsistent retransmissions [17], but do not pro-
vide technical details as to how such detection works. From
informal discussions with other vendors, it appears that a
common approach is to use payload hashes, but without ad-
dressing the crucial problem of misaligned retransmissions
for which the hashes cannot be matched.
Shankar and Paxson explored a different approach to de-
fending against evasion attacks which they term (cid:147)Active
Mapping(cid:148) [18]. Here, the idea is for the network monitor
to proactively determine how speci(cid:2)c end systems and net-
work paths will resolve potential ambiguities. While this ap-
proach is a valid point in the overall design space, we argue
that eliminating ambiguities, rather than attempting to cor-
rectly guess their outcome, provides a more robust founda-
tion for security monitoring technology.
Work by Levchenko et al. demonstrates in formal terms
that many security detection tasks (e.g., detecting SYN
(cid:3)ooding, port scans, connection hijacking and evasion at-
tacks) fundamentally require maintaining per-connection
state [19]. This (cid:2)nding highlights the importance of reduc-
ing the amount of per-connection state.
In work that is complementary to ours, Dharmapurikar
et al. explore how to robustly reassemble TCP byte streams
when faced with adversaries who attempt to overwhelm
the accompanying state management [20]. Reassembly in-
volves maintaining out-of-order data only until sequence
(cid:147)holes(cid:148) are (cid:2)lled, while normalization requires maintaining
data until it is acknowledged and hence requires a different
solution.
8. Conclusion
against
today’s
attackers
Defending networks
is
especially challenging for modern intrusion detec-
tion/prevention systems for two reasons: the sheer amount
of state they must maintain, and the possibility of resource-
exhaustion attacks on the defense system itself. Our work
shows how to cope with these challenges in the context of a
TCP stream normalizer called RoboNorm, whose job is to
detect all instances of inconsistent TCP retransmissions.
The two currently used methods to detect inconsistent
retransmissions(cid:151)maintaining complete contents of unac-
knowledged data, or maintaining only the corresponding
hashes(cid:151)suffer from a set of (cid:3)aws each. Systems that main-
tain complete contents consume an amount of memory
problematic for high-speed operation. Systems that main-
tain hashes cannot verify the consistency of the 20(cid:150)30%
of retransmissions that fail to preserve original segment
boundaries; as a result attackers can easily encode their eva-
sions in these unveri(cid:2)ed segments. RoboNorm stores hashes
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:31 UTC from IEEE Xplore.  Restrictions apply. 
of outstanding data and, with a careful design and occa-
sional alteration of end-to-end semantics, veri(cid:2)es the con-
sistency of all retransmissions. The resulting design is nec-
essarily somewhat complex, but still has a compact state
machine and is implementable at high speeds.
In considering resource exhaustion attacks, the obser-
vation that provisioning for a worst-case traf(cid:2)c pattern is
simply impractical led us to develop a simple bene(cid:2)t-to-
cost framework to evict connections when space is at a
premium. Another challenge is deciding when to initialize
state for new connections and when to reclaim state for ac-
tive connections with no outstanding data (of which there
are many); for both problems, we outline how we can use
Bloom (cid:2)lters effectively.
Evaluating RoboNorm on a set of traces collected from
different networks shows that it consumes 1(cid:150)2 orders of
magnitude less memory than the approach of storing all
outstanding bytes, while guaranteeing that all inconsistent
retransmissions will be detected. Thus, our most impor-
tant conclusion is that high-speed TCP stream normal-
ization does not have to choose between correctness and
implementability(cid:151)it can achieve both goals, while resist-
ing a range of resource exhaustion attacks.
Acknowledgments
We thank Stefan Savage, Robin Sommer, Nick Weaver,
and the anonymous reviewers for many useful comments
and suggestions. This work was supported by the Na-
tional Science Foundation grants ITR/ANI-0205519, NSF-
0433702, CNS-0627320, CNS-0716273, NSF-0716636,
and in part by a Cisco graduate fellowship, for which we are
grateful. Any opinions, (cid:2)ndings, and conclusions or recom-
mendations expressed in this material are those of the au-
thors or originators and do not necessarily re(cid:3)ect the views
of the National Science Foundation or Cisco Systems.
References
[1] M. Roesch, (cid:147)Snort: Lightweight intrusion detection
for networks,(cid:148) in Proc. USENIX LISA, November
1999.
[2] V. Paxson, (cid:147)Bro: a System for Detecting Network In-
truders in Real-Time,(cid:148) Computer Networks, vol. 31,
no. 23-24, pp. 2435(cid:150)2463, 1999.
[3] T. H. Ptacek and T. N. Newsham, (cid:147)Insertion, Evasion,
and Denial of Service: Eluding Network Intrusion De-
tection,(cid:148) Secure Networks, Inc., Tech. Rep., Jan. 1998,
http://insecure.org/stf/secnet ids/secnet ids.html.
[4] G. R. Malan, D. Watson, F. Jahanian, and P. How-
ell, (cid:147)Transport and Application Protocol Scrubbing,(cid:148)
in Proc. IEEE INFOCOM, Apr. 2000.
[5] M. Handley, V. Paxson, and C. Kreibich, (cid:147)Network In-
trusion Detection: Evasion, Traf(cid:2)c Normalization, and
End-to-End Protocol Semantics,(cid:148) in Proc. USENIX
Security Symposium, Aug. 2001.
[6] G. Varghese, J. A. Fingerhut, and F. Bonomi, (cid:147)Detect-
ing Evasion Attacks at High Speeds Without Reassem-
bly,(cid:148) in Proc. ACM SIGCOMM, Sept. 2006.
[7] Dug Song, (cid:147)fragroute,(cid:148) http://monkey.org/(cid:24)dugsong/
fragroute/.
[8] Sean Kerner, (cid:147)Open Source Metasploit Improves
Evasion,(cid:148) Aug. 2006, http://www.internetnews.com/
dev-news/article.php/3624501.
[9] Federico Biancuzzi, (cid:147)Metasploit 3.0 day,(cid:148) May 2007,
http://www.securityfocus.com/columnists/439.
[10] J. Postel, RFC 793: Transmission Control Protocol,
Sept. 1981.
[11] H. Dreger, A. Feldmann, V. Paxson, and R. Sommer,
(cid:147)Operational Experiences with High-Volume Network
Intrusion Detection,(cid:148) in Proceedings of CCS, 2004.
[12] F. Bonomi, M. Mitzenmacher, R. Panigrah, S. Singh,
and G. Varghese, (cid:147)Beyond Bloom Filters: From Ap-
proximate Membership Checks to Approximate State
Machines,(cid:148) in Proc. ACM SIGCOMM, Sept. 2006.
[13] J. L. Carter and M. N. Wegman, (cid:147)Universal classes of
hash functions (extended abstract),(cid:148) in Proc. of ACM
Symposium on Theory of computing, 1977, pp. 106(cid:150)
112.
[14] Y. Sugawara, M. Inaba, and K. Hiraki, (cid:147)High-speed
and Memory Ef(cid:2)cient TCP Stream Scanning Using
FPGA,(cid:148) in Proc. International Conference on Field
Programmable Logic and Applications, Aug. 2005.
[15] OpenBSD, (cid:147)PF: Scrub (Packet Normalization),(cid:148) 2006,
http://www.openbsd.org/faq/pf/scrub.html.
[16] Cisco Systems,
Inc., (cid:147)Con(cid:2)guring TCP/IP Nor-
malization and IP Reassembly Parameters,(cid:148) 2006,
www.cisco.com/univercd/cc/td/doc/product/lan/
cat6000/mod icn/ace/ace 301/securgd/tcpipnrm.pdf.
[17] (cid:151)(cid:151), (cid:147)Con(cid:2)guring TCP Normalization,(cid:148) 2006, http:
//www.cisco.com/en/US/products/ps6120/products
con(cid:2)guration guide chapter09186a008054ecb8.
html#wp1051891.
[18] U. Shankar and V. Paxson, (cid:147)Active Mapping: Resist-
ing NIDS Evasion Without Altering Traf(cid:2)c,(cid:148) in Proc.
IEEE Symposium on Security and Privacy, May 2003.
[19] K. Levchenko, R. Paturi, and G. Varghese, (cid:147)On the
Dif(cid:2)culty of Scalably Detecting Network Attacks,(cid:148) in
Proc. ACM CCS, Oct. 2004.
[20] S. Dharmapurikar and V. Paxson, (cid:147)Robust TCP
Stream Reassembly in the Presence of Adversaries,(cid:148)
in Proc. USENIX Security Symposium, Aug. 2005.
109
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:31 UTC from IEEE Xplore.  Restrictions apply. 
# Trace Characteristics
1 Date recorded
2 Trace duration (sec)
3 Contents
4 Reported capture losses
Univ1
31Aug04
300(cid:3)
All hdrs
3:3 (cid:1) 10(cid:0)6
Univ2
07Apr05
7,221
All pkts
0
Lab1
20Sep05
6,167
All TCP
3:0 (cid:1) 10(cid:0)3
Lab2
16Jan04
4,345
Super
26Aug04
3,606
All hdrs TCP hdrs
1.56%
4:8 (cid:1) 10(cid:0)5
Table 5. Summary of the collection method for the traces used in the paper.
segment hashes is expected to be low because connections
rarely have more than one such hole at a time [20]. Third,
we can track the age of a segment (required by the eviction
policies, see x6) with millisecond precision using a two-byte
timestamp. Finally, we need a pointer to the next segment
hash. We assume such pointers require 3 bytes, as our data
structures (cid:2)t comfortably in the 16 MB range that we can
address using 24-bit pointers. Adding these numbers up, we
(cid:2)nd that each segment hash consumes 15 bytes.
C Sizing the Connection Table
For each direction of a connection, we need to store a
3-byte pointer to the start of the segment hash list of the
connection, and a 3-byte pointer to the retransmission buffer
space for the connection (nil if the connection does not need
one). We also need 4 bytes to store the cumulative acknowl-
edgment sequence number for that direction, as this pro-
vides the basis for the relative sequence number used in the
(cid:2)rst hash of the segment hash list. To append new hashes
to the hash list quickly without traversing the entire list, we
also maintain a 3-byte pointer to the end of the hash list and
a 4 byte sequence number of the last byte seen so far. Thus,
each direction consumes 17 bytes.
If the normalizer is working on both directions of data,
we need 34 bytes as described above, plus the 12-byte con-
nection tuple (source and destination IP addresses and port
numbers, 4+4+2+2 bytes), plus some space to hold book-
keeping information (average clearing time of hashes and
average segment size per connection; see x6), which we as-
sume that with careful choice of units and encoding requires
2 more bytes, a total of 48 bytes. Note that we store state
for both directions of the connection in the same connec-
tion record, even though our algorithms treat each direction
separately.
A Trace Collection
Table 5 summarizes the collection methodology for the
traces used in the paper. The volume of traf(cid:2)c at most of the
sites is suf(cid:2)ciently high that it is dif(cid:2)cult to capture packet
traces without loss. The exception to this is the Univ2 trace,
which was recorded using specialized hardware that is able
to keep up with the high volume. For the other sites, while
we incurred non-zero capture losses, the reported rates were
low, as shown in row 4 of the table, other than for Super,
which incurred 1.56% reported losses. For the most part,
losses introduce imprecision in our quanti(cid:2)cation of fre-
quencies of various packet transmission patterns, but should
not cause signi(cid:2)cant bias, since it is reasonable to assume
that packet capture loss does not particularly correlate with
packet transmission patterns.
We also note that Univ1 is unusual compared to the
other traces in that it represents a composite made out of
19 independently captured traces, each of which utilized
per-connection sampling to record approximately 1/19th of
the total TCP (and UDP) traf(cid:2)c (the only available way to
capture traf(cid:2)c in that environment without massive losses).
Each of these sub-traces spanned 300 seconds, and were
recorded one after another. To derive results from the com-
posite trace, we either add up per-subtrace (cid:2)gures (when
computing aggregates), or take maxima across them (when
assessing per-connection worst-case behavior).
B Sizing a Segment Hash
First, a segment hash must contain a 8-byte collision-
resistant hash of the contents of the corresponding TCP seg-
ment. Next, we need to associate a range of sequence num-
bers with each hash. We can do so by explicitly storing the
ending sequence number as a 2-byte offset from the start-
ing sequence number, and implicitly determining the start-
ing sequence number by assuming it comes 1 octet after
the ending sequence number of the previous segment hash
(or from the cumulative acknowledgment sequence number
in the connection record, for the (cid:2)rst segment hash). With
such a scheme, we also need to introduce dummy segment
hashes for any (cid:147)holes(cid:148) in the sequence space for which we
have not received any data. The overhead of such dummy
110
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:31 UTC from IEEE Xplore.  Restrictions apply.