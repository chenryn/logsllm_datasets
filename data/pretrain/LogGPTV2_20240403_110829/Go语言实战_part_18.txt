### 5.6 公开与未公开的标识符

在设计高质量的 API 时，控制声明后的标识符可见性是非常重要的。Go 语言提供了一种机制来控制包内标识符（如类型、函数和方法）的可见性。通过这种方式，开发者可以按照自己的规则来管理标识符的可见性。在第 3 章中，我们讨论了如何从一个包引入标识符到另一个包。有时，你可能不希望将某些标识符暴露给外部包。在这种情况下，可以通过将这些标识符声明为未公开来实现。

#### 标识符的可见性规则

- **公开标识符**：以大写字母开头的标识符是公开的，可以在包外访问。
- **未公开标识符**：以小写字母开头的标识符是未公开的，只能在包内访问。

#### 示例程序

让我们通过一个示例程序来演示如何隐藏包内的未公开标识符。以下是代码清单 5-64 的内容：

**counters/counters.go**
```go
// counters 包提供告警计数器的功能
package counters

// alertCounter 是一个未公开的类型
// 用于保存告警计数
type alertCounter int
```

**listing64.go**
```go
// 这个示例程序展示无法从另一个包里访问未公开的标识符
package main

import (
    "fmt"
    "github.com/goinaction/code/chapter5/listing64/counters"
)

// main 是应用程序的入口
func main() {
    // 创建一个未公开类型的变量并初始化为 10
    counter := counters.alertCounter(10) // 编译错误: 不能引用未公开的名字 counters.alertCounter

    fmt.Printf("Counter: %d\n", counter)
}
```

在这个示例中，`alertCounter` 类型在 `counters` 包中被声明为未公开。因此，在 `main` 包中尝试访问它会导致编译错误。

#### 修改示例以使用工厂函数

为了使 `alertCounter` 类型能够被其他包使用，我们可以添加一个公开的工厂函数来创建该类型的实例。以下是修改后的代码清单 5-68：

**counters/counters.go**
```go
// counters 包提供告警计数器的功能
package counters

// alertCounter 是一个未公开的类型
// 用于保存告警计数
type alertCounter int

// New 创建并返回一个未公开的 alertCounter 类型的值
func New(value int) alertCounter {
    return alertCounter(value)
}
```

**listing68.go**
```go
// 这个示例程序展示如何访问另一个包的未公开标识符的值
package main

import (
    "fmt"
    "github.com/goinaction/code/chapter5/listing68/counters"
)

// main 是应用程序的入口
func main() {
    // 使用 counters 包公开的 New 函数来创建一个未公开类型的变量
    counter := counters.New(10)

    fmt.Printf("Counter: %d\n", counter)
}
```

在这个修改后的示例中，`New` 函数是公开的，它可以创建并返回一个未公开的 `alertCounter` 类型的值。这样，`main` 包就可以通过调用 `New` 函数来使用 `alertCounter` 类型。

#### 结构体字段的可见性

结构体字段的可见性也遵循相同的规则。以下是一个示例，展示了如何在结构体中处理公开和未公开的字段：

**entities/entities.go**
```go
// entities 包包含系统中与人有关的类型
package entities

// User 在程序里定义一个用户类型
type User struct {
    Name  string  // 公开字段
    email string  // 未公开字段
}
```

**listing71.go**
```go
// 这个示例程序展示公开的结构类型中未公开的字段无法直接访问
package main

import (
    "fmt"
    "github.com/goinaction/code/chapter5/listing71/entities"
)

// main 是应用程序的入口
func main() {
    // 创建 entities 包中的 User 类型的值
    u := entities.User{
        Name:  "Bill",
        email: "PI:EMAIL", // 编译错误: 结构字面量中结构 entities.User 的字段 'email' 未知
    }

    fmt.Printf("User: %v\n", u)
}
```

在这个示例中，`User` 结构体有一个公开的 `Name` 字段和一个未公开的 `email` 字段。尝试在 `main` 包中直接访问 `email` 字段会导致编译错误。

通过这些示例，我们可以看到如何在 Go 语言中控制标识符的可见性，并且如何通过工厂函数或其他方法来间接访问未公开的标识符。