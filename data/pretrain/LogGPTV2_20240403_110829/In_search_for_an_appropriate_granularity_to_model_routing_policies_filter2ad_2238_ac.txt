maximum allowed path length l. There are many other situations
where recursion is stopped. For example, we allow the speciﬁca-
tion of a threshold for the maximum recursion depth. Additionally,
no recursion is required if we arrive at an already visited AS hop.
In our topology of Figure 4, the ﬁlters 781 and 782 are detected
while looking at neighbor AS 1 and AS 2 at recursion depth 1.
While at AS 1, there will be a recursive call for AS 2 with recur-
sion depth 2. However, AS 2 has already been visited and thus the
candidate ﬁlters have been already computed. Recursion can thus
be stopped safely without losing information.
4.2 Freedom in Filters Location
We now apply the algorithm in Figure 6 to compute candidate
combinations on the AS-topology of Section 2.3. The goal is to
give an estimate of the choice we have in terms of ﬁlter candi-
dates when trying to achieve consistency between best routes in
our model and observed AS paths. For this, we randomly select an
extensive number of preﬁxes, called psample (see Table 2).
# preﬁxes
# originating ASs
# distinct AS paths
# preﬁxes per AS path
- mean
- standard deviation
# distinct AS paths to a preﬁx
- mean
- standard deviation
# mismatches per preﬁx
- mean
- standard deviation
50,000
10,575
2,267,296
3.6
11.8
161
42
3,328
5,191
Table 2: Statistics on psample.
psample contains more than 2 million AS paths to 50,000 pre-
ﬁxes. For each preﬁx, we have a mean of 160 distinct AS paths,
with an average of 3.6 preﬁxes sharing a common AS path. While
running our algorithm, we detected in total more than 10 million
mismatches, i.e., AS hops that do not select the “correct ” sufﬁx of
an observed route. Even for a single preﬁx, the number of detected
mismatches is considerable, with 3,328 on average.
To study the impact of recursion on the number of ﬁlter candi-
dates found, we run our algorithm with three different thresholds
for the maximum recursion depth. The results are summarized in
Table 3. Allowing ﬁlters only on links incident to the AS hop with
the mismatch (recursion depth 1) results in an average of 32.9 ﬁl-
ter candidates per mismatch. This number is surprisingly high but
can be explained by some ASs having a large number of neighbors
from which routes have to be ﬁltered. With a recursion depth of 2
(3), this increases to more than 1,000 (3,000) candidate ﬁlters on
average.
recursion
depth 1
mean
standard deviation
min
max
1 only for a subset of 2,000 preﬁxes
32.9
116
1.0
1,847
recursion
depth 2
1,103
4,518
1.0
49,040
recursion
depth 3 1
2,952
12174
1.0
80,050
Table 3: Number of candidate ﬁlters per mismatch for
psample.
To measure the freedom we have in combining those candidate
ﬁlters, we use the notion of ﬁltering combinations deﬁned in Sec-
tion 4.1. We slightly modify the recursive function ﬁndCandidates
of our algorithm in Figure 6 to return the number of possible ﬁlter-
ing combinations. Recall that each ﬁltering combination ensures
that no path is selected at the current AS hop which is strictly
shorter than the maximum allowed path length. In general, there are
multiple “bad” neighbors from which we have to ﬁlter out shorter
paths. The number of possible ﬁltering combinations is the number
of non-empty subsets of lines from the ﬁltering combinations that
contain the "bad" neighbor.
Obviously, we only obtain a single ﬁltering combination when
recursion is terminated at depth 1. However, with a maximum re-
cursion depth of 2 the average number of ﬁltering combinations per
mismatch is already in the order of 10500, increasing to 1013,000 for
a maximum recursion depth of 3. Note that these numbers are only
rough estimates. Still, they illustrate the freedom we have in ﬁlter
locations. There would be even more choice if we did not restrict
ourselves to non-redundant ﬁltering combinations and were to al-
low other policies, e.g., local-preference.
4.3 Popularity of Filters
In the previous section, we computed an extensive number of
candidate ﬁlters. Applying those per-preﬁx ﬁlters is supposed to
ensure the propagation in our model of observed paths. The main
idea now is to check whether there are ﬁlter locations that are more
popular than others. We call a ﬁlter on an AS-level link popular if
the link is identiﬁed as a possible ﬁltering location for many pre-
ﬁxes by our algorithm of Section 4.1. A large number of such pop-
ular ﬁlters suggests that per-preﬁx policies are too ﬁne and should
be aggregated into coarser policy entities.
To detect popular ﬁlters, we run the algorithm of Section 4.1 on
the observed routes of psample (see Table 4). Using a maximum
recursion depth of 1 and 2 in our algorithm reveals the impact of
the recursion depth on the popularity of the identiﬁed ﬁlters. For
each directed AS-level link, we count the number of preﬁxes for
which a ﬁlter candidate is identiﬁed as “useful” on that link. The
distribution of ﬁlters popularity for both recursion depths is plotted
in Figure 7.
Figure 7 shows that some ﬁlters are more popular than others.
While for a recursion depth of 1, less than 5% of the detected can-
didate ﬁlters are useful for at least 10,000 preﬁxes (out of 50,000),
this is more than 30% for recursion depth 2. A similar trend is
observed for larger recursion depths. The reason for this may be
that large recursion depths add a lot of noise, i.e., they identify can-
didate ﬁlters at locations which are unlikely to be related to the
mismatches we try to ﬁx.
Table 4 provides further details about the popularity of ﬁlters.
There are some locations for ﬁltering which seem to be very pop-
ular. With a maximum recursion depth of 1, 5% of the identiﬁed
ﬁlter candidates are “useful” for more than 8,000 preﬁxes.
At the same time, we see ﬁlter candidates that are identiﬁed for
only a very small number of preﬁxes. 25% of the detected ﬁlter
y
t
i
s
n
e
d
d
e
t
l
a
u
m
u
c
0
.
1
8
.
0
6
.
0
4
.
0
2
.
0
0
.
0
0
recursion depth 1
recursion depth 2
10000
20000
40000
# prefixes for which a filter is useful
30000
50000
Figure 7: Popularity of ﬁlters in psample.
Percentile
#preﬁxes
(depth 1)
#preﬁxes
(depth 2)
25%
50%
75%
90%
95%
100%
236
1,888
3,604
5,548
8,004
46,921
1,480
6,237
11,389
15,523
18,896
47,032
Table 4: Popularity of ﬁlters for recursion depth 1 and 2 in
psample.
candidates affect less than 236 preﬁxes (out of a total of 50,000) if
a recursion depth of 1 is used. For a recursion depth of 2, this num-
ber increases to 1,480. Selecting the 2,290 most popular ﬁltering
locations for recursion depth 1 (pﬁlters), we check how many of
the ﬁlter candidates for recursion depth 2 would be redundant with
them, i.e., would not be needed to achieve agreement between ob-
servations and the routes in our model if the ﬁlters in pﬁlters were
conﬁgured. For this purpose, we take the computed dependency
graph of recursion depth 2 and initially mark each ﬁlter in pﬁlters
as “covered”. Then, other ﬁlters in the dependency graph can be
recursively marked as “covered” if either all children policies or all
parent policies are already marked. By doing so, we see that the
average ratio of covered ﬁlters is 75%. This number is surprisingly
high given that there are many preﬁxes with more than 60,000 ﬁl-
ters being detected for a maximum recursion depth of 2.
The main lesson of this section is that a non-negligible part of our
ﬁlter candidates can be aggregated into coarser policy entities if the
only goal is consistency between propagation in our model and the
observed data. Higher recursion depths are not very helpful. They
add more noise thereby making it more difﬁcult to identify popular
locations for ﬁltering.
4.4 Revisiting Business Relationships
With regards to the correct granularity to model inter-domain
routing policies, neither business relationships nor BGP atoms ap-
pear to be the ultimate solution (see Section 3.3). In this section,
we revisit business relationships and try to gain more insight into
their shortcomings by comparing them with popular ﬁlters (see
Section 4.3). The lessons we learn will be important when we de-
velop a new abstraction for routing policies in Section 5.
Business relationships have two consequences for route propa-
gation and selection: preference of certain routes and no-transit for
some routes. First, network administrators may favor longer AS
paths over shorter ones due to economic reasons. In general, routes
learned from customers will be preferred over routes announced
over peering links and peering routes will be favored over provider
routes. Second, multi-homed stub ASs want to avoid being used as
transit. For this reason, routes learned from provider and peering
neighbors are not propagated to other provider or peering ASs.
We ﬁrst try to shed light on the impact of the no-transit principle
on route propagation. In Section 4.3 we identiﬁed ﬁlter candidates
and found that there are some popular locations for ﬁltering. The
idea is now to compare such ﬁlter candidates with business rela-
tionships and to ﬁnd out whether some of the popular ﬁlters in our
per-preﬁx approach possibly implement no-transit policies in the
AS-relationship “world”. If so, this can be seen as a reason to con-
sider business relationships as some form of routing policy.
We compare business relationships with our candidate ﬁlters as
follows: as a ﬁrst step, popular locations for ﬁltering are identiﬁed.
According to Table 4, 5% of the ﬁlters found are useful for more
than 8,000 preﬁxes. We select those ﬁlters and obtain a total of
2,290 popular ﬁlters (see Table 5).
Based on our AS-level topology, we then compute all ASs triples.
Altogether, there are more than 30 million such triples in our topol-
ogy. The next step is to identify triples which violate the so-called
valley-free property. In our terminology, a valley is a triple A-B-C
along which no route should be propagated if the no-transit rule is
correctly enforced. Let us assume that AS C and AS A are both
providers of AS B according to the inferred business relationships.
In this case, AS B will not announce any route learned from one of
its providers to the other provider. According to Table 5, we ﬁnd
more than 5 million valleys.
total # of edges (directed)
total # of triples
total # of valleys
total # of (popular) ﬁlters
# ﬁltered triples
# ﬁltered valleys
ratio: ﬁltered valleys to ﬁltered triples
# ﬁlters in at least one valley
117,822
30,351,164
5,383,862
2,290
991,268
602,619
60.7%
2,283
Table 5: Business relationships vs. popular ﬁlters.
Now we check how popular ﬁlters and valleys are related to each
other. For this purpose, we collect all triples A-B-C such that any
popular ﬁlter appears as either A-B or B-C. This results in 991,268
ﬁltered triples. Surprisingly, 60.7% of the ﬁltered triples are val-
leys according to our inferred business relationships. At the same
time, almost all popular ﬁlters (2,283) are applied on AS-level
links which are part of valleys. Popular ﬁlters hence frequently
correspond to a non-transit policy, a situation where according to
business relationships no path should be propagated. Henceforth,
we conclude that the popular ﬁlters we identiﬁed suggest that the
valley-free property used to infer business relationships is indeed
correct.
However, the question remains of why using inferred business
relationships exhibits this high level of disagreement when compar-
ing the routes selected in our model with those observed in the data.
As mentioned above, business relationships impact route propaga-
tion in two ways: no-transit and preference. Given our results, we
believe that an insufﬁcient or incorrect implementation of the non-
transit principle is not the actual reason for these inconsistencies.
Therefore, we now study the effectiveness of business relationships
in preferring the “correct” observed path.
For this purpose, we again take the AS-topology of Section 2.3
and use business relationships inferred with the CSP algorithm [23].
Then, we run a simulation with C-BGP to compute the selected
routes for every router to each preﬁx. The goal is to ﬁnd out how
much choice each router has to select a best path. In spite of busi-
ness relationships, a router may still have the choice between a set
of equally preferred routes. Therefore, we determine for each ob-
served path whether the observing AS learns it from a provider,
peer or customer AS according to the inferred AS relationships.
Then, we look at the corresponding AS and quasi-router in our
simulation and count the number of learned path which are of the
same “type” as the observed path, i.e., also a customer, provider
or peering path. Figure 8 shows the distribution of this number of
alternative path over all observed paths.
y
c
n
e
u
q
e
r
f
d
e
t
l
a
u
m
u
c
0
.
1
8
.
0
6
.
0
4
.
0
2
.
0
0
.
0
0
50
100
150
# routes equally preferable as observed route
Figure 8: Business relationships: freedom in path choice for