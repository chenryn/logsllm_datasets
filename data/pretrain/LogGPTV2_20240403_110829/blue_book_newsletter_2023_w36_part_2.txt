    ```
# Operating Systems
## Linux
### [aleph](aleph.md)
* New: [Ingest gets stuck.](aleph.md#ingest-gets-stuck)
    It looks that Aleph doesn't yet give an easy way to debug it. It can be seen in the next webs:
    - [Improve the UX for bulk uploading and processing of large number of files](https://github.com/alephdata/aleph/issues/2124)
    - [Document ingestion gets stuck effectively at 100%](https://github.com/alephdata/aleph/issues/1839)
    - [Display detailed ingestion status to see if everything is alright and when the collection is ready](https://github.com/alephdata/aleph/discussions/1525)
    Some interesting ideas I've extracted while diving into these issues is that:
    - You can also upload files using the [`alephclient` python command line tool](https://github.com/alephdata/alephclient)
    - Some of the files might fail to be processed without leaving any hint to the uploader or the viewer.
      - This results in an incomplete dataset and the users don't get to know that the dataset is incomplete. This is problematic if the completeness of the dataset is crucial for an investigation.
      - There is no way to upload only the files that failed to be processed without re-uploading the entire set of documents or manually making a list of the failed documents and re-uploading them
      - There is no way for uploaders or Aleph admins to see an overview of processing errors to figure out why some files are failing to be processed without going through docker logs (which is not very user-friendly)
    - There was an attempt to [improve the way ingest-files manages the pending tasks](https://github.com/alephdata/aleph/issues/2127), it's merged into the [release/4.0.0](https://github.com/alephdata/ingest-file/tree/release/4.0.0) branch, but it has [not yet arrived `main`](https://github.com/alephdata/ingest-file/pull/423).
    There are some tickets that attempt to address these issues on the command line:
    - [Allow users to upload/crawl new files only](https://github.com/alephdata/alephclient/issues/34)
    - [Check if alephclient crawldir was 100% successful or not](https://github.com/alephdata/alephclient/issues/35)
    I think it's interesting either to contribute to `alephclient` to solve those issues or if it's complicated create a small python script to detect which files were not uploaded and try to reindex them and/or open issues that will prevent future ingests to fail.
### [gitsigns](gitsigns.md)
* New: Introduce gitsigns.
    [Gitsigns](https://github.com/lewis6991/gitsigns.nvim) is a neovim plugin to create git decorations similar to the vim plugin [gitgutter](https://github.com/airblade/vim-gitgutter) but written purely in Lua.
    Installation:
    Add to your `plugins.lua` file:
    ```lua
      use {'lewis6991/gitsigns.nvim'}
    ```
    Install it with `:PackerInstall`.
    Configure it in your `init.lua` with:
    ```lua
    -- Configure gitsigns
    require('gitsigns').setup({
      on_attach = function(bufnr)
        local gs = package.loaded.gitsigns
        local function map(mode, l, r, opts)
          opts = opts or {}
          opts.buffer = bufnr
          vim.keymap.set(mode, l, r, opts)
        end
        -- Navigation
        map('n', ']c', function()
          if vim.wo.diff then return ']c' end
          vim.schedule(function() gs.next_hunk() end)
          return ''
        end, {expr=true})
        map('n', '[c', function()
          if vim.wo.diff then return '[c' end
          vim.schedule(function() gs.prev_hunk() end)
          return ''
        end, {expr=true})
        -- Actions
        map('n', 'gs', gs.stage_hunk)
        map('n', 'gr', gs.reset_hunk)
        map('v', 'gs', function() gs.stage_hunk {vim.fn.line('.'), vim.fn.line('v')} end)
        map('v', 'gr', function() gs.reset_hunk {vim.fn.line('.'), vim.fn.line('v')} end)
        map('n', 'gS', gs.stage_buffer)
        map('n', 'gu', gs.undo_stage_hunk)
        map('n', 'gR', gs.reset_buffer)
        map('n', 'gp', gs.preview_hunk)
        map('n', 'gb', function() gs.blame_line{full=true} end)
        map('n', 'gb', gs.toggle_current_line_blame)
        map('n', 'gd', gs.diffthis)
        map('n', 'gD', function() gs.diffthis('~') end)
        map('n', 'ge', gs.toggle_deleted)
        -- Text object
        map({'o', 'x'}, 'ih', ':Gitsigns select_hunk')
      end
    })
    ```
    Usage:
    Some interesting bindings:
    - `]c`: Go to next diff chunk
    - `[c`: Go to previous diff chunk
    - `gs`: Stage chunk, it works both in normal and visual mode
    - `gr`: Restore chunk from index, it works both in normal and visual mode
    - `gp`: Preview diff, you can use it with `]c` and `[c` to see all the chunk diffs
    - `gb`: Show the git blame of the line as a shadowed comment
### [Diffview](diffview.md)
* New: [Use the same binding to open and close the diffview windows.](diffview.md#use-the-same-binding-to-open-and-close-the-diffview-windows)
    ```lua
    vim.keymap.set('n', 'dv', function()
      if next(require('diffview.lib').views) == nil then
        vim.cmd('DiffviewOpen')
      else
        vim.cmd('DiffviewClose')
      end
    end)
    ```
### [Grafana](grafana.md)
* Correction: Install grafana.
    ```yaml
    ---
    version: "3.8"
    services:
      grafana:
        image: grafana/grafana-oss:${GRAFANA_VERSION:-latest}
        container_name: grafana
        restart: unless-stopped
        volumes:
          - data:/var/lib/grafana
        networks:
          - grafana
          - monitorization
          - swag
        env_file:
          - .env
        depends_on:
          - db
      db:
        image: postgres:${DATABASE_VERSION:-15}
        restart: unless-stopped
        container_name: grafana-db
        environment:
          - POSTGRES_DB=${GF_DATABASE_NAME:-grafana}
          - POSTGRES_USER=${GF_DATABASE_USER:-grafana}
          - POSTGRES_PASSWORD=${GF_DATABASE_PASSWORD:?database password required}
        networks:
          - grafana
        volumes:
          - db-data:/var/lib/postgresql/data
        env_file:
          - .env
    networks:
      grafana:
        external:
          name: grafana
      monitorization:
        external:
          name: monitorization
      swag:
        external:
          name: swag
    volumes:
      data:
        driver: local
        driver_opts:
          type: none
          o: bind
          device: /data/grafana/app
      db-data:
        driver: local
        driver_opts:
          type: none
          o: bind
          device: /data/grafana/database
    ```
    Where the `monitorization` network is where prometheus and the rest of the stack listens, and `swag` the network to the gateway proxy.
    It uses the `.env` file to store the required [configuration](#configure-grafana), to connect grafana with authentik you need to add the next variables:
    ```bash
    GF_AUTH_GENERIC_OAUTH_ENABLED="true"
    GF_AUTH_GENERIC_OAUTH_NAME="authentik"
    GF_AUTH_GENERIC_OAUTH_CLIENT_ID=""
    GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=""
    GF_AUTH_GENERIC_OAUTH_SCOPES="openid profile email"
    GF_AUTH_GENERIC_OAUTH_AUTH_URL="https://authentik.company/application/o/authorize/"
    GF_AUTH_GENERIC_OAUTH_TOKEN_URL="https://authentik.company/application/o/token/"
    GF_AUTH_GENERIC_OAUTH_API_URL="https://authentik.company/application/o/userinfo/"
    GF_AUTH_SIGNOUT_REDIRECT_URL="https://authentik.company/application/o//end-session/"
    GF_AUTH_OAUTH_AUTO_LOGIN="true"
    GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH="contains(groups[*], 'Grafana Admins') && 'Admin' || contains(groups[*], 'Grafana Editors') && 'Editor' || 'Viewer'"
    ```
    In the configuration above you can see an example of a role mapping. Upon login, this configuration looks at the groups of which the current user is a member. If any of the specified group names are found, the user will be granted the resulting role in Grafana.
    In the example shown above, one of the specified group names is "Grafana Admins". If the user is a member of this group, they will be granted the "Admin" role in Grafana. If the user is not a member of the "Grafana Admins" group, it moves on to see if the user is a member of the "Grafana Editors" group. If they are, they are granted the "Editor" role. Finally, if the user is not found to be a member of either of these groups, it fails back to granting the "Viewer" role.
    Also make sure in your configuration that `root_url` is set correctly, otherwise your redirect url might get processed incorrectly. For example, if your grafana instance is running on the default configuration and is accessible behind a reverse proxy at https://grafana.company, your redirect url will end up looking like this, https://grafana.company/. If you get `user does not belong to org` error when trying to log into grafana for the first time via OAuth, check if you have an organization with the ID of 1, if not, then you have to add the following to your grafana config:
    ```ini
    [users]
    auto_assign_org = true
    auto_assign_org_id = 
    ```
    Once you've made sure that the oauth works, go to `/admin/users` and remove the `admin` user.
* New: [Configure grafana.](grafana.md#configure-grafana)
    Grafana has default and custom configuration files. You can customize your Grafana instance by modifying the custom configuration file or by using environment variables. To see the list of settings for a Grafana instance, refer to [View server settings](https://grafana.com/docs/grafana/latest/administration/stats-and-license/#view-server-settings).
    To override an option use `GF__`. Where the `section name` is the text within the brackets. Everything should be uppercase, `.` and `-` should be replaced by `_`. For example, if you have these configuration settings:
    ```ini
    instance_name = ${HOSTNAME}
    [security]
    admin_user = admin
    [auth.google]