915 
If offset is 0, indicating it's a header fragment, the firewall proceeds to do a minimum 
size check on the packet. If there's enough data for a complete protocol header, 
offset is set to 0. If there isn't enough data, offset is set to 1. This means if you send 
a fragment with a 0-offset and a super-short length, it's treated as a non-first 
fragment and passed through the firewall! 
8.2.4 Simple Stateful Firewalls 
Stateful firewalls maintain data structures in memory that are used to track 
connections. This data structure is usually known as the state table. Multiple state 
tables could be used to track different types of connections, or all state data might be 
stored in a single table. 
When a stateful firewall receives a packet, it first checks the state table to see 
whether that packet belongs to an existing connection. If it does, the packet is 
accepted and passed along to its destination. Otherwise, the packet is compared 
against the rule base. If the rule base specifies that the packet is allowed, the packet 
might end up creating a new entry in the state table. 
TCP 
Stateful firewalls can tackle TCP connections with more precision than their stateless 
brethren. For example, if a stateful firewall has a basic rule similar to "Allow TCP 
connections to port 80 on the Web server," it allows only one type of TCP packet 
through to the Web server: a SYN packet. After the firewall receives this SYN packet, 
an entry is made in the state table. Then the appropriate SYN-ACK packet is allowed 
in the other direction, and subsequent valid ACK, PUSH, FIN, and RST packets are 
allowed through. Everything else is dropped. This method solves the issue of 
unnecessary packets getting through the firewall, which was the property of stateless 
firewalls that allowed FIN scanning to work. Stateful firewalls still need to be careful 
about odd connection initiation packets, however, such as SYN-FIN and SYN-RST. 
Some firewalls create state entries without seeing a connection initiation; if they see 
a data packet matching the rule set, they treat the packet as if it belongs to a 
connection that was started before the firewall was last booted, and they permit it. 
It's important to make sure SYN packets can't be matched with an existing connection 
in this fashion, however. This behavior can also expose the firewall to spoofing 
attacks with TCP, as an attacker doesn't have to get past a three-way handshake to 
get data parsed by the firewall. 
Attackers can attempt to disable firewalls by attacking the state table via brute force. 
If they can cause state table entries to be added from outside the network, they can 
often fill up the state table and cause failures to occur. Lance Spitzer discovered a way 
to do this to Checkpoint FW-1 and published an interesting analysis of the problem, 
available at www.spitzer.net/fwtable.html. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
916 
UDP 
UDP connections are a little easier to handle, as entries can be placed in the state 
table to specifically allow responses. One common shortcut firewalls take, however, is 
to allow responses from any UDP source port. So if a firewall sees a UDP packet go 
from host 1.2.3.4 on source port 53 to host 2.3.4.5 on destination port 53, and the 
rule base allows that packet, an entry is added in the state table. This entry, however, 
might allow a UDP packet with any source port from 2.3.4.5 to 1.2.3.4 and 
destination port 53. Problems with allowing this UDP packet are discussed in 
"Spoofing Attacks(? [????.])" later in this chapter. 
Directionality 
It's important to review a stateful firewall's notion of directionality. A firewall that 
doesn't correctly check the "direction" of a TCP connection can lead to security issues. 
For example, say an attacker makes a connection from source port 21 to a Web server 
on port 80. If the firewall can be tricked into interpreting the Web server's response 
as data in an FTP control connection, it's probable that bad things can be done to that 
firewall. One interesting nuance of TCP is the simultaneous connection, in which two 
SYN packets are sent in an interleaved fashion. 
Fragmentation 
Stateful firewalls can track fragmentation more tightly than stateless firewalls can. 
One approach some firewalls take is to set up a fragment state entry for a fragment 
after they see a protocol header for that datagram. Subsequent fragments match the 
state table and are permitted to pass through the firewall. Another approach is virtual 
reassembly, which CheckPoint uses. With this approach, the firewall stores every 
fragment, and after all fragments have arrived and are verified to be safe, the 
collection of fragments is forwarded on to the end host. 
Thomas Lopatic found a subtle vulnerability in the state-handling code for IP Filter's 
fragmentation state table. When IP Filter identified a fragmented TCP header, it 
analyzed the header, and then cached a decision in a fragment state table. Any 
subsequent fragments matching that cached decision were passed through the 
firewall. Lopatic observed that after a decision was cached, an attacker could resend 
a fragmented TCP header, with different port information, and it would pass through 
the firewall! This way, an attacker could talk to TCP services that IP Filter should have 
blocked. 
To top it off, Lopatic discovered that this attack could be performed even if fragments 
were explicitly blocked in the rule set. If an attacker first sent a normal TCP packet 
that matched the rule base, an entry in the normal state table was created. 
Subsequent fragmented packets would match that entry in the state table, and the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
917 
rule base would never even be consulted. His advisory is available at 
http://cert.uni-stuttgart.de/archive/bugtraq/2001/04/msg00121.html. 
Fooling Virtual Reassembly 
There's a technique that's useful when brainstorming attacks against stateful firewall 
fragmentation reassembly. This technique was originally devised by Thomas Lopatic, 
John McDonald, and Dug Song, and Lopatic was the first to apply it against Firewall-1. 
Mark Dowd was later able to apply it in another attack against a stateful firewall. 
Say you've found a nuance in an end host IP stack that you want to be able to trigger, 
but you need to send overlapping fragments through a modern firewall. It's likely this 
firewall doesn't allow overlapping fragments as part of its security policy, so you need 
to use a few tricks. 
What you do is send two (or more) sets of fragments containing similar characteristics 
and have both been accepted by the firewall or IDS. However, you construct them so 
that the end host discards some packets from each set, and multiple fragment chains 
merge to become one. This method can be used to stage an attack using an 
end-target BSD IP stack by leveraging the type of service (TOS) field; you can send 
two chains of fragments that both look legal enough, but you can change the value of 
the TOS byte in packets you want grouped together. Figure 15-8 shows an example 
of this exploitation scenario. 
Figure 15-8. Fragmentation attack targeted at BSD IP stack by using the TOS byte 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
918 
In this example, you can conveniently choose for the end host to eliminate packets B, 
D, and F, creating a single datagram composed of packets A, E, and C. When 
attempting to bypass a device performing virtual reassembly, attacks such as this one 
can also be performed if the device fails to validate other elements of the IP header 
properly. If the device fails to do so, basic header validation of IP packets from the 
end host might allow discarding selected fragments to perform attacks similar to 
those in the previous example. The following sections describe a few things that a 
device performing virtual defragmentation might neglect to check thoroughly. 
IP TTL Field 
The time-to-live (TTL) field is used to determine a packet's lifetime on the internet by 
specifying the maximum number of hops the packet should traverse before being 
discarded. Say you send two sets of fragment queues, as in the previous example, but 
the fragments you want to eliminate have the TTL value of 1 or 0 when they reach the 
firewall. (You need to determine how many hops away the firewall is, but this 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
919 
information could be brute-forced or discovered in another way.) If the device 
performing virtual reassembly doesn't notice that some packets are about to expire, 
it might be possible to mount an attack in which some fragments are due to expire 
before (or as) they reach the destination and, therefore, are never received by the 
end host. 
IP Options 
You might be able to specify certain illegal options that cause the end host to discard 
certain fragments. Options with illegal lengths and the like probably can't be routed to 
the end host, but you might be able to take advantage of specific IP options that 
aren't processed by intermediate routing hopsmaybe timestamps with invalid 
pointers or something similar. Additionally, record route and timestamp options 
might be susceptible to overflow, and if you work it out so that the option overflows 
just as it reaches the destination host, you might be able to have the fragments 
discarded. Thomas Lopatic described using this method to exploit a hole in 
CheckPoint Firewall-1's virtual reassembly layer, which is described in detail at 
http://seclists.org/lists/bugtraq/2000/Dec/0306.html. 
Zero-Length Fragments 
A zero-length fragment is a packet that doesn't contain any datait's just an IP header. 
How can this fragment be useful in launching attacks? Suppose a firewall is 
performing virtual reassembly and allows only complete fragment queues through. If 
the firewall honors it, you can send a zero-length final fragment with the MF bit 
cleared to complete a set of fragments. Most OS stacks silently discard zero-length 
fragments without processing them, so the end host still has an incomplete queue. 
Then you can send another set of fragments with the same IP ID to add more data 
onto (or overwrite) the incomplete queue at the end host. 
8.2.5 Stateful Inspection Firewalls 
Stateful inspection is a term CheckPoint coined to describe Firewall-1, but it has 
been assimilated into the general language as a way of describing a certain class of 
firewalls. It's the process of looking inside actual protocol data to enhance the 
firewall's functionality. It refers to peeking into layer 4, such as TCP and UDP data, 
and pulling out or modifying key snippets of application-layer data. 
Why is stateful inspection necessary? Certain protocols are somewhat unwieldy to a 
firewall, particularly those that transmit information such as IP addresses and ports. 
For example, say you're talking to an FTP server in a corporation's demilitarized zone 
(DMZ). The exchange might look like this: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
920 
220 FTP server ready. 
USER ftp 
331 Guest login ok, send your e-mail address as password. 
PASS PI:EMAIL 
230 Welcome to jim's FTP server 
PASV 
227 Entering Passive Mode (10,0,0,1,90,210) 
RETR test.txt 
You've logged in to the FTP server and told it you want to make a passive mode 
connection. The server responded and told you to connect to it on IP address 10.0.0.1 
and port 23250 (remember, 90 * 256 + 210). The firewall needs to solve two 
problems now. First, the IP address the FTP server gave you is an internal IP address 
and can't be reached from the Internet. Normally the firewall uses NAT so that the FTP 
server can be reached through an external IP, but the actual data inside the packet 
needs to be translated with NAT as well. 
Figure 15-9 shows what goes wrong with the FTP session. The client machine, on the 
left, initiates an FTP connection, which the firewall permits. The FTP server tells the 
client to connect to it at 10.0.0.1 and port 23250. When the client does this, it ends 
up trying to connect to a machine that can't be reached or the wrong machine in its 
internal network. 
Figure 15-9. Active FTP failure caused by NAT 
[View full size image] 
So the firewall needs to look inside the FTP control channel and use NAT on IP 
addresses when appropriate. However, more processing still needs to occur for FTP to 
work correctly. In Figure 15-10, the connection proceeds much the same as before. 
Figure 15-10. Active FTP failure caused by filtered data port 
[View full size image] 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
921 
However, the firewall sees the directive to connect to the 10.0.0.1 address and 
rewrites it in place with the 5.6.7.8 address. The client computer knows to connect to 
the correct IP address. However, when the computer attempts this connection, you 
encounter the next obstacle. The firewall most likely doesn't allow the connection to 
the high TCP port, as it's a considerable security risk to allow these connections. To 
handle this correctly, the firewall must watch within the FTP session for the PASV 
response and temporarily open a hole in the firewall for the connection from the 
client. 
Layering Issues 
It's important to note that stateful inspection involves packet-oriented firewalls 
looking inside UDP and TCP packets for application-layer data. These firewalls aren't 
doing full TCP/UDP processing, so there's plenty of room for mistakes because they 
"peek" at a layer they don't quite understand. 
FTP is a great case study for this kind of problem. Look at a class of problems related 
to stateful inspection of FTP. They were discovered by Thomas Lopatic and John 
McDonald and independently by Mikael Olsson of EnterNet Sweden AB. 
What would a typical stateful inspection firewall do to detect a PASV command? It 
looks in each TCP segment traversing the firewall for a packet containing this string: 
227 Entering Passive Mode (x,x,x,x,y,y) 
After the firewall sees that string, it pulls out the IP address and port, translates it 
with NAT, rewrites it if necessary, checks it, and then opens a temporary hole. So you 
can see what this process looks like, review the following code from an old version of 
iptables: 
    iph = skb->nh.iph; 
    th = (struct tcphdr *)&(((char *)iph)[iph->ihl*4]); 
    data = (char *)&th[1]; 
    data_limit = skb->h.raw + skb->len; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
922 
    while (data = data_limit || *data != '(') 
        return 0; 
    p1 = simple_strtoul(data+1, &data, 10); 
    if (data >= data_limit || *data != ',') 
        return 0; 
    p2 = simple_strtoul(data+1, &data, 10); 
    if (data >= data_limit || *data != ',') 
        return 0; 
    p3 = simple_strtoul(data+1, &data, 10); 
    if (data >= data_limit || *data != ',') 
        return 0; 
    p4 = simple_strtoul(data+1, &data, 10); 
    if (data >= data_limit || *data != ',') 
        return 0; 
    p5 = simple_strtoul(data+1, &data, 10); 
    if (data >= data_limit || *data != ',') 
        return 0; 
    p6 = simple_strtoul(data+1, &data, 10); 
    if (data >= data_limit || *data != ')') 
        return 0; 
    to = (p1saddr), 0, to, port); 
You can see that iptables uses a straightforward method of peeking into a TCP packet 
to look for the response string. Note that if the response is split across multiple 
segments or parts of the string are dropped or retransmitted, this method wouldn't 
work at all. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
923 
It's worse than unreliable, however; it can actually be exploited. Consider what the 
firewall would think of the following FTP session: 
220 FTP server ready. 
USER 227 Entering Passive Mode (10,0,0,1,90,210) 
331 Password require for 227 Entering Passive Mode (10,0,0,1,90,210). 
If the 227 string is in the right place in a TCP packet, the firewall could easily be fooled 
into opening ports for an attacker. There are a few ways to pull off this attack. The 
most straightforward way is to change the maximum segment size of the TCP 
connection to an unusually small value. This can be done easily by setting the 
maximum transmission unit (MTU) on the interface to the small value. If the attacker 
does things right, he can create the following flow of TCP traffic (each line represents 
a different TCP packet): 
Server packet 1: 220 FTP server ready.\r\n 
Client packet 1: USER AAAAAAAAAAAAAAAAA227 Entering Passive 
Client packet 2: Mode (10,0,0,1,90,210)\r\n 
Server packet 3: 331 Password required for AAAAAAAAAAAAAAAAA 
Server packet 4: 227 Entering Passive Mode (10,0,0,1,90,210).\r\n 
You can see in this data flow that the TCP segment is split so that it looks like the 227 
response is a legitimate response from the server, instead of being part of the error 
message. When the firewall sees this line in its own packet, it assumes the server 
needs to open an incoming port for a data connection. 
Some firewalls sought to remedy this problem by ensuring that each packet ended in 
a CRLF. The attack shown in the preceding code doesn't work because the 331 
response packet doesn't contain the requisite CRLF. One way around this is to create 
a file with a filename of 227 ... remotely in a writeable directory. Then you can enter 
STAT -1 in the control connection and get a directory listing, which could conceivably 
have CRLFs in the right place. 
However, there's a more universal technique if you can write some low-level 
networking code. This technique a little more involved, but it can be implemented 
using libdnet and libpcap in a few hours. Basically, you need to acknowledge only part 
of the FTP server's response so that its TCP stack times out and retransmits the 227 
string in its own packet. This way, both packets end in a CRLF. The flow of data would 
look like this: 
220 FTP server ready.\r\n 
USER 227 Entering Passive Mode (10,0,0,1,90,210)\r\n 
331 Password require for 227 Entering Passive Mode (10,0,0,1,90,210).\r\n 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
924 
The client would acknowledge the TCP data right up to the 227 string in the server's 
response. Then the client has to wait a little while for the server to time out and 
retransmit the unacknowledged data. The server retransmits the data in a packet that 
should trick the firewall into opening up a port: 
227 Entering Passive Mode (10,0,0,1,90,210).\r\n 
8.2.6 Spoofing Attacks 
Spoofing attacks can be a powerful technique for circumventing firewalls, and they 
haven't been adequately covered in security literature. Spoofing refers to the process 
of making a packet appear to come from a machine other than its actual source. 
Typically, attackers create packets from scratch, specifying the source and 
destination of their choosing, and place the packets out on the network to be routed. 
You have already seen a variety of TCP spoofing attacks in Chapter 14(? [????.]). 
These attacks seek to tamper with an existing connection or fabricate a new 
connection to take advantage of trust relationships. Manipulating firewalls is in many 
ways simpler than manipulating TCP connections. The mere presence of certain 
packets on the network is often enough to get firewalls to update their internal state 
tables. Furthermore, firewalls that do stateful inspection often analyze data in 
packets even if those packets aren't completely valid with respect to sequence 
numbers and windows. The following sections describe some specific packets that can 
be useful in spoofing attacks. 
If you're reviewing firewall code, you need to be aware of how it implements spoofing 
protection. Often, aspects of this protection are under the user's operational control, 
but it's important to make sure the protection is solid when it's used in the default or 
recommended fashion. Even small oversights can lead to security vulnerabilities, and 
because there hasn't been much published analysis of spoofing attacks, most 
administrators don't appreciate the importance of configuring spoofing protection 
correctly. 
Spoofing from a Distance 
Spoofing attacks are at their most powerful when the attacker can do malicious things 
to both the source and destination IP addresses. Modifying source addresses is often 
possible, as strict egress filtering on the Internet is inconsistent at best. Destination 
addresses, on the other hand, are used to route packets to their eventual destinations. 
Generally, if you want the packet to get to your victim, you can't muck with the 
destination IP. The "Spoofing Destinations to Create State" section later in this 
chapter covers a few ways to work around this restriction to get some malicious 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
925 
destination addresses into play. For now, however, assume the attacker has to give a 