Time of ﬂight
between P and V
tvp
t0+tvm
t0+tvm
t0
t0+tvp
t0+tvm
t0+tvp+δp+Ωp+tpm
t0+2tvp+δp+Ωp+δv +Ωv +tvm ((T2−T0)−δp−Ωp−δv −Ωv )/2
t0+tvp+δp+Ωp+tpm
t0+2tvp+δp+Ωp
-
-
(T1−T0)−δp−Ωp−(tpm−tvm)
((T1−T0)−δp−Ωp)/2
t0+tvp+δp+Ωp
t0+3tvp+δp+Ωp+δv +Ωv
((T2−T0)−δp−Ωp−δv −Ωv )/2
t0+2tvp+δp+Ωp+tvm
-
((T2−T0)−δp−Ωp)/2
t0+tvp+tpm
t0+tvp+δp+Ωp+tpm
t0+3tvp+δp+Ωp+δv +Ωv +tpm ((T2−T0)−δp−Ωp−δv −Ωv )/2
(*)
(*)
Scenario
(a, e, f )
(b)
(c)
(d)
(g)
(h)
(*) further more we have that (T1 − T0) = δp + Ωp
Table 1: Message reception times T0, T1 and T2 and the resulting equations for the time-of-ﬂight between the
veriﬁer and prover tvp for the eight scenarios described in Figure 4.
(g) (fourth column in Table 1), only the random delay added
by the prover P has an eﬀect on the attacker’s calculations.
Similarly in scenario (d) and (h) only the random time added
by the veriﬁer V has an eﬀect on the calculations since we
have (T1 − T0) = δp + Ωp.
This means that in order to provide eﬀective countermea-
sures (using the random delay based protocol) in all scenar-
ios, i.e., regardless of the a priori knowledge of the attacker,
both the prover and the veriﬁer must add a random delay
between the messages.
In Figure 5 we give an example of a protocol where both
the prover and the veriﬁer adds a random delay between
the messages in the rapid bit exchange.
In this protocol
the prover ﬁrst selects a k bit nonce Np and a delay vector
Dp with values between Dmin and Dmax. The prover then
creates a commitment by hashing the two values and sends
the commitment to initiate the protocol. The veriﬁer picks
his own nonce Nv and his own delay vector Dv and starts
the delayed rapid bit exchange phase. The delayed rapid bit
exchange phase takes k rounds (one round for each bit in
the nonces). In the ith round the veriﬁer will wait for Dv[i]
nanoseconds and then send the challenge. When the prover
receives the challenge he will wait for Dp[i] nanoseconds be-
fore sending back the response. After k rounds the entire
nonce has been exchanged and the prover opens the com-
mitment made in the setup phase so the veriﬁer can check
if the nonce that was exchanged in the delayed rapid bit
exchange phase is correct and subtract the random delays
Dp from the round-trip time of each round. Once this step
is done the veriﬁer has all the information needed to recon-
struct the time-of-ﬂight of each bit and estimate the distance
to the prover.
The problem with such a protocol is that the prover also
needs to add a delay. If the prover is allowed to add a ran-
dom delay to the messages, the veriﬁer can not be sure that
the prover actually waits as long as it claims. Even if the
prover commits to a series of delays in the setup phase of the
protocol the prover could still cheat consistently on all de-
lays, by subtracting a ﬁxed amount from all the delay values
in his delay vector, thus making himself appear closer to the
veriﬁer than he actually is. Since the same delay must be
subtracted from all the values in the provers delay vector (in
order to preserve consistency), this problem could be solved
by requiring that at least one of the delay values is 0 but
P
V
Np ∈ {0, 1}k
Cp ← h(Np)
Cp
Nv ∈ {0, 1}k
Hv ∈ [Hmin, Hmax]k
EKpv (V,P,Hv )
rand()
Nv [0]
Np[0]⊕Nv [0]
...
rand()
Nv [k]
Np[k]⊕Nv [k]
EKpv (P,V,Np,Dp)
Decrypt message and
Verify Cp = h(Np)
Figure 6: Distance bounding protocol with multiple
challenges.
in this case the attacker would learn the same information
as without any delays at all, just by looking at the fastest
response.
Because this method would give the prover the ability to
claim a false location closer to the veriﬁer, thus destroying
one of the most important properties of the distance bound-
ing primitive, this method can not be used as an eﬀective
countermeasure.
4.2 Sending multiple challenges
Another way to add randomness to the attackers calcu-
lation is for the veriﬁer to send multiple challenges to the
prover before the prover responds (correctly) to one of them.
This only works if the attacker is unable to distinguish be-
tween a transmission from the prover and a transmission
from the veriﬁer, otherwise the attacker will just wait for
a response from the prover and then assume that it was a
response to the last message sent by the veriﬁer.
If multiple challenges are sent, a protocol is needed to
make sure that the prover and veriﬁer agree to which chal-
lenge the prover must (correctly) reply. We present such a
protocol in Figure 6.
In the distance bounding protocol in Figure 6, the prover
ﬁrst selects a k bit nonce Np and transmits a hash of that
nonce to the veriﬁer as a commitment. The veriﬁer then
picks his own nonce and generates an array of values that
represent the number of messages the prover must receive
before answering. This array is then sent to the prover.
After this initial exchange of messages the rapid bit exchange
starts and the veriﬁer starts sending challenges to the prover.
When the required number of challenges for round i has been
received, the prover responds with the challenge xor’ed with
the ith bit of his own nonce.
The veriﬁer must send out the challenges quickly enough
(or close enough together) that a potential attacker can not
distinguish the provers responses from the veriﬁers chal-
lenges based on the inter message timing.
An attacker listening to a distance bounding protocol where
multiple challenges are sent, will have to guess which one is
the right challenge. When the attacker has guessed the chal-
lenge, he can assume that the next message is the response.
If the prover sends a random number of challenges (between
1 and n) for each response, the probability that the attacker
can guess m challenges in a row is:
P (attacker success) = „ 1
n«m
(14)
For n = 10 challenges and m = 3 consecutive messages,
the probability of the attacker successfully guessing the three
correct challenges is (1/10)3 = .001. Note that m = 3 im-
plies scenario (a), (d), (e), (f) or (h) since, only in these
scenarios, the attacker needs three messages to learn the
distance between V and P .
A sophisticated attacker can use, e.g., signal ﬁngerprint-
ing [18] or received signal strength (rss) [31] to distinguish
transmissions from the prover and veriﬁer with a certain
probability, so the assumption of indistinguishability of the
prover and veriﬁers signal is very strong.
The relatively high probability of successfully guessing
three challenges and the assumption that the attacker can
not distinguish between transmissions from the prover and
veriﬁer make this protocol an inadequate countermeasure to
information leakage.
4.3 Send challenges with a ﬁxed interval
If the veriﬁer sends challenges with a ﬁxed interval, say,
every 100ms, the attacker will not be able to derive any
information from the time between receiving the response
from the prover T1 and receiving the next challenge from
the veriﬁer T2. Essentially the attacker would only get T0
and T1.
This technique eﬀectively prevents the distance and rela-
tive position from leaking in scenarios (a, d, e, f, h) but not
in (b, c, g) since only two messages are needed to calculate
the distance in these scenarios. So while sending challenges
with a ﬁxed interval is a strong, and easy to implement,
countermeasure it does not solve the problem completely.
4.4 Hiding the transmission of messages
A diﬀerent approach to counter information leakage from
distance bounding protocols is to hide the fact that any mes-
sages are being sent at all, thus preventing the attacker from
obtaining T0, T1 and T2.
In this section we will look at the advantages and disad-
vantages of using direct sequence spread spectrum (DSSS) [17]
or frequency hopping (FH) [13] to make detection of the
transmission harder for the attacker.
In this context, the
immediate goal of using any spreading technique is to de-
prive the attacker of information regarding the arrival time
of the messages in the rapid bit exchange. Both DSSS and
FH have a number of features that become problematic when
nanosecond accuracy is needed [24]. To better illustrate the
impact of spreading and de-spreading on the delay, we give
a short review of the receiver synchronization procedure.
4.4.1 DSSS receiver synchronization
Direct sequence spread spectrum (DSSS) works by mod-
ulating the original data signal with a high frequency chip-
signal, or spreading code, thus spreading the resulting DSSS
signal over a wider frequency band. If the transmitter uses
the same amount of power to transmit the DSSS signal as
would have been used to transmit the original signal, less
/
/
o
o
o
o
o
o
o
o
o
o
/
/
o
o
o
o
o
o
o
o
/
/
/
/
energy is transmitted on each frequency (since more fre-
quencies are used). The DSSS signal can become diﬃcult
to separate from channel background noise for someone who
does not know the correct chip-sequence [24, 5].
In order to receive a DSSS signal the sender and receiver
radios must be tightly synchronized2 such that the spreading
code and the de-spreading code are applied correctly. The
process of synchronizing the receiver radio to the sender ra-
dio is called signal accusation and is performed each time
a new transmission begins. The receiver must be tuned to
exactly match the phase of the incoming signal to correctly
apply the de-spreading code [24].
Acquisition is accomplished in a two step process. First
a rough synchronization is performed to synchronize the re-
ceiver to within one chip of the incoming signal, then a phase
locked loop (PLL) takes over and performs the ﬁnal ﬁne
grained synchronization. The PLL will track the phase of
the incoming signal and compensate for any Doppler shifts
or other changes (e.g., frequency drift of the two radios),
so once the signal is acquired the de-spreading can be per-
formed with negligible delay.
The problem with this process is that in the rapid bit ex-
change each message (i.e., each bit) is a separate transmis-
sion and therefore the signal must be acquired every time a
new bit arrives.
The acquisition delay depends on the design of the re-
ceiver. We brieﬂy describe two receivers, one with a parallel
design and one with a serial design. For a detailed descrip-
tion of how these two receiver designs work, please refer
to [24, p. 746], here we will just describe the delay intro-
duced by the two designs.
A parallel receiver design with 2Nc signal correlations can
synchronize a receiver if it is within Nc chips of correct align-
ment. In such a case the signal acquisition time is given by
the following equation:
Tacq = λTc
(15)
where λ is the number of chips that must be received before
a decision is made and Tc is the time it takes to receive one
chip. The equation shows that the more chips the receiver
receives before a synchronization decision is made, the longer
it takes to acquire the signal but a bigger λ also means that
the probability of erroneous acquisition is reduced.
The popular and much simpler and cheaper serial receiver
design has the disadvantage of a higher (and more unpre-
dictable) acquisition time. In the following equations PD is
deﬁned as the probability of correct correlation and PF A as
the probability of false alarm as given by [24]:
(Tacq)max = 2NcλTc
(Tacq)avg =
(2 − PD)(1 + KPF A)
PD
(NcλTc)
(16)
(17)
σacq = (2NcλTc)2(1 + KPF A)„ 1
12
+
1
P 2
D
−
1
PD« (18)
It should be noted that other synchronization techniques
with faster acquisition times do exist, e.g., RASE [32], how-
ever these techniques are often highly susceptible to noise
and interference [24] and are thus not well suited for our
purpose.
2Synchronization in this case does not refer to time synchro-
nization on the application layer, but radio synchronization
in order to correctly apply the spreading code.
After the rough synchronization, control is handed oﬀ to
the phase locked loop (PLL) which will need a few more
chips to acquire complete lock.
It is clear that the serial receiver design introduces more
random delay than the parallel design, but even the parallel
design can fail to acquire the signal (if the synchronization
error is bigger than Nc chips). If that happens the receiver
must retry the acquisition and that will introduce uncer-
tainty in the delay. Since any random delay introduced by
the prover will be impossible for the veriﬁer to compensate
for, it will adversely aﬀect the result of a distance bounding
protocol.
4.4.2 DSSS code and message length
There are also several problems relating to the length of
the chip sequence (or spreading code) used.
By the length of the spreading code we mean the number