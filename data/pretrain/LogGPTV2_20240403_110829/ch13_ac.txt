在这最后几个例子（还有其他的例子）中，我们 100% 的时间都在轮值，因为我们是构建这些系统的人。它遵循我前面描述的同一模型，其中构建和将软件部署到生产中的团队拥有它，而构建该软件的团队则有责任在软件故障时修复它。大卫： 鉴于这种结构，你如何管理 PE 组织与其他团队之间的关系？
佩德罗：在全公司范围内，我们每六个月发送一次我们称之为脉冲调查。所问的一个问题涉及团队与其合作伙伴团队的协作情况。Facebook 已经构建了许多其他团队使用的常见软件，并且对其运维至关重要。因此，团队需要很好地协作，这包括嵌入在 SWE 团队中的 PE。调查提供综合满意度打分，告诉我们 PE 团队是否认为它与其他团队合作良好。通常来说，现在这个调查是我们可以用来缩小问题范围的具体数据。我们首先问一大堆问题。例如：“这种关系是否良好？体育团队是否觉得自己有发言权？PE 是否倾听 SWE 团队减少操作负载和构建工具以解决这些问题的需要吗？PE 感觉自己被平等对待了吗？SPE 了解 PE 应该做什么工作吗？”如果我们发现这种关系不健康，我们会与 PE 和 SWE 经理和技术人员交谈，以收集更多反馈。如果反馈表明对如何使用 PE 感到困惑，反之亦然，我们会教育每个人，帮助他们了解成功的 PE 和 SWE 团队参与情况，以及成功的健康合作伙伴关系是什么样子。我们还讨论了共享所有权的含义，以及 SWE 需要如何关注其系统的稳定性，以及更多专注于故障解除的 PE 是不可持续的。我们确保 PE 不会成为阻碍者，并阻止 SWE 团队进行创新，例如，他们不断对变革说“不”。人和关系是具有挑战性的，有时价值体系只是不一致，但我们不能忽视这些关系，不能让合作变得苦涩。最终，如果我们不能就如何合作达成协议，我们需要做出改变。如果关系问题源于 PE，我们会努力消除导致这些问题的个人，与他及其经理讨论我们的协作期望，并在必要时开始重建团队的工作。如果关系问题源于 SWE 不想以我们描述的方式拥有其服务，或不断忽视使系统更稳定所需的工作，我们也会与他们的经理和技术主管交谈。在给了每个人解决问题的时间之后，我们将在未来某个时候重新审视这种情况。如果 SWE 团队对 PE 的期望继续集中在移交运维工作上，那么我们将很乐意将 PE 重新部署到其他 SWE 团队中。毕竟还有很多地方，PE 的技能和倡议能受到重视，能得到平等对待，并能够产生改变。移除嵌入式 PE 团队是我们作为最后手段和用尽所有方法（仍然不能构造良好合作关系）之后不得已的手段。我只用了很少几次，因为这样做肯定会失去与 SWE 团队的信任，这将使得在未来建立信任更加困难。话虽如此，我宁愿不牺牲试图强推某方案的 PE。在少数情况下，这种情况已经发生，SWE 团队在几个月后又回来了，要求再次尝试合作。现实情况是，一些软件团队没有具有运营思维的人，由于技能差距或不断增加的运维债务，他们很快就会被工作淹没。有时候，用艰苦的方式学习，这是每个人重新开始的最好方法。
大卫：让我们继续沿着这条组织结构的道路再走一会儿。每个项目都有 PE 吗？你来的时候做什么？佩德罗：之前你注意到，在一些公司中，SRE 直到达到某种成熟度或运维稳定性才适用。在 Facebook ，我们一直习惯无情地提前考虑。并不是每个 SWE 团队都能与嵌入式生产工程团队合作，这是符合情境的。它与服务本身及其发展阶段、服务与团队的成熟度有关。理想情况下，我们希望进入软件团队的新生阶段，因为他们正在构建一些新的东西，并且可能不知道它将会是什么样的。通过尽早嵌入开发团队，我们可以尽早完成一些运维工作。有时会发生这种情况，有时则不会发生。
有一些软件工程团队最终构建一些服务，在开始时没有生产工程师。这通常是一个不太具有明确定义的用例的新服务。解决问题可能是某人的创新想法，但需要一段时间才能发展。一旦该服务建立起来，他们意识到他们正处于扩展至关重要的阶段，他们来找我寻求帮助。我们保留这些服务和团队的动态列表，并且随着雇佣更多的生产工程师，我们使用该列表确定关键且最需要帮助的团队。在某些情况下，例如当我们构建实时视频和通用视频基础架构时，我们知道这将是一个典型的案例，因此我们从一开始就参与其中。不幸的是，我们不得不从其他团队中抽调有价值的成员来组建这个团队，而且这样的权衡往往需要大量沟通。
当我们进入服务的扩展阶段时，我们需要弄清楚团队应该首先处理哪些工作，有时很难确定。服务可能会遇到可靠性问题，容量，部署问题，或监视问题中的任何一种。  我们团队的生产工程师 Andrew Ryan 经常为我们提供组织设计方面的帮助，他根据  马斯洛的需求层次结构提出了一个“服务金字塔”。我在有关生产工程师的 SRECon 演讲中介绍了这种需求层次。后来我发现，Mickey Dickerson 在 O'Reilly 会议上也介绍了类似的服务可靠性需求层次。很高兴看到其他一些团队也共享了有关工作方法的概念。我们使用此服务层次结构来确定生产工程师首次与团队合作时的工作类型。金字塔的底层侧重于确保服务与标准 Facebook 工具很好地集成，以处理服务器的生命周期（预配、监视、替换、迁移、停用）和服务部署（新部署、集成测试、金丝雀等）。满足服务器和服务的基本需求后，可以将金字塔的层向上移动，以处理更高级别的组件，如性能调优和效率、灾难恢复、异常检测和故障建模。
只有这样，你才能有效地在金字塔的顶端做“奥妙的工作”。这些事情可能不会在较小规模上发生，但由于数据的涌入和后端系统完成的工作量，在我们的环境中会发生。每个 PE 和 SWE 都有义务调查这些奇怪的问题，但如果服务的基本需求得不到满足，他们可能会发现自己只能动手修复本应自动处理的问题，而不是真正的可伸缩性问题。
大卫： 你所说的发展阶段是什么意思？
佩德罗：我看到团队和服务按此顺序经历三个阶段：
引导阶段佩德罗：我看到团队和服务按此顺序经历三个阶段：
引导阶段
执行任何所需的操作，使服务启动和运行。这可能意味着大量的故障修复和人工干预来解决问题。这可能意味着快速、迭代的部署会快速失败。这可能意味着一开始只允许最少的流量。在这个阶段可以建立相关运维的肌肉，并找出什么是失败模式，发现它如何影响其他系统。
缩放阶段
一旦你离开了引导阶段，就开始进入规模阶段。这可能包括将服务部署到多个区域，根据服务类型让数百万或数十亿人使用服务。团队在能够运维服务及其功能集、了解对其他系统的依赖关系，以及可能需要最终面对的体系结构变更方面变得更加成熟。
卓越阶段
现在，服务需要变得真的非常卓越。完成优化服务所需的最后 10% 到 20% 的工作，以便更高效、更卓越。我称之为“追求卓越”，因为当我试图要求人们优化某些东西时，没有人真正想要这样做。但是每个人都想做出一些令人惊叹的东西，所以我称之为卓越阶段。每个阶段所需的人员可能不同。软件和生产工程团队中都有一组人非常喜欢从事引导工作。也有人真正喜欢中间阶段的工作。引导完成后，他们希望扩展服务：使其更好、更具弹性和更大；承担更多的用户；并处理一致性和并发问题，以及更高成熟度相关的大型灾难恢复问题。甚至还有其他人想要做出一些性能好、效率高、坚如磐石的东西。有些人会随着时间推移而发展，并随着每个阶段的成长而成长，但我的经验是，大多数人不会通过这三个阶段留在服务中。他们会找到自己的最佳位置，他们会在组织中四处走动，找到发挥自己优势的工作。最终，我们希望每个人都做着卓越的工作，但现实是，并不是每个人都这样做，这是自然的。
大卫：  鉴于这些阶段和人们相应的倾向，你如何创建团队？大卫：  鉴于这些阶段和人们相应的倾向，你如何创建团队？