### TestNG and JUnit: Parallel Test Execution

Both TestNG and the latest versions of JUnit support running tests in parallel, which can significantly speed up test execution. However, to leverage this feature, you must ensure that your tests are designed to run concurrently. This may require refactoring your code, especially if it relies on shared resources such as common files or instance variables within test cases, as these can cause conflicts.

#### Ensuring Concurrency
When designing your tests for parallel execution, be cautious about potential interactions between them. For example, if your web tests start an embedded web server like Jetty, ensure that each set of concurrent tests uses a different port. This prevents port conflicts and ensures that tests do not interfere with each other.

If you successfully configure your application for parallel testing, it can be one of the most effective ways to reduce test execution time.

### 6.10. Conclusion

Automated testing is a critical component of any Continuous Integration (CI) environment and should be treated with the utmost seriousness. In CI, feedback is paramount, so it is essential to ensure that your tests, including integration and functional tests, run quickly.

### 7.1. Introduction

Jenkins supports various security models and can integrate with multiple user repositories. In smaller organizations where developers work closely together, security on the Jenkins machine may not be a major concern. You might only need to prevent unauthorized users from tampering with build job configurations. In larger organizations with multiple teams, a more stringent approach is often required, allowing only team members and system administrators to modify build job configurations. When the Jenkins server is exposed to a broader audience, such as on an internal corporate website or the internet, certain build jobs may be visible to all users, while others need to be hidden from unauthorized users.

In this chapter, we will explore how to configure different security settings in Jenkins for various environments and circumstances.

### 7.2. Activating Security in Jenkins

Setting up basic security in Jenkins is straightforward. Navigate to the main configuration page and check the "Enable security" checkbox. This will display several options, which we will discuss in detail. The first section, "Security Realms," determines where Jenkins will look for users during authentication. Options include using users stored in an LDAP server, using underlying Unix user accounts (if Jenkins is running on a Unix machine), or using a simple built-in user database managed by Jenkins.

The second section, "Authorization," determines what actions users can perform once they are logged in. This ranges from simple options like "Anyone can do anything" or "Logged-in users can do anything" to more sophisticated role and project-based authorization policies.

### 7.3. Simple Security in Jenkins

The simplest usable security model in Jenkins allows authenticated users to perform any action, while non-authenticated users have read-only access to build jobs. This is ideal for small teams, where developers can manage build jobs, and other users (such as testers, business analysts, and project managers) can view the status of the project. Some build jobs may be specifically set up to display the results of automated acceptance tests or code quality metrics.

To set up this configuration, choose "Logged-in users can do anything" in the Authorization section. Jenkins offers several methods for user authentication (see Section 7.4, "Security Realms—Identifying Jenkins Users"). For this example, we will use Jenkins's built-in user database (see Section 7.4.1, "Using Jenkins’s Built-in User Database"). Ensure you select the "Allow users to sign up" option, which will display a "Sign up" link at the top of the screen, allowing users to create their own accounts as needed (see Figure 7.2, "The Jenkins Sign up page").

It is advisable for developers to use their SCM username when signing up. This way, Jenkins can associate changes in the source code with the corresponding user, making it easier to track who contributed to a particular build.

### 7.4. Security Realms—Identifying Jenkins Users

Jenkins provides multiple ways to identify and manage users, ranging from a simple built-in user database suitable for small teams to integration with enterprise directories.

#### 7.4.1. Using Jenkins’s Built-in User Database

The easiest way to manage user accounts in Jenkins is to use its internal user database. This is a good option for keeping things simple, as minimal setup is required. Users who need to log in to the Jenkins server can sign up and create an account. Depending on the security model chosen, an administrator can then decide what these users are allowed to do.

Jenkins automatically adds all SCM users to this database whenever a change is committed to the source code. These usernames are primarily used to record who is responsible for each build job. You can view the list of currently known users by clicking on the "People" menu entry (see Figure 7.3, "The list of users known to Jenkins"). This list includes all users who have ever committed changes to the projects monitored by Jenkins, but not all of them may be active Jenkins users.

If you click on a user in this list, Jenkins displays details about the user, including their full name and the build jobs they have contributed to (see Figure 7.4, "Displaying the builds that a user participates in"). From here, you can also modify or complete the user's details, such as their password or email address.

A user appearing in this list cannot necessarily log in to Jenkins. To log in, the user account needs to be set up with a password. There are two ways to do this:
- If you have activated the "Allow users to sign up" option, users can simply sign up with their SCM username and provide their email address and a password.
- Alternatively, you can activate a user by clicking on the "Configure" menu option in the user details screen and providing an email address and password yourself (see Figure 7.5, "Creating a new user account by signing up").

If your email addresses are synchronized with your version control usernames, you can configure Jenkins to derive the email address from the username by adding a suffix in the Email Notification section (see Figure 7.6, "Synchronizing email addresses").

Another way to manage active users is by clicking on the "Manage Users" link in the main Jenkins configuration page (see Figure 7.7, "You can also manage Jenkins users from the Jenkins configuration page"). From here, you can view and edit the users who can log in to Jenkins, including those who have signed up manually and SCM users that you have activated by configuring them with a password. You can also edit a user's details or remove them from the list of active users.

### 7.4.2. Using an LDAP Repository

Many organizations use LDAP directories to store user accounts and passwords across applications. Jenkins integrates well with LDAP, requiring no special plugins. It can authenticate users using the LDAP repository, check group membership, and retrieve the email addresses of authenticated users.

To integrate Jenkins with your LDAP repository, select "LDAP" in the Security Realm section and fill in the appropriate details about your LDAP server (see Figure 7.9, "Configuring LDAP in Jenkins"). The most important field is the repository server. If you are using a non-standard port, specify it (e.g., ldap.acme.org:1389). If you are using LDAPS, specify the URL (e.g., ldaps://ldap.acme.org).

If your server supports anonymous binding, this should be enough to get started. Otherwise, use the Advanced options to fine-tune your configuration. Most advanced fields can be left blank unless you have a specific reason to change them. For large repositories, you may want to specify a root DN value (e.g., dc=acme, dc=com) and/or a User and Group search base (e.g., ou=people) to narrow down the scope of user queries. If your server does not support anonymous binding, provide a Manager DN and a Manager DN password so Jenkins can connect to the server to perform queries.

Once you have set up LDAP as your Security Realm, you can configure your preferred security model. When users log in to Jenkins, they will be authenticated against the LDAP repository.

You can also use LDAP groups, though the configuration is not immediately obvious. Suppose you have defined a group called JenkinsAdmin in your LDAP repository, with a DN of cn=JenkinsAdmin, ou-Groups, dc=acme, dc=com. To refer to this group in Jenkins, take the common name (cn) in uppercase and prefix it with ROLE_. So, cn=JenkinsAdmin becomes ROLE_JENKINSADMIN (see Figure 7.10, "Using LDAP Groups in Jenkins").

### 7.4.3. Using Microsoft Active Directory

Microsoft Active Directory is a widely used directory service product in Microsoft architectures. Although Active Directory provides an LDAP service, it can be tricky to set up, and it is simpler to have Jenkins communicate directly with the Active Directory server. The Jenkins Active Directory plugin facilitates this, allowing you to configure Jenkins to authenticate against a Microsoft Active Directory server. You can both authenticate users and retrieve their groups for Matrix and Project-based authorization.

To configure the plugin, provide the full domain name of your Active Directory server. If you have multiple domains, provide a comma-separated list. If you provide the forest name (e.g., acme.com instead of europe.acme.com), the search will be done against the global catalog. Note that if you do this without specifying the bind DN, the user would have to log in as "europe\joe" or "joe@europe".

Advanced options let you specify a site name (to improve performance by restricting the domain controllers that Jenkins queries) and a Binding DN and password, which are useful for connecting to a multidomain forest. Provide valid Binding DN and password values that Jenkins can use to connect to your server and establish the full identity of the user being authenticated. This way, the user can simply type in "jack" or "jill," and the system will automatically figure out that they are jack@europe.acme.com or jill@asia.acme.com. Provide the full user principal name with the domain name, like jack@europe.acme.com, or a LDAP-style distinguished name, such as CN=Administrator,OU=europe,DC=acme,DC=com.

This plugin works in both Windows and Unix environments. If Jenkins is running on a Windows machine and you do not specify a domain, that machine must be a member of the domain you wish to authenticate against. Jenkins will use ADSI to figure out all the details, so no additional configuration is required.

On a non-Windows machine (or if you specify one or more domains), tell Jenkins the name of the Active Directory domain(s) to authenticate with. Jenkins then uses DNS SRV records and the LDAP service of Active Directory to authenticate users.

Jenkins can determine which groups in Active Directory the user belongs to, allowing you to use these groups as part of your authorization strategy. For example, you can use these groups in matrix-based security or allow "Domain Admins" to administer Jenkins.

### 7.4.4. Using Unix Users and Groups

If you are running Jenkins on a Unix machine, you can ask Jenkins to use the user and group accounts defined on that machine. In this case, users will log into Jenkins using their Unix account logins and passwords. This uses Pluggable Authentication Modules (PAM) and also works fine with NIS.

In its most basic form, this can be cumbersome, as it requires setting up new user accounts for each new Jenkins user. It is only really useful if these accounts need to be set up for other purposes.

### 7.4.5. Delegating to the Servlet Container

Another way to identify Jenkins users is to let your Servlet container handle it. This approach is useful if you are running Jenkins on a Servlet container such as Tomcat or GlassFish and already have an established way to integrate the Servlet container with your local enterprise user directory. Tomcat, for example, allows you to authenticate users against a relational database (using direct JDBC or a DataSource), JNDI, JAAS, or an XML configuration file. You can also use the roles defined in the Servlet container’s user directory for Matrix and Project-based authorization strategies.

In Jenkins, this is easy to configure—just select this option in the Security Realm section (see Figure 7.11, "Selecting the security realm"). Once you have done this, Jenkins will let the server take care of everything.

### 7.4.6. Using Atlassian Crowd

If your organization uses Atlassian products such as JIRA and Confluence, you may also be using Crowd. Crowd is a commercial Identity Management and Single-Sign On (SSO) application from Atlassian that lets you manage single user accounts across multiple products. It allows you to manage both an internal database of users, groups, and roles and integrate with external directories such as LDAP directories or custom user stores.

Using the Jenkins Crowd plugin, you can use Atlassian Crowd as the source of your Jenkins users and groups. Before you start, set up a new application in Crowd (see Figure 7.12, "Using Atlassian Crowd as the Jenkins Security Realm"). Set up a new Generic Application called "hudson" (or something similar) and step through the tabs. In the Connections tab, provide the IP address of your Jenkins server. Map the Crowd directories you will use to retrieve Jenkins user accounts and group information. Finally, tell Crowd which users from these directories can connect to Jenkins. One option is to allow all users to authenticate and let Jenkins sort out the details. Alternatively, you can list the Crowd user groups allowed to connect to Jenkins.

Once you have set this up, install the Jenkins Crowd plugin via the Jenkins Plugin Manager. After installing the plugin and restarting Jenkins, define Crowd as your Security Realm in the main Jenkins configuration screen (see Figure 7.13, "Using Atlassian Crowd as the Jenkins Security Realm").

With this plugin installed and configured, you can use users and groups from Crowd for any of the Jenkins Authorization strategies discussed earlier in the chapter. For example, in Figure 7.14, "Using Atlassian Crowd groups in Jenkins," we are using user groups defined in Crowd to set up Matrix-based security in the main configuration screen.

### 7.4.7. Integrating with Other Systems

In addition to the authentication strategies discussed, there are several other plugins that allow Jenkins to authenticate against other systems. At the time of writing, these include Central Authentication Service (CAS)—an open-source single sign-on tool—and the Collabnet Source Forge Enterprise Edition (SFEE) server.

If no plugin is available, you can write your own custom authentication script. To do this, install the Script Security Realm plugin. Once you have installed the script and restarted Jenkins, write two scripts in your favorite scripting language. One script authenticates users, while the other determines the groups of a given user (see Figure 7.15, "Using custom scripts to handle authentication").

Before invoking the authentication script, Jenkins sets two environment variables: U, containing the username, and P, containing the password. This script uses these environment variables to authenticate using the specified username and password, returning 0 if the authentication is successful and some other value otherwise. If authentication fails, the output from the process will be reported in the error message displayed to the user. Here is a simple Groovy authentication script:

```groovy
def env = System.getenv()
def username = env['U']
def password = env['P']
println "Authenticating user $username"
if (authenticate(username, password)) {
    System.exit(0)
} else {
    System.exit(1)
}

def authenticate(def username, def password) {
    def userIsAuthenticated = true
    // Authentication logic goes here
    return userIsAuthenticated
}
```

This script is sufficient for basic authentication without groups. If you need to use groups from your custom authentication source in your Matrix-based or Project-based authorizations, you will need to extend the script accordingly.