TestNG and the more recent versions of JUnit support running tests in parallel. Nevertheless, you will
need to ensure that your tests can be run concurrently, which may take some refactoring. For example,
common files or shared instance variables within test cases will cause problems here.
In general, you need to be careful of interactions between your tests. If your web tests start up an
embedded web server such as Jetty, for example, you need to make sure the port used is different for
each set of concurrent tests.
169
Nevertheless, if you can get it to work for your application, running your tests in parallel is one of the
more effective way to speed up your tests.
6.10. Conclusion
Automated testing is a critical part of any Continuous Integration environment, and should be taken
very seriously. As in other areas on CI, and perhaps even more so, feedback is king, so it is important
to ensure that your tests run fast, even the integration and functional ones.
170
Chapter 7. Securing Jenkins
7.1. Introduction
Jenkins supports several security models, and can integrate with several user repositories. In smaller
organizations, where developers work in close proximity, security on your Jenkins machine may
not be a large concern—you may simply want to prevent unidentified users tampering with your
build job configurations. For larger organizations, with multiple teams, a stricter approach might be
required, where only team members and system administrators are allowed to modify their build job
configurations. And in situations where the Jenkins server may be exposed to a broader audience, such
as on an internal corporate website, or even on the Internet, certain build jobs may be visible to all users
whereas others will need to be hidden to unauthorized users.
In this chapter, we will look at how to configure different security configurations in Jenkins, for different
environments and circumstances.
7.2. Activating Security in Jenkins
Setting up basic security in Jenkins is easy enough. Go to the main configuration page and check the
Enable security checkbox (see Figure 7.1, “Enabling security in Jenkins”). This will display a number of
options, that we will investigate in detail in this chapter. The first section, Security Realms, determines
where Jenkins will look for users during authentication, and includes options such as using users stored
in an LDAP server, using the underlying Unix user accounts (assuming, of course, that Jenkins is running
on a Unix machine), or using a simple built-in user database managed by Jenkins.
The second section, Authorization, determines what users can do once they are logged in. This ranges
from simple options like “Anyone can do anything” or “Logged-in users can do anything,” to more
sophisticated role and project-based authorization policies.
Figure 7.1. Enabling security in Jenkins
In the remainder of this chapter, we will look at how to configure Jenkins security for a number of
common scenarios.
7.3. Simple Security in Jenkins
The most simple usable security model in Jenkins involves allowing authenticated users to do anything,
whereas non-authenticated users will just have a read-only view of the build jobs. This is great for small
teams—developers can manage the build jobs, whereas other users (testers, BAs, project managers and
so on) can view the build jobs as required to view the status of the project. Indeed, certain build jobs
may be set up just for this purpose, displaying the results of automated acceptance tests or code quality
metrics, for example.
You can set up this sort of configuration to choose “Logged-in users can do anything” in the
Authorization section. There are several ways that Jenkins can authenticate users (see Section 7.4,
“Security Realms—Identifying Jenkins Users”), but for this example, we will be using the simplest
option, which is to use Jenkins’s own built in database (see Section 7.4.1, “Using Jenkins’s Built-in
User Database”). This is the configuration illustrated in Figure 7.1, “Enabling security in Jenkins”.
Make sure you tick the “Allow users to sign up” option. This option will display a Sign up link at the top
of the screen to let users create their own user account as required (see Figure 7.2, “The Jenkins Sign
up page”). It is a good idea for developers to use their SCM username here: in this case, Jenkins will be
able to work out what users contributed to the SCM changes that triggered a particular build.
172
Figure 7.2. The Jenkins Sign up page
This approach is obviously a little too simple for many situations—it is useful for small teams working
in close proximity, where the aim is to know who’s changes caused (or broke) a particular build, rather
than to manage access in any more restrictive way. In the following sections, we will discuss the two
orthogonal aspects of Jenkins security: identifying your users (Security Realms) and determining what
they are allowed to (Authorization).
7.4. Security Realms—Identifying Jenkins Users
Jenkins lets you identify and manage users in a number of ways, ranging from a simple, built-in user
database suitable for small teams to integration with enterprise directories, with many other options in
between.
7.4.1. Using Jenkins’s Built-in User Database
The easiest way to manage user accounts in Jenkins is to use Jenkins’s internal user database. This is a
good option if you want to keep things simple, as very little setup or configuration is required. Users who
need to log on to the Jenkins server can sign up and create an account for themselves, and, depending
on the security model chosen, an administrator can then decide what these users are allowed to do.
Jenkins automatically adds all SCM users to this database whenever a change is committed to source
code monitored by Jenkins. These user names are used mainly to record who is responsible for each
build job. You can view the list of currently known users by clicking on the People menu entry (see
Figure 7.3, “The list of users known to Jenkins”). Here, you can visualize the users that Jenkins currently
knows about, and also see the last project they committed changes to. Note that this list contains all of
the users who have ever committed changes to the projects that Jenkins monitors—they may not be (and
usually aren’t) all active Jenkins users who are able to log on to the Jenkins server.
173
Figure 7.3. The list of users known to Jenkins
If you click on a user in this list, Jenkins takes you to a page displaying various details about this user,
including the user’s full name and the build jobs they have contributed to (see Figure 7.4, “Displaying
the builds that a user participates in”). From here, you can also modify or complete the details about
this user, such as their password or email address.
Figure 7.4. Displaying the builds that a user participates in
A user appearing in this list cannot necessarily log on to Jenkins. To be able to log on to Jenkins, the
user account needs to be set up with a password. There are essentially two ways to do this. If you
have activated the “Allow users to sign up” option, users can simply sign up with their SCM user
name and provide their email address and a password (see Section 7.3, “Simple Security in Jenkins”).
174
Alternatively, you can activate a user by clicking on the Configure menu option in the user details screen,
and provide an email address and password yourself (see Figure 7.5, “Creating a new user account by
signing up”).
Figure 7.5. Creating a new user account by signing up
It is worth noting that, if your email addresses are synchronized with your version control user names (for
example, if you work at acme.com, and user “joe” in your version control system has an email address
of PI:EMAIL), you can get Jenkins to derive the email address from a user name by adding a suffix
that you configure in the Email Notification section (see Figure 7.6, “Synchronizing email addresses”).
If you have set up this sort of configuration, you don’t need to specify the email address for new users
unless it does not respect this convention.
Figure 7.6. Synchronizing email addresses
Another way to manage the current active users (those who can actually log on to Jenkins) is by clicking
on the Manage Users link in the main Jenkins configuration page (see Figure 7.7, “You can also manage
Jenkins users from the Jenkins configuration page”).
175
Figure 7.7. You can also manage Jenkins users from the Jenkins configuration page
From here, you can view and edit the users who can log in to Jenkins (see Figure 7.8, “The Jenkins user
database”). This includes both users that have signed up manually (if this option has been activated)
and SCM users that you have activated by configuring them with a password. You can also edit a user’s
details (for example modifying their email address or resetting their password), or even remove them
from the list of active users. Doing this will not remove them from the overall user list (their name will
still appear in the build history, for example), but they will no longer be able to log on to the Jenkins
server.
Figure 7.8. The Jenkins user database
The internal Jenkins database is sufficient for many teams and organizations. However, for larger
organizations, it may become tedious and repetitive to manage large numbers of user accounts by hand,
especially if this information already exists elsewhere. In the following sections, we will look at how
to hook Jenkins up to other user management systems, such as LDAP repositories and Unix users and
groups.
7.4.2. Using an LDAP Repository
Many organizations use LDAP directories to store user accounts and passwords across applications.
Jenkins integrates well with LDAP, with no special plugins required. It can authenticate users using the
LDAP repository, check group membership, and retrieve the email address of authenticated users.
176
To integrate Jenkins with your LDAP repository, Just select “LDAP” in the Security Realm section, and
fill in the appropriate details about your LDAP server (see Figure 7.9, “Configuring LDAP in Jenkins”).
The most important field is the repository server. If you are using a non-standard port, you will need to
provide this as well (for example, ldap.acme.org:1389). Or, if you are using LDAPS, you will need
to specify this as well (for example, ldaps://ldap.acme.org)
If your server supports anonymous binding, this will probably be enough to get you started. If not, you
can use the Advanced options to fine-tune your configuration.
Most of the Advanced fields can safely be left blank unless you have a good reason to change them. If
your repository is extremely large, you may want to specify a root DN value (e.g., dc=acme, dc=com)
and/or a User and Group search base (e.g., ou=people) to narrow down the scope of user queries.
This is not usually required unless you notice performance issues. Or, if your server does not support
anonymous binding, you will need to provide a Manager DN and a Manager DN password, so that
Jenkins can connect to the server to perform its queries.
Figure 7.9. Configuring LDAP in Jenkins
Once you have set up LDAP as your Security Realm, you can configure your favorite security model
as described previously. When users log on to Jenkins, they will be authenticated against the LDAP
repository.
You can also use LDAP groups, though the configuration is not immediately obvious. Suppose you have
defined a group called JenkinsAdmin in your LDAP repository, with a DN of cn=JenkinsAdmin, ou-
Groups, dc=acme, dc=com. To refer to this group in Jenkins, you need to take the common name (cn)
in uppercase, and prefix it with ROLE_. So cn=JenkinsAdmin becomes ROLE_JENKINSADMIN. You
can see an example of LDAP groups used in this way in Figure 7.10, “Using LDAP Groups in Jenkins”.
177
Figure 7.10. Using LDAP Groups in Jenkins
7.4.3. Using Microsoft Active Directory
Microsoft Active Directory is a directory service product widely used in Microsoft architectures.
Although Active Directory does provide an LDAP service, it can be a little tricky to set up, and it is
simpler to get Jenkins to talk directly to the Active Directory server. Fortunately, there’s a plugin for that.
The Jenkins Active Directory plugin lets you configure Jenkins to authenticate against a Microsoft
Active Directory server. You can both authenticate users, and retrieve their groups for Matrix and
Project-based authorization. Note that, unlike the conventional LDAP integration (see Section 7.4.2,
“Using an LDAP Repository”), there is no need to prefix group names with ROLE_—you can use Active
Directory groups (such as “Domain Admins”) directory.
To configure the plugin, you need to provide the full domain name of your Active Directory server.
If you have more than one domain, you can provide a comma-separated list. If you provide the forest
name (say “acme.com” instead of “europe.acme.com”), then the search will be done against the global
catalog. Note that if you do this without specifying the bind DN (see below), the user would have to
login as “europe\joe” or “joe@europe”.
The advanced options let you specify a site name (to improve performance by restricting the domain
controllers that Jenkins queries), and a Binding DN and password, which come in handy if you are
connecting to a multidomain forest. You need to provide a valid Binding DN and password values,
that Jenkins can use to connect to your server so that it can establish the full identity of the user being
authenticated. This way, the user can simply type in “jack” or “jill”, and have the system automatically
figure out that they are PI:EMAIL or jack@asia.acme.com. You need to provide the full
user principal name with domain name, like PI:EMAIL, or a LDAP-style distinguished
name, such as CN=Administrator,OU=europe,DC=acme,DC=com.
Another nice thing about this plugin is that it works both in a Windows environment and in a Unix
environment. So if Jenkins is running on a Unix server, it can still authenticate against a Microsoft
Active Directory service running on another machine.
178
More precisely, if Jenkins is running on a Windows machine and you do not specify a domain, that
machine must be a member of the domain you wish to authenticate against. Jenkins will use ADSI to
figure out all the details, so no additional configuration is required.
On a non-Windows machine (or you specify one or more domains), you need to tell Jenkins the name
of Active Directory domain(s) to authenticate with. Jenkins then uses DNS SRV records and LDAP
service of Active Directory to authenticate users.
Jenkins can determine which groups in Active Directory that the user belongs to, so you can use these
as part of your authorisation strategy. For example, you can use these groups in matrix-based security,
or allow “Domain Admins” to administer Jenkins.
7.4.4. Using Unix Users and Groups
If you are running Jenkins on a Unix machine, you can also ask Jenkins to use the user and group
accounts defined on this machine. In this case, users will log into Jenkins using their Unix account logins
and passwords. This uses Pluggable Authentication Modules (PAM), and also works fine with NIS.
In its most basic form, this is somewhat cumbersome, as it requires new user accounts to be set up and
configured for each new Jenkins user. It is only really useful if these accounts need to be set up for
other purposes.
7.4.5. Delegating to the Servlet Container
Another way to identify Jenkins users is to let your Servlet container do it for you. This approach is
useful if you are running Jenkins on a Servlet container such as Tomcat or GlassFish, and you already
have an established way to integrate the Servlet container with your local enterprise user directory.
Tomcat, for example, allows you to authenticate users against a relational database (using direct JDBC
or a DataSource), JNDI, JAAS, or an XML configuration file. You can also use the roles defined in the
Servlet container’s user directory for use with Matrix and Project-based authorization strategies.
In Jenkins, this is easy to configure—just select this option in the Security Realm section (see
Figure 7.11, “Selecting the security realm”). Once you have done this, Jenkins will let the server take
care of everything.
Figure 7.11. Selecting the security realm
179
7.4.6. Using Atlassian Crowd
If your organization is using Atlassian products such as JIRA and Confluence, you may also be using
Crowd. Crowd is a commercial Identity Management and Single-Sign On (SSO) application from
Atlassian that lets you manage single user accounts across multiple products. It lets you manage both
an internal database of users, groups and roles, and integrate with external directories such as LDAP
directories or custom user stores.
Using the Jenkins Crowd plugin, you can use Atlassian Crowd as the source of your Jenkins users
and groups. Before you start, you need to set up a new application in Crowd (see Figure 7.12,
“Using Atlassian Crowd as the Jenkins Security Realm”). Just set up a new Generic Application called
“hudson” (or something similar), and step through the tabs. In the Connections tab, you need to provide
the IP address of your Jenkins server. Then map the Crowd directories that you will be using to retrieve
Jenkins user accounts and group information. Finally, you will need to tell Crowd which users from these
directories can connect to Jenkins. One option is to allow all users to authenticate, and let Jenkins sort
out the details. Alternatively, you can list the Crown user groups who are allowed to connect to Jenkins.
Figure 7.12. Using Atlassian Crowd as the Jenkins Security Realm
Once you have set this up, you need to install the Jenkins Crowd plugin, which you do as usual via the
Jenkins Plugin Manager. Once you have installed the plugin and restarted Jenkins, you can define Crowd
as your Security Realm in the main Jenkins configuration screen (see Figure 7.13, “Using Atlassian
Crowd as the Jenkins Security Realm”).
180
Figure 7.13. Using Atlassian Crowd as the Jenkins Security Realm
With this plugin installed and configured, you can use users and groups from Crowd for any of the
Jenkins Authorization strategies we discussed earlier on in the chapter. For example, in Figure 7.14,
“Using Atlassian Crowd groups in Jenkins”, we are using user groups defined in Crowd to set up Matrix-
based security in the main configuration screen.
Figure 7.14. Using Atlassian Crowd groups in Jenkins
7.4.7. Integrating with Other Systems
In addition to the authentication strategies discussed here, there are a number of other plugins that
allow Jenkins to authenticate against other systems. At the time of writing, these include Central
Authentication Service (CAS)—an open source single sign-on tool—and the Collabnet Source Forge
Enterprise Edition (SFEE) server.
If no plugin is available, you can also write your own custom authentication script. To do this, you need to
install the Script Security Realm plugin. Once you have installed the script and restarted Jenkins, you can
write two scripts in your favorite scripting language. One script authenticates users, whereas the other
determines the groups of a given user (see Figure 7.15, “Using custom scripts to handle authentication”).
181
Figure 7.15. Using custom scripts to handle authentication
Before invoking the authentication script, Jenkins sets two environment variables: U, containing the
username, and P, containing the password. This script uses these environment variables to authenticate
using the specified username and password, returning 0 if the authentication is successful, and some
other value otherwise. If authentication fails, the output from the process will be reported in the error
message displayed to the user. Here is a simple Groovy authentication script:
def env = System.getenv()
def username = env['U']
def password = env['P']
println "Authenticating user $username"
if (authenticate(username, password)) {
System.exit 0
} else {
System.exit 1
}
def authenticate(def username, def password) {
def userIsAuthenticated = true
// Authentication logic goes here
return userIsAuthenticated
}
This script is enough if all you have to deal with is basic authentication without groups. If you want to
use groups from your custom authentication source in your Matrix-based or Project-based authorizations
182