for payment, but spent tickets or those past their spending
interval must be ﬁrst exchanged at the bank.
Users remain anonymous by exchanging tickets with the
bank through Tor. However, in order to exchange during the
relay-exchange interval, a relay is required to prove knowl-
edge of its private key to the bank. Although this means
relays are not anonymous in the exchange, we note that the
bank can already enumerate the list of relays by download-
ing the public directory. The bank validates that the relay
is bound to the exchanged tickets.
Relay Ticket Exchange When relay C receives ticket T C,
it becomes a voucher for C redeemable for a new relay-
speciﬁc ticket. Relay C and bank B use Protocol 1, Relay-
Ticket-Exchange, to generate a new ticket spendable at re-
lay R given that C presents a valid ticket voucher T C and
new ticket material. C performs setup on lines 1–2 by gen-
erating a random value and its hash. C sends B the voucher
T C, and B is responsible for validating T C. B does this by
verifying T C is within the allowable date interval for relay-
exchange, the identity C from T C matches the real identity
C, C | H(T C
r ) never appeared before (i.e. T C was not dou-
ble spent), σ is a valid signature on C | H(T C
r ), and that a
freshly computed H(T C
r ) matches the hash from T C. If the
voucher validates, B and C cooperate to produce a partially
blind signature on the new ticket T R payable to relay R.
Protocol 1 Relay-Ticket-Exchange: T C for T R between re-
lay C and bank B for service at relay R. The arrows represent
anonymous communication in Tor. The partially blind signature
(pbs-sign(·)) and veriﬁcation (pbs-verif y(·)) are deﬁned in [1].
Setup:
1: C: generate random receipt T R
2: C: construct partial stub T R
Execution:
3: C → B: redeemable voucher T C
4: B: validate voucher pbs-verif y(T C)
5: B: global ticket validity date-stamps d = {du | dv | dw}
6: B ↔ C: partially blind-signature σ = pbs-sign(blind(T R
7: C: construct full stub T R
8: C: construct ticket T R = {T R
s = {R | H(T R
s = {T R
s | d | σ}
s ) | d)
r )}
s | T R
r }
r
{T
{T
{T
R2
r
R1
r
R1
s
Ri
s
R3
s
R2
s
| T
| T
| R3 | MC→R3}
Protocol 2 BRAIDS-Communication: Message M from Client C
to server S through relays R1, R2, R3.
Setup:
Ri
r }, for i ∈ [1, 3]
1: C obtains tickets T Ri = {T
R3
| T
| S | MC→S}
2: MC→R3 = EKCR3
r
| T
3: MC→R2 = EKCR2
| R2 | MC→R2}
4: MC→R1 = EKCR1
Execution:
5: C → R1 : MC→R1
6: R1 : verify T
7: R1 → R2 : EKR1R2
8: R2 : verify T
9: R2 → R1 : EKR1R2
10: R2 → R3 : EKR2R3
11: R3 : verify T
12: R3 → R2 : EKR2R3
13: R3 → S : MC→S
R1
{T
r }
{MC→R3}
{MC→R2}
R2
r }
R2
s
{T
R1
s
R3
s
Client Ticket Exchange Since a client might obtain tick-
ets for a relay who is oﬄine for the duration of the ticket’s
spending interval, a client may exchange a ticket for another
bound to a new relay. The Client-Ticket-Exchange proto-
col (not shown) is essentially identical to Protocol 1, except
that on line 4 the bank checks that the ticket is in the cor-
rect interval for client-exchange, but does not (and cannot)
check for the identity of the client in the ticket.
Incorporating Tickets into the Tor Protocol Our ticket
construction from Section 3.1 enables us to easily embed
ticket stubs and receipts in Tor messages (i.e. cells). As
shown in Protocol 2, BRAIDS-Communication, the client con-
structs the Tor message such that each relay on the path
receives its own ticket stub and the receipt for the previous-
hop in the path. There are two exceptions: the ﬁrst-hop
relay does not send a receipt to the client, and the last-hop
relay receives a complete ticket (there is no next-hop relay).
We must include accounting mechanisms not only for the
forward path from client to server, but also the reverse path
from server to client due to asymmetric bandwidth require-
ments (e.g. streaming media). Since the reverse path cannot
be paid by the server, clients pre-pay circuits (several cells
can be transferred for each ticket) and relays notify clients
when their paid balance expires. Clients embed tickets in
outgoing cells using Protocol 2, which distributes tickets to
each relay in the circuit. A relay lowers a circuit’s priority
when not paid and restores it after new tickets arrive. Since
scheduling decisions are made locally and independently,
321clients may choose to pay a subset of relays in the circuit
without aﬀecting scheduling decisions made by other relays.
Relays drop circuits upon detection of malicious activity,
including forged tickets, and will only forward messages if a
receipt is returned by the next-hop relay. Each relay is en-
couraged to participate faithfully to continue accumulating
tickets since malicious activity stops the ﬂow of tickets for
all relays in a dropped circuit.
Double Spending We have shown that relay-speciﬁc pay-
ments eliminates the trade-oﬀ between double spending pre-
vention [39] and information leakage, suﬀered by PAR [3],
since tickets can be veriﬁed by the relay without a third
party. Anonymous payments are appropriate in Tor since
they protect the identity and privacy of the user.
3.3 Randomized Ticket Distribution
A major problem with the gold star incentive scheme [38]
is that gold star relays can be distinguished from normal
relays, since their gold star status appears in the public di-
rectory. This reduces their anonymity set – an adversary
can be conﬁdent that if a client is receiving gold star ser-
vice, that client also runs a relay.
To mitigate this problem, we assign each client ticket dis-
tribution agents – guard nodes that assist in distributing free
tickets to all clients. We note that each Tor client already
uses a small set of guard nodes from which a circuit entry
node is selected to limit client identity (IP address) expo-
sure to malicious entry nodes. Each agent distributes tickets
from the bank to clients in proportion to the bandwidth it
provides as a relay: the client will create a secure connection
tunneled through an agent to invoke the ticket distribution
protocol (similar to Relay-Ticket-Exchange – Protocol 1).
Agents frustrate a Sybil attack [15], where clients join mul-
tiple nodes to the system to increase free ticket income, by
limiting tickets distributed to each client’s IP address.
Distribution Requirements We require several proper-
ties as agents distribute tickets: nearly all clients should
obtain tickets to remain indistinguishable from relays when
spending; the algorithm that assigns clients to agents should
not leak the client’s identity to prevent an adversary from
using a predecessor attack to infer a client from its agents; a
client should obtain more tokens by becoming a relay than
by cheating to maintain relay incentives; and a client’s set
of agents should be consistent over roughly the same period
as they would if used as regular guards for stability.
Agent Assignment Each client uses Protocol 3 to deter-
mine which guard nodes it can use as distribution agents. A
fundamental part of the protocol is the hash–bandwidth test
for a guard G. The test is true if the result of a cryptographic
hash is less than the fraction of total guard bandwidth pro-
vided by G ([46] describes secure bandwidth measurements).
A client uses hash–bandwidth tests to walk through the
guards while constructing a set of signature chains such that
each chain can be veriﬁed as a correct chain for the client.
After completing Protocol 3, each constructed chain is then
used as input to a ﬁnal round of hash–bandwidth tests (one
for each guard): every guard that passes this ﬁnal test is
assigned as a distribution agent for the client.
A client builds signature chains as follows. On line 1, a
client initializes a signature chain with its IP address and
0 as the current step in the walk. The client then initiates
a pseudo-random walk: any guard G that passes the hash–
bandwidth test is a valid next step, using the previous link
Protocol 3 Agent-Assign: Clients veriﬁably compute their as-
signed ticket distribution agents by creating signature chains.
1: sig chains = [((clientIP, 0))]
2: for i = 1 → walk length do
3:
next step = [ ]
for chain ∈ sig chains do
4:
5:
6:
7:
8:
9:
10:
11:
12:
sig = get sig(G, clientIP, i)
next step.append(chain + G.pub key + sig)
abort() /* found no valid chains of proper length */
link = last(chain)
for G ∈ guards do
if hash(link | G.pub key)<bandwidth f rac(G) then
sig chains = next step
if sig chains = [ ] then
in the chain and G’s public key as input to the hash function
(line 7). If G passes the test, it will return a signature to ex-
tend the chain and the walk (line 8-9). Although not shown
on line 8, the client also sends the previous signature in the
chain to prove to the guard that the signature request is
valid (and not a waste of resources). Note that each step of
a walk may break or fork a signature chain, hence the num-
ber of parallel walks performed, depending on the number
of guards that pass the hash–bandwidth test. A client will
continue extending its signature chains until it has walked
walk length steps, or has no next steps for any walk.
If Protocol 3 does not terminate via abort(), then each
chain in the list of sig chains is a veriﬁable (but not public)
token that attests the correctness of the assignment with-
out leaking the client’s IP address. The client uses each
constructed chain to ﬁnd an agent: a guard A that passes
another hash–bandwidth test using the chain and A’s public
key as input to the hash function.
If Protocol 3 terminates via abort(), then the client does
not have any valid agents. However, to control the expected
and median number of agents per client, we may add an
adjustable parameter λ to the bandwidth fraction of each
guard node. Probabilistic bounds show that the probability
of having k agents will decrease exponentially in k, making
it infeasible for an adversary to gain a large advantage by,
e.g. manipulating the public keys of some agents.
Protocol 3 requires that clients compute hashes for ev-
ery guard, but is advantageous since it does not require re-
assignment when agents churn and it load-balances distri-
bution tasks among agents. Although Tor directory servers
measure bandwidth [51], we require a secure bandwidth mea-
surement technique such as [46]: the bandwidth values listed
in the consensus become a security parameter since they de-
termine the outcome of the hash–bandwidth tests, the num-
ber of agents assigned to a client, and therefore the total
number of free tickets a client may receive.
Longer walks increase security since an adversary must
compromise walk length nodes to manipulate a signature
chain. We suggest using walk length = 3 so that an adver-
sary has a higher probability of compromising a circuit than
compromising a walk: in the random oracle model, and as-
suming a deterministic signature scheme (like RSA+FDH),
predicting (better than random guessing) whether a given
guard is a valid agent for a client reduces to producing valid
signatures for all walk length signatures in the chain. With
a walk length of 3, an adversary would not only need to
control the ﬁnal relay in the chain, but also either the ﬁrst
or second relay to obtain all three signatures. The fraction
322of nodes’ agents that can be guessed in this way is on the
same order of magnitude as the fraction of circuits that can
be compromised by end-to-end attacks. We simulated agent
assignment and found that using walk length = 3 and λ = 0