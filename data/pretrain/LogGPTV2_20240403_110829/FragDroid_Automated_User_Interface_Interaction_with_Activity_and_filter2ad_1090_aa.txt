# Title: FragDroid: Automated User Interface Interaction with Activity and Fragment Analysis in Android Applications

## Authors:
- Jia Chen†
- Ge Han†
- Shanqing Guo*†‡
- Wenrui Diao§

**†School of Computer Science and Technology, Shandong University**
**‡Key Laboratory of Cryptologic Technology and Information Security, Ministry of Education, Shandong University, Jinan 250100, China**
**§Jinan University**

### Abstract
In recent years, the popularity of Android phones has surged in the consumer market. As the most popular mobile platform, Android has also attracted significant attention from attackers, leading to a rise in malicious applications that threaten user security and privacy. To address this issue, automated UI testing techniques have become prevalent due to their efficiency and accuracy. However, existing UI testing methods primarily focus on Activities as the basic unit of interaction, neglecting the detailed analysis of Fragments. This oversight limits path coverage.

To bridge this gap, we introduce FragDroid, an innovative automated UI testing framework that supports both Activity and Fragment analysis. We designed the Activity & Fragment Transition Model (AFTM) to simulate internal app interactions, enabling the generation of test cases through UI interactions. With AFTM, FragDroid can access most Activities and Fragments within an app and detect arbitrary API calls. We implemented a prototype of FragDroid and evaluated it on 15 popular apps. The results show that FragDroid successfully covered 66% of Fragments and their corresponding API calls, outperforming traditional approaches by at least 9.6% in terms of API call detection.

## I. Introduction
Smartphones' powerful functionalities are supported by diverse mobile applications. As the most popular mobile platform, Android offers millions of apps, with over 1.5 million applications and 50 billion downloads on Google Play. This popularity has also drawn the attention of attackers, resulting in an increase in malicious apps that pose serious threats to user security and privacy.

Automated UI testing techniques have become the primary solution for detecting these threats, balancing detection efficiency and accuracy. Traditional UI testing involves injecting random test cases into a running app to explore as many UI states as possible. Tools like Monkey, provided by Google, exemplify this approach. Subsequent enhancements include record and replay (R&R) techniques, which record human-triggered UI events and translate them into scripts for execution on other devices. While R&R techniques facilitate test case reproduction, they are expensive in terms of input collection and maintenance.

More recently, model-based testing (MBT) has been proposed, which injects test cases into an app based on a specific model. MBT typically consists of two phases: model generation and dynamic testing. The challenge lies in generating an effective model with high path coverage. White-box tests use automatic model generation based on source code, while black-box tests use dynamic slicing at runtime. Dynamic slicing models guide the app to trigger events but face challenges such as backtracking difficulty and lack of context.

Activities are the fundamental building blocks of Android apps, and existing Android UI test tools based on MBT use Activities as the basic unit to distinguish different UI states. However, since Android 3.0, Fragments have been introduced, and their usage has become more prevalent after Android 5.0 due to their efficiency and low consumption in UI switching. Our study of 217 top-downloaded apps from Google Play revealed that nearly 91% of these apps use Fragments. Yet, none of the existing MBT techniques can handle Fragment components effectively, leading to several challenges.

**Challenge 1:** An Activity can host multiple Fragments, and existing MBT techniques treat the Activity as a fixed UI state. They overlook reachable UI states caused by Fragment transformations and miss the logic functions within them. Random input tests, like Monkey, can occasionally reach these Fragments but lack programmability and precise control. For Fragment-level analysis, transitions between Activities and Fragments and the functions within Fragments need to be analyzed. Fragment transformations within an Activity can lead to UI state changes, as shown in Figure 1. Ignoring these transformations results in a low proportion of total reachable UI states.

**Challenge 2:** Fragment switching mechanisms can be invisible or hidden in the UI, making it difficult for existing MBT techniques to uncover the relationships between Fragments. Figure 2 illustrates this, where an app uses a navigation drawer design. The slide menu is the only bridge between two Fragments, and it is hidden, requiring a specific action to reveal it. Most existing techniques fail to recognize such switching relationships and the corresponding UI states.

**Our Work:** To address these challenges, we propose FragDroid, an automated Android UI testing technique that supports both Activity and Fragment analysis. FragDroid considers the interactions between Activities and Fragments during testing, detecting and invoking both to explore all reachable UI states.

We define an Activity & Fragment Transition Model (AFTM) to store possible transitions between Activities and Fragments. AFTM accounts for dependencies among UI elements, including Activities, Fragments, and widgets. To handle hidden Fragment switching, we use Java reflection to force UI state changes. FragDroid synthesizes ideas from ripper techniques and automation frameworks/APIs (AF/A), providing high-level syntax for generating test cases.

Given an APK file, FragDroid first extracts dependency information. The app is then installed on a customized Android device for dynamic execution. FragDroid generates test case scripts based on AF/A, triggering different UI events. It monitors and analyzes runtime information, updating AFTM and test case sequences until all possible UI states are explored.

**Contributions:**
- **FragDroid:** The first Android automated UI testing framework supporting both Activity and Fragment analysis. We implemented a full-featured prototype.
- **Evaluation:** We analyzed 217 popular apps, revealing that 91% use Fragments. Evaluating FragDroid on 15 of these apps, we achieved an average coverage of 66% for Fragments and 71.94% for Activities, demonstrating satisfactory performance.
- **Sensitive API Detection:** FragDroid helps discover the relationship between sensitive API invocations and UI elements, useful for detecting malicious code and bugs. In our experiment, 46 sensitive APIs, such as location and storage access, were found in 15 selected apps. API invocations associated with Fragments accounted for 49% of the total, compared to 9.6% missed by traditional Activity-based approaches.

**Roadmap:**
- Section II: Background on Activity and Fragment components in Android.
- Section III: High-level design of FragDroid.
- Section IV: Definition and initialization of the Activity & Fragment Transition Model.
- Section V: Dependency extraction process.
- Section VI: Evolutionary test case generation.
- Section VII: Experimental results.
- Section VIII: Limitations of our framework.
- Section IX: Related works.
- Section X: Conclusion.

## II. Background
### A. Activity and Fragment in Android
The Activity class is the most common component in an Android app, serving as the entry point for user interaction and providing a window for the app's UI. The Fragment was introduced in Android 3.0 to enhance app development and user experience, supporting more dynamic and flexible UI designs on large screens. A Fragment can be treated as a modular section of an Activity, with its own lifecycle and input events. By dividing an Activity's layout into Fragments, developers can modify the Activity's appearance at runtime.

### B. Relationship Between Activity and Fragment
Activities and Fragments are fundamental building blocks of Android apps. A Fragment can be added to or removed from an Activity at runtime, contributing a portion of the UI to the host Activity. Developers can add Fragments to an Activity's layout either by declaring them in the layout file or programmatically. The FragmentTransaction class provides APIs for adding, removing, and replacing Fragments. Since a Fragment can get a Context instance from its host Activity, it can perform actions similar to an Activity, such as starting a new Activity, obtaining privileges, and accessing sensitive information.

## III. System Overview
FragDroid is an automated Android GUI testing framework that supports Fragments, achieving high path coverage by triggering nearly all Fragments and Activities during dynamic analysis. The framework consists of two main phases: Static Information Extraction and Evolutionary Test Case Generation.

### Static Information Extraction
This phase collects necessary information for subsequent evolutionary test case generation through static code analysis. The primary information collected is the Activity & Fragment Transition Model (AFTM), a finite state model simulating internal interactions among Activities and Fragments. Additional metadata, such as the number of Activities and Fragments and dependencies among UI controls, is also collected. A JSON file records all view components and their locations.

### Evolutionary Test Case Generation
In this phase, dynamic test cases are generated using AFTM data. AFTM is a dynamic model, continuously updated until all nodes are visited. The queue generation module traverses the initial AFTM by breadth-first search, pushing new items to the queue for each newly discovered node. Each item contains transition information, and the test case generation module uses this to create a test program with Robotium. After running a test program, the UI driving module analyzes the current UI state on the Fragment level, identifying the current Activity and Fragment, triggering clickable widgets, and updating AFTM with new transition relationships. These operations continue until all nodes are visited.

## IV. Activity & Fragment Transition Model (AFTM)
AFTM is a finite state model extracted from an Android app, containing working Activities, Fragments, and event-driven transitions among them. Working Activities and Fragments are not isolated and can interact with users. AFTM simulates the internal structure of an app and serves as a map for dynamic analysis.

### Definition of AFTM
AFTM is defined as a tuple \( \langle A, F, E, T \rangle \), where:
- \( A \) is a finite set of Activities that can switch from/to other elements (Activities or Fragments) in the call graph of the app. \( A_0 \) is the entry Activity, followed by \( A_1, A_2, A_3, \ldots \).
- \( F \) is a finite set of Fragments that can switch from/to other elements.
- \( E \) is a set of events that trigger transitions.
- \( T \) is a set of transition rules defining how elements in \( A \) and \( F \) change in response to events in \( E \).

### Initialization of AFTM
AFTM is initialized from the smali code of the target app. The formal definition and initialization process will be detailed in the following sections.

---

This optimized version of the text is more structured, coherent, and professional, making it easier to read and understand.