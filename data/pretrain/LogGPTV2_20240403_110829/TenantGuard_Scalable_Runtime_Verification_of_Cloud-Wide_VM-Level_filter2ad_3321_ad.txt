found, or 11 for reachability veriﬁed. In the leftmost leaf
of the binary trie of Figure 7, RLB is set to 00, which
- Variable HR is a sequence of triplets (r id, r if, src)
that stores the history of the visited nodes from source for
that IP range, where r id is a router id, r if is a router
interface and src is the original source node. The last
result is appended to the beginning of the sequence and
should be used at the next iteration. For more readability,
in Figure 7, we only show the two ﬁrst items of the
triplet from the last outcome (next hop) of routing rules
matching in R_A1.
1.10.0.0/22
0
0XXXXXXXXX
0
1
1
1XXXXXXXXX
0
1
 
 
 
0
000000000X
0
 
1
111111111X
1
0000000000,
L,00, 
0011111110,
H,00, 
0100000000,
L,00, 
0100001110,
H,00, 
0100001111,
L,11, 
1111111111,
H,11, 
Fig. 7. X-fast Binary Trie for Subnet SN A2 and Destination 1.10.0.0/22.
Leaves Contain Results from Matching Radix Trie in Figure 6 with the
Destination
C. Veriﬁcation
In this section, we present our customized algorithms
to perform the three veriﬁcation steps. The reason that we
opt for customized algorithms, instead of existing large-scale
graph processing systems (e.g., Pregel [40], BGL [41], and
CGMgraph [42]) is that those are mostly designed for general-
purpose graph algorithms like ﬁnding shortest-path. None of
them can easily support network isolation use cases addressed
in this paper,
in particular, path modiﬁcations caused by
decision making along the path (e.g. routing, ﬁrewalling), or
the path transformational operations (e.g., NAT).
Before starting the actual veriﬁcation, X-fast binary tries
are created and initialized for each pair of source and des-
tination IP preﬁxes using the virtual network model G as it
was explained in Section IV-B2. Also, as it was mentioned
earlier, both Step 1 and Step 2 are parts of the preﬁx-
level veriﬁcation, where the ﬁrst step is applied on private
IP addresses while the second takes care of the public IP
addresses. As a result, we will have BT ries for pairs of
private IP preﬁxes of subnets in the same component (veriﬁed
in Step 1) and other BT ries for pairs IP preﬁxes of subnets
and external networks (veriﬁed in Step 2.a) and vice-versa
(veriﬁed in Step 2.b). These two steps will be explained
in Section IV-C1. Afterward, VM-level isolation veriﬁcation
takes place at Step 3, details of which are in Section IV-C2.
1) Preﬁx-Level Veriﬁcation: The function preﬁx-to-preﬁx
(see Algorithm 1) uses the initialized X-fast binary tries btrie
to verify preﬁx-level isolation on each hop between all pairs of
source and destination IP preﬁxes. For a given pair of preﬁxes,
the preﬁx-to-preﬁx veriﬁes routing rules on a per-hop basis. In
all hops between a given pair of preﬁxes, it uses the same
corresponding X-fast binary trie (i.e., having one preﬁx as
source speciﬁed in leaves and the other as destination speciﬁed
in the root of the trie) to update the new results according
to the results of matching the rules within the node’s radix
trie against each IP range. The core of this algorithm is the
matching process (explained in Section IV-B1) and copying
7
these results from a temporary trie to the btrie. The latter is
explained better using the following example.
Example 7: Figure 8 illustrates the process of copying
the leaves from the temporary binary trie, which contain
the outcome of matching R0 rules with the destination IP
preﬁx, to the the main preﬁx-to-preﬁx binary trie within the
appropriate IP range (Algorithm 1 line 10). Figure 8 illustrates
the modiﬁed binary trie after applying a hop per address
range veriﬁcation on the trie of Figure 7 with an excerpt
of the rules of R_A3 (left-side) and R_A2 (right-side). We
compute only the decisions of those routers that are related
to Range 1 and Range 2. After matching these tables with
the destination address, new leaves are created (e.g., Range
2 is split into Range 21 and Range 22) with new results,
while for others (i.e., Range 1) only the result is updated in
the binary trie, as follows:
- At R_A2, no routing rule was matched, thus indicating a
black hole (RLB is 10) for range 1.
- At R_A3, matching the destination preﬁx with the corre-
sponding rules results in two matching rules (i.e., r31
and r32), which partitions Range 2 into two sub-
ranges. Range 21 is handled by r31, which leads to
a loop (RLB = 01) that can be detected by consulting
the variable HR. Packets belonging to Range 22 are
handled by rule r32 and they can reach the router
gateway R_A3 (i.e., RLB = 11).
Algorithm 1 takes as input the binary trie identiﬁer then
updates the trie progressively by creating new leaves and
modifying others using per-hop results. At each iteration, it
traverses the leaves of the trie and, for each IP range, it
matches the radix trie corresponding to the networking element
speciﬁed for that range with the destination IP preﬁx using
algorithms in Section IV-B1. The algorithm terminates if a
loop or a blackhole is found, or reachability is veriﬁed for all
ranges. It uses a temporary trie T empBT rie, which contains
the result of matching the radix trie of the current router with
the destination IP preﬁx located at the root of the binary trie as
discussed in Section IV-B1. This temporary trie is generated
once, but can be re-used, particularly, for the veriﬁcation
of other IP preﬁxes as source (e.g., SN_A2 and SN_A3 in
Figure 3) with the same destination (e.g., ExtNet_1) and
the same router (e.g., R_A1). Function searchT ries ﬁnds, if
any, the temporary trie corresponding to the speciﬁc router
and destination IP range. Function Copy is used to update the
main binary trie btrie with the results stored in the temporary
binary trie T empBT rie for each speciﬁc range as discussed
in Example 7.
2) VM-Level
Isolation Veriﬁcation: Preﬁx-level
results
computed in Section IV-C1 are used to determine subnets that
are not isolated. For those subnets, we need to perform a VM-
level isolation veriﬁcation by checking for each pair of VMs
their corresponding security groups using both private and
public IP addresses. Algorithm 2 describes the VM-to-VM pro-
cedure in which function Route-Lookup checks whether there
exists a forwarding path between any two VM ports, whereas
the V erif ySecGroups function veriﬁes security groups of
these VMs.
router = get(HR, r id)
dst = getroot(btrie)
if searchT ries(dst, router) = f alse then
Algorithm 1 preﬁx-to-preﬁx(btrie)
1: Input/Output: btrie
2: counter=0
3: for each range [L, H] in btrie.leafs with RLB = 00 do
4:
5:
6:
7:
8:
9:
10:
11:
12: if counter 6= 0 then
13:
Copy(btrie, T empBT rie, [L, H])
counter = counter + 1
preﬁx-to-preﬁx(btrie)
T empBT rie = M atch(RadixT rie(router), dst)
else
T empBT rie = getBT rie(dst, router)
Algorithm 2 VM-to-VM(VMsrc, VMdest)
1: Triepub = getBTrie(V Mdst.publicIP.CIDR, V Msrc. subnet id)
2: Triepriv = getBTrie(V Mdst.privateIP.CIDR, router id)
3: routable =Route-Lookup(T riepub, T riepriv)
4: if routable = true then
5:
V erif ySecGroups(VMsrc, VMdest)
relevant binary tries leaves using the IP addresses of these
VMs. This will determine the leaves with boundaries H and
L corresponding to the IP ranges containing VMs’ IPs and
verifying the value of the ﬂag RLB. This is explained in the
following example.
Example 8: Consider the case of VM_A1 and VM_B2 from
our running example shown in Figure 2. Route lookup for this
pair is achieved by searching for the two X-fast binary tries
denoted by T riepub and T riepriv, respectively, in Algorithm
1. The T riepub and T riepriv tries contain the routing results
respectively, for the pair (SN_A2, ext_net) and (ext_net,
SN_B2). Using the public IP of VM_B2 (i.e., 1.10.1.12, which
is within the preﬁx of ExtNet 1), and the private IP of VM_A1
(i.e., 10.0.0.12, which is within the preﬁx of subnet SN A2),
the corresponding binary trie T riepub is shown in Figure 8.
By searching the Triepub (see Figure 8) using the public IP of
VM_B2, one can ﬁnd that it falls into Range 22. The value
of RLB for this range is 11, which indicates the existence
of a route from SN A2 to ExtN et 1. Similarly, T rieP riv
can be identiﬁed using the public IP of VM_B2, which is
attached to router R_B1, and its private IP (i.e., 19.0.0.30).
Searching in T riepriv (not shown for the lack of space) for
the RLB for using the private IP of VM_B2 allows concluding
on the existence of a route between VM_A1 and VM_B2. More
precisely, if RLB in these boundary leaves of both T riepriv
and T riepub is equal to 11, we say that a forwarding path
exists between these VMs.
At this stage, once a path is found between the subnets of
the pair of VMs, we then verify both security groups associated
with these VMs. According to the type of communication,
either private or public IP will be used. For each VM within
a source subnet, we use its egress security group radix trie
and perform a ﬁrst-match with the public or private IP of
the destination VM. Then, we use the ingress security group
rules of the destination VM and perform a ﬁrst-match with the
public or private IP of the VM source. If both results indicate
matching rules with the accept decisions, then the pair of VMs
can be concluded to be reachable using their public or private
IP addresses.
The VM-to-VM route lookup is to determine whether
these VMs belong to reachable subnets by searching in the
3) Complexity Analysis: Let S be the number of subnets, R
be the number of routers between two preﬁxes (i.e., number
8
Rules in Router R_A3
Rule
Prefix
Next-Hop
1.10.0.0/22
0
1
Rules in Router R_A2
Rule
Prefix
Next-Hop
r31
1.10.1.0/28
IF_A12
0XXXXXXXXX
1XXXXXXXXX
r21
10.0.0.0/24
IF_A21
r32
1.10.1.0/30
RG_A3
0
1
0
1
…  …
0
…  …
…  …
000000000X
…  …
0
1
111111111X
1
0000000000,
L,10, R_A2, 
IF_A22
0011111110,
H,10, R_A2,
IF_A22
0100000000,
L,01, R_A1, 
IF_A12
0100000011,
L,01, R_A1, 
IF_A12
0100000100,
L,11, R_A3, 
RG_A3
0100001111,
H,11, R_A3,
RG_A3
0100010000,
L,11,R_A1,
RG_A1
1111111111,
H,11, R_A1, 
RG_A1
Fig. 8. Updated Binary Trie of Figure 7 Based on Matched Rules in Routers R A2 and R A3
of hops), L be the length of keys (whose maximum value
is 32 for an exact IP address), M be the number of VMs,
and N ex be the number of external networks. Complexities
related to the data structure manipulation are known to be
O(L) for insert operation in X-fast binary tries, O(Log(L))
for search operations in X-fast binary tries, and O(L) for radix
trie matching per router.
In Step 1 and Step 2, the complexity of preﬁx-to-
preﬁx reachability veriﬁcation (Algorithm 1) is O((S2 + 2 ×
S × N ex) × R × K × (L + log(L))), where K represents the
number of operations performed over the data structures for
each routing node. This can be approximated to O(S2) for large
data centers where the number of subnets is larger than the
number of external networks (N ex ≪ S) and the number of
hops is usually limited for delay optimization (R ≪ S), with
L and K being constants. In Step 3, the complexity of VM-
level veriﬁcation (Algorithm 2) is O(2 ∗ (L + Log(L)) ∗ M 2)
and can be approximated to O(M 2).
We thus obtain an overall complexity of O(S2 + M 2).
However, this only provides a theoretical upper bound, which
typically will not be reached in practice. In general, depending
on the communication patterns in multi-tenant clouds, the
number of interconnected subnets is usually smaller than S as
trafﬁc isolation is the predominant required property in such
environments. For example, it has been reported in [43] that
inter-tenant trafﬁc varies between 10% and 35% only. Thus, if
we denote by M ′ the number of VMs belonging to connected
subnets, it is safe to claim the practical complexity for our
solution would be O(S2+ M ′2), where M ′ ≪ M .
4) Correctness: According to our model, verifying isola-
tion means checking whether there exists any layer 3 commu-
nication path between any pair of VMs according to tenants’
policies. Therefore, proving the correctness of our approach
boils down to proving that our algorithm visits all paths
and returns the desired isolation result for each of them.
In a typical cloud environment at network virtual layer 3,
private IP addresses are used for communications inside the
same network (component), whereas public addresses are
used for communications between VMs belonging to different
networks, and with networks outside the cloud. As we are
considering both private and public IP addresses (with NAT
mechanism) to investigate the whole symbolic IP packet ad-
dress space, our approach explores all IP forwarding paths
by iteratively applying, on each path, relevant forwarding and
ﬁltering functions (using corresponding matching algorithms)
of each encountered node in the virtual network connectivity
graph for each packet.
Referring to Figure 4, Step 1 and Step 2 explore disjoint
preﬁx-level IP address spaces (private addresses spaces vs
public addresses space). Thus,
the two steps do not have
any side effects on one another. The results of these two
steps are the pairs of subnets that can reach each other (R)
and those that cannot (U ). As we use well-known packet
header matching algorithms to ﬁnd reachable paths, the sets
U and R should contain the correct pairs with respect to their
reachability status. The third step relies on the results of Step
1 and Step 2 and veriﬁes security groups for all pairs of VMs
belonging only to the set of pairs of reachable subnets in R.