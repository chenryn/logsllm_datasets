`ARM64_PTR_AUTH`是开启指针认证支持的选项，开启之后会提供签名和认证指针的指令并产生相关的密钥，这些保护能阻止ROP类修改地址的攻击。需要ARMv8.3才能支持的新特性。
`ARM64_BTI_KERNEL`开启选项会把分支目标识别（BTI）应用到内核中，能够对间接跳转的目标进行限制，能阻止JOP类的跳转攻击。与指针认证结合使用能很大程度上减少控制流劫持攻击。需要ARMv8.5才能支持的新特性。
参考：  
####  X86: Intel CET
Intel开发的新安全机制控制流执行技术CET（Control-flow Enforcement
Technology），主要提供了两个功能，间接分支跟踪和影子栈。间接分支跟踪能提供对间接分支的保护，用来防御`JOP/COP`类的攻击方法。影子栈可以提供对返回地址的保护，用来防御`ROP`类的攻击方法，影子栈的实现方式大多类似，这里同样是保存返回地址然后在函数返回时对地址做检查。
参考：
####  PAX_RAP
PaX/Grsecurity团队在2015年提出的针对Linux内核的新安全机制。其中的防御思路也分成两个部分，其一，针对返回地址的保护，它将返回地址保存在`rbx`中并与`r12`异或，在函数返回之前再异或回来并与返回地址作比较。例子如下：
    push %rbx
    mov 8(%rsp),%rbx
    xor %r12,%rbx
    ...
    xor %r12,%rbx
    cmp %rbx,8(%rsp)
    jnz .error
    pop %rbx
    retn
    .error:
    ud2
其二，针对非直接控制跳转的保护，它这里会在调用之前检查调用地址是否在白名单中，在调用返回之前也会进行检查。
调用执行之前：
    cmpq $0x11223344,-8(%rax)
    jne .error
    call *%rax
    ...
    cmpq $0x55667788,-16(%rax)
    jne .error
    call *%rax
    ...
    dq 0x55667788,0x11223344
    func:
调用返回之前：
    call ...
    jmp 1f
    dq 0xffffffffaabbccdd
    1:
    ...
    mov %(rsp),%rcx
    cmpq $0xaabbccdd,2(%rcx)
    jne .error
    retn
参考：
###  SMEP/PXN
在x86架构下为SMEP（Supervisor Mode Execution
Prevention，管理模式执行保护），在ARM架构下为PXN（Privileged eXecute Never，永不执行权限）。
SMEP是禁止内核执行用户空间的代码，如果在内核中执行了用户空间的代码就会触发页错误。开启条件是`CR4`寄存器的第21位为1，如果被设置为0则保护关闭。（这也给突破保护留下了机会，如果能通过漏洞把`CR4`寄存器的第20位设置为0即可绕过）
PXN 是一个防止用户空间代码被内核空间执行的安全特性（和SMEP一样）。在 ARMv7 的硬件支持下，通过 PXN
比特位的设定，决定该页的内存是否可被内核执行，可有效防止 ret2usr 攻击。需要ARMv7的硬件支持。
参考：  
###  SMAP/PAN
在x86架构下为SMAP（Supervisor Mode Access
Prevention，管理模式访问保护），在ARM架构下为PAN（Privileged Access Never，永不访问权限）。
SMAP是禁止内核访问用户空间的数据，如果在内核中访问了用户空间的代码就会出现错误。开启条件是`CR4`寄存器的第22位为1，如果被设置为0则保护关闭。绕过的方式同样可以是利用漏洞修改`RC4`寄存器的值。
PAN是一个防止用户空间数据被内核空间访问的安全特性（和SMAP一样）。需要ARMv8.1的硬件支持，下面有两个PAN相关的内核配置选项。
参考：
####  ARM: CPU_SW_DOMAIN_PAN
选项开启之后，启用CPU的PAN保护，确保内核无法访问用户空间数据来提高安全性。实现思路是用不同的内存映射来做约束，但遇到内核确实需要访问用户空间数据的情况时，会临时关闭保护。
参考：  
https://patchwork.kernel.org/project/linux-arm-kernel/patch/PI:EMAIL/
####  ARM: ARM64_SW_TTBR0_PAN
这个选项是用`TTBR0_EL1`交换来仿真实现PAN保护。开启选项之后通过把`TTBR0_EL1`指向保留归零区域和保留的ASID来阻止内核直接访问用户空间数据。当需要访问的时候会临时恢复合法的`TTBR0_EL1`。
参考：
###  PAX_MEMORY_UDEREF
这个防御机制是针对 Linux
的内核/用户空间做地址分离，再结合`KERNEXEC`能够防御大量针对内核的漏洞利用，比如`ret2usr/ret2dir`这类将特权级执行流引向用户空间的攻击方式。在
32-bit 的 x86 下，分离的特性很大部分是透过分段机制的寄存器去实现的，而 amd64 以后由于段寄存器功能的削弱，PaX 针对 64-bit
精心设计了`KERNEXEC/UDEREF`，包括使用 PCID 特性和`per-cpu-pgd`的实现等。后续UDEREF的改进(2017版)主要是利用硬件特性SMAP提升了性能的同时保证安全性。
UDEREF的实现主要包括几个方面：
  * `per-cpu-pgd` 的实现，将内核/用户空间的页目录彻底分离，彼此无法跨界访问
  * PCID 特性的使用，跨界访问的时候产生硬件检查
  * 内核/用户空间切换时，将用户空间映射为不可执行以及一些刷新 TLB 配合实现
由于 UDEREF 经过漫长的演变，而且不同的硬件设施会产生不同的防御效果和安全性能，因此 PaX 实现了如下几种模式的 UDEREF：
  * 无硬件 PCID 支持的，维护的页目录数量只有一个，进出内核的时候屏蔽页目录项的相关访问权限
  * 有硬件 PCID 支持的 WEAKUDEREF，维护两个页目录，并且将用户空间也备份进内核页目录，屏蔽相关访问位，进出内核时切换 CR3
  * 有硬件 PCID 支持的 STRONGUDEREF，维护两个页目录，不备份用户空间，内核空间的 TLB 常驻不刷新，减少性能损耗
参考：
###  DEFAULT_MMAP_MIN_ADDR=65536
`MMAP_MIN_ADDR`是内核中的一个配置选项，它能指定mmap产生的最小虚拟地址。如果这个值设置过于小会增加内核空指针问题导致的安全风险，小地址空间也可能配合其他漏洞做进一步的利用。阻止程序映射较低虚拟内存地址也有不方便的地方，有少部分应用会依赖映射低地址，比如`dosemu`，`qemu`，`wine`。
参考：
###  X86: pti=on (PAGE_TABLE_ISOLATION)
内核页表隔离（KPTI）的前身为KAISER，它是在其基础上增加实现了完全分离用户空间与内核空间的页表来解决页表泄露的问题。实现细节上，在创建全局页目录（PGD）的时候会创建两份，一份在内核运行时使用，另外一份在用户空间运行时使用，这样在切换内核空间和用户空间时PGD也会切换，这两个PGD有着相同的结构，但属于用户空间的PGD中的内核空间大部分会缺失。
参考：
###  ARM: kpti=on (UNMAP_KERNEL_AT_EL0)
选项开启后当在用户空间运行时会取消内核的映射，这个保护是针对之前爆出的熔断漏洞，它利用CPU的推测行为绕过MMU权限检查，泄露内核数据到用户空间中。在因为系统调用触发中断等等情况时又会把内核暂时映射回来。
参考：
###  mitigations=auto,nosmt
选项控制针对CPU的保护措施，`auto`会开启所有的保护，`nosmt`会关闭CPU的同步多线程功能。这样每个CPU核的辅助CPU将不会被激活，并且只使用每个CPU核上的主线程。
参考：
###  X86: MICROCODE
Intel为了应对幽灵，针对MICROCODE的生成问题打上补丁。在原来的微码ROM下面又增加了一小块SRAM存储，利用它来在ROM上打补丁。补丁的过程需要微码解码器的硬件支持，基本是向量替换的方式。
参考：
###  RESPECTRE
`Pax/Grsecurity`开发出的防御幽灵的安全机制。它是一个gcc编译器插件，它会理解代码的原始含义并自动的重构，用来消除能基于推测的侧信道信息。实际的效果测试表明只占用内核性能的0.3%。
参考：
###  Manual usage of nospec barriers
内核提供的通用API确保在分支预测的情况下边界检查是符合预期的。这里主要设计了两个API `nospec_ptr(ptr, lo,
hi)`和`nospec_array_ptr(arr, idx,
sz)`，第一个API会限制ptr在lo和hi的范围内，防止指针越界；第二个API会限制idx只有在`[0,sz)`的范围中才能获得`arr[idx]`的数据。
参考：
###  X86: spectre_v2=on (RETPOLINE)