### Captive Portal Detection and Errors

Captive portal detection is a critical feature for ensuring a seamless internet experience. However, our human-curated rules (detailed in Section 4.3.1) reveal that 30.1% of captive portal errors are not identified by Chrome. This high false negative rate can be attributed to slow captive portals. According to Chrome telemetry, only 54% of captive portal probe requests respond within the 3-second threshold, which is the maximum time Chrome waits before displaying an error UI. Additionally, a preliminary survey of captive portals in Japan suggests that some portals intentionally evade detection for unknown reasons [20].

### Challenges in Captive Portal Detection

Our findings indicate that using network probes to detect captive portals is both difficult and unreliable. Furthermore, we suspect that many error reports from captive portals are missing. Typically, a captive portal blocks reports until the user logs in. Since Chrome did not retry failed report uploads until recently, we do not expect to receive reports blocked by captive portals. We only receive such reports when the portal does not block the upload or when the user authenticates with the portal before dismissing the certificate warning. Therefore, the fraction of certificate errors caused by captive portals, as shown in Table 1, likely undercounts the actual issues.

Interestingly, a large number of the received captive portal reports share the same few certificate chains from a handful of vendors, as shown in Table 3. This suggests that if a small number of vendors adopted better captive portal implementations, the problem could be significantly alleviated.

**Table 3: Top Five Most Common Captive Portal Vendors in Certificate Reports (Sept 13 - Oct 10, 2016)**

| Captive Portal Vendor | Percent of All Reports |
|-----------------------|------------------------|
| Aruba Networks        | 0.95%                  |
| Orange France         | 0.14%                  |
| AlwaysOn              | 0.12%                  |
| GlobalSuite           | 0.09%                  |
| AccessNetwork.ru      | 0.09%                  |

### TLS Proxies and Network Middleboxes

Enterprises, schools, and even home networks often use middleboxes that intercept TLS connections using their own root certificates. These middleboxes introduce similar security issues as consumer anti-virus software. As discussed in Section 7.2, TLS proxies on both the client and network side can override Chrome’s security checks and introduce bugs that cause error warnings.

We find that missing root certificates for network middleboxes are a widespread problem. Our pipeline classifies such errors by looking for several popular middlebox product names in the certificate chain (as described in Section 4.3.2). Table 1 shows the relative frequency of this error class. Our classification is conservative; when we reviewed unclassified reports (Section 9), we found that many are due to other TLS proxy products not covered by our rules.

Missing root certificates cause the majority of certificate errors encountered by users of these products. For each product, more than 80% of certificate errors chaining to the product’s certificate are due to a missing root. When a user of one of these products sees a certificate error, it is very likely to be due to a missing root rather than any other cause.

In addition to missing roots, manual review reveals that TLS proxies introduce spurious certificate warnings through other misconfigurations. For example, some middleboxes use SHA-1 signatures, which Chrome no longer accepts as valid.

### Unclassified Errors

Our analysis pipeline does not automatically assign a root cause for 37% of reports. To characterize these unclassified reports, we manually reviewed a random sample of 100 unclassified reports from May 2017. Table 4 shows the results. When the pipeline does not assign a root cause, it is often because the report is for a site about which Googlebot has no data (e.g., an intranet site) or because the error was caused by a TLS proxy or captive portal that our pipeline does not look for. As described in Section 4.1.5, our pipeline does not yet attempt to assign root causes for certificate warnings due to SHA-1 signatures, as Chrome had not fully removed SHA-1 support during most of our dataset.

**Table 4: Manually Assigned Root Causes from a Random Sample of 100 Reports (May 2017)**

| Error Cause from Manual Inspection | Count |
|------------------------------------|-------|
| **Server Errors**                   |       |
| Server certificate uses weak signature algorithm | 10   |
| Server certificate has a name mismatch | 9    |
| Insufficient intermediates          | 5     |
| Government root certificate that isn’t widely trusted | 5    |
| Intranet IP without valid cert      | 4     |
| Server certificate chains to distrusted root | 2    |
| Server certificate has multiple errors | 2    |
| **Total**                           | 37    |
| **Network Errors**                  |       |
| Captive portal                      | 22    |
| Corporate middlebox                 | 8     |
| School middlebox                    | 7     |
| Misconfigured home router           | 4     |
| Other middlebox                     | 3     |
| **Total**                           | 44    |
| **Client Errors**                   |       |
| Old or corrupted root store         | 2     |
| Ad blocker or anti-virus using weak signatures | 2    |
| Expired anti-virus root             | 1     |
| Local server                        | 1     |
| Incorrect clock                     | 1     |
| **Total**                           | 7     |
| **Unknown**                         | 12    |

### Mitigations

Our ultimate goal is to stop showing unnecessary HTTPS error warnings. In this section, we propose, discuss, and evaluate mitigations for many of the misconfigurations that cause Chrome users to see unnecessary warnings. We expect that these mitigations will or have already replaced about 25% of certificate errors in Chrome.

#### Stopping Client Clock Errors

To address client clock errors, we implemented a special warning (Figure 5) that appears when the user’s clock is incorrect. Users cannot bypass this warning and must fix their clocks to proceed. This warning is based on a heuristic that compares the current system time to the binary build time. If the system time is either one year behind the build timestamp or more than two days ahead, Chrome shows the clock warning.

The build time heuristic has many false negatives. From April 30 to May 13, 2017, the heuristic detected only 68% of certificate errors caused by incorrect client clocks. For the remaining cases, Chrome showed a generic certificate warning. This suggested the need for improved client clock detection.

When the heuristic identifies a client clock error, the UI (Figure 5) is helpful. In 53% of reports associated with this UI, the user changed their clock (by at least 6 hours) before dismissing the warning. This compares to 3.9% of the time when Chrome showed a generic certificate warning for client clock errors, indicating that actionable errors are more helpful than generic security warnings.

To improve client clock error detection, we implemented a secure time service. Upon encountering a certificate with invalid dates, Chrome queries an update server for the current time (an HTTP URL, with the response signed by the private key corresponding to a public key baked into Chrome) and delays showing a warning for up to three seconds. If the query indicates a significantly skewed timestamp, Chrome shows the clock warning.

An analysis of certificate reports from an experimental launch shows that the secure time service improves detection of client clock errors to 96%, with 93% of queries completing in under three seconds. Even if a query does not complete within three seconds, the result is cached for future use.

#### Future Work

Ultimately, we aim to invisibly correct client clock errors by using the timestamp fetched from the secure time service for all certificate validations. However, this presents two challenges:
1. Chrome relies on the platform’s certificate validation library, which may not allow providing a time other than the system time.
2. Even if Chrome could correct the misconfiguration, it might still be desirable to alert the user to fix the system clock, as other applications may function incorrectly due to the incorrect system time.

Another area of future work is to reduce trust in Chrome’s update server. Instead, Chrome could implement a protocol such as Roughtime [3] for secure decentralized time synchronization.

### Captive Portal Detection Improvements

#### Shipping Known Captive Portals

Our analysis pipeline produces a list of candidate captive portal certificates, which we manually curate weekly to produce a list of known captive portals (Section 8.1). By shipping this list in Chrome and using it to supplement captive portal detection, we would nearly double the detection rate of certificate errors caused by captive portals. We implemented this by putting the captive portal list in a dynamically updateable Chrome component, allowing additions to the list to be shipped to clients on an ongoing basis. We launched this feature as an experiment on Chrome’s canary and dev channels. Telemetry from this experiment shows that 3.8% of name mismatch errors match a captive portal certificate on the list, and we plan to expand the experiment.

#### Certificate Report Retry

To gain better visibility into captive portals, we implemented report retries similar to Chrome’s telemetry system. Retrying allows us to receive reports caused by captive portals even if the captive portal prevents them from being sent until after the user authenticates. The implementation maintains reports in memory only and does not persist them to disk. While the implementation is not yet widely deployed, we hope to gain a more accurate picture of certificate errors caused by captive portals and expand our list of known captive portals.

### AIA Fetching on Android

Insufficient intermediates are a significant problem on Chrome for Android, accounting for 36% of all certificate warnings. This occurs because the platform does not fetch intermediates during certificate validation as other platforms do.

To address this, we implemented AIA fetching in Chrome for Android. When the platform certificate verifier returns an authority invalid error, Chrome looks at the last certificate for which there is no issuer in the server-sent chain. If this certificate has an AIA URL, Chrome fetches it and attempts platform certificate verification again. This process repeats until a valid certificate chain is found or a maximum number of fetches is exhausted.

AIA fetching was implemented in Chrome 58. Since its launch, the percentage of certificate errors caused by missing intermediates on Android has declined to 3.0% as of August 2017. The remaining errors are likely due to network flakiness, which could be improved by retrying failed AIA fetches.

**Future Work:**
If the Android certificate verifier directly supported AIA fetching, it would likely be more performant and benefit other Android applications. However, given the slower Android update cycles, Chrome on Android will likely need to support AIA fetching for the foreseeable future.

### Redirecting for Related Name Mismatches

Name mismatch errors account for a notable fraction of errors. The core idea is to redirect the user to the domain with a valid certificate. This would handle this class of error automatically and provide a smoother user experience.

**Figure 6: The warning that Chrome shows when it detects that a certificate error is caused by a captive portal.**

By implementing these mitigations, we aim to reduce unnecessary HTTPS error warnings and improve the overall browsing experience for Chrome users.