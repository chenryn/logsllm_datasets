## PostgreSQL openssl - multi cn 给SSL证书绑定多个CN hostname - 公网 HOSTNAME + 私网 HSOTNAME       
### 作者         
digoal         
### 日期         
2021-03-19          
### 标签         
PostgreSQL , multi host            
----         
## 背景         
[《[珍藏级] PostgreSQL ssl 证书配置 - 防止中间攻击者 - 以及如何使用证书无密码登录配置cert》](../202006/20200619_01.md)        
如果数据库有内网地址 和 外网地址, 怎么实现verify-full 同时支持校验数据库的内网和外网CN.          
可以试试以下方法, 关键还是PG内核是否支持多CN.   从PG代码看应该是支持multi dns的:     
src/interfaces/libpq/fe-secure-openssl.c     
```   
/*   
 *      Verify that the server certificate matches the hostname we connected to.   
 *   
 * The certificate's Common Name and Subject Alternative Names are considered.   
 */   
int   
pgtls_verify_peer_name_matches_certificate_guts(PGconn *conn,   
                                                                                                int *names_examined,   
                                                                                                char **first_name)   
{   
        STACK_OF(GENERAL_NAME) * peer_san;   
        int                     i;   
        int                     rc = 0;   
        /*   
         * First, get the Subject Alternative Names (SANs) from the certificate,   
         * and compare them against the originally given hostname.   
         */   
        peer_san = (STACK_OF(GENERAL_NAME) *)   
                X509_get_ext_d2i(conn->peer, NID_subject_alt_name, NULL, NULL);   
        if (peer_san)   
        {   
                int                     san_len = sk_GENERAL_NAME_num(peer_san);   
                for (i = 0; i type == GEN_DNS)   
                        {   
                                char       *alt_name;   
                                (*names_examined)++;   
                                rc = openssl_verify_peer_name_matches_certificate_name(conn,   
                                                                                                                                           name->d.dNSName,   
                                                                                                                                           &alt_name);   
                                if (alt_name)   
                                {   
                                        if (!*first_name)   
                                                *first_name = alt_name;   
                                        else   
                                                free(alt_name);   
                                }   
                        }   
                        if (rc != 0)   
                                break;   
                }   
                sk_GENERAL_NAME_pop_free(peer_san, GENERAL_NAME_free);   
        }   
        /*   
         * If there is no subjectAltName extension of type dNSName, check the   
         * Common Name.   
         *   
         * (Per RFC 2818 and RFC 6125, if the subjectAltName extension of type   
         * dNSName is present, the CN must be ignored.)   
         */   
        if (*names_examined == 0)   
        {   
                X509_NAME  *subject_name;   
                subject_name = X509_get_subject_name(conn->peer);   
                if (subject_name != NULL)   
                {   
                        int                     cn_index;   
                        cn_index = X509_NAME_get_index_by_NID(subject_name,   
                                                                                                  NID_commonName, -1);   
                        if (cn_index >= 0)   
                        {   
                                (*names_examined)++;   
                                rc = openssl_verify_peer_name_matches_certificate_name(conn,   
                                                                                                                                           X509_NAME_ENTRY_get_data(X509_NAME_get_entry(subject_name, cn_index)),   
                                                                                                                                           first_name);   
                        }   
                }   
        }   
        return rc;   
}   
```   
https://www.linuxidc.com/Linux/2014-10/108222.htm      
https://liuhongjiang.github.io/hexotech/2016/12/23/setup-your-own-ca/      
## 1      
openssl自建CA默认签署的是单域名证书，因为单台服务器上有多个https域名，签署多域名证书能方便很多，今天找了很久，除了一些卖证书的网站上有scr工具能加“使用者备用名称”，都没有找到openssl相关的添加方法。      
后来看openssl.cnf找到一个方法，这里记录一下：      
！！这个方法比较笨重，如果有其他方法，欢迎留言给我，感激不尽。      
主要修改在openssl.cnf      
将文件中原来的      
```      
commonName                    = Common Name (eg, your name or your server\'s hostname)      
commonName_max                = 64      
```      
修改为      
```      
0.commonName                    = Common Name (eg, your name or your server\'s hostname)      
0.commonName_max                = 64      
就是在前面加了个 “0.”，好了，如果要添加其他域名，只需要再增加相同的记录，前面的序号依次递增即可：      
0.commonName                    = Common Name (eg, your name or your server\'s hostname)      
0.commonName_max                = 64      
1.commonName                    = other  Common Name      
1.commonNAme_max                = 64      
......      
```      
其他的步骤：      
openssl.cnf中会要求部分文件及目录存在：      
```      
[root@localhost]#mkdir -p CA/{certs,crl,newcerts,private}      
[root@localhost]# touch CA/index.txt      
[root@localhost]#echo 00 > CA/serial      
```      
1.生成ca.key并自签署      
```      
openssl req -new -x509 -days 3650 -keyout ca.key -out ca.crt -config openssl.cnf      
```      
2.生成server.key(名字不重要)      
```      
openssl genrsa -out server.key 2048      
```      
3.生成证书签名请求      
```      
openssl req -new -key server.key -out server.csr -config openssl.cnf      
```      
Common Name 就是在这一步填写的，每次一个，如果没有那么多，可以直接回车      
4.使用自签署的CA，签署server.scr      
```      
openssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key -config openssl.cnf      
```      
输入第一步设置的密码，一直按y就可以了      
server.crt server.key 就是web服务器中使用的文件。      
NGINX 双向认证      
如果要做NGINX客户端证书验证的话，重复2、3、4，并执行下面命令生成个人证书      
```      
openssl  pkcs12 -export -inkey server.key -in server.crt -out  server.p12      
```      
将个人证书导入pc，同时在nginx ssl基础上增加设置：      
```      
ssl_verify_client on;      
ssl_client_certificate ca.crt;      
```      
另外：nginx的双向认证是相对独立的，你可以在验证server端用你购买的ssl证书，然后在验证客户端用自签名的ca和证书。      
通过OpenSSL提供FTP+SSL/TLS认证功能，并实现安全数据传输 http://www.linuxidc.com/Linux/2013-05/84986.htm      
## 2      
### Setup your own CA      
Recently, in our project we need enable tokenless auth for keystone, which means client or service can use client certificate to auth with out the token generated by keystone.      
Following steps are the experiment I made on my development environment, and the os is centos7, my user account is andrew, you should change it to your account accordingly.      
### Setup my own CA      
Fristly, we need setup a CA to sign our client certificate.      
Install openssl:      
```      
sudo yum install openssl      
```      
After openssl is installed, find the openssl conf file, and change the data directory of the CA.      
```      
[root@localhost ~]# locate openssl.cnf      
/etc/pki/tls/openssl.cnf      
/usr/share/man/man5/openssl.cnf.5ssl.gz      
```      
Change the dir configuration in the openssl.cnf file:      
```      
####################################################################      
[ ca ]      
default_ca      = CA_default            # The default ca section      
####################################################################      
[ CA_default ]      
#dir            = /etc/pki/CA           # Where everything is kept      