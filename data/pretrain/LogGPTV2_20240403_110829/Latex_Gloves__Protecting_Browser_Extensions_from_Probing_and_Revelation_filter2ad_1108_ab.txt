of these capabilities the user has to explicitly grant most of
them.
Content scripts are ﬁles that is executed in the context
of a web page. Although the content scripts live in isolated
worlds, allowing them to make changes to their JavaScript
environment without conﬂicting with the web page or any other
content scripts, they have access to the same DOM structure
3
{
}
"manifest_version": 2,
"name": "Example",
"version": "1.0",
"background": {
},
"content_scripts": [
{
"scripts": ["background.js"]
"matches": ["*://*.example.com/*"],
"js": ["content_script.js"]
}
],
"web_accessible_resources": [
"images/img.png",
"scripts/myscript.js"
],
"permissions": ["webRequest"]
Fig. 2: Example of a manifest.json ﬁle
as the main web content. As content scripts are executed in
the context of the web page, the content scripts can read and
modify the DOM of the web page the browser is visiting, as
well as inject data such as images and other scripts into the web
page [44], [26]. Content scripts can only use a subset of the
extension API calls (“extension”, “i18n”, “runtime” and “stor-
age”), neither of which need approval from the user. In case
the content scripts need access to more privileged extension
APIs, they can only access them indirectly by communicating
with the background pages through message passing. As the
access of the privileged API calls goes through the background
page via message passing, the user must approve them upon
installing the extension.
The structure of an extension is deﬁned in a manifest
ﬁle, called manifest.json, which is a mandatory ﬁle placed
in the extension’s root folder [46], [30]. The manifest ﬁle
contains, among other things, which ﬁles belong to the back-
ground page, which ﬁles belong to the content script, which
permissions the extension requires, and which resources can
be injected into the web page. An example of a manifest
ﬁle can be seen in Figure 2, which speciﬁes the background
page to be the JavaScript ﬁle background.js and the con-
tent script (content_scripts) to use the JavaScript ﬁle
content_script.js, and be executed on all domains that
matches the domain example.com. It deﬁnes two WARs
(web_accessible_resources), which are resources that
can be injected into the web page from the content script.
The path for the WARs is the path from the extension’s
root folder to the resources. The extension also asks for
the permission webRequest, which indicates the extension’s
background page want
the ability to intercept, block and
modify web requests.
Browser extensions scope: In the particular case of
content scripts, browser extensions insert their JavaScript ﬁles
in those web pages explicitly deﬁned by the extension’s
developers in the manifest ﬁle. Concretely, there is a mandatory
property named matches which indicate the web pages the
content script should be injected into. URLs can be deﬁned
following a match pattern syntax, which is reminiscent of
regular expressions, operating on a ://
 pattern [18]. Background pages are not affected by the
matches property. Instead, they remain idle until a JavaScript
event such as a network request or message passing coming
from an arbitrary content script, triggers their code, after which
they return to an idle state.
Web Accessible Resources:
If an extension wants
to inject a resource, such as an image or a script, into a
web page, the recommended way is to make the resource
“web accessible”. WARs are ﬁles that exist
in a browser
extension but can be used in the context of a web page.
A browser extension must explicitly list all WARs through
the web_accessible_resources property in the manifest
ﬁle [50], [29].
respectively.
WAR URLs are different
for Firefox and Chrome:
and
moz-extension:///
chrome-extension:/// in Firefox
and Chrome,
In Firefox,  is
a randomly generated UUID for each browser
instance,
and is generated when the extension is installed [50].
However, for Chrome,  is a publicly known
32 character
string derived from the RSA public key
with which the extension is signed, encoded using the
“mpdecimal” scheme. WAR URLs in Chrome have the
 hardcoded as the “hostname” part. For both
Firefox and Chrome, the recommended way of getting the
URL of the resource is to use the built-in API, which is
browser.extension.getURL("path") in the case of
Firefox [45], and chrome.runtime.getURL("path") for
Chrome [25]. Since Chrome extensions have a publicly known
extension UUID, an attacker could enumerate all installed
extensions which have WARs (See Section III).
Browser proﬁles and extension UUIDs: In Chrome
and Firefox, data such as bookmarks, passwords and installed
extensions is stored in a browser proﬁle [49]. A browser
installation may have several browser proﬁles, each with its
own data. Because Firefox’s extension UUIDs are randomized,
the same extension installed in multiple browser proﬁles will
have a different UUID for each proﬁle. In Chrome, which
uses ﬁxed extension UUIDs, an extension installed in multiple
browser proﬁles will use the same extension UUID in each
proﬁle.
III. PROBING ATTACK
When probing for an extension, JavaScript running in
a web page tries to determine the presence of a browser
extension in the browser in which the web page has been
loaded.
One way of performing the extension probing is by re-
questing a browser extension’s WARs through the publicly
known URLs for these resources. This is schematically shown
in Figure 1a where 1(cid:13) denotes the request made by the web
page to probe for a browser extension’s WAR. A successful
response to this request (denoted by 2(cid:13)) indicates the presence
of the extension to which the WAR belongs.
Probing for an extension in itself does not mean an attack
is taking place. It is not an attack if, e.g., Google probes
4
TABLE I: Alexa top 10,000 domains probing for Chrome
extensions. Note that a domain may appear in several rows
and/or columns.
top frame
sub frame
Total
same domain
185
36
other domain
15
2,399
2,572
YouTube
4
2,277
for the ChromeCast extension on YouTube.com since this is
the extension developer who probes for their own extension.
However, if it is not the extension developer who is probing
for the browser extension, but rather a third party with the
intent of discovering installed extensions to, e.g., increase the
entropy for browser ﬁngerprinting, the probing becomes a
probing attack. Attackers may use a probing attack to detect
the presence of any of the known browser extensions, thereby
enumerating the installed browser extensions in a victim’s
browser.
Sj¨osten et al. [55] explore the Alexa top 100,000 domains
to examine how many of them probe for WARs on their front
page and their reasons for doing so. Their research shows that
web developers and their applications may probe for WARs
for legitimate reasons. They ﬁnd only 66 domains, none in the
top 10,000, and surmise that this is caused by the technique
not being widely known.
We repeat
the experiment using a different detection
method, in order to study how this problem has developed
over time. Instead of the top 100,000, we limit ourselves to
the top 10,000, but perform a deeper study by visiting up to
twenty of the most popular web pages on each domain. We
also gather metrics that indicate whether the probing is due
to a third-party web origin, or whether it originates from the
domain itself.
Setup: We use a modiﬁed version of Chromium
63.0.3239.84, which allows us to monitor requests for WAR
URLs from a Chrome extension, as described in Section VI.
The entire process is automated using Selenium 3.8.1.
When visiting a web page, we wait for up to 10 minutes
for the web page to load. Once loaded, we wait an additional
20 seconds in order for any JavaScript on the web page to
execute.
During this time, a custom browser extension monitors any
requests made towards chrome-extension:// URLs and
logs them. In addition to the WAR URL itself, we also log
whether the request came from the parent frame or a sub frame,
as well as the web origin from which the request occurred.
Results: Starting from the list of top 10,000 domains
according to Alexa, we queried Bing to retrieve the most
popular twenty pages per domain. Bing returned 180,471
URLs for 9,640 domains. We further disregard domains for
which Bing did not return any results. Of the 180,471 URLs,
we were able to visit 179,952 spread over 9,639 domains.
In the latter case, 4 redirected to YouTube.com. In the other
cases, WARs were requested from a sub frame: 36 domains
loaded the sub frame from the same domain, while 2,399
loaded it from a third-party domain. Strikingly, 2,277 of those
sub frames originated on YouTube.com where most of these
requests were probing for the ChromeCast browser extension.
Our results are different from Sj¨osten et al. [55], which
may be attributed to the different methodology or an increase
in extension probing. No matter the reason for the discrepancy,
probing is both common and relevant. Although YouTube.com
probing for ChromeCast is not a probing attack, most of the
remaining extensions being probed for (e.g. popular extensions
such as AdBlock [10], AdBlock Plus [2] and Ghostery [6])
constitute probing attacks.
In an effort
IV. REVELATION ATTACK
to eliminate the extension probing attack,
Mozilla implemented a randomization scheme in its exten-
sions’ UUIDs. Since each extension is given a random UUID
upon installation, it is impossible to compose the URL of a
WAR to launch a probing attack without knowing that random
UUID. However, it is possible for an attacker to learn the
random UUID of an extension through an extension revelation
attack.
In an extension revelation attack, JavaScript running in
a web page tries to determine the presence of a browser
extension by monitoring the web page for new content which
references WARs. Although any introduced DOM modiﬁcation
might uniquely identify an extension [56], an injected WAR
URL contain a unique UUID for each proﬁle, which in turn
can be used to track users. Also, due to the nature of the WAR
URLs, a vast majority of all extensions injecting content with
WAR URLs can still be uniquely identiﬁable, in spite of the
randomization scheme, indicating it might make more harm
than good.
Figure 1b displays the revelation attack. JavaScript in a web
page detects that a browser extension has inserted a reference
to a WAR ( 1(cid:13)), and can now deduce the presence of this
extension.
In the case of Firefox, the revelation attack reveals a WAR
URL, which consists of a random UUID and a path component.
While the random UUID itself is insufﬁcient to derandomize
the extension, it can be used as a basis for a probing attack
( 2(cid:13) and 3(cid:13)).
It is important to realize that a probing attack may not be
needed in order to derandomize Firefox’s random UUIDs. In
Section IV-A, we show that the path component of the WAR
URL, which is not randomized in Firefox, contains enough
information to derandomize an extension’s random UUID in
many cases. In addition, because an attacker can retrieve the
content of a WAR and compute a hash over it, it is possible
to derandomize an extension even if the full WAR URL is
randomized.
An overview of the results is shown in Table I. In total,
out of the 10,000 domains, 2,572 probed for 45 different
extensions from either the top frame or a sub frame. Of the
domains that requested a WAR from the top frame, 185 had
not redirected the browser to another domain, while 15 did.
Furthermore, because the random UUID is unique per
“browser instance”, it can also be used as a unique ﬁngerprint
to deanonymize web users through the revelation attack. As we
show in Section IV-B, it is not trivial to remove this unique
ﬁngerprint from the browser.
5
in implementing a similar
The developers of Google’s Chrome browser have ex-
pressed interest
randomization
scheme [8]. In Section IV-C, we study the impact of adopting
this randomization scheme on Chrome extensions. The results
of both Section IV-A and Section IV-C are summarized in
Table II, where “Path” is the amount of extensions that can be
derandomized based on the path, “Hash” based on the sha256
hash digest of the content of the WARs, and “Path ∪ Hash”
the union of those sets.
Finally, in Section IV-D we perform an empirical study of
all available Firefox and Chrome extensions to determine how
many of them are affected by the revelation attack, revealing
themselves and their users to attackers simply by visiting an
attacker’s web page.
A. Derandomizing Firefox extensions
Since Firefox employs random UUIDs, the enumeration
techniques presented in [55], [53] cannot be used. Instead,
the extension must reveal itself for an attacker to get hold
of the random UUID. In order to derandomize a Firefox
extension, the extension must meet the following criteria. First,
the extension must have at least one deﬁned WAR, indicating
it might inject a resource. Second, the extension must make a
call to either of the functions browser.extension.getURL,
chrome.extension.getURL or chrome.runtime.getURL,
which are functions that, given an absolute path from the
root of the extension to the WAR, will return the full moz-
extension:/// URL. For the rest of
this section, we will group those functions together as
getURL(). Although these API functions are executed in the
context of the extension, i.e. they cannot be called directly
from the web page, if the extension injects the WAR in this
manner, the random UUID will be revealed to the web page
as part of the WAR URL. If this happens, and the attacker
gets the UUID, then how many extensions can be uniquely
identiﬁed based on the injected WAR URL?
To determine this, we scraped and downloaded all free
Firefox extensions from the Mozilla add-on store [47]. The
extensions are valid for Firefox 57 and above, as it is the
ﬁrst Firefox version to only support WebExtensions [51],
indicating all will receive a random UUID when installed.
The scrape was done on February 23, 2018, giving us 8,646
extensions. All of these extensions were unpacked, and their
manifest ﬁle examined for the web_accessible_resources
key, resulting in 1,742 extensions having at least one deﬁned
WAR. The mere presence of a WAR in an extension does
not mean that this resource will ever be injected. We took the
1,742 extensions with declared WARs, and checked how many
of them call a getURL() function, as this will construct the
WAR URL to be injected to the web page. This resulted in a
total of 1,378 extensions, indicating ≈79.10% of all Firefox