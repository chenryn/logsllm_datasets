in
in
in
mysql-
sI egrep "(processeslfiles)"
call
Call
call
call
-report-interval=5 --time=10 run
--report-interval=5
-mysql
to
to
to
to
--mysql-host=10.127.128.78
Lua
Lua
Lua
Lua
API
API
API
API
--time=10 run
(cannot
(cannot
(cannot
(cannot
--tables=10
table
open
open
es=10
open
.sock
opel
---
## Page 380
358丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
量变化。
用 prepare 的方式，我们以 10秒内的 sysbench 连接测试威力，看看 prepare statement 的数
16382，也稳定运行了很长时间了。
碰到了。
过几秒查看，可以看到 Prepared_stmt_count 已经接近阈值。
mysql> show global status like '%stmt%';
使用 show global status like"%stmt%'能够得到一个基本的数据变化。
我们的这个压测场景中，会短时间内创建大量的连接，而考虑到性能和安全，会使
# mysqladmin pro|wc -l:
比如我手头一个环境连接数有近500，但是max_prepared_stmt_count 还是默认值
这种模式下参数 max_prepared_stmt_count 其实也不一定需要设置非常大。
通常应用层主要是使用连接池实现的长连接，不会有大量的连接瞬间涌入，瞬间退
· Com_stmt_execute
·Com_stmt_close
这里得简单说说几个相关的参数。
FATAL:
(last message repeated 1 times)
FATAL:
.Com_stmt_prepare
我们继续开启压测模式，
 2. 调整 prepare 参数
Max open files
Max processes
Com_stmt_execute
Variable_name
Com_stmt_
Com_stmt_reset
Com
Com_stmt_close
o
stmt
stmt
stmt
reprepare
send_long_data
prepare
stmt
count
prepare()
马上错误就变了样。这是我们熟悉的一个错误，最开始就
Value
prepare 语句创建的次数。
prepare 语句执行的次数；
prepare 语句关闭的次数：
failed
298844
91000
477403
0
statements
256588
(current value:
lua:273: SQL API error
---
## Page 381
目标是以迭代的思路来进行对比压测，而不是一股脑儿火力全开。
有太多的尖端技术，都是一些常规的测试思路，希望大家在压测的过程中也可以参考，
置是小于 4G，5.6版本以后是小于512G。
是 redo 切换还是多多少少都会有一定的抖动，因此 redo不是越大越好，5.5 版本中的设
所以我们可以设置为150000。然后继续测试，就会看到这个参数逐步的飞升。
至此，我们的优化也告一段落，从开始的指标200多提升到3500左右，整个过程没
通过这个图也能过看出一个基本的负载情况，在1G 的时候，TPS 相对比较平稳，但
23108root
mysql> show global status like '%stmt%';
下图9-8是我使用100M、200M、500M、1G 的redo 得到的 TPS 图。
整个加压的过程中，可以通过 top 看到负载还是有一定的潜力,离性能榨干还有距离。
按照目前的一个基本情况，我们需要设置为91*1500=136500，还要留有一定的富余，
mysql> show global status like '%stmt%';
Variable_name
Com_stmt_send_long_data
Com_stmt
Com_stmt_close
Variable_name
CC
Prepared
Com_stmt_reprepare
Com_stmt_reset
com_stmt_fetch
com_stmt_close
stmt
stmt
reprepare
reset
stmt
send_long_data
200 8924m 1.6g 2148 S 212.3
cache_use
count
|Value
|Value
537982
91000
624184
0
398045
91000
98091
0
477403
136500
0
sysbench/sysbench-1.0.3/src/lua/olt
TIME+COMMAND
/usr/local
第9章MySQL性能测试|359
ench
/ho
me
---
## Page 382
360
9.1.5定制 sysbench 的 Lua 模板
|MySQL DBA工作笔记：数据库管理、架构优化与运维开发
可能要花上几倍的代价，不如听听 sysbench 作者怎么说，也许会有更好的思路。
工具，自有他流行的道理。
如下图 9-9。
sysbench 作者的心路历程。自从 0.5 版本之后，有相当长的一段时间就没有深入维护了，
你就能够对这一切熟悉起来。这种方式很好，而且最省事，但是可遇不可求。
客厅，走走卧室，给你介绍房子的装修风格，里面的家具和电器，为什么要这么设计，很快
目有一个基本的认识和了解，就好比你去拜访一个朋友，他热情的把你领进门，带着你走走
会贯通了。
的就是这种；但是如果能够沉下心来，看代码看到一定程度之后，有了感觉相信就会融
种方式是通过代码来理解它的实现，来反推它的逻辑，这种方式的难度极大，而我尝试
是深入去看，越觉得少了一些东西。
想象的要大很多。都说Lua 很简单，性能很不错，但是定制 sysbench 的模板的时候，越
回到定制 Lua 模板的部分，如果我们反推 Lua 的逻辑，和 sysbench 联系起来，我们
还有一种方式，算是捷径，就是去听听作者怎么说，通过他的分享来从整体上对一个项
对于 sysbench 的学习如果有这样的方式也是极好的，所以我们就可以想办法找找
所以 sysbench 依然是我们 MySQL压力测试的老朋友，这么多年，一直是主流的测试
而从 2016年开始，重启了这个计划，如图 9-10。
对于 sysbench 的定制，起初给自己定了一个小目标，但是实践的时候发现，难度比
图9-8
500线程1Gre
100M
---
## Page 383
输出如下图9-11所示。
127.0.0.1 --mysql-port=65535 --mysql-db=sysbench_db run 
其中加黑部分参数是为了连接,如果你是使用3306端口的默认配置命令就更简单了，
=sou-tbsAu-- TbsAu=promssed-tbsAu-- asaa uouaqsAs=zasn-tbsu-- ent'Tasan/.
运行的时候，配置执行权限，chmod +x testl.lua，然后执行。
end
"SELECT
#!/usr/bin/env sysbench
然后配置一个最简单的Lua 模板，内容如下:
Query OK, 0 rows affected (o.o0 sec)
mysql> grant all
压力测试前，我们配置一下环境，创建一个用户和数据库。
however...
failed to report progress
a major refactoring effort to address performance
·started workingwith sysbench again
issuesandfunctional limitations
Restarted development (2016+)
·sysbench worked well fora wide range of use cases
Development hiatus (2007-2015）
hardwarestartingfrom2012
reports about scalability issues on high-end
Development(and thenPercona)
stopped active development after moving toMysQL
on
MysQLorforinternal QA
used bymanyindividuals,companiestobenchmark
sysbenchdb.
(0.08
图9-10
图9-9
to sysbench_test@'%';
第9章MySQL性能测试|361
---
## Page 384
362丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
 TbsAw=pxomssea-tbsAu-
function thread_done()
function event()
function thread_init()
我们来看看第3个 Lua 模板 test3.lua，如下：
接下来就是重点了，关于 SQL API的定制，其实是有规则可循的。
sysbench
如果命令选项不对，会检查出来。
sysbench.cmdline.options = {
end
end
sysbench test2.lua help
如果没有问题，
此外我们还可以验证命令选项，推出第2个Lua 模板 test2.lua，如下：
 con:disconnect()
con
drv
--table_size=N
则可以使用help 来得到初始化后的选项值。
--tbales=8
(using bundled LuaJIT 2.1.0-beta2)
ral statistics:
statistics:
eads started!
.driver()
run
ons
--mysql-host=127.0.0.1
Number
Number of rows per table [10000]
test2.lua
图9-11
of
a secondary key [on]
tables
，10000},
[1]
time
---
## Page 385
9.2.2批量初始化数据的方案
标表。
缩短到10 多秒钟。
9.2.1
定做一些对比测试。
数据是一种能力的体现，但是很多时候我们却力不从心，所以为了改善这种窘境，我决
于性能模拟测试的进度和质量影响很大，我相信对于很多DBA来说，快速地模拟环境和
初始化要十多分钟，如果是多个表关联模拟性能问题，时间的“浪费”就更心疼了，对
9.2
读一些 sysbench 的代码，继续补充更多的Lua 模板。
-mysql-host=127.0.0.1
（4）使用 shell脚本生成数据，使用load data 的方式导入内存表，内存表数据导入目
初始化测试我会以100万条数据为基准，初始化性能的提升目标是把时间会从近8分钟
delimiter
初始化数据使用存储过程的方式，如下。
create table users(
我们测试使用的表为users，InnoDB 存储引擎，计划初始化数据为100万条。
在测试的过程中，根据测试问题进行改进，又补充了几个方法，最终是8个方案。
（3）使用 shell脚本生成数据，使用 load data 的方式导入数据。
（1）存储过程批量导入。
我自己尝试了以下几种方案。
至此，一个初版的 lua 模板就完成了，当然实际的压测过程远比这个复杂，我们可以
engine=innodb default charset=UTF8
aserid
方案1：存储过程导入
（2）存储过程批量导入内存表，内存表导入目标表。
sysbench
使用命令即可完成测试。
end
一直以来对于MySQL 数据初始化颇有微词，有时候想做一个百万级数据量的测试，
批量初始化数据初步想法
批量初始化数据性能测试
int（11）
SS
test3.lua
uns
signed not null
--mysql-user=sysbench_test
--mysql-password=mysql
第9章MySQL性能测试|363
---
## Page 386
364丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
表名不一样而已，
47秒钟左右，按照这个比例量大概需要8分钟。
Query
>source create_proc_mem.sql
delimiter;
end$s
begin
drop procedure if exists proc_auto_insertdata$$
delimiter $$
primary key(userid)
Query OK,
>source
因为我对这个过程还是信心不足，所以先抓取了10万条数据，测试的结果是执行了
call proc_auto_insertdata();
delimiter ;
endss