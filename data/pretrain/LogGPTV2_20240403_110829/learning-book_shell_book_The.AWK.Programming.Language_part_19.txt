---
## Page 161
SECTION 6.6
RECURSIVE-DESCENT PARSING
151
function rel(op, e)(
tern 1term [+-] term
e = term()
while (tok =a
",*11 tok = "-*){
op=tok
e o sprintf(*eval(\*%s\*, %s, %s)”, op, e, term())
advance()
return e
funetion term(op,e)(
[]10
vhile (tok
* 11 tok s */" 11 tok =*x"){
op=tok
e= sprintt("eval(\*%s\*, %s, %s)*,op. e, fact())
advance()
return e
funotion fact( e)(
if（tok=="（*）（
（expr)1sfact：ident 1nunber
（（）o（）adx=1（1.）
}else if （tok
return
"("e ")*
o*s")(
}elso if（tok-/[A-Za-z][A-Za-z0-9]/}{
（（）aoe.）pto3.uxnox
}else if（tok -/*-7([0-9]+\.?[0-9]1.[0-9]+)/){
roturn ident()
e = tok
advance()
return
（(eoz））umu
}else
error(“unexpected “ tok *at line * MR)
function ident( id,e)(
f (1match(tok,/[A-Za-z_][A-Za-z_0-9]/))
name 1nane[expr]1 nane(exprlist)
id = tok
error（“unexpected “ tok”at line *NR)
if（tok=="[）{
advance()
return "array(" id ",
"e ")*
）（（=1x）3
eat(*(")
eas exprlist()
}else eat(")")
eat(*)")
（.0).PF uxox
calls are statenents
}else
return id
variable
---
## Page 162
152LITTLELANGUAGES
CHAPTER 6
6.7 Summary
Building a little language is often a productive approach to a programming
task. Awk is convenient for translating languages in which lexical analysis and
Associative arrays are good for storing symbol-table information. The pattern-
action structure matches pattern-directed languages.
ficult to make without some experimentation.In awk it is easy to construct
prototypes for feasibility experiments. The results may suggest modifications to
an initial design before a large investment in implementation has been made.
Once a successful prototype processor has been created, it is relatively straight-
forward to transcribe the prototype into a production model using compiler-
construction tools like lex and yacc, and compiled programming languages
like C.
Bibliographic Notes
The assembler and interpreter are patterned after one developed by Jon
Bentley and John Dallen for a software engineering course; their experience is
described in “Exercises in software design,” IEEE Transactions on Sofrware
Engineering, 1987.
The grap language for typesetting graphs is described in an article by Jon
Bentley and Brian Kernighan in Communications of the ACM, August, 1986.
That issue also contains a Programming Pearis column by Bentley on “Little
Languages."
For more discussion of how to construct a recursive-descent translator from a
grammar, see Chapter 2 of Compilers: Principles,Techniques, and Tools, by
Aho, Sethi, and Ullman (Addison-Wesley, 1986).
---
## Page 163
EXPERIMENTSWITHALGORITHMS
p   pn on si o us mou pn on m sq  
some experiments. This is particularly true for algorithms: writing code
illuminates and clarifies issues that are too easily glossed over with pseudo-code.
Furthermore, the resulting programs can be tested to ensure that they behave as
advertised, which is not true of pseudo-code.
Awk is a good tool for this kind of experimentation. If a program is written
in awk, it's easy to concentrate on the algorithm instead of language details. If
the algorithm is ultimately to be part of a larger program, it may be more pro-
ductive to get it working in isolation first. Small awk programs are also excel-
lent for building a scaffold for debugging, testing, and performance evaluation,
regardless of what language the algorithm itself was implemented in.
This chapter illustrates experiments with algorithms. The first half describes
rithms, with awk programs for testing, performance measurement, and profiling.
The second half shows several topological sorting algorithms that culminate in a
version of the Unix file-updating utility make
7.1Sorting
This section covers three well-known and useful algorithms: insertion sort,
quicksort, and heapsort. Insertion sort is short and simple, but efficient only for
sorting a few elements; quicksort is one of the best general-purpose sorting tech-
niques; heapsort optimizes worst-case performance.For each of these algo-
rithms, we will give the basic ideas, show an implementation, present testing
routines, and evaluate the performance.
Insertion Sort
Basic idea. Insertion sort is similar to the method of sorting a sequence of
cards by picking up the cards one at a time and inserting each card into its
proper position in the hand.
153
---
## Page 164
154
EXPERIMENTS WITH ALGORITHMS
CHAPTER 7
Implementation.The following code uses this method to sort an array
A[ 1], , A[n] into increasing order. The first action reads the input a line at
a time into the array; the END action calls isort, then prints the results:
insertion sort
{A[NR] = $0 }
END ( isort(A,NR)
for（i=1;11 &s A[-1] > A[]; --）(
swap A[j-1]and A[]
t = A[-1];A[j-1] =A[];A[j] = t
{
Elements 1 through i-1 of A are in order at the beginning of the outer loop of
isort. The inner loop moves the element currently in the i-th position towards
the beginning of the array past any larger elements. At the end of the outer
loop, all n elements will be in order.
This program will sort numbers or strings equally well. But beware of mixed
input - the comparisons will sometimes be surprising because of coercions.
If at the beginning A contains the eight integers
81635247
the array passes through the following configurations:
811635247
181635247
168135247
136815247
123568147
1 3568124 7
1234567 81
123456817
The vertical bar separates the sorted part of the array from the elements that
have yet to be considered.
Testing. How should we test isort? We could just type at it to see what
s  o od e o n no o s s s  s s
it's not a substitute for more careful testing. A second possibility is to generate
a large number of sets of random numbers and check the outputs. That's cer-
tainly an improvement, but we can do even better with a small set of tests by a
---
## Page 165
SECTION 7.1
SORTING 155
systematic attack on places where code usually goes wrong - the boundaries
and special cases. For sorting routines, those might include the following:
a sequence of length 0 (the empty input)
a sequence of length 1 (a single number)
a sequence of n random numbers
a sequence of n sorted numbers
a sequence of n numbers sorted in reverse order
a sequence of n identical numbers
One of the goals of this chapter is to show how awk can be used to help with
testing and evaluation of programs. Let us ilustrate by mechanizing test gen-
eration and evaluation of results for the sorting routines.
There are two distinct approaches, each with its advantages.The first might
be called “batch mode: write a program to execute a pre-planned set of tests,
exercising the sort function as suggested above. The following routines generate
the data and check the results. In addition to isort itself, there are functions
for creating arrays of various types of data and for checking whether the array
is sorted.
batch test of sorting routines
BEGIN(
print"
，0);check（A,
0 elenents*
isort(A,
0)
print *
genid(A,1);isort(A,1);check（A,1)
1elenent"
n =10
print·
"n"random integers"
genrand(A, n); isort(A,n); check(A, n)
print·
“n*sorted integers"
gensort(A, n); isort(A,n); check(A, n)
print*
"n′reverse-sorted integers"
genrev(A,n); isort(A,n);check(A,n)
print*
"n“identical integers"
genid(A, n); isort(A,n); check(A, n)
function isort(A,n,
i,3,t)(
for （i= 2;i1&A[-1] >A[];--）(
swap A[j-1]and A[]
t =A[-1];A[-1] = A[]; A[] = t
---
## Page 166
156
EXPERIMENTS WITH ALGORITHMS
CHAPTER 7
test-generation and sorting routines..
function check(A,n,
for (1= 1;1 A[1+1])
printf("array is not sorted, element %d\n", 1)
function genrand(A,n, i) ( # put n random integers in A
for (i= 1;i1&&++comp&6
vith counters
A[j-1]>A[]&&++exch;j--）{
swap A[j-1]and A[j]
t=A[-1]:A[j-1]=A[j];A[]=t
The counting is all done in one place, in the test of the inner for loop. Tests
joined by && are evaluated left to right until a term is false. The expression
++comp is always true (pre-incrementing is mandatory here)，so comp is
---
## Page 169
SECTION 7.1
SORTING 159
incremented precisely once per comparison of array elements, just before the
comparison. Then exch is incremented if and only if a pair is out of order.
The following program was used to organize the tests and prepare data for
test framework for sort performance evaluation
input: lines vith sort name, type of data, sizes...
output: name, type,size,comparisons, exchanges, c+e
for (i =3; i  p,
we just increment i; if A[i] < p, we increment last, swap A[last] with
A[i] and then increment i. Once we have processed all elements in the array
in this manner, we swap A[1eft] with A[last]. At this point we have com-
pleted the partition step and the array looks like this:
---
## Page 171
SECTION 7.1
SORTING
161
<p