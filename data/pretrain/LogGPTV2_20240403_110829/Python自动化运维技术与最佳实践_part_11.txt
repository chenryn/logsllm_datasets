---
## Page 77
56第一部分基础篇
#*
 1
图3-13graph.py 执行输出图表
款3.2.1rdtool 参数说明参考htp:/bs.chinaunix.net/thread-2150417-1-1.html和 htp:/
oss. oetiker.ch/rrdtool/doc/index.en.html.
3.3生成动态路由轨迹图
scapy（http://www.secdev.org/projects/scapy/）是一个强大的交互式数据包处理程序，它
能够对数据包进行伪造或解包，包括发送数据包、包噢探、应答和反馈匹配等功能。可以用
在处理网络扫描、路由跟踪、服务探测、单元测试等方面，本节主要针对scapy的路由跟踪
功能，实现TCP协议方式对服务可用性的探测，比如常用的80（HTTP）与443（HTTPS）服
务，并生成美观的路由线路图报表，让管理员清晰了解探测点到目标主机的服务状态、骨干
路由节点所处的IDC位置、经过的运营商路由节点等信息。下面详细进行介绍。
scapy模块的安装方法如下：
scapy 模板需要 tcpdump 程序支持，生成授表费要graphviz、ImageMagick 图像处理包支持
xr6ego5euI zTaqdez6 dunpdosTTeqsuT - unA ↓
 wget http1//vww.secdev,org/projects/scapy/tiles/scapy-2.2.0,tar,gz
源码安装
 tar -zxvf scapy-2.2.0.tar.gz
 cd scapy-2.2.0
 python setup-py insta11
3.3.1模块常用方法说明
scapy模块提供了众多网络数据包操作的方法，包括发包sendO、SYNACK扫描、噢操
---
## Page 78
第3章定制业务质量报表详解57
sniffO、抓包wrpcapO、TCP路由跟踪tracerouteO等，本节主要关注服务监控内容接下来详
细介绍tracerouteO方法，其具体定义如下：
traceroute(target, dport=80, minttl1, maxtl30, sport=, 14None, filterNone
timeout2, verbose=None, **kargs)
该方法实现TCP跟踪路由功能，关键参数说明如下：
口target：跟踪的目标对象，可以是域名或IP，类型为列表，支持同时指定多个目标，
如 [*www.qq.com","www.baidu.com","www.google.com.hk"];
口dport：目标端口，类型为列表，支持同时指定多个端口，如[80,443]；
口mintl：指定路由跟踪的最小跳数（节点数）；
maxll：指定路由跟踪的最大跳数（节点数）。
3.3.2实践：实现TCP探测目标服务路由轨迹
在此次实践中，通过scapy的tracerouteO方法实现探测机到目标服务器的路由轨迹，
整个过程的原理见图3-14，首先通过探测机以SYN方式进行TCP服务扫描，同时启动
tcpdump进行抓包，捕获扫描过程经过的所有路由点，再通过graphO方法进行路由IP轨迹
绘制，中间调用ASN映射查询IP地理信息并生成svg流程文档，最后使用ImageMagick工
具将svg格式转换成png，流程结束。
pdun
ASH
gapho
maplapck
SVG -→ PNC
图3-14TCP探测目标服务路由轨逹原理图
本次实践通过tracerouteO方法实现路由的跟踪，跟踪结果动态生成图片格式。功能实现
源码如下：
---
## Page 79
58第一部分基础能
[/home/test/scapy/simple1.py 1
 -*- coding: utf-8 -*-
import os, sys, time, subprocess
import varnings, logging
warnings-filtervarninga (*ignoze*, category=Deprecat.LonWarn.ng) + 另嵌 scapy 无用各警售息
logging-getLogger(*scapy.runtime*),setLevel (1ogging.ERROR)屏董模块 IPv6 多余告警
from scapy.all import traceroute
domains = rav_input (*Please input one or more 1P/domain:*)接受输入的域名或 IP
target =  donains.split(' ')
dport = [80]’
扫描的端口列表
if len (target) >= 1 and target [0]!=**;
res,unans = traceroute (target, dport=dport,retry=-2)8动路由用踪
res-graph (target=*> test.svg")
生成 svg 大量图形
time.sleep (1)
subprocess.Popen (*/ust/bin/convert testsvg test.png*。 she11=True) #svg 特 png 格式
else 1
print *IP/domain nusber of errors,exit*
无回应：“SA”表示扫描的指定服务有回应，一般是最后一个主机IP。
3.1.22%.12.
134.136.64.1
14.115.64.1
10.144.29.200
N.1.50.2
18.252.51.1
0113.8.28.121
图3-15代码运行结果
生成的路由轨迹图见图3-16（仅局部），“.”将使用unk*单元代替，重点路由节点将通
过ASN获取所处的运营商或IDC位置，如IP“202.102.69.210”为“CHINANET-JS-AS-AP
AS Number for CHINANET jiangsu province backbone,CN”意思为该IP 所处中国电信江苏省
骨干网。
---
## Page 80
第3章定制业务质量报表详解59
192.1811
114.11664.1
1213430246
mk19
mk14
mk15
05239211410
SA
115.239.209.22
umk16
图3-16路由轨图
通过路由轨迹图，我们可以非常清晰地看到探测点到目标节点的路由走向，运营商时常
会做路由节点分流，不排除会造成选择的路由线路不是最优的，该视图可以帮助我们了解到
这个信息。另外IE8以上及chrome浏览器都已支持SVG格式文件，可以直接浏览，无需转
换成png或其他格式，可以轻松整合到我们的运营平台当中。
截票3.3.1节 scapy 方法参数说明参考http/www.secdev.org/projcts/scapy/doc/usage.html。
---
## Page 81
Clxyc第4章
Python与系统安全
信息安全是运维的根本，直接关系到企业的安危，稍有不慎会造成灾难性的后果。比如
近年发生的多个知名网站会员数据库外泄事件，另外，国内知名漏洞报告平台乌云也频频爆
出各大门户的安全漏洞。因此，信息安全体系建设已经被提到了前所未有的高度。如何提升
企业的安全防范水准是目前普遍面临的问题，大体上主要分以下几个方面，包括安全设备防
护、提高人员安全意识、实施系统平台安全加固、安全规范融合到ITIL体系、关注最新安全
发展动向等，通过上述几个方面可以在很大程度上避免出现安全事故。本章主要讲述如何通
过Python来实现系统级的安全防范策略，包括构建集中式的病毒扫描机制、端口安全扫描、
安全密码生成等。
4.1构建集中式的病毒扫描机制
ClamAntiVirus（ClamAV）是一款免费而且开放源代码的防毒软件，软件与病毒库的
更薪皆由社区免费发布，官网地址：http://www.clamav.net/lang/en/。目前ClamAV主要为
Linux、Unix 系统提供病毒扫描、查杀等服务。pyClamad（http://xael.org/norman/python
pyclamd/）是一个Python第三方模块，可让Python直接使用ClamAV病毒扫描守护进程
clamd，来实现一个高效的病毒检测功能，另外，pyClamad模块也非常容易整合到我们已有
的平台当中。下面详细进行说明。
PyClamad模块的安装方法如下：
1、客户墙（病毒扫操源）安装步骤
---
## Page 82
第4章Python与系统安全61
安装clamavp相关程序包
 chkconfig -=levels 235 cland on
添加扫措守护进程clamd系统服务
/usr/bin/freshclam 
更新病毒库，建议配置到crontab申定期更新
关闭 SELinux,避免远程扫描时提示无权限的问题
更新守护进程监听IP配置文件，根据不网环境自行修改量听的IP，“0.0.0.0”为监听所有主机IP
 sed -1 -e */*TCPAddr/( s/127,0.0.1/0,0.0.0/; )' /etc/c1amd.conf
/etc/init .d/clamd start  B动担强守护进程
 wget http://xae1,org/norman/python/pycland/pyC1amd-0,3.4,tar.gz
2、主控增部著pyClamad环境步骤
 tar -zxvf pyCland-0.3,4,tar.gz
 cd pyC1amd-0 . 3.4
 python setup·Py insta11
4.1.1模块常用方法说明
pyClamad提供了两个关键类，一个为ClamdNetworkSocketO类，实现使用网络套接字
操作clamd；另一个为ClamdUnixSocketO类，实现使用Unix套接字类操作clamd。两个类
定义的方法完全一样，本节以ClamdNetworkSocketO类进行说明。
__init_(self, host=127.0.0.1', port=3310, timcoutNone) 方法，是 ClamdNetworkSocket 类
的初始化方法，参数host为连接主机IP；参数port为连接的端口，默认为3310，与/
etc/clamd.conf配置文件中的TCPSocket参数要保持一致；timeout为连接的超时时间。
口contscan_file(self,file)方法，实现扫描指定的文件或目录，在扫描时发生错误或发现
病毒将不终止，参数file（string类型）为指定的文件或目录的绝对路径。
口multiscan_file（self,file)方法，实现多线程扫描指定的文件或目录，多核环境速度更
快，在扫描时发生错误或发现病毒将不终止，参数file（string类型）为指定的文件或
目录的绝对路径。
口scan_file（self,file)方法，实现扫描指定的文件或目录，在扫描时发生错误或发现病毒
将终止，参数file（string类型）为指定的文件或目录的绝对路径。
口shutdown (self)方法，实现强制关闭 clamd进程并退出。
 stats （self) 方法，获取 Clamscan 的当前状态。
口reload（self)方法，强制重载clamd病毒特征库，扫描前建议做reload 操作。
EICAR（self)方法，返回EICAR测试字符串，即生成具有病毒特征的字符串，便于
测试。
4.1.2实践：实现集中式的病毒扫描
本次实践实现了一个集中式的病毒扫描管理，可以针对不同业务环境定制扫描策略，比
如扫描对象、描述模式、扫描路径、调度频率等。示例实现的架构见图4-1，首先业务服务
---
## Page 83
62第一部分基础篇
器开启clamd服务（监听3310端口）.管理服务器启用多线程对指定的服务集群进行扫描，扫
描模式、扫描路径会传递到clamd，最后返回扫描结果给管理服务器端。
妇瘤病径: /dat a/w
妇指方式：aultiacan_file
扫描结果
管理服务器（自幼多线程)
业务服务器集器（cland：3310）
图4-1集群病毒扫描架构图
本次实践通过ClamdNetworkSocketO方法实现与业务服务器建立扫描socket连接，再通
过启动不同扫描方式实施病毒扫描并返回结果。实现代码如下：
[ /home/test/pyClamad/simple1.py 1
1/usr/bin/env python
 -*- coding: utf-8 -→-
import tine
inport pycland
from threading import Thread
class Scan (Thread) :
def _init_(self, IP, scan_type,file) :
*造方法，参致初始化“""
Thread.__Lnit.__(self)
self.IP = IP
self scan_type=scan_cype
self.file = file
self.connstr=**
self.scanresult=**
def run (self):
……多进程run方注""
try1
cd = pye1amd, C1amdNetxorkSoeket (se1f . 1P, 3310)
创建网络套楼字连楼对象
If cd-ping () :
探洲连通性
self,connstr=self IP+* connection [ok]*
cd,reload()
重载clamd弃鲁特变库，建议更新病春库后做reload（）操作
if self.scan_type=="contscan_file*:
选择不呵的扫描模式
self scanresult=*(0)\n*, format (cd, contscan_flle (self file))
elif self .scan_type==*multiscan_file*:
self ,scanresult=*(0)\n* , fornat (cd.multiscan_file (self.file))
---
## Page 84
第4章Python与系统安全63
elif self.scan_type==*scan_file*:
self,scanresult==(0)\n*, format (cd.,scan_file (self ,file))
time.sleep (1)
线程挂起1秒
else;
self.connstr=self.Ip+* ping error,exit"
return
except Exception, e1
self.connstr=self.IP+" *+str (e)
IP8=[*192.168.1.21′, *192.168 .1.22′]
扫描主机列表
scantype=*multiscan_file*  指写扫类模式, 支持 multiscan_file,contscan_file,scan_file
scanfile=*/data/www"
指定扫猫路径
↓=1
Z=unupeezu
指定息站的线程数
scanlist = []
存储扫描Scan类线程对象列表
for ip in IPs:
currp = Scan (ip, scantype, scanfile)
创建扫描 Scan类对象，参数（IP，扫描模式，扫指路径）
scan1ist .append (currp)
追加对象到列表
if ithreadnum==0 or i==len (IPs) :
当达到指定的残程数或 IP 列表数后启动、退出照程
for task in scanlist:
task.start ()
启动线程
for task in scanlist:
task.join()
等待所有子线程通出，并输出扫损结果
print task.connstr
打印服务器连接信息
print task.scanresult
打印扫拼结系
1+=1
scanlist = []
通过EICARO方法生成一个带有病毒特征的文件/tmp/EICAR，代码如下：
void = open (*/tmp/EICAR*, *v*) ,wrlte (cd.EICAR())
生成带有病毒特征的字符申内容如下，复制文件/tmp/EICAR到目标主机的扫描目录当
中，以便进行测试。
#cat /tnp/EICAR
u*X5O1P$@AP[4\\PZX54 (P~) 7CC) 7) $EICARSTANDARDANTIVIRUS-TBSTFILE1$H+H* *
最后，启动扫描程序，在本次实践过程中启用两个线程，可以根据目标主机数量随意修
改，代码运行结果如图4-2，其中192.168.1.21主机没有发现病毒，192.168.1.22主机发现了
病毒测试文件EICAR。
---
## Page 85
64第一部分基础
2.158.1.coction[ox]
图4-2集中式病毒扫描程序运行结果
html
4.2实现高效的端口扫描器
如今互联网安全形势日趋严峻，给系统管理员带来很大的挑战，网络的开放性以及黑客
的攻击是造成网络不安全的主因。稍有疏忽将给黑客带来可乘之机，给企业带来无法弥补的
损失。比如由于系统管理员误操作，导致核心业务服务器的22、21、3389、3306等高危端
口暴露在互联网上，大大提高了被入侵的风险。因此，定制一种规避此安全事故的机制已经
追在眉睫。本节主要讲述通过Python的第三方模块python-nmap来实现高效的编口扫描，达
到发现异常时可以在第一时间发现并处理，将安全风险降到最低的目的。python-nmap模块
作为nmap 命令的Python 封装，可以让Python 很方便地操作nmap 扫描器，它可以帮助管理
员完成自动扫描任务和生成报告。
python-nmap模块的安装方法如下：
yun -y instal1 nmap
 安装 nnap 工其
模块源码安装
vget http://xae1 org/norman/pyt.hon/python-nmap/python-nmap-0.1.4,tar -gz
tar -zxvf pyt.hon=nmap=0 1 . 4 .tar gz
 cd python-nmap-0. 1. 4
 python setup-py insta11
4.2.1模块常用方法说明
本节介绍python-nmap 模块的两个常用类，一个为PortScannerO类，实现一个nmap工
具的端口扫描功能封装：另一个为PortScannerHostDictO类，实现存储与访间主机的扫描结
果，下面介绍PortScannerO类的一些常用方法。
 scan(self,hosts=127.0.0.1′,ports=None,arguments=-sV")方法，实现指定主机、端口、
nmap命令行参数的扫描。参数hosts为字符串类型，表示扫描的主机地址，格式可
以用“scanme.nmap.org”、“198.116.0-255.1-127”、“216.163.128.20/20”表示；参数