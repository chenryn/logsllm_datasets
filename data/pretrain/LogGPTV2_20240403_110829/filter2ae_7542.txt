# 7.Unsafe Filedownload
## 1.不安全的文件下载概述
不安全的文件下载概述
文件下载功能在很多web系统上都会出现，一般我们当点击下载链接，便会向后台发送一个下载请求，一般这个请求会包含一个需要下载的文件名称，后台在收到请求后
会开始执行下载代码，将该文件名对应的文件response给浏览器，从而完成下载。
如果后台在收到请求的文件名后,将其直接拼进下载文件的路径中而不对其进行安全判断的话，则可能会引发不安全的文件下载漏洞。
此时如果
攻击者提交的不是一个程序预期的的文件名，而是一个精心构造的路径(比如../../../etc/passwd),则很有可能会直接将该指定的文件下载下来。
从而导致后台敏感信息(密码文件、源代码等)被下载。
所以，在设计文件下载功能时，如果下载的目标文件是由前端传进来的，则一定要对传进来的文件进行安全考虑。 切记：所有与前端交互的数据都是不安全的，不能掉以轻心！
## 2.Unsafe Filedownload
点击球员名字，抓包查看数据包
修改filename的值为filename=../down_nba.php，然后通过repeater重发
Forward后，直接下载修改后的文件
查看下载后的文件
# 10.目录遍历
## 1.目录遍历漏洞概述
目录遍历漏洞概述
在web功能设计中,很多时候我们会要将需要访问的文件定义成变量，从而让前端的功能便的更加灵活。
当用户发起一个前端的请求时，便会将请求的这个文件的值(比如文件名称)传递到后台，后台再执行其对应的文件。
在这个过程中，如果后台没有对前端传进来的值进行严格的安全考虑，则攻击者可能会通过“../”这样的手段让后台打开或者执行一些其他的文件。
从而导致后台服务器上其他目录的文件结果被遍历出来，形成目录遍历漏洞。
看到这里,你可能会觉得目录遍历漏洞和不安全的文件下载，甚至文件包含漏洞有差不多的意思，是的，目录遍历漏洞形成的最主要的原因跟这两者一样，都是在功能设计中将要操作的文件使用变量的
方式传递给了后台，而又没有进行严格的安全考虑而造成的，只是出现的位置所展现的现象不一样，因此，这里还是单独拿出来定义一下。
需要区分一下的是,如果你通过不带参数的url（比如：
而并不归为目录遍历漏洞。
## 2.目录遍历
首先，点击链接进入，查看url参数
可以看出是通过title参数执行php文件来显示页面的
如果后端没有对用户的请求参数做严格校验，则用户可能通过过../../之类的目录跳转符，来造成路径穿越问题，从而达到访问网站目录下的任意文件的目的
修改url为/vul/dir/dir_list.php?title=../../../README.md
发现可以读取到文件内容
修改url为/vul/dir/dir_list.php?title=../dir.php，发现可以读取到文件内容
# 11.敏感信息泄露
## 1.敏感信息泄露概述
敏感信息泄露概述
由于后台人员的疏忽或者不当的设计，导致不应该被前端用户看到的数据被轻易的访问到。 比如：
\---通过访问url下的目录，可以直接列出目录下的文件列表;
\---输入错误的url参数后报错信息里面包含操作系统、中间件、开发语言的版本或其他信息;
\---前端的源码（html,css,js）里面包含了敏感信息，比如后台登录地址、内网接口信息、甚至账号密码等;
类似以上这些情况，我们成为敏感信息泄露。敏感信息泄露虽然一直被评为危害比较低的漏洞，但这些敏感信息往往给攻击着实施进一步的攻击提供很大的帮助,甚至“离谱”的敏感信息泄露也会直接造成严重的损失。
因此,在web应用的开发上，除了要进行安全的代码编写，也需要注意对敏感信息的合理处理。
## 2.I can see you abc
F12审查元素，通过查找，发现测试账号泄露lili/123456
输入lili/123456，登陆成功
观察登陆成功后的url为/vul/infoleak/abc.php
退出登录后，在登录页面直接访问改地址发现可以成功访问
文笔生疏，措辞浅薄，望各位大佬不吝赐教，万分感谢。
免责声明：由于传播或利用此文所提供的信息、技术或方法而造成的任何直接或间接的后果及损失，均由使用者本人负责， 文章作者不为此承担任何责任。
转载声明：儒道易行
拥有对此文章的修改和解释权，如欲转载或传播此文章，必须保证此文章的完整性，包括版权声明等全部内容。未经作者允许，不得任意修改或者增减此文章的内容，不得以任何方式将其用于商业目的。