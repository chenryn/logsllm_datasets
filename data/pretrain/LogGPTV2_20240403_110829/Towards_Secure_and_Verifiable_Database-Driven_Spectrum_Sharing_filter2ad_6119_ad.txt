(cid:2)
(cid:2)
x
1)
are the swapping results. This swap has been optimized
with only K AND gates.
(cid:2)
1) and y
K−1 ··· y
(cid:2)
• Multiplexing. In the swap circuit,
is re-
then we get a multiplexer mux(x, y, b), with
if only x
turned,
mux(x, y, 0) = x, and mux(x, y, 1) = y.
(cid:2)
2y
(cid:2)
F. Veriﬁcation Mechanism
So far, we have presented a secure protocol for database-
driven spectrum sharing. As we will see in next section,
the protocol achieves merely security against semi-honest
adversaries and requires that all participant parties follow the
protocol speciﬁcation honestly. However, in practice, either
SDM or CSP may be malicious and deviate from the protocol
arbitrarily, and thus malicious security is usually called for.
To address malicious attacks, we combine secure computa-
tions with MAC techniques to design a veriﬁcation mechanism.
291
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:30 UTC from IEEE Xplore.  Restrictions apply. 
Our main idea is that we let the data of spectrum available
information (SAI) carry some redundant information, so that
their integrity can be well veriﬁed. Speciﬁcally, the SAI of
each channel k in square sij is now deﬁned as a vector of bits
as follows.
ij
k = σij
k , i||j||k||Tr||σij
k )
||M ACL(K ij
||K ij
(2)
k
k
where some parameters are described as follows.
• σij
• K ij
ﬁable spectrum sharing protocol then works as follows.
k is the real SAI of channel k in square sij, with σij
means the channel is occupied, and σij
k = 1
k = 0 otherwise.
k is a random key of bit length L chosen by PU k for
channel k in square sij during the updating at the very
beginning of each round.
• Tr is the time stamp publicly designated for round r, e.g.
the start date of round r.
• M ACL(K ij
k , i||j||k||Tr||σij
k ) is the ﬁrst L bits of MAC
using K ij
k as its key and taking as input the concatenation
of values i, j, k, Tr and σij
k . The MAC algorithm and L
value can be customized as needed.
Applying the veriﬁcation mechanism, our secure and veri-
• Initialization. All initial SAI data are prepared as eq. (2)
by PUs, and then these data are shared between SDM and
CSP.
• Submission. All PUs prepare their update request as
eq. (2), while SUs prepare their query requests as before.
• Processing. Both SDM and CSP perform the same com-
putations as before except that each SAI matrix entry
carries more data than before.
• Output and Veriﬁcation. Each SU receives the output in
the form of eq. (2), and then the SU veriﬁes the correct-
ness by recomputing the MAC value and comparing it
with the received MAC value.
This veriﬁcation mechanism ensures that even if either
SDM or CSP is malicious, it cannot update the spectrum
database falsely, or manipulate the SAI data and return false
query results.
V. SECURITY ANALYSIS
In this section, we ﬁrst prove that our protocol (Proto-
col 2) without veriﬁcation achieves security against semi-
honest adversaries. We then demonstrate that our protocol
with veriﬁcation also defends against some common malicious
attacks.
In Protocol 2, both PUs and SUs act as either input
providers or output consumers, and they have no other in-
teractions with both SDM and CSP. Therefore, Protocol 2 can
be regarded as a two-party computation protocol with input
from and output to the users. Intuitively, the security of the
protocol implies that neither the SDM nor the CSP can learn
anything about users’ sensitive inputs or outputs. Formally, the
deﬁnition of security against semi-honest adversaries in two-
party computation can be described as follows [18].
Deﬁnition 2 (Security against semi-honest adversaries). Let
f (x, y) be a function with two inputs x and y, two outputs
fA(x, y) and fB(x, y). Suppose that protocol Π computes
f (x, y) between two parties Alice and Bob. Let V Π
A (x, y)
(V Π
an execution of Π on (x, y). In other words, if (x, rΠ
(y, rΠ
B (x, y), respectively) represent Alice’s (Bob’s) view during
A) (resp.
B)) denotes Alice’s (Bob’s) input and randomness, then
A (x, y) = (x, rΠ
V Π
B (x, y) = (y, rΠ
V Π
A, m1, m2, ..., mt), and
B, m1, m2, ..., mt),
A (resp. OΠ
where {mi} denote the messages passed between the parties.
Let OΠ
B) denote Alice’s (Bob’s) output after an exe-
cution of Π on (x, y), and OΠ(x, y) = (OΠ
B(x, y)).
Then we say that protocol Π is secure (or preserve privacy)
against semi-honest adversaries if
there exist probabilistic
polynomial time (PPT) simulators S1 and S2 such that
{(S1(x, fA(x, y)), f (x, y))} c≡ {(V
(x, y))}
{(S2(y, fB(x, y)), f (x, y))} c≡ {(V
(x, y))}
where c≡ denotes computational indistinguishability.
Π
A (x, y), O
Π
B (x, y), O
A(x, y), OΠ
(3)
(4)
Π
Π
With this formal security deﬁnition, the security of Proto-
col 2 without veriﬁcation can be stated as Theorem 1.
Theorem 1. As long as SDM and CSP do not collude, Protocol
2 is secure against semi-honest adversaries.
Proof: To prove the security of Protocol 2, we ﬁrst prove
the security of each phase in Protocol 2 in two separate
cases, depending on which party the adversary has corrupted.
For each phase, we show that for all PPT adversaries, the
adversary’s view based on SDM and CSP’s interaction is
indistinguishable to the adversary’s view when the corrupted
party interacts with a simulator instead. In other words, we
show that there exist simulators S1 and S2 that satisfy condi-
tions (3) and (4) for each phase. Then, due to the sequential
composition theory [19], we actually prove the security of the
entire protocol.
(1) Secret Sharing and Submission. In this phase, each
PU or SU splits its update or query request into two shares
using XOR secret sharing, and sends one share to SDM and
the other to CSP. SDM (resp. CSP) receives its share of all
the requests, and initially holds its share of SAI matrix M.
In this process, if SDM (resp. CSP) is corrupted, it learns its
share of all requests and M, i.e.,
{(k, [Ck]s)}K
(resp.{(k, [Ck]c)}K
k=1,{[lu]s}Ns
k=1,{[lu]c}Ns
u=1,{[mij]s}n×n
u=1,{[mij]c}n×n)
However, due to the security of XOR secret sharing, one
share of data reveals nothing about the data, SDM (resp. CSP)
in fact learns nothing about all requests and M, except that
PU k updates channel k, which is the public knowledge (i.e.
public input). This implies that the view of SDM (resp. CSP)
in this phase can be simulated by its public input together
with some random numbers, and thus equations (3) and (4)
holds. Therefore, this phase is secure according to the security
deﬁnition.
(2) Update Processing. In this phase, SDM (resp. CSP)
updates its share of spectrum database M by XORing its
shares of old M and update requests, independently. There
is no interaction between SDM and CSP. If SDM (resp. CSP)
is corrupted, its view can be easily simulated by its shares of
old M and update requests, and security of this phase holds.
292
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:30 UTC from IEEE Xplore.  Restrictions apply. 
(3) Query Processing. In this phase, based on a query
circuit, CSP constructs a garbled circuit and garbles its shares
of the updated M and query requests. CSP then sends the
garbled circuit and garbled values to SDM, while holds the
decoding information for output itself. Upon receiving the
garbled query circuit and garbled values from CSP, SDM uses
them together with its shares of updated M and query requests
to compute the garbled query results. Finally, each SU receives
its garbled query result from SDM and the corresponding
decoding information from CSP, and uses them to get its plain
query result. In the process, there are two corruption cases.
Case 1: CSP is corrupted. the view of CSP includes the
garbled circuit and its garbled shares, i.e.,
G(Q),{G([m
ij]c)}n×n,{G([lu]c)}Ns
∗
u=1
which can be simulated by CSP’s input of this phase, i.e.,
CSP’s shares of updated M and query requests ({[m
ij]c}n×n
∗
and {[lu]c}Ns
u=1), and the public input, the query circuit, to-
gether with CSP’s randomness.
Case 2: SDM is corrupted. The view of SDM includes the
garbled values and the garbled circuit received from CSP, i.e.,
G(Q),{G([m
ij]c)}n×n,{G([lu]c)}Ns
∗
u=1
and the garbled inputs and outputs of the query, i.e.,
iuju)}Ns
∗
ij)}n×n,{G(lu)}Ns
∗
u=1 and {G(m
{G(m
u=1
The garbled circuit and garbled values can be simulated by
ij]s}n×n
∗
u=1, the publicly known query circuit, together with
SDM’s inputs of this phase, i.e., SDM’s shares {[m
and {[lu]s}Ns
a series of random numbers.
Thus, we can also ﬁnd S1 and S2 satisfying equations (3)
and (4), and the security of this phase also holds.
Since the above three phases are composed sequentially, it
follows from the sequential composition theory that Protocol 2
is secure against semi-honest adversaries. (cid:2)
Theorem 2 states the malicious security of Protocol 2 with
veriﬁcation.
Theorem 2. If either SDM or CSP is malicious, and both
PUs and SUs follow the protocol honestly, Protocol 2 with
veriﬁcation defends against malicious attacks violating SAI
data integrity, such as falsiﬁcation, replacement and replay.
Proof: In Protocol 2 with veriﬁcation, SAI data are pre-
pared with eq. (2). Due to the security in semi-honest setting,
neither SDM nor CSP knows anything about the SAI data.
Thus, when malicious attacks violate SAI data integrity, it is
hard for the attacker (either SDM or CSP) to reconstruct SAI
data with eq. (2). Actually, to reconstruct an SAI entry, the
attacker needs to guess the random key (L bits) in the old one,
−L. Then, if value L is
and thus succeeds with a probability 2
properly chosen, malicious security can be ensured.
For falsiﬁcation, replacement and replay attacks, we can
show they all violate the SAI data integrity. In fact, a falsiﬁca-
tion attack tampers the real SAI σij
k (c.f. eq. (2)); a replacement
attack replaces an SAI entry ij
k with another one of different
i, j or k; and a replay attack uses an SAI entry with old time
stamp. All of them require to reconstruct SAI data and thus
can be defended through veriﬁcation. (cid:2)
From security analysis above, it can be veriﬁed that the
security requirements illustrated in Section II-B are satisﬁed.
It is worth noting that, with the spectrum database and PUs’
operational privacy well protected, all attacks originating from
the disclose of these privacies, such as spectrum utilization
based location inferring (SULI) attack [9], will be inherently
prevented.
VI. EXPERIMENTAL RESULTS
In this section, we conduct extensive experiments to eval-
uate our secure and veriﬁable scheme. We ﬁrst demonstrate
that the update processing is so fast that its running time
is negligible compared to the overall running time. We then
evaluate the computation and communication performance of
the query operation by: (1) comparing our design with the
naive design; (2) testing our design in the large-scale scenario
with a large number of SUs; (3) testing our design with
veriﬁcation.
A. Experiment Setup
◦
, 34.75
We setup the spectrum database by adopting the spectrum
availability information (SAI) of Los Angles released by FCC
[20][21]. In this area, we choose 60 channels and a base
station (BS) coverage region centralized in the geo-location
(−117.50
) of the scale of 100km × 100km, one of
◦
which with its signal coverage and service contour is shown
using Google Earth in Fig. 6, and divide it into n× n squares,
where n can be parameterized. We then extract
the SAI
by testing if each square overlaps with the service contours
of these channels. We perform Monte Carlo experiments by
randomly choosing different squares queried by the SUs.
We implement both our scheme and the naive query design
on top of FastGC [22], a Java-based library for garbled circuits.
In our experiments, we simulate spectrum database manager
(SDM) and crypto-service provider (CSP) with two processes
on a commodity PC, with Intel(R) Core(TM) i7 3.60GHz CPU,
16.00GB RAM, and Windows 7 OS. We focus on the following
performance metrics:
• Computation overhead: measured by running time, the
• Communication overhead: measured by message vol-
ume, the total data of all messages communicated be-
tween the two parties.
total CPU time spent by SDM and CSP.
B. Performance of Update
As described previously, update processing is performed
independently by both SDM and CSP without any interaction.
We plot the running time of SDM (or CSP) when executing
our update processing with and without veriﬁcation, where
the number of channels varies from 10 to 60, and the BS
coverage region is divided into 60×60, 80×80 and 100×100,
respectively, as shown in Figs. 7(a) and 7(d). Note that,
for veriﬁcation, we use a key length L = 7 and HMAC-
MD5 algorithm in this paper, which ensures that malicious
attacks violating SAI data integrity could be detected with a
probability more than 99%.
293
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:30 UTC from IEEE Xplore.  Restrictions apply. 
TABLE II.
PERFORMANCE OF QUERY WITH VERIFICATION
Ns
Time (min, K = 20)
Time (min, K = 40)
Data (MB, K = 20)
Data (MB, K = 40)
50
22.59
42.15
1136
2149
100
22.61
43.26
1174
2219
150
23.45
45.30
1212
2291
200
24.12
46.30
1251
2363
250
24.77
47.80
1289
2434
300
25.67
49.07
1330
2509
Ns almost linearly. They also grow with K in a roughly
linear fashion. The running times spent are within 2 hours, and
the message volumes are within 6GB, which is a acceptable
for spectrum sharing on a weekly basis. Note that in our
experiments both the running times and message volumes
are amortized over many queries, and the per-query values
are much smaller. For example, the per-query running times
for Ns = 10000 are roughly 0.3s, 0.4s and 0.5s for K =
20, 40, and 60, respectively.
3) Query with veriﬁcation: To test query with veriﬁcation,
we apply the same conﬁgure as Sec. VI-B. We then use
N = 50 × 50, vary Ns from 50 to 300, with K = 20 and
40, respectively. Tab. II lists the running times and message
volumes. It can be seen that both performance metrics grow
slowly with Ns due to the complexity (N + Ns) log(N + Ns)
of our query algorithm, and their values are acceptable for
practical applications.
VII. RELATED WORK
In this section, we summarize existing work related to ours.
Privacy preservation in location-based service (LBS).
Existing work on privacy preservation in LBS typically uses
the K-anonymity technique [5][6], collaborative privacy pro-
tection such as mix-zone [7], and differential privacy such
as geo-indistinguishability [8]. However, K-anonymous loca-
tion privacy protection normally requires a trusted server,
collaborative privacy protection suffers extra cost caused by
collaboration among users, while differential privacy protec-
tion requires querying with users’ obfuscated locations and
thus getting probabilistically inaccurate query results, which
make them unadaptable in protecting SUs’ location privacy.
Moreover, these methods cannot be applied to protect the PUs’
operational privacy during the spectrum database update.
Security in cognitive radio networks (CRNs). While
being a viable option to improve spectrum utilization, CRNs
present many speciﬁc security vulnerabilities [3]. Attacks
against sensing-driven spectrum sharing have been identiﬁed
in [23], including primary user emulation (PUE) attack [24],
spectrum sensing data falsiﬁcation (SSDF) attack [25], etc.
For database-driven spectrum sharing, security threats concern
the privacy of both primary users (PUs) and secondary users
(SUs), and the database access [3]. To address these security
threats, several solutions have been proposed to prevent rogue
transmissions (e.g. rule-based [26] and ontology-based policies
[27]) or to punish non-compliant transmitters (e.g. localization
[28] and punishment [29]). However, very limited work has
been done on privacy preservation in CRNs.