    SSRF漏洞有两种类型：正常的SSRF和盲目SSRF。两者背后的机制相同：都是利用同一网络上机器之间的信任。唯一的区别在于盲目SSRF，攻击者无法通过HTTP响应或错误消息从服务器获得反馈。例如，在之前的例子中，如果我们看到了admin.example.com的显示，那么我们就知道SSRF已经生效了。但是，在盲目的SSRF中，伪造的请求会执行，而没有任何确认发送给攻击者。
    Let’s say that on
     public.example.com
    another functionality allows users to send requests via its web server. But this endpoint does not return the resulting page to the user. If attackers can send requests to the internal network, the endpoint suffers from a blind SSRF vulnerability:
    假设在public.example.com上，另一个功能允许用户通过其Web服务器发送请求。但是，该端点不会将结果页面返回给用户。如果攻击者能够向内部网络发送请求，则该端点会遭受盲SSRF漏洞的影响。
https://public.example.com/send_request?url=https://admin.example.com/delete_user?user=1
    Although blind SSRFs are harder to exploit, they’re still extremely valuable to an attacker, who might be able to perform network scanning and exploit other vulnerabilities on the network. We’ll get more into this later.
    虽然无法看到的 SSRFs 更难被利用，但对攻击者来说仍然极其有价值，因为攻击者可能能够在网络上执行网络扫描并利用其他漏洞。我们稍后会深入探讨这个问题。
    Prevention
    SSRFs happen when servers need to send requests to obtain external resources. For example, when you post a link on Twitter, Twitter fetches an image from that external site to create a thumbnail. If the server doesn’t stop users from accessing internal resources using the same mechanisms, SSRF vulnerabilities occur.
    当服务器需要发送请求以获取外部资源时，就会发生SSRF。例如，当您在Twitter上发布链接时，Twitter将从外部站点获取图像以创建缩略图。如果服务器未通过相同的机制阻止用户访问内部资源，就会发生SSRF漏洞。
    Let’s look at another example. Say a page on
     public.example.com
    allows users to upload a profile photo by retrieving it from a URL via this POST request:
    让我们看另一个例子。假设公共示例网站上的一个页面允许用户通过通过此POST请求从URL检索上传个人资料照片。
POST /upload_profile_from_url
Host: public.example.com
(POST request body)
user_id=1234&url=https://www.attacker.com/profile.jpeg
    To fetch
     profile.jpeg
    from
     attacker.com
    , the web application would have to visit and retrieve contents from
     attacker.com.
    This is the safe and intended behavior of the application. But if the server does not make a distinction between internal and external resources, an attacker could just as easily request a local file stored on the server, or any other file on the network. For instance, they could make the following POST request, which would cause the web server to fetch the sensitive file and display it as the user’s profile picture:
    从攻击者.com获取profile.jpeg，Web应用程序必须访问并检索攻击者.com的内容。这是应用程序的安全和预期行为。但是，如果服务器不区分内部和外部资源，则攻击者可以轻松请求存储在服务器上的本地文件或网络上的任何其他文件。例如，他们可以发起以下POST请求，这将导致Web服务器获取敏感文件并将其显示为用户的个人资料图片。
POST /upload_profile_from_url
Host: public.example.com
(POST request body)
user_id=1234&url=https://localhost/passwords.txt
    Two main types of protection against SSRFs exist: blocklists and allowlists.
     Blocklists
    are lists of banned addresses. The server will block a request if it contains a blocklisted address as input. Because applications often need to fetch resources from a variety of internet sources, too many to explicitly allow, most applications use this method. Companies blocklist internal network addresses and reject any request that redirects to those addresses.
    防止SSRF的两种主要保护类型：封锁列表和白名单。封锁列表是被禁止的地址列表。如果请求包含封锁列表中的地址作为输入，服务器将阻止该请求。由于应用程序通常需要从各种互联网源获取资源，这些源太多了以至于无法明确允许它们，因此大多数应用程序使用此方法。公司会封锁内部网络地址并拒绝任何重定向到这些地址的请求。
    On the other hand, when a site implements
     allowlist
    protection, the server allows only requests that contain URLs found in a predetermined list and rejects all other requests. Some servers also protect against SSRFs by requiring special headers or secret tokens in internal requests.
    另一方面，当一个站点实施白名单保护时，服务器仅允许包含预定列表中的URL的请求，并拒绝所有其他请求。一些服务器还通过要求内部请求中包含特殊标头或秘密令牌来防止SSRF。
    Hunting for SSRFs
    The best way to discover SSRF vulnerabilities is through a review of the application’s source code, in which you check if the application validates all user-provided URLs. But when you can’t obtain the source code, you should focus your efforts on testing the features most prone to SSRF.
    发现SSRF漏洞的最佳方法是通过审查应用程序的源代码，您可以检查应用程序是否验证了所有用户提供的URL。但如果您无法获取源代码，则应将重点放在最容易受到SSRF攻击的功能测试上。
    Step 1: Spot Features Prone to SSRFs
    SSRFs occur in features that require visiting and fetching external resources. These include webhooks, file uploads, document and image processors, link expansions or thumbnails, and proxy services. It’s also worth testing any endpoint that processes a user-provided URL. And pay attention to potential SSRF entry points that are less obvious, like URLs embedded in files that are processed by the application (XML files and PDF files can often be used to trigger SSRFs), hidden API endpoints that accept URLs as input, and input that gets inserted into HTML tags.
    SSRF通常发生在需要访问和获取外部资源的功能中，包括网络挂接、文件上传、文档和图片处理器、链接扩展或缩略图以及代理服务。还应该测试任何处理用户提供的URL的端点。并且要注意潜在的SSRF入口点，如嵌入在应用程序中处理的文件中的URL（XML文件和PDF文件通常可用于触发SSRF），接受URL作为输入的隐藏API端点以及插入到HTML标记中的输入。
     Webhooks
    are custom HTTP callback endpoints used as a notification system for certain application events. When an event such as new user sign-up or application error occurs, the originating site will make an HTTP request to the webhook URL. These HTTP requests help the company collect information about the website’s performance and visitors. It also helps organizations keep data in sync across multiple web applications.
    Webhooks是自定义的HTTP回调端点，用作特定应用程序事件的通知系统。当发生诸如新用户注册或应用错误之类的事件时，来源网站将向Webhook URL发出HTTP请求。这些HTTP请求有助于公司收集有关网站性能和访问者的信息。它还帮助组织在多个Web应用程序之间保持数据同步。
    And in the event that one action from an application needs to trigger an action on another application, webhooks are a way of notifying the system to kick-start another process. For example, if a company wants to send a welcome email to every user who follows its social media account, it can use a webhook to connect the two applications.
    当一个应用程序的某个操作需要触发另一个应用程序的操作时，Webhooks 可以通知系统启动另一个进程。例如，如果一个公司想要向每个关注其社交媒体账户的用户发送欢迎邮件，它可以使用 Webhook 来连接这两个应用程序。
    Many websites allow users to set up their webhook URLs, and these settings pages are often vulnerable to SSRF. Most of the time, an application’s webhook service is in its developers’ portal. For example, Slack allows application owners to set up a webhook via its app configuration page (
     https://api.slack.com/apps/
    ). Under the Event Subscriptions heading, you can specify a URL at which Slack will notify you when special events happen (
     Figure 13-1
    ). The Request URL field of these webhook services is often vulnerable to SSRF.
    许多网站允许用户设置其Webhook URL，并且这些设置页面经常容易受到SSRF的攻击。大多数情况下，应用程序的Webhook服务在其开发者门户中。例如，Slack允许应用程序所有者通过其应用配置页面设置Webhook（https://api.slack.com/apps/）。在事件订阅标题下，您可以指定一个URL，Slack将在特殊事件发生时通知您（图13-1）。这些Webhook服务的请求URL字段经常容易受到SSRF的攻击。
    On the other hand,
     proxy services
    refer to services that act as an intermediary between two machines. They sit between the client and the server of a request to facilitate or control their communication. Common use cases of proxy services are to bypass organization firewalls that block certain websites, browse the internet anonymously, or encrypt internet messages.
    另一方面，代理服务指的是充当两台机器之间中介的服务。他们坐在请求的客户端和服务器之间，以促进或控制它们的通信。代理服务的常见用例是绕过组织防火墙，阻止特定网站的访问，匿名浏览互联网或加密互联网消息。
       Figure 13-1
      : Adding a webhook to Slack
      图13-1：将Webhook添加到Slack。
    Notice these potentially vulnerable features on the target site and record them for future reference in a list like this:
    请注意目标站点上可能存在的易受攻击的特点，并将它们记录在类似于此的列表中，以备将来参考：
     Potential SSRF Endpoints
    潜在的 SSRF 终端点
     Add a new webhook:
POST /webhook
Host: public.example.com
(POST request body)
url=https://www.attacker.com
     File upload via URL:
POST /upload_profile_from_url
Host: public.example.com
(POST request body)
user_id=1234&url=https://www.attacker.com/profile.jpeg
     Proxy service:
https://public.example.com/proxy?url=https://google.com
    Step 2: Provide Potentially Vulnerable Endpoints with Internal URLs
    Once you’ve identified the potentially vulnerable endpoints, provide internal addresses as the URL inputs to these endpoints. Depending on the network configuration, you might need to try several addresses before you find the ones in use by the network. Here are some common ones reserved for the private network:
     localhost
    , 127.0.0.1, 0.0.0.0, 192.168.0.1, and 10.0.0.1.
    一旦您确定可能存在漏洞的终端点，将内部地址作为URL输入提供给这些终端点。根据网络配置，您可能需要尝试多个地址，才能找到网络正在使用的地址。以下是一些为私有网络保留的常见地址：localhost, 127.0.0.1, 0.0.0.0, 192.168.0.1和10.0.0.1。
    You can find more reserved IP addresses used to identify machines on the private network at
     https://en.wikipedia.org/wiki/Reserved_IP_addresses
    .
    您可以在https://zh.wikipedia.org/wiki/保留IP地址找到更多用于识别私有网络上的机器的保留IP地址。
    To illustrate, this request tests the webhook functionality:
    例如，此请求测试Webhook功能：
POST /webhook
Host: public.example.com
(POST request body)
url=https://192.168.0.1
    This request tests the file upload functionality:
    这个请求测试文件上传功能。
POST /upload_profile_from_url
Host: public.example.com
(POST request body)
user_id=1234&url=https://192.168.0.1
    And this request tests the proxy service:
    这个请求测试代理服务：
https://public.example.com/proxy?url=https://192.168.0.1
    Step 3: Check the Results
    In the case of regular SSRF, see if the server returns a response that reveals any information about the internal service. For example, does the response contain service banners or the content of internal pages? A
     service banner
    is the name and version of the software running on the machine. Check for this by sending a request like this:
    在正常 SSRF 的情况下，请查看服务器是否返回了显示内部服务信息的响应。例如，响应是否包含服务横幅或内部页面的内容？服务横幅是运行在计算机上的软件名称和版本。通过发送像这样的请求检查它：
POST /upload_profile_from_url
Host: public.example.com
(POST request body)
user_id=1234&url=127.0.0.1:22
    Port 22 is the default port for the Secure Shell Protocol (SSH). This request tells the application that the URL of our profile picture is located at 127.0.0.1:22, or port 22 of the current machine. This way, we can trick the server into visiting its own port 22 and returning information about itself.
    22端口是安全外壳协议（SSH）的默认端口。该请求告诉应用程序，我们的个人资料图片的URL位于127.0.0.1:22或当前机器的22端口。这样，我们就可以欺骗服务器访问其自己的22端口，并返回有关自己的信息。
    Then look for text like this in the response:
    然后在响应中寻找类似这样的文本：
Error: cannot upload image: SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.4
    If you find a message like this, you can be sure that an SSRF vulnerability exists on this endpoint, since you were able to gather information about the localhost.
    如果您发现类似此消息，那么可以肯定该终端存在 SSRF 漏洞，因为您已能够收集有关本地主机的信息。
    The easiest way of detecting blind SSRFs is through out-of-band techniques: you make the target send requests to an external server that you control, and then monitor your server logs for requests from the target. One way to do this is to use an online hosting service, such as GoDaddy or Hostinger, that provides server access logs. You can link your hosted site to a custom domain and submit that domain in the SSRF testing payload.
    检测盲SSRF的最简单方法是使用带外技术：您让目标发送请求到您控制的外部服务器，然后监视您服务器日志中的目标请求。一种方法是使用在线托管服务，如GoDaddy或Hostinger，提供服务器访问日志。您可以将托管网站链接到自定义域，并将该域提交给SSRF测试有效载荷。
    You can also turn your own machine into a listener by using Netcat, a utility installed by default on most Linux machines. If you don’t already have Netcat, you can install it by using the command
     apt-get install netcat
    . Then use
     nc -lp 8080
    to start a listener on port 8080. After this, you can point your SSRF payloads to your IP address on port 8080 and monitor for any incoming traffic. Another easier way of doing this is to use the Collaborator feature in Burp Suite Pro, which automatically generates unique domain names, sends them as payloads to the target, and monitors for any interaction associated with the target.
    您也可以使用默认安装在大多数Linux机器上的实用程序Netcat将自己的机器变成侦听器。如果您尚未安装Netcat，则可以使用命令apt-get install netcat进行安装。然后使用nc -lp 8080在端口8080上启动侦听器。之后，您可以将SSRF有效负载指向您的IP地址在端口8080，并监视任何传入的流量。另一种更简单的方法是使用Burp Suite Pro中的Collaborator功能，它会自动生成唯一的域名，将它们作为有效负载发送到目标，并监视与目标相关的任何交互。
    However, being able to generate an outbound request from the target server alone is not an exploitable issue. Since you cannot use blind SSRFs to read internal files or access internal services, you need to confirm their exploitability by trying to explore the internal network with the SSRF. Make requests to various target ports and see if server behavior differs between commonly open and closed ports. For example, ports 22, 80, and 443 are commonly open ports, while port 11 is not. This will help you determine if an attacker can use the SSRF to access the internal network. You can look especially for differences in response time and HTTP response codes.
    然而，仅从目标服务器生成一个出站请求并不是一个可利用的问题。由于您无法使用盲目的SSRF读取内部文件或访问内部服务，您需要通过尝试使用SSRF来探索内部网络来确认其可利用性。向各种目标端口发出请求，看看服务器行为在通常开放和关闭的端口之间是否有所不同。例如，端口22、80和443是常见的开放端口，而端口11则不是。这将帮助确定攻击者是否可以使用SSRF访问内部网络。您可以特别寻找响应时间和HTTP响应代码的差异。
    For example, servers use the HTTP status code 200 to indicate that a request has succeeded. Often, if a server is able to connect to the specified port, it will return a 200 status code. Say the following request results in an HTTP status code of 200:
    例如，服务器使用HTTP状态码200来表示请求已成功。通常情况下，如果服务器能够连接到指定的端口，它将返回200状态码。假设以下请求的HTTP状态代码为200：
POST /webhook
Host: public.example.com
(POST request body)
url=https://127.0.0.1:80
    The following request instead results in an HTTP status code of 500, the status code for Internal Server Error. Servers return 500 status codes when they run into an error while processing the request, so a 500 status code often indicates a closed or protected port:
    以下请求导致HTTP状态代码为500，这是“内部服务器错误”的状态代码。当服务器在处理请求时遇到错误时，会返回500状态代码，因此500状态代码通常表示端口关闭或受保护。
POST /webhook
Host: public.example.com
(POST request body)
url=https://127.0.0.1:11
    You can confirm that the server is indeed making requests to these ports and responding differently based on port status.
    你可以确认服务器确实在这些端口上进行请求，并根据端口状态有不同的响应。
    Also look for the time difference between responses. You can see in
     Figure 13-2
    that the Burp repeater shows how long it took for the server to respond in the bottom right corner. Here, it took 181 milliseconds for Google to return its home page. You can use tools like SSRFmap (
     https://github.com/swisskyrepo/SSRFmap/
    ) to automate this process.
    还要查找响应之间的时间差异。如图13-2所示，Burp Repeater在右下角显示服务器响应所需的时间。在这里，Google返回首页需要181毫秒。您可以使用SSRFmap（https://github.com/swisskyrepo/SSRFmap/）等工具来自动化此过程。
       Figure 13-2
      : Burp repeater shows you how long it took for the server to respond to a request.
      图13-2：Burp重复器显示了服务器响应请求所需的时间。
    If a port is closed, the server usually responds faster because it drops the forwarded traffic immediately, whereas internal firewalls often cause a delay in the response. Attackers can use time delays as a metric to figure out a target’s internal network structure. If you can identify a significant time difference between requests to different ports, you have found an exploitable SSRF.
    如果一个端口关闭了，服务器通常会更快地响应，因为它会立即丢弃转发的流量，而内部防火墙经常会导致响应延迟。攻击者可以使用时间延迟作为计量标准来确定目标内部网络结构。如果您可以在对不同端口的请求之间识别出重要的时间差异，则已经找到了可利用的SSRF。
    Bypassing SSRF Protection
    What if you submit an SSRF payload, but the server returns this response?
    如果你提交了一个 SSRF 攻击负载，但服务器返回了这个响应，会怎样？
Error. Requests to this address are not allowed. Please try again.
    This SSRF was blocked by a protection mechanism, possibly a URL allowlist or blocklist. But all is not lost! The site may have protection mechanisms implemented, but this doesn’t mean that the protection is complete. Here are a few more things you can try to bypass a site’s protection.
    该 SSRF 被一个保护机制阻止了，可能是一个 URL 允许或禁止列表。但还没有结束！该网站可能已经实施了保护机制，但这并不意味着保护是完全的。下面是一些您可以尝试绕过网站保护的方法。
    Bypass Allowlists
    Allowlists are generally the hardest to bypass, because they are, by default, stricter than blocklists. But getting around them is still possible if you can
    find an open redirect vulnerability within the allowlisted domains. (Visit
     Chapter 7
    for more information about these vulnerabilities.) If you find one, you can request an allowlisted URL that redirects to an internal URL. For example, even if the site allows only profile pictures uploaded from one of its subdomains, you can induce an SSRF through an open redirect.
    允许清单通常是最难避开的，因为它们默认比阻止清单更严格。但是，如果能在允许列出的域中找到打开重定向漏洞，仍然可能会绕过它们。（有关这些漏洞的更多信息，请访问第7章。）如果您找到一个漏洞，您可以请求允许列出的URL，该URL重定向到内部URL。例如，即使该站点仅允许从其子域上传个人资料图片，您仍可通过打开重定向实现服务器端请求伪造（SSRF）。
    In the following request, we utilize an open redirect on
     pics.example.com
    to redirect the request to 127.0.0.1, the IP address for the localhost. This way, even though the
     url
    parameter passes the allowlist, it still redirects to a restricted internal address:
    在以下请求中，我们利用pics.example.com上的开放式重定向，将请求重定向到本地主机的IP地址127.0.0.1。这样，即使URL参数通过允许列表，它仍将重定向到受限制的内部地址。
POST /upload_profile_from_url
Host: public.example.com
(POST request body)
user_id=1234&url=https://pics.example.com/123?redirect=127.0.0.1
    The server could also have implemented its allowlist via poorly designed regular expressions (regexes). Regexes are often used to construct more flexible allowlists. For example, instead of checking whether a URL string is equal to
     "example.com"
    , a site can check regex expressions like
     .*example.com.*
    to match the subdomains and filepaths of
     example.com
    as well. In those cases, you could bypass the regex by placing the allowlisted domain in the request URL. For example, this request will redirect to 127.0.0.1, since
     pics.example.com
    is seen as the username portion of the URL:
    服务器也可能通过设计不佳的正则表达式（regexes）来实现其允许列表。正则表达式通常用于构建更灵活的允许列表。例如，一个网站可以通过检查 .*example.com.*这样的正则表达式来匹配example.com的子域和文件路径，而不是检查URL字符串是否等于“example.com”。在这种情况下，您可以通过在请求URL中放置允许列表的域来绕过正则表达式。例如，此请求将重定向到127.0.0.1，因为pics.example.com被视为URL的用户名部分。
POST /upload_profile_from_url
Host: public.example.com
(POST request body)
user_id=1234&url=https://pics.example.com@127.0.0.1
    The following request also redirects to 127.0.0.1, since
     pics.example.com
    is seen as the directory portion of the URL: