Miscellaneous
Privsep Interface
OpenSSL
Diﬃe Hellman
Symmetric Ciphers
Zlib
Privileged
OpenSSH
Authentication
Miscellaneous
Monitor
OpenSSL
BigNum/Hash
Public Key
SKey
Lines of Code Percentage
67.70%
39.88%
1.03%
4.21%
30.58%
4.06%
12.08%
1.42%
10.66%
15.75%
32.30%
13.10%
3.09%
6.54%
3.46%
15.82%
12.23%
3.58%
3.17%
17589
10360
267
1093
7944
1056
3138
369
2769
4091
8391
3403
803
1700
900
4109
3178
931
879
Table 1: Number of source code lines that are executed
with and without privileges.
As a result, a slave process can not signal another
slave.
(cid:127) She may attempt to use system calls that change
the ﬁle system, for example to create named pipes
for interprocess communication or device nodes.
However, as a non-root user the slave process has
its ﬁle system root set to an empty read-only di-
rectory that the adversary can not escape from.
(cid:127) Using privilege separation, we cannot prevent the
adversary from initiating local network connec-
tions and potentially abusing trust relations based
on IP addresses. However, we may restrict the
child’s ability to access the system by employing
external policy enforcement mechanisms like Sys-
trace [21].
(cid:127) The adversary may attempt to gather information
about the system, for example, the system time or
PIDs of running processes, that may allow her to
compromise a diﬀerent service. Depending on the
operating system, some information is exported
only via the ﬁle system and can not be accessed
by the adversary. A sandbox may help to further
restrict the access to system information.
2This assumption does not always hold. A bug in OpenBSD’s
select system call allowed an adversary to execute arbitrary code
at the kernel-level [5, 20].
Another way an adversary may try to gain addi-
tional privileges is to attack the interface between the
238
12th USENIX Security Symposium 
USENIX Association
privileged monitor and the slave. The adversary could
send badly formatted requests in the hope of exploiting
programming errors in the monitor. For that reason,
it is important to carefully audit the interface to the
monitor. In the current implementation, the monitor
imposes strict checks on all requests. Furthermore, the
number of valid requests is small and any request de-
tected as invalid causes the privileged monitor to ter-
minate.
Nonetheless, there may be other ways that an ad-
versary might try to harm the system. She might try
to starve the resources of the system by forking new
processes or by running very time intensive computa-
tions. As a result, the system might become unusable.
The eﬀect of such an attack can be mitigated by plac-
ing process limits on the slave process. For example,
we can limit the number of ﬁle descriptors the slave
may open and the number of processes it is allowed
to fork. The monitor may also watch other resource
utilization like CPU time and terminate the slave if a
certain threshold is reached.
In the following, we discuss how privilege separa-
tion would have aﬀected previous progamming errors
in OpenSSH.
The SSH-1 Daemon CRC32 Compensation Attack
Detector Vulnerability permits an adversary to gain su-
peruser privileges remotely without authenticating to
the systems [31]. The problem is caused by an inte-
ger overﬂow in a function that processes network pack-
ets. With privilege separation, this function is executed
without any privileges, which makes it impossible for
an adversary to directly compromise the system.
Similarly, the oﬀ-by-one error in OpenSSH’s channel
code allows an adversary to gain superuser privileges
after authenticating to the system [19]. With privi-
lege separation, the process has only the privileges of
the authenticated user. An adversary cannot obtain
system privileges in this case either.
A security problem in the external zlib compression
library was found that might allow a remote adversary
to gain superuser privileges without any authentica-
tion [3]. This problem occurs in a third-party library,
so no audit of the OpenSSH source code itself can ﬁnd
it. Privilege separation prevents a system compromise
in this case, too.
At the time of this writing, additional security prob-
lems have been found in OpenSSH. A bug in the Ker-
beros ticket passing functions allowed an authenticated
user to gain superuser rights. A more severe problem in
code for challenge-response authentication allows a re-
mote adversary to obtain superuser privileges without
any authentication [4]. Privilege separation prevents
both of these problems and is mentioned in the CERT
advisory as a solution.
The programming errors in the channel code and
in the Kerberos ticket passing functions occur in the
post-authentication phase. Without privilege separa-
tion, these errors allow an authenticated user to gain
superuser privilege. The remaining errors occur dur-
ing pre-authentication and may allow an adversary to
gain superuser privilege without any authentication if
privilege separation is not used.
These examples demonstrate that privilege separa-
tion has the potential to contain security problems yet
unknown.
6 Performance Analysis
To analyze the performance of privilege separated
OpenSSH, we measure the execution time for several
diﬀerent operations in monolithic OpenSSH and the
privileged separated version. We conduct the measure-
ments on a 1.13 GHz Pentium III laptop with all data
in the memory cache.
Test
Normal
Privsep
Login
- compressed
- uncompressed
Data Transfer
- compressed
- uncompressed
0.775s ± 0.0071s
0.767s ± 0.0106s
4.229s ± 0.0373s
1.989s ± 0.0223s
0.777s ± 0.0067s
0.774s ± 0.0097s
4.243s ± 0.0411s
1.994s ± 0.0143s
Table 2:
Performance comparison between normal
OpenSSH and privilege separated OpenSSH. We measure
the overhead in login and data transfer time when employ-
ing privilege separation. In both cases, privilege separation
imposes no signiﬁcant performance penality.
The ﬁrst test measures the time it takes to login us-
ing public key authentication. We measure the time
with compression enabled and without compression.
The next two tests measure the data transfer time of
a 10 MB ﬁle ﬁlled with random data, with compres-
sion enabled, and without compression. The results
are shown in Table 2. It is evident that privilege sep-
arated OpenSSH does not penalize performance. As
the IPC between monitor and slave is never used for
moving large amounts of data, this is not surprising.
7 Related Work
Conﬁdence in the security of an application starts
by source code inspection and auditing. Static analysis
USENIX Association
12th USENIX Security Symposium 
239
provides methods to automatically analyze a program’s
source code for security weaknesses. Using static anal-
ysis, it is possible to automatically ﬁnd buﬀer over-
run vulnerabilities [13, 27], format string vulnerabili-
ties [24], etc.
While source code analysis enables us to ﬁnd some
security vulnerabilities, it is even more important to
design applications with security in mind. The prin-
ciple of least privilege is a guideline for developers to
secure applications. It states that every program and
every user should operate using the least amount of
privilege necessary to complete the job [22].
Security mechanisms at the operating system level
provide ways to reduce the privileges that applications
run with [1, 29, 18, 21]. However, these mechanisms
are unaware of an application’s internal state. For ex-
ample, they cannot determine if users authenticate suc-
cessfully. As a result, they have to allow all operations
of authenticated users even when attached by an ad-
versary. Privilege separation remedies this problem be-
cause it is built into the application and exposes only an
unprivileged child to the adversary. There are several
applications that make use of privilege separation as
we discuss below. The main diﬀerence in this research
is the degree and completeness of the separation.
Carson demonstrates how to reduce the number of
privileges that are required in the Sendmail mail sys-
tem [2]. His design follows the principle of least priv-
ilege. While Sendmail is a good example, the degrees
of privilege separation demonstrated in OpenSSH are
much more extensive. For example, we show how to
change the eﬀective UID and how to retain privileges
securely for the whole duration of the session.
Venema uses semi-resident, mutually-cooperating
processes in Postﬁx [26]. He uses the process context
as a protection domain similar to our research in priv-
ilege separation. However, a mail delivery system does
not require the close interaction between privileged and
unprivileged processes as necessary for authentication
services like OpenSSH. For system services that require
transitions between diﬀerent privileges, our approach
seems more suitable.
Evans very secure FTP daemon uses privilege sep-
aration to limit the eﬀect of programming errors [9].
He uses informational and capability requests in his
implementation. His work is very similar to the imple-
mentation of privilege separation in OpenSSH, but not
as extensive and less generic.
Solar Designer uses a process approach to switch
privileges in his Owl Linux distribution [6]. His POP3
daemon popa3d forks processes that execute protocol
operations with lower privileges and communicate re-
sults back to the parent. The interaction between par-
ent and child is based completely on informational re-
quests.
Separating the privileges of an application causes a
decomposition into subsystems with well deﬁned func-
tionality. This is similar to the design and functionality
of a microkernel where subsystems have to follow the
principle of independence and integrity [14]. For a priv-
ilege separated application, independence and integrity
are realized by multiple processes that have separate
address spaces and communicate via IPC.
8 Conclusion
Programming errors in privileged services can result
in system compromise allowing an adversary to gain
unauthorized privileges.
Privilege separation is a concept that allows parts
of an application to run without any privileges at all.
Programming errors in the unprivileged part of the ap-
plication cannot lead to privilege escalation.
As a proof of concept, we implemented privilege sep-
aration in OpenSSH and show that past errors that al-
lowed system compromise would have been contained
with privilege separation.
There is no performance penalty when running
OpenSSH with privilege separation enabled.
9 Acknowledgments
We thank Solar Designer, Dug Song, David Wagner
and the anonymous reviewers for helpful comments and
suggestions.
References
[1] Lee Badger, Daniel F. Sterne, David L. Sherman, Ken-
neth M. Walker, and Sheila A. Haghighat. A Domain
and Type Enforcement UNIX Prototype. In Proceed-
ings of the 5th USENIX Security Symposium, pages
127–140, June 1995. 10
[2] Mark E. Carson. Sendmail without the Superuser. In
Proceedings of the 4th USENIX Security Symposium,
October 1993. 10
[3] CERT/CC. CERT Advisory CA-2002-07 Double Free
Bug in zlib Compression Library. http://www.cert.
org/advisories/CA-2002-07.html, March 2002. 9
[4] CERT/CC. CERT Advisory CA-2002-18 OpenSSH
Vulnerabilities in Challenge Response Handling. http:
//www.cert.org/advisories/CA-2002-18.html,
June 2002. 9
240
12th USENIX Security Symposium 
USENIX Association
[21] Niels Provos.
Improving Host Security with System
Call Policies. In Proceedings of the 12th USENIX Se-
curity Symposium, August 2003. 1, 8, 10
[22] Jerome H. Saltzer. Protection and the Control of In-
formation in Multics. Communications of the ACM,
17(7):388–402, July 1974. 10
[23] Jerome H. Saltzer and Michael D. Schroeder. The Pro-
tection of Information in Computer Systems. In Pro-
ceedings of the IEEE 69, number 9, pages 1278–1308,
September 1975. 2
[24] Umesh Shankar, Kunal Talwar, Jeﬀrey S. Foster, and
David Wagner. Detecting Format String Vulnerabili-
ties with Type Qualiﬁers. In Proceedings of the 10th
USENIX Security Symposium, August 2001. 10
[25] W. Richard Stevens. Advanced Programming in the
UNIX Environment. Addison-Wesley, 1992. 4
[26] Wietse Venema. Postﬁx Overview.
http://www.
postfix.org/motivation.html. 10
[27] David Wagner, Jeﬀrey S. Foster, Eric A. Brewer, and
Alexander Aiken. A First Step Towards Automated
Detection of Buﬀer Overrun Vulnerabilities. In Pro-
ceedings of the ISOC Symposium on Network and Dis-
tributed System Security, pages 3–17, February 2000.
10
[28] David A. Wagner. Janus: an Approach for Conﬁne-
ment of Untrusted Applications. Technical Report
CSD-99-1056, University of California, Berkeley, 12,
1999. 1
[29] Kenneth M. Walker, Daniel F. Sterne, M. Lee Badger,
Michael J. Petkac, David L. Shermann, and Karen A.
Oostendorp. Conﬁning Root Programs with Domain
and Type Enforcement (DTE). In Proceedings of the
6th Usenix Security Symposium, July 1996. 10
[30] Dan S. Wallach, Dirk Balfanz, Drew Dean, and Ed-
ward W. Felten. Extensible Security Architectures for
Java. 16h Symposium on Operating System Principles,
pages 116–128, 1997. 1
[31] Michal Zalewski.
Remote Vulnerability in SSH
Daemon CRC32 Compensation Attack Detector.
http://razor.bindview.com/publish/advisories/
adv_ssh1crc.html, February 2001. 9
[5] Silvio Cesare. FreeBSD Security Advisory FreeBSD-
SA-02:38.signed-error. http://archives.neohapsis.
com/archives/freebsd/2002-08/0094.html, August
2002. 8
[6] Solar Designer. Design Goals for popa3d. http://www.
openwall.com/popa3d/DESIGN. 10
[7] P. Deutsch. DEFLATE Compressed Data Format
Speciﬁcation version 1.3. RFC 1951, 1996. 7
[8] P. Deutsch and J-L. Gailly. ZLIB Compressed Data
Format Speciﬁcation version 3.3. RFC 1950, 1996. 7
[9] Chris Evans. Comments on the Overall Architecture of
Vsftpd, from a Security Standpoint. http://vsftpd.
beasts.org/, February 2001. 10
[10] Markus Friedl, Niels Provos, and William A. Simpson.
Diﬃe-Hellman Group Exchange for the SSH Transport
Layer Protocol. Internet Draft, January 2002. Work
in progress. 5
[11] Li Gong, Marianne Mueller, Hemma Prafullchandra,
and Roland Schemers. Going Beyond the Sandbox: An
Overview of the New Security Architecture in the Java
Development Kit 1.2. USENIX Symposium on Internet
Technologies and Systems, pages 103–112, 1997. 1
[12] Douglas Kilpatrick. Privman: A Library for Partition-
ing Applications. In Proceedings of the USENIX 2003
Annual Technical Conference, FREENIX track, June
2003. 8
[13] David Larochelle and David Evans. Statically Detect-
ing Likely Buﬀer Overﬂow Vulnerabilities. In Proceed-
ings of the 10th USENIX Security Symposium, August
2001. 10
[14] Jochen Liedtke. On µ-Kernel Construction. In Pro-
ceedings of the Symposium on Operating Systems Prin-
ciples, pages 237–250, 1995. 10
[15] Theodore A. Linden. Operating System Structures to
Support Security and Reliable Software. ACM Com-
puting Surveys, 8(4):409–445, 1976. 2
[16] Sun Microsystems. XDR: External Data Representa-
tion. RFC 1014, June 1987. 4
[17] Todd C. Miller and Theo de Raadt. strlcpy and strl-
cat – Consistent, Safe, String Copy and Concatena-
tion.
In Proceedings of the 1999 USENIX Technical
Conference, FREENIX track, June 1999. 2
[18] David S. Peterson, Matt Bishop, and Raju Pandey. A
Flexible Containment Mechanism for Executing Un-
trusted Code. In Proceedings of the 11th USENIX Se-
curity Symposium, pages 207–225, August 2002.
1,
10
[19] Joost Pol. OpenSSH Channel Code Oﬀ-By-One Vul-
nerability. http://online.securityfocus.com/bid/
4241, March 2002. 9
[20] Niels Provos. OpenBSD Security Advisory: Select
Boundary Condition. http://monkey.org/openbsd/
archive/misc/0208/msg00482.html, August 2002. 8
USENIX Association
12th USENIX Security Symposium 
241