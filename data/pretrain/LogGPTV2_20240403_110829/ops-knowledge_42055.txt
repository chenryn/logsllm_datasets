User: Develop a simple web backend application using the Python programming language
Assistant: In Python, web backend applications can be developed using frameworks such as Django, Flask, or Bottle. The following takes the Flask framework as an example to introduce how to develop a simple web application. Install the Flask framework: ```python pip install Flask ``` Create an app.py file and write the following code: ```python from flask import Flask app = Flask(__name__) @app.route('/') def hello (): return 'Hello, World!' if __name__ == '__main__': app.run(debug=True) ``` run app.py file: ```python python app.py ``` in browser Enter http://127.0.0.1:5000/, you can see the output Hello, World! Next, we implement a simple registration and login system by adding some routes, using HTML templates and databases. 1. Create a database: ```python import sqlite3 conn = sqlite3.connect('users.db') c = conn.cursor() c.execute('''CREATE TABLE users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT NOT NULL UNIQUE, password TEXT NOT NULL);''') conn.commit() conn.close() ``` After the creation is completed, a sqlite3 database file named users.db will be generated in the current directory for storage User Info. 2. Registration page: ```python from flask import Flask, request, render_template, url_for, redirect, flash import sqlite3 app = Flask(__name__) app.secret_key = 'supersecretkey' @app.route('/') def index( ): return redirect(url_for('register')) @app.route('/register', methods=['GET', 'POST']) def register(): if request.method == 'POST': username = request.form['username'] password = request.form['password'] conn = sqlite3.connect('users.db') c = conn.cursor() c.execute("INSERT INTO users (username, password ) VALUES (?, ?)", (username, password)) conn.commit() conn.close() flash('Successful registration, please log in!') return redirect(url_for('login')) return render_template(' register.html') if __name__ == '__main__': app.run(debug=True) ``` Create a register.html file under the templates folder and write the following code: ```html <!DOCTYPE html> <html > <head> <title>Registration page</title> </head> <body> <h1>Registration page</h1> {% with messages = get_flashed_messages() %} {% if messages %} <ul class=" flashes"> {% for message in messages %} <li>{{ message }}</li> {% endfor %} </ul> {% endif %} {% endwith %} <form method="post" action ="{{ url_for('register') }}"> <p>Username: <input type="text" name="username" required></p> <p>Password: <input type="password" name="password" required></p> <p><input type="submit" value="register"></p> </form> </body> </html> ``` 3. Login page : ```python @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'POST': username = request.form['username '] password = request.form['password'] conn = sqlite3.connect('users.db') c = conn.cursor() c.execute("SELECT * FROM users WHERE username = ? AND password = ?", (username, password)) user = c.fetchone() conn.close() if user: flash('Successful login! ') return redirect(url_for('profile', username=username)) else: flash('Wrong username or password!') return render_template('login.html') if __name__ == '__main__': app.run( debug=True) ``` Create a login.html file in the templates folder and write the following code: ```html <!DOCTYPE html> <html> <head> <title>Login page</title> </head> <body> <h1>Login page</h1> {% with messages = get_flashed_messages() %} {% if messages %} <ul class="flashes"> {% for message in messages %} <li>{{ message }}</li> {% endfor %} </ul> {% endif %} {% endwith %} <form method="post" action="{{ url_for('login') }}"> <p> Username: <input type="text" name="username" required></p> <p>Password: <input type="password" name="password" required></p> <p><input type ="submit" value="login"></p> </form> </body> </html> ``` 4. User profile page: ```python @app.route('/profile/< username>') def profile(username): conn = sqlite3.connect('users.db') c = conn.cursor() c.execute("SELECT * FROM users WHERE username = ?", (username,)) user = c.fetchone() conn.close() if user: return render_template('profile.html', user=user) else: return redirect(url_for('login')) ``` Create a profile under the templates folder. html file, write the following code: ```html <!DOCTYPE html> <html> <head> <title>{{ user[1] }}'s profile</title> </head> <body> <h1> Profile of {{ user[1] }}</h1> <p>Username: {{ user[1] }}</p> <p>Password: {{ user[2] }}</p> <p><a href="{{ url_for('logout') }}">Logout</a></p> </body> </html> ``` 5. Logout: ```python @app.route('/logout') def logout(): flash('Logged out! ') return redirect(url_for('login')) ``` Finally, run the app.py file again, and you can see a simple registration and login system we have implemented.