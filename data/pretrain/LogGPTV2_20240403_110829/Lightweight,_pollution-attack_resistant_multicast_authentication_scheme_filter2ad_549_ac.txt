3.2.1 Efficient Evidence Generation and Validation 
Instead of complicated cryptographic algorithms, PARM utilizes 
a simple one-way hash function to generate and validate evidence. 
Because  of  its  lightweight  operation,  PARM  is  suitable  for 
devices with limited computational power. 
3.2.2 Instant Validation 
Upon arrival, the receiver is able to validate each packet based on 
the evidence appended to the packet, allowing it to immediately 
discard  invalid  packets.  Instant  validation  also  mitigates  the 
attacker’s  ability  to  overwhelm  the  receiver’s  storage  space  by 
sending large amounts of packets. 
3.2.3 Packet Loss Tolerant and Individual Validation 
In  some  mediums,  such  as  the  internet,  packet  loss  occurs 
frequently. Since some multicast applications may not retransmit 
lost packets, we design our scheme to tolerate the loss of packets. 
Moreover,  packet  loss  will  not  affect  the  validation  of  other 
packets because the receiver independently verifies each packet. 
3.2.4 Constant Verification Information Size 
To provide for individual packet validation, the sender augments 
every packet with its own evidence. If the evidence size grows too 
large,  the  overhead  will  significantly  affect  performance.  In  our 
proposed scheme, the evidence size remains constant per packet. 
3.3 Attack Resistance 
There  are  various  types  of  attacks  that  a  robust  multicast 
authentication  scheme  should  be  able  to  defend  against.  In  this 
section,  we  describe  how  PARM  resists  common  attacks.  We 
assume  it  is  infeasible  for  an  adversary  to  successfully  forge  a 
packet’s  evidence,  and  we  detail  the  degree  of  difficulty  of 
violating this assumption in section 5. 
3.3.1 Injection Attack 
An attacker injects random or pre-designed packets with the intent 
of inducing the receiver into performing illegal behavior. Because 
PARM  requires  that  each  packet  provide  evidence,  the  receiver 
simply  rejects  the  injected  packet  as  soon  as  the  evidence 
validation fails. 
3.3.2 Modification Attack 
Due  to  the  distributed  nature  of  a  multicast  environment,  an 
adversary may capture a sender’s packets, modifying its contents 
before  retransmission  to  the  receivers.  As  with  injection,  the 
receiver  will  attempt  to  verify  the  modified  packet  and  drop  it 
after an unsuccessful validation of the evidence. 
3.3.3 Signature Flooding Attack 
Most  authentication  mechanisms  require  additional  verification 
information that allows a receiver to validate the received packets. 
If packet validation entails high operational overhead, an attacker 
may  send  a  large  amount  of  packets  with  invalid  verification 
information in an attempt to exhaust the computational resources 
of  a  receiver.  Because  of  its  lightweight  validation  procedure, 
PARM is resistant to signature flooding attacks. 
3.3.4 Pollution Attack 
In this  attack,  an  adversary  injects  forged  packets  to  pollute  the 
erasure  decoding  procedure.  Since  it  is  impractical  for  the 
adversary to generate legitimate evidence for a forged packet, the 
receiver  refuses  to  accept  the  packet  after  evidence  validation 
failure.
4. COMPARISON
In this section, we compare PARM with distillation codes. Karlof 
et  al.  [1]  proposed  distillation  codes  as  a  means  to  thwart 
pollution  attacks  against  SAIDA.  However,  distillation  codes 
require  significant  communication  and  computation  overhead. 
Before we begin, we define several parameters in Table 4-1. 
4.1 Storage Overhead 
In the initial stage, distillation codes require no additional storage 
size,  while  PARM  needs  extra  storage  at  both  the  sender  and 
receiver. In our proposed scheme, the length of the TSK chain is 
L,  and  each  TSK  contains  k  elements.  Thus,  the  sender’s  TSK 
elements  array  contains L*k  elements,  while  the  receiver’s  TPK 
has  a  size  of  k  elements.  A  long  TSK  chain  requires  a  large 
amount  of  storage;  however, 
the  sender  of  a  multicast 
environment  typically  possesses  the  resources  to  cope  with  this 
overhead.

Table 4-1. Parameters 
CE  computation  overhead  of  operating  erasure 
codes per time 
CH  computation  overhead  of  operating  hash 
SG 
SV 
functions per time 
computation  overhead  of  generating  one 
digital signature in SAIDA 
computation overhead of verifying one digital 
signature in SAIDA 
NK  number of packets in one SAIDA block 
NP  verification information size of PARM 
NA
number of attack packets in one block 
DG number of partitions for distillation codes 
During  a  pollution  attack,  PARM  saves  considerable  storage 
space over distillation codes. Since our proposed scheme instantly 
checks the validity of received packets, the receiver only buffers 
valid  packets.  In  contrast,  distillation  codes  cannot  immediately 
judge the validity of received packets. Consequently, the receiver 
is forced to buffer all packets, regardless of its validity. Because 
the typical receiver has limited resources, buffering many packets 
degrades  the  receiver’s  performance.  Therefore,  PARM  is  more 
space efficient on the receiver end during a pollution attack than 
distillation codes.
4.2 Communication Overhead 
Both distillation codes and PARM append validation information 
to a packet. Because distillation codes utilize Merkle hash trees, 
the witness of a packet grows logarithmically with the number of 
packets per SAIDA block. On the contrary, our proposed scheme 
employs  constant  sized  evidence  for  any  number  of  packets  per 
block.  Therefore,  the  communication  overhead  of  PARM  scales 
better than that of distillation codes. 
4.3 Computation Overhead 
Likewise,  the  computational  overhead  of  the  receiver  grows 
logarithmically in distillation codes, while our scheme’s overhead 
remains  constant.  We  first  show  the  computational  overhead 
required by the sender or receiver to send or receive one block of 
packets,  respectively,  while  operating  normally.  For  distillation 
codes, the sender’s cost of transmitting one block of packets is  
2(
(cid:13)(cid:16) )1
C
N
(cid:14)
S
K
H
G
,
while the receiver requires a computational overhead of 
N
)1
(cid:13)(cid:14)
C
C
N
(cid:14)
(cid:14)
S
(cid:13)
(log2
H
E
V
K
K
to validate one block of packets. In contrast, PARM only needs a 
computational overhead of
N
C
(cid:14)
S
(cid:13)
K
H
G
denoting  the  threshold  value  as  defined  in  the  temporal  key 
renewal phase, the upper bound probability of forging evidence is 
P
f
p
(cid:167)(cid:32)
(cid:168)
(cid:169)
n
L
k
(cid:183)
(cid:184)
(cid:185)
n
L
(cid:100)
T
and the security strength can be represented as 
S
(cid:32) 1
P
f
p
(cid:167)(cid:32)
(cid:168)
(cid:169)
Lk
n
(cid:183)
(cid:184)
(cid:185)
n
L
(cid:100)
T
(Equation 5.3) 
(Equation 5.4) 
Since n/L denotes the number of used elements in TSK0, we reset 
n/L to zero if it exceeds the threshold T.
6. EVALUATION
In this section, we evaluate the security strength of our proposed 
scheme under different conditions. By adjusting the parameters of 
the  equations  derived  in  section  5,  we  can  assess  the  security 
strength of PARM under various situations. 
Utilizing equation 5.2, we first discuss the security strength of our 
scheme  without  any  key  renewal.  Figure  6-1  and  Figure  6-2 
illustrate the change in security strength as a result of varying the 
evidence  size  and  the  number  of  TSK  elements  an  attacker 
already possesses. We apply the following parameters to equation 
5.2: each TSK contains k=512 symbols, each TSK chain length is 
L=10, and each piece of evidence contains p TSK elements. For a 
small  number  of  TSK  elements  known  to  the  adversary,  Figure 
6-1  demonstrates  that  security  strength  greatly  increases  as  the 
evidence size increases. Figure 6-2 depicts a significant decrease 
in security strength when the adversary possesses a much larger 
collection of TSK elements. 
Figure 6-1.The Security Strength of Different Evidence Size 
by the sender to prepare a block of packets for broadcast, while 
the receiver’s cost of validating a block of packets is 
N
C
C
N
(cid:14)
(cid:14)
S
(cid:13)
(cid:13)
P
H
K
E
V
.
Because  a  pollution  attack  does  not  affect  the  computational 
overhead  of  the  sender,  we  focus  only  on  the  analysis  of  the 
receiver.
During a pollution attack, the use of distillation codes requires a 
cost of
N
(
(cid:14)
CN
)1
(cid:13)(cid:14)
(log
C
N
N
SN
(cid:13)
V
(cid:14)
(cid:14)