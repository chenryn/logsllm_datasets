the shared [0] is replaced by the sharing of [1] in step 3 [9, § 5]. We could avoid the
modiﬁcation of FP2FL and instead transition into the desired interval by subtracting
the random number from 1, but this requires an additional costly addition step.
Exponentiation and Logarithm. The work by Aliasgari et al. [9] provides SMPCs
for computing exponentiation with base 2 (FLExp2) and logarithm to base 2 (FLLog2).
Since we often require exponentiation and logarithm to a base b (cid:54)= 2, we use the
15
following mathematical properties ba = 2a(log2 b) and logb x = log2 x
log2 b to compute expo-
nentiation and logarithm for any base b. For instance, steps 8 - 9 in Table 2 and steps
7 - 8 in Table 4 use the above equations to compute logarithm and exponentiation to
base e respectively.
Distributed (Discrete) Laplace Mechanism. The protocols to compute the dis-
tributed Laplace and distributed discrete Laplace mechanism are shown in Tables 2
and 3 respectively. While the former expects ﬁxed point numbers as inputs, the latter
expects integers. Both protocols follow along the same lines, but while the Laplace
mechanism can use the simpliﬁcation ln rx − ln ry = ln rx
and thus reduce the number
of necessary logarithm operations FLLog2 as well as the number of follow-up operations,
this is not possible for its discrete counterpart due to the ﬂoor operations FLRound.
ry
Distributed Exponential Mechanism. The protocol to compute the distributed
exponential mechanism using SMPCs is presented in Table 4. Each shared input [di]
consists of an integer array of size m, representing the histogram of participant Pi. The
instantiation follows the steps of the algorithm presented in Table 1c in § 3 by using the
insights and techniques we presented in this section. We straightforwardly implement
the binary search to ﬁnd the winning interval/candidate in steps 13-17. Note that
we need a slightly simpliﬁed version of the FLLT protocol that outputs a value {0, 1}
that does not need to be shared, thus allowing us to output wjmin immediately with-
out reconstruction, which would require additional interactions. We can also improve
performance by running m instances of steps 3-8 in parallel.
Mechanisms in the Malicious Setting. In order to achieve DP against malicious
computation parties, we had to strengthen the SMPC protocols so as to make them
resistant to computation parties deviating from the protocol [16, 34].
Intuitively, to
maintain security, one has to enforce the following TWO additional properties: (i) The
protocol-instance observations of honest parties are consistent with each other; (ii)
Every party proves that each step of its computation was performed correctly.
Given the real-world impracticality of information-theoretically secure channels and
subsequently information-theoretically secure SMPC protocols, in the malicious setting
we shift to the computational setting. In particular, we employ a computational veriﬁ-
able secret sharing scheme (VSS) [12, 22, 48] instead of the basic secret sharing scheme
to achieve the ﬁrst property. For the second property, we introduce zero-knowledge
(ZK) proofs such that a party can prove that a correct secret value is shared among
the parties [34] and that shared secret values satisfy some mathematical conditions
(e.g., they are in a pre-deﬁned range) [16]. We note that these two changes are not suf-
ﬁcient to maintain liveness: compromised parties may crash to stop the computation.
Although a stronger resiliency condition of β ≥ 3t + 1 (instead of β ≥ 2t + 1) can ensure
the protocol completion, the honest parties can always determine which parties crashed
during a computation and replace those before restarting the protocol. Therefore, for
our implementation, we stick to β ≥ 2t + 1 parties.
Limitations of Finite-Precision Instantiations. While the theoretical deﬁnition of
sanitization mechanisms for DP operates on reals r ∈ R (or integers z ∈ Z), the imple-
16
mentations of such mechanisms have to approximate these mathematical abstractions
by ﬁnite-precision representations due to the physical limitations of actual machines.
This mismatch has been shown to give rise to several attacks, as shown by Mironov [45]
and Gazeau et al. [32] (cf. Appendix C for more details). The techniques proposed in
these works to prevent such attacks rely on arithmetic operations that can be imple-
mented using our arithmetic SMPCs. This allows us to make PrivaDA immune to these
attacks. For the sake of simplicity, we omitted this extension from our presentation.
5 Security Analysis
In this section we state the security model, conduct a security analysis in the HbC
setting, and discuss how to extend this result to a malicious setting.
We ﬁrst recall the standard notion of t-secrecy for SMPC, which is formulated
as in [9] except for a small modiﬁcation to accommodate the computation parties.
The following deﬁnitions refer to computation parties C = {C1, . . . , Cβ} engaging in a
protocol Π that computes function y = f (D), where D = D1, . . . , Dn and Di denotes
the input of party Pi and y ∈ R is the output.
Deﬁnition 4 (View) Ci’s view consists of its shares {[D]}Ci and its internal ran-
dom coin tosses ri, as well as the messages M exchanged with the other parties dur-
ing the protocol execution induced by the other parties’ random coin tosses h:
i.e.,
VIEWΠ(D,h)(Ci) = ({[D]}Ci, ri, M ). VIEWΠ(D)(Ci) denotes the corresponding random
function conditioned to the other parties’ coin tosses.
{SI ({[D]}I , f (D))}≡{VIEWΠ(D,h)(I), y}. Here, {[D]}I = (cid:83)
Deﬁnition 5 (t-Secrecy) A protocol Π is t-private in the presence of HbC adver-
saries if for each coalition I = {Ci1, Ci2, . . . , Cit} ⊂ C of HbC computation parties
of size t  0. In the HbC setting, our distributed LM, DLM, and
EM protocols achieve -DDP w.r.t. any HbC coalition I ⊂ C of size t  0 and κ be a suﬃciently large security parameter.
In the malicious setting, our distributed LM, DLM, and EM protocols achieve -IND-
DDP w.r.t. any malicious coalition I M ⊂ C of size t < β/2, under the strong RSA and
decisional Diﬃe-Hellman assumptions for parameter κ.
6 Performance Analysis
Aliasgari et al. [9] microbenchmarked the performance for most of the required arith-
metic SMPC protocols in the HbC setting for three computation parties. However,
we could not successfully execute several library functions and their library does not
handle the malicious setting. Hence we decided to develop the complete SMPC library
for both the HbC and malicious setting from scratch. Here, we present our SMPC
implementation for integer, ﬁxed point, and ﬂoating point arithmetic and measure the
performance costs for the distributed LM, DLM, and EM protocols in the HbC and
malicious settings.
Implementation. We implement all SMPC protocols discussed in §2 as well as our
DDP mechanisms as a multi-threaded object-oriented C++ code to support any num-
ber (≥ 3) of computation parties in the HbC and malicious settings. Our implemen-
tation uses the GMP library [1] for all ﬁnite ﬁeld computations, the Relic toolkit [11]
for elliptic curve cryptographic (ECC) constructions, and the Boost [3] and OpenSSL
[4]libraries for secure communication. Our numeric SMPC libraries can be of indepen-
dent interest to other distributed computation scenarios, and our complete code base
is available online [2].
Experimental Setup. The experiments are performed over an 3.20 GHz (Intel i5)
Linux machine with 16 GB RAM, using a 1 Gbps LAN. We run experiments for the
3-party (i.e., β = 3 and t = 1), and 5-party (i.e., β = 5 and t = 2) computation setting.
The ﬂoating point numbers employed in the experiments have a bit-length of (cid:96) = 32 for
signiﬁcands and k = 9 for (signed) exponents, which gives a precision of up to 2−256.
For integers and ﬁxed point numbers, we use a bit-length of γ = 64, where f = 32 for
ﬁxed point numbers. It gives a precision of 2−32 for the latter. The experiments use
ﬁnite ﬁelds of size 177 bits for integers, 208 bits for ﬁxed point numbers, and 113 bits
for ﬂoating point signiﬁcands. For ﬂoating point exponents, as well as sign and zero
18
Type
Protocol
HbC
Malicious
Float
Convert
Log
Exp
FLAdd
FLMul
FLScMul
FLDiv
FLLT
FLRound
FP2FL
Int2FL
FL2Int
FL2FP
FLLog2
FLExp2
β = 3,
t = 1
0.48
0.22
0.20
0.54
0.16
0.64
0.83
0.85
1.35
1.40
12.0
7.12
β = 5,
t = 2
0.76
0.28
0.28
0.64
0.23
0.85
1.21
1.22
1.91
1.96
17.0
9.66
β = 3,
t = 1
14.6
3.35
3.35
4.58
2.82
11.4
25.7
25.7
26.3
26.8
274
120
β = 5,
t = 2
29.2
7.54
7.50
10.2
6.22
23.4
50.9
50.9
54.3
55.3
566
265
Table 5: Performance of a single 3-party and 5-party SMPC operations measured in
sec
bits, signiﬁcantly smaller ﬁelds suﬃce. In contrast to [9], we do not employ batching
(which improves average computations times) since our distributed mechanisms call
the individual arithmetic SMPC functions only a few times. To determine an average
performance, we run the experiments ten times for both parameter sets. In Table 5,
we show our results for all required SMPC functionalities in the HbC and malicious
settings; in particular, we include the computation time for single 3-party and 5-party
arithmetic SMPC operations measured in seconds.
Cost Analysis (HbC setting). As expected, the logarithm and exponentiation
SMPC are the most expensive operations, and they will drive our distributed mech-
anism cost analysis. Our protocols also use Rec, IntAdd, FPAdd, RandInt SMPC, but
we do not include them in Table 5 as they are local operations that can be performed
signiﬁcantly faster than the rest of the protocols.
Next, we determine the average performance costs for our distributed LM, DLM, and
EM protocols for (β = 3, t = 1) computation parties and 100, 000 users. The distributed
LM protocol has a computation cost of 15.5 sec, while the distributed DLM protocol
requires around 31.3 sec. The better eﬃciency of the LM mechanism is due to the fact
that we halved the number of costly logarithm operations FLLog2 and necessary follow-
up operations by using the property ln rx − ln ry = ln rx
, which is not possible for its
discrete counterpart due to the necessary ﬂoor operations FLRound. The computation
cost of the distributed EM protocol linearly depends on the number m = |R| of result
candidates. For instance, for m = 5, the cost of computation is 42.3 sec.
For larger numbers of computation parties β, one can extrapolate the performance
from our analysis for (β = 3, t = 1) and (β = 5, t = 2). Even for β ≈ 100, we
expect the distributed LM and DLM protocols to take about a few hundred seconds
in the HbC setting. We also compared our experimental results with [9]. We could
ry
19
not reproduce their results, possibly due to the introduced memory management and
correctness veriﬁcations.
Cost Analysis (Malicious Setting). As expected, the computations times for the
SMPC operations secure against an active adversary are signiﬁcantly higher (around
15-20 times) than those of the operations secure against an HbC adversary. The av-
erage performance costs for our distributed LM, DLM, and EM protocols for (β = 3,
t = 1) computation parties and 100, 000 users in the malicious setting are as follows:
The distributed LM protocol has an average computation cost of 344 sec, while the
distributed DLM protocol requires 477 sec. The cost of the distributed EM protocol,
for m = 5 result candidates, is 652 sec.
We stress that these operations are performed by computation parties, and that
there are no critical timing restrictions on DDP computations in most real-life scenarios,
such as web analytics. Nevertheless, we expect 1 order of magnitude performance gain
in the HbC as well as the malicious setting by employing high performance computing
servers. Furthermore, since users have to simply forward their shared values to the
computation parties, which is an inexpensive operation (< 1 msec in the HbC setting
and a couple of milliseconds in the malicious setting), we believe that these numbers
demonstrate the practicality of PrivaDA even in a setting where clients are equipped
with computationally limited devices, such as smartphones.
7 Application Scenarios
We showcase the ﬂexibility of our architecture by brieﬂy discussing how PrivaDA can
be used to improve the state-of-the-art in three diﬀerent application scenarios.
Web Analytics. Web analytics consist in the measurement, collection, analysis, and
reporting of Internet data about users visiting a website. For instance, data can include
user demographics, browsing behavior, and information about the clients’ systems. This