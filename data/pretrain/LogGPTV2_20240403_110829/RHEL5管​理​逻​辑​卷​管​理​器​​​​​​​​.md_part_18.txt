``` screen
# lvextend vg/stripe1 -L 406G
  Using stripesize of last segment 64.00 KB
  Extending logical volume stripe1 to 406.00 GB
  Insufficient suitable allocatable extents for logical volume stripe1: 34480 
more required
# lvextend -i1 -l+100%FREE vg/stripe1
```
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#LV_reduce}4.4.10. 缩​​​​​​​小​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​ {.title}
:::
[]{#LVM_CLI.html#idm139761062747296
.indexterm}[]{#LVM_CLI.html#idm139761062745856
.indexterm}[]{#LVM_CLI.html#idm139761062744416 .indexterm}
::: para
要​​​​​​​减​​​​​​​小​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​的​​​​​​​大​​​​​​​小​​​​​​​，首​​​​​​​先​​​​​​​卸​​​​​​​载​​​​​​​文​​​​​​​件​​​​​​​系​​​​​​​统​​​​​​​。​​​​​​​您​​​​​​​可​​​​​​​以​​​​​​​接​​​​​​​着​​​​​​​使​​​​​​​用​​​​​​​
`lvreduce`{.command} 命​​​​​​​令​​​​​​​缩​​​​​​​小​​​​​​​卷​​​​​​​，缩​​​​​​​小​​​​​​​卷​​​​​​​后​​​​​​​，重​​​​​​​新​​​​​​​挂​​​​​​​载​​​​​​​文​​​​​​​件​​​​​​​系​​​​​​​统​​​​​​​。​​​​​​​
:::
::: {.warning xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**警​​​​​​​告​​​​​​​**
:::
::: admonition
::: para
在​​​​​​​缩​​​​​​​小​​​​​​​卷​​​​​​​自​​​​​​​身​​​​​​​大​​​​​​​小​​​​​​​之​​​​​​​前​​​​​​​，减​​​​​​​小​​​​​​​文​​​​​​​件​​​​​​​系​​​​​​​统​​​​​​​或​​​​​​​者​​​​​​​卷​​​​​​​中​​​​​​​任​​​​​​​何​​​​​​​事​​​​​​​物​​​​​​​的​​​​​​​大​​​​​​​小​​​​​​​是​​​​​​​很​​​​​​​重​​​​​​​要​​​​​​​的​​​​​​​，否​​​​​​​则​​​​​​​您​​​​​​​可​​​​​​​能​​​​​​​会​​​​​​​丢​​​​​​​失​​​​​​​数​​​​​​​据​​​​​​​。​​​​​​​
:::
:::
:::
::: para
缩​​​​​​​小​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​，释​​​​​​​放​​​​​​​一​​​​​​​些​​​​​​​卷​​​​​​​组​​​​​​​，可​​​​​​​将​​​​​​​其​​​​​​​分​​​​​​​配​​​​​​​给​​​​​​​卷​​​​​​​组​​​​​​​中​​​​​​​的​​​​​​​其​​​​​​​它​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​。​​​​​​​
:::
::: para
下​​​​​​​面​​​​​​​的​​​​​​​例​​​​​​​子​​​​​​​是​​​​​​​将​​​​​​​卷​​​​​​​组​​​​​​​ `vg00`{.literal} 中​​​​​​​的​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​ `lvol1`{.literal}
的​​​​​​​减​​​​​​​小​​​​​​​三​​​​​​​个​​​​​​​逻​​​​​​​辑​​​​​​​扩​​​​​​​展​​​​​​​。​​​​​​​
:::
``` screen
lvreduce -l -3 vg00/lvol1
```
:::
:::
::: section
::: titlepage
# [⁠]{#LVM_CLI.html#snapshot_command}4.5. 创​​​​​​​建​​​​​​​快​​​​​​​照​​​​​​​卷​​​​​​​ {.title}
:::
[]{#LVM_CLI.html#idm139761021590384
.indexterm}[]{#LVM_CLI.html#idm139761021588944 .indexterm}
::: para
使​​​​​​​用​​​​​​​ `lvcreate`{.command} 命​​​​​​​令​​​​​​​的​​​​​​​ `-s`{.option}
参​​​​​​​数​​​​​​​创​​​​​​​建​​​​​​​快​​​​​​​照​​​​​​​卷​​​​​​​。​​​​​​​快​​​​​​​照​​​​​​​卷​​​​​​​是​​​​​​​可​​​​​​​写​​​​​​​入​​​​​​​的​​​​​​​。​​​​​​​
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
在​​​​​​​群​​​​​​​集​​​​​​​中​​​​​​​不​​​​​​​支​​​​​​​持​​​​​​​跨​​​​​​​节​​​​​​​点​​​​​​​的​​​​​​​ LVM 快​​​​​​​照​​​​​​​。​​​​​​​
:::
:::
:::
::: para
Since LVM snapshots are not cluster-aware, they require exclusive access
to a volume. For information on activating logical volumes on individual
nodes in a cluster, see [第 4.8 节
"在​​​​​​​群​​​​​​​集​​​​​​​的​​​​​​​独​​​​​​​立​​​​​​​节​​​​​​​点​​​​​​​中​​​​​​​激​​​​​​​活​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​"](#LVM_CLI.html#cluster_activation){.xref}.
:::
::: para
以​​​​​​​下​​​​​​​命​​​​​​​令​​​​​​​创​​​​​​​建​​​​​​​了​​​​​​​一​​​​​​​个​​​​​​​快​​​​​​​照​​​​​​​卷​​​​​​​，大​​​​​​​小​​​​​​​为​​​​​​​ 100MB，名​​​​​​​为​​​​​​​
`/dev/vg00/snap`{.filename}。​​​​​​​它​​​​​​​是​​​​​​​名​​​​​​​为​​​​​​​ `/dev/vg00/lvol1`{.filename}
的​​​​​​​源​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​的​​​​​​​快​​​​​​​照​​​​​​​。​​​​​​​如​​​​​​​果​​​​​​​源​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​有​​​​​​​一​​​​​​​个​​​​​​​文​​​​​​​件​​​​​​​系​​​​​​​统​​​​​​​，您​​​​​​​可​​​​​​​以​​​​​​​将​​​​​​​快​​​​​​​照​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​挂​​​​​​​载​​​​​​​到​​​​​​​任​​​​​​​意​​​​​​​目​​​​​​​录​​​​​​​下​​​​​​​，以​​​​​​​便​​​​​​​访​​​​​​​问​​​​​​​该​​​​​​​文​​​​​​​件​​​​​​​系​​​​​​​统​​​​​​​的​​​​​​​内​​​​​​​容​​​​​​​来​​​​​​​在​​​​​​​源​​​​​​​文​​​​​​​件​​​​​​​系​​​​​​​统​​​​​​​不​​​​​​​断​​​​​​​更​​​​​​​新​​​​​​​的​​​​​​​情​​​​​​​况​​​​​​​下​​​​​​​进​​​​​​​行​​​​​​​备​​​​​​​份​​​​​​​。​​​​​​​
:::
``` screen
lvcreate --size 100M --snapshot --name snap /dev/vg00/lvol1
```
::: para
在​​​​​​​您​​​​​​​创​​​​​​​建​​​​​​​了​​​​​​​快​​​​​​​照​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​之​​​​​​​后​​​​​​​，对​​​​​​​源​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​执​​​​​​​行​​​​​​​ `lvdisplay`{.command}
命​​​​​​​令​​​​​​​产​​​​​​​生​​​​​​​的​​​​​​​输​​​​​​​出​​​​​​​结​​​​​​​果​​​​​​​包​​​​​​​含​​​​​​​了​​​​​​​所​​​​​​​有​​​​​​​扩​​​​​​​展​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​及​​​​​​​其​​​​​​​状​​​​​​​态​​​​​​​（激​​​​​​​活​​​​​​​或​​​​​​​者​​​​​​​失​​​​​​​活​​​​​​​）的​​​​​​​列​​​​​​​表​​​​​​​。​​​​​​​
:::
::: para
下​​​​​​​面​​​​​​​的​​​​​​​命​​​​​​​令​​​​​​​显​​​​​​​示​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​ `/dev/new_vg/lvol0`{.literal}
的​​​​​​​状​​​​​​​态​​​​​​​，并​​​​​​​为​​​​​​​其​​​​​​​生​​​​​​​成​​​​​​​了​​​​​​​快​​​​​​​照​​​​​​​卷​​​​​​​ `/dev/new_vg/newvgsnap`{.literal}。​​​​​​​
:::
``` screen
# lvdisplay /dev/new_vg/lvol0
  --- Logical volume ---
  LV Name                /dev/new_vg/lvol0
  VG Name                new_vg
  LV UUID                LBy1Tz-sr23-OjsI-LT03-nHLC-y8XW-EhCl78
  LV Write Access        read/write
  LV snapshot status     source of
                         /dev/new_vg/newvgsnap1 [active]
  LV Status              available
  # open                 0
  LV Size                52.00 MB
  Current LE             13
  Segments               1
  Allocation             inherit
  Read ahead sectors     0
  Block device           253:2
```
::: para
默​​​​​​​认​​​​​​​情​​​​​​​况​​​​​​​下​​​​​​​，`lvs`{.command}
命​​​​​​​令​​​​​​​显​​​​​​​示​​​​​​​快​​​​​​​照​​​​​​​卷​​​​​​​的​​​​​​​源​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​以​​​​​​​及​​​​​​​目​​​​​​​前​​​​​​​所​​​​​​​使​​​​​​​用​​​​​​​的​​​​​​​快​​​​​​​照​​​​​​​卷​​​​​​​的​​​​​​​比​​​​​​​例​​​​​​​。​​​​​​​下​​​​​​​面​​​​​​​的​​​​​​​例​​​​​​​子​​​​​​​显​​​​​​​示​​​​​​​了​​​​​​​在​​​​​​​系​​​​​​​统​​​​​​​中​​​​​​​执​​​​​​​行​​​​​​​
`lvs`{.command} 命​​​​​​​令​​​​​​​的​​​​​​​默​​​​​​​认​​​​​​​输​​​​​​​出​​​​​​​结​​​​​​​果​​​​​​​，其​​​​​​​中​​​​​​​包​​​​​​​括​​​​​​​逻​​​​​​​辑​​​​​​​卷​​​​​​​
`/dev/new_vg/lvol0`{.literal} 以​​​​​​​及​​​​​​​为​​​​​​​其​​​​​​​生​​​​​​​成​​​​​​​的​​​​​​​快​​​​​​​照​​​​​​​卷​​​​​​​
`/dev/new_vg/newvgsnap`{.literal}。​​​​​​​
:::
``` screen
# lvs
  LV         VG     Attr   LSize  Origin Snap%  Move Log Copy%
  lvol0      new_vg owi-a- 52.00M
  newvgsnap1 new_vg swi-a-  8.00M lvol0    0.20
```
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
因​​​​​​​为​​​​​​​快​​​​​​​照​​​​​​​在​​​​​​​源​​​​​​​卷​​​​​​​有​​​​​​​变​​​​​​​化​​​​​​​时​​​​​​​会​​​​​​​增​​​​​​​大​​​​​​​，所​​​​​​​以​​​​​​​常​​​​​​​规​​​​​​​使​​​​​​​用​​​​​​​ `lvs`{.command}
命​​​​​​​令​​​​​​​监​​​​​​​控​​​​​​​快​​​​​​​照​​​​​​​卷​​​​​​​的​​​​​​​比​​​​​​​例​​​​​​​以​​​​​​​确​​​​​​​定​​​​​​​它​​​​​​​还​​​​​​​没​​​​​​​有​​​​​​​被​​​​​​​填​​​​​​​满​​​​​​​是​​​​​​​很​​​​​​​重​​​​​​​要​​​​​​​的​​​​​​​。​​​​​​​使​​​​​​​用​​​​​​​了​​​​​​​ 100％
的​​​​​​​快​​​​​​​照​​​​​​​卷​​​​​​​会​​​​​​​完​​​​​​​全​​​​​​​丢​​​​​​​失​​​​​​​，因​​​​​​​为​​​​​​​写​​​​​​​入​​​​​​​源​​​​​​​卷​​​​​​​中​​​​​​​不​​​​​​​修​​​​​​​改​​​​​​​的​​​​​​​部​​​​​​​分​​​​​​​的​​​​​​​操​​​​​​​作​​​​​​​如​​​​​​​果​​​​​​​不​​​​​​​破​​​​​​​坏​​​​​​​快​​​​​​​照​​​​​​​是​​​​​​​无​​​​​​​法​​​​​​​成​​​​​​​功​​​​​​​的​​​​​​​。​​​​​​​
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#LVM_CLI.html#lvm_filters}4.6. 用​​​​​​​过​​​​​​​滤​​​​​​​器​​​​​​​控​​​​​​​制​​​​​​​ LVM 设​​​​​​​备​​​​​​​扫​​​​​​​描​​​​​​​ {.title}
:::
[]{#LVM_CLI.html#idm139761080156064
.indexterm}[]{#LVM_CLI.html#idm139761080155104
.indexterm}[]{#LVM_CLI.html#idm139761080154144 .indexterm}
::: para
在​​​​​​​启​​​​​​​动​​​​​​​时​​​​​​​会​​​​​​​运​​​​​​​行​​​​​​​ `vgscan`{.command} 命​​​​​​​令​​​​​​​来​​​​​​​扫​​​​​​​描​​​​​​​系​​​​​​​统​​​​​​​中​​​​​​​的​​​​​​​块​​​​​​​设​​​​​​​备​​​​​​​以​​​​​​​查​​​​​​​找​​​​​​​ LVM
标​​​​​​​签​​​​​​​来​​​​​​​确​​​​​​​定​​​​​​​哪​​​​​​​些​​​​​​​是​​​​​​​物​​​​​​​理​​​​​​​卷​​​​​​​，并​​​​​​​读​​​​​​​取​​​​​​​元​​​​​​​数​​​​​​​据​​​​​​​建​​​​​​​立​​​​​​​卷​​​​​​​组​​​​​​​列​​​​​​​表​​​​​​​。​​​​​​​物​​​​​​​理​​​​​​​卷​​​​​​​的​​​​​​​名​​​​​​​称​​​​​​​被​​​​​​​保​​​​​​​存​​​​​​​在​​​​​​​系​​​​​​​统​​​​​​​每​​​​​​​个​​​​​​​节​​​​​​​点​​​​​​​的​​​​​​​缓​​​​​​​冲​​​​​​​文​​​​​​​件​​​​​​​中​​​​​​​，即​​​​​​​
`/etc/lvm/.cache`{.filename}。​​​​​​​之​​​​​​​后​​​​​​​运​​​​​​​行​​​​​​​的​​​​​​​命​​​​​​​令​​​​​​​可​​​​​​​以​​​​​​​读​​​​​​​取​​​​​​​该​​​​​​​文​​​​​​​件​​​​​​​以​​​​​​​避​​​​​​​免​​​​​​​重​​​​​​​复​​​​​​​扫​​​​​​​描​​​​​​​。​​​​​​​
:::
::: para
您​​​​​​​可​​​​​​​以​​​​​​​在​​​​​​​ `lvm.conf`{.literal} 配​​​​​​​置​​​​​​​文​​​​​​​件​​​​​​​中​​​​​​​通​​​​​​​过​​​​​​​设​​​​​​​置​​​​​​​过​​​​​​​滤​​​​​​​器​​​​​​​来​​​​​​​控​​​​​​​制​​​​​​​ LVM
要​​​​​​​扫​​​​​​​描​​​​​​​的​​​​​​​设​​​​​​​备​​​​​​​。​​​​​​​过​​​​​​​滤​​​​​​​器​​​​​​​由​​​​​​​一​​​​​​​组​​​​​​​简​​​​​​​单​​​​​​​正​​​​​​​则​​​​​​​表​​​​​​​达​​​​​​​式​​​​​​​组​​​​​​​成​​​​​​​，使​​​​​​​用​​​​​​​ `/dev`{.filename}
目​​​​​​​录​​​​​​​中​​​​​​​的​​​​​​​设​​​​​​​备​​​​​​​名​​​​​​​称​​​​​​​来​​​​​​​确​​​​​​​定​​​​​​​接​​​​​​​受​​​​​​​还​​​​​​​是​​​​​​​拒​​​​​​​绝​​​​​​​找​​​​​​​到​​​​​​​的​​​​​​​块​​​​​​​设​​​​​​​备​​​​​​​。​​​​​​​
:::
::: para
下​​​​​​​面​​​​​​​的​​​​​​​例​​​​​​​子​​​​​​​显​​​​​​​示​​​​​​​用​​​​​​​过​​​​​​​滤​​​​​​​器​​​​​​​控​​​​​​​制​​​​​​​ LVM
要​​​​​​​扫​​​​​​​描​​​​​​​设​​​​​​​备​​​​​​​的​​​​​​​方​​​​​​​法​​​​​​​。​​​​​​​请​​​​​​​注​​​​​​​意​​​​​​​：有​​​​​​​些​​​​​​​例​​​​​​​子​​​​​​​不​​​​​​​一​​​​​​​定​​​​​​​是​​​​​​​最​​​​​​​好​​​​​​​的​​​​​​​实​​​​​​​践​​​​​​​方​​​​​​​法​​​​​​​，因​​​​​​​为​​​​​​​正​​​​​​​则​​​​​​​表​​​​​​​达​​​​​​​式​​​​​​​根​​​​​​​据​​​​​​​完​​​​​​​整​​​​​​​路​​​​​​​径​​​​​​​名​​​​​​​称​​​​​​​自​​​​​​​由​​​​​​​匹​​​​​​​配​​​​​​​。​​​​​​​例​​​​​​​如​​​​​​​：`a/.*loop.*/`{.literal}
和​​​​​​​ `a/loop/`{.literal} 及​​​​​​​ `/dev/solooperation/lvol1`{.literal} 都​​​​​​​对​​​​​​​映​​​​​​​。​​​​​​​
:::
::: para
下​​​​​​​面​​​​​​​的​​​​​​​过​​​​​​​滤​​​​​​​器​​​​​​​添​​​​​​​加​​​​​​​所​​​​​​​有​​​​​​​找​​​​​​​到​​​​​​​的​​​​​​​设​​​​​​​备​​​​​​​，这​​​​​​​是​​​​​​​配​​​​​​​置​​​​​​​文​​​​​​​件​​​​​​​中​​​​​​​没​​​​​​​有​​​​​​​配​​​​​​​置​​​​​​​过​​​​​​​滤​​​​​​​器​​​​​​​的​​​​​​​默​​​​​​​认​​​​​​​行​​​​​​​为​​​​​​​：
:::
``` screen
filter = [ "a/.*/" ]
```
::: para
下​​​​​​​面​​​​​​​的​​​​​​​过​​​​​​​滤​​​​​​​器​​​​​​​会​​​​​​​删​​​​​​​除​​​​​​​光​​​​​​​驱​​​​​​​以​​​​​​​避​​​​​​​免​​​​​​​在​​​​​​​驱​​​​​​​动​​​​​​​器​​​​​​​中​​​​​​​没​​​​​​​有​​​​​​​介​​​​​​​质​​​​​​​时​​​​​​​造​​​​​​​成​​​​​​​延​​​​​​​迟​​​​​​​：
:::
``` screen
filter = [ "r|/dev/cdrom|" ]
```
::: para
下​​​​​​​面​​​​​​​的​​​​​​​过​​​​​​​滤​​​​​​​器​​​​​​​添​​​​​​​加​​​​​​​所​​​​​​​有​​​​​​​回​​​​​​​路​​​​​​​设​​​​​​​备​​​​​​​并​​​​​​​删​​​​​​​除​​​​​​​其​​​​​​​它​​​​​​​块​​​​​​​设​​​​​​​备​​​​​​​：