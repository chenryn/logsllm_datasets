In this protocol, a value is shared between two parties such that
the addition of two secrets yields the true value. All operations are
performed in the ring Z2l (integers modulo 2l ) where each number
is represented as an l-bit integer. A ring is a set of numbers which
is closed under addition and multiplication.
In order to additively share a secret x, a random number within
the ring is selected, r ∈R Z2l , and two shares are created as ⟨x⟩A0 = r
and ⟨x⟩A1 = x −r mod 2l . A party that wants to share a secret, sends
one of the shares to the other party. To reconstruct a secret, one
needs to only add two shares x = ⟨x⟩A0 + ⟨x⟩A1 mod 2l .
Addition, subtraction, and multiplication by a public constant
value η (z = x ◦ η) can be done locally by the two parties without
any communication; party i computes the share of the result as
⟨z⟩A
i ◦η mod 2l , where ◦ denotes any of the aforementioned
i
three operations. Adding/subtracting two secrets (z = x +− y) also
does not require any communication and can be realized as ⟨z⟩A
=
i
⟨x⟩A
mod 2l . Multiplying two secrets, however, requires
i
one round of communication. Furthermore, the two parties need
to have shares of precomputed Multiplication Triples (MTs). MTs
refer to a set of three shared numbers such that c = a × b. In the
offline phase, party i receives ⟨a⟩A
(see §4.4). By
i
having shares of a MT, multiplication is performed as follows:
= ⟨x⟩A
, and ⟨c⟩A
i
, ⟨b⟩A
i
i − ⟨a⟩A
= ⟨x⟩A
+− ⟨y⟩A
i
and
i
(1) Party i computes ⟨e⟩A
i
i − ⟨b⟩A
.
= ⟨y⟩A
⟨f ⟩A
i
i
= ⟨x⟩B
i
i
(2) Both parties communicate to reconstruct e and f .
(3) Party i computes its share of multiplication as
i + i × e × f
i = f × ⟨a⟩A
i + e × ⟨b⟩A
i + ⟨c⟩A
⟨z⟩A
For more complex operations, the function can be described as
an Arithmetic circuit consisting of only addition and multiplication
gates where in each step, a single gate is processed accordingly.
3 THE CHAMELEON FRAMEWORK
Chameleon comprises of an offline phase and an online phase. The
online phase is a two-party execution model that is run between
two parties who wish to perform secure computation on their
data. In the offline phase, a Semi-honest Third Party (STP) creates
correlated randomness together with random seeds and provides it
to the two parties as suggested in [47]. We describe how the STP
can be implemented in §3.3 and its role in §4.2.
The online phase consists of three execution environments: GC,
GMW, and Additive Secret Sharing (A-SS). We have described the
functionality of GC and GMW protocols in §2 and we detail our
implementations of these protocols in §4.1. We implemented two dif-
ferent protocols for the multiplication operation on additive shares:
a protocol based on Multiplication Triples (MT) that we described in
§2.4 and an optimized version of the Du-Atallah (DA) protocol [36]
(§4.2). In §3.1, we explain how the online phase works. In order to
support highly efficient secure computations, all operations that
do not depend on the run-time variables are shifted to the offline
phase. The only cryptographic operations in the online phase are
the Advanced Encryption Standard (AES) operations that are used
in GC for which dedicated hardware acceleration is available in
many processors via the AES-NI instruction set.
The offline phase includes performing four different tasks: (i)
precomputing all required OTs that are used in GC and type conver-
sion protocols; providing a very fast encryption-free online phase
for OT, (ii) precomputing Arithmetic Multiplication Triples (A-MT)
used in the multiplication of additive secret shares, (iii) precom-
puting Boolean Multiplication Triples (B-MT) used in the GMW
protocol, and lastly, (iv) precomputing vector dot product shares
(VDPS) used in the Du-Atallah protocol [36]. In order to reduce the
communication in the offline phase from the STP to the two parties,
we use the seed expansion technique [33] for generating A-MTs
and B-MTs (§4.4). We also introduce a novel technique that reduces
the communication for generating VDPSs (§4.2).
3.1 Chameleon Online Execution Flow
In this section, we provide a high-level description of the execution
flow of the online phase. As discussed earlier, linear operations such
as ADD, SUB, and MULT are executed in A-SS. The dot product of
two vectors of size n is also executed in A-SS which comprises n
MULTs and n − 1 ADDs. Non-linear operations such as CMP, EQ,
MUX and bitwise XOR, AND, OR operations are executed in the
GMW or GC protocol depending on which one is more efficient.
Recall that in order to execute a function using the GMW or GC
protocol, the function has to be described as a Boolean circuit.
However, the most efficient Boolean circuit description of a given
function is different from GMW to the GC protocol: In the GC pro-
tocol, the computation and communication costs only depend on
the total number of AND gates (NAND) in the circuit. Regardless of
4
the number of XOR gates, functionality, and depth of the circuit,
GC executes in a constant number of rounds. Communication is a
linear function of the number of AND gates (2 × k × NAND). Due to
the Half-Gates optimization (cf. §4.1), computation is bounded by
constructing the garbled tables (four fixed-key AES encryptions)
and evaluating them (two fixed-key AES encryptions). The GMW
protocol, on the other hand, has a different computation and com-
munication model. It needs only bit-level AND and XOR operations
for the computation but one round of communication is needed per
layer of AND gates. Therefore, the most efficient representation
of a function in the GMW protocol is the one that has minimum
circuit depth; in other words, the minimum number of sequentially
dependent layers of AND gates. As a result, when the network
latency is high or the depth of the circuit is high, we use GC to
execute non-linear functions, otherwise GMW will be utilized. The
computation and communication costs for atomic operations are
given in §5.
The program execution in Chameleon is described as different
layers of operations where each layer is most efficiently realized
in one of the execution environments. The execution starts from
the first layer and the corresponding execution environment. Once
all operations in the first layer are finished, Chameleon switches
the underlying protocol and continues the process in the second
execution environment. Changing the execution environment re-
quires that the type (A, B, or Y) of the shared secrets should be
changed in order to enable the second protocol to continue the
process. One necessary condition is that the cost of the share type
translation must not be very high to not diminish the efficiency
achieved by hybrid execution. For converting between the different
sharing types, we use the methods from the ABY framework [34]
which are based on highly efficient OT extensions.
Communication Rounds. The number of rounds that both
parties need to communicate in Chameleon depends on the number
of switches between execution environments and the depth of the
circuits used in the GMW protocol. We want to emphasize that the
number of communication rounds does not depend on the size of
input data. Therefore, the network latency added to the execution
time is quickly amortized over a high volume of input data.
3.2 Security Model
Chameleon is secure against honest-but-curious (HbC), a.k.a. semi-
honest, adversaries. This is the standard security model in the
literature and considers adversaries that follow the protocol but
attempt to extract more information based on the data they re-
ceive and process. Honest-but-curious is the security model for
the great majority of prior art, e.g., Sharemind [18], ABY [34], and
TinyGarble [81].
The Semi-honest Third Party (STP) can be either implemented
using a physical entity, in a distributed manner using MPC among
multiple non-colluding parties, using trusted hardware like hard-
ware security modules or smartcards [33], or using trusted execu-
tion environments like Intel SGX [7]. In case the STP is implemented
as a separate physical computation node, our framework is secure
against semi-honest adversaries with an honest majority. The lat-
ter is identical to the security model considered in the Sharemind
framework [18]. In §7 we list further works based on similar as-
sumptions. Please note that we introduce a new and more practical
computational model that is superior to Sharemind since only two
primary parties are involved in the online execution. This results
in a significantly faster run-time while better matching real-world
requirements.
3.3 Semi-honest Third Party (STP)
In Chameleon, the STP is only involved in the offline (setup) phase
in order to generate correlated randomness [47]. It is not involved
in the online phase and thus does not receive any information
about the two parties’ inputs nor the program being executed. The
only exception is computing VDPS for the Du-Atallah protocol in
which the STP needs to know the size of the vectors in each dot
product beforehand. Since the security model in Chameleon is HbC
with honest majority, some information can be revealed if the STP
colludes with either party.
In order to prevent the STP from observing communication
between the two parties and therefore being able to extract, e.g.,
their private inputs during OTs, one can simply add (authenticated)
encryption to the communication channel. Likewise it is advised to
encrypt communication between the STP and the two parties so
they cannot reconstruct the opposite party’s private inputs from
observed and received messages. While these measures do not result
in real security against malicious adversaries, they significantly
enhance the guarantees provided by the plain HbC model and
therefore increase practical security against real-world threads.
4 CHAMELEON DESIGN AND
IMPLEMENTATION
In this section, we provide a detailed description of the different
components of Chameleon. Chameleon is written in C++ and ac-
cepts the program written in C++. The implementation of the GC
and GMW engines are covered in §4.1 and A-SS engine in §4.2.
§4.3 illustrates how Chameleon supports signed fixed-point rep-
resentation. The majority of cryptographic operations is shifted
from the online phase to the offline phase. Thus, in §4.4, we de-
scribe the process of generating Arithmetic/Boolean Multiplication
Triples (A-MT/B-MT). §4.5 provides our STP-based implementation
for fast Oblivious Transfer and finally the security justification of
Chameleon is given in §4.6.
4.1 GC and GMW Engines
Chameleon’s implementation of the GC protocol is based on the
methodology presented in [81]. Therefore, the input to the GC en-
gine is the topologically sorted list of Boolean gates in the circuit as
an .scd file. We synthesized GC-optimized circuits and created the
.scd file for many primitive functions. A user can simply use these
circuits by calling regular functions in the C++ language. We include
most recent optimizations for GC: Free XOR [52], fixed-key AES
garbling [14], Half Gates [84], and sequential circuit garbling [81].
Our implementation of the GMW protocol is based on the ABY
framework [34]. Therefore, the function description format of GMW
is an .aby file. All the circuits are depth-optimized as described
in [32] to incur the least latency during the protocol execution.
5
Chameleon users can simply use these circuits by calling a function
with proper inputs.
4.2 A-SS Engine
In Chameleon, linear operations, i.e., ADD, SUB, MULT, are per-
formed using additive secret sharing in the ring Z2l . We discussed
in §2.4 how to perform a single MULT using a multiplication triple.
However, there are other methods to perform a MULT: (i) The
protocol of [16] has very low communication in the online phase.
However, in contrast to our computation model, it requires STP
interaction with the other two parties in the online phase. (ii) The
Du-Atallah protocol [36] is another method to perform multiplica-
tion on additive shared values which we describe next.
The Du-Atallah Multiplication Protocol [36]. In this proto-
col, two parties P0 (holding x) and P1 (holding y) together with a
third party P2 can perform multiplication z = x × y. At the end of
this protocol, z is additively shared between all three parties. The
protocol works as follows:
(1) P2 randomly generates a0, a1 ∈R Z2l and sends a0 to P0 and
a1 to P1.
(2) P0 computes (x + a0) and sends it to P1. Similarly, P1 com-
putes (y + a1) and sends it to P0.
(3) P0, P1, and P2 can compute their share as ⟨z⟩A0 = −a0 × (y +
a1), ⟨z⟩A1 = y × (x + a0), and ⟨z⟩A2 = a0 × a1, respectively.
It can be observed that the results are true additive shares of z:
⟨z⟩A0 + ⟨z⟩A1 + ⟨z⟩A2 = z. Please note that this protocol computes
shares of a multiplication of two numbers held by two parties in
cleartext. In the general case, where both x and y are additively
shared between two parties (P0 holds ⟨x⟩A0 , ⟨y⟩A0 and P1 holds
⟨x⟩A1 , ⟨y⟩A1 ), the multiplication can be computed as z = x × y =
(⟨x⟩A0 + ⟨x⟩A1 ) × (⟨y⟩A0 + ⟨y⟩A1 ). The two terms ⟨x⟩A0 × ⟨y⟩A0 and
⟨x⟩A1 × ⟨y⟩A1 can be computed locally by P0 and P1, respectively.
Two instances of the Du-Atallah protocol are needed to compute
shares of ⟨x⟩A0 × ⟨y⟩A1 and ⟨x⟩A1 × ⟨y⟩A0 . Please note that Pi should
not learn ⟨x⟩A1−i
, otherwise, secret values x and/or y are
revealed to Pi. At the end, P0 has
and ⟨y⟩A1−i
where ⟨z⟩A0 and ⟨z⟩A1 are the summation of each party’s share, re-
spectively.
The Du-Atallah protocol is used in Sharemind [18] where there
are three active computing nodes that are involved in the online
phase, whereas, in Chameleon, the third party (STP) is only involved
in the offline phase. This problem can be solved since the role of P2
can be shifted to the offline phase as follows: (i) Step one of the Du-
Attallah protocol can be computed in the offline phase for as many
multiplications as needed. (ii) In addition, P2 randomly generates
another l-bit number a2 and computes a3 = (a0 × a1) − a2. P2
sends a2 to P0 and a3 to P1 in the offline phase. During the online
phase, both parties additionally add their new shares (a2 and a3) to
their shared results: ⟨z⟩A0,new
= ⟨z⟩A1 + a3.
This modification is perfectly secure since P0 has received a true
= ⟨z⟩A0 + a2 and ⟨z⟩A1,new
⟨x⟩A0 × ⟨y⟩A0 ,
and P1 has
⟨x⟩A1 × ⟨y⟩A1 ,
(cid:68)⟨x⟩A0 × ⟨y⟩A1
(cid:68)⟨x⟩A0 × ⟨y⟩A1
(cid:69)A
(cid:69)A
0 ,
1 ,
(cid:68)⟨x⟩A1 × ⟨y⟩A0
(cid:68)⟨x⟩A1 × ⟨y⟩A0
(cid:69)A
(cid:69)A
0
1
Table 1: Summary of properties of the Du-Atallah multipli-
cation protocol and the protocol based on Multiplication
Triples in §2.4. (i, j) means P0 and P1 have to perform i and j
multiplications in plaintext, respectively. Offline and online
communications are expressed in number of bits. The size of
online communication corresponds to data transmission in
each direction. ∗Initial sharing of x is also considered.
Protocol
Multiplication Triple
Du-Atallah
# MULT ops Online Comm. Offline Comm. Rounds
(3,4)
(1,2)
2∗
1
2 · l
l
3 · l
2 · l
random number and P1 has received a3 which is an additive share
of (a0 × a1). Since a2 has uniform distribution, the probability
distribution of a3 is also uniform [18] and as a result, P1 cannot
infer additional information.
Optimizing the Du-Atallah Protocol. As we will discuss in
§6, in many cases, the computation model is such that one operand
x is held in cleartext by one party, e.g., P0, and the other operand
y is shared among two parties; P0 has ⟨y⟩A0 and P1 has ⟨y⟩A1 . This
situation repeatedly arises when the intermediate result is multi-
plied by one of the party’s inputs which is not shared. In this case,
only one instance of the Du-Atallah protocol is needed to compute
x × ⟨y⟩A1 . As analyzed in this section, employing this variant of the
Du-Atallah protocol is more efficient than the protocol based on
MTs. Please note that in order to utilize MTs, both operands need
to be shared among the two parties first, which, as we argue here,