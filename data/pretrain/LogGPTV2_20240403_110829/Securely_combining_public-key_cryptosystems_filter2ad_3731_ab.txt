system—whatever its actual strength—is not degraded due
to its use in conjunction with the oracle system.
Remark 3: Our main motivation is a scenario in which
one system is an encryption scheme and the other system
is a signature scheme. We refer to this scenario through-
out the paper. There is, however, no obligation to limit the
type of the attacked system. In particular, it could be of
the same type as the oracle system; e.g., both may be en-
cryption schemes. An interesting example is the case of the
Naor-Yung cryptosystem, which is only known to be secure
against non-adaptive attacks. We describe in Section 3.3
a setting with two instances of this scheme having related
keys, which is secure even though the adversary can query
one instance after observing the challenge for the other in-
stance.
2. NOTATION AND DEFINITIONS
2.1  Basic Definitions
We ﬁrst provide deﬁnitions for public key encryption and
signature schemes, and then deﬁne their combined use.
Definition 1. (public-key encryption scheme) A public-
key encryption scheme is a triple of polynomial-time algo-
rithms Enc = (K, E, D) as follows:
• The key-generation algorithm K is a probabilistic al-
gorithm taking a security parameter k as input (in
unary), and producing a pair (e, d) of corresponding
public encryption and private decryption keys.
• The encryption algorithm E is a probabilistic algo-
rithm taking as input a public encryption key e and
a message m ∈ {0, 1}∗
, and producing as output a ci-
phertext y ∈ {0, 1}∗
; we write Ee(m) = y.
• The decryption algorithm D is a deterministic algo-
rithm taking as input a private decryption key d and a
ciphertext string y ∈ {0, 1}∗
, and producing as output
either a message m ∈ {0, 1}∗
or a special reject symbol.
We require that if K(k) outputs a key-pair (e, d) and Ee(m)
outputs y, both with positive probability, then Dd(y) = m.
Definition 2. (public-key signature scheme) A pub-
lic key signature scheme is a triple of polynomial-time algo-
rithms Sig = (K, S, V ) as follows:
• The key-generation algorithm K is a probabilistic al-
gorithm taking a security parameter k as input (in
unary), and producing as output a pair (s, v) of corre-
sponding private signature and public veriﬁcation keys.
• The signature algorithm S is a probabilistic algorithm
taking as input a private signature key s and a message
and producing as output a signature σ ∈
m ∈ {0, 1}∗
{0, 1}∗
; we write Ss(m) = σ.
• The veriﬁcation algorithm V is a deterministic algo-
rithm taking as input a public veriﬁcation key v and a
message-signature pair (m, σ) and producing as output
either accept or reject.
We require that if K(k) outputs a key-pair (v, s) and Ss(m)
outputs σ, both with positive probability, then Vv(m, σ) =
(cid:1)
) = reject.
accept; and for any other pair (m
), Vv(m
, σ
, σ
(cid:1)
(cid:1)
(cid:1)
Definition 3. (combined public-key scheme) Given
an encryption scheme Enc = (K1, E, D) and a signature
scheme Sig = (K2, S, V ), the combined public-key scheme
Σ = (Enc, Sig) is a suite of algorithms (K, E, D, S, V ).
• The key-generation algorithm K is a probabilistic al-
gorithm that, given a security parameter k, produces
two pairs of keys [(e, d), (v, s)], one for Enc and one
for Sig.
• Encrypting and decrypting are performed with E and
D, and signing and verifying are performed with S and
V , exactly as in the respective stand-alone schemes.
The only diﬀerence between the combined scheme and the
original schemes is the key generation algorithm. Typically,
the probability space K(k) chosen by K with security pa-
rameter k will depend on K1(k) and K2(k). The distribu-
tion of (e, d) in K(k) is the same as its distribution in K1(k),
and the same holds for the distribution of (s, v) in K(k) and
K2(k). However the distributions of (e, d) and (s, v) in K(k)
might not be independent. Several examples may be found
in the later sections of this paper.
2.2  Security Definitions
We ﬁrst describe the setting in which an encryption scheme
Enc is the attacked cryptosystem and a signature scheme Sig
is the oracle cryptosystem; this is the setting for our results
in §4 below.
An encryption-scheme adversary is a probabilistic algo-
rithm A that is meant to attack a given encryption scheme
217Enc = (K, E, D), along with a speciﬁcation of its attack sce-
nario, including the experiment that measures its success.
Depending on the scenario, A may or may not have access
to a decryption oracle during certain parts of its run; for
example, if A is limited to chosen-plaintext attacks, then it
cannot access a decryption oracle at all. The attack scenario
may include an experiment along the following lines: After
the choice of a key pair K(k) = (e, d), A is given e and then
runs in two stages, the ﬁrst of which ends with its output
of a pair of messages; one of these is then chosen at random
and encrypted with Ee(·); the resulting ciphertext is given
to A’s second stage, whose challenge is to guess which of
the two messages was encrypted. One can adapt this gen-
eral deﬁnition to obtain the common adversarial models of
chosen-plaintext attack, chosen-ciphertext attack in the pre-
processing mode (or non-adaptive CCA, as deﬁned in [17]),
and chosen-ciphertext attack in the post-processing mode
(or adaptive CCA, as deﬁned in [20]).
If the encryption scheme Enc is used as part of a com-
bined scheme (Enc, Sig) as in Deﬁnition 3 above, we may
augment the encryption-scheme adversary by allowing it to
make use of Sig in its attack. This may be formalized with
the following augmented encryption-scheme attack scenario:
Definition 4. (augmented encryption scheme at-
tack) An adversary operates against Enc when it is used as
part of the combined scheme Σ = (Enc, Sig) = (K, E, D, S, V ).
The following experiment measures the adversary’s success.
Keys are chosen for the encryption and signature scheme
using the key generation algorithm K(k) = [(e, d), (s, v)].
The adversary is given e and v.
The attack experiment for the adversary attacking Enc is
run, with the following addition: Besides any access that this
attack scenario provides to a Dd(·)-oracle, the adversary is
also allowed to make queries of its choice to an oracle for
Ss(·). That is, the adversary is given legitimate signatures
on messages of its choice. These queries can be made at any
time, even after the challenge is given to the adversary.
Definition 5. (security of an encryption scheme
in a combined public-key scheme) The combined scheme
Σ = (Enc, Sig) does not compromise the security of Enc if
the following holds: for any augmented encryption scheme
adversary A for the combined scheme, there exists an ad-
versary A(cid:1)
for Enc alone with success probability at most
negligibly worse than the success probability of A (where the
probabilities are taken over the key space and over the ran-
dom choices of the adversary and of the oracles it queries).
In all of the examples for this setting that we consider in
§4 below, A(cid:1)
operates by:
1. taking the public key e that A(cid:1)
is given by K1(k);
2. choosing a Sig-key (s, v) so that [(e, d), (s, v)] has the
correct distribution K(k) for the augmented encryption-
scheme attack;
3. running the given adversary A, while being able to sim-
ulate the answers that A would receive for its queries
to the Ss(·)-oracle.
We have to show that the simulator’s answers are indistin-
guishable from those that A would receive in an actual run
of its attack experiment. The challenge in showing this is
that A(cid:1)
does not have complete knowledge of the private
signature key s, which is related to the private decryption
key d, which in turn is unknown to A(cid:1)
.
Next we describe the setting in which the signature scheme
Sig is the attacked cryptosystem and the encryption scheme
Enc is the oracle cryptosystem; this is the setting for our
results in §3 below.
A signature-scheme adversary is a probabilistic algorithm
A that is meant to attack a given signature scheme Sig =
(K, S, V ), along with a speciﬁcation of its attack scenario,
including the experiment that measures its success. Depend-
ing on the scenario, A may or may not have access to a sign-
ing oracle during certain parts of its run. In parallel with
our deﬁnitions above for the encryption schemes, we next
describe an augmented signature-scheme attack scenario.
Definition 6. (augmented signature scheme attack)
An adversary operates against Sig when it is used as part of
the combined scheme Σ = (Enc, Sig) = (K, E, D, S, V ). The
following experiment measures the adversary’s success.
Keys are chosen for the combined scheme using the key
generation algorithm K(k) = [(e, d), (s, v)]. The adversary
is given e and v.
The attack experiment for the adversary attacking Sig is
run, with the following addition: Besides any access that our
attack scenario provides to an Ss(·)-oracle, the adversary is
allowed to make queries to an oracle for Dd(·); that is, the
adversary can decrypt ciphertext strings of its choice.
Definition 7. (security of a signature scheme in
a combined public-key scheme) The combined scheme
Σ = (Enc, Sig) does not compromise the security of Sig if the
following holds: for any augmented signature scheme adver-
sary A for the combined scheme, there exists an adversary
A(cid:1)
for Sig alone with success probability at most negligibly
worse than the success probability of A.
In all of the examples for this setting that we consider in
§3 below, we construct A(cid:1)
by:
1. taking the public key v that A(cid:1)
is given by K2(k);
2. choosing an Enc-key (e, d) so that [(e, d), (s, v)] has the
correct distribution K(k);
3. running the given adversary A, while being able to sim-
ulate the answers that A would receive for its queries
to the Dd(·)-oracle.
As in the parallel setting for encryption schemes, we have to
show that the simulator’s answers are identical to those that
A would receive in an actual run of its attack experiment.
We can similarly combine two diﬀerent encryption schemes
or two diﬀerent signature schemes, making the appropri-
ate changes in the deﬁnitions for the two settings described
above. The main issue is not the type of the two cryptosys-
tems that are used together, but rather whether either one
of them aﬀects the security of the other.
2183. SECURITY IN THE PRESENCE OF EN-
CRYPTION SCHEMES
This section describes several public-key encryption schemes
that can be used in conjunction with a diﬀerent cryptosys-
tem, typically a signature scheme, while using related keys
and without aﬀecting the security of the other cryptosys-
tem. In other words, the signature scheme is the attacked
cryptosystem and the encryption scheme is the oracle cryp-
tosystem.
For each speciﬁc encryption scheme Enc, in order to demon-
strate that Enc can be safely combined with a speciﬁc sig-
nature scheme Sig, we must ﬁrst deﬁne the relation between
the private key of Enc and the private key of Sig; that is, we
must specify how the key generation algorithm of the com-
bined scheme operates.
In all the schemes we discuss the
following natural relation holds between the keys: One part
of the private key of the encryption scheme, denoted d1, is
also part of the private key of the attacked scheme, and is
therefore completely deﬁned (and unknown to the adversary
in our proofs of security). The rest of the private key of the
encryption scheme, denoted d2, is distributed to ensure that
the combined distribution of d = (d1, d2) has the same dis-
tribution it has when it is generated by the key-generation
algorithm of the encryption scheme alone, subject to the
constraint that d1 has a particular value.
The second step we must take is to show that the con-
ditions required by Deﬁnition 7 above are fulﬁlled: for any
adversary A operating against the combined scheme there
is an adversary A(cid:1)
operating against the signature scheme
alone (the attacked cryptosystem) with success probability
close to that of A. Therefore, A gains nothing by having
access to the decryption oracle and decrypting ciphertexts
of its choice. This type of result is shown by providing a
simulator S that has exactly the same knowledge that A(cid:1)
has about the keys of the signature scheme Sig. In particu-
lar, S does not know the secret key, and therefore does not
have full knowledge of the decryption key of the decryption
oracle Dd(·) of Enc. We show that if A interacts with S
it obtains the same information that it obtains interacting
with Enc. Therefore the interaction with Enc does not in-
crease A’s success in breaking Sig to be greater than the
success probability of A(cid:1)
3.1 Results
.
In all the encryption schemes that we study in this section,
the decryption process includes a ﬁrst stage in which the
validity of the ciphertext is checked, and a second stage in
which the ciphertext is decrypted. The simulators we design
are able to perform the ﬁrst stage in exactly the same way
as in the original decryption process, while the second stage
must be changed in order to compensate for the fact that
parts of the private key are unknown to the simulator.
In the standard model we give combined-scheme secu-
rity results for several schemes:
We treat the Cramer-Shoup scheme, which provides cho-
sen ciphertext security against adaptive attacks without any
random-oracle assumption, based on the Decision Diﬃe-
Hellman problem. We also give a sketch of a proof for the
Dolev-Dwork-Naor scheme, which is a generic and less eﬃ-
cient construction that provides the same level of security.
(A brief description of our result concerning this system ap-
pears in §3.3 discussing the Naor-Yung scheme, since the
proof techniques are similar).
The Naor-Yung encryption scheme, which is secure against
non-adaptive (or “lunch-time”) chosen-ciphertext attacks.
This scheme depends on the use of an encryption scheme
that is secure against chosen-plaintext attack, and on the se-
curity of a scheme for non-interactive zero-knowledge proofs.
In the random-oracle model we present results for
the OAEP+ encryption scheme of Shoup [23]. This scheme
satisﬁes the property of “plaintext-awareness” deﬁned by [2]
in order to describe encryption schemes for which the only
correctly formatted ciphertexts—i.e., the only ciphertexts
that will be decrypted—are those which were computed by
a party that is “aware” of the plaintext. We also sketch a