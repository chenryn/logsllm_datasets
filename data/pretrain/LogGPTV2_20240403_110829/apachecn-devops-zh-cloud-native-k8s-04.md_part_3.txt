      restartPolicy: Never
  backoffLimit: 4
```
Kubernetes 上的作业提供了一种抽象一次性流程的好方法，许多第三方应用将它们链接到工作流中。如你所见，它们非常容易使用。
接下来，让我们看看一个非常相似的资源，CronJob。
## 克隆乔布斯
CronJobs 是一种用于计划作业执行的 Kubernetes 资源。这与您可能在最喜欢的编程语言或应用框架中找到的 CronJob 实现非常相似，只有一个关键区别。Kubernetes CronJobs 触发 Kubernetes Jobs，它提供了一个额外的抽象层，例如，可以用来在晚上，每天晚上触发批处理作业。
Kubernetes 中的 CronJobs 是使用非常典型的 cron 符号配置的。让我们看看完整的规格:
cronjob-1.yaml
```
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: hello
spec:
  schedule: "0 1 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
           - name: run-job
             image: node:lts-jessie
             command: ["node", "job.js"]
          restartPolicy: OnFailure
```
这个克隆作业将在每天凌晨 1 点创建一个与我们之前的作业规范相同的作业。关于 cron 时间符号的快速回顾，它将解释我们凌晨 1 点工作的语法，请继续阅读。关于 cron 符号的全面回顾，请查看[http://man7.org/linux/man-pages/man5/crontab.5.html](http://man7.org/linux/man-pages/man5/crontab.5.html)。
Cron 符号由五个值组成，用空格隔开。每个值可以是数字整数、字符或组合。五个值中的每一个都代表一个时间值，格式从左到右如下:
*   分钟
*   小时
*   一个月中的某一天(如`25`)
*   月
*   一周中的某一天(例如，`3` =星期三)
前一个 YAML 假设了一个非并行的 CronJob。如果我们想增加 CronJob 的批处理能力，我们可以像以前的作业规范一样添加并行性。下面的代码块显示了这一点:
cronjob-2.yaml
```
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: hello
spec:
  schedule: "0 1 * * *"
  jobTemplate:
    spec:
      parallelism: 3
      template:
        spec:
          containers:
           - name: run-job
             image: node:lts-jessie
             command: ["node", "job.js"]
          restartPolicy: OnFailure
```
请注意，要做到这一点，您的 CronJob 容器中的代码需要优雅地处理并行性，这可以使用工作队列或其他类似模式来实现。
我们现在已经回顾了 Kubernetes 默认提供的所有基本控制器。让我们在下一节中利用我们的知识在 Kubernetes 上运行一个更复杂的应用示例。
# 把所有的放在一起
我们现在有了一个在 Kubernetes 上运行应用的工具集。让我们看一个真实的例子，看看如何将所有这些结合起来运行一个具有多层和跨 Kubernetes 资源分布的功能的应用:
![Figure 4.4 – Multi-tier application diagram](img/B14790_04_004.jpg)
图 4.4–多层应用图
如您所见，我们的图表应用包含一个运行. NET Framework 应用的 web 层、一个运行 Java 的中间层或服务层、一个运行 Postgres 的数据库层，最后还有一个日志/监控层。
我们为每一层选择的控制器取决于我们计划在每一层上运行的应用。对于 web 层和中间层，我们都在运行无状态应用和服务，因此我们可以有效地使用部署来处理推出更新、蓝/绿部署等。
对于数据库层，我们需要我们的数据库集群知道哪个 Pod 是副本，哪个是主副本，因此我们使用 StatefulSet。最后，我们的日志收集器需要在每个节点上运行，所以我们使用 DaemonSet 来运行它。
现在，让我们看一下我们每个层的 YAML 规格示例。
让我们从基于 JavaScript 的 web 应用开始。通过在 Kubernetes 上托管这个应用，我们可以进行加那利测试和蓝/绿部署。需要注意的是，本节中的一些示例使用了 DockerHub 中没有公开的容器映像名称。要使用这种模式，请将示例调整到您自己的应用容器中，或者如果您想在没有实际应用逻辑的情况下运行它，只需使用 busybox。
web 层的 YAML 文件可能如下所示:
示例-部署-web.yaml
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webtier-deployment
  labels:
    tier: web
spec:
  replicas: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 25% 
  selector:
    matchLabels:
      tier: web
  template:
    metadata:
      labels:
        tier: web
    spec:
      containers:
      - name: reactapp-container
        image: myreactapp
```
在前面的 YAML 中，我们使用`tier`标签来标记我们的应用，并将其用作我们的`matchLabels`选择器。
接下来是中端服务层。让我们来看看相关的 YAML:
示例-部署-mid.yaml
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: midtier-deployment
  labels:
    tier: mid
spec:
  replicas: 8
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25% 
  selector:
    matchLabels:
      tier: mid
  template:
    metadata:
      labels:
        tier: mid
    spec:
      containers:
      - name: myjavaapp-container
        image: myjavaapp
```
正如您在前面的代码中所看到的，我们的中间层应用与 web 层设置非常相似，我们正在使用另一个部署。
有趣的部分来了——让我们看看 Postgres StatefulSet 的规范。为了适合页面，我们对这个代码块进行了一些删减，但是您应该能够看到最重要的部分:
示例-statefulset.yaml
```
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-db
  labels:
    tier: db
spec:
  serviceName: "postgres"
  replicas: 2
  selector:
    matchLabels:
      tier: db
  template:
    metadata:
      labels:
        tier: db
    spec:
      containers:
      - name: postgres
        image: postgres:latest
        envFrom:
          - configMapRef:
              name: postgres-conf
        volumeMounts:
        - name: pgdata
          mountPath: /var/lib/postgresql/data
          subPath: postgres
```
在 YAML 文件之前的中，我们可以看到一些我们尚未回顾的新概念——配置地图和卷。我们将分别在*第 6 章*、 *Kubernetes 应用配置*和 [*第 7 章*](07.html#_idTextAnchor166) 、*Kubernetes 上的存储*中更详细地了解这些是如何工作的，但现在让我们专注于规范的其余部分。我们有我们的`postgres`容器，以及一个设置在`5432`默认 Postgres 端口上的端口。
最后，让我们看看我们的日志应用的 DaemonSet。这是 YAML 文件的一部分，我们再次缩短了长度:
示例-daemmonset . YAML
```
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd
  namespace: kube-system
  labels:
    tier: logging
spec:
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        tier: logging
    spec:
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - name: fluentd
        image: fluent/fluentd-kubernetes-daemonset:v1-debian-papertrail
        env:
          - name: FLUENT_PAPERTRAIL_HOST
            value: "mycompany.papertrailapp.com"
          - name: FLUENT_PAPERTRAIL_PORT
            value: "61231"
          - name: FLUENT_HOSTNAME
            value: "DEV_CLUSTER"
```
在这个 daemmonset 中，我们设置了 FluentD(一个流行的开源日志收集器)来将日志转发到 Papertrail，一个基于云的日志收集器和搜索工具。同样，在这个 YAML 的文件中，我们有一些东西我们以前没有审查过。例如，`node-role.kubernetes.io/master`的`tolerations`部分实际上将允许我们的 DaemonSet 将 Pods 放置在主节点上，而不仅仅是工作节点上。我们将在 [*第 8 章*](08.html#_idTextAnchor186)*Pod 放置控制*中回顾这是如何工作的。
我们还在 Pod 规范中直接指定环境变量，这对于相对基本的配置来说是可以的，但是可以通过使用 Secrets 或 ConfigMaps(我们将在 [*第 6 章*](06.html#_idTextAnchor143)*Kubernetes 应用配置*中回顾)来改进，以避免它出现在我们的 YAML 代码中。
# 总结
在本章中，我们回顾了在 Kubernetes 上运行应用的一些方法。首先，我们回顾了为什么 Pods 本身不足以保证应用的可用性，并引入了控制器。然后，我们回顾了一些简单的控制器，包括复制集和部署，然后继续讨论具有更具体用途的控制器，如高性能计算、作业、克隆作业、状态集和 DaemonSets。最后，我们利用我们所有的知识，用它来实现一个运行在 Kubernetes 上的复杂应用。
在下一章中，我们将学习如何使用服务和入口向世界展示我们的应用(它们现在以高可用性正常运行)。
# 问题
1.  复制集和复制控制器有什么区别？
2.  部署比复制集有什么优势？
3.  什么是工作的好用例？
4.  为什么 StatefulSets 更适合有状态工作负载？
5.  我们如何使用部署来支持金丝雀发布流？
# 进一步阅读
*   Kubernetes 官方文件:[https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/)
*   Kubernetes 作业资源文档:[https://Kubernetes . io/docs/concepts/workloads/controller/Job/](https://kubernetes.io/docs/concepts/workloads/controllers/job/)
*   FluentD DaemonSet 安装文档:[https://github.com/fluent/fluentd-kubernetes-daemonset](https://github.com/fluent/fluentd-kubernetes-daemonset)
*   *硬道*:[https://github . com/keleyhightower/kubrites—硬道](https://github.com/kelseyhightower/kubernetes-the-hard-way)