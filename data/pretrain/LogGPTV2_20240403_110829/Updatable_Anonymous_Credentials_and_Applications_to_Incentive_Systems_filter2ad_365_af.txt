### 2. Proof of Consistency and Error Handling

To show that if no error occurs and there exists a consistent explanation list \( L \), then \( A \) cannot win (implying that unless an error happens, if \( A \) wins, then \( B \) must also win because there is no \( L \) that would make \( B \) lose). The proof of this is somewhat technical but can be broken down as follows:

1. **Canonical Sequence Analysis:**
   - For each user, there exists a "canonical" sequence of spend and earn operations in \( L \) that does not involve any spend operations marked as invalid in the double-spending database \( DB \).
   - From the design of the update functions and the consistency of \( L \), it is clear that in such a sequence, the value accumulated by earn operations cannot be smaller than the value spent through spend operations.
   - This implies that the desired property \( v_{\text{earned}} \geq v_{\text{spent}} - v_{\text{invalid}} \) holds if we only consider these canonical operations.

2. **Handling Non-Canonical Operations:**
   - The rest of the proof ensures that all spend operations not part of the canonical sequence are marked as invalid in \( DB \).
   - Removing all non-canonical operations from consideration does not change \( v_{\text{spent}} - v_{\text{invalid}} \) and only decreases \( v_{\text{earned}} \).

3. **Ensuring Correctness:**
   - Because no error occurs, challenges \( \gamma \) do not repeat, and any two attribute-vectors that share the same \( dsid \) have the same \( usk \) and \( dsrnd \).
   - This implies that extracting \( usk \) from two transactions with the same \( dsid \) works without error (given \( c = usk \cdot \gamma + dsrnd \) and the definition of Link).
   - Since any extracted \( usk \) is correct, the tracing of \( dsid \) as in \( DBsync \) works as intended, i.e., all invalid transactions will be marked as such in \( DB \) as required.

The full proof can be found in Appendix F.3.

### Theorem 16: Framing Resistance

If the encryption scheme \( \Pi_{\text{enc}} \) is CPA-secure and \( \Pi_{\text{uacs}} \) has simulation anonymity, then \( \Pi_{\text{insy}} \) (Construction 23) is framing resistant.

**Proof:**
Framing resistance follows via reduction to \( \Pi_{\text{enc}} \)'s (key-ind.) CPA security. An adversary who can frame an honest user needs to compute the secret key \( usk \) for the user’s public key \( upk = \text{ComputePK}_{\text{enc}}(pp, usk) \). The proof can be found in Appendix F.4.

### 8. Instantiation and Performance of the Incentive System

We instantiated Construction 23 using the signature scheme by Pointcheval and Sanders [PS16] for the UACS, and ElGamal as the public-key encryption scheme and malleable commitment. A concrete description of the instantiated scheme can be found in Appendix E.

Using the open-source Java library `upb.crypto` and the bilinear group provided by `mcl` (bn256), we implemented this instantiation and ran it on a phone (typical user device) and a laptop (approximate provider device). Table 1 shows the execution time (in milliseconds) of the protocols, excluding communication cost. The numbers illustrate that our scheme is practical, with performance better or comparable to the BBA+ performance [HHNR17], which does not offer partial spending (the user needs to reveal point count when spending) and hence can avoid expensive range proofs.

| Device | Join | Credit | Earn | Deduct | Spend |
|--------|------|--------|------|--------|-------|
| Google Pixel (Phone, Snapdragon 821) | 390 | 76 | 13 | 69 | 110 |
| Surface Book 2 (Laptop, i7-8650U) | 18 | 122 | 17 | 353 | 64 |

### References

- [Ame19] American Express Company. American express membership rewards. https://global.americanexpress.com/rewards, January 2019.
- [BB18] Johannes Blömer and Jan Bobolz. Delegatable attribute-based anonymous credentials from dynamically malleable signatures. In Bart Preneel and Frederik Vercauteren, editors, ACNS 18, volume 10892 of LNCS, pages 221–239. Springer, Heidelberg, July 2018.
- [CGH11] Scott E. Coull, Matthew Green, and Susan Hohenberger. Access controls for oblivious and anonymous systems. ACM Trans. Inf. Syst. Secur., 14(1):10:1–10:28, 2011.
- [CHL05] Jan Camenisch, Susan Hohenberger, and Anna Lysyanskaya. Compact e-cash. In Ronald Cramer, editor, EUROCRYPT 2005, volume 3494 of LNCS, pages 302–321. Springer, Heidelberg, May 2005.
- [CKS10] Jan Camenisch, Markulf Kohlweiss, and Claudio Soriente. Solving revocation with efficient update of anonymous credentials. In Juan A. Garay and Roberto De Prisco, editors, SCN 10, volume 6280 of LNCS, pages 454–471. Springer, Heidelberg, September 2010.
- [CDD17] Jan Camenisch, Manu Drijvers, and Maria Dubovitskaya. Practical UC-secure delegatable credentials with attributes and their application to blockchain. In Bhavani M. Thuraisingham, David Evans, Tal Malkin, and Dongyan Xu, editors, ACM CCS 2017, pages 683–699. ACM Press, October / November 2017.
- [BBB+18] Kai Bemmann, Johannes Blömer, Jan Bobolz, Henrik Bröcher, Denis Diemert, Fabian Eidens, Lukas Eilers, Jan Haltermann, Jakob Juhnke, Burhan Otour, Laurens Porzenheim, Simon Pukrop, Erik Schilling, Michael Schlichtig, and Marcel Stienemeier. Fully-featured anonymous credentials with reputation system. In ARES, pages 42:1–42:10. ACM, 2018.
- [BCKL08] Mira Belenkiy, Melissa Chase, Markulf Kohlweiss, and Anna Lysyanskaya. P-signatures and noninteractive anonymous credentials. In Ran Canetti, editor, TCC 2008, volume 4948 of LNCS, pages 356–374. Springer, Heidelberg, March 2008.
- [CL01] Jan Camenisch and Anna Lysyanskaya. An efficient system for non-transferable anonymous credentials with optional anonymity revocation. In Birgit Pfitzmann, editor, EUROCRYPT 2001, volume 2045 of LNCS, pages 93–118. Springer, Heidelberg, May 2001.
- [CL04] Jan Camenisch and Anna Lysyanskaya. Signature schemes and anonymous credentials from bilinear maps. In Matthew Franklin, editor, CRYPTO 2004, volume 3152 of LNCS, pages 56–72. Springer, Heidelberg, August 2004.
- [Dam00] Ivan Damgård. Efficient concurrent zero-knowledge in the auxiliary string model. In Bart Preneel, editor, EUROCRYPT 2000, volume 1807 of LNCS, pages 418–430. Springer, Heidelberg, May 2000.
- [DDD05] Liesje Demuynck and Bart De Decker. Anonymous updating of credentials. Technical report, December 2005.
- [DMM+18] Dominic Deuber, Matteo Maffei, Giulio Malavolta, Max Rabkin, Dominique Schröder, and Mark Simkin. Functional credentials. PoPETs, 2018(2):64–84, 2018.
- [GGM14] Christina Garman, Matthew Green, and Ian Miers. Decentralized anonymous credentials. In NDSS 2014. The Internet Society, February 2014.
- [GS08] Jens Groth and Amit Sahai. Efficient non-interactive proof systems for bilinear groups. In Nigel P. Smart, editor, EUROCRYPT 2008, volume 4965 of LNCS, pages 415–432. Springer, Heidelberg, April 2008.
- [HHNR17] Gunnar Hartung, Max Hoffmann, Matthias Nagel, and Andy Rupp. BBA+: improving the security and applicability of privacy-preserving point collection. In ACM Conference on Computer and Communications Security, pages 1925–1942. ACM, 2017.
- [JR16] Tibor Jager and Andy Rupp. Black-box accumulation: Collecting incentives in a privacy-preserving way. PoPETs, 2016(3):62–82, 2016.
- [MDPD15] Milica Milutinovic, Italo Dacosta, Andreas Put, and Bart De Decker. ucentive: An efficient, anonymous and unlinkable incentives scheme. In TrustCom/BigDataSE/ISPA (1), pages 588–595. IEEE, 2015.
- [NDD06] Vincent Naessens, Liesje Demuynck, and Bart De Decker. A fair anonymous submission and review system. In Herbert Leitold and Evangelos P. Markatos, editors, Communications and Multimedia Security, 10th IFIP TC-6 TC-11 International Conference, CMS 2006, Heraklion, Crete, Greece, October 19-21, 2006, Proceedings, volume 4237 of Lecture Notes in Computer Science, pages 43–53. Springer, 2006.
- [PAY19] PAYBACK GmbH. Payback. https://www.payback.net/, January 2019.
- [PS16] David Pointcheval and Olivier Sanders. Short randomizable signatures. In Kazue Sako, editor, CT-RSA 2016, volume 9610 of LNCS, pages 111–126. Springer, Heidelberg, February / March 2016.

### A. Security Definitions for Building Blocks

#### Definition 17: Unforgeability
Consider the following unforgeability game \( \text{Exp}_{\text{blind-uf}}(\Pi, A, \lambda) \) for a blind signature scheme \( \Pi \):

- The experiment runs \( pp \leftarrow G(1^\lambda) \) and hands \( pp \) to \( A \). \( A \) responds with \( 1^n \) for some \( n \in \mathbb{N} \). The experiment generates \( (pk, sk) \leftarrow \text{KeyGen}(pp, 1^n) \) and hands \( pk \) to \( A \).
- \( A \) can query signatures by announcing \( c, \vec{m} \in M^n \) and \( r \) such that \( c = \text{Commit}(pp, pk, \vec{m}, r) \). The experiment then runs \( \text{BlindSign}(pp, pk, sk, c) \) interacting with \( A \) and records \( \vec{m} \).
- Eventually, \( A \) outputs \( \vec{m}^* \) and \( \sigma^* \). The experiment outputs 1 if and only if \( \text{Vrfy}(pp, pk, \vec{m}^*, \sigma^*) = 1 \) and \( \vec{m}^* \) was not recorded in any query.

\( \Pi \) has blind unforgeability if for all polynomial-time adversaries \( A \), there exists a negligible function \( \text{negl} \) such that \( \Pr[\text{Exp}_{\text{blind-uf}}(\Pi, A, \lambda) = 1] \leq \text{negl}(\lambda) \) for all \( \lambda \).

#### Definition 18: Perfect Message Privacy
We say that a blind signature scheme has perfect message privacy if:

- **Perfectly Hiding Commitment Scheme:** For all \( \vec{m}_0, \vec{m}_1 \in M^n \), \( \text{Commit}(pp, pk, \vec{m}_0, r_0) \) is distributed exactly the same as \( \text{Commit}(pp, pk, \vec{m}_1, r_1) \) over the random choice of \( r_0, r_1 \).
- **BlindRcv Does Not Reveal the Message:** For any two messages \( \vec{m}_0, \vec{m}_1 \in M^n \) and all (unrestricted) \( A \):
  - \( (\text{output}_A[A(C_0) \leftrightarrow \text{BlindRcv}(pp, pk, \vec{m}_0, r_0)], \chi_0) \)
  - is distributed exactly like
  - \( (\text{output}_A[A(C_1) \leftrightarrow \text{BlindRcv}(pp, pk, \vec{m}_1, r_1)], \chi_1) \)
  - where \( r_0, r_1 \) is chosen uniformly at random, \( C_j = \text{Commit}(pp, pk, \vec{m}_j, r_j) \) and \( \chi_j \) is an indicator variable with \( \chi_j = 1 \) if and only if \( \text{Vrfy}(pp, pk, \vec{m}_j, \sigma_j) = 1 \) for the local output \( \sigma_j \) of \( \text{BlindRcv} \) in either case.

While this definition may seem strong, it is satisfied, for example, by the Pointcheval Sanders blind signature scheme [PS16], where \( \text{Commit} \) is effectively a (perfectly hiding) Pedersen commitment. Their \( \text{BlindRcv} \) (in our formulation without zero-knowledge proof) does not send any messages (meaning the output of \( A \) is clearly independent of \( \vec{m} \)), and the \( \chi_j \) bit (validity of the resulting signature) is also independent of the committed message.

#### Definition 19: Key-Indistinguishable CPA
Let \( \Pi_{\text{enc}} \) be a public-key encryption scheme. Consider the following experiments \( \text{Exp}_{\text{key-ind-CPA}}^b(\Pi_{\text{enc}}, A, \lambda) \) for \( b \in \{0, 1\} \):

- The experiment generates public parameters \( pp \leftarrow G(1^\lambda) \) and two keys \( \text{KeyGen}_{\text{enc}}(pp) \rightarrow sk_0, sk_1 \), hands \( A \) the \( pp \) and the two public keys \( (pk_0, pk_1) = (\text{ComputePK}_{\text{enc}}(pp, sk_0), \text{ComputePK}_{\text{enc}}(pp, sk_1)) \).
- \( A \) outputs two messages \( m_0, m_1 \in M_{pp} \).
- \( A \) gets \( \text{Encrypt}_{\text{enc}}(pp, pk_b, m_b) \) from the experiment and outputs a bit \( \hat{b} \).

We say that \( \Pi_{\text{enc}} \) is key-ind. CPA secure if for all polynomial-time adversaries \( A \), there exists a negligible function \( \text{negl} \) such that:
\[ \left| \Pr[\text{Exp}_{\text{key-ind-CPA}}^0(\Pi_{\text{enc}}, A, \lambda) = 1] - \Pr[\text{Exp}_{\text{key-ind-CPA}}^1(\Pi_{\text{enc}}, A, \lambda) = 1] \right| \leq \text{negl}(\lambda) \]

#### Definition 20: Perfectly Binding Commitment
A (malleable) commitment scheme is perfectly binding if for all \( pp \in [G(1^\lambda)] \), \( pk \in [\text{KeyGen}(pp)] \), and all \( (c, o) \in [\text{Commit}(pp, pk, m)] \), there exists no \( m' \neq m \) and \( o' \) such that \( \text{Vrfy}(pp, pk, c, o', m') = 1 \).

#### Definition 21: Computationally Hiding Commitment
Let \( \Pi_{\text{cmt}} \) be a malleable commitment scheme. Consider the following experiment \( \text{Exp}_{\text{hid}}^b(\Pi_{\text{cmt}}, A, \lambda) \):

- \( pp \leftarrow G(1^\lambda) \), \( pk \leftarrow \text{KeyGen}(pp) \), \( (m_0, m_1, st) \leftarrow A(pp, pk) \), \( m_0, m_1 \in M_{pp} \)
- \( \hat{b} \leftarrow A(c, st) \) where \( c = \text{Commit}(pp, pk, m_b) \)

We say that \( \Pi_{\text{cmt}} \) is computational hiding if for all polynomial-time adversaries \( A \), there exists a negligible function \( \text{negl} \) such that:
\[ \left| \Pr[\text{Exp}_{\text{hid}}^0(\Pi_{\text{cmt}}, A, \lambda) = 1] - \Pr[\text{Exp}_{\text{hid}}^1(\Pi_{\text{cmt}}, A, \lambda) = 1] \right| \leq \text{negl}(\lambda) \]