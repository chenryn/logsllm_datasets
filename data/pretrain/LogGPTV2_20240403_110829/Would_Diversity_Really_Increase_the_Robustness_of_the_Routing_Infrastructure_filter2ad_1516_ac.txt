t
s
e
g
r
a
L
e
z
S
d
e
z
i
i
l
a
m
r
o
N
Random
Cluster
Partition
Max
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
)
e
v
A
(
t
n
e
n
o
p
m
o
C
t
s
e
g
r
a
L
e
z
S
d
e
z
i
i
l
a
m
r
o
N
 2
 4
 6
 8
 10
 12
 14
 16
 18
 20
 2
 4
 6
 8
 10
 12
 14
 16
 18
 20
Number of colors
Number of colors
(a) Average Normalized Size Largest Component
(b) Minimum Normalized Size Largest Component
Figure 3. Robustness achieved by the different coloring algorithms on the Tier(cid:173)1 ISP topology when
using the Normalized Size of the Largest Component as connectivity metric.
Figure 3(b) shows that the Partition algorithm regularly
outperforms the others in terms of minimum robustness. We
also observe that the minimum robustness for the Cluster al-
gorithm stays ﬂat. This is because the Cluster algorithm we
use is deterministic, i.e., it always ﬁnds the same partitions
on different runs over the same graph. Once a bad partition
is found, e.g., an unbalanced or discontiguous partition, it
is likely to be kept and adding more colors will not improve
the minimum robustness.
Since we do not have prior knowledge on which color
might fail, we need to optimize for both average and mini-
mum robustness. Otherwise, a failure of the color with the
largest number of nodes would have a major impact on the
network. As we have seen, unbalanced partitions can gen-
erate good average robustness, but they will introduce bad
minimum robustness which is not desired. Thus, we prefer
the Partition algorithm over the Cluster algorithm, since the
Partition algorithm tends to generate balanced partitions.
Non-contiguous partitions: In Figure 3(b), the minimum
robustness for the Partition algorithm takes a dip at k = 5.
This is also observed on other topologies. We found that one
of the partitions in the split is non-contiguous, that is, the
same partition contains two groups of nodes that have intra-
group connectivity but no inter-group connectivity. The
main problem with non-contiguous partitions is that they
might disconnect other partitions that depend on the non-
contiguous partition for connectivity to the rest of the graph.
Good graph partitioning algorithms tend to avoid non-
contiguous partitions but this is not always easy given that
the number of nodes in each partition needs to be balanced.
Some algorithms such as the one we use [19] have a param-
eter to control how unbalanced the partitions can be. Our
solution for non-contiguous partitions is to rerun the par-
titioning algorithm with an increased value of this param-
eter if any of the partitions is found to be non-contiguous.
This increases the ﬁnal robustness but increases the runtime.
Since the Partition algorithm is fast, we can generate and
color multiple partitions and then select the best coloring,
without signiﬁcantly impacting the runtime. Appendix C
shows the runtime for the different algorithms.
In summary, we observe that the best approach to color
the network is to use the same color for each region of the
graph, since the failure of one node impacts closer nodes
more than nodes located further away (i.e., fate-sharing).
Among the two algorithms that use this approach, Cluster
and Partition, the Partition algorithm works best because it
produces a more balanced coloring.
In addition, the selected partitioning algorithm should
provide contiguous partitions as these improve the overall
robustness of the network. Note that for a coloring algo-
rithm to provide a robust coloring, it is not enough to pro-
duce a balanced coloring. For example, a perfectly balanced
random coloring, produces colored graphs with smaller ro-
bustness than the less balanced ones produced by the Parti-
tion algorithm.
5.3 Network Topologies
Next, we compare the robustness of the various topolo-
gies for a given coloring algorithm. We use the Partition
algorithm which outperformed the others in Section 5.2. As
a baseline we use the synthetic Mesh topology since it is
the most resilient topology. That is, after removing a color,
the remaining nodes are still fully connected; there is no
additional impact from disconnecting a node.
Partition
Partition
 0.95
 0.9
 0.85
 0.8
 0.75
 0.7
 0.65
 0.6
 0.55
 0.5
 0.45
 0.4
Mesh
Abilene
Cenic
Exodus
Sprint
Level3
Verio
Tier 1
)
n
M
i
(
t
n
e
n
o
p
m
o
C
t
s
e
g
r
a
L
f
i
o
e
z
S
d
e
z
i
l
a
m
r
o
N
 0.95
 0.9
 0.85
 0.8
 0.75
 0.7
 0.65
 0.6
 0.55
 0.5
 0.45
 0.4
Mesh
Abilene
Cenic
Exodus
Sprint
Verio
Tier 1
)
e
v
A
(
t
n
e
n
o
p
m
o
C
t
s
e
g
r
a
L
f
i
o
e
z
S
d
e
z
i
l
a
m
r
o
N
 2
 4
 6
 8
 10
 12
 14
 16
 18
 20
 2
 4
 6
 8
 10
 12
 14
 16
 18
 20
Number of colors
Number of colors
(a) Average Normalized Size Largest Component
(b) Minimum Normalized Size Largest Component
Figure 4. Robustness of the different topologies when colored using the Partition algorithm.
Figure 4 shows the robustness of different topologies us-
ing the Partition algorithm and the NSLC connectivity met-
ric. Similar results for the PC metric are provided in Ap-
pendix A. For this experiment, we ﬁrst force the graph par-
titioning algorithm to try to ﬁnd very balanced partitions. If
any of the generated partitions is non-contiguous, we relax
the balancing constraint. We ﬁnd that we rarely have to re-
lax the balancing constraint more than once for any color set
size. We observe that, using the Partition algorithm, most
topologies achieve average and minimum robustness close
to the Mesh topology. Thus, when any router can run any
implementation, we can achieve robustness close to the op-
timal obtained with a full mesh, by coloring the graph using
the Partition algorithm.
It is not surprising to ﬁnd that the Abilene topology of-
ten performs worse than others. This can be explained by
its simple topology with few nodes and minimal link redun-
dancy between nodes. Being a non-commercial network,
it is unlikely that robustness was one of Abilene’s design
goals. However, we also ﬁnd that the Exodus topology also
performs worse than the other commercial network topolo-
gies, specially in the worst case. This indicates that the Ex-
odus topology has less geographical redundancy.
5.4 Node Importance
Nodes in a topology may not be equally important. This
can be modeled by assigning a weight to each node. Some
partitioning algorithms, such as the one we use [19], allow
node weights to be speciﬁed and compute the partitions to
achieve similar total weight in every partition, rather than
a similar number of nodes in each partition. Thus, in this
case a balanced partition, has approximately the same sum
of node weights in each partition.
As an example, Figure 5 shows the robustness of the
weighted Cenic topology using the Partition algorithm,
where each node is assigned a weight equal to the number
of customers that connect to that node. We select the Cenic
topology because we have such information available. Note
that the signiﬁcance of the weights can be arbitrary and
we use this speciﬁc weight just as an illustrative example.
The dashed line shows the result when we run the Partition
algorithm forcing balanced partitions, while the solid line
shows the ﬁnal result where if one of the partitions was non-
contiguous, we relax the balancing constraint. Compared
with Figure 4, we observe that similar robustness can be
achieved in the weighted topology as that in the unweighed
topology. There are two points (i.e., k = 3 and k = 10)
where the partitioning algorithm is not able to ﬁnd con-
tiguous partitions if constrained to very balanced partitions.
When we relax this constraint, we obtain partitions that are
more unbalanced, but contiguous, which improves the ﬁnal
result specially for minimum robustness.
5.5 Optimizing the Use of Existing Diversity
In this section we ﬁrst present the diversity that currently
exists in the Tier-1 ISP topology, which we call original
coloring. Then, we compare the robustness of the original
coloring to the robustness in the colored graphs obtained
by the Partition algorithm without extensions (Basic Parti-
tion), and the Partition algorithm using the role and repli-
cated node extensions (Extended Partition).
The Tier-1 ISP topology uses 8 implementations with
two of the implementations being used by over 90% of the
nodes. The fact that there are two dominating implemen-
tations supports the hypothesis that current networks are
highly homogeneous, but the surprising fact is the large
number of implementations already available in the net-
Cenic
Cenic
 0.95
 0.9
 0.85
 0.8
 0.75
 0.7
 0.65
 0.6
 0.55
 0.5
)
e
v
A
(
C
L
S
N
d
e
t
h
g
e
W
i
 0.45
 2