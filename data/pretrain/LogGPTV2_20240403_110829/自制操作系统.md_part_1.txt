### 版权声明
图灵社区会员 metorm 专享 尊称版权

### 内容提要
这是一本兼具趣味性、实用性和学习性的操作系统书籍。作者从计算机的构造、汇编语言和C语言入手，通过实践引导读者掌握算法。在本书的指导下，读者将从零开始编写所有代码，并在30天内制作出一个具备窗口系统的32位多任务操作系统。本书适合操作系统爱好者和程序设计人员阅读。

### 图灵程序设计丛书
**书名**: 30天自制操作系统  
**作者**: [日] 川合秀实  
**译者**: 周自恒, 李黎明, 曾祥江, 张文旭  
**责任编辑**: 傅志红  
**执行编辑**: 乐馨  
**出版社**: 人民邮电出版社  
**出版地**: 北京市崇文区夕照寺街14号  
**邮编**: 100061  
**电子邮件**: PI:EMAIL  
**网址**: http://www.ptpress.com.cn  
**印刷地**: 北京  
**开本**: 800×1000 1/16  
**印张**: 45  
**字数**: 1063千字  
**版次**: 2012年8月第1版  
**印数**: 1-4000册  
**著作权合同登记号**: 图字：01-2011-6036号  
**ISBN**: 978-7-115-28796-0  
**定价**: 99.00元  
**读者服务热线**: (010)51095186转604  
**印装质量热线**: (010)67129223  
**反盗版热线**: (010)67171154

### 版权声明
**原书信息**: 30 Nichi De Dekiru OS Jisaku Nyuumon by 川合秀実  
**版权所有**: © 2006 Hidemi Kawai  
**原版出版**: Mynavi Corporation  
**中文简体字版授权**: 由Mynavi Corporation授权人民邮电出版社独家出版。未经出版者书面许可，不得以任何方式复制或抄袭本书内容。  
**侵权必究**

### 译者序
《30天自制操作系统》中文版终于与国内读者见面了。标题一出，有人质疑“XX天”这种标题不靠谱，但作者取这个标题并非随意。例如，“30天学会核物理”听起来夸张，但如果改成“30天自制微型反应堆”，虽然仍可能困难，但至少明确目标是可实现的。这本书属于后者：无论多么简单，它都是一个真正的操作系统，而且实现了图形界面、多任务等高级功能，仅用40KB代码。跟随作者的脚步，你也能做到，即使只是抄代码，也一定有所收获。

这本书面向零基础读者，甚至找了中学生试读，语言通俗易懂且轻松幽默。作为译者，我喜欢这种风格，因为可以引入流行词汇而不破坏原书意境。技术上，这本书没有过多解释细节，作者认为自制操作系统主要是为了乐趣。因此，系统学习计算机原理、汇编语言、C语言等知识并不现实，但你能获得独特的体验。

本书的一大特色是“从失败中学习”。每次为操作系统实现新功能时，总会有一些漏洞和缺陷。这些漏洞是刻意安排的，作者详细引导读者发现并修复它们，从而让系统更完善。这种思路符合实际开发过程，先苦后甜带来成就感和幸福感。市面上的技术书籍很少有这种“试错”过程，因为它需要精心安排且占用大量篇幅。这也是本书与众不同之处，值得推荐。

如果你是高手，可能会觉得内容不够系统和条理，甚至觉得做出来的系统简陋。作者承认：“这本书无论在哪方面都只有半瓶醋。”然而，从零开始编写系统才能真正了解底层运作，对其他内核上的系统构建也有帮助。另外，不要错过最后的专栏“这也能叫自制操作系统？太坑爹了！”，作者早已预料到读者的各种吐槽。

书中提到“日文显示”，翻译上有些纠结。为了不改动原书结构和代码，中文版保留了原汁原味的文字，并补充了中文显示的相关内容。基本上只需替换字库和编码方式即可实现中文显示，甚至比日文还简单。这部分补充内容由我撰写，如有错误或疏漏，欢迎指正。关于光盘中的代码注释，由于量大繁杂，无法全部翻译成中文（书中代码注释已翻译），非常抱歉。如果发现注释乱码，请用UltraEdit等编辑器以Shift-JIS编码打开，即可看到正常日文。

最后，感谢其他三位译者及图灵公司各位编辑的努力，使这本书得以问世，希望所有对编写操作系统感兴趣的读者都能从中受益。

周自恒  
2012年9月于上海

### 关于作者
前言
“好想编写一个操作系统呀！”这是许多程序员的梦想之一。虽然说“所有程序员”有点夸张，但它至少能排进程序员梦想前十名。

很多人觉得编写操作系统是个天方夜谭，可能是业界阴谋（笑）。他们让大家相信编写操作系统非常困难，这样就可以高价兜售自己的产品，而操作系统的作者也会被顶礼膜拜。实际情况如何呢？其实编写操作系统并没有那么难，至少笔者的感觉如此。

也许有人曾尝试过编写操作系统但因难度放弃。实际上，你的失败并不是因为编写操作系统太难，而是没有人告诉你其实很简单。

无论是编写操作系统还是其他事情，讲解者的观点很重要。如果讲解者认为很难，就不可能讲得通俗易懂。同样的内容，复杂讲解让人难以理解。

你想不想和笔者一起再挑战一次呢？如果你曾经梦想过编写自己的操作系统，一定会觉得乐在其中。

可能有人会说，这本书足足有700多页，怎么会“有趣”和“简单”呢？唔，这么一说笔者也觉得挺心虚的，不过其实也只是长了一点点啦。平均每天只有大约23页的内容，你看，也没有那么长吧？

这本书的文风非常轻松，也许你会不知不觉读得很快。但最好还是静下心来慢慢读。书中展示的程序代码和文字说明同样重要，仔细阅读才能更好地理解。

在本书中，我们使用C语言和汇编语言编写操作系统，不必担心，你可以边读边学。本书写得很详细，希望能帮助你搞懂C语言中的指针。即便是从这样的水平开始，30天后你也能够编写出一个很棒的操作系统，请大家拭目以待吧！

### 目录
**第0天 着手开发之前**
1. 前言
2. 何谓操作系统
3. 开发操作系统的各种方法
4. 无知则无畏
5. 如何开发操作系统
6. 操作系统开发中的困难
7. 学习本书时的注意事项（重要！）
8. 各章内容摘要

**第1天 从计算机结构到汇编程序入门**
1. 先动手操作
2. 究竟做了些什么
3. 初次体验汇编程序
4. 加工润色

**第2天 汇编语言学习与Makefile入门**
1. 介绍文本编辑器
2. 继续开发
3. 先制作启动区
4. Makefile入门

**第3天 进入32位模式并导入C语言**
1. 制作真正的IPL
2. 试错
3. 读到18扇区

**第4天 C语言与画面显示的练习**
1. 用C语言实现内存写入
2. 条纹图案
3. 挑战指针
4. 指针的应用（1）
5. 指针的应用（2）
6. 色号设定
7. 绘制矩形
8. 今天的成果

**第5天 结构体、文字显示与GDT/IDT初始化**
1. 接收启动信息
2. 试用结构体
3. 试用箭头记号
4. 显示字符
5. 增加字体
6. 显示字符串
7. 显示变量值
8. 显示鼠标指针
9. GDT与IDT的初始化

**第6天 分割编译与中断处理**
1. 分割源文件
2. 整理Makefile
3. 整理头文件
4. 意犹未尽
5. 初始化PIC
6. 中断处理程序的制作

**第7天 FIFO与鼠标控制**
1. 获取按键编码
2. 加快中断处理
3. 制作FIFO缓冲区
4. 改善FIFO缓冲区
5. 整理FIFO缓冲区
6. 总算讲到鼠标了
7. 从鼠标接受数据

**第8天 鼠标控制与32位模式切换**
1. 鼠标解读（1）
2. 稍事整理
3. 鼠标解读（2）
4. 移动鼠标指针
5. 通往32位模式之路

**第9天 内存管理**
1. 整理源文件
2. 内存容量检查（1）
3. 内存容量检查（2）
4. 挑战内存管理

**第10天 叠加处理**
1. 内存管理（续）
2. 叠加处理
3. 提高叠加处理速度（1）
4. 提高叠加处理速度（2）

**第11天 制作窗口**
1. 鼠标显示问题
2. 实现画面外的支持
3. shtctl的指定省略
4. 显示窗口
5. 小实验
6. 高速计数器
7. 消除闪烁（1）
8. 消除闪烁（2）

**第12天 定时器（1）**
1. 使用定时器
2. 计量时间
3. 超时功能
4. 设定多个定时器
5. 加快中断处理（1）
6. 加快中断处理（2）
7. 加快中断处理（3）

**第13天 定时器（2）**
1. 简化字符串显示
2. 重新调整FIFO缓冲区（1）
3. 测试性能
4. 重新调整FIFO缓冲区（2）
5. 加快中断处理（4）
6. 使用“哨兵”简化程序

**第14天 高分辨率及键盘输入**
1. 继续测试性能
2. 提高分辨率（1）
3. 提高分辨率（2）
4. 键盘输入（1）
5. 键盘输入（2）
6. 追记内容（1）
7. 追记内容（2）

**第15天 多任务（1）**
1. 挑战任务切换
2. 任务切换进阶
3. 做个简单的多任务（1）
4. 做个简单的多任务（2）
5. 提高运行速度
6. 测试运行速度
7. 多任务进阶

**第16天 多任务（2）**
1. 任务管理自动化
2. 让任务休眠
3. 增加窗口数量
4. 设定任务优先级（1）
5. 设定任务优先级（2）

**第17天 命令行窗口**
1. 闲置任务
2. 创建命令行窗口
3. 切换输入窗口
4. 实现字符输入
5. 符号的输入
6. 大写字母与小写字母
7. 对各种锁定键的支持

**第18天 dir命令**
1. 控制光标闪烁（1）
2. 控制光标闪烁（2）
3. 对回车键的支持
4. 对窗口滚动的支持
5. mem命令
6. cls命令
7. dir命令

**第19天 应用程序**
1. type命令
2. type命令改良
3. 对FAT的支持
4. 代码整理
5. 第一个应用程序

**第20天 API**
1. 程序整理
2. 显示单个字符的API（1）
3. 显示单个字符的API（2）
4. 结束应用程序
5. 不随操作系统版本而改变的API
6. 为应用程序自由命名
7. 当心寄存器
8. 用API显示字符串

**第21天 保护操作系统**
1. 攻克难题——字符串显示API
2. 用C语言编写应用程序
3. 保护操作系统（1）
4. 保护操作系统（2）
5. 对异常的支持
6. 保护操作系统（3）
7. 保护操作系统（4）

**第22天 用C语言编写应用程序**
1. 保护操作系统（5）
2. 帮助发现bug
3. 强制结束应用程序
4. 用C语言显示字符串（1）
5. 用C语言显示字符串（2）
6. 显示窗口
7. 在窗口中描绘字符和方块

**第23天 图形处理相关**
1. 编写malloc
2. 画点
3. 刷新窗口
4. 画直线
5. 关闭窗口
6. 键盘输入API

**第24天 文件系统**
1. FAT格式
2. 读取FAT
3. 读取根目录
4. 读取子目录
5. 读取文件
6. 文件读取API
7. 定时器API
8. 取消定时器

**第25天 增加命令行窗口**
1. 蜂鸣器发声
2. 增加更多的颜色（1）
3. 增加更多的颜色（2）
4. 窗口初始位置
5. 增加命令行窗口（1）
6. 增加命令行窗口（2）
7. 增加命令行窗口（3）
8. 增加命令行窗口（4）
9. 变得更像真正的操作系统（1）
10. 变得更像真正的操作系统（2）

**第26天 为窗口移动提速**
1. 提高窗口移动速度（1）
2. 提高窗口移动速度（2）
3. 提高窗口移动速度（3）
4. 提高窗口移动速度（4）
5. 启动时只打开一个命令行窗口

---

以上是对原文本的优化，使其更加清晰、连贯和专业。希望对你有所帮助！