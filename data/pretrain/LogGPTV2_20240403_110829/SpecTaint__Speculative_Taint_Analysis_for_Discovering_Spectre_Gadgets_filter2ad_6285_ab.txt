emulator to simulate speculative execution and enable dynamic
taint analysis on top of it. Given a target program, we simulate
speculative execution of the CPU by dynamically forcing the
CPU emulator to execute code paths (speculative instructions)
which will not be executed at normal execution. We also
conduct tainting analysis on speculatively executed instructions
to detect Spectre gadgets.
Workﬂow. Fig. 2 illustrates the workﬂow of SpecTaint.
SpecTaint will go through two stages, the normal execution
stage and speculative execution stage. At the normal execution
stage, SpecTaint runs the target program with seeds generated
by external fuzzers to explore as many execution paths as
possible. SpecTaint will start to simulate speculative execution
3
III. DYNAMIC SPECULATIVE EXECUTION SIMULATION
In this section, we introduce our speculative execution sim-
ulation platform for Spectre gadgets detection. Our platform
extends the binary analysis platform DECAF [19], which is
built on top of the system emulator QEMU [14]. Speciﬁcally,
we will showcase how we utilize the system emulator to sim-
ulate speculative execution triggered by branch mispredictions
and how we explore speculative paths in a depth-ﬁrst manner.
A. Misprediction Simulation
Spectre V1 exploits out-of-bounds memory accesses in
speculative execution triggered by one or more mispredic-
tions of conditional branches. SpecTaint extends a system
emulator to simulate this behavior. In the system emulator,
pc stores the next instruction to be executed; in the case
of a conditional jump, it stores the jump target address. To
simulate the misprediction behavior of processors, SpecTaint
inverts the direction of the conditional
jump by replacing
the pc with the untaken target address. As a result, it will
execute the untaken path ﬁrst at a conditional branch and
enter the simulated speculative execution. Before it goes to
the untaken path, a state checkpoint is saved, which contains
the current state of the emulator, e.g., CPU registers. During
the simulated speculative execution, any modiﬁcation to the
memory will be logged. Speciﬁcally, the original value will be
saved before a speculatively executed instruction modiﬁes it.
When the speculative execution window is reached, the simu-
lated speculative execution will be terminated and the control
ﬂow transfers back to the last saved checkpoint. To maintain
the correctness of execution, the memory modiﬁcations will
be restored by writing the original values back to memory
and the CPU state will be restored with the saved state. As
for other conditions to terminate speculative execution, we
consider serialization instructions (e.g. SYSCALL, LFENCE,
etc.) listed by Mambretti et al. [35] and terminate the simulated
speculative execution when encountering these instructions.
Exception Handling. Exceptions can be very common during
the simulation of speculative executions. This is because a
CPU will execute a path which is not expected to execute.
A straightforward way for simulation is to terminate the
simulation and roll back whenever an exception is triggered, as
done in SpecFuzz [39]. However, it could miss Spectre gadgets
after the exception point along the speculative path, since
speculative execution is not supposed to be terminated when
hardware exceptions are raised in many CPU models [34]. The
speculative execution is expected to continue even if an excep-
tion occurs. To guarantee a precise simulation, our approach
does not roll back when an exception occurs, and instead forces
it to silently simulate this exception instruction without raising
any exception and continue speculative execution on the next
instruction.
To simulate this behavior, we extend the exception handler
of the system emulator. More speciﬁcally, we use a customized
exception handler to capture errors in speculative execution.
When an exception due to the permission violation (e.g., ac-
cessing kernel space from user-land) occurs during a simulated
speculative execution, we will silently simulate this exception
instruction without raising any exception and continue the
user-land execution after the exception instruction. By doing
Fig. 1: Architecture of SpecTaint.
Fig. 2: Workﬂow of SpecTaint.
when encountering a conditional branch and backup the cur-
rent execution state. When the speculative execution window
(SEW) is reached, SpecTaint will roll back the execution
state to the previously saved checkpoint. Like the rollback of
speculative execution in the hardware, our simulated rollback
also squashes all the side effects produced during speculative
execution. At the speculative execution stage, a Spectre gadget
detector conducts pattern checking on each speculative execu-
tion path to detect gadgets. To mitigate Spectre attacks, the
reported gadgets are forwarded to automatic serialization tools
(e.g., Speculative Load Hardening [18]).
Threat Model and Scope. We share the same threat model
with other Spectre gadget detection tools [39], [43]. That is,
our analyzed programs are benign but might be vulnerable.
We do not deal with malicious code that might deliberately
thwart or escape our analysis. Our approach can be used to
analyze the exploit code for Spectre gadgets in a malware
sample, but it is not our focus in this paper. In this work,
we focus on detecting gadgets in victim programs that can
be exploited by Spectre V1 attacks and leak sensitive data
through cache side channels. Meltdown-type attacks do not
require gadgets in victim programs and can be launched in
malicious programs. Therefore, they fall out of the scope of
this work. Our simulation focuses on Spectre V1 gadgets
detection at
the binary level. We do not simulate micro-
operations, instruction execution including instruction fetching,
decoding, etc., and irrelevant hardware structures such as the
reorder buffer (ROB). We only use the size of ROB to calculate
the speculative execution window (SEW).
4
so, SpecTaint is able to continue the simulation even when
exceptions occur. For other exceptions which SpecTaint is
not able to handle (e.g., caused by invalid jump target or
incomplete address translation) because the emulator does not
know where the next instruction to be executed is, SpecTaint
will make a state rollback and restore to the previously saved
checkpoint.
B. Exploration of Speculative Execution Paths
The path exploration involves two path types, the normal
execution (NE) path, and speculative execution (SE) path. To
explore the NE paths, we feed seeds generated by fuzzing
tools into the target program. When encountering a conditional
branching instruction, SpecTaint redirects the execution to
the untaken branch ﬁrst to explore SE paths. Crucially, CPUs
can perform nested speculative execution in a SE path. Since
we center on Spectre V1 which exploits the misprediction of
conditional branches, we take into account nested speculative
executions triggered by conditional branches. To simulate this
behavior, SpecTaint explores SE paths for each conditional
branch in NE paths and SE paths within SEW. In other words,
SpecTaint explores the speculative paths in a depth-ﬁrst
manner. During the exploration, SpecTaint monitors whether
any termination condition is met, and restore to the last saved
state if there is any.
Execution State Rollback. It is crucial to restore the execution
state after the speculative execution is terminated, so as to
maintain the correctness of program execution. An execution
state includes the state of all the CPU registers and used mem-
ory regions. The execution state rollback has two operations,
state backup and resume. For a conditional branch, SpecTaint
ﬁrst backups the current execution state before simulates
speculative execution on that branch. When the SE simulation
is terminated, SpecTaint resumes the backup state by resetting
the current execution environment with the backup state. To
backup an execution state, SpecTaint saves the emulator state,
e.g., all registers. For memory, it is too heavyweight to save
the entire memory, so we adopt a lightweight “copy-on-write”
approach. More speciﬁcally, SpecTaint keeps track of memory
regions that are modiﬁed during speculative execution. Before
the memory regions are modiﬁed, SpecTaint saves the original
values. When making a state rollback, SpecTaint writes the
original values back to the memory in a reversed order as
they are modiﬁed. Moreover, SpecTaint uses dynamic taint
tracking to detect Spectre gadgets. Thus,
it also restores
taint information that is created during simulated speculative
execution. More details are discussed in Section IV-A.
Path Exploration. The path exploration considers two types
of path coverage, the NE and SE path coverage. The path
coverage on normal execution is used to explore more paths
during the normal execution. We utilize fuzzing techniques
such as AFL [2] to improve path coverage on normal execu-
tion. The SE path coverage is to measure how many speculative
paths are covered. The goal is to explore speculative execution
comprehensively so as to avoid missing Spectre gadgets on
uncovered speculative paths.
The switch point is the instruction that transfers the exe-
cution mode from NE to SE. SpecTaint treats a conditional
branch as a switch point and conducts the SE simulation. Once
Algorithm 1: Speculative Path Exploration Algorithm.
: Entry point: pc; SEW size: w; Backup state
Input
set: saved state;
Output: gadgets: gadget set
gadget set ← ∅ ;
inst count ← 0;
Function explorer(pc, w):
while inst count < w do
if is terminator(pc) then
state = saved state.pop();
restore(state);
pc = state.pc;
explorer(pc, state.insn count);
end
if is branch(pc) then
saved state.push(checkpoint(pc));
foreach t ∈ get targets(pc) do
explorer(t, w − insn count);
end
end
execute(pc);
if gadget checker(pc) then
gadget set ← pc;
end
pc ← next pc;
inst count ++;
end
return;
entering the speculative execution mode, SpecTaint explores
each conditional branch and its targets for the speculative
exploration. The speculative path exploration algorithm is
shown in Algorithm 1. We use pc to represent the current
instruction, and gadget set to store the locations of detected
Spectre gadgets. The speculative execution path exploration
is a depth-ﬁrst traversal on the control ﬂow graph of the
program at the speculative execution mode. When exploring
speculative paths, SpecTaint will ﬁrst check whether the
current execution path has reached the SEW limit w, or any
other termination conditions, and if so, restore to the last saved
state. If the current instruction at pc is a conditional branch,
SpecTaint will simulate a misprediction by walking through
both targets of this branch instruction. Before exploring each
target, SpecTaint will ﬁrst backup the state and push it into a
stack saved state. After ﬁnishing the path exploration on a
target (e.g., reaching the SEW limit), SpecTaint will resume
the last saved state and continue for the next target. Along
with the exploration, SpecTaint conducts the gadget pattern
checking on the current instruction. If it matches, SpecTaint
will save this gadget into gadget set and continue exploration
until termination conditions are met.
Mitigating Path Explosion. As presented in our evaluation,
the length of each speculative execution path is bounded by the
SEW limit (see TableV). However, there can be a large number
of paths within this SEW limit in the worst case. Therefore,
we may still encounter a path explosion problem. According
to the analysis of our evaluation dataset, we identify two kinds
of cases where the exponential growth of paths may happen:
loops and recursive functions. We propose our approach to
5
address the path explosion issue. That is, SpecTaint has a
threshold on how many times simulation can happen on the
same branch. In real hardware, it is unlikely that speculative
execution can be triggered by the same branch repeatedly.
After iterations, the same branch will not be mispredicted,
since its memory value are very likely to be stored in registers
or be cached after iterations [35]. As demonstrated by Kocher
et al. [29], executing the same branch ﬁve times is enough to
train the branch predictor. Therefore, we also set the threshold
to ﬁve, and SpecTaint will not simulate speculative execution
repeatedly on the same branch if it reaches the threshold.
We admit that this approach might miss gadgets in paths we
have not explored yet. More details about false negatives are
discussed in Section VII.
IV. SPECTRE GADGET DETECTION
This section addresses how we detect Spectre gadgets
during dynamic speculative execution simulation. More specif-
ically, we ﬁrst formalize the Spectre gadget deﬁnitions and then
describe how we check the patterns to detect potential Spectre
gadgets on speculative paths.
A. Dynamic Taint Tracking
it
is essential
If a variable is data-dependent on user inputs, we con-
sider this variable is under an attacker’s control. To ﬁnd
exploitable Spectre gadgets,
to ﬁnd gadgets
that can be controlled through external inputs. Therefore, in
order to capture this control relation, we utilize dynamic taint
analysis to trace variables that are data-dependent on external
inputs during execution. To this end, we label user inputs
as taint sources and observe how the data ﬂows from user
inputs. Speciﬁcally, we utilize the whole-system dynamic taint
analysis shipped with the platform we extend, DECAF [19],
and perform taint propagation along with the execution of the
program. DECAF’s tainting rules have been formally veriﬁed
to be sound (guarantee of no under-tainting at
instruction
level), and most of them have also been veriﬁed to be precise
(guarantee of no over-tainting). The details are documented in
this paper [24]. We conduct dynamic taint analysis on both
NE and SE paths. Performing taint analysis on NE paths is
to ensure the propagation of taint labels in normal program
execution; performing taint analysis on SE paths is to facilitate
the gadget checker to detect exploitable Spectre gadgets. When
the SE path is terminated (e.g. when reaching SEW size), the
CPU state and memory modiﬁcations will be restored, so as the
taint information. When restoring to the previously saved state,
we also clean the variables which are marked as tainted during
the simulated speculative execution, in order to maintain the
correctness of taint propagation.
B. Spectre Gadget Modeling
In this section, we formulate the gadget patterns for two
types of Spectre V1 gadgets, Bounds Check Bypass (BCB)
and Bounds Check Bypass Store (BCBS). To facilitate the
discussion, we deﬁne the following notions before giving the
Spectre gadget deﬁnitions.
• c is a conditional branch instruction.
• T (c) denotes a set of instructions in a speculative execu-
tion trace from c.
6
• m(i ) denotes i is a memory read instruction.
• str (i ) denotes i is a memory write instruction.
• [i ] denotes the memory value accessed by instruction i.
• dep(i , j ) denotes instruction i is data dependent on j .
• t(i ) denotes the operands of instruction i is tainted.
• δ denotes the size of speculative execution window.
BCB Gadget. In BCB attacks, the speculative load instruction
is under an attacker’s control, thus the attacker could read
arbitrary values from memory. Then another load instruction
is required to load the secret-indexed memory location with
the intention of leaking the secret. To leak the secret through
the cache side channel, the leak instruction has to use the
loaded secret as the index to read from memory, thus the
secret can be retrieved by monitoring the cache line state
changes. In general, the BCB gadget involves a set of array
operations and the index in the latter array operation is data-
dependent on the value from the former array [34]. Essentially,
the ﬁrst array access is responsible for loading secrets, and the
second one is responsible for leaking secrets. However, not
all the code sequences matching such patterns are considered
as a BCB gadget. The BCB gadget demands the index of the
former array access should be under the attacker’s control, such
that the attacker could read arbitrary values from memory in
the target program space by carefully manipulating the input
values. To capture this control relation, we utilize dynamic
taint analysis to track data ﬂow from external inputs, which
is discussed in IV-A. Suppose the speculative execution starts
from a conditional branch c, and we formalize our BCB gadget
pattern as Φbcb(c), and its deﬁnition is as follows:
Φbcb(c) := ∃i , j ∈ T (c).m(i ) ∧ m(j ) ∧ dep(j , [i ])
∧t(i ) ∧ |c, j| < δ
(1)
BCBS Gadget. Unlike BCB gadget, BCBS uses a speculative
write (SW) to modify arbitrary memory locations. In BCBS
attacks, attackers control the index of an array that would
access out of boundary memory during speculative execution.
As a result, attackers can modify an arbitrary memory location
(e.g., return address) by manipulating the index of the array.
We formalize our BCBS gadget pattern as Φbcbs (c), and its
deﬁnition is as follows:
Φbcbs (c):= ∃i ∈ T (c), str (i ) ∧ t(i ) ∧ |c, i| < δ
(2)
In both patterns, we leverage dynamic taint analysis to
determine whether the index of an array is under attackers’
control or not. If an instruction i is tainted, we consider i is
under attackers’ control, and t(i ) is set to be true.
Gadget Classiﬁcation. Our gadget patterns are similar to
what is proposed in oo7 [43]. The primary difference lies
in whether the branch instruction is tainted or not. Oo7 [43]
considers that the branch should be tainted and controlled by
the inputs. Thus attackers can poison the branch predictor to
cause intentional misprediction of that branch by executing the
victim program with carefully-constructed inputs. However, as
discovered by Canella et al. [17], the branch prediction buffers
are shared and commonly indexed by the virtual address of the
branch instruction, thus can be poisoned from another attack-
controlled process by executing a congruent branch with the
same virtual address. Based on this ﬁnding, Spectre gadgets
can be exploited in the same address space (i.e., intra-process)
or across address spaces (i.e., cross-process) [17]. Therefore,
only considering tainted branches will exclude cross-process
gadgets. Our gadget patterns cover both situations:
if the
speculative execution is triggered by a taint conditional branch,
we will mark this gadget as an intra-process Spectre gadget;
otherwise,
this gadget will be marked as a cross-process
Spectre gadget.
C. Gadget Detection