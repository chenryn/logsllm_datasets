user space, kernel space, and hardware devices is one of the
main goals of ION. While some speciﬁc heap types such as
SECURE CMA may deny any access from user space, there
is no general restriction in the ION framework; therefore
users can allocate memory from most heaps and map them
into user space for read and write operations. This can lead
to two diﬀerent security problems:
System crash due to hardware protection. Some
heaps’ memory regions can be protected by hardware secu-
rity mechanisms like TrustZone [4] so that any access from
untrusted world will cause a protection exception which usu-
ally leads to a system crash or reboot. Unfortunately ION
buﬀer sharing unexpectedly makes such protected heaps ac-
cessible to untrusted world apps, as will be shown in §6.
Sensitive information leakage.
ION memory are
drawn from various memory heaps, whose allocation func-
tions correspond to low-level kernel functions such as kmal-
loc() and dma_alloc_*(). By default, many of them do
not zero the newly allocated pages for performance reason-
s. The original assumption was that such pages will never
get mapped to user space directly and hence safe to use in
kernel. Unfortunately it is no longer correct with the intro-
duction of ION that exports such heaps to user space for
buﬀer sharing. We conﬁrm that it is far from rare cases
that buﬀers allocated from ION heaps contain dirty pages.
A large number of Android devices, including the newest
models like Nexus 6P, have one or more ION heaps failing
to clear allocated buﬀers before handing them to user space,
which eventually enables any third-party app to access sen-
sitive information leaked from kernel, system services, and
user applications.
3.2.1 Root Cause Analysis of Unzeroed Pages
After careful investigation, we summarize two main rea-
sons for unzeroed pages:
Customization. ION by design has good extendability
and supports customization, as described in §1. Diﬀerent
vendors can have their own choices about which heap types
to use and how they will be implemented. They can also
implement new heap types by themselves as shown in Ta-
ble 1. Thus, even though all the default heap types have
zeroed their allocated buﬀers in AOSP common branch k-
ernels since 3.10, in practice, almost all Android devices are
shipped with customized ION implementation which do have
the dirty page problem.
Kernel memory allocation functions with compli-
cated behaviours regarding buﬀer zeroing. Unlike
the relatively simple and limited interfaces for user-space
memory allocation like malloc(), there exist many diﬀerent
memory allocation interfaces in kernel space, which will be
directly used by various ION heap types. malloc() typical-
ly involves the system call brk() and mmap() where virtual
pages are returned ﬁrst. Upon accessing such pages by the
program, a page fault occurs which triggers the OS to lo-
cate a physical page and map the accessed virtual page to
it. Due to the obvious security risks, the OS always zeroes
the physical page before mapping it to user space (unless it
is a page recycled from the same process).
In contrast, other kernel memory allocation functions are
largely undocumented, and not well understood.
diverse,
They generally fall into three categories:
1) Guaranteed zeroing. Some interfaces, such as kzal-
loc(), are guaranteed to zero the allocated memory. They
do not pose any threats even when exposed to user space
through ION.
2) Expected to zero but actually may not. Some func-
tions will decide whether to zero the memory based on
some function parameters like GFP ZERO ﬂag used in
alloc_pages() of buddy allocator. However, there is
no guarantee that the zero operation will be performed.
In our analysis, we ﬁnd that some functions,
like ar-
m64_swiotlb_alloc_coherent(), do accept a parameter de-
ciding whether to zero the allocated buﬀer, but the function
implementation simply does not honor such a parameter at
all. A similar issue was reported previously in [9].
3) Undecidable and undocumented zeroing behaviour.
There also exist other functions where it is not ob-
vious whether
zeroed.
gen_pool_alloc_aligned() is one such function that is usu-
ally used by CARVEOUT heaps.
returned pages will be
the
The confusing behaviors of various kernel memory allo-
cation functions makes it diﬃcult for developers to decide
whether they should zero the buﬀer after invoking any k-
ernel memory allocation function. On one hand, failure to
zero the buﬀer may cause information leakage, while on the
other hand, repeated zeroing operations may aﬀect the over-
all performance, especially on embedded platforms. As an
example, we ﬁnd some buﬀer zeroing logic commented out
intentionally for several ION heap types according to the
kernel source code for Huawei Mate 8, a popular device run-
ning Android 6.0. We suspect that developers are trying to
avoid the extra performance penalty, but the end result is a
severe security ﬂaw as will be demonstrated in §6.
4. METHODOLOGY
In this section, we will present our methodology to sys-
tematically test and discover the vulnerabilities uncovered
in §3.
4.1 Problems Introduced by Uniﬁed Interface
The goal is to test whether a third-party app can indeed
occupy memory from diﬀerent heaps entirely to cause DoS
attacks. Further, we want to understand what speciﬁc sys-
tem functionalities can be targeted using which heaps. To
this end, we design a simple runtime testing procedure as fol-
lows: given an Android device, we ﬁrst enumerate all avail-
able ION heaps (declared through the Device Tree ﬁle [5]),
identify their type and size information; we then try to al-
locate buﬀers from them with an ION memory probing app
we develop. Once we ﬁnd a heap able to provide memory to
our app, we will further try to exhaust all available memory
resources remained in the heap. This can be automatical-
ly done by our probe program, which will try to allocate a
buﬀer as large as possible in each iteration of a loop and ter-
minate the loop if no more memory can be allocated. The
largest available buﬀer size in each iteration is decided by
an eﬃcient binary-search style probing. For unlimited sized
SYSTEM heaps, we will also try to allocate as much mem-
ory as we can, until exceptions occur, such as our process
getting killed by low memory killer.
As soon as an ION heap is exhausted, we will monitor
system behaviors to see whether there will be any anoma-
lies. Usually the heap name will give a good indication about
what system behaviors to watch, for example, the name “au-
dio” suggests that the heap should be used for audio data
processing, then we will focus on the issues such as whether
the system can still play sound normally. For SYSTEM
heaps, we mainly focus on questions like whether the sys-
tem performance will be aﬀected or whether there are other
processes get killed by low memory killer. If kernel and plat-
form source code for the target device is available, we will
also try to take a reference of it to ﬁgure out how the ded-
icated ION heaps will be used, which can help us ﬁnd the
potential DoS problems more eﬃciently and precisely.
4.2 Problems Introduced by Buffer Sharing
If a heap not only allows our app to allocate memory
from it but also enables it to access the allocated buﬀers,
then we will ﬁrst attempt to access the buﬀers.
In some
cases, a simple memory read operation can already cause a
system crash as described in §3. If the buﬀer can be accessed
without causing exceptions, we will then determine whether
the buﬀers from the current heap may contain dirty pages.
This can be done in two ways:
Blackbox testing. We can simply exhaust the free s-
pace of a certain heap and read the allocated buﬀers to see
whether they contain any non-zero bytes. To avoid the cases
where the heap may not be populated by other services yet,
e.g., camera has not been used yet and therefore no data
has been stored in the heap, we could write to the heap ﬁrst
and later on read from it again from another app to see if
the data remain. The challenge with such a blackbox test-
ing approach is that the behaviors can be dependent on the
system state and the parameters we pass through the ION
interface, which may not be easy to determine; this can lead
to inaccurate assessments. In addition, blackbox testing also
requires access to actual devices.
Program analysis. Alternatively, if the kernel source
code for an Android device is available, which usually is
the case due to open source licensing requirements, we can
in fact accurately determine this via static analysis on the
source code. As discussed before in §3.2, since the behav-
iors of kernel memory allocation functions are complex and
in many cases not well documented, program analysis can
automate the process and greatly reduce the manual eﬀort.
Static Taint Analysis on Buffer Zeroing
4.2.1
To fulﬁll this task, we design and implement a novel static
taint analysis tool to analyze the zeroing behaviors of mem-
ory allocation functions. Our design is based on three key
observations:
(1) Most, if not all, memory allocation functions will take
a parameter indicating the size of the requested memory.
We consider such “size” parameters as taint source.
(2) Usually the zeroing operations will be performed
through some common utility functions such as memset(),
which will be considered the taint sink.
(3) When buﬀer zeroing operations occur in memory al-
1 allocate_1(…,size,...){
2   order=log_2(size);
3   some allocation operations;
4   memset(addr,0,2^order);
5 }
1 allocate_2(…,size,...){
2   some allocation operations;
3    for(i=0;i<size;i+=4096)
4        memset(addr+i,0,4096);
5 }
Figure 2: Data dependency
Figure 3: Control dependency
location functions, the amount of memory zeroed should be
dependent on the “size” taint source.
In other words, the
taint source should propagate to the sink to indicate a true
buﬀer zero operation.
The lack of an information ﬂow from the source (“size”) to
sink (functions such as memset()) in an ION heap allocation
function indicates that the function does not zero the buﬀer
before returning it to user space. It is worth noting that the
analyzed memory allocation functions may include zeroing
operations for some internal or temporary data structures
other than the allocated buﬀer, in which case may cause
confusion. Our intuition is that such data structures will
not be dependent on the “size” taint source and therefore
can be eliminated automatically.
Design Considerations. Even though the formulated
problem is clearly deﬁned, there are still several compli-
cations that need to be carefully considered. First, taint
propagation typically has two forms: data dependency (ex-
plicit ﬂow) and control dependency (implicit ﬂow). We need
to decide whether to track data dependency alone or both.
Most static taint analysis tools focus on only data depen-
dency [22, 12, 17, 26]. However, in the case of memory
zeroing operations, the decision may not be so straightfor-
ward. We illustrate two real world examples (simpliﬁed) we
encounter in Figure 2 and Figure 3. allocate_1() round
up the requested size to the nearest power of 2 before al-
locating a buﬀer and memset()ing it. The “order” variable
is data dependent on the “size” taint source; therefore, it is
suﬃcient to consider data dependency only in this case. In
contrast, allocate_2() decides to invoke memset() to zero
the allocated buﬀer page by page. No data dependency ex-
ists from “size” to the parameter of memset().
Instead, a
tainted control dependency exists from “size” to memset()
as the loop condition is dependent on “size”. In this case, we
will need to follow all function calls after meeting a taint-
ed control dependency so as to not miss any sink functions
(e.g., memset()). However, such strategies can incur false
positives, as we will show in §5.3. We acknowledge that it is
an inherently diﬃcult problem to propagate taint through
control dependencies, as is recognized in prior work [13].
As an alternative solution, manual intervention can be used
to determine the propagation rules upon each tainted con-
trol dependency. We give a complete walkthrough of the
methodology in §5.3.
Second, it is possible that the ION memory allocation
function may internally invoke diﬀerent low-level kernel
memory allocation functions (e.g., fall back to a diﬀerent
function if a previous one fails). Therefore, even if there
exists an information ﬂow from source to sink (for certain
program paths), it does not rule out the possibility that an-
other program path does not zero the buﬀer. To address
this issue, our tool will output the unique call chains as-
sociated with the taint paths and guide the developer to
look for other low-level memory allocation functions; our
assumption here is that there must exist a diﬀerent mem-
Kernel source code
Pre-process
Intermediate files
Filtering
Related functions to
the target function
Summary based
taint analysis
Un-zeroed
paths
Inference
TP  paths  and  call 
chains, constraints
Exclude FP results
Specify target
function
Developers
Function summary
Generating paths
Zeroed  paths,  call chains 
and their consraints
Figure 4: Static taint analysis tool workﬂow
ory allocation function for each type of low-level memory
allocator. Depending on the system state, or the result of
an earlier memory allocator, ION may choose to invoke a
diﬀerent memory allocator (again, in the form of a separate
function). With this assumption, the tool can output the
callees for each memory allocation function in the tainted
call chain. If developers recognize any callee that also ap-
pear to be a memory allocation function (and takes in a
tainted argument), they can query the taint analysis result
to see if the callee has encountered any zero operation down
the line. If so, the tool simply repeats the same procedure
to look for additional candidate callees. Otherwise, we con-
clude that there does exist a program path that performs
memory allocation without buﬀer zeroing. In §5.3, we use
the SYSTEM heap on Nexus 6P as a case study to explain
the methodology in detail.
Third, theoretically buﬀer zeroing can also occur during
memory release functions, e.g., free(). In practice, we ﬁnd
that ION heaps always have relatively simple logic in mem-
ory release functions and they almost never zero buﬀers in
them. This could be due to the fact that memory alloca-
tion functions can opportunistically skip zeroing operations
if the pages are from the same process, e.g., memory allocat-
ed through malloc(). Also, if the released memory is not be
reused afterwards, the zeroing is simply wasted. Therefore,
in our analysis, we focus on analyzing memory allocation
functions, which are orders of magnitude more complex and
may or may not contain zeroing operations.
Implementation. We implement the static taint analy-
sis based on STAC [7], an open source static taint analysis
tool. The workﬂow is described in Figure 4. Given the
kernel source code of a speciﬁc Android device, we ﬁrst per-
form pre-processing using GCC to produce .i ﬁles with ex-
panded macros and include ﬁles. Then we perform ﬁltering
to exclude the functions that are never reachable from the
ION functions. Finally, we implement a ﬂow-sensitive taint
analysis engine that takes in the entry function, i.e., ION
memory allocation functions, as well as the source and sink.
When the taint engine ﬁnishes the computation, we output
the taint paths where the source “size” can successfully prop-
agate to sinks (e.g., memset()). Finally, we group the taint
paths into call chains for developers to inspect and conﬁrm.
Based on the true positives, developers can then follow the
procedure described above to locate unzeroed paths.
5. EVALUATION
Devices
Platform Kernel
A1
A2