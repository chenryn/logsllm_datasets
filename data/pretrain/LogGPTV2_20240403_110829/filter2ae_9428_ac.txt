构造闭合payload,成功get一枚反射性xss
    ?id=">
同样的方法
##### **/wap/shang.php** **反射型xss**
同样的漏洞原理，这里就不赘述了，直接看效果
payload：
    ?fee=
##### /wap/movie.php
##### /wap/tv.php
##### /wap/zongyi.php
##### /wap/dongman.php 反射型xss
这几个文件都有同样的xss漏洞，形成原理也一样，就拿其中一个进行分析。查看movie.php 里的内容。
    #/wap/movie.php
     href="?m=/dianying/list.php?rank=rankhot">最近热映 
      href="?m=/dianying/list.php?rank=createtime">最新上映   
         href="?m=/dianying/list.php?rank=rankpoint">最受好评
发现了$_GET['page']和$_GET['m']变量，并引入转义文件进行转义防注入处理（sql）,看来有戏，找找输出：
根进getpageHtml函数
文件在system/function.php，仔细查看发现它并没有对传参进行完整的过滤，因此也就造成了XSS漏洞，但还是没找到输出点，怎么办？
没办法，只好结合黑盒方法，访问页面，关键字查找输出点了：访问：
    http://127.0.0.1//wap/movie.php?m=aaa
然后ctrl+F,查找（?m=aaa）,终于发现输出点：
    123
构造闭合，打一打：
    payload: ?m=">
成功弹窗，反射型xss到手
##### /book.php 和/wap/book.php 存储型xss
查看文件，关键代码：
        .....
        .....
        .....
     说：
对传入的$_POST['content']变量经过null_back()、addslashes()等方法进行处理，又引入转义文件转义处理，同样的情况我们在之前的
** _/youlian.php 存储型xss_** 部分已经提到过，即经过一系列处理，该变量实际上进行了一次我称之为“ **负负得正**
”的转义操作，相当于没有防范，又和后端数据库进行了交互，所以此处就形成了一个存储型xss,访问该文件，构造闭合，形成payload进行攻击尝试：
再想，这里是留言板，那么后台应该也会引用这里的留言内容，方便管理员进行管理，因此查找到后台对应文件：
##### /admin/cms_book.php 存储型xss
访问，果然弹窗。
具体代码：
    。。。。
    。。。。
    。。。。
    " />                      
                                    ">
逻辑就是将之前存在数据库中的留言直接取出，引入对xss无用的转移文件处理，检查登录状态，之后直接将取出的数据输出，这就复合上面的分析，形成了一个存储型的前台后台通吃的xss漏洞。
##### /wx_api.php 反射性xss
    public function valid()
        {
            $echoStr = $_GET["echostr"];
            if($this->checkSignature()){
                echo $echoStr;
                exit;
       }
接收$_GET["echostr"]变量，经checkSignature()方法处理后，直接输出,而checkSignature()方法
    private function checkSignature()
        {
            // you must define TOKEN by yourself
            if (!defined("TOKEN")) {
                throw new Exception('TOKEN is not defined!');
            }
            $signature = $_GET["signature"];
            $timestamp = $_GET["timestamp"];
            $nonce = $_GET["nonce"];
            $token = TOKEN;
            $tmpArr = array($token, $timestamp, $nonce);
            // use SORT_STRING rule
            sort($tmpArr, SORT_STRING);
            $tmpStr = implode( $tmpArr );
            $tmpStr = sha1( $tmpStr );
            if( $tmpStr == $signature ){
                return true;
            }else{
                return false;
            }
        }
其中并没有对变量的具体内容的过滤，因此这就是一个简单的反射型xss:
payload: 成功弹窗
    ?echostr=&signature=da39a3ee5e6b4b0d3255bfef95601890afd80709
xss找了这么多，很多都是在重复造轮子（这个cms版本很老），没意思，找找别的漏洞看看：
#### 验证码重用
##### /admin/cms_login.php
在登陆界面检验session和传入的verifycode是否相等，如果访问失败，就会会进行刷新跳转，然后重新执行一次JS代码，
搜索关键词，看看这个js是干嘛的，在 **../system/verifycode.php** 文件中，发现
js引用该文件生成四位随机数作为验证码，这里有一点就是： ** _burp默认不解析js_**
，而文件中也没有时间限制，那么我们就可以用burp抓包，摒除js，重用该验证码对后台密码进行爆破，实现一下：
添加爆破位置
我这里为了演示效果，因此字典里我就随便写几个密码，把正确密码放进去，进行爆破演示
可以看到，成功爆破出后台密码123456.
#### 上传漏洞
到这里，我能找到的关于这个cms的漏洞就结束了，另外，在网上看到师傅们还发现有一个上传漏洞，分析我就不献丑了，链接给出来，大家可以参考一下
[https://blog.csdn.net/qq_44713013/article/details/122187203?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.pc_relevant_default&spm=1001.2101.3001.4242.1&utm_relevant_index=2](https://blog.csdn.net/qq_44713013/article/details/122187203?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.pc_relevant_default&spm=1001.2101.3001.4242.1&utm_relevant_index=2)
#### 最后回顾
  1. 这次这个cms代码审计，整体比第一次要熟悉了不少，审出了一些sql和存储xss漏洞，还是不错的。但是同时，也暴露了很多问题，比如php代码功底不够，对很多函数一知半解，甚至完全没有认识，这就导致不停的查查查，效率狂降，心态爆炸。
  2. 另外，这次审计中还留下了两个问题有待研究，去好好学习一下，之后有机会一定还要再来回顾这个cms的审计，期待可以发现更多的问题。
  3. 还有，有一点想法，程序员在写代码结构的时候一定要注意统观全局，否则就容易出现这个cms中“ **负负得正** ”逻辑错误，导致防护到最后白干一场。