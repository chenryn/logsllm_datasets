图9: ITU T.30标准中的协议图
图中的Phase B负责发送者和接收者之间的握手，Phase C是根据协商说明传输的数据帧。  
帧是通过电话线使用HDLC帧发送的，如图10所示。
图10: ITU T.30标准
## 寻找攻击向量
### 发送TIFFs
传真简单地发送TIFF文件是一种误解。事实上，T.30协议会发送页面，而phase B阶段协商的参数就包括页面长度和宽度，phase
C用于传输页面的数据行。也就是说最终的输出是一个含有IFD标签的tiff文件，IFD标签会被用于构建握手用的元数据。.tiff文件之后会含有电话线上接收的页面行。
虽然tiff分析器有许多的漏洞，这些漏洞主要存在于分析IFD标签的代码中。这些标签是大引起自己构建的，唯一的处理过程是打印过程中打开压缩内容时的页面内容。
### TIFF压缩
但tiff格式使用的压缩方法有许多的名字，因此需要首先找出来。下面是一个基本的映射关系：
  * TIFF Compression Type 2 = G3 without End-Of-Line (EOL) markers
  * TIFF Compression Type 3 = G3 = ITU T.30 Compression T.4 = CCITT 1-D
  * TIFF Compression Type 4 = G4 = ITU T.30 Compression T.6 = CCITT 2-D
压缩方法是使用对黑白代码使用固定哈夫曼表的基本Run-Length-Encoding (RLE)方案。  
研究人员检查了T.4和T.6的解压缩代码，并没有发现什么可以利用的漏洞。
### T.30扩展
在pahse B猫会交换能力，所以可以找出支持的最佳传输方式。研究人员下了一个脚本对这些使用ITU T.30标准的消息进行了语法分析，结果如图11：
图11: 分析目标的DIS能力
看起来研究人员测试的打印机支持ITU T.81
(JPEG)格式，即可以发送彩色传真。研究人员在分析处理彩色传真的代码时发现接收的数据保存为.jpg格式了。与tiff文件相比，.jpg文件中接收者会构建header。  
研究人员发现在固件中，接收的内容会在没有过滤的情况下，复制到文件中，这也给了攻击者一个攻击入口。
### 打印彩色传真
当目标打印机接收到一个彩色的传真，就会在不做任何检查的情况下复制内容到一个.jpg文件（`%s/jfxp_temp%d_%d.jpg`）中。而接收传真只是第一步，打印时打印机模块首先需要确认接受文档的长度和宽度，然后需要发送进行基本的语法分析。
## JPEG分析器
因为一些原因，固件开发者会重新在主流的开源项目中实现这些模块。也就是说，开发者实现了自己的JPEG分析器。从攻击者的角度看，这更像是一个赌注，因为在复杂的文件格式分析器中找出漏洞也是非常有可能的。  
JPEG分析器非常简单，工作原理为：
  1. 检查文件开始Start Of Image (SOI) marker: 0xFFD8
  2. 循环分析每个支持的标记
  3. 完成后，返回相关数据对调用者
### CVE-2018-5925 –缓冲区溢出
根据标准，COM maker（标记）（0xFFFE）是可变大小的文本域，表示文本评论。这也是找到的第一个漏洞，根据标准传真接收器会丢弃maker（标记）。  
研究人员发现了漏洞，如图12：
图12: COM marker漏洞反编译的代码
分析模块会对2字节长的域进行分析，并复制文件中的数据到全局数组中。数组中每个记录大小为2100字节，而长度域为64KB，这就有大量可控制的缓存溢出。
### CVE-2018-5924 – 分析DHT marker基于栈的缓存溢出
因为第一个漏洞不支持标准的编译实现，所以研究人员继续寻找marker相关的其他漏洞。DHT marker
(0xFFC4)定义了特殊的Huffman表，用于解码文件的数据帧。  
函数比之前COM maker漏洞还简单一点，如图13所示：
图13: DHT marker漏洞反编译的代码
  * 这里有一个读取16字节数据的循环，因为每个字节表示一个长度域，所有的字节加起来就是整个的长度变量；
  * 一个全0的256字节的本地栈缓存会被用于之后的运行过程；
  * 第二个循环会使用之前的长度域，从文件中拷贝数据到本地栈缓存；
代码中的漏洞就是：`16 * 255 = 4080 > 256`，所以攻击者就有了没有任何使用的字母限制的可控的基于栈的缓存溢出了。
## 构建漏洞利用
研究人员最终决定选择DHT漏洞，因为比较容易实现。
### 自动化Payload – 实现图灵机
研究人员使用了用于调试漏洞利用的基于网络的加载器，当前攻击向量的主要优势在于payload可以保存在发送的JPEG文件中。因为不会对传真的内容进行任何检查，就可以把payload保存在发送的文档中而不用担心JPEG文档是否合法。
而且文件的文件描述file descriptor
(fd)也保存在全局变量中，因此研究人员编写了基于文件的加载器。加载器可以从文件中读取payload，并加载到内存中。然后当payload需要用输入执行任务时，就会从文件中读取输入并执行相应的指令。
## 在网络上传播
控制打印机已经完成了，但是如果可以控制打印机所在的计算机网络，就可以完成更多的动作。所以研究人员使用了Eternal
Blue漏洞来接管打印机所在的计算机网络。
应用和实现的payload有以下功能：
  1. 控制打印机的LCD 屏，证明完全控制了打印机；
  2. 检查打印机是否联网；
  3. 使用Eternal Blue和Double Pulsar攻击所在网络中的计算机设备，并完全控制。
这样，就可以在打印机所在的计算机网络上传播攻击者的payload了。
## 总结
研究人员分析了ITU T.30传真协议存在的安全漏洞，以HP Officejet Pro
6830多功能打印机为测试机证明了传真协议实现过程中的安全风险。以一根电话线，通过发送传真来完全控制打印机，之后在打印机所在的网络中传播payload。
本文也给各打印机厂商以启示，可能会改变现代网络架构处理网络打印机和传真机的方式。未来，传真机（打印机）也会成为入侵企业网络的攻击向量之一。
**参考文献**
  1. HP Security Bulletin – 
  2. ITU T.30 (Fax) – 
  3. ThreadX – 
  4. Green Hills – 
  5. CVE 2017-9765 (Devil’s Ivy) – 
  6. Scout Debugger on Github – 
  7. HP Digital Fax – 
  8. CCITT (Huffman) Encoding – 
  9. Huffman/CCITT Compression in TIFF – 
  10. ITU T.81 (JPEG) – 
  11. ITU T.4 – 
  12. JPEG Markers – 
  13. libjpeg – 
  14. Eternal Blue check point research – 