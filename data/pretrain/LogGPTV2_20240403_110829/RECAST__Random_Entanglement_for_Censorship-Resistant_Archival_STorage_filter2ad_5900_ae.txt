d
L
Z
+
L
Z
+
10
n
-
(
4
,
5
,
2
,
6
)
n
-
(
1
,
5
,
2
,
3
)
a
t
a
8
4
0
e
g
a
r
o
S
t
 0  2  4  6  8  10  12  14
% Disk Failures
Fig. 13. Percentage of documents in the archive that can be served as metadata
is rebuilt by crawling through the storage nodes.
Requested
Sent
Fig. 15. File availability as dependent on device failures (on the left) using a
certain storage space (on the right). Simulation of a system with 188 nodes and
196664 documents [38]. We assume that ﬁles are compressed before storing
them in RECAST.
nu-(1,10,2,3)
nu-(1,10,2,3)-r10
)
B
k
(
d
e
r
r
e
f
s
n
a
r
t
a
t
a
D
 1400
 1200
 1000
 800
 600
 400
 200
 0
)
%
(
s
t
n
e
m
u
c
o
D
e
b
a
l
1
2
3
# blocks to reconstruct
l
i
a
v
A
 100
 99.998
 99.996
 99.994
 99.992
 99.99
 99.988
 0
 5  10  15  20  25  30  35  40  45  50
% Disk Failures
Fig. 14. Bandwidth costs to repair a 64kB document originally stored in an
instance of RECAST hosting a n-(1, 10, 2, 3) archive.
Macro-benchmark: repair bandwidth costs. Figure 14
shows the amount of data in transit through the system in order
to repair 1, 2 or 3 missing blocks in RECAST in conﬁguration
nu-(1, 10, 2, 3). In this instance, RECAST can recover 2 blocks
solely relying on Reed-Solomon capabilities (e = 2) and 3
exploiting the recursive reconstruction. Performing RS recon-
struction of 1 or 2 blocks, 11 blocks of the same document
must be read as we use a RS(14,11) to compute the 3 parities.
Repairing beyond 2 blocks requires reading from more than 1
document, hence an increase in the number of blocks received
for the repair (twice as many). When we have to ﬁx 3 erasures,
we repair one of the failed blocks by decoding a document
using it as pointer. We are then back to the case where we can
rely on the reconstruction capabilities of the RS and recover
the last two blocks from the original document itself.
Macro-benchmark: passive attacks. In this section, we
evaluate the resilience of RECAST to passive attacks, which
we understand as all threats to the system that neither leverage
particular knowledge nor privileged access to it, e.g., nodes
crashes or unavailable nodes for maintenance.
To evaluate the data loss RECAST undergoes when nodes
fail we instrument simulations in the Internet Archive scenario
proposed for the evaluation of DeepStore [38]. For the sake
of comparison, we simulate RECAST with 188 nodes storing
Fig. 16. File availability as dependent on device failures with and without
temporary replication.
196664 documents and we assume that the original data is
compressed with the LZ algorithm before archiving. Then
we evaluate data availability after failures and storage space,
respectively on Figure 15 left and right. In particular, we
use 2 conﬁgurations for STEP with different storage over-
heads, namely 200% and a lighter 50%. The results show
how parameters highly impact the system’s reliability in the
passive attacker scenario and well prove the resistance of
RECAST against random node failures: with a light-storage
conﬁguration even in the catastrophic event of about 13% of
disks failing simultaneously the data loss is less than 0.25%.
In Figure 16, we evaluate the availability when introducing
temporary replication. We simulate 50-nodes-RECAST conﬁg-
ured with a normal (1, 5, 2, 3)-archive with standard deviation
σ = 100 storing 50000 documents. We simulate such system
both without replication and by replicating the youngest 300
documents 10 times each. We randomly erase between 8%
and 48% of nodes (x-axis), we trigger recursive reconstruction
and record the percentage of available documents. We notice
that temporary replication becomes useful when more than the
15% of disks fail, that is, in a non-catastrophic scenario the
availability of the RECAST-archived documents is guaranteed
by the nu-entanglement itself.
180
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:23:09 UTC from IEEE Xplore.  Restrictions apply. 
leap
1
10
20
50
100
200
500
s
c
o
d
d
e
y
o
r
t
s
e
d
#
103
102
101
100
 0  1000  2000  3000  4000  5000  6000  7000  8000  9000 10000
idx target doc
Fig. 17. Number of corrupted documents to erase a target (x-axis) in a
nu-(1, 5, 2, 3)-archive with 104 documents. We explore an increasing number
(as indicated in the legend) of partial solutions at each step of the leaping
attack.
Macro-benchmark: active attacks. We move now to the
evaluation of RECAST’s resiliency against an active attacker,
i.e., an attacker that knows the metadata describing the system,
has access to all
its node and pro-actively exploits these
abilities. We simulate such a powerful attacker via greedy
heuristics which, as mentioned, are suboptimal. We improve
them by exploring many partial solutions in the intermediate
steps of the leaping attack. In practice, we perform much
costlier computations which better approximate the unknown
optimal solution. We show how the set of blocks to be deleted
gets smaller in Figure 17. For the ﬁrst document archived,
increasing from 1 to 500 partial solutions at each step leads
to an insigniﬁcant improvement (from 4704 to 4662) in the
number of documents to be destroyed. Small improvements
also apply to the tail of the archive, while for example the
number of documents to censor d2000 goes from 1359 to 601.
Nevertheless, it should be noted that to halve the number of
documents to be erased we multiplied by 500 the number of
solutions that we expand and explore at every step. We also
note that for the tail of the archive it is sufﬁcient to explore
10 solutions at each step of the greedy algorithm, while for
the rest of the archive, in our simulation, a buffer size of
100 guarantees that the order of magnitude of the number
of documents to be destroyed is stable.
IX. CONCLUSION AND OPEN CHALLENGES
Archival systems are designed to support long-term storage
of documents. As we turn into a “digital society”,
these
systems become increasingly more important. Archival storage
can leverage the same mechanisms that classical data stores
use, notably cryptography and redundancy, to protect against
common types of attacks. It should however
be resilient
against more subtle attacks that would threaten the long-term
integrity of the archived data, in particular offering strong
protection against attackers that covertly tamper with the data
or delete speciﬁc documents (i.e., censors).
In this paper we have presented RECAST, a novel anti-
censorship archival system based on random data entangle-
ment [5]. It exploits erasure codes to generate redundant blocks
combining content from multiple documents, old and new,
in order to protect them from both failures and malicious
attacks. As opposed to prior work, RECAST allows efﬁcient
recursive repair while requiring censors to do an increasingly
large amount of work over a large number of storage nodes
as the archive scales, which is a highly desirable property.
Entanglement is performed in such a way that documents
become more resilient as they stay longer in the system, and
the level of interdependencies makes it quickly impossible
to delete or tamper with a single document without causing
collateral damage to a large number of other documents.
RECAST uses a hybrid strategy for data entanglement designed
to offer fast short-term and strong long-term protection for
all the documents in the archive. We have not only validated
the resilience of this strategy via simulations, but also im-
plemented a complete prototype that we have deployed and
experimentally evaluated.
As a ﬁnal note, one should mention that our prototype
currently only uses entanglement to protect archival data, but
not metadata. A powerful censor targeting a document in
our system will thus target its metadata, which is currently
much easier than targeting the document itself and can be
done by destroying a small constant amount of information.
Protecting metadata itself is a challenging task, but we mention
that it is much smaller than the data, typically by several
orders of magnitude making it amenable to massive replication
and blockchains. We are currently working on extending
our prototype to provide better protection and integration of
metadata within the entangled archive.
ACKNOWLEDGMENT
We are grateful
to our shepherd Alysson Bessani and
the anonymous reviewers for their constructive comments to
improve our paper.
This research has received funding from the European
Union’s Horizon 2020 - The EU Framework Programme for
Research and Innovation 2014-2020, under grant agreement
No. 653884.
REFERENCES
[1] A. D. R. Marc Waldman and L. F. Cranor, “Publius:
A robust, tamper-evident, censorship-resistant, web pub-
lishing system,” in 9th USENIX Security Symposium,
2000, pp. 59–72.
[2] R. Dingledine, M. J. Freedman, and D. Molnar, “The
Free Haven Project: Distributed Anonymous Storage
Service,” in Designing Privacy Enhancing Technologies.
Springer, 2001, pp. 67–95.
[3] A. Stubbleﬁeld and D. S. Wallach, “Dagster: Censorship-
Resistant Rublishing Without Replication,” Rice Univer-
sity, Tech. Rep. TR01-380, 2002.
[4] M. Waldman and D. Mazières, “Tangler: A Censorship-
resistant Publishing System Based on Document Entan-
glements,” in 8th ACM Conference on Computer and
Communications Security (CCS), 2001, pp. 126–135.
181
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:23:09 UTC from IEEE Xplore.  Restrictions apply. 
[5] H. Mercier, M. Augier, and A. K. Lenstra, “STeP-
archival: Storage integrity and anti-tampering using
data entanglement,” IEEE Transactions on Information
Theory, 2018, doi:10.1109/TIT.2018.2825981. Prelimi-
nary version in the proceedings of the IEEE Interna-
tional Symposium on Information Theory (ISIT), 2015,
pp. 1590–1594.
[6] https://www.dropbox.com/help/security/legal-requests.
[7] R. Anderson, “The Eternity Service,” in 1st International
Conference on the Theory and Applications of Cryptog-
raphy (PRAGOCRYPT), vol. 96, 1996, pp. 242–252.
[8] I. Clarke, O. Sandberg, B. Wiley, and T. W. Hong,
“Freenet: A Distributed Anonymous Information Storage
and Retrieval System,” in Designing Privacy Enhancing
Technologies. Springer, 2001, pp. 46–66.
[9] R. Kotla, L. Alvisi, and M. Dahlin, “SafeStore: A
Durable and Practical Storage System,” in USENIX An-
nual Technical Conference, 2007, pp. 129–142.
[10] L. L. You, K. T. Pollack, and D. D. Long, “Deep
Store: an archival storage system architecture,” in 21st
International Conference On Data Engineering (ICDE).
IEEE, 2005, pp. 804–815.
[11] I. Clarke, O. Sandberg, M. Toseland, and V. Verendel,
“Private Communication Through a Network of Trusted
Connections: The Dark Freenet,” Network, 2010.
[12] Freenet, https://freenetproject.org.
[13] S. Rhea, P. Eaton, D. Geels, H. Weatherspoon, B. Zhao,
and J. Kubiatowicz, “Pond: The OceanStore Prototype,”
in 2nd USENIX Conference on File and Storage Tech-
nologies (FAST). USENIX Association, 2003, pp. 1–14.
[14] OceanStore, http://www.oceanstore.net.
[15] M. W. Storer, K. M. Greenan, E. L. Miller, and K. Voru-
ganti, “POTSHARDS: Secure Long-Term Storage With-
out Encryption,” in USENIX Annual Technical Confer-
ence, 2008, pp. 1–14.
[16] Publius, http://www.cs.nyu.edu/~waldman/publius.
[17] RECAST
Source
https://github.com/
Code,
safecloud-project/recast.
[18] A. Shamir, “How to share a secret,” Communications of
the ACM, vol. 22, pp. 612–613, 1979.
[19] R. Geambasu, A. A. Levy, T. Kohno, A. Krishnamurthy,
and H. M. Levy, “Comet: An active distributed key-value
store.” in OSDI, 2010, pp. 323–336.
[20] S. Hand and T. Roscoe, “Mnemosyne: Peer-to-Peer
Steganographic Storage,” in 1st International Workshop
on Peer-to-Peer Systems (IPTPS).
Springer, 2002, pp.
130–140.
[21] M. O. Rabin, “Efﬁcient dispersal of information for
security, load balancing, and fault tolerance,” Journal of
the ACM (JACM), vol. 36, pp. 335–348, 1989.
[22] F. J. MacWilliams and N. J. A. Sloane, The theory of
error-correcting codes. Elsevier, 1977.
[23] L. L. You, K. T. Pollack, D. D. Long, and K. Gopinath,
“PRESIDIO: A Framework for Efﬁcient Archival Data
Storage,” ACM Transactions on Storage (TOS), vol. 7,
pp. 6:1–6:60, 2011.
[24] P. Maniatis, M. Roussopoulos, T. J. Giuli, D. S. Rosen-
thal, and M. Baker, “The LOCKSS peer-to-peer digital
preservation system,” ACM Transactions on Computer
Systems (TOCS), vol. 23, pp. 2–50, 2005.
[25] J. C. Frank, S. M. Frank, L. A. Thurlow, T. M. Kroeger,
E. L. Miller, and D. D. Long, “Percival: A searchable
secret-split datastore,” in 31st Symposium on Mass Stor-
age Systems and Technologies (MSST).
IEEE, 2015, pp.
1–12.
[26] I. S. Reed and G. Solomon, “Polynomial codes over
certain ﬁnite ﬁelds,” Journal of the society for industrial
and applied mathematics, vol. 8, pp. 300–304, 1960.
[27] Python, https://www.python.org/.
[28] PyECLib, https://pypi.python.org/pypi/PyECLib.
[29] https://github.com/openstack/liberasurecode.
[30] Intel ISA-L, https://github.com/01org/isa-l.
[31] Bottle, http://bottlepy.org/docs/dev/index.html.
[32] uWSGI, https://uwsgi-docs.readthedocs.io/en/latest/.
[33] Redis, https://redis.io.
[34] Minio, https://minio.io.
[35] Apache Zookeeper, https://zookeeper.apache.org.
[36] Docker, https://www.docker.com/.
[37] B. F. Cooper, A. Silberstein, E. Tam, R. Ramakrishnan,
and R. Sears, “Benchmarking cloud serving systems with
YCSB,” in Proceedings of the 1st ACM symposium on
Cloud Computing. ACM, 2010, pp. 143–154.
[38] D. Bhagwat, K. Pollack, D. D. Long, T. Schwarz, E. L.
Miller, and J.-F. Pâris, “Providing high reliability in a
minimum redundancy archival storage system,” in 14th
IEEE International Symposium on Modeling, Analysis,
and Simulation of Computer and Telecommunication
Systems (MASCOTS).
IEEE, 2006, pp. 413–421.
182
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:23:09 UTC from IEEE Xplore.  Restrictions apply.