arbitrarily, allowing a rational operator, who controls her
own OS, to improve her chances of ﬁnding a block by
faking a high cycle count. Moreover, counters are incre-
mented even if an enclave is swapped out, allowing an
OS scheduler to run multiple SGX instances and having
them double-count cycles. Therefore, while instruction
counting is not perfect, we ﬁnd it is the best method for
securely evaluating effort with the existing tools avail-
able in SGX.
5.2 Secure Instruction Counting
As we want to allow arbitrary useful work programs, it is
critical to ensure that instructions are counted correctly
even in the presence of malicious useful work programs.
To this end, we adopt a hybrid method combining static
and dynamic program analysis. We employ a customized
toolchain that can instrument any SGX-compliant code
with dynamic runtime checks implementing secure in-
struction counting.
Figure 6 shows the workﬂow of the PoUW toolchain.
First,
the useful work code (usefulwork.cpp), C /
C++ source code, is assembled while reserving a regis-
ter as the instruction counter. Next, the assembly code
is rewritten by the toolchain such that the counter is in-
cremented at the beginning of each basic block (a lin-
ear code sequence with no branches) by the number of
instructions in that basic block.
In particular, we use
the LEA instruction to perform incrementing for two rea-
sons. First, it completes in a single cycle, and second, it
doesn’t change ﬂags and therefore does not affect con-
USENIX Association
26th USENIX Security Symposium    1435
Figure 6: REM toolchain to transfer a useful work to an PoUW-ready program. Everything in the diagram has been implemented
besides existing tools such as ld and SGX signing tool.
Algorithm 2: PoUW Runtime
1 Function TEE(task, hash, diff)
2
3
4
outcome,n := task.run()
win := 0
PoUW := ⊥
/* simulating n Bernoulli tests */
l ← U[0,1]
if l ≥ 1− (1− diff)n then
/* query SGX RNG */
5
6
7
8
PoUW = Σintel[hash|diff|1 ]
return outcome, PoUW
ditional jumps. The count is performed at the beginning
of a block rather than its end to prevent a cheater from
jumping to the middle of a block and gaining an exces-
sive count.
Another challenge is to ensure the result of instruction
counting is used properly—we cannot rely on the use-
ful work programs themselves. The solution is to wrap
the useful work with a predeﬁned, trusted PoUW run-
time, and make sure to the enclave can only be entered
through the PoUW runtime. The logic of PoUW run-
time is summarized in Algorithm 2, and it is denoted
as PoUWruntime.so in Figure 6. The PoUW runtime
serves as an “in-enclave” loader that launches the useful
work program with proper input and collects the result
of instruction counting. It takes the block hash and difﬁ-
culty and starts mining by running the mining program.
Once the mining program returns, the PoUW runtime ex-
tracts the instruction counter from the reserved register.
Then it draws a random value from SRNG and deter-
mines whether a new block should be generated, based
on the instruction counter and the current difﬁculty. If a
block should be generated, the PoUW runtime produces
an attestation recording the template hash that it is called
with and the difﬁculty.
The last step of the toolchain is to compile the re-
sultant assembly and link it (using linker GNU ld) with
the PoUW runtime (PoUWruntime.so), to produce the
...
.LEHB0:
leaq
call
1(%r15), %r15
_ZN11stlpmtx_std12basic_stringIcNS...
# added by PoUW
.LEHE0:
.loc 7 70 0 is_stmt 0 discriminator 2
leaq
leaq
movq
movq
3(%r15), %r15
-80(%rbp), %rax #, tmp94
%rax, %rsi # tmp94,
%rbx, %rdi # _4,
# added by PoUW
.LEHB1:
leaq
call
1(%r15), %r15
_ZN11stlpmtx_std12out_of_rangeC1ER...
# added by PoUW
.LEHE1:
...
Figure 7: A snippet of assembly code instrumented with
the REM toolchain. Register r15 is the reserved instruction
counter; it is incremented at the beginning of each basic block
in the lines commented added by PoUW.
PoUW enclave. Figure 7 shows a snippet of instru-
mented assembly code. This PoUW enclave is ﬁnally
signed by an Intel SGX signing tool, creating an applica-
tion PoUWEnclave.so that is validated for loading into
an enclave.
The security of instruction counting relies on the as-
sumption that once instrumented, the code cannot alter
its behavior. To realize this assumption in SGX, we need
to require two invariants. First, code pages must be non-
writable; second, the useful work program must be single
threaded.
Enforcing Non-Writable Code Pages Writable code
pages allow a program to rewrite itself at runtime. Al-
though necessary in some cases (e.g. JIT), writable code
opens up potential security vulnerabilities.
In particu-
lar, writable code pages are not acceptable in REM be-
cause they would allow a malicious useful work program
to easily bypass the instrumentation. A general memory
protection policy would be to require code pages to have
W⊕X permission, namely to be either writable or exe-
cutable, but not both. However, W⊕X permissions are
1436    26th USENIX Security Symposium
USENIX Association
PoUWruntime.soCompliance	CheckerREM	loaderGNU ldPoUWToolchainSGX	sign	toolPoUWEnclave.soUseful	work	outcomeProof	of	Useful	WorkProof	of	ComplianceTo	P2P	NetworkUserwork.cppDone	by	Useful	Work	ClientsTo	Useful	Work	ClientDone	by	REMminers.section data
ENCLAVE_MTX:
.long 0
.section text
...
enclave_entry:
xor %rax, %rax
xchgl ENCLAVE_MTX(%rip), %rax
cmp %rax, 0
jnz enclave_entry
Figure 8: Code snippet: a spinlock to allow only the ﬁrst thread
to enter enclave entry
not enforced by the hardware. Intel has in fact acknowl-
edged this issue [5] and recommended that enclave code
contain no relocation to enable the W⊕X feature.
REM thus explicitly requires code pages in the enclave
code (usefulwork.so) to have W⊕X permission. This
is straightforward to verify, as with the current imple-
mentation of the SGX loader, code page permissions are
taken directly from the ELF program headers [4].
Enforcing Single Threading Another limitation of
SGX is that the memory layout is largely predeﬁned
and known to the untrusted application. For example,
the State Save Area (SSA) frames are a portion of stack
memory that stores the execution context when handling
interrupts in SGX. This also implies that the SSA pages
have to be writable. The address of SSA frames for
an enclave is determined at the time of initialization, as
the Thread Control Structure (TCS) is loaded by the un-
trusted application through an EADD instruction. In other
words, the address of SSA is always known to the un-
trusted application. This could lead to attacks on the
instruction counting if a malicious program has multi-
ple threads that interact via manipulation of the execu-
tion context in SSA. For example, as we will detail later,
REM stores the counter in one of the registers. When
one thread is swapped out, the register value stored in an
SSA is subject to manipulation by another thread.
While more complicated techniques such as Address
Space Layout Randomization (ASLR) for SGX could
provide a general answer to this problem, for our pur-
poses it sufﬁces to enforce the condition that an enclave
can be launched by at most one thread. As an SGX en-
clave has only one entry point, we can instrument the
code with a spinlock to allow only the ﬁrst thread to pass,
as shown in Figure 8.
Known entry points REM expects
the PoUW
toolchain and compliance checker to provide and verify
a subset of Software Fault Isolation (SFI), speciﬁcally in-
direct control transfers alignment [26, 53, 74, 38]. This
ensures that the program can only execute the instruction
stream parsed by the compliance checker, and not jump
to the middle of an instruction to create its own alternate
execution that falsiﬁes the instruction count. Our imple-
mentation does not include SFI, as off the shelf solutions
such as Google’s Native Client could be integrated with
the PoUW toolchain and runtime with well quantiﬁed
overheads [74].
5.3 Hierarchical Attestation
A blockchain participant that veriﬁes a block has to
check whether the useful work program that produced
the block’s PoUW followed the protocol and correctly
counted its instructions. SGX attestations require such a
veriﬁer to obtain a ﬁngerprint of the attesting enclave. As
we allow arbitrary work, a na¨ıve implementation would
store all programs on the blockchain. Then a veriﬁer that
considers a certain block would read the program from
the blockchain, verify it correctly counts instructions,
calculate its ﬁngerprint, and check the attestation. Be-
yond the computational effort, just placing all programs
on the blockchain for veriﬁcation would incur prohibitive
overhead and enable DoS attacks via spamming the chain
with overly large programs. The alternative of having an
entity that veriﬁes program compliance is also unaccept-
able, as it puts absolute blockchain control in the hands
of this entity: it can authorize programs that determinis-
tically win every execution.
To resolve this predicament, we form PoUW attesta-
tions with what we call two-layer hierarchical attesta-
tions. We hard-code only a single program’s ﬁngerprint
into the blockchain, a static-analysis tool called compli-
ance checker. The compliance checker runs in a trusted
environment and takes a user-supplied program as input.
It validates that it conforms with the requirements de-
ﬁned above. First, it conﬁrms the text section is non-
writable. Then it validates the work program’s compli-
ance by disassembling it and conﬁrming that the dedi-
cated register is reserved for instruction counting and that
counts are correct and appear where they should. Next,
it veriﬁes that the PoUW runtime is correctly linked and
identical to the expected PoUW runtime code. Finally,
it veriﬁes the only entry point is the PoUW runtime and
that this is protected by a spinlock as shown in Figure 8.
Finally, it calculates the program’s ﬁngerprint and out-
puts an attestation including this ﬁngerprint.
Every PoUW then includes two parts: The useful work
program attestation on the mining success, and an at-
testation from the compliance checker of the program’s
compliance (Figure 9). Note that the compliance attes-
tation and the program’s attestation must be signed by
the same CPU. Otherwise an attacker that compromises a
single CPU could create fake compliance attestations for
invalid tasks. Such an attacker could then create blocks at
USENIX Association
26th USENIX Security Symposium    1437
Figure 9: Block structure with a proof comprising the quotes
from the compliance enclave and a work enclave.
will from different uncompromised CPUs, circumvent-
ing the detection policy of Section 4.
In summary,
the compliance enclave is veriﬁed
through the hard-coded measurement in the blockchain
agent.
Its output is a measurement that should be
to the measurement of the PoUW enclave
identical
PoUWEnclave.so.
PoUW Enclave’s output should
match the block template (namely the hash of the block
preﬁx, up to the proof) and the prescribed difﬁculty.
Generalized Hierarchical Attestation The hierarchi-
cal attestation approach can be useful for other scenar-
ios where participants need to obtain attestations to code
they do not know in advance. As a general approach, one
hard-codes the ﬁngerprint of a root compliance checker
that veriﬁes its children’s compliance. Each of them, in
turn, checks the compliance of its children, and so on,
forming a tree. The leaves of the tree are the programs
that produce the actual output to be veriﬁed. A hierarchi-
cal attestation therefore comprises a leaf attestation and
a path to the root compliance checker. Each node attests
the compliance of its child.
IAS access overhead
5.4
Verifying blocks doesn’t require trusted hardware. How-
ever, due to a design choice by Intel, miners must contact
the IAS to verify attestations. Currently there is no way
to verify attestations locally. This requirement, however,
does not change the basic security assumptions. More-
over, a simple modiﬁcation to the IAS protocol, which is
being tested by Intel [3], could get rid of the reliance on
IAS completely on veriﬁers’ side.
Recall that the IAS is a public web service that re-
ceives SGX attestations and responds with veriﬁcation
results. Requests are submitted to the IAS over HTTPS;
a response is a signed “report” indicating the validation
status of the queried platform [44]. In the current ver-
sion of IAS, a report is not cryptographically linked with
its corresponding request, which makes the report only
trustworthy for the client initiating the HTTPS session.
Figure 10: REM Overhead
Therefore an IAS access is required for every block ver-
iﬁcation by every blockchain participant.
However, the following modiﬁcation can eliminate
this overhead: simply echoing the request in the body of
the report. Since the report is signed by Intel using a pub-
lished public key [44, 45], only one access to IAS would
be needed globally for every new block. Other miners
could use the resulting signed report. Such a change is
under testing by Intel for future versions of the IAS [3].
5.5 Experiments
We evaluate the overhead of REM with four examples of
useful work benchmarks in REM as mining programs: a
protein folding algorithm [1], a Support Vector Machine
(SVM) classiﬁer [22], the zlib compression algorithm
(iterated) [2], and the SHA3-256 hash algorithm (iter-
ated) [7]. We evaluate each benchmark in three modes:
Native We compile with the standard toolchain.
SGX We port to SGX by removing system calls and re-
placing system libraries with SGX-compliant ones.
Then we compile in SGX-prerelease mode and run
with the SGX driver v1.7 [43].
REM After porting to SGX, we instrument the code us-
ing our REM toolchain. We then proceed as in the
SGX mode.
We use the same optimization level (-O2) in all modes.
The experiments are done on a Dell Precision Worksta-
tion with an Intel 6700K CPU and 32GB of memory. For
more details on the experiment setup, we refer readers to
the full version [76].
We compared the running time in three modes and
the results are shown in Figure 10. The running time of
the native mode is normalized to one as a baseline. For
all four useful workloads, we observe a total overhead
of 5.8% ∼ 14.4% in REM relative to the native mode.
Because the code is instrumented at control ﬂow trans-
fers, workloads with more jumps will incur more count-
ing overhead. For example, SHA3-256 is highly iterative
compared with the other workloads, so it incurs the most
counting overhead.
We note that overhead for running in SGX is not uni-
form. For computation-bound workloads such as protein
1438    26th USENIX Security Symposium
USENIX Association
Transactions	prev.	block	hash,	difficulty,	transactions	hash,	timestamp…	PoUWenclave	measurement10…0Prefix	hashDifficulty	0…01From	PoUWEnclaveFrom	ComplianceCheckerHeader	ContentPoUW 0 0.2 0.4 0.6 0.8 1 1.2Protein FoldingSVMzlibSHA36.5%14.4%5.8%10.8%NativeSGXREMfolding, zlib, and SHA3, SGX introduces little overhead
(< 1%) because the cost of switching to SGX and obtain-
ing attestations is amortized by the longer in-enclave ex-
ecution time of the workload. In the shorter SVM bench-
mark, the cost of entering SGX is more signiﬁcant.
In summary, we observe an overhead of roughly 5−
15% for converting useful-work benchmarks into REM
PoUW enclave.
6 Waste Analysis
To compare PoUW against PoET and alternative
schemes, we explore a common game-theoretic model
(with details deferred to the appendix). We consider a
set of operators / agents that can either work locally on
their own useful workloads or utilize their resource for
mining. Based on the revenue from useful work and
mining, and the capital and operational costs, we com-
pute the equilibrium point of the system. We calculate
the waste in this context as the ratio of the total resource
cost (in U.S. dollars) spent per unit of useful work on a
mining node compared with the cost when mining is not
possible and all operators do useful work. We plug in
concrete numbers for the parameters based on statistics
we collected from public data sources.
Initial study of PoET identiﬁed a subtle pitfall involv-