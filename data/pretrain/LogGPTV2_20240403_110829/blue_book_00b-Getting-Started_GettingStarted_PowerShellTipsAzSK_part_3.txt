Name               Account            SubscriptionName        Environment             TenantId                          
----               -------            ----------------        -----------             --------                          
MSFT-SRA-04        PI:EMAIL    Subsctiption1           AzureCloud              72f988bf-86f1-41af-91ab-2d7cd01...
PS C:\> Set-AzContext -SubscriptionId '2feabcde-f012-3456-7890-abcdef012349'
Name               Account            SubscriptionName        Environment             TenantId                          
----               -------            ----------------        -----------             --------                          
MSFT-SRA-04        PI:EMAIL    Subsctiption1           AzureCloud              72f988bf-86f1-41af-91ab-2d7cd01...
```
```PowerShell
You can use the 'Get-AzContext' command to find out which subscription is currently active (target) in the Az context.
PS C:\> Get-AzContext
Name               Account            SubscriptionName        Environment             TenantId                          
----               -------            ----------------        -----------             --------                          
MSFT-SRA-04        PI:EMAIL    Subsctiption1           AzureCloud              72f988bf-86f1-41af-91ab-2d7cd01...
```
[Back to top...](GettingStarted_PowerShellTipsAzSK.md#list-of-tips)
### Use variables effectively
You can avoid repetition of scripts by putting commonly needed values in variables at the top of your scripts. You can then use
'Run Selection' to set their values once and then repeat commands without having to edit everywhere.
As a simple example, because SubscriptionId is required in many places we can do the following:
```PowerShell
$subId = '2feabcde-f012-3456-7890-abcdef012349'
Set-AzContext -SubscriptionId $subId
Get-AzSKSubscriptionSecurityStatus -SubscriptionId $subId
Get-AzSKAzureServicesSecurityStatus -SubscriptionId $subId
```
Here's a slightly more interesting example... 
If you have multiple subscriptions and need to run various commands on some of them, you 
can setup a variable for each subscription. Then have a common variable representing the target subscription. The script below will
run commands for the $s2 subscription. However, if you want to run them for $s3, you just need to edit the "$subId = $s2" line, 
run that and thereafter run any other code that you wish to run with $s3 as target. 
```PowerShell
# Set up variables to represent diff subscriptions (run using 'run selection')
$s1 = '0e2abcde-f012-3456-7890-abcdef01234f'
$s2 = '2fedc012-3456-7890-abcd-ef0123456479'
$s3 = '8feabcde-f012-3456-7890-abcdef012345'
#Edit and run this line to set $subId to point to one of the subs.
$subId = $s2  
# Run one or more of the below lines as needed...
Set-AzContext -SubscriptionId $subId
Get-AzSKSubscriptionSecurityStatus -SubscriptionId $subId
Get-AzSKAzureServicesSecurityStatus -SubscriptionId $subId
```
[Back to top...](GettingStarted_PowerShellTipsAzSK.md#list-of-tips)
### Strings - single or double quote?
Like most programming/scripting languages, when you specify a string value in PS, you are expected to use quotes. However, you may have
noticed that some examples use single quotes 'my string' while others use double quotes "my string". So what's the difference?
If used in the context of just plain strings with no special characters (like the example above) the two are equivalent. So if all 
you want to specify is a certain subscriptionId, then using '0e2abcde-f012-3456-7890-abcdef01234f' is the same as "0e2abcde-f012-3456-7890-abcdef01234f".
However, if you want PS to do a richer interpretation of what's written inside the quotes then you'd use double quotes. Here are a few examples:
```PowerShell
Write-Host "My subscription id is: $subId"   #This will replace $subId with the actual value of the variable when printing
```
If we used single quotes above, then it would literally print $subId instead of the actual subscriptionId.
Sometimes, when the string value being specified does not have any spaces, you can get away with not using quotes at all. 
However, it is advisable to use single quotes as not all commands may be equally forgiving and, in some situations, some code deep 
inside the command you invoked may choke on one or more special characters.
Note, if you have strings that have to span multiple lines, then they should use @" and "@  (or @' and '@) as delimiters. In such cases
the begin and end delimiters have to be on their own lines. For example,
```PowerShell
$message = 
@'
    This message
    will span multiple
    lines.
'@
Write-Host $message
```
[Back to top...](GettingStarted_PowerShellTipsAzSK.md#list-of-tips)
### Comparison operators are different!
A common pitfall for new PS users is using the '>' or '', '' or ' 10000) {Write-Host "$proc.Name: Too many handles..."}
out-file : Access to the path 'C:\1000' is denied.
At line:1 char:22
```
What you actually want is this (note the "-gt"):
```PowerShell
if ($proc.HandleCount -gt 10000) {Write-Host $proc.Name ": Too many handles..."}}
OUTLOOK : Too many handles...
```
[Back to top...](GettingStarted_PowerShellTipsAzSK.md#list-of-tips)
### A few handy loops
Although PS supports the standard 'for' and 'while' loops, it allows using the '%' operator as a handy shortcut.
You can take a source object (e.g., an array of resource groups in your subscription), 'feed' it to the '%' operator and have some
operation performed or some expression evaluated for every constituent object in the array.
For instance,  to print just the location of every resource group in the current subscription, you'd use:
```PowerShell
PS C:\> Get-AzResourceGroup | % {$_.Location}
eastus
eastus2
eastus
eastus
westus
centralus
eastus
northcentralus
westus
```
This basically tells PS to iterate through the collection returned from the left side of the '|' and, for each object, evaluate 
the expression within the '{ }'. 
The key players in the equation are the '|' pipe character, the '%' looping character and the "$\_" inside the '{ }'. 
The $\_ plays the same role as 'i' in a standard for loop or 'thisObject' in a 'foreach' loop.
Here are a few more examples:
```PowerShell
# List all resource group names
PS C:\> Get-AzResourceGroup | % {$_.ResourceGroupName}
AzSKAPIDev
AzSKDemoDataRG
AzSKDemoKeyVaultRG
AzSKDevOpsKitSetup
AzSKDocsRepository
AzSKRG
...
...
```
```PowerShell
# List all resource groups in the eastUS2 region
PS C:\> Get-AzResourceGroup | % {if ($_.Location -eq 'eastus2'){Write-Host $_.ResourceGroupName}}
AzSKDemoDataRG
AzSKDemoKeyVaultRG
AzSKTestRG
AzSKWorkshopVNetRG
AzSKWSRG
Wave2RG
```
```PowerShell
# Run a scan command across all subscriptions you have access to
$subscriptions = (Get-AzSubscription)
$subscriptions | % { 
    $subId = $_.Id
    Write-Host "Running cmdlet for subscription: $subid"
    #Run your command here...
    #Get-AzSK... -SubscriptionId $subId
}
```
If you want to run a loop and evaluate some expression on only those items which meet a particular criteria, you can 
use the 'where-object' or 'where' or simply the '?' operator to do so.
For example, the below command filters for resource groups that have 'rg' anywhere in their name:
```PowerShell
Get-AzResourceGroup | ? ResourceGroupName -match 'rg'
# Can also be written like this:
Get-AzResourceGroup | ? {$_.ResourceGroupName -match 'rg'}
```
[Back to top...](GettingStarted_PowerShellTipsAzSK.md#list-of-tips)
### To '-match' or to '-like'?
PowerShell has extremely powerful string operators. At some point you will want to run some logic based on a string
property of some object. Here, there are two operators 'like' and 'match' that can cause confusion (and trouble). 
A basic rule of thumb is that with 'match' you are specifying a regular expression whereas with 'like' you are describing
the string just with the help of wildcard character '*'. 
Let us look at an example use of 'like':
```PowerShell
'Microsoft Azure is awesome!' -like 'Azure'     # false
'Microsoft Azure is awesome!' -like '*Azure'    # false
'Microsoft Azure is awesome!' -like '*Azure*'   # true
```
The first two checks with 'like' above fail because the string on the left is not like (a) the string 'Azure' with nothing 
on either side of it or (b) the string 'Azure' with anything on the left of it but nothing on the right. 
The third check passes because the string on the left is like another string with any set of characters on the left and any set
of characters on the right.
Now let us try the same using 'match':
```PowerShell
'Microsoft Azure is awesome!' -match 'Azure'        # true
'Microsoft Azure is awesome!' -match '*Azure'       # error (invalid regex)
'Microsoft Azure is awesome!' -match '*Azure*'      # error (invalid regex)
'Microsoft Azure is awesome!' -match 'Azure*'       # true 
'Microsoft Azure is awesome!' -match '.*Azure.*'    # true
```
The first check with 'match' above passes because the string on the left matches the specified regular expression (search). 
The next two checks result in error because in regular expression syntax '*' means zero or more instances of the previous
character. Thus '*' has to be preceded by some character whose repetition we are looking for. 
The fourth check passes as we are asking if the string 'Azure' with potentially zero or more instances of the letter 'e'
at the end is present in the string on the left. (This means it would also return true for 'Microsoft Azur is awesome!')
Lastly, the final check also passes because we are looking for a match for Azure with any number of repetitions of any
character before and zero or more instances of the letter 'e'.
A note of caution that the 'contains' operator is supposed to be used for arrays. (E.g., if an array of strings contains a 
particular string.)  
[Back to top...](GettingStarted_PowerShellTipsAzSK.md#list-of-tips)