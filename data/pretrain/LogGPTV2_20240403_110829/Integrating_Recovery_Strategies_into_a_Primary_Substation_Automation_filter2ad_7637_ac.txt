### Connection to the Field and Node Performance

To establish a connection with that portion of the field, we assume that target node N2 provides better computing performance than N1. The initial configuration is the optimal distribution of application tasks onto the heterogeneous hardware. The most performant configuration, Config_0 in Table 2, does not require off-node communication among the application tasks.

**Table 2: Different configurations to allocate active PSAS application tasks to target nodes**

| Configuration | N1 | N2 | N3 |
|---------------|----|----|----|
| **Config_0**  | PARALLEL_TRS | STRAT, BUSBAR1, BUSBAR2 | - |
| **Config_1**  | CRASHED | PARALLEL_TRS | - |
| **Config_2**  | PARALLEL_TRS | CRASHED | STRAT, BUSBAR1, BUSBAR2 |
| **Config_3**  | STRAT | - | CRASHED |

- No application task is allocated to N3, whose BSW acts as the master and handles communication with the remote control center.
- PARALLEL_TRS runs on N1.
- BUSBAR1, BUSBAR2, and STRAT are allocated to N2.
- Each application task has at least one standby replica task_Ri on a different target node Ni (i=1..3).

### PSAS Recovery Strategy

To handle temporary and permanent faults affecting the physical and communication infrastructure of the PSAS, an appropriate recovery strategy has been designed and implemented using Ariel recovery scripts. This strategy combines various error detection mechanisms, error recovery, and system reconfiguration. Reconfiguration is statically associated with the crash of a single node. If two nodes crash simultaneously, no reconfiguration is possible. The following examples illustrate some of the recovery actions:

**Example 1: Slave Node Crash (e.g., N1)**

```ariel
IF [FAULTY NODE{N1} AND RUNNING NODE{N2} AND 
    RUNNING NODE{N3} AND PHASE(TASK{BSW_M}) == {NEW_CYCLE_PH}]
THEN
    ISOLATE NODE{N1}
    SEND {CONFIG_1} TASK{BSW_MSG_M}
    SEND {CONFIG_1} GROUP{BSW_SLAVE_GROUP}
    RESTART GROUP{EXECUTIVE_GROUP}
    RESTART TASK{PARALLEL_TRS_R2}
FI
```

If the guard condition is met, the application tasks are reconfigured to CONFIG_1 from Table 2. CONFIG_1 maintains full PSAS functionality by transferring Parallel_TRS to N2, activating its spare replica. N2 can handle the entire computational load without needing to perform communication requested by BSW_M's functions. To avoid interference during critical phases of BSW_M activity, the current execution phase must be NEW_CYCLE_PH.

**Example 2: Target Node Crash (e.g., N2)**

```ariel
IF [EVENT {RE_BSW_error}]
THEN
    IF [FAULTY NODE{N2} AND RUNNING NODE{N3}]
    THEN
        ISOLATE NODE{N2}
        SEND {CONFIG_2} TASK{BSW_MSG_M}
        SEND {CONFIG_2} TASK{BSW_MSG_S1}
        RESTART GROUP{EXECUTIVE_GROUP}
        RESTART TASK{BUSBAR1_R3}, TASK{BUSBAR2_R3}, TASK{STRAT_R3}
        RESTART TASK{PARALLEL_TRS_R1}
    FI
FI
```

The system is reconfigured to Config_2, where the spare replicas of BUSBAR1, BUSBAR2, and STRAT are activated on N3.

**Example 3: Fault on Master Node (e.g., N3)**

```ariel
IF [FAULTY NODE{N3} AND RUNNING NODE{N1} AND 
    RUNNING NODE{N2}]
THEN
    ISOLATE NODE{N3}
    SEND {CONFIG_3} GROUP{BSW_SLAVE_GROUP}
    SEND {BACKUP_MASTER} TASK{BSW_MSG_S2}
    RESTART GROUP{EXECUTIVE_GROUP}
    STOP TASK{PARALLEL_TRS}
    RESTART TASK{STRAT_R1}, TASK{BUSBAR1_R1}, TASK{BUSBAR2_R1}
FI
```

The function of the master node is transferred to N2, and the application tasks of N2 are moved to N1. Since N1 cannot support both application functions simultaneously, PARALLEL_TRS is disabled, leading to a graceful degradation of the automation system (config_3).

### Evaluation

Other recovery strategies, such as restarting all tasks on a node after a transient fault or shutting down the system when reconfiguration is not possible, have also been coded in ARIEL and implemented. We did not provide recovery strategies for a crash of N4 or N5, as they are not target nodes and do not affect the automation control function. In a real deployment, these nodes could be replicated or back up each other.

### User Interface

Figure 3 shows the user interface of the pilot application demonstrator.

### Flexibility and Integration

The use of error recovery programs provides flexibility to modify recovery strategies without requiring major modifications to the application, while tolerating the same physical faults as in dedicated hardware solutions.

### Acknowledgements

This project was partially supported by the European project IST-2000-25434 (www.DepAuDE.org), the K.U.Leuven Research Council (GOA/2001/04), and the Fund for Scientific Research - Flanders (Belgium, F.W.O.) through the Postdoctoral Fellowship for Geert Deconinck and “Krediet aan Navorsers” 1.5.148.02.

### References

[1] Anon., "Editor Grafico di ASFA – Manuale Utente," ENEL internal report 1995; in Italian.
[2] A. Bertani, S. D’Imporzano, P. Perna, "Requisiti funzionali dell’ACL," ENEL internal report SRI-AD-SA 99/261, Jun. 1999; in Italian.
[3] K. Caird, "Integrating Substation Automation," IEEE Spectrum, Aug. 1997, pp. 64-69.
[4] E. Ciapessoni, F. Maestri et al., "Partitioning of Hierarchical Automation Systems," Proc. Euromicro Conf. on Real-time Systems, Delft, The Netherlands, Jun. 2001, pp. 143-153.
[5] G. Deconinck, O. Botti, et al., "Stable Memory in Substation Automation: a Case Study," Proc. 28th Ann. Int. Symp. on Fault-Tolerant Computing (FTCS), Munich, Germany, Jun. 1998, pp. 452-457.
[6] G. Deconinck, V. De Florio, O. Botti: "Software-Implemented Fault Tolerance and Separate Recovery Strategies Enhance Maintainability," IEEE Trans. Reliability, Vol. 51, No. 2, Jun. 2002, pp. 158-165.
[7] G. Deconinck, V. De Florio, et al., "A Software Library, a Control Backbone and User-Specified Recovery Strategies to Enhance the Dependability of Embedded Systems," Proc. 25th Euromicro Conf., Worksh. on Dependable Computing Systems, Milan, Italy, Sep. 1999, pp. II 98-104.
[8] V. De Florio, G. Deconinck, "REL: A Fault-Tolerance Linguistic Structure for Distributed Applications," Proc. 9th IEEE Conf. and Workshop on Engineering of Computer-Based Systems (ECBS-2002), Lund, Sweden, Apr. 2002, pp. 51-58.
[9] T.E. Dy-Liacco, "Control centers are here to stay," IEEE Computer Appl. in Power, Vol. 15, No 4, Oct 2002, pp. 18-23.
[10] R. Gargiuli, P.G. Mirandola, et al., "ENEL Approach to Computer Supervisory Remote Control of Electric Power Distribution Network," Proc. 6th IEE Int. Conf. on Electricity Distribution (CIRED’81), Brighton (UK), 1981, pp. 187-192.
[11] F. Maestri, R. Meda, G.L. Redaelli, "Un ambiente di sviluppo di funzioni applicative strutturate per sistemi di automazione di impianti ENEL," Automazione e strumentazione, Dec. 1997; in Italian.
[12] G. Mazzini, G.P. Nizzoli, P. Bergamo, "Measurements of Redundant Source-Routing," Proc. IEEE 10th Int. Conf. on software, telecommunications, and computer networks (SoftCOM), Split, Croatia, Oct. 2002, pp. 95-99.
[13] A. Moro, "Traduttore delle reti ASFA," Tesi di laurea, Politecnico di Milano, 1998; in Italian.
[14] P. Veríssimo, L. Rodrigues, "Distributed Systems for System Architects," Kluwer Academic Publishers, Boston, 2001, 648p.

### Summary and Lessons Learned

The inflexibility of dedicated hardware-based fault tolerance solutions makes them less cost-effective in cases where similar functionality needs to be deployed across multiple sites with slightly different environments. This paper presents the integration of the DepAuDE architecture into the distributed automation system of a primary substation. The deployment of this fault tolerance middleware allows for the integration of different recovery strategies on a heterogeneous platform. Key lessons learned include:

- The ASFA design environment with automatic code generation offers several advantages: reduced development time, fewer coding errors, portable application code, and possibilities for application partitioning. It is straightforward to interface it with IEC 61850-compliant Intelligent Electronic Devices (IED).
- The implementation effort required to integrate the DepAuDE BSL into an ASFA application was limited (about 2400 lines of code for the RMOS and VxWorks targets). The communication mechanism provided by the DepAuDE BSL supports transparent inter-process communication among ASFA application tasks. Grouping tasks proved useful for implementing standby replicas. Inter-processor communication significantly influences application performance and reconfiguration time in case of faults, so it should be minimized.
- The deployment of the DepAuDE middleware allowed for the integration of several recovery strategies on a heterogeneous platform. The separation between functional and non-functional aspects of the system enhances maintainability and flexibility.