title:Discovering the IPv6 Network Periphery
author:Erik C. Rye and
Robert Beverly
Discovering the IPv6 Network Periphery
Erik C. Rye(B)
and Robert Beverly
Naval Postgraduate School, Monterey, CA, USA
PI:EMAIL, PI:EMAIL
Abstract. We consider the problem of discovering the IPv6 network
periphery, i.e., the last hop router connecting endhosts in the IPv6
Internet. Finding the IPv6 periphery using active probing is challenging
due to the IPv6 address space size, wide variety of provider address-
ing and subnetting schemes, and incomplete topology traces. As such,
existing topology mapping systems can miss the large footprint of the
IPv6 periphery, disadvantaging applications ranging from IPv6 census
studies to geolocation and network resilience. We introduce “edgy,” an
approach to explicitly discover the IPv6 network periphery, and use it
to ﬁnd >64M IPv6 periphery router addresses and >87M links to these
last hops – several orders of magnitude more than in currently available
IPv6 topologies. Further, only 0.2% of edgy’s discovered addresses are
known to existing IPv6 hitlists.
Keywords: IPv6 · Topology · Discovery · Reconnaissance · Security
1 Introduction
Among the unique properties inherent to IPv6’s large address space size are
ephemeral and dynamic addressing, allocation sparsity and diversity, and a lack
of address translation. These well-known properties complicate eﬀorts to map
the infrastructure topology of the IPv6 Internet. While previous research has
tackled problems of target selection, speed, and response rate-limiting in active
IPv6 topology probing [7], the IPv6 periphery – last hop routed infrastructure
connecting end hosts – is challenging to discover, and diﬃcult to discern.
Discovery of the IPv6 periphery is important not only to the completeness
of network topology mapping, but provides a crucial supporting basis for many
applications. For instance, IPv6 adoption [12,27,34], census [26], and reliabil-
ity and outage studies [21] all depend in part on a complete and accurate map
of the IPv6 topology inclusive of the periphery, while understanding provider
address allocation policies and utilization also requires completeness [15,29].
Similarly, work on IPv4 to IPv6 network congruence [13,20] and IPv6 geolo-
cation [5] can utilize IPv6 topologies. Further, our work illuminates potential
security and privacy vulnerabilities inherent in the way today’s IPv6 periphery
is deployed [11,31].
We present “edgy,” a new technique to explicitly discover the IPv6 periphery.
In contrast to IPv6 scanning [17,23], passive collection [26], or hitlists [14,16],
This is a U.S. government work and not under copyright protection
in the U.S.; foreign copyright protection may apply 2020
A. Sperotto et al. (Eds.): PAM 2020, LNCS 12048, pp. 3–18, 2020.
https://doi.org/10.1007/978-3-030-44081-7_1
4
E. C. Rye and R. Beverly
IPv6 Periphery
Provider
Router
Point-to-point
Subnet
CPE
Router
Customer
Subnet
Fig. 1. Common IPv6 architecture: an IPv6 subnet is assigned to the link between the
provider and last hop CPE routers. There is no NAT or private addressing; a separate
distinct routed IPv6 subnet is assigned to devices attached to the last hop CPE.
which, by construction, target endhosts, edgy is speciﬁcally designed to ﬁnd last
hop routers and subnetworks in the IPv6 Internet. Our contributions include:
1. Edgy, an algorithm to discover, identify, and enumerate the IPv6 periphery.
2. Active measurement using edgy to ﬁnd 64.8M last hop router addresses and
87.1M edges to these last hops from a single vantage.
3. Discovery of periphery addresses that are 99.8% disjoint from current IPv6
hitlists [16] and orders of magnitude larger than existing IPv6 topology snap-
shots [8], suggesting that edgy is complementary to these prior approaches.
4. Discovery of 16M EUI-64 last hop addresses, suggesting a potential vulnera-
bility to security and privacy.
2 Background and Related Work
In this work, we deﬁne the “periphery” not to be servers or clients, but rather
the last hop router connecting network endhosts. Whereas signiﬁcant prior work
has developed techniques for IPv6 endhost discovery [16,17,23], comparatively
little work has explored the IPv6 periphery.
The large address space in IPv6 removes the need for address translation;
thus, while many IPv4 hosts are connected via NATs [32], the IPv6 periph-
ery typically extends into customer premises. Indeed, in IPv6, the Customer
Premises Equipment (CPE) is a router, implying that in conjunction with the
rapid increase in IPv6 adoption [12,34], the IPv6 periphery is considerably larger
than in IPv4, especially for residential networks.
Figure 1 shows an example of the IPv6 periphery we attempt to discover.
Here, the point-to-point subnet between the provider and the CPE is assigned
a public IPv6 preﬁx; the subnet on the other side of the CPE (e.g., in the
customer’s home) is also a publicly-routed preﬁx. While this example shows a
common residential IPv6 architecture, similar designs exist in the enterprise.
Consider an IPv6 traceroute to a random address within a provider’s globally
advertised BGP preﬁx, such as is routinely performed by existing production
topology mapping systems [18]. The traceroute (Fig. 2): (i) is unlikely to hit the
preﬁx allocated to a customer CPE or her network; (ii) is even less likely to reach
a host within the customer’s network; and (iii) does not illuminate the scope,
characteristics, or breadth of subnets within the preﬁx. When a traceroute does
Discovering the IPv6 Network Periphery
5
traceroute to 2a03:4980:2b6:9624:8643:b70f:adae:4f40
. . .
5 2001:7f8:1::a502:4904:1
6 2a03:4980::6:0:2
7 2a03:4980::b:0:5
8 *
9 *
25.948 ms
39.560 ms
16.862 ms
Fig. 2. Randomly chosen trace targets are unlikely to discover subnets within a preﬁx,
or to elicit a response. It is thus ambiguous whether hop 7 is a periphery address in
this example, even though the trace reaches into the destination’s /32.
not reach its target destination it is ambiguous: does the last responsive hop
belong to the core of the network, or the periphery?
Passive techniques suﬀer similar problems in revealing the network periphery.
For instance, BGP, by design aggregates routes such that the aggregate visible
in a looking glass does not reveal the subnets within. And, while there has been
signiﬁcant prior work in characterizing the IPv6 address space, these primarily
focus on endhosts. For example, Plonka and Berger examine and analyze the
addresses and behaviors of IPv6 clients connecting to a large CDN [26]. How-
ever, this passive collection of client requests alone does not reveal the network
periphery on the path to those clients.
3 Methodology
Our work seeks to perform active probing in a way that elicits responses from
the last hop IPv6 periphery, rather than network core infrastructure, servers or
other endhosts. Enumerating last hop router addresses, e.g., CPE, and inferring
networks beyond the last hops are the principal goals of edgy.
Edgy is divided into an initialization stage, followed by active probing that
proceeds in rounds. Results from one round of probing are used to guide probing
in subsequent rounds. This section describes edgy; the complete algorithm is
given in Appendix A.
3.1 Edgy
Because of the massive size of the IPv6 address space, edgy relies on an input
set of “seed traces” to focus and guide its discovery. Thus, the ability of edgy
to discover the network periphery depends strongly on the input seed traces
it uses. In Sect. 3.2 we describe two speciﬁc realistic seed traces we utilize: (i)
BGP-informed; and (ii) hitlist-informed.
Algorithm 1 describes edgy’s initialization stage. Edgy iterates through the
input seed and examines the last responsive hop in each trace, regardless of
whether a sequence of same last IP responses or loops occur. It maintains the
set of targets that, when used as the traceroute destination, had a given last
6
E. C. Rye and R. Beverly
hop. Edgy then ﬁnds unique last hops – those that were only discovered by
probing destinations that reside within a single /48 preﬁx. The intuition is to
ﬁnd candidate /48 preﬁxes that are likely to be subnetted, and hence contain
periphery routers. By contrast, if there are two or more probes to targets in
diﬀerent /48s that elicit the same last hop, those /48s are less likely to be
subnetted, or traces to targets in these /48s are unresponsive beyond the middle
of the network. In either case, edgy terminates exploration of these target /48s
rather than continuing to probe them.
These candidate target /48 preﬁxes are fed to Algorithm 2 which probes
targets within the input preﬁxes at progressively ﬁner granularities until a stop-
ping condition (a discovery threshold η) is reached. A random Interface IDenti-
ﬁer (IID) (the 64 least signiﬁcant bits in an IPv6 address) for each target subnet
is used as the trace destination. Figure 3 depicts an illustration of edgy’s ﬁrst
round behavior targeting an example /48 belonging to Cox Communications.
The ﬁrst subnet discovery round probes diﬀerent /56 preﬁxes and serves as a
coarse ﬁlter to determine which candidate /48s exhibit an appreciable amount of
subnetting and merit further probing. /56s are used initially as [28] recommends
this as a potential subnet size for residential customers; therefore, if a /48 is
allocated entirely to residential customers with /56s, the initial probing round
should discover all of the /56 allocations. We note, however, that these preﬁx
delegation boundaries are not mandatory, that it is impossible to know a priori
what preﬁx delegation strategy a provider has chosen, and that networks can be
subdivided in a non-uniform manner for allocations to customers. If the number
of distinct last hops found during a probing round exceeds the threshold η, we
further subdivide responsive preﬁxes for additional probing in the next round.
The choice and sensitivity of η are discussed in [30].
It has been shown that aliased networks are common in the IPv6 Internet,
where every address within a preﬁx is responsive despite no actual host being
present. We remove last hops equal to the probe target, as well as networks and
addresses present in the publicly curated list of aliases from Gasser et al. [16].
In addition, we remove replies from non-routable preﬁxes – we observe site-
and link-local addresses that fall into this category – as well as IPv4-in-IPv6
addresses and replies that appear to be spoofed.
After removing aliases and bogus replies, target /48s that generate >η unique
last hop addresses proceed to the second round of probing. In the second round,
edgy sends probes to addresses within each /60 of the target /48. Figure 4 depicts
an illustration of edgy’s second round behavior, again for the same Cox Commu-
nications /48. Target /48 networks that generate >η unique last hop addresses
(exclusive of aliases) move to the next round. The third probing round sends
probes to a random IPv6 address in each /62 of the target networks. Finally,
target /48s that exhibit subnetting beyond the /60 level (as evidenced by four
unique last hops for each /62 within any /60), are probed at /64 granularity.
Note that, during testing, we initially explored other periphery discovery
mechanisms. For instance, intuitively, a binary-tree discovery process that bisects
preﬁxes and probes each half would programmatically explore subnets. Unfortu-
Discovering the IPv6 Network Periphery
7
Fig. 3. A portion of a target /48
(2600:8805:9200::/48) is shown; colors
correspond to the true delegated cus-
tomer subnet sizes that edgy discov-
ers. Green represents /64, yellow /60,
and red /56. In the ﬁrst probing round,
edgy sends probes to each /56 in a tar-
get /48 (represented by arrows). (Color
ﬁgure online)
Fig. 4. In the second round, probes
are sent to each /60 in the target /48.
New addresses are discovered in the
upper half of this portion of the tar-
get address space where subnet allo-
cation is ﬁner-grained, but not in the
lower half. Many operators mix alloca-
tion sizes within the same /48.
nately, such an eﬃcient approach performs poorly as providers do not allocate
subnets uniformly. In this case, a core router can falsely appear as the common
last hop for destinations in a common preﬁx, even when signiﬁcant subnetting is
present. Additionally, the third round of probing was added to limit time spent
probing target networks at the /64 granularity to those proven to subnet within
the ﬁnal nybble of the network preﬁx.
3.2 Edgy Input
Edgy takes as input a seed set of traces. These seed traces are created from run-
ning traceroutes to corresponding seed targets. We consider two realistic poten-
tial seed target lists: BGP-informed and hitlist-informed. The BGP-informed
targets assume no prior knowledge other than global BGP advertisements. Since
BGP routes are readily available from looking glasses, this scenario is easily
replicated by anyone and models what CAIDA uses to inform their probing.
In our experiments, we utilize publicly available BGP-informed seed traces col-
lected as part of an August 2018 eﬀort to uniformly probe every /48 in the IPv6
Internet [9,29]. Herein, we term this trace seed data as the BGP-informed seed.
Second, we consider a target set informed by prior knowledge in the form of
passive traces, server logs, or hitlists. In our experiments, we utilize a publicly
available IPv6 hitlist [16] that was used to generate a seed set of hitlist-informed
traces [7]. Herein, we term this trace seed the hitlist-informed seed.
8
E. C. Rye and R. Beverly
3.3 Limitations
There are several potential complications that edgy may encounter, and corre-
sponding limitations of our approach and evaluation. First, during probing, we
depend on receiving a response from the penultimate traceroute hop along the
data path to a destination. However, the last responsive hop may instead be a
diﬀerent router due to ﬁltering, loss, or rate-limiting, i.e., if the last hop remains
anonymous. This case does not cause false inferences of periphery addresses, but
instead causes edgy to terminate probing of a preﬁx prematurely.
Second, we do not have ground-truth in order to determine whether the
periphery we discover is indeed the last hop before a destination endhost. While
various, and at times conﬂicting, guidance exists regarding the size of delegated
preﬁxes [10,19,25] discovery of unique /64s is strongly indicative of discover-
ing the periphery. Additionally, the periphery addresses we ﬁnd are frequently
formed using EUI-64 addresses where we can infer the device type based on the
encoded MAC address (see Sect. 4.5). These MAC addresses speciﬁcally point
to CPE. Further, we examine several metrics of “edginess” to better understand
the results in Sect. 4.3. In particular, we determine whether traces enter their
target network and, if so, quantify how far inside the target network they reach.
We also analyze the last hop addresses edgy discovers in order to understand
how many also appear as intermediate hops to diﬀerent targets. As intermediate
hops, such addresses are unlikely to exist in the IPv6 periphery.
3.4 Probing
Probing consists of sending hop-limited ICMPv6 packets; we used the high-speed
randomized yarrp topology prober [6] due to the large number of traces required
during edgy’s exploration, as well as to minimize the potential for ICMPv6 rate
limiting (which is mandated and common in IPv6 [7]).
We use ICMPv6 probes as these packets are designed for diagnostics and
therefore are less intrusive than UDP probes. Further, we send at a conservative
rate while yarrp, by design, randomizes its probing in order to minimize network