    Func twoParams = (x, y) => x ＊ y;
    WriteLine(twoParams(3, 2));
为了方便起见，可以在花括号中给变量名添加参数类型。如果编译器不能匹配重载后
的版本，那么使用参数类型可以帮助找到匹配的委托：
    Func twoParamsWithTypes = (double x, double y) => x 
＊ y;
    WriteLine(twoParamsWithTypes(4, 2));
9.3.2 多行代码
如果lambda表达式只有一条语句，在方法块内就不需要花括号和return语句，因为编
译器会添加一条隐式的return语句：
    Func square = x => x ＊ x;
添加花括号、return语句和分号是完全合法的，通常这比不添加这些符号更容易阅
读：
    Func square = x =>
      {
        return x ＊ x;
      }
但是，如果在lambda表达式的实现代码中需要多条语句，就必须添加花括号和return
语句：
    Func lambda = param =>
      {
        param += mid;
        param += " and this was added to the string.";
        return param;
      };
9.3.3 闭包
通过lambda表达式可以访问lambda表达式块外部的变量，这称为闭包。闭包是非常好
用的功能，但如果使用不当，也会非常危险。
在下面的示例中，Func类型的lambda表达式需要一个int参数，返回一个int
值。该lambda表达式的参数用变量x定义。实现代码还访问了lambda表达式外部的变量
someVal。只要不假设在调用f时，lambda表达式创建了一个以后使用的新方法，这似乎没
有什么问题。看看下面这个代码块，调用f的返回值应是x加5的结果，但实情似乎不是这
样：
    int someVal = 5;
    Func f = x => x + someVal;
假定以后要修改变量someVal，于是调用lambda表达式时，会使用someVal的新值。
调用f（3）的结果是10：
    someVal = 7;
    WriteLine(f(3));
同样，在lambda表达式中修改闭包的值时，可以在lambda表达式外部访问已改动的
值。
现在我们也许会奇怪，如何在lambda表达式的内部访问lambda表达式外部的变量。为
了理解这一点，看看编译器在定义lambda表达式时做了什么。对于lambda表达式x => x +
someVal，编译器会创建一个匿名类，它有一个构造函数来传递外部变量。该构造函数取
决于从外部访问的变量数。对于这个简单的例子，构造函数接受一个int值。匿名类包含
一个匿名方法，其实现代码、参数和返回类型由lambda表达式定义：
    public class AnonymousClass
    {
      private int someVal;
      public AnonymousClass(int someVal)
      {
      this.someVal = someVal;
      }
      public int AnonymousMethod(int x) => x + someVal;
    }
使用lambda表达式并调用该方法，会创建匿名类的一个实例，并传递调用该方法时变
量的值。
  注意： 如果给多个线程使用闭包，就可能遇到并发冲突。最好仅给闭包使用
不变的类型。这样可以确保不改变值，也不需要同步。
  注意： lambda表达式可以用于类型为委托的任意地方。类型是Expression或
Expression时，也可以使用lambda表达式，此时编译器会创建一个表达式树。该功
能的介绍详见第11章。
9.4 事件
事件基于委托，为委托提供了一种发布/订阅机制。在.NET架构内到处都能看到事
件。在Windows应用程序中，Button类提供了Click事件。这类事件就是委托。触发Click事
件时调用的处理程序方法需要得到定义，而其参数由委托类型定义。
在本节的示例代码中，事件用于连接CarDealer类和Consumer类。CarDealer类提供了
一个新车到达时触发的事件。Consumer类订阅该事件，以获得新车到达的通知。
9.4.1 事件发布程序
我们从CarDealer类开始介绍，它基于事件提供一个订阅。CarDealer类用event关键字
定义了类型为EventHandler的NewCarInfo事件。在NewCar（）方法
中，通过调用RaiseNewCarInfo方法触发NewCarInfo事件。这个方法的实现确认委托是否
为空，如果不为空，就引发事件（代码文件EventSample/CarDealer.cs）：
    using static System.Console;
    using System;
    namespace Wrox.ProCSharp.Delegates
    {
      public class CarInfoEventArgs: EventArgs
      {
        public CarInfoEventArgs(string car)
        {
          Car = car;
        }
        public string Car { get; }
      }
      public class CarDealer
      {
        public event EventHandler NewCarInfo;
        public void NewCar(string car)
        {
          WriteLine($"CarDealer, new car {car}");
          NewCarInfo? .Invoke(this, new CarInfoEventArgs(car));
        }
      }
    }
  注意： 前面例子中使用的空传播运算符.？是C# 6新增的运算符。这个运算符
的讨论参见第8章。
CarDealer类提供了EventHandler类型的NewCarInfo事件。作为一
个约定，事件一般使用带两个参数的方法；其中第一个参数是一个对象，包含事件的发送
者，第二个参数提供了事件的相关信息。第二个参数随不同的事件类型而改变。.NET 1.0
为所有不同数据类型的事件定义了几百个委托。有了泛型委托EventHandler后，就不
再需要委托了。EventHandler定义了一个处理程序，它返回void，接受两个
参数。对于EventHandler，第一个参数必须是object类型，第二个参数是T类
型。EventHandler还定义了一个关于T的约束；它必须派生自基类EventArgs,
CarInfoEventArgs就派生自基类EventArgs：
    public event EventHandler NewCarInfo;
委托EventHandler的定义如下：
    public delegate void EventHandler(object sender, TEventArgs e)
        where TEventArgs: EventArgs
在一行上定义事件是C#的简化记法。编译器会创建一个
EventHandler委托类型的变量，并添加方法，以便从委托中订阅和取
消订阅。该简化记法的较长形式如下所示。这非常类似于自动属性和完整属性之间的关
系。对于事件，使用add和remove关键字添加和删除委托的处理程序：
    private EventHandler newCarInfo;
    public event EventHandler NewCarInfo
    {
      add
      {
        newCarInfo += value;
      }
      remove
      {
        newCarInfo -= value;
      }
    }
  注意： 如果不仅需要添加和删除事件处理程序，定义事件的长记法就很有
用，例如，需要为多个线程访问添加同步操作。WPF控件使用长记法给事件添加冒泡
和隧道功能。事件的冒泡和隧道详见第29章。
CarDealer类通过调用委托的RaiseNewCarInfo方法触发事件。使用委托NewCarInfo和
花括号可以调用给事件订阅的所有处理程序。注意，与之前的多播委托一样，方法的调用
顺序无法保证。为了更多地控制处理程序的调用，可以使用Delegate类的
GetInvocationList（）方法，访问委托列表中的每一项，并独立地调用每个方法，如上所
示。
    NewCarInfo? .Invoke(this, new CarInfoEventArgs(car));
触发事件是只包含一行代码的程序。然而，这只是C# 6的功能。在C# 6版本之前，触
发事件会更复杂。这是C# 6之前实现的相同功能。在触发事件之前，需要检查事件是否为
空。因为在进行null检查和触发事件之间，可以使用另一个线程把事件设置为null，所以
使用一个局部变量，如下所示：
    EventHandler newCarInfo = NewCarInfo;
    if (newCarInfo ! = null)
    {
      newCarInfo(this, new CarInfoEventArgs(car));
    }
在C # 6中，所有这一切都可以使用null传播运算符和一个代码行取代，如前所示。
在触发事件之前，需要检查委托NewCarInfo是否不为空。如果没有订阅处理程序，委
托就为空：
    protected virtual void RaiseNewCarInfo(string car)
    {
      NewCarInfo? .Invoke(this, new CarInfoEventArgs(car));
    }
9.4.2 事件侦听器
Consumer类用作事件侦听器。这个类订阅了CarDealer类的事件，并定义了
NewCarIsHere方法，该方法满足EventHandler委托的要求，该委托的
参数类型是object和CarInfoEventArgs（代码文件EventsSample/Consumer.cs）：
    using static System.Console;
    namespace Wrox.ProCSharp.Delegates
    {
      public class Consumer
      {
        private string _name;
        public Consumer(string name)
        {
        _name = name;
        }
        public void NewCarIsHere(object sender, CarInfoEventArgs e)
        {
        WriteLine($"{_name}: car {e.Car} is new");
        }
      }
    }
现在需要连接事件发布程序和订阅器。为此使用CarDealer类的NewCarInfo事件，通
过“+=”创建一个订阅。消费者michael（变量）订阅了事件，接着消费者sebastian（变量）
也订阅了事件，然后michael（变量）通过“-=”取消了订阅（代码文件
EventsSample/Program.cs）。
    namespace Wrox.ProCSharp.Delegates
    {
      class Program
      {
        static void Main()
        {
        var dealer = new CarDealer();
        var daniel = new Consumer("Daniel");
        dealer.NewCarInfo += michael.NewCarIsHere;
        dealer.NewCar("Mercedes");
        var sebastian = new Consumer("Sebastian");
        dealer.NewCarInfo += sebastian.NewCarIsHere;
        dealer.NewCar("Ferrari");
        dealer.NewCarInfo -= sebastian.NewCarIsHere;
        dealer.NewCar("Red Bull Racing");
        }
      }
    }
运行应用程序，一辆Mercedes汽车到达，Daniel得到了通知。因为之后Sebastian也注
册了该订阅，所以Daniel和Sebastian都获得了新款Ferrari汽车的通知。接着Sebastian取消
了订阅，所以只有Daniel获得了Red Bull汽车的通知：
    CarDealer, new car Mercedes
    Daniel: car Mercedes is new
    CarDealer, new car Ferrari
    Daniel: car Ferrari is new
    Sebastian: car Ferrari is new
    CarDealer, new car Red Bull Racing
    Daniel: car Red Bull is new
9.4.3 弱事件
通过事件，可直接连接发布程序和侦听器。但是，垃圾回收方面存在问题。例如，如
果不再直接引用侦听器，发布程序就仍有一个引用。垃圾回收器不能清空侦听器占用的内
存，因为发布程序仍保有一个引用，会针对侦听器触发事件。
这种强连接可以通过弱事件模式来解决，即使用WeakEventManager作为发布程序和
侦听器之间的中介。
前面的示例把CarDealer作为发布程序，把Consumer作为侦听器，本节将修改这个示
例，以使用弱事件模式。
WeakEventManager 在System.Windows程序集中定义，不属于.NET Core。这个
示例用.NET Framework 4.6控制台应用程序完成，不运行在其他平台上。
  注意： 动态创建订阅器时，为了避免出现资源泄露，必须特别留意事件。也
就是说，需要在订阅器离开作用域（不再需要它）之前，确保取消对事件的订阅，或
者使用弱事件。事件常常是应用程序中内存泄露的一个原因，因为订阅器有长时间存
在的作用域，所以源代码也不能被垃圾回收。
使用弱事件，就不需要改变事件发布器（在示例代码CarDealer类中）。无论使用紧
密耦合的事件还是弱事件都没有关系，其实现是一样的。不同的是使用者的实现。使用者
需要实现接口IWeakEventListener。这个接口定义了方法ReceiveWeakEvent，在事件触发
时会在弱事件管理器中调用该方法。该方法的实现充当代理，调用方法NewCarIsHere（代
码文件WeakEvents/Consumer.cs）：
    using System;
    using static System.Console;
    using System.Windows;
    namespace Wrox.ProCSharp.Delegates
    {
      public class Consumer: IWeakEventListener
      {
        private string _name;
        public Consumer(string name)
        {
        this._name = name;
        }
        public void NewCarIsHere(object sender, CarInfoEventArgs e)
        {
        WriteLine("\{_name}: car \{e.Car} is new");
        }
        bool IWeakEventListener.ReceiveWeakEvent(Type managerType,
          object sender, EventArgs e)
        {
        NewCarIsHere(sender, e as CarInfoEventArgs);
        return true;
        }
      }
    }
在Main方法中，连接发布器和监听器，目前使用WeakEventManager 类的静态AddHandler和RemoveHandler方法建立连接（代码文件
WeakEventsSample/Program.cs）：
    var dealer = new CarDealer();
    var daniel = new Consumer("Daniel");
    WeakEventManager.AddHandler(dealer,
        "NewCarInfo", daniel.NewCarIsHere);
    dealer.NewCar("Mercedes");
    var sebastian = new Consumer("Sebastian");
    WeakEventManager.AddHandler(dealer,
        "NewCarInfo", sebastian.NewCarIsHere);
    dealer.NewCar("Ferrari");
    WeakEventManager.RemoveHandler(dealer,
        "NewCarInfo", sebastian.NewCarIsHere);
    dealer.NewCar("Red Bull Racing");
9.5 小结
本章介绍了委托、lambda表达式和事件的基础知识，解释了如何声明委托，如何给委
托列表添加方法，如何实现通过委托和lambda表达式调用的方法，并讨论了声明事件处理
程序来响应事件的过程，以及如何创建自定义事件，使用引发事件的模式。
在设计大型应用程序时，使用委托和事件可以减少依赖性和各层的耦合，并能开发出
具有更高重用性的组件。
lambda表达式是基于委托的C#语言特性，通过它们可以减少需要编写的代码量。
lambda表达式不仅仅用于委托，详见第13章。
第10章介绍字符串和正则表达式的使用。
第10章
字符串和正则表达式
本章要点
● 创建字符串
● 格式化表达式
● 使用正则表达式
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● StringSample
● StringFormats
● RegularExpressionPlayground
从本书一开始，我们就在使用字符串，因为每个程序都需要字符串。但读者可能没有
意识到，在C#中string关键字的映射实际上指向.NET基类System.String。System.String是一
个功能非常强大且用途广泛的基类，但它不是.NET库中唯一与字符串相关的类。本章首
先复习一下System.String的特性，再介绍如何使用其他的.NET库类来处理字符串，特别是
System.Text和System.Text.RegularExpressions名称空间中的类。本章主要介绍下述内容：