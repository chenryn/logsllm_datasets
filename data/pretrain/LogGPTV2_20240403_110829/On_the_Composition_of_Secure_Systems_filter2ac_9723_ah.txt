 E1 = ˘
(E1 \ ( I1 ¨
(E2 \ ( I2 ¨
- 47 -
then  the  compostion  of  S1  and  S2  produces  a  new  component
S= such that:
E = E1 ¨  E2
I =  I1 ¨
O =  (O1 \ I2) ¨
and T = { a˛ E* such that a|E1˛ T1 (cid:217)  a|E2 ˛ T2}
 (I2 \ O1)
 O2
Notice that  the  cascade  composition  is  not  a  symmetric  operation.    The  cascade
composition of S1 and S2 is not equal to the cascade composition of  S2  and  S1.    In  this
work we will use the convention that component S1 will be the left component of Figure
5.1 and component S2 will be the right component.
The definition of cascade composition implies the following:
 I2 = C
O1 ˙
HI = HI1 ¨
HO = HO1\HI2 ¨
T1 = T|E1
T2 ˝
 T|E2
 HI2\HO1
 HO2
Given components S1 and S2 that satisfy properties P1 and P2 respectively, we can
ask “what property does the cascade composition of S1 and S2 satisfy?”  The definition of
cascade composition yields:
= "
1:traces(S1)(cid:215) P1(Blow(t 1,S1))(cid:217)
1:traces(S1)(cid:215)
2:traces(S2)(cid:215) P1(Blow(t 1,S1))(cid:217)
2:traces(S2)(cid:215) P2(Blow(t 2,S2))
 P2(Blow(t 2,S2))
traces(S) : interleave(traces(S1),traces(S2))
Distributive Laws
:traces(S)(cid:215) P1(Blow(t|E
1,S1))(cid:217)
 P2(Blow(t
|E2,S2))
To proceed further we must substitute the expressions for each of the properties.
The resulting expression will indicate the property that the composed system satisfies. A
special case of the above is when P1=P2=P. If after the simplification the composed system
can be seen to satisfy P then the  property  is  a  component  independent  property.    If  the
resulting expression does not yield that the composed system satisfies P then the system
satisfies  a  component  dependent  property.    We  will  continue  by  demonstrating  how  to
proceed by a series of examples.
  The following lemma is useful in determining the effect of cascade composition.
It states that if there exists a trace in each component’s low level equivalent bunch such
- 48 -
"
t
"
t
t
"
t
(cid:222)
"
t
that  the  communication  events  are  the  same  and  the  traces  satisfy  some  predicate  then
there exists a trace in the low level equivalent bunch of the composite system that satisfies
the same predicate.
Lemma 5.1:
Proof:
|L1,S1)(cid:215)
$ t1:Blow(t
b(t|E1,t|E2), where b is any predicate
$ t2:Blow(t
|L2,S2)(cid:215) t1|C˙ H=t2|C˙ H(cid:217) b(t1,t2)  (cid:219)
  $ t:Blow(t ,S)(cid:215)
$ t1:Blow(t
|L1,S1)(cid:215)
= $ t1:[§s1:traces(S1)(cid:215)
$ t2:Blow(t
|L2,S2)(cid:215) t1|C˙ H=t2|C˙ H(cid:217) b(t1,t2)
|L1=s1|L1](cid:215)
$ t1:[§s2:traces(S2)(cid:215)
= $ t1:traces(S1)(cid:215)
$ t2:traces(S2)(cid:215)  t
|L1=t1|L1(cid:217) t
= $ t1:traces(S1)(cid:215)
$ t2:traces(S2)(cid:215)  t
|L1=t1|L1(cid:217) t
= $ t:traces(S)(cid:215)  t
= $ t:[§s:traces(S)(cid:215)
= $ t:Blow(t ,S)(cid:215) b(t|E1,t|E2)
|L=t|L (cid:217)  b(t|E1,t|E2)
|L=s|L](cid:215) b(t|E1,t|E2)
Definition of Blow
|L2=s2|L2](cid:215)  t1|C˙ H=t2|C˙ H(cid:217) b(t1,t2)
Definition of §
|L2=t2|L2(cid:217)
 t1|C˙ H=t2|C˙ H(cid:217) b(t1,t2)
Since t1|C˙ L = t2|C˙ L
|L2=t2|L2(cid:217)
 t1|C =t2|C(cid:217) b(t1,t2)
t1|C =t2|C and interleave(t1,t2):traces(S)
Definition of §
Definition of Blow
G
The first example we present proves that Generalized Noninterference is cascade
composable.  This result is not new and has already been proven [McLean94] [Zakinthinos
& Lee95].  We present it here because Generalized Noninterference has been extensively
studied  and  no  work  would  be  complete  without  demonstrating  that  it  can  duplicate
known results.
Example 5.1: In  this  example  we  will  prove  that  the  cascade  composition  of  two
components  that  satisfy  the  Generalized  Noninterference  property  will  also  satisfy  this
property.
1:traces(S1)|L(cid:215)
2:traces(S2)|L(cid:215)
t1:interleave(HI1
*,t 1)(cid:215)
t2:interleave(HI2
$ s1:Blow(t 1,S1)(cid:215) t1=s1|L1¨ HI1 (cid:217)
*,t 2)(cid:215)
$ s2:Blow(t 2,S2)(cid:215) t2=s2|L2¨ HI2
traces(S) : interleave(traces(S1),traces(S2))
:traces(S)|L(cid:215)
t1:interleave(HI1
*,t
|E1)(cid:215)
$ s1:Blow(t 1,S1)(cid:215) t1=s1|L1¨ HI1 (cid:217)
t2:interleave(HI2
*,t
|E2)(cid:215)
$ s2:Blow(t 2,S2)(cid:215) t2=s2|L2¨ HI2
:traces(S)|L(cid:215)
|E1)(cid:215)  "
$ s2:Blow(t 2,S2)(cid:215)  s1|HO1˙ C=s2|HI2˙ C (cid:217)
t1:interleave(HI1
*,t
t2:interleave((HI2\C)*,t
 t1=s1|L1¨ HI1 (cid:217)
Distributive Law
$ s1:Blow(t 1,S1)(cid:215)
|E2)(cid:215)
 t2=s2|L2¨ HI2
Lemma 5.1 and Simplification
t:interleave((HI1¨ HI2\C)*,t )(cid:215)
$ s:Blow(t ,S)(cid:215)  t|E1=s|L1¨ HI1 (cid:217)
= "
:traces(S)|L(cid:215)
t|E2=s|L2¨ HI2\C
Cascade Composition and Distributive Law
- 49 -
t
t
t
"
t
"
"
t
"
(cid:222)
"
t
"
"
(cid:222)
"
t
"
t
"
= "
= "
:traces(S)|L(cid:215)
t:interleave(HI*,t )(cid:215)
$ s:Blow(t ,S)(cid:215)  t=s|L¨
(HI1 ¨ HI2\C)
Cascade Composition (HI=HI1¨ HI2\C)
:traces(S)|L(cid:215)
t:interleave(HI*,t )(cid:215)  $ s:Blow(t ,S)(cid:215)  t=s|L¨ HI
Therefore, 
the  composition  of 
two  components 
that  satisfy  Generalized
Noninterference also satisfies Generalized Noninterference. 
G
Example 5.2: In  this  example  we  will  determine  if  Generalized  Noninference  (section
4.4.1, page 34) is a composable security property.  O’Halloran [O’Halloran90] has proven
that Noninference is composable and McLean [McLean94] has “proven” using Selective
Interleaving Functions that Generalized Noninference is cascade composable.  As will be
shown McLean’s result is wrong.  McLean’s error comes from the incorrect application of
one of his theorems.
1:traces(S1)|L(cid:215)
$ t1:Blow(t 1,S1)(cid:215) t1|HI1=<> (cid:217)
1:traces(S1)|L(cid:215)
$ t2:Blow(t 2,S2)(cid:215) t2|HI2=<>
 "
traces(S) : interleave(traces(S1),traces(S2))
 $ t2:Blow(t
|L2,S2)(cid:215) t2|HI2=<>
:traces(S)|L(cid:215)
$ t1:Blow(t
|E1,S1)(cid:215) t1|HI1=<> (cid:217)
= "
:traces(S)|L(cid:215)
$ t1:Blow(t
|E1,S1)(cid:215)  $ t2:Blow(t
|L2,S2)(cid:215) t1|HI1=<> (cid:217)
Distributive Law
 t2|HI2=<>
We cannot progress any further.  The high outputs of the first component may not
be <>.  They may be.  However, the property does not guarantee that such a trace exists.
Therefore, Generalized Noninference is not a component independent property.  With this
analysis, however, we can easily determine what conditions are required for it to compose.
Since the second component  requires  the  high  level  communication  events  to  be  <>  we
can  require  the  high  level  outputs  of  the  first  component  be  <>6.    Notice  that  this  is
Noninference which was proven by O’Halloran to be composable.  With this requirement
the interface requirement can be satisfied.
G
In the above example it was easy to see that the composition would not succeed
because nothing could be said about the behaviour of the component when the high level
input sequence was not <>.  In a more complex property this type of observation may not
be  as  obvious.    If  compatible  communication  events  cannot  be  guaranteed  then  the
property  will  not  be  composable.    Therefore,  compatible  communication  events  are  a
6 
Only the high level communication events being <> would suffice.
- 50 -
t
"
t
"
"
t
t
(cid:222)
"
t
t
necessary condition for a property to be component independent.  The following steps can
be used to determine the conditions that are being imposed on the communication events.
1.   For component S1 write the expression for all traces that look like a trace t
2.   Take any trace r that looks like t
low and restrict the trace to the communication events.
low of S1.
Note that if the property does not specify a restriction on a particular class of events,
for example high level outputs, then it must be assumed that any sequence of events
from this class can occur7.
3.   For component S2 write the expression for all traces that look like a trace t
4.   Take  any  trace  s  that  looks  like  t
low  and  list  the  properties  satisfied  by  the
low of S2.
communication events.  The same comment as the one is number 2 applies.
5.   Compare  the  sequences  generated  by  2  and  4.    The  comparison  will  indicate  what
additional restrictions are required.
Example 5.3:  We will apply the above procedure to Generalized Noninference.
1.   For the first component we know the bunch of traces that look like a trace t
low of S1 is:
§t:traces(S)(cid:215) t|L=t
low|L(cid:217) HI=<>
2.   Let r be any trace of this bunch.  Restricting to its communication events it can be seen
low|L˙ C.  Since nothing is specified about the high level outputs we must
that r|L˙ C=t
assume that they can be anything r|H˙ C:(H˙ C)*.
3.   Proceeding in the same fashion for the second component:
§t:traces(S)(cid:215) t|L=t
low|L(cid:217) HI=<>
4.   Let s be any trace of this bunch.  Restricting it to its communication events results in
low|L˙ C.  Since some of the high level inputs of S2 are now communication
s|L˙ C=t
events t|H˙ C=<>.
5.   Comparing the communication events found in 2 and 4 we see that the low level
events are compatible8 but the high level outputs are not necessarily compatible.
The conclusions are the same as those found in Example 5.2.
G
7 
This is a pessimistic view.  If other information is known about the class then that can be used
instead.
8 
This will always be true of security properties.
- 51 -
This type of analysis performed in the previous example is quick and easy but the
benefits  may  not  be  obvious.    The  following  conjecture  will  clarify  why  we  believe  this
analysis is useful.
Conjecture 5.1:
If  components  S1  and  S2  satisfy  security  properties  P1  and  P2
respectively,  and  P1  and  P2  guarantee  compatible  communication
events,  then  the  cascade  composition  of  S1  and  S2  will  satisfy  all
properties P such that P1(cid:222) P and P2(cid:222) P.
The following example will illustrate how to apply the techniques presented above
to determine what property will be satisfied by the composition of two components that
each satisfy different properties
Example 5.4: In this example we will determine what property the resulting system will
satisfy  if  component  S1  satisfies  Noninference  and  component  S2  satisfies  Generalized
Noninterference.