### 3. A Routing Algebra Metalanguage

A metarouting language is a formalism that allows the definition of routing protocols, \( RP \), as:
\[ RP = \langle A, M, LM \rangle, \]
where \( A \) is a routing algebra, \( M \) is a set of mechanisms associated with routing adjacencies (multiple mechanisms may be used for the same protocol), and \( LM \) is a set of label modalities described in Section 6.

Constructing new routing algebras, especially complex ones, can be a challenging and tedious task, particularly when proving monotonicity conditions. To address this, we introduce a Routing Algebra Meta-Language (RAML) for specifying new routing algebras. RAML is designed to ensure that every expression represents a valid routing algebra, although not all routing algebras can be expressed in RAML. In return, RAML automatically derives monotonicity conditions, similar to type systems in programming languages, eliminating the need for manual proofs.

### 3.1 Lexical Product, \( A \otimes B \)

We begin by defining binary operations on routing algebras. Given two routing algebras:
\[ A = \langle \Sigma_A, \preceq_A, L_A, \oplus_A, O_A \rangle, \]
\[ B = \langle \Sigma_B, \preceq_B, L_B, \oplus_B, O_B \rangle, \]
we aim to construct a new routing algebra \( A \otimes B \):
\[ A \otimes B = \langle \Sigma, \preceq, L, \oplus, O \rangle. \]

The goal is to define each operator in a simple and natural way. One approach is to use the product \( \Sigma_A \times \Sigma_B \) and define the lexicographic preference relation \( \preceq \) as:
\[ \langle \sigma_A, \sigma_B \rangle \preceq \langle \beta_A, \beta_B \rangle \quad \text{if} \quad \sigma_A \prec_A \beta_A \quad \text{or} \quad (\sigma_A \sim_A \beta_A \quad \text{and} \quad \sigma_B \preceq_B \beta_B). \]

If either \( \Sigma_A \) or \( \Sigma_B \) contains the prohibited signature \( \phi \), we define \( \Sigma \) as:
\[ \Sigma = ((\Sigma_A - \{\phi\}) \times (\Sigma_B - \{\phi\})) \cup \{\phi\}, \]
and extend the definition of \( \preceq \) so that \( \langle \sigma_A, \sigma_B \rangle \prec \phi \) for all \( \langle \sigma_A, \sigma_B \rangle \in \Sigma \).

To apply labels to product signatures, we define \( O \) as \( O_A \times O_B \) and \( L \) as \( L_A \times L_B \). The operation \( \oplus \) is defined as:
\[ \langle \lambda_A, \lambda_B \rangle \oplus \langle \sigma_A, \sigma_B \rangle = \langle \lambda_A \oplus_A \sigma_A, \lambda_B \oplus_B \sigma_B \rangle, \]
where \( \lambda_i \in L_i \) and \( \sigma_i \in \Sigma_i \). If either \( \lambda_A \oplus_A \sigma_A \) or \( \lambda_B \oplus_B \sigma_B \) is equal to \( \phi \), then:
\[ \langle \lambda_A, \lambda_B \rangle \oplus \langle \sigma_A, \sigma_B \rangle = \phi. \]
Additionally, it is always true that:
\[ \langle \lambda_A, \lambda_B \rangle \oplus \phi = \phi. \]

Product algebras are useful for routing protocols with multiple metrics. For example, BGP route selection can be modeled as a lexicographic comparison of multiple attributes (see Section 5 for details). OSPF also uses a lexicographic ordering, where an OSPF signature is a pair \( \langle \alpha, d \rangle \), with \( \alpha \) containing area information and \( d \) representing distance. Intra-area routes are preferred over inter-area routes, which can be achieved with lexicographic preference (see Section 7 for more details).

The binary lexical product generalizes to an n-ary lexical product:
\[ \otimes(A_1, A_2, \ldots, A_n). \]

For ease of notation, we introduce the unary operator \( a : A \), which produces a routing algebra identical to \( A \), but with each signature now a pair \( \langle a, \sigma \rangle \), usually written as \( a : \sigma \). A fully labeled n-ary product can then be written as:
\[ \otimes(a_1 : A_1, a_2 : A_2, \ldots, a_n : A_n), \]
where the \( a_i \) are unique labels associated with the sub-algebras. All (non-\( \phi \)) signatures then have the form:
\[ \langle a_1 : \sigma_1, a_2 : \sigma_2, \ldots, a_n : \sigma_n \rangle. \]

If all attributes of a product are uniquely labeled, the implementation does not need to enforce a strict order on the sequence of values in a tuple.

Another useful feature, present in BGP, is the ability to have optional attributes. There are several ways to implement this in RAML, each with slightly different semantics. Although optional arguments may seem trivial, they illustrate the metarouting approach. Our goal is to preserve algebraic properties such as M and SM, providing a rigorous framework to explore alternative definitions without the complexities of specific routing protocols.

First, we must decide how missing values are treated by the preference relation. Suppose we are defining a version of \( A \otimes B \) where the first element is optional, denoted as \( A? \otimes B \). We need to specify how the preference relation handles missing values.