    RAX: 0x55b25f34d430 --> 0x55b2deadbeef 
    RDX: 0xdeadbeef [-------------------------------------code-------------------------------------]
       0x55b25db4e700 :mov    DWORD PTR [rax],edx
    => 0x55b25db4e702 :add    DWORD PTR [rbp-0xe4],0x4
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    1083                size += 4;
    gdb-peda$ x/10x 0x55b25f34d430//拷贝结束后deadbeef覆盖了irq结构
    0x55b25f34d430:0x000055b2deadbeef0x000055b25db4be11
当我们覆盖irq结构后，在pcnet_receive函数结束时更新irq结构，调用关系是pcnet_receive()->pcnet_update_irq()->qemu_set_irq()
    RDI: 0x55b2deadbeef 
       0x55b25db4d31d :mov    esi,edx
       0x55b25db4d31f :mov    rdi,rax
    => 0x55b25db4d322 :
        call   0x55b25daf6c86 
这时，irq的值已经被覆盖了，我们跟入qemu_set_irq，这个函数在/path/to/qemu/hw/core/irq.c中。
    gdb-peda$ disas qemu_set_irq
    Dump of assembler code for function qemu_set_irq:
       0x000055b25daf6c86 :push   rbp
       0x000055b25daf6c87 :mov    rbp,rsp
       0x000055b25daf6c8a :sub    rsp,0x10
       0x000055b25daf6c8e :mov    QWORD PTR [rbp-0x8],rdi
       0x000055b25daf6c92 :mov    DWORD PTR [rbp-0xc],esi
       0x000055b25daf6c95 :cmp    QWORD PTR [rbp-0x8],0x0
       0x000055b25daf6c9a :je     0x55b25daf6cbd 
    => 0x000055b25daf6c9c :mov    rax,QWORD PTR [rbp-0x8]
       0x000055b25daf6ca0 :mov    rax,QWORD PTR [rax+0x30]
       0x000055b25daf6ca4 :mov    rdx,QWORD PTR [rbp-0x8]
       0x000055b25daf6ca8 :mov    esi,DWORD PTR [rdx+0x40]
       0x000055b25daf6cab :mov    rdx,QWORD PTR [rbp-0x8]
       0x000055b25daf6caf :mov    rcx,QWORD PTR [rdx+0x38]
       0x000055b25daf6cb3 :mov    edx,DWORD PTR [rbp-0xc]
       0x000055b25daf6cb6 :mov    rdi,rcx
       0x000055b25daf6cb9 :call   rax
       0x000055b25daf6cbb :jmp    0x55b25daf6cbe 
       0x000055b25daf6cbd :nop
       0x000055b25daf6cbe :leave  
       0x000055b25daf6cbf :ret    
    End of assembler dump.
这里rax会作为s->irq被引用，+0x30位置存放的是handler，这个值会作为一个函数被引用，可以看上面汇编call
rax，这也正是我们可以通过构造fake
irq结构体来控制rip的方法，而这里由于0xdeadbeef的覆盖，引用的是无效地址，从而引发了异常，导致qemu崩溃。
    gdb-peda$ x/10x 0x55b2deadbeef 
    0x55b2deadbeef:Cannot access memory at address 0x55b2deadbeef
    gdb-peda$ si
    Thread 3 "qemu-system-x86" received signal SIGSEGV, Segmentation fault.
**0x04 补丁对比**
QEMU针对这两个CVE漏洞进行了修补，首先是CVE-2015-5165的patch，在rtl8139_cplus_transmit_one函数中，在be16_to_cpu(ip->ip_len)-hlen之间做了一个判断，首先是单独执行be16_to_cpu()。
    gdb-peda$ si
    [----------------------------------registers-----------------------------------]
    RDI: 0x1300 //ip->ip_len
    [-------------------------------------code-------------------------------------]
       0x5599f558bd83 :movzx  eax,ax
       0x5599f558bd86 :mov    edi,eax
    => 0x5599f558bd88 :
        call   0x5599f55881f7 
       0x5599f558bd8d :
        mov    WORD PTR [rbp-0x14a],ax
       0x5599f558bd94 :
        movzx  eax,WORD PTR [rbp-0x14a]
       0x5599f558bd9b :
        cmp    eax,DWORD PTR [rbp-0x118]
       0x5599f558bda1 :
        jl     0x5599f558c5d5 
    Guessed arguments:
    arg[0]: 0x1300 
    Legend: code, data, rodata, value
    0x00005599f558bd882126            ip_data_len = be16_to_cpu(ip->ip_len);
在be16_to_cpu之后，值仍然会变成0x13，但是不会直接和hlen相减，而是和hlen做了一个判断。
    Legend: code, data, rodata, value
    0x00005599f558bd9b2127            if (ip_data_len  eth_payload_len) {
    gdb-peda$ info register eax
    eax            0x130x13
    gdb-peda$ x 0x7f1f47693830-0x118
    0x7f1f47693718:0x0000080000000014
如果小于，则会跳转到skip offload分支，直接将save_buffer交还缓冲区，并且增加计数，而不会进行后续处理。
    gdb-peda$ si
    [-------------------------------------code-------------------------------------]
       0x5599f558c5d1 :nop
       0x5599f558c5d2 :
        jmp    0x5599f558c5d5 
       0x5599f558c5d4 :nop
    => 0x5599f558c5d5 :
        mov    rax,QWORD PTR [rbp-0x158]
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    2330        ++s->tally_counters.TxOk;
    skip_offload:
            /* update tally counter */
            ++s->tally_counters.TxOk;
    ……
来看一下补丁前后的对比。
关于CVE-2015-7504的修补在那个位置的上面增加了一处判断。
这里对size的大小进行了判断，给4096字节的buffer留出了4字节存放fcs的值，这里有个比较有意思的事情，就是刚开始我以为这里修补了漏洞，但是我在这个函数下断点的时候，却意外的发现没有命中而是直接退出了。
所以好奇跟了一下，发现实际上真正封堵这个漏洞的是在外层调用pcnet_transmit函数中，在外层函数中会有另外一处判断。
    gdb-peda$ p *(struct PCNetState_st*)0x55e53ecafc80
    $2 = {
      ……
      xmit_pos = 0x0, 
      ……}
    //关键判断
    gdb-peda$ si
    [----------------------------------registers-----------------------------------]
    RAX: 0x1000 //bcnt
    RDX: 0x0 //s->xmit_pos
    EFLAGS: 0x206 (carry PARITY adjust zero sign trap INTERRUPT direction overflow)
    [-------------------------------------code-------------------------------------]
       0x55e53c39cc26 :mov    rax,QWORD PTR [rbp-0x58]
       0x55e53c39cc2a :mov    edx,DWORD PTR [rax+0x218c]
       0x55e53c39cc30 :mov    eax,DWORD PTR [rbp-0x3c]
    => 0x55e53c39cc33 :add    eax,edx
       0x55e53c39cc35 :cmp    eax,0xffc
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x000055e53c39cc331250        if (s->xmit_pos + bcnt > sizeof(s->buffer) - 4) {
这里s->buffer的大小为4096，为它留出4字节的空间给CRC校验，也就是当我们长度设置为4096，这里xmit_pos为0，bcnt为4096，那么是不满足要求的，则在这里就进入异常处理。
    [-------------------------------------code-------------------------------------]
       0x55e53c39cc35 :cmp    eax,0xffc
       0x55e53c39cc3a :
        jbe    0x55e53c39cc4f 
       0x55e53c39cc3c :mov    rax,QWORD PTR [rbp-0x58]
    => 0x55e53c39cc40 :
        mov    DWORD PTR [rax+0x218c],0xffffffff
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x000055e53c39cc401251            s->xmit_pos = -1;
    gdb-peda$ p *(struct PCNetState_st*)0x55e53ecafc80
    $2 = {
      ……
      xmit_pos = 0xffffffff, 
      ……}
而在后面的代码逻辑中，最后传入漏洞函数的size大小，就是s->xmit_pos+bcnt，因此外层函数一定满足size