这个漏洞，我劝你耗⼦尾
汁 酒仙桥六号部队
_ -
MdEditor
“ 这个漏洞，我劝你耗⼦尾汁
前⾔
最近在某论坛上看到⼀篇分析 74cms 存在模板解析漏洞
的⽂章，74cms 使⽤了 tp3 的框架，然后⾃⼰对 tp 框
架的模板解析渲染也不是很熟，就想着学习⼀下这个漏
洞，顺便熟悉⼀下 tp3 的模板解析。说⼲就⼲，先挑⼀
个软⼀点的 74cms 捏⼀下，cms 版本：v6.0.20。
漏洞分析
对⼀个已知漏洞进⾏分析⽐较喜欢采⽤溯源的⽅式进⾏，
⾸先已知漏洞点的位
置：/Application/Common/Controller/BaseController
.class.php，触发⽅法：assign_resume_tpl。
在第 175 ⾏调⽤了 fetch ⽅法，⽽在 tp3 框架内，所有
的控制器都是继承⾃⽗
类：/ThinkPHP/Library/Think/Controller.class.php，
所以我们直接跟进到⽗类当中，来查看这个 fetch ⽅法
到底发⽣了什么。这⾥要注意⼀下，传递的变量 $tpl 是
要被解析的模板路径。
来到⽗类当中，可以看到这个 fetch ⽅法是来⾃于构造
⽅法中实例化的 view 对象。
view 视图类的位置
在：/ThinkPHP/Library/Think/View.class.php。所以
还是继续跟进到视图类当中，这⾥还是要注意参数的传
递，在第 84 ⾏中可以看到，调⽤ fetch 函数时传递三个
参数，参数 $templateFile 是之前传递的被解析模板的路
径，$content 和 $prefix 两个参数都为空。接着来看视
图类当中的 fetch 函数，先上代码。
⾸先判断 $content 参数是否为空，根据上⾯的传参，
$content 变量为空，然后调⽤ parseTemplate 函数，
传递 $templateFile，跟进⼀下这个函数。
可以看到使⽤ is_file 函数判断传递的模板是否是个⽂
件，如果是的话直接返回，这⾥不管是图⽚⽂件，TXT
⽂件等等，is_file 函数都返回 true，所以此处直接就返
回到调⽤点了。接下来再看第 117 ⾏，此处有⼀个判
断，通过 C ⽅法获取模板引擎类型，看是否是使⽤原⽣
的 PHP 模板，这个配置⽂件位
于：/ThinkPHP/Conf/convention.php，tp3 的默认配
置是 “Think”。
所以经过判断之后会直接进⼊到视图解析标签模块，也就
是第 125，126 ⾏。其中 125 ⾏是将参数组合成⼀个数
组，其中 $this-tVar 是存储模板中的变量，
$temlateFile 存储的还是被解析模板的路径，$content
和 $prefix 依旧为空。配置 debug 之后，可以清楚的看
到参数的传递情况。
之后进⼊这个 HOOK::listen ⽅法，⽅法位
置：/ThinlPHP/Library/Think/Hook.class.php。
这个 HOOK 类是⼀个⾏为扩展，在 TP3 中称之为钩
⼦，当我们传递了⼀个 “view_parse“参数之后，实际就
是触发了⼀个”view_parse“事件，此时 TP3 会进⼊到
Hook::listen ⽅法，查找 $tags 变量中有没有绑定”
view_parse” 的⽅法，然后遍历 $tags 的属性，执⾏
Hook::exec ⽅法。这⾥我们通过 debug 看⼀下整个
Hook::listen 的执⾏过程以及中间参数的变化。
在上⾯的参数传递过程中可以看到 view_parse 事件绑定
了 ParseTemplateBehavior 的⾏为⽅法。在执⾏
Hook::exec ⽅法时，$name 传递绑定的⾏为⽅法，
$params 传递的是⼀个引⽤。之后就进⼊到 exec ⽅法
之中。
在 exec ⽅法之中规定所有⾏为扩展的⼊⼝是 run ⽅法，
根据上⼀步的参数传递，在 118 ⾏中实例化
ParseTemplateBehavior ⾏为对象，然后调⽤该对象的
run ⽅法，并将引⽤的 $param 参数传递进去。该类的
路
路
径：/ThinkPHP/Library/Behavior/ParseTemplateBeh
avior.class.php。
因为所有⾏为扩展的⼊⼝都是 run ⽅法，所有我们直接
看 run ⽅法就可以了。
在上⾯的分析中我们知道模板引擎是 “Think“，所以程序
会进⼊到 25 ⾄ 29 ⾏，⼜因为新解析⼀个模板是没有缓
存对象的，所以此处直接进⼊第 31 ⾏，这⾥传递的参数
需要注意，在第 22 ⾏中，$ data[‘content’] 为空，所
以此时 $ content 变量的值是 $_data[‘file’]，即解析模
板的路径。然后进⼊模板编译与加载的 fetch ⽅法。该
⽅法路
径：/ThinkPHP/Library/Think/Template.class.php。
接下来看到 Template 类，⾸先看到 fetch 函数。
p
此处 $templateFile 变量还是待解析模板的路径，然后在
第 76 ⾏调⽤ loadTemplate ⽅法，再继续跟进该函数。
在 loadTemplate ⽅法中主要关注以下⼏个地⽅：在第
92 ⾏读取模板⽂件的内容，赋值给变量 $tmpContent。
在第 113 ⾏通过 compiler ⽅法对模板内容进⾏编译，最
后第 114 ⾏将编译后的结果进⾏存储，并且返回编译后
模版⽂件的路径。
此处还要继续跟进 compiler ⽅法，查看模板的编译过
程。
在编译过程中第 130 ⾏会将没有经过任何过滤的模板内
容拼接进⼊模板代码当中，然后将模板内容直接返回。此
处通过 debug 可以直观的看到返回值得内容。
返回结果之后再回到上⾯的 loadTemplate ⽅法，第 114
⾏将结果进⾏存储，⽣成模板⽂件，然后将⽂件的路径返
回给 fetch ⽅法。
在 fetch ⽅法获取到路径之后，第 77 ⾏调⽤ load ⽅法
加载模板，漏洞产⽣的原因就在此处。Load ⽅法的路
径：/ThinkPHP/Library/Think/Storage/Driver/File.cla
ss.php
第 80 ⾏代码是为了调试⾃⼰加的，在进⼊ load ⽅法之
后⾸先判断变量是否为空，然后对变量进⾏ extract 的解
析，此处其实会出现另外⼀个问题，变量覆盖，如果刚好
能够覆盖 $_filename 变量，那么⼜是⼀个漏洞。不过此
处没有这么复杂 不需要进⾏变量覆盖 因为恶意代码以
处没有这么复杂，不需要进⾏变量覆盖，因为恶意代码以
及被写⼊缓存的模板⽂件中，⽽第 81 ⾏直接通过
include 对模板⽂件进⾏包含，这就造成了漏洞。接着看
⼀下缓存的模板⾥⾯的内容：
然后此处第⼀⾏会校验我们是否是从⼊⼝访问到的模板，
避免我们直接访问模板，这⾥没有什么影响。只要
include 能成功执⾏到第⼆⾏，我们的恶意代码就会执
⾏，创建⼀个 sites.txt ⽂件，内容为 Runoob。
到上⾯这⼀步这个漏洞的利⽤过程已经分析完毕了，可以
使⽤⼀张流程图来看⼀下整个过程。
原⽣框架测试
通过上⾯的梳理，我们可以看到其实整个漏洞触发的过程
都是在 TP3 框架内部进⾏的，是因为在进⾏模板解析之
前没有控制传⼊的模板路径，解析过程中没有过滤模板内
的⽂件内容，解析完成之后直接通过 include ⽅式将模板
⽂件进⾏了包含。那么如果我们跳出 74cms，直接看
TP3 框架，理论上也是会存在这个漏洞的。所以接下来
下载原⽣的 TP3 框架，⾃⼰写⼀个触发漏洞的⽅法。将
Home 模块的 Index 控制器修改，代码如下：
触发控制器的请求：index.php?
m=home&c=index&a=index&variable=1&tpl=./1.txt，
其中 1.txt 是要被解析的带有恶意代码的模板⽂件，内容
如下：
如果代码被执⾏就会在根⽬录下写⼊⼀个 sites.txt ⽂
件，内容是 Runoob。之后在前台触发以下漏洞，看是否
会⽣成该⽂件。执⾏后的情况：
成功⽣成 sites.txt ⽂件。
查看⼀下缓存的模板⽂件的内容。
可以看到在使⽤了原⽣的 TP3 模板之后，也是能成功触
发漏洞的。⽽且经过调试，整个漏洞触发的过程与之前分
析的⼀致，也就不在赘述了。那么我们也可以得到结论，
这个漏洞其实是 TP3 框架本身的问题，不是特定发⽣在
某些 cms 上的，如果有程序使⽤了 TP3 的框架，⽽且
使⽤了基本控制器中的 fetch ⽅法，且模板的路径可以
由⽤户定义就有可能触发这个漏洞，这样的话漏洞的影响
范围就变得更加⼴泛了。
⼩⼩的总结
在这⼀次审计的过程当中，熟悉了 TP3 框架对模板的解
析过程，受益匪浅。这个漏洞产⽣的根本原因还是过滤不
严格造成了任意⽂件包含漏洞，属于框架本身的漏洞。在
调试过程中还⾛进了⼀个误区，最开始使⽤ phpinfo() 作
为恶意模板的内容，但是多次尝试都没有看到有结果输
⼊，这不是因为 phpinfo 没有执⾏，⽽是因为模板定义
存在问题，所以不会产⽣回显，其实 phpinfo 本身在被
包含时就已经执⾏了 所以之后将 payload 换成了写⼊
包含时就已经执⾏了，所以之后将 payload 换成了写⼊
⼀个新的⽂件，这样即使不能回显也可以看到恶意代码是
否执⾏。还有⼀点困难就是调试过程中函数的跳转，参数
的传递次数过多，如果不仔细调试容易跟丢执⾏流程。不
管如何，这⼀次的调试还是有着巨⼤的收获。
全⽂完
本⽂由 简悦 SimpRead (http://ksria.com/simpread) 优化，⽤以
提升阅读体验
使⽤了 全新的简悦词法分析引擎 beta，点击查看
(http://ksria.com/simpread/docs/#/词法分析引擎)详细说明