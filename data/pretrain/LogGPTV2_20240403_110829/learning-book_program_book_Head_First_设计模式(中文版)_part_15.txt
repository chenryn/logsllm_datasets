## Page 128
装饰饮料
装饰我们的饮料
好吧！让星巴兹饮料也能符合此框架.
Beverase相当于抽象的
Component类。
Beverage
component
uogduosep
gefDescription()
costp
其他有用的方法
HouseBlend
DarkRoast
cost0
cost()
getDescription(
Milk
Mocha
Soy
Whip
rage beverage
verege beverage
Dverage beverage
四个具体组件，每个代
cost0
Osoo
Osoc
表一种如啡类型。
Description()
tDescnpton(
K1
这是调科装饰者。请注意，它们除了必须实现
cost（）之外，还必须实现setDesctiption(）。稍后我们
金解释为什
RAIN
XPOWeR
在往下看之前，想想如何实现咖啡和调料的cost(方法。也思考一下
PDG
如何实现调料的getDescription(方法。
92
第3章
---
## Page 129
装饰者模式
办公室隔间对话
在继承和组合之间，观念有一些混淆。
喂呀！我有一点混
Naty
我原以为在这个模式中
不会使用继承，而是要利用组合
取代继永。
Sue：这话怎么说？
Mary：看看类图。CondimentDecorator扩展自Beverage类，这用到了继承，不是吗？
Suc：的确是如此，但我认为，这么做的重点在于，装饰者和被装饰者必须是一样的类型，也就
是有共同的超类，这是相当关键的地方。在这里，我们利用继承达到“类型匹配”，而不是利
用继承获得“行为”。
Mary：我知道为何装饰者需要和被装饰者（亦即被包装的组件）有相同的“接口”，因为装饰
者必须能取代被装饰者。但是行为又是从哪里来的？
Sue：当我们将装饰者与组件组合时，就是在加人新的行为。所得到的新行为，并不是继承自超
类，而是由组合对象得来的。
Mary：好的。继承Beverage抽象类，是为了有正确的类型，而不是继承它的行为。行为来自装
饰者和基础组件，或与其他装饰者之间的组合关系。
Sue：正是如此。
Mary：哦！我明白了。而且因为使用对象组合，可以把所有饮料和调料更有弹性地加以混和与
匹配，非常方便。
Sue：是的。如果依赖继承，那么类的行为只能在编译时静态决定。换句话说，行为如果不是来
自超类，就是子类覆盖后的版本。反之，利用组合，可以把装饰者混合着用而且是在“运行
时”。
Mary：而且，如我所理解的，我们可以在任何时候，实现新的装饰者增加新的行为。如果依赖
继承，每当需要新行为时，还得修改现有的代码。
Sue：的确如此。
Mary：我还剩下一个问题，如果我们需要继承的是component类型，为什么不把Beverage类设计
成一个接口，而是设计成一个抽象类呢？
Sue：关于这个嘛，还记得吗？当初我们从星巴兹拿到这个程序时，Beverage“已经”是一个抽
象类了。通常装饰者模式是采用抽象类，但是在Java中可以使用接口。尽管如此，通常我们都努
力避免修改现有的代码，所以，如果抽象类运作得好好的，还是别去修改它。
你现在的位置，9
93
---
## Page 130
装饰者特训
新咖啡师傅特训
如果有一张单子点的是：“双倍摩卡豆浆奶泡拿铁咖
0K，我要一杯“双倍摩
啡”，请使用菜单得到正确的价钱并画一个图来表达
卡豆浆奶泡拿铁咖啡”
你的设计，采用和几页前一样的格式。
 Whip调用Mocha的cost(1,
首先，满用外装饰
者whipl)cost(1.
cost(),
这张图是“深度烘培
<一摩卡锡泡”钦科。
价钱$0.99.
DrakRoast返图
再加上自己的$0.10价载返
hi返目的价钱上
OMoch在Darost道的
目最后的价线$1.29,
饿上.再加上自己的50.20价
货，近国账的价钱$1.19.
星巴兹咖啡
把图画在这里
综合
.89
深焙
低咖啡因
.99
1.05
浓缩
1.99
配料
牛奶
.10
斗
.20
豆浆
.15
奶泡
.10
好
*双倍摩卡豆案
提示：
奶泡拿铁”可以利用综
PDG
合（HouseBlend）、
絮、两小杯康卡和奶泡
来组合
94
第3章
---
## Page 131
装饰者模式
写下星巴的代码
该是把设计变成真正的代码的时候了！
先从Beverage类下手，这不需要改变星巴兹原始的设计。如下所
示：
Beverage是一个抽象类，有两个方
public abstract class Beverage {
法：setDesctip-tion(）及cost(）
String description = "Unknown Beverage";
public String getDescription(){
return description;
setDesctiption已经在此实现了
但是cost（）必须在子类中实现。
public abstract double cost();
Beverage很简单。让我们也来实现Condiment（调料）
抽象类，也就是装饰者类吧：
首先，必师让CondimentDecorator能
够取代Beverage，所以将Condiment
Decorato扩展自Beverage 类
public abstract class CondimentDecorator extends Beverage
public abstract String getDescription();:<
所有的调科装饰者都必须重新实现
setDesciptiom(）方法。稍后我们全解释
为什……….
你现在的位置
95
---
## Page 132
实现饮料
写饮料的代码
现在，已经有了基类，让我们开始开始实现一些饮料吧！先从浓缩咖啡
（Espresso）开始。别忘了，我们需要为具体的饮料设置描述，而且还
必须实现cost(）方法。
首先.让Esptesso折展自
Beverage类，因为Espresso是
一种饮科。
public class Espresso extends Beverage {
public Espresso()(
为了要设置欲科的描述，我
description = "Espresso";
们写了一个构造器。记住，
desctiption实例变量继承自
public double cost()(
Beverase.
return 1.99;
最后，需要计算Esptesso的价钱，现在不
需要管调科的价钱，直接把Esresso的价
格SI.99返回即可。
public class HouseBlend extends Beverage (
public HouseBlend(){
description ="House Blend Coffee";
星巴兹咖啡
咖啡
.89
public double cost()(
综合
.99
return .89;
深焙
低咖啡因
1.05
这是另一种饮科.做法和Espzesso一样，只是
浓缩
1.99
把Esptesso名称改为”HouseBlend Cotee”，并
追图正确的价钱S0.89。
配料
.10
牛奶
.20
摩卡
.15
豆浆
你可以自行建立另外两种饮科类（DakRoust和Decas），做法都一
.10
奶泡
样。
96
第3章
---
## Page 133
装饰者模式
写调料代码
如果你回头去看看装饰者模式的类图，将发现我们已经完成了抽象组
件（Beverage），有了具体组件（HouseBlend），也有了抽象装饰
者（CondimentDecorator）。现在，我们就来实现具体装饰者。先从
摩卡下手：
摩卡是一个装饰者，所以让它扩
别忘了，CondimentDecorator
展CondimentDecozator
展自Bevetase。
要让Mocha能够引用一个Beverage.做
法如下：
（1）用一个实例变量记录饮料，也统
public class Mocha extends CondimentDecorator (
Beverage beverage;
是被装饰老。
（2）想办法让被装饰者（铁科）被记
public Mocha(Beverage beverage)
this.beverage = beverage;
录到实例变量中。这里的做法是：把
饮科当作构造器的参数，再由构造器
将此饮科记录在实例变量中。
public String getDescription()(
return beverage.getDescription() +“,Mocha";
我们带望叙述不只是描述饮料（例
public double cost()(
如“DarbRoast”）.而是完整t地连调科都
return.20 + beverage.cost();
描述出来（例如“DarbRoast，Mocha”）。
7
所以首先利用盛托的做法，得到一个
叙述，然后在其后加上附加的叙述（例
要计算带Mocha饮科的价钱，首先把调用
bo“Mocha”）
托给被装饰对象，以计翼价线，然后再加
Mocha的价钱，得到最后结果。
在下一页，我们含实际实例化一个饮料对象，然后用各种调科（装饰老）包装它。但
是，在这么做之前，首先……….
rpenyourpencil
写下Soy和Whip调料的代码，并完成编译。你
需要它们，否则将无法进行下一页的程序。
你现在的位置
97
---
## Page 134
测试饮料
供应咖啡
恭喜你，是时候舒服地坐下来，点一些咖啡，看看你利用装饰者
模式设计出的灵活系统是多么神奇了。
这是用来下订单的一些测试代码*：
public class StarbuzzCoffee {
public static void main(String args[]) {
订一杯Espesso，不需要调料，打印
Beverage beverage = new Espresso() ;
出它的描述与价钱。
System.out.println (beverage.getDescription ()
+"s" + beverage.cost()）;
制造出一个DarkRoast对象。
Beverage beverage2 = new DarkRoast()x
用Mocha装饰它。
beverage2-new Mocha(beverage2);
用第二个Mocha装锦它。
beverage2=new Mocha（beverage2）:
beverage2-new Whip（beverage2):
用Whip装饰它。
System.out.println(beverage2.getDescription()
+" s" + beverage2.cost());
Beverage beverage3 = new HouseBlend () ;
beverage3=new Soy（beverage3);
最后，再来一杯调科为豆架、摩
beverage3-new Mocha（beverage3);
beverage3=new Whip（beverage3);
卡、够泡的HouseBlend啡。
System.out.println(beverage3.getDescription()
+" $" + beverage3.cost ());
当我们介绍到“工厂”和“生成器”设计楼
式时，将有更好的方式建立被装饰者对象。
注意，关子“生成器模式”请参考本书附录A。
现在，来看看实验结果：
java StarbuzzCoffee
Espresso $1.99
Dark Roast Coffee，Mocha，Mocha,Whip $1.49
House Blend Coffee，Soy,Mocha,Whip $1.34
98
第3章
---
## Page 135
装饰者模式
问：
如果我将代码针对特
引用到豆浆而不是奶泡，代码会好写
一些，这意味着订单里没有奶泡了。
合：
装饰者该做的事，
定种类的具体组件（例如House-
就是增加行为到被包装对象上。
Blend），做一些特殊的事（例
合：
你当然可以争辨说，使
当需要窥视装饰者链中的每一个
如，打折），我担心这样的设计是
用装饰者模式，你必须管理更多的对
装饰者时，这就超出他们的天赋
否恰当。因为一旦用装饰者包装
象，所以犯下你所说的编码错误的机
了。但是，并不是做不到。可以
HouseBlend，就会造成类型改变。
会会增加。但是，装饰者通常是用其
写一个CondimentPrettyPrint装饰
他类似于工厂或生成器这样的模式创
者，解析出最后的描述字符串，然
合：
的确是这样。如果你把
建的。一旦我们讲到这两个模式，你
后托“Mocha.Whip，Mocha”变
代码写成依赖于具体的组件类型，那
就会明白具体的组件及其装饰者的创
成“Whip，Double Mocha”。如果
么装饰者就会导致程序出问题。只有
建过程，它们会“封装得很好”，所
能把getDescription（）的返回值变成
在针对抽象组件类型编程时，才不会
以不会有这种问题。
ArrayList类型，让每个调料名称独立
因为装饰者而受到影响。但是，如果
开来，邢么CondimentPrettyPrint方法
的确针对特定的具体组件编程，就应
问：
会更容易编写。
装饰者知道这一连串装
该重新思考你的应用架构，以及装饰
饰链条中其他装饰者的存在吗？比
者是否适合，
方说，我想要让getDescription（）列
问：
出“Whip，DoubleMocha”而不
对于使用到饮料的某些
是“Mocha,Whip，Mocha”，这需要
客户来说，会不会容易不使用最外圈
最外圈的装饰者知道有哪些装饰者牵
的装饰者呢？比方说，如果我有深焙
涉其中了。
咖啡，以摩卡、豆浆、奶泡来装饰，
我们在星巴兹的朋友决定开始在菜单上加上咖啡的容量大小，供顾客
可以选择小杯（tall）、中杯（grande）、大杯（venti）。星巴兹认为