 Trigger RI_ConstraintTrigger_a_92560 for constraint f_p_id_fkey on p: time=2.630 calls=1
 Trigger RI_ConstraintTrigger_c_92562 for constraint f_p_id_fkey on f: time=0.059 calls=1
 Total runtime: 2.820 ms
 (9 rows)
PostgreSQL 索引使用场景举例
 加速外键约束更新和删除操作
 增加f表的p_id列上的索引
 digoal=# create index idx_f_1 on f(p_id);
 CREATE INDEX
 digoal=# explain (analyze,verbose,costs,buffers,timing) update p set id=1 where id=0;
 QUERY PLAN
 --------------------------------------------------------------------------------------------------------------------------
 Update on postgres.p (cost=0.29..2.30 rows=1 width=47) (actual time=0.067..0.067 rows=0 loops=1)
 Buffers: shared hit=8
 -> Index Scan using p_pkey on postgres.p (cost=0.29..2.30 rows=1 width=47) (actual time=0.018..0.020 rows=1 loops=1)
 Output: 1, info, crt_time, ctid
 Index Cond: (p.id = 0)
 Buffers: shared hit=3
 Trigger RI_ConstraintTrigger_a_92560 for constraint f_p_id_fkey on p: time=0.471 calls=1
 Trigger RI_ConstraintTrigger_c_92562 for constraint f_p_id_fkey on f: time=0.053 calls=1
 Total runtime: 0.636 ms
 (9 rows)
PostgreSQL 索引使用场景举例
 索引在排他约束中的使用
 对排他操作符的要求, 左右操作数互换对结果没有影响. 例如x=y, y=x 结果都为true或unknown.
 用法举例
 digoal=# CREATE TABLE test(id int,geo point,EXCLUDE USING btree (id WITH pg_catalog.=));
 CREATE TABLE
 digoal=# insert into test (id) values (1);
 INSERT 0 1
 digoal=# insert into test (id) values (1);
 ERROR: 23P01: conflicting key value violates exclusion constraint "test_id_excl"
 DETAIL: Key (id)=(1) conflicts with existing key (id)=(1).
 SCHEMA NAME: postgres
 TABLE NAME: test
 CONSTRAINT NAME: test_id_excl
 LOCATION: check_exclusion_constraint, execUtils.c:1337
PostgreSQL 索引使用场景举例
 加速唯一值约束
 Primary KEY
 Unique KEY
PostgreSQL 索引使用场景举例
 digoal=# CREATE TABLE test(id int,geo point,EXCLUDE USING spGIST (geo WITH pg_catalog.~=));
 CREATE TABLE
 索引如下 :
 digoal=# \d test
 Table "postgres.test"
 Column | Type | Modifiers
 --------+---------+-----------
 id | integer |
 geo | point |
 Indexes:
 "test_geo_excl" EXCLUDE USING spgist (geo WITH ~=)
PostgreSQL 索引使用场景举例
 CREATE TABLE test(id int,geo circle,EXCLUDE USING GIST (geo WITH pg_catalog.&&));
 INSERT INTO test values(1,''::circle);
 INSERT INTO test values(1,''::circle);
 INSERT INTO test values(1,''::circle);
 ERROR: conflicting key value violates exclusion constraint "test_geo_excl"
 DETAIL: Key (geo)=() conflicts with existing key (geo)=().
c3 c1 c2
PostgreSQL 索引使用场景举例
 digoal=# CREATE TABLE test(id int,geo circle,EXCLUDE USING GIST (geo WITH pg_catalog.&&));
 CREATE TABLE
 digoal=# CREATE TABLE test(id int,geo circle,EXCLUDE USING GIST (geo WITH pg_catalog.~=));
 CREATE TABLE
 以下例子左右操作数互换后得到的结果不一致, 所以这类操作符不允许创建排他索引.
 digoal=# CREATE TABLE test(id int,geo point,EXCLUDE USING spGIST (geo WITH pg_catalog.));
 ERROR: 42809: operator >(integer,integer) is not commutative
 DETAIL: Only commutative operators can be used in exclusion constraints.
 LOCATION: ComputeIndexAttrs, indexcmds.c:1132
是否使用索引和什么有关?
 是否使用索引和什么有关?  遵循完CBO的选择, 还需要符合当前配置
的Planner 配置.
 首先是前面提到的Access Method, 然后是
使用的operator class, 以及opc中定义的  #enable_bitmapscan = on
operator或function.
 #enable_hashagg = on
 这些都满足后, 还要遵循CBO的选择.  #enable_hashjoin = on
 #seq_page_cost = 1.0  #enable_indexscan = on
 #random_page_cost = 4.0  #enable_material = on
 #cpu_tuple_cost = 0.01  #enable_mergejoin = on
 #cpu_index_tuple_cost = 0.005  #enable_nestloop = on
 #cpu_operator_cost = 0.0025  #enable_seqscan = on
 #effective_cache_size = 128MB  #enable_sort = on
 #enable_tidscan = on
多列索引的使用
 Multicolumn Index
 多列索引, 使用任何列作为条件, 只要条件中的操作符或函数能满足opclass的匹配,
都可以使用索引, 索引被扫描的部分还是全部基本取决于条件中是否有索引的第一
列作为条件之一.
 例子
 postgres=# create table test (c1 int,c2 int);
 postgres=# insert into test select 1,generate_series(1,100000);
 postgres=# create index idx_test_1 on test(c1,c2); 注意过滤条件
不是驱动列.
 postgres=# analyze test;
看似不能走索引
 postgres=# explain select * from test where c2=100;
 Seq Scan on test (cost=0.00..1693.00 rows=1 width=8)
 Filter: (c2 = 100)
 postgres=# set enable_seqscan=off;
 postgres=# explain analyze select * from test where c2=100;
 Index Scan using idx_test_1 on test (cost=0.00..1858.27 rows=1 width=8) (actual
time=0.104..7.045 rows=1 loops=1)
 Index Cond: (c2 = 100)
索引合并查询
 Combining Multiple Indexes
 src/backend/executor
 例如
Bitmap Index filter Bitmap,
Scan TupleAddr(s)
BitmapAn Bitmap
d | Or Heap Scan
Bitmap Index filter Bitmap,
Scan TupleAddr(s)
。。。。。。 。。。。。。 。。。。。。
索引合并查询
 Combining Multiple Indexes
 单列索引的多条件匹配合并
 postgres=# create table test (id int primary key,info text unique);
 postgres=# insert into test select
generate_series(1,100000),'digoal'||generate_series(1,100000);
 postgres=# explain analyze select * from test where id=1 or id=1000;
 Bitmap Heap Scan on test (cost=8.54..16.20 rows=2 width=36) (actual
time=0.034..0.036 rows=2 loops=1)
 Recheck Cond: ((id = 1) OR (id = 1000))
 -> BitmapOr (cost=8.54..8.54 rows=2 width=0) (actual time=0.023..0.023
rows=0 loops=1)
 -> Bitmap Index Scan on test_pkey (cost=0.00..4.27 rows=1 width=0)
(actual time=0.012..0.012 rows=1 loops=1)
 Index Cond: (id = 1)
 -> Bitmap Index Scan on test_pkey (cost=0.00..4.27 rows=1 width=0)
(actual time=0.009..0.009 rows=1 loops=1)
 Index Cond: (id = 1000)
索引和collate的匹配
 collection
 例子
 CREATE TABLE test1c (
 id integer,
 content varchar COLLATE "x"
 );
 CREATE INDEX test1c_content_index ON test1c (content);
 SELECT * FROM test1c WHERE content > constant;
 -- 以下SQL不能使用索引test1c_content_index
 SELECT * FROM test1c WHERE content > constant COLLATE "y";
 -- 需建立与y COLLATE对应的索引, 以上这条SQL才会走索引.
 CREATE INDEX test1c_content_y_index ON test1c (content COLLATE "y");
部分值索引
 partial index
 例子
 -- 部分约束
 --去除common值 id=1, 这个值有10W条, 走索引根本不合适. partial 索引很好的避免了此
类情况.
 postgres=# create table test(id int,info text);
 postgres=# insert into test select 1,'digoal'||generate_series(1,100000);
 postgres=# insert into test select
generate_series(1,1000),'digoal'||generate_series(1,1000);
 postgres=# create index idx_test_1 on test(id) where id<>1;
 postgres=# explain select * from test where id=1;
 Seq Scan on test (cost=0.00..1791.00 rows=100000 width=15)
 Filter: (id = 1)
 postgres=# explain select * from test where id=100;
 Index Scan using idx_test_1 on test (cost=0.00..8.27 rows=1 width=15)
 Index Cond: (id = 100)
部分值索引
 -- 部分索引在非索引列的使用
 postgres=# explain select * from test where info='digoal' and id=1;
 QUERY PLAN
 --------------------------------------------------------
 Seq Scan on test (cost=0.00..2041.00 rows=1 width=15)
 Filter: ((info = 'digoal'::text) AND (id = 1))
 postgres=# create index idx_test_2 on test(id) where info='digoal100';
 postgres=# explain select * from test where info='digoal100';
 QUERY PLAN
 ------------------------------------------------------------------------
 Index Scan using idx_test_2 on test (cost=0.00..8.27 rows=1 width=15)
 (1 row)
部分值索引
 -- 部分索引的好处, 为什么要去除common 值
 postgres=# drop index idx_test_1;
 postgres=# drop index idx_test_2;
 postgres=# explain select * from test where id=1;
 QUERY PLAN
 -------------------------------------------------------------
 Seq Scan on test (cost=0.00..1791.00 rows=100000 width=15)
 Filter: (id = 1)
 -- 为什么会走全表扫描
 postgres=# select id,count(*) from test group by id order by count(*) desc limit 10;
 id | count
 -----+--------
 1 | 100001
 120 | 1
 887 | 1
 681 | 1
函数和表达式索引
 函数索引和表达式索引
 表达式索引
 postgres=# explain select * from test where id+1=100;
 QUERY PLAN
 ----------------------------------------------------------
 Seq Scan on test (cost=0.00..2059.86 rows=505 width=15)
 Filter: ((id + 1) = 100)
 postgres=# create index idx_test_1 on test((id+1));
 CREATE INDEX
 postgres=# explain select * from test where id+1=100;
 QUERY PLAN
 ----------------------------------------------------------------------------
 Bitmap Heap Scan on test (cost=12.18..577.45 rows=505 width=15)
 Recheck Cond: ((id + 1) = 100)
 -> Bitmap Index Scan on idx_test_1 (cost=0.00..12.05 rows=505 width=0)
 Index Cond: ((id + 1) = 100)
函数和表达式索引
 函数索引
 -- 以下区分大小写的场景无法使查询走普通的索引.
 postgres=# create table test (id int,info text,crt_time timestamp(0));
 postgres=# insert into test select
generate_series(1,100000),'digoal'||generate_series(1,100000),clock_timestamp(
);
 postgres=# create index idx_test_info on test(info);
 postgres=# explain select * from test where info ~* '^a';
 Seq Scan on test (cost=0.00..1887.00 rows=10 width=23)
 Filter: (info ~* '^a'::text)
 -- 忽略大小写的ilike和~* 要走索引的话, 开头的字符只能是大小写一致的, 字母不行.
数字可以. 例如字母a区分大小写, 数字0不区分大小写.索引中的条目也就有差别.
 postgres=# explain select * from test where info ~* '^0';
 Index Scan using idx_test_info on test (cost=0.00..8.28 rows=10 width=23)
 Index Cond: ((info >= '0'::text) AND (info < '1'::text))
 Filter: (info ~* '^0'::text)
函数和表达式索引
 函数索引
 -- 要让字母也可以走忽略大小写的索引如何做呢?
 -- 函数索引, 但是函数必须是immutable状态的
 过滤条件中也必须使用和创建的索引相同声明
 postgres=# select proname,provolatile from pg_proc where proname='lower';
 proname | provolatile
 lower | i
 postgres=# create index idx_test_info_1 on test(lower(info));
 CREATE INDEX