### Information Flow Tracking and Trojan Detection

**Information Flow Tracking:**
- **Assertion A36-01** for the AES04 design has been translated to the AES-T400 design.
- In the AES-T400 design, an injected trojan utilizes an unused pin to generate an RF signal, which can be used to transmit key bits. The leaked data can be received by an AM radio and interpreted using a specific beep scheme.
- The trojan is implemented in two additional modules: `AM_Transmission` and `Trojan_Trigger`.
- When a predefined plaintext is observed, the trojan is triggered, and the `AM_Transmission` module outputs the key to the antenna signal following the beep scheme to leak data.
- Ideally, the key should flow only to the output ciphertext (A36-01). The translation result for A36-01 to the AES-T400 design is: `set key[0] := high; assert cipher[0] == high`. This indicates that Transys can successfully translate the assertion to a new design without being influenced by the two additional trojan modules.

### Performance Evaluation

**Translation Time:**
- We evaluate the total time it takes for Transys to translate each assertion from a source design to a target design. The results are shown in Figure 14.
- The translation times for the trojan-injected AES designs are similar to those for the trojan-free AES design and are not shown due to space constraints.
- Translation times vary across different designs based on their complexity:
  - **AES Designs:** Average of 28.8 seconds per assertion.
  - **RSA Designs:** Average of 0.46 seconds per assertion.
  - **CPU Designs:** Average of 189 seconds per assertion.
- For AES and RSA designs, most of the translation time is spent on the Refinement Pass. For processor designs, most of the translation time is spent on the Variable Mapping Pass.
- The maximum average property-translation time is 436.8 seconds for the OR1200 design, suggesting that Transys is practical for daily use by hardware designers to quickly generate security assertions through translation.

### Validity and Bug Detection

**Validity Ratios:**
- Tables XIV and XV show the ratio of valid results at the end of each pass, indicating that each pass significantly increases the valid-to-invalid ratio.
- **Table XIV (AES Designs):**
  - **VM Pass:** 360 translations, 14% valid.
  - **ST Pass:** 352 translations, 52% valid.
  - **CR Pass:** 336 translations, 93% valid.
- **Table XV (CPU Designs):**
  - **VM Pass:** 46 translations, 39% valid.
  - **ST Pass:** 43 translations, 59% valid.
  - **CR Pass:** 39 translations, 85% valid.

**Security Impact:**
- Assertions A33-01—A33-05 in Table IX can detect trojans in AES-T400 and AES-T1100.
- These five assertions were translated to AES cores with trojans. The translated assertions of A33-01 and A33-02 would detect trojans in three AES designs, while A33-03—A33-05 would detect trojans in eight AES designs.
- For the remaining nine trojan-injected designs, we do not have assertions to detect the trojans, and thus cannot determine whether the translated assertions would detect them.

### Examples of Bugs in the Code

**Translation Results with Bugs:**
1. **Translation Failed:**
   - Example: In the AES05 design, part of the code base is missing. Transys fails to translate the assertions, showing an error message in the Refinement Pass.
   - Reason: Missing parts of the code, leading to no refinement output.

2. **Trivial Assertions:**
   - Example: The GPR0 bug in the OpenRISC cores, where the general-purpose register R0 should always be set to zero.
   - Transys translates the assertion from the OR1200 to both the Espresso and Cappuccino designs, resulting in trivially true assertions (A → A), indicating a bug in the design due to missing constraints.

3. **Overly Restrictive Assertions:**
   - Example: For the AES assertion A29-02 from the AES11 design, Transys translates it to the AES18 design: `aes_sbox.a != aes_sbox.d`.
   - After maliciously modifying the S-box design, Transys translates the assertion again, resulting in: `(aes_sbox.a[7] != aes_sbox.d[7]) → (aes_sbox.a != aes_sbox.d)`.
   - This new assertion is valid for the buggy design and includes an additional antecedent, allowing hardware experts to identify the bug and the condition to trigger it.

### Related Work

**Property-Driven Hardware Security:**
- There is a growing call for "property-driven hardware security" [28], [29], [30], advocating for building security specifications into the hardware design workflow, automating the process, and developing quantifiable measures of security.
- Transys contributes to this effort by automating the translation of security assertions between designs.

**Developing Security Specifications:**
- Previous work has produced security properties for various open-source designs, often manually [31], [10], [32], [5].
- Subsequent work partially automated the process [7], [33], but still required manually written properties for each design.
- Transys leverages existing properties to bootstrap property generation for new designs.

**Extracting Assertions from Hardware Designs:**
- Tools like Iodine [34] and recent data mining techniques [35], [36], [37] extract detailed assertions and temporal properties from hardware designs, providing lessons on scaling assertion extraction effectively.

**Assertion-Based Verification of Hardware Designs:**
- Transys-generated properties can be encoded as assertions and added to the design for verification using standard assertion-based verification (ABV) techniques [38], [39], [40], [41], [42], [43].
- Symbolic execution has also proven effective for finding property violations in hardware designs [44], [6].

**Language-Based Verification:**
- New and extended hardware description languages enforce security policies by construction [16], [45], [14], [15] or specify policies and refine them to provably correct designs [46], [47], [48].

**Tracking Information Flow in Hardware:**
- Information Flow Tracking logic can be added at the gate level [17] or register transfer level [49], capturing timing and data flows [18], [19], [50].
- While there is a trade-off between precision and performance [51], [52], these techniques demonstrate whether sensitive inputs, such as key material, are visible in output signals.
- Language-based verification and information flow tracking require modifying the original design, either by adding tracking logic or redesigning for provable isolation [53], [54].

**Software Code Clone Detection:**
- The Variable Mapping Pass in Transys is inspired by software code clone detection techniques, including token-based, semantic-based, graph-based, and tracelet-based approaches [55], [56], [57], [58], [59], [60], [61], [62], [63], [64], [65].
- Our approach combines graph and semantic-based features, adapting them to RTL code.

### Conclusion

In this work, we advocate building security properties for new designs by leveraging existing properties. Transys, an automated tool, translates given security assertions from one hardware design to another in three passes: transformation and constraint, variable mapping, and structural refinement. Transys successfully translates 27 temporal logic assertions and 11 information flow tracking assertions across 38 AES designs, 3 RSA designs, and 5 RISC processor designs, achieving an overall translation success rate of 96%. Among them, 23 (64%) assertions achieve semantic equivalence rates above 60%, with an average translation time per assertion of about 70 seconds.

### Acknowledgments

We thank our shepherd, Dr. Yan Shoshitaishvili, and the anonymous reviewers for their helpful and insightful feedback. This work is supported by the National Science Foundation under Grant No. CNS-1816637. Any opinions, findings, conclusions, and recommendations expressed in this paper are solely those of the authors.

### References

[References are listed as provided, with no changes made.]