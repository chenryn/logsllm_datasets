• Dial. By invoking the private API CTCallDial in
the CoreTelephony framework, our Jekyll app
can dial arbitrary numbers. Note that, this API sup-
ports to dial not only phone numbers, but also GSM
service codes [3] as well as carrier-speciﬁc num-
bers. For instance, by dialing *21*number#, Jekyll
app can forward all calls to the victim’s phone to an-
other phone speciﬁed by number.
4.3 Exploiting Kernel Vulnerabilities
Since they run directly on iOS, native apps are able to
directly interact with the iOS kernel and its extensions,
making the exploitation of kernel vulnerabilities possi-
ble. Even though the sandbox policy limits third-party
apps to only communicate with a restricted set of device
drivers, and thus signiﬁcantly reduces the attack surface
for kernel exploitation, security researchers still man-
aged to ﬁnd vulnerabilities in this small set of device
divers [49].
9
USENIX Association  
22nd USENIX Security Symposium  567
In our Jekyll app, we hide the gadgets that can enable
us to communicate with the accessible device drivers.
Speciﬁcally, Jekyll app can dynamically load a frame-
work called IOKit, in which Jekyll app further locates
the required APIs such as IOServiceMatching,
IOServiceOpen and IOConnectCallMethod to
create and manipulate connections to device drivers.
Therefore, our Jekyll app provides a way for attackers
to exploit kernel vulnerabilities. We demonstrate this by
exploiting a kernel NULL pointer dereference vulnera-
bility in iOS 5.x, disclosed in [49]. The exploitation of
this vulnerability causes the iOS devices to reboot.
4.4 Trampoline Attack
Due to the sandboxing mechanism, iOS apps are re-
stricted from accessing ﬁles stored by other apps. How-
ever, iOS provides a form of inter-process communica-
tion (IPC) among apps using URL scheme handlers. If
an app registers to handle a URL type, other apps can
launch and pass messages to this app by opening a URL
scheme of that type. The http, mailto, tel, and sms
URL schemes are supported by built-in apps in iOS. For
example, an app opening a http URL will cause the
built-in web browser Mobile Safari to launch and load
the webpage. Since attackers can fully control the con-
tent in a URL request, our Jekyll app has the ability to
attack other apps that have vulnerabilities when handling
malformed URL requests.
In our proof-of-concept Jekyll app, we demonstrated
an attack against Mobile Safari; in particular, we pre-
pared a web page containing malicious JavaScript code
that can trigger an unpatched vulnerability in Mobile Sa-
fari. Through our Jekyll app, we can force the victim’s
Mobile Safari to access this web page. Finally, Mobile
Safari will crash when loading the webpage due to a
memory error. JailbreakMe [1], a well-known jailbreak
tool, completes the untethered jailbreak through exploit-
ing a vulnerability in Mobile Safari and then exploiting a
kernel vulnerability. If new vulnerabilities in Mobile Sa-
fari are disclosed by other researchers in the future, we
can simply take advantage of these new vulnerabilities to
launch similar powerful attacks.
5
Jekyll App Implementation
We have implemented a proof-of-concept Jekyll app
based on an open source news client called News:yc [2].
The original News:yc app fetches news from a server,
and allows the user to share selected news items through
email. We modiﬁed News:yc in several places. First,
we conﬁgured it to connect to a server controlled by us.
Second, we planted vulnerabilities and code gadgets in
the app. These vulnerabilities are triggerable by special
news contents, and the code gadgets support all the mali-
cious operations listed in Table 1. Third, we modiﬁed the
app to use a secure protocol that provides authenticated
and encrypted communication, so that the app client only
accepts data from our server. In addition, the server was
conﬁgured to deliver exploits only to the clients from
speciﬁc IP addresses, which ensures that only our test-
ing devices can receive the exploits. Figure 10.a shows
the snapshot of the app.
a. The main UI of the app
b. After an attack, device identity is
popped up for illustration purposes
Figure 10: Snapshots of the app
We submitted the app to Apple and got Apple’s ap-
proval after 7 days. Figure 11 shows the approval notiﬁ-
cation from Apple. Once the app was on App Store, we
immediately downloaded it into our testing devices and
removed it from App Store. We have data to show that
only our testing devices installed the app. The server has
also been stopped after we ﬁnished the testing.
The testing results are summarized in Table 1. By ex-
ploiting the vulnerabilities and chaining the planted gad-
gets, we can send email and SMS and trigger a kernel
vulnerability on iOS 5.x, and post tweets, record videos,
steal the device identity, manipulate bluetooth, dial arbi-
trary number, and attack Mobile Safari on both iOS 5.x
and iOS 6.x. We show the attack of stealing device iden-
tity in Figure 10.b. We have made a full disclosure of our
attack to Apple.
6 Related Work
Jailbreak, which obtains the root privilege and perma-
nently disables the code signing mechanism, represents
the majority of efforts to attack iOS [38]. Since jail-
break usually relies on a combination of vulnerabilities
found in the iOS kernel, the boot loaders, and even the
ﬁrmware, Apple and hackers have long played a cat-and-
mouse game. However, due to Apple’s increasing efforts
568  22nd USENIX Security Symposium 
USENIX Association
10
rangements, obviating the need for code injections that
are prevented by DEP and code signing. Jekyll apps also
employ code gadget rearrangements to alter runtime con-
trol ﬂows—an idea inspired by ROP. However, our attack
differs from ROP in both the assumption and the goal.
Traditional ROP attack targets at programs that are out
of the attacker’s control and its power is often limited by
the availability of useful code gadgets.
In comparison, Jekyll apps are created and later ex-
ploited by the same person, who has the ultimate control
of the gadget availability. On the other hand, traditional
ROP attackers have no concern about hiding potential
code gadgets and their inter-dependencies, whereas we
do so that Jekyll app can bypass existing and possible
detections. Currently, we need to manually construct
the ROP exploits that are responsible for chaining gad-
gets together. However, previous studies [29, 43] have
demonstrated the possibility of automatically generating
ROP shellcode on the x86 platform. We leave the auto-
matic ROP shellcode generation for Jekyll apps as future
work. In addition, M. Prati [40] proposed a way to hide
ROP gadgets in open source projects with a purpose to
evade the code audit of the projects. This implies that
even Apple could audit the source code of third-party
apps in the future, detecting the hidden gadgets is still
quite challenging.
Jekyll apps also share a common characteristic with
trojan and backdoor programs [13], that is, the malice or
vulnerabilities of attacker’s choice can be freely planted
into the program, which later cooperates with the at-
tacker when installed on a victim’s device. In fact, Jekyll
app can be deemed as an advanced backdoor app that
stays unsuspicious and policy-abiding when analyzed
during the app review process, but turns into malicious
at runtime only when new control ﬂows are created per
attacker’s command.
Thus far Apple’s strict app publishing policies and re-
view process [5] have helped keep malicious apps out
of iOS devices [41]. Automated static analysis meth-
ods, such as [17, 26], were also proposed to assist the
review process in vetting iOS apps. However, as we have
demonstrated with our design and evaluation of Jekyll
apps, malicious apps can easily bypass human reviewers
and automatic tools if their malicious logic is constructed
only at runtime. This demonstrates the limitations of Ap-
ple’s current strategy that solely relies on app reviewing
to ﬁnd malicious apps and disallows any form of security
monitoring mechanism on iOS devices.
7 Discussion
In this section, we discuss a number of possible counter-
measures against Jekyll apps and analyze the effective-
ness as well as the feasibility of these countermeasures.
Figure 11: The approval notiﬁcation from Apple
to secure iOS and keep ﬁxing known bugs, it is becoming
extremely difﬁcult to ﬁnd exploitable vulnerabilities in
newer versions of iOS. Our attack does not try to achieve
a jailbreak on iOS devices, instead, it takes advantage
of the intrinsic incapability of the App Review process
and the design ﬂaws of iOS to deliver various types of
malicious operations remotely, which cannot be trivially
addressed via software updates. Note that, it is possible
for Jekyll apps to take advantage of the vulnerabilities
used by jailbreak tools to compromise iOS devices.
C. Miller [37] recently discovered a vulnerability in
the iOS code signing mechanism, which allows attack-
ers to allocate a writeable and executable memory buffer.
He demonstrated that, by exploiting this vulnerability, a
malicious app can safely pass the app review process if
it generates malicious code only at runtime. However,
Apple had instantly ﬁxed the issue, and therefore, effec-
tively blocked apps that use similar methods to load or
construct malicious code during runtime.
In contrast, Jekyll apps do not hinge on speciﬁc im-
plementation ﬂaws in iOS. They present an incomplete
view of their logic (i.e., control ﬂows) to app reviewers,
and obtain the signatures on the code gadgets that remote
attackers can freely assemble at runtime by exploiting
the planted vulnerabilities to carry out new (malicious)
logic.
In addition, the lack of runtime security moni-
toring on iOS makes it very hard to detect and prevent
Jekyll apps. Considering that ROP attacks can achieve
Turing-completeness [9] and automatic ROP shellcode
generation is also possible [29, 43], the attack scheme in
this paper signiﬁcantly generalizes the threat in [37].
Return-Oriented Programming (ROP) [44], without
introducing new instructions, carries out new logic that
is not embodied in the original code. ROP and its vari-
ants [11, 29, 33, 36] allow attackers to create new con-
trol ﬂows of a program at runtime via code gadget rear-
USENIX Association  
22nd USENIX Security Symposium  569
11
7.1 Possible Detection at App Review Stage
Two possible directions that the app reviewers may pur-
sue to detect Jekyll apps are: (i) discover the vulnerabil-
ities we plant; (ii) identify the code gadgets we hide.
We emphasis that discovering software vulnerabilities
using static analysis alone is fundamentally an undecid-
able problem [35], even without considering the power-
ful adversary in our attack who can arbitrarily obscure
the presence of the vulnerabilities. Dynamic analysis
based vulnerability detection approaches can also be eas-
ily defeated by using complicated trigger conditions and
encrypted input data. We argue that the task of making
all apps in App Store vulnerability-free is not only theo-
retically and practically difﬁcult, but also quite infeasible
to Apple from an economic perspective because such at-
tempts will signiﬁcantly complicate the review tasks, and
therefore, prolong the app review and approval process
that is already deemed low in throughput by third-party
app developers.
To simplify the engineering efforts, our current imple-
mentation of Jekyll app directly includes some code gad-
gets in an isolated fashion (i.e., unreachable from pro-
gram entry points), essentially leaving them as dead code
that may be detectable and in turn removed during app
review process. However, given our freedom to craft the
app, it is totally possible to collect all gadgets from the
code that implements the legitimate functionalities of the
app, without the need to hide extra gadgets as dead code.
In summary, even though the hidden vulnerabilities
and gadgets might take unusual forms comparing with
regular code, accurately detecting Jekyll apps (e.g., based
on statistical analysis) is still an open challenge. Thus,
detecting Jekyll apps in App Review process via vulnera-
bility discovery or gadgets identiﬁcation is not a feasible
solution.
7.2 Possible Mitigation through Improved or New
Runtime Security
Generally, improving the existing security mechanisms
or introducing more advanced runtime monitoring mech-
anisms can limit Jekyll apps’ capability to perform mali-
cious operations. However, completely defeating Jekyll
apps is not easy.
• A natural idea to limit Jekyll apps is to technically
prevent third-party apps from loading private frame-
works or directly invoking private APIs. However,
Jekyll apps do not have to dynamically load private
frameworks. As we discussed, since many pub-
lic frameworks rely on these private frameworks,
Jekyll apps can reasonably link to these public
frameworks so that certain private frameworks will
also be loaded into the process space by the sys-
tem linker. A more strict execution environment
like Native Client [50] can help prevent the apps
from directly invoking private APIs by loading pri-
vate frameworks into a separate space and hooking
all invocations. However, since iOS public and pri-
vate frameworks are tightly coupled, applying such
a mechanism to iOS is quite challenging.
• Fine-grained ASLR such as [27, 39, 46] can greatly
reduce the number of gadgets that we can locate
during runtime even with the help of the planted
information leakage vulnerabilities. Although ex-
panding the scale and reﬁning the granularity of
the information leakage can help obtain a detailed
view of the memory layout, Jekyll apps may lose
the stealthiness due to the increased exposure of the
vulnerabilities and increased runtime overhead.
• A ﬁne-grained permission model, sandbox proﬁle,
or user-driven access control policy [28,42] can also
help limit the damages done by Jekyll apps. How-
ever, simply using Android-like permission system
will not be an unsurmountable obstacle to Jekyll
apps. As long as a Jekyll app can reasonably re-
quire all permissions, it can still carry out certain
attacks successfully. A user-driven access control
model [28, 42] also cannot stop Jekyll apps from
abusing the access already granted and attacking
other apps or the kernel. Take the greeting card app