title:Evaluation of Intrusion Detection Systems in Virtualized Environments
Using Attack Injection
author:Aleksandar Milenkoski and
Bryan D. Payne and
Nuno Antunes and
Marco Vieira and
Samuel Kounev and
Alberto Avritzer and
Matthias Luft
Evaluation of Intrusion Detection Systems in
Virtualized Environments Using Attack Injection
Aleksandar Milenkoski1(B), Bryan D. Payne2, Nuno Antunes3, Marco Vieira3,
Samuel Kounev1, Alberto Avritzer4, and Matthias Luft5
1 University of W¨urzburg, W¨urzburg, Germany
{milenkoski,skounev}@acm.org
2 Netﬂix Inc., Los Gatos, CA, USA
PI:EMAIL
3 University of Coimbra, Coimbra, Portugal
{nmsa,mvieira}@dei.uc.pt
4 Siemens Corporation, Corporate Technology, Princeton, NJ, USA
PI:EMAIL
5 Enno Rey Netzwerke GmbH, Heidelberg, Germany
PI:EMAIL
Abstract. The evaluation of intrusion detection systems (IDSes) is an
active research area with many open challenges, one of which is the gener-
ation of representative workloads that contain attacks. In this paper, we
propose a novel approach for the rigorous evaluation of IDSes in virtual-
ized environments, with a focus on IDSes designed to detect attacks lever-
aging or targeting the hypervisor via its hypercall interface. We present
hInjector, a tool for generating IDS evaluation workloads by injecting
such attacks during regular operation of a virtualized environment. We
demonstrate the application of our approach and show its practical use-
fulness by evaluating a representative IDS designed to operate in virtual-
ized environments. The virtualized environment of the industry-standard
benchmark SPECvirt sc2013 is used as a testbed, whose drivers generate
workloads representative of workloads seen in production environments.
This work enables for the ﬁrst time the injection of attacks in virtualized
environments for the purpose of generating representative IDS evaluation
workloads.
Keywords: Intrusion detection systems · Virtualization · Evaluation ·
Attack injection
1 Introduction
Virtualization has been receiving increasing interest as a way to reduce costs
through server consolidation and to enhance the ﬂexibility of physical infrastruc-
tures. It allows the creation of virtual instances of physical devices, such as net-
work and processing units. In a virtualized system, governed by a hypervisor,
resources are shared among virtual machines (VMs).
c(cid:2) Springer International Publishing Switzerland 2015
H. Bos et al. (Eds.): RAID 2015, LNCS 9404, pp. 471–492, 2015.
DOI: 10.1007/978-3-319-26362-5 22
472
A. Milenkoski et al.
Although virtualization provides many beneﬁts, it introduces new security
challenges; that is, the introduction of a hypervisor introduces new threats.
Hypervisors expose several attack surfaces such as device drivers, VM exit
events, or hypercalls. Hypercalls are software traps from a kernel of a partially or
fully paravirtualized VM to the hypervisor. They enable the execution of severe
attacks. For instance, triggering a vulnerability of a hypercall handler (i.e., a
hypercall vulnerability) may lead to crash of the hypervisor or to altering the
hypervisor’s memory (see, for example, [1,2]).
The research and industry communities have developed security mechanisms
that can detect hypercall attacks. These include intrusion detection systems
(IDSes), such as Xenini [3] and the de-facto standard host-based IDS OSSEC
(Open Source SECurity),1 as well as access control systems, such as XSM-
FLASK (Xen Security Modules - FLux Advanced Security Kernel), which is dis-
tributed with the Xen hypervisor, and McAfee’s VM protection system.2 Under
hypercall attack, we understand any malicious hypercall activity, for example,
triggering a hypercall vulnerability or covert channel operations [4].
The rigorous evaluation of IDSes designed to detect hypercall attacks is cru-
cial for preventing breaches in virtualized environments. For instance, one may
compare multiple IDSes in terms of their attack detection accuracy in order to
identify the optimal IDS. Workloads that contain hypercall attacks are a key
requirement for evaluating the attack detection accuracy of IDSes designed to
detect hypercall attacks. However, the generation of such workloads is challeng-
ing since publicly available scripts that demonstrate hypercall attacks are very
rare [5,6]. An approach towards addressing this issue is attack injection, which
enables the generation of representative IDS evaluation workloads. Attack injec-
tion is controlled execution of attacks during regular operation of the environ-
ment where an IDS under test is deployed. The injection of attacks is performed
with respect to attack models constructed by analysing realistic attacks. Attack
models are systematized activities of attackers targeting a given attack surface.
In this paper, we propose an approach for evaluating IDSes using attack
injection. As part of the proposed approach, we present hInjector, a tool for
injecting hypercall attacks. We designed hInjector to achieve the challenging
goal of satisfying the key criteria for the rigorous, representative, and practically
feasible evaluation of an IDS using attack injection: injection of realistic attacks,
injection during regular system operation, and non-disruptive attack injection
(e.g., prevention of potential crashes due to injected attacks). The approach we
propose may be conceptually applied not only for evaluating IDSes designed to
detect hypercall attacks, but also attacks involving the execution of operations
that are functionally similar to hypercalls. Such operations are, for example, the
ioctl (input/output control) calls that the KVM hypervisor supports.
Our approach uses live IDS testing, since existing IDSes designed to detect
hypercall attacks perform on-line monitoring. Further, it enables the evaluation
1 http://www.ossec.net/; OSSEC can be conﬁgured to analyze in real-time log ﬁles
that contain information on executed hypercalls.
2 http://www.google.com/patents/US8381284.
Evaluation of Intrusion Detection Systems in Virtualized Environments
473
of IDSes that do and do not require training (i.e., it involves IDS training, which
is needed for evaluating IDSes that require training). We demonstrate the appli-
cation and practical usefulness of the approach by evaluating Xenini [3], a rep-
resentative IDS designed to detect hypercall attacks. We inject realistic attacks
triggering publicly disclosed hypercall vulnerabilities and speciﬁcally crafted eva-
sive attacks. We extensively evaluate Xenini considering multiple conﬁgurations
of the IDS. Such an extensive evaluation would not have been possible before
due to the previously mentioned issues.
This paper is organized as follows: in Sect. 2, we provide the essential back-
ground and discuss related work; in Sect. 3, we present an approach for evaluating
IDSes; in Sect. 4, we introduce the hInjector tool; in Sect. 5, we demonstrate the
application of the proposed approach; in Sect. 6, we discuss future work and
conclude this paper.
2 Background and Related Work
Paravirtualization and Hypercalls. Paravirtualization, an alternative to full
(native) virtualization, is a virtualization mode that enables the performance-
eﬃcient virtualization of VM components based on collaboration between VMs
and the hypervisor. VM components that may be paravirtualized include disk
and network devices, interrupts and timers, emulated platform components (e.g.,
motherboards and device buses), privileged instructions, and pagetables.
With recent advances in hardware design, paravirtualizing privileged instruc-
tions and pagetables often does not provide performance beneﬁts over full virtu-
alization. However, paravirtualizing the other VM components mentioned above
is beneﬁcial. As a result, multiple virtualization modes have emerged, many of
which involve paravirtualizing VM components of fully virtualized VMs. Hyper-
calls are operations that VMs use for working with paravirtualized components.
They are software traps from a kernel of a VM to the underlying hypervisor.
The Hypercall Attack Surface. The hypercall interface is an attack surface
that can be used for executing attacks targeting the hypervisor or breaking the
boundaries set by it. This may result in unauthorized information ﬂow between
VMs or executing malicious code with hypervisor privilege (see [1,2]).
In a previous work [5], we have analyzed 35 publicly disclosed hypercall
vulnerabilities and identiﬁed patterns of activities for triggering the considered
vulnerabilities. We categorized the identiﬁed patterns into the following attack
models: setup phase (optional) — execution of one or multiple regular hypercalls
(i.e., hypercalls with regular parameter value(s) that may be executed during
regular system operation) setting up the virtualized environment as necessary
for triggering a given hypercall vulnerability; attack phase — execution of a single
regular hypercall, or a hypercall with speciﬁcally crafted parameter value(s); or,
execution of a series of regular hypercalls in a given order. In this work, we use
these models for injecting hypercall attacks.
Intrusion Detection. Given the high severity of hypercall attacks, the research
and industry communities have developed IDSes that can detect such attacks.
474
A. Milenkoski et al.
Examples are Collabra [7], Xenini [3], C2(Covert Channel) Detector [4], Wiz-
ard [8], MAC/HAT (Mandatory Access Control/Hypercall Access Table) [6],
RandHyp [9], and OSSEC. Most of these IDSes have the following characteris-
tics in common:
– monitoring method and attack detection technique — they perform on-line
(i.e., real-time) monitoring of VMs’ hypercall activities and use a variety
of anomaly-based attack detection techniques, which require training using
benign (i.e., regular) hypercall activities;
– architecture — they have a module integrated into the hypervisor, intercepting
invoked hypercalls and sending information relevant for intrusion detection to
an analysis module deployed in a designated VM.
Current IDSes designed to detect hypercall attacks analyze the following prop-
erties of VMs’ hypercall activities, which we refer to as detection-relevant prop-
erties: (i) hypercall identiﬁcation numbers (IDs) and values of parameters of
individual, or sequences of, hypercalls, and (ii) hypercall call sites (i.e., memory
addresses from where hypercalls have been executed).
IDS Evaluation and Attack Injection. The accurate and rigorous evaluation
of IDSes is crucial for preventing security breaches. IDS evaluation workloads
that contain realistic attacks are a key requirement for such an evaluation. In
Sect. 1, we stated that IDSes designed to detect hypercall attacks currently can-
not be evaluated in a rigorous manner due to the lack of publicly available
attack scripts that demonstrate hypercall attacks. Attack injection is a method
addressing this issue, which is in the focus of this work.
To the best of our knowledge, we are the ﬁrst to focus on evaluating IDSes
designed to operate in virtualized environments, such as IDSes designed to detect
hypercall attacks. Further, we are the ﬁrst to consider the injection of hypercall
attacks and of attacks targeting hypervisors in general. Pham et al. [10] and Le et
al. [11] focus on injecting generic software faults directly into hypervisors. This is
not suitable for evaluating IDSes — IDSes do not monitor states of hypervisors
since they are not relevant for detecting attacks in a proactive manner.
Fonseca et al. [12] present an approach for evaluating network-based IDSes,
which involves injection of attacks. They built Vulnerability Injector, a mecha-
nism that injects vulnerabilities in the source code of web applications, and an
Attack Injector, a mechanism that generates attacks triggering injected vulner-
abilities. There are fundamental diﬀerences between our work and the work of
Fonseca et al. [12], which is focussing on attack injection at application level.
This includes the characteristics of the IDSes in focus, the required attack mod-
els, and the criteria for designing procedures and tools for injecting attacks.
3 Approach
Figure 1a shows our approach, which has two phases: planning and testing. The
planning phase consists of: (i) speciﬁcation of an IDS monitoring landscape
Evaluation of Intrusion Detection Systems in Virtualized Environments
475
Planning 
Initialization of the IDS 
monitoring landscape 
Specification of an IDS 
monitoring landscape 
Characterization of benign 
hypercall activities 
VM 1 
VM 2 
Hypercalls 
VM n 
Specification of  
attack injection scenarios 
Kernel 
System calls 
Kernel 
System calls 
Kernel 
System calls 
User 
Tasks 
User 
Tasks 
User 
Tasks 
Initialization of the IDS 
monitoring landscape 
Fully/para-virtualized 
Fully/para-virtualized 
Fully/para-virtualized 
hardware 
hardware 
hardware 
Testing 
IDS training 
Attack injection 
Calculation of metric 
Hypervisor 
values 
(a)
IDS monitoring component 
(b)
Fig. 1. (a) Approach for evaluating IDSes; (b) IDS monitoring landscape
(i.e., specifying a virtualized environment where the IDS under test is to be
deployed), (ii) characterization of benign hypercall activities (i.e., making rele-
vant observations about the benign hypercall activities), and (iii) speciﬁcation
of attack injection scenarios (Sect. 3.1). The testing phase consists of: (i) IDS
training, (ii) attack injection, and (iii) calculation of metric values (Sect. 3.2).
The activities of the testing phase are performed based on observations made in
the planning phase. IDS training needs to be performed only when evaluating
an IDS that requires training (i.e., an anomaly-based IDS).
3.1 Planning
Speciﬁcation of an IDS Monitoring Landscape. A typical IDS designed to
detect hypercall attacks monitors the hypercall activity of one or multiple VMs
at the same time. VM characteristics inﬂuence the hypercall activity:
– virtualization mode inﬂuences which hypercalls can be executed,
– workloads inﬂuence which system calls can be executed, many of which map
to hypercalls, and
– system architecture and hardware inﬂuence the VM’s interface, and the type
and frequency of hypercalls needed (e.g., page table update operations, which
take place when page swapping occurs due to insuﬃcient memory).
The aggregate of these characteristics across all VMs on a hypervisor is the
monitoring landscape of an IDS designed to detect hypercall attacks. Figure 1b
depicts an IDS monitoring landscape. The ﬁrst activity of the planning phase of
our approach is to specify an IDS monitoring landscape by deﬁning the charac-
teristics above for the test system. By deﬁning workloads, we mean specifying
drivers generating workloads in an automated and repeatable manner. By deﬁn-
ing hardware, we mean allocating an amount of hardware resources to VMs that
is ﬁxed over time (i.e., disabling CPU or memory ballooning). We discuss more
on the importance of specifying an IDS monitoring landscape in Sect. 3.2.
Characterization of Benign Hypercall Activities. Characterization of a
VM’s benign hypercall activity is crucial for answering two major questions: How
long should the IDS under test be trained? and What injected attacks should be
476
A. Milenkoski et al.
used for the purpose of rigorous IDS testing? It consists of two parts: (i) esti-
mation of benign hypercall activity steady-state and (ii) calculating relevant
statistics. These activities are best performed when hypercall activities are cap-
tured in traces for processing oﬀ-line.
Estimation of benign hypercall activity steady-state: Steady-state of the
benign hypercall activity of a VM can be understood with respect to the sum of
ﬁrst-time occurring variations of a detection-relevant property at a given point
in time. We deﬁne St at time t where St is an increasing function such that
limt→∞ St = const. The estimation of steady-state is crucial for determining an
optimal length of the period during which an IDS under test should be trained
in the testing phase (i.e., for avoiding IDS under-training).
In order to estimate steady-state, an IDS evaluator should ﬁrst initialize the
IDS monitoring landscape; that is, bring the VMs in the landscape to the state
after their creation and start workloads in the VMs. Then the steady-state of
the benign hypercall activities of a VM may be estimated by setting a target for
the slope of a growth curve depicting St until a given time tmax. The slope of
such a curve, when observed over a given period, indicates the rate of ﬁrst-time
occurring variations of the detection-relevant property in the period. Letting σ
be a target for the slope of a growth curve over a period ts = ts2 − ts1, we have
0 <= Sts2−Sts1
<= σ. This process may be repeated multiple times for diﬀerent
values of tmax to experimentally determine σ for each VM.3 Attacks should be
injected from a VM until time tmax, but only after the VM’s hypercall activity
has reached steady-state.
ts
The IDS under test should operate in learning mode when steady-state is
estimated. This helps to create operating conditions of the overall virtualized
environment, which are (almost) equivalent to those when the IDS will be trained
in the testing phase. Note that an IDS may have an impact on the time needed for
hypercall activities to reach steady-state due to incurred monitoring overhead.
Calculating relevant statistics: Two key statistics need to be calculated: (i)
the average rate of occurrence of the detection-relevant property — this statistic
should be calculated using data collected between ts1 and tmax, and (ii) the
number of occurrences of each variation of the detection-relevant property — this
statistic should be calculated using data collected while the system is progressing
towards a steady state. These statistics help calculate metric values in the testing
phase and create realistic attack injection scenarios as discussed next.
Speciﬁcation of Attack Injection Scenarios. Two characteristics distinguish
each attack injection scenario: attack content and attack injection time.
Attack content is the detection-relevant property of a hypercall attack in the
context of a given IDS evaluation study (e.g., a speciﬁc sequence of hypercalls).
Speciﬁcation of attack content enables the injection of attacks that conform to
representative attack models (see Sect. 2). In addition, it enables the injection
of evasive attacks, for example, attacks that closely resemble common regular
3 This raises the question whether hypercall activities are repeatable. We discuss this
topic in Sect. 3.2.
Evaluation of Intrusion Detection Systems in Virtualized Environments
477
activities — these attacks may be highly eﬀective “mimicry” attacks. Crafting
“mimicry” attacks is done based on knowledge on what, and how frequently,