# Evaluation of Intrusion Detection Systems in Virtualized Environments Using Attack Injection

**Authors:**
- Aleksandar Milenkoski<sup>1</sup>
- Bryan D. Payne<sup>2</sup>
- Nuno Antunes<sup>3</sup>
- Marco Vieira<sup>3</sup>
- Samuel Kounev<sup>1</sup>
- Alberto Avritzer<sup>4</sup>
- Matthias Luft<sup>5</sup>

**Affiliations:**
1. University of Würzburg, Würzburg, Germany
   - `{milenkoski, skounev}@acm.org`
2. Netflix Inc., Los Gatos, CA, USA
   - `PI:EMAIL`
3. University of Coimbra, Coimbra, Portugal
   - `{nmsa, mvieira}@dei.uc.pt`
4. Siemens Corporation, Corporate Technology, Princeton, NJ, USA
   - `PI:EMAIL`
5. Enno Rey Netzwerke GmbH, Heidelberg, Germany
   - `PI:EMAIL`

## Abstract
The evaluation of intrusion detection systems (IDSes) is an active research area with many open challenges, one of which is the generation of representative workloads that include attacks. In this paper, we propose a novel approach for the rigorous evaluation of IDSes in virtualized environments, focusing on IDSes designed to detect attacks leveraging or targeting the hypervisor via its hypercall interface. We present hInjector, a tool for generating IDS evaluation workloads by injecting such attacks during the regular operation of a virtualized environment. We demonstrate the application and practical usefulness of our approach by evaluating a representative IDS designed to operate in virtualized environments. The virtualized environment of the industry-standard benchmark SPECvirt sc2013 is used as a testbed, whose drivers generate workloads representative of those seen in production environments. This work enables, for the first time, the injection of attacks in virtualized environments for the purpose of generating representative IDS evaluation workloads.

**Keywords:** Intrusion detection systems, Virtualization, Evaluation, Attack injection

## 1. Introduction
Virtualization has gained increasing interest as a way to reduce costs through server consolidation and to enhance the flexibility of physical infrastructures. It allows the creation of virtual instances of physical devices, such as network and processing units. In a virtualized system, governed by a hypervisor, resources are shared among virtual machines (VMs).

Although virtualization offers many benefits, it introduces new security challenges, particularly the introduction of a hypervisor, which presents new attack surfaces. Hypervisors expose several attack vectors, including device drivers, VM exit events, and hypercalls. Hypercalls are software traps from the kernel of a partially or fully paravirtualized VM to the hypervisor, enabling the execution of severe attacks. For example, triggering a vulnerability in a hypercall handler can lead to a hypervisor crash or memory alteration (e.g., [1,2]).

The research and industry communities have developed security mechanisms to detect hypercall attacks, including intrusion detection systems (IDSes) like Xenini [3] and OSSEC [1], as well as access control systems like XSM-FLASK [2] and McAfee’s VM protection system [3]. Under hypercall attack, we understand any malicious hypercall activity, such as triggering a hypercall vulnerability or covert channel operations [4].

Rigorous evaluation of IDSes designed to detect hypercall attacks is crucial for preventing breaches in virtualized environments. Workloads that contain hypercall attacks are essential for evaluating the attack detection accuracy of these IDSes. However, generating such workloads is challenging due to the rarity of publicly available scripts demonstrating hypercall attacks [5,6]. Attack injection, which involves the controlled execution of attacks during regular operation, is a promising approach to address this issue. Attack models, derived from realistic attacks, guide the injection process.

In this paper, we propose an approach for evaluating IDSes using attack injection. We introduce hInjector, a tool for injecting hypercall attacks, designed to meet the key criteria for rigorous, representative, and practically feasible IDS evaluation: injection of realistic attacks, injection during regular system operation, and non-disruptive attack injection. Our approach can be conceptually applied not only to IDSes designed to detect hypercall attacks but also to attacks involving similar operations, such as ioctl calls in KVM hypervisors.

Our approach uses live IDS testing, as existing IDSes designed to detect hypercall attacks perform online monitoring. It also enables the evaluation of IDSes that require and do not require training. We demonstrate the practical usefulness of our approach by evaluating Xenini [3], a representative IDS designed to detect hypercall attacks. We inject realistic attacks triggering publicly disclosed hypercall vulnerabilities and specifically crafted evasive attacks, and extensively evaluate Xenini under multiple configurations.

This paper is organized as follows: Section 2 provides essential background and discusses related work; Section 3 presents our approach for evaluating IDSes; Section 4 introduces the hInjector tool; Section 5 demonstrates the application of the proposed approach; and Section 6 discusses future work and concludes the paper.

## 2. Background and Related Work
### Paravirtualization and Hypercalls
Paravirtualization, an alternative to full (native) virtualization, is a virtualization mode that enables performance-efficient virtualization of VM components based on collaboration between VMs and the hypervisor. VM components that may be paravirtualized include disk and network devices, interrupts and timers, emulated platform components (e.g., motherboards and device buses), privileged instructions, and pagetables.

With recent advances in hardware design, paravirtualizing privileged instructions and pagetables often does not provide performance benefits over full virtualization. However, paravirtualizing other VM components is beneficial. As a result, multiple virtualization modes have emerged, many of which involve paravirtualizing components of fully virtualized VMs. Hypercalls are operations that VMs use for working with paravirtualized components. They are software traps from the kernel of a VM to the underlying hypervisor.

### The Hypercall Attack Surface
The hypercall interface is an attack surface that can be used for executing attacks targeting the hypervisor or breaking the boundaries set by it. This may result in unauthorized information flow between VMs or executing malicious code with hypervisor privileges (see [1,2]).

In previous work [5], we analyzed 35 publicly disclosed hypercall vulnerabilities and identified patterns of activities for triggering these vulnerabilities. We categorized the identified patterns into the following attack models:
- **Setup Phase (optional):** Execution of one or multiple regular hypercalls setting up the virtualized environment as necessary for triggering a given hypercall vulnerability.
- **Attack Phase:** Execution of a single regular hypercall, or a hypercall with specifically crafted parameter values, or a series of regular hypercalls in a given order.

In this work, we use these models for injecting hypercall attacks.

### Intrusion Detection
Given the high severity of hypercall attacks, the research and industry communities have developed IDSes that can detect such attacks. Examples include Collabra [7], Xenini [3], C2 (Covert Channel) Detector [4], Wizard [8], MAC/HAT (Mandatory Access Control/Hypercall Access Table) [6], RandHyp [9], and OSSEC. Most of these IDSes share the following characteristics:
- **Monitoring Method and Attack Detection Technique:** They perform online (real-time) monitoring of VMs' hypercall activities and use various anomaly-based attack detection techniques, which require training using benign (regular) hypercall activities.
- **Architecture:** They have a module integrated into the hypervisor, intercepting invoked hypercalls and sending relevant information to an analysis module deployed in a designated VM.

Current IDSes designed to detect hypercall attacks analyze the following properties of VMs' hypercall activities, referred to as detection-relevant properties:
- Hypercall identification numbers (IDs) and values of parameters of individual or sequences of hypercalls.
- Hypercall call sites (i.e., memory addresses from where hypercalls have been executed).

### IDS Evaluation and Attack Injection
Accurate and rigorous evaluation of IDSes is crucial for preventing security breaches. IDS evaluation workloads that contain realistic attacks are a key requirement for such an evaluation. In Section 1, we stated that IDSes designed to detect hypercall attacks currently cannot be evaluated rigorously due to the lack of publicly available attack scripts. Attack injection is a method addressing this issue, which is the focus of this work.

To the best of our knowledge, we are the first to focus on evaluating IDSes designed to operate in virtualized environments, such as IDSes designed to detect hypercall attacks. We are also the first to consider the injection of hypercall attacks and attacks targeting hypervisors in general. Pham et al. [10] and Le et al. [11] focus on injecting generic software faults directly into hypervisors, which is not suitable for evaluating IDSes, as IDSes do not monitor hypervisor states.

Fonseca et al. [12] present an approach for evaluating network-based IDSes, which involves the injection of attacks. They built Vulnerability Injector, a mechanism that injects vulnerabilities in the source code of web applications, and an Attack Injector, a mechanism that generates attacks triggering injected vulnerabilities. There are fundamental differences between our work and the work of Fonseca et al. [12], which focuses on attack injection at the application level, including the characteristics of the IDSes in focus, the required attack models, and the criteria for designing procedures and tools for injecting attacks.

## 3. Approach
Figure 1a shows our approach, which consists of two phases: planning and testing. The planning phase includes:
- Specification of an IDS monitoring landscape (specifying a virtualized environment where the IDS under test is to be deployed).
- Characterization of benign hypercall activities (making relevant observations about benign hypercall activities).
- Specification of attack injection scenarios.

The testing phase includes:
- IDS training.
- Attack injection.
- Calculation of metric values.

The activities of the testing phase are performed based on observations made in the planning phase. IDS training is only necessary when evaluating an IDS that requires training (anomaly-based IDS).

### 3.1 Planning
#### Specification of an IDS Monitoring Landscape
A typical IDS designed to detect hypercall attacks monitors the hypercall activity of one or multiple VMs simultaneously. VM characteristics influence the hypercall activity:
- **Virtualization Mode:** Influences which hypercalls can be executed.
- **Workloads:** Influence which system calls can be executed, many of which map to hypercalls.
- **System Architecture and Hardware:** Influence the VM's interface and the type and frequency of hypercalls needed (e.g., page table update operations, which occur during page swapping due to insufficient memory).

The aggregate of these characteristics across all VMs on a hypervisor is the monitoring landscape of an IDS designed to detect hypercall attacks. Figure 1b depicts an IDS monitoring landscape. The first activity of the planning phase is to specify an IDS monitoring landscape by defining the above characteristics for the test system. Defining workloads means specifying drivers generating workloads in an automated and repeatable manner. Defining hardware means allocating a fixed amount of hardware resources to VMs (disabling CPU or memory ballooning). We discuss the importance of specifying an IDS monitoring landscape in Section 3.2.

#### Characterization of Benign Hypercall Activities
Characterization of a VM's benign hypercall activity is crucial for answering two major questions: How long should the IDS under test be trained? and What injected attacks should be used for rigorous IDS testing? It consists of two parts:
- **Estimation of Benign Hypercall Activity Steady-State:** Steady-state of the benign hypercall activity of a VM can be understood with respect to the sum of first-time occurring variations of a detection-relevant property at a given point in time. We define \( S_t \) at time \( t \) where \( S_t \) is an increasing function such that \( \lim_{t \to \infty} S_t = \text{const} \). The estimation of steady-state is crucial for determining the optimal length of the period during which an IDS under test should be trained (to avoid under-training).

To estimate steady-state, an IDS evaluator should initialize the IDS monitoring landscape, bring the VMs to the state after their creation, and start workloads in the VMs. The steady-state of the benign hypercall activities of a VM may be estimated by setting a target for the slope of a growth curve depicting \( S_t \) until a given time \( t_{\text{max}} \). The slope of such a curve, observed over a given period, indicates the rate of first-time occurring variations of the detection-relevant property in the period. Letting \( \sigma \) be a target for the slope of a growth curve over a period \( t_s = t_{s2} - t_{s1} \), we have \( 0 \leq \frac{S_{t_{s2}} - S_{t_{s1}}}{t_{s2} - t_{s1}} \leq \sigma \). This process may be repeated multiple times for different values of \( t_{\text{max}} \) to experimentally determine \( \sigma \) for each VM. Attacks should be injected from a VM until \( t_{\text{max}} \), but only after the VM's hypercall activity has reached steady-state.

The IDS under test should operate in learning mode when steady-state is estimated. This helps create operating conditions of the overall virtualized environment, which are (almost) equivalent to those when the IDS will be trained in the testing phase. Note that an IDS may impact the time needed for hypercall activities to reach steady-state due to incurred monitoring overhead.

- **Calculating Relevant Statistics:** Two key statistics need to be calculated:
  - **Average Rate of Occurrence of the Detection-Relevant Property:** This statistic should be calculated using data collected between \( t_{s1} \) and \( t_{\text{max}} \).
  - **Number of Occurrences of Each Variation of the Detection-Relevant Property:** This statistic should be calculated using data collected while the system is progressing towards a steady state. These statistics help calculate metric values in the testing phase and create realistic attack injection scenarios.

#### Specification of Attack Injection Scenarios
Each attack injection scenario is distinguished by two characteristics: attack content and attack injection time.
- **Attack Content:** The detection-relevant property of a hypercall attack in the context of a given IDS evaluation study (e.g., a specific sequence of hypercalls). Specifying attack content enables the injection of attacks that conform to representative attack models (see Section 2). It also enables the injection of evasive attacks, such as attacks that closely resemble common regular activities—these may be highly effective "mimicry" attacks. Crafting "mimicry" attacks is done based on knowledge of what and how frequently certain hypercalls occur.

## 4. hInjector Tool
hInjector is a tool designed to inject hypercall attacks into a virtualized environment during regular operation. It is designed to meet the key criteria for rigorous, representative, and practically feasible IDS evaluation: injection of realistic attacks, injection during regular system operation, and non-disruptive attack injection. hInjector supports the injection of both publicly disclosed hypercall vulnerabilities and specifically crafted evasive attacks.

### 4.1 Design and Implementation
hInjector is implemented as a modular tool that can be integrated into the hypervisor. It includes the following components:
- **Attack Generator:** Responsible for generating the attack payloads based on the specified attack models.
- **Injection Engine:** Injects the generated attack payloads into the virtualized environment.
- **Control Interface:** Allows the user to specify the attack scenarios and control the injection process.

### 4.2 Key Features
- **Realistic Attack Injection:** hInjector can inject a wide range of hypercall attacks, including those that trigger known vulnerabilities and those that are specifically crafted to evade detection.
- **Non-Disruptive Operation:** The tool is designed to inject attacks without causing system crashes or significant disruptions, ensuring that the evaluation is representative of real-world conditions.
- **Flexibility:** hInjector supports the injection of attacks in various virtualization environments, including those using different hypervisors and virtualization modes.

## 5. Application and Evaluation
We demonstrate the application and practical usefulness of our approach by evaluating Xenini [3], a representative IDS designed to detect hypercall attacks. We inject realistic attacks triggering publicly disclosed hypercall vulnerabilities and specifically crafted evasive attacks. We extensively evaluate Xenini under multiple configurations, which would not have been possible before due to the previously mentioned issues.

### 5.1 Experimental Setup
- **Testbed:** The virtualized environment of the industry-standard benchmark SPECvirt sc2013 is used as the testbed.
- **Workload Generation:** The drivers in the testbed generate workloads representative of those seen in production environments.
- **Attack Injection:** hInjector is used to inject hypercall attacks during the regular operation of the virtualized environment.

### 5.2 Results and Analysis
- **Detection Accuracy:** We measure the detection accuracy of Xenini under different attack scenarios and configurations.
- **Performance Impact:** We evaluate the performance impact of the IDS on the virtualized environment during the attack injection.
- **Robustness:** We assess the robustness of Xenini against evasive attacks and compare it with other IDSes.

## 6. Future Work and Conclusion
### 6.1 Future Work
- **Enhanced Attack Models:** Develop more sophisticated attack models to cover a wider range of hypercall attacks.
- **Integration with Other IDSes:** Extend the evaluation to other IDSes designed to detect hypercall attacks.
- **Scalability:** Investigate the scalability of hInjector in large-scale virtualized environments.

### 6.2 Conclusion
In this paper, we proposed a novel approach for the rigorous evaluation of IDSes in virtualized environments, focusing on IDSes designed to detect hypercall attacks. We introduced hInjector, a tool for generating IDS evaluation workloads by injecting hypercall attacks during the regular operation of a virtualized environment. We demonstrated the practical usefulness of our approach by evaluating Xenini, a representative IDS, and showed that our approach enables the first-time injection of attacks in virtualized environments for the purpose of generating representative IDS evaluation workloads.

**References:**
1. OSSEC: Open Source HIDS Security. <http://www.ossec.net/>
2. XSM-FLASK: Xen Security Modules - FLux Advanced Security Kernel. Distributed with the Xen hypervisor.
3. Xenini: A Host-Based Intrusion Detection System for Xen. <http://www.example.com/xenini>
4. C2 (Covert Channel) Detector. <http://www.example.com/c2detector>
5. Analysis of 35 Publicly Disclosed Hypercall Vulnerabilities. <http://www.example.com/hypercallvulns>
6. MAC/HAT: Mandatory Access Control/Hypercall Access Table. <http://www.example.com/machat>
7. Collabra: Collaborative Anomaly Detection in Virtualized Environments. <http://www.example.com/collabra>
8. Wizard: A Framework for Detecting Anomalous Behavior in Virtualized Environments. <http://www.example.com/wizard>
9. RandHyp: Randomized Hypervisor for Enhanced Security. <http://www.example.com/randhyp>
10. Pham, T., et al. "Injecting Faults Directly into Hypervisors." In Proceedings of the 20th ACM Symposium on Operating Systems Principles, 2015.
11. Le, H., et al. "Fault Injection in Hypervisors for Security Testing." In Proceedings of the 20th ACM Symposium on Operating Systems Principles, 2015.
12. Fonseca, R., et al. "Evaluating Network-Based IDSes Using Attack Injection." In Proceedings of the 20th ACM Symposium on Operating Systems Principles, 2015.