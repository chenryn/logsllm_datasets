tion of the routing protocol instances such that the trees to
each destination do not share many edges in common. Every
node then stores k forwarding table entries for each destina-
tion (one corresponding to each tree).
2. Allow trafﬁc to switch between paths at intermediate hops.
Rather than routing trafﬁc over a single topology, path splic-
ing allows trafﬁc to switch topologies at any intermediate hop
along the path. Thus, rather than having k options, a source
gains access to considerably more paths to a destination (in
theory, as many as kl, where l is the number of hops on a
path between the source and destination).
3. Give end systems the control to switch paths. To select a path,
an end system includes splicing bits in the packet, along with
the packet’s destination. These splicing bits control which of
the k forwarding tables is used at each hop en route to the
destination.
In later sections, we describe several possible
designs for the splicing bits.
Path splicing has many possible realizations in various contexts.
For example, it does not mandate the use of any particular routing
protocol, nor does it specify how alternate topologies are gener-
ated. In the rest of this paper, we study path splicing in the con-
text of Internet routing. Section 5 discusses the application of path
splicing to intradomain routing; Section 6 discusses path splicing
in the context of interdomain routing. In each case, the methods for
2We describe splicing as running k routing protocol instances for
conceptual simplicity. Later, we describe how the same function
can be achieved by only running a single routing protocol instance.
generating alternate paths are slightly different, but both share the
above three properties.
5.
INTRADOMAIN PATH SPLICING
In this section, we describe the design of path splicing in the
context of intradomain routing. We also deﬁne some of the termi-
nology we use when talking about splicing in the later sections.
5.1 Control Plane
The ﬁrst step in splicing is to create a set of slices for the net-
work. A slice is essentially a set of shortest path trees for a partic-
ular view of the network graph.
Constructing slices. The path splicing control plane computes
multiple routing trees based on perturbations of the underlying net-
work topology. The control plane comprises of two main compo-
nents: (1) random perturbations of link weights to help deﬂect traf-
ﬁc off the shortest paths for some gains in diversity; and (2) pushing
these routes in the data plane so that they can be used by the routers
in making forwarding decisions.
Conventional shortest paths routing is designed to route trafﬁc
along low-cost paths, but it may create bottlenecks between various
source-destination pairs. To allow endpoints to discover paths other
than shortest paths between any two nodes in the network, path
splicing creates routing trees that are based on random link-weight
perturbations.
(cid:2)
L
Path splicing perturbs link weights based on the original weight
of the link to ensure that the length of the new shortest path is not
very long compared with the original shortest path (stretch). The
following expression deﬁnes the link weight perturbations:
(i, j) = L(i, j) + Weight(a, b, i, j) · Random(0, L(i, j)) (1)
where L(i, j) is the original link weight of the link from nodes i
to j, Weight(a, b, i, j) is a function of some properties of nodes i
and j (e.g., the degrees of the nodes), a and b are constants and
Random(0, L(i, j)) is a random number chosen in the range of 0
to L(i, j).
The nature of the perturbation can be changed by using different
Weight() and Random() functions. The particular Weight() func-
tion used will have an effect on the types of shortest paths selected
by the shortest-path algorithm.
Degree-based perturbations of link weights.
The function
Weight(a, b, i, j) is selected to be a linear function of the sum of
the degrees of i and j, i.e.
∀i,jWeight(a, b, i, j) = fab(degree(i) + degree(j))
where fab is a linear function in degree(i) + degree(j) ranging
from a to b. This function will cause the perturbations to depend
on the end vertices i and j of a link. Links connected to nodes
with a high degree may be perturbed more than links connected to
nodes with smaller degree, which reduces the likelihood of many
shortest paths using the same link. To describe a degree-based per-
turbation, we use the notation Degree-Based [a, b], where a and b
correspond to the minimum and maximum values that can be taken
by the Weight(i, j) function. The intuition behind degree-based
perturbations is to discourage the use of links between high-degree
nodes, introducing more diverse path choices.
5.2 Data Plane
Once we have precomputed multiple slices in the network, a
spliced path can be constructed by “splicing” together path seg-
ments from one or more slices. For example, as shown in Figure 2,
Slice 1
Slice 2
6
1
2
3
4
5
Figure 2: Example of path splicing: The two different slices
shown with dotted lines on top of the original topology reﬂect
two different trees, both rooted at node 6. Trafﬁc can reach
node 6 by traversing one or more trees.
IP Header
011001100 ...
Transport Header
Payload
Each hop examines/removes lg(k) bits
Figure 3: The path splicing header sits between the IP and
the transport headers, facilitating incremental deployment:
routers without path splicing simply forward trafﬁc based on
the IP header.
a spliced path from node 1 to 6 is constructed by starting on slice 1
and then switching to slice 2 at the next hop (node 2). Thus, a
spliced path is composed of multiple path segments from different
slices. It is also easy to construct, since at each hop an independent
forwarding decision could be made to either let the packet be for-
warded on the same slice or switch to another slice. As we describe
further, the packet could carry splicing bits (shown in Figure 3),
which dictate the slice on which the packet is to be forwarded at
each hop along the path. Because each hop stores the forwarding
table entries (FTEs) for each slice in a separate forwarding table,
the bits can index the forwarding table to use (since a forwarding
table corresponds to a slice).
5.2.1 Header format
End systems insert a “shim” splicing header in between the net-
work and transport headers. End systems can set splicing bits in
this header to control the path taken by the packets in the network
by indicating, for each hop, which forwarding table should be used
to forward the packet en route to the destination.
We propose a simple encoding where the shim header contains,
for n hops along the network path, lg(k) bits that indicate an index
into the forwarding table that should be used to forward the trafﬁc
at that hop, where k is the number of slices used to splice the net-
work paths. Thus, if the size of the splicing header is n · lg(k) bits,
then the header allows the packet to switch between k slices for as
many as n hops along the network. Our experiments in Section 7
indicate that reliability of path splicing approaches the best possi-
ble reliability (as limited by the underlying network topology) with
only about 4 or 5 slices. Given that most network-level paths are
typically less than 30 hops [5], even this inefﬁcient encoding would
require only 30 lg(4) = 60 bits. Other encodings could reduce the
overall size of the splicing header.
5.2.2 Forwarding and failure recovery
Forwarding algorithm. To forward packets, each node along the
path: (1) reads the rightmost lg(k) bits from the splicing header
to determine the forwarding table to use for forwarding the packet;
and (2) shifts the bitstream right by lg(k) bits to allow subsequent
hops to perform the same operation. Our previous work describes
the forwarding algorithm in more detail [21].
In the default case, an end system sets the splicing bits in the
splicing header to direct trafﬁc along a path in a single routing tree
(i.e., as would be the case with a conventional routing protocol).
A network can achieve some load balance if sources select their
initial slices at random: in the absence of failure, a different subset
of all sources can route trafﬁc in each perturbed slice, achieving
better “spread” of trafﬁc across the network than could be obtained
by routing all trafﬁc along a single tree. We evaluate the effects of
splicing on trafﬁc in the network in Section 7.7.
Splicing bits carry no explicit semantics; this characteristic has
two important implications. First, it allows path splicing to scale
well, since end hosts never need to learn the details of actual paths
through the network; rather, they simply use the splicing bits as
an opaque identiﬁer for some path, and they can change the path
through the network simply by changing the splicing bits. We be-
lieve that this function is sufﬁcient: end systems tend to care less
about the speciﬁc hop-by-hop details about the paths their trafﬁc is
traversing than they do about whether or not they can route around
a poorly performing (or faulty) path with high likelihood.
Because splicing bits control which path segments from the dif-
ferent slices are used to construct a spliced path, the selection of the
bits determines whether an end-to-end path could be found between
two nodes for which the path on the default path is disconnected.
Our evaluation shows that even an extremely simple choice for the
splicing bits ensures that end systems will be able to ﬁnd an avail-
able path within two trials.
Because the splicing bits are opaque and have no explicit seman-
tics (e.g., they do not specify node addresses for a path), path splic-
ing is incrementally deployable:
routers that have implemented
path splicing can inspect the splicing header and route packets out
a different outgoing interface based on the rightmost lg k bits in
the header. Nodes along the path that do not support path splicing
simply forward data packets as they normally would, based on the
destination IP address in the IP header.
Failure recovery. When a failure occurs, trafﬁc must be redirected
to a different slice; an end host can perform this redirection sim-
ply by changing the bits in the splicing header, which will cause
an end-to-end path to the destination to be spliced from a different
set of slices. This redirection could be performed by either a node
along the path that detects the failure or the end system, end sys-
tems can detect poorly performing paths from a variety of causes
(e.g., queueing, packet loss, etc.), and they are better equipped to
detect when trafﬁc should be deﬂected off of a poorly performing
end-to-end path.
There are many possible ways to attempt recovery. Perhaps the
simplest approach is for an end host to select a new random bit-
string for the splicing header upon detection of a failure, which will
cause trafﬁc to be sent, with high probability, along a completely
different path, thus avoiding the cause of the faulty path. If an end
system were able to determine the location of a failure, however, it
could change only the bits in the splicing header that were needed
to divert trafﬁc around the failure. As a third option, an end system
could divert trafﬁc to a different slice at an early point along the
path (i.e., close to the source) so as to divert trafﬁc to a network
slice that avoided the failure with high likelihood.
Nodes in the network can also take advantage of splicing to di-
vert trafﬁc from default paths during network failures or high con-
gestion. If a router detects that the next-hop for a particular destina-
tion is unreachable, it can send the packet on some other connected
slice while waiting for the routing protocol to converge.
5.3 Optimizations
Single routing protocol instance. It is easy to think of path splic-
ing as running multiple instances of the routing protocol, where
each instance runs with a slightly perturbed version of the topol-
ogy. Unfortunately, running multiple instances of a routing pro-
tocol introduces additional unnecessary overhead including addi-
tional routing messages, as well as resource consumption on the
nodes running multiple instances of the routing software.
Instead, we can implement path splicing within the context of a
single routing protocol instance, with a few minor modiﬁcations.
As in any intradomain routing protocol, each node would discover
the complete network topology via link-state advertisements. Each
node could then generate multiple variants of this topology by per-
turbing the weights on each edge in the graph in the same way as
on other nodes in the topology and could compute forwarding ta-
bles for each slice locally, without having to run multiple routing
protocol instances to advertise perturbed link costs.
Single forwarding table. The basic splicing scheme requires in-
serting FTEs corresponding to each slice in a separate forwarding
table at each node, essentially having a forwarding table for every
slice. Given that every node has a ﬁxed number of neighbors, there
could be many common entries for a particular destination among
the different forwarding tables. For example, if a node has only
two neighbors and we compute 3 slices, then at least two of them
will have the same next hop for any destination. Thus, maintain-
ing separate forwarding tables for every slice can lead to inefﬁcient
use of memory. One possible optimization involves having only a
single forwarding table for all slices and maintain a separate col-
umn which records the different slices for which a particular entry
is valid.
Embed splicing bits into the IP header. As we have described
path splicing, the splicing bits explicitly control which slice each
node on the path should use to forward trafﬁc. In this case, the
size of the shim header is proportional to the length of the path. To
reduce this overhead, the splicing bits could instead be encoded in
a smaller number of bits and embedded into the type-of-service and
IP ID ﬁelds in the IP header; each router could then select the slice
on which to forward trafﬁc based on, say, a hash of these bits (and
possibly also the source and destination IP address).
6.
INTERDOMAIN PATH SPLICING
This section describes the application of path splicing to interdo-
main routing. Interdomain splicing can be deployed without mod-
ifying BGP’s message format and with no additional routing mes-
sages. In fact, it can be deployed using only a single BGP instance.
The key idea involves exploiting the fact that each router learns
one BGP route to each destination per session, and most BGP-
speaking routers already have multiple BGP sessions to neighbor-
ing routers. Rather than selecting a single best route per destination,
a router inserts the best k routes for each destination; a packet’s
splicing bits can then directly indicate which of these k routes a
router should use to forward trafﬁc to each destination. This section
describes the control-plane and data-plane modiﬁcations to routers,
and practical considerations (e.g., ensuring that spliced BGP routes
do not violate business policy).
6.1 Control Plane
Routers typically learn multiple routes to any given destination
preﬁx both from neighboring ASes and from other routers within
the same AS (via internal BGP), as summarized in Figure 4. Some
of these routing table entries may correspond to alternate highly
disjoint paths in the network. Routers may thus already learn mul-
B
B
A
Splicing Bits
select one of
the tunnels
tunnel to egress router
Splicing bits
select one of 
the routes to
C
dst
dst
C
D
Figure 4: Interdomain splicing. The bits at the ingress router
select the egress router to use. The packet is tunneled to the
egress router and from there one of the external routes is used
to forward the packet to a neighboring AS.
tiple diverse routes for each destination. Today, BGP selects only
a single best route for each destination preﬁx.
Instead, a router
could select the best k routes and push them into the forwarding
table. The splicing bits in a packet then index to the appropriate
FTE at each hop. Using splicing bits to access alternate FTEs con-
trasts with existing multipath interdomain routing schemes (e.g.,
MIRO [31], R-BGP [16]), which rely on the control plane to dis-
cover and exercise these alternate routes.
A naïve approach for selecting the top k best routes would be
to repeat the route selection k times, each time removing the best
route and pushing it into the IP routing table of the router. A more
efﬁcient approach would be to modify the BGP decision process to
select the k best routes instead of a single best route.
6.2 Data Plane
Unlike intradomain splicing, interdomain splicing uses alternate
routes already in the BGP routing tables to achieve path diversity.
However, the forwarding plane of the router needs to be modiﬁed
to support path splicing.
6.2.1 Splicing bits
As before, an end system inserts splicing bits into the packet
header; the ingress and egress routers in each AS read these bits to
determine how to forward the packet, as shown in Figure 4. The
ingress router learns multiple paths to a destination preﬁx from the
various border routers using iBGP (either via a “full mesh” iBGP
or via its connections to multiple route reﬂectors) and thus may
learn multiple exit points (“egress routers”) from the network for
each destination preﬁx. For each packet, an ingress router reads
the rightmost lg(k) routing bits to determine which egress router
should receive the packet and tunnels the packet to one of the egress
routers. Similarly, an egress router learns multiple routes to a desti-
nation from the various border routers of the neighboring ASes via
eBGP. It uses the rightmost lg(k) routing bits to determine which
of the k eBGP-learned routes (i.e., which FTE) to use.
As with intradomain splicing, the ingress or egress router re-
moves the rightmost bits from the splicing header to allow the next
router that supports interdomain splicing to read the next rightmost
bits. Using this approach, an n-hop AS path requires 2n·lg(k) rout-
ing bits. To further reduce overhead, interdomain splicing can also
use an encoding that is similar to those described in Section 5.2.
Creating k copies of the forwarding tables could introduce sig-
niﬁcant memory overhead on line cards, given the large (and grow-
ing) size of the default-free BGP routing tables. However, note that
in many cases, the next-hop for a destination may be the same for
different slices. In these cases, FTEs could be coalesced to save
space, similar to how routers can coalesce FTEs for contiguous IP
preﬁxes that use the same outgoing interface. In future work, we
B G P   s p l i c i n g   b i t s
I G P   s p l i c i n g   b i t s
A S 1
A S 2
...
p o l i c y
e g r e s s n e x t - h o p   A S
Figure 5: Structure of splicing bits for intradomain and inter-
domain splicing.
will study the extent to which this coalescing can reduce this over-
head.
6.2.2 Interdomain and intradomain splicing
Path splicing’s splicing bits must direct trafﬁc along an end-to-
end path that ultimately traverses multiple domains. To achieve
this function, these bits must carry semantics for both interdomain
and intradomain paths. Additionally, the interdomain paths that
splicing takes must also comply with ISPs’ business policies. To
achieve this function, we divide the splicing bits into several seg-
ments. The ﬁrst segment is for interdomain routing (i.e., selecting
at both ingress and egress routers which alternate paths to use); the
second segment is for intradomain routing. We envision that the
interdomain splicing bits will be used at each hop along the path
to the destination; in contrast, the same intradomain bits can be
re-used in different ISPs along the end-to-end path.
Finally, we use a single bit in the packet header to indicate
whether the packet has traversed a “peer” or “customer” edge (in
the parlance of Gao-Rexford [11]); if this bit is set, the interdomain
bits can only be used to select a BGP route through a customer AS.
Routers can easily implement this mechanism by dividing the for-
warding table into two separate tables: routes to provider and peer
ASes, and routes to customer ASes. A router sets this bit before it
sends a packet along a customer or peer edge. With this additional
bit set, the interdomain splicing bits will be used to select only
routes from the latter forwarding table. This mechanism ensures
that all interdomain paths are valley-free.
6.3 Practical Concerns
This section discusses two practical concerns: the potential for
interdomain forwarding loops, and the possibility that the AS-level
forwarding path may not match the AS path for a destination.
Forwarding loops. Because interdomain splicing constructs a sin-
gle end-to-end interdomain path from multiple routing trees, inter-
domain paths can also have loops. As with intradomain splicing,
none of the loops formed are persistent because the splicing bits