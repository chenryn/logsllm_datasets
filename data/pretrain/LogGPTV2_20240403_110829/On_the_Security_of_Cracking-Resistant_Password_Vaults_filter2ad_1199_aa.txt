title:On the Security of Cracking-Resistant Password Vaults
author:Maximilian Golla and
Benedict Beuscher and
Markus D&quot;urmuth
On the Security of Cracking-Resistant Password Vaults
Maximilian Golla
Horst Görtz Institute
Ruhr-University Bochum
Bochum, Germany
PI:EMAIL
PI:EMAIL
PI:EMAIL
Benedict Beuscher
Horst Görtz Institute
Ruhr-University Bochum
Bochum, Germany
Markus Dürmuth
Horst Görtz Institute
Ruhr-University Bochum
Bochum, Germany
ABSTRACT
Password vaults are used to store login credentials, usually
encrypted by a master password, relieving the user from
memorizing a large number of complex passwords. To man-
age accounts on multiple devices, vaults are often stored at
an online service, which substantially increases the risk of
leaking the (encrypted) vault. To protect the master pass-
word against guessing attacks, previous work has introduced
cracking-resistant password vaults based on Honey Encryp-
tion. If decryption is attempted with a wrong master pass-
word, they output plausible-looking decoy vaults, thus seem-
ingly disabling oﬄine guessing attacks.
In this work, we propose attacks against cracking-resistant
password vaults that are able to distinguish between real and
decoy vaults with high accuracy and thus circumvent the
oﬀered protection. These attacks are based on diﬀerences
in the generated distribution of passwords, which are mea-
sured using Kullback–Leibler divergence. Our attack is able
to rank the correct vault into the 1.3 % most likely vaults
(on median), compared to 37.8 % of the best-reported at-
tack in previous work. (Note that smaller ranks are better,
and 50 % is achievable by random guessing.) We demon-
strate that this attack is, to a certain extent, a fundamental
problem with all static Natural Language Encoders (NLE),
where the distribution of decoy vaults is ﬁxed. We propose
the notion of adaptive NLEs and demonstrate that they sub-
stantially limit the eﬀectiveness of such attacks. We give one
example of an adaptive NLE based on Markov models and
show that the attack is only able to rank the decoy vaults
with a median rank of 35.1 %.
Keywords
Password Managers; Natural Language Encoders; Honey
Encryption; Cracking-Resistance
1.
INTRODUCTION
Passwords are still the de-facto standard for online user
authentication, despite substantial drawbacks in terms of
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’16, October 24–28, 2016, Vienna, Austria.
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4139-4/16/10.. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978416
memorability and security. To relieve the user from the
burden of memorizing a large number of passwords (ide-
ally not shared between services, hard to guess, and not
related to the service name or personal memories), many
IT security professionals recommend the use of password
vaults (also called password managers) [25]. Password vaults
store passwords and usually also domains and usernames,
in an encrypted container, where the encryption key is de-
rived from a master password using a key derivation func-
tion (KDF) [18]. Vaults can store both user-chosen pass-
words, which can be chosen stronger as the user does not
have to memorize them, and randomly chosen cryptograph-
ically strong passwords.
To facilitate migrating the stored passwords to a new
or secondary device, and to backup data to prevent loss,
many vaults oﬀer the possibility to store the encrypted vault
with an online service. Password vaults stored online are
a promising target for attackers. This is not a theoretical
problem: LastPass was a target of a suspected breach in
2011 and 2015 [15]. Recent work, analyzing the security of
online password managers [20, 29], has shown a number of
weaknesses, including vulnerabilities that allow exﬁltration
of stored vaults.
An attacker can try to recover the missing master pass-
word, once the encrypted vault has been stolen [13, 19, 5].
In an oﬄine guessing attack, the attacker can try candidate
(master) passwords, trial-decrypt the vault, and then ver-
ify if the candidate was correct by observing the result of
the decryption. Often decryption with an incorrect master
password will yield an error or a malformed header, allow-
ing easy identiﬁcation of wrong candidates. This kind of
attack is “oﬄine”, as no interaction with an online service
is required and the correctness of a guess can be veriﬁed
locally. The number of password guesses an attacker can
try is almost unbounded, only limited by the computational
resources at disposal. No data is publicly available describ-
ing how users choose their master passwords. Utilizing the
available information for normal account passwords [4, 11]
and given the recent advancements in GPU and FPGA de-
sign [35] we postulate that also user-chosen master pass-
words can be guessed in limited time [14, 30]. For current
vaults [1, 27], the number of guesses per day on a single GPU
is in the order of 109 to 1012 guesses. Thus, unthrottled
guessing attacks would constitute a major threat. In princi-
ple, this problem can be solved by avoiding giving feedback
about the successful decryption. However, not only explicit
feedback in the form of error messages needs to be avoided,
but also implicit feedback, i. e., in the form of “implausi-
ble” passwords in the vault. One solution was devised in
the Kamouﬂage scheme [3], which constructs so-called de-
coy vaults that are generated during a setup phase, which
are encrypted under similarly structured decoy master pass-
words, and return predeﬁned plausible password vaults. An
attacker will get multiple vaults in an oﬄine guessing attack
and needs to decide, e. g., via online veriﬁcation, which vault
is the correct one. A newer proposal, NoCrack [9], improved
on this approach by not only oﬀering a predeﬁned (constant)
number of decoy vaults but by generating new and plausible
decoy vaults on the ﬂy for each (wrong) master password
candidate. Additionally, they discovered a ﬂaw in the gen-
eration of Kamouﬂage’s decoy master passwords that led to
an improved attack against the scheme. Generating rea-
sonable looking decoy vaults is not a trivial task. NoCrack
uses techniques from Honey Encryption (HE) and Natural
Language Encoders (NLEs) based on Probabilistic Context-
Free Grammars (PCFGs) to generate plausible decoy vaults.
PCFGs have been shown to quite accurately model password
distributions in the past [34]. In a preliminary evaluation,
the authors showed that basic machine learning attacks are
not able to distinguish real from decoy vaults.
Contribution.
The features used in the security analysis of the NoCrack
vaults were quite simplistic: repeat counts, edit distances,
and n-gram frequency statistics were used as input to the
machine learning step. We show that techniques exist that
can distinguish real from decoy vaults with high accuracy.
Our technique is based on the distribution of the pass-
words in the vaults, which can be easily measured by an
attacker simply by trial-decrypting a vault with a number
of wrong master passwords. By determining the similarity
between distributions (we use Kullback–Leibler divergence
as a measure of similarity) one can see that the distribu-
tion of passwords in the decoy vaults, generated by NoC-
rack, is substantially diﬀerent from the distribution of other
password lists. This enables us to rank the correct vault
signiﬁcantly higher (up to a median rank of 1.97 % for real-
world vaults and 0.1 % for artiﬁcial vaults composed from
real-world password lists). We show that, to some extent,
this is not a problem unique to NoCrack, but also caused
by diﬀerences in various password lists. Based on the ob-
servation that this problem persists for many diﬀerent ways
to choose decoy vaults, we propose the notion of adaptive
NLEs, where the generated distribution of decoy vaults de-
pends on the actual values stored in the vault.
Finally, we evaluate additional signals that enable one to
even better distinguish real from decoy vaults. We show that
additional information, such as the correlation of usernames
and passwords or password policies, should be considered
by the NLE. In the case of NoCrack, this results in a mean
rank of 2.4 % and a 1st Quartile of 0.56 %, an improvement
by a factor of 40 and 170, respectively. To summarize, our
contributions include:
(i) We show that techniques exist that can distinguish real
from decoy vaults with high accuracy for NoCrack.
(ii) We propose the notion of adaptive NLEs, where the
generated distribution of decoy vaults depends on the
actual values stored in the vault.
(iii) We evaluate signals that enable one to even better dis-
tinguish real from decoy vaults via additional informa-
tion such as usernames and password policies.
Overview.
In Section 2 we will review some material about cracking-
resistant password vaults and introduce the attacker model
that we consider. In Section 3 we will deﬁne the concept of
adaptive NLEs, as opposed to static NLEs. In Section 4 we
will show that for static NLEs and speciﬁcally for NoCrack,
KL divergence is able to distinguish between real and decoy
vaults with high accuracy.
In Section 5 we will describe
some more factors that can be used to distinguish real from
decoy vaults. In Section 6 we will deﬁne an adaptive NLE
based on Markov models and demonstrate its much stronger
resistance against attacks compared to static NLEs.
2. CRACKING-RESISTANT VAULTS
In the following, we introduce the required notions and re-
view some material about cracking-resistant password vaults
and describe the attacker model that we consider.
Recall that an oﬄine guessing attack describes an attack
where one can verify guesses without contacting an online
service. Thus, the number of tests that can be performed
is only limited by the available computational resources. In
contrast, an online service can implement rate-limiting and
risk-based authentication to limit the exposure in online at-
tack scenarios.
2.1 Kamouﬂage
Bojinov et al. [3] have proposed a solution for this prob-
lem, by designing a password vault that resists oﬄine guess-
ing attacks. Their Kamouﬂage system uses a “hide-in-an-
explicit-list” approach. For this, they generate a large num-
ber (they suggest 107 for medium security) of decoy vaults
that are stored besides the real vault. Even by correctly
guessing a master password, the attacker no longer knows
whether decrypting the vault with the master password leads
to the real or one of the decoy vaults present in the ﬁle.
To generate plausible looking decoys, they were required
to consider that multiple passwords are generated for the
same user. Therefore, they implemented a solution that
generates decoys by assigning probabilities to password tem-
plates that are derived by a process similar to the concept
of using a PCFG. They tokenize every given domain pass-
word and reuse those tokens across the passwords in the
vault, where a token represents a word or number of a cer-
tain length. Subsequently, they validate the tokens using a
dictionary and ﬂag unknown tokens for manual user review.
Based on those derived tokens, they generate plausible look-
ing decoys via a dictionary.
A potential drawback of this approach is the storage over-
head, required to save a large number of decoy vaults. Chat-
terjee et al. [9] broke the scheme by abusing the revealed
structure of the master password, once any (real or decoy)
vault master password has been guessed. By identifying
the tokens (e. g., “Kamouﬂage16” → L10D2) of the found
password, one is able to narrow down the search space sig-
niﬁcantly and speed up the search for the remaining master
passwords. This ﬂaw even degrades the resistance against
oﬄine guessing attacks to a lower level than traditionally
encrypted vaults that do not use decoys at all.
2.2 Honey Encryption
Honey Encryption (HE), introduced by Jules and Risten-
part [17], produces a ciphertext that when decrypted with
any incorrect key, yields plausible-looking decoy plaintexts,
Figure 1: Design of NoCrack (simpliﬁed). This schematic omits details, e. g., domain hashing or separated handling of human-
chosen and computer-generated passwords. The Natural Language Encoder (NLE) decodes a bit string to a password and
encodes vice versa.
called honey messages. It addresses the problem of encrypt-
ing plaintext using low-entropy keys, such as keys derived
from passwords, by applying a specialized encoding mech-
anism ﬁrst and encrypting the result afterward. The key
challenge of building such system is the construction of a
randomized message encoding scheme, called distribution
transforming encoder (DTE). Creating such an encoder is
relatively easy for some classes of data, like a random string,
but very challenging for natural language text like real-world
passwords. The authors showed the usefulness of Honey En-
cryption for password-based encryption schemes by building
a system for encrypting RSA secret keys and credit card
numbers. Utilizing an HE-scheme for encrypting a pass-
word vault provides, in contrast to Kamouﬂage’s solution,
security beyond the traditional oﬄine work bound. In other
words, it is ensured that an attack is never less expensive
than attacking a traditional vault.
2.3 NoCrack and Natural Language Encoder
Chatterjee et al. [9] used the idea of Honey Encryption
to provide more secure password vaults, extending the con-
cept previously applied in Kamouﬂage. An overview of the
simpliﬁed architecture of NoCrack is given in Figure 1. Ba-
sically, the idea is to output “plausible looking” password
vaults for each master password used for trial decrypting a
vault (whereas Kamouﬂage only outputs decoy vaults for a
small number of wrong master passwords). Here, the chal-
lenge is to generate plausible-looking vaults on the ﬂy, which
is achieved by building a new kind of DTE for encoding and
decoding of natural language named Natural Language En-
coder (NLE). For this, they built a DTE that takes natural
language, i. e., a password pwd, as input and encodes it to
a random bit string (cid:126)S. Reverse, decoding any random bit
string (cid:126)S outputs a plausible plaintext, i. e., a password pwd.
A number of promising candidates for NLEs are available
(and often used for password guessing [34, 11, 6] or pass-
word strength meters [7] already): Probabilistic Context-
Free Grammars (PCFG), n-gram Markov models, password
samplers, and more.
NoCrack’s Approach: A PCFG Model-based NLE.
NoCrack implements two diﬀerent DTEs called UNIF (uni-
form) for randomly chosen passwords and SG (sub-grammar)
for human-chosen passwords. While the former is straight-
forward to build, the construction of the latter is an unsolved
problem and a challenging task. The authors of NoCrack
sketched two diﬀerent approaches for this, an n-gram model
and a PCFG-based solution and described the latter in de-
tail. PCFGs can be used to model a distribution of strings
in a language, i. e., passwords, by associating a probability
for the members of the distribution deﬁned by an under-
lying context-free grammar (CFG). In language theory, a
CFG is a formal grammar that is deﬁned by a lexicograph-
ically ordered set of production rules. A rule is speciﬁed as
a pair (A, α), where A is a non-terminal and α is a terminal