Network failure: ERR_TIMED_OUT
is pending all the time.
Re-handshake and ImageB is loaded.
Both the server and client send Alert.
Re-handshake and ImageB is loaded.
Both the server and client send Alert.
-
-
-
-
RST
Timeout
Chrome
Firefox
Edge
Safari
Chrome
Firefox
Edge
Safari
1 The cases with ✓can be exploited by attackers to trigger re-handshakes successfully.
2 The light gray squares indicate the successful cases without any warnings.
Figure 5: Recover the Context Back to HTTPS after the
Downgrading Attack. A and B serve for a.bank.com and
b.bank.com (only for example), which share TLS certificates.
Second, downgrading the requests and then upgrading the connec-
tion back to HTTPS after attacks. As presented in Figure 5, attackers
can first downgrade the HTTPS request of interest using the shared
certificates ( 1○). Then they force the browsers to follow one or more
3xx redirects returned by themselves ( 2○), and finally to request
an HTTPS URL which recovers the context back to HTTPS ( 3○).
During the process of 2○, attackers can forge 302 redirects and take
malicious behaviors for tricking on the clients, such as injecting
cookies or replacing parameters.
We have tested how browsers react to this kind of downgrad-
ing attacks. During the intermediate redirects ( 2○), there are no
changes in the appearance of the browsers, including Chrome,
Firefox, Safari, and IE. The webpage and the address bar always
show the contents and the address of the first HTTPS request, say,
https://a.bank.com?orderid=a in Figure 5, because the clients do not
receive the response bodies to be rendered. Only after the request
of https://a.bank.com?orderid=b finishes, the URL and the page turn
to this HTTPS content. It is difficult for users to notice the attack
because the webpage jumping time is short, and the browsers show
the secure context all the time.
Moreover, assume that the first request in 1○ is going to a non-
rendering resource (e.g., installation packages, email attachments).
After downgrading, in 2○, the attacker forces the browser to request
a malicious executable, which is fetched in an HTTPS context.
During the download process, we find the browser has no changes,
and the address bar stays at the original HTTPS request without any
jumps. Thus, this kind of attack is transparent and undiscoverable
to users.
Third, downgrading the requests for passive contents of the web-
page. If the requested passive contents (e.g., image, video) are going
to be rendered on the page, we find the Firefox in iOS still shows
the “lock” icon after downgrading the request and replace the pas-
sive content, while the Chrome turns the “lock” to an “exclamatory
mark”, and Safari, as well as IE, shows no icon except for the URL.
Browser Behaviors to the Trigger of TLS Re-handshake. We
have also tested how modern browsers handle the TLS re-handshake
in different operating systems. We set up our test environment on
two HTTPS servers (CentOS 6.9), ServerA and ServerB, which share
the TLS certficate. Both of the servers serve two files, ImageA and
ImageB. On ServerB, we accept all requests without checking the
Host header. Then, we request these files from ServerA through
JavaScript over a persistent connection. We send a TCP RST or
trigger the Timeout in between two requests, to check whether the
browser will start a new handshake and finish the second one. If it
happens, we will reroute the second request to ServerB.
In the cases with ✓shown in Table 1, the browser will immedi-
ately start a TLS re-handshake without showing warnings, after
the connection reset or timeout. Among these cases, we see that
Chrome can start a new handshake and transparently load the
resources from ServerB, after receiving a RST packet on different
operating systems, as well as Timeout on Windows. Besides, in
Firefox on all operating systems, the users can notice the attacks.
Though some browsers can not load ImageB from ServerB after
re-handshaking, it is still vulnerable if ServerB returns a 301/302
redirect toward an HTTP URL.
5 DISCOVERING VULNERABLE SERVERS
IN THE WILD
5.1 Methodology
In our threat model, adversaries aim to attack the servers that may
adopt full security settings, and they use the flaws of other servers
that have security dependencies with the targets. As such, given a
list of domain names to find out the vulnerable ones, we first need
to collect the related domains that share TLS certificates with them.
Then, we should send HTTPS requests to the tested domain names
and crossly reroute the requests to the related domains that can be
exploited (as shown in Figure 7). In this section, we introduce how
to discover the exploitable servers in the wild.
Getting Related Domain Names. As aforementioned, one pri-
mary security dependency of domain names comes from the shared
https://a.bank.com?orderid=a302 Redirect to http://b.example.comhttp://c.example.com302 Redirect tohttps://a.bank.com?orderid=bhttps://a.bank.com?orderid=b(cid:3)(cid:9)(cid:7)(cid:6)(cid:10)(cid:12)(cid:1)(cid:12)(cid:12)(cid:4)(cid:5)(cid:8)(cid:6)(cid:11)(cid:1)(cid:2)(cid:1)(cid:2)(cid:3)TLS certificates, since each certificate can be trusted by all host-
names shown in CN or SAN fields, especially when there are wild-
card domains. We assume the hostnames in one certificate may
affect each other and group them together, no matter whether they
have a real relationship in business.
Thus, we can parse the related domains from the TLS certificate
datasets. For a comprehensive analysis, there are several options for
certificate dataset: (1) Active Scan. We can conduct an active scan
over IPv4 address space to collect the TLS certificates. However,
only the default certificates in most servers can be fetched due
to the lack of valid SNIs. (2) Passive Dataset. Another option is
to parse the certificates from passive traffic. It shows the in-use
TLS certificates from the real network environment, but it needs
representative vantage points to sniffer for a long time, which is
high cost and inefficient. (3) Public Dataset. A feasible option is to
search in the public TLS certificate datasets, including Certificate
Transparency (CT) logs, Censys, and Rapid7. However, they include
massive expired certificates, in which there can be a large quantity
of redundant data.
Rerouting HTTPS Requests. After mapping the domain names,
we start to send HTTPS requests to them, while rerouting each
request to the related domains in the same group as the example
in Figure 7. The traffic rerouting process is done at the TCP and IP
layers so that we can consider the TCP 4-tuple.
(1) Switch the Server IP Address. Refer to the threat model
(Fig. 2), without regard to load balancing, each related domain
(b.example.com) can be mapped to another single IP address (IPB).
We can reroute the request of https://a.example.com to IPB, to let
the client establish the connection with ServerB that might return
vulnerable responses.
Here, we can choose two kinds of destination IP addresses to
reroute the traffic. If the domain name of ServerA maps to multiple
addresses via DNS (e.g., for load balancing), each of the addresses
can be chosen because different servers may have inconsistencies
in configurations. Alternatively, the resolved IP addresses of the
related domains that share certificates are also optional. Because the
certificates are shared and valid, browsers report no authentication
errors after the rerouting.
(2) Switch the Server Port Number. Recall that the HTTPS ser-
vice runs on the port 443 by default [56]. Alternatively, the TLS
server can also listen on other TCP ports (e.g., 8443, 8843) if being
specified [63]. Hence, there can be multiple servers, serving on dif-
ferent ports of the same IP address, that may share TLS certificates
and have inconsistencies. Same as IP addresses, we can also reroute
the request by switching the destination port number from the TCP
layer.
(3) Switch the Client IP Address. We find one server’s HTTP
responses may vary from the client IP addresses located in different
regions, which can still happen regardless of the DNS resolution. For
example, a CDN edge server on one IP can serve different content
for users from multiple countries. So the client IP address plays
a decisive role during website access, which also applies to SCC
attacks.
In this scenario, we give an attack model in Figure 6. First, the
request of https://a.example.com is delivered to the attacker’s server
(the 1st-phase) that acts as a malicious client-side proxy and locates
in another region, by means like spoofing WPAD or tricking the user
Figure 6: Client-IP Switching Model. The attacker and the
client locate in different regions. And the server response
them with different policies.
Figure 7: An Example of Crossing Requests
into using a malicious proxy. Then, the proxy server establishes the
TLS connection with the remote server and sends the request to it
(the 2nd-phase). In turn, the target server replies to the proxy server
according to its geo-location, and the proxy forwards the response
back to the client. If the response in the 2nd-phase has vulnerable
security headers, it is possible to enforce the weak security policy
for a.example.com in the victim’s browser.
(4) Take CDN into Consideration. As a middle entity, Content
Delivery Network (CDN) is widely deployed to improve the perfor-
mance and the security of websites. It is geographically distributed
and serves each customer’s website with multiple nodes. However,
we find configurations inconsistencies among different CDN nodes,
which can be exploited to launch potential SCC attacks. Like the
Barrel Principle, the node with weak configuration can affect the se-
curity of other nodes and customer’s websites, since adversaries can
reroute the traffic to that flawed node and exposed the connections
to threat.
5.2 Real-world Impact: Measurement Analysis
To better understand the impact of the preceding issues, we con-
duct a systematical measurement on popular websites to discover
exploitable servers using the above methodology.
Iterative Scan. Given a list of domain names to be tested, first,
5.2.1
we parse their related domains from the TLS certificates on 8 CT
log servers of Google and Symantec as much as possible. Because
there are massive wildcard domains in the certificates, we also
collaborate with our industrial partner and extract the concrete
subdomains of the tested domains from their passive DNS database
as a supplement.
Next, we query the domain names and get their IP addresses after
filtering out the invalid domain names, including the non-existent
and the expired ones. For each group of related domain names and
their resolved IP addresses, we try to crossly send HTTPS requests
to each IP with the Host and SNI set to each domain name, acting as
rerouting the requests to different server IPs as shown in Figure 7.
Here, the IP addresses represent the servers that provide the shared
TLS certificates with the tested domains.
Server(a.example.com, IPA)Proxy(Region B)Client(Region A)Get /home.htmlHTTP/1.1Host:a.example.com…HTTP/1.1200OKServer:Apache…(cid:1)Direct Request(cid:2)Proxied RequestGet /home.htmlHTTP/1.1Host:a.example.com…HTTP/1.1302MovedTemporarilyServer:ApacheLocation: http://a.example.com…1st-phase2nd-phaseCCSSsub1.example.comsub2.example.comsub3.example.comhttps://sub1.example.comhttps://sub2.example.comhttps://sub3.example.comServer1IP1Server2IP2Server3IP3Related DomainsResolved IPsMITMTable 2: Overview of Dataset and Scale of Affected Domains for All Attack Scenarios within Alexa Top 500 Apex Domains.
Alexa Rank
Multi-domain Certificates
All extended FQDNs
FQDNs with HTTPS
HTTPS downgrade (C1.1)
# Affected Apex Domains
# Vulnerable FQDNs
HTTPS downgrade (C1.2)
(Filter out HSTS)
HSTS Bypass (C2)
All
HTTPS downgrade (C1.1)
HTTPS downgrade (C1.2)
(Filter out HSTS)
HSTS Bypass (C2)
All
1-100
4,630
83,367
12,453
36
11
32
7
3
7
7
37
34
826
266
590
119
23
37
54
1,087
725
101-200
1,400
67,262
5,695
19
4
17
4
2
6
7
21
19
434
48
391
48
19
24
24
497
458
201-300
1,017
41,296
5,113
19
4
16
1
0
5
7
21
19