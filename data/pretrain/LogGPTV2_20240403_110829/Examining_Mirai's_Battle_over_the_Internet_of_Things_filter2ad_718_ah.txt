dominated by MIORI, others only hold a small percentage.
Overall, smaller botnets are generally much more likely to pick up
passwords (MATOS/MM/OBJPRN) rather than being innovative
on their own. Even more surprisingly, we see that copying behav-
ior follows some form of hierarchy. The large botnets only feed
from other large botnets but not smaller ones. There are also clear
preferred relationships, for instance passwords used in the variant
Cult predominantly originate from JOSHO.
6.2.4 Keeping the net alive. If a large botnet is amassed, the worm-
like structure of the botnet should ideally be able to sustain the loss
of devices by growing at least as fast as they decay. The authors
in [8] refer to this as the stable state and find that at the end of
their measurement period, the overall size of the Mirai botnet was
shrinking. When looking at the different strains, we also observe
all variants to shrink over time, and there is an overall negative
correlation between the size of a botnet and its growth (r = -0.16, p <
0.01). Table 3 shows these correlations per variant and shows large
differences between the variants, where large ones such as Mirai,
MIORI and JOSHO are below average, but others such as OBJPRN
are much less likely to survive. The survival rate of a botnet seems
to be dependent on the time it takes for bots to find a victim to brute
force, giving a correlation of r = -0.516 with p = .02 between the
23-01-201823-01-201823-01-201823-01-201823-01-2018Time (Hours)MIRAIMIORIdaddyl33tCultEXTENDOJOSHONGRLSSORAVariant0.000.150.300.450.600.75Figure 14: In Mirai’s loading infrastructure, bots identify de-
vices where they can log in (1). These are then reported to a
loading server (2), which then performs the infection (3).
correlation scores in Table 3 and the average time between brute
force attempts on our honeypots from a single infected host.
Table 4 shows the growth rates of the top and bottom performing
ASes in our study. We confirm the findings by [8], who showed a
decline in the number of bots on certain ASes. We have not observed
ASes with a positive correlation between the amount of infected
devices and the growth of this number. This shows that the botnets
are slowly losing their grip on the IoT devices.
6.2.5 Loading infrastructure. Devices infected by Mirai are used
to scan the Internet to help infect new devices by brute forcing
passwords. After the correct credentials are found and the device
has logged in, the credentials are sent to a server responsible for
the infection of new devices [8, 26]. Figure 14 shows this process.
By making a centralized server responsible for the infection, it is
easier to update the software loaded onto new devices, or customize
infections if new devices are discovered.
Identifying these loading infrastructures is trivial, as they always
immediately provide the correct credentials when they log in to our
honeypots, and never input false credentials. If infections would
occur from the infected devices themselves, these would need at
least several tries to guess the correct combination before loading
the malware onto the device. By identifying the bot that has suc-
cessfully brute forced the password that is later sent by the loading
infrastructure, we are able to identify which variant connects to
which loading IP address. Figure 15 shows IP addresses used for
loading the malware on devices and the bot variant responsible for
letting the server know the correct password. Each colored circle
represents a loading server, where the color indicates the variant it
spreads and the size the number of installations it does respectively.
Individual dots mark the IP address of an infected device, the line
to a circle which loading server it provided the credentials to. The
color of the line represents the malware variant the infected IP had
at that moment. We find that XWIFZ and AKUMA both use a large
number of loading servers relative to other malware strains. Even
more surprisingly, we see that a large portion of this infrastruc-
ture base is shared, as either a bot of AKUMA or XWIFZ has brute
forced a password correctly before one of these loaders logged in.
For MIRAI we can observe a few small clusters, using the variant
name MIRAI as its loader, while in the original source code [4] the
loader for MIRAI identified itself with the ECCHI string, which
means that actors also adapt the software in the backend.
Almost all variants use centralized loading servers, and are there-
fore prone to takedowns and IP-based blocking of enabling infras-
tructure. To limit the risk of a takedown or block, botmasters might
opt to regularly change their loading infrastructure by using for ex-
ample DNS. In practice however, we do not see this behavior in any
Figure 15: Identified loading servers for several variants.
Edges denote successful brute force attempts and are colored
by the variant of the brute-forcing bot.
centralized variant, as identified loading servers have been active
over the entire period our honeypots were active. Only two variants
have significantly changed their loading infrastructure, and use
the bots not only to scan but also to perform the infection, making
these botnets significantly harder to block. One of these botnets,
identified by eight random characters as variant name, spreads its
loading servers throughout the network and cycles them around,
making it hard to identify and block these loading servers.
Mirai’s source code included the original loader used by Mi-
rai, which consequently was copied by its descendants. As with
the password lists, the loading code has been altered by some of
the variants to remove indicators from the issued commands [3].
Alterations include the original ECCHI variant string, file names
created on the system, but also the entire loading procedure. These
alterations extend into the commands issued by the bots after a
compromisation, where some variants already request more data
from the device such as the "/proc/mounts" file. Table 5 shows the
changes made by different variant authors in these criteria, and
shows that full customization is rare. Additionally, the last two
loader services shown in figure 15 change their command structure
over time. We first identify the server “RBGLZ;rm;ACWCD” as
variant ACWCD, but over time the server changes the loader code
and its identifier. The loader server for “rm;daddyl33t” behaves
the same, first identifying with daddyl33t, and later changing the
commands sent from the infrastructure. Curiously, both modified
the identification string to include a command.
6.2.6 Honeypot evasion. In our discussion of the source code, we
have pointed out that Mirai skipped over IP addresses it randomly
generated if they would fall within a particular range. The original
Mirai blocked probes to multicast ranges or invalid addresses, such
Name
Loader
name
✓
XWIFZ
✓
RipPEEP
PUTIN
✓
HAJIME
daddyl33t
8-characters ✓
Load via
bots
✓
✓
Loader
commands
✓
✓
✓
Bot shell
entries
✓
✓
✓
✓
Table 5: Changes in bot and loader code across variants from