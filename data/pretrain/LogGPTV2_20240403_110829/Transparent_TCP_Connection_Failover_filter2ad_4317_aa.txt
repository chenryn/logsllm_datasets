title:Transparent TCP Connection Failover
author:Ruppert R. Koch and
Sanjay Hortikar and
Louise E. Moser and
P. M. Melliar-Smith
Transparent TCP Connection Failover
R. R. Koch, S. Hortikar, L. E. Moser, P. M. Melliar-Smith
Eternal Systems, Inc.
5290 Overpass Road, Santa Barbara, CA 93111
and
Department of Electrical and Computer Engineering
University of California, Santa Barbara, CA 93106
Abstract
This paper describes a system that enables the failover of
a TCP server endpoint in a manner that is transparent to
the clients and to the server applications. The failover can
occur at any time during the lifetime of a connection. The
failover is achieved by modifying the server’s TCP/IP stack.
No modiﬁcations are required to the client’s TCP/IP stack,
the client application or the server application. The system
supports active or semi-active replication of the server.
1. Introduction
To render a service highly available or fault tolerant, the
server application must run in a special environment. One
approach that is taken runs the application on specialized
hardware. Such systems remain operational even if some of
their components fail; unfortunately, such systems have a
high cost. An alternative approach uses standard computers
in a cluster, which is popular because of the lower hardware
cost. If a node fails, the application is transferred to a dif-
ferent node in the cluster. In practice, clusters range in size
from two to several hundred nodes.
In a cluster solution, the failover of an application from
one node to another is not entirely transparent. Although
techniques like IP takeover [4] and IP aliasing [14] allow
a backup server to take over the identity of a failed server,
connections that are established at the time of the failover
can no longer be maintained. Several solutions have been
proposed to tackle this problem, but all of them require
modiﬁcations of network edge or core routers, the client
application or the client’s TCP/IP protocol stack. Those ap-
proaches suffer from the drawback that the network and the
client typically belong to different organizations than that
of the server.
In this paper we describe a system that allows failover
of a TCP (Transmission Control Protocol [9]) server end-
point in a transparent manner. The failover can occur at any
time during the lifetime of the connection. The failover is
achieved by modifying the server’s TCP/IP stack. No mod-
iﬁcations to the client’s TCP/IP stack, the client application
or the server application are required.
Although this paper focuses on two-way replicated sys-
tems, the proposed solution is not limited to two-way repli-
cation. Higher degrees of replication can be achieved by
daisy-chaining multiple backup servers. The description of
such systems is beyond the scope of this paper.
When failing over a TCP server endpoint from a primary
server to a secondary server, the server application must be
present on both hosts. We assume that the server application
process is actively replicated. With active replication, the
server application runs on both hosts. Both server processes
accept connections, handle requests and generate replies.
They both go through the same state transitions. The server
process must behave deterministically on a per connection
basis. By that we mean that when a client connects to a
server and issues a request, it will receive a particular reply.
An on-line store is an example of a deterministic service.
Unless two customers compete for the last remaining item,
each client will get a well-deﬁned response to a browse or
purchase request — independent of the fact that the server
implementation uses an independent thread per client.
In TCP connection establishment, one side (the TCP
server) listens for incoming connection requests, while the
other side (the TCP client) connects to the server. The
approach discussed in this paper allows for the replicated
server application to act as a TCP server (e.g., a replicated
Web server that accepts connection requests from unrepli-
cated clients) or as a TCP client (e.g., a replicated Web
server that connects to an unreplicated back-end database).
First, we give the requirements for a TCP failover solu-
tion. Then we describe the workings of the failover mech-
anism for a single TCP connection in the fault-free case.
Next we examine its behavior in the case that the server
fails. Finally, we describe the connection establishment and
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
termination procedures. Reintegration of failed servers is
beyond the scope of this paper.
The TCP failover mechanisms reside in the primary and
secondary servers’ network stack between the TCP layer
and the IP layer. Throughout the paper, we refer to this
sublayer as the bridge.
2. Maintaining the Correct State of a TCP
Connection
The TCP layer resides above the IP (Internet Protocol) layer.
TCP accepts messages from the user application and divides
the message into TCP segments. The TCP segments are
passed to the IP layer, where they are packed into IP data-
grams. The routers that reside between the client computer
and the server computers work at the IP layer and, therefore,
have no knowledge of TCP.
To perform a TCP connection endpoint failover from a
primary server to a secondary server that is transparent to
the client, four requirements must be satisﬁed:
1. IP datagrams that the client sends to the primary server
must be redirected to the secondary server. A solution
is given in [4].
2. The secondary server must have a copy of all TCP seg-
ments sent by the client that the primary server has ac-
knowledged. The primary server must not acknowl-
edge a client’s TCP segment until it has received an
acknowledgment of that segment from the secondary
server.
3. The secondary server must have a copy of all TCP
datagrams sent by the primary server that have not
been acknowledged by the client.
If the client
acknowledges a server TCP segment,
the primary
server and the secondary server must each receive
the acknowledgment and remove the segment from its
buffers.
4. The secondary server must synchronize its TCP se-
quence numbers with the sequence numbers used by
the primary server. The order of the sequence numbers
must not be violated in case of a failover. The client
will reset the connection if it detects a violation in the
order of the sequence numbers.
In addition, the secondary server must respect the Maxi-
mum Segment Size (MSS) [10] and the maximum window
size that were negotiated between the primary server and
the client at connection establishment.
To detect the failure of a server process or server host,
the system employs a fault detector.
3. Connection Management in the Fault-Free
Case
We consider a client application running on host C that com-
municates to a replicated server application with primary
server P and secondary server S via a TCP failover connec-
tion, as shown in Figure 1.
The client application sends a request to the server by
passing the request message to the TCP layer. The TCP
layer packs the data into TCP segments. Each segment con-
tains a unique sequence number. Next the TCP segment is
passed to the IP layer, which packs the TCP segment into
an IP datagram. The IP datagram header contains the IP
address of the sender (source) host and the IP address of
the receiving (destination) host. In this particular case, the
source address is the IP address of the client a(cid:0). The destina-
tion address of the datagram is the IP address of the primary
server a.
3.1. Secondary Server
The secondary server, whose network interface runs in
promiscuous mode, receives all of the client’s datagrams.
The secondary server bridge discards all datagrams that do
not contain a TCP segment or that are not addressed to P.
For all other datagrams, the bridge replaces the original des-
tination ﬁeld with the address a of the secondary server and
passes the datagram to the TCP layer. TCP assumes that C
sent this segment directly to S. The TCP layer extracts the
original client request and passes it to the server application.
After the secondary server application has processed the
client’s request, it generates a reply. The secondary server
TCP layer generates one or more TCP segments that contain
the reply and passes them to the secondary server bridge.
If the secondary server bridge receives a segment that is
addressed to the client C, it replaces the destination address
ﬁeld of the segment with the address of P. Thus, all TCP
segments intended for the client are diverted to P. The orig-
inal destination address of the segment is included in the
segment as a TCP header option.
Modifying the TCP header of the segment requires recal-
culation of the TCP checksum. Note that it is not necessary
to recompute the checksum from scratch. Instead, we sub-
tract the original bytes from the checksum, and add the new
bytes to the checksum.
3.2. Primary Server
When receiving the datagram on the network, the IP layer
of P delivers the content of the datagram to the TCP layer,
which then extracts the original client request and passes it
to the server application.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
client
application
TCP
primary server 
application
failure
detector
secondary server 
application
TCP
setup
demux
failure
detector
TCP
demux
TCP
Failover
connection
standard
TCP
connection
delay TCP segment 
modify ACK 
modify WinSize 
modify seq 
modify MSS
other
sources
source S
demux
bridge
IP
IP
Internet
Router
demux
TCP
Failover
connection
standard
TCP
connection
dest:
P -> S
drop TCP 
segment
dest -> P
setup & 
disable
address
translation
TCP
Failover
connection
standard
TCP
connection
demux
destination P destination S
demux
bridge
change IP 
address and 
create ARP 
request
IP
client-server traffic
primary-server-client traffic
secondary-server-client traffic
heartbeat traffic
configuration through ioctl interface
Figure 1. Structure used to achieve the transparent failover of a TCP connection endpoint.
After the primary server application processed the
client’s request, it generates a reply. If the server applica-
tions behave deterministically, both replies are identical.
The TCP layers pack the replies into TCP segments.
Note that, although the application replies are identical, the
TCP layers might not generate two identical sets of TCP
segments. Due to ﬂow control, one of the server’s TCP layer
might split the reply into multiple TCP segments, whereas
the other server’s TCP layer might pack the entire reply into
a single segment.
When obtaining segments from the TCP layer, the pri-
mary server bridge must not send the segment directly. In-
stead, it puts the payload in the primary server output queue
and waits until it receives corresponding data from S. The
primary server bridge must not send any data to the client
until it has received the data from S and its own TCP layer.
When the primary server bridge receives the TCP seg-
ment sent by S, it matches the segment’s payload against
the content of the primary server output queue. The bridge
constructs a new segment that contains all of the matching
payload bytes. The remaining bytes of the original segment
are enqueued in the secondary server output queue.
The new segment carries the address of the primary
server P in the source ﬁeld and the address of the client
C in the destination ﬁeld. The acknowledgment ﬁeld con-
tains either the acknowledgment sequence number of the
last segment the bridge has received from P or S, whichever
is smaller. The same procedure is used to ﬁll the window
size ﬁeld of the new segment.
Choosing the smaller of the two acknowledgments guar-
antees that both servers have successfully received all of the
clients data up to the sequence number of the forwarded ac-
knowledgment. Choosing the smaller of the two window
sizes adapts the client’s send rate to the slower of the two
servers and, thus, reduces the risk of message loss.
3.3. Synchronizing Sequence Numbers
To establish a new connection, P and S choose starting se-
quence numbers seq(cid:1)(cid:2)(cid:2) and seq(cid:5)(cid:1)(cid:2)(cid:2). The primary server
bridge calculates the the sequence number offset (cid:7) as the
difference between the two initial sequence numbers: (cid:7)
= seq(cid:1)(cid:2)(cid:2)   seq(cid:5)(cid:1)(cid:2)(cid:2). See Section 7 for more details.
The primary server bridge synchronizes to the sequence
numbers generated by the secondary server. The primary
server bridge receives all segments generated by the sec-
ondary server. The synchronization is achieved without any
additional communication between the two servers.
To compare the sequence numbers of segments sent by
the secondary server S and the primary server P, the primary
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
server bridge subtracts (cid:1) from the sequence numbers of
all segments it receives from the primary server’s TCP layer.
3.4. Constructing new TCP Segments
Figure 2 illustrates the primary server bridge building TCP
segments. On the left side of the ﬁgure, we see the primary
server bridge receiving a segment from the primary server’s
TCP layer. The segment contains the payload bytes 51 to
54. After subtracting (cid:1), which we assume to be 30, from
the sequence number, the payload bytes are enqueued in the
primary server output queue. After that, the bridge receives
a segment sent by the secondary server that carries the pay-
load bytes 23 to 26. The bridge ﬁnds and removes matching
payload bytes 23 and 24 in the primary server output queue,
and creates a new TCP segment. The remaining bytes 25
and 26 are enqueued in the secondary server output queue.
If the bridge obtains a TCP segment from a server but
cannot build a TCP segment because the queue of the other
server does not contain any matching payload, it compares
the minimum of P’s and S’s most recent acknowledgments
with the acknowledgment of the previous TCP segment it
built. If the former is greater than the latter, the bridge con-
structs a TCP segment with no payload. This prevents a
deadlock in case the server applications do not send any
data to the client. In this case, TCP must send empty seg-
ments to acknowledge the client segments.
Being a duplex connection, TCP tries to piggyback ac-
knowledgments of a data stream to the segments of the
stream that goes in the other direction. If no data is sent
in the other direction, TCP creates a delayed acknowledg-
ment. A delayed acknowledgment is a TCP segment that
carries no user payload. If the bridge receives such a seg-
ment, it updates the ACK and WinSize ﬁelds of the sender
and compares the new ACK value with the ACK of the last
segment that it sent to the client. If the former is greater
than the latter, the bridge constructs a TCP segment with no
payload.
4. Loss of Messages
If a segment m is dropped in TCP, two things happen at the
receiver. First, the receiver will not acknowledge m or any
later segments that the sender of m sends. After the sender’s
retransmission timer expires, it retransmits m. Second, the
receiver will not receive the acknowledgment ack(cid:3) that the
sender attached to m. ack(cid:3) acknowledges the receiver’s seg-
ment k. If the sender does not send additional segments that
acknowledge k, the receiver’s retransmission timer expires,
and the receiver retransmits k.
The TCP failover extension must be able to handle mes-
sage loss. Message loss can occur at the following places:
(cid:0) The primary server does not receive a client segment
m. The TCP layer of the primary server P does not ac-
knowledge m. Consequently, the primary server bridge
does not acknowledge m. The client C retransmits m
after C’s retransmission timer expires.
Message m might carry an acknowledgment ack(cid:3) for
a segment k that the server sent. Because the pri-
mary server does not receive ack(cid:3), it retransmits k. By
comparing k’s sequence number with the last sequence
number it sent, the primary server bridge recognizes
that k is a retransmission. It, therefore, does not en-
queue k, but sends k immediately. This is necessary
because the bridge receives only a single copy of k.