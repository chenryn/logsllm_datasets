 environment:
 - MYSQL_ROOT_PASSWORD=myrootpass
paasdata:
 image: oskarhane/data
 command: tail -f /dev/null
```
你可以看到我们在这里定义了三个服务，分别是`wp`、`mysql`、`paasdata`。
让我们尝试这些服务，并显示以下输出:
![Setting up our PaaS with Docker Compose](img/00053.jpeg)
调用`docker-compose up –d`以守护模式运行`docker-compose`和容器。
这是多么容易。打开你的网络浏览器前往你的 Docker 主机和表中所述的端口(我的情况是端口**49155**)；您应该会看到非常熟悉的 WordPress 安装页面。
# 使用起重机连接容器
Crane 很像 Docker Compose，但它有更多的配置可能性。它的创造者 T2 是这样描述克雷恩的:
> *“起重机是编排 Docker 容器的工具。它通过读入一些描述如何获取映像和如何运行容器的配置(JSON 或 YAML)来工作。这大大简化了开发环境的设置，因为您不必手动调出每个容器，记住您需要传递的所有参数。通过将数据和应用旁边的配置存储在存储库中，您可以轻松共享整个环境。”*
如你所见，这一段也可以是关于 Docker Compose 的。
## 安装起重机
起重机安装方便但不容易保持更新。相同的命令是用来安装和更新，所以我们必须偶尔调用这个才能有最新的版本。
在一行中调用以下命令来安装起重机:
```
bash -c "`curl -sL https://raw.githubusercontent.com/michaelsauter/crane/master/download.sh`" && sudo mv crane /usr/local/bin/crane
```
起重机现在安装在`/usr/local/bin`中。
## 用法
我不会在这里浏览所有的命令，因为它们类似于 Docker Compose 的命令，但我会在这里评论一些命令:
*   `lift`:这个命令，像 Docker Compose 的`up`命令一样，从你的配置文件中构建和运行容器
*   `graph`:这个从配置文件中打印你的容器关系
*   `logs`:这个映射到 Dockers Compose 的命令，但是在这里你可以得到整个组的日志
*   `status`:这个也映射到 Dockers Compose 的命令，但是让你得到一个组的日志
## 配置
这就是克雷恩真正把 Docker Compose 抛在身后的地方。对于 Crane 应用，您有更多的配置选项。配置文件必须命名为`crane.json`或`crane.yaml`。对于每个容器，这是您可以配置的:
*   `image`(字符串，必选):这是要构建/提取的映像的名称
*   `dockerfile`(字符串，可选):这给出了 Dockerfile 的相对路径
*   `run`(对象，可选):这些参数映射到 Docker 的`run`和`create`命令:
    *   添加主机(阵列):这将添加自定义的主机到 IP 的映射
    *   cpuset(整数)
    *   cpu 份额(整数)
    *   分离(布尔)`sudo docker attach `将正常工作
    *   设备(阵列):这将添加主机设备
    *   dns(数组)
    *   entrypoint(字符串)
    *   环境(数组)
    *   暴露(数组):这表示要暴露给链接容器的端口
    *   主机名(字符串)
    *   交互式(布尔型)
    *   链接(数组):这将链接容器
    *   内存(字符串)
    *   特权(布尔)
    *   发布(数组):这将网络端口映射到容器
    *   全部发布(布尔值)
    *   重启(字符串)重启策略
    *   rm （布尔值）
    *   tty （布尔值）
    *   卷(数组):与普通 Docker 相比，中的主机路径可以是相对的
    *   卷-来自(阵列):这用于从其他容器装载卷
    *   工作目录 （字符串）
    *   `cmd`(数组/字符串):该命令用于追加到`docker run`(覆盖 CMD)
*   `rm (object, optional):`这些参数被映射到 Docker 的`rm`命令:
    *   体积(布尔值)
*   `start (object, optional)`:这些参数映射到 Docker 的`start`命令:
    *   附加(布尔值)
    *   交互式(布尔型)
设置与在 Docker Compose 中相同的配置；它看起来像下面的代码。正如您可能理解的那样，您也可以用 JSON 格式编写它，但是为了尽可能容易地与 Docker Compose 的版本进行比较，我将保持`yaml`格式:
```
containers:
 wp:
 image: oskarhane/wordpress
 run:
 volumes-from: ["mydata"]
 link: 
 - mymysql:mysql
 publish: ["80"]
 detach: true
 mymysql:
 image: mysql
 run:
 volumes-from: ["mydata"]
 detach: true
 env: ["MYSQL_ROOT_PASSWORD=rootpass"]
 mydata:
 image: oskarhane/data
 run:
 detach: true
 cmd: "tail -f /dev/null"
```
这里，我们指定三个容器，其中数据容器作为数据量容器添加到其他容器中，MySQL 容器链接到 WordPress 容器。
将此文件保存为`crane.yaml`并键入`crane lift`以运行您的应用。
将显示以下输出:
![Configuration](img/00054.jpeg)
要查看容器的当前状态，我们可以输入`crane status`。看看我们`wp`容器中的最后一列。它说它没有运行。键入`crane` `logs wp`并查看其在以下命令中的内容:
```
wp * WordPress not found in /var/www/html - copying now...
wp * Complete! WordPress has been successfully copied to /var/www/html
wp | 
wp | Warning: mysqli::mysqli(): (HY000/2002): Connection refused in - on line 5
wp * MySQL Connection Error: (2002) Connection refused
```
好像我们的 WordPress 容器启动比我们的 MySQL 容器快，所以 WordPress 容器启动的时候找不到。
这也可能发生在 Docker Compose 中，因为没有检查`--link:ed`容器是否已打开，至少在写入时没有。
这在 Docker Compose 中无法解决；我们不得不依靠纯粹的运气，在 WordPress 容器尝试使用链接的 MySQL 容器之前，MySQL 容器就会准备好。
使用 Crane，您可以将配置文件中的容器分组到不同的组中，然后对该组而不是整个配置执行`run`命令。
这很容易；我们只需在我们的`crane.yaml`文件末尾添加这些行:
```
groups:
 default: ['mydata', 'mymysql', 'wp']
 data_db: ['mydata', 'mymysql']
 web: ['wp']
```
这里，我们已经将 WordPress 容器与另外两个容器分开，这样我们就可以分别对它们执行`run`命令。
让我们首先通过调用`crane lift data_db --recreate`命令来启动我们的`data_db`组。我添加了“T2”标志，以确保我们正在创建新的容器，而不是重复使用旧的容器。运行`crane status data_db`以确保他们正在运行。
现在我们知道 MySQL 容器正在运行，我们可以通过调用`crane lift web --recreate`命令来启动 WordPress 容器。
将显示以下输出:
![Configuration](img/00055.jpeg)
# 总结
现在，我们可以用不同的方式连接容器，以在不同的容器上保持不同的服务。我们学习了如何手动完成这项工作，当容器之间有很多依赖关系时，这可能会非常困难。
我们简单看了两个编排工具:Docker Compose 和 Crane。对于想要更多控制容器的管理员来说，Crane 是一个独立且更先进的工具。当依赖关系中可能存在时间问题时，在 Crane 中对容器进行分组的能力使其更加可靠。
在下一章中，我们将使用 Crane 运行我们的应用的两个实例，看看当我们想让我们的两个博客都可以在常规 HTTP 端口(80)上公开访问时，会出现什么问题和可能性。