sandbox_issue_extension has been denied by the profi le. After the fi rst shell is
exited, the 1337 extension is consumed and a new shell is launched. Following
is a transcript of this program:
iFauxn:~/ioshh root# ./sb4 /private/var/tmp/container/5678
Issued extension token for “/private/var/tmp/container/1337”:
000508000d0000000000000000021f002f707269766174652f7661722f746d70
2f636f6e7461696e65722f31333337000114007d00c6523ef92e76c9c0017fe8
f74ad772348e00
Applying sandbox profi le:
(version 1)
(allow default)
(deny fi le-issue-extension*)
(deny fi le-read-data
(regex #”/private/var/tmp/container/([0-9]+)/.*”))
(allow fi le-read-data
(require-all
(extension)
(regex #”/private/var/tmp/container/([0-9]+)/.*”)))
With extensions: { “/private/var/tmp/container/5678” }
Attempting to issue another extension after applying the sandbox profi le...
sandbox_issue_extension failed
sh-4.0# cat / private/var/tmp/container/1234/secret
cat: ./container/1234/secret: Operation not permitted
sh-4.0# cat /private/var/tmp/container/5678/secret
Dr. Peter Venkman: Human sacrifi ce, dogs and cats living together
... mass hysteria!
sh-4.0# cat /private/var/tmp/container/1337/secret
cat: ./container/1337/secret: Operation not permitted
sh-4.0# exit
Consuming the extension, then starting another shell...
sh-4.0# cat /private/var/tmp/container/1234/secret
cat: ./container/1234/secret: Operation not permitted
sh-4.0# cat /private/var/tmp/container/5678/secret
Dr. Peter Venkman: Human sacrifi ce, dogs and cats living together... mass
cc0055..iinndddd 111155 44//1166//22001122 55::4444::2255 PPMM
116 Chapter 5 n Sandboxing
hysteria!
sh-4.0# cat /private/var/tmp/container/1337/secret
Dr. Peter Venkman: You’re not gonna lose the house, everybody has three
mortgages nowadays.
sh-4.0# exit
iFauxn:~/ioshh root#
iFauxn:~/ioshh root# cat /private/var/tmp/container/1234/secret
Dr. Ray Stantz: Total protonic reversal.
iFauxn:~/ioshh root#
What has occurred in the transcript and how does it relate to the profi le that
was created? In the transcript, the program is started with the command-line
argument /private/var/tmp/container/5678. This is used in the sandbox_
init_with_extensions call. The fi rst output you see is the result of a sandbox_
issue_extension. The extension is issued for the 1337 subdirectory and occurs
prior to sandbox initialization. After the sandbox_init_with_extension output
confi rms which profi le is used, you see that the sandbox_issue_extension fails as
expected. Inside the fi rst shell, the only successful read of the three attempted is
the one under the 5678 subdirectory added as an extension during initialization.
The second shell is executed after consuming the 1337 extension. As expected,
both the 1337 and 5678 reads are allowed. After exiting the sandbox, you verify
that the 1234 fi le exists and is readable. This example illustrates how extensions
are used to modify the sandbox profi le dynamically after initialization. If this
isn’t completely clear, it will make more sense when you learn how the App
Store applications are sandboxed in the “How Sandboxing Impacts App Store
versus Platform Applications” section later in this chapter.
The examples here demonstrated the exposed functions for initializing and
manipulating the confi guration of a sandbox. The fi rst example illustrated the
use of a prebuilt named profi le. You also looked at the SBPL and the construction
of a custom sandbox profi le. The last example demonstrated the use of exten-
sions for dynamically modifying access after initializing a sandbox. Later in
this chapter, you discover how App Store applications and platform applications
(such as MobileSafari) interact with the sandbox system; surprisingly, neither
class of application uses the interfaces enumerated so far! Before discussing
these applications, the next section gives you a more detailed understanding
of the implementation of the sandbox enforcement mechanisms.
Understanding the Sandbox Implementation
The sandbox is composed of kernel and user space components. The previous
section discussed the library calls used in the initialization of the sandbox.
This section explains the process that ties together the function calls discussed
earlier and the system call interface exposed by the sandbox kernel extension
while it resides in the kernel. In addition to exposing a confi guration interface,
cc0055..iinndddd 111166 44//1166//22001122 55::4444::2255 PPMM
Chapter 5 n Sandboxing 117
the kernel module also plays the role of gatekeeper. It inspects the operations
requested by a process and evaluates these against the sandbox profi le associated
with the process. You’ll examine this kernel extension to understand how the
TrustedBSD component of the XNU kernel is used. Finally, you’ll walk through
the processing of a system call as handled by the sandbox TrustedBSD policy.
Understanding User Space Library Implementation
To explain the user space library implementation, you trace the processing path
from the exposed functions to the system call in libSystem. Gaining a handhold
to begin isn’t diffi cult. You use the dyldinfo utility from the iPhone SDK (the
OS X version will also work). You can determine which shared library is linked
for the sandbox_init symbol and start reversing from there. The output when
you run the fi rst example of the chapter is shown here:
pitfall:sb1 dion$ dyldinfo -lazy_bind sb1
lazy binding information (from section records and indirect symbol table):
segment section address index dylib symbol
__DATA __la_symbol_ptr 0x00003028 0x000B libSystem _execl
__DATA __la_symbol_ptr 0x0000302C 0x000D libSystem _fprintf
__DATA __la_symbol_ptr 0x00003030 0x000E libSystem _getpid
__DATA __la_symbol_ptr 0x00003034 0x000F libSystem _printf
__DATA __la_symbol_ptr 0x00003038 0x0010 libSystem _putenv
__DATA __la_symbol_ptr 0x0000303C 0x0011 libSystem _sandbox_free_error
__DATA __la_symbol_ptr 0x00003040 0x0012 libSystem _sandbox_init
Predictably, sandbox_init is linked via libSystem. iOS uses a prelinked version
of most of the shared libraries used by the system. To analyze the system librar-
ies, you need to extract each from this cache. You can access the cache either by
unencrypting the root fi lesystem image in the fi rmware package (the IPSW) or by
copying it from a previously jailbroken phone. You can fi nd the shared cache at
/System/Library/Caches/com.apple.dyld/dyld_shared_cache_armv7. Recent
versions of IDA Pro can parse this fi le directly and extract the target library for
analysis. If you don’t have access to a recent IDA Pro or would rather not use it,
there is an open source tool for extracting libraries called dyld_decache available
at https://github.com/kennytm/Miscellaneous/blob/master/dyld_decache
.cpp. Other options exist; check http://theiphonewiki.com/wiki/ for details.
If you’re playing along at home, try extracting the following libraries:
/usr/lib/system/libsystem_sandbox.dylib, /usr/lib/system/
libsystem_kernel.dylib, and /usr/lib/libsandbox.1.dylib. The fi rst,
libsystem_sandbox.dylib, is what you start with. Figure 5.2 shows the
exported symbols defi ned in libsystem_sandbox. Those match the sandbox.h
defi nitions exactly. Confi dent that you’ve found the right library, you can
start digging into the disassembly for sandbox_init and its child functions
to fi nd how data enters into the kernel.
cc0055..iinndddd 111177 44//1166//22001122 55::4444::2255 PPMM
118 Chapter 5 n Sandboxing
Figure 5.2: libsystem_sandbox.dylib exported functions
A quick inspection of sandbox_init reveals that it is just a proxy func-
tion to sandbox_init_internal. Examining sandbox_init_with_params and
sandbox_init_with_extensions reveals the same thing; these three functions
share a common implementation. sandbox_init_internal shows a much more
interesting call graph. The prototype for sandbox_init_internal looks like this:
int sandbox_init_internal(const char *profi le, uint64_t fl ags, const char* const
parameters[], const char* const extensions[], char **errorbuf);
First, this function converts the string arrays representing the parameters
and extensions into the libsandbox format. To do this, sandbox_init_internal
dynamically loads the libsandbox.1.dylib library and resolves function calls
(sandbox_create_params, sandbox_set_param, sandbox_create_extensions,
and sandbox_add_extension) as needed. Following these two conversions, the
function multiplexes on the flags value:
n If flags == 0, sandbox_compile_string is called, followed by sandbox_
apply and sandbox_free_profile. This functionality is not documented
in the sandbox.h header.
cc0055..iinndddd 111188 44//1166//22001122 55::4444::2255 PPMM
Chapter 5 n Sandboxing 119
n If flags == SANDBOX_NAMED, sandbox_compile_named is called, followed
by sandbox_apply and sandbox_free_profile.
n If flags == SANDBOX_NAMED_BUILTIN, __sandbox_ms is called directly.
n If flags == SANDBOX_NAMED_EXTERNAL, sandbox_compile_file is called
followed by sandbox_apply and sandbox_free_profile.
Again, the needed functions (excluding __sandbox_ms) are dynamically loaded
from libsandbox.1.dylib. Under most circumstances, sandbox_init_internal
sets up the parameters for a call to sandbox_compile_* and then sandbox_apply.
The SANDBOX_NAMED_BUILTIN case is slightly different. It calls __sandbox_ms
instead of a function from libsandbox. __sandbox_ms, found in libsystem_
kernel.dylib, is the end of the line for user space. It traps to the kernel using
the mac_syscall syscall. This is a system call defi ned by the TrustedBSD
subsystem (more about this later):
__text:31D5DBA8 EXPORT ___sandbox_ms
__text:31D5DBA8 ___sandbox_ms
__text:31D5DBA8 MOV R12, 0x17D ; ___mac_syscall
__text:31D5DBA8 ; ___sandbox_ms
__text:31D5DBA8 ; ___mac_syscall
__text:31D5DBB0 SVC 0x80
So far, you’ve found the kernel entry point for one of the possible paths
from sandbox_init. Now, you examine the libsandbox library to determine
what the other paths look like and how they enter the kernel. You focus on the
sandbox_compile_* and sandbox_apply functions. The sandbox_create_extensions
and sandbox_create_parameters functions are just managing list structures
(that is, they’re boring).
Both sandbox_compile_string and sandbox_compile_file end with a call
to compile, an internal function. sandbox_compile_string is a straight proxy
to the compile function, but sandbox_compile_file fi rst checks an on-disk
cache. On iOS, the base path for the cache is left undefi ned and the caching
code is never utilized. On OS X, where this feature is used, if the fi le exists and
is found in the cache, the compiled profi le is loaded and the function returns.
For the purposes of this book (since we are only concerned with iOS), compile
is always called on the fi le contents.
sandbox_compile_named searches a list of built-in names. If the argument
matches one of them, it is copied to the structure to be passed to sandbox_apply.
If the passed-in name doesn’t match a known profi le, sandbox_compile_file
is tried before failing. That covers the sandbox_compile_* functions called by
the initialization functions.
The compile function turns a sandbox profi le into a data structure to send
to the kernel. Most of the meaningful processing on the user space side of the
sandbox is done via this function. compile uses TinyScheme, an open source
cc0055..iinndddd 111199 44//1166//22001122 55::4444::2255 PPMM
120 Chapter 5 n Sandboxing
Scheme interpreter, to evaluate the SBPL scripts. Prior to loading the SBPL to
compile, three different Scheme scripts are loaded. The fi rst is the TinyScheme
initialization script. Scheme is known for its small core language with much
of the traditional runtime language built on top of the core. The second script,
sbpl1_scm, defi nes version 1 (and the only public version) of the SBPL language.
This script is what you want to read if you have any questions regarding the
details of the SBPL. The third script, sbpl_scm, is a stub to allow for multiple
versions of the SBPL to be loaded; currently, it defi nes the version function used
at the top of any SBPL scripts to load the correct SBPL prelude (like sbpl1_scm).
This stub script contains a header comment describing the result of the SBPL
evaluation. This script is easy to fi nd in the libsandbox.dylib IDA disassembly;
even easier is running strings on the dylib. The three Scheme scripts will be
easy to spot:
;;;;;; Sandbox Profi le Language stub
;;; This stub is loaded before the sandbox profi le is evaluated. When version
;;; is called, the SBPL prelude and the appropriate SBPL version library are
;;; loaded, which together implement the profi le language. These modules build
;;; a *rules* table that maps operation codes to lists of rules of the form
;;; RULE -> TEST | JUMP
;;; TEST -> (fi lter action . modifi ers)
;;; JUMP -> (#f . operation)
;;; The result of an operation is decided by the fi rst test with a fi lter that
;;; matches. Filter can be #t, in which case the test always matches. A jump
;;; causes evaluation to continue with the rules for another operation. The
;;; last rule in the list must either be a test that always matches or a jump.
The end result is a list of rules stored in the *rules* vector. To check if an
operation is permitted, the kernel enforcement module consults the *rules* vec-
tor. The index checked corresponds to the operation being tested. For example,
for iOS 5.0, the fi le-read-data operation is 15. If the 16th entry in *rules* is (#f .
0), any check for the operation fi le-read-data would cascade to the default rule
(the default operation is index 0). This corresponds to the JUMP case described
in the comment. An entry can contain a list of rules. In this case, each rule is
evaluated in order until one is matched. The end of the list always contains a
JUMP rule with no fi lter in case no rule has matched. The SBPL is a language
designed to compile down to this decision tree. Once this tree is derived, the
compile function in libsandbox fl attens it and emits it as the profi le bytecode
to be delivered to the kernel.
sandbox_apply is the other main function called via the initialization func-
tions in libsystem. sandbox_apply is passed the structure created by the compile
functions. This structure contains the name of a built-in profi le or the compiled
bytecode of a custom profi le. It also might contain a path to store a trace of the
operations as they are checked. Looking at sandbox_apply, you see two main
paths both ending with a call to __sandbox_ms. One path opens the trace fi le
cc0055..iinndddd 112200 44//1166//22001122 55::4444::2255 PPMM
Chapter 5 n Sandboxing 121
and looks up the Mach port for com.apple.sandboxd. The other jumps right
to the call to the kernel. Now, all initialization fl ows through the same kernel
entry point.
The other confi guration functions discussed in the fi rst part of the chapter,
such as the extension issue/consume functions, call __sandbox_ms directly. At this
point, you can be confi dent that all user data enters the kernel via mac_syscall.
Into the Kernel
The sandbox kernel extension is implemented as a TrustedBSD policy extension.
Both the confi guration and profi le enforcement systems are implemented in
this kernel extension. First, you learn about the TrustedBSD system and what
it provides. Next, you learn how to connect the mac_syscall to the sandbox
kernel extension, revealing the path it takes through the kernel and where it is
handled in the sandbox. Finally, the path of an everyday syscall is highlighted
and the sandbox enforcement mechanism is explained.
If you plan to follow along at home, you should extract and decrypt the
kernelcache from the fi rmware package. Full instructions on how to accom-
plish this are included in Chapter 10. Predictably, this chapter focuses on the
com.apple.security.sandbox kernel extension. (In iPhone3,1_5.0_9A334, this
extension starts at 0x805F6000.)
Implementing a TrustedBSD Policy
TrustedBSD is a framework for implementing pluggable, composable access
control policies in the kernel. The framework is composed of the inspection
points placed throughout the kernel and the logic to register a policy to react to
these events. TrustedBSD is called during many system calls and, if the policy
has requested it, will check for permission before allowing further execution
of the system call. Recall that this is the way code signing is enforced as well
(see Chapter 4). The framework also provides a method for labeling objects with
policy-specifi c information. As you will see, this mechanism is used to store the
sandbox profi le for each process. Only portions of this extensive framework are
used by the sandbox policy extension.
The kernel source implementing TrustedBSD in XNU is located under
xnu-1699.24.8/security. The interface for implementing a new policy module
is exposed via mac_policy.h:
/**
@fi le mac_policy.h
@brief Kernel Interfaces for MAC policy modules
This header defi nes the list of operations that are defi ned by the
TrustedBSD MAC Framwork on Darwin. MAC Policy modules register
cc0055..iinndddd 112211 44//1166//22001122 55::4444::2255 PPMM
122 Chapter 5 n Sandboxing
with the framework to declare interest in a specifi c set of
operations. If interest in an entry point is not declared, then
the policy will be ignored when the Framework evaluates that entry
point.
*/
This header contains thorough documentation and you should read it over if
you’re interested in understanding the full capabilities of a TrustedBSD policy. For
this example, you should skip to the registration function, mac_policy_register:
/**
@brief MAC policy module registration routine
This function is called to register a policy with the
MAC framework. A policy module will typically call this from the
Darwin KEXT registration routine.
*/
int mac_policy_register(struct mac_policy_conf *mpc,
mac_policy_handle_t *handlep, void *xd);
As noted in the comment, this function is usually called from the kext_start
function of a policy extension module. Indeed, the sandbox extension in iOS
calls mac_policy_register on start:
__text:805F6DD0 sub_805F6DD0