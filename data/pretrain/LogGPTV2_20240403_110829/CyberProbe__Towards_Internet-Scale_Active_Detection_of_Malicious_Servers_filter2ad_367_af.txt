Overall, we have removed from the whitelist 106K IP ad-
dresses. In addition, we limit the probing rate of our horizontal
scanners to 60,000pps, well below their maximum rate. We
also manually vet the generated ﬁngerprints before scanning to
make sure they do not contain attacks and will not compromise
any host. Furthermore, we work with our system administrators
to minimize the impact on the local network (e.g., bypass the
ﬁrewall / IDS) and to quickly answer any complaints.
No prior literature details how to perform application-
layer probing of malicious servers. Our HTTP probing is not
malicious, it simply sends a request, which we have manually
vetted ﬁrst, and collects a response from a target server.
However, our requests mimic those of malicious families, and
often request inexistent resources from web servers. Thus, they
may be considered suspicious or malicious by server owners,
or may trigger IDSes loosely conﬁgured to match trafﬁc on
both directions. Overall, out of 11 VMs that we use for HTTP
probing, 2 of them got suspended for “malicious” behavior.
We did not get a warning from those providers, but found out
when trying to access the instances. In addition, we received 3
emails warning us that our VMs may have been compromised.
The communications from the providers and those received
by the system administrators of our institutions show that the
1https://www.clickpayz.com/
majority of the complaints come from web honeypots that
do not advertise their IP addresses and consider any received
trafﬁc malicious. A less frequent reason are owners thinking
our scanner hosts have been infected or are attacking them.
Similar to the horizontal scanning, when the providers let us
know their IP ranges, we avoid further probing.
Finally, it is worth noting that our scanning does not collect
and publicize any sensitive information on remote networks.
B. Future Improvements
Completeness. Our current implementation is not guaranteed
to ﬁnd all servers forming the infrastructure of a family. There
are two reasons for this. First, there are some families for
which we cannot generate a ﬁngerprint (e.g., their trafﬁc cannot
be replayed) or for which we may only be able to generate
ﬁngerprints for some of the server types they use (e.g., for
the C&C server but not for their web servers). Second, our
implementation has some limitations that limit our coverage.
In particular, we have limited scanning capacity and are not
able to run all ﬁngerprints for a family simultaneously. In
addition, we reuse the results of horizontal scans. This makes
our probing more polite but reduces coverage slowly over time.
Complex protocol semantics. One limitation of our ﬁnger-
print generation approach is that a replayed request may fail
to incite a response from a remote server, e.g., if a ﬁeld in the
request should be a checksum of the sender’s IP address or if
the request is encrypted using the IP address as initialization
vector. Such semantic information cannot be easily obtained
from the network trafﬁc, but prior work extracts it from a
binary that implements the protocol [8], [32]. For cases where
a binary is available, e.g., with malware, we plan to integrate
binary analysis techniques into our approach.
Shared hosting. Some types of web hosting such as shared
hosting and content delivery networks (CDNs) involve in-
stalling multiple domains on the same web server under the
same IP. Here, the web server requires the presence of a
domain name in the Host header to route the request, as two
domains on the same server may deﬁne the same resource
(e.g,. index.html). This is problematic for our scanning as we
do not know the domains hosted on each probed IP address.
However, malicious servers rarely use shared hosting services
because those services are managed, i.e., the web server owner
installs the content for the clients, which is problematic if the
content is C&C software or an exploit kit. We could leverage
passive DNS databases to identify domains hosted on an IP
address to be probed. Some challenges that we foresee are
the current limited coverage of such databases and the large
amount of queries needed to complete a scan.
Making the probes identiﬁable to selected parties. When-
ever we get a complaint on our probing we ask the reporters for
the IP ranges they own and we remove them from the whitelist.
However, some reporters may not want to disclose their IP
ranges, e.g., if they run web honeypots whose addresses should
remain secret. For those cases, we could embed a secret in
our probes and disclose it to selected parties. For example,
we could ﬁx the secret used to compute the sequence number
of our TCP probes and reveal it to reporters so that they can
check if a received probe was sent by CyberProbe. Whenever
the secret is updated we would need to notify all reporters.
12
VII. RELATED WORK
Active probing. Active probing (or active network ﬁngerprint-
ing) has been proposed for a variety of goals. Comer and Lin
ﬁrst proposed active probing to identify differences between
TCP implementations [9] and tools like Nmap popularized
the approach to identify the OS of remote hosts [17]. It has
also been used to identify the version of application-layer
servers [16], [37] and for tracking speciﬁc devices based on
device clock skews [25]. A variant of active probing identiﬁed
web users that visit a web server by querying the browser [15].
Most related to our work are active probing techniques to
detect network-based malware. BotProbe [18] actively injects
commands into IRC channels to identify if the target is an
IRC bot or a human. PeerPress [63] uses active probing to
detect P2P malware in a monitored network. Two funda-
mental differences with these work are that CyberProbe can
detect any type of application that listens on the network,
and that it focuses on probing external networks, achieving
Internet scale. CyberProbe does not need to inject trafﬁc into
existing connections as BotProbe. The ﬁngerprint generation
used by CyberProbe differs from the one in PeerPress in
that it leverages network trafﬁc rather than binary analysis.
This makes it possible to scale to running large quantities
of malware. In independent work, Marquis-Boire et al. [34]
manually generated ﬁngerprints to identify the servers used by
FinSpy, a commercial software that governments employ to
spy on activists. Our work differs, among others, in that we
propose a novel adversarial ﬁngerprint generation technique
that automatically generates ﬁngerprints for a large number of
malicious server families.
Fingerprint/signature generation. FiG proposed to auto-
matically generate OS and DNS ﬁngerprints from network
trafﬁc [7]. CyberProbe follows the same high-level ﬁngerprint
generation approach as FiG, but proposes a novel adversarial
ﬁngerprint generation technique, with two fundamental dif-
ferences. First, it does not randomly or manually generate
candidate probes, rather it reuses previously observed requests.
This greatly reduces the trafﬁc that needs to be sent to the
training servers for generating a ﬁngerprint, and produces
inconspicuous probes. Both properties are fundamental when
ﬁngerprinting malicious servers. In addition, CyberProbe uses
network signatures to implement the classiﬁcation function, so
it does not require a speciﬁc ﬁngerprint matching component.
Furthermore, CyberProbe addresses the problem of Internet-
wide scanning.
There is a wealth of prior work on automatically generating
network signatures for worm detection. Honeycomb [26], Au-
tograph [23], and EarlyBird [49] proposed signatures compris-
ing a single contiguous token. Polygraph [38] proposed more
expressive token set,
token subsequence, and probabilistic
Bayes signatures. Wang et al. extended PAYL [60] to generate
token subsequence signatures for content common to ingress
and egress trafﬁc. Nemean [64] introduced semantics-aware
signatures and Hamsa [29] generated token set signatures that
can handle some noise in the input trafﬁc pool. Beyond worms,
Botzilla [44] generated signatures for the trafﬁc produced by a
malware binary run multiple times in a controlled environment,
Perdisci et al. [40] clustered and generated signatures for mal-
ware with HTTP C&C protocols, and FIRMA [43] generalized
the approach to handle any protocol. A fundamental difference
is that these studies generate network signatures for requests
sent by the malware, while CyberProbe generates them on the
responses from remote servers.
Scanning. Prior work demonstrates the use of Internet-wide
scanning for security applications. Provos and Honeyman used
it for identifying vulnerable SSH servers [41], Dagon et al. for
ﬁnding DNS servers that provide incorrect resolutions [11],
and Heninger et al. for detecting weak cryptographic keys in
network devices [20]. In this work we propose another security
application for active probing: identifying malicious servers.
Leonard et al. [28] described how to perform Internet-wide
horizontal scans with the goal of maximizing politeness. The
design of our scanning is greatly inﬂuenced by their work.
Other studies are related to how to perform fast scanning.
Staniford et al. described techniques that malware can use to
quickly spread through scanning [51]. Netmap [45] proposed
a framework for fast packet I/O in software, which enables
a single core to generate 14.88 Mpps, enough to saturate a
10Gbps link. Recently, Durumeric et al. proposed Zmap [14],
a fast Internet-wide scanner that can do a horizontal scan
of the Internet in 45 minutes from a single host. Compared
to these studies our goal
is to identify malicious servers.
CyberProbe could incorporate some of these techniques to
speed up the scanning, but currently we cap the scan speed
for good citizenship.
VIII. CONCLUSION
In this paper, we have proposed a novel active probing
approach for detecting malicious servers and compromised
hosts that listen for (and react to) incoming network requests.
Our active probing approach sends probes to remote hosts
and examines their responses, determining whether the remote
hosts are malicious or not. Compared with existing defenses,
it is fast, cheap, easy to deploy, and achieves Internet scale. It
identiﬁes different malicious server types such as C&C servers,
exploit servers, payment servers, and click redirectors, as well
as malware that listens for incoming trafﬁc such as P2P bots.
We have implemented our active probing approach in a
tool called CyberProbe, which implements a novel adver-
sarial ﬁngerprint generation technique, and 3 scanners. We
have used CyberProbe to build ﬁngerprints for 13 malicious
families. Using those ﬁngerprints, CyberProbe identiﬁes 151
malicious servers and 7,881 P2P bots through 24 localized
and Internet-wide scans. Of those servers 75% are unknown
to 4 databases of malicious servers, indicating that for some
families CyberProbe can achieve up to 4 times better coverage
than existing techniques. Our results also reveal an important
provider locality property: cybercriminals host an average of
3.2 servers on the same hosting provider to amortize the cost
of setting up a relationship with a provider.
IX. ACKNOWLEDGEMENTS
The authors are especially grateful to the Network Security
teams at Texas A&M University and the IMDEA Software
Institute for helpful discussions and their professional handling
of this work. We would also like to thank the people behind
VirusTotal, URLQuery, VxVault, and Malware Domain List
for making their information publicly available.
This research was partially supported by NSF (Grant No.
CNS-0954096) and AFOSR (Grant No. FA9550-13-1-0077).
13
Partial support was also provided by the European Union
through Grant FP7-ICT No. 256980 and the EIT-ICT Labs
CADENCE project, by the SoftNet-CM project, and by the
Spanish Government through Grant TIN2012-39391-C04-01
and a Juan de la Cierva Fellowship for Juan Caballero.
All opinions, ﬁndings and conclusions or recommendations
expressed herein are those of the authors and do not necessarily
reﬂect the views of the sponsors.
REFERENCES
[1] M. I. Abouelhoda, S. Kurtz, and E. Ohlebusch. Replacing sufﬁx trees
with enhanced sufﬁx arrays. Journal of Discrete Algorithms, 2(1), 2004.
[2] Alexa - the web information company. http://www.alexa.com/.
[3] D. Benoit and A. Trudel. World’s ﬁrst web census. International Journal
of Web Information System, 3, 2007.
[4] Tracking cyber crime: Inside the fakeav business. http://www.xylibox.
com/2011/06/tracking-cyber-crime-inside-fakeav.html.
[5] The missing link - some lights on urausy afﬁliate. http://malware.
dontneedcoffee.com/2013/05/the-missing-link-some-lights-on-urausy.
html.
[6] Blackhole exploit kit v2 on the rise. http://research.zscaler.com/2012/
[7]
[8]
10/blackhole-exploit-kit-v2-on-rise.html.
J. Caballero, S. Venkataraman, P. Poosankam, M. G. Kang, D. Song,
and A. Blum. ﬁg: Automatic ﬁngerprint generation. In Network and
Distributed System Security Symposium, San Diego, CA, February 2007.
J. Caballero, H. Yin, Z. Liang, and D. Song. Polyglot: Automatic extrac-
tion of protocol message format using dynamic binary analysis. In ACM
Conference on Computer and Communications Security, Alexandria,
VA, October 2007.
[9] D. E. Comer and J. C. Lin. Probing tcp implementations. In USENIX
Summer Technical Conference, Boston, MA, June 1994.
[10] Collection of pcap ﬁles from malware analysis. http://contagiodump.
blogspot.com.es/2013/04/collection-of-pcap-ﬁles-from-malware.html/.
[11] D. Dagon, C. Lee, W. Lee, and N. Provos. Corrupted dns resolution
paths: The rise of a malicious resolution authority.
In Network and
Distributed System Security Symposium, San Diego, CA, February 2008.
[12] D. Dittrich. So you want to take over a botnet... In USENIX Workshop
on Large-Scale Exploits and Emergent Threats, San Jose, CA, April
2012.
[13] H. Dreger, A. Feldmann, M. Mai, V. Paxson, and R. Sommer. Dynamic
application-layer protocol analysis for network intrusion detection. In
USENIX Security Symposium, Vancouver, Canada, July 2006.
[14] Z. Durumeric, E. Wustrow, and J. A. Halderman. Zmap: Fast internet-
In USENIX Security
wide scanning and its security applications.
Symposium, Washington, D.C., August 2013.
[15] P. Eckersley. How unique is your web browser? In Privacy Enhancing
Technologies Symposium, Berlin, Germany, July 2010.
[16] Fpdns. http://www.rfc.se/fpdns/.
[17] Fyodor. Remote os detection via tcp/ip stack ﬁngerprinting, December
1998. http://www.phrack.com/phrack/51/P51-11.
[18] G. Gu, V. Yegneswaran, P. Porras, J. Stoll, and W. Lee. Active botnet
probing to identify obscure command and control channels. In Annual
Computer Security Applications Conference, Honolulu, HI, December
2009.
[19] P. Haffner, S. Sen, O. Spatscheck, and D. Wang.
construction of application signatures.
network data, Philadelphia, PA, October 2005.
acas: Automated
In ACM Workshop on Mining
[20] N. Heninger, Z. Durumeric, E. Wustrow, and J. Halderman. Mining your
ps and qs: Detection of widespread weak keys in network devices. In
USENIX Security Symposium, Bellevue, WA, August 2012.
[21] Html::similarity. http://search.cpan.org/⇠xern/HTML-Similarity-0.2.0/
lib/HTML/Similarity.pm/.
J. P. John, A. Moshchuk, S. D. Gribble, and A. Krishnamurthy. Studying
spamming botnets using botlab. In Symposium on Networked System
Design and Implementation, Boston, MA, April 2009.
[22]
[23] H.-A. Kim and B. Karp. Autograph: Toward automated, distributed
worm signature detection. In USENIX Security Symposium, San Diego,
CA, August 2004.
[24] D. E. Knuth. The Art Of Computer Programming, Volume 2 (3rd Ed.):
Seminumerical Algorithms. Addison-Wesley Longman Publishing Co.,
Inc., Boston, MA, USA, 1997.
[25] T. Kohno, A. Broido, and K. Claffy. Remote physical device ﬁnger-
printing. In IEEE Symposium on Security and Privacy, Oakland, CA,
May 2005.
[26] C. Kreibich and J. Crowcroft. Honeycomb - creating intrusion detection
signatures using honeypots. In Workshop on Hot Topics in Networks,
Boston, MA, November 2003.
gq:
[27] C. Kreibich, N. Weaver, C. Kanich, W. Cui, and V. Paxson.
Practical containment for measuring modern malware systems.
In
Internet Measurement Conference, Berlin, Germany, November 2011.
[28] D. Leonard and D. Loguinov. Demystifying service discovery: Imple-
menting an internet-wide scanner. In Internet Measurement Conference,
Melbourne, Victoria, Australia, November 2010.
[29] Z. Li, M. Sanghi, B. Chavez, Y. Chen, and M.-Y. Kao. Hamsa: Fast
signature generation for zero-day polymorphic worms with provable
attack resilience. In IEEE Symposium on Security and Privacy, Oakland,
CA, May 2006.
[30] Libevent. http://libevent.org/.
[31] Tcpdump/libpcap. http://www.tcpdump.org/.
[32] Z. Lin, X. Jiang, D. Xu, and X. Zhang. Automatic protocol format
reverse engineering through context-aware monitored execution.
In
Network and Distributed System Security Symposium, San Diego, CA,
February 2008.
[33] The malicia project. http://malicia-project.com/.
[34] M. Marquis-Boire, B. Marczak, C. Guarnieri, and J. Scott-Railton.
For their eyes only: The commercialization of digital spying. https:
//citizenlab.org/2013/04/for-their-eyes-only-2/.
[35] Malware domain list. http://malwaredomainlist.com/.
[36] A. Nappa, M. Z. Raﬁque, and J. Caballero. Driving in the cloud:
An analysis of drive-by download operations and abuse reporting. In
SIG SIDAR Conference on Detection of Intrusions and Malware &
Vulnerability Assessment, Berlin, Germany, July 2013.
[37] Nessus. http://www.nessus.org/.
[38]
J. Newsome, B. Karp, and D. Song. Polygraph: Automatically generat-
ing signatures for polymorphic worms. In IEEE Symposium on Security
and Privacy, Oakland, CA, May 2005.
[39] Nmap. http://www.insecure.org.
[40] R. Perdisci, W. Lee, and N. Feamster. Behavioral clustering of http-
based malware and signature generation using malicious network traces.
In Symposium on Networked System Design and Implementation, San
Jose, CA, April 2010.
[41] N. Provos and P. Honeyman. Scanssh - scanning the internet for ssh
servers. Technical Report CITI TR 01-13, University of Michigan,
October 2001.
[42] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose. All your
In USENIX Security Symposium, San Jose, CA,
iframes point to us.
July 2008.
[43] M. Z. Raﬁque and J. Caballero. Firma: Malware clustering and network
signature generation with mixed network behaviors.
In International
Symposium on Recent Advances in Intrusion Detection, St. Lucia,
October 2013.
[44] K. Rieck, G. Schwenk, T. Limmer, T. Holz, and P. Laskov. Botzilla:
Detecting the phoning home of malicious software. In ACM Symposium
on Applied Computing, 2010.
[45] L. Rizzo. Netmap: A novel framework for fast packet i/o. In USENIX
Annual Technical Conference, Boston, MA, June 2012.
[46] University of oregon route views project. http://www.routeviews.org/.
[47] Google safe browsing. https://developers.google.com/safe-browsing/.
[48] Shoutcast. http://www.shoutcast.com/.
[49] S. Singh, C. Estan, G. Varghese, and S. Savage. Automated worm
ﬁngerprinting. In Symposium on Operating System Design and Imple-
mentation, San Francisco, CA, December 2004.
[50] Snort. http://www.snort.org/.
14
[51] S. Staniford, V. Paxson, and N. Weaver. How to 0wn the internet in
your spare time. In USENIX Security Symposium, San Francisco, CA,
August 2002.
[52] B. Stone-Gross, M. Cova, L. Cavallaro, B. Gilbert, M. Szydlowski,
R. Kemmerer, C. Kruegel, and G. Vigna. Your botnet is my botnet:
Analysis of a botnet takeover. In ACM Conference on Computer and
Communications Security, Chicago, IL, November 2009.
[53] Suricata. http://suricata-ids.org/.
[54] Urlquery. http://urlquery.net/.
[55] Virusshare. http://virusshare.com/.
[56] Virustotal. http://www.virustotal.com/.
[57] M. Vrable, J. Ma, J. Chen, D. Moore, E. Vandekieft, A. C. Snoeren,
G. M. Voelker, and S. Savage. Scalability, ﬁdelity, and containment in
the potemkin virtual honeyfarm. In Symposium on Operating Systems
Principles, Brighton, United Kingdom, October 2005.
[58] Vxvault. http://vxvault.siri-urz.net.
[59] R. J. Walls, B. N. Levine, M. Liberatore, and C. Shields. Effective
digital forensics research is investigator-centric. In USENIX Workshop
on Hot Topics in Security, San Francisco, CA, August 2011.
[60] K. Wang, G. Cretu, and S. J. Stolfo. Anomalous payload-based worm
detection and signature generation.
In International Symposium on
Recent Advances in Intrusion Detection, Seattle, WA, September 2005.
[61] Y.-M. Wang, D. Beck, X. Jiang, R. Roussev, C. Verbowski, S. Chen,
and S. King. Automated web patrol with strider honeymonkeys:
Finding web sites that exploit browser vulnerabilities. In Network and
Distributed System Security Symposium, San Diego, CA, February 2006.
J. Wyke. The zeroaccess botnet: Mining and fraud for massive ﬁnan-
cial gain, September 2012. http://www.sophos.com/en-us/why-sophos/
our-people/technical-papers/zeroaccess-botnet.asp:x.
[62]
[63] Z. Xu, L. Chen, G. Gu, and C. Kruegel. Peerpress: Utilizing enemies’
In ACM Conference on Computer and
p2p strength against them.
Communications Security, Raleigh, NC, October 2012.
[64] V. Yegneswaran, J. T. Gifﬁn, P. Barford, and S. Jha. An architecture for
generating semantics-aware signatures. In USENIX Security Symposium,
Baltimore, MD, July 2005.
15