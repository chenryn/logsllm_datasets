Online Summarizing Alerts through Semantic and Behavior Information
Jia Chen 
Fudan University 
Shanghai, China 
PI:EMAIL Peng Wang∗
Fudan University 
Shanghai, China 
PI:EMAIL Wei Wang 
Fudan University 
Shanghai, China 
PI:EMAIL
ABSTRACTAlerts, which record details about system failures, are crucial data for monitoring a online service system. Due to the complex correla-tion between system components, a system failure usually triggers a large number of alerts, making the traditional manual handling of alerts insufficient. Thus, automatically summarizing alerts is a problem demanding prompt solution. This paper tackles this chal-lenge through a novel approach based on supervised learning. The proposed approach, OAS (Online Alert Summarizing), first learns two types of information from alerts, semantic information and behavior information, respectively. Then, OAS adopts a specific deep learning model to aggregate semantic and behavior repre-sentations of alerts and thus determines the correlation between alerts. OAS is able to summarize the newly reported alert online. Extensive experiments, which are conducted on real alert datasets from two large commercial banks, demonstrate the efficiency and the effectiveness of OAS.CCS CONCEPTS
• Software and its engineering → Maintaining software.
KEYWORDS
alert summary, online service systems, system maintenance
ACM Reference Format: 
Jia Chen, Peng Wang, and Wei Wang. 2022. Online Summarizing Alerts through Semantic and Behavior Information. In 44th International Confer-
ence on Software Engineering (ICSE ’22), May 21–29, 2022, Pittsburgh, PA, USA. ACM, New York, NY, USA, 12 pages.1 	INTRODUCTION
Online service systems, such as online banking and search engine, have become indispensable parts in our daily life. Organizations of all sizes struggle with a common problem in infrastructure and operational management. Thousands of automated alerts with semi-structured text are generated every day from hundreds of infras-tructure tools [13].
∗Peng Wang is the corresponding author.Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from PI:EMAIL ’22, May 21–29, 2022, Pittsburgh, PA, USA© 2022 Association for Computing Machinery. ACM ISBN 978-1-4503-9221-1/22/05...$15.00As the scale and complexity of online service systems increase rapidly, failures are inevitable in practice. There are many factors that cause failures, such as network failures, hardware problems, software bugs, temperature, humidity, and even human errors. In addition to affecting customer satisfaction, failures can even cause huge economic losses, especially for online systems involving finan-cial services, such as banking systems, online supermarkets, and stock trading systems. In 2019, the estimated cost of the one-hour downtime for Amazon on Prime Day, which is the biggest sale event of the year for Amazon, is up to 100 million dollars [3].To detect the failure timely, maintenance engineers monitor various data of online service system in real time, such as KPIs [26, 34, 35], logs [5, 7, 9, 14, 18, 30], and traces [15, 20, 21, 36]. When the monitoring data is abnormal, corresponding alerts will be reported, which describes the phenomenon of the underlying failure, and then maintenance engineers will be notified immediately to handle the alerts and fix the failure. Thus, alerts are essential data for engineers to maintain the service system.In a real scenario, a failure usually triggers a large number of alerts, due to the interaction between system components, resulting in a large number of alerts in a day, or even an alert storm due to the overwhelming number of alerts in a short period of time [31]. Al-though maintenance engineers commonly define correlation rules to summarize alerts of the same failure, thereby reducing the in-tensity of their maintenance work. However, manually defining correlation rules is a labor intensive and time-consuming process, and it is hard to cover all correlations between alerts. In conse-quence, designing approach to automatically summarize alerts into incidents is an urgent requirement.There are a few works focusing on automatically summariz-ing alerts [13, 31]. Such works claim that since correlated alerts describe the same failure, their contents may be similar, and the propagation of a failure within the system follows the topology of system components, thus the topological relationship between system components may reveal the correlation between alerts of the failure. Therefore, existing works summarize alerts according to two factors, the Jaccard similarity between alert contents [13, 31] and the topological relationship between system components [31]. 	However, these approaches have following drawbacks. First, alerts triggered by one failure may have totally different contents. For example, as shown in Table 1, although these alerts are all caused by the failure “NTP start error”, the first two alerts have no common words. In this case, the Jaccard similarity [31] cannot correlate these alerts successfully. Second, the topology of system components may be inaccurate and hard to utilize. In general, the topology is derived from the CMDB system (Configuration Management Database). However, the update of CMDB is a tedious and challenging work.ICSE ’22, May 21–29, 2022, Pittsburgh, PA, USA
Even worse, in a cloud-based system, there usually exist many service containers running on one server, and corresponding system topology changes frequently.In addition to above issues, existing works are all unsupervised. However, many companies save a large number of work orders and failure reports, which are natural sources of labels for alert summa-rizing. Specifically, a maintenance engineer is usually required to write a report after fixing a failure. Such failure report records all fix actions performed by the engineer, the root cause of the failure, as well as alerts triggered by the failure. These data contain a wealth of valuable expert experience and knowledge. Therefore, instead of blindly extracting the correlation from original alerts, a more robust choice is to learn the alert correlation from such reports in a supervised fashion.In this paper, we propose a novel supervised framework, OAS (Online Alert Summarizing), to summarize alerts. OAS leverages two types of alert information, semantic information and behav-ior information. Two deep learning models, ASR and ABR, are proposed to extract these information respectively. ASR (Alert Se-mantics Representation) extracts the semantics of alerts, which aggregates the contextual information of alert words according their importance. Meanwhile, ABR (Alert Behavior Representation) mines the common behavior pattern between alerts from the alert occurrence series. Then, to deal with the complexity of the alert correlation, instead of determining the correlation by simply set-ting a fixed threshold, we design a deep learning model, ACT (Alert CorrelaTion), to combine above two types of alert information and determine the correlation between alerts automatically.In summary, the core research problem in this paper is how to automatically summarize alerts of a service system online. We adopt Design Science Research [25] as our research methodology. We investigate the pros and cons of existing approaches and propose a new solution, OAS, to solve the research problem. Furthermore, a prototype of OAS is implemented and we validate it on real alert datasets from two large commercial banks. The contributions of this paper are as follows:• We propose OAS (Online Alert Summarizing), to automat-ically summarize alerts online, which contains four main components, ASR, ABR, ACT and online summarizing. ASR integrates the contextual information of alert words accord-ing to their importance. ABR is able to capture the underly-ing common behavior information between correlated alerts. ACT utilizes the strengths of ASR and ABR to determine the correlation between alerts. Online summarizing adopts these trained models to summarize the newly reported alert online by a time window.• We evaluate our approaches with alerts from two large com-mercial banks, A and B, and compare our approaches with the state of the art. Experimental results verify the efficiency and effectiveness of our approach.
• We share the prototype of our approach, and an alert dataset of a large commercial bank, B, in which the confidential in-formation and some sensitive alert types are removed. Since the alert is usually confidential for a company, there is few public alert datasets of a service system yet.Jia Chen, Peng Wang, and Wei Wang
Significance. The significance of this paper is as follows. First, to the best of our knowledge, this is the first supervised approach of alert summarizing that tries to learn knowledge from failure reports. Second, this is the first time to directly mine the behavior information of alerts from the alert occurrence series. Third, we design three deep learning approaches, ASR, ABR and ACT to automatically summarize alerts, and experimental results show that our approaches can achieve the best effectiveness.The rest of this paper is organized as follows. We first present the related work in Section 2. The motivation of our study is sum-marized in Section 3. Then, in Section 4, we give the preliminary
We demonstrate the effectiveness and efficiency of our approaches of our approaches. Section 5∼7 present details of our approaches.by experiments based on real dataset in Section 8. In Section 9, we propose lessons we learned from this study. Finally, in Section 10, we conclude our work and discuss its future extension.
2 	RELATED WORK
In recent years, as alerts become the main data for maintenance engineers to detect and analyze system failures, tremendous efforts have been devoted into alert analysis in both academia and industry. Some works focus on alert summarizing [13, 27, 31], some focus on alert prioritization [11, 33], and some focus on incident prediction [4, 32].For alert summarizing, Lin et al. [13] try to correlate alerts by alert contents to gain some insights of the system failure, and thus improve the efficiency of maintenance engineers. Since alert storm, which brings an overwhelming number of alerts, is a great challenge for maintenance engineers, Zhao et al. [31] propose AlertStorm to combine alert contents and system topology to correlate alerts of the same failure. Both of them adopt Jaccard to measure the textual relationship between alerts, which only considers the number of common words of alerts and fails to capture the hidden semantics of alerts. Xu et al. [27] exclusively recognize API performance prob-lems in a Cloud platform and correlate API alerts by the dependency of APIs. However, the system topology and API information are usually inaccurate and hard to utilize, because maintaining these information is a tedious and challenging work.In addition to above approaches that are specific for alerts, there are some generic event summarizing approaches [10, 12, 28]. Based on MDL (Minimum Description Length ) principle [24], such ap-proaches try to find a set of frequent patterns which can represent the system behavior model and well summarize the event sequence. SeqKrimp [12] is a two-step approach. It first generates a set of candidate frequent patterns and then greedily selects a set of pat-terns that minimize the description length of the event sequence. GoKrimp [12] directly summarizes the event sequence by patterns composed of frequent event types. CSC [10] is similar to GoKrimp, but it supports the overlap between different pattern occurrences. SWIFT [28] is an online approach to summarize the event stream by mining frequent patterns with a sliding window. Since many alert types may have quite low frequencies in real-world situations, such approaches based on frequent patterns are not suitable for summarizing alerts. In this paper, experiments conducted on real alert datasets demonstrate that these approaches are not applicable to real scenarios.Online Summarizing Alerts through Semantic and Behavior InformationFor alert prioritization, Jiang et al. [11] propose a peer-review mechanism to rank the importance of alerts. Their work helps main-tenance engineers to determine which alert should be analyzed first in the problem determination process. Zhao et al. [33] present Aler-tRank, an automatic and adaptive framework for identifying severe alerts. Specifically, AlertRank first extracts a set of interpretable features, such as alert content and alert frequency, and then adopts XGBoost ranking algorithm to identify severe alerts out of all in-coming alerts. According to experiments, AlertRank significantly save troubleshooting time on non-severe alerts for maintenance engineers.For incident prediction, Chen et al. propose AirAlert [4] to predict the occurrence of outages and diagnose the root cause after they indeed occur. AirAlert analyzes relationships between outages and alerting signals by leveraging Bayesian network and predict outages using a robust gradient boosting tree based classification approach. By forecasting outages before they actually happen and diagnosing their root cause, AirAlert is able to minimize service downtime and ensure high system availability. Zhao et al. [32] propose eWarn to online forecast whether an incident will happen in the near future based on alerts. eWarn first extracts a set of alert textual features and statistical features to represent omen alert patterns for an incident, then eWarn incorporates the multi-instance learning to reduce the influence of noisy alerts. Finally, eWarn builds a classification model via machine learning and generates an interpretable report for its prediction. eWarn has been applied to two large commercial banks in practice, which proves its practicability and effectiveness.3 	MOTIVATION