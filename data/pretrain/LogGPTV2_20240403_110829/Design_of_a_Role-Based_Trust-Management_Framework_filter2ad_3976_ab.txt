tials. Their effect is union.
An entity A can deﬁne A.R to contain A.R1, another
role deﬁned by A. Such a credential reads A.R ←− A.R1;
it means that A deﬁnes that R1 dominates R. At the same
time, a credential A.R ←− B.R is a delegation from A
to B of authority over R. This can be used to decen-
3
tralize the user-role assignment. A credential of the form
A.R ←− B.R1 can be used to deﬁne role-mapping across
multiple organizations when they collaborate; it also repre-
sents a delegation from A to B.
Using a linked role in a credential enables the issuer
to delegate to each member of a role. The credential
A.R ←− A.R1.R2 states that: A.R contains any B.R2 if
A.R1 contains B. The set of contains relationships im-
plied by this credential is dynamic in that it depends upon
other credentials, some present at the time when this cre-
dential is issued and any others issued later. RT also al-
lows the use of intersection while deﬁning roles. A creden-
tial A.R←− B1.R1 ∩ B2.R2 states that: A.R contains any
role or entity that are contained by both B1.R1 and B2.R2.
The set of contains relationships implied by this credential
is also dynamic. Note that such role intersections do not
exist in RBAC. The following example from [20] illustrates
the use of RT0 credentials.
Example 1 A ﬁctitious Web publishing service, EPub, of-
fers a discount to anyone who is both a preferred customer
and a student. EPub delegates the authority over the iden-
tiﬁcation of preferred customers to its parent organization,
EOrg. EOrg issues a credential stating that IEEE members
are preferred customers. EPub delegates the authority over
the identiﬁcation of students to entities that are accredited
universities. To identify such universities, EPub accepts
accrediting credentials issued by the ﬁctitious Accrediting
Board for Universities (ABU). The following credentials
prove that Alice is eligible for the discount:
EPub.disct←− EPub.preferred ∩ EPub.student
EPub.preferred←− EOrg.preferred
EOrg.preferred←− IEEE.member
EPub.student←− EPub.university.stuID
EPub.university←− ABU.accredited
ABU.accredited←− StateU
StateU.stuID←− Alice, IEEE.member←− Alice
2.3 Parameterized roles
In RBAC, a role name is an atomic string.
It has
been noted in the literature that this is sometimes too lim-
ited [12, 21]. An organization may contain large numbers of
roles with few differences between them. For example, each
project has a project leader role, and the rights of project
leaders over documents of their projects is often the same.
It is desirable to facilitate the reuse of these role permission
relationships. To address this, the notion of parameterized
roles was introduced in [12, 21] (it was called role templates
in [12]).
RT0 only allows atomic strings as role names. RT1 ex-
tends RT0 to allow parameterized roles.
In RT1, a role
name is constructed by applying a role identiﬁer to a tuple
4
of data terms. In this paper, we use r, often with subscripts,
to denote role identiﬁers, and use h, s, and t with subscripts
to denote data terms. RT1 will be introduced in section 3.
Parameterized roles can represent relationships between
entities. For example, if a company Alpha allows the man-
ager of an employee to evaluate an employee (or maybe ap-
prove a purchase request submitted by the employee); we
can use Alpha.managerOf(employee) to name the manager
of an employee. Similarly, if a hospital Beta allows the
physician of a patient to access the documents of a patient,
we can use Beta.physicianOf(patient) to name the physi-
cian of a patient. Parameterized roles can also represent
attributes that have ﬁelds. For example, a diploma typi-
cally contain school, degree, year, etc. An IEEE member-
ship certiﬁcate needs to contain a member number and a
member grade. A digital driver license should contain birth-
day and other information. Parameterized roles can also
represent access permissions that take parameters identify-
ing resources and access modes.
2.4 Common vocabularies
When an entity A deﬁnes A.R to contain B.R1, it needs
to understand what B means by the role name R1. This
is the problem of establishing a common vocabulary. Dif-
ferent entities need a common vocabulary before they can
use each others’ roles. Common vocabulary is particularly
critical in systems that support attribute-based delegations.
For instance, the expression EPub.university.stuID only
makes sense when universities use stuID for the same pur-
pose.
In RT , we address this problem through a scheme in-
spired by XML namespaces [5]. We introduce application
domain speciﬁcation documents (ADSDs). Each ADSD de-
ﬁnes a vocabulary, which is a suite of related data types, role
identiﬁers (role ids for short) with the name and the data
type of each of its parameters, etc. An ADSD may also de-
clare other common characteristics of role ids, such as stor-
age type information, as studied in [20]. An ADSD gener-
ally should give natural-language explanations of these role
ids, including the conditions under which credentials deﬁn-
ing them should be issued. Credentials contain a preamble
in which vocabulary identiﬁers are deﬁned to refer to a par-
ticular ADSD, e.g., by giving its URI. Each use of a role
id inside the credential then incorporates such a vocabulary
identiﬁer as a preﬁx. Thus, a relatively short role id speci-
ﬁes a globally unique role id. An ADSD can refer to other
ADSDs and use data types deﬁned in it, using the mecha-
nism just described. A concrete RT system is deﬁned by
multiple ADSDs.
Each ADSD deﬁnes a vocabulary. The notion of vocab-
ularies is related to the notion of localized name spaces.
They both address name-space issues; however, they ad-
dress issues at different levels. The notion of localized name
spaces concerns itself with who has the authority to deﬁne
the members of a role. The notion of vocabularies is about
establishing common understandings of role names. For ex-
ample, an accrediting board might issue an ADSD that de-
ﬁnes the format of student ID credentials. Then a university
can use this ADSD to issue student ID credentials. The uni-
versity is still the authority of its own name space; it just
uses the vocabulary created by another entity. The univer-
sity can also freely choose which ADSD to use when issuing
credentials. In particular, when there are multiple ADSDs
about student IDs, the university can issue multiple creden-
tials using different ADSDs.
2.5 Logical objects
In RT , roles are also used to represent permissions. A
permission typically consists of an access mode and an ob-
ject. It is often useful to group logically related objects and
access modes together and to give permissions about them
together. To do this, we introduce RT2, which extends RT1
with the notion of o-sets, which group logically related ob-
jects together. O-sets are deﬁned in ways similar to roles.
The difference is that the members of o-sets are objects that
are not entities. RT2 will be introduced in section 4.
2.6 Threshold and separation-of-duty policies
Threshold structures, which require agreement among k
out of a list of entities, are common in trust-management
systems. Some systems, such as Delegation Logic, also
have the more expressive dynamic threshold structures,
which are satisﬁed by the agreement of k out of a set of
entities that satisfy a speciﬁed condition.
A related yet distinct policy concept is separation of duty
(SoD) [7, 24]. This security principle requires that two or
more different people be responsible for the completion of
a sensitive task, such as ordering and paying for a purchase.
SoD can be used to discourage fraud by requiring collu-
sion among entities to commit fraud. In RBAC, SoD is of-
ten achieved by using constraints such as mutual exclusion
among roles [23, 24] and requiring cooperation of mutu-
ally exclusive roles to complete sensitive tasks. Because
no entity is allowed to simultaneously occupy two mutually
exclusive roles, sensitive tasks can be completed only by
cooperation of entities. This is sufﬁcient, though not nec-
essary, to ensure that cooperation between two entities is
required to perform the sensitive task.
Though related, the threshold structures of existing TM
systems cannot generally be used to express SoD policies.
Threshold structures can require agreement only of two dif-
ferent entities drawn from a single set, while SoD policies
typically are concerned with agreement among members of
two different sets. For similar reasons, mutually exclusive
roles cannot be used to achieve thresholds either.
Constraints such as mutual exclusion of roles are non-
monotonic in nature, i.e., an entity cannot be a member of
one role if it is a member of another role. To enforce such
constraints, complete information about role memberships
is needed. Since we allow only monotonic credentials in
RT , we cannot use such constraints. Instead, we use what
we call manifold roles to achieve thresholds and separation
of duty. Similar to a role, which deﬁnes a set of entities,
a manifold role deﬁnes a set of entity collections, each of
which is a set of entities whose cooperation satisﬁes the
manifold role. Manifold roles are deﬁned by role expres-
sions constructed using either of the two role-product oper-
ators: (cid:12) and ⊗.
The role expression
{
z
}|
k
A.R ⊗ A.R ⊗ ··· ⊗ A.R
represents the dynamic threshold structure that requires k
(different) entities out of members of A.R. The role expres-
sion “A.R1 ⊗ A.R2” represents the set of entity collections
each of which has two different entities, one from A.R1 and
the other from A.R2. This can be used to force coopera-
tion to complete a sensitive task (the goal of SoD) without
forcing roles to be mutually disjoint. This could permit im-
portant ﬂexibility, particularly in small organizations where
individuals may need to fulﬁll several roles. Such ﬂexibility
motivates mutual exclusion in role activations (also known
as dynamic separation of duty) [24]. Also, because the con-
structs are monotonic, they allow SoD to be supported in a
de-centralized framework, where role membership informa-
tion may be partial or incomplete.
The operator (cid:12) can be used to implement policies such
as the following: An action is allowed if it gets approval
from two roles. This approval might come from one en-
tity who is a member of both roles, or it might come from
two different entities who are each members of one role.
Manifold roles and role-product operators are part of RT T ,
which will be introduced in section 5.
2.7 Delegation of role activations
Above we have discussed delegation of authority to de-
ﬁne a role. Let us now consider delegation of the capacity
to exercise one’s membership in a role.
In many scenarios, an entity prefers not to exercise all
his rights. An administrator often logs in as an ordinary
user to perform ordinary tasks. In another example, a user is
temporarily delegated certain access rights by his manager
during his manager’s absence. The user will often want to
exercise only his customary rights, wishing to use his tem-
porary rights only when explicitly working on his manager’s
behalf. This notion is related to the least privilege principle
5
and is supported by many systems. In RBAC, it is supported
by the notion of sessions. A user can selectively activate
some of his eligible roles in a session.
A natural generalization of user-to-session delegation of
role activations is process-to-process delegation of those
role activations. The need for this is particularly acute in
distributed computing environments. Imagine the scenario
in which a user starts a session, activating some of his roles,
and then issues a request. To fulﬁll this request, the session
process starts a second process on behalf of the user, which
invokes a third process, which is running on a different host,
so as to access back-end services needed to complete the re-
quested task. Each of these processes must be delegated the
authority to act on the user’s behalf, and the ﬁrst two must
pass that authority to the processes they initiate.
Process-to-process delegation of role activations is not
supported by RBAC. While similar policy concepts were
studied in [1], the logic given there is intractable. Existing
trust-management (TM) systems do not support selective
role activations or delegation of those activations — an en-
tity implicitly uses all of its rights in every request it makes.
In a system where the requester provides credentials to sup-
port its request, the requester could limit the rights being ex-
ercised by providing only a subset of its credentials. How-
ever, this depends on the architectural assumption that cre-
dentials are provided by the requester. Even with this as-
sumption, mechanisms are still needed for specifying which
rights to use in support of a request, and for enforcing such
speciﬁcations.
D as A.R
We introduce RT D to handle delegation of the capacity
to exercise role memberships. RT D adds the notion of dele-
gation of role activations to the RT framework. Such a del-
−−−−−−→ B2, which means that
egation takes the form B1
B1 delegates to B2 the ability to act on behalf of D in D’s
capacity as a member of A.R. This one form of delegation
can be used to express selective role activations, delegation
of role activations, and access requests supported by a sub-
set of the requesting entity’s roles. RT D will be introduced
in section 6.
2.8 Summary of components of the RT frame-
work
RT0 was introduced in [20]. In this paper, we present
four more components of RT : RT1, RT2, RT T , and RT D.
Following is a brief summary of the features in these com-
ponents.
• RT0 supports localized authorities for roles, role hi-
erarchies, delegation of authority over roles, attribute-
based delegation of authority, and role intersections.
• RT1 adds to RT0 parameterized roles.
• RT2 adds to RT1 logical objects.
• RT T provides manifold roles and role-product oper-
ators, which can express threshold and separation-of-
duty policies.
• RT D provides delegation of role activations, which
can express selective use of capacities and delegation
of these capacities.
RT D and RT T can be used, together or separately, with
each of RT0, RT1, or RT2. The resulting combinations are
written RTi, RT D
i
i , and RT DT
, RT T
for i = 0, 1, 2.
i
An RT system consists of application domain speciﬁ-
cation documents (ADSDs), deﬁnition credentials, and op-
tionally delegation credentials (if using RT D).
3 RT1: Deﬁning Roles
In this section, we introduce RT1. RT1 credentials de-
ﬁne roles.
3.1 Syntax of RT1 credentials
The syntax we use in this paper is an abstract syntax de-
signed for understanding the framework. The representation
used in practice can take various forms, e.g., XML.
An RT1 credential has a head and a body. The head of
a credential has the form A.r(h1, . . . , hn), in which A is an