* New: [Make a flat list of lists with a list comprehension.](python_snippets.md#make-a-flat-list-of-lists-with-a-list-comprehension)
    There is no nice way to do it :(. The best I've found is:
    ```python
    t = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]
    flat_list = [item for sublist in t for item in sublist]
    ```
* New: [Remove a substring from the end of a string.](python_snippets.md#remove-a-substring-from-the-end-of-a-string)
    On Python 3.9 and newer you can use the `removeprefix` and `removesuffix` methods to
    remove an entire substring from either side of the string:
    ```python
    url = 'abcdc.com'
    url.removesuffix('.com')    # Returns 'abcdc'
    url.removeprefix('abcdc.')  # Returns 'com'
    ```
    On Python 3.8 and older you can use `endswith` and slicing:
    ```python
    url = 'abcdc.com'
    if url.endswith('.com'):
        url = url[:-4]
    ```
* New: [Capture the stdout of a function.](python_snippets.md#capture-the-stdout-of-a-function)
    ```python
    import io
    from contextlib import redirect_stdout
    f = io.StringIO()
    with redirect_stdout(f):
        do_something(my_object)
    out = f.getvalue()
    ```
* New: [Make temporal directory.](python_snippets.md#make-temporal-directory)
    ```python
    import tempfile
    dirpath = tempfile.mkdtemp()
    ```
* New: [Change the working directory of a test.](python_snippets.md#change-the-working-directory-of-a-test)
    ```python
    import unittest
    import os
    from src.main import get_cwd
    class TestMain(unittest.TestCase):
        def test_get_cwd(self):
            os.chdir('src')
            print('testing get_cwd()')
            current_dir = get_cwd()
            self.assertIsNotNone(current_dir)
            self.assertEqual(current_dir, 'src')
    ```
* New: [Copy a directory.](python_snippets.md#copy-a-directory)
    ```python
    import shutil
    shutil.copytree('bar', 'foo')
    ```
* Correction: [Use fixture to change the working directory of a test.](python_snippets.md#change-the-working-directory-of-a-test)
    The previous code didn't work, instead use the next fixture:
    ```python
    @pytest.fixture(name="change_test_dir")
    def change_test_dir_(request: SubRequest) -> Any:
        os.chdir(request.fspath.dirname)
        yield
        os.chdir(request.config.invocation_dir)
    ```
* New: [IPv4 regular expression.](python_snippets.md#ipv4-regular-expression)
    ```python
    regex = re.compile(
        r"(?>> set([1,2,6,8]) - set([2,3,5,8])
    set([1, 6])
    ```
* New: [Change the logging level of a library.](python_snippets.md#change-the-logging-level-of-a-library)
    ```python
    sh_logger = logging.getLogger("sh")
    sh_logger.setLevel(logging.WARN)
    ```
* New: [Get all subdirectories of a directory.](python_snippets.md#get-all-subdirectories-of-a-directory)
    ```python
    [x[0] for x in os.walk(directory)]
    ```
* New: [Move a file.](python_snippets.md#move-a-file)
    ```python
    import os
    os.rename("path/to/current/file.foo", "path/to/new/destination/for/file.foo")
    ```
* New: [Copy a file.](python_snippets.md#copy-a-file)
    ```python
    import shutil
    shutil.copyfile(src_file, dest_file)
    ```
### [mkdocstrings](docstrings.md)
* New: How to write good test docstrings.
    Both [without a template](docstrings.md#without-template) and using the [Given When Then style](docstrings.md#given-when-then).
### [NetworkX](networkx.md)
* New: Introduce the python library.
    [NetworkX](https://networkx.org/) is a Python package for the creation,
    manipulation, and study of the structure, dynamics, and functions of complex
    networks.
### [pexpect](pexpect.md)
* New: Introduce the pexpect python library.
    A pure Python module for spawning
    child applications; controlling them; and responding to expected patterns in
    their output. Pexpect works like Don Libesâ€™ Expect. Pexpect allows your script
    to spawn a child application and control it as if a human were typing commands.
* New: [Explain how to read the output of a command run by pexpect.](pexpect.md#read-output-of-command)
    ```python
    import sys
    import pexpect
    child = pexpect.spawn('ls')
    child.logfile = sys.stdout
    child.expect(pexpect.EOF)
    ```
### [Prompt Toolkit](prompt_toolkit.md)
* New: Introduce the tui python library.
    Useful to build text-based user interfaces, it allows the creation of
    intelligent prompts, dialogs, and full screen ncurses-like applications.
* New: [Basic concepts of building full screen applications with python prompt toolkit.](prompt_toolkit.md#full-screen-applications)
    `prompt_toolkit` can be used to create complex full screen terminal applications.
    Typically, an application consists of a layout (to describe the graphical part)
    and a set of key bindings.
    In the section we cover:
    * [The layout](prompt_toolkit.md#the-layout)
    * [The controls](prompt_toolkit.md#the-controls)
    * [How to use key bindings](prompt_toolkit.md#key-bindings)
    * [How to apply styles](prompt_toolkit.md#styles)
    * A difficult ordered list of [examples](prompt_toolkit.md#examples) to
    get a grasp of these concepts with simple working code.
### [Pydantic](pydantic.md)
* New: Explain how to initialize attributes.
    Use validators to initialize attributes
* New: Name the pros and cons of using the library.
* New: Explain how to create bidirectional relationship between entities.
* New: Warn on the lack of TypeDict support.
* Correction: How to solve the No name 'BaseModel' in module 'pydantic'.
    It's still a patch, so I've also monitored the relevant
    [issues](issues.md#pydantic-errors)
* Improvement: Change parse_obj definition to find how to import pydantic models from dictionary.
* New: [Explain how to use private attributes.](pydantic.md#set-private-attributes)
    With the [`PrivateAttr`](https://pydantic-docs.helpmanual.io/usage/models/#private-model-attributes) object.
* New: [Explain how to update entity attributes with a dictionary.](pydantic.md#update-entity-attributes-with-a-dictionary)
    You can create a new object with the new data using the `update`
    argument of the `copy` entity method.
* New: [Copy produces copy that modifies the original.](pydantic.md#copy-produces-copy-that-modifies-the-original)
    When copying a model, changing the value of an attribute on the copy updates the
    value of the attribute on the original. This only happens if `deep != True`. To
    fix it use: `model.copy(deep=True)`.
* New: [Define fields to exclude from exporting at config level.](pydantic.md#define-fields-to-exclude-from-exporting-at-config-level)
    Eagerly waiting for the release of the version 1.9 because you can [define the fields to exclude in the `Config` of the model](https://github.com/samuelcolvin/pydantic/issues/660) using something like:
    ```python
    class User(BaseModel):
        id: int
        username: str
        password: str
    class Transaction(BaseModel):
        id: str
        user: User
        value: int
        class Config:
            fields = {
                'value': {
                    'alias': 'Amount',
                    'exclude': ...,
                },
                'user': {
                    'exclude': {'username', 'password'}
                },
                'id': {
                    'dump_alias': 'external_id'
                }
            }
    ```
    The release it's taking its time because [the developer's gremlin and salaried work are sucking his time off](https://github.com/samuelcolvin/pydantic/discussions/3228).
* New: [Field customization.](pydantic.md#field-customization)
    Optionally, the `Field` function can be used to provide extra information about
    the field and validations. Such as the `title`, `default`, `description`
    and many others
### [Pypika](pypika.md)
* New: Explain how to insert, update, select data.
* New: Explain how to join tables.
### [Python Mysql](sql.md)
* New: Give examples on joins for each relationship type.
* New: Explain how to interact with MySQL databases with Python.
* Correction: Correct the syntax of the left joins.
    Instead of using `ON users.id == addresses.user_id`, use `ON users.id = addresses.user_id`
### [questionary](questionary.md)
* New: Introduce tui python library.
    [questionary](https://questionary.readthedocs.io) is a Python library
    for effortlessly building pretty command line interfaces. It makes it
    very easy to query your user for input.
* Correction: Correct the link to the examples.
* New: [Conditionally skip questions.](questionary.md#conditionally-skip-questions)
    Sometimes it is helpful to be able to skip a question based on a condition. To
    avoid the need for an if around the question, you can pass the condition when
    you create the question:
    ```python
    import questionary
    DISABLED = True
    response = questionary.confirm("Are you amazed?").skip_if(DISABLED, default=True).ask()
    ```
* New: [Don't highlight the selected option by default.](questionary.md#don't-highlight-the-selected-option-by-default)
    If you don't want to highlight the default choice in the `select` question use
    the next style:
    ```python
    from questionary import Style
    choice = select(
        "Question title: ",
        choices=['a', 'b', 'c'],
        default='a',
        style=Style([("selected", "noreverse")]),
    ).ask()
    ```
### [rich](rich.md)
* New: Introduce the python cli builder library and it's progress bar.
    [Rich](https://github.com/willmcgugan/rich) is a Python library for rich text
    and beautiful formatting in the terminal.
    Check out the beautiful progress bar:
    ```bash
    pip install rich
    python -m rich.progress
    ```
* New: [Explain how to build pretty tables with rich.](rich.md#tables)
    ```python
    from rich.console import Console
    from rich.table import Table
    table = Table(title="Star Wars Movies")
    table.add_column("Released", justify="right", style="cyan", no_wrap=True)
    table.add_column("Title", style="magenta")
    table.add_column("Box Office", justify="right", style="green")
    table.add_row("Dec 20, 2019", "Star Wars: The Rise of Skywalker", "$952,110,690")
    table.add_row("May 25, 2018", "Solo: A Star Wars Story", "$393,151,347")
    table.add_row("Dec 15, 2017", "Star Wars Ep. V111: The Last Jedi", "$1,332,539,889")
    table.add_row("Dec 16, 2016", "Rogue One: A Star Wars Story", "$1,332,439,889")
    console = Console()
    console.print(table)
    ```
* New: [Explain how to print pretty text with rich.](rich.md#rich-text)
    ```python
    from rich.console import Console
    from rich.text import Text
    console = Console()
    text = Text.assemble(("Hello", "bold magenta"), " World!")
    console.print(text)
    ```
### [Ruamel YAML](ruamel_yaml.md)
* Improvement: Suggest to use ruyaml instead of ruamel.yaml.
    As it's maintained by the community and versioned with git.
### [Selenium](selenium.md)
* New: Explain how to use selenium with python.
* New: [Explain how to Set timeout of a response.](selenium.md#set-timeout-of-a-response)
    ```python
    driver.set_page_load_timeout(30)
    ```
* New: [Explain how to fix when Chromedriver hangs up unexpectedly.](selenium.md#chromedriver-hangs-up-unexpectedly)
    ```python
    os.environ["DBUS_SESSION_BUS_ADDRESS"] = "/dev/null"
    ```
### [sqlite3](sqlite3.md)