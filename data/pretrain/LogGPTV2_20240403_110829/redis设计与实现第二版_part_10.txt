节点，属性的值为0xFE00002766，其
previous_entry_length 属性的压缩
节点的长度为5 字节。
列表节点，属性的值为0x05，表示前一
previous_entry_length 属性的压缩
点的长度。previous_entry_length 属性的长度可以是1字节或者5字节：
7.2.1
分组成，如图 7-4 所示。
三种长度的其中一种：
7.2
图7-6展示了一个包含五字节长
节点的 previous_entry_length 属性以字节为单位，记录了压缩列表中前一个节
接下来的内容将分别介绍这三个组成部分。
图7-5展示了一个包含一字节长
 如果前一节点的长度大于等于 254字节，那么 previous_entry_length 属性的长
长度小于等于63（2°-1）字节的字节数组；
每个压缩列表节点可以保存一个字节数组或者一个整数值，其中，字节数组可以是以下
 int64_t 类型整数。
D
而整数值则可以是以下六种长度的其中一种：
长度小于等于4294967295（2-1）字节的字节数组；
口长度小于等于16383（2"-1）字节的字节数组；
口
压缩列表节点的构成
字节则用于保存前一节点的长度。
度为5字节：其中属性的第一字节会被设置为0xFE（十进制值 254），而之后的四个
为1字节：前一节点的长度就保存在这一个字节里面。
previous_entry_length
int32_t 类型整数;
int16_t 类型整数;
3字节长的有符号整数；
1字节长的有符号整数；
4 位长，介于0至12之间的无符号整数；
，而之后的四字节0x00002766（十进制值10086）
previous_entry_length
图7-6当前节点的前一节点的长度为10086字节
 previous_entry_length
图7-5当前节点的前一节点的长度为5字节
0xFE00002766
图 74压缩列表节点的各个组成部分
0x05
encoding
encoding
 encoding
content
content
[ content
.
---
## Page 59
7.2.2
属性，程序就可以一直向前一个节点回溯，最终到达压缩列表的表头节点。
某个节点起始地址的指针，那么通过这个指针以及这个节点的 previous_entry_length 
如图 7-7 所示。
一个指向前一个节点起始地址的指针p，
entry_length 属性的值，就可以得出
前节点起始地址的指针c，那么我们只
以通过指针运算，根据当前节点的起始地址来计算出前一个节点的起始地址。
举个例子，如果我们有一个指向当
压缩列表的从表尾向表头遍历操作就是使用这一原理实现的，只要我们拥有了一个指向
节点的encoding 属性记录了节点的content 属性所保存数据的类型以及长度：
口最终，我们从表尾节点向表头节点遍历了整个列表。
口首先，我们拥有指向压缩列表表尾节点éntry4 起始地址的指针 pl（指向表尾节点
图7-8展示了一个从表尾节点向表头节点进行遍历的完整过程：
因为节点的 previous_entry_length 属性记录了前一个节点的长度，所以程序可
指向entry2前一节点entry1起始地址的指针p4，entry1为压缩列表的表头节点;
口
口
个指向entry3前一节点éntry2 起始地址的指针p3；
个指向entry4 前一节点entry3起始地址的指针 p2；
的指针可以通过指向压缩列表起始地址的指针加上 zltai1属性的值得出）；
 encoding
zlbytes| zltail
z1bytes|z1tail
zlbytes|zltail zllen|entryientry2entry3entry4 zlend
zlbytes
zltail
 p4 = p3 - entry2.previous_entry_length
图7-8
zllenentryl
zllenentryl  entry2 entry3 entry4  zlend
zllenentryl
一个从表尾向表头遍历的例子
 p3 = p2 - entry3.previous_entry_length
 p2 = pl - entry4.previous_entry_length
 p = C - current_entry.previous_entry_length.
entry2entry3 entry4zlend
entry2
图 7-7通过指针运算计算出前一个节点的地址
...
entry3
entry4
p1
zlend
第7章压缩列表·55
---
## Page 60
56·第一部分数据结构与对象
的节点示例：
类型和长度由节点的 encoding 属性决定。
7.2.3
个字节之间用空格隔开。
中的下划线“_”表示留空，而b、x等变量则代表实际的二进制数据，为了方便阅读，多
节点的 content 属性负责保存节点的值，节点值可以是一个字节数组或者整数，值的
1111xxxx
11111110
11100000
11010000
11000000
10_
11110000
01bbbbbb xxxxxxxx
qqqgqqoo
口编码11000000表示节点保
图 7-10展示了一个保存整数值
content 属性保存着节点的
口编码的最高两位00 表示节点保存的是一个字节数组；
口
表7-2记录了所有可用的字节数组编码，而表7-3则记录了所有可用的整数编码。表格
口一字节长，值的最高位以 11 开头的是整数编码：这种编码表示节点的 content 属
口一字节、两字节或者五字节长，值的最高位为00、01或者10 的是字节数组编码：
编码
性保存着整数值，整数值的类型和长度由编码除去最高两位之后的其他位记录；
了字节数组的长度11；
编码的后六位001011记录
位之后的其他位记录；
这种编码表示节点的content 属性保存着字节数组，数组的长度由编码除去最高两
 content
dddddddd
aaaaaaaa bbbbbbbb
1字节
1字
编码长度
1字
1字节
1字节
1字节
护
节
个位已经保存了一个介于 0 和 12 之间的值，所以它无须 content 属性
使用这一编码的节点没有相应的content 属性，因为编码本身的xxxx四
8位有符号整数
24位有符号整数
int64_t 类型的整数
int32_t 类型的整数
int16_t类型的整数
表7-2字节数组编码
表 7-3整数编码
previous_entry_length
编码长度
previous_entry_length
5字节
2字节
1字节
图7-9
图7-10
保存着节数组“helloworld”的节点
content 霹性保存的值
长度小于等于4294967295的字节数组
长度小于等于16383字节的字节数组
长度小于等于63字节的字节数组
保存着整数值10086的节点
content 属性保存的值
11000000
encoding
10086
content
---
## Page 61
会引发对 e4 的扩展....为了让每个节点的 previous_entry_length 属性都符合压缩列
从原来的1字节长扩展为5字节长。
要再次对压缩列表执行空间重分配操作，并将 e2 节点的 previous_entry_length 属性
办法保存的。
previous_entry_length 属性新增四个字节的空间之后，el 的长度就变成了介于 254
length 属性从原来的1 字节长扩展为5字节长。
点，那么 new 将成为 e1 的前置节点，如图 7-12 所示。
previous_entry_length 属性都是 1字节长的。
要1字节长的 previous_entry_length属性，换句话说，el至eN的所有节点的
253字节之间的节点e1至eN，如图 7-11所示。
7.3
正如扩展e1引发了对e2的扩展一样，扩展e2 也会引发对e3 的扩展，而扩展e3又
现在，麻烦的事情来了，é1原本的长度介于250字节至253字节之间，在为
这时，如果我们将一个长度大于等于 254字节的新节点 new设置为压缩列表的表头节
因为 e1 的 previous_entry_length 属性仅长1字节，它没办法保存新节点 new
因为e1至eN的所有节点的长度都小于 254 字节，所以记录这些节点的长度只需
现在，考虑这样一种情况：在一个压缩列表中，有多个连续的、长度介于250字节到
前面说过，每个节点的 previous_entry_length 属性都记录了前一个节点的长度：
content 属性保存着节点的值10086。
要用5字节长的空间来保存这个长度值。
1 字节长的空间来保存这个长度值。
连锁更新
存的是一个 intl6_t类型的整数值;
zlbytes
zlbytes
zitail
zltail
zllen
图 7-11包含节点e1至eN 的压缩列表
[z1len
图7-12添加新节点到压缩列表
添加新节点
new
e1
el
e2
e2
e3
e3
...
eN
eN
第7章
zlend
zlend
压缩列表
·57
---
## Page 62
58·第一部分数据结构与对象
分配的最坏复杂度为 O(M)，所以连锁更新的最坏复杂度为 O(N")。
length 属性可以记录big节点的长度，程序将扩展e1 的空间，并由此引发之后的连锁更新。
存），那么当我们将 small节点从压缩列表中删除之后，为了让el 的 previous_entry_
big 节点的长度大于等于 254字节（需要5字节的 previous_entry_length 来保存),
update），图7-13展示了这一过程。
表对节点的要求，程序需要不断地对压缩列表执行空间重分配操作，直到 eN 为止。
口其次，即使出现连锁更新，但只要被更新的节点数量不多，就不会对性能造成任何
口首先，压缩列表里要恰好有多个连续的、长度介于250字节至253字节之间的节点，
要注意的是，尽管连锁更新的复杂度较高，但它真正造成性能问题的几率是很低的：
因为连锁更新在最坏情况下需要对压缩列表执行N次空间重分配操作，而每次空间重
考虑图 7-14 所示的压缩列表，如果e1至eN 都是大小介于 250字节至 253字节的节点，
除了添加新节点可能会引发连锁更新之外，删除节点也可能会引发连锁更新。
连锁更新才有可能被引发，在实际中，这种情况并不多见；
zlbyteszltailzllen
zlbytes
zlbytes
zlbytes
zlbytes
zltailzllen
2ltailzllen
zltailzllen
zltail
图 7-14另一种引起连锁更新的情况
zllen
删去smal1节点将引发连锁更新
图 7-13连锁更新过程
new
new
 new
new
并引发对e2的扩展
new
并引发对e3的扩展
扩展el
el
el
el
el
并引发对
扩展e2
e2
e2
e2
e2
扩展e3
一直扩展下去…·
e3
e3
e3
e4的扩展
e3
eN
zlend
[zlend
zlend
zlend
zlend
---
## Page 63
7.5
四个函数都有可能会引发连锁更新，所以它们的最坏复杂度都是O(N)。
ziplistLen
ziplistBlobLen
ziplistGet
ziplistPrev
ziplistFind
ziplistIndex
ziplistNew
7.4
放心地使用这些函数，而不必担心连锁更新会影响压缩列表的性能。
ziplistDeleteRange
ziplistDelete
ziplistNext
ziplistInsert
ziplistPush
口添加新节点到压缩列表，或者从压缩列表中删除节点，可能会引发连锁更新操作，
口压缩列表可以包含多个节点，每个节点可以保存一个字节数组或者整数值。
口压缩列表被用作列表键和哈希键的底层实现之一。
口压缩列表是一种为节约内存而开发的顺序型数据结构。
因为 ziplistPush、ziplistInsert、ziplistDelete 和 ziplistDeleteRange
表7-4列出了所有用于操作压缩列表的 API。
因为以上原因，ziplistPush 等命令的平均复杂度仅为 O(M)，在实际中，我们可以
重点回顾
压缩列表 API
但这种操作出现的几率并不高。
影响：比如说，对三五个节点进行连锁更新是绝对不会影响性能的；
函数
节点
的节点
之后
个新节点添加到压缩列表的表头或者表尾
返回压缩列表目前包含的节点数量
返回压缩列表目前占用的内存字节数