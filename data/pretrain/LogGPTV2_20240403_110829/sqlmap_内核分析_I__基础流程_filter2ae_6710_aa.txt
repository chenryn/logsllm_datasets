# sqlmap 内核分析 I: 基础流程
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：[@v1ll4n](https://www.zhihu.com/people/af8bd4cc442c1349ed0f46baff19e3fd)（安全研发工程师，现就职于长亭科技
）
一直在想准备一系列 sqlmap 的文章，担心会不会因为太老太旧了被大家吐槽，思前想后也查了一些现有的资料，还是准备出一部分关于 sqlmap
关键技术细节的探讨。同时也在对其核心的讨论中，提炼出一些思想与方法。
我相信在阅读本文的读者中，很大一部分人都是曾经尝试阅读过 sqlmap 源码的同学。但是在实际阅读的时候，我们发现大家总是存在各种各样奇葩的困难与困惑。
> “SqlMap 源码为什么会有大几百行一千行的方法啊”“它里面 conf 和 kb 又是啥？这两个全局变量里面到底存了啥？”“为什么我直接把
> sqlmap 的 xml 取出来，还是并不是特别方便使用他们的 payload”
我相信这些疑问大家肯定第一次在阅读这个项目的事，都会遇到。实际上，并不是因为 sqlmap
项目的水平高导致大家看不懂。而是由于项目背负了太多的历史包袱，导致在接近十年的发展中，开发者与后期维护者并没有对这款工具进行重构与大规模重写，反而是继续使用
python2 对其缝缝补补。
在本系列文章中，我们主要针对 sqlmap 的最核心的方方面面进行分析，本文主要针对基础流程进行介绍与描述，本文由非常细致的 sqlmap
源码解读，希望有需要的读者可以从中受益。
## 0x00 准备工作
想要阅读 sqlmap 源码我相信大家的选择肯定更多的是从 github 下直接 clone 代码到本地，直接使用本地编辑器或者 IDE
打开直接来分析。所以基本操作也就是
    git clone https://github.com/sqlmapproject/sqlmap
    cd sqlmap
进入 sqlmap 的 repos 下，直接打开编辑器吧！
当然很多读者是 Python3 用户，其实也没有必要费很大力气在本机上安装 Python2 然后再进行操作。笔者使用的环境是
  * Mac OS X
  * Pyenv
  * VSCode
推荐使用 Pyenv（+virtualenv） 构建 Python 环境运行 sqlmap。
## 0x01 初始化与底层建筑
笔者当然可以直接指出所有的重要逻辑在什么位置，但是这样并不好。这样做的后果就是大家发出奇怪的疑问：
> 它里面 conf 和 kb 又是啥？这两个全局变量里面到底存了啥？
逐步熟悉整个项目的构建和项目中贯穿全局的两个奇怪的全局变量，对于加速理解 sqlmap 的核心逻辑起了很大的作用。在笔者的工作和实践中，确实是很有感触。
所以我们还是从头看起吧！
我们在上图中，可以找到很明显的程序命令行入口，我们暂且只分析命令行入口所以，我把无关的东西全部打了马赛克，所以接下来我们看到 `main` 函数直接来了解
我相信大家看到了上图应该就知道我们主要应该看 `try` 中的内容。实际上 `except` 中指的是 sqlmap
中各种各样异常处理，包含让程序退出而释放的异常/用户异常以及各种预期或非预期异常，在 `finally`
中，大致进行了数据库（HashDB）的检查/恢复/释放以及 `dumper`
的收尾操作和多线程的资源回收操作。具体的不重要的代码我们就不继续介绍了，接下来直接来了解比较重要的部分吧。
在实际在工作部分中，我们发现了 1-4 函数对环境和基础配置进行了一同操作，然后在 5 步骤的时候进行步骤初始化，然后开始启动
sqlmap。实际上这些操作并不是一无是处，接下来有详有略介绍这些步骤究竟发生了什么。
  1. 在 DirtyPatches 中，首先设定了 httplib 的最大行长度（`httplib._MAXLINE`），接下来导入第三方的 windows 下的 ip地址转换函数模块（`win_inet_pton`），然后对编码进行了一些替换，把 `cp65001` 替换为 `utf8` 避免出现一些交互上的错误，这些操作对于 sqlmap 的实际功能影响并不是特别大，属于保证起用户体验和系统设置的正常选项，不需要进行过多关心。
  2. 在环境检查中，做了如下操作：检查模块路径，检查 Python 版本，导入全局变量。我们可能并不需要关心太多这一步，只需要记得在这一步我们导入了几个关键的全局变量：`("cmdLineOptions", "conf", "kb")`，需要提醒大家的是，直接去 `lib.core.data` 中寻找这几个变量并不是明智的选择，因为他们并不是在这里初始化的（说白了就是找到了定义也没有用，只需要知道有他们几个就够啦）。
  3. 初始化各种资源文件路径。
  4. 打印 Banner。
  5. 这一部分可以说是非常关键了，虽然表面上仍然是属于初始化的阶段，但是实际上，如果不知晓这一步，面对后面的直接对全局变量 `kb` 和 `conf` 的操作将会变的非常奇怪和陌生。在这步中，我们进行了配置文件初始化，知识库（KnowledgeBase初始化）以及用户操作的 `Merge` 和初始化。我们在之后的分析中如果遇到了针对 `kb` 和 `conf` 的操作，可以直接在这个函数对应的 `lib.core.option` 模块中寻找对应的初始化变量的定义。当然，这一步涉及到的一些 `kb/conf` 的 fields 也可能来源于 `lib.parse.cmdline` 中，可以直接通过 `ctrl+F` 搜索到
  1. 中主要包含所有初始变量的初始值，这些初始值在 `init()` 的设定主要是引用各种各样的函数来完成基础设置，我们没有必要依次对其进行分支，只需要用到的时候知道回来寻找就可以了。
  2. 冒烟测试，测试程序本身是否可以跑得通。
  3. 功能测试，测试 sqlmap 功能是否完整。
进入上一段代码的条件是 `if not conf.updateAll`，这个是来源于 `lib.parse.cmdline`
中定义的更新选项，如果这个选项打开，sqlmap 会自动更新并且不会执行后续测试步骤和实际工作的步骤。
在实际的启动代码中，笔者在上图中标注了两处，我们在使用命令行的时候，更多的是直接调用 start() 函数，所以我们直接跟入其中寻找之后需要研究的部分。
## 0x02 测试前的目标准备