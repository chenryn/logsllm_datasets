# 零、前言
# 关于书
Docker 容器是高度可扩展软件系统的未来，使创建、运行和部署应用变得容易。
如果你想在不被技术细节淹没的情况下利用它们，把 Docker 研讨会添加到你的阅读列表中！
有了这本书，你将能够快速开始你的知识，并使用交互式活动来处理容器和 Docker。
研讨会首先概述了 Docker 容器，使您能够了解它们是如何工作的。您将运行第三方 Docker 映像，并使用 Docker 文件和多阶段 Docker 文件创建自己的映像。接下来，您将为 Docker 映像创建环境，并通过持续集成加快部署过程。接下来，您将挖掘有趣的主题，并学习如何使用 Docker Swarm 实现生产就绪环境。为了进一步保护 Docker 映像并确保生产环境以最大容量运行，您将应用最佳实践。稍后，您将获得成功地将 Docker 容器从开发转移到测试，然后进入生产的技能。在此过程中，您将学习如何解决问题、清除资源瓶颈和优化服务性能。
到本 Docker 书结束时，您将精通 Docker 基础知识，并且能够在现实世界的用例中使用 Docker 容器。
## 观众
如果你是一个开发人员或者 Docker 初学者，想对 Docker 容器有一个实际的了解，这本书是理想的指南。在开始阅读这本书之前，需要有运行命令外壳的经验以及 IntelliJ、Atom 或 VSCode 编辑器的知识。
## 关于章节
*第 1 章*、*运行我的第一个 Docker 容器*，从 Docker 的基本介绍开始，提供了后台架构、生态系统和基本 Docker 命令的讨论。
*第 2 章*、【Dockerfiles 入门，向您介绍 Dockerfile 及其背景，以及如何使用 Dockerfile 创建和运行您的第一个 Docker 容器。
*第 3 章*、*管理您的 Docker 映像*，提供了有关 Docker 映像、映像存储库和发布您自己的映像的更多详细信息。
*第 4 章*、*多阶段 Dockerfile*向您展示了如何在项目中使用多阶段 Dockerfile 进一步扩展您的 docker file。
*第五章*、*用 Docker Compose* 合成环境，介绍 Docker Compose 以及如何使用 docker-compose 文件生成整个工作环境。
*第 6 章*、*Docker Networking 简介*解释了为什么在 Docker 中需要以不同的方式处理网络，以及如何实现服务和主机系统之间的通信。
*第 7 章*、*Docker 仓库*，详细说明了 Docker 容器和环境中的仓库利用率。
*第 8 章*、 *CI/CD 管道*描述了使用 Jenkins 创建持续集成/持续部署管道。
*第 9 章**DockerSwarm*，介绍了使用群来编排 Docker 服务。
*第 10 章*、 *Kubernetes* 将您的编排提升到一个新的层次，向您介绍 Kubernetes 以及如何在基本集群中部署您的容器映像。
*第 11 章*、 *Docker Security* 将带您了解如何尽可能保证 Docker 映像和容器的安全，提供使用容器时降低风险的方法。
*第 12 章*、*最佳实践*提供了如何确保容器尽可能高效运行的信息。
*第 13 章*、*监控 Docker 度量*，涵盖了正在运行的 Docker 容器的度量收集，以及如何实现 Prometheus 来帮助监控这些度量。
*第 14 章*、*收集容器日志*，教你如何使用 Splunk 从你正在运行的 Docker 容器中收集日志，这将允许你聚合、搜索和显示你的日志详细信息。
*第 15 章**用插件扩展 Docker*，介绍了通过创建自己的插件与 Docker 应用一起使用来进一步扩展 Docker 的方法。
注意
这本书的免费互动版还有一个额外的章节，*Docker 的下一步是什么*。你可以在网上找到它:https://courses.packtpub.com/.
## 惯例
文本中的码字、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟网址和用户输入如下所示:
"在你当前的工作目录中创建一个名为`docker-compose.yml`的文件."
创建 YAML 文件的代码块、终端命令或文本设置如下:
```
docker build -t test . 
```
新的重要词汇是这样显示的:“Docker 提供了一个名为 **Docker Hub** 的在线存储库来存储您的映像。”
您在屏幕上看到的单词(例如，在菜单或对话框中)会出现在文本中，如下所示:“在左侧栏上，单击`Settings`，然后单击`Users`
代码片段的关键部分突出显示如下:
```
1 FROM alpine
2 
3 RUN apk update
4 RUN apk add wget curl
5
6 RUN wget -O test.txt https://github.com/PacktWorkshops/   The-Docker-Workshop/raw/master/Chapter3/Exercise3.02/     100MB.bin
7
8 CMD mkdir /var/www/
9 CMD mkdir /var/www/html/
```
长代码片段被截断，GitHub 上代码文件的对应名称被放在截断代码的顶部。到整个代码的永久链接被放在代码片段的下面。它应该如下所示:
Dockerfile
```
7 # create root directory for our project in the container
7 RUN mkdir /service
9 RUN mkdir /service/static
10
11# Set the working directory to /service
12 WORKDIR /service
```
这个例子的完整代码可以在[https://packt.live/2E9OErr](https://packt.live/2E9OErr)找到。
## 设置您的环境
在我们详细研究这本书之前，我们需要设置特定的软件和工具。在下一节中，我们将看到如何做到这一点。
### 硬件要求
您至少需要一个支持虚拟化的双核 CPU、4 GB 内存和 20 GB 可用磁盘空间。
### 操作系统要求
推荐的操作系统是 Ubuntu 20.04 LTS。如果您使用的是 Mac 或 Windows，您应该可以运行本书中的命令，但不能保证它们都能按预期工作。我们建议您使用 VirtualBox 或 VMware 等应用在系统上安装虚拟化环境。我们还在本节末尾提供了如何在您的 Windows 系统上设置双引导以使用 Ubuntu 的说明。
## 安装和设置
本节列出了 Docker 和 Git 的安装说明，因为它们是本次研讨会的主要要求。所使用的任何其他软件的安装说明将在涵盖它的特定章节中提供。由于我们推荐的是 Ubuntu，所以我们将使用 APT 包管理器在 Ubuntu 中安装大多数所需的软件。
### 更新您的套餐列表
在使用 APT 在 Ubuntu 中安装任何软件包之前，请确保您的软件包是最新的。使用以下命令:
```
sudo apt update
```
此外，您可以使用以下命令选择升级机器上的任何可升级软件包:
```
sudo apt upgrade
```
### 安装 Git
这个研讨会的代码包可以在我们的 GitHub 存储库中找到。您可以使用 Git 克隆存储库来获取所有代码文件。
使用以下命令在 Ubuntu 上安装 Git:
```
sudo apt install git-all
```
### Docker
Docker 是该车间使用的默认容器化引擎。随着章节的深入，您将了解更多关于该应用的信息。
使用以下命令在 Ubuntu 上安装 Docker:
```
sudo apt install docker.io -y
```
安装完成后，您需要确保 Docker 守护程序已启动并在您的系统上运行。使用以下命令执行此操作，确保您正在使用`sudo`命令作为提升用户运行此操作:
```
sudo systemctl start docker
```
确保下次启动系统时 Docker 守护程序会启动。运行以下命令，确保每次停止或重新启动安装 Docker 的系统时，Docker 都会启动:
```
sudo systemctl enable docker
```
使用带有`--version`选项的`docker`命令验证您安装的 Docker 版本。运行以下命令:
```
docker –version
```
您应该会看到类似如下的输出:
```
Docker version 19.03.8, build afacb8b7f0
```