LITTLE LANGUAGES
CHAPTER6
asm - assembler and interpreter for sinple computer
usage: awk -f asm program-file data-files...
BEGIN(
srcfile =ARGV[1]
ARGV[1] ="*
tempfile =“asn.temp"
remaining files are data
（xzoq   ）=u
for（1=1;i0)(
sub(/#.+/,
symtab[s1]= nextmem
"*)
strip comnents
if（$21=*"）{
remember label 1ocation
print $2"\t"$3>tempfile
 save op, addr if present
nextmen++
close(tempfile)
ASSEMBLER PASS 2
while（getline 0)(
nextmem =0
1f（$21-/[0-9]8/)
if symbolic addr,
$2=symtab[$2]
replace by numeric value
mem[nextmem++]=1000+op[$1]+$2pack into word
INTERPRETER
for（pc=0；pc>=0；）（
addr = men[pc] % 1000
code =int（mem[pc++]/ 1000)
else if （code = op[put"])
if
([4a5,]do =apoo)
(getline acc }
(print acc }
else
f
(code
op["1d"])
op["st"])
（
men[addr]= acc }
else
(code
{acc
=mem[addr]}
else
1f
(code
op["add"])
(acc
（
acc
+= sem[addr]
else
if
(code
op["sub"])
=α mem[addr]
(code
([,sodf.]do
(acc >
0)pc
else
if
(code =s
（[.zf.]do
{if （acc == 0） pc =&
if
addr
if
（[f.jdo  apoo）
addr )
else if (code == op[*halt"])
else
if
{pc = addr }
else
{pc=-1}
(pc=-1}
The associative array symtab records memory locations for labels. If there is
as s [ ]qems ‘su andu ue jog jpqel ou
Labels start in column one; operators are preceded by white space. Pass 1
---
## Page 145
SECTION 6.2
A LANGUAGE FOR DRAWING GRAPHS135
sets the field separator variable FS to the regular expression [ \t]+. This
   n   u sn pe sa o s ex  sn
a field separator. In particular, leading white space is now treated as a field
separator, so $ 1 is always the label and $2 is always the operator.
Because the “op code' for const is zero, the single assignment
mem[nextmen++]=1000+op[$1]+$2pack into word
can be used to store both constants and instructions in pass 2.
Exercise 6-1. Modify asm to print the listing of memory and program shown above. 
executed.
Exercise 63. To get an idea of scale, add code to handle errors, deal with a richer set of
conditional jumps, etc. How would you handle literal operands like add =1 instead of
forcing the user to create a cell called one?
Exercise 6-4. Write a disassembler that converts a raw memory dump into assembly
language. O
Exercise 6-5. Look at a real machine (c.g., the 6502, as found in Apple-II and Commo
dore, or the 8086 family in the IBM PC and compatibles) and try writing an assembler
for a subset of its instructions. 
6.2ALanguageforDrawingGraphs
The lexical and syntactic simplicity of our assembly language made its
language called graph, for plotting graphs of data. The input is a graph
specification in which each line is a data point or labeling information for the
coordinate axes. Data points are x-y pairs, or y values for which a default
sequence of x values 1, 2, 3, etc., is to be generated. An optional nonnumeric
plotting character can follow either form of data value. Labeling information
consists of a keyword and parameter values:
labelcaption
range xmin ymin xmax ymex
left ticks t,f
bottom ticks 1; f .
These lines can appear in any order. They are all optional; in particular, there
is no need to specify the range of data values.
The processor scales the data points and produces commands to plot them in
as a 24x80 character array,but it would be easy to produce plotting commands
a suitable form. To make the discussion concrete, we will simply print them out
for some graphics device instead. For example, this input:
---
## Page 146
136
LITTLE LANGUAGES
CHAPTER 6
range 19205000199060000
label Annual Traffic Deaths,USA, 1925-1984
1eft ticks 10000 30000 50000
1925 21800
1930 31050
1935 36369
1981 51500
1983 44600
1982 46000
1984 46200
produces this output:
50000
30000
10000
006
Annua1 Traffic Deaths, USA,1925-1904
1950
1900
The graph processor operates in two phases. The main loop reads the
graph specification and parses it, using patterns to recognize the different types
of statements. The intermediate representation of the graph is stored in various
arrays and variables. From this representation, the END action computes the
range of values if necessary, then draws a frame, the ticks, the label, and the
data points. The output operations have been written as separate functions to
localize changes for specific devices.
This is by far the largest awk program we have seen so far; at one hundred
lines, it's the second largest in the book. In spite of that, the individual pieces
are quite short and simple. It was written in small steps as well, as the design
evolved.
---
## Page 147
SECT1ON 6.2
A LANGUAGE FOR DRAWING GRAPHS
137
graph - processor for a graph-draving language
input:
data and specification of a graph
output: data plotted in specified area
BEGIN(
set frase dinensions...
ht =24;vid =80
height and width
ox=6；oy=2
offset for xandy axes
number =
"[-+]?（[0-9]+[.]?[0-9]1[.][0-9]+)"\
"（[e][-+]?[0-9]+]?s"
$1
“1abel"{
sub(/。1abel*/，"")
for bottom
botlab = $0
next
$1
“bottom”&6$2==
"ticks"(
for（1 =3;ixmax）
xmax = x[i]
1f (y[1] > ymax) ymax = y[1]
frane(); ticks(); label(); data(); drav()
---
## Page 148
138
LITTLE LANGUAGES
CHAPTER6
function frame()(
create frame for graph
for（1=ox;
：1++）plot（i，ht-1，-)
bottom
for（1=oy;1= 0;i--）{
for （=0;j<wid; j++)
printf（(j,i）in array ?array[j,i]:*")
printf("\n")
function xscale(x)(
scale x-value
return int((x-xmin)/(xmax-xmin)+(wid-1-ox) + ox +0.5)
function yscale(y)(
scale y-value
return int((y-ymin)/(ymax-ymin)▪(ht-1-oy)+ oy + 0.5)
function plot（x,y，c)(
put character c in array
array[x,y]= c
funetion splot（x, y,s,
i, n)(# put string s in array
n = length(s)
for（i=0;i< n;i++)
array[x+i，y]=substr（s,i+1,1)
The graph language falls naturally into the pattern-directed model of com-
putation that awk itself supports:the specification statements are keywords with
values.This style is often a good start for any language design; it seems easy
for people to use, and it is certainly casy to process.
Our language graph is a simplified version of the graph-plotting language
grap, which is a preprocessor for the pic picture-drawing language. The same
---
## Page 149
SECTION 6.2
A LANGUAGE FOR DRAWING GRAPHS
61
data and a description almost identical to that above produces this picture when
run through grap, pic and troff:
50000
30000
10000
193019401950196019701980
Annual Traffic Deaths, USA, 1925-1984
Awk is good for designing and experimenting with little languages. If a
design proves suitable, a production version can be recoded in a more efficient
systems language like C. In some cases, the prototype version itself may be
suitable for production use. These situations typically involve sugar-coating or
specializing an existing tool.
A specific instance is the preparation of specialized graphs, where we have
used awk programs to translate simple languages into grap commands. Exam-
ples include scatter-plot matrices, dotcharts (a form of histogram), boxplots
(which show mean, quartiles and extremes of a set of observations), and pie-
charts.
Exercise 6-6. Modify graph so that the graph can bc drawn transposed, that is, with
the x axis running down the page and the y axis across the page. Also add the ability to
specify logarithmic x and y scales. 
Exercise 6-7. Add a command to graph that can be used to cause data to be read from
a file.
menting with algorithms for this task even if the final implementation will be in another
language.)
Exercise 6-9. If your system provides some plotting library, extend or modify graph to
generate commands for it. (This is an example of sugar-coating.) 
---
## Page 150
140LITTLE LANGUAGES
CHAPTER 6
6.3ASortGenerator
The Unix sort command is versatile if you know how to use it. But it's hard
your intuition. So as another exercise in little-language design, we will develop
specification. The sortgen processor generates a sort command but does not
run it - that task is left to the user, who may want to review the command
before invoking it.
The input to sortgen is a sequence of words and phrases describing sort
options like thefield separator,the sort keys,and the nature and direction f
For example, given this input:
comparisons. The goal is to cover the common cases with a forgiving syntax.
descending nuneric order
the output is
sort -rn
As a more complicated example, with this description:
field separator is :
prinary key is field 1
increasing alphabetic
secondary key is field 5
reverse numeric
sortgen produces a sort command cquivalent to the first one in Chapter 4:
sort -t':′+0 -1+4rn -5
The heart of sortgen is a set of rules to translate words and phrases
describing sort options into corresponding flags for the sort command. The rules
expressions that match the phrases describing sort options; the actions compute
discards duplicate items. Similarly, the field separator character is assumed to
be either a tab or a single character that appears somewhere on a line contain-
ing some form of the word “separate."
multiple fields. Here the magic word is “key," which has to appear in the
input. When it does, one or two isolated numbers are collected as the field
Per-key options include blank suppression (b),dictionary order (d),folding
of upper and lower case together (-f), numeric order (-n), and reversal (-x).
---
## Page 151
SECTION 6.3
A SORT GENERATOR
141
sortgen - generate sort comnand
output: Unix sort comnand vith appropriate arguments
input:
sequence of 1ines describing sorting options
BEGIN ( key = 0 )
/no 1not In't/ (print “error: can't do negatives:", s0;ok = 1}
rules for global options
/uniqldiscard.+(idenidupl)/
(ok=0}
/separ,+tabitab.*sep/
（uniq=-u;ok=1）
/separ/ ( for (1 = 1;1<o αF; i++)
（sep="t'\t';ok = 1}
if (length（si)e 1)
ok = 1
.$...d8
/key/
(key++;dokey();ok= 1)#nev key;must come in order
#rules for each key
/ignore.+(spacelblank)/
/dict/
（dict[key]=“d”；ok=1}
（blank[key]=“b;ok=1}
/foldlcase/
（num[key]=“n²;ok=1}
（fold[key]="f;ok=1}
/revidescend1decreasldowmloppos/
/num/
（rev[key]="x;ok-1]
/forwardlascendlincreasliupialpha/(next}
this is sort's default
lok
（print “error: can't understand:*,$0 }
END(
cnd=“gort*unig
#print flags for each key
if（flag）cnd=cad-flag
flag= dict[0]blank[0]fold[0]rev[0]num[0]sep
flag= pos[i] diet[i]blank[1]fold[i]rev[i]num[1]
if (po82[]) cnd = ced * -" pos2[1]
+.=o（b）
，
print cmd
function dokey(
 deternine position of key
for（=1:1<=NP;1++)
if（$1-/[0-9]+s/）{
s=[x]od
break
sort uses 0-origin
(++;1co NP:i++)
tor
if（$1-/[0-9]+8/){
pos2[key]= s1
break
if（pos[key]s **)
if（pos2[key] **)
printf(*error: invalid key specification: %s\n", s0)
pos2[key]=pos[key]+1
---
## Page 152
142 LITTLE LANGUAGES
CHAPTER 6
negatively. Subsequent rules deal with the global options, then with those that
 h s e o   s d    o  
unable to understand.
This program is still casy to fool, of course, but if one is trying to get the
right answer, not to provoke an error, sortgen is already useful.
Exercise 6-10. Write a version of sortgen that provides access to all the facilities of
the sort command on your system. Detect inconsistent requests, such as sorting numeri-
cally and in dictionary order simultaneously. 
input language significantly more formal? 
Exercise 6-12. Write a program that translates a sort command into an English sen-