        function attack() public payable {
        }
        function kill() public {
            selfdestruct(target);
        }
    }
注意部署的时候要发送一些ether，不然自毁了也没balance可发，然后即可直接调用目标合约的collectPenalty完成挑战了
###  0x4. Mapping
    pragma solidity ^0.4.21;
    contract MappingChallenge {
        bool public isComplete;
        uint256[] map;
        function set(uint256 key, uint256 value) public {
            // Expand dynamic array as needed
            if (map.length  keccak256(slot) + index
slot是数组长度所在的存储位，我想你也猜到了，这个挑战里我们真正要利用的溢出其实是在这里，index是我们可控的，只要它够大我们就能够成功上溢，覆盖掉isComplete所在的0号存储位
首先计算map数组中第一个变量所在的存储位，然后计算溢出所需的index大小
将此作为参数传递进set，value设为1即可
###  0x5. Donation
    pragma solidity ^0.4.21;
    contract DonationChallenge {
        struct Donation {
            uint256 timestamp;
            uint256 etherAmount;
        }
        Donation[] public donations;
        address public owner;
        function DonationChallenge() public payable {
            require(msg.value == 1 ether);
            owner = msg.sender;
        }
        function isComplete() public view returns (bool) {
            return address(this).balance == 0;
        }
        function donate(uint256 etherAmount) public payable {
            // amount is in ether, but msg.value is in wei
            uint256 scale = 10**18 * 1 ether;
            require(msg.value == etherAmount / scale);
            Donation donation;
            donation.timestamp = now;
            donation.etherAmount = etherAmount;
            donations.push(donation);
        }
        function withdraw() public {
            require(msg.sender == owner);
            msg.sender.transfer(address(this).balance);
        }
    }
这一关的考点其实也挺有意思的，因为结构体在函数内非显式地初始化的时候会使用storage存储而不是memory，所以就可以达到变量覆盖的效果，关于这我也专门写过相关的文章，[Solidity中存储方式错误使用所导致的变量覆盖](http://www.freebuf.com/articles/blockchain-articles/175237.html)，个人感觉写的还算清楚，这也是solidity的一个bug，官方是准备在0.5.0版本修复，不过看来是遥遥无期了
对这方面有了解的话其实一眼就能看出来玄机了，显然此处donate函数中初始化donation结构体的过程存在问题，我们可以覆盖solt 0和slot
1处1存储的状态变量，恰好solt
1存储的即为owner，而覆盖其位置需要的etherAmount又是我们可控的，那么现在的目标就是传入正确的etherAmount来调用donate函数从而覆盖owner为我们的Account地址
对于传入的etherAmount，其值只要等于我们的Account地址即可，然后满足下面的对于msg.value的要求，简单地计算一下即可得到结果
然后我们使用这些参数调用donate函数，此时owner变量还是另一个地址
成功将自己的Account改写为owner
然后调用withdraw函数拿钱走人
###  0x6. Fifty years
    pragma solidity ^0.4.21;
    contract FiftyYearsChallenge {
        struct Contribution {
            uint256 amount;
            uint256 unlockTimestamp;
        }
        Contribution[] queue;
        uint256 head;
        address owner;
        function FiftyYearsChallenge(address player) public payable {
            require(msg.value == 1 ether);
            owner = player;
            queue.push(Contribution(msg.value, now + 50 years));
        }
        function isComplete() public view returns (bool) {
            return address(this).balance == 0;
        }
        function upsert(uint256 index, uint256 timestamp) public payable {
            require(msg.sender == owner);
            if (index >= head && index = queue[queue.length - 1].unlockTimestamp + 1 days);
                contribution.amount = msg.value;
                contribution.unlockTimestamp = timestamp;
                queue.push(contribution);
            }
        }
        function withdraw(uint256 index) public {
            require(msg.sender == owner);
            require(now >= queue[index].unlockTimestamp);
            // Withdraw this and any earlier contributions.
            uint256 total = 0;
            for (uint256 i = head; i  queue.push(contribution);
这一行将在queue里增加我们前面初始化的这一contribution，然后我就想是否是这插入的位置的玄机，因为queue是个动态数组，其中的变量所在的存储位计算规则为
> keccak256(slot) + index * elementsize
这里elementsize即为结构体Contribution的size
2，push更新queue的存储使用的自然也是这个公式，那么其使用的index应该就是queue的length了，关于这可以验证，我就懒得贴图了，而queue.length是我们可控的，这方面肯定可以做点文章
这样的话梳理一下，我们现在就可以使用msg.value来决定我们要增加的对象所在的存储位，当然这种情况下你得先让index大于queue.length才能触发增加对象的条件，但是我们的目标还是调用withdraw啊，它最关键的限制在这里
> require(now >= queue[index].unlockTimestamp);
前面我们也提到了第一个contribution的时间锁就是五十年，之后每个必须至少比前面一项多一天，这个限制是由下面这行代码附加的
> require(timestamp >= queue[queue.length – 1].unlockTimestamp + 1 days);
经历了前面这么多挑战是不是感觉套路很眼熟，没错，这里显然又是存在上溢的，如果前面一个对象的时间锁加上一天以后溢出为0，那么我们增加的项目的时间锁就可以设置为0了，这一点很重要，因为head的值是会被我们增加的对象的时间锁给覆盖的，如果不设为0，在下面调用withdraw时就会从非0位开始提取balance，从而无法覆盖到我们必须提取的queue[0]的那1
ether
因为1 days的值为86400，我们直接计算溢出所需的时间锁大小
> 2**256-86400  
>
> 115792089237316195423570985008687907853269984665640564039457584007913129553536
这样的话按我一开始的想法接下来应该很简单了，先在queue的index 1处添加一个记录，时间锁就传递我们上面计算得到的值，然后在queue的index
2处添加一个记录，时间锁传递为0，这两步操作通过发送1 wei和2
wei来调用upsert函数即可实现，然后我们的head值就被设为0了，这样的话我们应该就满足调用withdraw的条件了，但是尝试了一下你就会发现依然是调用失败，在本地测试时可以debug一下，发现问题是出在最后一步进行transfer的时候，这可让人难受死了，都到最后关头了还是过不去
如果你是在本地环境上测试的话应该不难发现在每次增加对象后事实上新的contribution的amount值并不是我们传递的msg.value的值，在其基础上还加了1.开始我也不太明白，后来debug发现原来queue.length也是msg.value+1，因为二者共用一块存储，应该是queue.length增加时也修改了amount的值，至于此处queue.length为何+1，则是因为queue.push操作，因为其在最后执行增添对象的任务，添加以后它会将queue.length进行+1操作
这样一切就解释的通了，关键就是这里amount进行了+1，所以在withdraw是所统计的total事实上是大于合约所拥有的balance，所以transfer无法执行，这一点确实有点难到我了，必须想个办法抵消这一步+1的操作
很快，我意识到我可以利用value来覆盖已有的contribution，既然发1
wei会加1，那我发两次，这样得到的amount就是2，也就是我实际发送的wei数目，所以把上面那两步写入操作都改成1 wei下的操作即可
第一步  
第二步  
然后调用withdraw(1)即可成功通关
总的来说这一关还是非常有意思的，很推荐自己动手试试，只是看文字可能不是很好体会