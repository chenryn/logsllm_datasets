patching file doc/src/sgml/catalogs.sgml  
Hunk #1 succeeded at 8223 (offset -8 lines).  
Hunk #2 succeeded at 9539 (offset -8 lines).  
patching file doc/src/sgml/filelist.sgml  
patching file doc/src/sgml/postgres.sgml  
patching file src/backend/catalog/system_views.sql  
patching file src/backend/commands/prepare.c  
patching file src/backend/nodes/nodeFuncs.c  
patching file src/backend/tcop/postgres.c  
Hunk #9 succeeded at 4616 (offset 6 lines).  
Hunk #10 succeeded at 5441 (offset 6 lines).  
patching file src/backend/tcop/utility.c  
patching file src/backend/utils/cache/inval.c  
patching file src/backend/utils/misc/guc.c  
Hunk #1 succeeded at 475 (offset -8 lines).  
Hunk #2 succeeded at 2126 (offset -8 lines).  
patching file src/include/catalog/pg_proc.dat  
patching file src/include/commands/prepare.h  
patching file src/include/nodes/nodeFuncs.h  
patching file src/include/tcop/pquery.h  
patching file src/include/utils/guc.h  
patching file src/test/regress/expected/autoprepare.out  
patching file src/test/regress/expected/date_1.out  
patching file src/test/regress/expected/rules.out  
patching file src/test/regress/parallel_schedule  
patching file src/test/regress/serial_schedule  
patching file src/test/regress/sql/autoprepare.sql  
```  
```  
/*  
 * Threshold for implicit preparing of frequently executed queries  
 */  
{  
        {"autoprepare_threshold", PGC_USERSET, QUERY_TUNING_OTHER,  
         gettext_noop("Threshold for autopreparing query."),  
         gettext_noop("0 value disables autoprepare.")  
        },  
        &autoprepare_threshold,  
        0, 0, INT_MAX,  
        NULL, NULL, NULL  
},  
{  
        {"autoprepare_limit", PGC_USERSET, QUERY_TUNING_OTHER,  
         gettext_noop("Maximal number of autoprepared queries."),  
         gettext_noop("0 means unlimited number of autoprepared queries.   
	 Too large number of prepared queries can cause backend memory overflow   
	 and slowdown execution speed (because of increased lookup time)")  
        },  
        &autoprepare_limit,  
        113, 0, INT_MAX,  
        NULL, NULL, NULL  
},  
{  
        {"autoprepare_memory_limit", PGC_USERSET, QUERY_TUNING_OTHER,  
         gettext_noop("Maximal size of memory used by autoprepared queries."),  
         gettext_noop("0 means that there is no memory limit. Calculating memory used by prepared queries adds somme extra overhead, "  
                                  "so non-zero value of this parameter may cause some slowdown.   
				  autoprepare_limit is much faster way to limit number of autoprepared statements"),  
         GUC_UNIT_KB  
        },  
        &autoprepare_memory_limit,  
        0, 0, INT_MAX,  
        NULL, NULL, NULL  
},  
```  
如果支持内部ps，则测试时，不再需要使用prepare statement   
```  
./tpcc.lua --pgsql-host=/tmp --pgsql-port=8001 --pgsql-user=postgres --pgsql-db=postgres --threads=64 --tables=10 --scale=100 --db-driver=pgsql prepare  
./tpcc.lua --pgsql-host=/tmp --pgsql-port=8001 --pgsql-user=postgres --pgsql-db=postgres --threads=64 --tables=10 --scale=100 --time=3000 --report-interval=1 --trx_level=RC --db-ps-mode=auto --db-driver=pgsql run  
./tpcc.lua --pgsql-host=/tmp --pgsql-port=8001 --pgsql-user=postgres --pgsql-db=postgres --threads=64 --tables=10 --scale=100 --db-driver=pgsql cleanup  
```  
## 小结  
1、PostgreSQL 11 beta3版本，1000W tpc-c，在ECS虚拟机下测试，性能已达到 103万 tpmC。     
![pic](20180913_01_pic_001.jpg)    
2、PostgreSQL 11 beta3版本，200G tpc-h，在ECS虚拟机下测试(未过多优化)，总耗时在30分钟左右（还有巨大优化空间）。      
[《(TPC-H测试 SF=10,SF=200) PostgreSQL 11 vs 10 vs Deepgreen》](../201808/20180823_01.md)    
SF=10   
数据库 | q1 | q2 | q3 | q4 | q5 | q6 | q7 | q8 | q9 | q10 | q11 | q12 | q13 | q14 | q15 | q16 | q17 | q18 | q19 | q20 | q21 | q22  
---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---  
PostgreSQL 11beta3 | 3 | 2 | 2 | 5 | 3 | 4 | 2 | 2 | 9 | 3 | 1 | 2 | 4 | 2 | 6 | 10 | 27 | 46 | 2 | 10 | 13 | 2  
SF=200    
数据库 | q1 | q2 | q3 | q4 | q5 | q6 | q7 | q8 | q9 | q10 | q11 | q12 | q13 | q14 | q15 | q16 | q17 | q18 | q19 | q20 | q21 | q22  
---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---  
PostgreSQL 11beta3 | 18 | 38 | 25 | 32 | 57 | 8 | 52 | 24 | 66 | 38 | 24 | 26 | 98 | 13 | 58 | 114 | 732 | 595 | 12 | 213 | 124 | 14  
PostgreSQL 在oltp, olap混合场景下有着出色的表现，再加上对Oracle兼容性的加持，以及**阿里、平安集团、邮储、国家电网、中兴、华为、铁总、苏宁、去哪儿、探探等PG企业用户的背书**，已成为市场去O的标志性替代产品，帮助企业实现几乎无痛的去O。  
**[阿里云ADAM 去O 专版 PPAS(PostgreSQL高级版)](https://promotion.aliyun.com/ntms/act/ppasadam.html) 提供免费去O评估。**    
**[Ora2pg](http://ora2pg.darold.net/) 开源去O产品.**  
[《Oracle migration to Greenplum - (含 Ora2pg)》](../201804/20180423_02.md)    
## 参考  
https://github.com/digoal/sysbench-tpcc  
https://github.com/digoal/sysbench-1  
https://github.com/Percona-Lab/sysbench-tpcc  
https://github.com/akopytov/sysbench  
http://dimitrik.free.fr/blog/archives/2018/05/mysql-performence-80-ga-and-tpcc-workloads.html?utm_source=tuicool&utm_medium=referral  
[《(TPC-H测试 SF=10,SF=200) PostgreSQL 11 vs 10 vs Deepgreen》](../201808/20180823_01.md)    
[《数据库界的华山论剑 tpc.org》](../201701/20170125_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")