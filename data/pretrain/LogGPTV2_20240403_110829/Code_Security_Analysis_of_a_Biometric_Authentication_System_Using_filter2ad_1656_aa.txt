# Title: Code Security Analysis of a Biometric Authentication System Using Automated Theorem Provers

## Author
Jan Jürjens  
Software & Systems Engineering, Department of Informatics, TU Munich, Germany  
<http://www4.in.tum.de/~juerjens>

## Abstract
Understanding the security goals provided by cryptographic protocol implementations is challenging, as security requirements such as secrecy, integrity, and authenticity are notoriously difficult to establish, especially in the context of cryptographic interactions. While significant research has been devoted to developing formal techniques for analyzing abstract specifications of cryptographic protocols, less attention has been paid to the analysis of cryptoprotocol implementations, where a formal link to specifications is often not available. This paper applies an approach to determine the security goals provided by a C implementation of an industrially-strength biometric authentication system. Our approach leverages control flow graphs and automated theorem provers (ATPs) for first-order logic.

## 1. Introduction
Significant research has focused on developing formal techniques to analyze abstract specifications of cryptographic protocols. However, few attempts have been made to apply these techniques to the analysis of cryptoprotocol implementations. Even when specifications exist and have been formally analyzed, there is no guarantee that the implementation conforms to the specification. For example, [RS98] describes a protocol whose design was formally verified for security, but whose implementation was later found to contain a weakness related to its use of cryptographic algorithms. In software projects, changes in the code during the implementation phase due to dynamically changing requirements are often not reflected in the specifications.

In this paper, we propose an approach to determine the security goals provided by a protocol implementation at the source-code level. Our approach uses automated theorem provers (ATPs) for first-order logic, which are both automatic and efficient. The C code is represented as a control flow graph, where cryptographic operations are abstracted as functions. This graph is then translated into first-order logic with equality. Together with a logical formalization of the security requirements, these formulas are input into an ATP, such as e-SETHEO [SW00], which supports the TPTP input notation. If the analysis reveals a potential attack, an attack generation script written in Prolog is generated from the C code. A tool for our approach is available over a web interface and as open-source [sec].

The contribution of this paper is the application of our approach to an industrially-strength biometric authentication protocol. This work is motivated by an industrial research and development project, where we gained valuable experience in the secure design of biometric authentication protocols and the pitfalls involved. To share these experiences without compromising confidentiality agreements, we defined our own biometric authentication protocol based on openly accessible information, such as [VB03], and demonstrated the types of problems that may arise and how they can be detected at the implementation level using our tools. We emphasize that any resemblance between the protocol presented here and existing industrial protocols is purely coincidental, and we make no implication about the security of any current or past systems of our industrial partners.

This work is not just a matter of applying well-understood concepts and existing components to a particular problem. Although there is extensive research on verifying abstract specifications of cryptographic protocols using formal methods, the verification of implementations using first-order logic is a new research topic. The transition from an abstract specification to an implementation can introduce security issues, making it non-trivial to apply specification-based verification techniques directly to the source code. Additionally, biometric authentication protocols may present unique challenges not found in typical authentication protocols.

Our goal is not to provide a fully automated formal verification of C code but to increase understanding of the security properties of cryptoprotocol implementations in a way that is as automated as possible, facilitating use in an industrial environment. Due to the abstractions used, the approach may produce false alarms, though this has not been observed in practical examples. For space constraints, we do not consider features such as pointer arithmetic, casts, and assume expressions are well-typed. Loops are investigated through a bounded number of rounds, a common approach in automated software verification. Our focus is on high-level security properties such as secrecy and authenticity, rather than low-level security flaws like buffer overflow attacks.

## 2. Code Analysis
Our analysis approach uses the Dolev-Yao adversary model [DY83, Mea91, Gol03] for security analysis. The adversary can read messages sent over the network, collect them in his knowledge set, merge and extract messages, and delete or insert messages on communication links. Security requirements are formalized relative to this adversary model. For example, a data value remains secret if it never appears in the adversary's knowledge set.

We explain the transformation from the control flow graph generated from the C program to first-order logic, which is input to the automated theorem prover. The corresponding tool-flow is shown in Figure 1. For brevity, we focus on the analysis for data secrecy. We use a predicate `knows` to define a bound on the adversary's knowledge set. Specifically, `knows(E)` means the adversary may get to know `E` during the protocol execution. For any data value `s` that should remain confidential, one must check whether `knows(s)` can be derived.

Formally, we consider a term algebra generated from ground data such as variables, keys, nonces, and other data using symbolic operations, including those in Figure 2. These symbolic operations are the abstract versions of the cryptographic algorithms used in the code. Generating keys and random values is formalized by introducing new variables. For freshly generated keys and random values, we use a formula parameterized over these variables, closed by forall-quantification. In the term algebra, we define equations such as `dec(enc(E, K), inv(K)) = E` and `ver(sign(E, inv(K)), K, E) = true` for all terms `E` and `K`, and the usual laws for concatenation, `head()`, and `tail()`.

The set of predicates for a given program is defined as follows. For each publicly known expression `E`, the statement `knows(E)` is derived. To model the adversary's ability to construct new expressions from known ones, including the use of cryptographic operations, we generate formulas for these operations, as shown in Figure 3. We use the TPTP notation for first-order logic formulas [SS01], which is the input notation for many ATPs, including e-SETHEO [SW00]. Here, `&` denotes logical conjunction, and `![E1, E2]` denotes forall-quantification over `E1` and `E2`.

We now define how a control flow graph generated from a C program (e.g., using the aiCall tool [Abs04]) is transformed into a logical formula characterizing the interaction between the adversary and the protocol participants.

### Step 1: Control Flow Graph Transformation
The control flow graph can be transformed into transitions of the form `trans(state, inpattern, condition, action, nextstate)`, where `inpattern` is empty and `condition` equals `true` if not needed. The `action` is a logical expression of the form `localvar = value` for local assignments or `outpattern` for output commands, leaving it empty if not needed. There may also be another transition with the negation of the given condition.

### Step 2: Transition Definition
Assume the source code gives rise to the transition `TR1 = trans(s1, i1, c1, a1, t1)` and a second transition `TR2 = trans(s2, i2, c2, a2, t2)`. If there is no such `TR2`, we define `TR2 = trans(t1, [], true, [], t1)` for simplicity, where `[]` is the empty input or output pattern and `true` is the boolean condition.

For `c1`, we define `cond(arg1, ..., argn)`. Let `¯i1 = knows(i1)` if `i1` is non-empty, otherwise `¯i1 = true`. For `a1`, let `¯a1 = a1` if `a1` is of the form `localvar = value` and `¯a1 = knows(outpattern)` if `a1 = outpattern` (and `¯a1 = true` if `a1` is empty). Then for `TR1`, we define the following predicate:
\[ PRED(TR1) \equiv \bar{i1} \land c1 \Rightarrow \bar{a1} \land PRED(TR2) \]
This formula formalizes that if the adversary knows an expression that can be assigned to `i1` such that `c1` holds, then `¯a1` will hold according to the protocol, meaning either the equation `localvar = value` holds for an assignment, or the adversary gets to know `outpattern` if it is sent out in `a1`. Also, the predicate for the succeeding transition `TR2` will hold.

To construct this recursive definition, we assume the control flow graph is finite and cycle-free. Unbounded loops in the C program, though rare in cryptographic protocols, are handled by investigating a bounded number of rounds.

### Example Formulas
Here are some example formulas for the cryptographic operations:
```prolog
input_formula(construct_message_1, axiom, (
    ! [E1, E2] :
    ( ( knows(E1) & knows(E2) )
      => ( knows(conc(E1, E2)) & knows(enc(E1, E2)) )
    )
))
```

These formulas help in formalizing the adversary's ability to construct new expressions from known ones, including the use of cryptographic operations.

---

**Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005)**  
1063-9527/05 $20.00 © 2005 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021, at 12:12:51 UTC from IEEE Xplore. Restrictions apply.