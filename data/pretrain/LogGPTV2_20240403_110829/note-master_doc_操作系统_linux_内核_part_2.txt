......
} __randomize_layout;
```
- uid 和 gid：一般情况下，谁启动的进程，就是谁的 ID
- euid 和 egid：实际用来判断是否有权限就是通过这两个
- fsuid 和 fsgid：对文件操作时用来审核的标志
- cap_permitted：表示进程能够使用的权限
- cap_inheritable： 表示当可执行文件的扩展属性设置了 inheritable 位时，调用 exec 执行该程序会继承调用者的 inheritable 集合
- cap_bset：统中所有进程允许保留的权限。如果这个集合中不存在某个权限，那么系统中的所有进程都没有这个权限
- cap_ambient：非 root 用户进程使用 exec 执行一个程序的时候，如何保留权限的问题。当执行 exec 的时候，cap_ambient 会被添加到 cap_permitted 中，同时设置到 cap_effective 中
#### 函数调用
```c
struct thread_info    thread_info;
void  *stack;
```
![2022102417311](/assets/2022102417311.webp)
对于32位：
- ESP（Extended Stack Pointer）是栈顶指针寄存器
- EBP（Extended Base Pointer）是栈基地址指针寄存器，指向当前栈帧的最底部
对于64位：
- rax 用于保存函数调用的返回结果。
- 栈顶指针寄存器变成了 rsp，指向栈顶位置。堆栈的 Pop 和 Push 操作会自动调整 rsp
- 栈基指针寄存器变成了 rbp
参数传递用到了 rdi、rsi、rdx、rcx、r8、r9 这 6 个寄存器，用于传递存储函数调用时的 6 个参数。如果超过 6 的时候，还是需要放到栈里面
每个线程都会分配一个内核栈，分配的内核栈是8k（32位），16k（64位）
当系统调用从用户态到内核态的时候，首先要做的第一件事情，就是将用户态运行过程中的 CPU 上下文保存起来，其实主要就是保存在这个结构的寄存器变量里。这样当从内核系统调用返回的时候，才能让进程在刚才的地方接着运行下去
在内核态，32 位和 64 位的内核栈和 task_struct 的关联关系不同。32 位主要靠 thread_info，64 位主要靠 Per-CPU 变量
### 调度
![20221025172511](/assets/20221025172511.webp)
```c
unsigned int policy; // 调度策略
/* 优先级 */
int prio, static_prio, normal_prio;
unsigned int rt_priority;
```
#### 调度策略
```c
/* 相同条件小，优先级高的总是可以抢占优先级低的 */
#define SCHED_NORMAL    0
#define SCHED_FIFO    1 // 实时：先入先出
#define SCHED_RR    2 // 实时：轮询
#define SCHED_BATCH    3 // 普通：后端批处理、不用交互的进程
#define SCHED_IDLE    5 // 普通：特别空闲的时候才跑的进程
#define SCHED_DEADLINE    6 // 实时：调度器总是选择其 deadline 距离当前时间点最近的那个任务
```
#### 完全公平调度算法
在普通调度中使用，随着时间片轮转，每次都会选中一个进程，每个被选中的进程自身的vruntime就增大，辅之以权重，每次挑选vruntime最小的进程进行调度以达到公平的目的
#### 调度实体与调度队列
```c
struct sched_entity {
  struct load_weight    load;
  struct rb_node      run_node;
  struct list_head    group_node;
  unsigned int      on_rq;
  u64        exec_start;
  u64        sum_exec_runtime;
  u64        vruntime;
  u64        prev_sum_exec_runtime;
  u64        nr_migrations;
  struct sched_statistics    statistics;
......
};
struct rq {
  /* runqueue lock: */
  raw_spinlock_t lock;
  unsigned int nr_running;
  unsigned long cpu_load[CPU_LOAD_IDX_MAX];
......
  struct load_weight load;
  unsigned long nr_load_updates;
  u64 nr_switches;
  struct cfs_rq cfs;
  struct rt_rq rt;
  struct dl_rq dl;
......
  struct task_struct *curr, *idle, *stop;
......
};
/* CFS-related fields in a runqueue */
struct cfs_rq {
  struct load_weight load;
  unsigned int nr_running, h_nr_running;
  u64 exec_clock;
  u64 min_vruntime;
#ifndef CONFIG_64BIT
  u64 min_vruntime_copy;
#endif
  struct rb_root tasks_timeline;
  struct rb_node *rb_leftmost;
  struct sched_entity *curr, *next, *last, *skip;
......
};
```
每个 CPU 都有自己的 struct rq 结构，其用于描述在此 CPU 上所运行的所有进程，其包括一个实时进程队列 rt_rq 和一个 CFS 运行队列 cfs_rq，调度器首先会先去实时进程队列找是否有实时进程需要运行，如果没有才会去 CFS 运行队列找是否有进程需要运行，内核会在每一个时钟周期末尾触发rebalance，这样可以进行各个CPU的任务再均衡，同时每个CPU如果发现自己队列空了，会进行任务窃取，执行别的CPU的任务
#### 调度器操作
- enqueue_task 向就绪队列中添加一个进程，当某个进程进入可运行状态时，调用这个函数
- dequeue_task 将一个进程从就绪队列中删除
- pick_next_task 选择接下来要运行的进程
- put_prev_task 用另一个进程代替当前运行的进程
- set_curr_task 用于修改调度策略
- task_tick 每次周期性时钟到的时候，这个函数被调用，可能触发调度
#### 主动调度
- 协作式，进程在执行某些操作时，发现需要进行等待，就主动让出CPU，选择调用 schedule() 函数
```c
static ssize_t tap_do_read(struct tap_queue *q,
         struct iov_iter *to,
         int noblock, struct sk_buff *skb)
{
......
  while (1) {
    if (!noblock)
      prepare_to_wait(sk_sleep(&q->sk), &wait,
          TASK_INTERRUPTIBLE);
......
    /* Nothing to read, let's sleep */
    schedule();
  }
......
}
```
调度过程：
挑选一个任务，如果该任务不是当前任务，则准备上下文切换，上下文所做的事就是保存内核栈的栈顶指针、寄存器到TSS里面
#### 抢占式调度
- 场景一：一个进程执行时间太长了，是时候切换到另一个进程了，在时钟中断的时候，进程陷入内核态，返回的时候触发抢占
- 场景二：当一个进程被唤醒的时候，当被唤醒的进程优先级高于 CPU 上的当前进程，就会触发抢占
当发现当前进程应该被抢占，即运行的时间够多了，会将这个进程打上一个标签 TIF_NEED_RESCHED，等待它调用__schedule时重新进行调度
抢占时机：
1. 对于用户态的进程：
   1. 从系统调用中返回的那个时刻
   2. 从中断中返回的那个时刻
2. 对于内核态的进程：
   1. preempt enable调用__ schedule
   2. do_ IRQ后retint_ kernel调用__ schedule
### 进程创建
![2022102617444](/assets/2022102617444.jpeg)
- copy_process
  - dup_task_struct：复制线程的结构
  - copy_creds复制权限
  - sched_fork：设置调度相关的变量
  - copy_files：复制进程打开的文件信息
  - copy_fs：复制进程的目录信息
  - copy_sighand：维护信号处理函数
  - copy_mm：复制进程内存空间
  - 分配 pid，设置 tid，group_leader，并且建立进程之间的亲缘关系
- wake_up_new_task
  - 将进程的状态设置为 TASK_RUNNING
  - 将进程加入任务队列
  - 更新运行的统计量
  - 调度
### 线程创建与使用
![创建](/assets/20221020164025.webp)
![创建进程与创建线程](/assets/20221027145352.webp)
创建进程的话，调用的系统调用是 fork，在 copy_process 函数里面，会将五大结构 files_struct、fs_struct、sighand_struct、signal_struct、mm_struct 都复制一遍，从此父进程和子进程各用各的数据结构。而创建线程的话，调用的是系统调用 clone，在 copy_process 函数里面， 五大结构仅仅是引用计数加一，也即线程共享进程的数据结构
线程私有数据管理：
```c
// 创建一个 key，伴随着一个析构函数
// key 一旦被创建，所有线程都可以访问它，但各线程可根据自己的需要往 key 中填入不同的值
int pthread_key_create(pthread_key_t *key, void (*destructor)(void*))
// 设置 key 对应的 value
int pthread_setspecific(pthread_key_t key, const void *value)
// 获取值
void *pthread_getspecific(pthread_key_t key)
```
![同步与互斥](/assets/20221020164739.webp)
## 内存管理
Linux 将虚拟地址空间分为内核空间跟用户空间
内核里面，无论是从哪个进程进来的，看到的都是同一个内核空间
段表全称段描述符表（segment descriptors），放在全局描述符表 GDT（Global Descriptor Table）里面，所有的段的起始地址都是一样的
![Linux的页表](/assets/2022102717625.webp)
### 进程空间管理
在 struct mm_struct 里面，这些变量定义了代码、全局变量、堆、栈、内存映射区等区域的统计信息和位置
```c
unsigned long mmap_base;  /* base of mmap area */
unsigned long total_vm;    /* Total pages mapped */
unsigned long locked_vm;  /* Pages that have PG_mlocked set */
unsigned long pinned_vm;  /* Refcount permanently increased */
unsigned long data_vm;    /* VM_WRITE & ~VM_SHARED & ~VM_STACK */
unsigned long exec_vm;    /* VM_EXEC & ~VM_WRITE & ~VM_STACK */
unsigned long stack_vm;    /* VM_STACK */
unsigned long start_code, end_code, start_data, end_data;
unsigned long start_brk, brk, start_stack;
unsigned long arg_start, arg_end, env_start, env_end;
```
![32位](/assets/2022102717141.webp)
![64位](/assets/20221027171430.webp)
### 物理内存管理
- 如果有多个 CPU，那就有多个节点。每个节点用 struct pglist_data 表示
- 每个节点分为多个区域，每个区域用 struct zone 表示
- 每个区域分为多个页
- 伙伴系统将多个连续的页面作为一个大的内存块分配给上层
- kswapd 负责物理页面的换入换出
- Slub Allocator 将从伙伴系统申请的大内存块切成小块，分配给其他系统
![20221028154236](/assets/20221028154236.webp)
![伙伴系统](/assets/2022102816432.webp)
![20221028164523](/assets/20221028164523.webp)
### 用户态内存映射
内存映射不仅仅是物理内存和虚拟内存之间的映射，还包括将文件中的内容映射到虚拟内存空间
![2022103114517](/assets/2022103114517.webp)
### 内核态内存映射
- kmalloc和vmalloc是分配的是内核的内存,malloc分配的是用户的内存 
- kmalloc保证分配的内存在物理上是连续的,内存只有在要被DMA访问的时候才需要物理上连续，malloc和vmalloc保证的是在虚拟地址空间上的连续 