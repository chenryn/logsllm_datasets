# 五、服务与入口——与外界沟通
本章全面讨论了 Kubernetes 提供的允许应用相互通信以及与集群外资源通信的方法。您将了解 Kubernetes 服务资源及其所有可能的类型——集群 IP、节点端口、负载平衡器和外部名称——以及如何实现它们。最后，您将学习如何使用 Kubernetes 入口。
在本章中，我们将涵盖以下主题:
*   了解服务和集群域名系统
*   实现集群 IP
*   使用节点端口
*   设置负载平衡器服务
*   创建外部名称服务
*   配置入口
# 技术要求
为了运行本章中详细介绍的命令，您将需要一台支持`kubectl`命令行工具的计算机以及一个工作正常的 Kubernetes 集群。查看 [*第 1 章*](01.html#_idTextAnchor016)*与 Kubernetes*通讯，查看几种快速与 Kubernetes 一起起床跑步的方法，以及如何安装`kubectl`工具的说明。
本章使用的代码可以在本书的 GitHub 资源库中找到[https://GitHub . com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/chapter 5](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter5)。
# 了解服务和集群域名系统
在最后几章中，我们已经讨论了如何使用资源在 Kubernetes 上有效地运行应用，这些资源包括 Pods、Deployments 和 StatefulSets。然而，许多应用，如网络服务器，需要能够接受来自容器外部的网络请求。这些请求可能来自其他应用，也可能来自访问公共互联网的设备。
Kubernetes 提供了几种类型的资源来处理各种场景，允许集群内外的资源访问 Pods、Deployments 等上运行的应用。
这些分为两种主要的资源类型，服务和入口:
*   **服务**有几个子类型——集群 IP、节点端口和负载均衡器——通常用于提供从集群内部或外部对单个应用的简单访问。
*   **入口**是一个更高级的资源，它创建了一个控制器，负责基于路径名和主机名的路由到集群内运行的各种资源。入口通过使用规则将流量转发到服务来工作。您需要使用服务来使用入口。
在我们开始使用第一种类型的服务资源之前，让我们回顾一下 Kubernetes 如何在集群中处理 DNS。
## 集群 DNS
让我们从讨论 Kubernetes 中的哪些资源默认获得自己的 DNS 名称开始。Kubernetes 中的域名仅限于 Pods 和 Services。Pod DNS 名称包含几个构造为子域的部分。
在 Kubernetes 运行的 Pod 的典型**完全限定域名** ( **FQDN** )如下所示:
```
my-hostname.my-subdomain.my-namespace.svc.my-cluster-domain.example
```
让我们将其分解，从最右侧开始:
*   `my-cluster-domain.example`对应于集群应用编程接口本身配置的域名。根据用于设置群集的工具及其运行环境，这可以是外部域名或内部域名。
*   `svc`是一个即使在 Pod 域名中也会出现的部分——所以我们可以假设它会出现在那里。然而，正如您将很快看到的，您通常不会通过它们的域名系统访问 Pods 或服务。
*   `my-namespace`很不言自明。域名的这一部分将是您的 Pod 运行的任何名称空间。
*   `my-subdomain`对应于 Pod 规范中的`subdomain`字段。该字段完全是可选的。
*   最后，`my-hostname`将被设置为 Pod 元数据中 Pod 的名称。
这个域名系统名称允许集群中的其他资源访问特定的 Pod。这本身通常不是很有帮助，尤其是如果您使用的部署和状态集通常有多个 Pods。这就是服务进来的地方。
让我们看一下服务的域名记录:
```
my-svc.my-namespace.svc.cluster-domain.example
```
如您所见，它与 Pod DNS 名称非常相似，不同之处在于我们的命名空间左侧只有一个值——即服务名称(同样，与 Pod 一样，这是基于元数据名称生成的)。
如何处理这些域名的一个结果是，在一个名称空间中，您可以通过服务(或 Pod)名称和子域来访问服务或 Pod。
例如，以我们以前的服务域名为例。在`my-namespace`命名空间内，只需通过域名`my-svc`就可以访问该服务。从`my-namespace`命名空间之外的，您可以通过`my-svc.my-namespace`访问该服务。
既然我们已经了解了集群内域名系统是如何工作的，我们可以讨论如何将它转换为服务代理。
## 服务代理类型
尽可能简单地解释，服务提供了一个抽象，将请求转发给一个或多个运行应用的 Pods。
当创建一个服务时，我们定义一个选择器，告诉服务将请求转发到哪个 Pods。通过`kube-proxy`组件中的功能，当请求到达一个服务时，它们将被转发到与该服务的选择器相匹配的各个 Pods。
您可以在 Kubernetes 中使用三种可能的代理模式:
*   **用户空间代理模式**:自 Kubernetes 版本以来最老的代理模式。这种代理模式将以循环方式将请求转发给匹配的 Pod 。
*   **Iptables 代理模式**:1.1 起可用，1.2 起默认。这提供了比用户空间模式更低的开销，并且可以使用循环或随机选择。
*   **IPVS proxy mode**: The newest option, available since 1.8\. This proxy mode allows other load balancing options (not just Round Robin):
    a.一系列
    b.最少连接(最少数量的开放连接)
    c.源哈希
    d.目标哈希
    e.最短预期延迟
    f.从不排队
对于不熟悉的人来说，与此列表相关的是对什么是循环负载平衡的讨论。
循环负载平衡包括根据每个网络请求从头到尾循环遍历服务端点的潜在列表。下图显示了该流程的简化视图，它与服务背后的 Kubernetes Pods 相关:
![Figure 5.1 – A Service load-balancing to Pods](img/B14790_05_001.jpg)
图 5.1–Pods 的服务负载平衡
如您所见，服务交替向哪个 Pod 发送请求。第一个请求进入 A 舱，第二个进入 B 舱，第三个进入 C 舱，然后循环。现在我们知道了服务实际上是如何处理请求的，让我们回顾一下服务的主要类型，从集群 IP 开始。
# 实施集群 IP
集群 IP 是暴露在集群内部 IP 上的一种简单类型的服务。从群集外部无法访问此类型的服务。让我们看一下我们服务的 YAML 文件:
群集 ip 服务，yaml
```
apiVersion: v1
kind: Service
metadata:
  name: my-svc
Spec:
  type: ClusterIP
  selector:
    app: web-application
    environment: staging
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8080
```
与其他 Kubernetes 资源一样，我们的元数据块也有我们的`name`值。您可以从我们关于域名系统的讨论中回忆起，这个`name`值是您如何从集群中的其他地方访问您的服务。因此，集群 IP 对于只需要由集群中的其他 Pods 访问的服务来说是一个很好的选择。
接下来，我们有我们的`Spec`，它由三个主要部分组成:
*   首先，我们有我们的`type`，对应于我们服务的类型。由于默认类型是`ClusterIP`，如果您想要集群 IP 服务，您实际上不需要指定类型。
*   接下来，我们有我们的`selector`。我们的`selector`由键值对组成，这些键值对必须与所讨论的 Pods 的元数据中的标签相匹配。在这种情况下，我们的服务将寻找带有`app=web-application`和`environment=staging`的 Pods 来转发流量。
*   最后，我们有了我们的块，在那里我们可以将我们服务上的端口映射到我们 Pods 上的`targetPort`号。在这种情况下，我们服务上的端口`80`(HTTP 端口)将映射到我们应用 Pod 上的端口`8080`。我们的服务可以打开多个端口，但打开多个端口时需要填写`name`字段。
接下来，让我们深入回顾一下`protocol`选项，因为这些选项对我们讨论服务端口很重要。
## 协议
在我们的先前集群 IP 服务的情况下，我们选择`TCP`作为我们的协议。Kubernetes 目前(从 1.19 版本开始)支持多种协议:
*   **TCP**
*   UDP
*   **HTTP**
*   **代理**
*   **SCTP**
这是一个可能会出现新功能的领域，尤其是涉及 HTTP (L7)服务的领域。目前，跨环境或云提供商并不完全支持所有这些协议。
重要说明
更多信息，可以查看 Kubernetes 主文档([https://Kubernetes . io/docs/concepts/services-networking/service/](https://kubernetes.io/docs/concepts/services-networking/service/))了解 Service 协议的当前状态。
现在，我们已经讨论了带有集群 IP 的服务 YAMLs 的细节，我们可以进入下一种类型的服务——节点端口。
# 使用节点端口
节点端口是一种面向外部的服务类型，这意味着它实际上可以从集群外部访问。创建节点端口服务时，节点端口将自动创建并路由到同名的集群 IP 服务，因此您仍然可以从集群内部访问该服务。当负载平衡器服务不可行或不可能时，这使得节点端口成为外部访问应用的好选择。
节点端口听起来很像它的样子——这种类型的服务在集群中的每个节点上都打开一个端口，在这个端口上可以访问服务。默认情况下，该端口将位于`30000` - `32767`之间的范围内，并将在服务创建时自动链接。
以下是我们的 YAML 节点端口服务的外观:
nodeport 服务. yaml
```
apiVersion: v1
kind: Service
metadata:
  name: my-svc
Spec:
  type: NodePort
  selector:
    app: web-application
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8080
```
正如您所知，与集群 IP 服务的唯一区别是服务类型，但是，需要注意的是，我们在`ports`部分的目标端口`80`仅在访问自动创建的集群 IP 版本的服务时使用。从集群外部，我们需要查看生成的端口链接是什么，以访问我们的节点 IP 上的服务。
为此，我们可以使用以下命令创建我们的服务:
```
kubectl apply -f svc.yaml 
```
然后运行以下命令: