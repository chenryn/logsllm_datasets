# Querying for Queries: Indexes of Queries for Efficient and Expressive IT-PIR

**Authors:**  
Syed Mahbub Hafiz  
Indiana University, Computer Science Department, Bloomington, IN 47405, USA  
Email: [syedhafiz@indiana.edu](mailto:syedhafiz@indiana.edu)  

Ryan Henry  
Indiana University, Computer Science Department, Bloomington, IN 47405, USA  
Email: [rhenry@indiana.edu](mailto:rhenry@indiana.edu)  

## Abstract
We introduce a novel mechanism called "indexes of queries" to support efficient, expressive, and information-theoretically private single-round queries over multi-server Private Information Retrieval (PIR) databases. This approach decouples the way users construct their data requests from the physical layout of the remote data store, enabling users to fetch data using "contextual" queries that specify which data they seek, rather than "positional" queries that specify where the data reside. For example, an open-access eprint repository could use indexes of queries to allow researchers to fetch academic articles via PIR queries such as "this year’s 5 most cited papers about PIR" or "the 3 most recently posted papers about PIR." Our basic approach is compatible with any PIR protocol in the ubiquitous "vector-matrix" model, though our more sophisticated constructions leverage the algebraic properties of Goldberg’s IT-PIR protocol (Oakland 2007). We have implemented these techniques as an extension to Percy++, an open-source implementation of Goldberg’s IT-PIR protocol. Our experiments indicate that these new techniques can significantly improve both the utility and efficiency for private information retrievers and servers.

**Keywords:** Private information retrieval, expressive queries, batch codes, batch queries, ramp schemes, efficiency

## 1 Introduction
Private Information Retrieval (PIR) is a cryptographic technique that allows users to fetch records from untrusted and remote database servers without revealing which specific records are being accessed. This paper proposes a new method for conducting efficient, expressive, and information-theoretically private PIR queries over structured or semi-structured (i.e., tagged) data. Conceptually, our approach involves building a layer of indirection, realized using a special kind of sparse "database" we call an index of queries, atop existing PIR protocols.

Most existing PIR constructions require users to specify the records they wish to fetch via their indices, i.e., their physical locations in the data store. Our indexes of queries decouple the way users construct their data requests from the physical layout of the remote data store, allowing users to fetch data using "contextual" PIR queries that specify which data they seek, rather than "positional" PIR queries that specify where the data reside.

Database operators can create multiple distinct indexes of queries for a given dataset, providing different views through which users can interact with the underlying data. Each index of queries facilitates requests for "the best k matches for z," where the meaning of 'best', the upper bound on the number of matches to return (k), and the domain of possible search criteria (z) are all determined by the database operator and fixed for the particular index of queries. Such queries naturally arise in many online and mobile applications, where the query term (z) can reveal identifiable and potentially sensitive information about the user's habits, interests, and affiliations. Our proposed index-of-queries approach provides significant improvements in both efficiency and expressiveness compared to existing PIR techniques, offering intuitive APIs for safe, easy, and efficient interaction with the underlying PIR. We believe that indexes of queries will be a valuable building block in constructing efficient, privacy-preserving alternatives to many widely deployed products and services.

### Relationship with Prior Work
The research literature on PIR is extensive, with decades of intensive study by the cryptography, privacy, and theory communities. However, most existing work focuses on an oversimplified model where users request fixed-length blocks or individual bits of data by specifying their physical locations within the database. A few notable works extend the expressiveness of PIR queries to include keyword-based and simple SQL-based PIR queries. Although our techniques share some superficial similarities with these prior efforts, the problem we solve and the technical machinery we use are fundamentally new. Our approach offers several distinct advantages and a few limitations compared to existing techniques, and we view indexes of queries as complementary to, rather than an alternative to, existing techniques for expressive PIR.

### Motivation
The primary objective of this paper is to introduce and analyze indexes of queries as a new PIR technique. To motivate and ground our proposal, we briefly consider three natural use cases that showcase the immediate applicability of indexes of queries to the construction of privacy-respecting technologies:

1. **Maps and Location-Based Recommendation Systems:** A mapping service like Google Maps or a recommendation service like Yelp could use indexes of queries over a Points of Interest (POI) database to satisfy PIR requests such as "the 10 cafés nearest my current location" or "the 5 highest rated Italian restaurants in Manhattan."

2. **Social Networks and Microblogging Platforms:** A Twitter-like microblogging service could use indexes of queries over its database of tweets to satisfy PIR requests such as "the 10 most recent tweets by @realDonaldTrump" or "the 15 top trending tweets for hashtag #ccs17."

3. **Streaming Audio and Video Services:** Streaming media services like YouTube or Spotify could use indexes of queries over their respective media catalogs to satisfy PIR requests such as "the most recent episode of Last Week Tonight with John Oliver" or "the 10 songs topping the latest Billboard Hot 100."

Countless other use cases are possible, such as privately fetching emails from a remote inbox to hide users' email access patterns from a web mail service like Gmail or to build a next-generation Pynchon Gate for pseudonymous mail retrieval.

### Outline
The remainder of the paper is structured as follows:
- **Section 2** describes the abstract PIR framework in which all of our indexes-of-queries constructions reside.
- **Section 3** introduces simple indexes of queries, the most basic form of our construction.
- **Section 4** describes a more sophisticated construction for batch indexes of queries, which leverage ideas from coding theory to reduce costs and improve privacy.
- **Section 5** extends this idea to construct indexes of batch queries, allowing users to fetch a batch of related blocks using a single, fixed-length query.
- **Section 6** reviews prior work on expressive PIR queries and comments on the synergistic relationship between our work and those techniques.
- **Section 7** presents findings from our proof-of-concept implementation.
- **Section 8** concludes the paper.

## 2 The "Vector-Matrix" PIR Model
Our constructions are based on the ubiquitous vector-matrix model for PIR. In this model, the database is represented as an \( r \times s \) matrix \( D \) over a finite field \( F \), where each of the \( r \) rows is a fetchable unit of data (called a block in typical PIR parlance). Users encode requests for blocks as vectors from the standard basis for \( F^r \): a user desiring the \( i \)-th block (i.e., the \( i \)-th row of \( D \)) represents its request with the length-\( r \) vector \( \vec{e}_i \) having a 1 in its \( i \)-th coordinate and 0s elsewhere. The response to request \( \vec{e}_i \) is defined as the vector-matrix product \( \vec{e}_i \cdot D \), which equals the desired \( i \)-th row of \( D \). We refer to such vector-based requests as positional queries, highlighting that they require queriers to know the physical positions (i.e., the row numbers) within \( D \) of the blocks they seek to fetch.

PIR protocols in the literature achieve privacy in the vector-matrix model through various means. Of particular interest to us is the information-theoretically private (IT-PIR) approach based on linear secret sharing. Here, the user "shares" its query vector \( \vec{e}_i \) component-wise using a linear secret sharing scheme and sends each resulting vector of shares to a different server from a pool of non-colluding, but otherwise untrusted, servers who each hold a replica of \( D \). Upon receiving a share vector from the user, each server independently computes and returns to the user the product with \( D \) of the share vector it just received. As an immediate consequence of linearity, the servers' responses are each component-wise secret sharings of the vector-matrix product \( \vec{e}_i \cdot D \). Thus, to recover its requested block, the user performs a component-wise secret reconstruction over the responses it collects from the various servers.

### Goldberg’s IT-PIR Protocol
One natural and attractive choice for the secret sharing scheme, first advocated by Goldberg [13], is Shamir’s \((t + 1, \ell)\)-threshold scheme [25]. To share a basis vector \( \vec{e}_i \) with Shamir’s \((t + 1, \ell)\)-threshold scheme, the user selects pairwise distinct scalars \( x_1, \ldots, x_\ell \in F \setminus \{0\} \) and a uniform random vector of polynomials \( \vec{F} \in (F[x])^r \), subject to the conditions that (i) each polynomial in \( \vec{F} \) has degree at most \( t \), and (ii) a component-wise evaluation of \( \vec{F} \) at \( x = 0 \) gives \( \vec{e}_i \). The \( j \)-th server receives \((x_j, \vec{Q}_j)\), where \( \vec{Q}_j = \vec{F}(x_j) \) is a component-wise evaluation of \( \vec{F} \) at \( x_j \). We refer to a sequence \((x_1, \vec{Q}_1), \ldots, (x_\ell, \vec{Q}_\ell)\) of \(\ell > t\) such ordered pairs (computed from a common \( \vec{F} \) and pairwise distinct \( x_i \)) as a component-wise \((t + 1, \ell)\)-threshold sharing of \( \vec{e}_i \).

Shamir’s threshold scheme provides the necessary linearity and Byzantine robustness, owing to its relationship with Reed-Solomon codes [23] and related multiple-polynomial error-correcting codes [8]. The protocol obtained by using Shamir’s \((t + 1, \ell)\)-threshold scheme in the vector-matrix model realizes \( t \)-private \((m, \ell)\)-server IT-PIR for any \( m \geq t + 1 \): the user retrieves its desired block provided \( m \geq t + 1 \) out of \( \ell \) servers respond, yet no coalition of \( t \) or fewer malicious servers can use the share vectors its members receive to learn any information about which blocks the user has requested. (It is also \( v \)-Byzantine robust for any \( v \leq m - t - 2 \): the user retrieves its desired block even if up to \( m - t - 2 \) servers return incorrect responses [10].)

## 3 Querying for Queries
At the heart of our approach is a simple observation regarding the use of \((0,1)\)-matrices as PIR databases. We begin with the most simplistic version of our idea, restricting our attention to \( r \times r \) permutation matrices and building up to more general and interesting cases as the paper progresses.

Recall that an \( r \times r \) permutation matrix is an \( r \times r \) matrix having exactly one 1 in each row and each column, and 0s elsewhere (equivalently, it is a matrix obtained by permuting the rows of an \( r \times r \) identity matrix). Each such matrix represents a specific permutation on \( r \) elements: given a length-\( r \) vector \( \vec{v} \) and an \( r \times r \) permutation matrix \( \Pi \), the vector-matrix product \( \vec{v} \cdot \Pi \) yields a length-\( r \) vector with the same components as \( \vec{v} \), but in a permuted order.

For example, given \( \vec{v} = \langle a, b, c \rangle \) and a permutation matrix
\[
\Pi = \begin{pmatrix}
1 & 0 & 0 \\
0 & 0 & 1 \\
0 & 1 & 0
\end{pmatrix},
\]
it is easy to check that \( \vec{v} \cdot \Pi = \langle a, c, b \rangle \); i.e., \( \Pi \) permutes \( \vec{v} \) by transposing its second and third components.

The following observation, while obvious, is central to our approach:

**Observation 3.1.** If \( \vec{e} \in F^r \) is a standard basis vector and \( \Pi \in F^{r \times r} \) is a permutation matrix, then \( \vec{e} \cdot \Pi \) is a (possibly different) standard basis vector.

For example, given the above-defined \( 3 \times 3 \) permutation matrix for \( F^3 \), we have that \( \vec{e}_1 \cdot \Pi = \vec{e}_1 \), \( \vec{e}_2 \cdot \Pi = \vec{e}_3 \), and \( \vec{e}_3 \cdot \Pi = \vec{e}_2 \). In the context of IT-PIR, we are interested in the following immediate corollary to Observation 3.1:

**Corollary 3.2.** Let \( \vec{e} \in F^r \) be a standard basis vector and let \( \Pi \in F^{r \times r} \) be a permutation matrix. If \((x_1, \vec{Q}_1), \ldots, (x_\ell, \vec{Q}_\ell)\) is a component-wise \((t + 1, \ell)\)-threshold sharing of \( \vec{e} \), then \((x_1, \vec{Q}_1 \cdot \Pi), \ldots, (x_\ell, \vec{Q}_\ell \cdot \Pi)\) is a component-wise \((t + 1, \ell)\)-threshold sharing of a (possibly different) standard basis vector.