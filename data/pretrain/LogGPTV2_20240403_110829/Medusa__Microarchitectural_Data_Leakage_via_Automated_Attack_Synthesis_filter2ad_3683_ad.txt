mov. For shorter strings, or if fast-string operations are not
supported, the kernel falls back to a simple copy loop. We
reverse-engineered the kernel binary for kernel 5.0.0 shipped
with Ubuntu to analyze it for the usage of rep mov. We found
517 usages of rep mov in 374 functions in the binary. While
many of the functions are only used once in the setup phase
of the kernel (e.g., to copy and decompress parts of the kernel,
setup EFI and several devices, initialize the architecture, or
apply microcode updates), some of them are used regularly.
These functions include, amongst others, memcpy, memmove,
copy_from_user, and copy_to_user.
4.4 Performance Evaluation
We evaluated the performance of Medusa based on our proof-
of-concept implementations.
Environments. We evaluated all variants of Medusa on our
Intel CPUs mentioned before. All environments run Ubuntu
with a recent 5.0 kernel version. For CPUs vulnerable to
Meltdown, the KPTI software mitigation is enabled. We suc-
cessfully used all variants in all tested environments.
Performance. To evaluate the performance, we evaluate the
leakage rate as well as the false-positive rate when using
Medusa on a colluding victim. This provides an upper bound
for the leakage rates we can expect when using Medusa in
a side-channel attack where the victim is not colluding. We
started a victim application on one logical core, which leaks
a known value. On the sibling hyperthread, we ran Medusa
repeatedly for 2 s and recorded the correctly and incorrectly
leaked values. With variant I, we achieve an average leakage
rate of 0.19 kB/s (n = 100, σ ¯x = 0.0023), with a false-positive
rate of 47.7 % (n = 100, σ ¯x = 0.002). For variant II, the leakage
rate is on average 36.23 kB/s (n = 100, σ ¯x = 0.15) with a false-
positive rate of 0.559 % (n = 100, σ ¯x = 0.0005). Finally, with
variant III, we achieve an average leakage rate of 0.13 kB/s
(n = 100, σ ¯x = 0.0016) and a false-positive rate of 3.91 % (n
= 100, σ ¯x = 0.0017).
These numbers are based on our unoptimized proof-of-
concept implementation. Hence, these numbers cannot be
taken as upper bounds for the leakage rate (and false-positive
rate). As we discussed in Section 3.4, these leakages can be
improved by syntehsizing the implementation.
4.5 Cross-VM Covert Channel
To evaluate the leakage rate of Medusa in the cross-VM sce-
nario, we evaluate the performance of a cross-VM covert
channel. While the covert channel can also be mounted be-
tween user applications, we focus on the cross-VM case as
it is the most restricted scenario. For our setup, we use two
co-located VMs running on an Intel Core i7-8650U running
Ubuntu 18.04.3. Both VMs are running Ubuntu 18.04.3.
USENIX Association
29th USENIX Security Symposium    1437
Sender. For the sender, we use a rep mov instruction, which
continuously copies a 256-byte buffer containing the encoded
data. We redundantly encode every 32-bit data packet by re-
peating it 32 times inside the buffer. Every 32-bit data packet
consists of 8-bit data, 8-bit checksum, a constant preﬁx, and a
sequence number. The data-packet format resembles the setup
from Schwarz et al. [52] to make the results comparable.
Receiver. The receiving application leverages Medusa variant
III to leak victim data. Although the redundancy in the leaked
data reduces the speed, it increases the robustness, as any part
of the leaked buffer contains the data. Moreover, due to the
checksum, which we can already verify during the transient
execution [52], we do not receive any unrelated data, making
the receiver robust against any system noise.
Results. We observed an average transmission rate of
14.3 B/s (n = 1000, σ ¯x = 0.56) in the cross-VM scenario.
In all cases, the transmission was error-free. Due to the over-
head of the encoding scheme, the performance is signiﬁcantly
slower than the raw performance of Medusa variant III (cf.
Section 4.4). We expect that more sophisticated encoding
schemes, including error correction [43], can signiﬁcantly
improve the performance of the covert channel.
5 Attack Case Studies
In this section, we demonstrate the practicality of Medusa by
extracting an RSA key from OpenSSL and by leaking kernel
data transfers.
5.1 Leaking RSA Keys from OpenSSL
We use Medusa to demonstrate an attack on the latest
OpenSSL that successfully recovers an RSA key. We focus
on OpenSSL 1.1.1c, as it is both widely used, and it supports
countermeasures against traditional side-channel attacks, mak-
ing it a robust target. Note that while we quantiﬁed the oc-
currence of rep mov in popular cryptographic libraries (cf.
Section 4.3), we did not analyze further for potential security-
critical use cases. However, we expect that they are vulnerable
to similar attacks as well. The victim is a simple application
that leverages OpenSSL to load an RSA key from a ﬁle and
signs some data using this key. This application reﬂects real-
world command line or server applications that are spawned
upon user request to perform a cryptographic task, e.g., SSH
client/server or VPN client/server. In our attack, we can start
the application arbitrarily, but we do not control any inputs to
the victim application. This scenario, i.e., triggering the victim
application, is in line with previous research [10, 52, 58, 63].
Every time the application is started, it has to load the RSA
private key from the key ﬁle. The key ﬁle is in the PEM
format, which is a base64 encoded representation of the key
parameters. Hence, to use the actual key parameters, OpenSSL
ﬁrst decodes the key data using its internal base64 decoder.
Figure 5: Histogram and score of most likely 6-byte leak-
ages through AVX256-P3 with 10K observations collected in
100 runs (labeled by starting bytes). Six byte block leakages
at q(2) (q starting at byte 2), priexp(8) and priexp(32)
(RSA exponent d starting at bytes and 8 and 32) and dp(7)
(leak from dp = d mod p− 1 starting at byte 7) can be easily
identiﬁed based on the observation frequencies.
When compiling the library to optimize it for size, the base64
decoder uses rep mov for loading the base64-encoded data.
We attack exactly this rep mov sequence using Medusa to
leak the RSA parameters, which are then used to recover the
private key.
OpenSSL RSA keys in PEM format include both the de-
fault prime and exponents of the RSA alongside the precom-
puted parameters for the Chinese Remainder Theorem (CRT).
This includes modulus N, public exponent e, private exponent
d, prime numbers p and q, d mod (p−1), d mod (q−1) and
the coefﬁcient q−1 mod p. The size of the copy operation
during the execution of the rep mov instruction depends on
the key size. For example, for a 1024-bit RSA key, there are
5∗ 64 + 2∗ 128 = 576 bytes of key material to be copied. As
the key material also includes several bytes for the ASN.1
PEM metadata, the total amount of copied raw data is ap-
proximately 600 bytes. As the data is base64 encoded, which
always encodes 3 raw bytes as 4 bytes, the actual amount of
copied data is approximately 800 bytes. Hence, depending on
the size of the copy operation and the used attack, different
parts of this key may be leaked more often (cf. Figure 3).
We create a template based on the frequency of the leakage
of different parts of the RSA key parameters. In this attack, we
use variant II of Medusa to leak the data with the unaligned
store forwarding, which allows us to leak the entire content of
the common data bus. We also use the domino technique [52]
combined with the frequency of each observed value to build
a frequency template of recovered key parts. As discussed in
Section 4.1, the probability of leaking speciﬁc data depends
on the offset of the leaked data transmitted over the common
data bus. Hence, depending on which part of the data we want
to leak, we have to repeat Medusa between 10 000 and 20 000
times per key byte. In total, we run this experiment 100 times.
Our online phase of the attack takes at most 7 minutes on the
core i9-9900K CPU.
After stitching the bytes of every 8-byte block of base64-
encoded data using the Domino technique [52], we can create
1438    29th USENIX Security Symposium
USENIX Association
1,0002,0003,0004,00001020falsepriexp(8)q(2)dp(7)priexp(32)q(50)of more than a quarter (38/128 bytes) of N for the 1024-bit
RSA. Coppersmith’s attack is slightly adjusted to handle the
LSB/MSB split in the leaked data. We apply Coppersmith’s
lattice attack to recover small solutions to
f (x) = x + (qMSB244×8 + qLSB)(1/218×8 mod N) .
We used SageMath v8.4 with NTL for LLL to implement
the attack which takes a few second to successfully recover a
root x0 and the RSA factor: q = qMSB244×8 +x0218×8 +qLSB .
We attached scores by counting how many times the partial
leakages could be stitched together into an 8-byte block over
20 000 samples. The scores serve as a template which we use
to classify observations before trial by Coppersmith.
Block q(i)
Avg. Score
# Spurious
44
82
5
ymmX-P2
61
12
304
288
18
16
0
355
14
ymmX-P3
50
2
377
4157
0
1
ymmX-P4
56
8
401
3651
0
0
To obtain the statistics for the templates, we needed 20 000.
With more spurious blocks (selected as to have a score within
±20 % of the target block), we need to try more combinations.
On average, we need 58 000 trials and each triage of this
lattice attack takes 25 seconds. As a result, in the ofﬂine
phase of the attack, we use 400 CPU hours to perform these
trials which is achieved in a day on our 16-core desktop CPU.
Boneh, Durfee, Frankel (BDF). While the Coppersmith and
partial information of the q was sufﬁcient to recover the RSA
key, we discuss an alternative attack for potential other tem-
plates. The BDF attack [8] recovers RSA factors given the
LSB quarter of the secret exponent d bits when e is small
enough to be exhaustively tested. The attack iterates the fol-
lowing steps for each k ∈ [1,e] until a solution is found:
1. Form a polynomial equation:
f (x) = kx2 +(ed0−k(N +1)−1)x−kN = 0
Here n = log2(N) and d0 = d (mod 2n/4).
(mod 2n/4) .
2. Find solutions to f (x). Due to the special structure of
the modulus, the equation is efﬁciently solved to recover
at most 2t+1 solutions, where t is the largest power of 2
that divides k. For correctly chosen k the solution of f (x)
yields p (or q) modulo 2n/4.
3. Check each recovered solution by taking it as the (candi-
date) LSB of p or q and running Coppersmith to see if we
obtain the RSA factors.
The algorithm runtime is O(elog(e)) Coppersmith iterations.
A Small but Effective Optimization. Our target e = 216 + 1
is exhaustible. However, we can do much better since we have
some LSB bytes of p and q. We can use these bytes to check
the recovered candidate LSBs of p or q and take a shortcut
omitting costly Step 3 if there is no match. With a few bytes
of leakage, we can reduce the complexity from O(elog(e))
to only O(log(e)) Coppersmith evaluations.
For the 1024-bit case, we exploit the leakage observed
on d (priexp) with 6-byte leakages starting at bytes:
2,8,14,16,26 which gives us 27 LSB of the required 32 bytes
Figure 6: Histogram and score of most likely 6-byte leakages
through AVX256-P4 (similar experiment as Figure 5). Block
leakages at q(8), q(32),q(56) (q starting at bytes 8, 32, 56),
priexp(14), priexp(39) and priexp(86), dp(13) (leak
from dp starting at byte 13), p(51) (p starting at byte 51) can
be identiﬁed based on the block frequencies.
a template based on the frequency of an observed block that
tells us which parts of the key material are leaked. Note that
each 8-bytes block of base64 encoded key data holds 6-bytes
of valuable raw key material. Figure 5 and Figure 6 show
the frequency of each section leaked through different part
of an AVX-256 register. Note that in the top histogram we
see consistent strong leakage of 6-byte blocks in priexp (the
RSA key d), starting at byte locations 14,38,86, and 110 as
well as strong leakage in q starting at locations 8,32,56.
5.1.1 Recovering full RSA keys using Lattice Attacks
These leakages give us only partial information on the
RSA secrets p, q, d (privexp in the OpenSSL implemen-
tation), and d mod (p− 1), d mod (q− 1) and the coefﬁcient
q−1 mod p are far from yielding the full secrets. However,
there has been signiﬁcant progress in recovering keys from
RSA instantiated with small or partially exposed messages,
or decryption keys. Coppersmith introduced a technique for
ﬁnding small roots of polynomial equations is to reduce the
problem of ﬁnding roots of a polynomial f (x) over Zp [13],
which may be used to recover RSA factors, if the least or
most-signiﬁcant half of the bits of p or q are known. Boneh,
Durfee, and Frankel proposed a technique to recover the RSA
secret and moduli p and q if a quarter of the least or most
signiﬁcant bits of d are leaked, and when e is small enough
to be reachable via exhaustive testing [8]. Later Boneh and
Durfee [7] presented a technique that recovers RSA fac-
tors with d < N0.292 without any conditions on e. For an
overview, see May [44], and the more recent Takayasu and
Kunihiro et al. [54]. Here we focus on two attacks which ﬁt
our leakage proﬁle:
Coppersmith. We use the Coppersmith attack to recover the
RSA factor q. We combine partial leakages of q at bytes 8,
56 (from P4), and 2, 50 (from P3) and 0, 61, 12, 44 (from P2)
to obtain a leakage in q: 18-bytes LSB (bytes 0-17) and 20-
bytes MSB (bytes 44-63). This gives us a combined leakage
USENIX Association
29th USENIX Security Symposium    1439
01,0002,0003,0004,0005,0006,00001020priexp(62)falsedp(13)priexp(86)priexp(38)priexp(14)q(56)p(51)q(8)q(32)priexp(110)of d. We are missing 5 bytes which are now exhaustible. The
attack requires about 180 trials to cope with the spurious
blocks.
Block d(i)
Avg. Score
# Spurious
ymmX-P2
ymmX-P3
ymmX-P4
2
116
9
16
104
8
26
138
0
8
739
1
14
724
0
Scaling the Attack to 2048-bit RSA. The 1024-bit RSA at-
tack described above recovered the secret key using a simple
univariate formulation via Coppersmith’s technique since a
quarter of contiguous secret bits were available. For a 2048-
bit key, this is more challenging, since we can not obtain 64
contiguous bytes of q, p or d through the leakage channel.
However, we have observed more leakage from the higher
blocks of d and non-contiguous blocks of p and q. The main
idea is to form multivariate expressions of the form fi(x,y)
using the known parts of d, p, and q where x and y represent
the unknown parts of p and q. Then we apply lattice reduction
to reduce the size of the coefﬁcients. A resultant computation
applied on the reduced multivariate polynomials yields a uni-
variate polynomial, whose solution yields the unknown parts
of p or q. The success probability for the attack depends on the
amount of leakage and the precise lattice formulation. While
plausible, this approach is beyond the scope of this paper. For
further information on multivariate analysis see [6, 15].
5.2 Leaking Kernel Data Transfers
As discussed in Section 4.3, the Linux kernel uses rep mov
for the internal data-transfer functions, including memcpy,
memmove, copy_from_user, and copy_to_user.
Root Password Hash. As described by Van Schaik et al. [58],
the unprivileged passwd -S command reads the contents of
the user-inaccessible /etc/shadow ﬁle containing the pass-
word hashes of local users. They managed to leak 21 B in 24 h
using the RIDL attack. Schwarz [49] showed that the same
attack is more efﬁcient with ZombieLoad by leaking 16 B in
1.25 min. With TAA [52], the entire hash can even be leaked
within seconds [14].
We used Medusa to reproduced this attack. While we can
also leak the root password hash with Medusa, the leakage rate
depends on the part of the password hash that is leaked. Due
to the leakage pattern of Medusa, we always have blocks of
the hash that can be leaked within 1 s while for other blocks, it
takes up to 1 h, which is comparable to the proofs-of-concept
shown for ZombieLoad and RIDL.
File I/O. Generally, Medusa can leak any data transfer be-
tween the kernel and the userspace, such as the contents of
ﬁles when reading or writing them. We veriﬁed that we can
leak the content by using a ﬁle with known contents. We
continuously read the ﬁle from one application running on
one hyperthread, while running Medusa in a different user-
space application on the sibling hyperthread. As every ﬁle
read is handled by the kernel via the read syscall, the entire
ﬁle content is copied from the kernel to the user-space victim
application. On average, we leaked 12.3 B/s of correct values
from the ﬁle.
Another case of data transfer is swapping. If application
pages are copied to or from the swap device, the data can
potentially also be leaked using Medusa.
6 Countermeasures
As Medusa is a variant of ZombieLoad, the same countermea-
sures are applicable for both Medusa and ZombieLoad.
Hyperthreading. While Intel claims that hyperthreading can
be enabled if group scheduling is implemented [24], we are
not aware of any commodity operating system implement-
ing group scheduling. Hence, only disabling hyperthreading
would entirely prevent cross-hyperthread attacks.
Flushing Buffers. To prevent the exploitation of MDS at-
tacks, Intel released a microcode update that retroﬁts the VERW
instruction with the side effect that it clears the store buffer,
ﬁll buffer, and load ports. While this prevents RIDL [58],
Schwarz et al. [52] have shown that ZombieLoad can cir-
cumvent this mitigation. The only effective solution is to
additionally ﬂush the L1 data cache as well. However, ﬂush-
ing the store buffer, ﬁll buffer, load ports, and L1 data cache
on every privilege-level switch, e.g., context switch, incurs a
non-negligible performance overhead.
New CPUs. Although new CPUs are MDS resistant, there
are still variants of ZombieLoad which work on these CPUs
by leveraging microcode assists caused by Intel TSX. Hence,
even on MDS resistant CPUs, Intel TSX has to be disabled to
ensure that no ZombieLoad variant, including Medusa, can
leak any data. While Intel TSX cannot be disabled directly,
a workaround is to ensure that all TSX transactions abort
immediately by setting the MSR_TSX_FORCE_ABORT model-
speciﬁc register. As a consequence, Intel TSX cannot be used
for fault suppression any more.
7 Discussion
Other CPU Vendors. In this paper, we mainly focussed on
Intel CPUs. While Medusa is a vulnerability we only dis-
covered on Intel CPUs, the general approach of Transynther
applies to different CPUs as well. We also used Transynther
on AMD (cf. Section 3.4.2), showing that AMD also for-
wards data after certain exceptions, which is a requirement
for Meltdown-type attacks. However, we could not ﬁnd any
variant on AMD that leaks data across a security boundary. Fu-
ture work has to manually investigate whether the exception
bypasses on AMD can lead to security vulnerabilities.
Transynther can also be applied to other microarchitectures,
such as ARM or RISC-V. Although the approach is the same,
1440    29th USENIX Security Symposium
USENIX Association
porting Transynther to a different instruction set requires a
new backend that generates assembly code for the targeted
architecture. As our tool is open source, we encourage re-
searchers to port Transynther to different architectures and
analyze whether they suffer from similar vulnerabilities.
Non-Meltdown-type Vulnerabilities. The approach of Tran-
synther is designed to automatically ﬁnd Meltdown-type vul-
nerabilities. Other transient-execution attacks, such as Spectre-
type attacks, are not in scope for Transynther. The reason is
that Spectre attacks exploit the intentional, well-understood
behavior of branch predictors. Every branch predictor can
likely be abused for Spectre attacks [11], and the types of
branch predictors are usually documented for every microar-
chitecture. Hence, we do not expect that Transynther would
detect any new Spectre variants even when it is adapted for
ﬁnding such attacks.
Meltdown-type attacks, however, exploit CPU vulnerabili-
ties that can be triggered in multiple different ways. Hence,
as this paper has also shown with Medusa, Transynther can
discover new variants, and can potentially also help to ﬁnd
Meltdown-type attacks on different platforms.
In related work, Xiao et al. [62] analyzes both Meltdown-
and Spectre-type vulnerabilities in terms of speculation win-
dow, triggers, and different covert channels. They also rely
on templates to build code that is analyzed for vulnerabilities.
Starting Set Dependency. As most fuzzers, Transynther re-
lies on a starting set for creating more test cases. The differ-
ence to software fuzzers is that Transynther does not have
ﬁne-grained feedback, such as e.g., code coverage. While tra-
ditional fuzzers can create test cases based on mutation and
feedback, Transynther is mostly limited to random mutations.
Hence, the better the starting set, i.e., the more different vari-
ants are covered, the better the efﬁciency of Transynther. As
with any fuzzer, there is no guarantee that Transynther ﬁnds
all possible vulnerabilities.
Fuzzing-based Approaches. Fuzzing is a well-established
technique for ﬁnding vulnerabilities across trust boundaries [9,
12, 16, 32, 33, 36, 41, 45, 51, 59, 60]. These approaches can
usually rely on a well-deﬁned interface, e.g., system calls.
SpecFuzz investigated the use of fuzzing for ﬁnding Spectre
gadgets [47]. They apply fuzzing techniques to ﬁnd Spectre-
PHT (also known as Spectre Variant 1) gadgets in existing
code. However, they do not try to ﬁnd new attack variants. To
the best of our knowledge, with Transynther, we are the ﬁrst to
show that fuzzing can be applied to detect microarchitectural
vulnerabilities.
8 Conclusion
In this work, we performed an in-depth analysis of MDS at-
tacks. We introduced a fuzzing-based analysis tool, named
Transynther, which mutates the basic block of existing vari-
ants of Meltdown attacks to generate new subvariants. We
analyzed a number of CPUs using Transynther to better un-
derstand variants of these attacks and found new variants of
MDS that only target fast string copies. Based on our ﬁndings,
we proposed a new attack named Medusa, which leaks data
from WC memory operations. Since Medusa only attacks
speciﬁc operations, it is more targeted. To demonstrate the
effectiveness of Medusa, we ran several case studies: We re-
covered full RSA keys from OpenSSL by pooling leakages
observed during key decoding, ampliﬁed using lattice tech-
niques. Further, using Medusa we demonstrated how one can
recover information from kernel data transfers, or leak the
content of ﬁles.