






Power Resets [13]
TTT-Speciﬁc
N/A†
SSCs




*

Bomberman
TTT-Speciﬁc
Dynamic
SSCs






XXX: Coalesced or Distributed SSC — XXX: Uniform or Non-uniform Increment Value — XXX: Periodic or Sporadic Increment Event
† Power Resets [13] are a runtime mechanism, not a veriﬁcation technique.
* Power resets only defend against homogeneous distributed TTTs compromised entirely of CUP sub-components.
we provide a security analysis of each defense, describing how
and what TTT variants are defeated.
increment event,
UCI. UCI [10] is a Trojan-agnostic dynamic veriﬁcation
tool that searches HDL for intermediate combinational logic
that does not affect signal values from source to sink dur-
ing veriﬁcation simulations. Since TTT trigger components—
SSCs,
increment amount—remain active
during simulation, UCI would not ﬂag them as suspicious.
However, TTTs also have a comparator that checks if the
SSC’s count has reached its activation state. Since the output
of this comparator—the trigger activation signal (Fig. 1)—
would remain unchanged during simulation, UCI would ﬂag
it. Unfortunately, as Sturton et al. show [14], having two
activation signals—e.g., a distributed TTT—that each express
their activation states under simulation, but never simulta-
neously, would evade UCI. As we show in our E2E TTT
below (§VI-C2),
this can be achieved using a distributed
SSC constructed of fast and slow (coalesced) counters that
wrap around (repeat values individually). Since the overall
distributed SSC would not violate TTT properties (§IV-A),
it would still be ﬂagged by Bomberman.
FANCI. FANCI [8] is a Trojan-agnostic static veriﬁcation
framework that locates potential Trojan logic by computing
“control values” for inputs to intermediate combinational logic
in a design. Inputs with low control values are weakly-
likely Trojan comparator inputs
affecting [8], and most
(Fig. 1) that indicate the current state of the trigger, e.g. a
speciﬁc time counter value. Control values can be approxi-
mated by randomly sampling the truth tables of intermediate
logic across the design. Unfortunately, Zhang et al. construct a
systematic framework—DeTrust [15]—that distributes trigger
comparator inputs across layers of sequential logic to increase
their control values, hiding them from FANCI. Since any
TTT variant can be used with DeTrust-transformed comparator
logic, FANCI cannot identify any TTTs.
VeriTrust. Similar to UCI, VeriTrust [9] is a Trojan-
agnostic dynamic veriﬁcation framework that locates (unused)
Trojan trigger activation signals (Fig. 1) in combinational
logic cones that drive sequential logic. However, unlike UCI,
VeriTrust locates activation signals by locating unused in-
puts—not logic—to the victim logic encapsulating a Trojan’s
payload. This semantic difference enables VeriTrust to detect
Trojans irrespective of their implementations. Unfortunately,
using their DeTrust framework [15], Zhang et al. illustrate
how splitting the activation signals of any TTT design across
multiple combinational logic cones, separated by layers of
sequential logic, evades VeriTrust.
WordRev. WordRev [35], [36] is TTT-speciﬁc static anal-
ysis tool that identiﬁes SSCs that behave like counters. Wor-
dRev leverages the notion that the carry bit propagates from
the least-signiﬁcant position to the most-signiﬁcant position
in counter registers. Thus, the increment
logic connecting
SSCs must be conﬁgured to allow such propagation. However,
this operating assumption causes WordRev to miss distributed
TTTs, and TTTs with non-uniform increment values.
Power Resets. Waksman et al. [13] suggest intermittent
power resets as a TTT-speciﬁc defense. Intermittent power re-
sets prevent potential TTT SSCs from reaching their activation
states. This approach requires formally verifying/validating
the correct operation of the DUT for a set amount of time,
denoted the validation epoch. Once they guarantee no TTT
is triggered within the validation epoch, the chip can safely
operate as long as its power is cycled in time intervals less
than the validation epoch. Unfortunately, as Imeson et al. [22]
point out, this type of defense only works against TTTs with
uniform increment values and periodic increment events, as it
is impractical to formally verify non-deterministic (sporadic
and/or non-uniform) designs.
2) End-to-End Supervisor Transition TTT: Using the ap-
proaches for defeating each Trojan-agnostic and TTT-speciﬁc
defense described above [14], [15], we systematically con-
struct an E2E TTT (List. 2) that evades all defenses, except
Bomberman. Our Trojan provides a supervisor transition
foothold that enables attackers to bypass system authentication
mechanisms and obtain root-level privileges.
Attack Target. Our TTT (List. 2) is based on a supervisor
transition foothold Trojan ﬁrst described by Sturton et al.
in [14]. This Trojan targets a microprocessor circuit, and
enables an attacker to arbitrarily escalate the privilege mode
of the processor to supervisor mode. In List. 1, we provide
a simpliﬁed version of the un-attacked processor HDL that
updates the processor’s supervisor mode register. Under non-
the supervisor signal—super—is either
trigger conditions,
updated via an input signal—in.super—on the following
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:57 UTC from IEEE Xplore.  Restrictions apply. 
979
if the holdn bit
is 1 (holdn is active low),
clock edge,
otherwise the super signal holds the same value from the
previous clock period. Additionally, the super signal is reset
to 1 (supervisor mode) when the processor is reset via the
active-low resetn signal.
Listing 1. Unmodiﬁed HDL of the processor’s supervisor-mode update logic.
1
2
3
always @(posedge clk) begin
super <= ∼resetn | (∼holdn & super) | (holdn & in.super) ;
end
Listing 2. Verilog HDL of a TTT that evades all existing design-time
Trojan detection techniques—including UCI [10], FANCI [8], VeriTrust [9],
WordRev [35], [36], and power resets [13]—except Bomberman. This TTT
alters logic (List. 1) that updates the supervisor-mode bit register.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
// Distributed TTT SSCs to evade UCI
reg [15:0] count 1;
reg [15:0] count 2;
// Assume reset to 16’h0000
// Assume reset to 16’h0000
// TTT Trigger Deployment Signal
reg [6:0] deploy 1;
reg [6:0] deploy 2;
// Assume reset to 7’b0000000
// Assume reset to 7’b0000000
to defeat WordRev and Power Resets
// Update SSCs non−uniformly and sporadically
//
always @posedge(pageFault) begin
count 1 <= count 1 + PC[3:0];
count 2 <= count 2 + PC[5:2];
end
trigger
// Distribute
// across layers of sequential
always @(posedge clk) begin
activation input signal (count 1)
logic to defeat FANCI.
if (count 1[3:0] == ‘DEPLOY 0)
deploy 1[0] <= 1;
else
if (count 1[15:12] == ‘DEPLOY 3)
deploy 1[0] <= 0;
...
deploy 1[3] <= 1;
...
...
deploy 1[3] <= 0;
else
end
always @(posedge clk) begin
if (deploy 1[2:0] == 2’b11)
deploy 1[4] <= 1;
else deploy 1[4] <= 0;
if (deploy 1[3:2] == 2’b11)
deploy 1[5] <= 1;
else deploy 1[5] <= 0;
if (deploy 1[5:4] == 2’b11)
deploy 1[6] <= 1;
else deploy 1[6] <= 0;
end
// Repeat lines 16−−40, but with count 2 and deploy 2
activation signals (deploy 1 and deploy 2)
// Hide trigger
inside fan−in logic cone of three additional
//
//
(h 1, h 2, and h 3) to evade VeriTrust . Note, holdn prev
// and in . super prev are values of holdn and in . super from
// previous clock cycles , added to maintain timing .
always @(posedge clk) begin
signals
holdn <= holdn prev;
in . super <= in.super prev;
h 1 <= deploy 1[6];
h 2 <= ∼deploy 2[6] & holdn prev & in.super prev |
h 3 <= (∼deploy 1[6] | deploy 2[6]) & (holdn prev &
deploy 2[6];
in.super prev) ;
55
56
57
58
59
end
always @(posedge clk) begin
super <= ∼resetn | (∼holdn & super) | (h 1 & h 2) | h 3;
end
Stealth Characteristics. We systematically construct our
TTT (shown in List. 2) with several characteristics that enable
it to evade all existing Trojan defenses except Bomberman.
First, armed with Sturton et al.’s insights [14], we deploy a
distributed SSC architecture to evade detection by UCI. Dis-
tributed SSCs enable the TTT’s activation signals to bypass
UCI since each coalesced SSC sub-component—count1 and
count2—can express their individual triggered states during
veriﬁcation testing–deﬁned by the ‘DEP LOYX constants—
while the overall distributed SSC does not express its triggered
state. Next, we increment our TTT’s SSCs non-uniformly,
to evade WordRev [35], [36] and power resets [13]. Lastly, we
deploy DeTrust transformations [15] on the Trojan’s: 1) com-
parator inputs (count1 and count2)—splitting them amongst
several layers of sequential logic—and 2) trigger activation
signals (deploy1[6] and deploy2[6])—hiding them inside a
logic cone of three additional signals: h 1, h 2, and h 3. This
hides our TTT from FANCI [8] and VeriTrust [9], respectively.
Since Bomberman: 1) is TTT-speciﬁc, 2) considers distributed
SSC architectures, and 3) is agnostic of how or when SSCs are
incremented, it is the only defense that can detect this TTT.
D. Run Time and Complexity Analysis
Since Bomberman is a dynamic veriﬁcation framework,
its run time is roughly proportional to the size of the DUT
(number of SSCs and wires, see Fig. 7) and simulation time
(number of time steps). Across all designs we study,
the
run time of Bomberman did not exceed 11 minutes on a
commodity laptop. Compared with other Trojan veriﬁcation
frameworks [8]–[10], [35], [36], Bomberman is two orders
of magnitude faster when analyzing the same circuits; this is
due, in part, to Bomberman’s targeted nature. As we show in
Tab. II, Bomberman’s run time on real-world hardware designs
scales proportionally with respect to the number of SSCs and
number simulation test cases.
BOMBERMAN SCALABILITY COMPARISON FOR CIRCUIT DFGS WITH n
SIGNALS SIMULATED OVER c CLOCK CYCLES.
TABLE II
Framework
Bomberman
FANCI [8]
UCI [10]
VeriTrust [9]
WordRev [35]
Analysis
Type
Dynamic
Static
Dynamic
Dynamic
Static
Complexity
Time
O(nc)
O(n)
O(n2c)
O(n2n)
Complexity
Space
O(nc)
O(n)
O(nc)
O(nc)
Not Reported
Not Reported
Average
Run Time
1x Minutes
10x Hours
1x Hours
10x Hours
1x Hours
The Bomberman framework consists of two main compo-
nents that contribute to its overall time and space complexities
(Fig. 5): 1) SSC Enumeration, and 2) SSC Classiﬁcation.3
Below, we provide an in-depth complexity analysis for each
stage, and Bomberman as a whole.
3In our experiments, we did not observe the DFG Generation stage to be
computationally dominant.
980
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:57 UTC from IEEE Xplore.  Restrictions apply. 
2) SSC Classiﬁcation:
In the SSC Classiﬁcation stage,
Bomberman analyzes veriﬁcation simulation traces to deter-
mine if an SSC is suspicious—potentially part of a TTT
(Algo. 1). For a circuit DFG with n nodes (each node repre-
senting a signal), and c simulation clock cycles, the asymptotic
time and space complexities are both O(nc). This accounts
for tracking the values expressed by each SSC over each
simulation clock cycle. Since the time and space complexities
of the SSC Classiﬁcation stage dominate, compared with the
SSC Enumeration stage, they represent the time and space
complexities for the entire Bomberman framework.
VII. DISCUSSION
1) Test Vector Selection: During the AES and UART
false positive evaluations, we witnessed a plateauing reduc-
tion in false positives after executing initial veriﬁcation tests
(Figs. 8A–B). Upon a closer look, we ﬁnd this initial reduc-
tion is a result of test vectors exhaustively exercising small
registers—1- to 16-bit—violating Property 2 in §IV-A. For
large registers—32-bit and larger—cycling through all register
values is not computationally feasible. Thus, to quickly reduce
the number of false positives across both designs, we deploy
a repeat testing strategy (§VI-B). For most circuit designs,
we observe: the state of most benign SSCs is a function of
design inputs. By repeating tests, we induce benign SSCs to
repeat a value, violating Property 1 (§IV-A).
How do we know which test cases to repeat in order to
induce repeated values in benign SSCs? For designs with
unstructured, data-path-only inputs—like the AES design—
repeating any test vector will sufﬁce. Alternatively, for de-
signs that require structured control-path inputs, inducing
repeated SSC values requires activating the same control-
path multiple times while also repeating data-path inputs.
Determining which control-paths to activate, i.e., control-paths