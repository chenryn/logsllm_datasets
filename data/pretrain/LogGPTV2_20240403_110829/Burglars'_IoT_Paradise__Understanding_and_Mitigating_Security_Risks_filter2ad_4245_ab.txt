### Further Implementation of End-to-End Attacks

We further implemented end-to-end attacks on all the discovered vulnerabilities, with demonstrations posted online [12]. It is crucial to note that all experiments were conducted ethically: we only targeted our own devices and never jeopardized cloud services, platforms, or other users. Additionally, we reported all findings to the manufacturers and IoT cloud providers, sharing our proof-of-concept (PoC) attacks with them and assisting in enhancing their security measures. This effort was well-received, and we received a total of $6,700 from the vendors' bug bounty programs.

### Unauthorized MQTT Messages

As previously mentioned, MQTT was not designed for the diverse scenarios of IoT communication. A notable example is device sharing and revocation, where a temporary user (e.g., hotel guest, Airbnb tenant, babysitter) is granted limited access to an IoT device but should not be able to obtain information about or interfere with the activities of previous or future users. This adversarial situation is not addressed by the MQTT protocol. Without a deep understanding of this problem, current IoT cloud platforms cannot handle it securely. Below, we present new security risks discovered due to the insecure management of MQTT messages, specifically Will messages and Retained messages, which can lead to unauthorized control of IoT devices.

#### Unauthorized Will Message

According to the MQTT specification, a client can register a special Will message with the broker for a specific topic. If the client disconnects unexpectedly (i.e., without sending a DISCONNECT message), the broker will publish the Will message to all subscribed clients of the topic, allowing them to take appropriate actions. Like other MQTT messages, a Will message can include either control commands or text.

However, this exception handling feature was not intended for use in adversarial environments where access rights are transferred between users. In such cases, a malicious ex-user can register a Will message to trigger it later when they no longer have access, stealthily issuing commands while the device is serving other users. For instance, a babysitter or repairman who once had access to a smart lock could open the door for others later. Specifically, we found that even after the attacker's privilege on a device expires, preventing direct communication with the device based on the owner's policy, the attacker's Will message will still be issued as soon as their client disconnects from the broker. This allows the attacker to choose the right time to go offline and issue commands, such as unlocking a door.

This issue can be mitigated by removing the Will message registration when a user's access is revoked. However, this is complex because the IoT cloud platform must manage the protocol's state machine to handle revocation, which has not been considered in leading IoT clouds we studied.

#### Attack through Will Message

We implemented a PoC attack exploiting Will messages on the AWS IoT cloud using our iRobot Roomba 690 (Figure 3). We wrote a script to register a Will message including a command (Command:Start) to start the device. When a victim user (e.g., a subsequent hotel guest) reset the device and used the robot, and our client's privilege was completely revoked, we showed that the commands in the Will message were still delivered and invoked the robot when our script went offline. The attack can be amplified by using multiple "malicious" clients to register multiple Will messages, each independently launching an attack.

The same problem has been confirmed on the IoT clouds of AWS, IBM, Baidu, Tuya Smart, etc. Given the lack of proper security checks and missing security advisories for device manufacturers, this issue potentially affects all devices on these clouds, such as door/window locks, video doorbells, cardiac devices, security cameras, and fire detectors, which are highly security-, privacy-, and safety-sensitive.

#### Discussion

Through discussions with the MQTT Technical Committee and an inspection of the MQTT specification, we found that the problem stems from the contract-like property of Will messages: a registered Will message on a topic is entitled to be delivered to all subscribed clients, regardless of whether it violates the security requirements of subscribing clients. This contract assumes a more trusted environment than the adversarial one in IoT communication. Our findings indicate that IoT vendors need to understand this gap and extend the protocol to address its security implications.

#### Unauthorized Retained Message

When an MQTT client publishes a message to a topic with no subscribers, the message is discarded by the broker. To address this, the client can register a Retained message, which allows the broker to keep the last Retained message and publish it immediately to any future subscribers. Similar to Will messages, this feature was not designed for adversarial environments and can be exploited by a malicious ex-user to stealthily command a device they no longer have access to. For example, a malicious ex-user of a device in an Airbnb room can publish a Retained message with arbitrary control commands (e.g., open the door at 3 AM) to the associated topic of a smart lock. Later, when the ex-user loses access, the lock will subscribe to the old topic again and receive the unlock command, potentially allowing burglars to enter.

#### PoC Attack

We performed PoC attacks and confirmed that the IoT cloud of Baidu and the Eclipse Mosquitto (a popular open-source MQTT broker) were vulnerable to Retained message attacks. On both platforms, we ran a "malicious" client to register a Retained message, then revoked its permission. When a "victim" client subscribed to the same topic, both platforms forwarded the attack messages, leading to unauthorized control of the device.

#### Responsible Disclosure

We reported the problems to affected parties, including AWS IoT, IBM, Baidu, Tuya Smart, and Eclipse Mosquitto, all of whom acknowledged their importance. AWS held an online meeting with us to discuss possible solutions to mitigate the risks to IoT users.

### Faults in Managing MQTT Sessions

MQTT communication is established through sessions between the client and the broker server. When a client's state changes (e.g., access to a device is revoked), the session states should be updated, especially for security-sensitive ones like subscription and lifecycle states. However, this expected security property is often not enforced on real-world IoT platforms.

#### Non-updated Session Subscription State

The MQTT specification suggests that the server authorizes client actions. IoT platforms typically enforce a security policy to govern client operations. For example, when a device is reset to remove all privileges of an ex-user, the ex-user's client should no longer be permitted to subscribe to the device's topic. However, we found that the MQTT specification provides no guidance on updating session states in response to privilege changes. As a result, session management in real-world IoT systems often has privacy-critical defects. Specifically, even after a user loses the privilege to subscribe to a topic, the broker continues to deliver messages to the client through the established session, enabling a malicious ex-user to continuously receive all messages generated by the device for the current user (victim).

#### Non-updated Session Lifecycle State

The MQTT client in the IoT environment can represent two roles: the device (authenticated through a device's credential) and the user (authenticated through a user's credential). These roles are managed differently for security purposes: the device is treated as a resource to access, and the user is the principal to authenticate and authorize. This difference has security implications in device sharing and revocation scenarios. When a device is reset by a new user, the ex-user's permissions are revoked. However, there is no concept of revoking a device's permission to access its topic. A possible attack is for the ex-user to obtain the device credentials and impersonate the device, publishing fake messages to the device's topic. Leading IoT platforms, such as Tuya, mitigate this by expiring device credentials when the owner changes. However, if the ex-user establishes a session before the credential expires and keeps it online, they can continue to publish fake messages, even after the credential expires.

#### Attack

Exploiting these weaknesses, we implemented PoC attacks using our MiKO smart socket on the Tuya Smart cloud. First, we established a session that could continuously receive messages from the device even after a second user reset the device. Second, we obtained the device credentials and established a "malicious" session. After the device was reset by a second user, the malicious session could continuously publish fake device messages (e.g., device status of "on") to the victim's app. Through such an attack, a burglar or criminal could break into a home and publish fake device updates, showing the home as safe.

#### Responsible Disclosure

We reported our findings to affected vendors, including Tuya, Alibaba, Baidu, and IBM, all of whom acknowledged the problem.

### Unauthenticated MQTT Identities

IoT cloud platforms authenticate MQTT clients using platform-layer identities (e.g., Amazon accounts on AWS IoT). Each client is also identified by a protocol-level identity (ClientId). The relationship between these identities can be complex, and if not managed well, can expose MQTT communication to attacks.

#### ClientId Hijacking

The MQTT protocol requires the broker to disconnect an online client if a new client with the same ClientId connects. In an adversarial environment, one would expect that related protocol states and transitions are protected by proper authentication. However, our research shows that such protection is not in place on major IoT cloud platforms. An attacker can use their authenticated platform identity to connect to the IoT cloud with an arbitrary ClientId, including one belonging to a target device, forcing the cloud to drop the target. This attack goes beyond DoS, as the MQTT protocol allows the broker and client to restore a prior session if the client connects with its previous ClientId. This recovery mechanism can be abused to steal the target's messages.

#### Attack

We successfully executed PoC attacks on IBM Watson IoT and Baidu Cloud IoT, where the attacker could receive the victim's messages without subscribing to the victim's topic. This is a realistic problem due to improper identity management on real-world IoT clouds, which do not authenticate ClientIds as long as the MQTT client proves its platform identity.

#### ClientId Identification

The aforementioned attack relies on the attacker's knowledge of the target's ClientId. Improper management of this relationship exposes MQTT communication to significant security risks.