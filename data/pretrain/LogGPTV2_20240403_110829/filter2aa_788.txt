# Automated Malware Similarity Analysis
## Daniel Raygoza
### General Dynamics Advanced Information Systems
#### June 26, 2009

---

### Disclaimers
- This project and presentation are my personal work and do not represent or have been approved by General Dynamics (GD) or its customers.
- Any opinions expressed here are mine and do not reflect the views of GD or its customers.

---

### Problem Statement
- In-depth malware analysis is resource-intensive and costly.
- As teams grow, it becomes challenging to reduce duplicated efforts.
- Manual processes can negate the benefits of automation.

---

### Target Audience
- Teams that:
  - Routinely unpack and analyze incoming malware samples.
  - Aim to avoid redundant analysis.
  - Seek to identify similarity links between different samples.

---

### Initial Concept
- Utilize IDA for automated analysis of all samples.
- Break down samples into individual functions.
- Generate a fuzzy hash for each function.
- Calculate the similarity between all functions in the system.
- Weight and aggregate similarity scores between a given sample and all other samples in the system.

---

### Fuzzy Hashing Overview
- Fuzzy hashing, developed by Jesse Kornblum, is based on Andrew Tridgell's spamsum.
- The output hash value is tolerant of minor changes in the input.
- Hash values are compared to compute similarity.

---

### Challenges with Fuzzy Hashing
- Full binary fuzzy hashing of malware often performs poorly due to issues like packing, reordering of functions, and partial code reuse.
- Small files tend to be heavy on structure and light on code, leading to many mismatches.
- These issues can be mitigated by applying fuzzy hashing at the function level on unpacked binaries, though it is not a perfect solution.
- If we can assume that similarity between extracted byte-streams is meaningful, fuzzy hashing can be effectively applied.

---

### Existing Research
- Automated malware similarity analysis is not a new field.
- Many published papers explore various techniques, some of which are highly effective.
- However, very few have freely available implementations.
- We need practical ways to apply these ideas.

---

### Non-Free Tools
- Zynamics BinDiff/VXClass
- HBGary DDNA
- Various private tools

---

### Refined Approach
- Develop an open-source framework to support the implementation of multiple similarity scoring systems.
- Start with fuzzy hashing and gradually incorporate more complex algorithms.
- Make all similarity data available in an abstract form, enabling custom visualization.

---

### Limitations
- Automation does not include unpacking; integration with existing organizational unpackers is recommended.
- Fuzzy hashing has inherent limitations, but implementing other algorithms should address these.
- Currently relies on IDA for disassembly.
- Like any other implementation, it can be subverted by malware authors.
- The framework is not a general-purpose malware classification or identification system (consider using Yara).
- Not fully automated, as it lacks a general-purpose unpacker.

---

### Implementation Details
- **Programming Languages:**
  - Python (for ingest and backend)
  - MySQL (database)
  - PHP (frontend)
- **Platform:**
  - Developed on Linux, but designed to be OS-agnostic.

---

### System Components
- **Ingest Module:**
  - Uses an abstracted disassembler to retrieve function blobs.
  - Calls plugins to gather additional information (PE information, PEiD, strings, disassembly, decompilation, etc.).
  - Packages data for storage in the database.
- **Backend:**
  - Processes the data from the Ingest module.
  - Applies relevant similarity algorithms (implemented as plugins).
  - Stores similarity results in the database.
- **Frontend:**
  - Provides access to the database contents via XML.

---

### Additional Ideas
- Support direct ingestion of IDB files, allowing analysts to refine the IDB before analysis.
- Null out operands likely to vary between instances of code, then feed this data to the similarity algorithms.

---

### Future Work
- Implement additional similarity algorithms.
- Identify and fix bugs.
- Develop a more user-friendly frontend.
- Improve documentation.
- Create an installer.

---

### Early Results
- Statistical data to be provided.

---

### Demo
- Turbo Tool Demo... (crossing fingers)

---

### Accessing the Project
- Project homepage: [http://www.raygoza.net/fuzzball/](http://www.raygoza.net/fuzzball/)

---

### Acknowledgments
- Special thanks to Kevan, Mike, Joe, General Dynamics, and others.
- Gratitude to the many experts whose ideas and work have been reused or adapted.

---

### References
- Yara: [http://code.google.com/p/yara-project/](http://code.google.com/p/yara-project/)
- Fuzzy Hashing – Jesse Kornblum: [http://dfrws.org/2006/proceedings/12-Kornblum-pres.pdf](http://dfrws.org/2006/proceedings/12-Kornblum-pres.pdf)
- Fuzzy Clarity – Digital Ninja: [http://digitalninjitsu.com/downloads/Fuzzy_Clarity_rev1.pdf](http://digitalninjitsu.com/downloads/Fuzzy_Clarity_rev1.pdf)
- Spamsum – Andrew Tridgell: [http://digitalninjitsu.com/downloads/Fuzzy_Clarity_rev1.pdf](http://digitalninjitsu.com/downloads/Fuzzy_Clarity_rev1.pdf)
- ssdeep – Jesse Kornblum: [http://ssdeep.sourceforge.net/](http://ssdeep.sourceforge.net/)

---

Thank you!