reviewers for their insightful comments. We thank Krste
Asanovi´c and Martin Maas for sharing their ideas. Jeongseok
Son from UC Berkeley also contributed to the early stage of
the project. We also thank SK Hynix, especially Dongha Jung,
Taeksang Song, and Yongtak Song for providing the facility
for DRAM signal analysis, collecting physical experiment
data, and explaining the technical details of DRAM. This
work was supported in part by NSF grants CNS-1228839,
CNS-1405641, CNS-1700512, NSF CISE Expeditions Award
CCF-1730628, as well as gifts from the Sloan Foundation, Al-
ibaba, Amazon Web Services, Ant Financial, ARM, Capital
One, Ericsson, Facebook, Google, Intel, Microsoft, Scotia-
bank, Splunk, and VMware.
References
[1] Intel Software Guard Extensions.
https:
Last accessed: De-
//software.intel.com/sgx.
cember 2, 2019.
[2] Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Car-
los V. Rozas, Hisham Shaﬁ, Vedvyas Shanbhogue, and
Uday R. Savagaonkar. Innovative Instructions and Soft-
ware Model for Isolated Execution. In HASP, 2013.
[3] David Lie, Chandramohan A Thekkath, and Mark
Horowitz. Implementing an Untrusted Operating Sys-
tem on Trusted Hardware. ACM SIGOPS Operating
Systems Review, 37(5):178–192, 2003.
[15] Iddo Bentov, Yan Ji, Fan Zhang, Yunqi Li, Xueyuan
Zhao, Lorenz Breidenbach, Philip Daian, and Ari Juels.
Tesseract: Real-Time Cryptocurrency Exchange using
Trusted Hardware. In CCS, 2017.
[4] Dayeol Lee, David Kohlbrenner, Shweta Shinde, Dawn
Song, and Krste Asanovi´c. Keystone: A framework
for architecting tees. arXiv preprint arXiv:1907.10119,
2019.
[5] Victor Costan, Ilia A Lebedev, and Srinivas Devadas.
Sanctum: Minimal Hardware Extensions for Strong Soft-
ware Isolation. In USENIX Security, 2016.
[6] J Alex Halderman, Seth D Schoen, Nadia Heninger,
William Clarkson, William Paul, Joseph A Calandrino,
Ariel J Feldman, Jacob Appelbaum, and Edward W Fel-
ten. Lest we remember: cold-boot attacks on encryption
keys. Communications of the ACM, 2009.
[7] Christian Priebe, Kapil Vaswani, and Manuel Costa. En-
claveDB - A Secure Database using SGX. In IEEE S&P,
2018.
[8] Felix Schuster, Manuel Costa, Cedric Fournet, Christos
Gkantsidis, Marcus Peinado, Gloria Mainar-Ruiz, and
Mark Russinovich. VC3: Trustworthy Data Analytics
in the Cloud. In IEEE S&P, 2015.
[9] Tien Tuan Anh Dinh, Prateek Saxena, Ee-Chien Chang,
Beng Chin Ooi, and Chunwang Zhang. M2R: En-
abling Stronger Privacy in MapReduce Computation.
In USENIX Security, 2015.
[10] Stefan Brenner, Colin Wulf, David Goltzsche, Nico We-
ichbrodt, Matthias Lorenz, Christof Fetzer, Peter Piet-
zuch, and Rüdiger Kapitza. SecureKeeper: Conﬁdential
ZooKeeper Using Intel SGX. In Middleware, 2016.
[11] Joshua Lind, Oded Naor, Ittay Eyal, Florian Kelbert,
Emin Gün Sirer, and Peter Pietzuch. Teechain: A Se-
cure Payment Network with Asynchronous Blockchain
Access. In SOSP, 2019.
[12] Mitar Milutinovic, Warren He, Howard Wu, and Maxin-
der Kanwal. Proof of Luck: An Efﬁcient Blockchain
Consensus Protocol. In SysTEX, 2016.
[13] Fan Zhang, Ethan Cecchetti, Kyle Croman, Ari Juels,
and Elaine Shi. Town crier: An authenticated data feed
for smart contracts. In CCS, 2016.
[14] R. Cheng, F. Zhang, J. Kos, W. He, N. Hynes, N. John-
son, A. Juels, A. Miller, and D. Song. Ekiden: A Plat-
form for Conﬁdentiality-Preserving, Trustworthy, and
Performant Smart Contracts. In EuroS&P, 2019.
[16] Olga Ohrimenko, Felix Schuster, Cedric Fournet, Aastha
Mehta, Sebastian Nowozin, Kapil Vaswani, and Manuel
Costa. Oblivious multi-party machine learning on
trusted processors. In USENIX Security, 2016.
[17] Shruti Tople, Karan Grover, Shweta Shinde, Ranjita
Bhagwan, and Ramachandran Ramjee. Privado: Practi-
cal and Secure DNN Inference. ArXiv, 2018.
[18] Jo Van Bulck, Marina Minkin, Oﬁr Weisse, Daniel
Genkin, Baris Kasikci, Frank Piessens, Mark Silberstein,
Thomas F. Wenisch, Yuval Yarom, and Raoul Strackx.
Foreshadow: Extracting the Keys to the Intel SGX King-
dom with Transient Out-of-order Execution. In USENIX
Security, 2018.
[19] Wenhao Wang, Guoxing Chen, Xiaorui Pan, Yinqian
Zhang, XiaoFeng Wang, Vincent Bindschaedler, Haixu
Tang, and Carl A. Gunter. Leaky Cauldron on the Dark
Land: Understanding Memory Side-Channel Hazards in
SGX. In CCS, 2017.
[20] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko,
Kari Kostiainen, Srdjan Capkun, and Ahmad-Reza
Sadeghi. Software Grand Exposure: SGX Cache At-
tacks Are Practical. In WOOT, 2017.
[21] Michael Schwarz, Samuel Weiser, Daniel Gruss, Clé-
mentine Maurice, and Stefan Mangard. Malware Guard
Extension: Using SGX to Conceal Cache Attacks. In
DIMVA, 2017.
[22] Ahmad Moghimi, Gorka Irazoqui, and Thomas Eisen-
barth. CacheZoom: How SGX Ampliﬁes the Power of
Cache Attacks. In CHES, pages 69–90. Springer, 2017.
[23] Jo Van Bulck, Nico Weichbrodt, Rüdiger Kapitza, Frank
Piessens, and Raoul Strackx. Telling Your Secrets With-
out Page Faults: Stealthy Page Table-based Attacks on
Enclaved Execution. In USENIX Security, 2017.
[24] Yuanzhong Xu, Weidong Cui, and Marcus Peinado.
Controlled-Channel Attacks: Deterministic Side Chan-
nels for Untrusted Operating Systems. In S&P, 2015.
[25] Martin Maas, Eric Love, Emil Stefanov, Mohit Tiwari,
Elaine Shi, Krste Asanovic, John Kubiatowicz, and
Dawn Song. PHANTOM: Practical Oblivious Com-
putation in a Secure Processor. In CCS, 2013.
[26] Victor Costan and Srinivas Devadas.
Intel SGX Ex-
plained. Cryptology ePrint Archive, Report 2016/086,
2016. http://eprint.iacr.org/2016/086.
[27] Andrew Huang. Keeping Secrets in Hardware: The
Microsoft XboxTM Case Study. In CHES, 2003.
[28] Oleksii Oleksenko, Bohdan Trach, Robert Krahn, Andre
Martin, Christof Fetzer, and Mark Silberstein. Varys:
Protecting sgx enclaves from practical side-channel at-
tacks. In USENIX ATC, 2018.
[29] Guoxing Chen, Wenhao Wang, Tianyu Chen, Sanchuan
Chen, Yinqian Zhang, XiaoFeng Wang, Ten-Hwang Lai,
and Dongdai Lin. Racing in Hyperspace: Closing Hyper-
Threading Side Channels on SGX with Contrived Data
Races. In S&P, 2018.
[30] Daniel Gruss, Julian Lettner, Felix Schuster, Olya Ohri-
menko, Istvan Haller, and Manuel Costa. Strong and Ef-
ﬁcient Cache Side-Channel Protection using Hardware
Transactional Memory. In USENIX Security, 2017.
[31] Ming-Wei Shih, Sangho Lee, Taesoo Kim, and Marcus
Peinado. T-SGX: Eradicating Controlled-Channel At-
tacks Against Enclave Programs. In NDSS, 2017.
[32] Sanchuan Chen, Xiaokuan Zhang, Michael K. Reiter,
and Yinqian Zhang. Detecting Privileged Side-Channel
Attacks in Shielded Execution with DéJà Vu. In Asi-
aCCS, 2017.
[33] Xiao Shaun Wang, Kartik Nayak, Chang Liu, T.-H. Hu-
bert Chan, Elaine Shi, Emil Stefanov, and Yan Huang.
Oblivious Data Structures. In CCS, 2014.
[34] Emil Stefanov, Marten van Dijk, Elaine Shi, Christopher
Fletcher, Ling Ren, Xiangyao Yu, and Srinivas Devadas.
Path ORAM: An Extremely Simple Oblivious RAM
Protocol. In CCS, 2013.
[35] Pratyush Mishra, Rishabh Poddar, Jerry Chen, Alessan-
dro Chiesa, and Raluca Ada Popa. Oblix: An efﬁcient
oblivious search index. In S&P, 2018.
[36] Shaizeen Aga and Satish Narayanasamy. InvisiMem:
Smart Memory Defenses for Memory Bus Side Channel.
In ISCA, 2017.
[37] Amro Awad, Yipeng Wang, Deborah Shands, and Yan
Solihin. ObfusMem: A Low-Overhead Access Obfusca-
tion for Trusted Memories. In ISCA, 2017.
[38] QEMU: the FAST! processor emulator.
https://
www.qemu.org/. Last accessed: December 2, 2019.
[39] Intel Software Guard Extensions Programming
Reference.
https://software.intel.com/sites/
default/files/managed/48/88/329298-002.pdf.
Last accessed: December 2, 2019.
[40] Andrew Ferraiuolo, Andrew Baumann, Chris Haw-
blitzel, and Bryan Parno. Komodo: Using veriﬁcation
to disentangle secure-enclave hardware from software.
In SOSP, 2017.
[41] ARM Security IP CryptoIsland Family.
https:
//www.arm.com/products/silicon-ip-security/
cryptoisland. Last accessed: December 2, 2019.
[42] AMD Secure Encrypted Virtualization.
https:
//developer.amd.com/amd-secure-memory-
encryption-sme-amd-secure-encrypted-
virtualization-sev/.
ber 2, 2019.
Last accessed: Decem-
[43] Dag Arne Osvik, Adi Shamir, and Eran Tromer. Cache
Attacks and Countermeasures: The Case of AES. In
CT-RSA, 2006.
[44] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and
Ruby B. Lee. Last-Level Cache Side-Channel Attacks
Are Practical. In S&P, 2015.
[45] Yuval Yarom and Katrina Falkner. FLUSH+RELOAD:
A High Resolution, Low Noise, L3 Cache Side-channel
Attack. In USENIX Security, 2014.
[46] Daniel Gruss, Clémentine Maurice, Klaus Wagner, and
Stefan Mangard. Flush+Flush: A Fast and Stealthy
Cache Attack. In DIMVA, 2016.
[47] Michael Schwarz, Moritz Lipp, Daniel Moghimi,
Jo Van Bulck, Julian Stecklina, Thomas Prescher, and
Daniel Gruss. ZombieLoad: Cross-Privilege-Boundary
Data Sampling. In CCS, 2019.
[48] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim,
Hyesoon Kim, and Marcus Peinado.
Inferring Fine-
grained Control Flow Inside SGX Enclaves with Branch
Shadowing. In USENIX Security, 2017.
[49] Yeongjin Jang, Jaehyuk Lee, Sangho Lee, and Taesoo
Kim. SGX-Bomb: Locking Down the Processor via
Rowhammer Attack. In SysTEX, 2017.
[50] Victor van der Veen, Yanick Fratantonio, Martina Lin-
dorfer, Daniel Gruss, Clementine Maurice, Giovanni Vi-
gna, Herbert Bos, Kaveh Razavi, and Cristiano Giuffrida.
Drammer: Deterministic Rowhammer Attacks on Mo-
bile Platforms. In CCS, 2016.
[51] Marcus Brandenburger, Christian Cachin, Matthias
Lorenz, and Rüdiger Kapitza. Rollback and Forking
Detection for Trusted Execution Environments using
Lightweight Collective Memory. In DSN, 2017.
[52] Sinisa Matetic, Mansoor Ahmed, Kari Kostiainen, Aritra
Dhar, David Sommer, Arthur Gervais, Ari Juels, and
Srdjan Capkun. ROTE: Rollback Protection for Trusted
Execution. In USENIX Security, 2017.
[53] Peter Pessl, Daniel Gruss, Clémentine Maurice, Michael
Schwarz, and Stefan Mangard. DRAMA: Exploiting
Dram Addressing for Cross-CPU Attacks. In USENIX
Security, 2016.
[54] Chia-che Tsai, Donald E. Porter, and Mona Vij.
Graphene-SGX: A Practical Library OS for Unmodi-
ﬁed Applications on SGX. In ATC, 2017.
[55] JKI Inc. JLA320A. https://www.jkic.co.kr/ddr4-
protocol-analyzer. Last accessed: December 2,
2019.
[56] Kibra
480
Analyzer.
http://
cdn.teledynelecroy.com/files/pdf/
lecroy_kibra480_datasheet.pdf. Last accessed:
December 2, 2019.
[57] Nexus
Technology MA4100.
https://
www.nexustechnology.com/products/memory-
analyzers/ma4100-series-memory-analyzer/.
Last accessed: December 2, 2019.
[58] Hunspell. http://hunspell.github.io/. Last ac-
cessed: December 2, 2019.
[59] Brad Fitzpatrick. Distributed caching with memcached.
Linux journal, 2004(124):5, 2004.
[60] Rajesh Nishtala, Hans Fugal, Steven Grimm, Marc
Kwiatkowski, Herman Lee, Harry C. Li, Ryan McElroy,
Mike Paleczny, Daniel Peek, Paul Saab, David Stafford,
Tony Tung, and Venkateshwaran Venkataramani. Scal-
ing Memcache at Facebook. In NSDI, 2013.
[61] James Langston.
Enhancing the Scalability of
https://software.intel.com/en-
Memcached.
us/articles/enhancing-the-scalability-of-
memcached. Last accessed: December 2, 2019.
[62] Yupeng Zhang, Jonathan Katz, and Charalampos Papa-
manthou. All Your Queries Are Belong to Us: The
Power of File-Injection Attacks on Searchable Encryp-
tion. In USENIX Security, 2016.
[63] Intel 64 and IA-32 Architectures Software Developer’s
Manual Volume 3A: System Programming Guide,
Part 1. https://www.intel.com/content/dam/www/
public/us/en/documents/manuals/64-ia-32-
architectures-software-developer-vol-3a-
part-1-manual.pdf.
2019.
Last accessed: December 2,
[64] Mengjia Yan, Read Sprabery, Bhargava Gopireddy,
Christopher Fletcher, Roy Campbell, and Josep Torrellas.
Attack Directories, Not Caches: Side Channel Attacks
in a Non-Inclusive World. In S&P, 2019.
[65] Khang T Nguyen.
Introduction to Cache Allocation
Technology in the Intel R(cid:13) Xeon R(cid:13) Processor E5 v4
Family.
https://software.intel.com/en-us/
articles/introduction-to-cache-allocation-
technology, Febuary 2016.
[66] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas
Knauth, Andre Martin, Christian Priebe, Joshua Lind,
Divya Muthukumaran, Daniel O’Keeffe, Mark L. Still-
well, David Goltzsche, Dave Eyers, Rüdiger Kapitza,
Peter Pietzuch, and Christof Fetzer. SCONE: Secure
Linux Containers with Intel SGX. In OSDI, 2016.
[67] Software Guard Extenstion (SGX) SDK for Linux.
https://github.com/intel/linux-sgx. Last ac-
cessed: December 2, 2019.
[68] RISC-V ISA Simulator.
software-tools/risc-v-isa-simulator/.
accessed: December 2, 2019.
https://riscv.org/
Last
[69] Spell Checker Oriented Word Lists.
http://
wordlist.aspell.net/. Last accessed: December 2,
2019.
[70] Enron Email Dataset. https://www.cs.cmu.edu/~./
enron/. Last accessed: December 2, 2019.
[71] NLTK data 3.4.5 documentation.
https://
www.nltk.org/data.html. Last accessed: December
2, 2019.
[72] GNU Privacy Guard. http://www.gnupg.org. Last
accessed: December 2, 2019.
[73] Sajin Sasy, Sergey Gorbunov, and Christopher W.
Fletcher. ZeroTrace : Oblivious Memory Primitives
from Intel SGX. In NDSS, 2017.
[74] J Thomas Pawlowski. Hybrid Memory Cube (HMC).
In 2011 IEEE Hot Chips 23 Symposium (HCS), 2011.
[75] Oliver Kömmerling and Markus G Kuhn. Design Prin-
ciples for Tamper-Resistant Smartcard Processors. In
Smartcard, 1999.