        # Locking the script until all threads complete
        for i in range(10000):
            threads[i].join()
        # Printing listening ports from small to large
        for i in range(10000):
            if output[i] == 'Listening':
                print(str(i) + ': ' + output[i])
    def main():
        host_ip = input("Enter host IP: ")
        delay = int(input("How many seconds the socket is going to wait until timeout: "))   
        scan_ports(host_ip, delay)
    if __name__ == "__main__":
        main()
    2.powershell
    24..25 | % {echo ((new-object Net.Sockets.TcpClient).Connect("192.168.1.119",$_)) "Port $_ is open!"} 2>$null
    24..25 |% {echo "$_ is "; Test-NetConnection -Port $_ -InformationLevel "Quiet" 192.168.1.119}2>null
    3.telnet
按照这种思路下来，我们只需要针对我们某个步骤，选择我们理想的方式或者工具去实现，就能收集到很多的信息。而且思路清晰，明确自己下一步需要做什么。
    1.用户名枚举（因为kerberos验证的原因，非域情况下能够枚举域用户，原理自己可以看一下，这里我没有能力自己写工具，就放一些工具链接）
    msf：auxiliary/gather/kerberos_enumusers
    nmap:Nmap –p 88 –script-args krb5-enum-users.realm=’[domain]’,userdb=[user list] [DC IP]
    kerbrute:kerbrute_windows_amd64.exe userenum --dc ip -d 域名 user.txt
    DomainPasswordSpray:
    Get-DomainUserList -Domain 域名 -RemoveDisabled -RemovePotentialLockouts | Out-File -Encoding ascii userlist.txt
    2.密码喷射
    kerbrute：kerbrute_windows_amd64.exe passwordspray --dc ip -d 域名 user.txt 密码
    nvoke-DomainPasswordSpray -Domain 域名 -UserList .\userlist.txt -Password '密码
    3.查找域控
    nltest /DCLIST:GOD  查域控
    Nslookup -type=SRV _ldap._tcp 查看域控主机名
    net group “Domain Controllers” /domain 查看域控组内域控主机
    net group “Domain Controllers” /domain 查看域控列表
    net time /domain
    nltest /dclist:[域名] 查看域控机器名
    dsquery server 得到域控制器的IP
    netdom query pdc
    ipconfig /all 查看dns
    扫描139等不常见但域控会开启的端口
    4.获取域控的方法(这里不说钓鱼欺骗类的这种，中继后续都开了SMB签名也不说吧）
    (1).抓域管密码横向
    (2).通过域管进程横向
    (3)利用已知漏洞（打印机，14068，zerologon等）
    (4)委派攻击
    (5)利用第三方软件如邮服等
    (6)组策略做密码复用
    (7)金银票据（主要用来做维权的，多学点没错，也写在这里吧）
    5.判断域环境
     net time /domain
     ipconfig /all
     systeminfo 
     net config workstation
**工具**  
**用户**  
用户爆破  
用户枚举  
获取服务用户  
kerberoast  
GetUserSPNs.ps1  
**ip**  
（1）nbtscan.exe  
（2）arpscan.exe  
（3）ServerScan   
（4）msf模块  
auxiliary/scanner/discovery/arp_sweep  
auxiliary/scanner/discovery/udp_sweep  
auxiliary/scanner/discovery/udp_probe  
auxiliary/scanner/netbios/nbname  
**端口**  
端口爆破  
PortBrute   
**服务**  
MSF  
auxiliary/scanner/smb/smb_version  
auxiliary/scanner/ftp/ftp_version 发现ftp  
auxiliary/scanner/ssh/ssh_version 发现ssh  
auxiliary/scanner/telnet/telnet_version 发现telnet  
auxiliary/scanner/mysql/mysql_version 发现mysql  
密码爆破  
web扫描  
**域与非域集合工具**  
（1）Seatbelt.exe  
Seatbelt.exe -group=user -full 运行普通用户权限检查的模块 -full返回输出  
Seatbelt.exe -group=all 运行所有模块（需要管理员权限）  
Seatbelt.exe -group=system #运行检查系统相关的信息  
Seatbelt.exe -group=misc #运行所有其他检查（包括浏览器记录）  
Seatbelt.exe -group=chrome 运行浏览器历史等模块  
（2）BloodHound  
（3）WinPwn  
（4）domainTools  
（5）Rubeus.exe  
（6）powerview && powersploit  
（7）fscan  
**集合脚本**
    （1）wmic
    for /f "delims=" %%A in ('dir /s /b %WINDIR%\system32\*htable.xsl') do set "var=%%A"
    wmic process get CSName,Description,ExecutablePath,ProcessId /format:"%var%" >> out.html
    wmic service get Caption,Name,PathName,ServiceType,Started,StartMode,StartName /format:"%var%" >> out.html
    wmic USERACCOUNT list full /format:"%var%" >> out.html
    wmic group list full /format:"%var%" >> out.html
    wmic nicconfig where IPEnabled='true' get Caption,DefaultIPGateway,Description,DHCPEnabled,DHCPServer,IPAddress,IPSubnet,MACAddress /format:"%var%" >> out.html
    wmic volume get Label,DeviceID,DriveLetter,FileSystem,Capacity,FreeSpace /format:"%var%" >> out.html
    wmic netuse list full /format:"%var%" >> out.html
    wmic qfe get Caption,Description,HotFixID,InstalledOn /format:"%var%" >> out.html
    wmic startup get Caption,Command,Location,User /format:"%var%" >> out.html
    wmic PRODUCT get Description,InstallDate,InstallLocation,PackageCache,Vendor,Version /format:"%var%" >> out.html
    wmic os get name,version,InstallDate,LastBootUpTime,LocalDateTime,Manufacturer,RegisteredUser,ServicePackMajorVersion,SystemDirectory /format:"%var%" >> out.html
    wmic Timezone get DaylightName,Description,StandardName /format:"%var%" >> out.html
    （2）powershell
    Function Get-InstalledSoftware{
        [CmdletBinding()]
        param(
            [Parameter(Mandatory=$true,ValueFromPipeline=$true)]
            [string[]]$ComputerName
        )
        BEGIN{
        }
        PROCESS 
        {
            foreach($computer in $ComputerName){
                try {
                $software = Get-WmiObject -Class Win32_Product -ComputerName $ComputerName -ErrorAction Stop
                } catch {
                    Write-Host "$computer Offline"
                }
                $os = Get-WMIObject -Class win32_operatingsystem -ComputerName $ComputerName
                $osname = ($os.Name).Split("|") | Select-Object -First 1     
                    foreach($installed in $software){
                        $props = [ordered] @{
                            'ComputerName' = $os.PSComputerName;
                            'OperatingSystem' = $osname;
                            'Archtecture' = $os.OSArchitecture;
                            'Name' = $installed.Name;
                            'Version' = $installed.Version;
                            'Vendor' = $installed.Vendor;
                            'IdentifyingNumber' = $installed.IdentifyingNumber}          
                        $obj = New-Object -TypeName psobject -Property $props
                        Write-Output $obj
                    }
                }
            }
        END{
        }
    }
本来还想找找其他工具的，又懒得找了，自动化方便是一回事，必然会带来弊端。动静大，易查杀等。脚本小子终究只是一时爽。最后还是要自己走安全开发自己写工具，在特定的环境下能实现功能才行。就难得总结工具了，多培养培养思维多学习学习底层还是长久之道。  
这篇文章只是抛砖引玉给大家提供一个思路，还有很多东西没用收到。但是信息收集和漏洞利用总是相依相存的。比如委派，邮服这些。或者是需要一些漏洞利用链的时候。扩大自己的攻击技术和攻击面，了解新的攻击方式应该是最重要的，可能一条路不同我换了一种攻击方式，搜集一下需要实现的前置条件都满足，自然也就打下来了。随机应变。有些工具是之前收集的说实话都没有用上过，所以工具在精在顺手不在多。选择合适自己的才最重要。