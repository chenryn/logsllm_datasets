Software 
Control 
Software and 
Hardware 
Software and 
Physical Robot
cyber-physical attacks that are difficult to be detected without 
modeling the robot’s dynamics.  
The attacks exploit the dynamic loading feature for system 
libraries  in  the  underlying  Linux  OS  and  vulnerabilities in 
RAVEN  II  software-hardware  interface  to  inject  malicious 
actions at different layers of the robot control structure (shown 
in  Figure  1(a)).  The  attacks  can  cause  a  variety  of  adverse 
impacts  on  the  robot  functionality,  the  patient,  and  these 
impacts are potentially difficult to distinguish from unexpected 
failures.  TABLE  I  summarizes  variants  of  those  attacks, 
categorized by the target layer in the control structure (see the 
red marks in Figure 2), the target system library, the type of 
malicious action, and their observed impact on the system (as 
reported  in  [20]).  We  specifically  focuse  on  two  attack 
scenarios that cannot be detected and mitigated by the existing 
safety mechanisms in the RAVEN II robot:  
A.  Injection  of  unintended  user  inputs  after  they  are 
received by the control software. These attacks either cause 
hijacking the control of the robot by performing an action 
that was not initiated by the operator or lead to unintended 
jumps and unwanted halt states.  
B.  Injection of unintended motor torque commands after 
they have passed the safety checks and before transmission 
to the USB interface boards and motor controllers.  These 
attacks can lead to unintended moves and abrupt jumps of 
the robot or unwanted halt states. 
Figure 2. The kinematics chain in the RAVEN II control software 
The RAVEN II robot has the following safety mechanisms [12]: 
•  A physical start button should be pressed to take the robot 
out of the emergency stop (“E-STOP”) state. At any time 
pressing the emergency stop button will immediately stop 
the robot by putting the PLC and control software into the 
“E-STOP” state (see Figure 1(c)). 
•  Whenever the human operator lifts the foot from the pedal, 
the  system  enters  the  “Pedal Up”  state  and engages  the 
fail-safe power-off brakes on the motors and disengages 
the master console from manipulating the surgical arms.  
•  The control software performs safety checks on the motor 
controller commands before they are sent to the USB I/O 
boards. These safety checks compare the electrical current 
commands sent to the digital to analog converters (DACs) 
397
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:21:31 UTC from IEEE Xplore.  Restrictions apply. 
Figure 3.  Attack scenario B (injection of unintened motor torque commands) in RAVEN II surgical robot 
We exemplify the attacks by deploying attack scenario B 
(described above) on the RAVEN II robot. We used a desktop 
computer running RAVEN II software on top of ROS Indigo 
and  Linux  Ubuntu  14.04  LTS  with  SMP  Preempt  Real-time 
kernel.  The  machine  contained  an  Intel  Core  i5  PI:EMAIL 
GHz and 8GB of RAM. The malicious code was implemented 
using  bash,  Python  scripts,  and  ROS  commands  and  was 
executed  in  the  user  space  (no  root  privilege  was  needed  to 
execute the malware). 
A.  Attack Model 
We focus on the steps taken after the attacker has obtained 
remote access to a robot control system on a hospital’s network. 
The attacker can gain such access by exploiting weaknesses such 
as  vulnerable  services,  unpatched  medical  devices,  stolen 
credentials, or insider attacks to penetrate the hospital network. 
Once in the hospital network, the attacker can move laterally 
across devices within the hospital, steal additional credentials 
and discover vulnerabilities until the target robot control system 
is  located  and  penetrated.  The  attacks  discovered  by  TrapX 
Security, Inc. [10], the Stuxnet attack [21], and the discovered 
vulnerability in the firewall of a commercial robot [11] serve as 
examples of how these penetration attacks could be performed. 
Table  V  shows  the  common  entry  points  exploited  in  recent 
attacks detected on hospital networks. The purpose is to assert 
that  access  to  the  robot  control  system  in  present  day 
environments is not only feasible but quite probable.  
After getting access to the robot, the intention of the attacker 
is to remain on the target system without being detected for as 
long as possible in order to (i) collect data from the system, (ii) 
analyze the collected data to create an operational profile of the 
robot and determine the best time for activating the attack, and 
(iii) trigger the attack at the desired critical time.   
We assume the attacker does not have access to the source 
code  or  internal  design  of  the  robot.  The  attacker  gathers 
information  about  the  system  configuration  and  potential 
vulnerabilities  of 
through  publicly  available 
documents  (e.g.,  previous  publications  on  vulnerabilities  of 
RAVEN  II  robot  [8][19][20])  or  through  a  vulnerability 
discovery process consisting of targeted probing and fuzzing.  
There  are  specifically  two  pieces  of  information  that  the 
attacker  must  have  about  the  robot  in  order  to  perform  a 
the  robot 
successful  attack:  (i)  the  state  machine  representing  robot 
operations and (ii) a side channel that can be used to extract the 
current state of the robot in order to determine the best time to 
trigger an attack. The attacker also needs at least a user privilege 
to download and run the malicious code on the system. 
B.  Attack Description 
In the attack scenario illustrated in Figure 3, an attacker (who 
penetrated RAVEN control system) first eavesdrops (intercepts) 
on  the  USB  communication  between  the  RAVEN  control 
software and the USB I/O boards. The intercepted packets are 
analyzed offline to extract the state information of the surgical 
robot,  i.e.,  determine  the  state  of  the  robot  according  to  the 
operational state machine depicted in Figure 1(c). The extracted 
data are then used to build a malware for triggering (injecting) 
an attack at a critical time during the robot’s operation, i.e., when 
the robot is operating in the “Pedal Down” state.  
Figure 3 describes the steps to execute the attack on a RAVEN 
II  robot:  These  steps  are  grouped  into  three  phases:  Attack 
Preparation  Phase,  Analysis  Phase,  and  Deployment  Phase. 
The Attack Preparation Phase and the Analysis Phase need to be 
performed  only  once  to  obtain  the  information  necessary  to 
design and implement the final malware capable of triggering an 
attack when the robot is most vulnerable. The details of each 
phase are described next.  
1)  Attack-Preparation  Phase:  The  goal  of  the  Attack-
Preparation  phase  is  to  eavesdrop  on  the  communication 
between the RAVEN control software and the USB I/O boards 
and send that information to the attacker for offline analysis. 
This is achieved by (i) downloading and installing a malicious 
shared  library  on  the  RAVEN  control  system,  (ii)  forcing 
processes on the system to link to the malicious shared library, 
and  (iii)  logging  the  RAVEN  USB  communication  and 
forwarding  it  to  the  attacker  on  a  remote  server  using  UDP 
packets.  
In  a  Linux  system  most  programs  do  not  communicate 
directly with the kernel. Instead, the program invokes a function 
in a runtime library (e.g., libc), which performs the necessary 
preparation of the arguments and then triggers the corresponding 
system call (see Figure 4 for  an example of calling the  write 
system call in the RAVEN control software). When a program 
398
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:21:31 UTC from IEEE Xplore.  Restrictions apply. 
Figure 4. The  malicious write system call loaded as a wrapper around the 
original write system call on the system. The dashed line shows the original 
program flow. The solid lines show the program flow after LD_PRELOAD is 
set to point to the malicious wrapper. 
starts, the runtime linker searches the default path to find the 
runtime  library  to  be  linked.  If  an  environment  variable 
LD_PRELOAD or the directory /etc/ld.so.preload is defined in 
the system, then the linking process is forced to first search, load, 
and  link  to  the  library  object  in  the  path  pointed  by  the 
LD_PRELOAD  or  /etc/ld.so.preload  [22].  If  the  alternative 
library  object  has  a  function  with  the  same  name  as  function 
defined in the original runtime library (e.g., read or write), the 
alternative  library’s  function  will  be  called.  This  allows  the 
alternative  library  to  “wrap”  the  runtime  library  function, 
intercepting system  calls. The alternative library function can 
call the original system call, not call it, or do some malicious 
task before calling it. This approach has been used by several 
rootkits to hide their operations [23].  
In  implementing  the  attack  scenario  B,  we  exploited  the 
Linux dynamic linking feature to install malicious system call 
wrappers for the write system call in order to eavesdrop on the 
commands  sent  to  the  robot  motor  controllers  and  the  safety 
PLC through USB. An attacker with the user privilege, can add 
the  LD_PRELOAD  environment  variable  to  user’s  startup 
profile (e.g., .bashrc), so all future terminals started by this user 
will have the LD_PRELOAD environment variable set to point 
to the malicious shared library. The attacker with root privilege 
can  add 
to 
/etc/ld.so.preload, so that new processes started by any user on 
the system link to the malicious shared library. This means that 
when any future process makes a write system call, the system 
call wrapper in the malicious shared library will be called (see 
the malicious wrapper code in Figure 4).  
the  malicious  shared 
library 
the  path 
to 
2)  Offline Analysis Phase: The goal of the Analysis Phase 
is to discover state information of the surgical robot from the 
logged  USB  communication.  From  the  publicly  available 
documents on the RAVEN II robot (e.g., [12][16]), the attacker 
can infer that the state information (the robot can be in one of 
four states depicted by the operational state machine; see Figure 
1(c)) must be transmitted between the RAVEN control software 
and  the  USB  I/O  boards.  The  attacker  performs  an  offline 
analysis on the USB packets (step 4 in Figure 3) collected from 
several  robot  runs—from  initialization  to  the  end  of  a 
399
teleoperation session—to identify fields in the USB packets that 
carry robot’s state information. 
Since  the  attacker  does  not  know  the  format  of  the  USB 
packets,  a  simple  approach  to  analyze  them  is  to  look  at  the 
values of the packets byte by byte over time to see whether there 
are patterns indicating a specific byte that may contain the state 
information. Figure 5(a) illustrates sample USB packets (values 
of the buf parameter for the write system call) collected in one 
run of the robot. Each subplot shows the value of each of the 18 
bytes over the course of a run. During this run, the RAVEN robot 
was teleoperated using the manipulators on a remote console.  
  By analyzing multiple runs, attacker can discover that Byte 
0 switches among 8 different values in a surgical run whereas 
other bytes either stay constant or switch between many values. 
For example, Figure 5(b) and Figure 5(c) show the enlarged plot 
of Byte 4 and Byte 0, respectively. A more detailed look at the 
values of Byte 0 reveals that the fifth bit toggles periodically 
between 0 and 1 (e.g., 0X0F toggles to 0X1F). If we take that bit 
out, then Byte 0 only switches among 4 values. Figure 6 shows 
the patterns of Byte 0 over nine different runs of the robot. Our 
further investigation into the RAVEN II specifications revealed 
that the fifth bit of Byte 0 might be the watchdog signal, a square-
wave  signal  toggling  periodically  between  0  and  1  to 
communicate the healthy status of the robot control software to 
the PLC safety processor [16].  
  Now,  the  attacker  can  combine  this  information  with  the 
knowledge  that  the  RAVEN  robot  state  machine  navigates 
through 4 distinct states during a teleoperation. It begins from a 
stopped state (“E-Stop”), then upon hitting the start button, it 
performs  an  initialization  process  (“Init”),  then  moves  to  a 
standby state (“Pedal Up”), and during the surgical procedure, 
moves  between  the  standby  state  (“Pedal  Up”),  and  the 
operational state (“Pedal Down”) (see Figure 1(b)). Putting these 
two pieces of information together, the attacker can conclude, 
based on several runs of collected data, that Byte 0 most likely 
represents the state of the surgical robot and the values 31 (0x1F) 
or 15 (0x0F) in Byte 0 indicate that the robot is engaged and in 
operation (in the “Pedal Down” state). The red dashed lines in 
each subplot of Figure 6, highlight steps corresponding to the 
different operational states of the robot that can be inferred from 
this data. Similar analysis can be done on the data collected from 
the  read  system  calls  to  eavesdrop  on  the  feedback  received 
from motor encoders (not shown here due to space limitations).  
the 
Deployment Phase is to install a malicious code that triggers an 
attack on the RAVEN II robot when it is engaged in the middle 
of  a  surgical  operation.  Based  on  the  offline  analysis,  the 
attacker  can  use  Byte  0  as  a  trigger  to  determine  when  to 
activate an attack on the robot. There can be other triggers in 
addition to Byte 0, but Byte 0 can indicate when the surgical 
robot is in the operational (“Pedal Down”) state. Attacking the 
robot in other states may not have the desired malicious effect, 
e.g.,  in  the  “E-STOP”  or  “Pedal  Up”  states,  the  robot  is  not 
engaged and the motor brakes are applied, so no commands sent 
to the motors will be executed. 
3)  Attack  Deployment  Phase:  The  goal  of 
The attacker modifies the write system call wrapper in the 
malicious shared library to perform an attack when Byte 0 (in 
the  USB  packets)  indicates  the  “Pedal  Down”  state  in  the 
robot’s operation. The attack consists of modifying the values 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:21:31 UTC from IEEE Xplore.  Restrictions apply. 
(b) 
 “Pedal Down”
 “Pedal Up” 
 “Homing” 
“E-STOP”
(a) 
(c) 
Figure 5. The contents of packets transferred in one run of the RAVEN II robot from the robot to one of the USB boards (by calling write systems call). (a) 
Each subplot corresponds to a byte in the USB packets. (b) Byte #4 switches between many different values. (c) Byte #0  switches between 8 different values 
and if the fifth bit is taken out, it switches between 4 values corresponding to the four distinct states of the robot. 
of other bytes in the USB packets, that represent the control 
commands sent to the USB I/O boards by the control software 
to drive the motors on the robotic arms.  
Previous  assessment  of  the  RAVEN  control  software  by 
fuzzing  the  USB  packets  transferred  between  the  robotic 
software  and  USB  I/O  boards  revealed  that  the  motor 
commands issued by the control software are checked before 
being sent to the custom USB boards (to make sure they do not 
exceed  safety  limits  and  the  desired  joint  positions  are  not 
outside of the robot workspace). However, the integrity of the 
packets is not checked after the USB boards receive them. Since 
the USB I/O boards do not verify the integrity of the received 
USB data, a corrupted or incorrect motor command can pass to 
Figure 6. The values of Byte 0 in the packets transferred from the robot to 
one of the USB boards in a sample of nine different runs. The robot state 
(highlighted in red) can be inferred from the changes in the value of Byte0.
400
the  motors  causing  the  robot  arm  to  move  to  an  undesired 
location and potentially damage the system or harm the patient.  
Figure 4 shows the modified version of the wrapper. The 
attacker can deploy the modified shared library to any RAVEN 
machine using steps 1 and 2 in the Attack Preparation Phase 
(see Figure 3). Now, with every invocation of the write system 
call made by the RAVEN control software, instead of logging 
the USB communication, the malicious wrapper checks Byte 0 
of the buf parameter and automatically triggers an attack if Byte 
0 indicates that the robot is in the “Pedal Down” state.  
C.  Attack Evaluation  
To asses the impact of the attacks on the progress of the 
surgery and the health of patient, we simulated the attacks on 
the  write  system  calls  in  a  surgical  simulator for  RAVEN  II 
robot as well as on a real RAVEN II robot. By implementing 
the attacks on the simulator, we were able to verify the impact 
of the attacks before testing them on the actual robot, which 