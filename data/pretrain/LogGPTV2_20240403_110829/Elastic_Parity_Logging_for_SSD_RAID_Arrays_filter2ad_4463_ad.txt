### Key Properties of Write Requests

1. **Average Write Sizes**: The average write sizes are generally small, ranging from 7-13 KB.
2. **Access Pattern**: All traces exhibit a high proportion of random write requests. A write request is considered random if its starting offset differs from the ending offset of the previous write request by at least 64 KB.
3. **Working Set Size**: The working set size (the size of unique data accessed throughout the trace duration) is small for all traces.

### Experiment 1: Write Traffic to SSDs

**Objective**: To evaluate the effectiveness of EPLOG in reducing write traffic to SSDs due to parity updates, given that our traces are dominated by small random writes.

**Results**:
- **Figure 7(a)**: Under (6+2)-RAID-6, EPLOG achieves a 45.6-54.9% reduction in write size compared to MD. Both PL and EPLOG have the same results because they write the same amount of data updates to SSDs while redirecting parity traffic to log devices. However, EPLOG achieves higher I/O throughput than PL due to elastic parity logging (see Experiment 5).
- **Figure 7(b)**: For the FIN trace (which has the most write requests among all traces), EPLOG reduces write traffic by 38.6-39.9% and 49.3-57.0% over MD for RAID-5 and RAID-6, respectively. RAID-6 shows more significant reductions in write traffic compared to RAID-5.

### Experiment 2: GC Overhead

**Objective**: To study the endurance in terms of GC overhead, measured by the average number of GC requests to each SSD.

**Methodology**:
- We use Microsoftâ€™s SSD simulator [2] based on Disksim [5].
- Each SSD is configured with 20 GB raw capacity and 16,384 blocks, each containing 64 4KB pages (256KB per block).
- Each SSD over-provisions 15% of blocks for GC, resulting in an effective capacity of 17 GB.
- GC is triggered when the number of clean blocks drops below 5%.

**Results**:
- **Figure 8(a)**: Under (6+2)-RAID-6, EPLOG significantly reduces the number of GC requests over MD, for example, by 77.1% under the FIN trace. This implies a significant improvement in endurance.
- **Figure 8(b)**: EPLOG reduces 59.6-77.1% of GC requests over MD across different RAID settings under the FIN trace.
- EPLOG also reduces at least 8.1% of GC requests over PL in all traces due to its no-overwrite updating policy, which introduces higher sequentiality for writes to SSDs.

### Experiment 3: Impact of Caching

**Objective**: To evaluate the impact of caching in EPLOG.

**Methodology**:
- We vary the size of the device buffer of each SSD from zero to 64 chunks.
- We measure both the total size of write traffic to SSDs and the total size of log chunks in the log devices.

**Results**:
- **Figure 9(a)**: The total size of write traffic to SSDs decreases as the device buffer size increases. For example, with a device buffer size of 64 chunks (256KB per device), the write size drops by 53.3-58.4%.
- **Figure 9(b)**: The total size of log chunks decreases even more significantly. With a device buffer size of 64 chunks, the total size of log chunks decreases by 84.7-91.1%.
- The total cache size of EPLOG is very small. For instance, with a device buffer size of 64 chunks (4KB each), only 2 MB of cache is needed. This indicates that a small-sized cache can effectively absorb data updates, reducing both write traffic to SSDs and the storage of log chunks.

### Experiment 4: Parity Commit Overhead

**Objective**: To study the impact of parity commit, which introduces additional writes.

**Methodology**:
- We consider three cases of parity commit: (i) without any parity commit, (ii) commit only at the end of the entire trace, and (iii) commit every 1,000 write requests.
- We include the results of MD from Experiment 1 for comparison.

**Results**:
- **Figure 10(a)**: Compared to the case without any parity commit, the write size increases by up to 4.3% and 24.9% when we perform parity commit at the end of a trace and every 1,000 write requests, respectively. The write size with parity commit is still less than MD (e.g., by over 40% in some cases).
- **Figure 10(b)**: The number of GC requests of EPLOG is 74.8-97.1% and 67.8-88.2% less than that of MD when we perform parity commit at the end of a trace and every 1,000 write requests, respectively. The results show that the parity commit overhead remains limited if we perform parity commit in groups of writes.

This structured and detailed presentation enhances the clarity and coherence of the text, making it more professional and easier to understand.