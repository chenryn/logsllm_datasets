protocol instance the ITI belongs to, and a party identiﬁer
(PID) that distinguishes among the parties in a protocol
instance. Typically, the PID is also used to associate ITIs
with “parties” that represent some administrative domains or
physical computers.
The model of computation consists of a number of ITIs
that can write on each other’s tapes in certain ways (speciﬁed
in the model). The pair (SID,PID) is a unique identiﬁer of the
ITI in the system. With one exception (discussed later), we
assume that all ITMs are PPT.
We consider the security of the voting system in the UC
framework with static corruption in the random oracle (RO)
model. The security is based on the indistinguishability be-
tween real/hybrid world executions and ideal world executions,
i.e., for any possible PPT real/hybrid world adversary A we
will construct an ideal world PPT simulator S that can present
an indistinguishable view to the environment Z operating the
protocol.
3
ValueCoinCondPayloadTxTx In1Inn…VeriﬁcationDataOut1Outm…Coin IDPayloadAdditively homomorphic encryption. In this work, we adopt
the well known threshold lifted ElGamal encryption scheme as
the candidate of the threshold additively homomorphic public
key cryptosystem. Let Gengp(1λ) be the group generator that
takes as input the security parameter λ ∈ N, and outputs the
group parameters param, which deﬁne a multiplicative cyclic
group G with prime order p, where |p| = λ. We assume the
DDH assumption holds with respect to the group generator
Gengp. More speciﬁcally, the additively homomorphic cryp-
tosystem HE consists of algorithms (KeyGenE, Enc, Add, Dec)
as follows:
•
•
•
•
KeyGenE(param): pick sk ← Z∗
gsk, and output (pk, sk).
Encpk(m; r): output e := (e1, e2) = (gr, gmhr).
Add(c1, . . . , c(cid:96)): output c := ((cid:81)(cid:96)
i=1 ci,1,(cid:81)(cid:96)
q and set pk := h =
Decsk(e): output Dlog(e2·e−sk
), where Dlog(x) is the
discrete logarithm of x. (Note that since Dlog(·) is not
efﬁcient, the message space should be a small set.)
1
i=1 ci,2).
Lifted ElGamal encryption is additively homomorphic, i.e.
Encpk(m1; r1) · Encpk(m2; r2) = Encpk(m1 + m2; r1 + r2) .
III. THE TREASURY SYSTEM
Entities. As mentioned before, the core of a treasury system
is a collaborative decision-making process, and all the stake
holders are eligible to participate. Let k, (cid:96), n, m be integers
in poly(λ). The stake holders may have one or more of the
following roles.
•
•
•
•
The project owners O := {O1, . . . , Ok} are a set of
stake holders that have proposed project for support.
The voting committees C := {C1, . . . , C(cid:96)} are a set of
stake holders that are responsible for generating the
voting public key and announcing the voting result.
The voters V := {V1, . . . , Vn} are a set of stake
holders that lock certain amount of stake to participate.
The experts E := {E1, . . . , Em} are a special type of
voters that have specialist knowledge and expertise in
some ﬁeld.
Enabling stake delegation. In our treasury system, the voting
power of a voter is proportional to the corresponding locked
stake value. We distinguish between the ownership of a stake
and the ownership of the actual coin; namely, the stake of a
coin can be “owned” by a user other than the coin owner. This
feature allows us to delegate the stake of a coin to someone
else without transferring the ownership of the coin. To achieve
this, we introduce a stake attribute, denoted as S-Attr, that can
be attached to the Payload of a coin. The user who can provide
the required data that satisﬁes the condition(s) in the S-Attr
is able to claim the stake of the coin. Of course, the stake
of an unspent coin can only be claimed at most once at any
moment. In practice, to ensure this, additional checks should be
executed. If the user A wants to delegate the stake of a coin to
the user B, he simply needs to put the user B’s desired S-Attr
4
Fig. 2: Treasury system epochs.
in the Payload of the coin. Note that this type of delegation
is persistent in the sense that if the coin is not consumed, the
S-Attr of the coin remains the same. This feature allows users
to stay ofﬂine while the stake of their coins can still be used in
the treasury process by the delegatees. However, this type of
delegation only guarantees pseudonymity-based privacy level,
as anyone can learn “who owns” the stake of the coin by
checking the S-Attr of the coin.
System overview. A treasury system consists of iterative
treasury periods. A treasury period can be divided into three
epochs: pre-voting epoch, voting epoch, and post-voting epoch.
As shown in Figure 2, the pre-voting epoch includes two
concurrent stages: project proposing stage and voter/expert
registration stage. In the project proposing stage, the users
can submit project proposals, asking for treasury funds. Mean-
while,
the interested stake holders can register themselves
as either voters and/or experts to participate in the decision
making process by locking certain amount of their stake in the
underlying cryptocurrency. The voter’s voting power is propor-
tional to his locked stake; while, the expert’s voting power is
proportional to the amount of voting power delegated to him.
(We will explain delegation in details later.) Analogously, the
voter’s (resp. expert’s) treasury reward is proportional to his
locked stake (resp. his received delegations).
At the beginning of the voting epoch, there is a voting
committee selection stage, during which, a set of voting com-
mittee members will be randomly selected from the registered
voters who are willing to be considered for selection to the
committee. The probability of being selected is proportional to
locked stake. After the voting committee members are selected,
they jointly run a distributed key generation protocol to setup
the election public key. The voters and experts can then submit
their ballots in the ballot casting stage. Note that the voters
can either delegate their voting powers to some expert or vote
directly on the projects. For each project, voters can delegate
to different experts. At
the voting
committee members jointly calculate and announce the tally
result on the blockchain. Finally, in the execution stage, the
winning projects are funded, and the voters, experts and voting
committee members are rewarded (or punished) accordingly.
These transactions will be jointly signed and executed by the
voting committee. Meanwhile, the committee members also
jointly commit to a random seed, which will be used to select
a new voting committee in the next treasury period.
the post-voting epoch,
Treasury funding sources. As earlier motivated,
treasury
funding, perhaps is the most crucial ingredient in a decen-
tralised community-controlled decision-making system. It must
not only be regular, but also sourced from decentralised means.
That is, source of funding for treasury system should not
introduce centralisation into the system. To this end, desirable
properties from the funding sources are secure, sustainable and
decentralized.
We note that although not all potential funding sources
possess these properties, a clever combination of some of these
Project proposing stageVoter/Expert registration stagePre-voting epoch Committee selection stageKey setup stageVoting epoch Ballot casting stageTally stagePost-voting epoch Execution stagesources satisfy the set out requirement. Therefore, we propose
3 major sources of funding for the treasury system.
•
Taxation/Haircut from block reward: Most blockchain
platforms offer block rewards (including transaction
fees) to proposers of new blocks, incentivizing honest
behaviour. A fraction of such block rewards can be
taken and contributed to the decentralised treasury.
This type of funding source is sustainable as long as
the block rewards of the underlying blockchain plat-
form remain. However, block rewards may ﬂuctuate
over time, and it could cause unpredictability of the
available funds.
• Minting new coins: Coin minting represents, perhaps,
the most sustainable funding source of the potential
sources. At the beginning of each treasury period, cer-
tain amount of new coins are created to fund projects.
However, minting may cause inﬂation in terms of the
ﬁat market value of the underlying cryptocurrency.
Donations or charity: Donation is an opportunistic
ad-hoc but unsustainable funding source. Therefore,
meticulous blockchain development planning is difﬁ-
cult if donations is the only means of treasury funding.
•
Project proposal. To ensure input independency and elim-
inate unfair advantage caused by late submission, we adopt
a two-stage project proposal scheme. In the ﬁrst stage, the
project owners O1, . . . , Ok post an encryption of their project
proposals (encrypted under the election public key of the
previous treasury period) to the blockchain. At the end of
pre-voting epoch and the beginning of the voting epoch,
the voting committee of previous treasury period will jointly
decrypt those project proposals (together with revealing the
seed, which will be explained later).
,
Tx
special transaction in form of
To commit a project, the project owner needs to submit a
i=1; TCoin; {PROJECT, TID, P-Enc, Addr}(cid:17)
(cid:16){Ini}n
where {Ini}n
i=1 are the input coins, and TCoin is a special
output coin whose spending condition is deﬁned as, the coin
can only be spent according to the corresponding treasury
decision (cf. Subsection “supplying the treasury”, below).
Moreover, the coin value TCoin.Value ≥ αmin, where αmin
is the minimum required fee for a project proposal to prevent
denial-of-service attacks. In the Payload ﬁeld, PROJECT is a
tag that indicates it is a special project proposal transaction;
TID is the treasury ID that is used to uniquely identify a
treasury period; P-Enc is the encrypted project proposal, and
Addr is the return address for the project owner to receive
money if the project succeeds in getting funded.
Voter/Expert registration. In order to register to be a voter,
a stake holder (or a set of stake holders) need(s) to submit a
special voter registration transaction in form of
(cid:16){Ini}n
where {Ini}n
i=1 are the input coins, and TCoin is a special
output coin whose spending condition is deﬁned in Subsec-
tion “supplying the treasury”, below. In the Payload ﬁeld,
VOTER-REG is a tag that
is a special voter
registration transaction; TID is the treasury ID that is used
VOTER-REG, TID, {Si}(cid:96)
i=1, S-Cond, vk, Addr
indicates it
i=1; TCoin;
(cid:111)(cid:17)
(cid:110)
Tx
,
5
to uniquely identify a treasury period; {Si}(cid:96)
i=1 are the freezed
unspent coins that will be used to claim stake value, S-Cond
is the required data that satisﬁes all the stake attributes of
{Si}(cid:96)
i=1, vk is a freshly generated signature key; and Addr is
the return address for the voter to receive treasury reward.
The voter’s ID is deﬁned as the hash of vk, denoted as
Vi := hash(vk).
Tx
Let βmin be a predeﬁned system parameter. To register as
an expert, a stake holder (or a set of stake holders) need(s) to
deposit exact βmin amount of coins, by submitting a special
expert registration transaction:
i=1; TCoin; {EXPERT-REG, TID, vk, Addr}(cid:17)
(cid:16){Ini}n
where {Ini}n
i=1 are the input coins, and TCoin is a special
output coin whose spending condition is deﬁned in Sub-
section “supplying the treasury”. Moreover, the coin value
TCoin.Value ≥ βmin. In the Payload ﬁeld, EXPERT-REG is a
tag that indicates it is a special expert registration transaction;
TID is the treasury ID that is used to uniquely identify a
treasury period; vk is a freshly generated signature key; and
Addr is the return address for the expert to receive treasury
reward.
,
The expert’s ID is deﬁned as the hash of vk, denoted as
Ej := hash(vk). Note that the expert does not gain reward
based on the amount of deposited coins, so it is not rational
to deposit signiﬁcantly more than βmin coins in practice.
Voting committee selection. At the beginning of the voting
epoch, the voting committee of the previous treasury epoch
jointly reveal the committed seed, seed.
j=1 Sj.Value for all the stake coins Sj claimed
in the payload of the voter registration transaction of vki, i.e.
sti is the total stake amount claimed by vki. Once seed is
announced, any registered voter, who have an address vki with
claimed stake sti, can volunteer to participate in the voting
committee if the following inequality holds:
hash(cid:0)vki, signsk(cid:48)
(seed)(cid:1) ≤ sti · T
i
i
,
Tx
(cid:110)
(seed), Addr
(cid:111)(cid:17)
i=1; TCoin;
VC-REG, TID, vk, ˜pk, signsk(cid:48)
(cid:48)
i is the corresponding signing key for vki, and T is a
where sk
pre-deﬁned threshold. When the inequation holds, he/she can
submit a special registration transaction in form of
(cid:16){Ini}n
where {Ini}n
i=1 are the input coins, and TCoin is a special
output coin whose spending condition is deﬁned in Subsection
“supplying the treasury”, below. Moreover,
the coin value
TCoin.Value ≥ γmin. In the Payload ﬁeld, VC-REG is a
tag that indicates it is a special voting committee registration
transaction; TID is the treasury ID that is used to uniquely
identify a treasury period; vk is a freshly generated signature
veriﬁcation key; ˜pk is a freshly generated public key for a pre-
deﬁned public key cryptosystem; signsk(cid:48)
(seed) is the signature
of seed under the signing key corresponding to vki; and Addr
is the return address for the committee member to receive
treasury reward. The threshold T is properly deﬁned to ensure
that approximately λ(cid:48) = ω(log λ) (e.g., λ(cid:48) = polylog(λ))
committee members are selected, assuming constant fraction
of them will be active. Note that, analogous to most proof-of-
stake systems, T needs to be updated frequently. See [15] for
a common threshold/difﬁculty T adjustment approach.
i
Let sti =(cid:80)(cid:96)
Remark. Jumping ahead, we will need honest majority of
the voting committee to guarantee voter privacy and protocol
termination. Assume the majority of the stake of all
the
registered voters is honest; therefore, the probability that a
selected committee member is honest is p = 1/2 + ε for any
ε ∈ (0, 1/2]. Let X be the number of malicious committee
members selected among all λ(cid:48) committee members. Since
λ(cid:48) = ω(log λ), by Chernoff bound, for δ = 2ε/(1 − 2ε):
Pr[X ≥ λ(cid:48)/2] = Pr[X ≥ (1 + δ)(1/2 − ε)λ(cid:48)]
< exp(−δ2(1/2 − ε)λ(cid:48)/4)
= negl(λ)
=
1
exp(ω(log λ))
Supplying the treasury. Treasury funds are accumulated via
a collection of coins. For example, the taxation/haircut of the
block reward can be collected through a special transaction at
the beginning of each block. The output of this type of transac-
tions are new coins, whose spending condition, Cond, speciﬁes
that the coin can only be spent according to the corresponding
treasury decision. As will be explained later in details, the
treasury funds will be distributed in forms of transactions
jointly made by the corresponding voting committee; therefore,
the coins dedicated to certain treasury period must allow the
voting committee in that treasury period to jointly spend. More
speciﬁcally, there are λ(cid:48) committee members selected at the
beginning of the voting epoch of each treasury period. Let
seedTIDi denote the seed opened in the treasury period indexed
by TIDi. Let {vkj}(cid:96)
j=1 be the set of signature veriﬁcation keys
in the valid committee registration transactions proposed by vki
such that the condition hash(cid:0)vki, signsk(cid:48)
(seed)(cid:1) ≤ sti·T holds.
j=1 are present.
The treasury coin can be spent in a transaction if majority of
the signatures w.r.t. {vkj}(cid:96)
Handling the treasury speciﬁc data in the payload. Note that