任何shell命令都会即时同步到服务器端，见图14-4。
# chmod +x/home/test/OMAudit/OMAudit_agent.py
图14-4 系统命令即时上报并展示
14.5 服务器端功能设计
14.5.1 Django配置
安全审计功能作为OMServer的一个功能扩展，需要Web服务器端开发框架
（Django）同样做些变更来支持新增的功能。由于该功能作为项目的一个App，
因此，第一步需要创建一个App，操作如下：
# cd /data/www/OMserverweb
# python manage.py startapp omaudit
在创建的omaudit目录中修改urls.py，添加App的URL映射规则，内容如下：
from django.conf.urls.defaults import *
urlpatterns = patterns（'omaudit.views'，
（r'^$'，'index'），
（r'omaudit_pull/$'，'omaudit_pull'）， #映射到omaudit_pull方法，实现客户端
数据接收
（r'omaudit_run/$'，'omaudit_run'）， #映射到omaudit_run方法，实现前端实时查
询
）
修改App的models.py，实现与数据库的关系映射，内容如下：
from django.db import models
# Create your models here.
class ServerHistory（models.Model）：
id = models.IntegerField（primary_key=True， db_column='ID'） # Field name made lowercase.
history_id = models.IntegerField（）
history_ip = models.CharField（max_length=45）
history_user = models.CharField（max_length=45）
history_datetime = models.DateTimeField（）
db_datetime = models.DateTimeField（）
history_command = models.CharField（max_length=765）
class Meta：
db_table = u'server_history'
如果数据库结构已经存在，可以通过python manage.py inspectdb命令来生成
models代码。
最后修改项目settings.py，注册该App名称，内容如下：
INSTALLED_APPS = （
… …
# 'django.contrib.admindocs'，
'public'，
'autoadmin'，
'omaudit'， #添加此行，注册该App
）
14.5.2 功能实现方法
服务器端提供了两个关键视图方法，分别实现前端实时展示
（omaudit_run）及数据接收（omaudit_pull），下面针对两个方法进行说明。
（1）前端实时展示（omaudit_run）方法
关于前端数据实时展示的实现原理，通过前端JavaScript的setInterval（）方
法实现定时函数调用，首次请求默认返回ID倒序最新5条记录，并记录下
LastID（最新记录ID），后面的定时调用将传递LastID参数，数据库查询条件
是“ID>LastID”，从而达到实时获取最新记录的目的，同时也支持选择主机来作
为过滤条件，功能实现流程图见图14-5。
图14-5 前端数据展示流程图
omaudit_run（）方法实现源码如下：
"""
=事件任务前端展示方法
"""
def omaudit_run（request）：
if not 'LastID' in request.GET： #获取上次查询到的最新记录ID
LastID=""
else：
LastID=request.GET['LastID']
if not 'hosts' in request.GET： #获取选择的主机地址信息
Hosts=""
else：
Hosts=request.GET['hosts']
ServerHistory_string=""
host_array=target_host（Hosts，"IP"）.split（'；'） #调用target_host方法
过滤出IP地址
if LastID=="0"： #符合第一次提交条件，查询不加“id>LastID”条件，反之
if Hosts==""： #符合没有选择主机条件，查询不
加“history_ip in host_array”
#条件，反之
ServerHistoryObj = ServerHistory.objects \
.order_by（'-id'）[：5]
else：
ServerHistoryObj = ServerHistory.objects \
.filter（history_ip__in=host_array）.order_by（'-id'）[：5]
else：
if Hosts==""：
ServerHistoryObj = ServerHistory.objects \
.filter（id__gt=LastID）.order_by（'-id'）
else：
ServerHistoryObj = ServerHistory.objects \
.filter（id__gt=LastID，history_ip__in=host_array）.order_by（'-
id'）
lastid=""
i=0
for e in ServerHistoryObj： #遍历查询结果，返回给前端
if i==0：
lastid=e.id
ServerHistory_string+=""+e.history_ip+ \
"&nbsp；&nbsp；\t"+ e.history_user+"&nbsp；&nbsp；\t"+ \
str（e.db_datetime）+"\t # "+e.history_command+"
*"
i+=1
ServerHistory_string+="@@"+str（lastid） #通过“@@”字符分隔事件记录与
lastid，
#前端拆分
return HttpResponse（ServerHistory_string）
（2）数据接收（omaudit_pull）方法
数据接收方法相对比较简单，即将接收到的信息直接入库，实现的源码如
下：
"""
=事件任务pull方法
"""
def omaudit_pull（request）：
if request.method == 'GET'： #校验HTTP（GET）请求参数合法性
if not request.GET.get（'history_id'， ''）：
return HttpResponse（"history_id null"）
if not request.GET.get（'history_ip'， ''）：
return HttpResponse（"history_ip null"）
if not request.GET.get（'history_user'， ''）：
return HttpResponse（"history_user null"）
if not request.GET.get（'history_datetime'， ''）：
return HttpResponse（"history_datetime null"）
if not request.GET.get（'history_command'， ''）：
return HttpResponse（"history_command null"）
history_id=request.GET['history_id'] #获取HTTP请求参数值
history_ip=request.GET['history_ip']
history_user=request.GET['history_user']
history_datetime=request.GET['history_datetime']
history_command=request.GET['history_command']
historyobj = ServerHistory（history_id=history_id， \ #数据入库
（insert）
history_ip=history_ip， \
history_user=history_user， \
history_datetime=history_datetime， \
history_command=history_command）
try：
historyobj.save（）
except Exception，e：
return HttpResponse（"入库失败，请与管理员联系！"+str（e））
Response_result="OK" #输出“OK”字符作为成功标志
return HttpResponse（Response_result）
else：
return HttpResponse（"非法提交！"）
当然，如接入的集群过于庞大，服务器端数据库会逐步形成瓶颈，主机审计
信息入库会出现一定延时，影响Linux用户操作体验，一个可行的方案是采用信
息异步入库，即先将信息写入本地，再通过上报程序后台提交信息，用户将无
感知。
第15章 构建分布式质量监控平台
中国互联网呈多运营商并存的发展格局，一个注重用户体验的业务平台，在
上线前就必须解决多运营商互联互通的问题，例如电信、联通、移动等网络的
接入。目前有两个常见方案，一是将服务器资源放置不同运营商的IDC，二是直
接接入支持BGP协议的IDC。在此之后，我们还要考虑监控不同运营网络访问业
务平台的质量问题，例如骨干网络路由延时或调度不合理甚至网络故障，导致
访问业务网络出现延时、丢包等现象，影响用户体验。因此，必须提供一种分
布式（多运营商支持）的业务服务质量监控机制。本章通过实现一套分布式的
质量监控平台整体进行说明。
15.1 平台功能介绍
分布式质量监控平台实现了多个数据采集点（不同运营商链路）对Web业务
平台进行探测，采集的信息包括DNS解析时间、建立连接时间、准备传输时
间、开始传输时间、传输总时间、HTTP状态、下载数据包大小、下载速度等，
覆盖了HTTP请求的整个生命周期。分析这些数据，可以帮助我们快速发现（异
常告警）、定位访问业务延时过大问题。通过RRDTOOL做数据报表展示，报表
类型包括请求响应时间、下载速度、可用性的自定义、日、月、年等，可以让
管理员了解业务服务质量的整体趋势，平台截图见图15-1。
图15-1 平台首页截图
15.2 系统构架设计
分布式质量监控平台由三种不同功能角色组成，第一种为数据采集探测功
能，采用Python+pycurl模块实现数据的采集并入库MySQL；第二种为后台定时
rrdtool作业，实现MySQL数据导出并更新RRDTOOL，采用了Python+rrdtool模块
实现；第三种为Web报表展示，采用Django+MySQL+rrdtool模块实现，服务器端
采用了Nginx+uwsgi构建高效的Web服务，根据管理员发起的请求条件输出不同
类型的报表。系统架构图见图15-2。
从图15-2中可以看出系统的整体架构，首先通过不同采集点向业务服务集群
发起定时探测任务，将获取的响应数据入库MySQL，异常返回信息将触发告
警。功能模块定时从MySQL数据库拉取数据做rrdtool update操作，为后续的报表
输出提供数据支持。最后管理员通过前端Web页面查询、定制输出报表，整个流
程结束。
图15-2 系统架构图
15.3 数据库结构设计
15.3.1 数据库分析
分布式质量监控平台有两张数据库表，分别为webmonitor_hostinfo及
webmonitor_monitordata表，其中webmonitor_monitordata的FID字段配置外键关
联，表信息说明如下：
·webmonitor_hostinfo：业务信息表
·webmonitor_monitordata：采集数据信息表
15.3.2 数据字典
webmonitor_hostinfo业务信息表。
webmonitor_monitordata采集数据信息表。
15.3.3 数据库模型
从图15-3的数据库EER图可以看出，表webmonitor_monitordata的FID字段被
设置为外键，与webmonitor_hostinfo表中的ID字段进行关联，作为采集信息数据
与业务信息表的唯一关联。
图15-3 系统数据库模型
15.4 系统环境部署
15.4.1 系统环境说明
前面介绍了分布式质量监控平台的三种角色，为了便于读者理解，下面对不
同角色的环境、实现方法进行详细说明，环境设备角色表如表15-1所示。
表15-1 系统环境说明表
15.4.2 数据采集角色
数据采集功能角色需要完成两个任务：一为采集远程业务服务集群HTTP响
应数据，并将数据写入远程MySQL数据库；二为提供异常HTTP响应告警支持。
本示例部署192.168.1.20、192.168.1.21主机，分别模拟电信与联通网络。下面详
细说明。
数据采集端只有两个Python文件，一个为config.py，其定义了数据库信息、
运营商网络代码、连接超时时间等，内容如下：
【/data/detector/config.py】
# -*- coding： utf-8 -*-
#定义MySQL数据信息
DBNAME='WebMonitor'
DBUSER='webmonitor_user'
DBPASSWORD='SKJDH3745tgDTS'
DBHOST='192.168.1.10'
# 修改成探测运营商网络代码（重要）
# settings.py 中定义IDC={'ct'：'电信'，'cnc'：'联通'，'cmcc'：'移动'}
# “ct”代表电信探测点网络，联通网络修改成“cnc”，移动网络修改成“cmcc”，其他类似
IDC="ct"
#连接的等待时间
CONNECTTIMEOUT = 5
#请求超时时间
TIMEOUT = 10
#告警邮件地址
MAILTO="PI:EMAIL，PI:EMAIL"
#告警手机号
MOBILETO="136****3463"
另一个为提供业务服务质量采集功能的runmonitor.py，采用了pycurl模块实
现，通过定义setopt（）方法定量参数，模拟一个HTTP请求器（request），也可
以理解成一个简单的浏览器。再通过getinfo（）定义的定量获取HTTP返回结果
（response），采集的数据将即时入库，异常响应将触发告警，关键代码如下：
【/data/detector/runmonitor.py】
……
Curlobj = pycurl.Curl（） #创建Curl对象
Curlobj.setopt（Curlobj.URL， url） #定义请求的URL
#定义setopt请求器常量，各参数详细说明见2.4节
Curlobj.setopt（Curlobj.CONNECTTIMEOUT， CONNECTTIMEOUT）
Curlobj.setopt（Curlobj.TIMEOUT， TIMEOUT）
Curlobj.setopt（Curlobj.NOPROGRESS， 0）
Curlobj.setopt（Curlobj.FOLLOWLOCATION， 1）
Curlobj.setopt（Curlobj.MAXREDIRS， 5）
Curlobj.setopt（Curlobj.OPT_FILETIME， 1）
Curlobj.setopt（Curlobj.NOPROGRESS， 1）
bodyfile = open（os.path.dirname（os.path.realpath（__file__））+"/_body"， "wb"）
Curlobj.setopt（Curlobj.WRITEDATA， bodyfile）
Curlobj.perform（）
bodyfile.close（）
#定义getinfo响应返回常量，各参数详细说明见2.4节
self.NAMELOOKUP_TIME=Decimal（str（round（Curlobj.getinfo（Curlobj.NAMELOOKUP_TIME）， 2）））
self.CONNECT_TIME=Decimal（str（round（Curlobj.getinfo（Curlobj.CONNECT_TIME），2）））
self.PRETRANSFER_TIME=Decimal（str（round（Curlobj.getinfo（Curlobj.PRETRANSFER_TIME），2）））
self.STARTTRANSFER_TIME=Decimal（str（round（Curlobj.getinfo（Curlobj.STARTTRANSFER_TIME），2）））
self.TOTAL_TIME = Decimal（str（round（Curlobj.getinfo（Curlobj.TOTAL_TIME），2）））
self.HTTP_CODE = Curlobj.getinfo（Curlobj.HTTP_CODE）
……