    ">
    %ent;
    %exfiltrate;
[ ]{#c15.xhtml#Page_260 .pagebreak title="260"} The File Transfer
Protocol (FTP) can also be used to send data directly while bypassing
special character restrictions. HTTP has many special character
restrictions and typically restricts the length of the URL. Using FTP
instead is an easy way to bypass that. To use it, you need to run a
simple FTP server on your machine and modify your malicious DTD
accordingly. I used the simple Ruby server script at
[https://github.com/ONsec-Lab/scripts/blob/master/xxe-ftp-server.rb](https://github.com/ONsec-Lab/scripts/blob/master/xxe-ftp-server.rb){.LinkURL}
:
文件传输协议（FTP）也可用于直接发送数据，绕过特殊字符限制。HTTP有许多特殊字符限制，通常限制URL的长度。使用FTP代替它是一个轻松的绕过方法。为了使用它，你需要在你的机器上运行一个简单的FTP服务器，并相应修改你的恶意DTD。我在https://github.com/ONsec-Lab/scripts/blob/master/xxe-ftp-server.rb使用了简单的Ruby服务器脚本。
    ">
    %ent;
    %exfiltrate;
We are using port 2121 here because the Ruby FTP server we are using
runs on port 2121, but the correct port to use depends on how you run
your server [ 1 ]{.CodeAnnotation aria-label="annotation1"} .
我们使用2121端口，因为我们正在使用的Ruby
FTP服务器在2121端口上运行，但正确的端口取决于您如何运行您的服务器1。
## Finding Your First XXE! {#c15.xhtml#h1-123456c15-0006}
Now that you understand the basics of the XXE attack, try to find your
own XXE vulnerability on a real target. Follow the steps covered in this
chapter to maximize your chances of success:
既然你已经理解了XXE攻击的基础知识，请尝试在实际目标上找到你自己的XXE漏洞。按照本章节中介绍的步骤，最大化成功的机会。
1.  Find data entry points that you can use to submit XML data.
2.  Determine whether the entry point is a candidate for a classic or
    blind XXE. The endpoint might be vulnerable to classic XXE if it
    returns the parsed XML data in the HTTP response. If the endpoint
    does not return results, it might still be vulnerable to blind XXE,
    and you should set up a callback listener for your tests.
3.  Try out a few test payloads to see if the parser is improperly
    configured. In the case of classic XXEs, you can check whether the
    parser is processing external entities. In the case of blind XXEs,
    you can make the server send requests to your callback listener to
    see if you can trigger outbound interaction.
4.  If the XML parser has the functionalities that make it vulnerable to
    XXE attacks, try to exfiltrate a common system file, like
    */etc/hostname* .
5.  You can also try to retrieve some more sensitive system files, like
    */etc/shadow* or *\~/.bash_history* .
6.  If you cannot exfiltrate the entire file with a simple XXE payload,
    try to use an alternative data exfiltration method.
7.  See if you can launch an SSRF attack using the XXE.
8.  Draft up your very first XXE report and send it over to the company!
:::
[]{#c16.xhtml}
::: section
# [ [ ]{#c16.xhtml#Page_261 .pagebreak title="261"} 16 ]{.ChapterNumber} [ Template Injection ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
*Template engines* are a type of software used to determine the
appearance of a web page. Developers often overlook attacks that target
these engines, called *server-side* *template injections (* *SSTIs)* ,
yet they can lead to severe consequences, like remote code execution.
They have become more common in the past few years, with instances found
in the applications of organizations such as Uber and Shopify.
模板引擎是一种用于确定网页外观的软件。开发人员常常忽视针对这些引擎的攻击，称为服务器端模板注入（SSTI），然而它们可能会导致严重的后果，如远程代码执行。在过去几年中，它们变得越来越普遍，被发现在Uber和Shopify等组织的应用程序中。
In this chapter, we'll dive into the mechanisms of this vulnerability by
focusing on web applications using the Jinja2 template engine. After
confirming that we can submit template injections to the application,
we'll take advantage of Python sandbox-escaping tricks to run operating
system commands on the server.
在本章中，我们将深入探讨使用Jinja2模板引擎的Web应用程序的漏洞机制。确认我们可以向应用程序提交模板注入后，我们将利用Python沙盒逃逸技巧在服务器上运行操作系统命令。
[ ]{#c16.xhtml#Page_262 .pagebreak title="262"} Exploiting various
template engines will require different syntax and methods, but this
chapter should give you a good introduction to the principles useful for
finding and exploiting template injection vulnerabilities on any system.
利用不同模板引擎需要不同的语法和方法，但这一章应该为您提供了有用的原则，可用于在任何系统上找到和利用模板注入漏洞。
## Mechanisms {#c16.xhtml#h1-123456c16-0001}
To understand how template injections work, you need to understand the
mechanisms of the template engines they target. Simply put, template
engines combine application data with web templates to produce web
pages. These web templates, written in template languages such as Jinja,
provide developers with a way to specify how a page should be rendered.
Together, web templates and template engines allow developers to
separate server-side application logic and client-side presentation code
during web development.
要了解模板注入的工作原理，您需要了解它们所针对的模板引擎的机制。简而言之，模板引擎将应用程序数据与
Web 模板组合在一起，生成 Web 页面。这些 Web 模板是用诸如 Jinja
之类的模板语言编写的，为开发人员提供了一种指定如何呈现页面的方法。Web
模板和模板引擎一起，在 Web
开发期间允许开发人员分离服务器端应用程序逻辑和客户端呈现代码。
### Template Engines {#c16.xhtml#h2-123456c16-0001}
Let's take a look at Jinja, a template language for Python. Here is a
template file written in Jinja. We will store this file with the name
*example.jinja* :
让我们来看看Jinja，这是Python的一个模板语言。这是一个用Jinja编写的模板文件。我们将把这个文件保存为example.jinja的名称：
    1 {{ list_title }}
      {{ list_description }}
    2 {% for item in item_list %}
        {{ item }}
        {% if not loop.last %},{% endif %}
      {% endfor %}
As you can see, this template file looks like normal HTML. However, it
contains special syntax to indicate content that the template engine
should interpret as template code. In Jinja, any code surrounded by
double curly brackets `      {{ }}     ` is to be interpreted as a
Python expression, and code surrounded by bracket and percent sign
pairings `      {% %}     ` should be interpreted as a Python statement.
你可以看到，这个模板文件看起来像普通HTML。然而，它包含特殊的语法来指示模板引擎应该将其解析为模板代码的内容。在Jinja中，任何被双花括号{{}}
包围的代码都将被解释为Python表达式，而被括号和百分号配对{%
%}包围的代码将被解释为Python语句。
In programming languages, an *expression* is either a variable or a
function that returns a value, whereas a *statement* is code that
doesn't return anything. Here, you can see that the template first
embeds the expressions `      list_title     ` and
`      list_description     ` in HTML header tags [ 1 ]{.CodeAnnotation
aria-label="annotation1"} . Then it creates a loop to render all items
in the `      item_list     ` variable in the HTML body [ 2
]{.CodeAnnotation aria-label="annotation2"} .
在编程语言中，表达式指的是变量或返回值的函数，而语句则是不返回任何值的代码。在这里，你可以看到该模板首先将表达式list_title和list_description嵌入到HTML头标签1中。然后，它创建一个循环来在HTML正文2中呈现item_list变量中的所有项目。
Now the developer can combine the template with Python code to create
the complete HTML page. The following piece of Python code reads the
template file from *example.jinja* and generates an HTML page
dynamically by providing the template engine with values to insert into
the template:
现在开发者可以将模板与Python代码结合使用，创建完整的HTML页面。下面的Python代码从example.jinja读取模板文件，并通过向模板引擎提供待插入模板的值，动态生成HTML页面：
    from jinja2 import Template
      with open('example.jinja') as f: 1
        tmpl = Template(f.read())
      print(tmpl.render( 2
        list_title = 3 "Chapter Contents",
        list_description = 4 "Here are the contents of chapter 16.",
        item_list = 5 ["Mechanisms Of Template Injection", "Preventing Template Injection", "Hunting For Template Injection", \
    "Escalating Template Injection", "Automating Template Injection", "Find Your First Template Injection!"]
    ))
First, the Python code reads the template file named *example.jinja* [ 1
]{.CodeAnnotation aria-label="annotation1"} . It then generates an HTML
page dynamically by providing the template with the values it needs [ 2
]{.CodeAnnotation aria-label="annotation2"} . You can see that the code
is rendering the template with the values `      Chapter Contents     `
as the `      list_title     ` [ 3 ]{.CodeAnnotation
aria-label="annotation3"} , and
`      Here are the contents of chapter 16.     ` as the
`      list_description     ` [ 4 ]{.CodeAnnotation
aria-label="annotation4"} , and a list of values---
`      Mechanisms Of Template Injection     ` ,
`      Preventing Template Injection     ` ,
`      Hunting For Template Injection     ` ,
`      Escalating Template Injection     ` ,
`      Automating Template Injection     ` , and
`      Find Your First Template Injection!     ` ---as the
`      item_list     ` [ 5 ]{.CodeAnnotation aria-label="annotation5"} .
首先，Python 代码读取名为 example.jinja1
的模板文件。然后，通过向模板提供所需的值，动态生成 HTML
页面。您可以看到，该代码将列表标题渲染为"章节目录"，将列表描述渲染为"以下是第
16
章的内容"，将值列表渲染为"模板注入机制、防止模板注入、寻找模板注入、升级模板注入、自动化模板注入和发现您的第一个模板注入！"。
The template engine will combine the data provided in the Python script
and the template file *example.jinja* to create this HTML page:
模板引擎将组合Python脚本中提供的数据和模板文件example.jinja，以创建此HTML页面：
      Chapter Contents
      Here are the contents of chapter 16.
      Mechanisms Of Template Injection,
      Preventing Template Injection,
      Hunting For Template Injection,
      Escalating Template Injection,
      Automating Template Injection,
      Find Your First Template Injection!
Template engines make rendering web pages more efficient, as developers
can present different sets of data in a standardized way by reusing
templates. This functionality is especially useful when developers need
to generate pages of the same format with custom content, such as bulk
emails, individual item pages on an online marketplace, and the profile
pages of different users. Separating HTML code and application logic
also makes it easier for developers to modify and maintain parts of the
HTML code.
模板引擎使渲染网页更加高效，因为开发人员可以通过重用模板以标准化的方式呈现不同组数据。当开发人员需要生成具有自定义内容的相同格式的页面时，例如群发电子邮件，在线市场上的单个商品页面和不同用户的个人资料页面时，这种功能特别有用。将HTML代码与应用程序逻辑分离还使得开发人员更容易修改和维护HTML代码的部分。
Popular template engines on the market include Jinja, Django, and Mako
(which work with Python), Smarty and Twig (which work with PHP), and
Apache FreeMarker and Apache Velocity (which work with Java). We'll talk
more about how to identify these template engines in applications later
in this chapter.
市场上流行的模板引擎包括 Jinja、Django 和 Mako（适用于 Python），Smarty
和 Twig（适用于 PHP），以及 Apache FreeMarker 和 Apache Velocity（适用于
Java）。我们稍后将在本章更多地谈论如何在应用程序中识别这些模板引擎。
### Injecting Template Code {#c16.xhtml#h2-123456c16-0002}
Template injection vulnerabilities happen when a user is able to inject
input into templates without proper sanitization. Our previous example
isn't vulnerable to template injection vulnerabilities because it does
not embed [ ]{#c16.xhtml#Page_264 .pagebreak title="264"} user input
into templates. It simply passes a list of hardcoded values as the
`      list_title     ` , `      list_description     ` , and
`      item_list     ` into the template. Even if the preceding Python
snippet does pass user input into the template like this, the code would
not be vulnerable to template injection because it is safely passing
user input into the template as data:
"当用户能够注入未经适当消毒处理的输入到模板中时，就会发生模板注入漏洞。我们之前的例子并不容易受到模板注入漏洞的攻击，因为它并未嵌入用户输入到模板中。它只是将一组硬编码的值作为list_title、list_description和item_list传递到模板中。即使前面的Python代码将用户输入作为数据传递到模板中，该代码也不会受到模板注入的攻击，因为它将用户输入安全地传递到模板中作为数据。"
    from jinja2 import Template
    with open('example.jinja') as f:
        tmpl = Template(f.read())
    print(tmpl.render(
       1 list_title = user_input.title,
       2 list_description = user_input.description,
       3 item_list = user_input.list,
    ))
As you can see, the code is clearly defining that the title portion of
the `      user_input     ` can be used only as the
`      list_title     ` [ 1 ]{.CodeAnnotation aria-label="annotation1"}
, the description portion of the `      user_input     ` is the
`      list_description     ` [ 2 ]{.CodeAnnotation
aria-label="annotation2"} , and the list portion of the
`      user_input     ` can be used for the `      item_list     ` of
the template [ 3 ]{.CodeAnnotation aria-label="annotation3"} .