    def convert(m):
    m = m ^ m >> 13
    m = m ^ m > 19
    return m
4个步骤，一步一步分析，按位解即可，这里直接给出计算脚本：
    from Crypto.Random import random
    from Crypto.Util import number
    #from flag import flag
    def uncover(m):
    m = m ^ m >> 19
    #print m
    k1 = 0x85d40000
    low17 = m &((1> 9) ^ (k2 >> 9 & low9))&((1> 18) ^ (k2 >> 18 & low29))&((1> 27) ^ (k2 >> 27 & low39)) & ((1 > 19
    mid13 = high13 ^ (m >> 6 &((1>7) ^(m  &((1  
交互脚本如下：
    from  pwn import *
    import gmpy2
    def parity_oracle(n):
    """input: n: the modulus of the RSA
    query: query is a function which inputs an int i, returns if the m*(2^i)%n is odd
    return: int m
    """
    i = 0
    x = 0
    while n >> i:
    res = query(i)
    if res:
    x = 2 * x + 1
    else:
    x = 2 * x
    i += 1
    print i
    return (x+1) * n // 2 ** i
    def query(i):
    t.sendline('D')
    t.recvuntil(':')
    send = (int(c)*pow(2,int(e)*(i+1)))%int(n)
    t.sendline(str(send))
    rev = t.recvline()[-5:-2]
    print rev
    if rev == 'odd':
    tmp = 1
    elif rev == 'ven':
    tmp = 0
    else:
    print 'eve odd error'
    exit()
    t.recvline()
    t.recvline()
    t.recvline()
    t.recvline()
    t.recvuntil('option:')
    return tmp
    if __name__ == "__main__":
    t = remote('47.111.59.243', 9421)
    proof = t.recvline()
    print proof
    check = proof[-6:-1]
    salt = proof[-20:-16]
    for i in range(10000000):
    if hashlib.md5(str(i)+salt).hexdigest()[0:5] == check:
    break
    t.sendline(str(i))
    print t.recvline()
    print t.recvline()
    #round1
    n = int(t.recvline()[4:-1])
    print int(n)
    e = int(t.recvline()[4:-1])
    print int(e)
    print t.recvline()
    c = int(t.recvline()[4:-1])
    print int(c)
    print t.recvline()
    print t.recvline()
    print t.recvline()
    print t.recvline()
    print t.recvuntil(':')
    m = parity_oracle(n)
    print m
    print c == pow(m,e,n)
    t.sendline('G')
    print t.recvuntil(':')
    t.sendline(str(m))
    print t.recvline()
    print t.recvline()
    #round2
    n = int(t.recvline()[4:-1])
    print int(n)
    e = int(t.recvline()[4:-1])
    print int(e)
    print t.recvline()
    c = int(t.recvline()[4:-1])
    print int(c)
    print t.recvline()
    print t.recvline()
    print t.recvline()
    print t.recvline()
    print t.recvuntil(':')
    m = parity_oracle(n)
    print m
    print c == pow(m, e, n)
    t.sendline('G')
    print t.recvuntil(':')
    t.sendline(str(m))
    print t.recvline()
    print t.recvline()
    #round3
    n = int(t.recvline()[4:-1])
    print int(n)
    e = int(t.recvline()[4:-1])
    print int(e)
    print t.recvline()
    c = int(t.recvline()[4:-1])
    print int(c)
    print t.recvline()
    print t.recvline()
    print t.recvline()
    print t.recvline()
    print t.recvuntil(':')