hardware components through bus components (built-in component types are
depicted in the ”types” section). Subprogram components may be used as in-
terfaces of data components, representing methods that can be called by thread
components. Parameters are interaction points of subprogram components for
transfer of data. EAST-ADL on the other hand provides modeling of diﬀerent
interfaces, depending on which conceptual abstraction layer is being modeled.
At the functional analysis level and the functional design level it is possible to
model interfaces such as client-server ports and ﬂow ports. Client and server
ports are interaction points for communication between clients and servers, i.e.
operations are required or provided by client ports and server ports. Flow ports
are directional interaction points for exchange of data which is speciﬁed by as-
sociated data-types. The hardware design architecture, modeled at the design
level, provides pin interfaces in which hardware elements can be connected to
electrical sources, sinks and ground.
Types. The AADL language provides ten types of built-in component abstrac-
tions: process, thread, thread group, data, subprogram, processor, memory, bus,
device and system. Note that a bus component represents an entity that inter-
connects hardware components (processor, memory, device and bus components)
for exchange of data and control according to some communication protocol, and
thus, it could be argued to be a connector type. Families of related components
may also be modeled in the AADL language by an extension system where a
component extending an antecedent component will inherit its antecedent char-
acteristics, which can be reﬁned or modiﬁed. EAST-ADL has built-in component
types which encapsulate semantics and properties in relation to a certain abstrac-
tion level, in contrast to AADL which types encapsulate semantics and properties
110
A. Johnsen and K. Lundqvist
in relation to the concrete component that is abstracted by the language. For ex-
ample, at the vehicle level, it is only possible to model feature components, and
at the analysis level, it is only possible to model function and device components,
where the encapsulated semantics and properties of these types are abstract. As
the abstraction level decreases, the types are getting more concrete. For exam-
ple, at the design level, it is possible to model hardware components of sensor
or actuator type, and at the implementation level it is possible to realize (by
using AUTOSAR) design level functions into software components types. The
EAST-ADL language provides modeling of component types where occurrences
of such instances, in a modeling artifact, are called typed prototypes. Modeling
by these typing systems is provided at every abstraction level, except at the
vehicle level. The EAST-ADL language does also provide modeling of variabil-
ity models, which has similarities with modeling of component types but with
a diﬀerence of the conceptual usage. The main conceptual usage of variability
models is to facilitate controllability of product lines, and not mainly to facilitate
understandability and analyzability. The variability management is provided at
all the diﬀerent conceptual abstraction levels, where related components can be
merged to a component (which can be seen as a component type) with variability
properties, meaning that the aspect of such a component can vary to another
closely related aspect.
Semantics. Both AADL and EAST-ADL provide speciﬁcation of components’
behavior, but with some limitations which can be exceeded by language annexes
and integrated tools. For example, the AADL language is extended with a be-
havioral annex [12], which provides modeling of components’ behavior by using
automata theory whereas the EAST-ADL language has traceability to behavior
models based on external notations such as Simulink [4]. Both core languages
provide suﬃcient modeling of behavior and functionality through modeling of
component modes and triggers based on data, events or timing, for exchange
of modes.
Requirements. The AADL language provides modeling of requirements
through the generic property annotation, which does not only provide modeling
of requirements, but also modeling of a component’s functional properties (com-
ponent semantics) as well as non-functional properties. Component properties
can be speciﬁed with either the component types or the component implemen-
tations, to distinguish internal and external requirements of a component. The
AADL language provides built-in properties (requirements) and possibilities to
deﬁne new properties. EAST-ADL, on the other hand, treats requirements as
separate entities that are associated to the target EAST-ADL element with a
speciﬁc association, according to principles of SysML [13]. The concept of the
requirement modeling is to provide an interface between OEMs (original equip-
ment manufacturer) and suppliers.
Evolution. AADL provides means for structural evolution through its com-
ponent extension system, where an instance of a component type can be used
to type other components. Since AADL is built on a paradigm where a system
Developing Dependable Software-Intensive Systems: AADL vs. EAST-ADL
111
is modeled as a hierarchy of components, its nature provides means for reﬁne-
ments of component features across diﬀerent levels of abstraction. EAST-ADL
does not allow modeling of component subtypes, because the EAST-ADL domain
model (metamodel) only describes component types and their prototypes (type
instances). However, EAST-ADL provides means for reﬁnement across diﬀerent
level of abstraction, but with a hierarchical diﬀerence compared to AADL. Even
though starting from a high abstraction level, AADL speciﬁes components that
are abstractions of concrete implementation components (e.g. a system compo-
nent with sensors, processes and actuators as subcomponents), which then can
be reﬁned with other abstracted components (e.g. thread components), modeled
inside components. EAST-ADL, on the other hand, starts with speciﬁcation of
components that are abstractions of features and functions (which themselves
are abstractions), which can be decomposed in a lower abstraction by specifying
these features and functions by using more concrete building blocks (compo-
nents). EAST-ADL’s terminology deﬁnes this as each abstraction layer realizes
its antecedent layer.
Non-functional properties. Both languages provide modeling of built-in non-
functional properties of components, as well as means for specifying new non-
functional properties. For example, for AADL components, there are built-in
non-functional properties such as execution time, latency, throughput, startup
deadline and write-time. For EAST-ADL components, there are properties such
as safety, timing (e.g. execution time and latency), development cost, cable length
and power consumption in addition to low-level properties represented through
AUTOSAR elements. As can be seen by the presented built-in non-functional
properties, EAST-ADL has properties of importance to higher levels of organi-
zations compared to AADL.
4.2 Modeling of Connectors
Neither of EAST-ADL or AADL model connectors explicitly, instead connections
are modeled ”in-line” with the components, i.e. connectors are not ﬁrst-class
entities. Modeling of connectors within AADL and EAST-ADL basically consist
of describing which component interfaces are connected. Connectors between
software components are left out completely in the AUTOSAR language since
the modeling concept is built on standardized component interfaces interacting
through an abstract component called the Virtual Functional Bus (VFB).
Interface. EAST-ADL and AADL connectors do not have interfaces.
Types. EAST-ADL and AADL provides built-in connector types which encap-
sulates properties and semantics of a connector. Each connector type can be
used to connect one or several types of component interfaces. For example, in
AADL there is a data access connection connector type which can be used to
connect data access interfaces, and in EAST-ADL there is a FunctionConnector
connector type which can be used to connect FunctionFlowPorts or ClientServer-
Ports. AADL does also provide modeling of abstract information paths through
112
A. Johnsen and K. Lundqvist
(cid:18)(cid:381)(cid:373)(cid:393)(cid:381)(cid:374)(cid:286)(cid:374)(cid:410)(cid:400)
(cid:47)(cid:374)(cid:410)(cid:286)(cid:396)(cid:296)(cid:258)(cid:272)(cid:286)
(cid:100)(cid:455)(cid:393)(cid:286)(cid:400)
(cid:4)(cid:4)(cid:24)(cid:62)
(cid:24)(cid:258)(cid:410)(cid:258)(cid:876)(cid:286)(cid:448)(cid:286)(cid:374)(cid:410) (cid:393)(cid:381)(cid:396)(cid:410)(cid:400)(cid:853)(cid:3)(cid:272)(cid:381)(cid:373)(cid:393)(cid:381)(cid:374)(cid:286)(cid:374)(cid:410)(cid:3)(cid:258)(cid:272)(cid:272)(cid:286)(cid:400)(cid:400)(cid:286)(cid:400)(cid:853)(cid:3)
(cid:400)(cid:437)(cid:271)(cid:393)(cid:396)(cid:381)(cid:336)(cid:396)(cid:258)(cid:373)(cid:400)(cid:3)(cid:258)(cid:374)(cid:282)(cid:3)(cid:393)(cid:258)(cid:396)(cid:258)(cid:373)(cid:286)(cid:410)(cid:286)(cid:396)(cid:400)
(cid:87)(cid:396)(cid:381)(cid:272)(cid:286)(cid:400)(cid:400)(cid:853) (cid:410)(cid:346)(cid:396)(cid:286)(cid:258)(cid:282)(cid:853)(cid:3)(cid:410)(cid:346)(cid:396)(cid:286)(cid:258)(cid:282)(cid:3)(cid:336)(cid:396)(cid:381)(cid:437)(cid:393)(cid:853)(cid:3)(cid:282)(cid:258)(cid:410)(cid:258)(cid:853)(cid:3)
(cid:400)(cid:437)(cid:271)(cid:393)(cid:396)(cid:381)(cid:336)(cid:396)(cid:258)(cid:373)(cid:853)(cid:3)(cid:393)(cid:396)(cid:381)(cid:272)(cid:286)(cid:400)(cid:400)(cid:381)(cid:396)(cid:853)(cid:3)(cid:373)(cid:286)(cid:373)(cid:381)(cid:396)(cid:455)(cid:853)(cid:3)(cid:271)(cid:437)(cid:400)(cid:853)(cid:3)(cid:282)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)(cid:3)
(cid:258)(cid:374)(cid:282)(cid:3)(cid:400)(cid:455)(cid:400)(cid:410)(cid:286)(cid:373)
(cid:18)(cid:381)(cid:373)(cid:393)(cid:381)(cid:374)(cid:286)(cid:374)(cid:410)(cid:3)(cid:373)(cid:381)(cid:282)(cid:286)(cid:400) (cid:258)(cid:374)(cid:282) (cid:17)(cid:286)(cid:346)(cid:258)(cid:448)(cid:349)(cid:381)(cid:396)(cid:258)(cid:367)(cid:3)(cid:258)(cid:374)(cid:374)(cid:286)(cid:454)
(cid:100)(cid:346)(cid:396)(cid:381)(cid:437)(cid:336)(cid:346) (cid:393)(cid:396)(cid:381)(cid:393)(cid:286)(cid:396)(cid:410)(cid:455)(cid:3)(cid:258)(cid:374)(cid:374)(cid:381)(cid:410)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)(cid:400)(cid:3)(cid:381)(cid:296)(cid:3)(cid:272)(cid:381)(cid:373)(cid:393)(cid:381)(cid:374)(cid:286)(cid:374)(cid:410)(cid:3)
(cid:410)(cid:455)(cid:393)(cid:286)(cid:400)(cid:876)(cid:349)(cid:373)(cid:393)(cid:367)(cid:286)(cid:373)(cid:286)(cid:374)(cid:410)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)(cid:400)(cid:3)(cid:3)(cid:258)(cid:374)(cid:282)(cid:3)(cid:410)(cid:346)(cid:396)(cid:381)(cid:437)(cid:336)(cid:346)(cid:3)(cid:400)(cid:393)(cid:286)(cid:272)(cid:349)(cid:296)(cid:349)(cid:286)(cid:282)(cid:3)
(cid:349)(cid:374)(cid:410)(cid:286)(cid:396)(cid:296)(cid:258)(cid:272)(cid:286)(cid:400)(cid:853)(cid:3)(cid:3)(cid:400)(cid:286)(cid:373)(cid:258)(cid:374)(cid:410)(cid:349)(cid:272)(cid:400)(cid:3)(cid:258)(cid:374)(cid:282)(cid:3)(cid:400)(cid:437)(cid:271)(cid:272)(cid:381)(cid:373)(cid:393)(cid:381)(cid:374)(cid:286)(cid:374)(cid:410)(cid:400)
(cid:94)(cid:437)(cid:271)(cid:410)(cid:455)(cid:393)(cid:349)(cid:374)(cid:336)(cid:3)(cid:410)(cid:346)(cid:396)(cid:381)(cid:437)(cid:336)(cid:346)(cid:3)(cid:286)(cid:454)(cid:410)(cid:286)(cid:374)(cid:400)(cid:349)(cid:381)(cid:374)(cid:3)(cid:400)(cid:455)(cid:400)(cid:410)(cid:286)(cid:373)(cid:3)(cid:258)(cid:374)(cid:282)(cid:3)
(cid:396)(cid:286)(cid:296)(cid:349)(cid:286)(cid:374)(cid:373)(cid:286)(cid:374)(cid:410)(cid:3)(cid:410)(cid:346)(cid:396)(cid:381)(cid:437)(cid:336)(cid:346)(cid:3)(cid:396)(cid:286)(cid:296)(cid:349)(cid:374)(cid:286)(cid:3)(cid:258)(cid:374)(cid:374)(cid:381)(cid:410)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)(cid:400)
(cid:100)(cid:346)
(cid:100)(cid:346)(cid:396)(cid:381)(cid:437)(cid:336)(cid:346) (cid:393)(cid:396)(cid:381)(cid:393)(cid:286)(cid:396)(cid:410)(cid:455)(cid:3)(cid:258)(cid:374)(cid:374)(cid:381)(cid:410)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)(cid:400)(cid:3)(cid:381)(cid:296)(cid:3)(cid:272)(cid:381)(cid:373)(cid:393)(cid:381)(cid:374)(cid:286)(cid:374)(cid:410)(cid:3)
(cid:410)(cid:455)(cid:393)(cid:286)(cid:400)(cid:876)(cid:349)(cid:373)(cid:393)(cid:367)(cid:286)(cid:373)(cid:286)(cid:374)(cid:410)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)(cid:400)
(cid:346)
(cid:296)
(cid:349)
(cid:28)(cid:4)(cid:94)(cid:100)(cid:882)(cid:4)(cid:24)(cid:62)
(cid:38)(cid:367)(cid:381)(cid:449)(cid:3)(cid:393)(cid:381)(cid:396)(cid:410)(cid:400)(cid:853)(cid:3)(cid:272)(cid:367)(cid:349)(cid:286)(cid:374)(cid:410)(cid:882)(cid:400)(cid:286)(cid:396)(cid:448)(cid:286)(cid:396)(cid:3)(cid:393)(cid:381)(cid:396)(cid:410)(cid:400)(cid:853)(cid:3)(cid:393)(cid:381)(cid:449)(cid:286)(cid:396)(cid:3)(cid:393)(cid:381)(cid:396)(cid:410)(cid:400) (cid:258)(cid:374)(cid:282)(cid:3)
(cid:346)(cid:258)(cid:396)(cid:282)(cid:449)(cid:258)(cid:396)(cid:286) (cid:393)(cid:349)(cid:374)(cid:400)
(cid:38)(cid:286)(cid:258)(cid:410)(cid:437)(cid:396)(cid:286)(cid:853)(cid:3)(cid:258)(cid:374)(cid:258)(cid:367)(cid:455)(cid:400)(cid:349)(cid:400) (cid:296)(cid:437)(cid:374)(cid:272)(cid:410)(cid:349)(cid:381)(cid:374)(cid:853)(cid:3)(cid:296)(cid:437)(cid:374)(cid:272)(cid:410)(cid:349)(cid:381)(cid:374)(cid:258)(cid:367)(cid:3)(cid:282)(cid:286)(cid:448)(cid:349)(cid:272)(cid:286)(cid:853)(cid:3)(cid:282)(cid:286)(cid:400)(cid:349)(cid:336)(cid:374)(cid:3)