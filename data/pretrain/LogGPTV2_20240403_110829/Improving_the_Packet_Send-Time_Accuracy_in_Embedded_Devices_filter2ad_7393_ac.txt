O
0
4
−
0
3
L
W
−
M
S
O
0
0
5
1
−
0
3
L
W
−
M
S
O
0
0
5
−
0
−
M
S
R
0
4
−
0
−
M
S
R
0
0
5
1
−
0
−
M
S
R
0
−
0
1
W
L
−
M
S
R
0
0
5
1
−
0
1
W
L
−
M
S
R
0
0
5
−
0
1
W
L
−
M
S
R
0
0
5
−
0
3
W
L
−
M
S
R
0
4
−
0
3
W
L
−
M
S
R
0
0
5
1
−
0
3
W
L
−
M
S
R
0
0
5
−
0
1
L
W
−
M
S
R
0
4
−
0
1
L
W
−
M
S
R
0
0
5
1
−
0
1
L
W
−
M
S
R
0
0
5
−
0
3
L
W
−
M
S
R
0
4
−
0
3
L
W
−
M
S
R
0
0
5
1
−
0
3
L
W
−
M
S
R
(c) OSM.
(d) RSM.
Fig. 5. The box-and-whisker plots of packet IDTs using diﬀerent methods (α = 1 ms,
NETGEAR router).
Figures 5(a) to (d) are four box-and-whisker plots respectively showing the
summary of data of the OIR, OFR, OSM, and RSM methods where the expected
packet IDT is set to 1 ms. In each box-and-whisker plot, the top/bottom of the
box are given by the 75th/25th percentile, and the mark inside is the median. The
upper/lower whiskers are the maximum/minimum, respectively, after excluding
the outliers. The outliers above the upper whiskers are those exceeding 1.5 of
the upper quartile, and those below the minimum are less than 1.5 of the lower
quartile. Each ﬁgure shows 15 test cases with diﬀerent degrees/directions of
cross traﬃc and packet sizes. For example, OIR-0-500 on the x-axis in Fig. 5(a)
represents the results obtained from OIR method under ‘0’ cross traﬃc (idle)
and sending 500-byte IP packets; WLXX or LWXX represents the experiment
runs with XX ﬂows of cross traﬃc in WAN→LAN or WAN←LAN direction,
respectively.
We can see that the OIR method is the most stable against the cross-
traﬃc. Most of the IDTs fall within ±20 µs of the true value. The OFR method
Improving the Packet Send-Time Accuracy in Embedded Devices
341
also shows an accurate median value. But the cross traﬃc slightly aﬀects this
method’s accuracy. The inter-quartile range increases with the number of cross
traﬃc ﬂows. Without adopting the pre-dispatching technique, the OSM method
shows even larger inter-quartile range (about 1 ms) for all cases, which is caused
by the inaccuracy of sleep function. Finally, the RSM method shows the worst
result. All the IDTs suﬀer from at least 0.2 ms inﬂation. Besides, this method is
also susceptible to cross traﬃc interference. When the WAN←LAN cross traf-
ﬁc is heavy (e.g., LW30), the inter-quartile range shows a six-fold increase. To
summarize, traditional method (RSM ) experiences larger delay and variance in
sending packets than OMware-based methods.
5.3 Pre-dispatching Period
Another important issue is the length of pre-dispatching period in the OFR
method. Some stateful measurement tools, such as OneProbe [25], requires the
information from the previous probe packets to generate a new one. Preparing
all probes packets at the beginning of the measurement becomes infeasible. As
shown in the previous section, OMware cannot pre-dispatch probes if the packet
send time is too close to the current time. Therefore, we test four diﬀerent pre-
dispatching periods and examine their eﬀects on the packet send-time accuracy.
Figures 6(a) and (b) show the CDFs of the packet IDTs with diﬀerent pre-
dispatching periods using an expected packet IDT of 10 µs and 1000 µs, respec-
tively. When the expected packet IDT is very small (e.g., α = 10 µs), the
pre-dispatching period cannot improve the accuracy. It is because the requested
IDT is insuﬃcient for OMware to ﬁnish the pre-dispatching phase before the sched-
uled send time. However, when the expected packet IDT increases to 1 ms, the ﬂuc-
tuation of the packet IDTs can be signiﬁcantly decreased when the pre-dispatching
period increases to 500 µs (as shown in Fig. 6(b)). We also found similar pattern
in other cases. Therefore, we conclude that the pre-dispatching period of 500 µs is
suﬃcient for completing the ﬁrst part of packet dispatchment in this router.
F
D
C
1
0.8
0.6
0.4
0.2
0
0
F
D
C
1
0.8
0.6
0.4
0.2
0
0
0 us
100 us
500 us
1000 us
1.5
Packet Inter−departure time /s
0.5
1
x 10−3
0 us
100 us
500 us
1000 us
1.5
Packet Inter−departure time /s
0.5
1
x 10−3
(a) α = 10 μs.
(b) α = 1000 μs.
Fig. 6. The CDFs of packet inter-departure time of the OFR method with diﬀerent
pre-dispatching period (ρ = 0, λ = 1500 bytes, NETGEAR router).
342
R.K.P. Mok et al.
F
D
C
1
0.8
0.6
0.4
0.2
0
10−5
F
D
C
1
0.8
0.6
0.4
0.2
0
10−5
TRW − idle
TOM − idle
TRW L−>W load
TOM L−>W load
TRW W−>L load
TOM W−>L load
10−3
10−4
Inter−departure time /s
(a) NETGEAR.
TRW − idle
TOM − idle
TRW L−>W load
TOM L−>W load
TRW W−>L load
TOM W−>L load
10−3
10−4
Inter−departure time /s
(b) TP-LINK.
Fig. 7. The CDFs of back-to-back packet pairs’ inter-departure time. (α = 1 ms and
λ = 40 bytes).
1
0.8
0.6
0.4
0.2
F
D
C
0
−4
−2
0
Δ tm /s
(a) NETGEAR.
0 us
10 us
100 us
1000 us
10000 us
100000 us
4
x 10−5
2
1
0.8
0.6
0.4
0.2
F
D
C
0
−4
−2
0
Δ tm /s
(b) TP-LINK.
0 us
10 us
100 us
1000 us
10000 us
100000 us
4
x 10−5
2
Fig. 8. The CDF of the diﬀerence between packet IDTs computed by the DAG card
capture and send timestamps reported by OMware (ρ = 0 and λ = 40 bytes).
5.4 Packet-Pair Accuracy
OMware provides a dedicated API for sending back-to-back packet pairs. A smaller
gap between the two packets can enable us to measure a higher capacity using
packet pair based methods (e.g., [11,20]). Figures 7(a) and (b) plot the CDFs of
the back-to-back packet pairs’ IDTs under diﬀerent degrees of cross traﬃc in the
NETGEAR and TP-LINK router, respectively. We set a 1 ms gap between each
pair to mitigate the inﬂuence from the previous pair. We can see that the NET-
GEAR router can achieve a minimum IDT of 6.44 µs, while the TP-LINK one
only can reach 13.6 µs. They can achieve 2 to 10 times improvement against the
raw socket version under the same condition.
5.5 Packet Send Timestamp Accuracy
In most cases, the measurement tools cannot rely on external timestamping
device, such as DAG card, to provide precise packet send timestamp. The tools
have to rely on the send timestamp reported by OMware. To appraise the accuracy
Improving the Packet Send-Time Accuracy in Embedded Devices
343
of the timestamps, we subtract the packet IDTs computed by two time sources,
Δtm = IDTOM ware− IDTDAG, where IDTOM ware and IDTDAG are the packet
IDTs of the same pair of packets, but computed using the timestamps reported
by the OMware and those captured by the DAG card, respectively. Figures 8(a)
and (b) show the CDFs of Δtm for the NETGEAR and TP-LINK routers.
We can see that the packet IDT diﬀerence computed by the two time sources
are very close. OMware’s timestamp accuracy can generally reach micro-second
level. Therefore, the measurement tools can use OMware’s timestamp to compute
accurate results.
6 Conclusions
This paper proposed a novel network primitive to improve the packet send-time
accuracy. The model employs a two-phase approach to allow pre-dispatch of
packets to reduce the impact from the low packet sending performance. Our
implementation, OMware, allows the tools to buﬀer probe packets and their send
times in the kernel before their actual send time. Hence, the packet send-time
accuracy and sending rate can be signiﬁcantly improved.
Our testbed evaluation results showed that using OMware to pre-dispatch pack-
ets can provide accurate packet send times. Comparing to raw socket, OMware
can reduce the minimum packet inter-departure time by ten times and reduce
the variation by 6 times under heavy load cross traﬃc. In the future, we will com-
pare the performance of OMware in more embedded devices and investigate the
performance impact to other applications.
Acknowledgements. We thank three anonymous reviewers for their valuable com-
ments. We also thank Lei Xue, McKeith Kwok, and Jack Chan for their help in pro-
gramming the prototype of OMware and carrying out experiments. This work is partially
supported by an ITSP Tier-2 project grant (ref. no. GHP/027/11) from the Innovation
Technology Fund in Hong Kong.
References
1. Bismark. http://www.projectbismark.net
2. httping. http://www.vanheusden.com/httping/
3. Iperf - The TCP/UDP Bandwidth Measurement Tool. http://iperf.fr/
4. NetFPGA. http://netfpga.org/
5. Raspberry Pi. http://www.raspberrypi.org/
6. RIPE Atlas. https://atlas.ripe.net/
7. RTLinux. https://rt.wiki.kernel.org/
8. Samknows. http://www.samknows.com
9. Baccelli, F., Machiraju, S., Veitch, D., Bolot, J.C.: On optimal probing for delay
and loss measurement. In: Proceedings of ACM IMC (2007)
10. Botta, A., Dainotti, A., Pescap´e, A.: Do you trust your software-based traﬃc gen-
erator? IEEE Commun. Mag. 48(9), 158–165 (2010)
344
R.K.P. Mok et al.
11. Chan, E., Chen, A., Luo, X., Mok, R., Li, W., Chang, R.: TRIO: measuring asym-
metric capacity with three minimum round-trip times. In: Proceedings of ACM
CoNEXT (2011)
12. Chan, E., Luo, X., Chang, R.: A minimum-delay-diﬀerence method for mitigating
cross-traﬃc impact on capacity measurement. In: Proceedings of ACM CoNEXT
(2009)
13. Dainotti, A., Botta, A., Pescap`e, A.: A tool for the generation of realistic network
workload for emerging networking scenarios. Comput. Netw. 56(15), 3531–3547
(2012)
14. Degioanni, L., Varenni, G.: Introducing scalability in network measurement: toward
10 Gbps with commodity hardware. In: Proceedings of ACM IMC (2004)
15. Deri, L.: Improving passive packet capture: beyond device polling. In: Proceedings
of SANE (2004)
16. Deri, L.: nCap: wire-speed packet capture and transmission. In: Proceedings of
IEEE E2EMON (2005)
17. Endace. DAG packet capture cards. http://www.endace.com
18. Intel. Packet processing on intel architecture. http://www.intel.com/content/
www/us/en/intelligent-systems/intel-technology/packet-processing-is-enhanced-
with-software-from-intel-dpdk.html
19. Jain, M., Dovrolis, C.: End-to-end available bandwidth: measurement methodol-
ogy, dynamics, and relation with TCP throughput. IEEE/ACM Trans. Netw. 11,
537–549 (2003)
20. Kapoor, R., Chen, L.-J., Lao, L., Gerla, M., Sanadidi, M.Y.: CapProbe: a simple
and accurate capacity estimation technique. In: Proceedings of ACM SIGCOMM
(2004)
21. Kim, J.C., Lee, Y.: An end-to-end measurement and monitoring technique for the
bottleneck link capacity and its available bandwidth. Comput. Netw. 58, 158–179
(2014)
22. Kiszka, J., Wagner, B., Zhang, Y., Broenink, J.: RTnet - A ﬂexible hard real-time
networking framework. In: Proceedings of IEEE ETFA (2005)
23. Lee, K.S., Wang, H., Weatherspoon, H.: SoNIC: precise realtime software access
and control of wired networks. In: Proceedings of USENIX NSDI (2013)
24. Linux Foundation. sk buff. http://www.linuxfoundation.org/collaborate/work-
groups/networking/skbuﬀ
25. Luo, X., Chan, E., Chang, R.: Design and implementation of TCP data probes
for reliable and metric-rich network path monitoring. In: Proceedings of USENIX
ATC (2009)
26. Olsson, R.: pktgen the Linux packet generator. In: Proceedings of Linux Sympo-
sium (2005)
27. OpenWrt. https://openwrt.org/
28. ¨Osterlind, F., Dunkels, A.: Approaching the maximum 802.15.4 multi-hop through-
put. In: Proceedings ACM HotEmNets (2008)
29. Rizzo, L.: Netmap: a novel framework for fast packet I/O. In: Proceedings of
USENIX ATC (2012)
30. Xue, L., Luo, X., Shao, Y.: kTRxer: A portable toolkit for reliable internet probing.
In: Proceedings of IEEE IWQoS (2014)