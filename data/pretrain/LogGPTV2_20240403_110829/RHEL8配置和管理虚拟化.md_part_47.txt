    ```
2.  [**可选：**]{.strong} 使用
    [适用的工具和工具来评估](#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#virtual-machine-performance-monitoring-tools_optimizing-virtual-machine-performance-in-rhel "虚拟机性能监控工具"){.link}
    虚拟机优化的影响来测试虚拟机的性能。
:::
::: itemizedlist
**其它资源**
-   下表演示了 vCPU 和主机 CPU 之间的连接：
    ::: table
    []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#idm140399964437440}
    **表 16.1. 主机拓扑**
    ::: table-contents
      -------------------------- -- -- --- --- --- --- --- --- --- --- --- ---- --- ----
       [**CPU 线程**]{.strong}         0   3   1   4   2   5   6   9   7   10   8   11
         [**内核**]{.strong}           0       1       2       3       4        5   
         [**插槽**]{.strong}           0                       1                    
       [**NUMA 节点**]{.strong}        0                       1                    
      -------------------------- -- -- --- --- --- --- --- --- --- --- --- ---- --- ----
    :::
    :::
    ::: table
    []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#idm140399983208336}
    **表 16.2. VM 拓扑**
    ::: table-contents
      -------------------------- -- -- --- --- --- --- --- --- --- ---
       [**vCPU 线程**]{.strong}        0   1   2   3   4   5   6   7
         [**内核**]{.strong}           0       1       2       3   
         [**插槽**]{.strong}           0               1           
       [**NUMA 节点**]{.strong}        0               1           
      -------------------------- -- -- --- --- --- --- --- --- --- ---
    :::
    :::
    ::: table
    []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#idm140399976544368}
    **表 16.3. 合并主机和虚拟机拓扑**
    ::: table-contents
      ------------------------------ -- -- --- --- --- --- --- --- --- --- --- ---- --- ----
         [**vCPU 线程**]{.strong}                  0   1   2   3           4   5    6   7
       [**主机 CPU 线程**]{.strong}         0   3  1   4   2   5    6   9  7   10   8   11
           [**内核**]{.strong}              0      1       2        3      4        5   
           [**插槽**]{.strong}              0                       1                   
         [**NUMA 节点**]{.strong}           0                       1                   
      ------------------------------ -- -- --- --- --- --- --- --- --- --- --- ---- --- ----
    :::
    :::
    在这种情况下，有 2 个 NUMA 节点和 8 个
    vCPU。因此，应该为每个节点固定 4 个 vCPU 线程。
    另外，红帽建议在每个节点中保留至少一个 CPU 线程用于主机系统操作。
    因为在这个示例中，每个 NUMA 节点都包含 3 个内核，每个内核都有 2
    个主机 CPU 线程，所以节点 0 的设置转换如下：
    ``` programlisting
    ```
:::
:::
::: section
::: titlepage
## []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#deactivating-ksm_optimizing-virtual-machine-cpu-performance}取消激活内核相同页面合并 {.title}
:::
虽然内核相同页面合并(KSM)提高了内存密度，但它会增加 CPU
利用率，并且可能会根据工作负载对整体性能造成负面影响。在这种情况下，您可以通过停用
KSM 来提高虚拟机(VM)性能。
根据您的要求，可以为单个会话取消激活 KSM，也可以永久停用。
::: itemizedlist
**流程**
-   要为单个会话停用 KSM，请使用 `systemctl`{.literal} 实用程序停止
    `ksm`{.literal} 和 `ksmtuned`{.literal} 服务。
    ``` literallayout
    # systemctl stop ksm
    # systemctl stop ksmtuned
    ```
-   要永久停用 KSM，请使用 `systemctl`{.literal} 实用程序禁用
    `ksm`{.literal} 和 `ksmtuned`{.literal} 服务。
    ``` literallayout
    # systemctl disable ksm
    Removed /etc/systemd/system/multi-user.target.wants/ksm.service.
    # systemctl disable ksmtuned
    Removed /etc/systemd/system/multi-user.target.wants/ksmtuned.service.
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
取消激活 KSM
前在虚拟机间共享的内存页将保持共享。要停止共享，请使用以下命令删除系统中的所有
`PageKSM`{.literal} 页面：
``` literallayout
# echo 2 > /sys/kernel/mm/ksm/run
```
匿名页面替换 KSM 页面后，`khugepaged`{.literal}
内核服务将在虚拟机物理内存中重建透明大页。
:::
:::
:::
::: section
::: titlepage
# []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#optimizing-virtual-machine-network-performance_optimizing-virtual-machine-performance-in-rhel}优化虚拟机网络性能 {.title}
:::
由于虚拟机的网络接口卡(NIC)的虚拟性质，虚拟机会丢失其分配的主机网络带宽的一部分，这样可以降低虚拟机的整体工作负载效率。以下提示可最大程度降低虚拟化对虚拟
NIC(vNIC)吞吐量的负面影响。
::: title
**流程**
:::
使用以下任一方法并观察它是否对虚拟机网络性能有帮助：
::: variablelist
[启用 vhost_net 模块]{.term}
:   在主机上，确保启用了 `vhost_net`{.literal} 内核功能：
    ``` literallayout
    # lsmod | grep vhost
    vhost_net              32768  1
    vhost                  53248  1 vhost_net
    tap                    24576  1 vhost_net
    tun                    57344  6 vhost_net
    ```
    如果这个命令的输出为空，启用 `vhost_net`{.literal} 内核模块：
    ``` literallayout
    # modprobe vhost_net
    ```
[设置多队列 virtio-net]{.term}
:   要为虚拟机设置 [*多队列 virtio-net*]{.emphasis} 功能，请使用
    `virsh edit`{.literal} 命令编辑虚拟机的 XML 配置。在 XML
    中，将以下内容添加到 ``{.literal} 部分，并将 `N`{.literal}
    替换为虚拟机中的 vCPU 数，最多 16:
    ``` literallayout
    ```
    如果虚拟机正在运行，重启它以使更改生效。
:::
::: variablelist
[批量网络数据包]{.term}
:   在具有长传输路径的 Linux VM
    配置中，在将数据包提交到内核之前进行批处理可以提高缓存利用率。要设置数据包批处理，请在主机上使用以下命令，并将
    [*tap0*]{.emphasis} 替换为虚拟机使用的网络接口名称：
    ``` literallayout
    # ethtool -C tap0 rx-frames 128
    ```
[SR-IOV]{.term}
:   如果您的主机 NIC 支持 SR-IOV，请为您的 vNIC 使用 SR-IOV
    设备分配。更多信息请参阅 ["管理 SR-IOV
    设备"一节](#managing-virtual-devices_configuring-and-managing-virtualization.html#managing-sr-iov-devices_managing-virtual-devices "管理 SR-IOV 设备"){.xref}。
:::
::: itemizedlist
**其它资源**
-   有关虚拟网络连接类型和使用提示的详情，请参考
    ["了解虚拟网络"一节](#configuring-virtual-machine-network-connections_configuring-and-managing-virtualization.html#understanding-virtual-networking-overview_configuring-virtual-machine-network-connections "了解虚拟网络"){.xref}。
:::
:::
::: section
::: titlepage
# []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#virtual-machine-performance-monitoring-tools_optimizing-virtual-machine-performance-in-rhel}虚拟机性能监控工具 {.title}
:::
要确定哪些消耗了最多 VM
资源以及虚拟机性能需要优化的哪一方面，可以使用一般诊断工具和特定于虚拟机的工具。
::: title
**默认操作系统性能监控工具**
:::
要进行标准性能评估，您可以使用主机和客户机操作系统默认提供的工具：
::: itemizedlist
-   在 RHEL 8 主机上，以 root 用户身份使用 `top`{.literal} 实用程序或
    [**系统监控**]{.strong} 应用程序，并在输出中查找 `qemu 和`{.literal}
    `virt`{.literal}。这显示了您的虚拟机消耗的主机系统资源量。
    ::: itemizedlist
    -   如果监控工具显示任何 `qemu 或`{.literal} `virt 进程`{.literal}
        都消耗大量主机 CPU 或内存容量，请使用 `perf`{.literal}
        实用程序来调查。详情请查看以下信息。
    -   此外，如果以 example `vhost_net`{.literal} [*-1234 命名的
        avhost_net*]{.emphasis} 线程进程显示为消耗过多的主机 CPU
        容量，请考虑使用
        [虚拟网络优化功能](optimizing-virtual-machine-network-performance_optimizing-virtual-machine-performance-in-rhel){.link}，如
        `multi-queue virtio-net`{.literal}。
    :::
-   在客户机操作系统上，使用系统上可用的性能实用程序和应用程序来评估哪些进程消耗最多的系统资源。
    ::: itemizedlist
    -   在 Linux 系统上，您可以使用 `top`{.literal} 实用程序。
    -   在 Windows 系统中，您可以使用 [**Task Manager**]{.strong}
        应用程序。
    :::
:::
::: title
**perf kvm**
:::
您可以使用 `perf`{.literal} 实用程序来收集有关 RHEL 8
主机性能的虚拟化特定统计信息。要做到这一点：
::: orderedlist
1.  在主机上安装 [*perf*]{.emphasis} 软件包：
    ``` literallayout
    # yum install perf
    ```
2.  使用 `perf kvm stat`{.literal} 命令之一显示您的虚拟化主机的 perf
    统计信息：
    ::: itemizedlist
    -   若要实时监控管理程序，请使用 `perf kvmstat live`{.literal}
        命令。
    -   若要在一段时间内记录管理程序的 perf 数据，请使用
        `perf kvm stat 记录`{.literal}
        命令激活日志记录。命令被取消或中断后，数据保存在
        `perf.data.guest`{.literal} 文件中，可以使用
        `perf kvm stat 报告`{.literal} 命令进行分析。
    :::
3.  分析 `VM-EXIT`{.literal} 事件类型及其分发的 `perf`{.literal}
    输出。例如，`PAUSE_INSTRUCTION`{.literal}
    事件应当不常发生，但在以下输出中，此事件的频繁发生表明主机 CPU
    无法正常处理正在运行的
    vCPU。在这种情况下，请考虑关闭某些活动虚拟机，从这些虚拟机中删除
    vCPU，或者 [调整 vCPU
    的性能](#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#optimizing-virtual-machine-cpu-performance_optimizing-virtual-machine-performance-in-rhel "优化虚拟机 CPU 性能"){.link}。
    ``` literallayout
    # perf kvm stat report
    Analyze events for all VMs, all VCPUs:
                 VM-EXIT    Samples  Samples%     Time%    Min Time    Max Time         Avg time
      EXTERNAL_INTERRUPT     365634    31.59%    18.04%      0.42us  58780.59us    204.08us ( +-   0.99% )
               MSR_WRITE     293428    25.35%     0.13%      0.59us  17873.02us      1.80us ( +-   4.63% )
        PREEMPTION_TIMER     276162    23.86%     0.23%      0.51us  21396.03us      3.38us ( +-   5.19% )
       PAUSE_INSTRUCTION     189375    16.36%    11.75%      0.72us  29655.25us    256.77us ( +-   0.70% )
                     HLT      20440     1.77%    69.83%      0.62us  79319.41us  14134.56us ( +-   0.79% )
                  VMCALL      12426     1.07%     0.03%      1.02us   5416.25us      8.77us ( +-   7.36% )
           EXCEPTION_NMI         27     0.00%     0.00%      0.69us      1.34us      0.98us ( +-   3.50% )
           EPT_MISCONFIG          5     0.00%     0.00%      5.15us     10.85us      7.88us ( +-  11.67% )
    Total Samples:1157497, Total events handled time:413728274.66us.
    ```
    其他可能会信号 `perf kvm stat`{.literal} 输出中问题的事件类型包括：
    ::: itemizedlist
    -   `INSN_EMULATION`{.literal} - 建议 [虚拟机 I/O
        配置不](#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#optimizing-virtual-machine-i-o-performance_optimizing-virtual-machine-performance-in-rhel "优化虚拟机 I/O 性能"){.link}
        最佳.
    :::
:::
有关使用 `perf`{.literal} 监控虚拟化性能的更多信息，请参阅
`perf-kvm`{.literal} man page。
::: title
**numastat**
:::