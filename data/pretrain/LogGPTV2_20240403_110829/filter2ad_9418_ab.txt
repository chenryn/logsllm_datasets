                Thread var3 = (Thread)AccessController.doPrivileged(new NewThreadAction(new TCPTransport.AcceptLoop(this.server), "TCP Accept-" + var2, true));
                var3.start();
            } catch (BindException var4) {
                throw new ExportException("Port already in use: " + var2, var4);
            } catch (IOException var5) {
                throw new ExportException("Listen failed on port: " + var2, var5);
            }
        } else {
            SecurityManager var6 = System.getSecurityManager();
            if (var6 != null) {
                var6.checkListen(var2);
            }
        }
    }
经由以上分析，我们可知每创建一个远程方法对象，程序都会为其创建一个独立的线程，并为其指定一个端口号。
在分析完了远程方法提供对象实例化的过程后，也简单跟一下这个`getRegistry()`和`bind()`方法吧
首先是`getRegistry()`代码如下
    public static Registry getRegistry(String host, int port,
                                           RMIClientSocketFactory csf)
            throws RemoteException
        {
            Registry registry = null;
            if (port <= 0)
                port = Registry.REGISTRY_PORT;
            if (host == null || host.length() == 0) {
                // If host is blank (as returned by "file:" URL in 1.0.2 used in
                // java.rmi.Naming), try to convert to real local host name so
                // that the RegistryImpl's checkAccess will not fail.
                try {
                    host = java.net.InetAddress.getLocalHost().getHostAddress();
                } catch (Exception e) {
                    // If that failed, at least try "" (localhost) anyway...
                    host = "";
                }
            }
            /*
             * Create a proxy for the registry with the given host, port, and
             * client socket factory.  If the supplied client socket factory is
             * null, then the ref type is a UnicastRef, otherwise the ref type
             * is a UnicastRef2.  If the property
             * java.rmi.server.ignoreStubClasses is true, then the proxy
             * returned is an instance of a dynamic proxy class that implements
             * the Registry interface; otherwise the proxy returned is an
             * instance of the pregenerated stub class for RegistryImpl.
             **/
            LiveRef liveRef =
                new LiveRef(new ObjID(ObjID.REGISTRY_ID),
                            new TCPEndpoint(host, port, csf, null),
                            false);
            RemoteRef ref =
                (csf == null) ? new UnicastRef(liveRef) : new UnicastRef2(liveRef);
            return (Registry) Util.createProxy(RegistryImpl.class, ref, false);
        }
关键点在在于后面这几行代码
        LiveRef liveRef =
            new LiveRef(new ObjID(ObjID.REGISTRY_ID),
                        new TCPEndpoint(host, port, csf, null),
                        false);
        RemoteRef ref =
            (csf == null) ? new UnicastRef(liveRef) : new UnicastRef2(liveRef);
        return (Registry) Util.createProxy(RegistryImpl.class, ref, false);
和`LocateRegistry.createRegistry()`有那么点相似
最关键的在于下面这行
    //几乎一模一样 传递进去的第一个参数都是RegistryImpl.class，第二个参数
    //第二个参数是同样的UnicastRef里面又包含了一个同样的LiveRef，以及最后同样的false
    return (Registry) Util.createProxy(RegistryImpl.class, ref, false);
所以说从源码上分析
`LocateRegistry.getRegistry()`和`LocateRegistry.createRegistry()`最后的返回结果应该是一样的，我们看一下结果
果然不出所料返回的同样都是RegistryImpl_Stub对象，只不过`LocateRegistry.getRegistry()`执行完不会在本地再开一个监听端口罢了。
好了
现在我们有了一个RegistryImpl_Stub对象，我们要用它来将我们的HelloImpl注册到rmiregistry中，用到的是`RegistryImpl_Stub.bind()`方法。
ok，hold on 我们先来了解一下这个`RegistryImpl_Stub`首先该类是继承了RemoteStub，并实现了Registry,
Remote接口(我们的HelloImpl也实现了这个接口)，
该类的方法不多，就下面截图里这么些。没必要全都看，先看bind就行。
bind方法详细代码如下
    //var1为字符串“hello”，var2就是咱们的HelloImpl对象
    public void bind(String var1, Remote var2) throws AccessException, AlreadyBoundException, RemoteException {
        try {
          //这个就不细跟了，想想也知道是用来进行TCP通信的，里面存了rmiregistry的地址信息，具体怎么实现没必要整这么细，第三个参数0关乎到rmiregistry的RegistryImpl_Skel的dispathc方法里的switch究竟case哪一个。
            RemoteCall var3 = this.ref.newCall(this, operations, 0, 4905912898345647071L);
            try {
                //创建一个ConnectionOutputStream对象
                ObjectOutput var4 = var3.getOutputStream();
                //序列化字符串“hello”
                var4.writeObject(var1);
                //序列化HelloImpl对象
                var4.writeObject(var2);
            } catch (IOException var5) {
                throw new MarshalException("error marshalling arguments", var5);
            }
                    //向rmiregistry发送序列化数据
            this.ref.invoke(var3);
            this.ref.done(var3);
        } catch (RuntimeException var6) {
            throw var6;
        } catch (RemoteException var7) {
            throw var7;
        } catch (AlreadyBoundException var8) {
            throw var8;
        } catch (Exception var9) {
            throw new UnexpectedException("undeclared checked exception", var9);
        }
    }
这里需要注意下，这里向rmiregistry发送的是序列化信息，既然一方有序列化的行为那么另一方必然会有反序列化的行为。
到此为止服务端也就是远程方法服务方这边的操作暂且告一段落，因为此时我们的HelloImpl已经注册到了rmiregistry中。
接下来我们返回rmiregistry的代码，来看一看这边的情况。
之前跟踪rmiregistry这边的`LocateRegistry.createRegistry()`这段代码时有经过这样一行代码
        //RegistryImpl_Stub继承自RemoteStub判断成功
    if (var5 instanceof RemoteStub) {
      //为Skeleton赋值，通过this.skel = Util.createSkeleton(var1)来进行赋值，最终Util.createSkeleton(var1)返回的结果为一个RegistryImpl_Skel对象，这个Skeleton后面也会讲
        this.setSkeleton(var1);
    }
这个Skeleton就是前面流程里面的骨架，当执行完上面这两步的时候，UnicastServerRef的skel属性被赋值为一个RegistryImpl_Skel对象
我们来看一下这个RegistryImpl_Skel的相关信息，首先该类实现了Skeleton接口，该类的方法很少，如下图所示
其中最关键的方法就是dispatch方法，我们看下在Skeleton接口中对该方法的一个描述
    /**
     * Unmarshals arguments, calls the actual remote object implementation,
     * and marshals the return value or any exception.
     * 解封装参数，调用实际远程对象实现，并封装返回值或任何异常。
     * @param obj remote implementation to dispatch call to
     * @param theCall object representing remote call
     * @param opnum operation number
     * @param hash stub/skeleton interface hash
     * @exception java.lang.Exception if a general exception occurs.
     * @since JDK1.1
     * @deprecated no replacement
     */
    @Deprecated
    void dispatch(Remote obj, RemoteCall theCall, int opnum, long hash)
        throws Exception;
不难理解该方法就是对传入的远程调用信息进行分派调度的。其部分代码如下。
    //之前在服务端时进行LocateRegistry.getRegistry().bind()操作时
    // RemoteCall var3 = this.ref.newCall(this, operations, 0, 4905912898345647071L);
    //在这一步中封装了四个参数 有三个在这里用到了 var3为0，var2为即为StreamRemoteCall，封装有“hello”字符串和HelloImpl对象的序列化信息。
    public void dispatch(Remote var1, RemoteCall var2, int var3, long var4) throws Exception {
        if (var3 < 0) {
            if (var4 == 7583982177005850366L) {
                var3 = 0;
            } else if (var4 == 2571371476350237748L) {
                var3 = 1;
            } else if (var4 == -7538657168040752697L) {
                var3 = 2;
            } else if (var4 == -8381844669958460146L) {
                var3 = 3;
            } else {
                if (var4 != 7305022919901907578L) {
                    throw new UnmarshalException("invalid method hash");
                }
                var3 = 4;
            }
        } else if (var4 != 4905912898345647071L) {
            throw new SkeletonMismatchException("interface hash mismatch");
        }
            //这个RegistryImpl会在rmiregistry运行期间一直存在，稍后会仔细讲解
        RegistryImpl var6 = (RegistryImpl)var1;
        String var7;
        ObjectInput var8;
        ObjectInput var9;
        Remote var80;
        switch(var3) {
        //var3的值为0，自然是case0
        case 0:
            RegistryImpl.checkAccess("Registry.bind");
            try {
                //获取输入流
                var9 = var2.getInputStream();
                    //反序列化“hello”字符串
                var7 = (String)var9.readObject();
                //这个位置本来是属于反序列化出来的“HelloImpl”对象的，但是最终结果得到的是一个Proxy对像
                //这个很关键，这个Proxy对象即所为的Stub(存根)，客户端就是通过这个Stub来知道服务端的地址和端口号从                            而进行通信的。
                //这里的反序列化点很明显是我们可以利用的，通过RMI服务端执行bind，我们就可以攻击rmiregistry注                册中心，导致其反序列化RCE
                var80 = (Remote)var9.readObject();
            } catch (ClassNotFoundException | IOException var77) {
                throw new UnmarshalException("error unmarshalling arguments", var77);
            } finally {
                var2.releaseInputStream();
            }
                    //RegistryImpl对象有一个binding属性，是一个HashMap，这个HashMap里存储了所有注册了的远程调用方法的方法名，和其对应的stub。
            var6.bind(var7, var80);
                    ......
        }
    }
我们来看一个这个binding属性里的详细信息
从这里我们明白了rmiregistry的本质就是一个HashMap，所有注册过的远程方法以键值对的形式存放在这里，当客户端来查询时，rmiregistry将对应的键值对中的Proxy返回给客户端，这样客户端就知道了服务端的地址和所对应的端口号，就可以进行通信了。
这其中有一个比较关键的类，在后续的绕过高版本JDK
JEP290的白名单是会用到，就是UnicastRef，详观察不难发现该对象中存有rmi服务端的ip地址以及对应远程方法的端口号，该类在客户端、rmiregistry、以及服务端的通信中都起到了非常重要的作用，UnicastRef中有一个newCall方法
具体代码如下。
    public RemoteCall newCall(RemoteObject var1, Operation[] var2, int var3, long var4) throws RemoteException {
        clientRefLog.log(Log.BRIEF, "get connection");
        Connection var6 = this.ref.getChannel().newConnection();
        try {
            clientRefLog.log(Log.VERBOSE, "create call context");
            if (clientCallLog.isLoggable(Log.VERBOSE)) {
                this.logClientCall(var1, var2[var3]);
            }
            StreamRemoteCall var7 = new StreamRemoteCall(var6, this.ref.getObjID(), var3, var4);
            try {
                this.marshalCustomCallData(var7.getOutputStream());
            } catch (IOException var9) {
                throw new MarshalException("error marshaling custom call data");
            }
            return var7;
        } catch (RemoteException var10) {
            this.ref.getChannel().free(var6, false);
            throw var10;
        }
    }
该方法会在java的DGC(分布式垃圾回收机制)中被调用，DGC则是我们绕过高版本JDK反序列化限制的一个重要的环节
首先客户端的代码
    package com.rmiTest.customer;
    import com.rmiTest.IHello;
    import java.rmi.NotBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    public class RMICustomer {
        public static void main(String[] args) throws RemoteException, NotBoundException {
            IHello hello = (IHello) LocateRegistry.getRegistry("127.0.0.1", 1099).lookup("hello");
            System.out.println(hello.sayHello());
        }
    }
`LocateRegistry.getRegistry()`没必要再分析一遍了，直接看lookup方法，部分代码如下
    public Remote lookup(String var1) throws AccessException, NotBoundException, RemoteException {
        try {
            //可以看到这次传递的第三个参数就不是0而是2了，同样的返回一个StreamRemoteCall对象