### Case Study III: Stack Overflow in ip(6)tables-restore

An unexpected stack overflow vulnerability was discovered in the `ip(6)tables-restore` binary. Although our primary focus is on Android native system services, this vulnerability was identified during fuzzing of the `netd` daemon, whose interface file is generated automatically. By crafting a sufficiently long string for the `in_ifName` parameter in the `Call::WAKEUPADDINTERFACE` transaction, which then calls the `wakeupAddInterface` function, we triggered a stack overflow in the `add_param_to_argv` function.

**Figure 7** provides a detailed execution path. However, careful crafting of `in_ifName` is necessary because the string is deserialized from data using `readUtf8FromUtf16`, which performs multiple checks. To successfully exploit this, FANS tags `in_ifName` with `utf8=true` when extracting the interface model and uses the corresponding serialization method `writeUtf8AsUtf16` to serialize `in_ifName` into the data, thereby passing the sanity checks. In contrast, BinderCracker [6] may miss such transactions because popular apps rarely use them. Even if it could capture such a transaction input format, random mutations would likely fail these checks.

#### Insight
This vulnerability spans three processes: the attacker process, `netd`, and `ip(6)tables-restore`. This indicates that the bug is deeply buried. Despite our focus on fuzzing Android native system services, we uncovered a vulnerability in a Linux component, highlighting the close relationship between Android system services and basic Linux components. This suggests an alternative approach to fuzzing Linux components. These bugs are also present in the iptables package and can be found in regular Linux distributions. They were fixed by the netfilter team in April 2019 and assigned CVE-2019-11360. At the time of writing, they have not been fixed in Android.

## Discussion

We have demonstrated FANS's effectiveness in discovering vulnerabilities in Android native system services. Now, we discuss its limitations and future directions.

### Interface Model Accuracy
Although we have made efforts to extract accurate interface models, they are not perfect. For example, we assume the loop size is the previous variable when the loop size cannot be directly determined. However, for loops that traverse linked lists, the loop size is undetermined, making it difficult to improve accuracy. Additionally, developers might accidentally use the original type instead of a semantic type alias, affecting variable dependency generation. The dependencies we generate may also be incomplete due to the specific order of transaction calls, as services can be seen as state machines. While following the specified order during fuzzing might help, it can also lead to missing some vulnerabilities. We have already found vulnerabilities caused by incomplete state machine processing in services.

### Coverage-Guided Fuzzing
Coverage-guided fuzzing is a popular technique. Although FANS does not use coverage knowledge of Android native system services, it has discovered many vulnerabilities in services audited by experts. We believe that incorporating coverage guidance could help FANS find even more vulnerabilities. However, system services are state-sensitive, and their coverage can be affected by previously generated inputs or calls from other applications, posing a challenge for integrating coverage into FANS.

### Fuzzing Efficiency
Some Android system services run as daemons or check caller permissions. For convenience, we run the fuzzer as root. However, high root privileges can cause significant changes. During experiments, a smartphone entered recovery mode just ten minutes after starting the fuzzer, requiring manual flashing, which significantly impacted FANS's efficiency. This issue can be addressed by limiting the fuzzer's privileges or finding a way to automatically flash the device.

### Interface-Based Fuzzing in Android
In Android 9, there are three types of services in different domains: normal, vendor, and hardware. In Pixel series products, applications can only access normal domain services registered in the service manager. This paper focuses on native system services in the normal domain. However, all three types of services share the same communication and interface implementation architecture, allowing us to apply the methods described here to other domain services, including those implemented in Java. There are also customized interfaces designed to be implemented and instantiated by applications and passed to the server-side by clients. We can fuzz these implementations using the proposed methods, though manual instantiation is required.

## Related Work

### IPC and Service Security in Android
While the security of the Android operating system has been a focus of academic and industrial research, similar studies on IPC and system services are limited. Early research focused on vulnerable Intents in userland applications. Gong [7] was the first to highlight the importance of the Binder IPC interface, proving it insecure by manually discovering critical vulnerabilities. Wang et al. [12] proposed fuzzing Java interfaces generated from AIDL files, while Chizpurfle [10] targeted vendor-implemented Java services. Other research [3, 26] focused on input validation vulnerabilities related to Android services, and several studies [1, 8, 17] concentrated on inconsistencies in access control within the Android framework.

BinderCracker [6] extended testing to native services by monitoring IPC traffic of popular user apps, inferring input models and transaction dependencies, and generating new test cases. However, this approach depends heavily on the diversity of recorded traffic and is not always effective. It cannot systematically recognize all interfaces, including multi-level ones, and the inferred interface models and transaction dependencies are neither complete nor precise.

### Fuzzing for Structured Input
Various approaches have been proposed to generate structured input for fuzzing, generally falling into two categories: generation-based and mutation-based. Generation-based fuzzers, like Peach [5], generate test cases from templates or predefined grammars. Mutation-based fuzzers, such as VUzzer [14], mutate existing test cases without any input grammar or model. Recent hybrid fuzzers, like QSYM [24], combine fuzzing with concolic execution, which shows promise for fuzzing programs with structured inputs.

## Conclusion

FANS is designed to address the challenges in fuzzing Android native system services. Experiments have validated its ability to automatically generate transactions and invoke corresponding interfaces, significantly aiding in the fuzzing of these services. Our evaluation shows that FANS can infer complex dependencies between interfaces. We ran FANS on six smartphones for about 30 days and reported 30 native vulnerabilities to Google, of which 20 have been confirmed. These findings suggest that a precise interface model is essential for deep fuzzing of Android native system services. Additionally, 138 Java exceptions were exposed, warranting further study.

## Acknowledgements

We thank all anonymous reviewers and our shepherd, Dr. Manuel Egele, for their valuable feedback. We also thank Xingman Chen, Kaixiang Chen, and Zheming Li for revising the draft. This work was supported in part by the National Natural Science Foundation of China under Grants 61772308, 61972224, U1736209, and U1936121, and the BNRist Network and Software Security Research Program under Grants BNR2019TD01004 and BNR2019RC01009.

## References
[References listed as provided, with proper formatting and citation.]

### Appendix
**A.1 Full Interface Dependency Graph**

[Graph image and legend as provided, with proper formatting and clarity.]