niques may cause performance or compatibility problems, in
which case one might rely on techniques designed to detect
memory error exploits such as address-space randomization
[1, 4].
Network IDS and Payload Anomaly Detection Tech-
niques
Network IDS, such as Snort and Bro, scan the content
of packets in search of known attack signatures. However,
signatures aren’t available for unknown exploits, and hence
a successful persistent interposition attack can be crafted
based on such exploits.
Several techniques have emerged recently that detect in-
trusions by identifying anomalies in protocol payload data
[33, 21]. Such content-based intrusion detection systems
have been based on statistical analysis of input requests to
a server, and recognizing anomalies such as binary data, or
data with other unusual characteristics. These systems fall
outside our deﬁnition of I/O data obliviousness. However,
other researchers [9] have already developed techniques that
are orthogonal to ours in order to evade existing content-
based IDS. These techniques rely on encoding attack inputs
in such a manner that their characteristics (e.g., byte fre-
quency distribution) conform to the normal proﬁle used by
the IDS (e.g., PAYL [33]). These techniques can easily be
combined with our attack technique since it gives the at-
tacker full control over the contents of attack inputs as well
as all outputs of the victim server.
6. Related Work
We limit our discussions in this section to mimicry attacks
and other related work that hasn’t previously been discussed
in this paper. Wagner and Soto [31] pioneered the concept
of mimicry attacks. They suggest several strategies for con-
structing mimicry attacks, but ultimately choose one that
165
hijacks control-ﬂow of the victim application, and executes
a system call sequence that is consistent with the application
model used by the IDS. The attacker’s objectives could still
be achieved by altering the arguments to these system calls,
since the IDS they considered didn’t monitor system-call ar-
guments. All subsequent works on mimicry attacks [29, 11,
20, 15] have relied on this strategy that couples control-ﬂow
hijack with modiﬁcations to system-call arguments.
Wagner and Soto pose the problem of generating such an
attack sequence as a ﬁnite-state automata intersection prob-
lem, and generated a mimicry attack consisting of over 100
system calls that achieves the eﬀect desired by an initial ex-
ploit consisting of 8 system calls. However, they did not
implement a working mimicry attack. This problem was ad-
dressed by Tan et al [29], but their focus was on black-box
IDS. Ours is the ﬁrst working mimicry attack against real-
world applications protected by gray-box IDS.
Gao et al [11] coined the term gray-box anomaly detector,
and developed an elegant framework that uniﬁed previously
known system-call anomaly detectors [16, 27, 8, 34], and
further generalized them. They evaluate these anomaly de-
tectors in terms of their resistance to mimicry attacks. For
programs such as wu-ftpd and Apache httpd, they show that
the minimum possible length of mimicry attacks is between
5 and 50 system calls, with the sequence length increasing
with the precision of models.
Recent research has targeted the two main problems in
developing the kinds of mimicry attacks described above.
First, manual generation of these mimicry attacks is hard,
given that typical attack sequences consist of several tens
to hundreds of system calls. Second, as described in the
Introduction, it is diﬃcult for the attack code to make a
series of system calls against a gray-box IDS.
Giﬃn et al [15] generate mimicry attack sequences using
techniques from model-checking. The input to the model
checker includes a (manually developed) speciﬁcation of OS
behavior, the program behavior model used by the IDS, and
a speciﬁcation that characterizes an “unsafe” OS state de-
sired by an attacker. By using the OS model, their tech-
nique can generate all possible mimicry attacks that achieve
the OS state desired by the attacker, instead of being lim-
ited by an initial exploit that served as the starting point for
previous works. Moreover, the OS model enables the gener-
ation of arguments to system calls used in a mimicry attack.
Although their formulation can handle push-down models,
their evaluation considered the ﬁnite-state models generated
by the Stide technique [16]. They did not consider gray-box
IDS.
A signiﬁcant problem when generating mimicry attacks
against gray-box IDS is that system calls cannot be made
directly by attack code, since the IDS can then detect the
presence of a return address on the stack that falls outside
of the program text. To cope with this problem, Gao et al
[11] suggest that the attack code must jump to existing code
in the victim application that will then make the system
call on behalf of the application. However, this means that
after the execution of system call, control will return back
to the application rather than the attack code. To regain
control, they suggest modiﬁcation of a code pointer used
by the application code following the system call so that it
points back to the attack code. They showed the feasibility
of this technique on a small example program, but manual
development of mimicry attacks based on this technique for
realistic programs poses a daunting challenge.
Kruegel et al [20] address the above challenge with a novel
technique that automates the steps needed for regaining con-
trol. Speciﬁcally, they use symbolic code execution to com-
pute relationships between the memory (and register) con-
tents at the point where the attack code jumps into the ap-
plication code, and the code pointers used subsequently by
this code. By analyzing these relationships, their analysis
identiﬁes if control can be regained, and if so, the memory
locations that need to be modiﬁed and their contents. They
demonstrated their technique on three example programs
(about 30 lines each), as well as real applications such as
Apache, showing that about 90% of the time, control could
be successfully returned to the attack code. However, the
focus of their evaluation was to demonstrate the ability of
their symbolic execution technique to generate conﬁgura-
tions that can return control back to the attack code. As
mentioned before, several additional problems that need to
be addressed before constructing working mimicry attacks
against real-world applications were left open.
7. Conclusion
It is well known that no intrusion detection system can
precisely capture all deviations from an application’s cor-
rect behavior, but our research shows that, with relatively
little engineering eﬀort, adversaries can execute powerful at-
tacks while blending in almost undetectably with the se-
quences of system calls normally executed by an application.
Our attack can evade all system-call-based intrusion detec-
tion systems with which we are familiar. The need to work
against powerful system-call monitors that examine almost
all system-call arguments will typically prevent persistent
interposition attacks from achieving arbitrary goals such as
gaining a root-shell, but we showed that typical end-goals
such as stealing credit-cards or hijacking and impersonating
servers can be achieved.
Whereas previous mimicry attacks required static analy-
ses to discover system call sequences that can compromise
an IDS, and to regain control between these system calls,
our technique side-steps these problems by “co-opting” the
vulnerable application into invoking the attack code at con-
venient points during its execution. As a result, persistent
interposition attacks are practical for today’s hackers to im-
plement using skills and tools they already have, making
them a more realistic threat as compared to prior mimicry
attacks.
Persistent interposition attacks demonstrate the limits of
system-call monitoring defenses in general, as any defense
that could detect our attack would begin to emulate the
monitored victim application. They call into question the
feasibility of developing system-call monitors that can reli-
ably detect the most common type of attack prevalent today,
namely, code-injection attacks.
Our results don’t imply the absence of practical defenses
against persistent interposition attacks. As discussed ear-
lier, code injection defenses, as well as memory error exploit
defenses, will defeat these attacks. But our results do high-
light the importance of deploying dedicated defenses against
powerful attack vectors such as memory errors, rather than
relying on the secondary line of defense provided by intrusion
166
detection systems.
8. References
[1] The PaX team. http://pax.grsecurity.net.
[2] Martin Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay
Ligatti. Control-ﬂow integrity - principles, implementations,
and applications. In ACM conference on Computer and
Communications Security (CCS), 2005.
[3] S. Bhatkar, A. Chaturvedi, and R. Sekar. Dataﬂow anomaly
detection. In IEEE Symposium on Security and Privacy,
2006.
[4] Sandeep Bhatkar, R. Sekar, and Daniel C. DuVarney.
Eﬃcient techniques for comprehensive protection from
memory error exploits. In Proceedings of the 14th Usenix
Security Symposium, pages 271–286, August 2005.
[5] Shuo Chen, Jun Xu, Emre C. Sezer, Prachi Gauriar, and
Ravi Iyer. Non-control-data attacks are realistic threats. In
USENIX Security Symposium, Baltimore, MD, August
2005.
[6] “Solar Eclipse”. openssl-too-open. http:
//www.phreedom.org/solar/exploits/apache-openssl/.
[7] H. Feng, J.T. Giﬃn, Y. Huang, S. Jha, W. Lee, and B. P.
Miller. Formalizing sensitivity in static analysis for
intrusion detection. In IEEE Symposium on Security and
Privacy, 2004.
[8] H. Feng, O. Kolesnikov, P. Folga, W. Lee, and W. Gong.
Anomaly detection using call stack information. In IEEE
Symposium on Security and Privacy, May 2003.
[9] Prahlad Fogla, Monirul Sharif, Roberto Perdisci, Oleg
Kolesnikov, and Wenke Lee. Polymorphic blending attacks.
In USENIX Security Symposium, August 2006.
[10] Debin Gao, Michael K. Reiter, and Dawn Song. Gray-box
extraction of execution graphs for anomaly detection. In
ACM conference on Computer and Communications
Security (CCS), pages 318–329, Washington, DC, October
2004.
[18] Calvin Ko, George Fink, and Karl Levitt. Automated
detection of vulnerabilities in privileged programs by
execution monitoring. In Annual Computer Security
Applications Conference (ACSAC), December 1994.
[19] C. Kruegel, D. Mutz, F. Valeur, and G. Vigna. On the
detection of anomalous system call arguments. In European
Symposium on Research in Computer Security, Gjøvik,
Norway, October 2003.
[20] Christopher Kruegel, Engin Kirda, Darren Mutz, William
Robertson, and Giovanni Vigna. Automating mimicry
attacks using static binary analysis. In USENIX Security
Symposium, Baltimore, MD, August 2005.
[21] Christopher Kruegel and Giovanni Vigna. Anomaly
detection of web-based attacks. In Proceedings of the 10th
ACM Conference on Computer and Communications
Security (CCS), 2003.
[22] Lap Chung Lam and T. Chiueh. Automatic extraction of
accurate application-speciﬁc sandboxing policy. In Recent
Advances in Intrusion Detection (RAID), Sophia Antipolis,
French Riviera, France, September 2004.
[23] P. Loscocco and S. Smalley. Integrating ﬂexible support for
security policies into the linux operating system. In Proc. of
the FREENIX Track: 2001 USENIX Annual Technical
Conference, 2001.
[24] George C. Necula, Scott McPeak, and Westley Weimer.
CCured: type-safe retroﬁtting of legacy code. In
Symposium on Principles of Programming Languages
(POPL ’02), pages 128–139, Portland, OR, January 2002.
[25] Niels Provos. Improving host security with system call
policies. In USENIX Security Symposium, Washington, DC,
USA, August 2003.
[26] Olatunji Ruwase and Monica S. Lam. A practical dynamic
buﬀer overﬂow detector. In Network and Distributed
System Security Symposium (NDSS), February 2004.
[27] R. Sekar, M. Bendre, P. Bollineni, and D. Dhurjati. A fast
automaton-based method for detecting anomalous program
behaviors. In IEEE Symposium on Security and Privacy,
2001.
[11] Debin Gao, Michael K. Reiter, and Dawn Song. On
[28] R. Sekar and P. Uppuluri. Synthesizing fast intrusion
gray-box program tracking for anomaly detection. In
USENIX Security Symposium, pages 103–118, San Diego,
CA, USA, August 2004.
[12] T. Garﬁnkel, B. Pfaﬀ, and M. Rosenblum. Ostia: A
delegating architecture for secure system call interposition.
In USENIX Security Symposium, Washington, DC, USA,
August 2003.
prevention/detection systems from high-level speciﬁcations.
In Usenix Security Symposium, August 1999.
[29] Kymie Tan, Kevin Killourhy, and Roy Maxion.
Undermining an anomaly-based intrusion detection system
using common exploits. In Recent Advances in Intrusion
Detection (RAID), LNCS 2516, pages 54–73, Zurich,
Switzerland, October 2002. Springer-Verlag.
[13] Jonathon T. Giﬃn, David Dagon, Somesh Jha, Wenke Lee,
[30] G. Tandon and P. Chan. Learning rules from system call
and Barton P. Miller. Environment-sensitive intrusion
detection. In Recent Advances in Intrusion Detection
(RAID), September 2005.
arguments and sequences for anomaly detection. In ICDM
Workshop on Data Mining for Computer Security
(DMSEC), pages 20–29, 2003.
[14] Jonathon T Giﬃn, Somesh Jha, and Barton P. Miller.
Eﬃcient context-sensitive intrusion detection. In Network
and Distributed System Security Symposium, San Diego,
CA, February 2004.
[15] Jonathon T. Giﬃn, Somesh Jha, and Barton P. Miller.
Automated discovery of mimicry attacks. In Diego Zamboni
and Christopher Kr¨ugel, editors, RAID, volume 4219 of
Lecture Notes in Computer Science, pages 41–60. Springer,
2006.
[16] Steven A. Hofmeyr, Stephanie Forrest, and Anil Somayaji.
Intrusion detection using sequences of system calls. Journal
of Computer Security (JCS), 6(3):151–180, 1998.
[17] Robert W. M. Jones and Paul H. J. Kelly.
Backwards-compatible bounds checking for arrays and
pointers in C programs. In M. Kamkar and D. Byers,
editors, Third International Workshop on Automated
Debugging. Linkoping University Electronic Press, 1997.
[31] D. Wagner and P. Soto. Mimicry attacks on host based
intrusion detection systems. In ACM conference on
Computer and Communications Security (CCS), 2002.
[32] David Wagner and Drew Dean. Intrusion detection via
static analysis. In IEEE Symposium on Security and
Privacy, Oakland, CA, May 2001.
[33] Ke Wang and Salvatore J. Stolfo. Anomalous payload-based
network intrusion detection. In Proceeding of 7th
International Symposium on Recent Advances in Intrusion
Detection (RAID), 2004.
[34] A. Wespi, M. Dacier, and H. Debar. Intrusion detection
using variable-length audit trail patterns. In Recent
Advances in Intrusion Detection (RAID), Toulouse, France,
October 2000.
167