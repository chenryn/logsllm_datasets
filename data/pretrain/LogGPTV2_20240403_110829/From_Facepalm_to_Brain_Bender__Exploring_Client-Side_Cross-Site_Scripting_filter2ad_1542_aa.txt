title:From Facepalm to Brain Bender: Exploring Client-Side Cross-Site Scripting
author:Ben Stock and
Stephan Pfistner and
Bernd Kaiser and
Sebastian Lekies and
Martin Johns
From Facepalm to Brain Bender:
Exploring Client-Side Cross-Site Scripting
Ben Stock
FAU Erlangen-Nuremberg
PI:EMAIL
Stephan Pﬁstner
SAP SE
stephan.pﬁPI:EMAIL
Bernd Kaiser
FAU Erlangen-Nuremberg
PI:EMAIL
Sebastian Lekies
Ruhr-University Bochum
PI:EMAIL
Martin Johns
SAP SE
PI:EMAIL
ABSTRACT
Although studies have shown that at least one in ten Web
pages contains a client-side XSS vulnerability, the prevalent
causes for this class of Cross-Site Scripting have not been
studied in depth. Therefore, in this paper, we present a
large-scale study to gain insight into these causes. To this
end, we analyze a set of 1,273 real-world vulnerabilities con-
tained on the Alexa Top 10k domains using a speciﬁcally
designed architecture, consisting of an infrastructure which
allows us to persist and replay vulnerabilities to ensure a
sound analysis. In combination with a taint-aware browsing
engine, we can therefore collect important execution trace
information for all ﬂaws.
Based on the observable characteristics of the vulnerable
JavaScript, we derive a set of metrics to measure the com-
plexity of each ﬂaw. We subsequently classify all vulnerabil-
ities in our data set accordingly to enable a more systematic
analysis. In doing so, we ﬁnd that although a large portion
of all vulnerabilities have a low complexity rating, several
incur a signiﬁcant level of complexity and are repeatedly
caused by vulnerable third-party scripts.
In addition, we
gain insights into other factors related to the existence of
client-side XSS ﬂaws, such as missing knowledge of browser-
provided APIs, and ﬁnd that the root causes for Client-Side
Cross-Site Scripting range from unaware developers to in-
compatible ﬁrst- and third-party code.
Categories and Subject Descriptors
H.4.3 [Communications Applications]: Information
browsers; C.2.0 [General]: Security and protection
Keywords
Client-Side XSS; Analysis; Complexity Metrics
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813625.
1.
INTRODUCTION
In recent years, Web applications showed a notable move
of functionality from the server side towards the client side,
where the functionality is realized by the Web browser’s
JavaScript engine. This trend was caused by various fac-
tors, such as the addition of new capabilities in the form
of powerful HTML5 APIs, the signiﬁcantly increased per-
formance of modern JavaScript engines, and the availability
of convenient mature JavaScript programming libraries like
jQuery. With the growing amount of JavaScript code exe-
cuted in the Web browser, an increase in purely client-side
vulnerabilities can be observed, with the class of Client-Side
Cross-site Scripting (also known as DOM-based XSS [11])
being among the most sever security issues. Our previous
work demonstrated that about 10% of the Alexa Top 10k
carry at least one exploitable client-side XSS vulnerability,
with current ﬁltering approaches being unable to stop such
exploits [27]. Like most security vulnerabilities, client-side
XSS is caused by insecure coding. The underlying reasons
for that insecure code, however, are mostly unexplored.
Are developers simply overwhelmed by the complexity of
the client-side code? The increase in functionality on the
client side naturally increases the amount of code that is ex-
ecuted in a Web page. This also holds true for code which
causes the client-side XSS ﬂaws and in turn leads to an in-
crease in the complexity of a developer’s task to spot vul-
nerable data ﬂows.
Alternatively, is the missing security awareness of Web
programmers the dominant causing factor? The DOM and
the current JavaScript engines oﬀer many diﬀerent methods
to turn arbitrary strings into executable code. Therefore,
the use of insecure APIs seems natural to an average devel-
oper for solving common problems like the interaction with
the page (e.g. using innerHTML) or parsing JSON (e.g. us-
ing eval). Although secure APIs exist in modern browsers,
these insecure ways of dealing with such problems are often
much faster and more convenient, albeit potentially making
a site susceptible to a client-side XSS ﬂaw.
Or is the rise in client-side vulnerabilities rooted in the
Web’s unique programming model? Compared to classic ap-
plication platforms and programming languages, the Web
model oﬀers numerous open and hidden complexities: The
combination of the browser’s Document Object Model API
(or DOM API ), the highly dynamic nature of JavaScript,
and the process in which Web content is assembled on the ﬂy
within the browser, frequently leads to non-obvious control
and data ﬂows that can potentially cause security problems.
1419In this paper, we systematically examine this problem
space. To do so, we investigate a large set of real-world
zero-day vulnerabilities to gain insights into the complexity
of client-side XSS vulnerabilities. Our goal is to determine
if such vulnerabilities are easy to spot by security-conscious
developers or whether the complex nature of the Web plat-
form hinders detection even for security professionals.
This paper makes the following contributions:
• We examine client-side XSS vulnerabilities and iden-
tify characteristic features of complex JavaScript code.
Based on these, we deﬁne a set of metrics to measure
that complexity (Section 3).
• We implement and present an infrastructure that al-
lows us to persist vulnerable code, and enables us to
gather all data needed to apply our metrics (Section 4).
• We report on a study of 1,273 real-world vulnerabili-
ties, derive a set of boundaries for our metrics and use
these to assign a complexity score to all of the vulner-
abilities (Section 5).
• We discuss additional insights gathered from our data,
showing that causes for client-side XSS are manifold
(Section 6).
2. CLIENT-SIDE XSS
Cross-Site Scripting (also called XSS ) is a class of code-
injection vulnerability in the browser. Web applications run
in a protected environment, such that only code from the
same origin as the application can interact with it. There-
fore, the goal of an XSS attacker is to execute arbitrary
JavaScript code in the browser of his victim, in the context
(or origin) of the vulnerable Web page. If successful, this
allows him to conduct any action in the name of the victim-
ized user, e.g., using the application as the user or retrieving
secret information such as cookies.
While server-side XSS attacks have been known for a num-
ber of years, the youngest representative, i.e., client-side
XSS, was ﬁrst discussed in 2005 by Amit Klein [11]. Rather
than being caused by vulnerable server-side code, this class
of vulnerability occurs if user-provided input is insecurely
processed on the client side, e.g., by using this data for a
call to document.write, as shown in Listing 1 using the lo-
cation, which returns the current URL.
From a conceptual standpoint, XSS is caused when an un-
ﬁltered data ﬂow occurs from an attacker-controlled source
to a security-sensitive sink. In the concrete case of client-side
XSS, such a source can be, e.g., the URL, whereas an exam-
ple for a sink is eval or document.write. Both these APIs
accept strings as parameters, which are subsequently parsed
and executed as code (JavaScript and HTML, respectively).
Therefore, passing attacker-controllable input to such func-
tions eventually leads to execution of the attacker-provided
code. There are additional sinks, which do not allow for di-
rect code execution (such as cookies or Web Storage). These
sinks, however, are not in the focus of our work.
3. CHARACTERIZING CLIENT-SIDE XSS
The goal of our work is to gather insights into the root
causes of client-side XSS ﬂaws on the Web, ﬁrst and foremost
to answer the question whether the complexity of client-side
code is the primary causing factor. In order to spot a vulner-
ability, an analyst has to follow the data ﬂow from source to
sink and fully understand all operations that are performed
on the data, with several properties increasing the diﬃculty
of this task. In the following, we discuss several measurable
properties of the perceived analysis complexity and present
metrics to measure them accordingly. In addition to these,
vulnerabilities have characteristics which do not necessarily
have an impact on the complexity of a ﬂaw, but provide
interesting additional insights. Therefore, after presenting
the measurable properties and matching metrics, we discuss
these additional characteristics.
3.1 Measurable Properties of JS Complexity
In this section, we outline properties which we deem use-
ful in determining how hard it is for an analyst to spot a
vulnerable ﬂow of data in JavaScript code. For each of the
properties, we then deﬁne a metric that measures the per-
ceived complexity.
3.1.1 Number of Operations on the Tainted Data
In our notion, data that originates from a user-controllable
source is considered tainted. A client-side XSS vulnerabil-
ity constitutes a ﬂow of such tainted data from a source to
a security-critical sink. An analyst therefore has to decide
whether the user-provided data is ﬁltered or encoded prop-
erly and, thus, must understand all operations conducted on
that data. Thus, one necessary consideration to make is that
each operation naturally increases the perceived complexity
as more code has to analyzed and understood. Such oper-
ations can either be read accesses, e.g., regular expression
checking, or write accesses to the data, such as concat.
Therefore, we deﬁne our ﬁrst metric, M1, to measure the
number of string-accessing operations which are conducted
in a read or write manner throughout the ﬂow of attacker-
controllable data from source to sink, including source and
sink access. In order to not over-approximate this number,
we join the same type of operations on a per-line level, e.g.,
several concatenating operations on the same line are treated
as a single operation. An example of such a case is shown
in Listing 1, where two concatenation operations occur in
one line. Therefore, our metric M1 measures this snippet to
have three operations, i.e., source access, concatenation and
sink access. In real-world vulnerabilities, the string which
eventually ends in a sink may consist of substrings that orig-
inated from diﬀerent sources. Therefore, we use M1 to mea-
sure the longest sequence of operations between any source
access and the ﬁnal sink access.
// actual code
document.write("this page")
// as interpreted by our metric
var x = location; // source access
var y = "this page"; // joined concats
document.write(y); // sink access
Listing 1: Vulnerability Example
3.1.2 Number of Involved Functions
JavaScript, not unlike any other programming language,
employs the concept of functions, which can be used to split
up functionality into smaller units. While this is best prac-
tice in software engineering, it increases the diﬃculty a secu-
rity auditor has to overcome as he has to understand speciﬁ-
cally what each of these units does. Therefore, in addition to
the number of operations which are conducted on a tainted
1420string, the number of functions that are traversed is another
indicator for the complexity of a ﬂow or a vulnerability.
We therefore deﬁne our second metric, M2, to count the
number of functions which are passed between source and
sink access. Although all code may also reside in the top
execution level, i.e., not speciﬁcally within deﬁned functions
but rather in a virtual main function, the minimum number
of traversed functions must always be one. In this context,
we deﬁne the virtual main to be the main JavaScript ex-
ecution thread which executes all inline script blocks and
external JavaScript ﬁles.
3.1.3 Number of Involved Contexts
The Web’s model allows for JavaScript ﬁles to be included
from other sites, while inheriting the including page’s origin
and, thus, running in that origin. Therefore, a single Java-
Script block or ﬁle is not executed independently, but within
a Web page possible containing tens of other JavaScript re-
sources, potentially stemming from other domains and de-
velopers. The main interaction point of all these scripts is
the global object, in the case of the browser the window ob-
ject. Since all script elements within a Web page may gain
access to that object, diﬀerent snippets may register global
variable or functions to allow for interaction with other parts
of the executed code.
In our notion, we call each of these script elements, which
the analyst has to fully understand to decide whether a ﬂow
might be vulnerable, contexts. Thus, we deﬁne our third
metric, M3, to count the number of contexts which are tra-
versed in the execution of a vulnerable JavaScript program
between source and sink.
3.1.4 Code Locality of Source and Sink
In order to understand that a certain ﬂow constitutes a
vulnerability, an analyst has to inspect all the code between
the source and respective sink access. Naturally, this is eas-
ier if not only the number of operations that are conducted
is low, but also both source- and sink-accessing operations
are within a smaller number of lines of code. In contrast,
even if the number of operations is low, a vulnerability is
harder to detect if source and sink access are further apart
in the code, as the analyst has to speciﬁcally search for the
tainted variables to be used again.
Thus, as a fourth metric, M4, we measure the amount
of code between source and sink access. This metric, how-
ever, can only be applied to vulnerabilities ﬂow which the