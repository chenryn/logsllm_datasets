creation and destruction, one PFA for TX rate, and one PFA for RX rate. Cogo
uses the PFAs to compute the probability of observed measurements in the online
phase. In the following, we present a training algorithm that runs in time linear
in the measurements length, making Cogo attractive and realistic for real-world
deployment.
Practical and Accurate Runtime Application Protection
455
Constructing Bounded Generalized Suﬃx Trees. To construct each
resource PFA, ﬁrst, Cogo builds a bounded Generalized Suﬃx Tree (GST) from
the resource measurements. (A suﬃx tree is a tree containing all suﬃxes of a
given string. A GST is a suﬃx tree for a set of strings.) Given a set of strings S
over an alphabet Σ (a ﬁnite set of symbols), a GST over S contains a path from
the root to some leaf node for each suﬃx in S. Each edge in the GST is labeled
with a non-empty substring in S; the labels of outgoing edges from the same
node must begin with unique symbols. A GST can be constructed in linear time
and space O(n) where n is the total number of symbols in S, using Ukkonen’s
algorithm [36]. A GST allows eﬃcient implementations of several string query
operations over sets of strings such as linear time substring searching and ﬁnding
the longest common substring among all the strings in the set. Cogo limits the
depth of the GST by processing the measurements into non-overlapping subse-
quences of maximum length L.5 This bounds the depth of the GST to L and the
space requirements per GST to O(|S|L).
After constructing the bounded GST, Cogo counts the number of occurrences
of each substring in the tree. This corresponds to the number of leaf nodes in
the subtree rooted at each node in the tree. These counts are computed in a
single depth-ﬁrst traversal of the GST. For each parent-child nodes in the tree,
the ratio between the child’s count to the parent’s count gives the conditional
probability of seeing the ﬁrst symbol of the corresponding child substring after
the parent’s. More formally, the prediction probability of a symbol sj after a
substring sisi+1 . . . sj−1 can be computed as:
P (sj|sisi+1...sj−1) =
count(sisi+1...sj−1sj)
count(sisi+1...sj−1)
,
(1)
which Cogo computes on-the-ﬂy during the depth-ﬁrst traversal of the GST to
count the substrings, and stores it in each child node in the tree.
Inferring the PFAs. Cogo infers a PFA from the GST. Each PFA is a 5-tuple
(Σ, Q, π, τ, γ), where: Σ is a ﬁnite set of symbols processed by the PFA; Q is
a ﬁnite set of states, and q◦ ∈ Q is the start state; τ : Q×Σ → Q is the state
transition function; and, γ : Q× Σ → [0, 1] is the transition probability function.
To infer a PFA from the GST, Cogo starts by creating a forest of unconnected
PFA nodes where each node has a unique ID and corresponds to exactly one
node in the GST. It then traverses the GST in depth-ﬁrst order: For each edge
between each parent (source) and child (destination) nodes in the GST, Cogo
checks the length of the edge label. If the label has exactly one symbol, Cogo
adds a transition between the corresponding source and destination nodes in the
PFA, sets the transition probability to the child node probability in the GST,
and sets the transition symbol to the edge label. If the edge has a label of length
5 We found that non-overlapping subsequences were suﬃcient for large-scale deploy-
ments. However, it may be desired to overlap subsequences to maximize ﬁdelity of
very small datasets.
456
M. Elsabagh et al.
greater than one, i.e., the label is a substring consisting of multiple symbols,
Cogo adds nodes to the PFA corresponding to each inner symbol in the label;
adds a PFA transition from the source state to the node corresponding to the ﬁrst
symbol in the label; and adds another transition from the last inner symbol in
−−−−−−−→ v in
the label to the destination node. Formally put, given the edge u
−−−−−−−−−−−−−−−−→ •
the GST, Cogo adds the following path to the PFA: u(cid:4) si,count(u[si])/count(u)
−−−−−→ . . .
−−−−−→ • sj ,1.0−−−→ v(cid:4) where u(cid:4) and v(cid:4) are the corresponding nodes in
the PFA of u and v. Recall that transitions in the PFA hold both a transition
symbol and an emitted probability.
sisi+1...sj
sj−1,1.0
si+1,1.0
At this stage, this initial PFA contains paths that correspond to the sub-
strings from the GST, and can be used for prediction so long as the entire
substring is in the tree. However, if the next symbol following some substring is
not in the tree, then a Markovian decision need be made since it may still be pos-
sible to predict the symbol using a shorter suﬃx. For this, the GST suﬃx links
are used to ﬁnd the next immediate suﬃx. In a GST, the node corresponding to
the string si . . . sj has a suﬃx link (a pointer) to the internal node corresponding
to the string si+1 . . . sj, i.e., its immediate suﬃx. This enables jumping to the
next available context (history) in constant time. Cogo utilizes the suﬃx links to
complete the PFA construction in the following manner: For each node u (visited
during the depth-ﬁrst traversal) and for each symbol σ ∈ Σ that does not mark
any outgoing edge from u, Cogo follows the suﬃx links starting from u until:
1. An internal node v is reached where the ﬁrst symbol of the substring repre-
sented by that node equals σ. In this case, Cogo adds a transition between
the corresponding two nodes to u and v in the PFA. It sets the transition
symbol to σ and the transition probability to that stored in v in the GST.
2. The root of the GST is reached and it has an edge with a label that begins
with σ to some child node v. Here, Cogo adds a transition between the cor-
responding u and v nodes in the PFA. It sets the transition symbol to σ and
the transition probability to that stored in v.
3. The root is reached but it has no outgoing edges for σ. In this case, a loop-
back transition on σ from u to itself is added and the transition probability is
set to ρmin (a small predeﬁned value for the minimum transition probability).
Since the GST contains all suﬃxes, the resulting PFA would contain outgo-
ing edges from the start state that never preﬁxed the training sequences. This
can result in the PFA accepting anomalous behavior if an attack occurs at the
very beginning of execution of a target process. Cogo eliminates those spurious
transitions by keeping a set of the initials of the training sequences and pruning
outgoing start state transitions from the PFA that do not correspond to those
initials. This is done in constant time (|Σ| comparisons). Using a single depth-
ﬁrst traversal, Cogo also removes any transitions that have a probability less
than or equal to ρmin and replaces them with loop-back transitions with ρmin
probability. During the same traversal, Cogo normalizes the probabilities across
outgoing edges from each node.
Practical and Accurate Runtime Application Protection
457
Minimizing the PFAs. The PFA may contain redundancy such as unreach-
able states (because of eliminated transitions) or overlapping paths, resulting in
unnecessary space overhead. To overcome this, Cogo minimizes the PFA using
the following greedy approach. The goal is to reduce the size of the PFA as much
as possible without incurring excessive training overhead, i.e., reduction time has
to be linear in the size of the PFA. The minimization algorithm is based on the
insight that paths farther away from the PFA root (the start state) are more
likely to overlap sine they represent longer substrings.
Cogo iterates over the PFA in breadth-ﬁrst order. Each time it visits a new
state u, it searches for all previously visited states that are fully equivalent to
the u. Two states are fully equivalent if they have the same outgoing transitions
with the same transition symbols, probabilities, and destination states for each
transition. Cogo groups all the equivalent states into a single state set. This
process continues till all states in the PFA are visited, producing a set family of
states. After that, all equivalent states set are removed and replaced with a single
state in the PFA. The process is repeated on the resulting PFA till any of the
following conditions occur: (1) Tthe PFA stops changing. (2) The minimization
ratio, i.e., the size of the resulting PFA divided by the size of the old PFA,
drops below some user deﬁned threshold θ (defaults to 0.1). (3) The number of
repetitions exceeds a user chosen threshold ζ (defaults to 100). The 2nd condition
terminates the minimization stage once a diminishing returns point is reached.
The 3rd condition gives the user the ability to control the hidden constant c
of the minimization complexity O(cn). This completes the construction of the
PFA. Figure 1 illustrates an example of a bounded GST and the PFA inferred
by Cogo from the set {01001101, 01010100} where L = 4, i.e., the eﬀective set is
{0100, 1101, 0101, 0100}. The ﬁgure also shows how to compute the probability
of the sequence 010 using the PFA.
Fig. 1. Bounded GST and ﬁnal PFA produced by Cogo from the strings {01001101,
01010100} with maximum depth L = 4. Each edge in the GST has a substring and a
transition probability. Dotted edges are suﬃx links in the GST. Each edge in the PFA
has one symbol and a transition probability. Low probability edges are not shown for
simplicity. To compute P (010), we walk φ → a → b → c, giving 1 ∗ 2/3 ∗ 3/5 = 2/5.
458
M. Elsabagh et al.
3.3 Detection
In the online phase, Cogo executes the PFAs as shadow state machines to the
monitored program. Each measurement symbol results in a transition in the
corresponding PFA of that measured resource type. Computing the probability
of a sequence of symbols using a PFA reduces to walking the path corresponding
to the symbols in the PFA, one transition at a time. This enables constant time
online detection with minimal state keeping overhead, since only the current
state and the transition symbol determine the next state.
For a sequence of n measurements, a PFA allows us to compute the predic-
tion probability in O(n) time and O(1) space. Given a PFA M and a string of
measurements s = s1 . . . sl, and assuming that M is currently in state qj, we
walk M (for each si ∈ s) where each transition emits the transition probability.
The prediction probability of s by M is computed as the multiplication of all
emitted probabilities along the walked path. Cogo decides that the sequence s
is anomalous if the sequence resulted in at least t low probability transition in
the PFA. Speciﬁcally, Cogo performs the following test:
(cid:3)
(cid:2)
(cid:2)
(cid:2)
γ(qj, si) ≤ ρmin, i ∈ 1 . . . l
(cid:4)
(cid:2)
(cid:2)
(cid:2)
(cid:5)≤ t → accept
> t → reject
(2)
where γ(qj, si) is the transition probability of symbol si outgoing from state
qj, qj+1 = τ(qj, si) gives the next PFA state, and t is the tolerance level. Recall
that Cogo builds the PFAs such that low probability transitions are loop-back
transitions, therefore they do not result in a state change in the PFA. This
allows Cogo to oﬀer tolerance by forgetting up to t low probability transitions.
If a sequence results in more than t low probability transitions, Cogo raises an
alarm.
3.4 Attaching to a Running Process
It is desirable in practice to be able to attach Cogo to a running process
rather than starting a program under Cogo. For instance, attaching to run-
ning processes is essential for on-demand monitoring of processes that migrate
among a cluster of servers. The main challenge in attaching to a run process
in our context is that Cogo would not know in which states in the PFAs the
process might be, nor how it got to those states. In other words, the process and
the PFAs would not be in sync.
To resolve this, we developed the following non-deterministic PFA executor:
First, Cogo attaches to the running program and starts monitoring at any arbi-
trary point in its execution. As measurements arrive, for each PFA for the target
program, Cogo executes the PFA in a non-deterministic fashion by ﬁnding all
paths that correspond to the incoming measurements, producing a set of poten-
tial paths P that the monitored process might have executed along. As more
measurements arrive, Cogo extends each path in P by one transition at a time
and checks if the detector accepts or rejects the new paths. A rejected path is
Practical and Accurate Runtime Application Protection
459
eliminated from P. Eventually, either all paths in P are eliminated or only a sin-
gle path remains. If all paths are eliminated, meaning the process has deviated,
Cogo raises an alarm. If a single path remains, then the PFA and the process
have been successfully synchronized and Cogo returns to normal operation.
3.5 Seeing Through Containers
It is typical that web applications are deployed in isolated instances, i.e., multiple
instances of the web server would be running in isolation from each other on the
same host. Each instance gets its own isolated view of the systems resources —
including ﬁle system, CPU, RAM, and network interfaces. Common isolation
techniques are either based on full virtualization (e.g., virtual machines) or
operating-system-level virtualization using software containers (e.g., OpenVZ,
LXC, and Docker). Full virtualization does not pose an issue for Cogo since
Cogo can be deployed inside the web server VM itself. On the other hand, con-
tainers abstract out the OS kernel, making it impossible to deploy Cogo inside
an isolated container since Cogo requires kernel access. Therefore, Cogo needs to
be deployed on the host (outside the containers) yet monitor processes running
inside isolated containers.
The main hurdle of seeing through containers is that PIDs inside a container
are local to that container, i.e., they only identify the process inside that con-
tainer PID namespace. Quoting from the Linux kernel manual, “a namespace
wraps a global system resource in an abstraction that makes it appear to the
processes within the namespace that they have their own isolated instance of the
global resource.”6 The local PID serves no meaning outside the container where
a process is running. Instead, the process is identiﬁed by a diﬀerent global PID
only known to the host running the container. Without knowledge of the global
PID of a process, Cogo cannot attach and monitor that process in kernel space
since the global PID is the PID seen by the kernel tracer in kernel space. Note
that there are no containers or namespaces in kernel space.
We implemented a container-aware global PID resolver to be able to identify