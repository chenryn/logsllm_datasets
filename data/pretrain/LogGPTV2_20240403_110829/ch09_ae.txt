延迟： 0
错误： 5
第二分钟
消息： 5
延迟： 0
错误： 0延迟： 0
错误： 5
第二分钟
消息： 5
延迟： 0
错误： 0
第一分钟的可用时间算成 0.5 分钟（50%）而第二分钟算成 1 分钟（100%）。总体而言，这是 0.5 分钟的停机时间。每日总可用性为 1439.5 分钟（1440 = 0.5 = 1439.5）。在最坏的情况下，如果此事件在较长的时间段内传播，并且所有消息都碰巧被延迟，我们将仅损失 20 分钟如果第一次尝试中的 10 条消息恰好都传到一个不好的主机，并且仅在下一分钟重新传输到好主机，那么每个消息都将驱动整个分钟，算作 100% 故障。接下来，如果所有重试都将延迟，它们将再获得 10 分钟作为 100% 失败。最后，由于所有这些事件不共享一分钟的间隔，因此当天将导致 20 分钟的停机时间。的预算，这与我们之前看到的 33.33% 大相径庭。如果新建立的错误预算会很快耗尽，即使小故障也能导致大量流失，导致实际可用性水平比你最初想象的要低得多，请不要感到惊讶。我们建立 SLA 主要是为了揭示这种差异。
此时，我们能够从其他事件派生失败；我们知道，他们不只是错误。此外，我们可以将这些故障转换为与 SLA 相关的值，以跟踪服务可用性级别的更改。最后，我们知道如何计算和使用错误预算来规划实验时间，并执行维护程序，而无需破坏与客户商定的风险协议。
现在，让我们看看在使用 SLA 时，我们还应记住哪些内容。   
处理罕见情况
为避免给大家造成错误的印象（SRE 和 建立 SLA 是解决各种疑难杂症的灵丹妙药），这里简要概述了几个明显的案例，看看 SLA 本身如何引入一些额外的复杂性。
SLA 不是一成不变的，要带来显著的好处，应该很好地维护它，有时需要更改。另一方面，不应违反 SLA（设计）。此外，并非所有项目都需要有严格的 SLA 或必须通过 SRE 来维护它。SLA 不仅是与用户签订的协议，而且也算是与支持此可用性级别的开发人员、SRE 和管理层之间也达成了协议。这意味着“级别一旦被设置，就成了一个需要。”SLA 违规是一个严重的事件，为了避免这种情况，他们都需要暂离常规职责，并投入尽可能多的精力使服务回到正轨。
并非所有与协议相关的困难都由错误和中断引入。其中有些问题是一点一滴地在一段时间内积累起来的。例如，以前六个月响应延迟逐渐加倍并非常接近 SLA 限制的情况为例。可能没有哪个代码提交该对此问题付全责，但数千个小修小改（每个修改都引入了自己几纳秒的延迟）最终可以将延迟时间加倍。不会有哪个开发人员或团队对此负责。然而，显然我们不能保持这种情况。
此时，只有两种方法可以处理这种情况：调整期望值（即 SLA 中包含的指标列表或与其中一个或多个 SLA 相关的值），或者保持低调并开始优化服务。首先，如果问题不够严重，无法对此给予更多关注，则意味着我们设置 SLA 不正确，需要进行更正。这种情况是创业公司最典型的案例。许多小型组织都有一定的成长期，对这段时间来说发布新功能比任何其他指标都重要。当时的用户数量非常少，对于新功能，一些小的不便将被原谅。如果这描述了你的情况，则建议将 SLA 降级为 SLO，并在公司获得足够数量的客户后返回到严格要求。另一种可能性是，我们高估了客户需求，或者更令人惊讶的是，服务的一个方面可能我们以前被视为次要功能，随着时间的推移，这种功能已成为一个令人兴奋的功能和服务的关键部分。
第二种方式，我们需要从技术角度处理这个问题。团队应该有一个目标，将有问题的指标返回到其原始状态。需要明确的是，目标不是防止进一步产品开发造成的延迟增长；目标是减少延迟并将延迟保持在指定的限制内。我们可能会使用新功能引入一些延迟，但与此同时，通过重构旧组件，可能会再次降低延迟。实际上，我们可能会专门让一两个人进行优化，而团队的其他成员将继续处理正在进行的项目。一段时间（两周或一个月）后，将从事优化工作的人与另外两名团队成员交换，类似于轮值时的轮换。选择确切的方式不是技术决定，而是管理决策。 SLA 的更改是业务优先级的更改。业务优先级的变化可能导致公司快速增长或立即死亡。SRE 在这里的工作是向管理层提供当前情况的清晰概述和解决可能性，以帮助做出正确的决策。
最后，如果说每个项目都需要有一个 SRE，那将是一个误会。考虑如果我们参与一个不需要高可用性级别的项目会发生什么情况。如果维护服务整个周末都停机，直到开发人员在下一个工作日将其重新联机，并且没有任何负面影响，该怎么办？至少，这会造成优先级的冲突，因为 SRE 和开发人员不共享相同的可用性目标，并且将推动项目向相反的方向发展。开发人员的首要任务可能是尽可能快地交付新功能，无论服务可用性如何，SRE 会努力降低开发的速度，至少稍微稳定一点产品。对于这样的项目，拥有一个能够帮助执行系统级职责（如初始配置和辅助软件维护）的 SysAdmin 就足够了。因此，在尝试将 SRE 方法应用于特定服务之前，我们必须确保在正确的位置执行此操作。否则，我们将浪费大量的时间和精力。结论
SRE 哲学与 SysAdmin 的哲学仅因为出发点而有所不同。两种理念的不同之处在于出发点，而不是实践，因为基于同样的立场，SRE 实践可以在 SRE 和 SysAdmins 之间共享。但是，成功采用实践并不能将 SysAdmin 提升为 SRE。SRE 理念基于一个简单的数据驱动原则：从用户和业务角度看待问题，其中用户视角侧重于“关注产品质量”，业务角度注重“管理产品案例和效率”而“数据驱动”则致力于“排除假设”。有假设是好的。但是，除非数据支持该假设，否则不能将其描述为真的。例如，虽然可以认为服务工作正常，但却不能说服务正常，除非“正常”一词具有已知的可衡量含义，并且存在支持“正常”这个假设的数据集合。识别、衡量和比较所有重要的东西。其他一切都是这个结果。这是所有 SRE 实践的核心。
 如果这一切听起来非常困难和复杂，从以下简短的说明列表开始，并总结潜在结果，逐步将其应用于你拥有的小型服务组件：开始新项目时候可以思考这样的格言：“从客户开始，倒推出工作。”
将大型服务划分为一系列组件，并将每个组件视为单独的服务。这将有助于我们很容易地找出有问题的点。
列出重要的服务指标（SLI），这些指标将让我们更好地了解我们最应该关心的是什么。当然，我们可能不只依赖我们的信念，需要关注实际客户体验。
聚合到完整 SLO 的指标将明确表示“好”和“坏”服务状态的含义。
如果你正在使用的服务已经为生产流量提供服务，请尝试为初始 SLO 选取值，以便它们尽可能接近反映当前服务可用性。从那里开始努力。这类 SLO 不会立即需要更改服务以匹配所需的级别。我们可以提高标准作为下一步。
从 100% 正常运行开始。计算错误预算，并列出将减小其大小的所有“失败”条件。它将帮助你跟踪问题、维护和实验还剩下多少时间。
枚举所有依赖项及其影响。这将是问题来源或性能回归的重要指标。你需要考虑问题是由服务本身的问题引起的，还是由与其通信的服务引起的。根据 SLO 障碍值测试服务性能。这将指示流量和所需容量之间的关系。
在测试期间，不仅要测量应用程序能够处理的传入流量，还要测量它将为外部服务生成多少额外负载。这将近似输入和输出之间的比率（每个服务分别计算），并精确估计从属服务的需求。定期重复测试，跟踪趋势变化，并相应地调整容量。随着时间的推移，SLO 将显示有效的服务可靠性级别，系统性能回归，并继续注意有问题的条件。
根据 SLO 和客户角度评估所有技术和非技术决策的必要性和优先级。
将 SLO 提升为 SLA，并建立新的目标级别；然后转到下一个服务。
现在，您可以更准确地控制系统，并精确知道何时、什么、为什么以及如何调整系统。遵循“关注用户，其他一切将尾随”的原则，你可以开发和丰富一套自己的最佳实践，以提高效率，享受更低的成本，并提升整体客户体验。  
编者介绍编者介绍
Vladimir Legeza 是亚马逊日本搜索运营团队的现场可靠性工程师。在过去的几十年里，他为各种规模和业务领域的公司工作，如商业咨询、门户网站开发、在线游戏和电视广播。自 2010 年以来，Vladimir 主要专注于大规模高性能解决方案。在亚马逊之前，他曾在 Yandex 从事搜索服务和平台基础设施方面的工作。