00000001 00000188 
(Language ID 1, data desc at offset 0x188 
00E0: 
00000001 00000198 
(Language ID 2, data desc at offset 0x198 
00E8: 
000001A8 (At offset 0x1A8, for TypeId #1, NameId #1, 
Language id #0 
00000004 (4 bytes of data) 
00000000 (codepage) 
00000000 (reserved) 
00F8: 
000001AC (At offset 0x1AC, for TypeId #1, NameId #1, 
Language id #1 
00000004 (4 bytes of data) 
00000000 (codepage) 
00000000 (reserved) 
0108: 
000001B0 (At offset 0x1B0, for TypeId #1, NameId #2, 
00000004 (4 bytes of data) 
00000000 (codepage) 
00000000 (reserved) 
0118: 
000001B4 (At offset 0x1B4, for TypeId #1, NameId #3, 
00000004 (4 bytes of data) 
00000000 (codepage) 
00000000 (reserved) 
0128: 
000001B8 (At offset 0x1B8, for TypeId #2, NameId #1, 
00000004 (4 bytes of data) 
00000000 (codepage) 
00000000 (reserved) 
0138: 
000001BC (At offset 0x1BC, for TypeId #2, NameId #2, 
00000004 (4 bytes of data) 
00000000 (codepage) 
00000000 (reserved) 
0148: 
000001C0 (At offset 0x1C0, for TypeId #2, NameId #3, 
00000004 (4 bytes of data) 
00000000 (codepage) 
00000000 (reserved) 
0158: 
000001C4 (At offset 0x1C4, for TypeId #2, NameId #4, 
00000004 (4 bytes of data) 
00000000 (codepage) 
00000000 (reserved) 
0168: 
000001C8 (At offset 0x1C8, for TypeId #9, NameId #1, 
00000004 (4 bytes of data) 
00000000 (codepage) 
00000000 (reserved) 
0178: 
000001CC (At offset 0x1CC, for TypeId #9, NameId #9, 
Language id #0 
00000004 (4 bytes of data) 
00000000 (codepage) 
00000000 (reserved) 
0188: 
000001D0 (At offset 0x1D0, for TypeId #9, NameId #9, 
Language id #1 
00000004 (4 bytes of data) 
00000000 (codepage) 
00000000 (reserved) 
0198: 
000001D4 (At offset 0x1D4, for TypeId #9, NameId #9, 
Language id #2 
00000004 (4 bytes of data) 
00000000 (codepage) 
00000000 (reserved) 
The raw data for the resources follows: 
01A8: 
00010001 
01AC: 
10010001 
01B0: 
00010002 
01B4: 
00010003 
01B8: 
00020001 
01BC: 
00020002 
01C0: 
00020003 
01C4: 
00020004 
01C8: 
00090001 
01CC: 
00090009 
01D0: 
10090009 
01D4: 
20090009 
7. Archive (Library) File Format 
The COFF archive format provides a standard mechanism for storing collections of object files. 
These collections are frequently referred to as “libraries” in programming documentation. 
The first eight bytes of an archive consist of the file signature. The rest of the archive consists of a 
series of archive members, as follows: 
1 
The first and second members are “linker members.” Each has of these members has its own 
format as described in Section 8.3. Typically, a linker places information into these archive 
members. The linker members contain the directory of the archive. 
2 
The third member is the longnames member. This member consists of a series of null-
terminated ASCII strings, in which each string is the name of another archive member. 
3 
The rest of the archive consists of standard (object-file) members. Each of these members 
contains the contents of one object file in its entirety. 
An archive member header precedes each member. The following illustration shows the general 
structure of an archive: 
Signature :”!\n” 
Header 
1st Linker Member 
Header 
2nd Linker Member 
Header 
Longnames Member 
Header 
Contents of OBJ File 1 
(COFF format) 
Header 
Contents of OBJ File 2 
(COFF format) 
. 
Header 
Contents of OBJ File N 
(COFF format) 
Figure 4. Archive File Structure 
7.1. Archive File Signature 
The archive file signature identifies the file type. Any utility (for example, a linker) expecting an 
archive file as input can check the file type by reading this signature. The signature consists of the 
following ASCII characters, in which each character below is represented literally, except for the 
newline (\n) character: 
S!\n 
7.2. Archive Member Headers 
Each member (linker, longnames, or object-file member) is preceded by a header. An archive 
member header has the following format, in which each field is an ASCII text string that is left 
justified and padded with spaces to the end of the field. There is no terminating null character in 
any of these fields. 
Each member header starts on the first even address after the end of the previous archive 
member. 
Offset 
Size 
Field 
Description 
0 
16 
Name 
Name of archive member, with a slash (/) appended 
to terminate the name. If the first character is a slash, 
the name has a special interpretation, as described 
below. 
16 
12 
Date 
Date and time the archive member was created: 
ASCII decimal representation of the number of 
seconds since 1/1/1970 UCT. 
28 
6 
User ID 
ASCII decimal representation of the user ID. 
34 
6 
Group ID 
ASCII group representation of the group ID. 
40 
8 
Mode 
ASCII octal representation of the member’s file 
mode. 
48 
10 
Size 
ASCII decimal representation of the total size of the 
archive member, not including the size of the header. 
58 
2 
End of Header 
The two bytes in the C string “‘\n”. 
The Name field has one of the formats shown in the following table. As mentioned above, each of 
these strings is left justified and padded with trailing spaces within a field of 16 bytes: 
Contents of Name Field 
Description 
Name/ 
The field gives the name of the archive member directly. 
/ 
The archive member is one of the two linker members. Both of 
the linker members have this name. 
// 
The archive member is the longname member, which consists of 
a series of null-terminated ASCII strings. The longnames member 
is the third archive member, and must always be present even if 
the contents are empty. 
The name of the archive member is located at offset n within the 
longnames member. The number n is the decimal representation 
of the offset. For example: “\26” indicates that the name of the 
archive member is located 26 bytes beyond the beginning of 
longnames member contents. 
7.3. First Linker Member 
The name of the first linker member is “\”. The first linker member, which is included for backward 
compatibility, is not used by current linkers but its format must be correct. This linker member 
provides a directory of symbol names, as does the second linker member. For each symbol, the 
information indicates where to find the archive member that contains the symbol. 
The first linker member has the following format. This information appears after the header: 
Offset 
Size 
Field 
Description 
0 
4 
Number of Symbols 
Unsigned long containing the number of 
symbols indexed. This number is stored in big-
endian format. Each object-file member 
typically defines one or more external symbols. 
4 
4 * n 
Offsets 
Array of file offsets to archive member headers, 
in which n is equal to Number of Symbols. Each 
number in the array is an unsigned long stored 
in big-endian format. For each symbol named in 
the String Table, the corresponding element in 
the Offsets array gives the location of the 
archive member that contains the symbol. 
* 
* 
String Table 
Series of null-terminated strings that name all 
the symbols in the directory. Each string begins 
immediately after the null character in the 
previous string. The number of strings must be 
equal to the value of the Number of Symbols 
fields. 
The elements in the Offsets array must be arranged in ascending order. This fact implies that the 
symbols listed in the String Table must be arranged according to the order of archive members. 
For example, all the symbols in the first object-file member would have to be listed before the 
symbols in the second object file. 
7.4. Second Linker Member 
The second linker member has the name “\” as does the first linker member. Although both the 
linker members provide a directory of symbols and archive members that contain them, the 
second linker member is used in preference to the first by all current linkers. The second linker 
member includes symbol names in lexical order, which enables faster searching by name. 
The first second member has the following format. This information appears after the header: 
Offset 
Size 
Field 
Description 
0 
4 
Number of Members 
Unsigned long containing the number of 
archive members. 
4 
4 * m 
Offsets 
Array of file offsets to archive member 
headers, arranged in ascending order. Each 
offset is an unsigned long. The number m is 
equal to the value of the Number of Members 
field. 
* 
4 
Number of Symbols 
Unsigned long containing the number of 
symbols indexed. Each object-file member 
typically defines one or more external 
symbols. 
* 
2 * n 
Indices 
Array of 1-based indices (unsigned short) 
which map symbol names to archive member 
offsets. The number n is equal to Number of 
Symbols. For each symbol named in the 
String Table, the corresponding element in the 
Indices array gives an index into the Offsets 
array. The Offsets array, in turn, gives the 
location of the archive member that contains 
the symbol. 
* 
* 
String Table 
Series of null-terminated strings that name all 
the symbols in the directory. Each string 
begins immediately after the null byte in the 
previous string. The number of strings must 
be equal to the value of the Number of 
Symbols fields. This table lists all the symbol 
names in ascending lexical order. 
7.5. Longnames Member 
The name of the longnames member is “\\”. The longnames member is a series of strings of 
archive member names. A name appears here only when there is insufficient room in the Name 
field (16 bytes). The longnames member can be empty, though its header must appear. 
The strings are null-terminated. Each string begins immediately after the null byte in the previous 
string. 
8. Import Library Format 
Traditional import libraries, i.e., libraries that describe the exports from one image for use by 
another, typically follow the layout described in 7. Archive (Library) File Format. The primary 
difference is that import library members contain pseudo-object files instead of real ones, where 
each member includes the section contributions needed to build the Import Tables described in 
Section 6.4 The .idata Section. The linker generates this archive while building the exporting 
application. 
The section contributions for an import can be inferred from a small set of information. The linker 
can either generate the complete, verbose information into the import library for each member at 
the time of the library’s creation, or it can write only the canonical information to the library and let 
the application that later uses it generate the necessary data on-the-fly. 
In an import library with the long format, a single member contains the following information: 
Archive member header 
File header 
Section headers 
Data corresponding to each of the section headers 
COFF symbol table 
Strings 
In contrast a short import library is written as follows: 
Archive member header  
Import header 
Null-terminated import name string 
Null-terminated DLL name string 
This is sufficient information to accurately reconstruct the entire contents of the member 
at the time of its use. 
8.1. Import Header 
The import header contains the following fields and offsets: 
Offset 
Size 
Field 
Description 
0 
2 
Sig1 
Must be IMAGE_FILE_MACHINE_UNKNOWN. 
See Section 3.3.1, “Machine Types, ” for more 
information. 
2 
2 
Sig2 
Must be 0xFFFF. 
4 
2 
Version 
6 
2 
Machine 
Number identifying type of target machine. See 
Section 3.3.1, “Machine Types, ” for more 
information. 
8 
4 
Time-Date Stamp 
Time and date the file was created. 
12 
4 
Size Of Data 
Size of the strings following the header. 
16 
2 
Ordinal/Hint 
Either the ordinal or the hint for the import, 
determined by the value in the Name Type field. 
18 
2 bits 
Type 
The import type. See Section 8.2 Import Type 
for specific values and descriptions. 
3 bits 
Name Type 
The Import Name Type. See Section 8.3. 
Import Name Type for specific values and 
descriptions. 
11 bits 
Reserved 
Reserved. Must be zero. 
This structure is followed by two null-terminated strings describing the imported symbol’s name, 
and the DLL from which it came. 
8.2. Import Type 
The following values are defined for the Type field in the Import Header: 
Constant 
Value 
Description 
IMPORT_CODE 
0 
The import is executable code. 
IMPORT_DATA 
1 
The import is data. 
IMPORT_CONST 
2 
The import was specified as CONST in the .def 
file. 
These values are used to determine which section contributions must be generated by the tool 
using the library if it must access that data. 
8.3. Import Name Type 
The null-terminated import symbol name immediately follows its associated Import Header. The 
following values are defined for the Name Type field in the Import Header, indicating how the 
name is to be used to generate the correct symbols representing the import: 
Constant 
Value 
Description 
IMPORT_ORDINAL 
0 
The import is by ordinal. This indicates that the value 
in the Ordinal/Hint field of the Import Header is the 
import’s ordinal. If this constant is not specified, then 
the Ordinal/Hint field should always be interpreted as 
the import’s hint. 
IMPORT_NAME 
1 
The import name is identical to the public symbol 