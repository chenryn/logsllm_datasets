JS逆向 | WebPack站点实战（⼀）
收录于合集
#JS逆向
4个
⽂章配套B站视频，很多话语简略了，建议配着视频看。
地址：https://www.bilibili.com/video/BV13F411P7XB/
开始之前了，简单过⼀下下⾯⼏个⽅法加深印象，便于更好理解加载器。也可以直接从
webpack标题开始看起。
Function/函数/⽅法
常规的js函数命名⽅法：
//1. 常规function 
var test = function(){ 
    console.log(123); 
} 
function test(){ 
    console.log(2); 
} 
今天的主⻆，⾃执⾏函数。
//2. ⾃执⾏function 
!function(){ 
    console.log(1); 
}()
きっとまたいつか
Depapepe
2022-08-07 09:46 发表于北京
原创
不愿透露姓名的热⼼⽹友 ⼀位不愿透露姓名的热⼼⽹友
}() 
// => function a(){} a()  
//2.1
!function(e){ 
    console.log(e) 
     var n={ 
    t:"txt", 
    exports:{},
    n:function(){console.log("function n ")} 
} 
}("echo this") 
//2.2
!function(e){ 
    console.log(e) 
     var n={ 
    t:"txt", 
    exports:{},
    n:function(){console.log("function n ")}} 
}( 
    {
        "test":function(){ 
                console.log("test")} 
    }     
) 
//(["test":function(){console.log]) 
call/apply Function
[Fcuntion prototype call and  applay ](Function.prototype.call() - JavaScript | MDN
(mozilla.org))
允许为不同的对象分配和调⽤属于另⼀个对象的函数/⽅法。
call和apply的使⽤效果基本⼀致，可以让A对象调⽤B对象的⽅法：
让 Vx 对象调⽤ _x 对象的 say() ⽅法
var Vx={ 
       name:"⼀位不愿透露姓名的热⼼⽹友", 
       age:"18cm" 
}; 
var _x={ 
    name:"热⼼⽹友", 
    age:"18mm", 
    say:function(){console.log("name:"+this.name+" age:"+this.age)} 
} 
_x.say.call(Vx) 
//name:⼀位不愿透露姓名的热⼼⽹友 age:18cm 
Webpack
webpack ⼀个静态模块打包器，有⼊⼝、出⼝、loader 和插件，通过loader加载器对js、
css、图⽚⽂件等资源进⾏加载渲染。
实战站点：https://spa2.scrape.center/
WebPack 站点⻓什么样
⽅法1. 右键查看源码发现只会有js链接⽂件，没有其他多余的前端信息，f12看元素就会有
很多数据。
⽅法2. 看Js⽂件，⼀般会有⼀个app.xxxx.js或⻓得像MD5的⽂件名，然后js内容有很多a、b、
c、d、n...的变量来回调⽤，反正就是看着乱。
loader加载器
Webpack站点与普通站点的JS代码扣取是不⼀样的，因为Webpack站点的资源加载是围绕着加
载器进⾏的，然后把静态资源当作模块传⼊调⽤，传⼊的模块就是参数，需要加载什么就运⾏
什么模块。
先简单看⼀下加载器⻓相。
!function(e){ 
    var t={} 
    function d(n){ 
        if (t[n]) 
            return t[n].exports; 
        console.log(n) 
        var r = t[n] = { 
            i:n, 
            l:!1, 
            exports:{} 
            }; 
        return e[n].call(r.exports,r,r.exports,d), 
        r.l = !0; 
        r.exports 
    }
    d(1) 
}( 
    [
    function(){console.log("function1");console.log(this.r.i)}, 
    function(){console.log("function2")} 
    ]
); 
加载器分析
将加载器拆分为两部分：
函数⽅法部分：
!function(e){ 
    var t={} 
    function d(n){ 
        if (t[n]) 
            return t[n].exports; 
        var r = t[n] = { 
            i:n, 
            l:!1, 
            exports:{} 
            }; 
        return e[n].call(r.exports,r,r.exports,d), 
        r.l = !0; 
        r.exports 
    }
    d(1) 
参数部分：
( 
    [
    function(){console.log("function1");console.log(this.r.i)} 
    ,
    function(){console.log("function2")} 
    ]
) 
/* 这⾥的参数可以是传⼊数组，也可以是对象，都是经常看⻅的。 
*/ 
( 
    {
    "1":function(){console.log("function1");console.log(this.r.i)} 
    ,
   "2":function(){console.log("function2")} 
    }
) 
这⾥的加载器是将参数作为⼀个数组【】传⼊的，格式为： !function(e){}(数组)   参数e就
是传⼊的数组， 接着看：
  var t={} 
  function d(n){ 
        if (t[n]) 
            return t[n].exports; 
        var r = t[n] = { 
            i:n, 
            l:!1, 
            exports:{} 
            }; 
        return e[n].call(r.exports,r,r.exports,d), 
        r.l = !0; 
        r.exports 
    }
 d(1) 
上述代码声明了⼀个d⽅法并执⾏，传⼊ 1 作为参数， d ⽅法中的 if (t[n]) 并没有实际意
义，因为 t 本来就没有声明的，可以缩减为：
function d(n){ 
        var r = t[n] = { 
            i:n, 
            l:!1, 
            exports:{} 
            }; 
        return e[n].call(r.exports,r,r.exports,d), 
        r.l = !0; 
        r.exports 
    }
 d(1) 
那么 r=t[n]={ xxxx} 可以变成 var r = { xxx} ，现在就剩下⼀句：
return e[n].call(r.exports,r,r.exports,d)
前⾯说过了， e 是传⼊的参数，也就是数组； n 是 d(1) 传⼊的值，为 1 。
r.exports 就是 r 对象⾥的 exports 属性为空对象 {} 。
转化代码：
return 数组[1].call({},r对象,{},d函数⾃⼰) 
--> 继续转换： 
function(){ 
console.log("function2") 
}.call({},r对象,{},d函数) 
由于 call() ⽅法是⽤于调⽤⽅法的，所以其他参数可以忽略，缩减为：
function(){ 
console.log("function2") 
}.call(d函数) 
加载器并没有太多实际的意义，就是⾃⼰调⽤⾃⼰，只是⽤来混淆的；
经过分析后代码可以直接缩减为（当然，只是针对现在这个例⼦）：
!function(e){
!function(e){ 
    var t={} 
    console.log("⾃执⾏传⼊的参数是："+e) 
    function d(n){ 
        return e[n].call(d) 
    }
    d(1) 
}( 
    [
    function(){console.log("function1");console.log()}, 
    function(){console.log("function2")} 