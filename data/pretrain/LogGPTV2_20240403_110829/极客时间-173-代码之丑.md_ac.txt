# 课前热身 \| 这些需求给到你，你会怎么写代码？你好，我是郑晔。 我在开篇词中提到，缺乏识别代码坏味道的感觉，这才让很多问题代码堂而皇之地留在了自己的眼皮底下。识别坏味道，单纯学理论是不够的，你得结合具体问题进行分析，所以我才在课程中加入了大量真实的代码案例，帮助你理解坏味道。当然，除此之外，你还要有足够多的练习。 为了让你能够深度地参与到这个专栏的学习中，代码能力得到有效提升，我准备了一个课前热身的环节：大家一起来写代码。 我们要编写一个待办事项管理的软件，你可以看我下面给出的需求，它是以**命令行应用**的方式存在的。 第一阶段：基本功能1.  添加 Todo 项。        ```{=html}```    todo add     1.     Item  added1.  完成 Todo 项。        ```{=html}```    todo done     Item  done.1.  查看 Todo 列表，缺省情况下，只列出未完成的 Todo    项。    ```{=html}```    todo list    1.     2.     Total: 2 items1.  使用 all 参数，查看所有的 Todo    项。    ```{=html}```    todo list --all    1.     2.     3. [Done]     Total: 3 items, 1 item done要求： 1.       Todo    项存储在本地文件中；        2.       Todo 项索引逐一递增。        第二阶段：支持多用户1.  用户登录。        ```{=html}```    todo login -u user    Password:     Login success!1.  用户退出。        ```{=html}```    todo logout    Logout success!要求： 1.       只能看到当前用户的 Todo    列表；    2.       同一个用户的 Todo    项索引逐一递增；        3.       当前用户信息存储在配置文件中    \~/.todo-config。        第三阶段：支持 Todo 列表导入和导出1.  Todo 列表导出。        ```{=html}```    todo export > todolist1.  Todo 列表导入。        ```{=html}```    todo import -f todolist第四阶段：支持数据库持久化在配置文件中，配置数据库连接信息。1.  初始化数据库。        ```{=html}```    todo init要求： 1.       没有数据库的情况下，使用本地文件；        2.       在有数据库的情况下，使用数据库；        3.       在本地文件已经存在的情况，将本地信息导入到数据库中。        以上我给出的是最基本的需求，你可以根据自己的实际编码情况，适当补充一些细节，比如，相应的错误提示。 你可以用自己最熟悉的程序设计语言、按照自己最习惯的方式编写代码，并在Github上以公开仓库的方式提交自己的代码，将仓库链接贴在这节课的留言区下，我会顺着链接找到你的仓库，去查看你写的代码。 为了方便代码的阅读，请你按如下要求编写你的代码： 1.  在项目的 README    文件中，写出如何构建和执行你的应用；        2.  需求分成四个阶段，请你按顺序依次完成每个阶段的需求；        3.  每完成一个阶段的代码，创建一个 tag，tag 名称分别为    todo-phase-1、todo-phase-2、todo-phase-3、todo-phase-4。        之所以要把需求分阶段，主要是方便大家参与，即便你时间有限，只写第一个阶段的代码，依然是一个完整的需求。学过《10x 程序员工作法slate-object="inline"》的同学都知道，任务分解是一个重要的工作原则，分阶段需求其实就是一种需求层面上的任务分解。 在专栏结束之前，我会专门制作一期加餐，点评大家的代码；同时，我也会选出代码写的最整洁的3 位同学，送出价值149元的华为智能体脂电子称slate-object="inline"。 ![](Images/af6ec2d04c4bd794a261919325763571.png)savepage-src="https://static001.geekbang.org/resource/image/5d/6b/5d6600a2769c6924d732d80eb365206b.jpg"}欢迎加入这次编码的训练中，期待你在留言区分享你的代码。 
# 01 \| 缺乏业务含义的命名：如何精准命名？你好，我是郑晔。讲写代码的书通常都会从命名开始讲，《程序设计实践slate-object="inline"》如此，《代码整洁之道slate-object="inline"》亦然。所以，我们这个讲代码坏味道的专栏，也遵循传统，从命名开始讲。不过，也许你会说："我知道，命名不就是不能用 abcxyz命名，名字要有意义嘛，这有什么好讲的。"然而，即便懂得了名字要有意义这个道理，很多程序员依然无法从命名的泥潭中挣脱出来。不精准的命名我们先来看一段代码：    public void processChapter(long chapterId) {      Chapter chapter = this.repository.findByChapterId(chapterId);      if (chapter == null) {        throw new IllegalArgumentException("Unknown chapter [" + chapterId + "]");        }            chapter.setTranslationState(TranslationState.TRANSLATING);      this.repository.save(chapter);    }这是一段看上去还挺正常的代码，甚至以很多团队的标准来看，这段代码写得还不错。但如果我问你，这段代码是做什么的。你就需要调动全部注意力，去认真阅读这段代码，找出其中的逻辑。经过阅读我们发现，这段代码做的就是把一个章节的翻译状态改成翻译中。问题来了，为什么你需要阅读这段代码的细节，才能知道这段代码是做什么的？问题就出在函数名上。这个函数的名字叫processChapter（处理章节），这个函数确实是在处理章节，但是，这个名字太过宽泛。如果说"将章节的翻译状态改成翻译中"叫做处理章节，那么"将章节的翻译状态改成翻译完"是不是也叫处理章节呢？"修改章节内容"是不是也叫处理章节呢？换句话说，如果各种场景都能够叫处理章节，那么处理章节就是一个过于宽泛的名字，没有错，但不精准。这就是一类典型的命名问题，从表面上看，这个名字是有含义的，但实际上，它并不能有效地反映这段代码的含义。如果说我在做的是一个信息处理系统，你根本无法判断，我做是一个电商平台，还是一个图书管理系统，从沟通的角度看，这就不是一个有效的沟通。要想理解它，你需要消耗大量认知成本，无论是时间，还是精力。**命名过于宽泛，不能精准描述，这是很多代码在命名上存在的严重问题，也是代码难以理解的根源所在**。或许这么说你的印象还是不深刻，我们看看下面这些词是不是经常出现在你的代码里：data、info、flag、process、handle、build、maintain、manage、modify等等。这些名字都属于典型的过于宽泛的名字，当这些名字出现在你的代码里，多半是写代码的人当时没有想好用什么名字，就开始写代码了。我相信，只要稍微仔细想想，类似的名字你一定还能想出不少来。回到前面那段代码上，如果它不叫"处理章节"，那应该叫什么呢？首先，**命名要能够描述出这段代码在做的事情**。这段代码在做的事情就是"将章节修改为翻译中"。那是不是它就应该叫changeChapterToTranlsating 呢？不可否认，相比于"处理章节"，changeChapterToTranlsating这个名字已经进了一步，然而，它也不算是一个好名字，因为它更多的是在描述这段代码在做的细节。我们之所以要将一段代码封装起来，一个重要的原因就是，我们不想知道那么多的细节。如果把细节平铺开来，那本质上和直接阅读代码细节差别并不大。所以，**一个好的名字应该描述意图，而非细节。**就这段代码而言，我们为什么要把翻译状态修改成翻译中，这一定是有原因的，也就是意图。具体到这里的业务，我们把翻译状态修改成翻译中，是因为我们在这里开启了一个翻译的过程。所以，这段函数应该命名startTranslation。    public void startTranslation(long chapterId) {      Chapter chapter = this.repository.findByChapterId(chapterId);      if (chapter == null) {        throw new IllegalArgumentException("Unknown chapter [" + chapterId + "]");       }            chapter.setTranslationState(TranslationState.TRANSLATING);      this.repository.save(chapter);    }用技术术语命名我们再来看一段代码：    List bookList = service.getBooks();可以说这是一段常见得不能再常见的代码了，但这段代码却隐藏另外一个典型得不能再典型的问题：**用技术术语命名。**这个 bookList 变量之所以叫 bookList，原因就是它声明的类型是List。这种命名在代码中几乎是随处可见的，比如xxxMap、xxxSet。这是一种不费脑子的命名方式，但是，这种命名却会带来很多问题，因为它是一种基于实现细节的命名方式。我们都知道，编程有一个重要的原则是面向接口编程，这个原则从另外一个角度理解，就是不要面向实现编程，**因为接口是稳定的，而实现是易变的**。虽然在大多数人的理解里，这个原则是针对类型的，但在命名上，我们也应该遵循同样的原则。为什么？我举个例子你就知道了。比如，如果我发现，我现在需要的是一个不重复的作品集合，也就是说，我需要把这个变量的类型从List 改成Set。变量类型你一定会改，但变量名你会改吗？这还真不一定，一旦出现遗忘，就会出现一个奇特的现象，一个叫bookList 的变量，它的类型是一个Set。这样，一个新的混淆就此产生了。那有什么更好的名字吗？我们需要一个更面向意图的名字。其实，我们在这段代码里真正要表达的是拿到了一堆书，所以，这个名字可以命名成books。     List books = service.getBooks();也许你发现了，这个名字其实更简单，但从表意的程度上来说，它却是一个更有效的名字。虽然这里我们只是以变量为例说明了以技术术语命名存在的问题，事实上，**在实际的代码中，技术名词的出现，****往往就代表着它缺少了一个应有的模型。**比如，在业务代码里如果直接出现了Redis：     public Book getByIsbn(String isbn) {      Book cachedBook = redisBookStore.get(isbn);      if (cachedBook != null) {        return cachedBook;      }            Book book = doGetByIsbn(isbn);      redisBookStore.put(isbn, book);      return book;    }通常来说，这里真正需要的是一个缓存。Redis是缓存这个模型的一个实现：    public Book getByIsbn(String isbn) {      Book cachedBook = cache.get(isbn);      if (cachedBook != null) {        return cachedBook;      }            Book book = doGetByIsbn(isbn);      cache.put(isbn, book);      return book;    }再进一步，缓存这个概念其实也是一个技术术语，从某种意义上说，它也不应该出现在业务代码中。这方面做得比较好的是Spring。使用 Spring 框架时，如果需要缓存，我们通常是加上一个Annotation（注解）：    @Cacheable("books")    public Book getByIsbn(String isbn) {      ...    }程序员之所以喜欢用技术名词去命名，一方面是因为，这是大家习惯的语言，另一方面也是因为程序员学习写代码，很大程度上是参考别人的代码，而行业里面优秀的代码常常是一些开源项目，而这些开源项目往往是技术类的项目。**在一个技术类的项目中，这些技术术语其实就是它的业务语言。但对于业务项目，这个说法就必须重新审视了。**如果这个部分的代码确实就是处理一些技术，使用技术术语无可厚非，但如果是在处理业务，就要尽可能把技术术语隔离开来。用业务语言写代码无论是不精准的命名也好，技术名词也罢，归根结底，体现的是同一个问题：对业务理解不到位。我在《 [10x程序员工作法slate-object="inline"》专栏中曾经说过，**编写可维护的代码要使用业务语言**。怎么才知道自己的命名是否用的是业务语言呢？一种简单的做法就是，把这个词讲给产品经理，看他知不知道是怎么回事。从团队的角度看，让每个人根据自己的理解来命名，确实就有可能出现千奇百怪的名字，所以，一个良好的团队实践是，**建立团队的词汇表**，让团队成员有信息可以参考。团队对于业务有了共同理解，我们也许就可以发现一些更高级的坏味道，比如说下面这个函数声明：    public void approveChapter(long chapterId, long userId) {      ...    }这个函数的意图是，确认章节内容审核通过。这里有一个问题，chapterId是审核章节的 ID，这个没问题，但 userId是什么呢？了解了一下背景，我们才知道，之所以这里要有一个userId，是因为这里需要记录一下审核人的信息，这个 userId 就是审核人的userId。 你看，通过业务的分析，我们会发现，这个 userId并不是一个好的命名，因为它还需要更多的解释，更好的命名是reviewerUserId，之所以起这个名字，因为这个用户在这个场景下扮演的角色是审核人（Reviewer）。    public void approveChapter(long chapterId, long reviewerUserId) {      ...    }从某种意义上来说，这个坏味道也是一种不精准的命名，但它不是那种一眼可见的坏味道，**而是需要在业务层面上再进行讨论**，所以，它是一种更高级的坏味道。我初入职场的时候，有一次为一个名字陷入了沉思，一个工作经验丰富的同事对此的评价是：你开始进阶了。确实，能够意识到自己的命名有问题，是程序员进阶的第一步。总结时刻我们今天讲了两个典型的命名坏味道：1.  不精准的命名；        2.  用技术术语命名。        命名是软件开发中两件难事之一（另一个难事是缓存失效），不好的命名本质上是增加我们的认知成本，同样也增加了后来人（包括我们自己）维护代码的成本。好的命名要体现出这段代码在做的事情，而无需展开代码了解其中的细节，这是最低的要求。再进一步，好的命名要准确地体现意图，而不是实现细节。更高的要求是，用业务语言写代码。至此，我们已经对命名有了一个更深入的认识。下一讲，我们来说说国外那些经典的讲编码的书都不曾覆盖到的一个话题：英文命名。如果今天的内容你只能记住一件事，那请记住：**好的命名，是体现业务含义的命名**。![](Images/f850b191f3510f8a203406fed59c87d7.png)savepage-src="https://static001.geekbang.org/resource/image/4e/66/4e725dfea2eeb16ef0f654813ca42066.jpg"}思考题前面我们提到了一些代码中常见的不精准的命名所用的词汇，你还能想到哪些词呢？欢迎在留言区分享你的想法。也欢迎你把这节课分享给你身边对命名问题感到困惑的朋友。感谢阅读，我们下一讲再见！参考资料: slate-object="mark"}你的代码为谁而写？