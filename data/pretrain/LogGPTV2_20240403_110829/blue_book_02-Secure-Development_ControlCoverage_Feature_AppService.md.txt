## IMPORTANT: DevOps Kit (AzSK) Sunset Notice
DevOps Kit (AzSK) will be sunset by the end of FY21. For more details, please refer to the [AzSK Sunset Notice](../../../ReleaseNotes/AzSKSunsetNotice.md).

---

### App Service Security Controls and Rationale

| **Control** | **Description & Rationale** | **Severity** | **Automated Fix Script Available?** | **Manual Fix Required?** |
|-------------|-----------------------------|--------------|-------------------------------------|-------------------------|
| **Role-Based Access Control (RBAC)** | All users/identities must be granted minimum required permissions using RBAC. This ensures that users have just enough permissions to perform their tasks, minimizing the risk of resource exposure in case of a user or service account compromise. | Medium | Yes | No |
| **Custom Domain with SSL Binding** | A custom domain with SSL binding must be configured for the App Service. This protects the web application from common attacks such as phishing, session hijacking, and other DNS-related attacks. | Medium | Yes | No |
| **Azure Active Directory (AAD) Authentication** | The App Service must authenticate users using AAD-backed credentials. Using the native enterprise directory for authentication ensures a high level of assurance in the user identity, which is essential for subsequent access control. | High | Yes | No |
| **Publish Profile Credentials** | Publish profile credentials should not be used for App Service deployment. These profiles contain deployment and FTP credentials, which can be easily leaked during various workflows, weakening the auditability of deployment actions. | High | No | No |
| **Web Job Trigger URL Authentication** | The trigger URL for the App Service Web Job must require authentication. WebJobs triggered by a URL should use AAD authentication (bearer token) instead of publish profiles, which are not recommended. | High | No | No |
| **Webhook Encryption** | The webhook used for a Web Job must encrypt sensitive data in transit. Using HTTPS ensures server/service authentication and protects data from man-in-the-middle, eavesdropping, and session-hijacking attacks. | High | No | No |
| **Key Vault for Secrets** | All App Service secrets (e.g., DB connection strings, passwords, keys) should be stored in Key Vault. Storing secrets in plain text can lead to easy compromise at various stages of the application's lifecycle. | Medium | No | No |
| **Notification Hub for Push Notifications** | The App Service should use Notification Hub for push notifications instead of directly using the Push Notification Service. Notification Hub provides a better mechanism for managing PNS keys. | Medium | No | No |
| **Remote Debugging** | Remote debugging must be turned off for the App Service. Enabling remote debugging opens inbound ports, making the service vulnerable to various internet-based attacks. | High | Yes | No |
| **WebSockets** | WebSockets should be disabled for the App Service. The WebSockets protocol is vulnerable to different types of security attacks, and its usage should be carefully reviewed. | Medium | Yes | Yes |
| **Always On Configuration** | The 'Always On' feature should be configured for the App Service. By default, websites are unloaded if they have been idle for some time, which may not be ideal for high-availability requirements. | Medium | Yes | No |
| **Latest .NET Framework Version** | The App Service should use the latest version of the .NET framework. Running on older versions can make the application vulnerable due to outdated security classes. | Low | Yes | Yes |
| **ARM Template Deployment** | Deployment of the App Service should be done using ARM templates. This method is more secure than using publish profiles, as it uses user/SPN credentials, which can be better protected and provide a better audit trail. | Medium | No | No |
| **Multi-Instance Deployment** | The App Service must be deployed on a minimum of two instances to ensure availability. Deploying on multiple instances ensures that the service remains available even if one instance goes down. | Medium | Yes | Yes |
| **Backup Configuration** | The backup feature must be configured to back up data for the App Service. This ensures that there is always a previous snapshot of the App Service data available for recovery scenarios. | Medium | Yes | No |
| **Auditing and Monitoring** | Auditing and monitoring must be enabled for the App Service. This enables log collection of important system events and helps detect suspicious and malicious activity early. | Medium | Yes | Yes |
| **Auto-Healing** | Auto-healing should be configured for the App Service. This feature allows the website to automatically recover from long-running or blocked states, ensuring the worker process hosting the web application is recycled based on certain events. | Medium | No | No |
| **HTTPS Only** | The App Service must only be accessible over HTTPS. This ensures server/service authentication and protects data in transit from network layer eavesdropping attacks. | High | Yes | No |
| **WEBSITE_LOAD_CERTIFICATES Parameter** | The `WEBSITE_LOAD_CERTIFICATES` parameter must not be set to '*' (i.e., all). Setting this parameter to '*' means that all certificates will be uploaded to the VM running the website, which can lead to abuse of the principle of least privilege. | High | Yes | No |
| **Key Renewal** | Keys should be renewed after a regular interval. Periodic key/password rotation is a good security practice, as it minimizes the likelihood of data loss or compromise due to key theft, brute forcing, or recovery attacks. | Medium | No | No |
| **Host Key Access** | Host key access should not be shared with individual clients. Host keys grant full access to all functions within a function app, and not sharing them ensures that clients are granted just enough permissions to invoke a particular function. | Medium | No | No |
| **HTTP Trigger Function Authorization** | The authorization level for HTTP Trigger functions in a function app should be set to 'Function'. This ensures that users with function keys can only invoke the function, aligning with the principle of least privilege. | Medium | Yes | No |
| **Read-Only Edit Mode** | The function app edit mode should be set to Read-Only. This ensures that source code changes come in via a CI/CD pipeline, not directly through the portal, ensuring proper auditing. | Medium | Yes | No |
| **Individual Function Keys** | Different function keys must be generated and shared with individual clients. This promotes separation of concerns and makes revocation easier to manage in the event of a compromise. | Medium | No | No |
| **CORS Access** | CORS access should be granted to a limited set of trusted origins. Using '*' (allow all) for CORS settings means that any application running under any domain can access your application's resources and data. Restricting allowed origins aligns with the principle of least privilege. | Medium | Yes | No |
| **Unauthorized Access Alerts** | Alerts should be configured to track unauthorized access attempts for the App Service. Alert rules for unauthorized requests enable early detection of suspicious and malicious activity. | Medium | No | No |
| **Managed Service Identity (MSI)** | Use Managed Service Identity (MSI) for accessing other AAD-protected resources from the app service. MSI allows the app to easily access AAD-protected resources such as Azure Key Vault, eliminating the need to provision, manage, or rotate secrets, thus reducing overall risk. | Medium | Yes | No |
| **HTTPS for Function App** | The Function App must only be accessible over HTTPS. This ensures server/service authentication and protects data in transit from network layer eavesdropping attacks. | High | Yes | No |
| **Approved TLS Version** | The App Service should use an approved version of TLS. Using the latest TLS version significantly reduces risks from security design issues and vulnerabilities present in older versions. | Medium | Yes | No |
| **Extension Review** | Extensions installed on the App Service should be carefully reviewed. Each extension is like a plugin that adds functionality, but installing unknown or unverified extensions can introduce vulnerabilities. | Medium | Yes | No |
| **IP-Based Access Restrictions** | IP-based access restrictions should be set up for the App Service if feasible. Using IP/VNet subnet rules restricts access to specific IPs, providing an extra layer of protection. However, this may not always be feasible in all scenarios. | Medium | Yes | No |
| **CORS Request Credentials** | The use of credentials in CORS requests for the App Service should be reviewed. Allowing cross-origin credentials is a security risk, as a website at another domain can send a signed-in user's credentials to the app without the user's knowledge. | Medium | Yes | No |

This table provides a comprehensive overview of the security controls and rationale for each, along with their severity levels and whether automated or manual fixes are required.