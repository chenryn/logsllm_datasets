## IMPORTANT: DevOps Kit (AzSK) is being sunset by end of FY21. More details [here](../../../ReleaseNotes/AzSKSunsetNotice.md)
----------------------------------------------
AppServiceDescription & RationaleControlSeverityAutomatedFix ScriptAll users/identities must be granted minimum required permissions using Role Based Access Control (RBAC)Granting minimum access by leveraging RBAC feature ensures that users are granted just enough permissions to perform their tasks. This minimizes exposure of the resources in case of user/service account compromise.MediumYesNoCustom domain with SSL binding must be configured for App ServiceUse of custom domain protects a web application from common attacks such as phishing, session hijacking and other DNS-related attacks.MediumYesNoApp Service must authenticate users using Azure Active Directory backed credentialsUsing the native enterprise directory for authentication ensures that there is a built-in high level of assurance in the user identity established for subsequent access control.All Enterprise subscriptions are automatically associated with their enterprise directory (xxx.onmicrosoft.com) and users in the native directory are trusted for authentication to enterprise subscriptions.HighYesNoPublish profile credentials must not be used for App Service deploymentPublish profile of App Services contains deployment and FTP credentials. There are 2 risks with this. First, the credentials can get easily leaked during the various workflows involving the publish profile. Secondly, use of public profiles weakens auditability of deployment actions.HighNoNoTrigger URL for the App Service Web Job must require authenticationScheduled WebJobs can be triggered by specific scheduled time or by triggered URL. WebJob triggered URL can be authenticated by AAD authentication (bearer token) or by App Services deployment credentials. Since its not recommended to use publish profiles, WebJob triggered URL must be authenticated by AAD authentication.HighNoNoThe webhook used for a Web Job must encrypt sensitive data in transitUse of HTTPS ensures server/service authentication and protects data in transit from network layer man-in-the-middle, eavesdropping, session-hijacking attacks.HighNoNoAll App Service secrets should be stored in Key VaultKeeping secrets such as DB connection strings, passwords, keys, etc. in clear text can lead to easy compromise at various avenues during an application's lifecycle. Storing them in a key vault ensures that they are protected at rest.MediumNoNoApp Service should use Notification Hub for push notification (instead of directly using Push Notification Service)Notification Hub provides a better mechanism to manage the keys related Push Notification Systems (PNS).MediumNoNoRemote debugging must be turned off for App ServiceRemote debugging requires inbound ports to be opened on App Service. These ports become easy targets for compromise from various internet based attacks.HighYesNoWeb Sockets should be disabled for App ServiceWebSockets protocol (WS) is vulnerable to different types of security attacks. Usage of Web Sockets with in web applications has to be carefully reviewed.MediumYesYes'Always On' should be configured for App ServiceBy default, websites are unloaded if they have been idle for some period of time. However, this may not be ideal for 'high availability' requirements. Configuring 'Always On' can help prevent app services from getting timed out.MediumYesNoThe latest version of .NET framework version should be used for App ServiceRunning on older .Net versions could mean you are not using latest security classes. Usage of such old classes and types can make your application vulnerable.LowYesYesDeployment of App Service should be done using ARM templateDeployment using ARM template is more secure than using publish profiles. This is because the former uses user/SPN credentials which can be protected better than publish profiles and provide a better audit trail of deployment activity.MediumNoNoApp Service must be deployed on a minimum of two instances to ensure availabilityApp Service deployed on multiple instances ensures that the App Service remains available even if an instance is down.MediumYesYesBackup feature must be configured to backup data for App ServiceEnabling backup on App Service ensures that there is always a previous snapshot of App Service data that can be leveraged towards recovery scenarios.MediumYesNoAuditing and Monitoring must be enabled for App ServiceAuditing enables log collection of important system events pertinent to security. Regular monitoring of audit logs can help to detect any suspicious and malicious activity early and respond in a timely manner.MediumYesYesAuto healing should be configured for App ServiceWith the use of Auto-Healing, a website can automatically recover from long running/blocked states. Auto-Healing enables automatic recycling of the worker process hosting your web application based on certain events. E.g. 1. When request count breaches a certain limit 2. When requests are running slower that expected 3. When an unexpected http status code is received X number of times 4. When the process consumes more than expected memoryMediumNoNoApp Service must only be accessible over HTTPSUse of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks.HighYesYesWEBSITE_LOAD_CERTIFICATES parameter must not be set to '*' (i.e. all) for App ServiceUsing '*' for this parameter means that all certificates will get uploaded to the VM running the website. This will most likely lead to abuse of the principle of least privilege as it is unlikely that the site needs access to all certificates at runtime.HighYesNoKeys should be renewed after a regular intervalPeriodic key/password rotation is a good security hygiene practice as, over time, it minimizes the likelihood of data loss/compromise which can arise from key theft/brute forcing/recovery attacks.MediumNoNoHost key access should not be shared with individual clientsHost Keys grant full access to all the functions within a function app. Not sharing this key with individual clients ensures that clients are granted just enough permissions to invoke a particular functionMediumNoNoAuthorization level for HTTP Trigger function in a function app should be set to 'Function'Use 'Function' authorization level to ensure that users with minimum of function keys should only be able to invoke the function. This is in accordance with the principle of least privilege.MediumYesNoFunctions app edit mode should be set to Read OnlyUsing 'Read Only' mode ensures that source code is changes come in via a CICD pipeline and not directly through portal. This ensures that code changes are properly audited.MediumYesNoDifferent functions keys must be generated and shared with individual clients.Different function keys for individual clients promotes separation of concerns. It also makes revocation easier to manage in the event of a compromise of one client.MediumNoNoEnsure that CORS access is granted to a limited set of trusted origins.CORS enables applications running under one domain to access a resource under another domain. Using '*' (allow all) for CORS setting means that an application running under any domain can have access to your application's resources and data. Restricting allowed origins to the specific set that needs access aligns with the principle of least privilege.MediumYesNoAlerts should be configured to track unauthorized access attempts for the AppService.Alert rules for unauthorized requests enable you to detect any suspicious and malicious activity early enough.MediumNoNoUse Managed Service Identity (MSI) for accessing other AAD-protected resources from the app service.Managed Service Identity (MSI) allows your app to easily access other AAD-protected resources such as Azure Key Vault. The identity is managed by the Azure platform and eliminates the need to provision/manage/rotate any secrets thus reducing the overall risk. MediumYesNoFunction App must only be accessible over HTTPSUse of HTTPS ensures server/service authentication and protects data in transit from network layer eavesdropping attacks.HighYesNo
 Use approved version of TLS for the App ServiceTLS provides privacy and data integrity between client and server. Using approved TLS version significantly reduces risks from security design issues and security bugs that may be present in older versions.MediumYesNoExtensions installed on a App Service should be carefully reviewedEach extension is something like a plugin that adds functionality to your App Service. Installing unknown/unverified extensions can be dangerous as some third party extensions may have vulnerabilities which introduce unnecessary avenues for attack.MediumYesNo Setup IP-based access restrictions for App Service if feasibleUsing the IP/VNet subnet rules based access restriction ensures that access to the data or the service is restricted to a specific set of IPs. NOTE: While this control does provide an extra layer of access control protection, it may not always be feasible to implement in all scenarios.MediumYes NoReview use of credentials in CORS request for App ServiceCORS enables applications running under one domain to access a resource under another domain. Allowing cross-origin credentials is a security risk. A website at another domain can send a signed-in user's credentials to the app on the user's behalf without the user's knowledge. MediumYesNo