bottom-up approach is given in Lemma 19.
Lemma 19. Given a userset X and a term φ, the satisfaction set
Ψφ of φ can be computed as follows. Initially, Ψφ = ∅.
• φ = r: For every u ∈ (X ∧ Xr), where Xr is the set
members of r, Ψφ ← Ψφ ∪ {(cid:104)ees{u} :: pes{}(cid:105)}.
• φ = ¬φ1: For every u ∈ X, if (cid:64)α∈Ψφ1
Ψφ ← Ψφ ∪ {(cid:104)ees{u} :: pes{}(cid:105)}.
• φ = φ+
1 : Let Xs = {u | ∃α∈Ψφ1
(α.ees = {u})} =
{ua1 ··· uam}, where ai (i ∈ [1, m]) is an integer and
ai < aj when i < j. For every i ∈ [1, m], Ψφ ←
Ψφ ∪ {(cid:104)ees{uai} :: pes{uai+1 ,··· , uam}(cid:105)}.
({u} = α.ees),
• φ = φ1 (cid:117) φ2: For every α ∈ Ψφ1 and every β ∈ Ψφ2,
if α.ees ⊆ β.ees ∪ β.pes and β.ees ⊆ α.ees ∪ α.pes,
then Ψφ ← Ψφ ∪ {(cid:104)ees{α.ees ∪ β.ees} :: pes{α.pes ∩
β.pes}(cid:105)}.
• φ = φ1 (cid:116) φ2: Ψφ ← Ψφ1 ∪ Ψφ2.
• φ = φ1 (cid:175) φ2: For every α ∈ Ψφ1 and every β ∈ Ψφ2,
Ψφ ← Ψφ ∪ {(cid:104)ees{E} :: pes{P − E}(cid:105)}, where E =
α.ees ∪ β.ees and P = α.pes ∪ β.pes.
• φ = φ1 ⊗ φ2: For every α ∈ Ψφ1 and every β ∈ Ψφ2,
if α.ees ∩ β.ees = ∅, then Ψφ ← Ψφ ∪ {(cid:104)ees{E} ::
pes{P −E}(cid:105)}, where E = α.ees∪β.ees and P = α.pes∪
β.pes.
Due to page limit, the proof of correctness of our bottom-up ap-
proach is given in the technical report version of this paper [13].
Besides making use of abstract sets to represent satisfaction sets
of terms, an additional technique is used to further accelerate the
bottom-up processing. Given a term φ, we are only interested in
whether the satisfaction set of φ is empty or not. To acquire such
information, it is sometimes unnecessary to compute the satisfac-
tion set for every sub-term of φ. In particular, if the satisfaction
sets of both φ1 and φ2 are not empty, then the satisfaction sets of
1 , φ1 (cid:116) φ2 and φ1 (cid:175) φ2 are not empty; if either of the satisfaction
φ+
sets of φ1 and φ2 is not empty, then the satisfaction set of φ1 (cid:116) φ2
is not empty. Hence, we need to compute the exact satisfaction set
for a sub-term only if it is an atomic term or the path from the node
corresponding to the sub-term to the root of the syntax tree contains
operators ¬, (cid:117) or ⊗. For all other sub-terms, we just need to mark
whether the satisfaction set is empty or not. For example, given
term (r1 ⊗ r2) (cid:175) (r3 (cid:116) ¬r4), we just need to explicitly compute
the satisfaction sets for sub-terms (r1 ⊗ r2), r3 and ¬r4.
5.2
Implementation and Evaluation
We prototyped the algorithm described in Section 5.1 and have
performed some experiments. Our prototypes are written in Java,
and our experiments were carried out on a Workstation with a
3.2GHz Pentium 4 CPU and 512MB RAM. The parameters we
used in our experiments are chosen to be close to practical cases.
In particular, the number of permissions involved in a task will not
be very large and the term used in the policy will not be very com-
plicated. However, the number of users in the system may be large.
{{Alice,Bob },{Alice,Carl },{Alice,Doris }}
⊗
...........................................
.........................................
(cid:117)
(cid:116)
{{Alice },{Bob },{Carl },{Doris }}
......................
...........................
r1
{{Bob },{Carl }}
r2
{{Alice },{Doris }}
the bottom-up process.
{{Alice }}
......................
..........................
r2
(¬r3)+
In conﬁguration
Figure 3: An example of
(cid:104)U, UR(cid:105), UR = {(Alice, r2), (Bob, r1), (Bob, r3), (Carl , r1), (Doris, r2), (Doris, r3)}. For each sub-term of φ, the subsets of
{Alice, Bob, Carl , Doris} that satisﬁes that sub-term is displayed.
Let φ = ((r1 (cid:116) r2) ⊗ (r2 (cid:117) (¬r3)+)).
{{Alice },{Doris }}
{{Alice },{Carl },{Alice,Carl }}
Some of our experimental results are presented in Table 1. As we
can see in Table 1, our algorithm solves SSC efﬁciently when the
number of users is small. The algorithm does not scale very well
when the number of users grows. However, it is still capable to
solve SSC instances with nontrivial size in a relatively short time.
As SSC needs to be performed only when the access control state
of the system changes, which is not expected to happen frequently,
relative slow running time may be acceptable in some situations.
Further research is needed on improving the performance of the
algorithm and on assessing whether solving SSC is practical in real-
world scenarios.
6. RELATED WORK
The concept of SoD has long existed in the physical world, some-
times under the name “the two-man rule” in the banking industry
and the military. To our knowledge, in the information security lit-
erature the notion of SoD ﬁrst appeared in Saltzer and Schroeder [9]
under the name “separation of privilege.” Clark and Wilson’s com-
mercial security policy for integrity [1] identiﬁed SoD along with
well-formed transactions as two major mechanisms of fraud and er-
ror control. There exists a wealth of literatures [7, 10, 11, 5] on the
enforcement of SoD policies. Nash and Poland [7] explained the
difference between dynamic and static enforcement of SoD poli-
cies.
In the former, a user may perform any step in a sensitive
task provided that the user does not also perform another step on
that data item.
In the latter, users are constrained a-priori from
performing certain steps. Foley [3] proposed a framework based
on relabel policies [2] to express dynamic SoD requirements. Sol-
worth [12] introduced a graph-based mechanism to describe and
analyze dynamic SoD policies. Sandhu [10, 11] presented Trans-
action Control Expressions, a history-based mechanism for dynam-
ically enforcing SoD policies. A transaction control expression as-
sociates each step in the transaction with a role. By default, the
requirement is such that each step must be performed by a different
user. One can also specify that two steps must be performed by the
same user. In Transaction Control Expressions, user qualiﬁcation
requirements are associated with individual steps in a transaction,
rather than a transaction as a whole.
Li et al [5] studied both direct and indirect enforcement of static
separation of duty (SSoD) policies. They showed that directly en-
forcing SSoD policies is intractable (NP-complete). They also
discussed using static mutually exclusive roles (SMER) constraints
to indirectly enforce SSoD policies. They deﬁned what it means
for a set of SMER constraints to precisely enforce an SSoD policy,
characterize the policies for which such constraints exist, and show
how they are generated. Our paper studies the enforcement of a
larger class of policies, which include SoD policies as a sub-class;
however, we focus on direct static enforcement.
Our paper studies enforcement of policies speciﬁed in the alge-
bra introduced by Li and Wang [6]. They mentioned static enforce-
ment and dynamic enforcement as two possible enforcement mech-
anisms for high-level security policies speciﬁed in the algebra, but
they did not investigate enforcement in detail.
7. CONCLUSION
In this paper, we have formally deﬁned and studied direct static
enforcement of high-level security policies speciﬁed in the algebra
proposed by Li and Wang [6]. We have given comprehensive com-
putational complexity results for solving the Static Safety Check-
ing problem and the related Userset-Term Safety problem. We have
also proposed a syntactically restricted form of terms such that if
the term in a policy satisﬁes the syntactic restriction, the direct en-
forcement of the policy is tractable. Finally, we have designed and
evaluated an algorithm to solve the static safety checking problem
for high-level security policies.
In the future, we plan to study other enforcement approaches for
policies speciﬁed in the algebra, including indirect static enforce-
ment, which uses constraints to rule out unsafe states, and dynamic
enforcement, which enforces the policy using history for each in-
stance of a sensitive task.
Acknowledgement
This work is supported by the National Science Foundation through
grant CNS-0448204 (CAREER: Access Control Policy Veriﬁcation
Through Security Analysis And Insider Threat Assessment), and
by sponsors of CERIAS. We thank the anonymous reviewers for
their helpful comments.
8. REFERENCES
[1] D. D. Clark and D. R. Wilson. A comparision of commercial
and military computer security policies. In Proceedings of
the 1987 IEEE Symposium on Security and Privacy, pages
184–194. IEEE Computer Society Press, May 1987.
[2] S. Foley, L. Gong, and X. Qian. A security model of dynamic
labeling providing a tiered approach to veriﬁcation. In
Proceedings of IEEE Symposium on Research in Security
and Privacy, pages 142–153, May 1996.
[3] S. N. Foley. The speciﬁcation and implementation of
‘commercial’ security requirements including dynamic
segregation of duties. In Proc. ACM Conference on
Computer and Communications Security (CCS), pages
125–134, 1997.
223
Policy
sp(cid:104)P, ((r1+ (cid:175) r2) ⊗ ¬r3) (cid:175) (r1 (cid:117) r4+)(cid:105)
sp(cid:104)P, ((r1+ (cid:175) r2) ⊗ ¬r3) (cid:175) (r1 (cid:117) r4+)(cid:105)
sp(cid:104)P, ((r1+ (cid:175) r2) ⊗ ¬r3) (cid:175) (r1 (cid:117) r4+)(cid:105)
sp(cid:104)P, ((r1+ (cid:175) r2) ⊗ ¬r3) (cid:175) (r1 (cid:117) r4+)(cid:105)
sp(cid:104)P, ((r1+ (cid:175) r2) ⊗ ¬r3) (cid:175) (r1 (cid:117) r4+)(cid:105)
Size of P Users UR Size UP Size
5
10
10
10
10
10
10
20
40
40
18
18
34
65
65
15
30
46
82
84
Safe? Runtime
47 ms
Yes
Yes
1.0 s
5.8 s
Yes
97.7 s
Yes
No
5.7 s
Table 1: A table that shows the runtime of testing whether a state is safe with respect to a static safety policy.
[4] M. R. Garey and D. J. Johnson. Computers And
Intractability: A Guide to the Theory of NP-Completeness.
W.H. Freeman and Company, 1979.
[5] N. Li, Z. Bizri, and M. V. Tripunitara. On mutually-exclusive
roles and separation of duty. In Proc. ACM Conference on
Computer and Communications Security (CCS), pages
42–51. ACM Press, Oct. 2004.
[6] N. Li and Q. Wang. Beyond separation of duty: An algebra
for specifying high-level security policies. In Proc. ACM
Conference on Computer and Communications Security
(CCS), Nov. 2006.
[7] M. J. Nash and K. R. Poland. Some conundrums concerning
separation of duty. In Proceedings of IEEE Symposium on
Research in Security and Privacy, pages 201–209, May
1990.
[8] C. H. Papadimitrou and K. Steiglitz. Combinatorial
Optimization. Prentice Hall, 1982.
[9] J. H. Saltzer and M. D. Schroeder. The protection of
information in computer systems. Proceedings of the IEEE,
63(9):1278–1308, September 1975.
[10] R. Sandhu. Separation of duties in computerized information
systems. In Proceedings of the IFIP WG11.3 Workshop on
Database Security, Sept. 1990.
[11] R. S. Sandhu. Transaction control expressions for separation
of duties. In Proceedings of the Fourth Annual Computer
Security Applications Conference (ACSAC’88), Dec. 1988.
[12] J. A. Solworth. Approvability. In ASIACCS ’06: Proceedings
of the 2006 ACM Symposium on Information, computer and
communications security, pages 231–242. ACM Press, 2006.
[13] Q. Wang and N. Li. Direct static enforcement of high-level
security policies. Technical Report CERIAS-TR-2006-40,
Center for Education and Research in Information Assurance
and Security, Purdue University, Dec. 2006.
APPENDIX
A. BACKGROUND ON ORACLE TURING
MACHINES AND POLYNOMIAL HIER-
ARCHY
Oracle Turing Machines An oracle Turing machine, with an or-
acle for accepting a language L, is denoted as M L. M L can use the
oracle to determine whether a string is in L or not in one step. More
precisely, M L is a two-tape deterministic Turing machine. The ex-
tra tape is called the oracle tape. M L has three additional states:
the query state q?, and two answer states qyes and qno. The compu-
tation of M L proceeds like in any ordinary Turing machine, except