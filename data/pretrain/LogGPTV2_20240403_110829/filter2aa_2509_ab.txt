Obfuscating with Host: DWORD – google.com
DWord or Double Word is also known as Integer IP. 
Essentially, the IP address is translated in an equivalent 
16bit number.
So, one of Google's IP address, 216.58.215.78, can be 
translated to 3627734862 and it can be accessed using an 
internet browser as http://3627734862.
2.2.2.1 URL Authority Obfuscation
|  p.35
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Obfuscating with Host: OCTAL – google.com
An IP address can also be represented in Octal form. The 
result is as follows: http://0330.0072.0327.0116
The IP address with each number is translated to base 8. 
2.2.2.1 URL Authority Obfuscation
|  p.36
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Obfuscating with Host: OCTAL – google.com
We can also "feed" each number by adding leading zeroes 
without break the original value as follows:
http://0000000330.0000000072.0000000327.000000116
This extra case, however, does not work in Internet Explorer.
2.2.2.1 URL Authority Obfuscation
|  p.37
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Obfuscating with Host: HEXADECIMAL – google.com
Another representation is Hexadecimal. Resembling the 
previous technique, each IP number is converted to Base 
16, and the result for the Google's IP is: http://0xd83ad74e
Each number can also be separated like this: 
http://0xd8.0x3a.0xd7.0x4e
2.2.2.1 URL Authority Obfuscation
|  p.38
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Obfuscating with Host: HEXADECIMAL – google.com
Even with Hexadecimal representation it is possible to add 
leading zeroes.
However, as in previous examples, it does not work Internet 
Explorer:
http://0x000000d8.0x0000003a.0x000000xd7.0x0000004e
2.2.2.1 URL Authority Obfuscation
|  p.39
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Obfuscating with Host
These are the basic techniques; however, it is also possible 
to mix these and create a hybrid!
Let’s see some examples.
2.2.2.1 URL Authority Obfuscation
|  p.40
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Obfuscating with Host: HYBRID – google.com
The 173.194.35.23 IP address can be also represented as:
2.2.2.1 URL Authority Obfuscation
|  p.41
0xAD.194.35.23
0xAD.0xC2.35.23
0xAD.0xC2.0x23.23
0xAD.0xC2.0x23.0x17
0xAD.0302.35.23
0xAD.0302.0043.23
0xAD.0302.8983
0xAD.12722967
Legend: Hexadecimal ~ Octal ~ Dword ~ Decimal
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Obfuscating with Host
If you want to play some with IP addresses, this online tool 
can be very useful:
http://www.silisoftware.com/tools/ipconverter.php
It converts IP addresses using the techniques we just 
discussed.
2.2.2.1 URL Authority Obfuscation
|  p.42
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
2.3
Java Obfuscation 
Techniques
|  p.43
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
In this chapter, we will analyze how to use the 
flexibility of JavaScript to obfuscate code. 
We’ll start with background information on different 
JavaScript encoding types and some examples. Then, we’ll 
introduce techniques to compress code such as minifying 
and packing. 
2.3 JavaScript Obfuscation Techniques
|  p.44
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
http://web.archive.org/web/20111128054051/http://sla.ckers.org/forum/
read.php?2,15812,page=14
Among the many ways of encoding JavaScript, there is an 
interesting technique you should know called Non-
alphanumeric JavaScript Encoding.
This technique first appeared on the sla.ckers forum in late 
2009 by Yosuke Hasegawa, a Japanese security 
researcher.
2.3.1 JavaScript Encoding – Non-Alphanumeric
|  p.45
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
_=[]|[];$=_++;__=(_<<_);___=(_<<_)+
_;____=__+__;_____=__+___;$$=({}+""
)[_____]+({}+"")[_]+({}[$]+"")[_]+(
($!=$)+"")[___]+(($==$)+"")[$]+(($=
=$)+"")[_]+(($==$)+"")[__]+({}+"")[
_____]+(($==$)+"")[$]+({}+"")[_]+((
$==$)+"")[_];$$$=(($!=$)+"")[_]+(($
!=$)+"")[__]+(($==$)+"")[___]+(($==
$)+"")[_]+(($==$)+"")[$];$_$=({}+""
)[_____]+({}+"")[_]+({}+"")[_]+(($!
=$)+"")[__]+({}+"")[__+_____]+({}+"
")[_____]+({}+"")[_]+({}[$]+"")[__]
+(($==$)+"")[___]; 
($)[$$][$$]($$$+"('"+$_$+"')")();
2.3.1 JavaScript Encoding – Non-Alphanumeric
|  p.46
Basically, Hasegawa 
showed a way to encode 
JavaScript code by using 
only non-alphanumeric 
characters. Take a look at 
the following code.
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
This "magic" is strongly related to the loosely typed nature 
of JavaScript! So, let’s start analyzing some interesting 
JavaScript behaviors.
NOTE: The explanation of this technique probably requires 
a dedicated module and could be boring if you are not 
interested in it. As a result, we will simply analyze some key 
concepts and put links in the references if you want to go 
in-depth. 
2.3.1 JavaScript Encoding – Non-Alphanumeric
|  p.47
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
In JavaScript, you can cast a variable to String as follows:
"" + 1234 or 1234 + "" //returns "1234"
[] + 1234 or 1234 + [] //returns "1234" 
Here is something a little bit complex:
x = "hello"
[1,"a",x] //returns [1, "a", "hello"]
[1,"a",x]+"" //returns "1,a,hello"
2.3.1.1 String Casting
|  p.48
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Booleans
There are many ways to return a Boolean value using 
non-alphanumeric characters. Here are some examples:
2.3.1.2 Booleans
|  p.49
![]
!{} 
!!""
[]=={}
!![]
!!{}
!""
[]==""
FALSE
TRUE
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
If you need to extract the TRUE and FALSE string, you can 
construct them combining our previous examples, as 
follows:
[!![]]+"" //returns "true"
[![]]+"" //returns "false"
2.3.1.2 Booleans
|  p.50
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Numbers can also be "created”. For example, 0 can be 
created as follows:
2.3.1.3 Numbers
|  p.51
+""
-"" 
-+-+""
+[]
-[]
-+-+[]
![]+![]
![]+!{}
![]+!!""
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Remember, TRUE is 1 while False is 0; therefore, to 
generate the number 1, we can do TRUE+FALSE and 2 is 
TRUE+TRUE… 
2.3.1.3 Numbers
|  p.52
Number
Non-alphanumeric representations
0
+[],   +"",   ![]+![]
1
+!![],   ![]+!"",   ![]+!![],   ~[]*~[],
++[[]][+[]]
2
!![]+!![],   ++[++[[]][+[]]][+[]]
3
!![]+!![]+!![]
4
!![]+!![]+!![]+!![],  (!![]+!![])*(!![]+!![])
5
!![]+!![]+!![]+!![]+!![]
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
After numbers, we need to know how to generate custom 
stings. As we have seen with Booleans, it is possible to 
extract the TRUE and FALSE strings but, what if we want to 
generate the alert string? We need to generate each 
character separately and then put them together.
Let’s look at an example.
2.3.1.4 String
|  p.53
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
To generate the required alpha characters, we need to use 
the string output of native JavaScript objects and extract 
the characters required. 
For example:
_={}+[] //is "[object Object]"
[]/[]+"" //is "NaN"
!![]/![]+"" //is "Infinity"
2.3.1.4.1 Generate ‘alert’ String
|  p.54
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
So, to extract the alpha char a we use the NaN string and 
access the position 1. 
Remember, strings can be accessed like arrays:
([]/[]+"")[![]+!![]] // "a"
2.3.1.4.1 Generate ‘alert’ String
|  p.55
"NaN"
1
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
The remaining alpha characters can be generated using the 
following messages:
2.3.1.4.1 Generate ‘alert’ String
|  p.56
l
false
e
true , false or [object Object]
r
true
t
true or infinity
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
http://utf-8.jp/public/jjencode.html
http://www.jsfuck.com/
http://utf-8.jp/public/aaencode.html
There are some interesting encodings based on this 
technique, JJencode and Aaencode.  These are from 
Hasegawa and "an esoteric and educational programming 
style" called JSFuck.
Let’s briefly see their main differences.
2.3.1 JavaScript Encoding – Non-Alphanumeric
|  p.57
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
JJencode is the way by which Hasegawa encodes 
JavaScript code using only symbols. It uses a customizable 
global variable name and from that encodes the payload.
2.3.1.5 JJencode
|  p.58
$=~[];$={___:++$,$$$$:(![]+"")[$],__$:++$,$_$_:(![]+"")[$],_$_:++$,$_$$:({}+"")[$]
,$$_$:($[$]+"")[$],_$$:++$,$$$_:(!""+"")[$],$__:++$,$_$:++$,$$__:({}+"")[$],$$_:++
$,$$$:++$,$___:++$,$__$:++$};$.$_=($.$_=$+"")[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$
+"")[$.__$])+((!$)+"")[$._$$]+($.__=$.$_[$.$$_])+($.$=(!""+"")[$.__$])+($._=(!""+"
")[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!""+"")[$._$$]+$.__+$._+$.$+$.$$;$.
$=($.___)[$.$_][$.$_];$.$($.$($.$$+"\""+$.$_$_+(![]+"")[$._$_]+$.$$$_+"\\"+$.__$+$
.$$_+$._$_+$.__+"(\\\"\\"+$.__$+$.__$+$.___+$.$$$_+(![]+"")[$._$_]+(![]+"")[$._$_]
+$._$+",\\"+$.$__+$.___+"\\"+$.__$+$.__$+$._$_+$.$_$_+"\\"+$.__$+$.$$_+$.$$_+$.$_$
_+"\\"+$.__$+$._$_+$._$$+$.$$__+"\\"+$.__$+$.$$_+$._$_+"\\"+$.__$+$.$_$+$.__$+"\\"
+$.__$+$.$$_+$.___+$.__+"\\\"\\"+$.$__+$.___+")"+"\"")())();
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
A different approach is with AAencode. It is inspired by 
Japanese style emoticons, like（●＾o＾●）for instance.
2.3.1.6 AAencode
|  p.59
ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻
//*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ
)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o 
-(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟ
Дﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) 
['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') 
[ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) 
['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ 
(ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ 
(ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟ
o)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟε
ﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ [continue]
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020