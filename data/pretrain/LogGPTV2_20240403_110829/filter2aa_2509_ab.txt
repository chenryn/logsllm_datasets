### 2.2.2.1 URL Authority Obfuscation

#### Obfuscating with Host: DWORD – google.com
A DWORD, or Double Word, is also known as an Integer IP. Essentially, the IP address is translated into a 32-bit (4-byte) number. For example, one of Google's IP addresses, 216.58.215.78, can be converted to 3627734862 and accessed via an internet browser using the URL: `http://3627734862`.

**Page 35**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### Obfuscating with Host: OCTAL – google.com
An IP address can also be represented in Octal form. The result for Google's IP address 216.58.215.78 is: `http://0330.0072.0327.0116`. Each octet of the IP address is converted to its base-8 equivalent.

**Page 36**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### Obfuscating with Host: OCTAL – google.com
Additionally, each octet can be padded with leading zeros without changing the original value. For example:
`http://0000000330.0000000072.0000000327.000000116`
However, this format does not work in Internet Explorer.

**Page 37**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### Obfuscating with Host: HEXADECIMAL – google.com
Another representation is Hexadecimal. Each octet of the IP address is converted to its base-16 equivalent. For Google's IP address 216.58.215.78, the result is: `http://0xd83ad74e`. Alternatively, it can be separated as: `http://0xd8.0x3a.0xd7.0x4e`.

**Page 38**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### Obfuscating with Host: HEXADECIMAL – google.com
Similar to the Octal representation, leading zeros can be added to each hexadecimal value. For example:
`http://0x000000d8.0x0000003a.0x000000d7.0x0000004e`
However, this format also does not work in Internet Explorer.

**Page 39**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### Obfuscating with Host
These are the basic techniques. However, it is also possible to mix these representations to create a hybrid. Let’s see some examples.

**Page 40**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### Obfuscating with Host: HYBRID – google.com
The IP address 173.194.35.23 can be represented in various hybrid forms:
- `0xAD.194.35.23`
- `0xAD.0xC2.35.23`
- `0xAD.0xC2.0x23.23`
- `0xAD.0xC2.0x23.0x17`
- `0xAD.0302.35.23`
- `0xAD.0302.0043.23`
- `0xAD.0302.8983`
- `0xAD.12722967`

Legend: Hexadecimal ~ Octal ~ Dword ~ Decimal

**Page 41**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### Obfuscating with Host
If you want to experiment with IP addresses, this online tool can be very useful:
`http://www.silisoftware.com/tools/ipconverter.php`
It converts IP addresses using the techniques we just discussed.

**Page 42**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

### 2.3 JavaScript Obfuscation Techniques

In this chapter, we will analyze how to use the flexibility of JavaScript to obfuscate code. We’ll start with background information on different JavaScript encoding types and some examples. Then, we’ll introduce techniques to compress code such as minifying and packing.

**Page 43**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### 2.3.1 JavaScript Encoding – Non-Alphanumeric
Among the many ways of encoding JavaScript, there is an interesting technique called Non-alphanumeric JavaScript Encoding. This technique first appeared on the sla.ckers forum in late 2009 by Yosuke Hasegawa, a Japanese security researcher.

**Page 44**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

```javascript
_=[]|[];$=_++;__=(_<<_);___=(_<<_)+_;____=__+__;_____=__+___;$$=({}+"")[_____]+({}+"")[_]+({}[$]+"")[_]+(($!=$)+"")[___]+(($==$)+"")[$]+(($==$)+"")[_]+(($==$)+"")[__]+({}+"")[_____]+(($==$)+"")[$]+({}+"")[_]+((($===$)+"")[_];$$$=(($!=$)+"")[_]+(($!=$)+"")[__]+(($==$)+"")[___]+(($===$)+"")[_]+(($==$)+"")[$];$_$=({}+"")[_____]+({}+"")[_]+({}+"")[_]+(($!=$)+"")[__]+({}+"")[__+_____]+({}+"")[_____]+({}+"")[_]+({}[$]+"")[__]+(($==$)+"")[___];($)[$$][$$]($$$+"('"+$_$+"')")();
```

**Page 45**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

Hasegawa showed a way to encode JavaScript code using only non-alphanumeric characters. This "magic" is strongly related to the loosely typed nature of JavaScript. Let’s start analyzing some key concepts.

**Page 46**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### 2.3.1.1 String Casting
In JavaScript, you can cast a variable to a string as follows:
- `"" + 1234` or `1234 + ""` // returns "1234"
- `[] + 1234` or `1234 + []` // returns "1234"

Here is something a bit more complex:
```javascript
x = "hello";
[1, "a", x] // returns [1, "a", "hello"]
[1, "a", x] + "" // returns "1,a,hello"
```

**Page 47**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### 2.3.1.2 Booleans
There are many ways to return a Boolean value using non-alphanumeric characters. Here are some examples:
- `![]` // FALSE
- `!{}` // FALSE
- `!!""` // TRUE
- `[] == {}` // FALSE
- `!![]` // TRUE
- `!!{}` // TRUE
- `!"[]"` // FALSE

To extract the strings "true" and "false":
- `[!![]] + ""` // returns "true"
- `[![]] + ""` // returns "false"

**Page 48**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### 2.3.1.3 Numbers
Numbers can also be "created" using non-alphanumeric characters. For example, 0 can be created as follows:
- `+""`
- `-""`
- `-+-+""`
- `+[]`
- `-[]`
- `-+-+[]`
- `![] + ![]`
- `![] + !{}`
- `![] + !!""`

Remember, `TRUE` is 1 while `FALSE` is 0. To generate the number 1, we can do `TRUE + FALSE`, and 2 is `TRUE + TRUE`.

**Page 49**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

| Number | Non-alphanumeric representations |
|--------|---------------------------------|
| 0      | `+[], +"", ![]+![]`              |
| 1      | `+!![], ![]+!"", ![]+!![], ~[]*~[], ++[[]][+[]]` |
| 2      | `!![]+!![], ++[++[[]][+[]]][+[]]` |
| 3      | `!![]+!![]+!![]`                 |
| 4      | `!![]+!![]+!![]+!![], (!![]+!![])*(!![]+!![])` |
| 5      | `!![]+!![]+!![]+!![]+!![]`       |

**Page 50**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### 2.3.1.4 String
After numbers, we need to know how to generate custom strings. As we have seen with Booleans, it is possible to extract the "true" and "false" strings. What if we want to generate the "alert" string? We need to generate each character separately and then put them together.

**Page 51**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### 2.3.1.4.1 Generate ‘alert’ String
To generate the required alpha characters, we need to use the string output of native JavaScript objects and extract the characters required. For example:
- `_={}+[]` // is "[object Object]"
- `[]/[]+""` // is "NaN"
- `!![]/![]+""` // is "Infinity"

To extract the character 'a' from "NaN":
- `([]/[]+"")[![]+!![]]` // "a"

**Page 52**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

The remaining alpha characters can be generated using the following messages:
- `l` from "false"
- `e` from "true", "false", or "[object Object]"
- `r` from "true"
- `t` from "true" or "infinity"

**Page 53**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

There are some interesting encodings based on this technique, such as JJencode and Aaencode. These are from Hasegawa and "an esoteric and educational programming style" called JSFuck. Let’s briefly see their main differences.

**Page 54**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### 2.3.1.5 JJencode
JJencode is the way by which Hasegawa encodes JavaScript code using only symbols. It uses a customizable global variable name and encodes the payload from that.

**Page 55**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

```javascript
$=~[];$={___:++$,$$$$:(![]+"")[$],__$:++$,$_$_:(![]+"")[$],_$_:++$,$_$$:({}+"")[$],$$_$:($[$]+"")[$],_$$:++$,$$$_:(!""+"")[$],$__:++$,$_$:++$,$$__:({}+"")[$],$$_:++$,$$$:++$,$___:++$,$__$:++$};$.$_=($.$_=$+"")[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+"")[$.__$])+((!$)+"")[$._$$]+($.__=$.$_[$.$$_])+($.$=(!""+"")[$.__$])+($._=(!""+"")[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!""+"")[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+"\""+$.$_$_+(![]+"")[$._$_]+$.$$$_+"\\"+$.__$+$.$$_+$._$_+$.__+"(\\\"\\"+$.__$+$.__$+$.___+$.$$$_+(![]+"")[$._$_]+(![]+"")[$._$_]+$._$+",\\"+$.$__+$.___+"\\"+$.__$+$.__$+$._$_+$.$_$_+"\\"+$.__$+$.$$_+$.$$_+$.$_$_+"\\"+$.__$+$._$_+$._$$+$.$$__+"\\"+$.__$+$.$$_+$._$_+"\\"+$.__$+$.$_$+$.__$+"\\",$.__$+$.$$_+$.___+$.__+"\\\"\\"+$.$__+$.___+")"+"\"")())();
```

**Page 56**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### 2.3.1.6 AAencode
A different approach is with AAencode, inspired by Japanese-style emoticons, like （●＾o＾●）.

**Page 57**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

```javascript
ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻
//*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ 
```

**Page 58**
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020