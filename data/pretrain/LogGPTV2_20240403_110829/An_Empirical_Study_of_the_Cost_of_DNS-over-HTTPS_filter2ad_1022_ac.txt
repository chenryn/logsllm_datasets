vidual layers and protocols. Across all four cases, the distribution
 0 2 4 6 8 10U/CFU/GOH/CFH/GOHP/CFHP/GODNS resolutioncost (KB) 0 10 20 30 40U/CFU/GOH/CFH/GOHP/CFHP/GODNS resolutioncost (packets)An Empirical Study of the Cost of DNS-over-HTTPS
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Figure 5: Overheads per DNS resolution for DNS-over-HTTPS/2. First two columns show sizes for (HTTP) bodies and headers
exchanged. Mgmt refers to messages being exchanged to maintain the HTTP/2 connection like settings and windows updates.
TLS and TCP refer to sizes of the respective layers.
of body sizes is similar, albeit Google tends to send slightly larger
bodies in the extreme case.
Every additional layer of complexity adds overhead that is at
least the same size as the original DNS payload. Notably, even the
overhead incurred by TLS encryption and TCP headers and addi-
tional messages is already of the size of the complete DNS payload.
Regarding the HTTP/2 overhead (headers and mgmt), we see that
using a persistent connection leads to less data being exchanged.
For the headers, this is caused by HTTP/2’s differential headers fea-
ture, which in sequential requests and replies only transmits those
headers that have changed. The management messages are required
to manage the HTTP/2 connection and multiplexing of different
streams. They do not need to be sent for every single client-server-
interaction. Therefore, when using a persistent and thus re-usable
connection, the amount of management bytes sent per request-
response-cycle is smaller in comparison to non-persistent connec-
tions. For the overhead incurred by TLS, for the non-persistent
connections, the overhead is dominated by the server certificate as
discussed above. In the case of persistent connections, the upper
whiskers in Figure 5 are caused by the (at least once) necessary
certificate exchange. The median values however are significantly
lower as an established connection is re-used many times. This
variability in the TLS overhead also causes different overheads at
the TCP and outer layers, as the higher number of bytes transmitted
for the TLS layer also leads to more packets.
In summary, many of the one-time overheads required for TCP,
TLS and HTTP connection setup and management can be amortized
if a persistent connection is used. However, even in this case, the
median overhead caused by the TLS and TCP layer are each already
of the size of the actual DNS message. For DNS resolution over
HTTP, this effect is pronounced because of the comparably small
size of the DNS message. When considering transmitting web pages
via HTTPS, this effect will be less pronounced in comparison to
DNS messages, given the larger size of websites.
5 DOH PERFORMANCE
In the previous sections we have quantified the potential impact of
head-of-line-blocking as well as the additional overheads of DoH.
In this section, we assess whether DoH impacts performance, more
specifically we look at a web browsing scenario and investigate
how a change to DoH affects page loading times.
We use the Firefox web browser to measure webpage load times
for the 1,000 highest ranked webpages in the global Alexa ranking.
The Alexa list was retrieved on 18 April 2019. We choose Firefox
because as of the time of writing this paper it was the only browser
with documented support for DoH. We use Firefox 66.0.3 for the
experiments. We rely on the Browsertime framework from the
sitespeed.io project5 to instruct Firefox for the measurements and
collect HAR files with the performance statistics.
We measure performance using the locally configured resolver,
and also using the public resolvers from Google and Cloudflare over
legacy DNS as well as DoH. This way, the performance obtained
with the local resolver provides a baseline, allowing us to assess how
a change to a cloud-provided DNS service affects performance. For
the cloud provided DNS services, we also assess the performance
difference between using the traditional UDP-based DNS protocol
and DNS-over-HTTPS. In this setup, each website was loaded three
times with the browser cache purged before each measurement
iteration. This was done from a university-local server.
The left plot in Figure 6 shows the CDFs of the cumulative DNS
resolution times per webpage in milliseconds. By cumulative DNS
resolution times, we mean the time it would take to perform all
DNS queries serially, whereas in reality they can be parallelised.
We crop the CDF plot at 20,000ms, since the results have a very
long tail.
We first observe that the cloud-based name resolution via UDP
leads to faster resolution times than using the local resolver. From
the cloud-based ones, Cloudflare leads to faster resolution times
than Google. When comparing DoH-services from Cloudflare and
Google, we observe that using DoH leads to longer DNS resolution
times than when using the traditional DNS resolution. This is to
be expected from the added overhead for encryption and transport.
Also, we observe that the DoH resolution provides comparable
resolution times to the local resolver, with again Cloudflare slightly
faster than Google.
Even though these results show that changing to DNS resolution
via DoH leads to longer DNS resolution times, this does not nec-
essarily translate into longer page load times. The second plot in
Figure 6 shows CDFs of the complete page load time, measured as
the time when the onload event was triggered. The onload event is
triggered when the whole page including all dependent resources
5https://www.sitespeed.io
19
 0.01 0.1 1 10BodyHdrMgmtTLSTCPCloudflareDNS resolution  cost (KB)BodyHdrMgmtTLSTCPCloudflare (persis.)BodyHdrMgmtTLSTCPGoogleBodyHdrMgmtTLSTCPGoogle (persis.)IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Timm Böttger et al.
Figure 6: CDF of DNS resolution and page load times (time of onload event): U/ indicates legacy resolver, H/ indicates resolution
via DoH, /LO indicates local resolver, /GO indicates Google and /CF indicates Cloudflare.
like stylesheets and images has been loaded [17]. Note that overall
page load times are faster than DNS resolution times as the browser
sends requests in parallel, whereas DNS plots shows cumulative
DNS resolution times without parallelism. The figure shows that
page load times are comparable for all resolution approaches. As for
the previous DNS resolution times, using a cloud-based DNS service
offers slightly faster page load times. There is however little differ-
ence between page load time via legacy DNS or DNS-over-HTTPS:
both resolution mechanisms achieve similar page load times.
Note that we also attempted to run the same experiments from
PlanetLab. Unfortunately, at the time of writing this paper, only 39
nodes were able to run these experiments, as most of them were
unreachable, and among those that were reachable, many were
running an OS that was too old to support a recent enough version
of Firefox that supports DoH. The limited results (plots on the right
in Figure 6) we obtained from PlanetLab however are consistent
with those we have obtained locally: DNS resolution via DoH takes
longer, but page load times overall change only little when changing
the resolution method.
Overall, the results of this section show that a switch to DNS-
over-HTTPS does not seem to incur significantly longer page load-
ing times. This means it is feasible to benefit from the better privacy
guarantees of DoH without sacrificing user-perceived page loading
times.
6 RELATED WORK
DNS-over-HTTPS still is a relatively new protocol. To the best of
our knowledge, this paper is the first to look into the differences
between DNS-over-HTTPS, DNS-over-TLS and UDP-based DNS.
Mozilla has published a blog post [15] briefly describing their expe-
rience with a DoH trial in Firefox. This blog post however focuses
more on reporting experiences of using a third-party resolver than
on implications that stem directly from using DoH, especially the
transport aspect. In a blog post [13], Geoff Huston also asks for
the advantage of DoH over DoT. This post discusses application
features like HTTP push and namespaces, but does not discuss
insensibility against slow queries as we do.
Since the inception of DNS, the Internet has evolved and changed,
exposing the DNS protocol to new threats and challenges. The
unencrypted transport of DNS leads to security and censorship
issues [4, 14], whereas using UDP makes DNS usable for distributed
denial-of-service attacks [2]. Other works have proposed protocol
20
changes to use persistent connections and encryption [26]. These
works list and discuss issues with the traditional UDP-based trans-
port for DNS, of which most can be addressed by using DNS-over-
HTTPS instead. In that sense, they provide good arguments to
change to DoH, but do not discuss details of DoH directly.
Content delivery networks often use DNS to perform their traffic
redirection. It is an active research area, with works aiming at
better understanding these redirection strategies [5, 8, 19]. Other
works study DNS resolver behavior in the wild with respect to
latency and traffic redirection [1], look at the impact of DNS on
overall application delays in the Internet [6, 25] or look at DNS
infrastructure provisioning at the client side [23]. While all these
works also target DNS, they have a stronger focus on the actual
applications of DNS than the protocol itself.
7 CONCLUSION
DNS is one of the most important protocols for many networked
applications today and was originally designed as an unencrypted
protocol. Growing concerns about user privacy have led to pro-
pose more secure approaches. In this paper, we have surveyed
the current DoH landscape. We have exposed the diversity in the
supported content types, in the support for DNS-over-TLS, and in
the supported TLS versions. We have seen, that while most DoH
servers support a good set of security parameters, many of them
still do support deprecated legacy settings. We have then studied
the behavior of DoT and DoH against delayed queries, showing
that HTTP/2 offers advantages over HTTP/1 and DNS-over-TLS.
In the process, we have exposed the likely reason why DoT has not
gained traction compared to DoH, despite having had a head start
of a few years before DoH. We have then quantified the overheads
incurred by the HTTP and TLS layers of HTTP/2. Finally, we have
measured how DoH impacts page load times. This has shown that
it is possible to obtain the additional security of DoH with only
marginal performance penalties.
ACKNOWLEDGMENTS
We thank our shepherd Taejoong Chung and the anonymous re-
viewers for their reviews and constructive feedback.
This research is supported by the UK’s Engineering and Physical
Sciences Research Council (EPSRC) under the EARL: sdn EnAbled
MeasuRement for alL project (Project Reference EP/P025374/1).
 0 0.2 0.4 0.6 0.8 1050001000015000DNS time (ms)CDFU/LOU/CFU/GOH/CFH/GO050001000015000onload time (ms)050001000015000DNS time (PL, in ms)050001000015000onload time (PL, in ms)An Empirical Study of the Cost of DNS-over-HTTPS
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
[13] Geoff Huston. [n.d.]. DOH! DNS over HTTPS explained. https://blog.apnic.net/
2018/10/12/doh-dns-over-https-explained.
[14] Philip Levis. 2012. The Collateral Damage of Internet Censorship by DNS Injec-
tion. SIGCOMM CCR (2012).
Firefox Nightly Secure DNS Experimental Re-
[15] Patrick McManus. [n.d.].
sults. https://blog.nightly.mozilla.org/2018/08/28/firefox-nightly-secure-dns-
experimental-results.
[16] Mozilla. [n.d.]. Bug 264354 - Enable HTTP pipelining by default. https://bugzilla.
[17] Mozilla. [n.d.]. Window: load event. https://developer.mozilla.org/en-US/docs/
mozilla.org/show_bug.cgi?id=264354.
Web/API/Window/load_event.
[18] Henrik Frystyk Nielsen, Jeffrey Mogul, Larry M Masinter, Roy T. Fielding, Jim
Gettys, Paul J. Leach, and Tim Berners-Lee. 1999. Hypertext Transfer Protocol –
HTTP/1.1. RFC 2616. https://rfc-editor.org/rfc/rfc2616.txt
[19] John S Otto, Mario A Sánchez, John P Rula, and Fabián E Bustamante. 2012.
Content Delivery and the Natural Evolution of DNS: Remote DNS Trends, Per-
formance Issues and Alternative Solutions. In Proceedings of IMC.
RFC 7541. https://rfc-editor.org/rfc/rfc7541.txt
[20] Roberto Peon and Herve Ruellan. 2015. HPACK: Header Compression for HTTP/2.
[21] The Chromium Projects. [n.d.]. HTTP Pipelining. https://www.chromium.org/
developers/design-documents/network-stack/http-pipelining.
[22] Stefan Santesson, Michael Myers, Rich Ankney, Ambarish Malpani, Slava
Galperin, and Dr. Carlisle Adams. 2013. X.509 Internet Public Key Infrastructure
Online Certificate Status Protocol - OCSP. RFC 6960. https://doi.org/10.17487/
RFC6960
[23] Kyle Schomp, Tom Callahan, Michael Rabinovich, and Mark Allman. 2013. On
[24] Marty Strong. [n.d.]. Fixing reachability to 1.1.1.1, GLOBALLY! https://blog.
measuring the client-side DNS infrastructure. In Proceedings of IMC.
cloudflare.com/fixing-reachability-to-1-1-1-1-globally.
[25] Srikanth Sundaresan, Nazanin Magharei, Nick Feamster, Renata Teixeira, and
Sam Crawford. 2013. Web performance bottlenecks in broadband access networks.
In SIGMETRICS Performance Evaluation Review.
[26] Liang Zhu, Zi Hu, John Heidemann, Duane Wessels, Allison Mankin, and Nikita
Somaiya. 2015. Connection-oriented DNS to improve privacy and security. In
IEEE Symposium on Security and Privacy (SP).
REFERENCES
[1] Bernhard Ager, Wolfgang Mühlbauer, Georgios Smaragdakis, and Steve Uhlig.
2010. Comparing DNS resolvers in the wild. In Proceedings of IMC.
[2] Marios Anagnostopoulos, Georgios Kambourakis, Panagiotis Kopanos, Georgios
Louloudakis, and Stefanos Gritzalis. 2013. DNS Amplification Attack Revisited.
Computers & Security (2013).
Internet-
[3] Stéphane Bortzmeyer. 2013.
Draft draft-bortzmeyer-dns-json-01. https://datatracker.ietf.org/doc/html/draft-
bortzmeyer-dns-json-01 Work in progress.
JSON format to represent DNS data.
[4] Stéphane Bortzmeyer. 2015. DNS Privacy Considerations. RFC 7626. https:
//doi.org/10.17487/RFC7626
[5] Timm Böttger, Felix Cuadrado, Gareth Tyson, Ignacio Castro, and Steve Uhlig.
2018. Open Connect Everywhere: A Glimpse at the Internet ecosystem through
the Lens of the Netflix CDN. SIGCOMM CCR (2018).
[6] Ilker Nadi Bozkurt, Anthony Aguirre, Balakrishnan Chandrasekaran, P Brighten
Godfrey, Gregory Laughlin, Bruce Maggs, and Ankit Singla. 2017. Why is the
Internet so slow?!. In Proceedings of PAM.
[7] Michael Butkiewicz, Harsha V. Madhyastha, and Vyas Sekar. 2011. Understanding
Website Complexity: Measurements, Metrics, and Implications. In Proceedings of
IMC.
[8] Matt Calder, Xun Fan, Zi Hu, Ethan Katz-Bassett, John Heidemann, and Ramesh
Govindan. 2013. Mapping the Expansion of Google’s serving Infrastructure. In
Proceedings of IMC.
[9] Phillip Hallam-Baker and Rob Stradling. 2013. DNS Certification Authority
Authorization (CAA) Resource Record. RFC 6844. https://rfc-editor.org/rfc/
rfc6844.txt
[10] Paul E. Hoffman and Patrick McManus. 2018. DNS Queries over HTTPS (DoH).
RFC 8484. https://doi.org/10.17487/RFC8484
[11] Zi Hu, Liang Zhu, John Heidemann, Allison Mankin, Duane Wessels, and Paul E.
Hoffman. 2016. Specification for DNS over Transport Layer Security (TLS). RFC
7858. https://rfc-editor.org/rfc/rfc7858.txt
[12] Geoff Huston. [n.d.]. APNIC Labs enters into a Research Agreement with Cloud-
flare. https://labs.apnic.net/?p=1127.
21