### Introduction

This document outlines a combined static and dynamic analysis approach for Node.js third-party libraries. The dynamic analysis tool extracts the corresponding dynamic permissions using test cases, which are then used as input to the policy enforcement component. This method aims to provide more accurate and comprehensive insights into program behavior.

### Static Analysis

Several static analysis systems have been developed for Node.js [5, 7, 18]. Static analysis examines the source code without executing it, providing an overview of potential issues and permissions. However, static analysis has limitations, such as the inability to capture runtime-specific behaviors and the potential for false positives and negatives.

### Dynamic Analysis

Dynamic program analysis involves instrumenting the execution of a program to extract information about its behavior during runtime. While dynamic analysis can provide detailed information about a single execution, this information may not generalize to other executions. Additionally, dynamic analysis can impose significant runtime overhead. Several dynamic analysis frameworks have been developed for JavaScript [2, 10, 14, 17].

### Combined Analysis

Both static and dynamic analysis have their strengths and weaknesses. By combining these two approaches, we aim to leverage their complementary nature to provide improved analysis results with minimal developer effort [3, 4].

### Tool Overview

Figure 1 provides an overview of our proposed techniques and their application in a real use case.

1. **Static Program Analysis**: The process begins with a static program analysis of the target library's source code to extract a set of candidate permissions (Fig. 1, (1)). This phase analyzes the library and its dependencies to identify interfaces, such as functions, global objects, and language built-ins, used by the library.

2. **Dynamic Program Analysis**: The static permission set is then paired with a second set gathered via dynamic program analysis (Fig. 1, (2)). During this phase, dynamic analysis is applied to the library's testing infrastructure, which encodes anticipated behaviors envisioned by the developers. We augment these test inputs with ones gathered via active learning [15], which is crucial for libraries lacking test cases.

3. **Permission Enforcement**: Finally, the permission sets gathered from both analysis phases are enforced by instrumenting the program execution (Fig. 1, (3)). If the instrumentation detects an access outside the generated permission set, it throws an exception, halting the program's execution.

### Example

Consider the following inferred permissions from a static analysis:

```json
{
  "~/libs/serialization/index.js": {
    "eval": "rx",
    "module": "r",
    "module.exports": "w"
  }
}
```

These permissions indicate the use of `eval` and `module.exports` for evaluating code and exporting library functionality.

Next, we run `perm.js -d`, our dynamic permission inference analysis, using the provided test cases to extract additional permissions from the third-party library. Since all inputs are JSON objects, the only additional permissions are related to a few built-in primitives, such as the `Array` constructor and the value `null`.

```json
{
  "~/libs/serialization/index.js": {
    "eval": "rx",
    "module": "r",
    "module.exports": "w",
    "Array": "rx",
    "null": "r"
  }
}
```

When the instrumented program enforces the combined RWX permissions, any attempt to access the `fs` library with malicious input will result in an exception, halting the program's execution.

### Discussion and Conclusion

We hope that our demonstration will initiate a discussion on best practices for third-party libraries. Some key points for discussion include:

1. **Developer Standards**: What are the best ways for developers to incorporate specific standards into the libraries they develop and share with the community? The goal is to minimize supply-chain attacks due to developer mistakes. Formalizing language-specific standards, such as minimizing the use of `eval` and ensuring adequate test case coverage, can help mitigate security issues before the libraries are shared.

2. **Repository Actions**: What steps can library repositories take to shield the community against these problems? The aim is to identify simple measures that repositories can implement to mitigate issues with minimal overhead for end users.

3. **Update Checks**: How can we improve checks on program updates? As demonstrated by the SolarWinds attack [1], discovering and mitigating vulnerabilities related to program updates is crucial. Automating these checks to the extent possible would provide significant security benefits.

We hope that our demonstration of a combined static and dynamic program analysis in the context of real Node.js applications will spark a targeted discussion around the challenges and potential solutions for third-party libraries.

### Acknowledgments

This work was partly supported by DARPA contract no. HR0011202-0013, HR001120C0191, and HR001120C0155. It also received funding from the European Union’s Horizon 2020 research and innovation programme under grant agreement No 830927 (CONCORDIA) and No 952690 (CYRENE).

### References

[1] CVE-2020-10148. Available from NIST, CVE-ID CVE-2020-10148. https://nvd.nist.gov/vuln/detail/CVE-2020-10148

[2] Esben Andreasen, Liang Gong, Anders Møller, Michael Pradel, Marija Selakovic, Koushik Sen, and Cristian-Alexandru Staicu. 2017. A Survey of Dynamic Analysis and Test Generation for JavaScript. ACM Comput. Surv. 50, 5 (2017), 66:1–66:36. https://doi.org/10.1145/3106739

[3] Michael D Ernst. 2003. Static and dynamic analysis: Synergy and duality.

[4] Chris Hawblitzel and Thorsten Von Eicken. 1998. A case for language-based protection. Technical Report. Cornell University.

[5] Igibek Koishybayev and Alexandros Kapravelos. 2020. Mininode: Reducing the Attack Surface of Node.js Applications. In 23rd International Symposium on Research in Attacks, Intrusions and Defenses (RAID 2020).

[6] Tobias Lauinger, Abdelberi Chaabane, Sajjad Arshad, William Robertson, Christo Wilson, and Engin Kirda. 2017. Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web. (2017).

[7] Magnus Madsen, Frank Tip, and Ondřej Lhoták. 2015. Static analysis of event-driven Node.js JavaScript applications. ACM SIGPLAN Notices 50, 10 (2015), 505–519.

[8] Nick Nikiforakis, Luca Invernizzi, Alexandros Kapravelos, Steven Van Acker, Wouter Joosen, Christopher Kruegel, Frank Piessens, and Giovanni Vigna. 2012. You are what you include: large-scale evaluation of remote JavaScript inclusions. In Proceedings of the 2012 ACM conference on Computer and communications security. 736–747.

[9] npm. 2016. Run a security audit. https://docs.npmjs.com/cli/v7/commands/npm-audit/

[10] Koushik Sen, Swaroop Kalasapur, Tasneem Brutch, and Simon Gibbs. 2013. Jalangi: A Selective Record-replay and Dynamic Analysis Framework for JavaScript. In Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2013). ACM, New York, NY, USA, 488–498. https://doi.org/10.1145/2491411.2491447

[11] Snyk. 2016. Find, fix and monitor for known vulnerabilities in Node.js and Ruby packages. https://snyk.io/

[12] Deian Stefan. 2015. Principled and Practical Web Application Security. Stanford University.

[13] Deian Stefan, Edward Z Yang, Petr Marchenko, Alejandro Russo, Dave Herman, Brad Karp, and David Mazieres. 2014. Protecting Users by Confining JavaScript with COWL. In 11th USENIX Symposium on Operating Systems Design and Implementation (OSDI 14). 131–146.

[14] Haiyang Sun, Daniele Bonetta, Christian Humer, and Walter Binder. 2018. Efficient Dynamic Analysis for Node.js. In Proceedings of the 27th International Conference on Compiler Construction (CC 2018). ACM, New York, NY, USA, 196–206. https://doi.org/10.1145/3178372.3179527

[15] Nikos Vasilakis, Achilles Benetopoulos, Shivam Handa, Alizee Schoen, Jiasi Shen, and Martin C. Rinard. 2021. Supply-Chain Vulnerability Elimination via Active Learning and Regeneration. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS ’21). Association for Computing Machinery, New York, NY, USA, 16. https://doi.org/10.1145/3460120.3484736

[16] Nikos Vasilakis, Ben Karel, Nick Roessler, Nathan Dautenhahn, André DeHon, and Jonathan M. Smith. 2018. BreakApp: Automated, Flexible Application Compartmentalization. In Networked and Distributed Systems Security (NDSS’18). https://doi.org/10.14722/ndss.2018.23131

[17] Nikos Vasilakis, Grigoris Ntousakis, Veit Heller, and Martin C. Rinard. 2021. Efficient Module-Level Dynamic Analysis for Dynamic Languages with Module Recontextualization. In Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE 2021). Association for Computing Machinery, New York, NY, USA, 1202–1213. https://doi.org/10.1145/3468264.3468574

[18] Nikos Vasilakis, Cristian-Alexandru Staicu, Grigoris Ntousakis, Konstantinos Kallas, Ben Karel, André DeHon, and Michael Pradel. 2021. Preventing Dynamic Library Compromise on Node.js via RWX-Based Privilege Reduction. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS ’21). Association for Computing Machinery, New York, NY, USA, 18. https://doi.org/10.1145/3460120.3484535

[19] Markus Zimmermann, Cristian-Alexandru Staicu, Cam Tenny, and Michael Pradel. 2019. Smallworld with High Risks: A Study of Security Threats in the Npm Ecosystem. In Proceedings of the 28th USENIX Conference on Security Symposium (SEC’19). USENIX Association, USA, 995–1010.