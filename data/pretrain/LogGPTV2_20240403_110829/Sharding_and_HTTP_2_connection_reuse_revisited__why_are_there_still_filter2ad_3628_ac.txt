### Takeaway
The `credentials` flag in the Fetch Standard is responsible for causing redundant connections (CRED). Disabling this flag can reduce redundancy by 25%. Since only a few parties need to make changes, such a reduction is feasible. However, a comprehensive privacy analysis of the Fetch Standard should be conducted, especially given that its added value is already under discussion [22].

### 6. Conclusion
In this paper, we investigate when HTTP/2 Connection Reuse is ineffective and the circumstances under which Chromium opens redundant connections, potentially degrading performance.

Our findings indicate that 36% to 72% of the 6.24 million HTTP Archive websites and 78% of the Alexa Top 100k websites open redundant connections. These redundancies can be attributed to tracking and advertisements embedding additional domains with unsynchronized load-balancing, the Fetch Standard's refusal to reuse connections due to (questionable) privacy concerns, and domain sharding with disjoint certificates.

Redundant connections are not a thing of the past, and HTTP/3, which uses a similar mechanism, will also encounter them. However, we see straightforward steps for mitigation due to the central role of the leading causes: modifying the Fetch Standard and improving load-balancing by advertisers require small changes from a few parties but can have a significant impact. On the other hand, merging certificates for domain sharding involves many parties, each with a relatively small footprint, and will likely take much longer as many operators need to be educated. Future work could focus on studying the exact performance impact of our findings.

### Sharding and HTTP/2 Connection Reuse Revisited: Why Are There Still Redundant Connections?
**IMC '21, November 2–4, 2021, Virtual Event, USA**

### Acknowledgments
This work was funded by the German Research Foundation (DFG) under Grant No. WE 2935/20-1 (LEGATO). We thank the anonymous reviewers and our shepherd Mattijs Jonker for their valuable comments. We also thank the network operators at RWTH Aachen University, especially Jens Hektor and Bernd Kohler.

### References
[1] Waqar Aqeel, Balakrishnan Chandrasekaran, Anja Feldmann, and Bruce M. Maggs. 2020. On Landing and Internal Web Pages: The Strange Case of Jekyll and Hyde in Web Performance Measurement. In ACM Internet Measurement Conference (IMC '20). https://doi.org/10.1145/3419394.3423626

[2] Mike Belshe, Roberto Peon, and Martin Thomson. 2015. Hypertext Transfer Protocol Version 2 (HTTP/2). RFC 7540. RFC Editor. http://www.rfc-editor.org/rfc/rfc7540.txt

[3] Mike Bishop. 2021. Hypertext Transfer Protocol Version 3 (HTTP/3). Internet-Draft draft-ietf-quic-http-34. IETF Secretariat. https://www.ietf.org/archive/id/draft-ietf-quic-http-34.txt

[4] Enrico Bocchi, Luca De Cicco, Marco Mellia, and Dario Rossi. 2017. The Web, the Users, and the MOS: Influence of HTTP/2 on User Experience. In Passive and Active Measurement (PAM '17). https://doi.org/10.1007/978-3-319-54328-4_4

[5] Matt Calder, Ashley Flavel, Ethan Katz-Bassett, Ratul Mahajan, and Jitendra Padhye. 2015. Analyzing the Performance of an Anycast CDN. In Proceedings of the 2015 Internet Measurement Conference (Tokyo, Japan) (IMC '15). Association for Computing Machinery, New York, NY, USA, 531–537. https://doi.org/10.1145/2815675.2815717

[6] C. Contavalli, W. van der Gaast, D. Lawrence, and W. Kumari. 2016. Client Subnet in DNS Queries. RFC 7871. RFC Editor.

[7] Electronic Frontier Foundation. 2021. Certbot. https://certbot.eff.org/. (Accessed on 29/09/2021).

[8] Roy T. Fielding and Julian Reschke. 2014. Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing. RFC 7230. RFC Editor. http://www.rfc-editor.org/rfc/rfc7230.txt

[9] Utkarsh Goel, Moritz Steiner, Mike P. Wittie, Stephen Ludin, and Martin Flack. 2017. Domain-Sharding for Faster HTTP/2 in Lossy Cellular Networks. Technical Report. https://arxiv.org/abs/1707.05836.

[10] Ilya Grigorik. 2013. High Performance Browser Networking: What every web developer should know about networking and web performance. O’Reilly Media, Inc. https://hpbn.co/.

[11] HTTP Archive. 2020. State of the Web - Total Requests per page. (Archived on 17/05/2021). https://httparchive.org/reports/state-of-the-web#reqTotal.

[12] Paul Jensen. 2017. Google Groups Discussion PI:EMAIL: Intent to implement: Socket Tagging. https://groups.google.com/a/chromium.org/g/net-dev/c/KL1TC-O51fM/m/0b26cspCAwAJ. (Archived on 22/05/2021).

[13] Jawad Manzoor, Idilio Drago, and Ramin Sadre. 2016. The curious case of parallel connections in HTTP/2. In Conference on Network and Service Management (CNSM '16). https://doi.org/10.1109/CNSM.2016.7818414

[14] Jawad Manzoor, Ramin Sadre, Idilio Drago, and Llorenç Cerdà-Alabern. 2018. Is There a Case for Parallel Connections with Modern Web Protocols?. In IFIP Networking Conference and Workshops (NETWORKING '18). https://doi.org/10.23919/IFIPNetworking.2018.8696647

[15] Robin Marx, Peter Quax, Axel Faes, and Wim Lamotte. 2017. Concatenation, Embedding and Sharding: Do HTTP/1 Performance Best Practices Make Sense in HTTP/2?. In Conference on Web Information Systems and Technologies (WEBIST '17). https://doi.org/10.5220/0006364101600173

[16] Pat Meenan, Rick Viscomi, Paul Calvano, and Barry Pollard. 2021. HTTP Archive. https://httparchive.org/. (Archived on 26/05/2021).

[17] Mark Nottingham. 2017. Issue 697333: Support ORIGIN frame. https://bugs.chromium.org/p/chromium/issues/detail?id=697333. (Accessed on 25/05/2021).

[18] Mark Nottingham and Erik Nygren. 2018. The ORIGIN HTTP/2 Frame. RFC 8336. RFC Editor. https://www.rfc-editor.org/rfc/rfc8336.txt

[19] Eric Roman and Matt Menke. 2018. NetLog: Chrome’s network logging system. https://www.chromium.org/developers/design-documents/network-stack/netlog. (Archived on 22/05/2021).

[20] Sitespeed.io. 2021. Browsertime - Your browser, your page, your scripts! https://github.com/sitespeedio/browsertime. (Archived on 26/05/2021).

[21] StatCounter. 2021. Browser Market Share Worldwide. https://gs.statcounter.com/browser-market-share. (Archived on 22/05/2021).

[22] Anne van Kesteren. 2016. Allow connection reuse for request without credentials when TLS client auth is not in use. https://github.com/whatwg/fetch/issues/341. (Archived on 22/05/2021).

[23] Anne van Kesteren. 2017. Allow some sharing of connections with different anonymous attributes. https://bugzilla.mozilla.org/show_bug.cgi?id=1363284. (Archived on 22/05/2021).

[24] Anne van Kesteren. 2021. Fetch Standard. https://fetch.spec.whatwg.org/. (Archived on 22/05/2021).

[25] Matteo Varvello, Kyle Schomp, David Naylor, Jeremy Blackburn, Alessandro Finamore, and Konstantina Papagiannaki. 2016. Is the Web HTTP/2 Yet?. In Passive and Active Measurement (PAM '16). https://doi.org/10.1007/978-3-319-30505-9_17

[26] Xiao Sophia Wang, Aruna Balasubramanian, Arvind Krishnamurthy, and David Wetherall. 2014. How Speedy is SPDY?. In USENIX Symposium on Networked Systems Design and Implementation (NSDI '14). https://www.usenix.org/conference/nsdi14/technical-sessions/wang

[27] Maarten Wijnants, Robin Marx, Peter Quax, and Wim Lamotte. 2018. HTTP/2 Prioritization and Its Impact on Web Performance. In World Wide Web Conference (WWW '18). https://doi.org/10.1145/3178876.3186181

[28] Torsten Zimmermann, Jan Rüth, Benedikt Wolters, and Oliver Hohlfeld. 2017. How HTTP/2 Pushes the Web: An Empirical Study of HTTP/2 Server Push. In IFIP Networking Conference and Workshops (NETWORKING '17). https://doi.org/10.23919/IFIPNetworking.2017.8264830

### A. Further Results
In the following section, we provide additional details about our datasets to complement our results. Specifically, we examine the total share of certificate issuers for all connections, the ASNs observed to be affected, the overlap between both datasets, and the influence of load-balancing on the DNS resolving process.

#### A.1 Certificate Issuer Share
We found that in the ecosystem of certificate issuers, Google Trust Services and Let’s Encrypt are primarily involved in redundant connections due to non-overlapping certificate subject names (CERT). Table 5 presents the shares of the top 10 certificate issuers over all opened connections. Google Trust Services is the most frequent issuer, while Let’s Encrypt, though less common overall, is also in the top-2 for CERT-related redundant connections. Domain-wise, Let’s Encrypt leads, followed by Cloudflare in the HTTP Archive, and vice versa in our measurements. Overall, these leaders reflect their market share in terms of connections and domains.

#### A.2 ASs Affected by Cause IP
We also identified the content providers responsible for resources involved in cause IP (cf. 5.3.1). Table 6 shows the top 10 ASs involved in redundant connections of type IP. As expected, Google and Facebook ASs are prominent, as they operate their own CDNs. Amazon appears in the AS list but not in the domain list, suggesting its cloud instances or Cloudfront CDN are responsible. For example, Hotjar.com, which uses the Cloudfront CDN, is listed as place 12 in the HTTP Archive measurements and place 16 in our measurements. Adjustments to Amazon’s DNS load-balancing could help support connection reuse.

Other CDNs and providers appear in much lower quantities. AUTOMATTIC, related to WordPress tools from wp.com, has a reduced domain count compared to Cloudflare. Both account for significantly fewer connections than Google.

#### A.3 Overlap of Results Between Both Datasets
Throughout our paper, we compare results from the HTTP Archive and our Alexa list, which differ in visited domains. Table 7 shows the overlap of both datasets, intersecting the URLs to map the measurements. All numbers for the Alexa dataset are larger than for the HAR dataset, as we filtered 490.32 k requests from the 2.71 M HTTP/2 requests. Our dataset consists of 2.98 M HTTP/2 requests, with no filtering required. Table 8 shows the top 5 origins for the IP cause, matching the top origins in Table 2. Differences in top origins between our and the HTTP Archive measurements may be due to geolocation, affecting Google's redirection to its German domain. Table 9 shows the top certificate issuers between both measurements.

| **AS** | **HTTP Archive** | **Alexa 100k** |
| --- | --- | --- |
| **↑ Conns. Domains** | **Conns.** | **Domains** |
| 1 | 8.04 M | 143.49 k | 7.14 k | 315.57 k |
| 2 | 1.74 M | 46.71 k | 50.67 k | 7.51 k |
| 3 | 1.63 M | 360 | 32.04 k | 58 |
| 4 | 402.71 k | 3.36 k | 3.40 k | 9.18 k |
| 5 | 307.64 k | 14.22 k | 1.00 k | 3.50 k |
| 6 | 228.12 k | 1.62 k | 7.22 k | 886 |
| 7 | 220.43 k | 997 | 773 | 3.53 k |
| 8 | 182.22 k | 2.30 k | 3.61 k | 736 |
| 9 | 144.52 k | 10.71 k | 9.97 k | 352 |
| 10 | 130.77 k | 2.75 k | 8.64 k | 230 |

| **Origin** | **HTTP Archive** | **Alexa 100k** |
| --- | --- | --- |
| **Conns.** | **Conns.** | **Prev. Origin** |
| 1 | 15.34 k | 14.74 k | www.google-analytics.com |
| 2 | 9.44 k | 9.44 k | prev: www.googletagmanager.com |
| 3 | 6.52 k | 4.12 k | www.facebook.com |
| 4 | 5.91 k | 4.20 k | prev: connect.facebook.net |
| 5 | 5.15 k | 3.49 k | pagead2.googlesyndication.com |
|  |  |  | prev: www.googletagservices.com |
|  |  |  | googleads.g.doubleclick.net |
|  |  |  | prev: pagead2.googlesyndication.com |
|  |  |  | tpc.googlesyndication.com |
|  |  |  | prev: pagead2.googlesyndication.com |
|  |  |  | www.google.de |