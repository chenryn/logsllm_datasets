 * before adding ourselves to the wait queue. During SyncRepWakeQueue() a  
 * WALSender changes the state to SYNC_REP_WAIT_COMPLETE once replication is  
 * confirmed. This backend then resets its state to SYNC_REP_NOT_WAITING.  
 *  
 * ForDataFlush - if TRUE, we wait for the flushing data page.  
 * Otherwise wait for the sync standby  
 *  
 * Wait - if FALSE, we don't actually wait, but tell the caller whether or not  
 * the standby has already made progressed upto the given XactCommitLSN  
 *  
 * Return TRUE if either the sync standby is not  
 * configured/turned off OR the standby has made enough progress  
 */  
bool  
SyncRepWaitForLSN(XLogRecPtr XactCommitLSN, bool ForDataFlush, bool Wait)  
```  
## 测试  
下载PostgreSQL src :   
```  
http://git.postgresql.org/gitweb/?p=postgresql.git;a=snapshot;h=e5592c61adb0766eaee53ec07d2f05783d1c6548;sf=tgz  
tar -zxvf postgresql-e5592c6.tar.gz  
cd postgresql-e5592c6  
```  
补丁 :   
```  
[root@db-172-16-3-39 postgresql-e5592c6]# wget http://www.postgresql.org/message-id/attachment/29640/failback_safe_standby_v4.patch  
[root@db-172-16-3-39 postgresql-e5592c6]# patch -p1  pg_basebackup -D $PGDATA -F p -P -v -h 172.16.3.39 -p 2999 -U postgres  
WARNING:  skipping special file "./.s.PGSQL.2999"  
WARNING:  skipping special file "./.s.PGSQL.2999"94/pg_root/pg_clog/0000)  
26943/26943 kB (100%), 1/1 tablespace                                           
NOTICE:  pg_stop_backup complete, all required WAL segments have been archived  
pg_basebackup: base backup completed  
```  
配置  
```  
cd $PGDATA  
mv recovery.done recovery.conf  
vi recovery.conf  
recovery_target_timeline = 'latest'  
standby_mode = on  
primary_conninfo = 'host=172.16.3.39 port=2999 user=postgres keepalives_idle=60'                # e.g. 'host=localhost port=5432'  
```  
启动standby  
```  
pg_ctl start  
```  
主节点, 查看复制状态 :   
```  
pg94@db-172-16-3-39-> psql  
psql (9.4devel)  
Type "help" for help.  
digoal=# select * from pg_stat_replication ;  
  pid  | usesysid | usename  | application_name | client_addr | client_hostname | client_port |         backend_start         |   st  
ate   | sent_location | write_location | flush_location | replay_location | sync_priority | sync_state   
-------+----------+----------+------------------+-------------+-----------------+-------------+-------------------------------+-----  
------+---------------+----------------+----------------+-----------------+---------------+------------  
 12221 |       10 | postgres | walreceiver      | 172.16.3.33 |                 |       20441 | 2013-08-06 09:15:35.617838+08 | stre  
aming | 0/3000090     | 0/3000090      | 0/3000090      | 0/3000090       |             0 | async  
(1 row)  
```  
创建测试表, 测试函数   
```  
digoal=# create table test (id int primary key, info text, crt_time timestamp);  
CREATE TABLE  
digoal=# create or replace function func() returns void as $$  
digoal$# declare   
digoal$#   v_id int;  
digoal$# begin  
digoal$#   v_id := round(5000000*random());  
digoal$#   update test set info=md5(random()::text),crt_time=clock_timestamp() where id=v_id;  
digoal$#   if found then  
digoal$#     return;  
digoal$#   else  
digoal$#     insert into test values (v_id,md5(random()::text),clock_timestamp());  
digoal$#   end if;  
digoal$#   return;  
digoal$# end;  
digoal$# $$ language plpgsql strict;  
CREATE FUNCTION  
```  
测试  
```  
digoal=# select func();  
 func   
------  