### Scenario 1

In this simplified scenario, we aim to illustrate the core issue we are encountering. Our team lead document contains two fields: "Primary Product" and "Secondary Product." Our goal is to display the distribution of all products among the team leads. To achieve this, we perform a term aggregation on both the "Primary Product" and "Secondary Product" fields.

Since these fields represent the same set of products, we need to merge the resulting buckets. While this is straightforward with term aggregations, it introduces a problem: if a product appears in both fields for the same document, the document count will be inflated by one after merging the buckets. We require a method to identify if a document has already been counted in the first aggregation, so that it is not double-counted when merging the second aggregation.

### Scenario 2

This scenario more closely resembles our actual use case, which involves nested documents. Each team lead is represented as a top-level document, with team members nested within. Our objective is to show the distribution of teams that contain male or female members, assuming each team has a single leader.

To accomplish this, we would run two aggregations:
1. A term aggregation on the gender of the team leaders.
2. A nested term aggregation on the gender of the team members, followed by a reverse nested aggregation to get the counts of team leaders for each gender.

The results from these two aggregations would then need to be manually combined. However, we face the same challenge as in the first scenario: determining whether a team leader has already been included in the first aggregation to avoid double-counting in the second aggregation. (For reference, the specific aggregation we use can be found [here](https://gist.github.com/SMUnlimited/86e03e8f59ac6a09935c)).

Another potential solution is to include the team leader as a nested team member, allowing us to perform a single nested term aggregation followed by a reverse nested aggregation to get the team member counts. This approach, however, would result in duplicating all the team leader data, which is not ideal.

### Discussion

What do you think would be the best way to solve this problem? Note that we have not yet considered other types of aggregations, some of which may not be as straightforward to merge. In theory, similar approaches could be applied to those as well.