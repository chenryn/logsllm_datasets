**Scenario 1**  
This is a very simplified scenario but captures the problem we are facing.
We have a team lead document with a field for ‚ÄúPrimary Product‚Äù and a field
for ‚ÄúSecondary Product‚Äù. We want to show the distribution of all products
amongst team leads. To do so we would do a term aggregation on ‚ÄúPrimary
Product‚Äù and a term aggregation on ‚ÄúSecondary Product‚Äù.
As this is the same products we want to merge the buckets together (done
manually). This is simple to do with the term aggregation but has a problem.
If both fields have the product, the document count will be one more than it
should be once you merge the buckets. We need a way to realise if a document
is already included in the count of the first aggregation, so we don‚Äôt add the
same document from the second aggregation.
**Scenario 2**  
This next scenario is similar to our actual use case where we make use of
nested documents but it is the same problem as above.
Each team lead is a top level document nested with team members. We then want
to show the distribution of teams that contain males or females, assuming a
single team leader exists per team.
Again we would run two aggregations. For team leaders this would be a term
aggregation on gender. For team members this would be a nested term
aggregation on gender followed by a reverse nested aggregation to get team
leader counts for each gender. The two aggregation result buckets would then
have to be manually combined. But it‚Äôs the same problem of working out when a
team lead was already included in the first aggregation so any duplicate team
leads that match in the second aggregation can be ignored. (The aggregation we
would use can be seen here
https://gist.github.com/SMUnlimited/86e03e8f59ac6a09935c)
Another solution could be to include the team lead himself as a nested team
member so we can just do a single nested term aggregation followed by a
reverse nested aggregation to get the team member counts. But this means you
are duplicating all the team lead data which is not ideal.
üí• What do people think would be the best way to solve this problem?
_Note we haven‚Äôt thought about other types of aggregations yet (some may not
be as straightforward to merge buckets) but in theory could also be applied._