or invalidated session), an error page is returned, which
then redirects the user to the default action.
Actions allow web applications to maintain control
over application control ﬂow. Because session-speciﬁc
actions are named with a nonce, other sessions cannot
invoke them.
In addition, SIF tracks the active set of
actions for each session. An error page is returned if a
request tries to invoke an action that is not active. The
active set contains all external actions, and all session-
speciﬁc actions that were targets of hyperlinks and forms
of the last response. Thus, a client by default cannot re-
submit a form by replaying its (inactive) action identiﬁer.
Once the appropriate action object has been found, the
invoke method is called on it with a Request object
as an argument. The invoke method executes with the
authority of the session principal, as shown by the where
caller(req.session) annotation in Figure 2.
Web applications implement their functionality in the
action’s invoke method, as Jif 3.0 code.
If required,
the invoke method can access back-end services (e.g.,
a database) provided that suitable Jif interfaces exist for
the services. For example, web applications can access
the ﬁle system since the Jif run-time library provides a Jif
interface for it, which translates ﬁle system permissions
into Jif security policies.
SIF web applications can provide secure web inter-
faces to legacy systems, by accessing the legacy sys-
tems as back-end services. The information security of
6
16th USENIX Security Symposium
USENIX Association
these systems is not compromised by allowing SIF appli-
cations to access them, since all accesses from Jif code
must conform to the system’s Jif interface.
Step 4: The invoke method generates a Page object.
An object of the class Page is a representation of an
HTML page. SIF uses the class Node to represent HTML
elements; the class Page, and other HTML elements,
such as Paragraph and Hyperlink, are subclasses of
Node. Nodes may be composed to form trees, which
represent well-formed HTML code. The class Node is
parameterized by two labels, Out and In. The Out la-
bel is an upper bound on the labels of information con-
tained in the node object and its children. For example,
an HTML body may contain several paragraphs, each of
which contains text and hyperlinks; the Out parameter
of each Paragraph node is at least as restrictive as the
Out parameters of its child Nodes. The In parameter is
used to bound information that may be gained by from
subsequent requests originating from this page, and is
discussed further in Section 2.4.
The Action.invoke method must generate a Page
object, and call Servlet.setReturnPage with that
Page object as an argument.
The signature for
Servlet.setReturnPage ensures that the Out param-
eter of the Page is at most as restrictive as the label
{> → req.session;⊥ ← ⊥}, where req.session is
the session principal. This label is an upper bound on
all labels that permit the principal req.session to read
information, and thus the Page object returned for the re-
quest can contain only information that the session prin-
cipal is permitted to view. This restriction is enforced
statically through the type-system, and requires no run-
time examination of labels by the SIF framework. Thus,
assurance is gained prior to deployment that conﬁdential
information on the server is not inadvertently released.
In addition, by requiring the application to produce
Page objects instead of arbitrary byte sequences, SIF can
ensure that each input ﬁeld on a page has an appropriate
security policy associated with it (see Section 2.4), and
that the web application serves only well-formed HTML
that does not contain possibly malicious JavaScript.
Step 5: The Page is converted into HTML. SIF con-
verts the Page object into HTML, which is sent to the
client. The Page object may contain hyperlinks and
forms whose targets are actions of the servlet; SIF en-
sures that the HTML output for these hyperlinks and
forms contain parameter values specifying the appropri-
ate actions’ unique identiﬁers; if the user follows a hyper-
link or submits a form, the appropriate action is invoked.
Information ﬂow over requests
2.4
The Jif compiler ensures that security policies are en-
forced end-to-end within a servlet, that is, from when a
request is submitted until a response is returned. How-
ever, information may ﬂow over multiple requests within
the same session, for example, by being stored in session
state, or by being sent to a (well-behaved) client that re-
turns it in the next request. SIF tracks information ﬂow
over multiple requests, to ensure that appropriate security
labels are enforced on data at all times.
Information ﬂow through parameter values. SIF re-
quires each input ﬁeld on a page to have an associated
security label to be enforced on the input when submit-
ted. This label is statically required to be at least as re-
strictive as the label of any default value for the input
ﬁeld, to prevent a default value from being sent back to
the server with a less restrictive policy enforced on it.
SIF ensures that the submitted value of an input ﬁeld
has the correct label enforced on it by preventing ap-
plications from arbitrarily accessing the HTTP request’s
map from parameter keys to parameter values.
In-
stead, when an input ﬁeld is created in the outgoing
Page object, an Input object is associated with it. An
Input object is a pair (n, L), where n is a freshly gen-
erated nonce, and L is the label enforced on the input
value. An application can retrieve a data value from an
HTTP request only by presenting the Input object to
the Request.getParam(Input inp) method, which
checks the nonce, and returns the submitted value with
label inp.L enforced on it. This “closes the loop,” en-
suring that data sent to the client has the correct security
enforced on it when the client subsequently sends it back.
SIF does not try to protect against the user copying
sensitive information from the web page, and pasting into
a non-sensitive input ﬁeld. That is impossible in general,
and the application should deﬁne labels that prevent the
user from seeing information that they are not trusted to
see. By keeping track of input labels, SIF prevents web
applications from laundering away security policies by
sending information through the client. As discussed in
Section 2.5, the user can also inspect the labels on inputs
to see how the application will treat the information.
The getParam method signature also ensures that the
label {⊥ → ⊥ ; > ← session} is enforced on val-
ues submitted by the user. This label indicates that
the value has been inﬂuenced by the session princi-
pal. Thus, SIF ensures that the integrity policy of any
value obtained from the client correctly reﬂects that the
client has inﬂuenced it; the Jif 3.0 compiler then ensures
that this “tainted,” or low-integrity, information cannot
be incorrectly used as if it were “untainted,” or high-
integrity. This helps avoid vulnerabilities such as SQL
injection, where low-integrity information is used in a
high-integrity context.
Information ﬂow through session state. Java servlets
typically store session state in the session map of
the class javax.servlet.http.HttpSession. How-
USENIX Association
16th USENIX Security Symposium
7
ever, direct access to the session map would allow
SIF applications to bypass the security policies that
should be enforced on values stored in the map.
In-
stead, SIF web applications may store state in ﬁelds
of session-speciﬁc actions, or in an application-deﬁned
subclass of SessionState. Since ﬁelds must have
labels,
the Jif compiler ensures that web applica-
tions honor labels associated with values stored in
the state. Web applications may override the method
Servlet.createSessionState to create an appropri-
ate SessionState object; SIF ensures at run time that
this method is called exactly once per session.
Information ﬂow through action invocation. A sub-
tlety of the framework is that the very act of invoking an
action, by following a hyperlink or submitting a form,
may reveal information to the web application. For ex-
ample, if a hyperlink to some action a is generated if and
only if some secret bit is 1, then knowing that a is in-
voked reveals the value of the secret bit.
To
for
this
ﬂow,
account
information
the
Action.invoke method takes two arguments:
a
label lbl, and a reference to the Request object. The
label lbl is an upper bound on the information that may
be gained by knowing which action has been invoked.
This means that lbl must be at least as restrictive as
the output information for the hyperlink or form used
to invoke the action. In our example, the value of lbl
when invoking a would be at least as restrictive as the
label of the secret bit. In general, the value for lbl is
the value of the In parameter of the Node that contains
the link to the action;
the constructors for the Node
subclasses ensure that the parameter In correctly bounds
the information that may be gained by knowing the node
was present in the Page returned for the request.
The method signature for Action.invoke ensures
that the security label lbl is enforced on the reference
to the Request object (“...Request{*lbl} req...”) and
that lbl is a lower-bound for observable side-effects of
the method (“invoke{*lbl}(...)”), meaning that any
effects of the method (such as assignments to ﬁelds) must
be observable only at security levels bounded below by
lbl. These restrictions ensure that SIF correctly tracks
the information that may be gained by knowing which
actions were available for the user to invoke.
2.5 Deploying SIF web applications
SIF web applications may be deployed on standard Java
Servlet containers, such as Apache Tomcat, and thus may
be used in a multi-tier architecture wherever Java servlets
are used. The SIF and Jif run-time libraries must be
available on the class path, but deployment of SIF web
applications is otherwise similar to deployment of ordi-
nary Java servlets. The deployer of a SIF web application
is free to specify conﬁguration information in the appli-
cation’s deployment descriptor (the web.xml ﬁle). For
example, the deployer may require all connections to use
SSL, thus protecting the conﬁdentiality and integrity of
information in transit between client and server. Addi-
tionally, there are several SIF-speciﬁc options that a de-
ployer may specify in the deployment descriptor.
Cascading style sheets. SIF applications must use the
Node subclasses to generate responses to requests, which
allows them to generate only well-formed HTML. To al-
low ﬂexibility in presentation details such as colors and
font attributes, SIF permits the deployment descriptor
to specify a cascading style sheet (CSS) to use in the
presentation of all HTML pages generated by the ap-
plication; SIF adds this URL in the head of all gener-
ated HTML pages. Node objects can specify a class
attribute, allowing style sheets to provide almost arbi-
trary formatting. While this allows great ﬂexibility, care
must be taken that the CSS does not contain mislead-
ing formatting. For example, inappropriate formatting
might lead a user to enter sensitive information into a
non-sensitive input ﬁeld, such as a social security num-
ber into an address ﬁeld. The deployer should review the
CSS before deploying the application.
JavaScript. Dynamically generated JavaScript can pro-
vide rich user interfaces, but introduces new possibili-
ties for security violations and covert channels. SIF does
not allow web applications to send dynamic JavaScript
to the client. However, as with CSSs, SIF allows deploy-
ment descriptors to specify a URL containing (static)
JavaScript code to be included on all generated HTML
pages. Explicit inclusion of JavaScript permits easy re-
view by the deployer. Ideally, SIF should automatically
check included JavaScript code (or perhaps an extension
of JavaScript with information-ﬂow control); we leave
this to future work.
Policy visualization. User awareness of security poli-
cies is an important aspect of secure systems. Since SIF
tracks the policies of information sent to the user, SIF
can augment the user interface to inform the user of the
security policies of data they view and supply. Provided
the user trusts the interface (see Section 2.1), this helps
prevent, for instance, a user from inappropriately copy-
ing sensitive information from the browser into an email,
or from following an untrusted hyperlink.
Web applications may opt to allow SIF to automati-
cally color-code information sent to the client, based on
policy annotations. When the user presses a hotkey com-
bination, JavaScript code recolors the page elements to
reﬂect their conﬁdentiality, varying from red (highly con-
ﬁdential) to green (low conﬁdentiality). Both displayed
information and inputs are colored appropriately. An ad-
ditional hotkey colors the page based on the integrity
8
16th USENIX Security Symposium
USENIX Association
policies of information. A third hotkey shows a legend of
colors and corresponding labels so the user can identify
the precise security policy for each page element.
3 Language extensions
Web applications have diverse, complicated, and dy-
namic security requirements. For example, web appli-
cations display a plethora of authentication schemes, in-
cluding various password schemes, password recovery
schemes, biometrics, and CAPTCHAs to identify human
users. Web applications often enforce dynamic security
policies, such as allowing users to specify who may view
and update their information. Moreover, the security en-
vironment of a web application is dynamic: new users
are being created, users are starting and ending sessions,
and authenticating themselves.
In order both to accommodate diverse, complicated,
and dynamic security requirements, and to provide as-
surance that these requirements are met, we have pro-
duced Jif 3.0, a new version of Jif. Section 2.2 describes
the previous version of Jif; this section presents new fea-
tures that support dynamic security requirements: inte-
gration of information ﬂow with application-deﬁned au-
thentication and authorization, and improved ability to
reason about and compute with dynamic security labels
and principals.
Care was needed in the design and implementation of
these language extensions, since there is always a tension
in language-based security between expressiveness and
security. In particular, the new dynamic security mech-
anisms in Jif 3.0 create new information channels, com-
plicating static analysis of information ﬂow. Importantly,
Jif 3.0 tracks these channels to prevent their misuse.
3.1 Application-speciﬁc principals
Principals are entities with security concerns. Applica-
tions may choose which entities to model as principals.
Principals in Jif are represented at run time, and thus can
be used as values by programs during execution. Jif gives
run-time principals the primitive type principal. Jif
3.0 introduces an open-ended mechanism that allows ap-
plications great ﬂexibility in deﬁning and implementing
their own principals.
Applications may implement
the Jif 3.0 interface
jif.lang.Principal, shown in simpliﬁed form in
Figure 3. Any object that implements the Principal in-
terface is a principal; it can be cast to the primitive type
principal, and used just as any other principal. The
Principal interface provides methods for principals to
delegate their authority and to deﬁne authentication.
Delegation is crucial. For example, user principals
must be able to delegate their authority to session princi-
pals, so that requests from users can be executed with