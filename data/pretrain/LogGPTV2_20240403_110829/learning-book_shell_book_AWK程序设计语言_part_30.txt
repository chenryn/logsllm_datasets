182
---
## Page 191
附录AAWK总结
183
pattern, pattern
最后一个模式是范围模式，它不能作为其他模式的组成部分，类似地，BEGIN和END也不能和其他
模式结合.
188
动作
一个动作由一系列的语句组成，这些语句包括：
break
continue
delete array-element
do statement while (expression )
exit[expression ]
expression
if (expression) statement [else statement]
input-output statement
for(expression;expression;expression)statement
for (uariable in array) statement
next
return [expression]
while (expression) statement
file
把表达式输出到文件file中
printf fmt, expr-list
格式化并输出
printf fmt, expr-list >file
格式化并输出到文件file中
system(cmd-line)
执行命令cmd-line，返因命令的退出状态
print后面的expr-list，以及printf后面的fmt，expr-list可以用括号括起来，在print和
printf 中，>>file表示把输出追加到文件file 的末尾，|command表示把输出写到一个管通中，类
似的，command|getline表示把命令command的输出以管道的方式输送给getline.函数
get1ine在遇到文件末尾时返回 0,出错时返因-1.
189
printf格式转换
printf 与 sprintf 识别以下格式转换命令：
8c
ASCII字符
&d
十进制数
8e
[ ]d.dddddde[+-1dd
8f
[-]ddd.dddddd
8g
等效于&e或&f，选择转换后长度较短的郡个，无意义的零会被删除
80
无符号八进制数
字符串
8x
无符号十六进制数
88
打印一个百分号8，不会有参数被转换
8与控制字符之间可以出现额外的参数：
一
表达式在它所处的域中左对齐
width
当需要时，把域的宽度填充到该值，前导的0表示用0填充
·prec
字符串最大宽度，或小数点后保留的位数
内建变量
下面列出的内建变量可以使用在任意一个表达式中：
ARGC
命令行参数的个数
ARGV
命令行参数组成的数组（ARGV[0.ARGC-1]）
FILENAME
当前输入文件的文件名
FNR
当前输入文件已读取的记录个数
---
## Page 193
附录AAWK总结
185
FS
输入数据的字段分隔符（默认是空格）
NF
当前输入记录的字段个数
NR
从程序开始到现在，读取到的记录个数
OFMT
数字的输出格式（默认是“名，6g"）
SaO
输出字段分隔符（默认是空格）
ORS
输出记录分隔符（双认是换行符）
RLENGTH
被函数match 中的正则表达式匹配的字符串的长度
RS
输入数据的记录分隔符（跌认是换行符）
RSTART
被函数match匹配的字符串在原字符串中的开始位置
SUBSEP
其有形式[ij：…-]的数组下标的分隔符（默认是"\034")
ARGC和ARGV包含被执行的程序的名字（通常是awk)，但是不包括出现在命令行中的awk程序或选
项.RLENGTH 同时也是match 的返国值.
内建字符事函数
在下面列出的字符串函数中，8和t表示字符串，r表示正则表达式，i和n表示整数
sub和gsub的替换字符串中的&会被匹配的字符串替换摔，而\&表示一个字面意义上的&.
190
gsub(r, s, t)
全局地替换8中被r匹配的子字符串t，返回替换发生的次数；
如果省略t，则默认使用$0
index(s, t)
返回t在8中的开始位置，如果8不包含t，则返回0
length (8)
返回g的长度
match (8, r)
返回g中匹配r的子字符串的起始位置，如果
不存在可匹配的子字符串，则返回0，调用该函数会同时设置
RSTART 与 RLENGTH
split(8, α, fs)
按照f8，把8切分到数组a中，返因分割后的字段的个数；
如果省略fs，则双认使用FS
sub(r, 8, t)
类似于gsub，但是它只替换第一个被匹配的子字符串
substr (s, i, n)
返回g中，从i开始的，长度为n的子字符串，
如果省略n，则返回g 中从i开始的后缀
内建算术函数
atan2 (y, x)
y/x的反正切值，弧度制，定义域从一π到π
cos (x)
余弦（弧度制）
exp (x)
指数er
int (x)
取整
1og(x)
自然对数
rand()
返回-个伪贱机数r（0≤r<1）
sin (x)
正弦 (弧度制)
---
## Page 194
附录AAWK总结
186
sqrt (x)
方根
srand (x)
设置随机数种子，如果省略x，则默认使用当天的时间
表示式运算符（按优先级递增排列）
表达式可以通过下列运算符进行组合：
+=
=t=/==^=
赋值
条件表达式
11
逻辑或
&&
逻辑与
in
数组成员运算符
1~
正则表达式匹配运算符，与否定匹配运算符
关系运算符
字符事拼接（没有显式的运算符)
+
加，减
*/8
乘，除，取模
单目加，单目减，逻辑非
指数运算符
自增，自减（包括前组形式与后短形式）
S
宇段
所有的运算符都是左结合的，除了赋值运算符，？：和”，它们是右结合的任意一个表达式都可以用括号
括起来.
191
正则表达式
正则表达式的元字符包括：
\^$.[]1（）*+?
下面的表格总结了正则表达式及其所匹配的字符串：
°.乐 交,&: set new seed fr random number generator; uses time of day if no x given
---
## Page 195
附录AAWK总结
187
C
匹配一个非元字符e
\c
匹配一个转义序列，或一个字面上的字符e
匹配一个字符串的开始
$
匹配一个字符串的结束
匹配任意一个字符
[^abc...]
字符集合：匹配abc...中的任意一个字符
r|r2
选择：匹配一个能被r或r匹配的字符事
(r) (r2)
拼接：匹配字符串xy，其中x被r匹配,y被r匹配
(r) *
匹配0个或多个连续出现的被r匹配的字符事
() +
匹配1个或多个连续出现的被r匹配的字符串
(r)?
匹配0个或1个被r匹配的字符串
(r)
组合：匹配的字符串与r所匹配的字符事相网
运算符按优先级升序排列，只要没有违反优先级规则，就可以省略多余的括号，
转义序列
在字符串与正则表达式中，转义序列具有特殊的含义。
\b
退格
\f
换页
\n
换行
\r
图车
\t
制表
ppp\
八进制数，ddd是1到3个数字，每个数字的值在0到7之网
\c
其他字面上的字符c，比如\"表示"，\\表示\
限制
任意一个特定的awk实现都会强加一些限制条件，下面列出了一些典型值：
100个字段
每条输入记录3000个字符
每条输出记录3000个字符
每个字段1024个字符
每个printf字符串3000个字符
字面字符串400个字符
字符集合400个字符
15个打开文件
1个管道
双精度浮点数
---
## Page 196
附录AAWK总结
188
数值的限制与本地系统所能表示的数值范围有关，比如某个机器所能表示的数值范围是10-38到1038，
超过这个范围的数值只拥有字符串形式
192
初始化，比较和强制类型转换
每一个变量或字段，在任意时刻都可能是字符串，或数值，或两者都是，当变量通过赋值语句来获取
一个值时：
var = expr
它的类型也会被设置成表达式的类型（“赋值”包括+=，-=，等等）.算术表达式的类型是数值，拼接是字
符串，以此类推，如果赋值语句只是一个简单的复制，比如v1=V2，那么v1就会被设置成v2的类型.
比较时，如果两个操作数的类型都是数值，那么比较操作就会按照数值比较来进行.否则的话，操作
数被强制转换成字符事（如果原来不是字符串的话），此时比较操作就按照字符串比较来进行.通过某些
手段，可以把任意一个表达式强制转换成数值类型，比如
expr + 0
转换成字符串可以这样做（也就是和空字符作拼接操作）：
expr ""
字符事的数值形式的值，指的是该字符事的数值前组转换成数值后所得到的值，
未初始化的变量的值是数值0或空字符串"".因此，如果x没有被初始化过，则条件判断
if (x) ...
就会失败，网样，下面这些条件判断：
if (!x) ...
if (x == 0) ...
if (× == "") ..*
都会成功，但是注意：
if (x == "0").·*
的比较结果为假，
如果可能的话，字段的类型可以通过上下文环境来判断，比如，