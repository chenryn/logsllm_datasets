title:ShadowReplica: efficient parallelization of dynamic data flow tracking
author:Kangkook Jee and
Vasileios P. Kemerlis and
Angelos D. Keromytis and
Georgios Portokalidis
ShadowReplica: Efﬁcient Parallelization of Dynamic Data
Flow Tracking
Kangkook Jee
Columbia University
Vasileios P. Kemerlis
Columbia University
Angelos D. Keromytis
Columbia University
PI:EMAIL
PI:EMAIL
PI:EMAIL
Georgios Portokalidis
Stevens Institute of Technology
PI:EMAIL
ABSTRACT
1.
INTRODUCTION
Dynamic data ﬂow tracking (DFT) is a technique broadly used in
a variety of security applications that, unfortunately, exhibits poor
performance, preventing its adoption in production systems. We
present ShadowReplica, a new and efﬁcient approach for acceler-
ating DFT and other shadow memory-based analyses, by decou-
pling analysis from execution and utilizing spare CPU cores to run
them in parallel. Our approach enables us to run a heavyweight
technique, like dynamic taint analysis (DTA), twice as fast, while
concurrently consuming fewer CPU cycles than when applying it
in-line. DFT is run in parallel by a second shadow thread that is
spawned for each application thread, and the two communicate us-
ing a shared data structure. We avoid the problems suffered by
previous approaches, by introducing an off-line application anal-
ysis phase that utilizes both static and dynamic analysis method-
ologies to generate optimized code for decoupling execution and
implementing DFT, while it also minimizes the amount of infor-
mation that needs to be communicated between the two threads.
Furthermore, we use a lock-free ring buffer structure and an N-
way buffering scheme to efﬁciently exchange data between threads
and maintain high cache-hit rates on multi-core CPUs. Our evalu-
ation shows that ShadowReplica is on average ∼2.3× faster than
in-line DFT (∼2.75× slowdown over native execution) when run-
ning the SPEC CPU2006 benchmark, while similar speed ups were
observed with command-line utilities and popular server software.
Astoundingly, ShadowReplica also reduces the CPU cycles used up
to 30%.
Categories and Subject Descriptors
D.4.5 [Operating Systems]: Reliability; D.4.6 [Information ﬂow
controls]: Security and Protection; D.4.7 [Parallelization]: Orga-
nization and Design; D.4.8 [Optimization]: Performance
Keywords
Security, Information ﬂow tracking, Optimization, Parallelization
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516704.
Dynamic data ﬂow tracking (DFT) is being used extensively in
security research for protecting software [24, 11], analyzing mal-
ware [32, 21], discovering bugs [23, 7], reverse engineering [29],
information ﬂow control [34], etc. However, dynamically applying
DFT tends to signiﬁcantly slow down the target application, spe-
cially when a virtualization framework [22, 5] is used to apply it
on binary-only software. Overheads can range from a signiﬁcant
percentage over native execution to several orders of magnitude,
depending on the framework used and particular traits of the im-
plementation [19]. When performance is not an issue, the overhead
can still be problematic: (a) if it changes the behavior of the appli-
cation (e.g., when network connections timeout or the analysis is
no longer transparent), or (b) when computational cycles are scarce
or CPU energy consumption needs to be kept to a minimum, like
in mobile devices.
We present ShadowReplica, a new and efﬁcient approach for ac-
celerating DFT and other shadow memory-based analyses [23], by
decoupling analysis from execution and utilizing spare CPU cores
to run them in parallel. Our approach enables us to run a heavy-
weight technique like dynamic taint analysis (DTA) twice as fast,
while concurrently consuming fewer CPU cycles than when ap-
plying it in-line. The main motivation behind ShadowReplica has
been to accelerate security techniques with well established ben-
eﬁts, such as DFT, but it can also host other types of analyses.
We demonstrate this by also implementing a control-ﬂow integrity
(CFI) [1] tool over ShadowReplica, however, the greater beneﬁts
can be reaped by techniques based on memory shadowing [23, 4].
Decoupling analysis from execution to run it in parallel is by no
means a novel concept [14, 8, 31, 25, 33, 6, 26]. Previous work
can be classiﬁed into three categories. The ﬁrst is based on record-
ing execution and replaying it along with the analysis on a remote
host, or simply a different CPU [8, 26, 6]. These are geared toward
off-line analyses and can greatly reduce the overhead imposed on
the application. However, the speed of the analysis itself is not im-
proved, since execution needs to be replayed and augmented with
the analysis code. These solutions essentially hide the overhead
from the application, by sacriﬁcing computational resources at the
replica. Due to their design, they are not a good ﬁt for applying pre-
ventive security measures, even though they can be used for post-
fact identiﬁcation of an intrusion.
The second category uses speculative execution to run applica-
tion code including any in-lined analysis in multiple threads run-
ning in parallel [25, 31]. While strictly speaking the analysis is not
decoupled, it is parallelized. These approaches sacriﬁce signiﬁcant
processing power to achieve speed up, as at least two additional
235threads need to be used for any performance gain, and the results
of some of the threads may be discarded. Furthermore, handling
multi-threaded applications without hardware support remains a
challenge.
The third category aims at ofﬂoading the analysis code alone to
another execution thread [14, 33]. These instrument the applica-
tion to collect all the information required to run the analysis in-
dependently, and communicate the information to a thread running
the analysis logic alone. In principle, these approaches are more
efﬁcient, since the application code only runs once. However, in
practice, they have not been able to deliver the expected perfor-
mance gains, due to inefﬁciently collecting information from the
application and the high overhead of communicating it to the anal-
ysis thread.
ShadowReplica belongs to the third category of systems. Our
main contribution is an off-line application analysis phase that uti-
lizes both static and dynamic analysis approaches to generate opti-
mized code for collecting information from the application, greatly
reducing the amount of data that we need to communicate. For
running DFT independently from the application, such data include
dynamically computed information like memory addresses used by
the program, control ﬂow decisions, and certain operating system
(OS) events like system calls and signals. We focus on the ﬁrst
two that consist the bulk of information. For addresses, we ex-
ploit memory locality to only communicate a smaller set of them,
and have the DFT code reconstruct the rest based on information
extracted by the off-line analysis. For control ﬂow decisions, we
exploit the fact that most branches have a binary outcome and in-
troduce an intelligent encoding of the information sent to DFT to
skip the most frequent ones.
DFT is run in parallel by a second shadow thread that is spawned
for each application thread, and the two communicate using a shared
data structure. The design of this structure is crucial to avoid the
poor cache performance issues suffered by previous work. We
adopt a lock-free ring buffer structure, consisting of multiple buffers
(N-way buffering scheme [33]). After experimentation, we identi-
ﬁed the optimal size for the sub-buffers of the structure, so that
when two threads are scheduled on different cores on the same CPU
die, we achieve a high cache-hit rate for the shared L3 cache and
a low-eviction rate on each core’s L1 and L2 caches. The latter is
caused when two cores are concurrently read/write in memory that
occupies the same cache line in their L1/L2 caches.
The code implementing DFT is generated during off-line analy-
sis as a C program, and includes a series of compiler-inspired opti-
mizations that accelerate DFT by ignoring dependencies that have
no effect or cancel out each other [18]. Besides the tag propaga-
tion logic, this code also includes per-basic block functionality to
receive all data required (e.g., dynamic addresses and branch de-
cisions). Note that even though the code is in C, it is generated
based on the analysis of the binary without the need for application
source code. The implementation is also generic, meaning that it
can accommodate different tag sizes in shadow memory, and it can
be easily extended to different architectures (e.g., x86-64). Such
ﬂexibility is partly allowed by decoupling DFT from execution.
We implemented ShadowReplica using Intel’s Pin dynamic bi-
nary instrumentation (DBI) framework [22] to instrument the ap-
plication and collect the data required to decouple DFT. Shadow
threads running the DFT code run natively (without Pin), but in
the same address space, also implementing dynamic taint analy-
sis [24] protection from memory corruption exploits. Our evalua-
tion shows that compared with an already optimized in-lined DFT
framework [18], it is extremely effective in accelerating both the
application and DFT, but also using less CPU cycles.
In other
words, we do not sacriﬁce the spare cores to accelerate DFT, but ex-
ploit parallelization to improve the efﬁciency of DFT in all fronts.
ShadowReplica is on average ∼2.3× faster than in-lined DTA when
running the SPEC2006 benchmark (∼2.75× slowdown over na-
tive execution). We observed similar speed ups with command-
line utilities, like bzip2 and tar, and the Apache and MySQL
servers. We also discovered that with ShadowReplica applying
DFT requires less CPU cycles than the in-lined case, reaching a
30% reduction in the 401.bzip2 benchmark.
The contributions of this paper can be summarized as follows:
• We propose a novel approach to efﬁciently parallelize in-line
analysis by implementing low-cost communication between
the primary original process and the secondary analyzer pro-
cess.
• Our approach does not require a hardware component at run-
time, but instead it is based on static and dynamic program
analysis performed in advance.
• ShadowReplica preserves the functionality of both the orig-
inal program being monitored, and the analysis logic that
would be otherwise applied in-line.
• We implement a DFT analysis prototype, but our approach
can be also applied to other analyses based on memory shad-
owing.
• We evaluate our prototype with the SPEC2006 CPU bench-
mark suite and various real-world applications, and our re-
sults conﬁrm both the efﬁciency and effectiveness of our ap-
proach. Furthermore, we show that through ShadowReplica
DFT uses less CPU cycles and energy, than when applied
in-line.
The rest of this paper is organized as follows. Section 2 presents
an overview of our approach. Section 3 describes the off-line anal-
ysis stage, which includes most of our optimizations. Section 4
explains the dynamic runtime. In Sec. 5, we provide implemen-
tation details, and the evaluation of our framework is presented in
Sec. 6. After discussing related work in Sec. 7, we conclude the
paper in Sec. 8.
2. OVERVIEW
2.1 In-line vs. Decoupled DFT
Dynamically applying DFT on binaries usually involves the use
of a dynamic binary instrumentation (DBI) framework or a virtual
machine monitor (VMM) that will transparently extend the pro-
gram being analyzed. Such frameworks enable us to inject code
implementing DFT in binaries, by interleaving framework and DFT
code with application code, as shown in Fig.1 (in-line).
ShadowReplica proposes an efﬁcient approach for accelerating
dynamic DFT and similar analyses by decoupling them from exe-
cution and utilizing spare CPU cores to run the instrumented appli-
cation and DFT code in parallel. We replace the in-line DFT logic
in the application with a stub that extracts the minimal information
required to independently perform the analysis in another thread,
and enqueues the information in a shared data structure. The DFT
code, which is running on a different CPU core, is preﬁxed with a
consumer stub that pulls out the information and then performs the
analysis.
Decoupling the analysis from execution enables us to run it com-
pletely independently and without involving the instrumentation
framework, as illustrated in Fig. 1 (decoupled). Depending on
the cost of the analysis (e.g., tracking implicit information ﬂows
is more costly than explicit ﬂows), it can accelerate both applica-
tion and analysis. In short, if Ii, Ai, and Pi are the instrumentation,
236In-line
DFT
Decoupled
DFT with
ShadowReplica
Instrumented
Application
Instrumented
Application
ShadowReplica
Application
accelerated!
DFT
accelerated!
Application
Static
profiler
Dynamic
profiler
Application
Shadow threads
running natively
Dequeing stub
Analysis code
Enqueing stub
Original code
Instrumentation framework
DFT logic
Application code
Decoupling code
BBLs
and
CFG+
Newly 
discovered
code
Ring 
buffers
Code
BBLs
Figure 1: In-line vs. decoupled application of DFT with Shad-
owReplica and binary instrumentation.
Code
analysis
analysis, and application code costs with in-line analysis, and Id,
Ad, Pd, Ed and Dd are the costs of instrumentation, analysis, ap-
plication, enqueueing and dequeueing code (as deﬁned in the above
paragraph), then decoupling is efﬁcient when:
Ii + Ai + Pi > max(Id + Pd + Ed, Ad + Dd)
(1)
Essentially, decoupling is more efﬁcient when the following two
conditions are met: (a) if the cost of the in-line analysis is higher
than the cost of extracting the information and enqueueing, and (b)
if the cost of program execution combined with instrumentation in-
terference is higher than dequeueing cost. Ha et al. [14] provide a
more extensive model of the costs and beneﬁts involved with de-
coupling analysis.
Analyses that are bulky code-wise can experience even larger
beneﬁts because replacing them with more compact code, as decou-
pling does, exerts less pressure to the instrumentation framework,
due to the smaller number of instructions that need to be interleaved
with application code. For instance, when implementing DFT us-
ing binary instrumentation, the developer needs to take extra care
to avoid large chunks of analysis code and conditional statements
to achieve good performance [19]. When decoupling DFT, we no
longer have the same limitations, we could even use utility libraries
and generally be more ﬂexible.
We need to emphasize that ShadowReplica does not rely on com-
plete execution replay [8, 26] or duplicating execution in other
cores through speculative execution [25, 31]. So even though other
cores may be utilized,1 it does not waste processing cycles. Appli-
cation code runs exactly once, and the same stands for the analysis
code that runs in parallel. The performance and energy conserva-
tion beneﬁts gained are solely due to exploiting the true parallelism
offered by multi-cores, and being very efﬁcient in collecting and
communicating all the data required for the analysis to proceed in-
dependently.
2.2 Decoupling DFT
DFT involves accurately tracking selected data of interest as they
propagate during program execution, and has many uses in the se-
curity domain [12, 9, 3, 27, 32, 24, 34]. In ShadowReplica, we im-
plemented DFT along with its most popular incarnation, DTA [24],
where input data (e.g., network data) are deemed “tainted” and their
use is prohibited in certain program locations (e.g., in instructions
manipulating the control ﬂow of programs, such as indirect branch
instructions and function calls).
We created a code analysis module for ShadowReplica that im-
plements DFT by generating optimized C code for performing data
tracking for all the BBLs discovered during proﬁling, and generic
code for newly discovered code. We follow the methodology we
introduced in prior work for optimizing in-lined DFT code [18].
1We do not demand the kernel to schedule the replica on a different
core, but we do enforce each replica to be on the same package/die
with the process to beneﬁt from L3 cache sharing.
Enqueing 
Dequeing stubs
stubs
and
analysis code
Instrumentation
code
ShadowReplica tool
Pin
DBI
Application threads
running under
instrumentation
(a) Application analysis
(b) Runtime
Figure 2: The architecture of ShadowReplica.
To correctly and independently track data and propagate tags,
the analysis code has two sources of information: the code itself
and the application executing in parallel. For example, an x86 in-
struction like mov eax, ebx indicates that a tag should be prop-
agated between registers, so no runtime information is required.
However, for instructions that reference memory using dynamically
calculated addresses, e.g., mov eax, (ecx, ebp,4), we need
to obtain the effective address used by the instruction during exe-
cution. Remember, that the analysis code does not execute appli-
cation code, nor does it have access to data contained in the reg-
isters because it is executing in parallel. The application needs to
also supply information regarding control-ﬂow decisions, as well as
any other data required by DFT, like when to tag (taint) an address
range that is only available at runtime. This is all the information
required to accurately perform DFT in parallel.
Security checks are normally performed in parallel with the ap-
plication. However, it is necessary that we have the ability to syn-
chronize with the analysis code, by waiting for it to complete. This
is important because in the case of DTA we want to ensure that
program control ﬂow has not been compromised, and in the case
of information ﬂow control that no sensitive data has been leaked.
This is achieved by injecting code in the application that checks
whether the analysis has completed. For instance, to protect from
leaking sensitive information, our prototype implementation syn-
chronizes before system calls used to transmit data, like write()
and send().
Changing characteristics of DFT, like the size of tags it sup-
ports that affect the number of different data classes or labels it
can track, only affects the analysis code. The application is only
delayed when synchronization is required and, as our evaluation
shows, currently this is not an issue because DFT executes as fast
(if not faster) as the application.
2.3 Architecture
Figure 2 depicts the architecture of ShadowReplica, which com-