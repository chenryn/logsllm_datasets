### Root Page on Facebook: HTTP Request Analysis

When accessing the root page on Facebook via an Android device (e.g., Samsung Captivate), the browser sends two distinct HTTP requests. The first request fetches the most recent news, while the second request appears to be a prefetch operation, such as retrieving a friend list in anticipation of a user clicking on a friend's profile for more details.

There is a delay of approximately 1 second between the end of the first request and the start of the second request. An attacker can exploit this delay by monitoring the sequence number to detect the end of the first response. Additionally, the second request takes around 100 milliseconds to process on the server. A simple attack strategy would involve waiting for about 1.1 seconds before injecting a malicious response for the second request. A more sophisticated attacker could monitor the start of the second request by tracking the current ACK number. Specifically, when the second request is sent, the valid ACK number range advances by the number of bytes in the request payload.

In our proof-of-concept implementation, we inject JavaScript after a fixed time interval following the detection of the connection. This method has proven successful in several instances. However, a more advanced attacker could achieve even higher success rates with more precise timing.

### Phishing Facebook Login Page

This attack leverages passive TCP hijacking to monitor new connections to Facebook. The goal is to replace the Facebook login page by resetting the connection immediately after the server responds with a SYN-ACK. We assume the user is not already logged into Facebook; otherwise, the server processing delay for the first HTTP request would make the attack too easy. When the user is not logged in, the server processing delay is negligible, and the effective time window for a successful reset is essentially a single round-trip time (RTT).

Table 2 illustrates the success rates under different conditions. For example, with a single Planetlab node, the success rate is slightly below 50%. However, using two nodes with latency values of 70ms and 100ms, the success rates increase to 62.5% and 82.5%, respectively, indicating that more bandwidth improves the likelihood of success. The results also confirm that a larger RTT increases the chances of a successful attack.

While a 100ms RTT to Facebook may seem high given the prevalence of CDNs, CDNs are typically used for static content like images and JavaScript. Dynamic and personalized content, such as the Facebook news feed, is often stored on the main server. This design is common for many sites with dynamic content, including Twitter.

### Command Injection on Windows Live Messenger

This case study demonstrates a command injection attack on Windows Live Messenger, leveraging server-side TCP injection. The main connection for Windows Live Messenger runs on port 1863 and uses the Microsoft Notification Protocol (MSNP), a complex instant messaging protocol. Many clients, including those on Android and desktops, use plaintext, making them vulnerable to such attacks.

Once a vulnerable Windows Live Messenger app is detected, an attacker can inject commands, including:
1. Adding or removing friends.
2. Changing status messages.
3. Sending messages to friends.

Given that the messenger client is often idle and client-side sequence number inference takes only 2-3 seconds, the attack can be executed relatively easily. These commands can cause significant damage, such as adding a malicious account as a friend, which can then send spam or phishing messages. The attacker can also read, delete, or spam the victim's friend list, and post new status updates to further propagate the attack.

### Restricted Facebook Login Page Hijack

This attack involves active TCP hijacking, as described in §4.5. The objective is to hijack TCP connections, but it requires offline analysis of the client-side Initial Sequence Number (ISN) due to the inability to reset the server-side connection in the new Linux kernel.

In our implementation, we developed a simple Android malware that performs the offline analysis upon startup. The target four-tuple includes a pre-selected local port and the resolved IP address for m.facebook.com. After the analysis, the attack takes just over one second and performs port jamming for about five seconds. The malware then sends an Intent to open m.facebook.com through the browser, potentially convincing the user to log in. We have verified that the Facebook login page can indeed be hijacked using these steps.

The main challenge in this attack is not the sequence number inference but convincing the user that the app is legitimate and related to Facebook, thus prompting them to enter their password.

### Discussion and Conclusion

From these real-world attacks, we learn several important lessons:
1. Even seemingly harmless OS statistics can leak critical internal network/system state through unexpected interactions between on-device malware and off-path attackers. Our study specifically shows that packet counters can leak TCP sequence numbers.
2. Modern systems still share too much state, such as the active TCP connection list and global packet counters. Future system and network designs should carefully evaluate what information an adversary can obtain from shared state.

On the defense side, several measures can improve security:
1. Always use SSL/TLS.
2. Remove unnecessary global state or restrict access to privileged programs.
3. Provide better resource isolation, such as separate packet counters for each app.
4. With IPv6, provide different source IP addresses for connections in different processes to prevent malware from learning the IP address of another process. In extreme cases, each app could run in its own virtual machine.

In conclusion, we have demonstrated a significant type of TCP sequence number inference attack enabled by host packet counter side-channels under various client OS and network settings. We also offer insights into why these attacks occur and how they can be mitigated.

### References

[1] Blind TCP/IP Hijacking is Still Alive. http://www.phrack.org/issues.php?issue=64&id=15.
[2] CERT Advisory CA-1995-01 IP Spoofing Attacks and Hijacked Terminal Connections. http://www.cert.org/advisories/CA-1995-01.html.
[3] Golomb Ruler. http://en.wikipedia.org/wiki/Golomb_ruler.
[4] Linux Blind TCP Spoofing Vulnerability. http://www.securityfocus.com/bid/580/info.
[5] Linux: TCP Random Initial Sequence Numbers. http://kerneltrap.org/node/4654.
[6] MSN Messenger Protocol. http://www.hypothetic.org/docs/msn/.
[7] RFC 1948 - Defending Against Sequence Number Attacks. http://tools.ietf.org/html/rfc1948.
[8] RFC 5961 - Improving TCP’s Robustness to Blind In-Window Attacks. http://tools.ietf.org/html/rfc5961.
[9] RFC 793 - Transmission Control Protocol. http://tools.ietf.org/html/rfc793.
[10] Stateful Firewall and Masquerading on Linux. http://www.puschitz.com/FirewallAndRouters.shtml.
[11] sysctl Mac OS X Manual. https://developer.apple.com/library/mac/documentation/Darwin/Reference/Manpages/man3/sysctl.3.html#//apple_ref/doc/man/3/sysctl.
[12] TCP Delayed Ack in Linux. http://wiki.hsc.com/wiki/Main/InsideLinuxTCPDelayedAck.
[13] S. Chen, R. Wang, X. Wang, and K. Zhang. Side-channel Leaks in Web Applications: A Reality Today, a Challenge Tomorrow. In Proc. of IEEE Security and Privacy, 2010.
[14] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach. Quire: Lightweight Provenance for Smart Phone Operating Systems. In Proc. of USENIX Security Symposium, 2011.
[15] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. PiOS: Detecting Privacy Leaks in iOS Applications. In NDSS, 2011.
[16] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. TaintDroid: An Information-flow Tracking System for Realtime Privacy Monitoring on Smartphones. In OSDI, 2010.
[17] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A Study of Android Application Security. In Proc. of USENIX Security Symposium, 2011.
[18] R. Ensafi, J. C. Park, D. Kapur, and J. R. Crandall. Idle Port Scanning and Non-interference Analysis of Network Protocol Stacks using Model Checking. In Proc. of USENIX Security Symposium, 2010.
[19] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin. Permission Re-delegation: Attacks and Defenses. In Proc. of USENIX Security Symposium, 2011.
[20] Y. Gilad and A. Herzberg. Off-Path Attacking the Web. In Proc. of USENIX Workshop on Offensive Technologies (WOOT), 2012.
[21] S. Guha and P. Francis. Characterization and Measurement of TCP Traversal through NATs and Firewalls. In Proc. ACM SIGCOMM IMC, 2005.
[22] S. Jana and V. Shmatikov. Memento: Learning secrets from process footprints. In Proc. of IEEE Security and Privacy, 2012.
[23] L. Joncheray. A Simple Active Attack against TCP. In Proc. of USENIX Security Symposium, 1995.
[24] G. LEECH, P. RAYSON, and A. WILSON. Procfs Analysis. http://www.nsa.gov/research/_files/selinux/papers/slinux/node57.shtml.
[25] R. Morris. A Weakness in the 4.2BSD Unix TCP/IP Software. Technical report, 1985.
[26] Z. Qian and Z. M. Mao. Off-Path TCP Sequence Number Inference Attack – How Firewall Middleboxes Reduce Security. In Proc. of IEEE Security and Privacy, 2012.
[27] Z. Qian, Z. M. Mao, Y. Xie, and F. Yu. Investigation of Triangular Spamming: A Stealthy and Efficient Spamming Technique. In Proc. of IEEE Security and Privacy, 2010.
[28] R. Schlegel, K. Zhang, X. yong Zhou, M. Intwala, A. Kapadia, and X. Wang. Soundcomber: A Stealthy and Context-Aware Sound Trojan for Smartphones. In NDSS, 2011.
[29] D. X. Song, D. Wagner, and X. Tian. Timing Analysis of Keystrokes and Timing Attacks on SSH. In Proc. of USENIX Security Symposium, 2001.
[30] M. Vuagnoux and S. Pasini. Compromising Electromagnetic Emanations of Wired and Wireless Keyboards. In Proc. of USENIX Security Symposium, 2009.
[31] Z. Wang, Z. Qian, Q. Xu, Z. M. Mao, and M. Zhang. An Untold Story of Middleboxes in Cellular Networks. In SIGCOMM, 2011.
[32] P. A. Watson. Slipping in the Window: TCP Reset Attacks. In CanSecWest, 2004.
[33] K. Zhang and X. Wang. Peeping Tom in the Neighborhood: Keystroke Eavesdropping on Multi-User Systems. In Proc. of USENIX Security Symposium, 2009.