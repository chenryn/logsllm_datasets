root page on Facebook, the browser on one of the Android
phones (Samsung Captivate) will send two HTTP requests:
the ﬁrst request is asking for the recent news; the second
request seems to be related to prefetching (e.g., retrieving
the friend list information in case a user clicks on any friend
for detailed information).
Since there is a delay of about 1s between the end of the
ﬁrst request and the start of the second request, an attacker
can monitor if the sequence number remains the same for a
certain period of time to detect the end of the ﬁrst response.
Furthermore, the second request takes about 100ms to pro-
cess on the server. A simple strategy that an attacker can
employ is to just wait for around 1.1s before injecting the
malicious response for the second request. A more sophis-
ticated attacker could also monitor the start of the second
request by tracking the current ACK number. Speciﬁcally,
when the second request is sent, the valid ACK number
range moves forward by the number of bytes in the request
payload.
In our proof-of-concept implementation, we always inject
the Javascript after waiting for a ﬁxed amount of time after
the connection is detected, which can already succeed for
a few times. However, a more sophisticated attacker can
deﬁnitely do better.
5.2 Phishing Facebook Login Page
We launch this attack based on passive TCP hijack
which passively monitors if a new connection to Facebook
is made. In this case study, we look at how to replace the
Facebook login page by resetting the Facebook immediately
after it has responded with SYN-ACK.
We assume that the user is not already logged in to Face-
book. Otherwise, as described in the previous attack, the
server processing delay for the ﬁrst HTTP request is so long
that is is too easy to succeed. When the user is not logged
in, the server processing delay will become negligible and
the eﬀective time window for reset to succeed is basically a
single round trip time. This scenario is also generic enough
that the attack can be applied for many other websites such
as twitter.com.
In Table 2, we show how likely the attack can succeed un-
der diﬀerent conditions. For instance, when there’s a single
Planetlab node, the success rate is a little below 50%. How-
ever, when we use two nodes for latency values of 70ms and
100ms respectively, the success rate increases signiﬁcantly to
62.5% and 82.5% , indicating that we have more bandwidth
to reset the server. In addition, the result also veriﬁes that
the larger the RTT, the more likely the attack can succeed.
Note that the 100ms RTT to Facebook may sound very
large given the popularity of CDN services. However, the
CDNs are mostly used for hosting static contents such as
images and Javascripts. For webpages that are highly cus-
tomized and dynamic (e.g., personalized Facebook news
feed), they are very likely to be stored on the main server in
a single location (e.g., Facebook main servers are hosted in
California). We ﬁnd that this is a common design for many
sites with dynamic contents (e.g., twitter).
5.3 Command Injection on Windows Live
Messenger
Leveraging server-side TCP injection described
in §4.4, the case study of command injection attack on Win-
dows Live Messenger is an interesting example of server-side
attack carried out on a connection where the user is already
logged in. The main connection of Windows Live Messenger
runs on port 1863 and uses Microsoft Notiﬁcation Protocol
(MSNP) which is a complex instant messenger protocol de-
veloped by Microsoft [6]. Many Windows Live Messenger
clients on Android as well as the ones on the desktops (in-
cluding oﬃcial ones) use plaintext in their connections, thus
allowing the attack. Once upon the detection of a vulner-
able Windows Live Messenger app running or a connection
established to known port numbers and IP addresses that
are associated with the app, an attacker can launch this at-
tack.
We have veriﬁed that the commands that are possible to
inject into the server include, but not limited to, (1) adding
a new friend or removing an existing friend (speciﬁed by the
account email address), (2) changing the status messages,
and (3) sending messages to friends. Given that the messen-
ger client is idle most of the time and the fact that the client-
side sequence number inference only takes 2–3 seconds, the
attack can be launched fairly easily. The commands can
cause serious damage. For instance, the add-friend com-
mand allows an attacker to add its malicious account as a
friend which can subsequently send spam or phishing mes-
sages. In addition, after being added as a friend, the attacker
can read the friend list (email accounts) of the victim user,
delete them, or spam them. Finally, new status posting can
be part of the phishing attack against the friends as well.
5.4 Restricted Facebook Login Page Hijack
This attack is launched based on active TCP hijack as
described in §4.5. The goal of this attack is still to hijack
TCP connections. However, due to the lack of ability to
reset the server-side connection in the new version of the
Linux kernel, it requires oﬄine analysis on the client-side
ISN of the target four tuples.
In our implementation, we develop a simple Android test
malware that performs the oﬄine analysis right after it is
started. The four tuples we target include a pre-selected
local port and the Facebook server IP that’s resolved for
m.facebook.com. After the analysis, the attack takes a lit-
602One Planetlab node
Two Planetlab nodes
RT Tb=70ms1 RT Tb=100ms RT Tb=70ms RT Tb=100ms
Succ Rate 42.5% (17/40) 47.5% (19/40) 62.5% (25/40) 82.5% (33/40)
1 RT Tb is the RTT between the attacker and the Facebook server
Table 2: Success rate of Facebook login page injection (case study 2)
tle over one second, and it performs port jamming immedi-
ately (which takes about 5 seconds). After this, our mal-
ware app immediately sends an Intent that asks to open
m.facebook.com through the browser. An attacker may
come up with reasons such as asking a user to use his Face-
book account to register for the app. When the browser
starts the connection to Facebook, the malware works with
the oﬀ-path attacker to hijack the connection (as described
in §4.5). We have veriﬁed that the Facebook login page can
indeed be hijacked following these steps.
The main diﬃculty in this attack is not about successfully
inferring the sequence number. Instead, it requires the user
to be convinced that the app indeed has a relationship with
the target website (i.e., Facebook) so that the user will enter
his password into the browser.
6. DISCUSSION AND CONCLUSION
From these real attacks, there are a few lessons that
(1) Even though OS statistics are aggregated
we learn:
and seemingly harmless, they can leak critical internal net-
work/system state through unexpected interactions from the
on-device malware and the oﬀ-path attacker. Similar obser-
vations have been made recently in a few other studies as
well, e.g., using procfs as side channels [22]. Our study
reveals speciﬁcally that the packet counters can leak TCP
sequence numbers. (2). Our systems today still have too
much shared state: the active TCP connection list shared
among all apps (through netstat or procfs); the IP address of
the malware’s connection and other apps’; the global packet
counters. Future system and network design should carefully
evaluate what information an adversary can obtain through
these shared state.
On the defense side, there are a few measures that may
improve security: (1) always using SSL/TLS, (2) removing
unnecessary global state (such as the active TCP connection
list and packet counters) or only allow privileged programs
to access such state, (3) providing better isolation among
resources, e.g., providing a separate set of packet counters
for each app. With IPv6 widely deployed, we may even
provide diﬀerent source IP addresses for connections in dif-
ferent processes on a device so that malware will not be able
to learn the IP address of the connection established by an-
other process. In the extreme case, each app may run in its
own virtual machine.
To conclude, we have demonstrated an important type
of TCP sequence number inference attack enabled by host
packet counter side-channels under a variety of client OS
and network settings. We also oﬀer insights on why they
occur and how they can be mitigated.
7. REFERENCES
[1] Blind TCP/IP Hijacking is Still Alive. http:
//www.phrack.org/issues.php?issue=64&id=15.
[2] CERT Advisory CA-1995-01 IP Spooﬁng Attacks and
Hijacked Terminal Connections.
http://www.cert.org/advisories/CA-1995-01.html.
[3] Golomb Ruler.
http://en.wikipedia.org/wiki/Golomb_ruler.
[4] Linux Blind TCP Spooﬁng Vulnerability.
http://www.securityfocus.com/bid/580/info.
[5] Linux: TCP Random Initial Sequence Numbers.
http://kerneltrap.org/node/4654.
[6] MSN Messenger Protocol.
http://www.hypothetic.org/docs/msn/.
[7] RFC 1948 - Defending Against Sequence Number
Attacks. http://tools.ietf.org/html/rfc1948.
[8] RFC 5961 - Improving TCP’s Robustness to Blind
In-Window Attacks.
http://tools.ietf.org/html/rfc5961.
[9] RFC 793 - Transmission Control Protocol.
http://tools.ietf.org/html/rfc793.
[10] Stateful Firewall and Masquerading on Linux. http:
//www.puschitz.com/FirewallAndRouters.shtml.
[11] sysctl Mac OS X Manual.
https://developer.apple.com/library/mac/
#documentation/Darwin/Reference/Manpages/man3/
sysctl.3.html#//apple_ref/doc/man/3/sysctl.
[12] TCP Delayed Ack in Linux. http://wiki.hsc.com/
wiki/Main/InsideLinuxTCPDelayedAck.
[13] S. Chen, R. Wang, X. Wang, and K. Zhang.
Side-channel Leaks in Web Applications: A Reality
Today, a Challenge Tomorrow. In Proc. of IEEE
Security and Privacy, 2010.
[14] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S.
Wallach. Quire: Lightweight Provenance for Smart
Phone Operating Systems. In Proc. of USENIX
Security Symposium, 2011.
[15] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. PiOS:
Detecting Privacy Leaks in iOS Applications. In
NDSS, 2011.
[16] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung,
P. McDaniel, and A. N. Sheth. TaintDroid: An
Information-ﬂow Tracking System for Realtime
Privacy Monitoring on Smartphones. In OSDI, 2010.
[17] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri.
A Study of Android Application Security. In Proc. of
USENIX Security Symposium, 2011.
[18] R. Ensaﬁ, J. C. Park, D. Kapur, and J. R. Crandall.
Idle Port Scanning and Non-interference Analysis of
Network Protocol Stacks using Model Checking. In
Proc. of USENIX Security Symposium, 2010.
[19] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and
E. Chin. Permission Re-delegation: Attacks and
603Defenses. In Proc. of USENIX Security Symposium,
2011.
[20] Y. Gilad and A. Herzberg. Oﬀ-Path Attacking the
Web. In Proc. of USENIX Workshop on Oﬀensive
Technologies (WOOT), 2012.
[21] S. Guha and P. Francis. Characterization and
Measurement of TCP Traversal through NATs and
Firewalls. In Proc. ACM SIGCOMM IMC, 2005.
[22] S. Jana and V. Shmatikov. Memento: Learning secrets
from process footprints. In Proc. of IEEE Security and
Privacy, 2012.
[23] L. Joncheray. A Simple Active Attack against TCP. In
Proc. of USENIX Security Symposium, 1995.
[24] G. LEECH, P. RAYSON, and A. WILSON. Procfs
Analysis. http://www.nsa.gov/research/_files/
selinux/papers/slinux/node57.shtml.
[25] R. Morris. A Weakness in the 4.2BSD Unix TCP/IP
Software. Technical report, 1985.
[26] Z. Qian and Z. M. Mao. Oﬀ-Path TCP Sequence
Number Inference Attack – How Firewall Middleboxes
Reduce Security. In Proc. of IEEE Security and
Privacy, 2012.
[27] Z. Qian, Z. M. Mao, Y. Xie, and F. Yu. Investigation
of Triangular Spamming: A Stealthy and Eﬃcient
Spamming Technique. In Proc. of IEEE Security and
Privacy, 2010.
[28] R. Schlegel, K. Zhang, X. yong Zhou, M. Intwala,
A. Kapadia, and X. Wang. Soundcomber: A Stealthy
and Context-Aware Sound Trojan for Smartphones. In
NDSS, 2011.
[29] D. X. Song, D. Wagner, and X. Tian. Timing Analysis
of Keystrokes and Timing Attacks on SSH. In Proc. of
USENIX Security Symposium, 2001.
[30] M. Vuagnoux and S. Pasini. Compromising
electromagnetic emanations of wired and wireless
keyboards. In Proc. of USENIX Security Symposium,
2009.
[31] Z. Wang, Z. Qian, Q. Xu, Z. M. Mao, and M. Zhang.
An Untold Stody of Middleboxes in Cellular
Networks. In SIGCOMM, 2011.
[32] P. A. Watson. Slipping in the Window: TCP Reset
Attacks. In CanSecWest, 2004.
[33] K. Zhang and X. Wang. Peeping Tom in the
Neighborhood: Keystroke Eavesdropping on
Multi-User Systems. In Proc. of USENIX Security
Symposium, 2009.
604