title:Fuzzification: Anti-Fuzzing Techniques
author:Jinho Jung and
Hong Hu and
David Solodukhin and
Daniel Pagan and
Kyu Hyung Lee and
Taesoo Kim
FuzziFication: Anti-Fuzzing Techniques
Jinho Jung, Hong Hu, David Solodukhin, and Daniel Pagan, Georgia Institute of Technology; 
Kyu Hyung Lee, University of Georgia; Taesoo Kim, Georgia Institute of Technology
https://www.usenix.org/conference/usenixsecurity19/presentation/jung
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.FUZZIFICATION: Anti-Fuzzing Techniques
Jinho Jung, Hong Hu, David Solodukhin, Daniel Pagan, Kyu Hyung Lee†, Taesoo Kim
Georgia Institute of Technology
† University of Georgia
Abstract
Fuzzing is a software testing technique that quickly and
automatically explores the input space of a program without
knowing its internals. Therefore, developers commonly use
fuzzing as part of test integration throughout the software
development process. Unfortunately, it also means that such a
blackbox and the automatic natures of fuzzing are appealing
to adversaries who are looking for zero-day vulnerabilities.
To solve this problem, we propose a new mitigation ap-
proach, called FUZZIFICATION, that helps developers protect
the released, binary-only software from attackers who are ca-
pable of applying state-of-the-art fuzzing techniques. Given a
performance budget, this approach aims to hinder the fuzzing
process from adversaries as much as possible. We propose
three FUZZIFICATION techniques: 1) SpeedBump, which am-
plifies the slowdown in normal executions by hundreds of
times to the fuzzed execution, 2) BranchTrap, interfering with
feedback logic by hiding paths and polluting coverage maps,
and 3) AntiHybrid, hindering taint-analysis and symbolic exe-
cution. Each technique is designed with best-effort, defensive
measures that attempt to hinder adversaries from bypassing
FUZZIFICATION.
Our evaluation on popular fuzzers and real-world applica-
tions shows that FUZZIFICATION effectively reduces the num-
ber of discovered paths by 70.3% and decreases the number of
identified crashes by 93.0% from real-world binaries, and de-
creases the number of detected bugs by 67.5% from LAVA-M
dataset while under user-specified overheads for common
workloads. We discuss the robustness of FUZZIFICATION
techniques against adversarial analysis techniques. We open-
source our FUZZIFICATION system to foster future research.
1 Introduction
Fuzzing is a software testing technique that aims to find soft-
ware bugs automatically. It keeps running the program with
randomly generated inputs and waits for bug-exposing behav-
iors such as crashing or hanging. It has become a standard
practice to detect security problems in complex, modern soft-
ware [40, 72, 37, 25, 23, 18, 9]. Recent research has built
several efficient fuzzing tools [57, 52, 29, 34, 6, 64] and found
a large number of security vulnerabilities [51, 72, 59, 26, 10].
Unfortunately, advanced fuzzing techniques can also be
used by malicious attackers to find zero-day vulnerabilities.
Recent studies [61, 58] confirm that attackers predominantly
prefer fuzzing tools over others (e.g., reverse engineering) in
finding vulnerabilities. For example, a survey of information
security experts [28] shows that fuzzing techniques discover
4.83 times more bugs than static analysis or manual detec-
tion. Therefore, developers might want to apply anti-fuzzing
techniques on their products to hinder fuzzing attempts by
attackers, similar in concept to using obfuscation techniques
to cripple reverse engineering [12, 13].
In this paper, we propose a new direction of binary protec-
tion, called FUZZIFICATION, that hinders attackers from ef-
fectively finding bugs. Specifically, attackers may still be able
to find bugs from the binary protected by FUZZIFICATION,
but with significantly more effort (e.g., CPU, memory, and
time). Thus, developers or other trusted parties who get the
original binary are able to detect program bugs and synthe-
size patches before attackers widely abuse them. An effective
FUZZIFICATION technique should enable the following three
features. First, it should be effective for hindering existing
fuzzing tools, finding fewer bugs within a fixed time; second,
the protected program should still run efficiently in normal
usage; third, the protection code should not be easily identi-
fied or removed from the protected binary by straightforward
analysis techniques.
No existing technique can achieve all three goals simul-
taneously. First, software obfuscation techniques, which
impede static program analysis by randomizing binary rep-
resentations, seem to be effective in thwarting fuzzing at-
tempts [12, 13]. However, we find that it falls short of
FUZZIFICATION in two ways. Obfuscation introduces unac-
ceptable overhead to normal program executions. Figure 1(a)
shows that obfuscation slows the execution by at least 1.7
times when using UPX [60] and up to 25.0 times when using
USENIX Association
28th USENIX Security Symposium    1913
(a) Overheads of obfuscator/packer
25.0
1.7
4.2
1.9
UPX-3.94
LLVM-obf
(b) Unique branches over time
Themida-2.4
(c) Unique branches over executions
ASPack-2.43
Original
Obfuscated
1×2×4×8×16×32×64×
n
w
o
d
w
o
l
S
200
150
100
50
s
e
h
c
n
a
r
B
0 10 20 30 40 50 60 70 80 0
Time (minutes)
20k
10k
30k
Fuzzed executions
40k
Figure 1: Impact of obfuscation techniques on fuzzing. (a) Obfus-
cation techniques introduce 1.7×-25.0× execution slow down. (b)
and (c) fuzzing obfuscated binaries discovers fewer program paths
over time, but gets a similar number of paths over executions.
LLVM-obfuscator [33]. Also, obfuscation cannot effectively
hinder fuzzers in terms of path exploration. It can slow each
fuzzed execution, as shown in Figure 1(b), but the path discov-
ery per execution is almost identical to that of fuzzing the orig-
inal binary, as shown in Figure 1(c). Therefore, obfuscation is
not an ideal FUZZIFICATION technique. Second, software di-
versification changes the structure and interfaces of the target
application to distribute diversified versions [35, 3, 53, 50].
For example, the technique of N-version software [3] is able
to mitigate exploits because attackers often depend on clear
knowledge of the program states. However, software diver-
sification is powerless on hiding the original vulnerability
from the attacker’s analysis; thus it is not a good approach for
FUZZIFICATION.
In this paper, we propose three FUZZIFICATION techniques
for developers to protect their programs from malicious
fuzzing attempts: SpeedBump, BranchTrap, and AntiHybrid.
The SpeedBump technique aims to slow program execution
during fuzzing. It injects delays to cold paths, which normal
executions rarely reach but that fuzzed executions frequently
visit. The BranchTrap technique inserts a large number of
input-sensitive jumps into the program so that any input drift
will significantly change the execution path. This will induce
coverage-based fuzzing tools to spend their efforts on injected
bug-free paths instead of on the real ones. The AntiHybrid
technique aims to thwart hybrid fuzzing approaches that incor-
porate traditional fuzzing methods with dynamic taint analysis
and symbolic execution.
We develop defensive mechanisms to hinder attackers iden-
tifying or removing our techniques from protected binaries.
For SpeedBump, instead of calling the sleep function, we
inject randomly synthesized CPU-intensive operations to cold
paths and create control-flow and data-flow dependencies
between the injected code and the original code. We reuse
existing binary code to realize BranchTrap to prevent an ad-
versary from identifying the injected branches.
To evaluate our FUZZIFICATION techniques, we apply
them on the LAVA-M dataset and nine real-world applica-
tions, including libjpeg, libpng, libtiff, pcre2, readelf,
objdump, nm, objcopy, and MuPDF. These programs are
extensively used to evaluate the effectiveness of fuzzing
tools [19, 11, 48, 67]. Then, we use four popular fuzzers
—AFL, HonggFuzz, VUzzer, and QSym— to fuzz the origi-
nal programs and the protected ones for the same amount of
time. On average, fuzzers detect 14.2 times more bugs from
the original binaries and 3.0 times more bugs from the LAVA-
M dataset than those from “fuzzified” ones. At the same time,
our FUZZIFICATION techniques decrease the total number
of discovered paths by 70.3%, and maintain user-specified
overhead budget. This result shows that our FUZZIFICATION
techniques successfully decelerate fuzzing performance on
vulnerability discovery. We also perform an analysis to show
that data-flow and control-flow analysis techniques cannot
easily disarm our techniques.
fuzzing schemes, so-called, FUZZIFICATION.
In this paper, we make the following contributions:
• We first shed light on the new research direction of anti-
• We develop three FUZZIFICATION techniques to slow
each fuzzed execution, to hide path coverage, and to
thwart dynamic taint-analysis and symbolic execution.
• We evaluate our techniques on popular fuzzers and com-
mon benchmarks. Our results show that the proposed
techniques hinder these fuzzers, finding 93% fewer bugs
from the real-world binaries and 67.5% fewer bugs from
the LAVA-M dataset, and 70.3% less coverage while
maintaining the user-specified overhead budget.
We will release the source code of our work at https:
//github.com/sslab-gatech/fuzzification.
2 Background and Problem
2.1 Fuzzing Techniques
The goal of fuzzing is to automatically detect program bugs.
For a given program, a fuzzer first creates a large number
of inputs, either by random mutation or by format-based
generation. Then, it runs the program with these inputs to see
whether the execution exposes unexpected behaviors, such as
a crash or an incorrect result. Compared to manual analysis or
static analysis, fuzzing is able to execute the program orders
of magnitude more times and thus can explore more program
states to maximize the chance of finding bugs.
2.1.1 Fuzzing with Fast Execution
A straightforward way to improve fuzzing efficiency is to
make each execution faster. Current research highlights sev-
eral fast execution techniques, including (1) customized sys-
tem and hardware to accelerate fuzzed execution and (2)
parallel fuzzing to amortize the absolute execution time in
1914    28th USENIX Security Symposium
USENIX Association
large-scale. Among these techniques, AFL uses the fork
server and persistent mode to avoid the heavy process cre-
ation and can accelerate fuzzing by a factor of two or
more [68, 69]. AFL-PT, kAFL, and HonggFuzz utilize hard-
ware features such as Intel Process Tracing (PT) and Branch
Trace Store (BTS) to collect code coverage efficiently to guide
fuzzing [65, 54, 23]. Recently, Xu et al. designed new oper-
ating system primitives, like efficient system calls, to speed
up fuzzing on multi-core machines [64].
2.1.2 Fuzzing with Coverage-guidance
Coverage-guided fuzzing collects the code coverage for each
fuzzed execution and prioritizes fuzzing the input that has
triggered new coverage. This fuzzing strategy is based on two
empirical observations: (1) a higher path coverage indicates a
higher chance of exposing bugs; and (2) mutating inputs that
ever trigger new paths is likely to trigger another new path.
Most popular fuzzers take code coverage as guidance, like
AFL, HonggFuzz, and LibFuzzer, but with different methods
for coverage representation and coverage collection.
Coverage representation. Most fuzzers take basic blocks
or branches to represent the code coverage. For example,
HonggFuzz and VUzzer use basic block coverage, while AFL
instead considers the branch coverage, which provides more
information about the program states. Angora [11] combines
branch coverage with the call stack to further improve cov-
erage accuracy. However, the choice of representation is a
trade-off between coverage accuracy and performance, as
more fine-grained coverage introduces higher overhead to
each execution and harms the fuzzing efficiency.
Coverage collection. If the source code is available, fuzzers
can instrument the target program during compilation or as-
sembly to record coverage at runtime, like in AFL-LLVM
mode and LibFuzzer. Otherwise, fuzzers have to utilize either
static or dynamic binary instrumentation to achieve a similar
purpose, like in AFL-QEMU mode [70]. Also, several fuzzers
leverage hardware features to collect the coverage [65, 54, 23].
Fuzzers usually maintain their own data structure to store cov-
erage information. For example, AFL and HonggFuzz use a
fixed-size array and VUzzer utilizes a Set data structure in
Python to store their coverage. However, the size of the struc-
ture is also a trade-off between accuracy and performance: an
overly small memory cannot capture every coverage change,
while an overly large memory introduces significant overhead.
For example, AFL’s performance drops 30% if the bitmap
size is changed from 64KB to 1MB [19].
2.1.3 Fuzzing with Hybrid Approaches
Hybrid approaches are proposed to help solve the limitations
of existing fuzzers. First, fuzzers do not distinguish input
bytes with different types (e.g., magic number, length speci-
fier) and thus may waste time mutating less important bytes
Figure 2: Workflow of FUZZIFICATION protection. Developers cre-
ate a protected binary with FUZZIFICATION techniques and release
it to public. Meanwhile, they send the normally compiled binary to
trusted parties. Attackers cannot find many bugs from the protected
binary through fuzzing, while trusted parties can effectively find
significantly more bugs and developers can patch them in time.
that cannot affect any control flow. In this case, taint analysis
is used to help find which input bytes are used to determine
branch conditions, like VUzzer [52]. By focusing on the mu-
tation of these bytes, fuzzers can quickly find new execution
paths. Second, fuzzers cannot easily resolve complicated
conditions, such as comparison with magic value or check-
sum. Several works [57, 67] utilize symbolic execution to
address this problem, which is good at solving complicated
constraints but incurs high overhead.
2.2 FUZZIFICATION Problem
Program developers may want to completely control the bug-
finding process, as any bug leakage can bring attacks and
lead to financial loss [45]. They demand exposing bugs by
themselves or by trusted parties, but not by malicious end-
users. Anti-fuzzing techniques can help to achieve that by
decelerating unexpected fuzzing attempts, especially from
malicious attackers.
We show the workflow of FUZZIFICATION in Figure 2. De-
velopers compile their code in two versions. One is compiled
with FUZZIFICATION techniques to generate a protected bi-
nary, and the other is compiled normally to generate a normal
binary. Then, developers distribute the protected binary to
the public, including normal users and malicious attackers.
Attackers fuzz the protected binary to find bugs. However,
with the protection of FUZZIFICATION techniques, they can-
not find as many bugs quickly. At the same time, developers
distribute the normal binary to trusted parties. The trusted
parties can launch fuzzing on the normal binary with the na-
tive speed and thus can find more bugs in a timely manner.
Therefore, developers who receive bug reports from trusted
parties can fix the bug before attackers widely abuse it.
USENIX Association
28th USENIX Security Symposium    1915
Source code FuzzificationProtected binaryNormal binaryDetected bugsNormal compilationAttackers Normal usersTrusted partiesCompilationDistributionFuzzingAnti-fuzz candidates
Pack & obfuscation
Bug injection
Fuzzer identification
Emulator bugs
FUZZIFICATION
Effective Generic
Efficient
Robust
✔
✔
✔
✔
✔
✔
✔
✗
✗
✔
✗
✗
✔
✔
✔
✔
✗
✗
✔
✔
Table 1: Possible design choices and evaluation with our goals.
2.2.1 Threat Model
We consider motivated attackers who attempt to find software
vulnerabilities through state-of-the-art fuzzing techniques, but
with limited resources like computing power (at most similar
resources as trusted parties). Adversaries have the binary
protected by FUZZIFICATION and they have knowledge of
our FUZZIFICATION techniques. They can use off-the-shelf
binary analysis techniques to disarm FUZZIFICATION from
the protected binary. Adversaries who have access to the
unprotected binary or even to program source code (e.g.,
inside attackers, or through code leakage) are out of the scope
of this study.
2.2.2 Design Goals and Choices
A FUZZIFICATION technique should achieve the following
four goals simultaneously:
• Effective: It should effectively reduce the number of
bugs found in the protected binary, compared to that
found in the original binary.
fuzzing and is generally applicable to most fuzzers.
• Generic:
It tackles the fundamental principles of
• Efficient: It introduces minor overhead to the normal
• Robust: It is resistant to the adversarial analysis trying
program execution.
to remove it from the protected binary.
With these goals in mind, we examine four design choices
for hindering malicious fuzzing, shown in Table 1. Unfortu-
nately, no method can satisfy all goals.
Packing/obfuscation. Software packing and obfuscation are
mature techniques against reverse engineering, both generic
and robust. However, they usually introduce higher perfor-
mance overhead to program executions, which not only hin-
ders fuzzing, but also affects the use of normal users.
Bug injection. Injecting arbitrary code snippets that trigger
non-exploitable crashes can cause additional bookkeeping
overhead and affect end users in unexpected ways [31].
Fuzzer identification. Detecting the fuzzer process and
changing the execution behavior accordingly can be bypassed
easily (e.g., by changing fuzzer name). Also, we cannot
enumerate all fuzzers or fuzzing techniques.
Emulator bugs. Triggering bugs in dynamic instrumenta-
tion tools [4, 14, 38] can interrupt fuzzing [42, 43]. However,
it requires strong knowledge of the fuzzer, so it is not generic.
Figure 3: Overview of FUZZIFICATION process. It first runs the
program with given test cases to get the execution frequency profile.
With the profile, it instruments the program with three techniques.
The protected binary is released if it satisfies the overhead budget.
2.3 Design Overview
We propose three FUZZIFICATION techniques – SpeedBump,