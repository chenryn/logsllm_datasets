Smart Meters (SMs): SMs are deployed at the RU side to mea-
sure the electricity consumption. For each unit of expense, SM
outputs an authenticated token to the RU. With the knowledge of
real-time tariffs and consumption measurements, the SM computes
the bill at the end of each billing period and sends it to its RU.
Utility Company (UC): Once received from the RU any proof
of payment output by the underlying payment system, the UC
returns the RU a receipt, collected and used later for payment
verification. By the end of a billing period, the UC interacts with
each RU to carry out the verification process. In this way, the UC
knows which RU has (not) settled the bills.
Since there are multiple payments within one billing period, the
time for payment and the time for bill verification are different.
The billing period represents the period that the SM calculates and
certifies a final bill for an RU. Within a single billing period, the UC
can receive payment from the anonymous RU from time to time.
The UC only needs to verify the bill at the end of a billing period.
2.2 Some Deployment Issues
Sipster needs to work with a base (e-)cash system. An electronic
payment system facilitates automatic payment via the RU’s de-
vice/software even when privacy/verifiability concerns are absent.
Moreover, Sipster works with any payment system ranging from
cryptographic e-cash4 to even paying physically at a booth. For
example, the former can be instantiated by (efficient) compact e-
cash [15] (with a compact wallet) or simple blind-signature-based
approaches. For the latter, we assume RU can get some form of
signatures corresponding to the payment, similar to the current
practice. (Here, similar to what we expect from the SMs to be
detailed below, we assume the booth will issue signature without
embedding tracking information.) Other applications may use the
same e-cash system at the same time, and it could be run by any
external party. During a billing period, the RU pays using this
payment system and retains the proof of payment to be presented
to the UC via our protocol. Apart from this only linkage, we stress
that this payment process is independent of Sipster.
Computing devices (e.g., desktops) of RUs can also save the trou-
ble of settling the bill in person5. They are responsible for receiving
any outbound traffic of the meters, which helps in preventing the
meters from directly interacting with the UC.
3There can be a grace period depending on UC’s policy and RU’s security deposit.
4We omit the standard and relatively lengthy definition of cryptographic e-cash and
its privacy-preserving/anonymity properties, e.g., see [15, 25].
5Sipster does not require this device to be permanently online due to its high efficiency,
even for a high-usage RU who needs to pay a lot and hence pays often.
We suppose all meters are identical. Mass-manufacture of such
meters is cost-effective. Finally, incremental deployment is possible
after the system is deployed. Users can always choose not to use
anonymous e-cash if they do not care about their privacy. Users
may also choose to pay in one shot, which means they choose to
forgo their privacy. Our paradigm is thus “backward compatible”
as both kinds of users (concerning privacy or not) can co-exist.
2.3 Security Requirements and Threat Model
2.3.1
namely, unforgeability and double-spending prevention.
Soundness. Soundness depends on two security properties,
• Unforgeability. 1) The RU cannot produce a valid receipt
unless he pays a valid e-coin to the UC. 2) The RU cannot
forge a valid aggregated receipt as the aggregation result
over K individual receipts, with only K′ < K valid receipts.
• Double-spending prevention. Any RU cannot “redeem”
the same receipt twice.
For soundness, the SMs, which possess the secret (fine-grained
usage) we aim to protect, are tamper-resistant devices (as in [4, 48])
that can perform lightweight cryptographic computations such as
issuing digital signatures. It is a practical and necessary assumption
in reality; otherwise, any RU can change the reading and pay less.
2.3.2 The Parameter K. We first discuss a terminology issue. In a
nutshell, Sipster aims to hide the parameter K throughout the bill
settlement process from the UC. As a crucial parameter of interest
to be hidden by our new paradigm, it manifests in different “forms”
throughout different phases of the system at different levels. From
the perspective of the SM, viewing it issuing an individual bill from
time to time, K refers to the “bill size.” This individual bill servers as
a cryptographic object to be processed by the UC; we thus call each
of these outputs from the SM a “token,” and hence K also reflects
the number of tokens. Finally, from the accounting perspective, it is
the number of increments in a single bill.
2.3.3 Privacy. Privacy intuitively covers every action the RU per-
forms regarding the payment, from paying in unit amounts to prov-
ing the paid amount is sufficient. Moreover, the final bill settlement
proof (for sufficiency) cannot be linked to any prior payment.
• Payment/Receipt Amount Privacy. The UC cannot infer
how many e-coins it receives from an RU.
• Unlinkability. The UC cannot link any spending of e-coin
to a particular RU.
Even with privacy protection, the UC can still verify the correct-
ness of each RU’s bill payment without knowing the exact amount.
Game-based definitions of these requirements are formalized in
Appendix C. Note that we do not explicitly consider an outsider an
adversary since it has less power than and is covered by the UC.
For privacy, we make two necessary trust assumptions –
1) RUs’ computing devices (e.g., desktops) make the payments over
an anonymous communication network (e.g., Tor), which is neces-
sary for any privacy-preserving protocols, including e-cash.
2) SMs are uniform across an anonymity set (e.g., borough, zip
code, street). To show our core technical contribution, we describe
in terms of a standard signature scheme for the unforgeable re-
ports. One may also use privacy-oriented approaches such as group
signatures or their extensions (e.g., [1]).
221ACSAC ’21, December 6–10, 2021, Austin, Texas, USA
Sherman S. M. Chow, Ming Li, Yongjun Zhao, and Wenqiang Jin
Correspondingly, our formal definition considers there are at
least two SMs do not collude with the UC, and we aim to protect
the utility usage of the corresponding RUs. Similar (non-)colluding
assumption is widely accepted in the literature [3, 27, 30, 35, 37, 48].
2.3.4 Additional Concerns. Firstly, if desired, one can always add
a (local) differentially-private mechanism to further obfuscate the
bill amount, similar to the existing works for bill calculation [3, 27].
Kleptographic attack (e.g., the SMs embed the customer ID or
the bill amount within the randomness sent to the UC) is beyond
our scope. Specific cryptographic mitigations might be applicable,
such as subversion-resistant signatures/commitments [5, 8, 26] or
cryptographic reverse firewalls [29, 39]. Integrating them while
retaining the security and privacy of Sipster is left as future work.
A physical countermeasure would be having a law enforcement
agent examine the meter and impose a penalty on such a malicious
UC. A malicious meter reporting high consumption to make the
RU pay more is also beyond our scope. Nevertheless, Section 4.4
discusses fault tolerance against non-malicious malfunction.
3 CHALLENGES AND OUR BASELINE SYSTEM
3.1 Notations
We write x ← X for sampling uniformly at random from a set X. We
write {xi}n as a shorthand for X = {x1, . . . , xn} of n elements, and
[n] denotes the set {1, . . . , n}. Unless otherwise stated, algorithms
are all probabilistic polynomial-time (PPT). The output of algorithm
A on input x is denoted by y ← A(x). λ is the security parameter,
and negl(λ) denotes a negligible function in λ.
Pairing. For presentation brevity, our paper is written assuming
a symmetric pairing group. Let G1 (source group) and GT (target
group) be cyclic multiplicative groups of order q as a λ-bit prime. A
pairing, or a bilinear map e : G1 × G1 → GT , has the following two
properties. (1) Bilinearity: ∀x, y ∈ G1, and ∀a, b ∈ Z∗p, e(xa, yb) =
e(x, y)ab; (2) Non-degeneracy: e(д, д) (cid:44) 1GT for any generator д of
G1, and 1GT is the identity element in GT .
Apart from brevity, we chose to write our paper in symmetric
pairings for two reasons. Looking ahead, the pairing-related compo-
nents of Sipster do not require the decisional Diffie-Hellman (DDH)
assumption to hold for the base groups, which asymmetric pairings
could offer. Describing our scheme using asymmetric pairing might
make a false impression that we also rely on DDH assumptions.
In other words, Sipster can be instantiated with a wider variety
of curves. Meanwhile, some might have an imprecise idea that a
paper written in symmetric pairing groups must be insecure, if
not incorrect. Even in the face of recent attacks against symmetric
pairing groups, related intractability assumptions remain unbroken
with appropriate security parameters, albeit affecting efficiency.
Finally, while not every symmetric-pairing-based scheme can be
ported to one using asymmetric pairing easily, many do [2, 21].
Signature Schemes. A signature scheme consists of three algo-
rithms. The KGen algorithm takes as input the security parameter λ
and outputs a pair of verification and signing keys (vk, sk). The
Sign algorithm takes as input the signing key sk, a message m ∈ M,
and outputs a signature σ ∈ Σ. The Verify algorithm takes as input
the verification key vk and a pair (m, σ) ∈ M × Σ and outputs a bit
indicating whether σ is valid signature for message m under vk.
ID,t , ID, t) that serves as the final bill for period t.
3.2 Technical Overview and Specific Challenges
Despite the relatively extensive literature oncryptographic e-cash
and related privacy-enhancing cryptographic techniques, the prob-
lem of privacy-preserving bill settlement is not straightforward.
3.2.1 Our Design Blueprint. The design blueprint is as follows. For
each unit of power consumption, the SM outputs a random number
Ri to the RU. Suppose at the end of the billing period t; the SM
has output R1, R2, . . . , RK . For convenience, we presume each unit
of power consumption corresponds to a unit payment. The RU
should pay K payment units (e.g., dollar) for the K power units
consumed. The SM aggregates the set {Ri}K
i =1 into a single one as
= F(R1, R2, . . . , RK) with a certain function F(·), and signs
RB
ID,t
the tuple (RB
Before seeing the final bill, the RU pays the UC a unit of (anony-
mous) e-cash from time to time and asks the UC to sign one Rj it
got from the SM. This signature acts as a receipt of a payment unit.
This design assumes the SM only outputs instead of taking any
input. It thus excludes, particularly, an alternative design that only
requires the SM to output one element R1 – To ensure unlinkability,
the function F now needs to repeatedly rerandomize some random-
ized version of R1, which requires either the SM needs to take in
some externally processed inputs (e.g., signed by the UC) or the RU
needs to maintain some state, both of which Sipster aims to avoid.
What remains is to instantiate our design with concrete details.
We start with assuming a “powerful” smart meter as a baseline to
illustrate what could not be done if we restrict to a “minimalistic”
smart meter otherwise. We then discuss at the other end of the spec-
trum and formulate a “powerful” signature scheme for solving our
problems. The goal is to illustrate that a purely cryptographic solu-
tion without any trust assumptions seems to be far-fetched. These
two approaches form a concrete basis to argue for the technical
challenges we encounter and resolve when designing Sipster.
3.2.2 Baseline Powerful-Smart-Meter Approach. Suppose that the
SM is a powerful and fully trusted processor, a “simple” solution
exists – The SM records all the random numbers it has issued. In
the bill verification step, the RU presents all the signatures ever
received from the UC to the trusted SM, who then checks if all the
locally stored random numbers have a corresponding signature. If
so, the SM simply certifies that the user has settled the bill.
This solution seems to work, except that the bill verification at
the SM is O(K) but not O(1). Also, recall that each verification is
on a random number. For verifying O(K) signatures, the SM can
deterministically re-generate them on the spot from a secret seed
or store them in static storage. Either option implies a linear-size
(in K) tamper-proof and rewritable (volatile) storage space. Linear-
size storage seems trivial for typical computing devices but not
resource-constraint smart meters. O(1) storage would be desirable.
The core issue is that having the SM actively participating in bill
verification incur various substantial implications in the hardware
requirements. In particular, it requires the SM to have an interface
for feeding in signatures instead of a typically passive device merely
outputting readings. Having an input interface is risky. Various
forms of attack exploiting malicious inputs have been shown in
various kinds of systems. It simply broadens the attack surface that
may compromise the integrity of the meters.
222Sipster: Settling IOU Privately and Quickly with Smart Meters
ACSAC ’21, December 6–10, 2021, Austin, Texas, USA
For economical mass production, each SM should be as minimal
as possible. Practical deployment needs to minimize the trust as-
sumptions and the functional requirements, as well as reduce the
computation/memory cost of bill verification within the meter.
single one, which does not match our usage since the receipts (of
unit payments) in our setting should be signatures from the same
authority (UC) on different messages.
Homomorphic signatures seem to be a better fit. However, most
of them (e.g. [17]) allow any linear combination of signatures. A
cheating user can then multiply an arbitrary constant to the message-
signature pair to derive a new message-signature pair, and claim
to have paid more. Lattice-based (and less practical) homomorphic
signatures (e.g. [18]) may allow certifying the aggregation function
(which rules out arbitrary operations such as linear combinations),
yet, the privacy guarantee of the function is often all or nothing, i.e.,