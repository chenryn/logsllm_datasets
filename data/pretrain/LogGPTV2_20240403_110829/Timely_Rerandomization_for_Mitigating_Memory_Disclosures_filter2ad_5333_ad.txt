e
m
T
i
 1400
 1200
 1000
 800
 600
 400
 200
 0
Unmodified Program
TASR Rerandomized Program
g
b
zip
2
c
c
m
g
o
h
m
b
cf
m
m
h
2
sp
sje
hin
n
x
er
3
g
6
m
ilc
4ref
k
lb
m
lib
q
u
a
ntu
m
Figure 3: Runtime overhead for TASR rerandomiz-
ation triggering at input/output system calls for the
SPEC CPU2006 Benchmark
4.5 Limitations
TASR is subject to certain caveats and limitations beyond
those that have already been discussed. The use of inline
assembly in a C program cannot be tracked by our current
methods and would require manual annotation of the as-
sembly snippets in order to allow DWARF information to
be generated. Should the author of a process manipulate
code pointers in a block of inline assembly, such manipula-
tion will not show up in DWARF tracking information and
it becomes possible that a code pointer will not be updated
during rerandomization. Naturally, the inability to update
even a single code pointer will likely result in eventual pro-
gram crash via segmentation violation when attempting to
run code at a location not presently allocated.
5. EVALUATION
The goals of our evaluation are to determine the perfor-
mance overhead of executing TASR-enabled binaries, exam-
ine the frequency of coding practices in common applica-
tions that would require manual modiﬁcation in order to be
compatible with TASR, and to analyze the technique’s ef-
fectiveness against attacks that leverage memory disclosure
vulnerabilities in order to hijack control ﬂow. These items
are addressed in the following subsections.
5.1 Performance
The CPU and memory overhead of TASR were evaluated
using the C programs in the SPEC CPU2006 benchmark,
with the exception of perlbench, which was excluded due
to TASR not currently supporting interpreted environments
as per Section 3 (see Section 5.2 for further details). We
acknowledge that the SPEC benchmark has certain limi-
tations in evaluating TASR’s overhead. Since SPEC CPU
is a compute-intensive benchmark, it is primarily useful in
evaluating the runtime performance impact of the allocator
instrumentation in both CPU and memory overhead, but
does not capture the full impact of rerandomization over-
head in an I/O-intensive program (such as a webserver).
Ideally, TASR should also be evaluated on an appropriate
I/O-intensive benchmark, but such benchmarks are unfor-
tunately not as widely used or available as SPEC.
275All experiments were conducted on a Debian 7 machine
running Linux kernel 3.2.65 on a 4-Core Intel Xeon 2.66
GHz processor with 8 GB of RAM. The performance of
TASR-enabled programs is compared against the perfor-
mance of the same set of programs compiled using an
unmodiﬁed GCC 4.8.2 and using the default ASLR base
address randomization but without runtime rerandomiz-
ation. The baseline programs were compiled with GCC’s
unmodiﬁed DWARFv4 debugging information (-gdwarf-4
and -fvar-tracking ﬂags) while the TASR-enabled set was
compiled with the additional debugging information and
runtime instrumentation code required for rerandomization.
Both the baseline and the TASR-enabled binaries were com-
piled using the -Og ﬂag, which performs optimizations that
preserve debugging information.
As shown in Figure 3, the CPU overhead ranged from
negligible in more than half the cases to 10.1% in the worst
case, with an average overhead of 2.1%.
Note that in a few cases the diﬀerence was suﬃciently
insigniﬁcant such that TASR binaries actually reported
marginally faster runtimes than unmodiﬁed binaries, within
the limits of expected variation. This is normal and, in
fact, expected due to layout randomization. A similar phe-
nomenon has been observed in the related work [11, 12].
Overhead in comparison to the total number of I/O pairings
during the program run, average number of function point-
ers that needed to be updated at rerandomization time, and
the average depth of the stack at rerandomization time are
detailed in Table 2. Virtual memory overhead ranged from
negligible in the best case up to 3.5MB in the worst case,
with an average overhead of 1MB. The increase in mem-
ory consumption is primarily attributable to the additional
DWARF debugging information that is added to binaries
for tracking function pointer locations and unwinding the
stack. The storage of debugging information was not opti-
mized in any way and the memory overhead could likely be
signiﬁcantly reduced by performing such optimizations.
The very low overhead of TASR is because of its synchro-
nization with the I/O system calls. Note that the expensive
context switching cost (from userspace to kernelspace and
back) is already paid by the system call when rerandomiz-
ation is in-sync with read/write calls.
5.2 Compatibility
TASR successfully compiled and rerandomized all tested
programs with the exception of perlbench. The perlbench
component interprets code at runtime and TASR currently
does not have the mechanism for adding debug informa-
tion to track interpreted or runtime-generated code. Simi-
lar mechanisms that were added to GCC would need to be
added to the Perl interpreter in order to generate such de-
bug information at runtime. Moreover, we observed that
perlbench violated the C standard by treating function
pointers as data pointers in some areas, which prevents ac-
curate compilation under TASR without manual modiﬁca-
tions. We thus did not evaluate perlbench under TASR.
As discussed in Section 4.2, there are certain cases where
TASR can miss pointers to code and thus would fail to up-
date the pointers at rerandomization time. Speciﬁcally, this
occurs when function pointers are stored as other types but
later used as function pointers, or where dynamic allocations
of function pointers cannot be automatically recognized by
TASR due to custom allocators or the lack of any type in-
formation passed to malloc(). These cases require manual
modiﬁcations of the source code such that function point-
ers are indeed declared as function pointer types. There
are four programming practices that could require manual
modiﬁcation in order to be compatible with TASR: function
pointer casting, allocations without type information, union
type punning with function pointers, and custom memory
allocators.
Function pointer casting: TASR assumes strict com-
pliance with the C standard’s rules on conversions involv-
ing function pointers. Speciﬁcally, a program should not
cast a non-function pointer into a function pointer [23]; thus
TASR only modiﬁes pointers that are declared as pointing
to a function. Pointers that are declared as pointing to a
non-function and later converted to pointers to functions
may cause the program to fail. Outside of a few speciﬁc in-
stances (interpreter implementations and usage of POSIX’s
dlsym) these conversions are not common. We analyzed the
frequency of casting between function pointers and object
pointers using GCC’s -pedantic ﬂag. This ﬂag enables all
warnings demanded by strict ISO C compliance. Several
of these warnings indicate the presence of a cast between
function pointers and object pointers. The total number of
function pointer casts found are shown in the two rightmost
columns of Table 2. Note that not all function pointer casts
enumerated in those columns actually cause a problem for
TASR. Typically only those cases where an object pointer is
upcast to a function pointer prove to be problematic in prac-
tice. In these cases, the mistyped function pointer would not
be updated during rerandomization and thus would contain
a stale address that would break the program if the function
pointer were subsequently called. While there were some
function pointer casts in the SPEC benchmark programs,
we found no actual problematic cases (i.e. upcasting) dur-
ing our evaluation.
Union type punning: TASR’s union tagging requires
that whenever a union member is accessed, that member
must be the same as the member last used to store a value
into the union. Occasionally programmers will intentionally
access a union member that does not correspond to the last
assigned union member to reinterpret the stored value as a
diﬀerent type (a process known as type-punning). In prac-
tice, this does not pose a problem to TASR as the number of
union members of type pointer to function is low as shown
in the two rightmost columns of Table 2. While we did ﬁnd
some cases of unions containing function pointers, we did
not ﬁnd any actual instances of type-punning in our test
programs.
Malloc without type: TASR tracks function pointers
located on the heap by annotating all allocations with type
information. This type information is inferred via a syn-
tactic analysis on the call site of a heap allocation. The
syntactic analysis examines the arguments passed to the al-
locator, looking for a sizeof(). If a sizeof() is found, the
type inside the sizeof() will be used to annotate allocations
made from that site. If no sizeof() is found, it examines
the type of the pointer to which the newly allocated space
is assigned.
If the pointer is of type pointer to void, our
analysis will display a warning as it is unable to determine
the type associated with the allocation. We did not ﬁnd any
such instance in the SPEC benchmark programs.
Custom allocators: Many large programs use custom
allocators and these need to be instrumented for TASR to
276Program
CPU Over-
head
∼0%
bzip2
5.5%
gcc
∼0%
mcf
4.8%
gobmk
∼0%
hmmer
∼0%
sphinx3
10.1%
sjeng
.8%
h264ref
∼0%
milc
lbm
1.6%
libquantum ∼0%
Memory
Overhead
(KB)
28
2512
84
3156
264
88
3436
1002
48
680
0
I/O Pairs
Mean Code
Ptrs
6
0
2
551
2
124
2
36
2
0
0
144
0
147
2019
223
209
169
212
167
146
0
Mean
Stack
Depth
5
0
6
11
10
4
6
6
11
7
0
Function
Ptr Casts
0
175
0
0
0
0
0
0
0
0
1
Unions
Containing
Function Ptrs
0
0
0
3
0
5
0
21
1
1
1
Table 2: Overhead in relation to frequency of I/O Pairs (rerandomizations), code pointers requiring updat-
ing, and depth of the stack at rerandomization time. The two rightmost columns show the frequency of
function pointer casting and unions containing function pointers. Note that none of these cases were actually
problematic and thus no manual modiﬁcation was necessary.
track dynamic allocations. Currently, this requires one to
determine the signatures of all custom allocators used by a