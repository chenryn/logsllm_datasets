title:Co-Design Based Approach to Improve Robustness in Networked Control
Systems
author:Sumant Kowshik and
Girish Baliga and
Scott R. Graham and
Lui Sha
Co-design based Approach to Improve Robustness in Networked Control
Systems
Sumant Kowshik?
Girish Baliga?
Scott Graham†
Lui Sha?
?University of Illinois at Urbana-Champaign
†Air Force Institute of Technology
fkowshik,gibaliga,PI:EMAIL
scott.graham@aﬁt.edu
Abstract
Traditional control systems consist of sensors, con-
trollers, and actuators operating with tight periodic depen-
dencies, and communicating over dedicated real-time chan-
nels such as CAN or FDDI. However, best effort networks
such as 802.11 are being increasingly used in such systems.
The unpredictable delays and losses in such networks vi-
olate the periodicity assumptions of digital control design,
and the consequent fail-safe actions incur signiﬁcant per-
formance penalties.
In this paper, we propose a co-design based approach
to address the periodicity requirements of digital control
design, and improve robustness by extending deadlines
through graceful degradation to the fail-safe action. In par-
ticular, we analytically demonstrate signiﬁcant deadline ex-
tensions in the control loop of a trafﬁc control testbed based
on our approach. Such deadline extensions also facilitate
fault tolerance techniques such as component restarts, and
system management mechanisms such as online component
upgrades. We validate the results by experiments in the
testbed.
1. Introduction
Networked control systems represent the next step in the
the information technology revolution, namely interaction
with the physical world. We are moving forward from hav-
ing the ability to communicate globally to the ability to
control globally. Due to their interaction with the physical
world, these systems perform critical tasks in homes and in-
dustries, and support local and national infrastructure. Con-
sequently, such systems need to have high availability and
robustness over long durations.
Conventional digital control design of such systems is
based on periodic operation and hard real-time guarantees.
Sensors generate periodic updates, controllers use these up-
dates to compute periodic controls, actuators implement
these controls periodically, and most or all of these opera-
tions are completed within hard deadlines. This mode of op-
eration signiﬁcantly simpliﬁes control design, and has con-
sequently been enforced in most control systems. To enable
this approach, systems engineers have relied on effective
scheduling algorithms based on conservative worst-case ex-
ecution deadlines, and communication channels such as
CAN [9] and FDDI [2] that provide real-time guarantees.
Due to the periodic model of these systems, missed dead-
lines in sensor updates or controller computations are re-
garded as failures and result in the system transitioning
to a fail-safe state. This transition affects system perfor-
mance signiﬁcantly, and hence the system is usually over-
engineered to ensure that deadlines are met. Consequently,
the correctness of system operation depends strongly on the
periodicity of sensor updates and controller computations.
With the widespread proliferation of best effort networks
such as Ethernet and 802.11 [19], control systems using
such networks are being increasingly deployed. However,
such networks cannot provide real-time guarantees. Wire-
less networks in particular have unpredictable delays and
high packet losses, which violate the periodic assumptions
of digital control design, and designing such systems using
conventional techniques will result in the system frequently
entering the fail-safe state.
Further, transient errors and residual software bugs in in-
dividual components, particularly commercial off-the-shelf
(COTS) components, often result in component failures and
software crashes. Such failures are usually handled by state
check-pointing and component restarts.
In fact, software
rejuvenation [24] is a well-documented fault management
technique where components are pro-actively restarted to
avoid severe crash failures in the future.
In addition,
planned software upgrade of components also involves on-
line replacement of an existing component. However, all
these changes may result in deadline violations necessi-
tating fail-safe action. Hence, extension of deadlines and
graceful system degradation are imperative to improving
system performance during such changes.
Feedback
Sensor
Controller
Sensor
State
Estimator
Controller
Controls
Plant
Actuator
Plant
Control
Buffer
Actuator
(a) Original design
(b) Enhanced design
Figure 2. Design enhancements in a typical
control loop
serves the modularity of periodic control design and sys-
tems engineering.
The key contributions in this paper are summarized be-
Figure 1. Trafﬁc control testbed
low:
To study the issues involved in designing and operating
such networked control systems, we have developed a traf-
ﬁc control testbed [13] in the IT Convergence lab at CSL,
UIUC. The testbed, shown in Figure 1, consists of a set of
autonomously controlled cars operating in different trafﬁc
scenarios to accomplish prescribed high level goals. The
control components get periodic feedback about car posi-
tions from a camera based vision feedback sub-system, and
send controls to actuator components that operate the cars.
A key safety requirement in this system is that cars
should avoid collisions. This is accomplished by a fail-safe
operation in the event of an impending collision. For in-
stance, a simple fail-safe operation would be for a global
monitor to broadcast a stop signal to cars that may collide.
While such a fail-safe prevents collisions, it is undesirable
for the system to transition to this state since it freezes the
entire system and incurs a substantial performance penalty.
In our work, we develop a co-design based approach
to address the periodicity assumptions of traditional digital
control design. In the traditional periodic model of the sys-
tem a deadline violation is considered to be a failure, which
results in a fail-safe operation.
In our technique, we uti-
lize an application-level safety criterion (e.g. no collisions
in our cars testbed) and exploit this requirement to facili-
tate graceful degradation of the system in the presence of
random delays in the communication between sensors, con-
trollers, and actuators. This provides signiﬁcant deadline
extensions until the fail-safe actions and, in practice, fail-
safe actions are rarely invoked. Consequently, such commu-
nication can occur over best effort networks such as 802.11
as well. This signiﬁcantly improves system robustness, and
weakens the dependencies of components on other compo-
nents and communication links. Finally, our approach pre-
1. We present a co-design based approach to improve ro-
bustness in networked control systems. Our modular
approach allows the control engineer to use the tradi-
tional periodicity assumptions, and the systems engi-
neer to build a system tolerant to communication de-
lays and component restarts.
2. We describe how our approach has been used to signiﬁ-
cantly improve robustness in our trafﬁc control testbed.
3. We analytically derive deadline extensions through
graceful degradation for a control loop in our testbed,
and validate our results experimentally.
The rest of the paper is organized as follows. We present
our co-design based approach in Section 2, and describe its
application to our testbed in Section 3. The deadline exten-
sions achieved in our testbed are analyzed in Section 4, and
Section 5 presents experimental validation of this analysis.
Section 6 describes related work, and Section 7 concludes.
2. Co-design based approach
Networked control systems are characterized by compo-
nents operating in control loops. A typical control loop,
shown in Figure 2(a), consists of sensors, controllers, and
actuators that control a physical plant. Sensors monitor
physical characteristics in the plant, and send periodic up-
dates as feedback to the controller. The controller uses
this feedback, and computes controls to achieve prescribed
goals. These are then sent to actuators that apply the con-
trols to the plant.
Digital control design assumes that all components in a
control loop operate periodically with hard real-time dead-
lines. For every period, the controller receives feedback
from the sensor and computes a set of controls that are en-
forced by the actuator. The computation deadlines and com-
munication delays have strict guarantees. In particular, vi-
olation of a controller deadline would result in no control
being sent to the actuator. This usually results in a fail-
safe operation being enforced by the actuator. Similarly, a
missed feedback deadline by the sensor would result in the
controller missing its deadline and implementing a fail-safe
action as well.
In networked control systems, such deadline violations
can occur due to: (a) communication delays and data losses
between the components, or (b) failures and consequent
restarts of the sensor or the controller. Communication de-
lays on the link from the sensor to the controller can be
partly addressed by using a state estimator at the controller.
However, deadline misses due to delays on the link from the
controller to the actuator, or component failures, are harder
to address. We do not consider actuator failures since they
are usually simple and robust components, and are sepa-
rated from the complex functionality of the controller for
restart independence.
As noted above, controllers usually have a state estima-
tor that maintains a model of the physical plant. This model
captures the behavior of the plant by representing its cur-
rent conﬁguration with a set of variables called the state.
The state in the model evolves according to the controls ap-
plied to the plant through the actuator. However, imprecise
modeling and imperfect calibration lead to an error between
the states of the model and the plant. This error is corrected
by feedback from the sensors.
Our approach is based on two observations about this
mechanism. First, control systems usually have certain tol-
erances that allow the plant to be operated within speciﬁed
error bounds. For instance, a car in our testbed can be off
by about two inches without causing any collisions. This
system-level safety model is more realistic than the safety
model in a traditional periodic model, where a deadline vi-
olation is regarded as a safety violation. The difference be-
tween the safety requirements of the system and that of the
periodic model can be exploited to gracefully degrade sys-
tem functionality before executing a fail-safe transition.
Second, the state estimator has a predictive capability,
using which its state can evolve based only on the controls.
Hence, as long as the error between the estimated and actual
states can be bounded, the plant can be guaranteed to oper-
ate within the error bounds speciﬁed by system tolerance.
The above observations can be used to enhance the con-
trol loop as shown in Figure 2(b). Speciﬁcally, we introduce
the following enhancements:
I. The controller uses a state estimator to tolerate delays
in sensor updates.
II. The controller computes a sequence of future controls
that are stored in a control buffer at the actuator.
The ﬁrst enhancement ensures that controllers have peri-
odic estimates of plant state from the state estimator. This
allows controllers to be designed using traditional digital
control theory, and preserves the modularity between real-
time control and best effort networks. For the second en-
hancement, the controller computes a sequence of future
controls, instead of a single control for the current period.
To accomplish this, the estimator is used as a state predictor
to predict the state of the plant as the sequence of future con-
trols is applied to it. These future controls are then stored
in the control buffer at the actuator, and are used in case the
controller misses future deadlines. Note that it is the second
enhancement that enables deadlines to be extended in the
sensor and the controller.
The key idea in our approach is to reduce dependen-
cies between components that communicate over a network.
However, the performance gain is primarily determined by
the horizon for which future controls are computed, since
the horizon determines extensions in deadlines. In partic-
ular, the future control horizon depends on the following
factors: (a) System tolerance and operational error bounds
for the plant, (b) Growth of error in predictions by the state
estimator, (c) Computational resources available to the con-
troller to compute a sequence of future controls during each
period, (d) Size of the control buffer at the actuator to store
the future controls, and (e) Communication bandwidth be-
tween the controller and the actuator to send a sequence of
future controls during each period.
Factors (c), (d), and (e) depend on system deployment
constraints and can be engineered as necessary. However,
the growth of prediction error is determined by the plant
model, and the future control horizon is essentially the in-
terval up to which this error is within system tolerance. In
section 4 and 5, we focus primarily on the second factor
above, and demonstrate how deadlines have been extended
in our testbed using this approach.
Increasing demand for performance in digital control re-
quires tightly coupled periodic components with small pe-
riods of execution. However, most systems have safety re-
quirements, which enforce that the physical plant does not
reach an unacceptable or an unrecoverable state. Using the
principle of separation of concerns between digital control
design and system engineering, traditionally these systems
employ a periodic model for safety, where delayed sensor
updates or controller outputs result in a failure (and hence
a fail-safe operation). This leads to a severe performance
penalty in networked control systems implemented over
wireless networks or in systems with component restarts
and online upgrades.
Our co-design for networked control system exploits the
gap between the periodic failure model of networked con-
trol system and the weaker system safety requirements, by
In this
providing a mechanism for graceful degradation.
way, it extends the deadlines of sensor updates and con-
troller outputs until fail-safe operation. Our co-design based
approach thus provides two primary beneﬁts: (a) Modu-
larity between periodic digital control design and systems
engineering and (b) Deadline extensions through graceful
degradation of the system functionality before executing
fail-safe operations.
Vision processor 1
Vision processor 2
Vision Data Server
Supervisor
Controller 1
Controller 2
Actuator 1
Actuator 2
LAPTOP 1
LAPTOP 2
Car 1
Car 2
LEGEND
Data flow
Control flow
3. Design enhancements for the testbed
Figure 3. Software architecture of the testbed
We illustrate our approach by describing its application
to our trafﬁc control testbed. This section describes the
testbed, its original software architecture, and design en-
hancements used to incorporate our approach.
3.1. Trafﬁc control testbed
We have developed a trafﬁc control testbed in the IT
Convergence Lab at CSL, UIUC, as a research prototype to
study networked control systems [13]. The testbed, shown
in Figure 1, consists of autonomous cars operating on an in-
door track in various trafﬁc scenarios. The trajectory of a
car is determined by its speed and orientation, and control
is enabled by changing these parameters. Currently, cars
have no on-board computing capability, and are controlled
through radio frequency transmitters on dedicated channels.
Control for each car is computed by software executing on a
corresponding laptop. For our purposes, however, this con-
ﬁguration is equivalent to each car having a dedicated on-
board computer.
Cars are tracked by a vision system consisting of two
ceiling mounted cameras. The video stream from each cam-
era is processed by software executing on a corresponding
desktop computer. This software scans a video stream as a
sequence of frames, and extracts positions and orientations
of cars in the ﬁeld of vision. This information is then avail-
able as feedback to control the cars.
We have demonstrated various scenarios in the testbed
including trafﬁc situations, pursuit-evasion, collision avoid-
ance, and component restarts, upgrades, and migration.
Videos of these experiments and other details of the testbed
are available at [1].
3.2. Software architecture
The software architecture of the trafﬁc control testbed
is illustrated in Figure 3. There are two video processor
components that process video streams from corresponding
cameras to determine car positions and orientations. This
information is accumulated and merged in a vision data
server component, and is then available as feedback to other
Vision Data
Server
Feedback
Controller
Vision Data
Server
State
Estimator
Controller
Controls
Actuator
Control
Buffer
Actuator
(a) Original design
(b) Enhanced design
Figure 4. Design enhancements in lower level
control loop
components in the system. The controller and actuator com-
ponents for each car execute on the corresponding laptop as
shown in the ﬁgure. All other components execute on sepa-
rate computers and communicate over a network.
There are two control loops in the system as outlined in
Figure 3. The lower level loop involves the controller and
actuator components that control corresponding cars. Each
controller takes in a trajectory, which is a timed sequence
of track positions, and computes a sequence of controls to
operate the car along the given trajectory. The controls are
sent to the actuator, which then transmits them to the car on
the dedicated RF channel.
The higher level control loop involves the supervisor
component, which computes desired car trajectories and
sends them to the controller. For instance, in a trafﬁc sce-
nario the computed trajectories move the cars to their des-
tinations along a network of roads. If correctly followed,
the trajectories also ensure that cars do not collide, particu-