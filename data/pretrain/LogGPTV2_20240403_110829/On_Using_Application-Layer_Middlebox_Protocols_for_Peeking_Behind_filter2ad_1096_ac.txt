51.45 %
2.59 %
1.78 %
1.68 %
1.17 %
80
4433
8195
65003
65004
Unique values
5,246
Target Subnets
15.97 % WhatsApp-preﬁxed
11.85 %
11.68 %
10.44 %
7.21 %
libtorrent
wechat voip
IP+port match
HCDN
galleta silenciosa
libtorrent
16.49 %
13.21 %
11.95 % WhatsApp-preﬁxed
11.45 %
10.47 %
uTorrent
IP+port match
27,195
Unique values
4,652
Unique values
14.31 %
11.32 %
8.54 %
8.39 %
8.23 %
9308
6881
0
19132
3027
10.82 %
10.49 %
6.94 %
5.88 %
3.52 %
139
445
80
6881
0
60,159
Unique values
60,822
Unique values
192.168.0.0/24
192.168.1.0/24
192.168.10.0/24
10.0.0.0/24
192.168.9.0/24
54.71 %
25.66 %
2.84 %
1.08 %
0.87 %
182.161.73.0/24
43.227.116.0/24
172.217.25.0/24
216.58.197.0/24
183.111.131.0/24
30.38 %
28.35 %
28.28 %
28.15 %
26.95 %
199.217.119.0/24
200.0.0.0/24
82.163.142.0/24
144.1.0.0/24
88.2.0.0/24
44.95 %
23.67 %
5.99 %
3.3 %
3.1 %
192.168.1.0/24
192.168.0.0/24
192.168.2.0/24
192.168.10.0/24
255.255.255.0/24
43.91 %
42.41 %
2.27 %
1.89 %
1.72 %
192.168.1.0/24
192.168.0.0/24
192.168.2.0/24
255.255.255.0/24
10.0.0.0/24
49.43 %
36.69 %
3.02 %
2.69 %
2.55 %
192.168.1.0/24
192.168.0.0/24
182.161.73.0/24
43.227.116.0/24
172.217.25.0/24
Unique values
7,609
Unique values
14,651
Unique values
614
Unique values
1,167
Unique values
1,235
Unique values
32.33 %
10.21 %
10.09 %
9.63 %
7.86 %
35,490
25.01 %
23.86 %
16.16 %
8.15 %
7.55 %
64,600
46.5 %
36.0 %
3.83 %
3.58 %
3.57 %
16,963
broadcast purposes. The most commonly seen broadcast user
was an obscure peer-to-peer video streaming solution with the
description “HCDN” (on almost 1,800 hosts).
5) Estimating the Number of Vulnerable Hosts: While
trying to understand why some of these hosts are left unabused
without trying to add our own mappings on them, we devel-
oped a way to estimate the number of vulnerable devices based
on what we know about the already abused ones. As it turned
out that 98 % of abused gateways were responding to discovery
using the source port 1900, we speculated that the attackers
were misled by the same ZMap issue as we did in the early
stages of our research. However, it does not seem to be so
clear as there exists a population of almost 200,000 routers
using that port with no forwards whatsoever, so unfortunately
we have no conclusive answer to this observation.
Therefore, instead of estimating the number of vulnerable
hosts based on the availability of WAN*Connection inter-
faces (the middle column in Table I on page 4), we decided to
use the information from known-to-be-vulnerable hosts (i. e.,
hosts from the ﬁrst two groups). To this end, we create a
tuple of (cid:104)manuf acturer, modelname, modelnumber(cid:105) and
we consider all matching devices deﬁnitely vulnerable (shown
in the rightmost column in Table I). Based on this, ~480,000
SOAP endpoint exposing devices are potentially vulnerable,
while 86 % of them are deﬁnitely vulnerable.
C. UPnP Internet Gateway Device Honeypot
Based on the empirical results presented in the previ-
ous section, we were also interested in tracking abuse not
only through active analysis via Internet-wide scans, but
also developed a honeypot to study potential attacks. More
speciﬁcally, we developed a honeypot that implements both
GetGenericPortMappingEntry (allowing enumeration
up to ﬁve items) and AddPortMapping (responding suc-
cesses) and use our responses from a real, vulnerable device.
Knowing that SSDP is used as a source for DDoS attacks, we
limited the number of responses to two per requester in an
hour to prevent abuse. Furthermore, we modiﬁed the location
of the device description ﬁle in order to ascertain whether
the potential attackers parse the replies instead of leveraging
commonly used locations. We set our SOAP endpoints to listen
on tens of the most commonly used ports and answering only
to requests (and device description requests) on tens of known
paths or path preﬁxes based on data we collected for previous
analyses. We make the source code of our honeypot available
at https://github.com/RUB-SysSec/MiddleboxProtocolStudy/
to foster further research on this topic.
We analyzed the saved interactions between December 9,
2018 and February 3, 2019. In total, we observed 791 HTTP
requests from 52 distinct IP addresses, while 821 IP addresses
sent a discovery request. Of those, 33 addresses requested
the actions we were interested in 299 times. Two scanner
instances (one using a single IP address, another distributing
the scan to happen from tens of addresses) enumerated through
the port mappings after fetching the description ﬁle from
our non-standard location, which we categorize as research
scanners based on their behavior although neither of them
announced themselves as such directly. The ﬁrst one used a
single IP address from Hongkong, which crawled ﬁrst based
on the SSDP response, but extended later to check for other
common device description locations. The second instance was
an orchestrated, simultaneous scanning using 22 IP addresses
from China which tried to fetch the ﬁrst 45 forwards while
ignoring our error responses (with user-agent “Firefox 5.0”).
We also observed 15 calls to adding a port mapping (from
ten different networks and countries), but a closer inspection
revealed that these were all targeting the same port in hopes to
exploit a command injection vulnerability2 in one of the input
ﬁelds. With this, we conclude that either we were unlucky or
that malicious activities were not active during our observation
period. We have kept our honeypot running also after the
observation period described here, but we have not noticed
any malicious activities involving insertion of forwards.
2Looks like a variant of CVE-2014-8361 as analyzed by Montonen [50]
6
D. UPnP IGD: Key Findings
In conclusion, our research shows that 30 % of all SSDP
responsive hosts expose also their control endpoints, poten-
tially allowing different kinds of misuses in practice. We
were able to enumerate port forwards from about 130,000
hosts, while ﬁnding that ~480,000 hosts expose their port
forwarding controls to the Internet. Our analysis indicates that
malicious actors have used this feature for either scanning
hosts behind these NAT gateways, or as jump hosts to forward
their trafﬁc over the Internet to masquerade their activities.
Most commonly seen innocuous uses were use of Bittorrent
or VoIP softwares, with the majority of hosts using either
192.168.0.0/24 or 192.168.1.0/24 as their internal network.
During our investigation, we also found out
that ZMap’s
response ﬁltering misses a large fraction of SSDP responsive
hosts, making them invisible for perpetrators using the tool for
collecting potential SSDP ampliﬁers for DDoS attacks.
III. NAT-PMP AND PCP
NAT Port Mapping Protocol (NAT-PMP) is an IGD com-
petitor, ﬁrst introduced and deﬁned by Cheshire et al. [12] in
2005 while working for Apple. Support for it was ﬁrst shipped
with OS X 10.4 released earlier that year. The draft got updated
several times, until an informational RFC 6886 [11] was re-
leased (posthumously) in 2013 alongside its IETF-standardized
successor, Port Control Protocol (PCP, RFC 6887 [71]).
NAT-PMP uses a simple UDP-based binary protocol on
port 5351, supporting only three operations: (i) ANNOUNCE
for determining the external address of the NAT gateway and
for server to client signaling, (ii) Map UDP, and (iii) Map
TCP for requesting forwarding. The client requests a port
mapping from the NAT gateway by sending one of the mapping
requests containing the port where to forward the trafﬁc to, the
suggested external port (the gateway will choose the port it
maps for the client), and the wanted lifetime of the mapping. It
must be emphasized that in contrast to IGD, it is not possible
to explicitly state the forwarding destination, but the source
address of the request serves as that.
Port Control Protocol (PCP) is the successor of NAT-PMP
using the same port, a compatible packet format, and similar
operational semantics. The protocol was extended to support
IPv6, the management of outbound mappings (PEER opcode),
and more. PCP was designed from the start to be extendable by
having a simple base header followed by an opcode-speciﬁc
payload and potential options. An illustration of a complete
PCP request with MAP opcode and THIRD PARTY option
to request a mapping 10.0.23.221:12345 ⇒ 127.0.0.1:1024 is
shown in Figure 2. For the ANNOUNCE command, only the
base header is necessary.
A. Measurement Approach
In comparison to UPnP IGD, neither NAT-PMP nor PCP
offer functionality to enumerate over existing port mappings.
Instead, we can only try to verify the existence of miscon-
ﬁgured implementations with the carefully planned Internet-
wide scans. Our NAT-PMP/PCP scans involve three different
payloads to gain an understanding of whether similar attacks as
for UPnP IGD are possible. As with UPnP IGD, we carefully
crafted the payloads and tested them against
the software
0
8
Version=2 R
16
OP = 1
(MAP)
Reserved
Result
31
(Requested) Lifetime = 30 seconds
128b Client Address (“Epoch Time” on responses)
Mapping Nonce 96 bits
Protocol = 7
Reserved
Internal port = 1024
External port = 12345
Suggested External IP address
::ffff:a00:17dd (for 10.0.23.221)
Option=1
(3rd party)
Reserved
Option length=16
Internal IP address (128b)
::ffff:7f00:1 for 127.0.0.1
PCP
Header
 Options
Opcode-
speciﬁc
payload
Fig. 2.
(middle, green) and the 3rd party option (bottom, orange).
PCP request with the common header (top, yellow), MAP payload
implementation miniupnpd in our lab environment in different
conﬁgurations to make sure they were working as expected
and did not cause any unintended side effects.
1) Discovering PCP Servers: For the initial host discovery,
we leverage the backward compatibility of PCP to NAT-PMP’s
packet structure, meaning that we can do a single query to
discover servers supporting either of the protocols by sending a
single PCP ANNOUNCE request. For this, we prepare a request
containing only the PCP base header (Figure 2, the topmost
part) including our IP address as the requester. We set the
version ﬁeld to “2” (PCP) and the lifetime to “0”, and run a
scan on port 5351 on the whole Internet with ZMap [20].
Correctly conﬁgured PCP servers should silently drop these
packets as they are not arriving from the internal network.
If that does not happen and the server processes the packet
correctly, we expect to receive SUCCESS in the result ﬁeld
with the epoch ﬁeld ﬁlled with device’s current uptime. If the
host supports only NAT-PMP or a vendor-speciﬁc implemen-
tation (version 1 in the payload), an UNSUPP_VERSION [71,
“Version Negotiation”] response is expected.
2) Checking for 3rd party option: Our second check is
used to understand how many of those PCP supporting servers
would support the THIRD PARTY option for creating arbi-
trary forwards. To this end, we sent a speciﬁcally crafted MAP
request to create a forward on the very same IP address sending
out these requests, i. e., our scanner server. If the option is not
supported at all by the PCP server, it should respond with a
UNSUPP_OPTION result code indicating that fact. Recalling
back to the implicit forward destination, the RFC mandates
that the third-party forward target has to be different from the
source address, and violations must be reported back with an
MALFORMED_REQ error.
a) Testing for Potential Vulnerabilities: Our last check
is also done on the same PCP-supporting population, which
we use to verify if the server allows the creation of for-
wards. While knowing that this may affect the routing of
7
TABLE IV.
RESULTS FROM PCP SCANS
ANNOUNCE
MAP THIRD PARTY
NAT-PMP
PCP
Invalid IP
127.0.0.1
ADDRESS MISMATCH
MALFORMED OPTION
MALFORMED REQ
NETWORK FAILURE
NOT AUTHORIZED
SUCCESS
UNSUPP OPCODE
UNSUPP VERSION
Total
–
–
–
–
–
114
–
554,487
554,601
4
–
–
9
70,437
5
1
–
70,456
–
2
31,046
8
423
–
–
–
31,479