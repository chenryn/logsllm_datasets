执行者一样找出某些问题。从好的另一方面来看，一个“真正的"测
试人员一定会把这些已有测试看作自己的职责范围，重新考虑其中
的想法，提出问题，充实和改变测试，探究原来的分析没有考虑到
的地方。如果原来的分析实在很棒，那可能他们也找不出来太多可
以更新充实的内容，进而增加了无聊指数。你会发现，如果每天的
工作就是按部就班，如运行一大堆已有的手工测试用例，日复一
日，那些真正富有创造力、勤勉的、聪明的测试人员的精气神儿、
自主性和创造力都会消磨殆尽。为了你的测试人员士气着想，无疑
需要让他们把手头工作交给愿意每天按部就班做事的人，或把手工
测试自动化，或者不要让他们再做这些事情。他们想做点新的事
情，想发现和报告缺陷，想贡献其他人无法贡献的力量。
很多测试人员觉得单调乏味而不屑运行回归测试用例，你会发现他
们其实大部分都理解甚至同意回归测试的必要性，但这就像是面对
一道人家已经解决的谜题，一点探索和寻宝的乐趣都没有了。大多
数测试人员知道回归测试只能找到代码里的一小部分问题，他们更
愿意去寻找新代码里潜伏的一大堆问题，这完全就是探索和寻宝的
乐趣之旅。
那么在态度方面，难道不应该团队协作吗？千真万确，你的测试人
员也愿意扮演好团队成员角色，他们是想帮忙作责献的，他们很希
望自已得到欣赏，但是他们关注的东西让项目组其他成员难以接受
和欣赏他们的贡献。他们的幽默甚至增加了让他们融入团队的难
度。更糟的是，如果你在一个不关注质量的公司工作，并不认同或
不解决测试人员辛辛苦苦发现的问题，测试团队会认为这是对他们
以及他们的工作缺乏尊重。如果你不给予测试人员他们应得的尊
重，很快就会让他们士气低落，然后你就很难留住具有本土市场上
热门技能的人才。
总的来说，现在整个测试业界已经相对成熟、文明有礼了，测试人
员变得更能与人“和睦共事”。最有经验的测试人员会同情地拍拍你
1821
---
## Page 1823
的肩膀说：地球人都知道事情不仅仅是发现问题那么简单。他们也
会充分理解、全力支持你的决定：问题A、B、C可以不解决了，不
会有人就此激动万分大发雷霆的。实际上，拥有多年工作经验的测
试人员会说出你所喜闻乐见的意见，因为他们从这家公司的项目经
好的质量结果。但是需要记住，他们之所以肯牺牲问题A、B、C，
很可能是为了说服你解决更严重的问题D和E。大多数测试人员私底
下希望你解决他们找到的所有问题，测试人员很明显会偏向于把问
题都解决掉，他们看见出错的东西，就想改进它们。想想吧，你真
的希望测试人员不这么想吗？
一般来说，经验丰富的测试团队能用漂亮的包装纸（词汇）和丝带
（对于问题的理解）来呈现一个缺陷，过了好一阵你才会意识到自
已收到的是一大堆恶心的牛粪。他们也不过是转赠而已，是你先给
了他们这样的东西，不知何故你给他们的时候没有发现这玩意儿真
的是相当臭。他们用礼貌的政客语言跟你讲话，这跟在你耳朵听不
到的场合（如在牧场跟其他牛仔侃起大山时）说的话可是完全不同
的。他们在痛苦的经历中学到，与其共事的其他领域的“家伙"是不
能真正欣赏他们这种幽默和乐趣的：在地里系统全面地搜寻牛粪，
然后用系着大红蝴蝶结的漂亮彩盒子装起来送给项目组...
搜寻软件毛病（缺陷）很像寻宝之旅。缺陷通常是藏起来的，要找
到它们需要同时具有逻辑、技术和直觉（或者说运气）。很多测试
人员都很喜欢谜题，这并非偶然。他们就喜欢搜寻和发现东西。寻
宝令人兴奋，发现一个错误（或者说答案）是终极动力。当测试人
员发现缺陷之日，就是他们赚取酬劳之时。在他们看来，那意味着
最终用户不会发现的问题多了一个，并发团队改进产品的机会多了
一个，公司的风险因素少了一个。找到一个缺陷就是一个值得欢呼
雀跃的意外收获。并发团队或管理层认为是令人不爽、厌恶、沮丧
的没解决的问题，对测试人员来说却是美妙的事物，是理藏的宝
藏，是达布隆金币。
不同的测试人员为搜寻缺陷做着不同方面的准备。他们的准备工作
取决于你的环境和研发方法，一些准备工作源自个人偏好，他们可
能提前并始写测试用例，也可能从一个笔记列表入手。但是不管技
术方面怎么样，有些事情是各种技术都共通的。
他们要阅读一切帮助了解测试目标的资料，要问问题一很多很多
的问题，一直问到他们满意觉得足够了解该应用程序为止，然后他
1822
---
## Page 1824
们要决定如何最好地进行测试并制定一个计划。这个计划也许很正
规，也许只在他们的脑子里，但大多数测试人员在开始测试之前就
知道他们想要检查什么，在开始实验的时候也大致知道系统应该是
什么样以及如何工作。
这就是技术、培训、经验发挥作用的时候了。一个受过培训、经验
丰富的测试人员总是比缺乏培训、经验不足的人找到更多的错误，
这与智力无关，只是缺乏指导和学习。这也不是说新人就会一无所
获，他们也能发现一些东西，但是经验丰富的测试人员知道哪里容
易发现缺陷，什么容易出问题，他们还从经验中学到在类似的情况
下哪种技术曾成功地帮他们发现缺陷。一个测试人员是否受过"正规
的"培训（边界分析等），或敏捷技术培训（启发式、游历式等），
或者两者都学过，并不那么要紧。一旦测试人员学会阅读字里行间
暗藏的玄机，观察显而易见之外的事物，询问一针见血的问题，以
及眼界的扩展，你就成为了一名真正的测试强人，通过继续学习和
掌握新的工具，你的力量将随着职业生涯不断增强。
聪明的项目组懂得利用上述所有的知识和直觉。有经验的项目经理
通常在项目早期就让测试人员参与进来，这可不是空虚寂寞，想找
人来陪着开会。他们希望这些测试专家在流程早期向他们发问，这
样可以更快更容易更廉价地消除差异。他们希望开发人员注意测试
人员要测试的方面以便开发出更好的代码。测试人员的这种能力经
常帮助项目组在设计瑕变成缺陷以前就发现出来。
不夸张地说，数十年前就有关于测试人员角色的争论。一些人认为
测试人员的角色是“保证质量”，如果有人能决定到底“质量”指什
么，那么这也不错；另一些人认为他们的角色是通过训练并发人员
寻找缺陷帮助他们编写出更好的代码一—开始编写的时候就不存在
错误的编码：还有一些测试专家集中精力研究为何以及如何找到缺
陷：在不同环境下寻找缺陷所涉及的策略、技术和术语。所有这些
说法都很有趣的，在某种意义上也都是对业界有益的。
但是，从本质上来说，测试的意义就是发现缺陷。测试人员通过向
项目组和管理层展示缺陷、问题或瑕症来“保证质量”，进而帮助他
们做出更好的决策；他们通过向开发人员展示其代码中的错误，使
其知错就改引以为戒，进而帮助他们改进工作：他们学习新的策略
和技术以便发现更多（或者更重要的）缺陷，他们把工作归类到新
的策略里，如游历式，进而帮助其他人发现缺陷。如果在测试过程
1823
---
## Page 1825
中没有发现（或者只发现了很少的）错误，那么这也是重要的信
息。
不过所有的测试人员都会告诉你，缺陷是存在的，然后缺陷就真的
存在了。一般来说，让事情变得好玩的并不是缺陷的数目。比如一
个测试人员可以在大的网站应用程序中发现上千个表面错误，什么
是表面错误呢？它就是拼写错误，给用户看的文本有语法错误，图
标上颜色不对，或者屏幕上有东西位置放得不对。
测试人员比其他任何人都讨厌这类错误，特别是当他们发现千方亿
个（在测试领域这就是“许多”的意思）这种错误的时候。记录下这
类错误比发现它们的时间还要长，而且它们难免是低优先级的错
误。从积极的一面来看，它们一般易于解决，很快就被修正好了。
你可能不清楚究竞有谁在乎这些表面错误，但是在IT领域工作过一
段时间的人可以告诉你，某个应用程序的最终用户可能会对你觉得
微不足道的问题深切关注，也许这跟称为“烦恼因素”的东西有点关
系。当然，字段的标题或仅供参阅的文本里的拼写错误可能当时并
不会让人太不爽，项目组的所有人也都同意其严重级别大致跟一点
小污垢相当。但是对于每大要看两千遍的用户来说，“烦恼因素"是
非常高的。项目组经常不能理解一个从功能上来看很小的问题为什
么会是最终用户的大难题。让我们来看一个导航的例子一—在屏幕
上做简单的切换标签页的动作，如果现在完成一个功能要比以前多
花25%的时间，或要多敲三下键盘，你可能就会触及最终用户的利
益。他们的工作、奖金或工作组的成果有可能是他们评估流程中参
考的一种标准。如果你的改动让他们的成果减少了，他们当然有理
由认为这个问题是紧急的。
所以测试人员报告他们发现的一切东西，其中经验丰富的人员会根
据其理解来报告严重程度，但一般来说不要试图预测业务优先级。
他们理解中的业务优先级通常就像开发团队理解的一样，是不太完
整的，并不是基于用户的个人体验做出的。有时候，约束自己不要
“为用户说话”可能会灌没个人的意见。经常有用户愿意“将就"使用
有严重错误的代码，却在最后一刻强道要求修改或者添加看起来并
不重要的东西。你能怎么说呢？这是他们的决定。在这种情况下你
能给测试人员的唯一建议就是随它去吧。
如果最终用户愿意采用折中的办法来应付严重的问题，那是他们的
决定。想要预测他们想要什么和不想要什么一般是不太现实的。测
试人员的工作是寻找、发现、报告，而不是用像神一样的能力去评
1824
---
## Page 1826
判，测试人员应该随心所欲地提供他们的专业意见；事实上，项目
组的所有人都应该随心所欲地提供专业意见。不过，最终需要权衡
对用户影响的人，还是用户自己。对于产品是否达到发布标准的争
执意见，需要上开到公司管理层，管理层的一部分工作就是为公司
评估风险、做出重大决策。如此说来，测试人员就应该是（通常实
际也是如此）偏向于改掉缺陷的。
业界有一个令人遗憾的现实，那就是测试人员不将他们发现的所有
错误报告出来。原因可能有很多，但最常见的是他们觉得报告某一
种或某一类错误没有意义，因为反正都不会被解决的。这是从实践
中“学"来的，你通常会发现有这类态度的测试人员不抱幻想、厌
倦、愤世嫉俗、对工作不感兴趣。他们报告缺陷的兴趣和热情已经
被工作环境慢慢消磨掉了。另一个原因也许是他们相信从政治上和
实际上来说，报告他们发现的一切东西是不“聪明"的，他们应该只
报告那些公司在乎的东西。那么，如果公司看不到整个大局，怎么
知道在不在乎呢？每个人都明白很多错误是不能（或者从财务的角
度来说不应该）在产品发布前解决的。成功项目管理的“艺术和工
艺”的一个要素是对推迟和解决哪些缺陷做出正确的决策。比如，项
目组决定解决14个缺陷，推迟另外32个。但是测试人员选择不报告
324个缺陷，因为开发团队“从不解决"字段错误，这意味着项目经理
和上层的管理者正在根据错误、不全面的信息作决策。在这个例子
里，用户界面就不能在万众瞩目的黄金时段隆重登场。
另外，就算是在一个并不解决某类错误的公司，报告每个错误也可
能会最终改变公司的政策（或称之为"一直实行的陈规”）。如果一
个测试人员报告了40个错误，一个都没解决，应用程序就发布了，
然后用户以紧急的优先级报告同样的错误并要求尽快地解决它们，
那么开发团队和项目经理以后就会开始注意这类缺陷。不过总的来
说，报告表面错误很耗时间，大多数测试人员对此提不起兴趣，他
们这么做只是因为这么做才能提供一个完整和准确的应用程序情况
的大局，也因为这些错误可能对最终用户来说尤为重要。
那么什么样的缺陷是让测试人员不杜此生呢？那就是滩以处理的缺
陷：会严重影响最终用户进行工作的复杂错误：会严重影响某些后
续操作的微妙错误；让应用程序瘫痪的错误。（“瘫痪”是测试领域
的又一个“科学"术语，表示就要像死鱼一样肚皮朝上了。）为了理
解“恶心"错误的实质，我们需要了解一些开发流程。
1825
---
## Page 1827
一个典型的图形化用户界面、用户界面或屏幕上的错误一般是某种
失败的结果，要不就是有人漏掉了什么东西，或误解了用户的需
求，或错误地解释了用户需求，或只是拼错了单词，这种错误通常
很容易发现，很容易再出现，也很容易解决。
不过除此以外，事情变得复杂而有趣。并发人员经常在他自已的一
块代码自留地里干活，那部分代码可能会被其他很多代码调用，提
供数据给其他的模块、应用程序或某数据库。考虑到在开发人员写
代码的时候，即将与之交互的其他代码也在开发中，这就意味着为