Fig. 5. Early reCAPTCHA.
(a) Original image
(b) Reconstruction
Fig. 6. Yandex Captcha.
Yandex scheme (Figure 6). As the largest Russian search
engine in the world, Yandex uses its Captcha in user password
recovery. This is a hollow Captcha, and has never been broken
in the literature. Gao et al’s attack [13] successfully broke a
number of hollow Captchas, but it was not tested on the Yandex
scheme. We implemented their attack, but it failed to break the
Yandex scheme in our experiments, for the following reasons.
Broken contours are heavily used in this design, and so are
thick intersecting interference arcs (i.e., those that cut through
characters). Both are defence methods recommended by [13]
to defeat their attack; these mechanisms make it hard to extract
character strokes from hollow Captchas.
In contrast, our attack reported in this paper achieves a
success rate of 7.8% on reCAPTCHA and 2.2% on the Yandex
7
scheme. The average attack speed is 8.06 and 15.5 seconds,
respectively. Our attack achieved a lower success rate on
the older reCAPTCHA than on its current version; but the
latter has much better usability, as shown in [6]. The older
reCAPTCHA is rarely used now, probably due to its usability
concerns.
The most recent work by Google [15] achieved a much
higher success for attacking the old reCAPTCHA version
than we do. However, they used millions of training samples,
whereas we used only 500. Also,
their approach requires
sophisticated deep-learning algorithms, advanced distributed
computing infrastructure, and computers with powerful CPUs
and huge memory. Moreover, it is unclear how effectively their
approach will work on other Captchas.
We also test our attack on a hard Yahoo! scheme (see
Figure 7), which was the hardest among all the schemes broken
by [4]. Our attack achieved a success rate of 9.2%, better than
the result (5.33%) reported in [4]. Note: as will be compared
later, our attack is also much simpler than theirs.
C. A Comparison with Prior Art
The series of works by Yan and El Ahmad [2, 24, 25] lead
to methods like pixel counting, histogram analysis, and CFS.
These methods are often used as building blocks in successful
attacks, but when used alone, only occasionally constitute a
successful attack.
Decaptcha, proposed in [5], claimed to be a generic attack,
and it works as follows. Decaptcha uses a ﬁve-stage pipeline:
preprocessing, segmentation, post-segmentation, recognition,
and post-preprocessing. In each stage, various techniques were
used for different Captchas. For example, in preprocessing
stage, algorithms such as anti-pattern methods and Markov
Random Field algorithm are used to de-noise a Captcha. In
the most critical segmentation stage, Decaptcha ‘attempts to
segment the Captchas using various segmentation techniques,
the most common being CFS which uses a paint bucket ﬂood
ﬁlling algorithm’ [5]. Combining a variety of algorithms and
methods as “lego bricks” is a key feature of Decaptcha –
it follows the very toolbox approach. On the other hand,
Decaptcha failed to break the early reCAPTCHA, whereas our
attack can break it. The attacks implemented by Decaptcha
cannot break hollow Captchas, either; but ours can.
In December 2013, a startup company Vicarious [22]
claimed in a video that they designed a method to break a
number of Captchas. Since they revealed no technical details, it
is impossible to determine their work’s validity, and impossible
to judge whether their method is similar to ours or how it
differs. Also, they claimed success only on reCAPTCHA, Ya-
hoo!, Paypal and several (very simple) Botdetect schemes. Our
target schemes are a much wider range and more representative
collection of high-proﬁle Captchas.
Gao et al’s attack on a family of hollow Captchas [13] is
the ﬁrst work of solving Captchas in a single step that uses ma-
chine learning to attack the segmentation and the recognition
problems simultaneously. They ﬁrst extract character compo-
nents from hollow fonts, and then try various combinations
with a recognition engine. However, their method only works
on hollow Captchas, as their success in separating connected
characters vitally relies on intrinsic properties of hollow fonts.
Their method cannot separate non-hollow characters that
connect with each other, and thus cannot break non-hollow
Captchas. Moreover, even for hollow schemes, their method re-
quires extensive and sophisticated pre-processing, whereas our
attack does not require any traditional pre-processing except
binarisation, a trivial process that converts an image from color
or gray-scale to black and white. Their recognition method is
similar to ours, but our graph search algorithm is signiﬁcantly
improved, compared to theirs (a detailed comparison is in
Section VI). Overall, our attack is much simpler than theirs, but
with a much wider applicability, e.g. working on both hollow
and non-hollow Captchas. Note: among all the 10 schemes
our attack has broken in this paper, only two of them (Yahoo!
and QQ, both hollow schemes) can be broken by the attack
proposed in [13].
Bursztein et al [4] is the second attack that addresses
segmentation and recognition simultaneously, and it has broken
multiple Captchas. This attack analyses all possible ways of
segmenting a Captcha, and thus it is a brute-force approach in
essence. It works as follows.
As illustrated in Figure 7, they ﬁrst scan the top pixels of
the Captcha to generate a curve, and scan the bottom pixels to
generate another curve. Then they identify inﬂection points by
examining the second derivative of the curves. Each potential
cut or segment is constructed by connecting the inﬂection
points - one from the top, and one from the bottom. This
method produces an exponential number of segments or cuts.
Fig. 7. The attack introduced in [4].
Then they use various heuristics to reduce the number of
cuts, like removing all the cuts that have an angle larger than
30◦, examining the ratio of white pixels to black ones to
eliminate cut lines that pass through too many black pixels,
comparing pixel intensities of the left and right boundaries
to estimate a transition between two letters, and ﬁnding cuts
compatible with starting positions.
Next, they use a classiﬁer to pick the “best shards” among
the remaining segments by manually assigning higher weight
to pixels near the centre of the segment, and to darker pixels.
Finally, ensemble learning is used to identify among each
sequence of segments the best possible one as the result.
8
As the computational cost of their attack “increases expo-
nentially with the length of the Captcha, to the point of becom-
ing prohibitive on long Captchas”, they also resort to various
optimisation strategies to tweak recognition algorithms, e.g. by
considering a window of two letters at a time, to improve the
trade-off between speed and accuracy. To improve recognition
results,
they also apply reinforcement learning, i.e. asking
human to manually identify and annotate segments that have
been misclassiﬁed.
Their attack is signiﬁcantly more complex than ours, and
we do not need any of the heuristics they used, as well as the
human efforts they relied on.
VI. DESIGN CHOICES
In this section, we discuss various design alternatives, and
show that our attack is optimal among these design choices.
A. Graph Search Algorithms
We ﬁrst compare our graph search algorithm (Section 4)
with two related algorithms.
Gao et al. algorithm [13] is based on Depth-First-Search
(DFS). It starts from node 1 in the graph and explores along
each branch until the path length reaches the Captcha string
length before backtracking. All paths of a length equaling to
the Captcha string length in a graph are traversed using DFS,
and then the path ending at n+1 with the largest conﬁdence
level sum is selected. This DFS algorithm is not optimal,
since it explores paths that can’t reach the right edge of the
graph, and re-explores previously visited nodes after their best
following partition has been discovered.
Integer partition algorithm is another novel graph search
algorithm that we conceive for our attack. The rationale is the
following. Assume that m is the Captcha length, our task is
to ﬁnd the most likely way of forming m characters using n
components, i.e., ﬁnding the best partition. This task is similar
to the classical ‘integer partition’ problem: in number theory
and combinatorics, a partition of a positive integer n, is a way
of representing n as a sum of m positive integers. We ﬁrst
work out all partitions that divide integer n into m parts, then
select the partition with the largest conﬁdence sum.
Compared with the DFS graph search,
this algorithm
reduces the search space by skipping paths that do not end
at node n+1. However, it requires working out all partitions
that divide n into m parts, which is expensive.
Our new algorithm introduced in Section 4 is optimized,
compared with both methods discussed above, for the follow-
ing reasons.
First, it prunes the graph to remove all redundant nodes,
and thus reduces the number of times we call the recognition
engine, and reduces the time consumption of our attack.
As it takes about 0.04 seconds to execute a single call to
the KNN in our experiment, if many possible combinations
require calling the KNN, the recognition time in total will
signiﬁcantly increase. On the other hand, after our graph
pruning, sometimes there remains only a single path, which
is exactly the optimal partition that we look for. Figure 11
shows such an example.
Second, our graph search adopts a dynamic programming
approach. It ﬁnds the optimal partition in only one traversal,
preventing re-exploring visited nodes.
Empirical evaluation. We implemented all the three algo-
rithms, and compared the results of our attack facilitated by
different search algorithms. Note: all the three algorithms can
handle Captcha schemes with a varied length.
With different search algorithms, our attack achieved the
same success rate. That is to say, the choice of search al-
gorithms does not have an effect on our attack’s success rate.
However, as shown in Table VII, the integer partition algorithm
improves the attack speed achieved by the old search algorithm
for each Captcha scheme. Our new DP search algorithm further
improves the attack speed signiﬁcantly; the ﬁgures in Table VII
include the time for graph pruning, and therefore this is a fair
comparison.
To sum up, both theoretical and empirical analyses in the
above suggest that our new graph search algorithm outperforms
both alternatives.
TABLE VII.
ATTACK SPEED VS. GRAPH SEARCH ALGORITHMS.
Average attack speed (Seconds)
Scheme
DP
search
Integer
partition
algorithm
Yahoo!
Baidu
reCAPTCHA 10.27
28.56
2.81
3.74
4.95
12.59
13.18
4.64
4.83
5.98
Microsoft
Amazon
Taobao
Wikipedia
QQ
Sina
Ebay
10.31
33.33
3.00
3.78
5.15
14.93
14.60
4.74
4.93
6.01
DFS
search
10.87
34.32
3.14
3.83
5.55
15.49
15.28
4.80
5.03
6.06
quality, Gabor ﬁlters with 4 directions achieves the best per-
formance. When fewer orientations are used, character pixels
along some directions will be missing. When more orientations
are used, character components become fragmented, and the
increased number of components will decrease our attack’s
speed and success rate. These are conﬁrmed by our empirical
results as shown in Table VIII.
TABLE VIII.
ATTACK RESULTS ON AMAZON CAPTCHA WITH
DIFFERENT ORIENTATION CONFIGURATIONS
Orientations
Success rate
Average attack
speed (Seconds)
3
4
6
8
20.8%
25.8%
9.2%
7.4%
12.25
14.32
21.55
30.01
C. Extracting Methods
2D Gabor ﬁlters [10] and steerable ﬁlter banks [12] can
extract texture features from an image at any direction. We
tested both for extracting character components in Captcha
images. We compared them with Log-Gabor ﬁlters in Table
IX. Log-Gabor ﬁlters are the best for our purpose.
TABLE IX.
A COMPARISON OF DIFFERENT FILTERS.
2D Gabor
Steerable ﬁlter
Log-Gabor
0
π/4
π/2
3π/4
B. Extraction Orientations
We tested our Gabor ﬁlters with different combinations of
D. Classiﬁers
extraction directions:
3 orientations: 0, π/3, 2π/3;
4 orientations: 0, π/4, 2π/4, 3π/4;
6 orientations: 0, π/6, 2π/6, 3π/6, 4π/6, 5π/6;
8 orientations: 0, π/8, 2π/8, 3π/8, 4π/8, 5π/8, 6π/8, 7π/8.
(a) 3 orientations
(b) 4 orientations
(c) 6 orientations
(d) 8 orientations
Fig. 8. Superimposition of extracted components.
Figure 8 shows a superimposition of the extraction results
achieved by each conﬁguration. Judged by the superimposition
9
We tested Support Vector Machine, Back-Propagation Neu-
ral Network, Template Matching and Convolutional Neural
Network (CNN, a multi-layer neural network doing deep learn-
ing and extracting features from training samples automatically
and efﬁciently) as a candidate for our recognition engine.
Among these classiﬁers, CNN achieved the fastest attack speed
and the best success rate. This result is consistent with the
comparison in [13].
We also compared the performance of KNN and CNN. As
shown in Table X, KNN achieved higher success rates on most
of the schemes than CNN, but CNN was faster most of the
time.
TABLE X.
ATTACK RESULTS BY KNN AND CNN.
Schemes
reCAPTCHA
Yahoo!
Baidu
Wikipedia
QQ
Microsoft
Amazon
Taobao
Sina
Ebay
Success rate
Speed(s)
CNN
KNN
KNN
77.2% 38.4% 10.27
28.56
5.0%
5.2%
2.81
44.2% 46.6%
3.74
23.8% 20.4%
56.0% 22.4%
4.95
16.2%
12.59
8.6%
25.8% 20.2% 13.18
4.64
23.4% 20.4%
4.83
9.4%
4.4%
58.8% 32.6%
5.98
CNN
10.19
23.81
2.21
2.90
4.61
6.64
8.68
5.25
5.21
5.50
VII.
IS THERE A DEFENCE?
In principle, some countermeasures may circumvent our
attack to an extent, by mitigating key steps of the attack.
Mitigating component extraction by overlapping, i.e.
make adjacent characters overlap to prevent segmentation,
or by rotating, i.e. rotate characters to some certain angles,
making some strokes of adjacent characters connect or overlap.
Clear directional information is important for our direc-
tional ﬁltering. If characters are connected or overlapped too
much,
the connected strokes will make it harder for our
component extraction to work. Rotation can have a similar
impact on our attack.
Mitigating partition and recognition by a variety of
methods, such as increasing the length of Captcha or adopting
a varied length, and using a large alphabet set. These methods
will make the solution space larger,
likely resulting in a
decreased attack speed and success rate. Warping characters
and introducing noise arcs will increase recognition difﬁculty.
We empirically evaluate some most promising countermea-