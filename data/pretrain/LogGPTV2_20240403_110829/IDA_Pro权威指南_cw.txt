TheHyper:01013B4D                dd 24242424h  
TheHyper:01013B51                dd 0A9A4285Dh           ; TAG VALUE  
TheHyper:01013B55  
TheHyper:01013B55 ; ============ S U B R O U T I N E =========================  
TheHyper:01013B55  
TheHyper:01013B55 ; Attributes:  bp-based frame  
TheHyper:01013B55  
TheHyper:01013B55 sub_1013B55    proc near      ; DATA XREF: TheHyper:0103AF7A?o  
TheHyper:01013B55  
TheHyper:01013B55 var_8          = dword ptr -8  
TheHyper:01013B55 var_4          = dword ptr -4  
TheHyper:01013B55 arg_0          = dword ptr  8  
TheHyper:01013B55 arg_4          = dword ptr  0Ch  
TheHyper:01013B55  
TheHyper:01013B55             ➋ push    ebp  
TheHyper:01013B56                mov     ebp, esp  
TheHyper:01013B58                sub     esp, 8  
TheHyper:01013B5B                mov     eax, [ebp+arg_0]  
TheHyper:01013B5E                mov     [esp+8+var_8], eax  
TheHyper:01013B61                mov     [esp+8+var_4], 0  
TheHyper:01013B69                push    4  
TheHyper:01013B6B                push    1000h
其中，从➊处开始的代码被反汇编成 HyperUnpackMe2字节码，而➋处以后的代码则以 x86代码显示。
Hex-Rays 预料到了同步显示本机代码和字节码的功能，并在 IDA 5.7 中引入了自定义数据类型和格式。如果 IDA 的内置格式化选项无法满足你的需求，这时就可以使用自定义数据格式。为格式指定（使用脚本或插件）一个菜单名，并指定一个执行格式化的函数，就可以注册新的格式化功能。为某个数据项选择自定义格式后，每次需要显示该数据项，IDA 都会调用格式化函数。如果IDA 的内置数据类型并不足以表示你在特定二进制文件中遇到的数据，这时就需要用到自定义数据类型。与自定义格式一样，自定义数据类型也使用脚本或插件进行注册。Hex-Rays 示例注册了一个自定义数据类型来指派虚拟机字节码，并通过使用一种自定义数据格式将每个字节码显示为一条指令。这种方法的缺点在于，它需要你定位每条虚拟机指令，并明确更改其数据类型。使用自定义处理器扩展，将单个值自动指派为虚拟机指令可发现每条可到达的指令，因为IDA会推动反汇编进程，且处理器扩展会通过它的 custom_emu实现来发现可到达的新指令。
21.5 小结
当前，恶意软件大多是模糊程序。因此，如果你希望研究一个恶意软件样本的内部运行机制，几乎可以肯定，你需要完成某种类型的去模糊任务。无论你是采用调试器辅助的动态去模糊方法，还是不想运行可能恶意的代码，而选择使用脚本或模拟对二进制文件进行去模糊处理，你的最终目标都是生成一个可以被完全反汇编、正确分析的去模糊二进制文件。多数情况下，最后的分析都要由IDA 之类的工具来完成。鉴于此（即使用 IDA 进行分析），尝试从头至尾使用IDA 似乎有一定的道理。本章讨论的各种技巧旨在说明 IDA 除生成反汇编代码清单以外的其他许多功能。在第25 章中，我们将再次讨论模糊代码，并说明如何将IDA 的内部调试器作为一个去模糊工具。
第22章 漏洞分析
在开始本章讨论之前，需要澄清一个问题：IDA 不是一个漏洞发现工具。我们说过，这真是一种解脱！在一些人心中，IDA 似乎具有神奇的力量。许多人似乎认为，仅仅用IDA 打开一个二进制文件，就能揭示宇宙中的所有秘密；IDA 会自动生成注释，清楚地解释恶意软件的行为；漏洞将会以红色突出显示；如果你在某段使用复活节彩蛋激活的晦涩代码上右击鼠标，IDA 将自动生成入侵代码……。
虽然IDA 确实是一个功能非常强大的工具，但是，如果没有坐在计算机前的聪明用户（以及一组方便的脚本和插件），它只不过是一个反汇编器/ 调试器而已。作为一种静态分析工具，它只能帮助你确定软件漏洞的位置。最终，你需要运用自己的技能，确定 IDA 是否能够使你更容易地搜索到漏洞。根据我们的经验，IDA 并不是查找新漏洞的最佳工具1
 ，但是如果与调试器结合使用，一旦我们发现一个漏洞，它将成为一个最佳工具，可以帮助我们开发破解程序。
1. 通常，与静态分析相比，使用模糊测试往往能够发现更多的漏洞。
在过去几年中，IDA 已经开始在发现现有漏洞时扮演一个新角色。起初，搜索现有漏洞的做法似乎并不寻常，但那是因为我们没有问这个问题：对于这些漏洞，我们到底了解哪些信息？了解这些信息的人又是谁？在闭源、二进制占绝对主导的软件领域，供应商经常发布软件补丁，但并不详细说明这些补丁的作用，以及为什么发布这些补丁。通过对一款软件打过补丁的新版本与未打补丁的旧版本进行差异性分析，我们可以隔离出二进制文件中发生变化的区域。假设这些变化不会无故发生，这种差异性分析技巧能够为我们提供启示，确定之前易受攻击的代码序列。由于搜索范围明显缩小，掌握必要的技能，人们就能够开发出一个示例破解程序，用于未打补丁的系统。实际上，由于微软在发布补丁方面众所周知的“补丁星期二”周期，每个月都有大量安全 研究人员准备静下心来，进行一次差异性分析。
有许多专门讨论漏洞分析的书2
 ，在一本专门介绍 IDA 的书中，仅仅一章内容不可能全面描述漏洞分析这一主题。我们将要做的是假定读者熟悉软件漏洞的一些基本概念（如缓冲区溢出），讨论如何使用 IDA 搜索、分析这些漏洞，并最终为这些漏洞开发出破解程序。
2. 例如，参见Jon Erickson 的Hacking: The Art of Exploitation, 2nd Edition（http://nostarch.com/hacking2.htm
 ）。
22.1 使用IDA 发现新的漏洞
漏洞研究人员采用许多不同的方法发现程序中的新漏洞。如果源代码可用，我们可以利用任何数量的自动化源代码审核工具确定一个程序中可能的问题区域。许多时候，这些自动化工具只能发现最明显的漏洞，而要发现隐藏更深的漏洞则需要进行大量的手动审核。
有大量对二进制文件进行自动审核的工具，它们提供许多与自动源代码审核工具相同的报告功能。二进制文件自动分析的一个明显优势在于使用它不需要访问应用程序源代码。因此，它们可以对闭源、仅二进制的程序进行自动分析。Veracode1
 开始提供一项基于订阅的服务，用户可以提交二进制文件，由 Veracode 的专用二进制文件分析工具进行分析。虽然这些工具不能保证能够发现一个二进制文件中的部分或全部漏洞，但是这些技术使得普通用户也能够利用二进制文件分析工具，从而获得一定程度的自信心，自信他们使用的软件没有漏洞或后门。
1. 参见http://www.veracode.com/
 。
无论是在源代码还是在二进制层次上进行审核，基本的静态分析技巧包括：审核问题函数（如strcpy
 和sprint
 ）的使用，审核动态内存分配例程（如 malloc
 和VirtualAlloc
 ）返回的缓冲区的用法，审核如何处理通过 recv
 、read
 、fgets
 和许多其他类似函数接收的用户提交的输入。在数据库中找到这些函数调用的位置并非难事。例如，为追踪对 strcpy
 的所有调用，我们可以采取以下步骤。
找到strcpy
 函数。
将光标放在strcpy
 标签上，然后选择View▶Open Subviews▶Cross References，显示strcpy
 函数的所有交叉引用。
访问每一个交叉引用并分析提交给 strcpy
 的参数，确定是否可以实现缓冲区溢出。
步骤3需要你进行大量代码分析和数据流分析，以了解该函数调用的所有可能输入。希望这个任务不太复杂。而步骤1看起来相当简单，实际上需要你费点神。要想找准 strcpy
 的位置，只需要使用 Jump▶Jump to Address 命令（G），并输入strcpy
 作为跳转目标地址即可。在Windows PE二进制文件或静态链接的 ELF 二进制文件中，你通常只要这样做就可以了。但是，对于其他的二进制文件，你可能需要采取其他的步骤。在动态链接的 ELF 二进制文件中，使用 Jump命令并不能直接将你带到你想要的函数，但会将你带到 extern
 节（参与了动态链接过程）中的一个条目。extern
 节中的strcpy
 条目的IDA 表示形式如下所示：
➊  extern:804DECC          extrn strcpy:near     ; CODE XREF: _strcpy ↑ j  
    extern:804DECC                                ; DATA XREF: .got:off_804D5E4 ↑ o
使问题更加复杂的是，这个位置看起来似乎根本就不叫 strcpy
 （它的确是叫 strcpy
 ，但这个名称被缩排），对这个位置的唯一一个代码交叉引用（➊）是一个以_strcpy
 函数为源头的跳转交叉引用，同时，这个位置还有一个以.got 节为源头的数据交叉引用。实际上，引用的函数叫做.strcpy
 ，在上面的代码段中你根本看不到这个名称。在这个例子中，IDA 用下划线替换了点字符，因为在默认情况下，IDA 将点视为无效的标识符字符。双击代码交叉引用，我们将看到程序中strcpy
 的过程链接表（.plt
 ）条目，如下所示：
.plt:08049E90 _strcpy    proc near               ; CODE XREF: decode+5F↓ p  
.plt:08049E90                                    ; extract_int_argument+24↓p ...  
.plt:08049E90            jmp     ds:off_804D5E4  
.plt:08049E90 _strcpy    endp
如果我们访问数据交叉引用，最后我们将看到 strcpy
 对应的.got
 条目，如下所示：
.got:0804D5E4 off_804D5E4     dd offset strcpy        ; DATA XREF: _strcpy↑ r
在.got
 条目中，我们遇到另一个以.plt
 节中的.strcpy
 函数为目标的数据交叉引用。实际上，跟踪数据交叉引用是由extern
 节导航到.plt
 节最为可靠的方法。在动态链接的ELF 二进制文件中，函数通过过程链接表间接调用。现在，我们已经到达.plt
 段，我们可以集中所有对_strcpy
 （实际上是.strcpy
 ）的交叉引用，并开始审核每一个调用（在这个例子中至少有两个函数调用）。
如果我们有一组常用的函数，并且希望找到调用它们的位置并审核，那么这个过程可能会变得相当烦琐。这时，开发一段 IDC 脚本，使用注释自动定位和标记我们感兴趣的所有函数调用，会对我们有所帮助。利用注释标记，我们可以进行简单的搜索，由一个审核位置移动到另一个审核位置。这个脚本的基础是一个函数，它能够可靠地定位另一个函数，以便我们能够定位所有以它为目标的交叉引用。基于从前面的讨论获得的对 ELF 二进制文件的理解，代码清单 22-1 中的IDC 函数以一个函数名称为参数，返回一个适合交叉引用迭代的地址。
代码清单 22-1 查找一个函数的可调用地址
 static getFuncAddr(fname) {  
    auto func = LocByName(fname);  
    if (func != BADADDR) {  
       auto seg = SegName(func);  
       //what segment did we find it in?  
       if (seg == "extern") { //Likely an ELF if we are in "extern"  
          //First (and only) data xref should be from got  
          func = DfirstB(func);  
          if (func != BADADDR) {  
             seg = SegName(func);  
             if (seg != ".got") return BADADDR;  
             //Now, first (and only) data xref should be from plt  
             func = DfirstB(func);  
             if (func != BADADDR) {  
                seg = SegName(func);  
                if (seg != ".plt") return BADADDR;  
             }  
          }  
       }  
       else if (seg != ".text") {  
          //otherwise, if the name was not in the .text section, then we  
          // don't have an algorithm for finding it automatically  
          func = BADADDR;  
       }  
    }  
    return func;
 }
利用得到的返回地址，现在我们可以追踪任何我们想要审核其用法的函数的引用。代码清单22-2 中的IDC 函数利用前一个例子中的 getFuncAddr
 函数获得一个函数地址，并为对该函数的所有调用添加注释。
代码清单 22-2 标记对指定函数的调用
    static flagCalls(fname) {  
       auto func, xref;  
       //get the callable address of the named function  
➊     func = getFuncAddr(fname);  
       if (func != BADADDR) {  
          //Iterate through calls to the named function, and add a comment  
          //at each call  
➋        for (xref = RfirstB(func); xref != BADADDR; xref = RnextB(func, xref)) {  
             if (XrefType() == fl_CN || XrefType() == fl_CF) {  
                MakeComm(xref, "*** AUDIT HERE ***");  
             }  
          }  
          //Iterate through data references to the named function, and add a  
          //comment at reference  
➌        for (xref = DfirstB(func); xref != BADADDR; xref = DnextB(func, xref)) {  
             if (XrefType() == dr_O) {  
                MakeComm(xref, "*** AUDIT HERE ***");  