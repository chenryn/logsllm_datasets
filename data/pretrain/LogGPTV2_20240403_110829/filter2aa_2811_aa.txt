华山杯 writeup 
队伍名：Nu1L 
Web 题目： 
Web1 怎么在 Web 上 Ping 呢 
进去发现 flag.php，访问不到直接抓包访问，之后发现在 flag.php 中存
在提示 key：DDoS。。。研究一下午不懂，后来在 freebuf 找到一篇文章
http://www.freebuf.com/articles/network/74173.html 
构造
html 访问，fiddler 抓包
Flag : cCFVY1Yjs5VQ9X2GCG4v6IdpkaKBEsbM 
Web2 社工库查询 
放西瓜大神好吗。。。。。。天真的以为真的是社工 QQ。 
Burp 爆破到 10000，发现出来了提示： 
Intavl，取整函数，尝试输入 10000.1 就可以得到 flag： 
Web3access 注入。 
一开始以为是 sqlmap 能爆破出来。。。然而太天真了。。一开始就是猜猜
猜没思路，突然发现 access 注入有一种偏移注入，然后就秒破。。真的好简单
- -怪不得大牛都秒了。 
找到一篇文章，http://www.2cto.com/Article/201212/179284.html，然
后就猜字段数吧: 
http://218.245.4.113:8888/web03/ca55022fa7ae5c29d179041883fe1556/ind
ex.asp?id=886 union select 1,2,3, 4,* from admin as a inner join 
admin as b on a.id=b.id 
Md5 解下：469e80d32c0559f8，发现时 admin888。直接提交通过 
Flag：469e80d32c0559f8 
Web4 有 WAF 该怎么注入呢 
白天注入的时候各种绕不过去。。。后来想到 xd 比赛的那个函数 lpad 发
现可以执行。。。但是不知道暴啥。。。晚上的时候发现什么都没过滤。。。。
于是翻了翻以前 nsctf 的 writeup，找到了一个盲注语句。。。然后就是
brupsuite 爆破了。。想写本来以为 flag 没几位。。最后发现好长啊。。。。 
(ord(substr((select(select(group_concat(table_name))from(information
_schema.tables)where(table_schema=database()))),1,1))>100)  
先爆表名发现是 flag 表，之后爆字段。。发现是 flag。。。所以直接
(ord(substr((select(flag)from(flag)),i,1))>j) 
………手动爆表 20 分钟
得到完全没有意义的字符串 
所以 flag 第一位是 chr(106) 
Flag:jkschvkjasmznxvkjahsdasdxzcqwe 
Web5 XSS??? XSS!!! 
第一节 xss 挑战赛的原题啊。。。http://drops.wooyun.org/papers/894  
"onblur=outerHTML=URL//# 
尝试提交不行，找了个不可见字符，改成 
"OnbLur=outerHTML=URL%0b# 
弹窗成功，win7+ie8 
Web6 Python-Web： 
题目很纠结，测试发现是 django 的 debug 模式。。。。 
尝试在 rest 下用 obj 构建链接，然后就可以了，开始我们引入的 model 是
exec 后来发现不存在，于是尝试引入同样可以执行 os 命令的 eval，利用
http://www.freebuf.com/articles/web/73658.html 上的讲解去执行 python
命令，发现 os.system 竟然不能用，不能写入文件。。。于是 help 了 os
    发现 listdir 同样可以列出目录，执行{"obj": "__builtin__", "method": 
"eval", "params": "[__import__('os').listdir('.'),1]"}发现目录，然后
多次测试，os.stat 一个文件尝试找 username 没有，password 是一串
*******************，后来包含了多个文件。。。发现在 debug 的 setting 信
息中直接有 flag。
Flag ： 31e262014a402b9f7d2dc9970cf39ca5  
网络取证 
网络取证 1 流量分析 1 
因为有的时候对于 ping 的检验很少，所以筛选出 icmp，查看 request 即
可发现每一个流量包有一个字符。 
然后得到 flag：S$curIty_I_L0V3_H@cK 
网络取证 2 扫雷 
将下载下来的压缩包打开发现是个 dmp 文件，用 windbg 打开，通过 lm 和.writemem
指令将 winmine.exe dump 出来，通过与不同系统版本的扫雷比较发现与 xp 系统下的
扫雷比较相似，经过比较发现在文件偏移 4A70 处有一段异或解密的 shellcode，将这
段 shellcode 所用到的数据提取出来写个脚本即可得到 flag 
脚本： 
#! /usr/bin/env python 
#coding=utf-8 
import sys, time, os 
key1 = 0x29b 
key2 = 0x1e 
key3 = 0x18 
key4 = 0x259 
l = [ 
0x4C, 0x05, 0x46, 0x05, 0x4B, 0x05, 0x4D, 0x05, 0x51, 0x05, 
0x19, 0x05, 0x1D, 0x05, 0x4C, 0x05,  
0x19, 0x05, 0x4B, 0x05, 0x4F, 0x05, 0x1A, 0x05, 0x48, 0x05, 
0x1B, 0x05, 0x48, 0x05, 0x1F, 0x05,  
0x1C, 0x05, 0x49, 0x05, 0x19, 0x05, 0x1F, 0x05, 0x12, 0x05, 
0x1F, 0x05, 0x1C, 0x05, 0x1C, 0x05,  
0x4C, 0x05, 0x49, 0x05, 0x1B, 0x05, 0x49, 0x05, 0x48, 0x05, 
0x4E, 0x05, 0x1D, 0x05, 0x12, 0x05,  
0x4C, 0x05, 0x4E, 0x05, 0x1C, 0x05, 0x1A, 0x05, 0x13, 0x05, 
0x57, 0x05, 0x2A, 0x05, 0x2A, 0x05 
] 
#print hex(key1 ^ key2 ^ key3 ^ key4) 
key = key1 + key2 + key3 + key4 
i = 0 
while i >8) 
    i += 2 
print ''.join(map(chr,l)[::2]) 
结果： 
网络取证 3 流量分析 2 
发现压缩包。然后将压缩包扣出来，发现需要密码。 
然而这并不是密码。。。。。。。 
然后发现 pass.txt，0rvWprrs0NOz9se9wLQ=，在线解密发现是乱
码。。。。。坑了好久，突然想起了小葵，然后试了下。果真= = 
解密后发现一个少了 png 头的文件，补全后得到 flag 照片： 
网络取证 4 Hack-Team 
不想说什么了。。坑。。。。 
挂载下镜像，然后提示梅花香自苦寒。。。。。默默想起强网杯，然后看
了下辉哥的 writeup——http://appleu0.sinaapp.com/?p=540，发现密码就是
meihuaxiangzikuhanlai。。。 
分理出一个 pdf，一个 word。 
然后试了好久都是说文件损坏，然而放到 mac 后。。。瞬间没爱了= = 
Flag{f6fdffe48c908deb0f4c3bd36c032e72} 
密码&算法 
密码算法分析 
100 分的题目这么坑。。坑的我都要哭了。。。昨晚上从凌晨 2 点 50 到 5
点，。白天一上午。。。直接废了。 
原理不难，其实就是一个映射，只是映射很繁琐。首先解三次 base64 和一
次莫斯，在解出培根密码，得到秘钥 HTBXPZIQWVURJSDMOKYAENCLFG。之后统计
出密文字符出现次数，[('O', 26), ('B', 25), ('G', 24), ('C', 23), ('T', 
22), ('L', 21), ('X', 20), ('Z', 19), ('R', 18), ('W', 17), ('Q', 16), 
('Y', 15), ('A', 14), ('I', 13), ('F', 12), ('J', 11), ('E', 10), 
('N', 9), ('D', 8), ('S', 7), ('M', 6), ('V', 5), ('U', 4), ('K', 3), 
('P', 2), ('H', 1)]
，然后根据典型密文推出明文密文对应关系。。。 
OBGCTLXZRWQYAIFJENDSMVUKPH  密文 
ETAONRISHDLFCMUGYPWBVKJXQZ  明文 
HTBXPZIQWVURJSDMOKYAENCLFG  秘钥 
然后发现明文密文秘钥都是 26 个字母各出现一次。如下: 
OBGCTLXZRWQYAIFJENDSMVUKPH  密文 
ETAONRISHDLFCMUGYPWBVKJXQZ  明文 
HTBXPZIQWVURJSDMOKYAENCLFG  秘钥 
ABCDEFGHIJKLMNOPQRSTUVWXYZ  字母表 
之后把明文按照 A->Z 的顺序排序，对应密文之后得到 
OBGCTLXZRWQYAIFJENDSMVUKPH  密文 
ABCDEFGHIJKLMNOPQRSTUVWXYZ  明文 
GSAWOYJRXUVQITCNPLZBFMDKEH  密文排序 
HTBXPZIQWVURJSDMOKYAENCLFG  秘钥 
ABCDEFGHIJKLMNOPQRSTUVWXYZ  字母表 
对应出如下规律： 
GSAWOYJRXUVQITCNPLZBFMDKEH  密文排序 
HTBXPZIQWVURJSDMOKYAENCLFG  秘钥 
hex(秘钥字母-‘A’)%2=0，秘钥转密文是+1  
hex(秘钥字母-‘A’)%2=1，秘钥转密文是-1 
之后就得到了 26 个映射关系。。。同样的方式。一比一对应密文，得到
flag 
LCHIKCDDQOYXEGGQ            密文 
DONTWORRYBEHAPPY            明文 
FPUKZEBWOSTVMGDHICQJNYLXRA  秘钥 
ABCDEFGHIJKLMNOPQRSTUVWXYZ  字母表 
所以 flag：DONTWORRYBEHAPPY 
图片隐写 1 
我第一个发现图片有问题的。。。为啥不给我加分
打开图片，发现在 jpg 后面有很多杂乱数据。。。提出来发现是一个去了
头的 rar。。。真是醉了。。。进去发现一大堆杂乱文件夹有东西还是加密
的。。。。只能看到一张图片。图片右键属性中有字符串。。base64 解密是乱
码想到那个流量分析的中文尝试中文解密得到密码四叶草安全。进去发现每个
文件都打不开，十六进制打开发现全是 01 序列。。。。想到了二维码，想到
appleU0 的那个图片隐写术，于是，按照文件夹顺序 000000,000001,000010 的
顺序提取。之后发现前面后面都是 0000000000000000000000000，然后发现一
行 37 个，一共 29 行，发现每行前四个后四个都是 0，删掉变成 29*29，去掉换
行变成空格，放入脚本跑出来二维码，扫描得到 flag 
Flag：X1@07Zu1Shu@1 
附脚本： 
#!/usr/bin/env python 
import Image 
MAX = 29 
pic = Image.new("RGB",(MAX, MAX)) 
str = 
"11111110010111110100001111111100000100001100000000010000011011101001
000111100100101110110111010000111101100101011101101110101010111100100
010111011000001000111110111110100000111111110101010101010101111111000
000001001101100010000000000011001110010010101101101000001110100010010
010010101110011100111110010010011111010010101111010111011000101010100
000010010110010010010111110110100010100001010010100011110010101100011
110110010101101011101100111001101100110100000001000010100101111100011
000000100000101010001111100010100100110010111011100100110110110010000
001011000101111110101101011110111101111111001000111111010100000000100
010011111100010001111111101110011011011010111001000001000001111001110
001001110111010000110011000111110100101110101110000100101100111101011
101010101011000100110000110000010011001000110001101010111111100101100
11111001000110" 
i=0 
for y in range (0,MAX): 
    for x in range (0,MAX): 
        if(str[i] == '1'): 
            pic.putpixel([x,y],(0, 0, 0)) 
        else: 
            pic.putpixel([x,y],(255,255,255)) 
        i = i+1 
pic.show() 
pic.save("flag.png") 
图片隐写 2 
打开发现一张大白(●—●)，然后进去 binwalk 跑一下发现另一张图片，
手动抠出来发现另一个大白(●—●)，然后发现是 tiff 的。重命名后纠结一下
想到 tiff 隐藏图层，本地 photoshop 打开之。。。发现 26 个隐藏图层。。每
个图层有 26*26 个英文字母。。。想到大白激活口令。。。统计一下，65 个逗
号 66 个数字。。。
据此推测是三个一组，所以 flag 应该是 22 组，之后就是组合问题了。。。
下午的时候尝试了几个没找到方法。。。晚上继续做。。。尝试所有之后找到
了 flag，每三个一组，第一组 19*9*10 代表 10 层第 19 列 9 行。。完全是倒序。
慢慢找，找到了 
flag：FlAgIsSlYeCaOWeLCoMYOu 
魔塔 AI 编写 
这是道算法题... 
刚开始理解错了，以为一次只能发一条指令呢... 
根据题目所给文件的描述，服务器端提供了一个吃东西升级打怪的游戏（￣工
￣lll），最终的目标是到达标有”Y”的点，于是就可以根据题目提供的地图
不断上楼吃东西，然后回到 1 层打 boss... 
脚本核心部分使用了 BFS 算法。 
脚本： 
import socket, sys, os, time, struct 
__author__ = 'Marche147' 
# connect to 
TARGET = '127.0.0.1' 
PORT = 22031 
BUFSIZE = 99999 
def logtofile(buf): 
    global log 
    log.write(buf) 
    log.write('\n----------------------------------------------------
------\n') 
    return 
class Character: 
    def __init__(self, type, hp = 0, atk = 0, de = 0): 
        if type == 'a': 
            self.HP = 1000 
            self.ATK = 80 
            self.DEF = 60 
        elif type == 'b': 
            self.HP = 100 
            self.ATK = 200 
            self.DEF = 100 
        elif type == 'c': 
            self.HP = 1000 
            self.ATK = 300 
            self.DEF = 150 
        elif type == 'd': 
            self.HP = 3000 
            self.ATK = 300 
            self.DEF = 250 
        else: 
            self.HP = hp 
            self.ATK = atk 
            self.DEF = de 
        return 
    def battle(self, player): 
        if player.ATK  0 or self.HP > 0: 
            if not turn: 
                self.HP -= (player.ATK - self.DEF) 
            else: 
                player.HP -= (self.ATK - player.DEF) 
            if turn == 0: 
                turn = 1 
            else: 
                turn = 0 
        if player.HP  0 and 
new_y > 0 and new_x  0 and 
new_y > 0 and new_x = 10000: 
        print 'NOW YOU CAN BEAT THE GAME!' 
        canwin = 1 
    for c in things: 
        if c['thing'] == 'A': 
            A.append(c['pos']) 
        elif c['thing'] == 'D': 
            D.append(c['pos']) 
        elif c['thing'] == 'P': 
            P.append(c['pos']) 
        elif c['thing'] == '/': 
            Upstair = c['pos'] 
        elif c['thing'] == '\\': 
            Downstair = c['pos'] 
        elif c['thing'] == 'Y': 
            Goal = c['pos'] 
    if canwin and Goal != (0,0): 
        game.gotopos(Goal) 
        print s.recv(BUFSIZE) 
    if len(A) and not moved: 
        #if raw_input('go downstair to search for A or D?(y/n)') == 
'y': 
        #    if game.try_return(): 
        #        moved = 1 
        if game.gotopos(A[0]) and not moved: 
            moved = 1 
        else: 
            notgot = 1 
    elif len(D) and not moved: 
        #if raw_input('go downstair to search for A or D?(y/n)') == 
'y': 
        #    if game.try_return(): 
        #        moved = 1 
        if game.gotopos(D[0]) and not moved: 
            moved = 1 
        else: 
            notgot = 1 
    elif len(P) and not moved: 
        #if raw_input('go downstair to search for A or D?(y/n)') == 
'y': 
        #    if game.try_return(): 
        #        moved = 1 
        if game.gotopos(P[0]) and not moved: 
            moved = 1 
        else: 
            notgot = 1 
    #elif len(A)+len(D)+len(P) == 0 and not moved: 
    #    if game.gotopos(Upstair): 
    #        moved = 1 
    print Downstair, Upstair 
    if not moved: 
        if (notgot and movedon) or canwin: #or (raw_input('go 
downstair?(y/n)') == 'y' and Downstair != (0,0)): 
            notgot = movedon = 0 
            if Downstair == (0,0): 
                game.try_return() 
            else: 
                if game.gotopos(Downstair) == 0: 
                    game.gotopos(Upstair) 
        elif len(A)+len(D)+len(P) == 0 or notgot or movedup:# and 
raw_input('go upstairs?(y/n)') == 'y': 
            movedup = 0 
            if notgot: 
                movedon = 1 
            if Upstair == (0,0): 
                game.try_return() 
            else: 
                if game.gotopos(Upstair) == 0: 
                    game.gotopos(Downstair) 
        elif raw_input('goto specified pos?(y/n)') == 'y': 
            x,y = map(int,raw_input('input pos x,y:').split(',')) 
            game.gotopos((x,y)) 
        else: 
            b = raw_input('chose a position (wsad)') 
            if b == 'w': 
                game.go_up(); 
            elif b == 's': 
                game.go_down(); 