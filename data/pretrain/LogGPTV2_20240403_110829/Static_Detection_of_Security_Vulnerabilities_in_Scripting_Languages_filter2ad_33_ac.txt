that require sanitized input.
• Deﬁnitions (D):
the set of memory locations de-
ﬁned in the current block. For example, in
$a = $a.$b; $c = 123;
we have D = {a, c}.
• Value ﬂow (F): the set of pairs of locations (l1, l2)
where the string value of l1 on entry becomes a sub-
string of l2 on exit.
In the example above, F =
{(a, a), (b, a)}.
• Termination predicate (T ):
true if the current
block contains an exit statement, or if it calls a func-
tion that causes the program to terminate.
• Return value (R): records the representation for
the return value if any, undeﬁned otherwise. Note
that if the current block has no successors, either R
has a value or T is true.
• Untaint set (U): for each successor of the current
CFG block, we compute the set of locations that
are sanitized if execution continues onto that block.
Sanitization can occur via function calls, casting to
safe types (e.g., int, etc), regular expression match-
ing, and other tests. The untaint set for different
successors might differ depending on the value of
branch predicates. We show an example below.
validate($a);
$b = (int) $c;
if (is numeric($d))
. . .
As mentioned earlier, validate exits if $a is unsafe.
Casting to integer also returns a safe result. There-
fore, the untaint set is {a, b, d} for the true branch,
and {a, b} for the false branch.
USENIX Association
Security ’06: 15th USENIX Security Symposium
185
7
3.2 Intraprocedural Analysis
Based on block summaries computed in the previous
step, the intraprocedural analysis computes the follow-
ing summary hE, R, S, X i for each function:
1. Error set (E): the set of memory locations (vari-
ables, parameters, and hash accesses) whose value
may ﬂow into a database query, and therefore must
be sanitized before invoking the current function.
For the main function, the error set must not in-
clude any user-deﬁned variables (e.g. $ GET[‘...’]
or $ POST[‘...’])—the analysis emits an error mes-
sage for each such violation.
We compute E by a backwards reachability analy-
sis that propagates the error set of each block (using
the E, D, F, and U components in the block sum-
maries) to the start block of the function.
2. Return set (R): the set of parameters or global
variables whose value may be a substring of the re-
turn value of the function. R is only computed for
functions that may return string values. For exam-
ple, in the following code, the return set includes
both function arguments and the global variable $ta-
ble (i.e., R = {table, Arg#1, Arg#2}).
function make query($user, $pass) {
global $table;
return "SELECT * from $table ".
"where user = $user and pass = $pass";
}
We compute the function return set by using a for-
ward reachability analysis that expresses each re-
turn value (recorded in the block summaries as R)
as a set of function parameters and global variables.
3. Sanitized values (S):
the set of parameters or
global variables that are sanitized on function exit.
We compute the set by using a forward reachability
analysis to determine the set of sanitized inputs at
each return block, and we take the intersection of
those sets to arrive at the ﬁnal result.
If the current function returns a Boolean value as its
result, we distinguish the sanitized value set when
the result is true versus when it is false (mirror-
ing the untaint representation for Boolean values
above). The following example motivates this dis-
tinction:
function is valid($x) {
if (is numeric($x)) return true;
return false;
}
The parameter is sanitized if the function returns
true, and the return value is likely to be used by
the caller to determine the validity of user input. In
the example above,
S = (false ⇒ {}, true ⇒ {Arg#1})
For comparison, the validate function deﬁned previ-
ously has S = (∗ ⇒ {Arg#1}). In the next section,
we describe how we make use of this information in
the caller.
4. Program Exit (X ): a Boolean which indicates
whether the current function terminates program ex-
ecution on all paths. Note that control ﬂow can
leave a function either by returning to the caller or
by terminating the program. We compute the exit
predicate by enumerating over all CFG blocks that
have no successors, and identify them as either re-
turn blocks or exit blocks (the T and R component
in the block summary). If there are no return blocks
in the CFG, the current function is an exit function.
The dataﬂow algorithms used in deriving these facts
are fairly standard ﬁx-point computations. We omit the
details for brevity.
3.3 Interprocedural Analysis
This section describes how we conduct interprocedural
analysis using summaries computed in the previous step.
Assuming f has summary hE, R, S, X i, we process a
function call f (e1, . . . , en) during intrablock simulation
as follows:
1. Pre-conditions: We use the error set (E) in the
function summary to identify the set of parameters
and global variables that must be sanitized before
calling this function. We substitute actual parame-
ters for formal parameters in E and record any un-
sanitized non-constant segments of strings in the er-
ror set as the sanitization pre-condition for the cur-
rent block.
2. Exit condition: If the callee is marked as an exit
function (i.e., X is true), we remove any statements
that follow the call and delete all outgoing edges
from the current block. We further mark the current
block as an exit block.
3. Post-conditions:
If the function unconditionally
sanitizes a set of input parameters and global vari-
ables, we mark this set of values as safe in the sim-
ulation state after substituting actual parameters for
formal parameters.
If sanitization is conditional on the return value
(e.g., the is valid function deﬁned above), we record
the intersection of its two component sets as being
186
Security ’06: 15th USENIX Security Symposium
USENIX Association
8
unconditionally sanitized (i.e., σ0 ∩ σ1 if the untaint
set is (false ⇒ σ0, true ⇒ σ1)).
4. Return value: If the function returns a Boolean
value and it conditionally sanitizes a set of input pa-
rameters and global variables, we use the untaint
representation to model that correlation:
E⇒ v1 . . . Γ ` en
Γ ` lv Lv⇒ l Γ ` e1
Summary(f ) = hE , R, S, X i
S = (false ⇒ σ0, true ⇒ σ1) σ∗ = σ0 ∩ σ1
0 = subst¯v(σ0 − σ∗) σ 0
1 = subst¯v(σ1 − σ∗)
σ 0
E⇒ vn
Γ ` lv ← f (e1, . . . , en) S⇒ Γ[l 7→ untaint(σ 0
0, σ 0
1)]
In the rule above, subst¯v(σ) substitutes actual pa-
rameters (vi) for formal parameters in σ.
If the callee returns a string value, we use the return
set component of the function summary (R) to de-
termine the set of input parameters and global vari-
ables that might become a substring of the return
value:
Γ ` lv Lv⇒ l Γ ` e1
Summary(f ) = hE , R, S, X i σ 0 = subst¯v(R)
E⇒ v1 . . . Γ ` en
E⇒ vn
Γ ` lv ← f (e1, . . . , en) S⇒ Γ[l 7→ contains(σ 0)]
Since we require the summary information of a func-
tion before we can analyze its callers, the order in which
functions are analyzed is important. Due to the dynamic
nature of PHP (e.g.,
include statements), we analyze
functions on demand—a function f is analyzed and sum-
marized when we ﬁrst encounter a call to f. The sum-
mary is then memoized to avoid redundant analysis. Ef-
fectively, our algorithm analyzes the source codebase in
topological order based on the static function call graph.
If we encounter a cycle during the analysis, the current
implementation uses a dummy “no-op” summary as a
model for the second invocation (i.e., we do not compute
ﬁx points for recursive functions). In theory, this is a po-
tential source of false negatives, which can be removed
by adding a simple iterative algorithm that handles re-
cursion. However, practically, such an algorithm may be
unnecessary given the rare occurrence of recursive calls
in PHP programs.
4 Experimental Results
The analysis described in Section 3 has been imple-
mented as two separate parts: a frontend based on the
open source PHP 5.0.5 distribution that parses the source
ﬁles into abstract syntax trees and a backend written in
OCaml [8] that reads the ASTs into memory and car-
ries out the analysis. This separation ensures maximum
compatibility while minimizing dependence on the PHP
implementation.
The decision to use different levels of abstraction in
the intrablock, intraprocedural, and interprocedural lev-
els enabled us to ﬁne tune the amount of information we
retain at one level independent of the algorithm used in
another and allowed us to quickly build a usable tool.
The checker is largely automatic and requires little hu-
man intervention for use. We seed the checker with a
small set of query functions (e.g. mysql query) and saniti-
zation operations (e.g. is numeric). The checker infers the
rest automatically.
Regular expression matching presents a challenge to
automation. Regular expressions are used for a variety
of purposes including, but not limited to, input valida-
tion. Some regular expressions match well-formed input
while others detect malformed input; assuming one way
or the other results in either false positives or false neg-
atives. Our solution is to maintain a database of previ-
ously seen regular expressions and their effects, if any.
Previously unseen regular expressions are assumed by
default to have no sanitization effects, so as not to miss
any errors due to incorrect judgment. To make it easy
for the user to specify the sanitization effects of regular
expressions, the checker has an interactive mode where
the user is prompted when the analysis encounters a pre-
viously unseen regular expression and the user’s answers
are recorded for future reference.6 Having the user de-
clare the role of regular expressions has the real poten-
tial to introduce errors into the analysis; however, prac-
tically, we found this approach to be very effective and
it helped us ﬁnd at least two vulnerabilities caused by
overly lenient regular expressions being used for sani-
tization.7 Our tool collected information for 49 regular
expressions from the user over all our experiments (the
user replies with one keystroke for each inquiry), so the
burden on the user is minimal.
The checker detects errors by using information from
the summary of the main function—the checker marks
all variables that are required to be sanitized on entry
as potential security vulnerabilities. From the checker’s
perspective, these variables are deﬁned in the environ-
ment and used to construct SQL queries without being
sanitized. In reality, however, these variables are either
deﬁned by the runtime environment or by some language
constructs that the checker does not fully understand
(e.g., the extract operation in PHP which we describe
in a case study below). The tool emits an error mes-
6Here we assume that a regular expression used to sanitize input in
one context will have the same effect in another, which, based on our
experience, is the common case. Our implementation now provides
paranoid users with a special switch that ignores recorded answers and
repeatedly ask the user the same question over and over if so desired.
7For example, Utopia News Pro misused “[0-9]+” to validate
some user input. This regular expression only checks that the string
contains a number, instead of ensuring that the input is actually a num-
ber. The correct regular expression in this case is “ˆ[0-9]+$”.
USENIX Association
Security ’06: 15th USENIX Security Symposium
187
9
Application (KLOC)
News Pro (6.5)
myBloggie (9.2)
PHP Webthings (38.3)
DCP Portal (121)
e107 (126)
Total
Err Msgs
8
16
20
39
16
99
Bugs (FP) Warn
8
23
6
55
23
115
8 (0)
16 (0)
20 (0)
39 (0)
16 (0)
99 (0)
Table 1: Summary of experiments. LOC statistics in-
clude embedded HTML, and thus is a rough estimate
of code complexity. Err Msgs: number of reported er-
rors. Bugs: number of conﬁrmed bugs from error re-
ports. FP: number of false positives. Warn: number of
unique warning messages for variables of unresolved ori-
gin (uninspected).
sage if the variable is known to be controlled by the user
$ GET[‘. . .’], $ POST[‘. . .’], $ COOKIE[‘. . .’],
(e.g.
etc). For others, the checker emits a warning.
and
We conducted our experiments on the latest ver-
sions of six open source PHP code bases: e107
0.7, Utopia News Pro 1.1.4, mybloggie
2.1.3beta, DCP Portal v6.1.1, PHP
Webthings 1.4patched,
PHP fusion
6.00.204. Table 1 summarizes our ﬁndings for the
ﬁrst ﬁve. The analysis terminates within seconds for
each script examined (which may dynamically include
other source ﬁles). Our checker emitted a total of 99
error messages for the ﬁrst ﬁve applications, where
unsanitized user input (from $ GET, $ POST, etc) may
ﬂow into SQL queries. We manually inspected the
error reports and believe all 99 represent real vulnera-
bilities.8 We have notiﬁed the developers about these
errors and will publish security advisories once the
errors have been ﬁxed. We have not inspected warning
messages—unsanitized variables of unresolved origin
(e.g. from database queries, conﬁguration ﬁles, etc) that
are subsequently used in SQL queries due to the high
likelihood of false positives.
PHP-fusion is different from the other ﬁve code bases
because it does not directly access HTTP form data from
input hash tables such as $ GET and $ POST. Instead it
uses the extract operation to automatically import such
information into the current variable scope. We describe
our ﬁndings for PHP-fusion in the following subsection.
4.1 Case Study: Two Exploitable SQL In-
jection Attacks in PHP-fusion
In this section, we show two case studies of exploitable
SQL injection vulnerabilities in PHP-fusion detected by
our tool. PHP-fusion is an open-source content manage-
ment system (CMS) built on PHP and MySQL. Exclud-
ing locale speciﬁc customization modules, it consists of
over 16,000 lines of PHP code and has a wide user-base
because of its speed, customizability and rich features.
Browsing through the code, it is obvious that the author
programmed with security in mind and has taken extra
care in sanitizing input before use in query strings.
Our experiments were conducted on the then latest
6.00.204 version of the software. Unlike other code
bases we have examined, PHP-fusion uses the extract
operation to import user input into the current scope. As
an example, extract($ POST, EXTR OVERWRITE) has
the effect of introducing one variable for each key in the
$ POST hash table into the current scope, and assigning
the value of $ POST[key] to that variable. This feature re-
duces typing, but introduces confusion for the checker
and security vulnerabilities into the software—both of
the exploits we constructed involve use of uninitialized
variables whose values can be manipulated by the user
because of the extract operation.
Since PHP-fusion does not directly read user input
from input hashes such as $ GETor $ POST, there are no
direct error messages generated by our tool. Instead we
inspect warnings (recall the discussion about errors and
warnings above), which correspond to security sensitive
variables whose deﬁnition is unresolved by the checker
(e.g., introduced via the extract operation, or read from
conﬁguration ﬁles).
We ran our checker on all top level scripts in PHP-
fusion. The tool generated 22 unique warnings, a ma-
jority of which relate to conﬁguration variables that are
used in the construction of a large number of queries.9
After ﬁltering those out, 7 warnings in 4 different ﬁles
remain.
We believe all but one of the 7 warnings may result in
exploitable security vulnerabilities. The lone false posi-
tive arises from an unanticipated sanitization:
/* php-ﬁles/lostpassword.php */
if (!preg match("/ˆ[0-9a-z]{32}$/", $account))