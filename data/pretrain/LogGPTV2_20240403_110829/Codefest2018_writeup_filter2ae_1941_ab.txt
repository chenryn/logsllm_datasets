        #if user already exists, fetch access code
        final = user_functions.get_code(user)
    code = raw_input("Enter your access code: ").strip()
    while True:
        if code.isdigit():
            if (int(code) == final):
                print "The flag is " + user_functions.get_flag(user)
                exit()
            else:
                print "Incorrect access code"
        else:
            print "The code must be an integer"
        code = (raw_input("nPlease enter the code: "))
        print "n###############################################"
乍一看好像挺复杂的，其实不然，只需要爆破即可，简单分析下
起始变量`count`
是由我们输入的`user`确定的。如果我们每次测试时都提供相同的`user`，那么最终`count`变量也都是不变的；而`count_`变量嘛，虽然不知道到底是什么嘛，但是模`1000`得到的结果只可能是`[0,999]`；而`code`呢？由于`code`种子`xorshift`生成的，我们可以根据`count_`遍历`code`。只需要稍微改改给的school.py我们就可以暴力跑出答案。
核心代码其实也就是下面这个：
    for i in range(0,1000):
        count_ = i
        # the seed is always the same
        generator = "xorshift"
        random.seed(generator)
        count = 0;
        for ch in user:
            ra = random.randint(1, ord(ch))
            rb = (ord(ch) * random.randint(1, len(user))) ^ random.randint(1, ord(ch))
            count += (ra + rb)/2
        code = 1
        for i in range(1,count+count_):
            code = (code + random.randint(1, i) ) % 1000000
        final = random.randint(1,9) * 1000000 + code
完整代码如下：
    #-*-coding:utf-8
    from pwn import *
    import sys
    list_code = []
    user = 'jianghu'
    for i in range(0,1000):
        count_ = i
        generator = "xorshift"
        random.seed(generator)
        count = 0;
        for ch in user:
            ra = random.randint(1, ord(ch))
            rb = (ord(ch) * random.randint(1, len(user))) ^ random.randint(1, ord(ch))
            count += (ra + rb)/2
        code = 1
        for i in range(1,count+count_):
            code = (code + random.randint(1, i) ) % 1000000
        final = random.randint(1,9) * 1000000 + code
        list_code.append(final)
    print list_code
    con = remote('34.216.132.109',9094)
    con.recvuntil('Enter your name: ')
    con.sendline(user)
    for i in list_code:
        text = con.recv()
        if 'flag' not in text:
            con.sendline(str(i))
        else:
            print text,i
            sys.exit()
运行结果如下
最终答案：`CodefestCTF{1_s33_y0u_4r3_a_m4n_0f_r4nd0mn3ss}`
## It’s Magic
### problem
Repair given corrupted file to get the flag. [download file
here](https://www.hackerrank.com/external_redirect?to=https://drive.google.com/file/d/10O4w6rtsUiCspM94qdXqvHeTj-4O0RfX/view?usp=sharing)
下载完毕后，拖到winhex里，拖到尾部发现`FFD9`，尝试改文件头，发现无效
遂尝试网上搜索在线修复受损图片，找到一个[工具网站](https://online.officerecovery.com/cn/fix-damaged-photo-file-online/)
修复完成后，打开即有flag
最终答案：`CodefestCTF{mAgic_byTes}`
## Hidden Agenda
### problem
Just before getting caught in Russia, MI-6 agent John Stegwal sent a mail to
MI-6 containing two [visually similar
images](https://www.hackerrank.com/external_redirect?to=https://drive.google.com/drive/folders/1GHCN9eIRPtlMA0xGxnr44nY0boo-6DOx?usp=sharing).
It is possible that the images contain information on how to access his
findings. Can you find the message he sent?
给了两个`jpg`文件：`image1.jpg`与`image2.jpg`。
先用`StegSolve`将`image1.jpg`与`image2.jpg`来次`xor`，发现有个二维码的痕迹，保存为`solved.bmp`
将`solved.bmp`与`image1.jpg`再来一次MUL，得到一个可扫的清晰二维码
扫出来是个网址`https://drive.google.com/file/d/13chbULOlKaOM_jI8_RaxECZ0xzJUg7Y4/view`，打开后，有张图片，下载下来，打开后可以看到清晰的`flag{`字样，然后，没然后了，这张图片只有`flag{`（那时候看到flag，开心极了，贼坑）
没事，我吃柠檬。谷歌了下，找了找有关`jpg`图片隐写，找到了个`jsteg`，哟，试试
先试试`image1.jpg`，试出东西来了
得到了个`flg.exe`，`winhex`看下，没看懂是啥
`file`下，发现是个`MP3`
改后缀名，听了听，这是鸟叫声？`exm`?拖到`Adobe Audition CC2017`试试，查看了下频谱图
得到最终答案：`CodefestCTF{0b5cur17y > 53cur17y}`
## Thunder
此题给了个流量包`thunder.pcap`，包不大，分析发现好几个`flag.jpg`，但是都是不完整的。
尝试根据`jpg`文件的文件格式来拼图。先导出`http`对象，删除重复的。此题有个坑点，不可以按照分组序号的大小来拼，必须按照`TCP`流所显示的时间依小到大排序，然后拼好即可。
人懒，写了个`bat`脚本`1.bat`
    type flag*.jpg>>all.jpg
以下是`all.jpg`
得到最终答案：`CodefestCTF{AP_is_amazing}`
## Polyglot
### problem
Chetu writes code with weird whitespace, and nobody knows why. He uses his own
[C
interpreter](https://www.hackerrank.com/external_redirect?to=https://drive.google.com/open?id=12pZCXtDxvGqZUEzaZ-I_3Md-bPizUILT), which is probably the only thing that can handle his absurd
code. He insists its more secure this way. Since no one ever believes him, he
demonstrated his technique on [this vulnerable
code](https://www.hackerrank.com/external_redirect?to=https://drive.google.com/open?id=17ORWMNSOodeEarjuYDXHswlC_6t_kH_A).
Can you get the flag?
这题贼有意思，贼好玩。题目给了两个文件，但是做这题，我只用了`c`代码的文件，另外一个`elf`都没看。
首先我们看看`c`代码：
会发现，这些数字排序，怎么都是空那么多格子的呢？奇怪，但是突然想起了写`python`脚本时，会因为空格和`tab`混淆而报错，下意识看看这些空白字符是由什么构成的。`Notepad++`有个功能
果然，这些空白字符是由不同的空格字符和制表符组成。尝试先用脚本读读
果然，猜想是正确的，那么现在需要提取下这些空白的字符。想到了正则表达式，其中`s`表示只要出现空白就匹配。但是匹配完后有什么用了？随即想到有没可能是`0`,`1`替换，到时候来个二进制转换`ASCII`可见字符。尝试一波，先匹配试试，然后`‘t’`替换成`1`，`‘
’`替换成`0`，得到了想要的答案
最终答案：`CodefestCTF{sP4c3S AnDtAb5}`
## Intercept
### problem
Garry encrypted a message with his public key and mailed it to Monika. Sure
Garry is an idiot. The intercepted mail is given below as seen from Monika’s
side. Decrypt the message to get the key.
[interceptedMail.eml](https://www.hackerrank.com/external_redirect?to=https://drive.google.com/file/d/1T9mCsfp-QZFnas6scLSUx7cg9yYmT8hH/view?usp=sharing)
下载文件后，发现`eml`中存在`zip`，`base64`解码下
有两个文件，`flag.enc`是密文，但是私钥哪去了呢？其实在下面那个文件里。
其中`Public_Key_Encryption_.docx`实际上是是个压缩包，`winhex`下看到了`PK`的头
改后缀名，解压。寻找一番没找到私钥。最后才发现，在解压文件中`wordmedia`，存在三张图片
其中的`image1.png`的尾部存在私钥
那么，提取出来，保存为`private.pem`
额，`openssl`解密下，执行命令`openssl rsautl -decrypt -in flag.enc -inkey private.pem
-out flag.txt`
最终答案：`CodefestCTF{kristeinStewart_is_5EXY}`