# 2021年 Android & iOS App 安全还能做什么？
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 一些漏洞已经 “can’t breathe”
说到移动 App 安全，很多人出现在脑海中的可能是 CVE-2012-6636，不得不说 6636
确实是个无比稳定且经典的漏洞，但漏洞都具有时效性，现在市场中的 Android App 在 WebSettings
都会对版本进行判断从而缓解该漏洞的影响，更重要的原因是该漏洞存在于 Android 
应用声明了一个导出的 Activity，但它不仅仅可以被其他应用调起更重要的是可以通过浏览器网页调起，也就满足了远程利用的前提，但需要 one click。  
继续看应用逻辑：
    as v0 = this.a.a().a(this.a, this.a.getIntent());
        if(v0.a() == 1) {
            this.a.startActivity(v0.a(0));
         }
DeepLinkActivity 通过调用 getIntent().getData() 解析传入的 URI，传入不同的 URI
程序处理也不同，至此还没有安全问题，白帽子发现通过 screenType=HELPCENTER&page=xx 可以使用应用内嵌的 WebView 加载
URL，该 URL 可以由攻击者任意指定，看一下 WebView 相关设置：
    WebSettings v0_3 = v0_2 != null ? v0_2.getSettings() : ((WebSettings)v1);
         if(v0_3 != null) {
            v0_3.setJavaScriptEnabled(true);
         }
WebView 通过 setJavaScriptEnabled API 允许加载 JavaScript，从而可以实现 XSS，但客户端 XSS
默认危害相对较小，因为与 Web 安全中 XSS 最大的不同是移动客户端嵌入的 WebView 基本不会保存 Cookie/token 的，后端
Cookie 往往是由原生代码进行处理和传递。但如果只是一个普通的 XSS 厂商不会给如此高的奖金，漏洞的另一个至关重要的点是该 WebView
为了增加与原生代码的交互，自定义了接口，代码如下：
        WebView v0_3 = this.getMWebView();
        if(v0_3 != null) {
            v0_3.addJavascriptInterface(new WebAppInterface(this), "Android");
        }
        ...