Our idea for three-party PSI (3-PSI) is to have all 3 players perform
an (encrypted) incremental computation of the intersection. Namely,
P1 and P2 will first let P2 obtain an encoding of partial intersection
X12 = X1∩X2. Then P2 and P3 will allow P3 to obtain some encoding
of X123 = X12 ∩ X3. In the end, P1 will decode the output X123 =
X1 ∩ X2 ∩ X3.
for each of
1
his inputs x
. P1 then acts as a sender in OPPRF, programming it on
k
points {(x
k) | k ∈ [m]}. P2 acts as a receiver in OPPRF using his
1
1
k , e
input set X2, and obliviously receives either one of these encodings
(if his input was a corresponding match) or a random string. Denote
. The process
k ,(cid:98)e
repeats: P2 will play the role of OPPRF sender with receiver P3. P2
k) | k ∈ [m]} and P3 will
will program the OPPRF on points {(x
To do this, the leader P1 chooses a random encoding e
the value that P2 obtains for each of his items x
by(cid:98)e
2
k
1
k
2
k
2
2
Session F1:  Private Set IntersectionCCS’17, October 30-November 3, 2017, Dallas, TX, USA1266Parameters: 3 parties P1, P2, P3.
Input: Party Pi has input Xi = {xi1, . . . , xi
Protocol:
m} ⊆ {0, 1}∗
(1) For all k ∈ [m], party P1 chooses random distinct {e
k |
(2) Party P1 and P2 invoke with an instance of ℱ F,m,m
opprf
k ∈ [m]} values.
1
denote the corresponding output of
denote the corresponding output
(3) In turn, each party Pi , i ∈ {2, 3}, invokes with Pi +1 an
1
2
k
obtained by P2.
k) | k ∈ [m]}.
k ∈ X2, let(cid:98)e
where:
• P1 is sender with input {(x
1
k , e
• P2 is receiver with input X2.
2
For x
ℱopprf
instance of ℱ F,m,m
where:
opprf
• Pi is sender with input {(xi
• Pi +1 is receiver with input Xi +1.
For xi +1
k
of ℱopprf
k ,(cid:98)ei
k) | k ∈ [m]}.
=(cid:98)e
k}.
query the OPPRF on his input set X3. Denote by(cid:98)e
k
(4) Party P1 announces {x
∈ Xi +1, let(cid:98)ei +1
obtained by Pi +1 (indices are mod n)
k ∈ X1 | e
1
k
3
k
1
1
Figure 10: Optimized Three-party PSI Protocol
the value that
3
k
.
2
2
1
k
1
k
P3 obtains for each of his items x
k ,(cid:98)e
Finally, P3 acts as OPPRF sender and programs the OPPRF on
k) | k ∈ [m]}, while P1 acts as receiver and queries
points {(x
is in the intersection,
the OPPRF on points X1. It is clear that if x
then P1 will receive e
(a value he initially chose) as OPPRF output;
otherwise he will receiver a random value. A formal description of
the protocol is in Figure 10.
Extending the above to n > 3 parties faces the following diffi-
culty: If P1 and Pj collude, they will learn the partial intersection
X1 ∩ · · · ∩ Xj. Indeed, as an OPPRF receiver, Pj will receive the set
of values which can be cross-checked with the encodings generated
by P1. More generally, colluding players Pi and Pj can compute
partial intersection Xi ∩ · · · ∩ Xj by comparing their encodings.
We note that this is not an issue in 3-PSI, since colluding P1 and
P2 can compute X1 ∩ X2 anyway; colluding P2 and P3 cannot learn
any information about the decrypted key e
held by P1 thus the
corrupted parties compute X2 ∩ X3 anyway; and colluding P1 and
P3 can compute X1 ∩ X2 ∩ X3 which is the desired PSI output.
With the above optimization, our 3-PSI protocol needs only 3
OPPRF executions, compared to the 4 OPPRF executions for the
general protocol described in Section 5. The performance gain of
the optimized protocol is not very strong when the network is slow
since parties invoke OPPRF in turn and they have to wait for the
previous OPPRF completed. We implemented both 3-PSI protocol
variants and found this optimized variant to be 1.2 − 1.7× faster.
7 IMPLEMENTATION AND PERFORMANCE
In order to evaluate the performance of our multi-party PSI pro-
tocols, we implement many of the variants described here. We do
a number of experiments on a single server which has 2x 36-core
Intel Xeon 2.30GHz CPU and 256GB of RAM. We run all parties in
the same network, but simulate a network connection using the
1
i
Linux tc command: a LAN setting with 0.02ms round-trip latency,
10 Gbps network bandwidth; a WAN setting with a simulated 96ms
round-trip latency, 200 Mbps network bandwidth.
In our protocol, the offline phase is conducted to obtain an 128
base-OTs using Naor-Pinkas construction [33]. Our implementa-
tion uses OPRF code from [26, 42]. All evaluations were performed
with a item input length 128 bits, a statistical security parameter
λ = 40 and computational security parameter κ = 128. The running
times recorded are an average over 10 trials. Our complete imple-
mentation is available on GitHub: https://github.com/osu-crypto/
MultipartyPSI
7.1 Optimized PSI, Augmented Model
In this section we discuss the PSI protocol from Section 6 that is
optimized for the augmented semi-honest model. We implemented
and tested the following variants (see Section 6.2 for discussion
on variant techniques of sending hints) on different set sizes m ∈
{212
, 220}:
, 216
, 214
• BLOOM FILTER: where the OPPRF used a single combined
garbled Bloom filter hint. In our hashing-to-bin scheme (Ap-
pendix B), sender uses h = 5 hash functions to insert m items
into bins. With the optimization in Section 6.2, there are only
m pairs inserted into the table which has mλ log2 e entries.
The table uses an array of h(λ + log2(m))-bit strings.
• POLYNOMIAL combined: where the OPPRF used combined
polynomial hints per hash index. Polynomial interpolation
was implemented using the NTL library[48]. Each polyno-
mial is built on m points. The coefficients of the polynomial
are λ + log2(m)-bit strings.
• POLYNOMIAL separated: where the OPPRF used a separate
polynomial hint per bin. The coefficient of the polynomial
has λ + log2(m)-bit strings. The degree of polynomial is β1
for each bin in first mζ1 bins, and β2 for each bin in last mζ2
bins. Here ζ1, ζ2, β1 and β2 are discussed in Table 2.
• TABLE: where the OPPRF used a separate table hint per bin.
The table has 2⌈log2(β1)⌉ entries for each bin in first mζ1 bins,
and 2⌈log2(β2)⌉ entries for each bin in last mζ2 bins. Each row
has λ + log2(m)-bit strings.
The running times and communication overhead of our imple-
ment with 5 parties are shown in Table 3. The leader party uses up
to 4 threads, each operates OPPRF with other parties. As expected,
our table-based protocol achieves the fastest running times in com-
parison with the other OPPRF constructions. Our experiments show
that it takes only one second to sample vector v and check unique-
ness for all 220 bins. Thus, the table-based PSI protocol costs only 22
seconds for the set size m = 220. The polynomial-based PSI protocol
with separated hint is the next fastest protocol which requires a
total time of 38 seconds, a 1.7× slowdown. The slowest protocol is
the polynomial-based protocol with combined hint per hash index,
whose running time clearly grows quadratically with the set size.
However, this protocol has the smallest communication overhead.
For small set size m = 214, the polynomial-based PSI protocol with
combined hint requires only 1.74MB for communication.
Session F1:  Private Set IntersectionCCS’17, October 30-November 3, 2017, Dallas, TX, USA1267Protocol
BLOOM FILTER
POLY (combined hint)
POLY (separate hints)
TABLE
Running time (second)
Set Size m
212
220
212
0.37
51.46
8.56
7.36
0.43
1.46
0.32
1.64
0.29
214
0.98
194.96
0.74
0.57
216
3.41
-
2.33
1.48
37.89
21.93
-
214
34.26
1.74
5.98
6.52
Communication (MB)
220
2496.2
216
137.01
-
-
24.30
25.93
447.44
467.66
Table 3: The total runtime and communication of our Multi-Party PSI in augmented semi-honest model in LAN setting. The
communication cost which ignore the fixed cost of base OTs for OT extension is on the client’s side. Cells with − denote trials
that either took longer than hour or ran out of memory.
Setting
Number
Parties n
Threshold
Corruption t
3
4
5
10
15
3
4
5
10
15
LAN
WAN
{1, 2}
1
{2, 3}
1
2
4
1
5
9
1
7
14
{1, 2}
1
{2, 3}
1
2
4
1
5
9
1
7
14
212
0.21 (0.99)*
0.30 (0.16)
0.25 (0.12)
0.34 (0.21)
0.26 (0.12)
0.32 (0.19)
0.39 (0.26)
0.39 (0.17)
0.83 (0.55)
1.01 (0.72)
0.46 (0.23)
1.37 (0.77)
1.85 (1.32)
2.82 ( 2.34)*
3.12 (2.64)
2.65 (1.97)
3.18 (2.51)
2.66 (1.99)
3.21 (2.53)
3.45 (2.78)
3.30 (2.63)
5.67 (4.98)
7.81 (7.14)
3.63 (3.15)
9.87 (9.38)
16.42 (15.96)
Set Size m
220
216
224
1.34 (1.19)*
2.14 (1.97)
1.80 (1.60)
3.16 (2.92)