serve that mediation was lightweight, incurring an overhead
of 5%. A more signiﬁcant delay appeared when the IRM was
controlling the JavaScript code invoked by a Flash, which
went up to 134%. A closer look at the overhead revealed
that it was caused by eval the IRM employed to wrap the
injected code (Section 4.2). Running JavaScript within the
function turned out to be more time-consuming than a di-
rect execution of the code in a hosting page. However, given
the small execution time of the code, the delay introduced
thereby was actually hard to notice in practice.
The overhead of analyzing and instrumenting Flash con-
sists of the latencies incurred by decompiling binary code,
analyzing, instrumenting and compiling the source code. We
measured these latencies from the 9 Flash applications used
in our study, each of which was run 10 times to get the
average. The outcomes are presented in Table 6. The ta-
ble shows that in most cases, the whole analysis took less
than 10 seconds on the low-end laptop used in our experi-
ment. Analyzing and instrumenting Flow player takes over
one minute as it contained over 20,000 lines of code, while
most Flash programs, particularly advertisements, are much
smaller, typically below 1,000 lines.
188Table 6: Perfomance of static analysis
Flash
Puzzle Game
Adobe Demo
CNN Ad
CNET Ad
Flow player
Color Widget
Invoker
Sender
Receiver
Decompile Analysis Compile Total
(s)
3.46
2.3
4.9
6.08
14.6
3.6
2.88
2.82
2.5
(s)
0.665
0.563
0.723
0.865
3.582
0.848
0.571
0.717
0.631
(s)
2.66
2.62
2.8
2.9
49
3.98
2.3
2.1
2.74
(s)
6.785
5.483
8.423
9.845
67.182
8.428
5.751
5.637
5.871
7. DISCUSSION
FIRM is designed to be the ﬁrst inline policy enforce-
ment system that mediates Flash/DOM and Flash/Flash
interactions. Also of great importance to Flash security,
naturally, is well-designed security policies. The current de-
sign of FIRM can support simple policies, as described in
Section 4.1. These policies seem to be suﬃcient for miti-
gating traditional threats such as XSS [29, 34, 18]. How-
ever, questions remain whether they oﬀer enough protection
against the new threats posed by malicious Flash, for ex-
ample, seizure of the clipboard [2]. Further study is needed
to understand this problem and improve FIRM to support
more complicated policies, if necessary.
FIRM instruments the dynamic contents including Flash
and JavaScript located at the websites that adopt our tech-
nique. For the Flash or scripts downloaded to the client’s
browser from other domains during the runtime, the control
we could achieve is still coarse-grained: our current treat-
ment just grants them the lowest privilege. A more desirable
approach could be applying diﬀerent policies to the dynamic
contents from diﬀerent domains. This could requires estab-
lishing certain trust relations between websites. Alterna-
tively, our IRM could pass the scripts and Flash acquired
during the runtime to its website (the one that oﬀers the
hosting page) for analysis and instrumentation. Study of
these approaches is left to our future research.
As discussed in Section 4.3, a Flash can download and
run another Flash as its child. The child Flash, which can
be untrusted, inherits the privilege of its father. Our cur-
rent solution is de-escalation of the father’s privilege, which
results in rather coarse-grained control. In the follow-up re-
search, we plan to look into the possible approaches that can
be used to mediate the child’s activities without demoting
the father.
The techniques we propose can be applied more generally:
for example, they can be extended to mediate JavaScript
code from diﬀerent domains. On the other hand, our ap-
proach cannot protect a web service from a denial of service
attack: for example, a malicious Flash or script can delete
DOM objects to disrupt the normal operations of the ser-
vice. Further research is needed to understand the feasibility
of making IRM more resilient to the attack.
8. RELATED WORK
Inline reference monitor. The idea of moving a reference
monitor into an application has been applied to protect bi-
nary executables [45, 16, 39] and Java applications [24, 20].
Compared with other access control mechanisms, an IRM
is often more eﬃcient and has more information about an
application’s internal states, but can also be more prone to
the attacks that aim at its integrity and data conﬁdentiality.
Concurrently with this research and independently, Phung
et. al. [36] proposed a JavaScript IRM that mediates ac-
cesses to sensitive DOM objects and properties. A problem
with this approach is that all the scripts within a web page
are granted the same privilege.
In contrast, FIRM oﬀers
a ﬁne-grained control of the scripts and Flash applications
with diﬀerent privileges, according to their capabilities. An-
other concurrent work from Meera et. al.
[41] devised a
Flash IRM to verify if certain functions violate pre-deﬁned
policies. To mitigate XSS attack, their framework sanitizes
the input of the functions like getURL. Nevertheless, this ap-
proach is black-and-white which only allows or prohibits the
whole script from input. Conversely, our framework can al-
low the legitimate script code while prohibits the malicious
one.
Access control in web contents. The rapid development
of new web services and applications, such as Mashup [10],
makes the classic Same Origin Policy [38] increasingly in-
suﬃcient for mediating dynamic web contents. New pol-
icy models and enforcement platforms, for example, Mashu-
pOS [44], OMash [22], xBook [40] and BFlow [46], are pro-
posed to achieve ﬁner-grained control of web activities, par-
ticularly those involving JavaScript. FIRM is designed to
control Flash applications and the scripts they spawn, which
has not been done before. Moreover, all these existing ap-
proaches require installing browser plug-ins. This raises the
bar for their practical deployment. Our approach, however,
does not need the web client to do anything: all the policies
and enforcement mechanisms are completely embedded in
the web pages delivered to the browser, and therefore can
be deployed easily. Grier et. al. proposed a new browser
named OP Browser [26] which embeds security policy in
browser kernel to mediate the access from plugins like Adobe
Flash player. However, their approach does not diﬀerentiate
the security demands of diﬀerent Flash contents and turns
out to be too coarse-grained.
XSS defense. As a well-recognized threat to integrity
and conﬁdentiality of valuable web contents, XSS has re-
ceived great attentions from security researchers. Promi-
nent countermeasures include Beep [30], BrowserShield [37],
Noxes [32], and BluePrint [43]. Diﬀerent from the prior
work, FIRM focuses on the XSS caused by vulnerable or ma-
licious Flash applications. Controlling such a threat needs
eﬀective mediation of the interactions between Flash con-
tents and JavaScript, which has not been explored by the
prior research.
Instruction set randomization. FIRM protects its IRM
through randomizing capability tokens, and the JavaScript
and ActionScript variables that maintain those tokens and
their related policies, which makes these critical resources
out of the reach of malicious web contents. This idea has
been inspired by previous research on Instruction Set Ran-
domization (ISR) [31].
ISR was designed to defeat code-
injection attack, through creating process-speciﬁc random-
ized instruction set. Recently, researchers move towards uti-
lization of the technique to protect web applications. A
prominent example is Noncespaces [28], which randomizes
the namespace preﬁxes within a document to eliminate the
scripts not created by the server. However, such a control
can be coarse-grained: for example, the reference monitor ei-
ther permits or denies execution of script code, but cannot
decide what resources a running script can access.
9. CONCLUSION
Flash contents have been increasingly utilized for video
189playing, advertising and other purposes. However, it is re-
vealed [29] that Flash can be exploited by an adversary to
launch various attacks, including XSS and XSRF. The in-
trinsic protection of Adobe Flash player is not suﬃcient in
that it either denies a Flash’s access to web resources or gives
it unconstrained access. Patching such a security mechanism
turns out to be nontrivial: Adobe Flash player is closed
source, and deploying the patch on every browser cannot
be accomplished easily. In this paper, we present FIRM, a
novel solution that avoids these hurdles while still achiev-
ing eﬀective mediation of Flash activities. FIRM builds an
inline reference monitor into the web page hosting Flash
contents. The IRM eﬀectively mediates the interactions be-
tween Flash and DOM objects, and between diﬀerent Flash
applications, according to the capability token possessed by
the Flash. Our approach protects the IRM through control-
ling DOM methods and randomizing the names of the vari-
ables that hold sensitive data, such as capability tokens. We
implemented a prototype of FIRM and evaluated it on popu-
lar web applications, including phpBB, WordPress and Dru-
pal, and 9 real-world Flash applications. Our study shows
that the technique eﬀectively protects user data, incurs small
overheads and is convenient to deploy.
10. ACKNOWLEDGMENTS
We thank anonymous reviewers for their insightful com-
ments. This work was supported in part by the NSF under
Grant No.CNS-0716292 and CNS-1017782.
11. REFERENCES
[1] Adobe ﬂash cs4. http://www.adobe.com/products/flash/.
[2] Adobe ﬂash player clipboard security weakness.
http://www.securityfocus.com/bid/31117.
[3] Antlr parser generator. http://www.antlr.org/.
[4] Bbcode. http://www.bbcode.org/.
[5] Cnn. http://http://www.cnn.com.
[6] drupal community pluminbing. http://drupal.org.
[7] Ecmascript. http://www.ecmascript.org.
[8] Flash url parameter attacks. http:
//code.google.com/p/doctype/wiki/ArticleFlashSecurityURL.
[9] Kimili ﬂash embed.
http://kimili.com/plugins/kml_flashembed/.
[10] Mashup dashboard - programmableweb.
http://www.programmableweb.com/mashups.
[11] phpbb - creating communities worldwide. http://www.phpBB.com.
[12] Standard ecma-262. http://www.ecma-international.org/
publications/standards/Ecma-262.htm.
[13] Swfscan. https://h30406.www3.hp.com/campaigns/2009/
wwcampaign/1-5TUVE/index.php?key=swf.
[14] Wordpress - blog tool and publishing platform.
http://wordpress.org.
[15] Yahoo! http://www.yahoo.com.
[16] M. Abadi, M. Budiu, ´U. Erlingsson, and J. Ligatti.
Control-ﬂow integrity. In ACM Conference on Computer and
Communications Security, pages 340–353, 2005.
[17] Adobe. Flash player security - controlling outbound url access.
http:
//help.adobe.com/en_US/ActionScript/3.0_ProgrammingAS3/
WS5b3ccc516d4fbf351e63e3d118a9b90204-7c9b.html, 2009.
[18] Y. Baror, A. Yogev, and A. Sharabani. Flash parameter
injection. Technical report, IBM, As of September 2008.
[19] A. Barth, C. Jackson, and W. Li. Attacks on javascript mashup
communication. In Proceedings of Web 2.0 Security and
Privacy 2009 (W2SP 2009), 2009.
[20] L. Bauer, J. Ligatti, and D. Walker. Composing security
policies with polymer. In PLDI ’05: Proceedings of the 2005
ACM SIGPLAN conference on Programming language design
and implementation, pages 305–314, New York, NY, USA,
2005. ACM.
[21] S. Chenette. Malicious ﬂash redirectors - security labs blog.
http://securitylabs.websense.com/content/Blogs/3165.aspx,
2008.
[22] S. Crites, F. Hsu, and H. Chen. Omash: enabling secure web
mashups via object abstractions. In Proceedings of the 15th
ACM conference on Computer and communications security
table of contents, pages 99–108. ACM New York, NY, USA,
2008.
[23] DP. Flash clicktag parameter xss. banks, e-shops, adobe and
others vulnerable. http://xssed.org/news/98/Flash_clickTAG_
parameter_XSS._Banks_e-shops_Adobe_and_others_vulnerable/,
2009.
[24] U. Erlingsson and F. B. Schneider. Irm enforcement of java
stack inspection. In IEEE Symposium on Security and
Privacy, pages 246–255, 2000.
[25] Google. Attackvectors.
http://code.google.com/p/google-caja/wiki/AttackVectors,
2010.
[26] C. Grier, S. Tang, and S. T. King. Secure web browsing with
the op web browser. In SP ’08: Proceedings of the 2008 IEEE
Symposium on Security and Privacy, pages 402–416,
Washington, DC, USA, 2008. IEEE Computer Society.
[27] S. Guarnieri and B. Livshits. Gatekeeper: Mostly static
enforcement of security and reliability policies for javascript
code. In Proceedings of the USENIX Security Symposium,
Montreal, Canada, August 2009.
[28] M. V. Gundy and H. Chen. Noncespaces: Using randomization
to enforce information ﬂow tracking and thwart cross-site
scripting attacks. In NDSS’09: Proceedings of the 16th
Network and Distributed System Security Symposium, 2009.
[29] P. Jagdale. Blinded by ﬂash: Widespread security risks ﬂash
developers don’t see. In Black Hat DC 2009. Hewlett-Packard,
2009.
[30] T. Jim, N. Swamy, and M. Hicks. Defeating script injection
attacks with browser-enforced embedded policies. In WWW
’07: Proceedings of the 16th international conference on
World Wide Web, pages 601–610, New York, NY, USA, 2007.
ACM.
[31] G. S. Kc, A. D. Keromytis, and V. Prevelakis. Countering
code-injection attacks with instruction-set randomization. In
CCS ’03: Proceedings of the 10th ACM conference on
Computer and communications security, pages 272–280, New
York, NY, USA, 2003. ACM.
[32] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes: a
client-side solution for mitigating cross-site scripting attacks. In
SAC ’06: Proceedings of the 2006 ACM symposium on
Applied computing, pages 330–337, New York, NY, USA, 2006.
ACM.
[33] H. M. Levy. Capability-Based Computer Systems.
Butterworth-Heinemann, Newton, MA, USA, 1984.
[34] S. D. Paola. Testing ﬂash applications. In 6th OWASP AppSec
Conference, 2007.
[35] I. Parakey. Firebug - web development evolved.
http://getfirebug.com/, 2009.
[36] P. H. Phung, D. Sands, and A. Chudnov. Lightweight
self-protecting javascript. In ASIACCS ’09: Proceedings of the
4th International Symposium on Information, Computer, and
Communications Security, pages 47–60, New York, NY, USA,
2009. ACM.
[37] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir.
Browsershield: Vulnerability-driven ﬁltering of dynamic html.
In Proc. OSDI, 2006.
[38] J. Ruderman. The same origin policy. http://www.mozilla.org/
projects/security/components/same-origin.html, 2008.
[39] A. Sabelfeld and A. Myers. Language-based information-ﬂow
security. IEEE Journal on Selected Areas in Communications,
21(1):5–19, January 2003.
[40] K. Singh, S. Bhola, and W. Lee. xbook: Redesigning privacy
control in social networking platforms. In Proceedings of the
USENIX Security Symposium, Montreal, Canada, August
2009.
[41] M. Sridhar and K. W. Hamlen. Actionscript in-lined reference
monitoring in prolog. In Proceedings of the Twelfth Symposium
on Practical Aspects of Declarative Languages (PADL), 2010.
[42] E. Stark, M. Hamburg, and D. Boneh. Symmetric cryptography
in javascript. In 25th Annual Computer Security Applications
Conference (ACSAC), 2009.
[43] M. Ter Louw and V. Venkatakrishnan. Blueprint: Precise
browser-neutral prevention of cross-site scripting attacks. In
30th IEEE Symposium on Security and Privacy, May 2009.
[44] H. J. Wang, X. Fan, J. Howell, and C. Jackson. Protection and
communication abstractions for web browsers in mashupos. In
Proceedings of the 21st ACM Symposium on Operating
Systems Principles (SOSP 2007), pages 1–16, 2007.
[45] W. Xu, S. Bhatkar, and R. Sekar. Taint-enhanced policy
enforcement: A practical approach to defeat a wide range of
attacks. In Proceedings of the 15th USENIX Security
Symposium, Vancouver, BC, Canada, August 2006.
[46] A. Yip, N. Narula, M. Krohn, and R. Morris.
Privacy-preserving browser-side scripting with bﬂow. In
EuroSys’09, 2009.
190