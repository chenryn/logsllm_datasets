**Title: An In-Depth Symbolic Security Analysis of the ACME Standard**

**Authors:**
- Karthikeyan Bhargavan, INRIA, Paris, France
- Abhishek Bichhawat, IIT Gandhinagar, Gujarat, India
- Quoc Huy Do, University of Stuttgart, Stuttgart, Germany (Also with GLIWA GmbH)
- Pedram Hosseyni, University of Stuttgart, Stuttgart, Germany
- Ralf Küsters, University of Stuttgart, Stuttgart, Germany
- Guido Schmitz, University of Stuttgart, Stuttgart, Germany (Also with Royal Holloway University of London)
- Tim Würtele, University of Stuttgart, Stuttgart, Germany

**Abstract:**
The ACME (Automatic Certificate Management Environment) protocol, standardized as IETF RFC 8555, is a critical component of the web public key infrastructure (PKI). It has been widely adopted by certification authorities like Let’s Encrypt, which have issued over a billion certificates, securing a majority of HTTPS connections. Despite its importance, the security of ACME has not been rigorously analyzed to the same extent as other protocol standards such as TLS 1.3 or OAuth. Previous formal analyses of ACME focused on the cryptographic core of early drafts, omitting many security-critical low-level details, including recursive data structures, long-running sessions with asynchronous sub-protocols, and multi-domain certificate issuance.

In this paper, we present the first comprehensive formal security analysis of the ACME standard. Our model is executable and detailed, enabling our ACME client to interoperate with other ACME servers. We use the recent symbolic protocol analysis framework DY★, based on the F★ programming language, to prove the security of our model. Our analysis accounts for all known attacks on ACME, including both cryptographic and low-level stateful protocol execution attacks. To facilitate this analysis, we extend DY★ to include authenticated channels, key substitution attacks, and a concrete execution framework, which are valuable contributions in their own right. Our security analysis, totaling over 16,000 lines of code, is one of the largest proof developments for a cryptographic protocol standard, providing formal security assurances for a crucial component of web security.

**CCS Concepts:**
- **Security and Privacy:** Formal security models, security protocols, web protocol security, digital signatures, logic and verification.
- **Networks:** Protocol testing and verification, formal specifications.
- **Theory of Computation:** Cryptographic protocols.

**Keywords:**
- Formal protocol analysis and verification
- Public-key infrastructure
- Certificate issuance

**ACM Reference Format:**
Karthikeyan Bhargavan, Abhishek Bichhawat, Quoc Huy Do, Pedram Hosseyni, Ralf Küsters, Guido Schmitz, and Tim Würtele. 2021. An In-Depth Symbolic Security Analysis of the ACME Standard. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 17 pages. https://doi.org/10.1145/3460120.3484588

**1. Introduction**
The management of certificates for web servers was once a tedious and manual task. To alleviate this burden, the Internet Security Research Group (ISRG) developed the Automatic Certificate Management Environment (ACME), which automates domain ownership verification and certificate issuance. ACME was standardized by the Internet Engineering Task Force (IETF) as RFC 8555 and is now supported by numerous certification authorities (CAs) and web server tools. Let’s Encrypt, launched by the ISRG in 2015, was the first CA to implement ACME and has provided its services for free, issuing over a billion certificates and accounting for about 57% of active certificates on the web.

Given the widespread use of ACME, any design flaw can have severe consequences. For instance, a critical cryptographic flaw in an early draft of ACME allowed adversaries to obtain certificates for domains they did not own. While this flaw was fixed in the published standard, it underscores the need for formal verification to ensure no such flaws remain.

**Formal Analysis of ACME**
Two prior works analyzed early drafts of the ACME protocol using ProVerif and Tamarin, identifying and verifying fixes for protocol weaknesses. However, these analyses were limited to the core cryptographic mechanisms for single-domain certificate issuance, resulting in high-level models that omitted many details of the 100-page ACME standard.

ACME involves complex interactions, including recursive control flows, unbounded data structures, and careful state management for long-running sessions with multiple asynchronous sub-protocols. For example, an ACME client can request a certificate covering multiple domains. The server must iteratively verify ownership for each domain, creating individual endpoints for each domain and running asynchronous sub-protocols to validate ownership. These sub-protocols can interleave arbitrarily, raising significant security questions. A recent flaw in the ACME server implementation Boulder, used by Let’s Encrypt, allowed attackers to obtain certificates for domains they did not own, leading to the revocation of over 3 million certificates.

**A Detailed Executable ACME Model in F★**
Creating a detailed formal model for a large protocol like ACME is challenging due to flexible message formats, unbounded data structures, and mutable session states. Automated symbolic provers like ProVerif and Tamarin struggle with these complexities. Our approach is to write a detailed model in the F★ programming language, resulting in a 5,500-line model that can be tested and executed. This model can be seen as a reference implementation of the ACME standard, and our verified ACME client can interoperate with real-world ACME servers, including those run by Let’s Encrypt.

**Symbolic Security Proofs for ACME in DY★**
To formally prove security properties, we use the DY★ verification framework, which is designed for the symbolic security analysis of protocol code written in F★. DY★ explicitly encodes the global run-time semantics of distributed protocol executions, allowing for the sound modeling of protocol state, random number generation, and fine-grained compromise. Unlike automated provers, DY★ supports the verification of recursive and stateful protocols with unbounded data structures, though it requires manual annotation. Our 5,500-line ACME model required an additional 5,200 lines of proof, but the modular type-based methodology of DY★ scales better than whole-protocol analysis, with an average verification time of about 1.5 minutes per module.

**Extensions to DY★**
We extended DY★ in three ways to model and verify ACME:
1. **Key Substitution Attacks:** We enhanced the model of signatures to account for key substitution attacks, where an adversary crafts a new verification key for a given signature.
2. **Authenticated Channels:** We added authenticated channels to model trusted communication between the domain owner and the ACME server.
3. **Interoperable Implementations:** We developed a method to transform a DY★ model into a concrete implementation, enabling interoperability testing with real-world ACME servers.

**Contributions**
- **Comprehensive Formal Model:** We present the first comprehensive formal model of the ACME standard, written in F★ and executable.
- **Symbolic Security Theorems:** We prove that certificates are only issued to the rightful domain owners and that the protocol provides integrity guarantees.
- **Extensions to DY★:** Our novel extensions to DY★, including key substitution attacks, authenticated channels, and interoperable implementations, are of independent interest.
- **Proof Development:** Our full proof development totals over 16,000 lines of code, making it one of the largest for a cryptographic protocol standard.