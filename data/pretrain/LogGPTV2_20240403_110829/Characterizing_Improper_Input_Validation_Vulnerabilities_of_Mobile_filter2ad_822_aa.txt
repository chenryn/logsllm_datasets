title:Characterizing Improper Input Validation Vulnerabilities of Mobile
Crowdsourcing Services
author:Sojhal Ismail Khan and
Dominika C. Woszczyk and
Chengzeng You and
Soteris Demetriou and
Muhammad Naveed
Characterizing Improper Input Validation Vulnerabilities of
Mobile Crowdsourcing Services
Sojhal Ismail Khan
PI:EMAIL
University of Southern California
USA
Dominika Woszczyk
PI:EMAIL
Imperial College London
UK
Chengzeng You
PI:EMAIL
Imperial College London
UK
Soteris Demetriou
PI:EMAIL
Imperial College London
UK
Muhammad Naveed
PI:EMAIL
University of Southern California
USA
ABSTRACT
Mobile crowdsourcing services (MCS), enable fast and economical
data acquisition at scale and find applications in a variety of do-
mains. Prior work has shown that Foursquare and Waze (a location-
based and a navigation MCS) are vulnerable to different kinds of
data poisoning attacks. Such attacks can be upsetting and even
dangerous especially when they are used to inject improper inputs
to mislead users. However, to date, there is no comprehensive study
on the extent of improper input validation (IIV) vulnerabilities and
the feasibility of their exploits in MCSs across domains. In this
work, we leverage the fact that MCS interface with their partici-
pants through mobile apps to design tools and new methodologies
embodied in an end-to-end feedback-driven analysis framework
which we use to study 10 popular and previously unexplored ser-
vices in five different domains. Using our framework we send tens
of thousands of API requests with automatically generated input
values to characterize their IIV attack surface. Alarmingly, we found
that most of them (8/10) suffer from grave IIV vulnerabilities which
allow an adversary to launch data poisoning attacks at scale: 7400
spoofed API requests were successful in faking online posts for
robberies, gunshots, and other dangerous incidents, faking fitness
activities with supernatural speeds and distances among many oth-
ers. Lastly, we discuss easy to implement and deploy mitigation
strategies which can greatly reduce the IIV attack surface and ar-
gue for their use as a necessary complementary measure working
toward trustworthy mobile crowdsourcing services.
CCS CONCEPTS
• Security and privacy → Mobile and wireless security; Web
application security.
KEYWORDS
crowdsourcing, real-time, data-poisoning, api fuzzing
This work is licensed under a Creative Commons Attribution International
4.0 License.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
© 2021 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-8579-4/21/12.
https://doi.org/10.1145/3485832.3485888
ACM Reference Format:
Sojhal Ismail Khan, Dominika Woszczyk, Chengzeng You, Soteris Demetriou,
and Muhammad Naveed. 2021. Characterizing Improper Input Validation
Vulnerabilities of Mobile Crowdsourcing Services. In Annual Computer
Security Applications Conference (ACSAC ’21), December 6–10, 2021, Virtual
Event, USA. ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/
3485832.3485888
1 INTRODUCTION
Mobile crowdsourcing services (MCSs) enable economical, rapid,
and scalable data acquisition utilized for accurate information shar-
ing for smart navigation and transportation ( [4, 10]); health and
fitness recommendations [3, 6, 7]; and price tracking [1, 13] among
others. However, location-based (Foursquare, Facebook Places [42])
and navigation (Google Maps [45], Waze [52]) MCSs have been
shown to be susceptible to ad-hoc data poisoning attacks. For ex-
ample, recently an individual showed how a real-world navigation
service can be fooled to make wrong predictions on traffic density,
allowing an adversary to redirect traffic [45]. This experiment was
performed manually by carrying 100 smartphones while walking
up and down the target road. While this demonstrates both the
feasibility and potential consequences of data poisoning attacks on
MCS, the experiment is hard to replicate and systematically scale it
to study fundamental issues enabling such exploits in other MCS.
More systematic studies conducted by Polakis et al. [42] and Wang
et al. [52], while sound, they are specific to the characteristics of the
target MCS and thus fall short in providing generalizing insights
on the vulnerabilities of MCSs.
We observe, that MCSs across application domains suffer from
a common vulnerability, that of improper input validation (IIV)
which can be exploited by an adversary to inject hazardous data
or spread mis-information. To better understand the presence of
IIV vulnerabilities in MCSs and to what extend they contribute
to their exposure to improper input injection attacks, we conduct
a systematic analysis on 10 high-profile, previously unexplored
MCSs across 5 different application domains. To perform our anal-
ysis we had to overcome two main challenges: firstly, the closed
source nature of MCSs does not allow for trivial examination of
their input validation mechanisms; and secondly, testing a large
number of input values for different input types is impractical. To
overcome the first challenge we present a feedback-driven analysis
framework suitable for black-box analysis of MCSs. The framework
944ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Khan, et al.
leverages the observation that most MCSs interface with their par-
ticipants through companion mobile apps and embodies a set of
input injection components for interacting with the remote service.
The injection components target three main avenues an adversary
can exploit on companion mobile apps to inject improper inputs to
the remote service: the sensor measurements used by the compan-
ion apps, their user interface inputs, and their network requests to
the target service. The framework also uses feedback monitoring
strategies for facilitating the evaluation of each input injection. To
overcome the second challenge, we introduce and integrate in the
end-to-end analysis framework a set of input exploration strategies.
These generate values for various input types, supporting range
and constraint and semantic input exploration.
We then design systematic experiments for all selected services
and leverage our framework to characterize the extent of their ex-
posure to improper input injections. Our analysis led to an array
of alarming findings. We found that 8/10 services are vulnerable
to such attacks. Some of them do not perform any kind of input
validation, accepting values which span across the expected in-
put’s domain range. Some have some restrictions on the range but
perform no semantic validation. Even for the ones that do take
measures to verify inputs we show that they are bypassable. Our
findings are alarming: we were able to fake running activity speeds
equivalent to 10x the speed of a commercial jet aircraft and run
distances equivalent to running around the Earth 2007 times (Sec-
tion 4), reduce prices for commodity items down to 10% their value
and up to double their value (Section 5), fake public bus rides (6), in-
ject fake places of interest in the middle of the ocean (Section 7), and
fake reports for robberies, gunshots and other dangerous incidents
in safety services (Section 8). Demos of successful improper input
injections can be found on our project’s website [22]. To mitigate
such issues, we discuss a set of backward-compatible and simple to
implement input validation strategies which can reduce the attack
surface of MCSs up to 99.58%. These can complement and increase
the efficiency and effectiveness of existing countermeasures such
as reputation schemes, UI hints and majority voting.
Contributions. Below we summarize our main contributions:
• New Techniques. We develop range and constraint, and seman-
tic input exploration strategies for generating values for numeric
inputs, GPS coordinates and social posts. We further design meth-
ods to simulate adversarial capabilities for spoofing network API
requests, UI inputs and sensor inputs.
• Framework for Analysis of IIVs in MCSs. We introduce a feedback-
driven framework which embodies input exploration and injection
methods in tandem with feedback monitoring mechanisms to facil-
itate the analysis of IIV vulnerabilities in MCSs from the vantage
point of their companion mobile apps.
• New Findings. We discovered and reported previously unknown
vulnerabilities for 8 high-profile MCSs that can have grave conse-
quences on their veracity and ensuing trustworthiness.
Ethical Considerations. Even though this study was classified
as IRB–exempt, we take various measures in our experiments to
mitigate risk of affecting users or services. These include monitoring
services’ activity and focusing on regions and times to minimize
the exposure of erroneous values to real users; and deleting or
reverting values to their original state immediately after we verify
their approval by the service. See Appendix C for further details.
Responsible Disclosure. Affected services were contacted at least
3 months prior to the time of writing through their mobile app’s
developer email address. Transit, MapMyRun and Fitbit responded
with an automated email confirming receipt, but there was no
follow-up. Strava requested further details which we provided. We
also submitted reports to bug bounty programs of Fitbit and Map-
MyRun on bugcrowd.com. Fitbit responded stating that the issue is
not applicable for a reward because they couldn’t identify a security
impact for their customers.
2 BACKGROUND AND THREAT MODEL
Improper Input Validation. Mobile crowdsourcing services face
the risk of data injection attacks. In such an attack, a malicious
participant node injects an erroneous measurement in the global
service aiming to force an error or deceive the users of the service.
To achieve this, the adversary might target improper input vali-
dation (IIV) vulnerabilities. Validation can be syntactic, range and
constraint or semantic. Lack of syntactic verification might cause
crashes. For example, a service or its corresponding user-facing
mobile application might expect the user to report a number. How-
ever, in light of insufficient input syntactic validation, an adversary
might cause a service to crash by introducing a measurement of an
unexpected input type. Fuzzing techniques are typically employed
to uncover such reliability issues [26]. In this work, we focus mainly
on range and constraint validation and semantic validation. Attacks
leveraging these are harder to detect as at a first glance the reported
values do not seem anomalous.
• Range and Constraint validation. This step ensures that the input
domain range is minimized to accept values meaningful to the con-
text of the service. For example, a service expecting GPS coordinates
as float values with lack of range validation might be poisoned with
non-existing coordinates (e.g. longitude value greater than 180.0◦).
• Semantic Validation. Semantic validation is used to validate the
meaning of the input. An adversary exploiting the lack of seman-
tic validation in GPS inputs might introduce float values that do
correspond to valid GPS coordinates range but for an implausible
location of the given point of interest.
Threat Model. We consider an adversary (A) with access to the
mobile app of the target ubiquitous crowdsourcing service. A can
observe the traffic generated between the app and the remote ser-
vice either by passive eavesdropping or active man in the middle
attacks. A can also reverse engineer and analyze the mobile app
interfacing with the service. Thus the adversary is in knowledge
of the communication protocol and can leverage it to try to inject
fake data into the service. However, the adversary has no access to
the remote service and can only treat it as a black box.
3 ANALYSIS FRAMEWORK
3.1 Overview
To characterize the IIV attack surface of MCSs we need a system-
atic way of exploring the ability of A to launch successful attacks
exploiting the lack of input validation in MCS. This is by no means
a trivial endeavor. One could perform improper input injection
945Characterizing Improper Input Validation Vulnerabilities of Mobile Crowdsourcing Services
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Section 8) require dynamic execution and interaction with the tar-
get apk. A single injection experiment on Transit (see Section 6)
takes 15 minutes. Thus, performing all the trials is not efficient. To
address this we devise a simple yet efficient strategy to explore the
domain range of numeric (integer and float) value injections.
NVE begins with a geometric growth approach (doubling) start-
ing from an initial value aiming to identify the first value that results
in attack failure. It then switches to a linear strategy starting from
the last successful injection until another unsuccessful injection is
encountered. More formally, during geometric growth, each value
is calculated as xi = xi−1 × 2, where xi is the value to be tried
at time interval i. Then, during the linear growth, each value is
calculated as xi = xi−1 ± s, where s is the step size and (±) dictates
the direction of exploration. The value of s is set to the minimum
positive value for integers (i.e. 1) and for floats is set according to
semantics. For example, for prices, it is set to represent 1 cent or
(0.01). This approach has clear benefits. For example, in a scenario
where the positive integer injection success boundary is at 140,
linear exploration requires 140 injections. NVE’s hybrid approach
requires 20 (an 85.7% percentage reduction): 8 steps to find the first
failure value 256 = 28; and another 12 linear steps (140 − (28−1)).
GPS Coordinates Exploration (CE) Strategies. Geo-sensitive
services crowdsource GPS coordinates for a point or event of in-
terest (PoI). GPS coordinates can be derived from a pair of angular
measurements, known as longitude and latitude. Longitude repre-
sents the east-west geo-position of a PoI on the surface of Earth.
Latitude represents the north-south geo-position of a PoI on the
surface of Earth. Both angular measurements can be measured in
degrees; longitudes range from −180◦ to +180◦; latitudes range
from −90◦ to +90◦. CE encompasses four approaches to explore
the geo-location ranges for a reported PoI.
• CE-O: Out of range. CE-O uses numeric value exploration to explore
longitude and latitude values outside of their expected range. It
uses each of the 4 boundaries of longitude and latitude as initial
values and explores in the opposite direction of the expected range.
CE-O is configured with s = 1 and explores degrees as integers.
• CE-Long: Longitude exploration. CE-Long fixes the latitude and
explores the longitude range (−180◦ ≤ x ≤ +180◦), increasing
linearly in the positive and negative integer direction.
• CE-Lat: Latitude exploration. CE-Lat fixes the longitude and ex-
plores the latitude range (−90◦ ≤ x ≤ +90◦), increasing linearly in
the positive and negative integer direction .
• CE-2D: Lat/Long Range exploration. CE-2D also uses linear ex-
ploration but this time to create PoIs over the whole 2D range
of longitudes (-180 to 180) and latitudes (-90 to 90). CE-2D uses a
step of size s = 5. Note that 2D does not need to use the hybrid
geometric-linear NVE approach since it is temporally feasible to
explore the entire 2D range using fixed increments.
• CE-Prec: Precision exploration. This is used to explore the ad-
versary’s capabilities at the precision of the fractional part of the
longitude/latitude float values. First, we trigger search APIs on the
target services to acquire existing PoIs and from those we identify
the maximum number of decimal places the service returns for