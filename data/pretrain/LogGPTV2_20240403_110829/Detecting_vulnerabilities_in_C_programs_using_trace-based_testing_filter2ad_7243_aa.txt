title:Detecting vulnerabilities in C programs using trace-based testing
author:Dazhi Zhang and
Donggang Liu and
Yu Lei and
David Chenho Kung and
Christoph Csallner and
Wenhua Wang
Detecting Vulnerabilities in C Programs Using Trace-Based Testing
Dazhi Zhang, Donggang Liu, Yu Lei, David Kung, Christoph Csallner, and Wenhua Wang
Department of Computer Science and Engineering
The University of Texas at Arlington
Abstract
Security testing has gained signiﬁcant attention recently
due to frequent attacks against software systems. This paper
presents a trace-based security testing approach. It reuses
test cases generated from previous testing methods to pro-
duce execution traces. An execution trace is a sequence of
program statements exercised by a test case. Each trace is
symbolically executed to produce program constraints and
security constraints. A program constraint is a constraint
imposed by program logic on program variables. A se-
curity constraint is a condition on program variables that
must be satisﬁed to ensure system security. A security ﬂaw
exists if there is an assignment of values to program vari-
ables that satisﬁes the program constraint but violates the
security constraint. This approach detects security ﬂaws
even if existing test cases do not trigger them. The nov-
elty of this method is a test model that uniﬁes program con-
straints and security constraints such that formal reason-
ing can be applied to detect vulnerabilities. A tool named
SecTAC is implemented and applied to 14 benchmark pro-
grams and 3 open-source programs. The experiment shows
that SecTAC quickly detects all reported vulnerabilities
and 13 new ones that have not been detected before.
1 Introduction
Software security has gained signiﬁcant attention in re-
cent years due to the huge number of security attacks that
exploit vulnerabilities in software. Security testing is be-
coming an active area of research, aiming at identifying
software vulnerabilities effectively. Recently, many ap-
proaches have been proposed to detect vulnerabilities in
programs [25, 14, 11, 5, 22, 1, 20, 6, 23, 4, 10, 12, 26].
Static analysis has been used to scan source code for er-
rors that crash a system or cause security problems [24, 25].
These static analysis tools use heuristics to determine if a
security problem could occur; they usually approximate or
even ignore runtime dynamics such as branch conditions
and how buffer elements are visited. Thus, they are often
imprecise, causing many false alarms.
Dynamic analysis examines program execution to detect
security problems [13, 8, 9, 1, 20, 23]. These tools feed
test data to a program and monitor its runtime behavior. A
security vulnerability is detected if the behavior is consid-
ered abnormal, e.g., the program accessed a buffer outside
its bounds. Although dynamic analysis reduces false alarm
rates, it requires test inputs that actually cause security prob-
lems. This places a huge burden on testers.
Dynamic symbolic execution, also called concolic test-
ing, is often used in automatic test data generation for ﬁnd-
ing errors that crash a system or cause security problems
[11, 22, 21, 6, 4, 10, 12, 26]. These tools perform concrete
and symbolic execution of a program simultaneously to ex-
plore as many paths as possible. They do not need inputs
that can actually cause security problems. However, they
are either ineffective in the sense that unguided path explo-
ration may not cover important vulnerabilities, or do not
scale well to large and complex programs.
In this paper, we propose a novel security testing ap-
proach using trace-based symbolic execution and satisﬁa-
bility analysis. Trace-based symbolic execution avoids the
search space explosion of conventionalsymbolic execution.
In our approach, each existing test case is used to generate
an execution trace, i.e., the sequence of exercised program
statements. Symbolic execution is then applied to produce
two kinds of predicates. The ﬁrst predicate is called a pro-
gram constraint (PC), which speciﬁes a condition that pro-
gram variables must satisfy after the execution of the state-
ment. The second predicate is called a security constraint
(SC), which speciﬁes the condition that program variables
must satisfy to ensure the security of the given program ex-
ecution. A security vulnerability is detected if there is an
assignment of values to program variables satisﬁes PC but
violates SC, i.e., PC ∧¬ SC is satisﬁable.
The advantages of our approach are as follows. First, As
opposed to previous approaches, we can guide our search
to focus on those features of the user program that are most
important to the user–as indicated by the developers’ will-
ingness to write test cases for them. Our approach can de-
tect security ﬂaws even if these existing test cases do not
trigger them. In other words, our technique can generate
new inputs that trigger security problems, even if the user-
supplied inputs do not. Second, we propose a test model
that uniﬁes program constraints and security constraints us-
ing logical expressions so that formal reasoning can be per-
formed to detect security vulnerabilities. Hence, our ap-
proach can handle new types of vulnerabilities by simply
formulating new security requirements for them. Third,
trace-based symbolic execution also makes it possible to
test programs for vulnerability in parallel. This is because
analyses on different execution traces are independent from
each other. We can partition the test cases into a number of
disjoint subsets and analyze these subsets in parallel. This
cannot be directly achieved in dynamic symbolic execution
based approaches since test cases exercising different paths
are generated during path exploration. Certainly, tools like
DART [11] and CUTE [22] can be modiﬁed to reuse ex-
isting test cases and only test the paths exercised by these
test cases. However, in this case, they lose the beneﬁt of
automatically exploring program paths.
To evaluate the effectiveness of our approach, we im-
plemented a tool named SecTAC (A Security Testing
Approach for C programs) and applied it to 14 benchmark
programs given in [28] and 3 open source programs. The
benchmark programs were designed to evaluate buffer over-
ﬂow detection tools by simulating historic real-world vul-
nerabilities in server programs. Compared with the results
in [28, 27, 26], SecTAC can detect every reported vul-
nerability as long as the vulnerability exists in the execu-
tion traces tested in our experiments. In addition, SecTAC
detected 6 previously unreported vulnerabilities in the 14
benchmark programs. SecTAC also detected 7 vulnerabil-
ities in the open-source programs that, to the best of our
knowledge, have not been reported previously.
In the
next section, we explain our basic ideas. In Section 3, we
overview the SecTAC design. In Section 4, we describe
the SecTAC implementation. In Section 5, we present the
experimentresult. In Section 6, we review related work. We
discuss the limitations of SecTAC in Section 7 and draw
some conclusions in Section 8.
2 Basic Ideas of Our Approach
The rest of this paper is organized as follows.
Software systems must be tested to ensure that the re-
quired functionalities are correctly implemented. Unlike
conventional software testing, our goal is to detect security
vulnerabilities that exist in the software system. A program
is said to be vulnerable if there is an execution path that
can be exploited to compromise the security of the system.
To detect such security vulnerability, we rely on a set of
security requirements that must be satisﬁed by all execu-
tion paths of the program. An example of security require-
ments is that the length of the string copied to a buffer using
strcpy must not exceed the capacity of the buffer.
Testing for security vulnerabilitiesimplies the generation
of test cases that can effectively detect violations of secu-
rity requirements. However, it is well known that effective
test case generation is both difﬁcult and time-consuming.
Therefore, it is desirable to reuse the test cases that are al-
ready generated during conventional software testing. The
merit of this is twofold. First, these test cases typically ac-
complish some required coverage criteria such as branch
coverage. Second, the branches covered by the test cases
are deemed important by the developer. Our goal is to pro-
vide a security testing method for software developers who
have access to the source program and the test cases pro-
duced by traditional functional testing.
In our approach, we use existing test cases to generate
execution traces. Each execution trace is a sequence of
source code statements exercised by a test case. There are
no loops in execution traces since a loop in the original pro-
gram will be unfolded when it is exercised by a test case.
We then symbolically execute each execution trace to deter-
mine whether it contains a security vulnerability. Symbolic
execution of each trace produces two kinds of predicates.
The ﬁrst predicate is the program constraint (PC), which is
updated during the symbolic execution of the trace; it spec-
iﬁes a condition that the program variables must satisfy. In
other words, the program constraint speciﬁes the possible
values of variables at each point during the symbolic ex-
ecution of the trace. The second predicate is the security
constraint (SC), which is produced at certain points during
the symbolic execution of the trace; it speciﬁes a condition
that program variables must satisfy to ensure the security of
the software system. A security problem will occur when
the values of some variables violate the security constraint.
Testing C programs for vulnerabilities is therefore equiva-
lent to determining whether at each point in the trace, there
exists an assignment of values to program variables that sat-
isﬁes PC but violates SC.
Program constraints: The program constraint at a
given point in the trace is determined by the program
statements exercised to reach this point. These state-
ments include declaration statements, assignment state-
ments, branching statements, and library function calls;
they impact the values of variables as follows:
• A declaration statement contains important information
about the type and size of the declared program variable.
These two pieces of informationdetermine the initial pro-
gram constraint on the variable. As an example, the de-
clared size of a buffer or an array constrains the space
available for holding data.
• An assignment statement constrains the value of its left
expression to the result of its right expression.
• A branching statement indicates that different execution
paths could be taken under different conditions. How-
ever, our execution trace is produced by running the pro-
gram under a real test case. We already know which ex-
ecution path is taken by the test case. Hence, we can im-
mediately determine a condition expression that speciﬁes
a constraint between the involved variables. For example,
if statement “if(i>j)” exercises the FALSE branch,
we know that i≤j is a constraint between i and j.
• A library function call restricts the range of its return
value if it has one. For example, the return value of func-
tion open is always greater than or equal to -1. In addi-
tion, some library functions have side-effects (i.e., modi-
fying the states in addition to returning a value) that also
impose constraints on variables. For example, calling
function getcwd will change the content of the buffer
speciﬁed by the parameter.
According to the above rules, symbolically executing
each statement produces an expression describing the con-
straint between the program variables involved in the state-
ment. To distinguish it from the program constraint (PC),
we call such expression the program constraint conjunc-
tion (PCC). PCC may get updated during program execu-
tion. The program constraint at any given point in the trace
can be expressed as the conjunction of all current PCCs.
Security constraints: Producing security constraints
requires clearly-deﬁned high-level security requirements,
e.g., the length of the string copied to a buffer must not ex-
ceed the capacity of the buffer. A wide range of security
vulnerabilities like buffer overﬂow, SQL injection, and for-
mat string, are caused by improper uses of operations such
as strcpy, sql.exec, and printf. Correct uses of
such operations can be expressed as security requirements,
which can then be used to generate security constraints.
For example, a security requirement for strcpy will be
“the length of the second argument must not exceed the ca-
pacity of the ﬁrst argument”. If the trace includes a state-
ment strcpy(a,b), where a is a buffer and b is a string,
we produce a security constraint: a.space>b.strlen,
where a.space is the capacity of buffer a and b.strlen
is the length of string b. We use ﬁrst-order logic to express
security constraints.
security requirement
dst.space>src.strlen
(dst.space ≥ n) ∧ (n ≥ 0)
dst.space>dst.strlen + src.strlen
(buf.space≥ size) ∧ (size ≥ 0)
(dst.space ≥ size) ∧ (size ≥ 0)
# formats = # parameters-1
# formats = # parameters-1
security-critical func.
strcpy(dst,src)
strncpy(dst,src,n)
strcat(dst,src)
getcwd(buf,size)
fgets(dst,size,f)
scanf(format, ...)
printf(format, ...)
Table 1. Security requirements for library
function calls. “x.space” is the size of the
memory allocated to x and “x.strlen” is the
string length of x.
SecTAC can detect the violation of a security require-
ment as long as such requirement can be expressed as a
condition that program variables must satisfy. In the cur-
rent implementation, we support two kinds of security re-
quirements: pointer addition requirements and function pa-
rameter requirements. The former is derived from a useful
observation made in [15], i.e., the result of a pointer addi-
tion must point to the same original object. The latter is
generated from security-critical library functions, i.e., the
library functions whose parameters must satisfy a condition
to ensure the security of a software system. For example,
functions strcpy and printf are both security-critical
library functions. We have selected 20+ library functions
that are well known to be “insecure” and formulated their
security requirements. Table 1 shows some of these func-
tions and their security requirements. Although these re-
quirements are written by hand, in practice we have found
it to be not too difﬁcult for well-known functions.
void foo(int a,char *s){
char buf[10];
if(a>0)
strcpy(buf,s);
1:
2:
3:
4:
5:
}
Figure 1. A sample program
An example: Figure 1 shows a sample program, which
copies the second argument s into a buffer, if the ﬁrst ar-
gument is greater than 0. Assume that there is only one
security requirement, i.e., the length of a string copied to a
buffer using function strcpy must not exceed the capac-
ity of the buffer. Furthermore, we assume that both argu-
ments are user inputs, meaning they can be any values that
are not known in advance. Now, consider a test case that
includes the call foo(x,y) with x=1 and y="test".
This test case generates an execution trace (1,2,3,4) of
statement numbers. Although this test case does not trigger
any security problem, we will demonstrate that our method
can effectively ﬁnd the vulnerability in the trace. Table 2
shows the result of symbolically executing this execution
trace. The ﬁrst column indicates the statement number, and
the second and third columns give the program and security
constraints at the respective statements.
Security Constraint
Line#
1
2
3
4
Program Constraint
(MIN≤ a≤ MAX)∧
(s.strlen≥ 0)
(MIN≤ a≤ MAX)∧
(s.strlen≥ 0)
(0<a≤ MAX)∧
(s.strlen≥ 0)
(0<a≤ MAX)∧
(s.strlen≥ 0)
TRUE
TRUE
TRUE
s.strlen<10
Table 2. Program and security constraints for
the execution trace (1, 2, 3, 4)
As shown in the table,
the PC at statement 1 is
(MIN≤a≤MAX)∧(s.strlen≥ 0), where [MIN, MAX]
deﬁnes the range of an integer number, which is usually
machine dependent, and s.strlen is a symbolic value
denoting the length of string s. This is because both a and s
are user inputs, i.e., a can be any integer value and s can be
any string. The security constraint at statement 1 is TRUE
since the statement does not include any operation that may