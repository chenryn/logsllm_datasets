title:Asynchronous Implementation of Failure Detectors
author:Achour Most&apos;efaoui and
Eric Mourgaya and
Michel Raynal
Asynchronous Implementation of Failure Detectors
Achour MOSTEFAOUI, Eric MOURGAYA, Michel RAYNAL
IRISA, Universit´e de Rennes 1, Campus de Beaulieu, 35042 Rennes Cedex, France
{achour|emourgay|raynal}@irisa.fr
Abstract
1
Introduction
Unreliable failure detectors introduced by Chandra and
Toueg are abstract mechanisms that provide information on
process failures. On the one hand, failure detectors allow to
state the minimal requirements on process failures that al-
low to solve problems that cannot be solved in purely asyn-
chronous systems. But, on the other hand, they cannot be
implemented in such systems: their implementation requires
that the underlying distributed system be enriched with ad-
ditional assumptions. The usual failure detector implemen-
tations rely on additional synchrony assumptions (e.g., par-
tial synchrony).
This paper proposes a new look at the implementation of
failure detectors and more speciﬁcally at Chandra-Toueg’s
failure detectors. The proposed approach does not rely on
synchrony assumptions (e.g., it allows the communication
delays to always increase). It is based on a query-response
mechanism and assumes that the query/response messages
exchanged obey a pattern where the responses from some
processes to a query arrive among the (n − f) ﬁrst ones
(n being the total number of processes, f the maximum
number of them that can crash, with 1 ≤ f < n). When we
consider the particular case f = 1, and the implementation
of a failure detector of the class denoted 3S (the weakest
class that allows to solve the consensus problem),
the
additional assumption the underlying system has to satisfy
boils down to a simple channel property, namely, there is
eventually a pair of processes (pi, pj) such that the channel
connecting them is never the slowest among the channels
connecting pi or pj to the other processes. A probabilistic
analysis shows that this requirement is practically met in
asynchronous distributed systems.
Keywords: Asynchronous distributed systems, Distributed
algorithm, Fault
tolerance, Process crash, Unreliable
failure detectors.
Context of the study The design and implementation of
reliable applications on top of asynchronous distributed sys-
tems prone to process crashes is a difﬁcult and complex
task. A main issue lies in the impossibility to correctly de-
tect crashes in the presence of asynchrony. In such a contex-
t, some problems become very difﬁcult or even impossible
to solve. The most famous of those problems is the Con-
sensus problem for which there is no deterministic solution
in asynchronous distributed systems where processes (even
only one) may crash [12].
To overcome this impossibility, Chandra and Toueg have
introduced the concept of Unreliable Failure Detector [5].
A failure detector can be seen as an oracle [20] made up of
a set of modules, each associated with a process. The fail-
ure detector module attached to a process provides it with
a list of processes it suspects of having crashed. A fail-
ure detector module can make mistakes by not suspecting a
crashed process or by erroneously suspecting a correct one.
In their seminal paper [5], Chandra and Toueg have intro-
duced several classes of failure detectors. A class is deﬁned
by two abstract properties, namely a Completeness proper-
ty and an Accuracy property. Completeness is on the actu-
al detection of crashes, while accuracy restricts erroneous
suspicions. As an example, let us consider the class of fail-
ure detectors denoted 3S. It includes all failure detectors
such that (1) eventually each crashed process is permanent-
ly suspected by every correct process1, and (2) there is a
correct process that, after some ﬁnite but unknown time, is
never suspected by the correct processes (accuracy). Inter-
estingly, several protocols that solve the consensus problem
in asynchronous distributed systems augmented with a fail-
ure detector of the class 3S, and including a majority of
correct processes, have been designed (e.g., [5, 17]). It has
been shown that 3S is the weakest class of failure detec-
tors that allow to solve the consensus problem [6] (with the
additional assumption that a majority of processes are cor-
rect).
1A correct process is a process that does not crash. See Section 2.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
As deﬁned and advocated by Chandra and Toueg [5], the
failure detector approach is particularly attractive. Failure
detectors are not deﬁned in terms of a particular implemen-
tation (involving network topology, message delays, local
clocks, etc.) but in terms of abstract properties (related to
the detection of failures) that allow to solve problems de-
spite process crashes2. The failure detector approach allows
a modular decomposition that not only simpliﬁes protocol
design but also provides general solutions. More speciﬁ-
cally, during a ﬁrst step, a protocol is designed and proved
correct assuming only the properties provided by a failure
detector class. So, this protocol is not expressed in terms
of low-level parameters, but depends only on a well deﬁned
set of abstract properties. The implementation of a failure
detector F D of the assumed class can then be addressed
independently: additional assumptions can be investigated
and the ones that are sufﬁcient to implement F D can be
added to the underlying distributed system in order to get
an augmented system on top of which F D can be imple-
mented. In that way, F D can be implemented in one way
in some context and in another way in another context, ac-
cording to the particular features of the underlying system.
It follows that this layered approach favors the design, the
proof and the portability of protocols. This paper is on the
implementation of failure detectors.
Related work Several works have considered the im-
plementation of some or all of Chandra-Toueg’s classes
of failure detectors [2, 4, 5, 11, 15, 18, 19, 25]. Basically,
all those works consider that, eventually, the underlying
system behaves in a synchronous way. More precisely,
they consider the partially synchronous system model [5]
which is a generalization of the models proposed in [9].
A partially synchronous system assumes there are bounds
on process speeds and message transfer delays, but these
bounds are not known and hold only after some ﬁnite but
unknown time (called Global Stabilization Time). The
protocols implementing failure detectors in such systems
obey the following principle: using successive approxima-
tions, each process dynamically determines a value ∆ that
eventually becomes an upper bound on transfer delays.
Restricted failure detectors are studied in [24]. Unreli-
able failure detectors with a limited scope accuracy are in-
vestigated in [3, 14, 21, 22, 28]. The notion of realistic fail-
ure detectors has been introduced and investigated in [8].
The evaluation of the quality of service of failure detectors
2As an example different from the consensus problem, we can consider
the Global Data Computation (GDC) problem (a variant of the Interac-
tive Consistency problem [23] in asynchronous distributed systems where
processes can commit only crash failures). It appears that perfect failure
detectors -the ones that never make erroneous suspicions- are both neces-
sary and sufﬁcient to solve GDC [16].
is addressed in [7] (namely, how fast a failure detector de-
tects failures, and how well
it avoids false detection). The
notion of QoS failure detector has been introduced in [27];
those are detectors that indicate when a service does not
meet its quality-of-service requirements. Heartbeat failure
detectors to implement quiescent reliable communication
despite process and link failures are described in [1]. Those
failure detectors can be implemented in asynchronous dis-
tributed systems with a majority of correct processes. These
implementations are not timeout-based.
Content of the paper As just indicated, all the protocols
implementing failure detectors we are aware of assume that
the underlying system is eventually synchronous. They all
have the following features:
• They use timeouts, and consequently are timer-based.
• They do not involve the parameter f deﬁning the max-
imum number of processes that can crash.
These two points make their design very different from most
of the upper layer protocols that use failure detectors, as the
waiting periods of those upper layer asynchronous protocols
are not based on timers, but instead on the value (n − f)
which provides the minimum number of correct processes.
In this paper we are interested in implementations of fail-
ure detectors that are not timer-based but explicitly use the
values n and f. The idea consists in stating a property
PR (involving responses to queries, process identities, and
the values n and f) that makes possible the design of pro-
tocols implementing failure detectors in the asynchronous
distributed systems that satisfy PR. As an example let us
consider 3S, and suppose that each process can broadcast
queries and then, for each query, wait for the ﬁrst (n − f)
corresponding responses (the other responses -if any- that
arrive “too late” are discarded). If there are a correct pro-
cess pi and a set of (f + 1) processes pj such that even-
tually each of those pj always gets responses from pi to
its queries or crashes, then 3S can be implemented. More
explicitly, it is possible to design a protocol satisfying the
completeness and accuracy properties of 3S on top of the
asynchronous distributed systems satisfying the previous re-
quirement. Interestingly, (1) such a requirement does not
involve bounds on communication times (those can be arbi-
trary), and (2) the proposed protocol works for any value of
f (i.e., 1 ≤ f < n).
To convey a part of the intuition that underlies the pro-
posed approach let us consider the case where at most one
process can crash (f = 1), and assume that there is a pair
of processes (pi, pj) such that the channel connecting them
is never the slowest among the channels connecting pi or pj
to the other processes3. As f = 1, those processes pi and pj
3As we will see in Section 5, this behavioral property is actually a par-
ticular instance of the property PR.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
are such that, with the previous query-response mechanism,
they do not falsely suspect each other (a process p(cid:1) suspects
another process pk when, after a query, the (n− 1) respons-
es p(cid:1) was waiting for do not include the response from pk).
As shown in this paper, when satisﬁed by the underlying
system, this assumption allows to build a failure detector of
the class S (a class of failure detectors that allows to solve
the consensus problem [5]). So, consensus can be solved
despite one process crash as soon as there is a channel con-
necting a pair of processes (pi, pj) that is never the slowest
(for each query taken separately) among the channels con-
necting pi or pj to the other processes.
Another part of the underlying intuition can be under-
stood by considering the particular case where the f pro-
cesses that can crash have actually crashed. It appears that
the (n − f) remaining processes deﬁne a reliable asyn-
chronous system. Due to the query-response mechanism,
each process then suspects exactly the f crashed processes.
A message classiﬁcation model for asynchronous system
has been proposed by Fetzer [10]. This model considers
that messages can be classiﬁed either as slow or fast (with-
out reference to the actual speed of slow or fast messages).
The notion of slow and fast is deﬁned with respect to an
imaginary global clock and requires that the transmission
delay of any slow message is more than the double that of
any fast message. (This last requirement forces the imple-
mentation to keep some messages in the input buffers be-
fore delivering them.) Our proposal differs from this model
in several respects. First, there is no notion of fast or slow
messages spanning the whole system. Moreover, there is
no ratio on message speeds. More generally, our approach
has no notion of physical time [27] or message classiﬁca-
tion [10]. It is only based, for each process separately, on
a query-response mechanism and the fact that the responses
from some processes arrive among the (n − f) ﬁrst ones to
the processes that issued queries.
Organization of the paper The paper is made up of seven
sections. Section 2 deﬁnes the computation model. Section
3 presents Chandra-Toueg’s failure detectors. Then, Sec-
tion 4 presents properties that allow to design asynchronous
implementations of failure detectors. Although those prop-
erties are general and not related to Chandra-Toueg-s fail-
ure detectors, the proposed implementation focuses on the
classes S (Strong) and 3S (Eventually Strong); this section
also introduces such an asynchronous protocol. Section 5
considers the particular case f = 1 and provides a proba-
bilistic evaluation of the property for this case. Then, Sec-
tion 6 considers the asynchronous implementation of fail-
ure detectors of the classes P (Perfect) and 3P (Eventually
Perfect). Finally, Section 7 concludes the paper.
2 Computation Model
2.1 Asynchronous Distributed System with Pro-
cess Crash Failures
We consider a system consisting of a ﬁnite set Π of
n ≥ 3 processes, namely, Π = {p1, p2, . . . , pn}. A pro-
cess can fail by crashing, i.e., by prematurely halting.
It
behaves correctly (i.e., according to its speciﬁcation) until
it (possibly) crashes. By deﬁnition, a correct process is a
process that does not crash. A faulty process is a process
that is not correct. As previously indicated, f denotes the
maximum number of processes that can crash (1 ≤ f < n).
Processes communicate and synchronize by sending and
receiving messages through channels. Every pair of pro-
cesses is connected by a channel. Channels are assumed to
be reliable: they do not create, alter or lose messages. There
is no assumption about the relative speed of processes or
message transfer delays.
We assume the existence of a global discrete clock. This
clock is a ﬁctional device which is not known to the pro-
cesses; it is only used to state speciﬁcations or prove pro-