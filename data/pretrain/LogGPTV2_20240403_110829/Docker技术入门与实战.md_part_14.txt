### 4. 测试

成功构建镜像 `4e3936e36e3`。

- 移除中间容器 `84095d6a71c2`
- 移除中间容器 `391a0b606082`
- 第6步: `WORKDIR /etc/nginx`
- 移除中间容器 `6966fb517eed`
- 指定日志目录 `/var/log/nginx`
- 第5步: `VOLUME /etc/nginx/sites-enabled /etc/nginx/certs`
- 移除中间容器 `a0cob0ec6bcc`
- 第4步: `RUN chmod 755 *.sh`
- 移除中间容器 `5c16bf1046aa`
- 运行命令：`sudo docker run -d -P nginx:stable`

### 容器运行信息
- 容器ID: `ab72d235e438`
- 正在运行的容器: `8d3262eaf1b8`, `4e3936e36e31`, `84095d6a71c2`, `36d7b8f0e7cf`, `6966fb517eed`, `e1c0b7bde8cf`, `9f1e239daf52`, `3b64e8cb7119`
- 端口暴露: `EXPOSE 443`, `EXPOSE 80`
- 映射端口: `0.0.0.0:49192->443/tcp, 0.0.0.0:49193->80/tcp`

### Nginx内核优化参数
```plaintext
net.ipv4.tcp_synack_retries = 1
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_max_syn_backlog = 262144
net.ipv4.tcp_max_orphans = 3276800
net.core.somaxconn = 262144
net.core.netdev_max_backlog = 262144
net.core.wmem_max = 16777216
net.core.rmem_max = 16777216
net.core.rmem_default = 8388608
net.core.wmem_default = 8388608
net.ipv4.tcp_wmem = 4096 16384 4194304
net.ipv4.tcp_rmem = 4096 87380 4194304
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_sack = 1
net.ipv4.tcp_max_tw_buckets = 6000
kernel.shmall = 4294967296
kernel.shmmax = 68719476736
kernel.shmmni = 65536
kernel.sem = 250 32000 100 128
fs.file-max = 65536
vm.swappiness = 0
```

为了充分发挥Nginx的性能，可以对系统内核参数进行调整。

### Tengine 镜像

#### Dockerfile
```dockerfile
# 设置继承自我们创建的sshd镜像
FROM sshd:dockerfile

# 创建Nginx用户
RUN adduser --disabled-login --gecos 'Tengine' nginx

# 定义工作目录
WORKDIR /home/nginx

# 下载并安装Tengine
RUN su nginx -c 'git clone https://github.com/alibaba/tengine.git'
WORKDIR /home/nginx/tengine

# 安装编译环境
RUN apt-get install -y build-essential debhelper make autoconf automake patch libpcre3-dev git-core
ENV DEB_BUILD_OPTIONS nocheck

# 设置时区
RUN echo "Asia/Shanghai" > /etc/timezone && dpkg-reconfigure -f noninteractive tzdata

# 安装其他依赖
RUN apt-get install -y dpkg-dev fakeroot pbuilder gnupg dh-make libssl-dev

# 添加我们的脚本，并设置权限
ADD run.sh /run.sh
RUN chmod 755 /run.sh

# 定义输出端口
EXPOSE 80
EXPOSE 443

# 定义输出命令
CMD ["/run.sh"]
```

### 启动和测试
1. 构建镜像：
   ```bash
   sudo docker build -t nginx:albb .
   ```

2. 启动容器：
   ```bash
   sudo docker run -d -P nginx:albb
   ```

3. 查看容器信息：
   ```bash
   sudo docker ps
   ```

4. 进入容器查看进程和默认映射的端口：
   ```bash
   sudo docker exec -it <container_id> /bin/bash
   netstat -tunlp
   ```

5. 访问本地的49195端口进行测试：
   ```bash
   curl http://127.0.0.1:49195
   ```

返回的内容是淘宝版本的Nginx特有的页面。

### Tengine 编译参数和模块特性
```plaintext
root@ff4650e77c53:/etc/nginx# nginx -V
Tengine version: Tengine/2.0.3
built by gcc 4.8.2 (Ubuntu 4.8.2-19ubuntu1)
TLS SNI support enabled
--prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-mail --with-mail_ssl_module --with-file-aio --with-ipv6 --with-http_spdy_module
```

### 加载的模块
```plaintext
ngx_http_core_module (static)
ngx_http_log_module (static)
ngx_http_upstream_module (static)
ngx_http_access_module (static)
ngx_http_auth_basic_module (static)
ngx_http_autoindex_module (static)
ngx_http_geo_module (static)
ngx_http_map_module (static)
ngx_http_split_clients_module (static)
ngx_http_referer_module (static)
ngx_http_rewrite_module (static)
ngx_http_proxy_module (static)
ngx_http_fastcgi_module (static)
ngx_http_uwsgi_module (static)
ngx_http_scgi_module (static)
ngx_http_memcached_module (static)
ngx_http_limit_conn_module (static)
ngx_http_limit_req_module (static)
ngx_http_empty_gif_module (static)
ngx_http_browser_module (static)
ngx_http_upstream_ip_hash_module (static)
ngx_http_upstream_least_conn_module (static)
ngx_http_upstream_keepalive_module (static)
ngx_http_upstream_zone_module (static)
ngx_http_headers_module (static)
ngx_http_charset_module (static)
ngx_http_file_cache_module (static)
ngx_http_ssl_module (static)
ngx_http_spdy_module (static)
ngx_http_gzip_static_module (static)
ngx_http_random_index_module (static)
ngx_http_secure_link_module (static)
ngx_http_stub_status_module (static)
```

以上是关于Nginx和Tengine的详细配置和测试过程。