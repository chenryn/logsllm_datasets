# Kubernetes 环境中的威胁行为者
威胁参与者是在系统中执行的实体或代码，资产应该受到保护。从的防御立场来看，你首先需要了解你的潜在敌人是谁，否则你的防御策略会过于模糊。Kubernetes 环境中的威胁因素可大致分为三类:
1.  **终端用户**:可以连接到应用的实体。这个参与者的入口点通常是负载平衡器或入口。有时，Pod 、容器或节点端口可能直接暴露在互联网上，为最终用户增加了更多的入口点。
2.  **内部攻击者**:在 Kubernetes 集群内部具有有限访问权限的实体。集群中的恶意容器或产生的 PODS 就是内部攻击者的例子。
3.  **权限攻击者**:在 Kubernetes 集群中拥有管理员访问权限的实体。基础设施管理员、受损`kube-apiserver`实例和恶意节点都是权限攻击者的例子。
威胁角色的例子包括脚本小子、黑客主义者和民族国家角色。所有这些行为者都属于上述三类，这取决于行为者在系统中的位置。
下图强调了 Kubernetes 生态系统中的不同参与者:
![Figure 3.3 – Threat actors in Kubernetes environments ](img/B15566_03_003.jpg)
图 3.3–Kubernetes 环境中的威胁因素
如图所示，最终用户通常与入口控制器、负载平衡器或 pod 公开的 HTTP/HTTPS 路由进行交互。最终用户是最没有权限的。另一方面，内部攻击者对集群内资源的访问权限有限。权限攻击者拥有最高权限，能够修改集群。这三类攻击者有助于确定威胁的严重程度。与涉及权限攻击者的威胁相比，涉及最终用户的威胁具有更高的严重性。虽然这些角色在图中看起来是孤立的，但是攻击者可以使用 eleva 权限攻击从最终用户变成内部攻击者。
# Kubernetes 星团中的威胁
随着我们对 Kubernetes 组件和威胁参与者的新理解，我们将继续进行 Kubernetes 集群的威胁建模之旅。在下表中，我们涵盖了主要的 Kubernetes 组件、节点和 PODS。节点和荚是运行工作负载的基本 Kubernetes 对象。请注意，所有这些组件都是资产，应该受到保护以免受到威胁。这些组件中的任何一个受到损害都可能导致下一步的攻击，例如权限升级。另外，注意`kube-apiserver`和`etcd`是 Kubernetes 星团的大脑和心脏。如果他们中的任何一个妥协了，游戏就结束了。
下表突出显示了默认 Kubernetes 配置中的威胁。此表还强调了开发人员和集群管理员如何保护其资产免受这些威胁:
![](img/Table_3.1-a.jpg)
![](img/Table_3.1-b.jpg)
![](img/Table_3.1-c.jpg)
![](img/Table_3.1-d.jpg)
这张表只强调了一些威胁。还有更多的威胁，将在后面的章节中介绍。我们希望前面的表格能启发您大声思考什么需要保护，以及如何在您的 Kubernetes cluste r 中保护它。
# Kubernet es 中的威胁建模应用
现在我们已经了解了 Kubernetes 集群中的威胁，接下来让我们讨论部署在 Kubernetes 上的应用的威胁建模会有什么不同。在 Kubernetes 的部署增加了威胁模型的复杂性。Kubernetes 增加了额外的考虑因素、资产、威胁参与者和新的安全控制，在调查对已部署应用的威胁之前需要考虑这些因素。
让我们看一个三层网络应用的简单例子:
![Figure 3.4 – Threat model of a traditional web application ](img/B15566_03_004.jpg)
图 3.4–传统网络应用的威胁模型
在 Kubernetes 环境中，相同的应用看起来有些不同:
![Figure 3.5 – Threat model of the three-tier web application in Kubernetes ](img/B15566_03_005.jpg)
图 3.5–Kubernetes 中三层网络应用的威胁模型
如上图所示，web 服务器、应用服务器和数据库都在 pods 内部运行。让我们对传统网络架构和云原生架构之间的威胁建模进行一个高级比较:
![](img/Table_3.2-a.jpg)
![](img/Table_3.2-b.jpg)
总结前面的对比，你会发现云原生架构中需要保护的资产更多，在这个空间中你会面临更多的威胁行为者。Kubernetes 提供了更多的安全控制，但它也增加了更多的复杂性。更多的安全控制不一定意味着更多的安全。记住:复杂性是安全的敌人。
# 总结
在本章中，我们首先介绍了威胁建模的基本概念。我们讨论了 Kubernetes 环境中的重要资产、威胁和威胁参与者。我们讨论了不同的安全控制和缓解策略，以改善 Kubernetes 集群的安全状况。
然后，考虑到在 Kubernetes 中部署的应用，我们完成了应用威胁建模，并将其与传统的单一应用威胁建模进行了比较。Kubernetes 设计引入的复杂性使得威胁建模更加复杂，正如我们已经展示的:需要保护的资产更多，威胁参与者更多。更多的安全控制不一定意味着更多的安全。
您应该记住，尽管威胁建模可能是一个漫长而复杂的过程，但了解您的环境的安全状况是值得做的。为了更好地保护 Kubernetes 集群，同时进行应用威胁建模和基础设施威胁建模是非常必要的。
在下一章中，为了帮助您了解如何将 Kubernetes 集群保护到下一个级别，我们将讨论最小权限原则以及如何在 Kubernetes 集群中实现它。
# 问题
1.  您何时开始对应用进行威胁建模？
2.  Kubernetes 环境中有哪些不同的威胁行为者？
3.  说出对默认 Kubernetes 部署的最严重威胁之一。
4.  为什么在 Kubernetes 环境中威胁建模更加困难？
5.  与传统架构中的部署相比，Kubernetes 中部署的攻击面如何？
# 进一步阅读
Bits trail 和 Atredis Partners 在 Kubernetes 组件的威胁建模方面做得很好。他们的白皮书详细强调了每个 Kubernetes 组件中的威胁。您可以在[https://github . com/Kubernetes/community/blob/master/WG-security-audit/discovery/Kubernetes % 20 thrat % 20 model . pdf](https://github.com/kubernetes/community/blob/master/wg-security-audit/findings/Kubernetes%20Threat%20Model.pdf)上找到白皮书。
请注意，威胁建模的目的、范围和方法与前面的白皮书不同。所以，结果看起来会有些不同。