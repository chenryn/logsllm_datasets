# 2020 RoarCTF 密码学 Write Up
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
这次比赛密码学一共有四题，除了EZRSA真的比较easy，其他题还是有一些做头
，尤其最后一道ECDSA个人感觉出的挺不错的，想了还挺久的，做题的时候思维有点跳不出来，还是太菜了。
先来两道RSA
## EZRSA
    from Crypto.Util.number import *
    from gmpy2 import *
    from secret import *
    assert(flag.startwith('flag{')) and (flag.endwith('}'))
    assert(is_prime(beta) and len(bin(beta)[2:]) == 512) 
    assert(len(bin(x)[2:]) == len(bin(y)[2:]))
    # This is tip!!!
    assert(tip == 2*x*y*beta + x + y)
    p = 2*x*beta + 1
    q = 2*y*beta + 1
    assert(is_prime(p) and is_prime(q))
    n = p*q
    e = 65537
    m = bytes_to_long(flag)
    enc = powmod(m,e,n)   
    #n = 
    #beta = 
    #e =
题目提供了n，beta，e
这道题意思很明确了，n = p * q = 4xybeta ^ 2 + 2(x+y )beta + 1
很自然的能得到 tip = (n-1)//beta
然后我们给tip模上beta，我们就能得到 (x+y)%beta ，如果我们能够获得x + y，那么显然我们也能获得x *
y，然后解个方程即可获得x和y，然后就能获得p和q，继而解密rsa得到flag
那么对于获得 x + y这个问题，由于beta是512位，我们去看一下n的位数为 2068，那么平均一下p的位数就是1034了，那么x的位数大概就是1034
– 1 – 512 = 521，x + y 估计也就是522位左右，和beta位数差了10位左右，完全是可以暴力的范围
参考脚本
    n =
    e = 65537
    enc = 
    beta =
    tip = (n-1)//(2*beta)
    for i in range(10000):
        #获取x + y的值
        x_add_y = tip % beta + beta*i
        #根据x + y 获取 x * y
        x_mul_y = (tip - x_add_y)//(2*beta)
        try:
            if iroot(x_add_y**2 - 4*x_mul_y,2)[1]:
                #解方程获取x 和 y
                y = (x_add_y - iroot(x_add_y**2 - 4*x_mul_y,2)[0] )//2
                x = x_add_y - y
                p = 2*y*beta + 1
                q = 2*x*beta + 1
                phi = (p-1)*(q-1)
                d = inverse(e,int(phi))
                print long_to_bytes(pow(enc,d,n))
        except:
            pass
## reverse
    from Crypto.Util.number import *
    from gmpy2 import *
    from secret import *
    assert(flag.decode().startswith('flag{')) and (flag.decode().endswith('}'))
    def reverse(x):
        y = 0
        while x != 0:
            y = y*2 + x%2
            x = x // 2
        return y
    while True:
        p = getStrongPrime(512)
        q = reverse(p)
        if is_prime(q):
            break
    n = p*q
    e = 65537
    m = bytes_to_long(flag)
    enc = powmod(m,e,n)
    #n = 
    #enc =
这一道题就是一个正常的RSA，但是生成的p和q再二进制上是相反的，即若p是11（0b1011），那么q就是13（0b1101）
其实有点像一个算法题，我们可以通过测试得知，如果p * q = n ，那么p的最低位 乘以 q的最低为 等于 n
的最低为，基于这个事实，我们可以从最低位一位一位爆破p和q，但是实际操作后会发现，可能性太多，无法剪枝，那么复杂度过高的情况下这种做法是不可取的。
所以我们在以上的基础再加一个判断：
由于我们知道 p的高位是q的低位，那么我们将p反过来然后末尾补0，补齐512位，这个肯定会比真真的q小，同理将q反过来末尾补0，这样子我们可以得到p_min
和 q_min，那么p_min * q_min 肯定是小于 n的，如果p_min * q_min > n，那么就可以舍弃这个可能性。
同理末尾补1就能得到p_max 和 q_max ，如果p_max * q_max < n 那么这种可能行也可以舍弃
参考代码
    from Crypto.Util.number import *
    from gmpy2 import *
    from itertools import product
    n = 158985980192501034004997692253209315116841431063210516613522548452327355222295231366801286879768949611058043390843949610463241574886852164907094966008463721486557469253652940169060186477803255769516068561042756903927308078335838348784208212701919950712557406983012026654876481867000537670622886437968839524889
    ct = 103728452309804750381455306214814700768557462686461157761076359181984554990431665209165298725569861567865645228742739676539208228770740802323555281253638825837621845841771677911598039696705908004858472132222470347720085501572979109563593281375095145984000628623881592799662103680478967594601571867412886606745
    max_idx = 1
    pq_list = [(1,1)]
    for idx in range(1, 512):
        mod = 2 ** (idx + 1)
        new_pq_list = []
        for p, q in pq_list:
            for i, j in product(range(2), repeat=2):
                np = i * 2 ** idx + p
                nq = j * 2 ** idx + q
                #judge1
                if (np * nq) % mod != n % mod:
                    continue
                #judge2
                rp_min = int('{:b}'.format(np)[::-1].ljust(512, '0'), 2)
                rq_min = int('{:b}'.format(nq)[::-1].ljust(512, '0'), 2)
                rp_max = int('{:b}'.format(np)[::-1].ljust(512, '1'), 2)
                rq_max = int('{:b}'.format(nq)[::-1].ljust(512, '1'), 2)
                if n < rp_min * rq_min or rp_max * rq_max < n:
                    continue
                #可能性集合
                new_pq_list.append((np, nq))
        print(len(new_pq_list))
        print(idx)
        pq_list = new_pq_list
运行代码大概要个十多分钟。然后可能性集合能达到快二十万，我们遍历这个集合，找到其中的两个512位素数即为p和q，进而RSA解密即可。
然后是两个需要交互的题目，给的是Crypto_System，一个给了源码， 一个没给，但两道题核心都是构造一个等式然后解方程。先来看看这个给了源码的。
## Crypto_System
    # These three are constants
    p = 12039102490128509125925019010000012423515617235219127649182470182570195018265927223
    g = 10729072579307052184848302322451332192456229619044181105063011741516558110216720725
    # random generation
    m1 = "test1"
    m2 = "test2"
    # Initialization
    r1, s1 = sign(m1)
    # r1 will be provided to player
    def int2str(data, mode="big"):
        if mode == "little":
            return sum([ord(data[_]) * 2 ** (8 * _) for _ in range(len(data))])
        elif mode == "big":
            return sum([ord(data[::-1][_]) * 2 ** (8 * _) for _ in range(len(data))])
    def get_parameter(m):
        x = int2str(m, 'little')
        y = powmod(g, x, p)
        a = bytes_to_long(hashlib.sha256(long_to_bytes(y).rjust(128, "\0")).digest())
        b = powmod(a, a, p - 1)
        h = powmod(g, b, p)
        return y, h, b
    def sign(m):
        y, h, b = get_parameter(m)
        r = getStrongPrime(512)
        s = (y * powmod(h, r, p)) % p 
        return str(r),str(s)
    def verify(m, r, s):
        y, h, b = get_parameter(m)
        if s == ((y * powmod(h, r, p)) % p):
            return True
        else:
            return False
    # Give me the (r2,s2)
    if r2 != r1 and s2 == s1 and verify(m2, r2, s2):
        print("Congratulation!Here is your flag: %s" % flag)
这道题的他会提供两个msg，然后你需要给他们签名，要求是，签名中两者的s相等，但是r不相等
我们提取一下信息，
签名的验证是 s == ((y * powmod(h, r, p)) % p)
其中 x 就是要被签名的信息， y = powmod(g, x, p)， h = powmod(g, b, p) ， b = powmod(a, a, p
– 1) ，
a = bytes_to_long(hashlib.sha256(long_to_bytes(y).rjust(128, “\0”)).digest())
,显得挺麻烦，但是由于我们是知道参数x, g,
p的，因此y是一个已知的常数，从而a也可以看成一个已知常数即可，继而b、h也会是一个已知常数。（全都已知，完全不用管了）
那么s = powmod(g, x, p) * powmod(powmod(g, b, p), r, p)) == powmod(g, x + br, p)
我们要给不同的x，有着相同的s和不同的r，那么可以构造我们的目标等式： powmod(g, x1 + b1r1, p) == powmod(g, x2 +
b2r2, p)
很自然的我们可以把这个方程转化为 x1 + b1r1 == x2 + b2r2，由于模数p，那么g应该是一个原根叭。那么阶就是p – 1了，所以完整的应该是
x1 + b1r1 ≡ x2 + b2r2 （mod p – 1 ） 固定r1，那么有r2 = (x1 + b1r1 – x2) * inverse(b2
, p-1)，
这里会有一个问题，就是b2 和 p –
1不互素怎么办？撞就完事了，由于决定b2的是msg2，每次连接msg2都是随机的，所以撞就完事，经过测试，互素的概率还是蛮高的。
或者也可以提前将方程两边整除b2 和 p – 1的公因数，但如果没法整除，那就GG了，还是撞叭23333
参考脚本
    from pwn import *
    from Crypto.Util.number import *
    sh=remote("139.129.98.9","30001")
    from pwnlib.util.iters import mbruteforce
    from hashlib import sha256
    import hashlib
    from math import gcd
    context.log_level = 'debug'