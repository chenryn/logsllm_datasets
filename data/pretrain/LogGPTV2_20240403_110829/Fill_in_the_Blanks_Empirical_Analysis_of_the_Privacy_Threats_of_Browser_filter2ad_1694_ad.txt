1,119
covered
143*
visibility_hidden
497
off_screen
144
off_ancestors_overflow
75
non_effective_size
transparent_ancestor
123
43
transparent
visibility_hidden_ancestor
-
*Chrome only autofills  fields hidden with these techniques.
Fields Domains
12,675
2,134
1,554
211
131
131
74
42
11
1
9,177
1,271
1,129
109
94
88
61
23
11
1
692
468*
769
117*
249
91
53
75
27
-
Concealment techniques. In Table 3 we provide detailed sta-
tistics about the techniques that we detected being used in the wild.
Leveraging the display attribute (either directly or though the ele-
ment ancestors’) is the most prevalent approach, while the use of
overlays to cover fields is also widespread. Placing fields off-screen
is also fairly common in Chrome, but seen less widely in Firefox.
Interestingly, while leveraging the display property of ancestors
is the most common technique, we do not see the same approach
used often with the visibility attribute; in fact, we only identify
one such case in Firefox. While Chrome does not autofill input
fields hidden through display:none and visibility:hidden, it
does autofill drop-down menus hidden that way. Finally, we ana-
lyzed the hidden drop-down menus detected by our system and
found that all of them were collecting types commonly associated
with drop-down menus – in other words, we did not identify any
domains using our field-type mismatch technique.
Hidden Elements. Figure 5 shows how many hidden elements
were autofilled across domains. This is the aggregate number from
all the forms detected on each domain. Again, we see that Firefox
autofills more hidden elements due to the lack of any invisibility
checks, while the vast majority of websites have less than 10 hid-
den elements. The largest number of hidden fields within a single
domain was 45 and 256 for Chrome and Firefox respectively.
Next we focus on what type of user information websites are
obtaining from hidden autofilled form fields. As shown in Figure 6,
we see a variety of types being targeted. While more generic fields
like country and state are commonly collected, we also see a large
number of sites collecting more sensitive and user-identifying infor-
mation. For instance, the user’s first and last name are the second
and third most often collected values in Firefox, while the user’s
email address, phone number and address-line1 are popular targets
in both browsers. In more detail, we find that 11.2% and 10.9% of
the domains collect the user’s first and last name in Firefox, while
in Chrome that drops to 3.2% and 2.8%. This significant skew in the
relative percentages in Chrome is due to the large number of do-
mains with state and country information that were autofilled. As
aforementioned, Chrome does not enforce its visibility constraints
to drop-down menus, resulting in this deviation. Finally, we find
that 15 domains obtain the user’s credit card expiration date in
Chrome. In Firefox, we detected 2 domains with hidden fields for
the credit card expiration date and the cardholder’s name. Based on
our findings we believe that attackers have not yet discovered our
techniques for bypassing the constraints for credit card numbers.
Anti-bot detection. Certain sites may use hidden fields as a
way of detecting bots, assuming that users cannot fill in fields that
they do not see. However, this assumption is incorrect, due to the
autofill functionality of browsers. While we cannot definitively
infer the motivation behind the inclusion of hidden fields, we iden-
tify websites where all hidden fields have visible counterparts as
potential instances of this strategy. We find 272 (14.75%) such sites
for Chrome and 305 (5.76%) for Firefox. This difference is due to
the fact that Firefox will only fill out one field for a given type; as
such, in all these cases only the hidden element gets filled but the
visible one does not (due to the hidden one being first or the visible
one having the autocomplete attribute set to “off”). Overall, even
if the motivation in these cases is not malicious, it still reflects a
privacy-invasive practice where users unknowingly leak private
data. For instance, a Chrome user may decide to delete certain visi-
ble fields that were autofilled but still end up disclosing that data.
Similarly, a Firefox user would see an empty visible field of a given
type but still have their information exposed in the hidden field.
Firefox label-granularity deception. Next, we analyze all the
data collected from our Firefox crawl, and explore whether domains
are potentially misusing the coarse granularity of the notification
labels. In more detail, we identify domains where the most specific
visible element of a given category (see Figure 3) is coarser than
any hidden elements of the same category. An example of such
a case would be a domain where the user is shown a “country”
element (part of the Address category) while an element for “street-
address” (also part of the Address category) is hidden. Overall, we
find that 874 domains (16.5%) exhibit this behavior. If we filter out
cases where the combination of visible fields equals the granularity
of information obtained from hidden fields (e.g., first-name and
last-name are visible, and name is hidden) we are still left with
650 domains where the Firefox warning message is inadequate at
informing users about the true extent of the PII information they
are divulging to the website. Figure 7 shows the percentage of
domains, out of all the domains that hide elements, exhibiting this
behavior. In aggregate, 12.3% of all autofillable forms with hidden
fields deceive users into divulging more specific (i.e., identifying)
information than what they intend, or expect, based on the fields
that are visible to them and Firefox’s notification. While we cannot
infer if these domains are purposefully or inadvertently exploiting
the label-granularity mismatch, the inherent limitations of this
approach are currently exposing users to considerable risk.
Detection accuracy. To assess the effectiveness of our heuris-
tics we randomly selected 20 pages per concealment technique,
where we had detected hidden elements, and manually inspected
their code to establish whether these elements are actually hidden
or not. As such, we have manually inspected a total of 140 pages
(70 pages with hidden elements autofilled in Chrome, and 70 in
Firefox). Since our heuristics are the same for all pages, irrespective
of the browser, our results are reported in aggregate.
These 140 pages have 828 autofillable input elements in total,
where 282 of them are detected by our heuristics as hidden. Through
manual inspection we have verified that all of these 282 elements
Figure 5: Hidden elements across all
forms detected within each domain.
Figure 6: Most common types of hidden
autofilled fields.
Figure 7: Fraction of domains with hid-
den, autofillable elements for which
Firefox’s coarse labels are insufficient.
are indeed not visible to the user (TP rate: 100%) and that there are
no other hidden elements in any page that our heuristics failed to
detect (FN rate: 0%). From the 546 input elements that are visible,
our heuristics incorrectly labeled 6 elements as hidden (FP rate:
1.09%), in 3 of the 140 pages. In the first case, the 4 elements that
we detect as hidden are fully transparent, but the developer used
the CSS ::before selector to include visible pseudo-elements on top
of them, to make them noticeable to the user. In the second case, a
popup appears after the user scrolls the page, and covers one of the
input elements, which we detect as hidden. Last, in the third case,
the developer used a list inside of an input element to implement a
custom drop-down menu, which our heuristics considered as being
covered by another element.
7 CASE STUDIES
In this section we present some interesting examples of hidden
form field use cases that we identified during our large-scale study.
E-commerce. We identified a Brazilian e-commerce retail store
that has a visible zip-code input field on every product page, offering
to calculate the shipping and delivery time. However, the form also
includes hidden autofillable elements that obtain the user’s full
name, email address, and phone number.
Marketing. We identified 27 domains that used code from a “re-
tail digital marketing automation platform” that specializes in email
marketing and mobile messaging. While this marketer’s code cre-
ates a visible email input field, so users can subscribe to newsletters,
their code also creates two autofillable hidden fields that obtain the
user’s first and last name. While the autocomplete attribute is set
to off, this is ignored by Chromium-based browsers. Furthermore,
this part of the form has an explicit comment urging developers to
not delete these fields as they are intended for use by the marketing
system. Finally, the form is submitted directly to the marketer’s
servers and not to the first-party origin.
Anti-bot detection. During our experiments we found that cer-
tain sites employ MailChimp, a popular email marketing company
that uses hidden form elements as a method of detecting bot-driven
signups. While such automated actions are typically prevented
through CAPTCHAs, recent studies have demonstrated effective
attacks even against the most prevalent CAPTCHA services [36, 47].
This may be the motivation behind the deployment of additional
form-related defenses. However, apart from the obvious privacy
implications of this practice, where users may unintentionally dis-
close information that they are not willing to share with a given
domain, this also introduces additional usability issues that affect
users and vendors alike. As Chrome ignores the autocomplete
attribute, Chrome users’ autofill functionality is resulting in false
positives that trigger the anti-bot detection, thus, preventing users
from registering [8]. As this can easily drive users away, there is a
direct negative impact for the users as well as the web sites.
Firefox label granularity. As described in Section 5, the coarse-
grained nature of the warning message shown by Firefox creates an
avenue for misuse, as websites can reveal generic, non-identifying,
fields and then hide specific, user-identifying fields of the same cate-
gory. One such example is the US News website which has a manda-
tory visible field for the ZIP code, but has various more-specific
address-related hidden elements, including street-address.
8 COUNTERMEASURE
The attacks that we demonstrate pose a significant privacy threat
as they enable the stealthy exfiltration of sensitive user data. As
browser vendors may not adequately address this issue, we have
developed an extension for Chrome that can mitigate our attacks.
Operation. After a page is loaded, our extension parses the
DOM to identify all the form elements and leverages the heuristics
that we have devised (Section 3) for identifying whether any of
those are hidden from the user. Then, based on its mode of operation
it either shows a warning to the user about these elements (lax
mode) or automatically removes them from the page (strict mode).
We decided to remove these elements from the page instead of
setting their autocomplete attribute to “off”, as Chrome ignores
this attribute and autofills those elements anyway.
Methodology. Our extension first identifies all the  and
 tag elements of each form in the page, and determines
which of those are autofillable. For this step our extension checks
whether a form has at least 3 such elements or whether it has only
2 elements which use the autocomplete attribute to specify the
expected value type (e.g., autocomplete=“name”). It also checks if
there is at least one visible input field, which is needed for triggering
autofill. Moreover, our extension uses the same regular expressions
as Chromium for determining each element’s autofill type.
For the autofillable elements, our extension uses the method
getComputedStyle() to retrieve and check their display, visibility
00.20.40.60.81 1 10 100 256Domains (CDF)Hidden Fields (log)FirefoxChrome 1 10 100 1000address-level1first-namelast-namecountryaddress-level2telorganizationzip-codeaddress-line1emailnameaddress-line2middle-namestreet-addressDomains (log)FirefoxChrome 0 10 20 30 40 500-10k10k-20k20k-30k30k-40k40k-50k50k-60k60k-70k70k-80k80k-90k90k-100kDomains (%)Domain Rankand opacity attributes, as well as the attributes of their parent
nodes. To detect if an element is placed outside the boundaries of
the screen or whether it is covered by another element, we use
getBoundingClientRect() to get its size and position relative to
the viewport. To detect covered elements we calculate their center
points and use elementFromPoint() to get the top-most element
at that point, and check against those and their ancestors’ properties
and position. Similarly we check the position of their ancestors
and whether the elements are placed out of their overflow bounds.
Finally, we decided to preemptively detect and remove deceptive
elements when the page is loaded instead of when the user clicks on
a form element (i.e., strict mode), to avoid potential race conditions
that would allow a page to obtain the user’s data.
Performance. To measure the overhead imposed by our exten-
sion, we randomly chose 500 pages that have hidden autofillable
elements from our large-scale study and visit them with our ex-
tension in place. We observe that it takes only 13.09ms on average
(median: 12.78ms, 75th: 15.41ms, and 95th: 20.36 ms), to parse the
page and run our heuristics for detecting all the hidden form el-
ements. As such, while our countermeasure should optimally be
incorporated by the browser, the performance impact of our exten-
sion is negligible and will not affect the user’s experience.
Detectability. Browser extensions can be detected based on the
uniqueness of their behavior when interacting with a page. This en-
ables browser fingerprinting [39, 43] and the inference of sensitive
data [27]. Our extension is detectable, as malicious websites can
infer its presence by including hidden form elements and detecting
if they get modified. While our extension can be detected and used
as part of a browser fingerprint, we consider that the more spe-
cific and uniquely identifying user information that is obtainable
when our countermeasure is not in place far outweighs the risk of
installing our extension.
9 DISCUSSION AND FUTURE WORK
Here we further discuss additional aspects of our work, and also
highlight limitations and possible future research directions.
Attack likelihood. Our work demonstrates two types of attacks
with different prerequisites. The first type, which aims to obtain user
PII through hidden form fields, requires the victim to use autofill.
While research exists on how to improve the usability of forms to
reduce the likelihood of users leaving prior to completion [33], sites
do not actually need the user to submit the form since they can
read the autofilled data. Nonetheless, one could argue that more
cautious users will not even trigger autofill on less trustworthy sites.
In such cases we can deploy our preview attack – users only need
to click on a form field and move their mouse downwards so as to
momentarily pass over the preview window. Furthermore, recent
work has demonstrated how click interception remains a threat [46];
such techniques can be combined with our second attack to infer
the user’s sensitive information once they are tricked into clicking
the form field. Similarly, recent studies have explored the use of
deception in a different context (e.g., shopping sites [31], mobile
apps [22]). While most dark patterns they explore are not relevant
to our work, techniques that involve the aesthetic manipulation of
the UI (e.g., disguising ads) could potentially be applicable.
Attack stealthiness. Common classes of deceptive attacks typ-
ically leave behind some form of visual clues that users can detect
(e.g., the URLs in phishing attacks). While attacks can leverage be-
haviors in certain browsers to further obscure these clues [30], the
clues are still present in parts of the page that average users have
been increasingly conditioned to check. Additionally, while more
sophisticated campaigns will trick the average user [37], typical
phishing attacks can be detected by average users [13]. On the other
hand, the attacks we demonstrate in this paper do not leave such
visual clues behind; unless users actually inspect the web page’s