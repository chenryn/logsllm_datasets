Conversely, the “conjunction” is optional. T2 template is for
expressing RV behaviors that have preconditions and post-
conditions in PPL formulas. In T2 template, “if” expresses
imply and “iff” represents “if and only if”, where “if” is used
for unidirectional statements and “iff” is used for bidirectional
statements. For instance, given a policy stating that “if the
RV lands on the ground and the pilot turns on disarming,
then the engine must be turned off”, the users can represent
this policy with T2 template: “if land is true and disarm is
on, then engine is off”. Here, “land is true” and “disarm is
on” are preconditions to trigger a post-condition (“engine is
off”). Lastly, we implement a translator that converts LTL to
PPL formulas so that PGPATCH can leverage the existing LTL
formulas from logic bug-ﬁnding tools to ﬁx bugs (Section V-B).
III. EXAMPLES OF LOGIC BUGS
A. GPS Fail-Safe Bug
PX4 documentation states that “If the time exceeds COM_-
POS_FS_DELAY seconds after GPS loss is detected, the GPS
fail-safe must be triggered”. This policy is formally expressed
in PPL syntax as: “If GPSloss is on and Losstime is more
than COM_POS_FS_DELAY, then GPSfail is on”. PX4 v1.7.4
forces the COM_POS_FS_DELAY conﬁguration parameter to have
a value in the valid range (from 1 to 100) at lines 4 and 5 in
Listing 2. However, developers remove these lines from PX4
v1.9. If users assign a value outside the valid range (e.g., -1) to
the parameter, it causes PX4 to fail to trigger the GPS fail-safe
and randomly ﬂy in the air when it loses GPS signals [41].
B. Sailboat Pre-Arming Bug
ArduPilot documentation states that “pre-arming must re-
turn an error when a sailboat is turned on without a wind
vane”, formally expressed with the formula: “If armed is
false and SAIL_ENABLE is 1 and WNDVN_TYPE is 0, then
pre_arm_checks is error”. This policy intends that the RV
software must not allow the sailboat to operate without the wind
vane because RVs cannot navigate a waypoint without wind
direction obtained from the wind vane. However, ArduPilot did
not implement this, causing the RV to deviate from its planned
path [1]. To ﬁx this bug, developers add an “if statement” into
the source code, as shown in Listing 3.
if (ap.land_complete)
// Stop motors
1 void Copter::failsafe_battery_event(void) {
2
3
4
5
6
7
&& home_distance > wp_nav.get_wp_radius())
// Switch to RTL
else // Switch to LAND
else if (g.failsafe_battery_enabled == FS_BATT_RTL
Listing 4: Battery Fail-Safe Bug [13].
_constraints.tilt = _param_mpc_tiltmax_lnd.get();
1 void FlightTaskAutoMapper::_prepareLandSetpoints() {
2
3 ...
4 bool FlightTaskManualAltitude::activate() {
5
_constraints.tilt = _param_mpc_man_tilt_max.get();
Listing 5: Tilt Angle Bug [77].
C. Battery Fail-Safe Bug
When a fail-safe condition is detected (e.g., due to a low-
battery condition), and the RV is within 2 meters from its
home location, ArduPilot must change the ﬂight mode to the
LAND mode, making the RV decrease its altitude and land on
the ground. If the RV is farther than 2 meters from its home
location, ArduPilot must switch the ﬂight mode to the RTL
mode. This mode ﬁrst makes the RV increase its altitude by
RTL_ALT parameter value, then, it makes the RV navigate to its
home position and land on the ground. This is represented in
PPL syntax as: “If Failsafe is on and FS_BATT_ENABLE is
2 and home_distance is more than 2, then mode is RTL”.
However, ArduPilot decides its ﬂight mode based on the
WPNAV_RADIUS parameter, instead of the hard-coded 2 meters
as depicted at line 5 in Listing 4. This causes the RV to operate
in an incorrect ﬂight mode.
D. Tilt Angle Bug
RV control programs typically limit a tilt range to prevent
drastic behaviors. However, the programs must not limit tilt
in LAND or RTL ﬂight modes, as this may cause the RV to
lose position control when it is descending. A policy for this
behavior is deﬁned as: “If mode is LAND or mode is RTL, then
_constraints.tilt is disabled”. However, PX4 limits the
tilt value in LAND and RTL modes [77], which violates the
above PPL formula, as shown in Listing 5.
E. Exploiting Logic Bugs
Attackers can exploit logic bugs to perform hard-to-detect
attacks. For instance, an attacker can exploit the Battery Fail-
Safe Bug (Section III-C) to crash an RV on the ground, by
assigning 1 to WPNAV_RADIUS and 300 to RTL_ALT, the RTL
mode’s minimum altitude. Then, if the RV’s location is 2 meters
from its home location, and the fail-safe is triggered, ArduPilot
decides to change the current ﬂight mode to RTL mode, since
the distance between the RV and the home location is greater
than the WPNAV_RADIUS parameter value (i.e., 1 meter). Then,
the RV keeps increasing its altitude by 300 meters. This altitude
increase can completely deplete the RV’s battery (especially
if the fail-safe was triggered due to a low-battery condition),
leading the RV to a physical crash. Similarly, the adversary
can exploit the other logic bugs introduced in Section III.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
31828
1) Preprocessor
2) Patch Type Analyzer
Simulator
Inputs
1a
Formula
1b
triggering 
Bug-
inputs
1c
Buggy code
2
Syntax
analyzer
Check syntax error in
the formula
Error
3b
Term Type
…
…
Check validity of   
the formula’s terms
4
Term analyzer
3a
Expression tree
5
Terms and 
source code 
mapper  
Map the formula’s 
terms to variables 
on code
Term Mapped
variables
5a
…
…
Infer patch type
6
Patch type
analyzer
4) Patch Verifier
Patched firmware
9
Patch verify
Patch dispatching
3) Patch Generator
7
Patch locator
7a
Mapped
variables
How to  
access?
Results of 
3a, 5, 6 steps
Patch 
location
…
…
8
Generating patch
Output
Patched code
Fig. 1: Overview of PGPATCH’s workﬂow and architecture.
IV. LOGIC BUG ANALYSIS
As a preliminary analysis, by analyzing 1,257 existing
bugs in ArduPilot and PX4 from 2014 to 2021 (Detailed
in Appendix A), we found that 33.7% of them can be ﬁxed
with one of the following ﬁve patch categories: (1) disabling
a statement, (2) checking valid ranges of parameters, (3)
updating a statement, (4) adding a condition check, and (5)
reusing an existing code snippet. Therefore, we designed
PGPATCH to address these patch types. The other 66.3%
of the patches require (1) adding third party libraries, (2)
implementing a new feature from scratch, (3) deﬁning a
new variable, loop, or function, and (4) other complicated
techniques, e.g., adding/updating mathematical formulas. These
requirements prevent PGPATCH from automatically creating
patches for these bugs (Detailed in Section VII-B).
Disabling a Statement (DISABLE). A logic bug may cause
an RV to change its physical state when it is not supposed
to. This mainly occurs when developers miss prohibiting a
behavior. Fixing this bug type requires localizing and disabling
the statement that changes the RV’s state incorrectly.
Checking Valid Ranges of Parameters (CHECK). RV software
may fail to check the valid ranges of some conﬁguration param-
eters, which leads to unexpected behaviors (e.g., instability or
loss of attitude control). When a parameter has a value outside
the valid range, its value must be restored to its default setting
to ﬁx such bugs.
Updating a Statement (UPDATE). When an RV’s states do
not satisfy all of the preconditions to trigger a behavior,
the RV software must not trigger the behavior. However, an
incorrect “if statement” may allow the RV software to trigger
the behavior even though the RV’s states satisfy only a part
of the preconditions. To ﬁx this type of bug, the “if statement”
must be updated with the correct preconditions.
Adding a Condition Check (ADD). A missed condition
check (i.e., a missing “if statement”) might prevent RVs from
conducting correct behaviors even though all the preconditions
are satisﬁed. Hence, adding the correct condition check and
triggering the correct behavior ﬁx such bugs.
Reusing an Existing Code Snippet (REUSE). Some logic bugs
may cause the RV software to stop checking an RV’s states
after a speciﬁc ﬂight stage (e.g., takeoff). These can be patched
by reusing the existing code snippets in all the ﬂight stages.
(a)
1
LTL 
formula
Logic 
bug-finder
Bug-triggering 
input
(b) 1
Developer
Bug 
report
Bug-triggering 
input
Translator
2
2
PPL
PGPatch
Patch
PPL
PGPatch
Patch
Fig. 2: Two usage scenarios of PGPATCH.
V. PGPATCH
A. System Overview
PGPATCH is a policy-based program repair tool for RVs,
which patches logic bugs in the source code. Figure 1
demonstrates its four interconnected components, and Figure 2
shows its two different usage scenarios. Particularly, PGPATCH
takes, as input, (1) a formula, which deﬁnes the RV’s expected
operation, and (2) a bug-triggering input that includes user
commands, conﬁguration parameters, environmental factors,
and the RV’s physical states (e.g., the battery level). The for-
mula can be given to PGPATCH as input in two different ways.
(i) Figure 2-(a) shows the main usage scenario of PGPATCH.
It takes existing LTL formulas, which were used to discover
logic bugs through a logic bug-ﬁnding tool (e.g., PGFuzz [41]).
PGPATCH converts the LTL formulas to PPL formulas, and it
uses PPL formulas to create patches. We note that LTL syntax
includes several temporal relation operators [41], [82]. Yet,
most requirements in RV documentation can be described by
“always” operator (e.g., all formulas in PGFuzz are in the form
of “always”). Based on this observation, we designed PPL
formulas (Section II) to only support “always” operator. (ii)
Figure 2-(b) shows how PGPATCH allows developers to deﬁne
PPL formulas to ﬁx logic bugs obtained from bug reports. In
this scenario, the bugs are not discovered using LTL formulas.
Preprocessor. This component translates LTL formulas to PPL
formulas if users input LTL formulas. It then veriﬁes the syntax
and semantics of the formulas and classiﬁes the formulas’ terms
to a variable, function, or an RV’s state types.
PGPATCH ( 2 ) leverages PPL formulas, which deﬁne an
RV’s correct behavior ( 1a ). For instance, we represent the
correct sailboat pre-arming behavior (Section III-B) with: “If
armed is false and SAIL_ENABLE is 1 and WNDVN_TYPE is 0,
then pre_arm_checks is error”. PGPATCH starts its analysis
by creating an expression tree of the PPL formula ( 3a ). It next
collects the formula’s terms by visiting the terminal nodes of
the expression tree. It then uses a term classiﬁcation table ( 3b )
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
41829
to classify each term into a code variable, function, or the RV’s
state types ( 4 ). For instance, in the sailboat’s formula, armed is
an RV’s physical state. SAIL_ENABLE and WNDVN_TYPE are the
RV’s conﬁguration parameter states, and the pre_arm_checks
is a function in the source code.
Patch Type Analyzer. This component ﬁrst maps the formula’s
terms to the variables and functions in the source code through
static analysis. It
then veriﬁes the mapping’s correctness
through dynamic analysis ( 5 ) and creates a term-source
code mapping table ( 5a ). For example, PGPATCH maps the
WNDVN_TYPE to the integer type direction variable of the
AP_WindVane class. It then changes the WNDVN_TYPE parameter
on an RV simulator and checks whether the direction variable
has the same value as the changed WNDVN_TYPE parameter value
to conﬁrm the mapping is correct. PGPATCH then ﬁnds the
required patch type to ﬁx a speciﬁc logic bug since each patch
type requires a different method for patch location identiﬁcation
and patch creation.
PGPATCH classiﬁes each logic bug into one of the ﬁve patch
types: (1) ADD, (2) REUSE, (3) UPDATE, (4) DISABLE, and (5)
CHECK ( 6 ). For this, it leverages (i) the preconditions that must
be satisﬁed to trigger the bug, and (ii) whether the bug occurs
only at a speciﬁc ﬂight stage (e.g., after takeoff) or at all ﬂight
stages. For instance, PGPATCH classiﬁes Sailboat Pre-Arming
Bug (Section III-B) to ADD patch type because: (1) the RV
control software does not raise an error even though the RV’s
states satisfy the preconditions to produce the desired error
message, and (2) the error message is not returned regardless
of ﬂight stages (Detailed in Section V-C). This hints that the
developers miss inserting an “if statement” to raise the error
message, resulting in the bug.
Patch Generator. This component ﬁnds the patch location and
generates the patch. PGPATCH identiﬁes the patch location
using a pattern matching approach ( 7 ), which matches the code
locations to the formula’s terms. For example, in the sailboat
policy, the left side of “then” is the precondition to trigger
a post-condition, raising a pre_arm_checks error. PGPATCH
obtains the bool pre_arm_checks() function as the potential
patch location because the post-condition (pre_arm_checks) is
mapped to it. It next creates an access pattern mapping table rep-
resenting how to access the variables and functions from the in-
ferred patch location ( 7a ). For example, the code snippet in the
AP_Arming class calls the rover.g2.windvane.enabled()
function to access the direction variable in the AP_WindVane
class. It then creates a patch using the identiﬁed patch type,
access pattern mapping table, and location ( 8 ). For example,
it produces the following code to ﬁx the sailboat’s pre-arming
misbehavior: “if (rover.g2.sailboat.sail_enable() == true &&
rover.g2.windvane.enabled() == false){return false;}”.
Patch Veriﬁer. The last component is the Patch Veriﬁer, which
deploys the created patch into the target source code and creates
a binary executable ﬁle by compiling the patched source code.
It then tests the patch using the simulator to see whether
the patch ﬁxes the bug and does not interfere with the RV’s
intended functionality and performance ( 9 ).
Type
Function
State(C)
Variable
Term
Failsafe
FS_BATT
_ENABLE
home_
distance
mode
State(P)
then
and
is
and
≥
mode
RTL
is
is
home_
distance
2
Failsafe
on
FS_BATT
_ENABLE
2
Fig. 3: Illustration of an expression tree constructed from
Battery Fail-safe formula (Section III-C) and term classiﬁcation
table. State (P) and State (C) denote a physical state and
conﬁguration parameter state, respectively.
B. Preprocessor
The Preprocessor translates LTL formulas to PPL formulas
if users input LTL formulas to PGPATCH. It then veriﬁes PPL
formulas’ syntax and classiﬁes the formulas’ terms to variables,
functions, or RV’s states. To do so, it uses a term classiﬁcation
table ( 3b Figure 1). The table’s each row consists of a term
and type, where the type can be a variable, function, or state,
as shown in Figure 3.
1) Checking Syntax Errors in PPL Formulas: PGPATCH
creates an expression tree of a given PPL formula and checks
whether syntax errors exist in the formula. If it detects any
syntax error, it refuses to generate a patch. If there are no errors,
it converts the formula to an expression tree and continues
with the next steps. To illustrate, the expression tree of the
Battery Fail-safe’s formula1 is presented in Figure 3.
2) Checking Semantic Errors in PPL Formulas: Users could
unintentionally input formulas that contain semantic errors,