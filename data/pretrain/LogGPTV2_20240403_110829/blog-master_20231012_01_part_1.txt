## 沉浸式学习PostgreSQL|PolarDB 20: 学习成为数据库大师级别的优化技能   
### 作者      
digoal      
### 日期      
2023-10-12      
### 标签      
PostgreSQL , PolarDB , 数据库 , 教学      
----      
## 背景      
欢迎数据库应用开发者参与贡献场景, 在此[issue](https://github.com/digoal/blog/issues/121)回复即可, 共同建设《沉浸式数据库学习教学素材库》, 帮助开发者用好数据库, 提升开发者职业竞争力, 同时为企业降本提效.      
- 系列课程的核心目标是教大家怎么用好数据库, 而不是怎么运维管理数据库、怎么开发数据库内核. 所以面向的对象是数据库的用户、应用开发者、应用架构师、数据库厂商的产品经理、售前售后专家等角色.      
本文的实验可以使用永久免费的阿里云[云起实验室](https://developer.aliyun.com/adc/scenario/f55dbfac77c0467a9d3cd95ff6697a31)来完成.      
如果你本地有docker环境也可以把镜像拉到本地来做实验:      
x86_64机器使用以下docker image:      
- [《amd64 image》](../202307/20230710_03.md)      
ARM机器使用以下docker image:      
- [《arm64 image》](../202308/20230814_02.md)      
## 业务场景1 介绍: 学习成为数据库大师级别的优化技能 
在上一个实验[《沉浸式学习PostgreSQL|PolarDB 19: 体验最流行的开源企业ERP软件 odoo》](../202310/20231011_01.md) 中, 学习了如何部署odoo和polardb|pg.   
由于ODOO是非常复杂的ERP软件, 对于关系数据库的挑战也非常大, 所以通过odoo业务可以更快速提升同学的数据库优化能力, 发现业务对数据库的使用问题(如索引、事务对锁的运用逻辑问题), 数据库的代码缺陷, 参数或环境配置问题, 系统瓶颈等.   
## 优化实验    
odoo的压力测试脚本在如下目录中: PolarDB-PG-Benchmark/tests    
### 1 优化TOP SQL性能  
这个优化是比较通用的, 古话说得好, 擒贼先擒王, 打蛇打七寸. 找出TOP SQL, 对资源消耗的头部SQL进行优化, 效果立竿见影.   
准备: 插件`pg_stat_statements`   
实验步骤:   
1、清理pg_stat_statements插件计数  
2、使用固定的数据量、压测时长、并发、压测请求数 开启压测, 关闭压测  
3、利用pg_stat_statements, 记录总资源消耗、被优化SQL的单次请求平均消耗. 用于评判优化效果.    
4、利用pg_stat_statements找top sql并优化, 方法可参考:   
- [《PostgreSQL 如何查找TOP SQL (例如IO消耗最高的SQL) (包含SQL优化内容) - 珍藏级 - 数据库慢、卡死、连接爆增、慢查询多、OOM、crash、in recovery、崩溃等怎么办?怎么优化?怎么诊断?》](../201704/20170424_06.md)    
- [《PostgreSQL explain analyze 火山图火焰图 图形化性能分析软件 pg_flame》](../202012/20201217_02.md)    
- [《PostgreSQL 自动化性能诊断和优化产品 pganalyze》](../202006/20200625_01.md)    
- [《powa4 PostreSQL Workload Analyzer - PostgreSQL监控工具、带WEB展示 - 索引推荐,等待事件分析,命中率,配置变更跟踪等》](../201905/20190520_01.md)    
索引优化参考:   
- [《PostgreSQL 虚拟索引 HypoPG 升级了 1.2.0发布》](../202102/20210226_02.md)    
- [《PostgreSQL 索引推荐 - HypoPG , pg_qualstats》](../201908/20190804_02.md)    
- [《PostgreSQL 虚拟|虚假 索引(hypothetical index) - HypoPG》](../201710/20171030_03.md)    
- [《PostgreSQL SQL自动优化案例 - 极简，自动推荐索引》](../201801/20180111_02.md)    
- [《自动选择正确索引访问接口(btree,hash,gin,gist,sp-gist,brin,bitmap...)的方法》](../201706/20170617_01.md)    
- [《PostgreSQL 优化器案例之 - order by limit 索引选择问题》](../201807/20180712_01.md)    
- [《PostgreSQL 数据库多列复合索引的字段顺序选择原理》](../201803/20180314_02.md)    
- [《PostgreSQL 多查询条件，多个索引的选择算法与问题诊断方法》](../201803/20180309_01.md)    
- [《跨云的K8S cloud native postgresql管理系统 谁在|会用?  PG SaaS或工具或插件类产品 谁在|会用?  (SQL规整、执行计划解读和优化建议、参数优化、AWR、索引推荐、错误日志解读和应对策略)》](../202105/20210517_01.md)    
5、执行完优化手段后, 再次重复1-3的操作.   
对比优化效果:    
- 总资源消耗   
- 被优化SQL的单次请求平均消耗   
- odoo压测结果变化  
### 2 发现业务逻辑问题 - 锁冲突为例    
这个实验主要用于发现业务层的数据库使用问题, 其中最突出的是锁等待的问题, 例如持锁时间过长, 持锁级别过高, 死锁等. 这些问题都会导致并发能力下降甚至雪崩.   
准备: 开启log_lock_waits, 配置deadlock_timeout.    
1、配置等待事件采集. pgpro-pwr, performance insight, pg_stat_monitor, pg_wait_sampling 都可以, 参考:  
- [《PostgreSQL Oracle 兼容性之 - performance insight - AWS performance insight 理念与实现解读 - 珍藏级》](../201901/20190125_02.md)    
- [《PostgreSQL pg_stat_statements AWR 插件 pg_stat_monitor , 过去任何时间段性能分析 [推荐、收藏]》](../202104/20210415_01.md)    
- [《PostgreSQL 兼容Oracle插件 - pgpro-pwr AWR 插件》](../202110/20211004_02.md)    
- [《PostgreSQL 等待事件 及 等待采样统计 (pg_wait_sampling) 发布新版本 1.1.2》](../202011/20201115_05.md)    
- [《PostgreSQL 等待事件 及 等待采样统计(pg_wait_sampling)》](../201610/20161006_01.md)    
2、使用固定的数据量、压测时长、并发、压测请求数 开启压测, 关闭压测    
3、观测数据库日志 `$PGDATA/pg_log` 或 `$PGDATA/log` 目录.    
通过锁超时日志, 找到对应会话和SQL, 分析业务问题.    
4、通过前面配置的 perf insight, pg_stat_monitor, pg_wait_sampling 找到TOP锁等待事件和对应的SQL.    
5、优化手段举例:  
秒杀场景可以用advisory lock来优化.   
- [《沉浸式学习PostgreSQL|PolarDB 2: 电商高并发秒杀业务、跨境电商高并发队列消费业务》](../202308/20230822_03.md)    
- [《PostgreSQL 秒杀4种方法 - 增加 批量流式加减库存 方法》](../201801/20180105_03.md)    
- [《HTAP数据库 PostgreSQL 场景与性能测试之 30 - (OLTP) 秒杀 - 高并发单点更新》](../201711/20171107_31.md)    
- [《聊一聊双十一背后的技术 - 不一样的秒杀技术, 裸秒》](../201611/20161117_01.md)    
- [《PostgreSQL 秒杀场景优化》](../201509/20150914_01.md)    
业务并行请求都锁冲突问题, 可以调整并行逻辑, 在业务层面进行线程-数据映射逻辑优化, 对锁进行隔离进行优化.    
- [《高并发队列处理业务的数据库性能优化 - IO扫描|CPU计算浪费 , 锁冲突 , 垃圾索引扫描浪费》](../202308/20230805_01.md)    
业务使用大锁, 且长时间持有锁带来的问题优化:  
- [《DB吐槽大会,第84期 - PG逻辑备份释放对象元数据共享锁不及时》](../202305/20230510_02.md)    
在事故现场如何发现锁冲突是什么业务导致的?  
- [《PostgreSQL 锁等待排查实践 - 珍藏级 - process xxx1 acquired RowExclusiveLock on relation xxx2 of database xxx3 after xxx4 ms at xxx》](../201806/20180622_02.md)    
- [《PostgreSQL 锁等待监控 珍藏级SQL - 谁堵塞了谁》](../201705/20170521_01.md)    
雪崩的优化方法:  
- [《重新发现PostgreSQL之美 - 40 雪崩, 压死骆驼的最后一根稻草》](../202107/20210708_05.md)    
- [《PostgreSQL AB表切换最佳实践 - 提高切换成功率，杜绝雪崩 - 珍藏级》](../201807/20180725_04.md)    
- [《PostgreSQL 设置单条SQL的执行超时 - 防雪崩》](../201712/20171211_02.md)    
- [《如何防止数据库雪崩(泛洪 flood)》](../201609/20160909_01.md)    
6、通过规范可以避免业务使用数据库不当导致的大部分问题  
- [《PostgreSQL 数据库开发规范》](../201609/20160926_01.md)      
### 3 环境和参数性能优化     
1、使用固定的数据量、压测时长、并发、压测请求数 开启压测   
在压测过程收集数据, 观测问题  
2、OS层观测工具参考    
- iostat  
- pmstat  
- mpstat  
- vmstat  
- tcpdump  
- top  
- ps   
- gdb  
- pstack  
指标参考:   
- [《PostgreSQL 实时健康监控 大屏 - 低频指标 - 珍藏级》](../201806/20180613_04.md)    
- [《PostgreSQL 实时健康监控 大屏 - 高频指标(服务器) - 珍藏级》](../201806/20180613_03.md)    
- [《PostgreSQL 实时健康监控 大屏 - 高频指标 - 珍藏级》](../201806/20180613_02.md)    
3、发现问题  
- 内存不足?  
- 存储请求延迟、IOPS、带宽瓶颈?  
- 文件系统锁等待瓶颈?  
- 网络包转发、带宽?  
- numa问题?  
- 中断问题, cpu 绑核?  
4、优化手段参考     
- [《DBA不可不知的操作系统内核参数》](../201608/20160803_01.md)    
- [《PostgreSQL 操作系统监控插件 - system_stats - cpu,memory,network,filesystem,block dev等监控》](../202007/20200709_02.md)    
- [《PostgreSQL 11 postgresql.conf 参数模板 - 珍藏级》](../201812/20181203_01.md)    
- [《PostgreSQL 10 postgresql.conf 参数模板 - 珍藏级》](../201805/20180522_03.md)    
- [《DB吐槽大会,第48期 - PG 性能问题发现和分析能力较弱》](../202109/20210922_03.md)    
- [《DB吐槽大会,第54期 - PG 资源隔离、管理手段较少》](../202109/20210928_06.md)    
- [《转载 - Linux 多核下绑定硬件中断到不同 CPU（IRQ Affinity）》](../201611/20161120_04.md)    