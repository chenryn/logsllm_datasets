### 加餐三：聊聊Google是如何进行Code Review的

亲爱的读者们，专栏的正文部分已经全部结束了。感谢你们一直以来的学习与支持。从今天开始，我们将进入加餐内容，这些内容将更加轻松有趣，旨在帮助大家拓展知识面，同时引发思考和共鸣。希望大家能够在留言区多多互动，分享自己的感受和看法。

#### 为什么国内企业不重视 Code Review？

在专栏第80讲中，我们详细讨论了Code Review的重要性、它带来的好处以及如何克服常见难题。今天，我们将继续探讨这个话题，并结合我在Google的经历，分享一些关于Code Review的经验和心得。

众所周知，Google在Code Review方面做得非常出色，可以说是许多公司的榜样。我个人的技术成长很大程度上得益于在Google时参与的Code Review。然而，据我了解，国内大多数公司并不重视Code Review，在开发过程中也没有相关的流程。这让我一直在思考，到底是什么原因导致这种优秀的开发模式在国内技术圈没有得到广泛推广。

很多人认为项目工期紧是主要原因，但我认为这只是表面现象。最根本的原因在于缺乏技术文化的传承。通常来说，大公司的工程师技术能力更强，影响力更大。即使他们跳槽到其他公司，也会担任核心成员或Leader的角色。然而，在国内，即使是像BAT这样的一线公司，也未能很好地实践Code Review。因此，这些公司的工程师缺乏实际经验，无法体会到Code Review的好处，更不会在团队或公司中推行这一做法。

以“996”文化为例，如果BAT等公司能够认可并严格执行Code Review，那么从这些公司出来的工程师将会大力推广这一做法，从而逐渐影响整个技术圈。实际上，我认识的所有从Google跳槽出来的工程师都非常热衷于传播Code Review。只要经历过严格的Code Review，团队都会对其高度认可。

我自己刚开始接触Code Review时也有些抵触。刚毕业加入Google时，我对代码质量、设计等问题并没有太多考虑。第一次提交的代码不足百行，却被Leader指出了很多细节问题，如变量命名不够准确、注释不规范等。当时我觉得这些问题琐碎且无关紧要，但后来逐渐意识到，对于长期维护、多人协作的项目来说，代码的可读性和可维护性至关重要。Code Review正是保证代码质量的有效手段之一。

#### Google是如何进行Code Review的？

在Google，每次提交的代码片段被称为CL（Change List），类似于GitHub中的PR（Pull Request）。每个CL需要至少一个Owner和一个具有Readability资格的同事批准才能合并到代码仓库中。Owner通常是技术Leader或项目负责人，而Readability则是一种证书，表示你具备写出可读性强且符合编码规范的代码的能力。不同编程语言有不同的Readability认证，如Java Readability、C++ Readability等。

申请某种语言的Readability需要提交一段包含至少100行代码且稍显复杂的CL给评审委员会。委员会会指派一位资深工程师Review你的代码，并提出修改建议。经过几次来回修改后，若评审员认为你的代码符合标准，就会授予你Readability。虽然只有具备Readability的人的Review才具有正式批准效力，但任何人都可以对同事的代码提出意见和建议。

Google每种编程语言都有相应的编码规范，但在Code Review过程中并没有统一的Checklist。主要依靠工程师的经验来判断代码结构是否合理、是否易于理解、业务逻辑是否正确、异常处理是否全面、是否存在隐藏bug、线程安全与否、性能是否满足需求等方面。尽管听起来很复杂，但一旦熟练掌握，Review过程并不会花费太多时间。一般情况下，一个CL从提交到合并大约只需一天时间。当然，对于较大的CL、复杂的CL、争议较多的CL以及新手提交的CL，可能会需要更多时间。

总之，Code Review并不神秘，但确实需要时间和经验积累。如果你希望了解更多相关信息，可以参考Google官方发布的[Code Review最佳实践](https://google.github.io/eng-practices/review/)。欢迎大家在留言区提问或分享自己的想法。我希望通过本专栏的学习，能让更多人认识到Code Review的重要性，并在未来有机会推动其在国内技术圈的发展。