-   激活一个特定卷：
    ``` screen
    # vdo activate --name=my-vdo
    ```
-   激活所有卷：
    ``` screen
    # vdo activate --all
    ```
:::
::: itemizedlist
**其它资源**
-   The `vdo(8)`{.literal} man page
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#deactivating-a-vdo-volume_automatically-starting-vdo-volumes-at-system-boot}取消激活 VDO 卷 {.title}
:::
此流程取消激活 VDO 卷以防止自动启动。
::: itemizedlist
**流程**
-   取消激活一个特定卷：
    ``` screen
    # vdo deactivate --name=my-vdo
    ```
-   取消激活所有卷：
    ``` screen
    # vdo deactivate --all
    ```
:::
::: itemizedlist
**其它资源**
-   The `vdo(8)`{.literal} man page
:::
:::
:::
::: section
::: titlepage
# []{#maintaining-vdo_deduplicating-and-compressing-storage.html#selecting-a-vdo-write-mode_maintaining-vdo}选择 VDO 写入模式 {.title}
:::
您可以根据基础块设备的要求，为 VDO 卷配置写入模式。默认情况下，VDO
选择自动写入模式。
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#vdo-write-modes_selecting-a-vdo-write-mode}VDO 写入模式 {.title}
:::
VDO 支持以下写入模式：
::: variablelist
[`sync`{.literal}]{.term}
:   当 VDO 处于 `同步`{.literal}
    模式时，它假定写入命令将数据写入持久性存储。因此，文件系统或应用程序不需要发出
    FLUSH 或强制单元访问(FUA)请求导致数据在关键点上持久化。
    只有在底层存储保证数据在 write 命令完成后写入持久性存储时，才必须将
    VDO 设置为 `同步`{.literal}
    模式。也就是说，存储必须没有易变的写缓存，或者不通过缓存进行写入操作。
[`async`{.literal}]{.term}
:   当 VDO 处于 `async`{.literal} 模式时，VDO
    不能保证在确认写入命令时数据会被写入持久性存储。文件系统或应用程序必须发出
    FLUSH 或 FUA 请求，以确保在每次事务的要点上具有数据持久性。
    如果底层存储不能保证在 write
    命令完成后将数据写入持久性存储，则必须将 VDO 设置为
    `async`{.literal} 模式；即，当存储具有易变的写回缓存时。
[`async-unsafe`{.literal}]{.term}
:   这个模式的属性与 `async`{.literal}
    相同，但它与原子性、一致性、隔离、持久性(ACID)不兼容。与
    `async`{.literal} 相比，`async-unsafe`{.literal} 具有更佳的性能。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    当假设 ACID 合规的应用程序或文件系统在 VDO 卷之上运行时，an
    `sync-unsafe`{.literal} 模式可能会导致意外的数据丢失。
    :::
[`auto`{.literal}]{.term}
:   `auto`{.literal} 模式根据每个设备的特性自动选择 `同步`{.literal} 或
    `async`{.literal}。这是默认选项。
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#the-internal-processing-of-vdo-write-modes_selecting-a-vdo-write-mode}VDO 写入模式的内部处理 {.title}
:::
本节详细介绍了 `同步`{.literal} 和异步 `VDO`{.literal}
写入模式如何操作。
如果 `kvdo`{.literal} 模块以同步模式运行：
::: orderedlist
1.  它会在请求中临时将数据写入分配块中，然后确认请求。
2.  确认完成后，会尝试通过计算块数据的 MurmurHash-3
    签名来取消复制块，该签名发送到 VDO 索引。
3.  如果 VDO 索引包含具有相同签名的块的条目，`kvdo`{.literal}
    会读取指定的块，并对这两个块进行字节比较，以验证它们是否相同。
4.  如果它们确实相同，则 `kvdo`{.literal}
    会更新其块映射，以便逻辑块指向对应的物理块并释放分配的物理块。
5.  如果 VDO
    索引没有包含要写入块的签名的条目，或者指定的块实际上不包含相同的数据，`kvdo`{.literal}
    会更新其块映射使临时物理块永久存在。
:::
如果 `kvdo`{.literal} 以异步模式运行：
::: orderedlist
1.  它将立即确认请求而不是写数据。
2.  然后它会尝试使用与上述步骤相同的方法来复制块。
3.  如果块确实是重复的，`kvdo`{.literal}
    会更新其块映射并释放分配的块。否则，它会在请求中写入数据到分配块中，并更新块映射使物理块持久化。
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#checking-the-write-mode-on-a-vdo-volume_selecting-a-vdo-write-mode}检查 VDO 卷中的写入模式 {.title}
:::
此流程列出了所选 VDO 卷中的主动写入模式。
::: itemizedlist
**流程**
-   使用以下命令查看 VDO 卷使用的写入模式：
    ``` screen
    # vdo status --name=my-vdo
    ```
    输出列表：
    ::: itemizedlist
    -   [*配置的写入策略*]{.emphasis}，这是从 `同步、异`{.literal}
        步`或`{.literal} `自动`{.literal}选择的选项
    -   [*写入策略*]{.emphasis}，这是 VDO 应用的特定写入模式，即
        `同步`{.literal} 或 `async`{.literal}
    :::
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#checking-for-a-volatile-cache_selecting-a-vdo-write-mode}检查易变的缓存 {.title}
:::
这个过程决定块设备是否有易变的缓存。您可以使用这些信息在
`同步`{.literal} 和 `async`{.literal} VDO 写入模式之间进行选择。
::: orderedlist
**流程**
1.  使用以下方法之一确定某个设备是否有写回缓存：
    ::: itemizedlist
    -   阅读
        `/sys/block/block-device /device/scsi_disk/标识符/cache_type`{.literal}
        `sysfs`{.literal} 文件。例如：
        ``` screen
        $ cat '/sys/block/sda/device/scsi_disk/7:0:0:0/cache_type'
        write back
        ```
        ``` screen
        $ cat '/sys/block/sdb/device/scsi_disk/1:2:0:0/cache_type'
        None
        ```
    -   另外，你可以在内核引导日志中找到上述设备是否有写缓存：
        ``` screen
        sd 7:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
        sd 1:2:0:0: [sdb] Write cache: disabled, read cache: disabled, supports DPO and FUA
        ```
    :::
2.  在上例中：
    ::: itemizedlist
    -   Devices `da`{.literal} 表示它 [*有一个*]{.emphasis}
        回写缓存。使用 `async`{.literal} 模式。
    -   设备 `sdb`{.literal} 表示 [*它没有*]{.emphasis} 回写缓存。使用
        `同步`{.literal} 模式。
    :::
    如果 `cache_type`{.literal} 值是 `None`{.literal} 或
    `writethrough，您应该将 VDO 配置为使用 同步`{.literal}
    写入模式。``{=html}
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#setting-a-vdo-write-mode_selecting-a-vdo-write-mode}设置 VDO 写入模式 {.title}
:::
此流程为 VDO 卷设置写入模式，可以是现有卷，也可以是创建新卷时。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
使用不正确的写入模式可能会导致电源故障、系统崩溃或与磁盘的任何意外联系丢失后数据丢失。
:::
::: itemizedlist
**先决条件**
-   决定哪个写入模式适合您的设备。请参阅
    ["检查易变的缓存"一节](#maintaining-vdo_deduplicating-and-compressing-storage.html#checking-for-a-volatile-cache_selecting-a-vdo-write-mode "检查易变的缓存"){.xref}。
:::
::: itemizedlist
**流程**
-   您可以在现有 VDO 卷上或创建新卷时设置写入模式：
    ::: itemizedlist
    -   要修改现有的 VDO 卷，请使用：
        ``` screen
        # vdo changeWritePolicy --writePolicy=sync|async|async-unsafe|auto \
                                --name=vdo-name
        ```
    -   要在创建 VDO 卷时指定写入模式，请在 `vdo create`{.literal}
        命令中添加
        `--writePolicy=sync|async|async-unsafe|auto`{.literal} 选项。
    :::
:::
:::
:::
::: section
::: titlepage
# []{#maintaining-vdo_deduplicating-and-compressing-storage.html#recovering-a-vdo-volume-after-an-unclean-shutdown_maintaining-vdo}在未清除关闭后恢复 VDO 卷 {.title}
:::
您可以在未清除关闭后恢复 VDO
卷，使其可以继续运行。任务通常是自动化的。另外，您可以在 VDO
卷创建失败后进行清理。
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#vdo-write-modes_recovering-a-vdo-volume-after-an-unclean-shutdown}VDO 写入模式 {.title}
:::
VDO 支持以下写入模式：
::: variablelist
[`sync`{.literal}]{.term}
:   当 VDO 处于 `同步`{.literal}
    模式时，它假定写入命令将数据写入持久性存储。因此，文件系统或应用程序不需要发出
    FLUSH 或强制单元访问(FUA)请求导致数据在关键点上持久化。
    只有在底层存储保证数据在 write 命令完成后写入持久性存储时，才必须将
    VDO 设置为 `同步`{.literal}
    模式。也就是说，存储必须没有易变的写缓存，或者不通过缓存进行写入操作。
[`async`{.literal}]{.term}
:   当 VDO 处于 `async`{.literal} 模式时，VDO
    不能保证在确认写入命令时数据会被写入持久性存储。文件系统或应用程序必须发出
    FLUSH 或 FUA 请求，以确保在每次事务的要点上具有数据持久性。
    如果底层存储不能保证在 write
    命令完成后将数据写入持久性存储，则必须将 VDO 设置为
    `async`{.literal} 模式；即，当存储具有易变的写回缓存时。
[`async-unsafe`{.literal}]{.term}
:   这个模式的属性与 `async`{.literal}
    相同，但它与原子性、一致性、隔离、持久性(ACID)不兼容。与
    `async`{.literal} 相比，`async-unsafe`{.literal} 具有更佳的性能。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    当假设 ACID 合规的应用程序或文件系统在 VDO 卷之上运行时，an
    `sync-unsafe`{.literal} 模式可能会导致意外的数据丢失。
    :::
[`auto`{.literal}]{.term}
:   `auto`{.literal} 模式根据每个设备的特性自动选择 `同步`{.literal} 或
    `async`{.literal}。这是默认选项。
:::
:::
::: section
::: titlepage
## []{#maintaining-vdo_deduplicating-and-compressing-storage.html#vdo-volume-recovery_recovering-a-vdo-volume-after-an-unclean-shutdown}VDO 卷恢复 {.title}
:::