http://mdsec.net/auth/472/
http://mdsec.net/auth/466/
When all accessible functionality has been enumerated, you need to test
whether per-user segregation of access to resources is being correctly enforced.
In every instance where the application grants users access to a subset of a wider
range of resources of the same type (such as documents, orders, e-mails, and
personal details), there may be opportunities for one user to gain unauthorized
access to other resources.
HACK STEPS
1. Where the application uses identifiers of any kind (document IDs, account
numbers, order references) to specify which resource a user is requesting,
attempt to discover the identifiers for resources to which you do not have
authorized access.
cc0088..iinndddd 227744 88//1199//22001111 1122::0088::3333 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 275
Chapter 8 n Attacking Access Controls 275
2. If it is possible to generate a series of such identifiers in quick succes-
sion (for example, by creating multiple new documents or orders), use the
techniques described in Chapter 7 for session tokens to try to discover
any predictable sequences in the identifiers the application produces.
3. If it is not possible to generate any new identifiers, you are restricted to
analyzing the identifiers you have already discovered, or even using plain
guesswork. If the identifier has the form of a GUID, it is unlikely that any
attempts based on guessing will be successful. However, if it is a relatively
small number, try other numbers in close range, or random numbers with
the same number of digits.
4. If access controls are found to be broken, and resource identifiers are
found to be predictable, you can mount an automated attack to harvest
sensitive resources and information from the application. Use the tech-
niques described in Chapter 14 to design a bespoke automated attack to
retrieve the data you require.
A catastrophic vulnerability of this kind occurs where an Account Information
page displays a user’s personal details together with his username and pass-
word. Although the password typically is masked on-screen, it is nevertheless
transmitted in full to the browser. Here, you can often quickly iterate through
the full range of account identifi ers to harvest the login credentials of all users,
including administrators. Figure 8-5 shows Burp Intruder being used to carry
out a successful attack of this kind.
Figure 8-5: A successful attack to harvest usernames and passwords via
an access control vulnerability
cc0088..iinndddd 227755 88//1199//22001111 1122::0088::3333 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 276
276 Chapter 8 n Attacking Access Controls
TRY IT!
http://mdsec.net/auth/488/
http://mdsec.net/auth/494/
TIP When you detect an access control vulnerability, an immediate attack to
follow up with is to attempt to escalate your privileges further by compro-
mising a user account that has administrative privileges. You can use various
tricks to locate an administrative account. Using an access control fl aw like
the one illustrated, you may harvest hundreds of user credentials and not
relish the task of logging in manually as every user until you fi nd an admin-
istrator. However, when accounts are identifi ed by a sequential numeric
ID, it is common to fi nd that the lowest account numbers are assigned to
administrators. Logging in as the fi rst few users who were registered with
the application often identifi es an administrator. If this approach fails, an
effective method is to fi nd a function within the application where access is
properly segregated horizontally, such as the main home page presented to
each user. Write a script to log in using each set of captured credentials, and
then try to access your own home page. It is likely that administrative users
can view every user’s home page, so you will immediately detect when an
administrative account is being used.
Testing Direct Access to Methods
Where an application uses requests that give direct access to server-side API
methods, any access control weaknesses within those methods normally are
identifi ed using the methodology already described. However, you should also
test for the existence of additional APIs that may not be properly protected.
For example, a servlet may be invoked using the following request:
POST /svc HTTP/1.1
Accept-Encoding: gzip, deflate
Host: wahh-app
Content-Length: 37
servlet=com.ibm.ws.webcontainer.httpsession.IBMTrackerDebug
Since this is a well-known servlet, perhaps you can access other servlets to
perform unauthorized actions.
cc0088..iinndddd 227766 88//1199//22001111 1122::0088::3333 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 277
Chapter 8 n Attacking Access Controls 277
HACK STEPS
1. Identify any parameters that follow Java naming conventions (for exam-
ple,get,set,add,update,is, or has followed by a capitalized word), or
explicitly specify a package structure (for example, com.companyname
.xxx.yyy.ClassName). Make a note of all referenced methods you can
find.
2. Look out for a method that lists the available interfaces or methods.
Check through your proxy history to see if it has been called as part of
the application’s normal communication. If not, try to guess it using the
observed naming convention.
3. Consult public resources such as search engines and forum sites to deter-
mine any other methods that might be accessible.
4. Use the techniques described in Chapter 4 to guess other method names.
5. Attempt to access all methods gathered using a variety of user account
types, including unauthenticated access.
6. If you do not know the number or types of arguments expected by some
methods, look for methods that are less likely to take arguments, such as
listInterfaces and getAllUsersInRoles.
Testing Controls Over Static Resources
In cases where static resources that the application is protecting are ultimately
accessed directly via URLs to the resource fi les themselves, you should test
whether it is possible for unauthorized users to simply request these URLs directly.
HACK STEPS
1. Step through the normal process for gaining access to a protected static
resource to obtain an example of the URL by which it is ultimately
retrieved.
2. Using a different user context (for example, a less-privileged user or an
account that has not made a required purchase), attempt to access the
resource directly using the URL you have identified.
3. If this attack succeeds, try to understand the naming scheme being used
for protected static files. If possible, construct an automated attack to
trawl for content that may be useful or that may contain sensitive data
(see Chapter 14).
cc0088..iinndddd 227777 88//1199//22001111 1122::0088::3344 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 278
278 Chapter 8 n Attacking Access Controls
Testing Restrictions on HTTP Methods
Although there may not be a ready means of detecting whether an application’s
access controls make use of platform-level controls over HTTP methods, you
can take some simple steps to identify any vulnerabilities.
HACK STEPS
1. Using a high-privileged account, identify some privileged requests that
perform sensitive actions, such as adding a new user or changing a user’s
security role.
2. If these requests are not protected by any anti-CSRF tokens or similar
features (see Chapter 13), use the high-privileged account to determine
whether the application still carries out the requested action if the HTTP
method is modified. Test the following HTTP methods:
n POST
n GET
n HEAD
n An arbitrary invalid HTTP method
3. If the application honors any requests using different HTTP methods than
the original method, test the access controls over those requests using the
standard methodology already described, using accounts with lower
privileges.
Securing Access Controls
Access controls are one of the easiest areas of web application security to under-
stand, although you must carefully apply a well-informed, thorough methodology
when implementing them.
First, you should avoid several obvious pitfalls. These usually arise from
ignorance about the essential requirements of effective access control or fl awed
assumptions about the kinds of requests that users will make and against which
the application needs to defend itself:
n Do not rely on users’ ignorance of application URLs or the identifi ers used
to specify application resources, such as account numbers and document
IDs. Assume that users know every application URL and identifi er, and
ensure that the application’s access controls alone are suffi cient to prevent
unauthorized access.
cc0088..iinndddd 227788 88//1199//22001111 1122::0088::3344 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 279
Chapter 8 n Attacking Access Controls 279
n Do not trust any user-submitted parameters to signify access rights (such
asadmin=true).
n Do not assume that users will access application pages in the intended
sequence. Do not assume that because users cannot access the Edit Users
page, they cannot reach the Edit User X page that is linked from it.
n Do not trust the user not to tamper with any data that is transmitted via
the client. If some user-submitted data has been validated and then is
transmitted via the client, do not rely on the retransmitted value without
revalidation.
The following represents a best-practice approach to implementing effective
access controls within web applications:
n Explicitly evaluate and document the access control requirements for
every unit of application functionality. This needs to include both who
can legitimately use the function and what resources individual users
may access via the function.
n Drive all access control decisions from the user’s session.
n Use a central application component to check access controls.
n Process every client request via this component to validate that the user
making the request is permitted to access the functionality and resources
being requested.
n Use programmatic techniques to ensure that there are no exceptions to the
previous point. An effective approach is to mandate that every application
page must implement an interface that is queried by the central access
control mechanism. If you force developers to explicitly code access control
logic into every page, there can be no excuse for omissions.
n For particularly sensitive functionality, such as administrative pages, you
can further restrict access by IP address to ensure that only users from
a specifi c network range can access the functionality, regardless of their
login status.
n If static content needs to be protected, there are two methods of provid-
ing access control. First, static fi les can be accessed indirectly by passing
a fi lename to a dynamic server-side page that implements relevant access
control logic. Second, direct access to static fi les can be controlled using HTTP
authentication or other features of the application server to wrap the incom-
ing request and check the resource’s permissions before access is granted.
n Identifi ers specifying which resource a user wants to access are vulner-
able to tampering whenever they are transmitted via the client. The server
cc0088..iinndddd 227799 88//1199//22001111 1122::0088::3344 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 280
280 Chapter 8 n Attacking Access Controls
should trust only the integrity of server-side data. Any time these identi-
fi ers are transmitted via the client, they need to be revalidated to ensure
that the user is authorized to access the requested resource.
n For security-critical application functions such as the creation of a new bill
payee in a banking application, consider implementing per-transaction
reauthentication and dual authorization to provide additional assurance
that the function is not being used by an unauthorized party. This also
mitigates the consequences of other possible attacks, such as session
hijacking.
n Log every event where sensitive data is accessed or a sensitive action is
performed. These logs will enable potential access control breaches to be
detected and investigated.
Web application developers often implement access control functions on a
piecemeal basis. They add code to individual pages in cases where some access
control is required, and they often cut and paste the same code between pages
to implement similar requirements. This approach carries an inherent risk of
defects in the resulting access control mechanism. Many cases are overlooked
where controls are required, controls designed for one area may not operate in
the intended way in another area, and modifi cations made elsewhere within the
application may break existing controls by violating assumptions made by them.
In contrast to this approach, the previously described method of using a
central application component to enforce access controls has many benefi ts:
n It increases the clarity of access controls within the application, enabling
different developers to quickly understand the controls implemented by
others.
n It makes maintainability more effi cient and reliable. Most changes need
to be applied only once, to a single shared component, and do not need
to be cut and pasted to multiple locations.
n It improves adaptability. Where new access control requirements arise,
they can be easily refl ected within an existing API implemented by each
application page.
n It results in fewer mistakes and omissions than if access control code is
implemented piecemeal throughout the application.
A Multilayered Privilege Model
Issues relating to access apply not only to the web application itself but also
to the other infrastructure tiers that lie beneath it — in particular, the applica-
tion server, the database, and the operating system. Taking a defense-in-depth
approach to security entails implementing access controls at each of these layers
cc0088..iinndddd 228800 88//1199//22001111 1122::0088::3344 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 281
Chapter 8 n Attacking Access Controls 281
to create several layers of protection. This provides greater assurance against
threats of unauthorized access, because if an attacker succeeds at compromising
defenses at one layer, the attack may yet be blocked by defenses at another layer.
In addition to implementing effective access controls within the web appli-
cation itself, as already described, a multilayered approach can be applied in
various ways to the components that underlie the application:
n The application server can be used to control access to entire URL paths
on the basis of user roles that are defi ned at the application server tier.
n The application can employ a different database account when car-
rying out the actions of different users. For users who should only be
querying data (not updating it), an account with read-only privileges
should be used.
n Fine-grained control over access to different database tables can be imple-
mented within the database itself, using a table of privileges.
n The operating system accounts used to run each component in the infra-
structure can be restricted to the least powerful privileges that the com-
ponent actually requires.
In a complex, security-critical application, layered defenses of this kind can
be devised with the help of a matrix defi ning the different user roles within
the application and the different privileges, at each tier, that should be assigned
to each role. Figure 8-6 is a partial example of a privilege matrix for a complex
application.
Application Server Application Roles Database Privileges
Figure 8-6: A privilege matrix for a complex application
cc0088..iinndddd 228811 88//1199//22001111 1122::0088::3344 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 282
282 Chapter 8 n Attacking Access Controls
Within a security model of this kind, you can see how various useful access
control concepts can be applied:
n Programmatic control — The matrix of individual database privileges is
stored in a table within the database and is applied programmatically to
enforce access control decisions. The classifi cation of user roles provides a
shortcut for applying certain access control checks, and this is also applied
programmatically. Programmatic controls can be extremely fi ne-grained
and can build arbitrarily complex logic into the process of carrying out
access control decisions within the application.
n Discretionary access control (DAC) — Administrators can delegate their
privileges to other users in relation to specifi c resources they own, employ-
ing discretionary access control. This is a closedDAC model, in which access
is denied unless explicitly granted. Administrators also can lock or expire
individual user accounts. This is an openDAC model, in which access is
permitted unless explicitly withdrawn. Various application users have privi-
leges to create user accounts, again applying discretionary access control.
n Role-based access control (RBAC) — Named roles contain different sets
of specifi c privileges, and each user is assigned to one of these roles. This
serves as a shortcut for assigning and enforcing different privileges and
is necessary to help manage access control in complex applications. Using
roles to perform up-front access checks on user requests enables many
unauthorized requests to be quickly rejected with a minimum amount of
processing being performed. An example of this approach is protecting
the URL paths that specifi c types of users may access.
When designing role-based access control mechanisms, you must balance
the number of roles so that they remain a useful tool to help manage privi-
leges within the application. If too many fi ne-grained roles are created, the
number of different roles becomes unwieldy, and they are diffi cult to manage
accurately. If too few roles are created, the resulting roles will be a coarse
instrument for managing access. It is likely that individual users will be
assigned privileges that are not strictly necessary to perform their function.
If platform-level controls are used to restrict access to different application
roles based on HTTP method and URL, these should be designed using
a default-deny model, as is best practice for fi rewall rules. This should
include various specifi c rules that assign certain HTTP methods and URLs
to certain roles, and the fi nal rule should deny any request that does not
match a previous rule.
n Declarative control — The application uses restricted database accounts
when accessing the database. It employs different accounts for different