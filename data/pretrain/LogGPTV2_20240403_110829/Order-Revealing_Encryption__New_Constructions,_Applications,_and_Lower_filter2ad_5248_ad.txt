search to ﬁnd the ciphertexts in st that are “at least” ctx and “at most” cty. Let r be
the set of ciphertexts lying in this interval. The server outputs the response r and an
updated state st(cid:48) = st.
– Client(sk, r) → S. The client, on input the secret key sk and the response r = (ct1, . . . , ctm)
for some integer m, outputs the tuple S = (ORE.Decrypt(sk, ct1), . . . , ORE.Decrypt(sk, ctm)).
(Recall from Remark 2.1 that any ORE scheme can be augmented with a decryption
algorithm.)
• RQ.Insert(sk, q, st) → (t, st(cid:48)). The insert algorithm between the client and server proceeds as
follows:
– Client(sk, q = x) → t. The client, on input the secret key sk and a query representing an
insertion of the value x, produces a token t = (ORE.EncryptL(sk, x), ORE.EncryptR(sk, x))
which is sent to the server.
– Server(st, t) → (st(cid:48), r). The server takes as input its current state st and the token
t = (ct1, ct2). Using ORE.Compare(ct1,·), it performs a binary search over the contents
of its database st to ﬁnd the index at which to insert the new value. The server inserts
ct2 at that position and outputs the updated database st(cid:48).
• RQ.Delete(sk, q, st) → (t, st(cid:48)). The delete algorithm between the client and server proceeds as
follows:
– Client(sk, q = x) → t. The client, on input the secret key sk and a query representing a
deletion of the value x, produces a token t = (ORE.EncryptL(sk, x), ORE.EncryptR(sk, x))
which is sent to the server.
– Server(st, t) → (st(cid:48), r). The server takes as input its current state st and the token
t = (ct1, ct2). Using ORE.Compare(ct1,·), it performs a binary search over the contents
of its database st to ﬁnd the indices of the elements in st equal to ct1. It removes the
entries at the matching indices and outputs the updated database st(cid:48).
Correctness. By correctness of the ORE scheme, the state st maintained by the server after each
query is a (sorted) list of right encryptions (under sk) of the values in the database D after the
corresponding insertions and deletions. Thus, the response r returned by the server to the client in
a range query for the range [x, y] is precisely the subset of ciphertexts whose plaintext values fall in
the range [x, y]. Correctness follows by correctness of ORE decryption (which in turn follows from
correctness of the ORE scheme).
Additional properties. In addition to the core security and correctness properties that we want
from a symmetric range query scheme, we also note several useful properties that our construction
Πrq achieves for handling eﬃcient range queries in our client-server model.
16
• Stateless client and single-round protocols. The client does not need to maintain state
between queries, and each query is a single round trip between the client and the server. Our
protocol achieves optimal round complexity.
• Short query tokens. The size of each query token t is asymptotically optimal. They are
approximately the same length as the inputs used to generate the query, and independent of
the size of the database.
• Fast responses. The running time of the server’s algorithms is sublinear (logarithmic) in the
total number of elements in the database.
Databases with multiple columns. In our description so far, we have modeled the database
as containing a single column of values. To apply our methods to databases containing multiple
columns, we would instead construct a sorted index for each column that needs to support range
queries. Each of these indices are then encrypted with an independent ORE scheme. To support a
range query over a particular column, the client would query the index for that column. The server
responds with the set of (encrypted) record identiﬁers that fall within the requested range. The
client then decrypts the response to obtain the record identiﬁers, and ﬁnally, retrieves the associated
records.
Dual-encryption leakage functions. To deﬁne the security of our range query scheme, we ﬁrst
introduce a slight modiﬁcation to the security notions achieved by our ORE scheme from Section 4.
Recall from Deﬁnition 2.2 that an ORE scheme is secure with respect to a leakage function L(·) if
for any adversarially-chosen sequence of messages m1, . . . , m(cid:96), there is an eﬃcient simulator S that
can simulate the real ORE ciphertexts given only the leakage L(m1, . . . , mi).
Here, we consider “dual-encryption” leakage functions L(cid:48)(·,·) which take two collections of
plaintext values: one associated with “left” values, and the other associated with “right” values.
Now, we say that an ORE scheme with separate left and right encryption functions ORE.EncryptL and
ORE.EncryptR, is secure with respect to the dual-encryption leakage function L(cid:48)(·,·) if there exists an
eﬃcient simulator such that for any two (adversarially-chosen) collections of plaintexts x1, . . . , x(cid:96) and
y1, . . . , yκ, and sk ← ORE.Setup(1λ), the simulator can simulate the outputs ORE.EncryptL(sk, xi) and
ORE.EncryptR(sk, yj) for all i ∈ [(cid:96)] and j ∈ [κ], given only the output of L(cid:48)((x1, . . . , x(cid:96)), (y1, . . . , yκ)).
We note that the proof of Theorem 4.1 can be rewritten to prove security with respect to the
dual-encryption leakage function Ldual as deﬁned in the following lemma.
Lemma 5.3. Let Ldual be the following dual-leakage function
Ldual((x1, . . . , x(cid:96)), (y1, . . . , yκ)) =
i, i(cid:48), j, blk(xi, yj), ind(d)
diﬀ(xi, xi(cid:48))
(cid:110)(cid:16)
(cid:17) | i, i(cid:48) ∈ [(cid:96)], j ∈ [κ]
(cid:111)
,
where blk(xi, yj) = (cmp(xi, yj), ind(d)
diﬀ(xi, yj)) as deﬁned in Section 4 and used in Theorem 4.1.
The ORE scheme Πore from Section 4 is secure with respect to the dual-encryption leakage function
Ldual.
Proof. Follows by inspection of the proof of Theorem 4.1.
Representing the leakage of our ORE scheme in terms of a dual-encryption leakage function
allows us to easily reason about the online and oﬄine security properties of our scheme. At a high
level, the online leakage of our range query scheme is simply the output of the dual leakage function
17
on the sets of left ciphertexts appearing in the queries and the set of right ciphertexts appearing in
the database. We now describe the leakage more precisely.
In our description below, we refer to the leakage function L(d)
blk(m1, m2) as the “ORE leakage”
between two equal-length values m1 and m2. Informally, the “ORE leakage” in our setting is the
ordering of m1 and m2 and the index of the ﬁrst diﬀering digit in the d-ary representation of m1
and m2. Our range query leakage function Lrq then takes as input the database D = (d1, . . . , dM ),
and a sequence of (cid:96) queries q1, . . . , q(cid:96) and outputs:
• For each i ∈ [M ] and j ∈ [(cid:96)], the ORE leakage between each database value di and query qj.
For a range query of the form q = (x, y), this includes the ORE leakage between both pairs
(di, x) and (di, y) for i ∈ [M ].
• For each query qi, and each insertion or deletion query q(cid:48)
j, the ORE leakage between qi and q(cid:48)
j.
Similarly, for a range query of the form qi = (xi, yi), this include the ORE leakage between
both pairs (xi, q(cid:48)
j) and (yi, q(cid:48)
j).
Roughly speaking, our range query scheme reveals the ordering and the index of the ﬁrst diﬀering
digit between every query and every message in the database. We also leak some information
between range queries and insertion/deletion queries. We now formalize our security claims.
Online security. For a database D ∈ [N ]M and sequence of (cid:96) queries q1, . . . , q(cid:96), let R,I,D denote
the sequence of values appearing in the range queries, the insert queries, and the delete queries,
respectively. Note that the two values in each range query are expanded as separate elements in R.
Finally, let Q = R(cid:107)I(cid:107)D.
Theorem 5.4. Let Lrq be the following leakage function:
Lrq(D, q1, . . . , q(cid:96)) = (Ldual(Q, D),Ldual(Q,I(cid:107)D))
Then, the range query scheme Πrq achieves online security with respect to the leakage function Lrq.
Proof. The proof follows immediately from observing that in Πrq, the values that are encrypted using
the left encryption algorithm are the values appearing in the queries Q, and the values encrypted
using the right encryption algorithm are the database elements, along with the respective components
appearing in the insertion and deletion queries. Hence, we can directly invoke Lemma 5.3, which
proves the theorem.
Oﬄine security. Oﬄine security (Deﬁnition 5.2) of our range query scheme Πrq follows directly
from the fact that the encrypted database stored on the server only contains a collection of right
ciphertexts, which are simulatable given just the size of the collection (that is, the right ciphertexts
are semantically secure encryptions of their values).
Theorem 5.5. The range query scheme Πrq is oﬄine secure.
Proof. The contents of the server’s state after each query in the range query protocol Πrq is always
a collection of ORE right ciphertexts. Hence, for any sequence of states st0, . . . , st(cid:96) induced by
a database D and any sequence of queries q1, . . . , q(cid:96), we just need to invoke the simulator (for
constructing right ciphertexts) in the proof of Theorem 4.1 a total of |st(cid:96)| times to simulate the
right encryptions in st(cid:96). This completes the proof.
18
Robustness against oﬄine inference attacks. Oﬄine security for our protocol implies that
the contents of the server’s database are always semantically secure. Consequently, ciphertext-only
inference attacks, such as those studied by Naveed et al. [NKW15], do not directly apply.
In their model [NKW15, §4.2], an attacker is able to obtain access to the “steady state” of an
encrypted database, which describes the database in a state that includes all auxiliary information
that is needed to perform encrypted searches eﬃciently. In our scheme, no such auxiliary information
is needed on top of the ORE scheme, and yet we are still able to achieve oﬄine security. In contrast,
in other existing PPE-based schemes, comparisons are enabled by a underlying layer of OPE
encryption, which is vulnerable to inference attacks. Thus, even though these schemes can be
modiﬁed to satisfy our notion of oﬄine security, their “steady-state” representation is in the form
of OPE ciphertexts which are vulnerable to inference attacks. Our scheme achieves robustness
against these ciphertext-only inference attacks because our steady-state representation is precisely
our oﬄine representation. Finally, we note that we can always add additional layers of encryption
(e.g., onion encryption [PRZB11]) without compromising the security of our range query scheme,
which can serve as a useful countermeasure against general adversaries.
Existing schemes and the left/right framework. The key ingredient in our work that enables
us to construct an eﬃcient, inference-robust range query protocol is the fact that ciphertexts in
our scheme naturally split into left and right components such that the right components, when
taken in isolation, are semantically secure. To our knowledge, our scheme is the ﬁrst practical
ORE scheme where the ciphertexts split naturally into left and right components such that one
side is semantically secure.7 In contrast, no OPE scheme can satisfy this property—this is due to
the restriction that the comparison operation must be a numeric comparison on the ciphertexts.
Since comparisons are transitive, this means that if comparisons are possible between left and right
ciphertexts, they are necessarily possible between left ciphertexts or right ciphertexts in isolation.
Thus, neither side can be semantically secure.
Ciphertexts in the Chenette et al. [CLWW16] ORE scheme also do not decompose naturally
into left and right ciphertexts where one side is semantically secure. In fact, ciphertexts in their
scheme are deterministic, and thus, cannot provide semantic security. We note though that the
semantically-secure ORE constructions from multilinear maps [BLR+15] or indistinguishability
obfuscation [GGG+14] are naturally deﬁned in the left/right framework (speciﬁcally, the encryption
function in these constructions also take an “input slot,” which directly corresponds to our notions
of left and right). Thus, these ORE constructions can also be leveraged to obtain a range query
scheme with sublinear query complexity and robustness against oﬄine inference attacks. Due to
their reliance on extremely powerful tools, however, they are very far from being practically viable.
6
Impossibility Result for OPE
Our ORE construction from Section 4 uses a small-domain ORE scheme with best-possible security
as a core building block. A natural question to ask then is whether we could have applied the same
kind of transformation starting from a small-domain OPE scheme with best-possible security. While
Boldyreva et al. [BCLO09, BCO11] and Popa et al. [PLZ13] have previously ruled out the existence
7Concurrent with the publication of this work, Joye and Passel´egue [JP16] and Cash et al. [CLOZ16] also independently
proposed practical ORE constructions (with leakage) based on bilinear groups where the ciphertexts naturally
decompose into left and right components.
19
of such OPE schemes over a superpolynomial size message space, their lower bounds do not rule out
the possibility of an OPE scheme over a polynomial-size domain that achieves best-possible security.
In this section, we show that even this is impossible. In particular, no OPE scheme whose
plaintext space contains just three messages can satisfy the “best-possible” notion of security
(IND-OCPA) unless the length of the ciphertexts is superpolynomial in the security parameter. In
other words, the size of the ciphertext space for any such OPE scheme is at least 22ω(log λ). We
then show that our lower bound is tight by giving a construction of an IND-OCPA-secure OPE
scheme with plaintext space {1, 2, 3} and ciphertext space [M ] where M = 22ω(log λ). Our results
thus show that there does not exist any eﬃcient stateless, non-interactive OPE scheme that satisﬁes
IND-OCPA security, even for small message spaces.
First, recall that an order-preserving encryption scheme [BCLO09, BCO11] is a special case
of ORE where the ciphertext space is required to be a well-ordered range R. Moreover, given
two ciphertexts ct1, ct2 ∈ R, the comparison algorithm outputs 1 if ct1 < ct2. In other words,
an OPE scheme is an ORE scheme where the comparison function is the “natural” comparison
operation on the ciphertext space. Formally we can specify an OPE scheme by a tuple of algorithms
ΠOPE = (OPE.Setup, OPE.Encrypt). We ﬁrst review the formal deﬁnition of IND-OCPA security
from [BCLO09].
Deﬁnition 6.1 (IND-OCPA Security [BCLO09]). Let ΠOPE = (OPE.Setup, OPE.Encrypt) be an
OPE scheme. Then, ΠOPE is IND-OCPA secure if for all eﬃcient and admissible adversaries A and
sk ← OPE.Setup(1λ), (cid:12)(cid:12)(cid:12)(cid:12)Pr
(cid:104)
r←− {0, 1} : ALoR(sk,b,·,·)(1λ) = b
b
(cid:105) − 1
2
(cid:12)(cid:12)(cid:12)(cid:12) = negl(λ),
where LoR(sk, b, m0, m1) is the left-or-right encryption oracle which on input a key sk, a bit b, and
two messages m0, m1, returns OPE.Encrypt(sk, mb). We say that an adversary A making q queries
(m(1)
0 , m(1)
if and
only if m(i)
1 ) to the LoR oracle is admissible if for all i, j ∈ [q], m(i)
1 ), . . . , (m(q)
1 < m(j)
1 .
0 < m(j)
0
0 , m(q)
Lower bound for OPE schemes. We ﬁrst show that any stateless OPE scheme with a plaintext
space containing at least three messages cannot satisfy IND-OCPA security unless the ciphertext
space has size 22ω(log λ). In other words, the number of bits needed to represent a ciphertext is
2ω(log λ), which is superpolynomial in the security parameter. This theorem eﬀectively shows that
there are no eﬃcient OPE schemes when the message space contains even 3 elements.
Theorem 6.2. Let ΠOPE be a stateless OPE scheme with plaintext space [N ] and ciphertext space
[M ]. If ΠOPE is IND-OCPA-secure and N ≥ 3, then M = 22ω(log λ).
Proof. By correctness of ΠOPE, the OPE.Encrypt(sk,·) function is deterministic with overwhelming
probability over the randomness used to sample sk in OPE.Setup. Thus, without loss of generality,
we assume that OPE.Encrypt(sk,·) is deterministic. Since N ≥ 3, deﬁne the random variable
yi = OPE.Encrypt(sk, i) for i ∈ [3], and let Di be the distribution of yi (taken over the randomness
used to sample sk). For 1 ≤ i < j ≤ 3, deﬁne random variables dij = yj − yi to be random variables
corresponding to the distance between ciphertexts. By deﬁnition, d13 = d12 + d23. Let Dij be the
distribution of dij. By construction, each Dij is a distribution over [M ]. If ΠOPE is IND-OCPA
secure, then it must be the case that D12
c≈ D13. To complete the proof, we show the
following two lemmas.
c≈ D23
20
(cid:88)