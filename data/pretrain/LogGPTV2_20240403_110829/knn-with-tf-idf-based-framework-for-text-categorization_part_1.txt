Available online at www.sciencedirect.com
ScienceDirect
Procedia Engineering 69 ( 2014 ) 1356 – 1364
24th DAAAM International Symposium on Intelligent Manufacturing and Automation, 2013
KNN with TF-IDF Based Framework for Text Categorization
Bruno Trstenjaka*,Sasa Mikacb, Dzenana Donkoc
aDept. of Computer Engineering, Medimurje University of Applied Sciences Cakovec, Croatia
bDept. of Computer Science, Faculty of Electrical Engineering and Computer Science,Maribor, Slovenia
cDept. of Computer Science, Faculty of Electrical Engineering, Sarajevo, Bosnia and Herzegovina
Abstract
KNN is a very popular algorithm for text classification. This paper presents the possibility of using KNN algorithm with TF-IDF
method and framework for text classification. Framework enables classification according to various parameters, measurement
and analysis of results. Evaluation of framework was focused on the speed and quality of classification. The results of testing
showed the good and bad features of algorithm, providing guidance for the further development of similar frameworks.
© 2014 The Authors. Published by Elsevier Ltd.
© 2014 The Authors. Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and peer-review under responsibility of DAAAM International Vienna.
Selection and peer-review under responsibility of DAAAM International Vienna
Keywords: text documents classification; K-Nearest Neighbor; TF-IDF; framework ; machine learning
1. Introduction
Online document classification or document categorization is a problem in today’s library science, information
and computer science. In the past 20 years, the number of text documents in digital form has grown exponentially
[4]. As a consequence of exponential growth, great importance has been put on the classification of documents into
groups that describe the content of the documents. The function of classifier is to merge text documents into one or
more predefined categories based on their content [9]. Each document can belong to several categories or may
present its own category. Very rapid growth in the amount of text data leads to expansion of different automatic
methods aimed to improve the speed and efficiency of automated document classification with textual content. The
documents to be classified can contain text, images, music, etc. Each content type requires special classification
methods. This article is focused on the textual content documents with special emphasis on text classification. Text
* Corresponding author. Tel.: +385 40 328 246
E-mail address:PI:EMAIL
1877-7058 © 2014 The Authors. Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
Selection and peer-review under responsibility of DAAAM International Vienna
doi: 10.1016/j.proeng.2014.03.129
Bruno Trstenjak et al. / Procedia Engineering 69 ( 2014 ) 1356 – 1364 1357
classification is one of the problems of text mining. Text mining is an interdisciplinary field that draws on
information retrieval, data mining, machine learning, statistics, and computational linguistics [5].
In this article the working principle of framework for text classification based on using KNN algorithm and TF-
IDF method will be explained. A Framework allows measuring the document similarity on the basis of given textual
pattern. Selecting documents on local or web-based environment, the framework performs the documents
classification and statistical analysis of the results. In the classification of documents a modified original algorithm
optimized at implementation level using Language-Integrated Query (LINQ) and C Sharp programming language
are used.
The K-Nearest Neighbor (KNN) is one of the simplest lazy machine learning algorithms [13,14]. Algorithm
objective is to classify objects into one of the predefined classes of a sample group that was created by machine
learning. The algorithm does not require the use of training data to perform classification, training data can be used
during the testing phase. KNN is based on finding the most similar objects (documents) from sample groups about
the mutual Euclidean distance [1,11].
Term frequency-inverse document frequency (TF-IDF) is a numerical statistic method which allows the
determination of weight for each term (or word) in each document. The method is often used in natural language
processing (NLP) or in information retrieval and text mining [17,18]. The method determines the weight, measure
which evaluates importance of terms (or words) in document collection. The importance of the text is increased
proportionally to the number of appearing in the documents [2,3].
2. KNN & TF-IDF Framework
2.1. General information
The Framework is designed to enable the classification and measurement of similarity of documents based on the
required text sample. It consists of several modules that take users through the process of classification. It consists
with several modules who lead users through the process of classification. Implementation of the Framework is
realized in an object-oriented development environment with the programming language C Sharp.
2.2. Framework structure
GUI module Documents
module
Preprocessing
module
KNN & TF-IDF
module
Measuring
module
Fig. 1. Framework structure.
1358 Bruno Trstenjak et al. / Procedia Engineering 69 ( 2014 ) 1356 – 1364
As previously noted, the framework consists of several separate modules. Fig. 1 shows the structure of the new
concept of Framework.
The framework has five basic modules: GUI module, Documents module, Preprocessing module, KNN &
TF_IDF module, Measuring module. GUI module allows user to control the application and the entire framework.
The Documents module is designed for document management and selecting data resources. Document resources
can be located on the local computer or on the Internet. In this module a user can define document categories, the
feature which influences the final results of text classification. The Preprocessing module checks the document
characteristics, prepares and adjusts them into a format suitable for classification. The module adjusts documents to
classic text format, regardless of the type of font and character set. The documents with a specific format module
automatically remove the control characters that might have a negative impact on the result of classification. The
main module in the framework is the KNN & TF_IDF module. The module contains the main methods for
classification and determination of the document weight value. The results of the classification forward to the last
module for the measurement and presentation statistical indicators. The last module allows displaying the
classification results and their simple statistical analysis.
2.3. KNN classifier
As previously mentioned the algorithm is based on the machine learning. Preprocessing and document
preparation is followed by the learning phase. The algorithm determines the basic documents which will be
comparing with each new document. Algorithm checks where a document is categorized by only looking at the
training documents that are most similar to it.
The algorithm assumes that it is possible to classify documents in the Euclidean space as points. Euclidean
distance is the distance between two points in Euclidean space. The distance between two points in the plane with
coordinates p=(x, y) and q=(a, b) can be calculated[19]:
(cid:1856)(cid:4666)(cid:1868)(cid:481)(cid:1869)(cid:4667)(cid:3404)(cid:1856)(cid:4666)(cid:1869)(cid:481)(cid:1868)(cid:4667)(cid:3404)(cid:3493)(cid:4666)(cid:1876)(cid:3398)(cid:1853)(cid:4667)(cid:2870)(cid:3397)(cid:4666)(cid:1877)(cid:3398)(cid:1854)(cid:4667)(cid:2870) (1)
2.4. Learning process
Learning process starts with parsing the basic text which searches the words in documents and forms a vector
[10]. Parsing process removes all control characters, spaces between words, dots, commas, and similar characters.
The formed vector represents a fundamental object that will be used for classification of tested documents. Example
1 below illustrates the procedure for preprocessing search text and the formation of the main vector.
Example 1:
Search text: “Text classification, KNN method.”
Preprocessing: Text classification KNN method
Base vector: mainVec = [Text classification KNN method]
mainVec[0]= Text
mainVec[1]= classification
mainVec[2]= k-NN
mainVec[3]= method
Bruno Trstenjak et al. / Procedia Engineering 69 ( 2014 ) 1356 – 1364 1359
Structure of the main vector object shown in Fig. 2.
Vector – main object
Word 1 | Word 2 | Word 3 | Word 4
mainVec[0] mainVec[1] mainVec[2] mainVec[3]
Fig. 2. Graphical presentation of vector.
2.5. Determination of the weight matrix
To provide text classification and searching the documents it is necessary to establish the weight matrix. The
matrix contains the values of relations between each unique words and documents. It is the initial object in the
algorithm to calculate the individual importance (weight) of each searched document. Each document is represented
as a vector in n-dimensional vector space. We can imagine a matrix A with dimensions NxM, where N dimension is
defined by a number of unique words in a sample of all documents. M represents the number of documents to be
classified. Weight matrix can be characterized as a relational matrix of word - document. Dimension of the matrix is
equal to product, the number of different unique words and the total number of documents. Each matrix element a ij
represents weight value of word i in the document j. Weight matrix is shown in Fig. 3.
Fig. 3. Weight matrix.
In determining the weight values in the matrix, we can use different metrics and methods of calculation.
1360 Bruno Trstenjak et al. / Procedia Engineering 69 ( 2014 ) 1356 – 1364
2.6. Determination of the weight matrix
Term binary
Binary method is extremely simple and easy to implement. The method checks if a particular word (term) appears in
the document. The values in the matrix can be 0 or 1. If the word appears in the document, then the weight value a ij
is set to 1, otherwise is set to 0.
Term frequency
The method computes the number of repetitions of a word (term) in the document j [4].
(cid:1853) (cid:3404)(cid:3)(cid:1858) (cid:3404)(cid:3)(cid:1858)(cid:1870)(cid:1857)(cid:1869)(cid:1873)(cid:1857)(cid:1866)(cid:1855)(cid:1877)(cid:3)(cid:1867)(cid:1858)(cid:3)(cid:1872)(cid:1857)(cid:1870)(cid:1865)(cid:3)(cid:1861)(cid:3)(cid:1861)(cid:1866)(cid:3)(cid:1856)(cid:1867)(cid:1855)(cid:1873)(cid:1865)(cid:1857)(cid:1866)(cid:1872)(cid:3)(cid:1862) (2)
(cid:3036)(cid:3037) (cid:3036)(cid:3037)
Some text classification algorithms performed normalize term frequency by dividing with the frequency of the most
common term in the document.
(cid:1853) (cid:3404)(cid:3)(cid:1858) (cid:3)(cid:512)(cid:3)(cid:3)(cid:1865)(cid:1853)(cid:1876)(cid:3419)(cid:1858) (cid:3423) (3)
(cid:3036)(cid:3037) (cid:3036)(cid:3037) (cid:3036) (cid:3036)(cid:3037)
Term frequency – inverse document frequency (TF-IDF)
A very popular research method in the field of natural language processing (NLP) which is used in the
implementation of the algorithm described in this article. TF-IDF method determines the relative frequency of words
in a specific document through an inverse proportion of the word over the entire document corpus. In determining
the value, the method uses two elements: TF - term frequency of term i in document j and IDF - inverse document
frequency of term i. In our research and testing the algorithm of framework this method showed good results. TF-
IDF can be calculated as [16]: