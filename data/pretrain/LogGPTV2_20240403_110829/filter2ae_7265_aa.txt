本文是[Windows Exploitation Tricks: Exploiting Arbitrary Object Directory
Creation for Local Elevation of
Privilege](https://googleprojectzero.blogspot.com/2018/08/windows-exploitation-tricks-exploiting.html)的翻译文章。
# 前言
我们又回到了关于Windows利用技巧系列。
这次我将详细说明我将如何利用问题[1550](https://bugs.chromium.org/p/project-zero/issues/detail?id=1550)，它能使用CSRSS特权进程的某些行为创建任意对象目录。
我将再次说明如何利用特定漏洞，我希望读者能够更好地了解Windows操作系统的复杂性，并向微软提供有关非内存损坏利用技术的信息，以便他们能够以某种方式缓解这些漏洞。
# 漏洞概述
对象管理器目录与普通文件目录无关。 使用一组单独的系统调用（如NtCreateDirectoryObject而不是NtCreateFile）创建和操作目录。
即使它们不是文件目录，也很容易受到许多和你在文件系统上发现的相同类别问题的影响，包括特权创建和符号链接劫持攻击。
问题[1550](https://bugs.chromium.org/p/project-zero/issues/detail?id=1550)中的漏洞允许在用SYSTEM权限运行时在用户可控制的位置内创建目录。
该bug的根源在于[Desktop Bridge](https://docs.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-extensions)应用程序的创建。
AppInfo服务负责创建新应用，调用未记录的API，CreateAppContainerToken来执行一些内部管理。
不幸的是，此API在用户的AppContainerNamedObjects对象目录下创建对象目录，以支持OS重定向BaseNamedObjects和RPC端点。
由于在不模拟用户的情况下调用API（在CreateProcess中调用它一般不是个大问题），因此使用服务的标识（即SYSTEM）创建对象目录。
由于用户可以将任意对象写入其AppContainerNamedObjects目录，所以他们可以删除对象管理器符号链接，并将创建的目录重定向到对象管理器命名空间中的任何位置。
该目录是使用显式安全描述符创建的，该描述符允许用户完全访问，这对于利用来说将变得非常重要。
利用此漏洞的一个难点是，如果未在AppContainerNamedObjects下创建对象目录，但我们已经重定向其位置，那么执行令牌创建并在其操作过程中捕获目录句柄的基础NtCreateLowBoxToken系统调用将失败。
可以创建目录，但很快就会被删除。 这种行为实际上是我报告的早期[问题](https://docs.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-extensions)，它改变了系统调用的行为。这仍然可以通过在删除之前打开创建目录的句柄来实现，并且在实践中，只要你的系统具有多个处理器（基本上是任何现代系统），它几乎都能成功。要打开句柄，只需利用该目录，该目录就会保持活动状态。
这是我发送给MSRC的原始PoC停止的点，所有PoC都创建了一个任意对象目录。 你可以在问题跟踪器中找到此PoC附加到初始错误报告。
现在让我们深入了解如何利用此漏洞从普通用户提权得到特权SYSTEM用户。
# 利用
利用的主要问题是找个位置，并在里面创建一个对象目录，然后利用该目录来提升我们的权限。 事实证明这比你想象的要难。
虽然几乎所有Windows应用程序都使用底层的对象目录，例如BaseNamedObjects，但应用程序通常会与漏洞无法用于修改的现有目录进行交互。
本利用的对象目录是KnownDlls（我在本系列的前一篇[博客](https://xz.aliyun.com/t/2670)中简要提到过）。
此对象目录包含NAME.DLL形式的命名图像节对象列表。
当程序在SYSTEM32目录内的DLL上调用LoadLibrary时，加载程序会先检查KnownDlls对象目录中是否存在现有镜像节，如果该节存在则将加载而不是创建新的部分对象。  
KnownDll只能由管理员写入（严格来说我们不会看到），因此如果你能删除此目录中的任意节对象，那么也能强制系统服务加载指定的DLL，例如使用Diagnostics
Hub服务 我在上一篇博文中描述过，它会映射节，而不是磁盘上的文件。
但是，除了添加一个无助于利用的新子目录之外，该漏洞不能用于修改KnownDlls对象目录。
也许我们可以通过利用漏洞使用的其他功能来间接定位KnownDlls？
每当我研究产品的特定部分时，我总会记下有趣或意外的行为。在我研究Windows符号链接时发现了一个有趣的例：Win32
API支持名为[DefineDosDevice](https://docs.microsoft.com/en-us/windows/desktop/api/fileapi/nf-fileapi-definedosdevicew)的函数，此API的目的是允许用户定义新的DOS驱动器号。 API需要三个参数，一组标志，要创建的驱动器前缀（例如X
:)和映射该驱动器的目标设备。 API的主要用途和CMD的[SUBST](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/subst)命令相似。
在现代版本的Windows上，此API在用户自己的DOS设备对象目录中创建一个对象管理器符号链接，该位置可由普通的低权限用户帐户写入。
但是，如果你看一下DefineDosDevice的实现，你会发现它没有在调用者的进程中实现。
相反，该实现在当前会话的CSRSS服务中调用RPC方法，特别是BASESRV.DLL中的BaseSrvDefineDosDevice方法。
调用特权服务的主要原因是它允许用户创建永久符号链接，当符号链接对象的所有句柄都关闭时，该链接不会被删除。
通常，要创建永久命名的内核对象，你需要SeCreatePermanentPrivilege权限，但普通用户没有该权限。
另一方面CSRSS会这样做，通过调用该服务，我们可以创建永久符号链接。
创建永久符号链接的能力当然很有趣，但如果我们仅限于在用户的DOS设备目录中创建驱动器号，那它也不是特别有用。
我还注意到，实现从未验证lpDeviceName参数是否为驱动器号。 例如，你可以指定名称“GLOBALROOT\RPC
Control\ABC”，它实际上会在用户的DosDevices目录之外创建一个符号链接，特别是在这种情况下，路径为“\RPC Control\ABC”。
因为实现将DosDevice的前缀“\??”添加到设备名称并将其传递给NtCreateSymbolicLink。内核将遵循完整路径，找到GLOBALROOT，它是返回根的特殊符号链接，然后按照创建任意对象的路径。
目前还不清楚这是否是固定行为，所以我更深入地研究了CSRSS的实施情况，CSRSS的缩写形式如下所示。
    NTSTATUS BaseSrvDefineDosDevice(DWORD dwFlags,
                                   LPCWSTR lpDeviceName,
                                   LPCWSTR lpTargetPath) {
       WCHAR device_name[];
       snwprintf_s(device_name, L"\\??\\%s", lpDeviceName);
       UNICODE_STRING device_name_ustr;
       OBJECT_ATTRIBUTES objattr;
       RtlInitUnicodeString(&device_name_ustr, device_name);
       InitializeObjectAttributes(&objattr, &device_name_ustr,
                                  OBJ_CASE_INSENSITIVE);
       BOOLEAN enable_impersonation = TRUE;
       CsrImpersonateClient();
       HANDLE handle;
       NTSTATUS status = NtOpenSymbolicLinkObject(&handle, DELETE, &objattr);①
       CsrRevertToSelf();
       if (NT_SUCCESS(status)) {
           BOOLEAN is_global = FALSE;
           // Check if we opened a global symbolic link.
           IsGlobalSymbolicLink(handle, &is_global); ②
           if (is_global) {
               enable_impersonation = FALSE; ③
               snwprintf_s(device_name, L"\\GLOBAL??\\%s", lpDeviceName);
               RtlInitUnicodeString(&device_name_ustr, device_name);
           }
           // Delete the existing symbolic link.
           NtMakeTemporaryObject(handle);