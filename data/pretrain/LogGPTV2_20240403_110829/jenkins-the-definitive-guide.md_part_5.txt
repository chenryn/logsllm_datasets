### Different Focus
The Sonatype developers have been focusing on significant underlying infrastructure changes, particularly in areas such as Maven integration, the dependency injection framework, and the plugin architecture.

### 1.5. Should I Use Jenkins or Hudson?
When deciding between Jenkins and Hudson, consider the following points:

#### Reasons to Choose Jenkins:
- **Jenkins is the New Hudson**: Jenkins is essentially the old Hudson with a new name. If you liked Hudson, you will likely appreciate Jenkins. It uses the same codebase, and the development team and project philosophy remain unchanged.
- **Strong Community Support**: Like many successful open-source projects, Jenkins benefits from a large and dynamic community. This means bugs are identified and fixed more quickly, and if you encounter an issue, there's a good chance someone else has already found a solution. You can seek help through mailing lists or IRC channels.
- **Rapid Development Pace**: Jenkins continues the rapid release cycles that characterized Hudson. New features, plugins, and bug fixes are released weekly. For those who prefer stability, Long-Term Support (LTS) releases are available.

#### Reasons to Stick with Hudson:
- **If It Ain’t Broke, Don’t Fix It**: If you are satisfied with your current Hudson installation and do not feel the need to upgrade, you may choose to stay with Hudson.
- **Enterprise Integration and Sonatype Tools**: Hudson places a strong emphasis on integrating with enterprise tools such as LDAP/Active Directory and Sonatype products like Maven 3, Nexus, and M2Eclipse. In contrast, Jenkins is more open to competing tools like Artifactory and Gradle.
- **Plugin Architecture**: Sonatype is working on providing JSR-330 dependency injection for Hudson plugins, which might be easier for new developers. However, this could lead to compatibility issues between Jenkins and Hudson plugins in the future.

The good news is that whether you use Jenkins or Hudson, the products remain very similar. Most of the techniques and tips discussed in this book will apply equally well to both. To illustrate this, many screenshots in this book refer to Hudson rather than Jenkins.

### 1.6. Introducing Continuous Integration into Your Organization
Continuous Integration (CI) is not an all-or-nothing process. Introducing CI into an organization involves several distinct phases, each bringing incremental improvements to the technical infrastructure and, more importantly, to the practices and culture of the development team. Here is an overview of these phases:

#### Phase 1: No Build Server
Initially, the team does not have a central build server. Software is built manually on a developer's machine, often using an Ant script or similar. Source code may be stored in a central repository, but regular commits are not mandatory. Integration is a manual and often painful process.

#### Phase 2: Nightly Builds
In this phase, the team has a build server, and automated builds are scheduled nightly. The build compiles the code, but there are no reliable or repeatable unit tests. Developers commit their changes regularly, at least at the end of every day. If conflicts arise, the build server alerts the team via email the next morning. However, the team still tends to use the build server primarily for informational purposes and may not immediately fix broken builds.

#### Phase 3: Nightly Builds and Basic Automated Tests
The team starts taking CI and automated testing more seriously. The build server triggers a build whenever new code is committed, and team members can easily see what changes triggered a particular build and what issues they address. The build script compiles the application and runs a set of automated unit and/or integration tests. The build server also alerts team members of integration issues via more proactive channels like Instant Messaging. Broken builds are generally fixed quickly.

#### Phase 4: Enter the Metrics
Automated code quality and code coverage metrics are introduced to evaluate the quality of the codebase and the effectiveness of the tests. The build also generates API documentation automatically. A "build radiator" dashboard is set up to display the project status prominently, helping the team maintain high code quality.

#### Phase 5: Getting More Serious About Testing
Practices like Test-Driven Development (TDD) become more widespread, increasing confidence in automated builds. The application is not only compiled and tested but, if the tests pass, it is automatically deployed to an application server for comprehensive end-to-end and performance tests.

#### Phase 6: Automated Acceptance Tests and More Automated Deployment
Acceptance-Test Driven Development (ATDD) is practiced, guiding development efforts and providing high-level reporting on the project's state. These automated tests use Behavior-Driven Development (BDD) and ATDD tools to act as communication and documentation tools, publishing reports in business terms. The application is automatically deployed into test environments for QA testing, either as changes are committed or on a nightly basis. A version can be promoted to UAT and production environments using a manually-triggered build when deemed ready.

#### Phase 7: Continuous Deployment
Confidence in automated unit, integration, and acceptance tests is now high enough that teams can directly deploy new changes into production using the automated deployment techniques developed in the previous phase.

The progression through these phases is approximate and may vary in real-world situations. For example, you might introduce automated web tests before integrating code quality and code coverage reporting. Nonetheless, this should give a general idea of how to implement a CI strategy in an organization.

### 1.7. Where to Now?
Throughout the rest of this book, we will explore the various features Jenkins offers and the practices required to make the most of them. We will see how to progress through each of these levels with Jenkins. Most examples used in the book are available online, so you can get hands-on experience. Visit [http://www.wakaleo.com/books/jenkins-the-definitive-guide](http://www.wakaleo.com/books/jenkins-the-definitive-guide) for more details.

### Chapter 2. Your First Steps with Jenkins

#### 2.1. Introduction
In this chapter, we will take a quick guided tour through some of Jenkins's key features. You will see how easy it is to install Jenkins and set up your first automated build job. We will cover the basics, including monitoring test results, generating Javadoc, and publishing code coverage reports. Let's get started!

#### 2.2. Preparing Your Environment
There are two ways to approach this chapter: read through it for an overview or follow along on your own machine. If you choose the latter, you will need to set up some software.

- **Version Control System**: We will use Git, and the central repository for our simple project is on GitHub. You will create a fork of the repository to work with. If you are new to Git, visit [http://git-scm.com](http://git-scm.com) and [https://github.com](https://github.com) for more information.
- **Java and Maven**: We will use Jenkins to build a Java application using Maven. Jenkins will install the necessary versions of the Java Development Kit (JDK) and Maven for you.

##### 2.2.1. Installing Java
First, ensure you have a recent version of Java installed. You can check this by running `java -version` in the command line. If you need to install Java, download the latest JRE installer from [http://java.sun.com/javase/downloads/index.jsp](http://java.sun.com/javase/downloads/index.jsp).

##### 2.2.2. Installing Git
Install and configure Git on your machine. For detailed instructions, visit [http://git-scm.com](http://git-scm.com). On Linux, you can use package managers like `apt-get` or `yum`.

##### 2.2.3. Setting Up a GitHub Account
Create a free GitHub account at [https://github.com/plans](https://github.com/plans) if you don't already have one.

##### 2.2.4. Configuring SSH Keys
Set up SSH keys to establish a secure connection between your computer and GitHub. Follow the instructions on [http://help.github.com/set-up-git-redirect](http://help.github.com/set-up-git-redirect).

##### 2.2.5. Forking the Sample Repository
Fork the sample repository at [https://github.com/wakaleo/game-of-life](https://github.com/wakaleo/game-of-life) and clone it to your local machine using the command:
```sh
$ git clone https://github.com/<your-username>/game-of-life.git
```

#### 2.3. Starting Up Jenkins
There are several ways to run Jenkins on your machine:

- **Java Web Start**: The easiest way to start Jenkins for the first time is to use Java Web Start. Visit the book resources page at [http://www.wakaleo.com/books/jenkins-the-definitive-guide](http://www.wakaleo.com/books/jenkins-the-definitive-guide) or the Meet Jenkins page on the Jenkins website at [http://wiki.jenkins-ci.org/display/JENKINS/Meet+Jenkins](http://wiki.jenkins-ci.org/display/JENKINS/Meet+Jenkins) to find the Launch button. Java Web Start works best with Firefox.
- **Installers**: Download and install Jenkins from the Jenkins website [http://jenkins-ci.org](http://jenkins-ci.org).
- **Command Line**: Download the Jenkins WAR file and run it from the command line using `java -jar jenkins.war`.
- **Application Server**: Deploy the Jenkins WAR file to an application server like Tomcat.

By default, Jenkins will be running on port 8080, accessible at [http://localhost:8080](http://localhost:8080). If you are using an application server, the URL will be different, e.g., [http://localhost:8080/jenkins](http://localhost:8080/jenkins) for Tomcat.