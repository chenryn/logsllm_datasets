能会用到。
的称呼（见表8-2）。本章实际上不会全部用到它们，但是当你阅读别人写的DBI脚本时，可
面的深入介绍，这些句柄的用法会变得越加清晰。此外，有些常用的非句柄变量也有约定俗成
所指向的结构被称作“对象”（object)。
用DBIAPI时，也需要调用函数，并使用指向各种结构的指针。不同之处在于：函数被称作“方
库时，需要调用各种函数，并通过指向结构或数组的指针来访问与MySQL有关的数据。在使
8.2.1DBI数据类型
到它DBI。如果你已对DBI有所了解，则可以直接跳到8.3节。
法
8.2
行它们：
尾的文件就可以按Perl程序来运行。此时，只需在命令行上给出 Perl脚本的名字，便能顺利执
你安装的是ActiveStatePerl，那么其安装程序会允许你建立一个文件名关联，这样以“.p1”结
程序不搜索当前目录，那么请在脚本名的前面加上“./”。否则，可以省略命令名里的“./”：
然后，在运行此脚本时，只需输入其名字即可：
明，
修改这个#！行。否则，Perl脚本在你的系统上将无法正确执行。
用了这样一行：
遵循了Unix 的脚本约定：在第一行用“#！”指定用于执行脚本的那个程序的路径名。本书使
DBI使用了多种句柄。它们在DBI文档里大都有约定俗成的称呼，如表8-1所示。随着后
Perl DBI的API与第7章介绍的C客户端开发库有很多相似的地方。在使用C客户端开发
本节将介绍DBI的背景知识，无论是编写自己的脚本，还是理解别人所写的脚本，都要用
C:\>myscript.pl
在 Windows 里，可以在程序Perl和以“.p1”结尾的文件名之间建立起文件名关联。例如，
%myscript.pl
本章的示例都将采用这种脚本调用风格。如果脚本文件位于当前目录（即“."），并且 shell
%./myscript.pl
%chmod +xmyscript.pl
在Unix里，可以用chmod命令来修改这个文件的模式，使脚本变得可执行：
在执行脚本时，也可以不用 per1字样来显式地说明执行的是 perl程序。为了不用显示说
%perlmyscript.pl
在任何系统上，都可以像下面这样调用Perl脚本myscript.pl：
在 Unix系统里，如果 Perl的路径名在你的系统上有所不同，如/opt/bin/perl，那么需要
#!/usr/bin/perl
Perl DBI 概述
$dbh
名字
表8-1Perl DBI句柄变量的惯用名
“泛型”句柄；具体含义视上下文而定
指向打开文件的句柄
指向语句（查询）对象的句柄
指向数据库对象的句柄
含义
8.2Perl DBI概述
287
---
## Page 308
这一行是本章所讨论的每个脚本的一部分。因此，在后面将不再赘述。
在8.2.9节，我们将会了解到如何从选项文件里获得这些参数，而不是把它们直接放置在脚本里。
机名、数据库名、用户名或密码。（对于本章其他用到连接参数的脚本，也需要做适当的修改。
请不要把它保存为文字处理器的默认格式。另外，你可能至少还需要修改某些连接参数，如主
编辑器来创建它。如果使用的是字处理器程序，那么一定要记得把脚本保存为普通文本格式。
分隔格式输出一份美史联盟的成员资格名单。输出格式本身没什么意思。眼下最重要的是，弄
个标准概念，如与MySQL服务器的连接和断开、发出 SQL语句、检索数据等。
8.2.2
288
在脚本里至少包含一个简单的用途描述，是一种不错的做法。因此，接下来的一行是一个
#!/usr/bin/perl
下面来逐行分析这个脚本。第一行是一个标准的Perl路径指示符：
如果你想自己试试这个脚本，那么可以使用sampdb 发行版里包含的副本，也可以用文本
我们先从一个简单的脚本dump_members.pl 开始。这个脚本演示了 DBI程序设计中的几
sdbh->disconnect();
$sth->finish();
while （my @ary= $sth->fetchrow_array (）)
#读取并显示查询结果
$sth->execute ();
my $sth= $dbh->prepare ("SELECT last_name,
#执行查询
my
useDBI;
use
use strict;
#dump_members.pl-导出美史联盟的成员资格名单
#!/usr/bin/perl
print join ("\t", @ary),"\n";
$dbh = DBI->connect ($dsn, $user_name, $password, \%conn_attrs);
连接数据库
数据源名字、
%conn_attrs
$user_name = "sampadm";
$dsn = "DBI:mysql:sampdb:localhost";
warnings;
一个简单的DBI脚本
第8章用PerlDBI编写MySQL程序
$ary
$rows
$rc
名字
street, city, state, zip,phone
用户名、
"secret";
密码和连接属性
表8-2PerlDBI非句柄变量的惯用名
一个数组（列表），代表着查询命令所返回的一个行的值
会返回行计数的操作所返回的值
会返回整数的操作所返回的值
会返回true或false值的操作所返回的代码
FROM member ORDER BY last_name");
first_name,
含义
，它将以制表符
---
## Page 309
可以接受多个参数。
术语。如果你真的想知道，那么它表示connect（)是一个“属于”DBI 的函数。）connect（）
调用。（你可以不用关心它到底是什么意思。其实，它只是一种会让你感到头痛不已的面向对象
用于指定连接参数的变量，然后用它们来连接数据库：
这个脚本仿佛在说：“我在明确声明，这些就是我的变量。”
因为在你连接数据库时，DBI会帮你激活那个正确的驱动程序模块。
本中与DBI相关的部分，就会出现错误。你不用指明要使用哪一个 DBD 层的驱动程序模块，
更认真。
作（如输出未初始化的变量）时，发出警告。这会很有用，因为它会警告你在编写代码时应该
为什么脚本不工作呢？
新变量，并把它赋为undef（即“未定义"），然后正常使用它，不报错。而你只能在那里疑惑：
你会检查脚本程序的第n行，发现自己把$my_var错误地写成了$mv_var，于是把它改正过来。
显示下面这样的信息：
$my_var，但在后面的代码里错误地把它写成了$mv_var，那么在严格模式下运行此脚本，就会
不写这条语句，但它有助于捕获错误，所以建议你总是包含它。例如，如果你声明了变量
一种很好的编程习惯。
“#”字符后面的那行文本会被认为是注释。在脚本里使用注释来说明脚本是如何工作的，这是
注释，它能帮助那些查看此脚本的人了解其用途：
use DBI 用于告诉Perl解释器，记得加载DBI模块。如果缺少这一行，那么只要一执行脚
因为我们是在严格模式下执行操作的，所以必须使用my关键字声明此脚本要用到的变量。
use warnings 用于告诉 Perl,
#dump_members.pl-导出美史联盟的成员资格名单
可以根据你使用的 DBI模型的具体需求来确定数据源格式。对于 MySQL 驱动程序，允许
口一个可选参数，用于指明一些其他的连接属性。如果有这个参数，则此参数应该是一个
口 MySQL账户的用户名和密码。
口数据源，也叫数据源名称（data source name），简称 DSN。DSN 指明了要使用哪一个
#数据源名称、用户名、密码和连接属性
当你看到这条信息时，你便会想：“怎么回事？我从未用过名为$mv_var的变量呀！”然后，
Global symbol "$mv_var" requires explicit package name at line n
use strict 用于告诉 Perl来要求你，在使用变量之前必须先声明。在编写脚本时，可以
my Sdbh = DBI->connect ($dsn,$user_name,
#连接数据库
use DBI;
use strict;
接下来是几条use语句：
DBD 模块，以及可能的其他参数。
use warnings;
散列引用，其中指定了连接属性的名字和值。
"secret"
"sampadm";
，在发现你使用了有问题的语言结构，或者执行了有问题的操
$password,
在脚本接下来的部分，会设置那些
\oconn_attrs);
8.2Perl DBI概述
289
---
## Page 310
调用是等价的：
句时，请不要使用它们。语句串的结尾会隐式地终止语句，并不需要显式地加上结束符。
语句串里，也会有同样的问题。这些语句结束符只适合于mysql程序，当在 DBI脚本中执行语
最好能改掉这个习惯，因为分号经常会导致语句因语法错误而失败。把\g 或\G 结束符添加到
你可能已习惯于在SQL语句的末尾加上一个分号“；”来表示语句结束。不过，在使用DBI时
行之前进行预处理。在这个时候，有些驱动程序实际上会处理这条语句。而另外一些则会记住
理语句，然后再执行它：
然后执行一个循环来处理返回的每一个行。这些行构成了结果集。想执行 SELECT，需要先预处
RaiseError 属性，所以如果在connect（)的调用过程中真的出现了错误，那么DBI会显示出
在脚本里这样做，可以做到未雨绸缪。
但是这个设置可以明确地表明，此脚本在事务处理时将启用自动提交模式。这个脚本并没有
的原因，
PrintError 属性。这些设置会使DBI检查与数据库有关的错误。如果有检测到错误，
与数据源格式有关的信息请参考8.2.9节。）
表示的是运行MySQL服务器的主机的位置。如果省略主机名，那么默认为1ocalhost。（更多
这
含
DBI 的大小写无关紧要，但 mysql 必须是小写。db_name代表要使用的数据库名,而 host_name
的DNS 格式有下列两种：
完
290
如果在调用方法时，
请注意，这个语句字符串的结尾并没有带分号。在长时间用mysql程序进行交互开发之后
成。
这里它被赋给了$sth。所有与这条语句有关的进一步处理工作，都将通过这个语句句柄来
条语句，一直到调用execute（）方法来执行它为止。prepare（）的返回值是一个语句句柄，
是如果启用了RaiseError属性，那么它们根本就不会返回。）
信息，然后退出。（其他DBI方法也是如此。我将描述它们在执行出错时会返回什么内容，
任何显式的事务操作，但是将来DBI有可能会要求脚本显式地指定AutoCommit属性。现在
在连接到数据库之后，dump_members.pl 将执行一条 SELECT 语句，检索成员资格名单，
这个属
我们指定连接属性散列作为%conn_attrs 的值，会启用RaiseError属性，而禁月
$sth->execute;
$sth->execute ();
在调用 prepare（）时，使用到了数据库句柄。它会把SQL语句传递给驱动程序，以便在执
$sth->execute();
#执行查询
如果connect（）调用成功，它会返回一个数据库句柄，我们再把这个句柄赋给变量sdbh。
上面两种方法在实际操作上没有任何差别，不同的人可以有不同的选择，适合自己就好。
my $dbh = DBI->connect ($dsn,$user_name,
如果要设定连接属性，那么也可以在调用connect（）时直接提供散列引用：
DBI:mysql:db_name:host_name
DBI:mysql:db_name
，检查全由DBI代劳了。）8.2.3节还会介绍另外的出错响应方法。
属性散列还会启用AutoCommit属性。目前，根本不必启用它（它默认就是启用的）
第8章用PerlDBI编写MySQL程序
street, city, state, zip, phone FROM member ORDER BY last_name");
，不向它传递任何参数，那么可以把它后面的括号省略掉。下面这两个
$password,
first_name,
suffix,email,"
则退出
包
用
---
## Page 311
参数，它是一个连接属性散列：
还有其他的出错处理办法。例如，你完全可以不用DBI代劳，自己来处理这些错误。
来，这些出错，便会自动终止脚本，同时显示出错信息；而不是仅仅返回出错代码。也有可能
8.2.3
更详细的讲解，以便你了解如何在Perl脚本里完成比运行 SELECT语句更复杂的操作。
录生成成员名单。不过，DBI还提供了许多其他有用的功能。下一节将对其中的部分内容进行
技术的应用程序，那么可以直接跳到8.3节，该节将讨论，如何为美史联盟年会议程和打印名
要修改那个传递给 prepare（)方法的 SELECT 语句即可。事实上，如果你急于想看采用了此项
再了解更多的内容，便可以开始编写自己的DBI脚本。例如，要输出其他表的内容，那么只需
后的示例里，如果没必要，将不再使用finish（）。
分的结果集，
它，因为当“获取行”的调用遇到结果集末尾时，它会自动执行这些操作。如果你只是取回部
有分配给它的临时资源。在此脚本里，调用finish（)只是为了演示而已。其实这里用不着调用
了单引号，那么字符\t和\n都将会原样输出。
语言里，转义序列只有出现在双引号里时，才能被解释；在单引号里，无法解释。如果已使用
比较好的消除警告的办法是，检测并处理undef 值。8.2.5节将会介绍一些具体的处理技术。
那么这些警告信息便会消失。不过，警告模式有助于发现问题(如输出了一个未初始化的变量！)。
它们会导致Perl解释器给出如下所示的警告信息：
出的，而不是输出为单词“NULL”。在你运行脚本时，undef 值还会产生另外一个效果，即
出每一个行时，在各列值之间加上制表符。
会返回一个空数组。因此，这个循环语句将依次取回 SELECT语句所返回的每一个行，并在输
隔开来：
脚本里，用于获取行的循环语句，只是简单地输出了每一行的内容，同时用制表符把各个值分
择不同的方式。
为了更好地控制DBI的出错处理行为，现在来仔细研究一下传递给connect（)的最后那个
在获取行的循环结束之后，调用finish（)是想表明：不再需要这个语句句柄，可以释放所
在 Perl脚本里，数据库里的 NULL 值会被返回为 undef 值，但是它们是作为空字符串输
在调用execute（)之后，便可以开始处理成员资格名单的各个行了。在dump_members.pl
在调用 connect（）方法时，dump_members.pl启用了 RaiseError 出错处理属性。如此一
dump_members.p1脚本演示了几个大部分 DBI程序都会涉及的概念。从现在开始，你不必
在输出成员资格名单之后，我们的事就做完了，可以断开与服务器的连接，并退出了：
在print 语句里，制表符和换行符（分别表示为\t和\n 序列）都加上了双引号。在Perl
$dbh->disconnect ();
这些警告信息是因包含了use warnings 语句而产生的。如果去掉这条语句，再运行脚本，
当有更多行时，fetchrow_array（）函数会返回值一个包含当前行的各个列值的数组，否则，
我喜欢留着这些括号，因为它们可以帮我区分脚本中的方法调用和变量引用。你也可以选
Use ofuninitialized value in join at dump_members.pl line n.
$sth->finish();
while(my @ary= $sth->fetchrow_array (）)
#读取并显示查询结果
print join（"\t", @ary)，"\n";