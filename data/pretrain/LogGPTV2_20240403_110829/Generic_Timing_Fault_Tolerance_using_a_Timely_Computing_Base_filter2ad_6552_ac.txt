Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:22:41 UTC from IEEE Xplore.  Restrictions apply. 
4. TCB Overview
4.1. TCB model
The Timely Computing Base model has been devised
to provide a generic framework for systems of partial syn-
chrony, such as the system we assume in this paper. There-
fore, it is our goal to show that the TCB model can be used
to achieve timing fault tolerance with a replicated state ma-
chine. Although in this paper we just present a short de-
scription of the model, a complete description can be found
in [23] and [24].
A system with a Timely Computing Base is divided into
two well-deﬁned parts: a payload and a control part. The
generic or payload part constitutes what is normally ’the
system’ in homogeneous architectures. It exists over a pay-
load network and is where applications run and communi-
cate. The control part is made of local TCB modules, inter-
connected by some form of medium, the control network.
Processes execute on several sites, making use of the TCB
whenever appropriate. We assume only crash failures for
the TCB components, i.e. that they are fail-silent. Further-
more, we assume that the failure of a local TCB module
implies the failure of that site, as seen from the other sites.
The payload part can have any degree of synchronism,
and the control part (the TCB) is assumed to be a syn-
chronous component exhibiting known upper bounds on
processing and message delivery delays, and on the rate of
drift of local clocks. Note that these synchrony properties
are only required for a very small part of the system, and
thus can be secured much more easily than if we were con-
sidering the overall system. A discussion about TCB imple-
mentation issues can be found in [4]. A TCB is a tiny but
effective subsystem providing time-related services to ap-
plications or middleware components executing in the pay-
load part of the system.
4.2. TCB services
In order to keep the TCB simple, which is fundamen-
tal to ensure the required synchrony properties, only the
services considered essential to satisfy a wide range of ap-
plications with timeliness requirements have been deﬁned.
These services satisfy the requirements enumerated in the
end of Section 3. They include a Duration Measurement
service, a Timely Execution service and a Timing Failure
Detection (TFD) service. The duration measurement ser-
vice allows the measurement of arbitrary durations with a
known bounded error. The timely execution service allows
the deterministic execution of some function given a feasi-
ble bound T , with the possibility of specifying an execution
delay, as those resulting from timeouts. Finally, the TFD
service has Timed Strong Completeness and Timed Strong
Accuracy, which describe the properties that a perfect Tim-
ing Failure Detector (pTFD) should exhibit. We use an
adaptation of the terminology of Chandra [8] for the timed
versions of the completeness and accuracy properties.
5. Using the TCB for Timing Fault Tolerance
In this section we explain how the TCB services can be
used in order to handle timeliness requirements and ensure
a correct behavior of the replicated state machine. We fo-
cus on the TCB interface functions that are relevant for this
paper, namely those related with the TFD service.
5.1. Duration Measurement
The duration measurement service can be used in the
construction of the system to measure the duration of read
and write interactions. However, since it is necessary to
detect timing failures, this service alone does not fulﬁll all
our needs. The adequate approach, in this case, is to use
the TFD service interface, which also delivers information
about measured durations. In fact, the duration measure-
ment service is used as a building block for the TFD service.
Note that we are not concerned with the particular imple-
mentation of the duration measurement service, provided
that it allows to bound the measurement errors. Example
implementations can be found in [5] and [11].
5.2. Timely Execution
The timely execution service plays an extremely impor-
tant role in the context of this work. In fact, it can be used to
guarantee that some appropriate function is timely executed
when a timing failure is detected in one of the replicas.
The service allows arbitrary functions to be executed by the
TCB, provided that certain requirements are met. There is
an admission control layer which evaluates the feasibility
of the request, given a speciﬁed worst case execution time
(WCET) and taking into account the existing resources. The
actual implementation details are beyond the scope of this
paper. Nevertheless, there is a body of research on real-time
operating systems and networks that has contributed to this
subject [3, 13, 15].
Similarly to the duration measurement service,
the
timely execution service constitutes a building block for the
TFD service. Therefore, instead of using the basic TCB in-
terface function for timely execution, we will again use the
TFD service interface.
5.3. Timing Failure Detection
There are two important aspects that we address in what
follows. First, we explain how the TCB TFD service inter-
face can be used to observe the duration and to detect timing
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:22:41 UTC from IEEE Xplore.  Restrictions apply. 
failures of read and write interactions on the replicated state
machine. Second, we discuss the properties of the TFD ser-
vice in order to show that they are sufﬁcient to solve the
contamination problem and enforce a correct behavior of
the replicated state machine and of the system.
The TCB interface functions on which we focus in this
paper are presented in Table 1. For the sake of simplicity,
we only show the parameters that are relevant for our dis-
cussion.
Local Timing Failure Detection
id   startLocal (start ts, t spec, handler)
end ts,duration,faulty   endLocal(id)
Remote Timing Failure Detection
id   sendWRemoteTFD (start ts, t spec, handler)
id   receive ()
end ts   endDistAction (id)
id,dur1,faulty1    dur,faulty   waitInfo()
Table 1. TCB API to handle timing failures.
Read interactions can be observed through local tim-
ing failure detection functions. The function startLo-
cal() is used to indicate that a new local action, start-
ing at start ts and with a speciﬁed maximum duration
t spec, should be observed by the TCB. endLocal()
is called to indicate that the action has terminated. If the
action does not terminate within the speciﬁed bound, then
a handler function (if speciﬁed) will be executed by the
TCB as soon as the timing failure is detected. On return,
endLocal() provides the measured duration, as well as
the end timestamp and a failure indicator. Each measure-
ment has a unique id.
In the case of write interactions, the measurement can
be accomplished using the sendWRemoteTFD() and the
endDistAction() functions, which mark the start and
end events, respectively. The identiﬁer of the timed action,
id, is obtained when the update message is received by the
replica (through some receive() function) and is later
used to indicate that the action has ended. To obtain the
measured duration it is necessary to call waitInfo().
This function will block the calling process until the TCB
is able to provide all the information relative to the com-
pletion of the timed action identiﬁed by id. This includes
measured durations and failure status relative to all replicas
addressed by the update operation (the timed action).
It is important to note that the above functions allow
client processes to obtain information about the measured
durations, which are required to correctly estimate the
achievable coverage for the timed interactions. How this
is done is another issue, which we discuss in detail in [7].
When requesting the TCB to observe a new timed action
it is possible to specify a handler function to be timely
executed as soon as a timing failure is detected. Note that
there would be no guarantees about the timeliness of the
reaction if it were done by the replica, in the payload part
of the system. Deciding which local TCB modules should
execute the failure handler depends on the particular appli-
cation. Since in our case we want the handler to be ex-
ecuted in the replica that suffered the timing failure, we
use the sendWRemoteTFD() function instead of a sim-
ple send() (as described in [24]), in which the handler
would be executed by the client side TCB.
Given the above discussion about the relevant TCB inter-
face functions, we now focus on the properties of the TFD
service. We start by deﬁning these properties, assuming that
a timed action T A; e; TA; A is the execution of some
operation, such that its termination event e takes place at ,
within time interval TA from instant A:
Timed Strong Completeness: There
exists TT F Dax
such that given a timing failure at  in any timed
action T A; e; TA; A,
the TCB detects it within
TT F Dax from e
Timed Strong Accuracy: There exists TT F Di such that
any timely timed action T A; e; TA; A that does
not terminate within  TT F Di from e is considered
timely by the TCB
Timed Strong Completeness can be understood as fol-
lows: “strong” speciﬁes that any timing failure is perceived
by all correct processes; “timed” speciﬁes that the failure
is perceived at most within TT F Dax of its occurrence. In
essence, it speciﬁes the detection latency of the TFD.
Timed Strong Accuracy can be understood under the
same perspective: “strong” means that no timely action is
wrongly detected as a timing failure; but “timed” qualiﬁes
what is meant by ’timely’, by requiring the action to occur
not later than a set-up interval TT F Di before the detec-
tion threshold (the speciﬁed bound). In essence, it speciﬁes
the detection accuracy of the TFD. Note that the property is
valid if the local TCB does not crash until e  TT F Dax.
Figure 2. Execution of a perfect TFD.
The timing aspects of the failure detector are illustrated
in Figure 2. When the execution of a timed action termi-
nates before e   TT F Di it is always considered correct.
If it terminates between e   TT F Di and e, it may either
be considered timely or not. When it terminates after e, a
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:22:41 UTC from IEEE Xplore.  Restrictions apply. 
timing failure is always detected. The detection instant will
occur no latter than e  TT F Dax.
The detection latency is seen at the TCB interface as fol-
lows. It is guaranteed that the handler function will be
executed no later than start ts  t spec  TT F Dax.
Furthermore, since timing failures are detected by every
correct TCB, the failure handler can be timely executed, if
needed, in each of them.
Next we show that this TFD service can be used in or-
der to avoid the contamination effect. We ﬁrst introduce an
error-cancellation design rule, which must be followed in
the design of the application.
5.4. Error Cancellation
Given bound T to be enforced with the help of the TCB:
1. let the application logic work with the actual bound
TA  = T — this means that T corresponds to the
timing speciﬁcation that is used in the application, on
which the correctness and temporal consistency de-
pend
2. set
the TCB failure detection logic to trigger at
TT F D = T   TT F Dax — this means that when
using the TFD services, for instance through send-
WRemoteTFD(), the value of t spec must be set to
T   TT F Dax
3. design the environment in order to secure TE V =
T   TT F Dax   TT F Di — this means that to avoid
timing fault detection, the environment should guaran-
tee a bound equal to T   TT F Dax   TT F Di
The error cancellation rule yields interesting results. For
a real execution delay bound of TE V , the application must
work with a safety margin of at least TT F DaxTT F Di,
because of the basic delay and inaccuracy of failure de-
tection. However, for the adjusted bound T = TA  =
TE V  TT F Dax  TT F Di, it is possible to simulate
virtually instantaneous and accurate detection:
(cid:15) any timing failure is detected (by the TCB) by T
(cid:15) any timely execution is never detected as failed
In other words, the error cancellation rule proposes to
use different values for each of the three above-mentioned
aspects of building an application: given TE V , the real
bound yielded by the support environment, we use TT F D =
TE V  TT F Di as the failure detection threshold, and
TA  = TT F D  TT F Dax as the bound visible to the
application.
Using this error-cancellation design rule in association
with the services provided by the TCB, it is possible to de-
sign the replicated state machine in a safe way, by guaran-
teeing that no inconsistent replica may possibly contami-
nate the rest of the system. In Figure 3 we use the same
scenario of Figure 1, but we add the TCBs of a client and
a server node to illustrate how the contamination effect is
avoided.