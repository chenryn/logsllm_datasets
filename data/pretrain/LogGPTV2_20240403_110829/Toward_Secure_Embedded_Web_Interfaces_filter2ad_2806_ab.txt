most vulnerabilities, which can be expected given the
complexity of these devices. We were surprised by the
large number of vulnerabilities in photo frames, which
are relatively simple devices.
Type
LOM
NAS
Photo frame
Router
IP camera
IP phone
Switch
Printer
3
5
3
8
3
1
4
1
(cid:4)
(cid:4)
(cid:4)
(cid:4)
# Devices XSS CSRF XCS RXCS File Auth
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:3)
(cid:4)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:3)
(cid:4)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:3)
(cid:3)
(cid:4)
(cid:3)
(cid:4)
(cid:3)
(cid:4)
(cid:3)
(cid:4)
(cid:3)
(cid:4)
(cid:3)
(cid:3)
Table 2: Vulnerability classes by device type.
A possible explanation is that vendors rushed to market
in order to grab market share with new features. Indeed, in
the Kodak photo frame, half the Web interface is protected
against XSS while the other half is completely vulnerable.
IP cameras and routers are more mature, and therefore
tend to have a better security. Table 2 also shows that
even enterprise-grade devices such as switches, printers,
and LOM are vulnerable to a variety of attacks, which
is a concern as they are usually deployed into sensitive
environments such as server rooms.
4 Threat Model
Our audit showed that embedded web management inter-
faces pose a serious security threat and are currently one
of the weakest links in home and ofﬁce networks. In this
section we formalize our attacker model and the security
objectives that our framework aims at achieving.
4.1 Attacker model
In this paper, we are concerned with securing embedded
web interfaces from malicious attackers. Inspired by the
threat model of [6] we are using the ”web attacker” con-
cept with slightly more powerfully attacker as we allow
the attacker to interact directly with the web framework
like in the active attacker model. Accordingly our attacker
model is deﬁned as follows: we assume an honest user
employs a standard web browser to view and interact with
the embedded web interface content. Our malicious web
attacker attempts to disrupt this interaction or steal sen-
sitive information such as a WPA key. Typically, a web
attacker can attempt to do this in two ways: by trying
to exploit directly a vulnerability in the web interface,
or by placing malicious content (e.g. JavaScript) in the
user’s browser and modifying the state of the browser,
interfering with the honest session. We allow the attacker
to attempt to directly attack the web framework in any
way he likes; in particular, we assume that the attacker
will attempt to DDOS the web server, ﬁnd buffer overﬂow
exploits or brute force the authentication. Finally, we also
assume that the attacker will be able to manipulate any
non-encrypted session to his advantage.
4.2 Security objectives
Based on our audit evaluation and the attacker model
described above we now formalize what security objec-
tives our framework aims at achieving. These goals fall
into four distinct umbrella objectives that cover all of the
known attacks against a web interface.
Enforcing access control. The ﬁrst goal of our frame-
work is to ensure that only the right principals have access
to the right data. Access control enforcement needs to be
enforced at multiple levels. First, at the network level, our
framework needs to ensure that the web interface is only
available in the right physical or network location and to
the right clients. At the application level, it means that
the framework needs to ensure that every web resource
is properly protected and that the attacker can not brute-
force user passwords. Finally, at the user level it also
means that the framework offers to the user the ability to
declare whether a speciﬁc client is allowed to access a
given web application.
Protecting session state. Protecting session state ensures
that once a session is established with the framework,
only the authenticated user is accessing the session. At
the network level, protecting the session state implies
preventing man in the middle attacks by enforcing the
use of SSL. At the HTTP level, protecting the session
means protecting the session cookies from being leaked
over HTTP (as in the Sidejacking attack) or being read
via JavaScript (XSS).
Deﬂecting direct web attacks. Deﬂecting direct web
attacks requires that our framework is not vulnerable to
buffer overﬂow or at least that the privileges gained in case
of successful exploitation are limited. At the application
level, the framework must be able to mitigate XSS [13],
and SQL injection attacks [21].
5
Preventing web browser attacks. In order to prevent
web browser attacks, the framework has to work with the
browser to ensure that the attacker cannot include in a web
site a piece of code (such as an iframe or JavaScript) that
can abuse the trust relation between the browser and the
web interface. These attacks are instances of the confused
deputy problem [6]. They include CSRF and Clickjacking
attacks.
5 System Overview
In this section we discuss the design principles behind our
framework, provide an overview of how the framework
works and describe how a web request is checked and
processed.
5.1 Design principles
To address the threat model presented in the previous sec-
tion, our framework is architected around the following
four principles:
Secure by default. The team in charge of building an
embedded web interface is usually not security savvy
and is likely to make mistakes. To cope with this lack
of knowledge our framework is designed to be secure
by default, which means that every security feature and
check is in place and it is up to the developers to make
them less restrictive or turn them off. For instance, our
default CSP [14] (content security policy) only allows
content from self, which means that no external content
will be allowed to load from a page in the web interface.
Similarly the framework uses whitelists for input ﬁltering:
by default only a restricted set of characters is allowed
in URL parameters and POST variables, and it is up to
the developer to relax this whitelist if needed. As a ﬁnal
example, the framework injects JavaScript frame-busting
code and the X-Frame-Option header in all the pages
in order to prevent Clickjacking attacks. In the unlikely
situation where the interface needs to be embedded in
another webpage, the developer must turn the defense
mechanism off.
Defense in depth. Since there is no universal ﬁx for many
types of attacks, including XSS, CSRF, and Clickjacking,
our framework follows the defense in depth principle and
implements all the known techniques to try and mitigate
each threat as much as possible. We perform ﬁltering and
security checks at input, during processing, and during
output.
Least privilege. Following the OKWS design [29], we
implement the least privilege principle by leveraging the
Android architecture. Each application and the frame-
work have separate user IDs and sets of permissions; this
guarantees that if the framework or one of the applica-
tions is compromised, the attacker will not take complete
ownership of the data. For instance by taking over the
framework one does not gain access to the phone contacts
list used by one of the applications: our framework only
has the network privilege. Note that the application de-
veloper must modularize his or her application to fully
beneﬁt from the least privilege design. Product features
that can signiﬁcantly modify device functionality, such
as by executing a ﬁrmware upgrade, need to receive spe-
cial consideration as well perhaps resulting in additional
backend checks performed in advance.
User consent. Our last design principle is ”user consent
as permission”: we let the user make the ﬁnal decisions
about key security policies. For example, when a new
web client wants to access one of the phone web applica-
tions, it is up to the user to allow this or not because only
she knows if this request is legitimate. Similarly, when
the user installs a new web application, she is asked if
she wants to be prompted for approval each time a client
connects to that application. Finally, at install time we
also provide the user with a summary of the security fea-
tures that have been disabled. The user can then decide if
the presented security proﬁle is acceptable or not. While
users can generally not be relied on for ensuring system
security, we implement the user consent principle in or-
der to catch potential security issues that clearly defeat
common sense.
5.2 Server architecture
As shown in Figure 3, the framework is composed of four
blocks and architected like the iptables ﬁrewall with a
series of security checks performed at input time, and
another series during output.
The Dispatcher is responsible for forwarding an HTTP
request to the desired application. The forwarding
decision is based on the unique port number assigned to
every application. Separating applications by port number
allows greater granularity for doing data encryption
which is speciﬁc to every application.
In addition to
forwarding, the Dispatcher is also responsible for policy
based enforcement of security mechanisms.
The Conﬁguration Manager handles per-application
tuning of the security policies. When an application
is ﬁrst registered with the web server, all the security
mechanisms are turned on by default. The administrator
can then enable or disable individual mechanisms using
the conﬁguration interface. The resulting conﬁguration
is captured in a database and made available to the
Dispatcher for policy enforcement.
6
5.3 Request processing
As depicted in Figure 3 a new web request goes through
a series of input security checks and processing, and is
subsequently forwarded to the actual application. The
response generated is subjected to another iteration of
checks and processing before being sent to the client.
If any check fails then the processing is aborted and a
notiﬁcation is sent via the Alert System.
The pre-processing step performs two rounds of
security checks. First,
the origin of the request is
compared to the client restriction policy in order to block
queries coming from unwanted sources. Second, the
HTTP query is validated through regular expression
whitelists. The corresponding web application is then
identiﬁed (based on the port number) and the session and
CSRF tokens validation checks can be done.
After validation, the request is sent to the web appli-
cation which generates a page using our framework and
sends it back to the web server. Before reaching the
network, the response is passed through post-processing
security mechanisms like S-CSP and CSRF token gener-
ation. This usually results in the inclusion of additional
headers and modiﬁcation of certain HTML elements. The
result is then returned to the client.
6 Security Mechanisms
A broad range of mechanisms and best practices have
been developed over the last few years to counter the
most severe web security problems. It is clear that no sin-
gle technique or framework will make a web application
secure. In addition, expecting developers to understand
and deploy all of these mechanisms on their own is unreal-
istic. Table 3 maps the mechanisms that we embed in our
secure web server implementation against the threats they
are designed to mitigate. We now describe each security
mechanism and provide further references. Note that in
many scenarios we depend on a correct browser imple-
mentation for security capabilities. Wherever possible,
we use additional mechanisms that can add security even
if the browser is not up-to-date or compliant.
HTTPOnly cookies. Many XSS vulnerabilities can be
mitigated by reducing the amount of damage an injected
script can inﬂict. HTTPOnly cookies [33] achieve this
by restricting cookie values to be accessible by the server
only, and not by any scripts running within a page. In
practice, most cookies used in web application logic are
inherently friendly to this concept, and this is why we
have chosen to build it in. (HTTPOnly cookies are not
implemented by Android HttpCookie.)
Figure 3: Overview of the framework design showing
the interaction of the different web server components
(dispatcher, applications, and alert system) involved in
the processing a client request.
The Alert System is used to control how the adminis-
trator is to be notiﬁed for different events. For instance,
the administrator may want to be explicitly alerted for
every new client connection. The Alert System also
handles notiﬁcations caused by malicious web requests
as detected by the Dispatcher. Notiﬁcations can either
be passive or active depending on whether they need
approval from the administrator.
Finally, the framework also provides an API for efﬁ-
ciently implementing web applications. The core func-
tionality includes methods to handle HTTP requests and
generate the response.
It also provides handlers with
build in security mechanisms for content generation such
as HTML components, CSS, JavaScript, JSON etc. For
instance, the HTML, XML and JSON handlers provide pa-
rameterized functions required to escape dynamic content
before being added to the rendered page. In addition, the
framework provides methods for allowing applications to
construct HTTPOnly or secure cookies.
7
Pre-processingDispatcherFiltering- Ip- Network - Location- Input (xss)- URL ScanAlert systemSession checkPost-processing- S-CSP- CSRFHeaders additionCookie check- cookie path- origin/refererDispatcherConﬁguration managerApp1ApplicationsApp2App n..ClientCategory
Defense/Threat
HTTP only cookie
Server side input ﬁltering
CSP
S-CSP
CSRF random token
Origin header veriﬁcation
X-FRAME-OPTION
JS frame-busting code
SSL
HSTS
Secure cookie
Parametrized queries
URL scanning
Application-wide auth
Password policy
Anti brute-force
Restrict network/location
DOS protection
Access control
Session
Bypass
Pass guess MITM Hijack XSS
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Direct attack
SQLi XCS RXCS CSRF Clickjack
Browser attack
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)