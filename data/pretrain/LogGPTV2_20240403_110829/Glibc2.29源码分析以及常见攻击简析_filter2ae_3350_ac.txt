      for (;; )
        {
          int iters = 0;
          while ((victim = unsorted_chunks (av)->bk) != unsorted_chunks (av))  //因为之前先进行的malloc_consolidate，所以这里不会先检查largebin，先检查unsortedbin中是否有合适的，当unsortedbin不为空时，进入while循环
            {
              bck = victim->bk;   
              size = chunksize (victim);
              mchunkptr next = chunk_at_offset (victim, size);   //首先进行一些赋值，很好理解
              if (__glibc_unlikely (size  av->system_mem))    //如果申请的size小于16字节或者大于system_mem，报错
                malloc_printerr ("malloc(): invalid size (unsorted)");
              if (__glibc_unlikely (chunksize_nomask (next)  av->system_mem))  //下一个chunk的size是否在合理
                malloc_printerr ("malloc(): invalid next size (unsorted)");
              if (__glibc_unlikely ((prev_size (next) & ~(SIZE_BITS)) != size))   //检查下一个chunk的prevsize是否与victim相同  
                malloc_printerr ("malloc(): mismatching next->prev_size (unsorted)");
              if (__glibc_unlikely (bck->fd != victim)
                  || __glibc_unlikely (victim->fd != unsorted_chunks (av)))    //检查双向链表的完整性，不能进行unsortedbin attack了
                malloc_printerr ("malloc(): unsorted double linked list corrupted");
              if (__glibc_unlikely (prev_inuse (next)))    //下一个chunk的prev_inuse是否为1，为1则报错
                malloc_printerr ("malloc(): invalid next->prev_inuse (unsorted)");
              /*
                 If a small request, try to use last remainder if it is the
                 only chunk in unsorted bin.  This helps promote locality for
                 runs of consecutive small requests. This is the only
                 exception to best-fit, and applies only when there is
                 no exact fit for a small chunk.
               */
              if (in_smallbin_range (nb) &&
                  bck == unsorted_chunks (av) &&
                  victim == av->last_remainder &&
                  (unsigned long) (size) > (unsigned long) (nb + MINSIZE)) //如果申请的大小等于输入small bin的范围，且unsorted bin链表中只有一个chunk并指向 last_remainder,且该chunk的size大小大于用户申请的szie大小
                {
                  /* split and reattach remainder */
                  remainder_size = size - nb;   //对chunk进行拆分，并获取剩下的大小和开始地址
                  remainder = chunk_at_offset (victim, nb);
                  unsorted_chunks (av)->bk = unsorted_chunks (av)->fd = remainder;  //更新av的bk和fd指针
                  av->last_remainder = remainder; 
                  remainder->bk = remainder->fd = unsorted_chunks (av); //更新remainder的fd和bk
                  if (!in_smallbin_range (remainder_size))
                    {
                      remainder->fd_nextsize = NULL;
                      remainder->bk_nextsize = NULL;
                    }
                  set_head (victim, nb | PREV_INUSE |
                            (av != &main_arena ? NON_MAIN_ARENA : 0));
                  set_head (remainder, remainder_size | PREV_INUSE);
                  set_foot (remainder, remainder_size);
                  check_malloced_chunk (av, victim, nb);  //检查分配的chunk
                  void *p = chunk2mem (victim);
                  alloc_perturb (p, bytes);
                  return p;    
                }
              /* remove from unsorted list */
              if (__glibc_unlikely (bck->fd != victim))   
                malloc_printerr ("malloc(): corrupted unsorted chunks 3");
              unsorted_chunks (av)->bk = bck;
              bck->fd = unsorted_chunks (av);    //将victim解链
              /* Take now instead of binning if exact fit */
              if (size == nb)           //如果申请大小与victim相同，进入循环
                {
                  set_inuse_bit_at_offset (victim, size);  
                  if (av != &main_arena)
            set_non_main_arena (victim);
    #if USE_TCACHE
              /* Fill cache first, return to user only if cache fills.
             We may return one of these chunks later.  */
              if (tcache_nb
              && tcache->counts[tc_idx] fd;
                }
              else            //否则插入largebin
                {
                  victim_index = largebin_index (size);
                  bck = bin_at (av, victim_index);     
                  fwd = bck->fd;
                  /* maintain large bins in sorted order */
                  if (fwd != bck)       //如果largebin非空
                    {
                      /* Or with inuse bit to speed comparisons */
                      size |= PREV_INUSE;
                      /* if smaller than smallest, bypass loop below */
                      assert (chunk_main_arena (bck->bk));   
                      if ((unsigned long) (size)
                  bk))   //如果size比最小的largebin的堆块还小
                        {
                          fwd = bck;
                          bck = bck->bk;
                          victim->fd_nextsize = fwd->fd;
                          victim->bk_nextsize = fwd->fd->bk_nextsize;   //插入到最后一块
                          fwd->fd->bk_nextsize = victim->bk_nextsize->fd_nextsize = victim; //设置链表第一块chunk的bk_nextsize和原链表最后一个chunk的fd_nextsize设为victim
                        }
                      else   //将当前的chunk插入到large bin链表中的合适位置
                        {
                          assert (chunk_main_arena (fwd));
                          while ((unsigned long) size fd_nextsize;    //则将fwd向前移
                  assert (chunk_main_arena (fwd));
                            }
                          if ((unsigned long) size
                  == (unsigned long) chunksize_nomask (fwd))    //如果size=fwd的size
                            /* Always insert in the second position.只插入第二个位置可能是因为不用再重新设置fd_nextsize和bk_nextsize  */  
                            fwd = fwd->fd;    //将fwd移到大小相同的最前
                          else                //将victim插入largebin最前面
                            {
                              victim->fd_nextsize = fwd;
                              victim->bk_nextsize = fwd->bk_nextsize;
                              fwd->bk_nextsize = victim;
                              victim->bk_nextsize->fd_nextsize = victim;   
                            }
                          bck = fwd->bk;  //重新设置bck
                        }
                    }
                  else   //只要largebin为空，直接加入bin中
                    victim->fd_nextsize = victim->bk_nextsize = victim;
                }
              mark_bin (av, victim_index);
              victim->bk = bck;
              victim->fd = fwd;
              fwd->bk = victim;   //这里会有largebin attack
              bck->fd = victim;
    #if USE_TCACHE
          /* If we've processed as many chunks as we're allowed while
         filling the cache, return one of the cached ones.  */
          ++tcache_unsorted_count;
          if (return_cached
          && mp_.tcache_unsorted_limit > 0
          && tcache_unsorted_count > mp_.tcache_unsorted_limit)
        {
          return tcache_get (tc_idx);
        }
    #endif
    #define MAX_ITERS       10000
              if (++iters >= MAX_ITERS)
                break;
            }
    #if USE_TCACHE
          /* If all the small chunks we found ended up cached, return one now.  */
          if (return_cached)
        {
          return tcache_get (tc_idx);
        }
    #endif
          /*
             If a large request, scan through the chunks of current bin in
             sorted order to find smallest that fits.  Use the skip list for this.
           */
          if (!in_smallbin_range (nb))    //从largebin中搜寻
            {
              bin = bin_at (av, idx);     //首先取得largebin头
              /* skip scan if empty or largest chunk is too small */
              if ((victim = first (bin)) != bin   //不为空
              && (unsigned long) chunksize_nomask (victim)  //申请的size小于等于victim的size
                >= (unsigned long) (nb))
                {
                  victim = victim->bk_nextsize;
                  while (((unsigned long) (size = chunksize (victim)) bk_nextsize;      //获取刚好小于用户请求的size 的large bin
                  /* Avoid removing the first entry for a size so that the skip
                     list does not have to be rerouted.  */
                  if (victim != last (bin)   
              && chunksize_nomask (victim)
                == chunksize_nomask (victim->fd))   //last(bin)=bin->bk
                    victim = victim->fd;     //获取同一大小chunk的最后的chunk
                  remainder_size = size - nb;   //拆分largebin
                  unlink_chunk (av, victim);    //解链
                  /* Exhaust */
                  if (remainder_size fd;
              if (__glibc_unlikely (fwd->bk != bck))
                malloc_printerr ("malloc(): corrupted unsorted chunks");
                      remainder->bk = bck;
                      remainder->fd = fwd;
                      bck->fd = remainder;
                      fwd->bk = remainder;
                      if (!in_smallbin_range (remainder_size))
                        {
                          remainder->fd_nextsize = NULL;
                          remainder->bk_nextsize = NULL;
                        }
                      set_head (victim, nb | PREV_INUSE |
                                (av != &main_arena ? NON_MAIN_ARENA : 0));
                      set_head (remainder, remainder_size | PREV_INUSE);
                      set_foot (remainder, remainder_size);
                    }
                  check_malloced_chunk (av, victim, nb);
                  void *p = chunk2mem (victim);
                  alloc_perturb (p, bytes);
                  return p;
                }
            }
          /*
             Search for a chunk by scanning bins, starting with next largest
             bin. This search is strictly by best-fit; i.e., the smallest
             (with ties going to approximately the least recently used) chunk
             that fits is selected.
             The bitmap avoids needing to check that most blocks are nonempty.
             The particular case of skipping all bins during warm-up phases
             when no chunks have been returned yet is faster than it might look.
           */
                    //如果用户申请的size所对应的largebin中没有相应的chunk，则在其他largebin中进行寻找
          ++idx;
          bin = bin_at (av, idx);
          block = idx2block (idx);
          map = av->binmap[block];
          bit = idx2bit (idx);
          for (;; )
            {
              /* Skip rest of block if there are no more set bits in this block.  */
              if (bit > map || bit == 0)
                {
                  do
                    {
                      if (++block >= BINMAPSIZE) /* out of bins */
                        goto use_top;
                    }
                  while ((map = av->binmap[block]) == 0);
                  bin = bin_at (av, (block << BINMAPSHIFT));
                  bit = 1;
                }
              /* Advance to bin with set bit. There must be one. */
              while ((bit & map) == 0)
                {
                  bin = next_bin (bin);
                  bit <<= 1;
                  assert (bit != 0);
                }
              /* Inspect the bin. It is likely to be non-empty */
              victim = last (bin);