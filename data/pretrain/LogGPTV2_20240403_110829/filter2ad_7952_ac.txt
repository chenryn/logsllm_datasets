            # set our extension name
            callbacks.setExtensionName("Repeater to Sitemap")
            callbacks.registerHttpListener(self)
            return
        def  processHttpMessage(self, toolFlag, messageIsRequest, messageInfo):
            if toolFlag == 64: #Repeater
                if messageIsRequest == False:
                    self._callbacks.addToSiteMap(messageInfo)
上述代码的功能是将repeater中的数据包添加到sitemap中：
当我们在repeater中发送一个数据包后，就可以在sitemap中看到：
  * applyMarkers
这个方法是用来标记返回包中敏感信息的，一般搭配IScanIssue使用。
给个demo来理解一下：
    from burp import IBurpExtender
    from burp import IHttpListener
    from burp import IBurpExtenderCallbacks
    from burp import IScanIssue,IScannerCheck,IScannerInsertionPoint
    from array import array
    class BurpExtender(IBurpExtender, IHttpListener, IBurpExtenderCallbacks,IScannerCheck,IScannerInsertionPoint):
        def registerExtenderCallbacks( self, callbacks):
            self._helpers = callbacks.getHelpers()
            self._callbacks = callbacks
            # set our extension name
            callbacks.setExtensionName("Repeater to Sitemap")
            callbacks.registerScannerCheck(self)
            return
        def getMatches(self, response, match):
          '''This finds our pattern match in the request/response and returns an int array'''
          start = 0
          count = 0
          matches = [array('i')]
          while start  0:
                httpmsgs = [self._callbacks.applyMarkers(baseRequestResponse,None,match)]
                issue.append(ScanIssue(baseRequestResponse.getHttpService(), self._helpers.analyzeRequest(baseRequestResponse).getUrl(), httpmsgs, ISSUE_NAME, ISSUE_DETAIL, SEVERITY, CONFIDENCE, REMEDIATION_DETAIL, ISSUE_BACKGROUND, REMEDIATION_BACKGROUND))
            return issue
        def doActiveScan(self, baseRequestResponse, insertionPoint):
            pass
    class ScanIssue(IScanIssue):
      '''This is our custom IScanIssue class implementation.'''
      def __init__(self, httpService, url, httpMessages, issueName, issueDetail, severity, confidence, remediationDetail, issueBackground, remediationBackground):
          self._issueName = issueName
          self._httpService = httpService
          self._url = url
          self._httpMessages = httpMessages
          self._issueDetail = issueDetail
          self._severity = severity
          self._confidence = confidence
          self._remediationDetail = remediationDetail
          self._issueBackground = issueBackground
          self._remediationBackground = remediationBackground
      def getConfidence(self):
          return self._confidence
      def getHttpMessages(self):
          return self._httpMessages
          #return None
      def getHttpService(self):
          return self._httpService
      def getIssueBackground(self):
          return self._issueBackground
      def getIssueDetail(self):
          return self._issueDetail
      def getIssueName(self):
          return self._issueName
      def getIssueType(self):
          return 0
      def getRemediationBackground(self):
          return self._remediationBackground
      def getRemediationDetail(self):
          return self._remediationDetail
      def getSeverity(self):
          return self._severity
      def getUrl(self):
          return self._url
      def getHost(self):
          return 'localhost'
      def getPort(self):
          return int(80)
参考：[CustomScanner.py ](https://github.com/luxcupitor/burpsuite-extensions/blob/505f0821d0ac215e57ba8cebf4b674fdc2d203c6/CustomScanner.py#L154)
该插件的功能是当返回包中含有phpinfo这个字符串时，添加一个Issue并高亮返回包中的phpinfo字符串，效果如下：
当然也可以高亮request中的字符串，参考：
用法：
    self._callbacks.applyMarkers(baseRequestResponse,match,None)
当然也可以两个都高亮：
    self._callbacks.applyMarkers(baseRequestResponse,match1,match2)
  * createBurpCollaboratorClientContext
这个方法之前介绍过了，用来创建IBurpCollaboratorClientContext实例并生成payload的。
  * createMessageEditor
此方法返回实现了IMessageEditor接口的对象，方便在自己插件的UI中使用，具体使用方法参考上面的图形化界面相关(addSuiteTab)。
  * createTextEditor
和上边那个作用是一样的，只是返回的对象实现的接口不同，所以可调用的方法也有几个不同。
参考：[HelloWorldBurpTabExtender.py](https://github.com/cvantet/basic-burp-jython-plugin/blob/143259462618dae954fefb88fc984d9078df7ef1/HelloWorldBurpTabExtender.py)
  * customizeUiComponent
我的理解是这个插件是用来对自定义组件传入其他任意的自定义子组件，也是用来对UI进行操作的。
相当于一个input标签里还可以定义name属性value属性等这个意思。
  * doActiveScan
此方法用于对传入的数据包进行主动扫描，并返回当前正在扫描的队列。
参考：[AutoScanWithBurp.py
](https://github.com/rasinfosec/Burp_Automator/blob/7fbcc7af8b18123e49c07bb5269c61c2e40a8c8a/AutoScanWithBurp.py)
该插件的功能是将爬虫的数据包丢到主动扫描模块进行扫描。
  * doPassiveScan
没怎么用过这个方法，不太了解，大概看了一些网上的demo，推测是使用burp来进行转发，将burp代理的流量转发到扫描器上进行被动扫描。
  * excludeFromScope
从burp的scope中排除指定的url。
  * exitSuite
以编程形式关闭burp，传入参数为0和1，代表用户是否选择关闭burp的布尔标志。
  * generateScanReport
将issues以某种格式导出到某个文件，issues是个列表，里边可以存放多个issue。
此方法一般用于导出漏洞扫描报告或问题集合。
  * getCookieJarContents
官方说明是为了处理会话异常，没找到实用的demo，本地测试了一下：
    from burp import IBurpExtender,ICookie
    class BurpExtender(IBurpExtender,ICookie):
        def registerExtenderCallbacks(self, callbacks):
            self.callbacks = callbacks
            self.helpers = callbacks.getHelpers()
            self.callbacks.setExtensionName('IBurp')
            cookies = self.callbacks.getCookieJarContents()
            for cookie in cookies:
                print(cookie.value)
当然也可以获取cookie所在域，使用cookie.domain即可。
  * getBurpVersion
此方法用于返回Burp相关的信息集合：
  * getCommandLineArguments
此方法返回启动burp时使用的参数列表。
这玩意基本不会用。。
  * getContextMenuFactories
没用过，不予以介绍。
  * getExtensionFilename
此方法返回插件所处的绝对路径：
    from burp import IBurpExtender,ICookie
    class BurpExtender(IBurpExtender,ICookie):
        def registerExtenderCallbacks(self, callbacks):
            self.callbacks = callbacks
            self.helpers = callbacks.getHelpers()
            self.callbacks.setExtensionName('IBurp')
            print(self.callbacks.getExtensionFilename())
  * getExtensionStateListeners
此方法返回该拓展注册的监听器，什么是监听器一会会讲到，比如上文有一个`callbacks.registerHttpListener`，这就注册了一个请求&响应监听器。
  * getHelpers
此方法用于获取IExtensionHelpers对象的实例，这个实例很有用，之后对数据包的很多处理都会用到他。
具体的IExtensionHelpers对象可使用的方法可以看这里：[Interface
IExtensionHelpers](https://portswigger.net/burp/extender/api/burp/IExtensionHelpers.html)。
  * getHttpListeners
此方法返回当前注册的HTTP监听器列表。
示例代码；
    from burp import IBurpExtender,ICookie,IScannerCheck,IHttpListener
    class BurpExtender(IBurpExtender,ICookie,IScannerCheck,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self.callbacks = callbacks
            self.helpers = callbacks.getHelpers()
            self.callbacks.setExtensionName('IBurp')
            callbacks.registerScannerCheck(self)
            callbacks.registerHttpListener(self)
            print(callbacks.getHttpListeners())
        def processHttpMessage(self, toolFlag, messageIsRequest, messageinfo):
            if toolFlag == 4 :
                if messageIsRequest:
                    return
        def doActiveScan(self, baseRequestResponse, insertionPoint):
            pass
        def doPassiveScan(self, baseRequestResponse):
            pass
输出：
PS：以下几个方法都是一个意思，不再重复叙述。
添加上一个getProxyListeners()方法。
  * getProxyHistory
此方法返回history中的数据包列表，返回的是IHttpRequestResponse的实例，可调用其中的方法。
  * getScanIssues
此方法返回某个url的issus列表，列表中的每一项为IScanIssue的实例，可调用其中的方法。
示例：
    class BurpExtender(IBurpExtender,ICookie,IScannerCheck,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self.callbacks = callbacks
            self.helpers = callbacks.getHelpers()
            self.callbacks.setExtensionName('IBurp')
            callbacks.registerScannerCheck(self)
            callbacks.registerHttpListener(self)
            issue_list = callbacks.getScanIssues('http://ctf.localhost.com')
            for issue in issue_list:
                print(issue.getIssueName())
输出：
其中的issueName是在issue列表中获得的：
  * getSiteMap
此方法用于从sitemap中提取指定url的sitemap子集，官方描述是可以匹配以某个特定字符开头的站点，意思就是可以用正则这样子。
返回是IHttpRequestResponse的实例，可以调用其中的方法。
示例：
    class BurpExtender(IBurpExtender,ICookie,IScannerCheck,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self.callbacks = callbacks
            self.helpers = callbacks.getHelpers()
            self.callbacks.setExtensionName('IBurp')
            callbacks.registerScannerCheck(self)
            callbacks.registerHttpListener(self)
            site_requests = callbacks.getSiteMap("http://ctf.localhost.com")
            for request in site_requests:
                print(request.getHttpService())
输出：
  * 四个不懂用的方法
这四个方法是我不知道干啥用的，不予介绍。
  * getToolName
此方法返回toolflag对应的toolname，如果不知道toolflag是啥的回头仔细看看就知道了。
示例：
    from burp import IBurpExtender,ICookie,IScannerCheck,IHttpListener
    class BurpExtender(IBurpExtender,ICookie,IScannerCheck,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self.callbacks = callbacks
            self.helpers = callbacks.getHelpers()
            self.callbacks.setExtensionName('IBurp')
            callbacks.registerScannerCheck(self)
            callbacks.registerHttpListener(self)
            print(callbacks.getToolName(4))
输出：
  * includeInScope
我的理解是将某个匹配规则添加进scope中。
  * isExtensionBapp
判断当前插件是否已经上架到burp的bapp store里了，如果上架了则返回true，反之返回false。
  * isInScope
查询指定的url规则是否在scope中，一般和includeInScope配套使用。
  * issueAlert
用于在burp的选项卡中输出消息。
示例：
    from burp import IBurpExtender,ICookie,IScannerCheck,IHttpListener
    class BurpExtender(IBurpExtender,ICookie,IScannerCheck,IHttpListener):
        def registerExtenderCallbacks(self, callbacks):
            self.callbacks = callbacks
            self.helpers = callbacks.getHelpers()
            self.callbacks.setExtensionName('IBurp')
            callbacks.registerScannerCheck(self)
            callbacks.registerHttpListener(self)
            callbacks.issueAlert("test")
输出：
  * makeHttpRequest
这个方法还挺常用的，简单一点来说就是修改数据包了之后本地重新再发一次，一般用在漏洞检测这块。
从上面第一个图也看到了，这个方法有两种用法：
两种方法都是用来重新发包的，只是返回值不同，第一种返回的是IHttpRequestResponse的实例，可以使用getResponse()方法直接获取响应结果，而第二种返回的数据类型为bytes，一般使用该方法获取响应结果：
    againRes = self._callbacks.makeHttpRequest(host, port, ishttps, againReq)
    link = againReqHeaders[0].split(' ')[1]