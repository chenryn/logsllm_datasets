title:A Framework for Constructing Fast MPC over Arithmetic Circuits with
Malicious Adversaries and an Honest-Majority
author:Yehuda Lindell and
Ariel Nof
A Framework for Constructing Fast MPC over Arithmetic
Circuits with Malicious Adversaries and an Honest-Majority∗
Yehuda Lindell
Bar-Ilan University
PI:EMAIL
Ariel Nof
Bar-Ilan University
PI:EMAIL
ABSTRACT
Protocols for secure multiparty computation enable a set of parties
to compute a function of their inputs without revealing anything
but the output. The security properties of the protocol must be
preserved in the presence of adversarial behavior. The two classic
adversary models considered are semi-honest (where the adversary
follows the protocol speci(cid:27)cation but tries to learn more than al-
lowed by examining the protocol transcript) and malicious (where
the adversary may follow any arbitrary attack strategy). Protocols
for semi-honest adversaries are often far more e(cid:28)cient, but in many
cases the security guarantees are not strong enough.
In this paper, we present a new e(cid:28)cient method for “compiling”
a large class of protocols that are secure in the presence of semi-
honest adversaries into protocols that are secure in the presence
of malicious adversaries. Our method assumes an honest majority
(i.e., that t  2σ (this is not necessary for our framework, but it yields
the highest e(cid:28)ciency).
The (cid:27)rst theorem is suited for a large number of parties, and is
based on Shamir sharing.
Theorem 1.1 (large number of parties). Let n be any number of
parties, and let f be an n-party functionality. Then, there exists a pro-
tocol π that computes f with computational security in the presence
of a malicious adversary controlling up to t  9 it holds that
5(n − 1) > 42, and thus the constant is smaller than the linear
function. Finally, we state our result that is speci(cid:27)c to 3 parties and
uses replicated sharing.
Theorem 1.3 (three parties). Let f be a 3-party functionality.
Then, there exists a protocol π that computes f with computational
security in the presence of a malicious adversary controlling up to 1
corrupted party, where each party sends 4 (cid:27)eld elements per multipli-
cation gate.
Observe that for the case of 3 parties, in the protocol of Theo-
rem 1.2 each party sends 10 elements per multiplication gate, versus
just 4 elements in the protocol of Theorem 1.3.
1.3 Experimental Results
We implemented our protocol versions in C++ and ran our protocols
on Azure in a single region, with a ping time of approximately 1ms.
Each machine is a 2.4GHz Intel Xeon E5-2673 v3, with 4 cores and
8GB RAM; our code is single-threaded so does not utilize more than
one core. We ran extensive experiments to analyze the e(cid:28)ciency
of the di(cid:29)erent protocols for di(cid:29)erent numbers of parties. All of
our protocols scale linearly in the size and depth of the circuit, and
we therefore ran all of our experiments on a depth-20 arithmetic
circuit over a 61-bit (cid:27)eld with 1,000,000 multiplication gates. Our
experiments show that our protocols have very good performance
for all ranges of numbers of parties. In particular, this large circuit
can be computed in half a second with three parties, 4 seconds with
9 parties, 29 seconds with 50 parties and 59 seconds with 90 parties.
Thus, our protocols can be used in practice to compute arithmetic
computations (like joint statistics) between many parties, while
providing malicious security.
1.4 Related Work
There has been a huge amount of work that focuses on improv-
ing the e(cid:28)ciency of secure computation protocols. This work is
roughly divided up into constructions of concretely e(cid:28)cient and
asymptotically e(cid:28)cient protocols. Concretely e(cid:28)cient protocols are
often implemented and aim to obtain the best overall running time,
even if the protocol is not asymptotically optimal (e.g., it may have
quadratic complexity and not linear complexity, but for a small num-
ber of parties the constants are such that the quadratic protocol is
faster). Asymptotically e(cid:28)cient protocols aim to reduce the cost of
certain parts of the protocols (rounds, communication complexity,
etc.), and are often not concretely very e(cid:28)cient. However, in many
cases, asymptotically e(cid:28)cient protocols provide techniques that
inform the construction of concretely e(cid:28)cient protocols.
As explained earlier, there are two main thresholds considered
for an honest majority: t < n/2 and t < n/3. For the case of t < n/3,
it was shown in [17] and [6] how to achieve unconditional and
perfect security in the presence of a malicious adversary, with com-
munication that grows linearly with the number of parties. The
VIFF protocol [14], provided the (cid:27)rst concretely e(cid:28)cient implemen-
tation for t < n/3. VIFF has quadratic communication complexity,
and thus is suitable for a small number of parties. Although their
execution times are 3-4 orders of magnitude slower than ours (for
4 players, they report on 200 multiplications per second), we esti-
mate that an optimized implementation on modern machines and
a network identical to ours would achieve similar times.
We stress, however, that for malicious adversaries, it is consid-
erably harder to achieve a similar level of e(cid:28)ciency with t < n/2
since there is far less redundancy in the secret sharing. (To be exact,
with t < n/3 it is possible to multiply two polynomials together and
the degree is still less that 2n/3, in contrast to the case of t < n/2.)
Thus, techniques like those used in [6] do not apply to our case.
Clearly, it is always best to guarantee security against more pow-
erful adversaries, and thus a protocol that is secure for t < n/2
is preferable to a protocol that requires t < n/3. Furthermore, in
practice, this is of great signi(cid:27)cance for a small number of parties.
Speci(cid:27)cally, for n = 3 it is not possible to run a protocol that re-
quires t < n/3, and for n = 9 a protocol with t < n/2 can tolerate up
to 4 corrupted parties whereas a protocol with t < n/3 can tolerate
only 2 corrupted parties. Thus, protocols that are secure for t < n/2
are preferable.
For t < n/2 corrupted parties, it is much harder to achieve linear
complexity without relying on cryptographic assumptions. This
was (cid:27)rst achieved in [23] using additively-homomorphic encryp-
tion [33] which is far from concretely e(cid:28)cient. Secure computation
that scales linearly with the number of parties was also presented
in [15], but this protocol requires that t < n/2−O(n), and its focus is
on asymptotic and not concrete e(cid:28)ciency. Thus, both protocols, al-
though achieving full security, are much more expensive than ours.
The protocol of [5] is the only protocol, to the best of our knowledge,
that achieves near-linear communication complexity per multipli-
cation gate, namely O(n log n), in the information-theoretic model
and with full security. This protocol uses expensive techniques
for player elimination and computing authentication tags, and is
therefore also not concretely e(cid:28)cient. However, it achieves full
security, whereas we do not guarantee fairness. Recently, [21, 22]
show how to compile semi-honest protocols into maliciously se-
cure protocols for a variety of parameters, and also achieve linear
complexity for the case of t < n/2. No concrete cost analysis or
implementation was given in [21, 22], and thus it is di(cid:28)cult to
estimate the concrete e(cid:28)ciency on speci(cid:27)c instantiations. However,
the constants are signi(cid:27)cantly higher than ours. At the core, [22]