nization header, compares it to the reference header to
estimate its oscillator phase drift from the master, and
corrects for this phase drift before jointly transmitting
its data. We refer the reader to [11] for the full details
of the system.
In the following sections, we describe each of the
components of MegaMIMO 2.0.
4. Channel Update and Tracking
Knowing the channels is a core requirement for any
multi-user MIMO system. In order for the AP to ap-
ply MIMO techniques like beamforming and nulling, it
needs to know a priori the downlink channels to the
clients. However, learning the downlink channels and
tracking them as they change over time can cause ex-
cessive overhead for the system, as shown in Fig. 1. The
414
AP
while the uplink includes the transmit chain on the client
and receive chain on the AP. Thus,
hdown,1
hdown,2
hup,1
hup,2
Cli
Figure 2: A 2-antenna AP transmitting to a 1-
antenna client. With reciprocity based channel esti-
mation, the AP would need to estimate the downlink
channels hdown,1 and hdown,2 from the uplink channels
hup,1 and hup,2.
overhead quickly increases for distributed MIMO as the
number of participating APs and clients increases, and
can eat up most of the gains even for relatively moder-
ate sized distributed MIMO systems with, say, 8 or 16
APs. In this section, we describe a completely passive
approach for learning the downlink channels and updat-
ing them in real-time. Our approach extends the nor-
mal reciprocity concept used in point-to-point MIMO
to infer downlink channels from uplink channels. Below,
we explain how reciprocity is used in today’s MIMO,
the challenges in extending the same concept to dis-
tributed MIMO, and ﬁnally our solution for addressing
those challenges.
4.1 Reciprocity in Traditional MIMO
Let us consider the simple example in Fig. 2 where a
two-antenna AP is communicating with a single-antenna
client. As mentioned earlier, to perform MIMO tech-
niques, the AP needs to know the downlink channels
hdown,1 and hdown,2 to the client. The most straightfor-
ward approach would be to have the AP transmit on the
downlink to the client from both antennas, and have the
client measure the channels and transmit them back to
the AP.2 Alternatively, the AP can avoid the feedback
overhead by leveraging the concept of reciprocity, which
says that the forward channel on the air is the same as
the reverse channel on the air. Thus the AP can leverage
the client’s transmissions to measure the uplink channels
hup,1 and hup,2. It can then convert them to downlink
channel estimates by multiplying them by a calibration
factor, Ki, as follows:
hdown,1 = K1hup,1
hdown,2 = K2hup,2
The calibration factor compensates for the fact that
the measured channels include the hardware of the AP
and the clients, as well as the air channels. Speciﬁcally,
the downlink channels include the impact of the trans-
mit chain on the AP and the receive chain on the client,
2The client would need to measure the channels for all
subcarriers and send them back to the AP.
K1 =
K2 =
htx,AP,1
hrx,AP,1
htx,AP,2
hrx,AP,2
/
/
htx,Cli,1
hrx,Cli,1
htx,Cli,1
hrx,Cli,1
From the above, it might seem that the calibration
factor used at the AP are client dependent. However,
this is not the case. Speciﬁcally, MIMO systems do not
need the exact values of the channels but rather need the
relative ratios of the channels from the diﬀerent trans-
mit antennas.3 [15]. Therefore, instead of computing the
above channels, we can divide all channels by K1, and
compute the following MIMO channels.
h′
down,1 = hup,1
h′
down,2 = C2hup,2
where this new calibration factor:
Ci =
htx,AP,i
hrx,AP,i
/
htx,AP,1
hrx,AP,1
is independent of the client.
Further, this calibration factor, Ci, is independent of
time and can be computed once and used for all further
transmissions from this AP.
4.2 Reciprocity in Distributed MIMO
Ideally, one would like to leverage the concept of
reciprocity to learn the downlink channels without any
client feedback, as is the case for traditional MIMO. Un-
fortunately, the traditional reciprocity formulation does
not extend to distributed MIMO, i.e., there is no such
constant factors that can be computed once and used to
infer the downlink channels from the uplink channels.
To understand why this is the case, let us go back
to our previous example and assume that instead of two
independent APs, we have two APs each with one an-
tenna. In principle, a distributed MIMO system aims to
emulate a traditional MIMO system with all the anten-
nas on one humongous transmitter. Unfortunately, now
each antenna is on a diﬀerent AP, which has a separate
oscillator and hence the two antennas would have car-
rier frequency oﬀsets relative to each other. This simple
fact means that the calibration factor Ci is no longer
constant over time. Recall that the calibration factor is
deﬁned as:
Ci =
htx,AP,i
hrx,AP,i
/
htx,AP,1
hrx,AP,1
When the two antennas are on the same device, they
are connected to the same oscillator, and therefore their
hardware chains do not change with respect to each
3In fact, all channels get eventually scaled by the trans-
mit power and therefore, all measurements are up to a
scaling factor.
415
other. However, when the two antennas are on indepen-
dent APs, they are connected to diﬀerent oscillators.
Since the oscillator is part of the hardware chain, the
diﬀerences between oscillators are part of the calibra-
tion factor. However, the diﬀerences between oscillators
do not stay constant over time since their phases ro-
tate relative to each other according to their CFO. In
particular, say that the ﬁrst oscillator has a carrier fre-
quency ω1 and the second oscillator has a carrier fre-
quency ω2 = ω1 + ∆ω21. Then, the calibration factor Ci
changes over time as
Ci(t) = Ci(0) exp(j2∆ω21t)
(1)
Two points are worth noting.
• First, one option to compute the calibration with re-
spect to the lead AP is to compute the CFO with
respect to the lead AP, and update the calibration
factor according to Eq. 1. As mentioned earlier, and
is widely known, this does not work in a distributed
MIMO system since even small errors in computing
the CFO accumulate over time leading to unaccept-
able errors in the estimate.
• The factor of two in Eq. 1 arises from the fact that
MegaMIMO 2.0 needs to correct uplink channel esti-
mates for the phase oﬀset between master and slave
and convert them to correct downlink channel es-
timates. In contrast, MegaMIMO directly corrects
downlink channel estimates for the phase diﬀerence
between the master and the slave.
In the following section, we describe a protocol that
extends distributed MIMO to account correctly for this
factor.
4.3 Distributed Reciprocity
We use the term distributed reciprocity to refer to the
extension of the reciprocity context to distributed envi-
ronments. Thus, the objective of distributed reciprocity
is to compute the time dependent calibration parame-
ter Ci(t) which allows the distributed MIMO system to
infer the downlink channels from the uplink channels.
Recall that, in distributed MIMO, there is a lead AP
and multiple slave APs, and all the slave APs calibrate
with respect to the lead AP. In the context of reciprocity,
this means that the lead AP simply uses its uplink chan-
nel estimates as its downlink channel estimates without
any correction, and all slave APs have to compute their
downlink channel estimates as their uplink channel esti-
mates corrected by their calibration factor with respect
to the lead AP, i.e., the ∆ω in Eq. 1 is the CFO relative
to the lead AP.
As mentioned earlier, simply estimating the phase
oﬀset using the CFO will lead to large errors. Thus, in-
stead of computing the value of the calibration factor
over time, we only compute the instantaneous value of
the calibration factor exactly when the channel is mea-
sured, i.e., we compute the diﬀerence between the os-
cillator phase on the master and the oscillator phase on
the slave at the exact time as the uplink channel mea-
surement.
MegaMIMO 2.0’s calibration occurs in two steps: ini-
tialization and update. The initialization step occurs at
reboot or when the AP joins the distributed MIMO sys-
tem. It estimates both the magnitude and phase of the
calibration parameter at the initialization time. The up-
date step is invoked upon any reception from a client.
It assumes the existence of some prior estimate of the
calibration factor, and updates that prior estimate to
account for change of phase relative to the lead AP.
We ﬁrst describe the initialization step. The goal of
this step is twofold. First, it estimates the magnitude
and phase of the calibration parameter, as mentioned
earlier. Second, it computes a reference channel from
the lead AP to the slave AP, which is used during the
update step, as described later.
The step consists of two back to back transmissions,
the ﬁrst from the lead AP to the slave, and the second
from the slave AP to the lead. The slave measures the
channel from the lead AP, hAP 1→i, using the pream-
ble of the ﬁrst transmission and the lead measures the
channel from the slave AP, hAP i→1, using the preamble
of second transmission. By reciprocity, the forward air
channel between the lead AP and the slave AP is the
same as the reverse air channel. Hence, the slave can
compute the initial calibration factor as:
Ci(0) =
hAP i→1
hAP 1→i
Additionally, the slave stores the channel from the lead
AP, hAP 1→i as a reference channel, hlead(0).
We now explain the update step. For this step, we
introduce the concept of a synchronization trailer. Sim-
ilar to how a synchronization header synchronizes the
transmission functions of slave APs during a joint trans-
mission in distributed MIMO [11], we use a synchroniza-
tion trailer here to synchronize the reception function on
the slave APs. Speciﬁcally, when the client transmits its
data, the lead AP follows the client transmission with
a synchronization trailer. In fact, MegaMIMO 2.0 lever-
ages the MAC layer ACK transmission from the lead
AP which acknowledges the client’s data to act as a
synchronization trailer at all the slaves.
Each slave uses the preamble of the trailer to com-
pute the channel from the lead, hlead(t) at that point
in time. Now that the slave has an estimate of the lead
channel both at time 0 and at time t, it can compute the
total rotation, φ(t), of its oscillator relative to the lead
AP as the diﬀerence between the two phases. Speciﬁ-
cally,
φ(t) = ∆ωt = angle(hlead(t)) − angle(hlead(0))
The slave then computes the updated calibration pa-
rameter at the current time t as
Ci(t) = Ci(0)exp(j2φ(t))
416
and uses this updated calibration parameter to compute
the downlink channel estimate.
However, these computed downlink channel esti-
mates cannot directly be used for beamforming and joint
transmission by the slaves. This is because the down-
link channels for diﬀerent clients are now estimated at
diﬀerent times (speciﬁcally, the times of their respec-
tive uplink transmissions). Recall that this is diﬀerent
from [11] where the APs jointly estimate downlink chan-
nels to all clients. As a result, during joint transmission,
MegaMIMO 2.0 slaves cannot apply a single phase cor-
rection to the beamformed packet to account for the
oscillator rotation between channel estimation and joint
transmission to all clients, unlike in [11]. To account
for this, MegaMIMO 2.0 instead performs an additional
phase correction step during channel estimation. Specif-
ically, each slave, after computing the instantaneous
downlink channel estimate from the uplink client trans-
mission as described above, then applies an additional
phase rotation to infer the downlink channel estimate at
an earlier time, speciﬁcally time 0. Note that the slaves
can do this simply using the reference master-slave chan-
nel at time 0 (hlead(0)), as well as the master-slave chan-
nel estimate at time t from the synchronization trailer.
After this step, each slave then has an estimate for the
downlink channel to each client as if it was measured
at time 0, independent of the actual time of the uplink
transmission.
These computed downlink channel estimates can be
used for beamforming, nulling etc. in future joint trans-
missions as described in prior papers [11].
5. Power Control
Power control is a fundamental aspect of any wireless
communication system. In particular, wireless receivers
need to perform adaptive gain control to amplify their
received signal and ensure that it maximally utilizes the
range of the receiver ADC. Similarly, wireless transmit-
ters need to scale their transmit power to ﬁll the range
of their DAC.
In point-to-point MIMO, each node performs power
control
locally. However since distributed MIMO in-
volves the joint operation of multiple transmit and re-
ceive chains across multiple APs, one needs to ensure
that power control across all these distributed chains is
also coordinated. Below, we describe three key problems
that occur due to the interaction between distributed
MIMO and power control, and our corresponding solu-
tions.
5.1 Coordinating AGC across time
The ﬁrst step in a receive chain is a subsystem called
Adaptive Gain Control (AGC), which constantly mon-
itors the analog signal, and scales it up or down in the
analog domain to make sure it ﬁlls the range of the ADC.
For example, if your receiver has a 12 bit ADC, you
would like your incoming signal to cover somewhere in
the range of 10-12 bits. If the incoming signal is too
4500
4000
3500
3000
2500
2000
1500
1000
500
0
−0.5
0
0.5
1
1.5
2
2.5
3
3.5
Phase error (radians)
Figure 3: Histogram of the diﬀerence in phase
between diﬀerent AGC gains. The ﬁgure shows that
there are very large diﬀerences in phase across the diﬀer-
ent gain settings, in fact as large as π radians. Diﬀerent
gain ranges involve activation of diﬀerent elements of
the analog RF front-end, and hence can introduce sig-
niﬁcantly diﬀerent phase shifts.
large, the AGC will scale it down so it does not get
clipped. If the incoming signal is too small, the AGC