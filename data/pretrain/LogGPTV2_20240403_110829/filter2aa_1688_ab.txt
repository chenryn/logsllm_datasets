8
9
10
            AAA
11
            BBB
12
            CCC
13
14
15
16
17
18
            AAA
19
            BBB
20
            CCC
21
22
23
24
25
26
            AAA
27
            BBB
28
            CCC
29
30
31
32
三、基于注解的IOC配置
习基于注解的 IoC 配置，⼤家脑海⾥⾸先得有⼀个认知，即注解配置和 xml 配置要实现的功能
都是⼀样 的，都是要降低程序间的耦合。只是配置的形式不⼀样。 关于实际的开发中到底使⽤
xml还是注解，每家公司有着不同的使⽤习惯。所以这两种配置⽅式都需要掌握。 谁知道审计的
时候是什么⻤代码呢~
1.常⽤注解
1.1 ⽤于创建对象的
他们的作⽤就和在XML配置⽂件中编写⼀个标签实现的功能是⼀样的
Component:
*          作⽤：⽤于把当前类对象存⼊spring容器中
*          属性： value：⽤于指定bean的id。当我们不写时，它的默认值是当前类名，且⾸字⺟
改⼩写。
Controller：⼀般⽤在表现层
Service：⼀般⽤在业务层
Repository：⼀般⽤在持久层
以上三个注解他们的作⽤和属性与Component是⼀模⼀样。
他们三个是spring框架为我们提供明确的三层使⽤的注解，使我们的三层对象更加清晰
1.2 ⽤于注⼊数据的
他们的作⽤就和在xml配置⽂件中的bean标签中写⼀个标签的作⽤是⼀样的
Autowired:
作⽤：⾃动按照类型注⼊。只要容器中有唯⼀的⼀个bean对象类型和要注⼊的变量类型匹配，
就可以注⼊成功
33
34
            ccc
35
            ddd
36
37
38
39
40
41
42
43
                BBB
44
45
46
47
48
* 曾经XML的配置：
1
*  
3
*      
4
*  
5
如果ioc容器中没有任何bean的类型和要注⼊的变量类型匹配，则报错。
如果Ioc容器中有多个类型匹配时：
*          出现位置：
*              可以是变量上，也可以是⽅法上
*          细节：
*              在使⽤注解注⼊时，set⽅法就不是必须的了。
Qualiﬁer:
作⽤：在按照类中注⼊的基础之上再按照名称注⼊。它在给类成员注⼊时不能单独使⽤。但是在
给⽅法参数注⼊时可以（稍后我们讲）
属性：
*              value：⽤于指定注⼊bean的id。
 Resource
 作⽤：直接按照bean的id注⼊。它可以独⽴使⽤
属性：
*              name：⽤于指定bean的id。
以上三个注⼊都只能注⼊其他bean类型的数据，⽽基本类型和String类型⽆法使⽤上述注解实
现。
另外，集合类型的注⼊只能通过XML来实现。
Value
作⽤：⽤于注⼊基本类型和String类型的数据
 属性：
*              value：⽤于指定数据的值。它可以使⽤spring中SpEL(也就是spring的el表达式）
*                      SpEL的写法：${表达式}
*
1.3 ⽤于改变作⽤范围的
他们的作⽤就和在bean标签中使⽤scope属性实现的功能是⼀样的
Scope
作⽤：⽤于指定bean的作⽤范围
属性：
value：指定范围的取值。常⽤取值：singleton prototype
1.4 和⽣命周期相关 了解
他们的作⽤就和在bean标签中使⽤init-method和destroy-methode的作⽤是⼀样的
PreDestroy
作⽤：⽤于指定销毁⽅法
PostConstruct
作⽤：⽤于指定初始化⽅法
1.5 例⼦
2.Spring 注解和 XML 对⽐
@Service("accountService")
1
//@Scope("prototype")
2
public class AccountServiceImpl implements IAccountService {
3
4
//    @Autowired
5
//    @Qualifier("accountDao1")
6
    @Resource(name = "accountDao2")
7
    private IAccountDao accountDao = null;
8
9
    @PostConstruct
10
    public void  init(){
11
        System.out.println("初始化方法执行了");
12
    }
13
14
    @PreDestroy
15
    public void  destroy(){
16
        System.out.println("销毁方法执行了");
17
    }
18
19
    public void  saveAccount(){
20
        accountDao.saveAccount();
21
    }
22
}
23
3.抛弃bean.xml 使⽤Conﬁguration
ApplicationContext
@Conﬁguration、@ComponentScan、@Import、@PropertySource
package config;
1
2
import org.springframework.context.annotation.ComponentScan;
3
import org.springframework.context.annotation.Import;
4
import org.springframework.context.annotation.PropertySource;
5
6
/**
7
 * 该类是一个配置类，它的作用和bean.xml是一样的
8
 * spring中的新注解
9
 * Configuration
10
 *     作用：指定当前类是一个配置类
11
 *     细节：当配置类作为AnnotationConfigApplicationContext对象创建的参数时，该
注解可以不写。
12
 * ComponentScan
13
 *      作用：用于通过注解指定spring在创建容器时要扫描的包
14
 *      属性：
15
 *          value：它和basePackages的作用是一样的，都是用于指定创建容器时要扫描
的包。
16
 *                 我们使用此注解就等同于在xml中配置了:
17
 *                      
18
 *  Bean
19
 *      作用：用于把当前方法的返回值作为bean对象存入spring的ioc容器中
20
 *      属性:
21
 *          name:用于指定bean的id。当不写时，默认值是当前方法的名称
22
 *      细节：
23
 *          当我们使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没
有可用的bean对象。
24
 *          查找的方式和Autowired注解的作用是一样的
25
 *  Import
26
 *      作用：用于导入其他的配置类
27
 *      属性：
28
 *          value：用于指定其他配置类的字节码。
29
 *                  当我们使用Import的注解之后，有Import注解的类就父配置类，而导
入的都是子配置类
30
 *  PropertySource
31
 *      作用：用于指定properties文件的位置
32
 *      属性：
33
 *          value：指定文件的名称和路径。
34
 *                  关键字：classpath，表示类路径下
35
 */
36
//@Configuration
37
@ComponentScan("com.itheima")
38
@Import(JdbcConfig.class)
39
@PropertySource("classpath:jdbcConfig.properties")
40
public class SpringConfiguration {
41
}
42
package config;
1
2
import com.mchange.v2.c3p0.ComboPooledDataSource;
3
import org.apache.commons.dbutils.QueryRunner;
4
import org.springframework.beans.factory.annotation.Qualifier;
5
import org.springframework.beans.factory.annotation.Value;
6
import org.springframework.context.annotation.Bean;
7
import org.springframework.context.annotation.Scope;
8
9
import javax.sql.DataSource;
10
11
/**
12
 * 和spring连接数据库相关的配置类
13
 */
14
public class JdbcConfig {
15
16
    @Value("${jdbc.driver}")
17
    private String driver;
18
19
    @Value("${jdbc.url}")
20
    private String url;
21
22
    @Value("${jdbc.username}")
23
    private String username;
24
25
    @Value("${jdbc.password}")
26
    private String password;
27
28
    /**
29
     * 用于创建一个QueryRunner对象
30
     * @param dataSource
31
     * @return
32
     */
33
    @Bean(name="runner")
34
    @Scope("prototype")
35
    public QueryRunner createQueryRunner(@Qualifier("ds2") DataSource 
dataSource){
36
        return new QueryRunner(dataSource);
37
    }
38
39
    /**
40
     * 创建数据源对象
41
     * @return
42
     */
43
    @Bean(name="ds2")
44
    public DataSource createDataSource(){
45
        try {
46
            ComboPooledDataSource ds = new ComboPooledDataSource();
47
            ds.setDriverClass(driver);
48
            ds.setJdbcUrl(url);
49
            ds.setUser(username);
50
            ds.setPassword(password);
51
            return ds;
52
        }catch (Exception e){
53
            throw new RuntimeException(e);
54
        }
55
    }
56
57
    @Bean(name="ds1")
58
四、AOP
1.AOP简介
在软件业，AOP为Aspect Oriented Programming的缩写，意为：⾯向切⾯编程 ，通过 预编
译 ⽅式和运⾏期间动态代理实现程序功能的统⼀维护的⼀种技术。AOP是 OOP 的延续，是软
件开发中的⼀个热点，也是 
Spring 框架中的⼀个重要内容，是 
函数式编程 的⼀种衍⽣范
型。利⽤AOP可以对业务逻辑的各个部分进⾏隔离，从⽽使得业务逻辑各部分之间的 耦合度 
降低，提⾼程序的可重⽤性，同时提⾼了开发的效率。
简单的说它就是把我们程序重复的代码抽取出来，在需要执⾏的时候，使⽤动态代理的技术，在
不修改源码的 基础上，对我们的已有⽅法进⾏增强。
实现⽅式：动态代理技术(JDK原⽣的动态代理及cglib)  不改动原有代码的情况下 向某个⽅法插
⼊代码，实现⾯向切⾯编程
2.Spring中的AOP
2.1 AOP相关术语
Joinpoint(连接点): 所谓连接点是指那些被拦截到的点。在 spring 中,这些点指的是⽅法,因为 
spring 只⽀持⽅法类型的 连接点。 
Pointcut(切⼊点): 所谓切⼊点是指我们要对哪些 Joinpoint 进⾏拦截的定义。 
Advice(通知/增强): 所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。 通知的类
型：前置通知,后置通知,异常通知,最终通知,环绕通知。 
Introduction(引介): 引介是⼀种特殊的通知在不修改类代码的前提下, Introduction 可以在运⾏
期为类动态地添加⼀些⽅ 法或 Field。 
Target(⽬标对象): 代理的⽬标对象。 
Weaving(织⼊): 是指把增强应⽤到⽬标对象来创建新的代理对象的过程。 spring 采⽤动态代理
织⼊，⽽ AspectJ 采⽤编译期织⼊和类装载期织⼊。 
Proxy（代理）: ⼀个类被 AOP 织⼊增强后，就产⽣⼀个结果代理类。 
Aspect(切⾯): 是切⼊点和通知（引介）的结合。 
2.2 代理的选择
在 spring 中，框架会根据⽬标类是否实现了接⼝来决定采⽤哪种动态代理的⽅式。
    public DataSource createDataSource1(){
59
        try {
60
            ComboPooledDataSource ds = new ComboPooledDataSource();
61
            ds.setDriverClass(driver);
62
            ds.setJdbcUrl("jdbc:mysql://localhost:3306/eesy02");
63
            ds.setUser(username);
64
            ds.setPassword(password);