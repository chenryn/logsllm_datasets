.text:00401014                 mov     dword ptr [eax], 10  
.text:0040101A                 mov     ecx, [ebp+heap_struct]  
.text:0040101D                 mov     word ptr [ecx+4], 20  
.text:00401023                 mov     edx, [ebp+heap_struct]  
.text:00401026                 mov     byte ptr [edx+6], 30  
.text:0040102A                 mov     eax, [ebp+heap_struct]  
.text:0040102D                 mov     dword ptr [eax+7], 40  
.text:00401034                 mov     ecx, [ebp+heap_struct]  
.text:00401037                 fld     ds:dbl_40B128  
.text:0040103D                 fstp    qword ptr [ecx+0Bh]  
.text:00401040                 xor     eax, eax  
.text:00401042                 mov     esp, ebp  
.text:00401044                 pop     ebp  
.text:00401045                 retn  
.text:00401045 _main           endp
这时，这个程序的唯一不同在于，结构体变得更小（现在只有19 个字节），偏移量有所调整，因为每个结构体字段进行了重新对齐。
不管在编译程序时是否进行了对齐操作，找到在程序堆中分配和操纵的结构体，是确定给定数据结构的大小和布局的最简单方法。但是，需要记住的是，在许多函数中，你不能立即访问结构体的每个成员，以理解该结构体的布局。你可能需要观察结构体中指针的用法，并记下每次指针取消引用时使用的偏移量。这样，你最终将能够了解结构体的完整布局。
4. 结构体数组
一些程序员认为，复合数据结构极具美感，因为你可在大型结构体中嵌入小型结构体，创建复杂程度各不相同的结构体。除其他可能性外，这种能力还允许你创建结构体数组，结构体中的结构体，以及以数组为成员的结构体。在处理这些嵌套结构时，前面有关数组和结构体的讨论同样适用。以下面的这个程序为例，它是一个结构体数组，其中的 heap_struct
 指向一个包含 5 个ch8_struct
 元素的数组：
int main() {  
   int idx = 1;  
   struct ch8_struct *heap_struct;  
   heap_struct = (struct ch8_struct*)malloc(sizeof(struct ch8_struct) * 5);  
➊ heap_struct[idx].field1 = 10;  
}
访问➊处的field1
 所需的操作包括：用索引值乘以数组元素的大小（这里为结构体的大小），然后加上 field1
 这个字段的偏移量。下面是对应的反汇编代码清单：
.text:00401000 _main             proc near  
.text:00401000  
.text:00401000 idx               = dword ptr -8  
.text:00401000 heap_struct       = dword ptr -4  
.text:00401000  
.text:00401000                   push    ebp  
.text:00401001                   mov     ebp, esp  
.text:00401003                   sub     esp, 8  
.text:00401006                   mov     [ebp+idx], 1  
.text:0040100D                ➋  push  120 ; size_t  
.text:0040100F                   call    _malloc  
.text:00401014                   add     esp, 4  
.text:00401017                   mov     [ebp+heap_struct], eax  
.text:0040101A                   mov     eax, [ebp+idx]  
.text:0040101D                ➌  imul  eax, 24  
.text:00401020                   mov     ecx, [ebp+heap_struct]  
.text:00401023                ➍  mov   dword ptr [ecx+eax], 10  
.text:0040102A                   xor     eax, eax  
.text:0040102C                   mov     esp, ebp  
.text:0040102E                   pop     ebp  
.text:0040102F                   retn  
.text:0040102F _main             endp  
从代码清单中可以看出：堆请求了 120 个字节（➋），数组索引乘以 24 （➌），然后加上数组的起始地址（➍ ）。为了生成➍ 处对结束地址的引用，没有加上其他的偏移量。从这些事实，我 们可以推断出数组的大小（24），数组中元素的个数（120/24=5
 ）；同时，在每个数组元素中偏移量为0 的位置，有一个 4 字节的字段。至于每个结构体中剩余的 20 个字节是如何分配给其他字段的，这个简短的列表并没有提供足够的信息。
8.2 创建IDA 结构体
在上一章中，我们见识了 IDA 的数组聚合能力，它通过将一长串的数据声明变成一个反汇编行，简化了反汇编代码清单。在下面几节中，我们将讨论 IDA 如何使用各种工具来改善操纵结构体的代码的可读性。我们的目标是用更具可读性的[edx+ch8_struct.field5]
 替换[edx+10h]
 之类的结构体引用。
只要发现一个程序正操纵某种数据结构，你就需要确定：你是否希望将结构体的字段名称合并到反汇编代码清单中，或者你是否理解分散在代码清单中的所有数字偏移量。有时候，IDA 能够确定程序在调用 C 标准库或 Windows API的过程中定义了一个结构体。这时，IDA 了解该结构体的具体布局，并且能够将数字偏移量转换成更加符号化的字段名称。这是一种理想化的情形，因为你并没有多少工作要做。在我们初步了解 IDA 如何处理通常的结构体定义后，我们将继续讨论这种情形。
8.2.1 创建一个新的结构体（或联合）
如果程序正使用某个结构体，而 IDA 并不了解其布局，这时，IDA 会提供实用工具以设置该结构体的布局，并将新定义的结构体包含到反汇编代码清单中。IDA 使用Structures窗口（如图8-2 所示）来创建新的结构体。除非结构体已经在 Structures窗口中列出，否则就无法将结构体包含到反汇编代码清单中。IDA 将自动在 Structures窗口中列出任何它能够识别、并确定已被一个程序使用的结构体。
图8-2 Structures窗口
IDA 之所以在分析阶段无法识别结构体，可能源于两个原因。首先，虽然 IDA 了解某个结构体的布局，但它并没有足够的信息，能够判断程序确实使用了结构体。其次，程序中的结构体可能是一种 IDA 对其一无所知的非标准结构体。在这两种情况下，问题都可以得到解决，且首先从Structures窗口下手。
Structures窗口的前4 行文本用于提醒用户该窗口中可能进行的操作。我们使用的主要操作包括添加、删除和编辑结构体。添加结构体使用热键INSERT 启动，它打开如图8-3 所示的Create structure/union（创建结构体/联合）对话框。
图8-3 Create structure/union 对话框
为了创建一个新的结构体，你必须首先在 Structure name（结构体名称）字段中指定结构体的名称。前两个复选框用于决定新结构体在 Structures窗口中的显示位置，或者是否在窗口中显示新结构体。第三个复选框 Creat union （创建联合），指定你定义的是否为C 风格联合1
 结构体。结构体的大小是它所包含的字段大小的总和，而联合的大小则等于其中最大字段的大小。Add standard structure（添加标准结构体）按钮用于访问 IDA 当前能够识别的全部结构体数据类型。这个按钮的作用将在 8.5节讨论。指定结构体的名称并单击 OK按钮后，IDA 将在Structures窗口中创建一个空结构体定义，如图 8-4 所示。
1. 联合类似于结构体，其中可能包含许多类型各不相同的具名字段。二者的区别在于，联合中的字段相互重叠，因此，联合的大小等于其中最大字段的大小
图8-4 空结构体定义
你必须对这个结构体定义进行编辑，以完成对结构体布局的定义。
8.2.2 编辑结构体成员
为了给新结构体添加字段，你必须利用字段创建命令 D、A 和数字键盘上的星号键（*）。最初，你只需要使用 D 命令。不过，它的行为非常依赖于光标的位置。为此，我们建议采用下面的步骤给结构体添加字段。
要给结构体添加新字段，将光标放在结构体定义的最后一行（包含 ends
 的那一行）并按下D 键。这时，IDA 就会在结构体的末尾添加一个新字段。新字段的大小取决于你在数据转盘（参见第7 章）上选择的第一个大小。最初，字段的名称为 field_N
 ，这里的N
 为结构体开头到新字段（如field_0
 ）开头的数字偏移量。
如果需要修改字段的大小，首先将光标放在新字段的名称上，然后重复按下 D 键，使数据转盘上的数据类型开始循环，从而为新字段选择正确的数据大小。另外，你还可以使用Options▶ Setup Data Types来指定一个在数据转盘上不存在的大小。如果新字段是一个数组，右击其名称并在上下文菜单中选择 Array，将打开“数组规范”对话框（参见第 7 章）。
要更改一个结构体字段的名称，单击字段名称并按下 N 键，或者右击该名称并在上下文菜单中选择 ReName，然后在输入框中输入一个名称即可。
在你定义自己的结构体时，下面的提示可能会有所帮助。
一个字段的字节偏移量以一个 8 位十六进制值在 Structures窗口的左侧显示。
每次你添加或删除一个结构体字段，或更改一个现有字段的大小时，结构体的新大小都会在结构体定义的第一行反映出来。
你可以给一个结构体字段添加注释，就像给任何反汇编行添加注释一样。右击（或使用热键）你希望为其添加注释的字段，在上下文菜单中选择一个注释选项即可。
与Structures窗口顶部的说明不同的是，只有当一个字段是结构体中的最后一个字段时，使用U 键才能删除该字段。对于所有其他字段，按下 U 键将取消该字段的定义，这样做仅仅删除了该字段的名称，并没有删除分配给该字段的字节。
你必须对一个结构体定义中的所有字段进行适当的对齐。IDA 并不区分已压缩和未压缩的结构体。为将字段适当对齐，如果你需要填补字节，那么你必须负责添加这些字节。填补字节最好作为适当大小的哑字段添加。在添加额外的字段后，你可以选择取消或保留这些字段的定义。
分配到结构体中间的字节只有在取消关联字段的定义后才能删除，使用Edit ▶ Shrink Struct Type （缩小结构体类型）即可删除被取消定义的字节。
你也可以在结构体的中间添加新的字节：选择新字节后面的一个字段，然后使用Edit ▶ Expand Struct Type （扩大结构体类型）在选中的字段前插入一定数量的字节。
如果知道结构体的大小，而不了解它的布局，你需要创建两个字段。第一个字段为一个数组，它的大小为结构体的大小减去 1 个字节（size-1
 ）；第二个字段应为 1 个字节。创建第二个字段后，取消第一个（数组）字段的定义。这样，结构体的大小被保留下来，随后，当你进一步了解该结构体的布局后，你可以回过头来定义它的字段及其大小。
通过重复应用这些步骤（添加字段，设置字段大小，添加填补字节等），你就可以在 IDA 中创建ch8_struct
 结构体（未压缩版本），如图8-5 所示。
在这个例子中，IDA 使用了填补字节对字段进行适当对齐，并根据前面例子中的名称重命名字段。值得注意的是，每个字段的偏移量和结构体的总大小（24 字节）仍与前面的例子中的值相同。
图8-5 手动生成的ch8_struct
 结构体定义
如果你觉得结构体定义在 Structures窗口中占用了太多空间，你可以选择结构体中的任何字段并按下数字键盘中的减号键，将结构体的定义折叠成一行摘要。一旦结构体获得完整的定义，并且不需要进一步编辑，你就可以将它折叠起来。ch8_struct
 的折叠版本如图 8-6 所示。
图8-6 折叠版本的结构体定义
绝大多数 IDA 能够识别的结构体都以这种单行方式显示，因为你不需要编辑它们。折叠式显示提供一个提示，即你可以使用数字键盘上的加号键打开结构体定义。另外，双击结构体名称也可以打开该定义。
8.2.3 用栈帧作为专用结构体
你可能已经注意到，结构体定义看起来与函数的详细栈帧视图有些类似。这并非巧合，因为在IDA 内部，IDA 处理它们的方式完全相同。它们都属于相邻的内存块，能够细分成若干已命名字段，并且每个字段都拥有一个数字偏移量。它们之间的细微区别在于，栈帧以一个帧指针或返回地址为中心，同时使用正值和负值字段偏移量，而结构体仅使用正值偏移量（以结构体开头位置为起始点）。
8.3 使用结构体模板
有两种方法可对反汇编代码清单中的结构体定义加以利用。首先，你可以重新格式化内存引用，将类似于[ebx+8]
 的数字结构体偏移量转换成诸如[ebx+ch8_struct.field4]
 之类的符号式引用，从而提高它们的可读性。后一种符号式引用提供了更多有关引用内容的信息。因为 IDA 使用一种层次表示法，因此，你可以清楚地知道，程序访问的是什么类型的结构体，访问的是该结构体中的哪一个字段。当程序通过指针来引用结构体时，这种应用结构体模板的技术最有用。第二种应用结构体模板的方法是，提供其他可应用于栈和全局变量的数据类型。
为了理解如何将结构体定义应用于指令操作数，我们把每个定义看成类似于一组枚举常量。例如，图 8-5 中ch8_struct
 的定义可以用下面的伪 C 代码表示：
enum {  
   ch8_struct.field1 = 0,  
   ch8_struct.field2 = 4,  
   ch8_struct.field3 = 6,  
   ch8_struct.field4 = 8,  
   ch8_struct.field5 = 16  
};
对于这样一个定义，你可将操作数中使用的任何常量值转换成其对应的符号形式。如图 8-7是一个正在进行中的此类操作。内存引用[ecx+10h]
 可能访问的是 ch8_struct
 中的 field5
 字段。
图8-7 应用结构体偏移量
在图8-7 中，右击 10h，即可在上下文菜单中看到 Structure offset（结构体偏移量）选项，它提供3 种形式对指令操作数进行格式化。这 3 种形式全部是从包含一个偏移量为 16 的字段的结构体集合中提取出来的。
作为格式化内存引用的另一种方法，可以将栈和全局变量格式化成整个结构体。要将栈变量格式化成结构体，双击该变量，打开详细栈帧视图，然后使用Edit ▶ Struct Var （ALT+Q）命令显示一组已知的结构体，如图 8-8 所示。
图8-8 选择结构体对话框
选择其中一个结构体，可将栈中对应的字节数组合成对应的结构体类型，并将所有相关内存引用重新格式化成结构体引用。下面的代码摘自前面分析的栈分配的结构体示例：
.text:00401006                 mov     [ebp+var_18], 10  
.text:0040100D                 mov     [ebp+var_14], 20  
.text:00401013                 mov     [ebp+var_12], 30  
.text:00401017                 mov     [ebp+var_10], 40  
.text:0040101E                 fld     ds:dbl_40B128  
.text:00401024                 fstp    [ebp+var_8]
记得前面得出结论，var_18
 实际上是一个大小为 24 字节的结构体的第一个字段。上述代码的详细栈帧如图 8-9 所示。
图8-9 格式化之前的栈分配的结构体
选择var_18
 并将其格式化成 ch8_struct
 （Edit ▶ Struct Var），会将以 var_18
 开头的24 个字节（ch8_struct
 的大小）折叠成一个变量，并得到如图 8-10 所示的重新格式化后的栈窗口。在这个例子中，对 var_18
 应用结构体模板将生成一条警告消息，指出在将 var_18
 转换为结构体的过程中，有一些变量将会遭到破坏。基于我们前面的分析，我们已经意识到这种情况，因此，我们只需认可该警告消息，完成操作即可。
图8-10 格式化之后的栈分配的结构体