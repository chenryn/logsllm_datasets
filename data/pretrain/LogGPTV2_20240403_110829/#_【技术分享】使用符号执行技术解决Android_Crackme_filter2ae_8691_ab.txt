    .text:000017D0 loc_17D0                                ; CODE XREF: sub_1760+20
    .text:000017D0                 LDR     R3, [R11,#var_14]
    .text:000017D4                 CMP     R3, #4
    .text:000017D8                 BLE     loc_1784
    .text:000017DC                 LDRB    R4, [R11,#var_1C] ; Now you're comparing the xor-ed bytes with values retrieved from - somewhere...
    .text:000017E0                 BL      sub_16F0
    .text:000017E4                 MOV     R3, R0
    .text:000017E8                 CMP     R4, R3
    .text:000017EC                 BNE     loc_1854
    .text:000017F0                 LDRB    R4, [R11,#var_1B]
    .text:000017F4                 BL      sub_170C
    .text:000017F8                 MOV     R3, R0
    .text:000017FC                 CMP     R4, R3
    .text:00001800                 BNE     loc_1854
    .text:00001804                 LDRB    R4, [R11,#var_1A]
    .text:00001808                 BL      sub_16F0
    .text:0000180C                 MOV     R3, R0
    .text:00001810                 CMP     R4, R3
    .text:00001814                 BNE     loc_1854
    .text:00001818                 LDRB    R4, [R11,#var_19]
    .text:0000181C                 BL      sub_1728
    .text:00001820                 MOV     R3, R0
    .text:00001824                 CMP     R4, R3
    .text:00001828                 BNE     loc_1854
    .text:0000182C                 LDRB    R4, [R11,#var_18]
    .text:00001830                 BL      sub_1744
    .text:00001834                 MOV     R3, R0
    .text:00001838                 CMP     R4, R3
    .text:0000183C                 BNE     loc_1854
    .text:00001840                 LDR     R3, =(aProductActivat - 0x184C)  ; This is where we want to be!
    .text:00001844                 ADD     R3, PC, R3      ; "Product activation passed. Congratulati"...
    .text:00001848                 MOV     R0, R3          ; char *
    .text:0000184C                 BL      puts
    .text:00001850                 B       loc_1864
    .text:00001854 ; ---------------------------------------------------------------------------    .text:00001854
    .text:00001854 loc_1854                                ; CODE XREF: sub_1760+8C
    .text:00001854                                         ; sub_1760+A0j ...
    .text:00001854                 LDR     R3, =(aIncorrectSer_0 - 0x1860) ; This is where we DON'T wanna be!
    .text:00001858                 ADD     R3, PC, R3      ; "Incorrect serial."
    .text:0000185C                 MOV     R0, R3          ; char *
    .text:00001860                 BL      puts
    .text:00001864
    .text:00001864 loc_1864                                ; CODE XREF: sub_1760+F0
    .text:00001864                 SUB     SP, R11, #8
    .text:00001868                 LDMFD   SP!, {R4,R11,PC}
    .text:00001868 ; End of function sub_1760
我们能在loc_1784看到异或操作，应该是解码操作。从loc_17DC开始，我们能看到一系列的解码值的比较。尽管它看起来高度复杂，我们还需要更多的逆向分析并生成授权传给它。但是通过动态符号执行，我们不需要做更多的深入分析。符号执行引擎能够映射一条在校验授权的开始处（0x1760）和输出消息“Product
activation passed”的地方（0x1840）之间的路径，决定每种输入的约束。求解引擎能发现满足那些约束的输入值即可靠的授权序列号。
我们只需要提供几种输入给符号执行引擎：
1\. 开始执行的地址。我们使用串行验证函数的第一条指令来初始化状态。这能使任务变得简单，因为我们避免了符号执行base32实现。
2\. 我们想要执行到达的代码块地址。在这个例子中，我们想找到一个输出“Product activation
passed”消息的有效路径。这个块的其实地址是0x1840。
3\. 我们不想到达的地址。这种情况下，我们对于任何到达输出“incorrect serial”消息的路径不感兴趣（0x1854）。
Angr加载器在基址0x400000处加载PIE可执行文件，因此我们必须将这个添加到上述地址中。解决方案如下。
    #!/usr/bin/python
    # This is how we defeat the Android license check using Angr!
    # The binary is available for download on GitHub:
    # https://github.com/b-mueller/obfuscation-metrics/tree/master/crackmes/android/01_license_check_1
    # Written by Bernhard -- bernhard [dot] mueller [at] owasp [dot] org
    import angr
    import claripy
    import base64
    load_options = {}
    # Android NDK library path:
    load_options['custom_ld_path'] = ['/Users/berndt/Tools/android-ndk-r10e/platforms/android-21/arch-arm/usr/lib']
    b = angr.Project("./validate", load_options = load_options)
    # The key validation function starts at 0x401760, so that's where we create the initial state.
    # This speeds things up a lot because we're bypassing the Base32-encoder.
    state = b.factory.blank_state(addr=0x401760)
    initial_path = b.factory.path(state)
    path_group = b.factory.path_group(state)
    # 0x401840 = Product activation passed
    # 0x401854 = Incorrect serial
    path_group.explore(find=0x401840, avoid=0x401854)
    found = path_group.found[0]
    # Get the solution string from *(R11 - 0x24).
    addr = found.state.memory.load(found.state.regs.r11 - 0x24, endness='Iend_LE')
    concrete_addr = found.state.se.any_int(addr)
    solution = found.state.se.any_str(found.state.memory.load(concrete_addr,10))
    print base64.b32encode(solution)
注意到程序的最后一部分，能获得我们最终想要的输入字符串。然而我们从符号内存中读不到任何字符串或指针。真实发生的是求解器计算的具体的值能在程序状态中找到。
运行脚本能得到以下输出：
    (angr) $ python solve.py
    WARNING | 2017-01-09 17:17:03,664 | cle.loader | The main binary is a position-independent executable. It is being loaded with a base address of 0x400000.
    JQAE6ACMABNAAIIA
最终的授权序列号应该能使程序输出成功的消息。
同时，符号执行是一种强大的技术，能用于漏洞挖掘，解混淆和逆向工程。
**0x03 参考**
Angr – [http://angr.io](http://angr.io/)
Axel Souchet, Jonathan Salwan, Jérémy Fetiveau – Keygenning with KLEE –
[http://doar-e.github.io/blog/2015/08/18/keygenning-with-klee/](http://doar-e.github.io/blog/2015/08/18/keygenning-with-klee/)
Logic for Computer Science –
[http://www.cs.ru.nl/~herman/onderwijs/soflp2013/reeves-clarke-lcs.pdf](http://www.cs.ru.nl/~herman/onderwijs/soflp2013/reeves-clarke-lcs.pdf)
Concolic Testing:
[https://en.wikipedia.org/wiki/Concolic_testing](https://en.wikipedia.org/wiki/Concolic_testing)