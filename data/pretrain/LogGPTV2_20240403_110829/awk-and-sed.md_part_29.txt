 # print specified element 
exit
print numerals[$1]
50192241
 # try to split on "-"
-201-
"October, November, December '
并使用 split（）将他们写入到名
II
#
第八章
"/")
，并查找相应的元素。Exit
条件、循环和数组
---
## Page 202
同的，在这种情况下in将一直为真。参见下一章中使用 delete语句的脚本示
特别地，使用in测试 subscript 将返回为假。这与为数组元素赋一个空值是不
这里的方括号是必需的。这个语句将删除 array 中下标为 subscript 的元素,
Awk提供了一个语句用于从数组中删除一个元素。语法是：
删除数组元素
下例是运行情况：
例
正确地识别。由 date[1]引用的元素被作为 month 的下标。
导
date[1]加上0 以改变其类型。因为 awk 将”11正确解释为一个数字，
将
素
这段脚本从标准输入中读取，BEGIN 操作建立了一个名为 month 的数组，
中
今
中
元
〇的数字会被看作为一个字符串。因此，没有强制类型转换的“06“不能被
一个数组嵌套到另一个数组中。然而，在使用 date[1]之前，
，那么 date[1]中包含代表月份的数据。这个值能做数组 month 的下标，即
。
元素，
含多个元素
的数组。因此，
着数组中元素的个数，如果 awk 不能分解这个字符串，
素是一年中月份的名字。第二个规则用于检验输入行为非空。其相关的操作
 delete array[subscript]
$ echo "5/11/55" | date-month
# print month day, year 
# add 0 to number (
# must be invalid 
May 11, 1955
则认为输入是非法的，
素，
QQ群：
：那么我们假设也许是使用”－
print month[date[]], (date[2] ", 19" date[3])
 date[1]
if (size0fArray == 1)
 我们可以测试 sizeOfarray 的值来确定有几个元素，
50192241
of month to coerce numeric type 
exit
size0fArray = split($1, date, "-")
并退出。如果我们成功地将输入分解到数组
-202 -
“作为分隔符。如果不能分解出多
第八章
，它将创建只有一个元
条件、循环和数组
而带前
，如果不
他的
包
---
## Page 203
我们首先来看它的执行情况。这里使用了一个样本输入文件 sample。
否做了改变。我们将这个程序称为 awkro。
我们可以将这个程序设计成一个过滤器，
的
本
果有一行是“BASIC“，
字母缩写词都被替换为一个详细的描述，
现在我们来看一个程序，
首字母缩写词处理器
应用）。
身可能没有什么用，但是在该程序中使用的技术是很普遍的，并有许多这样
The NASA program Mission to Planet Earth 
$ cat sample
/[A-Z][A-z]+/ {
# process any input line containing caps 
FILENAME == "acronyms" {
# load acronyms file into array "acro"
represents the principal space-based component 
as well as basic research.
The USGCRP is a comprehensive
acronyms $*
 # see if any field is an acronym
QQ群：
 print $0
next
split($0, entry,
# print all lines
 expand acronyms
我们将用描述”Beginner’
50192241
，它的功能是浏览一个文件中的首字母缩写词。每个首
if（$iin acro）{
"\t")
- 203 -
$i= acro[$i]
# if it matches, add description 
，用于打印所有的行，而不管这些行是
并将首字母缩写词放在圆括号中。
第八章
 S All Purpose Symbolic
条件、循环和数组
如
---
## Page 204
下面是程序的第二部分：
后用这个数组创建acro.
二个字段赋给数组的一个元素。换一句话说，首字母缩写词是他自己的描述的
将这些记录的两个字段写入到一个数组中，其中将第一个字段作为下标而将第
我们将分两部分来看这个程序，第一部分是从文件 acronyms 中读取记录。
comprehensive
现在我们在样本文件上运行以上程序。
下面是文件 acronyms:
注意，
索引。
new
 # process any input line containing caps
FILENAME == "acronyms" {
# load acronyms file into array "acro"
such as Earth Observing System (EOS) and Earthprobes.
initiatives
 research effort that includes applied 
The U.S. Global Change Research Program (USGCRP) is a 
Mission to Planet Earth 
The National Aeronautic and Space Administration (NASA) program 
$ awkro sample
EOS
NASA
USGCRP
$ cat acronyms
such as EOS and Earthprobes.
of the USGCRP and includes new initiatives
我们没有改变成分隔符，而是使用 split（）函数来创建数组entry。然
represents the principal space-based component 
as well as basic research.
QQ群：
split($O, entry,
Earth Observing System
U. S. Global Change Research Program
next
acro[entry[1]] = entry[2]
National Aeronautic and Space Administration
50192241
"\t")
204-
第八章
条件、循环和数组
---
## Page 205
在运行 awk 之前调用一个 sed 脚本，可以简单地在标点符号前插入一个空格,
另一个用于做最后处理：
法是在 awk 中根本不处理它。而是使用两个 sed 脚本，
在首字母缩写词后边跟一个标点符号，
还可以用其他的好方法进行修改。在运行awkro程序时，我们很快会发现如果
从这个数组中删除这个首字母缩写词就可以了。
现在我们来改写这个程序，
符串的长度，
以被赋予新值，
果是，则用数组中的元素代替相应的字段,
分是使用条件语句测试当前的字段（$i）是否是数组（acro）的一个下标。
作进行处理，
只有在一行中包含多个连续的大写字母时，
发现一个首字母缩写词后不再寻找该词。这是很容易做到的，我们呢只需要
sed ′ s/ @@@\([.,;:!]\)/\1/g'
sed’ s/\([.,;:!][.,;:!]*\)\([.,;:!]\)/\1 @@@\2/g'
if （$i in acro）{
/[A-z][A-z]+/{
如果字符串太长则可以分隔该字符串。
这一部分操作用循环处理记录的每个字段。这部风操作的核心部
# if it matches,
 # see if any field is an acronym 
QQ群：
# only expand the acronym once
，和一般的变量一样）。注意将首字母缩写词的描述插入记录行
print $0
# print all lines
delete acro[acronym]
$i = acro[$i] "
for (i = 1; i <= NF; i++)
if（$iin acro）
50192241
使得它只在第一次出现首字母缩写词时进行替换。
（"$i ")"
 add description
- 205 -
$i = acro[$i] "(" $i ")"
# if it matches, add description 
 acronym =$i 
而将原始值放于圆括号中（字段可
 才使用以上程序段中的另一部分操
第八章
这个函数可以确定一个字
一个用于做预处理：
条件、循环和数组
如
---
## Page 206
以下是一个命名为 bitmap.awk 的 awk 的脚本示例，
越慢。然而你可以使用你自己的应用程序来测试不同的awk实现的时间。
和“4”连接起来）。模拟多维数组的主要后果是数组越大，访问个别的元素就
这将得到第二个记录的第四个字段的值。
示：
这里的每个输入记录的字段使用记录编号和字段号做下标。因此，可以如下表
例如，你可以如下编写表达式：
子。Awk 不支持多维数组，
性数组看成是一行数据，那么两位数组将表示数据的行和列。你可以将第三行
Awk支持线性数组，在这种数组中的每个元素的下标是单个下标。如果你将线
多维数组
缩写词，这种方法可以使用下一章中讨论的函数match（）和 sub（）来处理。
入或读出元素。
这个语法不能创建多维数组。它将转换为一个字符串来唯一识别线性数组中的
awk 过程来解决。而在 awk 过程中不需要做任何事情。Awk 更有价值是因为它是
这种使用UNIX工具箱中另一个工具的解决方案，表明了不是每一件事都需要用
情况）。
sed 命令中的复杂的表达式，
是标点符号能够被作为一个单独的字段来解释。另外插入一个由无用的符号
“\034”
使
元
第
但
包
（@@@）组成的字符串，使得我们能够容易地识别和恢复标点符号（在第一个
用系统变量 SUBSEP 的值来连接。
二列的数据元素表示为“array[3,2]”。两维和三维数组是多维数组的例
且是在 POSIX awk 中可以用不同的解决方案，及使用正则表达式来匹配首字母
含于 UNIX坏境中。
BEGIN { FS = "," # comma-separated fields 
file_array[2, 4] 
file_array[NR, i] = $i
这是一个不可打印的下标实际为“2\0344”
QQ群：
WIDTH = 12
 # assign width and height of bitmap
HEIGHT = 12
，这个数组表示宽度和高度为12个字符的位图。
50192241
但它为下标提供了一个语法来模拟引用多维数组。
，可以确保我们匹配在一行中包含多个标点符号的
- 206 -
下表分量的分隔符默认地被定义为
第八章
用于展示如何向多维数组写
（使用 SUBSEP将“2”
条件、循环和数组
---
## Page 207
144个元素。向这个程序的输入是一系列的坐标，每行一个：
在读取任何输入之前，将“0”写入到bitmap 数组的所有元素中，这个数组有
$ cat bitmap.test
END {
# at end output multidimensional array
”5′67′8
4
3”
2’
2
00
6
8°
Z.9
5
4
3
2
#
68
 read input of the form x, y.
.65
Ｌ８６
0
二
６７
5
4
3
2
12
QQ群：
for (i = 1;i <= WIDTH; ++i){ 
bitmap[$1, $2] ="x" 
for (i = 1; i <= WIDTH; ++i)
50192241
printf("\n")
# after each row, print newline 
for (j = 1; j <= HEIGHT; ++j)
for (j = 1; j <= HEIGHT; ++j)
207
第八章
条件、循环和数组
---
## Page 208
注意：我们在前面的例子用嵌套循环来输出两维位图数组，因为需要维护行和
以上 split（）函数使用下标item 创建数组 subscr。
你必须用 split（）函数来访问单独的下标分量。即：
对多维数组的循环操作和一位数组相同。
这可以测试下标i，”（实际上是 SUBSEP j）是否在指定的数组中存在。
多维数组的语法也支持测试数组的成员资格。下标必需放置在圆括号中。
取输入：
使用与写入数组同样的循环来输出数组。下面的例子从文件bitmap.test 中读
列
split(item, subscr, SUBSEP)
for (item in array)
if ((i, j) in array)
9, 4 
X0000000000X
0XO0000000XO0
00X000000X00
00000XX00000
00000XX00000
0000X00X0000
000X0000X000
00X000000X00
0X00000000X0
$ awk -f bitmap.awk bitmap.test
000X0000X000
0000X00X0000
X0000000000X
2
3
QQ群：
50192241
208
第八章
条件、循环和数组
---
## Page 209
一个文件名）。
以将计数器初始化为1并测试 ARGC-1 以避免访问最后一个参数（假设这里只有
在通常情况下，ARGC 的值不小于2。如果你不希望引用程序名或文件名，你可
可以看出，
一个命令行样本是如何处理的：
这个例子也打印了ARGC 的值，
你可以编写一个循环来访问 ARGV 数组中的所有元素。
命令行参数数组
ENVIRON
ARGV
Awk 中提供的两个系统变量，