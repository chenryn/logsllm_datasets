j]2, [λ2
j ⊕ λ2
held by P1 and P2, respectively, such that λ1
=
λj , λ1
= λk. Now the first question is, to produce the first
garbled row of Table 1, how could the circuit generator (call it
P1) compute (λi λj ⊕ λk)∆ without actually knowing λi , λj , λk?
WRK addresses this challenge by dividing (λi λj ⊕ λk)∆ into two
XOR-shares SP1 and SP2 such that SP1 ⊕ SP2 = (λi λj ⊕ λk)∆, thus
only requiring P1, P2 to locally derive SP1 , SP2, respectively. But
then how can the parties locally compute SP1 , SP2 from values that
they already know? This is exactly where aANDs come handy: if
P1 and P2 already have the respective shares of an aAND ([a1]1 ⊕
[a2]2)([b1]1⊕[b2]2) = [c1]1⊕[c2]2 with a1⊕a2 = λi and b1⊕b2 = λj,
then P1, P2 can learn c1 and c2, respectively, with c1 ⊕ c2 = λi λj.
Consequently, P1 can compute (c1 ⊕ λ1
k and ∆, all
k)∆ from c1, λ1
k
i
j
(cid:16)
Note Hbi ,bj
def= H
(cid:19)
(cid:18)
Lbi
i
, L
bj
j
(cid:17)
, ∀bi, bj ∈ {0, 1}.
Table 1: Garbling in Honest-but-curious Adversary Model
bi ⊕ λi
bj ⊕ λj
0
0
1
1
0
1
0
1
bk ⊕ λk
z00 = λi λj ⊕ λk
z01 = λi λj ⊕ λk
z10 = λi λj ⊕ λk
z11 = λi λj ⊕ λk
Point & Permute With Random Oracle H
EncL0
EncL0
EncL1
EncL1
H0,0 ⊕ (Lz00
H0,1 ⊕ (Lz01
H1,0 ⊕ (Lz10
H1,1 ⊕ (Lz11
k , z00)
k , z01)
k , z10)
k , z11)
Lz00
k , z00
Lz01
k , z01
Lz10
k , z10
Lz11
k , z11
i ,L0
j
i ,L1
j
i ,L0
j
i ,L1
j
Free-XOR
k ⊕ z00∆, z00)
k ⊕ z01∆, z01)
k ⊕ z10∆, z10)
k ⊕ z11∆, z11)
H0,0 ⊕ (L0
H0,1 ⊕ (L0
H1,0 ⊕ (L0
H1,1 ⊕ (L0
(cid:16)
(cid:16)
(cid:16)
(cid:16)
(cid:17)
(cid:17)
(cid:17)
(cid:17)
(cid:16)
(cid:18)
(cid:19)
Note Hbi,bj
def= H
Lbi
i
, Lbj
j
,∀bi , bj ∈ {0, 1}.
Table 2: WRK’s Authenticated Garbling in Malicious Adversary Model
k
k ⊕ (c1 ⊕ λ1
L0
k ⊕ (c1 ⊕ λ1
L0
k ⊕ (c1 ⊕ λ1
L0
k ⊕ (c1 ⊕ λ1
L0
k
k ⊕ λ1
i
⊕ λ1
i ⊕ λ1
k ⊕ λ1
k],
)∆ ⊕ K[c2] ⊕ K[λ2
k] ⊕ K[λ2
)∆ ⊕ K[c2] ⊕ K[λ2
i ],
k]
j)∆ ⊕ K[c2] ⊕ K[λ2
k] ⊕ K[λ2
j)∆ ⊕ K[c2] ⊕ K[λ2
H0,0 ⊕(cid:16)
H0,1 ⊕(cid:16)
H1,0 ⊕(cid:16)
H1,1 ⊕(cid:16)
(cid:16)
(cid:16)
(cid:16)
(cid:16)
k],
M[c2] ⊕ M[λ2
M[c2] ⊕ M[λ2
k] ⊕ M[λ2
i ],
M[c2] ⊕ M[λ2
⊕ M[λ2
k]
j],
i ] ⊕ M[λ2
k] ⊕ M[λ2
M[c2] ⊕ M[λ2
j],
⊕ λ1
j ,
i ⊕ λ1
j ,
k
j],
⊕ K[λ2
i ] ⊕ K[λ2
j] ⊕ ∆,
Share of P1’s Garbled Entry
c1 ⊕ λ1
k,
c1 ⊕ λ1
k ⊕ λ1
i ,
c1 ⊕ λ1
c1 ⊕ λ1
Share of P2’s Garbled Entry
c2 ⊕ λ2
k,
c2 ⊕ λ2
k ⊕ λ2
i ,
c2 ⊕ λ2
c2 ⊕ λ2
k ⊕ λ1
k ⊕ λ2
k
k]
M[c1] ⊕ M[λ1
k] ⊕ M[λ1
M[c1] ⊕ M[λ1
i ]
k]
M[c1] ⊕ M[λ1
M[c1] ⊕ M[λ1
k] ⊕ M[λ1
⊕ M[λ1
i ] ⊕ M[λ1
k]
K[c1] ⊕ K[λ1
K[c1] ⊕ K[λ1
k] ⊕ K[λ1
i ]
K[c1] ⊕ K[λ1
k]
⊕ λ2
j ,
k] ⊕ K[λ1
j ⊕ 1, K[c1] ⊕ K[λ1
i ⊕ λ2
⊕ K[λ1
i ] ⊕ K[λ1
j]
(cid:17)
(cid:17)
(cid:17)
j](cid:17)
j](cid:17)
(cid:17)
(cid:17)
j] (cid:17)
(cid:17)
k)∆ ⊕ (c2 ⊕ λ2
k)∆ =
of which P1 already knows. Because (c1 ⊕ λ1
(λi λj ⊕ λk)∆, one would wish P2 to be able to locally compute
k)∆. Unfortunately, P2 cannot because it does not know ∆.
(c2 ⊕ λ2
To resolve this, WRK exploited the fact that P2 already knows
k], both generated from the same ∆1 (P1’s global se-
M[c2] and M[λ2
cret for authenticating P2’s bits). Because K[b]⊕M[b] = b∆1 for any
authenticated bit b, it suffices to require P1 to set ∆ = ∆1, and define
k)∆ ⊕ K[c2] ⊕ K[λ2
k]
SP1 def= (c1 ⊕ λ1
SP2 def= M[c2] ⊕ M[λ2
k]
so that SP1 ⊕ SP2 = (λi λj ⊕ λk)∆ while the parties can each locally
compute SP1 and SP2, respectively. Finally, to prevent a malicious
P1 from replacing c1 ⊕ λ1
k with an arbitrary bit, WRK requires P1 to
provide M[c1] ⊕ M[λ1
k], the MAC of c1 ⊕ λ1
k, so that P2 can verify
the correctness of a garbled row. Further, observing that the MACs
are XOR-homomorphic and λi λj = λi ⊕ λi λj, λi λj = λj ⊕ λi λj, and
λi λj = 1 ⊕ λi ⊕ λj ⊕ λi λj, so the other three garbled rows can also
be computed using the same aAND used for computing the first
row (see Table 2).
Note that because the MACs and keys are used in construct-
ing garbled tables, the length of the MACs and keys becomes a
computational security parameter.
Generating Authenticated AND Triples. The parties need to run
a separate secure protocol in a secret-input-independent prepara-
tion phase to generate aAND triples. In fact, this protocol, dubbed
ΠaAND, dominates the overall cost of the WRK protocols. WRK’s
ΠaAND works in two high-level steps:
(1) Generating leaky-aANDs using ΠLaAND. A leaky-aAND triple
has the same property as aAND except that a cheating party is
able to correctly guess a honest party’s first abit output with
probability 1/2, at the risk of being caught with probability 1/2.
(2) Combine every B randomly-chosen leaky-aANDs into a fully-
secure aAND. The integer B is known as the bucket size.
2.3 Pool-based Cut-and-choose
Many state-of-the-art implementations of actively-secure computa-
tion protocols [20, 28, 36, 39, 47], including WRK, are based on the
idea of batched cut-and-choose. These protocols, however, suffered
from scalability issues as they require linear storage (in the length
of the computation) because much per-gate information needs to
be stored before the cut-and-choose challenges can be revealed. To
overcome this issue, Zhu et al. [48] proposed to maintain a fixed-
size pool for keeping necessary information to do cut-and-choose.
Namely, the garbled gates used for checking/evaluation will al-
ways be selected from a fixed-size pool and the pool will be refilled
immediately after any garbled gate is consumed. They have an
example instantiation (called Pool-JIMU) of the idea on top of JIMU
protocol and showed its extraordinary scalability advantage. In ad-
dition, Pool-JIMU also offers unpaired long-term statistical security
guarantee, i.e., cut-and-choose failures are bounded throughout
the life-time of the pool regardless of how many secure compu-
tation instances have been executed. They have shed some light
on applying the idea also on improving the scalability of WRK’s
expensive aANDs generation protocol. However, they overlooked
several important technical issues in combining Pool with WRK.
As we will show in Section 4, these oversights can lead to serious
performance issues, and even real attacks.
3 THE SPACE-ROUND DILEMMA
Generally speaking, there are two flavors of MPC protocols. Early
MPC protocols such as BGW [4] and CCD [7] require constant
round per layer of ANDs. Protocols in this category may be useful
for computing wide but shallow circuits, assuming there is sufficient
space to hold the secret values of all the input wires of a layer of
ANDs. Note that these protocols could run in constant space, simply
at the cost of incurring linear rounds in the size of the circuits. For
general computations, due to the prohibitive time cost incurred by
the round-trips (especially when network latency is high), constant-
round MPC protocols are thought to be much more desirable.
The second category of actively-secure MPC protocols, pio-
neered by BMR [3] and resurrected by many recent works [11,
12, 27, 44, 45], are able to execute any circuit in constant rounds.
However, a largely overlooked drawback of this category of proto-
cols is their space complexity. In fact, we have examined all known
MPC protocols in this category but find that they all rely a common
online-offline trick to circumvent the round complexity. Namely,
they all use a constant-round but linear-space offline preparation
phase, followed by a function-dependent online phase. Therefore,
their space complexities grow linearly in the running time of the
computation.
Table 3 summarizes a list of state-of-the-art actively-secure MPC
protocols whose practical efficiency have been verified with actual
software implementations. We consider the round, computation,
and communication complexity of these protocols in view of their
space complexity. Note that all the constant-round, asymptotically
more efficient protocols [10, 12, 15, 19, 20, 28, 36, 39, 44, 45, 47]
cannot even be launched without O(|Cf |) space to hold the whole
garbled circuits, which is typically the case in practice. In contrast,
our protocol can always run within a user-specified small space O(p).
Although ours uses linear rounds, experiments show that, compared
with the O(1)-round WRK, the actual delay due to roundtrips in
our protocol is hardly noticeable even with a relatively small space
(Figure 13). Note that the main focus of this work is the more general
n-party setting, and the two-party protocols are included to show
that this dilemma is somehow fundamental.
Concrete Impact of Space. In order to appreciate the impact of
space complexity of WRK protocols, we have run a number of ex-
periments using WRK. Our two-party setting experimental results
are depicted in Figure 1. We measured the actual peak memory
usages of WRK running different circuits whose AND counts range
from 35K to 8M, in the two-party setting. Clearly, their memory
usage grows linearly with the number of ANDs in the circuit, which
aligns well with our theoretical analysis. To get some idea about
the peak memory consumption of executing circuits with more
than 8M ANDs, we used a linear model ˆk · |Cf | + ˆb to extrapolate
the curve based on 29 points of actual observations, where ˆk, ˆb are
assigned with minimal values indicated by any pair of observed
Table 3: Compare state-of-the-art implementations of actively-
secure MPC protocols that allow dishonest-majority.
[22], [1, 25]
[35]
[43]
[15, 28, 39]
[10, 20, 36, 47]
[44]
[48]
[8]
[19]
[12]
[45]⋆
This work
g
n
i
t
t
e
s
y
t
r
a
p
-
2