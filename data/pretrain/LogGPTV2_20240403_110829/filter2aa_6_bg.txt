Object.create()
Object.getPrototypeOf()
通过属性描述符管理属性特性（参见17.8.2“属性描述符”）：
Object.defineProperty()
Object.defineProperties()
Object.create()
Object.getOwnPropertyDescriptor()
列出属性（参见17.5“遍历和检测属性”）：
Object.keys()
Object.getOwnPropertyNames()
保护对象（参见17.9“保护对象”）：
Object.preventExtensions()
Object.isExtensible()
Object.seal()
Object.isSealed()
Object.freeze()
Object.isFrozen()
新Function方法（参见17.3.2小节的“Function.prototype.bind(thisValue, arg1?, ..., argN?)”）：
Function.prototype.bind()
25.3.2 新方法
字符串（参见第12章）：
新方法String.prototype.trim()
通过方括号[…]访问字符
新数组方法（参见18.7“数组原型方法”）：
Array.isArray()
Array.prototype.every()
Array.prototype.filter()
Array.prototype.forEach()
Array.prototype.indexOf()
Array.prototype.lastIndexOf()
Array.prototype.map()
Array.prototype.reduce()
Array.prototype.some()
新Date方法（参见20.3“Date原型方法”）：
Date.now()
Date.prototype.toISOString()
25.3.3 JSON
支持JSON（参见第22章）
JSON.parse()（参见22.3“JSON.parse(text, reviver?)”）
JSON.stringify()（参见22.2“JSON.stringify(value, replacer?, space?)”）
一些内建对象具有特殊的toJSON()方法：
Boolean.prototype.toJSON()
Number.prototype.toJSON()
String.prototype.toJSON()
Date.prototype.toJSON()
25.4 兼容旧浏览器的小贴士
如果需要兼容旧浏览器，以下资源会十分有用：
JuriyZaytsev(“kangax”)的兼容表格（http://kangax.github.io/es5-compat-table/）展示了不同浏览器的不同版本对 ECMAScript 5的支持程度。
es5-shim（https://github.com/kriskowal/es5-shim/）可兼容大部分浏览器（但不是全部）。
第4部分 技巧、工具和类库
这部分提供了使用JavaScript的技巧（最佳实践、进阶技术和学习资源）并介绍了一些重要工具和类库。
第26章 元编程风格指南
JavaScript有很多不错的风格指南。因此，没有必要另写一个。相反，本章介绍了元风格规则，研究已有的风格指南，并建立了最佳实践。本章也提到我喜欢的更具争议性的实践。这个想法是为了补充现有风格指南，而不是取而代之。
26.1 现有风格指南
下面是我喜欢的一些风格指南。
Idiomatic.js：Principles of Writing Consistent, Idiomatic JavaScript（https://github. com/rwaldrom/idiomatic.js/）
Google JavaScript Style Guide（http://bit.ly/1oOEfQ7）
jQuery JavaScript Style Guide（http://contribute.jquery.org/style-guide/js/）
Airbnb JavaScript Style Guide（https://github.com/airbnb/javascript）
此外，有两种元编程风格指南。
GitHub上的流行编码规范（http://sideeffect.kr/popularconvention/）可以分析GitHub代码找出最常用的编码规范。
JavaScript，流行风格（http://seravo.fi/2013/javascript-the-winning-style）检验了几种广泛流行的风格指南建议。
26.2 通用技巧
本节将介绍一些通用的代码编写技巧。
26.2.1 代码应该具有一致性
编写一致性代码有两个重要规则。第一个规则是，如果开始一个新项目，你应该确定一种风格，编写文档并遵循。团队越大，使用工具（如JSHint）自动对遵守风格的检查越重要。涉及风格，要做很多决定。大多数有普遍公认的答案。其他需要根据每个项目定义。例如：
有多少空白（在括号后、语句间等）；
缩进（例如，每级缩进有多少空白）；
如何且在哪儿写var语句。
第二个规则是，如果你加入一个已有的项目，应该严格遵循此项目的规则（即使你不赞同这些规则）。
26.2.2 代码应该易于理解
每个人都知道调试比编写程序难度翻倍。因此如果你编写代码时就聪明地意识到这个问题，为什么还要调试它呢？——Brian Kernighan
对于大多数代码，用于阅读的时间远远大于编写的时间。因此编写易于阅读的代码非常重要。下面是这方面的一些准则。
（1）简短并不总是更好的
有时写的多意味着实际上便于更快地阅读。让我们看两个例子。首先，熟悉的东西更易于理解。这意味着推荐使用熟悉的、稍微详细的结构更适合。其次，人类阅读短语，而不是字符。因此redBalloon比rdBlln更易于阅读。
（2）好的代码是一本教科书
大多数代码库都充满了新的思想和概念。这意味着如果你想使用一个代码库，你需要学习这些思想和概念。与教科书相比，增加的挑战在于，人们不能线性地阅读代码。阅读的人可以在任何地方跳转，并应该大概了解发生了什么。一个代码库的作用有三部分：
代码应该解释正在发生的事情，它应该是不言自明的。要写这样的代码，应该使用描述性的标识符，并把较长的函数（或方法）分解成更小的子函数。如果这些函数足够小，并且具有意义的名称，通常可以免除注释。
注释应该解释事情为什么发生。如果你需要了解一个概念来理解代码，你可以在标识符中包含概念的名称，或在注释中说明。人们在阅读代码时可以通过文档了解这个概念的更多信息。
文档应该填补代码和注释留下的空白。它应该告诉你如何开始使用代码库，并为你提供整体介绍。它还应该包含所有重要概念的术语表。
（3）不要自作聪明，不要让人思考
有很多巧妙的代码，其对语言的深入理解达到令人印象深刻的简洁。这样的代码像一个谜，很难弄清楚。你会遇到这样的看法，如果人们不理解这样的代码，也许他们应该先学习 JavaScript。但并不是如此。无论你有多聪明，进入别人的精神世界永远充满了挑战。所以简单的代码并不代表愚蠢，代码大部分的作用是使一切易于理解。注意，“别人”也包括未来的你。我经常发现，过去的聪明想法对现在的我没有任何意义。
（4）避免优化代码速度或大小
大部分技巧是针对这些优化的。然而，你通常不需要这些优化。一方面，JavaScript引擎正变得越来越聪明，可以根据既定模式自动优化代码速度。另一方面，压缩工具（第32章）可以重构你的代码，使它尽可能小。在这两个方面，工具都足够智能，所以你不用自己处理。
有时除了优化代码性能，你别无选择。如果这样做，一定要衡量和正确优化关键位置。在浏览器中，问题往往与DOM和HTML有关，而不是语言的问题。
26.3 普遍认可的最佳实践
大多数JavaScript程序员都认可以下最佳实践。
使用严格模式。它使JavaScript语言更整洁（参见7.8“严格模式”）。
总是使用分号。避免自动插入分号的缺陷（参见7.5.3“自动分号插入”）。
总是使用严格相等（===）和严格不等（!==）。我建议绝不背离这条原则。我甚至推荐下面两个条件判断，即使它们是等价的：
只用空格或只用制表符缩进，但不要混合使用。
引用字符串。在JavaScript中你可以用单引号或双引号写字符串字面量。单引号更常见。它更易用于HTML代码（通常双引号用于属性值）。其他注意事项参见12.1“字符串字面量”。
避免全局变量（16.7.1“最佳实践：避免创建全局变量”）。
26.3.1 括号风格
语言中括号划分代码块，括号风格决定你放置括号的位置。有两种括号风格在类C语言中最常见（比如Java和JavaScript）：Allman和1TBS风格。
Allman风格
如果一个语句包含区块，这个区块被认为与语句头部是分开的：它的开括号在新的一行，与头部缩进相同。例如：
1TBS风格（One True Brace Style的缩写）
这里的区块与它的语句头部关联更紧密，它开始于同一行的语句头部之后，控制流语句体总是放在括号中，即使只有一个单独的语句。例如：
1TBS是（旧的）K&R（Kernighan和Ritchie）[1]风格的变体。K&R风格中，函数用Allman风格编写，而非必要时可以省略括号。例如，单独的then条件语句：
JavaScript
在JavaScript的世界中，实际的标准是1TBS。它继承自Java，而且大多数风格指南这样推荐。这是客观的原因之一。如果返回一个对象字面量，你必须把开括号放在关键字return同一行，像这样（否则，会在return后自动插入分号，意味着没有任何返回，参见7.5.3小节的“缺陷：ASI会意想不到的分断语句”）：
显然，对象字面量不是代码块，但看起来一样，如果你都用同样的方式格式化，可以减少犯错。
我的个人风格和推荐如下。
1TBS（这表示无论何时尽可能使用括号）。
有一个例外，如果语句可以写成单独一行，我会省略括号。例如：
26.3.2 推荐字面量而不是构造函数
可以通过对象字面量创建对象，也可以通过构造函数创建。然而，通常前者是更好的选择：
不要使用构造函数Array创建给定元素的数组。18.2.1小节的“用元素初始化数组（避免）”解释了原因：
26.3.3 不要自作聪明
这部分收集了一些不推荐使用的技巧。
条件操作符
不要嵌套条件操作符：
简写if语句
使用逻辑操作符时，不要简写if语句：
自增操作符
如果可能，使用自增操作符（++）和自减操作符（--）作为语句，但不要作为表达式使用它们。在后一种情况下，它们返回一个值，虽然有记忆，你仍然需要弄清楚发生了什么：
检查 undefined
从ECMAScript 5开始，第二种检查方法更好。8.3.4“修改undefined”解释了原因。
把数字转换为整数
位移操作符可以用于把数字转换为整型。然而，通常最好选择更明确的变换，如Math.round()。11.7“转换成整数”提供了转换成整数所有方式的总览。
26.3.4 可接受的技巧
有时你可以在JavaScript中使用技巧——如果技巧成为一种既定的模式。
默认值
常见模式是使用或（||）操作符提供默认值。例如，参数：
详细信息和更多例子，请参考10.2.3小节的“模式：提供默认值”。
泛型方法
如果使用泛型方法，你可以把Object.prototype简写为{}。下面的两个表达式是等价的：
Array.prototype可以简化为[]：
我对这种简化比较矛盾。这是一种黑客技巧（你可以通过实例访问原型属性）。但它减少了混乱，我希望引擎最终优化这种模式。
ECMAScript 5：末尾的逗号
在ECMAScript 5 中，对象字面量最后的逗号是合法的。
ECMAScript 5：保留字
ECMAScript 5也允许你使用保留字（如new）作为属性键：
26.4 具有争议的规则
下面让我们看看一些我喜欢的更具争议的约定。
26.4.1 语法
我们从语法约定开始。
（1）紧凑的空白
我喜欢相对紧凑的空白。书面英语的模式：在开括号后和闭括号前没有空白。而在逗号后有空格：
匿名函数，我遵循Douglas Crockford的规则，在关键字function后加上空格。理由是，如果你删除函数名，一个命名函数表达式如下所示：
（2）每个缩进级别为四个空格
我看到的大多数代码使用空格缩进，因为制表符在不同的应用和操作系统中表现不同。我推荐每个缩进层级为四个空格，因为这让缩进更明显。
（3）把条件操作符放在括号中
这样有助于阅读，因为这样易于分辨出操作符的范围：
26.4.2 变量
接下来，我会介绍变量的约定。
（1）每行一个变量声明
我不会在一个声明中声明多个变量：
这种方式的优点是行之间的删除、插入和重排更简单，且可正确地自动缩进。
（2）保持声明本地变量
如果你的函数不太长，那么你可以不用那么在意变量提升而假装var声明是区块范围的。换句话说，你可以在变量使用的上下文中声明该变量（在循环中，在then或else区块中等）。这种本地封装使隔离的代码片段更易于理解，也更易于删除代码片段或把它移到任何地方。
（3）如果在区块中，就保持在这个区块中
作为前面规则的补充：不要在两个不同的区块中声明相同的变量两次。例如：
前面的代码与下面的代码具有相同的效果和目的，这就是为什么应该这么写：
26.4.3 面向对象