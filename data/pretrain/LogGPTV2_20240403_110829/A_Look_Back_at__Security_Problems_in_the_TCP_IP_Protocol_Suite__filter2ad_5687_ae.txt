straight-forward to encrypt the control chan-
nel; protecting the data channels is harder,
because they’re dynamic. Worse yet, a mali-
cious FTP client can use the data channels
9 Recently, a host was temporarily rendered unusable by massive num-
bers of FTP requests for a popular technical report. If this were delib-
erate, it would be considered a successful denial of service attack.
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
to cause an innocent FTP server to attack a
third host, in what’s known as a bounce at-
tack. A security analysis of FTP (including
details of the bounce attack) can be found
in [7]; [51] describes cryptogprahic protec-
tion for FTP.
5.5. Simple Network Management Protocol
The Simple Network Management Protocol (SNMP)
[17] has recently been deﬁned to aid in network manage-
ment. Clearly, access to such a resource must be heavily
protected. The RFC states this, but also allows for a null au-
thentication service; this is a bad idea. Even a “read-only”
mode is dangerous; it may expose the target host to net-
stat-type attacks if
Infor-
mation Base (MIB) [62] used includes sequence num-
bers. (The current standardized version does not; however,
the MIB is explicitly declared to be extensible.)
the particular Management
SNMP authentication, as originally de-
ﬁned, boils down to a simple plaintext pass-
word known as the community string. All the
usual problems with plaintext passwords ap-
ply,
including eavesdropping and guess-
ability. SNMPv3 [18] deﬁnes a User-based
[92] with cryptographic au-
Security Model
thentication.
In addition, new MIBs are
carefully scrutinized for security-sensitive el-
ements: one proposal that would have put
TCP sequence numbers into the MIB was
caught.
5.6. Remote Booting
Two sets of protocols are used today to boot diskless
workstations and gateways, Reverse ARP (RARP) [43] with
the Trivial File Transfer Protocol (TFTP) [94] and BOOTP
[25] with TFTP. A system being booted is a tempting tar-
get; if one can subvert the boot process, a new kernel with
altered protection mechanisms can be substituted. RARP-
based booting is riskier because it relies on Ethernet-like
networks, with all the vulnerabilities adhering thereto. One
can achieve a modest improvement in security by ensur-
ing that the booting machine uses a random number for its
UDP source port; otherwise, an attacker can impersonate
the server and send false DATA packets.
BOOTP adds an additional layer of security by includ-
ing a 4-byte random transaction id. This prevents an at-
tacker from generating false replies to a workstation known
to be rebooting. It is vital that these numbers indeed be ran-
dom; this can be difﬁcult in a system that is freshly pow-
ered up, and hence with little or no unpredictable state. Care
should be taken when booting through gateways; the more
networks traversed, the greater the opportunity for imper-
sonation.
The greatest measure of protection is that normally, the
attacker has only a single chance; a system being booted
does not stay in that state. If, however, communications be-
tween the client and the standard server may be interrupted,
larger-scale attacks may be mounted.
A newer boot-time protocol, DHCP [34] is
even more important. It provides hosts with
IP addresses, DNS servers, default router,
and more. Furthermore, DHCP queries can
happen with some frequency, if the lease
time of the address is short; this gives an
attacker many more opportunities to do mis-
chief.
There is a DHCP authentication option [3],
but it is little-used. One reason is that anyone
who can mount a DHCP attack can launch
a local network attack just as easily; merely
protecting DHCP does little to protect the
client.
6. Trivial Attacks
A few attacks are almost too trivial to mention; neverthe-
less, completeness demands that they at least be noted.
6.1. Vulnerability of the Local Network
Some local-area networks, notably the Ethernet net-
works, are extremely vulnerable to eavesdropping and
host-spooﬁng. If such networks are used, physical ac-
cess must be strictly controlled. It is also unwise to trust
any hosts on such networks if any machine on the net-
work is accessible to untrusted personnel, unless authenti-
cation servers are used.
If the local network uses the Address Resolution Proto-
col (ARP) [78] more subtle forms of host-spooﬁng are pos-
sible. In particular, it becomes trivial to intercept, modify,
and forward packets, rather than just taking over the host’s
role or simply spying on all trafﬁc.
It is possible to launch denial of service attacks by trig-
gering broadcast storms. There are a variety of ways to do
this; it is quite easy if most or all of the hosts on the network
are acting as gateways. The attacker can broadcast a packet
destined for a non-existent IP address. Each host, upon re-
ceiving it, will attempt to forward it to the proper destina-
tion. This alone will represent a signiﬁcant amount of traf-
ﬁc, as each host will generate a broadcast ARP query for
the destination. The attacker can follow up by broadcast-
ing an ARP reply claiming that the broadcast Ethernet ad-
dress is the proper way to reach that destination. Each sus-
pectible host will then not only resend the bogus packet, it
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
will also receive many more copies of it from the other sus-
pectible hosts on the network.
ARP attacks are easy to launch and hard to
spot. End-to-end encryption can prevent the
worst problems, but they remain a potent ve-
hicle for denial of service attacks. This is be-
ing addressed for IPv6 with the SEND en-
hancements to IPv6 Neighbor Discovery, its
version of ARP.
There are two modern venues where
ARP attacks are particularly nasty. One is
on wireless networks, especially in pub-
lic hotspots. Another is using ARP to defeat
the presumed security properties of Ether-
net switches. Some administrators assume
that using a switch prevents classical eaves-
dropping; it does, but ARP can be used to
redirect the trafﬁc despite that.
Broadcast storms have been launched
maliciously, but in a more dangerous fash-
ion. The attacker sends an ICMP Echo Re-
quest packet
to the broadcast address of
some local network; all hosts on that net-
work send a reply to the originator of the
ICMP message. Of course, the source IP ad-
dress in that packet
the at-
tacker; instead, it’s the address of the victim,
who gets bombarded with enough Echo Re-
ply messages to clog the link. Smurf attacks
(see CERT Advisory CA-1998-01) have be-
come relatively rare since the default router
conﬁgurations were changed to disable di-
rected broadcasts [91].
that of
isn’t
6.2. The Trivial File Transfer Protocol
TFTP [94] permits ﬁle transfers without any attempt at
authentication. Thus, any publicly-readable ﬁle in the en-
tire universe is accessible. It is the responsibility of the im-
plementor and/or the system administrator to make that uni-
verse as small as possible.
6.3. Reserved Ports
Berkeley-derived TCPs and UDPs have the notion of a
“privileged port”. That is, port numbers lower than 1024
may only be allocated to privileged processes. This restric-
tion is used as part of the authentication mechanism. How-
ever, neither the TCP nor the UDP speciﬁcations contain
any such concept, nor is such a concept even meaningful on
a single-user computer. Administrators should never rely on
the Berkeley authentication schemes when talking to such
machines.
they
Privileged ports are a bad idea, but
could have been even worse. When FTP
bounce attacks are launched,
the source
port is 21, in the privileged range. In other
words, bounce attacks could have been
used to attack rlogin and rsh servers. For-
tunately, out of a nagging sense of un-
ease,
those servers only accepted con-
nections coming from ports in the range
512–1023.
7. Comprehensive Defenses
Thus far, we have described defenses against a variety of
individual attacks. Several techniques are broad-spectrum
defenses; they may be employed to guard against not only
these attacks, but many others as well.
7.1. Authentication
Many of the intrusions described above succeed only be-
cause the target host uses the IP source address for authen-
tication, and assumes it to be genuine. Unfortunately, there
are sufﬁciently many ways to spoof this address that such
techniques are all but worthless. Put another way, source
address authentication is the equivalent of a ﬁle cabinet se-
cured with an S100 lock; it may reduce the temptation level
for more-or-less honest passers-by, but will do little or noth-
ing to deter anyone even slightly serious about gaining en-
try.
Some form of cryptographic authentication is needed.
There are several possible approaches. Perhaps the best-
known is the Needham-Schroeder algorithm [75, 28, 76].
It relies on each host sharing a key with an authentica-
tion server; a host wishing to establish a connection obtains
a session key from the authentication server and passes a
sealed version along to the destination. At the conclusion
of the dialog, each side is convinced of the identity of the
other. Versions of the algorithm exist for both private-key
and public-key [30] cryptosystems.
How do these schemes ﬁt together with TCP/IP? One an-
swer is obvious: with them, preauthenticated connections
can be implemented safely; without them, they are quite
risky. A second answer is that the DNS provides an ideal
base for authentication systems, as it already incorporates
the necessary name structure, redundancy, etc. To be sure,
key distribution responses must be authenticated and/or en-
crypted; as noted, the former seems to be necessary in any
event.
In some environments, care must be taken to use the ses-
sion key to encrypt the entire conversation; if this is not
done, an attacker can take over a connection via the mecha-
nisms described earlier.
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
scheme—the
Doing cryptography properly is a lot harder
than I made it seem. Indeed, the Needham-
Schroeder
crypto-
graphic protocol in the open literature—was
found in 1996 to be vulnerable to a new ﬂaw
[61]. That variant, expressed in modern no-
tation, is only three lines long. . .
oldest
7.2. Encryption
Suitable encryption can defend against most of the at-
tacks outlined above. But encryption devices are expensive,
often slow, hard to administer, and uncommon in the civil-
ian sector. There are different ways to apply encryption;
each has its strengths and weaknesses. A comprehensive
treatment of encryption is beyond the scope of this paper;
interested readers should consult Voydock and Kent [103]
or Davies and Price [26]
Link-level encryption—encrypting each packet as it
leaves the host computer—is an excellent method of guard-
ing against disclosure of information. It also works well
against physical intrusions; an attacker who tapped in to
an Ethernet cable, for example, would not be able to in-
ject spurious packets. Similarly, an intruder who cut the
line to a name server would not be able to imperson-
ate it. The number of entities that share a given key de-
termines the security of the network;
typically, a key
distribution center will allocate keys to each pair of com-
municating hosts.
Link-level encryption has some weaknesses, however.
Broadcast packets are difﬁcult to secure; in the absence of
fast public-key cryptosystems, the ability to decode an en-
crypted broadcast implies the ability to send such a broad-
cast, impersonating any host on the network. Furthermore,
link-level encryption, by deﬁnition, is not end-to-end; se-
curity of a conversation across gateways implies trust in
the gateways and assurance that the full concatenated inter-
net is similarly protected. (This latter constraint may be en-
forced administratively, as is done in the military sector.) If
such constraints are not met, tactics such as source-routing
attacks or RIP-spooﬁng may be employed. Paranoid gate-
ways can be deployed at the entrance to security domains;
these might, for example, block incoming RIP packets or
source-routed packets.
As pointed out in [54], I had Ethernet link en-
cryptors in mind. Link encryptors on point-
to-point links are quite different; they protect
trafﬁc down to the bit level, sometimes hid-
ing even the HDLC framing.
Many portions of the DARPA Internet employ forms of
link encryption. All Defense Data Network (DDN) IMP-
to-IMP trunks use DES encryption, even for non-classiﬁed
trafﬁc; classiﬁed lines use more secure cryptosystems [27].
These, however, are point-to-point lines, which are compar-
atively easy to protect.
A multi-point link encryption device for TCP/IP is the
Blacker Front End (BFE) [40]. The BFE looks to the host
like an X.25 DDN interface, and sits between the host and
the actual DDN line. When it receives a call request packet
specifying a new destination, it contacts an Access Control
Center (ACC) for permission, and a Key Distribution Cen-
ter (KDC) for cryptographic keys. If the local host is de-
nied permission to talk to the remote host, an appropriate
diagnostic code is returned. A special “Emergency Mode”
is available for communications to a restricted set of desti-
nations at times when the link to the KDC or ACC is not
working.
The permission-checking can, to some extent, protect
against the DNS attacks described earlier. Even if a host
has been mislead about the proper IP address for a particu-
lar destination, the BFE will ensure that a totally unautho-
rized host does not receive sensitive data. That is, assume
that a host wishes to send Top Secret data to some host foo.
A DNS attack might mislead the host into connecting to
penetrated host 4.0.0.4, rather than 1.0.0.1. If 4.0.0.4 is not
cleared for Top Secret material, or is not allowed commu-
nications with the local host, the connection attempt will
fail. To be sure, a denial of service attack has taken place;
this, in the military world, is far less serious than informa-
tion loss.
The BFE also translates the original (“Red”) IP address
to an encrypted (“Black”) address, using a translation ta-
ble supplied by the ACC. This is done to foil trafﬁc anal-
ysis techniques, the bane of all multi-point link encryption
schemes.
I got a lot wrong here (see [54] for some
details), partly because of my lack of ex-
perience with crypto at the time and partly
because of the sketchy information publicly
available on Blacker. With the beneﬁt of hind-
sight (and a lot more experience with cryp-
tography), I’d call the BFE a network-layer
encryptor for non-broadcast multiple access
networks, rather than a multi-point link-level
encryptor. But Blacker was obsolescent even
as I wrote the original paper; SP3—the an-