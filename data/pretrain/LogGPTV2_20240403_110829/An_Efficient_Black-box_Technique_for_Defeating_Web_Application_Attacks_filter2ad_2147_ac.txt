I(Ti − S) ED(cid:48)(s, ti)
r
2r
applied on it. We therefore deﬁne an alternative distance
measure ED#:
ED#(u, v) = min(D(U − V), I(V − U))
The intuitive reason for having to choose min is as follows.
In order to reduce the number of substrings considered by
the ﬁltering technique, we constrain ourselves to n-length
substrings of t. Due to this constraint on length, it may
seem that a large number of insertion or deletion operations
are needed to obtain u from s. However, the closest match
v found by the edit-distance algorithm may be a substring
of u or, u may be a substring of v. In the former case, the
insertion operations may no longer be needed, while in the
latter case, none of the deletion operations may be needed.
Since we cannot predict which of these two case will be
applicable, we need to take the minimum of deletion and
insertion costs as an upper bound for edit-distance.
By replacing ED(cid:48) with ED# we obtain a correct and ef-
ﬁcient coarse-ﬁltering algorithm. In particular, the follow-
ing theorem guarantees that this coarse-ﬁltering technique
will identify every approximate substring match between s
and t that are within the distance threshold d. In addition,
the example in Figure 4 shows that setting a threshold lower
than ED# will miss matches in some cases. Together, these
two results indicate that ED# provides a tight characteri-
zation of all the instances where the dynamic programming
algorithm needs to be tried.
Theorem 2 (Soundness of Filtering Technique) If
there
is a substring u = titi+1 ··· tj of
such that
ED(s, u) ≤ d then ED#(s, ti) ≤ d, and ED#(s, tk) ≤ d
for all i ” in the input
may be used.
Since taint inference is based on edit distance, pruning poli-
cies should also rely on edit distance with the same thresh-
olds. (As discussed in Section 7.3, the threshold will auto-
matically be set to zero for very small strings. This means
that an exact match would be used for the shell and com-