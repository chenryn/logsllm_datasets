### Server and Client Types

The `Server` type encapsulates information directly related to the server, such as the server socket and the clients that have connected to it. Similarly, the `Client` type represents a single client that has connected to the server and includes fields that provide useful information about each client. For example, the `netAddr` field contains the IP address of the client, and the `id` field holds a unique identifier for each client, allowing you to distinguish between them. The `connected` flag is crucial as it tracks whether the client is still connected, which is important for the server to know so it doesn't attempt to send messages to a disconnected client.

#### Standard Library Imports and Type Definitions

```nim
import asyncdispatch, asyncnet

# Define the Client type as a reference type
type
  Client = ref object
    socket: AsyncSocket  # Asynchronous socket belonging to the client
    netAddr: string      # Address from which the client has connected
    connected: bool      # Flag indicating if the client is still connected
    id: int              # Unique identification number for the client

# Define the Server type as a reference type
type
  Server = ref object
    socket: AsyncSocket  # Server socket for accepting new client connections
    clients: seq[Client] # List of Client objects that have connected
```

### Constructor for the Server Type

For a `ref` type like `Server`, the constructor should be named `newServer`:

```nim
proc newServer(): Server =
  Server(socket: newAsyncSocket(), clients: @[])
```

This procedure creates a new instance of the `Server` type and initializes its socket and clients sequence. You can then call this procedure and assign it to a new server variable:

```nim
var server = newServer()
```

### Constructors in Nim

Constructors in Nim are simply procedures with a specific naming convention. Nim does not include special syntax for defining constructors, but it provides simple syntax for constructing custom types. Tuples can be constructed by placing values in parentheses:

```nim
type
  Point = tuple[x, y: int]

var point = (5, 10)
var point2 = (x: 5, y: 10)
```

Objects, including `ref` objects, can be constructed by calling the type as if it were a procedure and specifying each field name and value separated by a colon:

```nim
type
  Human = object
    name: string
    age: int

var jeff = Human(name: "Jeff", age: 23)
var alex = Human(name: "Alex", age: 20)
```

If you need more complex constructors, you must define a procedure. There is a convention in Nim for naming these constructor procedures:

| Type Definition | Name         |
|-----------------|--------------|
| `MyType = object` | `initMyType` |
| `MyTypeRef = ref object` | `newMyTypeRef` |
| `MyTuple = tuple[x, y: int]` | `initMyTuple` |

### Adding the `newServer` Procedure and Server Variable

Add the `newServer` procedure and server variable definitions below the types created in the previous section. This will give you a good base to start adding networking code.

### Networking in Nim

Before diving into the networking code, let's look at how networking, particularly asynchronous networking, works in Nim. We'll start by examining the basic tool used to transfer data over a network: a socket.

#### What is a Socket?

In most programming languages, transferring data over a network is done using network sockets. In Nim, a network socket is represented using the `Socket` type, defined in the `net` module. A new instance of it can be created using the `newSocket` procedure.

Sockets share some similarities with file descriptors, supporting operations like `write`, `read`, `open`, and `close`. However, sockets differ enough to expose a different interface. Table 3.1 shows some common socket procedures and their file descriptor equivalents.

| Procedure | File Equivalent | Description |
|-----------|-----------------|-------------|
| `recv`    | `read`          | Allows incoming data to be read from the remote side. For TCP sockets, `recv` is used, and for UDP sockets, `recvFrom` is used. |
| `send`    | `write`         | Sends data to a socket, allowing data to be sent to the remote side. For TCP sockets, `send` is used, and for UDP sockets, `sendTo` is used. |
| `connect` | `open`          | Connects a socket to a remote server. This is typically only used for TCP sockets. |
| `bindAddr`| None            | Binds a socket to the specified address and port. When called, the socket becomes a server socket, and other sockets can connect to it. This is typically only used for TCP sockets. |

By default, the `newSocket` constructor creates a TCP socket, which is suitable for the chat application. A newly created TCP socket is neither a server nor a client until the `bindAddr` or `connect` procedure is called. The `bindAddr` procedure transforms it into a server socket, and the `connect` procedure turns it into a client socket.

#### Creating and Binding a Server Socket

A server socket's main purpose is to listen for new connections and accept them with minimal delay. Before this can be done, the socket must be bound to an address and port. Figure 3.13 shows the procedures needed to create and bind a server socket.

1. **Bind the Socket**: Every server socket needs to be explicitly bound to a specific port and address using the `bindAddr` procedure. By default, the address is `localhost`, but the port must always be specified. Ports less than or equal to 1024 require administrator privileges.
2. **Listen for Connections**: Call the `listen` procedure on the socket to start listening for incoming connections.
3. **Accept Connections**: Use the `accept` procedure to accept new connections. This procedure returns a new client socket corresponding to the socket that just connected to the address and port specified in the `bindAddr` call.

#### Synchronous vs. Asynchronous I/O

Synchronous I/O blocks the thread until a new connection is made, while asynchronous I/O does not. Asynchronous sockets in Nim are defined in the `asyncnet` module and return a `Future[AsyncSocket]` object instead of blocking. Let's explore the `accept` procedure in more detail.

##### The `accept` Procedure

- **Synchronous Version**: Blocks the thread until a new socket connects to the server socket.
- **Asynchronous Version**: Returns immediately and returns a `Future[AsyncSocket]` object.

##### The Future Type

A `Future` is a special type that acts as a proxy for a result that is initially unknown. It can be thought of as a container that is initially empty and is populated at some future point. Every asynchronous operation in Nim returns a `Future[T]` object, where `T` is the type of the value the `Future` promises to store.

```nim
import asyncdispatch

var future = newFuture[int]()
doAssert(not future.finished)

future.callback = proc (f: Future[int]) =
  echo("Future is no longer empty, ", f.read)

future.complete(42)
```

Futures can also store exceptions. Calling `read` on a `Future` that contains an exception will result in an error. To prevent this, use the `failed` procedure to check if the future completed with an exception.

##### Asynchronous Execution

Figure 3.14 shows the difference between synchronous and asynchronous execution of the `accept` procedure. The asynchronous version performs more calls to `doWork()` and retains the call to `doWork(socket)`, leading to the same logic but different performance characteristics.

##### Callbacks and Event Loop

Callbacks can be used to handle asynchronous I/O, but they can lead to "callback hell" for complex application logic. Nim provides the `await` keyword to simplify asynchronous code, making it almost identical to synchronous code.

##### Example of Asynchronous I/O Using Callbacks

Compare the Node.js and Nim versions of reading a file asynchronously:

**Node.js:**

```javascript
var fs = require('fs');
fs.readFile('/etc/passwd', function (err, data) {
  if (err) throw err;
  console.log(data);
});
```

**Nim:**

```nim
import asyncdispatch, asyncfile

var file = openAsync("/etc/passwd")
let dataFut = file.readAll()
dataFut.callback = proc (f: Future[string]) =
  echo(f.read())
asyncdispatch.runForever()
```

##### The Event Loop

Nim's event loop is defined in the `asyncdispatch` module. It uses the `runForever` procedure to run the event loop indefinitely. The `poll` procedure waits for events for a specified number of milliseconds and processes them, calling the appropriate callbacks.

##### Async Await

The `await` keyword can only be used inside procedures marked with the `{.async.}` pragma. Here is an example of reading and writing files using an async procedure:

```nim
proc readFileAndWriteFile() {.async.} =
  let file = await openAsync("/etc/passwd")
  let data = await file.readAll()
  echo(data)
  let writeFile = await openAsync("/tmp/output.txt", fmWrite)
  await writeFile.writeAll(data)
```

This eliminates callback hell and makes asynchronous code more readable and maintainable.