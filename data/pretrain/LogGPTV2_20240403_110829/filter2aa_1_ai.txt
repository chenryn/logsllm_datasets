    Why You’re Not Finding Bugs
    If you spend a lot of time in bug bounties and still have trouble finding bugs, here are some possible reasons.
    如果你花费了大量时间在漏洞赏金活动上，仍然很难找到漏洞，以下是可能的原因。
    You Participate in the Wrong Programs
    You might have been targeting the wrong programs all along. Bug bounty programs aren’t created equally, and picking the right one is essential. Some programs delay fixing bugs because they lack the resources to deal with reports. Some programs downplay the severity of vulnerabilities to avoid paying hackers. Finally, other programs restrict their scope to a small subset of their assets. They run bug bounty programs to gain positive publicity and don’t intend to actually fix vulnerabilities. Avoid these programs to save yourself the headache.
    你可能一直把目标对准了错误的计划。漏洞奖励计划并不一样，选择正确的计划至关重要。某些计划因缺乏处理报告的资源而延迟解决漏洞；一些计划淡化漏洞的严重性以避免支付黑客；最后，其他计划仅针对其资产的一小部分范围运行漏洞奖励计划，以获得正面公众评价，实际上并不打算修复漏洞。避免这些计划以避免麻烦。
    You can identify these programs by reading publicly disclosed reports, analyzing program statistics on bug bounty platforms, or by talking with other hackers. A program’s stats listed on bug bounty platforms provide a lot of information on how well a program is executed. Avoid programs with long response times and programs with low average bounties. Pick targets carefully, and prioritize companies that invest in their bug bounty programs.
    你可以通过阅读公开的报告、分析漏洞赏金平台上的程序统计数据或与其他黑客交流来识别这些程序。漏洞赏金平台上列出的程序统计数据提供了有关程序执行情况的大量信息。避免长时间响应或平均赏金低的程序。谨慎选择目标，并优先考虑投资于漏洞赏金计划的公司。
    You Don’t Stick to a Program
    How long should you target a program? If your answer is a few hours or days, that’s the reason you’re not finding anything. Jumping from program to program is another mistake beginners often make.
    你要持续关注一个计划多长时间？如果你的答案是几个小时或几天，那就是你找不到成果的原因。初学者经常犯的另一个错误是频繁跳换计划。
    Every bug bounty program has countless bug bounty hunters hacking it. Differentiate yourself from the competition, or risk not finding anything! You can differentiate yourself in two ways: dig deep or search wide. For example, dig deep into a single functionality of an application to search for complex bugs. Or discover and hack the lesser-known assets of the company.
    每个漏洞赏金计划都有无数的漏洞赏金猎人在攻击它。与竞争对手有所区别，否则会冒着找不到任何东西的风险！你可以通过两种方式区别自己：深入挖掘或广泛搜索。例如，深入挖掘应用程序的单个功能以寻找复杂漏洞。或者发现和攻击公司的较少知名的资产。
    Doing these things well takes time. Don’t expect to find bugs right away when you’re starting fresh on a program. And don’t quit a program if you can’t find bugs on the first day.
    做这些事情需要时间。不要期望在刚开始编程时立即发现错误。而且，如果你不能在第一天找到错误，也不要放弃一个程序。
    You Don’t Recon
    Jumping into big public programs without performing reconnaissance is another way to fail at bug bounties. Effective recon, which we discuss in
     Chapter 5
    , helps you discover new attack surfaces: new subdomains, new endpoints, and new functionality.
    不进行侦察就跳入大型公共项目是在漏洞赏金上失败的另一种方式。有效的侦察，我们在第5章中讨论，帮助你发现新的攻击面：新的子域、新的端点和新的功能。
    Spending time on recon gives you an incredible advantage over other hackers, because you’ll be the first to notice the bugs on all obscure assets you discover, giving you better chances of finding bugs that aren’t duplicates.
    在侦察上花费时间能让你比其他黑客拥有巨大的优势，因为你会第一个注意到你发现的所有模糊资产上的漏洞，从而更有机会发现不重复的漏洞。
    You Go for Only Low-Hanging Fruit
    Another mistake that beginners often make is to rely on vulnerability scanners. Companies routinely scan and audit their applications, and other bug bounty hunters often do the same, so this approach won’t give you good results.
    初学者经常犯的另一个错误是依赖漏洞扫描器。公司定期扫描和审计他们的应用程序，其他漏洞赏金猎人通常也会这样做，因此这种方法不会给你带来好结果。
    Also, avoid looking for only the obvious bug types. Simplistic bugs on big targets have probably already been found. Many bug bounty programs were private before companies opened them to the public. This means a few experienced hackers will have already reported the easiest-to-find bugs. For example, many hackers will likely have already tested for a stored-XSS vulnerability on a forum’s comment field.
    此外，避免只寻找显而易见的漏洞类型。大型目标上的简单漏洞可能已经被发现了。许多赏金计划在公司向公众开放之前是私人的。这意味着一些经验丰富的黑客已经报告了最容易发现的漏洞。例如，许多黑客可能已经测试了论坛评论字段的存储XSS漏洞。
    This isn’t to say that you shouldn’t look for low-hanging fruit at all. Just don’t get discouraged if you don’t find anything that way. Instead, strive to gain a deeper understanding of the application’s underlying architecture and logic. From there, you can develop a unique testing methodology that will result in more unique and valuable bugs.
    这并不是说你不应该寻找低 hanging fruit。只是不要因此而感到沮丧。相反，努力获得对应用程序底层架构与逻辑的深入理解。从那里开始，你可以开发出独特的测试方法，从而得到更多独特且有价值的漏洞。
    You Don’t Get into Private Programs
    It becomes much easier to find bugs after you start hacking on private programs. Many successful hackers say that most of their findings come from private programs. Private programs are a lot less crowded than public ones, so you’ll have less competition, and less competition usually means more easy finds and fewer duplicates.
    开始黑客攻击私人计划后，发现漏洞变得更容易。许多成功的黑客表示，他们找到的大部分漏洞都来自私人计划。私人计划不像公共计划那样拥挤，因此您将有较少的竞争，而较少的竞争通常意味着更容易找到漏洞，减少了重复。
    Why Your Reports Get Dismissed
    As mentioned, three types of reports won’t result in a bounty: N/As, informatives, and duplicates. In this section, I’ll talk about what you can do to reduce these disappointments.
    如上所述，三种类型的报告不会产生赏金：N/A、信息报告和重复报告。在本节中，我将谈论降低这些失望的方法。
    Reducing the number of invalid reports benefits everyone. It will not only save you time and effort, but also save the security team the staff hours dedicated to processing these reports. Here are some reasons your reports keep getting dismissed.
    减少无效报告数量对所有人都有益，这不仅可以节省你的时间和精力，还可以为安全团队节省处理这些报告所需要的人力资源。以下是你的报告被驳回的原因：
    You Don’t Read the Bounty Policy
    One of the most common reasons reports get marked as N/A is that they’re out of scope. A program’s policy page often has a section labeled
     Scope
    that tells you which of the company’s assets you’re allowed to hack. Most of the time, the policy page also lists vulnerabilities and assets that are
     out of scope
    , meaning you’re not allowed to report about them.
    报告被标记为 N/A 的最常见原因之一是超出了范围。一个程序的政策页面通常有一个标记“范围”的部分，告诉你可以黑掉公司资产的哪些部分。大多数情况下，这个政策页面也列出了漏洞和资产，这些漏洞和资产是超出范围的，也就是说，你不可以报告它们。
    The best way to prevent submitting N/As is to read the bounty policy carefully and repeatedly. Which vulnerability types are out of scope? And which of the organization’s assets? Respect these boundaries, and don’t submit bugs that are out of scope.
    预防提交 N/As 的最佳方法是认真而重复地阅读赏金政策。哪些漏洞类型不在范围内？哪些是组织的资产？尊重这些边界，不要提交超出范围的漏洞。
    If you do accidentally find a critical issue that is out of scope, report it if you think it’s something that the organization has to know about! You might not get rewarded, but you can still contribute to the company’s security.
    如果您无意中发现了一个超出范围的关键问题，如果您认为这是组织必须知道的事情，请报告它！您可能不会得到奖励，但仍然可以为公司的安全做出贡献。
    You Don’t Put Yourself in the Organization’s Shoes
    Informative reports are much harder to prevent than N/As. Most of the time, you’ll get informative ratings because the company doesn’t care about the issue you’re reporting.
    信息性报告比无法适用（N/As）更难以预防。大多数情况下，你会收到信息性评级，因为公司并不关心你正在报告的问题。
    Imagine yourself as a security engineer. If you’re busy safeguarding millions of users’ data every day, would you care about an open redirect that can be used only for phishing? Although it’s a valid security flaw, you probably wouldn’t. You have other responsibilities to tend to, so fixing a low-severity bug is at the bottom of your to-do list. If the security team does not have the extra staff to deal with these reports, they will sometimes ignore it and mark it as informative.
    想象自己是一名安全工程师。如果你每天都忙于保护数百万用户的数据，你会在意一个只能用于钓鱼的开放式重定向吗？虽然这是一个有效的安全漏洞，但你可能不会太在意。你有其他的责任要处理，因此修复一个低严重性的错误将会被放在你的待办事项清单的最底部。如果安全团队没有额外的人手来处理这些报告，他们有时会忽视它并将其标记为信息性内容。
    I’ve found that the most helpful way to reduce informatives is to put myself in the organization’s shoes. Learn about the organization so you can identify its product, the data it’s protecting, and the parts of its application that are the most important. Once you know the business’s priorities, you can go after the vulnerabilities that the security team cares about.
    我发现最有效地减少信息泄露的方法是将自己置于组织的立场。了解组织，以便确定其产品、所保护的数据以及最重要的应用程序部分。一旦你了解了企业的优先事项，你就可以攻击安全团队关心的漏洞。
    And remember, different companies have different priorities. An informative report to one organization could be a critical one to another. Like the dating site versus job search site example mentioned earlier in this chapter, everything is relative. Sometimes, it’s difficult to figure out how important a bug will be to an organization. Some issues I’ve reported as critical ended up being informative. And some vulnerabilities I classified as low impact were rewarded as critical issues.
    请记住，不同的公司有不同的优先事项。对于一家组织而言，一份信息性的报告可能是至关重要的，而对于另一家公司则可能不那么重要。就像本章早些时候提到的相亲网站和求职网站的例子一样，一切都是相对的。有时候，很难确定一个漏洞对一个组织的重要性。我报告过的一些问题被认为很重要，最终却只是信息性的。有些我认为影响不大的漏洞却被认为是严重问题，并得到了奖励。
    This is where trial and error can pay off. Every time the security team classifies your report as informative, take note for future reference. The next time you find a bug, ask yourself: did this company care about issues like this in the past? Learn what each company cares about, and tailor your hacking efforts to suit their business priorities. You’ll eventually develop an intuition about what kinds of bugs deliver the most impact.
    这就是试错法能够得到回报的地方。每当安全团队将您的报告分类为信息性时，请记下以备将来参考。下一次发现缺陷时，请问自己：这家公司过去是否关心过这样的问题？了解每家公司所关心的事项，并根据它们的业务重点调整您的黑客攻击策略。最终，您会对哪些类型的漏洞产生最大影响产生直觉。
    You Don’t Chain Bugs
    You might also be getting informatives because you always report the first minor bug you find.
    因为你总是报告第一个小错误，所以你可能也会收到一些信息。
    But minor bugs classified as informative can become big issues if you learn to chain them. When you find a low-severity bug that might get dismissed, don’t report it immediately. Try to use it in future bug chains instead. For example, instead of reporting an open redirect, use it in a server-side request forgery (SSRF) attack!
    但是被分类为信息性的小型错误，在你学会如何链接它们后可能会变成大问题。当您发现一个可能会被忽略的低严重性错误时，请不要立即报告它。尝试将其用于将来的错误链中。例如，不要报告一个开放重定向漏洞，而是在服务器端请求伪造(SSRF)攻击中使用它！
    You Write Bad Reports
    Another mistake beginners often make is that they fail to communicate the bug’s impact in their report. Even when a vulnerability is impactful, if you can’t communicate its implications to the security team, they’ll dismiss the report.
    初学者经常犯的另一个错误是未能在报告中表达漏洞的影响。即使漏洞很严重，如果您不能向安全团队清晰地传达其影响，他们将忽略报告。
    What About Duplicates?
    Unfortunately, sometimes you can’t avoid duplicates. But you could lower your chances of getting duplicates by hunting on programs with large scopes, hacking on private programs, performing recon extensively, and developing your unique hunting methodology.
    不幸的是，有时候你无法避免重复。但是，通过在范围较大的程序上进行寻找、在私有程序上进行黑客攻击、广泛地进行侦察和开发自己独特的寻找方法，你可以降低重复的几率。
    What to Do When You’re Stuck
    When I got started in bug bounties, I often went days or weeks without finding a single vulnerability. My first-ever target was a social media site with a big scope. But after reporting my first CSRFs and IDORs, I soon ran out of ideas (and luck). I started checking for the same vulnerabilities over and over again, and trying out different automatic tools, to no avail.
    当我刚开始接触漏洞赏金时，我经常连续数天甚至数周都无法找到一个漏洞。我第一个攻击目标是一个覆盖面广泛的社交媒体网站。但在报告了我的第一个CSRF和IDOR之后，我很快就没有了新的想法(运气也不怎么好了)。我开始反复检查同样的漏洞，尝试不同的自动化工具，但都无功而返。
    I later found out I wasn’t alone; this type of
     bug slump
    is surprisingly common among new hackers. Let’s talk about how you can bounce back from frustration and improve your results when you get stuck.
    我后来发现我不是唯一遇到这种挫折的人；新手黑客中出现这种情况是非常普遍的。让我们谈谈当你被卡住时如何从挫折中反弹，并改善你的成果。
    Step 1: Take a Break!
    First, take a break. Hacking is hard work. Unlike what they show in the movies, hunting for vulnerabilities is tedious and difficult. It requires patience, persistence, and an eye for detail, so it can be very mentally draining.
    首先，休息一下。黑客工作很辛苦。与电影中所展示的不同，寻找漏洞是单调和困难的。它需要耐心，毅力和注重细节，因此可能非常消耗精力。
    Before you keep hacking away, ask yourself: am I tired? A lack of inspiration could be your brain’s way of telling you it has reached its limits. In this case, your best course of action would be to rest it out. Go outside. Meet up with friends. Have some ice cream. Or stay inside. Make some tea. And read a good book.
    在继续努力之前，请问一下自己：我累了吗？ 缺乏灵感可能是大脑告诉你已达到极限的方式。 在这种情况下，您的最佳选择是休息一下。 出去走走。 跟朋友聚会。 吃些冰淇淋。 或者呆在家里。 泡些茶。 然后读一本好书。
    There is more to life than SQL injections and XSS payloads. If you take a break from hacking, you’ll often find that you’re much more creative when you come back.
    生活中还有比SQL注入和XSS负载更多。如果你从黑客攻击中休息一下，往往会发现当你回来时更有创造力。
    Step 2: Build Your Skill Set
    Use your hacking slump as an opportunity to improve your skills. Hackers often get stuck because they get too comfortable with certain familiar techniques, and when those techniques don’t work anymore, they mistakenly assume there’s nothing left to try. Learning new skills will get you out of your comfort zone and strengthen your hacker skills for the future.
    利用你的黑客低谷作为提高技能的机会。黑客经常会陷入困境，因为他们对某些熟悉的技术过于舒适，当这些技术不再起作用时，他们错误地认为没有其他方法可尝试了。学习新的技能将使你走出舒适区，并为未来增强你的黑客技能。
    First, if you’re not already familiar with the basic hacking techniques, refer to testing guides and best practices to solidify your skills. For example, the
     Open Web Application Security Project
     (
     OWASP
     )
    has published testing guides for various asset types. You can find OWASP’s web and mobile testing guides at
     https://owasp.org/www-project-web-security-testing-guide/
    and
     https://owasp.org/www-project-mobile-security-testing-guide/
    .
    首先，如果你还不熟悉基本的黑客攻击技术，请参考测试指南和最佳实践来巩固你的技能。例如，开放式网络应用程序安全计划（OWASP）已经针对各种资产类型发布了测试指南。你可以在 https://owasp.org/www-project-web-security-testing-guide/ 和 https://owasp.org/www-project-mobile-security-testing-guide/ 找到 OWASP 的网络和移动测试指南。
    Learn a new hacking technique, whether it’s a new web exploitation technique, a new recon angle, or a different platform, such as Android. Focus on a specific skill you want to build, read about it, and apply it to the targets you’re hacking. Who knows? You might uncover a whole new way to approach the target application! You can also take this opportunity to catch up with what other hackers are doing by reading the many hacker blogs and write-up sites out there. Understanding other hackers’ approaches can provide you with a refreshing new perspective on engaging with your target.
    学习一种新的黑客技术，无论是一种新的网络利用技术，一种新的侦查角度，还是不同的平台，比如Android。着重于想要提高的特定技能，阅读相关资料并将其应用于你正在攻击的目标上。谁知道呢？你可能会发现一种全新的方法来接近目标应用程序！你也可以通过阅读众多黑客博客和写作网站来看看其他黑客在做什么。理解其他黑客的方法可以为你提供一个新鲜的与目标交互的视角。
    Next, play
     Capture the Flags
     (
     CTFs
     )
    . In these security competitions, players search for flags that prove that they’ve hacked into a system. CTFs are a great way to learn about new vulnerabilities. They’re also fun and often feature interesting new classes of vulnerabilities. Researchers are constantly discovering new kinds of exploit techniques, and staying on top of these techniques will ensure that you’re constantly finding bugs.
    接下来，玩捉旗比赛（CTFs）。在这些安全竞赛中，玩家搜索能证明他们入侵系统的标记。CTFs是学习新漏洞的好方法。它们也很有趣，通常涉及有趣的新漏洞类型。研究人员不断发现新的攻击技术，并了解这些技术将确保您不断发现漏洞。
    Step 3: Gain a Fresh Perspective
    When you’re ready to hack live targets again, here are some tips to help you keep your momentum.
    当你准备好重新攻击实时目标时，以下提示可帮助你保持动力。
    First, hacking on a single target can get boring, so diversify your targets instead of focusing on only one. I’ve always found it helpful to have a few targets to alternate between. When you’re getting tired of one application, switch to another, and come back to the first one later.
    首先，只针对一个目标进行攻击会变得乏味，因此应该多样化攻击目标，而不是只关注一个目标。我一直发现在几个目标之间轮流攻击很有帮助。当你厌倦了一个应用程序时，请切换到另一个，稍后再回到第一个。
    Second, make sure you’re looking for specific things in a target instead of wandering aimlessly, searching for anything. Make a list of the new skills you’ve learned and try them out. Look for a new kind of bug, or try out a new recon angle. Then, rinse and repeat until you find a suitable new workflow.
    其次，请确保你在目标中寻找的是具体的事物，而不是漫无目的地寻找任何东西。列出你学到的新技能并尝试它们。寻找新类型的缺陷，或尝试一种新的侦察角度。然后，反复执行，直到找到适合的新工作流程。
    Finally, remember that hacking is not always about finding a single vulnerability but combining several weaknesses of an application into something critical. In this case, it’s helpful to specifically look for weird behavior instead of vulnerabilities. Then take note of these weird behaviors and weaknesses, and see if you can chain them into something worth reporting.
    最后，请记得，黑客并不总是只找一个漏洞，而是将应用程序的多个弱点结合起来，变成关键性的漏洞。在这种情况下，寻找奇怪的行为而不是漏洞会更有帮助。然后记录这些奇怪的行为和薄弱点，看看是否可以将它们串联起来，变成值得报告的东西。
    Lastly, a Few Words of Experience
    Bug bounty hunting is difficult. When I started hunting for bugs, I’d sometimes go months without finding one. And when I did find one, it’d be something trivial and low severity.
    漏洞赏金猎人很有难度。在我开始寻找漏洞时，我有时会连续几个月都找不到一个。而当我找到一个漏洞时，通常会是一些微不足道且严重等级低的事情。
    The key to getting better at anything is practice. If you’re willing to put in the time and effort, your hacking skills will improve, and you’ll soon see yourself on leaderboards and private invite lists! If you get frustrated during this process, remember that everything gets easier over time. Reach out to the hacker community if you need help. And good luck!
    提高任何事情的关键在于练习。如果你愿意花时间和精力，你的黑客技能会不断提高，很快你就会看到自己出现在排行榜和私人邀请列表中！如果在这个过程中感到沮丧，记住一切随着时间的推移都会变得容易。如果需要帮助，请向黑客社区寻求帮助。祝你好运！
Part II
      Getting Started
3
      How the Internet Works
    Before you jump into hunting for bugs, let’s take some time to understand how the internet works. Finding web vulnerabilities is all about exploiting weaknesses in this technology, so all good hackers should have a solid understanding of it. If you’re already familiar with these processes, feel free to skip ahead to my discussion of the internet’s security controls.
    在你开始寻找漏洞之前，让我们先花点时间了解互联网是如何运作的。寻找Web漏洞就是要利用这项技术中的弱点，所以所有优秀的黑客都应该对此有扎实的理解。如果你已经熟悉这些过程，可以跳过这部分，直接阅读我对互联网安全控制的讨论。
    The following question provides a good starting place: what happens when you enter
     www.google.com
    in your browser? In other words, how does your browser know how to go from a domain name, like google.com, to the web page you’re looking for? Let’s find out.
    下面的问题提供了一个很好的起点：当您在浏览器中输入www.google.com时会发生什么？换句话说，您的浏览器如何知道如何从像google.com这样的域名转到您正在寻找的网页？让我们找出答案。
    The Client-Server Model
    The internet is composed of two kind of devices: clients and servers.
     Clients
    request resources or services, and
     servers
    provide those resources and services. When you visit a website with your browser, it acts as a client and requests a web page from a web server. The web server will then send your browser the web page (
     Figure 3-1
    ).
    互联网由两种设备组成：客户端和服务器。客户端请求资源或服务，而服务器提供这些资源和服务。当您使用浏览器访问网站时，浏览器充当客户端并从Web服务器请求网页。Web服务器将随后将网页发送给您的浏览器（图3-1）。
       Figure 3-1
      : Internet clients request resources from servers.
      图3-1：互联网客户端从服务器请求资源。
    A web page is nothing more than a collection of resources or files sent by the web server. For example, at the very least, the server will send your browser a text file written in
     Hypertext Markup Language (
     HTML)
    , the language that tells your browser what to display. Most web pages also include
     Cascading Style Sheets (CSS
     )
    files to make them pretty. Sometimes web pages also contain
     JavaScript (
     JS)
    files, which enable sites to animate the web page and react to user input without going through the server. For example, JavaScript can resize images as users scroll through the page and validate a user input on the client side before sending it to the server. Finally, your browser might receive embedded resources, such as images and videos. Your browser will combine these resources to display the web page you see.
    网页不过是由服务器发送的一组资源或文件的集合。比如说，服务器至少会发送一个用超文本标记语言（HTML）编写的文本文件，这种语言可以告诉浏览器该如何显示内容。大多数网页也会包含层叠样式表（CSS）文件，以使页面看起来更漂亮。有时候网页还会包含JavaScript（JS）文件，使得网站可以在不经过服务器的情况下为网页增加动画效果以及响应用户的输入。比如说，JavaScript 可以在用户滚动页面时调整图像大小，在信息发送到服务器之前在客户端验证用户输入等。最后，您的浏览器可能会接收到嵌入的资源，如图像和视频。您的浏览器会将这些资源组合在一起展示您所看到的网页。
    Servers don’t just return web pages to the user, either. Web APIs enable applications to request the data of other systems. This enables applications to interact with each other and share data and resources in a controlled way. For example, Twitter’s APIs allow other websites to send requests to Twitter’s servers to retrieve data such as lists of public tweets and their authors. APIs power many internet functionalities beyond this, and we’ll revisit them, along with their security issues, in
     Chapter 24
    .
    服务器不仅向用户返回web页面。Web API使得应用程序可以请求其他系统的数据。这使得应用程序可以相互交互，并以有控制的方式共享数据和资源。例如，Twitter的API允许其他网站向Twitter的服务器发送请求以检索数据，例如公共推文和其作者的列表。 API驱动了许多互联网功能，我们将在第24章中重新访问它们及其安全问题。
    The Domain Name System
    How do your browser and other web clients know where to find these resources? Well, every device connected to the internet has a unique
     Internet Protocol (IP)
    address that other devices can use to find it. However, IP addresses are made up of numbers and letters that are hard for humans to remember. For example, the older format of IP addresses, IPv4, looks like this: 123.45.67.89. The new version, IPv6, looks even more complicated: 2001:db8::ff00:42:8329.
    您的浏览器和其他网络客户端如何知道在哪里找到这些资源呢？每个连接到互联网的设备都有一个唯一的IP地址，其他设备可以使用它来查找它。然而，IP地址由数字和字母组成，对人类来说很难记忆。例如，旧版IP地址IPv4看起来像这样：123.45.67.89。新版IPv6更复杂：2001：db8：：ff00：42：8329。
    This is where the
     Domain Name System (DNS)
    comes in. A DNS server functions as the phone book for the internet, translating domain names into IP addresses (
     Figure 3-2
    ). When you enter a domain name in your browser, a DNS server must first convert the domain name into an IP address. Our browser asks the DNS server, “Which IP address is this domain located at?”
    这就是域名系统（DNS）发挥作用的地方。DNS服务器像互联网上的电话簿一样运作，将域名翻译成IP地址（图3-2）。当您在浏览器中输入域名时，DNS服务器必须先将其转换成IP地址。我们的浏览器会向DNS服务器询问：“这个域名位于哪个IP地址？”
       Figure 3-2
      : A DNS server will translate a domain name to an IP address.
      图3-2：DNS服务器将把域名翻译成IP地址。
    Internet Ports
    After your browser acquires the correct IP address, it will attempt to connect to that IP address via a port. A
     port
    is a logical division on devices that identifies a specific network service. We identify ports by their port numbers, which can range from 0 to 65,535.
    浏览器获取正确的IP地址后，会尝试通过端口连接到该IP地址。端口是设备上用于标识特定网络服务的逻辑分区。我们通过它们的端口号来识别端口，端口号的范围从0到65,535。
    Ports allow a server to provide multiple services to the internet at the same time. Because conventions exist for the traffic received on certain ports, port numbers also allow the server to quickly forward arriving internet messages to a corresponding service for processing. For example, if an internet client connects to port 80, the web server understands that the client wishes to access its web services (
     Figure 3-3
    ).
    端口允许服务器同时向互联网提供多个服务。由于某些端口上接收到的流量已经有了惯例，端口号还使服务器能够快速将到达的互联网消息转发给相应的服务进行处理。例如，如果互联网客户端连接到端口80，则Web服务器会明白客户端希望访问其Web服务（图3-3）。
       Figure 3-3
      : Ports allow servers to provide multiple services. Port numbers help forward client requests to the right service.
      图3-3：端口允许服务器提供多个服务。端口号帮助将客户端请求转发到正确的服务。
    By default, we use port 80 for HTTP messages and port 443 for HTTPS, the encrypted version of HTTP.
    默认情况下，HTTP消息使用端口80，HTTPS消息使用端口443，HTTPS是HTTP的加密版本。
    HTTP Requests and Responses
    Once a connection is established, the browser and server communicate via the
     HyperText Transfer Protocol (
     HTTP)
    . HTTP is a set of rules that specifies how to structure and interpret internet messages, and how web clients and web servers should exchange information.
    一旦建立连接，浏览器和服务器通过超文本传输协议（HTTP）进行通信。 HTTP是一组规则，它指定如何构造和解释Internet消息，以及Web客户端和Web服务器应如何交换信息。
    When your browser wants to interact with a server, it sends the server an