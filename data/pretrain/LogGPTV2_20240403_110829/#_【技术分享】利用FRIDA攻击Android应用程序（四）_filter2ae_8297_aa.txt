# 【技术分享】利用FRIDA攻击Android应用程序（四）
|
##### 译文声明
本文是翻译文章，文章来源：enovella.github.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
翻译：[ **houjingyi233**](http://bobao.360.cn/member/contribute?uid=2802394681)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**传送门**
[**【技术分享】利用FRIDA攻击Android应用程序（一）**](http://bobao.360.cn/learning/detail/3641.html)
[**【技术分享】利用FRIDA攻击Android应用程序（二）**](http://bobao.360.cn/learning/detail/3634.html)
[**【技术分享】利用FRIDA攻击Android应用程序（三）**](http://bobao.360.cn/learning/detail/3794.html)
这篇文章详细介绍了解决OWASP的Bernhard Mueller发布的Android crackme中的[UnCrackable-Level3.apk](https://github.com/OWASP/owasp-mstg/tree/master/Crackmes/Android/Level_03)的几种方法。我们的主要目标是从一个被保护的APK中提取隐藏的字符串。
**  
**
**UnCrackable Level3中的安全机制**
APK中实施了反破解技术，主要是为了延长逆向分析人员所需的时间。冷静一下，因为现在我们必须处理所有的保护措施。
我们在该APP中检测到以下保护措施。
Java层反调试
Java层完整性检查
Java层root检查
Native层反DBI(动态二进制插桩)
Native层反调试
Native层对Dalvik字节码的完整性检查
Native层混淆(只删除了一些符号信息并使用了一个函数来保护秘密信息)
在该APP中没有检测到以下保护措施。
Java层反DBI
Java层混淆
Native层root检查
Native层对Native代码自身的完整性检查
**开始之前**
首先在分析APK之前，先明确以下几点。
Android手机需要root。
在Java和Native层有反DBI，反调试，防篡改和root检查。我们不需要绕过它们，只需要提取我们需要的秘密信息。
Native层是执行重要代码的位置。不要在Dalvik字节码上纠缠。
我的解决方案只是解决这个问题的一种方式。也许很快就会出现更好更聪明的解法。
**可能的解决方案**
这个问题可以用很多方法解决。首先，我们需要知道应用程序到底在做什么。应用程序是通过比较用户输入和Java层与Native层的secret异或的结果来实现验证的。通过JNI将Java层的secret发送到native库后，验证在native层完成。事实上，验证是对用户输入的一个简单的strncmp的和对两个secret的xor操作。验证的伪代码如下(函数名由我给出)。
    strncmp_with_xor(user_input_native, native_secret, java_secret) == 24;
因此，我们需要提取这两个secret来确定显示成功消息的正确的用户输入。通过反编译APK，可以很简单地恢复Java层的secret。然而，native层的函数通过混淆隐藏了secret使其不容易恢复，只通过静态的方法可能相当乏味耗时。hook或符号执行可能是一个聪明的想法。为了提取这些信息，我的解决方案是通过Frida。这个工具是一个注入JavaScript探索Windows，MacOS，Linux，iOS，Android和QNX上的应用程序的框架，并且这个工具还在不断改进中。Frida用于执行动态分析，hex-rays用于反编译native层代码，BytecodeViewer(Procyon)用于反编译Java层代码。使用hex-rays是因为它的ARM代码反编译出来的结果很可靠。Radare2加上开源的反编译器也可以做得很好。
提取隐藏的secret
这篇文章的结构分为四个部分。
逆向Dalvik字节码。
逆向native层的代码。
使用Frida插桩Dalvik字节码。
使用Frida插桩native层的代码。
**1.逆向Dalvik字节码(classes.dex)**
首先需要解压APK得到几个文件，以便稍后进行逆向。为了做到这一点，你可以使用apktool或7zip。一旦APK被打包，下面这两个文件在这篇文章中是非常重要的。
./classes.dex包含Dalvik字节码。
./lib/arm64-v8a/libfoo.so是一个包含ARM64汇编代码的native库。在这篇文章中讨论native代码时，我们会参考这一点(如果需要，请随意使用x86/ARM32代码)。当我在Nexus5X中运行应用程序时，对应的需要逆向的是为ARM64架构编译的库。
下面显示的MainActivity的代码片段是通过反编译UnCrackable app Level3的main class获得的。有一些有趣的问题需要讨论。
**(String xorkey = "pizzapizzapizzapizzapizz")中的硬编码的key。**
**加载native库libfoo.so和两种native方法的声明：将通过JNI调用的init()和baz()。请注意，一个方法是用xorkey初始化的。**
**追踪变量和类，以防在运行时检测到任何篡改。**
    public class MainActivity extends AppCompatActivity {
        private static final String TAG = "UnCrackable3";
        private CodeCheck check;
        Map crc;
        static int tampered = 0;
        private static final String xorkey = "pizzapizzapizzapizzapizz";
        static {
            MainActivity.tampered = 0;
            System.loadLibrary("foo");
        }
        public MainActivity() {
            super();
        }
        private native long baz();
        private native void init(byte[] xorkey) {
        }
        //
     }
当应用程序启动时，main activity的onCreate()方法被执行，该方法在Java层执行以下操作。
**通过计算CRC校验和来验证native库的完整性。请注意，native库的签名没有用到任何加密方法。**
**初始化native库，并通过JNI调用将Java secret("pizzapizzapizzapizzapizz")发送到native代码。**
**执行root，调试和篡改检测。如果检测到任何一个，则应用程序中止。**
反编译代码如下。
    protected void onCreate(Bundle savedInstanceState) {
        this.verifyLibs();
        this.init("pizzapizzapizzapizzapizz".getBytes());
        new AsyncTask() {
            protected Object doInBackground(Object[] arg2) {
                return this.doInBackground(((Void[])arg2));
            }
            protected String doInBackground(Void[] params) {
                while(!Debug.isDebuggerConnected()) {
                    SystemClock.sleep(100);
                }
                return null;
            }
            protected void onPostExecute(Object arg1) {
                this.onPostExecute(((String)arg1));
            }
            protected void onPostExecute(String msg) {
                MainActivity.this.showDialog("Debugger detected!");
                System.exit(0);
            }
        }.execute(new Void[]{null, null, null});
        if((RootDetection.checkRoot1()) || (RootDetection.checkRoot2()) || (RootDetection.checkRoot3())
                 || (IntegrityCheck.isDebuggable(this.getApplicationContext())) || MainActivity.tampered
                 != 0) {
            this.showDialog("Rooting or tampering detected.");
        }
        this.check = new CodeCheck();
        super.onCreate(savedInstanceState);
        this.setContentView(0x7F04001B);
    }
一旦观察到应用程序的主要流程，我们现在来描述找到的安全机制。
完整性检查：如上所述，verifyLibs在保护native库和Dalvik字节码的功能中使用了完整性检查。请注意，由于使用了较弱的CRC校验和，重新打包Dalvik字节码和native代码可能仍然可行。通过patch
Dalvik字节码中的verifyLibs函数和native库中的baz函数，攻击者可以绕过所有的完整性检查，然后继续篡改app。负责验证库的函数反编译如下。
    private void verifyLibs() {
        (this.crc = new HashMap()).put("armeabi", Long.parseLong(this.getResources().getString(2131099684)));
        this.crc.put("mips", Long.parseLong(this.getResources().getString(2131099689)));
        this.crc.put("armeabi-v7a", Long.parseLong(this.getResources().getString(2131099685)));
        this.crc.put("arm64-v8a", Long.parseLong(this.getResources().getString(2131099683)));
        this.crc.put("mips64", Long.parseLong(this.getResources().getString(2131099690)));
        this.crc.put("x86", Long.parseLong(this.getResources().getString(2131099691)));
        this.crc.put("x86_64", Long.parseLong(this.getResources().getString(2131099692)));
        ZipFile zipFile = null;
        Label_0419: {
            try {
                zipFile = new ZipFile(this.getPackageCodePath());
                for (final Map.Entry entry : this.crc.entrySet()) {
                    final String string = "lib/" + entry.getKey() + "/libfoo.so";
                    final ZipEntry entry2 = zipFile.getEntry(string);
                    Log.v("UnCrackable3", "CRC[" + string + "] = " + entry2.getCrc());
                    if (entry2.getCrc() != entry.getValue()) {
                        MainActivity.tampered = 31337;
                        Log.v("UnCrackable3", string + ": Invalid checksum = " + entry2.getCrc() + ", supposed to be " + entry.getValue());
                    }
                }
                break Label_0419;
            }
            catch (IOException ex) {
                Log.v("UnCrackable3", "Exception");
                System.exit(0);
            }
            return;
        }
        final ZipEntry entry3 = zipFile.getEntry("classes.dex");
        Log.v("UnCrackable3", "CRC[" + "classes.dex" + "] = " + entry3.getCrc());
        if (entry3.getCrc() != this.baz()) {
            MainActivity.tampered = 31337;
            Log.v("UnCrackable3", "classes.dex" + ": crc = " + entry3.getCrc() + ", supposed to be " + this.baz());
        }