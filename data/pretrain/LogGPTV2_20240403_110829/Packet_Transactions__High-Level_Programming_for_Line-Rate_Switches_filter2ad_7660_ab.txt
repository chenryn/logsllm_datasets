cycle, and constrain atom bodies to do so.
We constrain atom bodies by deﬁning atom templates
(§4.3). An atom template is a program with conﬁgurable
parameters that terminates within a clock cycle and speciﬁes
2We use p.x to represent ﬁeld x within a packet p and x to
represent a state variable x that persists across packets.
3Figure 3b shows an example.
pkt.last_time in stage 2, for subsequent use by stage 3.
last_time is read into
the atom’s behavior. An example is an ALU with a restricted
set of primitive operations (Figure 2a).
bit choice = ??;
int constant = ??;
if ( choice ) {
x = x + constant ;
} else {
x = x - constant ;
}
(b) Atom template
(a) Circuit for the atom
Figure 2: An atom and its template. The atom above can add
or subtract a constant from a state variable x based on two
conﬁgurable parameters, constant and choice.
Resource limits. We also limit the number of atoms in
each stage (pipeline width) and the number of stages in the
pipeline (pipeline depth). This is similar to limits on the
number of stages, tables per stage, and memory per stage in
programmable switch architectures [43].
2.5 What can Banzai not do?
Banzai is a good ﬁt for data-plane algorithms that modify
a small set of packet headers and carry out small amounts
of computation per packet. Data-plane algorithms like deep
packet inspection and WAN optimization require a switch
to parse and process the packet payload as well—effectively
parsing a large “header” consisting of each byte in the pay-
load. This is challenging at line rates of 1 GHz, and such
algorithms are best left to CPUs [52]. Some algorithms re-
quire complex computations, but not on every packet, e.g., a
measurement algorithm that periodically scans a large table
to perform garbage collection. Banzai’s atoms model small
operations that occur on every packet, and are unsuitable for
such operations that span many clock cycles.
3. PACKET TRANSACTIONS
A programmer programs a data-plane algorithm by writ-
ing it as a packet transaction in Domino (Figure 3a). The
Domino compiler then compiles this transaction to an atom
pipeline for a Banzai machine (Figure 3b). We ﬁrst describe
packet transactions in greater detail by walking through an
example (§3.1). Next, we discuss language constraints in
Domino (§3.2) informed by line-rate switches. We then dis-
cuss triggering packet transactions (§3.3) and handling mul-
tiple transactions (§3.4).
3.1 Domino by example
We use ﬂowlet switching [57] as our running example.
Flowlet switching is a load-balancing algorithm that sends
bursts of packets, called ﬂowlets, from a TCP ﬂow on a ran-
domly chosen next hop, provided the bursts are separated by
a large enough time interval to ensure packets do not arrive
out of order at a TCP receiver. For ease of exposition, we
18
AdderxconstantxSubtractorchoiceAdd ResultSub Result2-to-1 Mux1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
# define NUM_FLOWLETS
# define THRESH
# define NUM_HOPS
8000
5
10
struct Packet {
int sport ;
int dport ;
int new_hop ;
int arrival ;
int next_hop ;
int id ; // array index
};
int last_time [ NUM_FLOWLETS ] = {0};
int saved_hop [ NUM_FLOWLETS ] = {0};
void flowlet ( struct Packet pkt ) {
pkt . new_hop = hash3 ( pkt . sport ,
pkt . dport ,
pkt . arrival )
% NUM_HOPS ;
pkt . id
= hash2 ( pkt . sport ,
pkt . dport )
% NUM_FLOWLETS ;
if ( pkt . arrival - last_time [ pkt . id ]
> THRESH )
{ saved_hop [ pkt . id ] = pkt . new_hop ; }
last_time [ pkt . id ] = pkt . arrival ;
pkt . next_hop = saved_hop [ pkt . id ];
}
(a) Flowlet switching written in Domino
Figure 3: Programming ﬂowlet switching in Domino
(b) 6-stage Banzai pipeline for ﬂowlet switching. Con-
trol ﬂows from top to bottom. Stateful atoms are in grey.
use only the source and destination ports in the hash function
that randomly computes the next hop for ﬂowlet switching.
Figure 3a shows ﬂowlet switching in Domino and demon-
strates its core language constructs. All packet processing
happens in the context of a packet transaction (the func-
tion flowlet starting at line 17). The function’s argument
type Packet declares the ﬁelds in a packet (lines 5–12)4 that
can be referenced by the function body (lines 18–32). The
function body can also modify persistent switch state using
global variables (e.g., last_time and saved_hop on lines 14
and 15, respectively). The function body may use intrinsics
such as hash2 on line 23 to directly access hardware accel-
erators on the switch such as hash generators. The Domino
compiler uses an intrinsic’s signature to analyze read/write
dependencies (§4.2), but otherwise considers it a blackbox.
Packet transaction semantics. Semantically, the program-
mer views the switch as invoking the packet transaction seri-
ally in the order in which packets arrive, with no concur-
rent packet processing. Put differently, the packet trans-
action modiﬁes the passed-in packet argument and runs to
completion, before starting on the next packet. These se-
4A ﬁeld is either a packet header, e.g., source port (sport)
and destination port (dport), or packet metadata (id).
mantics allow the programmer to program under the illusion
that a single, extremely fast, processor is serially executing
the packet processing code for all packets. The programmer
doesn’t worry about parallelizing the code within and across
pipeline stages to run at line rate.
3.2 The Domino language
Domino’s syntax (Figure 4) is similar to C, but with sev-
eral constraints (Table 1). These constraints are required for
deterministic performance. Memory allocation, unbounded
iteration counts, and unstructured control ﬂow cause variable
performance, which may prevent an algorithm from achiev-
ing line rate. Additionally, within a Domino transaction,
each array can only be accessed using a single packet ﬁeld,
and repeated accesses to the same array are allowed only if
that packet ﬁeld is unmodiﬁed between accesses.
For example, all read and write accesses to last_time
use the index pkt.id. pkt.id is not modiﬁed during the
course of a single transaction execution (single packet); it
only changes between executions (packets). This restriction
on arrays mirrors restrictions on the stateful memories at-
tached to atoms (§2.4), which require multiple ports to sup-
port distinct read and write addresses every clock cycle.
19
pkt.saved_hop = saved_hop[pkt.id];pkt.next_hop = pkt.tmp2 ?                          pkt.new_hop :                          pkt.saved_hop;pkt.last_time = last_time[pkt.id];last_time[pkt.id] = pkt.arrival;pkt.tmp = pkt.arrival - pkt.last_time;pkt.new_hop = hash3(pkt.sport,           pkt.dport,            pkt.arrival)% NUM_HOPS;pkt.tmp2 = pkt.tmp > THRESH;pkt.id =hash2(pkt.sport,           pkt.dport)% NUM_FLOWLETS;saved_hop[pkt.id] = pkt.tmp2 ?                                  pkt.new_hop :                                 pkt.saved_hop;Stage 1Stage 2Stage 3Stage 4Stage 5Stage 6No iteration (while, for, do-while).
No unstructured control ﬂow (goto, break, continue).
No heap, dynamic memory allocation, or pointers.
At most one location in each array is accessed by a single
execution of a transaction.
No access to unparsed portions of the packet (payload).
Table 1: Restrictions in Domino
l ∈ literals v ∈ variables
e ∈ expressions
bop ∈ binary ops uop ∈ unary ops
::= e.f | l | v | e bop e | uop e | e[d.f ] |
s ∈ statements
t ∈ packet txns
d ∈ packet decls
sv ∈ state var inits
p ∈ Domino programs
f (e1, e2, . . .)
::= e = e | if (e) {s} else {s} | s ; s
::= name(v){s}
::= {v1, v2, . . .}
::= v = e | sv ; sv
::= {d; sv; t}
Figure 4: Domino grammar. Type annotations (void, struct,
int, and Packet) are elided for simplicity.
3.3 Triggering packet transactions
Packet transactions specify how to process packet headers
and state. To specify when to run packet transactions, pro-
grammers use guards: predicates on packet ﬁelds that trig-
ger a transaction if a packet matches the guard. For example,
(pkt.tcp_dst_port == 80) would trigger heavy-hitter de-
tection [63] on packets with TCP destination port 80.
Guards can be realized using an exact match in a match-
action table, with the actions being the atoms compiled
from a packet transaction. Guards can take various forms,
e.g., exact, ternary, longest-preﬁx, and range-based matches,
depending on the matches supported by the match-action
pipeline. Because guards map straightforwardly to the match
key in a match-action table, we focus only on compiling
packet transactions in this paper.
3.4 Handling multiple transactions
So far, we have discussed a single packet transaction cor-
responding to a single data-plane algorithm. In practice, a
switch would run multiple data-plane algorithms, each pro-
cessing its own subset of packets. To address this, we en-
vision a policy language that speciﬁes pairs of guards and
transactions. Realizing a policy is straightforward when all
guards are disjoint. When guards overlap, multiple transac-
tions need to execute on the same subset of packets, requir-
ing a mechanism to compose transactions.
One composition semantics is to run the two transactions
one after another sequentially in a user-speciﬁed order. This
can be achieved by concatenating the two transaction bodies
to create a larger transaction. We leave a detailed exploration
of multiple transactions to future work, and focus only on
compiling a single packet transaction here.
Figure 5: Passes in the Domino compiler
4. THE DOMINO COMPILER
The Domino compiler translates Domino programs to
Banzai targets. The compiler provides an all-or-nothing
model: if compilation succeeds, the program will run at line
rate on the target with packet transaction semantics. Other-
wise, if the program cannot run at line rate, it will not com-
pile. This all-or-nothing model trades off diminished pro-
grammability for guaranteed line-rate performance, in con-
trast to software routers that provide greater ﬂexibility, but
lower and unpredictable run-time performance [34].
The Domino compiler has three passes (Figure 5), which
we illustrate using the ﬂowlet switching example. Prepro-
cessing (§4.1) simpliﬁes packet transactions into a simpler
three-address code form [18]. Pipelining (§4.2) transforms
preprocessed code into code for a Pipelined Virtual Switch
Machine (PVSM), an intermediate representation that mod-
els a switch pipeline with no computational or resource lim-
its. Code generation (§4.3) transforms this intermediate rep-
resentation into conﬁguration for a Banzai machine, given
the machine’s computational and resource limits (§2.4), and
rejects the program if it can not run at line rate. The Domino
compiler uses many existing compilation techniques, but
adapts them in important ways for line-rate switches (§4.4).
4.1 Preprocessing
Branch removal. A packet transaction’s body can contain
(potentially nested) branches (e.g., Lines 27 to 29 in Fig-
ure 3a). Branches alter control ﬂow and complicate depen-
dency analysis, i.e., whether a statement should precede an-
other. We transform branches into conditional assignments,
starting from the innermost if and proceeding outwards
(Figure 6). This turns the transaction body into straight-line
code with no branches, which simpliﬁes dependency analy-
sis during pipelining (§4.2).
Rewriting state variable operations. We now identify
state variables in a packet transaction, e.g., last_time and
saved_hop in Figure 3a. For each state variable, we create a
read ﬂank to read the variable into a temporary packet ﬁeld.
For an array, we also move the index expression into the read
ﬂank using the fact that only one array index is accessed per
packet (§3.2). Within the packet transaction, we replace the
state variable with the temporary packet ﬁeld, and create a
write ﬂank to write this temporary packet ﬁeld back to the
state variable (Figure 7). After this, the only operations on
state variables are reads and writes; all arithmetic happens
on packet ﬁelds. Restricting stateful operations simpliﬁes
handling of state during pipelining (§4.2).
20
DominoCodePreprocessing(4.1)Pipelining(4.2)CodeGeneration(4.3)Atom templates, pipeline width, pipeline depthAtompipeline forBanzaimachineDomino compilerform. We
Converting to static single-assignment
next convert
the code to static single-assignment form
(SSA) [32], where every packet ﬁeld is assigned exactly
once. We do this by replacing every assignment to a packet
ﬁeld with a new packet ﬁeld and propagating this until the
next assignment to the same ﬁeld (Figure 8) . Because
ﬁelds are assigned once, SSA removes Write-After-Read
and Write-After-Write dependencies. Only Read-After-
Write dependencies remain during pipelining (§4.2).
Flattening to three-address code. Three-address code is a
representation where all instructions are either reads/writes
into state variables or operations on packet ﬁelds of the form
pkt.f1 = pkt.f2 op pkt.f3, where op can be an arith-
metic, logical, relational, or conditional 5 operator. We also
allow either one of pkt.f2 or pkt.f3 to be an intrinsic func-
tion call. To convert to three-address code, we ﬂatten ex-
pressions that are not in three-address code using temporary
packet ﬁelds, e.g., pkt.tmp2 in Figure 9.
Flattening to three-address code breaks down statements
in the packet transaction into a much simpler form that is
closer to the atoms available in the Banzai machine. For
instance, there are no nested expressions. The simpler form
of three-address code statements makes it easier to map them
one-to-one to atoms during code generation (§4.3).
4.2 Pipelining
At this point, the preprocessed code is still one sequen-
tial code block. Pipelining turns this sequential code block
into a pipeline of codelets, where each codelet is a sequen-
tial block of three-address code statements. This codelet
pipeline corresponds to an intermediate representation we
call the Pipelined Virtual Switch Machine (PVSM). PVSM
has no computational or resource limits, analogous to inter-
mediate representations for CPUs [15] that have inﬁnite vir-
tual registers. Later, during code generation, we map these
codelets to atoms available in a Banzai machine while re-
specting its constraints.
We create PVSM’s codelet pipeline using the steps below.
1. Create a graph with one node for each statement in the
preprocessed code.
2. Now, add stateful dependencies by adding a pair
of edges between the read and write ﬂanks of the
in Figure 10a,