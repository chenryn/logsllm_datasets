responsible for generating and returning credentials as ap-
propriate. Given appropriate credentials, the overlay mech-
anism will grant the indicated access.
Note that the mechanism may implement a policy by
taking some action, not simply by granting or denying ac-
cess. For example, assume that a particular camera views
a sensitive area, and images are to be blurred in, say, the
south-west quadrant. The mechanism prohibits any stream
subscriptions without an appropriate credential. Appropri-
ate credentials are only obtainable from the SecMgr, which
requires the policy ﬁle containing the south-west quadrant
restraint. Any AVS instance attempting to route the image
stream (subscribe to it) must obtain a credential with route
rights from the SecMgr. Any such credential issued by the
SecMgr will contain an indication that a blur ﬁlter should
be installed on the stream, but this will not be visible to the
AVS instance requesting the route action. As far as the AVS
instance is concerned, its route request succeeds and it gains
access to a image stream. However, the blur ﬁlter that is
implicitly installed (in response to the modiﬁed credential)
blurs out the desired part of each transmitted image.
4.1.2 Filter repository
The ﬁlters used by AVS are described by XML documents
residing on either the local ﬁlesystem of the receiving com-
ponent or on an HTTP server accessible to it. A request for
one of these ﬁlters is supplied by the player as a creden-
tial to the overlay mechanism. The credential is decoded
to recover a URL indicating the location of the ﬁlter to be
installed. The resulting XML document is retrieved, parsed
to recover any associated metadata. The ﬁlter code may be
contained directly in the XML document (usually if the ﬁl-
ter is expressed in E-code), or the document may have a ref-
erence to the code repository (if the ﬁlter is a shared object
to be loaded at run-time). Figure 5 shows how this process
is accomplished.
4.1.3 Using credentials
The original implementation of AVS used direct references
to objects of interest to the protection mechanism. These
objects include names of communication channels and ﬁl-
ters. The ﬁlters were directly embedded in the application
code or could be provided directly by the user. These refer-
ences and the code surrounding them were changed to use
credential-based access exclusively. While this implies a
number of additional network round-trips (for creation of
credentials and retrieval of ﬁlters), the performance of the
image stream itself is not affected. Since un-credentialed
access to the image stream is not possible, the underlying
performance of the AVS application is not signiﬁcantly de-
graded.
AVS Player
credential for
derived channel
credential
containing URL
of filter
Verify filter
Derive new channel
Subscribe player
to new channel
XML document 
containing filter
& metadata
Protected
middleware
Check validity of credential
Extract URL
request for
filter code
Code
Repository
Figure 5. Graphical depiction of the interac-
tion between AVS, the protection middleware,
and the code repository during the channel
derivation process.
4.2 Experimental results
We proﬁled the modiﬁed AVS application against the
original application in order to establish the amount of over-
head the overlay mechanism imposes. For each middleware
action, we recorded the percentage increase in time required
to complete the action. Experiments were conducted using
RedHat Linux 7.3 on a Dell Latitude C610 laptop computer
as the video source (connected to the webcam), connected
to the sink by a 802.11b wireless Ethernet link that feeds
into the campus wired Ethernet. The video sink ran on
8
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:41:19 UTC from IEEE Xplore.  Restrictions apply. 
RedHat Linux 7.3 on a 600 Mhz PIII processor-based ma-
chine connected via 100Mbit Ethernet. The following table
presents some representative results from these tests.
middleware operation
percentage overhead
channel create
channel subscribe
ﬁlter install
ﬁlter uninstall
4.52
3.32
8.55
3.33
The primary attractiveness of our mechanism is that its
performance overheads are not in the critical path of data
transfer. Once access to the channel has been established
or a ﬁlter installed, data transfer proceeds at speeds lim-
ited only by the underlying middleware or network. Even
in those situations where the mechanism does have a per-
formance impact, the impact is minimal. We attribute the
relatively long time taken to install a ﬁlter using the overlay
mechanism to the network round trips necessary between
the AVS application, the code repository, and the SecMgr.
Furthermore, previous experience[7] has shown that using
XML as a wire format leads to large network overheads.
We believe that the interoperability advantages gained by
using XML outweigh the performance impact, especially
since the critical data transfer path is unimpeded.
5 Related work
Our conception of security overlays has most in common
with the capability model proposed by Dennis and Van Horn
and realized in Hydra[23]. In addition, we have adopted the
principle of separation of policy and mechanism for the de-
sign of overlays. It is our intention that overlays be able
to address a wide range of application security policies in
a publish/subscribe environment.
[11] presents a policy-
deﬁnition architecture that is a useful example of the type
of system overlays is designed to support.
The use of XML as a policy deﬁnition tool has also
been a subject of previous work. [13] introduces a method
of deﬁning access restrictions on Web documents using
XML. The Security Services Markup Language[25] pro-
poses a method for expressing security models in XML.
Additionally, although based on UML rather than on XML,
QML[19] presented a method of describing system-level
policies in an abstract fashion.
Several distributed computing and publish/subscribe ap-
proaches have at least partially addressed the issue of se-
curity policy and protection mechanisms. Grid computing
approaches[27] are pursuing consensus on how to approach
authentication and authorization issues over a widely dis-
tributed computing context. The Legion project[34, 18] is
an object-based Grid computing infrastructure with a robust
security architecture that features rights-based delegation of
duties. We seek to develop solutions that are primarily ap-
plicable in a publish/subscribe context but that also may be
useful for Grid researchers.
Finally, we note that the security and safety of a run-
ning application can be interpreted broadly as a quality-of-
service issue. Our work bears similarity to BBN’s Qual-
ity Objects[29] in its aspiration to apply a general policy
(whether more traditional performance-based QoS or secu-
rity) to a distributed system.
6 Conclusion
We have presented a method of providing differential
data protection to applications through the use of a novel
protected middleware mechanism. This mechanism, secu-
rity overlays, provides applications with the ability to re-
spond to high-level security policy information while pre-
serving high-performance communication. We have also
presented an application, Active Video Streams, that uses
security overlays to implement a range of security policies.
We have shown that the performance impact of our pro-
tected middleware layer is minimal, and occurs outside the
critical path of data transmission.
Acknowledgments
This work was supported in part by an Intel Foundation
Graduate Fellowship.
References
[1] The
extensible
markup
language
(XML).
http://www.w3.org/TR/1998/REC-xml-19980210.
[2] The
infosphere
project.
http://www.cc.gatech.edu/projects/infosphere.
[3] T. F. Abdelzaher and K. G. Shin. Qos provisioning with
qcontracts in web and multimedia servers.
In IEEE Real-
Time Systems Symposium, Phoenix, Arizona, December
1999.
[4] A. Afework, M. Benyon, F. E. Bustamante, A. DeMarzo,
R. Ferreira, R. Miller, M. Silberman, J. Saltz, and A. Suss-
man. Digital dynamic telepathology - the virtual micro-
scope. In Proceedings of the AMIA Annual Fall Symposium,
August 1998.
[5] D. Agarwal, M. Lorch, M. Thompson, and M. Perry. A new
security model for collaborative environments. In Proceed-
ings of the Workshop on Advanced Collaborative Environ-
ments, Seattle, WA, June 2003. LBNL-52894.
[6] M. Ahamad, G. Neiger, P. Kohli, J. Burns, and P. Hutto.
Causal memory: Deﬁnitions, implementation, and program-
ming. Distributed Computing, August 1995.
[7] F. Bustamante, G. Eisenhauer, K. Schwan, and P. Widener.
Efﬁcient wire formats for high performance computing. In
Proceedings of Supercomputing 2000, November 2000.
[8] F. E. Bustamante. The Active Streams Approach to Adaptive
Distributed Applications and Services. PhD thesis, Georgia
Institute of Technology, November 2001.
9
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:41:19 UTC from IEEE Xplore.  Restrictions apply. 
[9] W.-W. Chen,
, H. Towles, L. Nyland, G. Welch, and
H. Fuchs. Toward a compelling sensation of telepresence:
Demonstrating a portal to a distant (static) ofﬁce. In T. Ertl,
B. Hamann, and A. Varshney, editors, Proceedings Visual-
ization 2000, pages 327–333, 2000.
[10] Y. Chen, K. Schwan, and D. Rosen. Java mirrors: Building
blocks for remote interaction. In Proceedings of the Interna-
tional Parallel Distributed Processing Symposium (IPDPS),
April 2002.
[11] M. J. Covington, P. Fogla, Z. Zhan, and M. Ahamad. A
context-aware security architecture for emerging applica-
tions. In Proceedings of the Annual Computer Security Ap-
plications Conference (ACSAC), Las Vegas, Nevada, USA,
December 2002.
[12] C. Cruz-Neira, D. Sandin, and T. Defanti. Surround-screen
projection-based virtual reality: the design and implemen-
tation of the cave. In Proceedings of the SIGGRAPH 1993
Computer Graphics Conference, 1993.
[13] E. Damiani, S. D. C. di Vimercati, S. Paraboschi, and
P. Samarati. A ﬁne-grained access control system for xml
documents. ACM Transactions on Information and System
Security, 5(2):169–202, May 2002.
[14] A. Dey and G. Abowd. The context toolkit: Aiding the de-
In Proceedings
velopment of context-aware applications.
of the Workshop on Software Engineering for Wearable and
Pervasive Computing, Limerick, Ireland, June 2000.
[15] G. Eisenhauer, F. E. Bustamante, and K. Schwan. Event
services in high performance systems. Cluster Computing:
The Journal of Networks, Software Tools, and Applications,
4(3):243–252, July 2001.
[16] G. Eisenhauer, F. E. Bustamante, and K. Schwan. Native
data representation: An efﬁcient wire format for high per-
formance computing.
IEEE Transactions on Parallel and
Distributed Systems, 13(12), December 2002.
[17] G. Eisenhauer, K. Schwan, and F. Bustamante. Event ser-
vices for high performance computing.
In Proceedings
of High Performance Distributed Computing 2000 (HPDC
2000), 2000.
[18] A. Ferrari, F. Knabe, M. Humphrey, S. Chapin, and
A. Grimshaw. A ﬂexible security system for metacomputing
environments. Technical Report CS-98-36, Department of
Computer Science, University of Virginia, Charlottesville,
Virginia 22093, USA, December 1998.
[19] S. Frolund and J. Koistinen. Quality of service speciﬁcation
in distributed operating systems design.
In Conference on
Object-Oriented Technologies and Systems. USENIX, April
1998.
[20] R. Herttwich. Keynote address at ARCS 2001.
[21] C. Isert and K. Schwan. ACDS: Adapting computational
data streams for high performance.
In Proceedings of In-
ternational Parallel and Distributed Processing Symposium
(IPDPS), May 2000.
[22] C. Kasic and J. Walpole. QoS scalability for streamed media
delivery. Technical Report CSE-99-011, Oregon Graduate
Institute, September 1999.
[23] R. Levin, E. Cohen, F. Pollack, W. Corwin, and W. Wulf.
Policy/mechanism separation in hydra. In Proceedings of the
5th Symposium on Operating Systems Principles, November
1975.
10
[24] J. L´opez and D. O’Hallaron. Evaluation of a resource se-
lection mechanism for complex network services. In Proc.
IEEE International Symposium on High-Performance Dis-
tributed Computing (HPDC10), pages 171–180, San Fran-
cisco, Aug. 2001.
[25] Netegrity. S2ML: The xml standard for describing and shar-
ing security services on the internet. Technical report, 2001.
[26] V. Oleson, K. Schwan, G. Eisenhauer, B. Plale, C. Pu,
and D. Amin. Operational information systems - an exam-
ple from the airline industry.
In Proceedings of the First
Workshop on Industrial Experiences with Systems Software
(WEISS) 2000, 2000.
[27] L. Pearlman, V. Welch,
I. Foster, C. Kesselman, and
S. Tuecke. A community authorization service for group
collaboration.
In Proceedings of the Third International
Workshop on Policies for Distributed Systems and Networks.
IEEE, 2002.
[28] B. Plale, G. Eisenhauer, K. Schwan, J. Heiner, V. Martin,
and J. Vetter. From interactive applications to distributed
laboratories. IEEE Concurrency, 6(2), 1998.
[29] C. Rodrigues, J. Loyall, and R. Schantz. Quality objects
(QuO): Adaptive management and control middleware for
end-to-end QoS.
In OMG’s First Workshop on Real-Time
and Embedded Distributed Object Computing, Falls Church,
Virgina, July 2000.
[30] D. I. Rosu, K. Schwan, S. Yalamanchili, and R. Jha. On
adaptive resource allocation for complex real-time applica-
tions.
In 18th IEEE Real-Time Systems Symposium, San
Francisco, CA, pages 320–329. IEEE, Dec. 1997.
[31] N. Sawant, C. Scharver, J. Leigh, A. Johnson, G. Reinhart,
E. Creel, S. Batchu, S. Bailey, and R. Grossman. The tele-
immersive data explorer: A distributed architecture for col-
laborative interactive visualization of large data-sets. In Pro-
ceedings of the Fourth International Immersive Projection
Technology Workshop, Ames, Iowa, 2000.
[32] Schlumberger Limited. http://www.schlumberger.com.
[33] P. Schneck and K. Schwan. Dynamic allocation of security
resources to client-server applications. In IEEE Workshop
on Dependable and Real-Time E-Commerce Systems, Den-
ver, Colorado, June 1998.
[34] G. Stoker, B. S. White, E. Stackpole, T. Highley, and
M. Humphrey. Toward realizable restricted delegation in
computational grids. In Proceedings of European High Per-
formance Computing and Networking (HPCN) 2001, Ams-
terdam, The Netherlands, June 2001.
[35] R. Strom, G. Banavar, T. Chandra, M. Kaplan, K. Miller,
B. Mukherjee, D. Sturman, and M. Ward. Gryphon: An in-
formation ﬂow based approach to message brokering. In In-
ternational Symposium on Software Reliability Engineering
’98 Fast Abstrac, 1998.
[36] R. West, K. Schwan, I. Tacic, and M. Ahamad. Exploit-
ing temporan and spatial constraints on distributed shared
objects. In Proceedings of the IEEE International Confer-
ence on Distributed Computing Systems, Baltimore, Mary-
land, May 1997. IEEE.
[37] D. Zhou, K. Schwan, G. Eisenhauer, and Y. Chen. Jecho
- interactive high performance computing with java event
channels. In Proceedings of the 2001 International Parallel
and Distributed Processing Symposium, April 2001.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:41:19 UTC from IEEE Xplore.  Restrictions apply.