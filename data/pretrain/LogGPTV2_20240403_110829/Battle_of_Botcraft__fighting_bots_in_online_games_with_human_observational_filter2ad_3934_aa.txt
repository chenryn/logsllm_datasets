title:Battle of Botcraft: fighting bots in online games with human observational
proofs
author:Steven Gianvecchio and
Zhenyu Wu and
Mengjun Xie and
Haining Wang
Battle of Botcraft: Fighting Bots in Online Games with
Human Observational Proofs
Steven Gianvecchio, Zhenyu Wu, Mengjun Xie, and Haining Wang
Department of Computer Science
The College of William and Mary
Williamsburg, VA 23187, USA
{srgian, adamwu, mjxie, hnw}@cs.wm.edu
ABSTRACT
The abuse of online games by automated programs, known
as game bots, for gaining unfair advantages has plagued mil-
lions of participating players with escalating severity in re-
cent years. The current methods for distinguishing bots and
humans are based on human interactive proofs (HIPs), such
as CAPTCHAs. However, HIP-based approaches have in-
herent drawbacks. In particular, they are too obtrusive to
be tolerated by human players in a gaming context. In this
paper, we propose a non-interactive approach based on hu-
man observational proofs (HOPs) for continuous game bot
detection. HOPs diﬀerentiate bots from human players by
passively monitoring input actions that are diﬃcult for cur-
rent bots to perform in a human-like manner. We collect a
series of user-input traces in one of the most popular online
games, World of Warcraft. Based on the traces, we char-
acterize the game playing behaviors of bots and humans.
Then, we develop a HOP-based game bot defense system
that analyzes user-input actions with a cascade-correlation
neural network to distinguish bots from humans. The HOP
system is eﬀective in capturing current game bots, which
raises the bar against game exploits and forces a determined
adversary to build more complicated game bots for detection
evasion in the future.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
Security and Protection
General Terms: Security
Keywords: Game Bots, Human Observational Proofs
1.
INTRODUCTION
The online gaming market has experienced rapid growth
for the past few years.
In 2008, online gaming revenues
were estimated at $7.6 billion world-wide [30]. The most
proﬁtable online games are subscription-based massive mul-
tiplayer online games (MMOGs), such as World of War-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’09, November 9–13, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-352-5/09/11 ...$10.00.
craft. In 2008, World of Warcraft reached 11.5 million sub-
scribers [7]. Each subscriber has to pay as much as $15 per
month. It is no surprise that MMOGs make up about half of
online gaming revenues [30]. As MMOGs gain in economic
and social importance, it has become imperative to shield
MMOGs from malicious exploits for the beneﬁt of on-line
game companies and players.
Currently the most common form of malicious exploit and
the most diﬃcult to thwart, is the use of game bots to gain
unfair advantages. Game bots have plagued most of the pop-
ular MMOGs, including World of Warcraft [29,39,41,44,54],
Second Life [37], and Ultima Online [18, 46], and some non-
MMOGs such as Diablo 2 [14]. The primary goal of game
bots is to amass game currency, items, and experience. In-
terestingly, game currency can be traded for real currency1,
making cheating a proﬁtable enterprise. Since MMOGs are
small economies, a large inﬂux of game currency causes
hyper-inﬂation, hurting all players. Thus, the use of game
bots is a serious problem for not only giving some play-
ers unfair advantages but also for creating large imbalances
in game economies as a whole. With a large investment
in development costs, game service providers consider anti-
cheating mechanisms a high priority.
The existing methods for combating bots are not success-
ful in the protection of on-line games. The approaches based
on human interactive proofs (HIPs), such as CAPTCHAs,
are the most commonly used to distinguish bots from hu-
mans. However, the inherent interactive requirement makes
HIP-based approaches inadequate to apply in MMOGs. In
particular, multiple tests are needed throughout a game ses-
sion to block the login of bots; otherwise, a malicious player
can pass the one-time test and log a bot into the game. Al-
though multiple tests can foil the malicious player’s attempt
for bot login, they are too obtrusive and distractive for a reg-
ular player to tolerate as well. A diﬀerent approach, taken
by some game companies, makes use of a process monitor to
scan for known bot or cheat programs running on a player’s
computer. Blizzard, the makers of World of Warcraft, de-
veloped such a system called the Warden that scans pro-
cesses and sends information back to their servers. A num-
ber of similar anti-cheat systems have been built for other
games [16,17,38,49]. However, this scan-based approach has
proven ineﬀective, and even worse, raises privacy concerns.
The Electronic Frontier Foundation views the Warden as
spyware [28]. Besides technical approaches, Blizzard has
pursued legal action against bot makers [3], claiming over $1
1The exchange rate for World of Warcraft is 1,000 gold to
$11.70 as of July 25th, 2009 [48].
256million per year in additional operating costs caused by game
bots in their lawsuit [6]. Moreover, Blizzard has banned
thousands of accounts for cheating [8], yet many players con-
tinue cheating via bots and slip through the cracks [39, 41].
In this paper, we introduce an approach based on human
observational proofs (HOPs) to capture game bots. HOPs
oﬀer two distinct advantages over HIPs. First, HOPs pro-
vide continuous monitoring throughout a session. Second,
HOPs are non-interactive, i.e., no test is presented to a
player, making HOPs completely non-obtrusive. The use of
HOPs is mainly motivated by the problems faced by HIPs
and methods used in behavioral biometric systems [1,20,40,
43]. Similar behavior-based approaches have been used in
many previous intrusion detection systems [21,23,26,42,51].
We collect a series of user-input measurements from a pop-
ular MMOG, World of Warcraft, to study the behaviors of
current game bots and humans. While human players visu-
ally recognize objects on the screen and physically control
the mouse and keyboard, game bots synthetically generate
mouse and keyboard events and cannot directly recognize
most objects. Our measurement results clearly show the
fundamental diﬀerences between current game bots and hu-
mans in how certain tasks are performed in the game. Pas-
sively observing these diﬀerences, HOPs provide an eﬀective
way to detect current game bots.
Based on HOPs, we design and develop a game bot defense
system that analyzes user-input data to diﬀerentiate game
bots from human players in a timely manner. The proposed
HOP system consists of two major components: a client-
side exporter and a server-side analyzer. The exporter is
responsible for sending a stream of user-input actions to the
server. The analyzer then processes the user-input stream
and decides whether the client is operated by a bot or a
human. The core of the analyzer is a cascade neural net-
work that “learns” the behaviors of normal human players,
as neural networks are known to perform well with user-
input data [1,35,36]. Note that the latest MMOGs virtually
all support automatic updates, so the deployment of the
client-side exporter is not an issue. Moreover, the overhead
at the client side is negligible and the overhead at the server
side is small and aﬀordable in terms of CPU and memory
consumptions even with thousands of players per server. To
validate the eﬃcacy of our defense system, we conduct ex-
periments based on user-input traces of bots and humans.
The HOP system is able to capture 99.80% of current game
bots for World of Warcraft within 39.60 seconds on average.
It is an arms race between game exploits and their coun-
termeasures. Once highly motivated bot developers know
the HOP approach, it is possible for them to create more
advanced game bots to evade the HOP system. However,
the purpose of the HOP system is to raise the bar against
game exploits and force a determined bot developer to spend
signiﬁcant time and eﬀort in building next-generation game
bots for detection evasion. Note that, to operate the game
in a human-like manner, game bots have to process com-
plex visuals and model diﬀerent aspects of human-computer
interaction and behavior, which we believe is non-trivial to
succeed.
The remainder of the paper is organized as follows. Sec-
tion 2 describes the background of game bots and game
playing behaviors. Section 3 presents the measurements
and analyses of game playing inputs from human players
and game bots, respectively. Section 4 details the proposed
HOP system. Section 5 evaluates the eﬀectiveness of our
HOP system for detecting game bots. Section 6 discusses
the limitations of this work. Section 7 surveys related work.
Section 8 concludes the paper.
2. BACKGROUND
In this section, we ﬁrst brieﬂy present the evolution of
game bots. Then, we describe the game playing behaviors
of human players and game bots, respectively, and highlight
their diﬀerences in a qualitative way.
2.1 Game Bots
A variety of exploits have appeared in the virtual game
world for fun, for win, and for proﬁt. Among these game ex-
ploits, game bots are regarded as the most commonly-used
and diﬃcult-to-handle exploit. The earliest game bots were
developed for the ﬁrst generation MMOGs such as Ultima
Online [46]. Even at that time, bot operators were already
quite sophisticated, creating small server farms to run their
bots [18,46]. At the early era of game bots, most of bot pro-
grammers wrote their own game clients. However, as a coun-
termeasure, game companies often update games, breaking
operations of those custom game clients. Bot programmers
were forced to update their game clients, keeping up with
the latest game version. This cycle proves to be very te-
dious for game bot programmers. Moreover, the complexity
of game clients has grown continuously, making it increas-
ingly diﬃcult to develop and maintain a standalone custom
game client.
The arms race between game vendor and bot developer
has led to the birth of an interesting type of game bots that,
much like humans, play games by reading from screen and
using the mouse and keyboard. These advanced bots oper-
ate the standard game client by simply sending mouse and
keyboard events, reading certain pixels from the screen, and
possibly reading a few key regions in the memory address
space of the game application. Most bots are equipped with
macro scripting capabilities, similar to programs like Au-
toIt [4], which enables bots to be easily reprogrammed and
quickly adapted to the changes made by game companies.
2.2 Game Playing Behaviors
MMOGs, such as World of Warcraft, entertain players
by providing a large degree of freedom in terms of actions
a player can perform.
In the game world, a player con-
trols a virtual character (avatar) to explore the landscape,
ﬁght monsters, complete quests and interact with other play-
ers. In addition, a player can further customize the charac-
ter by learning skills and purchasing items (such as armor,
weapons, and even pets) with virtual currency. Each game
activity requires a player to interact with the game in a dif-
ferent fashion. As a result, it is expected that the inputs of
a human player will exhibit burstiness with strong locality
and the input contents vary signiﬁcantly for diﬀerent tasks
through game play. However, when a bot is used to play the
game, its main purpose is to gain rewards (level and virtual
currency) without human intervention by automating and
repeating simple actions (such as killing monsters). Being
much less sophisticated than human, bot actions would show
regular patterns and limited varieties.
Besides the high-level behavioral diﬀerences, humans and
bots also interact with the game very diﬀerently, despite
that both interact with the game via mouse and keyboard.
257As biological entities, humans perceive the graphical output
of the game optically, and feed input to the game by phys-
ically operating devices such as keyboard and mouse.
In
contrast, bots are computer programs that have no concept
of vision and are not bounded by mechanical physics. While
bots can analyze game graphics, it is computationally ex-
pensive. To avoid this computation cost, whenever possible,
bots attempt to obtain necessary information, such as the
locations of the avatar, monsters and other characters, and
the properties (health, level, etc.) of the avatar, by reading
the memory of the game program.
In general, bots control the avatar by simulating input
from devices via OS API calls, such as setting key press
state or repositioning mouse cursor. The techniques used
by bots are often crude, but in most cases, quite eﬀective.
For example, without reading the graphics or scanning the
terrain, a bot can navigate to a target location by knowing
just two coordinates—the current location of the avatar and
that of the target. The bot then tries to approach the target
location by steering the avatar to go forward, left and right,
and then checks its progress by polling the two coordinates.
If the avatar location does not change in a given amount of
time, the bot assumes that an obstacle (trees, fences, steep
terrain, etc.) is in the way and tries to navigate around it
by moving backward a few steps, turning left or right, and
going forward. Occasionally, graphics analysis can be useful,
such as when picking up items on the ground. The bot can
again handle this situation in a simple and eﬃcient manner
by exploiting the game user interface. When the cursor is
placed on top of an object, the game would display a small
information window on the lower-right corner. Thus, the
bot moves the mouse cursor in grid patterns, and relies on
the change of pixel colors on the lower-right corner of the
screen to know if it has found the object.
3. GAME PLAYING CHARACTERIZATION
In this section, we examine how bots and humans behave
in the game, in order to have a deep understanding of the dif-
ferences between humans and bots. Based on our game mea-
surements, we quantitatively characterize the game playing
behaviors of human players and bots, respectively. The be-
havioral diﬀerences between bots and humans form the basis
for our HOP-based system.
3.1 The Glider Bot
We select the Glider bot [29] as the sample game bot for
our research. The Glider bot is a very popular game bot
for World of Warcraft. It runs concurrently with the game
client, but requires system administrator privileges. This es-
calated privilege helps the Glider bot to circumvent the War-
den anti-bot system, and enables it to access the internal in-
formation of the game client via cross-process-address-space
reading. It operates by using a “proﬁle”—a set of conﬁgu-
rations including several waypoints (map coordinates in the
game world) and options, such as levels of monsters to ﬁght.
When in operation, the game bot controls the avatar to re-
peatedly run between the given waypoints, search and ﬁght
monsters that match the given criteria, and collect bonus
items after winning ﬁghts.
3.2 Input Data Collection
We collect player input data for both human and bot us-
ing an external program in a non-intrusive manner, i.e., no
Table 1: Deﬁnitions of User-Input Actions
Action
Keystroke
Point
Pause
Click
Point-and-Click
Drag-and-Drop
Deﬁnition
The press and release of a key.
A series of continuous mouse
cursor position changes with no
mouse button pressed; the time-
stamps for each pair of cursor
position changes are no more
than 0.4 seconds apart.
A period of 0.4 seconds or longer
with no actions.
The press and release of a mouse
button; the cursor travels no more
than 10 pixels between the press
and release.
A point followed by a click within
0.4 seconds.
The press and release of a mouse
button; the cursor travels more
than 10 pixels between the press
and release.
modiﬁcation to the game client program. The input data
collection program, a modiﬁed version of RUI [27], runs con-
currently with the game, polling and recording the keyboard
and mouse input device status with clock resolution close
to 0.015625 second (approximate 64 times/sec). Each in-
put event, such as key press or cursor position change, is
recorded along with a time stamp relative to the starting
time of the recording.
We invite 30 diﬀerent human players to play World of
Warcraft and collect 55 hours of their user-input traces.
The players are a group of 25 men and 5 women with diﬀer-
ent ages and diﬀerent levels of gaming experience. The play-
ers are mostly college-aged, i.e., undergraduate and gradu-
ate students, with 9 players from 18-24 years of age, 17 from
25-34, 3 from 35-44, and 1 over 45. The players’ levels of
computer gaming experience (described as “regular play”)
are 6 players with none, 2 with less than 1 year, 6 with 2
to 5 years, 7 with 5 to 10 years, and 9 with more than 10
years.
While the players are allowed to play from their home
computers, most players, 27 out of 30, play in the lab. The
players are free to select their characters (existing or new)
and their characters’ classes, items, skills, and so on. The
players are encouraged to farm, i.e., kill monsters and gather
treasures, but some instead explore or do quests. Most play-
ers, 20 out of 30, play as tank or physical-damage classes,
e.g., warrior, rogue, and hunter, while a few players, 10 out
of 30, play as magic-damage or healing classes, e.g., mage,
warlock, druid, and priest. The human characters range
from level 1 to mid-30s in the traces, with most characters,
23 out of 30, under level 10. The few higher level characters,
7 out of 10, in the 20s and 30s are existing characters and
not new ones starting from level 1.
Correspondingly, we run the game bot with 10 diﬀerent
proﬁles in 7 locations in the game world for 40 hours and col-
lect its input traces. The 10 proﬁles are bot conﬁgurations
with diﬀerent sets of waypoints that the bot follows while
farming, i.e., killing monsters and gathering treasure. The
proﬁles are setup in 7 locations with diﬀerent monster levels
(from levels 1 to 40), monster densities (sparse to dense),
258 0.18
 0.16
 0.14
 0.12
 0.1
 0.08
 0.06
 0.04
 0.02
n
o
i
t
r
o
p
o
r
P
 0
 0
 0.3
 0.25
 0.2
 0.15
 0.1
 0.05
n
o
i
t
r
o