    /*重新获取idx*/
    "mov -0x4(%rbp),%eax\n"
    "cdqe\n"    
    /* ptr = NULL,段寄存器不能传立即数*/
    "mov $0x0,%ecx\n"
    "mov %ecx,0x6020e0(,%rax,8)\n" /*ds:note[idx]*/
#### 4.1 使用lief
lief可以将一个bianry内的机器代码写进另外一个binary中，在patch中通常表现为：
  1. 增加一个段(对原binary的大小将变化很大)
  2. 修改题目bianry中原来的其他段的内容，通常是eh_frame，
对函数内容逻辑的修改（hook）可以通过：
  1. 对call 函数的hook。
  2. 使用jmp跳转方式实现逻辑的添加。
对整个函数进行hook修改要实现内部大部分的原来的逻辑，像要对该fast_bin的patch，要在free()后增加一句置0的操作，采用call进行hook就要重新实现delete_note的逻辑，并增加置零的语句；而通过jmp方式只需在某处跳转到如写入.eh_frame段中代码，只需增加少部分代码即可实现，但对于call的hook在patch
off-by-one漏洞就可以在hook整个函数的时候，修改传入的size大小，再次调用原来的函数，也可以是少量的代码。
##### 4.1.1 Add segment
**编写hook函数：**
首先要编写我们的hook函数，通常是手写汇编代码，指令格式为A&T指令格式，静态编译为一个位置无关代码二进制文件：
  * 位置无关代码：-fPIC
  * 不是用外部的库如libc.so：-nostdlib -nodefaultlibs
组合起来的编译gcc命令：
    gcc -nostdlib -nodefaultlibs -fPIC -Wl,-shared hook.c -o hook
其中hook.c是我们自己手写的A&T指令格式的汇编代码文件
    void my_delete_note(){
        asm(
            "sub $0x10,%rsp\n"
            "mov $0x400c87,%edi\n"
            "mov $0x0,%eax\n"
            /*call printf*/
            "nop\n"
            "nop\n"
            "nop\n"
            "nop\n"
            "nop\n"
            "mov $0x0,%eax\n"
            /*call read_int*/
            "nop\n"
            "nop\n"
            "nop\n"
            "nop\n"
            "nop\n"
            /* save idx to [rbp-4]*/
            "mov %eax,-0x4(%rbp)\n"
            /* load idx from [rbp-4]*/
            "mov -0x4(%rbp),%eax\n"
            "cdqe\n"
            /* load ptr from ds:note[rax*8]*/
            "mov 0x6020e0(,%rax,8),%rax\n"
            "test %rax,%rax\n"
            /*jmp short print nosuchnote*/
            /* 0x2d2-2 此处偏移量可以通过 objdump -d hook可以查看到*/
            "nop\n"
            "nop\n"
            /*end jmp*/
            "mov -0x4(%rbp),%eax\n"
            "cdqe\n"
            "mov 0x6020e0(,%rax,8),%rdi\n"
            /*call free*/
            "nop\n"
            "nop\n"
            "nop\n"
            "nop\n"
            "nop\n"
            /* call后rax发生变化，重新load idx */
            "mov -0x4(%rbp),%eax\n"
            "cdqe\n"
            /* ptr = NULL,段寄存器不能传立即数，此处为 note[idx] = 0的汇编*/
            "mov $0x0,%ecx\n"
            "mov %ecx,0x6020e0(,%rax,8)\n"
            /*end*/
            /*jmp end delete_func*/
            /* 0x2dc-2*/
            "nop\n"
            "nop\n"
            /*print nosuchnote*/
            "mov $0x400C8E,%edi\n"
            "nop\n"
            "nop\n"
            "nop\n"
            "nop\n"
            "nop\n"
            /*end delete_func*/
            //有函数的调用要自己处理栈平衡
            "add $0x10,%rsp\n"
        );
    }
关于A&T指令格式的hook代码文件的编写注意点
  1. 对于把hook的函数作为一个新段添加到题目bianary中，写成一个函数的形式，asm()里面控制栈平衡。
  2. 对于要发生指令跳转，函数调用的地方，如此处的jmp xx,call free等，因为没有能够确定目标的地址，先用nop进行占位，因为对于call func的机器指令长度我们是可以知道的（通常是5 bytes E8 xx xx xx xx）且函数调用的地址计算采用相对地址寻址的补码形式，而对于jmp，存在近跳转、短跳转、远跳转的区别，指令的长度也不一样。[详细](https://blog.csdn.net/YSBJ123/article/details/51645831)
  3. 对于A&T指令格式，常用的是mov指令格式和寻址方式，如此处对于mov ds:note[rax*8],rax:
    * 转为A&T指令：mov %rax, 0xxxxxx(,%rax,8) / _ds:note 可以在binary中找到_ /
    * 对于段寻址：不能直接数传给段寄存器
更多关于A&T指令格式注意点在用到去查阅。
**对binary进行patch:**
    import lief
    from pwn import *
    def patch_jmp(file,op,srcaddr,dstaddr,arch="amd64"):
        length = (dstaddr-srcaddr-2) # 近掉跳转的patch
        print hex(length)
        order = chr(op)+chr(length)
        print disasm(order,arch=arch)
        file.patch_address(srcaddr,[ord(i) for i in order]) # 对指定地址写入代码
    def patch_call(file,srcaddr,dstaddr,arch="amd64"):
        length = p32((dstaddr-srcaddr-5)&0xffffffff)
        order = "\xe8"+length
        print disasm(order,arch=arch)
        file.patch_address(srcaddr,[ord(i) for i in order])
    # add hook's patched func to binary as a new segment
    binary = lief.parse("./vul")
    hook = lief.parse("./hook")
    print hook.get_section(".text").content
    print hook.segments[0].content
    segment_added = binary.add(hook.segments[0])
    hook_fun = hook.get_symbol("my_delete_note")
    print hex(segment_added.virtual_address)
    print hex(hook_fun.value)
    # hook call delete_note
    dstaddr = segment_added.virtual_address + hook_fun.value
    srcaddr = 0x400B9A
    patch_call(binary,srcaddr,dstaddr)
    # patch print_inputidx
    dstaddr = 0x400760
    srcaddr = segment_added.virtual_address + 0x2f2 # 该数字为hook函数中nop填充的偏移量
    patch_call(binary,srcaddr,dstaddr)
    # patch call read_int
    dstaddr = 0x4008d6
    srcaddr = segment_added.virtual_address +0x2fc
    patch_call(binary,srcaddr,dstaddr)
    # patch call free
    dstaddr = 0x400710
    srcaddr = segment_added.virtual_address + 0x323
    patch_call(binary,srcaddr,dstaddr)
    # patch call puts
    dstaddr = 0x400740
    srcaddr = segment_added.virtual_address + 0x340
    patch_call(binary,srcaddr,dstaddr)
    # patch jz printnosuchnote short jmp
    dstaddr = segment_added.virtual_address+0x33b
    srcaddr = segment_added.virtual_address+0x314
    patch_jmp(binary,0x74,srcaddr,dstaddr)
    # patch jmp end_func
    srcaddr = segment_added.virtual_address + 0x339
    dstaddr = segment_added.virtual_address + 0x345
    patch_jmp(binary,0xeb,srcaddr,dstaddr)
    binary.write("patch_add_segment")
从上面从编写hook函数到指令地址修改，对整个delete_note函数实现的工作量是相对比较大：
可以看到vul程序从原来调用delete_note的函数到调用一个新段的函数sub_8032E0
而sub_8032E0的实现逻辑
添加了对指针noet[idx] = 0（free 后指针置0）的操作，修补了fast_bin attack：
可以看到通过增加段的操作原binary大小增加了很多  
##### 4.1.2 modify .eh_frame
​
在4.1.1中通过增加段的形式插入自己实现的hook函数my_delete_note，添加对free(note[idx])的指针置0操作，可以看见对原程序的大小增加很大，某些比赛可能不能过check,此处通过把hook函数写入原binary的.eh_frame段中，即可在不增加程序大小的前提下实现对原delete_note函数进行hook修改，增加指针置零操作。
###### 4.1.2.1 call 函数hook
**编写函数**
    asm(
        "push %rbp\n"
        "mov %rsp,%rbp\n"
        "sub $0x10,%rsp\n"
        "mov $0x400c87,%edi\n"
        "mov $0x0,%eax\n"
        /*call printf*/
        "nop\n"
        "nop\n"
        "nop\n"
        "nop\n"
        "nop\n"
        "mov $0x0,%eax\n"
        /*call read_int*/
        "nop\n"
        "nop\n"
        "nop\n"
        "nop\n"
        "nop\n"
        /* save idx to [rbp-4]*/
        "mov %eax,-0x4(%rbp)\n"
        /* load idx from [rbp-4]*/
        "mov -0x4(%rbp),%eax\n"
        "cdqe\n"
        /* load ptr from ds:note[rax*8]*/
        "mov 0x6020e0(,%rax,8),%rax\n"
        "test %rax,%rax\n"
        /*jmp short print nosuchnote*/
        /* 0x2d2-0x2ad-2 */
        "nop\n"
        "nop\n"
        /*end jmp*/
        "mov -0x4(%rbp),%eax\n"
        "cdqe\n"
        "mov 0x6020e0(,%rax,8),%rdi\n"
        /*call free*/
        "nop\n"
        "nop\n"
        "nop\n"
        "nop\n"
        "nop\n"
        //在函数调换之后所有寄存器可能已经改变（程序流程不可靠，所以要重新计算）
        "mov -0x4(%rbp),%eax\n"
        "cdqe\n"    
        /* ptr = NULL,段寄存器不能传立即数*/
        "mov $0x0,%ecx\n"
        "mov %ecx,0x6020e0(,%rax,8)\n"