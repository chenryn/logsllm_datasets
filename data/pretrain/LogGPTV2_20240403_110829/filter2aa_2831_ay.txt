# DCOM Errors and Troubleshooting

This section delves into the common issues encountered when working with DCOM (Distributed Component Object Model) across a network. I will outline some of the strategies I have found effective in diagnosing and resolving these problems.

## Background
My company deploys a product that uses DCOM to connect a graphical user interface (GUI) and a server. We have installed this product at several thousand sites, each with a wide variety of network configurations. This diversity often leads to significant time spent debugging remote connections. While the software itself is very stable, network configurations can be unpredictable. My experience with DCOM has been extensive, particularly in troubleshooting challenging installations.

### Common Issues
When using DCOM over a network, you are likely to encounter numerous problems. The more diverse the network configurations, the more issues you will face. Debugging network issues often requires a blend of technical expertise and practical problem-solving skills. Access to a competent network administrator is invaluable, but in many cases, the programmer must resolve these issues independently.

## Troubleshooting Steps

### 1. Get It Working Locally
The first step in debugging DCOM issues is to ensure that the client and server components work locally. Install both components on the same machine and test the communication. If the components do not work locally, they will not work over a network. Even if you developed and tested the application on a single computer, it is crucial to verify it on the server system as well. Successfully getting the system to work locally eliminates most common programming errors. However, there are still aspects like security and remote activation that can only be tested across the network. Specify your local computer in the `COSERVERINFO` structure to exercise some of the network-related code.

### 2. Be Sure You Can Connect
Before attempting to install your program, debug the network configuration using available tools. Start by checking the network neighborhood and ensuring you can browse the remote computer. Although browsing failure does not necessarily mean DCOM will not work, it is a good starting point for connection checks. Verify the connection in both directions.

#### Useful Tools
- **PING**: This tool sends a series of network packets to the server and waits for a response. Most installations support PING.
  ```sh
  C:\>ping www.ustreas.gov
  Pinging www.treas.gov [207.25.144.19] with 32 bytes of data:
  Reply from 207.25.144.19: bytes=32 time=209ms TTL=247
  Reply from 207.25.144.19: bytes=32 time=779ms TTL=247
  Request timed out.
  Reply from 207.25.144.19: bytes=32 time=852ms TTL=247
  Ping statistics for 207.25.144.19:
      Packets: Sent = 4, Received = 3, Lost = 1 (25% loss),
  Approximate round trip times in milli-seconds:
      Minimum = 209ms, Maximum = 852ms, Average = 460ms
  ```
  PING resolves the name of the remote computer and converts it into a TCP/IP address. Test PING from both directions, especially if you are using callbacks or connection points, which require bidirectional COM functionality.

- **TRACERT**: This utility provides information about the route taken by network packets.
  ```sh
  C:\>tracert www.ustreas.gov
  Tracing route to www.treas.gov [207.25.144.19]
  over a maximum of 30 hops:
    1   181 ms   180 ms   169 ms  ct1.intercenter.net [207.211.129.2]
    2   188 ms   188 ms   170 ms  ts-gw1.intercenter.net [207.211.129.1]
    3   176 ms   187 ms   190 ms  ilan-gw1.intercenter.net [207.211.128.1]
    4   547 ms   505 ms   756 ms  core01.rtr.INTERPATH.NET [199.72.1.101]
    5   516 ms   323 ms   338 ms  tysons-h2-0.rtr.INTERPATH.NET [199.72.250.26]
    6   184 ms   708 ms   216 ms  mae-east2.ANS.NET [192.41.177.141]
    7   576 ms   981 ms   423 ms  h12-1.t60-8.Reston.t3.ANS.NET [140.223.61.25]
    8   419 ms   804 ms   570 ms  f5-0.c60-14.Reston.t3.ANS.NET [140.223.60.210]
    9   314 ms   641 ms   621 ms  www.treas.gov [207.25.144.19]
  Trace complete.
  ```
  TRACERT can help identify any unexpected routes or potential blockages such as gateways, routers, proxies, and firewalls.

### 3. Try Using a TCP/IP Address
Name resolution can be a significant issue in remote connections. While most users prefer readable names like `\\RAOUL` and `\\SERVER`, converting these names to network addresses can be complex. A common workaround is to use the TCP/IP address instead, which can eliminate many name resolution problems. You can easily include a TCP/IP address in the `COSERVERINFO` structure.

### 4. Windows 95/98 Systems
If your server is running on Windows 95/98, you must manually start it before connecting from a remote computer. This limitation is due to the limited authentication capabilities of these operating systems. Windows NT, on the other hand, can validate remote users and launch servers safely, though it may also reject legitimate users due to setup issues.

### 5. Security
Once the physical network connections are working, you need to navigate through multiple layers of security, especially on Windows NT, which has a rich and complex security layer. 

#### Tools
- **DCOMCNFG**: This tool allows easy access to most security settings and is your first line of defense.
- **Event Viewer**: On NT, it logs security messages, which can be useful for diagnosing unhelpful security error messages.

### 6. Using the OLE/COM Object Viewer (OLEVIEW)
This utility, also known as OLEVIEW, is useful for diagnosing registration issues. It was originally developed for viewing OLE interfaces but works for all COM interfaces. OLEVIEW provides a view of the registry and type libraries and can run servers and interrogate type libraries for information.

- **Accessing OLEVIEW**: Under newer versions of Developer Studio, OLEVIEW is available under the `TOOLS | OLE/COM Object Viewer` menu.
- **Using OLEVIEW**: 
  - Select the "Object Classes" folder.
  - Inside that folder, select the "Automation Objects" folder and expand it.
  - Search for the "BasicTypes Class" (or another class if the example programs are not built or installed).
  - Double-click the class to see supported interfaces and detailed information about the server and its interfaces.
  - OLEVIEW can activate and connect to the server, making it a useful tool for debugging COM classes.

By following these steps and using the appropriate tools, you can effectively diagnose and resolve DCOM issues in a networked environment.

For additional information and updates, visit: [http://www.iftech.com/dcom](http://www.iftech.com/dcom)