例如，很难从Google收集一些JPEG2000图像，但是你可以从OpenJPEG中获取数百个文件[13]。 下图显示了一些可用的测试套件：  
# 4.fuzzing 技巧
效率是模糊器的重要指标，尤其是在计算资源有限的情况下。 在这里，我总结了两个提高效率的fuzzing 技巧。
## 4.1 编写PDF制作工具
一般而言，PDF文件由纯文本和二进制数据组成。
如果你已经有一个具体的目标，如图像，字体等，那么直接模糊PDF并不是一个好主意。我们可以编写PDF制作工具，这样我们就只会改变我们感兴趣的数据。
有些第三方PDF制造商可以将文件（如图像和字体）转换为PDF文件。 但它不是推荐的解决方案，因为工具中的错误检查功能可能会导致丢失大量错误的测试用例。
在这种情况下，建议阅读标准文档并编写临时PDF制作工具。 PDF文件制作工具的技术细节将不在本文中讨论，因为它不是一项艰巨的任务。
## 4.2 Fuzz 第三方库
大型软件使用开源库并不奇怪。 尝试模糊第三方库来揭示安全漏洞是值得的。 以下显示了模糊第三方库的优点：
  * 使用AFL或libFuzzer的Fuzz开源库效率更高
  * 目标软件可能受已知漏洞的影响
  * 零日漏洞影响使用该库的所有目标软件
下图显示了Adobe Acrobat and Reader使用的一些开源项目：  
去年，我在libtiff的PixarLogDecode函数中发现了一个Out-of-Bounds写漏洞，并向Chromium报告。
这些帖子表明谷歌[14]的Mathias Svensson和思科Talos的Tyler Bohan [15]也发现了这个漏洞。
此漏洞的CVE标识符为CVE2016-5875。  
下面显示受此漏洞影响的PDF阅读器：  
对于Adobe Acrobat and Reader，渲染引擎未受影响，因为未在AcroForm.api中配置PixarLog压缩支持。
对于谷歌浏览器，启用了XFA的Canary，Dev和Beta版本受到影响（很快就会在Chrome
Canary，Dev和Beta版本中启用XFA，很快就会停用）。 对于Foxit Reader，渲染引擎和ConvertToPDF插件都受到了影响。
## 4.3 编写包装器
PDF阅读器或Web浏览器是大型软件，创建这些产品的实例非常耗时，尤其是在模糊测试过程中反复创建实例。
为避免加载不必要的模块并初始化不必要的数据，编写包装器是一个不错的选择。  
对于开源项目，编写包装器非常容易。 对于提供API的产品，例如Foxit Reader和Windows PDF Library，编写包装器也不难。
但对于不符合上述条件的产品，我们可能需要进行一些逆向工程来编写包装器。  
Windows.Data.PDF.dll负责在Edge浏览器中呈现PDF，并且自Windows 8.1起在操作系统中提供。
可以通过Windows运行时API进行交互。 文章[16]展示了如何使用C ++编写用于呈现PDF的包装器。
# 5.结果
该研究始于2015年12月。它主要关注Adobe Acrobat and Reader，并且在这个产品中发现了大多数漏洞。
但是，这并不意味着这个产品比其他PDF阅读器更容易受到攻击。
在去年，122个漏洞已被供应商修补并分配了CVE编号。应该注意的是，如果漏洞满足以下条件之一，则将被排除在外：
  * 不影响稳定版PDF阅读器的漏洞
  * 供应商尚未解决的漏洞
  * 其他研究人员报告的漏洞
下图显示了按供应商排序的漏洞分布：  
下图显示了按攻击面排序的漏洞分布：  
再一次，应该注意的是，本文中的漏洞数据仅供参考，并不意味着哪个产品比其他产品更容易受到攻击。
# 6.参考文献
[1]. Document management - Portable document format - Part 1: PDF 1.7,
[2]. Dumb fuzzing XSLT engines in a smart way,
[3]. Abusing Adobe Reader’s JavaScript APIs,  
[4]. Abusing the Reader’s embedded XFA engine for reliable Exploitation,  
[5]. ISO 32000-1:2008,   
[6]. JavaScript for Acrobat API Reference,  
[7]. XML Forms Architecture (XFA) Specification,
[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.364.2157&rep=rep1&type=pdf](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.364.2157&rep=rep1&type=pdf)  
[8]. FormCalc User Reference,
[9]. Zero Day Initiative’s published advisories,
[10]. Chromium issue tracker,  
[https://bugs.chromium.org/p/chromium/issues/list?can=1&q=Type=%22Bug-Security%22](https://bugs.chromium.org/p/chromium/issues/list?can=1&q=Type=%22Bug-Security%22)  
[11]. Adobe Security Bulletins and Advisories,
[12]. Official fuzzers for PDFium,
[13]. OpenJPEG data,   
[14]. Seclists,   
[15]. LibTIFF Issues Lead To Code Execution,
[16]. Using WinRT API to render PDF,