### 优化后的文本

#### 表10: S3与Z3-str的比较

为了展示S3的优越性，我们首先使用了Kaluza SAT基准测试中的六个测试用例。我们遵循Z3-str [39] 的设置，并移除了所有与正则表达式相关的约束，以便能够运行Z3-str。这六个基准测试的结果如表10的第一部分所示。对于每个测试用例，S3返回YES并提供一个解模型，而Z3-str则返回NO。我们通过使用Z3-str本身验证了S3提供的模型是正确的。

接下来，我们将简要讨论造成这种差异的原因。其中一个原因是Z3-str无法获取长度变量的具体值。相比之下，我们在第4.2节中介绍的设计使得字符串求解器插件Z3-str-(cid:63)和Z3核心之间可以直接交互，以查询某些字符串变量的长度是否已经在算术理论中被推导或约束。这有助于Z3-str-(cid:63)避免重复的案例分析。

具体来说，表10中使用的六个测试用例具有以下常见模式：存在至少一个仅由其长度约束的变量。例如，约束`length(x)=i`意味着x可以是任何长度为i的字符串，即“@..@”，其中每个@代表任意字符。然而，Z3-str无法利用这一长度约束，而是不断尝试为x分配字符串值，从空字符串开始。由于x受其长度约束，Z3-str必须多次尝试直到没有冲突为止。因此，Z3-str需要测试的值数量会急剧增加，导致它无法找到解。

接下来，我们考虑另一组基准测试，代表另一种常见模式（在Kaluza的基准测试中也很常见）：不同字符串变量的长度之间存在关系。图4中的示例就体现了这种模式。表10的第二部分展示了四个基准测试的统计数据。我们故意使两个基准测试可满足——名称以'sat'开头，另外两个不可满足——名称以'unsat'开头。在名称以'bnd'结尾的两个基准测试中，字符串变量的长度被限制在10以内，而在其他两个名称以'unbnd'结尾的基准测试中，则没有这样的限制。对于每个可满足的基准测试，Z3-str和S3都能找到正确的解模型。然而，S3的性能显著优于Z3-str，高出一个数量级。对于不可满足的情况，S3在一秒钟内返回NO，而Z3-str运行超过两小时仍未给出答案。

总之，我们的设计允许字符串理论和算术理论之间的完全交互，使S3能够更有效地处理长度约束。即使不考虑S3比Z3-str能解决更多类型的约束这一事实，S3在常见约束类型上的性能也更好。这确保了S3在Web程序中的适用性，因为长度约束在这些程序中非常普遍。

### 相关工作

符号执行近年来已被广泛用于解决各种安全问题。一些显著的例子包括自动指纹生成[7]、协议重放[25]、以及自动化代码转换以消除遗留Web应用程序中的SQL注入攻击[4]。

受到分析JavaScript代码以检测安全漏洞的动机驱动，[28]提出了一种名为Kudzu的框架，该框架结合了具体和符号评估的优势。这项工作将Web应用程序的分析问题简化为解决字符串约束的问题。为了广泛应用，拥有一种能够推理字符串和非字符串约束的字符串求解器非常重要。特别是，求解器还必须支持涉及正则表达式和多个变量的约束。

关于字符串求解的文献非常丰富。在前几节中，我们已经详细介绍了我们的工作与Kaluza和Z3-str的对比。现在，我们将重点放在其他相关的工作上。

实际解决字符串方程的方法大致可分为有界方法和无界方法。有界方法（例如Hampi [22]、CFGAnalyzer [3] 和[18]）通常假设固定长度的字符串变量，然后将其视为普通的约束满足问题（CSP）。这些方法在寻找满足赋值方面非常高效，并且通常可以表达比无界方法更广泛的约束。然而，正如[28]所指出的，要将它们应用于Web应用程序分析中的约束，仍然存在很大的差距。

在Kaluza的精神下，[6]提出了从涉及字符串约束的高级程序中推理符号执行路径的可行性。原则上，这种方法与Kaluza类似：首先枚举具体的长度值，然后将字符串编码为位向量。它支持基本.NET字符串库中的常见整数相关字符串操作，但不支持replace。与Kaluza不同的是，这里不支持正则表达式。类似地，[27]解决了Java PathFinder中的多种类型约束。尽管这种方法可以处理许多操作符，但它对replace的支持有限，要求结果和参数都是具体的。此外，它也不支持正则表达式。总之，上述方法在输入语言的表达能力方面不如S3强大，并且具有与Kaluza类似的局限性。

PISA [33] 是第一个针对Web应用程序静态分析的路径和索引敏感字符串求解器。验证是通过将程序编码为一阶逻辑（M2L）进行的。它支持正则表达式和Java的replace方法。但是，它不支持两个变量之间的二元操作，即PISA要求其中至少一个是常量。此外，由于M2L的限制，它对算术操作的表达能力受限。例如，它不支持数值乘法和除法。

其他无界方法通常基于自动机或正则语言理论。我们将简要提及一些著名的工作。Java字符串分析器（JSA）[10]应用静态分析来建模Java程序的流图，以捕获字符串变量之间的依赖关系。然后派生出一个有限自动机来约束可能的字符串值。[31]使用有限状态机（FSM）在Java程序的符号执行过程中抽象字符串。它们处理java.lang.String类中的几个核心方法和其他相关类的部分方法。它们部分集成了数值约束求解器。例如，返回整数的字符串操作（如indexOf）触发所有可能返回值的案例分割。

简而言之，使用自动机和/或正则语言表示法有可能推理无限字符串和正则表达式。然而，大多数现有方法在处理与整数相关的字符串操作（如length和indexOf）方面存在困难，更不用说本文中涉及的其他高级操作。更重要的是，为了辅助Web应用程序分析，有必要同时推理字符串和非字符串行为。鉴于它们不提供对整数类型约束的原生支持，尚不清楚如何适应这些技术。

由于我们的方法在枚举解决方案时不依赖于长度界限，并且对（可能是无界的）递归操作的特殊处理是惰性的，S3可以处理无界长度变量和无界正则表达式的查询。然而，为了保证终止，我们确实依赖于长度是有界的事实。实际上，我们的工作针对的是来自现实Web应用程序的输入约束。因此，即使在静态分析中长度不是精确已知的情况下，假设输入字符串变量的长度确实有界也是合理的，正如许多现代实用字符串求解器所做的那样。

### 结论

本文提出了一种新的字符串约束求解算法。该类约束在实际应用中具有很强的表达能力，适用于分析操纵字符串输入的Web程序。实验评估表明，尽管我们的求解器S3比其他求解器更具表达能力，但它更加稳健和高效。

我们强调，虽然我们没有展示一个端到端的系统，但我们展示了提出的求解器确实是任何假设的动态符号执行端到端系统的模块化贡献。也就是说，我们求解器的优越性能可以在无需大量工程集成的情况下，用于改进假设系统。

基于其对字符串约束的符号表示，我们认为S3也可以扩展以在静态分析的上下文中更高效，甚至可以符号化构造正则表达式。

敏锐的读者可能已经注意到，我们底层的符号表示远远超出了正则语言。例如，{an·bn | n ≥ 0}可以很容易地表示为star(a, n)·star(b, n)∧n ≥ 0。虽然本文重点在于S3的实际影响，但研究这种符号表示的理论影响是我们未来的工作。

### 参考文献
[此处省略参考文献列表]

希望优化后的文本更加清晰、连贯和专业。如果还有其他需要改进的地方，请告诉我！