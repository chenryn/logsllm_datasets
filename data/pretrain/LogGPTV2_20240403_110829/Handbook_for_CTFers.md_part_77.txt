10.1 PHP Code Auditing
665
public function pathinfo () {
if (ie_nul1($thia->pathinfo)) (
if (isset ($_GEr [Config: =get [*var_pathinfo′)1) {
/ / Deternine if there is a compatibility mode parameter in the URL.
$_SERVER ['PATH_INFO] = S_G&T [Config : :get (′var_pathinfo′)] ;
unset ($_GEr [Config: :get (*var_pathinfo'1 ) ;
elseif (IS_CLI) {
/ / check if the code is called in CLI mode, 1ike php index-php module/
controller/action/parans/. . .
$_SERVER [PATH_INFO*] = isset [S_SERVER. [' argv′] [1] ) ? S_SERVER
['argv'] [1] : *';
if (!1sset ($_SERVER [′PATH_INFo*]11 {
/ / Analyze PATHINFO infozmation
foreach (Config: =get (*pathinfo_fetch′) as Stype) {
if [1empty ($_sERveR [Stype] > {
$_SERVER [PATH_INFo] - (o == stxpos (S_SgRVE [Stype] , \\\
strlen (S_SERVER [*SCRIPr_NAME*1)1 : $_SERVER [Stype] :
$_SERVER [SCRIPT_NAME*]11 ? substr (S_SERVER [Stype] , \\
break;
Sthia->pathinfo = empty ($_SERVER [′PATH_INFo*]) ? */* : 1trim (S_SERVER
[’PATH_INFO′].*/'};
return Sthia->pathinfo;
This function corresponds to the two types of route dispatching mechanism in
ThinkPHP 5, namely compatibility mode and PATHINFO mode. The compatibility
mode is included in the first if branch. The framework can dispatch the request to
corresponding controller by the value in S_GET[Config:get(var_pathinfo')]. The 
value of Config:get(var_pathinfo’) defaults to °s', so the constructed URL is like
index.php?s/home/index/index. While in PATHINFO mode is a valid URL in the
form of index.php/home/index/index/index.
Now let'’s go back to the routeCheck( ) function. (The static route handling
process is omitted for the readers to analyze by themself.) The following part mainly
focused on analysis of the handling of dynamic routes dispatch mechanism, the key
statement is as following:
Sresult = Route : :parseUx1 ($path, Sdepr, Sconfig
['controller_auto_search]1 ;
The parseUrlO function as follows.
---
## Page 678
666
10 Code Auditing
public static functionparseUrl (Sur1, Sdepr = '/ ', $autoSearch = false) {
followed by parametez values. Sueh as /hone/index/index/id/1
/++ The Surl here ls of the fozm /home/index/index, vhich may be
The code for controller binding is omitted here
Sur1 = str_replace ($depr, *|′, Sur1) ;
* * /
list (Spath, Svar) = self :1pazseUz1Path (Sur1) ;
Sroute = [null, nu11, nu11] ;
if (isset (Spath)) {
/ / Parsing for module defined in path
Smodule = Config : =get [* app_multi_module′) ? array_shift ($path) :
if (SautoSearch)(
nu11 ;
/ / Code omitted, because auto-search functions are turned
off by default .
else 
Scontzoller = 1empty (Spath) 7 array_shift (Spath) : nul1 ;
// Parsing for controller defined in path
/ / Parsing for operation defined in path
Saction = lempty ($path) 7 array_shift (Spath) : nu11 ;
// Parsing for additional parameters defined in path
self : :parseUr1Params (empty (Spath) ? ++ : implode (*|′, Spath) ) ;
/ / routing encapsulation
Sroute = [Smodule, Scontroller, Saction] ;
/*+ The static routes process mechanism is omitted. If the access
otherwise it wi11 raise a 404 exception **/ .
route 1s already defined, the defined route shall be returned,
return ['type′ => 'nodule, 'module' => Sroute] ;
The function begins with a self:parseUrIPath(Surl) statement. The correspoing
function declaration is as following.
private static function parseUrlPath (Sur1) 
// Substitute the delimiter inside Surl to ensure the route will use
unified delimiter.
Sur1 = str_zeplace (*I′, */', Sur1) ;
Suzr1 = trim (Sur1, /') ;
if (false ! == strpos (Sur1, *?11 {// [module/controller/
Svar = [1 ;
operation?] Parameter1=valuel&Parameter2=value2.. .
Sinfo = parse_ur1 (Sur1) ;
Spath = explode [*/*, Sinfo ['path*] 1 ;
parse_str ($info [′quezy′] , Svar) ;
elseif (strpos ($ur1, /')) {
Spath = explode (°/*, Sur1) ;
//[module/controller/operation]
else {
Spath = [Sur1] ;
---
## Page 679
10.1 PHP Code Auditing
667
return [Spath, Svar] :
The main function is to split the route (such as /home/index/index) with */" into
an array. Then assign the result to Spath variable. As for the parameters in the Surl, it
is stored in a variable named Svar. The following operation is calling the array_shift
for three times to pops up the module, controller, and operation from Spath respec-
tively. Then a call to the parseUrlParams function is made to parse the additional
a oye Keue eds o  sisuened Suuea ue ae a J siased
array_shift operations, it will use T' to splice the remaining parameters into a string
and use it as parameter of the function calling.
The code for the parseUrlParamsO function is as follows.
private static function parseUrlParams (Sur1, &Svar = [1) {
if (Suzl)(
Svar += explode (*1 °, Sux1) ;
if (Config: :get (*uz1_param_type′)) {
else
preg_replace_ca11back (* / (^v+) \|  [^\|1 +1 / * , function ($match)
use (s§var) {
}, Sur11 ;
Svax [§match [1]] = atrip_tags (Snatch [2] 1 ;
Request : :instance () - >route (Svar) ;
// Set the paraneters of
the current request
In this function, since url_param_type defaults to O, parsing arguments in order is
turmed off by default, so it goes to the else branch. else branch parses arguments by
1I11Pl, ax aotueed e ssed no J ooq qoeu uossaxdx em3an e sasn 1 os *sueu
name I test", it will parse out Svar[id’]1 and Svar[name']test, and send the Svar
array back into the route( ) function. Set routing parameters for the usage in
subsequent operations.
Then it returns to the parseUrl( ) function, which finally encapsulates the route
q ae poumau s Aeue auL [anoug module (Snodule) ;
Sconfig = self : :init (Smodule) ;
// Module request cache check
Srequest - >cache (Sconfig [ 'request_cache ′],
---
## Page 681
10.1 PHP Code Auditing
699
Sconfig ['requeet_cache_except *]  ;
Sconfig [ 'request_cache_expire*] ,
else 
throw nev HttpException (404, *module not exists : 1 Smodu1e) ;
else {
// Single Module Deployment
Srequest ->nodule (Smodule) ;
Snodule = "';
Srequest - >filter (Sconfig ['default_filter′]) ;
filtering mechanism
// Set the default
App : :SmodulePath = APP_PATH . (Smodule ? Smodule . DS : **) :  // Current
module path
/ / Whether or not to automatically convert contro1lers and operation
Sconvert = is_bool ($convert) ? Sconvert : Sconfig ['ur1_convert] ;
names
Scontroller = strip_tags ($result [1] ? : Sconfig
// Get controller nane
['default_controller′]] ;
if (1pxeg_match (/~ [A-Za-z] (\w| \. ) +$/', Scontro11er) 1 {
throv new HttpException (404, 'contro1ler not exists: ' -$
controller);
Scontroller = Sconvert ? etrtolover ($controller) : Scontroller;
SactionName = strip_tags ($result [2] 7 : $config [ 'default_action′]1 ;
/ / Get operation nane
if (tempty ($config [′action_convert])) {
SactionName = Loader : :parseName ($actionName, 1) :
else {
SactionNane = Sconvert 7 strtolower (SactionNane) : SactionName ;
Srequest >contro1ler (Loader: :parseName (Scontro11er, 1) ) ->action
 // Set the controller and action of the current request
(SactionNane) ;
// Listen to module_init
Hook: :1isten( 'module_init', Srequest) ;
} 人x
Sinstance = Loader: :controller (Scontroller,
‘[,xa/exotoxquoo[xn ]bguoos
 ( [xatoxquooduo, ] bguoos
Sconfig ['controller_suffix'],
---
## Page 682
670
10 Code Auditing
catch (ClassNotFoundException Se) {
throvnevHttpException (404, 'controller not exists: ' Se->getClass
()} :
/ / Get the current operation nane
Saction = SactionNane . Sconfig [ 'action_suffix′] :
if (is_callable [[$instance, $action]) {
Svars = [] ;
// Execute the operation
Scal1 - [Sinstance, Saction] ;
// Strictly get the nane of the current method
Sreflect = nev \ReflectionMethod (Sinstance, Saction) ;
SmethodNane = Sreflect - >getName () :
Ssuffix = $config [ ' action_suffix′] :
SactionNane = $suffix 7 substr (SmethodNane, 0, -strlen ($suffix) ) :
Srequest - >action (SactionNane) :
SmethodNane ;
elseif (is_callable [ [Sinstance, *_empty']) { // nul1 operation
$cal1 - [Sinstance, '_enpty′] :
Svars = [SactionName] :
throv new HttpException (404, 'nethod not exists: ' get_class
else {
// Operation does not exist
(Sinstance) . '->* .Saction. ' () ') ;
Hook: :listen ('action_begin', Scal1) ;
return self ::invokeMethod (Scal1, $vars) ;
The function code is long and the key points are as follows.
① The program takes out the module, determines whether the module is disabled
and whether the application/module directory exists, and if so, sets Savailable to
true. when both Smodule and Savailable are true, it starts to execute the module
initialization operation.
② Take the controller and action from Sresult and do the regular expression match of
the corresponding naming convention, and subsequently instantiate the controller
by the following code.
Sinstance = Loader: :controller (Scontroller,
Sconfig ['ur1_controller_layer′] ,
Sconfig ['controller_suffix′] ,
Sconfig ['empty_controller′] 1 :
---
## Page 683
10.1 PHP Code Auditing
671
The controller ) function finds the controller class in the namespace, returns an
instance by reflection, and assigns it to Sinstance.
③ Call the is_callable( ) function after getting the instance class to determine if the
action can be accessed in the controller (public methods can be called, but private
and protected ones cannot). If it can be accessed, it continues to get the
corresponding method name by reflection and sets it for subsequent calls. The
whole call chain is : module → controller → action.
④ After getting the method name by reflection, execute the self:invokeMethod
(Scall, Svars) operation. The function is defined as follows.
public static function invokeMethod (Smethod, Svars = [1 ) {
1f (iα_array(Smethod) )(
Sclass = is_object (Smethod [o]) ? Smethod [o] : self::invokeClass
Sreflect = nev ,ReflectionMethod (Sclass, Snethod [1] 1 ;
Smethod [o] ] ;
else {
spoa otaes //
Sreflect = nev \ReflectionMethod (Smethod) :
Sargs = self : :bindParams ($reflect, Svars) ;
self : :Sdebug && Log: :record(' [RuN] * Sreflect - >class . ' - >′ $reflect ->
name. ' [' .\
Sreflect ->getFileName [1 - ] * ,'info*) ;
return Sreflect ->invokeArgs (1sset (Sclass) ? $class : nu11, Sargs) ;
Not surprisingly, the invokeMethod function starts with geting the method to be
executed by reflection, and then calls bindParams() to bind the arguments, which is
defined as follows.
pzivate static function bindParams (Sreflect, Svars = [1 > {
Automatic fetching of request variables
if (empty(Svars)){
Request ::instance () - >paran (1 
Svars = Config : :get (ur1_param_type′) 7 Request : :instance [1 - >route [1 :
 [] = s6xes
if ($reflect->getNumberOfPazameters () > 0) ( // Bind parameters
sequentia1ly.
reset ($vars) ;
Stype = key ($vars) === 0 7 1 : 0;
foreach ($reflect ->getParaneters (1 as Sparam) (
Sargs [] = se1f : :getParamValue ($param, Svars, Stype) :
---
## Page 684
672
10  Code Auditing
return Sargs;
The bindParams function calls Request:instance( )->param( ) by default to get
parameter values, which ide defined as follows.
public function param (Snane = *' , Sdefault = null, Stilter = **) {
f (empty (Sthis=>mergeParam) ) {
Snethod = Sthia->method (true) :
svitch ($method)(
automatically.
// Get request variables
break;
case 'POsT' : Svars = Sthis- >post (false) ;
case 'PUT' :
case 'DELETE' :
 (osteg) andparam = array_merge (Sthis->param, Sthis->get (false) ,
address.
Svars, $this- >route (false) ) ;
Sthis->nergeFaram = true;
information about file uploaded.
if (true === Sname) {
// Get the array containing the
Sfile = Sthia->file (> ;
Sdata = is_array (Stile) 7 array_merge (Sthis - >param, Sfile) : Sthis->
return Sthis->input (Sdata, '', Sdefault, Sfilter) ;
param;
return Sthis->input (Sthie->param, Sname, $default, Sfilter) ;
The param function is used to fetch the request parameters, then merge them with
the routing parameters mentioned above to generate a final parameter array. After
having the final parameter array, it call Sreflect->getNumberOfParameters( ) to
determine whether the method called has parameters or not, if so, iterate over the
method parameters array and execute self:getParam Value(Sparam, Svars, Stype).
private static function getParamValue (Sparam, &Svars, Stype) {
Sclass = Sparan->getClass (1 ;
Sname = Sparam- >getNane (1 ;
if ($class) {
/++ branches where paraneters are objects 1s omitted **/ 
---
## Page 685
10.1 PHP Code Auditing
673
elseif (1 == Stype && lempty (Svars) {
Sresult = array_shift (Svars) :
elseif (0 == Stype && isset (Svars [Sname])) (
Sresu1t = $vars [Sname] :
// the most com
mmon used branc)
elseif ($param->isDefaultValueAvailable ()) 
$result = Sparam->getDefaultValue () ;
else {
throv new \InvalidArgumentException ( 'method paran miss : ' Sname) :
return Sresult;
By default, the getParamValue function takes the names of all formal parameters
in the called method and passes them as keys, and then takes the values of the
-laduo sn 'siopoueed eau se Aeue 1anotueed 1sanbau a u soq Supuodsauo
ing the passing of the parameter values of the called method. Finally, by invoking
i  1ad on (ses tu : ssp  (ssepasst)saxo <-ogas
processing.
At this point, the route dispatching mechanism used in ThinkPHP 5 framework is
roughly introduced. The goal of the route dispatch mechanism analysis is when the
competitor get a copy of the source code, they do know how to get started and how to
run the program through the entry file. Instead of knowing where the vulnerability is
but don’t know how to construct a url to trigger the vulnerability. But due to space
constraints, many features of the ThinkPHP 5 framework are not covered, such as
how parameter values are filtered, how behavioral extensions work, and how
templates render and respond after a request is made. You can review the code by
yourself if you are intrested in this.
10.1.3 Examples
1. download from any file to RCE
During an authorized penetration test, I first passed the black box test and found the