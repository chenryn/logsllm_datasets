Ip → Oq denotes the
hit when accessing a cache set q.
interference that the victim’s line with address index p gets
a cache hit in the cache set q. Similarly I−1 is the non-
critical operations that bring in the victim’s cache line, then
I−1 → Oq is a Fake Interference that adds random noise.
Relevant interference probabilities, mutual information and
non-interference conditions can similarly be evaluated for
these types of side-channel vulnerabilities.
6.2 Other System Features
Our cache modeling methodology can also be extended to
model other features of modern microprocessors.
(1) Multiple processes: Other processes, not the victim nor
the attacker, can aﬀect the attacker’s observations. We can
introduce a new state R to indicate the cache line occupied
by the Rest of the processes. A new cache event “R miss”
can transition the cache state from A to R, generate Fake
Interference and add noise to the attacker’s observations. R
can also be superimposed on the INV state, and “R miss”
on the “Invalidate” transition from A to INV states, in
Figure 1. This generalizes the Fake Interference we measure
as “noise” coming from multiple sources - invalidations, other
processes or other channel noise.
(2) Prefetching: This fetches data into cache before being
requested, to avoid future cache misses. We add two new
events “V pref etch” and “A pref etch” to model the data
prefetching of victim and attacker. Prefetching can reduce
the side-channel leakage by adding noise. For instance, in a
Type I attack, V pref etch can evict the attacker’s cache line
and transition the cache state from A to V. This generates
Fake Interference when the attacker has a cache miss later
for this line, and may satisfy Condition C2. A pref etch can
evict the victim’s cache line and transition the cache state
from V to A. Then the attacker will experience a cache
hit for this line, and cannot observe the victim’s previous
actions. This may satisfy Condition C1.
(3) AES-NI [27]: Intel x86 processors introduced new in-
structions speciﬁcally for AES block encryption and decryp-
tion. This eliminates cache usage for those AES implemen-
tations rewritten using AES-NI instructions. Since this re-
moves state V and all transitions related to it from Figure 1,
the attacker cannot observe any interference from the victim
and Condition C1 is satisﬁed. Unfortunately, AES-NI does
not apply to legacy code (or new code written without using
AES-NI instructions). It does not mitigate the cache side-
channel leakage from other ciphers, e.g., RSA. It also does
not protect cache side-channel leakage in other processors,
e.g., the dominant ARM processors used in mobile devices.
7. VALIDATION OF CACHE MODELS
We launch an actual attack program to see if this validates
the results of our cache modeling case study. We use the
Probability Distribution of Candidate Keys to quantify the
feasibility of this attack, hence the system’s vulnerability.
7.1 Probability Distribution of Candidate Keys
When an attacker attempts to break a cryptography com-
puting platform, he can feed diﬀerent plaintexts into the
platform, and ask for encryption with the key he wants to
steal. He then collects the side-channel observations dur-
ing the encryptions and tries to infer the keys or narrow
down its possible values. To improve the accuracy and fully
recover the keys, the attacker usually repeats a bunch of
attack rounds to obtain diﬀerent candidate keys. He cal-
culates the Probability Distribution of Candidate Keys, and
selects the key with the highest probability. A successful
attack is able to select the correct key based on its signif-
icantly higher probability in the Probability Distribution of
Candidate Keys. So we use this to evaluate the success of an
attack, and hence the systems’ vulnerability to this attack.
7.2
Implementation
We launch an access-based side-channel attack on AES
[17]. We use gem5 [28] to simulate this attack on diﬀerent
cache architectures, and compare their Probability Distri-
bution of Candidate Keys. For each cache, we simulate L1
caches, with cache size of 32 Kbytes, line size of 32 bytes and
set-associativity of 8-way, which is a typical conﬁguration in
modern processors. The victim runs AES encryption for 218
random blocks in the study phase (the key is known to the
attacker) and in the attack phase (the key is unknown to the
attacker). The attacker primes and probes the cache contin-
uously to collect the access time for each cache line, to infer
the victim’s memory accesses, and hence his encryption key.
7.3 Attack Results
Figure 2 shows the attack results. We use a solid red line
to show the Probability Distribution of Candidate Keys, and
a dotted blue line to denote the correct encryption key.
For conventional caches (Figure 2a), eight keys (32-39)
get more than 10 % probabilities while the rest are close to
zero. The correct key-byte value 35 is among the top eight
candidate keys, but the attacker cannot pick it out. This
is because one cache line contains 8 AES entries, and the
attacker is unable to diﬀerentiate which entry is actually
accessed, when he observes a victim’s access to this line. He
needs other methods like brute-force or two-rounds attack
[17] to ﬁnd the correct key from the 8 possible values. We
conclude this attack on the conventional cache succeeds.
Similar results can be observed for Random Eviction cache
(Figure 2d). This shows two types of RE cache: RE1000 (a
random cache line is evicted every 1000 memory accesses – in
red) and RE10 (a line is evicted every 10 memory accesses –
in black). RE cache also leaks eight candidate keys: RE1000
has the same probability distribution as conventional caches,
while RE10 is much smaller. A RE cache with more frequent
random evictions is more diﬃcult to attack.
Figure 2b shows the distribution of candidate keys for
SP cache. This shows that the attack does not produce
any distinguished candidate keys. Thus this attack on SP
cache fails at 218 samples. We get the same conclusion for
Partition-Locked Cache (Figure 2c), Random-Permutation
Cache (Figure 2e) and Newcache (Figure 2f).
Comparing Table 9 and Figure 2, we see that the results
we get from the two independent evaluation methods are
consistent. For the partitioning approach, PL and SP caches
can eﬀectively defend against Type I side-channel attacks.
For the randomization approach, RP and NewCache are also
very eﬀective in reducing Type I side-channel leakage. RE
Coeﬃcient between the Similarity Matrices of the victim’s
execution traces and the attacker’s observation traces. [35]
proposed the timing-SVF metric for timing-based cache side-
channel attacks, which [34] did not address. In [36], a metric
called Cache Side-channel Vulnerability (CSV) is designed to
overcome SVF’s issues in its scope, deﬁnition and measure-
ments. It also states that using a single metric like SVF [34]
to evaluate the system’s vulnerability to all possible forms
of side-channel information leakage is problematic as it may
give misleading results and furthermore, it does not correctly
determine which secure cache designs are more eﬀective in
defending against which side-channel attacks.
Formal Veriﬁcation: Porras and Kemmerer designed the
technique of covert ﬂow trees to systematically detect and
identify covert channels between processes [37]. [38] built
models of timing side-channel leakage from the program code
level. [39] uses the technique of self-composition to verify
the non-interference properties of cryptographic software by
considering two copies of the program.
Most of the above methods aim to evaluate the feasibility
of the attacker’s behaviors, instead of the system’s intrinsic
vulnerability. Unlike these past methods, we are the ﬁrst to
model the cache architectures and measure their leakage.
9. CONCLUSIONS
This work proposes a novel methodology to evaluate a
cache system’s vulnerability to side-channel attacks. We
model side channel leakage from the non-interference prop-
erty, and use mutual information with three non-interference
conditions to guarantee no side-channel leakage. We then
show how to model cache architectures, and integrate these
with our side-channel leakage model. We also perform a
real attack on each of our detailed secure cache architecture
simulations, to see if our model is consistent with reality
(“ground truth”), to validate our modeling methodology.
Our modeling methodology focuses on the root cause of
cache side-channel leakage: the interference impacting cache
behavior. It can theoretically cover all types of side-channel
attacks (known or unknown). In the case study, we consider
the side-channel attacks (Type I) based on cache misses due
to external interference. But these models of caches and
interferences can be extended to other types of attacks, as
discussed in Section 6. Future work can also extend these
evaluation methods to new cache architectures and other
system features impacting cache behavior, as well as to other
subsystems (not just caches) that may be vulnerable to side-
channel or covert channel attacks.
10. ACKNOWLEDGMENTS
This work was supported in part by DHS/AFRL FA8750-
12-2-0295 and NSF CNS-1218817.
11. REFERENCES
[1] D. Gullasch, E. Bangerter, and S. Krenn, “Cache
games–bringing access-based cache attacks on aes to
practice,” in IEEE Symp. on Security and Privacy,
2011.
[2] T. S. Messerges, E. A. Dabbish, and R. H. Sloan,
“Investigations of power analysis attacks on
smartcards,” in USENIX Workshop on Smartcard
Technology, 1999.
(a) Conventional Cache
(b) SP cache
(c) PL cache
(d) RE cache
(e) RP cache
(f) NewCache
Figure 2: Probability Distribution of Candidate Keys
caches are attackable, but if the eviction frequency increases
(at the cost of performance), the attack becomes harder.
In several cases, our abstract cache models give more in-
formation than the actual attacks. For example, they can
show the eﬀect of PL cache with preloading of the sensi-
tive table data (not vulnerable) versus PL cache with no
preloading (vulnerable), as shown in Table 5.
8. RELATED WORK
Past work in evaluating side-channel attacks can be clas-
siﬁed into several categories based on their features:
Mutual Information: [29] applied mutual information and
Guessing Entropy to evaluate the feasibility of key-recovery.
[30] proposed static analysis to establish formal security
guarantees against cache side-channel attacks, and can es-
timate the upper bound of information leakage from side
channels. [31] presented an information-theoretic metric for
adaptive side-channel attacks, which can estimate the at-
tacker’s remaining uncertainty for adjusting his strategy.
Success Probability: In [29], Success Rate is deﬁned as a
general metric to evaluate the feasibility of side-channel key
recovery. Then [32] deﬁnes the average Success Rate to eval-
uate the proﬁled cache timing attacks. It also builds an an-
alytical model to estimate the Success Rate for determining
the best attack strategy. [33] builds a predictive model for
evaluating the side-channel leakage through caches. It cal-
culates the probability that the attacker can correctly detect
a memory access given a victim’s critical memory access.
Correlation Metric: [34] proposed the Side-channel Vul-
nerability Factor (SVF) to measure a system’s vulnerability
to all side channels. It calculates the Pearson Correlation
0501001502002500%3%6%9%12%15%KeyByte ValueProbability  ConventionalCorrect0501001502002500%3%6%9%12%15%KeyByte ValueProbability  SPCorrect0501001502002500%3%6%9%12%15%KeyByte ValueProbability  PLCorrect05010015020025003%6%9%12%15%KeyByte ValueProbability  RE1000RE10Correct0501001502002500%3%6%9%12%15%KeyByte ValueProbability  RPCorrect0501001502002500%3%6%9%12%15%KeyByte ValueProbability  NewCorrect[3] P. C. Kocher, J. Jaﬀe, and B. Jun, “Diﬀerential power
Privacy, 1982.
analysis,” in Annual Intl. Cryptology Conference on
Advances in Cryptology, 1999.
[23] T. M. Cover and J. A. Thomas, Elements of
Information Theory. Wiley InterScience, 2006.
[4] N. Homma, T. Aoki, and A. Satoh, “Electromagnetic
[24] T. Zhang and R. B. Lee, “Secure Cache Modeling for
information leakage for side-channel analysis of
cryptographic modules,” in IEEE Intl. Symp. on
Electromagnetic Compatibility, 2010.
[5] P. Kocher, R. Lee, G. McGraw, and A. Raghunathan,
“Security as a new dimension in embedded system
design,” in Design Automation Conference, 2004.
[6] J.-F. Dhem, F. Koeune, P.-A. Leroux, P. Mestr´e, J.-J.
Quisquater, and J.-L. Willems, “A practical
implementation of the timing attack,” in Intl. Conf. on
Smart Card Research and Applications, 2000.
[7] C. Percival, “Cache missing for fun and proﬁt,” in
Proc. of BSDCan, 2005.
Measuring Side-channel Leakage,” in Tech. Report,
http://palms.ee.princeton.edu/node/428.
[25] D. L. Dill, A. J. Drexler, A. J. Hu, and C. H. Yang,
“Protocol veriﬁcation as a hardware design aid,” in
Intl. Conference on Computer Design: VLSI in
Computer & Processors, 1992.
[26] J. Kong, O. Aciicmez, J.-P. Seifert, and H. Zhou,
“Hardware-software integrated approaches to defend
against software cache-based side channel attacks,” in
IEEE Intl. Symp. on High Performance Computer
Architecture, 2009.
[27] S. Gueron, “Intel advanced encryption standard (aes)
[8] D. J. Bernstein, “Cache-timing attacks on aes,” tech.
instructions set,” 2010.
rep., 2005.
[9] J. Bonneau and I. Mironov, “Cache-collision timing
attacks against aes,” in Lecture Notes in Computer
Science series 4249, Springer, 2006.
[10] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart,
“Cross-vm side channels and their use to extract
private keys,” in ACM Conference on Computer and
Communications Security, 2012.
[11] E. Brickell, G. Graunke, M. Neve, and J.-P. Seifert,
“Software mitigations to hedge aes against cache-based
software side channel vulnerabilities,” 2006.
[12] E. K¨asper and P. Schwabe, “Faster and timing-attack
resistant aes-gcm,” in Cryptographic Hardware and
Embedded Systems, 2009.
[13] Z. Wang and R. B. Lee, “New cache designs for
thwarting software cache-based side channel attacks,”
in ACM/IEEE Intl. Symp. on Computer Architecture,
2007.
[14] Z. Wang and R. Lee, “A novel cache architecture with
enhanced performance and security,” in IEEE/ACM
Intl. Symp. on Microarchitecture, 2008.
[15] L. Domnitser, A. Jaleel, J. Loew, N. Abu-Ghazaleh,
and D. Ponomarev, “Non-monopolizable caches:
Low-complexity mitigation of cache side channel
attacks,” ACM Trans. Archit. Code Optim., 2012.
[28] “The gem5 simulator system,” in http://www.gem5.org.
[29] F.-X. Standaert, T. G. Malkin, and M. Yung, “A
uniﬁed framework for the analysis of side-channel key
recovery attacks,” in Annual Intl. Conference on
Advances in Cryptology: the Theory and Applications
of Cryptographic Techniques, 2009.
[30] B. K¨opf, L. Mauborgne, and M. Ochoa, “Automatic
quantiﬁcation of cache side-channels,” in Intl.
Conference on Computer Aided Veriﬁcation, 2012.
[31] B. K¨opf and D. Basin, “An information-theoretic
model for adaptive side-channel attacks,” in ACM
Conf. on Computer and Comms. Security, 2007.
[32] C. Rebeiro and D. Mukhopadhyay, “Boosting proﬁled
cache timing attacks with a priori analysis,” IEEE
Trans. on Information Forensics and Security, 2012.
[33] L. Domnitser, N. Abu-Ghazaleh, and D. Ponomarev,
“A predictive model for cache-based side channels in
multicore and multithreaded microprocessors,” in Intl.
Conference on Mathematical Methods, Models and
Architectures for Computer Network Security, 2010.
[34] J. Demme, R. Martin, A. Waksman, and
S. Sethumadhavan, “Side-channel vulnerability factor:
a metric for measuring information leakage,” in
ACM/IEEE Intl. Symp. on Computer Architecture,
2012.
[16] O. Acii¸cmez and c. K. Ko¸c, “Trace-driven cache
[35] S. Bhattacharya, C. Rebeiro, and D. Mukhopadhyay,
attacks on aes,” in Intl. Conference on Information
and Communications Security, 2006.
[17] D. A. Osvik, A. Shamir, and E. Tromer, “Cache
attacks and countermeasures: the case of aes,” in RSA
conference on Topics in Cryptology, 2006.
[18] O. Acii¸cmez, “Yet another microarchitectural attack:
exploiting i-cache,” in ACM workshop on Computer
security architecture, 2007.
[19] Z. Wang, Information Leakage Due to Cache and
Processor Architectures. PhD thesis, Princeton, 2012.
[20] Z. Wang and R. B. Lee, “Covert and side channels due
to processor architecture,” in Annual Computer
Security Applications Conference, 2006.
[21] F. Liu and R. B. Lee, “Security testing of a secure
cache design,” in Hardware and Architectural Support
for Security and Privacy, 2013.
[22] J. A. Goguen and J. Meseguer, “Security policies and
security models,” in IEEE Symp. on Security and
“Hardware prefetchers leak: A revisit of SVF for
cache-timing attacks,” in Hardware and Architectural
Support for Security and Privacy, 2012.
[36] T. Zhang, S. Chen, F. Liu, and R. B. Lee, “Side
channel vulnerability metrics: the promise and the
pitfalls,” in Hardware and Architectural Support for
Security and Privacy, 2013.
[37] P. Porras and R. Kemmerer, “Covert ﬂow trees: a
technique for identifying and analyzing covert storage
channels,” in IEEE Computer Society Symp. on
Research in Security and Privacy, 1991.
[38] J. Svenningsson and D. Sands, “Speciﬁcation and
veriﬁcation of side channel declassiﬁcation,” in Intl.
Conf. on Formal Aspects in Security and Trust, 2010.
[39] J. Bacelar Almeida, M. Barbosa, J. S. Pinto, and
B. Vieira, “Formal veriﬁcation of side-channel
countermeasures using self-composition,” Sci. Comput.
Program., 2013.