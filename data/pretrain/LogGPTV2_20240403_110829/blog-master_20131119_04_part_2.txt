                current->bio_tail = &bio->bi_next;  
                return;  
        }  
        /* following loop may be a bit non-obvious, and so deserves some  
         * explanation.  
         * Before entering the loop, bio->bi_next is NULL (as all callers  
         * ensure that) so we have a list with a single bio.  
         * We pretend that we have just taken it off a longer list, so  
         * we assign bio_list to the next (which is NULL) and bio_tail  
         * to &bio_list, thus initialising the bio_list of new bios to be  
         * added.  __generic_make_request may indeed add some more bios  
         * through a recursive call to generic_make_request.  If it  
         * did, we find a non-NULL value in bio_list and re-enter the loop  
         * from the top.  In this case we really did just take the bio  
         * of the top of the list (no pretending) and so fixup bio_list and  
         * bio_tail or bi_next, and call into __generic_make_request again.  
         *  
         * The loop was structured like this to make only one call to  
         * __generic_make_request (which is important as it is large and  
         * inlined) and to keep the structure simple.  
         */  
        BUG_ON(bio->bi_next);  
        do {  
                current->bio_list = bio->bi_next;  
                if (bio->bi_next == NULL)  
                        current->bio_tail = &current->bio_list;  
                else  
                        bio->bi_next = NULL;  
                __generic_make_request(bio);  
                bio = current->bio_list;  
        } while (bio);  
        current->bio_tail = NULL; /* deactivate */  
}  
EXPORT_SYMBOL(generic_make_request);  
/usr/src/debug/kernel-2.6.32-358.el6/linux-2.6.32-358.el6.x86_64/fs/bio.c  
/**  
 * bio_endio - end I/O on a bio  
 * @bio:        bio  
 * @error:      error, if any  
 *  
 * Description:  
 *   bio_endio() will end I/O on the whole bio. bio_endio() is the  
 *   preferred way to end I/O on a bio, it takes care of clearing  
 *   BIO_UPTODATE on error. @error is 0 on success, and and one of the  
 *   established -Exxxx (-EIO, for instance) error values in case  
 *   something went wrong. Noone should call bi_end_io() directly on a  
 *   bio unless they own it and thus know that it has an end_io  
 *   function.  
 **/  
void bio_endio(struct bio *bio, int error)  
{  
        if (error)  
                clear_bit(BIO_UPTODATE, &bio->bi_flags);  
        else if (!test_bit(BIO_UPTODATE, &bio->bi_flags))  
                error = -EIO;  
        if (bio->bi_end_io)  
                bio->bi_end_io(bio, error);  
}  
EXPORT_SYMBOL(bio_endio);  
/usr/src/debug/kernel-2.6.32-358.el6/linux-2.6.32-358.el6.x86_64/include/trace/events/block.h  
DECLARE_EVENT_CLASS(block_bio,  
        TP_PROTO(struct request_queue *q, struct bio *bio),  
        TP_ARGS(q, bio),  
        TP_STRUCT__entry(  
                __field( dev_t,         dev                     )  
                __field( sector_t,      sector                  )  
                __field( unsigned int,  nr_sector               )  
                __array( char,          rwbs,   RWBS_LEN        )  
                __array( char,          comm,   TASK_COMM_LEN   )  
        ),  
        TP_fast_assign(  
                __entry->dev            = bio->bi_bdev->bd_dev;  
                __entry->sector         = bio->bi_sector;  
                __entry->nr_sector      = bio->bi_size >> 9;  
                blk_fill_rwbs(__entry->rwbs, bio->bi_rw, bio->bi_size);  
                memcpy(__entry->comm, current->comm, TASK_COMM_LEN);  
        ),  
        TP_printk("%d,%d %s %llu + %u [%s]",  
                  MAJOR(__entry->dev), MINOR(__entry->dev), __entry->rwbs,  
                  (unsigned long long)__entry->sector,  
                  __entry->nr_sector, __entry->comm)  
);  
DEFINE_EVENT(block_bio, block_bio_backmerge,  
        TP_PROTO(struct request_queue *q, struct bio *bio),  
        TP_ARGS(q, bio)  
);  
DEFINE_EVENT(block_bio, block_bio_frontmerge,  
        TP_PROTO(struct request_queue *q, struct bio *bio),  
        TP_ARGS(q, bio)  
);  
```  
## 参考  
1\. https://sourceware.org/systemtap/SystemTap_Beginners_Guide/mainsect-disk.html  
2\. https://sourceware.org/systemtap/examples/  
3\. /usr/share/systemtap/testsuite/systemtap.examples  
4\. systemtap-testsuite  
5\. /usr/share/systemtap/testsuite/systemtap.examples/index.txt  
6\. /usr/share/systemtap/testsuite/systemtap.examples/keyword-index.txt  
7\. /usr/share/systemtap/tapset  
8\. https://sourceware.org/systemtap/tapsets/API-ansi-clear-screen.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")