HE.Decdk(c) → t. Given a ciphertext c ∈ Zq[X][Y ], with c = c0 + c1Y + c2Y 2, ﬁrst compute c(cid:48) ∈
Rq[Y ], with c(cid:48) = c(cid:48)
0 + c(cid:48)
i = ci mod Φm(X) for i = 0, 1, 2. Next,
compute t ∈ Rq as t ← c(cid:48)
2. Finally, output t mod p, which is interpreted as an
element in Rp.
2Y 2, by computing c(cid:48)
1 − s2 · c(cid:48)
1Y + c(cid:48)
0 − s · c(cid:48)
The following lemma from [20] states the security and correctness of the encryption scheme.
Lemma 1 ([20], Lemma 4; and [20], Theorem 2).
For D = 1, 2, the public-key encryption scheme (HE.ParamGen, HE.KeyGen, HE.Enc, HE.Dec), spec-
iﬁed above, is semantically secure under the PLWE assumption, and it allows the computation of
any polynomial f of degree D such that
(cid:107)f(cid:107)∞ ·(cid:0)p · σ · n1.5(cid:1)D ≤ q/2.
Batching. A nice capability of the BV encryption scheme, which will be used extensively in our
implementations, is the ability to encrypt many “small” plaintexts (e.g. integers modulo a 32-bit
prime) into the same ciphertext: each small plaintext will then reside in its dedicated “slot” in the
ciphertext. This feature was ﬁrstly introduced by Smart and Vercauteren [58], and it is achieved as
follows (see [19,58] for more details).
Two Lines about Number Theory. Let F ∈ Fp[X] be a monic polynomial of degree n such
that
s(cid:89)
i=1
F (X) =
Fi(X),
where Fi is irreducible over Fp and deg(Fi) = n/s =: d for all i. Let Ap := Fp[X]/F . Notice that:
Ap = Fp[X]/F = Fp[X]/(F1, . . . , Fs) ∼= Fp[X]/(F1) × ··· × Fp[X]/(Fs) ∼= F
pd
In detail, the ring operations over Ap are mapped to coordinate-wise ring operations over (F
pd)s.
Applicability to the Encryption Scheme. Let z be an integer, d = 2z, m = 2 · d, and p be a
prime such that p = 1 mod m. With this choice of parameters, the native plaintext space for the
encryption scheme becomes M = Rp = Fp[X]/Φm(X) = Fp[X]/(X d + 1). Moreover, X d + 1 is
∼= (Fp)d, by the above observation. This means that Rp can be
monic, and it splits over Fp, so Rp
thought of as an intermediary domain that homomorphically encodes d values in Fp. This allows
to encrypt and perform homomorphic operations on d “small” plaintexts over Fp, by ﬁrst encoding
the d “small’ plaintexts into Rp and then applying the regular encryption algorithm. Visually:
pd × ··· × F
pd =(cid:0)F
(cid:1)s .
∼=
(Fp)d
/ Rp
/ m
HE.Encpk/
/ Rq[Y ]
f
/ Rq[Y ]
HE.Decsk
∼=
/ (Fp)d
/ Rp
/ f (m)
(m1, . . . , md)
In the diagram above, mi is said to reside in the ith plaintext slot of the cryptosystem, and d is
the total number of admissible slots.
/ HE.Encpk(m)
/ f (HE.Encpk(m))
/ (f (m1), . . . , f (md)).
16
/
/
/
/
/
/
/
/
/
4.2 Homomorphic Hash Functions
We now introduce the notion of homomorphic hash functions and we propose two realizations that
will be used throughout the paper. Informally, a family of keyed homomorphic hash functions H
with domain D and range R consists of a tuple of algorithms (H.KeyGen, H, H.Eval) such that:
– H.KeyGen generates the description of a function HK,
– H computes the function,
– H.Eval allows to compute over R.
In our case we are interested in computations of arithmetic circuits, and thus H.Eval allows to
compute additions and multiplications over R.
In the following we propose a homomorphic hash whose key feature is that it allows to “com-
press” a BV ciphertext µ ∈ Zq[X][Y ] into a single entry ν ∈ Zq in such a way that H is a ring
homomorphism, hence H.Eval(f, (H(µ1), . . . , H(µt)) = H(f (µ1, . . . , µt)). Turning our attention to
security, we show that this ﬁrst construction H is universal one-way. Next, we will show a variant
of this construction, ˆH, that maps into bilinear groups and can be proven collision-resistant under
a suitable computational assumption.
A Universal One-Way Homomorphic Hash. Let q be a prime of λ bits, N, c be two integers
of size at most polynomial in λ,4 and let D = {µ ∈ Zq[X][Y ] : degX (µ) = N, degY (µ) = c}.
The family of hash functions (H.KeyGen, H, H.Eval) with domain D and range R = Zq is deﬁned
as follows:
H.KeyGen: Pick α, β $← Zq, and set κ = (α, β).
Hκ(µ): On input µ ∈ D, the function Hα,β evaluates µ at Y = α over Zq[X] and then evaluates
µ(α) ∈ Zq[X] at X = β over Zq. More explicitly, Hα,β = evβ ◦ evα
Hα,β
D ⊂ Zq[X][Y ]
µjY j 
c(cid:80)
µ =
j=0
evα
c(cid:80)
j=0
µjαj =
Zq[X]
c(cid:80)
N(cid:80)
j=0
i=0
(cid:0)µjαj(cid:1)
evβ
i X i 
c(cid:80)
N(cid:80)
j=0
i=0
/ Zq
(cid:0)µjαj(cid:1)
i βi.
H.Eval(fg, ν1, ν2): on input two values ν1, ν2 ∈ Zq and an operation fg which is addition + or
multiplication ×, compute fg(ν1, ν2).
Theorem 2. The family of functions H deﬁned above is homomorphic and universal one-way, i.e.,
for all µ, µ(cid:48) ∈ D such that µ (cid:54)= µ(cid:48) it holds
Pr[Hα,β(µ) = Hα,β(µ(cid:48)) : α, β $← Zq] ≤ c + N
q
which is negligible for an appropriate choice of q ≈ 2λ.
4 In the instantiations of H in our protocols we will set N = 2(n − 1) and c = 2, where n is the degree of the
cyclotomic polynomial Φm(X).
17
/
/
(
(
/
/
/
/
/
Proof. To see the homomorphic property note that since ev is a ring homomorphism and H is a
composition of evα and evβ, then H is a ring homomorphism.
For security, note that from the homomorphic property of H, Hα,β(µ) = Hα,β(µ(cid:48)) implies
Hα,β(µ − µ(cid:48)) = 0. Also, since µ (cid:54)= µ(cid:48), δ = µ − µ(cid:48) is a non trivial element in the kernel of Hα,β.
Namely, we obtain a non-zero polynomial δ(X, Y ) that evaluates to zero for Y = α and X = β.
Precisely, the probability of this event can be bounded as follows:
[δ(α, β) = 0] ≤ Pr
[δ(α) = 0 ∈ Zq[X]] + Pr
[λ(β) = 0|λ = δ(α) (cid:54)= 0 ∈ Zq[X]]
(1)
α
β
Pr
α,β
By applying the Schwartz-Zippel lemma, the second probability is bounded by
Pr
β
[λ(β) = 0|λ = δ(α) (cid:54)= 0 ∈ Zq[X]] ≤ degX (λ)
For the second event, if we let λk(Y ) =(cid:80)c
(2)
j=0 δj,kY j ∈ Zq[Y ] for all k = 0, . . . , N , then the fact that
(cid:35)
δ is nonzero implies existence of an index ¯k such that λ¯k is nonzero over Zq[Y ]. Therefore, we have
q
[δ(α) = 0 ∈ Zq[X]] = Pr
Pr
α
λk(α) = 0
= Pr
α
[λ¯k(α) = 0] Pr
α
λk(α) = 0 | λ¯k(α) = 0
(3)
(cid:34) N(cid:94)
k=0
α
α
≤ Pr
[λ¯k(α) = 0] ≤ degY (λ¯k)
q
 N(cid:94)
k=0,k(cid:54)=¯k
where the last bound follows again by Schwartz-Zippel. Hence, applying bounds (2) and (3) to
equation (1) and considering the deﬁnition of D we obtain that the probability of collisions over
the random choice of α, β ∈ Zq is bounded by c/q + N/q, which is negligible.
(cid:117)(cid:116)
A Collision-Resistant Homomorphic Hash. Notice that the function Hα,β is secure only if
the key (α, β) is kept secret and the function is used only one time (otherwise information on α
and β is leaked). Below, we show how to obtain a slightly diﬀerent version of Hα,β which can be
proven collision-resistant at the price of being only “somewhat” homomorphic – the homomorphic
property holds only for degree-2 functions.
Let bgpp = (q, G1, G2, GT , e, g, h) be a tuple of bilinear group parameters, and let D ⊂ Zq[X][Y ]
be as deﬁned in H. The family of hash functions ( ˆH.KeyGen, ˆH, ˆH.Eval) with domain D and range
R = G1 × G2 (or GT ) is as follows:
ˆH.KeyGen: To sample a member of the family, choose random α, β $← Zq. Next, for i = 0, . . . , c and
j = 0, . . . , N , compute gαiβj , hαiβj , and include them in the public key K.
Output K and κ = (α, β).
ˆH(µ). On input µ ∈ D such that degY (µ) ≤ 2, the function ˆH(µ) does the following. Let Hα,β be the
function deﬁned above. If degY (µ) ≤ 1, then compute (T, U ) ← (gHα,β (µ), hHα,β (µ)) ∈ G1 × G2.
If degY (µ) = 2, compute e(g, h)Hα,β (µ) ∈ GT .
Note that ˆH can be computed in two diﬀerent ways (the ﬁrst one being computationally more
eﬃcient): (1) by using the secret key κ, or (2) by using the group elements in the public key K.
ˆH.Eval(fg, ν1, ν2) We show how to compute degree-2 functions on the outputs of ˆH in a homomorphic
way. Intuitively speaking, we want to compute degree-2 polynomials f over Zq “in the exponent”.
To this end we rely on that the bilinear groups are isomorphic to Zq and simulate additions via
the group operation and multiplications by using the bilinear pairing.
More precisely, given (T1, U1), (T2, U2) (resp. ˆT1, ˆT2 ∈ GT ):
18
T1 · T2, U ← U1 · U2) (resp. ˆT ← ˆT1 · ˆT2).
– Addition (in the exponent) is performed via (component-wise) group operation, i.e., (T ←
– Multiplication by a constant c ∈ Fq is performed as (T c, U c) (resp. ˆT c).
– Multiplication of two values, is performed with the use of the bilinear pairing: ˆT ← e(T1, U2) ∈
GT .
In the following theorem we show that the function ˆH described above is homomorphic, and it
is collision-resistant under the (cid:96)-BDHI assumption which we recall below.
Deﬁnition 8 ((cid:96)-BDHI Assumption [15]). Let G be a bilinear group generator, and let bgpp =
(q, G1, G2, GT , e, g, h) $← G(1λ). Let z $← Zq be chosen uniformly at random. We say that the (cid:96)-BDHI
assumption holds for G if for every PPT adversary A and any (cid:96) = poly(λ) the probability
Pr[A(bgpp, g, h, gz, hz, gz2
, hz2
, . . . , gz(cid:96)
, hz(cid:96)
) = e(g, h)1/z] = negl(λ).
Theorem 3. The function ˆH described above is homomorphic. Furthermore, if the (cid:96)-BDHI as-
sumption holds for G for any (cid:96) ≥ N, c, then ˆH is collision-resistant, i.e., for (K, κ) $← ˆH.KeyGen
Pr[ ˆH(µ) = ˆH(µ(cid:48)) ∧ µ (cid:54)= µ(cid:48) | (µ, µ(cid:48)) ← A(K)] = negl(λ).
Proof. The homomorphic property easily follows by observing that ˆH.Eval computes the function
Hα,β in the exponent.
To prove security, we ﬁrst observe that for any adversary A that outputs a pair (µ, µ(cid:48)) such
that µ (cid:54)= µ(cid:48), letting δ = µ − µ(cid:48) we have two possible cases:
1. δ(α) = 0 ∈ Zq[X],