of 128-bit words, called round keys, that are used during
the encryption process. The encryption process itself is a
succession of a set of mathematical transformations called
AES rounds. During an AES round the input to the round
is ﬁrst XOR’d with a round key from the key schedule. The
137i
input block + round key
i
k
input block
t bl
t bl
k
d k
repeat
repeat
10, 12 or 
14 
times
0
0
1
1
2
2
bytes
bytes …
13
13
14
14
15
15
S box
S box
S box
S box
S box
S box
0
0
1
1
2
22
(S hiftR ows, 
MixC olumns)
MixC olumns)
13
14
15
13
14
15
Figure 2: Structure of AES
exclusive OR (XOR) logical operation can also be seen as
addition without generating carries.
In the next step of a round, each of the 16 bytes of the
AES state is replaced by another value by using a non-linear
transformation called SBox. The AES SBox consists of two
stages. The ﬁrst stage is an inversion, not in regular inte-
ger arithmetic, but in a ﬁnite ﬁeld arithmetic based on the
8
). The second stage is a bit-linear aﬃne transfor-
set GF (2
mation (i.e., it can be implemented only with XOR gates).
During encryption, the input x, which is considered an ele-
); that is, an 8-bit vector, is ﬁrst inverted, and
ment of GF (2
then an aﬃne map is applied to the result. During decryp-
tion, the input y=SBox(x) goes through the inverse aﬃne
). The inversions just
map and is then inverted in GF (2
), deﬁned
mentioned are performed in the ﬁnite ﬁeld GF (2
3
+ x
+ x + 1 or
by the irreducible polynomial p(x) = x
0x11B.
+ x
8
8
8
4
8
Next, the replaced byte values undergo two linear transfor-
mations called ShiftRows and MixColumns. The ShiftRows
transformation is just a byte permutation. The MixColumns
transformation operates on a matrix representation of the
AES state. Each column is replaced by another one that re-
sults from a matrix multiplication. The transformation used
for encryption is shown in Equation (1). In this equation,
matrix-times-vector multiplications are performed according
) with the same irre-
to the rules of the arithmetic of GF (2
ducible polynomial that is used in the AES S-box, namely,
p(x) = x
+ x + 1.
+ x
+ x
8
3
8
4
⎡
⎢⎢⎣
2 3 1 1
1 2 3 1
1 1 2 3
3 1 1 2
⎤
⎥⎥⎦ · input
output =
4.4 RSA
RSA is a public key cryptographic scheme. The main
idea behind public key cryptography is that encryption tech-
niques can be associated with secrets. Secrets are known
only to at least one of the communicating parties and can
simplify the decryption process.
In public key cryptogra-
phy, a message is encrypted using a public key. A public
key is associated with a secret called the private key. With-
out knowledge of the private key, it is diﬃcult to decrypt a
message.
We further explain how public key cryptography works
In this
by presenting the RSA algorithm as an example.
algorithm, the communicating parties choose two random
large prime numbers p and q. For maximum security, p
and q are of equal length. The communicating parties then
compute the product:
n = p · q.
Then the parties choose the public key e, such that the
numbers e and (p − 1) · (q − 1) are relatively prime. The
private key associated with the public key is a number d,
such that:
e · d mod (p − 1) · (q − 1) = 1.
The encryption formula is simply:
C = M
e
mod n,
where M is the plaintext and C is the ciphertext. The de-
cryption formula is similarly:
M = C
d
mod n.
The exponents d and e can be used interchangeably, mean-
ing that encryption can be done by using d, and decryption
can be done by using e.
RSA is typically implemented using the Chinese Remain-
der Theorem that reduces a single modular exponentiation
operation into two operations of half length. Each modular
exponentiation in turn is implemented using a square-and-
multiply technique that reduces the exponentiation opera-
tion into a sequence of modular squaring and modular multi-
plication operations. Square-and-multiply may also be aug-
mented with some windowing method for reducing the num-
ber of modular multiplications. Finally, modular squaring
and multiplication operations can be reduced to big num-
ber multiplications by using reduction techniques such as
Montgomery’s or Barrett’s [36, 16].
(1)
5. THE ACCELERATION TECHNOLOGIES
5.1 AES Acceleration
During decryption, inverse ShiftRows is followed by in-
verse MixColumns. The inverse MixColumns transforma-
tion is shown in Equation (2)
⎡
⎢⎢⎣
output =
0xE 0xB 0xD 0x9
0xE 0xB 0xD
0x9
0xE 0xB
0xD 0x9
0xB 0xD 0x9
0xE
⎤
⎥⎥⎦ · input
(2)
The same process of the AES round is repeated 10, 12, or
14 times depending on the key size (128 , 192, or 256 bits).
The last AES round omits the MixColumns transformation.
The AES round transformation is usually implemented
using table lookups. Many software AES implementations
[8, 3] use 8-16 tables of size 1K bytes. Four tables are typi-
cally used for encryption and four for decryption. Each table
implements the SBox substitution transformation together
with Galois Field multiplication operations. To complete
an AES round, software implementations of AES perform
several table lookups, each for a diﬀerent byte of the cipher
state, and XOR the results. This procedure results in a to-
tal of 16 table lookups. Its software cost is 24 clocks or 15
cycles per byte on a 3 GHz Intel R(cid:2) CoreTM i7 processor, as-
suming all tables are in the ﬁrst level cache. Other bit slice
138techniques for implementing AES reduce this cost but not
substantially (e.g., 14 cycles per byte as reported in [40]).
As is evident from the numbers above, table lookup im-
plementations of AES are not fast enough to saturate the
high speed links (e.g., 10 Gbps) found in the Internet today.
For example, for a 3 GHz processor core the AES cost of 15
cycles per byte translates to an AES processing throughput
of 1.8 Gbps.
Table 1: AES Acceleration Instructions
Instruction
AESENC
Description
performs one round of an AES
encryption ﬂow operating on a
128-bit state and a 128-bit round key
AESENCLAST performs the last round of an AES
AESDEC
encryption ﬂow operating on a
128-bit state and a 128-bit
round key
performs one round of an AES
decryption ﬂow using the equivalent
inverse cipher operating on a
128-bit state and a 128-bit round key
AESDECLAST performs the last round of an AES
decryption ﬂow using the equivalent
inverse cipher operating on a
128-bit state and a 128-bit round key
In this paper we introduce an alternative paradigm where
block cipher rounds are implemented in combinatorial logic
as part of the ALU data path of general purpose proces-
sor architecture [6]. Moreover this logic is exposed to the
programmer as a set of instruction extensions. Using com-
binatorial logic as opposed to table lookups is a more eﬃ-
cient approach since time consuming memory lookup oper-
ations are avoided. Moreover the number of new instruc-
tions can be small and thus implementable and easy to val-
idate. For example, for AES one needs only four new in-
structions. An example set of processor instructions that
speedup AES is given in Table 1. These instructions are
named after their functionality. These instructions are AES-
ENC (AES round encryption), AESENCLAST (AES last
round encryption), AESDEC (AES round decryption) and
AESDECLAST (AES last round decryption).
The AESENC instruction implements the following trans-
formations of the AES speciﬁcation in the order presented:
ShiftRows, SBox, MixColumns and AddRoundKey. The
AESENCLAST implements ShiftRows, SBox and AddRound-
Key but not MixColumns, since the last round omits this
transformation. The AESDEC instruction implements in-
verse ShiftRows, inverse SBox, inverse MixColumns and Ad-
dRoundKey. Finally the AESDECLAST instruction imple-
ments inverse ShiftRows, inverse SBox, and AddRoundKey
omitting the inverse MixColumns transformation.
The design of these new processor instructions is moti-
vated by the structure of AES. This approach is diﬀerent
from oﬀ-loading the AES processing to a separate crypto-
graphic processor. The AES instructions of Table 1 can be
seen as cryptographic primitives for implementing not only
AES but a wide range of cryptographic algorithms. This
is because combinations of instruction invocations can be
used for creating more generic mathematical primitives for
performing computations in Galois Fields. For example,
the combination of AESDECLAST and AESENC isolates
the MixColumns transformation whereas the combination
8
of AESENCLAST and AESDEC isolates the inverse Mix-
Columns transformation. Using MixColumns and inverse
) multiplication with
MixColumns one can implement GF (2
any byte coeﬃcient. One could argue that AES acceleration
can also be provided with instructions that perform generic
computations in Galois Fields. Such instructions, however
would not achieve as good performance as our AES round
instructions, due to the need for constructing the AES round
results from the primitives.
Intel has implemented the instructions of Table 1 as ex-
tensions to the latest Intel R(cid:2) CoreTM micro-architecture [6].
The implementation of the AES instructions is pipelined
in hardware. Hardware pipelining beneﬁts modes of AES
which are parallelizable such as the counter mode (CTR),
the electronic codebook mode (ECB) and the decrypt mode
of cipher block chaining (CBC). The only popular mode
which cannot be parallelized is the encrypt mode of CBC.
Hardware pipelining is used by the programmer to hide the
latency of invoking the AES instructions by encrypting and
decrypting multiple data blocks in parallel.
5.2 Using Composite Fields
8
The main implementation challenge associated with real-
izing the processor instructions of Table 1 is how to reduce
the area requirement of the AES round logic so that it can ﬁt
into a general purpose processor architecture. General pur-
pose processors are often associated with small area budgets
for new features, due to the variety and complexity of the
circuits they include (e.g., out-of-order execution pipelines,
ﬂoating point processing logic, SIMD processing logic, etc.).
Clearly, the hardware implementation of the ShiftRows,
MixColumns and aﬃne map transformations is straightfor-
ward (i.e., wiring and/or a tree of XOR gates for each input
bit). However, the complexity of computing the multiplica-
) which is part of SBox can be sig-
tive inverse in GF (2
niﬁcant and is associated with the ﬁnite ﬁeld arithmetic.
In straightforward implementations of the AES SBox, the
multiplicative inverse function and the aﬃne map are com-
bined in a single stage usually implemented via truth table
logic, lookup memory or Binary Decision Diagram (BDD).
While such approaches are potentially easier to conceptu-
alize, they carry substantial gate-count cost required per
SBox. Consider for example the straightforward implemen-
tation of a truth table as a sum of minterms. For an 8-bit
input there are at most 256 minterms. On average there are
128. Taking the logical OR of 128 values requires 127 OR
gates. Each of the minterms results from the logical AND
of 8 inputs. Hence, the worst case number of gates required
is 8 · 8 · 127 = 8, 128. More optimized implementations are
reported in [38] requiring 2,623 2-input NAND gates for a
table lookup logic and 2,818 2-input NAND gates for a BDD
logic.
In this paper we argue that much of the SBox area require-
ment can be reduced using composite ﬁeld technologies [41,
42, 38, 35]. A composite ﬁeld is a ﬁnite ﬁeld whose elements
are vectors with coordinates in other smaller ﬁnite ﬁelds.
), where k = m · n, can be con-
k
An element of a ﬁeld GF (p
) through an isomor-
verted to the composite ﬁeld GF ((p
phism. The main reason why composite ﬁeld technologies
reduce the area requirement of AES is because they asso-
ciate a ﬁnite ﬁeld element with its inverse through an easy-
to-solve Cramer system. This system’s solution requires a
much smaller number of gates to implement.
m
n
)
139]
]
//
//
sequence
f
of
words
d
:
c
:
...
0
size
size
k
ˆ
N
N
N
N
2mod
2mod
1
(cid:16)(cid:109) (cid:16)
(cid:109)
ˆ
C