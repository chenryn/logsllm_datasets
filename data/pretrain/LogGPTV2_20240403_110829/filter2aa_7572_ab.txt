```
所以把参数全部连接起来，就可以了。
结果如下：
于是我们就成功地读取到了flag！
### 动态函数执行
用户自定义的函数可以导致代码执行。
```php
```
### 反引号命令执行
```php
```
### Curly Syntax
PHP 的 Curly Syntax 也能导致代码执行，它将执行花括号间的代码，并将结果替换回去。
```php
```
```php
```
### 回调函数
很多函数都可以执行回调函数，当回调函数用户可控时，将导致代码执行。
```php
```
攻击 payload
```
http://www.a.com/index.php?callback=phpinfo
```
### 反序列化
如果 `unserialize()` 在执行时定义了 `__destruct()` 或 `__wakeup()` 函数，则有可能导致代码执行。
```php
var);
  }
}
unserialize($_GET["saved_code"]);
?>
```
攻击 payload
```
http://www.a.com/index.php?saved_code=O:7:"Example":1:{s:3:"var";s:10:"phpinfo();";}
```
## PHP 特性
### 数组
```php
```
php 不会严格检验传入的变量类型，也可以将变量自由的转换类型。
比如在 `$a == $b` 的比较中
```php
$a = null; 
$b = false; //为真 
$a = ''; 
$b = 0; //同样为真
```
然而，PHP 内核的开发者原本是想让程序员借由这种不需要声明的体系，更加高效的开发，所以在几乎所有内置函数以及基本结构中使用了很多松散的比较和转换，防止程序中的变量因为程序员的不规范而频繁的报错，然而这却带来了安全问题。
```php
0=='0' //true
0 == 'abcdefg' //true
0 === 'abcdefg' //false
1 == '1abcdef' //true
```
### 魔法 Hash
```php
"0e132456789"=="0e7124511451155" //true
"0e123456abc"=="0e1dddada" //false
"0e1abc"=="0"  //true
```
在进行比较运算时，如果遇到了 `0e\d+` 这种字符串，就会将这种字符串解析为科学计数法。所以上面例子中 2 个数的值都是 0 因而就相等了。如果不满足 `0e\d+` 这种模式就不会相等。
### 十六进制转换
```php
"0x1e240"=="123456" //true
"0x1e240"==123456 //true
"0x1e240"=="1e240" //false
```
当其中的一个字符串是 `0x` 开头的时候，PHP 会将此字符串解析成为十进制然后再进行比较，`0x1240` 解析成为十进制就是 123456，所以与 `int` 类型和 `string` 类型的 123456 比较都是相等。
### 类型转换
常见的转换主要就是 `int` 转换为 `string`，`string` 转换为 `int`。
`int` 转 `string`
```php
$var = 5;
方式1：$item = (string)$var;
方式2：$item = strval($var);
```
`string` 转 `int`：`intval()` 函数。
对于这个函数，可以先看 2 个例子。
```php
var_dump(intval('2')) //2
var_dump(intval('3abcd')) //3
var_dump(intval('abcd')) //0
```
说明 `intval()` 转换的时候，会从字符串的开始进行转换直到遇到一个非数字的字符。即使出现无法转换的字符串， `intval()` 不会报错而是返回 0。
同时，程序员在编程的时候也不应该使用如下的这段代码：
```php
if(intval($a)>1000) {
 mysql_query("select * from news where id=".$a)
}
```
这个时候 `$a` 的值有可能是 `1002 union`。
### 内置函数的参数的松散性
内置函数的松散性说的是，调用函数时给函数传递函数无法接受的参数类型。解释起来有点拗口，还是直接通过实际的例子来说明问题，下面会重点介绍几个这种函数。
**md5()**
```php
$array1[] = array(
 "foo" => "bar",
 "bar" => "foo",
);
$array2 = array("foo", "bar", "hello", "world");
var_dump(md5($array1)==md5($array2)); //true
```
PHP 手册中的 md5（）函数的描述是 `string md5 ( string $str [, bool $raw_output = false ] )`，`md5()` 中的需要是一个 string 类型的参数。但是当你传递一个 array 时，`md5()` 不会报错，只是会无法正确地求出 array 的 md5 值，这样就会导致任意 2 个 array 的 md5 值都会相等。
**strcmp()**
`strcmp()` 函数在 PHP 官方手册中的描述是 `intstrcmp ( string $str1 ， string $str2 )`，需要给 `strcmp()` 传递 2 个 `string` 类型的参数。如果 `str1` 小于 `str2`，返回 -1，相等返回 0，否则返回 1。`strcmp()` 函数比较字符串的本质是将两个变量转换为 ASCII，然后进行减法运算，然后根据运算结果来决定返回值。
如果传入给出 `strcmp()` 的参数是数字呢？
```php
$array=[1,2,3];
var_dump(strcmp($array,'123')); //null,在某种意义上null也就是相当于false。
```
**switch()**
如果 `switch()` 是数字类型的 case 的判断时，switch 会将其中的参数转换为 int 类型。如下：
```php
$i ="2abc";
switch ($i) {
case 0:
case 1:
case 2:
 echo "i is less than 3 but not negative";
 break;
case 3:
 echo "i is 3";
}
```
这个时候程序输出的是 `i is less than 3 but not negative` ，是由于 `switch()` 函数将 `$i` 进行了类型转换，转换结果为 2。
**in_array()**
在 PHP 手册中， `in_array()` 函数的解释是 `bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )` ,如果strict参数没有提供，那么 `in_array` 就会使用松散比较来判断 `$needle` 是否在 `$haystack` 中。当 strict 的值为 true 时， `in_array()` 会比较 needls 的类型和 haystack 中的类型是否相同。
```php
$array=[0,1,2,'3'];
var_dump(in_array('abc', $array)); //true
var_dump(in_array('1bc', $array)); //true
```
可以看到上面的情况返回的都是 true，因为 `'abc'` 会转换为 0， `'1bc'` 转换为 1。
`array_search()` 与 `in_array()` 也是一样的问题。
## 寻找源代码备份
### hg 源码泄露
`hg init` 时会产生 `.hg` 文件。
[利用工具 dvcs-ripper](https://github.com/kost/dvcs-ripper)
### Git 源码泄露
`.git` 目录内有代码的变更记录等文件，如果部署时该目录下的文件可被访问，可能会被利用来恢复源代码。
```
/.git
/.git/HEAD
/.git/index
/.git/config
/.git/description
```
[GitHack](https://github.com/lijiejie/GitHack)
```shell
python GitHack.py http://www.openssl.org/.git/
```
[GitHacker（可恢复完整 Git 仓库）](https://github.com/WangYihang/GitHacker)
```shell
python GitHacker.py http://www.openssl.org/.git/
```
### `.DS_Store` 文件泄露
Mac OS 中会包含有 `.DS_Store` 文件，包含文件名等信息。
[利用工具 ds\_store\_exp](https://github.com/lijiejie/ds_store_exp)
```shell
python ds_store_exp.py http://hd.zj.qq.com/themes/galaxyw/.DS_Store
hd.zj.qq.com/
└── themes
    └── galaxyw
        ├── app
        │   └── css
        │       └── style.min.css
        ├── cityData.min.js
        ├── images
        │   └── img
        │       ├── bg-hd.png
        │       ├── bg-item-activity.png
        │       ├── bg-masker-pop.png
        │       ├── btn-bm.png
        │       ├── btn-login-qq.png
        │       ├── btn-login-wx.png
        │       ├── ico-add-pic.png
        │       ├── ico-address.png
        │       ├── ico-bm.png
        │       ├── ico-duration-time.png
        │       ├── ico-pop-close.png
        │       ├── ico-right-top-delete.png
        │       ├── page-login-hd.png
        │       ├── pic-masker.png
        │       └── ticket-selected.png
        └── member
            ├── assets
            │   ├── css
            │   │   ├── ace-reset.css
            │   │   └── antd.css
            │   └── lib
            │       ├── cityData.min.js
            │       └── ueditor
            │           ├── index.html
            │           ├── lang
            │           │   └── zh-cn
            │           │       ├── images
            │           │       │   ├── copy.png
            │           │       │   ├── localimage.png
            │           │       │   ├── music.png
            │           │       │   └── upload.png
            │           │       └── zh-cn.js
            │           ├── php
            │           │   ├── action_crawler.php
            │           │   ├── action_list.php
            │           │   ├── action_upload.php
            │           │   ├── config.json
            │           │   ├── controller.php
            │           │   └── Uploader.class.php
            │           ├── ueditor.all.js
            │           ├── ueditor.all.min.js
            │           ├── ueditor.config.js
            │           ├── ueditor.parse.js
            │           └── ueditor.parse.min.js
            └── static
                ├── css
                │   └── page.css
                ├── img
                │   ├── bg-table-title.png
                │   ├── bg-tab-say.png
                │   ├── ico-black-disabled.png
                │   ├── ico-black-enabled.png
                │   ├── ico-coorption-person.png
                │   ├── ico-miss-person.png
                │   ├── ico-mr-person.png
                │   ├── ico-white-disabled.png
                │   └── ico-white-enabled.png
                └── scripts
                    ├── js
                    └── lib
                        └── jquery.min.js
21 directories, 48 files
```
### 网站备份文件
管理员备份网站文件后错误地将备份放在 Web 目录下。
常见的后缀名：
```
.rar
.zip
.7z
.tar
.tar.gz
.bak
.txt
```
### SVN 泄露
敏感文件：
```
/.svn
/.svn/wc.db
/.svn/entries
```
[dvcs-ripper](https://github.com/kost/dvcs-ripper)
```shell
perl rip-svn.pl -v -u http://www.example.com/.svn/
```
[Seay - SVN](http://tools.40huo.cn/#!web.md#源码泄露)
### WEB-INF / web.xml 泄露
WEB-INF 是 Java Web 应用的安全目录，web.xml 中有文件的映射关系。
WEB-INF 主要包含以下文件或目录：
- `/WEB-INF/web.xml` ：Web 应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。
- `/WEB-INF/classes/` ：包含站点所有用到的 class 文件，包括 servlet class 和非 servlet class，他们不能包含在 jar 文件中。
- `/WEB-INF/lib/` ：存放 web 应用需要的各种 JAR 文件，放置仅在这个应用中要求使用的 jar 文件，如数据库驱动 jar 文件。
- `/WEB-INF/src/` ：源码目录，按照包名结构放置各个 java 文件。
- `/WEB-INF/database.properties` ：数据库配置文件。
通过找到 web.xml 文件，推断 class 文件的路径，最后直接 class 文件，再通过反编译 class 文件，得到网站源码。 一般情况，jsp 引擎默认都是禁止访问 WEB-INF 目录的，Nginx 配合 Tomcat 做均衡负载或集群等情况时，问题原因其实很简单，Nginx 不会去考虑配置其他类型引擎（Nginx 不是 jsp 引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改 Nginx 配置文件禁止访问 WEB-INF 目录就好了：
```nginx
location ~ ^/WEB-INF/* { deny all; } # 或者return 404; 或者其他！
```
### CVS 泄露
```
http://url/CVS/Root 返回根信息
http://url/CVS/Entries 返回所有文件的结构
```
取回源码
```shell
bk clone http://url/name dir
```
### 参考文献
- [记一次拿webshell踩过的坑(如何用PHP编写一个不包含数字和字母的后门)](https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html)