simultaneously call some other function execute(f ′(m′)) of νβ . This
situation is especially subtle because function execution is generally
not commutative, i.e., executing f (m) and then f ′(m′) can produce
different result than doing it in the different order. Consequently,
this could result in να and νβ having different states of their local
copies of γ. We solve this problem by delaying the execution of f (m)
until it is clear that no other function can be executed before f (m).
More precisely, the contract code VSCC is defined in such a way that
f (m) is only stored in the storage of the contract instance νA, resp.
νB. The internal execution of f (m) in νA, resp. νB, is performed only
when the contract instance is being terminated (which happens
when then virtual state channel γ is being closed).
Let us emphasize that the purpose of the description above is
to explain the concepts and main ideas of our construction. The
final protocol, however, works slightly differently due to several
optimizations. For example, in order to decrease the pessimistic
time complexity, the registration phase and the force execution
phase for virtual state channels are run in parallel (i.e. Step 1 and
Step 5 are happening in the same round). We refer the reader to
Appx. A.2 for more details about the construction.
Applying recursion. As already highlighted earlier, longer virtual
state channels are constructed recursively. The key observation that
enables this recursion is that the state channels α and β that are
5Recall again that this execution is realized by a protocol between Alice and Ingrid.
6Imagine, e.g, that the final state of G in να is that Alice gets all the coins locked in G,
and the final state of G in νβ is that Bob gets all the coins locked in G. Then Ingrid
loses these coins in both channels α and β.
7Note that it is not the case of the Clot contract, since there its always clear which
party is expected to “make a move” in the game. However, in general, we do not want
to have such restrictions on contracts in this paper.
Session 5C: Blockchain 2CCS’18, October 15-19, 2018, Toronto, ON, Canada953γ
να
G
Ingrid
4.
register
(Gw′, w′, sA)
2.
register
(Gw , w, sB)
6.
execute
(f (m))
Alice
α
1.
register
(Gw , w, sB)
5.
execute
(f (m))
νβ
β
Bob
3.
register
(Gw′, w′, sA)
Figure 3: Illustration of the forced execution process from
our example in which Alice and Bob have a virtual state
channel γ in which they opened a contract instance. Only
the function calls are shown (the messages sent by the con-
tracts are omitted).
used to build γ are accessed in a “black-box” way. In other words,
the only property of α and β needed in the construction of γ is
that one can execute off-chain contracts in them. This “black-box”
property guarantees that our virtual state channel construction
works also if the channels α and β are virtual (not ledger), or in
case one of them is virtual, and the other one is ledger.
Let us illustrate this on the situation depicted in Fig. 1. Consider
first the virtual state channel γ3 – a virtual state channel of length 3
build on top of a virtual state channel γ1 of length 2 and the ledger
state channel P3 ⇔ P4. Assume that C is the contract code whose
instances can be opened in γ3. Following the construction described
earlier in this section, γ3 can be created if both the underlying state
channels γ1 and P3 ⇔ P4 support contract instances of the virtual
state channel contract VSCC which depends on C. This, in particular,
implies that the ledger state channels P1 ⇔ P2 and P2 ⇔ P3, on
top of which the virtual state channel γ1 is created, must support
contract instances of the virtual state channel contract VSCC′ which
depends on VSCC (thus indirectly also on C).
This reasoning can be repeated for longer channels. For example,
if C is a contract code whose instances can be opened in the virtual
state channel γ4, then contract instances of VSCC must be supported
by both γ2 and γ3, contract instances of VSCC′ must be supported
by γ1, P3 ⇔ P4, P4 ⇔ P5 and P5 ⇔ P6. Finally, contract instances
of the virtual state channel contract VSCC′′, which depends on
VSCC′, must be supported by the ledger state channels P1 ⇔ P2,
P2 ⇔ P3. More details of this recursion, including the analysis of
pessimistic and optimistic timing, are provided in further sections.
Let us just mention here that in order to achieve linear pessimistic
time complexity (in the channel length), our construction assumes
that virtual state channels are built in a balanced way as in Fig. 1
(i.e. the two state channels used to build a virtual state channel
have approximately the same length).
The notion of time. In the description above we ignored the no-
tion of time. This was done to simplify this informal description.
We define this notion in the technical part of the paper (see Sec. 3.3).
In our construction parties are always aware of the current time,
and they pass the time information to the contract functions in the
state channels. Time is modeled as a natural number, and the time
unit is called a round (think of it as 1 second, say).
Other key features of our construction. An important property of
our construction and our model is that we support full concurrency.
That is, we allow several virtual state channels to be created simul-
taneously over the same ledger state channels, and allow parties to
be involved in several concurrent executions of (possibly complex)
contracts. This is possible because our ledger state channels can
store and execute several contracts “independently”.
Another important feature of our modular construction is that
it naturally allows for building channels via multiple (possible in-
compatible) cryptocurrencies as long as they have a sufficiently
complex scripting language (in particular, they allow to deploy a
state channel contract). For illustration, consider Alice having a
ledger state channel with Ingrid in cryptocurrency called “A-coin”,
and Bob having a ledger state channel with Ingrid in cryptocur-
rency called “B-coin”. Now, Alice and Bob can build a virtual state
channel over Ingrid, where Alice (resp. Bob) is oblivious of the
details of B-coin (resp. A-coin). This makes sense as long as the
exchange rate between the currencies does not change too much
during the lifetime of the virtual channel. Note that, since the vir-
tual channel opening and closing does not require interacting with
the ledger, the lifetime of a virtual state channel can be made very
short (minutes or hours). In addition, virtual state channels also
improve on privacy. This is the case because channel updates are
fully P2P and do not require involvement of intermediaries.
Finally, we point out that our concept of higher-level channel
virtualization has the key feature that it adds further “layers of
defense” against malicious parties before honest users need to com-
municate with the blockchain. Consider, for example, the situation
shown in Fig. 1. Even if P6 and the intermediary P4 in the virtual
state channel γ4 are corrupt, then P1 can resolve possible conflicts
via the intermediary P3 using the virtual state channel γ1, i.e. P1
does not need to communicate with the ledger.
3 DEFINITIONS AND SECURITY MODEL
In the sequel, following [12], we present tuples of values using
the following convention. The individual values in a tuple T are
identified using keywords called attributes: attr1, attr2, . . .. Strictly
speaking an attribute tuple is a function from its set of attributes
to {0, 1}∗. The value of an attribute attr in a tuple T (i.e. T(attr))
will be referred to as T .attr. This convention will allow us to easily
handle tuples that have dynamically changing sets of attributes.
We assume that (Gen, Sign, Vrfy) is a signature scheme that is
existentially unforgeable against a chosen message attack (see, e.g.,
[17]). The ECDSA scheme used in Ethereum is believed to satisfy
this definition.
3.1 Definitions of contracts and channels
We now present our syntax for describing contracts and channels.
The notation presented in this section can be viewed as an extension
of the one used in [12]. In the rest of this paper we assume that the
set P = {P1, . . . , Pn} of parties that use the system is fixed.
Session 5C: Blockchain 2CCS’18, October 15-19, 2018, Toronto, ON, Canada954Contracts. We consider only contracts executed between two
parties. A contract storage is an attribute tuple σ that contains at
least the following attributes: (1) σ .userL, σ .userR ∈ P that denote
the users involved in the contract, (2) σ .locked ∈ R≥0 that denotes
the total amount of coins that is locked in the contract and (3)
σ .cash: {σ .userL, σ .userR} → R that denotes the amount of coins
that the users have freely available. It must hold that σ .locked ≥
σ .cash(σ .userL) + σ .cash(σ .userR). Let us explain the difference
between locked coins and freely available coins as well as the above
inequality on a concrete example. Assume that parties are playing
a game where each party initially invests 5 coins. During the game,
parties make a bet, where each party puts 1 coin in the “pot". Now
the amount of coins locked in the game did not change, it is still
equal to 10 coins; however, the amount of freely available coins
decreased (each party has only 4 freely available coins). In addition
to the attributes mentioned above, a contract storage may contain
other application-specific data.
We will now define formally the notion of contract code that
was already described informally in Sec. 1. Formally a contract
code consists of some functions (in Ethereum they are written
in Solidity) that operate on contract storage. The set of possible
contract storages is usually restricted (e.g. the functions expect
that it has certain attributes defined). We call the set of restricted
storages the admissible contract storages and typically denote it Λ.
Formally, we define a contract code as a tuple C = (Λ, д1, . . . ,
дr , f1, . . . , fs), where Λ are the admissible contract storages and
д1, . . . , дr are functions called contract constructors, and f1, . . . , fs
are called contract functions. Each contract constructor дi is function
that takes as input a tuple (P, τ , z), with P ∈ P, τ ∈ N, and z ∈
{0, 1}∗, and produces as output an admissible contract storage σ
or a special symbol ⊥ (in which case we say that the contract
construction failed). The meaning of these parameters is as follows:
P is the identity of the party that called the function, τ is the current
round (see Sec. 3.3 for more on how we model time and rounds),
and z is used to pass additional parameters to дi. The constructors
are used to create a new instance of the contract. If the contract
construction did not fail, then дi(P, τ , z) is the initial storage of a
new contract instance.
Each contract function fi takes as input a tuple (σ , P, τ , z), with
σ ∈ Λ being an admissible contract storage, P ∈ {σ .userL, σ .userR},
τ ∈ N and z ∈ {0, 1}∗ (the meaning of this parameters is as before).
It outputs a tuple ( ˜σ , addL, addR , m), where ˜σ is the new contract
storage (that replaces contract storage σ in the contract instance),
values addL, addR ∈ R≥0 correspond to the amount of coins that
were unlocked from the contract storage to each user (as a result
of the execution of fi), and m ∈ {0, 1}∗ ∪ {⊥} is an output message.
If the output message is ⊥, we say that the execution failed (we
assume that the execution always fails if a function is executed
on input that does not satisfy the constraints described above, e.g.,
it is applied to σ that is not admissible). If the output message
m (cid:44) ⊥, then we require that ˜σ is an admissible contract storage
and the attributes userL and userR in ˜σ are identical to those in σ.
In addition, it must hold that addL + addR = σ .locked − ˜σ .locked.
Intuitively, this condition guarantees that executions of a contract
functions can never result in unlocking more coins than what was
originally locked in the contract storage.
As described in Sec. 1 a contract instance represents an instan-
tiation of a contract code. Formally, a contract instance is an at-
tribute tuple ν with a contract storage and code, where ν .code =
(Λ, д1, . . . , дr , f1, . . . , fs) is a contract code, and ν .storage ∈ Λ is a
contract storage.
Ledger state channel. We next present our terminology for ledger
state channels, which is inspired by the notation for payment chan-
nels used in [12]. Formally, a ledger state channel γ is defined as
an attribute tuple γ := (γ .id, γ .Alice, γ .Bob, γ .cash, γ .cspace). We
call the attribute γ .id ∈ {0, 1}∗ the identifier of the ledger state
channel. Attributes γ .Alice ∈ P and γ .Bob ∈ P are the identities of
parties using the ledger state channel γ. For convenience, we also
define the set γ .end–users := {γ .Alice, γ .Bob} and the function
γ .other–party as γ .other–party(γ .Alice) := γ .Bob and γ .other–
party(γ .Bob) := γ .Alice. The attribute γ .cash is a function map-
ping the set γ .end–users to R≥0 such that γ .cash(T) is the amount
of coins the party T ∈ γ .end–users has locked in the ledger state
channel γ. Finally, the attribute γ .cspace is a partial function that
is used to describe the set of all contract instances that are cur-
rently open in this channel. It takes as input a contract instance
identifier cid ∈ {0, 1}∗ and outputs a contract instance ν such that
{ν .storage.userL, ν .storage.userR} = γ .end–users. We will refer
to γ .cspace(cid) as the contract instance with identifier cid in the
ledger state channel γ.
Virtual state channel. Formally, a virtual state channel γ is a tuple
γ := (γ .id, γ .Alice, γ .Bob, γ .Ingrid, γ .subchan, γ .cash, γ .cspace, γ .
length, γ .validity). The attributes γ .id, γ .Alice, γ .Bob, γ .cash and
γ .cspace, are defined as in the case of a ledger state channel. The
same holds for the set γ .end–users and the function γ .other–party.
The new attribute γ .Ingrid ∈ P denotes the identity of the inter-
mediary of the virtual state channel. For technical reasons (see the
full version of this paper [13] for more on this) we restrict γ .cspace
for virtual state channels to contain only a single contract instance.
We emphasize that this is not a restrictions of the functionality
since ledger state channels support an arbitrary number of con-
tract instances, and hence we can build any number of virtual state
channels.
The attribute γ .subchan is a function mapping the set γ .end–
users to {0, 1}∗. The value of γ .subchan(γ .Alice) equals the identi-
fier of the ledger/virtual state channel between γ .Alice and γ .Ingrid.
Analogously for the value of γ .subchan(γ .Bob). We often call these
channels the subchannels of the virtual state channel γ. The attribute
γ .validity denotes the round in which the virtual state channel γ
will be closed (see Sec. 3.3 for more on the notion of rounds). The
reason to have this parameter is to ensure that the channel γ will not
remained open forever. Otherwise γ .Ingrid could have her money
blocked forever, as (unlike γ .Alice and γ .Bob) she cannot herself
request the channel closing. Finally, the attribute γ .length ∈ N>1
refers to the length of the virtual state channel, i.e., the number of
ledger state channels over which it is built. For example in Fig. 1
(see Page 3) we have: γ1.length = 2, γ2.length = 2, γ3.length =
3, γ4.length = 5. Sometimes it will be convenient to say that ledger
state channels have length one.
Session 5C: Blockchain 2CCS’18, October 15-19, 2018, Toronto, ON, Canada9553.2 Security and efficiency goals
Before presenting our formal security model in Sec. 3.3, let us start
by listing some security guarantees that are desirable for a state