title:Marmite: Spreading Malicious File Reputation Through Download Graphs
author:Gianluca Stringhini and
Yun Shen and
Yufei Han and
Xiangliang Zhang
Marmite: Spreading Malicious File Reputation Through
Download Graphs
Gianluca Stringhini, Yun Shen♣, Yufei Han♣, and Xiangliang Zhang♠
University College London, ♣Symantec Research Labs, ♠King Abdullah University of Science and Technology
PI:EMAIL, {yun shen,yufei han}@symantec.com, PI:EMAIL
ABSTRACT
E(cid:130)ective malware detection approaches need not only high accu-
racy, but also need to be robust to changes in the modus operandi
of criminals. In this paper, we propose Marmite, a feature-agnostic
system that aims at propagating known malicious reputation of
certain (cid:128)les to unknown ones with the goal of detecting malware.
Marmite does this by looking at a graph that encapsulates a com-
prehensive view of how (cid:128)les are downloaded (by which hosts and
from which servers) on a global scale. (cid:140)e reputation of (cid:128)les is
then propagated across the graph using semi-supervised label prop-
agation with Bayesian con(cid:128)dence. We show that Marmite is able
to reach high accuracy (0.94 G-mean on average) over a 10-day
dataset of 200 million download events. We also demonstrate that
Marmite’s detection capabilities do not signi(cid:128)cantly degrade over
time, by testing our system on a 30-day dataset of 660 million down-
load events collected six months a(cid:137)er the system was tuned and
validated. Marmite still maintains a similar accuracy a(cid:137)er this
period of time.
1 INTRODUCTION
(cid:140)e malware ecosystem is constantly evolving, with cybercriminals
both devising new ways to monetize their malicious so(cid:137)ware (e.g.,
ransomware [14]) and devising more e(cid:129)cient techniques to deliver
malicious payloads to victim computers (e.g., exploit kits [8] or pay-
per-install services [5], as well as developing techniques that make
their operations stealthier and more resilient — e.g., Fast Flux [9]
or Domain Generation Algorithms (DGA) [3].
Traditionally, malware detection is based on static [18, 31] or
dynamic [6, 15] analysis. Such techniques, however are prone
to evasion [12] and require a considerable amount of computa-
tional resources to carry out their inspections. More recently,
the security research community has proposed approaches that
are content-agnostic, performing detection without looking at the
malware sample itself. Some of these techniques detect malware
by looking at the characteristics of malware delivery infrastruc-
tures [5, 27, 30, 35]. Others identify topological relations among
hosts and IP addresses in the hosting infrastructure used by cyber-
criminals [11, 20, 41], crawl potential malicious hosting sites in a
proactive fashion [10, 32], analyze (cid:128)le co-occurrence relationships
Permission to make digital or hard copies of all or part of this work for personal or 
classroom use is granted without fee provided that copies are not made or distributed 
for pro(cid:128)t or commercial advantage and that copies bear this notice and the full citation 
on the (cid:128)rst page. Copyrights for components of this work owned by others than the 
author(s) must be honored. Abstracting with credit is permi(cid:138)ed. To copy otherwise, or 
republish, to post on servers or to redistribute to lists, requires prior speci(cid:128)c permission 
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2017, Orlando, FL, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to ACM. 
978-1-4503-5345-8/17/12. . . $15.00
DOI: 10.1145/3134600.3134604
on infected computers [23, 36], or get insights from downloader-
payload relationships of (cid:128)les on a host [19]. (cid:140)e problem with
most of these content-agnostic approaches is that they use features
that are based on common characteristics of malware delivery in-
frastructures, but these characteristics can change over time due
to normal evolution or a(cid:138)empts to evade detection. For example,
if certain characteristics relating to network topology or payload
dropping change signi(cid:128)cantly, the classi(cid:128)ers must be retrained to
maintain acceptable detection rates.
More importantly, the security community is now able to collect
a very large amount of information at an unprecedented scale, e.g.,
amassing hundreds of millions of malware samples distributed glob-
ally on a daily basis. But how to e(cid:129)ciently identify malware from
such large datasets remains a challenge. To address this Big Data
challenge, we propose a solution that is principled, in the sense that
it does not rely on a speci(cid:128)c modus operandi of malware operators
or on speci(cid:128)c features of malware delivery networks. Instead of
trying to understand whether a network delivery infrastructure is
malicious, or identify (cid:128)les as malware from their characteristics or
local view of (cid:128)le downloads, we leverage the known reputation of
a small number of malicious and benign (cid:128)les, and propagate this
information to other (cid:128)les that shared some part of the delivery in-
frastructure with them, with the goal of (cid:131)agging them as benign or
malicious. Our system, called Marmite, (cid:128)rst builds a global graph
of (cid:128)le delivery, which we call download graph. Such a graph embod-
ies a comprehensive view of how (cid:128)les are downloaded (by which
hosts and from which servers and which (cid:128)les they drop) on a global
scale. Marmite is agnostic to the type of protocol used to host the
(cid:128)les, to the type of the (cid:128)les themselves, to the speci(cid:128)c techniques
used by malware operators to avoid detection (such as Fast-Flux
and DGA) and is therefore generic and resilient to evasion. In the
next step, Marmite performs semi-supervised label propagation
with Bayesian con(cid:128)dence to propagate the reputation of known
malicious (cid:128)les to unknown ones, allowing us to signi(cid:128)cantly and
e(cid:129)ciently grow our knowledge of malware samples.
A key advantage of Marmite is that it requires limited ground
truth to operate, and it can grow the initial knowledge of malware
signi(cid:128)cantly with a guaranteed linear computational complexity,
which is a desirable characteristic in dealing with extremely large-
scale datasets. We validate Marmite on a dataset of 200 million
download events collected by Symantec over a period of ten days.
We show that our system is able to reach high accuracy (0.94 G-
mean on average) and grow our knowledge of malicious samples
up to 11 times, requiring a limited number of malware ground
truth samples for seeding. An additional desirable property for a
malware detection system is to keep their accuracy for long periods
of time. (cid:140)is is a particularly important requirement, given the pace
at which malware operations evolve. To test whether Marmite is
91able to retain similar accuracy over time, we test our system on a
30-day dataset of 660 million download events that was collected
by Symantec six months a(cid:137)er the system was tuned. We show that
Marmite is still e(cid:130)ective even a(cid:137)er this long time, without any
need for re-tuning.
Our analysis highlights idiosyncrasies of malware delivery on
the Internet that generate limited but systematic false positives
when running label propagation approaches such as Marmite. For
instance, it is common to have malware delivered through legiti-
mate Content Delivery Networks (CDNs), and this can cause benign
(cid:128)les to be tainted and mistakenly considered as malicious. Simi-
larly, we observe that malicious (cid:128)les, and in particular potentially
unwanted programs (PUPs [17]), have the tendency to download
legitimate libraries (DLLs) as additional components. (cid:140)e bad repu-
tation of the PUPs can then be propagated to these other (cid:128)les by
Marmite. We provide detailed examples of these phenomena, and
we propose a simple whitelist approach to reduce Marmite’s false
detections. We show that these systematic false positives do not
change signi(cid:128)cantly over time, and a whitelist compiled six month
before deployment is e(cid:130)ective in signi(cid:128)cantly reducing the false
detection rate of Marmite.
In summary, this paper makes the following contributions:
• We propose Marmite, a system based on semi-supervised
Bayesian label propagation to propagate the reputation
of known (cid:128)les across a download graph that depicts (cid:128)le
delivery networks (both legitimate and malicious). (cid:140)e
model is designed to be scalable and e(cid:129)cient.
• We validate Marmite on a dataset of 200 million down-
loads collected in the wild. We show that Marmite does
not need carefully cra(cid:137)ed seeds to catch malicious (cid:128)les,
and a limited set of known malicious (cid:128)les is enough to seed
a system with limited false positives.
• We show that Marmite does not require frequent retuning
by testing it on a dataset of 660 million downloads collected
six months a(cid:137)er the system was tuned. We demonstrate
that a simple whitelisting of (cid:128)les is enough to dramatically
reduce the false positives reported by Marmite.
2 BACKGROUND AND MOTIVATION
Figure 1: Local view of (cid:128)le distribution network via end-
points. Each graph is built from the local view from one of
the end user machines.
To illustrate the complexity of keeping track of malware sam-
ples across di(cid:130)erent distribution infrastructures, consider the real
world example in Figure 1. Each graph is built by looking at the
Figure 2: Global view of (cid:128)le distribution network. (cid:135)is
graph includes the information that the same malware sam-
ple has been delivered by two separate servers.
download activity of a single end user’s computer, similarly to
what was done in [19]. (cid:140)ere are two servers delivering mal-
ware, each with a distinct IP address as well as a separate domain
(absoluterejuven.com and amalgamatedcoatings.com). Each
malicious server drops two di(cid:130)erent malicious (cid:128)les over its lifetime,
to a di(cid:130)erent victim computer each. In particular, the malicious (cid:128)le
identi(cid:128)ed by the SHA2 value 4B914... is dropped by both servers.
One solution to (cid:131)ag these (cid:128)les as malware is to blacklist the mali-
cious hosts dropping them, and consequently consider as malware
any executable dropped by those hosts. A problem with this tech-
nique is that blacklists typically have coverage problems [26, 29],
and if only one of the two hosts ended up in the blacklist then
there would be a malware sample that would escape detection (ei-
ther 7379C... or 9DBD9...). Another option is to blacklist (cid:128)les
as they are observed, for example by running them in a sandbox
and (cid:131)agging anomalous behavior [39]. (cid:140)e problem with this type
of techniques is that malware authors are actively trying to evade
sandbox systems, and for this reason these approaches have limited
coverage too. If a sandbox system was able to detect only the mal-
ware sample identi(cid:128)ed by 4B914... as malicious, then the other
two would escape detection.
To mitigate the aforementioned limitations, previous work fo-
cused on studying (cid:128)le dropping relationships a(cid:137)er the malicious
(cid:128)les are downloaded on victim computers [13, 19]. (cid:140)ese approaches
build local (cid:128)le dropping graphs extracted from endpoints (similar
to Figure 1), extract features from these local graphs, and leverage
machine learning algorithms to detect malicious droppers. While
these approaches are e(cid:130)ective in detecting droppers (i.e., malware
samples that download additional components, for example as part
of pay-per-install schemes), they do not provide a global view of
the malware delivery ecosystem, and therefore their detection is
also limited. For example, it is not guaranteed that any of the two
aforementioned systems would be able to (cid:131)ag the (cid:128)les 7379C... on
machine1 and 4B914... on machine2 as malware. (cid:140)is could hap-
pen because the localized view leveraged by these systems requires
local graphs to be complex to guarantee an e(cid:130)ective detection (e.g.,
to be part of a dropper operation in [19] or to have multiple infec-
tions on the same machine in [13]), or because the features relating
to malware delivery infrastructures (e.g., the number of unique
domains [19]) have changed since the time the detection systems
were trained, and the detection e(cid:129)ciency of the systems decreased
signi(cid:128)cantly since then.
As we said, in this paper we propose to approach the problem of
detecting malware in a principled way, by looking at the end-to-
end (cid:128)le distribution from a global perspective instead of focusing
machine1machine3URL: http://absoluterejuven.com/oﬀerjk435/css/3e2d22ef2.exeSHA2: 9DBD9…Filename: XJQnhA.exeSHA2: 7379C…Filename: CbqWRRI.exeFQDN: absoluterejuven.comIP: 104.130.86.40SHA2: 4B914…Filename:XJQnhA.exemachine4URL: http://amalgamatedcoatings.com/images/images/3e2d22ef2.exeFQDN: amalgamatedcoatings.comIP: 98.129.229.168machine2SHA2: 4B914…Filename: CbqWRRI.exeFQDN: absoluterejuven.comFQDN: amalgamatedcoatings.comURL: http://absoluterejuven.com/oﬀerjk435/css/3e2d22ef2.exeURL: http://amalgamatedcoatings.com/images/images/3e2d22ef2.exe1468579URL: http://absoluterejuven.com/oﬀerjk435/css/3e2d22ef2.exe3SHA2: 9DBD9…Filename: XJQnhA.exeSHA2: 7379C…Filename: CbqWRRI.exeFQDN: absoluterejuven.comIP: 104.130.86.40URL: http://amalgamatedcoatings.com/images/images/3e2d22ef2.exeFQDN: amalgamatedcoatings.comIP: 98.129.229.1682SHA2: 4B914…Filename: CbqWRRI.exe                  XJQnhA.exe92on local views or relying on speci(cid:128)c features of malware delivery
networks (as previous systems did [11, 27]). In fact, the only re-
quirement for Marmite is for malicious hosts to drop a multitude
of malicious (cid:128)les, possibly dropped by other servers too. As these
requirements are needed by the malware delivery process to be
e(cid:130)ective, they are not likely to change. Figure 2 shows an example
of the download graph built by Marmite, obtained by merging
the localized information from Figure 1. As it can be seen, this
graph includes the information that the malicious (cid:128)le identi(cid:128)ed
by 4B914... is downloaded by two separate servers. (cid:140)anks to
this global view, we can leverage structural information to detect
malware when we only know that some of the (cid:128)les are malicious
— as we will see in Section 3, we do this by probabilistically prop-
agating labels across the download graph. For example, if node 1
in Figure 2 was initially (cid:131)agged as malicious, node 2 and node 3
could be (cid:131)agged as well since the boundary between hosts and ma-
chines no longer exists in this representation, and the evidence of
maliciousness could be propagated along the graph. Ideally, a very