the approximated ground truth. However, many changes are considered to be ephemeral
or short-lived, which is the second problem that must be handled. In other words, certain
ports appear for a short while and then disappear without exhibiting real conﬁguration
changes. Many client programs may exhibit this behavior. For example, the client side
of Apple’s iTunes uses port 5353 to communicate with each other for sharing. P2P
download software is another example. This type of changes provide little value in re-
vealing the temporal correlations between changes and triggering events, due to their
short lifetime.
As a result, we only consider those long-term or permanent changes to study their
temporal correlations with triggering events. However, the word ‘permanent’ is not well
deﬁned, given the limited experiment period. Thus, for the simplicity of analysis, we
only examine hosts that had exactly one change during the entire 16-day period because
these changes are most likely to be permanent unless they were detected at the very end
of the experiment. Among the 535 hosts, 25 of them fall into this category. Though this
is not statistically signiﬁcant, they still provide important clues for us to ﬁnd appropriate
policy setting for the target network. Recall that our conjecture is that most permanent
changes have network evidence that can be witnessed and used for creating triggers to
achieve timely detection. By manually going through all these changes and analyzing all
logged events that happened around the time when the changes were detected, we ﬁnd
56% of them have network evidence that has strong temporal correlation with changes,
which means they either have triggered or could have triggered scans to detect the
changes.
Table 3 is a summary of the analysis results in detail. Several things should be noted
here. First, all the permanent changes we studied that were captured by timeout exhib-
ited no network evidence at all. This is a limitation of our system using pure network
events. Unless some level of host information is monitored, this timeout-based method
cannot be completely replaced with the trigger-based approach. In addition, a signiﬁ-
cant portion of changes were detected via DHCP and ARP events, which corresponded
152
Y. Xu et al.
to hosts reboots. This is reasonable because many conﬁguration changes may not take
effect until the host is restarted. Finally, the rest of the changes corresponded to activi-
ties on the service or process level.
Moreover, we argue that although ephemeral changes may not be helpful in studying
the temporal correlations, they are still relevant to risk assessment. Despite the possi-
bility of being exploited by sophisticated attackers, many short-lived but well-known
ports may be used to tunnel malicious trafﬁc for cutting through ﬁrewalls. For exam-
ple, the TCP event monitor captured some occasional events through port 80 for certain
hosts, while the application event monitor failed to ﬁngerprint any version informa-
tion for them, which means the trafﬁc did not follow the HTTP protocol. Thus, in both
cases, it is valuable to detect these short-lived changes, but there is no guarantee for the
loop scanner to achieve this goal. In fact, the loop scanner tends to miss most of these
changes once its scanning period greatly increases (e.g., in the order of weeks). With
the help of TCP events, CANVuS can ﬁre scans immediately after there is trafﬁc going
through these ports. And there are 35 changes exclusively captured by CANVuS that
fall in this category. Conversely, if there is no trafﬁc ever going through the short-lived
ports, while CANVuS may also miss them, the resulting risk is much lower because
attackers have no chance to leverage them either.
6.5 Scalability Requirements of the Context-Aware Architecture
Figures 5 and 6 constitute a summary for the scale of the data from the departmen-
tal monitors done in hour intervals. The number of raw packets or ﬂows per hour is
counted in Figure 5. This raw data was observed at the various network monitors and
probes before being converted by the Context Manager into the network state database.
We note that the ﬁrst three days worth of data are missing in our graph due to the mis-
conﬁguration of the monitoring infrastructure. For the duration of our experiment, we
observed ﬂows on the order of 16 million per hour at its peak and on average around 4
million per hour. Other noticeable observations include a typical average of 1 million
DNS packets per hour and about 12 thousand ARP packets per hour. These four graphs
in Figure 5 show that this system must handle adequately large volumes of trafﬁc due
to its distributed nature.
Figures 6 shows the number of events per hour that triggered scans after being con-
verted by the Context Manager. Compared to the graphs in Figure 5, the volume of
events generated from the raw data was greatly reduced. To highlight the number of
ﬂows and DNS packets went from the order of millions to the low hundreds. ARP
packets when from the order of thousands to tens. This shows that our Context Man-
ager is able to greatly reduce large volumes of data to something manageable for our
event-based vulnerability scanning.
In addition, the cumulative number of unique MAC addresses in the departmental
network is shown in Figure 7, which quantiﬁes the scale of the physical boxes within
the department (only for the second measurement point) that should be audited. We ob-
served that slight bumps indicate new observances of MAC addresses over the course
of a day while plateaus occurred over the weekends. We speculate that the observance
of new, unique MAC addresses will level off if given a longer period of time to run
our experiments. This graph also gives insight in bounding to the amount of raw and
CANVuS: Context-Aware Network Vulnerability Scanning
153
1.6e+07
12.e+07
8e+06
4e+06
0
4e+06
3e+06
2e+06
1e+06
0
35,000
30,000
25,000
20,000
15,000
10,000
5000
0
s
w
o
ﬂ
f
o
#
s
t
e
k
c
a
p
S
N
D
f
o
#
s
t
e
k
c
a
p
P
C
H
D
f
o
#
1.6e+05
1.2e+05
8e+04
4e+04
s
t
e
k
c
a
p
P
R
A
f
o
#
0
0
50
100
150
200
Time (hours)
250
300
350
400
s
t
n
e
v
e
P
C
T
f
o
#
s
t
n
e
v
e
S
N
D
f
o
#
800
600
400
200
0
500
400
300
200
100
0
s
t
n
e
v
e
P
C
H
D
f
o
#
1200
1000
800
600
400
200
0
s
t
n
e
v
e
P
R
A
f
o
#
80
60
40
20
0
0
50
100
150
200
Time (hours)
250
300
350
400
Fig. 5. The scale of the raw data
Fig. 6. The scale of the events
event-generated trafﬁc that would be observed by the detection of fewer and fewer
unique MAC addresses.
7 Risk Mitigation and Analysis
In this section, we examine our efforts in minimizing the harm to users, services, hosts,
and network infrastructure while performing our experiments. We understand that ac-
tive probing involves the use of network resources and interaction with product services.
In consultation with the Computer Science and Engineering Departmental Computing
Ofﬁce, the College of Engineering Computer Added Engineering Network, and the Uni-
versity of Michigan ofﬁce of Information and Infrastructure Assurance, we developed
the following research plan to mitigate the impact on hosts, services, and network in-
frastructure: (i) to minimize the effect of network scanning, we limited the bandwidth
available to our scanning devices, (ii) We implemented a whitelisting feature to our
scanning, and the engineering computer organization broadcasted an opt-out message
to all departmental organizations prior to our experiment (along with the complete re-
search plan), (iii) We applied only those polices consistent with the Nessus “Safe Check
Only” label.
Acknowledging that a network’s security context is considered sensitive informa-
tion and data such as MAC addresses and IP addresses have been viewed as personally
154
Y. Xu et al.
s
C
A
M
f
o
r
e
b
m
u
n
d
e
t
a
l
u
m
u
c
c
A
4000
3500
3000
2500
2000
1500
1000
500
0
0
50
100
150
200
Time (hours)
250
300
350
400
Fig. 7. The accumulated number of unique MAC addresses in the departmental network
identiﬁable information in several contexts, we took steps to assure that the “research
records, data and/or specimens be protected against inappropriate use or disclosure, or
malicious or accidental loss or destruction” according to our IRB guidelines. This in-
cludes, but is not limited to the following ofﬁcial categories: Locked ofﬁce, Restricted
access, Restrictions on copying study-related materials, Access rights terminated when
authorized users leave the project or unit, Individual ID plus password protection, En-
cryption of digital data, Network restrictions, No non-UM devices are used to access
project data, Security software (ﬁrewall, anti-virus, anti-intrusion) is installed and regu-
larly updated on all servers, workstations, laptops, and other devices used in the project.
Due to the technical nature of the work, we did not seek IRB approval for the project
as we did not feel they were prepared to understand the risks of this work. The pro-
posed research plan was instead approved through the College of Engineering Dean of
Research, and additionally approved by the departmental, college, and university com-
puting organizations speciﬁed above.
8 Limitations and Future Work
While our initial evaluation demonstrates the promise of a context-aware approach to
vulnerability scanning, it does highlight several limitations which form the foundation
for future work in this area. First, the accuracy of our evaluation is hampered by the
use of network vulnerability scanning results as the sole ground truth for measuring
host conﬁguration changes. In addition to the previously discussed limitation that a
network-based scanner provides only an approximate view of a host changes, this ap-
proach also limited the granularity of our measurements to the polling frequency of the
network scanner. To overcome this issue, we plan on developing a host agent that is
capable of collecting ﬁne-grained information on local changes and deploying it on a
network with a large number of different hosts (e.g., end hosts vs. application servers).
A second rich area for future work is the exploration of new triggers (either new events
or combinations of these events) for host conﬁguration changes. Currently, the most ef-
fective events were generated by the DHCP monitor and corresponded to host reboots.
CANVuS: Context-Aware Network Vulnerability Scanning
155
In the future, we plan to increase the diversity of trigger events and explore other types
of network evidence for host changes.
9 Conclusion