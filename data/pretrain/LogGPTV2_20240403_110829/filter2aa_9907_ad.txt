.SS "Optics Storage 接口"
语法为：
.IP
optcd=iobase
.LP
.SS "Phillips CM206 接口"
语法是：
.IP
cm206=[iobase][,irq]
.LP
该驱动程序会假定所给的 3 到 11 之间的值是设置的 IRQ 值，
数值在 0x300 到 0x370 之间的值是 I/O 端口号，
因此你可以指定一个，或者可以指定两个，且没有特殊的位置要求。
它也接受 "cm206=auto" 参数来实现自动检测。
.SS "The Sanyo 接口"
语法是：
.IP
sjcd=iobase[,irq[,dma_channel]]
.LP
.SS "SoundBlaster Pro 接口"
语法是：
.IP
sbpcd=iobase,type
.LP
这里 type 是下面这些字符串的一种（大小写敏感的）：
`SoundBlaster', `LaserMate', 或 `SPEA'.  
I/O 地址是光盘驱动器接口的，并不是声卡的一部分。
.SH "以太网络设备"
不同的驱动程序使用不同的参数，但是至少它们都会要使用一个 IRQ，一个 I/O 端口地址，
一个名字。下面是最为普遍的参数设置格式：
.IP
ether=irq,iobase[,param_1[,...param_8]],name
.LP
第一个非数值的参数被作为名字使用。
param_n 的值（如果可以使用的话）对于不同的卡/驱动程序来说往往具有不同的含义。
典型的 param_n 的值用来指定象共享的内存地址，接口选择，DMA 通道等等。
该参数最普遍的用法是强迫进行第二以太网卡的检测。
因为作为缺省的情况来说，内核只是检测第一块以太网卡。
下面是实现第二以太网卡检测的简单方法：
.IP
ether=0,0,eth1
.LP
注意这里 IRQ 和 I/O 的值都是 0，这个表示值需要进行自动检测。
以太网的 HowTo 文件对于多网卡的使用，网卡/驱动程序的指定，
param_n 数值的使用都有详细的介绍。
有兴趣的读者可以参考该文档中对自己拥有的卡的说明。
.SH "软盘驱动器驱动程序"
软盘驱动程序选项有很多，它们在 linux/drivers/block 目录下的 README.fd 中列举出来。
这些信息就是摘自那个文件。
.SS "floppy=mask,allowed_drive_mask"
设置允许进行掩码设置的驱动程序将掩码设置为 mask。
在缺省情况下，只有每个软盘控制器的 0 号和 1 号单元允许这样做。
这样规定的原因是有一些非标准的硬件（华硕的 PCI 主板）在访问 2 号或者 3 号单元时，
会令键盘发生问题。该选项差不多已被 cmos 选项所取代了。
.SS "floppy=all_drives"
为所有的软盘驱动器设置驱动器掩码。
如果你在一个软盘控制器上拥有两个驱动器的话，你就可以这么做。
.SS "floppy=asus_pci"
设置掩码为只允许 0 号和 1 号单元。（缺省值）
.SS "floppy=daring"
告诉软盘驱动程序你有一个比较好的软盘控制器。
这样的设置可以使你的设备运行得更加有效和顺利，
但是对于某些特定的控制器，这可能会引起错误，也可能会加快某些操作的速度。
.SS "floppy=0,daring"
告诉软盘驱动程序你的软盘控制器需要谨慎的运行。
.SS "floppy=one_fdc"
告诉软盘驱动程序你只有一个软盘控制器。（缺省值）
.SS "floppy=two_fdc or floppy=address,two_fdc"
告诉软盘驱动程序你拥有两个软盘控制器。第二个控制器假设位于 address 值。
如果 address 的值没有给出的话，0x370 被当成假想位置。
.SS "floppy=thinkpad"
告诉软盘驱动程序你有一个 Thinkpad 电脑。Thinkpad 的磁盘变更线路与通常的机器相反。
.SS "floppy=0,thinkpad"
告诉软盘驱动程序你没有一个 Thinkpad 电脑。
.SS "floppy=drive,type,cmos"
设置 CMOS 的类型为 type 值。条件是驱动器在掩码中被置"允许"。
如果你有两个以上的软盘驱动器（在实际的 CMOS 设置中只能设置两个），
或者你的 BIOS 使用的是非标准的 CMOS 类型，这是非常有用的。
把前面两个软盘驱动器的 CMOS 设置为 0（缺省值）
使得软盘驱动程序从实际的 CMOS 设置中读取它们的信息。
.SS "floppy=unexpected_interrupts"
当接收到一个异常时显示相应的消息。（缺省行为）
.SS "floppy=no_unexpected_interrupts or floppy=L40SX"
如果出现异常，也不要提示。IBM L40SX 在某些特定的显示模式下需要这个选项。
（这看起来象是视频和软盘之间有某种交互关系。
异常中断只会影响性能，所以能够被安全的忽略）
.SH "声卡驱动程序"
声卡驱动程序也能够接受启动参数来替代编译时使用的值。
这种方法并不值得推荐，因为这样会更复杂。
参数说明在 /linux/drivers/sound/Readme.Linux 文件中描叙。它接受如下格式的启动参数：
.IP
sound=device1[,device2[,device3...[,device10]]]
.LP
这里每个 deviceN 是类似于 0xTaaaId 这样格式的值，其中各字符表示为：
T - 设备类型: 1=FM, 2=SB, 3=PAS, 4=GUS, 5=MPU401, 6=SB16,
7=SB16-MPU401。
aaa - 16 进制的 I/O 地址。
I - 16 进制表示的中断地址 。
d - DMA 通道号。
这样的格式看起来是很混乱的，你最好在编译的时候就使用你知道的值。
使用 "sound=0" 的参数将会完全屏蔽声卡驱动程序。
.SH "ISDN 驱动程序"
.SS "ICN ISDN 驱动程序"
语法：
.IP
icn=iobase,membase,icn_id1,icn_id2
.LP
这里 icn_id1 和 icn_id2 是两个字符串，用来为核心消息提供卡的名字。
.SS "PCBIT ISDN 驱动程序"
语法：
.IP
pcbit=membase1,irq1[,membase2,irq2]
.LP
这里 membaseN 是第 N 块卡其共享内存的地址，irqN 是第 N 块卡的中断值。
缺省值是 IRQ 5 和内存地址 0xD0000。
.SS "Teles ISDN 驱动程序"
语法：
.IP
teles=iobase,irq,membase,protocol,teles_id
.LP
这里 iobase 是卡的 I/O 端口地址，membase，irq 的意义与上面的一样，
teles_id 是唯一的 ASCII 字符串标识。
.SH "串口驱动程序"
.SS "RISCom/8 多串口驱动程序 (`riscom8=')"
语法:
.IP
riscom=iobase1[,iobase2[,iobase3[,iobase4]]]
.LP
更多的细节请参考
.IR /usr/src/linux/Documentation/riscom8.txt .
.SS "DigiBoard 驱动程序 (`digi=')"
如果该选项被使用，则应该使用 6 个参数。
语法：
.IP
digi=status,type,altpin,numports,iobase,membase
.LP
参数可以是整数值，也可以是字符串值。
如果使用了字符串，则 iobase 和 membase 参数需要使用 16 进制的形式。
整型参数值按顺序为：
status (允许(1) 或屏蔽(0)该卡),
type (PC/Xi(0), PC/Xe(1), PC/Xeve(2), PC/Xem(3)),
altpin (允许(1)或屏蔽(0) alternate pin排列),
numports (该卡的端口数目),
iobase (该卡设置的I/O 端口号 (16进制)),
membase (内存窗口的基地址(16进制)).
所以，下面两个不同格式的参数形式其实是一样的：
.IP
digi=E,PC/Xi,D,16,200,D0000
.br
digi=1,0,0,16,0x200,851968
.LP
更多的细节请参考
.IR /usr/src/linux/Documentation/digiboard.txt .
.SS "Baycom 串/并口无线 Modem"
语法：
.IP
baycom=iobase,irq,modem
.LP
只有三个参数；如果有多张卡，就使用多个该命令。
modem 参数是一个字符串，值是 ser12，ser12*，par96，par96* 中的一个。
这里 "*" 代表使用软件 DCD。ser12 和 par96 用来选择所支持的 modem 类型。
更多的细节请参考
.IR /usr/src/linux/drivers/net/README.baycom .
.SS "Soundcard 无线 Modem 驱动程序"
语法：
.IP
soundmodem=iobase,irq,dma[,dma2[,serio[,pario]]],0,mode
.LP
除了最后一个参数以外其他的都是整型值；
你可能注意到参数中有一个 0，需要该数值是因为在设置代码中有一个错误。
模式参数是一个字符串，其语法是 hw:modem。
这里 hw 是"sbc"，"wss"，"wssfdx" 中的一个值，modem 是 "afsk1200"，"fsk9600"
中的一个值。
.SH "打印驱动程序"
.SS "`lp='"
对于 1.3.75 版本以后的核心来说，
你可以告诉打印驱动程序你使用了或没有使用哪个并行端口。
如果你不想让打印驱动程序取得所有可用的并口，后者是非常有用的，
这样其他的驱动程序（比如说 PLIP，PPA）就能够使用那些端口。
参数的格式是多个 I/O 地址及 IRQ 对。举例来说，
lp=0x3bc,0,0x378,7 将使用位于 0x3bc 地址的端口，
"无 IRQ" (轮询 IRQ) 模式，然后使用位于 0x378 地址，IRQ 为 7 的端口。
位于地址 0x278 的端口（如果有的话）不会被检测，
因为自动检测模式只发生于没有 "lp=" 参数的情况下。
如果需要屏蔽打印驱动程序的话，使用 lp=0 就可以实现。
.SS "WDT500/501驱动程序"
语法：
.IP
wdt=io,irq
.LP
.SH "鼠标驱动程序"
.SS "`bmouse=irq'"
总线型鼠标驱动程序只能接受一个参数，也就是该硬件需要的 IRQ 值。
.SS "`msmouse=irq'"
对于微软兼容鼠标来说参数与前面总线鼠标是一样的。
.SS "ATARI鼠标设置"
.LP
atamouse=threshold[,y-threshold]
.IP
如果只有一个参数，该参数同时代表 x 起点坐标和 y 起点坐标。
如果有两个参数，则第一个是 x 起点坐标，第二个是 y 起点坐标。
这些值必须是在 1 到 20 之间（包括 20）；缺省值是 2。
.SH "视频设备"
.SS "`no-scroll'"
该选项告诉控制台驱动程序不要使用硬件滚动模式
（滚动模式在将屏幕图象移动到图形储存器中而不是移动数据时非常有效）。
一些 Braille 机器会需要它的。
.SH 作者
Linus Torvalds 
.SH "参考"
.BR klogd (8),
.BR lilo.conf (5),
.BR lilo(8),
.BR mount(8),
.BR rdev(8).
该手册页的大部分内容来自 Paul Gortmaker 写的 Boot Parameter HowTo（1.0.1）版本。
在该 HowTo 中还可以找到更多的有关信息。
.SH "[中文版维护人]"
.B billpan 
.SH "[中文版最新更新]"
.BR 2000/11/06
.SH "《中国linux论坛man手册页翻译计划》:"
.BI http://cmpp.linuxforum.net