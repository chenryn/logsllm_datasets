---
author: Dan Barker
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 7324
date: '2019-03-01 10:17:29'
editorchoice: false
excerpt: 本文是一篇简单指南：介绍一些顶级的开源的持续集成、持续交付和持续部署（CI/CD）工具。
fromurl: https://opensource.com/article/18/12/cicd-tools-sysadmins
id: 10578
islctt: true
largepic: /data/attachment/album/201903/01/101721rgu79llggpcx4o4r.jpg
permalink: /article-10578-1.html
pic: /data/attachment/album/201903/01/101721rgu79llggpcx4o4r.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 本文是一篇简单指南：介绍一些顶级的开源的持续集成、持续交付和持续部署（CI/CD）工具。
tags:
- CD
- CI
- DevOps
thumb: false
title: 系统管理员的 7 个 CI/CD 工具
titlepic: true
translator: jdh8383
updated: '2019-03-01 10:17:29'
---
> 
> 本文是一篇简单指南：介绍一些顶级的开源的持续集成、持续交付和持续部署（CI/CD）工具。
> 
> 
> 
![](/data/attachment/album/201903/01/101721rgu79llggpcx4o4r.jpg)
虽然持续集成、持续交付和持续部署（CI/CD）在开发者社区里已经存在很多年，一些机构在其运维部门也有实施经验，但大多数公司并没有做这样的尝试。对于很多机构来说，让运维团队能够像他们的开发同行一样熟练操作 CI/CD 工具，已经变得十分必要了。
无论是基础设施、第三方应用还是内部开发的应用，都可以开展 CI/CD 实践。尽管你会发现有很多不同的工具，但它们都有着相似的设计模型。而且可能最重要的一点是：通过带领你的公司进行这些实践，会让你在公司内部变得举足轻重，成为他人学习的榜样。
一些机构在自己的基础设施上已有多年的 CI/CD 实践经验，常用的工具包括 [Ansible](https://www.ansible.com/)、[Chef](https://www.chef.io/) 或者 [Puppet](https://puppet.com/)。另一些工具，比如 [Test Kitchen](https://github.com/test-kitchen/test-kitchen)，允许在最终要部署应用的基础设施上运行测试。事实上，如果使用更高级的配置方法，你甚至可以将应用部署到有真实负载的仿真“生产环境”上，来运行应用级别的测试。然而，单单是能够测试基础设施就是一项了不起的成就了。配置管理工具 Terraform 可以通过 Test Kitchen 来快速创建更[短暂](https://www.merriam-webster.com/dictionary/ephemeral)和[冥等的](https://en.wikipedia.org/wiki/Idempotence)的基础设施配置，这比它的前辈要强不少。再加上 Linux 容器和 Kubernetes，在数小时内，你就可以创建一套类似于生产环境的配置参数和系统资源，来测试整个基础设施和其上部署的应用，这在以前可能需要花费几个月的时间。而且，删除和再次创建整个测试环境也非常容易。
当然，作为初学者，你也可以把网络配置和 DDL（ 数据定义语言   data definition language ）文件加入版本控制，然后开始尝试一些简单的 CI/CD 流程。虽然只能帮你检查一下语义语法或某些最佳实践，但实际上大多数开发的管道都是这样起步的。只要你把脚手架搭起来，建造就容易得多了。而一旦起步，你就会发现各种管道的使用场景。
举个例子，我经常会在公司内部写新闻简报，我使用 [MJML](https://mjml.io/) 制作邮件模板，然后把它加入版本控制。我一般会维护一个 web 版本，但是一些同事喜欢 PDF 版，于是我创建了一个[管道](https://gitlab.com/devopskc/newsletter/blob/master/.gitlab-ci.yml)。每当我写好一篇新闻稿，就在 Gitlab 上提交一个合并请求。这样做会自动创建一个 index.html 文件，生成这篇新闻稿的 HTML 和 PDF 版链接。HTML 和 PDF 文件也会在该管道里同时生成。除非有人来检查确认，这些文件不会被直接发布出去。使用 GitLab Pages 发布这个网站后，我就可以下载一份 HTML 版，用来发送新闻简报。未来，我会修改这个流程，当合并请求成功或者在某个审核步骤后，自动发出对应的新闻稿。这些处理逻辑并不复杂，但的确为我节省了不少时间。实际上这些工具最核心的用途就是替你节省时间。
关键是要在抽象层创建出工具，这样稍加修改就可以处理不同的问题。值得留意的是，我创建的这套流程几乎不需要任何代码，除了一些[轻量级的 HTML 模板](https://gitlab.com/devopskc/newsletter/blob/master/index/index.html)，一些[把 HTML 文件转换成 PDF 的 nodejs 代码](https://gitlab.com/devopskc/newsletter/blob/master/html-to-pdf.js)，还有一些[生成索引页面的 nodejs 代码](https://gitlab.com/devopskc/newsletter/blob/master/populate-index.js)。
这其中一些东西可能看起来有点复杂，但其中大部分都源自我使用的不同工具的教学文档。而且很多开发人员也会乐意跟你合作，因为他们在完工时会发现这些东西也挺有用。上面我提供的那些代码链接是给 [DevOps KC](https://devopskc.com/)（LCTT 译注：一个地方性 DevOps 组织） 发送新闻简报用的，其中大部分用来创建网站的代码来自我在内部新闻简报项目上所作的工作。
下面列出的大多数工具都可以提供这种类型的交互，但是有些工具提供的模型略有不同。这一领域新兴的模型是用声明式的方法例如 YAML 来描述一个管道，其中的每个阶段都是短暂而幂等的。许多系统还会创建[有向无环图（DAG）](https://en.wikipedia.org/wiki/Directed_acyclic_graph)，来确保管道上不同的阶段排序的正确性。
这些阶段一般运行在 Linux 容器里，和普通的容器并没有区别。有一些工具，比如 [Spinnaker](https://www.spinnaker.io/)，只关注部署组件，而且提供一些其他工具没有的操作特性。[Jenkins](https://jenkins.io/) 则通常把管道配置存成 XML 格式，大部分交互都可以在图形界面里完成，但最新的方案是使用[领域专用语言（DSL）](https://martinfowler.com/books/dsl.html)（如 [Groovy](http://groovy-lang.org/)）。并且，Jenkins 的任务（job）通常运行在各个节点里，这些节点上会装一个专门的 Java 代理，还有一堆混杂的插件和预装组件。
Jenkins 在自己的工具里引入了管道的概念，但使用起来却并不轻松，甚至包含一些禁区。最近，Jenkins 的创始人决定带领社区向新的方向前进，希望能为这个项目注入新的活力，把 CI/CD 真正推广开（LCTT 译注：详见后面的 Jenkins 章节)。我认为其中最有意思的想法是构建一个云原生 Jenkins，能把 Kubernetes 集群转变成 Jenkins CI/CD 平台。
当你更多地了解这些工具并把实践带入你的公司和运维部门，你很快就会有追随者，因为你有办法提升自己和别人的工作效率。我们都有多年积累下来的技术债要解决，如果你能给同事们提供足够的时间来处理这些积压的工作，他们该会有多感激呢？不止如此，你的客户也会开始看到应用变得越来越稳定，管理层会把你看作得力干将，你也会在下次谈薪资待遇或参加面试时更有底气。
让我们开始深入了解这些工具吧，我们将对每个工具做简短的介绍，并分享一些有用的链接。
### GitLab CI
* [项目主页](https://about.gitlab.com/product/continuous-integration/)
* [源代码](https://gitlab.com/gitlab-org/gitlab-ce/)
* 许可证：MIT
GitLab 可以说是 CI/CD 领域里新登场的玩家，但它却在权威调研机构 [Forrester 的 CI 集成工具的调查报告](https://about.gitlab.com/2017/09/27/gitlab-leader-continuous-integration-forrester-wave/)中位列第一。在一个高水平、竞争充分的领域里，这是个了不起的成就。是什么让 GitLab CI 这么成功呢？它使用 YAML 文件来描述整个管道。另有一个功能叫做 Auto DevOps，可以为较简单的项目用多种内置的测试单元自动生成管道。这套系统使用 [Herokuish buildpacks](https://github.com/gliderlabs/herokuish) 来判断语言的种类以及如何构建应用。有些语言也可以管理数据库，它真正改变了构建新应用程序和从开发的开始将它们部署到生产环境的过程。它原生集成于 Kubernetes，可以根据不同的方案将你的应用自动部署到 Kubernetes 集群，比如灰度发布、蓝绿部署等。
除了它的持续集成功能，GitLab 还提供了许多补充特性，比如：将 Prometheus 和你的应用一同部署，以提供操作监控功能；通过 GitLab 提供的 Issues、Epics 和 Milestones 功能来实现项目评估和管理；管道中集成了安全检测功能，多个项目的检测结果会聚合显示；你可以通过 GitLab 提供的网页版 IDE 在线编辑代码，还可以快速查看管道的预览或执行状态。
### GoCD
* [项目主页](https://www.gocd.org/)
* [源代码](https://github.com/gocd/gocd)
* 许可证：Apache 2.0