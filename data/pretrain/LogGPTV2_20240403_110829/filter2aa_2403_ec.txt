$LN151@main: 
    cmp   DWORD PTR _s1$[esp+92], 16 
    mov   DWORD PTR _s2$[esp+92], 15 
    mov   DWORD PTR _s2$[esp+88], 0 
    mov   BYTE PTR _s2$[esp+72], 0 
    jb    SHORT $LN195@main 
    push DWORD PTR _s1$[esp+72] 
    call ??3@YAXPAX@Z  
; operator delete 
    add   esp, 4 
$LN195@main: 
    xor   eax, eax 
    add   esp, 72 
    ret   0 
_main ENDP 
编译器没有采用原有模式构建字符串。使用堆来存储字符串缓冲区，数据结构自然就完全不同。ASCIIZ
字符串通常存储于程序的数据段，在执行程序的时候，assign 方式会构造字符串 s1 和 s2。而后程序通过运
算符“＋”构造 s3。 
请注意此处没有调用字符串的 c_str()方式。因为代码很紧凑，所以编译器把 c_str()的代码内联（内嵌）
到了此处：如果字符串的长度不足 16 个字符，那么 EAX 寄存器将保留缓冲区的指针；否则它将提取堆里
那个存储字符串的缓冲区指针。 
最后，程序调用了 3 个析构函数，用于释放长字符串（长度大于 16 个字符的字符串）占用的堆空间。
如果字符串长度小于 16，那么 std::string 对象全部存储于数据栈，会随函数结束而自动释放。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
532 
逆向工程权威指南（下册） 
就性能而言，短字符串的处理速度更快，因为访问堆的操作要少一些。 
GCC 的处理方式更为简单。GCC 不会把短字符串的文本缓冲区直接存储到 string 结构体里。 
使用 GCC\ 4.8.1 编译上述程序，可得到： 
指令清单 51.24  GCC 4.8.1 下的程序编译 
.LC0: 
    .string "Hello, " 
.LC1: 
    .string "world!\n" 
main: 
    push ebp 
    mov   ebp, esp 
    push edi 
    push esi 
    push ebx 
    and   esp, -16 
    sub   esp, 32 
    lea   ebx, [esp+28] 
    lea   edi, [esp+20] 
    mov   DWORD PTR [esp+8], ebx 
    lea   esi, [esp+24] 
    mov   DWORD PTR [esp+4], OFFSET FLAT:.LC0 
    mov   DWORD PTR [esp], edi 
    call _ZNSsC1EPKcRKSaIcE 
    mov   DWORD PTR [esp+8], ebx 
    mov   DWORD PTR [esp+4], OFFSET FLAT:.LC1 
    mov   DWORD PTR [esp], esi 
    call _ZNSsC1EPKcRKSaIcE 
    mov   DWORD PTR [esp+4], edi 
    mov   DWORD PTR [esp], ebx 
    call _ZNSsC1ERKSs 
    mov   DWORD PTR [esp+4], esi 
    mov   DWORD PTR [esp], ebx 
    call _ZNSs6appendERKSs 
    ; inlined c_str(): 
    mov   eax, DWORD PTR [esp+28] 
    mov   DWORD PTR [esp], eax 
    call puts 
    mov   eax, DWORD PTR [esp+28] 
    lea   ebx, [esp+19] 
    mov   DWORD PTR [esp+4], ebx 
    sub   eax, 12 
    mov   DWORD PTR [esp], eax 
    call _ZNSs4_Rep10_M_disposeERKSaIcE 
    mov   eax, DWORD PTR [esp+24] 
    mov   DWORD PTR [esp+4], ebx 
    sub   eax, 12 
    mov   DWORD PTR [esp], eax 
    call _ZNSs4_Rep10_M_disposeERKSaIcE 
    mov   eax, DWORD PTR [esp+20] 
    mov   DWORD PTR [esp+4], ebx 
    sub   eax, 12 
    mov   DWORD PTR [esp], eax 
    call _ZNSs4_Rep10_M_disposeERKSaIcE 
    lea   esp, [ebp-12] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
533 
    xor   eax, eax 
    pop   ebx 
    pop   esi 
    pop   edi 
    pop   ebp 
    ret 
可见，传递给析构函数的指针不是对象的指针，而是指向 string 对象之前 12 个字节的地址的指针——
那才是结构体真正的起始地址。 
全局变量 std::string 
虽然资深的 C++编程人员都不会把 std::string 当作全局变量使用，但实际上由 STL 定义的数据类型都
可以用作全局变量， 
确实如此，我们来看下面这段程序： 
#include  
#include  
std::string s="a string"; 
int main() 
{ 
    printf ("%s\n", s.c_str()); 
}; 
实际上，在主函数 main()启动之前，全局变量就已经完成初始化操作了。 
指令清单 51.25  MSVC 2012（这里我们可以看到这个全局变量是如何构造的以及一个析构体是如何注册的） 
??__Es@@YAXXZ PROC 
    push 8 
    push OFFSET $SG39512 ; 'a string' 
    mov   ecx, OFFSET ?s@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; s 
    call ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ;  
     std::basic_string,std::allocator >::assign 
    push OFFSET ??__Fs@@YAXXZ ; `dynamic atexit destructor for 's'' 
    call _atexit 
    pop   ecx 
    ret   0 
??__Es@@YAXXZ ENDP 
指令清单 51.26  MSVC 2012（从这个程序我们可以看到，主函数 main()是如何使用一个全局变量的） 
$SG39512 DB 'a string', 00H 
$SG39519 DB '%s', 0aH, 00H 
_main PROC 
    cmp   DWORD PTR ?s@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 
    mov   eax, OFFSET ?s@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; s 
    cmovae eax, DWORD PTR ?s@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A 
    push eax 
    push OFFSET $SG39519 ; '%s' 
    call _printf 
    add   esp, 8 
    xor   eax, eax 
    ret   0 
_main ENDP 
指令清单 51.27  MSVC 2012 在退出之前，析构函数的调用过程 
??__Fs@@YAXXZ PROC 
    push ecx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
534 
逆向工程权威指南（下册） 
    cmp   DWORD PTR ?s@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 
    jb    SHORT $LN23@dynamic 
    push esi 
    mov   esi, DWORD PTR ?s@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A 
    lea   ecx, DWORD PTR $T2[esp+8] 
    call ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ 
    push OFFSET ?s@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; s 
    lea   ecx, DWORD PTR $T2[esp+12] 
    call ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z 
    lea   ecx, DWORD PTR $T1[esp+8] 
    call ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ 
    push esi 
    call ??3@YAXPAX@Z ; operator delete 
    add   esp, 4 
    pop   esi 
$LN23@dynamic: 
    mov   DWORD PTR ?s@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 
    mov   DWORD PTR ?s@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0 
    mov   BYTE PTR ?s@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0 
    pop   ecx 
    ret   0 
??__Fs@@YAXXZ ENDP 
实际上，主函数 main()没有调用那个创建全局变量的构造函数，这部分任务是 CRT 在启动 main()函数
之前就已经完成的操作。不止如此，全局变量的析构函数由 stdlib 声明的 atexit()函数提供，只有在 main 结
束之后才会被调用。 
GCC 的处理方法十分相似。经 GCC 4.8.1 编译上述源程序，可得到： 
指令清单 51.28  GCC 4.8.1 函数 
main: 
    push ebp 
    mov   ebp, esp 
    and   esp, -16 
    sub   esp, 16 
    mov   eax, DWORD PTR s 
    mov   DWORD PTR [esp], eax 
    call puts 
    xor   eax, eax 
    leave 
    ret 
.LC0: 
    .string "a string" 
_GLOBAL__sub_I_s: 
    sub   esp, 44 
    lea   eax, [esp+31] 
    mov   DWORD PTR [esp+8], eax 
    mov   DWORD PTR [esp+4], OFFSET FLAT:.LC0 
    mov   DWORD PTR [esp], OFFSET FLAT:s 
    call _ZNSsC1EPKcRKSaIcE 
    mov   DWORD PTR [esp+8], OFFSET FLAT:__dso_handle 
    mov   DWORD PTR [esp+4], OFFSET FLAT:s 
    mov   DWORD PTR [esp], OFFSET FLAT:_ZNSsD1Ev 
    call __cxa_atexit 
    add   esp, 44 
    ret 
.LFE645: 
    .size   _GLOBAL__sub_I_s, .-_GLOBAL__sub_I_s 
    .section .init_array,"aw" 
    .align 4 
    .long   _GLOBAL__sub_I_s 
    .globl s 
    .bss 
    .align 4 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
535 
    .type   s, @object 
    .size   s, 4 
s: 
    .zero 4 
    .hidden __dso_handle 
但是 GCC 没有单独建立一个专用函数，而是把每个析构函数逐一传递给 atexit()函数。 
51.4.2  std::list 
std::list 是众所皆知的双向链表的容器类，它的每个数据元素可通过链表指针（链域）串接成逻辑意义
上的线性表。这种数据结构的每个元素都有 2 个指针，一个指针指向前一个元素，另一个指针指向后一个
元素。 
链域的存在决定了，每个节点要比单纯的节点数据元素多占用 2 个 words 的空间，即 32 位系统下要多
占用 8 个字节，而 64 位系统下会多占用 16 个字节。 
C++的标准模板库只是给现有结构体扩充了“next”“previous”指针，使之形成语意上的有序序列。 
我们以 2 个变量组成的结构体为例，演示 std::list 的链结构。 
虽然 C++标准（ISO/IEC 14882:2011 (C++ 11 standard)）没有明确这种数据结构的具体实现方法，但是
MSVC 编译器和 GCC 编译器不约而同地选择几乎一致的实现方法。我们就以下源程序为例进行说明： 
#include  
#include  
#include  
struct a 
{ 
    int x; 
    int y; 
}; 
struct List_node 
{ 
    struct List_node* _Next; 
    struct List_node* _Prev; 
    int x; 
    int y; 
}; 
void dump_List_node (struct List_node *n) 
{ 
    printf ("ptr=0x%p _Next=0x%p _Prev=0x%p x=%d y=%d\n", 
        n, n->_Next, n->_Prev, n->x, n->y); 
}; 
void dump_List_vals (struct List_node* n) 
{ 
    struct List_node* current=n; 
    for (;;) 
    { 
        dump_List_node (current); 
        current=current->_Next; 
        if (current==n) // end 
            break; 
    }; 
}; 
void dump_List_val (unsigned int *a) 
{ 
#ifdef _MSC_VER 
    // GCC implementation does not have "size" field 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
536 
逆向工程权威指南（下册） 
    printf ("_Myhead=0x%p, _Mysize=%d\n", a[0], a[1]); 
#endif 
    dump_List_vals ((struct List_node*)a[0]); 
}; 
int main() 
{ 
    std::list l; 
    printf ("* empty list:\n"); 
    dump_List_val((unsigned int*)(void*)&l); 
    struct a t1; 
    t1.x=1; 
    t1.y=2; 
    l.push_front (t1); 
    t1.x=3; 
    t1.y=4; 
    l.push_front (t1); 
    t1.x=5; 
    t1.y=6; 
    l.push_back (t1); 
    printf ("* 3-elements list:\n"); 
    dump_List_val((unsigned int*)(void*)&l); 
    std::list::iterator tmp; 
    printf ("node at .begin:\n"); 
    tmp=l.begin(); 
    dump_List_node ((struct List_node *)*(void**)&tmp); 
    printf ("node at .end:\n"); 
    tmp=l.end(); 
    dump_List_node ((struct List_node *)*(void**)&tmp); 
    printf ("* let's count from the begin:\n"); 
    std::list::iterator it=l.begin(); 
    printf ("1st element: %d %d\n", (*it).x, (*it).y); 
    it++; 
    printf ("2nd element: %d %d\n", (*it).x, (*it).y); 
    it++; 
    printf ("3rd element: %d %d\n", (*it).x, (*it).y); 
    it++; 
    printf ("element at .end(): %d %d\n", (*it).x, (*it).y); 
    printf ("* let's count from the end:\n"); 
    std::list::iterator it2=l.end(); 
    printf ("element at .end(): %d %d\n", (*it2).x, (*it2).y); 
    it2--; 
    printf ("3rd element: %d %d\n", (*it2).x, (*it2).y); 
    it2--; 
    printf ("2nd element: %d %d\n", (*it2).x, (*it2).y); 
    it2--; 
    printf ("1st element: %d %d\n", (*it2).x, (*it2).y); 
    printf ("removing last element...\n"); 
    l.pop_back(); 
    dump_List_val((unsigned int*)(void*)&l); 
}; 
GCC 
我们首先讲解 GCC 编译器的编译方式。 
运行上述程序时，将会得到很多输出数据。我们进行分段解说： 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
537 
* empty list: 
ptr=0x0028fe90 _Next=0x0028fe90 _Prev=0x0028fe90 x=3 y=0 
此时它还是个空链。虽然我们还未对其进行赋值操作，但是变量 x 和变量 y 已经有数据了（也就是常
人所说的虚结点/dummy node）。而且，“next”“prev”指针都指向该节点自己。 
在这个时候，迭代器.begin（开始）和.end（结束）值相等。 
然后程序创建了 3 个节点，此后整个链表的内部数据将会变为： 
* 3-elements list: 
ptr=0x000349a0 _Next=0x00034988 _Prev=0x0028fe90 x=3 y=4 
ptr=0x00034988 _Next=0x00034b40 _Prev=0x000349a0 x=1 y=2 
ptr=0x00034b40 _Next=0x0028fe90 _Prev=0x00034988 x=5 y=6 