title:Analysis of an Electronic Voting System
author:Tadayoshi Kohno and
Adam Stubblefield and
Aviel D. Rubin and
Dan S. Wallach
Analysis of an Electronic Voting System
Tadayoshi Kohno
Computer Science Dept.
UC San Diego
PI:EMAIL
Adam Stubbleﬁeld
Information Security Inst.
Johns Hopkins University
PI:EMAIL
Aviel D. Rubin
Information Security Inst.
Johns Hopkins University
Dan S. Wallach
Computer Science Dept.
Rice University
PI:EMAIL
PI:EMAIL
Abstract— With signiﬁcant U.S. federal funds now available
to replace outdated punch-card and mechanical voting systems,
municipalities and states throughout the U.S. are adopting paper-
less electronic voting systems from a number of different vendors.
We present a security analysis of the source code to one such
machine used in a signiﬁcant share of the market. Our analysis
shows that this voting system is far below even the most minimal
security standards applicable in other contexts. We identify
several problems including unauthorized privilege escalation,
incorrect use of cryptography, vulnerabilities to network threats,
and poor software development processes. We show that voters,
without any insider privileges, can cast unlimited votes without
being detected by any mechanisms within the voting terminal
software. Furthermore, we show that even the most serious of
our outsider attacks could have been discovered and executed
without access to the source code. In the face of such attacks, the
usual worries about insider threats are not the only concerns;
outsiders can do the damage. That said, we demonstrate that
the insider threat is also quite considerable, showing that not
only can an insider, such as a poll worker, modify the votes,
but that insiders can also violate voter privacy and match votes
with the voters who cast them. We conclude that this voting
system is unsuitable for use in a general election. Any paperless
electronic voting system might suffer similar ﬂaws, despite any
“certiﬁcation” it could have otherwise received. We suggest that
the best solutions are voting systems having a “voter-veriﬁable
audit trail,” where a computerized voting system might print a
paper ballot that can be read and veriﬁed by the voter.
I. INTRODUCTION
Elections allow the populace to choose their representatives
and express their preferences for how they will be governed.
Naturally, the integrity of the election process is fundamental
to the integrity of democracy itself. The election system must
be sufﬁciently robust to withstand a variety of fraudulent
behaviors and must be sufﬁciently transparent and compre-
hensible that voters and candidates can accept the results of
an election. Unsurprisingly, history is littered with examples
of elections being manipulated in order to inﬂuence their
outcome.
The design of a “good” voting system, whether electronic or
using traditional paper ballots or mechanical devices, must sat-
isfy a number of sometimes competing criteria. The anonymity
of a voter’s ballot must be preserved, both to guarantee the
voter’s safety when voting against a malevolent candidate,
and to guarantee that voters have no evidence that proves
which candidates received their votes. The existence of such
evidence would allow votes to be purchased by a candidate.
The voting system must also be tamper-resistant to thwart a
wide range of attacks, including ballot stufﬁng by voters and
incorrect tallying by insiders. Another factor, as shown by the
so-called “butterﬂy ballots” in the Florida 2000 presidential
election, is the importance of human factors. A voting system
must be comprehensible to and usable by the entire voting
population, regardless of age, inﬁrmity, or disability. Providing
accessibility to such a diverse population is an important
engineering problem and one where, if other security is done
well, electronic voting could be a great improvement over
current paper systems. Flaws in any of these aspects of a voting
system, however, can lead to indecisive or incorrect election
results.
ELECTRONIC VOTING SYSTEMS. There have been several
studies on using computer technologies to improve elections
[4], [5], [20], [21], [25]. These studies caution against the risks
of moving too quickly to adopt electronic voting machines
because of the software engineering challenges, insider threats,
network vulnerabilities, and the challenges of auditing.
As a result of the Florida 2000 presidential election, the
inadequacies of widely-used punch card voting systems have
become well understood by the general population. Despite the
opposition of computer scientists, this has led to increasingly
widespread adoption of “direct recording electronic” (DRE)
voting systems. DRE systems, generally speaking, completely
eliminate paper ballots from the voting process. As with
traditional elections, voters go to their home precinct and prove
that they are allowed to vote there, perhaps by presenting an ID
card, although some states allow voters to cast votes without
any identiﬁcation at all. After this, the voter is typically given
a PIN, a smartcard, or some other token that allows them to
approach a voting terminal, enter the token, and then vote
for their candidates of choice. When the voter’s selection is
complete, DRE systems will typically present a summary of
the voter’s selections, giving them a ﬁnal chance to make
changes. Subsequent to this, the ballot is “cast” and the voter
is free to leave.
The most fundamental problem with such a voting system
is that the entire election hinges on the correctness, robust-
ness, and security of the software within the voting terminal.
Should that code have security-relevant ﬂaws, they might be
exploitable either by unscrupulous voters or by malicious
insiders. Such insiders include election ofﬁcials, the developers
of the voting system, and the developers of the embedded
operating system on which the voting system runs. If any
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
party introduces ﬂaws into the voting system software or takes
advantage of pre-existing ﬂaws, then the results of the election
cannot be assured to accurately reﬂect the votes legally cast
by the voters.
Although there has been cryptographic research on elec-
tronic voting [13], and there are new approaches such as [6],
currently the most viable solution for securing electronic
voting machines is to introduce a “voter-veriﬁable audit
trail” [10], [20]. A DRE system with a printer attachment,
or even a traditional optical scan system (e.g., one where a
voter ﬁlls in a printed bubble next to their chosen candidates),
will satisfy this requirement by having a piece of paper for
voters to read and verify that their intent is correct reﬂected.
This paper is stored in ballot boxes and is considered to be
the primary record of a voter’s intent. If, for some reason, the
printed paper has some kind of error, it is considered to be a
“spoiled ballot” and can be mechanically destroyed, giving the
voter the chance to vote again. As a result, the correctness of
any voting software no longer matters; either a voting terminal
prints correct ballots or it is taken out of service. If there is any
discrepancy in the vote tally, the paper ballots will be available
to be recounted, either mechanically or by hand. (A veriﬁable
audit trail does not, by itself, address voter privacy concerns,
ballot stufﬁng, or numerous other attacks on elections.)
“CERTIFIED” DRE SYSTEMS. Many government entities have
adopted paperless DRE systems without appearing to have
critically questioned the security claims made by the systems’
vendors. Until recently, such systems have been dubiously
“certiﬁed” for use without any public release of the analyses
behind these certiﬁcations, much less any release of the source
code that might allow independent third parties to perform
their own analyses. Some vendors have claimed “security
through obscurity” as a defense, despite the security commu-
nity’s universally held belief in the inadequacy of obscurity to
provide meaningful protection [18].
Indeed,
the CVS source code repository for Diebold’s
AccuVote-TS DRE voting system recently appeared on the
Internet. This appearance, announced by Bev Harris and
discussed in her book, Black Box Voting [14], gives us a
unique opportunity to analyze a widely used, paperless DRE
system and evaluate the manufacturer’s security claims. Jones
discusses the origins of this code in extensive detail [17].
Diebold’s voting systems are in use in 37 states, and they are
the second largest and the fastest growing vendor of electronic
voting machines. We only inspected unencrypted source code,
focusing on the AVTSCE, or AccuVote-TS version 4, tree in
the CVS repository [9]. This tree has entries dating from
October 2000 and culminates in an April 2002 snapshot of
version 4.3.1 of the AccuVote-TS system. From the comments
in the CVS logs, the AccuVote-TS version 4 tree is an import
of an earlier AccuTouch-CE tree. We did not have source code
to Diebold’s GEMS back-end election management system.
SUMMARY OF RESULTS. We discovered signiﬁcant and
wide-reaching security vulnerabilities in the version of the
AccuVote-TS voting terminal found in [9] (see Table I). Most
notably, voters can easily program their own smartcards to
simulate the behavior of valid smartcards used in the election.
With such homebrew cards, a voter can cast multiple ballots
without leaving any trace. A voter can also perform actions
that normally require administrative privileges, including view-
ing partial results and terminating the election early. Similar
undesirable modiﬁcations could be made by malevolent poll
workers (or janitorial staff) with access to the voting terminals
before the start of an election. Furthermore, the protocols used
when the voting terminals communicate with their home base,
both to fetch election conﬁguration information and to report
ﬁnal election results, do not use cryptographic techniques to
authenticate either end of the connection nor do they check
the integrity of the data in transit. Given that these voting
terminals could potentially communicate over insecure phone
lines or even wireless Internet connections, even unsophisti-
cated attackers can perform untraceable “man-in-the-middle”
attacks.
We considered both the speciﬁc ways that the code uses
cryptographic techniques and the general software engineering
quality of its construction. Neither provides us with any
conﬁdence of the system’s correctness. Cryptography, when
used at all, is used incorrectly. In many places where cryp-
tography would seem obvious and necessary, none is used.
More generally, we see no evidence of disciplined software
engineering processes. Comments in the code and the revision
change logs indicate the engineers were aware of some areas in
the system that needed improvement, though these comments
only address speciﬁc problems with the code and not with the
design itself. We also saw no evidence of any change-control
process that might restrict a developer’s ability to insert arbi-
trary patches to the code. Absent such processes, a malevolent
developer could easily make changes to the code that would
create vulnerabilities to be later exploited on Election Day. We
also note that the software is written entirely in C++. When
programming in a language like C++, which is not type-safe,
programmers must exercise tight discipline to prevent their
programs from being vulnerable to buffer overﬂow attacks
and other weaknesses. Indeed, buffer overﬂows caused real
problems for AccuVote-TS systems in real elections.1
SUBSEQUENT WORK. Following the release of our results, the
state of Maryland hired SAIC [27] and RABA [24] and the
state of Ohio hired Compuware [7] to perform independent
analyses of Diebold’s AccuVote-TS systems. These analyses
not only support our ﬁndings, but show that many of the
issues we raise and attacks we identify still apply to recent
versions of the AccuVote-TS system, and particularly to the
machines recently purchased by Maryland. These analyses also
identiﬁed security problems with the back-end GEMS server.
Additionally, RABA’s “red team” implemented some of our
attacks in a mock election setting; e.g., they modiﬁed smart-
cards so that a voter could vote more than once (Section III-B
1http://www.sccgov.org/scc/assets/docs/
209815KeyboardAttachment-200440211.pdf (page 60 of
report, page 61 of the PDF)
the
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
ballot deﬁnition is encoded as the ﬁle election.edb.
Prior to an election, the voting terminals must be conﬁgured
and installed at each voting location. A governmental entity
using Diebold voting terminals has a variety of choices in
how to distribute the ballot deﬁnitions. They also may be
distributed using removable media, such as ﬂoppy disks or
storage cards, or over a local network, the Internet, or a dial-
up connection. The networked approach, if allowed under the
voting precinct’s processes, provides additional ﬂexibility to
the election administrator in the event of last-minute changes
to the ballot.
THE ELECTION. Once the voting terminal is initialized with
the ballot deﬁnitions and the election begins, voters are al-
lowed to cast their votes. To get started, the voter must have
a voter card. The voter card is a memory card or smartcard;
i.e., it is a credit-card sized plastic card with a computer chip
on it that can store data and, in the case of the smartcard,
perform computation. Under the most common scenario, we
assume that the voting cards are given to voters at the voting
site on election day.
The voter takes the voter card and inserts it into a smartcard
reader attached to the voting terminal. The terminal checks that
the smartcard in its reader is a voter card and, if it is, presents
a ballot to the voter on the terminal screen. The actual ballot
the voter sees may depend on the voter’s political party, which
is encoded on the voter card. If a ballot cannot be found for
the voter’s party, the voter is given a nonpartisan ballot. Such
party-speciﬁc ballots are used, for example, in primaries.
At this point, the voter interacts with the voting terminal,
touching the appropriate boxes on the screen for his or her
desired candidates. Headphones and keypads are available for
visually-impaired voters to privately interact with the terminal.
Before the ballots are committed to storage in the terminal, the
voter is given a ﬁnal chance to review his or her selections.
If the voter conﬁrms this, the vote is recorded on the voting
terminal and the voter card is “canceled.” This latter step is
intended to prevent the voter from voting again with the same
card. After the voter ﬁnishes voting, the terminal is ready for
another voter to use. The voter returns his or her canceled card
to the poll workers, who reprogram it for the next user.
REPORTING THE RESULTS. A poll worker ends the election
process by inserting an administrator card or an ender card (a
special card that can only be used to end the election) into the
voting terminal. Upon detecting the presence of such a card
(and, in the case of the administrator card, checking a PIN
entered by the card user), the poll worker is asked to conﬁrm
that the election is ﬁnished. If the poll worker agrees, then the
voting terminal enters the post-election stage. Election results
are written to a removable ﬂash memory card and can also be
transmitted electronically to the back-end server.
As we have only analyzed the code for the Diebold voting
terminal, we do not know exactly how the back-end server
tabulates the ﬁnal results it gathers from the individual ter-
minals. Obviously, it collects all the votes from the various
voting terminals. We are unable to verify that there are checks
A Diebold AccuVote-TS voting machine
Fig. 1.
(photo from
http://www.sos.state.ga.us/). Note the smartcard reader in the
lower-right hand corner.
and [24, page 16]) and they implemented our ballot reordering
attack, thereby tricking voters to vote for the wrong candidates
(Section IV-B and [24, pages 18 and 21]). Jones discusses
these three reports in more detail [17].
II. SYSTEM OVERVIEW
The Diebold AccuVote-TS 4.3.1 system we analyzed [9],
which was written in C++, was designed to run on a Windows
CE device, an example of which is shown in Figure 1. The
code also compiles and runs (with slightly different conﬁgura-
tions) on regular Microsoft Windows machines, thus enabling
us to verify that the code represents a complete system. We
shall refer to a device running the vote collection software as
a voting terminal.
Below we describe the process for setting up and running
an election using the Diebold system. In some cases, where
election procedures and policies might vary or where we
have insufﬁcient information from studying the code, we will
state our assumptions. We note that, even in cases where
election policies and procedures might provide protection
against design shortcomings, those policies and procedures
depend on poll workers who may not fully understand or be
able to carry out their responsibilities. As a result, any failure
in the design of the voting system may very well be abused
to compromise an election.
SETTING UP. Before an election takes place, one of the ﬁrst
things the election ofﬁcials must do is specify the political
ofﬁces and issues to be decided by the voters along with the
candidates and their party afﬁliations. Variations on the ballot
can be presented to voters based on their party afﬁliations.