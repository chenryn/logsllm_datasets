• Section V-D2: The handshake initiation message that
begins the handshake process for establishing a secure
session.
• Section V-D3: The handshake response to the initiation
message that concludes the handshake, after which a secure
session can be established.
• Section V-D7: A reply to either a handshake initiation
message or a handshake response message, explained in
section V-C, that communicates an encrypted cookie value
for use in resending either the rejected handshake initiation
message or handshake response message.
• Section V-D6: An encapsulated and encrypted IP packet
that uses the secure session negotiated by the handshake.
The initator of the handshake is denoted as subscript i, and
the responder of the handshake is denoted as subscript r, and
either one is denoted as subscript ∗. For messages that can
be created by either an initiator or sender, if the peer creating
the message is the initator, let (m, m(cid:48)) = (i, r), and if the peer
creating the message is the responder, let (m, m(cid:48)) = (r, i). The
two peers have several variables they maintain locally:
I∗
S pr i v
∗
E pr i v
∗
, S pub∗
, E pub∗
Q
H∗, C∗, K∗
T send
∗
, T r ec v
∗
N send
∗
, N r ec v
∗
A 32-bit index that locally represents the
other peer, analogous to IPsec’s “SPI”.
The static private and public key values.
The ephemeral private and public key
values.
The optional (sometimes , empty)
pre-shared symmetric key value from
section V-B.
A hash result value, a chaining key value,
and a symmetric key value.
Transport data symmetric key values for
sending and receiving.
Transport data message nonce counters for
sending and receiving.
In the constructions that follow, several symbols, functions,
and operators are used. The binary operator (cid:107) represents
concatenation of its operands, and the binary operator (cid:66)
represents assignment of its right operand to its left operand.
The annotation (cid:68)n returns the value (n + 16), which is the
Poly1305 authentication tag length added to n.  represents an
empty zero-length bitstring, 0n represents the all zero (0x0)
bitstring of length n, and ρn represents a random bitstring
of length n. Let τ be considered a temporary variable. All
integer assignments are little-endian, unless otherwise noted.
The following functions and constants are utilized:
DH(private key, public key) Curve25519 point multiplica-
tion of private key and public key, returning 32 bytes
of output.
DH-Generate() Generates a random Curve25519 private key
and derives its corresponding public key, returning a pair
of 32 bytes values, (private, public).
Aead(key, counter, plain text, auth text)
as
ChaCha20Poly1305 AEAD,
speciﬁed in [16],
with its nonce being composed of 32 bits of zeros
followed by the 64-bit little-endian value of counter.
Hash(input, length) Blake2s(input, length),
returning
Hmac(key, input) Hmac-Blake2s(key, input), the ordinary
length bytes of output.
Kdf(key, input) Sets
BLAKE2s hash function used in an HMAC construction,
returning 32 bytes of output.
τ (cid:66) Hmac(key, input), τ(cid:48) (cid:66)
Hmac(τ, 0x1), τ(cid:48)(cid:48) (cid:66) Hmac(τ, τ(cid:48) (cid:107) 0x2), and returns a
pair of 32 byte values, (τ(cid:48), τ(cid:48)(cid:48)). This is the HKDF [15]
function.
Mac(key, input, length) If key (cid:44) , Keyed-Blake2s(key,
input, length), the keyed MAC variant of the BLAKE2s
hash function, and otherwise Hash(input, length), either
returning length bytes of output.
Timestamp() Returns the TAI64N timestamp [4] of the current
time, which is 12 bytes of output, the ﬁrst 8 bytes being
a big-endian integer of the number of seconds since 1970
TAI and the last 4 bytes being a big-endian integer of
the number of nanoseconds from the beginning of that
second.
Construction If Q (cid:44) , the value Hash(“NoisePSK_IK_
25519_ChaChaPoly_BLAKE2s”, 32), and otherwise the
value Hash(“Noise_IK_25519_ChaChaPoly_BLAKE2s”,
32), 32 bytes of output.
literal
“WireGuard v0 zx2c4
Identifier The
string
PI:EMAIL”, 34 bytes of output.
1) Protocol Overview: In the majority of cases, the hand-
shake will complete in 1-RTT, after which transport data
follows:
Initiator—i
Responder—r
Handshake Initiation
Handshake Response
Transport Data
Transport Data
If one peer is under load, then a cookie reply message is
added to the handshake, to prevent against denial-of-service
attacks:
Initiator—i
Responder—r
Handshake Initiation
Cookie Reply
Handshake Initiation
Handshake Response
Transport Data
Transport Data
2) First Message: Initiator to Responder: The initiator sends
this message, msg:
6
type (cid:66) 0x1 (1 byte)
reserved (cid:66) 03 (3 bytes)
The ﬁelds mac1 and mac2 are explained further in section V-D4.
The above remaining ﬁelds are calculated [22] as follows:
sender (cid:66) Ii (4 bytes)
ephemeral (32 bytes)
static ((cid:76)32 bytes)
timestamp ((cid:76)12 bytes)
mac1 (16 bytes)
mac2 (16 bytes)
The timestamp ﬁeld is explained in section V-A, and mac1
and mac2 are explained further in section V-D4. Ii is generated
randomly (ρ4) when this message is sent, and is used to tie
subsequent replies to the session begun by this message. The
above remaining ﬁelds are calculated [22] as follows:
Ci (cid:66) Construction
Hi (cid:66) Hash(Ci (cid:107) Identifier, 32)
if Q (cid:44) :
(Ci, τ) (cid:66) Kdf(Ci, Q)
Hi (cid:66) Hash(Hi (cid:107) τ, 32)
, 32)
Hi (cid:66) Hash(Hi (cid:107) S pub
(E pr i v
if Q (cid:44) :
, E pub
r
i
i
) (cid:66) DH-Generate()
(Ci, Ki) (cid:66) Kdf(Ci, E pub
)
i
i
, S pub
msg.ephemeral (cid:66) E pub
Hi (cid:66) Hash(Hi (cid:107) msg.ephemeral, 32)
(Ci, Ki) (cid:66) Kdf(Ci, DH(E pr i v
))
msg.static (cid:66) Aead(Ki, 0, S pub
, Hi)
Hi (cid:66) Hash(Hi (cid:107) msg.static, 32)
(Ci, Ki) (cid:66) Kdf(Ci, DH(S pr i v
, S pub
))
msg.timestamp (cid:66) Aead(Ki, 0, Timestamp(), Hi)
Hi (cid:66) Hash(Hi (cid:107) msg.timestamp, 32)
r
r
i
i
i
When the responder receives this message, it does the same
operations so that its ﬁnal state variables are identical, replacing
the operands of the DH function to produce equivalent values.
3) Second Message: Responder to Initiator: The responder
sends this message, after processing the ﬁrst message above
from the initiator and applying the same operations to arrive
at an identical state. Ir is generated randomly (ρ4) when this
message is sent, and is used to tie subsequent replies to the
session begun by this message, just as above. The responder
sends this message, msg:
type (cid:66) 0x2 (1 byte)
reserved (cid:66) 03 (3 bytes)
sender (cid:66) Ir (4 bytes)
receiver (cid:66) Ii (4 bytes)
ephemeral (32 bytes)
empty ((cid:68)0 bytes)
mac1 (16 bytes)
mac2 (16 bytes)
7
, E pub
r
r
(E pr i v
if Q (cid:44) :
) (cid:66) DH-Generate()
(Cr, Kr ) (cid:66) Kdf(Cr, E pub
r
)
r
msg.ephemeral (cid:66) E pub
Hr (cid:66) Hash(Hr (cid:107) msg.ephemeral, 32)
(Cr, Kr ) (cid:66) Kdf(Cr, DH(E pr i v
, E pub
))
(Cr, Kr ) (cid:66) Kdf(Cr, DH(E pr i v
, S pub
))
msg.empty (cid:66) Aead(Kr, 0, , Hr )
Hr (cid:66) Hash(Hr (cid:107) msg.empty, 32)
r
r
i
i
When the responder receives this message, it does the same
operations so that its ﬁnal state variables are identical, replacing
the operands of the DH function to produce equivalent values.
Note that this handshake response message is smaller than the
handshake initiation message, preventing ampliﬁcation attacks.
4) Cookie MACs: In sections V-D2 and V-D3, the two hand-
shake messages have the msg.mac1 and msg.mac2 parameters.
For a given handshake message, msgα represents all bytes of
msg prior to msg.mac1, and msgβ represents all bytes of msg
prior to msg.mac2. The latest cookie received(cid:102)L∗ seconds ago
is represented by L∗. The msg.mac1 and msg.mac2 ﬁelds are
populated as follows:
msg.mac1 (cid:66) Mac(Q, S pub
m(cid:48)
if Lm =  or(cid:103)Lm ≥ 120:
msg.mac2 (cid:66) 016
(cid:107) msgα, 16)
otherwise:
msg.mac2 (cid:66) Mac(Lm, msgβ, 16)
5) Transport Data Key Derivation: After the above two
messages have been exchanged, keys are calculated [22] by the
initiator and responder for sending and receiving transport data
messages (section V-D6):
i
(T send
N send
E pr i v
i
i
r
= T r ec v
= N r ec v
= E pub
, T r ec v
i
= N r ec v
= E pr i v
r
i
r
i
r
= E pub
r
= T send
) (cid:66) Kdf(Ci = Cr, )
r
= N send
(cid:66) 0
= Ci = Cr = Ki = Kr (cid:66) 
On the last line, most prior states of the handshake are zeroed
from memory (described in section VII-D), but the value Hi =
Hr is not necessarily zeroed, as it could potentially be useful
in future revisions of Noise [22].
6) Subsequent Messages: Transport Data Messages: The
initiator and the responder exchange transport data messages for
exchanging encrypted encapsulated packets. The inner plaintext
packet that is encapsulated is represented as P, of length (cid:107)P(cid:107).
Both peers send this message, msg:
type (cid:66) 0x4 (1 byte)
reserved (cid:66) 03 (3 bytes)
receiver (cid:66) Im(cid:48) (4 bytes)
counter (8 bytes)
packet ((cid:77)(cid:107)P(cid:107) bytes)
The remaining ﬁelds are populated as follows:
P (cid:66) P (cid:107) 016·(cid:100)(cid:107) P(cid:107)/16(cid:101)−(cid:107) P(cid:107)
msg.counter (cid:66) N send
msg.packet (cid:66) Aead(T send
N send
(cid:66) N send
+ 1
m
m
m
, N send
m
, P, )
m
m(cid:48)
The recipient of this messages uses T r ec v
to read the message.