## **0x01 概述**
关于HIDS，并不是一个新鲜的话题，规模较大的企业都会选择自研，而如果你刚刚接手一个公司的网络安全，人手相对不足，那么OSSEC能帮助你安全建设初期快速搭建一套安全系统，后期如果遇到瓶颈也可以考虑自研去解决一些问题。
## **0x02 主要功能介绍**
OSSEC的主要功能包括日志分析、文件完整性检测、Rootkit检测以及联动配置，另外你也可以将自己的其他监控项集成到OSSEC中。
### **1）日志监控**
日志是平常安全运维中很重要的一项，OSSEC日志检测为实时检测，OSSEC的客户端本身没有解码文件和规则，所监控的日志会通过1514端口发送到服务端。
配置项可以在配置在每个agent的ossec.conf中或者在agent.conf中，需要写在``中，可配置项如下：
  * location
指定日志的位置，strftime格式可以用于日志文件名，例如，一个名为file.log-2018-01-22的日志文件可以写为`file.log-%Y-%m-%d`。通配符可以用于非windows系统。当使用通配符时，日志文件必须在ossec-logcollector启动时存在。它不会自动开始监视新的日志文件。strftime和通配符不能在同一条目上使用。
  * log_format
例如syslog、command、full_command等等
需要注意的是command和full_command不能配置在agent.conf中，需要配置在ossec.conf中
  * command
执行的命令。如果log_format指定的是command，那么将逐行读取。如果log_format指定的是full_command，将全部匹配。
  * alias
该命令的别名。这将替换日志消息中的命令。
例如配置
    usb-check
    ossec: output: 'reg QUERY HKLM\SYSTEM\CurrentControlSet\Enum\USBSTOR':
将被替换为
    ossec: output: 'usb-check':
  * frequency
命令运行之间的最小时间间隔。时间间隔可能会比该值大，适用于log_format为command、full_command。
  * check_diff
事件的输出将存储在一个内部数据库中。每次接收到相同的事件时，输出都会与之前的输出相比较。如果输出发生了变化，将生成一个警告。
命令监控的具体事例：
默认的ossec.conf中自带的配置检查硬盘空间：
        command
        df -P
所对应的rule在ossec_rules.xml
        530
        ossec: output: 'df -P': /dev/
        100%
        Partition usage reached 100% (disk space monitor).
        low_diskspace,
默认的ossec.conf中自带的配置新增端口监听：
        full_command
        netstat -tan |grep LISTEN |egrep -v '(127.0.0.1| ::1)' | sort
所对应的rule在ossec_rules.xml
        530
        ossec: output: 'netstat -tan
        Listened ports status (netstat) changed (new port opened or closed).
执行的结果保存在queue/diff/下，每次执行会进行比对
    [root@localhost ossec]# cat queue/diff/192.168.192.196/533/last-entry
    ossec: output: 'netstat -tan |grep LISTEN |egrep -v '(127.0.0.1| \\1)' | sort':
    tcp        0      0 0.0.0.0:111                 0.0.0.0:*                   LISTEN     
    tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN     
    tcp        0      0 0.0.0.0:37498               0.0.0.0:*                   LISTEN     
    tcp        0      0 :::111                      :::*                        LISTEN     
    tcp        0      0 :::22                       :::*                        LISTEN     
    tcp        0      0 :::62229                    :::*                        LISTEN
这里测试一下用nc监听2345端口，告警如下：
    ** Alert 1499397975.7591: mail  - ossec,
    2017 Jul 07 11:26:15 (192.168.192.196) any->netstat -tan |grep LISTEN |egrep -v '(127.0.0.1| \\1)' | sort
    Rule: 533 (level 7) -> 'Listened ports status (netstat) changed (new port opened or closed).'
    ossec: output: 'netstat -tan |grep LISTEN |egrep -v '(127.0.0.1| \\1)' | sort':
    tcp        0      0 0.0.0.0:111                 0.0.0.0:*                   LISTEN     
    tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN     
    tcp        0      0 0.0.0.0:2345                0.0.0.0:*                   LISTEN     
    tcp        0      0 0.0.0.0:37498               0.0.0.0:*                   LISTEN     
    tcp        0      0 :::111                      :::*                        LISTEN     
    tcp        0      0 :::22                       :::*                        LISTEN     
    tcp        0      0 :::62229                    :::*                        LISTEN     
    Previous output:
    ossec: output: 'netstat -tan |grep LISTEN |egrep -v '(127.0.0.1| \\1)' | sort':
    tcp        0      0 0.0.0.0:111                 0.0.0.0:*                   LISTEN     
    tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN     
    tcp        0      0 0.0.0.0:37498               0.0.0.0:*                   LISTEN     
    tcp        0      0 :::111                      :::*                        LISTEN     
    tcp        0      0 :::22                       :::*                        LISTEN     
    tcp        0      0 :::62229                    :::*                        LISTEN
之前在《Linux应急响应姿势浅谈》中提到的，Linux下开机启动项是应急响应中很重要的检测项，Redhat中的运行模式2、3、5都把/etc/rc.d/rc.local做为初始化脚本中的最后一个。这里我在agent的ossec.conf中新加一个监控，检测当rc.local发生改变的时候告警。
        full_command
        /bin/cat /etc/rc.local
        10
在Server端的/var/ossec/rules/ossec_rules.xml下新增一条规则
          530
          ossec: output: '/bin/cat
          rclocal changed
然后重启Server和Agent
Agent执行
    echo “echo test” >> /etc/rc.local
报警如下：
    ** Alert 1499399596.13605: mail  - ossec,
    2017 Jul 07 11:53:16 (192.168.192.196) any->/bin/cat /etc/rc.local
    Rule: 536 (level 7) -> 'rclocal changed'
    ossec: output: '/bin/cat /etc/rc.local':
    #!/bin/sh
    #
    # This script will be executed *after* all the other init scripts.
    # You can put your own initialization stuff in here if you don't
    # want to do the full Sys V style init stuff.
    touch /var/lock/subsys/local
    echo test
    Previous output:
    ossec: output: '/bin/cat /etc/rc.local':
    #!/bin/sh
    #
    # This script will be executed *after* all the other init scripts.
    # You can put your own initialization stuff in here if you don't
    # want to do the full Sys V style init stuff.
    touch /var/lock/subsys/local
### **2）完整性检测**
命令替换在应急响应中很常见，经常被替换掉的命令例如ps、netstat、ss、lsof等等。另外还有SSH后门。完整性检测的工作方式是Agent周期性的扫描系统文件，并将检验和发送给Server端。Server端存储并进行比对，发现修改是发出告警。
数据存放到服务端的/var/ossec/queue/syscheck目录下
    [root@localhost syscheck]# ll /var/ossec/queue/syscheck
    total 1388
    -rw-r----- 1 ossec ossec 469554 Jun 29 03:16 (192.168.192.195) 192.168.192.195->syscheck
    -rw-r----- 1 ossec ossec 469554 Jun 29 03:49 (192.168.192.196) 192.168.192.196->syscheck
    -rw-r----- 1 ossec ossec 470797 Jun 29 18:13 syscheck
常用的配置如下：
  * directories
默认值是/etc,/usr/bin,/usr/sbin,/bin,/sbin,/boot
属性配置如下
realtime：实时监控
report_changes：报告文件变化，文件类型只能是文本
check _all：check_ *全部为yes
check_sum：监测MD5和SHA1 HASH的变化，相当于设置check_sha1sum=”yes”和check_md5sum=”yes”
check_sha1sum：监测SHA1 HASH的变化
check_md5sum：监测MD5 HASH的变化
check_size：监测文件大小
check_owner：监测属主
check_group：监测属组
check_perm：监测文件权限
restrict：限制对包含该字符串的文件监测
  * ignore
配置忽略的文件和目录。所配置的文件和目录依然会检测，不过结果会忽略。
支持正则匹配
    .log$|.tmp
  * frequency
检测周期
  * scan_time
开始扫描的时间，格式可以是21pm, 8:30, 12am
  * scan_day
配置一周中的哪天可以扫描，格式sunday, saturday, monday
  * auto_ignore
忽略变化超过3次的文件
  * alert_new_files
新文件创建时告警
  * scan_on_start
启动时扫描
  * windows_registry
Windows注册表项监控
  * registry_ignore
忽略的注册表项
  * prefilter_cmd
Prelink会修改二进制文件，以方便其快速启动，所以会导致二进制文件的MD5修改，导致误报。这个配置目的是忽略掉prelink产生的误报，配置
    /usr/sbin/prelink -y
需要注意的是改配置会影响性能。
  * skip_nfs
跳过CIFS和NFS挂载目录
配置示例：
        /etc,/usr/bin,/usr/sbin
        /root/users.txt,/bsd,/root/db.html
修改告警级别，例如当/var/www/htdocs修改时，告警级别修改为12
        syscheck
        /var/www/htdocs
        Changes to /var/www/htdocs - Critical file!
这里有一个需要注意的地方，我一开始使用OSSEC的时候，用的默认配置，然后凌晨3点的时候收到了大量的告警，如下：
    ** Alert 1500341372.94081: mail - ossec,syscheck,
    2017 Jul 18 09:29:32 localhost->syscheck
    Rule: 550 (level 7) -> 'Integrity checksum changed.'
    Integrity checksum changed for: '/sbin/partprobe'
    Old md5sum was: 'cabd9d003c9f3b194b32eff8d27e9dfc'
    New md5sum is : '34a3700736e54368e296c24acef6f5b9'
    Old sha1sum was: '0eb531a5bce4fdf30da3d69aed181b54b4870f0b'
    New sha1sum is : '19640bd6d1ebc4298423498a9363dfe2074023ad'
    ** Alert 1500341380.94500: mail - ossec,syscheck,
    2017 Jul 18 09:29:40 localhost->syscheck
    Rule: 550 (level 7) -> 'Integrity checksum changed.'
    Integrity checksum changed for: '/sbin/wipefs'
    Old md5sum was: '61ddf66c79323caff5d8254a29b526dc'
    New md5sum is : '45af33cff81598dd0a33f0439c6aa68f'
    Old sha1sum was: '161d409336291c8ed03a89bd8378739934dca387'
    New sha1sum is : 'a735876ea2090323bd766cfb6bad0f57c6a900f2'
告警显示/sbin下的执行文件MD5都修改了。其实这里是因为定时任务Prelink导致。以CentOS6.5系统为例，
    [root@sec248 cron.daily]# ls
    logrotate  makewhatis.cron  mlocate.cron  prelink  readahead.cron  tmpwatch
cron.daily下有一个定时任务prelink，Prelink利用事先链接代替运行时链接的方法来加速共享库的加载，它不仅可以加快起动速度，还可以减少部分内存开销，
是各种Linux架构上用于减少程序加载时间、缩短系统启动时间和加快应用程序启动的很受欢迎的一个工具，解决方案是添加配置
    /usr/sbin/prelink -y
在比对MD5或者SHA1之前，会先执行`prelink -y `，从而避免误报。`prelink -y
`会输出prelink之前的原始文件内容。
PS：
偶尔会收到大量告警，所监控二进制文件的SHA都变成了da39a3ee5e6b4b0d3255bfef95601890afd80709，如下图所示：
登录服务器执行
    prelink -y /bin/sh
    at least one of file’s dependencies has changed since prelinking
解决方法：/usr/sbin/prelink -av -mR
参考链接：
### **3）Rootkit检测**
Rootkit也是平时应急响应比较头疼的，OSSEC的检测原理如下：
对比rootkit_files.txt，该文件中包含了rootkit常用的文件。就像病毒库一样。
    [root@localhost shared]# egrep -v "^#" rootkit_files.txt | grep -v '^$' | head -n 3
    tmp/mcliZokhb           ! Bash door ::/rootkits/bashdoor.php
    tmp/mclzaKmfa           ! Bash door ::/rootkits/bashdoor.php
    dev/.shit/red.tgz       ! Adore Worm ::/rootkits/adorew.php
如果是以`*`开头的话，会扫描整个系统。
对比rootkit_trojans.txt文件中二进制文件特征。
    [root@localhost shared]# egrep -v "^#" rootkit_trojans.txt | grep -v '^$' | head -n 3
    ls          !bash|^/bin/sh|dev/[^clu]|\.tmp/lsfile|duarawkz|/prof|/security|file\.h!
    env         !bash|^/bin/sh|file\.h|proc\.h|/dev/|^/bin/.*sh!
    echo        !bash|^/bin/sh|file\.h|proc\.h|/dev/[^cl]|^/bin/.*sh!
扫描整个文件系统，检测异常文件和异常的权限设置，文件属主是root，但是其他用户可写是非常危险的，rootkit将会扫描这些文件。同时还会检测具有suid权限的文件、隐藏的文件和目录。
另外还会检测隐藏端口、隐藏进程、/dev目录、网卡混杂模式等。
这里看一下ossec.conf中默认的rootcheck的配置
        /var/ossec/etc/shared/rootkit_files.txt
        /var/ossec/etc/shared/rootkit_trojans.txt