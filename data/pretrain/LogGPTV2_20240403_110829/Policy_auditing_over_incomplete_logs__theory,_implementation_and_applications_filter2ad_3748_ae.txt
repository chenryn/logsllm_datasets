### 实验评估

#### 单次运行算法的实验评估
在图2中，我们展示了单次运行算法`reduce`的实验结果。我们假设对嵌套在策略中的谓词进行索引可以提高性能。实验1-5的结果验证了这一假设。例如，在`send`表（实验2）上建立索引并未带来任何性能提升，因为`send`表在线性扫描时被访问，而不是随机访问。相比之下，在更深层嵌套的谓词`tagged`（实验3）和`attr in db`（实验4）上建立索引分别带来了轻微和显著的性能提升。当所有其他表都被索引后（实验5），性能有了大幅度的提升。

#### 日志大小对审计时间的影响
实验5、6和8测量了日志大小对完全索引表的审计时间的影响。正如预期的那样，随着日志规模的增长，整体审计时间和每条披露记录的审计时间均有所增加。

#### 违规披露与合规披露比例的影响
实验7-9探讨了违规披露与合规披露比例变化对审计时间的影响。从结果可以看出，当违规披露的比例增加时，每条披露记录的平均处理时间略有减少。这是因为在`ϕHIPAA`的主要部分中，一旦某个合取项变为假，`reduce`算法就会立即终止。相反，对于合规披露，整个公式都需要被还原。因此，没有违规披露的情况（如实验7）代表了最差情况下的性能。即使在这种情况下，算法的实际表现依然十分理想——对于一个包含21,684条无违规披露记录的15MB数据库，`reduce`可以在平均0.12秒内完成每条披露记录的审计。

### 迭代运行算法的实验评估
在第二组实验中，我们模拟了`reduce`算法在逐步增大的日志上的三次迭代，并测量每次迭代后的残余公式大小。第一次迭代的输入是`ϕHIPAA`公式及一个包含5401条披露记录的日志。

图3总结了这些实验的结果。第一列显示了作为`reduce`输入的策略公式的文本表示大小，第二列是输出公式的大小。其余列则记录了运行时间、内存消耗、每次迭代的日志大小以及日志中的披露记录数量。尽管输出公式非常大（例如，第一次运行后的输出公式大小为4,654.07 KB），但这是因为每个披露记录都会复制大部分策略公式。不过，由于`ϕHIPAA`中大量的SUBJ原子，这些复制的公式并没有被完全消除（84个子句中有67个包含SUBJ原子）。虽然大型输出公式会减慢后续迭代的速度，但这并不是`reduce`算法的主要应用场景。实际上，我们预计`reduce`将与交互式前端结合使用，允许审计员选择特定感兴趣的子公式（例如，涉及特定代理人的披露记录）并仅对这些子公式运行`reduce`算法。此外，该前端还可以让审计员提供关于主观原子的信息，并记录这些信息以供后续使用。

### 相关工作
#### 基于时态逻辑的运行时监控
许多先前的工作解决了用线性时态逻辑（LTL）及其扩展表达的策略的运行时监控问题[32, 3, 29, 31, 9, 5, 30]。尽管这些方法在精神上与我们的工作相似，但在实际部署方面有所不同：我们假设系统日志是独立积累并提供给算法的，而运行时监控的一个重要组成部分是在飞行中积累系统日志。我们的假设适用于像健康组织这样的实际情况，它们为了遵守诸如HIPAA之类的法规而收集传输、披露及其他日志，即使没有计算机化的策略执行机制。

从逻辑表达能力来看，我们的工作比现有的所有策略执行工作更为先进。首先，LTL可以很容易地编码到我们的逻辑中[15]；其次，我们的逻辑允许表达性的量化，而之前的工作要么局限于命题逻辑[32, 3, 29]，要么在考虑量词时受到严重限制[30, 5, 31]。Basin等人最近的一项工作[9]是一个例外，他们考虑了一种度量一阶时态逻辑的表达片段，类似于我们的工作，允许对无限域进行量化，并使用一种形式的模式分析（称为安全范围分析）来确保执行过程中的有限性。然而，他们的模式分析较弱，不能关联不同合取项中的相同变量，要求每个自由变量至少在一个具有有限模型的谓词中出现。因此，一些策略如第5节中的HIPAA策略`ϕHIPAA`无法在其框架下执行，但在我们的框架下可以。

#### 策略审计的形式框架
Cederquist等人[12]提出了一种基于证明的系统用于事后审计，其中政策义务通过构建正式证明来解除。证明的叶节点由日志建立，但审计过程仅检查过去某处是否满足了义务。此外，没有系统的机制来实例化证明中的量词。然而，利用线性逻辑的连接符，该机制支持依赖一次性权限的策略。

#### 迭代执行
之前的研究也考虑了在不断演变的日志上迭代重写策略的问题[29, 32]，但仅限于命题逻辑，其中缺乏量词简化了问题。Bauer等人[3]采用了一种不同的方法进行迭代执行：他们将带有有限一阶量词的LTL公式转换为Büchi自动机，并检查该自动机是否接受输入日志。此外，他们也使用了类似于我们的三值语义模型，但假设日志记录了所有过去的事件（过去完备性）。三值结构也在广义模型检查工作中被考虑过[11, 19]。然而，这些问题的目标不同，目的是检查是否存在使得公式成立（或不成立）的给定结构的扩展。

Barth等人[6]提出了两种合规性检查的形式定义：强合规性和弱合规性。如果存在一条包含该动作且满足策略的轨迹扩展，则该动作是强合规的。我们在本文中不考虑强合规性。如果轨迹加上该动作满足策略的当前要求，则该动作在命题时态逻辑（PLTL）中是弱合规的。然而，弱合规的动作可能会导致未来的要求不可满足。技术定义是根据标准的PLTL表格构造给出的，它语法上分离了当前和未来的要求。我们的`reduce`正确性属性将弱合规性推广到了更丰富的策略和结构类别：PLTL可以编码到我们的策略逻辑中，残余公式概括了未来的要求，而过去完备的轨迹是我们部分结构的一个特例。

在另一篇相关论文中，Barth等人[7]提出了一种算法，通过检查审计日志来检测策略违规行为并确定应对违规行为负责的代理。虽然我们的审计算法可以用于检测比Barth等人所考虑的命题逻辑丰富得多的策略违规行为，但它并不识别应对违规行为负责的代理。

Lam等人[22]在Prolog的一个扩展版本pLogic中表示了HIPAA隐私规则的一部分政策要求，并用它实现了一个医疗消息系统的合规性检查器。该合规性检查器对医疗消息的合法性做出决策。