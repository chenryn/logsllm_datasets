(cid:35)
n
o
i
t
u
c
e
x
e
e
d
o
C
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
Attack Category
DoS
Information Disclosure
Data Manipulation
RCE
p
o
o
l
e
t
i
n
ﬁ
n
I
b
m
o
b
e
t
a
ﬂ
e
D
n
o
i
t
a
c
o
v
n
i
L
R
U
e
g
a
k
a
e
l
a
t
a
d
m
r
o
F
e
g
a
k
a
e
l
e
l
ﬁ
l
a
c
o
L
t
f
e
h
t
l
a
i
t
n
e
d
e
r
C
n
o
i
t
a
c
ﬁ
i
d
o
m
m
r
o
F
(cid:32) Application vulnerable
EVALUATION RESULTS: OUT OF 28 TESTED PDF APPLICATIONS, 26 ARE VULNERABLE TO AT LEAST ONE ATTACK.
based on inﬁnite loops, even browsers such as Chrome and
Firefox were fully affected, while in Opera only the current tab
became unresponsive. The remaining seven PDF applications
did refuse to decompress the whole stream, but instead aborted
decompression after a reasonable amount of time – probably
after a watchdog limit was reached.
It is noteworthy that we did not even have to actually
open the malicious document on Windows and Linux in order
to cause DoS to the operating system. Both Windows File
Explorer and Gnome Nautilus ﬁle manager try to preview the
document if the containing directory is opened, and thereby
process its content resulting in resource exhaustion. MacOS
(Finder) was not vulnerable, because it stopped thumbnail
generation, probably after a resource limit was hit.
Although DoS attacks against web servers were not tested
for ethical reasons, applications processing PDF ﬁles on the
server-side are likely to be affected too. For example, Evince
and Okular, which are both vulnerable, are based on Poppler,16
a popular PDF library used by various cloud storage providers
and ﬁle-hosting solutions such as Seaﬁle17 in order to generate
preview images of uploaded PDF documents.
C. Information Disclosure
1) URL Invocation: To evaluate if malicious documents
can enforce PDF applications to trigger a connection to an
attacker controlled server, we combined various PDF features
with techniques to automatically call them once the document
was opened. The results for auto-triggered PDF actions re-
sulting in URL invocation are as follows: URI action (9 vul-
nerable), GoToR (1 vulnerable), Launch (6 vulnerable), and
SubmitForm (11 vulnerable). For seven applications, we could
use standard JavaScript functions to invoke a connection. In
one viewer, we could set a URL as the external content stream
of an image, which was loaded from the attacker’s server.
In two viewers, we were able to inject a subset of XHTML,
leading to XHTML tags being being processed which triggered
a remote connection. Altogether, 17 PDF applications could
be tricked into (silently) invoking a connection to our server,
once a malicious document was opened by the user. It can be
16See https://poppler.freedesktop.org/.
17See https://www.seaﬁle.com/.
8
concluded that it is relatively easy to craft a PDF document
which reports back to the author (or a third party) when the
document is opened, in a majority of the tested applications.
Note that for vulnerable PDF interpreters in web browsers
this issue can lead to further, web-security weaknesses. For
example, a malicious document uploaded by the attacker to
a social media website can trigger same-site requests18 if
viewed by the victim. This would otherwise be forbidden by
the browser and may be exploited to perform actions in the
context of the user’s account, in case same-site cookies [64]
are used by the web application to protect against cross-site
request forgery (CSRF).
2) Form Data Leakage: To test if form data can be leaked
silently, without the user knowing, we modiﬁed the standard
U.S. individual tax return form 104019 to send all user input to
our webserver once the document is either printed or closed.
This can be done by combining the DP (“did print”) and PC
(“page closed”) events of the Catalog and Annotation objects
with a SubmitForm action or JavaScript. We classify the attack
as successful if a PDF application passes ﬁlled-in form data
without the user being made aware of it (i.e., no warning
message or conﬁrmation dialog displayed). Nine applications
are vulnerable to this attack, using forms that auto-submit
themselves. For two additional applications, we were able to
use JavaScript to access form data and silently exﬁltrate it to
our server. Nine applications did ask the user before sending
the data, which we consider as sane behavior. Another eight
PDF interpreters (e.g., on macOS and Linux) did not support
the feature of submitting PDF form data at all.
3) Local File Leakage: Although part of the standard,
only two applications (i.e., PDF-XChange Editor and Nuance
Power PDF) support
the feature of external streams. For
both applications, we were able to craft a document which
embeds arbitrary ﬁles on disk into the document and silently
leaks them to an external server using both auto-submitting
forms and JavaScript. Exﬁltration happens in the background
once the document is opened, without the user noticing and
without any visible changes to the document. For another three
applications, we were able to include and automatically leak
the contents of FDF ﬁles and XML-based XFDF ﬁles (using
the ImportData action or the ImportFDF JavaScript function).
We classify this vulnerability as limited, because it is restricted
by ﬁle type – yet it should be clear that such behavior is not
desired either. Note that this attack is different from “form
data leakage” as mentioned before, because although (X)FDF
ﬁles usually contain PDF form data, this attack results in the
contents of external (X)FDF ﬁles from disk being leaked,
which is may be completely unrelated to the form data of
the currently opened (malicious) document. For PDF-XChange
Viewer, we were additionally able to use standard JavaScript
functions to access arbitrary ﬁles and the leak them.
4) Credential Theft: We installed Responder20 as a rogue
authentication server to obtain the client’s NTLM hashes
when opening the malicious document. We were able to
leak the hashes of NTLM credentials to our server without
the user noticing or being asked for conﬁrmation to open a
18HTTP POST requests in Chrome and Opera, GET requests in Firefox.
19Available for download from https://www.irs.gov/pub/irs-pdf/f1040.pdf.
20See https://github.com/SpiderLabs/Responder.
connection to the rogue network shared drive on 12 out of the
18 Windows based PDF viewers. Using hashcat,21 we could
perform successful brute force attacks on the hashes of simple
5-character passwords within within seconds.22 Note that, by
design, only applications running on Windows are affected. We
used a mixture of techniques to accomplish this goal: external
streams, standard PDF actions, as well as JavaScript. Various
readers were affected by multiple test cases. It is interesting
to note that, although Foxit ﬁxed this issue in 2018 for
PhantomPDF/Reader, we could identity bypasses using four
different techniques. This is because – apparently – accessing
a share invocation via GoToR actions (as documented in the
original exploit) was prohibited, however, using other action
types, such as auto-printing a ﬁle on a network shared drive,
we were again able to enforce NTLM hashes being leaked.
D. Data Manipulation
1) Form Modiﬁcation: To test the feasibility of crafting
PDF documents that silently manipulate their own form data,
we once again modiﬁed the U.S. tax return form 1040. We
added an ImportData action that changes the refund account
number to the attacker’s account number once the document
is printed.23 We used the WP (“will print”) event for this
purpose. Unfortunately, from an attacker’s point of view, none
of the tested applications supports importing form data from
an embedded ﬁle within the document itself – or from an
external URL. By using standard PDF JavaScript functions
(getAnnots()[i].contents), we were however able to
modify PDF form data in six applications. JavaScript also
allowed us to temporarily store the original user data and undo
our manipulation immediately after the document had been
printed, using the DP (“did print”) event, and to enforce that
these modiﬁcations are only performed until a certain date,
thereby making it more difﬁcult to reproduce the manipulation.
2) File Write Access: Only three applications allowed to
submit form data to a local ﬁle. While Foxit PhantomPDF and
Foxit Reader explicitly ask the user before writing to disk,
Master PDF Editor silently writes to or overwrites arbitrary
ﬁles with attacker controlled content by auto-submitting the
form data to a PDF File Speciﬁcation. We also tested six
standard PDF JavaScript functions to write to disk. The
extractPages() function allowed us to write data to
arbitrary locations on disk in PDF-XChange Editor. The other
applications did not support writing ﬁles with JavaScript at all,
asked the user for conﬁrmation, or showed a “Save as” dialog,
instead of automatically writing the ﬁle to a given location.
3) Content Masking: We deﬁne an application as vulner-
able if we can create a document that displays certain text
in this, and only in this, application, while a completely
different text is displayed in all other tested PDF viewers
– with the exception of two applications utilizing the same
underlying PDF interpreter (e.g., Evince/Okular are both based
on Poppler). Furthermore, if a vendor produces a “viewer”
and an “editor” version of an application, both may also
21See https://hashcat.net/hashcat/.
22Of course, it is up to the conﬁguration of the victim’s setup (e.g., password
strength and security policy) if efﬁcient cracking attacks are actually feasible.
23It must be noted that, in practice, this attack does not only have a technical
component. It will only work if the attacker’s bank accepts the deposit, see
https://www.irs.gov/faqs/irs-procedures/refund-inquiries/refund-inquiries-18.
9
display the same text. Of our 94 hand-crafted edge cases, 63
rendered differently when opened in different applications. Full
details are given in Table VII in the appendix. For three PDF
interpreter engines (six applications), we found a case where
certain text was displayed only in this interpreter. For other
PDF interpreters, we could not ﬁnd edge cases that resulted in
a unique appearance (i.e., no other interpreter displaying the
same text), therefore we did not classify them as vulnerable.
It must, however, be noted that test cases can potentially be
chained together, which may result in getting more applications
to render unique content. This challenge is considered as future
work. Another interesting use of this technique would be
ﬁngerprinting PDF interpreters applied in web applications to
process or preview documents based on the rendered result of
PDF ﬁle uploads.
E. Code Execution: Launch Action
In theory, by chaining PDF standard features, an attacker
can easily get code execution “by design”. We combined a
LaunchAction with an OpenAction event to achieve this goal
and launch an executable ﬁle. Surprisingly, this worked out of
the box on six applications. The .exe ﬁle was launched without
any conﬁrmation dialog being displayed. The other tested
applications asked the user for conﬁrmation (5 viewers) before
executing the ﬁle, denied to launch executable ﬁles (Acrobat
Reader/Pro),24 or did not support the LaunchAction at all in
the default settings (11 viewers). Three Linux based viewers
(Evince, Okular, and MuPDF) use xdg-open25 to handle the
ﬁle to be launched, thereby delegating the security decision
to a third-party application. On our Debian GNU/Linux test
system, this resulted in code execution with minimal user
interaction; by referencing an .exe from a Link annotation,
the ﬁle was executed with /usr/bin/mono, an emulator
for .NET executables, if the user clicked somewhere into the
document.26 This was also a requirement for PDFelement.
We classify these vulnerabilities as “limited” because – even
though no conﬁrmation dialog is presented to the user –
the exploit is not fully automated.27 PDF Architect 6, which
we initially tested, was also vulnerable to code execution.
However, version 7 had removed support for the Launch action.
Finally, it must be said that, even if a conﬁrmation dialog is
presented, attackers may apply social engineering techniques
to trick the victim into launching the ﬁle.
Because the Launch action can be considered as a danger-
ous feature, we conducted a large-scale evaluation of 294 586
PDF documents downloaded from the Internet28, in order to
research if there are any legitimate use cases at all. Of those
documents, only 532 ﬁles (0.18%) contained a Launch action.
While none of the ﬁles was classiﬁed as malicious according to
24Note that Adobe products use a blacklist of potentially “dangerous” ﬁle
extensions. However, various bypasses have been identiﬁed in the past [49].
25See https://www.freedesktop.org/wiki/Software/xdg-utils/.
26Readers may ask themselves: How often did I click in this document to
jump to a certain section? Would I anticipate this can lead to code execution?
27Note that this is the only vulnerability described in this paper that requires
a bit of user interaction and is not automatically triggered once the document
is opened, because such events are not supported by Linux based readers.
28We obtained the dataset from the Cisco Umbrella 1 Million list of domains
(see https://s3-us-west-1.amazonaws.com/umbrella-static/index.html). Instead
of crawling each website directly for PDF documents, we searched the Internet
Archive (see https://web.archive.org) for links to PDF ﬁles in each each domain
and then retrieved all linked PDF documents from the original (live) website.
the VirusTotal database,29 we conclude that the Launch action
is rarely used in the wild and its support should be removed
by PDF implementations as well as the standard.
VIII. ADDITIONAL FINDINGS
In this section, we present additional insights related to
JavaScript, Digital Rights Management, and hidden data in
PDF documents.
A. JavaScript-based Fingerprinting
While the syntax of JavaScript code embedded in PDF
documents is based on the ECMA standards [21], there is
no speciﬁcation of the Document Object Model (DOM) for
PDF documents. Furthermore, the API provided by Adobe [2]
is rather descriptive than prescriptive, i.e., lacking any form
of IDL deﬁnitions. Thus, the objects and properties visible to
JavaScript differ widely between different viewers. This results
in embedded JavaScript engines of PDF viewers being easily
ﬁngerprinted via their provided functionality. As a simple proof
of concept, we show that one can distinguish every JavaScript
supporting PDF viewer already by recursively enumerating and
counting the properties of the execution environment.
We show that the surface of the JavaScript API differs
signiﬁcantly between viewers. Using a crawler written in
JavaScript we automated the enumeration of the API. The
results, containing various details on all encountered prop-
erties, are extracted as JSON. Table II shows the number
of properties grouped by their type. The greatly varying
number of available functions highlights the disparity between
implementation; this ranges from viewers only being capable
of running loops and simple arithmetic without any further API
(e.g., Evince), to viewers with only a handful of functions (e.g.,
PDF XChange Viewer: 114), to an almost complete coverage
of the Adobe API (e.g., Acrobat Reader: 6742).
Additionally, many of the identiﬁed functions are not docu-
mented in the Adobe PDF JavaScript standard and do not
yield any result on public search engines. The absence of
public knowledge of these properties indicates that they are
not intended to be used by authors of PDF documents. It is
questionable whether these hidden APIs are well tested. We
used the extracted JSON results as input for JavaScript code
which simply calls every available function in the API with
zero to four empty-string parameters. This already was enough
to crash four PDF applications, thereby enabling DoS attacks.
Identifying the application is a useful preparation stage for
attacks. It allows an attacker to send a ﬁrst PDF document
to the victim that replies back (e.g., using JavaScript APIs)
which PDF viewer is used by the victim, and then exploit
the vulnerabilities of this speciﬁc viewer by sending a second
specially crafted attack PDF ﬁle to the victim.
B. Digital Rights Management
PDF documents can be “protected” based on questionable
client-side security mechanisms. For example, the speciﬁca-
tion allows to restrict certain document capabilities, such as
printing, copying text, or editing content. Technically, a special
permissions object is added to the document which, according
29See https://www.virustotal.com/.
10
Access Permissions
Print
Copy
Application
Acrobat Reader DC
Foxit Reader
PDF-XChange Viewer
Perfect PDF Reader
PDF Studio Viewer
Nitro Reader
Acrobat Pro DC
Foxit PhantomPDF
PDF-XChange Editor
Perfect PDF Premium
PDF Studio Pro
Nitro Pro
Nuance Power PDF
iSkysoft PDF Editor
Master PDF Editor
Soda PDF Desktop
PDF Architect
PDFelement
Preview
Skim
Evince
Okular
MuPDF
Chrome
Firefox
Safari
Opera
Edge
s
w
o
d
n
i
W
c
a
M
x
u
n
i
L
b
e
W
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
–
Edit
–
–
–
–
–
–
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
–
–
–
–
–
–
–
–
–
–
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
(cid:32)
(cid:35)
Application
Acrobat Reader DC
Foxit Reader
PDF-XChange Viewer
Perfect PDF Reader¹
PDF Studio Viewer
Nitro Reader
Acrobat Pro DC
Foxit PhantomPDF
PDF-XChange Editor
Perfect PDF Premium¹
PDF Studio Pro
Nitro Pro
Nuance Power PDF
iSkysoft PDF Editor
Master PDF Editor
Soda PDF Desktop
PDF Architect
PDFelement
Preview
Skim
Evince
Okular
MuPDF