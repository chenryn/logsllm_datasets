# Attack Categories and Vulnerabilities in PDF Applications

## A. Denial of Service (DoS)

### 1. Infinite Loops
Based on infinite loops, even browsers such as Chrome and Firefox were fully affected, while in Opera only the current tab became unresponsive. The remaining seven PDF applications refused to decompress the whole stream, but instead aborted decompression after a reasonable amount of time—likely due to a watchdog limit.

It is noteworthy that we did not even have to open the malicious document on Windows and Linux to cause DoS to the operating system. Both Windows File Explorer and Gnome Nautilus file manager try to preview the document if the containing directory is opened, resulting in resource exhaustion. MacOS (Finder) was not vulnerable because it stopped thumbnail generation, probably after hitting a resource limit.

Although DoS attacks against web servers were not tested for ethical reasons, applications processing PDF files on the server-side are likely to be affected too. For example, Evince and Okular, which are both vulnerable, are based on Poppler, a popular PDF library used by various cloud storage providers and file-hosting solutions such as Seafile to generate preview images of uploaded PDF documents.

## B. Information Disclosure

### 1. URL Invocation
To evaluate if malicious documents can enforce PDF applications to trigger a connection to an attacker-controlled server, we combined various PDF features with techniques to automatically call them once the document was opened. The results for auto-triggered PDF actions resulting in URL invocation are as follows: URI action (9 vulnerable), GoToR (1 vulnerable), Launch (6 vulnerable), and SubmitForm (11 vulnerable). For seven applications, we could use standard JavaScript functions to invoke a connection. In one viewer, we could set a URL as the external content stream of an image, which was loaded from the attacker’s server. In two viewers, we were able to inject a subset of XHTML, leading to XHTML tags being processed, which triggered a remote connection. Altogether, 17 PDF applications could be tricked into (silently) invoking a connection to our server once a malicious document was opened by the user.

This issue can lead to further web-security weaknesses, especially for vulnerable PDF interpreters in web browsers. For example, a malicious document uploaded by the attacker to a social media website can trigger same-site requests if viewed by the victim. This would otherwise be forbidden by the browser and may be exploited to perform actions in the context of the user’s account, in case same-site cookies are used by the web application to protect against cross-site request forgery (CSRF).

### 2. Form Data Leakage
To test if form data can be leaked silently, without the user knowing, we modified the standard U.S. individual tax return form 1040 to send all user input to our webserver once the document is either printed or closed. This can be done by combining the DP (“did print”) and PC (“page closed”) events of the Catalog and Annotation objects with a SubmitForm action or JavaScript. We classify the attack as successful if a PDF application passes filled-in form data without the user being made aware of it (i.e., no warning message or confirmation dialog displayed). Nine applications are vulnerable to this attack, using forms that auto-submit themselves. For two additional applications, we were able to use JavaScript to access form data and silently exfiltrate it to our server. Nine applications did ask the user before sending the data, which we consider as sane behavior. Another eight PDF interpreters (e.g., on macOS and Linux) did not support the feature of submitting PDF form data at all.

### 3. Local File Leakage
Although part of the standard, only two applications (i.e., PDF-XChange Editor and Nuance Power PDF) support the feature of external streams. For both applications, we were able to craft a document which embeds arbitrary files on disk into the document and silently leaks them to an external server using both auto-submitting forms and JavaScript. Exfiltration happens in the background once the document is opened, without the user noticing and without any visible changes to the document. For another three applications, we were able to include and automatically leak the contents of FDF files and XML-based XFDF files (using the ImportData action or the ImportFDF JavaScript function). We classify this vulnerability as limited, because it is restricted by file type—yet it should be clear that such behavior is not desired either. Note that this attack is different from “form data leakage” as mentioned before, because although (X)FDF files usually contain PDF form data, this attack results in the contents of external (X)FDF files from disk being leaked, which may be completely unrelated to the form data of the currently opened (malicious) document. For PDF-XChange Viewer, we were additionally able to use standard JavaScript functions to access arbitrary files and leak them.

### 4. Credential Theft
We installed Responder as a rogue authentication server to obtain the client’s NTLM hashes when opening the malicious document. We were able to leak the hashes of NTLM credentials to our server without the user noticing or being asked for confirmation to open a connection to the rogue network shared drive on 12 out of the 18 Windows-based PDF viewers. Using hashcat, we could perform successful brute force attacks on the hashes of simple 5-character passwords within seconds. Note that, by design, only applications running on Windows are affected. We used a mixture of techniques to accomplish this goal: external streams, standard PDF actions, as well as JavaScript. Various readers were affected by multiple test cases. It is interesting to note that, although Foxit fixed this issue in 2018 for PhantomPDF/Reader, we could identify bypasses using four different techniques. This is because—apparently—accessing a share invocation via GoToR actions (as documented in the original exploit) was prohibited, however, using other action types, such as auto-printing a file on a network shared drive, we were again able to enforce NTLM hashes being leaked.

## C. Data Manipulation

### 1. Form Modification
To test the feasibility of crafting PDF documents that silently manipulate their own form data, we modified the U.S. tax return form 1040. We added an ImportData action that changes the refund account number to the attacker’s account number once the document is printed. We used the WP (“will print”) event for this purpose. Unfortunately, from an attacker’s point of view, none of the tested applications supports importing form data from an embedded file within the document itself—or from an external URL. By using standard PDF JavaScript functions (getAnnots()[i].contents), we were, however, able to modify PDF form data in six applications. JavaScript also allowed us to temporarily store the original user data and undo our manipulation immediately after the document had been printed, using the DP (“did print”) event, and to enforce that these modifications are only performed until a certain date, thereby making it more difficult to reproduce the manipulation.

### 2. File Write Access
Only three applications allowed submitting form data to a local file. While Foxit PhantomPDF and Foxit Reader explicitly ask the user before writing to disk, Master PDF Editor silently writes to or overwrites arbitrary files with attacker-controlled content by auto-submitting the form data to a PDF File Specification. We also tested six standard PDF JavaScript functions to write to disk. The extractPages() function allowed us to write data to arbitrary locations on disk in PDF-XChange Editor. The other applications did not support writing files with JavaScript at all, asked the user for confirmation, or showed a “Save as” dialog, instead of automatically writing the file to a given location.

### 3. Content Masking
We define an application as vulnerable if we can create a document that displays certain text in this, and only in this, application, while a completely different text is displayed in all other tested PDF viewers—with the exception of two applications utilizing the same underlying PDF interpreter (e.g., Evince/Okular are both based on Poppler). Furthermore, if a vendor produces a “viewer” and an “editor” version of an application, both may also display the same text. Of our 94 hand-crafted edge cases, 63 rendered differently when opened in different applications. Full details are given in Table VII in the appendix. For three PDF interpreter engines (six applications), we found a case where certain text was displayed only in this interpreter. For other PDF interpreters, we could not find edge cases that resulted in a unique appearance (i.e., no other interpreter displaying the same text), therefore we did not classify them as vulnerable. It must, however, be noted that test cases can potentially be chained together, which may result in getting more applications to render unique content. This challenge is considered as future work. Another interesting use of this technique would be fingerprinting PDF interpreters applied in web applications to process or preview documents based on the rendered result of PDF file uploads.

## D. Code Execution: Launch Action

In theory, by chaining PDF standard features, an attacker can easily get code execution “by design.” We combined a LaunchAction with an OpenAction event to achieve this goal and launch an executable file. Surprisingly, this worked out of the box on six applications. The .exe file was launched without any confirmation dialog being displayed. The other tested applications asked the user for confirmation (5 viewers) before executing the file, denied launching executable files (Acrobat Reader/Pro), or did not support the LaunchAction at all in the default settings (11 viewers). Three Linux-based viewers (Evince, Okular, and MuPDF) use xdg-open to handle the file to be launched, thereby delegating the security decision to a third-party application. On our Debian GNU/Linux test system, this resulted in code execution with minimal user interaction; by referencing an .exe from a Link annotation, the file was executed with /usr/bin/mono, an emulator for .NET executables, if the user clicked somewhere into the document. This was also a requirement for PDFelement. We classify these vulnerabilities as “limited” because—even though no confirmation dialog is presented to the user—the exploit is not fully automated. PDF Architect 6, which we initially tested, was also vulnerable to code execution. However, version 7 had removed support for the Launch action. Finally, it must be said that, even if a confirmation dialog is presented, attackers may apply social engineering techniques to trick the victim into launching the file.

Because the Launch action can be considered a dangerous feature, we conducted a large-scale evaluation of 294,586 PDF documents downloaded from the Internet, in order to research if there are any legitimate use cases at all. Of those documents, only 532 files (0.18%) contained a Launch action. While none of the files was classified as malicious according to the VirusTotal database, we conclude that the Launch action is rarely used in the wild and its support should be removed by PDF implementations as well as the standard.

## E. Additional Findings

### 1. JavaScript-based Fingerprinting
While the syntax of JavaScript code embedded in PDF documents is based on the ECMA standards, there is no specification of the Document Object Model (DOM) for PDF documents. Furthermore, the API provided by Adobe is rather descriptive than prescriptive, i.e., lacking any form of IDL definitions. Thus, the objects and properties visible to JavaScript differ widely between different viewers. This results in embedded JavaScript engines of PDF viewers being easily fingerprinted via their provided functionality. As a simple proof of concept, we show that one can distinguish every JavaScript-supporting PDF viewer already by recursively enumerating and counting the properties of the execution environment.

We show that the surface of the JavaScript API differs significantly between viewers. Using a crawler written in JavaScript, we automated the enumeration of the API. The results, containing various details on all encountered properties, are extracted as JSON. Table II shows the number of properties grouped by their type. The greatly varying number of available functions highlights the disparity between implementations; this ranges from viewers only being capable of running loops and simple arithmetic without any further API (e.g., Evince), to viewers with only a handful of functions (e.g., PDF XChange Viewer: 114), to an almost complete coverage of the Adobe API (e.g., Acrobat Reader: 6742).

Additionally, many of the identified functions are not documented in the Adobe PDF JavaScript standard and do not yield any result on public search engines. The absence of public knowledge of these properties indicates that they are not intended to be used by authors of PDF documents. It is questionable whether these hidden APIs are well tested. We used the extracted JSON results as input for JavaScript code which simply calls every available function in the API with zero to four empty-string parameters. This was enough to crash four PDF applications, thereby enabling DoS attacks. Identifying the application is a useful preparation stage for attacks. It allows an attacker to send a first PDF document to the victim that replies back (e.g., using JavaScript APIs) which PDF viewer is used by the victim, and then exploit the vulnerabilities of this specific viewer by sending a second specially crafted attack PDF file to the victim.

### 2. Digital Rights Management
PDF documents can be “protected” based on questionable client-side security mechanisms. For example, the specification allows restricting certain document capabilities, such as printing, copying text, or editing content. Technically, a special permissions object is added to the document which, according to the table below, varies significantly across different applications.

| Application | Print | Copy | Edit |
|-------------|-------|------|------|
| Acrobat Reader DC | - | - | - |
| Foxit Reader | - | - | - |
| PDF-XChange Viewer | - | - | - |
| Perfect PDF Reader | - | - | - |
| PDF Studio Viewer | - | - | - |
| Nitro Reader | - | - | - |
| Acrobat Pro DC | - | - | - |
| Foxit PhantomPDF | - | - | - |
| PDF-XChange Editor | - | - | - |
| Perfect PDF Premium | - | - | - |
| PDF Studio Pro | - | - | - |
| Nitro Pro | - | - | - |
| Nuance Power PDF | - | - | - |
| iSkysoft PDF Editor | - | - | - |
| Master PDF Editor | - | - | - |
| Soda PDF Desktop | - | - | - |
| PDF Architect | - | - | - |
| PDFelement | - | - | - |
| Preview | - | - | - |
| Skim | - | - | - |
| Evince | - | - | - |
| Okular | - | - | - |
| MuPDF | - | - | - |
| Chrome | - | - | - |
| Firefox | - | - | - |
| Safari | - | - | - |
| Opera | - | - | - |
| Edge | - | - | - |

These permissions vary widely, and some applications do not support certain restrictions at all. This inconsistency makes it challenging to rely on these mechanisms for robust security.

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the information.