以上声明创建了3个char类型的变量：response、itable和latan。
132
2.字符常量和初始化
如果要把一个字符常量初始化为字母 A，不必背下 ASCII 码，用计算机
语言很容易做到。通过以下初始化把字母A赋给grade即可：
char grade = 'A';
在C语言中，用单引号括起来的单个字符被称为字符常量（character
constant）。编译器一发现'A'，就会将其转换成相应的代码值。单引号必不
可少。下面还有一些其他的例子：
char broiled;   /* 声明一个char类型的变量 */
broiled = 'T';  /* 为其赋值，正确 */
broiled = T;   /* 错误！此时T是一个变量 */
broiled = "T";  /* 错误！此时"T"是一个字符串 */
如上所示，如果省略单引号，编译器认为T是一个变量名；如果把T用
双引号括起来，编译器则认为"T"是一个字符串。字符串的内容将在第4章中
介绍。
实际上，字符是以数值形式储存的，所以也可使用数字代码值来赋值：
char grade = 65; /* 对于ASCII，这样做没问题，但这是一种不好的编程
风格 */
在本例中，虽然65是int类型，但是它在char类型能表示的范围内，所以
将其赋值给grade没问题。由于65是字母A对应的ASCII码，因此本例是把A
赋给grade。注意，能这样做的前提是系统使用ASCII码。其实，用'A'代替65
才是较为妥当的做法，这样在任何系统中都不会出问题。因此，最好使用字
符常量，而不是数字代码值。
奇怪的是，C语言将字符常量视为int类型而非char类型。例如，在int为
133
32位、char为8位的ASCII系统中，有下面的代码：
char grade = 'B';
本来'B'对应的数值66储存在32位的存储单元中，现在却可以储存在8位
的存储单元中（grade）。利用字符常量的这种特性，可以定义一个字符常
量'FATE'，即把4个独立的8位ASCII码储存在一个32位存储单元中。如果把
这样的字符常量赋给char类型变量grade，只有最后8位有效。因此，grade的
值是'E'。
3.非打印字符
单引号只适用于字符、数字和标点符号，浏览ASCII表会发现，有些
ASCII字符打印不出来。例如，一些代表行为的字符（如，退格、换行、终
端响铃或蜂鸣）。C语言提供了3种方法表示这些字符。
第1种方法前面介绍过——使用ASCII码。例如，蜂鸣字符的ASCII值是
7，因此可以这样写：
char beep = 7;
第 2 种方法是，使用特殊的符号序列表示一些特殊的字符。这些符号序
列叫作转义序列（escape sequence）。表3.2列出了转义序列及其含义。
把转义序列赋给字符变量时，必须用单引号把转义序列括起来。例如，
假设有下面一行代码：
char nerf = '\n';
稍后打印变量nerf的效果是，在打印机或屏幕上另起一行。
表3.2 转义序列
134
现在，我们来仔细分析一下转义序列。使用C90新增的警报字符（\a）
是否能产生听到或看到的警报，取决于计算机的硬件，蜂鸣是最常见的警报
（在一些系统中，警报字符不起作用）。C标准规定警报字符不得改变活跃
位置。标准中的活跃位置（active position）指的是显示设备（屏幕、电传打
字机、打印机等）中下一个字符将出现的位置。简而言之，平时常说的屏幕
光标位置就是活跃位置。在程序中把警报字符输出在屏幕上的效果是，发出
一声蜂鸣，但不会移动屏幕光标。
接下来的转义字符\b、\f、\n、\r、\t和\v是常用的输出设备控制字符。了
解它们最好的方式是查看它们对活跃位置的影响。换页符（\f）把活跃位置
移至下一页的开始处；换行符（\n）把活跃位置移至下一行的开始处；回车
符（\r）把活跃位置移动到当前行的开始处；水平制表符（\t）将活跃位置
移至下一个水平制表点（通常是第1个、第9个、第17个、第25个等字符位
置）；垂直制表符（\v）把活跃位置移至下一个垂直制表点。
这些转义序列字符不一定在所有的显示设备上都起作用。例如，换页符
和垂直制表符在PC屏幕上会生成奇怪的符号，光标并不会移动。只有将其
输出到打印机上时才会产生前面描述的效果。
接下来的3个转义序列（\\、\'、\"）用于打印\、'、"字符（由于这些字符
135
用于定义字符常量，是printf()函数的一部分，若直接使用它们会造成混
乱）。如果打印下面一行内容：
Gramps sez, "a \ is a backslash."
应这样编写代码：
printf("Gramps sez, \"a \\ is a backslash.\"\n");
表3.2中的最后两个转义序列（\0oo和\xhh）是ASCII码的特殊表示。如
果要用八进制ASCII码表示一个字符，可以在编码值前面加一个反斜杠（\）
并用单引号括起来。例如，如果编译器不识别警报字符（\a），可以使用
ASCII码来代替：
beep = '\007';
可以省略前面的 0，'\07'甚至'\7'都可以。即使没有前缀 0，编译器在处
理这种写法时，仍会解释为八进制。
从C90开始，不仅可以用十进制、八进制形式表示字符常量，C语言还
提供了第3种选择——用十六进制形式表示字符常量，即反斜杠后面跟一个x
或X，再加上1～3位十六进制数字。例如，Ctrl+P字符的ASCII十六进制码是
10（相当于十进制的16），可表示为'\x10'或'\x010'。图3.5列出了一些整数类
型的不同进制形式。
136
图3.5 int系列类型的常量写法示例
使用ASCII码时，注意数字和数字字符的区别。例如，字符4对应的
ASCII码是52。'4'表示字符4，而不是数值4。
关于转义序列，读者可能有下面3个问题。
上面最后一个例子（printf("Gramps sez, \"a \\ is a backslash\"\"n"），为何
没有用单引号把转义序列括起来？无论是普通字符还是转义序列，只要是双
引号括起来的字符集合，就无需用单引号括起来。双引号中的字符集合叫作
字符串（详见第4章）。注意，该例中的其他字符（G、r、a、m、p、s等）
都没有用单引号括起来。与此类似，printf("Hello!\007\n");将打印Hello!并发
出一声蜂鸣，而 printf("Hello!7\n");则打印 Hello!7。不是转义序列中的数字
将作为普通字符被打印出来。
何时使用ASCII码？何时使用转义序列？如果要在转义序列（假设使
用'\f'）和ASCII码（'\014'）之间选择，请选择前者（即'\f'）。这样的写法不
仅更好记，而且可移植性更高。'\f'在不使用ASCII码的系统中，仍然有效。
137
如果要使用ASCII码，为何要写成'\032'而不是032？首先，'\032'能更清
晰地表达程序员使用字符编码的意图。其次，类似\032这样的转义序列可以
嵌入C的字符串中，如printf("Hello!\007\n");中就嵌入了\007。
4.打印字符
printf()函数用%c指明待打印的字符。前面介绍过，一个字符变量实际
上被储存为1字节的整数值。因此，如果用%d转换说明打印 char类型变量的
值，打印的是一个整数。而%c转换说明告诉printf()打印该整数值对应的字
符。程序清单3.5演示了打印char类型变量的两种方式。
程序清单3.5 charcode.c程序
/* charcode.c-显示字符的代码编号 */
#include 
int main(void)
{
char ch;
printf("Please enter a character.\n");
scanf("%c", &ch); /* 用户输入字符 */
printf("The code for %c is %d.\n", ch, ch);
return 0;
}
运行该程序后，输出示例如下：
Please enter a character.
138
C
The code for C is 67.
运行该程序时，在输入字母后不要忘记按下Enter或Return键。随后，
scanf()函数会读取用户输入的字符，&符号表示把输入的字符赋给变量ch。
接着，printf()函数打印ch的值两次，第1次打印一个字符（对应代码中
的%c），第2次打印一个十进制整数值（对应代码中的%d）。注意，printf()
函数中的转换说明决定了数据的显示方式，而不是数据的储存方式（见图
3.6）。
图3.6 数据显示和数据存储
5.有符号还是无符号
有些C编译器把char实现为有符号类型，这意味着char可表示的范围
是-128～127。而有些C编译器把char实现为无符号类型，那么char可表示的
范围是0～255。请查阅相应的编译器手册，确定正在使用的编译器如何实现
char类型。或者，可以查阅limits.h头文件。下一章将详细介绍头文件的内
容。
根据C90标准，C语言允许在关键字char前面使用signed或unsigned。这
139
样，无论编译器默认char是什么类型，signed 
char表示有符号类型，而
unsigned 
char表示无符号类型。这在用char类型处理小整数时很有用。如果
只用char处理字符，那么char前面无需使用任何修饰符。
3.4.4 _Bool类型
C99标准添加了_Bool类型，用于表示布尔值，即逻辑值true和false。因
为C语言用值1表示true，值0表示false，所以_Bool类型实际上也是一种整数
类型。但原则上它仅占用1位存储空间，因为对0和1而言，1位的存储空间足
够了。
程序通过布尔值可选择执行哪部分代码。我们将在第6章和第7章中详述
相关内容。
3.4.5 可移植类型：stdint.h和inttypes.h
C 语言提供了许多有用的整数类型。但是，某些类型名在不同系统中的
功能不一样。C99 
新增了两个头文件stdint.h和inttypes.h，以确保C语言的类
型在各系统中的功能相同。
C语言为现有类型创建了更多类型名。这些新的类型名定义在stdint.h头
文件中。例如，int32_t表示32位的有符号整数类型。在使用32位int的系统
中，头文件会把int32_t作为int的别名。不同的系统也可以定义相同的类型
名。例如，int为16位、long为32位的系统会把int32_t作为long的别名。然
后，使用int32_t类型编写程序，并包含stdint.h头文件时，编译器会把int或
long替换成与当前系统匹配的类型。
上面讨论的类型别名是精确宽度整数类型（exact-width integer type）的
示例。int32_t表示整数类型的宽度正好是32位。但是，计算机的底层系统可
能不支持。因此，精确宽度整数类型是可选项。
如果系统不支持精确宽度整数类型怎么办？C99和C11提供了第2类别名
集合。一些类型名保证所表示的类型一定是至少有指定宽度的最小整数类
140
型。这组类型集合被称为最小宽度类型（minimum 
width 
type）。例如，
int_least8_t是可容纳8位有符号整数值的类型中宽度最小的类型的一个别
名。如果某系统的最小整数类型是16位，可能不会定义int8_t类型。尽管如
此，该系统仍可使用int_least8_t类型，但可能把该类型实现为16位的整数类
型。
当然，一些程序员更关心速度而非空间。为此，C99和C11定义了一组
可使计算达到最快的类型集合。这组类型集合被称为最快最小宽度类型
（fastst minimum width type）。例如，int_fast8_t被定义为系统中对8位有符号
值而言运算最快的整数类型的别名。
另外，有些程序员需要系统的最大整数类型。为此，C99定义了最大的
有符号整数类型intmax_t，可储存任何有效的有符号整数值。类似地，
unitmax_t表示最大的无符号整数类型。顺带一提，这些类型有可能比long
long和unsigned long类型更大，因为C编译器除了实现标准规定的类型以外，
还可利用C语言实现其他类型。例如，一些编译器在标准引入 long long 类型
之前，已提前实现了该类型。
C99 和 C11 不仅提供可移植的类型名，还提供相应的输入和输出。例
如，printf()打印特定类型时要求与相应的转换说明匹配。如果要打印int32_t
类型的值，有些定义使用%d，而有些定义使用%ld，怎么办？C 标准针对这
一情况，提供了一些字符串宏（第 4 章中详细介绍）来显示可移植类型。例
如， inttypes.h头文件中定义了PRId32字符串宏，代表打印32位有符号值的合
适转换说明（如d或l）。程序清单3.6演示了一种可移植类型和相应转换说
明的用法。
程序清单3.6 altnames.c程序
/* altnames.c -- 可移植整数类型名 */
#include 
#include  // 支持可移植类型
141
int main(void)
{
int32_t me32;   // me32是一个32位有符号整型变量
me32 = 45933945;
printf("First, assume int32_t is int: ");
printf("me32 = %d\n", me32);
printf("Next, let's not make any assumptions.\n");
printf("Instead, use a \"macro\" from inttypes.h: ");
printf("me32 = %" PRId32 "\n", me32);
return 0;
}
该程序最后一个printf()中，参数PRId32被定义在inttypes.h中的"d"替换，
因而这条语句等价于：
printf("me16 = %" "d" "\n", me16);
在C语言中，可以把多个连续的字符串组合成一个字符串，所以这条语
句又等价于：
printf("me16 = %d\n", me16);
下面是该程序的输出，注意，程序中使用了\"转义序列来显示双引号：
First, assume int32_t is int: me32 = 45933945
Next, let's not make any assumptions.
142
Instead, use a "macro" from inttypes.h: me32 = 45933945
篇幅有限，无法介绍扩展的所有整数类型。本节主要是为了让读者知
道，在需要时可进行这种级别的类型控制。附录B中的参考资料VI“扩展的
整数类型”介绍了完整的inttypes.h和stdint.h头文件。
注意 对C99/C11的支持
C语言发展至今，虽然ISO已发布了C11标准，但是编译器供应商对C99
的实现程度却各不相同。在本书第6版的编写过程中，一些编译器仍未实现
inttypes.h头文件及其相关功能。
3.4.6 float、double和long double
各种整数类型对大多数软件开发项目而言够用了。然而，面向金融和数
学的程序经常使用浮点数。C语言中的浮点类型有float、double和long double
类型。它们与FORTRAN和Pascal中的real类型一致。前面提到过，浮点类型
能表示包括小数在内更大范围的数。浮点数的表示类似于科学记数法（即用
小数乘以10的幂来表示数字）。该记数系统常用于表示非常大或非常小的
数。表3.3列出了一些示例。
表3.3 记数法示例
第1列是一般记数法；第2列是科学记数法；第3列是指数记数法（或称
为e记数法），这是科学记数法在计算机中的写法，e后面的数字代表10的指
数。图3.7演示了更多的浮点数写法。
C标准规定，float类型必须至少能表示6位有效数字，且取值范围至少是
10-37～10+37。前一项规定指float类型必须至少精确表示小数点后的6位有效
143
数字，如33.333333。后一项规定用于方便地表示诸如太阳质量（2.0e30千
克）、一个质子的电荷量（1.6e-19库仑）或国家债务之类的数字。通常，
系统储存一个浮点数要占用32位。其中8位用于表示指数的值和符号，剩下
24位用于表示非指数部分（也叫作尾数或有效数）及其符号。
图3.7 更多浮点数写法示例
C语言提供的另一种浮点类型是double（意为双精度）。double类型和
float类型的最小取值范围相同，但至少必须能表示10位有效数字。一般情况
下，double占用64位而不是32位。一些系统将多出的 32 位全部用来表示非
指数部分，这不仅增加了有效数字的位数（即提高了精度），而且还减少了
舍入误差。另一些系统把其中的一些位分配给指数部分，以容纳更大的指
数，从而增加了可表示数的范围。无论哪种方法，double类型的值至少有13
位有效数字，超过了标准的最低位数规定。
C语言的第3种浮点类型是long double，以满足比double类型更高的精度
要求。不过，C只保证long double类型至少与double类型的精度相同。
144
1.声明浮点型变量