In this program, we select authors from the authors table and their books from the books table. We print the names of the columns returned in the result set. We format the output.  
```  
String query = "SELECT name, title From authors, " +  
    "books WHERE authors.id=books.author_id";  
```  
This is the SQL statement which joins authors with their books.  
```  
ResultSetMetaData meta = rs.getMetaData();  
```  
To get the column names we need to get the ResultSetMetaData. It is an object that can be used to get information about the types and properties of the columns in a ResultSet object.  
```  
String colname1 = meta.getColumnName(1);  
String colname2 = meta.getColumnName(2);  
```  
From the obtained metadata, we get the column names.  
```  
Formatter fmt1 = new Formatter();  
fmt1.format("%-21s%s", colname1, colname2);  
System.out.println(fmt1)  
```  
We print the column names to the console. We use the Formatter object to format the data.  
```  
while (rs.next()) {  
    Formatter fmt2 = new Formatter();  
    fmt2.format("%-21s", rs.getString(1));  
    System.out.print(fmt2);  
    System.out.println(rs.getString(2));  
}  
```  
We print the data to the console. We again use the Formatter object to format the data. The first column is 21 characters wide and is aligned to the left.  
```  
$ javac zetcode/ColumnHeaders.java  
$ java -cp .:lib/postgresql.jdbc4.jar zetcode/ColumnHeaders  
name                 title  
Jack London          Call of the Wild  
Jack London          Martin Eden  
Honore de Balzac     Old Goriot  
Honore de Balzac     Cousin Bette  
Lion Feuchtwanger    Jew Suess  
Emile Zola           Nana  
Emile Zola           The Belly of Paris  
Truman Capote        In Cold blood  
Truman Capote        Breakfast at Tiffany  
```  
This is the output of the program.  
In the following example we will list all tables in the testdb database.  
```  
package zetcode;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.PreparedStatement;  
import java.sql.ResultSet;  
import java.sql.SQLException;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
public class ListTables {  
    public static void main(String[] args) {  
        Connection con = null;  
        PreparedStatement pst = null;  
        ResultSet rs = null;  
        String url = "jdbc:postgresql://localhost/testdb";  
        String user = "user12";  
        String password = "34klq*";  
        try {  
            con = DriverManager.getConnection(url, user, password);  
            String query = "SELECT table_name FROM information_schema.tables "  
                    + "WHERE table_schema = 'public'";  
            pst = con.prepareStatement(query);  
            rs = pst.executeQuery();  
            while (rs.next()) {  
                System.out.println(rs.getString(1));  
            }  
        } catch (SQLException ex) {  
            Logger lgr = Logger.getLogger(ListTables.class.getName());  
            lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                if (rs != null) {  
                    rs.close();  
                }  
                if (pst != null) {  
                    pst.close();  
                }  
                if (con != null) {  
                    con.close();  
                }  
            } catch (SQLException ex) {  
                Logger lgr = Logger.getLogger(ListTables.class.getName());  
                lgr.log(Level.WARNING, ex.getMessage(), ex);  
            }  
        }  
    }  
}  
```  
The code example prints all available tables in the current database to the terminal.  
```  
String query = "SELECT table_name FROM information_schema.tables "  
        + "WHERE table_schema = 'public'";  
```  
The table names are stored inside the system information_schema table.  
```  
$ javac zetcode/ListTables.java  
$ java -cp .:lib/postgresql.jdbc4.jar zetcode.ListTables  
authors  
books  
testing  
images  
```  
Listing available tables in the testdb database.  
### Writing images  
Some people prefer to put their images into the database, some prefer to keep them on the file system for their applications. Technical difficulties arise when we work with lots of images. Images are binary data. PostgreSQL database has a special data type to store binary data called bytea. This is a non-standard data type. The standard data type in databases is BLOB.  
For this example, we use the images table.  
```  
package zetcode;  
import java.io.File;  
import java.io.FileInputStream;  
import java.io.FileNotFoundException;  
import java.io.IOException;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.PreparedStatement;  
import java.sql.SQLException;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
public class WriteImage {  
    public static void main(String[] args) {  
        Connection con = null;  
        PreparedStatement pst = null;  
        FileInputStream fin = null;  
        String url = "jdbc:postgresql://localhost/testdb";  
        String user = "user12";  
        String password = "34klq*";                 
        try {  
            File img = new File("woman.jpg");  
            fin = new FileInputStream(img);  
            con = DriverManager.getConnection(url, user, password);  
            pst = con.prepareStatement("INSERT INTO images(data) VALUES(?)");  
            pst.setBinaryStream(1, fin, (int) img.length());  
            pst.executeUpdate();  
        } catch (FileNotFoundException | SQLException ex) {  
            Logger lgr = Logger.getLogger(WriteImage.class.getName());  
            lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                if (pst != null) {  
                    pst.close();  
                }  
                if (con != null) {  
                    con.close();  
                }  
                if (fin != null) {  
                    fin.close();  
                }  
            } catch (IOException | SQLException ex) {  
                Logger lgr = Logger.getLogger(WriteImage.class.getName());  
                lgr.log(Level.WARNING, ex.getMessage(), ex);  
            }  
        }  
    }  
}  
```  
In the preceding example, we read a JPG image from the current working directory and insert in into the images table.  
```  
pst = con.prepareStatement("INSERT INTO images(data) VALUES(?)");  
```  
This is the SQL to insert an image.  
```  
File img = new File("woman.jpg");  
fin = new FileInputStream(img);  
```  
We create a File object for the image file. To read bytes from this file, we create a FileInputStream object.  
```  
pst.setBinaryStream(1, fin, (int) img.length());  
```  
The binary stream is set to the prepared statement. The parameters of the setBinaryStream() method are the parameter index to bind, the input stream and the number of bytes in the stream.  
```  
pst.executeUpdate();  
```  
We execute the statement.  
### Reading images  
In the previous example, we have inserted an image into the database table. Now we are going to read the image back from the table.  
Warning: if we are using PostgreSQL 9 and later, we must also use the latest JDBC driver. PostgreSQL has changed the way bytea data is stored. Therefore we run into troubles when using older driver with the PostgreSQL 9.x. Notice that NetBeans or other applications might use older drivers.  
```  
package zetcode;  
import java.io.FileOutputStream;  
import java.io.IOException;  
import java.io.InputStream;  
import java.io.OutputStream;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.PreparedStatement;  
import java.sql.ResultSet;  
import java.sql.SQLException;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
public class ReadImage {  
    public static void main(String[] args) {  
        Connection con = null;  
        PreparedStatement pst = null;  
        FileOutputStream fos = null;  
        String url = "jdbc:postgresql://localhost/testdb";  
        String user = "user12";  
        String password = "34klq*";  
        try {  
            con = DriverManager.getConnection(url, user, password);  
            String query = "SELECT data, LENGTH(data) FROM images WHERE id = 1";  
            pst = con.prepareStatement(query);  
            ResultSet result = pst.executeQuery();  
            result.next();  
            fos = new FileOutputStream("woman2.jpg");  
            int len = result.getInt(2);  
            byte[] buf = result.getBytes("data");  
            fos.write(buf, 0, len);  
        } catch (IOException | SQLException ex) {  
            Logger lgr = Logger.getLogger(ReadImage.class.getName());  
            lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                if (pst != null) {  
                    pst.close();  
                }  
                if (con != null) {  
                    con.close();  
                }  
                if (fos != null) {  
                    fos.close();  
                }  
            } catch (IOException | SQLException ex) {  
                Logger lgr = Logger.getLogger(ReadImage.class.getName());  
                lgr.log(Level.WARNING, ex.getMessage(), ex);  
            }  
        }  
    }  
}  
```  
We read one image from the images table.  
```  
String query = "SELECT data, LENGTH(data) FROM images WHERE id = 1";  
```  
We select the data and the size of the image from the database table.  
```  
fos = new FileOutputStream("woman2.jpg");  
```  
The FileOutputStream object is created to write to a file. It is meant for writing streams of raw bytes such as image data.  
```  
int len = result.getInt(2);  
```  
We get the length of the image data. In other words, we get the number of bytes.  
```  
byte[] buf = result.getBytes("data");  
```  
The getBytes() method retrieves all bytes from the result set, as an array of bytes.  
```  
fos.write(buf, 0, len);  
```  
The bytes are written to the output stream. The image is created on the filesystem.  
### Transaction support  
A transaction is an atomic unit of database operations against the data in one or more databases. The effects of all the SQL statements in a transaction can be either all committed to the database or all rolled back.  
When a connection is created, it is in autocommit mode. This means that each individual SQL statement is treated as a transaction and is automatically committed right after it is executed. This is true for all JDBC drivers, including the PostgreSQL's one. To start a new transaction, we turn the autocommit off.  
In direct SQL, a transaction is started with BEGIN TRANSACTION statement and ended with END TRANSACTION, COMMIT statement. In PostgreSQL these statements are BEGIN and COMMIT. However, when working with drivers these statements are omitted. They are handled by the driver. Exact details are specific to the driver. For example the psycopg2 Python driver starts a transaction after the first SQL statement. The autocommit mode must be set by setting the autocommit property to True. In constrast, JDBC driver is by default in the autocommit mode. And to start a new transaction, the autocommit must be turned off.  
```  
package zetcode;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.SQLException;  
import java.sql.Statement;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
public class Transaction {  
    public static void main(String[] args) {  
        Connection con = null;  
        Statement st = null;  
        String url = "jdbc:postgresql://localhost/testdb";  
        String user = "user12";  
        String password = "34klq*";  
        try {  
            con = DriverManager.getConnection(url, user, password);  
            st = con.createStatement();  
            con.setAutoCommit(false);  
            st.executeUpdate("UPDATE authors SET name = 'Leo Tolstoy' "  
                    + "WHERE Id = 1");  
            st.executeUpdate("UPDATE books SET title = 'War and Peace' "  
                    + "WHERE Id = 1");  
            st.executeUpdate("UPDATE books SET titl = 'Anna Karenina' "  
                    + "WHERE Id = 2");  
            con.commit();  
        } catch (SQLException ex) {  
            if (con != null) {  
                try {  
                    con.rollback();  
                } catch (SQLException ex1) {  
                    Logger lgr = Logger.getLogger(Transaction.class.getName());  
                    lgr.log(Level.WARNING, ex1.getMessage(), ex1);  
                }  
            }  
            Logger lgr = Logger.getLogger(Transaction.class.getName());  
            lgr.log(Level.SEVERE, ex.getMessage(), ex);  
        } finally {  
            try {  
                if (st != null) {  
                    st.close();  
                }  
                if (con != null) {  
                    con.close();  
                }  
            } catch (SQLException ex) {  
                Logger lgr = Logger.getLogger(Transaction.class.getName());  
                lgr.log(Level.WARNING, ex.getMessage(), ex);  
            }  
        }  
    }  
}  
```  
In this program, we want to change the name of the author in the first row of the authors table. We must also change the books associated with this author. A good example where a transaction is necessary. If we change the author and do not change the author's books, the data is corrupted.  
```  
con.setAutoCommit(false);  
```  
To work with transactions, we must set the autocommit to false. By default, a database connection is in autocommit mode. In this mode each statement is committed to the database, as soon as it is executed. A statement cannot be undone. When the autocommit is turned off, we commit the changes by calling the commit() or roll it back by calling the rollback() method.  
```  
st.executeUpdate("UPDATE books SET titl = 'Anna Karenina' "  
        + "WHERE Id = 2");  
```  
The third SQL statement has an error. There is no titl column in the table.  
```  
con.commit();  
```  
If there is no exception, the transaction is committed. If the autocommit is turned off, we must explicitly call the commit() method.  
```  
if (con != null) {  
    try {  
        con.rollback();  
    } catch (SQLException ex1) {  
        Logger lgr = Logger.getLogger(Transaction.class.getName());  
        lgr.log(Level.WARNING, ex1.getMessage(), ex1);  
    }  
}  
```  
In case of an exception, the transaction is rolled back. No changes are committed to the database.  
```  
$ javac zetcode/Transaction.java  
$ java -cp .:lib/postgresql.jdbc4.jar zetcode.Transaction  
Feb 03, 2012 1:48:51 PM zetcode.Transaction main  
SEVERE: ERROR: column "titl" of relation "books" does not exist  
  Position: 18  
org.postgresql.util.PSQLException: ERROR: column "titl" of   
  relation "books" does not exist  
...  
testdb=# SELECT name, title FROM authors, books WHERE authors.id=books.author_id;  
       name        |        title           
-------------------+----------------------  
 Jack London       | Call of the Wild  
 Jack London       | Martin Eden  
 Honore de Balzac  | Old Goriot  
 Honore de Balzac  | Cousin Bette  
 Lion Feuchtwanger | Jew Suess  
 Emile Zola        | Nana  
 Emile Zola        | The Belly of Paris  
 Truman Capote     | In Cold blood  
 Truman Capote     | Breakfast at Tiffany  
(9 rows)  
```  
An exception was thrown. The transaction was rolled back and no changes took place.  
However, without a transaction, the data is not safe.  
```  
package zetcode;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.SQLException;  
import java.sql.Statement;  
import java.util.logging.Level;  
import java.util.logging.Logger;  
public class NonTransaction {  
    public static void main(String[] args) {  