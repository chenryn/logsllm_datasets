]
036 30 1E RS (record separator) 136 94 5E
^
612
4.2 Linux 命令行技巧
037 31 1F US (unit separator) 137 95 5F
_
040 32 20 SPACE 140 96 60
`
041 33 21 ! 141 97 61
a
042 34 22 " 142 98 62
b
043 35 23 # 143 99 63
c
044 36 24 $ 144 100 64
d
045 37 25 % 145 101 65
e
046 38 26 & 146 102 66
f
047 39 27 ' 147 103 67
g
050 40 28 ( 150 104 68
h
051 41 29 ) 151 105 69
i
052 42 2A * 152 106 6A
j
053 43 2B + 153 107 6B
k
054 44 2C , 154 108 6C
l
055 45 2D - 155 109 6D
m
056 46 2E . 156 110 6E
n
057 47 2F / 157 111 6F
o
060 48 30 0 160 112 70
p
061 49 31 1 161 113 71
q
062 50 32 2 162 114 72
613
4.2 Linux 命令行技巧
r
063 51 33 3 163 115 73
s
064 52 34 4 164 116 74
t
065 53 35 5 165 117 75
u
066 54 36 6 166 118 76
v
067 55 37 7 167 119 77
w
070 56 38 8 170 120 78
x
071 57 39 9 171 121 79
y
072 58 3A : 172 122 7A
z
073 59 3B ; 173 123 7B
{
074 60 3C  176 126 7E
~
077 63 3F ? 177 127 7F
DEL
Tables
For convenience, below are more compact tables in hex and decima
l.
2 3 4 5 6 7 30 40 50 60 70 80 90 100 110 120
------------- ---------------------------------
0: 0 @ P ` p 0: ( 2  H R \ f p z
3: # 3 C S c s 3: ! + 5 ? I S ] g q {
4: $ 4 D T d t 4: " , 6 @ J T ^ h r |
5: % 5 E U e u 5: # - 7 A K U _ i s }
614
4.2 Linux 命令行技巧
6: & 6 F V f v 6: $ . 8 B L V ` j t ~
7: ' 7 G W g w 7: % / 9 C M W a k u DEL
8: ( 8 H X h x 8: & 0 : D N X b l v
9: ) 9 I Y i y 9: ' 1 ; E O Y c m w
A: * : J Z j z
B: + ; K [ k {
C: ,  N ^ n ~
F: / ? O _ o DEL
Hex 转 Char：
$ echo -e '\x41\x42\x43\x44'
$ printf '\x41\x42\x43\x44'
$ python -c 'print(u"\x41\x42\x43\x44")'
$ perl -e 'print "\x41\x42\x43\x44";'
Char 转 Hex：
$ python -c 'print(b"ABCD".hex())'
nohup 和 &
用 nohup 运行命令可以使命令永久的执行下去，和 Shell 没有关系，而 & 表示
设置此进程为后台进程。默认情况下，进程是前台进程，这时就把 Shell 给占据
了，我们无法进行其他操作，如果我们希望其在后台运行，可以使用 & 达到这个
目的。
该命令的一般形式为：
$ nohup  &
前后台进程切换
可以通过 bg （background）和 fg （foreground）命令进行前后台进程切换。
615
4.2 Linux 命令行技巧
显示Linux中的任务列表及任务状态：
$ jobs -l
[1]+ 9433 Stopped (tty input) ./a.out
将进程放到后台运行：
$ bg 1
将后台进程放到前台运行：
$ fg 1
cat -
通常使用 cat 时后面都会跟一个文件名，但如果没有，或者只有一个 - ，则表示
从标准输入读取数据，它会保持标准输入开启，如：
$ cat -
hello world
hello world
^C
更进一步，如果你采用 cat file - 的用法，它会先输出 file 的内容，然后是标
准输入，它将标准输入的数据复制到标准输出，并保持标准输入开启：
$ echo hello > text
$ cat text -
hello
world
world
^C
有时我们在向程序发送 paylaod 的时候，它执行完就直接退出了，并没有开启
shell，我们就可以利用上面的技巧：
616
4.2 Linux 命令行技巧
$ cat payload | ./a.out
> Segmentation fault (core dumped)
$ cat payload - | ./a.out
whoami
firmy
^C
Segmentation fault (core dumped)
这样就得到了 shell。
617
4.3 GCC 编译参数解析
4.3 GCC 编译参数解析
GCC
常用选择
Address sanitizer
mcheck
参考资料
GCC
$ wget -c http://www.mirrorservice.org/sites/sourceware.org/pub/
gcc/releases/gcc-4.4.0/gcc-4.4.0.tar.bz2
$ tar -xjvf gcc-4.4.0.tar.bz2
$ ./configure
$ make && sudo make install
常用选项
使用 gcc -v 可以查看默认开启的选项：
618
4.3 GCC 编译参数解析
$ gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/5/lto-wrapper
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 5
.4.0-6ubuntu1~16.04.9' --with-bugurl=file:///usr/share/doc/gcc-5
/README.Bugs --enable-languages=c,ada,c++,java,go,d,fortran,objc
,obj-c++ --prefix=/usr --program-suffix=-5 --enable-shared --ena
ble-linker-build-id --libexecdir=/usr/lib --without-included-get
text --enable-threads=posix --libdir=/usr/lib --enable-nls --wit
h-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enab
le-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-
gnu-unique-object --disable-vtable-verify --enable-libmpx --enab
le-plugin --with-system-zlib --disable-browser-plugin --enable-j
ava-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/jav
a-1.5.0-gcj-5-amd64/jre --enable-java-home --with-jvm-root-dir=/
usr/lib/jvm/java-1.5.0-gcj-5-amd64 --with-jvm-jar-dir=/usr/lib/j
vm-exports/java-1.5.0-gcj-5-amd64 --with-arch-directory=amd64 --
with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --
enable-multiarch --disable-werror --with-arch-32=i686 --with-abi
=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-
tune=generic --enable-checking=release --build=x86_64-linux-gnu
--host=x86_64-linux-gnu --target=x86_64-linux-gnu
Thread model: posix
gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.9)
控制标准版本的编译选项
-ansi ：告诉编译器遵守 C 语言的 ISO C90 标准。
-std= ：通过使用一个参数来设置需要的标准。
c89 ：支持 C89 标准。
iso9899:1999 ：支持 ISO C90 标准。
gnu89 ：支持 C89 标准。
控制标准版本的常量
619
4.3 GCC 编译参数解析
这些常量（#define）可以通过编译器的命令行选项来设置，或者通过源代码总的
#define 语句来定义。
__STRICT_ANSI__ ：强制使用 C 语言的 ISO 标准。这个常量通过命令行选
项 -ansi 来定义。
_POSIX_C_SOURCE=2 ：启用由 IEEE Std1003.1 和 1003.2 标准定义的特
性。
_BSD_SOURCE ：启用 BSD 类型的特性。
_GNU_SOURCE ：启用大量特性，其中包括 GNU 扩展。
编译器的警告选项
-pedantic ：除了启用用于检查代码是否遵守 C 语言标准的选项外，还关闭
了一些不被标准允许的传统 C 语言结构，并且禁用所有的 GNU 扩展。
-Wformat ：检查 printf 系列函数所使用的参数类型是否正确。
Wparentheses ：检查是否总是提供了需要的圆括号。当想要检查一个复杂
结构的初始化是否按照预期进行时，这个选项就很有用。
Wswitch-default ：检查是否所有的 switch 语句都包含一个 default case。
Wunused ：检查诸如声明静态函数但没有定义、未使用的参数和丢弃返回结
果等情况。
Wall ：启用绝大多数 gcc 的警告选项，包括所有以 -W 为前缀的选项。
Address sanitizer
Address sanitizer 是一种用于检测内存错误的技术，GCC 从 4.8 版本开始支持了这
一技术。ASan 在编译时插入额外指令到内存访问操作中，同时通过 Shadow
memory 来记录和检测内存的有效性。ASan 其实只是 Sanitizer 一系列工具中的一
员，其他工具比如 memory leak 检测在 LeakSanitizer 中，uninitialized memory
read 检测在 MemorySanitizer 中等等。
举个例子，很明显下面这个程序存在栈溢出：
620
4.3 GCC 编译参数解析
#include
void main() {
int a[10] = {0};
int b = a[11];
}
编译时加上参数 -fsanitize=address ，如果使用 Makefile，则将参数加入到
CFLAGS 中：
$ gcc -fsanitize=address santest.c
然后运行：
$ ./a.out
================================================================
=
==9399==ERROR: AddressSanitizer: stack-buffer-overflow on addres
s 0x7ffc03f4d64c at pc 0x565515082ad6 bp 0x7ffc03f4d5e0 sp 0x7ff
c03f4d5d0
READ of size 4 at 0x7ffc03f4d64c thread T0
#0 0x565515082ad5 in main (/home/firmy/a.out+0xad5)
#1 0x7fb4c04c0f69 in __libc_start_main (/usr/lib/libc.so.6+0
x20f69)
#2 0x565515082899 in _start (/home/firmy/a.out+0x899)
Address 0x7ffc03f4d64c is located in stack of thread T0 at offse
t 76 in frame
#0 0x565515082989 in main (/home/firmy/a.out+0x989)
This frame has 1 object(s):
[32, 72) 'a' 0x1000007e1ac0: f1 f1 f1 f1 00 00 00 00 00[f2]f2 f2 00 00 00 0
0
0x1000007e1ad0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0
0
0x1000007e1ae0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0
0
0x1000007e1af0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0
0
0x1000007e1b00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0
0
0x1000007e1b10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0
0
Shadow byte legend (one shadow byte represents 8 application byt
es):
Addressable: 00
Partially addressable: 01 02 03 04 05 06 07
Heap left redzone: fa
Freed heap region: fd
Stack left redzone: f1