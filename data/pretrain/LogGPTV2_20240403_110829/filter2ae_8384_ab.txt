### 优化后的文本

#### 数据结构定义
```c
unsigned char ip_addr;
void *child;   // 该指针可以指向 last_node 或 tree_node 类型
struct tree_node *next;
```
其中，`last_node` 结构体用于具体描述 IP 的访问分布，而 `tree_node` 结构体则主要用于索引，以快速检索所需的 `last_node` 元素。在我们的实现中，`tree_node` 和 `last_node` 都采用了链表的方式进行组织。然而，对于拥有大量独立 IP 的大型企业来说，使用数组来存储 `tree_node` 可以显著提高查找速度，并且代码会更加简洁。（链表查找需要遍历整个链表，而数组查找仅需计算内存地址）

经过一系列调整后，我们终于实现了完整的思路。但这仅仅是开始。

#### 四、拒绝逐比特遍历：亿级 IP 访问密度高速计算优化
数据已经收集完毕，但很快我们就遇到了新的问题。由于方案采用 T+1 方式输出慢速爬虫可疑 IP 列表，系统负载在每个小时整点时（启动另一个线程进行计算）会大幅增加，甚至影响整体性能。这显然不够优雅。

检查了原有的逻辑：
- 遍历整棵树
- 遍历每个 `last_node` 中的 `timeline` 数组
- 根据遍历结果计算可疑 IP

这个过程中几乎遍历了整个内存空间，大小约为 109GB。但实际上，我们只关心某个 IP 地址在这个小时内是否发生过访问，这是一个布尔值。为了一个布尔值去遍历整个字节显然是不值得的，也不够优雅。

为了解决这个问题，我们引入了位图。位图是一种特殊的数据结构，它用特定位置的一个比特表示一个布尔值。例如，一个 1 字节的位图可以表示连续 8 个布尔值。通过将 `timeline` 用位图表示，我们可以将内存范围缩小到原来的约 6%。

接下来的问题是如何快速计算给定字节中 1 的个数？有两种方法：
1. 遍历每个位，计算 1 的个数。
2. 创建一个固定长度的位图表，查表得出 1 的个数。

第二种方法是用空间换时间，位图表越长，检索次数越少，但占用的空间也越多。例如，一个 32 位的位图表将占用 (2^32) * (16+8) = 12GB 的空间，这显然不可行。

MIT 曾经提出了一种算法，通过移位和简单的逻辑运算来计算整数中 1 的个数。具体算法如下：
```c
uint8_t count1(uint32_t x) { 
    x = (x & 0x55555555UL) + ((x >> 1) & 0x55555555UL);
    x = (x & 0x33333333UL) + ((x >> 2) & 0x33333333UL);
    x = (x & 0x0f0f0f0fUL) + ((x >> 4) & 0x0f0f0f0fUL);
    x = (x & 0x00ff00ffUL) + ((x >> 8) & 0x00ff00ffUL);
    x = (x & 0x0000ffffUL) + ((x >> 16) & 0x0000ffffUL);
    return x;
}
```

对比两种方案：
- 查表操作只需一次寻址，但内存访问速度较慢，大约需要 250 个时钟周期。
- 移位算法如果全部在寄存器中操作，则只需要 20 个时钟周期。

CPU 的 L1 缓存虽然比内存快很多，但 L1 缓存容量有限，无法容纳大表。因此，我们选择使用移位算法，并使用 `-O3` 优化编译，使其全部变成寄存器和立即数的操作。进一步优化，我们将这段内联汇编写成宏，避免函数调用过程中的堆栈整理和跳转开销。

#### 五、最终结果：一台 128GB 内存的机器撑起了一片天空
经过调整后的服务很快上线，我们用了 100 多 GB 的内存支撑起了这项服务。经过一段时间的验证，我们通过这个小功能发现了潜藏已久的慢速爬虫。

反爬虫的挑战是多样的，仅凭 IP 一个维度的数据很难全面观察事件核心。除了对访问分布进行监控外，我们还采取了多种措施共同对抗爬虫的“入侵”。只有多维度地描述事件，才能更接近本质。与君共勉。

最后，非常抱歉，由于保密协议的限制，我不能提供该工具的源代码，请大家谅解。