(κ) we denote the maximum advantage over all PPT
adversaries in breaking the IND-CPA property of (E,D) better than by a random guess.
Hash(κ) we denote
the maximum success probability over all PPT adversaries in ﬁnding a collision, i.e., a pair (m, m(cid:48)) ∈
{0, 1}∗ × {0, 1}∗ such that Hash(m) = Hash(m(cid:48)).
– A cryptographic collision-resistant hash function Hash: {0, 1}∗ → {0, 1}p4(κ). By Succcoll
(E,D)
– A digital signature scheme which provides existential unforgeability under chosen message attacks (EUF-
CMA). The signing operation is denoted Sig and the corresponding veriﬁcation operation V er. We denote
the maximum success probability over all PPT adversaries given access to the signing oracle in ﬁnding a
forgery by Succeuf−cma
message attacks (WUF-CMA) [5]. By Succwuf−cma
all PPT adversaries given access to the tagging/veriﬁcation oracle in ﬁnding a forgery.
– A message authentication code function HMAC which is believed to satisfy weak unforgeability under chosen
(κ) we denote the maximum success probability over
(Sig,V er)(κ).
HMAC
3.2 Protocol Description
Before BBMA can be executed, a registration phase is necessary where every party obtains its own long-lived key.
Then, the long-lived key LLU consists of the low-entropy password pw and the HPA w which are shared with
S. The long-lived key LLB stored in the credential store of the browser B consists of the certiﬁed private/public
key pair (skB, certB); the corresponding public key pkB is part of the certiﬁcate. Finally, the long-lived key
LLS consists of the certiﬁed private/public key pair (skS , certS), the password pw and authenticator w. The
server maps (pw, w) to certB in order to select the matching authenticator during the protocol execution. In the
following we brieﬂy describe the execution of our BBMA protocol illustrated in Figure 1.
1. Protocol Invocation. The user U initiates the protocol by communicating the server’s U RL to the browser
B. Upon resolving the corresponding address B chooses a nonce rC of length p5(κ) at random and forwards
it to S (ClientHello). In response S chooses a random nonce rS and a TLS session identiﬁer sid of
length p5(κ) and appends it to the own certiﬁcate certS (ServerHello). We stress that sid chosen by S
is not the session identiﬁer sidS used in our security model but a value speciﬁed in TLS.
2. Key Material Negotiation. B chooses a pre-master secret kp of length p5(κ) at random and sends it to S
encrypted with the received public key pkS (ClientKeyExchange). The pre-master secret kp is used to
derive the master secret km through a pseudo-random function PRF on input (l1, rC|rS) with kp as the secret
seed. This key derivation is performed based on the standard TLS pseudo-random function PRF (see [4, Sect.
5]). The master secret is then used as secret seed for the instantiation of the pseudo-random function PRF
on input (l2, rC|rS) to derive the session keys (k1, k2) used to encrypt and authenticate session messages
exchanged between B and S. TLS speciﬁes the generation of six session keys: A symmetric encryption key,
a MAC key, and an IV for block ciphers only (either for client and server). For simplicity, we denote k1 as
the encryption key and k2 as the authentication key which are the same for B and S. The browser B also
proves possession of the private key skB by signing the hash hσC over all previously negotiated messages,
i.e., signature σC (ClientVerify).
User U
{LLU := (pw, w)}
choose U RL
Provably Secure Browser-Based User-Aware Mutual Authentication over TLS
9
Browser B
{LLB := (skB, certB)}
Server S
{LLS := (pw, w, skS , certS )}
−U RL−−−−−−−→
rC ∈r {0, 1}p5(κ)
A := rC
− A−−−−−−−→
←− B−−−−−−−
rS , sid ∈r {0, 1}p5(κ)
sidS := rC|rS
B := rS|sid|certS
C|σC|D
−
−−−−−−−−→
←− E |F
−−−−−−−
parse C as C(cid:48) and certB
if NOT V er(certB, A|B|C, σC)
then ABORT else
kp := DskS (C(cid:48))
km := PRFkp (l1, sidS )
(k1|k2) := PRFkm (l2, sidS )
h1 := Hash(A|B|C|σC)
(FC|ηC) := Deck1 (D)
if FC (cid:54)= PRFkm (l3, h1)
or ηC (cid:54)= HMACk2 (FC) then ABORT
else
h2 := Hash(A|B|C|σC|FC)
FS := PRFkm (l4, h2)
E := Enck1 (FS|HMACk2 (FS ))
F := Enck1 (w|HMACk2 (w))
sidC := rC|rS
kp ∈r {0, 1}p3(κ)
km := PRFkp (l1, sidC)
C(cid:48) := EpkS (kp)
C := C(cid:48)|certB
hσC = Hash(A|B|C)
σC := SigskB (hσC )
(k1|k2) := PRFkm (l2, sidC)
h1 := Hash(A|B|C|σC)
FC := PRFkm (l3, h1)
D := Enck1 (FC|HMACk2 (FC))
if recognize(w∗, w) = 0
then ABORT else
ACCEPT
←− w∗
−−−−−−−
− pw−−−−−−−→
(FS|ηS ) := Deck1 (E)
(w|µS ) := Deck1 (F )
h2 := Hash(A|B|C|σC|FC)
if FS (cid:54)= PRFkm (l4, h2)
or ηS (cid:54)= HMACk2 (FS )
or µS (cid:54)= HMACk2 (w)
then ABORT else
w∗ := render(w, Ψ )
G := Enck1 (pw|HMACk2 (pw))
ERASE pw, w
Fig. 1. BBMA Protocol over TLS with Mutual Authentication between User U and Server S. Boxed messages denote the standard TLS handshake.
− G−−−−−−−→
(pw(cid:48)|µC) := Deck1 (G)
if µC (cid:54)= HMACk2 (pw(cid:48))
then ABORT else
if pw(cid:48) (cid:54)= pw
then ABORT else ACCEPT
Sebastian Gajek, Mark Manulis, Ahmad-Reza Sadeghi, and Jörg Schwenk
10
3. Session Key Conﬁrmation. B conﬁrms the session key generation, i.e., FC is the ﬁrst message that is au-
thenticated via HMAC computed with k2 and encrypted via the symmetric encryption scheme computed with
k1. FC is computed as output of PRF on input (l3, h1) with km as the secret seed; whereby h1 denotes the
hash value computed over all messages previously processed by B (Finished). S veriﬁes σC, using the
public key pkB. Further, S generates km and derives the session keys (k1, k2) in a similar way. S uses
the own session keys (k1, k2) to ensure that it communicates with B through the veriﬁcation of FC. If the
veriﬁcation fails, S aborts the protocol. Otherwise, it conﬁrms the negotiated session parameters, using PRF
on input (l4, h2) with km as secret seed; whereby h2 denotes the hash value over the received messages.
The output of PRF is ﬁrst authenticated via HMAC computed with k2 and then encrypted via the symmetric
encryption scheme computed with k1.
4. Authenticate to the User. The actual authentication between U and S proceeds in the last communication
rounds. S sends authenticator w encrypted with k1 with the attached message authentication code computed
using k2. We call the message in a high-level description the HumanAuth message. B communicates the
decrypted authenticator to U through execution of the render function which takes as input the authenti-
cator w and state Ψ and outputs the visualization of w named w∗. The abstract human perception function
recognize is used to model the ability of U to decide whether the authenticator w∗ matches the origi-
nal authenticator w which is shared with S after the initialization stage. Upon the successful recognition
U communicates the password pw to B and accepts. The browser in turn forwards pw to the server over
the established secure channel, i.e., authenticated via HMAC computed with k2 and encrypted with k1. We
call the response message in a high-level description the HumanResponse message. S accepts upon the
successful veriﬁcation of the received password.
Before we continue with the security analysis we reemphasize the triangular model of authentication deployed
in BBMA. When verifying FC, S is sure to deal with B. Then, S resolves certB to look up for the corresponding
authenticator w. If no matching pair (certB, w) exists, S aborts the protocol; otherwise S proceeds by sending
FS. Upon the stage, S knows that it can establish a secure channel with B. When verifying FS, B knows that
it can establish a secure channel to S. Upon the stage, the protocol ensures that S and B are able exchange
conﬁdential messages. As with TLS in client authentication mode, the channel does not prevent U from con-
tacting a rogue server and disclosing sensitive information. However, when verifying w through the execution
of recognize, U is sure to communicate to S through B, since S is the only owner of w apart from U. Upon
this stage, the protocol ensures that S is authenticated to U. Finally, when verifying pw, S is sure to deal with
the matching client C := (U,B).
3.3 Security Analysis
In the following we analyze the security of BBMA. We recall that the goal of the protocol is to provide browser-
based mutual authentication between U and S according to Deﬁnition 3. Although not stated in Theorem 1
explicitly, the security proof of proposed BBMA based on the current TLS standard is valid in the Random
Oracle Model (ROM) [8]. The reason is that the speciﬁcation of TLS prescribes the use of the RSA encryption
according to PKCS#1 (a.k.a. RSA-OAEP) which in turn is known to provide IND-CPA security in ROM (see
[33] for the proof). However, Theorem 1 assumes (E,D) to be IND-CPA secure (independent of ROM). Thus,
using an encryption scheme whose security holds under standard assumptions would also disburden the current
security of BBMA from the strong assumptions of ROM.
Theorem 1 (BBMA-Security). Let q denote the total number of executed protocol sessions. If PRF is pseudo
random, (Enc, Dec) and (E,D) are IND-CPA secure, Hash is collision-resistant, (Sig, V er) is EUF-CMA
secure, and HMAC is WUF-CMA secure, then BBMA provides mutual authentication in the sense of Deﬁnition 3
and
Succbbma
BBMA (κ) ≤ 3q2
+ q2
2p3(κ)
2p5(κ)
4qSuccwuf−cma
HMAC
+ 4qAdvind−cpa
(κ) + qAdvind−cpa
(E,D)
(Enc,Dec)(κ) + 4qAdvprf
(κ) + qSucceuf−cma
Hash(κ) +
PRF (κ) + 3qSucccoll
(Sig,V er)(κ) + q|W∗|
|W|
.