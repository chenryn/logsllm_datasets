New Memory Forensics Techniques to Defeat
Device Monitoring Malware
Andrew Case, Gustavo Moreira, Austin Sellers,
Golden G. Richard III
PI:EMAIL, PI:EMAIL, PI:EMAIL,
PI:EMAIL
April 4, 2022
1
Introduction
Malware that is capable of monitoring hardware devices poses a significant threat
to the privacy and security of users and organizations. Common capabilities
of such malware include keystroke logging, clipboard monitoring, sampling of
microphone audio, and recording of web camera footage. All modern operating
systems implement APIs that provide this hardware access and all of them have
been abused by numerous malware samples to monitor the activity of journalists
and dissidents, conduct espionage operations against corporate and government
targets, and gather data that allows for blackmail of individuals.
Existing methods for detecting these malware techniques are largely confined
to malware that operates within kernel space, commonly referred to as kernel
rootkits. The use of such rootkits has waned in recent years as operating system
vendors have sharply locked down access to kernel memory.
This includes
enforcement of driver signing, limiting which organizations can receive signing
certificates, and adding proactive monitoring systems within the operating system
that detect common rootkit tampering techniques. These limitations placed
upon kernel rootkits as well as the easy-to-use APIs in userland that allow for
access to hardware devices has led to a significant number of device monitoring
malware samples that operate solely within process memory. Such malware is
comparatively much simpler to write and is also much easier to make portable
across a wide variety of operating system versions.
Unfortunately, current methods for direct detection of such userland malware
are severely outdated or completely lacking. These include attempts at live
forensics, which relies on system APIs to enumerate artifacts, but these APIs are
often hooked by malware to hide their activity. Partial existing memory forensics
techniques for Windows exist, but are outdated, and there are monitoring
methods used across the major operating systems that have no memory forensic
1
detection support at all. Given the significant recent emphasis on memory
analysis during incident response, such as in CISA directives released after the
detection of ProxyLogon [1] as well the SolarWindows supply chain compromise
[2], it is imperative that memory forensic techniques are able to properly detect
modern threats.
In this paper, we present our effort to research and develop memory forensic
algorithms capable of direct detection of userland device monitoring malware
across all three major operating systems. To accomplish this goal, we first
undertook a significant effort to understand and document the APIs that provide
device access to userland components. This effort included binary analysis of
closed source components (Windows, Mac) as well as study of open source
components (Linux, Mac). These efforts in turn led to the update of existing and
creation of new Volatility plugins that are capable of automatically locating and
extracting all relevant information about processes that are monitoring hardware
devices. These plugins quickly inform analysts of the presence of such malware
as well as key in information such as the addresses of callback functions. We
plan to contribute our Volatility plugins and additions to the community upon
publication of this paper.
2
Research and Experimental Setup
2.1
Operating Systems and Versions Tested
During our research effort, we aimed to develop capabilities that covered all
supported versions of target operating systems as well as bleeding edge ones,
where possible. Given that the layout of operating system data structures often
changes between versions and that many of the components we analyzed were
closed source, we fully documented all of our developed plugins with the steps
needed to find the correct offsets and associated information in future versions
of each operating system.
The following table lists the starting and ending version tested and supported
added for each operating system:
Operating System
Earliest Version
Latest Version
Windows 10
10563
22000.556
macOS
Catalina
Monterey
Linux
2.6.18
5.14
This wide range of versions covers Windows 10 starting from build 10586,
released in 2015, to the latest release at the time this paper is written. We also
cover Linux kernel versions going back to 2008. All versions of macOS supported
by Apple at the time of writing were also covered in our research. We choose to
test and include such as a wide of range of kernel versions to ensure that our
effort is as widely useful to the community as possible.
2
2.2
Memory Sample Creation
When developing new memory forensic capabilities, it is imperative to develop
proof-of-concept applications that perform the same actions as malware, but
in a controlled and logged manner. By developing these POC applications, the
researcher can be certain that artifacts recovered from a memory sample with a
POC application active match precisely with the values recorded by the POC
as it ran. As an example, a POC that places an API hook would record the
process ID of its victim along with the address that was hooked and the address
of the malicious handler. The memory analysis researcher can then run newly
developed plugins against these memory samples and confirm that the recovered
values match. These samples can also be saved to perform regression testing of
future software releases.
Given the severity of the malware types discussed in this paper, our team
wanted to ensure that our research process and results could be repeated and
verified well into the future. To meet this need, we developed POC applications
that performed each action hunted for by our plugin set. When then generated
memory samples with our developed POCs active and ensured that our plugin
output matched. Snippets of these POCs will be shown and discussed where
relevant throughout the paper.
To create stable and valid memory samples, two methods for acquisition
were used. The first was the use of Surge Collect Pro from Volexity [3]. This
commercial software supports stable acquisition across Windows, Linux, and
macOS systems.
Besides capturing physical memory, Surge also records a
significant amount of system state and metadata to json files.
This extra
metadata allowed us to automate a significant amount of the testing. The second
approach we used for acquisition was snapshotting and suspending the VMware
virtual machines that we used for testing. The system state files (.vmem, .vmss,
.vmsn) created when snapshotting and/or suspending a guest VM contain a copy
of all physical memory as well the metadata needed to fully perform memory
analysis. The main downside to this approach is that the system state files do
not contain the wide range of metadata that Surge produces.
2.3
Analysis Tools and Resources
IDA Pro was used for all binary analysis performed during our research. Source
code studying of Linux kernel versions was largely performed using the excellent
Exlixir cross reference website [4] and macOS source code study was performed
using a self-hosted OpenGrok instance that contained source code from Appleâ€™s
open source code website [5].
3
Windows Analysis - SetWindowsHookEx
There are two APIs provided by Windows systems that userland malware abuses
to monitor devices. In this section, we discuss the internals of SetWindow-
sHookEx along with our updates and creation of new Volatility capabilities that
3
provide automated detection of abuse of this API. Before our effort, Volatil-
ity only supported detection of SetWindowsHookEx abuse through Windows 7
and did not recover all needed information. In the following section, we give
RegisterRawInputDevices the same, complete treatment.
3.1
Background
The SetWindowsHookEx API provides the ability for applications to install hooks
that activate when specific device or window (GUI) events occur. These hooks
can target the keyboard or mouse as well as activity within the GUI environment,
such as messages between sent between applications or an application changing
its foreground/background state. The callbacks associated with these hooks
receive the specific data of event that triggered the hook, such as the button
pressed on a keyboard. Given the power and flexibility of this API, numerous
malware variants and samples have abused this API for keylogging, mouse
monitoring, and code injection.
Figure 1 shows the function prototype for SetWindowsHookEx.
Figure 1: SetWindowsHookEx Prototype
The first parameter, idHook, specifies which event the hook will monitor,
such as WH KEYBOARD, to monitor keystrokes. The second parameter, lpfn
is the callback to activated upon each monitor event. The last two parameters,
hmod and dwThreadId, control the behaviour of which processes are hooked and
how they are hooked.
If hmod is NULL then the executable calling SetWindowsHookEx must host
the callback function. Otherwise, hmod must reference a valid handle to the
DLL that hosts the callback function. If dwThreadID is non-NULL then it
specifies the particular thread for which the monitor should be placed. If NULL
is passed, then all threads within the same desktop as the calling application
will be hooked. As discussed shortly, Volatility does not currently cover all
combinations of hmod and dwThreadId, which we discovered during our testing
and fixed during development.
4
3.2
Internals
An entry on the Volatility Labs blog [6] and the Art of Memory Forensics [7]
discuss a majority of the internals related to SetWindowsHookEx and the kernel
data structures that it populates. In particular, these cover the data structures
created when hooks are populated as well as the recovery of global hooks placed
inside a DLL. We highly suggest reviewing these resources for readers new to
analysis of the Windows GUI subsystem.
The information specific to each hook is placed within a tagHOOK data
structure. This information includes the following:
1. The desktop where the hook is active
2. The thread targeted by the hook
3. The event monitored
4. The location of the callback function
5. The module hosting the callback function
To support the variety of data structures needed for this analysis across many
Windows 10 versions, a significant reverse engineering effort was undertaken. To
allow for quick support of future Windows versions to be added to our plugins,
we fully documented each function inside of win32k.sys, win32kbase.sys, and
win32kfull.sys needed to uncover the variety of data structure and offsets.
Besides having the correct data structure layouts, fully recovering all varia-
tions of hook placement requires treating each hook in one of three ways, each
of which alters the meaning of the data stored in tagHOOK. These three will be
discussed separately as having complete support in Volatility requires special
handling of each one.
3.3
Global Hooks in a DLL
The first form of SetWindowsHookEx abuse is when hmod is set to a DLL handle
and dwThreadId is set to NULL. This tells the operating system that the caller
wants to monitor all threads within the same desktop using a function defined
in the DLL. The effect of this choice is that the DLL hosting the callback will
be loaded (injected) into each process that triggers the callback, such as after a
keystroke is entered.
This mechanism provides a built-in code injection technique that removes the
need for malware to use heavily monitored APIs, such as WriteProcessMemory,
to introduce code into a victim process. Several malware samples, such as the
Laqma malware discussed in [6], abuse SetWindowsHookEx solely as a mechanism
to get their DLL loaded into victim processes, but then discard all future event
data (keystrokes, mouse movements, etc.).
When a global hook in a DLL is used, the ihmod member of tagHOOK is set
to the index within the global atom table of the element holding the path to the
DLL hosting the hook, and the offPfn member is set to the relative offset of the
callback function from the DLL base address.
5
3.3.1
Volatility Support
Volatilityâ€™s messagehooks plugin recovers global hooks in a DLL by first enu-
merating each desktop along with each thread running inside each desktop. For
each desktop or thread found, it uses the pDeskInfo member of the structure to
find the tagDESKTOPINFO instance. This structure contains a member named
aphkStart, which holds an array of pointers to tagHOOK instances. Each array
index corresponds to the a hardcoded hook type, and each tagHOOK instance
holds a pointer to the next one in its list. For each hook found, its relevant
metadata is computed and reported. Figure 2 shows the output of the current
version of the plugin against a single hook found in a memory sample. In this
particular instance, the system from which memory was acquired was infected
with the infamous Turla malware [8].
Figure 2: Recovery of a global keyboard hook
The figure illustrates that Volatility has detected that the explore.exe process
with a PID of 2568 has its thread with ID 1816 hooked.
The event being
monitored (Filter) is the keyboard, and the callback function (Procedure) is
located at offset 0x22c0 from the beginning of tll.dll. Existing Volatility plugins,
such as dlldump or dumpfiles, can be used to extract the malicious DLL to disk
and begin binary analysis of the callback function.
3.4
Global Hooks in an Application Executable
The second form of SetWindowsHookEx abuse is the placement of a hook inside
of an application executable (.exe file). In this form, the hmod parameter to
SetWindowsHookEx is set to NULL and dwThreadId can either be NULL or the
thread ID to target. The effect of setting hmod to NULL is quite significant as it
means the calling executable will still have its callback activated for monitored
events, but the executable itself will not be injected into other processes. Instead,
as described by Microsoft [9], the created event information will be sent in a
message to the calling process.
Figure 3 shows how our POC set a global application executable hook.
6
Figure 3: SetWindowsHookEx with an Application Hook
In the call it can be seen that the both the module and thread ID parameters
are NULL. This means every thread within the desktop will be hooked and that
the per-event data will be placed into the message input queue of the calling
application. This allowed us to ensure Volatility correctly handles this case going
forward.
3.4.1
Volatility Support
Volatilityâ€™s existing messagehooks plugin was able to detect hooks registered in
this way, but did not inform analysts of which process was hosting the hook.
This meant that, in a real-world situation where dozens of processes are running
on a victim desktop, the same hook will be reported for each of them, but
without any indication of which process actually placed it. The output is also
a bit confusing as it reports a callback address that is not even mapped into
all of the processes, or if it is mapped, would have a different meaning in each
process address space. This lack of information forces analysts to manually work
backwards to trace the hook origin, which is time consuming, error prone, and
requires an investigator to have previous reverse engineering experience.
We aimed to resolve this issue by researching a method to detect which
application (process) actually placed the hook. Since the application is not
directly mapped into each victim process, the hooking application must remain
running for as long as the hook is active. With this in mind, we analyzed the
internal implementation of SetWindowsHookEx to see how such processes are
treated. We then determined that threads which set global hooks will have the
TIF GLOBALHOOKER flag set in the TIF FLAGS member of the threadâ€™s
tagTHREADINFO structure. We then updated messagehooks to print True or
False at the end of each Thread line to indicate if the particular thread has set a
global hook.
Figure 4 shows three blocks of output from messagehooks when ran against
the sample with our POC active.
7
Figure 4: SetWindowsHookEx with an Application Hook
The first block shows the global hook registered inside the Vol GUI-Desktop
Hidden desktop, which is created by our POC. This hook is denoted as the global
one by marking the thread as  to indicate that this hook will apply to
all threads within the particular desktop. Also note that the procedure address
is the full runtime address of the callback function for the keyboard hook, but
no information is given here on which process is hosting the hook as the module
index is -1, which marks the index as invalid. This also leads Volatility to mark
the hosting module as (CurrentModule), since it cannot automatically infer the
8
hosting module from the tagHOOK structure.
The second block, which is repeated for each victim thread in the full plugin
output, shows that the same hook has targeted the powershell.exe process with
PID 5916. This output can be automatically matched to the first block as the
hook address is the same since the per-threadâ€™s hook structure is pointed to the
same one as the globally registered hook attached to the desktop. We also note
that the False at the end of the Thread line is our addition that prints if the
TIF GLOBALHOOKER flag is set. This per-thread output is how analysts can
know which processes and threads were infected by malicious hooks, and, as
mentioned previously, there are typically dozens of these lines when hooks are
active on real-world systems.
The third and final block of output in the figure shows that the GUI-
TesterAll program (our POC) is the one that actually placed the hook as its
TIF GLOBALHOOKER flag is set (the True at the end of the Thread line).
With this new information, an analyst immediately knows 1) which process
actually placed the hook 2) which address to look at in process memory for
the hook. Furthermore, since the main application executable is hosting the
hook, the analyst can use the existing procdump pluginâ€™s -p option with the
process ID (1332) to automatically extract this malicious executable to disk.
This allows analysis in static analysis tools, such as IDA Pro or Ghidra. As we