# New Memory Forensics Techniques to Defeat Device Monitoring Malware

**Authors:**
- Andrew Case
- Gustavo Moreira
- Austin Sellers
- Golden G. Richard III

**Contact:**
- PI:EMAIL
- PI:EMAIL
- PI:EMAIL
- PI:EMAIL

**Date: April 4, 2022**

## 1. Introduction

Malware capable of monitoring hardware devices poses a significant threat to the privacy and security of users and organizations. Common capabilities of such malware include keystroke logging, clipboard monitoring, microphone audio sampling, and web camera footage recording. Modern operating systems provide APIs for hardware access, which have been exploited by numerous malware samples to monitor journalists and dissidents, conduct espionage against corporate and government targets, and gather data for blackmail.

Existing detection methods for these malware techniques are largely limited to kernel-level rootkits. The use of such rootkits has declined in recent years due to enhanced security measures by operating system vendors, including driver signing enforcement, restricted certificate issuance, and proactive monitoring systems that detect common rootkit tampering techniques. These limitations, combined with the ease of using userland APIs for hardware access, have led to an increase in device monitoring malware that operates solely within process memory. Such malware is simpler to write and more portable across different operating system versions.

Unfortunately, current methods for detecting userland malware are outdated or insufficient. These methods include live forensics, which relies on system APIs that can be hooked by malware to hide activity. While partial memory forensics techniques exist for Windows, they are outdated, and there are no memory forensic detection methods for other major operating systems. Given the recent emphasis on memory analysis during incident response, as seen in CISA directives following the detection of ProxyLogon [1] and the SolarWinds supply chain compromise [2], it is crucial to develop memory forensic techniques capable of detecting modern threats.

In this paper, we present our research and development of memory forensic algorithms for the direct detection of userland device monitoring malware across all three major operating systems. We first undertook a comprehensive effort to understand and document the APIs that provide device access to userland components. This involved binary analysis of closed-source components (Windows, macOS) and study of open-source components (Linux, macOS). Our efforts led to the update of existing and creation of new Volatility plugins that can automatically locate and extract relevant information about processes monitoring hardware devices. These plugins quickly inform analysts of the presence of such malware and provide key information, such as callback function addresses. We plan to contribute our Volatility plugins and additions to the community upon publication of this paper.

## 2. Research and Experimental Setup

### 2.1 Operating Systems and Versions Tested

Our research aimed to cover all supported versions of target operating systems, as well as bleeding-edge versions where possible. Given the frequent changes in operating system data structures between versions and the closed-source nature of many components, we fully documented our developed plugins with the steps needed to find the correct offsets and associated information in future versions.

The following table lists the starting and ending versions tested and supported for each operating system:

| Operating System | Earliest Version | Latest Version |
|------------------|------------------|----------------|
| Windows 10       | 10563            | 22000.556      |
| macOS            | Catalina         | Monterey       |
| Linux            | 2.6.18           | 5.14           |

This wide range of versions covers Windows 10 from build 10586 (released in 2015) to the latest release at the time of writing. We also covered Linux kernel versions going back to 2008 and all versions of macOS supported by Apple at the time of writing. Testing such a broad range of kernel versions ensures that our work is as widely useful to the community as possible.

### 2.2 Memory Sample Creation

When developing new memory forensic capabilities, it is essential to create proof-of-concept (POC) applications that perform the same actions as malware but in a controlled and logged manner. These POCs allow researchers to verify that artifacts recovered from a memory sample match the values recorded by the POC during its execution. For example, a POC that places an API hook would record the victim's process ID, the address that was hooked, and the address of the malicious handler. Researchers can then run newly developed plugins against these memory samples to confirm that the recovered values match. These samples can also be used for regression testing of future software releases.

Given the severity of the malware types discussed in this paper, our team wanted to ensure that our research process and results could be repeated and verified in the future. To meet this need, we developed POC applications that performed each action hunted for by our plugin set. We then generated memory samples with these POCs active and ensured that our plugin output matched. Snippets of these POCs will be shown and discussed where relevant throughout the paper.

To create stable and valid memory samples, we used two acquisition methods. The first was the use of Surge Collect Pro from Volexity [3], which supports stable acquisition across Windows, Linux, and macOS systems. Surge not only captures physical memory but also records a significant amount of system state and metadata in JSON files, allowing for automated testing. The second method involved snapshotting and suspending VMware virtual machines. The system state files (.vmem, .vmss, .vmsn) created during snapshotting and suspension contain a copy of all physical memory and the necessary metadata for memory analysis. However, these files do not include the extensive metadata provided by Surge.

### 2.3 Analysis Tools and Resources

IDA Pro was used for all binary analysis performed during our research. Source code studies of Linux kernel versions were conducted using the Exlixir cross-reference website [4], and macOS source code was analyzed using a self-hosted OpenGrok instance containing source code from Appleâ€™s open-source code website [5].

## 3. Windows Analysis - SetWindowsHookEx

There are two APIs provided by Windows systems that userland malware abuses to monitor devices. In this section, we discuss the internals of SetWindowsHookEx and our updates and creation of new Volatility capabilities that provide automated detection of abuse of this API. Before our effort, Volatility only supported detection of SetWindowsHookEx abuse through Windows 7 and did not recover all necessary information. In the following section, we give RegisterRawInputDevices the same, complete treatment.

### 3.1 Background

The SetWindowsHookEx API allows applications to install hooks that activate when specific device or window (GUI) events occur. These hooks can target the keyboard, mouse, or GUI environment events, such as messages between applications or changes in application foreground/background state. The callbacks associated with these hooks receive the specific data of the event that triggered the hook, such as the button pressed on a keyboard. Given the power and flexibility of this API, numerous malware variants have abused it for keylogging, mouse monitoring, and code injection.

Figure 1 shows the function prototype for SetWindowsHookEx.

**Figure 1: SetWindowsHookEx Prototype**

The first parameter, `idHook`, specifies which event the hook will monitor, such as `WH_KEYBOARD` for keystrokes. The second parameter, `lpfn`, is the callback function activated upon each monitored event. The last two parameters, `hmod` and `dwThreadId`, control the behavior of which processes are hooked and how they are hooked. If `hmod` is `NULL`, the executable calling SetWindowsHookEx must host the callback function. Otherwise, `hmod` must reference a valid handle to the DLL that hosts the callback function. If `dwThreadID` is non-`NULL`, it specifies the particular thread for which the monitor should be placed. If `NULL` is passed, then all threads within the same desktop as the calling application will be hooked. As discussed shortly, Volatility does not currently cover all combinations of `hmod` and `dwThreadId`, which we discovered during our testing and fixed during development.

### 3.2 Internals

An entry on the Volatility Labs blog [6] and the Art of Memory Forensics [7] discuss the majority of the internals related to SetWindowsHookEx and the kernel data structures it populates. These resources cover the data structures created when hooks are populated and the recovery of global hooks placed inside a DLL. We highly recommend reviewing these resources for readers new to the analysis of the Windows GUI subsystem.

The information specific to each hook is stored in a `tagHOOK` data structure, which includes:
1. The desktop where the hook is active.
2. The thread targeted by the hook.
3. The event monitored.
4. The location of the callback function.
5. The module hosting the callback function.

To support the variety of data structures needed for this analysis across many Windows 10 versions, a significant reverse engineering effort was undertaken. To allow for quick support of future Windows versions, we fully documented each function inside `win32k.sys`, `win32kbase.sys`, and `win32kfull.sys` needed to uncover the various data structures and offsets.

Fully recovering all variations of hook placement requires treating each hook in one of three ways, each of which alters the meaning of the data stored in `tagHOOK`. These three methods will be discussed separately, as having complete support in Volatility requires special handling of each one.

### 3.3 Global Hooks in a DLL

The first form of SetWindowsHookEx abuse is when `hmod` is set to a DLL handle and `dwThreadId` is set to `NULL`. This tells the operating system that the caller wants to monitor all threads within the same desktop using a function defined in the DLL. The effect of this choice is that the DLL hosting the callback will be loaded (injected) into each process that triggers the callback, such as after a keystroke is entered.

This mechanism provides a built-in code injection technique that removes the need for malware to use heavily monitored APIs, such as `WriteProcessMemory`, to introduce code into a victim process. Several malware samples, such as the Laqma malware discussed in [6], abuse SetWindowsHookEx solely as a mechanism to get their DLL loaded into victim processes, but then discard all future event data (keystrokes, mouse movements, etc.).

When a global hook in a DLL is used, the `ihmod` member of `tagHOOK` is set to the index within the global atom table of the element holding the path to the DLL hosting the hook, and the `offPfn` member is set to the relative offset of the callback function from the DLL base address.

#### 3.3.1 Volatility Support

Volatilityâ€™s `messagehooks` plugin recovers global hooks in a DLL by first enumerating each desktop along with each thread running inside each desktop. For each desktop or thread found, it uses the `pDeskInfo` member of the structure to find the `tagDESKTOPINFO` instance. This structure contains a member named `aphkStart`, which holds an array of pointers to `tagHOOK` instances. Each array index corresponds to a hardcoded hook type, and each `tagHOOK` instance holds a pointer to the next one in its list. For each hook found, its relevant metadata is computed and reported. Figure 2 shows the output of the current version of the plugin against a single hook found in a memory sample. In this particular instance, the system from which memory was acquired was infected with the infamous Turla malware [8].

**Figure 2: Recovery of a global keyboard hook**

The figure illustrates that Volatility has detected that the `explore.exe` process with a PID of 2568 has its thread with ID 1816 hooked. The event being monitored (Filter) is the keyboard, and the callback function (Procedure) is located at offset `0x22c0` from the beginning of `tll.dll`. Existing Volatility plugins, such as `dlldump` or `dumpfiles`, can be used to extract the malicious DLL to disk and begin binary analysis of the callback function.

### 3.4 Global Hooks in an Application Executable

The second form of SetWindowsHookEx abuse is the placement of a hook inside an application executable (.exe file). In this form, the `hmod` parameter to SetWindowsHookEx is set to `NULL`, and `dwThreadId` can either be `NULL` or the thread ID to target. Setting `hmod` to `NULL` means the calling executable will still have its callback activated for monitored events, but the executable itself will not be injected into other processes. Instead, as described by Microsoft [9], the created event information will be sent in a message to the calling process.

Figure 3 shows how our POC set a global application executable hook.

**Figure 3: SetWindowsHookEx with an Application Hook**

In the call, it can be seen that both the module and thread ID parameters are `NULL`. This means every thread within the desktop will be hooked, and the per-event data will be placed into the message input queue of the calling application. This allowed us to ensure Volatility correctly handles this case going forward.

#### 3.4.1 Volatility Support

Volatilityâ€™s existing `messagehooks` plugin was able to detect hooks registered in this way but did not inform analysts of which process was hosting the hook. This meant that, in a real-world situation where dozens of processes are running on a victim desktop, the same hook will be reported for each of them, but without any indication of which process actually placed it. The output is also confusing as it reports a callback address that is not even mapped into all of the processes, or if it is mapped, would have a different meaning in each process address space. This lack of information forces analysts to manually trace the hook origin, which is time-consuming, error-prone, and requires previous reverse engineering experience.

We aimed to resolve this issue by researching a method to detect which application (process) actually placed the hook. Since the application is not directly mapped into each victim process, the hooking application must remain running for as long as the hook is active. With this in mind, we analyzed the internal implementation of SetWindowsHookEx to see how such processes are treated. We determined that threads which set global hooks will have the `TIF_GLOBALHOOKER` flag set in the `TIF_FLAGS` member of the threadâ€™s `tagTHREADINFO` structure. We then updated `messagehooks` to print `True` or `False` at the end of each Thread line to indicate if the particular thread has set a global hook.

Figure 4 shows three blocks of output from `messagehooks` when run against the sample with our POC active.

**Figure 4: SetWindowsHookEx with an Application Hook**

The first block shows the global hook registered inside the `Vol GUI-Desktop Hidden` desktop, which is created by our POC. This hook is denoted as the global one by marking the thread as `True` to indicate that this hook will apply to all threads within the particular desktop. Also note that the procedure address is the full runtime address of the callback function for the keyboard hook, but no information is given here on which process is hosting the hook as the module index is `-1`, which marks the index as invalid. This also leads Volatility to mark the hosting module as `(CurrentModule)`, since it cannot automatically infer the hosting module from the `tagHOOK` structure.

The second block, which is repeated for each victim thread in the full plugin output, shows that the same hook has targeted the `powershell.exe` process with PID 5916. This output can be automatically matched to the first block as the hook address is the same since the per-threadâ€™s hook structure is pointed to the same one as the globally registered hook attached to the desktop. We also note that the `False` at the end of the Thread line is our addition that prints if the `TIF_GLOBALHOOKER` flag is set. This per-thread output is how analysts can know which processes and threads were infected by malicious hooks, and, as mentioned previously, there are typically dozens of these lines when hooks are active on real-world systems.

The third and final block of output in the figure shows that the `GUI-TesterAll` program (our POC) is the one that actually placed the hook as its `TIF_GLOBALHOOKER` flag is set (`True` at the end of the Thread line). With this new information, an analyst immediately knows 1) which process actually placed the hook and 2) which address to look at in process memory for the hook. Furthermore, since the main application executable is hosting the hook, the analyst can use the existing `procdump` pluginâ€™s `-p` option with the process ID (1332) to automatically extract this malicious executable to disk. This allows analysis in static analysis tools, such as IDA Pro or Ghidra.