# IOS Exploit: A Comprehensive Guide

## Overview
This document provides a detailed guide on exploiting vulnerabilities in Cisco IOS, focusing on heap overflows and memory management. The steps are outlined to help understand the process and provide insights into protecting against such exploits.

## Step 9: Bypassing PREV Pointer Check
- **PREV Pointer Check**: During the inspection of the previous block before a `free()` operation, the PREV pointer is checked.
- **Test Condition**: 
  ```c
  if (next_block->prev != this_block + 20) {
      abort();
  }
  ```
- **Exploitation**:
  - Perform an uncontrolled overflow to cause a device reboot.
  - This proves the device is vulnerable and puts the memory in a predictable state.
  - Crash information can be obtained from network or syslog host if logged, which contains the PREV pointer address.

## Step 10: Manipulating the Size Field
- **Size Field Check**: The size field in the block header is checked, with bit 31 marking the "block in use" status.
- **Value Constraints**: Usual values like `0x800000AB` are not possible due to the presence of `0x00` bytes.
- **Minimum Fakeable Size**: The minimum size we could fake is `0x80010101 = 65793`, which is too large.
- **Solution**: Use `0x7FFFFFFF`. This causes loops in calculations due to the use of 32-bit fields.

## Step 11: Additional Memory Pointers
- **Free Memory Blocks**: Free memory blocks carry additional management information, likely used to build a linked list of free memory blocks.
- **FREE NEXT and FREE PREV**: These pointers function similarly to NEXT and PREV but for free blocks.
- **Block Structure**:
  - MAGIC
  - Code Address
  - FREE NEXT
  - FREE PREV
  - Size + Usage (mostly `0x01`)
  - Padding
  - MAGIC2 (FREE)
  - Padding
  - Padding

## Step 12: Arbitrary Memory Write
- **Unchecked Pointers**: FREE NEXT and FREE PREV are not checked.
- **Pointer Exchange**:
  ```c
  *free_prev = *free_next;
  *(free_next + 20) = *free_prev;
  ```
- **Marking Block as Free**: Using `0x7FFFFFFF` in the size field, we can mark the fake block as free.
- **Writable Memory**: Both pointers must point to writable memory.

## Step 13: Identifying Pointer Locations
- **Process Array**: The `show mem proc alloc` command shows a "Process Array" containing addresses of process information records indexed by PID.
- **Stack Pointer**: The second field in the process information record is the current stack pointer.
- **Static Addresses**: These addresses are static per IOS image.
- **Structure**:
  - Process Array
  - Process Stack
  - Process Record

## Step 14: Taking Control of the Processor
- **Write Access**: On the 1000 and 1600 series, the stack of any process is accessible for write operations using our free pointer game.
- **Stack Elements**:
  - First element: Saved SP (C calling convention)
  - Second element: Saved return address
- **Example Stack**:
  ```assembly
  02057EC0: 02057EE4 080D63D4
  02057ED0: 02042E0C 02057FF6 00000000 00000000
  02057EE0: 00000000 02057EF0 080DE486 00001388
  ```

## Step 15: Buffer Management
- **Memory Clearing**: A `free()` on IOS actually clears the memory (overwrites it with `0x0D`).
- **Buffer Position**: The buffer after the fake block is considered clean and can be used for exploitation.
- **Static Position**: The position of the buffer relative to the PREV pointer is static per platform/IOS.
- **Block Structure**:
  - Host block Header
  - Next block Header
  - Data
  - Data
  - Fake Header
  - Exploit Buffer
  - `0x0D0D0D0D`
  - `0x0D0D0D0D`

## Step 16: Shell Code â€“ Version 1
- **Target Platform**: Motorola 68360 QUICC CPU on Cisco 1600.
- **Memory Protection**: Memory protection is set in the registers at `0x0FF01000`.
- **Disabling Protection**: Modify the second bit of the appropriate QUICC BaseRegister to disable memory protection for NVRAM.
- **Shell Code**:
  ```assembly
  \x22\x7C\x0F\xF0\x10\xC2    move.l #0x0FF010C2,%a1
  \xE2\xD1 lsr (%a1)
  \x22\x7C\x0D\xFF\xFF\xFF    move.l #0x0DFFFFFF,%a1
  \xD2\xFC\x02\xD1 adda.w #0x02D1,%a1
  \x22\x3C\x01\x01\x01\x01    move.l #0x01010101,%d1
  \x22\xBC\xCA\xFE\xBA\xBE    move.l #0xCAFEBABE,(%a1)
  ```

## Step 17: The Cisco 1600 Exploit
- **Initial Overflow**: Overflow once to get a predictable memory layout.
- **Buffer Content**:
  - Fake block and correct PREV pointer
  - Size of `0x7FFFFFFF`
  - FREE NEXT points to code buffer
  - FREE PREV points to the return address of the "Load Meter" process in the stack
  - Code to unprotect memory and write into NVRAM

## Step 18: Additional Information on IOS
- **Multitasking**: IOS seems to use cooperative multitasking, with interrupt-driven execution of critical tasks.
- **NVRAM Contents**:
  - Configuration plus header
  - 16-bit checksum
  - Size of config in bytes
  - Stack trace and other info from the last crash
  - Config seen as one big C string, terminated by 'end' and `0x00` bytes

## Step 19: Remote Shell Code
- **Append Minimum Config**: Append a new minimum configuration to the overflow.
- **Disable Interrupts**: Prevent interferences by disabling interrupts.
- **Unprotect NVRAM**: Unprotect NVRAM and calculate values for the NVRAM header.
- **Write New Config**: Write the new header and config into NVRAM.
- **Hard Reset**: Perform a clean hard reset operation on the 68360 to prevent a stack trace in NVRAM.
- **XOR Encoding**: Use XOR encoding with `0xD5` to avoid `0x00` bytes.
- **Delay Loops**: Use delay loops to handle chip-level delays in NVRAM writes.

## Future Work
- **Other Exploits**: Explore other types of exploits.
- **Differences**: Identify differences between various exploits.
- **Smaller Buffer Exploitation**: Exploit smaller buffer sizes (external buffer).
- **Address Mapping**: Map commonly used addresses.
- **Stabilizing Addresses**: Stabilize the addresses.
- **NVRAM and Config**: Focus on NVRAM and configuration.
- **FLASH Writing**: Write to FLASH instead of NVRAM.
- **Anti-Forensics**: Develop anti-forensics shell codes.

## Review
- **Cisco 1000**: Local and remote exploits, return address to code written directly in exception handler code.
- **Cisco 1600, 2600**: Local and remote exploits, return address to code written to the stack.
- **Cisco 2500**: Local network via invalid NVRAM, remote exploit not possible due to `0x00` bytes.

## Conclusion
- **Exploitable Heap Overflows**: Most IOS heap overflows seem to be exploitable.
- **Network Infrastructure**: Network infrastructure remains largely unprotected.
- **NVRAM Security**: NVRAM still contains former configurations after local network exploitation.
- **Password Decryption**: Password decryption and network structure and routing protocol authentication are disclosed.

## Scenario
- **Attacker's Steps**:
  1. Exploit a router.
  2. Build a tunnel (IPsec).
  3. Hide themselves.
  4. Gain access to the network.

## Protection Measures
- **General**:
  - Do not rely on one type of device for protection.
  - Consider all networked equipment vulnerable.
  - Employ all available protection mechanisms.
  - Plan device management like root logins to UNIX systems.
- **HP Specific**:
  - Assign passwords.
  - Protect SNMP read and write community.
  - Enable PJL protection.
  - Restrict access to port 9100.
  - Remove `this.loader` from printers.
  - Place printers behind an IP filter device.
- **Cisco Specific**:
  - Ensure no overflows in IOS.
  - Keep IOS up to date.
  - Disable unnecessary services.
  - Use IDS signatures.
  - Configure `debug sanity`.
  - Set `config-register 0x00`.
  - Log on a separate segment.
  - Protect the syslog host.