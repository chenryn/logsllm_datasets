DBA31E01
$0
57
180007
90
AGTEES
op
45
nee oyte ptr ds:[eti],a1
750
shortox
Fig, 5.37 OllyDBG window
8D442480
75 FA
short3
E9 4820FDFF
2000
Fig, 5.38 OllyDBG debug program
Since static unpacking is relatively simple and does not require further explanation.
We will continue with the dynamic unpacking method.
After the executable file is loaded by the operating system, the registers and stack
will store some pre-populated values by the operating system. The pack program
should keep these data (state) to make sure the program can be executed correctly.
Generally, the data ins the stack should not be changed, a simple packing would
choose to push such information into the stack (to alloc a new space on the stack).
x86 assembly instructions pushad can easily push all registers into the stack at once.
After loading, it can be seen that the program starts with a pushad instruction, see
Fig. 5.37. If we set a hardware read breakpoint at the bottom of the stack after the
pushad is executed, the program will be interrupted when it performs a restore
operation using the popad instruction.
So, step over the pushad instruction (by pressing F8), and then set the hardware
read breakpoint. In OllyDBG, just right-click on the register area and select *HW
break [ESPJ° in the pop-up shortcut menu. x64DBG can set it by using the right-
click shortcut menu in the stack window.
When the setup is complete, press F9 to run the program.It will be interrupted
again at a different address, see Fig. 5.38.
---
## Page 346
332
5  Reverse Engineering
Fig, 5.39 Hardware slot
Hardware slot:
1R/W:4
001FFB54
C2Em
3Empy
4Empy
OK
Cancel
EA
6h
132_30817007
edi
berne132.7c817067
HD
1
132.708170
Morecx.ebp
Fig, 5.40 OllyDBG debug window
In fact, this is a loop that clears the stack space,which is not the actual program
code.But the code followed by a far jump (from 0x43208C to 0x404DDC), which
jump to the original code (pack programs are usually in a different section from the
The hardware breakpoint has done its job now, we need to delete it. Select
“Debug  Hardware Breakpoint? in OD's menu to list all the hardware breakpoints,
see Fig. 5.39, and delete them.
Move the cursor to the last jmp, press F4 to make the program execute to the
cursor. Then press F8 to execute the jump. See Figs. 5.40 and 5.41, we can observe
the original code at this point.
nusu passnqap Suaq ssaoord a dunp  dungo  sunld, a poaos
command in OD, and specify the parameters in the pop-up dialog box, see Fig. 5.42.
Click the “Get EIP as OEP" button, then click on the “Dump" button and save to
complete the unpack.
Run the program and find that it can running correctly (see Fig. 5.43). Then we 
can use sIDA and find it has been fully restored (see Fig. 5.44).
Note: Except for the last step of using IDA, the rest of the operation should be
done under Windows XP. Here is the reason:
---
## Page 347
5.3 Dynamic Debugging and Analysis
333
2
ds:[eax],ebp
 ptr ds1[0x428
push eax
Fig, 5.41 OllyDBG debug window
01lyDunp
3-UPX_packed.exe
十
StatAdd
400000
Size: 34000
Dypo
Enty Point
31ED0
Modily.DDC
Get EIP as OEP
Capcel
Base of Code:19000
BateofDaa03000
ExRa SiceOffet of Dup Image
Sec...Virtoal.
.Virteal
..Bew Size
Bew OffsetChurectaristi
PX1
IPTO
0001A000
00018000
00001000
00019000
00081000
0001A000
00001000
00019000
BO000040
20000080
rsre
00001000
00033000
00010000
00033000
C0000040
RebuidImpot
Method:Search DLL &AP nae thing in dumped ile
Fig, 5.42 OllyDBG pop-up dialog box
Hello World!
C:Doc
sents and SettingsVAdninistratot
Fig, 5.43 Run 3-UPX_unpacked.exe
• Windows has ASLR (Address Space Randomization) After Windows XP, the
program needs to be relocated (repair the address reference to the correct location)
every time the program run. It is more difficult to recover the relocation
---
## Page 348
334
5 Reverse Engineering
D04XPP-PO
Mt.F))
uaRouTENE.
CODE.F1
电
 00, 
Fig, 5.44 The restored program
• NT kemel began to introduce MinWin after Windows Vista. ssA large number of
api-ms-XXXX DLLs appeared, which led to peoblems with tools that relied on
NT kernel features, such as OllyDump’s import table search.
• After Windows 10, some APIs have been changed, which cause OllyDump's base
address not being filled correctly.
x64DBG solves all of these problems except relocation, and the corresponding
unpack tool can be opened via *Plugins  Scylla menu, see Fig. 5.45.
Click on the “IAT Autosearch? button, then click on the “Get Imports" button.
Press Delete button to delete the one marked with a red “x”° in “Imports". Then click
the “Dump” button to convert the memory to executable. After that, click the “Fix
Dump button to repair the import table. Finally, we complete the unpack.
The resulting program can be analyzed in IDA, but it cannot be runned because
the relocation info is not fixed. It is not necessary to fix the relocation info. You can
modify the “Characteristics" of Nt Header by using tools such as CFF Explorer,
choosing the *Relocation info stripped from file'", see Fig. 5.46. Which can prevent
relocating the program due to ASLR, so the program can nun correctly, see Fig. 5.47.
---
## Page 349
5.3 Dynamic Debugging and Analysis
335
ScvLLo x86 v0.9.8
Flle Inports Troce Misc Help
24472 - 3-UPX_paded.
exe-D:\TTea
ngWlorl
space\CTFi1\eamples\3-upr'3-UPxpa
Pidk DLL
Ingorts
Dnvalid
IAT Infe
Dump
30
00271550
DAT A
PE Rabui
VA
Sice
Get Im
Fx Dump
ysWOwlA
IPO+[d
Inports:8
IvoL1d:0
Inogebase:80270680
3-0PX_pocked.ex
Fig, 5.45 Scylla tool
5.3.3 GDB Debugging
In Linux, people generally use GDB for debugging. This section briefly describes
the configuration and usage of GDB.
1. GDB environment configuration
The original GDB was hard to use. If you want to view disassembly, memory, stack,
registers, and other information, you had to enter commands manually. Therefore,
various plugins for GDB were created, such as Gef, peda, Pwndbg, etc. This section
introduces Pwndbg, it is an easy and intuitive way to use GDB. Moreover, its can
integration with IDA.
---
## Page 350
336
5  Reverse Engineering
Characterlstics
口
X
Fle is executable
Fleis a DLL
Swstem Fle
Relocation info stripped from fle
nenunbers supped fom ne
Local symbols stipped from fle
Agressively trim working set
App can handle >2gb address space
32bit word machine
Bytes of machine word are reversed (low)
√
Debugging info stripped from file in .DBG fle
If Image is on removable media, copy and run from the swap
If Image is on Net, copy andrun from the swap fle
Fle should only be run on a UP machine
OK
Cancel
Fig, 5.46 CFF explorer tool
Lle Qorldi
Fig, 5.47 Run 3-UPX_packed_dump_SCV.exe
To install Pwndbg, visit GitHub homepage at https://github.com/pwndbg/
pwndbg. You can see the installation steps in the *How". After installation, the
Pwndbg plugin will be automatically loaded every time you start GDB.
2. Open the file
You can make GDB opens the target file in the following three ways.
1: You can specify an executable file in the form of “gdb /2-simpleCrackme (for
programs that do not require parameters).
2: Use GDB’s --args parameter, such as “gdb
1'00'z1 01 >- Sud/ s3m-- q
3: After opening GDB, use the file command to specify the target file.
---
## Page 351
5.3 Dynamic Debugging and Analysis
337
3. debugging
Unlike graphical tools, GDB’s debugging is completely command-controlled rather
than shortcut-keyed.
(1) Execution
•r (run): Starts the program.
* c (continue): Allows a paused program to continue execution.
• si (step instruction): Execute one machine instruction, then stop and return to
the debugger.
* ni (next instruction): Execute one machine instruction, but if it is a function
call, proceed until the function returns.
• finish: Continue running until just after function in the selected stack frame
returms.
(2) View memory and expressions, etc.
* x/dddFFF: ddd stands for length and FFF stands for format, e.g. *x/10gx",
you can see http://visualgdb.com/gdbreference/commands/x for a list of
formats.
* p (print): prints the value of an expression, such as “p 1+1", the p command
can also be followed by the specified format, such as °p/x 111222".
(3) Breakpoint-related commands
•b (break): b *location, location can be a hexadecimal number, name, etc.,
such as “b *0x8005a0" "b *main". The "*" means that the breakpoint will set
at the specified address, not the corresponding source line.
• info b or info bl (Pwndbg): lists all breakpoints (each breakpoint has its
own id).
•del (delete): Delete a breakpoint with the specified id, such as “del 1".
* clear: remove the breakpoint at the specified location, such as °clear *main".
(4) Modify data
•Modify the register: set Srax = 0x100000.
• Modify memory: set (type of value to assign} address = value, such as *set
{int}0x405000 = 0x12345".
Note that GDB does not pause the program at the entry point, so the user needs to set
their breakpoints before the program executes. In addition, GDB does not automat-
ically save the user's breakpoint data like OD or x64DBG.It requires the user to set
the breakpoint each time.
In GDB’s command line, type enter directly means repeating the previous
command.
---
## Page 352
338
5 Reverse Engineering
29（0091-10
stlon.Inc
see:
ces onlioe at:
ads related to “uord*
Fig, 5.48 GDB window
4. IDA integration
Pwndbg provides IDA integration scripts, just run ida_script.py (can be finded in
Pwndbg) in IDA, IDA willisten to http:/127.0.0.1:31337. You can make Pwndbg
links to IDA and uses IDA's various functions.
Considering that many people use IDA on Windows and use Pwndbg on a Linux
virtual machine. It is better to modify the script to change listening address from
127.0.0.1 to 0.0.0.0 in the script. Then run °config ida-rpc-host "*host IP"" in GDB
and restart GDB to make it works, see Fig. 5.48.
To make the program pause at the start of the mainO function, execute the *b
*main° command and then you can run the program with the r command.
When the program is interrupted, Pwndbg will automatically display the current
disassembly, register values, stack contents, and other program states. When IDA
integration is enabled, it will display the corresponding disassembled pseudocode, 
highlight and locate the corresponding address in IDA, see Fig. 5.49.
In addition, you can use the Sida(*xxx) command in GDB to obtain the address
by symbol in IDA. The address will be automatically relocated to the correct offset.
For example, the address of the main shown in Fig. 5.50 is 0x7aa in IDA, but the
acquired address is relocated to Ox55555547aa.
5.3.4IDA Debugger
The tools mentioned above are limited to one platform, and each has its own set of
user interacting methods. This undoubtedly increases the learming cost. Also, their
code analysis capabilities are much weaker than IDA. Is there a tool that can use the
---
## Page 353
5.3 Dynamic Debugging and Analysis
339
Fe:9
Fig, 5.49 IDA highlight code
Fig, 5.50 Sida(“main")
command
p/x $ida（main")
$4=0x5555555547a0
powerful analysis capabilities of IDA and HexRays, but can also debug Windows, 
Linux, and even embedded and Android platforms?
The answer is YES. IDA has had a built-in debugger from early on, which
cleverly utilizes a modular design that separates the frontend and backend, allowing
the use of existing debugging tools such as WinDbg, GDB, QEMU, Bochs, etc. IDA
itself also offers dedicated remote debugging backends for different platforms.
As it evolves, HexRays also adds debugging features that allow you to debug
decompiled pseudo-code and view variables, just like you are debugging at the
source code level.
---
## Page 354
340
5  Reverse Engineering
Fig, 5.51 Windows IDA
choose Debugger
Local Bochs debugger
Local Windows debugger
Remote GDB debugger
PIN tracer
Remote Windows
debugger
Findbg debugger
Fig, 5.52 Linux IDA
choose Debugger
Ho debugger
No debugzer
LocalBochs（x64)debugger
Renote GDB debugger
PIN tracer
Remote Linux debugger
Trace replayer
The following is an introduction to some of IDA’s debugging backends and their
usages.
1. Select IDA Debugging Backends
There is a drop-down menu at the top, where you can choose which backend to use.
32-bit and 64-bit programs Linux programs require a remote debugger, as shown in
Many users use the Windows version of IDA, which can directly debug Windows
Figs. 5.51 and 5.52.
The following introduces the use of local and remote debugging steps.
2. Local Debugging
This section talks about the Windows version of IDA, with the program 4-debugme.
After loaded into IDA, we can see that the program is decoding an intermal string
using a base64 variant. Considering that the required plaintext will be generated
during the runtime, it is more convenient to use debugging to grab the final decoded
result from memory directly.
 Select the backend. Select the debugger backend Local Windows debugger to
use IDA’s built-in debugger.
 Start debugging. IDA debugging is basically the same as OD and x64DBG. To
start the program, you just need to press F9. You can also start the program by
clicking the green triangle in the corresponding toolbar. Before starting
debugging, IDA will pop up a confimation dialog. Click the “Yesa button to
 The default path of the file debugged is the path of the input file. If the target
proceed.
file does not exist or fails to be loaded for any other reason, IDA will pop up a
---
## Page 355
5.3 Dynamic Debugging and Analysis
341
Obug soolicatln setup: utn32
Aeplicatioe [
eranples4-debume4-drougne.ese
Input fil+
esanples4-debupme'4-deocgme. ese