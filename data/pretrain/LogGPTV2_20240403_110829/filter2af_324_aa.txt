**作者：Longofo@知道创宇404实验室  
时间：2020年4月8日 **
Nexus Repository Manager
3最近曝出两个el表达式解析漏洞，编号为[CVE-2020-10199](https://support.sonatype.com/hc/en-us/articles/360044882533)，[CVE-2020-10204](https://support.sonatype.com/hc/en-us/articles/360044356194-CVE-2020-10204-Nexus-Repository-Manager-3-Remote-Code-Execution-2020-03-31)，都是由Github Secutiry
Lab团队的@pwntester发现。由于之前Nexus3的漏洞没有去跟踪，所以当时diff得很头疼，并且Nexus3
bug与安全修复都是混在一起，更不容易猜到哪个可能是漏洞位置了。后面与@r00t4dm师傅一起复现出了[CVE-2020-10204](https://support.sonatype.com/hc/en-us/articles/360044356194-CVE-2020-10204-Nexus-Repository-Manager-3-Remote-Code-Execution-2020-03-31)，[CVE-2020-10204](https://support.sonatype.com/hc/en-us/articles/360044356194-CVE-2020-10204-Nexus-Repository-Manager-3-Remote-Code-Execution-2020-03-31)是[CVE-2018-16621](https://support.sonatype.com/hc/en-us/articles/360010789153-CVE-2018-16621-Nexus-Repository-Manager-Java-Injection-October-17-2018)的绕过，之后又有师傅弄出了[CVE-2020-10199](https://support.sonatype.com/hc/en-us/articles/360044882533)，这三个漏洞的根源是一样的，其实并不止这三处，官方可能已经修复了好几处这样的漏洞，由于历史不太好追溯回去，所以加了可能，通过后面的分析，就能看到了。还有之前的[CVE-2019-7238](https://support.sonatype.com/hc/en-us/articles/360017310793-CVE-2019-7238-Nexus-Repository-Manager-3-Missing-Access-Controls-and-Remote-Code-Execution-2019-02-05)，这是一个jexl表达式解析，一并在这里分析下，以及对它的修复问题，之前看到有的分析文章说这个漏洞是加了个权限来修复，可能那时是真的只加了个权限吧，不过我测试用的较新的版本，加了权限貌似也没用，在Nexus3高版本已经使用了jexl白名单的沙箱。
#### 测试环境
文中会用到三个Nexus3环境：
  * nexus-3.14.0-04
  * nexus-3.21.1-01
  * nexus-3.21.2-03
`nexus-3.14.0-04`用于测试jexl表达式解析，`nexus-3.21.1-01`用于测试jexl表达式解析与el表达式解析以及diff，`nexus-3.21.2-03`用于测试el表达式解析以及diff
#### 漏洞diff
CVE-2020-10199、CVE-2020-10204漏洞的修复界限是3.21.1与3.21.2，但是github开源的代码分支好像不对应，所以只得去下载压缩包来对比了。在官方下载了`nexus-3.21.1-01`与`nexus-3.21.2-03`，但是beyond对比需要目录名一样，文件名一样，而不同版本的代码有的文件与文件名都不一样。我是先分别反编译了对应目录下的所有jar包，然后用脚本将`nexus-3.21.1-01`中所有的文件与文件名中含有3.21.1-01的替换为了3.21.2-03，同时删除了META文件夹，这个文件夹对漏洞diff没什么用并且影响diff分析，所以都删除了，下面是处理后的效果：
如果没有调试和熟悉之前的Nexus3漏洞，直接去看diff可能会看得很头疼，没有目标的diff。
#### 路由以及对应的处理类
##### 一般路由
抓下nexus3发的包，随意的点点点，可以看到大多数请求都是POST类型的，URI都是`/service/extdirect`：
post内容如下：
    {"action":"coreui_Repository","method":"getBrowseableFormats","data":null,"type":"rpc","tid":7}
可以看下其他请求，json中都有`action`与`method`这两个key，在代码中搜索下`coreui_Repository`这个关键字：
可以看到这样的地方，展开看下代码：
通过注解方式注入了action，上面post的`method->getBrowseableFormats`也在中，通过注解注入了对应的method：
所以之后这样的请求，我们就很好定位路由与对应的处理类了
##### API路由
Nexus3的API也出现了漏洞，来看下怎么定位API的路由，在后台能看到Nexus3提供的所有API。
点几个看下包，有GET、POST、DELETE、PUT等类型的请求：
没有了之前的action与method，这里用URI来定位，直接搜索`/service/rest/beta/security/content-selectors`定位不到，所以缩短关键字，用`/beta/security/content-selectors`来定位：
通过@Path注解来注入URI，对应的处理方式也使用了对应的@GET、@POST来注解
可能还有其他类型的路由，不过也可以使用上面类似的方式进行搜索来定位。还有Nexus的权限问题，可以看到上面有的请求通过@RequiresPermissions来设置了权限，不过还是以实际的测试权限为准，有的在到达之前也进行了权限校验，有的操作虽然在web页面的admin页面，不过本不需要admin权限，可能无权限或者只需要普通权限。
#### buildConstraintViolationWithTemplate造成的几次Java EL漏洞
在跟踪调试了[CVE-2018-16621](https://support.sonatype.com/hc/en-us/articles/360010789153-CVE-2018-16621-Nexus-Repository-Manager-Java-Injection-October-17-2018)与[CVE-2020-10204](https://support.sonatype.com/hc/en-us/articles/360044356194-CVE-2020-10204-Nexus-Repository-Manager-3-Remote-Code-Execution-2020-03-31)之后，感觉`buildConstraintViolationWithTemplate`这个keyword可以作为这个漏洞的根源，因为从调用栈可以看出这个函数的调用处于Nexus包与hibernate-validator包的分界，并且计算器的弹出也是在它之后进入hibernate-validator的处理流程，即`buildConstraintViolationWithTemplate(xxx).addConstraintViolation()`，最终在hibernate-validator包中的ElTermResolver中通过`valueExpression.getValue(context)`完成了表达式的执行，与@r00t4dm师傅也说到了这个：
于是反编译了Nexus3所有jar包，然后搜索这个关键词（使用的修复版本搜索，主要是看有没有遗漏的地方没修复；Nexue3有开源部分代码，也可以直接在源码搜索）：
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\com\sonatype\nexus\plugins\nexus-healthcheck-base\3.21.2-03\nexus-healthcheck-base-3.21.2-03\com\sonatype\nexus\clm\validator\ClmAuthenticationValidator.java:
       26           return this.validate(ClmAuthenticationType.valueOf(iqConnectionXo.getAuthenticationType(), ClmAuthenticationType.USER), iqConnectionXo.getUsername(), iqConnectionXo.getPassword(), context);
       27        } else {
       28:          context.buildConstraintViolationWithTemplate("unsupported annotated object " + value).addConstraintViolation();
       29           return false;
       30        }
       ..
       35        case 1:
       36           if (StringUtils.isBlank(username)) {
       37:             context.buildConstraintViolationWithTemplate("User Authentication method requires the username to be set.").addPropertyNode("username").addConstraintViolation();
       38           }
       39  
       40           if (StringUtils.isBlank(password)) {
       41:             context.buildConstraintViolationWithTemplate("User Authentication method requires the password to be set.").addPropertyNode("password").addConstraintViolation();
       42           }
       43  
       ..
       52           }
       53  
       54:          context.buildConstraintViolationWithTemplate("To proceed with PKI Authentication, clear the username and password fields. Otherwise, please select User Authentication.").addPropertyNode("authenticationType").addConstraintViolation();
       55           return false;
       56        default:
       57:          context.buildConstraintViolationWithTemplate("unsupported authentication type " + authenticationType).addConstraintViolation();
       58           return false;
       59        }
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\hibernate\validator\hibernate-validator\6.1.0.Final\hibernate-validator-6.1.0.Final\org\hibernate\validator\internal\constraintvalidators\hv\ScriptAssertValidator.java:
    34        if (!validationResult && !this.reportOn.isEmpty()) {
    35           constraintValidatorContext.disableDefaultConstraintViolation();
    36:          constraintValidatorContext.buildConstraintViolationWithTemplate(this.message).addPropertyNode(this.reportOn).addConstraintViolation();
    37        }
    38  
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\hibernate\validator\hibernate-validator\6.1.0.Final\hibernate-validator-6.1.0.Final\org\hibernate\validator\internal\engine\constraintvalidation\ConstraintValidatorContextImpl.java:
       55     }
       56  
       57:    public ConstraintViolationBuilder buildConstraintViolationWithTemplate(String messageTemplate) {
       58        return new ConstraintValidatorContextImpl.ConstraintViolationBuilderImpl(messageTemplate, this.getCopyOfBasePath());
       59     }
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\sonatype\nexus\nexus-cleanup\3.21.0-02\nexus-cleanup-3.21.0-02\org\sonatype\nexus\cleanup\storage\config\CleanupPolicyAssetNamePatternValidator.java:
    18           } catch (RegexCriteriaValidator.InvalidExpressionException var4) {
    19              context.disableDefaultConstraintViolation();
    20:             context.buildConstraintViolationWithTemplate(var4.getMessage()).addConstraintViolation();
    21              return false;
    22           }
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\sonatype\nexus\nexus-cleanup\3.21.2-03\nexus-cleanup-3.21.2-03\org\sonatype\nexus\cleanup\storage\config\CleanupPolicyAssetNamePatternValidator.java:
       18           } catch (RegexCriteriaValidator.InvalidExpressionException var4) {
       19              context.disableDefaultConstraintViolation();
       20:             context.buildConstraintViolationWithTemplate(this.getEscapeHelper().stripJavaEl(var4.getMessage())).addConstraintViolation();
       21              return false;
       22           }
    F:\compare-file\nexus-3.21.2-03-win64\nexus-3.21.2-03\system\org\sonatype\nexus\nexus-scheduling\3.21.2-03\nexus-scheduling-3.21.2-03\org\sonatype\nexus\scheduling\constraints\CronExpressionValidator.java:
       29        } catch (IllegalArgumentException var4) {
       30           context.disableDefaultConstraintViolation();
       31:          context.buildConstraintViolationWithTemplate(this.getEscapeHelper().stripJavaEl(var4.getMessage())).addConstraintViolation();
       32           return false;
       33        }