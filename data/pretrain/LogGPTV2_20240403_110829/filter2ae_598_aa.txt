前几天，PortSwigger 发布了《2019年十大Web黑客技术》（[Top 10 Web Hacking Techniques of 2019](https://portswigger.net/research/top-10-web-hacking-techniques-of-2019)）。虽然这些上榜的技术非常有意思，并且很可能在小密圈内进行分享（如果没有的话，我也会在我的[博客](https://blog.zeddyu.info)上做进一步的学习和分享），但本文将不讨论这十项技术。相反，我们将探讨一个虽未上榜但仍十分有趣的技术——DOM Clobbering。

## 基础知识
根据 [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction) 的定义：
> 文档对象模型 (DOM, Document Object Model) 是一种针对 HTML 和 XML 文档的编程接口。它通过节点和对象来表示文档，使程序能够改变文档结构、样式及内容。DOM 将文档表现为一个面向对象的网页表示形式，可以通过如 JavaScript 这样的脚本语言进行修改。
>
> 无论是以浏览器窗口显示还是作为 HTML 源代码展示，一个网页都是一份相同的文档。DOM 提供了一种方式来操作这份文档。W3C DOM 和 WHATWG DOM 标准已被大多数现代浏览器所实现。然而，许多浏览器扩展了这些标准，因此在使用时需谨慎对待不同浏览器之间的差异性。

DOM 最初是在缺乏标准化的情况下开发出来的，导致了许多非标准行为的存在。为了保持向后兼容性，许多浏览器仍然支持这些非标准特性。早期版本的DOM（即DOM Level 0 & 1）只提供了有限的方法让JavaScript引用页面元素，例如`document.forms`这样的专用集合以及通过`Window`和`Document`对象上的`name`属性或`id`属性来访问元素。这种引用方式容易引起混淆，即使较新的规范试图解决这些问题，但由于需要保持兼容性，许多历史遗留的行为无法轻易更改。此外，不同的浏览器可能遵循不同的标准甚至没有遵循任何标准，这也给确保DOM的安全性带来了挑战。

由于DOM的非标准化特性，浏览器可能会为各种DOM元素添加`name`和`id`属性作为对文档或全局对象属性的引用。然而，这样做可能导致覆盖掉原有的`document`属性或全局变量，从而被用来劫持某些变量的内容。不同浏览器对此有不同的解析方式。除非另有说明，本文中的示例均基于 **Chrome 80.0.3987.116** 版本。

Dom Clobbering 是一种通过向页面注入HTML代码来操纵DOM并最终改变页面上JavaScript执行流程的技术。当直接进行XSS攻击不可行时，可以考虑使用DOM Clobbering方法。

## 简单示例
### 示例 1 - 创建
通过设置元素的`id`或`name`属性，可以在`document`或`window`对象下创建一个新的属性。

### 示例 2 - 覆盖
可以看到，通过插入带有特定`id`值的`<img>`标签，我们成功覆盖了`document.cookie`属性。

### 示例 3 - 多级覆盖
展示了如何通过多层覆盖机制替换掉`document.body.appendChild`方法。

## 攻击方法
既然我们可以利用这种方式创建或覆盖`document`或`window`对象下的某些属性，那么下一步是如何将这些属性转换为我们可以操控的形式。通常情况下，我们需要将其转换成字符串类型以便于进一步操作。

### toString 方法
利用以下代码片段可以帮助我们找到那些可以通过`toString`方法转换为字符串类型的元素：
```javascript
Object.getOwnPropertyNames(window)
.filter(p => p.match(/Element$/))
.map(p => window[p])
.filter(p => p && p.prototype && p.prototype.toString !== Object.prototype.toString);
```
此过程揭示了两种特别有用的元素类型：`HTMLAreaElement` 和 `HTMLAnchorElement`，它们都可以通过`href`属性转换为字符串。

### HTMLCollection
如果目标是构建类似于`x.y`形式的两层结构，则可以尝试利用`HTMLCollection`。这是一种特殊的“元素集合”类，在最新的DOM标准中有详细描述。尽管它是历史上遗留下来的一种数据结构，但在当前仍被广泛使用。值得注意的是，我们可以通过`collection[name]`的方式来访问集合内的元素。

### HTML 关系
除此之外，还可以利用HTML标签间的固有关系来构建更复杂的层级结构。例如，`form`标签与其内部的`button`、`input`等子元素之间就存在这种关联性。

### 自定义属性
最后，探索是否能够通过自定义属性而非`id`或`name`来进行类似的攻击也是一项有趣的实验。经过测试发现，只有少数几种属性可以直接被用作字符串值，比如`a`标签的`title`属性。而对于一些特殊用途的属性，如`username`和`password`，则需要采取间接的方式才能有效利用。

以上就是关于DOM Clobbering的基本介绍及其应用案例分析。希望对你有所帮助！