



1






1
1














()3
()3






















()5


()5
()5
()5
()5
3
3
()5
3






















-
-
-
-
-
-
-
-
-
























()5
()5
()5
3
3

()5






















-
-
-
-
-
-
-
-
-
Fig. 9
Section 3.2.1
Section 3.2.1 Sec. 3.4.2 Tab. 3
inject\.
inject\000
CNAME Direct CNAME Direct
Fig. 6
LDAP Eduroam libspf2













































2




















n/a
no SRV/TXT support
or does not apply

100%
99.6% 56.1%
1,328,146 1,283,447 1,279,573 1,279,835 1,273,710 1,279,100 45,596 51,049 82,589 88,864 1,322,529 1,322,203 745,599
1.3% 2.7% 3.6% 4.6% 99.6%
96.4%
96.6%
96.3%
95.9%
96.3%
: Vulnerable. 1: record converted to lower case. 2: NXDOMAIN/no response. 3: output was escaped. 5: Record is misinterpreted, injection is not cached.
∗: Uses system stub resolver by default but offers a builtin one.
Table 5: Forward-lookup test results for all groups of resolvers.
Test Base
1.1.1.1
Payload (Fig.9)
glibc
musl
dietlibc
uclibc
windows
netbsd
mac os x
go*
openjdk8*
node










/
2.2.2.2
@
3.3.3.3










 ()2








\.
5.5.5.5





()2
()2

()2
()2
\000 XSS SQL ANSI
8.8.8.8
4.4.4.4
7.7.7.7
6.6.6.6










()2



()3

()3 4

















()2




: Vulnerable. 2: output was escaped. 3: Zero-byte did not stop output.
4: Alternative XSS payload with " " instead of "/".
∗: Uses system stub resolver by default but offers a builtin-one.
Table 6: Reverse-lookup results for different stub resolvers.
the corresponding working groups within the IETF, which
we are initiated within our disclosure efforts. Nevertheless,
performing checks on DNS records is challenging: some ap-
plications, like SRV service discovery [38], require domain
names with characters that are not allowed in hostnames (e.g.,
underscore). Deﬁning a list of allowed characters so that le-
gitimate applications would still work but injection attacks
would be blocked should be further investigated and is not
straightforward. In particular, it is difﬁcult to foresee what
characters and formats will be needed by future applications,
hence a ‘too-restrictive’ list of allowed characters would make
DNS less transparent, possibly introducing obstacles in de-
ployment of new applications, or when adding new versions
or new features to existing applications. On the other hand,
leaving this completely transparent may lead to confusion
about what values a ﬁeld can actually have, and can even in-
troduce vulnerabilities – our work can be generalised to other
Internet protocols. We show that the decision to enable easy
future deployment of new applications by not restricting the
domain names to alphanumeric characters exposes to attacks.
Nevertheless, as an immediate protection against our at-