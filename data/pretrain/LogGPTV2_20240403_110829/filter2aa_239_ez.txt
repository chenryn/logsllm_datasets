        Content="Change Theme" />
也可以在代码中通过设置RequestedTheme属性来动态更改主题（代码文件
StylesAndResourcesUWP/ThemeDemoPage.xaml.cs）：
    private void OnChangeTheme(object sender, RoutedEventArgs e)
    {
      grid1.RequestedTheme = grid1.RequestedTheme == ElementTheme.Dark ?
        ElementTheme.Light: ElementTheme.Dark;
    }
  注意： 只有资源看起来与主题不同，使用ThemeResource标记扩展才有用。
如果资源应该与主题相同，就应继续使用StaticResource标记扩展。
30.7 模板
XAML 
Button控件可以包含任何内容，如简单的文本，还可以给按钮添加Canvas元
素，Canvas元素可以包含形状，也可以给按钮添加Grid或视频。然而，按钮还可以完成更
多的操作。使用基于模板的XAML控件，控件的外观及其功能在WPF中是完全分离的。虽
然按钮有默认的外观，但可以用模板完全定制其外观。
如表30-2所示，WPF和UWP应用程序提供了几个模板类型，它们派生自基类
Framework-Template。
表30-2
模板类型
说明
ControlTemplate
使用ControlTemplate可以指定控件的可视化结构，
重新设计其外观
ItemsPanelTemplate
对于ItemsControl，可以赋予一个
ItemsPanelTemplate，以指定其项的布局。每个
ItemsControl都有一个默认的ItemsPanelTemplate。
MenuItem使用WrapPanel, StatusBar使用DockPanel,
ListBox使用VirtualizingStackPanel
DataTemplate
DataTemplates非常适用于对象的图形表示。给列表
框指定样式时，默认情况下，列表框中的项根据
ToString（）方法的输出来显示。应用
DataTemplate，可以重写其操作，定义项的自定义
表示
HierarchicalDataTemplate
HierarchicalDataTemplate用于排列对象的树型结
构。这个控件支持HeaderedItemsControls，如
TreeViewItem和MenuItem。这个模板类只用于WPF
  注意： HierarchicalDataTemplate和TreeControl的讨论参见第34章。
30.7.1 控件模板
本章前面介绍了如何给控件的属性定义样式。如果设置控件的简单属性得不到需要的
外观，就可以修改Template属性。使用Template属性可以定制控件的整体外观。下面的例
子说明了定制按钮的过程，后面逐步地说明了列表框的定制，以便显示出改变的中间结
果。
Button类型的定制在一个单独的资源字典文件Styles.xaml中进行。这里定义了键名为
RoundedGelButton的样式。RoundedGelButton样式设置Background、Height、Foreground、
Margin和Template属性。Template属性是这个样式中最有趣的部分，它指定一个仅包含一
行一列的网格。
在这个单元格中，有一个名为GelBackground的椭圆。这个椭圆给笔触设置了一个线
性渐变画笔。包围矩形的笔触非常细，因为把StrokeThickness设置为0.5。
因为第二个椭圆GelShine比较小，其尺寸由Margin属性定义，所以在第一个椭圆内部
是可见的。因为其笔触是透明的，所以该椭圆没有边框。这个椭圆使用一个线性渐变填充
画笔，从部分透明的浅色变为完全透明，这使椭圆具有“亦真亦幻”的效果（代码文件
Templates[WPF | UWP]/Styles/ControlTemplates.xaml）。
从app.xaml文件中，引用资源字典，如下所示（代码文件
Template[WPF|UWP]/App.xaml）：
图30-14
图30-15
现在可以把Button控件关联到样式上。按钮的新外观
如图30-14所示，并使用代码文件Templates 
[WPF 
|
UWP]/StyledButtons.xaml。
按钮现在的外观完全不同，但按钮的内容未在图30-
14中显示出来。必须扩展前面创建的模板，以把按钮的内
容显示在新外观上。为此需要添加一个ContentPresenter。
ContentPresenter是控件内容的占位符，并定义了放置这些
内容的位置。这里把内容放在网格的第一行上，即Ellipse
元素所在的位置。ContentPresenter的Content属性定义了内
容的外观。把内容设置为TemplateBinding标记表达式。TemplateBinding绑定父模板，这里
是Button元素。{TemplateBinding Content}指定，Button控件的Content属性值应作为内容放
在占位符内。图30-15显示了带内容的按钮（代码文件Templates[WPF 
|
UWP]/Styles/ControlTemplates.xaml）：
  注意： TemplateBinding允许与模板交流控件定义的值。这不仅可以用于内
容，还可以用于颜色和笔触样式等。
现在这样一个样式化的按钮在屏幕上看起来很漂亮。但仍有一个问题：如果用鼠标单
击该按钮，或使鼠标滑过该按钮，则它不会有任何动作。这不是用户操作按钮时的一般情
况。解决方法如下：对于模板样式的按钮，必须给它指定可视化状态或触发器，使按钮在
响应鼠标移动和鼠标单击时有不同的外观。可视化状态也利用动画；因此本章后面讨论这
个变更。
然而，为了提前了解这一点，可以使用Visual Studio来创建一个按钮模板。不是完全
从头开始建立这样一个模板，而可以在XAML设计器或文档浏览器中选择一个按钮控件，
从上下文菜单中选择Edit Template。在这里，可以创建一个空的模板，或复制预定义的模
板。使用模板的一个副本来查看预定义的模板。创建一个样式资源的对话框参见图30-
16。在这里可以定义包含模板的资源是在文档、应用程序（用于多个页面和窗口）还是资
源字典中创建。对于之前样式化的按钮，资源字典ControlTemplates.xaml已经存在，示例
代码在该字典中创建资源。
图30-16
UWP和WPF应用程序的默认模板大不相同，因为这些技术使用不同的特性，其设计
也不同。以下代码片段显示了UWP应用程序中默认按钮模板的一些特殊之处。几个按钮
设置取自主题资源，如Background、Foreground和BorderBrush。他们在光明和黑暗主题中
是不同的。一些值，如Padding和HorizontalAlignment是固定的。创建一个自定义样式，就
可以改变这些（代码文件TemplatesUWP /Styles / ControlTemplates.xaml）：
控件模板由一个Grid网格和一个ContentPresenter组成，画笔和边界值使用
TemplateBinding限定。这样就可以用按钮控件直接定义这些值，来影响外观。
对于动态更改按钮，如果鼠标划过按钮，或按钮被按下，UWP应用程序的按钮模板
就会利用VisualStateManager。在这里，按钮的状态改为PointerOver、Pressed和Disabled
时，就定义关键帧动画。
在WPF中，默认按钮模板使用StaticResource和DynamicResource标记扩展，为画笔获
取资源，因为主题资源不可用。x.Static标记扩展访问类的静态成员，这里是
SystemColors.ControlTextBrush-Key。SystemColors类访问用户可以配置的资源，因此用户
可以部分地样式化外观。为了获得鼠标移动到按钮上的动态外观，或单击按钮时的动态外
观，可以使用属性触发器来改变外观（代码文件
TemplatesWPF/Styles/ControlTemplates.xaml）：