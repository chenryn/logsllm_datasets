### SECT CTF crypto Gsh 思路分享
@(思路)[AES-ECB][hash forge][高斯消元]
> 题目描述：  
>  About last night...  
>  Service: nc 178.128.171.133 3333 | nc crypto.sect.ctf.rocks 3333  
>  Download: gsh.tar.gz  
>  Author: grocid
* * *
这道题是[grocid](https://grocid.net/)出的，一直看着大佬的分享，在这谢谢大佬。  
**reddit.txt**
    Submitted 2 months ago by [deleted] to /r/infoleaks
    I tried to login... was able to get a shell, but as a restricted user.
    It seems horrendously badly configured. Which is what I would've expected. 
    Fortunately, I found a source code from an old unencrypted backup drive... 
    this one's particularly interesting...
        class AESHash(object):
            def __init__(self, key):
                self.bs = 16
                self.key = hashlib.sha256(key.encode()).digest()
            def _pkcs7pad(self, s, blksize=16):
                missing = abs(len(s) - (len(s) / blksize + 1) * blksize)
                return s + (chr(missing) * missing)
            def digest(self, user, password):
                cipher = AES.new(self.key, AES.MODE_ECB)
                q = 0
                data = self._pkcs7pad(user + password)
                for i in xrange(0, len(data), self.bs):
                    block = data[i:i + self.bs]
                    q ^= int(cipher.encrypt(block).encode("hex"), 0x10)
                return q
    Their authentication mechanism uses some weird keyed AES-based MAC -- I've 
    never seen anything like it before. I'd say it's insecure, but I don't know
    how to exploit it. Also, it's written in Python. Really? 
    Since the HMAC combines credentials in the following way... it's kind of
    moot to give it a try. I've learnt from one-oh-one that h(message | key) is 
    secure... I think.  Motherf... I'll give up; it's late and I need to go to 
    sleep... over and out. For now.
    -- JD
    The revolution will not be televised.
#### 信息搜集
> reddit上找了一通，没线索。那nc过去看看：
    root@bin:/mnt/hgfs/CTF# nc 178.128.171.133 3333
    Login (leave empty to create)
    user:  
    Creating new user
    user: 2
    password: 
    IO error: cannot write 2:b5bbe950b1f52310ec0f986f4aeacbbb to /etc/shadow.
    Logged in as 2
    $ ls
    -rw-r--r--    1 admin staff   27 Sep  5 19:31  flag.txt
    -rw-------    1 admin staff   27 Sep  5 19:31  invoice.xls
    $ cat flag.txt
    -[--->+--.[->+++++++.--.>-[--->+-.--[-->+++.-------.------------.[-->+---.[--->++---.++[->+++.+[-->++.[--->++---.++[->+++.[--->+---.>-[----->+.+.++[->++.-------------.+++++++.++++++.-----------.++++++.--------.+[-->++.-[->++-.---------------.[--->+++.--[->+++++.[----->+---.----.++++++++++.>-[----->+.>--[-->+++.
    $ cat /etc/shadow
    admin:8f643bbafa959617b12b591f3145e5c0
> [brainfuck](https://copy.sh/brainfuck/)
> 得到flag:SECT{th1s_1s_r34l_flag_1_Pr0mis3}.喵喵喵？提交是fake flag。
#### 分析
    class AESHash(object):
        def __init__(self, key):
            self.bs = 16
            self.key = hashlib.sha256(key.encode()).digest()
        def _pkcs7pad(self, s, blksize=16):
            missing = abs(len(s) - (len(s) / blksize + 1) * blksize)
            return s + (chr(missing) * missing)
        def digest(self, user, password):
            cipher = AES.new(self.key, AES.MODE_ECB)
            q = 0
            data = self._pkcs7pad(user + password)
            for i in xrange(0, len(data), self.bs):
                block = data[i:i + self.bs]
                q ^= int(cipher.encrypt(block).encode("hex"), 0x10)
            return q
题目提供了加密的oracle,可以任意_pkcs7pad(username+password)的AES-ECB
hash,我们的目的是伪造出hash为8f643bbafa959617b12b591f3145e5c0的一串字符。  
**密码是弱密码？**  
要不用rockyou.txt爆破试试？  
爆破了一段时间，主办方检测到了，，提示： **不必用admin登陆**  
AES-ECB, 我们能得到任意对plaintext-ciphertext.然后恢复出16byte的Key，目前计算能力还不可能,[参考](https://crypto.stackexchange.com/questions/30251/finding-key-of-aes-in-ecb-mode)  
那接着想...  
**q ^= int(cipher.encrypt(block).encode("hex"), 0x10)**  
我们可以得到一定长度(>=128)的list,则我们需要的 **8f643bbafa959617b12b591f3145e5c0**
一定在这个list的sublist的xor里,子串的空间远大于目标大小。
    In [15]: a = 0
    In [16]: b = 200
    In [17]: for i in range(1,200):