    public:
      RegisterStandardPasses(PassManagerBuilder::ExtensionPointTy Ty,
                             PassManagerBuilder::ExtensionFn Fn) {
        ExtensionID = PassManagerBuilder::addGlobalExtension(Ty, std::move(Fn));
      }
      ~RegisterStandardPasses() {
      ...
      }
    };
    ...
    /// PassManagerBuilder - This class is used to set up a standard optimization
    /// sequence for languages like C and C++, allowing some APIs to customize the
    /// pass sequence in various ways. A simple example of using it would be:
    ///
    ///  PassManagerBuilder Builder;
    ///  Builder.OptLevel = 2;
    ///  Builder.populateFunctionPassManager(FPM);
    ///  Builder.populateModulePassManager(MPM);
    ///
    /// In addition to setting up the basic passes, PassManagerBuilder allows
    /// frontends to vend a plugin API, where plugins are allowed to add extensions
    /// to the default pass manager.  They do this by specifying where in the pass
    /// pipeline they want to be added, along with a callback function that adds
    /// the pass(es).  For example, a plugin that wanted to add a loop optimization
    /// could do something like this:
    ///
    /// static void addMyLoopPass(const PMBuilder &Builder, PassManagerBase &PM) {
    ///   if (Builder.getOptLevel() > 2 && Builder.getOptSizeLevel() == 0)
    ///     PM.add(createMyAwesomePass());
    /// }
    ///   ...
    ///   Builder.addExtension(PassManagerBuilder::EP_LoopOptimizerEnd,
    ///                        addMyLoopPass);
    ///   ...
    class PassManagerBuilder {
    public:
      /// Extensions are passed to the builder itself (so they can see how it is
      /// configured) as well as the pass manager to add stuff to.
      typedef std::function
          ExtensionFn;
      typedef int GlobalExtensionID;
      enum ExtensionPointTy {
        /// EP_ModuleOptimizerEarly - This extension point allows adding passes
        /// just before the main module-level optimization passes.
        EP_ModuleOptimizerEarly,
        ...
        /// EP_EnabledOnOptLevel0 - This extension point allows adding passes that
        /// should not be disabled by O0 optimization level. The passes will be
        /// inserted after the inlining pass.
        EP_EnabledOnOptLevel0,
        ...
        }
        ...
        ...
      /// Adds an extension that will be used by all PassManagerBuilder instances.
      /// This is intended to be used by plugins, to register a set of
      /// optimisations to run automatically.
      ///
      /// \returns A global extension identifier that can be used to remove the
      /// extension.
      static GlobalExtensionID addGlobalExtension(ExtensionPointTy Ty,
                                                  ExtensionFn Fn);
        ...
      }
    ...
    ...
    /// PassManagerBase - An abstract interface to allow code to add passes to
    /// a pass manager without having to hard-code what kind of pass manager
    /// it is.
    class PassManagerBase {
    public:
      virtual ~PassManagerBase();
      /// Add a pass to the queue of passes to run.  This passes ownership of
      /// the Pass to the PassManager.  When the PassManager is destroyed, the pass
      /// will be destroyed as well, so there is no need to delete the pass.  This
      /// may even destroy the pass right away if it is found to be redundant. This
      /// implies that all passes MUST be allocated with 'new'.
      virtual void add(Pass *P) = 0;
    };
####  runOnModule
  * 通过getContext来获取LLVMContext，其保存了整个程序里分配的类型和常量信息。
  * 通过这个Context来获取type实例Int8Ty和Int32Ty 
    * Type是所有type类的一个超类。 **每个Value都有一个Type** ，所以这经常被用于寻找指定类型的Value。Type不能直接实例化，只能通过其子类实例化。某些基本类型(VoidType、LabelType、FloatType和DoubleType)有隐藏的子类。之所以隐藏它们，是因为除了Type类提供的功能之外，它们没有提供任何有用的功能，除了将它们与Type的其他子类区分开来之外。所有其他类型都是DerivedType的子类。Types可以被命名，但这不是必需的。一个给定Type在任何时候都只存在一个实例。这允许使用Type实例的地址相等来执行type相等。也就是说，给定两个Type*值，如果指针相同，则types相同。
  * 读取环境变量`AFL_INST_RATIO`给变量inst_ratio，其值默认为100，这个值代表一个插桩概率，本来应该每个分支都必定插桩，而这是一个随机的概率决定是否要在这个分支插桩。
  * 获取全局变量中指向共享内存的指针，以及上一个基础块的编号
    GlobalVariable *AFLMapPtr =
            new GlobalVariable(M, PointerType::get(Int8Ty, 0), false,
                                GlobalValue::ExternalLinkage, 0, "__afl_area_ptr");
    GlobalVariable *AFLPrevLoc = new GlobalVariable(
            M, Int32Ty, false, GlobalValue::ExternalLinkage, 0, "__afl_prev_loc",
            0, GlobalVariable::GeneralDynamicTLSModel, 0, false);
  * 遍历每个基本块，找到此基本块中适合插入instrument的位置，后续通过初始化IRBuilder的一个实例进行插入。 
        BasicBlock::iterator IP = BB.getFirstInsertionPt();
    IRBuilder<> IRB(&(*IP));
  * 随机创建一个当前基本块的编号，并通过插入load指令来获取前一个基本块的编号。 
        unsigned int cur_loc = AFL_R(MAP_SIZE);
    ConstantInt *CurLoc = ConstantInt::get(Int32Ty, cur_loc);
    LoadInst *PrevLoc = IRB.CreateLoad(AFLPrevLoc);
    PrevLoc->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
    Value *PrevLocCasted = IRB.CreateZExt(PrevLoc, IRB.getInt32Ty());
  * 通过插入load指令来获取共享内存的地址，并通过CreateGEP函数来获取共享内存里指定index的地址，这个index通过cur_loc和prev_loc取xor计算得到。 
        LoadInst *MapPtr = IRB.CreateLoad(AFLMapPtr);
    MapPtr->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
    Value *MapPtrIdx =
          IRB.CreateGEP(MapPtr, IRB.CreateXor(PrevLocCasted, CurLoc));
  * 通过插入load指令来读取对应index地址的值，并通过插入add指令来将其加一，然后通过创建store指令将新值写入，更新共享内存。 
        LoadInst *Counter = IRB.CreateLoad(MapPtrIdx);
    Counter->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
    Value *Incr = IRB.CreateAdd(Counter, ConstantInt::get(Int8Ty, 1));
    IRB.CreateStore(Incr, MapPtrIdx)
          ->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
  * 将当前cur_loc的值右移一位，然后通过插入store指令，更新`__afl_prev_loc`的值。 
        StoreInst *Store = IRB.CreateStore(ConstantInt::get(Int32Ty, cur_loc >> 1), AFLPrevLoc);
    Store->setMetadata(M.getMDKindID("nosanitize"), MDNode::get(C, None));
  * 总结  
总的来说就是通过遍历每个基本块，向其中插入实现了如下伪代码功能的instruction ir来进行插桩。
        cur_location = ; 
    shared_mem[cur_location ^ prev_location]++; 
    prev_location = cur_location >> 1;
看一个例子
  * 源程序
    #include 
    #include 
    #include 
    int main(int argc, char** argv) {
      char buf[8];
      if (read(0, buf, 8) < 1) {
        printf("Hum?\n");
        exit(1);
      }
      if (buf[0] == '0')
        printf("Looks like a zero to me!\n");
      else
        printf("A non-zero value? How quaint!\n");
      exit(0);
    }
  * 插桩前的ir
    ; ModuleID = 'nopt_test-instr.ll'
    source_filename = "test-instr.c"
    target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
    target triple = "x86_64-apple-macosx10.15.0"