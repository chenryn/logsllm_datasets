# 2021_DiceCTF_hashbrown 一道内核题目
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
一道内核题目的学习，虽然之前做过一些内核题目，但是本题还是有一些新的点要学习。
## 0x00 题目描述
Who doesn’t like hashbrowns? I like them so much that I wrote a driver named
after them! But apparently programming is hard and I might have made a
mistake…
Please note that the following measures are active (whether they are important
to the exploit process is up to you):
    CONFIG_SLAB_FREELIST_RANDOM=y
    CONFIG_SLAB=y
    CONFIG_FG_KASLR=y
SMAP, SMEP, and KPTI are enabled as well.
    nc hashbrown.dicec.tf 31337
Note: only one connection per IP is allowed, and there is a 10 minute wall-clock time limit from the moment you connect. Test locally!s
## 0x01 背景知识
#####  KPTI保护机制
题目描述中
    SMAP, SMEP, and KPTI are enabled as well.
其余的保护机制还是可以，这个之前没有怎么注意过
linux内核从4.15开始支持KPTI，windows上把这个叫KVA Shadow，原理类似。
这个保护机制的出处是CPU漏洞（Meltdown和Spectre，关于这个漏洞的细节暂时不多介绍，有很多介绍的blog，去年的华为XCTF也出过相关的题目），漏洞的原因是CPU猜测性的提前执行一些代码，让处理器开始执行通常会被阻止的指令（比如以用户态读取内核内存），并在权限检查发生前就将该指令执行完毕。
创建KAISER补丁集的奥地利格拉茨技术大学科学家们，正是发现可以通过对CPU虚拟内存系统的边信道攻击，抽取内核内存布局信息以挫败KASLR防护的那个团队。该团队提出，分隔内核与用户空间可防止此类信息泄露，而他们的研究正是这一轮KPTI补丁的灵感来源。
KPTI:
进程地址空间被分成了内核地址空间和用户地址空间，其中内核地址空间映射到了整个物理地址空间，而用户地址空间只能映射到指定的物理地址空间。内核地址空间和用户地址空间共用一个页全局目录表。为了彻底防止用户程序获取内核数据，可以令内核地址空间和用户地址空间使用两组页表集。
对于后面的利用过程，这个保护机制影响不大，想多了解的可以访问参考链接
#####  SLAB SLUB机制
题目描述中
    CONFIG_SLAB_FREELIST_RANDOM=y
    CONFIG_SLAB=y
之前对这个机制相对熟悉，最近放了，看几篇博客学习一下（本部分参考了下面的博客）
SLAB/SLUB/SLOB，slub分配器是slab分配器的进化版，而slob是一种精简的小内存分配算法。
SLAB 和 SLUB是内核内存管理机制的一部分
内核版本2.6以上默认使用的管理机制SLUB
slab alloctor可以理解为内存的分配器，可以管理内存页，SLAB是很多slab allocator的集合。
如果两次分配tasks struct结构，这两个对象对象来自同一个SLAB cache，因为具有同样的类型和大小
SLUB解决了一些SLAB的一些缺点，在SLAB中页的freelist指针指向第一个free obj ，free obj同样有freelist
ptr指向下一个free obj，如下图所示
可以使用cat /proc/slabinfo查看信息
相对于SLAB ， SLUB多了一个freelist metadata，通过篡改这个数据可以实现一个地址分配，所以本题算是多了保护措施
#####  FG-KASLR
题目描述中
    CONFIG_FG_KASLR=y
平时的时候做题大都是KASLR，这个FG-KALSR是在KALSR上面附加的随机化
KALSR就像是用户空间的ALSR，每次系统启动的时候，内核镜像装载的基地址是随机的。在KALSR的情况下，函数地址与内核加载的基地址偏移是固定的，我们可以泄露函数地址，然后利用偏移得到基地址。
但是在FG-KALSR下，部分函数与内核基地址之前的偏移在每次启动的时候是不一样的。FG-KALSR应用的函数具有一下特征：函数是用C语言写的；函数没有位于一些特定的段。指向内核数据和一些内核代码的函数地址与内核基地址之前的偏移是固定的
下面是之前看博客的时候，一些不被影响的量
KPTI trampoline `swapgs_restore_regs_and_return_to_usermode()` is unaffected.
The kernel symbol table `ksymtab` is unaffected.
之前出现过这个保护机制的题目
## 0x02 基本的操作
将所有下载的文件拖到虚拟机
对bzImage文件进行解压得到vmlinux
对文件系统进行解压
    cpio -idmv  /etc/passwd
    echo 'root:x:0:' > /etc/group
    chmod 644 /etc/passwd
    chmod 644 /etc/group
    adduser ctf --disabled-password 2>/dev/null
    chown -R root:root /
    chmod 700 -R /root
    chmod 600 -R /flag.txt
    chmod 700 -R /hashbrown.ko
    chown ctf:ctf /home/ctf
    chmod 777 /home/ctf
    chmod 755 /dev
    mount -t proc -o nodev,noexec,nosuid proc /proc
    mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
    mount -t devtmpfs -o nosuid,mode=0755 udev /dev
    mkdir -p /dev/pts
    mkdir -p /var/lock
    mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true
    ln -sf /proc/mounts /etc/mtab
    echo 1 > /proc/sys/kernel/kptr_restrict
    echo 1 > /proc/sys/kernel/dmesg_restrict
    echo 1 > /proc/sys/kernel/perf_event_paranoid
    insmod hashbrown.ko
    chmod 666 /dev/hashbrown
    echo "Boot took $(cut -d' ' -f1 /proc/uptime) seconds"
    cd /home/ctf
    setsid cttyhack setuidgid 1000 sh
    umount /proc
    umount /sys
    poweroff -d 1 -n -f
查看run.sh
    #!/bin/sh
    exec qemu-system-x86_64 \
        -m 128M \
        -nographic \
        -kernel "/app/bzImage" \
        -append "console=ttyS0 loglevel=3 oops=panic panic=-1 pti=on kaslr" \
        -no-reboot \
        -cpu qemu64,+smep,+smap \
        -monitor /dev/null \
        -initrd "/app/initramfs.cpio" \
        -smp 2 \
        -smp cores=2 \
        -smp threads=1
注意到kaslr smep smap
smp 2可能存在竞争
还有 -kernel 和 -initrd文件的位置要修改
## 0x03 题目的分析
根据题目的意思，漏洞应该是出现在hash_brown驱动上，而且这个源码也已经下发了下面就是对源码的分析了
首先贴一下源码
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define DEVICE_NAME "hashbrown"
    #define CLASS_NAME  "hashbrown"
    MODULE_AUTHOR("FizzBuzz101");
    MODULE_DESCRIPTION("Here's a hashbrown for everyone!");
    MODULE_LICENSE("GPL");
    #define ADD_KEY 0x1337
    #define DELETE_KEY 0x1338
    #define UPDATE_VALUE 0x1339
    #define DELETE_VALUE 0x133a
    #define GET_VALUE 0x133b
    #define SIZE_ARR_START 0x10
    #define SIZE_ARR_MAX 0x200
    #define MAX_ENTRIES 0x400
    #define MAX_VALUE_SIZE 0xb0
    #define GET_THRESHOLD(size) size - (size >> 2)
    #define INVALID 1
    #define EXISTS 2
    #define NOT_EXISTS 3
    #define MAXED 4
    static DEFINE_MUTEX(operations_lock);
    static DEFINE_MUTEX(resize_lock);
    static long hashmap_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
    static int major;
    static struct class *hashbrown_class  = NULL;
    static struct device *hashbrown_device = NULL;
    static struct file_operations hashbrown_fops = {.unlocked_ioctl = hashmap_ioctl};
    typedef struct 
    {
        uint32_t key;
        uint32_t size;
        char *src;
        char *dest;
    }request_t;
    struct hash_entry
    {
        uint32_t key;
        uint32_t size;
        char *value;
        struct hash_entry *next;
    };
    typedef struct hash_entry hash_entry;
    typedef struct
    {
        uint32_t size;
        uint32_t threshold;
        uint32_t entry_count;
        hash_entry **buckets;
    }hashmap_t;
    hashmap_t hashmap;
    static noinline uint32_t get_hash_idx(uint32_t key, uint32_t size);
    static noinline long resize(request_t *arg);
    static noinline void resize_add(uint32_t idx, hash_entry *entry, hash_entry **new_buckets);
    static noinline void resize_clean_old(void);
    static noinline long add_key(uint32_t idx, uint32_t key, uint32_t size, char *src);
    static noinline long delete_key(uint32_t idx, uint32_t key);
    static noinline long update_value(uint32_t idx, uint32_t key, uint32_t size, char *src);
    static noinline long delete_value(uint32_t idx, uint32_t key);
    static noinline long get_value(uint32_t idx, uint32_t key, uint32_t size, char *dest);
    #pragma GCC push_options
    #pragma GCC optimize ("O1")
    static long hashmap_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
    {
        long result;
        request_t request;
        uint32_t idx;
        if (cmd == ADD_KEY) 
        {
            if (hashmap.entry_count == hashmap.threshold && hashmap.size > 20) ^ (key >> 12);
        hash = key ^ (key >> 7) ^ (key >> 4);
        return hash & (size - 1);
    }
    static noinline void resize_add(uint32_t idx, hash_entry *entry, hash_entry **new_buckets)
    {
        if (!new_buckets[idx])
        {
            new_buckets[idx] = entry;
        }
        else
        {
            entry->next = new_buckets[idx];
            new_buckets[idx] = entry;
        }
    }
    static noinline void resize_clean_old()
    {
        int i;
        hash_entry *traverse, *temp;    
        for (i = 0; i next;
                    kfree(temp);
                }
                hashmap.buckets[i] = NULL;
            }
        }   
        kfree(hashmap.buckets);
        hashmap.buckets = NULL;
        return;
    }
    static long resize(request_t *arg)
    {
        hash_entry **new_buckets, *temp_entry, *temp;
        request_t request;
        char *temp_data;
        uint32_t new_size, new_threshold, new_idx;
        int i, duplicate;
        if (copy_from_user((void *)&request, (void *)arg, sizeof(request_t)))//首先获取用户的arg
        {
            return INVALID;
        }
        if (request.size  MAX_VALUE_SIZE)
        {
            return INVALID;
        }
        new_size = hashmap.size * 2;
        new_threshold = GET_THRESHOLD(new_size);
        new_buckets = kzalloc(sizeof(hash_entry *) * new_size, GFP_KERNEL);
        if (!new_buckets)
        {
            return INVALID;
        }
        duplicate = 0;
        for (i = 0; i next)
                {
                    if (temp_entry->key == request.key)//
                    {
                        duplicate = 1;
                    }
                    new_idx = get_hash_idx(temp_entry->key, new_size);
                    temp = kzalloc(sizeof(hash_entry), GFP_KERNEL);
                    if (!temp) 
                    {
                        kfree(new_buckets);
                        return INVALID;
                    }
                    temp->key = temp_entry->key;