# PHP代码审计&2018-HITB-PHPLover
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前记
比赛的时候没能做出来，现在复现一下整个题目  
开头先放参考链接
    https://github.com/balsn/ctf_writeup/tree/master/20180411-hitbxctfqual#php-lover-bookgin--sces60107
## 代码结构
题目一共4个文件夹
    Controller
    Core
    templates
    uploads
其中Core中是类及方法定义  
Controller是控制器，只有一个index.php  
我们首先从这里突破
## 代码分析
大致几个功能如下
    public function login()
    public function register()
    public function add()
    public function view()
    public function edit()
    public function export()
## login
我们依次分析过去，首先是容易存在注入的登录和注册
    public function login(){
            if($this->user->islogin()){
                header("Location:/index.php");
                exit();
            }
            if(isset($_POST['username'])&&isset($_POST["password"])){
                $this->user->login($_POST['username'],$_POST['password']);
                if (!$this->user->islogin()){
                    //TODO！report it！
                    echo "error! Login failed!";
                }
                else{
                    echo "Login success!";
                }
            }
            else{
                include("templates/login.html");
            }
        }
看到登录调用User类的login方法，我们跟一下这个login()
    function login($username,$password){
            if(!is_string($username) or !$username or !filter($username)) return false;
            if(!preg_match('/^[a-zA-Z0-9_]+$/i',$username)) return false;
            $passhash=md5($password);
            if($r=$this->db->One("users",array("username" => "'$username'","password" => "'$passhash'"))){
                $_SESSION['user']=$r;
                $this->islogin=1;
                $this->id = $_SESSION['user'][0];
                $this->username = $_SESSION['user'][1];
                $this->nickname = $_SESSION['user'][2];
                $this->email = $_SESSION['user'][4];
                return true;
            }
            else
                return false;
        }
我们跟一下username的过滤filter()
    function filter($string){
        $preg="\b(benchmark\s*?\(.*\)|sleep\s*?\(.*\)|load_file\s*?\()|UNION.+?SELECT\s*(\(.+\)\s*|@{1,2}.+?\s*|\s+?.+?|(`|'|").*?(`|'|")\s*)|UPDATE\s*(\(.+\)\s*|@{1,2}.+?\s*|\s+?.+?|(`|'|").*?(`|'|")\s*)SET|INSERT\s+INTO.+?VALUES|(SELECT|DELETE)@{0,2}(\(.+\)|\s+?.+?\s+?|(`|'|").*?(`|'|"))FROM(\{.+\}|\(.+\)|\s+?.+?|(`|'|").*?(`|'|"))|(CREATE|ALTER|DROP|TRUNCATE)\s+(TABLE|DATABASE)";
        if(preg_match("/".$preg."/is",$string)){
            die('hacker');
        }
        return true;
    }
发现正则过滤大量关键词，但是不难发现一个关键点
    b
正则开头有一个b  
我们查阅一下资料
    b Any word boundary character
其功能是用来匹配单词  
举个例子，官方给出这样的比较
前者输出`A match was found.`  
后者输出`A match was not found.`  
原因很简单，`b`表示的为单词边界，而不是通配，并不是`*web*`这种，所以只有web才可以满足  
像是
    webing
    conwebing
都无法匹配  
所以这就带来了问题  
例如我们测试
    select * from users
    select * from/**/users
测试过滤代码如下
很明显前者打印`hacker`  
而后者Bypass过滤  
与此同时`/**/`可以作为空格注入，达到一举两得的目的  
虽然bypass了filter()，接下来还有新的过滤
    if(!preg_match('/^[a-zA-Z0-9_]+$/i',$username))
这里显然封杀了我们的
    /**/
所以可见Login这条路不通，我们接着看注册
## register
直接看注册代码
       public function register(){
            if($this->user->islogin()){
                header("Location:/index.php");
                exit();
            }
            if(isset($_POST['username']) and isset($_POST['nickname']) and isset($_POST['password']) and isset($_POST['email']))
            {
                if($this->user->register($_POST['username'],$_POST['nickname'],$_POST['password'],$_POST['email'])===false){
                        //TODO！report it！
                        echo "error! Register failed!";
                }
                else{
                    echo "Register success!";
                }
            }
            else{
                include("templates/register.html");
            }
        }
同样跟进register()方法
    function register($username,$nickname,$password,$email){
            if(!is_string($username) or !$username or !filter($username)) return false;
            if(!is_string($nickname) or !$nickname or !filter($nickname)) return false;
            if(!is_string($password) or !$password) return false;
            if(!is_string($email) or !$email or !filter($email)) return false;
            if(!preg_match('/^[a-zA-Z0-9_]+$/i',$username)) return false;
            if(!preg_match('/^[a-zA-Z0-9_]+$/i',$nickname)) return false;
            if(!preg_match('/^(([^<>()[]\.,;:s@"]+(.[^<>()[]\.,;:s@"]+)*)|(["].+["]))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$/i',$email)) return false;
            if ($this->db->One("users",array("username" => "'$username'"))) return false;
            $email=daddslashes($email);
            $passhash=md5($password);
            return $this->db->Insert("users",array("'$username'","'$nickname'","'$passhash'","'$email'"));
        }
我们可以看到关键过滤
    if(!is_string($email) or !$email or !filter($email)) return false;
    if(!preg_match('/^[a-zA-Z0-9_]+$/i',$username)) return false;
    if(!preg_match('/^[a-zA-Z0-9_]+$/i',$nickname)) return false;
    if(!preg_match('/^(([^<>()[]\.,;:s@"]+(.[^<>()[]\.,;:s@"]+)*)|(["].+["]))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$/i',$email)) return false;
这里容易发现
    $username
    $nickname
已经被封死  
但是email似乎还有存活的空间  
首先我们可以bypass filter()  
然后是下面的正则匹配
    if(!preg_match('/^(([^<>()[]\.,;:s@"]+(.[^<>()[]\.,;:s@"]+)*)|(["].+["]))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$/i',$email)) return false;
我们看看是否能够bypass  
当然这么长的正则，直接看很难受，我们拆分看看
    (([^<>()[]\.,;:s@"]+(.[^<>()[]\.,;:s@"]+)*)|(["].+["]))
    @
    (([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))
首先可以大致拆成以@为截断的两部分  
我们先对第一段拆分分析
    (
        (
            [^<>()[]\.,;:s@"]
            +
            (.[^<>()[]\.,;:s@"]+)
        *)
        |
        (["].+["])
    )
这里不难发现后者
     (["].+["])
存在问题  
只需要
    ""
一对双引号包围即可，引号中间可以随意写入  
我们测试
发现可以不被限制  
我们再看后半部分,  
(实际上可以不看了，因为前面可以引入`#`,可以直接注释后面的内容)  
将其拆分
    (
        ([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])
        |
        (([a-zA-Z-0-9]+.)+[a-zA-Z]{2,})
    )
可以看到这里就比较中规中矩了  
我们简单使用
    skysec.top
即可  
这里我们测试一下刚才的payload
    "' and 1=1#'"@skysec.top
测试代码
    ()[]\.,;:s@"]+(.[^<>()[]\.,;:s@"]+)*)|(["].+["]))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$/i',$email))
    {
        echo 'fuck';
    }
     ?>
发现成功bypass  
再回到代码
    $email=daddslashes($email);
我们跟进一下daddslashes()
    function daddslashes($string)
    {
        if (is_array($string)) {
            $keys = array_keys($string);
            foreach ($keys as $key) {
                $val = $string[$key];
                unset($string[$key]);
                $string[addslashes($key)] = daddslashes($val);
            }
        } else {
            $string =addslashes(trim($string));
        }
        return $string;
    }
发现这里梦想破灭，”都会被转义  
我们测试
    function daddslashes($string)
    {
        if (is_array($string)) {
            $keys = array_keys($string);
            foreach ($keys as $key) {
                $val = $string[$key];
                unset($string[$key]);
                $string[addslashes($key)] = daddslashes($val);
            }
        } else {
            $string =addslashes(trim($string));
        }
        return $string;
    }
    $email = '"' and 1=1#'"@skysec.top';
    if(!preg_match('/^(([^<>()[]\.,;:s@"]+(.[^<>()[]\.,;:s@"]+)*)|(["].+["]))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$/i',$email))
    {
        echo 'fuck';
    }
    echo $email."n";
    echo daddslashes($email);
发现打印结果
    "' and 1=1#'"@skysec.top
    "' and 1=1#'"@skysec.top
好吧，注册这里的直接注入也行不通了，我们先把这个放一放
## add/view
直接看代码
    public function add(){
            if(isset($_POST['title'])&&isset($_POST['content'])&&$_POST['content']&&$_POST['title']){
                if(is_string($_POST['title']) && is_string($_POST['content'])){
                    if($this->user->add($_POST['title'],$_POST['content'])){
                        header("Location:/index.php/view/");
                        exit();