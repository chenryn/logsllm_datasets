screenshots and noted that our state detection method had a 3% false
positive rate. After the revocation process, only 68 RPs showed a
logout behavior. By comparing these RPs with our extended group,
we found that in 60 RPs the logout behavior was caused by cookie
expiration and only 8 RPs actually exhibited the logged out behavior
due to access revocation. We also note that 318 RPs continued
accepting cookies 10 days after revocation. As discussed in §IV-A,
RPs can use the official SDK to regularly check the access token’s
validity and, thus, get notified of invalidated tokens. By comparing
SDK results, we note that 196 (41%) RPs initialized the SDK (i.e.,
called fbAsyncInit()), but none of them correctly logged out
after access revocation. Three of the RPs that correctly logged out in-
cluded the SDK and two of them initialized it. This shows that while
RPs that use the SDK are in a better position for getting notified of
invalid access tokens, taking the appropriate actions in response to
access revocation is still their responsibility, yet is mostly ignored.
Takeaway 4: Only 1.7% of RPs logged out the user in response
to IdP access revocation and 67% of the RPs continued to allow
access to the accounts even 10 days past the revocation. Use of
Facebook’s SDK does not correlate with correct logout behavior.
Cookie expiration. We note that short-lived cookies can have
a mitigating effect despite a lack of other defensive actions when
access revocation occurs (although, this is not a complete and robust
solution). Our goal here is to quantify how RP cookies expiration
can impact account access over time. We use the collected data
from the second experiment to analyze the impact of cookie
expiration over a period of 40 days. We identified 1,092 RPs that
set cookies after authentication. For each cookie, we calculate the
time difference between the expiration timestamp and the login
timestamp (which was recorded when we logged in). In cases
where the cookies had already expired (e.g., they have negative
values or already expired in the past) we replace the expiration
date with a value of 0. To better represent the data, we calculate the
minimum and median expiration dates of all the cookies for each
RP and use the median as the main reference value. Based on our
observation, the median value offers a less skewed representation
than the average, particularly due to cookies that may expire many
years in the future. Since we aim to study the impact of cookies
on account access, we only consider the 424 RPs in which cookies
made a detectable state change after login completed.
We acknowledge that not all cookies are required for authentica-
tion; however, by comparing cookie expiration with the state-change
results, we can study the correlation between the time of expiration
and account access. To better understand the impact of cookie expira-
tion, we first identify RP’s actual behavior using our state-detection
method and verify through manual inspection. Our goal is to study
whether there is a correlation between cookie expiration values and
how RPs handle users’ sessions. Next, we separate our dataset into
RPs that prematurely rejected cookies that are yet to expire (based
on the median value) and RPs whose cookie acceptance or rejection
behaviors are aligned with their median expected expiration. We
identified 127 RPs (57% of the overall RPs that rejected cookies in
under 40 days) that prematurely reject cookies. Figure 7 illustrates
the CDF for the cookie expiration time in days. The left figure
provides a comparison between the median expected expiration and
actual expiration after which cookies do not provide access to the
accounts. The median expiration timestamps are calculated for each
RP whereas the actual expiration is measured and verified using our
state-detection method over 40 days. The left diagram represents
RPs that rejected their cookies before reaching the median expiration
timestamp. The right diagram displays the median expected expira-
tion for RPs that accepted cookies before reaching median expiration
date, or rejected cookies after reaching their median expiration date.
This figure shows that most RPs set cookies that expire instantly or in
a short amount of time. The left diagram in Figure 8 shows the actual
expiration over 40 days. The RPs that rejected the cookies are notice-
ably higher two weeks and one month after login. The right diagram
in Figure 8 shows a comparison of rejection due to cookies expiration
(black) and rejection after revocation (red) for the same RPs; the num-
ber of RPs that reject after revocation is higher on the first day and
2 days after. As discussed in §II-C, RPs that accept cookies 60 days
after the initial login are non-compliant. Our state-change data shows
that 179 RPs accepted cookies even after 70 days. We emphasize that
while our cookie expiration examination measured the correlation be-
tween cookie expiration and actual expiration to understand how RPs
set the expiration date, we use the actual expiration data collected
from SAAT’s state-detection module to identify non-compliant RPs.
Takeaway 5: 48% of RPs accepted cookies 40 days after the
initial login and 86% of those RPs were non-compliant and
continued to accept cookies even after 70 days.
1783
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 7: Actual vs. expected cookie expiration.
Fig. 8: Actual cookie expiration over 40 days (left). Comparison
of rejection due to cookie expiration and after revocation (right).
Server-side vs. client-side expiration. Enforcing the lifetime
of cookies falls into two categories: persistent and session cookies.
The lifetime of persistent cookies are specified by the Expires
or Max-Age attributes. Unlike persistent cookies, session cookies
don’t have explicit expiration dates and are expired and removed at
the end of the session. While the definition of a session’s end may
vary between browsers, they treat expired cookies as stale and won’t
include them in future requests. In this experiment, we investigate
whether websites correctly enforce a crucial session expiration
rule: regardless of the category, session expiration must be enforced
on the server-side [12]. To investigate this, we collect cookies
after authentication and send them to the RPs in two scenarios:
(i) with their original expiration dates and (ii) with expiration dates
set to 1 year in the future. If an RP responds differently to these
requests, it means that they rely on the browser to enforce session
expiration (client-side). We examined the collected daily screenshots
using our state-detection method and manual verification and
found 6 RPs including popular websites (masterclass.com,
yourstory.com, crowdrise.com), and less popular ones
(yet ranked above 20k) like freeart.com, carvana.com,
and webike.net that responded differently. All these websites
had cookies that had expired before we extended the expiration.
Interestingly, apart from freeart, the rest of the RPs used a
common method of setting the expiration date in the past and
hoping that the browser takes care of removing those cookies.
We note that the actual expiration time, when the server-side
session termination occurs, differs between these RPs. For instance,
masterclass accepted the modified cookies up to one month
after while webike and yourstory accepted the cookies up
to the last day of our data collection (i.e., for 70 days).
Session termination (Logout): We revisit the RPs from our re-
vocation experiment for which the presence of cookies changed their
state. Out of 382 correctly processed RPs, we were able to automati-
cally complete the logout process in 138. We proceeded with testing
how servers will treat the cookies in subsequent requests. Alarmingly,
40.5% of the RPs allowed us to access the account after logout.
Takeaway 6: Server-side session management and session
invalidation are not implemented consistently, as we found 6
RPs that relied on clients’ browsers to invalidate cookies, and
40.5% of the RPs did not invalidate cookies after logout.
GDPR Compliance. Under GDPR developers are required to
provide a method for users to request the deletion of their data. In
Facebook, developers can either provide a link with instructions
on how users can do that, or a Data Deletion Request Callback [41]
that Facebook pings when the users remove the app and request
1784
data deletion. Unlike the De-authorization Callback URL, the data
deletion URL can be collected from the app portal. We found that
only 15 Relying Parties have a deletion URL, i.e., if users request
data deletion after removing the RPs, only 15 RPs will get notified.
Nevertheless, we note that this does not mean the remaining RPs
do not accept data deletion requests directly from their website.
C. Account Merging
Methodology. Guided by our merging definition in §III-C, we
use two Facebook accounts (ASSO, BSSO) with distinct personal
information (Ainfo,Binfo) and emails (Aemail, Bemail) to perform
the account merging test. Our key assumption here is that RPs use
email addresses retrieved from the IdP, or received directly from
the sign up forms, to create a local notion of identity. In the first
test case, we create accounts with each RP using SSO (ASSO)
and later attempt to register an account using Aemail and Binfo. If
we detect an error message indicating the account already exists,
we count this event as a type-1 merge. In the second case, we
first register accounts using Ainfo and Bemail and later we sign
up with SSO (BSSO). We call this a type-2 merge if the process
results in an account with Ainfo. In both cases, our framework
detects if a specific RP violates the merging policy upon detecting
a pre-existing account, which can occur if the RP creates a separate
account or overwrites the account with new personal information.
To prepare for type-1 we logged into the RP accounts using SSO.
This is shown as transition δ(S0,Reg(SSO))=S1 in Figure 3. Next
we initiated type-2 by creating accounts using our automated account
registration module, denoted by transition δ(S0,Reg(Email))=S3.
After logging in with SSO (type-1), we created accounts using
credentials and then checked for errors. If the RP displayed an error
indicating the account already exists, we added the RP to the correct
merging group. For the RPs that we registered using credentials (type-
2), we proceeded with SSO login and searched for similar identifiers.
If detected (δ(δ(S0, Reg(Email)), Reg(SSO, EQ)) = S1),
we classified the RP as correctly merging the accounts.
In
identifiers,
(δ(δ(S0,Reg(Email)),Reg(SSO,NEQ))=S4), we flagged it as
non-merging. For both cases, we manually verified the results.
different
contrast,
if
we
detected
Type-1 results. According to our merge definition, RP accounts
created using SSO (ASSO) should show an error when there is an
attempt to create an account using (Aemail). We identified 118 RPs
that displayed an error indicating an account with (Aemail) already
exists. Among the successfully created accounts (50) we found 4 RPs
that did not correctly merge: surveymonkey, diffen, con-
npass, and pakwheels violated the merge policy and allowed
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
0100200300400500Days after login0%20%40%60%80%100%ProportionPrematurely RejectedActual expirationMedian expected expiration050010001500200025003000Days after loginCorrectly Accepted and Correctly RejectedMedian expected expiration0102030Days01020304050607080RP CountsActual expiration over time02468DaysRevocation vs. expirationExpired over timeRejected after revocationaccount creation. While not against policy, we note that 92y.org
merged the accounts but overwrote the name. The lack of account
merging can have security implications, as the attacker can cut off the
user’s access to the account until some demand is met (i.e., ransom-
style account takeover [6]). We provide an example in the Appendix.
Type-2 results. Using our account registration component, we
were able to successfully create accounts in 243 RPs using the tradi-
tional credential-based approach. Out of those, 115 have the identi-
fiers that are suitable for the merge test. On the other hand, out of the
1,223 RPs where we created an account over SSO, 354 displayed de-
tectable identifiers and were suitable for this test. We note that not all
RPs from the first dataset were also found in the second dataset. For
instance, accounts could be registered correctly but when we tried to
log in with SSO we encountered app errors (§IV-A), or at the time of
this experiment SSO support had been dropped. In total, we had 34
RPs shared between the two datasets. By comparing the identifiers,
we identified 30 RPs that correctly merged the accounts and 4 RPs
that violated the merge policy: our manual investigation showed that
while diffen uses email address during the registration it relies
on the username, and pakwheels does not use the email address
when SSO is used. However, in the case of surveymonkey and
gifyu, our experiment resulted in two accounts that share the same
email address but have different account information.
Takeaway 7: 11% of the RPs violated the merging guidelines
when SSO is used with preexisting accounts, and 10% violated
them when the initial account creation was done over SSO.
D. Cross-IdP Generalizability
Next, we explore how the SAAT auditing workflow generalizes
across IdPs supported by a given RP and are not tied to the implemen-
tation of a specific IdP (i.e., Facebook). To that end, we conduct a
series of experiments in a subset of the RPs from our previous experi-
ments that also support Google or Apple as IdPs. These IdPs support
the universal features requisite for automation using the IDPCon-
troller module (discussed in§III-B) and are thus amenable to SAAT’s
auditing workflow. As such, while there are no technical barriers to
incorporating additional IdPs into our automated implementation, the
additional engineering effort required to develop the appropriate IDP-
Controller modules for Google and Apple is outside the scope of our
work. As such, we resort to a manual process that exactly replicates
the steps followed by our system’s automated workflow, allowing us
to explore the generalizability of our findings across different IdPs.
First, we created a Google and an Apple account with new
email addresses (emailApple and emailGoogle), to ensure that an
experiment with one IdP will not affect another IdP’s experiment. We
selected a subset of RPs from our previous experiments that also sup-
port Google and/or Apple in addition to Facebook, and verified that
their SSO procedure is error free (e.g., they are not in development
mode). The RPs were selected randomly to eliminate the potential
rank bias in the samples. We selected 50 RPs for Google and 50 for
Apple, while allowing partial overlap between the two sets so as to
obtain additional evidence for certain RPs that their behavior remains
consistent across all three IdPs. In total, we conduct 100 sets of
comparative experiments across 91 unique RPs. We omit the cookie
expiration measurements and session termination (i.e., logout) exper-
iments as they are RP-wide and not tied to an IdP’s implementation.
First, we examined whether using Apple or Google as the IdP
would produce a different account merging behavior than when using
Facebook’s SSO implementation. We used two separate browsers, in
one browser we logged into each RP using Apple’s SSO, and then we
attempted to create an account using emailApple. We note that while
Apple allows users to hide their real email by sending a randomly
generated email to the RPs, we did not select this option and opted
to share the real email address to mimic the process followed for
Facebook. Our findings showed that all of the RPs tested with
Apple’s SSO produced the same merging behavior (since none of the
problematic RPs supported Apple, all 50 RPs we tested had correct
merging behavior). Interestingly, we performed the same experiment
for Google and found one RP (pakwheels.com) exhibiting a
different merging behavior: using Google’s SSO and creating an
account with emailGoogle resulted in correctly creating one account
whereas the same process using Facebook’s SSO incorrectly resulted
in two separate accounts (Section IV-C). When creating an ac-
count with Google’s SSO pakwheels.com sets the user’s email
address to emailGoogle, while with Facebook it does not despite
requesting access to the email address. Next, we used the same subset
of RPs to compare the effect of access revocation across different
IdPs. We began by logging into each RP over SSO and then removed
the app (i.e., revoked app’s access) from within Apple or Google. We
then checked whether revoking access impacted the RP’s state and
compared to the Facebook results. Unsurprisingly, regardless of the
IdP, all results remained consistent. Overall, our comparative analysis
showed consistent results when using Google or Apple instead of
Facebook in 99% of the cases. This strongly suggests that the flaws
uncovered by our system and the overall takeaways of our study are
predominantly IdP-agnostic. Nonetheless, we consider larger-scale
experimental verification using SAAT an interesting future direction.
V. COUNTERMEASURES
Our experiments reveal a series of flaws, misconfigurations, and
non-compliance in RPs. In practice, developers can use the official
SSO SDKs and also leverage online guides that detail how to cor-
rectly implement session and account management processes (e.g.,
the extensive OWASP cheat sheets [12]). However, RPs may lack
the incentives or the technical know-how for addressing these flaws.
Thus, we propose two additional strategies for better protecting users.
Transparency report. Our framework can be utilized as a
continuous testing framework for generating transparency reports
that shed light on RPs’ bad practices. We built our framework to
be as general as possible to support different SSO implementations.
While our main focus was on Facebook, the auditing workflows
remain the same for other IdPs. As discussed in previous sections, the
SSO ecosystem is highly volatile and any policy checks should be
performed over time, therefore proposals that focus on auditing RPs
during registration are not sufficient. By leveraging our framework,
IdPs can continuously audit RPs and either block problematic RPs
or, less intrusively, generate a transparency report that can be used in
extensions like the one we describe next, to warn users about RPs that
do not adhere to secure account and session management practices.
Browser extension. Complementary to our framework, we
have developed an extension that informs users visiting an RP about
some malpractices. We provide more details in the Appendix.
VI. DISCUSSION
Automated account registration. Drakonakis et al. [17]
implemented and released an automated account registration tool for
auditing authentication and authorization flows in web applications.
While account creation is only a subset of our system, the high-level
1785
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
non-SSO registration methods in both systems are quite similar, with
a few key differences that we will highlight here. In contrast to their
implementation, our system uses Puppeteer to control and automate
browser interaction. We chose Puppeteer instead of Selenium due to
Puppeteer’s improved performance, as well as other key features like
the ability to interact with Chrome’s DevTools Protocol (CDP), listen
on network events and modify requests (Selenium 4 introduced
support for CDP API, but it is still in alpha version at the time of
this writing). Additionally, Puppeteer provides more control over
when and how cookies are loaded/injected and stored, which is a
crucial part of our auditing framework. We also leverage Puppeteer’s
CDP API to obtain corresponding DOM nodes in the accessibility
tree which are not typically exposed (discussed in §III-B). Our
system also includes CAPTCHA-solving, which was one of the