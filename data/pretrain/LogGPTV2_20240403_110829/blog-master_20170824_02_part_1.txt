## Greenplum 空间(GIS)数据检索 b-tree & GiST 索引实践 - 阿里云HybridDB for PostgreSQL最佳实践  
### 作者        
digoal        
### 日期         
2017-08-24       
### 标签        
PostgreSQL , GIS , PostGIS , Greenplum , 空间检索 , GiST , B-Tree , geohash       
----                    
## 背景       
气象数据、地震数据、室内定位、室外定位、手机、车联网、还有我们最喜欢的“左划不喜欢、右划喜欢”，越来越多的位置属性的数据。将来会越来越多。  
基于GIS的数据分析、OLTP业务也越来越受到决策者的青睐，例如商场的选址决策，O2O的广告营销等。有很多基于多边形、时间、用户对象属性过滤的需求。  
阿里云HybridDB for PostgreSQL是一个支持GIS数据类型处理的MPP分布式数据库，支持海量的GIS数据的存储和分析处理。  
支持三种索引接口：  
bitmap  
btree  
gist  
三种索引的原理请参考  
[《PostgreSQL 9种索引的原理和应用场景》](../201706/20170627_01.md)    
在Greenplum中，GiST索引比较重（是R-Tree结构的空间索引），但是它支持几乎所有的空间搜索，但是overhead相比btree也更大一些：  
1、平面、三维、多维对象 几何相交、不相交、相邻。    
2、平面、三维、多维对象的方位判断（相交或严格在左边、右边、上边、下边），类似数值的大于、小于、大于等于、小于等于。    
3、平面、三维、多维对象 包含 另一个对象    
4、平面、三维、多维对象 等于 另一个对象    
5、平面、三维、多维对象 与另一个对象的（边、最近、中心点的）距离，按距离排序输出满足条件的行，输出距离在XX以内的行。    
PostgreSQL 比Greenplum支持的索引接口更多，比如BRIN是一个很好的块级索引，对于基于多边形的群体分析非常有效。但是Greenplum中没有BRIN。  
[《PostGIS空间索引(GiST、BRIN、R-Tree)选择、优化 - 阿里云RDS PostgreSQL最佳实践》](../201708/20170820_01.md)   
那么Greenplum中能否有类似BRIN块级索引的功能的，在阿里云HybridDB for PostgreSQL中是有这个功能的：  
[《解密上帝之手 - 阿里云HDB for PostgreSQL数据库metascan特性(存储级、块级、batch级过滤与数据编排)》](../201708/20170809_02.md)    
但是我们先来说说社区版本的Greenplum，能否用b-tree替代overhead更大的GiST？  
答案必须是肯定的。  
## 精度不是那么高的GEOHASH  
[《geohash vs PostGIS》](../201704/20170422_01.md)    
![pic](../201704/20170422_01_pic_003.jpg)  
geohash的精度随着它的位数变化，例如4位时，它是一个20公里大的BOX。（也就是说一个点，被模糊化为1个方圆20公里的BOX。够粗糙的，但是我们就要用这个粗糙来过滤数据。）  
## GEOHASH B-Tree一重过滤  
使用geohash一重过滤，得到一个大范围的BOX内的数据。  
由于GEOHASH是text类型，支持b-tree索引。  
当POINT在某个范围(box)内时，它的prefix会和这个box的prefix重叠。  
```  
查询某些纵横20公里内的点。  
select * from table where st_geohash(pos,15) ~ '^abcd';  
```  
## st_distancespheroid二重过滤  
一重过滤会得到一个较大范围，例如我们要查询5公里内的人群，实际上返回的是20公里内的人群。  
二重过滤，使用距离函数，计算真实的距离，过滤不符合条件的记录。  
```  
Name  
ST_DistanceSpheroid — Returns the minimum distance between two lon/lat geometries given a particular spheroid. PostGIS versions prior to 1.5 only support points.  
Synopsis  
float ST_DistanceSpheroid(geometry geomlonlatA, geometry geomlonlatB, spheroid measurement_spheroid);  
```  
## 性能评测  
1、建表，存储geometry类型的POINT  
```  
postgres=# create unlogged table test(id int, pos geometry);  
CREATE TABLE  
```  
2、写入5000万测试数据  
```  
postgres=# insert into test select generate_series(1,50000000), st_setsrid(st_makepoint(random()*360-180, random()*180-90), 4326) ;  
```  
3、创建geohash表达式索引  
```  
create index idx_test_pos on test using btree(st_geohash(pos, 11));  
```  
4、查询ST_Point(100,90)方圆5公里内的点，我们需要采用4位精度（一重过滤收缩到20公里）。  
postgresql 语法：  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers)   
select *,  
ST_DistanceSpheroid(pos,ST_SetSRID(ST_Point(100,90),4326),'SPHEROID["WGS84",6378137,298.257223563]')   
from test  
where st_geohash(pos,11) ~ ('^'||st_geohash(st_setsrid(st_makepoint(100,90),4326), 4)) ;  
                                                                             QUERY PLAN                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Index Scan using idx_test_pos on public.test  (cost=0.56..2532.74 rows=5000 width=44) (actual time=0.224..7.279 rows=46 loops=1)  
   Output: id, pos, st_distancespheroid(pos, '0101000020E610000000000000000059400000000000805640'::geometry, 'SPHEROID("WGS84",6378137,298.257223562997)'::spheroid)  
   Index Cond: ((st_geohash(test.pos, 11) >= 'ypzp'::text) AND (st_geohash(test.pos, 11) = 'ypzp'::text) AND (st_geohash(test.pos, 11) = st_geohash(st_setsrid(st_makepoint(100,90),4326), 4)  
and   
st_geohash(pos,11) <   
substring(st_geohash(st_setsrid(st_makepoint(100,90),4326), 4),1, length(st_geohash(st_setsrid(st_makepoint(100,90),4326), 4))-1 )  