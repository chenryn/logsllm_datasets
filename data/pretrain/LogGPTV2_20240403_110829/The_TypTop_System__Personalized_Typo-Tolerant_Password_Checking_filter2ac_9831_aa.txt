title:The TypTop System: Personalized Typo-Tolerant Password Checking
author:Rahul Chatterjee and
Joanne Woodage and
Yuval Pnueli and
Anusha Chowdhury and
Thomas Ristenpart
The TypTop System:
Personalized Typo-Tolerant Password Checking∗
Rahul Chatterjee1,2, Joanne Woodage3, Yuval Pnueli4, Anusha Chowdhury1, Thomas Ristenpart2
1 Cornell University
2 Cornell Tech 3 Royal Holloway, University of London 4 Technion – Israel Institute of Technology
ABSTRACT
Password checking systems traditionally allow login only if the cor-
rect password is submitted. Recent work on typo-tolerant password
checking suggests that usability can be improved, with negligible
security loss, by allowing a small number of typographical errors.
Existing systems, however, can only correct a handful of errors,
such as accidentally leaving caps lock on or incorrect capitalization
of the first letter in a password. This leaves out numerous kinds of
typos made by users, such as transposition errors, substitutions, or
capitalization errors elsewhere in a password. Some users therefore
receive no benefit from existing typo-tolerance mechanisms.
We introduce personalized typo-tolerant password checking. In
our approach, the authentication system learns over time the typos
made by a specific user. In experiments using Mechanical Turk,
we show that 45% of users would benefit from personalization. We
therefore design a system, called TypTop, that securely implements
personalized typo-tolerance. Underlying TypTop is a new stateful
password-based encryption scheme that can be used to store recent
failed login attempts. Our formal analysis shows that security in
the face of an attacker that obtains the state of the system reduces
to the difficulty of a brute-force dictionary attack against the real
password. We implement TypTop for Linux and Mac OS login and
report on a proof-of-concept deployment.
1 INTRODUCTION
Passwords remain the predominant means of authenticating users
on both computers and the web — however studies show that users
persistently pick weak passwords [6, 12, 34]. This phenomena is
often ascribed to users selecting easy-to-remember passwords; how-
ever a number of studies [17, 18, 32] highlight that strong passwords
are also more difficult to type. To increase password usability, some
companies [2, 25, 28] allow authentication under a small set of com-
mon typos. For example, Facebook permits capitalization errors in
the first letter or accidental caps lock errors.
Motivated by this, Chatterjee et al. [8] recently initiated the
academic investigation of typo-tolerant password checking. In a
24-hour study at Dropbox, they found that a small set of easy-to-
correct typos accounted for over 9.3% of failed login attempts, and
3% of the total users turned away — underscoring the burden that
typos represent to both users and the companies that ultimately
lose out on user engagement due to them. To increase usability, the
authors advocate an approach they call ‘relaxed checking’. They
establish a handful of the most frequently occurring typos across
a user population, and build corrector functions to rectify those
∗This is the full version of the paper published in CCS ’17
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
2017. ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134000
particular typos on behalf of the user at the time of authentication
(e.g., flipping the case of all letters to correct a caps lock error).
The authors show empirically that for a carefully selected set of
correctors, the resulting security degradation is minimal.
A limitation of this approach is that checking each correction
requires applying a computationally intensive password hashing
algorithm; as such the number of typos one may correct is inher-
ently limited by performance constraints. While correcting the five
most prevalent typos accounts for 20% of typos made by users [8],
this still leaves the majority of password typos uncorrectable. Indi-
vidual users may be totally neglected, should they frequently make
a typo that is rare across the broader population of users. Users
who choose complex, strong passwords are likely to fall into this
neglected group.
We introduce a new approach to password checking: person-
alized typo-tolerance. In such a system, the password checking
mechanism learns the typos commonly made by each user over
time, storing them in a secure manner. After learning frequent ty-
pos, the system can check to see if a submitted password is either
the one originally registered, or one of the learned variants. By
tailoring typo-tolerance to the individual user, we aim to correct
a larger set of typos than previously possible, while maintaining
strong security guarantees.
Building a personalized typo-tolerant checking system requires
care. The system should not begin accepting arbitrary incorrect
passwords that are submitted — indeed this would enable poten-
tially malicious users to register arbitrary passwords which allow
access to an account. Therefore we need a policy dictating the
types of errors that can be added to a cache of allowed typos, and
a mechanism to enforce it. We must consider security in the face
of remote guessing attacks as well as compromise of password
databases, both being threats that frequently arise in practice. This
rules out simple schemes in which recent incorrect submissions
are simply stored in the clear. Ideally, a scheme would be as secure
as a conventional password-based checking system, meaning an
attacker must perform as much work to compromise an account as
they would have had there been no typo-tolerance.
We overcome these challenges and design a secure personal-
ized typo-tolerant password checking system that we call TypTop.
At a high level, the system works as follows. It maintains a set
of allowed hashes, corresponding to the registered password and
allowed typos of it. The user can successfully login by submitting
either the password or an allowed typo. Initially, this set contains
only the salted hashes of the registered password and some typos
of that password that are considered likely across the population
of all users. To personalize, TypTop adapts this set of typos over
time by securely storing incorrect submissions encrypted under a
public-key for which the associated secret key is, itself, encrypted
under the registered password and previously allowed typos. Upon
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
Chatterjee et al.
a subsequent successful login, the recent incorrect submissions can
be decrypted and checked to see if they satisfy the policy regarding
typos. If so, new salted hashes of the incorrect submissions, now
considered as legitimate typos, can be added to the set of allowed
hashes. To ensure the set does not grow too large, less frequently
observed typos can be evicted. Future login attempts that make one
of the frequent typos will be allowed, thereby avoiding the need
for the user to retype their password.
Underlying TypTop is therefore a new kind of stateful password-
based encryption scheme that ensures the plaintext state for a user
can only be unlocked with knowledge of the registered password
or one of the policy-checked cached variants of it. We introduce
a formal security notion requiring that an attacker learns noth-
ing about a sequence of password logins (including the number of
logins, how many variants were entered into the typo cache, or
partial information about the passwords) given the state of the pass-
word system, unless the attacker can successfully mount a modified
form of brute-force guessing attack in which it repeatedly hashes
common passwords or typos of them and checks them against the
hashes stored within the state.
We prove the security of our construction relative to this notion,
and go on to analyze the brute-force guessing game to which we
reduce security. We give criteria on password and typo distributions
which, if met, mean that the attacker will gain no additional benefit
by attempting to guess a stored typo. For such settings, we prove
that the optimal strategy is a standard brute-force guessing attack
against the registered password as if there were no additional pass-
word hashes of typos stored. We show empirically that real-world
password and typo distributions meet the required criteria.
To gauge the potential efficacy of TypTop, we conduct a study
using Amazon Mechanical Turk (MTurk) [7] in which we ask users
to perform repeated logins using a password of their choosing.1
In this way, we can analyze the types of errors made and the po-
tential benefit of personalization compared to the prior relaxed
checking approach with a fixed set of typo correctors. The analysis
reveals that 45% of users would benefit from personalization, a
1.5x improvement over the 29% of users that benefit from the top 5
correctors from [8].
We implemented a prototype of TypTop for Unix systems includ-
ing Linux and Mac OS using the pluggable authentication module
(PAM) framework. The prototype enables typo-tolerance for all
password-based authentications managed by the operating system.
We report on the initial deployment with 25 users, and while further
studies will be needed to assess generalizability of our results, they
so far indicate that TypTop significantly benefits users that often
mistype their passwords in ways not covered by prior correction
mechanisms. Our prototype is open-source and publicly available.2
2 BACKGROUND AND RELATED WORK
In traditional password-based authentication schemes (PBAS), a
user initially registers a user name and a password with the system.
The password is stored in some protected form (typically a salted
password hash). On subsequent login attempts, the user re-enters
their password which is then compared to the stored password;
1All our study designs were reviewed by our university’s IRB.
2https://typtop.info/
2
authentication is granted only if these match. A formal definition
of PBAS schemes is given in Section 3.
Password distributions and guessing attacks. Measurement
studies [6, 12, 24] and password leaks such as [33] show that users
frequently pick weak passwords, with a large number of users shar-
ing a relatively small set of passwords at the head of the password
distribution. This leaves them vulnerable to guessing attacks (see
Section 3).
The reason users persistently pick such weak passwords is of-
ten cited as ease of memorability. However studies by Keith et
al. [17, 18] indicate that the rate at which typos are made approxi-
mately doubles for complex passwords; similarly Mazurek et al. [21]
show via a large-scale study that login errors are correlated with
stronger passwords, and suggest that users pick weaker passwords
due to their ease of typing. Work by Shay et al. [31] finds a sim-
ilar correlation between length and rate of typo occurrence for
CorrectHorseBatteryStaple-type passphrases [26]. For a more de-
tailed discussion of these related works, see [8].
Typo-tolerant password checking. Motivated by the industry
practice [2, 25, 28] of allowing a small number of typos (specifically
capitalization errors) during authentication, Chatterjee et al. [8]
provide the first formal treatment of typo-tolerant password check-
ing for user-selected passwords. With an experiment conducted on
MTurk, they show that 20% of typos can be corrected by a small
set of corrector functions (e.g., applying caps lock or switching the
case of the first letter). They advocate an approach called relaxed
checking, which allows authentication under a small number of
easily correctable typos. Now when a password fails its initial au-
thentication check, a set of (e.g., 5) corrector functions representing
common typos are applied to the entered string; the user is allowed
to authenticate if any of these corrections matches the registered
password. The authors show that relaxed checking with a care-
fully chosen set of corrector functions can achieve a significant
improvement in utility with minimal degradation in security.
While relaxed checking allows for the secure correction of 20%
of typos, this still leaves the majority of typos uncorrected. Further-
more, the corrector functions utilized are based on common typo
behavior across the population of users, as opposed to that of the
individual. In this work, we explore a new approach — personalized
typo-tolerance — which allows us to correct a greater proportion
of typos by tailoring typo-tolerance to the individual user.
3 PERSONALIZED TYPO TOLERANCE
We introduce personalized typo-tolerant password checking which
adapts, over time, to correct the specific typos made by an individ-
ual user. We begin by defining the abstract components of such a
scheme, as well as the utility and the security goals.
Passwords and typos. We let 𝒮 denote the set of strings which
users may choose as passwords (e.g., the set of ASCII strings up
to some maximum length, say ℓ ). We let 𝑝 be a distribution which
models user selection of passwords, so 𝑝(𝑤) denotes the probability
that 𝑤 is the password chosen by a user, and let 𝒲 denote the
support of 𝑝, which represents the set of user passwords. We let
𝑤1, 𝑤2, . . . denote the passwords in 𝒲 ordered in descending order
of probability.
The TypTop System
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
A typo-tolerant PBAS which allows authentication under any
string is clearly insecure. As such we need a means to distinguish le-
gitimate user typos from unrelated strings. We do this following the
approach of [8]. We first convert both the password 𝑤 and possible
typo ˜𝑤 into their key press representation [8], and then compute
the Damerau-Levenshtein distance [9, 20] of these representations,
which we denote DL(𝑤, ˜𝑤). We view ˜𝑤 as a legitimate typo of 𝑤 if
this distance is at most some small fixed parameter 𝛿; here we set
𝛿 = 2. We let {𝜏𝑤} be a family of distributions over typos for each
password 𝑤, so 𝜏𝑤 ( ˜𝑤) is the probability that the password 𝑤 ∈ 𝒲
is typed as ˜𝑤 ∈ 𝒮. Note that 𝜏𝑤 (𝑤) denotes the probability that
𝑤 is typed correctly. Together these components (𝑝, 𝜏 ) define an
error setting.
Looking ahead, we will conservatively assume that an attacker
has precise knowledge of the underlying error setting when we
analyze the security of TypTop with respect to guessing attacks. In
practice, TypTop uses a state of the art password strength estimator,
zxcvbn [35], to estimate password guessability.
Adaptive checkers. An adaptive password checker Π is a stateful
PBAS — that is to say Π = (Reg, Chk) is a pair of algorithm defined
as follows:
∙ Reg is a randomized algorithm which takes as input a password
𝑤, and outputs an initial state 𝑠0 for Π.
∙ Chk is an algorithm (possibly randomized) which takes as input
a string ˜𝑤 and a state 𝑠, and outputs a bit 𝑏 and an updated
state 𝑠
′. An output 𝑏 = 1 means authentication is granted.
Our definition is analogous to the formalization of standard (non-
adaptive) PBAS given in [8]; their definition may be recovered by
keeping the state constant across invocations of Chk. We call a
non-adaptive PBAS an exact checker if it outputs 𝑏 = 1 only if the
correct password is entered exactly.
We require that a password checker is complete, which is to say
that the probability that a user successfully authenticates when
he enters his correct password is one. Additionally we desire our
typo-tolerant checker to authenticate under as many typos made
by a legitimate user as possible (subject to security constraints).
We will measure the utility of a typo-tolerant PBAS in terms of the
fraction of typos accepted by the password checker across all users.
By this measure, the utility of an exact checker is always 0.
Guessing attacks. Guessing attacks against PBAS schemes come
in two key flavors: online and offline attacks. In the former, an at-
tacker uses the login API of the system to submit different password
guesses in an attempt to impersonate a user. The attacker might
target a specific user in what is known as a vertical attack, or may
try common passwords against the accounts of many users (known
as a horizontal attack). Various countermeasures can be deployed
to mitigate these attacks, including locking the account after a num-
ber of (e.g., 10) incorrect password submissions, and slowing down