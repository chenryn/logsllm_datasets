ESP32 developer boards6, a TP-Link TL-WDR4300 Wi-Fi router7
running OpenWRT 19.07.7 was used as an IoT gateway and a Rasp-
berry Pi 3+8 with Linux running the C++ implemented the verifier.
The setup was located in an office environment during workdays
with frequent Wi-Fi usage. The Wi-Fi access point provided a sep-
arate IoT network in a 2.4 GHz range as the ESP32 is only able
5https://tls.mbed.org/
6https://joy-it.net/en/products/SBC-NodeMCU-ESP32
7https://www.tp-link.com/ch/home-networking/wifi-router/tl-wdr4300/
8https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/
Figure 5: Runtime of the attestation process on the prover with dif-
ferent number of repetitions.
to work within this frequency range. The testbed reflects typical
usage in practice, e.g., in hospitals or factories with different inter-
fering Wi-Fi traffic and other wireless devices that influence the
communication between the prover and the verifier. The influence
of other wireless devices and Wi-Fi traffic and its implications for
the attestation is further analyzed in Section 7.
6.3 Integrating RealSWATT
The integration of RealSWATT is straightforward. IoT devices often
rely on a realtime operating system (RTOS) [8], which allow to
manage and appropriately schedule multiple concurrent tasks on
multiple cores. The usage of a RTOS gives standard interfaces and
methods to add the attestation service. In order to integrate Real-
SWATT we have created additional tasks. We added a UDP service
for the communication and an attestation task on the dedicated
core. It is also possible to integrate RealSWATT into devices with
no operating system, so-called bare metal systems. However, the
integration will need to be performed much more carefully as one
cannot rely on the abstraction and features provided by a realtime
operating system.
In the next section we evaluate RealSWATT and show its gen-
eral applicability. To do so, we perform a case study and integrate
RealSWATT into a medical device and an IoT framework.
7 EVALUATION
In this section, we show that RealSWATT attestation is well-suited
for real-world IoT setups and can be applied in practice. As de-
scribed in Section 6, the RealSWATT attestation was deployed on
different embedded devices. To show the general applicability of
the RealSWATT attestation concept, we investigate its runtime and
timing constraints. As elaborated in Section 5, timing is a crucial
security factor in software-based attestation. We measure the re-
sponse times in our exemplary syringe pump example and explain
how timing thresholds for the verification of the attestation can be
012510203050100150200300# repetitions050010001500200025003000Attestation runtime in msSession 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea28977.1 Timing
Timing is a crucial component of the security in software-based
attestation. While in traditional software-based attestation the re-
sponse time to the verifier is the relevant part of the security, in
continuous attestation the runtime of the attestation itself is impor-
tant while the transmission time can be neglected.
We performed a measurement study in our IoT testbed to deter-
mine the response times of the prover to the challenge depending on
the number of repetitions of the hashing function and the variance
of the transmission in the Wi-Fi network. In order to perform a reli-
able attestation, the number of repetitions of the hashing function
has to be chosen such that its runtime dominates the variance of the
transmission. The continuous attestation fails if the verifier does
not receive the response of the prover before the prover finishes
the next attestation request. A too long attestation run increases
the time span between two attestation reports of the prover. Hence,
the delay between compromise and its detection becomes larger.
Table 1 shows the measured runtime of the attestation function
including and without the overhead due to the wireless network
using different numbers of repetitions. In Figure 5, the runtime
of the attestation process with respect to the number of hashing
repetitions is plotted. Since the hashing needs to dominate the
variance of the transmission we also plotted the response time with
their respective variances in Figure 6 for direct comparison.
We conducted all measurements on the described testbed using
the syringe pump implementation and repeated them to cover for
any variations. We repeated the Wi-Fi measurements 600 times,
the measurements without Wi-Fi were repeated 100 times due to
their lower variability. The time including the Wi-Fi transmission
was measured on the Raspberry Pi. The runtime without the Wi-Fi
overhead was measured on the ESP32 with its internal clock.
As expected, the variance of runtime of the attestation without
any communication is minimal. The highest standard deviation in
the experiments was 56.83 µs in case of only two repetitions. In
all cases with more repetitions, i.e., more than 5, we measured no
deviation. This makes the implementation well-suited for software-
based attestation, as strict timing limits can be selected.
In comparison, the measurements which include transmission
via Wi-Fi have much larger deviations, as Figure 6 shows. For
example, in case of ten repetitions, the time until the verifier gets a
response from the prover varies between 110 ms and 303 ms. These
results clearly show, that such a Wi-Fi setup is inadequate to be
directly used for software-based attestation.
The values in Table 1 can be used to find optimal parameters
for the attestation. To select suitable parameters, the minimum
and maximum values of the attestation can be compared to find
the optimal compromise between the delay until a compromise is
detected, the required amount of communication, and the required
difference between delay due to network communication and the
time a single attestation run takes. These parameters are also used
to configure the timeout-thresholds for the verifier to detect delays
in the attestation.
All attestation runs have about the same execution time and the
variance between the executions is negligible. In contrast, the time
until the verifier actually receives the attestation response varies
Figure 6: Response time of the prover with different number of repe-
titions, this includes both the attestation runtime and the overhead
due to the Wi-Fi communication.
Table 1: Measurement of the runtime of the attestation with and
without the delay due to the Wi-Fi communication. All measure-
ments are taken in ms.
Rounds
0
1
2
5
10
20
30
50
100
150
200
300
Type
Direct
Network
Direct
Network
Direct
Network
Direct
Network
Direct
Network
Direct
Network
Direct
Network
Direct
Network
Direct
Network
Direct
Network
Direct
Network
Direct
Network
Min/Max
7.979/8.14
36.066/226.36
9.752/10.265
49.502/279.684
19.748/20.276
69.367/274.108
50.005/50.005
59.662/276.617
100.004/100.004
125.149/329.905
200.004/200.004
217.307/439.912
300.004/300.004
320.665/469.364
500.004/500.004
518.593/726.847
1000.004/1000.004
1019.64/1218.943
1500.005/1500.005
1517.224/1679.623
2000.004/2000.004
2009.749/2179.673
3000.004/3000.004
3009.71/3190.993
Mean
7.988
72.207
10.004
225.76
20.006
225.96
50.005
224.61
100.004
228.32
200.004
241.46
300.004
431.11
500.004
637.27
1000.004
1048.91
1500.005
1661.35
2000.004
2072.29
3000.004
3095.92
Std. Dev.
0.032
11.43
0.038
20.84
0.057
18.81
0.0
23.26
0.0
9.952
0.0
46.96
0.0
16.91
0.0
13.01
0.0
13.15
0.0
11.12
0.0
9.24
0.0
8.67
determined. We further analyze the overhead induced by the attesta-
tion. This covers both additional power consumption caused by the
usage of the second processor core as well as the communication
overhead for attestation requests and responses.
In a full end-to-end example, we show the functionality of the
RealSWATT attestation by performing an attack on a vulnerable
device which is detected by the attestation.
012510203050100150200300# repetitions050010001500200025003000Attestation runtime in msSession 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2898widely. A software-based attestation without the RealSWATT con-
tinuous attestation approach is not feasible under these circum-
stances. Based on these results, it is possible to determine the ade-
quate number of repetitions for the given use-case. In case of the
syringe pump, we opted for 100 repetitions, yielding in attestation
reports in about 1 s intervals. These measurements are also required
to configure the verifier to detect malicious behavior resulting in
timeouts as the response time varies. The measurements show
that RealSWATT is capable to work on IoT devices with wireless
communication in practice.
7.2 Power Consumption
The second important aspect for a real-world deployment of Re-
alSWATT is power consumption. Continuous attestation causes
constant additional computational tasks for the attestation core,
which results in increased power consumption. Often, IoT devices
are battery powered. A good example is the smoke detection sensor
placed in the corner of the ceiling. Therefore, the power consump-
tion is also a concern of such IoT devices.
Consequently, we have conducted a case study and measured
the power consumption of the syringe pump with and without
the attestation running. Without attestation, we have measured
an average consumption of 46.2 mA and with attestation a slightly
increased power consumption of 46.8 mA. So, attestation accounts
for an increase in power consumption of 0.6 mA in this case, about
1.3%. A more detailed analysis of the power consumption of our
ESP32 evaluation board can be found in Appendix B.2.
7.3 Communication Overhead
Another important aspect is the amount of communication required
for the attestation. First, IoT devices often use wireless communica-
tion, which is a shared resource with a limited frequency spectrum.
With multiple devices communicating via the same channel the
network latency as well as package drops increase. Wireless commu-
nication is similar to traditional bus communication in that regard.
Packets sent simultaneously collide and need to be retransmitted.
Each wireless transmission takes a portion of the available band-