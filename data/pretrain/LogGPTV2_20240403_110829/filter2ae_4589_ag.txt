    LDR             R2, [R11,#var_4C]
    STR             R2, [R3]
    LDR             R2, =0xFFFFDD30
    SUB             R3, R11, #-var_2280
    SUB             R3, R3, #4
    SUB             R3, R3, #0x18
    SUB             R12, R11, #-var_4
    STR             R3, [R12,R2]
    LDR             R3, [R11,#var_4C]
    MOV             R0, #6
    LDR             R2, =(aTxtag - 0xB3918D08)
    ADD             R2, PC, R2 ; "txtag"
    MOV             R1, R2
    LDR             R2, =(aReadCountX - 0xB3918D14)
    ADD             R2, PC, R2 ; "read count:%x"
    BL              printf_log
    LDR             R2, =0xFFFFDD30
    MOV             R3, #0x10
    SUB             R0, R11, #-var_4
    ADD             R2, R0, R2
    ADD             R3, R2, R3
    MOV             R2, #0x100000
    STR             R2, [R3]
    LDR             R2, [R11,#var_18]
    LDR             R3, [R11,#var_38]
    ADD             R3, R2, R3
    MOV             R2, R3
    LDR             R1, =0xFFFFDD30
    MOV             R3, #0xC
    SUB             R12, R11, #-var_4
    ADD             R1, R12, R1
    ADD             R3, R1, R3
    STR             R2, [R3]
    SUB             R3, R11, #-var_22C0
    SUB             R3, R3, #4
    SUB             R3, R3, #0x10
    MOV             R0, R3
    MOV             R1, #0
    BL              inflate_0
    STR             R0, [R11,#var_54]
    LDR             R2, [R11,#var_18]
    LDR             R1, =0xFFFFDD30
    MOV             R3, #0x10
    SUB             R0, R11, #-var_4
    ADD             R1, R0, R1
    ADD             R3, R1, R3
    LDR             R3, [R3]
    RSB             R3, R3, R2
    ADD             R3, R3, #0x100000
    STR             R3, [R11,#var_18]
    LDR             R2, [R11,#var_8]
    LDR             R3, [R11,#var_4C]
    ADD             R3, R2, R3
    STR             R3, [R11,#var_8]
### 伪代码
  1. 打印sdk版本号
  2. 将原始so文件偏移var_22DC(0x6D88，文件尾部附加数据开头)，长度为0x58的数据存入栈中var_F8里，很明显这个数据段中(var_F8-var_a0)是一些配置信息
  3. 根据上面的0x58字节数据，映射出一块大小为0x20C9C内存
  4. 根据0x58数据的配置var_ee，随机分配var_ee*24（48）字节内存空间，返回指针变量var_34
  5. 申请0x30内存块，接着从so结尾读取数据(紧接着0x58之后)，数据读取到var_10（范围var_10-var_40）
  6. 继续在var_40映射一块长度为var_48(0x1E000)的内存块
  7. 初始化解压函数用到的结构体var_22AC（z_streamp ）
  8. 循环每次读取0x1000字节数据到var_229C里，总共读取长度由0x10+0xC和0x10+0x14处的配置信息确定的
  9. 解密var_229C中的压缩数据，用zlib库进行解压缩操作，解压到var_38指定内存中
  10. 后面会有一些符号替换的操作来讲JNI_OnLoad地址重新定位
    int __fastcall sub_B391863C(int soPath, int offset)
    {
        var_22D8 = soPath;
        var_22DC = offset;
        memset(&var_A0, 0, 0x40);
        property_get("ro.build.version.sdk", &var_A0);
        android_printf_log(6, "txtag", "version:%d", atoi(&var_A0));
        do
        {
            var_28 = open(var_22D8, 0x80000);
        }
        while(var_28 == -1);
        memset(&var_F8, 0, 0x58);
        for(var_8=0; var_8 0x40000000-var_F4 && dword_B391B004  var_8; var_8 = pread(var_28, var_10, var_ee*24, var_22DC+(__int16)var_F0))
        {
            _android_log_printf(6, "txtag", "read count:%x", var_8);
        }
        for(var_14=0; var_14 var_8)
                {
                    if(var_8 + 0x1000 var_1C;var_1C+=0x400)
                    cacheflush(var_1C, 0x400);
            }   
            var_10 += 0x18;
        }
    }
# 小结
**看汇编代码，先看控制流程，找CMP、CMN等确定是什么语句，接着看blx，查看需要多少参数，接着往上找参数值**
**对于大量LDR、STR、MOV指令连续指令，确定是局部变赋值，直接高亮STR查看**
【1】汇编语句中，for循环和while循环的相同点，判断语句都在整个语句块底部。不同点：while循环中，条件判断成功之后就直接跳转到循环体。for循环条件判断成功之后，需要先跳转到修改变量值的那个语句块后，才会执行到循环体。
【2】ADD Rd,0xFFF，BIC Rd,0xFFF，可以计算出Rd跟0x1000对其的值
【3】程序执行过程中，需要记住的是栈保存的参数和变量，寄存器随时发生变化
【4】调用规范：每次进行Branch分支跳转的时候，都会将下一条语句地址存入LR
【5】调用规范：开始调用栈时，参数放入栈顶附近(如果当前栈帧内的函数调用参数都小于4，那么参数入栈就在栈顶，否则要留有足够空间给参数)，局部变量放在栈底
# 参考
【1】ARM指令查询 