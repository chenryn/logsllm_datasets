title:OpenSGX: An Open Platform for SGX Research
author:Prerit Jain and
Soham Jayesh Desai and
Ming-Wei Shih and
Taesoo Kim and
Seong Min Kim and
Jae-Hyuk Lee and
Changho Choi and
Youjung Shin and
Brent ByungHoon Kang and
Dongsu Han
OpenSGX: An Open Platform for SGX Research
Prerit Jain† Soham Desai† Seongmin Kim⋆ Ming-Wei Shih† JaeHyuk Lee⋆
Changho Choi⋆ Youjung Shin⋆ Taesoo Kim† Brent Byunghoon Kang⋆ Dongsu Han⋆
†Georgia Institute of Technology
†{pjain43, sdesai1, mingwei.shih, taesoo}@gatech.edu
⋆KAIST
⋆{dallas1004, jhl9105, zpzigi, yj_shin, dongsuh, brentkang}@kaist.ac.kr
Abstract—Hardware technologies for trusted computing, or
trusted execution environments (TEEs), have rapidly matured
over the last decade. In fact, TEEs are at the brink of widespread
commoditization with the recent introduction of Intel Software
Guard Extensions (Intel SGX). Despite such rapid development
of TEE, software technologies for TEE significantly lag behind
their hardware counterpart, and currently only a select group
of researchers have the privilege of accessing this technology. To
address this problem, we develop an open source platform, called
OpenSGX, that emulates Intel SGX hardware components at the
instruction level and provides new system software components
necessarily required for full TEE exploration. We expect that the
OpenSGX framework can serve as an open platform for SGX
research, with the following contributions. First, we develop a
fully functional, instruction-compatible emulator of Intel SGX
for enabling the exploration of software/hardware design space,
and development of enclave programs. OpenSGX provides a
platform for SGX development, meaning that it provides not
just emulation but also operating system components, an enclave
program loader/packager, an OpenSGX user library, debugging,
and performance monitoring. Second, to show OpenSGX’s use
cases, we applied OpenSGX to protect sensitive information (e.g.,
directory) of Tor nodes and evaluated their potential performance
impacts. Therefore, we believe OpenSGX has great potential
for broader communities to spark new research on soon-to-be-
commodity Intel SGX.
I.
INTRODUCTION
Hardware technologies for trusted computing, so called
trusted execution environments (TEEs), have rapidly matured
over the last decade [3, 18]. Trusted execution environments
are at the brink of widespread commoditization with the recent
introduction of Intel Software Guard Extensions (Intel SGX) [2,
19, 36]. Intel SGX allows an application, or its sub-component,
to run inside an isolated execution environment, called an
enclave. Intel SGX hardware protects the enclave against any
malicious software, including operating system, hypervisor, and
low-level firmware (e.g., SMM), which attempts to compromise
its integrity or steal its secrecy. With the widespread adoption
of cloud computing, the speculation is that Intel SGX can be
a vehicle for enabling secure cloud computing and allowing
many unforeseen security applications.
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the first page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the first-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23011
The adoption of Intel SGX can have a dramatic impact
on software design and implementation. For example, the
introduction of SGX may require new programming models or
even a new paradigm to be considered. However, despite the
rapid development of TEEs, software technologies for TEE are
still at a nascent stage. In fact, for Intel SGX, it is not feasible
to fully explore all the potential that the SGX can provide
because the research community lacks any usable platform for
experimentation. In particular, access to the Intel SGX platform
is currently limited to only a select group of people [5, 42, 43].
This is one of the fundamental barriers to innovation and
software research on SGX, especially at its early phase.
In this paper, we attempt to address this fundamental issue
of designing and implementing a basic infrastructure that allows
full instrumentation and exploration of SGX research. To this
end, we proposed and developed an open platform, called
OpenSGX, that emulates Intel SGX at the instruction-level by
extending an open-source emulator, QEMU. In particular, we
leverage QEMU’s userspace binary translation to implement
SGX instructions. However, OpenSGX is not just an SGX
instruction emulator, but it serves as a complete platform that
includes an emulated operating system layer and services, an
enclave program loader/package, a user library, debugging
support, and performance monitoring. Because OpenSGX is
implemented purely in software, it allows easy instrumentation
in virtually all aspects of SGX, such as hardware components
and system software, as well as memory encryption schemes.
In addition to its use for research, OpenSGX can be used for
developing SGX applications, as it is a self-contained platform,
which provides isolated execution and remote attestation.
However, it is not straightforward to design and implement
such an open platform for both research and development
communities. Not only does it require an intensive amount
of engineering effort, but it also needs to be designed to
inspire new research opportunities in operating systems and
applications. In particular, we find that while the Intel SGX
specification describes in detail the instruction set and internal
data structures, it leaves other important components largely
unspecified, such as support for system software and application
programming interface. This raises a number of non-trivial
issues. For example, many of the Intel SGX instructions are
ring 0 instructions that require kernel privilege. This implies
that an operating system, an untrusted entity with respect to
SGX, must be involved to provide service (e.g., through system
calls). Thus, a secure SGX design is required for SGX enclave
applications to defend against potential attack vectors, such as
Iago attacks [11].
Furthermore, SGX requires that application code and data be
placed on Enclave Page Cache (EPC), a reserved, encrypted area
of memory, and that its execution must stay within EPC. For
executing a binary on EPC, an SGX instruction can allow one
to copy a normal page onto an EPC page; however, a dynamic
loader is additionally required to supply the provisioning of
the code, data, and stack sections on EPC (e.g., relocation).
To provide an ecosystem, OpenSGX must address these issues,
while the SGX specification largely concerns the instruction
set and low-level interfaces.
OpenSGX design fills this gap to provide necessary support
for SGX application programmers to readily implement their
TEE applications and explore the feasibility. In particular,
OpenSGX provides six components to support all aspects of
SGX development: hardware emulation module, operating sys-
tem emulation, enclave loader, user library, debugging support,
and performance monitoring. To evaluate all components of
the system and demonstrate the potential of OpenSGX, we
conducted a case study using Tor, the anonymity network, as
a concrete example. We discuss how SGX might be used to
enhance the security and privacy guarantees of Tor, redesign
Tor to leverage SGX, and use OpenSGX to implement its
SGX-based Tor design. Finally, we present the performance
profiling result of the SGX-enabled Tor. The profiling result
was produced using one of the services provided by OpenSGX.
In summary, we make the following contributions:
• The first open platform for SGX research and development,
which includes a wide range of emulation components and
toolchain.
• An initial exploration of system support, its interface design,
and the security issues involving system calls and user library
for SGX programming.
• We applied OpenSGX to Tor nodes to isolate sensitive
information (e.g., a signing key of the directory server) and
evaluate its potential performance implications.
We find that it is timely to introduce OpenSGX to the
community, considering the early-stage of Intel SGX—the first
SGX-equipped CPUs (S-Spec: SR2L0, SR2L1, ..., SR2L9,
SR2LC, ..., SR2LH, SR2LJ, ..., SR2LN) have been on the
market since October 26, 2015 [23], but there are no known
motherboards that support SGX other than a few DELL Inspiron
laptops (i3153, i3158, i7353, i7359, i7568) as of December
2015. We believe the open research opportunities that OpenSGX
brings will help not only the software community in exploring
new interfaces and semantics for SGX programming, but
also the hardware community in testing and implementing
new requirements and services for TEEs that the software
community may be able to identify and suggest as new hardware
features.
This paper is organized as follows. §II provides background
of Intel SGX. §III and §IV describe the system design. §V
explains the implementation details. §VI and §VII evaluate
OpenSGX through concrete case studies and describe our
initial experience of redesigning Tor to adopt Intel SGX. §VIII
presents related work, §IX discusses remaining issues, and
finally, §X concludes our work.
P
P
P
P
P
P
P
P
P
P
P
P
P
P
P
P
P
U
U
U
U
U
U
U
U
Type
Instruction
MEM
MEM
EXE
DBG
DBG
MEM
EXE
MEM
MEM
SEC
MEM
MEM
MEM
MEM
SEC
EXE
EXE
EXE
SEC
SEC
EXE
MEM
SEC
MEM
EADD
EBLOCK
ECREATE
EDBGRD
EDBGWR
EEXTEND
EINIT
ELDB
ELDU
EPA
EREMOVE
ETRACK
EWB
EAUG
EMODPR
EMODT
EENTER
EEXIT
EGETKEY
EREPORT
ERESUME
EACCEPT
EMODPE
EACCEPTCOPY
Description
Add a page
Block an EPC page
Create an enclave
Read data by debugger
Write data by debugger
Extend EPC page measurement
Initialize an enclave
Load an EPC page as blocked
Load an EPC page as unblocked
Add a version array
Remove a page from EPC
Activate EBLOCK checks
Write back/invalidate an EPC page
Allocate a page to an existing enclave
Restrict page permissions
Change the type of an EPC page
Enter an enclave
Exit an enclave
Create a cryptographic key
Create a cryptographic report
Re-enter an enclave
Accept changes to a page
Enhance access rights
Copy a page to a new location
V
S
r1 ✓
r1 ✓
r1 ✓
r1
-
r1
-
r1 ✓
r1 ✓
r1 ✓
r1 ✓
r1 ✓
r1 ✓
r1
-
r1 ✓
r2 ✓
r2 ✓
r2 ✓
r1 ✓
r1 ✓
r1 ✓
r1 ✓
r1 ✓
r2 ✓
r2 ✓
r2 ✓
TABLE I: Intel SGX Instruction support in OpenSGX. P: Privileged
(ring 0) instructions; U: User-level (ring-3) instructions; V: Version;
S: Supported by OpenSGX; r1: Revision 1 [21]; r2: Revision 2 [22];
MEM: Memory management related; EXE: Enclave execution related;
SEC: Security or permissions related.
Instruction
EPCM
SECS
TCS
SSA
PageInfo
SECINFO
PCMD
SIGSTRUCT
EINITTOKEN
REPORT
TARGETINFO
KEYREQUEST
VA