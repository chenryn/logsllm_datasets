title:Faster secure two-party computation with less memory
author:Wilko Henecka and
Thomas Schneider
Faster Secure Two-Party Computation with Less Memory
Wilko Henecka
School of Mathematical Sciences
University of Adelaide
PI:EMAIL
Australia
Thomas Schneider
European Center for Security and Privacy by
Design (EC SPRIDE)
Technische Universität Darmstadt
Germany
PI:EMAIL
ABSTRACT
Secure two-party computation is used as the basis for a large
variety of privacy-preserving protocols, but often concerns
about the low performance hinder the move away from non-
private solutions.
In this paper we present an improved implementation of
Yao’s garbled circuit protocol in the semi-honest adversaries
setting which is up to 10 times faster than previous imple-
mentations. Our improvements include (1) the ﬁrst multi-
threaded implementation of the base oblivious transfers re-
sulting in a speedup of a factor of two, (2) techniques for
minimizing the memory footprint during oblivious trans-
fer extensions and processing of circuits, (3) compilation
of sub-circuits into ﬁles, and (4) caching of circuit descrip-
tions and network packets. We implement improved cir-
cuit building blocks from the literature and present for the
ﬁrst time performance results for secure evaluation of the
ultra-lightweight block cipher PRESENT within 7 ms on-
line time.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—
Cryptographic controls; C.2.4 [Computer-Communica–
tion Networks]: Distributed Systems—distributed appli-
cations
General Terms
Security, Algorithms
Keywords
Secure Computation, Garbled Circuits, Eﬃciency, Privacy
1.
INTRODUCTION
Secure two-party computation, often called secure func-
tion evaluation (SFE), allows two mutually mistrusting par-
ties to compute an arbitrary function on their private in-
puts without revealing any information about their inputs
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIA CCS’13, May 8–10, 2013, Hangzhou, China.
Copyright 2013 ACM 978-1-4503-1767-2/13/05 ...$15.00.
beyond the function’s output. Although the real-world de-
ployment of SFE was believed to be very expensive for a
relatively long time, the cost of SFE has been dramatically
reduced in the recent years thanks to many algorithmic im-
provements and automatic tools, as well as faster comput-
ing platforms and communication networks. SFE enables a
large variety of privacy-preserving applications such as elec-
tronic auctions [NPS99], data mining [LP09b], or biometric
identiﬁcation [BG11, HMEK11], to name a few.
Although other approaches exist, most practical appli-
cations of SFE, including the ones listed above, are based
on Yao’s garbled circuits technique [Yao86] for which many
improvements have been proposed (we give a summary in
§2.1). In this paper we focus on secure two-party compu-
tation based on garbled circuits in the semi-honest adver-
sary model. In this model, the adversary is assumed to be
“honest-but-curious”, i.e., he honestly follows the protocol
speciﬁcation, but tries to learn additional information from
the messages seen. Although this adversary model is very
weak, it allows to construct highly eﬃcient protocols for
many application scenarios, e.g., for constructing privacy-
preserving protocols that protect against attacks by insiders
or future break-ins. We strongly believe that pushing the
performance limits of such protocols is essential in order to
promote secure computation as conceivable alternative to
using protocols without provable privacy guarantees.
In order to make SFE usable in practice, several frame-
works with diﬀerent properties have been proposed as sum-
marized in Table 1. These frameworks allow an applica-
tion developer to describe the functionality that needs to be
computed securely on a high level and abstract from the de-
tails of the underlying protocol. Fairplay [MNPS04,BNP08]
allows to describe the functionality to be computed in a
high-level language which is compiled into a boolean cir-
cuit in an oﬄine pre-computation phase. This compilation
allows to perform global optimizations such as eliminating
dead code. Subsequently, TASTY [HKS+10] partitioned the
garbled circuit protocol such that most expensive opera-
tions (w.r.t. both, communication and computation) are
performed in the pre-computation phase. To reduce the
memory footprint, VMCrypt [Mal11] introduced the con-
cept of streaming, i.e., the garbled circuit is generated gate
by gate and directly streamed into the network. To also re-
duce the memory footprint for the circuit, the programmer
can compose the circuit by dynamically constructing and de-
constructing sub-circuits. However, VMCrypt instantiates a
new object for each gate such that its performance suﬀers
from the additional overhead of garbage collection. Also in
437Table 1: Frameworks for GC-based secure two-party computation in the semi-honest adversaries setting.
Framework
Fairplay [MNPS04, BNP08]
TASTY [HKS+10]
VMCrypt [Mal11]
FastGC [HEKM11]
GCParser [MZE12]
[KSS12] (malicious, cluster)
This Work
Compilation
Streaming
Yes
Yes
No
No
Yes
Yes
Yes
No
No
Yes
Yes
Yes
Yes
Yes
FastGC [HEKM11] the circuit is not compiled, but com-
posed from sub-circuits and dynamically generated within a
library. Also here, a new object is created for each gate of
the sub-circuit which could be freed by the garbage collec-
tor when not used any more. GCParser [MZE12] extended
the FastGC framework to read in a ﬁle which describes the
way pre-deﬁned sub-circuits should be put together; it also
requires memory linear in the size of the sub-circuits. Most
recently, the framework of [KSS12] implemented GC-based
secure function evaluation in the malicious setting by ex-
ploiting the high degree of parallelism available in a cluster.
In this framework, each gate carries a usage counter such
that memory can be freed after the last use of the gate, but
this requires additional overhead in the online phase.
1.1 Outline and Our Contributions
After giving related works in §1.2, an overview on Yao’s
garbled circuit protocol in §2.1.1, and a minor remark on
the choice of security parameters in §2.2, we present the
following contributions:
In §3 we present several optimizations that result in lower
memory consumption and signiﬁcantly better performance
compared to previous frameworks. More speciﬁcally, we im-
prove the implementation of base oblivious transfers using
multi-threading (§3.1), reduce the memory consumption of
oblivious transfer extensions (§3.2), compile sub-circuits into
ﬁles (§3.4), and cache circuit descriptions and the communi-
cation (§3.5). In §3.3 we enhance streaming by considering
both, the memory footprint of the circuit and the garbled
circuit with no additional overhead in the online phase. As
described in §1 and summarized in Table 1, most previous
frameworks have a memory consumption which is linear in
the size of the evaluated circuit. As shown in [JKSS10b]
and implemented in the framework of [KSS12], it is suﬃ-
cient to just hold the intermediate values in memory that
are needed later on, called the working set. For example,
the maximum size of the working set of a Karatsuba multi-
plication of two 128 bit values is 1,074 whereas the circuit
has 57,000 gates. In VMCrypt [Mal11], the needed memory
depends on the way a programmer creates and decorates
circuit components, and the framework of [KSS12] requires
additional overhead in the online phase to manage a us-
age counter and free unused memory (see §3.3 for details).
The memory consumption of our engine for simultaneously
streaming circuits and garbled circuits depends only on the
maximum size of the working set with no additional over-
head in the online phase.
In §4 we demonstrate that our implementation is sub-
stantially more eﬃcient than previous frameworks. As ap-
plications we consider secure evaluation of the Hamming
distance, fast multiplication, and computing the minimum.
Memory and Additional Overhead During Online Phase
O(circuit size)
O(circuit size)
depends on circuit, garbage collection
O(max(size of sub-circuit)), garbage collection
O(max(size of sub-circuit)), garbage collection
O(maximum working set(circuit)), usage counter
O(max(max. working set(sub-circuit))), no online overhead
Moreover, we give performance results on securely comput-
ing the AES block cipher and for the ﬁrst time on secure
evaluation of the ultra-lightweight block cipher PRESENT.
As many previous frameworks do, we provide the source
code of our implementation as open source software to foster
future works and allow a fair performance comparison. The
code is available for download at
http://code.google.com/p/me-sfe/.
1.2 Related Works
Faster secure two-party computation using garbled cir-
cuits (FastGC) [HEKM11] is the ﬁrst software implementa-
tion of streamed garbled circuits. As optimization, FastGC
implements the optimization of inputs that depend only on
one party as described in [PSS09, Ker11]. The following
applications are implemented within FastGC: AES, Ham-
ming distance, and Levenstein / Smith-Waterman distance
with applications in privacy-preserving genome and protein
alignment. Subsequently, the FastGC framework was used
for various other applications, including privacy-preserving
biometric identiﬁcation [HMEK11] and privacy-preserving
set intersection [HEK12]. The FastGC framework was also
extended to achieve stronger security guarantees [HKE12],
and adapted for privacy-preserving applications on smart-
phones [HCE11a, HCE11b]. These and future applications
of the FastGC framework (e.g., by using this framework for
iris and ﬁngerprint identiﬁcation [BG11]) beneﬁt from our
improvements.
Many application scenarios require a low memory foot-
print, e.g., privacy-preserving applications on smartphones
[HCE11a, HCE11b], generating garbled circuits in resource-
restricted trusted hardware [JKSS10a], evaluating garbled
circuits with a hardware accelerator [JKSS10b], or securely
evaluating large functionalities in cloud computing scenar-
ios [BNSS11].
Frameworks for secure two-party computation in the semi-
honest adversaries setting can be classiﬁed into the tradi-
tional compilation paradigm, where the function to be com-
puted is ﬁrst compiled and the on-the-ﬂy paradigm that
generates circuits gate by gate from a library. The compi-
lation paradigm is used in Fairplay [MNPS04, BNP08] and
TASTY [HKS+10]. The on-the-ﬂy paradigm is used in the
FastGC framework [HMEK11] and VMCrypt [Mal11]. We
provide the best of both worlds by compiling and optimiz-
ing sub-circuits once and dynamically composing these sub-
circuits on-the-ﬂy.
A compilation technique for memory-eﬃcient on-the-ﬂy
generation of circuits from Fairplay’s high-level description
language was proposed in [MLB12]. Alternatively, circuits
can also be compiled from ANSI C programs as shown in
[HFKV12]. The FastGC framework [HEKM11] was recently
438extended to read in a description of how circuits are com-
posed from hard-coded circuit building blocks [MZE12].
However, these techniques do not minimize the amount of
memory needed during secure evaluation of the circuit.
A large-scale garbled circuits-based framework for secure
computations with security against stronger active (mali-
cious) adversaries was presented recently in [KSS12]. This
framework uses the compilation paradigm and exploits the
high level of parallelism available in grid computing infras-
tructures by running multiple instances of a garbled circuit
protocol in parallel – one on each machine. We extend their
ideas for memory-eﬃcient secure evaluation of garbled cir-
cuits and use multi-threading within a single instance of the
garbled circuit protocol. For completeness we note that an
alternative approach to practical actively secure secure two-
party computations is [NNOB12] which is based on OT ex-
tensions instead of garbled circuits.
2. PRELIMINARIES
2.1 Yao’s Garbled Circuit Protocol
In the following we give a brief summary of Yao’s garbled
circuit protocol, its optimizations, and oblivious transfer.
For a more detailed description we refer to [Sch12, Chap-
ter 2] and for a proof of security to [LP09a].
2.1.1 Yao’s Garbled Circuit Protocol
Yao’s garbled circuit protocol [Yao86] allows two parties,
a server and a client, to jointly compute a function f repre-
sented as boolean circuit on their respective private inputs
x and y. On a very high level, the server (sometimes called
creator) creates an encrypted, called garbled, version of f
which is then sent to the client (sometimes called evaluator)
who evaluates the function under encryption. To encrypt the
function, for each wire of f , the server assigns two random-
looking wire labels that correspond to the values 0 and 1,
respectively. Afterwards, the server obliviously sends ex-
actly those wire labels to the client that correspond to their
inputs. For client’s inputs this is done with a sub-protocol,
called oblivious transfer, such that the server does not learn
the client’s inputs (see below for details). Additionally, for
each gate Gi of f , the server creates and sends to the client a
garbled table Ti with the following property: given the wire
labels for Gi’s inputs, Ti allows to recover only the wire label
of the corresponding output of Gi, but nothing else. Now,
the client can use the wire labels of the inputs together with
the garbled tables Ti to evaluate the garbled circuit gate by
gate and obtains the labels of the output wires. For these
output labels (and only for them) the client obtains map-
pings to the plain values 0 and 1 from the server which allow
to recover f (x, y).
The following optimizations of garbled circuits and obliv-
ious transfer are used in today’s most eﬃcient implementa-
tions of Yao’s protocol, including [HKS+10,BG11,HEKM11,
Mal11, KSS12] and our implementation.
2.1.2 Garbled Circuit Optimizations