92
第二部分 文本过滤
下载
10.4.3 打印模式
假定要匹配单词N e a v e，并打印此行，方法如下。使用模式/ p a t t e r n /格式，这里为/ N e a v e /。
10.4.4 使用模式和行号进行查询
为编辑某个单词浏览一个文件时， s e d返回包含指定单词的许多行。怎样使返回结果更精
确以满足模式匹配呢？可以将行号和模式结合使用。下面这个例子，假定要改动文件 q u o t e . t x t
最后一行中的单词t h e，使用s e d查询t h e，返回两行：
使用模式与行号的混合方式可以剔除第一行，格式为 l i n e _ n u m b e r, / p a t t e r n /。逗号用来分
隔行号与模式开始部分。为达到预期结果，使用 4 , / t h e /。意即只在第四行查询模式 t h e，命令
如下：
10.4.5 匹配元字符
匹配元字符$前，必须使用反斜线\屏蔽其特殊含义。模式为/\$/ p。
10.4.6 显示整个文件
要打印整个文件，只需将行范围设为第一行到最后一行 1 , $。$意为最后一行。
10.4.7 任意字符
匹配任意字母，后跟任意字母的0次或多次重复，并以i n g结尾，模式为/ . * i n g /。可以使用
这个模式查询以i n g结尾的任意单词。
10.4.8 首行
要打印文件第一行，使用行号：
加入java编程群：524621833
93
第10章 sed 用法介绍
下载
10.4.9 最后一行
要打印最后一行，使用$。$是代表最后一行的元字符。
10.4.10 打印行号
要打印行号，使用等号=。打印模式匹配的行号，使用格式/ p a t t e r n / =。
整个文件都打印出来，并且匹配行打印了行号。如果只关心实际行号，使用 - e选项。
如果只打印行号及匹配行，必须使用两个 s e d命令，并使用e选项。第一个命令打印模式
匹配行，第二个使用=选项打印行号，格式为sed -n -e /pattern/p -e /pattern/=。
10.4.11 附加文本
要附加文本，使用符号a \，可以将指定文本一行或多行附加到指定行。如果不指定文本放
置位置，s e d缺省放在每一行后面。附加文本时不能指定范围，只允许一个地址模式。文本附
加操作时，结果输出在标准输出上。注意它不能被编辑，因为 s e d执行时，首先将文件的一行
文本拷贝至缓冲区，在这里 s e d编辑命令执行所有操作（不是在初始文件上），因为文本直接
输出到标准输出，s e d并无拷贝。
要想在附加操作后编辑文本，必须保存文件，然后运行另一个 s e d命令编辑它。这时文件
的内容又被移至缓冲区。
附加操作格式如下：
地址指定一个模式或行号，定位新文本附加位置。 a\ 通知s e d对a \后的文本进行实际附加
操作。观察格式，注意每一行后面有一斜划线，这个斜划线代表换行。 s e d执行到这儿，将创
建一新行，然后插入下一文本行。最后一行不加斜划线， s e d假定这是附加命令结尾。
当附加或插入文本或键入几个 s e d命令时，可以利用辅助的 s h e l l提示符以输入多行命令。
这里没有这样做，因为可以留给使用者自己编写，并且在一个脚本文件中写这样的语句更适
宜。现在马上讲述s e d脚本文件。另外，脚本可以加入空行和注释行以增加可读性。
加入java编程群：524621833
94
第二部分 文本过滤
下载
10.4.12 创建sed脚本文件
要创建脚本文件a p p e n d . s e d，输入下列命令：
保存它，增加可执行权限：
运行，
如果返回‘file not found’，试在脚本前加入. \。
现在查看其具体功能。第一行是s e d命令解释行。脚本在这一行查找s e d以运行命令，这里
定位在/ b i n。
第二行以/ c o m p a n y /开始，这是附加操作起始位置。 a \通知s e d这是一个附加操作，首先
应插入一个新行。第三行是附加操作要加入到拷贝的实际文本。
输出显示附加结果。如果要保存输出，重定向到一个文件。
10.4.13 插入文本
插入命令类似于附加命令，只是在指定行前面插入。和附加命令一样，它也只接受一个
地址。下面是插入命令的一般格式。地址是匹配模式或行号：
下面例子在以a t t e n d a n c e结尾的行前插入文本utter confusion followed。
运行结果是：
加入java编程群：524621833
95
第10章 sed 用法介绍
下载
也可以使用行号指定文本插入位置，插入位置在模式或指定行号 4之前。脚本如下：
10.4.14 修改文本
修改命令将在匹配模式空间的指定行用新文本加以替代，格式如下：
将第一行The honeysuckle band played all night long for only $90替换为The office Di b b l e
band played well。首先要匹配第一行的任何部分，可使用模式‘ / H o n e y s u c k l e /’。s e d脚本文
件为c h a n g e . s e d。内容如下：
运行它，不要忘了给脚本增加可执行权限。chmod u+x change.sed。
像插入动作一样，可以使用行号代替模式，两种方式完成相同的功能。
可以对同一个脚本中的相同文件进行修改、附加、插入三种动作匹配和混合操作。
下面是一个带有注释的脚本例子。
加入java编程群：524621833
96
第二部分 文本过滤
下载
运行它，结果如下：
10.4.15 删除文本
s e d删除文本格式：
[ a d d r e s s [，a d d r e s s ] ] d
地址可以是行的范围或模式，让我们看几个例子。
删除第一行；1 d意为删除第一行。
删除第一到第三行：
删除最后一行：
也可以使用正则表达式进行删除操作。下面的例子删除包含文本‘ N e a v e’的行。
10.4.16 替换文本
替换命令用替换模式替换指定模式，格式为：
[ a d d r e s s [，address]] s/ pattern-to-find /replacement-pattern/[g p w n]
s选项通知s e d这是一个替换操作，并查询p a t t e r n - t o - f i n d，成功后用r e p l a c e m e n t - p a t t e r n替
换它。
替换选项如下：
g 缺省情况下只替换第一次出现模式，使用g选项替换全局所有出现模式。
p 缺省s e d将所有被替换行写入标准输出，加 p选项将使- n选项无效。- n选项不打印输出
结果。
w 文件名 使用此选项将输出定向到一个文件。
加入java编程群：524621833
97
第10章 sed 用法介绍
下载
让我们看几个例子。替换 n i g h t为N I G H T，首先查询模式n i g h t，然后用文本N I G H T替换
它。
要从$ 9 0中删除 $符号（记住这是一个特殊符号，必须用 \屏蔽其特殊含义），在
r e p l a c e m e n t - p a t t e r n部分不写任何东西，保留空白，但仍需要用斜线括起来。在 s e d中也可以这
样删除一个字符串。
要进行全局替换，即替换所有出现模式，只需在命令后加 g选项。下面的例子将所有T h e
替换成Wo w！。
将替换结果写入一个文件用w选项，下面的例子将s p l e n d i d替换为S P L E N D I D的替换结果
写入文件s e d . o u t：
注意要将文件名括在s e d的单引号里。文件结果如下：
10.5 使用替换修改字符串
如果要附加或修改一个字符串，可以使用（ &）命令，&命令保存发现模式以便重新调用
它，然后把它放在替换字符串里面。这里给出一个修改的设计思路。先给出一个被替换模式，
然后是一个准备附加在第一个模式后的另一个模式，并且后面带有 &，这样修改模式将放在
匹配模式之前。例如，s e d语句s/nurse/"Hello"&/p 的结果如下：
原句是文本行The local nurse Miss P.Neave was in attendance。
记住模式中要使用空格，因为输出结果表明应加入空格。
还有一个例子：
原句是The honeysuckle band played all night long for only $90。相信这种修改动作已经讲
解得很清楚了。
10.6 将sed结果写入文件命令
像使用>文件重定向发送输出到一个文件一样，在 s e d命令中也可以将结果输入文件。格
式有点像使用替换命令：
加入java编程群：524621833
98
第二部分 文本过滤
下载
[ a d d r e s s [，address]]w filename
‘w’选项通知s e d将结果写入文件。f i l e n a m e是自解释文件名。下面有两个例子。
文件q u o t e . t x t输出到屏幕。模式范围即1，2行输出到文件f i l e d t。
下面例子中查询模式N e a v e，匹配结果行写入文件f i l e d h t。
10.7 从文件中读文本
处理文件时，s e d允许从另一个文件中读文本，并将其文本附加在当前文件。此命令放在
模式匹配行后，格式为：
address r filename
这里r通知s e d将从另一个文件源中读文本。f i l e n a m e是其文件名。
现在创建一个小文件s e d e x . t x t，内容如下：
将s e d e x . t x t内容附加到文件q u o t e . t x t的拷贝。在模式匹配行/ c o m p a n y /后放置附加文本。本
例为第三行。注意所读的文件名需要用单引号括起来。
10.8 匹配后退出
有时需要在模式匹配首次出现后退出s e d，以便执行其他处理脚本。退出命令格式为：
address q
下面的例子假定查询模式/ . a . * /，意为任意字符后跟字符a，再跟任意字符0次或任意多次。
查看文本文件，然后在下列行产生下列单词：
查询首次出现模式，然后退出。需要将q放在s e d语句末尾。
加入java编程群：524621833
99
第10章 sed 用法介绍
下载
10.9 显示文件中的控制字符
当从其他系统下载文件时，有时要删除整个文件的控制字符（非打印字符），从菜单中捕
获一个应用的屏幕输出有时也会将控制字符输出进文件，怎样知道文件中是否有控制字符？
使用cat -v filename命令，屏幕会乱叫，且到处都是一些垃圾字符，这可以确知文件中包含有
控制字符，如果有兴趣可以观察一下这些字符以便于更加确认它们是控制字符。
一些系统中使用cat filename而不是c a t - v来查看非打印字符。
s e d格式为：
[ a d d r e s s，[ a d d r e s s ] ] l
‘l’意为列表。
一般情况下要列出整个文件，而不是模式匹配行，因此使用 l要从第一到最后一行。模式
范围1，$即为此意。
如果c a t一个文件，发现实际上包含有控制字符。
现在运行s e d命令，观察输出结果。
s e d找到并显示了两个控制字符。\ 0 3 3代表退格键，O P为F 1键值，放在退格键后。第二行
也是如此。
各系统控制字符键值可能不同，主要取决于其映射方式（例如使用 t e r m i n f o或t e r m c a p）。
如果要在文本文件中插入控制字符F 1键，使用v i查看其键值，操作如下：
• 启动v i。
• 进入插入模式。
• 按下键，然后按键 （出现a ^）。
• 释放上述两个键。
• 按下F 1键（显示[ O P ]。
• 按下键（显示F 1键值）。
10.10 使用系统sed
前面已经讲述了s e d的基本功能，但是在脚本或命令行中使用s e d真正要做的是修改或删除
文件或字符串中文本。下面运用前面学过的知识讲述这一点。
10.10.1 处理控制字符
使用s e d实现的一个重要功能是在另一个系统中下载的文件中剔除控制字符。
下面是传送过来的文件（d o s . t x t）的部分脚本。必须去除所有可疑字符，以便于帐号所有
者使用文件。
加入java编程群：524621833
100
第二部分 文本过滤
下载