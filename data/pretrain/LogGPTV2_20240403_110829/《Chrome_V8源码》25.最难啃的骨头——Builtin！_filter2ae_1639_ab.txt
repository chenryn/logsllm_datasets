    //      Args: name, arguments count, explicit argument names...
    // TFS: Builtin in Turbofan, with CodeStub linkage.
    //      Args: name, explicit argument names...
    // TFC: Builtin in Turbofan, with CodeStub linkage and custom descriptor.
    //      Args: name, interface descriptor
    // TFH: Handlers in Turbofan, with CodeStub linkage.
    //      Args: name, interface descriptor
    // BCH: Bytecode Handlers, with bytecode dispatch linkage.
    //      Args: name, OperandScale, Bytecode
    // ASM: Builtin in platform-dependent assembly.
    //      Args: name, interface descriptor
**（2）** `SetupBuiltinsInternal()`的第38行代码BUILTIN_LIST定义了所有的Builtin,源码如下：
    1.  #define BUILTIN_LIST(CPP, TFJ, TFC, TFS, TFH, BCH, ASM)  \
    2.    BUILTIN_LIST_BASE(CPP, TFJ, TFC, TFS, TFH, ASM)        \
    3.    BUILTIN_LIST_FROM_TORQUE(CPP, TFJ, TFC, TFS, TFH, ASM) \
    4.    BUILTIN_LIST_INTL(CPP, TFJ, TFS)                       \
    5.    BUILTIN_LIST_BYTECODE_HANDLERS(BCH)
    6.  //================分隔线=================================
    7.  #define BUILTIN_LIST_FROM_TORQUE(CPP, TFJ, TFC, TFS, TFH, ASM) \
    8.  //...............省略............................
    9.  TFJ(StringPrototypeToString, 0, kReceiver) \
    10.  TFJ(StringPrototypeValueOf, 0, kReceiver) \
    11.  TFS(StringToList, kString) \
    12.  TFJ(StringPrototypeCharAt, 1, kReceiver, kPosition) \
    13.  TFJ(StringPrototypeCharCodeAt, 1, kReceiver, kPosition) \
    14.  TFJ(StringPrototypeCodePointAt, 1, kReceiver, kPosition) \
    15.  TFJ(StringPrototypeConcat, SharedFunctionInfo::kDontAdaptArgumentsSentinel) \
    16.  TFJ(StringConstructor, SharedFunctionInfo::kDontAdaptArgumentsSentinel) \
    17.  TFS(StringAddConvertLeft, kLeft, kRight) \
    18.  TFS(StringAddConvertRight, kLeft, kRight) \
    19.  TFJ(StringPrototypeEndsWith, SharedFunctionInfo::kDontAdaptArgumentsSentinel) \
    20.  TFS(CreateHTML, kReceiver, kMethodName, kTagName, kAttr, kAttrValue) \
    21.  TFJ(StringPrototypeAnchor, SharedFunctionInfo::kDontAdaptArgumentsSentinel) \
    22.  TFJ(StringPrototypeBig, SharedFunctionInfo::kDontAdaptArgumentsSentinel) \
    23.  TFJ(StringPrototypeIterator, 0, kReceiver) \
    24.  TFJ(StringIteratorPrototypeNext, 0, kReceiver) \
    25.  TFJ(StringPrototypePadStart, SharedFunctionInfo::kDontAdaptArgumentsSentinel) \
    26.  TFJ(StringPrototypePadEnd, SharedFunctionInfo::kDontAdaptArgumentsSentinel) \
    27.  TFS(StringRepeat, kString, kCount) \
    28.  TFJ(StringPrototypeRepeat, 1, kReceiver, kCount) \
    29.  TFJ(StringPrototypeSlice, SharedFunctionInfo::kDontAdaptArgumentsSentinel) \
    30.  TFJ(StringPrototypeStartsWith, SharedFunctionInfo::kDontAdaptArgumentsSentinel) \
    31.  TFJ(StringPrototypeSubstring, SharedFunctionInfo::kDontAdaptArgumentsSentinel) \
BUILTIN_LIST和BUILTIN_LIST_FROM_TORQUE配合使用可以看到所有的Builtin名字，第9-31行代码可以看到实现字符串方法的Builtin的名字，例如substring的Builtin是StringPrototypeSubstring。  
 **（3）** BUILD_CPP,
BUILD_TFJ等七个宏和BUILTIN_LIST的共同配合完成所有Builtin的初始化。以`SetupBuiltinsInternal()`的BUILD_CPP为例进一步分析，源码如下：
    1.    int index = 0;
    2.    Code code;
    3.  #define BUILD_CPP(Name)                                                      \
    4.    code = BuildAdaptor(isolate, index, FUNCTION_ADDR(Builtin_##Name), #Name); \
    5.    AddBuiltin(builtins, index++, code);
    //...................分隔线.................
    // FUNCTION_ADDR(f) gets the address of a C function f.
    #define FUNCTION_ADDR(f) (reinterpret_cast(f))
index的初始值为0，code是一个基于HeapObject的地址指针，用于保存生成的Builtin地址。`FUNCTION_ADDR(Builtin_##Name)`创建Builtin的地址指针，在`BuildAdaptor()`中完成Builtin的创建时会使用该指针。`BuildAdaptor()`的源码如下：
    Code BuildAdaptor(Isolate* isolate, int32_t builtin_index,
                      Address builtin_address, const char* name) {
      HandleScope scope(isolate);
      // Canonicalize handles, so that we can share constant pool entries pointing
      // to code targets without dereferencing their handles.
      CanonicalHandleScope canonical(isolate);
      constexpr int kBufferSize = 32 * KB;
      byte buffer[kBufferSize];
      MacroAssembler masm(isolate, BuiltinAssemblerOptions(isolate, builtin_index),
                          CodeObjectRequired::kYes,
                          ExternalAssemblerBuffer(buffer, kBufferSize));
      masm.set_builtin_index(builtin_index);
      DCHECK(!masm.has_frame());
      Builtins::Generate_Adaptor(&masm, builtin_address);
      CodeDesc desc;
      masm.GetCode(isolate, &desc);
      Handle code = Factory::CodeBuilder(isolate, desc, Code::BUILTIN)
                              .set_self_reference(masm.CodeObject())
                              .set_builtin_index(builtin_index)
                              .Build();
      return *code;
    }
上述代码中，通过`Generate_Adaptor`和`Factory::CodeBuilder`完成Builtin的创建，code表示Builtin的地址。  
返回到`#define BUILD_CPP(Name)`，进入`AddBuiltin`，源码如下：
    void SetupIsolateDelegate::AddBuiltin(Builtins* builtins, int index,
                                          Code code) {
      DCHECK_EQ(index, code.builtin_index());
      builtins->set_builtin(index, code);
    }
    //..............分隔线.......................
    void Builtins::set_builtin(int index, Code builtin) {
      isolate_->heap()->set_builtin(index, builtin);
    }
    //.............分隔线..........................
    void Heap::set_builtin(int index, Code builtin) {
      DCHECK(Builtins::IsBuiltinId(index));
      DCHECK(Internals::HasHeapObjectTag(builtin.ptr()));
      // The given builtin may be completely uninitialized thus we cannot check its
      // type here.
      isolate()->builtins_table()[index] = builtin.ptr();
    }
上述代码中，`Builtins::set_builtin()`调用`Heap::set_builtin()`把Builtin存储到`isolate()->builtins_table()`中。`builtin_table`是`V8_INLINE
Address*`类型的数组，`index`是数组下标，该数组存储了所有的Builtin。至此，Builtin初始化完成，图2是函数调用堆栈。
Buitlin的调试方法总结如下：  
 **（1）** 把BUILTIN_LIST宏展开，得到每个Builtin的编号index。可以借助VS2019的预处理来展开宏。  
 **（2）** 使用index设置条件断点，图3展示了跟踪12号Builtin的方法。
在Builtin的源码下断点是最简单直接的方法，如果你不知道Builtin是用哪种方式实现的（如`BUILD_CPP`或`BUILD_TFS`），那就在每个方法中都设置条件断点。图4中是在Substring源码中下的断点。
**技术总结**  
 **（1）** 调试Bultin时要使用7.x版的V8,高版本中已经没有v8_use_snapshot了；  
 **（2）** 编译V8时需要设置v8_optimized_debug = false，关闭compiler optimizations；  
 **（3）** 因为builtin_index是int32_t，设置条件断点时要用使用(int)builtin_index。
好了，今天到这里，下次见。
**个人能力有限，有不足与纰漏，欢迎批评指正**  
 **微信：qq9123013 备注：v8交流 邮箱：[PI:EMAIL](mailto:PI:EMAIL)**