an interesting direction for future research. Let ∆t denote
the client’s estimation of the time, measured in seconds, that
passed since its last synchronization to the server pool. We
deﬁne the error margin ERR to be Θ·∆t
1000 .
We refer to an NTP server whose local clock is at most
at distance ω from the UTC, for some predetermined value
ω, as a truechimer. Observe that the local times at any two
truechimers can be at most 2ω away from each other. We
discuss in Section V-B how the value of ω should be set in
Chronos so as to strike a good balance between communication
overhead and security guarantees. Our empirical observations
(presented in Section V-B) suggest that setting ω to be in the
range 25 − 30ms provides both high time accuracy and good
security.
Chronos checks whether the m−2d time samples surviving
the elimination of the 2d outliers satisfy two conditions:
•
•
The maximal distance between every two time sam-
ples does not exceed 2ω.
The average value of the m − 2d time samples is at
distance at most ERR+2ω from the time tC indicated
by the client’s local clock.
In the event that both of these conditions are satisﬁed, the
local clock is updated to be the average time value. Otherwise,
m servers in the server pool are sampled again in the exact
same manner. This re-sampling process continues until the
two conditions are ﬁnally satisﬁed or the number of times the
servers are re-sampled exceeds a “Panic Trigger” K, in which
case, Chronos enters a “Panic Mode”.
Panic mode. Upon entering the Panic Mode, a Chronos client
queries all n servers in the server pool, orders the collected
time samples from lowest to highest and eliminates the bottom
third and the top third of the samples. The client then averages
over the remaining samples and updates the local clock to be
the computed value.
Remark I: Initializing Chronos. When a Chronos client
synchronizes to NTP servers for the ﬁrst time, this involves
querying many servers, as in the above described Panic Mode.
Remark II: Accuracy. Chronos is designed to select time
samples in a manner that yields provable security guarantees
(see Section IV). Importantly, however, Chronos can easily be
augmented with today’s NTP clients “sanity checks”, aimed to
improve accuracy, minimize jitter, etc., without compromising
its security guarantees.
In fact, the only component of the NTP client’s multi-
step synchronization algorithm that is modiﬁed in Chronos is
the Clock Select Algorithm [1], [31]. In particular, Chronos’
sample-selection scheme, as described above, can be ap-
plied after gathering multiple time-samples from each queried
servers and removing all but
the lowest-offset sample per
server as in NTP’s Clock Filter Algorithm [1], [31]). In
addition, the time-samples that survive Chronos’ removal of
top and bottom samples can be further pruned as in NTP’s
Cluster Algorithm [1], [31].
IV. SECURITY GUARANTEES
We discuss below our threat model and then present
Chronos’ security guarantees.
A. Threat Model
We consider a fairly powerful (in the NTP context) form
of man-in-the-middle (MitM) Byzantine [4] attacker. MitM
attackers in our model are capable of determining precisely the
values of the time samples gathered by the Chronos client from
a subset of the NTP servers in its server pool. Our threat model
thus encompasses a broad spectrum of MitM attackers ranging
from fairly weak (yet dangerous) MitM attackers only capable
of delaying and dropping packets to extremely powerful MitM
attackers who control authenticated NTP servers and can
perfectly time the arrival times at the client of NTP responses
from these servers.
MitM attackers captured by our framework might be,
e.g., (1) in direct control of a fraction of the NTP servers
(e.g., by exploiting a software vulnerability in a speciﬁc NTP
implementation, or through physical presence), (2) an ISP (or
other Autonomous-System-level attacker) on the default BGP
paths from the NTP client to a fraction of the available servers,
(3) a nation state with authority over the owners of NTP servers
in its jurisdiction, or (4) an attacker capable of hijacking (e.g.,
through DNS cache poisoning or BGP preﬁx hijacking) trafﬁc
to some of the available NTP servers. Importantly, we abstract
away the details of the speciﬁc attack scenario by reasoning
about MitM attackers in terms of the fraction of servers with
respect to whom the attacker has MitM capabilities.
Speciﬁcally, we quantify the attacker’s MitM capabilities in
terms of a value p ∈ [0, 1] p indicates the probability, for each
and every server in the client’s server pool, that the attacker
controls that NTP server. p = 0.1, for instance, means that
the attacker controls each server with probability 0.1 and thus
controls 10% of the server pool in expectation.
We refer to servers not controlled by the attacker as
truechimers and assume that the local clock of each truechimer
is at most at distance ω from the UTC, for some predetermined
value ω (see discussion in Section V-B about good choices of
ω).
Remark I: Servers with inaccurate clocks are modeled as
controlled by the attacker. Observe that our model does not
explicitly reason about “honest” servers with inaccurate clocks
(“falsetickers” in [33]). To provide strong security guarantees,
our security analysis relies on the assumption that all non-
truechimers are controlled by an attacker who can adversarially
and arbitrarily manipulate time samples.
Remark II: Some MitM attackers are indeed too powerful
for NTP. A MitM attacker in control of a majority of the NTP
servers in the server pool can manipulate time as it pleases
under any NTP security scheme. To see this, consider the
scenario that all attacker-controlled NTP servers report the
same (false) time when queried and the timesamples of all
truechimers are precisely the UTC. Observe that this scenario
is indistinguishable, from the NTP client’s perspective, from
the scenario that the attacker-controlled servers are actually the
truechimers and vice versa.
Hence, if the attacker is, e.g., the client’s sole network
gateway (say, a compromised home router), then no level of
security is achievable. Thus, the security of any NTP client
is subject to the assumption that the attacker does not have
MitM capabilities with respect to “too many of the servers”.
Our results below show that Chronos is capable of providing
meaningful security guarantees even with respect to MitM
attackers in control of a large fraction (e.g., one third) of the
servers.
B. Security Analysis
We present below the security analysis of Chronos’ time
computation scheme. We ﬁrst present an illustration of the
established security guarantees for reasonable choices of pa-
rameters (see discussion of parameter values in the remainder
of this section and in Section IV-E): n = 500, m = 15, d = 5,
ω = 25ms, K = 4, and p = 1
7.
Theorem 4.1: When n = 500, m = 15, d = 5, ω = 25ms,
7, Err = 50ms, and the Chronos client
K = 4, p = 1
synchronizes once an hour:
1)
2)
To succeed in shifting time at a Chronos client by at
least 100ms from the UTC, the attacker requires at
least 22 years in expectation.
To succeed in creating a time difference of at least
100ms between two Chronos clients,
the attacker
requires at least 11 years in expectation.
The proof of Theorem 4.1 follows from plugging in the
above parameters into the security analysis presented below.
Since local clocks tend to drift, NTP clients must synchro-
nize with NTP servers periodically so that the time distance
from the UTC does not exceed a certain bound. The length of
the time interval between synchronization periods is set to be
such that, despite the drift, the local clock is still within some
desired range from the UTC. See [6] for a thorough analysis
of how to set this value. To simplify exposition, our analysis
below assumes that synchronization occurs frequently (say, on
an hourly basis, as with today’s NTP clients), and so ignores
drift-related factors.
To gain intuition into Chronos’ security guarantees, con-
sider ﬁrst a single application of Chronos’ time sampling
scheme (we later discuss the effect of multiple re-samplings
and of the Panic Mode). As explained in Section III-B, the
Chronos client queries m servers, chosen uniformly at random
from a server-pool of size n. Suppose that an attacker controls
some of the servers in the server-pool. We next consider
7
Figure 3: Case I, scenario I: all truechimers’ time samples are
discarded
Figure 5: Case II: all surviving m − 2d samples are reported
by the attacker
a
i.e.,
at
least
are discarded,
from UTC and consequently, the average value is also
within ω distance from the UTC. Hence, this attack
strategy is ineffective.
Consider next the scenario that not all truechimers’
samples
single
truechimer’s sample survives the elimination. Since
Chronos checks that every two surviving samples are
at distance no more than 2ω from each other, for the
attacker to pass this test all bogus samples must be
within this distance from this truechimer’s sample and,
consequently, so is the average value. Hence, again,
this attack strategy is ineffective. Figure 4 illustrates
this scenario.
Case II: At least m − d of the queried servers
are under the attacker’s control. Observe that, in
this scenario, the attacker can dictate the computed
average time value simply by ensuring that all (at
most d) truechimers’ samples are within the d lowest
time samples or that all
truechimers’ samples are
within the d highest samples. Figure 5 illustrates this
scenario. We show below, however, that this happens
with tiny probability. We stress, moreover, that even
if the attacker succeeds in controlling at least m − d
of the queried servers, Chronos’ validation that the
average time value is not “too far” from the local time
implies that the attacker cannot shift the local time by
“too much”, namely, more than Err+2ω. This implies
that the attacker must succeed in attaining such large
presence in the sampled set multiple times to cause
signiﬁcant time shifts. We discuss this further below.
Let Y be the random variable that captures the number of
servers controlled by the attacker in the set of m randomly
chosen servers queried by the Chronos client. The probability
that the attacker controls r servers in the m samples is:
(cid:18)m
(cid:19)
r
PY =r = Pr = pr · (1 − p)m−r ·
(1)
Hence, the probability that the attacker controls more than
8
Figure 4: Case I, scenario II: at least one of the m − 2d
surviving time samples is of a “truechimer”.
•
the spectrum of feasible attack scenarios so to evaluate the
effectiveness of Chronos in thwarting timeshifting attacks.
•
Case I: Less than m − d of the queried servers
are under the attacker’s control. Observe that, in
this scenario, since at least d + 1 of the time samples
are reported by truechimers, the attacker is faced with
a choice between two strategies: (1) reporting time
values so that all truechimers’ time samples are dis-
carded by Chronos (this is only feasible if the attacker
controls sufﬁciently many servers), and (2) reporting
time values such that at least a single truechimer’s
sample survives Chronos’ sample elimination.
Now, consider the ﬁrst of these two scenarios. As the
attacker controls less than m − d of the m sampled
servers, at least d + 1 of the servers are truechimers.
Since Chronos discards the d bottom samples and the
d top samples, the elimination of all d + 1 truechimers
samples implies that at least a one truechimer’s sample
is at the bottom d values and at least a one honest
sample is at the top d values. Figure 3 illustrates this
scenario. Consequently, all surviving m − 2d samples
must be between two truechimers samples. However,
this implies that all these samples are at most ω-away
Figure 6: Probability that the attacker controls at least m − d
samples in one sampling iteration
Figure 8: Probability that the attacker controls at least m − d
samples in two sampling iterations
values of m the probability is tiny. We set d = m
3 since this
value provides the highest level of security in this context [6],
[15], [44].
Recall, however, that (when not in Panic Mode) Chronos
only updates the local clock at the client if the newly computed
time value is “close” to the local time, i.e., at distance at most
Err + 2ω. Hence, even if the attacker-controlled servers in
the sample constitute at least two thirds, the attacker cannot
change the local time by “too much” (otherwise the server pool
is re-sampled). Hence, to succeed in signiﬁcantly shifting the
time at the client, the attacker must succeed in controlling at
least two thirds of the sampled servers in several server-polls.
The probability of succeeding in doing so two times is upper
bounded by P 2
(m−d,m], which, as illustrated in Figure 8, is
negligible.
Upon reaching Panic Mode, Chronos queries all servers in
the server pool. The analysis of this scenario is equivalent to
substituting m with n in Equation 3 (as now the sampled set
consists of all servers in the server pool). Thus, so long as
3, for large
the attacker’s MitM capabilities are below p = 1
values n, e.g., in the order of hundreds, the attacker’s ability
desynchronize the client is practically nonexistent.
C. Selecting d
Intuitively, the choice of value for d, i.e., of the number of
top samples and bottom samples to discard, involves a tradeoff:
the lower the value of d, the easier it is for the attacker to
“contaminate” at least one of the time samples that survive
Chronos’ elimination of the d highest and d lowest time-
values (by controlling at least d+1 of the m sampled servers);
the higher the value of d, the easier it is for the attacker to
contaminate all these samples (by controlling at least m − d
of the sampled servers). What should the value of d be then?
To formalize the above, suppose that the attacker controls
αn of the servers in the server pool. Then, asymptotically, so
long as d > αm, the attacker’s probability of being in control
(cid:18)m
(cid:19)
(3)
Figure 7: Probability that the attacker controls at least m − d
samples in one sampling iteration (log scale)
k1 servers and at most k2 servers is:
k2(cid:88)
P (k1 < Y ≤ k2) = P(k1,k2] =
pk · (1 − p)m−k ·
k=k1+1
k
(2)
the number of attacker-controlled
The probability that
servers is at least m − d (Case II above) is thus:
pk · (1 − p)m−k ·