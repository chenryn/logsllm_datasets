### An Interesting Direction for Future Research

Let \(\Delta t\) denote the client’s estimation of the time, measured in seconds, that has passed since its last synchronization with the server pool. We define the error margin \(ERR\) as:
\[ ERR = \frac{\Theta \cdot \Delta t}{1000} \]

An NTP server whose local clock is at most \(\omega\) away from the UTC, for some predetermined value \(\omega\), is referred to as a truechimer. Note that the local times at any two truechimers can differ by at most \(2\omega\). In Section V-B, we discuss how to set the value of \(\omega\) in Chronos to balance communication overhead and security guarantees. Our empirical observations (presented in Section V-B) suggest that setting \(\omega\) in the range of 25-30 ms provides both high time accuracy and good security.

### Chronos Time Synchronization Process

Chronos checks whether the \(m - 2d\) time samples, after eliminating the \(2d\) outliers, satisfy the following conditions:
1. The maximum distance between any two time samples does not exceed \(2\omega\).
2. The average value of the \(m - 2d\) time samples is within \(ERR + 2\omega\) of the time \(t_C\) indicated by the client’s local clock.

If both conditions are satisfied, the local clock is updated to the average time value. Otherwise, the process resamples \(m\) servers in the same manner. This resampling continues until the conditions are met or the number of resamplings exceeds a "Panic Trigger" \(K\), in which case Chronos enters "Panic Mode."

#### Panic Mode

In Panic Mode, the Chronos client queries all \(n\) servers in the server pool, orders the collected time samples from lowest to highest, and eliminates the bottom third and the top third of the samples. The client then averages the remaining samples and updates the local clock to this computed value.

**Remark I: Initializing Chronos**
When a Chronos client synchronizes with NTP servers for the first time, it involves querying many servers, similar to the Panic Mode.

**Remark II: Accuracy**
Chronos is designed to select time samples in a manner that provides provable security guarantees (see Section IV). Importantly, Chronos can be augmented with today's NTP clients' "sanity checks" to improve accuracy and minimize jitter without compromising security.

In fact, the only component of the NTP client’s multi-step synchronization algorithm that is modified in Chronos is the Clock Select Algorithm [1], [31]. Specifically, Chronos’ sample-selection scheme, as described above, can be applied after gathering multiple time samples from each queried server and removing all but the lowest-offset sample per server, as in NTP’s Clock Filter Algorithm [1], [31]. Additionally, the time samples that survive Chronos’ removal of top and bottom samples can be further pruned using NTP’s Cluster Algorithm [1], [31].

### Security Guarantees

We discuss our threat model and then present Chronos’ security guarantees.

#### A. Threat Model

We consider a powerful (in the NTP context) form of man-in-the-middle (MitM) Byzantine [4] attacker. MitM attackers in our model can precisely determine the values of the time samples gathered by the Chronos client from a subset of the NTP servers in its server pool. Our threat model encompasses a broad spectrum of MitM attackers, ranging from those capable of delaying and dropping packets to extremely powerful ones who control authenticated NTP servers and can perfectly time the arrival of NTP responses.

MitM attackers in our framework might include:
1. Those in direct control of a fraction of the NTP servers (e.g., through software vulnerabilities or physical presence).
2. ISPs or other Autonomous-System-level attackers on the default BGP paths from the NTP client to a fraction of the available servers.
3. Nation-states with authority over the owners of NTP servers in their jurisdiction.
4. Attackers capable of hijacking traffic to some of the available NTP servers (e.g., through DNS cache poisoning or BGP prefix hijacking).

We quantify the attacker’s MitM capabilities using a value \(p \in [0, 1]\), where \(p\) indicates the probability that the attacker controls each server in the client’s server pool. For example, \(p = 0.1\) means the attacker controls each server with a probability of 0.1, thus controlling 10% of the server pool in expectation.

Servers not controlled by the attacker are called truechimers, and we assume their local clocks are at most \(\omega\) away from the UTC for some predetermined value \(\omega\) (see Section V-B for good choices of \(\omega\)).

**Remark I: Servers with inaccurate clocks**
Servers with inaccurate clocks are modeled as controlled by the attacker. Our model does not explicitly reason about "honest" servers with inaccurate clocks ("falsetickers" in [33]). To provide strong security guarantees, our analysis assumes that all non-truechimers are controlled by an attacker who can adversarially and arbitrarily manipulate time samples.

**Remark II: Powerful MitM attackers**
A MitM attacker in control of a majority of the NTP servers in the server pool can manipulate time as they please under any NTP security scheme. If the attacker is, for example, the client’s sole network gateway (e.g., a compromised home router), no level of security is achievable. Thus, the security of any NTP client is subject to the assumption that the attacker does not have MitM capabilities with respect to too many servers. Our results show that Chronos can provide meaningful security guarantees even against MitM attackers controlling a large fraction (e.g., one-third) of the servers.

#### B. Security Analysis

We present the security analysis of Chronos’ time computation scheme. We first illustrate the established security guarantees for reasonable parameter choices (see discussion of parameter values in the remainder of this section and in Section IV-E): \(n = 500\), \(m = 15\), \(d = 5\), \(\omega = 25\) ms, \(K = 4\), and \(p = \frac{1}{7}\).

**Theorem 4.1:**
When \(n = 500\), \(m = 15\), \(d = 5\), \(\omega = 25\) ms, \(K = 4\), \(p = \frac{1}{7}\), and the Chronos client synchronizes once an hour:
1. To shift time at a Chronos client by at least 100 ms from the UTC, the attacker requires at least 22 years in expectation.
2. To create a time difference of at least 100 ms between two Chronos clients, the attacker requires at least 11 years in expectation.

The proof of Theorem 4.1 follows from plugging in the above parameters into the security analysis presented below. Since local clocks tend to drift, NTP clients must synchronize with NTP servers periodically to keep the time distance from the UTC within a certain bound. The length of the time interval between synchronization periods is set such that, despite the drift, the local clock remains within a desired range from the UTC. Our analysis assumes frequent synchronization (e.g., hourly, as with today’s NTP clients) and ignores drift-related factors.

To gain intuition into Chronos’ security guarantees, consider a single application of Chronos’ time sampling scheme. The Chronos client queries \(m\) servers, chosen uniformly at random from a server-pool of size \(n\). Suppose an attacker controls some of the servers in the server-pool. We consider the following scenarios:

**Case I: Less than \(m - d\) of the queried servers are under the attacker’s control.**
- At least \(d + 1\) of the time samples are reported by truechimers.
- The attacker has two strategies: (1) report time values so that all truechimers’ time samples are discarded, or (2) report time values such that at least one truechimer’s sample survives.

**Scenario 1: All truechimers’ time samples are discarded.**
- The attacker must ensure that at least one truechimer’s sample is among the bottom \(d\) values and at least one among the top \(d\) values.
- This implies that all surviving \(m - 2d\) samples are between two truechimers’ samples, making them within \(\omega\) distance from the UTC. Hence, this attack strategy is ineffective.

**Scenario 2: At least one truechimer’s sample survives.**
- Since Chronos checks that every two surviving samples are at most \(2\omega\) apart, the attacker must ensure that all bogus samples are within this distance from the truechimer’s sample.
- Consequently, the average value is also within \(\omega\) distance from the UTC, making this attack strategy ineffective.

**Case II: At least \(m - d\) of the queried servers are under the attacker’s control.**
- The attacker can dictate the computed average time value by ensuring that all truechimers’ samples are within the \(d\) lowest or \(d\) highest samples.
- Even if the attacker succeeds in controlling at least \(m - d\) of the queried servers, Chronos’ validation ensures that the average time value is not too far from the local time, limiting the shift to \(ERR + 2\omega\).
- The attacker must succeed in controlling at least \(m - d\) of the sampled servers multiple times to cause significant time shifts.

Let \(Y\) be the random variable that captures the number of servers controlled by the attacker in the set of \(m\) randomly chosen servers. The probability that the attacker controls \(r\) servers in the \(m\) samples is:
\[ P(Y = r) = \binom{m}{r} p^r (1 - p)^{m-r} \]

The probability that the attacker controls more than \(m - d\) servers is:
\[ P(Y \geq m - d) = \sum_{k=m-d}^{m} \binom{m}{k} p^k (1 - p)^{m-k} \]

For large values of \(m\), this probability is tiny. We set \(d = \frac{m}{3}\) as this value provides the highest level of security in this context [6], [15], [44].

Even if the attacker-controlled servers constitute at least two-thirds of the sample, the attacker cannot change the local time by too much (otherwise, the server pool is resampled). To significantly shift the time at the client, the attacker must succeed in controlling at least two-thirds of the sampled servers in several server polls. The probability of succeeding in doing so twice is upper bounded by \(P^2\), which is negligible.

Upon reaching Panic Mode, Chronos queries all servers in the server pool. The analysis is equivalent to substituting \(m\) with \(n\) in the equation. So long as the attacker’s MitM capabilities are below \(p = \frac{1}{3}\), for large values of \(n\), the attacker’s ability to desynchronize the client is practically nonexistent.

### C. Selecting \(d\)

The choice of \(d\), the number of top and bottom samples to discard, involves a trade-off:
- Lower \(d\): Easier for the attacker to contaminate at least one of the surviving time samples.
- Higher \(d\): Easier for the attacker to contaminate all these samples.

Suppose the attacker controls \(\alpha n\) of the servers in the server pool. Asymptotically, so long as \(d > \alpha m\), the attacker’s probability of being in control of the sampled set is:
\[ P(k_1 < Y \leq k_2) = \sum_{k=k_1+1}^{k_2} \binom{m}{k} p^k (1 - p)^{m-k} \]

The probability that the number of attacker-controlled servers is at least \(m - d\) (Case II) is:
\[ P(Y \geq m - d) = \sum_{k=m-d}^{m} \binom{m}{k} p^k (1 - p)^{m-k} \]

This formalization helps in selecting an appropriate value for \(d\) to balance security and robustness.