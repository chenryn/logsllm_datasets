overflow attacks can be found in [1]. 
Stack Buffer Overflow 
void exp1() { 
  char buf[10]; 
  scanf("%s",buf); 
}
Heap Corruption Attack 
void exp2() { 
  char * buf; 
  buf = malloc(8);  
  scanf("%s",buffer); 
  free(p) 
}
Format String Attack 
void  exp3(int s) { 
  char buf[100]; 
  recv(s,buf,100,0); 
  printf(buf); 
}
Low address
Stack grows
High address
buffer buf
10 bytes
…
Low address
p
F
r
a
m
e
i
p
o
n
e
r
t
t
R
e
u
r
n
a
d
d
r
.
…
Tainted Data
High address
F
o
r
w
a
r
d
l
i
n
k
B
a
c
k
w
a
r
d
l
i
n
k
Free 
Chunk
A
…
Allocated 
buffer buf
8 bytes
…
F
o
r
w
a
r
d
l
i
n
k
B
a
c
k
w
a
r
d
l
i
n
k
Free 
Chunk
B
…
F
o
r
w
a
r
d
l
i
n
k
B
a
c
k
w
a
r
d
l
i
n
k
Free 
Chunk
C
Tainted Data
unallocated space
Tainted unallocated space
Low address
Stack grows
High address
User input
abcd%x%x%x%n
…
0
x
6
4
6
3
6
2
6
1
initial ap
ap
%x
%x %x %n
…
Figure 2: Examples of Stack Buffer Overflow, Heap Corruption and Format String Attacks 
initial fmt
fmt
Tainted Data
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:19:55 UTC from IEEE Xplore.  Restrictions apply. 
Heap  corruption  attack.  Free  memory  chunks  are 
organized  by  the  heap  manager  as  a  doubly  linked  list. 
Programming  errors,  such  as  heap  buffer  overflow  and 
double  free,  allow  malicious  users  to  corrupt  the  forward 
and  backward  links  (i.e.,  pointers)  in  this  list.  In  function 
exp2(), the buffer buf with 8 bytes is allocated on the heap, 
followed  by  a  free  memory  chunk    (chunk  B).    The 
beginning  few  bytes  of  each  free  chunk  are  used  as  the 
forward link (fd) and the backward link (bk) of the double-
linked list. In this case, since free chunks A, B, and C are 
in the list: B->fd=A, B->bk=C. The scanf() call allows an 
attacker  to  overflow  buf,  causing  B->fd  and  B->bk  to  be 
tainted. When buf is to be freed later, memory chunk B is 
taken  out  of  the  doubly  linked  list,  during  which  the 
assignment  B->fd->bk=B->bk  is  executed.  Since  both  B-
>fd  and  B->bk are tainted pointers, the attacker can write 
an  arbitrary  word  to  an  arbitrary  memory  location. 
Traditionally,  the  attacker  exploits  this  vulnerability  to 
overwrite  control  data,  such  as  return  addresses,  function 
pointers,  and  GOT  entries3  in  order  to  execute  malicious 
binaries  supplied  by 
the  attacker.  A  more  detailed 
explanation of heap corruption attacks can be found in [3]. 
Format string attack. Format string attacks exploit the 
vulnerabilities  caused  by  incorrect  invocations  of  printf-
like functions, such as printf, sprintf, and syslog. Function 
exp3()  contains  such  a  vulnerability  where  the  user  input 
buffer buf is used as the first argument of printf, although 
the  correct 
invocation  should  be  printf(“%s”,buf).
Because  buf  is  filled  in  the  recv()  call,  the data in buf are 
tainted.  For  example,  an  attacker  can  send  a  string 
abcd%x%x%x%n 
location 
0x64636261, corresponding to the leading four bytes of the 
input string “abcd”. The internal mechanism of the format 
string  attack  is  as  follows:  vfprintf()  is  a  child  function  of 
printf(),  which  has  two  pointers:  fmt  is  the  format  string 
pointer  to  sweep  over  the  format  string  (buf  in  our 
example),  and  ap  is  the  argument  pointer  to  scan  through 
the  argument  list  corresponding  to  the  format  directives 
(e.g.,  %x, %d  and  %n).  When  fmt  points  to  the  format 
directive  %n,  an  integer  count  is  written  to  the  location 
pointed  by  *ap,  i.e.,  *ap=count.  The  attacker  embeds %x
directives in order to precisely move pointers ap and fmt so 
that  when  fmt  points  to  %n, ap  happens  to  move  into  the 
tainted 
the  word  0x64636261.
Therefore, 
is  effectively 
*0x64636261=count,  allowing  the  attacker  to  specify  an 
arbitrary  location  to  write.  The  root  cause  of  the  attack, 
again,  is  the  pointer  taintedness:  0x64636261  is  a  tainted 
word  that  is  dereferenced  as  a  pointer.  The  format  string 
attack is also explained in a publicly available article [22]. 
statement  *ap=count 
region,  pointing 
to  overwrite 
the  memory 
to 
the 
3 The GOT entry is a function pointer. Usually, in position-independent 
code,  e.g.,  shared  libraries,  all  absolute  symbols  must  be  located  in  the 
GOT,  leaving  the  code  position-independent.  A  GOT  lookup  is 
performed to decide the callee’s entry when a library function is called. 
The  above  examples  show that pointer taintedness is a 
common  root  cause  of  many  memory  corruption  attacks. 
This  suggests  an  opportunity  for  defeating  such  attacks: 
preventing tainted data from being dereferenced. 
4. Architectural 
Support 
for 
Pointer 
Taintedness Detection 
This section presents the design and implementation of 
the  architecture  for  pointer  taintedness  detection.  Briefly, 
we  extend  the  existing  memory  system  by  adding  an 
additional  taintedness  bit  to  each  byte,  in  order  to 
implement  the  memory  model  we  proposed  in  [10].  The 
taintedness  bit  is  set  whenever  data  from  input  devices  is 
copied  into  the  memory.  Within  the  processor  execution 
engine, the taintedness bit is propagated when tainted data 
are used for an operation. Whenever a tainted word is used 
as  an  address  value  for  memory  access  (data  or  code 
accesses),  an  exception  is  raised  by  the  processor.  The 
operating system then handles the exception and stops the 
current process to defeat the ongoing attack. 
4.1. Extended Memory Architecture 
The memory system architecture is extended to support 
the  notion  of  taintedness.  A  taintedness  bit  is  associated 
with  each  byte  in  memory.  When  a  memory  word  is 
accessed  by  the  processor,  the  taintedness  bits  are  passed 
through  the  memory  hierarchy  together  with  the  actual 
memory words. L2 and L1 caches and data storage within 
the processor (registers and buffers) are also extended with 
the additional taintedness bits.  
The  detection  mechanism  is  designed  on  top  of  the 
extended  memory  model.  Although 
the  underlying 
principle  is  general  enough  to  be  applicable  to  other 
architectures,  the  discussion  is  given  in  the  context  of 
SimpleScalar  RISC  architecture.  Figure  3  gives  the 
enhancements  of 
taintedness  detection 
mechanism implemented as extensions of SimpleScalar.
the  pointer 
4.2.  Taintedness Tracking 
When  a  program  performs  operations  using  its  data 
from  memory,  the  taintedness  bit  should  be  propagated. 
The processor pipeline is modified to track taintedness. In 
general, any CPU operation that uses tainted data as source 
should produce tainted result. This mechanism is similar to 
the ones proposed in [7] and [18]. 
We  distinguish  between  memory  operations  and  ALU 
operations.  A  memory  load  operation  moves  data  from 
memory to processor register, and a store operation moves 
data from processor register to memory. Corresponding to 
the  one-bit  extension  to  each  memory  byte,  the  processor 
registers  are  also  extended  to  include  one  taintedness  bit 
for  each  byte.  For  each  load  instruction,  the  data  bits  as 
well  as  the  taintedness  bits  are  copied  from  memory  to 
register  along  the  load  path.  Similarly,  store  instructions 
write  normal  data  bytes  as  well  as  taintedness  bits  to  the 
memory along the store path.  
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:19:55 UTC from IEEE Xplore.  Restrictions apply. 
ID/EX
ALU taintedness tracking logic
EX/MEM
MEM/WB
Opcode
c
i
g
o
l
c