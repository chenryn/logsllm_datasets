事件触发器
 -- filter_variable目前只支持TAG
 -- filter_value是http://www.postgresql.org/docs/devel/static/event-trigger-matrix.html这里定义的DDL
 -- function_name就是我们创建好的事件触发器函数.
 以plpgsql函数语言为例讲解事件触发器函数的创建方法 :
 事件触发器函数的返回类型为event_trigger, 同时事件触发器的顶级块带入了两个特殊变量, TG_EVENT和TG_TAG.
 TG_EVENT表示EVENT信息, 如现在支持的为ddl_command_start 和 ddl_command_end.
 TG_TAG表示的是DDL信息, 信息在http://www.postgresql.org/docs/devel/static/event-trigger-matrix.html查询.
 如果同一个事件上建立了多个事件触发器, 执行顺序按触发器名字(而非触发器函数的名字)的字母先后顺序来执行, 这个和普通触发器的
触发规则是一样的.
 CREATE EVENT TRIGGER b ON ddl_command_start EXECUTE PROCEDURE etgr1();
 CREATE EVENT TRIGGER a ON ddl_command_start EXECUTE PROCEDURE etgr2();
 先触发a, 后触发b.
事件触发器
 -- 查询当前数据库中有哪些事件触发器 :
 digoal=# select * from pg_event_trigger ;
 evtname | evtevent | evtowner | evtfoid | evtenabled | evttags
 ---------+-------------------+----------+---------+------------+---------
 b | ddl_command_start | 10 | 16669 | O |
 a | ddl_command_start | 10 | 16671 | O |
 (2 rows)
 -- evtfoid指事件触发器函数的oid,
 digoal=# select proname from pg_proc where oid=16669;
 proname
 ---------
 etgr1
 (1 row)
 digoal=# select proname from pg_proc where oid=16671;
 proname
 ---------
 etgr2
 (1 row)
事件触发器
 事件触发器和DDL语句本身是在同一个事务中处理的, 所以任何事件触发器抛出异常的话, 整个事务都会回滚, 并且后续的操作也不会执
行下去.
 事件触发器应用举例
 禁止postgres用户在数据库digoal中执行CREATE TABLE和DROP TABLE命令.
 CREATE OR REPLACE FUNCTION abort()
 RETURNS event_trigger
 LANGUAGE plpgsql
 AS $$
 BEGIN
 if current_user = 'postgres' then
 RAISE EXCEPTION 'event:%, command:%', tg_event, tg_tag;
 end if;
 END;
 $$;
事件触发器
 digoal=# create event trigger a on ddl_command_start when TAG IN ('CREATE TABLE', 'DROP TABLE') execute procedure abort();
 CREATE EVENT TRIGGER
 digoal=# select * from pg_event_trigger ;
 evtname | evtevent | evtowner | evtfoid | evtenabled | evttags
 ---------+-------------------+----------+---------+------------+-------------------------------
 a | ddl_command_start | 10 | 16683 | O | {"CREATE TABLE","DROP TABLE"}
 (1 row)
 测试postgres用户是否可以使用create table和drop table .
 digoal=# \c digoal postgres
 You are now connected to database "digoal" as user "postgres".
 -- 无法新建表了
 digoal=# create table new(id int);
 ERROR: event:ddl_command_start, command:CREATE TABLE
 digoal=# \d new
 Did not find any relation named "new".
事件触发器
 digoal=# \dt
 List of relations
 Schema | Name | Type | Owner
 --------+---------+-------+----------
 public | digoal | table | postgres
 public | digoal1 | table | postgres
 public | test | table | postgres
 (3 rows)
 -- 无法删表了
 digoal=# drop table digoal;
 ERROR: event:ddl_command_start, command:DROP TABLE
 digoal=# \d digoal
 Table "public.digoal"
 Column | Type | Modifiers
 --------+---------+-----------
 id | integer |
事件触发器
 -- 测试其他用户是否会有影响
 digoal=# \c digoal digoal
 You are now connected to database "digoal" as user "digoal".
 digoal=> create table tbl(id int);
 CREATE TABLE
 digoal=> drop table tbl;
 DROP TABLE
 -- 未受到影响.
数据传输加密
 http://blog.163.com/digoal@126/blog/static/163877040201342233131835/
 要支持ssl连接, 数据库服务端和客户端都需要openssl包.
 端口加密
 http://blog.163.com/digoal@126/blog/static/163877040201342383123592/
 ssl ciphers 效率对比
 http://blog.163.com/digoal@126/blog/static/16387704020134229431304/
审计日志 - SQL
 记录某用户的所有SQL (假设某用户非业务用户, 是DBA用户)
 业务用户可以审计DDL, 减少审计日志的输出
 通过配置postgresql.conf就可以实现.
 log_statement = 'ddl' # none, ddl, mod, all
 Valid values are none (off), ddl, mod, and all (all statements).
 ddl logs all data definition statements, such as CREATE, ALTER, and DROP statements.
 mod logs all ddl statements, plus data-modifying statements such as INSERT, UPDATE, DELETE, TRUNCATE, and COPY FROM. PREPARE,
EXECUTE, and EXPLAIN ANALYZE statements are also logged if their contained command is of an appropriate type.
 用户级或结合数据库级别的配置
 ALTER ROLE name [ IN DATABASE database_name ] SET configuration_parameter { TO | = } { value | DEFAULT }
 ALTER ROLE { name | ALL } [ IN DATABASE database_name ] SET configuration_parameter FROM CURRENT
 ALTER ROLE { name | ALL } [ IN DATABASE database_name ] RESET configuration_parameter
 ALTER ROLE { name | ALL } [ IN DATABASE database_name ] RESET ALL
审计日志 - SQL
 设置举例 :
 digoal=# alter role digoal set log_statement = 'mod';
 ALTER ROLE
 digoal=# select * from pg_db_role_setting ;
 setdatabase | setrole | setconfig
 -------------+---------+----------------------
 91246 | 0 | {enable_seqscan=off}
 0 | 91250 | {log_statement=mod}
 (2 rows)
审计日志 - 基于对象的审计
 对象触发器: 权限限制, 数据追踪审计
 http://blog.163.com/digoal@126/blog/static/163877040201252575529358/
 在数据库应用中，某些数据表的记录更改可能会需要跟踪，例如删除，新增，更新。
 跟踪的信息包括：老的记录值，新的记录值，记录变更时间，哪个用户操作的等等。
 在数据库中，跟踪可以通过触发器来做。
 使用 hstore 类型来存储变更前后的row信息。并且使用hstore提供的each函数，可以很方便的取出原来存储的值。
审计日志 - 基于对象的审计
 -- 创建需要被跟踪的测试表
 CREATE TABLE test (id int primary key, info text, crt_time timestamp(0));
 -- 创建hstore extension;
 CREATE EXTENSION hstore;
 -- 创建通用的存储跟踪记录的记录表
 CREATE TABLE table_change_rec (
 id serial8 primary key,
 relid oid,
 table_schema text,
 table_name text,
 when_tg text,
 level text,
 op text,
 old_rec hstore,
 new_rec hstore,
 crt_time timestamp without time zone DEFAULT now(),
 username text,
 client_addr inet,
 client_port int
 );
审计日志 - 基于对象的审计
 -- 创建通用的触发器函数
 CREATE OR REPLACE FUNCTION dml_trace()
 RETURNS trigger
 LANGUAGE plpgsql
 AS $BODY$
 DECLARE
 v_new_rec hstore;
 v_old_rec hstore;
 v_username text := session_user;
 v_client_addr inet := inet_client_addr();
 v_client_port int := inet_client_port();
 BEGIN
 -- 如果要加上用户的判断, 这里加个条件就好了.
 case TG_OP
 when 'DELETE' then
 v_old_rec := hstore(OLD.*);
 insert into table_change_rec (relid, table_schema, table_name, when_tg, level, op, old_rec, username, client_addr, client_port)
 values (tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_old_rec, v_username, v_client_addr, v_client_port);
 when 'INSERT' then
 v_new_rec := hstore(NEW.*);
审计日志 - 基于对象的审计
 insert into table_change_rec (relid, table_schema, table_name, when_tg, level, op, new_rec, username, client_addr, client_port)
 values (tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_new_rec, v_username, v_client_addr, v_client_port);
 when 'UPDATE' then
 v_old_rec := hstore(OLD.*);
 v_new_rec := hstore(NEW.*);
 insert into table_change_rec (relid, table_schema, table_name, when_tg, level, op, old_rec, new_rec, username, client_addr, client_port)
 values (tg_relid, tg_table_schema, tg_table_name, tg_when, tg_level, tg_op, v_old_rec, v_new_rec, v_username, v_client_addr, v_client_port);
 else
 return null;
 end case;
 RETURN null;
 END;
 $BODY$ strict;
审计日志 - 基于对象的审计
 -- 在测试表上创建触发器.
 CREATE TRIGGER tg AFTER DELETE or INSERT or UPDATE ON test FOR EACH ROW EXECUTE PROCEDURE dml_trace();
 -- 测试插入, 删除, 更新操作是否被跟踪.
 digoal=# insert into test values (1, 'digoal', now());
 INSERT 0 1
 digoal=# update test set info='DIGOAL' where id=1;
 UPDATE 1
 digoal=# delete from test where id=1;
 DELETE 1
审计日志 - 基于对象的审计
 digoal=# select * from table_change_rec;
 id | relid | table_schema | table_name | when_tg | level | op | old_rec
 | new_rec | crt_time | username | client_addr | client_port
 ----+-------+--------------+------------+---------+-------+--------+----------------------------------------------------------------
 +----------------------------------------------------------------+----------------------------+----------+-------------+------------
 -
 1 | 93063 | postgres | test | AFTER | ROW | INSERT |
 | "id"=>"1", "info"=>"digoal", "crt_time"=>"2013-12-18 11:09:17" | 2013-12-18 11:09:16.501033 | postgres | |
 2 | 93063 | postgres | test | AFTER | ROW | UPDATE | "id"=>"1", "info"=>"digoal", "crt_time"=>"2013-12-18 11:09:17"
 | "id"=>"1", "info"=>"DIGOAL", "crt_time"=>"2013-12-18 11:09:17" | 2013-12-18 11:09:24.514068 | postgres | |
 3 | 93063 | postgres | test | AFTER | ROW | DELETE | "id"=>"1", "info"=>"DIGOAL", "crt_time"=>"2013-12-18 11:09:17"
 | | 2013-12-18 11:09:30.626064 | postgres | |
 (3 rows)
审计日志 - 基于对象的审计
 digoal=# select id,(each(old_rec)).* from table_change_rec;
 id | key | value
 ----+----------+---------------------
 2 | id | 1
 2 | info | digoal
 2 | crt_time | 2013-12-18 11:09:17
 3 | id | 1
 3 | info | DIGOAL
 3 | crt_time | 2013-12-18 11:09:17
 (6 rows)
 digoal=# select id,(each(new_rec)).* from table_change_rec;
 id | key | value
 ----+----------+---------------------
 1 | id | 1
 1 | info | digoal
 1 | crt_time | 2013-12-18 11:09:17
 2 | id | 1
 2 | info | DIGOAL
 2 | crt_time | 2013-12-18 11:09:17
 (6 rows)
对象安全控制 - 约束,视图,物化视图
 约束
 一般用于控制数据的安全
 如 check (balance >=0)
 视图和物化视图