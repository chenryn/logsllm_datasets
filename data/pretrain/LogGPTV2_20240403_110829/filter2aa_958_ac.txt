    HANDLE Event;
} ALPC_DIRECT_ATTR, * PALPC_DIRECT_ATTR;
typedef struct _ALPC_WORK_ON_BEHALF_ATTR
{
    ULONGLONG Ticket;
} ALPC_WORK_ON_BEHALF_ATTR, * PALPC_WORK_ON_BEHALF_ATTR;
The message attributes, how these are initialized and send was another thing that puzzled me 
when coding a sample ALPC server and client. So you don’t crash with the same problems that I 
had here are secret I learned about ALPC message attributes:
To get started one has to know that the structure for ALPC message attributes is the following:
Looking at this I initially thought you call the function AlpcInitializeMessageAttribute give it a 
reference to the above structure and the flag for the message attribute you want to send (all 
attributes are referenced by a flag value, here’s the list from my code) and the kernel then sets it 
all up for you. You then put the referenced structure into NtAlpcSendWaitReceivePort, repeat the 
process for every message you want to send and be all done. 
That is not the case and seems to be wrong on multiple levels. Only after I found this twitter 
post from 2020 and rewatched Alex’s SyScan’14 talk once again (I re-watched this at least 20 times 
during my research) I came to what I currently believe is the right track. Let me first spot the 
errors in my initial believes before bundling the right course of actions:
AlpcInitializeMessageAttribute doesn’t do shit for you, it really only clears the 
ValidAttributes  flag and sets the AllocatedAttributes  flag according to your specified 
message attributes (so no kernel magic filling in data at all). 
I’ll have to admit I spotted this early on from reverse engineering the function, but for some time I 
still hoped it would do some more as the name of the function was so promising.
To actually setup a message attribute properly you have to allocate the corresponding 
message structure and place it in a buffer after the ALPC_MESSAGE_ATTRIBUTES structure. So 
this is similar to an ALPC_MESSAGE where the actual message needs to be placed in a buffer 
after the PORT_MESSAGE structure.
It’s not the kernel that sets the ValidAttributes attribute for your ALPC_MESSAGE_ATTRIBUTES 
structure, you have to set this yourself. I figured this out by playing around with the structure 
and for some time I thought this was just a weird workaround, because why would I need to 
set the ValidAttributes  field? As far as I’m concerned my attributes are always valid and 
shouldn’t it be the kernel’s task to check if they are valid. 
I took me another round of Alex’s SyScan’14 talk to understand that..
You don’t setup the message attributes for every call to NtAlpcSendWaitReceivePort, you set 
all the message attributes up once and use the ValidAttributes flag before calling 
NtAlpcSendWaitReceivePort to specify which of all your set up attributes is valid for this very 
message you are sending now.
To bundle this into useful knowledge, here’s how sending message attributes does work (in 
my current understanding):
First of all you have two buffers: A buffer for message attributes you want to receive (in my 
code named: MsgAttrReceived ) and a buffer for message attributes you want to send (in 
my code named: MsgAttrSend ).
For the MsgAttrReceived  buffer you just have to allocate a buffer that is large enough to 
hold the ALPC_MESSAGE_ATTRIBUTES structure plus all the message attributes that you want to 
receive. After allocating this buffer set the AllocatedAttributes  attribute to the 
typedef struct _ALPC_MESSAGE_ATTRIBUTES
{
    ULONG AllocatedAttributes;
    ULONG ValidAttributes;
} ALPC_MESSAGE_ATTRIBUTES, * PALPC_MESSAGE_ATTRIBUTES;
corresponding attribute(s) flag(s) value. This AllocatedAttributes  value can be changed 
for every message you receive. 
For my sample server and client application I just want to always receive all attributes that 
the kernel could give me, therefore I set the buffer for the receiving attributes once at the 
beginning of my code as follows:
[code]
For the MsgAttrSend  buffer two more steps are involved. You have to allocate a buffer that 
is large enough to hold ALPC_MESSAGE_ATTRIBUTES structure plus all the message attributes 
that you want to send (just as before). You have to set the AllocatedAttributes  attribute 
(just as before), but then you also have to initialize the message attributes (meaning creating 
the necessary structures and fill those with valid values) that you want to send and then 
finally set the ValidAttributes  attribute. In my code I wanted to send different attributes in 
different messages so here’s how I did that:
pMsgAttrReceived = alloc_message_attribute(ALPC_MESSAGE_ATTRIBUTE_ALL);
PALPC_MESSAGE_ATTRIBUTES alloc_message_attribute(ULONG ulAttributeFlags) {
    NTSTATUS lSuccess;
    PALPC_MESSAGE_ATTRIBUTES pAttributeBuffer;
    LPVOID lpBuffer;
    SIZE_T lpReqBufSize;
    SIZE_T ulAllocBufSize;
    ulAllocBufSize = AlpcGetHeaderSize(ulAttributeFlags); // required size for 
specified attribues
    lpBuffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, ulAllocBufSize);
    if (GetLastError() != 0) {
        wprintf(L"[-] Failed to allocate memory for ALPC Message 
attributes.\n");
        return NULL;
    }
    pAttributeBuffer = (PALPC_MESSAGE_ATTRIBUTES)lpBuffer;
    // using this function to properly set the 'AllocatedAttributes' attribute
    lSuccess = AlpcInitializeMessageAttribute(
        ulAttributeFlags,   // attributes
        pAttributeBuffer,   // pointer to attributes structure
        ulAllocBufSize, // buffer size
        &lpReqBufSize
    );
    if (!NT_SUCCESS(lSuccess)) {
        return NULL;
    }
    else {
        //wprintf(L"Success.\n");
        return pAttributeBuffer;
    }
}
[code]
There is an additional catch with the sending attribute buffer: You don’t have to allocate or 
initialize the context attribute or the token attribute. The kernel will always prepare 
these attributes and the receiver can always request them.
If you want to send multiple message attributes you will have a buffer that begins with the 
ALPC_MESSAGE_ATTRIBUTES followed by initialized structures for all the message attributes 
that you want. 
So how does the kernel know which attribute structure is which? The answer: You have to 
put the message attributes in a pre-defined order, which could be guessed from the value of 
their message attribute flags (from highest to lowest) or can also be found in the 
_KALPC_MESSAGE_ATTRIBUTES kernel structure:
You might have noticed that the context and token attributes are not tracked in this 
structure and that is because the kernel will always provide these for any message, and 
hence does track them message independently.
Once send, the kernel will validate all the message attributes, fill in values (for example 
sequence numbers) or clear attributes that are invalid before offering these to the receiver.
Lastly the kernel will copy the attributes that the receiver specified as AllocatedAttributes  
into the receiver’s MsgAttrReceived  buffer, from where they can be fetched by the receiver.
All of the above might, hopefully, also get a little clearer if you go through my code and match 
these statements against where and how I used message attributes.
So far we’ve introduced various components of ALPC to describe how the ALPC messaging system 
works and what an ALPC message looks like. Let me conclude this chapter by putting a few of 
these components into perspective. The above description and structure of an ALPC message 
describe what an ALPC message looks like to sender and receiver, but one should be aware that 
the kernel is adding a lot more information to this message - in fact it takes the provided parts 
and places them in a much bigger kernel message structure - as you can see below:
// Allocate buffer and initialize the specified attributes
pMsgAttrSend = setup_sample_message_attributes(hConnectionPort, hServerSection, 
ALPC_MESSAGE_SECURITY_ATTRIBUTE | ALPC_MESSAGE_VIEW_ATTRIBUTE | 
ALPC_MESSAGE_HANDLE_ATTRIBUTE);
// ...
// Before sending a message mark certain attributes as valid, in this case 
ALPC_MESSAGE_SECURITY_ATTRIBUTE 
pMsgAttrSend->ValidAttributes |= ALPC_MESSAGE_SECURITY_ATTRIBUTE
lSuccess = NtAlpcSendWaitReceivePort(hConnectionPort, ...)
//...
So the message here is: We’ve made a good understanding, but there is a lot more under the 
hood that we’ve not touched.
Putting the pieces together: A Sample Application
I have coded a sample ALPC client and server application as a playground to understand the 
different ALPC components. Feel free to browse and change the code to get your own feeling for 
ALPC. A few fair warnings about this code:
The code is not intended to scale/grow well. The code is intended to be easily readable and 
guide through the main steps of sending/receiving ALPC messages.
This code is in absolutely no way even close to being performance, resource, or anything else 
optimized. It’s for learning.
I did not bother to take any effort to free buffers, messages or any other resources (which 
comes with a direct attack path, as described in section Unfreed Message Objects).
Although there aren’t to many files to go through, let me point out a few notable lines of code:
You can find how I set up sample messages attributes here.
You can find a call to NtAlpcSendWaitReceivePort  that both sends and receives a message 
here.
You can find ALPC port flags, message attribute flags, message and connection flags here.
And then finally here is what it looks like:
Attack Surface
Before digging into the attack surface of ALPC communication channels, I’d like to point out an 
interesting conceptual weakness with ALPC communication that the below attack paths build on 
and that should be kept in mind to find further exploit potential.
Looking back at the ALPC Message Flow section we can recall, that in order to allow for ALPC 
communication to occur a server has to open up an ALPC (connection) port, wait for incoming 
messages and then accept or decline these messages. Although an ALPC port is a securable 
kernel object and can as such be created with a Security Descriptor that defines who can access 
and connect to it, most of the time the creating ALPC server process can’t (or want) to limit access 
based on a callee’s SID. If you can’t (or want) limit access to your ALPC port by a SID, the only 
option you have is to allow Everyone to connect to your port and make a accept/deny decision 
after a client has connected and messaged you. That in turn means that a lot of built-in ALPC 
servers do allow Everyone to connect and send a message to a server. Even if the server rejects a 
client right away, sending an initial message and some message attributes along with that 
message, might be enough to exploit a vulnerability.
Due to this communication architecture and the ubiquity of ALPC, exploiting ALPC is also an 
interesting vector to escape sandboxes.
Identify Targets
The first step in mapping the attack surface is to identify targets, which in our case are ALPC client 
or server processes. 
There are generally three routes that came to my mind of how to identify such processes:
1. Identify ALPC port objects and map those to the owning processes
2. Inspect processes and determine if ALPC is used within them
3. Use Event Tracing for Windows (ETW) to list ALPC events
All of these ways could be interesting, so let’s have a look at them…
Find ALPC port objects 
We’ve already seen the most straight forward way to identify ALPC port objects at the beginning 
of this post, which is to fire up WinObj and spot ALPC objects by the ‘Type’ column. WinObj can’t 
give us more details so we head over to a WinDbg kernel debugger to inspect this ALPC port 
object:
In the above commands we used Windbg’s !object command to query the object manager for the 
named object in the specified path. This implicitly already told us that this ALPC port has to be an 
ALPC connection port, because communications ports are not named. In turn we can conclude 
that we can use WinObj only to find ALPC connection ports and through these only ALPC server 
processes. 
Speaking of server processes: As shown above, one can use WinDbg’s undocumented !alpc  
command to display information about the ALPC port that we just identified. The output includes 
- alongside with a lot of other useful information, the owning server process of the port, which in 
this case is svchost.exe. 
Now that we know the address of the ALPC Port object we can use the !alpc  command once 
again to display the active connections for this ALPC connection port:
Side note: The !alpc Windbg command is undocumented, but the outdated !lpc command, which existed 
in the LPC days, is documented here and has a timestamp from December 2021. This documentation 
page does mention that the !lpc command is outdated and that the !alpc command should be used 
instead, but the !alpc command syntax and options are completely different. But to be fair the !alpc 
command syntax is displayed in WinDbg if you enter any invalid !alpc command:
Thanks to James Forshaw and his NtObjectManager in .NET we can also easily query the 
NtObjectManager in PowerShell to search for ALPC port objects, and even better James already 
provided the wrapper function for this via Get-AccessibleAlpcPort.
Find ALPC used in processes
As always there are various ways to find ALPC port usage in processes, here are a few that came 
to mind:
Similar to approaches in previous posts (here) one could use the dumpbin.exe utility to list 
imported functions of executables and search therein for ALPC specific function calls.
As the above approach works with executable files on disk, but not with running processes, 
one could transfer the method used by dumpbin.exe and parse the Import Address Table 
(IAT) of running processes to find ALPC specific function calls.
One could attach to running processes, query the open handles for this process and filter for 
those handles that point to ALPC ports.
Once dumpbin.exe is installed, which for examples comes with the Visual Studio C++ 
development suite, the following two PowerShell one-liners could be used to find .exe and .dll files 
that create or connec to an ALPC port:
I did not code the 2nd option (parsing the IAT) - if you know a tool that does this let me know, but 
there is an easy, but very slow way to tackle option number 3 (find ALPC handles in processes) 
using the following WinDbg command: !handle 0 2 0 ALPC Port
## Get ALPC Server processes (those that create an ALPC port)
Get-ChildItem -Path "C:\Windows\System32\" -Include ('*.exe', '*.dll') -Recurse -
ErrorAction SilentlyContinue | % { $out=$(C:\"Program Files (x86)"\"Microsoft 
Visual Studio 14.0"\VC\bin\dumpbin.exe /IMPORTS:ntdll.dll 
$_.VersionInfo.FileName); If($out -like "*NtAlpcCreatePort*"){ Write-Host "[+] 
Executable creating ALPC Port: $($_.VersionInfo.FileName)"; Write-Output "[+] 
$($_.VersionInfo.FileName)`n`n $($out|%{"$_`n"})" | Out-File -FilePath 
NtAlpcCreatePort.txt -Append } }
## Get ALPC client processes (those that connect to an ALPC port)
Get-ChildItem -Path "C:\Windows\System32\" -Include ('*.exe', '*.dll') -Recurse -
ErrorAction SilentlyContinue | % { $out=$(C:\"Program Files (x86)"\"Microsoft 
Visual Studio 14.0"\VC\bin\dumpbin.exe /IMPORTS:ntdll.dll 
$_.VersionInfo.FileName); If($out -like "*NtAlpcConnectPor*"){ Write-Host "[+] 
Executable connecting to ALPC Port: $($_.VersionInfo.FileName)"; Write-Output "
[+] $($_.VersionInfo.FileName)`n`n $($out|%{"$_`n"})" | Out-File -FilePath 
NtAlpcConnectPort.txt -Append } }
Be aware that this is very slow and will probably take a few hours to complete (I stopped after 10 
minutes and only got around 18 handles). 
But once again thanks to James Forshaw and his NtApiDotNet there is any easier way to code this 
yourself and speed up this process, plus we can also get some interesting ALPC stats… 