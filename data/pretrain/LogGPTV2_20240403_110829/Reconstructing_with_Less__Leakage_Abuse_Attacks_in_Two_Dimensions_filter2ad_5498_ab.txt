Any
Known
Any
✓
✓ Unknown
Any
✓ Unknown
Any
✓ Unknown Dense1D
✓ ✓
✓ ✓
✓ ✓
✓
✓
✓
✓
✓ ✓
✓
✓
✓
✓
Kellaris+ [25] ✓
Lacharité+ [29] ✓
Grubbs+ [19] ✓
Markatou+ [32] ✓
Markatou+ [32] ✓
Kornaropoulos+ [27] ✓
Falzon+ [13]
Falzon+ [13]
This Work
This Work
This Work
✓
✓
✓
✓
✓
both dimensions will be returned and the leakage is precisely the
leakage of the underlying SSE scheme used.
1.3 Comparison with Prior and Related Work
In the following, we denote with 𝑁 the size of the domain of the
database points. We present the first order reconstruction and the
first approximate database reconstruction in 2D; our attacks only
require a strict subset of the leakage used by the 2D attacks in [13].
Previous 2D attacks require the multiset of access patterns, which
can be obtained with 𝑂(𝑁 4 log 𝑁) uniformly random queries. In
contrast, our order reconstruction attack takes as input the set of
access pattern leakage, which can be obtained with 𝑂(𝑁 2 log 𝑁)
uniformly random queries. Our approximate database reconstruc-
tion attack requires search and access pattern leakage, however,
we are able to recover information with small relative error with
as few as 4% of the possible queries. Table 1 compares our results
with previous work, where Dense1D denotes a 2D database whose
horizontal and vertical projections are each a dense 1D database.
Kellaris et al. [25] show that given a 1D database, one can recon-
struct the values of the database records from access pattern leakage
of range queries using 𝑂(𝑁 4 log 𝑁) queries issued uniformly at ran-
dom. Since then, a number of works have explored the problem in
1D (e.g. [19, 26, 27, 29, 32]), and in 2D [13].
Order reconstruction was first introduced in [25], as the first
step of their FDR attack. Grubbs et al. [19] generalize the attack
to one that achieves sacrificial 𝜖-approximate order reconstruction
(𝜖-AOR); the goal of 𝜖-AOR is to recover the order of all records,
except for records that are either within 𝜖𝑁 of each other or within
𝜖𝑁 of the endpoints. Their attack achieves sacrificial 𝜖-AOR with
probability 1−𝛿 given 𝑂(𝜖−1 log 𝜖−1+𝜖−1 log 𝛿−1) uniform queries.
Approximate database reconstruction from access pattern of
range queries in 1D was addressed in [19, 27, 29]. In [29], Lacharité
et al. introduce 𝜖-approximate database reconstruction (𝜖-ADR) as
the reconstruction of each record value up to 𝜖𝑁 error; they then
give an attack that achieves 𝜖-ADR with 𝑂(𝑁 log 𝜖−1) uniform
queries. In [19], the authors further introduce sacrificial 𝜖-ADR,
whose goal is to recover all values up to and error of 𝜖𝑁 , while
“sacrificing” recovery of points within 𝜖𝑁 of the domain end points.
Concepts from statistical learning theory are applied to achieve a
scale-free attack that succeeds with 𝑂(𝜖−2 log 𝜖−1) queries.
Kornaropoulos et al. [27] reconstruct a 1D database without
knowledge of the underlying query distribution and without all
possible queries by employing statistical estimators to approximate
the support size of the conditional distribution of search tokens
given a particular response. Their agnostic reconstruction attack
achieves reconstruction with good accuracy in a variety of settings
including and beyond the uniform query distribution.
Full database reconstruction in 2D was first described in [13]. In
this work, Falzon et al. describe the symmetries of databases in two
dimensions, prove that the set of databases compatible with a given
access pattern leakage may be exponential, and give a polynomial-
time algorithm for computing a polynomial-sized encoding of the
(potentially exponential) solution set. Their attack requires full
knowledge of the set of queries and their respective access pattern.
As such, the attack uses either (1) search and access pattern leakage
or (2) 𝑂(𝑁 4 log 𝑁) uniformly random queries where 𝑁 is the size
of the 2D domain.
There are also a number of reconstruction attacks that use only
volume pattern, i.e., the number of records returned upon each
query [18, 20, 28]. This setting is outside the scope of this paper.
2 Preliminaries
We recall standard combinatorial and geometric concepts using the
terminology and notation introduced in [13].
Basic concepts. For a positive integer 𝑁 , let [𝑁] = {1, . . . , 𝑁}.
The domain of a two-dimensional (2D) database is denoted D =
[𝑁0] × [𝑁1] for positive integers 𝑁0 and 𝑁1. We refer to the points
on the segment from (0, 0) to (𝑁0+1, 𝑁1+1) as the main diagonal.
Given a point 𝑤 ∈ D, we denote its first coordinate as 𝑤0 and its
second coordinate as 𝑤1, i.e., 𝑤 = (𝑤0, 𝑤1). A point 𝑤 dominates
point 𝑥, denoted 𝑥 ⪯ 𝑤, if 𝑥0 ≤ 𝑤0 and 𝑥1 ≤ 𝑤1. Similarly, 𝑤
anti-dominates 𝑥, denoted 𝑥 ⪯𝑎 𝑤, if 𝑤0 ≤ 𝑥0 and 𝑥1 ≤ 𝑤1. The
dominance or anti-dominance is said to be strict if the above in-
equalities are strict. We say that 𝑤 minimally (anti-) dominates
𝑥 if there is no point 𝑣 ≠ 𝑤, 𝑥 such that 𝑤 (anti-) dominates 𝑣 and 𝑣
(anti-) dominates 𝑥.
A 2D database, D, over a domain D with 𝑅 ≥ 1 records is an
𝑅-tuple of points in D i.e. D ∈ D𝑅. A point of D is referred to as
a record and is associated with a unique identifier (or ID) in [𝑅]
that gives its index in the tuple. We let D[ 𝑗] for 𝑗 ∈ [𝑅] denote the
domain value associated with the record ID 𝑗. When clear from
context, we may refer to records as points.
In this work, we use directed graphs (digraphs) to encode the
order relations of the records in the database. A digraph is a tuple
𝐺 = (𝑉 , 𝐸) such that 𝑉 is the vertex set and 𝐸 is the directed edge
set. For any two vertices or nodes 𝑢, 𝑣 ∈ 𝑉 we denote a directed edge
from 𝑢 to 𝑣 as the pair (𝑢, 𝑣). A source vertex is a vertex with only
outgoing edges and a sink vertex is a vertex with only incoming
edges. The definitions below are illustrated in Figure 2.
Definition 2.1. The dominance graph, 𝐺 = (𝑉 , 𝐸), of a set of
points 𝑆, is the digraph where 𝑉 = 𝑆 and (𝑎, 𝑏) ∈ 𝐸 if 𝑏 minimally
dominates 𝑎 and 𝑎, 𝑏 ∈ 𝑉 .
Definition 2.2. The anti-dominance graph, 𝐺′ = (𝑉 ′, 𝐸′), of a
set of points 𝑆, is the digraph where 𝑉 ′ = 𝑆 and (𝑎, 𝑏) ∈ 𝐸′ if 𝑏
minimally anti-dominates 𝑎 and 𝑎, 𝑏 ∈ 𝑉 ′.
Definition 2.3 ([13]). A component, 𝐶, of database D is a minimal
non-empty subset of D such that for any points 𝑝 ∈ 𝐶 and 𝑞 ∉ 𝐶,
Session 7C: Database and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2245The
Figure 2:
domi-
nance graph (blue) and
anti-dominance graph
(red) for a database with
8 records and compo-
nents {𝑢1}, {𝑢2, 𝑢3}, {𝑢4},
{𝑢5, 𝑢6, 𝑢7}, and {𝑢8}.
both 𝑝 and its reflection along the main diagonal either dominate 𝑞
or are dominated by 𝑞.
Range queries and leakage. A range query is defined by a pair
of domain points 𝑞 = (𝑐, 𝑑) ∈ D2 such that 𝑐 ⪯ 𝑑. The response or
access pattern of a range query is the set of identifiers of records
with values that fall within the range of the query. The response of
a query 𝑞 = (𝑐, 𝑑) is defined to be
(1)
We define the response multiset of a database D, denoted RM(𝐷),
as the multiset of all access patterns of D:
Resp(D, 𝑞) = { 𝑗 ∈ [𝑅] : 𝑐 ⪯ 𝐷[ 𝑗] ⪯ 𝑑}.
2 (cid:1)(cid:0)𝑁1+1
RM(D) = {{Resp(D, 𝑞) : 𝑞 = (𝑐, 𝑑) ∈ D2, 𝑐 ⪯ 𝑑}}.
where 𝑡 ∈(cid:2)(cid:0)𝑁0+1
2 (cid:1)(cid:3). We assume a one-to-one correspondence
(2)
The double bracket notation emphasises the multiset as distinct
queries 𝑞 and 𝑞′ may produce the same response, Resp(D, 𝑞) =
Resp(D, 𝑞′). For two multisets 𝐴 and 𝐵, we say that 𝐴 is a sub-
multiset of 𝐵 if 𝐴 is contained in 𝐵. We define the response set
of D, denoted RS(D), to be the set associated with RM(D) where
each response appears exactly once. The search pattern of a query
𝑞 = (𝑐, 𝑑) is defined to be a query-specific token SP(D, 𝑞) = 𝑡,
between queries and tokens. Our order reconstruction algorithm
(Sections 4-5) takes RS(D) as input. Our approximate database
reconstruction algorithm (Sections 6–7) takes as input a submul-
tiset of RM(D) (i.e., the search and access pattern) observed by
the adversary for any number of queries drawn from an arbitrary
distribution.
Threat model. We study the security of encrypted database schemes
that support two-dimensional range queries and which leak the
access pattern and search pattern of each query. We consider a
passive, honest-but-curious, persistent adversary that has com-
promised the database management system or the client-server
communication channel, and can observe the leakage over an ex-
tended period of time. Our order reconstruction attack considers
an adversary that takes RS(D) as input and wishes to compute the
order of all records. Our second attack considers an adversary that
knows the search tokens and responses of some sample of queries,
as well as the order of all the records, and wishes to approximate
the domain value of each record.
Assumptions and reconstruction attacks. We explore recon-
struction under a few different assumptions. In Section 5 we assume
the adversary knows the full response set RS(D). In Section 7 we
assume the adversary knows the domain, but we make no assump-
tion about the number of queries that it may have observed or the
distribution from which queries are drawn; the adversary has no
knowledge of the distribution.
We define the order reconstruction (OR) problem as follows:
Definition 2.4. OR: Given a set RS(D) of some database D, com-
pute all pairs of dominance and anti-dominance graphs (𝐺, 𝐺′)
Definition 2.5 ([13]). Let D = [𝑁0] × [𝑁1]. The query density
of a point 𝑥 ∈ D is defined as
𝜌𝑥 =(cid:12)(cid:12){(𝑐, 𝑑) ∈ D2 : 𝑐 ⪯ 𝑥 ⪯ 𝑑}(cid:12)(cid:12) .
𝜌𝑆 =(cid:12)(cid:12){(𝑐, 𝑑) ∈ D2 : ∀𝑥 ∈ 𝑆, 𝑐 ⪯ 𝑥 ⪯ 𝑑}(cid:12)(cid:12) .
The query density a set of points 𝑆 ⊆ D defined as
such that any database D′ with record relationships defined by
(𝐺, 𝐺′) is equivalent to D with respect to the response set, i.e.
RS(D) = RS(D′).
Computing (𝐺, 𝐺′) is the information theoretic best that an
adversary can do without additional information (e.g. without the
multiplicities of each response, or the distribution of the data).
In Section 7, we give a method for estimating the values of the
database given only search pattern leakage. In particular, given the
order of points in D and a multiset of search token and response
pairs (where each pair corresponds to one of the observed queries),
we demonstrate how to (i) estimate the number of unique queries
that each record appears in and then (ii) use this information to
construct a system of non-linear equations that can be solved to
give approximate values of the records. We refer to this problem as
approximate database reconstruction (ADR).
2.1 Query Densities
We use the generalized notion of query densities of points and
point sets in two-dimensions presented in [13], which extends
the methods in [25] for computing the number of unique queries
whose responses contain a given set of points. By observing suffi-
ciently many query responses of uniformly random queries, one
can recover the value of a point 𝑥 by computing the proportion of
responses that the identifier of 𝑥 appears in.
Thus, these are the number of queries that contain 𝑥 or all points
in 𝑆, respectively.
Given a point 𝑥 = (𝑥0, 𝑥1) ∈ D, the formula for computing 𝜌𝑥 is
(3)
More generally, the query density 𝜌𝑆 of a set of points 𝑆 ⊆ D is
𝜌𝑆 = (min
(4)
𝑥∈𝑆
𝜌𝑥 = 𝑥0 · 𝑥1 · (𝑁0 + 1 − 𝑥0) · (𝑁1 + 1 − 𝑥1).
𝑥0)(min
𝑦∈𝑆