# 2020 0CTF/TCTF quals Duet writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
前段时间参加2020 0CTF quals遇到的libc-2.29的菜单堆题目，用到了libc-2.29的small bin
attack、改global_max_fast、改top chunk、libc-2.29的迁栈，堆风水+迁栈搞得十分心累……
## 题目概要
libc-2.29 程序，只能使用calloc分配heap，只能同时有两个chunk，分配大小：0x80～0x400
有sandbox，只能ORW:
        __ __ _____________   __   __    ___    ____
       / //_// ____/ ____/ | / /  / /   /   |  / __ )
      / ,> 32 # open(filename, flags, mode)
     0016: 0x15 0x00 0x03 0x00000000  if (A != 0x0) goto 0020
     0017: 0x20 0x00 0x00 0x00000018  A = flags # open(filename, flags, mode)
     0018: 0x15 0x00 0x01 0x00000000  if (A != 0x0) goto 0020
     0019: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0020: 0x06 0x00 0x00 0x00000000  return KILL
存在一次off-by-one的机会
    int __usercall offbyone@(__int64 a1@, _DWORD *a2@)
    {
      char v2; // dl
      int result; // eax
      _BYTE *v4; // [rsp-10h] [rbp-10h]
      __int64 v5; // [rsp-8h] [rbp-8h]
      __asm { endbr64 }
      v5 = a1;
      if ( *a2 != 0x13377331 )
        return puts("Amazing thing happens only once.");
      *a2 = 0;
      v4 = calloc(0x88uLL, 1uLL);
      if ( !v4 )
        _exit(-1);
      printf("合: ", 1LL);
      v2 = input_long();
      result = (_DWORD)v4 + 0x88;
      v4[0x88] = v2;
      return result;
    }
## global_max_fast
这是libc中的一个值，正常情况下是0x80，size小于等于这个值的bin被认为是fast
bin，如果可以把这个值改得很大，那么所有size的bin都被认为是fast bin。
## small bin attack
关键代码：
     /*
         If a small request, check regular bin.  Since these "smallbins"
         hold one size each, no searching within bins is necessary.
         (For a large request, we need to wait until unsorted chunks are
         processed to find best fit. But for small ones, fits are exact
         anyway, so we can check now, which is faster.)
       */
      if (in_smallbin_range (nb))
        {
          idx = smallbin_index (nb);
          bin = bin_at (av, idx);
          if ((victim = last (bin)) != bin)
            {
              bck = victim->bk;
          if (__glibc_unlikely (bck->fd != victim))
            malloc_printerr ("malloc(): smallbin double linked list corrupted");
              set_inuse_bit_at_offset (victim, nb);
              bin->bk = bck;
              bck->fd = bin;
              if (av != &main_arena)
            set_non_main_arena (victim);
              check_malloced_chunk (av, victim, nb);
    #if USE_TCACHE
          /* While we're here, if we see other chunks of the same size,
             stash them in the tcache.  */
          size_t tc_idx = csize2tidx (nb);
          if (tcache && tc_idx counts[tc_idx] bk;
                  set_inuse_bit_at_offset (tc_victim, nb);
                  if (av != &main_arena)
                set_non_main_arena (tc_victim);
                  bin->bk = bck;
                  bck->fd = bin;
                  tcache_put (tc_victim, tc_idx);
                    }
            }
            }
    #endif
              void *p = chunk2mem (victim);
              alloc_perturb (p, bytes);
              return p;
            }
        }
从small bin中取的时候会检查bck->fd != victim，这一点和libc-2.23中一样。
但是在取出来之后，如果该small bin链中还有chunk，并且对应的tcache链中没满，则会把small
bin链中剩下的chunk进行unlink解链并把它放到tcache中。
漏洞就在这里，在解链chunk放到tcache的过程中并没有检查chunk的正确性，如果我们可以对已经在该small
bin中某一个chunk进行写操作控制bk的话，就可以往任意地址上写一个main_arena范围的地址
    bck = tc_victim->bk;
    ...
    bck->fd = bin;
以本题为例，我们构造了一个长度为2的0xa0的small bin链，根据取small bin按FIFO的原则，改写链中第二个放入的small
bin的bk字段为global_max_fast-0x10，这样在取small
bin的时候就会向global_max_fast写入一个main_arena范围的地址，使得所有size的bin都是fast bin。
## 迁栈
然而在我们控了free_hook以后，我们发现libc-2.29中没有可以利用rdi控制rsp进行迁栈的gadget，所以使用了其它方法。`IO_wfile_sync`函数可以利用rdi控制rdx，函数`setcontext+0x35`处可以用rdx控rsp，两个搭配使用就可以进行迁栈。在`IO_wfile_sync+0x6d`处有`call
[r12+0x20]`，这里的r12也是可以用rdi控制的，所以可以利用这条指令调用`setcontext+0x35`，实现`free_hook ->
IO_wfile_sync -> setcontext+0x35`。
    .text:0000000000089460 _IO_wfile_sync  proc near               ; DATA XREF: LOAD:0000000000010230↑o
    .text:0000000000089460                                         ; __libc_IO_vtables:00000000001E5F00↓o ...
    .text:0000000000089460
    .text:0000000000089460 var_20          = qword ptr -20h
    .text:0000000000089460
    .text:0000000000089460 ; __unwind {
    .text:0000000000089460                 push    r12
    .text:0000000000089462                 push    rbp
    .text:0000000000089463                 push    rbx
    .text:0000000000089464                 mov     rbx, rdi
    .text:0000000000089467                 sub     rsp, 10h
    .text:000000000008946B                 mov     rax, [rdi+0A0h]
    .text:0000000000089472                 mov     rdx, [rax+20h]
    .text:0000000000089476                 mov     rsi, [rax+18h]
    .text:000000000008947A                 cmp     rdx, rsi
    .text:000000000008947D                 jbe     short loc_894AD
    .text:000000000008947F                 mov     eax, [rdi+0C0h]
    .text:0000000000089485                 test    eax, eax
    .text:0000000000089487                 jle     loc_89590
    .text:000000000008948D                 sub     rdx, rsi
    .text:0000000000089490                 sar     rdx, 2
    .text:0000000000089494                 call    _IO_wdo_write
    .text:0000000000089499                 test    eax, eax
    .text:000000000008949B                 setnz   al
    .text:000000000008949E                 test    al, al
    .text:00000000000894A0                 jnz     loc_895AD
    .text:00000000000894A6
    .text:00000000000894A6 loc_894A6:                              ; CODE XREF: _IO_wfile_sync+147↓j
    .text:00000000000894A6                 mov     rax, [rbx+0A0h]
    .text:00000000000894AD
    .text:00000000000894AD loc_894AD:                              ; CODE XREF: _IO_wfile_sync+1D↑j
    .text:00000000000894AD                 mov     rsi, [rax]
    .text:00000000000894B0                 mov     rax, [rax+8]
    .text:00000000000894B4                 cmp     rsi, rax
    .text:00000000000894B7                 jz      short loc_89532
    .text:00000000000894B9                 sub     rsi, rax
    .text:00000000000894BC                 mov     r12, [rbx+98h]
    .text:00000000000894C3                 sar     rsi, 2
    .text:00000000000894C7                 mov     rbp, rsi
    .text:00000000000894CA                 mov     rdi, r12
    .text:00000000000894CD                 call    qword ptr [r12+20h]
    .text:0000000000055E35 setcontext + 0x35      
    .text:0000000000055E35                 mov     rsp, [rdx+0A0h]
    .text:0000000000055E3C                 mov     rbx, [rdx+80h]
    .text:0000000000055E43                 mov     rbp, [rdx+78h]
    .text:0000000000055E47                 mov     r12, [rdx+48h]
    .text:0000000000055E4B                 mov     r13, [rdx+50h]
    .text:0000000000055E4F                 mov     r14, [rdx+58h]
    .text:0000000000055E53                 mov     r15, [rdx+60h]
    .text:0000000000055E57                 mov     rcx, [rdx+0A8h]
    .text:0000000000055E5E                 push    rcx
    .text:0000000000055E5F                 mov     rsi, [rdx+70h]
    .text:0000000000055E63                 mov     rdi, [rdx+68h]
    .text:0000000000055E67                 mov     rcx, [rdx+98h]
    .text:0000000000055E6E                 mov     r8, [rdx+28h]
    .text:0000000000055E72                 mov     r9, [rdx+30h]
    .text:0000000000055E76                 mov     rdx, [rdx+88h]
    .text:0000000000055E76 ; } // starts at 55E00
    .text:0000000000055E7D ; __unwind {
    .text:0000000000055E7D                 xor     eax, eax
    .text:0000000000055E7F                 retn