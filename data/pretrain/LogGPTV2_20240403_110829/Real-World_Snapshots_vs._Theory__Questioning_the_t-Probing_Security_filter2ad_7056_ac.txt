We ﬁrst
4In case of clock gating, it should be made sure that the clock is propagated
at the target cycle. A detailed discussion is given in Section VII-A2.
© 2020 IEEE
6
machine), which are out of our interest. Therefore, we target
m ≤ n registers according to the architecture of the underlying
design. For example, m = 256 for an unprotected implemen-
tation of AES (128 bits for the state register and 128 bits for
the key register). If we deﬁne variables vi∈{0,...,m−1} for the
value of targeted register cells at the selected clock cycle, we
can write
vi = ci
0ω0 + ... + ci
n−1ωn−1,
(1)
words, ∀i,(cid:80)
where with ci
j we denote binary coefﬁcients. Since only one of
the observations is associated to the i-th register cell, only one
of the coefﬁcients ci
j∈{0,...,n−1} is 1, and the rest are 0. In other
ci
j = 1. These are the ﬁrst formulations that we
require to include in the Boolean satisﬁability problem (SAT),
which are generated individually for each targeted register cell
vi∈{0,...,m−1}, and are independent of the observations ω and
the architecture of the circuit under attack.
∀j
We should also add the formulations for (1) for each vi.
Those observations ωj that are 0 cancel out the corresponding
coefﬁcient cj. Therefore, we can write
cj
= 0.
(2)
vi ⊕(cid:16) (cid:88)
∀j,ωj =1
(cid:17)
Having more snapshots at different clock cycles, the clauses
for (2) should be repeated for m distinct register variables
vi based on the corresponding observations ωj. However, the
coefﬁcients ci
j stay the same, i.e., they are deﬁned only once
for the entire circuit independent of the number of snapshots.
The remaining task is to link the variables vi (of targeted
register cells) at different clock cycles. This is done based on
the underlying design architecture of the circuit under attack
and the functions it realizes. For example, in a round-based
architecture, the state register cells store the output of the
cipher round function, and the key register cells the round
keys. In a serialized architecture, the content of the registers
is shifted (e.g., in a byte-wise fashion), and certain operations
(e.g., Sbox) are applied on particular registers at determined
clock cycles. We will elaborate an example in Section VI-D.
For a masked implementation with d+1 shares, the number
of targeted registers at each clock cycle is m(d + 1) (e.g.,
512× 2 for a ﬁrst-order masked implementation of AES using
the state and key registers with 2 shares). Therefore, the entire
formulations given in (2) should be repeated d + 1 times. In
the next step, we deﬁne m virtual variables νi =
vi,l (for
each clock cycle), where (vi,1, . . . , vi,d+1) represent variable
νi with d + 1 shares. The corresponding formulations should
be also added to the SAT. The rest is similar to an unmasked
implementation, i.e., the (unmasked) variables νi at different
clock cycles are linked based on the design architecture of the
circuit under attack. We give a detailed explanation how to
write the clauses in Appendix B.
d+1(cid:76)
l=1
V. EXPERIMENTAL SETUP
To evaluate our proposed attack, we need a target device that
can run masked AES implementations of different protection
orders. In order to conduct LLSI, the power supply of the
(a) DUT under the PHEMOS-1000 FA
microscope
(b) Laser scan image of the DUT backside (5x lens)
(c) Zoom-in of the framed area con-
taining the LABs (50x lens)
Fig. 4. Device under test (DUT): Intel Cyclone IV FPGA with part number EP4CE6E22C8N.
device must be modulated, and the backside of the chip must
be optically accessible. Since snapshots of a large number
of registers in multiple clock cycles have to be acquired, the
automation of LLSI measurements would be beneﬁcial.
A. Device Under Test (DUT)
Our target device was an Intel Cyclone IV FPGA [68] (see
Fig. 4). It is manufactured in a 60 nm technology and contains
392 logic array blocks (LABs), each consisting of 16 logic
elements (LEs). The LEs mainly consist of a four-input look-
up table (LUT) and a programmable register. Furthermore,
in every LE, there is logic for loading and clearing data,
routing, and clocking. To access the backside of the chip,
we opened the package and thinned the bulk silicon to a
remaining depth of around 25 µm.We soldered the prepared
sample upside down to a custom Printed Circuit Board (PCB)
to expose connections to input/output and power supply pins.
To keep the power supply modulation for LLSI as unaffected
as possible, we did not place capacitors on the PCB.
B. Electrical and Optical Setup
As the setup (Fig. 5), we used a Hamamatsu PHEMOS-1000
FA microscope with optical probing capabilities. It is equipped
with a 1.3 µm high-power incoherent light source (HIL) and
5x/0.14NA, 20x/0.4NA, and 50x/0.71NA objectives. An ad-
ditional scanner-zoom of 2x, 4x and 8x is available. For
EOFM/LLSI,
the laser is scanned over the device using
galvanometric mirrors, and the reﬂected light is separated by
semi-transparent mirrors and fed into a detector. Its output is
then fed into a bandpass ﬁlter set to the frequency of interest.
The resulting amplitude at every scanning location is mapped
to its position and displayed as a grayscale encoded 2-D image.
For LLSI, the supply voltage has to be modulated. There-
fore, the internal core voltage (VCCINT) of the DUT is sup-
plied with 1.2 V by a Texas Instruments voltage regulator
(TPS7A7001), whose feedback path is used to modulate the
output voltage. The sine wave signal used for this purpose
is generated by a Keithley 3390 function generator, and a
© 2020 IEEE
7
Hamamatsu PHEMOS
Laser Scanner
(x/y)
1.3 µm HIL
Detector
x, y
Bandpass Filter
Amplitude-to-
Position Mapping
Cyclone IV
DUT
VCCINT
VCCA, CCIO
CLK, RST
Modulated
Power Supply
Power Supply
Clock Generator
2-D LLSI
Image
Fig. 5. Electrical and optical setup for conducting LLSI experiments.
Toellner laboratory power supply (TOE8732) provides the
DC voltage. An LLSI peak-to-peak modulation amplitude up
to 700 mVpp at 90 kHz is possible without disturbing the
functionality of the device. The auxiliary voltage pin (VCCA)
and I/O voltage pin (VCCIO) are supplied by the second channel
of the TOE8732, which is set to 2.5 V. The clock for the DUT
is externally supplied via a Rigol DG4162 function generator,
which allows single-stepping and stopping the clock.
C. Automation of LLSI Acquisition
To create snapshots of the registers in multiple clock cy-
cles in an automated fashion, we use the CadNavi interface
provided by the PHEMOS-1000 and the USB interface of
the clock generator. The CadNavi interface gives access to
functionalities of the PHEMOS, e.g., moving the microscope
stage, adjusting the focus, and starting and stopping the
measurements. Using the clock generator, the DUT can be
reset, and clock cycles can be advanced in single steps. In
the LabView programming environment, we implemented a
scanning routine as follows. First, the device is stopped at the
clock cycle of interest. The stage is then moved to a location
of interest, where the focus is adjusted, and drift of the optical
setup in x- and y-direction is corrected. For drift correction, we
apply an elastic image registration on the current optical image
as its goal is to extract the bit values stored in the register cells.
To demonstrate how arbitrary data from the LLSI images can
be read out, we took a snapshot of 24 registers containing
randomly chosen data. For an easier manual extraction, we
have subtracted a reference snapshot with all registers set to
0, see Fig. 10 in Appendix A. Consequently, if there is a clear
difference for a cell, it contains the value 1; otherwise 0.
This leads us to the conclusion that the register inside the
LAB and LE can be localized, and also the bit values 0 and
1 can be distinguished using a single LLSI measurement.
B. Implementation Under Attack
We chose the AES-DOM implementation [52], which is
available on GitHub [70]. It is a serialized AES encryption
engine that is given the shares of 128-bit plaintext and key,
shifted in byte-by-byte during the ﬁrst 16 clock cycles. The
code is written so that it allows the user to arbitrarily adjust
the protection order (i.e., the number of shares), meaning
that for a d + 1 sharing scheme, it is expected to provide
security against attacks up to d-th order by means of d + 1
shares. It requires a high number of random masks refreshed
at every clock cycle, i.e., (d + 1)(9d + 10) bits for d + 1
shares. Due to its serialized architecture, only one instance
of the (masked) Sbox is instantiated. Since the Sbox has 4
stages of pipeline intermediate registers (essential for almost
any hardware masked implementation), a complete SubBytes
operation takes 16+4 clock cycles. MixColumns is also per-
formed column-wise, requiring 4 clock cycles. However, due
to an interleaved fashion (ShiftRows and MixColumns being
applied in parallel to SubBytes), the entire encryption can be
terminated after 200 clock cycles [52].
For the implementation on the FPGA, we restricted the
AES-DOM core to be placed in a dedicated area on the FPGA
using the logic fencing feature of the FPGA design software.
Our wrapper module, which is responsible for providing all
inputs to the AES core, can thus be excluded from the
hardware snapshots. The highest protection, which we could
ﬁt on the FPGA (with our co-existing wrapper module), was
of 4th order, resulting in 5 shares.
C. Key Extraction with Known Register Locations
In the ﬁrst scenario, we target a d + 1 = 3-share5 and a
d + 1 = 5-share implementation of AES-DOM (as given in
Section VI-B), resulting in 3× 128 = 384 and 5× 128 = 640
bits of key registers, respectively. We placed all key registers
to known locations. To minimize the LLSI scanning time,
we considered 3 and 5-share implementations occupying in
total 24 and 40 LABs (each LAB with 16 register cells),
respectively. As the input key shares are provided byte-by-byte
to the AES-DOM core, after 16 clock cycles all key shares are
stored inside the key registers; hence it is sufﬁcient to extract
the key register content only in the 16th clock cycle.
We could achieve a reasonable SNR for the LLSI measure-
ments with the 50x lens, 2x zoom, and a pixel dwell time of
5In the AES-DOM code [70], the protection order d is shown by parameter
N = d.
Fig. 6. Experiment for identifying the register cells. EOFM image at the clock
frequency (magenta) and LLSI signature (green), overlaid onto an optical
image and gathered in parallel while the device was running. LE boundaries
indicated by dashed lines and potential clock transistors of registers by arrows.
and an image recorded before the ﬁrst measurement. Finally,
an optical image is taken and the LLSI snapshot is gathered.
After the program has gathered snapshots of all locations of
interest, the same procedure begins for the next clock cycle.
VI. RESULTS
A. Data Dependency of LLSI Measurements
To ﬁnd the approximate register locations on the FPGA,
we ﬁrst conducted an EOFM measurement at the clock fre-
quency [69], while the device was operating normally. In
the result shown in Fig. 6, we could identify several spots
switching at the clock frequency. We presume that some of
the spots are the actual clock buffers for the registers, and
others are part of the clock routing buffers between the LEs.
By comparing the chip layout from the FPGA design software
with the optical image, we identiﬁed the horizontal boundaries
between the LEs, as indicated with the dashed lines in Fig. 6.
Note that every second LE seems to be ﬂipped horizontally. We
then identiﬁed clock activity spots that are at the same relative
position for every LE, see marked spots in Fig. 6. Because
every LE contains only a single-bit register, we expected the
registers to reside in the vicinity of these spots.
To ﬁnd a data dependency in the LLSI measurements and
conﬁrm the register location hypothesis, we targeted a single
register cell. For this, we set all surrounding registers to 0 and
took two LLSI snapshots, one with the targeted bit set to 1,
and one with 0, see Fig. 7. We set the modulation of VCCINT
to 530 mVpp at 90 kHz and scanned using the 50x lens with
2x zoom and a pixel dwell time of 10 ms/px. Note that we
could see a signature on the LLSI measurements already with
a lower modulation amplitude, but we chose these settings to
increase the SNR, and hence, decrease the scanning time.
By subtracting the captured LLSI measurements, the areas
with differences become visible. It can be observed that there
is only one LE with differences,
indicated by the yellow
window in Fig. 7. The size of this area is about 7 µm× 9 µm,
and located directly to the right of the potential clock buffer.
Due to the number of different spots, we assume that the
window contains more than just the register. Presumably, the
in- and output transistors, as well as other logic, also contribute
to the LLSI signature; however, this is irrelevant to our attack
© 2020 IEEE
8
–
=
Bit = 1
Bit = 0
Difference
Fig. 7. LLSI measurement of 3 LEs (separated by dashed lines) with only the register of the centered LE (yellow window) set ﬁrst to 1 and then to 0, while
keeping the other registers set to 0. When subtracting images from each other, the result indicates the differences. Only the register at the centered LE shows
a clear difference, indicating that the bit value has changed.
3.3 ms/px with a VCCINT modulation of 640 mVpp at 90 kHz.
Our scanning routine – including autofocus and drift correction
– needs 2.7 minutes to scan one LAB (containing 16 register
cells). Note that we scanned only the part of the LABs holding
the register cells. Scanning all 3 and 5-share key registers took
around 65 and 108 minutes, respectively.
We could easily read out the bit values from the LLSI mea-
surements (even manually possible, for example, see Fig. 8).
Subtracting a reference measurement when zero stored in the
registers (recorded, e.g., directly after resetting the device)
could potentially facilitate manual readout, as also already
observed in Section VI-A. However, we used an automated
correlation-based extraction scheme which does not require to
take snapshots of all registers while they contain zeroes.
Extracting bit values from snapshots. To extract
the bit
values from the LLSI images as described in Section IV,
we applied off-the-shelf image processing algorithms provided
in the Matlab software package [71]. First, we registered all
the optical images that had been captured along with the
snapshots using an elastic transformation. Note that here the
process of registration refers to the transformation of the sets
of data into one coordinate system, which should not be
confused with the technique that we apply to identify the
register values. The alignment enables us to cut every register
cell according to the boundaries observed in Section VI-A
from the snapshot images in an automated fashion. From the
resulting cells, we chose two template snapshots of a single
register cell for different bit values and subtracted them from
each other to remove the signatures not representing the bit
value. Then, as explained in Section IV-A, we applied noise
reduction through adaptive ﬁltering, and ﬁnally converted the
templates to a binary mask, see Fig. 8. To extract the bit
values, we calculated the 2-D cross-correlation between the
snapshot and each template. For determining the value of the
register cells, the template for which the maximum correlation
is achieved is taken into account. In our experiment, we
extracted the value of all registers from the snapshots with
100% accuracy. It is worth mentioning that for our approach,
solely a pair of reference cells is required, which can be
prepared straightforwardly. The efﬁciency of our technique
should be evident when comparing it with machine learning
methods that require a relatively large set of labeled cells.
Due to the underlying 2nd- and 4th-order Boolean masking
scheme, by bit-wise XOR’ing all shares, the entire 128 bits
of the AES key are trivially revealed (for the ﬁrst key byte
of the 3-share implementation, see Fig 9). The raw LLSI
measurements and extraction scripts for all experiments are
© 2020 IEEE
9
Fig. 8. Correlation-based data extraction mechanism from snapshots of half
a LAB (8 bits). Due to the FPGA layout, every second cell has to be ﬂipped
horizontally. The correlation coefﬁcient r(a, b) between each cell and the
templates for value 0 and 1 is calculated. The extracted bit value is determined
by the template matching best.