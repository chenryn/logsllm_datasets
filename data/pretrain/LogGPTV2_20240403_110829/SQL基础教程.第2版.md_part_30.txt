INSERT INTO Product2 VALUES ('0001', 'T恤衫' ,'衣服', 1000, 500, 
'2008-09-20');
INSERT INTO Product2 VALUES ('0002', '打孔器', '办公用品', 500, 
320, '2009-09-11');
INSERT INTO Product2 VALUES ('0003', '运动T恤', '衣服', 4000, 
2800, NULL);
INSERT INTO Product2 VALUES ('0009', '手套', '衣服', 800, 500, NULL);
INSERT INTO Product2 VALUES ('0010', '水壶', '厨房用具', 2000, 
1700, '2009-09-20');
COMMIT;
表示下一行接续本行，只是由于版面所限而换行。
特定的SQL
不同的DBMS的事务处理的语法也不尽相同。代码清单7-2中的DML语句在
MySQL中执行时，需要将①部分更改为“START TRANSACTION;”。在Oracle和
DB2中执行时，无需用到①的部分（请删除）。
详细内容请大家参考4-4节中的“创建事务”。
这样我们的准备工作就完成了。接下来，就让我们对上述两张表进行
“Product表+Product2表”的加法计算吧。语法请参考代码清单7-3。
7-1 表的加减法 227 ●
代码清单7-3 使用UNION对表进行加法运算
SELECT product_id, product_name
FROM Product
UNION
SELECT product_id, product_name
FROM Product2;
执行结果
product_id | product_name
----------+-------------
0001 | T恤衫
0002 | 打孔器
0003 | 运动T恤
0004 | 菜刀
0005 | 高压锅
0006 | 叉子
0007 | 擦菜板
0008 | 圆珠笔
0009 | 手套
0010 | 水壶
上述结果包含了两张表中的全部商品。可能有些读者会发现，这就是
我们在学校学过的集合中的并集运算，通过文氏图会看得更清晰（图7-1）。
图7-1 使用UNION对表进行加法（并集）运算的图示
Product Product2
菜刀(0004)
高压锅(0005) T恤衫(0001) 手套(0009)
叉子(0006) 打孔器(0002) 水壶(0010)
运动T恤(0003)
擦菜板(0007)
圆珠笔(0008)
※括号内的数字代表了商品的编号。
商品编号为“0001”~“0003”的3条记录在两个表中都存在，因
此大家可能会认为结果中会出现重复的记录，但是UNION等集合运算符
通常都会除去重复的记录。
法则7-1
集合运算符会除去重复的记录。
● 228 第7章 集合运算
集合运算的注意事项
其实结果中也可以包含重复的记录，在介绍该方法之前，还是让我们
先来学习一下使用集合运算符时的注意事项吧。不仅限于UNION，之后
将要学习的所有运算符都要遵守这些注意事项。
■注意事项① ——作为运算对象的记录的列数必须相同
例如，像下面这样，一部分记录包含2列，另一部分记录包含3列时
会发生错误，无法进行加法运算。
-- 列数不一致时会发生错误
SELECT product_id, product_name
FROM Product
UNION
SELECT product_id, product_name, sale_price
FROM Product2;
■注意事项② ——作为运算对象的记录中列的类型必须一致
从左侧开始，相同位置上的列必须是同一数据类型。例如下面的SQL
语句，虽然列数相同，但是第2列的数据类型并不一致（一个是数值类型，
注A 一个是日期类型），因此会发生错误A。
实际上，在有些DBMS中，即使数
据类型不同，也可以通过隐式类
-- 数据类型不一致时会发生错误
型转换来完成操作。但由于并非
SELECT product_id, sale_price
所有的DBMS都支持这样的用法，
FROM Product
因此还是希望大家能够使用恰当
UNION
的数据类型来进行运算。
SELECT product_id, regist_date
FROM Product2;
一定要使用不同数据类型的列时，可以使用6-1节中的类型转换函数
CAST。
■ 注意事项③ —— 可以使用任何SELECT语句，但ORDER BY子句只
能在最后使用一次
通过UNION进行并集运算时可以使用任何形式的SELECT语句，
之前学过的WHERE、GROUP BY、HAVING等子句都可以使用。但是
ORDER BY只能在最后使用一次（代码清单7-4）。
代码清单7-4 ORDER BY子句只在最后使用一次
SELECT product_id, product_name
7-1 表的加减法 229 ●
FROM Product
WHERE product_type = '厨房用具'
UNION
SELECT product_id, product_name
FROM Product2
WHERE product_type = '厨房用具'
ORDER BY product_id;
执行结果
product_id | product_name
----------+--------------
0004 | 菜刀
0005 | 高压锅
0006 | 叉子
0007 | 擦菜板
0010 | 水壶
包含重复行的集合运算—— 选项
ALL
KEYWORD 接下来给大家介绍在UNION的结果中保留重复行的语法。其实非常
●ALL选项
简单，只需要在UNION后面添加ALL关键字就可以了。这里的ALL选项，
在UNION之外的集合运算符中同样可以使用（代码清单7-5）。
代码清单7-5 保留重复行
SELECT product_id, product_name
FROM Product
UNION ALL
SELECT product_id, product_name
FROM Product2;
执行结果
product_id | product_name
----------+--------------
0001 | T恤衫
0002 | 打孔器
0003 | 运动T恤
0004 | 菜刀
0005 | 高压锅
0006 | 叉子 这3行记录是重复的
0007 | 擦菜板
0008 | 圆珠笔
0001 | T恤衫
0002 | 打孔器
0003 | 运动T恤
0009 | 手袋
0010 | 水壶
● 230 第7章 集合运算
法则7-2
在集合运算符中使用ALL选项，可以保留重复行。
选取表中公共部分——
INTERSECT
下面将要介绍的集合运算符在数的四则运算中并不存在，不过也不难
KEYWORD 理解，那就是选取两个记录集合中公共部分的INTERSECT（交集）A。
●INTERSECT（交集）
让我们赶快来看一下吧。其语法和UNION完全一样（代码清单7-6）。
注A
因为MySQL尚不支持INTERSECT，所 代码清单7-6 使用INTERSECT选取出表中公共部分
以无法使用。
Oracle SQL Server DB2 PostgreSQL
SELECT product_id, product_name
FROM Product
INTERSECT
SELECT product_id, product_name
FROM Product2
ORDER BY product_id;
执行结果
product_id | product_name
----------+--------------
0001 | T恤衫
0002 | 打孔器
0003 | 运动T恤
大家可以看到，结果中只包含两张表中记录的公共部分。该运算的文
氏图如下所示（图7-2）。
图7-2 使用INTERSECT选取出表中公共部分的图示
Product Product2
菜刀(0004)
高压锅(0005) T恤衫(0001) 手套(0009)
叉子(0006) 打孔器(0002) 水壶(0010)
运动T恤(0003)
擦菜板(0007)
圆珠笔(0008)
※括号内的数字代表了商品的编号。
7-1 表的加减法 231 ●
与使用AND可以选取出一张表中满足多个条件的公共部分不同，
INTERSECT应用于两张表，选取出它们当中的公共记录。
其注意事项与UNION相同，我们在“集合运算的注意事项”和“保
留重复行的集合运算”中已经介绍过了。希望保留重复行时同样需要使用
INTERSECT ALL。
记录的减法——
EXCEPT
KEYWORD 最后要给大家介绍的集合运算符就是进行减法运算的EXCEPT（差
●EXCEPT（差集）
集）A，其语法也与UNION相同（代码清单7-7）。
注A
代码清单7-7 使用EXCEPT对记录进行减法运算
只有Oracle不使用EXCEPT，而
是使用其特有的MINUS运算符。
SQL Server DB2 PostgreSQL
使用Oracle的用户，请用MINUS SELECT product_id, product_name
代替EXCEPT。此外，MySQL还不 FROM Product
支持EXCEPT，因此也无法使用。 EXCEPT
SELECT product_id, product_name
FROM Product2
ORDER BY product_id;
特定的SQL
在Oracle中执行代码清单7-7或者代码清单7-8中的SQL时，请将EXCEPT改为
MINUS。
-- Oracle中使用MINUS而不是EXCEPT
SELECT …
FROM …
MINUS
SELECT …
FROM …;
执行结果
product_id | product_name
----------+--------------
0004 | 菜刀
0005 | 高压锅
0006 | 叉子
0007 | 擦菜板
0008 | 圆珠笔
● 232 第7章 集合运算
大家可以看到，结果中只包含Product表中记录除去Product2
表中记录之后的剩余部分。该运算的文氏图如图7-3所示。
图7-3 使用EXCEPT对记录进行减法运算的图示
Product Product2
菜刀(0004)
高压锅(0005) T恤衫(0001) 手套 (0009)
叉子(0006) 打孔器 (0002) 水壶 (0010)
运动T恤 (0003)
擦菜板(0007)
圆珠笔(0008)
※括号内的数字代表了商品的编号。
EXCEPT有一点与UNION和INTERSECT不同，需要注意一下。
那就是在减法运算中减数和被减数的位置不同，所得到的结果也不相同。
4 + 2和2 + 4的结果相同，但是4 - 2和2 - 4的结果却不一样。
因此，我们将之前SQL中的Product和Product2互换，就能得到
代码清单7-8中的结果。
代码清单7-8 被减数和减数位置不同，得到的结果也不同
SQL Server DB2 PostgreSQL
-- 从Product2的记录中除去Product中的记录
SELECT product_id, product_name
FROM Product2
EXCEPT
SELECT product_id, product_name
FROM Product
ORDER BY product_id;
执行结果
product_id | product_name
------------+--------------
0009 | 手套
0010 | 水壶
上述运算的文氏图如图7-4所示。
7-1 表的加减法 233 ●
图7-4 使 用 EXCEPT对记录进行减法运算的图示（从Product2中除去Product
中的记录）
Product Product2
菜刀(0004)
高压锅(0005) T恤衫(0001) 手套 (0009)
叉子(0006) 打孔器 (0002) 水壶 (0010)
运动T恤 (0003)
擦菜板(0007)
圆珠笔(0008)
※括号内的数字代表了商品的编号。
到此，对SQL提供的集合运算符的学习已经结束了。可能有些读者
会想“唉？怎么没有乘法和除法呢？”关于乘法的相关内容，我们将在下
一节详细介绍。此外，SQL中虽然也存在除法，但由于除法是比较难理解
的运算，属于中级内容，因此我们会在本章末尾的专栏中进行一些简单的