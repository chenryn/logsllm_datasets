tmp/dirA/fileo.txt',
tmp/dirB/file00.txt'
tmp/temp.tar'
tmp/file00.txt'
第6章
'tmp/dirA/file0.txt'at 0x10a4350>,
'tmp/temp.tar'
ngift/wheel
ngift/wheel
ngift/wheel
ngift/wheel
ngift/whee
ngift/wheel
ngift/whee]
at 0x10a4310>,
当你处理备份时，可以将它们视为核武器，因为它们能
22
m
www.TopSage.com
2008-04-04 16:21:50 tmp/dirB/file11.txt
2008-04-04 16:19:52
2008-04-04 15:17:14 tmp/file00.txt
2008-04-04
2008-04-04
2008-04-04
2008-04-04
2008-04-04
2008-04-04
2008-04-04
，这些TAR文件是我们之前创建的：
416:19:52
416:19:52
16:19:07
1
15:15:39
16:19:07
16:19:07
20:50:57
2tmp/dirB/file0o.txt
2tmp/dirB/file0.txt
tmp/dirA/file1.txt
tmp/dirA/file00.txt
7tmp/dirA/file0.txt
tmp/temp.tar
款乎
DG
---
## Page 221
每一个单独的文档应该在创建之后被重新打开并验证其有效性。
没有任何归档解决方法是完全可靠的。至少，对文档进行随机检测应当是自动进行的，
完整非常有效。
随机MD5校验，
如果你有疑虑，可以增加这个操作：提取归档文件的内容，并对来自归档中的文件执行
下，可以简单地执行下面的操作：
取文件不是非常费劲的工作。如果想要把整个TAR文档中的内容提取到当前工作目录
这些示例演示了如何检查TAR文档中的文件名，这在数据验证脚本中是十分有效的。提
drwxrwxrwx7ngift wheel
In [60]: tar.extractall()
,
TarInfo
‘tmp/dirB/file11.txt'at0x10a4590>]
'tmp/dirB/file00.txt'at 0x10a44d0>
'tmp/dirA/file1.txt'
'tmp/dirB/file1.txt'
，并将结果与备份之前生成的MD5校验和进行比较。这对于监测数据是否
238Apr 422:59tmp/
at 0x10a4530>,
at 0x10a4470>,
at 0x10a4410>
www.TopSage.com
数据丨207
---
## Page 222
SNMP，这表示它能够管理的不仅是交换机和路由器，也包括打印服务器，UPS，存储
实现的，尽管也有极小的可能性会选择使用TCP协议。作为数据中心的现代设备支持
器等设备。
总体来看，SNMP是IP网络的设备管理协议。典型地，这是通过UDP端口161和162来
SNMP概述
制，以及最后的企业SNMP整合。当然，所有这些事情都是在Python下完成的。
在这一章中，我们涉及SNMP的这样一些方面：自动发现，投票/监测，写代理，设备控
如果你是一名系统管理员，可以说SNMP能改变你的生活。使用SNMP的好处不像编写
引言
的写代理。
中如何使用SNMP介绍清楚。
本书的范围。事实上，关于SNMP的内容非常丰富，需要完整的一本书才能把在Python
么，是非常重要的。接下来的一节仅介绍了SNMP的一些基本知识，太多的细节超出了
以便查阅。一本好的SNMP参考书对于真正理解SNMP，明白使用SNMP到底可以做些什
和KevinSchmidt（O'Reilly）编著的《EssentialSNMP》，或者至少将这本书放在手边
如果你对SNMP不熟悉，或许需要重新温习SNMP。我们强烈建议阅读由DouglasMauro
立起来之后，在其上工作会让你感到惊喜。
SNMP
208
做法。使用SNMP协议也可以完成其他一些工作，例如控制设备，对特定条件进行响应
使用SNMP的基本方法是发送UDP包到主机，然后等待响应。这是监测设备非常常用的
对SNMP的简要介绍
几行Python代码来对日志文件进行解析那样立竿见影，但是当一个SNMP基础结构被建
第7章
www.TopSage.com
---
## Page 223
势，这取决于其在什么环境中被实现。
SNMP命令行工具；方法二是使用新的Python绑定。每一个方法都有各自的优势和劣
对于Net-SNMP自身，可以使用两类不同的API。方法一使用subprocess模块来封装Net-
Net-SNMP并不表示其他一些基于Python的SNMP库（包括PySNMP，这是TwistedSNMP
出于简化的考虑，我们仅介绍Net-SNMP，以及绑定到Net-SNMP的对应Python。仅介绍
SNMP安装及配置
继续阅读还是放弃而犹豫不决。我们保证很快你就会感觉好一些，并在几分钟内写出
至此，我们给出了一堆术语和一个RFC，面对这么多术语你或许会比较困惑，正对是
snmpwalk来设置sysDescr OID的值，既可以将其设为文本也可以设为数字：
这是非常有效的方式，也值得介绍，但在本章中没有足够的篇幅来对这两者进行介绍。
和Zenoss都使用的）不好用。在Zenoss和TwistedSNMP中，PySNMP以异步方式使用。
因为数字名称非常长而且很难记忆。最普通的OID是sysDescr。如果使用命令行工具
文本类型（适于阅读）。大多数情况下你更愿意使用适于阅读的文本类型的OID名称，
被引用。OID让你可以告诉代理需要操作的对象是什么。名称有两种类型：数字类型和
码。在这些属性当中，名称是第一个需要知道的内容。名称经常作为OID（对象标识)
MIB文件内是被管理对象的定义。每一个对象有三个属性：名称，类型和语法，以及编
译为数字的文件，就象DNS一样，但是MIB要更为复杂一些。
是MIB-II，其在RFC1213中被定义。一种看待MIB的思路是将其视为一个能够将名称翻
际的对象列表由MIB（管理信息基础）进行控制。每一个代理至少实现一个MIB，并且
进行约定。在被监测的设备上运行代理snmpd。snmpd具有一个保持追踪的对象列表。实
既然已经谈到了MIB，接下来对其做进一步说明。SNMP仅是一个协议，并没有对数据
常规的基于设备的SNMP监控。
后，SNMP还可以提供对RMONMIB的远程监控，这是支持基于数据流的监控，不同于
件。通常很少人知道，使用SNMP也可以监测软件，例如web应用程序和数据库。最
你可以使用SNMP来管理和控制交换机，或者更进一步通过SNMP来重新加载配置文
一些使用SNMP的非常典型的应用包括监测CPU负载，磁盘使用情况和内存空闭状态。
代码。
2.6.18-8.1.15.el5 #1 SMP Mon 0ct 22 08:32:04 EDT 2007 i686
SNMPv2-MIB:
2.6.18-8.1.15.e15 #1 SMP Mon 0ct 22 08:32:04 EDT 2007 i686
STRING:
www.TopSage.com
Linux
Linux
SNMP|209
---
## Page 224
访问www.py4sa.com，这是这本书的合作图书网站，它有最新的关于如何运行本节中示
可以从http://www.oreilly.com/9780596515829下载虚拟机，以及这本书的源代码。也可以
只要Net-SNMP已经安装，那么就不需要再做任何事情了。
定。如果计划封装Net-SNMP命令行工具，例如snmpget，snmpwalk，snmpdf以及其他，
的Net-SNMP进行开发（这正是本章将介绍的内容），需要编译源代码来安装Python绑
需要修改snmpd.conf文件来适应具体需要，并启动守护进程。如果计划使用Python绑定
数Unix和Linux操作系统已经安装了Net-SNMP，因此如果需要监测一个设备，通常只
我们已经配置了具有Net-SNMP和Python的虚拟机。你可以通过使用虚拟机来运行所有
要使SNMP发挥作用，尤其是Net-SNMP,你必须首先对其进行安装。幸运的是，绝大多
的公共API来与其通信。为zenoss写一个插件、补丁或是扩展Zenoss本身都是可行的。
监测解决方案。通过Zenoss，你不必从头来编写SNMP管理解决方案，并且可以通过它
最后，我们也介绍了Zenoss，它是开源的，是一个非常出色的Python下的企业级SNMP
MIB与Net-SNMP一同编译。一般来说，可以像下面这样操作：
在配置方面，如果碰巧正在想要监测的客户端安装Net-SNMP，应该将Host Resources
适合的编译方法。如果在编译Python时遇到问题，有一个技巧是像下面这样手工执行
Python setup.Py test进行测试。如果NetSNMP可以与Python协同工作了，你应该会找到
Solaris，OS X，HPUX等系统平台。如果遇到麻烦，可以先使用虚拟机来运行示例，然
行编译，你或许希望首先在Red Hat上试验一下，看其是否能够成功，然后再尝AIX，
py脚本。我们发现在Red Hat上安装最为容易，因为有RPM资源可以利用。如果决定进
建。简单地说，首先需要编译该版本的Net-SNMP，然后运行Python目录中的setup.
更高版本。绑定不是默认的，因此需要仔细地依照Python/README目录中的说明来构
安装Python绑定，你需要从sourceforge.net下载Net-SNMP，并且需要Net-SNMP5.4或
章中提及的同时与多台主机进行通信的代码。
的示例。如果有足够的可供使用的硬件资源，还可以制作一些虚拟机的副本，并模拟本
例的信息。
210
值得注意的是，在运行配置时，它会试图运行一个自动配置脚本。如果不想，就没必要
Idconfig:
最后，
后再估计一下之后如何进行编译。
./configure -with-mib-modules=host
ldconfig -v /usr/local/lib/
，自己编译时还需要注意一点：要确保运行python setup.py进行创建，并且运行
第7章
www.TopSage.com
---
## Page 225
能不会返回任何响应，部分可能返回一些有用的但是不确切的类似“光交换机”这样的
重要手段。不幸的是，正如SNMP的许多其他方面，这一过程不是精确的。一些设备可
正如在本章后面会看到的，解析来自sysDescr查询的响应是在早期发现数据中心的一个
的识别。从这个示例的输出部分可以看到，与uname-a相比，虽然不相同但非常相似。
明，正如之前所说，sysDescr是一个非常重要的OID查询，可以在主机上执行一些基本
利用了IPython的tab自动完成功能，并且创建了一个基本的SNMPv2查询。作为一般说
在学习使用一个新库时，使用tab的自动完成功能非常有帮助。在这个示例中，我们完全
Out[4]: ('Linux localhost 2.6.18-8.1.14.el5 #1 SMP Thu Aug 27 12:51:54 EDT 2008 i686',)
In [3]: result = netsnmp.snmpwalk(oid,
In [2]: oid = netsnmp.Varbind('sysDescr')
In [1]: import netsnmp
例7-1：使用IPython和绑定Python的Net-SNMP
例7-1是运行在本地主机上的非常简单的代码：
问题的方法是使用IPython来写SNMP代码，这样可以方便地使用API。
量的RFC，而且还会有很高的出错率。一种消除开发起始阶段会遇到的这些令人头痛的
确实是这样。使用SNMP还是比较麻烦的，因为它涉及到非常复杂的协议，需要阅读大
如果之前没有做过任何SNMP开发，刚一接触或许会给你留下不好的印象。坦诚地讲，
到流量拦截。
v1版需要明确的转发。这种情况下，无法使用SNMPv2或v1查询整个互联网，因为会遇
..：
IPython与Net-SNMP
在生产环境的设备控制中我们确实要使用它。强烈建议大家使用SNMPv3，因为v2版和
SNMPv3配置起来有点麻烦，并且对本章的大部分内容来说，都略微超出于范围，尽管
仅是这个简单的配置文件对于本章的其他部分以及非SNMPv3查询，就已经够用了。
存在/etc/snmp/snmpd.conf中，可以像下面这样非常简单地完成配置：
这样做了。通常创建一个自定义配置文件非常容易。基于Red Hat系统的配置文件通常保
syslocation "0'Reilly"
Version = 2,
www.TopSage.com
X
SNMP | 211
---
## Page 226
#!/usr/bin/env python
例7-2显示了一个简单的模块，它允许我们在与Net-SNMP创建连接时，提取模板代码。
让我们继续，在文件snmp-py中编写如下代码：
行查看。这一技巧对于使用Net-SNMP非常有帮助，因为代码复用本质上适合该问题。
入下面的内容可以在IPython内部切换到Vim：
正像你在IPython这章中所学到的，当使用IPython在文件中写一个类或函数时，通过键
人的讲解，会专门有人处理这些响应差异问题。
现在有了一个面向对象的SNMP接口，可以使用它来查询本地主机：
在IPython中保存这个文件，并键入who时，会看到如下所示内容：
然后，当退出Vim时，可以在你的命名空间中取得该模块的属性，并且通过键人who来进
信息，另外一些会返回一个供应商识别字符串。
212
import netsnmp
例7-2：基本Net-SNMP会话模块
ed snmp.py
ed some_filename.py
Snmp netsnmp
In[2]:who
return result
except Exception, err:
def
try:
 result = netsnmp.snmpwalk(self.oid,
print err
第7章
self.community=Community
self.destHost = DestHost
self.version = Version
self.oid:
oid ="sysDescr"
DestHost=
Version = 2,
=oid
"localhost"
Community= self.community)
DestHost = self.destHost,
Version = self.version,
www.TopSage.com
，我们没有时间对如何解决该问题进行深
歌
---
## Page 227
接下来，使用IPython的一个特定的功能，该功能能够让我们将作业发送到后台：
会消耗客户端的资源。
些时间，因为这需要对大多数OID进行查询。在产品环境中这不是最好的方法，因为它
定，可以查看各种各样的其他OID查询，甚至遍历所有的MIB树。遍历MIB树会花去一
本。让我们修改OID对象的值来遍历整个系统子树：
可以看到，使用模块可以很方便地得到结果，但是这里基本上只运行了一个硬编码脚
注意：
交互式编程风格使得处理SNMP成了令人感到愉快的事情。在这一点上，如果你还不肯
In [10]: print result
In[9]:result = s.query()
In [8]: s.0id = ".1.3.6.1.2.1.1"
In [7]: s.oid
Out[6]:1
In [6]: len(result)
In [5]: result = s.query()
In [3]: s = snmp()
Out[12]:'Completed'
'View-based Access Control Model for SNMP.','o', 'o', 'o',‘o', 'o', 'o', 'o', 'o')
managing UDP [snip]'
The
The
:1.3.6.1.2.1.49'
1.3.6.1.4.1.8072.3.2.10',
记住，MIB-II是一个写满了OID的文件，在支持SNMP的大多数系统中都包含该文件。其他
.1.3.6.1.6.3.1',
处理，需要查看特定提供商定义的文档来决定在什么样的MIB中查询什么OID。
特定提供商定义的MIB是附加的文件，代理可以引用并给予响应。如果希望做更进一步的
MIB for Message Processing and Dispatching.', 'The management information definitions
MIB
'.1.3.6.1.6.3.10.3.1.1',
moduleforSNMPv2entities'
'.1.3.6.1.2.1.4',
'121219',
'.1.3.6.1.6.3.11.3.1.1',
www.TopSage.com
'PI:EMAIL'
'localhost'
'.1.3.6.1.6.3.15.2.1.1',
"My Local Machine"'
SNMP | 213
---
## Page 228