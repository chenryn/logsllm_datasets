=== parse[[parse_function]]
摘要：
    用于搜索时动态抽取字段
语法：
    parse [field=] “” [max_match=]
必要参数：
* 
** 语法：
** 描述：
    支持java的正则表达式，应该包括(?X)形式的named-capturing group, 否则该正则表达式将被忽略
可选参数：
* 
** 语法：
** 描述：
    用于抽取正则表达式的字段，如果未指定，默认为: raw_message
* 
** 语法：
** 描述：
    用于指定抽取正则表达式的次数，如果未指定则默认抽取第一个匹配到的值，如果该值大于1则返回类型为多值字段类型，反之返回单值字段类型
[NOTE]
====
* 不支持eval后的字段
* parse.max_match：max_match参数的上限，用于限制输入指定的max_match参数值，如果超过该配置项的值，默认值为100
====
[NOTE]
====
* 不支持eval后的字段
====
.示例1
====
从日志原文中抽取ip地址，得到新的字段ip_addr,并且按照ip_addr分组并计算appname的个数
[source,sh]
* | parse "(?\d+\.\d+\.\d+\.\d+)" | stats count(appname) by ip_addr
image::images/Image-140318-042913.644.png[]
从结果图中可以看到新生成的ip_addr字段，该字段的格式满足指定的正则表达式
====
.示例2
====
抽取request_path 的第一级目录outer_path,并按照outer_path分组统计appname的个数
[source,sh]
logtype:apache | parse field=apache.request_path "^(?/[^/]*)" | stats count(appname) by outer_path
image::images/Image-140318-042941.426.png[]
====
.示例3
====
从日志原文中抽取raw_message中的前两组数字
[source,sh]
*|parse "(?\d+)" max_match=2
image::images/Image-140318-042980.428.png[]
从结果图中可以看到新生成的messageNum字段，该字段为包含两个值的多值字段
====