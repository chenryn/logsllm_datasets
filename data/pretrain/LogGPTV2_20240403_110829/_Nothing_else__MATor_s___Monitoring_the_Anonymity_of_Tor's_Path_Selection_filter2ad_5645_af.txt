whether w1/w2 > eε.
(cid:88)
n2∈N
n,n2unrelated
n,n2distinguishing
ps.enPMaxEx(n) · (w1 − w2)
For the middle position, the adversary can in some cases learn which setting is chosen by identifying a port that
is not offered by the observed exit node yet requested in one of the settings. For a node n, computing the increase
δM i(n) in the adversary’s distinguishing probability is analogous to the increase for an entry node. Similar to
δEn(n), we over-approximate the effect of the entry node δM i(n) as depicted in Figure 8.
Finally, we incorporate the effect of the adversary’s ability to always observe which entry node is chosen.
Recall that the probability for choosing a particular entry node can differ if different exit nodes are in the best
support for different lists of requested ports in the two settings. To respect this impact on anonymity we add for
each entry node n the difference of the probabilities that n is chosen in one setting and that n is chosen in the other
setting:
(cid:88)
δsEn(n) :=
enP1 − enP2,
ex∈bS1
where enPi = ps.enP(n, ex, pf , portsi).
We approximate the probabilities for relationship analogously.
5.5 Relationship Anonymity Bounds
Relationship anonymity considers a setting in which an observer tries to deanonymize a communication between
a sender and a recipient. The adversary does not already control the ISP of the sender or the server, but corrupts or
19
δEnEx(en, ex ) := ps.enP(en, ex , pf , ports1) · ps.exP(ex , pf , ports1)
enP(en)+ = δEnEx(en, ex )
if ps.allows(ex , pf , ports1) then
for en in N do
if ps.allows(en, ex , pf , ports1) then
w1 := ps.miPMaxEn(mi, ex , pf , ports1)
w2 := ps.miPMinEn(mi, ex , pf , ports2)
if w1
w2
RelMonitor(N , pf , ports1, ports2, ps, ε)
1: for ex in N do
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12: for en in N do
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23: Compute (approximate) the respective δ for the maximal subset of nodes
w1 := ps.miPMaxEx(mi, en, pf , ports1)
w2 := ps.miPMinEx(mi, en, pf , ports2)
if w1
w2
δEnM i(en, mi)+ = enP(en) · δintermediate(mi)
δintermediate(mi)+ = ps.exP(ex , pf , ports1) · (w1 − w2)
t+ = ps.enPMaxEx(en, pf , ports1) · (w1 − w2)
t := 0
for mi in N \ {en} do
t := min t, enP(en)
δEn(en) := t
for mi in N do
> eε then
if enP(en) > 0 then
> eε then
Figure 8: Relationship Anonymity Monitor
controls some Tor nodes. As presented earlier, in ANOA, relationship anonymity is formalized by comparing two
challenge settings in which there are two possible senders and two possible recipients. As for recipient anonymity,
we exclude ﬁngerprinting attacks for this analysis, as those attacks are based on the content of messages.
For computing the relationship anonymity bound we ﬁrst observe that the adversary has to break the anonymity
of the sender in order to succeed. Consequently, the scenarios in which an adversary gains an advantage are a
combination of the scenarios from sender anonymity and from recipient anonymity: As long as the probability
for choosing entry nodes is not different for different senders, the entry node has to be compromised. Still, the
probability of three scenarios associated with recipient anonymity has to be considered. The most intuitive and
most severe scenario is a compromised entry node in combination with a compromised exit node. In this case
an adversary can immediately see both the sender and the recipient of a message, and thus, break relationship
anonymity. The second scenario is a compromised entry node in combination with a compromised middle node.
Here, depending on the ports that are used, an observed exit node might be more likely in one of the scenarios
or even impossible, in some other scenarios. The third scenario is a compromised entry node without other
compromised nodes. Even now the adversary might learn something by seeing the middle node, which might be
more or less likely to be chosen, depending on which exit node was chosen (which, again, might depend on the
scenario).
Similarly to recipient anonymity, computing a precise bound for relationship anonymity directly is infeasible
for a light-weight anonymity monitor. Consequently we give a sound approximation for the anonymity guarantee.
We give estimates for the advantage of the adversary for each combination of nodes, as well as for each individual
entry node. To overcome the necessity to compute the best subset of all nodes such that their combinations
yield the optimal advantage for the adversary, we observe that by compromising k nodes an adversary can only
compromise at most k·(k−1)
combinations of nodes. Our bound comprises of the top k values from compromising
entry nodes only and the top k·(k−1)
Theorem 4 (Relationship Anonymity Monitor). For a consensus document, a set of server descriptors, a user’s
preferences pf and two sets of ports ports1 and ports2, let N be the set of nodes in the consensus together
with their weights. Let ε > 0 be a real value . Then for the output δ of the algorithm RelMonitor(N ,
(cid:48) satisﬁes (1, ε, δ) − αSRel-IND-CDPMATOR(pf ,ports1,ports2) against passive local adver-
pf , ports1, ports2,ps,ε) ΠOR
saries, where αSRel-IND-CDPMATOR(pf ,ports1 ,ports2 ) denotes session relationship anonymity (see Section 3).
values that arise from combinations of two nodes.
2
2
20
Figure 9: Relationship anonymity guarantees (value of δ) depending on the number of compromised nodes. We
used ε = 0 and as settings the ports HTTPS+IRC vs. HTTPS.
Proof. The proof assumes that there is no distinguishing exit node, no distinguishing middle node and no distin-
guishing combination of exit and middle nodes. This holds for both PSTOR and DISTRIBUTOR.
By Theorem 1 and Lemma 22 from the full version of the AnoA framework [7, Lemma 22], we know that it
sufﬁces to show that (1, ε, δ) − αSRel-IND-CDPMATOR(pf ,ports1,ports2) holds for the ideal functionality FOR
In contrast to both sender anonymity and recipient anonymity, the impact that compromising a node has on
δ highly depends on other nodes, as both sender and recipient have to be deanonymized. For the third scenario
that we described above (only the entry node is compromized) we can compute the impact of every node n on δ,
describe it as δ(n) and then sum over the k nodes with the largest values δ(n). For the other two scenarios (Entry
and Exit node are compromized; entry and middle node are compromized), we instead compute how much impact
a combination of two nodes has on δ and coin this impact for nodes n and m as δEnEx(n, m) and δEnM i(n, m)
respectively.
For given , we can bound δ as follows, where k is the number of compromised nodes, and x is the number of
(cid:48).
compromised connections between Entry-Exit or Entry-Middle nodes:
(cid:33)
(cid:32)
(cid:88)
n∈K
(cid:88)
m∈K
(cid:88)
n∈K
(cid:88)
e∈X
δ ≤ max
K s.t.|K|≤k
δEn(n) +
δEnEx(n, m) + δEnM i(n, m)
To increase the efﬁciency of our monitors we safely approximate this computation by regarding the values for
δEnEx and δEnM i as weights on a directed graph between nodes. We then collapse the graph into an undirected
graph G = (N, E) with nodes N and edges E. If k nodes within this graph are compromised, their total contribu-
tion to δ (in terms of δEnEx and δEnM i) is given by the sum over the weights δedge of all edges that connect them.
Furthermore we see that for k nodes not more than k(k−1)
edges e can be compromised and thus can approximate
the value for δ as:
2
δ ≤ max
K s.t.|K|≤k
δEn(n) +
max
X⊆E s.t.|X|≤ k(k−1)
2
δedge(e)
where for every e = {n, m}, δedge(e) = δEnEx(n, m) + δEnEx(m, n) + δEnM i(n, m) + δEnM i(m, n). We
show in the following that these values are safely over-approximated, beginning with δEn. We say that a triple
en, mi , ex is distinguishing ⇐⇒ w(cid:48)
i = ps.exPi(ex )·ps.enP (en, ex )·ps.miP (mi , en, ex ).
(cid:88)
Then we can over-approximate δEn(en) as follows:
2 > e, where w(cid:48)
(cid:88)
1/w(cid:48)
δEn(en) =
w
(cid:48)
1 − w
(cid:48)
2
ex∈bS1
ex ,en unrelated
mi∈nodes
en,mi,ex unrelated
en,mi,ex distinguishing
(cid:88)
≤
mi∈nodes
en,mi unrelated
en,mi quasi entry distinguishing
ps.enP M axEx(en) · (w1 − w2)
where en, mi quasi entry distinguishing ⇐⇒ w1/w2 > e and w1 := ps.miP M axEx(m, n), w2 :=
ps.miP M inEx(m, n). We stress that we have to use ps.enPMaxEx(n) because we do not know which exit node
21
 0 0.1 0.2 0.3 0.4 0.5 0.6 0 50 100 150 200Anonymity bound δPSTor 443+194 (IRC) vs 443PSTor 443 vs 443DistribuTor 443+194 (IRC) vs 443DistribuTor 443 vs 443Figure 10: Bandwidth and weights chosen by Tor (from top to bottom: total bandwidths, entry bandwidths, exit
bandwidths, one point for each node; the nodes are sorted by bandwidth for each line)
was chosen, so we choose the entry with the maximal family has been chosen whose impact is worst.
For approximating δedge we proceed as follows. The values for δEnEx can be computed directly by using the
Path Selection algorithm:
We approximate the values for δEnM i analogously to the approximation of δEn from above:
δEnEx(en, ex ) = ps.exP1(ex ) · ps.enP (en, ex )
(cid:88)
(cid:88)
ex∈bS1
ex ,mi unrelated
(cid:88)
en∈nodes
en,mi,ex unrelated
en,mi,ex distinguishing
ex∈nodes
mi,ex unrelated
mi,ex quasi exit distinguishing
w
(cid:48)
1 − w
(cid:48)
2
δintermediate(mi ) =
≤
ps.exP (ex ) · (w1 − w2)
where mi , ex quasi exit distinguishing ⇐⇒ w1/w2 > e, w1 := ps.miP M axEn(mi , en) and w2 :=
ps.miP M inEn(mi , en). As this is only middle node weight, to again avoid cubic-time computations , we over-
approximate the probability that particular Entry-Middle pair is chosen by again assuming that the exit with the
maximal family has been chosen:
δEnM i(en, mi ) = δintermediate(mi ) · ps.enP M axEx(en)
Note that our approximations are exactly what our relationship anonymity monitor computes. Hence, the
bounds computed by the relationship anonymity monitor are secure.
6 Experimental results
Our anonymity monitors described in Section 5 allow us to perform an analysis on the real consensus-data pub-
lished by Tor [29]. In this section we present a selection of the guarantees that the monitors computed.
Implementation and Data collection
6.1
We implement our sender, recipient, and relationship anonymity monitors as multi-threaded C++ programs. The
code comprises of approximately 3000 lines codes and employs SQLite [2] and Boost [3] libraries. The monitor
programs are available on our website [1].
For our analysis we process the server descriptions of Tor that are released every month to construct a database
of family relationships between nodes. Processing the server descriptors takes a signiﬁcant amount of time (around
15 minutes), but we require this computation only once per month. Moreover, the information does not depend on
the settings of the user, which means that the database could be precomputed and downloaded once per month.
22
 1 10 100 1000 10000 100000 0 1000 2000 3000 4000 5000Bandwidths of all nodesEntry bandwidthsExit bandwidthsFigure 11: Comparison between PSTOR and DISTRIBUTOR. The graph shows the value for δ with ε = 0 for 0 to
50 compromised nodes of the adversary’s choice.
Figure 12: Anonymity guarantees (value of δ) over the course of February 2014 for 0.5% compromised nodes.
We used ε = 0 and as settings the ports HTTPS+IRC vs. HTTPS.
Performance. We measured the performance of the monitors on a standard notebook (MacBook Air 2 GHz Intel
Core i7, 4 GB 1600 MHz DDR3 RAM). Our monitors start by processing a consensus ﬁle and by computing the
weights of all nodes depending on the path selection algorithm, the connections of the user (and of the scenario we
want to compare the user with). In our performance evaluation we called this part of the computation “preparing
the weights”. Afterwards the anonymity guarantees are computed. The exact computation times are given in
Figure 13 (averaged over 100 runs on consensus ﬁles from Feb. 2014).