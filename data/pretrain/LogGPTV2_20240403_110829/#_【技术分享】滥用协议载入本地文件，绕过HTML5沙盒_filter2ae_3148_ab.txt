    09 af24a320 d9e4b1d9 EdgeContent!BrowserTelemetry::Instance::2::dynamic
    0a af24a3c0 8810053e shlwapi!IUnknown_Exec+0x79
    0b af24a440 880fee33 EdgeContent!CReadingModeController::_NavigateToUrl+0x52
    0c af24a4a0 88074f98 EdgeContent!CReadingModeController::Open+0x1d3
    0d af24a500 b07df508 EdgeContent!BrowserTelemetry::Instance'::2::dynamic
    0e af24a5d0 b0768c47 edgehtml!FireEvent_BeforeNavigate+0x118
先看看前两行，函数名字都叫XXX
ReportFailure，你不觉得Edge是因为出了问题才会执行到这里的吗？那当然了！让我们继续找下去，直到我们找到一个有意义的函数名。下一个叫XXX
FailFast，它看起来也像是一个Edge知道出了问题之后调用的函数。但是我们想找的是导致Edge出问题的代码，所以继续往下读。
下一个是XXX
_LoadRMHTML。这个看起来好多了，你不同意吗？事实上，它的名字让我觉得它是用于加载HTML的。在崩溃之前断下会很有趣，所以为什么不在_LoadRMHTML上面设置断点呢？我们检查了栈回溯，现在来看看代码。
让我们先从那个点开始反汇编。这很容易，在WinDbg中使用“ub”命令。
    0:030> ub EdgeContent!CReadingModeViewerEdge::_LoadRMHTML+0x7c
    EdgeContent!CReadingModeViewerEdge::_LoadRMHTML+0x5a:
    8810693a call qword ptr [EdgeContent!_imp_SHCreateStreamOnFileEx (882562a8)]
    88106940 test eax,eax
    88106942 jns EdgeContent!CReadingModeViewerEdge::_LoadRMHTML+0x7d (8810695d)
    88106944 mov rcx,qword ptr [rbp+18h]
    88106948 lea r8,[EdgeContent!`string (88261320)]
    8810694f mov r9d,eax
    88106952 mov edx,1Fh
    88106957 call EdgeContent!wil::details::in1diag3::FailFast_Hr (8806597c)
我们将专注于函数名，并且忽略其它的一切，怎么样？就像我们在《trying to find a variation for the mimeType
bug》里做的一样（译注：作者的另一篇文章），如果我们失败了，我们就会继续深入分析。但有时在调试器上进行快速查看可以说明很多事情。
我们知道如果Edge执行到这个片段的最后一条指令时（地址88106957，FailFast_Hr）就会崩溃。我们的目的是想看看为什么我们会执行到那个地方，是谁导致了我们执行到那个地方。上面代码段的第一条指令似乎是调用了一个名字复杂的函数，这个函数显示了大量的信息。
    EdgeContent！_imp_SHCreateStreamOnFileEx
在！号前面的部分是该指令所处模块的名称（译注：其实这只是个符号，跟指令搭不上边）。在这种情况下，它是EdgeContent，我们甚至不关心它的扩展名，只当它是代码。！之后有一个有趣的名字imp，然后SHCreateStreamOnFileEx似乎是一个表示“创建文件流”的函数名称。你觉得呢？事实上，imp让我想到，也许这是从不同的二进制文件中导入的函数。让我们google下它的名字，看看我们是否找到有趣的东西。
这很不错,第一个结果就是我们搜索的准确名称。让我们点开看看。
好。这个函数接收的第一个参数是“指向以空字符结尾的字符串指针，该字符串指定文件名”。有趣！如果这段代码正在执行，那么它应该接收一个指向文件名的指针作为第一个参数。但是我们怎么能看到第一个参数呢？很容易，因为我们正在调试Win
x64程序，函数调用约定规定“前4个参数是RCX，RDX，R8，R9”。这意味着第一个参数（指向文件名的指针）将被装入寄存器RCX中。
有了这些信息，我们可以在Edge调用这个函数之前设置一个断点，看看RCX在那个时刻的值是什么。但是首先我们需要重新启动进程，因为这个时候已经有点迟了：Edge进程已经崩溃了。请重新做上面描述的那些操作（杀死Edge进程，重新打开它，加载页面，找到进程并附加）。
这次，我们不再直接运行进程（F5），而是先设置一个断点。WinDbg显示了当我们执行“ub”命令时的准确偏移量。
    0:030> ub EdgeContent!CReadingModeViewerEdge::_LoadRMHTML+0x7c
    EdgeContent!CReadingModeViewerEdge::_LoadRMHTML+0x5a:
    8810693a ff1568f91400 call qword ptr [EdgeContent!_imp_SHCreateStreamOnFileEx (882562a8)]
    88106940 85c0 test eax,eax
所以断点应该设置在EdgeContent！CReadingModeViewerEdge :: _ LoadRMHTML + 0x5a上。
我们输入“bp”命令跟上函数名+offset，再按[ENTER]就可以成功设置断点。然后输入“g”让Edge继续运行。
    0:029> bp EdgeContent!CReadingModeViewerEdge::_LoadRMHTML+0x5a
    0:029> g
这很令人兴奋，我们想要在SHCreateStreamOnFileEx函数执行之前看到RCX指向的文件名（或字符串）。
让我们运行javascript代码并等待它中断下来。Windbg中断之后的信息如下所示：
    Breakpoint 0 hit
    EdgeContent!CReadingModeViewerEdge::_LoadRMHTML+0x5a:
    8820693a ff1568f91400 call qword ptr [EdgeContent!_imp_SHCreateStreamOnFileEx (883562a8)]
这太棒了，现在我们可以检查RCX寄存器指向的内容。为此，我们将使用“d”命令（显示内存内容）跟上寄存器名称，我们输入如下所示的命令：
    0:030> d @rcx
    02fac908 71 00 77 00 69 00 65 00-69 00 77 00 71 00 65 00 q.w.i.e.i.w.q.e.
    02fac918 69 00 75 00 3b 00 61 00-73 00 6a 00 64 00 69 00 i.u.;.a.s.j.d.i.
    02fac928 77 00 21 00 40 00 23 00-24 00 25 00 5e 00 26 00 w.!.@.#.$.%.^.&.
    02fac938 2a 00 00 00 00 00 08 00-60 9e f8 02 db 01 00 00 *.......`.......
    02fac948 10 a9 70 02 db 01 00 00-01 00 00 00 00 00 00 00 ..p.............
    02fac958 05 00 00 00 00 00 00 00-00 00 00 00 19 6c 01 00 .............l..
    02fac968 44 14 00 37 62 de 77 46-9d 68 27 f3 e0 92 00 00 D..7b.wF.h'.....
    02fac978 00 00 00 00 00 00 08 00-00 00 00 00 00 00 00 00 ................
虽然这看起来不是很友好，但在第一行的右边我看到了一些类似于unicode字符串的东西。我使用du命令来让它显示为unicode字符串。
    0:030> du @rcx
    02fac908 "qwieiwqeiu;asjdiw!@#$%^&*"
Nice!回头看看我们刚刚运行的JavaScript代码
看来，传递给这个函数的参数值就是在逗号后面输入的内容。当我们知道了这一点再加上知道它期望获得一个文件名之后，我们就可以尝试构造一个完整的路径来指向我的磁盘中的东西。因为Edge在AppContainer内部运行，我们尝试的是一个可访问的文件。例如windows/system32目录里的内容。
    read:,c:windowssystem32driversetchosts
我们同时删除了逗号之前的垃圾数据，因为它似乎没什么作用（虽然它值得去做更多的研究！）。让我们快速的分离进程，并重新启动Edge来运行我们的新代码。
    url = "read:,c:\windows\system32\drivers\etc\hosts";
    w = window.open(url, "", "width=300,height=300");
正如预期，本地文件在新窗口中被加载并且没有发生崩溃。
测试链接:
我的研究在这里就告一段落了，但我相信这些东西值得去进一步研究，当然这取决于你个人的兴趣：
A）枚举所有可加载的协议，并通过查询字符串来攻击那些应用程序。
B）测试microsoft-edge：这可以绕过HTML5沙箱、弹出窗口拦截器（popup blocker）和谁知道是什么鬼东西。
C）继续研究read：协议。我们找到了一种方法来阻止它崩溃，但是请记住我们可以控制SHCreateStreamOnFileEx函数期望的值！这值得我们进行更多的尝试。此外，我们可以研究一下传入的参数，看看是否使用逗号分割参数等等。如果你认为调试二进制文件是很无聊的，那么你可以尝试使用XSS阅读视图。
我希望你找到成吨的漏洞！如果你有问题，请通过@magicmac2000来找我。
祝你今天愉快！