filtered-kit except
that 10 SNPs were re-
moved from chr22 in overlap(1)-kit and
10 different SNPs were removed from chr22 in
identical
13
•
•
is represented by two dashes (--),
overlap(2)-kit. As expected, each of the two kits
had 10 fewer tokens on chr22 than filtered-kit.
However, when overlap(1)-kit was compared to
overlap(2)-kit there were 20 fewer pixels on
chr22. This indicated that only SNPs in the intersec-
tion of both the two kits are used in the comparison.
SNPs with non-standard bases are ignored. 23andMe
DTC genetic data ﬁles contain alleles other than
the standard DNA bases. With 23andMe ﬁles, a
no call
inser-
tions by (II), deletions by (DD), and deletion/inser-
tions by (DI). We hypothesized that SNPs with non-
standard genotypes are ignored by GEDmatch and
not tokenized. This was conﬁrmed by uploading a
ﬁnal kit nonstandard-alleles-kit, same as
filtered-kit, except that we replaced the geno-
type of 10 SNPs on chr19 with dashes, 10 SNPs on
chr20 with II, 10 SNPs on chr21 with DD, and 10
SNPs on chr22 with DI. The resulting kit had 10 fewer
tokens on each of chr19, chr20, chr21, and chr22 than
filtered-kit, conﬁrming that SNPs containing
dashes insertion, and deletions are ignored.
The pixel image is compressed when there are more
than ˜32,000 pixels. We noticed that whenever a kit
was compared with itself and had more than ˜32,000
tokens on a chromosome that
there would be an
image compression message below that chromosomes.
Therefore, we suspected that whenever the number of
pixels was greater than ˜32,000 the color bars were
compressed, even when the pixel window width was
set to full resolution. This accounted for the image
size reduction of 1
2 seen with marker-ind-kit on
chromosomes 1, 2, 3, and 6, all of which had more
than 32,000 tokens.
C. Interpreting the Marker Indication Bar: Reconstructing the
Coding Algorithm
a
Having
removed
low MAF
SNPs with
in
filtered-kit, the number of SNPs was close enough to
the number of pixels. This let us decipher the information
encoded in the pixels in filtered-kit because most of
the SNPs were being compared. After manually inspecting
the data, we noticed that GEDmatch seemed to treat A’s like
T’s and C’s like G’s. We hypothesized that GEDmatch was
using the following scheme.
GEDmatch compresses the two-bit genotype data (A, C,
G, and T) into one-bit (0 and 1) during tokenization. A’s and
T’s take one value (say, 0) and C’s and G’s the other (say, 1).
At every SNP, GEDmatch stores two bits, one for each of the
two compressed 1-bit DNA bases. When comparing two SNPs,
the bits are compared in no particular order since the order of
bases in DTC genetic data ﬁles has no meaning. If both bits are
the same, there is a match (green), only one the same (yellow),
or both different (red). Therefore, the color is determined by
counting the number of identical bits at a given SNP. For
example, AG compared to a GT would be compressed to 10
vs 01, which would be green because there is one 1 and one
0 in both. It is unclear whether GEDmatch actually stores the
genotype of each SNP in this binary encoding or whether the
binary encoding is computed from normal genotype data when
making comparisons; however, it is not necessary to know what
is stored for our attacks to be successful.
APPENDIX B
GEDMATCH SCREENSHOTS
Figure 5 provides a screenshot of the GEDmatch interface
when requesting one-to-one autosomal comparisons.
APPENDIX C
MATCHING PSEUDOCODE
In Section A-C we discussed GEDmatch’s approach to
generating a pixel when comparing two SNPs. We present
pseudocode for the inferred algorithm here.
def compare_snps(f1.snp, f2.snp):
sum1 = 0, sum2 = 0
# Sum the bits from the first SNP
sum1 += get_bit(f1.snp.base1)
sum1 += get_bit(f1.snp.base2)
# Sum the bits from the second SNP
sum2 += get_bit(f2.snp.base1)
sum2 += get_bit(f2.snp.base2)
if sum1 == sum2:
return "Green"
elif |sum1 - sum2| == 1:
return "Yellow"
elif |sum1 - sum2| == 2:
return "Red"
def get_bit(base):
if base == ’A’ or base == ’T’:
return 0
else if base == ’C’ or base == ’G’:
return 1
PIXEL-TO-SNP CORRESPONDENCE ALGORITHM
APPENDIX D
Let m be the number of SNPs on a particular chromosome
in ext-kit and S0, S1, ..., Sm−1 be a list of the SNPs on
that chromosome, ordered by base position (the same order
that SNPs appear in DTC genetic data ﬁles). If no SNPs are
missing, there would be m pixels for that chromosome, and
the pixel at index i would correspond with Si. Similarly, the
pixels at indexes that are multiples of n (i.e., 0, n, 2n, ...) will
be the changed pixels (see Figure 3B). However, since some
of the SNPs are ignored, the indexes of the changed pixels
will shift (Figure 3C).
We can use the number of intervening pixels between
two changed pixels to determine their corresponding SNPs.
Consider any two changed pixels at indexes p and q where
p  j because
the corresponding pixel for k is at a higher index than the one
corresponding to j. We also know that k− j is a multiple of n
because only SNPs at multiples of n were modiﬁed. Therefore,
we can write k−j = an for some positive integer a. Moreover,
g + 1 ≤ k − j because pixels are only ﬁltered and not added,
and so the gap between two changed pixels will only shrink
when SNPs are ﬁltered. Therefore, we have g+1 ≤ k−j = an.
(cid:108) g + 1
(cid:109) × n ≤ j +
j +
n
(cid:108) k − j
(cid:109) × n
(cid:108) an
(cid:109) × n
n
= j +
n
= j + an
= j + (k − j) = k
Next, we prove that when fewer than n SNPs were ﬁltered
between Sj and Sk, the lower bound becomes an equality. Let
r be the number of SNPs ﬁltered between Sj and Sk. If r  0. Let
x = (cid:100) p+1
n (cid:101) × n; then, the ﬁrst changed pixel corresponds to
SNP Sx. Like Equation 1, this will hold as long as fewer than
n SNPs are missing before Sx; otherwise, x will be a lower
bound on the corresponding SNP index.)
Let Sl be the modiﬁed SNP with the highest index and Sf
be the SNP corresponding to the ﬁnal changed pixel. If Sl was
not missing, then l = f. However, since Sl can be missing,
n (cid:101)− 1)× n where c is the
we can estimate f with f = l− ((cid:100) c+1
number of pixels after the ﬁnal changed pixel. This estimate
15
TABLE I.
CLASSES OF KITS USED IN GEDMATCH EXPERIMENTS.
will be correct as long as fewer than n SNPs are missing after
Sf ; otherwise, this estimate will be an upper bound for f.
We also have a separate estimate for f using the inductive
procedure from Equation 1. Again, this estimate will be correct
as long as less than n SNPs are missing between changed
pixels, and, if not the case, the estimate will be a lower bound.
Therefore, if the two separate estimates for f are the same,then
we know that less than n SNPs are missing between any two
adjacent changed pixels, which means the inductive estimates
using Equation 1 are correct.
We can keep increasing the value of n until this condition
holds on all 22 chromosomes — in practice, increasing the
value of n makes it less likely that n or more SNPs will
be randomly missing between two modiﬁed SNPs. In our
experiments, n = 512 was sufﬁcient.
C. Recursively Find the Correspondence for Additional Pixels
We can now use the known SNP correspondences for the
changed pixels as a basis to determine the SNPs corresponding
to the other, non-changed pixels. Let p and q (with p  0), then we can use additional kits to try to ﬁnd the
correspondence of the intervening, non-changed SNPs. If we
choose an n that is a power of 2, we can construct a new kit,
2 SNPs in the
extmod( n
ext-kit with AC. If the extmod( n
2 )-kit is compared to
the same kit as before, then the resulting marker indication bars
will have changed pixels corresponding to SNPs at indexes
2 , 2n, ..., which is a superset of those from the
0, n
extmod(n)-kit.
2 )-kit, made by modifying every n
2 , n, 3n
2 , 3n
We can use pixels corresponding to SNPs at
indexes
0, n, 2n, ... to ﬁnd the correspondence for the additional mod-
iﬁed SNPs at indexes n
2 , .... As long as the gap between
two changed pixels with known correspondences is less than
2 (i.e., b < n
2 ), then we can identify the SNPs corresponding
n
of any intervening changed pixels using Equation 1. We can
recursively repeat this procedure between any two changed
pixels using additional kits with smaller values of n (e.g., n
8 ,
4 , n
etc.) until more than half the pixels are missing between them.