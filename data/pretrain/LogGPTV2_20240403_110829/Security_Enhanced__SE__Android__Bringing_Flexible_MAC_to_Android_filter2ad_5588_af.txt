[12] J. Edge. RLIMIT NPROC and setuid(). Linux Weekly News,
July 2011. http://lwn.net/Articles/451985.
[13] W. Enck, P. Gilbert, B. gon Chun, L. P. Cox, J. Jung, P. Mc-
Daniel, and A. N. Sheth. TaintDroid: An Information-Flow
Tracking System for Realtime Privacy Monitoring on Smart-
phones. In 9th USENIX Symposium on Operating Systems
Design and Implementation (OSDI’10), October 2010.
[14] W. Enck, M. Ongtang, and P. McDaniel. On Lightweight
In 16th ACM
Mobile Phone Application Certiﬁcation.
Conference on Computer and Communications Security
(CCS’09), November 2009.
[15] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin.
Permission Re-Delegation: Attacks and Defenses. In 20th
USENIX Security Symposium, August 2011.
[16] J. Freeman. Mempodroid. https://github.com/
saurik/mempodroid.
[17] R. Hay. Opera Mobile Cache Poisoning XAS. http:
//blog.watchfire.com/wfblog/2011/09/
opera-mobile-cache-poisoning-xas.html.
[18] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wether-
all. These Aren’t the Droid You’re Looking For: Retroﬁtting
Android to Protect Data from Imperious Applications.
In
18th ACM Conference on Computer and Communications
Security (CCS’11), October 2011.
[19] X.
Jiang.
GingerMaster:
First Android Malware
Utilizing a Root Exploit on Android 2.3 (Ginger-
bread).
http://www.csc.ncsu.edu/faculty/
jiang/GingerMaster.
[20] K. Kohei.
Security Enhanced PostgreSQL. http://
code.google.com/p/sepgsql.
[21] S. Krahmer.
C-skills:
adb trickery #2.
//c-skills.blogspot.com/2011/01/
adb-trickery-again.html.
[22] S. Krahmer.
C-skills:
android trickery.
//c-skills.blogspot.com/2010/07/
android-trickery.html.
http:
http:
[23] S. Krahmer.
C-skills:
yummy yummy, Ginger-
Break! http://c-skills.blogspot.com/2011/
04/yummy-yummy-gingerbreak.html.
Zimperlich
C-skills:
sources.
[24] S. Krahmer.
http://c-skills.blogspot.com/2011/02/
zimperlich-sources.html.
[25] S. Krahmer.
RageAgainstTheCage.
http:
//stealth.openwall.net/xSports/
RageAgainstTheCage.tgz.
[26] Lookout. LOOK-11-001. http://blog.lookout.
com/look-11-001/.
[27] Lookout. Lookout Mobile Security: Android Security for
Mobile. http://www.lookout.com.
[28] P. Loscocco and S. Smalley.
Integrating Flexible Support
for Security Policies into the Linux Operating System. In
FREENIX Track: 2001 USENIX Annual Technical Confer-
ence, June 2001.
[29] P. A. Loscocco, S. D. Smalley, P. A. Muckelbauer, R. C. Tay-
lor, S. J. Turner, and J. F. Farrell. The Inevitability of Failure:
The Flawed Assumption of Security in Modern Computing
Environments. In 21st National Information Systems Secu-
rity Conference, pages 303–314, October 1998.
[30] MITRE. CVE-2009-1185. http://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2009-1185.
[31] MITRE. CVE-2011-1149. http://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2011-1149.
[32] MITRE. CVE-2011-1717. http://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2011-1717.
[33] MITRE. CVE-2011-1823. http://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2011-1823.
[34] MITRE. CVE-2012-0056. http://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2012-0056.
[35] Y. Nakamura and Y. Sameshima. SELinux for Consumer
Electronics Devices. In 2008 Linux Symposium, pages 125–
134, July 2008.
[36] M. Nauman, S. Khan, and X. Zhang. Apex: Extending
Android Permission Model and Enforcement with User-
In 5th ACM Symposium on
Deﬁned Runtime Constraints.
Information, Computer and Communications Security (ASI-
ACCS’10), April 2010.
[37] NTT DATA Corporation. TOMOYO Linux Home Page.
http://tomoyo.sourceforge.jp/.
[38] M. Ongtang, K. Butler, and P. McDaniel. Porscha: policy
oriented secure content handling in Android. In 26th Annual
Computer Security Applications Conference (ACSAC’10),
December 2010.
[39] M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel.
Semantically Rich Application-Centric Security in Android.
In 25th Annual Computer Security Applications Conference
(ACSAC’09), December 2009.
[40] Open Handset Alliance.
Android Overview.
http://www.openhandsetalliance.com/
android_overview.html.
[41] Opera Software ASA.
Opera Mini & Opera Mobile
browsers. http://www.opera.com/mobile.
[42] J. Palmieri. Get on D-BUS.
Red Hat Magazine, 3,
http://www.redhat.com/magazine/
Jan 2005.
003jan05/features/dbus/.
[43] C. PeBenito, F. Mayer, and K. MacMillan. Reference Pol-
icy for Security Enhanced Linux. In 2nd Annual SELinux
Symposium, pages 25–30, March 2006.
[44] A. Shabtai, Y. Fledel, and Y. Elovici. Securing Android-
IEEE Security
Powered Mobile Devices Using SELinux.
and Privacy Magazine, 8(3):36–44, May-June 2010.
[45] Softweg.
Benchmark.
https://play.google.
com/store/apps/details?id=softweg.hw.
performance.
[46] R. Spencer, S. Smalley, P. Loscocco, M. Hibler, D. Ander-
sen, and J. Lepreau. The Flask Security Architecture: Sys-
tem Support for Diverse Security Policies. In 8th USENIX
Security Symposium, pages 123–139, Aug. 1999.
[47] Tresys Technology. SELinux Reference Policy. http://
oss.tresys.com/projects/refpolicy.
[48] E. Walsh. Application of the Flask Architecture to the X
Window System Server. In 3rd Annual SELinux Symposium,
pages 33–40, March 2007.
[49] C. Wright, C. Cowan, S. Smalley, J. Morris, and G. Kroah-
Hartman. Linux Security Modules: General Security Sup-
port for the Linux Kernel. In 11th USENIX Security Sympo-
sium, August 2002.
Appendices
A Sample SELinux policy
This appendix shows the contents of a sample policy
source ﬁle from the SE Android policy. These contents were
taken from external/sepolicy/bluetoothd.te in the Android
source tree. This ﬁle deﬁnes a domain for the Android blue-
toothd daemon. The policy is written using a combination
of macros, such as the init daemon domain macro, and pol-
icy language statements, such as allow and type transition
rules.
type bluetoothd, domain;
type bluetoothd_exec, exec_type, file_type;
init_daemon_domain(bluetoothd)
allow bluetoothd self:capability { setuid \
net_raw net_bind_service net_admin };
allow bluetoothd self:socket *;
allow bluetoothd bluetoothd_data_file:dir \
create_dir_perms;
allow bluetoothd bluetoothd_data_file:file \
create_file_perms;
unix_socket_connect(bluetoothd, dbus, dbusd)
B Sample seapp contexts
This appendix shows an excerpt
from the exter-
nal/sepolicy/seapp contexts conﬁguration used to deter-
mine how to assign security contexts to app processes cre-
ated by the zygote and to app data directories created by
installd. Each line speciﬁes a set of input selectors, such
as the isSystemServer boolean, the user name, the seinfo
string, and the package name, and a set of resulting output
values, such as the domain name, the type name, the level-
FromUid boolean, and the level string. A set of precedence
rules are applied for determining which entry to use, with
more speciﬁc entries taking precedence.
isSystemServer=true domain=system
user=system domain=system_app \
type=system_data_file
user=bluetooth domain=bluetooth \
type=bluetooth_data_file
user=nfc domain=nfc type=nfc_data_file
user=radio domain=radio type=radio_data_file
user=_app domain=untrusted_app \
type=app_data_file levelFromUid=true
user=_app seinfo=platform domain=platform_app \
type=platform_app_data_file
user=_app seinfo=release domain=release_app \
type=platform_app_data_file
user=_app seinfo=release \
name=com.android.browser \
domain=browser_app \
type=platform_app_data_file
C Sample property contexts
This appendix shows an excerpt
from the exter-
nal/sepolicy/property contexts conﬁguration used to deter-
mine the security context to use in permission checks on
setting Android properties. The longest matching preﬁx is
used. The wildcard (*) character can be speciﬁed to match
any property names that do not match any speciﬁed preﬁx.
The sample conﬁguration matches the ownerships assigned
to property preﬁxes by an existing table in the init property
service code.
u:object_r:radio_prop:s0
u:object_r:radio_prop:s0
u:object_r:radio_prop:s0
u:object_r:radio_prop:s0
u:object_r:radio_prop:s0
u:object_r:radio_prop:s0
u:object_r:radio_prop:s0
u:object_r:radio_prop:s0
u:object_r:rild_prop:s0
u:object_r:system_prop:s0
u:object_r:system_prop:s0
u:object_r:system_prop:s0
u:object_r:system_prop:s0
u:object_r:system_prop:s0
u:object_r:system_prop:s0
u:object_r:system_prop:s0
u:object_r:system_prop:s0
u:object_r:shell_prop:s0
u:object_r:shell_prop:s0
u:object_r:shell_prop:s0
net.rmnet0
net.gprs
net.ppp
net.qmi
net.lte
net.cdma
gsm.
persist.radio
ril.
net.
dev.
runtime.
hw.
sys.
service.
wlan.
dhcp.
debug.
log.
service.adb.root
service.adb.tcp.port u:object_r:shell_prop:s0
u:object_r:system_prop:s0
persist.sys.
u:object_r:system_prop:s0
persist.service.
persist.security. u:object_r:system_prop:s0
u:object_r:system_prop:s0
selinux.
u:object_r:vold_prop:s0
vold.
crypto.
u:object_r:vold_prop:s0
u:object_r:ctl_dumpstate_prop:s0
ctl.dumpstate
ctl.ril-daemon u:object_r:ctl_rildaemon_prop:s0
ctl.
*
u:object_r:ctl_default_prop:s0
u:object_r:default_prop:s0
D. Middleware MAC policy
This appendix shows an excerpt
from the exter-
nal/sepolicy/mac permissions.xml conﬁguration used for
the install-time MAC mechanism and to assign seinfo tags
to apps. The signature values and permission names have
been abbreviated for readability. The signatures are hex-
encoded X.509 certiﬁcates.
Values for the seinfo string and Android permissions can
be speciﬁed for all packages with a given signature via a
signer stanza, or may be reﬁned on a per-package basis
for speciﬁc packages via a package stanza. Allowed An-
droid permissions can be speciﬁed via a whitelist (allow-
permission) or via a blacklist (deny-permission) but not
both. A given signature or package can be allowed all per-
missions it requests without any constraints by specifying
allow-all. The default tag is used for any app that does not
match any other stanza. A setool program can be used to
help generate policy stanzas from a set of Android pack-
ages.