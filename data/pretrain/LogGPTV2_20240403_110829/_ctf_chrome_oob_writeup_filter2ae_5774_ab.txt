                bytes[i] = cur;
            }
            return this;
        }, 2);
        // this = a & b
        this.assignAnd = operation(function and(a, b) {
            for (var i = 0; i >> 0;
        //b = b >>> 0;
        //print(a.toString());
        //print(b.toString());
        return parseInt(Int64.fromDouble(b).toString() + Int64.fromDouble(a).toString(), 16);
    }
    //padLeft用于字符串左补位
    function combineint(a, b) {
        //a = a >>> 0;
        //b = b >>> 0;
        return parseInt(b.toString(16).substr(-8,8) + (a.toString(16)).padLeft(8), 16);
    }
      // based on Long.js by dcodeIO
      // https://github.com/dcodeIO/Long.js
      // License Apache 2
      class _u64 {
         constructor(hi, lo) {
            this.lo_ = lo;
            this.hi_ = hi;
         }
         hex() {
            var hlo = (this.lo_ >> 16;
            var a32 = this.hi_ & 0xFFFF;
            var a16 = this.lo_ >>> 16;
            var a00 = this.lo_ & 0xFFFF;
            var b48 = val.hi_ >>> 16;
            var b32 = val.hi_ & 0xFFFF;
            var b16 = val.lo_ >>> 16;
            var b00 = val.lo_ & 0xFFFF;
            var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
            c00 += a00 + b00;
            c16 += c00 >>> 16;
            c00 &= 0xFFFF;
            c16 += a16 + b16;
            c32 += c16 >>> 16;
            c16 &= 0xFFFF;
            c32 += a32 + b32;
            c48 += c32 >>> 16;
            c32 &= 0xFFFF;
            c48 += a48 + b48;
            c48 &= 0xFFFF;
            return new _u64((c48 > 8) & 0xFF00) | ((val >> 24) & 0xFF);
         }
         bswap() {
            var lo = swap32(this.lo_);
            var hi = swap32(this.hi_);
            return new _u64(lo, hi);
         };
      }
    var u64 = function(hi, lo) { return new _u64(hi,lo) };
    function gc(){
        for (var i = 0; i 
测试机器ubuntu16.04  