main函数：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      _DWORD v4[28]; // [esp-6Ch] [ebp-F8h] BYREF
      _DWORD *v5; // [esp+4h] [ebp-88h]
      _DWORD *v6; // [esp+8h] [ebp-84h]
      int v7; // [esp+Ch] [ebp-80h]
      char v8[108]; // [esp+10h] [ebp-7Ch] BYREF
      int v9; // [esp+88h] [ebp-4h]
      if ( sub_40EF90() )
        return 1;
      sub_4026C0(0x6Cu);
      sub_401FE0(v4[27], v5);
      v9 = 0;
      v6 = v4;
      sub_40F360(v8);
      sub_40F080(v4[0], v4[1]);
      v5 = v4;
      sub_40F360(v8);
      sub_40F150(argc, (int)argv);
      v7 = 0;
      v9 = -1;
      sub_4021C0(v8);
      return v7;
    }
首先调用`sub_40EF90`进行check：
    BOOL sub_40EF90()
    {
      HANDLE v0; // eax
      NTSTATUS (__stdcall *NtQueryInformationProcess)(HANDLE, PROCESSINFOCLASS, PVOID, ULONG, PULONG); // [esp+0h] [ebp-14h]
      HMODULE hModule; // [esp+4h] [ebp-10h]
      int v4; // [esp+Ch] [ebp-8h] BYREF
      v4 = 0;
      hModule = LoadLibraryA("Ntdll.dll");
      NtQueryInformationProcess = (NTSTATUS (__stdcall *)(HANDLE, PROCESSINFOCLASS, PVOID, ULONG, PULONG))GetProcAddress(hModule, "NtQueryInformationProcess");
      v0 = GetCurrentProcess();
      NtQueryInformationProcess(v0, ProcessDebugPort, &v4, 4, 0);
      return v4 != 0;
    }
搜了一下官方文档，发现ProcessDebugPort就是用来检测程序是否处于调试状态的:  
这里crack很简单，动态调试单步来到这个位置，这里是压入三个参数的，一般就是main函数的入口了：
call完EF90之后会有个关键跳，这里jmp实现的话就直接退出程序了，直接nop掉jmp即可：
Patch完之后重新载入x64dbg，此时就可以正常调试了：
当然了这个调试状态检测我们是可以绕过的，因为是在检测调试之后再执行真正的代码，所以可以先直接运行程序，然后用附加程序，这时候程序已经运行到输入flag的位置了，附加时已经过了检测函数，所以也可以正常进行调试：
往下来到sub_401FE0，发现有个`EASYRE::vftable`虚函数表，然后往下对内存进行赋值，总共20个字节，往下还有个内存复制，也是20个字节：
    _DWORD *__thiscall sub_401FE0(_DWORD *this)
    {
      int i; // [esp+4h] [ebp-14h]
      *this = &EASYRE::`vftable';
      this[1] = 0;
      *((_BYTE *)this + 52) = 8;
      *((_BYTE *)this + 53) = 0xEA;
      *((_BYTE *)this + 54) = 0x58;
      *((_BYTE *)this + 55) = 0xDE;
      *((_BYTE *)this + 56) = 0x94;
      *((_BYTE *)this + 57) = 0xD0;
      *((_BYTE *)this + 58) = 0x3B;
      *((_BYTE *)this + 59) = 0xBE;
      *((_BYTE *)this + 60) = 0x88;
      *((_BYTE *)this + 61) = 0xD4;
      *((_BYTE *)this + 62) = 0x32;
      *((_BYTE *)this + 63) = 0xB6;
      *((_BYTE *)this + 64) = 0x14;
      *((_BYTE *)this + 65) = 0x82;
      *((_BYTE *)this + 66) = 0xB7;
      *((_BYTE *)this + 67) = 0xAF;
      *((_BYTE *)this + 68) = 0x14;
      *((_BYTE *)this + 69) = 0x54;
      *((_BYTE *)this + 70) = 0x7F;
      *((_BYTE *)this + 71) = 0xCF;
      qmemcpy(this + 18, "  03\"3   0 203\"   $ ", 20);
      sub_4030A0(this + 23);
      sub_402DE0(this + 26);
      for ( i = 0; i  sub_402730
    this+0x24 -> sub_4028A0
    int __thiscall sub_402730(_DWORD *this, int a2)
    {
      int v2; // esi
      int v3; // ecx
      unsigned __int8 v4; // al
      char v6; // cf
      char v7; // bl
      char v8; // t2
      int v10; // [esp+Ch] [ebp-30h]
      int i; // [esp+14h] [ebp-28h]
      int j; // [esp+1Ch] [ebp-20h]
      int v13; // [esp+20h] [ebp-1Ch] BYREF