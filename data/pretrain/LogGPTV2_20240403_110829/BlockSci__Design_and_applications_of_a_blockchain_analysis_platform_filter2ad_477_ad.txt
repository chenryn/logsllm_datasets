•
•
•
•
•
•
•
•*
•
•
* implements additional functionality for Zcash on top of BlockSci
•
•
•
•
Table 5: Usage of BlockSci features and data sources in our analyses and selected papers.
the type of all input addresses (e.g., using P2SH for multisig-
nature access control). Using this heuristic, we can uniquely
identify a change address in 122 million out of 489 million
transactions. Of these change addresses we identiﬁed, over 72
million were cases in which the anonymity of non-multisig
users was reduced because they transacted with a party that
used a script-hash address. Over 49 million were cases of
script-hash users having their anonymity reduced (i.e., the
reverse scenario, in which a payment is made to a regular
address).
We note that adding Schnorr signatures [14] could improve
conﬁdentiality and privacy of multisignature transactions (e.g.,
by making multisig indistinguishable from regular addresses)
[15]. However, without widespread or mandatory adoption,
they could also hurt privacy if they allow further distinction
between different users (similar to how distinguishing be-
tween the use of script-hash and non-script-hash addresses
reduces privacy).
Security. A surprising, but relatively common motif is for
multisig users to switch their money from a multisig address
to a regular address, and then back into a multisig address. We
conjecture that this may happen when users are changing the
access control policy on their wallet, although it is unclear why
they transfer their funds to a regular address in the interim,
and not directly to the new multisig address.
This practice negates some of the security beneﬁts of mul-
tisignatures, as it advertises to an attacker when a high-value
wallet is most vulnerable. To identify this pattern, we looked
for transactions in which all of the inputs were from multisig
addresses of the same access structure and there was a single
non-multisig output, which was subsequently sent back to a
multisig address. We restricted our analysis to single output
transactions as this is an indicator of self-churn, i.e. a user
Figure 4: Frequency and value of multisig transactions that ex-
pose conﬁdential information about access structure changes
on the blockchain.
Figure 5: Frequency and value of transactions that weaken
multisig security by temporarily sending coins to regular ad-
dresses, advertising the presence of a single point of failure.
2730    29th USENIX Security Symposium
USENIX Association
100102104106108Value per month (USD)2014201520162017201820192020100101102103104105Transactions per monthValue per monthTxes per month1001021041061081010Value per month (USD)2014201520162017201820192020100101102103Transactions per monthValue per monthTxes per monthFork
pre-fork only
after fork, BTC only
pre+after fork, BTC only
pre+after fork
BTC+BCH
after fork
BTC+BCH
pre+after fork, BCH only
after fork, BCH only
Figure 6: A BTC/BCH address might be used only before the
fork (brown), continue to be used only in BTC after the fork
(orange), be used only on BCH after the fork (green), etc.
Figure 7: The absolute number of addresses per category. For
legend and color coding see Figure 6.
shufﬂing money among her own addresses.
In Figure 5, we see that a few thousand transactions each
month exhibit this pattern, temporarily reducing the security
of bitcoins worth up to hundreds of million USD.
3.2 Cashing out on forks hurts privacy
In a blockchain fork, two separate chains emerge with a shared
history, often with different rulesets. One prominent example
of such a fork is Bitcoin Cash (BCH), which split from the
original Bitcoin (BTC) chain in August 2017 over disagree-
ment about the maximum size of blocks (cf. [16]). Users who
held BTC at the time of the fork automatically own the same
quantity of BCH, too. Unfortunately for users, blockchain
forks can also lead to unintentional privacy compromise (cf.
[17]). A generally privacy-conscious user who carefully crafts
transactions on one chain may perform privacy-harming trans-
actions on another, such as sweeping and cashing out their
coins. Here, we investigate privacy implications of the BCH
fork.
Preliminaries. We start by systematizing the use of ad-
dresses across forked chains (Figure 6). Addresses that held
coins before the fork may continue to be used on either (or-
ange or gray) or both chains (red). New addresses may be used
after the fork on either chain (yellow or green), or start to ap-
pear on both chains despite no pre-fork use (blue). Addresses
may also cease to see use after the fork (brown).
In Figure 7 we show the address distribution between usage
types over time. A small but noticeable trend is a decline in
the number of addresses that existed pre-fork and initially
had only been used on BCH (gray). This suggests that users
may have moved their funds on the BCH chain shortly after
the fork, without moving them on the BTC chain until many
months after. We suspect that these may represent users who
decided to cash out their funds on the BCH chain after the
fork.
Privacy impact. We quantify the privacy impact of this
activity on BCH using BlockSci’s cross-chain clustering ca-
pabilities (Figure 8). Cross-chain clustering produces an en-
hanced clustering of a single chain using additional links from
a forked chain, allowing us to investigate the additional pri-
vacy impact of the behavior on the forked chain. To evaluate
the impact of the fork event, we create an early cross-chain
clustering for Dec 31, 2017, ﬁve months after the BCH fork,
and compare it to individual BTC single-chain clusterings
created every 6 months until Dec 31, 2019.
Combining the BCH clustering with the BTC clustering
yields a total of 1.05 million additional cluster merges until
Dec 31, 2017. Every merge combines two existing (single-
or cross-chain) clusters into a cross-chain cluster. 75.44 %
of those early merges on BCH occur on the BTC chain (on
average, about 8.9 months after occuring on the BCH chain).
The high degree of overlap provides evidence that observing
cluster merges on the BCH chain does indeed indicate that
the corresponding BTC clusters belong to the same entity.
The remaining 24.56 % represent an upper bound of the
unique additional privacy leakage for BTC users from their be-
havior on BCH. With the rough heuristic that each cross-chain
cluster represents a distinct user, 99,500 users are affected
by this privacy leak: that is, it becomes possible to link their
BTC addresses with each other based on their BCH activity.
Next, we evaluate the long-term privacy impact of the fork.
To this end, we create a cross-chain clustering of BTC and
BCH until Dec 31, 2019. Again, using BCH data to enhance
the BTC clustering, we observe a total of 571,924 additional
cluster merges from cross-chain clustering. The enhanced
clustering includes almost 200,000 cross-chain clusters that
contain over 750,000 single-chain clusters of the BTC chain
(as some cross-chain clusters may contain multiple single-
chain clusters). The cross-chain clusters together contain al-
most 30 million addresses, or roughly 5 % of all BTC ad-
dresses. In other words, roughly 5 % of BTC addresses poten-
tially suffer a privacy compromise due to cash-out behavior
on BCH.
USENIX Association
29th USENIX Security Symposium    2731
30M200M400M600MDec 2017Jun 2018Dec 2018Jun 2019Dec 20190M10M20M30MBCH
BTC
single-chain cluster
A1
A1
A2
A2
A3
A3
A4
BTC BCH
A1
A2
A3
A4
cross-chain cluster
Figure 8: Two single-chain clusters on the BTC blockchain
are merged into a cross-chain cluster based on the link be-
tween A2 and A3 found in a BCH cluster.
Address reuse. Further investigating the different address
use patterns, we observe the appearance of (previously un-
seen) addresses on both chains after the fork (i.e., the blue
addresses in Figure 6). As of December 31, 2019, there are
over one million such addresses, holding a total of 360,000
BTC (USD 2.7 billion) respectively 1.45 million BCH (USD
303 million). Such reuse may occur deliberately (e.g., when
users import keys into wallets on both chains) or unintention-
ally (e.g., when hierarchical deterministic wallets continue to
generate similar keys after the fork). Either way, it may not
only lead to continued privacy compromise, but also raises
severe security concerns. To protect their keys, those users
need to enforce the same security policies on both chains,
including a strict separation of keys between hot and cold wal-
lets (e.g., avoid importing a cold wallet key into a hot wallet),
as compromise of keys on one chain would allow the attacker
to steal coins on all chains that share those keys (cf. [18]).
3.3
(In)effectiveness of Bitcoin Core’s fee esti-
mation
The Bitcoin protocol deﬁnes an upper limit on the size of each
block, effectively limiting the number of transactions that min-
ers can include in a block. Bitcoin users compete with each
other for the inclusion of their transaction in a block by pay-
ing a transaction fee, as rational miners prioritize transactions
that pay higher fees per size unit. Demand for block space
(equally, the number of pending transactions) is constantly
changing, and with it the minimum fee required for transac-
tions to get included in the next block. Supply for block space
is not created on a ﬁxed schedule: the arrival time of blocks
follows an exponential distribution introduced by the proof-
of-work mining mechanism. And the fee mechanism used
by Bitcoin, effectively a pay-as-bid auction, is not incentive
compatible, making it difﬁcult to determine the optimal fee
to pay [19, 20].
Wallets often use fee estimation techniques that use historic
data to estimate fees such that transactions get included in the
blockchain within a certain target time frame with high conﬁ-
dence. In particular, Bitcoin Core has a fee estimation feature
that is well known, widely used, and relied upon. Given a
target interval, say 2 blocks, the algorithm chooses fees such
that in the past 60 % of transactions were included in half of a
target interval, 85 % within the target and at least 95 % within
twice the target. But how good is this estimate? Note that most
users’ time preferences are in terms of time and not blocks.
Suppose a user values their transaction being included in a
block in 20 minutes or less, and hence selects a transaction
fee corresponding to a target of 2 blocks, based on the mean
block interval of 10 minutes. How long can the user actually
expect to wait? We use BlockSci to answer this question.
Data collection. We used BlockSci’s mempool recorder to
record timestamps of transactions submitted to the Bitcoin
P2P network over a time span of 3 months, from 8/8/19 until
11/19/19. In total, we collected timestamps for 32.98 million
transactions, 99.94% of all transactions that were included
in the blockchain during that epoch. While the timestamps
observed by different nodes may very, this delay is small:
compared to timestamps collected by blockchain.com, our
timestamps lag by an average of 0.9 (± 0.3) seconds.
Bitcoin Core produces fee estimates in two modes: a con-
servative mode that is supposed to be less impacted by short-
term drops in fee levels [21] (the default mode of the RPC
interface), and a more aggressive economic mode that is used
for transactions using replace-by-fee (RBF), a transaction re-
placement option allowing users to increase transaction fees
after submitting a transaction to the network (the default mode
of the wallet GUI). We collected fee estimates in the conser-
vative mode every ten seconds during this time frame. While
this mode may err on the side of higher fees (and thus faster
inclusion), we chose it because it does not require accounting
for replaced transactions, something BlockSci does not track.
Identifying Bitcoin Core transactions. To identify Bit-
coin Core transactions, we ﬁrst ﬁlter for transactions that set a
non-zero locktime, a characteristic of the Bitcoin Core client
[22]. Then, we select transactions that have RBF disabled.
This yields a subset of 4,589,246 transactions out of the 32.98
million transactions we collected timestamps for (13.9 %).
Next, we identify transactions where the fees paid by the
transaction matches the estimate we recorded for one of the
common target times. A manual inspection shows very little
variance around our recorded estimate, hence we choose to
consider all transactions that are within a threshold of ±5
satoshi. If paid fees overlap with estimates for multiple tar-
gets, we select the shortest target time. This selection yields
981,214 transactions.
Analyzing calibration. For these transactions we calcu-
2732    29th USENIX Security Symposium
USENIX Association
late the difference between Bitcoin Core’s targeted inclusion
times at the 60 %, 85 % and 95 % quantiles and the actual
inclusion times (shown in Table 6 in the appendix). Many
transactions get included much earlier than targeted (e.g., 60 %
of transactions targeting a 60 minute inclusion are included
in under 16.75 minutes). However, the 95 % quantile consid-
erably lags behind (e.g., 59 minutes behind twice the target
time for transactions with a 60 minute target).
Analyzing variability. However, calibration is not the
whole story. We use a regression analysis to better understand
how well targeted inclusion time corresponds to actual inclu-
sion times. As the inclusion time is inﬂuenced by the block
arrival rate, which follows an exponential distribution, we use
a Generalized Linear Model with a Gamma distribution (de-
tailed results are provided in Table 10 in the appendix). We
include weekly ﬁxed effects to account for gradually changing
factors like the hash rate.
Targeted inclusion time explains a mere 17.2 % of the de-
viance of the model (a measure of ﬁt compared to a perfect
model). This means that despite the use of fee estimation,
there is a high degree of uncertainty in the actual inclusion
time, primarily due to the inherent randomness introduced by
the proof-of-work mining but possibly also the unpredictable
behavior of other users.
Bitcoin Core incorporates the state of the mempool in a
relatively straightforward way for fee estimation: if a transac-
tion resides in the mempool longer than the targeted inclusion
interval, its fee is considered as insufﬁcient. But another way
to use mempool state is as an estimate of the backlog of trans-
actions. We perform another regression where we incorporate
the size of the mempool as a predictor, which gives a rough
indication of how much fee estimation might be improved by
incorporating mempool information in a more sophisticated
way. We see that the deviance explained rises to only 22.4 %,
suggesting that the limitation is intrinsic.
We offer two main takeaways from this analysis: Bitcoin
users should be careful not to over-rely on the waiting time
estimates produced by wallet software, and cryptocurrency
researchers and designers should consider alternatives to the
pay-as-bid auction employed by Bitcoin that may achieve a
tighter relationship between fees and inclusion time.
3.4
Improved estimates of the velocity of cryp-
tocurrencies
The velocity of money is the frequency with which one unit of
currency is used for purchases in a unit of time. It can provide
an insight into the extent to which money is used as a medium
of exchange versus a store of value.
In most cases it is not possible to infer the purpose behind a
cryptocurrency transaction from the blockchain. However, an
alternative deﬁnition of the velocity of money is the frequency
with which one unit of currency changes possession in any
manner (whether or not for purchases of goods and services)
Figure 9: Two estimates of the velocity of bitcoins.
in a unit of time. Blockchain analysis may enable estimating
the velocity of cryptocurrencies under this deﬁnition.
Even under this simpliﬁed deﬁnition, it is challenging to
estimate the velocity of cryptocurrencies. A naive method
would be to compute the total value of transaction outputs in
a unit of time and divide it by the total value of the money
supply during that period. However, multiple addresses may
be controlled by the same entity, and therefore not all transac-
tion outputs represent changes in possession. Meiklejohn et al.
call this “self-churn” [3], a term that we adopt. The impact of
self-churn is visually obvious in the graph of total transaction
outputs (Figure 9). We would not expect spikes such as those
in early 2017 if the graph reﬂected actual money demand,
which would be much more stable over time.
To minimize the effect of self-churn, we adopt two heuris-
tics. First, we eliminate outputs controlled by an address that
can be linked to one of the inputs’ addresses (through ad-
dress clustering, cf. Section 2.4), ignoring “superclusters" to
minimize false positives. This reduces change outputs and
transactions that are detectable as an entity “shufﬂing their
money around”. We also eliminate outputs that are spent
within less than k blocks (we use k = 4). Manual examination
suggests that such transactions are highly likely to represent
self-churn, such as “peeling chains” where a large output is
broken down into a series of smaller outputs in a sequence of
transactions.
The orange line in Figure 9 shows the daily transaction
volume on the Bitcoin blockchain after applying the above
two heuristics. With this estimate, the velocity of Bitcoin
works out to 1.2 per month averaged over the period January
2017–June 2018, compared to 3.9 with the naive metric, and
0.7 over the period July 2018–December 2019, compared to
2.2 with the naive metric. Our revised estimate is not only