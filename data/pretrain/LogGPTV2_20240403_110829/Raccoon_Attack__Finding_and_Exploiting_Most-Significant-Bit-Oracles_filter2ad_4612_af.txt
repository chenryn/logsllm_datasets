### DHE and ECDHE Cipher Suites
The Raccoon attack does not generally apply to TLS 1.3, as it broadly disallows key reuse. However, a variant of TLS 1.3, known as ETS or eTLS [59], which explicitly allows or even encourages key reuse, could be vulnerable. If ephemeral keys are reused in either variant, they may lead to micro-architectural side channels.

### DTLS
The DTLS Key Derivation Function (KDF) [54] is similar to that of TLS and shares the same timing properties. However, an attacker might not be able to measure the timing differences because DTLS, being UDP-based, does not necessarily send error messages upon ungraceful session termination. Some implementations do not send alert messages at all. While techniques similar to those described in [7] might help overcome these difficulties, this is considered out of scope for this work.

### SSH
In SSH, ephemeral key reuse is less common compared to TLS, as shown by [64] in 2017. This is likely due to the more homogeneous deployment of SSH and its higher security requirements, as a breach in SSH could lead to remote code execution. In SSH, the shared secret is encoded as an mpint, which removes leading zero bytes. Unlike TLS, the shared secret in SSH is hashed with the session transcript to generate the 'exchange hash.' This process essentially mitigates the risk of a dangerous modulus size. The attacker can ensure that the removal of a leading zero byte results in fewer processed blocks within the hash function, as attacker-controlled messages with non-fixed lengths are included in the computation. In summary, SSH servers that reuse ephemeral DH values are at greater risk than TLS servers, but such SSH servers are rare.

Interestingly, SSH also strips leading zero bytes of the shared secret for X25519. RFC 8731 [1] mentions that this is a potential problem, as it leaks the leading zero byte of the shared secret, but decided not to address the issue for backward compatibility reasons.

### Other Protocols
- **XML Encryption** [30] and **IPsec** [39, Section 2.14] preserve leading zero bytes.
- **JSON Web Encryption** [38] only offers ECDH key agreement. The established shared secret is processed according to NIST SP 800-56A [52], which requires leading zero bytes to be preserved.

### Related Work

#### Timing Side Channels Caused by Hash Functions
In 2013, AlFardan and Paterson demonstrated that tiny timing differences in processing inputs of different lengths could be exploited in the Lucky 13 attack [6]. Albrecht et al. later showed that the same vulnerability still affected real-world implementations, and common mitigation techniques were ineffective [5]. Some developers have modified HMAC function interfaces to mitigate such flaws [53], now taking the maximum amount of data that could be passed as an input.

#### Bleichenbacher's Attack
Daniel Bleichenbacher first described a real-world attack on TLS, recovering the premaster secret [15]. His attack relied on a direct oracle where the server revealed if the decrypted RSA plaintext was PKCS#1 compliant. The primary condition for compliance is that the two most significant bytes of the plaintext take a specific value, making the attack somewhat similar to Raccoon. However, in Raccoon, the attacker cannot choose the multiplier. Instead, the attacker computes \( g^{rb} \) for a known \( r \) and queries whether \( g^{rb} \cdot g^{ab} \) is compliant; the first multiplier acts as a pseudorandom function from the attacker’s perspective. Recent work by Ronen et al. [56] uses lattices and the Hidden Number Problem (HNP) to perform the attack in parallel, but most variants of Bleichenbacher's attack use ad-hoc algorithms where the attacker carefully chooses values for \( s \). While Raccoon shares some similarities with Bleichenbacher's attack, the latter is often mounted using simpler algorithms.

#### Attacks on Export-Grade Crypto
Another line of attacks exploited the usage of export-grade cryptography and obsolete protocols to break TLS. DROWN recovered premaster secrets from secure TLS-RSA connections by exploiting public-key reuse and instances of the deprecated SSLv2 protocol [10]. Logjam [2] and FREAK [13] targeted 512-bit key sizes used in DHE-EXPORT and RSA-EXPORT cipher suites to recover the PMS based on weak export keys. The Raccoon attack does not rely on outdated cryptographic mechanisms.

#### Timing Attacks against the TLS Handshake
Brumley and Boneh measured timing differences in TLS-RSA decryption on different ciphertexts [20], allowing them to compute the private key of the server. Meyer et al. constructed a Bleichenbacher oracle from timing differences in handling valid and invalid PKCS#1 messages, which they used to compute the PMS of a previously recorded TLS-RSA session [46].

#### Attacks Using HNP Solvers
The HNP has been applied in many attacks against DSA, ECDSA with partially known nonces, and signatures in zero-knowledge proofs, using various side channels [11, 23, 34, 50, 51]. Breitner and Heninger used a lattice-based HNP solver to compute private ECDSA signing keys generated by cryptocurrency code [18]. Some previous attacks on TLS protocols have also used lattice techniques and HNP solvers. Brumley and Tuveri exploited a timing side channel in the ECDSA signature generation during the TLS handshake [19].

#### Attacks against TLS Diffie-Hellman
In addition to the Logjam attack [2], several studies have analyzed the security of TLS Diffie-Hellman. Valenta et al. examined the impact of small-subgroup attacks [64], and Dorey et al. studied how plausibly deniable backdoored parameters could be generated [29].

#### Proofs on TLS-DH(E)
TLS-DHE and TLS-DH have been proven secure under the PRF-ODH assumption by [36] and [42], respectively. However, this work shows that current real-world TLS implementations do not meet this assumption.

### Conclusions
Beyond the specifics of the attack, its existence teaches broader lessons for cryptographic protocols. Forgoing forward secrecy is dangerous, as our attack exploits the fact that servers may reuse the secret DH exponent for many sessions, thus forgoing forward secrecy. The Raccoon attack highlights that we should be cautious when giving attackers access to continuous queries of cryptographic secrets. Additionally, future protocol designs should ensure that all secrets, including intermediate values and their internal number representations, are of fixed size.

#### Countermeasures
The most straightforward mitigation against the attack is to remove support for TLS-DH(E), as most major client implementations have already stopped supporting them. Server operators should disable DHE key reuse, which completely prevents the practical attack even if support for DHE cipher suites is prioritized. Updating the TLS specification to preserve leading zero bytes is impractical. Since TLS 1.3 is not vulnerable by design, we propose focusing on TLS 1.3 deployment rather than updating the old specification. To prevent timing-based side channels in legacy applications with length-varying secrets, vendors must ensure that functions are implemented in constant time, as in the Lucky 13 mitigation or by computing values for different fake parameters and discarding the fake ones afterward. However, implementing such mitigations requires careful consideration, as previous research has shown that they can add code complexity and may still leave the side channel open [5] or introduce more severe vulnerabilities [60].

### Acknowledgements
Robert Merget and Marcus Brinkmann were supported by the German Federal Ministry of Economics and Technology (BMWi) project "Industrie 4.0 Recht-Testbed" (13I40V002C). Nimrod Aviram was supported by a scholarship from The Israeli Ministry of Science and Technology and a scholarship from The Check Point Institute for Information Security. This work was also supported by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) under Germany’s Excellence Strategy - EXC 2092 CASA - 390781972. We thank our anonymous referees and our shepherd, Zakir Durumeric, for their comments and for improving the final version of the paper.

### References
[References listed as provided in the original text]