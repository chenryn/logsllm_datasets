```  
生成200万随机字符串，并加入一些噪音干扰，达到相似查询的目的。  
```  
create table t_likeall_test (id serial primary key, info text);  
-- 截取任意位置开始的120个中文字符, 追加6个干扰字符，200万条  
insert into t_likeall_test (info) select substring(info, (random()*10)::int, 120)||gen_hanzi(6) from t_likeall limit 2000000;  
```  
### 6、准备测试脚本  
```  
vi test.sql  
\set id random(1,2000000)  
select * from get_t_likeall_test(:id, 0.855) as t(id int , info text, str text, sml real);  
```  
### 7、测试  
单次相似查询效率，响应时间低于20毫秒。(使用绑定变量、并且CACHE命中后，响应时间更低。)  
```  
postgres=# select * from get_t_likeall_test(2, 0.855) as t(id int , info text, str text, sml real);  
-[ RECORD 1 ]----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
id   | 2  
info | 廮饓纺冮窃窔叆许训写黅喷贝嵘讦殿谈暃涜鱾劽刱酒戉磝游瓈惝诪馈撋鳘表镇仠湛溜頪壨変呰堇欲𫔅枿鶎遍勡摬䓨斋椩荴釯绅岬芔剕澉汇鷞蘕氇酯棱泭急骸敲𣐤吜毢瓮枚忊轫毙㶽鎴篯儏鉴霘蚃蚜璥锰榋磻拦詥眳鴩苏棽瞠疹笣犳贪颊磏奥涠鉩欱峎塇躣僝蘵𬪩霯綨碐縦动减驮绸𫈟葱唱芳贽瀮媮捐  
str  | 窃窔叆许训写黅喷贝嵘讦殿谈暃涜鱾劽刱酒戉磝游瓈惝诪馈撋鳘表镇仠湛溜頪壨変呰堇欲𫔅枿鶎遍勡摬䓨斋椩荴釯绅岬芔剕澉汇鷞蘕氇酯棱泭急骸敲𣐤吜毢瓮枚忊轫毙㶽鎴篯儏鉴霘蚃蚜璥锰榋磻拦詥眳鴩苏棽瞠疹笣犳贪颊磏奥涠鉩欱峎塇躣僝蘵𬪩霯綨碐縦动减驮绸𫈟葱唱芳迦摅羹帉胕谝  
sml  | 0.855072  
Time: 19.455 ms  
```  
压测  
```  
CONNECTS=56  
TIMES=300  
export PGHOST=$PGDATA  
export PGPORT=1999  
export PGUSER=postgres  
export PGPASSWORD=postgres  
export PGDATABASE=postgres  
pgbench -M prepared -n -r -f ./test.sql -P 5 -c $CONNECTS -j $CONNECTS -T $TIMES  
```  
### 8、测试结果  
```  
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 56  
number of threads: 56  
duration: 300 s  
number of transactions actually processed: 459463  
latency average = 36.562 ms  
latency stddev = 8.063 ms  
tps = 1531.259508 (including connections establishing)  
tps = 1531.422742 (excluding connections establishing)  
script statistics:  
 - statement latencies in milliseconds:  
         0.002  \set id random(1,2000000)    
        36.565  select * from get_t_likeall_test(:id, 0.855) as t(id int , info text, str text, sml real);  
```  
#### TPS： 1531  
#### 平均响应时间： 36.562 毫秒  
## 参考  
[《PostgreSQL、Greenplum 应用案例宝典《如来神掌》 - 目录》](../201706/20170601_02.md)  
[《数据库选型之 - 大象十八摸 - 致 架构师、开发者》](../201702/20170209_01.md)  
[《PostgreSQL 使用 pgbench 测试 sysbench 相关case》](../201610/20161031_02.md)  
[《数据库界的华山论剑 tpc.org》](../201701/20170125_01.md)  
https://www.postgresql.org/docs/10/static/pgbench.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")