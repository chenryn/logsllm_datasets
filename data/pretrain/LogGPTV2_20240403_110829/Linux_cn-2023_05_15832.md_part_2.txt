我的第一门编程语言是 BASIC。它是 1977 年大学第一学期中我的计算机科学课程的一部分，因此我既没有自己花钱学习它，也不是自己选的它。不过我始终认为这是非常重大的第一步，因为它使我学会了如何像计算机一样思考（我有一个好老师）。随着我从经济学院毕业，这门课程并没有立即促成一些事情。不过，多年之后，我成为了一名 IT 项目经理。所以我没有做过程序员，不过我管理过一些。
—— [Kevin O'Brien](https://opensource.com/users/ahuka)
---
*你的第一门编程语言是什么？*
BASIC
*你花钱学习的吗？*
不是。
*你是自己选择它的吗？*
它是内置在 Apple ][ 计算机里的，这台计算机是我母亲在暑假带回来的，我的选择很有限。
*为什么这么说？*
这台计算机里只有 BASIC 语言和 6502 汇编语言。显然，BASIC 语言看上去对六年级的我更具吸引力。
*接下来发生了什么？*
我去公共图书馆，找出了所有刊载了 Apple ][ 程序的源代码清单的往期的《Byte》杂志。我花了很多时间输入这些我几乎无法理解的程序，并享受调试其他人代码的乐趣（好吧，我更确定的是，大部分错误都是我带来）。我简直入迷了。几年以后，在高中毕业班的时候，当我知道可以主修某种称作“计算机科学”的课程的时候，我既惊讶又激动。剩下的就是历史了。
—— [Erik O'Shaughnessy](https://opensource.com/users/jnyjny)
---
*你的第一门编程语言是什么？*
Fortran IV，你应该已经知道这是多少年前的事情了。
*你花钱学习的吗？*
不是，这是我大学的计算机科学课程的一部分，因此我想也可以认为我是花钱学习它的。这是在大型机上，因此你在纸上写好你的程序以后，你需要带上空白的 IBM 穿孔卡，然后坐在一台键控打孔机前把你的程序打孔出来，然后将你的穿孔卡片集作为一项“作业”提交上去。然后第二天你就可以拿回你的穿孔卡片，上面带有行式打印机输出结果。如果你的程序没有成功运行，你得不到任何输出，或者如果你制造了某种死循环，你则可能拿到一页又一页的结果。
*接下来发生了什么？*
在我的大学生涯快结束的时候，学校开始使用 watfor 编译器，这是一款来自加拿大的滑铁卢大学的 Fortran 版本。它的优势在于你可以在终端中使用它，并在大型机中保存你的程序，而不需要使用我们曾经非常喜爱的穿孔卡。因此你可以自行运行你的程序，也可以立即创造死循环的程序。欧耶！
Fortran 之后，吸引了我的眼球的另一门编程语言是 BASIC，它与 Fortran 有很多相似之处，不过能够更好的处理字符串。Fortran 在字符串处理方面太糟糕了。我主要是在 Amiga 计算机上做这些事情的。
在转向 Linux 后，我接下来接触的语言是 Perl，奇怪的是，似乎很容易从 BASIC 语言过渡到 Perl。接着 Perl 之后，就是 Python，一门在语法上更加灵活的语言。
—— [Gregory Pittman](https://opensource.com/users/greg-p)
---
*你的第一门编程语言是什么？*
我 1974/1975 年学习的 Waterloo Fortran IV，这是入学第二年时我上的第一门计算机科学课程，当时我几乎确信我想要主修计算机科学了。这一年的稍晚时间，我们还学习了一些有关 IBM 360/370 汇编器的内容。在那段时间里，在英属哥伦比亚大学的低年级课程中我们使用的是打孔机，我们可以使用一个“学生终端”来连接我们的卡片盒，并得到一张供我们的卡片盒运行一次的“蓝色凭证”，然后走到 IBM 行式打印机后面拿回我们的程序输出。即使旁边明明写了一张提示“不要将你的卡片盒放在打印机上，以免打印机（上盖）开启”，不过如果你还是不注意，将你的卡片盒放到了打印机的上面。此刻，打印机可能刚好用完了纸或者发生了卡纸，于是主动打开了上盖，你的卡片盒将会掉到地上变成一团糟。
在我主修计算机科学的第三学年，我选了一系列的课程 —— 以 PL/I 为特色的第三年主流课程、一学期的 360/370 汇编器课程、两门关于计算机理论的荣誉课程、一门数值分析课程、“密歇根终端系统上的十二种编程语言”，以及一系列数学课。
在我的第四学年，我被应用数学研究所聘为研究助理。此时，我主要为一小群主要对求解微分方程的感兴趣的数学家们编写 Fortran 程序来获取报酬。同时，也是从那时开始，我意识到计算机科学并非我的最爱，我开始转向数学。我仍然继续学习了一些计算机科学课程 —— 优化课程以及更多的数值分析课程。回过头看，这是我走上数据科学之路的第一步。
我毕业之后的第一份工作还是编程，主要是使用 Fortran、PL/I 以及 SPSS 编程，SPSS 是一种统计编程语言。此外，我也学会了如何使用 MPSX（LCTT 译注： 拓展数学编程系统   Mathematical Programming System Extended ），这是 IBM 的一种线性规划通用语言。
—— [Chris Hermansen](https://opensource.com/users/clhermansen)
---
*你的第一门编程语言是什么？*
在我高中的时候，作为一项实验，让一位没有任何计算机经验的教师教我们计算机编程。我的学校之前从来没有尝试过这类课程。施乐公司给我们提供了一台 Model-33 型电传打字机和一台 110 波特的声耦调制解调器，这使得我们可以访问他们运行 CP-5 分时系统的 XDS Sigma 7大型机。BASIC 是当时的主流。
*你花钱学习的吗？*
上学算吗？
*接下来发生了什么？*
一些学生开始尝试在这台机器上 “瞎戳”，看看如果我们不在提示符位置输入 “BASIC” 会发生什么，这使我们发现这台机器上还内置了 *其他的* 编程语言！还有其它的东西！如果我没有记错的话，这台机器上至少还有三个独立的 Fortran 编译器 —— Fortran、FLAG（Fortran Load And Go —— FLAG 的编译速度在当时称得上“快”了，简直是快如闪电）。剩下的编译器 EFFORT 则是另一个极端 —— 也可能是 EFORT，只是发 “effort” 的读音，它的编译速度—相—当—慢，不过在我们眼里，它的确看上去拥有极致的代码优化。除此之外，我也短暂尝试过 APL 编程语言（LCTT 译注：这种编程语言的全称是：[A Programming Language](https://link.springer.com/chapter/10.1007/978-1-349-08004-5_6) ?）以及（用于 APL 语言编程的有各种符号的“怪异”键盘）。在 APL 语言中，退格键不是用来删除已经输入的内容，反而是重写该操作符为其他的操作符。
—— [Kevin Cole](https://opensource.com/users/kjcole)
---
*你的第一门编程语言是什么？*
雅达利 PILOT 语言以及雅达利 BASIC 语言（LCTT 译注： 雅达利   Atari ）。我的父母给孩童时期的我买了一台雅达利 1200XL 计算机，我开始只是用他们来玩游戏或者完成一些艺术课程。家里有两盒卡带，我父亲告诉我它们是“适合成人使用的，因为不是为小孩子设计的，我不会对他们感兴趣”。所以，显然我无比好奇。终于有一天我禁不住找出并装载了它们。刚开始的时候我一头雾水，直到我找到一本我父亲买的有关这两盒卡带的书籍。我输入了书上的样例，发现能够实现一些事情的感觉是相当酷的。我当时还不能完全独立地编写程序，不过我可以拿来书中的样例，然后仅仅更改其中的部分内容，直到我能让它完成一些其他的事情或者使之崩溃进而只能撤销这些更改。我曾经计划再次尝试一遍，看看我还能记得多少，不过我一直都没有抽出时间（来做这件事）。
—— [JT Pennington](https://opensource.com/users/jtpennington)
---
*你的第一门编程语言是什么？*
ELAN。这是那一时期相当优秀的编程语言。尤其需要重点说明的是它是与 EUMEL 系统紧密结合的，可以用它做并行计算。
*你花钱学习的吗？*
它是一项课后活动。
*你是自己选择它的吗？*
不是。
*为什么这么说？*
我想学习弹钢琴，我的父母跟我说如果我愿意参加打字课的话我就可以得到一台钢琴。打字课的隔壁就是课后计算机俱乐部，我觉得那有趣多了。不幸地是，时至今日我也不会弹钢琴，计算机使我一直忙到了现在。
*接下来发生了什么？*
当我上大学的时候，他们还在使用打孔卡和 Fortran。我很庆幸我的高中老师允许我使用学校的并行机编程。此间，我也尝试了 BASIC 语言，但这比不上我学习的 ELAN，而且很枯燥。后来我转向 Pascal，Pascal 也比不上 ELAN。再后来就是 C 语言、Modula-2 语言和 Ada 语言，我最后发现了 Occam，并且使用它在  晶体电脑   transputer  上完成了很多任务。这是相当激动人心的，因为我们可以做更多的并行计算。能够使用 64 台晶体电脑是一件相当酷的事情。同时，接入各种网络配置也令人兴奋。这是几十年前的事情了。我看到了往日的高中生与今日的高中生的不同点。我们当时几乎没有资源（我直到大四的时候才买得起一台电脑），而今天电脑已经习以为常了。而且，电脑与类似 FLL（FIRST Lego League）这样的机器人使得降低编程的门槛成为可能。然而，今天的学生们也被随处可及的电子游戏以及其中炫酷的图像所分心。现成产品（像电子游戏、手机以及平板电脑等）使得今天的学生能够从闲暇时间中抽出用来学习机算机科学的时间很有限。我必须承认，如果在我长大之后也接触到了今天这样的电子游戏，我可能对计算机科学拥有完全不同的看法，并且也不会被我的同学们视作“书呆子”，而是成为一个游戏玩家。
不幸的是，我没有时间玩游戏，我的 RTX3090 显卡在运行人工智能算法。我真正想要的玩具是一台 [A100 GPU](http://nvidia.zhidx.com/product-11.html) 以及一套我现在远程使用的 [DGX 系统](http://nvidia.zhidx.com/product-11.html)。我认为由于 [Google colab](https://colab.research.google.com/) 以及其通过 Jupyter 可访问的特点，对人工智能的接触可以下放到高中水平。然而这一切都取决于带领你入门的高中教师。如果你的编程老师只是教你乐高机器人上的块编程，而不是 Python，或者只是教你使用 Scratch 而不是 Google colab。那么我们就没有利用那些学生早年间的潜力，也没有利用这些出众的基础设施。
—— [Gregor von Laszewski](https://opensource.com/users/laszewski)
---
*你的第一门编程语言是什么？*
我在一台 Apple 电脑上接触到了 Logo 编程语言。它由麻省理工的  西蒙· 佩珀特   Seymour Papert  等人在 1967 年开发。这是一种为了教育目的开发的编程语言，是 Lisp 语言的一个子集。
我学习它是当时我参与的一项毕业教育项目的一部分。作为该项目的一部分，我使用 Logo 教一名五年级学生的几何学。在教这名学生 Logo 编程语言和这门课程的时候，我发现我在数学上的麻烦与无助在于无法可视化这些材料。在完成我的研究生课程以后，我使用 Logo 语言继续以相同的课程与编程语言教其他学生们几何与数学。学生们和我在这个过程中学习了数学，并开发了一些优美的图形，我们实际上是为一个“乌龟”机器人编程，在需要放在教室地板上的巨幅纸张上绘制我们的图像。我的编程经历让我开始寻找其他的方式来将数学带入学生的生活中，这让我开始接触 Python 以及 Python 中的“乌龟”模块。后来，我开始教学生们写 Python 程序，这些程序的特点是“屏幕上的”乌龟机器人可以创建优美的图像。与此同时，我也开始向这些学生介绍 Python 编程语言与逻辑思考能力。
—— [Donald Watkins](https://opensource.com/users/don-watkins)