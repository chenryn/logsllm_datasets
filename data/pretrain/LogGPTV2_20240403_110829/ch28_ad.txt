虽然这些费用当然很大，但事故的间接代价同样令人不安。#some_indirect_costs_of_incidents显示了其中一些代价。声誉受损、分心、脆弱，以及我们称之为“发展阻力”，都不容易量化。即便如此，这些事故的间接代价也可能造成严重损害。同样，这里还有一个具有讽刺意味的品质：现有代码库对于成功操作的重要性如此之大，以至于由于担心破坏该基础而避免修改。由该代码库引起的（或与该代码库相关的）任何事件都强化了这种恐惧。随着时间的推移，因为担心改动老代码带来的问题，留在组织中愿意处理它的人数也会减少。
事件的一些间接成本事件的一些间接成本
| 事件 | 导致代价 |
|---|---|
| 声誉受损 |客户对产品和公司失去信心 其他产品和公司获得竞争优势 定价的下行压力 |
| 组织分心 |管理层需要在解决问题和“处理”事件方面发挥更积极的作用 事件纳入（并可能改变）内部办事日程 |
| 更加脆弱 |害怕触发隐藏漏洞或引入新漏洞，导致不愿修复、迁移、重构旧代码或基础架构 |
| 开发受阻 |适应新情况的代价更加不确定 控制更改以防止失败（CAB、代码冻结等）的努力会削弱敏捷性 技术人员对管理层失去信心，谋划秘密的实践机制，或离开公司 |
特别重要的是，组织寻求管理脆弱性造成的发展拖累。改变“审查”（或“咨询”）委员会，这是企图避免未来失败的组织结构。虽然这种机制确实可能阻止一些考虑不周的变化，但它带来的负担可能很大。这些委员会消耗宝贵的资源，造成解决问题的延误，导致版本功能太过集结，甚至会产生官僚体制问题（Hirschhorn，1998年；第61页）。尽管这些代价是真实的，但它们很难量化，并且可能被管理层无视。
从管理角度来看，事件最好被视为对系统性能的意外投资。管理者面临的挑战是找到从事故中获得最大投资回报 （ROI） 的方法。  
事件模式将发生变化
  系统的复杂性和周围环境的多样性继续增加。将建立新的连接，并切断旧的连接。事件的模式也必然会发生变化；就如同财务免责声明说的：“过去的表现并不能保证未来的收益。”
尽管在事件跟踪系统上投入了大量资金，但几乎没有证据表明这些方法可以预测未来故障的轨迹或性质。对于较大的系统，相关的行政官僚机构几乎没有产生什么价值。相反，它似乎在很大程度上起到类似锚的用处：船长希望这种机制能保持组织有一个安全的盼望。
事件指向特定的校准问题和位置
校准问题（见#calibration_problem）是一个基本挑战。成功排除故障、修复和修改系统需要系统的准确模型。复杂性和变化可确保任何系统模型都过时。任何单一个体（人或机器）都无法保持此类系统的准确模型。相反，需要对系统进行故障排除、修复和修改，需要不断努力提高座席模型的准确性。但是，现代系统的规模之大，使得维护校准的任何一般性努力都徒劳无功。没有人能阅读和消化所有的代码，所有的手册，所有的协议，组成一个现代系统。相反，我们需要将可用于重新校准的有限资源集中在最相关的方面。
事件是需要重新校准的明确信号。事件是有关缺乏校准的唯一指示。它们是指向系统需要重新校准区域（虽然有点无奈）的指针（Cook，2017）。事件是从基础系统发送的有关我们错误校准的消息。它们是了解恢复校准工作指导位置的最有效方法。
接下来会发生什么？
 收集事件的价值并不容易，但有可能。已确定了从事件中收集并分享见解的一些有希望的方法。事件的大部分价值来自事件之间的差异对比。事故管理和事故后重建与分析方面的诸多困难，对于创新方法的时机已经成熟。事件作为需要校准的有效信号，它的价值强烈地表明，学习如何从事故中学习对于拓展适应能力以抵御新形式的挑战和把握新机遇至关重要。
构建案例库构建案例库
 通过类似 SNAFU Catcher 联盟这类机构的倡议，显然需要识别和构建现代软件组织案例库。我们在其他领域，如医疗保健领域（如库克、伍兹、麦克唐纳，1991年）拥有这样做的经验。虽然它需要努力和专业知识，但它是探索软件服务世界设置和挑战的基础。
当然，有许多现有的案例集合。实际上，每个企业都有大型数据集，记录已发生的许多事件。但是，这些案例大多对发生的人类表现、问题表示和认知过程保持沉默。它们关注的是在#schematic_drawing_of_a_system_including_e“水平面下方”的事情。现在需要的案件库应该明确而详细地描述“水平面上方”的过程。
一系列案例将使我们能够从多个角度了解不同类型的“事件”是如何展开和管理的，并允许提出问题，以探讨事件、组织、业务类型等之间的异同。问题的示例包括：
随着事件的发展，注意力流如何移动和/或迁移？随着事件的发展，注意力流如何移动和/或迁移？
不同的响应团队如何描述他们的有利位置并相互理解？
在应对事件和异常时，人们实际上会做什么没有明确说明的操作来应对故障？他们使用哪些其他人不知道的技巧或快捷方式？哪些工具有用？哪些会分散注意力？
时间和后果压力对特定事件的管理有何影响？结构化响应（例如，事件处理培训、将权限分配给特定个人）在实践中如何发挥作用？
团队如何感知其应用程序或系统的哪些部分是“有风险”的？这种观点是如何产生的？有多准确？
一系列案例不能提供答案。相反，它有助于确定可能有用的线索。
专注于使自动化成为 SRE 中的团队合作者
  SRE 工作的世界是一个 JCS，由认知个体组成，其中大多数是人，但也有越来越多的自动化个体。使自动化成为 JCS 中的团队成员是富有挑战性的（Klein G 等，2004）。系统中已经有很多自动化，SRE（和其他人）通过对系统如何工作和失败的推理来摸索系统行为。负载均衡器、故障转移、速率限制器、警报器和许多其他自动进程对于使系统正常工作至关重要。某些事件只是这些进程的意外交互。此类事件可能难以理解，尤其是当各个流程正确“执行”他们的工作时。
最近出现了一个新的层：旨在跟踪和指导自动化的自动化。当管理自动化的困难促使新自动化的发展时，SRE 就更难理解和引导系统。这种情况在医学上是类似存在的：医院中抗生素的广泛使用促进了抗药性微生物的发展，这些微生物产生了所谓的医院感染，即通过药物进化的病菌，进而需要发明更多有效的抗生素。 。同样的术语自动化抗生素有时用于描述旨在处理自动化引起的问题的自动化（Woods 和 Cook，1991 年）。具有讽刺意味的是，自动化虽然旨在减轻 SRE 的工作，但却增加了系统的复杂性，并很容易使这项工作更加困难（Cook 和 Woods，1996 年）。随着自动化层（例如人工智能）添加到我们系统的操作元素中，这可能成为 SRE 更具挑战性的问题。对团队合作的需求从未如此强烈。
解决校准问题
  软件工程团队（SRE以及其他人）不断构建和校准系统连接和行为的模型。使这些模型保持最新的需求在整个组织中都很广泛，对于 SRE 来说尤为突出。校准问题对企业的成功至关重要。对 SRE 校准的支持将促进学习狭隘的技术细节以及更广泛的关系，这些关系可以推动或限制上层工作的进行。