# Shiro权限绕过漏洞分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
前段时间遇到通过分号绕过nginx层屏蔽并顺利访问到Springboot项目actuator端点的问题，修复过程中偶然发现当项目使用shiro组件时，若将shiro升级到1.6.0可间接修复分号绕过的问题，当请求url中包含分号时响应状态码为400；
考虑到shiro主要用来执行身份验证授权等，理论上不适合直接阻断存在分号的请求；
为搞明白此问题，决定对shiro的权限校验问题进行整理学习，下面为常见的shiro权限绕过漏洞分析修复过程。
## Shiro Filter
学习shiro权限绕过漏洞之前，有必要了解下shiro filter的过滤过程；
一个http请求过来，首先经过web容器的处理（这里默认为tomcat）被投放到相应的web应用，web应用会通过过滤器Filter链式的对http请求进行预处理，这里将会经过shiro的Filter（SpringShiroFilter）处理：
    org.apache.catalina.core.ApplicationFilterChain#internalDoFilter --> org.apache.shiro.web.servlet.OncePerRequestFilter#doFilter        -->    
    org.apache.shiro.web.servlet.AbstractShiroFilter#doFilterInternal  -->
    org.apache.shiro.web.servlet.AbstractShiroFilter#executeChain
shiro的Filter执行过会通过getExecutionChain()获取执行链并执行对应的doFilter函数：
重点在获取chain的org.apache.shiro.web.servlet.AbstractShiroFilter#getExecutionChain中；
首先会尝试获取到在springboot启动时加载的shiro配置文件中配置的Shiro
filterChains（resolver）并判断是否为null，当为null则返回原始过滤器链origChain，当不为空时则尝试通过org.apache.shiro.web.filter.mgt.FilterChainResolver#getChain方法根据当前请求的url使用Ant模式获取相应的拦截器链
FilterChain代理（resolved），否则返回原始过滤器链origChain：
        protected FilterChain getExecutionChain(ServletRequest request, ServletResponse response, FilterChain origChain) {
            FilterChain chain = origChain;
            FilterChainResolver resolver = getFilterChainResolver();
            if (resolver == null) {
                log.debug("No FilterChainResolver configured.  Returning original FilterChain.");
                return origChain;
            }
            FilterChain resolved = resolver.getChain(request, response, origChain);
            if (resolved != null) {
                log.trace("Resolved a configured FilterChain for the current request.");
                chain = resolved;
            } else {
                log.trace("No FilterChain configured for the current request.  Using the default.");
            }
            return chain;
        }
其中获取shiro对应的FilterChain代理是在org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getChain中完成，主要通过获取所有的filter链（filterChainManager）及requestURI，并循环遍历filterChainManager进行匹配，当匹配时则直接返回相对应的FilterChain代理，否则返回null：
附上filterChainManager接口说明：
    public interface FilterChainManager {
        // 得到注册的拦截器
        Map getFilters();
           // 获取拦截器链
        NamedFilterList getChain(String chainName);
        // 是否有拦截器链
        boolean hasChains();
        // 得到所有拦截器链的名字
        Set getChainNames();
        // 使用指定的拦截器链代理原始拦截器链
        FilterChain proxy(FilterChain original, String chainName);
        // 注册拦截器
        void addFilter(String name, Filter filter);
        // 注册拦截器
        void addFilter(String name, Filter filter, boolean init);
        // 根据拦截器链定义创建拦截器链
        void createChain(String chainName, String chainDefinition);
        // 添加拦截器到指定的拦截器链
        void addToChain(String chainName, String filterName);
        // 添加拦截器（带有配置的）到指定的拦截器链
        void addToChain(String chainName, String filterName, String chainSpecificFilterConfig) throws ConfigurationException;
    }
最终链式执行过滤器：
    org.apache.catalina.core.ApplicationFilterChain#doFilter        -->        org.apache.catalina.core.ApplicationFilterChain#internalDoFilter
执行完过滤器后将调用servlet.service，进而执行controller解析及service等：
javax.servlet.http.HttpServlet#service(javax.servlet.ServletRequest,
javax.servlet.ServletResponse)：
接下来的SpringMVC controller解析部分详情可参见下面CVE-2020-1957漏洞分析部分。
## 漏洞环境
可参考：
或
## shiro权限绕过 CVE-2020-1957
###  利用条件
Apache Shiro 
2、可通过分号进行绕过：
…
###  漏洞分析
shiro
filter主要过程上述部分已简单介绍，其中根据分号绕过可初步判断问题可能出现在获取requestURI处，毕竟是拿requestURI和shiro配置的FilterChain进行匹配的，也就是说通过分号使得shiro
filter过程的requestURI能绕过shiro的Ant格式的规则匹配；
可以直接在org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getChain中的String
requestURI = getPathWithinApplication(request); 处下断点进行调试：
注意这里测试过程中URL为：
跟进getPathWithinApplication函数，将通过WebUtils.getPathWithinApplication —>
WebUtils.getRequestUri 获取requestURI：
最终还是通过request.getRequestURI获取请求中的URI，即：/aa/..;test=123/admin/index
获取到请求中的URI后，将通过org.apache.shiro.web.util.WebUtils#normalize进行标准化处理，其中参数调用了decodeAndCleanUriString函数处理，在decodeAndCleanUriString中可以清晰的看到根据
; 对uri进行了分割，并获取到 ; 之前的部分，即/aa/..
且在normalize函数中，主要标准化处理内容如下：
  * \ —> /
  * // —> /
  * /./ —> /
  * /../ —> /
    private static String normalize(String path, boolean replaceBackSlash) {
            if (path == null)
                return null;
            // Create a place for the normalized path
            String normalized = path;
            if (replaceBackSlash && normalized.indexOf('\\') >= 0)
                normalized = normalized.replace('\\', '/');
            if (normalized.equals("/."))
                return "/";
            // Add a leading "/" if necessary
            if (!normalized.startsWith("/"))
                normalized = "/" + normalized;
            // Resolve occurrences of "//" in the normalized path
            while (true) {
                int index = normalized.indexOf("//");
                if (index   javax.servlet.Servlet#service --> javax.servlet.http.HttpServlet#service --> javax.servlet.http.HttpServlet#doGet --> org.springframework.web.servlet.FrameworkServlet#processRequest --> 
    org.springframework.web.servlet.DispatcherServlet#doService  -->
在DispatcherServlet.doService中将调用核心的doDispatch方法进行下一步处理：
其中doDispatch主要处理逻辑如下：
  1. checkMultipart 检查是不是文件上传请求，如果是，则对当前 request 重新进行包装，如果不是，则直接将参数返回；
  2. 根据当前请求，调用 getHandler 方法获取请求处理器，如果没找到对应的请求处理器，则调用 noHandlerFound 方法抛出异常或者给出 404；
  3. getHandlerAdapter 方法，根据当前的处理器找到处理器适配器；
  4. 然后处理 GET 和 HEAD 请求头的 Last_Modified 字段。当浏览器第一次发起 GET 或者 HEAD 请求时，请求的响应头中包含一个 Last-Modified 字段，这个字段表示该资源最后一次修改时间，以后浏览器再次发送 GET、HEAD 请求时，都会携带上该字段，服务端收到该字段之后，和资源的最后一次修改时间进行对比，如果资源还没有过期，则直接返回 304 告诉浏览器之前的资源还是可以继续用的，如果资源已经过期，则服务端会返回新的资源以及新的 Last-Modified；
  5. 接下来调用拦截器的 preHandle 方法，如果该方法返回 false，则直接 return 掉当前请求；
  6. 接下来执行 ha.handle 去调用真正的请求，获取到返回结果 mv；
  7. 接下来判断当前请求是否需要异步处理，如果需要，则直接 return 掉；如果不需要异步处理，则执行 applyDefaultViewName 方法，检查当前 mv 是否没有视图，如果没有（例如方法返回值为 void），则给一个默认的视图名；
  8. processDispatchResult 方法对执行结果进行处理，包括异常处理、渲染页面以及执行拦截器的 afterCompletion 方法都在这里完成；
  9. 最后在 finally 代码块中判断是否开启了异步处理，如果开启了，则调用相应的拦截器；如果请求是文件上传请求，则再调用 cleanupMultipart 方法清除文件上传过程产生的一些临时文件。