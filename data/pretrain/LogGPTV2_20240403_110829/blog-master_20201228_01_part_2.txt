https://www.postgresql.org/docs/devel/runtime-config-encryption.html#GUC-CLUSTER-KEY-COMMAND  
获取二级密钥的相关参数  
cluster_key_command (string)  
This option specifies an external command to obtain the cluster-level key for cluster file encryption during server initialization and server start.  
The command must print the cluster key to the standard output as 64 hexadecimal characters, and exit with code 0. The command can prompt for the passphrase or PIN from the terminal if --authprompt is used. In the parameter value, %R represents the file descriptor number opened to the terminal that started the server. A file descriptor is only available if enabled at server start. If %R is used and no file descriptor is available, the server will not start. Value %p is replaced by a pre-defined prompt string. Value %d is replaced by the directory containing the keys; this is useful if the command must create files with the keys, e.g., to store a cluster-level key encryped by a key stored in a hardware security module. (Write %% for a literal %.) Note that the prompt string will probably contain whitespace, so be sure to quote its use adequately. Newlines are stripped from the end of the output if present.  
This parameter can only be set by initdb, in the postgresql.conf file, or on the server command line.  
获取二级密钥的相关脚本模版, 二级密钥必须通过远程密钥管理服务或通过终端直接输入.  
```  
src/backend/crypto/Makefile	  
src/backend/crypto/ckey_aws.sh.sample	  
src/backend/crypto/ckey_direct.sh.sample	  
src/backend/crypto/ckey_passphrase.sh.sample	  
src/backend/crypto/ckey_piv_nopin.sh.sample	  
src/backend/crypto/ckey_piv_pin.sh.sample	  
src/backend/crypto/kmgr.c	  
src/backend/crypto/ssl_passphrase.sh.sample	  
```  
模版例子  
ckey_direct.sh.sample, 表示直接从终端输入二级密钥， 使用这个方法必须告诉initdb或启动数据库的main函数， 方法, 加-R选项： ```initdb -R```  ```pg_ctl -R```     
https://git.postgresql.org/gitweb/?p=postgresql.git;a=blobdiff;f=doc/src/sgml/ref/initdb.sgml;h=385ac2515061ca50ff043b0f6172dae76f4c9b5b;hp=d994f407faaa1adeaf585812fd4287ff6f608350;hb=3187ef7c46c5b884267a88f2d6119c9a05f1bbba;hpb=facad31474ac6dace3894ebc7c45dc3cc829422e  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=blobdiff;f=doc/src/sgml/ref/pg_ctl-ref.sgml;h=3946fa52eab7c5b305f79f243cd3c873a332c5df;hp=0662ae051a3f33a7170daec545a6ca1b2ed84cf6;hb=3187ef7c46c5b884267a88f2d6119c9a05f1bbba;hpb=facad31474ac6dace3894ebc7c45dc3cc829422e  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=blobdiff;f=src/backend/main/main.c;h=b6e512883269017aa1e3e1bbf9bf3fd008454762;hp=19aa502614e7f22bb7b0ef1d613468e25c91f34a;hb=3187ef7c46c5b884267a88f2d6119c9a05f1bbba;hpb=facad31474ac6dace3894ebc7c45dc3cc829422e  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=blobdiff;f=src/backend/postmaster/postmaster.c;h=fff4227e0b609fc04a8ade4cef933222239921a1;hp=bf883184b1137895dce797e0172c58b6fdcfa85d;hb=3187ef7c46c5b884267a88f2d6119c9a05f1bbba;hpb=facad31474ac6dace3894ebc7c45dc3cc829422e  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=blobdiff;f=src/backend/tcop/postgres.c;h=d35c5020ea634d5bbb301f14b59a23b03d269434;hp=81e64616d43664b8230aabc59f722041fdc1a80d;hb=3187ef7c46c5b884267a88f2d6119c9a05f1bbba;hpb=facad31474ac6dace3894ebc7c45dc3cc829422e  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=blobdiff;f=src/bin/initdb/initdb.c;h=f994c4216bcdc810e9fad68d03103ae5580edebc;hp=33a11e0d2bf788444becbbd63ea81db9adf7093a;hb=3187ef7c46c5b884267a88f2d6119c9a05f1bbba;hpb=facad31474ac6dace3894ebc7c45dc3cc829422e  
```  
#!/bin/sh  
# This uses a key supplied by the user  
# If OpenSSL is installed, you can generate a pseudo-random key by running:  
#	openssl rand -hex 32  
# To get a true random key, run:  
#	wget -q -O - 'https://www.random.org/cgi-bin/randbyte?nbytes=32&format=h' | tr -d ' \n'; echo  
[ "$#" -lt 1 ] && echo "cluster_key_command usage: $0 %R [%p]" 1>&2 && exit 1  
# Supports environment variable PROMPT  
FD="$1"  
[ ! -t "$FD" ] && echo "file descriptor $FD does not refer to a terminal" 1>&2 && exit 1  
[ "$2" ] && PROMPT="$2"  
# ----------------------------------------------------------------------  
[ ! "$PROMPT" ] && PROMPT='Enter cluster key as 64 hexadecimal characters: '  
stty -echo &"$FD"  
echo -n "$PROMPT" 1>&"$FD"  
read KEY &2  
	exit 1  
fi  
echo "$KEY"  
exit 0  
```  
ckey_passphrase.sh.sample  
```  
#!/bin/sh  
# This uses a passphrase supplied by the user.  
[ "$#" -lt 1 ] && echo "cluster_key_command usage: $0 %R [\"%p\"]" 1>&2 && exit 1  
FD="$1"  
[ ! -t "$FD" ] && echo "file descriptor $FD does not refer to a terminal" 1>&2 && exit 1  
# Supports environment variable PROMPT  
[ "$2" ] && PROMPT="$2"  
# ----------------------------------------------------------------------  
[ ! "$PROMPT" ] && PROMPT='Enter cluster passphrase: '  
stty -echo &"$FD"  
echo -n "$PROMPT" 1>&"$FD"  
read PASS &2  
	exit 1  
fi  
echo "$PASS" | sha256sum | cut -d' ' -f1  
exit 0  
```  
https://www.postgresql.org/docs/devel/app-pg_alterckey.html  
修改kms的过程  
```  
   7  * The theory of operation is fairly simple:  
   8  *    1. Create lock file  
   9  *    2. Retrieve current and new cluster key using the supplied  
  10  *       commands.  
  11  *    3. Revert any failed alter operation.  
  12  *    4. Create a temporary directory in PGDATA  
  13  *    5. For each data encryption key in the pg_cryptokeys directory,  
  14  *       decrypt it with the old cluster key and re-encrypt it  
  15  *       with the new cluster key.  
  16  *    6. Make the temporary directory the new pg_cryptokeys directory.  
  17  *    7. Remove lock file  
```  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=978f869b992f9fca343e99d6fdb71073c76e869a  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=300e430c76644b483f70bc833d6251a6a7fb84a6  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=3187ef7c46c5b884267a88f2d6119c9a05f1bbba  
tgresql.git;a=blobdiff;f=src/bin/initdb/initdb.c;h=f994c4216bcdc810e9fad68d03103ae5580edebc;hp=33a11e0d2bf788444becbbd63ea81db9adf7093a;hb=3187ef7c46c5b884267a88f2d6119c9a05f1bbba;hpb=facad31474ac6dace3894ebc7c45dc3cc829422e  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")