tocol properties. The range T of clock values is the set of
natural numbers.
2.2 Query-Response Mechanism
For our purpose (namely, the implementation of failure
detectors) we consider that each process is provided with a
query-response mechanism. More speciﬁcally, any process
pi can broadcast a QUERY() message and then wait for cor-
responding RESPONSE() messages from (n − f) processes.
The other RESPONSE() messages associated with a query, if
any, are systematically discarded. A query issued by pi is
terminated if pi has received the (n − f) corresponding re-
sponses it was waiting for. We assume that a process issues
a new query only when the previous one has terminated.
Moreover, a process is assumed to repeatedly issue queries
until it crashes (the time elapsed between two consecutive
queries is ﬁnite but arbitrary). Finally, the response from
a process to its own queries is assumed to always arrive a-
mong the ﬁrst (n − f) responses it is waiting for.
3 Chandra-Toueg’s Failure Detectors
Failure detectors have been formally deﬁned by Chandra
and Toueg [5]. Informally, a failure detector consists of a set
of modules, each one attached to a process: the module at-
tached to pi maintains a set (named suspectedi) of process-
es it currently suspects to have crashed. Any failure detector
module is inherently unreliable: it can make mistakes by not
suspecting a crashed process or by erroneously suspecting
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
a correct one. Moreover, suspicions are not necessarily sta-
ble: a process pj can be added to or removed from a set
suspectedi according to whether pi’s failure detector mod-
ule currently suspects pj or not. As in other papers devoted
to failure detectors, we say “process pi suspects process pj”
at some time t, if at that time we have pj ∈ suspectedi.
As indicated in the Introduction, a failure detector class
is formally deﬁned by two abstract properties, namely a
Completeness property and an Accuracy property. Chandra
and Toueg have deﬁned eight classes of failure detectors [5].
In this paper, we are interested in four of them4. They are
deﬁned from the following completeness property:
• Strong Completeness: Eventually, every process
that crashes is permanently suspected by every correct
process.
and the following accuracy properties5:
• Perpetual Strong Accuracy: No process is suspected
before it crashes.
• Perpetual Weak Accuracy: Some correct process is
never suspected.
• Eventual Strong Accuracy: There is a time after
which no correct process is suspected.
• Eventual Weak Accuracy: There is a time after
which some correct process is never suspected.
Combining the completeness property with the four ac-
curacy properties deﬁnes the following classes of failure de-
tectors [5]:
• P: The class of Perfect failure detectors. This class
contains all the failure detectors that satisfy strong
completeness and perpetual strong accuracy.
• S: The class of Strong failure detectors. This class
contains all the failure detectors that satisfy strong
completeness and perpetual weak accuracy.
• 3P: The class of Eventually Perfect failure detectors.
This class contains all the failure detectors that satisfy
strong completeness and eventual strong accuracy.
• 3S: The class of Eventually Strong failure detectors.
This class contains all the failure detectors that satisfy
strong completeness and eventual weak accuracy.
Clearly, P ⊂ 3P ⊂ 3S, and P ⊂ S ⊂ 3S.
4The four other classes consider a weaker completeness property. It is
possible to provide a reduction protocol transforming each of them in its
counterpart with strong completeness [5].
5Although sometimes expressed differently, these properties are equiv-
alent to the ones deﬁned in [5].
Implementing a Failure Detector in S/3S
4
This section ﬁrst states two behavioral properties that,
when satisﬁed by the underlying system, allow to imple-
ment a failure detector of the class S or 3S, respectively.
Then, it presents a versatile protocol that implements failure
detectors of the corresponding classes.
4.1 A Behavioral Property
Let t ∈ T . The following notations are used in the fol-
lowing:
- qt
at or before t,
- r ec f romt
which pj has received the responses to qt
j.
j denotes the last query issued by pj that has terminated
j denotes the set of (n − f) processes from
Let rt
i be the set of processes pj that, at time t, have
received a response from pi to their query qt
j (their last
i = {pj | pi ∈
terminated query at t). More formally, rt
j}. Moreover, let f t be the set of processes that
r ec f romt
have crashed at time t. Considering a process pi, let us ob-
i ∪ f t is the set of processes that either have re-
serve that rt
ceived a response from pi to their last query or have crashed.
We are now in order to state the set of PR proper-
ties6. PR(X ) denotes the property upon which the pro-
posed implementation of a failure detector of the class X
relies (where X stands for S or 3S).
(cid:1)
(cid:2)| > f.
PR(S) def= ∃pi : | ∩t≥0
(cid:2)| > f,
i ∪ f t
rt
(cid:1)
PR(3S) def= ∃u ∈ T : ∃pi : | ∩t≥u
i ∪ f t
rt
Let us consider PR(S).
It states that there is a pro-
cess pi and a set Q including at least (f + 1) processes,
such that from the beginning of the execution (t ≥ 0), each
process pj ∈ Q receives a response from pi to each of its
queries until it (pj) possibly crashes. PR(3S) states a sim-
ilar but weaker property in the sense that the property is not
required to hold from the very beginning. As shown in the
next section, these behavioral properties on the ﬂow of mes-
sages exchanged according to the query-response mecha-
nism and the values n and f, can be transformed into failure
detectors of the corresponding classes.
4.2 A General Protocol Implementing Failure De-
tectors
The protocol described in Figure 1 implements a fail-
ure detector module F Di that provides the upper layer pro-
cess pi with a set suspectedi satisfying the completeness
6The style used to state these properties is close the style used in [13]
to deﬁne round-by-round failure detectors. Roughly speaking, the query-
response mechanism used here is the analog of the round mechanism as-
sumed in [13].
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
and accuracy properties deﬁned by S (resp. 3S) when the
underlying system satisﬁes PR(S) (resp. PR(3S)). (To
not overload the presentation of the protocol, the tags asso-
ciating the RESPONSE() messages with the corresponding
QUERY() messages are not explicitly represented.)
The protocol is made up of two tasks T 1 and T 2. The
role of T 2 (line 8) is simple:
it implements the query-
response mechanism returning a RESPONSE() message each
time a QUERY() is received.
The core of the protocol is task T 1. This task is made
up of an inﬁnite loop. Each step of the loop consists of a
query-response invocation (lines 2-3) followed by a local
processing that, according to the set of processes from
which RESPONSE() messages have been received (line 4)
and the content of those RESPONSE() messages (line 5),
updates the local variable not rec f romi (line 6) and the
variable suspectedi (line 7), respectively.
The principles that underlie the protocol design are the
following.
• There
the
the
is ﬁrst
sets
of
construction
not rec f romi of each process pi.
If we do not
consider the content of the RESPONSE() messages,
this is done by the lines 2-4, 6 and 8.
These not rec f romi sets satisfy interesting proper-
ties. More precisely, when the underlying system sat-
isﬁes PR(X ), (1) they eventually include all crashed
processes and (2) they ensure that there is a correc-
t process that is not “suspected” by at least (f + 1)
processes.
• Then,
from the the previous not rec f romi set-
s,
the lines 3 (considering now the content of the
RESPONSE() messages), 5 and 7 construct the sets
suspectedi provided with the required properties.
This decomposition (ﬁrst
the
not rec f romi sets and then the construction of the
suspectedi sets) is reﬂected in the structure of the proof.
construction of
the
4.3 Proof of the Protocol
Let us ﬁrst observe that, as there are at most f (1 ≤
f < n) processes that can crash and channels do not lose
messages, no F Di module can block forever.
We assume by deﬁnition that the not rec f romi set of
a crashed process pi is equal to ∅. (This deﬁnition is mo-
tivated by the fact that a crashed process never sends its
not rec f romi set to the other processes.) Moreover, let
Q be the following assertion: “There is a correct process
that does not belong to the not rec f romi sets of at least
(f + 1) processes (some of those (f + 1) processes may be
correct, some others faulty)”.
Lemma 1 The not rec f romi sets satisfy the following
properties:
(1) Every process that crashes eventually permanently be-
longs to the not rec f romi set of each correct process pi.
(2) The assertion Q is satisﬁed from the beginning of
the protocol execution if the underlying system satisﬁes
PR(S). It is eventually satisﬁed when the underlying sys-
tem satisﬁes PR(3S).
Proof Let us observe that, as the lemma is on the
not rec f romi sets, the lines 5 and 7, and the content of
the RESPONSE() messages, are not involved in its proof.
(1). Let us consider a process p(cid:1) that crashes. After some
time t all the messages sent by p(cid:1) have been received. This
means that after t, no process pi receives a RESPONSE()
message from p(cid:1). Consequently, each time after t at which
it includes p(cid:1) in
a correct process pi executes line 6,
not rec f romi. Consequently, there is a time after which
p(cid:1) remains permanently in not rec f romi.
(2). Let us ﬁrst consider that the process crashes and the
ﬂow of QUERY()/RESPONSE() messages exchanged satis-
ﬁes the property denoted PR(S). This means that there
is a process pi and a set Q including at least (f + 1) pro-
cesses, such that, from the beginning of the execution, each
process pj ∈ Q receives a response from pi to each of its
queries until it (pj) possibly crashes.
Let us observe that, as (1) there are at most f processes
that crash, (2) the set Q contains at least one correct
process pk, and (3) pk always receives a response from pi
to its queries, we can conclude that pi is a correct process.
Moreover, let us consider a process pj ∈ Q. The fact that
pj ∈ Q means that, until pj possibly crashes, the response
from pi to each of its queries arrives among the ﬁrst (n− f)
ones. So, each time it executes line 3, pj puts pi in the set
I (line 4). It follows that each time line 6 is executed by
pj, we have pi /∈ not rec f romj. Finally, let us notice
that if pj ∈ Q and pj has crashed, by deﬁnition we have
pi /∈ not rec f romj.
that
The proof
there is a time after which the
not rec f rom sets satisfy Q when the underlying system
satisﬁes PR(3S), is basically the same as the previous one.
It is left to the reader.
2Lemma 1
Lemma 2 Let us assume that the not rec f romi sets sat-
isfy the ﬁrst item of Lemma 1, and from the beginning (resp.
after some time) the assertion Q. Then, the suspectedi sets
satisfy strong completeness and perpetual (resp. eventual)
weak accuracy.
Proof The proof is made of two parts addressing the strong
completeness property and the perpetual/eventual weak ac-
curacy property, respectively.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
(1) init: not rec f romi ← ∅; suspectedi ← ∅
task T 1:
(2)
(3)
(4)
(5)
(6)
(7)