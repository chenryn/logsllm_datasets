if (y < size) then B[A[y] ] else B[A[y] ]
Listing 2: Code that is RSNI but not RSS.
RSS(T-), in contrast, is a strict over-approximation of RSNI(T-)
(and, therefore, of weak speculative non-interference in terms of [28]).
Theorem 3.11 (RSS(T-) over-approximates RSNI(T-)).
1) ∀P. if ⊢ P : RSS(T-) then ⊢ P : RSNI(T-)
2) ∃P. ⊢ P : RSNI(T-) and ⊬ P : RSS(T-)
Finally, it is easy to see that any RSS(T) program is also RSS(T-)
since all actions tainted S by the taint-tracking of T are tainted S
also by the taint-tracking of T-.
Theorem 3.12 (RSS(T) Implies RSS(T-)).
∀P. if ⊢ P : RSS(T) then ⊢ P : RSS(T-)
4 COMPILER CRITERIA FOR SECURE
SPECULATION
We now introduce our secure compilation criteria: robust speculative
safety preservation (RSSP, Section 4.1), which preserves RSS, and
robust speculative non-interference preservation (RSNIP, Section 4.2),
which preserves RSNI. We conclude by discussing how compilers
can be proven secure or insecure using these criteria (Section 4.3).
As before, criteria can be instantiated using pairs of languages
L-T or L--T-. Criteria instantiated with the strong languages (say
RSSP(L,T)) are indicated with a + (that is, RSSP+). Those instantiated
with weak languages (say RSNIP(L-,T-)) are indicated with a - (that
is, RSNIP-). When we omit the ‘sign’, we refer to both criteria. For
simplicity, we only present the strong criteria (for L-T), weak ones
are defined identically (but for L−-T−).
4.1 Robust Speculative Safety Preservation
The first criterion is clear: a compiler preserves RSS if given a source
component that is RSS, the compiled counterpart is also RSS.
Definition 4.1 (RSSP+).
⊢(cid:74)·(cid:75) : RSSP
+ def= ∀P ∈ L. if ⊢ P : RSS(L) then ⊢(cid:74)P(cid:75) : RSS(T)
Definition 4.1 is a “property-ful” criterion since it explicitly refers
to the preserved property [3, 4]. Proving a “property-ful” criterion,
however, can be fairly complex. Fortunately, it is generally possible
to turn a “property-ful” definition into an equivalent “property-free”
one [3, 4, 51], which come in so-called backtranslation form with
established proof techniques [2, 4, 13, 45, 49, 51].
To state the equivalence of these criteria, we introduce a cross-
language relation between traces of the two languages, which spec-
ifies when two possibly different traces have the same “meaning”.
Our property-free security criterion (RSSC, Definition 4.2) states
that a compiler is RSSC if for any target-level attacker A that gener-
ates a trace λσ , we can build a source-level attacker A that generates
a trace λσ that is related to λσ . A source trace λσ and a target trace
λσ are related (denoted with λσ ≈ λσ ) if the target trace contains all
the actions of the source trace, plus possible interleavings of safe (S)
actions (Rules Trace-Relation-Safe and Trace-Relation-Safe-Heap).
All other actions must be the same (i.e., ≡, Rules Trace-Relation-
Same and Trace-Relation-Same-Heap).
(Trace-Relation-Same)
λσ ≈ λσ
α σ ≡ α σ
λσ · α σ ≈ λσ · α σ
(Trace-Relation-Safe)
λσ ≈ λσ
λσ ≈ λσ · α S
(Trace-Relation-Same-Heap)
λσ ≈ λσ
δ σ ≡ δ σ
λσ · δ σ ≈ λσ · δ σ
λσ ≈ λσ
λσ ≈ λσ · δS
(Trace-Relation-Safe-Heap)
We are now ready to formalise RSSC, which intuitively states
that compiled programs produce the same traces as their source
counterparts with possibly additional safe actions. Crucially, RSSC
is equivalent to RSSP (Theorem 4.3), this result implies that our
choice for the trace relation is correct; a relation that is too strong
or too weak would not let us prove this equivalence.
Definition 4.2 (RSSC+).
⊢(cid:74)·(cid:75) : RSSC
+ def= ∀P ∈ L, A, λσ . if Beh
A
= λσ
(cid:16)
(cid:103)(cid:17)
(cid:102)
(cid:74)P(cid:75)
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea451Theorem 4.3 (RSSP and RSSC are eqivalent).
then ∃A, λσ . Beh(A [P]) = λσ and λσ ≈ λσ
∀(cid:74)·(cid:75). ⊢(cid:74)·(cid:75) : RSSP+ ⇐⇒ ⊢(cid:74)·(cid:75) : RSSC+
∀(cid:74)·(cid:75). ⊢(cid:74)·(cid:75) : RSSP- ⇐⇒ ⊢(cid:74)·(cid:75) : RSSC-
Definition 4.2 requires providing an existentially-quantified source
attacker A. The general proof technique for these criteria is called
backtranslation [4, 50], and it can either be attacker-based [13, 21,
45] or trace-based [2, 49, 51]. The distinction tells us what quanti-
fied element one can use to build the source attacker A, either the
target attacker A or the trace λσ respectively. In our proofs, we
will use an attacker-based backtranslation.
4.2 Robust Speculative Non-Interference
Preservation
Here, we only present a property-ful criterion for the preservation
of RSNI (Definition 4.4). The reason is that we only directly prove
that compilers do not attain RSNIP. This kind of proof is simple
already (Corollary 4.5), and we do not need a property-free criterion.
(cid:102)
(cid:103)
Definition 4.4 (RSNIP+).
⊢(cid:74)·(cid:75) : RSNIP
+ def= ∀P ∈ L. if ⊢ P : RSNI(L) then ⊢(cid:74)P(cid:75) : RSNI(T)
Corollary 4.5 (⊬(cid:74)·(cid:75) : RSNIP+).
⊬(cid:74)·(cid:75) : RSNIP+ def= ∃P ∈ L. ⊢ P : RSNI(L) and ⊬(cid:74)P(cid:75) : RSNI(T)
(cid:103)
(cid:102)
(cid:102)
(cid:103)
(cid:74)P(cid:75)
(cid:74)P′(cid:75)
(cid:102)
(cid:103)(cid:17)(cid:17)↾nse= Beh
(cid:74)P′(cid:75)
⊬(cid:74)P(cid:75) : RSNI(T) = ∃A. ⊢ A : atk and given A
(cid:16)
(cid:16)
(cid:102)
(cid:103)(cid:17)(cid:17) (cid:44) Beh
(cid:74)P(cid:75)
(cid:16)
(cid:16)
(cid:16)
(cid:74)P(cid:75)
Let us now unfold the corollary in order to understand what must be
proven to show that a compiler is not RSNIP+. The crux is the second
clause of the corollary, which gets unfolded to the following. Recall
that low-equivalent programs simply differ in their private heap, so
A
(cid:103)
(cid:102)
(cid:102)
(cid:103)(cid:17)(cid:17)↾nse
(cid:74)P(cid:75)
(cid:103)(cid:17)(cid:17)
(cid:74)P′(cid:75)
(cid:74)P′(cid:75)
but with a different private heap.
is the same as A
we have Beh
=L A
A
That is, we need to find a program P and an attacker A that violate
RSNI. Finding these existentially-quantified program (and attacker)
may be hard. Fortunately, failed attempts at proving RSSC often pro-
□
vide hints for how to do this.
We remark that the insecurity part of our methodology is used
to show its completeness w.r.t. vulnerability to Spectre v1 attacks.
Unfortunately, one still has to manually come up with the insecure
counterexample and verify that it is not RSNI.
and Beh
Ω0
A
(cid:16)
(cid:102)
Ω0
Ω0
A
A
(cid:16)
(cid:16)
Ω0
4.3 A Methodology for Provably-(In)Secure
Countermeasures
To prevent speculative leaks, secure compilers should produce tar-
get programs that satisfy RSNI (cf. Section 3.1) whereas insecure
compilers will produce some programs that fail to achieve RSNI.
In this section, we show how to combine the results from the pre-
vious sections to derive exactly these facts about compilers; we
depict this with the two chains of implications below. The first
one (1) lists the assumptions (black dashed lines) and logical steps
(theorem-annotated implications) to conclude compiler security
while the second one (2) lists assumptions and logical steps for
compiler insecurity. For simplicity, the diagram focuses on secu-
rity definitions and compiler criteria for L and T. There are similar
chains of implications for L- and T- that use Theorem 3.11 instead
of Theorem 3.10.
⊢(cid:74)·(cid:75) : RSSC+
⊢(cid:74)·(cid:75) : RSSP+
∀P ∈ L
⊢ P : RSS(L)
⊢(cid:74)P(cid:75) : RSS(T)
Theorem 3.10
Theorem 4.3
⊢(cid:74)P(cid:75) : RSNI(T)
(1)
(2)
∃P ∈ L
⊢ P : RSNI(L)
⊬(cid:74)·(cid:75) : RSNIP+
⊬(cid:74)P(cid:75) : RSNI(T)
To show security (1), we need to prove that any compiled compo-
nent is RSNI in the target language. Rather than directly reasoning
about RSNI, we rely on RSS, which over-approximates RSNI (cf.
Theorem 3.10). This significantly simplifies our security proofs
since it allows us to reason about single traces rather than pairs of
traces. Thus, it suffices to show that any compiled component is
RSS in the target. This can be obtained by (i) an RSSP+ compiler so
long as (ii) any P is RSS in the source. By Theorem 4.3, for point (i)
it is sufficient to show that the compiler is RSSC+. Point (ii) holds
for any P (Theorem 3.9). This direction highlights how RSS really
is a working security definition that simplifies proving the more
precise, semantic security definition which is RSNI.
To show insecurity (2), we need to prove that there exists a
compiled component that is not RSNI in the target language. For
this, we show (A) that the compiler is not RSNIP+ given that (B) the
source component P was RSNI in the source. To show (A), we follow
Corollary 4.5, whereas point (B) holds for any P (Theorem 3.9).
Our security criteria, instantiated for the strong (L-T) and weak
(L--T-) languages, provide a way of characterizing the security
guarantees of any countermeasure(cid:74)·(cid:75), which is what we do next.
In particular, showing that(cid:74)·(cid:75) is RSSC+ ensures that compiled code
has no speculative leaks. Similarly, showing that(cid:74)·(cid:75) is RSSC- (and
attacks. Finally, showing that(cid:74)·(cid:75) is not RSNIP- implies that compiled
not RSNIP+) ensures that compiled code does not leak information
about speculatively-accessed data, i.e., it would prevent Spectre
code leaks speculatively accessed data, like in Spectre attacks.
Preservation or Enforcement? RSNIP and RSSP focus on preserving
the related security property. Since their premise is always satisfied,
we could also state them in terms of enforcing RSNI and RSS over
compiled programs. We choose against this to be able to reuse
established compiler theory [39], and since it is unclear how to
prove Theorem 4.3 with enforcement statements.
5 COUNTERMEASURES ANALYSIS
In this section, we characterise the security guarantees of the main
Spectre v1 countermeasures implemented by compiler vendors:
insertion of speculation barriers (lfence) and speculative load
hardening (slh). For this, we develop formal models that capture
the key aspects of these countermeasures as implemented by the
Microsoft Visual C++ compiler [47] (MSVC, Section 5.1), the In-
tel C++ compiler [33] (ICC, Section 5.2), and the Clang compiler
(Section 5.3), and we analyze their guarantees using our secure
compilation criteria. We continue the section with an overview of
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea452our proofs (Section 5.4). We conclude by discussing our analysis’
results (Section 5.5). For space constraints, compiled snippets, their
formalisation, and full security proofs can be found in [52].
5.1 MSVC is Insecure
Inserting speculation barriers—the lfence x86 instruction—after
branch instructions is a simple countermeasure against Spectre
v1 [31, 33, 47]. This instruction stops speculative execution at the
price of significant performance overhead.
MSVC implements a countermeasure that tries to minimize the
number of lfences by selectively determining which branches to
patch [47].1 However, MSVC fails in inserting some necessary
lfences, thereby producing insecure code that is not RSNI(T-) and
that is vulnerable to Spectre-style attacks.