# Chapter 12: Awk Associative Arrays

## Exit Statement in Awk
The `exit` statement in Awk accepts an integer as an argument, which serves as the exit status code for the Awk process. If no argument is provided, `exit` returns a status code of zero.

### Example
The following Awk script exits during the 5th iteration. Since the `print` statement follows the `exit` statement, the value of `x` is printed only up to 4, and once it reaches 5, the script exits.

```awk
BEGIN {
    x = 1;
    while (x <= 5) {
        if (x == 5) {
            exit;
        }
        print "Value of x:", x;
        x++;
    }
}
```

Running this script:
```sh
$ awk -f exit.awk
Value of x: 1
Value of x: 2
Value of x: 3
Value of x: 4
```

## Assigning Array Elements
Awk arrays are associative, meaning they can have string or numeric keys, and do not require a continuous set of numbers. You don't need to specify the size of the array.

### Syntax
```awk
arrayname[index] = value
```
- `arrayname` is the name of the array.
- `index` is the key of the array element.
- `value` is the value assigned to the array element.

### Example
```awk
BEGIN {
    item[101] = "HD Camcorder";
    item[102] = "Refrigerator";
    item[103] = "MP3 Player";
    item[104] = "Tennis Racket";
    item[105] = "Laser Printer";
    item[1001] = "Tennis Ball";
    item[55] = "Laptop";
    item["na"] = "Not Available";

    print item[101];
    print item[102];
    print item[103];
    print item[104];
    print item[105];
    print item[1001];
    print item[55];
    print item["na"];
}
```

Running this script:
```sh
$ awk -f array-assign.awk
HD Camcorder
Refrigerator
MP3 Player
Tennis Racket
Laser Printer
Tennis Ball
Laptop
Not Available
```

### Key Points
- Array indexes do not need to be sequential.
- Array indexes can be strings.
- Arrays do not need to be initialized or defined before use.
- The index of the array is always treated as a string by Awk.

## Referring to Array Elements
You can directly print an array element using the `print` command or assign it to another variable for further manipulation.

### Example
```awk
BEGIN {
    x = item[55];

    if (55 in item) {
        print "Array index 55 contains", item[55];
    }

    item[101] = "HD Camcorder";

    if (101 in item) {
        print "Array index 101 contains", item[101];
    }

    if (1010 in item) {
        print "Array index 1010 contains", item[1010];
    }
}
```

Running this script:
```sh
$ awk -f array-refer.awk
Array index 55 contains 
Array index 101 contains HD Camcorder
```

### Key Points
- Accessing an unassigned array element will automatically create it with a null value.
- Use `if (index in array)` to check if an index exists in the array.

## Browsing the Array Using For Loop
To access all elements of an array, you can use a special instance of the `for` loop.

### Syntax
```awk
for (var in arrayname) {
    actions
}
```
- `var` is any variable name.
- `in` is a keyword.
- `arrayname` is the name of the array.
- `actions` are the list of Awk statements to be executed.

### Example
```awk
BEGIN {
    item[101] = "HD Camcorder";
    item[102] = "Refrigerator";
    item[103] = "MP3 Player";
    item[104] = "Tennis Racket";
    item[105] = "Laser Printer";
    item[1001] = "Tennis Ball";
    item[55] = "Laptop";
    item["na"] = "Not Available";

    for (x in item) {
        print item[x];
    }
}
```

Running this script:
```sh
$ awk -f array-for-loop.awk
Laptop
HD Camcorder
Refrigerator
MP3 Player
Tennis Racket
Laser Printer
Not Available
Tennis Ball
```

## Deleting Array Elements
To remove an element from an array, use the `delete` statement.

### Syntax
```awk
delete arrayname[index]
```

### Example
```awk
BEGIN {
    item[101] = "HD Camcorder";
    item[102] = "Refrigerator";
    item[103] = "MP3 Player";
    item[104] = "Tennis Racket";
    item[105] = "Laser Printer";
    item[1001] = "Tennis Ball";
    item[55] = "Laptop";
    item["na"] = "Not Available";

    delete item[102];
    item[103] = "";
    delete item[104];
    delete item[1001];
    delete item["na"];

    for (x in item) {
        print "Index", x, "contains", item[x];
    }
}
```

Running this script:
```sh
$ awk -f array-delete.awk
Index 55 contains Laptop
Index 101 contains HD Camcorder
Index 103 contains 
Index 105 contains Laser Printer
```

## Multi-Dimensional Arrays
Awk supports one-dimensional arrays, but you can simulate multi-dimensional arrays by using a single-dimensional array with composite keys.

### Example
```awk
BEGIN {
    item["1,1"] = 10;
    item["1,2"] = 20;
    item["2,1"] = 30;
    item["2,2"] = 40;

    for (x in item) {
        print item[x];
    }
}
```

Running this script:
```sh
$ awk -f array-multi.awk
10
20
30
40
```

### Subscript Separator
By default, Awk uses `\034` as the subscript separator. You can change this using the `SUBSEP` variable.

### Example
```awk
BEGIN {
    SUBSEP = ":";
    item[1,1] = 10;
    item[1,2] = 20;
    item[2,1] = 30;
    item[2,2] = 40;

    for (x in item) {
        print "Index", x, "contains", item[x];
    }
}
```

Running this script:
```sh
$ awk -f array-multi5.awk
Index 1:1 contains 10
Index 1:2 contains 20
Index 2:1 contains 30
Index 2:2 contains 40
```

## Sorting Array Values Using `asort`
The `asort` function sorts the array values and stores them in new indexes from 1 to n, where n is the total number of elements in the array.

### Example
```awk
BEGIN {
    item[101] = "HD Camcorder";
    item[102] = "Refrigerator";
    item[103] = "MP3 Player";
    item[104] = "Tennis Racket";
    item[105] = "Laser Printer";
    item[1001] = "Tennis Ball";
    item[55] = "Laptop";
    item["na"] = "Not Available";

    print "--- Before asort ---";
    for (x in item) {
        print "Index", x, "contains", item[x];
    }

    total = asort(item);

    print "--- After asort ---";
    for (i = 1; i <= total; i++) {
        print "Index", i, "contains", item[i];
    }

    print "Return value from asort:", total;
}
```

Running this script:
```sh
$ awk -f asort1.awk
--- Before asort ---
Index 55 contains Laptop
Index 101 contains HD Camcorder
Index 102 contains Refrigerator
Index 103 contains MP3 Player
Index 104 contains Tennis Racket
Index 105 contains Laser Printer
Index na contains Not Available
Index 1001 contains Tennis Ball
--- After asort ---
Index 1 contains HD Camcorder
Index 2 contains Laptop
Index 3 contains Laser Printer
Index 4 contains MP3 Player
Index 5 contains Not Available
Index 6 contains Refrigerator
Index 7 contains Tennis Ball
Index 8 contains Tennis Racket
Return value from asort: 8
```

This comprehensive guide should help you understand and effectively use associative arrays in Awk.