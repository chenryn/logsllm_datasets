title:Scalable optimal countermeasure selection using implicit enumeration
on attack countermeasure trees
author:Arpan Roy and
Dong Seong Kim and
Kishor S. Trivedi
Scalable Optimal Countermeasure Selection using Implicit Enumeration on Attack
Countermeasure Trees
Arpan Roy
‡
§
, Dong Seong Kim
‡
and Kishor S. Trivedi
Department of Electrical and Computer Engineering, Duke University, Durham, NC 27708, USA
‡
Department of Computer Science and Software Engineering, University of Canterbury, Christchurch 8140, New Zealand
Email: PI:EMAIL, PI:EMAIL, PI:EMAIL
§
Abstract—Constraints such as limited security investment
cost precludes a security decision maker from implementing
all possible countermeasures in a system. Existing analytical
model-based security optimization strategies do not prevail for
the following reasons: (i) none of these model-based methods
offer a way to ﬁnd optimal security solution in the absence
of probability assignments to the model, (ii) methods scale
badly as size of the system to model increases and (iii) some
methods suffer as they use attack trees (AT) whose structure
does not allow for the inclusion of countermeasures while others
translate the non-state-space model (e.g., attack response tree)
into a state-space model hence causing state-space explosion.
In this paper, we use a novel AT paradigm called attack
countermeasure tree (ACT) whose structure takes into account
attacks as well as countermeasures (in the form of detection
and mitigation events). We use greedy and branch and bound
techniques to study several objective functions with goals
such as minimizing the number of countermeasures, security
investment cost in the ACT and maximizing the beneﬁt from
implementing a certain countermeasure set in the ACT under
different constraints. We cast each optimization problem into
an integer programming problem which also allows us to ﬁnd
optimal solution even in the absence of probability assignments
to the model. Our method scales well for large ACTs and we
compare its efﬁciency with other approaches.
Keywords-attack countermeasure tree, branch and bound,
integer programming, optimization, security investment cost.
I. INTRODUCTION
Security modeling is useful to assess security of a system.
The ﬁrst step towards security modeling is to design and con-
struct a scalable model [1], [2] that helps quantify security
[3] in terms of key attributes such as the loss caused by an
attack or the gain accrued from enforcing a certain set of
countermeasures [4]. This will aid not only in probabilistic
risk analysis [5] but also in the development of a scheme
as to where security investment should be prioritized in the
system. The simplest model type in this context is attack
tree (AT) [1]. Dewri et. al [6] utilized genetic algorithms to
ﬁnd optimal countermeasure sets for a system from their AT
models. However, the basic formalism of AT does not take
into account defense mechanisms. In earlier work [7], we
developed a novel attack tree model called attack counter-
measure tree (ACT). In ACT, (i) defense mechanisms can
be placed at any node of the tree, not just at the leaf nodes,
978-1-4673-1625-5/12/$31.00 ©2012 IEEE
(ii) generation and analysis of attack scenarios and attack-
countermeasure scenarios are automated using mincuts and
(iii) security analysis (using measures such as attack and
security investment cost, system risk, impact of an attack,
return on attack (ROA) and return on investment (ROI))
is performed in an integrated manner. Zonouz et. al [8]
proposed attack response trees (ARTs) in which both attacks
and response events can be placed at any node of the tree
but ARTs suffer from the state-space explosion problem due
to the use of partially observable Markov decision process
as a solution technique. In this paper, we show how to ﬁnd
optimal countermeasures using single objective optimization
directly on ACT. More speciﬁcally, we show
∙ some analysis and optimization can be done without
making probability assignments since many people
believe it is hard or impossible to obtain probability
values for attack, detection and mitigation events.
∙ how an optimal security countermeasure set can be
selected from the pool of defense mechanisms using a
non-state-space approach which is much less expensive
than the state-space approach [8].
∙ greedy strategies and implicit enumeration techniques
(branch and bound) are used to compute the optimal
countermeasure set for various objective functions un-
der different constraints and our work is compared
with the approaches using genetic algorithms in [6] and
ART-based state-space approach in [8].
∙ we present our method for automated generation of
ACTs and discuss how our proposed optimization tech-
niques scale for large ACTs.
The remainder of this paper is organized as follows. A brief
overview of ACT is presented in Section II. In Section
III, optimal countermeasure set selection on ACT without
making any probability assignments is presented. In Section
IV, optimal countermeasure set selection with probability
assignments is described. We show results and their impli-
cations in Section V. Related work is presented in Section
VI. Some simulation results and the impact of optimal
countermeasure selection using ACT on security analysis
are discussed in Section VII. Finally, we conclude the paper
in Section VIII.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:10 UTC from IEEE Xplore.  Restrictions apply. 
II. AN OVERVIEW OF ATTACK COUNTERMEASURE
TREES (ACT)
In ACT, there are three distinct classes of events: atomic
attack events (e.g.,
install a keystroke logger), detection
events (e.g., detect
the keystroke logger) and mitigation
events (e.g., remove the keystroke logger). An example
scenario for a BGP (Border Gateway Protocol) attack is
shown in Figure 1. An attacker prevents two peers from
exchanging routing information by repeatedly causing a
BGP session in Established state to reset. The BGP session
can be reset by injecting a spoofed TCP (Transmission
Control Protocol) or BGP message into the router message
stream. Such spoofed packets can often be detected by
methods such as the Inter-domain packet ﬁlter (IDPF) [9]
and mitigated by adding an MD5 (Message-Digest algo-
rithm) based authentication for packets from the source host
of the spoofed packet. Building a valid TCP/BGP packet
requires a valid TCP sequence number (obtained by TCP
sequence number prediction). During the initial stages of
a TCP sequence number attack, a spoofed packet from an
attacker is usually followed by the original packet from the
authentic source. Detecting such duplicate packets can be
a giveaway for on-going TCP sequence number attacks.
Dropping compromised connections and initiating a new
connection to destination with a different route will mitigate
such attacks. Spoofed TCP message with RST ﬂag set will
cause a connection to reset. Spoofed BGP messages (OPEN,
NOTIFICATION or KEEPALIVE messages) received by the
BGP speaker in the Connect or Active states will cause
the router to reset resulting in a denial of service. The
BGP speaker can also be compromised by gaining physical
or logical (hijacking a router management session) access
to the router. Usually router hijacking is characterized by
anomalous packet forwarding [10] which can be detected
by trafﬁc monitoring at the router and mitigated by securing
or replacing the router.
2.
session [11] and its countermeasures [12] in Figure
Among others, countermeasures include traceroute as one of
the detection mechanisms for spoofed TCP reset messages
and sequence number randomization as the corresponding
mitigation techniques.
Attack event
Detection event
Mitigation Event
GOAL: Reset a BGP session
(disrupted connections and routing hazards)
OR
AND
AND
AND
AND
A1: Send spoofed 
message to router 
causing reset
D1: Inter-
domain packet 
filter (IDPF)
M1: MD5-
based 
Authentication
A2: 
Compromise 
BGP router
D2: Monitor traffic 
for anomalous 
packet forwarding
M2: Secure 
or replace 
router
AND
A11:  Type of 
spoofed message
OR
A12:  Insert correct 
packet sequence number
AND
AND
A111: Send 
spoofed message 
containing TCP 
reset
A112: Send 
spoofed 
BGP 
message
OR
A121 : TCP sequence 
number prediction 
attack 
D121: Detect 
duplicate 
packets
M121: TCP reset
and choose different route
    to destination
A1121: Spoofed 
OPEN message
A1122: Spoofed 
NOTIFICATION 
message
A1123: Spoofed 
KEEPALIVE 
message
Figure 2. An ACT for attacks involving resetting a BGP session and their
countermeasures
An ACT for compromising a SCADA (supervisory control
and data acquisition) system is shown in Figure 3 [8].
The ACT may have one or more repeated attack, detection
and mitigation events (which means an event appears two
or more times in the tree). For instance, in Figure 3 the
attack event ‘Unavailable LAN’ occurs twice in the tree and
contributes to both events: ‘Power loads not provided’ and
‘Incorrect estimates to customers’.
Router
(non-BGP router)
Physical connection
Attack path
Router 
(BGP speaker)
Basic attack event
Repeated attack event
Mitigation event
SCADA
compromised
OR
.
.
.
A111   : Inject 
spoofed 
TCP messages 
into router 
message 
stream
Internet
.
.
.
Power loads 
not provided
OR
Unavailable 
Network 
(LAN)
Incorrect 
monitoring
OR
Incorrect estimates to 
customers
OR
Problematic 
Control
Database
(DB)
OR
Unavailable 
Network 
(LAN)
Workstation
(WS)
Incomplete 
sensors
Wrong state 
estimation
(WSE)
2/3
Control 
servers
AND
Controlling 
agents
AND
A 112
AƩacker
WorkstaƟon
S1
S2
S3
AND
SCOPF
AND
AND
AND
Figure 1. Example of attack for resetting a BGP session
HMI
G1
G2
G3
switch
restart
G1
restart
G2
restart
G3
We show an ACT for BGP attack by resetting a BGP
Figure 3. An ACT for SCADA system
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:10 UTC from IEEE Xplore.  Restrictions apply. 
Some notations relevant to ACT are listed below.
an atomic or leaf attack event
a detection event
a mitigation event
a countermeasure event (which combines a detection
𝐴𝑘
𝐷𝑘
𝑀𝑘
𝐶𝑀𝑘
and a mitigation event)
𝑝𝐴𝑘 probability of occurrence of an atomic attack 𝐴𝑘
probability of success of a detection event 𝐷𝑘
𝑝𝐷𝑘
𝑝𝑀𝑘
probability of success of a mitigation event 𝑀𝑘
𝑃𝑔𝑜𝑎𝑙
probability of attack success at the ACT goal
𝑖𝐴𝑘
𝐼𝑔𝑜𝑎𝑙
𝑐𝐴𝑘
𝐶𝑎𝑡𝑡𝑎𝑐𝑘𝑒𝑟
𝑐𝐶𝑀𝑘
impact of an atomic attack event 𝐴𝑘
impact at the goal node of ACT
cost of an atomic attack event 𝐴𝑘
security investment cost of a countermeasure 𝐶𝑀𝑘
attack cost at the goal node of ACT
III. OPTIMAL COUNTERMEASURE SELECTION WITHOUT
PROBABILITY ASSIGNMENTS
Many security researchers believe that it is hard to obtain
the probability of an attack, detection and mitigation event.
In this section, we discuss selection of optimal counter-
measure set without making any probability assignments
for the events in an ACT. We start to carry out analysis
using the minimal cut-sets (in short, mincut from now on)
of an ACT. A cut-set in an ACT is a set of leaf events
whose occurrence ensures that the top event occurs. A cut-
set in an AT represents an attack scenario whereas that in
an ACT represent an attack-countermeasure scenario. A cut-
set is said to be minimal if it cannot be reduced further
without losing its status as a cut-set. There are well known
algorithms for ﬁnding all the mincuts and they have been
included in software packages such as SHARPE [13]. In
ACT, the top event is associated with the set of all mincuts.
The mincuts (i.e., attack countermeasure scenarios) of the
ACT in Figure 2 are {(𝐴111, 𝐶𝑀1, 𝐴121, 𝐶𝑀121), (𝐴1121,
𝐶𝑀1, 𝐴121, 𝐶𝑀121), (𝐴1122, 𝐶𝑀1, 𝐴121, 𝐶𝑀121), (𝐴1123,
𝐶𝑀1, 𝐴121, 𝐶𝑀121), (𝐴2, 𝐶𝑀2)} (where 𝐶𝑀1=(𝐷1𝑀1),
𝐶𝑀121=(𝐷121𝑀121), 𝐶𝑀2=(𝐷2𝑀2)). Each of the 5 min-
cuts represents a combination of events to achieve attack
success at the goal. For instance the mincut (𝐴1122, 𝐶𝑀1,
𝐴121, 𝐶𝑀121) indicates that if both the atomic attack events
𝐴1122 and 𝐴121 occur and if both the countermeasures
𝐶𝑀1 and 𝐶𝑀121 fail, attack will succeed. From the mincut
(𝐴1122, 𝐶𝑀1, 𝐴121, 𝐶𝑀121), we observe that the pair of
atomic attack events (𝐴1122, 𝐴121) is covered by either
the countermeasure 𝐶𝑀1 or 𝐶𝑀121. SHARPE is used to
generate the mincuts of the ACT. We show the optimal
countermeasure set(s) selection to cover all atomic attack
events by using minimum number of countermeasures as
an objective function in an ACT in Section III-A. We
discuss cost and impact analysis using ACT in Section III-B
and we show optimal countermeasure set selection using
minimization of the security investment cost as an objective
function in Section III-C.
A. Selection of minimum number of countermeasures in ACT
A system administrator (or security decision maker) has to
work within a given budget constraint which may preclude
one from implementing all possible countermeasures. So we
ﬁrst present an optimization procedure that minimizes the
number of countermeasures used in an ACT. In the following
subsections, we present different ways of formulating this
optimization problem using the BGP ACT [11] in Figure 2
and the SCADA ACT [8] in Figure 3 as examples. We show
mainly two cases: full cover and partial cover of atomic
attack events.
1) Full cover of atomic attack events: The full cover
of ACT is achieved if the set of countermeasures in the
optimal set (𝒪𝒫𝒯 ) covers all
the atomic attack events.
As discussed earlier, a countermeasure in a mincut covers
every atomic attack event in that mincut. A matrix (T) is
generated from the ACT mincuts where the columns are the
countermeasures (𝐶𝑀𝑗) and the rows are the atomic attack
events (𝐴𝑖). Instances of matrix T are shown in Figure 4.
If 𝐶𝑀𝑗 covers 𝐴𝑖, 𝑡𝑖𝑗 ((i,j)𝑡ℎ entry in T) = 1 else 𝑡𝑖𝑗 =
0. To ﬁnd the optimal countermeasure set, we minimize
the number of columns to be selected from the matrix
T, subject to the constraint that each row (atomic attack
event) is covered by at least one column (countermeasure).
The optimization problem is considered as a linear zero-
one integer programming problem [14]. Let 𝑥𝑗 = 1 if the
countermeasure 𝐶𝑀𝑗 is selected, otherwise 𝑥𝑗 = 0. Then
the objective is to minimize