### 优化后的文本

#### 1. 准备公钥文件
在主机B上，进入`.ssh`目录并列出文件：
```bash
root@B:~# cd .ssh
root@B:~/.ssh# ls
id_rsa id_rsa.pub
```
`~/.ssh`目录下的`id_rsa.pub`文件是该主机上`root`用户的公钥。接下来，我们需要将这个公钥添加到容器中。

#### 2. 在容器内配置公钥
回到容器系统内部，在`/root`目录下创建`.ssh`目录，并将允许远程登录的用户的公钥添加到`authorized_keys`文件中：
```bash
root@9598cb8e8f4a:/var/run# cd ~
root@9598cb8e8f4a:~# mkdir .ssh
root@9598cb8e8f4a:~# vi .ssh/authorized_keys
```

#### 3. 创建SSH运行脚本
接下来，我们需要创建一个启动SSH服务的脚本`run.sh`，并为其添加执行权限。由于容器启动时只能运行一个命令，我们将所有需要启动的程序和服务都放在一个脚本中。以下是创建和编辑脚本的步骤：

```bash
root@9598cb8e8f4a:~# vi run.sh
root@9598cb8e8f4a:~# chmod u+x run.sh
root@9598cb8e8f4a:~# cat run.sh
#!/bin/bash
/usr/sbin/sshd -D
```

**注意事项**：脚本中的命令不能添加`&`，否则生成的镜像会立即退出。例如，如果脚本内容为`/usr/sbin/sshd -D &`，则容器会立即退出。使用`-D`参数可以确保SSH服务不以守护进程运行，而是与终端关联，从而保持容器运行。

最后，使用`exit`命令或按`Ctrl+D`组合键退出容器。

#### 4. 提交生成镜像
使用`docker commit`命令将容器提交为一个新的镜像：
```bash
$ sudo docker commit 9598cb8e8f4a ssh:commit
9be5e20b8429fdf253ebe7826e7838f21468fcace7b8c3d61fbe5612efed79b0
```

使用`docker images`命令查看新生成的镜像：
```bash
$ sudo docker images
REPOSITORY   TAG       IMAGE ID       CREATED         VIRTUAL SIZE
ssh          commit    9be5e20b8429   26 seconds ago  230.3 MB
```

#### 5. 使用新镜像启动容器
使用新镜像启动容器，并通过`-p`参数映射端口`2022:22`：
```bash
$ sudo docker run -d -p 2022:22 ssh:commit /root/run.sh
943315c382297af818a6d5b425303e541753913c587c928279bd355be9ecec43
```

使用`docker ps`命令查看容器信息：
```bash
$ sudo docker ps
CONTAINER ID   IMAGE       COMMAND             CREATED        STATUS         PORTS                    NAMES
943315c38229   ssh:commit  "/root/run.sh"      1 minute ago   Up 21 seconds  0.0.0.0:2022->22/tcp     romantic_mestorf
```

#### 6. 通过SSH登录容器
在主机B的`root`用户下，通过访问容器宿主主机的`2022`端口登录容器：
```bash
$ ssh 192.168.199.231 -p 2022
The authenticity of host '[192.168.199.231]:2022 ([192.168.199.231]:2022)' can't be established.
ECDSA key fingerprint is f8:cc:7c:dd:bf:4e:d1:32:08:e3:11:0e:8c:0c:fd:e9.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[192.168.199.231]:2022' (ECDSA) to the list of known hosts.
...
root@943315c38229:~#
```

#### 7. 基于Dockerfile的方式创建SSH服务镜像

##### 1. 准备文件
创建一个存放生成镜像相关文件的工作目录：
```bash
$ mkdir ssh_dockerfile && cd ssh_dockerfile
```

在该目录下，创建以下三个文件：
- `Dockerfile`：用于构建镜像。
- `run.sh`：启动SSH服务的脚本文件。
- `authorized_keys`：包含需要远程登录的用户的公钥。

`run.sh`脚本文件的内容如下：
```bash
#!/bin/bash
/usr/sbin/sshd -D
```

`authorized_keys`文件内容的生成方式如下：
```bash
$ ssh-keygen -t rsa
```

按回车选择默认的没有密码，此时会在当前用户目录下的`.ssh`目录中生成两个文件`id_rsa`和`id_rsa.pub`。将`id_rsa.pub`的内容添加到`authorized_keys`文件中：
```bash
$ cat ~/.ssh/id_rsa.pub > authorized_keys
```

##### 2. 编写Dockerfile
Dockerfile用于创建镜像，内容如下：
```dockerfile
# 使用的基础镜像
FROM ubuntu:14.04

# 添加作者信息
MAINTAINER kaixin PI:EMAIL

# 安装SSH服务
RUN apt-get update && apt-get install -y openssh-server

# 创建必要的目录
RUN mkdir -p /var/run/sshd
RUN mkdir -p /root/.ssh

# 取消PAM登录限制
RUN sed -ri 's/session required pam_loginuid.so/#session required pam_loginuid.so/g' /etc/pam.d/sshd

# 添加认证文件和启动脚本
ADD authorized_keys /root/.ssh/authorized_keys
RUN echo "#!/bin/bash" > /root/run.sh
RUN echo "/usr/sbin/sshd -D" >> /root/run.sh
RUN chmod u+x /root/run.sh

# 导出端口
EXPOSE 22

# 设置默认的启动命令
CMD ["/root/run.sh"]
```

##### 3. 创建镜像
运行`docker build`命令生成目标镜像：
```bash
$ sudo docker build -t ssh:dockerfile .
Sending build context to Docker daemon  3.072 kB
...
Successfully built 9c9743f2d33a
```

使用`docker images`命令查看本地镜像：
```bash
$ sudo docker images
REPOSITORY   TAG       IMAGE ID       CREATED         VIRTUAL SIZE
ssh          dockerfile 9c9743f2d33a   3 minutes ago   230.3 MB
ssh          commit    9be5e20b8429   53 minutes ago  230.3 MB
```

启动新镜像并连接到容器：
```bash
$ sudo docker run -d -p 2023:22 ssh:dockerfile /root/run.sh
$ ssh 192.168.199.231 -p 2023
```

现在，我们已经通过两种方式实现了SSH服务，可以通过远程机器来创建镜像或对容器进行维护。

#### 第6章 综合案例1：Apache+PHP+MySQL

本章是一个综合案例，将在基础镜像`centos`的基础上搭建一个基于Apache、PHP和MySQL的Web应用。通过本章的案例，可以巩固前面所学的基础知识，特别是Dockerfile的编写和多容器的应用。

##### 架构
图6-1展示了本案例容器的部署架构，包含两个容器：
- **Web容器**：运行Apache和PHP服务，并包含PHP页面。
- **数据库容器**：运行MySQL服务，保存应用的数据。

Web容器需要使用数据库容器提供的服务，PHP页面将根据需求访问数据库容器提供的数据，并将结果返回给Apache，最终展示给用户。

##### 主要内容
- 构建mysql镜像
- 构建apache+php镜像
- 启动容器

#### 6.1 构建mysql镜像

MySQL是一款非常流行的开源关系型数据库，具有快速、可靠和易于使用的特点。本节将介绍如何通过Dockerfile构建mysql镜像。

##### 6.1.1 编写镜像Dockerfile

(1) 创建Dockerfile文件，并在文件开始位置添加描述信息：
```dockerfile
# 名称：容器化的MySQL
# 用途：用作后端数据持久化服务
# 创建时间：2015.01.20
```

(2) 定义基础镜像：
```dockerfile
FROM centos
```

(3) 声明维护者信息：
```dockerfile
MAINTAINER kaixin PI:EMAIL
```

(4) 定义工作目录：
```dockerfile
WORKDIR /root/
```

(5) 安装wget并下载MySQL源：
```dockerfile
RUN yum -y install wget
RUN wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm
RUN rpm -ivh /root/mysql-community-release-el7-5.noarch.rpm
```

(6) 安装MySQL服务：
```dockerfile
RUN yum -y install mysql-server
```

(7) 创建数据库：
```dockerfile
RUN mysql_install_db --user=mysql
```

(8) 通过环境变量指定MySQL用户名和密码：
```dockerfile
ENV MYSQL_USER test
ENV MYSQL_PASS mypassword
```

(9) 让容器支持中文：
```dockerfile
ENV LC_ALL en_US.UTF-8
```

(10) 建立数据库和表：
```dockerfile
ADD build_table.sh /root/build_table.sh
RUN chmod u+x /root/build_table.sh
RUN /root/build_table.sh
```

(11) 导出端口：
```dockerfile
EXPOSE 3306
```

(12) 定义默认的启动命令：
```dockerfile
ADD run.sh /root/run.sh
RUN chmod u+x /root/run.sh
CMD ["/root/run.sh"]
```

完整版的Dockerfile：
```dockerfile
# 名称：容器化的MySQL
# 用途：用作后端数据持久化服务
# 创建时间：2015.01.20
FROM centos
MAINTAINER kaixin PI:EMAIL
WORKDIR /root/

RUN yum -y install wget
RUN wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm
RUN rpm -ivh /root/mysql-community-release-el7-5.noarch.rpm
RUN yum -y install mysql-server
RUN mysql_install_db --user=mysql

ENV MYSQL_USER test
ENV MYSQL_PASS mypassword
ENV LC_ALL en_US.UTF-8

ADD build_table.sh /root/build_table.sh
RUN chmod u+x /root/build_table.sh
RUN /root/build_table.sh

EXPOSE 3306

ADD run.sh /root/run.sh
RUN chmod u+x /root/run.sh
CMD ["/root/run.sh"]
```

通过以上步骤，我们可以成功构建一个包含MySQL服务的Docker镜像。