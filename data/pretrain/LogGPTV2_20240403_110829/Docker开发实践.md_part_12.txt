root@B:~# cd .ssh
root@B:~/.ssh# ls
id_rsa id_rsa.pub
~/.ssh目录下的id_rsa.pub文件即为该主机上root用户的公钥，接下来我们需要将其添加到容器
系统内。
回到容器系统内部，在/root目录下创建.ssh目录，然后将允许远程登录到容器系统的用户的
公钥添加到authorized_keys文件中：
root@9598cb8e8f4a:/var/run# cd ~
root@9598cb8e8f4a:~# mkdir .ssh
root@9598cb8e8f4a:~# vi .ssh/authorized_keys
4. 制作SSH运行脚本
至此，公钥添加完毕。接下来，我们需要创建启动SSH服务的脚本run.sh，并为其添加执行
权限。由于容器启动时只能运行一个命令，所以一般把要启动的程序和服务都放在一个脚本中，
这样只要运行这个脚本就可以了。目前，虽然只有SSH服务一个程序，我们还是用统一的脚本来
处理。如下面的命令所示，第一行通过vi命令编辑启动脚本，第二行为刚才的脚本添加执行权限，
第三行向我们展示了脚本的内容：
5.1 基于commit命令的方式 69
root@9598cb8e8f4a:~# vi run.sh
1
root@9598cb8e8f4a:~# chmod u+x run.sh
root@9598cb8e8f4a:~# cat run.sh
#!/bin/bash
2
/usr/sbin/sshd -D
需要注意的是，脚本中的命令不能添加&，否则后面生成的镜像会出现问题。比如，如果脚
3
本是/usr/sbin/sshd –D &，则当容器以该脚本启动时，会立马执行完毕，相应的容器也就退出了，
这显然不是我们想要的，我们要SSH服务一直监听着。此处的-D参数用于告诉SSH服务不以守护
4
进程运行，而是和运行终端关联，有了关联终端，容器就不会退出。
最后，使用exit命令或者按ctrl+D组合键退出容器。 5
5. 提交生成镜像
6
使用docker commit命令将刚才的容器提交为一个新的镜像：
$ sudo docker commit 9598cb8e8f4a ssh:commit
7
9be5e20b8429fdf253ebe7826e7838f21468fcace7b8c3d61fbe5612efed79b0
使用docker images命令，可以查看我们新生成的镜像ssh: commit：
9
$ sudo docker images
REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE
ssh commit 9be5e20b8429 26 seconds ago 230.3 MB 8
6. 使用镜像
10
使用上面的新镜像启动容器，并用-p参数添加端口映射2022:22。22是容器SSH服务监听的端
口，2022是映射到主机的端口：
10
$ sudo docker run -d -p 2022:22 ssh:commit /root/run.sh
943315c382297af818a6d5b425303e541753913c587c928279bd355be9ecec43
11
容器启动成功后，可以使用docker ps命令查看我们的容器信息：
$ sudo docker ps 13
CONTAINER ID IMAGE COMMAND CREATED STATUS
PORTS NAMES
943315c38229 ssh:commit "/root/run.sh" About a minute ago Up 21 seconds 14
0.0.0.0:2022->22/tcp romantic_mestorf
7. 通过SSH登录容器
15
在B主机的root用户下，通过访问容器的宿主主机的2022端口登录容器：
16
$ ssh 192.168.199.231 -p 2022
The authenticity of host '[192.168.199.231]:2022 ([192.168.199.231]:2022)' can't be established.
ECDSA key fingerprint is f8:cc:7c:dd:bf:4e:d1:32:08:e3:11:0e:8c:0c:fd:e9.
Are you sure you want to continue connecting (yes/no)? yes 17
Warning: Permanently added '[192.168.199.231]:2022' (ECDSA) to the list of known hosts.
...
root@943315c38229：~# 18
70 第5章 创建SSH服务镜像
成功通过SSH登录到容器系统。
5.2 基于 Dockerfile 的方式
在第3章中，我们已经介绍过Dockerfile的基础知识，下面我们将基于Dockerfile的方式来创建
一个SSH服务的镜像。
1. 准备文件
创建一个存放生成镜像相关文件的工作目录：
$ mkdir ssh_dockerfile && cd ssh_dockerfile
在该目录下，需要创建3个文件：Dockerfile、run.sh和authorized_keys。Dockerfile用于构建镜
像，run.sh是启动SSH服务的脚本文件，authorized_keys则是包含需要远程登录的用户的公钥，例
如上一节中的B主机root用户的公钥。
run.sh脚本文件的内容如下：
#!/bin/bash
/usr/sbin/sshd -D
authorized_keys文件内容的生成方式和上一节一样：
$ ssh-keygen -t rsa
按回车选择默认的没有密码，此时会在当前用户目录下的.ssh目录中生成两个文件——id_rsa
和id_rsa.pub，其中后者就是我们要的公钥文件。将其内容加到authorized_keys文件中，具体为：
$ cat ~/.ssh/id-rsa.pub > authorized_keys
2. 编写Dockerfile
Dockerfile用于创建镜像，下面列出了最终的Dockerfile：
#使用的基础镜像
FROM ubuntu:14.04
#添加作者信息
MAINTAINER kaixin PI:EMAIL
#安装SSH服务
RUN apt-get install -y openssh-server
RUN mkdir -p /var/run/sshd
RUN mkdir -p /root/.ssh
#取消pam登录限制
RUN sed -ri 's/session required pam_loginuid.so/#session required pam_loginuid.so/g'
/etc/pam.d/sshd
#添加认证文件和启动脚本
ADD authorized_keys /root/.ssh/authorized_keys
RUN echo "#!/bin/bash" > /root/run.sh
RUN echo "/usr/sbin/sshd -D" >> /root/run.sh
5.2 基于Dockerfile的方式 71
RUN chmod u+x /root/run.sh
1
#导出端口
EXPOSE 22
#设置默认的启动命令
2
CMD ["/root/run.sh"]
Dockerfile文件内部的RUN操作和上一节的操作基本相同，只是这里使用的是官方的源，没有
3
添加源。
3. 创建镜像 4
运行docker build目录，生成我们的目标镜像：
5
$ sudo docker build ./
Sending build context to Docker daemon 3.072 kB
Sending build context to Docker daemon 6
Step 0 : FROM ubuntu
---> 8eaa4ff06b53
Step 1 : MAINTAINER kaixin PI:EMAIL 7
---> Running in b2cfe2c1acf9
---> f40d6891324a
... 9
Step 11 : CMD /root/run.sh
---> Running in a8abe336cc23
---> 9c9743f2d33a 8
Removing intermediate container a8abe336cc23
Successfully built 9c9743f2d33a
10
看到最后的Successfully built，就表明镜像成功生成了，其中9c9743f2d33a是我们的镜像ID。
使用docker images命令查看本地镜像，可以看到我们生成的镜像，相关代码如下：
10
$ sudo docker images
REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE
11
ssh dockerfile 9c9743f2d33a 3 minutes ago 230.3 MB
ssh commit 9be5e20b8429 53 minutes ago 230.3 MB
13
其中ssh:dockerfile就是我们刚刚通过Dockerfile构建的镜像。现在启动它：
$ sudo docker run -d -p 2023:22 ssh:dockerfile /root/run.sh
14
然后新开启一个终端并将其连接到容器：
15
$ ssh 192.168.199.231 -p 2022
现在，我们通过两种方式实现了SSH，此时就可以通过远程机器来创建镜像或者对容器进行
16
维护。我们可以以生成的SSH镜像为基础来构建新的镜像，如果使用Dockerfile的话，只要把SSH
的Dockerfile加进去就可以了。
17
18
72 第6章 综合案例1：Apache+PHP+MySQL
第 6 章
综合案例1：
Apache+PHP+MySQL
本章是一个综合案例，这里将使用前面的知识，在基础镜像centos的基础上，搭建一个基于
Apache、PHP和MySQL的Web应用。通过本章的案例，可以很好地巩固前面所学的基础知识，特
别是Dockerfile的编写、多容器的应用等知识点。
图6-1是本案例容器的部署架构，其中包含两个容器：Web容器和数据库容器。Web容器运行
着Apache和PHP服务，并包含PHP页面。数据库容器运行MySQL服务，保存应用的数据。Web容
器需要使用数据库容器提供的服务，Web容器内的PHP页面将根据需求，访问数据库容器提供的
数据，并将结果返回给Apache，最终展示给用户。
图6-1 Apache+PHP+MySQL容器架构
本章内容主要包含：
 构建mysql镜像。通过Dockerfile来构建镜像，并将其上传到Docker Hub中。
 构建apache+php镜像。
 启动容器。
6.1 构建 mysql 镜像
MySQL是一款非常流行的开源关系型数据库，由于它具有快速、可靠和易于使用的特点，
很多软件公司的数据都用它进行存储。MySQL能够运行在不同的系统平台之上，并且支持C、
6.1 构建mysql镜像 73
C++、Eiffel、Java、Perl、PHP、Python、Ruby和Tcl等编程语言的API ，其官网地址为 1
http://www.mysql.com/。本节将介绍如何通过Dockerfile构建mysql镜像。
2
6.1.1 编写镜像Dockerfile
3
本章的镜像都是基于基础镜像centos构建的，这里我将详细列出每一个步骤，并做出必要的
解释。在实际应用中，我们也可以选择将Docker Hub上已有的容器作为开发的基础。
4
(1) 创建Dockerfile文件，并且在文件开始位置添加使用#注释的描述信息：
# 名称：容器化的MySQL 5
# 用途：用作后端数据持久化服务
# 创建时间：2015.01.20
6
这些注释的描述信息并不是必需的，但是我们推荐写上，这样方便其他使用者了解我们的容
器以及后期的维护、更新。
7
(2) 新建的镜像必须要有一个镜像作为开发的基础。这里，定义我们使用的基础镜像：
9
FROM centos
(3) 声明维护者信息：
8
MAINTAINER kaixin PI:EMAIL
(4)定义工作目录： 10
WORKDIR /root/
10
(5) 我们使用的CentOS是CentOS 7，默认并没有包含MySQL的源，所以要下载MySQL的源并
安装它。先安装一个下载工具wget，然后再用wget来下载MySQL的源，最后将源安装到我们的系
11
统上。由于在构建镜像的过程中没法交互，所以要在Dockerfile里使用-y参数，使每个需要确定
的地方都选择Yes：
13
RUN yum -y install wget
RUN wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm 14
RUN rpm -ivh /root/mysql-community-release-el7-5.noarch.rpm
(6) 安装MySQL服务。这里使用yum安装MySQL：
15
RUN yum -y install mysql-server
16
安装好MySQL后，默认并没有建立数据库，需要使用mysql_install_db创建一个数据库：
RUN mysql_install_db --user=mysql
17
这里的数据库指的是数据库文件，MySQL保存所有数据的磁盘文件。后面的--user参数指定
使用数据库的用户名，此处为mysql，该用户在MySQL服务安装完后在系统中被创建。从原理上 18
74 第6章 综合案例1：Apache+PHP+MySQL
来说，也可以设置为--user=root，但一般不这么做，这是因为root用户的权限高于其他用户，会
导致其他用户用不了MySQL服务。需要说明的是，此处的user用户指的是数据库物理文件的拥有
者，而不是下面步骤中连接到数据库对数据库进行操作的用户，这点要区分清楚。
(7) 通过环境变量指定mysql使用的用户名和密码。MySQL拥有一个默认的用户root，但root
用户默认只能在本地访问，所以这里定义了一个额外的用户test：
ENV MYSQL_USER test
ENV MYSQL_PASS mypassword
除了在Dockerfile中通过ENV来设置环境变量外，也可以在启动的时候通过-e参数进行设置。
(8) 让容器支持中文，centos容器默认是不支持中文的：
ENV LC_ALL en_US.UTF-8
(9) 建立数据库和表。目前，我们的数据库还是空的，里面没有数据，这里我用一个脚本来
建立数据库和相关表：
ADD build_table.sh /root/build_table.sh
RUN chmod u+x /root/build_table.sh
RUN /root/build_table.sh
其中build_table.sh脚本的内容稍后给出。
(10) 导出3306端口（这是MySQL使用的端口），以使外部可以访问它：
EXPOSE 3306
(11) 定义默认的启动命令，这里使用一个脚本来启动mysql：
ADD run.sh /root/run.sh
RUN chmod u+x /root/run.sh
CMD /root/run.sh
其中run.sh的内容稍后给出。
以下是完整版的Dockerfile：
# 名称：容器化的MySQL
# 用途：用作后端数据持久化服务
# 创建时间：2015.01.20
FROM centos
MAINTAINER kaixin PI:EMAIL
WORKDIR /root/
RUN yum -y install wget
RUN wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm
RUN rpm -ivh /root/mysql-community-release-el7-5.noarch.rpm
RUN yum -y install mysql-server
RUN mysql_install_db --user=mysql