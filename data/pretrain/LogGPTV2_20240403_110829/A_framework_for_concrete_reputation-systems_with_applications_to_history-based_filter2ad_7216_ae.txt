### 5. 复杂度分析

我们提出的算法在量化符数量 \( n \) 方面的时间复杂度具有实际意义，因为许多有用的策略只包含少量的量化符。对于任意历史 \( h \)，\( Ph \) 表示在 \( h \) 中出现的不同参数的有限集合。要求所有变量类型相同是为了简化表述，并非必要条件。

**定理 5.1 (复杂度界)**：设公式 \(\phi\) 为
\[ Q_1 x_1 Q_2 x_2 \cdots Q_n x_n: \phi_0 \]
其中 \( Q_i \) 是量化符，\( x_i \) 是类型为 \( P \) 的变量，\(\phi_0\) 是不含量化符的公式，且其自由变量集为 \(\{x_1, \ldots, x_n\}\)。令 \(\sigma\) 和 \( |Ph| \) 分别表示历史 \( h \in C_0 \) 中参数出现的次数和不同参数的数量。基于约束的动态模型检测算法具有以下复杂度：

- \( DMC :check() \) 的时间复杂度为 \( O(1) \)。
- \( DMC :new() \) 的时间复杂度为 \( O(|\phi| \cdot (|Ph| + 1)^n) \)。
- 当 \( p \in Ph \) 且 \( K \) 为当前历史 \( h \) 中活跃配置的数量时，\( DMC :update(e, p, i) \) 的时间复杂度为
  \[ O((K - i + 1) \cdot |\phi| \cdot (|Ph| + 1)^n) \]
- 当 \( p \notin Ph \) 且 \( K \) 为当前历史 \( h \) 中活跃配置的数量时，\( DMC :update(e, p, i) \) 的时间复杂度为
  \[ O((K - i + 1) \cdot |\phi| \cdot (|Ph| + 2)^n) \]

此外，如果事件集用位向量表示，DS' 的空间复杂度为
\[ O(K \cdot (|E| + |\phi| \cdot (|Ph| + 1)^n)) \]

### 6. 结论

我们的声誉系统方法与现有大多数系统不同之处在于，声誉信息具有精确的语义，并以具体形式表示。我们认为，我们的方法的新颖之处在于，实例系统可以提供一种形式化的、可验证的安全保证，尽管是非标准的，这些保证将当前授权与过去行为的具体属性联系起来。我们提出了一种声明性语言来指定这种安全属性，并且我们的技术应用范围超越了传统的声誉系统领域，能够形式化解释几种现有的基于“历史”的访问控制方法。

我们提出了两种高效的动态模型检测算法，支持在计算和存储资源有限的设备上运行我们的框架；这一特性在全球计算环境中非常有用。特别是值得注意的是，主体不需要存储其整个交互历史，只需存储所谓的活跃会话。

我们的时态逻辑中的时间概念基于会话开始的时间。更具体地说，我们的模型是局部交互历史 \( h = x_1 x_2 \cdots x_n \)，其中 \( x_i \in CES \)，会话的顺序反映了相应交互协议启动的顺序，即 \( x_i \) 指的是第 \( i \) 个启动会话中观察到的事件。也可以考虑不同的时间概念，例如，如果 \( x_i \) 在序列 \( h \) 中先于 \( x_j \)，则意味着 \( x_j \) 更新得比 \( x_i \) 更近（我们的算法可以很容易地适应这种时间概念）。

### 相关工作

文献中已经提出了许多基于声誉的系统（Jøsang 等人 [15] 提供了许多参考文献），因此我们仅提及一些典型的例子和相关系统。Kamvar 等人提出了 EigenTrust [16]，Shmatikov 和 Talcott 提出了基于许可的框架 [27]，欧盟项目“SECURE”[4, 5]（也使用事件结构来建模观测）可以被视为一个基于声誉的系统。

Shmatikov 和 Talcott 的框架最为相关，因为他们也采用了行为信息的具体表示（“证据”[27]）。然而，他们的表示不如事件结构框架复杂（例如，历史是时间戳事件的集合，没有会话的概念，即逻辑连接的事件集合），并且他们的声誉概念基于实体过去履行所谓许可的能力。许可是发行人和被许可人之间的合同，比交互策略更为通用，因为它们是双方之间的合同，可能允许被许可人执行某些操作，也可能要求执行某些操作。该框架没有特定领域的语言来指定许可（即用于指定许可方法的允许和违反），并且声誉信息的使用不是其正式框架的一部分（即应用程序程序员需要编写 useOk 方法来保护资源）。我们认为我们的框架与其框架是兼容而非竞争的。我们可以想象使用类似我们的策略语言作为特定领域的语言来指定许可和使用策略。我们认为，由于我们的声明性策略语言简单且具有形式语义，这将有助于验证和其他推理。

Pucella 和 Weissman 使用纯未来线性时态逻辑的变体来推理许可 [23]。他们并不关心许可的具体细节，而只是要求许可具有基于轨迹的语义；特别是，他们的逻辑适用于正则语言的许可。由于我们的基本策略可以从语义上看作正则语言（定理 4.2），并且策略可以看作是一种许可，因此可以想象使用他们的逻辑来推理我们的策略。

Roger 和 Goubault-Larrecq [25] 使用线性时态逻辑及其相关的模型检测算法进行日志审计。尽管他们的应用有所不同，但这项工作仍然相关。虽然他们的逻辑从某种意义上说是带有变量的一阶逻辑，但他们没有显式的量化。我们的量化语言（除了是纯过去的而不是纯未来的）的不同之处在于我们允许显式量化（针对不同的参数类型）\(\forall x : P_i: \phi\) 和 \(\exists x : P_i: \phi\)，而他们的语言是隐式全称量化的。

Schneider [26] 引入的安全自动机概念与我们的策略语言相关。安全自动机与程序并行运行，监控其执行是否符合安全策略。如果自动机检测到程序即将违反策略，它将终止程序。策略以自动机的形式给出，并支持一种（非声明性的）特定领域语言来定义安全自动机（SAL），但已被发现不便于策略规范 [10]。可以将我们在基于自动机的算法中的有限自动机视为一种由时态逻辑公式声明性指定的安全自动机。

从技术角度来看，安全自动机还与基于历史的访问控制（HBAC）概念相关 [11]。HBAC 已经成为大量研究的主题（例如，论文 [1, 9, 11, 12, 26, 29]）。动态 HBAC 与静态 HBAC 之间存在区别：在动态 HBAC 中，程序在执行过程中被监控，如果即将违反策略则被终止 [9, 11, 12, 26]；而在静态 HBAC 中，对用预定语言编写的程序进行初步的静态分析，提取程序运行时行为的安全近似，并静态检查该近似是否始终符合策略（例如，使用类型系统或模型检测）[1, 29]。显然，我们的方法可以应用于动态 HBAC。值得注意的是，动态 HBAC 中的许多临时优化（例如，Edjlali 系统 [9] 中相对于策略的历史摘要）可以通过使用基于自动机的算法并利用有限自动机最小化定理以一种通用且最优的方式捕获。因此，在基于自动机的算法中，可以“免费”获得那些原本需要手动发现的优化。

### 参考文献

[略去参考文献部分，保持原文格式]