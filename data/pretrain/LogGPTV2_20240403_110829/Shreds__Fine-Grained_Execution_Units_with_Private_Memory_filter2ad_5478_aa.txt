title:Shreds: Fine-Grained Execution Units with Private Memory
author:Yaohui Chen and
Sebassujeen Reymondjohnson and
Zhichuang Sun and
Long Lu
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
Shreds: Fine-grained Execution Units with Private Memory
Yaohui Chen
Sebassujeen Reymondjohnson
Zhichuang Sun
Long Lu
Department of Computer Science
{yaohchen, sreymondjohn, zhisun, long}@cs.stonybrook.edu
Stony Brook University
Abstract—Once attackers have injected code into a victim
program’s address space, or found a memory disclosure vulner-
ability, all sensitive data and code inside that address space are
subject to thefts or manipulation. Unfortunately, this broad type
of attack is hard to prevent, even if software developers wish to
cooperate, mostly because the conventional memory protection
only works at process level and previously proposed in-process
memory isolation methods are not practical for wide adoption.
We propose shreds, a set of OS-backed programming primi-
tives that addresses developers’ currently unmet needs for ﬁne-
grained, convenient, and efﬁcient protection of sensitive memory
content against in-process adversaries. A shred can be viewed as
a ﬂexibly deﬁned segment of a thread execution (hence the name).
Each shred is associated with a protected memory pool, which
is accessible only to code running in the shred. Unlike previous
works, shreds offer in-process private memory without relying on
separate page tables, nested paging, or even modiﬁed hardware.
Plus, shreds provide the essential data ﬂow and control ﬂow
guarantees for running sensitive code. We have built the compiler
toolchain and the OS module that together enable shreds on
Linux. We demonstrated the usage of shreds and evaluated their
performance using 5 non-trivial open source software, including
OpenSSH and Lighttpd. The results show that shreds are fairly
easy to use and incur low runtime overhead (4.67%).
I. INTRODUCTION
Many attacks on software aim at accessing sensitive content
including secret data (e.g.,
in victim programs’ memory,
crypto keys and user passwords) and critical code (e.g., private
APIs and privileged functions). To achieve the goal, such
attacks succeed as soon as they manage to execute code in
target programs’ process context, which is usually achieved via
remote exploitations or malicious libraries. For instance, the
HeartBleed attack on OpenSSL-equipped software reads pri-
vate keys by exploiting a memory disclosure vulnerability [1];
the malicious libraries found in mobile apps covertly invoke
private framework APIs to steal user data [2]. Obviously, this
whole class of attacks cannot succeed if target programs are
able to protect its sensitive data and code against hostile code
running in the same process, such as injected shellcode and
malicious libraries. We generally refer to this class of attacks
as in-process abuse.
Developers are virtually helpless when it comes to pre-
venting in-process abuse in their programs, due to a lack of
support from underlying operating systems (OS): the memory
isolation mechanisms provided by modern OS operate merely
at the process level and cannot be used to establish security
boundaries inside a process. As a result, protecting sensi-
tive memory content against malicious code inside the same
process remains an open issue, which has been increasingly
exploited by attackers.
To address this open issue, some recent work proposed the
thread-level memory isolation [3], which allows developers
to limit the sharing of a thread’s memory space with other
threads in the same process. However, this line of works faces
three major limitations. First, thread-level memory isolation is
still too coarse to stop in-process abuse because exploitable or
malicious code often run in the same thread as the legitimate
code that needs to access sensitive memory content. Sec-
ond, adopting these solutions requires signiﬁcant efforts from
developers. Separating application components into different
threads (i.e., scheduling units) demands major design changes,
as opposed to regional code patches, to deal with the added
concurrency. Third,
threads with private memory tend to
incur much higher overhead than normal threads due to the
additional page table switches, TLB ﬂushes, or nested page
table management upon context switches. We aim to tackle
these challenges by proposing a practical and effective system
to realize in-process private memory.
In this paper, we present a new execution unit for user-
space code, namely shred, which represents an arbitrarily
sized segment of a thread (hence the name) and is granted
exclusive access to a protected memory pool, namely shred-
private pool (or s-pool). Figure 1 depicts shreds in relation
to the conventional execution units. Upon its creation, a
shred is associated an s-pool, which can be shared among
multiple shreds. Shreds address developers’ currently unmet
needs for ﬁne-grained, convenient, and efﬁcient protection of
sensitive memory content against in-process adversaries. To
prevent sensitive content in memory from in-process abuse,
a developer includes into a shred the code that needs access
to the sensitive content and stores the content in the shred’s
s-pool. For instance, an encryption function can run in a shred
with the secret keys stored in the s-pool; a routine allowed to
call a private API can run in a shred whose s-pool contains
the API code.
We design shreds under a realistically adversarial threat
model. We assume attackers may have successfully com-
promised a victim program, via either remote exploitation
or malicious local libraries. Attackers’ goal is to access the
sensitive content, including both data and code, in the victim
program’s virtual memory space. Further, we expect unknown
vulnerabilities to exist inside shreds (e.g., control ﬂow hijacks
and data leaks are possible). On the other hand, we assume a
clean OS, which serves as the TCB for shreds. The assumption
2375-1207/16 $31.00 © 2016 IEEE
© 2016, Yaohui Chen. Under license to IEEE.
DOI 10.1109/SP.2016.12
DOI 10.1109/SP.2016.12
56
56
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:17:20 UTC from IEEE Xplore.  Restrictions apply. 
A process
Threads
Shreds
Fig. 1: Shreds, threads, and a process
is reasonable because the attacks that shreds aim to prevent,
in-process abuse, would become unnecessary had attackers
already subverted the OS. In fact, we advocate that, future
OS should support shreds, or more generally, enable private
memory for execution units of smaller granularities than the
scheduling units.
We realize the concept of shreds by designing and building:
(i) a set of easy-to-use APIs for developers to use shreds
and s-pools; (ii) a compilation toolchain, called S-compiler,
automatically verifying, instrumenting, and building programs
using shreds; (iii) a loadable kernel extension, called S-driver,
enabling the support and protection of shreds on commodity
OS. Figure 2 shows an overview of the entire system and
the workﬂow. A developer creates a shred and associates it
with a selected s-pool by calling the shred enter API and
supplying the s-pool descriptor as the argument. Code inside
a shred may access content in the associated s-pool as if it
were a normal region in the virtual memory space. But the s-
pool is inaccessible outside of the associated shred(s). S-pools
are managed and protected by S-driver in a way oblivious to
developers or applications. With the help of use-deﬁne chain
analysis on labeled sensitive variables, shreds can also be
created automatically at compile time.
As shown in Figure 2, while compiling programs that use
shreds, S-compiler automatically veriﬁes the safe usage of
shreds and instruments in-shred code with inline checks. The
veriﬁcation and instrumentation regulate sensitive data propa-
gation and control ﬂows inside shreds so that unknown vul-
nerabilities inside shreds cannot lead to secret leaks or shred
hijacking. During runtime, S-driver serves as the manager for
s-pools and the security monitor for executing shreds. It creates
and resizes s-pools on demand. It enables a per-CPU locking
mechanism on s-pools and ensures that only authorized shreds
may access s-pools despite concurrent threads.
S-driver leverages an under-exploited CPU feature, namely
ARM memory domains [4], to efﬁciently realize s-pools and
enforce shred-based access control. Unlike the previously
proposed thread-level memory isolations, our approach neither
requires separate page tables nor causes additional page table
switches or full TLB ﬂushes. Our approach also avoids the
need for a hypervisor or additional levels of address translates
(e.g., nested paging). Although our reference design and
implementation of s-pools are based on ARM CPUs, they
are compatible with future x86 architectures, which will be
equipped with a feature similar to memory domain [5], [6].
Shreds have the following key advantages:
• Shreds are ﬁne-grained. Depending on developers’ needs,
the scope of a shred can range from a few lines of code to
an entire thread, enabling private memory for execution
units of various sizes.
• Shreds are convenient to use. Unlike splitting programs
to processes or threads, creating shreds does not require
major software redesigns to deal with concurrency, syn-
chronization, memory sharing, etc.
• Shreds are efﬁcient. They introduce neither additional
process or thread switches nor scheduling constraints.
We implement S-compiler based on LLVM [7] and S-
driver as a kernel module for Linux. We evaluate shreds’
compatibility and the ease of adoption by manually retroﬁtting
shreds into 5 non-trivial open source software,
including
OpenSSL and Lighttpd. We show that developers can easily
adopt shreds in their code without design-level changes or
sacriﬁce of functionality. Our evaluation shows that shreds
incurs an average end-to-end overhead of 4.67%. We also
conduct security analysis on shreds, conﬁrming that possible
attacks allowed in our thread model are prevented. Overall,
our results indicate that shreds can be easily adopted in
real software for ﬁne-grained protection of sensitive memory
content while incurring very low overhead.
In summary, our work makes the following contributions:
• We identify and address the open challenges facing
the previously proposed in-process memory protection,
which suffer from rigid granularity, difﬁcult adoption, and
high overhead.
• We propose a new OS primitive, namely shred, which
represents an arbitrary fragment of a user-space thread
execution. Code running inside a shred has access to the
shred’s private memory pool where sensitive data and
code can be stored.
• We build and evaluate the compiler toolchain and the
OS module for realizing shreds and assisting the use
of shreds. We show that shreds are ﬁne-grained, easily
adoptable, and efﬁcient.
• We demonstrate the use cases of shreds in 5 nontrivial
open source software, including OpenSSL and lighthttpd.
We also evaluate the performance of shreds in these
software.
The rest of the paper is organized as follows: in § II we lay
out the background of in-process memory abuse and the exist-
5757
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:17:20 UTC from IEEE Xplore.  Restrictions apply. 
…
int enc(x) {
…
shred_enter(P1);
// encryption 
// logic
shred_exit();
…
}
…
Shred Property 
Veriﬁcation
Code
Instrumentation
S-compiler
Thread 1
Thread 2
shred_enter
(P1);
shred_exit();
shred_enter
(P1);
shred_exit();
shred_enter
(P2);
shred_exit();
……
S-pool: P1
S-pool: P2
Process
Proc Memory Space
Loader
S-pool 
manager
Security 
monitor
S-driver
Development and Build
Runtime
Fig. 2: Developers create shreds in their programs via the intuitive APIs and build the programs using S-compiler, which
automatically veriﬁes and instruments the executables (left); during runtime (right), S-driver handles shred entrances and exits
on each CPU/thread while efﬁciently granting or revoking each CPU’s access to the s-pools.
ing solutions; we also derive the fundamental requirements for
an ideal solution. In § III we discuss the design of our proposed
system, comprising s-compiler and s-driver. We also explain
in details the security properties of shreds and s-pools and
how these properties are enforced. The implementation details
of s-compiler and s-driver are outlined in § IV respectively.
We then examine the security of our system and evaluate its
performance in § V. We contrast the related work in § VI and
conclude the paper in § VII.
II. BACKGROUND
A. In-process Abuse of Memory Content
Ranging from data theft to privilege escalation, a variety
of user-space attacks,
launched either remotely or locally,
can succeed because they can freely access (or abuse) target
programs’ memory content once they have penetrated into
targets’ process context.
Stealing secret data: Via either injected shellcode or planted
malicious libraries, attackers may obtain unchecked access
to victim processes’ memory, and in turn, exﬁltrate cleart-
ext secrets. Moreover, data thefts may happen without code
injection if memory disclosure vulnerabilities exist in target
programs. Such attacks are often seen in both network-facing
programs and mobile apps. The former, including web servers
and browsers, is often prone to remote secret thefts (e.g.,
the Heartbleed bug) whereas the latter tends to contain many
untrusted libraries (e.g., advertisement and analytics).
Executing private code: Malicious code injected into a victim
process can freely execute the code loaded in the memory
space, including private and privileged functions that are only
intended for a few pieces of code in the same process. For
instance, dlopen is a private API on iOS and is not allowed
to be directly called by apps. However, since iOS runtime
always loads dlopen and other private APIs inside every app
process, malicious apps can stealthily invoke these system-
reserved APIs to escalate privileges or bypass security checks.
Mining memory: In-process malicious code may silently
scan the entire user-space memory for private data, such
as passwords, credit card numbers, and sensitive logs. For
instance, memory-scrapping code are found inside almost all
the recent attacks on POS (Point of Sale) machines. Memory
scrapers are also used for illegally identifying and tracking
users.
Despite their different goals, the aforementioned attacks
all hinge on the same capability to succeed—access to data
or code that belong to other components (e.g., functions,
modules, libraries, etc.) executing in the same process context.
We refer to this essential attacking capability as in-process
memory abuse.
In light of the surging issue of in-process memory abuse
and the lack of effective defense, it becomes obvious that new
memory protection mechanisms are much needed to protect