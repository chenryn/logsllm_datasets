& knows(sign(E1, E2)) ) ) )).
input_formula(construct_message_2,axiom,(
! [E1,E2] :
(
=> (
knows(conc(E1, E2))
knows(E1)
& knows(E2) ) ) )).
Figure 3. Some general crypto axioms
on interaction rather than computation), this
is achieved in an approximate way by ﬁxing a
natural number n (supplied by the user of the
approach) and unfolding all cycles up to the
transition path length n. The resulting logical
formula is closed by forall-quantiﬁcation over
all free variables contained.
Step 3 The formulas deﬁned above are writ-
ten into the TPTP ﬁle as axioms. This means
that the theorem prover will take these for-
mulas as given. The security requirement
to be checked is written into the TPTP ﬁle
as a conjecture. For example, this could be
knows(secret) in case the secrecy of the value
secret is to be checked. For authenticity prop-
erties, one needs to insert additional corre-
spondence assertions in the formulas deﬁned
above at places which are bound by the gener-
ation and veriﬁcation of an authentication cer-
tiﬁcate. The theorem prover will then check
whether the conjecture is derivable from the
axioms.
In the case of secrecy, the result is
interpreted as follows: If knows(secret) can be
derived from the axioms, this means that the
adversary may potentially get to know secret.
If the theorem prover returns that it is not
possible to derive knows(secret) from the ax-
ioms, this means that the adversary will not
get secret.
Note that the adversary knowledge set is ap-
proximated from above (because one abstracts
away for example from the message sender and
receiver identities). This means that one will
ﬁnd all possible attacks, but one may also en-
counter “false alarms”. However, this has not
so far happened with practical examples, and
the treatment turns out to be rather eﬃcient.
Note also that due to the undecidability of
ﬁrst-order logic, one may not always be able
to establish automatically that the adversary
does not get to know a certain data value, but
the theorem prover may execute without ter-
mination or may break up because resources
are exceeded. In our practical applications of
our method, this limitation has, however, not
yet become observable.
Step 4 In case the result is that there may
be an attack, in order to ﬁx the ﬂaw in the
code, it would be helpful to retrieve the at-
tack trace. Since theorem provers such as e-
SETHEO are highly optimized for performance
by using abstract derivations, it is not trivial
to extract this information. Therefore, we also
implemented a tool which transforms the log-
ical formulas explained above to Prolog. The
translation from the logical formulas to Pro-
tolog is quite direct, so that no discrepancies
can be expected. While the analysis in Prolog
is not useful to establish whether there is an
attack in the ﬁrst place (because it is in order
of magnitudes slower than using e-SETHEO
and in general there are termination problems
with its depth-ﬁrst search algorithm), Prolog
works ﬁne in the case where one already knows
that there is an attack, and it only needs to be
shown explicitly (because it explicitly assigned
values to variables during its search, which can
then be queried).
3 Case-Study
In this section, we would like to report on
experiences gained when applying our veriﬁ-
cation tools in an industrial research and de-
velopment project. Our goal is to demonstrate
that our method is applicable to industrial-size
systems. Additionally, we would like to point
out some pitfalls one could face when design-
ing biometric authentication systems. As ex-
plained in the introduction, for conﬁdentiality
reasons we choose not to present the actual sys-
tem developed in the project, but a protocol we
deﬁned ourselves on the basis of openly avail-
able information such as [VB03].
Following [VB03], the goal is the correct de-
velopment of a security-critical biometric au-
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:12:51 UTC from IEEE Xplore.  Restrictions apply. 
4
thentication system which is supposed to con-
trol access to a protected resource, for example
by opening a door or letting someone log into
a computer system.
In the system proposed
in [VB03], a user carries his biometric refer-
ence data on a personal smart-card. To gain
access, he inserts the smart-card in the card
reader and delivers a fresh biometric sample
at the biometric sensor, for example a ﬁnger-
print reader. Since the communication links
between the host system (containing the bio-
sensor), the card reader, and the smart-card
are physically vulnerable, the system needs to
make use of a cryptographic protocol to pro-
tect this communication. Because the correct
design of such protocols and the correct use
within the surrounding system is very diﬃcult,
we used our method to support the develop-
ment of the biometric authentication system.
To generate a FOL formula to be analyzed,
one needs to consider the level of security pro-
vided by the physical layer of the system, and
formulate security goals on the execution of the
system and on the protection of particular data
values. Then the security of the protocol is an-
alyzed using the automated tool support de-
scribed in the previous section. This is done
with respect to the threat model which is de-
rived from the information about the physical
security of the system and the security goals,
as explained in the previous section.
Inspired by [VB03], our authentication pro-
tocol, is based on a variant of the SSL authen-
tication protocol. A high-level speciﬁcation of
the control ﬂow in the biometric authentication
system is given in Fig. 4. The system com-
ponents are the smart-card, the host system
and the biosensor. The smart-card is personal-
ized for each user. To prevent an attack where
an attacker simply repeatedly tries to match a
forged biometric sample, for example, using an
artiﬁcial ﬁnger, with a forged or stolen smart-
card, the protocol contains a misuse counter
which is decreased from an initial value of 3 to
0, when the card will be disabled. The data
stored on the card includes the card identi-
ﬁer, the misuse counter, the biometric refer-
ence data, a corresponding signature and a key
shared with the host system. The host system
determines whether the identity of the user can
be veriﬁed given the biometric reference data
on the card and he should thus be granted ac-
cess.
User
Smart card
Host system
Start protocol
Authenticate
host
Create key
Signature
Reference
template
Authenticate
card
Create key
Verify signature
Request biodata
Biometry
sensor
Scan biodata
Insert card
Present
biodata
Retrieve
card
Biometric data
Extract template
Template
Compare
Access decision
Figure 4. Biometric authentication
To adapt the handshake part of the SSL au-
thentication protocol to the present setting, we
ﬁrstly need to account for the fact that com-
munication with a smart-card generally hap-
pens in the way that the host system sends
a message to the smart-card which is an-
swered by a message back from the smart-
card. Thus in the ﬁrst messages, based on
the SSL ClientHello, the card is reset and
asked for its ID which the host stores in a
variable. Then, following the SSL protocol,
the host and smart-card exchange the ran-
dom numbers ClientHello.random and Server-
Hello.random and their certiﬁcates with which
they perform a bidirectional authentication.
The biometric authentication is then started
with the exchange of the next messages. First,
the session key is generated at the smart-card
and sent to the host. The conﬁdentiality and
integrity of the communication is protected
using encryption and MAC using a shared
key. Next, the current value of the misuse
counter is retrieved from the smart-card.
If
it is larger than 0, it is decremented at the
host and the decremented value is sent back
to the smart-card. The smart-card is then
queried again for the new value of its mis-
use counter to see whether it actually stored
the decremented value. The integrity of the
last messages starting with the retrieval of the
misuse counter from the card (including the
message names) is protected using MACs us-
ing the session key. Then, the biometric ref-
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:12:51 UTC from IEEE Xplore.  Restrictions apply. 
5
erence data is retrieved from the smart-card
which is signed with the private administrator
key that was created when personalizing the
smart-card. After that, the current data is re-
quested from the biosensor and compared with
the reference data. The user has up to three
attempts to present a biometric sample which
is accepted as valid (deﬁned as the degree of
coincidence between sample and reference be-
ing above the given threshold). If the biometric
match is successful, the misuse counter is sent
to the default value and the session closed.
For space restrictions, we can only show the
main call graph node of the code abstraction
from the smart-card side of the protocol in
Fig. 5 and one of the message exchanges in
Fig. 6.
4 Security Analysis
The threat scenario which we consider here
is that the adversary somehow obtains posses-
sion of a legitimate smart-card and can ma-
nipulate the communication link between the
smart-card reader and the host system, since
it is not assumed to be physically secure.
We have to assume that the adversary can
use diﬀerent (sequential or parallel) executions
of the protocol in his attack (with the same
or diﬀerent smart-cards or hosts). This can
be achieved by parameterizing the FOL for-
mula generated from the protcol description
using a session parameter, using variables for
the smart-card, biosensor, and host names, and
closing the open formula obtained with a for-all
quantiﬁcation over these parameters.
We have to verify that the protocol provides
the intended security guarantees, in particu-
lar, that the misuse counter indeed registers
any failed attempt to present a false biometric
sample to the biosensor. Here we focus on this
security requirement, which turned out to be
particularly interesting in the case of the given
protocol.
We note that each possible instantiation of
the message argument variables in the formula
corresponds to one execution of the protocol,
assuming that each protocol participant ac-
cepts only one copy of a given protocol message
per protocol execution (and ignores a second
message with the same message name).
Note that an automated theorem prover
such as SPASS or E-SETHEO considers every
Figure 5. Main graph node
possible model satisfying the given axioms to
see whether it satisﬁes the given conjecture,
not only the quotients of the free algebra un-
der the formula (as Prolog does). This means
that in the models considered, additional prop-
erties not following from the given axioms may
hold. In the case of cryptographic protocols,
this may mean that a secret key coincides with
a public value and therefore becomes known
to the adversary. This is of course something
which one would assume an implementation of
the protocol to avoid, and therefore one would
like to analyze the protocol under the assump-
tion that this does not happen. Therefore, we
formulate the conjecture in a negated way so
that a proof of the conjecture corresponds to
an attack, and the absence of a proof (equiva-
lently, by soundness and completeness of FOL,
a counter-example to the formula) corresponds
to the security of the protocol. This makes
sure that, when considering a given protocol
execution (i.e., a given instantiation of the mes-
sage variables), all models of the formulas have
6
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:12:51 UTC from IEEE Xplore.  Restrictions apply. 
Figure 6. sc h xchk 6 message (abstraction)
to fulﬁll the attack conjecture in order for an
attack to be detected, in particular also any
model of the formula which does not satisfy any
equalities that would be assumed not to hold in
an implementation of the protocol (for exam-
ple, between a secret key and a public value).
That way, false positives arising in this way can
be avoided.
We would like to ensure that in each ex-
ecution of the protocol in which the biomet-
ric match is performed, the misuse counter
is decremented.
The security conjecture
is
formulated by inserting the predicate
match performed in the protocol where the
biometric match is performed and predicate
fbz2written where the decremented misuse
counter has been written to the smart-card.
To formulate the security conjecture (where ˜
represents logical negation), we assume that in
the protocol session between the card and the
host which is uniquely determined by the value
of the session counters and the messages ex-
changed in that session (which are given as ar-
guments to the predicates but left out here for
readability), the misuse counter is not decre-
mented, but the biometric match is still per-
formed:
~fbz2written&& match_performed
If this conjecture is found to be provable
from the axioms, that means that in any pos-
sible run of the protocol, the adversary can
make the host system perform the biomet-
ric match without decrementing the misuse
counter. This would break the security func-
tion of the misuse counter.
When applying this analysis to our imple-
mentation, this turned out to be in fact true.
This means, in all models satisfying the set af
axioms generated from the protocol description
(or equivalently, in the quotient model which
satisies only those formulas which follow from
the axioms and which is therefore not “degen-
erated”), there exists a protocol execution in
which the adversary sends certain messages to
the protocol participants, so that the biomet-
ric match is performed, although the misuse
counter is not decremented. Thus, the mis-
use counter does not fulﬁll its purpose and the
protocol implementation has to be seen as in-
secure (since an adversary can run arbitrary
many tests with fake biometric samples until
she succeeds in getting access with the stolen
card). The result was obtained with SPASS
within less than a minute computing time on
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:12:51 UTC from IEEE Xplore.  Restrictions apply. 
7
an AMD Athlon processor with 1533 MHz.
clock frequency and 1024 MB RAM.
One should note that thus ﬁnding does not