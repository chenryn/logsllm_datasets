31. changed**:** **\[**web2**\]** **=\>** **(**item**=\[**u\'c\'**,**
    > **3\])**
32. 
33. PLAY RECAP
    > **\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\***
34. web2 **:** ok**=2** changed**=1** unreachable**=0** failed**=0**
> **步骤四：tags给指定的任务定义一个调用标识**
>
> 1）tags 样例
1.  **\[**root@ansible ansible**\]**\# vim adhttp**.**yml
2.  **\-\--**
3.  **-** hosts**:** cache
4.  remote_user**:** root
5.  tasks**:**
6.  **-** copy**:**
7.  src**:** /root/httpd**.**conf
8.  dest**:** /etc/httpd**/**conf**/**httpd**.**conf
9.  owner**:** root
10. group**:** root
11. mode**:** **0644**
12. tags**:** config_httpd
13. notify**:**
14. **-** restart httpd
15. handlers**:**
16. **-** name**:** restart httpd
17. service**:** name**=**httpd state**=**restarted
> 2）调用方式
1.  **\[**root@ansible ansible**\]**\# ansible**-**playbook
    > adhttp**.**yml **\--**tags**=**config_httpd
2.  
3.  PLAY **\[**cache**\]**
    > **\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\***
4.  
5.  TASK **\[**Gathering Facts**\]**
    > **\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\***
6.  ok**:** **\[**cache**\]**
7.  
8.  TASK **\[**copy**\]**
    > **\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\***
9.  ok**:** **\[**cache**\]**
10. 
11. PLAY RECAP
    > **\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\***
12. cache **:** ok**=2** changed**=0** unreachable**=0** failed**=0**
> 3）include and roles
>
> 在编写playbook的时候随着项目越来越大，playbook越来越复杂。可以把一些play、task
> 或 handler放到其他文件中，通过包含进来是一个不错的选择
>
> roles像是加强版的include，它可以引入一个项目的文件和目录
>
> 一般所需的目录层级有
>
> vars：变量层
>
> tasks：任务层
>
> handlers：触发条件
>
> files：文件
>
> template：模板
>
> default：默认，优先级最低
1.  **\...**
2.  tasks**:**
3.  **-** include**:** tasks**/**setup**.**yml
4.  **-** include**:** tasks**/**users**.**yml user**=**plj
5.  //users.yml 中可以通过{{ user }}来使用这些变量
6.  handlers**:**
7.  **-** include**:** handlers**/**handlers**.**yml
> **步骤五：debug检测**
1.  **\[**root@ansible ansible**\]**\# ansible**-**playbook
    > **\--**syntax**-**check http**.**yml //检测语法
2.  
3.  playbook**:** http**.**yml
4.  **\[**root@ansible ansible**\]**\# ansible**-**playbook **-**C
    > http**.**yml //测试运行
5.  
6.  **\[**root@ansible ansible**\]**\# ansible**-**playbook http**.**yml
    > **\--**list**-**tasks
7.  //显示要执行的工作
8.  
9.  playbook**:** http**.**yml
10. 
11. play \#**1** **(**cache**):** cache    TAGS**:** **\[\]**
12. tasks**:**
13. install one specific version of Apache    TAGS**:** **\[\]**
14. lineinfile    TAGS**:** **\[\]**
15. replace    TAGS**:** **\[\]**
16. service    TAGS**:** **\[\]**
17. copy    TAGS**:** **\[\]**
18. 
19. 
20. **\[**root@ansible ansible**\]**\# vim debug**.**yml
21. **\-\--**
22. **-** hosts**:** cache
23. remote_user**:** root
24. tasks**:**
25. **-** shell**:** uptime **\|**awk
    > \'{printf(\"%f**\\n**\",\$(NF-2))}\'
26. register**:** result
27. **-** shell**:** touch **/**tmp**/**isreboot
28. when**:** result**.**stdout**\|**float **\>** **0.5**
29. **-** name**:** Show debug info
30. debug**:** **var=**result
31. 
32. **\[**root@ansible ansible**\]**\# ansible**-**playbook
    > debug**.**yml         //运行
33. 
34. PLAY **\[**cache**\]**
    > **\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\***
35. 
36. TASK **\[**Gathering Facts**\]**
    > **\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\***
37. ok**:** **\[**cache**\]**
38. 
39. TASK **\[**command**\]**
    > **\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\***
40. changed**:** **\[**cache**\]**
41. 
42. TASK **\[**command**\]**
    > **\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\***
43. skipping**:** **\[**cache**\]**
44. 
45. TASK **\[**Show debug info**\]**
    > **\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\***
46. ok**:** **\[**cache**\]** **=\>** **{**
47. \"result\"**:** **{**
48. \"changed\"**:** **true,**
49. \"cmd\"**:** \"uptime \|awk
    > \'{printf(**\\\"**%f**\\\\**n**\\\"**,\$(NF-2))}\'\"**,**
50. \"delta\"**:** \"0:00:00.005905\"**,**
51. \"end\"**:** \"2018-09-07 12:57:51.371013\"**,**
52. \"failed\"**:** **false,**
53. \"rc\"**:** **0,**
54. \"start\"**:** \"2018-09-07 12:57:51.365108\"**,**
55. \"stderr\"**:** \"\"**,**
56. \"stderr_lines\"**:** **\[\],**
57. \"stdout\"**:** \"0.000000\"**,**
58. \"stdout_lines\"**:** **\[**
59. \"0.000000\"
60. **\]**
61. **}**
62. **}**
63. 
64. PLAY RECAP
    > **\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\***
65. cache **:** ok**=3** changed**=1** unreachable**=0** failed**=0**
# Centos6系统练习
## 启动关闭httpd 服务
\[root@centos6 桌面\]# chkconfig \--list httpd
httpd 0:关闭 1:关闭 2:关闭 3:关闭 4:关闭 5:关闭 6:关闭
\[root@centos6 桌面\]# chkconfig httpd
\[root@centos6 桌面\]# chkconfig \--list httpd
httpd 0:关闭 1:关闭 2:关闭 3:关闭 4:关闭 5:关闭 6:关闭
\[root@centos6 桌面\]# chkconfig httpd on
\[root@centos6 桌面\]# chkconfig \--list httpd
httpd 0:关闭 1:关闭 2:启用 3:启用 4:启用 5:启用 6:关闭
\[root@centos6 桌面\]# chkconfig httpd off
\[root@centos6 桌面\]# chkconfig \--list httpd
httpd 0:关闭 1:关闭 2:关闭 3:关闭 4:关闭 5:关闭 6:关闭
等级0表示：表示关机 等级1表示：单用户模式
等级2表示：无网络连接的多用户命令行模式
等级3表示：有网络连接的多用户命令行模式
等级4表示：不可用 等级5表示：带图形界面的多用户模式
等级6表示：重新启动
## 配置网路用setup
nmcli 只能查看一些状态
\[root@centos6 \~\]# setup
![](media/image109.png){width="4.576570428696413in"
height="3.132134733158355in"}
## 修改主机名
\[root@centos6 桌面\]# vim /etc/sysconfig/network
NETWORKING=yes
HOSTNAME=centos6
hosname一样能用
\[root@centos6 桌面\]# hostname centos6
# \-\-\-\--NSD ARCHITECTURE DAY03\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
# ELK简介
![LINUXNSD_V01ARCHITECTUREDAY03_005](media/image110.png){width="7.264583333333333in"
height="2.8852318460192476in"}
日志分析平台:监控分析正常时候的数据分析,区别于zabbix(故障报警监控)
LKEL:linux kibanna elasticsearch logstash
**kibanna:**一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch
提供的日志分析友好的 Web
界面，可以帮助汇总、分析和搜索重要数据日志**。**
**elasticsearch:**日志存储数据库,是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等
**logstash:**主要是用来日志的搜集、分析、过滤日志的工具，支持大量的数据获取方式。一般工作方式为c/s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。
架构如同LNMP
![LINUXNSD_V01ARCHITECTUREDAY03_006](media/image111.png){width="7.264583333333333in"
height="3.136111111111111in"}
## Elasticsearch
![LINUXNSD_V01ARCHITECTUREDAY03_011](media/image112.png){width="7.264583333333333in"
height="3.3756944444444446in"}
![LINUXNSD_V01ARCHITECTUREDAY03_012](media/image113.png){width="5.6506944444444445in"
height="2.9819444444444443in"}
![LINUXNSD_V01ARCHITECTUREDAY03_013](media/image114.png){width="7.264583333333333in"
height="2.886111111111111in"}
![LINUXNSD_V01ARCHITECTUREDAY03_014](media/image115.png){width="7.264583333333333in"
height="4.594444444444444in"}
### Elasticsearch与sql,nosql对比
![LINUXNSD_V01ARCHITECTUREDAY03_015](media/image116.png){width="6.243055555555555in"
height="4.067361111111111in"}![LINUXNSD_V01ARCHITECTUREDAY03_016](media/image117.png){width="6.486111111111111in"
height="4.865277777777778in"}
![LINUXNSD_V01ARCHITECTUREDAY03_017](media/image118.png){width="7.264583333333333in"
height="4.990277777777778in"}
![LINUXNSD_V01ARCHITECTUREDAY03_018](media/image119.png){width="7.264583333333333in"
height="4.094444444444444in"}
### ES安装
1.  设置主机名.和IP对应关系 (安装)
\[root@localhost \~\]# vim /etc/sysconfig/network-scripts/ifcfg-eth0
\# Generated by dracut initrd
DEVICE=\"eth0\"
ONBOOT=\"yes\"
TYPE=\"Ethernet\"
BOOTPROTO=\"static\"
IPADDR=\"192.168.1.11\"
NETMASK=\"255.255.255.0\"
GATEWAY=\"192.168.1.254\"
\[root@localhost \~\]# systemctl restart network
/etc/hosts文件 添加:192.168.1.11 ES
2.  解决依赖关系
> 安装JDK,至少java7
>
> \[root@ES \~\]# yum -y install bash-completion
> #命令不能补全,需要安装的软件
>
> \[root@ES \~\]# exit #退出终端重新进入
>
> \[root@ES \~\]# yum -y install java-1.8.0-openjdk
3.  安装软件包
> \[root@ES \~\]# yum -y install elasticsearch-2.3.4.rpm
4.  修改\[配置文件
\[root@ES \~\]# vim /etc/elasticsearch/elasticsearch.yml
network.host: 0.0.0.0
5.  启动服务
\[root@ES \~\]# systemctl start elasticsearch.service
\[root@ES \~\]# systemctl enable elasticsearch.service
6.  检查服务
\[root@ES \~\]# curl 192.168.1.11:9200
{
\"name\" : \"Frank Payne\",
\"cluster_name\" : \"elasticsearch\",
\"version\" : {
\"number\" : \"2.3.4\",
\"build_hash\" : \"e455fd0c13dceca8dbbdbb1665d068ae55dabe3f\",
\"build_timestamp\" : \"2016-06-30T11:24:31Z\",
\"build_snapshot\" : false,
\"lucene_version\" : \"5.5.0\"
},
\"tagline\" : \"You Know, for Search\"
}
### ES集群安装
按照集群安装再安装5台,按如下修改配置:
![](media/image120.png){width="7.263888888888889in"
height="8.986805555555556in"}
安装配置步骤
配置所有的IP地址
192.168.11-192.168.1.15
主机名分别是:esl esl2 esl3 esl4 esl5
将所有主机的/etc/hosts文件将所有主机名与IP对应好
制作yum源.在192.168.1.254真机的ftp目录//var/ftp/elk目录放有所有所需安装包,并做好了yum源
\[root@room9pc01 \~\]# ls /var/ftp/esl/
accounts.json.gz elasticsearch-head-master.zip kibana-4.5.2-1.x86_64.rpm
shakespeare.json.gz
alog.gz elasticsearch-kopf-master.zip logs.jsonl.gz
bigdesk-master.zip elk.tar logstash-2.3.4-1.noarch.rpm
elasticsearch-2.3.4.rpm filebeat-1.2.3-x86_64.rpm repodata
注:做yum源的命令为:\~\]# createrepo 安装包所以在目录 #在当前目录可用点.
代替
安装
yum -y install java-1.8.0-openjdk
yum -y install elasticsearch-2.3.4
4.vim /etc/elasticsearch/elasticsearch.yml
17 cluster.name: nsd1811
23 node.name: {{ansible_hostname}}
discovery.zen.ping.unicast.hosts: \[\"esl\", \"esl2\", \"esl3\"\]
## HTTP协议简介
http请求由三部分组成:请求行 消息报头 请求正文
请求行以一个方法符号开头,以空格分开,后面跟着请求的URI和协议版本,格式如下:
Method Request-URI HTTP-Version CRLF
http请求方法:
常用方法:GET,POST,HEAD
其他方法:OPTIONS,PUT,DELETE.TRACE和CONNECT
ES常用:
PUT \--增 DELETE \--删 POST \--改 GET \--查
## 系统命令:curl
![LINUXNSD_V01ARCHITECTUREDAY03_033](media/image121.png){width="5.567361111111111in"
height="3.217361111111111in"}
\[root@room9pc01 elk\]# curl 
#此地址为李欣特写的php
\
\[ REQUEST_METHOD\] ==\> GET
\[ REMOTE_ADDR\] ==\> 118.250.0.162
\[HTTP_USER_AGENT\] ==\> curl/7.29.0
\[ HTTP_REFERER\] ==\>
\-\-- \-\-- GET options is \-\-- \-\--
Array
(
)
\[root@room9pc01 elk\]# curl -XPUT http://118.144.89.240/info.php
\
\[ REQUEST_METHOD\] ==\> PUT
\[ REMOTE_ADDR\] ==\> 118.250.0.162
\[HTTP_USER_AGENT\] ==\> curl/7.29.0
\[ HTTP_REFERER\] ==\>