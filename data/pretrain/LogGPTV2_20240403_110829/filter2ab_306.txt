### 培根密码原理
培根密码使用两种不同的字体，代表 A 和 B，结合加密表进行加解密。
| a   | AAAAA | g   | AABBA | n   | ABBAA | t   | BAABA |
| --- | ----- | --- | ----- | --- | ----- | --- | ----- |
| b   | AAAAB | h   | AABBB | o   | ABBAB | u-v | BAABB |
| c   | AAABA | i-j | ABAAA | p   | ABBBA | w   | BABAA |
| d   | AAABB | k   | ABAAB | q   | ABBBB | x   | BABAB |
| e   | AABAA | l   | ABABA | r   | BAAAA | y   | BABBA |
| f   | AABAB | m   | ABABB | s   | BAAAB | z   | BABBB |
上面的是常用的加密表。还有另外的一种加密表，可认为是将 26 个字母从 0 到 25 排序，以二进制表示，A 代表 0，B 代表 1。
下面这一段内容就是明文 steganography 加密后的内容，正常字体是 A，粗体是 B：
**T**o en**co**de **a** mes**s**age e**ac**h letter **of** the **pl**a**i**nt**ex**t **i**s replaced b**y a g**rou**p of f**i**ve** of **th**e lett**ers** **'A'** o**r 'B'**.
可以看到，培根密码主要有以下特点
- 只有两种字符
- 每一段的长度为 5
- 加密内容会有特殊的字体之分，亦或者大小写之分。
### 栅栏密码原理
栅栏密码把要加密的明文分成 N 个一组，然后把每组的第 1 个字连起来，形成一段无规律的话。这里给出一个例子
```
明文：THERE IS A CIPHER
```
去掉空格后变为
```
THEREISACIPHER
```
分成两栏，两个一组得到
```
TH ER EI SA CI PH ER
```
先取出第一个字母，再取出第二个字母
```
TEESCPE
HRIAIHR
```
连在一起就是
```
TEESCPEHRIAIHR
```
上述明文也可以分为2栏。
```
THEREIS ACIPHER
```
组合得到密文
```
TAHCEIRPEHIESR
```
### 曲路密码原理
曲路密码（Curve Cipher）是一种换位密码，需要事先双方约定密钥（也就是曲路路径）。下面给出一个例子
```
明文：The quick brown fox jumps over the lazy dog
```
```
密文：gesfc inpho dtmwu qoury zejre hbxva lookT
```
### 列移位加密原理
列移位密码（Columnar Transposition Cipher）是一种比较简单，易于实现的换位密码，通过一个简单的规则将明文打乱混合成密文。下面给出一个例子。
我们以明文 `The quick brown fox jumps over the lazy dog`，密钥 `how are u` 为例：
将明文填入 5 行 7 列表（事先约定填充的行列数，如果明文不能填充完表格可以约定使用某个字母进行填充）
密钥： `how are u`，按 `how are u` 在字母表中的出现的先后顺序进行编号，我们就有 a 为 1，e 为 2，h 为 3，o 为 4，r 为 5，u 为 6，w 为 7，所以先写出 a 列，其次 e 列，以此类推写出的结果便是密文：
密文： `qoury inpho Tkool hbxva uwmtd cfseg erjez`
### 01248 密码原理
该密码又称为云影密码，使用 0，1，2，4，8 四个数字，其中 0 用来表示间隔，其他数字以加法可以表示出 如：28=10，124=7，18=9，再用 1->26 表示 A->Z。
可以看出该密码有以下特点
- 只有 0，1，2，4，8
### 01248 密码例子
这里我们以CFF 2016 影之密码为例进行介绍，题目
> 8842101220480224404014224202480122
我们按照0来进行分割，如下
| 内容   | 数字           | 字符 |
| ------ | -------------- | ---- |
| 88421  | 8+8+4+2+1=23   | W    |
| 122    | 1+2+2=5        | E    |
| 48     | 4+8=12         | L    |
| 2244   | 2+2+4+4=12     | L    |
| 4      | 4              | D    |
| 142242 | 1+4+2+2+4+2=15 | O    |
| 248    | 2+4+8=14       | N    |
| 122    | 1+2+2=5        | E    |
所以最后的 flag 为 WELLDONE。
### JSFuck原理
JSFuck 可以只用 6 个字符 `[]()!+` 来编写 JavaScript 程序。比如我们想用 JSFuck 来实现 `alert(1)` 代码如下
```javascript

```
其他一些基本的表达：
```javascript
false       =>  ![]
true        =>  !![]
undefined   =>  [][[]]
NaN         =>  +[![]]
0           =>  +[]
1           =>  +!+[]
2           =>  !+[]+!+[]
10          =>  [+!+[]]+[+[]]
Array       =>  []
Number      =>  +[]
String      =>  []+[]
Boolean     =>  ![]
Function    =>  []["filter"]
eval        =>  []["filter"]["constructor"]( CODE )()
window      =>  []["filter"]["constructor"]("return this")()
```
### BrainFuck原理
Brainfuck，是一种极小化的计算机语言，它是由 Urban Müller 在 1993 年创建的。我们举一个例子，如果我们想要一个在屏幕上打印Hello World！，那么对应的程序如下。对于其中的原理，感兴趣的可以自行网上搜索。
```
++++++++++[>+++++++>++++++++++>+++>+++.>+.+++++++..+++.>++..+++.------.--------.>+.>.
```
与其对应的还有 ook。
### 舞动的小人密码原理
这种密码出自于福尔摩斯探案集。每一个跳舞的小人实际上对应的是英文二十六个字母中的一个，而小人手中的旗子则表明该字母是单词的最后一个字母，如果仅仅是一个单词而不是句子，或者是句子中最后的一个单词，则单词中最后一个字母不必举旗。
### 手机键盘密码
手机键盘加密方式，是每个数字键上有 3-4 个字母，用两位数字来表示字母，例如：ru 用手机键盘表示就是：7382，那么这里就可以知道了，手机键盘加密方式不可能用 1 开头，第二位数字不可能超过 4。
关于手机键盘加密还有另一种方式，就是“音的”式（这一点可能根据手机的不同会有所不同），具体参照手机键盘来打，例如：“数字”表示出来就是：748 94。在手机键盘上面按下这几个数，就会出：“数字”的拼音。