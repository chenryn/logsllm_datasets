这一步骤至关重要。如果没有它，数据的位置可能会阻止分区调整为所需的大小。请注意，有些数据不能移动。在这种情况下，它会严重限制新分区的大小，并且可能会强制您以破坏性方式重新分区磁盘。
:::
::: section
::: titlepage
### []{#strategies-for-repartitioning-a-disk_managing-file-systems.html#_resizing_the_existing_partition}重新调整现有分区的大小 {.title}
:::
下图显示了实际调整大小的流程。虽然重新调整大小操作的实际结果会有所不同，具体取决于所使用的软件，但在大多数情况下，新释放的空间用于创建与原始分区类型相同的、未格式化的分区。
::: figure
[]{#strategies-for-repartitioning-a-disk_managing-file-systems.html#idm139895590329328}
**图 19.5. 分区在磁盘上调整大小**
::: figure-contents
::: mediaobject
![部分调整大小](images/part-resize.png)
:::
:::
:::
在上例中，第一个图表示调整大小前的分区，第二个图表示调整大小后的分区。
务必要了解调整大小的软件如何处理新释放的空间，以便您可以执行相应的步骤。在此处演示的情形中，最好删除新的
DOS 分区，并创建合适的 Linux 分区。
:::
::: section
::: titlepage
### []{#strategies-for-repartitioning-a-disk_managing-file-systems.html#_creating_new_partitions}创建新分区 {.title}
:::
如上例中所述，也不一定要创建新分区。然而，除非重新分区软件支持安装 Linux
系统，您很可能需要删除在调整大小过程中创建的分区。
::: figure
[]{#strategies-for-repartitioning-a-disk_managing-file-systems.html#idm139895583644976}
**图 19.6. 带有最终分区配置的磁盘**
::: figure-contents
::: mediaobject
![nondestruct fin](images/nondestruct-fin.png)
:::
:::
:::
在上例中，第一个图表示配置前的磁盘，第二个图表示配置后的磁盘。
:::
:::
:::
:::
[]{#assembly_getting-started-with-xfs_managing-file-systems.html}
::: chapter
::: titlepage
# []{#assembly_getting-started-with-xfs_managing-file-systems.html#assembly_getting-started-with-xfs_managing-file-systems}第 20 章 XFS 入门 {.title}
:::
这是如何创建和维护 XFS 文件系统的概述。
::: section
::: titlepage
# []{#assembly_getting-started-with-xfs_managing-file-systems.html#the-xfs-file-system_getting-started-with-xfs}XFS 文件系统 {.title}
:::
XFS 是一个高度可扩展、高性能、健壮且成熟的 64
位日志文件系统，其支持单个主机上非常大的文件和文件系统。它是 Red Hat
Enterprise Linux 9 中的默认文件系统。XFS 最初于 1990 年代由 SGI
早期开发，并在非常大型的服务器和存储阵列中运行有很长的历史记录。
XFS 的功能包括：
::: variablelist
[可靠性]{.term}
:   ::: itemizedlist
    -   元数据日志，其确保系统崩溃后文件系统的完整性，方法是保留系统重启和重新挂载文件系统时可以重新执行的文件系统操作的记录，
    -   广泛的运行时元数据一致性检查
    -   可扩展且快速修复工具
    -   配额日志。这可避免在崩溃后进行冗长的配额一致性检查。
    :::
[可伸缩性和性能]{.term}
:   ::: itemizedlist
    -   支持最多 1024 TiB 的文件系统大小
    -   支持大量并发操作的能力
    -   B-tree 索引，用于空闲空间的可扩展性管理
    -   复杂的元数据读头算法
    -   优化流视频工作负载
    :::
[分配方案]{.term}
:   ::: itemizedlist
    -   基于扩展数据块的分配
    -   条带化分配策略
    -   延迟分配
    -   空间预分配
    -   动态分配的 inode
    :::
[其他功能]{.term}
:   ::: itemizedlist
    -   基于 Reflink 的文件副本
    -   严格集成备份和恢复工具
    -   在线清理
    -   在线文件系统增大
    -   全面的诊断功能
    -   扩展属性(`xattr`{.literal})。这允许系统能够按文件关联多个额外的名称/值对。
    -   项目或目录配额。这允许对目录树的配额限制。
    -   小于秒的时间戳
    :::
:::
::: title
**性能特性**
:::
XFS 在具有企业工作负载的大型系统上具有高性能。大型系统是一个有相对较多的
CPU 、多个 HBA 和连接外部磁盘阵列的系统。XFS 在具有多线程、并行 I/O
工作负载的较小系统上也表现良好。
对于单线程、元数据密集型工作负载，XFS
的性能相对较低：例如，在单个线程中创建或删除大量小文件的工作负载。
:::
::: section
::: titlepage
# []{#assembly_getting-started-with-xfs_managing-file-systems.html#comparison-of-tools-used-with-ext4-and-xfs_getting-started-with-xfs}和 ext4 和 XFS 一起使用的工具比较 {.title}
:::
这部分比较用于完成 ext4 和 XFS 文件系统中常用任务的工具。
::: informaltable
  任务                   ext4                                   XFS
  ---------------------- -------------------------------------- -------------------------------------------------------
  创建文件系统           `mkfs.ext4`{.literal}                  `mkfs.xfs`{.literal}
  文件系统检查           `e2fsck`{.literal}                     `xfs_repair`{.literal}
  重新定义文件系统大小   `resize2fs`{.literal}                  `xfs_growfs`{.literal}
  保存文件系统的镜像     `e2image`{.literal}                    `xfs_metadump`{.literal} 和 `xfs_mdrestore`{.literal}
  标签或者调整文件系统   `tune2fs`{.literal}                    `xfs_admin`{.literal}
  备份文件系统           `tar`{.literal} 和 `rsync`{.literal}   `xfsdump`{.literal} 和 `xfsrestore`{.literal}
  配额管理               `quota`{.literal}                      `xfs_quota`{.literal}
  文件映射               `filefrag`{.literal}                   `xfs_bmap`{.literal}
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果您需要通过网络进行备份的完整客户端-服务器解决方案，您可以使用 RHEL 9
中提供的 `bacula`{.literal} 备份实用程序。有关 Bacula 的更多信息，请参阅
[Bacula
备份解决方案](https://www.bacula.org/documentation/documentation/){.link}。
:::
:::
:::
[]{#assembly_creating-an-xfs-file-system_managing-file-systems.html}
::: chapter
::: titlepage
# []{#assembly_creating-an-xfs-file-system_managing-file-systems.html#assembly_creating-an-xfs-file-system_managing-file-systems}第 21 章 创建 XFS 文件系统 {.title}
:::
作为系统管理员，您可以在块设备上创建 XFS
文件系统，使其可以存储文件和目录。
::: section
::: titlepage
# []{#assembly_creating-an-xfs-file-system_managing-file-systems.html#proc_creating-an-xfs-file-system-with-mkfs-xfs-creating-an-xfs-file-system}使用 mkfs.xfs 创建 XFS 文件系统 {.title}
:::
这个流程描述了如何在块设备上创建 XFS 文件系统。
::: orderedlist
**流程**
1.  要创建文件系统，请执行以下操作：
    ::: itemizedlist
    -   如果设备是常规分区、LVM 卷、MD
        卷、磁盘或者类似的设备，请使用以下命令：
        ``` screen
        # mkfs.xfs block-device
        ```
        ::: itemizedlist
        -   使用到块设备的路径替换
            [*[block-device]{.replaceable}*]{.emphasis}。例如：
            `/dev/sdb1`{.literal}、`/dev/disk/by-uuid/05e99ec8-def1-4a5e-8a9d-5945339ceb2a`{.literal}
            或 `/dev/my-volgroup/my-lv`{.literal}。
        -   一般情况下，默认选项是常见用途的最佳选择。
        -   在包含现有文件系统的块设备上使用 `mkfs.xfs`{.literal}
            时，添加 `-f`{.literal} 选项来覆盖该文件系统。
        :::
    -   要在硬件 RAID
        设备上创建文件系统，检查系统是否正确检测到该设备的条带几何结构：
        ::: itemizedlist
        -   如果条带几何结构信息正确，则不需要额外的选项。创建文件系统：
            ``` screen
            # mkfs.xfs block-device
            ```
        -   如果信息不正确，请使用 `-d`{.literal} 选项的 `su`{.literal}
            和 `sw 参数`{.literal}
            来手动指定条带几何结构。`su`{.literal} 参数指定 RAID
            块大小，`sw`{.literal} 参数指定 RAID 设备中数据磁盘的数量。
            例如：
            ``` screen
            # mkfs.xfs -d su=64k,sw=4 /dev/sda3
            ```
        :::
    :::
2.  使用以下命令等待系统注册新设备节点：
    ``` screen
    # udevadm settle
    ```
:::
::: itemizedlist
**其他资源**
-   `mkfs.xfs(8)`{.literal} 手册页。
:::
:::
:::
[]{#creating-an-xfs-file-system-using-rhel-system-roles_managing-file-systems.html}
::: chapter
::: titlepage
# []{#creating-an-xfs-file-system-using-rhel-system-roles_managing-file-systems.html#creating-an-xfs-file-system-using-rhel-system-roles_managing-file-systems}第 22 章 使用 RHEL 系统角色在块设备中创建 XFS 文件系统 {.title}
:::
这部分描述了如何使用 `存储`{.literal} 角色在多个目标机器的块设备上创建
XFS 文件系统。
::: itemizedlist
**先决条件**
-   存在一个使用该 `存储`{.literal} 角色的 Ansible playbook。
    有关如何应用此类 playbook 的信息，请参阅
    [应用角色](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/getting-started-with-rhel-system-roles_configuring-basic-system-settings#applying-a-role_getting-started-with-rhel-system-roles){.link}。
:::
::: section
::: titlepage
# []{#creating-an-xfs-file-system-using-rhel-system-roles_managing-file-systems.html#an-example-ansible-playbook-to-create-an-xfs-file-system_creating-an-xfs-file-system-using-rhel-system-roles}在块设备中创建 XFS 文件系统的 Ansible playbook 示例 {.title}
:::
本节提供了一个 Ansible playbook 示例。此 playbook
应用存储角色，以使用默认参数在块设备中创建 XFS 文件系统。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
存储角色只能在未分区、整个磁盘或者逻辑卷(LV)上创建文件系统。它不能在分区中创建文件系统。
:::
::: example
[]{#creating-an-xfs-file-system-using-rhel-system-roles_managing-file-systems.html#idm139895577806400}
**例 22.1. 在 /dev/sdb 上创建 XFS 的 playbook**
::: example-contents
``` screen
---
- hosts: all
  vars:
    storage_volumes:
      - name: barefs
        type: disk
        disks:
          - sdb
        fs_type: xfs
  roles:
    - rhel-system-roles.storage
```
::: itemizedlist
-   卷名称（示例中为 `barefs`{.literal} ）目前是任意的。Storage 角色根据
    disk: 属性中列出的磁盘设备标识卷。``{.literal}
-   您可以省略 `fs_type: xfs`{.literal} 行，因为 XFS 是 RHEL 9
    中的默认文件系统。
-   要在 LV 上创建文件系统，请在 `disks:`{.literal} 属性下提供 LVM
    设置，包括括起的卷组。
    不要提供到 LV 设备的路径。
:::
:::
:::
::: itemizedlist
**其他资源**
-   `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    文件。
:::
:::
::: section
::: titlepage
# []{#creating-an-xfs-file-system-using-rhel-system-roles_managing-file-systems.html#_additional_resources_4}其他资源 {.title}
:::
::: itemizedlist
-   [存储角色简介](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_file_systems/managing-local-storage-using-rhel-system-roles_managing-file-systems#storage-role-intro_managing-local-storage-using-rhel-system-roles){.link}
:::
:::
:::
[]{#assembly_backing-up-an-xfs-file-system_managing-file-systems.html}
::: chapter
::: titlepage
# []{#assembly_backing-up-an-xfs-file-system_managing-file-systems.html#assembly_backing-up-an-xfs-file-system_managing-file-systems}第 23 章 备份 XFS 文件系统 {.title}