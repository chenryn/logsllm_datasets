# Surgical Recovery from Kernel-Level Rootkit Installations on Linux-Based Systems

## Julian Grizzard
### DEFCON 13, July 2005

---

## Latest Slides and Tools
**Please download the latest slides and tools:**

- **Latest Slides**: [Available here](http://www.ece.gatech.edu/research/labs/nsa/presentations/dc13_grizzard.pdf)
- **System Call Table Tools**: [Available here](http://www.ece.gatech.edu/research/labs/nsa/sct_tools.shtml)
- **Spine Architecture Work**: [Available here](http://www.ece.gatech.edu/research/labs/nsa/spine.shtml)

---

## Problem
### What does a rootkit do?
- **Retain Access**
  - Trojan `sshd` client with hard-coded user/pass for root access
  - Initiate remote entry by specially crafted packet stream
- **Hide Activity**
  - Hide a process including its resource usage
  - Hide malicious rootkit kernel modules from `lsmod`

---

## Most Widely Accepted Solution
- **Format and Reinstall**

---

## Operating System Architectures
### Monolithic Operating System
- **Kernel Space**: All core functionalities are in the kernel.
- **User Space**: Applications and services run here.

### Microkernel Operating System
- **Minimal Core**: Only essential functionalities in the kernel.
- **User Space Services**: Most system services run as user processes.

---

## Intel Descriptor Privilege Level (DPL)
- **Level 3 (R3)**
  - Minimal hardware access
  - User space processes run at this level
- **Level 2 (R2)**
  - Limited hardware access
  - Not used in Linux
- **Level 1 (R1)**
  - Limited hardware access
  - Not used in Linux
- **Level 0 (R0)**
  - Unlimited hardware access
  - Kernel space threads run at this level

#### Testing Privilege Level - User (R3)
```c
#include <stdio.h>
#include <stdint.h>

int main() {
    uint16_t cs_reg;
    asm("mov %%cs,%0" : "=m" (cs_reg));
    cs_reg = cs_reg & 0x0003;
    printf("ring: %d\n", cs_reg);
    return 0;
}
```

#### Testing CPL - Kernel (R0)
```c
#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>

static int __init get_cpl_init(void) {
    uint16_t cs_reg;
    asm("mov %%cs,%0" : "=m" (cs_reg));
    cs_reg = cs_reg & 0x0003;
    printk(KERN_ALERT "ring: %d\n", cs_reg);
    return 0;
}

static void __exit get_cpl_exit(void) {
}

module_init(get_cpl_init);
module_exit(get_cpl_exit);
```

---

## Rootkit Attacks
### User-Level Rootkit Attacks
- Modify/replace system binaries
  - Examples: `ps`, `netstat`, `ls`, `top`, `passwd`

### Kernel-Level Rootkit Attacks
- Modify running kernel code and data structures

#### Example 1: System Call Table
- **Attack Points**: System call table, interrupt descriptor table (IDT), and system call handler.

---

## Manual Recovery Algorithm
1. Copy clean system calls to kernel memory (get from kernel image with modified gdb).
2. Create a new system call table.
3. Copy the system call handler to kernel memory (set new SCT).
4. Query the IDTR register (interrupt table).
5. Set the 0x80ith entry to the new handler.

### Copying Kernel Functions
- **Trickery Involved**: x86 code has call instructions with relative offset parameters.
- **Options**:
  - Recompile the code.
  - Recompute relative offsets and modify the machine code.

---

## /dev/kmem Details from SucKIT
- **SucKIT**: Accesses kernel memory from user space.
- **Redirects**: Entire system call table.
- **Finding the System Call Table**:
  - Uses `/dev/kmem` to read kernel memory.
  - Computes the absolute offset of the system call handler.

### Find System Call Handler
```c
struct idtr idtr;
struct idt idt80;
ulong old80;

/* Pop IDTR register from CPU */
asm("sidt %0" : "=m" (idtr));

/* Read kernel memory through /dev/kmem */
rkm(fd, &idt80, sizeof(idt80), idtr.base + 0x80 * sizeof(idt80));

/* Compute absolute offset of system call handler for kmem */
old80 = idt80.off1 | (idt80.off2 << 16);
```

### Kmalloc as a System Call (sucKIT)
```c
#define rr(n, x) ,n ((ulong) x)
#define __NR_oldolduname 59
#define OURSYS __NR_oldolduname
#define syscall2(__type, __name, __t1, __t2) \
   __type __name(__t1 __a1, __t2 __a2)       \
   {                                         \
      ulong __res;                           \
      __asm__ volatile                       \
      ("int $0x80"                           \
      : "=a" (__res)                         \
      : "0" (__NR_##__name)                  \
      rr("b", __a1)                          \
      rr("c", __a2));                        \
      return (__type) __res;                 \
   }
#define __NR_KMALLOC OURSYS
static inline syscall2(ulong, KMALLOC, ulong, ulong);
```

---

## Demos
- **System Call Table Tools Demonstration**

---

## System Calls Used for Recovery
- **Using /dev/kmem**: `sys_open`, `sys_read`, `sys_write`
- **Using Kernel Module**: `sys_create_module`, `sys_init_module`
- **Problem**: System call table has been redirected by a rootkit.

### Solution
- **Intrusion Recovery System (IRS)**
  - **Spine Architecture**: Minimizes the chance of rootkit attacks.
  - **IRS Capabilities**: Verifies the integrity of the system.
  - **Statehold**: Isolated area containing a copy of the known good state for the entire system, including the kernel.

### Spine Architecture
- **Based on Microkernel**: Uses Fiasco L4 implementation.
- **Guest OS**: L4Linux runs on top of Fiasco.
- **User Processes**: Run on L4Linux.
- **Separation**: Only Fiasco runs in kernel mode.
- **IRS Components**: Present at each level.

### Memory Hierarchy
- **Details**: Hierarchical structure to manage memory access and protection.

---

This document provides a structured and professional overview of Julian Grizzard's presentation on surgical recovery from kernel-level rootkit installations on Linux-based systems at DEFCON 13.