### What problem does this feature solve?
It's quite frequent we need to abstract a v-for'ed element tree as a component
for example, go from `(something reusable)` to
``
it's extremely useful when you are building higher older components. i.e.
Components that glues components with predefined interfaces.
it used to be natural to do so, as objects always come with an identity, which
is automatically unique, and best suited to be keys.
But now, it says it should be a primitive â€” therefore I have to patch the
object creation system of javascript to manually give every object created an
id property, which is a number automatically increases every time a new object
is created, and it is duplicate with the identity an object already have.
And the counter has to be global, as every object created potentially passed
to v-for has to be patched.
This is havoc
It utterly destroys the usefulness of v-for and the convenience of abstraction
and code reuse, it also breaks tunes of existing code.
It seems that it's much easier to implement my own v-for that supports the
identity of objects as keys rather than patching the object system of
javascript to ensure every object has a duplicated unique primitive to make
vue happy. And it's much easier to do so as I have tons of code broken by this
primitive check, which needs a complete and unnecessary redesign. And the
complexity increases dramatically.
So PLEEEASE just support plain objects, i.e. objects created by object literal
they are absolutely the same with primitives when all your diff algorithm
needs is just `SameValue`. It's nothing difficult to implement.
But for us, it's invaluable.
### What does the proposed API look like?
``
Just support objects as v-for's keys
Simple yet useful