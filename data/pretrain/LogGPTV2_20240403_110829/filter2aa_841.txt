A Linguistic Platform for 
A Linguistic Platform for 
Threat Development 
Threat Development 
Ben Kurtz
Ben Kurtz
Imperfect Networks
Imperfect Networks
Introduction
Introduction
By applying programming language theory to the 
By applying programming language theory to the 
development of new networks attacks, we can 
development of new networks attacks, we can 
create next
create next--generation platforms capable of 
generation platforms capable of 
quickly 
handling 
arbitrary 
protocols 
and 
quickly 
handling 
arbitrary 
protocols 
and 
hardware, and exponentially reducing threat 
hardware, and exponentially reducing threat 
development time.
development time.
Overview
Overview
 Motivation
Motivation
 Threat Testing
Threat Testing
 Goals of a new system
Goals of a new system
 Applications of Programming Language Theory
Applications of Programming Language Theory
Motivation
Motivation
 We want to break stuff!
We want to break stuff!
 Easier
Easier
 Faster
Faster
 Better
Better
 Minimize threat development turnaround time
Minimize threat development turnaround time
Motivation (cont.)
Motivation (cont.)
Why do we want to break stuff?
Why do we want to break stuff?
 Network Equipment/Service Testing
Network Equipment/Service Testing
 Malice
Malice
IDS systems eventually have to be tested
IDS systems eventually have to be tested…
…
And they must be tested with REAL threats!
And they must be tested with REAL threats!
Motivation (cont.)
Motivation (cont.)
You can
You can’’t have 0
t have 0--day protection 
day protection 
without 0
without 0--day testing!
day testing!
This requires same
This requires same--day threat testing.
day threat testing.
The Threat Testing Cycle
The Threat Testing Cycle
Quantify
Codify
Research
Test
Implement
Window of Vulnerability
Window of Vulnerability
If it takes two weeks to complete the cycle,
If it takes two weeks to complete the cycle,
Your Window of Vulnerability is two weeks!
Your Window of Vulnerability is two weeks!
Options for Improvement
Options for Improvement
 Option 1
Option 1
 Hire more people
Hire more people
 Work in parallel
Work in parallel
 Still limited by current 
Still limited by current 
time
time--consuming tools
consuming tools
 Window of Vulnerability 
Window of Vulnerability 
remains the same
 Option 2
Option 2
 Automate the common, 
Automate the common, 
repetitive tasks associated 
repetitive tasks associated 
with threat development.
with threat development.
 Better tools
Better tools
 Only deal with the unique 
Only deal with the unique 
aspects of a threat.
aspects of a threat.
remains the same
So
So…
…
Hiring more people would be great!
Hiring more people would be great!
But it
But it’’s not going to happen.
s not going to happen.
We need better tools.
We need better tools.
Threat Platforms
Threat Platforms
 We have some threat platforms available 
We have some threat platforms available 
to us already
to us already…
…
 Metasploit
Metasploit
 Nessus
Nessus
 …
… Perl
Perl
 Versatility
Versatility
 Speed
Speed
 Real, Live Threats
Real, Live Threats
Design Goals
Design Goals
 One tool to generate all possible threats
One tool to generate all possible threats
 Platform/Target independence
Platform/Target independence
 PCAP import
PCAP import
 Multi
Multi--source traffic playback
source traffic playback
 Simulation and Testing
Simulation and Testing
 Unified platform means unified reporting
Unified platform means unified reporting
Programming Language Theory
Programming Language Theory
 Grammars
Grammars
 Rules that describe a language
Rules that describe a language
 Serve dual purposes:
Serve dual purposes:
 Generation 
Generation –– to make valid expressions
to make valid expressions
 Validation 
Validation –– to determine validity of an expression
to determine validity of an expression
 Extended Backus
Extended Backus--Naur Form 
Naur Form 
Compilers
Compilers
 Translates one language to another
Translates one language to another
 Stages of compilation
Stages of compilation
 Lex
Lex –– syntax
syntax
 Parse 
Parse –– semantics
semantics
 Intermediate Representation
Intermediate Representation
 Code Generation
Code Generation
Parser Generators
Parser Generators
 Also called Compiler Compilers
Also called Compiler Compilers
 Often overlooked, but powerful
Often overlooked, but powerful
 PG
PG’’s are compilers that can dynamically redefine 
s are compilers that can dynamically redefine 
the input and output grammars
the input and output grammars
 Specify each network protocol as a grammar, 
Specify each network protocol as a grammar, 
and feed it into a domain
and feed it into a domain--specific parser 
specific parser 
generator for network traffic
generator for network traffic
 EBNF specification of protocols
EBNF specification of protocols
EBNF
EBNF
 A set of production rules for a grammar, 
A set of production rules for a grammar, 
including a starting rule.
including a starting rule.
 Each rule is comprised of:
Each rule is comprised of:
 Terminals 
Terminals –– which are strings
which are strings
 Non
Non--Terminals 
Terminals –– which are pointers to other rules.
which are pointers to other rules.
 Special symbols, similar to regular expressions
Special symbols, similar to regular expressions
 * operator 
* operator –– repeat 0 or more times
repeat 0 or more times
 + operator 
+ operator –– repeat 1 or more times
repeat 1 or more times
 | operator 
| operator –– either/or
either/or
EBNF ( cont. )
EBNF ( cont. )
 Sample Grammar for Single Digit Addition:
Sample Grammar for Single Digit Addition:
 S S --> E
> E
 E 
E --> E 
> E ‘‘++’’ E | D
E | D
 D 
D --> 
> ‘‘00’’ | | ‘‘11’’ | | ‘‘22’’ | | ‘‘33’’ | | ‘‘44’’ | | ‘‘55’’ | | ‘‘66’’ | | ‘‘77’’ | etc.
| etc.
 Valid strings:
Valid strings:
 55
 7 + 8
7 + 8
 1 + 7 + 9 
1 + 7 + 9 
PLT (cont.)
PLT (cont.)
 Normal Grammars
Normal Grammars
 Simplest subset, Simple definitions
Simplest subset, Simple definitions
 Have exactly one non
Have exactly one non--terminal per RHS of each rule
terminal per RHS of each rule
 Simple parsing algorithms
Simple parsing algorithms
 Bold statement:  All network protocols can be 
Bold statement:  All network protocols can be 
defined with Normal Grammars!
defined with Normal Grammars!
 Erm
Erm…
… Mostly
Mostly
 Checksums and Length Fields
Checksums and Length Fields
Protocols in EBNF
Protocols in EBNF
 Each protocol is an ordered list of fields.
Each protocol is an ordered list of fields.
 Protocols that allow encapsulated protocols 
Protocols that allow encapsulated protocols 
have a Payload, a special field akin to a         
have a Payload, a special field akin to a         
non
non--terminal.
terminal.
 Some protocols are more dynamic
Some protocols are more dynamic
 EBNF can handle dynamism ( such as ICMP ) 
EBNF can handle dynamism ( such as ICMP ) 
Ethernet Example
Ethernet Example
 Start 
Start --> ETH
> ETH
 ETH 
ETH -->  
>  srcMAC
srcMAC destMAC
destMAC pktType
pktType Payload
Payload
 srcMAC
srcMAC --> 
> MACAddress
MACAddress
 destMAC
destMAC --> 
> MACAddress
MACAddress
 pktType
pktType --> 2BytesHex
> 2BytesHex
 Payload 
Payload --> Any Other Protocol
> Any Other Protocol
Protocol Description
Protocol Description
 Choosing the Format
Choosing the Format
 Writing the Grammar
Writing the Grammar
 RFC Block Diagrams
RFC Block Diagrams
 Each non
Each non--terminal is handled separately
terminal is handled separately
 Handling Typed Data
Handling Typed Data
 Accommodating PCAP Imports
Accommodating PCAP Imports
 Type
Type--Length
Length--Value (TLV) Fields
Value (TLV) Fields
Threat Description
Threat Description
 Format of Threats
Format of Threats
 Metadata
Metadata
 Named Variables
Named Variables
 Functions
Functions
 Lists
Lists
 Unrolling Ambiguous Iterative Behavior
Unrolling Ambiguous Iterative Behavior
Some Useful Functions
Some Useful Functions
 Range
Range
 Random
Random
 Random String
Random String
 Homogenous String of Length X
Homogenous String of Length X
 Checksums
Checksums
Importing from PCAP
Importing from PCAP
 Grammar
Grammar--based PCAP decomposition
based PCAP decomposition
 Translating using Protocol Definitions
Translating using Protocol Definitions
 Multi
Multi--sourced PCAP files
sourced PCAP files
 Edit your imported PCAP for playback
Edit your imported PCAP for playback
Binding and Playback
Binding and Playback
 Pre
Pre--compilation of Threats (Threat Binding)
compilation of Threats (Threat Binding)
 Threat Engines
Threat Engines
 Functions
Functions
 Checksums
Checksums
 Throughput
Throughput
 Distributed design
Distributed design
 Multi
Multi--Source Traffic Playback
Source Traffic Playback
Conclusions
Conclusions
 Threat Development and Delivery Platforms 
Threat Development and Delivery Platforms 
based on Parser Generators have several 
based on Parser Generators have several 
advantages:
advantages:
 Speed of Development
Speed of Development
 Live Testing
Live Testing
 PCAP Import and Playback
PCAP Import and Playback
 Platform and Protocol Independence
Platform and Protocol Independence
Q & A
Q & A
At this time, I
At this time, I’’d like 
d like 
to open the floor up for 
to open the floor up for 
questions.
questions.