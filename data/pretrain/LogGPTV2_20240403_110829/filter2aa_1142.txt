# BlockFighting with a HOOKER

## Presentation at DEFCON24 (#w00w00 #Blah!)

### Overview
- **Methodology & Tools**: High-speed comprehension of binary trace, analysis, and steering.
- **User Experience**: Simple and enjoyable to use.
- **Functionality**:
  - Monitor and alter execution.
  - BlockFighters.
  - ROP (Return-Oriented Programming) Defender.
  - RAN$OM E$CROW.

### Key Features
- **EhWinAFL**: A specific set of skills.
- **Backend**: Not the best, but functional.
- **Hypervisor DoS/Detection**: Tools for detection and prevention.
- **Execution Graph Tools**: Including block views and disassembly.
- **Flame Graphs**: Visual representation of execution flow.

### Introduction and Outline
1. **Hooking/Tracing**:
   - **Trace**: What is executing?
   - **Hooker**: Can we modify or detour the flow?
   - **Challenges and Solutions**: Frustrations, successes, and what works.
   - **Inputs**: Friendly and evil inputs, symbol support.

2. **Current Tools and Code**:
   - **GitHub Repositories**:
     - [K2](https://github.com/K2)
     - [inVtero.net](https://github.com/ShaneK2/inVtero.net)
   - **Evolution**: From CSW14 (process detection).
   - **Cross-Platform Support**: Windows, *BSD, Linux.
   - **Cross-Microarchitecture Support**: Sandy Bridge, Sky Lake, etc.
   - **Cross-Hypervisor Support**: Based on auto-magic VMCS/EPTP extraction.
   - **Nested Support**: D33P introspection.
   - **EhTrace**: Pronounced "A Trace".

3. **Techniques and Tools**:
   - **Triton**: Ideal design for binary trace.
   - **Speed Taint and Dynamic Symbolic Execution**.
   - **Replay Traces with Snapshots**.
   - **SMT/Constraint Solvers and AST Logic**.
   - **Tracer Independence and Python Integration**.

### Traditional Trace Techniques
- **Hooking**:
  - **Disassembly**: Required for hooking.
  - **Detours**: Insertion of trampolines.
  - **Stack Manipulation**: Handling arguments.
  - **Replication of Instructions**: Ensuring correct behavior.
  - **Performance**: Slow due to context switching and pointer management.

- **Debuggers**:
  - **EhTrace as an In-Proc Debugger**: Reduces context switching and avoids base pointers.
  - **Disassembly**: Not always required, but useful in some cases.
  - **Performance**: Ongoing optimization efforts.

### Hooking Execution
- **Detours**:
  - **Instruction Length Decoder**: Required for rewriting function prologs.
  - **Logging and Analysis**: Performed by specialized functions.
  - **Static and Dynamic/Jitter**: Flexible implementation.
  - **Symbol Requirements**: Needed for proper execution without breaking.
  - **Performance**: Impact on shared cache and additional code.

### Challenges
- **Debugger Performance**: Slow and expensive.
- **Context Switching**: Second process context switching is costly.
- **Conditional Breakpoints**: Exponentially more expensive.
- **Detection by Malicious Code**: Checksums and other techniques.
- **Checksums**: Used by malicious binaries to detect analysis.
- **Secure Environments**: Checksums to ensure binary integrity.

### Performance
- **Exception Pump Setup**: Main cost factor.
- **Logging, RoP Defender, and Key Escrow**: Cheap on top of the exception pump.
- **Microbenchmarks**: 20-150% performance hit.
- **Cache/Checkpoint Implementation**: Future work.
- **Dynamic On/Off Control**: Based on needs.
- **Self-Modifying Code Detection**: Detect and handle adversarial actions.
- **Theoretical Performance**: Can potentially execute faster than native code.

### EhTrace
- **Initialization**: Easy to trigger branch stepping.
- **VEH (Vector Exception Handler)**: Uses VEH under the hood.
- **Behavior Preservation**: Careful not to alter the target's behavior.
- **Ret2 Code**: Original libc work, still used today (e.g., ROP).

### Stack Hooking
- **Alternative Approach**:
  - **Manager Thread**: Load from a ROP chain pool.
  - **Memory Borrowing**: From the executing stack.
  - **Post-Condition Hooking**: Fragile and requires notification on new calls.
  - **Shadow Stack/Memory Protection**: Additional trickery needed.

### EhTrace â€“ How It Works
- **Branch Stepping**: Triggered by setting 3 bits in the VEH handler.
- **ROP Hooks**: Register a VEH handler using `CreateRemoteThread`.
- **Handler Function**: Set the 3 bits and exit with continue status.
- **Precondition Capture**: Using the exception dispatcher.
- **Control Maintenance**: Manage control in flags.

### Additional Use Cases
- **Branch Stepping**: Beyond function detours.
- **Basic Block Analysis**: Code coverage and DBI (Dynamic Binary Instrumentation) integration.
- **Emulation Considerations**: Dealing with malicious binaries and non-malicious disruptions.

### Maintaining Control
- **Page Protection**: Force exceptions on execution.
- **Intra-Block Management**: Prevent overwriting of VEH handlers.
- **Hybrid Stack Rewriting**: Combine LOP injection with EhTrace for better control.

### BlockFighting with a Hooker
- **BlockFighter**: Smart, fast, and in total control.
- **Simplified Analysis**: Using Capstone and branch steps.
- **Conditional Handling**: Follow through conditionals to complete context.
- **RJL Engine**: Enhance binary steering with near-native speed.

### Ransom Warrior
- **Key Escrow Enforcement**: Trace the binary and escape random reads.
- **Prototype Expansion**: Refine interfaces for ROP, JOP, and LOP.

### Coverage and Visualization
- **Flame Graphs**: Visualize execution history and blocks.
- **Interactive Mesh Graphs**: MSAGL graphmaps and SVG builders.
- **Symbol Integration**: Improve readability and usability.

### Upcoming Features
- **Flagfighter**: Rflags checks.
- **PageFighter**: Page protection monitoring.
- **Emu Fighter**: Emulate operations to avoid detection.
- **Private Implementations**: Tailored to specific needs.

### Questions and Demos
- **Feedback and Bug Reports**: Welcome.
- **GitHub Repository**: [K2](https://github.com/K2)

### Thank You
- **Contact and Collaboration**: For further discussions and contributions.