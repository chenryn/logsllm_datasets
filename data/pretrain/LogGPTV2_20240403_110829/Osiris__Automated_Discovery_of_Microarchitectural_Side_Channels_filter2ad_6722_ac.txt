after the execution of Seqtrigger followed by Seqreset. A negli-
gible difference between the two measurements indicates that
Seqreset actually resets the state to S0 when triggered to S1
by Seqtrigger. The check also implies that the state change ob-
served in the ﬁrst check must be caused by executing Seqtrigger.
Consequently, the input formed of the sequence triple allows
reaching the target, i.e., it represents a potential side-channel.
Triple Reordering. Osiris executes all generated triples
shortly after another. We may therefore experience undesired
edge cases caused by dirty microarchitectural states and side
effects caused by prior executions. We therefore test each
sequence multiple times (twice in our evaluation), each time
randomizing the order in which we test the fuzzed triples. We
then ignore triples that do show discontinuous behavior in
all tested permutations. This reordering ensures that we have
a negligible probability that two given sequence triples are
executed directly after each other in both runs, hence lowering
the chances of repetitive dirty states being carried over.
Applicability in Transient Execution. Osiris also allows de-
tecting whether a side channel can be used as covert channels
for transient-execution attacks. To test the transient behavior
of the side channel, Osiris executes Seqtrigger speculatively
using Retpoline as shown in previous work [87, 98]. We opted
for this variant as it has a perfect misspeculation rate requiring
no mistraining of any branch predictors [98]. Osiris allows to
optionally enable this behavior in the conﬁrmation stage.
4.4 Clustering Stage
Different sequence triples can lead to the detection of the same
side channel. For example, for cache-based side channels, ev-
ery instruction that accesses a memory address can act both as
trigger and as measurement sequence. Due to the CISC nature
of x86, many instructions explicitly (e.g., ADD) or implicitly
(e.g., PUSH) access memory. Additionally, every instruction
that ﬂushes this address acts as a reset sequence. Similarly,
in the AVX2 side channel, different AVX2 instructions can act
both as trigger and as measurement sequence.
In the clustering stage, Osiris aims at clustering the input
forwarded from the code execution stage into groups that
represent different side channels. To achieve this, we can base
our clustering on various properties of the involved instruction
sequences. Examples of instruction properties include the
instruction’s extension, memory behavior, and the general
instruction category (e.g., arithmetic or logical). Additionally,
our tests showed that the timing difference tends to be an
important clustering property. This procedure assumes that
similar side channels show similarities in the properties of
the corresponding instructions. We identify two categories of
properties that can be used for clustering, as outlined next.
Static Properties. Triples can be classiﬁed based on proper-
ties of the contained instructions, such as the instruction cate-
gory (e.g., arithmetic or logical) or the instruction extension
(e.g., AVX2 or x87-FPU). As this information is propagated
from the instructions to the clustering phase, Osiris fundamen-
USENIX Association
30th USENIX Security Symposium    1421
tally relies on this information for clustering. The clustering
stage clusters the reported triples based on the instruction set
extension of Seqtrigger and Seqmeasure. The intuition behind
this clustering is that instruction-set extensions are strong
indicators for the underlying microarchitectural root cause.
Although this process cannot remove all duplicates, it signiﬁ-
cantly reduces the number of reported triples, thus, facilitating
further analysis of the side channels.
Dynamic Properties. In addition to the static properties of
instructions, it is also possible to cluster triples based on their
dynamic effects. One of the dynamic properties Osiris sup-
ports for clustering is the observed timing difference. If multi-
ple triples lead to the same timing difference, the root cause is
likely the same, i.e., access-time differences when accessing
cached and uncached memory. Additionally, the clustering
stage may cluster the triples based on their cache behavior. As
shown by Moghimi et al. [65], performance counters can be
used for clustering triples. By executing triples while record-
ing performance counters, it is possible to dynamically ob-
serve which parts of the microarchitecture are active. This
can also help to identify the root cause easier.
5 Results
In this section, we evaluate the design choices of Osiris based
on the prototype implementation described in Section 4.
5.1 Evaluation Setup
We perform the fuzzing on 5 different CPUs and evaluate the
case studies based on our results on a more extensive set of
CPUs (cf. Table 4 and Table 5). We use a laptop with an Intel
Core i7-9750H (Coffee Lake), and 4 desktop machines with
an Intel Core i7-9700K (Coffee Lake), Intel Core i5-4690
(Haswell), AMD Ryzen 5 2500U (Zen), and AMD Ryzen
5 3550H (Zen+). All systems run Ubuntu or Arch Linux.
5.2 Performance
Before demonstrating Osiris’s ability to ﬁnd side channels,
we evaluate its performance, i.e., the number of triples tested
per second. To measure this throughput, we ﬁrst use the same
instruction sequence for Seqtrigger and Seqmeasure. For the ﬁrst
measurement, we exclude the pseudo sleep instruction, as it—
by construction—biases the code execution time. We only
report the throughput for the oldest processor, i.e., the In-
tel Core i5-4690. For this microarchitecture, there are 3377
instructions (after cleanup), leading to a total of 33772 =
11 404 129 sequence triples. A full fuzzing run terminated
in just 41 s, resulting in a throughput of 278 149 triples per
second. To identify the bottleneck of our framework, we in-
creased the number of repetitions of each triple from 1 to 10,
i.e., executed more code. In this experiment, the fuzzer took
127 s to complete (89 796 triples per second), resulting in a
runtime increase by factor 3 only.
When including the pseudo sleep instruction, the overall
runtime grows to 56 s and 271 s for 1 and 10 repetitions, re-
spectively. That is, the throughput reduces to 202 370 triples
per second (or 42 044 for 10 repetitions). This is a 37 % slow-
down compared to the ﬁrst run that excluded sleeping. Intu-
itively, sleeps imply that the fuzzer spends more time execut-
ing code. This explains the stronger impact of the actual code
execution on the overall throughput compared to code gener-
ation. Increasing the number of repetitions by 10x, therefore,
decreases the number of tested triples by a factor of 4.8. For
the actual fuzzing run, Seqtrigger and Seqmeasure are different.
Hence, the number of sequence triples increases to 33773 =
38 511 743 633, leading to a runtime of nearly 5 days.
5.3 Clustering
On the tested microarchitectures, Osiris successfully clus-
tered the reported instances into fewer than 30 clusters. On
the Intel i7-9750H, the 68 597 reported side channels were
ﬁrst clustered into 186 clusters. To further reduce the number
of clusters caused by one side-channel variant, Osiris also pro-
vides the clustering based only on Seqtrigger and Seqmeasure, as
these sequences contain the instructions causing the leakage.
Based on these two sequences, the number of clusters is only
16. Table 7 (Appendix A) shows the numbers for other CPUs.
5.4 Rediscovering Known Side Channels
A typical test for software fuzzer is the rediscovery of old
bugs, e.g., by searching for vulnerabilities in poorly tested
software, checking for well-known CVEs, or uncovering bugs
reported by prior work. Osiris also rediscovered two well-
known side channels, Flush+Reload [101] and the AVX2-based
side channel [84], as described in the following. Section 7
discusses some of the known side channels Osiris did not
rediscover and provides the reason for that.
Flush+Reload-Based Side Channel. Osiris detects a total
of 18 799 triples that can be classiﬁed as a variant of Flush+
Reload. These triples have in common that Seqreset is in either
CLFLUSH or CLFLUSHOPT, and Seqtrigger is some kind of mem-
ory load. Interestingly, we also found a new variant of Flush+
Reload that uses MOVNTDQ as Seqreset. This store instruction
with a non-temporal hint also evicts the accessed memory
address from the cache [43].
Arguably, in a practical attack, this is not very useful, as
writable shared memory is typically not a target for Flush+
Reload. However, in the case of transient-execution attacks,
where an attacker often uses Flush+Reload as a covert channel
to transfer the leaked data from the microarchitectural domain
to the architectural domain, this alternative ﬂushing method is
indeed useful. In Section 6.1, we show that the MOVNT-based
Flush+Reload can increase the leakage from 3 to 7.83 bytes
1422    30th USENIX Security Symposium
USENIX Association
s
n
o
i
t
a
v
r
e
s
b
O
14,000
7,000
0
s
n
o
i
t
a
v
r
e
s
b
O
15,000
10,000
5,000
0
s
n
o
i
t
a
v
r
e
s
b
O
40,000
20,000
0
s
n
o
i
t
a
v
r
e
s
b
O
80,000
40,000
0
s
n
o
i
t
a
v
r
e
s
b
O
60,000
40,000
20,000
0
80
160 240
50
100
100 200 300
20
100 180
900 1,0501,200
Execution time [cycles]
Execution time [cycles]
Execution time [cycles]
Execution time [cycles]
Execution time [cycles]
(a) RDRAND
(b) XSAVE
(c) MMX
(d) AVX2
(e) AVX2-x87-FPU
Figure 4: Histograms of Seqmeasure execution time depending on whether Seqtrigger was executed (solid blue) or not (dashed red).
per transient window for Meltdown-type attacks, reducing the
impact of the Flush+Reload part that is often the bottleneck.
AVX2-Based Side Channel. Osiris also found 514 instances
of the AVX-based side channel [84]. For this side channel, the
Seqtrigger and Seqmeasure contain AVX2 or AVX512 instructions,
and Seqreset is simply idling. According to Schwarz et al.
[84], a busy-wait executing for around 2 700 000 cycles would
power down the AVX2 SIMD unit. However, our manual tests
showed that a busy wait of 8000 cycles is, in fact, sufﬁcient.
Interestingly, we also observed during the manual inspec-
tion a variant of the AVX2 side channel that contains the PAUSE
in its Seqreset. Figure 4d visualizes the behavior of this new
variant for 200 000 executions. As shown in the ﬁgure, this
variant is, in fact, more stable than the variant based on busy
wait. In particular, we observed a difference of 226 cycles
between the medians of the two distributions, which is twice
the difference for triples that have a busy-wait as Seqreset.
5.5 Finding Novel Side Channels
To demonstrate the effectiveness of our fuzzer, we tested
its ability to uncover new side channels. After running our
fuzzer for 21 days, we automatically uncovered 4 different,
previously unknown side channels. Table 3 shows an overview
of the reported side channels. In the following, we brieﬂy
present each of these side channels.
RDRAND-Based Side Channel. This side channel consists
of triples having the RDRAND instructions in both Seqtrigger and
Seqmeasure, and the sleep pseudo-instruction in Seqreset. Fig-
ure 4a visualizes the behavior of this side channel for 200 000
executions. We observed a difference of 228 cycles between
the medians of the two distributions. Setting a simple thresh-
old to the average of these two medians leads to a success
rate of 84.28 % when attempting to distinguish between the
two states S0 and S1. While it is unlikely that detecting the
execution of the RDRAND instruction leads to a side-channel
attack, we demonstrate in Section 6.3 that this ﬁnding can be
used for a stealthy cross-core covert channel.
XSAVE-Based Side Channel. This side channel consists
of triples having the XSAVE or XSAVE64 instructions in both
Seqtrigger and Seqmeasure. For this side channel, Seqreset can
contain various instructions. However, we distinguish be-
tween two variants: (1) a non-transient variant that contains
LSL, RDRAND, LAR, FLD, FXRSTOR64, or FXSAVE64 instructions
in Seqreset; and (2) a transient variant that contains XSAVEOPT
instruction in addition to most x87-FPU instructions.
Figure 4b visualizes the behaviour for 200 000 executions
of a triple formed of XSAVE [R8] in both Seqtrigger and
Seqmeasure, and LAR ECX, EDX in Seqreset. We observed a
difference of 158 cycles between the medians of the two dis-
tributions. Using the average of the two medians as threshold
leads to a rather unstable behaviour, though. We observe a
success rate of only 75.10 % when attempting to distinguish
between the two states S0 and S1.
MMX Combined with x87-FPU. This side channel consists
of triples having the MMX instructions in both Seqtrigger and
Seqmeasure, and x87-FPU in Seqreset. Figure 4c shows the his-
togram for 200 000 executions of the triples. The reported
triples have a time measurement difference of 90 cycles in the
median. We could reliably distinguish between the states S0
and S1 with an accuracy of 99.99 %.
AVX2 Combined with x87-FPU. This side channel con-
sists of triples having the AVX, AVX2, AVX512, FMA, or F16C
instructions in both Seqtrigger and Seqmeasure, and x87-FPU
in Seqreset. The reported triples have a time measurement
difference in the interval of 72 to 208 cycles.
Figure 4d visualizes the behavior for 200 000 executions
of a triple formed of VFMADD132PD YMM1, YMM2, [R8] in
both Seqtrigger and Seqmeasure, and FISTP [R8] in Seqreset.
We observe a difference of 166 cycles between the medians
of the two distributions. A threshold can distinguish the two
states S0 and S1 at a success rate of 99.95 %. In Section 6.1,
we show that this side-channel leakage can be used for a fast
covert channel for Spectre attacks.
6 Case Studies
In this section, we present three case studies based on the
newly detected side channels (cf. Section 5). Section 6.1
demonstrates that the newly discovered side channels can
be used for transient-execution attacks. They can be used in
Spectre attacks to increase the space of possible gadgets, as
well as in Meltdown-type attacks to increase the leakage. Sec-
tion 6.2 introduces a novel microarchitectural attack against
USENIX Association
30th USENIX Security Symposium    1423
Table 3: Overview of the novel side channels.
Side Channel Name Example Seqtrigger
RDRAND
XSAVE
MMX-x87-FPU
AVX2-x87-FPU
RDRAND
XSAVE [R8]
PHADDD MM1, [R8]
VDMADD132PD YMM1, YMM2, [R8]
Example Seqmeasure
RDRAND
XSAVE [R8]
PHADDD MM1, [R8]