tors v, w such that (Az) ◦ (Bz) = Cz with z = (1, v, w) ∈ Fm where ◦ denotes
the entry-wise product. For capturing arithmetic circuit satisfaction, A, B, C
represent the gates, v the public inputs, and w the private inputs and wire
values.
37
A.4 Public-key Encryption
Deﬁnition 14. A public key encryption scheme Ω = (KGen, Enc, Dec) consists
of the following PPT algorithms:
KGen(1λ) : Given a security parameter λ it outputs the secret key sk and public
Enc(pk, m) : Given a public key pk and a message m ∈ M it outputs a ciphertext
Dec(sk, C) : Given a secret key sk and a ciphertext c it outputs a message m ∈
key pk with message space M.
c.
M ∪ {⊥}.
We say that an encryption scheme Ω is perfectly correct if for all λ ∈ N, for
all (sk, pk) ← KGen(1λ) and for all m ∈ M it holds that Dec(sk, Enc(pk, m)) =
m. Below, we recall the standard notion of indistinguishability under chosen
plaintext attacks (IND-CPA security).
Deﬁnition 15 (IND-CPA). A public key encryption scheme Ω is IND-CPA
secure, if for all PPT adversaries A it holds that
(sk, pk) ← KGen(1λ), b ←${0, 1},
(m0, m1, st) ← A(pk), b∗ ← A(Enc(pk, mb), st) :
b = b∗
 ≈λ
Pr
.
1
2
A.5 Signature Schemes
A signature scheme Σ = (KGen, Sign, Verify) consists of the following PPT algo-
rithms:
KGen(1λ) : On input security parameter λ it outputs a signing key sk and a
Sign(sk, m) : On input a secret key sk and a message m ∈ M it outputs a
Verify(pk, m, σ) : On input a public key pk, a message m ∈ M and a signature
veriﬁcation key pk with associated message space M.
signature σ.
σ it outputs a bit b ∈ {0, 1}.
We note that for a signature scheme many independently generated public keys
may be with respect to the same parameters PP, e.g., some elliptic curve group
parameters. In such a case we use an additional algorithm PGen and PP ←
PGen(1λ) is then given to KGen. We assume that a signature scheme satisﬁes
the usual (perfect) correctness notion. Now we recall the standard EUF-CMA
security notion of signatures.
Deﬁnition 16 (EUF-CMA). A signature scheme Σ is EUF-CMA secure, if for
all PPT adversaries A
(sk, pk) ← KGen(1λ), (m(cid:63), σ(cid:63)) ← ASign(sk,·)(pk) :
Verify(pk, m(cid:63), σ(cid:63)) = 1 ∧ m(cid:63) /∈ QSign
Pr
≈λ 0,
(cid:34)
(cid:35)
where the environment keeps track of the queries to the signing oracle via QSign.
38
For our compiler we also require one-time signature schemes that are sEUF-CMA
secure (also called sOTS schemes).
Deﬁnition 17 (Strong One-Time Signature Scheme). A strong one-time
signature scheme ΣOT is a signature scheme Σ which satisﬁes the following
unforgeability notion: For all PPT adversaries A
(cid:35)
≈λ 0,
(cid:34)
(sk, pk) ← KGen(1λ), (m(cid:63), σ(cid:63)) ← ASign(sk,·)(pk) :
Verify(pk, m(cid:63), σ(cid:63)) = 1 ∧ (m(cid:63), σ(cid:63)) /∈ QSign
Pr
where the oracle Sign(sk, m) := Σ.Sign(sk, m) can only be called once.
A.6 Schnorr Signatures
We recall the Schnorr signature scheme [Sch90] together with the required Adapt
algorithm (cf. [DS19]) in Fig. 5. It can be shown to provide EUF-CMA security
in the random oracle model (ROM) under the DLP in G by using the now
popular rewinding technique [PS96] (cf. also [KMP16] for a recent treatment on
tightness and optimality of such reductions). In the following we present Schnorr
signatures with respect to a common setup, i.e., PP ← PGen(1λ) are given to all
instances of KGen and let GGen be a group generator that on input 1λ outputs
the description of a prime order group G = (G, g, p) with order p s.t. λ = log2 p
and generator g. Recall, that in addition Schnorr requires a collision resistant
hash function H : G × M → Zp (formally sampled uniformly at random from
a family {Hk}k∈K of hash functions) and thus we have PP := (G, H) (which we
assume to be an implicit input to all algorithms). We recall a lemma from [DS19]
showing that Schnorr signatures using the Adapt algorithm in Fig. 5 satisﬁes the
signature adaption notion in Deﬁnition 5.
Lemma 1 ([DS19]). Schnorr signatures are adaptable according to Deﬁnition 5.
A.7 Groth’s Strong One-Time Signatures
In Fig. 6 we recall the strong one-time signature scheme from Groth [Gro06] and
its security below:
Theorem 5 ([Gro06]). Assuming hardness of computing discrete logarithms
and collision-resistance of the hash function, the scheme (PGenots, KGenots, Signots,
Verifyots) described in Fig. 6 is a strong one-time signature scheme for signing
messages m ∈ {0, 1}∗ with perfect correctness.
A.8 BDH Knowledge Assumption
Let BGen be a PPT algorithm that, on input a security parameter λ, outputs
BG = (p, G1, G2, GT , e, g, ˆg) for generators g and ˆg of G1 and G2, respectively,
and Θ(λ)-bit prime p.
39
PGen(1λ)
- G ← GGen(1λ); H ←${Hk}k∈K;
- return PP := (G, H);
KGen(PP):
- Parse PP = ((G, g, p), H);
- x ←$ Zp;
- return (sk, pk) := (x, gx).
Sign(sk, m):
- Parse sk = x;
- r ←$ Zp; R := gr; c := H(R(cid:107)m); y := r + x · c mod p
- return σ := (c, y).
Verify(pk, m, σ):
- Parse pk = gx; σ = (c, y);
- if c = H((gx)
−cgy, m) return 1 else return 0.
Adapt(pk, m, σ, ∆):
- Parse pk = gx; σ = (c, y); ∆ ∈ Zp;
(cid:48)
- pk
- return σ
:= y + c · ∆ mod p;
(cid:48)
).
:= gx · g∆; y
:= (c, y
(cid:48)
(cid:48)
Fig. 5. Schnorr signatures.
Assumption 1 (BDH-Knowledge Assumption [ABLZ17]) We say that BGen
is BDH-KE secure for R if for any λ, (R, auxR) ∈ im(R(1λ)), and PPT adver-
sary A there exists a PPT extractor ExtBDHA , such that
ωA ←r RND(A),
 ≈λ 0.
Pr
(V, ˆV ||a) ← (A||ExtBDHA )(R, auxR; ωA) :
e(V, ˆg) = e(g, ˆV ) ∧ ga (cid:54)= V
Note that the BDH assumption can be considered as a simple case of the PKE
)}n
assumption of [DFGK14] (where A is given as an input the tuple {(gxi
for some n ≥ 0, and assumed that if A outputs (V, ˆV ) then she knows (a0, a1, . . . , an),
i=0 aixi as used in the case of asymmetric pairings in [DFGK14].
such that V = g
Thus, BDH can be seen as an asymmetric-pairing version of the original and by
now well established KoE assumption due to Damgård [Dam92].
(cid:80)n
, ˆgxi
i=0
B Omitted Proofs
B.1 Proof of Theorem 2
Proof. (i: Completeness): This is straight forward from the construction.
40
PGenots(1λ)
- G ← GGen(1λ); H ←${Hk}k∈K;
- return PP := (G, H);
KGenots(PP):
- Parse PP = ((G, g, p), H);
- xs, ys, rs, ss ←$ Zp;
- fs := gxs ; hs := gys ; cs := grs
- return (sk, pk) := ((xs, ys, rs, ss), (fs, hs, cs)).
s · hss
s ;
Signots(sk, m):
- Parse sk = (xs, ys);
- r ←$ Zp; z := xs(rs − r) + ys · ss − H(m) · y
- return σ := (r, z).
−1
s mod p
Verifyots(pk, m, σ):
- Parse pk = (fs, hs, cs); σ = (r, z);
- if cs = gH(m) · f r
s · hs
s return 1 else return 0.
Fig. 6. Groth’s strong one-time signature scheme.
(ii: Subversion zero-knowledge): The intuition of proving Sub-ZK is that,
since here the prover (and consequently the simulator) does not trust to the CRS
generator, so relying on the knowledge assumption of the underlying SNARK,
if Vcrs(crs, ζ) = 1 (or more precisely Vcrs(crsΠ, ζΠ) = 1) then there is an
extractor which can extract the trapdoor tcΠ similar to [ABLZ17] (under the
BDH assumption) and [Fuc18] (under the SKE assumption Def. 2.15). Then the
simulator Π.Sim takes tcΠ together with crsΠ and x, and simulates πSim, which
is the simulated proof in the original Sub-zk-SNARK.
Let the knowledge assumption (depending on the underlying SNARK) hold.
Let Z be a subverter that computes crs so as to break the Sub-ZK property.
That is, Z(1λ, ωZ) outputs (crs, ζ, auxZ). Let A be the adversary from Fig. 7.
Note that RND(A) = RND(Z). Under the knowledge assumption, there exists
an extractor ExtZ, such that if Π.Vcrs(crsΠ, ζΠ) = 1 then ExtZ(1λ, ωZ) outputs
tcΠ, such that πΠ = πSim. Note that πΠ is the real proof in the Sub-zk-SNARK.
A(crs; ωZ)
(crs, auxZ) ← Z(1λ; ωZ); return pk;
ExtZ(1λ, ωZ)
return tcΠ;
Fig. 7. The extractor and the constructed adversary A from the Sub-ZK proof.
41
Fix concrete values of λ, (x, w) ∈ RL, ωZ ∈ RND(Z), and run ExtZ(1λ, ωZ)
to obtain tcΠ. Thus, it suﬃces to show that Vcrs(crsΠ, ζΠ) = 1 and (x, w) ∈ R
implies that
O0(x, w) = P(crs, x, w) = πΠ,
O1(x, w) = Sim(crs, x, tcΠ) = πSim
have the same distribution. This holds since based on the Sub-ZK of the under-
lying SNARK (e.g., [ABLZ17, Fuc18]) if Vcrs(crsΠ, ζΠ) = 1 and (x, w) ∈ RL,
then πΠ and πSim have the same distribution. Hence, O0 and O1 have the same
distribution and thus, π is Sub-ZK (under BDH [ABLZ17] or SKE [Fuc18] as-
sumption).
(iii: Strong simulation extractability): This is straight forward from the
Theorem 1.
B.2 Proof of Theorem 4
i=1 ) = 1 ∧ (x, w) ∈ R, then V(crs, x, P(crs, x, w)) = 1.
Proof. (i: Completeness): This is straight forward from the construction of SE
i=1 ), x, w) ← A(1λ) and Vcrs(1λ, crs,
updatable SNARKs in Fig. 4. If (crs, (ζi)i=n
(ζi)i=n
(ii: Updatable zero-knowledge): Underlying the subvertible CRSs property
of updatable SNARKs (i.e., the trapdoor extraction for subvertible CRSs in
Lemma 4 of [GKM+18]), suppose that there exists a PPT subvertor Z that out-
puts a crs and ζ such that Vcrs(1λ, crs, ζ) = 1 (or more precisely Vcrs(1λ, crsΠ,
ζΠ) = 1) with non-negligible probability. Then, by using a proper knowledge as-
sumption (i.e., the 0-MK assumption that is equivalent to the B-KEA assumption
in [GKM+18]) there exists a PPT extractor ExtZ that, given the random tape
ωZ of Z as input, outputs tcΠ. In this case adversary A is the adversary from
Fig. 7 and RND(A) = RND(Z).
Also from the extractability property of the updating procedure (i.e., the
trapdoor extraction for the updatable CRS in Lemma 5 of [GKM+18]) if Z
outputs crsup and ζup, then under the knowledge assumption there exists a
PPT extractor ExtZ that, given the randomness of Z as input, outputs tcΠ
(i.e., under the q-MK and the q-MC assumptions of [GKM+18]). For this case
adversary A is the adversary from Fig. 8 and RND(A) = RND(Z). Now to
A(crs; ωZ)
(crs, auxZ) ← Z(crs; ωZ); return pk;
ExtZ(crs; ωZ)
return tcΠ;
Fig. 8. The extractor and the constructed adversary A from the Sub-ZK proof.
prove updatable zero-knowledge, we use the extractor ExtZ and Π.Sim algorithm
that produces proofs πSim when provided the extracted trapdoor, such that any
42
proof πSim has the same distribution as a real proof πΠ (i.e., for the existence of
such extractor ExtZ and Π.Sim algorithms, one can use the ones in Theorem 3 of
of [GKM+18]). Finally Π.Sim can generate locally (sk, pk) ← Σ.KGen(1λ); (skOT,
pkOT) ← ΣOT.KGen(1λ) and then compute σOT ← ΣOT.Sign(skOT, πΠ||x||pk||σ)
such that π = (πSim, pk, σ, pkOT, σOT) has the same distribution as a real proof
π = (πΠ, pk, σ, pkOT, σOT). Note that πSim is the simulated proof and πΠ is the
real proof in the original updatable SNARK.
i=1 , auxZ) ← Z(1λ, ωZ);
(crsup, ζup) ← Ucrs(1λ, crs,{ζi}i=n
i=1 );
if Vcrs(crs,{ζi}i=n
tc
Expup−se(A, λ)
1 : ωZ ←$ RND(Z); (crs = (crsΠ, cpk),{ζi}i=n
2 :
3 :
4 :
5 : ωA ←$ RND(A); (x, π) ← AO(crs,tc,·)(crs, crsup, auxZ, ωA);
6 : Parse π := (πΠ, pk, σ, pkOT, σOT);
7 :
8 :
9 : else return 0.
w ← ExtA(crs, crsup, ωA);
if (x, π) (cid:54)∈ Q ∧ V(crsup, x, π) = 1 ∧ (x, w) (cid:54)∈ R return 1.
cpk ← ExtZ(1λ, crs, crsup{ζi}i=n
i=1 ) = 0 then return 0
i=1 , ωZ);
up
O(crs, tc, x)
(sk, pk) ← Σ.KGen(1λ); (skOT, pkOT) ← ΣOT.KGen(1λ);
cpk); σ ← Σ.Sign(sk, pkOT);
1 :
2 : πΠ ← Π.Sim(crsup, x, (⊥, ⊥); tc
3 : σOT ← ΣOT.Sign(skOT, πΠ||x||pk||σ);
4 : π := (πΠ, pk, σ, pkOT, σOT);
5 : Q := Q ∪ {(x, π)}; T := T ∪ {pkOT};
6 :
return π;
up
Fig. 9. Experiment Expup−se(A, λ) for SE updatable SNARKs from Lamassu.
(iii: Updatable strong simulation extractability): For the sake of simplic-
ity, let the subverter Z make only a single update after an honest setup or he ﬁrst
generates the CRS and after that, we have only a single update by an honest
updater (this can easily be generalized by using Lemma 6 of [GKM+18], i.e.,
single adversarial updates imply full updatable SE).
We remind that based on the subvertible CRSs of the updatable SNARKs
(i.e., the trapdoor extraction for subvertible CRSs in Lemma 4 in [GKM+18]),
it is possible to extract the adversary’s contribution to the trapdoor when the
adversary generates the CRS itself. Also from the updatable property of the
updatable SNARKs (i.e., the trapdoor extraction for updatable CRSs in Lemma
5 of [GKM+18]), it is possible to extract it when the adversary updates an honest
CRS. To collapse chains of honest updates into an honest setup it is convenient
that the trapdoor contributions of the setup and update commute in our scheme.
As the trapdoor in our scheme consists of all the randomness used by these
algorithms, we will from now on refer to chains of honest updates and (single)
honest setups interchangeably. Note that in updatable SNARKs, the proof ζ
43
depends only on the relation and the randomness of the update algorithm and
is independent of the CRS being updated.
Our proof is based on Theorem 1 where we replace the underlying NIZK
with an updatable SNARK and also use simulation trapdoors of the SNARK to
simulate proofs. Based on the updatability property, if A outputs crsup and ζup,
then by the respective knowledge assumption of the SNARK (i.e., the q-MK and
the q-MC assumptions in Lemma 5 of [GKM+18]) and the one of the updatable
signature scheme implies that there exists a PPT extractor ExtA, that, given
the randomness of A as input, outputs tc = (tcΠ, tccpk). We note that the SE
adversary A in the updatable case besides seeing a pair (crs, π) may even already
did update the crs. Thus, here A has more power than the SE adversary against
Sub-zk SNARK in Section 4.1 and the one in Theorem 1. To make the proof
more precise, we use the subverter Z for updating the crs and the adversary A
against the SE property. Note that Z and A can communicate to each other and
RND(Z) = RND(A).
We recall the experiment for updatable SE in Fig. 9 and we highlight changes
by pointing to the line numbers in the experiment or the oracle.
Game0 This is the original experiment in Fig. 9.
i=1 , ωZ);
Π );⊥);
Π and generates the
Game1 This game is the same as Game0, but Sim uses tcup
simulated proof πΠ.
Exp: 5: tcup ← ExtZ(1λ, crs, crsup,{ζi}i=n
O: 2: πΠ ← Sim(crsup, x, (⊥, tcup
Winning condition: Let Q be the set of (x, π) pairs, let T be the set of veriﬁ-
cation keys generated by O. The game outputs 1 iﬀ: (x, π) (cid:54)∈ Q∧ V(crsup, x, π) =
1 ∧ pkOT (cid:54)∈ T ∧ cpk = pk · µ(csk − sk).
Game0 → Game1 If the underlying one-time signature scheme is strongly un-
forgeable, and that the underlying updatable SNARK is knowledge sound, and
the zero-knowledge property of the updatable SNARK holds, then we have
Pr[Game0] ≤ Pr[Game1] + negl(λ).
The reason is that if (x, w) (cid:54)∈ Q and pkOT has been generated by O, then the
(x, πΠ, pk) is a valid message/signature pair. Hence by the unforgeability of the
σOT signature scheme, we know that the case (x, w) (cid:54)∈ Q and pkOT generated by
O, happens with negligible probability, which allows us to focus on pkOT (cid:54)∈ T .
The extracted w is unique for all valid witnesses. Further, if some witness is valid
for L and that (x, w) (cid:54)∈ R, we know it must be the case that due to the zero-
knowledge property of the updatable SNARK and the property of the updating
procedure that if Vcrs output 1, then there is an extractor that extracts the tc
(i.e., the trapdoor extraction for subvertible CRSs in Lemma 4 of [GKM+18]
and the one of the updatable signature scheme implies that it is possible to
extract the trapdoor when the adversary generates the CRS itself), there exists
some tcup
cpk such that one can simulate the proof in a way that no
polynomial-time algorithm can distinguish them.
Π and tcup
44
i=1 , ωZ)
Game2 This game is the same as Game1, but the only diﬀerence is that A updates
the crs.
Exp: 1: (crsΠ, tcΠ, ζΠ) ← Π.KGen(1λ); (csk, cpk, ζcpk) ← Σ.KGen(1λ); crs :=
(crsΠ, cpk), tc := (tcΠ, csk), ζ := (ζΠ, ζcpk); return (crs, ζ);
Exp: 2: ωZ ←$ RND(Z); (crsup, ζup, auxZ) ← Z(1λ, crs,{ζi}i=n
Game1 → Game2 This is straightforward from the property of the updating
procedure that if Vcrs output 1, then there is an extractor that extracts the tc
(i.e the trapdoor extraction for updatable CRS in Lemma 5 of [GKM+18] and the
knowledge assumption of the updatable signature scheme, that it is possible to
extract it when the adversary updates an honest CRS) and the zero-knowledge
property of the updatable SNARK. Thus we have Pr[Game0] ≤ Pr[Game1] +
negl(λ).
Game3 This game is the same as Game2, but ∆ ←$ H is replaced in cpk =
µ(∆) · pk.
Exp: 1: ∆ ←$ H;
Exp: 2: crs := (crsΠ, cpk · µ(∆)), tc := (tcΠ, csk);
Winning condition: Let Q be the set of (x, π) pairs, let T be the set of veriﬁca-
tion keys generated by the O. The game outputs 1 iﬀ: (x, π) (cid:54)∈ Q∧V(crsup, x, π) =
1 ∧ pkOT (cid:54)∈ T ∧ cpk · µ(∆) = pk · µ(∆) · µ(csk − sk).
Game2 → Game3 It is straightforward from the Theorem 3, adaptable and up-
datable EUF-CMA property of Σ.
45