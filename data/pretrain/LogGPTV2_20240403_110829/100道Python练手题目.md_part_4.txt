        for i in range(20):
            canvas.create_oval(250 - top,250 - bottom,250 + top,250 + bottom)
            top -= 5
            bottom += 5
        canvas.pack()
        mainloop()
#### **实例 064：画椭圆、矩形**
题目 利用 ellipse 和 rectangle 画图。
程序分析 无。
    if __name__ == '__main__':
        from tkinter import *
        canvas = Canvas(width = 400,height = 600,bg = 'white')
        left = 20
        right = 50
        top = 50
        num = 15
        for i in range(num):
            canvas.create_oval(250 - right,250 - left,250 + right,250 + left)
            canvas.create_oval(250 - 20,250 - top,250 + 20,250 + top)
            canvas.create_rectangle(20 - 2 * i,20 - 2 * i,10 * (i + 2),10 * ( i + 2))
            right += 5
            left += 5
            top += 10
        canvas.pack()
        mainloop()
#### **实例 065：画组合图形**
题目 一个最优美的图案。
程序分析 无。
    import math
    from tkinter import *
    class PTS:
        def __init__(self):
            self.x = 0
            self.y = 0
    points = []
    def LineToDemo():
        screenx = 400
        screeny = 400
        canvas = Canvas(width = screenx,height = screeny,bg = 'white')
        AspectRatio = 0.85
        MAXPTS = 15
        h = screeny
        w = screenx
        xcenter = w / 2
        ycenter = h / 2
        radius = (h - 30) / (AspectRatio * 2)  20
        step = 360 / MAXPTS
        angle = 0.0
        for i in range(MAXPTS):
            rads = angle * math.pi / 180.0
            p = PTS()
            p.x = xcenter + int(math.cos(rads) * radius)
            p.y = ycenter - int(math.sin(rads) * radius * AspectRatio)
            angle += step
            points.append(p)
        canvas.create_oval(xcenter - radius,ycenter - radius,
                           xcenter + radius,ycenter + radius)
        for i in range(MAXPTS):
            for j in range(i,MAXPTS):
                canvas.create_line(points[i].x,points[i].y,points[j].x,points[j].y)
        canvas.pack()
        mainloop()
    if __name__ == '__main__':
        LineToDemo()
#### **实例 066：三数排序**
题目 输入 3 个数 a,b,c，按大小顺序输出。
程序分析 同实例 005。
    raw=[]
    for i in range(3):
        x=int(input('int%d: '%(i)))
        raw.append(x)
    for i in range(len(raw)):
        for j in range(i,len(raw)):
            if raw[i]>raw[j]:
                raw[i],raw[j]=raw[j],raw[i]
    print(raw)
    raw2=[]
    for i in range(3):
        x=int(input('int%d: '%(i)))
        raw2.append(x)
    print(sorted(raw2))
#### **实例 067：交换位置**
题目
输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。
程序分析 无。
    li=[3,2,5,7,8,1,5]
    li[-1],li[li.index(min(li))]=li[li.index(min(li))],li[-1]
    m=li[0]
    ind=li.index(max(li))
    li[0]=li[ind]
    li[ind]=m
    print(li)
#### **实例 068：旋转数列**
题目 有 n 个整数，使其前面各数顺序向后移 m 个位置，最后 m
个数变成最前面的 m 个数
程序分析 无。
    from collections import *
    li=[1,2,3,4,5,6,7,8,9]
    deq=deque(li,maxlen=len(li))
    print(li)
    deq.rotate(int(input('rotate:')))
    print(list(deq))
#### **实例 069：报数**
题目 有 n 个人围成一圈，顺序排号。从第一个人开始报数（从 1 到 3
报数），凡报到 3 的人退出圈子，问最后留下的是原来第几号的那位。
程序分析 无。
    if __name__ == '__main__':
        nmax = 50
        n = int(input('请输入总人数:'))
        num = []
        for i in range(n):
            num.append(i + 1)
        i = 0
        k = 0
        m = 0
        while m  self.get_len():
                print("给定位置不合理")
                return
            if index == 1:
                self.head = self.head.next
                return
            temp = self.head
            cur_pos = 0
            while temp is not None:
                cur_pos += 1
                if cur_pos == index-1:
                    temp.next = temp.next.next
                temp = temp.next
        def insert(self, pos, node):
            if pos  self.get_len():
                print("插入结点位置不合理")
                return
            temp = self.head
            cur_pos = 0
            while temp is not Node:
                cur_pos += 1
                if cur_pos == pos-1:
                    node.next = temp.next
                    temp.next =node
                    break
                temp = temp.next
        def reverse(self, head):
            if head is None and head.next is None:
                return head
            pre = head
            cur = head.next
            while cur is not None:
                temp = cur.next
                cur.next = pre
                pre = cur
                cur = temp
            head.next = None
            return pre
        def print_list(self, head):
            init_data = []
            while head is not None:
                init_data.append(head.get_data())
                head = head.next
            return init_data
    if __name__=='__main__':
        head=Node('head')
        link=List(head)
        for i in range(10):
            node=Node(i)
            link.append(node)
        print(link.print_list(head))
#### **实例 073：反向输出链表**
题目 反向输出一个链表。
程序分析 无。
    class Node:
        def __init__(self, data):
            self.data = data
            self.next = None
        def get_data(self):
            return self.data
    class List:
        def __init__(self, head):
            self.head = head
        def is_empty(self): 
            return self.get_len() == 0
        def get_len(self):  
            length = 0
            temp = self.head
            while temp is not None:
                length += 1
                temp = temp.next
            return length
        def append(self, node):
            temp = self.head
            while temp.next is not None:
                temp = temp.next
            temp.next = node
        def delete(self, index): 
            if index  self.get_len():
                print("给定位置不合理")
                return
            if index == 1:
                self.head = self.head.next
                return
            temp = self.head
            cur_pos = 0
            while temp is not None:
                cur_pos += 1
                if cur_pos == index-1:
                    temp.next = temp.next.next
                temp = temp.next
        def insert(self, pos, node):
            if pos  self.get_len():
                print("插入结点位置不合理")
                return
            temp = self.head
            cur_pos = 0
            while temp is not Node:
                cur_pos += 1
                if cur_pos == pos-1:
                    node.next = temp.next
                    temp.next =node
                    break
                temp = temp.next
        def reverse(self, head):
            if head is None and head.next is None:
                return head
            pre = head
            cur = head.next
            while cur is not None:
                temp = cur.next
                cur.next = pre
                pre = cur
                cur = temp
            head.next = None
            return pre
        def print_list(self, head):
            init_data = []
            while head is not None:
                init_data.append(head.get_data())
                head = head.next
            return init_data
    if __name__=='__main__':
        head=Node('head')
        link=List(head)
        for i in range(10):
            node=Node(i)
            link.append(node)
        print(link.print_list(head))
        print(link.print_list(link.reverse(head)))
#### **实例 074：列表排序、连接**
题目 列表排序及连接。
程序分析 排序可使用 sort() 方法，连接可以使用 + 号或 extend() 方法。
    a=[2,6,8]
    b=[7,0,4]
    a.extend(b)
    a.sort()
    print(a)
#### **实例 075：不知所云**
题目 放松一下，算一道简单的题目。
程序分析 鬼知道是什么。
    if __name__ == '__main__':
        for i in range(5):
            n = 0
            if i != 1: n += 1
            if i == 3: n += 1
            if i == 4: n += 1
            if i != 4: n += 1
            if n == 3: print (64 + i)
#### **实例 076：做函数**
题目 编写一个函数，输入 n 为偶数时，调用函数求 1/2+1/4+...+1/n, 当输入 n
为奇数时，调用函数 1/1+1/3+...+1/n
程序分析 无。
    def peven(n):
        i = 0
        s = 0.0
        for i in range(2,n + 1,2):
            s += 1.0 / i
        return s
    def podd(n):
        s = 0.0
        for i in range(1, n + 1,2):