 448 bytes
(1 row)
```
通过测试，我们可以看到PostgreSQL 9.6在vacuum freeze这块改进非常实用，特别是当数据库很庞大，并且存储了大量的历史静态数据时，在发生vacuum freeze时，IO不会像以前那样飙升了。  
2\. 9.5测试结果  
生成vm文件  
```
postgres=# vacuum analyze test;
VACUUM
Time: 17441.652 ms
```
确认VM文件已生成  
```
postgres=# select * from pg_stat_file(pg_relation_filepath('test')||'_vm');
 size  |         access         |      modification      |         change         | creation | isdir 
-------+------------------------+------------------------+------------------------+----------+-------
 49152 | 2016-10-02 14:11:17+08 | 2016-10-02 14:11:34+08 | 2016-10-02 14:11:34+08 |          | f
(1 row)
```
记录当前XLOG位置  
```
postgres=# select pg_current_xlog_location();
 pg_current_xlog_location 
--------------------------
 5/A7FD5AC8
(1 row)
```
执行第一次vacuum freeze   
```
postgres=# vacuum freeze test;
VACUUM
Time: 9889.702 ms
```
记录XLOG位置  
```
postgres=# select pg_current_xlog_location();
 pg_current_xlog_location 
--------------------------
 5/CCB2DAB8
(1 row)
```
计算第一次VACUUM FREEZE产生了多少XLOG  
```
postgres=# select pg_size_pretty(pg_xlog_location_diff('5/CCB2DAB8', '5/A7FD5AC8'));
 pg_size_pretty 
----------------
 587 MB
(1 row)
```
不产生数据变更，开始接下来的vacuum freeze。    
9.5的版本，接下来的VACUUM FREEZE同样需要扫描全表，因为VM中未记录frozen pages。   
```
postgres=# vacuum freeze test;
VACUUM
Time: 7191.695 ms
postgres=# select pg_current_xlog_location();
 pg_current_xlog_location 
--------------------------
 5/CCB2DAB8
(1 row)
postgres=# vacuum freeze test;
VACUUM
Time: 7159.769 ms
postgres=# select pg_current_xlog_location();
 pg_current_xlog_location 
--------------------------
 5/CCB2DAB8
(1 row)
postgres=# vacuum freeze verbose test;
INFO:  vacuuming "public.test"
INFO:  "test": found 0 removable, 64000000 nonremovable row versions in 346248 out of 346248 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 0 unused item pointers.
Skipped 0 pages due to buffer pins.
0 pages are entirely empty.
CPU 0.00s/7.18u sec elapsed 7.19 sec.
INFO:  vacuuming "pg_toast.pg_toast_16682"
INFO:  index "pg_toast_16682_index" now contains 0 row versions in 1 pages
DETAIL:  0 index row versions were removed.
0 index pages have been deleted, 0 are currently reusable.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
INFO:  "pg_toast_16682": found 0 removable, 0 nonremovable row versions in 0 out of 0 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 0 unused item pointers.
Skipped 0 pages due to buffer pins.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM
Time: 7206.649 ms
```
消耗几个事务后，重新vacuum freeze。   
```
postgres=# select txid_current();
 txid_current 
--------------
    128001924
(1 row)
postgres=# select txid_current();
 txid_current 
--------------
    128001925
(1 row)
postgres=# select txid_current();
 txid_current 
--------------
    128001926
(1 row)
postgres=# select txid_current();
 txid_current 
--------------
    128001927
(1 row)
postgres=# vacuum freeze verbose test;
INFO:  vacuuming "public.test"
INFO:  "test": found 0 removable, 64000000 nonremovable row versions in 346248 out of 346248 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 0 unused item pointers.
Skipped 0 pages due to buffer pins.
0 pages are entirely empty.
CPU 0.00s/7.18u sec elapsed 7.19 sec.
INFO:  vacuuming "pg_toast.pg_toast_16682"
INFO:  index "pg_toast_16682_index" now contains 0 row versions in 1 pages
DETAIL:  0 index row versions were removed.
0 index pages have been deleted, 0 are currently reusable.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
INFO:  "pg_toast_16682": found 0 removable, 0 nonremovable row versions in 0 out of 0 pages
DETAIL:  0 dead row versions cannot be removed yet.
There were 0 unused item pointers.
Skipped 0 pages due to buffer pins.
0 pages are entirely empty.
CPU 0.00s/0.00u sec elapsed 0.00 sec.
VACUUM
Time: 7208.527 ms
postgres=# select pg_current_xlog_location();
 pg_current_xlog_location 
--------------------------
 5/CCB2DEA8
(1 row)
postgres=# select pg_size_pretty(pg_xlog_location_diff('5/CCB2DEA8', '5/CCB2DAB8'));
 pg_size_pretty 
----------------
 1008 bytes
(1 row)
```
## pg_visibility插件
使用pg_visibility插件，可以查看VM文件的内容。检测VM文件是否损坏，truncate损坏的vm文件等操作。  
https://www.postgresql.org/docs/9.6/static/pgvisibility.html  
```
postgres=# create extension pg_visibility;
CREATE EXTENSION
postgres=# select * from pg_visibility_map('test', 0);
 all_visible | all_frozen 
-------------+------------
 t           | t
(1 row)
postgres=# select * from pg_visibility_map('test');
 blkno | all_visible | all_frozen 
-------+-------------+------------
     0 | t           | t
     1 | t           | t
     2 | t           | t
.......
postgres=# select * from pg_visibility_map_summary('test');
 all_visible | all_frozen 
-------------+------------
       44248 |      44248
(1 row)
postgres=# select * from pg_visibility('test', 0);
 all_visible | all_frozen | pd_all_visible 
-------------+------------+----------------
 t           | t          | t
(1 row)
postgres=# select * from pg_visibility('test');
 blkno | all_visible | all_frozen | pd_all_visible 
-------+-------------+------------+----------------
     0 | t           | t          | t
     1 | t           | t          | t
     2 | t           | t          | t
     3 | t           | t          | t
     4 | t           | t          | t
     5 | t           | t          | t
     6 | t           | t          | t
......
```
检查VM文件是否损坏，如果有记录返回，说明数据库发生了crash，并且VM文件已损坏。  
原理是检查页级别为all frozen或者all visibility的页，如果里面有不是freeze或者visibility的记录，则说明页级标记与行级标记不一致。需要修复。  
```
postgres=# select * from pg_check_frozen('test');
 t_ctid 
--------
(0 rows)
postgres=# select * from pg_check_visible('test');
 t_ctid 
--------
(0 rows)
```
修复VM文件  
```
postgres=# select * from pg_truncate_visibility_map('test');
 pg_truncate_visibility_map 
----------------------------
(1 row)
postgres=# vacuum analyze test;
VACUUM
```
出现不一致的原因  
The page-level PD_ALL_VISIBLE bit has the same meaning as the all-visible bit in the visibility map, but is stored within the data page itself rather than a separate data structure.   
These will normally agree, but the page-level bit can sometimes be set while the visibility map bit is clear after a crash recovery;  
## 小结
PostgreSQL 9.6对VM文件的功能进行了扩展，实用2个比特位标记该页的记录数是否是clean的，对所有事务可见；以及标记该页的所有记录数是否都是FREEZE的。  
在进行freeze操作时，或者触发autovacuum freeze prevent wrapped object时，会自动跳过标记为frozen的page，从而大幅减少vacuum freeze的IO。  
对于数据库中有大量静态数据，并且又有高并发的写事务并行存在时，特别实用。  
同时PostgreSQL 9.6还提供了强制vacuum freeze的接口，不跳过任何页。 保留这样的接口，目的是在vm文件损坏时可用，VM文件也可以通过这种方法自动修复。  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")