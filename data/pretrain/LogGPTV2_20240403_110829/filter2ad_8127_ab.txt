图12：命令行下搜索文件
但是大多数人现在都使用Powershell，而使用Powershell又找不到这个文件，因为它会陷入无限循环:
图13：Powershell搜索
(输出被截断，因为命令总是循环打印这两个文件夹...)
搜索“123.txt”(例如:“Get-ChildItem -Path C:\test -Filter 123.txt -Recurse
-ErrorAction SilentlyContinue -Force”)将永远不会找到该文件(并且永远不会结束)。
我还用不同的AntiVirus产品进行了测试，这些产品似乎都可以正常工作(我将恶意软件样本放在这个...的特殊文件夹中，经过测试AntiVirus产品可以找到它们)。有些人仍然对这条路径感到困惑，例如在“C:\test\…\”中搜索病毒时，他们会在“C:\test\”中搜索。使用os.walk()的python代码似乎也能正常工作。
请注意，只是创建一个目录连接指向它自己的父文件夹不会在cmd或Powershell中导致无限循环 。
## 技巧4：“隐藏”目录连接的指向目标
目录连接是一个非常有用的NTFS功能，可以为攻击者找到安全漏洞。使用它可以创建(使用普通用户权限)到目标文件夹的符号链接。
解释目录连接的最佳安全漏洞是AVGater，攻击者将一个文件放在x文件夹中，然后将该文件标记为病毒，并且已安装的AntiVirus解决方案将其移至隔离区。之后攻击者删除文件夹x，并用一个名为“x”的目录连接替换它，该连接指向C:\windows\System32\。如果攻击者现在单击“恢复”按钮，AntiVirus解决方案会将把文件复制到x文件夹，该文件夹现在指向具有SYSTEM权限的system32(直接导致EoP)。
如果目标应用程序包含竞争条件类型漏洞(TOCTOU漏洞——检查使用时间)，则目录连接会被滥用。
使用mklink实用程序和/J参数创建一个目录连接。可以将它与::$INDEX_ALLOCATION技巧结合使用，创建一个名为“…”的目录连接:
图14：创建目录连接
第一个目录连接“test1”是用一个普通的名称创建的，因此目标在“dir”输出中被正确地显示。但是，在“…”目录连接的情况下，不再显示目标(而是显示[…];见红框)。还请注意，你可以让连接点1指向连接点2，指向连接点3，以此类推，直到最后一个指向真正的目的地。
由于路径混淆，您可以使用上面提到的“cd…\…\”技巧(在system32文件夹中)进入结点，但 “.”会指向“C:\test8”:
图15：在...目录执行dir命令
dir命令从system32文件夹打印文件（红色标记;请注意，第一个命令在C:\test8\创建了hello.bat文件）
图16：执行hello.bat结果
红色标记的文件是system32文件夹中的最后一个文件(dir命令的最后一个输出)。在蓝色中我们可以看到执行的是当前目录
(“.\”)中的“hello.bat”
，由于路径混淆，执行了C:\test8\hello.bat(绿色方块)而不是C:\windows\system32\hello.bat。我不确定这是否对安全性产生直接影响。因为我们可以在任何文件夹中启动文件。但是它可能会被用来绕过应用程序使用白名单脚本文件的白名单解决方案。
## 技巧5:隐藏供选数据流
如前所述，可以通过dir命令中的/r开关查看ADS。而streams.exe是Sysinternals里的一个工具，它也可以查看数据流:
图17：streams.exe查看ADS
在旧版本的Windows中，可以使用保留名作为基本名称来隐藏ADS (例如: CON, NUL, COM1, COM2, LPT1,
…)。而在Windows 10上就做不到了，但“…”仍然有效:
图18：测试保留名隐藏ADS
“…”上的ADS是成功创建的，但是没有被streams.exe工具列出。在COM1上创建ADS会导致错误，在NUL上创建ADS没有任何提示(ADS没被创建)。
请注意，还可以在驱动器上创建一个ADS，比如“echo 123 > C:\:abc.txt”。将隐藏在C:\ 中的“dir /r”
命令中。但是，它将在“..”目录的C：\子文件夹中显示ADS。例如：
图19：在C:创建ADS的效果
红色标记的部分ADS是由 C:\:abc.txt 创建。如果直接在C:\上调用
,那么通过Sysinternals工具流也看到ADS。因此，为了避开这两种工具，应该使用“…”技巧。
所以还存在可用于隐藏工具的第二技巧。在Windows上可以添加“..”在文件的末尾，Windows将会自动删除它(规范化将其删除)。
图20：添加...的技巧，echo 123 > "abc. ."
但是我们可以用ADS创建这样的文件！用工具不能打开这个文件，因为像“xyz. .”这样的路径会自动地更改为“xyz”，而这个文件不存在。
这是证明:
图21：“xyz. .”文件被创建
创建的ADS foobar.txt通过工具是无法找到的:
图22：foobar.txt
附注1:此类文件也可以通过以下方式创建： echo test > “test. .::$DATA”
附注2:请注意“..:abc.txt”是在“C:\:abc.txt”上创建的ADS。
我们还可以创建一个名为“. .” 的目录，如下所示:
图23：创建一个名为“. .” 的目录
这个文件夹是不可以进入的:
图24：不可以进入名为“. .” 的目录
前面提到过(像cd . .\\. .\ 无法正常使用)，但是cd “. .::$INDEX_ALLOCATION” 是可以使用的(双引号很重要)。
如果我们可以在文件夹名之间添加空格，那我们也可以在末尾添加空格，如 “b ” 或“.. ” 或“. “。
图25：文件夹末尾添加空格
说明:有一个“b”和一个“b ”文件夹，一个名为“a”的文件，一个名为“a ”的文件，两个默认的目录“.”和“..”和“. ”和“. .”。
名称为“.. ”的目录可以使用我们已经讨论过的技术进行写入文件:
图26：写入文件到“. . ”目录中
附注1:如果在文件夹上单击两次，可以通过文件管理器打开该文件夹。也会正确显示文件夹的内容。但是由于路径错误，无法打开其中的文件（explorer.exe
使用 C:\test22\\.. \\.. \123.txt 而不是 C:\test22\\..
\123.txt）。在搜索这样的文件夹时，Powershell将再次陷入无限循环。
附注2:还可以在一个名为“abc”的文件夹上创建ADS。然后可以将文件夹重命名为仅包含数字的名称(如“1”)。之后你仍然可以看到ADS，但是你不能打开它。(用数字作为名称的文件夹上的ADS不起作用)。要打开ADS数据，必须首先将文件夹重命名为“abc”。
### 文件系统与反病毒产品/取证软件:
我快速验证了上述针对AntiVirus产品的技巧，以验证它们是否可以捕获滥用技巧的恶意软件。最值得关注之处是文件/文件夹以 “.
.”结尾产生的变化。例如我将eicar(测试病毒)储存在一个文件夹中，并用以下命令复制：
    copy eicar.com > "123. .::$DATA"
    copy eicar.com > tester 
    echo 123 > "foo. .::INDEX_ALLOCATION" 
    cd "foo. .::$INDEX_ALLOCATION" 
    copy ..\eicar.com . 
    copy ..\eicar.com .\eicar
之后，我重新启用了AntiVirus解决方案并扫描了该文件夹，所有AntiVirus解决方案都在此文件夹中找到了“eicar.com”和“tester”，而不是“123.
.” 中的eicar病毒或“foo. .”
文件夹中的两个文件。但是进入该文件夹并启动文件时，AntiVirus产品会找到它们(因为内容是从文件系统加载到内存的)。Windows
Defender的“删除”操作无法删除文件，因此没有影响。但是Emsisoft的“删除”操作可以删除文件夹中的tester病毒（译者注：Emsisoft是来自澳大利亚的杀毒软件）。Emsisoft删除了
“foo. .” 文件夹中的 “eicar.com”
文件，“eicar”文件没有被删除，内容可以毫无问题地读取（Emsisoft回应我们，只有映射为可执行文件的文件才会被扫描，有些特定的文件扩展名如.com除外）。这种行为可以在文件保护设置中通过切换到“彻底扫描”来读取就可以进行查杀；另一方面，Windows
Defender也阻止了将“eicar”作为文本文件读取)。
我还对Autopsy 4.6.0（免费取证软件）进行了一个简短的测试。通过将“logical files
”模式加载到工具中（从正在运行的系统;不是一个磁盘映像），可以输入“…” 文件夹，但是不能输入“foo. .”
文件夹。我创建了两个文件，一个命名为“valid”，内容为“valid”，还有一个文件命名为“valid.”，内容为“secret”。Autopsy
显示了两个文件的内容“valid”(而不是“secret”的内容)。在“logical files ”模式下双击“..
”文件夹(末尾有空格)后被转化为“..” 。在磁盘镜像(raw)模式下，一切都显示正确(在live模式中，Autopsy使用Windows
API访问数据，才会出现问题。）
## 技巧6:隐藏进程二进制
正如上面已经讨论过的:Windows会在文件的末尾自动删除“. .” 。如果我们可以以“file1. .”
这样的名称来启动一个进程呢?好吧，那就会在“file1”执行的情况发生检查(例如:来自AntiVirus产品的签名检查)。让我们试试以下命令:
图27：复制了三个文件
我们创建了3个文件: