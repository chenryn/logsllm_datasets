            if not sc(ds(rs(ch08)), ff[14:16] if ff[14:16] != '' else '8k'):
                rrr = False
            if not sc(ds(rs(ch09)), ff[16:18] if ff[16:18] != '' else '5b'):
                rrr = False
            if not sc(ds(rs(ch10)), ff[18:20] if ff[18:20] != '' else '_9'):
                rrr = False
        else:
            if not sc(ds(rs(ch11)), ff[20:22] if ff[20:22] != '' else 'xd'):
                rrr = False
            getattr(bi, ds(rs([64, 280, 170, 180, 368])))()
            if rrr:
                getattr(bi, ds(rs([64, 280, 170, 180, 368])))(ds(rs([42, 272, 178, 180, 472, 164, 370, 64, 480, 394, 80, 310, 120, 436, 258, 56, 70, 274, 166, 140, 336, 12, 368, 120, 480, 420, 94, 280, 220, 414, 262, 54, 248, 444, 180, 130, 350, 154, 482, 108, 382, 392, 216, 444, 170, 276, 292, 20, 122, 290, 148, 162, 336, 12, 330, 78, 362, 290, 100, 310, 222, 444, 384, 0, 108, 444, 144, 184, 338, 12, 356, 64, 360, 424, 220, 444, 138, 394, 298, 158, 70, 300, 166, 130, 320, 132, 382, 208, 328, 290, 80, 318, 212, 414, 384, 18, 114, 280, 178, 40, 322, 134, 510])))
            else:
                getattr(bi, ds(rs([64, 280, 170, 180, 368])))(ds(rs([60, 290, 152, 162])))
    else:
        getattr(bi, ds(rs([64, 280, 170, 180, 368])))(ds(rs([60, 290, 152, 162])))
得到结果
    Enter password: justCTF{1234567890aadsafdasfdjfldsfladfasfsdfaaa}
    1234567890aadsafdasfdjfldsfladfasfsdfaaa
    b3773r_r3h1r3_7h15_6uy
    Process finished with exit code 0
flag
>
>     justCTF{b3773r_r3h1r3_7h15_6uy}
>  
## debug_me_if_you_can
> I bet you can’t crack this binary protected with my custom bl33d1ng edg3
> pr0t3c70r!!!111oneoneone
题目给了supervisor文件，flag.png.enc，crackme.enc
###  ptrace反调试
我们首先从最简单的ptrace反调试说起，以下例子引自
[ctfwiki](https://wiki.x10sec.org/reverse/linux/detect-dbg-zh/)
    int main()
    {
        if (ptrace(PTRACE_TRACEME, 0, 1, 0) 
  3. v18 = ptrace(PTRACE_PEEKTEXT, a1, v19, 0LL)，获取rip指向的代码的值，这个值要满足一定的条件，获取rip+4/rip+8指向的代码的值，利用这个值对子进程进行不同的解密
  4. ptrace(PTRACE_POKETEXT, a1, v13, v14)，修改子进程的代码
  5. ptrace(PTRACE_SETREGS, a1, 0LL, &v4)，修改rip的值
  6. ptrace(PTRACE_CONT, a1, 0LL, 0LL)，继续运行子进程
  7. wait(0LL)，等待子进程信号
想要理清父进程修改子进程代码的逻辑很痛苦，不得不说这种 **反调试手段达到了效果**
###  hook ptrace
想要调试子进程困难重重，完全静态分析也痛苦，我们要另寻他路了
观察到它使用ptrace(PTRACE_POKETEXT, a1, v13, v14)修改子进程的代码，如果我们 hook
ptrace，跟踪trace一下它到底修改了什么，说不定可行
尝试hook ptrace，这里使用 Efiens 的代码，稍作修改
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    long int ptrace(enum __ptrace_request __request, ...){
        va_list list;
        va_start(list, __request);
        pid_t pid = va_arg(list, pid_t);
        void* addr = va_arg(list, void*);
        void* data = va_arg(list, void*);
        long int (*orig_ptrace)(enum __ptrace_request __request, pid_t pid, void *addr, void *data);
        orig_ptrace = dlsym(RTLD_NEXT, "ptrace");
        long int result = orig_ptrace(__request, pid, addr, data);
        if (__request == PTRACE_SETREGS){
            unsigned long rip = *((unsigned long*)data + 16);
            printf("SETREGS: rip: 0x%lx\n", rip);  
        } else if (__request == PTRACE_POKETEXT){
            printf("POKETEXT: (addr , data) = (0x%lx , 0x%lx)\n", (unsigned long)addr, (unsigned long)data);
        }
        return result;
    }
    __attribute__((constructor)) static void setup(void) {
        fprintf(stderr, "called setup()\n");
    }
稍微解释一下函数
**dlsym**
根据动态链接库操作句柄与符号，返回符号对应的地址
> RTLD_NEXT  
>  Find the next occurrence of the desired symbol in the  
>  search order after the current object. This allows one to  
>  provide a wrapper around a function in another shared  
>  object, so that, for example, the definition of a function  
>  in a preloaded shared object (see LD_PRELOAD in ld.so(8))  
>  can find and invoke the “real” function provided in  
>  another shared object (or for that matter, the “next”  
>  definition of the function in cases where there are  
>  multiple layers of preloading).
**VA_LIST**
> VA_LIST 是在C语言中解决变参问题的一组宏，所在头文件：#include ，用于获取不确定个数的参数。
>
> （1）首先在函数里定义一具VA_LIST型的变量，这个变量是指向参数的指针；
>
> （2）然后用VA_START宏初始化刚定义的VA_LIST变量；
>
> （3）然后用VA_ARG返回可变的参数，VA_ARG的第二个参数是你要返回的参数的类型（如果函数有多个可变参数的，依次调用VA_ARG获取各个参数）；
>
> （4）最后用VA_END宏结束可变参数的获取。
编译为so，预装载
    gcc --shared -fPIC ./ptrace_hook.c -o ./ptrace_hook.so
    LD_PRELOAD=./ptrace_hook.so ./supervisor
得到结果
    called setup()
    called setup()
    POKETEXT: (addr , data) = (0x55a626771800 , 0x45c748fffff84be8)
    POKETEXT: (addr , data) = (0x55a626771871 , 0x89e0458b48000000)
    POKETEXT: (addr , data) = (0x55a6267718e5 , 0x1ebfffff7b5e8c7)
    POKETEXT: (addr , data) = (0x55a626771838 , 0x8948d8458b48c289)
    POKETEXT: (addr , data) = (0x55a6267718a8 , 0x775fff883fffffd)
    SETREGS: rip: 0x55a6267717f9
    Hello there!
    POKETEXT: (addr , data) = (0x55a6267716db , 0xe8c78948000009ab)
    POKETEXT: (addr , data) = (0x55a62677174b , 0x8348008b48d8458b)
    POKETEXT: (addr , data) = (0x55a6267717bd , 0x1ebfffff93de8c7)
    POKETEXT: (addr , data) = (0x55a626771712 , 0xe8c7894800000000)
    POKETEXT: (addr , data) = (0x55a626771781 , 0xf975e8c78948f845)
    SETREGS: rip: 0x55a6267716d4
    Error! https://www.youtube.com/watch?v=Khk6SEQ-K-k
    0xCCya!
    : No such process
程序开启了ASLR，不过问题不大，容易猜出0x55a626771800 就是 ida 的 0x1800
ida patch
    import ida_bytes