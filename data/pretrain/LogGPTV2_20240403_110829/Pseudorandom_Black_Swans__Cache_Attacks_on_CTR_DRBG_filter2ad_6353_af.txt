### Two Traces to Compromise the CTR_DRBG State

To compromise the CTR_DRBG state, at least three encryptions are required for each request of the Pseudorandom Generator (PRG) output. When AES-256 is used as the underlying block cipher, four encryptions are necessary. Our attack can be extended to utilize these additional encryptions, which helps in more efficiently eliminating candidate keys and mitigating the impact of noisy measurements.

### Related Attacks

- **Roche et al. [73]**: Demonstrated that a powerful attacker capable of generating arbitrary faults in the key schedule could perform a blind attack on AES.
- **Jaffe [39]**: Attacked counter mode encryption with an unknown nonce, requiring 2^16 consecutive block encryptions.
- **Ronen et al. [74]**: Showed a blind attack on counter mode encryption targeting the authentication MAC.

### Evaluation

#### The Victim

Our experiments were conducted on a laptop with 16 GB of RAM and an Intel i7-6820HQ CPU clocked at 2.7 GHz, featuring an 8 MB L3 cache, running Ubuntu 16.04. Similar to [89], we targeted mbedTLS-SGX [96], an SGX port of the widely-used mbedTLS library. To our knowledge, mbedTLS-SGX is the only library currently available with a functional SGX-based HTTPS client.

#### Attack Procedure

We demonstrated an end-to-end attack on a TLS connection between the client and www.cia.gov, with all cryptographic operations occurring within the enclave. We first mounted a Prime+Probe attack to recover the CTR_DRBG state used to generate the 256 bits of the ECDH ephemeral private key (involving five AES-256 encryptions of an incrementing counter). Using the recovered private key, we calculated the premaster key and decrypted the HTTPS communication. The detailed side-channel attack methodology is provided in Appendix C.

#### Results

Due to high noise levels in some traces, our attack successfully recovered the PRG state in approximately 36% of 1000 trials. The online phase, during which we mounted the Prime+Probe attack, took less than two seconds. The offline phase, where we recovered the PRG state and decrypted the TLS stream, was negligible. After recovering the PRG state, we obtained the TLS symmetric encryption keys and GCM IVs, and subsequently decrypted the HTTPS request.

#### Attack Complexity

The complexity of the attack is primarily determined by the generation of key candidates. Each candidate requires 2^18 T-Table look-ups per trace. Eliminating candidates through decryption required minimal effort. We experimentally tested the number of remaining candidates in each step, both in a noise-free scenario (via simulation over 500 random keys) and in a noisy scenario (1000 SGX attacks).

- **Two Traces**: Yields 1.13 * 2^9 and 1.52 * 2^11 candidates for the noise-free and noisy cases, respectively.
- **Three Traces**: In simulation, three traces are sufficient to isolate the single correct key. However, real-world noise necessitates an additional trace, totaling four traces.

### Impact

To evaluate the impact of our findings, we scraped a public database of security certificates released under NIST’s Cryptographic Module Validation Program (CMVP).

#### Government Certification

The CMVP allows vendors to certify that their cryptographic modules meet minimal requirements for sale to the United States and Canadian governments. FIPS 140-2 compliance requires the use of one of the PRGs described in SP 800-90A. Certifications can apply to specific product models or entire product lines. Most major vendors of network devices and operating systems certify their products.

#### Database Scraping

We scraped the CMVP certifications on May 13, 2019. CTR_DRBG was the most popular design, supported by 67.8% of the implementations in the database. Of the 2498 implementations, 1694 (67.8%) supported CTR_DRBG. Among these:
- 461 (25%) exclusively supported AES-128.
- 1163 (69%) supported AES-128 along with other ciphers.
- 1227 (72%) supported AES-256.

The CMVP database also indicates whether prediction resistance is enabled for the DRBG implementation. Of the 1694 total implementations that supported CTR_DRBG:
- 66 provided no information about prediction resistance.
- 618 supported use of the DRBG in either mode with the default unspecified.
- 433 explicitly enabled prediction resistance.
- 577 did not support prediction resistance.

Among the CTR_DRBG implementations, 85 did not use a derivation function, and 1137 did not support an alternate DRBG algorithm.

### Discussion

#### Limitations

Our results rely on the victim's use of T-Table AES, which is known to leak information via side channels. Despite this, T-Table AES is still used in many modern implementations. In non-SGX settings, our TLS attack requires code execution on the client and succeeds after thousands of handshakes, potentially allowing detection of an ongoing attack. While we demonstrate our SGX attack against the only library providing a working end-to-end example of an HTTPS client, the Intel-supported SGX-SSL library [37] (which does not support TLS) uses SGX’s hardware-based RDRAND PRG and is not vulnerable to a T-Table based attack.

#### Countermeasures

CTR_DRBG’s theoretical and practical flaws suggest that implementations need to be cautious when choosing this design. For FIPS compliance, HASH_DRBG and HMAC_DRBG offer better security guarantees [87]. If CTR_DRBG cannot be replaced, implementers should use AES hardware instructions, limit the quantity of data requested in a single call, reseed frequently, and populate add-in with high-quality entropy to provide defense in depth against our attacks. Generally, constant-time code should be used for all cryptographic applications unless hardware support (e.g., AES-NI) is available.

#### Mismatches Between Theory and Practice

Significant effort has been dedicated to formalizing PRG security properties and designing provably secure constructions. However, theoretical analyses of many commonly-used designs (e.g., Linux RNG [22], CTR_DRBG [87]) have found that they do not meet basic security properties, such as robustness against state compromise. Implementers are often hesitant to adopt countermeasures without a concrete demonstration of vulnerability.

#### The Fragility of ECDSA

The fragility of DSA and ECDSA in the face of random number generation and implementation flaws has been repeatedly demonstrated [12, 92]. Random number generation failure compromises a single session or signature, but DSA/ECDSA are particularly vulnerable to long-term secret compromise. Deterministic ECDSA [70] is the recommended countermeasure.

#### Future of FIPS

FIPS 140-3 is expected to include requirements for side-channel mitigations from NIST SP 800-140F, which will be issued and effective in September 2019. FIPS 140-2 CMVP certifications will continue to be issued at least through 2021 [59]. This is a promising step towards widespread deployment of side-channel-resistant cryptography; however, it remains to be seen how improved certification requirements will influence the design and standardization of secure primitives.

#### Using RDRAND without a PRG

Using the built-in CPU PRG to mitigate concerns with software PRGs is not a panacea. In several SGX ports we reviewed (including Intel’s official port for OpenSSL [37]), the software PRG was replaced with calls to the RDRAND instruction. While using the CPU’s generator avoids software side-channels, the existence of hard-to-discover bugs in integrated PRGs [51, 88] means this feature is better used as one of many sources of entropy for a provably secure software PRG.

### Acknowledgments

This work was supported by the National Science Foundation under grant no. CNS-1651344, by the ISF under grant number 1523/14, by gifts from Intel and AMD corporations, and by the Defense Advanced Research Projects Agency (DARPA) under contract FA8750-19-C-0531. Eyal Ronen is a member of CPIIS.

### References

[References listed here, formatted and organized as needed.]

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.