Before the data in an HTTP response is returned to a user, Flow-
Watcher determines if the content of the response complies with
the shadow policy through the following steps:
(a) Identify requesting user. FlowWatcher extracts the authenti-
cation token from the associated HTTP request, and looks up the
token in user_auth to identify the user ui that made the request.
(b) Match response content. FlowWatcher matches the tracked
data items from data_items against the response header and body.
To prevent XSS attacks, all HTML tags are ﬁrst stripped from the
response body. It then records all data objects oi for which the data
items D(oi) were matched.
(c) Check access control list. It looks up each matched data ob-
ject oi in the object_acl access control list to determine if user ui is
part of the list (or a member of a group in the list by considering
the group membership mapping, group_members). If multiple data
objects refer to the same set of data items, they are not unique and
thus the most permissive access control decision is made.
(d) Consult whitelist. For matched objects without authorised ac-
cess, FlowWatcher checks if the associated data items D(oi) are
found in static_data. In this case, the data also belongs to the ap-
plication and the corresponding data object oi is ignored.
(e) Redact response. For all remaining data objects oi that user ui
is not authorised to view, FlowWatcher redacts the data items D(oi)
from the response, and alerts the system administrator.
4.2 Policy updates
FlowWatcher infers changes to the shadow policy from the ob-
served HTTP request-response sequences. The deﬁnition and up-
date rules in the UDA policy (described in §3.2) allow FlowWatcher
to maintain the shadow policy for enforcement. As users interact
with the application and new data objects and groups are created,
the shadow policy is updated correspondingly.
Figure 2 shows how FlowWatcher updates the shadow policy
when a user that owns an article gives access rights to a new group.
When an HTTP request-response sequence is intercepted (step 1),
FlowWatcher ﬁrst veriﬁes that the response indicates a successful
request. It then checks the request URL and request and response
parameters and looks up the deﬁnition and update rules in the UDA
policy that are triggered (step 2). After that, it invokes the rule spec-
iﬁcation for each matched rule (step 3), updating one or more of its
corresponding data structures, i.e. group_members, object_acl and
data_items (step 4). For example, if the update rule user -> group in
Nginx proxy serverUnmodiﬁed web application to be protectedClient A Request checked for policy updates Response checked for policy enforcementClient B FlowWatcher  Unmodiﬁed Request Unmodiﬁed Response POST requestPOST /merchandise/buy.php HTTP/1.1Host: lsds.doc.ic.ac.ukContent-Type: application/x-www-form-urlencoded...Accept-Encoding: gzip, deflateContent-Length: 82itemid=237&ccname=Henry+Wells&ccexpiry=10%2F13&↩︎address=25 Eton Rise NW39CT &cccsv=181A2345Filtered safe responseHTTP/1.1 200 OK...Content-Type: text/html.........6B Safe responseHTTP/1.1 200 OK...Content-Type: text/html.........6AGET /merchandise/buy.php?↩︎session=237123 HTTP/1.1Host: lsds.doc.ic.ac.uk... Buggy GET request1BShadow Access Control Policy UDA Policy Speciﬁcation609As a result, the size of data_items grows linearly with the number
of unique data items added to the application, but it is independent
of the size of the items. In addition, the data removal rules ensure
that FlowWatcher discards removed data.
4.4 Threat analysis
Completeness of policies. The goal of FlowWatcher is to act as
an additional line of defence against unauthorised data disclosure.
As such, a UDA policy does not need to be complete, i.e. cover the
whole access control model of an application. If a UDA policy only
refers to a subset of all data objects, however, FlowWatcher may
exhibit false negative detections, i.e. it may miss the unauthorised
disclosure of data that is not included in the UDA policy. In addi-
tion, it may cause false positive detections if tracked user-generated
data is not unique. As we show in §5, however, tracked data items
are unique with high probability, and it is simple to write UDA
policies that cover most data objects of applications.
Correctness of policies. A beneﬁt of UDA policies is that they are
application- and not deployment-speciﬁc and thus can be written by
application developers. A developer can ship their application with
a correct UDA policy, which does not require further changes when
the application is deployed. The declarative, rule-based nature of
the UDA policy language makes it easier to spot mistakes compared
to the implementation of the access control model as part of the
application itself.
In addition, FlowWatcher effects policy updates only when a
request is successful, so that the shadow policy does not diverge
from the application’s own access control policy. To this end, we
assume that all well-developed applications indicate unsuccessful
requests for policy changes through an appropriate error message
in the response, which can be checked by FlowWatcher.
Vulnerabilities in FlowWatcher. Since FlowWatcher acts as an
additional security layer, it cannot disclose data to unauthorised
users that is not already part of an HTTP response to be delivered to
a user. In the worst case, a bug in the FlowWatcher implementation
can lead to false negatives or positives—FlowWatcher’s small code
base makes bugs less likely.
Correctness of authentication logic. FlowWatcher assumes that
the authentication logic of the application is correct. We believe
that this is a reasonable assumption in practice: since the authenti-
cation logic is implemented typically in a single module of an appli-
cation (such as the User core module in Drupal) and, unlike access
control checks, is not part of all modules, bugs are less likely to
exist. Orthogonal to FlowWatcher, approaches that use dynamic
data tracking to track user credentials during authentication, e.g.
through a modiﬁed interpreter [10], can still be applied.
Denial-of-service attacks. A malicious user could attempt a denial-
of-service attack, in which they cause FlowWatcher to redact data
incorrectly in a response. If a malicious user creates a new data ob-
ject that overlaps with the data object of another user, FlowWatcher
notices the overlap and applies the most permissive policy, i.e. per-
mitting the original user to access their data without causing a false
positive (see §4.1, step c); if they create a new data object with pub-
lic data, which is e.g. part of the web application, FlowWatcher
only generates a false positive if the data is not part of the static
data whitelist (see §4.1, step d); ﬁnally, if they create a new ob-
ject that matches user-generated data of another user but that is not
tracked by the UDA policy, FlowWatcher also reports a false pos-
itive. This can be prevented by having FlowWatcher by default
track all user-generated content and check for overlap.
In all cases, a malicious user must be authenticated to mount a
denial-of-service attack using FlowWatcher, because only authen-
Figure 2: Updates to shadow access control policy
Listing 1, line 16 is triggered, as shown in Figure 2, FlowWatcher
adds the user user.id as a member of the group group.id to the
group_members mapping.
4.3 Data tracking
To detect data disclosure, FlowWatcher relies on the uniqueness
of tracked data objects submitted in form ﬁelds. Tracking data ob-
jects that are not unique, i.e. that were submitted independently by
multiple users in HTTP requests, is not useful in identifying data
disclosure because the origin of the data is ambiguous. In addition,
FlowWatcher must not track user-generated data that is the same
as static application data served in HTTP responses because this
would lead to false positive detection of data disclosure.
FlowWatcher adopts three strategies to reduce the number of
tracked data objects while maintaining uniqueness: (i) when writ-
ing a UDA policy, developers should select data items that are
likely to be unique (and hence useful to track) due to their seman-
tics; (ii) FlowWatcher only reports a data ﬂow between users if all
data items, D(oi) = {d1,d2, . . .}, that are part of a data object D(o1)
are observed in an HTTP response; and (iii) FlowWatcher only
tracks the value of a data item di if it has more characters than a
global minimum uniqueness length parameter α, i.e. |di| > α. As
we evaluate in §5.3, in practice, the above strategies manage to
track most data that is unique to each user, while still including a
large portion of all user-generated data entered in form ﬁelds.
To reduce the amount of data that is stored as part of data_items,
as an optimisation, FlowWatcher only stores a preﬁx of each data
item of at most β characters, together with the length of the com-
plete item and its hash. The preﬁx of the data item is used for
matching against response content (see §4.1, step b). When con-
tent is redacted (step e), the length indicates the amount of data to
be redacted and the hash is used to verify the match.
Nginx proxy server  FlowWatcherClient A Shadow Access Control Policy POST requestPOST drupal/?q=og/users/20/add_userHost: lsds.doc.ic.ac.uk/Content-Type: application/x-www-form-urlencoded...Accept-Encoding: gzip, deflateContent-Length: 82Cookies: SESSNKG…PMog_names=timjones&...UDA Policy 13All web requests are  interceptedFind matching UDA rules(subset shown here)Rule speciﬁcations invokedAccess control state updated42user -> group re"/?q=og/users/[0-9]+/add_user" { user.id = formﬁeld "og_names";group.id = url re"/([0-9]+)/add_user"; }timjonesSESSNKG…PMuser_auth:timjonesGroup 20group_members:Group20Group31Node123object_acl:"Title of new post"Node123data_items:610Application
Drupal [16]
Type
Content
management
OwnCloud [40]
File sharing
DokuWiki [12]
Wiki
phpMyAdmin [44] Database
WordPress [54]
phpBB [43]
administration
Content
management
Forum
management
Dropbox [14]
File sharing
Policy size (LoC)
Rules
Bug
Description
43
21
26
9
23
18
14
CVE-2013-4596 Enabling extra module exposes unpublished articles
7 deﬁnition CVE-2012-2081 Exposes private group titles to non-members
6 update
4 deﬁnition CVE-2013-2043 Any user can download another user’s calendar
3 update
CVE-2014-3834 Any user can download another user’s contacts
2 deﬁnition CVE-2010-0287 Directory traversal exposes private ﬁlenames
5 update
CVE-2009-1960 File inclusion bug leaks private page text
2 deﬁnition CVE-2014-4987 Unprivileged user can see MySQL user list
1 update
3 deﬁnition CVE-2010-0682 Trashed posts are exposed to other users
4 update
4 deﬁnition CVE-2010-1627 RSS feeds exposed to unauthorised users
2 update
2 deﬁnition [15]
1 update
Inadvertent sharing of private links leaks data
Table 2: Data disclosure bugs in web applications mitigated by FlowWatcher
ticated users can create new tracked data objects.
In practice, a
system administrator will be alerted of any repeated detection of
data disclosure caused by the same user, and can block the user.
5. EVALUATION
We describe our experimental evaluation of a prototype imple-
mentation of a FlowWatcher web proxy (§5.1). Our results show
that FlowWatcher is (a) simple to use—we managed to write UDA
policies for a wide range of web applications, including Drupal,
OwnCloud, DokuWiki, phpMyAdmin and WordPress, with the lon-
gest policy having only 43 lines (§5.2); (b) effective in protecting
against real-world data disclosure vulnerabilities—we describe a
range of previously-reported CVE bugs in the above applications
that FlowWatcher mitigates (§5.2) and demonstrate that its data
tracking approach is effective in practice (§5.3); and (c) efﬁcient—
our unoptimised implementation as part of the Nginx reverse proxy
does not impact the throughput of a Drupal deployment (§5.4).
5.1 Prototype implementation
We implemented FlowWatcher as an add-on module for the Ng-
inx [35] HTTP reverse proxy. We chose Nginx for its high perfor-
mance [46] and ease of extension through custom modules. Flow-
Watcher is designed as an Nginx ﬁlter that can read HTTP requests
and responses and manipulate responses returned to users.
The FlowWatcher implementation consists of 1834 lines of C
code, which makes it easy to conduct a security audit. It uses the
Redis in-memory store [45] for storing and looking up the shadow
access control policy. To ﬁlter HTTP responses, it uses streaming
regular expression matching over the response bodies.
To avoid re-generating the regular expressions for each request,
the implementation caches the last generated regular expression
string for each user. This is done in the Redis store because the Ng-
inx module API does not permit maintaining state across requests.
A regular expression string is reused until it is invalidated by the
creation of a new data object that should not be disclosed to a given
user. A limitation of our prototype is that it currently does not han-
dle application transformations of user-generated data items such
as HTML entity sanitisation.
5.2 Can FlowWatcher mitigate real-world data
disclosure bugs?
To determine if FlowWatcher can mitigate real-world data dis-
closure, we write UDA policies for 7 popular web applications,
specifying their core access control models. All rules were writ-
ten by us in a day. We then evaluate the policies with bugs from the
CVE database [9], which resulted in data disclosure for these appli-
cations, observing if FlowWatcher can mitigate the bugs. Table 2
lists the applications, details of the UDA policies and the bugs.
Drupal [16] is a content management framework written in PHP.
The standard release of Drupal, known as Drupal core, contains
basic features, but there is a growing set of community-contributed
add-on modules. In recent years, many security vulnerabilities have
been discovered in these add-ons [19]. Natively, Drupal only sup-
ports access control permissions for performing operations such as
reading, writing and editing different content types (i.e. articles,
pages, etc.) based on roles such as “administrator” or “authenti-
cated user”. More ﬁne-grained access control between users can be
realised using third-party modules.
For the purpose of our evaluation, we focus on access bypass vul-
nerabilities in two contributed modules. First, the Organic Groups
module [18] supports the creation of groups that can restrict ac-
cess to content. Due to a missing access check (CVE-2012-2081),
users were able to access titles of private groups that should only
be accessible to group members. Second, the Node Access Keys
module [17] grants users temporary access permissions to selected
content types based on custom user roles: e.g. registered users for
a course can be mailed access keys allowing them to view certain
types of content such as course pages. When this module was en-
abled, unpublished nodes (of any content type without an access
key) became visible to all users (CVE-2013-4596).
We discussed the UDA policy rules for Drupal in §3. The com-
plete policy, shown in Appendix A, consists of 43 lines with 8 def-
inition and 7 removal rules, and covers all content types of a de-
fault Drupal installation. It speciﬁes that data from different con-
tent types must be tracked by the shadow access control policy, and
access must be restricted based on group membership, as deﬁned
when content is created or updated.
Further content types from third-party modules require extra rules
to expose them to FlowWatcher. For example, the policy includes
two rules (shown in Listing 1, lines 9 and 25), to enable Flow-