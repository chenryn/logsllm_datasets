### Functionality ℱca

Functionality ℱca, as defined in [15], operates as follows:

1. **Registration:**
   - Upon receiving the first message \((\text{REGISTER}, \text{sid}, v)\) from a party \(\mathcal{P}\), send \((\text{REGISTERED}, \text{sid}, v)\) to the adversary \(\mathcal{A}\).
   - If \(\mathcal{A}\) responds with \(\text{OK}\) and \(\text{sid} = \mathcal{P}\) (indicating this is the first request from \(\mathcal{P}\)), record the pair \((\mathcal{P}, v)\).

2. **Retrieval:**
   - Upon receiving a message \((\text{RETRIEVE}, \text{sid})\) from a party \(\mathcal{P}'\), send \((\text{RETRIEVE}, \text{sid}, \mathcal{P}')\) to \(\mathcal{A}\) and wait for an \(\text{OK}\) response.
   - If there is a recorded pair \((\text{sid}, v)\), output \((\text{RETRIEVE}, \text{sid}, v)\) to \(\mathcal{P}'\). Otherwise, output \((\text{RETRIEVE}, \text{sid}, \bot)\) to \(\mathcal{P}'\).

### Ideal Functionality ℱsmt

We use the secure message transmission functionality as defined in the 2005 version of UC [13]. This functionality is parameterized by a leakage function \(l : \{0, 1\}^* \rightarrow \{0, 1\}^*\) that leaks information about the transmitted message, such as its length.

**Functionality ℱsmt:**

1. **Sending a Message:**
   - On input \((\text{SEND}, \text{sid}, m)\) from a party \(\mathcal{P}\):
     - Abort if \(\text{sid} \neq (\mathcal{S}, \mathcal{R}, \text{sid}')\).
     - Send \((\text{SEND}, \text{sid}, l(m))\) to the adversary.
     - Generate a private delayed output \((\text{SENT}, \text{sid}, m)\) to \(\mathcal{R}\) and halt.

### Definition of Delegatable Credentials

We define delegatable credentials using the ideal functionality \(\mathcal{F}_{\text{dac}}\). For simplicity, we consider a single root delegator (issuer), but multiple instances of \(\mathcal{F}_{\text{dac}}\) can support multiple issuers. \(\mathcal{F}_{\text{dac}}\) allows for multiple levels of delegation. A Level-1 credential is issued directly by the issuer, and any further delegations are done between users, creating higher-level credentials.

**Functionality \(\mathcal{F}_{\text{dac}}\):**

1. **Setup:**
   - On input \((\text{SETUP}, \text{sid}, \langle n_i \rangle_i)\) from \(\mathcal{I}\):
     - Verify that \(\text{sid} = (\mathcal{I}, \text{sid}')\).
     - Output \((\text{SETUP}, \text{sid}, \langle n_i \rangle_i)\) to \(\mathcal{A}\) and wait for a response \((\text{SETUP}, \text{sid}, \text{Present}, \text{Ver}, \langle A_i \rangle_i)\) from \(\mathcal{A}\).
     - Store algorithms \(\text{Present}\) and \(\text{Ver}\) and credential parameters \(\langle A_i \rangle_i\), \(\langle n_i \rangle_i\), and initialize \(\mathcal{L}_{\text{de}} \leftarrow \emptyset\); \(\mathcal{L}_{\text{at}} \leftarrow \emptyset\).
     - Output \((\text{SETUPDONE}, \text{sid})\) to \(\mathcal{I}\).

2. **Delegate:**
   - On input \((\text{DELEGATE}, \text{sid}, \text{ssid}, \vec{a}_1, \ldots, \vec{a}_L, \mathcal{P}_j)\) from some party \(\mathcal{P}_i\), with \(\vec{a}_L \in A_{n_L}\):
     - If \(L = 1\), check \(\text{sid} = (\mathcal{P}_i, \text{sid}')\) and add an entry \(\langle \mathcal{P}_j, \vec{a}_1 \rangle\) to \(\mathcal{L}_{\text{de}}\).
     - If \(L > 1\), check that an entry \(\langle \mathcal{P}_i, \vec{a}_1, \ldots, \vec{a}_{L-1} \rangle\) exists in \(\mathcal{L}_{\text{de}}\).
     - Output \((\text{ALLOWDEL}, \text{sid}, \text{ssid}, \mathcal{P}_i, \mathcal{P}_j, L)\) to \(\mathcal{A}\) and wait for input \((\text{ALLOWDEL}, \text{sid}, \text{ssid})\) from \(\mathcal{A}\).
     - Add an entry \(\langle \mathcal{P}_j, \vec{a}_1, \ldots, \vec{a}_L \rangle\) to \(\mathcal{L}_{\text{de}}\).
     - Output \((\text{DELEGATE}, \text{sid}, \text{ssid}, \vec{a}_1, \ldots, \vec{a}_L, \mathcal{P}_i)\) to \(\mathcal{P}_j\).

3. **Present:**
   - On input \((\text{PRESENT}, \text{sid}, m, \vec{a}_1, \ldots, \vec{a}_L)\) from some party \(\mathcal{P}_i\), with \(\vec{a}_i \in (A_i \cup \bot)^{n_i}\) for \(i = 1, \ldots, L\):
     - Check that an entry \(\langle \mathcal{P}_i, \vec{a}'_1, \ldots, \vec{a}'_L \rangle\) exists in \(\mathcal{L}_{\text{de}}\) such that \(\vec{a}_i \preceq \vec{a}'_i\) for \(i = 1, \ldots, L\).
     - Set \(a_t \leftarrow \text{Present}(m, \vec{a}_1, \ldots, \vec{a}_L)\) and abort if \(\text{Ver}(a_t, m, \vec{a}_1, \ldots, \vec{a}_L) = 0\).
     - Store \(\langle m, \vec{a}_1, \ldots, \vec{a}_L \rangle\) in \(\mathcal{L}_{\text{at}}\).
     - Output \((\text{TOKEN}, \text{sid}, a_t)\) to \(\mathcal{P}_i\).

4. **Verify:**
   - On input \((\text{VERIFY}, \text{sid}, a_t, m, \vec{a}_1, \ldots, \vec{a}_L)\) from some party \(\mathcal{P}_i\):
     - If there is no record \(\langle m, \vec{a}_1, \ldots, \vec{a}_L \rangle\) in \(\mathcal{L}_{\text{at}}\), \(\mathcal{I}\) is honest, and for \(i = 1, \ldots, L\), there is no corrupt \(\mathcal{P}_j\) such that \(\langle \mathcal{P}_j, \vec{a}'_1, \ldots, \vec{a}'_i \rangle \in \mathcal{L}_{\text{de}}\) with \(\vec{a}_j \preceq \vec{a}'_j\) for \(j = 1, \ldots, i\), set \(f \leftarrow 0\).
     - Else, set \(f \leftarrow \text{Ver}(a_t, m, \vec{a}_1, \ldots, \vec{a}_L)\).
     - Output \((\text{VERIFIED}, \text{sid}, f)\) to \(\mathcal{P}_i\).

### Generic Construction for Delegatable Credentials

In this section, we provide a generic construction for delegatable anonymous credentials with attributes. We first explain the intuition behind our construction, then present a construction based on sibling signatures and non-interactive zero-knowledge proofs. We prove that our generic construction securely realizes \(\mathcal{F}_{\text{dac}}\).

#### 4.1 Construction Overview

Our definition of delegatable credentials allows for multiple levels of delegation. The root delegator (issuer) issues Level-1 credentials to users, who can then delegate their Level-L credential to create a Level-(L + 1) credential.

- **Issuer:**
  - Generates a signing key \(\text{isk}\) and corresponding verification key \(\text{ipk}\) and publishes \(\text{ipk}\).
  - Issues a Level-1 credential to a user by signing the user's public key \(\text{cpk}_1\) and a set of attributes \(\vec{a}_1\), resulting in a signature \(\sigma_1\).

- **User:**
  - To get a Level-1 credential, generates a fresh secret and public key \((\text{csk}_1, \text{cpk}_1)\) and sends \(\text{cpk}_1\) to the issuer.
  - Receives the signature \(\sigma_1\) and attributes \(\vec{a}_1\).

- **Delegation:**
  - A user with a Level-L credential can delegate it to another user by generating a new key pair \((\text{csk}_{L+1}, \text{cpk}_{L+1})\) and signing \(\text{cpk}_{L+1}\) and a set of attributes \(\vec{a}_{L+1}\) with the secret key \(\text{csk}_L\), resulting in a signature \(\sigma_{L+1}\).
  - The Level-(L + 1) credential consists of all previous signatures and attributes, plus the new signature and attributes.

- **Presentation:**
  - A user can present a credential by generating a NIZK proof proving possession of all credential links back to the issuer and selectively disclosing attributes from the corresponding signatures.

- **Verification:**
  - A verifier can verify the attribute token using the issuer's public key, without revealing the identities of intermediate delegators.

#### 4.2 Generic Construction

Our generic construction \(\Pi_{\text{dac}}\) is based on secure sibling signature schemes, where \(\text{Sign}_1\) signs vectors of messages. We allow different sibling signature schemes to be used at different delegation levels.

- **Setup:**
  - The issuer \(\mathcal{I}\) creates a key pair and registers it with the CA functionality \(\mathcal{F}_{\text{ca}}\).

- **Delegate:**
  - Any user \(\mathcal{P}_i\) with a Level-L − 1 credential can delegate this credential to another user \(\mathcal{P}_j\), giving \(\mathcal{P}_j\) a Level-L credential.
  - \(\mathcal{P}_i\) checks that he possesses a valid credential chain and sends the necessary information to \(\mathcal{P}_j\) over \(\mathcal{F}_{\text{smt}}\).
  - \(\mathcal{P}_j\) generates a fresh key pair and sends the public key to \(\mathcal{P}_i\).
  - \(\mathcal{P}_i\) signs the public key and attributes, and sends the updated credential chain to \(\mathcal{P}_j\).

This construction ensures that the identity of the delegators remains hidden while allowing for selective disclosure of attributes.