a protocol can provide. We hope our informal discussions
help make our analyses useful for practitioners.
A. Security Deﬁnition
SECURITY EXPERIMENT. Fix the security parameter λ and
a QC protocol Π with associated server key generation
protocol Kg, scfg gen, an authenticated encryption with
associated data scheme AEAD = (E, D) with key space
{0, 1}λ and additional authenticated data (which we will
denote by H) space {0, 1}∗.
Π
We deﬁne the experiment ExpQACCE
(A) associated with
the adversary A. We consider two sets of parties, clients
and servers, C = {C1, . . . , C(cid:7)} and S = {S1, . . . , S(cid:7)}, for
parameter (cid:10) ∈ N denoting the maximum possible number of
servers or clients. The experiment ﬁrst generates server key
pairs (pki, ski) $← Kg(λ), kstk
$←
, and scfgt
i
scfg gen(ski, τt, λ), for all time periods, for all i ∈ [(cid:10)].
$← {0, 1}128
p,i
To capture several sequential and parallel executions of
the protocol we follow the standard approach and associate
each party Pi ∈ {C ∪ S} with a set of stateful oracles
1
p,i, for parameter d ∈ N and p ∈ {c, s}, where
p,i, . . . , πd
π
each oracle πr∈[d]
represents a process that executes one
single instance of the protocol at party Pi and p indicates
whether the party in question is a client or server. Intuitively,
i of some party Pi ∈ {C ∪ S} models that
each oracle πs
party’s IP address and a unique port number. We discuss
the importance of this part more in Section VI-B. The
experiment ﬂips a bit bq
p,i
$← {0, 1} for each oracle πq
Each server oracle gets the corresponding scfgt
i at the
beginning of each time period. We assume that at each point
of the protocol’s execution each party (adversary included)
can tell what time period it is. We also assume that every
server oracle is aware what protocol stage it is in for every
client oracle that it is and/or has been exchanging messages
with. With this assumption we are not required to keep track
of the stages in the simulations in our proofs detailed in the
full version [16]. Even though the server keeps local state
and knows which stage it is in, it may have inaccurate view
of the stage of the protocol because it is not guaranteed to
p,i.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:38 UTC from IEEE Xplore.  Restrictions apply. 
know the correct identity of the party it is talking with. We
refer to oracles that set ik with each other as peers.
The adversary A is given the public keys of all servers
pk1, . . . , pk
(cid:7) and can interact with all oracles of all parties
by issuing queries. The values in parentheses are supplied
by A, except when they are bold face. If the parameter in
parentheses is an oracle, e.g. πq
p,i, this means that A needs
to supply the indices p, i, q specifying the oracle.
• connect(πq
), for i, j ∈ [(cid:10)], q, r ∈ [d].
c,i, πr
s,j
As a result, πq
c,i outputs the initial connection request
packet (ﬁrst connection for that client party for that particular
time period) that it would send speciﬁcally to oracle πr
s,j
according to the protocol. The output of this query is not
delivered to the recipient oracle, but is just given to A.
c,i, πr
This query allows the adversary to ask a client oracle
to start communicating with a particular server party for the
ﬁrst time between those parties for a particular time period.
• resume(πq
This query returns ⊥ if ik corresponding to oracle πq
c,i is not
set. Otherwise, πq
c,i outputs the 0-RTT connection request
packet that it would send to an oracle πr
s,j according to the
protocol. The output is given to A, who can deliver it to the
destination oracle, modify it, or drop it.
), for i, j ∈ [(cid:10)], q, r ∈ [d].
s,j
This query allows the adversary to ask a particular client
oracle to request a 0-RTT connection with a particular
server party, if the client party corresponding to that oracle
has communicated before with that server in a particular
time period. Recall that every server party is aware of its
communication status with respect to every client oracle that
may contact it.
• send(πr
{0, 1}∗.
p,j, m), for p ∈ {c, s}, j ∈ [(cid:10)], r ∈ [d] and m ∈
p,j , which will respond with ⊥ if
As a result, m is sent to πr
the oracle is in data exchange phase. Otherwise, A gets the
response, which is deﬁned according to the protocol.
This query allows the adversary to send a speciﬁed
packet m to a speciﬁed destination oracle. Note that the
attacker must provide a header for the packet that speciﬁes
the source and destination IP addresses and port numbers
as well as packet sequence numbers of its choice. The
destination oracle can check this information. The adversary
gets control of the resulting packet and can choose to modify,
drop, or deliver it to an oracle.
• revealik(πq
p,i
), for p ∈ {c, s}, i ∈ [(cid:10)], q ∈ [d].
As a result, A receives the contents of variable ik for
oracle πq
p,i.
This query allows the adversary to learn the initial key
set by the oracle of its choice.
• revealk(πq
p,i
), for p ∈ {c, s}, i ∈ [(cid:10)], q ∈ [d].
As a result, A receives the contents of variable k for oracle
πq
p,i.
This query allows the adversary to learn the ﬁnal key set
by the oracle of its choice.
222222
• corrupt(Si), for i ∈ [(cid:10)].
A gets back ski and the current scfgt
i and any other
state of Si.
This query allows the adversary to corrupt the server of
its choice and learn its long-term secrets including scfgt
i
for the current time period.
• encrypt(πr
for p ∈ {c, s},
j ∈ [(cid:10)], r ∈ [d], m0, m1, H ∈ {0, 1}∗, and
init ∈ {0, 1}:
p,j , m0, m1, H, init),
return ⊥ if |m0| (cid:5)= |m1| or init = 1 and πr
not in the initial data exchange stage or if init = 0
and πr
p(cid:3) ← {c, s} \ {p}
if init = 1
p,j is not in the data exchange stage
p,j is
IV ← get iv(ik, H), return ⊥ if IV was used
return (H, E(ikp(cid:2) , IV, H, mb
))
q
p,j
if init = 0
IV ← get iv(k, H), return ⊥ if IV was used
return (H, E(kp(cid:2) , IV, H, mb
))
q
p,j
p,j .
Above, ik, k, ikp(cid:2) , p(cid:3) belong to πr
This query, unlike the previous ones, deals with the
initial and ﬁnal data exchange phases (ﬂag init speciﬁes
which), while the previous ones concerned the initial and
ﬁnal key exchange phases. It is designed to follow the stan-
dard approach of capturing message privacy under chosen-
message attack. It allows the adversary to obtain a randomly
chosen ciphertext out of the two messages provided by the
adversary. Just like in the security deﬁnition for AEAD,
the attacker can select the header H. For QUIC it means
that the adversary can specify the source and destination
IP addresses and port numbers as well as packet sequence
numbers of its choice. Unlike the AEAD security model,
however, we do not let the adversary select the IV because
in QUIC the IV depends on the secrets of a party and
is not under the attacker’s control. get iv is the function
that we require to produce initialization vectors used for
encryption and appropriate headers. The initialization vector
is not given to the adversary. The adversary is restricted to
providing H whose destination IP address and port number
correspond to πr
p,j and whose source IP address and port
number correspond to an oracle πq
p(cid:2),i in the experiment, for
p(cid:3) ∈ {c, s} \ {p}.
• decrypt(πr
p,j , C, H, init),
{c, s},
j ∈ [(cid:10)], r ∈ [d], C, H ∈ {0, 1}∗, and init ∈ {0, 1}:
for
∈
p
return ⊥ if init = 1 and πr
p,i is not in the initial
data exchange phase, or init = 0 and πr
p,j is not
in the data exchange phase, or (H, C) was output
before by encrypt(πr
if init = 1
p,j , ∗, ∗, ∗, init)
IV ← get iv(ik, H),
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:06:38 UTC from IEEE Xplore.  Restrictions apply. 
if D(ikp, IV, H, C) (cid:5)= ⊥, return br
p,j else return ⊥
if init = 0
IV ← get iv(k, H),
if D(kp, IV, H, C) (cid:5)= ⊥, return br
p,j else return ⊥
p,j .
Above, ik, k, ikp(cid:2) , p(cid:3) belong to πr
This query also concerns the initial and ﬁnal data ex-
change phases. It follows the standard approach to capture
authenticity for AEAD schemes. The adversary’s goal is to
create a “new” valid ciphertext. If it succeeds, it is given the
challenge bit and thus can win.
• connprivate(πq
), for i, j ∈ [(cid:10)], q, r ∈ [d].
c,i, πr
s,j
As a result, the initial connection request is sent to πr
s,j .
The response, which is deﬁned according to the protocol, is
sent to πq
c,i and not shown to A. Any following response of
πq
c,i is not shown to A.
This query is not part of the existing deﬁnitions. It
models IP spooﬁng attacks, which the previous models did
not consider. We explain its importance below when we
discuss A’s advantage.
After the adversary is done with queries it may output a
tuple (p, i, q, b), for p ∈ {c, s}.
Before we proceed with the security deﬁnition we deﬁne
the notion of a matching conversation [27] taking place
between a client and a server. The scope of this concept
is the initial and ﬁnal key exchange phases only.
MATCHING CONVERSATIONS. For p ∈ {c, s}, p(cid:3) ∈ {c, s} \
{p}, i, j ∈ [(cid:10)], q, r ∈ [d], we denote with Rq
p,i the sequence
of all messages used for establishing keys (during stages
1 and 3) sent and received by πq
p,i in chronological order,
and we call Rq
p,i. With respect
to two message records Rq
p(cid:2),j , we say that Rq
p,i
is a preﬁx of Rr
p,i contains at least one message,
and the messages in Rq
p,i are identical to and in the same
order as the ﬁrst |Rq
| messages of Rr
p(cid:2),j. We say that πq
p,i
p,i
has a matching conversation with πr
p(cid:2),j, if the following two
conditions are both true:
• either p = c and p(cid:3) = s, or p(cid:3) = c and p = s;
• either Rr
p,i the message record at πq
p(cid:2),j is a preﬁx of Rq
p(cid:2),j , if Rq
p,i and πq
p,i and Rr
p,i has sent the last
p(cid:2),j has sent
p(cid:2),j and πr
message(s), or Rq
the last message(s).
p,i is a preﬁx of Rr
Note that
the notion of a matching conversation is not
sufﬁcient to deﬁne peers because, unlike in TLS, communi-
cating parties in QUIC may set initial keys without having a
matching conversation. This is why throughout our analysis
the notion of peers is instead equivalent to the notion of one
party setting a key with another party.
MEASURES OF A’S ATTACK SUCCESS.
• The server impersonation advantage of A Advs-imp
(A)
Π
is the probability that there exists an oracle πq
c,i such
that k of this oracle is set and there is no oracle πr
s,j
corresponding to a server party Sj such that πq
c,i has a
matching conversation to πr
s,j , no revealik contained
223223
c,i and πr
s,j , and Sj was not corrupted.
ik possibly set in the optional initial key agreement stage
between πq
The above captures the attack when the adversary imper-
sonates an honest server and makes a client think it sets a
key shared with the server, but the adversary may have the
shared key instead.
• The channel-corruption advantage of A Advch-corr
(A)
Π
(cid:4)
(cid:5)
is 2 Pr
b = bq
p,i
− 1,
where if p = s, then it must be the case that πq
matching conversation with some client oracle πr
that the following conditions hold
s,i has a
c,j , such
1) if Si was corrupted, then no encrypt(πq
s,i, ∗, ∗, ∗, 1)
and encrypt(πr
c,j, ∗, ∗, ∗, 1) queries were made for
any ∗ after or during the same time period τt that Si
was corrupted,
2) if Si was corrupted, then no encrypt(πq
s,i, ∗, ∗, ∗, ∗)
c,j, ∗, ∗, ∗, ∗) queries were made for
and encrypt(πr
any ∗ after Si was corrupted, and
3) no revealik(πq
s,i
)
and revealik(πr
c,j
)
) and revealk(πr
c,j
revealk(πq