title:Towards Analyzing the Input Validation Vulnerabilities associated
with Android System Services
author:Chen Cao and
Neng Gao and
Peng Liu and
Ji Xiang
Towards Analyzing the Input Validation Vulnerabilities
associated with Android System Services
Chen Cao†, Neng Gao†, Peng Liu‡, Ji Xiang†
PI:EMAIL, PI:EMAIL,
PI:EMAIL, PI:EMAIL
†
‡
Institute of Information Engineering, CAS
The Pennsylvania State University
ABSTRACT
Although the input validation vulnerabilities play a critical
role in web application security, such vulnerabilities are so
far largely neglected in the Android security research com-
munity. We found that due to the unique Framework Code
layer, Android devices do need speciﬁc input validation vul-
nerability analysis in system services. In this work, we take
the ﬁrst steps to analyze Android speciﬁc input validation
vulnerabilities. In particular, a) we take the ﬁrst steps to-
wards measuring the corresponding attack surface and re-
porting the current input validation status of Android sys-
tem services. b) We developed a new input validation vul-
nerability scanner for Android devices. This tool fuzzes all
the Android system services by sending requests with mal-
formed arguments to them. Through comprehensive evalu-
ation of Android system with over 90 system services and
over 1,900 system service methods, we identiﬁed 16 vulner-
abilities in Android system services. We have reported all
the issues to Google and Google has conﬁrmed them.
1.
INTRODUCTION
Android devices, including smartphones and tablets, are
growing rapidly in recent years. For example, worldwide
shipments of smartphones packing Android exceed 1 billion
in 2014 [5]. In the meanwhile, the number of malicious at-
tacks and security incidents against Android devices is also
increasing rapidly. For instance, according to Symantec’s
2015 Internet Security Threat Report (Volume 20), Syman-
tec found that 17 percent of all Android apps (nearly one
million total) were actually malware in disguise in 2014 [8].
In the literature, the main vulnerabilities and attacks that
have been extensively studied include privilege escalation
attack [14, 15, 18], malware [34, 39], repackaging attacks
[22, 36, 37], component hijacking attack [27] and so on.
In this work, we take the ﬁrst steps to analyze the in-
put validation vulnerabilities associated with Android de-
vices. Although the input validation vulnerabilities play
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
ACSAC ’15, December 07 - 11, 2015, Los Angeles, CA, USA
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3682-6/15/12 ... $15.00.
http://dx.doi.org/10.1145/2818000.2818033.
a dominant role in web application security, such vulner-
abilities are so far largely neglected in the Android security
research community.
In the area of web application secu-
rity, the existing input validation work can be broken down
into four classes. Class A focuses on SQL Injection caused
by improper sanitization of user-supplied input that results
in the execution of arbitrary SQL commands [24]. Class
B focuses on XSS(Cross-Site Scripting) which exploits vul-
nerabilities in web page validation by injecting client-side
script code [26, 29]. Class C focuses on CSRF(Cross-Site
Request Forgery) caused by failing to verify whether a par-
ticular state-changing HTTP request received by the server-
side portion of the web application was initiated from the
expected client-side origin [12]. Class D focuses on Buﬀer
Overﬂows caused by insuﬃcient bounds checking for user-
supplied input data which may lock up the application, over-
write other data in memory, or crash the server [16].
Despite of these four classes of existing work on input val-
idation, we found that Android devices need speciﬁc input
validation vulnerability analysis in system services, which
has not yet been conducted in the literature. Android sys-
tem services play a unique role in Android devices. They
are services provided by the system or system apps and run
in their processes in the background. These services encap-
sulate system functionalities, such as bluetooth, telephone,
etc. and provide them to apps. System services’ code occu-
pies a dominant portion of the Android framework. In this
sense, the system services are actually the primary diﬀer-
ence between an Android system and a conventional PC. A
conventional PC does not run any of these system services.
So conventional input validation vulnerability analysis does
not take Android system services into consideration.
In this work, to address the input validation vulnerabil-
ities associated with Android system services, there are at
least two problems:
Problem 1: To which extent system service code misses
input validation?
Problem 2: How to develop a cost-eﬀective vulnerability
scanner to ﬁnd the vulnerability caused by invalid input?
To address Problem 1, we manually inspected the source
code of the system service to ﬁnd how many system service
methods miss input validation in their function body. We
found that a great many system service methods validate
the incoming arguments. However, many methods do not
check the input adequately and there are still vulnerabilities
in these system services.
To address Problem 2, we designed and implemented a
semi-automatic tool to ﬁnd the vulnerability caused by in-
361
valid input. This tool fuzzes all the system services in An-
droid system by sending requests with malformed arguments
to them constantly. With the help of this tool, we found 16
input validation vulnerabilities in Android system services.
The exploitation of these vulnerabilities could crash the sys-
tem, freeze the screen, prevent the system from uninstalling
apps and so on. The malicious app exploiting these vulner-
abilities sometimes may need certain permissions. However,
for many other attacks (e.g., crashing the system and freez-
ing the screen), the malicious app does not need any special
permission.
To summarize, this work presents the following original
contributions:
• To the best of our knowledge, this work takes the ﬁrst
steps towards analyzing the input validation vulnera-
bilities associated with Android system services.
• We take the ﬁrst steps towards measuring the attack
surface and reporting the current input validation sta-
tus of Android system services.
• We developed a new input validation vulnerability scan-
ner for Android devices.
• Our main ﬁndings are 16 vulnerabilities in Android
system services.
The rest of the paper is organized as follows:
Section 2 presents the system model of Android system
services. Section 3 depicts the current input validation sta-
tus of Android system services. Section 4 elaborates our
semi-automatic tool and the main ﬁndings. The discussion
and the limitations of this tool are given in section 5. Sec-
tion 6 gives an overview of related work. Conclusion is in
section 7.
2. SYSTEM MODEL
2.1 The Interface between Android Apps and
System Services
An app can send a request to a system service. Generally,
an app must invoke several API functions to send a request
to a system service. For example, if an app wants to set
the device’s WiFi state, it must take two steps, i.e., invoke
two API functions Context.getSystemService(Context.W-
IFI_SERVICE) and WifiManager.setWifiEnabled(boolean
enabled), to complete that. Moreover, some system service
methods are not exposed to the app through these API func-
tions. So, we found the best way to send a request is to use
a speciﬁc API call named transact, which takes only one
step to complete that and could invoke any system service
method.
A request is essentially a set of input arguments. To send
a request, ﬁrstly, the app calls the Android API trans-
act(...). This function call requires four input arguments.
Argument one is an integer number specifying which system
service method would be called. Argument two is a parcel
object ﬁlled with a string representing the related system
service’s interface and the arguments needed by the target
system service methods. Argument three is an empty par-
cel object storing the reply if need be. Argument four is
an integer number specifying whether the target system ser-
vice should reply. When this function gets executed, the
Figure 1: The interface between the app and the
system service
app’s process will send these input arguments to the sys-
tem service through the binder driver. The system service
will receive the input arguments through function onTrans-
act(...). This function can handle all types of requests. It
will do two things: First, it extracts the arguments from the
ﬁrst parcel object, which are required by the target system
service method. Second, based on the ﬁrst integer number
in the request, this method calls the target system service
method.
Take the system service wiﬁ for example, ﬁgure 1 illus-
trates the interface between the app and this system ser-
vice. The request is sent from the API function trans-
act to the function onTransact through the binder driver.
The dash line between the two functions depicts that the
arguments in the two functions are the same. After on-
Transact extracts the arguments from the ﬁrst parcel ob-
ject, it calls the target system service method WifiServi-
ceImpl.setFrequencyBand with the integer argument band
and the boolean argument persist.
2.2 Threat Model
We assume the input validation attacks are launched from
a malicious app. The app is already installed on the victim
device. To launch such attacks, the malicious app may need
certain permissions. For example, if the malicious app wants
to attack the system service wiﬁ, it must own the permission
CHANGE_WIFI_STATE. However, for many other attacks (e.g.,
crashing the system and freezing the screen), the malicious
app does not need any special permission. The malicious
app only needs to send a special request to the target sys-
tem service. For instance, to attack the system service wiﬁ,
the malicious app only needs to send the request which has
the parcel object with the integer argument band greater
than two and the boolean argument persist true. Then
the device loses connection with a WiFi AP(Access Point).
It should be noticed that this malicious request looks very
similar to a legitimate one. This is why such attacks are
diﬃcult to be detected.
2.3 Problem Statement
This paper focuses on Android 5.0.1 (the latest version),
which provides 96 system services with 1972 total interface
methods. We deﬁne “interface method” as a system service
362
more, lots of methods need the app to have certain per-
missions, such as STATUS_BAR_SERVICE and BLUETOOTH. The
third-party app could request some permission, but it is not
authorized to have some other permission.
Although a great many methods validate the incoming
arguments, some methods may not do the validation suf-
ﬁciently. For instance, the method WifiServiceImpl.set-
FrequencyBand enforces that the app should have the per-
mission CHANGE_WIFI_STATE. Nevertheless, it does not verify
the incoming arguments adequately and the third-party app
could request this permission. Thus, the app could send a
request to set band number greater than two and the device
loses connection with the WiFi AP.
In summary, lots of system service methods do input vali-
dation. But some methods don’t validate the incoming argu-
ments adequately, although they enforce the permission or
verify some arguments. Therefore, much more work should
be done to study these methods’ input validation and the
vulnerability caused by these input validation problems. We
developed a cost-eﬀective vulnerability scanner to help ﬁnd
the vulnerabilities.
4. SOLVING PROBLEM 2
In this section, we demonstrate a vulnerability scanner
to help ﬁnd the vulnerabilities caused by the input valida-
tion problems. This tool is a semi-automatic tool. It fuzzes
Android system services by sending malformed requests to
them. We named it buzzer (Binder Fuzzer). Before intro-
ducing buzzer’s design and implementation, we ﬁrst discuss
the assumption made in buzzer, which helps illustrate the
design and implementation details in the rest of this section.
4.1 Assumptions
We assume that in Android system, buzzer acts as an or-
dinary third-party app. It could request all the permissions
which an ordinary third-party app could be authorized to
have.
The target test Android system is pure Android 5.0.1
without any change. The system images have two sources.
The ﬁrst is directly compiled from the source code from An-
droid Open Source Project (AOSP) [4]. The second is down-
loaded from Google’s oﬃcial website hosting Nexus’s images
[6].
4.2 Design
The high-level idea of our detection method is very intu-
itive. Because Android system service could receive requests
from the app, buzzer leverages this method to send requests
to those services constantly.
Two challenges existed in buzzer’s design process. The
ﬁrst was how to make buzzer extensible for diﬀerent Android
versions. Although our target testing Android version was
5.0.1 which was the latest version when we did the fuzzing,
we wanted to extend buzzer easily when new versions are
ready in the future. Our solution was to modularize dif-
ferent functionalities. For one system service, there is only
one module related with it. This module provides all argu-
ments this system service needs. Namely, diﬀerent system
services have diﬀerent modules in buzzer. In addition, re-
quest sending and logging are also in diﬀerent modules. The
second was how to record and analyze logs when fuzzing
system services. As we assumed that the target Android
system was pure without any change, we cannot add code
Figure 2: The ratio of diﬀerent methods
method called by the function onTransact(...). On av-
erage, each interface method contains 1.8 input arguments.
Furthermore, an app could only send requests by the func-
tion transact(...) with four arguments. The arguments of
the interface methods are packaged in the second argument.
Thus, the input validation attack surface for Android sys-
tem services consists of 1972×1.8+3 IAVR(Input Argument
Value Range) vectors. Each IAVR vector corresponds to the
value range associated with a particular input argument.
Therefore, to address the input validation vulnerabilities
associated with Android system services, there are two prob-
lems that should be addressed: