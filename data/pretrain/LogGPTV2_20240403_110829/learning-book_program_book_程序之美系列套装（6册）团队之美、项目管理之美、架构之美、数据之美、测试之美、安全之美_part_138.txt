剩余工作
梦想
图15-4：进度表的现实情况通常和计划不一致。如何处理，完全依
靠退出标准
这个选择怎么做，应该完全依赖退出标准。这的确是一种形势，当
你想清楚它对里程碑结束的意义时，你就能从这种形势中获益匪
浅。在着陆困难的紧张压力下，不要发明新的退出标准，你需要做
的事情就是回头看，调整你几周之前所做的标准。如果团队已经有
了熟悉的可参考的退出标准，那么在终局阶段的艰难情况下做决策
就变得容易多了。
为什么改变角度而无法生效
765
---
## Page 767
再以飞机做比喻，改变降落角度以配合剩余距离，使得着陆过程变
得不稳定。项目很像飞机，当下降速度很高时，就控制不好。在那
样的速度下，为保持稳定，要有很多事情需要同时做好。如果你正
在接近跑道的飞机上，发觉你的做法不对，就会转向，重新进入跑
道（和进度表日期不同，要移动跑道是不可能的）。关气状况不佳
时，商用飞机通常会重新降落。然而，项目很少经得起这么做。项
目像飞机，但是燃料不足：资源只够降落一次。由于只有一次机
会，神志清醒的飞行员要做出非常谨慎而且计划完备降落。神志清
醒的项目经理也应该这么做。如果你的日期或功能组不能移动（就
像跑道一样），你必须尽早并始计划着陆事项。
为什么变得更糟糕
多数人如何制定工作的优先级，这背后有个基本的心理原则。在所
有的事情都是平等对待的情况下，人们会倾向于避免做不想做的事
[l。这意味着，当进度增加时，剩余的工作项目或Bug修正，就会
是该里程碑中最令人头疼和不想做的工作。即使剩余的工作做起来
会非常有趣，即使团队在一天或一周内修正一些Bug就会获得奖
赏，但要选择有一定难度的Bug以满足奖赏配额，自然还是有压力
的。
在里程碑末端时，人们都趋于疲惫、沮丧而紧张的情况下，而这种
情况下表现出来的执行力就会较差。在进度表后期，介于各领域之
间的难以处理的Bug，倾向于在开发团队内部四处弥散（Bug就像烫
手山芋般）。程序员发现其中某个Bug，感觉很难处理，又迫于其
他工作的压力，就把这个Bug分配给其他可能对其负责的人处理。
就像Weinberg所写的：“......问题不会被解决，只是在传播。"即使
是最好的程序员，有时也会遭遇这样自然的诱惑。
拖延困难工作的基本趋势，也适用于发现Bug一虽然它的起因并
非心理因素。花费飞较长时间才能找到的Bug，或者进度表后期才
会出现的Bug，自然倾向于是那种更加复杂的[51（如图15-5所
示）。对那些复杂但优先级很低的Bug而言，这并没有什么；但对
那些优先级高的Bug而言，这种趋势就是个非常严重的问题。发现
这类Bug不但比平均时间要长，而且修正它们也比平均时间要长。
图15-4所示的那些直线路径都是错的——项目接近某个日期的路
线，结果几乎都是渐进线（曲线），看起来比较接近图15-6所示。
团队可能像以前一样努力工作，但是，从朝向目标前进的过程的角
度来看，结果就是下降的。你越接近你的日期，这一点就越真实。
766
---
## Page 768
寻找或修正
Bug的时间
Bug的复杂度
图15-5：严重的Bug倾向于在进度表晚期才被发现或修正。这意味
着路线的角度并不是直线，而是随工作进展而逐渐变化的曲线（请
参见图15-6）
剩余工作
时间
图15-6：通用而实际的路线角度图，假定团队的努力处于常数水平
修正路线角度的粗略指南
767
---
## Page 769
里程碑或项目完成的路线角度并不神秘。就像其他和进度安排有关
的任务那样（请参阅第2章），也有各种考虑可用于确定预测角度
有多么精确。以下是考虑的主要因素：
·看一看团队和项目过去的表现。在规划角度时，查看团队在过去
面临相似类型项目的终局时段时都表现得怎么样。对于多里程碑项
目，看一看以前的里程碑曲线，比较一下规划的和实际的曲线（不
要作：用最初的规划表和最终实际的进度表做比较）。无论你怎
么想，都要假定你目前正在规划的里程碑事项比以前的要更加困
滩。如果你没有数据可以作为决定角度的基础，那么你所想的不就
是在猜测吗？如果你必须要猜，也要猜得保守一些。
做出合理的估算。角度只是另外一种进度估算任务。让合适的人
在房间内，把剩余的工作分成多项任务，讨论风险和假设，并做出
估算。至少，这可作为团队努力的最终路径，大家会觉得参与了流
程，并一起定义了角度。士气会支持这一角度，而不是抵抗它。
规划缓慢的曲线，而不是直线。即使没有数据，也应该把工作进
展的速度，规划得像Bug数量查找下降那样缓慢（请参阅图15-
6）。假设越接近最后期限，工作就会越难。用曲线绘制图表时，
而不是直线。
·不要相信那些怪异的想法。图表很容易做。你可以把线放在任何
你喜欢的地方，而不用理会现实，你甚至可能说服他人，你所规划
的线条背后都存在某些逻辑。想一想飞机上的飞行员：根据你所知
道的，你会以这种角度飞行吗？举起红旗，做一个揭发者。保护你
的团队免于道降。如果你的方法太保守，所能发生的最糟糕的事
情，就是你会飞在进度表之前；然而，如果你太冒进，所有麻烦的
事情都会发生。
·制做一个黑匣子。至少，要确定真正的功能数据都被捕提到（请
参阅下一节）。道降后，你就有证据显示什么地方出错，这样，对
下个项目或里程碑，你就有做调整的强力论据。
评价的元系
在中盘和终局阶段，追踪工作的进展就变得十分重要。团队越大，
就越滩看清项目本身的状况。为了中途修正或调整（请参阅第14
768
---
## Page 770
章），你必须清楚了解项目的状态，这样才能诊断症状，同时预测
项目将如何回应调整。
无论你决定使用哪些评价方法，都要让整个团队充分了解。在第14
章中，我提到工作项目是中盘阶段最重要的追踪机制。这里，我们
要再深入讨论中盘阶段的其他有用的评价方式，但是重点却是追踪
终盘阶段的工作。
对于终局时段而言，你可以再使用先前用过的项目记分板；只要确
定重要的评价因素都被给予合理的重视（去掉那些再也没什么重要
性的评价因素，例如工作项目）。应该把记分板放在门厅，让大家
能看得到。它可以像你经常更新的大白板那么简单，或者像从网络
上收集最新数据的专用终端机那样奇异（为了方便起见，应该在休
息室、茶水间或其他众人常去的地方附近）。
每日构建
每天为项目做构建，你就会及时处理掉各种问题，而不是拖延到明
大。每个人都可以查看当前的构建版本，并且立刻了解项目的状
态，这样你就很少依赖别人去写状态报告或做其他恼人的杂事；相
反地，你只要加载当前构建版本，使用特定的功能或性能，就可以
得到一个粗略的概念。维护每日构建版本（并创建工具使之成为可
能，L）是非常昂贵的，但是却是值得的。
通过每日构建操作，当签入程序损坏了其他组件时，程序员（和整
个团队）会立刻知道，这样可以有助于把签入程序保持高质量的水
平。每天，当建立构建版本前，有一段禁止程序签入的时间，这样
能建立稳定的程序库以进行测试，确定构建版本的质量（通常，这
些日常测试称为冒烟测试：这是一个参考测试电子组件的词，把电
路板插进去，遂一查看有无部分冒烟）。之后，上载至源代码树的
签入程序就会出现在下一个构建版本中。
对于每个构建版本，应该用一组测试来确定构建版本的质量。你只
要分成三等一—好：通过所有测试：中等：通过部分测试；不好：
很少或没有通过测试。任何被看作引起测试失败原因的特殊Bug，
都应该和构建版本信息放在一处，并且给予高优先级。
这些构建版本质量测试（也就是构建版本确认测试（build
verificationtests），或者BVT），应该是在通往里程碑的退出标准
769
---
## Page 771
时进行。在里程碑早期，相对于退出标准，BVT应该比较宽松：例
如，可以接受每周只有一个“好"的构建版本。但是随着团队接近完
成功能，标准就应该提高。有了每日构建和质量测试，你就总会有
质量衡量和调节质量的方法了。
Bug/缺陷管理
当功能完成时，任何完工前应该完成的剩余工作都应该转入Bug数
据库。这样可以为项目提供单一控制和评价系统。用来追踪Bug的
系统可以很简单，但是必须只能有一个，而且每个人都要使用它。
如果某些程序员有其个人偏爱的追踪工作的系统，而且各不相同，
就不可能在工作进展中，展现出任何项目层次的控制或评价。通
常，当团队完成功能需要转移并时，要有人积极督促大家把他们自
已追踪的工作项目纳入系统中去。
当出现问题时，要养成习惯询问：“那个Bug编号是多少？”如果他
们说没有编号，那就停止讨论，直到那个Bug有了编号为止。这看
起来好像很专横，但是却符合项目的最佳利益。只需要两分钟就可
以创建一个Bug编号，这从项目层次的角度来看是完全值得这么做
的。如果没有问题对构建版本或者程序库产生冲击，那么人们自己
追踪工作也很不错；你不希望Bug系统陷入到个人Bug备忘录中，或
者是个人工作列表现事中。（如果你允许这么做，确认这些东西归
属为特定Bug类型，这样就可以在报告或者查询中过滤掉。）
为了可供参考，所有的Bug至少要包括以下信息。如果你有用得很
得心应手的Bug系统，你可以略过这部分。你可以使用各种各样的
信息来追踪Bug，但是就我的经验来说，要有效管理Bug，需要这些
核心特性。
优先级。尽量使之保持简单。优先级1=必须修正。优先级2=找机
会修正。优先级3=想修正，但是不可能修正。优先级4=不可能修
正。
·严重性。Bug的影响有多么严重？严重性1=数据丢失，系统瘫
痪，或者出现安全问题。严重性2=重要功能没有如期（指定）运
转。严重性3=次要功能没有如期（指定）运转。严重性和优先级截
然不同。例如，可能有个造成浏览器瘫痪的脚本错误，这很严重
（严重性1）：但是因为它在注册网页的电子邮件字段里，当你多
770
---
## Page 772
次大写输入“PAPAYA"时才会出现，这是低优先级（严重性1，但却
是优先级4）。
·分配。所有的Bug都应该分配给个人。新的Bug可以分配有一个别
名，但是Bug分类（稍后讨论）的部分目标是尽快地把Bug分配给个
人。为了使alpha或者beta版本的的Bug能够进入分类程序，可以建立
（））中
Bug可以分配到这个值。被分配到这个值得Bug可以进行分类，然后
分配给具体的人负责。
·再现（也就是repro）。让其他人能够再现这个Bug的一连串动
作。这也许是Bug质量最重要的一环。不良的再现案例浪费了团队
的时间，道使程序员投入更多的精力，超过了只要找出Bug是什么
所花费的时间。好的Bug会有简短而简单的再现步骤[l。
·区域。对于较大的项目而言，Bug应该根据它们在项目（区域）
中出现的位置来进行分类。这样就能让Bug按照组件进行追踪，而
不仅仅是按照开发人员来进行追踪。
·公开者。公开这个Bug的人的姓名以及联络信息。