requests are triggering the same error or different errors. You may also be able
cc1155..iinndddd 661166 88//1199//22001111 1122::1166::0077 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 617
Chapter 15 n Exploiting Information Disclosure 617
to determine the sequence in which different parameters are processed by
submitting bad input within multiple parameters and identifying the location
at which an error occurs. By systematically manipulating different parameters,
you may be able to map the different code paths being executed on the server.
Stack Traces
Most web applications are written in languages that are more complex than
simple scripts but that still run in a managed execution environment, such
as Java, C#, or Visual Basic .NET. When an unhandled error occurs in these
languages, it is common to see full stack traces being returned to the browser.
A stack trace is a structured error message that begins with a description
of the actual error. This is followed by a series of lines describing the state of
the execution call stack when the error occurred. The top line of the call stack
shows the function that generated the error, the next line shows the function
that invoked the previous function, and so on down the call stack until the
hierarchy of function calls is exhausted.
The following is an example of a stack trace generated by an ASP.NET
application:
[HttpException (0x80004005): Cannot use a leading .. to exit above the
top directory.]
System.Web.Util.UrlPath.Reduce(String path) +701
System.Web.Util.UrlPath.Combine(String basepath, String relative)+304
System.Web.UI.Control.ResolveUrl(String relativeUrl) +143
PBSApp.StatFunc.Web.MemberAwarePage.Redirect(String url) +130
PBSApp.StatFunc.Web.MemberAwarePage.Process() +201
PBSApp.StatFunc.Web.MemberAwarePage.OnLoad(EventArgs e)
System.Web.UI.Control.LoadRecursive() +35
System.Web.UI.Page.ProcessRequestMain() +750
Version Information: Microsoft .NET Framework Version:1.1.4322.2300;
ASP.NET Version:1.1.4322.2300
This kind of error message provides a large amount of useful information
that may assist you in fi ne-tuning your attack against the application:
n It often describes the precise reason why an error occurred. This may
enable you to adjust your input to circumvent the error condition and
advance your attack.
n The call stack typically makes reference to a number of library and third-
party code components that are being used within the application. You
can review the documentation for these components to understand their
intended behavior and assumptions. You can also create your own local
cc1155..iinndddd 661177 88//1199//22001111 1122::1166::0077 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 618
618 Chapter 15 n Exploiting Information Disclosure
implementation and test this to understand the ways in which it handles
unexpected input and potentially identify vulnerabilities.
n The call stack includes the names of the proprietary code components
being used to process the request. The naming scheme for these and the
interrelationships between them may allow you to infer details about the
application’s internal structure and functionality.
n The stack trace often includes line numbers. As with the simple
script error messages described previously, these may enable you
to probe and understand the internal logic of individual application
components.
n The error message often includes additional information about the appli-
cation and the environment in which it is running. In the preceding
example, you can determine the exact version of the ASP.NET platform
being used. This enables you to investigate the platform for known or
new vulnerabilities, anomalous behavior, common confi guration errors,
and so on.
Informative Debug Messages
Some applications generate custom error messages that contain a large amount
of debug information. These are usually implemented to facilitate debugging
during development and testing and often contain rich detail about the applica-
tion’s runtime state. For example:
-------------------------------------------
* * * S E S S I O N * * *
-------------------------------------------
i5agor2n2pw3gp551pszsb55
SessionUser.Sessions App.FEStructure.Sessions
SessionUser.Auth 1
SessionUser.BranchID 103
SessionUser.CompanyID 76
SessionUser.BrokerRef RRadv0
SessionUser.UserID 229
SessionUser.Training 0
SessionUser.NetworkID 11
SessionUser.BrandingPath FE
LoginURL /Default/fedefault.aspx
ReturnURL ../default/fedefault.aspx
SessionUser.Key f7e50aef8fadd30f31f3aea104cef26ed2ce2be50073c
SessionClient.ID 306
SessionClient.ReviewID 245
UPriv.2100
cc1155..iinndddd 661188 88//1199//22001111 1122::1166::0077 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 619
Chapter 15 n Exploiting Information Disclosure 619
SessionUser.NetworkLevelUser 0
UPriv.2200
SessionUser.BranchLevelUser 0
SessionDatabase fd219.prod.wahh-bank.com
The following items are commonly included in verbose debug messages:
n Values of key session variables that can be manipulated via user input
n Hostnames and credentials for back-end components such as databases
n File and directory names on the server
n Information embedded within meaningful session tokens (see Chapter 7)
n Encryption keys used to protect data transmitted via the client (see Chapter 5)
n Debug information for exceptions arising in native code components,
including the values of CPU registers, contents of the stack, and a list of
the loaded DLLs and their base addresses (see Chapter 16)
When this kind of error reporting functionality is present in live production
code, it may signify a critical weakness in the application’s security. You should
review it closely to identify any items that can be used to further advance your
attack, and any ways in which you can supply crafted input to manipulate the
application’s state and control the information retrieved.
Server and Database Messages
Informative error messages are often returned not by the application itself but
by some back-end component such as a database, mail server, or SOAP server. If
a completely unhandled error occurs, the application typically responds with an
HTTP 500 status code, and the response body may contain further information
about the error. In other cases, the application may handle the error gracefully
and return a customized message to the user, sometimes including error infor-
mation generated by the back-end component. In some situations, information
disclosure can itself be used as a conduit for an attack. The information disclosed
by an application in a debug message or exception is often unintentional and
as a result the organization’s security procedures may entirely overlook the
existence of the disclosure.
The error returned may enable a range of further attacks, as described in the
following sections.
Using Information Disclosure to Advance an Attack
When a specifi c attack is launched against a server back-end component, it is
common for that component to give direct feedback on any errors encountered.
This can help you fi ne-tune the attack. Database error messages often contain
cc1155..iinndddd 661199 88//1199//22001111 1122::1166::0077 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 620
620 Chapter 15 n Exploiting Information Disclosure
useful information. For example, they often disclose the query that generated
the error, enabling you to fi ne-tune a SQL injection attack:
Failed to retrieve row with statement - SELECT object_data FROM
deftr.tblobject WHERE object_id = ‘FDJE00012’ AND project_id = ‘FOO’
and 1=2--’
See Chapter 9 for a detailed methodology describing how to develop database
attacks and extract information based on error messages.
Cross-Site Scripting Attacks Within Error Messages
As described in Chapter 12, securing against cross-site scripting is an arduous
task, requiring identifi cation of each output location of user-supplied data.
Although most frameworks automatically HTML-encode data when reporting
errors, this is by no means universal. Error messages can appear in multiple,
often unusual places within an HTTP response. In the HttpServletResponse
.sendError() call used by Tomcat, the error data is also part of the response
header:
HTTP/1.1 500 General Error Accessing Doc10083011
Server: Apache-Coyote/1.1
Content-Type: text/html;charset=ISO-8859-1
Content-Length: 1105
Date: Sat, 23 Apr 2011 08:52:15 GMT
Connection: close
An attacker who has control over the input string Doc10083011 could sup-
ply carriage return characters and conduct an HTTP header injection attack,
or a cross-site scripting attack within the HTTP response. More details can be
found here:
http://www.securityfocus.com/archive/1/495021/100/0/threaded
Frequently customized error messages are intended for a non-HTML desti-
nation, such as a console, yet they are erroneously reported to the user in an
HTTP response. In these situations, cross-site scripting is often easily exploitable.
Decryption Oracles in Information Disclosure
Chapter 11 gave an example of how an unintentional “encryption oracle” could
be harnessed to decrypt strings presented to the user in encrypted format. The
same issue can apply to information disclosure. Chapter 7 gave an example of
an application that provided an encrypted download link for fi le access. If a fi le
had since been moved or deleted, the application reported that the fi le could
not be downloaded. Of course, the error message contained the fi le’s decrypted
cc1155..iinndddd 662200 88//1199//22001111 1122::1166::0077 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 621
Chapter 15 n Exploiting Information Disclosure 621
value, so any encrypted “fi lename” could be provided to the download link,
resulting in an error.
In these cases, the information disclosure resulted from abuse of deliberate
feedback. It is also possible for information disclosure to be more accidental if
parameters are decrypted and then used in various functions, any of which may
log data or generate error messages. An example encountered by the authors
was a complex work fl ow application that made use of encrypted parameters
transmitted via the client. Swapping the default values used for dbid and grou-
phome, the application responded with an error:
java.sql.SQLException: Listener refused the connection with the
following error: ORA-12505, TNS:listener does not currently know
of SID given in connect descriptor The Connection descriptor used
by the client was: 172.16.214.154:1521:docs/londonoffice/2010/general
This provided considerable insight. Specifi cally, dbid was actually an encrypted
SID for a connection to an Oracle database (the connection descriptor takes the
form Server:Port:SID), and grouphome was an encrypted fi le path.
In an attack analogous to many other information disclosure attacks, knowl-
edge of the fi le path provided the necessary information to conduct a fi le path
manipulation attack. Supplying exactly three path traversal characters in a
fi lename, and navigating up a similar directory structure, it was possible to
upload fi les containing malicious script directly into another group’s work
space:
POST /dashboard/utils/fileupload HTTP/1.1
Accept: text/html, application/xhtml+xml, */*
Referer: http://wahh/dashboard/common/newnote
Accept-Language: en-GB
Content-Type: multipart/form-data; boundary=------7db3d439b04c0
Accept-Encoding: gzip, deflate
Host: wahh
Content-Length: 8088
Proxy-Connection: Keep-Alive
--------7db3d439b04c0
Content-Disposition: form-data; name=”MAX_FILE_SIZE”
100000
--------7db3d439b04c0
Content-Disposition: form-data; name=”uploadedfile”; filename=”../../../
newportoffice/2010/general/xss.html”
Content-Type: text/html
...
...
cc1155..iinndddd 662211 88//1199//22001111 1122::1166::0077 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 622
622 Chapter 15 n Exploiting Information Disclosure
HACK STEPS
1. When you are probing the application for common vulnerabilities by sub-
mitting crafted attack strings in different parameters, always monitor the
application’s responses to identify any error messages that may contain
useful information.
Attempt to force an error response from the application by supplying
encrypted data strings in the wrong context, or by performing actions on
resources that are not in the correct state to handle the action.
2. Be aware that error information that is returned within the server’s
response may not be rendered on-screen within the browser. An efficient
way to identify many error conditions is to search each raw response for
keywords that are often contained in error messages. For example:
n error
n exception
n illegal
n invalid
n fail
n stack
n access
n directory
n file
n not found
n varchar
n ODBC
n SQL
n SELECT
3. When you send a series of requests modifying parameters within a base
request, check whether the original response already contains any of the
keywords you are looking for to avoid false positives.
4. You can use the Grep function of Burp Intruder to quickly identify any
occurrences of interesting keywords in any of the responses generated by
a given attack (see Chapter 14). Where matches are found, review the rel-
evant responses manually to determine whether any useful error informa-
tion has been returned.
TIP If you are viewing the server’s responses in-browser, be aware that
Internet Explorer by default hides many error messages and replaces them with
a generic page. You can disable this behavior by choosing Tools ➢ Internet
Options and then choosing the Advanced tab.
cc1155..iinndddd 662222 88//1199//22001111 1122::1166::0077 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 623
Chapter 15 n Exploiting Information Disclosure 623
Using Public Information
Because of the huge variety of web application technologies and components in
common use, you should frequently expect to encounter unusual messages that
you have not seen before and that may not immediately indicate the nature of
the error that the application experienced. In this situation, you can often obtain
further information about the message’s meaning from various public sources.
Often, an unusual error message is the result of a failure in a specifi c API.
Searching for the text of the message may lead you to the documentation for
this API or to developer forums and other locations where the same problem
is discussed.
Many applications employ third-party components to perform specifi c com-
mon tasks, such as searches, shopping carts, and site feedback functions. Any
error messages that are generated by these components are likely to have arisen
in other applications and probably have been discussed elsewhere.
Some applications incorporate source code that is publicly available. By searching
for specifi c expressions that appear in unusual error messages, you may discover
the source code that implements the relevant function. You can then review this
to understand exactly what processing is being performed on your input and
how you may be able to manipulate the application to exploit a vulnerability.
HACK STEPS
1. Search for the text of any unusual error messages using standard search
engines. You can use various advanced search features to narrow down
your results. For example:
“unable to retrieve” filetype:php
2. Review the search results, looking both for any discussion about the error
message and for any other websites in which the same message has
appeared. Other applications may produce the same message in a more
verbose context, enabling you to better understand what kind of condi-
tions give rise to the error. Use the search engine cache to retrieve exam-
ples of error messages that no longer appear within the live application.
3. Use Google code search to locate any publicly available code that may be
responsible for a particular error message. Search for snippets of error
messages that may be hard-coded into the application’s source code. You
can also use various advanced search features to specify the code lan-
guage and other details if these are known. For example:
unable\ to\ retrieve lang:php package:mail
4. If you have obtained stack traces containing the names of library and
third-party code components, search for these names on both types of
search engines.
cc1155..iinndddd 662233 88//1199//22001111 1122::1166::0077 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 624
624 Chapter 15 n Exploiting Information Disclosure
Engineering Informative Error Messages
In some situations, it may be possible to systematically engineer error conditions
in such a way as to retrieve sensitive information within the error message itself.
One common situation in which this possibility arises is where you can cause
the application to attempt some invalid action on a specifi c item of data. If the