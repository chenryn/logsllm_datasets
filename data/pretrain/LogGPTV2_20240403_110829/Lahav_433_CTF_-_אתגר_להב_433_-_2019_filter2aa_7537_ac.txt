```
Cannot GET /asdf
```
Perhaps we need to use the logic in `2.js`. By running it locally and using the browser developer console to call `get_admin_cookie()`, we get:
```
>>> get_admin_cookie()
9Va5p55F21sq5RXkvWqrk5zNfqw3uq4BSKEuHHHpLXdxzJZe8qihyAMYQbtFPvacyNEpd659oWVN8obD57GhVGSGULcJFDgERcSxrZfbTcd2XLUAXE5HZnjU3fP99e8rGFr2UoYmNKqknuh9ty319CTeUmUWCzLucUwv9cf54WY 2.js:31:28
encoding: bitcoin 2.js:32:5
undefined
```
A quick search reveals that "bitcoin encoding" is also known as "base58 encoding", and we can easily find an online decoder:
```console
# curl "http://lenschulwitz.com/base58er" --data "address=9Va5p55F21sq5RXkvWqrk5zNfqw3uq4BSKEuHHHpLXdxzJZe8qihyAMYQbtFPvacyNEpd659oWVN8obD57GhVGSGULcJFDgERcSxrZfbTcd2XLUAXE5HZnjU3fP99e8rGFr2UoYmNKqknuh9ty319CTeUmUWCzLucUwv9cf54WY&b58action=decode"
7B0A09686173683A207368613235360A09636F6F6B6965206E616D653A204163636F756E74547970650A096C656E6774683A20340A0956616C3A65313563663632356466396365353661313233663762326434383138646439323738616331643835353363333130616566386661393939306639643662333661200A7D
```
Let's decode that as ASCII:
```console
# curl -s "http://lenschulwitz.com/base58er" --data "address=9Va5p55F21sq5RXkvWqrk5zNfqw3uq4BSKEuHHHpLXdxzJZe8qihyAMYQbtFPvacyNEpd659oWVN8obD57GhVGSGULcJFDgERcSxrZfbTcd2XLUAXE5HZnjU3fP99e8rGFr2UoYmNKqknuh9ty319CTeUmUWCzLucUwv9cf54WY&b58action=decode" | xxd -r -p && echo
{
        hash: sha256
        cookie name: AccountType
        length: 4
        Val:e15cf625df9ce56a123f7b2d4818dd9278ac1d8553c310aef8fa9990f9d6b36a
}
```
We are searching for a string of length 4 with a given SHA256 value, should be easy to brute-force:
```python
import string
import hashlib
from itertools import product
HASH = "e15cf625df9ce56a123f7b2d4818dd9278ac1d8553c310aef8fa9990f9d6b36a"
for word in (''.join(i) for i in product(string.printable, repeat = 4)):
    h = hashlib.sha256(word).hexdigest()
    if h == HASH:
        print word
        break
```
Answer is received in a few seconds: `1haV`.
Now we can try to download the secret file:
```console
root@kali:/media/sf_CTFs/433/login# curl -v -X GET http://cyberlahavctf2019.com/secret_file --cookie "AccountType=1haV" -O
Note: Unnecessary use of -X or --request, GET is already inferred.
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:--  0:00:04 --:--:--     0*   Trying 207.154.239.211...
* TCP_NODELAY set
* Connected to cyberlahavctf2019.com (207.154.239.211) port 80 (#0)
> GET /secret_file HTTP/1.1
> Host: cyberlahavctf2019.com
> User-Agent: curl/7.61.0
> Accept: */*
> Cookie: AccountType=1haV
>
 Plot Spectrum".
For example, this is the Frequency for 0.0-1.0, after the sample rate to 32768 (the maximum for a 1 second range) and the function to **Gaussian(a=3.5)** (like the hint):
![](images/plot0.png)
We can see in the "Peak" field the value of "111 Hz".
If we repeat this for every 1 second range in the file, we get:
```
111, 111, 111, 103, 103, 89, 85, 108, 105, 57, 56, 48, 47
```
Notice how all the values are in the ASCII printable range, which is usually a good sign. Translated to ASCII, we get:
```
o, o, o, g, g, Y, U, l, i, 9, 8, 0, /
```
We even got a slash, which is great since it can be used to represent a URI path.
However, this is where I got stuck, I wasn't able to turn this into anything meaningful. Consulted a friend which has worked with me on some CTFs in the past (Yaakov Cohen), but we were both stumped until we got the following two hints:
1. The sample rate needs to be 1024 and not 32768 (not cool!)
2. The output needs to be used to build a Huffman tree in order to decode the bit stream above (we considered that already and overruled it since there are many ways to build a Huffman tree when several characters have the same frequency - so also not cool!)
The first hint brought us to the following frequency peaks:
```
111, 111, 111, 103, 103, 89, 85, 108, 105, 57, 56, 47, 46
o,   o,   o,   g,   g,   Y,  U,  l,   i,   9,  8,  /,  .
```
We kept our "/", and also gained a ".". Yaakov immediately saw that this looks like the Google URL Shortener `goo.gl/`. Formally, the Huffman tree can be built using the following script:
```python
import heapq
from collections import namedtuple, Counter
text = "oooggYUli98/."
msg = list("000101101000111110111000111010011100011101")
QueueEntry = namedtuple('QueueEntry', 'node insertion_order')
class Node(object):
    def __init__(self, data, freq, small, big):
        self.data = data
        self.freq = freq
        self.left = small
        self.right = big
    def __eq__(self, other):
        return other.freq == self.freq
    def __lt__(self, other):
         return self.freq  1):
    small = heapq.heappop(queue).node
    big = heapq.heappop(queue).node
    new = Node(data = None, freq = small.freq + big.freq, small=small, big=big)
    heapq.heappush(queue, QueueEntry(new, -1 * counter))
    counter += 1
root = heapq.heappop(queue).node
tree = {}
def build_tree(node, s):
    if node.data != None:
        tree[s] = node.data
        return