a JavaScript function that searches for the cookie value in the cookie string.
## Change a Cookie with JavaScript
With JavaScript, you can change a cookie the same way as you create it:
```javascript
document.cookie = "username=John Smith; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/";
```
The old cookie is overwritten.
## Delete a Cookie with JavaScript
Just set the expires parameter to a past date:
```javascript
document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
```
## Javascript cookie example
In the example to follow, we will create a cookie that stores the name of
a visitor.
The first time a visitor arrives to the web page, he/she will be asked to fill
in his/her name. The name is then stored in a cookie.
The next time the visitor arrives at the same page, he/she will get a welcome
message.
### Function to set a cookie value
```javascript
function setCookie(cname, cvalue, exdays) {
  const d = new Date();
  d.setTime(d.getTime() + (exdays*24*60*60*1000));
  let expires = "expires="+ d.toUTCString();
  document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
}
```
## Function to get a cookie value
```javascript
function getCookie(cname) {
  let name = cname + "=";
  let decodedCookie = decodeURIComponent(document.cookie);
  let ca = decodedCookie.split(';');
  for(let i = 0; i 
```
# [Web Storage](https://www.w3schools.com/js/js_api_web_storage.asp)
The Web Storage API is a simple syntax for storing and retrieving data in the
browser. There are two storage objects `localStorage` and `sessionStorage`.
```javascript
localStorage.setItem("name", "John Doe");
localStorage.getItem("name");
```
The storage object properties and methods are:
| Property/Method           | Description                                                   |
| ---                       | ---                                                           |
| `key(n)`                  | Returns the name of the nth key in the storage                |
| `length`                  | Returns the number of data items stored in the Storage object |
| `getItem(keyname)`        | Returns the value of the specified key name                   |
| `setItem(keyname, value)` | Adds or updates the key to the storage                        |
| `removeItem(keyname)`     | Removes that key from the storage                             |
| `clear()`                 | Empty all key out of the storage                              |
`sessionStorage` is identical to the `localStorage` but it only stores the data
for one session, so the data will be deleted when the browser is closed.
Introduced by HTML5, it has replaced many of the [cookies](#cookies)
uses. This is because `LocalStorage` has a lot of advantages over cookies. One of
the most important differences is that unlike with cookies, data does not have
to be sent back and forth with every HTTP request. This reduces the overall
traffic between the client and the server and the amount of wasted bandwidth.
This is because data is stored on the userâ€™s local disk and is not destroyed or
cleared by the loss of an internet connection. Also, `LocalStorage` can hold up
to 5MB of information which is a whole lot more than the 4KB that cookies hold.
`LocalStorage` behaves more like persistent cookies in terms of expiration. Data
is not automatically destroyed unless it is cleared through Javascript code.
This can be good for larger bits of data that need to be stored for longer
periods of time. Also, with `LocalStorage` you can not only store strings but also
Javascript primitives and objects.
An example of a good use of `LocalStorage` might be in an application used in
regions without a persistent internet connection. In order for this to be a good
use of `LocalStorage`, the threat level of the data stored in this situation would
have to be very low. To protect client privacy, it would be good to upload the
data when connection is re-established and then delete the locally stored
version.
In conclusion, *Cookies are smaller and send server information back with every
HTTP request, while `LocalStorage` is larger and can hold information on the
client side.*
# [Web workers](https://www.w3schools.com/js/js_api_web_workers.asp)
When executing scripts in an HTML page, the page becomes unresponsive until the
script is finished.
A web worker is a JavaScript that runs in the background, independently of other
scripts, without affecting the performance of the page. You can continue to do
whatever you want: clicking, selecting things, etc., while the web worker runs
in the background.
Since web workers are in external files, they do not have access to the
following JavaScript objects:
* The window object
* The document object
* The parent object
Before creating a web worker check whether the user's browser supports it:
```javascript
if (typeof(Worker) !== "undefined") {
  // Yes! Web worker support!
  // Some code.....
} else {
  // Sorry! No Web Worker support..
}
```
Now, let's create our web worker in an external JavaScript.
Here, we create a script that counts. The script is stored in the `demo_workers.js` file:
```javascript
let i = 0;
function timedCount() {
  i ++;
  postMessage(i);
  setTimeout("timedCount()",500);
}
timedCount();
```
The important part of the code above is the `postMessage()` method, which is
used to post a message back to the HTML page.
## Create a Web Worker object
Now that we have the web worker file, we need to call it from an HTML page.
The following lines checks if the worker already exists, if not it creates a new web worker object and runs the code in `demo_workers.js`:
```javascript
if (typeof(w) == "undefined") {
  w = new Worker("demo_workers.js");
}
```
Then we can send and receive messages from the web worker.
Add an `onmessage` event listener to the web worker.
```javascript
w.onmessage = function(event){
  document.getElementById("result").innerHTML = event.data;
};
```
When the web worker posts a message, the code within the event listener is
executed. The data from the web worker is stored in `event.data`.
## Terminate a Web Worker
When a web worker object is created, it will continue to listen for messages
(even after the external script is finished) until it is terminated.
To terminate a web worker, and free browser/computer resources, use the
`terminate()` method:
```javascript
w.terminate();
```
## Reuse the Web Worker
If you set the worker variable to `undefined`, after it has been terminated, you can reuse the code:
```javascript
w = undefined;
```
## Full web worker example code
```html
Count numbers: 
Start Worker
Stop Worker
```
# [Interacting with external APIs](https://www.w3schools.com/js/js_api_fetch.asp)
The Fetch API interface allows web browser to make HTTP requests to web servers.
The example below fetches a file and displays the content:
```html
Fetch a file to change this text.
```
Where the content of `fetch_info.txt` is:
```html
Fetch API
The Fetch API interface allows web browser to make HTTP requests to web servers.
```
Since `Fetch` is based on `async` and `await`, the example above might be easier
to understand like this:
```javascript
async function getText(file) {
  let x = await fetch(file);
  let y = await x.text();
  myDisplay(y);
}
```
Or even better: Use understandable names instead of `x` and `y`:
```javascript
async function getText(file) {
  let myObject = await fetch(file);
  let myText = await myObject.text();
  myDisplay(myText);
}
```
The first `.then()` resolves the promise into a response object. To be able to
view the content of this object the response is then converted using a `.json()`
method. This `json()` also returns a promise so another `.then()` is necessary.
## Doing a POST
We can first include the settings such as header and request method in a object.
```javascript
var jsonObj = {};
jsonObj.firstParam = "first";
jsonObj.secondParam = 2;
jsonObj.thirdParam = true;
var options = {
    method: 'POST',
    header: new Headers({
        "Content-Type": "application/json",
    }),
    body: JSON.stringify(jsonObj)
}
var url = http://localhost:8080/postRequest;
fetch(url, options)
.then((response) => {
    console.log("Status Code",response.status);
    //return response type such as json, blob, text, formData and arrayBuffer
    return response.json()
})
.then((result) => {
    //here will return whatever information from the response.
    console.log("response message from backend", result);
})
.catch((error) => {
    console.log(error);
});
```
# [Error handling](https://www.w3schools.com/js/js_errors.asp)
* The `try` statement defines a code block to run (to try).
* The `catch` statement defines a code block to handle any error.
* The `finally` statement defines a code block to run regardless of the result.
* The `throw` statement defines a custom error.
    ```html
    throw "Too big";    // throw a text
    throw 500;          // throw a number
    ```
In this example we misspelled `alert` as `adddlert` to deliberately produce an error:
```html
```
When an error occurs, JavaScript will normally stop and generate an error message.
JavaScript will create an `Error` object with two properties: `name` and
`message`.
Six different values can be returned by the error `name` property:
| Error Name     | Description                                    |
| ---            | ---                                            |
| EvalError      | An error has occurred in the `eval()` function |
| RangeError     | A number "out of range" has occurred           |
| ReferenceError | An illegal reference has occurred              |
| SyntaxError    | A syntax error has occurred                    |
| TypeError      | A type error has occurred                      |
| URIError       | An error in `encodeURI()` has occurred         |
|
## Input validation example
This example examines input. If the value is wrong, an exception (`err`) is thrown.
The exception is caught by the `catch` statement and a custom error message is displayed:
```html
Please input a number between 5 and 10:
Test Input
function myFunction() {
  const message = document.getElementById("p01");
  message.innerHTML = "";
  let x = document.getElementById("demo").value;
  try {
    if(x == "") throw "empty";
    if(isNaN(x)) throw "not a number";
    x = Number(x);
    if(x  10) throw "too high";
  }
  catch(err) {
    message.innerHTML = "Input is " + err;
  }
}
```
# [Debugging](https://www.w3schools.com/js/js_debugging.asp)
You can use the `console.log` to display JavaScript values in the debugger window:
```javascript
a = 5;
b = 6;
c = a + b;
console.log(c);
```
Or you can use breakpoints
```javascript
let x = 15 * 5;
debugger;
document.getElementById("demo").innerHTML = x;
```
# [Style guide](https://www.w3schools.com/js/js_conventions.asp)
* Always put spaces around operators ( = + - * / ), and after commas.
* Always use 2 spaces for indentation of code blocks.
* Avoid lines longer than 80 characters.
* Always end a simple statement with a semicolon.
    ```javascript
    const cars = ["Volvo", "Saab", "Fiat"];
    const person = {
      firstName: "John",
      lastName: "Doe",
      age: 50,
      eyeColor: "blue"
    };
    ```
* General rules for complex (compound) statements:
    * Put the opening bracket at the end of the first line.
    * Use one space before the opening bracket.
    * Put the closing bracket on a new line, without leading spaces.
    * Do not end a complex statement with a semicolon.
    ```javascript
    function toCelsius(fahrenheit) {
      return (5 / 9) * (fahrenheit - 32);
    }
    for (let i = 0; i < 5; i++) {
      x += i;
    }
    if (time < 20) {
      greeting = "Good day";
    } else {
      greeting = "Good evening";
    }
    ```
* General rules for object definitions:
    * Place the opening bracket on the same line as the object name.
    * Use colon plus one space between each property and its value.
    * Use quotes around string values, not around numeric values.
    * Do not add a comma after the last property-value pair.
    * Place the closing bracket on a new line, without leading spaces.
    * Always end an object definition with a semicolon.
    ```javascript
    const person = {
      firstName: "John",
      lastName: "Doe",
      age: 50,
      eyeColor: "blue"
    };
    ```
# [Best practices](https://www.w3schools.com/js/js_best_practices.asp)
* Minimize the use of global variables.
* All variables used in a function should be declared as local variables.
* It is a good coding practice to put all declarations at the top of each script
    or function.
    This will:
    * Give cleaner code
    * Provide a single place to look for local variables
    * Make it easier to avoid unwanted (implied) global variables
    * Reduce the possibility of unwanted re-declarations
* Initialize variables when you declare them.
    This will:
    * Give cleaner code
    * Provide a single place to initialize variables
    * Avoid undefined values
* Declaring objects and arrays with `const` will prevent any accidental change of type.
* Don't use the `new Object()`
    * Use `""` instead of new `String()`.
    * Use `0` instead of new `Number()`.
    * Use `false` instead of new `Boolean()`.
    * Use `{}` instead of new `Object()`.
    * Use `[]` instead of new `Array()`.
    * Use `/()/` instead of new `RegExp()`.
    * Use `function (){}` instead of `new Function()`.
* Use `===` for comparison. The `==` comparison operator always converts (to
    matching types) before comparison.
* Use parameter defaults. If a function is called with a missing argument, the
    value of the missing argument is set to `undefined`.
    Undefined values can break your code. It is a good habit to assign default
    values to arguments.
    ```javascript
    function myFunction(x, y) {
      if (y === undefined) {
        y = 0;
      }
    }
    ```
* Avoid using `eval()`. It's used to run text as code which represents
    a security problem.
* Reduce DOM access. Accessing the HTML DOM is very slow, compared to other
    JavaScript statements.
    If you expect to access a DOM element several times, access it once, and use
    it as a local variable:
    ```javascript
    const obj = document.getElementById("demo");
    obj.innerHTML = "Hello";
    ```
* Keep the number of elements in the HTML DOM small. This will always improve
    page loading, and speed up rendering (page display), especially on smaller
    devices.
    Every attempt to search the DOM (like `getElementsByTagName`) will benefit
    from a smaller DOM.
* Delay JavaScript loading. Putting your scripts at the bottom of the page body
    lets the browser load the page first.
    While a script is downloading, the browser will not start any other
    downloads. In addition all parsing and rendering activity might be blocked.
* Avoid using the `with` keyword. It has a negative effect on speed. It also
    clutters up JavaScript scopes.
# References
* [W3 JavaScript tutorial](https://www.w3schools.com/js/default.asp)
* [John Comeau operator explainer](https://www.joshwcomeau.com/operator-lookup)
* [Re-introduction to JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript)
* [Chikwekwe's articles on cookies vs LocalStorage](https://medium.com/swlh/cookies-vs-localstorage-whats-the-difference-d99f0eb09b44)
* [Jeff's post on xmlhttprequest vs Fetch API](https://jeffdevslife.com/p/xmlhttprequest-vs-fetch-api/)