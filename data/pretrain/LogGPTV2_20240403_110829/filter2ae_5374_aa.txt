### 一、前言
时隔这么多天终于有时间把当时数字经济第二道区块链题目拿来复现。感觉第二题更偏向逻辑方面的漏洞，说白了就是来考察做题人对合约的逆向能力。总结来说，以太坊的漏洞相对于其他类型问题来说还算是非常少的，所以逆合约是一个非常重要的手段，只要能完美的逆出来合约，剩下的就相对容易许多。
比赛包括两道题目，这里我们分析一下第二道题目，第一题我们见。
### 二、题目描述
如上图所述，拿到题目我们只能看到常规操作，即给了合约地址与发送flag的函数。为了加大难度，作者并没有给合约的源码信息，所以我们只能用最笨但是最有效的方法去逆合约。
读者可以访问这个网站来查询逆向合约信息：
我们这里拿到了合约的函数信息，现在我们查看具体的函数代码，并尝试逆出来合约函数的具体含义。
这里我们放出关键代码：
    function func_0293(var arg0) {
            var var0 = 0x00;
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x03;
            if (storage[keccak256(memory[0x00:0x40])] = var7) {
                label_0823:
                    var temp6 = var6;
                    var4 = temp6 + var4;
                    var5 = temp6 & 0x1f;
                    if (!var5) {
                        var temp7 = memory[0x40:0x60];
                        log(memory[temp7:temp7 + var4 - temp7], [stack[-6]]);
                        return;
                    } else {
                        var temp8 = var5;
                        var temp9 = var4 - temp8;
                        memory[temp9:temp9 + 0x20] = ~(0x0100 ** (0x20 - temp8) - 0x01) & memory[temp9:temp9 + 0x20];
                        var temp10 = memory[0x40:0x60];
                        log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [stack[-6]]);
                        return;
                    }
                } else {
                label_0811:
                    var temp11 = var10;
                    memory[var8 + temp11:var8 + temp11 + 0x20] = memory[var9 + temp11:var9 + temp11 + 0x20];
                    var10 = temp11 + 0x20;
                    if (var10 >= var7) { goto label_0823; }
                    else { goto label_0811; }
                }
            } else {
                var temp12 = returndata.length;
                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];
                revert(memory[0x00:0x00 + returndata.length]);
            }
        }
        function func_0860(var arg0) {
            if (msg.sender != storage[0x05] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }
            storage[0x01] = arg0;
        }
        function func_08C6(var arg0) {
            if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }
            storage[0x02] = arg0;
        }
        function gift(var arg0) returns (var arg0) {
            memory[0x20:0x40] = 0x04;
            memory[0x00:0x20] = arg0;
            return storage[keccak256(memory[0x00:0x40])];
        }
        function deposit() {
            var var0 = 0x00;
            var var1 = 0x0de0b6b3a7640000;
            var var2 = msg.value;
            if (!var1) { assert(); }
            memory[0x00:0x20] = msg.sender;
            memory[0x20:0x40] = 0x03;
            var temp0 = keccak256(memory[0x00:0x40]);
            storage[temp0] = storage[temp0] + var2 / var1;
        }