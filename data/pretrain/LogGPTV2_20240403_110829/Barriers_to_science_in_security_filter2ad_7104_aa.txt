title:Barriers to science in security
author:Tom Longstaff and
David M. Balenson and
Mark Matties
Barriers to Science in Security 
Tom Longstaff 
The Johns Hopkins University 
Applied Physics Laboratory 11100 
Johns Hopkins Rd., Laurel, MD 
20723 
David Balenson 
The Johns Hopkins University 
Applied Physics Laboratory 11100 
Johns Hopkins Rd., Laurel, MD 
Mark Matties 
The Johns Hopkins University 
Applied Physics Laboratory 11100 
Johns Hopkins Rd., Laurel, MD 
20723 
20723 
PI:EMAIL 
PI:EMAIL 
PI:EMAIL
Overview 
In the past year, there has been significant interest in promoting 
the idea of applying scientific principles to information security. 
The  main  point  made  by  information  security  professionals  who 
brief  at  conferences  seems  to  be  that  our  field  of  information 
security  is  finally  mature  enough  to  begin  making  significant 
strides  towards  applying  the  scientific  approach.  Audiences 
everywhere  enthusiastically  agree  and  thrash  themselves  for 
bypassing science all along, bemoaning the fact that we could be 
“so much further along” if we only did science. Of course, after 
the presentation is over, everyone goes back to the methods that 
have been used throughout our generation to generate prototypes 
and tools with no regard for the scientific principles involved.  
The type of information security1 projects in scope for this essay 
are  experimental  projects  that  produce  a  new  approach  or 
support/refute  a  theoretical  result.    The  use  of  the  scientific 
method  in  theoretical  information  security  and  in  computer 
science  more  generally  is  well  documented  and  mature  (even  if 
not  universally  applied).  The  focus  of  the  “science  of  security” 
publications  in  FY09-10  is  in  the  area  of  experimentation  and 
applied information security research. Thus our focus here is also 
in  the  comparison  of  experimental  information  security  research 
that  does  or  does  not  use  a  traditional  scientific  method  in  the 
execution of the project and in the publication of the results. The 
definition  of  the  scientific  method  we  use  in  this  essay  is  well 
documented and not further described here. 
Finding  agreement  in  the  use  of  the  scientific  method  is 
practically universal, finding participation in the scientific method 
in  scope  address 
the  confidentiality, 
1 We use the term information security to clarify that the types of 
projects 
integrity,  or 
availability of information assets. While it is common to use the 
term cyber security to address perhaps a wider set of topics, the 
definition of cyber security is not as well defined or accepted, and 
thus is more likely to cause confusion over the types of projects 
included herein.  
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not made or distributed for profit or commercial advantage and that copies 
bear this notice and the full citation on the first page. To copy otherwise, 
to  republish,  to  post  on  servers  or  to  redistribute  to  lists,  requires  prior 
specific permission and/or a fee. 
ACSAC ¹10 Dec. 6-10, 2010, Austin, Texas USA 
Copyright 2010 ACM 978-1-4503-0133-6/10/12 ...$10.00. 
is  rare.  Why?  What  are  the  primary  barriers  to  applying  the 
scientific  method  to  information  security  projects?  What  are  the 
main  differences  between  the  projects  that  apply  the  scientific 
method  to  experimental  information  security  projects  and  those 
that  promote  software/tool  development  without  applying  a 
traditional scientific approach?  In this essay, I explore three main 
barriers to achieving a more universal application of the scientific 
method to experimental information security projects. These are: 
• 
• 
• 
Time to publish as a primary driver 
Standard of peer reviews in conferences and journals 
Expectation of a breakthrough in every publication 
these  drivers  are  evident 
Although 
in  many  academic 
publications, it must be noted that much of the work in computer 
science,  and  more  importantly,  information  security  does  not 
concern the development of the body of scientific knowledge, but 
in  getting  a  job  done.  This  is  closely  aligned  to  computer 
engineering  or  software  engineering,  both  of  which  are  often 
associated  with  computer  science  departments.  Many  practicing 
computer  scientists  work  in  the  area  of  information  security  by 
producing  innovative  tools  and  techniques  to  solve  specific 
technical  problems  in  information  security.  Many  of  these 
practitioners have a computer science degree, but have never been 
formally  trained  in  the  application  of  scientific  method,  nor  do 
they need to be to have successful careers in information security. 
The overarching goal in this area of information security is to get 
the job done in terms of writing a program to accomplish a task, 
rather than on exploring the and testing the range of possibilities 
(experimenting)  and  implementing  a  better  solution.  Practical, 
working systems that can be quickly implemented tend to prevail. 
This  follows  the  old  IETF  mantra  of  “rough  consensus  and 
running 
(see 
http://en.wikipedia.org/wiki/Rough_consensus). 
In this sense, the Science in “Computer Science” is a misnomer – 
many  CS  graduates  are  never  formally  trained  in  the  scientific 
method and its use in experimental information security. Some CS 
curricula 
logic, 
programming 
languages,  data  structures,  database,  artificial 
intelligence,  etc.,  but  do  not  teach  scientific  experimentation. 
Many  other  academic  curricula,  like  Math,  and  even  English, 
often  develop  students  who  ultimately  work  as  programmers, 
developers, or researchers, but they also lack formal education in 
scientific method. The curricula that do teach scientific methods, 
such as Psychology, Biology, Physics, etc. lead to few people who 
work  on  information  security.  However,  as  more  of  these 
professionals  enter  the  field,  the  call  for  a  scientific  approach 
becomes increasingly urgent.  
terms  of  computational 
teach  basics 
code.” 
in 
127the  scientific  method 
the  hypothesis,  but  only  for  a 
Time to Publish as a Primary Driver 
The  application  of 
to  experimental 
information security projects usually takes significantly more time 
than is available for the development of a demonstration/prototype 
tool. A carefully conceived experiment requires planning around a 
well-formed  hypothesis,  assuring  that  the  tests  against  the 
hypothesis  are  sufficient  to  potentially  refute  the  hypothesis.  In 
the  likely  event  that  the  experiment  will  support  the  hypothesis, 
the domain of the test environment must be sufficient to build an 
argument  that  the  hypothesis  holds  in  a  significantly  extensive 
context. This frequently means many runs of the experiment over 
a  wide  variety  of  input  variations  to  assure  the  relationship 
between the domain and range of the system under test (SUT) is 
as predicted by the hypothesis. 
In contrast, many experimental tests take a developed prototype or 
demonstration  system  and  provides  a  narrow  set  of  performance 
characteristics.  Since  there  is  no  hypothesis  to  test,  there  is  no 
possibility of refuting a hypothesis. All that is generated is a series 
of  observations  of  the  SUT.  The  tests  can  be  performed  in  a 
narrow set of domain variables since the test is designed to show 
performance in the environment for which the SUT was designed. 
Since no failure is possible in this situation, the tests need not be 
extensive to lead to results that may be published. 
Even  when  a  rigorous  scientific  test  is  designed,  the  pressure  to 
publish  quickly  may  lead  to  an  inadequate  exploration  through 
extensive  and  multiple  trials.  There  is  a  tendency  to  test  a  very 
limited set of functionality or a small number of parameters. This 
approach  supports 
limited 
environment. These tests answer specific questions such as testing 
an implementation X in environment Y and it’s ability to detect Z. 