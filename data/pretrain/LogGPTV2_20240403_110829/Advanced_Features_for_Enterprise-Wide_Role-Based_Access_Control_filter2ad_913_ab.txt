ments by people who know which job function a user
performs, but do not have system know-how.
‚Ä¢ The number of administration tasks can be reduced,
as the number of roles is normally considerably lower
than the number of users and permissions. (Example:
A large German bank has deÔ¨Åned 400 roles for 40,000
users.) This reduces the administration costs signiÔ¨Å-
cantly.
‚Ä¢ RBAC allows a better overview of the permissions
granted to a user. On one hand, auditors can more
easily see what access rights users have and check
whether they are supposed to have them. On the other
hand, administrators can authorise users in a more con-
trolled way.
In companies working with individual
permission assignments, users often accumulate access
rights when changing positions within the company.
Nobody really knows anymore which of these rights
belong to older job functions and which of them the
employee really needs. The usage of roles connected
to such functions thus increases security.
‚Ä¢ Last but not least, roles are an important prerequisite
for automating security administration.
In recent years, roles have been implemented in many
commercial systems. However, there is no widely accepted
RBAC model, meaning that implementations differ consid-
erably.
In 2001, an RBAC standard was proposed which
deÔ¨Ånes the core and extended capabilities of roles [5].
Core RBAC deÔ¨Ånes the basic functionality of roles. It
includes sets of Ô¨Å ve basic data elements: users, roles, ses-
sions, objects and operations (see Ô¨Ågure 3). Roles collect
permissions for objects (permission assignment). Users can
be assigned to roles (user assignment). Both types of as-
signments are many-to-many relations. During a session, a
user can activate one or more of the assigned roles. Each
session is associated with one user, whereas a user can have
several sessions at the same time.
Hierarchical RBAC extends core RBAC with role hierar-
chies that allow the structuring of roles to correspond with
functional or organisational hierarchies. Child roles inherit
all permissions of their parent roles. The standard differen-
tiates between general and limited role hierarchies. General
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:54:27 UTC from IEEE Xplore.  Restrictions apply. 
User
 User
-
Assignment
Enterprise
Role
3












+
Permission


Q
QQk
Assignment
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
QQsQ
-
Group
(RACF)
Role
(Oracle)
Group
(UNIX)
 Update
@
@I
-
DB2 Table
(RACF)
@
@
Read
@
@
@
@
@
@
@R@
Dataset
(RACF)
Figure 4. Enterprise Role Example
role hierarchies allow roles to be connected in an arbitrary
partial order, whereas limited role hierarchies are restricted
to tree structures.
Constrained RBAC adds Separation of Duty (SoD) re-
lations to core RBAC. The standard allows for both static
and dynamic SoD. Static Separation of Duty enforces con-
straints on assignments of users to roles. For example, two
roles can be deÔ¨Åned as mutually exclusive. In contrast,Dy-
namic Separation of Duty limits the activation of roles for a
user‚Äôs session.
In addition, the standard contains requirement speciÔ¨Åca-
tions for administrative functions, supporting system func-
tions and review functions. Administrative functions en-
able administrators to create and delete the RBAC options
and their relations. Supporting system functions are used to
maintain sessions. Review functions provide reports such as
‚ÄúAll permissions of a user‚Äù.
3.2 Enterprise Role-Based Access Control (ER-
BAC)
As already mentioned, the IT environments of large en-
terprises consist of a variety of platforms and applications.
These include a number of operating systems (e.g. OS/390,
Windows NT/2000 and UNIX), databases (e.g. Oracle and
DB2), standard applications, such as SAP‚Äôs R/3, and a large
number of business applications. Most of them have built-
in security components (as in the case of Windows NT or
Oracle) or are secured by a separate security product (such
as RACF, ACF2 or Top Secret for OS/390). The mech-
anisms used by these security components differ signiÔ¨Å-
cantly. Some of them already work with roles.
A typical enterprise user must have access to a variety
of systems and applications on different platforms. How-
ever, existing role concepts are mainly speciÔ¨Åc to particular
applications and operating systems, causing administrative
overhead. For example, to access an application, a user may
need parallel sessions at different layers, such as Windows
NT, OS/390 and a database, requiring access rights for all
of them. These rights must be administered separately in
the participating systems as no common RBAC support is
currently provided. There are some developments towards
broadening the scope of operating system security. Operat-
ing systems such as Netware and Windows 2000 allow ad-
ministration components of other systems and applications
to use their directories. However, these approaches are re-
stricted to only a subset of the systems operated by a typ-
ical enterprise; in particular, the support of mainframe and
midrange systems is very restricted.
Because of the variety of different systems in the mar-
ket and their dynamic behaviour, modern enterprises require
a more comprehensive RBAC solution. Such a solution is
provided by introducing Enterprise Roles, as implemented
in SAM Jupiter. Enterprise Roles span over more than one
target system and consist of permissions in multiple sys-
tems. These permissions are speciÔ¨Åc to the target system
and can be of various natures. The example in Ô¨Ågure 4
shows a role containing a group in UNIX, a role in Ora-
cle and a group in RACF with authorisations for updating a
dataset and reading a database table.
Figure 5 shows the resulting model, which we call the
Enterprise RBAC model (ERBAC). It is based on RBAC96
[12] and the NIST role standard draft [5] (see Ô¨Ågure 3). The
basic ERBAC model is analogous to core RBAC. Enterprise
Roles collect all permissions needed to perform a speciÔ¨Åc
role. Users are then assigned to these roles. The main dif-
ference between ERBAC and the RBAC96 model lies in
the notion of sessions. In an enterprise-wide administration
concept, all systems in the enterprise are administered, but
without control of the actual user sessions. Therefore, ses-
sions cannot be part of ERBAC. Instead, the permissions
a user receives through the assignment of a role are prop-
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:54:27 UTC from IEEE Xplore.  Restrictions apply. 
Static Separation of Duty
Role Hierarchy
@
XXXXXXXz
@@R
User
-

Assignment
User
?
Account
in TS

?
? ?
Role
Permission
-

Assignment
Permission
Enterprise Level
?
Propagation
?
-
Permission
in TS
Target Systems
Figure 5. Enterprise RBAC Model (ERBAC)
agated to the administered target systems (TS). The Enter-
prise User deÔ¨Ånition leads to the creation of user accounts
(user IDs) in the target system. A permission can be any au-
thorisation (called an operation in core RBAC) to a resource
in one of the underlying target systems. The assignment of
a permission to an Enterprise Role does not necessarily lead
to any update in the target system. The permissions of the
role are propagated and the user‚Äôs accounts receive the as-
sociated permissions in the respective TS only when a role
is assigned to the user. The same happens, of course, when
permissions are added to or removed from roles.
As already mentioned, a permission can be any entity in
the target system, such as a group, a role or an authorisation.
Let us take a deeper look at the concept of groups: There
has been some discussion about the differences between the
notion of roles and groups (e.g. in [11]). Groups can be seen
more as grouping mechanisms for users (see e.g. [8]) or as
groups of permissions. In our context, a group is simply a
target system entity which bundles permissions in the target
system. From the ERBAC viewpoint, a group is therefore a
type of permission that can be assigned to Enterprise Roles.
In addition to the core RBAC features, a general role
hierarchy is supported. Enterprise Roles can be assigned
to other roles in a directed acyclic graph. Child roles in-
herit all permissions from their parent roles (including all
permissions that these roles inherit). A user assigned to a
child role thus receives all permissions assigned to this role,
plus all permissions which the role inherits from its ances-
tors. Role hierarchies allow easy structuring of roles and
reduce redundancy. This leads to a smaller number of roles
to be deÔ¨Åned in an enterprise and less administrative effort.
However, experience has shown that the role tree should
not be too deep, as it can otherwise become very difÔ¨Åcult to
maintain. A role hierarchy with a maximum of three to four
levels is recommended.
The RBAC standard draft also deÔ¨Ånes constraints.Static
Separation of Duty is implemented in ERBAC by rules
deÔ¨Åning constraints between roles. These rules are evalu-
ated when assigning users to roles and roles to roles, thus
preventing a user from receiving illegal combinations of
roles, even in the presence of a role hierarchy.
As an ERBAC system does not control the actual ses-
sions of a user, it cannot directly enforce Dynamic Separa-
tion of Duty. Instead, it must rely on such mechanisms in
the target systems. A common way to enforce dynamic SoD
is to use different accounts for different tasks. In ERBAC,
we can simply deÔ¨Åne different users for these tasks. Thus,
by deÔ¨Åning static Separation of Duty constraints in ERBAC,
dynamic Separation of Duty can be enforced in the under-
lying systems. If the target system itself supports dynamic
SoD, this feature can be controlled directly by ERBAC.
In addition to the role model, the RBAC standard also
deÔ¨Ånes administrative and review functions. Our imple-
mentation of ERBAC in SAM Jupiter also offers a complete
set of administrative commands for all supported functions.
A complete list of all supported commands, however, goes
beyond the scope of this paper. The review functions are
based on the ERBAC repository and are realised using a
Web-based reporting engine. The symmetric nature of the
repository allows for a comprehensive set of lists including
basic and advanced lists for all ERBAC levels. Some exam-
ples for advanced reports are:
‚Ä¢ List all permissions of a user (including those inherited
from all directly or indirectly connected roles).
‚Ä¢ List all users to which a role is connected directly or
indirectly via the role hierarchy.
‚Ä¢ List all users with a speciÔ¨Åc permission.
4 Enhanced ERBAC
ERBAC as deÔ¨Åned in the previous section provides a
good basis for user and security administration. However,
our experience during deployment of roles with SAM at
several customer sites showed that the sole usage of this
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:54:27 UTC from IEEE Xplore.  Restrictions apply. 
User
?
Account
in TS1

?
T
S
1
?
T
S
2
Account
in TS2

?
User
-

Assignment
Role
Permission
-
Assignment
Generic
Permission
(SET1)
Enterprise Level
Propagation
Target System 1
Target System 2
?
-
Permission
in TS1
?
-
Permission
in TS2
Figure 6. ERBAC with Generic Roles
model would have led to a large number of roles and thus