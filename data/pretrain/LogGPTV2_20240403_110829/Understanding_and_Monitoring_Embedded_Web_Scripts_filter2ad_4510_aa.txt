title:Understanding and Monitoring Embedded Web Scripts
author:Yuchen Zhou and
David Evans
2015 IEEE Symposium on Security and Privacy
2015 IEEE Symposium on Security and Privacy
Understanding and Monitoring Embedded Web Scripts
Yuchen Zhou
David Evans
University of Virginia
ScriptInspector.org
Abstract—Modern web applications make frequent use of
third-party scripts, often in ways that allow scripts loaded
from external servers to make unrestricted changes to the
embedding page and access critical resources including private
user information. This paper introduces tools to assist site
administrators in understanding, monitoring, and restricting
the behavior of third-party scripts embedded in their site. We
developed ScriptInspector, a modiﬁed browser that can inter-
cept, record, and check third-party script accesses to critical
resources against security policies, along with a Visualizer tool
that allows users to conveniently view recorded script behaviors
and candidate policies and a PolicyGenerator tool that aids
script providers and site administrators in writing policies. Site
administrators can manually reﬁne these policies with minimal
effort to produce policies that effectively and robustly limit
the behavior of embedded scripts. PolicyGenerator is able to
generate effective policies for all scripts embedded on 72 out of
the 100 test sites with minor human assistance. In this paper, we
present the designs of our tools, report on what we’ve learned
about script behaviors using them, evaluate the value of our
approach for website administrator.
1 INTRODUCTION
Modern web applications combine code from multiple
sources in ways that pose important security and privacy
challenges. Running as the same principal as the host, third-
party scripts enjoy full access to host resources including
sensitive user information and can make arbitrary modiﬁca-
tions to the page. Some amount of access is necessary to
provide the desired functionality — advertising scripts need
to insert ads into the page, and analytics scripts need to read
cookies and track user’s behavior on the page. However,
opening up access to all resources to allow such limited
behavior is potentially dangerous. For example, an attacker
who compromises hosts serving the Google Analytics script
would be able to completely control more than 50% of the
top websites [23, 30].
Several prior works have demonstrated the threat ma-
licious embedded scripts pose to user security and pri-
vacy [6, 17]. Sites hosting scripts can be compromised,
enabling attackers to deploy malicious scripts on unsus-
pecting websites [13]; scripts from respectable advertising
networks may sub-contract space to increasingly less re-
spectable networks, eventually leading to malicious scripts
being included in prominent websites such as nytimes.com
and spotify.com [31]. Responsible site administrators need
a way to understand and limit the behavior of embedded
scripts, especially those coming from servers outside their
control. Without this, there is no way a site can stand behind
its privacy policy short of eliminating sensitive content
from pages that embed third-party scripts or disavowing
responsibility for anything those scripts do.
However, JavaScript’s dynamic nature makes it very hard
to reason about the behavior of embedded scripts. Prevalent
use of obfuscation and compression makes the code hard
to analyze statically. Further, window.eval, document.write,
and script element injections may introduce new executable
code on-the-ﬂy so that dynamic analysis techniques like
symbolic execution will not work well either, especially
when JSONP/AJAX requests are used to fetch additional
code. JavaScript symbolic analysis tools (e.g. [5, 26]) of-
ten ignore calls to eval because constraint solvers cannot
efﬁciently and soundly solve dynamically generated code
inside eval. Recent improvements in such solvers [32] still
lack soundness and completeness and are unable to handle
typical scripts.
Contributions overview. We present and evaluate the design
of a tool chain, depicted in Figure 1,
intended to help
site administrators understand and monitor the behavior of
embedded scripts. This involves capturing the behaviors
of embedded scripts precisely enough to develop effective
policies. Section 2 explains how we deﬁne policies and
Simulated Sessions 
Reverse proxy 
URL Requests 
ScriptInspector 
(Optional) 
Policy 
Instrumented DOM 
Visualizer 
Admin 
n
Policy 
Generator 
Permission 
Candidates 
Violating  
accesses 
Admin 
Script inspection and policy generation 
Script monitoring 
Figure 1: Overview
© 2015, Yuchen Zhou. Under license to IEEE.
© 2015, Yuchen Zhou. Under license to IEEE.
DOI 10.1109/SP.2015.57
DOI 10.1109/SP.2015.57
850
850
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:40 UTC from IEEE Xplore.  Restrictions apply. 
presents our supported policy permissions. A policy can be
of two types — base or site-speciﬁc. A base policy for a
script is a generic policy that should cover shared behavior
of most embedding sites, while a site-speciﬁc policy is devel-
oped by site administrators to capture customized behaviors.
The primary contributions of this paper are the design and
evaluation of three closely integrated tools (highlighted as
rounded rectangles in Figure 1). These tools are available
under open source licenses at ScriptInspector.org.
ScriptInspector. ScriptInspector (Section 3) is a modiﬁed
version of the Firefox browser that is capable of intercepting
and recording API calls from third-party scripts to critical
resources, including the DOM, local storage, and network.
Given a website URL and one or more script policies, Script-
Inspector records accesses that violate the policy. When
no policies are given, all resource accesses by scripts are
recorded in the instrumented DOM. ScriptInspector is able
to attribute accesses to responsible scripts, even when the
call stack includes more than one party and when scripts
are injected into the DOM.
Visualizer. The Visualizer (Section 4) is a Firefox extension
that uses the instrumented DOM maintained by Script-
Inspector to highlight nodes accessed by third-party scripts
and help a site administrator understand script behaviors.
When given a set of permission candidates, the Visualizer
can also be used to draw the matching nodes on the
page to help site administrators develop effective policies
(Section 7.2). Section 5 reports on our experiences using
Visualizer to understand frequently-embedded scripts, and
Section 7.2 describes our experiences using it to develop
policies for popular websites.
PolicyGenerator. Since web pages embed many scripts
with complex behaviors,
it would be tedious and error-
prone to attempt to develop access control policies for each
script manually. We developed PolicyGenerator to help site
administrators develop effective policies with limited human
intervention. PolicyGenerator uses information recorded by
ScriptInspector to infer candidate permissions. Site admin-
istrators can review the generated policies using Visualizer.
Section 6 explains how PolicyGenerator works and eval-
uates the quality of the policies it generates for scripts
embedded in popular websites. For 72 of the 100 tested
sites, PolicyGenerator ﬁnds effective, high-coverage policies
for all embedded scripts with minimal human effort. We
evaluate the robustness of developed policies in Section 8.
Threat model. The goal of our work is to provide site
administrators with a way to ensure the integrity of their site
and protect the privacy of their users from embedded scripts.
We are concerned with both malicious scripts provided
by deceptive script providers and corrupted scripts result-
ing from compromises of external sites hosting embedded
scripts. We focus on detecting sensitive resource leaks (such
as user email addresses and shopping cart contents) and
unintended page modiﬁcations (such as injecting advertise-
ments in unintended places), but consider attacks that exploit
system vulnerabilities such as drive-by-downloads and heap
sprays out-of-scope.
By default, we assume that scripts from different domains
are not colluding (or simultaneously compromised by the
same attacker). Access control policies for multiple domains
need to be merged and re-evaluated when a possible collu-
sion scenario is suspected.
We are concerned with large-scale compromises of web-
site users, not targeted attacks on high-value individuals. Our
focus is on a defense that is robust and capable of handling
complex scripts (so must be a dynamic analysis), and that
can be performed by a site administrator without needing
any control over clients (so assumes the site administrator
sees similar script behaviors in test browsers as clients
will locally). In particular, our techniques are not designed
to address the case where an adversary hosting a script
serves a different script to targeted users based on their IP
addresses or designs a script that only behaves maliciously
after detecting a particular browser ﬁngerprint. We discuss
the possibilities and challenges for enforcing policies at
runtime on the client-side in Section 10.
2 POLICIES
A policy is just a set of permissions that describe the
permissible behaviors for a script. Our goal is to develop
policies that are precise enough to limit the behavior of
a script to provide a desired level of privacy and security,
without needing to generate custom policies for each page
on a site. Further, as much as possible, we want to be
able to reuse a script policy across all sites embedding that
script. The challenge is the way a script behaves depends
on the containing page and how the script is embedded,
especially in the speciﬁc DOM nodes it accesses. Our solu-
tion to this aims to make the right tradeoffs between over-
generalizing policies and requiring page-speciﬁc policies,
which we believe would place an unreasonable burden on
site administrators.
Policies are described by the following grammar:
Policy
Permission
Action
::= Permission*
::= [NodeDescriptor:]Action[:Param*]
::= LocalStorage | BrowserConﬁguration |
NetworkRequest | DOMAPI
We explain different types of actions in Section 2.1 and node
descriptors in Section 2.2. Section 2.3 addresses the problem
of interference between permissions.
2.1 Resources
The main resource accessible to scripts is the web page
content, represented by the Document Object Model (DOM)
in the browser. DOM access includes all reads and modiﬁca-
tions to the DOM tree, including node insertion and removal,
851851
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:40 UTC from IEEE Xplore.  Restrictions apply. 
reading its innerHTML, and setting or getting attributes.
For DOM permissions, the Action is the DOM API itself
(e.g., appendChild) and the NodeDescriptor (see Section 2.2)
speciﬁes the set of nodes on which the action is allowed.
The NodeDescriptor can be omitted to allow an API to
be called on any DOM node. The argument restriction is
also optional as some APIs may be called without any
argument. Arguments are represented as regular expressions
that match strings or nodes. A node used in an argument
is matched by its outerHTML. In certain scenarios, the site
owner may need to make sure the node in the argument
is a node that was created by a third-party script (e.g., a
node created by an advertising script to display ad content).
the [o] (stands for ‘owned’)
To enable this restriction,
tag may be inserted before the argument. For example,
// DIV:RemoveChild:[o] allows the third-
party script to remove an image, with the restriction that the
image element must have been created by a script hosted by
that same party (not from the original host).
In addition to the DOM, scripts have access to other
critical resources. These accesses are only allowed if a per-
mission allowing the corresponding Action is included in the
policy. These permissions do not include NodeDescriptors,
since they are not associated with particular DOM nodes.
Local storage. Accesses to document.cookie require the
getCookie or setCookie permission, while all other accesses
to local storage APIs (such as the localStorage associative
array and indexedDB) require the localStorage permission.
Browser conﬁguration. Third-party scripts may access
user-identifying browser conﬁguration, possibly to serve
customized scripts to different user groups. However, such
information can also be used to ﬁngerprint browsers [2]
and identify vulnerable targets. ScriptInspector ensures all
accesses to these objects require corresponding permissions.
the navigator.userAgent action permission
For example,
allows a script to obtain the name and version of the client
browser.
Network. Ensuring third-party scripts only communicate
with intended domains is critical for limiting information
leakage. A script can initiate a network request many ways,
including calling document.write or related DOM insertion
APIs, setting the src attribute of a img node, submitting
a form with a carefully crafted action attribute, or send-
ing an explicit asynchronous JavaScript request (AJAX).
Regardless of the method used to access the network,
transmissions are only allowed if the policy includes the
network permission with a matching domain.
2.2 Node descriptors
A node descriptor is an optional matching mode (intro-
duced later in this section) followed by a node representa-
tion:
NodeDescriptor ::= [MatchingMode:] NodeSelector
::= AbsoluteXPath | SelectorXPath |
NodeSelector
RegexpXPath | ˆ NodeSelector
MatchingMode: ::= sub | root
Absolute XPaths. A DOM node can be speciﬁed using
an absolute XPath. For example, /HTML[1]/BODY[1]/DIV[1]/
is an absolute XPath that speciﬁes the ﬁrst DIV child of
the BODY element of the page. Absolute XPaths are often
useful for matching generic invisible tracking pixels injected
by third-party scripts.
Attribute-based selectors. Nodes can also be speciﬁed
using Selector XPaths. For example,
// DIV[@class=‘ad’]
speciﬁes the set of all DIVs that have the class name ad.
This permission is often used to capture the placeholder
node under which the third-party scripts should inject the
advertisements. Using a selector may compromise security
in that there might be other nodes on the webpage that can
be accidentally matched using the same selector. Therefore,
care has to be taken to make the selectors as restrictive as
possible to avoid matching unintended elements. We discuss
how the PolicyGenerator can assist administrators to achieve
this goal in Section 7.1. Another concern is that a third-
party script may modify the node attribute to make that node
match the selector on purpose. To prevent this, the policy
must not allow calls to modify the attributes used in selectors
(see Section 2.3).
Regular expressions. To offer more robustness and ﬂex-
ibility, our node selector supports regular expressions in
XPaths.1 We found this necessary since many sites intro-
duce randomness in page structure and node attributes. For
example, we found that websites may embed an advertise-
ment by deﬁning its placeholder DIV’s ID as a string that
starts with “adSize−”, followed by the size of the ad (e.g.
300x250). We use this descriptor to specify these nodes:
// DIV[@ID=‘adSize−\d∗x\d∗’].
Contextual selectors. A node may be described by another
selected node’s parent. This is especially convenient when
the accessed node does not have any identifying attribute,
but one of its children does. We support this by allowing a
caret (ˆ) to be added before a node selector to indicate how
many levels to walk up the tree when looking for a match.
ˆˆ// DIV[@ID=‘adPos’] speciﬁcs the node two
For example,
levels above the DIV element whose id is adPos.
Similar
to the parental context, a node can be de-
scribed as another selected node’s child node. For example,
// DIV[@ID=‘adPos’]/DIV[2] speciﬁes the second DIV child of
the DIV element whose id is adPos.
Matching mode. Many site-speciﬁc DOM accesses happen
as a result of advertising and widget scripts injecting content
1XPaths that accept regular expressions have been proposed for XPath
3.0, but are not yet supported by any major browser.
852852
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:40 UTC from IEEE Xplore.  Restrictions apply. 
into the page. These scripts often follow similar access
patterns, and we deﬁne two matching modes that can be
used to adjust matching. When no mode is provided, only
nodes speciﬁed by the given node representation match.
The subtree matching mode matches all children of
nodes that are matched by the node selector. For example,
sub://DIV[@id=‘adPos’] selects all children of the DIV ele-
ment whose id is adPos. This matching mode is particularly
useful for scripts such as advertising and social widgets that
add content into the page. They often touch all children
of the placeholder node. However, the node structure inside
the injected node may be different between requests, making
it hard to describe using the strict-matching mode. In this
scenario, a policy that limits script access to a subtree is
more plausible.
Root mode covers all nodes that are ancestors to the se-
lected node. For example, root :// DIV[@id=‘adPos’] describes
all ancestor nodes of the DIV element whose id is adPos.
Listing 1 Script access pattern example
/BODY[1]/DIV[3]/DIV[4]/DIV[1]:AppendChild:...
/BODY[1]/DIV[3]/DIV[4]:GetClientWidth
/BODY[1]/DIV[3]:GetClientWidth
/BODY[1]:GetClientWidth
We use a commonly seen advertising script access pattern,
shown in Listing 1, to explain why this is useful. In this
example, the actual meaningful operation is done on the