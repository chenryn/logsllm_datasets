# Understanding and Monitoring Embedded Web Scripts

**Authors:**
- Yuchen Zhou
- David Evans

**Conference:**
2015 IEEE Symposium on Security and Privacy

## Abstract
Modern web applications frequently incorporate third-party scripts, which can make unrestricted changes to the embedding page and access critical resources, including private user information. This paper introduces a suite of tools to help site administrators understand, monitor, and restrict the behavior of these embedded scripts. We developed **ScriptInspector**, a modified browser that intercepts, records, and checks third-party script accesses against security policies. Additionally, we created a **Visualizer** tool for convenient viewing of recorded script behaviors and candidate policies, and a **PolicyGenerator** tool to assist in writing effective policies. With minimal effort, site administrators can refine these policies to robustly limit the behavior of embedded scripts. Our evaluation shows that PolicyGenerator can generate effective policies for 72 out of 100 test sites with minor human assistance. This paper presents the design of our tools, insights gained from their use, and an assessment of their value for website administrators.

## 1. Introduction
Modern web applications integrate code from multiple sources, presenting significant security and privacy challenges. Third-party scripts, running with the same privileges as the host, have full access to host resources, including sensitive user data, and can make arbitrary modifications to the page. While some access is necessary for functionality (e.g., inserting ads or tracking user behavior), providing unrestricted access to all resources is potentially dangerous. For instance, if an attacker compromises a server hosting the Google Analytics script, they could control over 50% of the top websites [23, 30].

Previous research has highlighted the threats posed by malicious embedded scripts [6, 17]. Host servers can be compromised, allowing attackers to deploy malicious scripts on unsuspecting websites [13]. Furthermore, reputable advertising networks may subcontract space to less reputable networks, leading to the inclusion of malicious scripts on prominent websites like nytimes.com and spotify.com [31]. Responsible site administrators need a way to understand and limit the behavior of embedded scripts, especially those from external servers. Without this, it is impossible for a site to uphold its privacy policy unless it eliminates sensitive content from pages with third-party scripts or disavows responsibility for script actions.

JavaScript's dynamic nature complicates the analysis of embedded scripts. Prevalent obfuscation and compression make static analysis difficult. Dynamic techniques like symbolic execution also struggle, particularly with JSONP/AJAX requests. JavaScript symbolic analysis tools often ignore calls to `eval` because constraint solvers cannot efficiently handle dynamically generated code [5, 26]. Recent improvements in solvers [32] still lack soundness and completeness and are unable to handle typical scripts.

### Contributions Overview
We present and evaluate a toolchain (Figure 1) designed to help site administrators understand and monitor the behavior of embedded scripts. This involves capturing script behaviors precisely enough to develop effective policies. Section 2 explains how we define policies and supported permissions. The primary contributions of this paper are the design and evaluation of three integrated tools available at ScriptInspector.org:
- **ScriptInspector**: A modified Firefox browser that intercepts and records API calls from third-party scripts to critical resources.
- **Visualizer**: A Firefox extension that highlights nodes accessed by third-party scripts and aids in understanding script behaviors.
- **PolicyGenerator**: A tool that infers candidate permissions and helps site administrators develop effective policies with minimal intervention.

**Threat Model**: Our work aims to provide site administrators with a way to ensure the integrity of their site and protect user privacy from embedded scripts. We focus on detecting sensitive resource leaks and unintended page modifications, but do not address attacks exploiting system vulnerabilities. By default, we assume scripts from different domains are not colluding. Our techniques are not designed to address targeted attacks based on IP addresses or browser fingerprints.

## 2. Policies
A policy is a set of permissions that describe permissible behaviors for a script. Our goal is to develop policies that are precise enough to limit script behavior without requiring custom policies for each page. We aim to balance between over-generalizing policies and requiring page-specific policies, which would be burdensome for site administrators.

### 2.1 Resources
Scripts primarily access the web page content via the Document Object Model (DOM). DOM access includes reads and modifications to the DOM tree. For DOM permissions, the action is the DOM API (e.g., `appendChild`), and the node descriptor specifies the set of nodes on which the action is allowed. Node descriptors can be omitted to allow an API call on any DOM node. Arguments are represented as regular expressions that match strings or nodes.

In addition to the DOM, scripts access other critical resources:
- **Local Storage**: Accesses to `document.cookie` require `getCookie` or `setCookie` permissions, while other local storage APIs require `localStorage` permission.
- **Browser Configuration**: Accesses to user-identifying browser configuration require corresponding permissions (e.g., `navigator.userAgent`).
- **Network**: Ensures third-party scripts only communicate with intended domains, requiring `network` permission with a matching domain.

### 2.2 Node Descriptors
Node descriptors specify the set of nodes on which an action is allowed. They can be defined using:
- **Absolute XPaths**: Specify a DOM node using an absolute path (e.g., `/HTML[1]/BODY[1]/DIV[1]`).
- **Attribute-based Selectors**: Use XPath selectors (e.g., `//DIV[@class='ad']`).
- **Regular Expressions**: Offer more flexibility (e.g., `//DIV[@ID='adSize-\d*x\d*']`).
- **Contextual Selectors**: Describe nodes relative to other selected nodes (e.g., `^//DIV[@ID='adPos']`).

**Matching Modes**:
- **Subtree Matching**: Matches all children of nodes specified by the selector.
- **Root Mode**: Matches all ancestor nodes of the selected node.

### 2.3 Interference Between Permissions
To prevent interference, policies must not allow calls to modify attributes used in selectors. For example, a policy should not allow modifying the `id` attribute if it is used in a selector.

## 3. ScriptInspector
**ScriptInspector** is a modified version of the Firefox browser that intercepts and records API calls from third-party scripts to critical resources, including the DOM, local storage, and network. Given a website URL and one or more script policies, ScriptInspector records accesses that violate the policy. When no policies are given, all resource accesses by scripts are recorded in the instrumented DOM. ScriptInspector can attribute accesses to responsible scripts, even when the call stack includes multiple parties and when scripts are injected into the DOM.

## 4. Visualizer
The **Visualizer** is a Firefox extension that uses the instrumented DOM maintained by ScriptInspector to highlight nodes accessed by third-party scripts. It helps site administrators understand script behaviors and develop effective policies. When given a set of permission candidates, the Visualizer can draw matching nodes on the page to assist in policy development.

## 5. PolicyGenerator
**PolicyGenerator** assists site administrators in developing effective policies with limited human intervention. It uses information recorded by ScriptInspector to infer candidate permissions. Site administrators can review the generated policies using the Visualizer. For 72 of the 100 tested sites, PolicyGenerator finds effective, high-coverage policies for all embedded scripts with minimal human effort. We evaluate the robustness of developed policies in Section 8.

## 6. Evaluation
Our evaluation demonstrates the effectiveness of our tools in helping site administrators understand and monitor the behavior of embedded scripts. PolicyGenerator generates effective policies for 72 out of 100 test sites with minimal human assistance. We discuss the robustness of developed policies and the value of our approach for website administrators.

## 7. Conclusion
This paper presents a suite of tools designed to help site administrators understand, monitor, and restrict the behavior of embedded third-party scripts. Our tools, including ScriptInspector, Visualizer, and PolicyGenerator, provide a comprehensive solution for ensuring the integrity of web applications and protecting user privacy. Future work will focus on further improving the robustness and usability of these tools.

---

**References:**
- [23] Example Reference
- [30] Example Reference
- [6] Example Reference
- [17] Example Reference
- [13] Example Reference
- [31] Example Reference
- [5] Example Reference
- [26] Example Reference
- [32] Example Reference

**DOI:**
10.1109/SP.2015.57

**Copyright:**
Â© 2015, Yuchen Zhou. Under license to IEEE.