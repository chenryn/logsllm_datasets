server reveals an existing user Alice’s account details in
the alternate workﬂow2.
None of the security holes by themselves are exploits as
yet. Below we discuss the potential attacks as a result of these
holes.
3.3.2 Attack #1: Unauthorized registration, given a vic-
tim’s cell number
In this attack, we show how a remote attacker, Eve, can set up
a UPI account, given a victim’s cell number. For the attack to
succeed, Eve requires only one thing: the victim’s cell phone
to have Mally app installed.
The attack setup is as follows. Eve on her phone has a
repackaged version of BHIM that has client-side security
checks disabled. Eve sets up a command and control (C&C)
server, puts out Mally as a potentially useful app on various
app stores, and waits for unsuspecting users to install Mally.
As discussed in the Threat Model (Section 2.3), Mally has
RECEIVE_SMS permission. An unsuspecting user Alice,
uses a legitimate version of BHIM on a non-rooted phone, as
is the best practice for Android.
For attacks to happen, Eve must have a way to discover a
victim’s cell number. To simplify the attack description, we
assume that Mally also has READ_PHONE_STATE permis-
sion, which it uses to get the cell number from the victim’s
phone (almost 35% of the apps use this permission [60]). We
show in Section 3.3.6 how Eve can discover a victim’s cell
number without the READ_PHONE_STATE permission.
Below we show how Eve can register with the UPI server
as Alice, after Alice unwittingly installs Mally on her phone.
1. Mally: I am installed! Mally, once installed on Alice’s
phone, reports to Eve’s C&C server over the Internet
(Android automatically grants INTERNET permission).
Mally reports Alice’s cell number to Eve as a way for Eve
(i) to discover Alice’s cell number; and (ii) to associate
the instance of Mally with Alice, which is essential for
Eve to scale the attacks to many users.
2. Eve: Use the cell number for hard binding: Eve exploits
Potential Security Hole #1 in BHIM’s workﬂow to bind
her device to Alice’s cell number as shown in Figure 4b.
Eve starts by putting her cell phone in airplane mode
while remaining connected to the Internet through Wi-
Fi. BHIM app on Eve’s phone starts the handshake by
sending Eve’s device details. The UPI server responds
with a device registration token for Eve. Ideally, Eve’s
BHIM must relay the token back to the UPI server via
SMS. However, since Eve has turned off SMS messag-
ing, the SMS containing the token fails to deliver. BHIM
prompts Eve to key-in a cell number and Eve keys-in
Alice’s cell number. BHIM now sends Eve’s device reg-
istration token and Alice’s cell number to the UPI server
USENIX Association
29th USENIX Security Symposium    1505
as an HTTPS message for hard-binding. The UPI server
then sends an OTP to Alice.
3. Mally: Intercept the OTP. On Alice’s phone, Mally in-
tercepts the incoming OTP message because its RE-
CEIVE_SMS permission allows it. Mally then sends
the OTP to the attacker’s C&C server as an HTTPS mes-
sage, along with Alice’s cell number. (The cell number
here is not strictly required. It merely allows the C&C
server to associate each OTP with a victim and thus re-
duce some guesswork, in case it receives OTPs from
other Mally installations.)
4. Eve: Acknowledge the OTP. The C&C server sends
an SMS message containing the OTP to the attacker’s
phone. Note that the BHIM app normally checks the ori-
gin of the OTP message it receives and accepts the OTP
only if it is from a known UPI server. However, Eve dis-
abled this safeguard before the attack in the repackaged
version of BHIM on her phone, thus exploiting Potential
Security Hole #2
5. Eve: New BHIM user? Create BHIM’s Passcode: BHIM
on Eve’s phone will ask for BHIM’s 4-digit passcode.
Now Eve does not know if Alice is a new user of BHIM
or a registered user. However, Eve can determine this
from Step 6 of the handshake where the UPI server sets
a ﬂag called accountExists to false for a new user. Eve
can proceed to set a new passcode for a new user Alice.
We discuss the workaround for the attack on an existing
BHIM user in Attack #1(cid:48).
6. Eve: Select the bank from the bank list. Eve next se-
lects each bank one-by-one on BHIM’s bank selection
screen until she ﬁnds one that the UPI server accepts.
The UPI server will accept a bank if Alice has an account
at that bank and has her cell number registered with that
account.
The UPI server does not appear to restrict brute-forcing—
an error just brings the user back to the bank selection
screen. In any case, brute-forcing is difﬁcult to prevent
since the list of banks is relatively short, and Eve can
try out some of the larger banks where most people are
likely to have an account with such as the State Bank of
India or ICICI Bank.
Eve can repeat Attack #1 until she discovers all of Alice’s
bank accounts and registers with them.
3.3.3 Attack #1(cid:48): Eve: overcoming BHIM’s passcode
check for existing BHIM user
Attack #1 on a registered user Alice stalls when BHIM
prompts the attacker Eve for Alice’s BHIM passcode. We
present three solutions to overcome the passcode barrier.
The ﬁrst workaround is for Eve to wait for Mally to inter-
cept and leak the new passcode. We found that Mally can
do this as follows. Mally waits for Alice to launch BHIM.
Mally detects BHIM’s login activity to draw an overlay on
it (see Figure 4c, keys demarcated for clarity). To draw the
overlay, Mally exploits a toast overlay vulnerability CVE-
2017-0752 [39] that requires no additional permissions from
the user. Once Mally intercepts the passcode, it forwards the
passcode to the C&C server.
The second workaround is for Mally to request and use
Android’s accessibility permission, which enables Mally to
observe user interactions and intercept the passcode.
An attacker may, at this point, choose to reset the user’s
passcode. We ﬁnd that BHIM’s passcode reset workﬂow re-
quires a user’s bank account number instead of the debit card
number. On the surface, it seems unlikely that Eve will know
Alice’s bank account number, and this, in isolation, may have
been a reasonable passcode reset process. However, as de-
scribed in Potential Security Hole #3, recall that the default
UPI workﬂow reveals a user’s bank account number. Eve can
use the bank account number to reset Alice’s BHIM passcode,
courtesy of the UPI server.
Impact of Attack #1 and #1(cid:48). Eve cannot do transactions
on the linked bank accounts after a successful registration.
This attack, however, leaks private data such as the set of
banks where Alice has bank accounts as well as Alice’s bank
account numbers. We also noticed that the UPI server sends
a device registration token, a customer identiﬁer, a login to-
ken, a hash of the account number, and the bank’s account
number back to BHIM (client) during the protocol handshake
(see Figure 3). BHIM masks the bank account number but,
nevertheless, the UPI server sends it, and Eve can get to it
using the repackaged BHIM on Eve’s phone. The Attack #1
is also a precursor to Attack #2 or Attack #3, which are more
devastating. Note that the use of accessibility is only helpful
in simplifying the attack; we do not require it for Attack #1.
3.3.4 Attack #2: Unauthorized transactions on bank ac-
counts given cell number and partial debit card
number
In this attack, which follows Attack #1, Eve extends the pre-
vious attack to enable transactions on a bank account of a
user Alice that does not use any UPI apps. For the attack to
succeed, Eve requires additional knowledge about Alice: the
last six digits of Alice’s debit card number and expiry date.
Debit cards are carelessly given to unknown people in stores
and restaurants in India at the time of checkout (often with
cell numbers, as cashiers routinely collect cell numbers to
send discount offers or give reward points). The majority of
debit cards in India also carry the bank name. Using a debit
card for purchases in stores or online in India requires the user
to key-in a secret PIN. In this attack, even without the debit
card PIN from Alice, with access to the debit card information
1506    29th USENIX Security Symposium
USENIX Association
alone, Eve can set a UPI PIN to enable transactions on the
associated bank account.
Impact. Losing or sharing one’s debit card information
along with the cell number (not the actual card, the actual cell,
or the debit card PIN) can enable an attacker to set a UPI PIN
and do transactions on one’s bank account. Eve does not need
bank account numbers or any of Alice’s passcodes. The attack
appears to be less scalable than Attack #1, however, since Eve
needs to harvest debit card numbers along with associated
cell numbers. For users who lose the two pieces of data to Eve
and also install Mally, the impact is devastating. Eve could
empty their account, with money transferred to any user in
India. The attack does not even require a victim to have ever
used a UPI app previously. To reset the UPI PIN, Eve requires
the last six digits of the debit card number, expiry date, and
an OTP, all of which she has.
3.3.5 Attack #3: Unauthorized transactions without
debit card numbers
This attack follows from Attack #1(cid:48) for an existing user Alice.
Such a user would have previously set up a passcode to log
in to BHIM and UPI PIN to authorize transactions. Unfor-
tunately, Mally can intercept the UPI PIN using either toast
overlays or by requesting accessibility permission. As an al-
ternative to intercepting UPI PIN, Eve can attempt to reset
the UPI PIN (recall that Eve has already registered with the
bank account in Attack #1(cid:48)). As we described in the previous
attack, resetting the UPI PIN requires debit card information,
which reduces this attack to Attack #2. In short, either Mally
intercepting UPI PIN or Eve possessing Alice’s debit card in-
formation appears to be required. Eve now has all the factors
to do transactions from her phone as Alice.
Impact: Eve can transfer money out to arbitrary UPI-based
accounts in India. Note that for an attack on an existing user,
Eve does not require any knowledge about Alice except for
two things that Mally intercepts— an SMS message and the
UPI PIN.
3.3.6 Eliminating the need for READ_PHONE_STATE
permissions
The attacks we described so far relied on Mally knowing the
victim’s cell number and sending it to the C&C server, as a
precursor to all the attacks. Now, we describe how Eve can
associate a victim’s cell number with an instance of Mally
without Mally needing the READ_PHONE_STATE permis-
sion.
Given a set C of all targeted cell numbers (which is any
list of cell numbers — valid or invalid), the following steps
precede Attack #1:
(i) For each cell number in C, send an SMS to that number
with the following content: [receiver’s cell number, “SMS
TEST”] (or any such message).
(ii) Consider a subset SC of phones C that have Mally in-
stalled. Mally looks for the string “SMS TEST” and saves the
cell number in the SMS as the victim’s cell number.
All instances of Mally that receive such an SMS message can
thus learn their victim’s cell number and report back to the
C&C server to initiate the user registration protocol.
3.3.7 Whose problem: Android or UPI?
There is a potential question as to whether the attacks we
discovered are primarily due to limitations of Android’s per-
mission model or due to ﬂaws in the UPI design (and who
should ﬁx them). We think there are problems with both. We
note that no bank-related credentials are required for an ad-
versary to get a user’s bank account number, given the user’s
cell number (in any of the handshakes– default or alternate).
Attack #2 uses the last six digits of a debit card number and
expiry date, a weaker threshold than for online and in-store
purchases using debit cards where the entire number and the
PIN is typically required in India. Alternate workﬂows in the
UPI protocol contribute signiﬁcantly to enabling our attacks.
We, of course, leverage Android’s security limitations as well,
just as any good attacker would be expected to. We further
discuss this issue in Section 5.
3.4 Other UPI 1.0 Apps
We now discuss whether the attacks on BHIM apply to the
users of other UPI 1.0 apps. Our ﬁndings from testing three
apps popular at the time of the study— PhonePe, Ola Wallet,
and Samsung Pay—suggest yes. As shown in Figure 5, at the
time of UPI 1.0, BHIM and PhonePe were the most popular
UPI apps. PhonePe is also one of India’s oldest payment apps.
We did not include Google Pay (called Tez then) since it was
not widely used, and Paytm was popular more for its wallet
features. Below we discuss the attacks and its nuances under
the same threat model.
First, these apps differ from BHIM because they are “third-
parties” that integrate with UPI. Each third-party app uses its
own factors for user proﬁle setup. Hence, as discussed in the
UPI specs Section 2.2, for third-party apps, their payment app
server does the passcode-based authentication of a user while
the UPI server veriﬁes the device ﬁngerprint and UPI PIN.
NPCI requires third-party apps to use NPCI’s interface
(libraries) for device ﬁngerprinting and entering UPI PIN.
We conﬁrm that these apps internally use a common NPCI
library to interface with the UPI server at the time of manual
inspection. The UPI interface is accessible to a third-party app
only after the user authenticates with the third-party payment
app server. Thus, device binding and UPI PIN set up is done
with the UPI server only after the user’s passcode is set up
with the payment app server.
USENIX Association
29th USENIX Security Symposium    1507
Figure 5: Popular UPI apps and disclosure timelines
Attack #1, unauthorized registration of a new user, can now
be done by an adversary by setting up a user proﬁle with
the third-party app server and then exploiting the potential
security holes of Section 3.3.1. Third-party apps make it easy
for an attacker Eve to set up a proﬁle. Eve can do it in two
ways— Eve can either create a proﬁle from her phone using
her cell number (which is straight-forward) or create a proﬁle
from her phone using Alice’s cell number. As an example of
the latter, PhonePe provides an option to key-in a cell number
at the time of user proﬁle setup. Eve can use this option to key-
in Alice’s cell number in the app. For Eve to set a passcode
on behalf of Alice, Eve needs an OTP the PhonePe server
sends Alice. However, Eve can get the OTP through Mally
on Alice’s phone, given Mally’s RECEIVE_SMS permission.
The rest of Attack #1 continues as before, and Attack #2
follows from Attack #1.
For Attack #1(cid:48) on an existing user, an adversary can exploit
any authentication workﬂow ﬂaws on the third-party app or
app server. Once logged in, Eve can exploit the potential
security holes (Section 3.3.1). For Eve to log in as an existing
user, Eve either has to get Alice’s password or has to reset
Alice’s password. To get Alice’s password, Mally can either
use the toast overlay attacks or the accessibility permission.
A straightforward approach, however, is to exploit the app’s
passcode reset mechanism. On PhonePe, for instance, the
passcode reset relies only on an OTP. On Ola Money, passcode
reset requires a secret that is set up at the time the user creates
a proﬁle (which we could intercept). We note that once Eve
logs in as Alice on Eve’s phone, PhonePe logs Alice out from
her phone. In Ola Money, however, Alice will not receive
any notiﬁcation since the app by design permits login from
many devices. The rest of Attack #1(cid:48) continues as before, and
Attack #3 follows from Attack #1(cid:48).
Samsung Pay (SPay) is slightly different in that its secu-
rity measures make use of a Trusted Execution Environment
(TEE) [52] implementation called KNOX. To use SPay, a
user must have a Samsung account conﬁgured at the time
of setting up the phone and additionally conﬁgure her ﬁn-