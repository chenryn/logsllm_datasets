那么为什么一定要在checkpoint前打开full-page WAL write呢?   
checkpoint之后, BLOCK在第一次被改变的时候, 是写full page到XLOG文件的, 但是前提是full_page_writes参数=on.   
因此如果我们的参数中full_page_writes=off了. 如果仅仅是checkpoint , 就不能确保 checkpoint之后, BLOCK在第一次被改变的时候, 是写full page到XLOG文件的 了.   
所以pg_start_backup()中设计了一个打开full-page WAL write的过程(XLogCtl->Insert.forcePageWrites = true;). 并且这个过程必须在checkpoint发出之前. 而且full-page write要hold住直到备份结束.  
从xlog的doPageWrites也可以看出在写page到WAL文件之前是需要先看看full_page_writes的值或者是Insert->forcePageWrites标记的值, 来判断此次写是否要full-page write.  
```  
/*  
         * Decide if we need to do full-page writes in this XLOG record: true if  
         * full_page_writes is on or we have a PITR request for it.  Since we  
         * don't yet have the insert lock, forcePageWrites could change under us,  
         * but we'll recheck it once we have the lock.  
         */  
        doPageWrites = fullPageWrites || Insert->forcePageWrites;  
```  
## 其他  
shared memory中用于XLOG控制的数据结构 :   
```  
/*----------  
 * Shared-memory data structures for XLOG control  
 *  
 * LogwrtRqst indicates a byte position that we need to write and/or fsync  
 * the log up to (all records before that point must be written or fsynced).  
 * LogwrtResult indicates the byte positions we have already written/fsynced.  
 * These structs are identical but are declared separately to indicate their  
 * slightly different functions.  
 *  
 * We do a lot of pushups to minimize the amount of access to lockable  
 * shared memory values.  There are actually three shared-memory copies of  
 * LogwrtResult, plus one unshared copy in each backend.  Here's how it works:  
 *              XLogCtl->LogwrtResult is protected by info_lck  
 *              XLogCtl->Write.LogwrtResult is protected by WALWriteLock  
 *              XLogCtl->Insert.LogwrtResult is protected by WALInsertLock  
 * One must hold the associated lock to read or write any of these, but  
 * of course no lock is needed to read/write the unshared LogwrtResult.  
 *  
 * XLogCtl->LogwrtResult and XLogCtl->Write.LogwrtResult are both "always  
 * right", since both are updated by a write or flush operation before  
 * it releases WALWriteLock.  The point of keeping XLogCtl->Write.LogwrtResult  
 * is that it can be examined/modified by code that already holds WALWriteLock  
 * without needing to grab info_lck as well.  
 *  
 * XLogCtl->Insert.LogwrtResult may lag behind the reality of the other two,  
 * but is updated when convenient.      Again, it exists for the convenience of  
 * code that is already holding WALInsertLock but not the other locks.  
 *  
 * The unshared LogwrtResult may lag behind any or all of these, and again  
 * is updated when convenient.  
 *  
 * The request bookkeeping is simpler: there is a shared XLogCtl->LogwrtRqst  
 * (protected by info_lck), but we don't need to cache any copies of it.  
 *  
 * Note that this all works because the request and result positions can only  
 * advance forward, never back up, and so we can easily determine which of two  
 * values is "more up to date".  
 *  
 * info_lck is only held long enough to read/update the protected variables,  
 * so it's a plain spinlock.  The other locks are held longer (potentially  
 * over I/O operations), so we use LWLocks for them.  These locks are:  
 *  
 * WALInsertLock: must be held to insert a record into the WAL buffers.  
 *  
 * WALWriteLock: must be held to write WAL buffers to disk (XLogWrite or  
 * XLogFlush).  
 *  
 * ControlFileLock: must be held to read/update control file or create  
 * new log file.  
 *  
 * CheckpointLock: must be held to do a checkpoint or restartpoint (ensures  
 * only one checkpointer at a time; currently, with all checkpoints done by  
 * the bgwriter, this is just pro forma).  
 *  
 *----------  
 */  
```  
## 参考  
src/backend/access/transam/xlog.c  
src/backend/replication/basebackup.c  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")