title:Privacy-Preserving Social Plugins
author:Georgios Portokalidis and
Michalis Polychronakis and
Angelos D. Keromytis and
Evangelos P. Markatos
Privacy-Preserving Social Plugins
Georgios Kontaxis,† Michalis Polychronakis,† Angelos D. Keromytis,† Evangelos P. Markatos*
†Columbia University, *FORTH-ICS
{kontaxis,mikepo,angelos}@cs.columbia.edu, PI:EMAIL
Abstract
The widespread adoption of social plugins, such as Face-
book’s Like and Google’s +1 buttons, has raised con-
cerns about their implications to user privacy, as they en-
able social networking services to track a growing part of
their members’ browsing activity. Existing mitigations in
the form of browser extensions can prevent social plugins
from tracking user visits, but inevitably disable any kind
of content personalization, ruining the user experience.
In this paper we propose a novel design for privacy-
preserving social plugins that decouples the retrieval of
user-speciﬁc content from the loading of a social plugin.
In contrast to existing solutions, this design preserves the
functionality of existing social plugins by delivering the
same personalized content, while it protects user privacy
by avoiding the transmission of user-identifying infor-
mation at load time. We have implemented our design
in SafeButton, an add-on for Firefox that fully supports
seven out of the nine social plugins currently provided by
Facebook, including the Like button, and partially due to
API restrictions the other two. As privacy-preserving so-
cial plugins maintain the functionality of existing social
plugins, we envisage that they could be adopted by social
networking services themselves for the beneﬁt of their
members. To that end, we also present a pure JavaScript
design that can be offered transparently as a service with-
out the need to install any browser add-ons.
1 Introduction
Social plugins enable third-party websites to offer per-
sonalized content by leveraging the social graph, and al-
low their visitors to seamlessly share, comment, and in-
teract with their social circles [12]. For example, Face-
book’s Like button, probably the most widely deployed
social plugin [33], enables users to leave positive feed-
back for the web page in which it has been embedded,
share the page with their social circle, and view their
like-minded friends. Google’s “+1” button [16] offers al-
most identical features to the Like button, while similar
widgets are also available from other popular social net-
working services (SNSs) such as Twitter and LinkedIn.
Social plugins offer multifaceted beneﬁts to both con-
tent providers and members of SNSs, a fact that is re-
ﬂected by the tremendous growth in their adoption. In-
dicatively, as of June 2012, more than two million web-
sites have incorporated some of Facebook’s social plu-
gins, while more than 35% of the top 10,000 websites
include Like buttons—a percentage three times higher
than just one year ago [33]. Unfortunately, as the num-
ber of websites that incorporate social plugins increases,
so does the portion of their visitor’s browsing history that
gets exposed.
To personalize the content of third-party web pages,
social plugins connect to the SNS and transmit a unique
user identiﬁer—usually contained in an HTTP cookie—
along with the URL of the visited page. Consequently,
the SNS receives detailed information about every visit
of its members to any page with embedded social plu-
gins. Considering the increasing adoption rate of so-
cial plugins, a constantly growing part of its members’
browsing history can be precisely tracked.
More importantly, the cookies used in social plugins
are linked to user proﬁles that typically contain the per-
son’s name, email address, and other private information.
Although third-party tracking cookies as used by adver-
tising networks and trafﬁc analytics services also aim to
track the pages visited by a speciﬁc user [43], in essence
they track the pages opened using a particular browser
instance running on a device with a given IP address.
While this can already be considered as personally iden-
tifying information to some extent, in addition to that in-
formation, social plugins reveal much more: the brows-
ing history of individuals.
The important implications of social plugins to user
privacy were identiﬁed soon after their release [34, 54],
and concerns have been intensifying [34, 37]. As avoid-
ing becoming a member of any SNS is often rather
difﬁcult (even users that are not interested in the so-
cial aspects of a service can be affected, e.g., Gmail
users can still be tracked through Google’s “+1” buttons),
privacy-conscious users can resort to browser extensions
that block user-identifying information from reaching the
SNS through social plugins [27, 15, 7, 4, 28, 45].
Depending on the subtlety of their approach, ranging
from stripping cookies and headers from the plugin’s re-
quests to preventing the plugin from loading, some or
none of its user interaction functionality may be pre-
served. However, as user-identifying information never
reaches the SNS, all these solutions completely disable
any kind of content personalization. As an example, for
a Like button, even logged in members will be viewing
just the total number of “likes” for the page (Fig. 1a), in-
stead of the names and pictures of their friends who have
liked the page (Fig. 1c).
We believe that the majority of users are not even
aware of the privacy issues stemming from the preva-
lence of social plugins. For this reason, we argue that
any solution can be effective only if it can be deployed
by SNSs themselves, so as to protect all users without
requiring any action on their behalf. Crucially, content
personalization and user interaction are two key features
of existing social plugins. Any solution that lacks either
of them, or introduces even a slight compromise in user
experience, is not likely to be adopted by SNSs.
Driven by these two observations, in this paper we pro-
pose a novel design for privacy-preserving social plu-
gins, which fulﬁlls two seemingly contradicting goals:
it protects user privacy by avoiding the transmission of
user-identifying information at load time, while it offers
identical functionality to existing social plugins by pro-
viding the same personalized content. The main idea is
to decouple the retrieval of private information from the
loading of a social plugin by prefetching all data from
the user’s social circle that might be needed in the con-
text of a social plugin. Any missing non-private data is
retrieved on demand without revealing the identity of the
user to the SNS. Local (private) and server-side (public)
data are then combined to render a pixel-by-pixel identi-
cal version of the same personalized content that would
have been rendered by existing social plugins.
To demonstrate the feasibility of our design, we have
implemented SafeButton, an add-on for Firefox that pro-
vides privacy-preserving versions of existing social plu-
gins, as they are provided by the major SNSs. Based
on our experimental evaluation, the local disk space con-
sumed by SafeButton for storing the private data required
for handling the nine different social plugins currently
provided by Facebook is in the order of a few megabytes
for typical users, and 145MB for the extreme case of a
user with 5,000 friends. At the same time, due to re-
Figure 1: Different states of Facebook’s Like button for
a user that (a) has never logged in on Facebook from this
particular browser or is not a member of Facebook at all,
(b) has previously logged in but is currently logged out,
(c) is currently logged in (personalized view).
duced network overhead, SafeButton renders social plu-
gins 64% faster compared to their original versions. Our
design can be readily adopted by existing SNSs, and be
offered transparently as a service to their members with-
out the need to install any additional software.
Our work makes the following main contributions:
• We propose a novel design for privacy-preserving
social plugins that i) prevents the SNS from track-
ing its members’ browsing activities, and ii) pro-
vides the same functionality as existing social plug-
ins with no compromises in content personalization.
• We have implemented SafeButton, a Firefox exten-
sion that currently provides privacy-preserving ver-
sions of Facebook’s social plugins.
• We evaluate our implementation and demonstrate
the feasibility of the proposed design in terms of
functionality, effectiveness, and performance.
• We describe in detail a pure JavaScript implemen-
tation of our design that can be offered by existing
SNSs as a transparent service to their members.
2 User Tracking through Social Plugins
2.1 Social Plugins
Social plugins are provided by the major social network-
ing services in the form of “widgets” that can be embed-
ded in any web page, usually in the form of an IFRAME
element. After downloading the page, the browser is-
sues a subsequent request to fetch and load the content
of the plugin, as shown in Fig. 2 (step 2). The domain
that serves the social plugins is the same as the one that
hosts the SNS itself, and thus any state that the browser
maintains for the SNS in the form of HTTP cookies [17]
is transmitted along with the request for the social plugin.
Assuming the user has an active session with the SNS,
the site will associate the request with the user’s proﬁle,
top 10,000 most visited websites having Like buttons in
their pages (as of June 2012) [33], a good part of the
daily browsing history of 901 million active Facebook
users [8] is technically available to Facebook. We should
stress that the same issue holds for all other major social
networking services that provide social plugins, includ-
ing Google and Twitter.
The privacy issues related to the use of HTTP cook-
ies are a well-known problem. Since their introduction
in 1995, cookies have been extensively used by advertis-
ing networks for building user proﬁles and tracking the
browsing activity of users across the web [51]. Although
user tracking through social plugins resembles this kind
of cross-site tracking through third-party cookies [43],
there is one key difference.
An advertising network uses cookies to track the same
user across all afﬁliate sites that host the network’s ad-
vertisements, but cannot easily link the derived activity
pattern to the actual identity of the user. In contrast, so-
cial plugins use cookies associated with real user proﬁles
on the respective social networking site, which typically
contain an abundance of personally identiﬁable informa-
tion [47].
In essence, instead of tracking anonymous
users, social plugins enable tracking of named persons.
Advertising agencies can also potentially associate a
user proﬁle with a person’s identity by combining infor-
mation from other sources, e.g., in cooperation with one
or more afﬁliate websites on which users provide contact
information for registration. Social networking services,
though, do not have to collude with another party be-
cause they already have access to both extensive person-
ally identiﬁable information, as well as to a broad net-
work of sites that host social plugins.
2.3 Preventing Privacy Leaks
One might think that if users diligently log out of the
social networking site, they will be safe from the pri-
vacy leaks caused by its social plugins. Unfortunately,
this seems a rather daunting task for users that rely daily
on Google, Facebook, Twitter, and other popular SNSs
for their personal and professional communication and
social interaction activities. To provide convenience for
frequent use, these sites follow a single sign-on approach
for all offered services, and prompt users to stay logged
in indeﬁnitely through “keep me logged in” features.
Consequently, users typically remain logged in through-
out the whole duration of their online presence.
In some cases, even after a user logs out, the cookies of
the SNS might not be cleared completely, and personally
identiﬁable information may still persist [9]. For exam-
ple, even after logging out of Facebook, a cookie with a
user identiﬁer remains in the browser, enabling features
such as pre-ﬁlling a returning user’s email address in the
Figure 2: Loading phase of social plugins. After a page
is fetched (1), the browser loads the IFRAME of the so-
cial plugin (2).
If the user is logged in on the SNS,
the plugin receives and displays personalized informa-
tion (3). Users are identiﬁed (and can be tracked) through
the HTTP cookies included in the request.
and respond with personalized content tailored to that
particular user and visited web page (step 3 in Fig. 2).
Otherwise, if the user has not logged in on the SNS from
that particular browser before, or has never registered at
all, the social plugin will display only generic, publicly
accessible information for that page.
For instance, Fig. 1 shows the different modes of
the Like button depending on the browser’s cookies for
facebook.com. If a user does not have an account or has
not logged in on Facebook using that browser, the plugin
displays only the total number of “likes” and prompts
the user to sign up (a).
If a user is currently logged
in, the plugin displays personalized information, includ-
ing some of the names and pictures of the user’s friends
that have liked the page (c). Interestingly, while a user
is logged out (b), the plugin does not prompt for sign-
up; depending on how cookies are cleared, some user-
identifying information may persist even upon user exit.
2.2 Privacy Issues
With publishers reporting multifold increases in traf-
ﬁc [35], and the continuous addition of new gestures
and social features by the major social networking ser-
vices [36], it is expected that the explosive popularity
of social plugins will only continue to grow. As more
sites employ social plugins, the potential for broader
user tracking increases. With more than 35% of the
log in form, or avoiding to unnecessarily prompt existing
members to sign up, as shown in Fig. 1(b).
Blocking of third-party cookies could be considered
a mitigation to this problem, since most of the major
web browsers (Chrome, Firefox, Internet Explorer) have
adapted their security policy to prevent third parties from
reading (in addition to writing) cookies. Therefore, even
though the SNS’s domain appears both as a ﬁrst party
(when a user visits the site directly) and as a third party
(when a social plugin is embedded in a page), in the lat-
ter case the SNS no longer receives any cookies. How-
ever, with the exception of Internet Explorer, blocking
of third-party cookies is not enabled by default. Internet
Explorer will do so, but white-lists same-domain cook-
ies set by ﬁrst parties that return a P3P header [30] (even
a dummy one), which both Facebook and Google [25]
appear to be doing. Moreover, even if a user chooses
explicitly to block third-party cookies, there are known
bypass techniques [2], such as faking an interaction with
the embedded page through a script-initiated form sub-
mission in Safari, or opening the embedded page in a
pop-up window that gets treated by the browser as a ﬁrst
party [53], which interestingly in Chrome is not hindered
by pop-up blocking [3].
The Do Not Track HTTP header [5] is an encouraging
recent initiative that allows users to opt out of tracking by
advertising networks and analytics services. Although
currently not supported by any SNS, if it were adopted,
Do Not Track could allow users to choose whether they
want to opt in for the personalized versions of social plu-
gins or not. However, users who would opt in for the per-
sonalized versions (or who would not opt out, depending
on the default setting) could still be tracked.
This situation drives privacy-conscious users towards
browser extensions that block the transmission of user-
identifying information through social plugins [27, 15,
7, 4, 28, 45]. For instance, Facebook Blocker [7] re-
moves completely the IFRAME elements of social plug-
ins from visited web pages. Instead of blocking social
plugins completely, ShareMeNot [28] simply removes
the sensitive cookies from the social plugin’s requests at
load time. When a user explicitly interacts with a plu-
gin, the cookies are then allowed to go through, enabling
the action to complete normally. Although this approach
strikes a balance between usability and privacy, it still
completely disables any content personalization.
3 Design
3.1 Requirements
The design of privacy-preserving social plugins is driven
by two key requirements: i) provide identical functionality
to existing social plugins in terms of content personaliza-
tion and user interaction, and ii) avoid the transmission of
user-identifying information to the social networking ser-
vice before any user interaction takes place. The ﬁrst re-
quirement is necessary for ensuring that users receive the
full experience of social plugins, as currently offered by
the major SNSs. Existing solutions against user track-
ing do not provide support for content personalization,
and thus are unlikely to be embraced by SNSs and con-
tent providers. The second requirement is mandatory for
preventing SNSs from receiving user-identifying infor-
mation whenever users merely view a page and do not
interact with a social plugin.
We consider as user-identifying information any piece
of information that can be used to directly associate a so-
cial plugin instance with a user proﬁle on the SNS, such
as a cookie containing a unique user identiﬁer. The IP
address of a device or a browser ﬁngerprint can also be
considered personally identifying information, and could
be used by a shady provider for user tracking. However,
the accuracy of such signals cannot be compared with
the ability of directly associating a visit to a page with
the actual person that visits the page, due to factors that
introduce uncertainty [52], such as DHCP churn, NAT,
proxies, multiple users using the same browser, and other
aspects that obscure the association of a device with the
actual person behind it. Users can mitigate the effect
of these signals to their privacy by browsing through an