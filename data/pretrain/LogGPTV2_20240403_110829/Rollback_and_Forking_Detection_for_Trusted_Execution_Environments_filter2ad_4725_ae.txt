### 通过不同客户端数量的同步磁盘写入吞吐量

在图6中，我们展示了在启用同步磁盘写入的情况下，不同客户端数量下的系统吞吐量。如预期的那样，`fsync` 操作显著增加了写入磁盘时的延迟。具体来说，我们观察到 Native、SGX、LCM 和带有 TMC 的 SGX 的吞吐量保持恒定，而 Redis、SGX 和 LCM 通过批处理机制实现了扩展。SGX KVS 达到了 Native KVS 吞吐量的 0.98 倍，而 LCM（不带批处理）达到了 SGX KVS 吞吐量的 0.69 倍。相比之下，带有批处理机制的 LCM 达到了 SGX KVS 吞吐量的 0.72 倍至 9.87 倍，以及带有批处理机制的 SGX KVS 吞吐量的 0.71 倍至 0.75 倍。实验表明，昂贵的存储操作减少了由 SGX 引入的相对开销，但可以通过批处理机制进一步降低。

### F. 崩溃容错的成本

最后，我们研究了在支持崩溃容错时，由于同步磁盘写入而导致的性能开销。我们在第六部分-D 中进行了相同的实验，并为我们的 KVS 原型和 Redis 启用了 `fsync`。我们预计与异步写入相比，性能会显著下降。如图6所示，在启用同步存储的情况下，不同客户端数量下的吞吐量表现如下：正如预期的那样，`fsync` 在写入磁盘时引入了高延迟。特别是，我们观察到 Native、SGX、LCM 和带有 TMC 的 SGX 的吞吐量保持恒定，而 Redis、SGX 和带有批处理机制的 LCM 则实现了扩展。SGX KVS 达到了 Native KVS 吞吐量的 0.98 倍，而不带批处理的 LCM 达到了 SGX KVS 吞吐量的 0.69 倍。相比之下，带有批处理机制的 LCM 达到了 SGX KVS 吞吐量的 0.72 倍至 9.87 倍，以及带有批处理机制的 SGX KVS 吞吐量的 0.71 倍至 0.75 倍。该实验表明，昂贵的存储操作减少了由 SGX 引入的相对开销，但可以通过批处理机制进一步降低。

### VII. 相关工作

随着 SGX 的出现，可信计算技术在实际部署方面取得了新的进展。最近的研究详细介绍了如何在仅需信任 CPU 的基础设施上保护遗留应用程序 [4]、微服务 [2]、数据密集型编程 [34] 以及特定服务 [8]。尽管 SGX 提供了特殊的手段来检测针对 enclave 的内存重放攻击 [19]，但外部内存仍然不受保护。因此，需要额外的措施来防止通过外部内存和辅助存储器进行的回滚和分叉攻击。当 enclave 重启时（例如由于崩溃或系统维护重启），后者尤其复杂。作为实用解决方案，Windows SGX SDK [22] 提供了与 Intel 管理引擎 (ME) 内部的非易失性内存关联的可信计数器。然而，依赖于可信计数器的硬件解决方案（如 TPM 提供的）速度较慢，每项操作增加 35-95 ms 的延迟，具体取决于硬件平台 [38, 26, 29]。因此，本质上，所有依赖于可信计数器并在每次请求时查询这些计数器的硬件解决方案都存在性能问题 [14, 26, 32]。当前基于 TPM 的可信计数器实现的另一个问题是频繁使用时会磨损。Strackx 和 Piessens [38] 通过巧妙的使用策略解决了这个问题，但性能问题依然存在。

最近的工作 [29] 提出了一个补充 LCM 的方法，其中多个系统的 enclaves 协同工作以防止回滚攻击。这需要多个 enclaves 交互以从 enclaves 组中存储和检索版本信息，而在 LCM 中，这些信息存储在客户端。

另一条研究路线是在不依赖可信组件的情况下解决回滚和分叉攻击的问题。对于单个客户端，经典的内存检查方法 [5] 使用哈希树，客户端存储根节点。许多系统基于此方法来保护远程存储服务（例如 Athos [18]）。在多客户端模型中，Mazières 等人 [30] 引入了分叉线性化概念并实现了 SUNDR [27]，它将回滚攻击限制在始终呈现与每个客户端过去操作一致的视图；从而简化了对远程文件存储的完整性和一致性违规的检测。Cachin 等人 [12] 改进了 SUNDR 的效率，并证明了不存在无等待的分叉线性化存储仿真。也就是说，有时客户端会被阻塞，直到另一个客户端的操作完成。SPORC [17]、FAUST [10] 和 Venus [35] 系统通过削弱一致性保证避免了阻塞。其他系统探索了操作中止 [28, 11] 并通过减少计算和通信开销提高了效率 [7]。Mobius [13] 在断开连接的操作上下文中利用了分叉属性。先前的系统已经探索了分叉线性化在不同应用 [17, 40] 和通用服务 [11] 中的保证。

LCM 结合了这两种技术的最佳特性，即可信执行环境和协议强制的一致性。它还尽可能地解决了 TEE 上的回滚和分叉攻击问题，同时避免了给服务带来不切实际的限制。

### VIII. 结论

本研究关注了可信计算技术的一个不足之处，这一不足影响了当前的可信执行环境（如 Intel SGX）。特别地，可信执行上下文或“enclave”是无状态的，当发生崩溃时会丢失其内存，并且需要主机的支持才能保持状态连续性。但由于根据安全模型，主机也是 TEE 的对手，因此实际上无法在无缝应对崩溃的同时防止回滚攻击，而不引入额外的硬件。

作为解决方案，我们引入了轻量级集体内存（Lightweight Collective Memory, LCM），这是一种用于检测回滚和分叉攻击的系统，确保分叉线性化的一致性概念，并确定何时操作变得稳定。LCM 协议通过客户端维护一致性信息，为 TEE 技术提供了一种轻量级机制。

### 致谢

感谢 Anil Kurmus、Cecilia Boschini、Manu Drijvers、Kai Samelin、David Barrera 和 Raoul Strackx 的有趣讨论，以及 DSN 2017 匿名审稿人的宝贵意见。本研究得到了欧洲委员会通过 Horizon 2020 Framework Programme (H2020-ICT-2014-1) 的资助，项目编号为 644371 WITDOM 和 644579 ESCUDO-CLOUD，以及瑞士教育、研究和创新国务秘书处 (SERI) 的资助，合同编号为 15.0098 和 15.0087。

### 参考文献

[略]

---

希望优化后的文本更加清晰、连贯和专业。如果有任何进一步的修改需求，请随时告知！