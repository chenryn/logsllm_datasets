Currently, there are three listeners running and four agents active on
our Empire C2 server.
> We can manage the listeners from the Listeners menu:
>
> ![](media/image543.jpeg)
Similarly, the stagers can be managed and generated from the Stagers
menu:
> ![](media/image544.jpeg)
We can manage the agents from the Agents menu. This menu also contains
some extra features:
> ![](media/image545.jpeg)
>
> Once we have an active agent, we can use the supported
> post-exploitation modules from the Modules menu for post exploitation
> as shown in the following screenshot:
>
> ![](media/image546.jpeg)
The saved credentials can be viewed from the Credentials menu:
> ![](media/image547.jpeg)
We can see the logged events from the Reporting menu. Using this page,
we can trace the modules that we used in a post-exploitation scenario:
> ![](media/image548.jpeg)
>
> Go to **Listeners** and then **Show All Listeners** to list all the
> running listeners:
>
> ![](media/image549.jpeg)
>
> Currently there are three listeners running, http, Empire, and
> DeathStar:
>
> ![](media/image550.jpeg)
>
> To create a listener, we can go to **Listeners** and then **Create a
> Listener**:
>
> ![](media/image551.jpeg)
>
> This sub-menu will bring up the listener creation page. We can choose
> the type of listener to create from the **Listener Type** drop-down
> list. In this case, let\'s use the listener type **http**:
>
> ![](media/image552.jpeg)
>
> When we choose **http** as the listener type, the listener settings
> are displayed. We can add the information required and set the name:
>
> ![](media/image553.jpeg)
Everything is now ready to start the listener. Click on the **Create**
button. Empire will then create the listener and you\'ll receive a
message saying **Listener**
> \ **successfully started**:
>
> ![](media/image554.jpeg)
>
> We can now go to **Listeners** and then **Show All Listeners** to see
> the list. We can then find our newly started listener, test:
>
> ![](media/image555.jpeg)
Confirm the listener from the Empire CLI:
> ![](media/image556.jpeg)
>
> To kill a listener, we can go to **Listeners** and then **Kill
> Listener(s)**:
>
> ![](media/image557.jpeg)
A new page will be displayed, giving you the option to kill a listener.
We can choose the listener that we want to kill from the drop-down list:
> ![](media/image558.jpeg)
We then need to click on the **Kill Now** button to kill the listener:
> ![](media/image559.jpeg)
>
> Once the listener is started, we can choose a stager. To show all the
> stagers, go to
>
> **Stagers** and then **Show All Stagers**:
>
> ![](media/image560.jpeg)
>
> You can find all the supported stagers for Empire here:
>
> ![](media/image561.jpeg)
>
> To generate a stager, we can go to **Stagers** and click on **Generate
> Stager**:
>
> ![](media/image562.jpeg)
>
> The **Generate Stager** sub-menu will show the list of stagers that we
> can select. We need to click on a particular stager to bring up the
> options available for that stager:
>
> ![](media/image563.jpeg)
Once the options are set, click on the **Generate** button to generate
the stager. The web interface will show a **Stager Output** message
after generation:
> ![](media/image564.jpeg)
Click on the **Decode** button to get the one-liner command:
> ![](media/image565.jpeg)
When the stager gets executed on the target server, we will get an
active agent. To list all the agents, we can go to **Agents** and then
click on **Show All Agents**:
> ![](media/image566.jpeg)
>
> To see information about the agent, click on the **Agent Name**:
>
> ![](media/image567.jpeg)
>
> We can execute shell commands easily from the web interface. We just
> need to go to **Agents** and then **Agent Run Shell Command**:
>
> ![](media/image568.jpeg)
>
> A new page will open with two options: Task Agent to Run a Shell
> Command and Agent Output:
>
> ![](media/image569.jpeg)
>
> To execute a command, we first need to choose the agent from the
> drop-down list and then enter the command. In this case, we have used
> the id command:
>
> ![](media/image570.jpeg)
>
> Upon successful execution of the command, we will get a shell command
> executed successfully message but the output will not be shown. To
> view the output, we need to select the same agent from the drop-down
> list where we executed our command. This drop-down menu is just below
> the first drop-down menu:
>
> ![](media/image571.jpeg)
>
> The output will be displayed once the **Show Result** button is
> clicked:
>
> ![](media/image572.jpeg)
>
> We can now execute post modules on the agent. To bring up the module
> page, go to **Modules** and click on **Show All Modules**. This will
> list all the modules that are available:
>
> ![](media/image573.jpeg)
You will see the following list:
> ![](media/image574.jpeg)
>
> To execute a module, go to **Modules** and click on **Execute
> Module**:
>
> ![](media/image575.jpeg)
>
> A new page will open with a drop-down list, from which we can choose
> the module we want to execute:
>
> ![](media/image576.jpeg)
>
> In this case, we will choose the screenshot; Python module:
>
> ![](media/image577.jpeg)
>
> Clicking the **Choose** button will bring up the module options:
>
> ![](media/image578.jpeg)
>
> We need to choose the agent on which we want to run this module. The
> agent can be selected from the drop-down list of agents:
>
> ![](media/image579.jpeg)
>
> Once the options are set, we can click the **Execute Module** button
> to execute the post module. The agent will be tasked with the chosen
> module:
>
> ![](media/image580.jpeg)
>
> The module that we chose for post exploitation would take a screenshot
> of the user\'s desktop and then save and download it. We can view the
> saved screenshots from **Agents** \| **View Screenshots**:
>
> ![](media/image581.jpeg)
Clicking on **View Screenshots** will bring us to another page, from
which we can select the agent from a drop-down list. To view the result,
click the **Show Screenshots** button:
> ![](media/image582.jpeg)
>
> As we can see in the following screenshot, a screenshot of the user\'s
> desktop was saved:
>
> ![](media/image583.jpeg)
>
> The **Browser** menu shows the /var/www/html/ directory, where we can
> deploy the web interface:
>
> ![](media/image584.jpeg)
>
> The web interface makes it very easy to use Empire. There is also
> another GUI tool called **Empire-GUI**, which was officially released
> by the Empire tool\'s creators, and which can be found in the
> EmpireProject GitHub repository. This tool has been described by its
> creators as follows:
>
> *\"The Empire Multiuser GUI is a graphical interface to the Empire
> post-exploitation Framework. It was written in Electron and utilizes
> websockets (SocketIO) on the backend to support multiuser interaction.
> The main goal of this project is to enable red teams, or any other
> colour team, to work together on engagements in a more seamless and
> integrated way than using Empire as a command line tool.\"*
The only problem with using Empire-GUI is that it only works with Empire
version 3.0, which is currently in a beta testing phase.
# Summary
> In this chapter, we have covered some more advanced uses of the Empire
> tool to get access to the Domain Controller. We have also done this
> using an automated Python script called DeathStar. We then covered
> Empire\'s use through a GUI web interface. In the next chapter, we
> will cover the basics of C2 and the different architectures that can
> be used to set up the red team infrastructure.
# Questions
1.  Are there any other exploitation techniques to get access into
    > Domain Controller?
2.  What if bypassuac_eventvwr module doesn\'t work? How can we escalate
    > the privileges without this module?
3.  Will DeathStar always be able to retrieve the Domain Admin\'s
    > credentials?
4.  Is there a workaround if the mimikatz module doesn\'t work?
5.  Is it necessary to have access to domain user account for domain
    > controller enumeration?
# Further reading
> **Automating the Empire with the Death Star**:
> [https://byt3bl33d3r.github.io/automa
> ting-the-empire-with-the-death-star-getting-domain-admin-with-a-push-of-a-button.html](https://byt3bl33d3r.github.io/automating-the-empire-with-the-death-star-getting-domain-admin-with-a-push-of-a-button.html)
# Cobalt Strike - Red Team Operations
> In [Chapter 4](#getting-started-with-cobalt-strike), *Getting Started
> with Cobalt Strike*, we learned about Cobalt Strike and how to set it
> up. We also learned about its interface and its different features. In
> this chapter, we will go into more detail about this tool and learn
> about how it is used. We will cover the following topics:
>
> Cobalt Strike listener Cobalt Strike payloads Beacons
>
> Pivoting with Cobalt Strike Aggressor scripts
# Technical requirements
> **Metasploit Framework** (**MSF**) PGSQL (Postgres)
>
> Oracle Java 1.7 or latest Cobalt Strike
# Cobalt Strike listeners
> ![](media/image585.jpeg)First, start the Cobalt Strike team server and
> connect to it. Once we have the interface up and running, we will
> start a listener. A listener is a handler that handles all the
> incoming connections. To do this, go to the Cobalt Strike menu and
> choose Listeners, as shown in the following image:
>
> This will open a new window where we create a name for this listener.
> Next, we have to choose the payload. Cobalt Strike has two kinds of
> listeners:
>
> **Beacon**: Beacon**-**based listeners will listen or connect to the
> connections coming from the beacon payload. We will learn more about
> this in the later part of this chapter.
>
> **Foreign**: Foreign listeners are basically used to pass sessions to
> another instance of Cobalt Strike or even to Metasploit or Armitage.
In the new window that opens, we choose a name for our listener. We then
choose the type of payload, which in this case will be
windows/beacon_https. Next, we enter the host name and port number and
click Save:
> ![](media/image586.jpeg)
![](media/image587.jpeg)As we have a beacon payload, we will get another
alert box asking us to provide the domain name and IP address of the
system on which our team server is running. We enter this information
and click OK, as shown in the following image. We can put the IP of our
redirector as well. This will be covered in the coming chapters:
We will then see that our newly created listener is up and running:
> ![](media/image588.jpeg)
# Foreign-based listeners
> ![](media/image589.jpeg)This listener is used to pass a session to
> multiple cobalt strike instances or even to Metasploit/Armitage.
> Let\'s take a quick look at how this is done. We must already have at
> least one compromised host so that we can pass its session somewhere
> else. In the following example, we already have a connected host on
> Cobalt Strike via the beacon payload:
![](media/image590.jpeg)As we can see, we already have a connected
beacon. We now want to pass the session to Metasploit for further
exploitation. We will start Metasploit/Armitage and run a handler, as
shown in the following screenshot:
> Once the handler is running, we go to our Cobalt Strike window and
> create a new foreign listener with the IP and port on which the
> handler is running:
>
> ![](media/image591.jpeg)
>
> Once we click Save, we will see a new listener has now been created,
> as shown in the following screenshot:
>
> ![](media/image592.jpeg)
>
> To pass a session, we right-click on the host and select Spawn, as
> shown in the following screenshot:
>
> ![](media/image593.jpeg)
>
> ![](media/image594.jpeg)A new window will open to show a list of the
> currently running listeners. We can either choose from these or create
> a new one. In this case, we will choose the listener MSF and click the
> Choose button:
>
> We will see a new Meterpreter session open up in our Metasploit
> window:
>
> ![](media/image595.jpeg)
# Cobalt Strike payloads
> Cobalt Strike supports a lot of different types of attacks and allows
> you to generate payloads easily from the menu. This is a very useful
> feature when performing a red team activity because it means you
> don\'t have to spend time switching between tools to create different
> payloads for different attack types, such as spear phishing or
> drive-bys. In this section, we will look at some of the attack types
> that are provided by Cobalt Strike and how to generate a payload with
> them.
![](media/image596.jpeg)To view the different types of payloads that we
can generate from Cobalt Strike, click on Attacks from the menu, as
shown in the following screenshot:
Cobalt Strike supports payload generation for three types of attack
vectors: **Packages**, **Web Drive-Bys**, and **Spear Phishing**. Each
of these are explained in more detail below Packages:
> HTML Application: This generates an HTML application with either an
> EXE,VBA, or PowerShell-based payload. The output generated hta file
> needs to be opened on the Internet Explorer of the Victim\'s system.
>
> MS Office Macro: This option generates a VBA macro, which we can embed
> in MS Office. This is very useful as red team attacks often involve
>
> exploiting the human element to gain access to the internal networks
> of the corporation.
>
> Payload Generator: This will only generate a payload in the desired
> format and save it to a file. We need to execute the payload on a
> system manually. USB/CD AutoPlay: This package generates an
> autorun.inf that abuses the AutoPlay feature on Windows. It only runs
> on Windows XP and Vista systems.
>
> Windows Dropper: This package creates a Windows document dropper. It
> drops a document to disk, opens it, and executes a payload. We need to
> specify the document into which the payload will be embedded.
>
> Windows Executable: This is used to create an EXE or DLL-based payload
> which again needs to be deployed manually.
>
> Windows Executable(s): This generates a stageless beacon in EXE, DLL,
> or PowerShell format.
Web Drive-by:
> ![](media/image597.jpeg)
>
> Web Drive-by has the following options:
>
> Manage: Here, we can view and manage the currently deployed drive-by
> payloads.
>
> Clone Site: This can be used to clone a site. We can choose to add a
> payload manually to it later or Cobalt Strike can automatically log
> keystrokes on it.
>
> Host File: Using this option, Cobalt Strike can host a file by
> creating a web