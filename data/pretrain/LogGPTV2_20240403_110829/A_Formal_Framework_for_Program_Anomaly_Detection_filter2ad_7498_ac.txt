of the concurrently running replicas is behaving diﬀerently from its peers; N-
variant methods calculate the behavior distance among process replicas. Gao
et al. proposed a deterministic alignment model [25] and probabilistic hidden
Markov model [26] to calculate the distances.
Abstraction: existing N-variant models are FSA or probabilistic FSA equiv-
alents. The precision is limited by their program execution description based on
n-grams. This description forms a deterministic/probabilistic FSA model under-
lying the two existing N-variant methods.
5 Uniﬁcation Framework
We develop a hierarchical framework to uniformly present any program anomaly
detection method in terms of its detection capability. We identify the detection
capabilities of existing program anomaly detection methods (Sect. 4) and the
theoretical accuracy limit (Sect. 3) in our framework.
5.1 Major Precision Levels of Program Anomaly Detection
We abstract any program anomaly detection method Λ through its equivalent
abstract machine. Λ is uniﬁed according to the language LΛ corresponding to
the abstract machine. We summarize four major precision levels deﬁned in our
uniﬁed framework in Table 2. We describe them in detail below in the order of
an increasing detection capability.
L-4: Restricted Regular Language Level. The most intuitive program
anomaly detection model, which reasons events individually, e.g., a system call
with or without arguments. No event correlation is recorded or analyzed.
7 Probabilistic PDA has not been explored by the anomaly detection community.
282
X. Shu et al.
Table 2. Precision levels in our framework (from the most to the least accurate).
Precision levels Limitationa
L-1 methods
Program execution equivalent Type-1 grammars
Chomsky level
L-2 methods
First-order reasoning
Type-2 grammars
L-3 methods
Cannot pair calls and returns Type-3 grammars
Type-3 grammarsb
Individual event test
L-4 methods
aThe key feature that distinguishes this level from a level of higher pre-
cision.
bThe restricted regular language does not enforce speciﬁc adjacent events
for any event in a program trace.
An L-4 method corresponds to a restricted FSA, which accepts a simple type
of regular languages L4 that does not enforce speciﬁc adjacent elements for any
element in a string (practical program trace ¨T).
L-4 methods are the weakest detection model among the four. It is eﬀective
only when anomalous program executions can be indicated by individual events.
For example, sys open() with argument “/etc/passwd” indicates an anomaly.
A canonical example of L-4 methods is to analyze individual system events in
system logs and summarize the result through machine learning mechanisms [16].
L-3: Regular Language Level. The intermediate program anomaly detection
model, which records and veriﬁes ﬁrst-order event transitions (i.e., the relation
between a pair of adjacent events in a trace, which is an extra feature over L-4
methods) using type-3 languages (regular grammar).
An L-3 method corresponds to an FSA, which naturally describes ﬁrst-order
transitions between states. Each state can be deﬁned as one or multiple events,
e.g., a system call, n-grams of system calls. One state can be detailed using its
arguments, call-sites, etc. The formal language L3 used to describe normal traces
in an L-3 method is a type-3 language.
L-3 methods consume black-box traces. The monitoring is eﬃcient because
internal activities are not exposed. However, L-3 methods cannot take advantage
of exposed internal activities of an executing program. For example, procedure
returns cannot be veriﬁed by L-3 methods because L3 (regular grammar) cannot
pair arbitrary events in traces; L-3 methods cannot model recursions well.
Canonical L-3 methods include DFA program anomaly detection [36], n-
grams methods [23], statically built FSA [50], and FSA with call arguments [7].
L-2: Context-free Language Level. The advanced program execution model,
which veriﬁes ﬁrst-order event transitions with full knowledge (aware of any
instructions) of program internal activities in the user space.
An L-2 method corresponds to a PDA, which expands the description of an
FSA state with a stack (last in, ﬁrst out). Procedure transitions (nested call-
sites) can be stored in the stack so that L-2 methods can verify the return of each
function/library/system call. The formal language L2 used to describe normal
traces in an L-2 method is a type-2 (context-free) language.
A Formal Framework for Program Anomaly Detection
283
Gray-box or white-box traces are required to expose program internal activ-
ities (e.g., procedure transitions) so that the stack can be maintained in L-2
methods. Walking the stack when a system call occurs is an eﬃcient stack expose
technique [18]. However, the stack change between system calls is nondetermin-
istic. A more expensive approach exposes every procedure transition via code
instrumentation [30], so that the stack is deterministic.
Canonical L-2 methods include VPStatic [19], VtPath [18], and Dyck [30].
Moreover, Bhatkar et al. applied argument analysis with data-ﬂow analysis
(referred to by us as DFAD) [4], and Giﬃn et al. correlated arguments and
environmental variables with system calls (referred to by us as ESD) [28].
L-1: Context-Sensitive Language Level. The most accurate program anom-
aly detection model in theory, which veriﬁes higher-order event transitions with
full knowledge of program internal activities.
L-1 methods correspond to a higher-order PDA, which extends a PDA with
non-adjacent event correlations, e.g., induction variables.
We develop Theorem 3 showing that higher-order PDA and ˜M (Sect. 3) are
equivalent in their computation power. The proof of Theorem 2 points out ˜M
and linear bounded automaton (LBA) are equivalent. Therefore, these three are
abstract machines representing the most accurate program anomaly detection.
The formal language L1 used to describe normal traces in an L-1 method is
a type-1 (context-sensitive) language.
We formally describe an L-1 method, i.e., ˜M, in Sect. 3. Any other LBA or
˜M equivalents are also L-1 methods.
Theorem 3. L-1 methods are as precise as the target executing program.
We provide a proof sketch for Theorem 3. First, ˜M is as precise as the exe-
cuting program (Theorem 2 in Sect. 3). Next, we give the sketch of the proof
that the abstract machine of L-1 methods, i.e., a higher-order PDA, is equiva-
lent to ˜M: a higher-order PDA characterizes cross-serial dependencies [6], i.e.,
correlations between non-adjacent events. Therefore, it accepts context-sensitive
languages [53], which is type-1 languages accepted by ˜M.
Although the general context-sensitive model (higher-order PDA or ˜M)
has not been realized in the literature, Shu et al. demonstrated the construc-
tion of a constrained context-sensitive language model (co-oc in Fig. 1) [54].
The model quantitatively characterizes the co-occurrence relation among non-
adjacent function calls in a long trace. Its abstraction is the context-sensitive
language Bach [49].
Probabilistic Detection Methods and Our Hierarchy are Orthogonal.
The reason is that probabilistic models aﬀect the scope of the norm deﬁnition,
but not the precision of the detection (explained in Sect. 2.3). For instance,
a probabilistic FSA method (e.g., HMM [61,64], classiﬁcation based on n-
grams [16,46]) is an L-3 method. It cannot model recursion well because there
is no stack in the model. The precision of a probabilistic FSA method is the
same as the precision of a deterministic FSA method, except that the scope
284
X. Shu et al.
of the norm is deﬁned probabilistically. A similar analysis holds for N-variant
methods. All existing N-variant methods [25,26] are L-3 methods.
Instruction Arguments are Part of Events in T. However, argument analy-
sis does not increase the precision level of a detection method, e.g., an n-gram
approach with argument reasoning is still an L-3 approach.
Table 3. Terminology of sensitivity in program anomaly detection.
Calling context Flow
Path
Environment
Sensitive Objects Call sites
Instruction Branch
Arguments
order
dependency
conﬁgurations
Precision Levela L-4
Descriptionb
RL
aThe least precise level required to specify the sensitivity.
bThe least powerful formal language required for describing the sensitivity.
CFL
CFL
L-2
L-3
RL
L-2
RL: regular language. CFL: context-free language.
5.2 Sensitivity in a Nutshell
We describe optional properties (sensitivities) within L-1 to L-3 in our hier-
archical framework with respect to sensitivity terms introduced from program
analysis. We summarize the terminology of sensitivity in Table 3 and explain
them and their relation to our framework.
Calling Context Sensitivity concerns the call-site of a call. In other words,
it distinguishes a system/function call through diﬀerent callers or call-
sites. Calling-context-sensitive methods8 are more precise than non-calling-
context-sensitive ones because mimicked calls from incorrect call-sites are
detected.
Flow Sensitivity concerns the order of events according to control-ﬂow graphs
(CFG). Only legal control ﬂows according to program binaries can be normal,
e.g., [50]. Flow sensitive methods bring static program analysis to anomaly
detection and rule out illegal control ﬂows from the scope of the norm.
Path Sensitivity concerns the branch dependencies among the binary (in a sin-
gle CFG or cross multiple CFGs). Infeasible paths (impossibly co-occurring
basic blocks or branches) can be detected by a path-sensitive method. Full
path sensitivity requires exponential time to discover. Existing solutions
take some path-sensitive measures, e.g., Giﬃn et al. correlated less than
20 branches for a program in ESD [28].
8 Calling context sensitivity (or context sensitivity in short) in program analysis should
be distinguished from the term context-sensitive in formal languages. The latter
characterizes cross-serial dependencies in a trace, while the former identiﬁes each
event (e.g., a system call) in a trace more precisely.
A Formal Framework for Program Anomaly Detection
285
Environment Sensitivity correlates execution paths with executing envi-
ronments, e.g., arguments, conﬁgurations, environmental variables. Several
types of infeasible paths such as an executed path not speciﬁed by the cor-
responding command line argument can be detected by an environment-
sensitive method [28]. Environment sensitivity is a combination of techniques
including data-ﬂow analysis, path-sensitive analysis, etc.
6 Attack/Detection Evolution and Open Problems
In this section, we describe the evolution of program anomaly detection systems
using the precision levels in our framework. New solutions aim to achieve better
precision and eliminate mimicry attacks. We point out future research directions
from both precision and practicality perspectives.
6.1 Inevitable Mimicry Attacks
Mimicry attacks are stealthy program attacks designed to subvert program
anomaly detection systems by mimicking normal behaviors. A mimicry attack
exploits false negatives of a speciﬁc detection system Λ. The attacker constructs
a precise trace T(cid:3) (achieving the attack goal) that shares the same practical
trace ¨TΛ with a normal T to escape the detection.
The ﬁrst mimicry attack was described by Wagner and Soto [60]. They uti-
lized an FSA (regular grammar) to exploit the limited detection capability of
n-gram methods (L-3 methods). In contrast, L-2 methods, such as [18,19,30],
invalidate this type of mimicry attacks with context-free grammar descrip-
tion of program traces. However, mimicry attacks using context-free grammars,
e.g., [20,38], are developed to subvert these L-2 methods.
As program anomaly detection methods evolve from L-4 to L-1, the space for
mimicry attacks becomes limited. The functionality of mimicry attacks decreases
since the diﬀerence between an attack trace and a normal trace attenuates.
However, an attacker can always construct a mimicry attack against any real-
world program anomaly detection system. The reason is that the theoretical
limit of program anomaly detection (L-1 methods) cannot be eﬃciently reached,
i.e., ˜M described in Sect. 3 requires exponential time to build.
6.2 Evolution from L-4 to L-1
A detection system Λ1 rules out mimicry traces from a less precise
Λ2 to achieve a better detection capability. We describe the upgrade of
detection systems from a lower precision level to a higher precision level. Intu-
itively, L-3 methods improve on L-4 methods as L-3 methods analyze the order
of events. We summarize four features to upgrade an L-3 method (abstracted as
a general FSA) to L-2 and L-1 methods in Fig. 2.
1(cid:10) expanding a state horizontally (with neighbor states)
286
X. Shu et al.
Fig. 2. Four approaches for improving a basic L-3 method (FSA).
2(cid:10) describing details of states (call-sites, arguments, etc.)
3(cid:10) expanding a state vertically (using a stack)
4(cid:10) revealing relations among non-adjacent states.
The four features are not equally powerful for improving the precision of
an anomaly detection method. 1(cid:10) and 2(cid:10) are complementary features, which
do not change the major precision level of a method. 3(cid:10) introduces a stack and
upgrades an L-3 method to an L-2 method. 4(cid:10) discovers cross-serial dependencies
and establishes a context-sensitive language [53], which results in an L-1 method.
Most of the existing program anomaly detection methods can be explained
as a basic L-3 method plus one or more of these features. L-3 with 1(cid:10) yields an
n-gram method [23]. L-3 with 2(cid:10) was studied in [44]. L-3 with 3(cid:10) is a basic L-2
method. More than one feature can be added in one program anomaly detection
system. L-3 with 1(cid:10) and 2(cid:10) was studied by Sufatrio and Yap [55] and Gaurav
et al. [57]. L-3 with 2(cid:10) and 3(cid:10) was studied by Bhatkar et al. [4] and Giﬃn
et al. [28]. ˜M (described in Sect. 3) provides 3(cid:10) and 4(cid:10) as basic features. 2(cid:10) can
be added to ˜M to describe each state in more details.
6.3 Open Problems
We point out several open problems in program anomaly detection research.
Precision. As illustrated in our framework (Fig. 1), there is a gap between
the theoretical accuracy limit (the best L-1 method) and the state-of-the-art
approaches in L-2 (e.g., ESD [28]) and constrained L-1 level (e.g., co-oc [54]).
L-2 models: existing detection methods have not reached the limit of L-2
because none of them analyze the complete path sensitivity. Future solutions can
A Formal Framework for Program Anomaly Detection
287
explore a more complete set of path sensitivity to push the detection capability
of a method towards the best L-2 method.
L-1 models: higher-order relations among states can then be discovered to
upgrade an L-2 method to L-1. However, heuristics algorithms need to be devel-