title:Efficient Large Flow Detection over Arbitrary Windows: An Algorithm
Exact Outside an Ambiguity Region
author:Hao Wu and
Hsu-Chun Hsiao and
Yih-Chun Hu
Efﬁcient Large Flow Detection over Arbitrary Windows: An
Algorithm Exact Outside An Ambiguity Region
Hao Wu
University of Illinois at
Urbana-Champaign
Hsu-Chun Hsiao
Carnegie Mellon University
National Taiwan University
Yih-Chun Hu
University of Illinois at
Urbana-Champaign
ABSTRACT
Many networking and security applications can beneﬁt from
exact detection of large ﬂows over arbitrary windows (i.e.
any possible time window). Existing large ﬂow detectors
that only check the average throughput over certain time
period cannot detect bursty ﬂows and are therefore easily
fooled by attackers. However, no scalable approaches pro-
vide exact classiﬁcation in one pass. To address this chal-
lenge, we consider a new model of exactness outside an ambi-
guity region, which is deﬁned to be a range of bandwidths be-
low a high-bandwidth threshold and above a low-bandwidth
threshold. Given this new model, we propose a deterministic
algorithm, EARDet, that detects all large ﬂows (including
bursty ﬂows) and avoids false accusation against any small
ﬂows, regardless of the input traﬃc distribution. EARDet
monitors ﬂows over arbitrary time windows and is built on a
frequent items ﬁnding algorithm based on average frequency.
Despite its strong properties, EARDet has low storage over-
head regardless of input traﬃc and is surprisingly scalable
because it focuses on accurate classiﬁcation of large ﬂows
and small ﬂows only. Our evaluations conﬁrm that existing
approaches suﬀer from high error rates (e.g., misclassifying
1% of small ﬂows as large ﬂows) in the presence of large ﬂows
and bursty ﬂows, whereas EARDet can accurately detect
both at gigabit line rate using a small amount of memory
that ﬁts into on-chip SRAM.
Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Net-
work Operations—Network monitoring; C.2.0 [Computer-
Communication Networks]: General—Security and pro-
tection
Keywords
Large Flow Detection; Flow Classiﬁcation; Ambiguity
Region; Arbitrary Windows
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
IMC’14, November 5–7, 2014, Vancouver, BC, Canada.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3213-2/14/11 ...$15.00.
http://dx.doi.org/10.1145/2663716.2663724.
1.
INTRODUCTION
Being able to identify large ﬂows1 over any possible time
window (referred to as the arbitrary window model ) is of
great importance for a wide variety of networking and se-
curity applications such as traﬃc engineering, accounting,
anomaly detection, and Denial-of-Service (DoS) defense.
The arbitrary window model monitors time windows on
all time-scales, starting at each instant in time and end-
ing at the current time, and can thus detect bursty ﬂows
and outperform models that are based on ﬁxed-length win-
dows. Given the high traﬃc volumes in today’s Internet, no
scalable approaches provide exact classiﬁcation in one pass.
Thus, we consider a novel model of exactness outside a
small ambiguity region, which contains ﬂows that use band-
width between two conﬁgurable thresholds. Our model clas-
siﬁes ﬂows as either large, medium, or small. A ﬂow is de-
ﬁned to be a large ﬂow if there exists a time window in
which the bandwidth of the ﬂow exceeds the high-bandwidth
threshold. A small ﬂow is deﬁned to be a ﬂow whose vol-
ume is consistently lower than a low-bandwidth threshold
function over all arbitrary window. The rest are deﬁned as
medium ﬂows, or the ﬂows in the ambiguity region. Ex-
actness outside an ambiguity region guarantees perfect de-
tection of large ﬂows (including bursty ﬂows) and no false
accusation against any small ﬂows. This model is reason-
able because it limits the damage caused by large ﬂows and
allows existing techniques to handle the medium ﬂows sta-
tistically. Prior work [17] [16] adopts a similar concept, yet
they can only provide probabilistic bounds outside a re-
gion. The ambiguity region between the high-bandwidth
and low-bandwidth thresholds allows us to trade the level of
exactness for scalability, so that we can maintain state small
enough to ﬁt into limited on-chip memory for link-speed up-
date.
The new models of exactness and arbitrary window beneﬁt
many applications. For example:
• Detecting various DoS ﬂows: Denial-of-Service (DoS)
attacks use a combination of large attack ﬂows and
bursty attack ﬂows. Flows that are only bursty are
hard to catch due to their low average traﬃc band-
width. However, using the arbitrary window model, a
detector can instantly detect DoS attempts that use
bursty ﬂows [25].
• Bandwidth guarantees: To enforce bandwidth allo-
cation, schemes such as IntServ make impractical
1Large ﬂows are ﬂows that consume more than a threshold
amount of bandwidth. They are also called elephant ﬂows
in the literature.
209assumptions that either every router keeps per-ﬂow
state [33] or ﬁrst-hop routers are trusted to regulate
traﬃc on a per-ﬂow basis [36] on behalf of intermediate
routers [34]. Although a scalable and robust approach
was proposed [28], it causes collateral damage due to
the detection delay. Moreover, it cannot catch bursty
ﬂows. Our eﬃcient detector built upon these two new
models can help enforce bandwidth limits on ﬂows be-
cause it enables fast detection with no false accusation
on the legitimate small ﬂows and no missed detection
on large ﬂows including bursty ﬂows.
To the best of our knowledge, none of the existing algo-
rithms provide exactness outside an ambiguity region under
the arbitrary window model. Prior algorithms monitoring
average throughput (e.g., algorithms based on ﬁxed win-
dow and sliding window models) cannot detect bursty at-
tacks. For example, in a large-ﬂow detection system that
resets state and starts a new measurement interval periodi-
cally [17], a large bursty ﬂow can bypass detection by staying
lower than the threshold of throughput across this whole in-
terval, or even by deliberately spreading its burst across two
consecutive intervals. Although randomization of measure-
ment intervals can mitigate the problem of a burst spread
across a measurement interval, randomized algorithms may
be unable to provide strong deterministic guarantees.
In addition to lacking exactness and the arbitrary window
model, the storage overhead of existing algorithms may grow
unboundedly with the size of the input traﬃc in the presence
of malicious inputs. For example, an adversary can perturb
his traﬃc patterns (e.g., by varying the size and timing of
packets) so as to cause algorithmic complexity attacks [11]
because many algorithms bound their storage and compu-
tational overhead by assuming that the ﬂow sizes follow a
certain distribution, such as Zipﬁan.
To identify large ﬂows over arbitrary windows with low
storage overhead, we explore deterministic algorithms with
a new model of exactness considering a small ambiguity
region. We propose EARDet (Exact-Outside-Ambiguity-
Region Detector), a simple, eﬃcient, and no-per-ﬂow-state
large-ﬂow detector which is exact outside an ambiguity re-
gion regardless of the input traﬃc distribution. Built on
the Misra-Gries algorithm (a two-pass frequent items ﬁnd-
ing algorithm based on average frequency) [31], EARDet is
a one-pass streaming algorithm with simple operations:
it
only keeps a small array of counters which are increased or
decreased as each new packet arrives. A ﬂow is identiﬁed as
a large ﬂow if its associated counter exceeds a threshold.
Surprisingly, despite EARDet’s strong guarantees, we
show in our analysis that EARDet requires extremely small
amounts of memory that ﬁt into on-chip SRAM for line-
speed packet processing. We discuss implementation details
to further demonstrate EARDet’s eﬃciency. EARDet is
highly scalable because it focuses on the accurate classiﬁca-
tion of large and small ﬂows; unlike prior approaches, it does
not aim to estimate ﬂow volumes or identify the medium
ﬂows. In addition to our theoretical analysis, we also evalu-
ate EARDet using extensive simulations based on real traf-
ﬁc traces. We demonstrate that existing approaches suﬀer
from high error rates under DoS attacks, whereas EARDet
can eﬀectively detect large ﬂows in the face of both ﬂooding
and burst DoS attacks [22, 25].
Our main contributions are as follows.
• We propose a deterministic streaming algorithm that
is exact outside an ambiguity region regardless of the
input traﬃc. Two novel settings distinguish EARDet
from previous work:
it monitors ﬂows over arbitrary
windows, and it supports exact detection outside an
ambiguity region.
• We rigorously prove the two guarantees—catching all
large ﬂows and preventing false accusation on any
small ﬂows—without making assumptions about the
ﬂow size distribution.
• Our numerical analysis shows that EARDet can oper-
ate at 40 Gbps high-speed links using only hundreds of
bytes of on-chip SRAM, which is substantially smaller
than the memory consumption in many existing sys-
tems. We also provide guidelines on how to conﬁgure
EARDet to satisfy application-speciﬁc requirements.
• We compare EARDet with two closely related pro-
posals [16, 17] via comparative analysis and extensive
simulations based on real and synthetic traﬃc traces.
The results conﬁrm that these two are vulnerable to
attack ﬂows that manipulate the input traﬃc, while
EARDet consistently catches all large ﬂows without
misclassifying small ﬂows.
2. PROBLEM DEFINITION
Our goal is to design an eﬃcient arbitrary-window-based
algorithm which is exact outside an ambiguity region.
In
this section, we present the system model, formulate the
large ﬂow problem over arbitrary windows, and summarize
our design goals.
2.1 System Model
Flow identiﬁers.
Generally, packets are classiﬁed into
ﬂows based on the ﬂow identiﬁers (or ﬂow IDs) derived from
the packet header ﬁelds.2 Because our approach to large-
ﬂow detection is generic, we make no assumption on the
deﬁnition of ﬂow IDs. As in prior traﬃc monitoring work,
we assume ﬂow IDs are unforgeable, which is achievable by
ingress ﬁltering [19] and source authentication [4, 24, 27, 32].
Packet streams.
Let X be the packet space. We con-
sider a packet stream X = hx1, · · · , xki coming through a
link of capacity ρ, where xi ∈ X ∀i = 1 · · · k. Packets in
X are processed in sequence by a detection algorithm for
identifying large ﬂows. The algorithm can only make one
pass over the packet stream due to the high link capacity
and limited memory.
For a packet x, we denote by time(x) the time at which
the detection algorithm observes the packet, by size(x) the
size of the packet, and by ﬁd(x) the ﬂow ID of the packet.
The traﬃc volume of a ﬂow f during a time window [t1, t2) is
deﬁned as vol(f, t1, t2) , Px∈X ,ﬁd(x)=f,t1≤time(x) s ≥ 0 →  
flow B is a large flow over [10, 50) and can be detected
Figure 1: In this example, a ﬂow is large if it sends
more than 40M bps · w + 500kb for any time window of
size w. Although ﬂow B violates the limit over the
time window [10, 50), it can only be caught in the
arbitrary window model.
ID, size, and arrival time. Formally, a large-ﬂow detection
algorithm supports three operations over a synopsis S:
• Init(params) → S0. The initialization operation takes
as inputs the large-ﬂow deﬁnitions and desired detec-
tion accuracy, etc.
• Update(Si−1, xi) → Si. The update operation out-
puts an updated synopsis Si by incorporating the
new packet xi into the previous synopsis Si−1. For
convenience, we denote Update(Si, hxi+1, · · · , xi+ji) =
Update(Si+1, hxi+2, · · · , xi+ji) = Si+j.
• Detect(Si, xi) → b ∈ {0, 1}. The detection operation
evaluates Si to determine if xi belongs to a large ﬂow.
Prior approaches to large-ﬂow
Time window models.
detection can be classiﬁed into three main categories based
on the type of time window they monitor:
landmark win-
dow [10, 14, 17, 18, 23, 29–31], sliding window [5, 21, 26], and
arbitrary window [16].
In the landmark window model, each time window starts
at the closest landmark in the past (e.g., a landmark is
placed every ﬁve seconds) and ends at the current time. In
the sliding window model, recent traﬃc is considered more
important than old traﬃc, so the time window begins at
some recent time in the past. The window slides as new
packets arrive, such that the measurement incorporates the
new packets and excludes the oldest packets. Finally, the ar-
bitrary window model monitors every time window ending
at the current time. It is more diﬃcult to evade detection in
this model than in others, as illustrated in Figure 1. Note
that while the arbitrary window model covers every possi-
ble window, ﬂows can still evade detection if the detection
algorithm is inaccurate.
Detection Algorithm
Report
xi+2
xi+1
xi
Incoming Packet Stream
Report
Limited
Memory
Figure 2: A general framework for a large-ﬂow-
detection algorithm. The detection algorithm pro-
cesses incoming ﬂows and keeps limited state in
memory. Results may be reported to a remote
server for further analysis.
THℓ(t) = γℓt + βℓ, where γh > γℓ > 0 and βh > βℓ > 0.3 Al-
though selecting appropriate parameters largely depends on
the targeted application, we provide guidelines for selecting
these parameters in Section 4.
Exact-outside-ambiguity-region large-ﬂow problem.
As exact solutions are ineﬃcient, we consider a relaxed no-
tion of exactness:
Definition 1. Given a packet stream, the exact-outside-
ambiguity-region large-ﬂow problem returns a set of ﬂows F
such that (1) F contains every large ﬂow, and (2) F does
not contain any small ﬂow.
Because the number of large ﬂows can increase indeﬁnitely
over time, F may become too large to ﬁt into the limited
on-chip memory. Hence, such an algorithm often reports to
a remote server with mass storage that keeps a complete
copy of F , as illustrated in Figure 2. The algorithm must
therefore operate correctly even without a complete copy of
F .
A positive is when a ﬂow is added to F , and a negative
is when a ﬂow is not added to F . Hence, a False Positive
of small ﬂow (FPs) occurs when the detection algorithm
wrongly adds a small ﬂow, and a False Negative of large
ﬂow (FNℓ) occurs when it fails to include a large ﬂow.
The exact-outside-ambiguity-region large-ﬂow problem is
reasonable for two reasons: (1) It conﬁnes the damage by
large ﬂows and allows existing techniques (e.g., Sample and
Hold [17]) to handle the medium ﬂows statistically. (2) Prior
work [17] [16] also involves a region similar to our ambiguity
region, but they only provide probabilistic bounds outside
the region.
2.3 Design Goals
2.2 Large-Flow Problem Over Arbitrary
Our main goals are as follows:
Windows
Small, medium, and large ﬂows.
A ﬂow f is a large
ﬂow if there exists a time window [t1, t2) over which its vol-
ume vol(f, t1, t2) exceeds a high-bandwidth threshold func-
tion THh(t2 − t1). A ﬂow is a small ﬂow if its volume
vol(f, t1, t2) is lower than a low-bandwidth threshold func-
tion THℓ(t2 − t1) over all possible time windows [t1, t2). The
rest are deﬁned as medium ﬂows, i.e. ﬂows in an ambiguity
region.
In this paper we deﬁne the two threshold functions in the
form of leaky bucket descriptors: THh(t) = γht + βh and
Exactness outside an ambiguity region.
To achieve
exactness outside an ambiguity region in traﬃc monitoring,
we desire a deterministic monitor algorithm which identi-
ﬁes every large ﬂow including bursty ﬂow (i.e., no FNℓ)and
3Instead of using leaky bucket descriptors, prior work in the
landmark window model often deﬁnes the high-bandwidth
threshold to be a fraction of the link bandwidth, e.g.,
γh = 0.01 and βh = 0. However, it is infeasible to adopt
this fraction-based deﬁnition when it comes to the arbitrary
window model because every ﬂow will violate the threshold
over a suﬃciently small time window (e.g., a window con-
taining only one packet).
211protects every small ﬂow (i.e., no FPs) with no assump-
tion on the input traﬃc or attack pattern. Hence, the high-
bandwidth and low-bandwidth thresholds are also called the
no-FNℓ and no-FPs thresholds in this paper, respectively.
Scalability.
Although using per-ﬂow leaky buckets en-
ables exact and instantaneous detection of large ﬂows, keep-
ing per-ﬂow state is impractical due to the large number
of ﬂows in the Internet. Hence, the algorithm should re-
quire few per-packet operations and maintain small router
state that ﬁts in fast yet scarce storage devices (e.g., on-chip
SRAM or even registers) regardless of input traﬃc or attack
pattern, such that the detection algorithm can operate at
line rate.
Fast detection.