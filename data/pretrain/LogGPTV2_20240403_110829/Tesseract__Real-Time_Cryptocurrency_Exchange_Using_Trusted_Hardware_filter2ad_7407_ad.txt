the Tesseract platform protects
against false remote attestation by attaching a secondary
signature – created by the administrator of the platform
– to the attested data. Following the above example,
the users of X1 (resp. X2) will take into consideration
the reputation of the administrator of X1 (resp. X2),
and reject the attested data unless it was signed both
by the SGX CPU and by the reputable administrator.
This means that
the hardware manufacturer alone
cannot attack all Tesseract-based exchanges, since the
manufacturer has to collude with the administrator of
an exchange in order to create a fraudulent attestation.
This implies that Tesseract is strictly more secure than
centralized exchanges.
is
the
secondary signature
The double attestation mechanism is also efﬁcient,
since
rarely needed.
Speciﬁcally, the secondary signature is required only
once for the identity public key of the enclave (which is
the hardware-associated public key of Section 6.1), and
this identity can then establish the TLS channel with
each user. All further communication in a TLS channel
(e.g., bid/ask orders) is done without attestation. For
non-user-speciﬁc data such as real-time updates to the
public order book, the secondary signature is already
implicit if HTTPS is used to view this data.
5 Atomic Cross-Chain Settlements
Assume ﬁrst that Tesseract only supports the trading
of digital assets (cf. Section 8) that circulate within a
single cryptocurrency.
In this case, the publication of
each settlement transaction — that reﬂects the account
balances of the users after trading in a time period —
does not entail the risk of an adversary stealing funds
from honest users. The reason is that an invalid deposit
(see Section 4.1) or blockage of the settlement will
amount just to a DoS attack, since all the users will
claim their prior funds after the time limit in the output of
10
Bob300000 LTCBob1000 BTCCarol2 BTCDave1 BTCDave300 LTCAlice300000 LTCCarol300 LTCTX1TX2Bitcoin transactionLitecoin transactionAlice1000 BTCCarol3 BTC2
,U out
Deﬁnition 2 (Unprivileged settlement). Let U in
1 ,U in
2
denote the sets of users in the inputs of the transactions
tx1,tx2, and let U out
denote the sets of users in
1
1 ∪U out
the outputs of tx1,tx2. Let U = U in
.
An unprivileged cross-chain settlement is a protocol that
satisﬁes Deﬁnition 1 in the presence of an adversary
A who can obtain any information that every user P ∈
U accesses, at the moment that the information was
accessed.
2 ∪U out
1 ∪U in
2
In essence, Deﬁnition 2 implies that honest traders
cannot utilize secret data during the settlement protocol
(such as picking a secret x ∈ {0,1}λ in the ﬁrst step
of the ACCS protocol in Section 2), because A could
break the security by gaining access to any sensitive data
that honest traders attempt to use. Thus, Deﬁnition 2
captures a rushing adversary who has physical control
over the SGX server and can intercept all the data that
leaves the CPU, before honest users have an opportunity
to make use of this data in a secure fashion. Note that
Deﬁnition 2 does not permit A to observe the secret keys
that enable honest users to spend their funds, as long as
honest users do not access their secret keys during the
settlement protocol.
In fact, Deﬁnition 2 gives A more power than a real-
world adversary with physical control over the SGX
server. Consider for instance a protocol where in the
ﬁrst step the enclave encrypts data using Carol’s public
key, and attempts to send the encrypted data to Carol
In that case, A will not be able
over the network.
to obtain the data that Carol accesses; the only action
available to A is to mount a DoS attack and not let
the protocol make progress. The motivation for the
more conservative deﬁnition is that we wish to support
settlement transactions among a large number of users
(e.g., thousands) and multiple cryptocurrency systems,
where the users can be anonymous and can create Sybil
accounts. In this setting, it is difﬁcult to design a secure
protocol that sends sensitive data to rational users (with
the expectation that they will act in their own self-
interest), due to the possibility of malicious coalitions
with Sybils who would be willing to sacriﬁce some
of their funds. For this reason, Deﬁnition 2 denies
the enclave the power to communicate privately with
individual users.
Thus,
to the
intricate
solutions
all-or-nothing
settlement problem are needed mainly because our goal
is to support many anonymous traders. Let us in fact
demonstrate that with a few users, the all-or-nothing
settlement problem can become easy. In Figure 7, Alice
and Bob again wish to trade $2 million worth of BTC
for LTC, but they are the only users of the Tesseract
exchange. Here, the enclave prepares the settlement
transactions TX1, TX2 that keep the enclave in control
in the next two weeks (2000 blocks where T1 is the head
Figure 7: Settlement with two parties.
of the Bitcoin blockchain, and 8000 blocks where T2 is
the head of the Litecoin blockchain). This enables Alice
and Bob to continue to trade, if they wish to. The secret
data x ∈ {0,1}λ is generated inside the enclave. After
the enclave receives evidence that TX1 and TX2 are both
conﬁrmed, it sends x in encrypted form only to Alice,
over a secure channel. After the two weeks, the outputs
can be redeemed using x, otherwise the timeouts allow
the funds to be returned to each user. As with the ACCS
protocol (cf. Section 2), the timeout in TX1 is longer,
so Bob will have enough time to redeem the 1000 BTC
after Alice reveals x, spending 300000 LTC.
Let us note that Deﬁnition 2 does not give A the
power to observe secret information inside the enclave.
In the Tesseract implementation, this is justiﬁed because
we use a constant-time constant-memory library for
cryptographic operations [83], reducing the potential for
side-channels greatly.
We now present solutions to the all-or-nothing
involves many
in a setting that
settlement problem,
anonymous traders.
5.1 Naive Protocols
To clarify why an intricate protocol is needed, we ﬁrst
describe a simple protocol Πsimp that relies on N extra
servers S1,S2, . . . ,SN that are supposedly reputable. See
Figure 8.
The cryptocurrency systems C1 and C2 can be for
example Bitcoin and Litecoin as in Figure 6. The
embedding of K into TX1 and TX2 can be done with the
OP RETURN script instruction [8], which allows storing
arbitrary data on the blockchain as an unspendable output
(for a small fee). It is not possible to mount a malleability
attack that removes K from TX1 or TX2, because
the signatures for TX1 and TX2 are over the entire
transaction data (i.e., data that includes the OP RETURN
output).
Since information that is published on a blockchain
11
Bob300000 LTCTX1TX2Bitcoin transactionLitecoin transactionAlice1000 BTC   if block# > T1 + 2000 + 200     sigverify PKA   else if block# > T1 + 2000     (sigverify PKB) AND (x: hash(x)=Y)   else     sigverify PKSGXBTC---------------------------------------   amount: 1000 BTC   if block# > T2 + 4·(2000 + 100)     sigverify PKB   else if block# > T2 + 4·2000     (sigverify PKA) AND (x: hash(x)=Y)   else     sigverify PKSGXLTC---------------------------------------   amount: 300000 LTCProtocol Πsimp
1. The enclave picks a symmetric key K ∈ {0,1}λ .
2. The enclave embeds K into TX1, TX2.
3. The enclave sends ct = encryptK(TX1, TX2) to
S1,S2, . . . ,SN.
4. The enclave waits for acknowledgements from
S1,S2, . . . ,SN.
5. The enclave broadcasts TX1 to C1 and TX2 to C2.
6. Each S j that sees TXi but not TX3−i will fetch K
from TXi, decrypt ct, and broadcast TX3−i to C3−i.
Figure 8: Naive protocol for fair settlement.
If
becomes publicly available, the idea behind Πsimp is that
any non-corrupt server Si will be able to impose fairness
by fetching K from a public blockchain and decrypting
the ciphertext ct, because ct is already in Si’s possession.
Unfortunately, Πsimp is insecure, due to a race
condition. The adversary A can intercept both TX1 and
TX2, but broadcast neither of them initially. Since the
users’ outputs must have a time limit (see Section 4),
A will wait until an input (that belongs to a corrupt
user Pj) in TXi is about to expire, and then broadcast
TX3−i. Then, A will instruct Pj to spend that input,
thereby invalidating TXi. Hence, even if all of the servers
S1,S2, . . . ,SN are honest, they may not have enough time
to fetch K from TX3−i and broadcast the decrypted TXi.
systems C1,C2
allowed
transactions to embed large arbitrary data,
then it
would have also been possible to eliminate the reliance
on S1,S2, . . . ,SN. Brieﬂy, each TXi will embed the
TX3−i data in a designated output,
the enclave will
broadcast both TX1 and TX2, and any user would then
have the opportunity to enforce fairness. This would
bloat Ci with the entire TX3−i data, which is undesirable
— there are risks associated with a popular decentralized
cryptocurrency that allows embedding of large data (e.g.,
illegal content). In any event, this approach is insecure
due to the same race condition that Πsimp exhibits.
cryptocurrency
the
In the following section, we give a theoretical protocol
Πtheo that avoids the race condition, using scripts with
PoW-based logic that ensures the occurrence of certain
conditions on another blockchain.
5.2 Theoretical Protocol
Let us present a theoretical protocol for the all-or-nothing
settlement problem, which solves the race condition
that Section 5.1 elaborates upon. Following Section 5
and Figure 6, we condition the second settlement
12
Functionality RMIT (refundable multi-input transaction)
Notation: let C be a cryptocurrency system.
Upon
({in1, . . . ,ink},{out1, . . . ,outn},φ1,φ2)
1. Verify ∀ j ∈ [k] : in j
is unspent in C.
receiving
tx
=
• If the veriﬁcation failed then abort.
2. Verify ∑k
j=1 amount(in j) ≥ ∑n
j=1 amount(out j).
• If the veriﬁcation failed then abort.
3. Make {in1, . . . ,ink} unspendable in C.
4. Wait to receive a witness w
(a) If φ1(w) = 1 then commit {out1, . . . ,outn} to
C, and terminate.
(b) If φ2(w) = 1 then make {in1, . . . ,ink}
spendable in C, and terminate.
(c) Otherwise, return to Step 4.
Figure 9: The ideal functionality RMIT.
transaction TX2 on the result of the ﬁrst settlement
transaction TX1, by constraining TX2 with PoW-based
predicates that verify certain events’ occurences on
another blockchain.
As we will see, this approach is problematic with
the current Bitcoin protocol. Thus, we ﬁrst describe
the settlement protocol in an hybrid world that has
an ideal “refundable multi-input transaction” (RMIT)
functionality, deﬁned in Figure 9.
1,φ(cid:48)
The description of TX1, TX2 is outlined in Figure 10.
We use the notation TXi, j
to denote that TXi was
updated by supplying w that satisﬁed φ j. The secrets
x1 ∈ {0,1}λ ,x2 ∈ {0,1}λ are generated inside the
enclave. The predicates φ(cid:48)
2 are speciﬁed in Figure 11.
To elaborate, the hardcoded parameter D0 speciﬁes a
difﬁculty level for PoW mining, (cid:96)1 is an upper bound
on the length of an authentication path of a Merkle tree,
and (cid:96)2 is a PoW conﬁdence parameter. The input witness
w for φ(cid:48)
1 consists of up to (cid:96)1 sibling hash values v j in the
authentication path (with direction d j ∈ {’L’,’R’}) for the
leaf transaction y, together with exactly (cid:96)2 block headers
H1,H2, . . . ,H(cid:96)2. The predicate φ(cid:48)
1 will verify that TX1,1
is in a leaf that reaches some root value r, and that r
is extended by valid proofs of work H1,H2, . . . ,H(cid:96)2 that
meet the difﬁculty level D0. The input witness w for φ(cid:48)
2
does the same, but also veriﬁes that there is a valid PoW
chain of at least (cid:96)3 blocks between the hardcoded b1 and
TX1,2.
We describe the theoretical protocol Πtheo for all-or-
nothing settlement in Figure 12. Note that the enclave
Predicate φ(cid:48)
1
Hardcoded parameters: TX1,D0, (cid:96)1, (cid:96)2
Input: w = ((v1,d1), (v2,d2), . . . , (vk,dk),y,H1,H2, . . . ,H(cid:96)2 )
1. Embed hash(TX1,1) into y
2. For j = 1 to min(k, (cid:96)1)
• If d j = ’L’ then y := hash(y,v j) else y :=
hash(v j,y)
3. For j = 1 to (cid:96)2
• Embed y into Hj and compute y := hash(Hj)
• If y > D0 then return false
4. return true
Predicate φ(cid:48)
2
Hardcoded parameters: TX1,D0, (cid:96)1, (cid:96)2, (cid:96)3,b1
Input: w = (G1, . . . ,Gn, (v1,d1), . . . , (vk,dk),y,H1, . . . ,H(cid:96)2 )
1. z := b1
2. For j = 1 to max(n, (cid:96)3)
• Embed z into G j and compute z := hash(G j)
• If z > D0 then return false
3. Embed hash(TX1,2) into y
4. For j = 1 to min(k, (cid:96)1)
• If d j = ’L’ then y := hash(y,v j) else y :=
hash(v j,y)
5. Embed y into H1 and compute y := hash(H1)
6. If y (cid:54)= z then return false
7. For j = 2 to (cid:96)2
• Embed y into Hj and compute y := hash(Hj)
• If y > D0 then return false
8. return true
Figure 11: The cryptocurrency scripts φ(cid:48)
1,φ(cid:48)
2.
of blocks that A creates during the time that the honest
miners are creating T1 blocks. This corresponds to the
head start, because these T1 blocks will not contribute to
the witness that the predicate φ(cid:48)
2 requires. The second
negative binomial variable counts the number of blocks
that A creates while the honest miners are creating (cid:96)2
If A can extend her head start to reach (cid:96)2 or
blocks.
more blocks before the honest miners, then the attack
succeeds.
In Table 3, we give exemplary ﬁgures for the attack on
Πtheo. For easy comparison, we also include the success
probability without a head start (i.e., T1 = 0), which is
Figure 10: Theoretical fair settlement transactions.
constructs TX2 only after it receives the evidence that
TX1 was conﬁrmed in the end of Step 1, by hardcoding
b1 as the hash of the block in which TX1 resides.
Essentially, Πtheo avoids the race condition by
ﬁrst making sure that TX1 was resolved on the
cryptocurrency system C1 either by committing the
output or by committing the inputs, and then allowing
TX2 to commit accordingly in the cryptocurrency system
C2. If A carries out a DoS attack before x1 is released in
Step 3, then the users will gain possession of their inputs
in the C1 after block T0 is reached (see Figure 10), which
would be followed by the miners of C1 starting to create
a witness w that satisﬁes φ(cid:48)
2(w) = 1 and thus allowing
the users to gain possession of their inputs in C2. If the
enclave exposes x1 in Step 3, then it is still the case that
the miners of C1 will be harnessed to resolve TX1 in one
of the two possible ways.
In the case that no attack is taking place, the enclave
will release x2 in Step 4, thereby allowing the settlement
to complete quickly and without asking the miners of C2
to evaluate a complex condition that relates to another
blockchain.
However, the assumption regarding the computational
power of A has to be slightly less conservative in
comparison to the power that is needed to mount a
classical double-spending attack [68], because Πtheo
enables A to gain a minor head start that depends on the
parameter T0. Speciﬁcally, A can intercept x1 in Step 3
and use her own computational power (and x1) to create a
hidden chain w1 that spends TX1 into TX1,1. The miners
of C1 will create the witness w2 in which TX1 is spent
into TX1,2, but they will only begin to work on w2 after
block T0 is reached.
The success probability of an attack with a duration of
(cid:16)
T1 blocks for the head start is
∞
∑
(cid:17)
.