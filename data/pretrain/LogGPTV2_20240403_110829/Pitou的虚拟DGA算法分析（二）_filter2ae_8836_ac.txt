                }
                else
                {
                  counter_ = domain_nr;
                }
              }
              else
              {
                ++random_numbers;
                v15 = (v41 > v52);
                v16 = v52;
                counter_ = domain_nr;
                addr_random_numbers = (addr_random_numbers + 1);
                *(addr_random_numbers - 1) = v15 * (*(&magic_number + v16) >> 4) * (domain_nr + 1);
              }
            }
            else
            {
              v31 = v52;
              v32 = v52;
              counter_ = domain_nr;
              ++random_numbers;
              addr_random_numbers = (addr_random_numbers + 1);
              *(addr_random_numbers - 1) = (*(&magic_number + v31) & 0xF) * (retaddr > 4) * (retaddr >> v64) * (domain_nr + 1);
          }
        }
        while ( random_numbers  0 )
        {
          while ( 1 )
          {
            v34 = j;
            j = (j + 1);
            v35 = *(&the_random_numbers + v34);
            if ( (v35 & 0x80u) == 0 )
              break;
            *(++domain - 1) = *(consonants + (v35 % 21));
            if ( j >= domain_length )
              goto append_tld;
            v36 = j;
            j = (j + 1);
            *(++domain - 1) = *(vowels + (*(&the_random_numbers + v36) % 5));
            if ( j >= domain_length )
              goto append_tld;
            r = *(&the_random_numbers + j);
            LOBYTE(r) = r & 64;
            if ( r )
            {
              *(++domain - 1) = *(vowels + (r % 5));
    _addr_FFFFF880058745FC:
              j = (j + 1);
            }
            if ( j >= domain_length )
              goto append_tld;
          }
          *domain = *(vowels + (v35 % 5));
          domain += 2;
          *(domain - 1) = *(consonants + (*(&the_random_numbers + j) % 21));
          goto _addr_FFFFF880058745FC;
        }
      }
    append_tld:
      *domain = '.';
      tld = *&tld_array[8 * ((counter_ ^ round_seed_to_nearset_10 ^ 0xDAFE02C) % 9) - 49];
      dmtld = domain - tld;
      do
      {
        result = *tld;
        tld = (tld + 1);
        *(tld + dmtld) = result;
      }
      while ( result );
      return result;
    }
**种子**
种子的主要部分在函数days_since_epoch中。种子值与域名计数器相结合，并且存在一个为10天的间隔：
      days_since_1970_broken = days_since_epoch(months, year, days);
      ...
      seed_value = domain_nr / 3 + days_since_1970_broken;
      ...
      round_seed_to_nearset_10 = 10 * (seed_value / 10);
      seed_value = round_seed_to_nearset_10;
大多数情况下，种子会保持10天不变。从纪元开始到目前的天数计算错误并不重要，这个值只用于播种，并且每天都会更换。这种情况几乎适用于所有的日子，除了少数边缘情况，这时，两天会有相同的种子（例如2019年1月29日和2019年2月1日返回相同的值）。错误的计算还可以缩短或延长10天的窗口。最长的窗口是13天，1月底的时候会发生，例如：2019-01-23到2019-02-04。2月底的窗口最短，之有7天的窗口：2019-02-25到2019-03-03。在极少数情况下，窗口仅为1天，下一次将在2025年01月31日发生。
种子也使用一个魔法数字：
      magic_number = 0xDAFE02C;
根据F-Secure，这意味着Pitou版本为33。它们将0xDAFE02D作为版本31的第二个种子。
**加密的字符串**
DGA使用三个加密的字符串： 元音、辅音和顶级域。DGA在运行时首先对这些字符串进行解密。加密是用一个四个字节密钥的滚动异或，每次循环根据key =
(key>1)进行更新：
    if ( !*pConsonants )
      {
        consonants = (ExAllocatePool)(&v72, domain, 23LL, 0LL);
        *pConsonants = consonants;
        if ( decrypt_consonants )
        {
          key = 0x3365841C;
          key_index = 0LL;
          addr_encrypted_consonants = &encrypted_consonants;
          do
          {
            key_index_1 = key_index;
            ++consonants;
            ++addr_encrypted_consonants;
            key_byte = *(&key + key_index);
            *(consonants - 1) = *(addr_encrypted_consonants - 1) ^ *(&key + key_index);
            key_index = (key_index + 1) & 0x80000003;
            *(&key + key_index_1) = 2 * key_byte ^ (key_byte >> 1);
            if ( key_index > domain_nr) * (domain_nr - 1)) * round_seed_to_nearset_10;
      LOBYTE(v39) = (v39 & 1) + 8;
      domain_length = v39;
这将导致二级域的长度为8到9。
**随机数**
种子被转换成随机数。种子被视为一个16位的值，它被分成4个4位的值。然后使用这些值生成组成域名的字母。由于种子中更重要的位变化较慢，所以域名中位于3、4和7、8位置的字母变化的更加频繁。例如，这些是2019年6月1日、6月10日和6月20日的域名：
    zuoezaxa.name
    zuopabma.org
    zuojabba.mobi
为什么字符会出现在域名zuoezaxa.name中呢？Pitou有一个严重的问题。即使选择二级域的长度为9个字符，但其只能计算8个随机数。所以第9个字符是从未定义的内存中读取的。这意味着二级域的最后一个字符是不确定的。只有长度为8
的二级域的域名是有效的。
**所使用字母**
两个数组提供组成二级域的字母：元音数组（aeiou）和辅音数组（bcdfghjklmnpqrstvwxyz）。这使得组成的域名看起来更自然。
**使用的顶级域**
顶级域也是从一组硬编码列表中选择：com, org, biz, net, info, mobi, us, name, me。
**Python重新实现**
这个DGA非常混乱，即使使用Python重新实现也很难读懂。
    import argparse
    from datetime import date, datetime, timedelta
    from calendar import monthrange
    def date2seed(d):
        year_prime = d.year
        month_prime = (d.month + 1) 
        day_prime = d.day
        if month_prime > 12:
            month_prime -= 12
            year_prime += 1
        _, monthdays = monthrange(year_prime, month_prime) 
        if day_prime > monthdays:
            month_prime += 1
            day_prime -= monthdays
        if month_prime > 12:
            month_prime -= 12
            year_prime += 1
        date_prime = date(year_prime, month_prime, day_prime)
        epoch = datetime.strptime("1970-01-01", "%Y-%m-%d").date()
        return (date_prime - epoch).days
    def dga(year, seed, counter, magic):
        seed_value = 10*( (counter//3 + seed) // 10)
        year_since = year - 1900
        random_numbers = []
        a = (magic >> counter) 
        b = (counter - 1) & 0xFF
        d = a*b & 0xFF
        e = d*seed_value 
        sld_length = 8 + (e & 1)
        magic_list = []
        for i in range(4):
            magic_list.append((magic >> (i*8)) & 0xFF)
        for i in range(8):
            imod = i % 4
            idiv = i // 4
            b1 = (seed_value >> 8) & 0xFF
            b0 = seed_value & 0xFF
            if imod == 0:
                m = magic_list[idiv] >> 4
                f = (year_since >> idiv)
            elif imod == 1:
                m = magic_list[idiv] & 0xF 
                f = (year_since > 4
                f = (b1 > idiv)
            elif imod == 3:
                m = magic_list[idiv] & 0xF
                f = (b0 > idiv)
            cp = (counter + 1)