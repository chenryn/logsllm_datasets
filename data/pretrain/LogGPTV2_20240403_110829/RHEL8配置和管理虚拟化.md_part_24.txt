     .gitconfig          /home/VirtualMachines/.gitconfig          file   167.00 B    4.00 KiB
     RHEL8_Volume.qcow2  /home/VirtualMachines/RHEL8_Volume.qcow2  file  60.00 GiB   13.93 GiB
    ```
2.  使用 `virsh vol-info`{.literal} 命令列出指定存储池中的存储卷。
    ``` literallayout
    # vol-info --pool RHEL8-Storage-Pool --vol RHEL8_Volume.qcow2
    Name:           RHEL8_Volume.qcow2
    Type:           file
    Capacity:       60.00 GiB
    Allocation:     13.93 GiB
    ```
:::
:::
:::
::: section
::: titlepage
# []{#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-storage-for-virtual-machines-using-the-cli_managing-storage-for-virtual-machines}使用 CLI 为虚拟机创建和分配存储池 {.title}
:::
您可以从可用的存储介质创建一个或多个存储池。有关支持的存储池类型列表，请参阅
[支持的存储池类型](#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#ref_supported-and-unsupported-storage-pool-types_understanding-virtual-machine-storage "支持和不支持的存储池类型"){.link}。
::: itemizedlist
-   若要创建永久存储池，可使用 `virsh pool-define-as`{.literal} 和
    `virsh pool-define`{.literal} 命令。
    `virsh pool-define-as`{.literal}
    命令在命令行中放置选项。`virsh pool-define`{.literal}
    命令为池选项使用 XML 文件。
-   要创建临时存储池，请使用 `virsh pool-create`{.literal} 和
    `virsh pool-create-as`{.literal} 命令。
    `virsh pool-create-as`{.literal}
    命令在命令行中放置选项。`virsh pool-create`{.literal} 命令使用 XML
    文件作为池选项。
:::
以下小节提供有关使用 CLI 创建和分配各种存储池的信息：
::: section
::: titlepage
## []{#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-directory-based-storage-pools-using-the-cli_creating-storage-for-virtual-machines-using-the-cli}使用 CLI 创建基于目录的存储池 {.title}
:::
基于目录的存储池基于现有挂载的文件系统中的目录。例如，当您想要将文件系统上的剩余空间用于其他用途时，这非常有用。您可以使用
`virsh`{.literal} 实用程序创建基于目录的存储池。
::: itemizedlist
**先决条件**
-   确定您的管理程序支持目录存储池：
    ``` literallayout
    # virsh pool-capabilities | grep "'dir' supported='yes'"
    ```
    如果命令显示任何输出结果，则代表支持目录池。
:::
::: orderedlist
**流程**
1.  [**创建存储池**]{.strong}
    使用 `virsh pool-define-as`{.literal}
    命令定义和创建目录类型存储池。例如，创建名为
    `guest_images_dir`{.literal} 的存储池，它使用
    [**/guest_images**]{.strong} 目录：
    ``` literallayout
    # virsh pool-define-as guest_images_dir dir --target "/guest_images"
    Pool guest_images_dir defined
    ```
    如果您已经有要创建的存储池的 XML 配置，也可以根据 XML
    定义池。详情请查看
    ["基于目录的存储池参数"一节](#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#directory-based-storage-pool-parameters_assembly_parameters-for-creating-storage-pools "基于目录的存储池参数"){.xref}。
2.  [**创建存储池目标路径**]{.strong}
    使用 `virsh pool-build`{.literal}
    命令，为预格式化文件系统存储池创建存储池目标路径，初始化存储源设备，以及定义数据格式。
    ``` literallayout
    # virsh pool-build guest_images_dir
      Pool guest_images_dir built
    # ls -la /guest_images
      total 8
      drwx------.  2 root root 4096 May 31 19:38 .
      dr-xr-xr-x. 25 root root 4096 May 31 19:38 ..
    ```
3.  [**验证是否已创建池**]{.strong}
    使用 `virsh pool-list`{.literal} 命令，验证池是否已创建好。
    ``` literallayout
    # virsh pool-list --all
      Name                 State      Autostart
      -----------------------------------------
      default              active     yes
      guest_images_dir     inactive   no
    ```
4.  [**启动存储池**]{.strong}
    使用 `virsh pool-start`{.literal} 命令挂载存储池。
    ``` literallayout
    # virsh pool-start guest_images_dir
      Pool guest_images_dir started
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `virsh pool-start`{.literal}
    命令仅适用于持久性存储池。临时存储池创建时会自动启动。
    :::
5.  [**\[可选\]自动启动过程**]{.strong}
    默认情况下，通过 `virsh`{.literal} 命令定义的存储池不会设置为每次
    libvirtd 启动时自动启动。使用 `virsh pool-autostart`{.literal}
    命令将存储池配置为自动启动。
    ``` literallayout
    # virsh pool-autostart guest_images_dir
      Pool guest_images_dir marked as autostarted
    ```
:::
::: itemizedlist
**验证**
-   使用 `virsh pool-info`{.literal} 命令验证存储池是否处于
    `running`{.literal}
    状态。检查报告的大小是否如预期，以及是否正确配置了自动启动。
    ``` literallayout
    # virsh pool-info guest_images_dir
      Name:           guest_images_dir
      UUID:           c7466869-e82a-a66c-2187-dc9d6f0877d0
      State:          running
      Persistent:     yes
      Autostart:      yes
      Capacity:       458.39 GB
      Allocation:     197.91 MB
      Available:      458.20 GB
    ```
:::
:::
::: section
::: titlepage
## []{#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-disk-based-storage-pools-using-the-cli_creating-storage-for-virtual-machines-using-the-cli}使用 CLI 创建基于磁盘的存储池 {.title}
:::
在基于磁盘的存储池中，池基于磁盘分区。例如，当您想要将整个磁盘分区分配为存储池时，这很有用。您可以使用
`virsh`{.literal} 实用程序创建基于磁盘的存储池。
::: title
**建议**
:::
在创建基于磁盘的存储池前请注意以下几点：
::: itemizedlist
-   根据所使用的 `libvirt`{.literal}
    版本，将磁盘专用到存储池可能会重新格式化并擦除当前存储在磁盘设备上的所有数据。强烈建议您在创建存储池前备份存储设备中的数据。
-   不应为虚拟机授予对整个磁盘或块设备的写入访问权限（如
    `/dev/sdb`{.literal}）。使用分区（如 `/dev/sdb1`{.literal}或 LVM
    卷）。
    如果您将整个块设备传递给虚拟机，VM
    可能会对该设备进行分区或者创建自己的 LVM
    组。这可能导致主机机器检测到这些分区或者 LVM 组并导致错误。
:::
::: itemizedlist
**先决条件**
-   确定您的管理程序支持基于磁盘的存储池：
    ``` literallayout
    # virsh pool-capabilities | grep "'disk' supported='yes'"
    ```
    如果命令显示任何输出结果，则代表支持基于磁盘的池。
:::
::: orderedlist
**流程**
1.  [**创建存储池**]{.strong}
    使用 `virsh pool-define-as`{.literal}
    命令定义和创建磁盘类型存储池。例如，要创建一个名为
    `guest_images_disk`{.literal} 的存储池，它使用
    [**/dev/sdb1**]{.strong} 分区，并挂载到 /dev 目录中：
    ``` literallayout
    # virsh pool-define-as guest_images_disk disk gpt --source-dev=/dev/sdb1 --target /dev
    Pool guest_images_disk defined
    ```
    如果您已经有要创建的存储池的 XML 配置，也可以根据 XML
    定义池。详情请查看
    ["基于磁盘的存储池参数"一节](#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#disk-based-storage-pool-parameters_assembly_parameters-for-creating-storage-pools "基于磁盘的存储池参数"){.xref}。
2.  [**创建存储池目标路径**]{.strong}
    使用 `virsh pool-build`{.literal}
    命令，为预格式化的文件系统存储池存储池目标路径创建存储池目标路径，初始化存储源设备，以及定义数据格式。
    ``` literallayout
    # virsh pool-build guest_images_disk
      Pool guest_images_disk built
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    仅构建基于磁盘、基于文件系统和逻辑存储池的目标路径才需要。如果
    `libvirt`{.literal}
    检测到源存储设备的数据格式与所选存储池类型不同，则构建会失败，除非指定了
    `覆盖`{.literal} 选项。
    :::
3.  [**验证是否已创建池**]{.strong}
    使用 `virsh pool-list`{.literal} 命令，验证池是否已创建好。
    ``` literallayout
    # virsh pool-list --all
      Name                 State      Autostart
      -----------------------------------------
      default              active     yes
      guest_images_disk    inactive   no
    ```
4.  [**启动存储池**]{.strong}
    使用 `virsh pool-start`{.literal} 命令挂载存储池。
    ``` literallayout
    # virsh pool-start guest_images_disk
      Pool guest_images_disk started
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `virsh pool-start`{.literal}
    命令仅适用于持久性存储池。临时存储池创建时会自动启动。
    :::
5.  [**\[可选\]自动启动过程**]{.strong}
    默认情况下，通过 `virsh`{.literal} 命令定义的存储池不会设置为每次
    libvirtd 启动时自动启动。使用 `virsh pool-autostart`{.literal}
    命令将存储池配置为自动启动。
    ``` literallayout
    # virsh pool-autostart guest_images_disk
      Pool guest_images_disk marked as autostarted
    ```
:::
::: itemizedlist
**验证**
-   使用 `virsh pool-info`{.literal} 命令验证存储池是否处于
    `running`{.literal}
    状态。检查报告的大小是否如预期，以及是否正确配置了自动启动。
    ``` literallayout
    # virsh pool-info guest_images_disk
      Name:           guest_images_disk
      UUID:           c7466869-e82a-a66c-2187-dc9d6f0877d0
      State:          running
      Persistent:     yes
      Autostart:      yes
      Capacity:       458.39 GB
      Allocation:     197.91 MB
      Available:      458.20 GB
    ```
:::
:::
::: section
::: titlepage
## []{#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-filesystem-based-storage-pools-using-the-cli_creating-storage-for-virtual-machines-using-the-cli}使用 CLI 创建基于文件系统的存储池 {.title}
:::
当您要在未挂载的文件系统中创建存储池时，请使用基于文件系统的存储池。此存储池基于给定的文件系统挂载点。您可以使用
`virsh`{.literal} 实用程序创建基于文件系统的存储池。