instances of the same. We show that the complexity of phase-one
significantly dominates the overall complexity. With these observa-
tions, our protocols give a desirable property of all-but-1 parties
being light-weight, making them suitable to be used in a client-
server setting, where only one party needs to be computationally
heavy and is played by the server. Unlike prior works in the client-
server setting [1, 54], we allow collusion between the server, 𝑃1,
and any subset of the clients, 𝑃2, . . . , 𝑃𝑛 as long as 𝑡 < 𝑛/2 parties
are corrupt. Finally, the protocol in [51] also had an asymmetry be-
tween load on different parties, and our clients require 7(2𝑡 + 3)/10
times less communication than clients in [51].
To summarize our contributions:
• We give the first concretely efficient protocol for mPSI, with
communication complexity of O(𝑛𝑚𝜆) and constant rounds.
3Strictly speaking, as is common in PSI protocols, a phase of local hashing is done
before invoking this functionality.
4This resembles the two-party oblivious programmable pseudorandom function (OPPRF)
functionality [51], and we indeed show that it can be instantiated using an OPPRF.
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1183• We construct the first multiparty circuit PSI and qPSI protocols
and show them to be concretely efficient.
• Finally, we implement our protocols and show that our mPSI
protocol is up to 5× and 6.2× faster than prior state-of-the-art
[51] in LAN and WAN settings, respectively, even for 15 parties.
Our protocols are semi-honest secure in the honest majority setting.
1.2 Related Work
HE-based mPSI. The state-of-the-art work on HE-based mPSI proto-
cols is that of [44] who provide a threshold additive homomorphic
encryption (HE) based protocol with an asymptotic communication
complexity of 𝑂(𝑛𝑚𝜆), thus matching ours. While no implementa-
tion is provided in this work, in Section 6.2.1, we estimate a lower
bound on its concrete computation and communication costs, and
show that its expected run-times are much worse than ours.
Threshold PSI. The works of [3, 10, 36] propose protocols for the
problem of multiparty threshold PSI (where the parties learn the
intersection only if its size is greater than a threshold) using HE
schemes. The works of [3] and [10] further use their respective
multiparty threshold PSI protocols to obtain mPSI protocols with
complexities O(𝑛𝜆𝑇 log𝑇) and O(𝑛𝜆𝑇 2 log𝑇) respectively, where
𝑇 = 𝑚 − (size of intersection). As mentioned by the authors them-
selves, these protocols are more suitable for settings when the
intersection size is large and close to 𝑚. While this leads to sub-
linear in 𝑚 protocols when 𝑇 is sub-linear in 𝑚, for the general
problem of mPSI, when 𝑇 can be arbitrary (and even 𝑂(𝑚)), the
complexity of their protocol is super-linear in 𝑚, and concretely
worse than that of [44] (and hence our protocol).
Other Related Works. The works of [1, 54] build mPSI protocols in
the server-aided model (which assumes the existence of a server
that does not collude with the clients). Further, [44] as well as the
works of [15, 31, 35, 44, 49, 71, 72] also provide theoretical protocols
for the malicious setting, whose complexities are naturally much
worse than semi-honest protocols.
Augmented semi-honest security. An mPSI protocol in the augmented
semi-honest model was proposed in [51], whose complexity matches
our semi-honest protocol’s complexity. However, augmented semi-
honest security is much weaker than standard semi-honest security.
In particular, the augmented semi-honest mPSI protocol of [51]
completely leaks the intersection of the honest parties’ sets to the
adversary even in the honest majority setting, which is clearly disal-
lowed by standard semi-honest security (see Appendix A for more
details).
1.3 Organization
We discuss the formal security model and cryptographic primitives
in Section 2. Then, we describe our mPSI protocol in Section 3, our
circuit PSI protocol in Section 4, and our qPSI protocol in Section 5.
Finally, we present our empirical evaluation results in Section 6.
2 PRELIMINARIES
Notations. Let 𝜅 and 𝜆 denote statistical and computational security
parameters respectively. For a positive integer 𝑘, [𝑘] denotes the
set {1, 2, · · · , 𝑘}. For a set 𝑆, |𝑆| denotes the cardinality of 𝑆. For
sets 𝑆 and 𝑆′, 𝑆 \ 𝑆′ denotes the set of elements that are present in
𝑆 but not in 𝑆′. For 𝑥 ∈ {0, 1}∗, |𝑥| denotes the bit-length of 𝑥. For
integers 𝑎 and 𝑏 such that (𝑎 < 𝑏), [𝑎, 𝑏] denotes the closed interval
of integers between 𝑎 and 𝑏. We use log to denote logarithms with
base 2. For any 𝑥 ∈ {0, 1}ℓ, we also use its natural interpretation
as an integer in the range {−2ℓ−1, 2ℓ−1 − 1} using 2’s complement
representation. F𝑝 denotes a finite field with prime order 𝑝.
Secret Sharing. An (𝑛, 𝑡)− secret sharing scheme [6, 73] for 𝑡 < 𝑛 al-
lows to distribute a secret 𝑠 amongst 𝑛 parties as shares [𝑠]1, · · · , [𝑠]𝑛,
such that any 𝑡 + 1 parties can collectively reconstruct the secret 𝑠
from their shares and no collusion of 𝑡 parties learn any informa-
tion about 𝑠. We instantiate (𝑛, 𝑡)− secret sharing for a secret 𝑠 ∈ F
with the Shamir secret sharing scheme [73]. Additionally, we make
use of the additive secret sharing scheme, which is an (𝑛, 𝑛 − 1)-
secret sharing scheme. Here, to share 𝑠 ∈ F, shares of 𝑛 parties
⟨𝑠⟩1, · · · , ⟨𝑠⟩𝑛 are chosen uniformly from the field F subject to the
constraint that ⟨𝑠⟩1 + · · · + ⟨𝑠⟩𝑛 = 𝑠, where + is the addition oper-
ation in F. We use the additive secret sharing both in the general
𝑛-party setting and also more specifically in the 2-party setting. To
secret share a boolean value 𝑏 ∈ {0, 1} between 2 parties, we use
additive secret sharing scheme over the field F2. If a bit 𝑏 is shared
amongst two parties 𝑃𝑖 and 𝑃 𝑗, the shares are denoted by ⟨𝑏⟩𝐵
𝑖 and
⟨𝑏⟩𝐵
𝑗 respectively. We note that both Shamir secret sharing and
additive sharing are linear schemes. For any 𝑎, 𝑏, 𝑐 ∈ F, 𝑐 · [𝑎] + [𝑏]
(resp. 𝑐 · ⟨𝑎⟩ + ⟨𝑏⟩) represents that, for each 𝑖 ∈ [𝑛], 𝑃𝑖 computes
𝑐 · [𝑎]𝑖 + [𝑏]𝑖 (resp. c ·⟨𝑎⟩𝑖 + ⟨𝑏⟩𝑖)). Linearity ensures that for any
𝑎, 𝑏, 𝑐 ∈ F, 𝑐 · [𝑎] + [𝑏] = [𝑐 · 𝑎 + 𝑏]. For 𝑎, 𝑐 ∈ F, [𝑎] + 𝑐 and ⟨𝑎⟩ + 𝑐
represent the local computation required to get [𝑎 + 𝑐] and ⟨𝑎 + 𝑐⟩.
2.1 Security Model
We consider the multiparty setting with 𝑛 parties: 𝑃1, · · · , 𝑃𝑛. We
consider a semi-honest adversary A that corrupts 𝑡 < 𝑛/2 par-
ties and tries to learn as much information as possible from the
protocol execution but faithfully follows the protocol specifica-
tion. This is called the semi-honest honest majority setting. To
capture semi-honest security of a protocol in the simulation based
model [11, 37, 40], we show that for any semi-honest adversary,
there exists a simulator such that the view of a distinguisher in the
following two executions are indistinguishable: one is the view of
the real execution of the protocol in the presence of a semi-honest
adversary and the second is the view of an ideal execution of the
protocol where a simulator interacts with the ideal functionality
(which, given the inputs of all parties, computes the function be-
ing evaluated and returns the outputs). We further also consider
semi-honest security in a hybrid model [11], where, in addition to
communicating as usual in the standard execution of the protocol,
the parties have access to an ideal functionality. Specifically, in
an F -hybrid protocol, the parties may give inputs to and receive
outputs from this functionality F . By the universal composition
theorem [11], if we have any semi-honest secure protocol 𝜋 realiz-
ing the functionality F , then any F -hybrid protocol can be realized
in the standard model, by replacing F with the protocol 𝜋.
2.2 Cuckoo Hashing
Cuckoo hashing [61] uses 𝐾 random hash functions ℎ1, · · · , ℎ𝐾 :
{0, 1}𝜎 → [𝛽] to map 𝑚 elements into 𝛽 bins. The mapping proce-
dure is as follows. An element 𝑥 is inserted into the bin ℎ𝑖(𝑥), if
this bin is empty for some 𝑖 ∈ [𝐾] (if there are multiple empty bins,
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1184then we pick the first one in the lexicographic ordering of the bins).
Otherwise, pick a random 𝑖 ∈ [𝐾], insert 𝑥 in bin ℎ𝑖(𝑥), evict the
item currently in ℎ𝑖(𝑥) and recursively insert the evicted item. The
recursion proceeds until no more evictions are necessary or until a
threshold number of re-allocations are done. If the recursion stops
because of the latter reason, it is considered as a failure event. This
failure signifies existence of an element that didn’t map to any of
the bins. Some variants of Cuckoo hashing maintain a set called the
stash, to store such elements. Stash-less cuckoo hashing is where
no special stash is maintained.
In stash-less Cuckoo hashing, Pinkas et al. [67] showed that for
𝐾 = 3, 4 and 5 and 𝛽 = 1.27𝑚, 1.09𝑚 and 1.05𝑚 respectively, the fail-
ure probability is at most 2−40, by extrapolating their experimental
analysis for the failure probability 2−30. When considering stash-
less Cuckoo hashing, to upper bound the overall failure probability
of our protocols to 2−40, we require an analysis of the parameters
for the failure probabilities 2−41/2−42/2−46. Extrapolating, similar
to [67], we get 𝛽 = 1.28𝑚/1.28𝑚/1.31𝑚 to ensure that the failure
probability in stash-less Cuckoo hashing is at most 2−41/2−42/2−46
respectively, for 𝐾 = 3. Similar to prior works that use Cuckoo
hashing [13, 51, 56, 65, 67, 70] that includes the state-of-the-art in
mPSI, the main description of all our protocols assumes this stash-
less setting. However, our protocols can be extended to the setting
with stash. We describe this extension for mPSI in Section 3.4 while
similar techniques can also be applied for the case of circuit PSI
and qPSI.
2.3 Two-party Functionalities
2.3.1 Equality Test. We use a two-party equality test functionality
F ℓ
. Here, parties 𝑃1 and 𝑃2 have 𝑎 ∈ {0, 1}ℓ and 𝑏 ∈ {0, 1}ℓ
EQ
respectively as private inputs and receive boolean shares of the bit 1
if 𝑎 = 𝑏 and 0 otherwise, as the output. We use the protocol from [13]
that builds on the ideas of [23, 32, 68] to realize this functionality.
The concrete communication complexity of this protocol is at most
3ℓ𝜆/4 + 8ℓ and round complexity is log ℓ.
2.3.2 Boolean to Arithmetic Share Conversion. We also use a two-
party functionality F F
, which converts boolean shares of a bit to
B2A
its additive shares (in a field F). More specifically, the functionality
requires parties 𝑃1 and 𝑃2 to input their boolean shares ⟨𝑏⟩𝐵
1 and
⟨𝑏⟩𝐵
2 respectively and outputs the additive shares ⟨𝑥⟩1 and ⟨𝑥⟩2
of 𝑥 ∈ F for 𝑥 = 𝑏 to 𝑃1 and 𝑃2 respectively. We instantiate this
functionality with the share conversion protocol given in [68] that
uses one correlated OT and has total communication of 𝜆+⌈log |F|⌉
bits and takes 2 rounds.
We remark here that OT extension using the recent line of work on
SilentOT [9, 75] can be used to improve the communication cost
of both the equality test and boolean to arithmetic share conver-
sion functionalities. Our implementations do not incorporate these
recent optimizations, which would only improve their performance.
2.4 Weak Private Set Membership
We define a 2-party functionality, F 𝛽,𝜎,𝑁
, called weak private set
wPSM
membership (wPSM) that allows a clean exposition of our protocols.
We note that this functionality is similar in spirit to the batch
oblivious programmable PRF (OPPRF) considered in [65] and as we
discuss later, that is indeed one way to realize this functionality
efficiently. In a single instance of the wPSM, one party holds an
element 𝑞 and another party holds a set 𝑋. Parties learn the same
random element 𝑤 if 𝑞 ∈ 𝑋, else one party learns 𝑦 and other party
learns 𝑤, where 𝑦 and 𝑤 are independent random values. Similar
to [65], we consider a batch version of this functionality, where
the parties do multiple instances of wPSM together as a batch. We
define the functionality F 𝛽,𝜎,𝑁
formally in Figure 1, where 𝛽 is the
wPSM
batch size, 𝜎 is length of input and output elements, and 𝑁 is the
total size of all sets input by the second party.
every 𝑗 ∈ [𝛽] and 𝑖 ∈(cid:2)|𝑋 𝑗|(cid:3) and𝑗 |𝑋 𝑗| = 𝑁 .
𝑃1 and 𝑃2 are the receiver and the sender respectively.
Receiver 𝑃1’s Inputs: The queries 𝑞1, · · · , 𝑞𝛽 ∈ {0, 1}𝜎.