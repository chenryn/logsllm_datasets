title:The union-split algorithm and cluster-based anonymization of social
networks
author:Brian Thompson and
Danfeng Yao
The Union-Split Algorithm and Cluster-Based
Anonymization of Social Networks ∗
Brian Thompson
Rutgers University
Department of Computer Science
Piscataway, NJ 08854
PI:EMAIL
Danfeng Yao
Rutgers University
Department of Computer Science
Piscataway, NJ 08854
PI:EMAIL
ABSTRACT
Knowledge discovery on social network data can uncover
latent social trends and produce valuable ﬁndings that ben-
eﬁt the welfare of the general public. A growing amount of
research ﬁnds that social networks play a surprisingly pow-
erful role in people’s behaviors. Before the social network
data can be released for research purposes, the data needs
to be anonymized to prevent potential re-identiﬁcation at-
tacks. Most of the existing anonymization approaches were
developed for relational data, and cannot be used to handle
social network data directly.
In this paper, we model social networks as undirected
graphs and formally deﬁne privacy models, attack mod-
els for the anonymization problem, in particular an i-hop
degree-based anonymization problem, i.e., the adversary’s
prior knowledge includes the target’s degree and the degrees
of neighbors within i hops from the target. We present two
new and eﬃcient clustering methods for undirected graphs:
bounded t-means clustering and union-split clustering algo-
rithms that group similar graph nodes into clusters with a
minimum size constraint. These clustering algorithms are
contributions beyond the speciﬁc social network problems
studied and can be used to cluster general data types be-
sides graph vertices. We also develop a simple-yet-eﬀective
inter-cluster matching method for anonymizing social net-
works by strategically adding and removing edges based on
nodes’ social roles. We carry out a series of experiments
to evaluate the graph utilities of the anonymized social net-
works produced by our algorithms.
Categories and Subject Descriptors
H.3.5 [Information Storage and Retrieval]: Online In-
formation Services—data sharing; I.5.3 [Pattern Recog-
nition]: Clustering—algorithms, similarity measures
∗This work was partially supported by NSF Grant CNS-
0831186.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’09, March 10-12, 2009, Sydney, NSW, Australia
Copyright 2009 ACM 978-1-60558-394-5/09/03 ...$5.00.
General Terms
Algorithms, Measurement, Performance, Security
Keywords
Graph Anonymization, Social Networks, Clustering Algo-
rithms, Social Role
1.
INTRODUCTION
Knowledge discovery on social network data can uncover
latent social trends and produce valuable ﬁndings. A grow-
ing amount of research ﬁnds that social networks play a sur-
prisingly powerful role in people’s behaviors. For example,
medical researchers discovered that obesity spread from one
person to another through social connections, which follows
a similar pattern to that of viruses [17]. A recent study on
12,067 people shows that the decision for a smoker to quit
smoking is strongly inﬂuenced by the people in the smoker’s
social network [17]. This evidence indicates the precious
value of social network data in shedding light on social be-
havior, health, and well-being of the general public.
Before the social network data can be released for research
purposes, the data needs to be anonymized. Anonymization
is a crucial process to ensure that released social network
data does not disclose sensitive information of users. De-
pending on the privacy model considered, anonymization
prevents an individual participant in the social network from
being identiﬁed.
Data anonymization techniques have been extensively
studied on relational databases with several privacy mod-
els (e.g., k-anonymity [13, 14, 18], l-diversity [9], and t-
closeness [7]). Most of the existing methods can only handle
relational data. Social networks are usually viewed as an
undirected graph with or without edge labels. Thus, most of
the known anonymization approaches such as suppression or
generalization do not directly apply to social network data.
For the past decade, graphs have been intensively studied
to model the web, in particular how web pages and links have
an impact on searching and surﬁng. The ﬁeld of graph min-
ing generated many exciting results on discovering trends
and new knowledge from web graphs. With the availabil-
ity of multi-core personal computers and cloud computing
(a.k.a. high-performance web services coupled with scal-
able data centers), an unprecedented amount of data from
various aspects of our digital society is being collected and
analyzed,
including social networks, virtual communities,
recommendation data, network traces, search queries, and
communication patterns. These types of data can be mod-
eled as graphs, e.g., Netﬂix Prize data [15] can be viewed as
a huge and sparse bipartite graph [5].
Very recently, several graph anonymization solutions have
been proposed to de-identify social networks using tech-
niques such as strategically or randomly inserting or delet-
ing edges or nodes. One major challenge in social net-
work anonymization is the complexity. Zhou and Pei proved
that a particular k-anonymity problem trying to minimize
the structural change to the original social network is NP-
hard [21]. They show that the problem can be reduced to a
k-dimensional perfect matching problem, which is NP-hard.
Since ﬁnding the optimal anonymized social network can
be hard, the main goal of social network anonymization is
to develop eﬃcient heuristics that strike a balance between
preserving the original graph structure and the privacy of
individuals.
Furthermore, it is not clear how to quantify the decrease
in utility incurred from anonymizing a graph. One way to
measure the diﬀerence between the original and anonymized
graphs is to count the number of nodes and edges that were
added or removed. However, this may not always be an
accurate quantiﬁcation of the eﬀect anonymization has on
utility. For example, a new social connection between a pair
of co-workers may have little eﬀect on the overall behavior of
their social network, but two important business executives
meeting over lunch may have a much more signiﬁcant impact
on theirs.
In this paper, we take the ﬁrst step to reconcile the dif-
ference between preserving structure and preserving utility
in social network graphs. We argue that an important and
unique graph property for social networks is the social role
of an individual.
Intuitively, a social role is “the position
or purpose that someone or something has in a situation,
organization, society or relationship” [3]. A social network
contains the information about the social role of each partic-
ipant that is usually reﬂected in the way people interact with
each other and in social connections in particular. Therefore,
a good anonymization algorithm for social networks needs
to preserve as much as possible the social connectivity of
individuals.
Our Contributions Our contributions are summarized
as follows.
1. We give two eﬃcient clustering heuristics, called
bounded t-means and union-split, for clustering indi-
viduals in a social network into groups with similar
social roles, while satisfying a minimum cluster size
constraint. The bounded t-means and union-split algo-
rithms reach beyond the speciﬁc social networks prob-
lem considered, as they can be used to cluster struc-
tured or unstructured data based on an arbitrary dis-
tance metric.
2. We describe a simple yet eﬀective matching-based
anonymization method for social networks that strate-
gically adds and removes edges based on a node’s
inter-cluster connectivity. Our experiments show that
our anonymization method combined with the union-
split clustering algorithm outperforms the recently
proposed graph generalization method [6] in preserving
the structural properties of social networks.
Organization of the Paper We give the deﬁnitions, at-
tack models, and privacy models in the next section. We
present our bounded t-means and union-split clustering al-
gorithms in Section 3. In Section 4, we describe our graph
anonymization algorithms under our degree-based privacy
models. Our experimental evaluation is given in Section 5.
Related work is described in Section 6. In Section 7, we give
some conclusions and describe plans for future work.
2. DEFINITIONS, ATTACK MODELS,
PRIVACY MODELS
In this section, we describe the privacy model and ad-
versary model that we consider in our anonymization algo-
rithms. In particular, we formally deﬁne the type of prior
knowledge that the adversaries are allowed to have.
Definition 1. A social network graph G(V, E) is a
simple undirected graph with a set of nodes or vertices de-
noted by V and a set of unlabeled edges denoted by E. A
node v ∈ V represents an individual in the social network.
An edge (vi, vj ) ∈ E signiﬁes a social relationship between
the two individuals represented by nodes vi and vj . 1 We de-
note the degree of a node by d(v). Let n = |V | and m = |E|
be the total number of nodes and edges in G, respectively.
Immediate neighbors of a node v are denoted by N (v, 1),
where 1 represents one-hop neighbors. Two-hop neighbors
(i.e., neighbors’ neighbors) are denoted by N (v, 2), and so
on.
We consider a type of re-identiﬁcation attack where the
adversary has prior knowledge about a node and its social
connections.
In particular, we consider a general type of
degree-based attack where the adversary has prior knowledge
of the degrees of nodes within a given radius of the target
node.
Definition 2. An i-hop degree-based attack on a
social network G is one in which the adversary has prior
knowledge of the degree d(v) of a target node v and the de-
grees of some or all of v’s j-hop neighbors for all j ≤ i. That
is, the adversary may know {d(u)|u ∈ N (v, j)} ∀j ≤ i. In
a 0-hop degree-based attack (degree-based attack for short),
the adversary only has prior knowledge of d(v). Given the
anonymized social network graph G′, the adversary’s goal is
to successfully re-identify target node v.
Based on the above attack model, we deﬁne the
anonymization goal of a social network. Intuitively, the pur-
pose of anonymization is to prevent re-identiﬁcation attacks
by modifying the graph so that to the adversary, each node
is indistinguishable from many other nodes in the graph.
Definition 3. The i-hop ﬁngerprint of a vertex v ∈ V ,
denoted fi(v), is the sequence of degree sets d(v), {d(u)|u ∈
N (v, 1)}, . . ., {d(u)|u ∈ N (v, i)}.
Definition 4. A social network graph G(V, E) is k-
anonymous against i-hop degree-based attacks, if for each
node v ∈ V there exist at
least k − 1 other nodes
u1, . . . , uk−1 ∈ V such that fi(v) = fi(uj) ∀j ∈ [1, k − 1].
1Graphs with labeled edges to express more complex social
relationships such as spouse-of, teacher-of, etc, will be stud-
ied in our future work. However, our techniques are general
enough to apply to many notions of node similarity.
In our paper, we present methods for anonymizing social
network graphs. That is, given a social network graph G, a
privacy parameter k, and an adversary model (degree-based
or 1-hop degree-based adversary), we provide an algorithm
for generating a graph G′ that is k-anonymous against the
given adversary, and preserves as best as possible the struc-
tural properties of the original graph.
3. CLUSTERING METHODS
Some previous anonymization techniques ([5], [21]) take
a greedy approach to anonymization, where anonymization
groups are chosen in an ad-hoc way. Instead, we focus on a
cluster-based approach that ﬁrst partitions V into groups of
similar vertices, and then anonymizes vertices within each
group. This enables us to take a global approach that uses
the clustering information to more cleverly anonymize the
graph.
In this section, we present and analyze two new clustering
algorithms, the bounded t-means and the union-split clus-
tering algorithms. One classic clustering technique is known
as the k-means algorithm. To avoid confusion with the k
in k-anonymity, we use the term t-means throughout the
paper. We start with some deﬁnitions.
3.1 Deﬁnitions and Tools
The distance metrics that we use to measure similarity of
two graph vertices are deﬁned next. Deﬁnition 5 can also
be generalized to the i-hop degree model for i > 1, which is
omitted here. These distance metrics are used in both the
clustering and anonymization algorithms.
Definition 5. Distance metric
In the (0-hop) degree-based model, we deﬁne the distance
between vertices u and v as
D(u, v) = |d(u) − d(v)|.
In the 1-hop degree-based model, we deﬁne the distance
between vertices u and v as
D(u, v) = |d(u) − d(v)| + X |d(xj) − d(yj)|
where x1, x2, . . . ∈ N (u, 1) with d(x1) ≥ d(x2) ≥ . . ., and
y1, y2, . . . ∈ N (v, 1) with d(y1) ≥ d(y2) ≥ . . . Essentially,
the neighbors of u and v are sorted based on their degrees,
and then the sum of diﬀerences in the corresponding neigh-
bors’ degrees is computed. If |N (u, 1) 6= N (v, 1)|, then we
use zero as the default degree of a node that does not ex-
ist. Intuitively, our distance metric attempts to quantify the
diﬀerence in local structure between two vertices.
We deﬁne the distance from a vertex u to a cluster c as
D(u, c) = D(u, vc), the distance from u to the cluster center
vc (also a vertex – see Section 3.2). We deﬁne the distance
between two clusters to be D(c1, c2) = D(vc1 , vc2 ).
Definition 6. Marginal cost Consider a social net-
work graph G(V, E), and let c1, . . . , ct ⊂ V be disjoint clus-
ters. Let v ∈ V be any vertex in the graph, and let ci and
cj be two arbitrary clusters. We deﬁne the marginal cost
g(v, ci, cj ) = |D(v, ci) − D(v, cj )|.
Definition 7. Surrogate Consider a social network
graph G(V, E), and let c1, . . . , ct ⊂ V be disjoint clusters.
We deﬁne the surrogate of v to be the cluster of size < k
whose center is closest to v, where k is the privacy parame-
ter. Intuitively, the surrogate is the nearest available cluster
to v.
3.2 Mode-Based Cluster Centers
Many clustering algorithms and applications require the
notion of a cluster center, usually a point in the domain of
the dataset that represents that cluster. When the domain is
a vector space of real number coordinates, the most natural
choice of center is the vector average of all points in the
cluster. Since the domain of graph vertices does not ﬁt nicely
into the real coordinate model, 2 we must deﬁne our own
notion of cluster center.
One idea is to have a discrete center. That is, require that
the center of a cluster be one of the nodes in that cluster.
This type of approach is similar to that taken in [21]. How-
ever, this restriction may yield poor results if none of the
nodes provide an accurate representation of the cluster. In-
stead, we opt for a virtual center, which need not correspond
to an existing node in the graph.
Under the (0-hop) degree model, we deﬁne the center of a
cluster c to be a vertex vc with degree equal to the average
degree over all vertices in c, rounded to the nearest integer.
Computing a cluster center under the 1-hop degree model
is more complicated because the center must have both a
degree and a list of neighbors’ degrees. To accomplish this
task, we ﬁnd that a statistical mode-based method works bet-
ter than the commonly used mean or median. In statistics,
the mode is the value that occurs the most frequently in
a data set or distribution. We develop a simple yet eﬀec-
tive counting method using mode to ﬁnd the cluster center.
We illustrate an example in Table 1 in the appendix. The
detailed procedure is as follows.
1. Let c = {v1, . . . , vk} be a cluster of graph vertices.
Calculate the degree of the new cluster center to be
i=1 d(vi)”, the rounded average degree
d = round“ 1
over vertices in c. Allot space for d neighbor degrees.
k Pk
2. Iterate d times: Find the mode η, that is, the number
that shows up in the most neighbor degree sequences.
Add η to the list of neighbor degrees for our new cen-
ter. Remove one copy of η from each member vertex’s
neighbor degree sequence in which it appears.