相同。于是每个实际发生的事件，都必须是每个进程的独立的行
事件上，先不管其它事件。这样，我们先假设两个进程的字母表
同时参予的事件。暂时我们还是把注意力集中到这类同时参予的
望它们交互作用。这些交互作用可以被看作是要求两个有关进程
定，刻画，记录和分析。
进程，这些进程的行为都可以用一种简单而叉统-·的方式来规
好是忘掉进程、环境和系统三者相互之间的区别，它们统统都是
这个系统也有可能被置于一个更大、更广的环境中去。其实，最
是，我们用定义进程的这套熟悉的记法，也可定义进程环境的行
如，总是由顾客来决定到底想投入什么样的硬币。值得庆幸的
况时，到底会发生哪个事件则完全由进程所处的环境控制。例
投入一枚大点的硬币呢，还是投入一枚小点的。每当出现这种情
是一个进程，它的行为可由组成它的各个进程的行为决定，而且
各自动作着，且又在交互作用着。这个完整的采统也应当被看作
为加以探讨和研究了；在进程及其环境并发的运行过程中，它们
为，从而将进程的环境也刻画成一个进程。这样，我们就可以把
儿种不同动作之间做出选择，譬如说，是给VMC（1.1.3节X4）
当把两个进程放到一起，让它们并行运行时，我们一般是指
进程是通过划画其全部的潜在行为来定义的。而且经常要在
第二章并
2.2
2.1.引
交互作用
发
性
4
---
## Page 69
伴随着in1p后发生的STOP被叫做死锁。尽管每个分进程都准备
它才不会给出大饼干的，故
不幸的是，自动售货机可不愿吃亏。这位顾客投人一枚小硬币，
非要块大饼干不可，即有
VMC。他并没注意自己投入是哪种硬币；可是不管怎么说，他
X2一位傻乎乎的题客想买一块大饼十，
进程描绘成·个单一的简单的进程。
这个例子说明，不用拜发算子Ⅱ，也可以把两个子进程组合成的
巧克力，所以VMCT也就不会给出太妃糖来。因此有
(FO0LCUSTIVMC) =μX. (in2p→large-X|inlp-STOP)
为这台机器不允许先尝后付钱。同时，因为这个人付钱之后只要
且付了钱后，他就非要块巧克力不可了。即有
只在他这种欲望得不到满足时，他才不情愿地付给一枚硬币：
X1有位贫贪心的顾客想不付钱就拿到一块太妃糖或一块巧克力。
Q的交互作用按上述说明为严格同步的。
表示-~个进程，其行为就是P和Q构成的整个系统的行为，P和
两个字母表相同的进程，我们引入记法
售货机也提供巧克力的时候，巧克力求能途出来。假设P和Q是
为的一个可能事件。比方说，只有当顾客需要巧克力，而且自动
46
当这位顾客遇到VMCT（1.1.3节X3)时，就不能得遇了，因
举例
 FOOLCUST = (in2p-large→FOOLCUST
(GRCUSTIV MCT) =μX,(coin-→choe-→X)
GRCUST=(toffee→GRCUST
|inlp-→large-FOoLCUST)
[coin-choc-→GRCUST)
|choc-GRCUST
 P1Q 
于是就把硬币投入
口
---
## Page 70
L4
才能保留下来，即
情况；·当把这两个进程组合到一起时，只有他们的公共选择部分
这两条法则可以很容易地推广到两个进程都可以选择初始事件的
L4B
L4A
一个动作时无法取得一致意见，而处于死锁，即
下一条法则说明一对进程或者同时执行同一动作，或者在执行第
13B
L3A
第三，一个死锁进程会使整个系统都死锁；但是一个进程与
L2 PI(Q|R) = (P|Q)R
没有关系
第二条法则说明当三个进程组装在一起时，它们之间的排列顺序
L1 PIQ=QIP 
法则说明进程与其环境之间的逻辑对称性，即
2.2.1法则
化，参见2.3节中的X1。
有这种需要时，我们还可引入某类事件来模拟这种内在的状态变
关事件的字母表时有意地排除了这些内在的威情因素：但如果镇
不了解那位愚蠢的顾客徒然等待食粮时挨饿的痛苦。我们选择有
六欲的外星人观察和记录的。这类外星人不懂吃饼干的乐趣，也
切记一点，事件应当是一种中性的变迁，是可由那些不懂得七情
于这些进程无法统一意志，下一步就什么也不会发生了。
好进行下一步的动作，但它的各自的下一步动作都是不同的，由
(x:A-P(x))I(y:B-→Q(y))=(2:(A∩B)→(P(2)[Q(2)))
(PIQ)的行为遵从的法则是意想不到的简单和平凡。第一条
解释以上例子的孜事，违背了科学抽象性和客观性的标准。
(c→P)(d-→Q) = STOP
(c-P)I(c→Q) =(c-→(P1Q))
若≠4
47
口
---
## Page 71
同的情形，即
L2 (PIQ)/s=(P/s)I(Q/s)
L1  traces(P↓Q) =traces(P) ∩traces(Q)
这个原因，/s对有分配律。
的每个序列必须同时是这两个运算对象的动作序列。也正是由于
2.2.3
intersect(P,Q)= Az.
2.2.2实施
则
X1
的其它方式来到画的。
规则L4表明使用并发算子定义的系统是可以由不使用并发算子
68
由于（PIQ）的每一个动作都要P和Q同时参加，则这类动作
显然组合算子’的实施要以L4为基础
上节中讲述的算子也可以推广到运算对象P和Q的字母表不
(P|Q) =a-→((b→P)l(b-→Q|c→Q))
设P=(a-→b→P丨b-→P)
举例
且 Q=(a-→(b-→Q|c-→Q))
迹
=μX,(a-b-→X)
=α→(b→(P|Q))
2.3并
αP≠αQ
else intersect(P(z), Q(z))
发
性
因为这个递归式是卫式
由L4A
由L4A.
---
## Page 72
件甚至有可能同时发生，但记录它们的前后次序是无关紧要的。
注意，olink可能发生在curse之前，也可能在它之后。这两个事
这两个进程并发动作的结果就成了
后来他还是不得不拿一块巧克力。故
但是顾客就想要太妃糖：curse是顾客拿不到太妃糖时的咒骂；
做完一批交易后发出的声音。
这里clink是硬币掉进自动售货机时的声晋，clunk是自动售货机
X1
的字母表仍然不变，而且（PIQ)的含义也与上节所逃的完全一样。
了另一个字母表。但在两个进程字母表相同的情形里，它们结合后
运算对象的字母表不相同的算子是少见的，而且运算结果又产生
统逻辑上所有可能事件的集合。故
参加组合的各个进程的字母表简单地抖到--起，就可得到整个系
类似地，Q也会执行只属于aQ而不属于αP的事作。这样，只需将
事件。因此每当P在执行这类事件时，它们可以独立于Q发生。
不属于αQ的事件就跟Q无关系了，也没能力去控制甚至过问这类
的事件就需要P和Q同时参加，其理由见2.2。然而，属于aP但
当把这样的两个进程组装到一起并发运行时，它们字母表中共有
CUST = (coin-→(toffee-→CUST|curse-→choc-→CUST))
aCUST = {eoin,choc,curse,toffec}
(NOISYVM|CUST) = μX,(coin→(olink-ourse
NOISYVM = (coin-→clink-→choc-→clunk-NOISYVM)
这台响个不停的售货机里已经售完太妃糖了，即
举例
合
aNOISYVM ={coin,choc,clink,clunk,tof fee }
+choc-→clunk-→X))
-→choc-=ctunk-→X|curse-clink
α(P1Q)=αPUαQ
6
---
## Page 73
则有（PIQ）=R12，而
第i列的位置上出发的可能的行为，其中i∈{1,2}，i∈{1,2,3}
方法来到画，就会很兀长。例如，设R；表示筹码由板上第i行、
是P和Q的动作的任意穿插。这种穿插如果不用并发性而其它
在此倒中，
筹码的行为可定义为
假设aP={up,down}
下，左、右移动。
X2
发生的可能性，不管人们是否喜欢这些事件。
抽象，忽略人的威情因素，只去描述进程字母表的事件发生或不
要块太妃糖而不愿意说句难听的话。数学公式作为一种对现实的
还要注意的是，
一个筹码从如图所示的方格开始，这个筹码可在板内上、
aQ={left,right}
Q=(right-→left-Q
P=(up→down-→P)
[left->right-Q)
R=(down-→R1right-→R22)
P和Q没有-·个共同事件。所以，
R=(up→Reg|left-→R|right-→R)
Re =(down-→R2/left-R2|right-=R23)
R,=(un→R|right→R2)
，数学公式是无法表现顾客的臧情的，他当然情愿
 P[Q
这个筹码的运动就
---
## Page 74
其中不出现并发算子，如下例。
且有 P'=P(2)
这里 C=(A∩B)U(A -αQ) U(B -αP)
5
L5A
L4B
b，但执行c和4时需要P和Q同时参加，陈述为
以下的几条法则说明，P可单独执行事件α，Q可单独执行事件
假设a∈(aP-αQ),b∈（aQ-aP)，且{o,d}≤(aP∩αQ)。那末
L1,2Ⅱ既是对称的叉是结合的
2.1节)类似，它们是
2.3.1
L5B
L4A
L3A
前三条法则是对并发性的扩展，它们和交互作用的法则（2.
我们可以用这些法则把由并发算子定义的进程重新定义，使
则(P|Q)=(2:C→P/Q')
H. Q=(y:B-→Q(y))
设P=（x:A→P（x))
这些法则可推广处理一般选择算子
((0(d+))+q|((0←q)d)+D) =(0+q)1(dD)
(c--P) [(c-→Q) = 0-→(PQ)
Q'=Q()
1法则
(c→P)I(b→Q) =b→((c→P)|Q)
(a→P)ll(c→Q)=a-→(PI(c→Q))
(c→P)I(d→Q)=STOP
=Q 
an
Rs=(up-→Ras|left→R2)
R2a=(down-→Rs1left-→R2)
否则
如果∈B
否则
如果&EA
若d
口
---
## Page 75
这里
这个函数是这样定义的
我们在1.7节中定义过的函教ismember(x,A)
表表示成符号的有限表A和B。要检验一符号是否在表中，就用
2.3.2实施
所以 (PlQ) =(a→→μX. (a→b→c→X
而且 P1(b→Q) =(a→(c→P)(b→Q)
于是 PIQ=(a→→P)(c→>b-→Q)
X1 设aP={a,c},αQ={b,c}
算子Ⅱ的实施可直接由L7导出。我们可以把运算对象的字母
要实施（PIQ)，调用函数
令P=(α-→c→P)
举例
Q=(o-=b-→Q)
=a-→c→(P|(b-→Q))
=a→((c→P)|(c-→b-→Q))
conourrent(P,A,B,Q) =aux(P,Q)
=μX,(a→b-→c-→x
((0+9)1d)+014-D) =
=(a→b-→((c-→P)Q)
[b→a-→c→(P(b->Q)))
|b→(PHQ))
[b→(PIQ))
concurrent(P,aP,aQ,Q)
[b-+4-→(-→X)
[b-→a-→o-→x))
因为是卫式
且由（1）式
由L4…(1)
·由（1）式
由L5
出定义
由L4
由L5
由L6
口