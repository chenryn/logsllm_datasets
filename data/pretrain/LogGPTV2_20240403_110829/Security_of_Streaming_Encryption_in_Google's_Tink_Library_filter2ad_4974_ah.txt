𝑖,1, . . . , 𝐶*
1 −(︁1 − 𝑝
)︁𝑞 ≤ 1 −(︁1 − 𝑝
)︁𝑞 ≤ 𝑝𝑞
2𝑘+2
2𝑘+2 ,
2𝑛𝑟
where the first inequality is due to the fact that 𝑛𝑟 ≥ 𝑘 + 2, and the second inequality is due to
Bernoulli’s inequality.
Wrapping up. Summing up, the adversary’s advantage is at least
𝑝𝑞
2𝑘+1 − 𝑝𝑞
2𝑘+2 = 𝑝𝑞
2𝑘+2 .
B.2 AE Attack
Let 𝛱 = (K, E, D) be a conventional AE scheme of 𝑘-bit key length and 𝑠-bit nonce length. Let
𝑝, 𝑞 ≥ 1 be integers such that 𝑝𝑞 ≤ 2𝑘.
The attack. Let 𝐴 be the empty-string AD. The adversary 𝒜 first picks an arbitrary message
𝑀 such that |𝑀| ≥ 𝑘 + 2, and an arbitrary nonce 𝑁. It then queries 𝐶𝑖 ← Enc(𝑖, 𝑁, 𝐴, 𝑀)
for every 𝑖 = 1, . . . , 𝑞. It then picks arbitrary distinct keys 𝐾1, . . . , 𝐾𝑝 ∈ {0, 1}𝑘, and computes
𝑗 ← E(𝐾𝑗, 𝑁, 𝐴, 𝑀) for every 𝑗 = 1, . . . , 𝑝. If there are 𝑖 ≤ 𝑞 and 𝑗 ≤ 𝑝 such that 𝐶𝑖 = 𝐶*
𝐶*
𝑗 then
the adversary outputs 1, otherwise the adversary outputs 0.
Real world’s analysis. In the real world, if there is an adversarial key 𝐾𝑗 that coincides with
the key of user 𝑖 then the adversary will output 1. Since the user keys are chosen uniformly at
random, this happens with probability
1 −(︁1 − 𝑝
)︁𝑞 ≥ 𝑝𝑞
2𝑘
2𝑘+1 .
where the last inequality is due to Lemma 4. Hence in the real world, the adversary outputs 1 with
probability at least 𝑝𝑞/2𝑘+1.
Ideal world’s analysis. Assume that there are no two keys 𝐾𝑖 and 𝐾𝑗 such that 𝐶*
𝑗 . For
real AE schemes, this assumption is very likely to hold if 𝑀 is long enough. In the ideal world,
the oracle answers are independent, truly random strings, and thus the chance that the adversary
outputs 1 is at most
𝑖 = 𝐶*
1 −(︁1 − 𝑝
)︁𝑞 ≤ 𝑝𝑞
2𝑘+2 ,
2𝑘+2
25
procedure Initialize
𝐾1, 𝐾2, . . . ←$ 𝒦; 𝑏 ←$ {0, 1}
𝜋1, 𝜋2, . . . ←$ Perm(𝑛)
procedure Finalize(𝑏′)
return (𝑏′ = 𝑏)
procedure Enc(𝑖, 𝑋)
𝑌1 ← 𝐸(𝐾𝑖, 𝑋); 𝑌0 ← 𝜋𝑖(𝑋)
return 𝑌𝑏
procedure Dec(𝑖, 𝑌 )
𝑋1 ← 𝐸−1(𝐾𝑖, 𝑌 ); 𝑋0 ← 𝜋
return 𝑋𝑏
−1
𝑖
(𝑌 )
Fig. 14: Game G±prp
𝐸
defining multi-user prp security of a blockcipher 𝐸.
where the inequality is due to Bernoulli’s inequality.
Wrapping up. Summing up, the adversary’s advantage is at least
2𝑘+1 − 𝑝𝑞
2𝑘+2 = 𝑝𝑞
𝑝𝑞
2𝑘+2 .
C Proof of Lemma 3
Our proof is based on the H-coefficient technique of Patarin [8,27] that we briefly review below.
The H-coefficient technique. The H-coefficient technique considers a deterministic distin-
guisher 𝒜 that tries to distinguish a “real” system S1 from an “ideal” system S0. The adversary’s
interactions with those systems define transcripts 𝒯1 and 𝒯0, respectivel. The following Lemma 5
bounds the statistical distance SD(𝒯1,𝒯0) between 𝒯1 and 𝒯0, namely the best distinguishing ad-
vantage of 𝒜 between S1 and S0.
Lemma 5.
good and bad ones. Further, suppose that there exists 𝜖 ≥ 0 such that 1 − pS1(𝜏)
transcript 𝜏. Then,
[8, 27] Suppose we can partition the set of valid transcripts for the ideal system into
pS0(𝜏) ≤ 𝜖 for every good
SD(𝒯1,𝒯0) ≤ 𝜖 + Pr[𝒯0 is bad] .
Strong multi-user PRP. We will prove a better result that DESX1 is a (multi-user) strong
PRP. We now define the notion. Let 𝐸 : 𝒦 × {0, 1}𝑛 → {0, 1}𝑛 be a blockcipher. Let Perm(𝑛) be
the set of all permutations on {0, 1}𝑛. For an adversary 𝒜, let
Adv±prp
𝐸
(𝒜) = 2 Pr[G±prp
𝐸
(𝒜)] − 1 ,
𝐸
be the advantage of the adversary against the multi-user strong PRP security of 𝐸, where game
G±prp
is defined in Fig. 14. This game is written as a standard-model notion; in the ideal-cipher
model, the adversary will be given oracle access to 𝐸 and its inverse as well. The (ordinary) PRP
notion is simply a special case of the strong PRP notion where adversaries are not allowed to make
Dec queries.
Results. The following Proposition 2 shows that DESX1 is a good strong PRP, which implies
Lemma 3.
26
Proposition 2. Let 𝐸 : {0, 1}𝑘 × {0, 1}𝑛 → {0, 1}𝑛 be a blockcipher that we model as an ideal
cipher, and let 𝐺 ← DESX1[𝐸]. Then for any adversary 𝒜 that makes at most 𝑝 ideal-cipher
queries and 𝑞 Enc/Dec queries,
Adv±prp
𝐺 (𝒜) ≤ 2𝑝𝑞 + 𝑞2
2𝑘+𝑛
.
Proof. Our proof is based on the H-coefficient technique. We will consider even a computationally
unbounded adversary, and thus we can assume that the adversary is deterministic and never repeats
a prior query. Assume further that the adversary never makes a redundant query: (i) if it queries
𝑌 ← Enc(𝑖, 𝑋) then it won’t query Dec(𝑖, 𝑌 ) and vice versa, and (ii) if it queries 𝑌 ← 𝐸(𝐽, 𝑋)
then it won’t query 𝐸−1(𝐽, 𝑌 ) and vice versa. The real system corresponds to game G±prp
with
challenge bit 𝑏 = 1, and the ideal system corresponds to game G±prp
with challenge bit 𝑏 = 0.
Setup. In the real world, after the adversary finishes querying, we will give it the keys 𝐾𝑖 = (𝐽𝑖, 𝐿𝑖)
of all users 𝑖 that the adversary queries. In the ideal world, we instead give the adversary truly
random strings 𝐾𝑖 ←$ {0, 1}𝑘+𝑛, independent of the transcript. This key revealing only helps the
adversary. Thus a transcript consists of the revealed keys and the following information:
– Ideal-cipher queries: For each query 𝑌 ← 𝐸(𝐽, 𝑋) or 𝑋 ← 𝐸−1(𝐽, 𝑌 ), we associate it with
– Evaluation queries: For each query 𝑌 ← Enc(𝑖, 𝑋) or 𝑋 ← Dec(𝑖, 𝑌 ), we associate it with
an entry (prim, 𝐽, 𝑋, 𝑌 ).
an entry (eval, 𝑖, 𝑋, 𝑌 ).
𝐺
𝐺
Defining bad transcripts. We say that a transcript is bad if one of the following happens
– There are entries (prim, 𝐽, 𝑋, 𝑌 ) and (eval, 𝑖, 𝑋*, 𝑌 *) such that (i) 𝐽 = 𝐽𝑖 and (ii) either 𝑋* =
𝑋 ⊕ 𝐿𝑖 or 𝑌 * = 𝑌 ⊕ 𝐿𝑖, where 𝐾𝑖 = 𝐽𝑖 ‖ 𝐿𝑖 is the key of user 𝑖 as indicated by the transcript.
In the real world these entries must be consistent, but it is unlikely in the ideal world.
– There are entries (eval, 𝑖, 𝑋, 𝑌 ) and (eval, 𝑗, 𝑋*, 𝑌 *), with 𝑖 ̸= 𝑗, such that (i) 𝐽𝑖 = 𝐽𝑗 and (ii)
either 𝑋 ⊕ 𝐿𝑖 = 𝑋* ⊕ 𝐿𝑗 or 𝑌 ⊕ 𝐿𝑖 = 𝑌 * ⊕ 𝐿𝑗, where 𝐾𝑖 = 𝐽𝑖 ‖ 𝐿𝑖 and 𝐾𝑗 = 𝐽𝑗 ‖ 𝐿𝑗 are the
keys of users 𝑖 and 𝑗 respectively as indicated by the transcript. In the real world these entries
must be consistent, but it is unlikely in the ideal world.
If a transcript is not bad then we say that it’s good.
Probability of bad transcripts. Let 𝒯0 be the random variable for the transcript in the ideal
system. We now bound the probability that 𝒯0 is bad. For each 𝑖 ∈ {1, 2}, let Bad𝑖 be the set of
transcripts that violates the 𝑖-th constraint of badness.
We first bound the probability that 𝒯0 ∈ Bad1. Consider a pair of entries (prim, 𝐽, 𝑋, 𝑌 ) and
(eval, 𝑖, 𝑋*, 𝑌 *). Recall that in the ideal world, 𝐽𝑖 and 𝐿𝑖 are uniformly random, independent of
those entries. Thus the chance that 𝐽 = 𝐽𝑖 and either 𝑋* = 𝑋 ⊕ 𝐿𝑖 or 𝑌 * = 𝑌 ⊕ 𝐿𝑖 is at most
2/2𝑘+𝑛. Summing that over 𝑝𝑞 pairs of such entries,
Pr[𝒯0 ∈ Bad1] ≤ 2𝑝𝑞
2𝑘+𝑛 .
27
We next bound the probability that 𝒯0 ∈ Bad2. Consider a pair of entries (eval, 𝑖, 𝑋, 𝑌 ) and
(eval, 𝑗, 𝑋*, 𝑌 *), with 𝑖 ̸= 𝑗. Recall that in the ideal world, 𝐽𝑖, 𝐽𝑗, 𝐿𝑖, 𝐿𝑗 are uniformly random,
independent of those entries. Thus the chance that 𝐽𝑖 = 𝐽𝑗 and either 𝑋 ⊕ 𝐿𝑖 = 𝑋* ⊕ 𝐿𝑗 or
𝑌 ⊕ 𝐿𝑖 = 𝑌 * ⊕ 𝐿𝑗 is at most 2/2𝑘+𝑛. Summing that over(︀𝑞
Pr[𝒯0 ∈ Bad2] ≤ 𝑞2
2
)︀ ≤ 𝑞2
2 pairs of such entries,
2𝑘+𝑛 .
Summing up,
Pr[𝒯0 is bad] ≤ Pr[𝒯0 ∈ Bad1] + Pr[𝒯0 ∈ Bad2] ≤ 2𝑝𝑞 + 𝑞2
2𝑘+𝑛
.
(3)
Transcript ratio. Fix a good transcript 𝜏. For a key 𝐽 ∈ {0, 1}𝑘, let 𝑉 (𝐽) be the number
of entries (prim, 𝐽, 𝑋, 𝑌 ), and let 𝑈(𝐽) be the number of entries (eval, 𝑖, 𝑋, 𝑌 ) such that 𝐽𝑖 = 𝐽.
Suppose that the transcript 𝜏 contains exactly 𝑢 users. Then in the ideal world,
Pr[𝒯0 = 𝜏] ≤ 2−𝑢(𝑘+𝑛) ∏︁
𝑉 (𝐽)−1∏︁
𝐽∈{0,1}𝑘
𝑖=0
𝑈(𝐽)−1∏︁
𝑗=0
1
2𝑛 − 𝑗
.
1