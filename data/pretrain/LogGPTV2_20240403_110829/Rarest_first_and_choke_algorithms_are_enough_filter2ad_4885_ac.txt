pieces downloaded before switching from random to rarest
ﬁrst piece selection (default to 4).
We did all our experimentations on a machine connected
to a high speed backbone. However, the upload capacity
is limited by default by the client to 20 kB/s. There is
no limit to the download capacity. We obtained eﬀective
maximum download speed ranging from 20 kB/s up to 1500
kB/s depending on the experiments. We ran between 1 and
3 experiments on the 26 diﬀerent torrents given in Table 1
and performed a detailed analysis of each of these traces.
The results given in this paper are for a single run for each
torrent. Multiple runs on some torrents were used in a cali-
bration phase as explained in section 3.5.1.
Finally, whereas we have control over the monitored main-
line client, we do not control any other client in a torrent.
In particular, all peers in the peer set of the local peer are
real live peers.
3.4 Peer Identiﬁcation
In our experiments, we uniquely identify a peer by its
IP address and peer ID. The peer ID, which is 20 bytes, is
a string composed of the client ID and a randomly gener-
ated string. This random string is regenerated each time
the client is restarted. The client ID is a string composed
of the client name and version number, e.g., M4-0-2 for the
mainline client in version 4.0.2. We are aware of around
20 diﬀerent BitTorrent clients, each client existing in sev-
eral diﬀerent versions. When in a given experiment, we see
several peer IDs corresponding to the same IP address3, we
compare the client ID of the diﬀerent peer IDs. In the case
the client ID is the same for all the peer IDs on a same
IP address, we deem that this is the same peer. We can-
not rely on the peer ID comparison, as the random string
is regenerated each time a client crashes or restarts. The
pair (IP, client ID) does not guarantee that each peer can
be uniquely identiﬁed, because several peers beyond a NAT
can use the same client in the same version. However, con-
sidering the large number of client IDs, it is common in our
experiments to observe 15 diﬀerent client IDs, the probabil-
ity to have several diﬀerent clients beyond a NAT with the
same client ID is reasonably low for our purposes. More-
over, unlike what was reported by Bhagwan et al.
[4] for
the Overnet ﬁle sharing network, we did not see any prob-
lem of peer identiﬁcation due to NATs. In fact, BitTorrent
has an option, activated by default, to prevent accepting
multiple concurrent incoming connections from the same IP
address. The idea is to prevent peers to increase their share
of the torrent, by opening multiple clients from the same
machine. Therefore, even if we found in our traces diﬀer-
ent peers with the same IP address at diﬀerent moments in
time, two diﬀerent peers with the same IP address cannot
be connected to the local peer during overlapping periods.
3.5 Limitations and Interpretation of the Re-
sults
In this section we discuss the two main limitations of this
work, namely the single client instrumentation and the lim-
ited set of monitored torrents. We also discuss why, de-
spite these limitations, we believe our conclusions hold for a
broader range of scenarios than the ones presented.
3.5.1 Single Client Instrumentation
We have chosen for this study to focus on the behavior
of a single client in a real torrent. Whereas it may be ar-
gued that a larger number of instrumented peers would have
given a better understanding of the torrents, we made the
3Between 0% and 26% of the IP addresses, depending on
the experiments, are associated in our traces to more than
one peer ID. The mean is around 9%.
decision to be as unobtrusive as possible.
Increasing the
number of instrumented clients would have required to ei-
ther control those clients ourselves, or to ask some peers to
use our instrumented client. In both cases, the choice of the
instrumented peer set would have been biased, and the be-
havior of the torrent impacted. Instead, our decision was to
understand how a new peer (our instrumented peer) joining
a real torrent behaves.
Moreover, monitoring a single client does not adversely
impact the generality of our ﬁndings for the following rea-
sons. First, a torrent is a random graph of interconnected
peers. For this reason, with a large peer set of 80, each
peer should have a view of the torrent as representative
as any other peer. Even if each peer will see variations
due to the random choice of the population in its peer set,
the big picture will remain the same. Second, in order to
make sure that there is no unforeseen bias due to the sin-
gle client instrumentation, we have monitored several tor-
rents with three diﬀerent peers, each peer with a diﬀerent
IP address. These experiments were performed during a
calibration phase, and are not presented here due to space
limitation. Whereas the download speed of the peers may
signiﬁcantly vary, e.g., due to very fast seeds that may of
may not be present in the peer set of a monitored client, we
did not observe any other signiﬁcant diﬀerence among the
clients that may challenge the generality of our ﬁndings.
3.5.2 Limited Torrent Set
We have considered for this study 26 diﬀerent torrents.
Whereas it is a large number of torrents, it is not large
enough to be exhaustive or to be representative of all the
torrents that can be found in the Internet. However, our in-
tent is to evaluate the behavior of the rarest ﬁrst and choke
algorithm in a variety of situations. The choice of the tor-
rents considered in this study was targeted to provide a chal-
lenging environment to the rarest ﬁrst and choke algorithms.
For instance, torrents with no seed (torrent 1) or with only
one seed and a large number of leechers (e.g., torrent 7–
11) were speciﬁcally chosen to evaluate how the rarest ﬁrst
algorithm behaves in the context of pieces scarcity. Tor-
rents with a large number of peers were selected to evaluate
how the choke algorithm behaves when the torrent is large
enough to favor free riders.
We have around half of the presented torrents with no or
few seeds, as this is a challenging situation for a peer-to-
peer protocol. However, it can be argued that the largest
presented torrent with a single seed has a small number of
leechers (1441 leechers at the beginning of the experiment
for torrent 11). Indeed, the target of a peer-to-peer protocol
is to distribute content to millions of peers. But, a peer-
to-peer protocol capitalizes on the bandwidth of each peer.
Thus, it is not possible to scale to millions of peers without
a signiﬁcant proportion of seeds. If we take the same pro-
portion of seeds and leechers as the one of torrent 11, only
710 seeds are enough to scale to one million of peers. Also,
−3 is
a torrent with a ratio number of seeds
number of leechers
enough to stress a piece selection strategy based on a local
view of only 80 peers.
lower than 10
Finally, in such an experimental study it is not possible to
reproduce an experiment, and thus to gain statistical infor-
mation because each experiment depends on the behavior
of peers, the number of seeds and leechers in the torrent,
and the subset of peers randomly returned by the tracker.
However, studying the dynamics of the protocol is as impor-
tant as studying its statistical properties. As we considered
torrents with diﬀerent characteristics and observed a con-
sistent behavior on these torrents, we believe our ﬁndings
to be representative of the rarest ﬁrst and choke algorithms
behavior.
4. EXPERIMENTAL RESULTS
We present in this section the results of our experiments.
In a ﬁrst part, we discuss the results with a focus on the
rarest ﬁrst algorithms. Then, in a second part, we discuss
the results with a focus on the choke algorithm.
4.1 Rarest First Algorithm
The aim of a piece selection strategy is to guarantee that
each peer is always interested in any other peer. The ratio-
nal is that each time the peer selection strategy unchokes
a peer, this peer must be interested in the unchoking peer.
This way, the peer selection strategy can reach the optimal
system capacity (but, designing such an optimal peer selec-
tion strategy is a hard task). Therefore, the piece selection
strategy is fundamental to reach good system capacity.
However, the eﬃciency of the piece selection strategy can-
not be measured in terms of system capacity, because the
system capacity is the result of both the piece and peer se-
lection strategies. A good way to evaluate the eﬃciency of
the piece selection strategy is to measure the entropy of the
torrent, i.e., the repartition of pieces among peers.
There is no simple way to directly measure the entropy
of a torrent. For this reason, we characterize the entropy
with the peer availability. We deﬁne the peer availability of
peer x according to peer y as the ratio of the time peer y
is interested (see section 2.1) in peer x over the time peer
x is in the peer set of peer y. If peer x is always available
for peer y, then the peer availability is equal to one.
In
the following, we characterize the entropy of a torrent with
the availability of the peers in this torrent. For the sake of
clarity, we will simply refer to the notion of entropy.
We say that there is ideal entropy in a torrent when each
leecher4 is always interested in any other leecher. We do
not claim that ideal entropy can be always achieved, but
it should be the objective of any eﬃcient piece selection
strategy.
We evaluated the rarest ﬁrst algorithm on a representa-
tive set of real torrents. We showed that the rarest ﬁrst
algorithm achieves a close to ideal entropy, and that its re-
placement by more complex solutions cannot be justiﬁed.
Then, we evaluated the dynamics of the rarest ﬁrst algo-
rithm to understand the reasons for this good entropy. Fi-
nally, we focused on a speciﬁc problem called the last pieces
problem, which is presented [11, 18] as a major weakness
of the rarest ﬁrst strategy. We showed that the last pieces
problem is overestimated. In contrast, we identiﬁed a ﬁrst
blocks problem, which is a major area of improvement for
BitTorrent.
4.1.1 Entropy Characterization
The major ﬁnding of this section is that the rarest ﬁrst
algorithm achieves a close to ideal entropy for real torrents.
We remind that ideal entropy is achieved when each leecher
is always interested in any other leecher. As we do not have
global knowledge of the torrent, we characterize the entropy
from the point of view of the local peer with two ratios. For
each remote peer we compute:
4Only the case of leechers is relevant for the entropy char-
acterization, as seeds are always interesting for leechers and
never interested in leechers.
Interest of the Local Peer in the Remote Peers
5
25
Interest of the Remote Peers in the Local Peer
10
15
20
1
0.5
b
/
a
o
i
t
a
R
0
0
1
d
/
c
o
i
t
a
R
0.5
0
0
5
10
15
Torrent ID
20
25
Figure 1: Entropy characterization. Top graph: For each
remote leecher peer for a given torrent, a dot represents the
ratio a
b where a is the time the local peer in leecher state is
interested in this remote peer and b is the time this remote
peer spent in the peer set when the local peer is in leecher
state. Bottom graph: For each remote leecher peer for a
given torrent, a dot represents the ratio c
d where c is the time
this remote peer is interested in the local peer in leecher state
and d is the time this remote peer spent in the peer set when
the local peer is in leecher state. For both graphs: Each
vertical solid lines represent the 20th percentile (bottom of
the line), the median (identiﬁed with a circle), and the 80th
percentile (top of the line) of the ratios for a given torrent.
(cid:129) the ratio a
b where a is the time the local peer in leecher
state is interested in this remote peer and b is the time
this remote peer spent in the peer set when the local
peer is in leecher state;
(cid:129) the ratio c
d where c is the time this remote peer is
interested in the local peer in leecher state and d is
the time this remote peer spent in the peer set when
the local peer is in leecher state.
In the case of ideal entropy the above ratios should be one.
Fig. 1 gives a characterization of the entropy for the torrents
considered in this study.
For most of our torrents, we see in Fig. 1 that the ratios
are close to 1, thus a close to ideal entropy. For the top
graph, 70% of the torrents have the 20th percentile close to
one, and 80% have the median close to one. For the bottom
graph, 70% of the torrents have a 20th percentile close to
one, and 90% of the torrents have the median close to one.
We discuss below the case of the torrents with low entropy.
First, we discuss why the local peer is often not interested
in the remote peers for torrents 1, 2, 4, 5, 6, 7, 8, and 9 (see
Fig. 1, top graph). These torrents have low entropy because
they are in a startup phase. This means that the initial seed
has not yet served all the pieces of the content. We remind
that the pieces only present on the initial seed are the rare
pieces, and that the pieces already served at least once by
the initial seed are the available pieces (see section 2.1). The
reason for the low observed entropy is that during a torrent
startup, available pieces are replicated with an exponential
capacity of service [26], but rare pieces are served by the
initial seed at a constant rate. Thus, available pieces are
replicated faster than rare pieces. This leads to two prob-
lems. First, the probability of having peers in a peer set
with the same subset of pieces is higher during the torrent
startup than when there is no rare piece in the torrent. Sec-
ond, when there is no rare piece, a peer with all the available
pieces becomes a seed. But, when there are rare pieces, a
peer with all the available pieces remains a leecher because
it does not have the rare pieces. However, these leechers
cannot be interested in any other peer as they have all the
available pieces at this point of time, but they stay in the
peer set of the local peer. Thus a low ratio for these leechers
in Fig. 1. In conclusion, the low entropy we observed is not
due to a deﬁciency of the rarest ﬁrst algorithm, but to the
startup phase of the torrent whose duration depends only on
the upload capacity of the initial seed. We discuss further
this point in section 4.1.2.1.
Now, we discuss why the remote peers are often not in-
terested in the local peer for torrents 2, 4, 10, 18, 19, 21,
and 26 (see Fig. 1, bottom graph). No dot is displayed for
torrent 19 because due to the small number of leechers in
this torrent, the local peer in leecher state had no leecher
in its peer set. Five torrents have a 20th percentile close to
0. The percentile for four of these torrents is computed on
a small number of ratios: 3, 8, 12, and 15 for torrents 2,
18, 21 and 26 respectively. Therefore, the 20th percentile
is not representative as it is not computed on a set large
enough. Additionally, the reason for the low 20th percentile
is peers with a ratio of 0. We identiﬁed two reasons for a
ratio of 0. First, some peers join the peer set with almost all
pieces. They are therefore unlikely to be interested in the
local peer. Second, some peers with no or few pieces never
sent an interested message to the local peer. This can be
explained by a client behavior changed with a plugin or an
option activation. The super seeding option [3] available in
several BitTorrent clients has this eﬀect. In conclusion, the
low entropy of some peers is either a measurement artifact
due to modiﬁed or misbehaving clients, or the result of the
inability of the rarest ﬁrst algorithm to reach ideal entropy
in some extreme cases.
We have seen that peers that join the torrent with almost
all pieces may not be interested in the local peer. In this
scenario, the rarest ﬁrst algorithm does not guarantee ideal
entropy. However, we argue that this case does not justify
the replacement of the rarest ﬁrst algorithm for two reasons.
First, this case appears rarely and does not signiﬁcantly im-
pact the overall entropy of the torrent. Second, the peers
with low entropy are peers that join the peer set with only
a few missing pieces.
In the case of torrent startup, it is
not clear whether a solution based, for instance, on source
or network coding would have proposed interesting pieces
to such peers. Indeed, when content is split into k pieces,
there is no solution based on coding that can reconstruct
the content in less than k pieces. For this reason, when the
initial seed has not yet sent at least one copy of each piece,
there is no way to reconstruct the content, so no way to have
interesting pieces for all the peers.
An important question is how rarest ﬁrst compares with
network coding in the presented scenarios. As there is no
client based on network coding that is as popular as Bit-