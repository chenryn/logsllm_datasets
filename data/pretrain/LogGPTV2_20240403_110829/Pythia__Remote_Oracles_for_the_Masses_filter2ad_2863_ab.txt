side channels. We present an overview of RDMA-based side
channels, two basic attacks, reﬁned attacks with our reverse
engineered knowledge of RNIC internals, and evaluation re-
sults of the attacks. Unless otherwise stated, all our experi-
ments use three machines, each equipped with a Mellanox
ConnectX-4 100 Gbps network adapter [48], two Intel Xeon
E5-2620 2.40GHz CPUs, and 128 GB main memory. They
are connected with a Mellanox SB7700 100 Gbps InﬁniBand
switch [50]. One machine is used as the server that serves
in-memory data through RDMA. The other two machines
are the victim client machine and the attacker client machine,
both of which can perform RDMA operations to access data
on the server. In all the experiments in this section, the vic-
tim has a 50% chance of accessing the targeted data that the
attacker tries to infer accesses on.
4.1 Attack Overview
The basic idea of our side-channel attacks is to exploit two
weaknesses in RNIC: 1) the RNIC caches metadata in its
SRAM, RDMA accesses whose metadata is not in SRAM
must wait until that data is fetched from main memory, and
2) all RDMA accesses from all applications share the RNIC
SRAM. As explained in Section 2.2, RNICs store three types
of metadata in their SRAM: QP information, MR information,
and PTEs. An RDMA access involves all three types of meta-
data: upon receiving a network request, an RNIC needs to
locate which QP the request belongs to, which MR it falls into,
and which page it is accessing. If any of these metadata is
not in the RNIC SRAM, the RNIC will fetch it from the host
memory, stalling the request until the required data arrives. By
exploiting this timing difference, we can launch side-channel
attacks to know which QP, which MR, and which PTE the
victim has accessed.
Traditional CPU-cache-based side-channel attacks take
three major forms: prime-based (e.g., PRIME+PROBE [1–4,
42, 59, 75, 90]), ﬂush-based (e.g., FLUSH+RELOAD [86]), and
evict-based (e.g., EVICT+RELOAD [30]). Because RNICs
do not provide any interface to ﬂush their SRAM, all ﬂush-
based side-channel attacks such as FLUSH+RELOAD [86] and
FLUSH+FLUSH [29] are incompatible with RDMA. All the
operations that are needed in prime-based and evict-based
attacks can be implemented through RDMA network requests
that an attacker performs over the network. Attackers can hide
their traces during the attacks, since one-sided RDMA reads
are oblivious to the server or other clients. Hardware perfor-
mance counters [35] may help servers track DMA trafﬁc, but
it is challenging to associate trafﬁc with RDMA accesses or
attacks. Even if the server suspects that an attack is happening,
it is still hard, in practice, to attribute an attack based on trafﬁc
For the rest of the paper, we focus on RDMA-based
EVICT+RELOAD attacks. PRIME+PROBE attacks are also
possible on RDMA and we brieﬂy discuss them in Section 7.
4.2 Unique Advantages and Challenges
There are three unique advantages for attackers in RDMA
systems. First, RDMA’s one-sided communication pattern
allows the attacker to hide her traces, since the receiving node
is unaware of any one-sided accesses. Second, the RDMA
network is much faster both in latency and in bandwidth
than traditional datacenter networks. The latest generation
of RDMA switches and RNICs can sustain 200 Gbps band-
width and under 0.6 µs latency [53]. RDMA’s superior perfor-
mance enables ﬁne-grained, high-throughput, timing-based
side-channel attacks over the network. Finally, RDMA’s one-
sided communication bypasses the sender’s OS and does not
involve CPU at the receiver, both of which help reduce distur-
bance to timing-based attacks.
At the same time, attacking the RNIC presents several
novel challenges that no CPU-cache-based side-channel at-
tack experiences. First, it is hard to discover efﬁcient side
channels in RNIC hardware. Unlike CPU caches, there is no
public knowledge of how RNICs organize or use their SRAM.
RNICs store different types of information in SRAM com-
pared to a linear layout of CPU caches. Second, we set a strict
threat model where attacks are launched from a separate ma-
chine that is different from the victim’s machine and the server
machine. This goal means that attacks have to be performed
using RDMA network requests only. Finally, since our side
channels are established over the network, noise in the net-
work could potentially increase difﬁculties for timing-based
attacks.
4.3 Basic Attack
Before presenting our side-channel attacks, we ﬁrst discuss
the type of victim information we choose as our attack target
and the type of metadata we use to perform the eviction phase.
Notice that these two dimensions are orthogonal and both
have three options: QP, MR, and PTE.
Among these three types of information, knowing which
QP the victim accesses leaks little information about the vic-
tim and usually is not useful in real attacks. MRs and PTEs
can both leak more information. Using PTE as the attack tar-
get unit will reveal memory page (in virtual memory) accesses.
All OSes use 4 KB as the default page size. The MR size is
decided by the application that creates and registers it. For
performance reasons [55], most RDMA-based applications
choose to use large MRs. Thus, we choose PTE as the target
of our attack. However, most of our ideas and techniques can
be used to perform attacks that target MRs.
After choosing the attack target, we must decide what meta-
data to use to evict RNIC SRAM. To answer this question,
we tried to evict SRAM using the three types of metadata and
696    28th USENIX Security Symposium
USENIX Association
:a target victim virtual memory address
Algorithm 1: MR-based eviction
Input
Output :
if No access to sufﬁcient amount of MRs then
start process at server to create MR_set;
else
foreach MR that the attacker has access to do
if MR (cid:54)= victim’s MR then
insert MR into MR_set;
end
end
end
foreach MR in MR_set do
perform 8-byte RDMA-read to MR;
end
reload our targeted information (i.e., PTE). We can success-
fully evict a PTE with PTEs, no matter whether or not the
PTEs we use to evict belong to the same MR as the target
PTE. We can also evict an MR with other MRs. We further
ﬁnd that when an MR is evicted, PTEs of all the pages be-
longing to this MR will also be evicted. But we can only use
QPs to evict QP. This behavior implies that RNICs isolates
the SRAM used for QPs and for MRs and PTEs. We present
the evaluation results in Section 4.5. From this initial test, we
discovered that we can evict a PTE by either evicting the MR
it belongs to (using a large number of MRs) or by evicting
the PTE directly using a large number of other PTEs.
4.3.1 Eviction by MRs
We now present our attack that evicts SRAM with MRs,
PythiaMR. Algorithm 1 presents the pseudocode of
PythiaMR.
Because the MR-based attack requires the attacker to use
many MRs to evict the server’s RNIC SRAM, the attacker
requires access to a sufﬁcient amount of MRs. If the number of
MRs is restricted, the attacker may resort to a (hypothetical)
MR gadget that allows her to register multiple MRs. One
approach is to launch a process on the server that allows her
to register multiple MRs (see Section 5.1 for details). Since
RDMA provides the functionality of registering multiple MRs
with the same memory space, the attacker process at the server
only needs to allocate a small memory space (of arbitrary
size) and register it multiple times. This process then needs to
send the rkeys corresponding to these registered MRs to the
attacker running on a client machine.
In the eviction phase, the attacker performs one-sided
RDMA reads from a client machine to the MRs it has access
to at the server (except for the MR that the victim PTE is in).
Since the server’s RNIC needs to fetch and store metadata for
each MR when the MR is accessed, its SRAM will eventually
be ﬁlled with MR metadata that the attacker accessed.
:a target victim virtual memory address
Algorithm 2: Naive PTE-based eviction
Input
Output :
VictimVPN ← victim_address >> 12;
generate eviction_set using VictimVPN;
foreach VPN in eviction_set do
perform 8-byte RDMA-read to address VPN << 12;
end
Algorithm 3: Reload and predict
Input
Output :prediction of if the victim has accessed the target
:a target victim virtual memory address
address
determine Threshold according to network status;
start timer;
RDMA-read victim_address;
end timer;
time ← elapsed_time;
if time < Threshold then
output accessed;
output not_accessed;
else
end
4.3.2 Eviction by PTEs
Alternatively, we can use PTEs to establish a side channel.
Compared to MR-based attacks, PTE-based attacks can often
be performed entirely from a client machine. Algorithm 2
presents the pseudocode of our PTE-based attack.
To perform PTE-based eviction, the attacker issues one-
sided RDMA reads to a sufﬁciently big memory space (1 GB
to 4 GB for the RNICs we study). Most RDMA-based appli-
cations are services that provide in-memory data storage and
use a large amount of memory, thus meeting the requirements
of PTE-based attacks.
Accessing different memory pages will cause the RNIC to
fetch PTEs to its SRAM. Because all accesses to the same
memory page will hit the same PTE, we only need to perform
one RDMA read (with the smallest RDMA operation size
of 8 bytes) in every 4 KB virtual memory address range. To
avoid loading the PTE that the victim accesses, we skip the
memory addresses that are close to the victim address.
4.3.3 Reload and Predict
After the eviction phase (either by MRs or by PTEs), the
attacker reloads the targeted victim data. If the reload time
is smaller than a threshold, the attacker determines that the
data has been accessed by the victim. Algorithm 3 presents
the pseudocode of the reload and prediction process.
The threshold used at the reload time directly affects the
result of an attack. Different from traditional CPU-cache side-
USENIX Association
28th USENIX Security Symposium    697
channel attacks, our attacks are in a distributed environment
where network status can vary with other workloads in the
datacenter. Thus, instead of a ﬁxed threshold, we adapt the
threshold dynamically according to the network status. To
adjust the threshold, the attacker periodically measures the
latency of an RDMA operation which hits the RNIC SRAM
and the latency of one that misses the SRAM. The threshold
can be set as a value in the middle of these two latencies.
In addition to using an average threshold, other more ad-
vanced methods can also be used to determine the reload
result. In fact, we design a statistical method to determine
the reload result for our real-application attacks, as will be
presented in Section 5.
4.4 Finding PTE Eviction Sets
We call the attack that uses the eviction phase presented in Sec-
tion 4.3.2 the basic PTE-based attack, or PythiaPTEBasic. In
order to reduce the time to perform eviction and improve the
efﬁciency of PythiaPTEBasic, we search for a smaller eviction
set that achieves similar accuracy as PythiaPTEBasic. Speciﬁ-
cally, we perform a set of experiments to systematically re-
verse engineer the internal organization of RNIC SRAM and
use our learned knowledge to construct a minimal PTE evic-
tion set.
Reverse engineering RNIC SRAM organization is signiﬁ-
cantly harder than reverse engineering traditional CPU caches
because there is no public knowledge of the internal organi-
zation of any RNIC. All we know is that the RNIC caches
three types of metadata (PTEs, MRs, and QPs) in its SRAM.
Moreover, reverse engineering the RNIC involves network
operations which add noise compared to a well-isolated CPU
cache environment.
First attempt in ﬁnding index bits. We initially guess
that RNICs organize their in-SRAM PTE caches as set-
associative caches, similar to how CPUs organize their caches.
To validate this guess, we assume that the PTE cache is or-
ganized as a ﬁxed number of sets (e.g., 2, 4, 8) and different
number of bits (e.g., 1, 2, 3) are used to calculate the index into
these sets. Since PTEs are identiﬁed by virtual page number
(VPN), we can ignore the lowest 12 bits (with page size being
4 KB). We then use the lowest K bits of VPNs to calculate the
index into one of the 2K cache sets. These K bits correspond
to the 12th to the (11 + K)th bits of the full virtual memory
address (we call the lowest bit the 0th bit and count upwards
to higher bits).
We call the VPN of a victim memory address VictimVPN.
The eviction set of a VictimVPN is formed by setting the same
K bits as the VictimVPN and varying other bits in VPNs. To
put it another way, for every 2K pages, we pick one VPN to
add to the eviction set. We keep adding distinct VPNs in this
way until the number of VPNs in the set reaches an eviction
set size. Algorithm 4 presents the pseudocode of how we
form an eviction set. This is our straw-man approach and we
call the PTE-based attack that uses this approach of forming
:VictimVPN, eviction set size, num of index bits
Algorithm 4: Forming Eviction Set - Strawman
Input
Output :an eviction set targeting VictimVPN
eviction_set ← {};
mask = VictimVPN & (1 << num_index_bits− 1);
for i = 0 to evict_set_size do
VPN ← i << num_index_bits + mask;
if VPN (cid:54)= VictimVPN then
insert VPN into eviction_set;
end
end
output eviction_set;
eviction sets PythiaPTEStraw.
Figure 2 plots the attack accuracy when we vary K from
0 to 15. We use two groups of attacks on VictimVPN 0. In
the ﬁrst group (the solid line), each eviction set has 27 = 128
operations. The accuracy keeps improving until K is 13 and
then ﬂattens out. This result hints at the possibility of the
RNIC using a set-associative cache with 213 = 8192 sets. It
is because when K is smaller than 13, part of the operations
in the eviction set will fall into a different cache set as the
VictimVPN’s set, making the eviction set too small to evict
the whole victim’s cache set.
To verify this guess, we perform a second group of attacks
(the dashed line). In this group, we double the eviction set size
every time when we decrease K by 1. For example, we set the
eviction set size to 128 when K is 13 and to 256 when K is 12.
If the RNIC uses 8192 cache sets, then when K is 13, all of
the eviction set will fall into the VictimVPN’s set, and when K
is 12, half of the eviction set will fall into the VictimVPN’s set.
These two attacks will then have the same effect in evicting
the VictimVPN. Our results conﬁrm this assumption. When K
is less than 13, the attack accuracy is similar to when K is 13.
However, when K is larger than 14, the accuracy drops. This