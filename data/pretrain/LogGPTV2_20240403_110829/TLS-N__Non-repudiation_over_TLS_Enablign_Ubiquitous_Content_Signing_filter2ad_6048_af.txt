ReturnEvidence
1 2 3 \ 0
9 8 7 \ 0
E v i d e n c e ( A u t h .
(cid:107) 1 2 3)
.
.
w
o
d
n
W
i
e
c
n
e
d
i
v
E
AuthXXXXXXXXX
XXXXX\0
Reqy\0
1 2 3 \ 0
w
o
d
n
W
i
e
c
n
e
d
i
v
E
Figure 5: Content Reordering Attack:
The left (cid:27)gure shows the original and
the right (cid:27)gure the signed conversation.
Due to content reordering, the response
123 seems to belong to request y, which
is incorrect.
Figure 6: Content Omission Attack: The
left (cid:27)gure shows the original and the
right (cid:27)gure the signed conversation.
Since context is missing in the signed
conversation, the response 123 appears
to belong to request y which is incorrect.
Figure 7: Content Hiding Attack: The
left (cid:27)gure shows the original and the
right (cid:27)gure the signed conversation.
The veri(cid:27)er can not determine whether
a long password was used or an addi-
tional request took place.
the existing PKI from the application layer would require the expo-
sure of private keys.
As explained in the previous section, earlier works are vulnera-
ble to a number of attacks and do not achieve all of the desirable
properties. Furthermore, they don’t easily allow the speci(cid:27)cation
of the evidence window and, therefore, limit usability. The protec-
tion of sensitive information moreover is only feasible on a record
granularity which is impractical for most applications (e.g., stock
market API).
6.2.1 A(cid:29)acks on Existing TLS Solutions. In this section we present
attacks against existing TLS solutions apart from the already ex-
plained attack on MAC Chaining.
Time Shifting Attack. In Section 2 we described why proofs
should contain timing information. However, an adversary act-
ing as requester can manipulate time information included in the
proof. The possible kind of manipulation depends the kind of tim-
ing information included in the proof.
If a single timestamp is included, the adversary can manipulate
the connection according to its type. If the proof generation time is
included, the adversary can request the information at time t, then
keep the connection open for a time duration ∆t and (cid:27)nally request
the proof at time t(cid:48) = t + ∆t. Note that ∆t may be substantial as
TLS connections can be long lived. Therefore, the proof contains
timestamp t(cid:48) for content requested at time t. Even if ∆t is only in
the order of minutes, this could have big impacts for data feeds such
as stock prices or currency exchange rates. Thus, if such attacks are
possible, the timing information is not trustworthy, violating P4.
Content Reordering Attack. As our system makes no assumptions
about the higher level protocol, we must assume that there are cases
where the order of messages is important. In particular, the veri(cid:27)er
should be able to identify the message order from the perspective
of the generator, i.e. the relative order of sent and received messages.
If the adversary can perform a partial content reordering or the
content order is not clear from the proof, unforgeability is violated.
The scheme cannot prove non-repudiation of conversation (NRC)
as the context is unclear. An example relevant for TLS Sign and
TLS Evidence is shown in Figure 5.
Content Omission Attack. If the adversary acts as the requester
and if the evidence window does not start right after the TLS hand-
shake, i.e., the non-repudiation service allows omission of content
as in TLS Sign or TLS Evidence, P2 is violated. Figure 6 shows a
scenario where the adversary requests a resource x before opening
the evidence window, immediately requesting another resource y
and closing the evidence window. Now, only two records are in the
evidence window: the request for y and the response for x.
If the upper-level protocol does not supply any resource identi(cid:27)er
in the response, as is the case for HTTP 1.x, it appears to a veri(cid:27)er
that x was the legitimate response to the request for y. Therefore
such non-repudiation services provide no request-response binding
and cannot provide a NRC.
Content Hiding Attack. In this attack the adversary hides im-
portant communication content of variable-length protocols by
abusing the privacy protection features. In particular, the adversary
hides a part of the communication, e.g. a complete request, in order
to trick the veri(cid:27)er. An example is shown in Figure 7.
In Figure 7 we assume a simple protocol with three message
types: authentication with a password (Auth), requests with an
identi(cid:27)er (Req) and responses. As passwords, identi(cid:27)ers and re-
sponses can be of variable length, all messages are terminated with
a special character (\0).
The adversary (cid:27)rst starts evidence collection, then authenticates,
sends two requests for resources x and y and then requests the
evidence so that only the response for x will be included in the
evidence. If the non-repudiation service allows the protection of in-
formation, the adversary hides the password along with the request
for x (up until the terminating character). The veri(cid:27)er observe the
authentication with a hidden password, a request for y and the re-
sponse 123. The veri(cid:27)er therefore incorrectly assumes that 123 is
the correct response for resource y, even though it is 987.
Note that the adversary can send the authentication and the (cid:27)rst
request within the same TLS record, so that the veri(cid:27)er cannot use
TLS metadata to determine whether an additional request was sent.
6.3 Orthogonal Solutions
In the following, we describe orthogonal solutions that o(cid:29)er ev-
idence of TLS sessions using a trusted third party, e.g., TLSno-
tary [41] and Town Crier [45].
6.3.1 TLSnotary. TLSnotary [41] provides a service that allows
a third party auditor to attest a TLS connection between a server
and a client. If the client follows a particular protocol with a third
party auditor, while initiating a connection to a server, the third
11
party auditor is able to claim with certainty that the client provided
data that originated from the server. TLSnotary modi(cid:27)es the TLS
handshake protocol on the client side by leveraging particular prop-
erties of TLS 1.0 and TLS 1.1. The modi(cid:27)ed protocol prevents the
client from learning the TLS key material that would allow the client
to authenticate tra(cid:28)c from the server. More speci(cid:27)cally, the client
is not able to generate the server MAC key, only the third party
auditor is capable of doing so, e(cid:29)ectively preventing the client from
crafting tra(cid:28)c that seemingly originates from the server. After the
client provided a hash of the tra(cid:28)c, the third-party auditor releases
the TLS server MAC key. The client can then verify the message
authentication.
TLSnotary Limitations Although TLSnotary provides the capabil-
ity of notarizing TLS connections, it comes with several limitations
and security issues.
First, TLSnotary is only supported up to TLS 1.1. The properties
that are used by TLSnotary were removed in versions 1.2 and 1.3.
TLS 1.1 and below are considered less secure than current TLS ver-
sions. Second, TLSnotary uses and can only use the hash functions
MD5 and SHA-1, both of which can be considered deprecated [40].
Third, TLSnotary only supports the RSA key exchange, which does
not provide forward secrecy. Last, TLSnotary requires trust in a
third party in most use cases, e.g. if the evidence should be publicly
veri(cid:27)able. If the veri(cid:27)er takes the role of the auditor in the proto-
col, a trusted third party is not required. However, in that case, the
veri(cid:27)er needs to take part in the interactive protocol, i.e. evidence
of a past session cannot be provided.
6.3.2 Town Crier. Town Crier [45] is a system for authenticated
data feeds that leverages the Intel SGX technology to provide pub-
licly veri(cid:27)able evidence of the contents of a TLS session. It is in-
tended to provide veri(cid:27)able data feeds for smart contracts (e.g. on
the Ethereum blockchain [43]). The core of Town Crier runs in an
SGX enclave and can thus provide attestation that the correct code
was executed. Town Crier then forwards information that was pro-
vided by an HTTPS website to a smart contract on the blockchain.
Town Crier Limitations Similarly to TLSnotary, Town Crier re-
quires a trusted third party, i.e., a client of the service needs to trust
Intel since the attestation relies on the security of Intel SGX. In
contrast to TLSnotary, Town Crier always requires the trusted third
party. In addition, while Town Crier could be modi(cid:27)ed to provide
evidence of TLS sessions in general, it currently only provides data
feeds for smart contracts.
7 DISCUSSION
In the following we discuss observations and possible avenues for
future work. Our solution is not directly applicable to Datagram
TLS (DTLS) that is based on UDP. The DTLS extension remains
as a challenge. Moreover, because TLS 1.3 provides simpli(cid:27)ed re-
sumption features, TLS-N could be extended to support TLS session
resumption.
12
7.1 Validity or Expiry of Proof
A proof should only by considered valid as long as all involved TLS
certi(cid:27)cates are neither outdated nor revoked. In order to retrospec-
tively understand the time of validity of a proof, either the generator
or the validator could make use of a timestamping service attesting
the existence of the proof. Besides a centralized service, a crypto-
graphic hash of the proof could also be submitted to a blockchain,
e(cid:29)ectively timestamping the (cid:27)rst occurence of the proof and reduc-
ing the trust into a single entity.
7.2 Variable-sized chunking
Our current solution provides (cid:27)xed-size chunking which is gener-
ally applicable, but which might not represent the most e(cid:28)cient
solution for the privacy protection of certain applications. Cook-
ies or access tokens (e.g. an OAuth bearer token [17]) are typically
stored in the HTTP header. In a hypothetical HTTP mode, TLS-
N could support variable-sized chunking, where one chunk could
represent one HTTP header. The privacy protection of one header
would therefore be more e(cid:28)cient.
7.3 SNARKs for extended Proofs
In some cases, it may be desirable for a requester to provide a
more (cid:27)ne grained proof. For example, if a higher-level protocol
is used that contains large sections of sensitive variable length
data, an attacker could succeed with a content hiding attack (cf.
Section 6.2.1). In such cases, the proof will no longer convince a
veri(cid:27)er of its validity. Therefore, a requester can extend the TLS-
N proof with a zk-SNARK [4]. Such a proof could e.g. prove that
the hidden content matches some regular expression, i.e. that no
non-sensitive content is censored that is required for the correct
semantic meaning of the provided data.
Additionally, a prover can extend a TLS-N proof with a zk-
SNARK to prove some statement about the sensitive data. For ex-
ample, if a party requires proof of su(cid:28)cient funds, a prover can
provide a TLS-N proof of his bank statement but censor his actual
bank account balance. He can then provide a zk-SNARK stating
that his balance is above some threshold value. Since the TLS-N
proof contains a signature of the bank, the veri(cid:27)er is convinced of
the origin of the bank account information but since the sensitive
content is hidden, he does not receive any unnecessary information.
8 CONCLUSION
In this paper we present TLS-N, the (cid:27)rst e(cid:28)cient and privacy-
preserving TLS extension that provides non-repudiation of a TLS
conversation based on content extraction signatures. Our (cid:30)exible,
parametrized design allows the trade-o(cid:29) between e(cid:28)ciency and
privacy, being especially e(cid:28)cient if privacy is not required. No
trusted third party or trusted hardware is required while the security
assumptions of TLS are inherited and TLS primitives are reused.
Our real-world evaluation including recorded tra(cid:28)c and an
Apache Server module demonstrate the usability. For smaller re-
quests, such as API calls, the extra latency is less than 1.5 ms. This
secure and e(cid:28)cient non-repudiation solution for TLS will enable
parties to provably share the vast amounts of content accessible
through TLS — and thus provide disintermediation leading to more
trustworthy and decentralized services.
A DETAILED SECURITY ANALYSIS OF TLS-N
Our security analysis of TLS-N is based on the de(cid:27)nitions and the
security analysis of Content Extraction Signature [39].
A.1 De(cid:27)nitions
In their work, Steinfeld et al. de(cid:27)ne a document model. Analogously,
we de(cid:27)ne a TLS conversation model. A conversation c consists of
n records, i.e. len(c) = n, where c[i] denotes the i-th record. For
each record i, len(c[i]) = (l, m) where l is the length of the record
in bytes and m is the number of chunks. c[i][j] is the j-th chunk of
c[i] We also adopt the “blank symbol” ?. A chunk is blank if it is
hidden in the proof. A record is blank if all of its chunks are hidden
and only its merkle root hash is included in the proof. In this case
the length is also hidden, i.e. c[i] =? → len(c[i]) = (?, ?).
Note, however that our records are not quite identical with the
documents de(cid:27)ned by Steinfeld et al. as the records also contain
originator information. O(c[i]) provides the originator information
for a given record. If the record is blank, it is blank also, i.e.
c[i] =? → O(c[i]) =?. Similarly, each conversation contains addi-
tional information A(c), namely the timestamps, the cipher suite,
the salt size and the chunk size.
The clear set Cl(c[i]) = {j | len(c[i]) = (l, m)∧j ≤ m∧c[i][j] (cid:44)?}
contains the chunk indices which are not blank for a given record.
And for a given conversation Cl(c) = {i | i ≤ len(c) = n ∧ c[i] (cid:44)?}
contains the record indices which are not blank.
We say a conversation c is complete, if all records of the conversa-
tion are included, i.e. the (cid:27)rst hash chain element has the structure
H(0x1,h0), so that h0 has to be the Merkle hash of the (cid:27)rst record.
Steinfeld et al. de(cid:27)ne a subdocument relation, based on which
we de(cid:27)ne a subrecord and a subconversation relation.
De(cid:27)nition A.1. For any pair of records r and r(cid:48), r is a subrecord
of r(cid:48), denoted r ≤ r(cid:48), if:
(1) len(r) = len(r(cid:48)), i.e. they are of equal length and structure
(2) O(r) = O(r(cid:48)) and
(3) Cl(r) ⊆ Cl(r(cid:48)) and
(4) r[j] = r(cid:48)[j] for all j ∈ Cl(r)).
De(cid:27)nition A.2. For any pair of TLS conversations c and c(cid:48), c is a
(1) len(c) = len(c(cid:48)), i.e. the same number of records and
(2) c and c(cid:48) are complete and
(3) A(c) = A(c(cid:48)) and
(4) Cl(c) ⊆ Cl(c(cid:48)) and
(5) c[i] is a subrecord of c(cid:48)[i] for all i ∈ Cl(c).
subconversation of c(cid:48), denoted c ≤ c(cid:48), if:
A.2 P0: Unforgeability
In this section we prove that the adversary cannot produce a forged
evidence signature according to our assumptions. In other words,
CES-Unforgeability holds for our scheme.
A.2.1 Unforgeability of Signature.
Lemma A.3. A modi(cid:27)ed evidence hash leads to an invalid signature
that will be detected by the veri(cid:27)er.
Proof. At the end of the evidence generation the generator
signs the evidence hash using its private key. We assume that the
private key is handled properly and that it is not used in a signature
oracle. Under these conditions, if the adversary can forge a valid
signature for a di(cid:29)erent hash, the unforgeability assumption is
violated. Therefore, the signature scheme ensures that only the
correct evidence hash has a valid signature. All other signatures
will be rejected by the veri(cid:27)er during veri(cid:27)cation.
(cid:3)
Integrity of Inputs. In this section, we show that none of
the inputs can be modi(cid:27)ed without leading to a modi(cid:27)ed evidence
hash unless the adversary is able to (cid:27)nd a hash collision. We proof
this for the operations in reverse order as they are executed.
A.2.2
Lemma A.4. If any of the (cid:27)nal evidence inputs, listed in Figure 3c,
is modi(cid:27)ed the evidence hash will be di(cid:29)erent.
Proof. This follows directly from the collision resistance of H().
If a modi(cid:27)ed input would not lead to a di(cid:29)erent evidence hash, a
hash collision would be found.
(cid:3)
Through Lemma A.4 we have established that hcn−1 cannot be
modi(cid:27)ed in a valid proof. We go on to show that this implies that
none of the hash chain inputs can be modi(cid:27)ed. Note, that from now
on the output length of H() (the hash size as part of the cipher
suite), the salt size and the chunk size are (cid:27)xed.
Lemma A.5. If any of the hash chain inputs for step i with i > 0 is
modi(cid:27)ed the (cid:27)nal hash chain output hcn−1 will be di(cid:29)erent.
Proof. Again, this is a direct application of the collision resis-
tance of H(). We can apply the collision-resistance argument in-
ductively for all steps. A modi(cid:27)cation in step i will propagate all
the way until the end, as the output of step i, hci, is an input to step
i + 1 unless a hash collision is found.
(cid:3)
Lemma A.6. If any of the hash chain inputs for step 0 is modi(cid:27)ed
the (cid:27)nal hash chain output hcn−1 will be di(cid:29)erent.
tance of H().
Proof. Again, this is a direct application of the collision resis-
(cid:3)