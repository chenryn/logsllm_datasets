    {
      SampleEventSource.Log.ProcessingStart(x);
      var r = new Random();
      await Task.Delay(r.Next(500));
      using (var client = new HttpClient())
      {
        var response = await client.GetAsync("http://www.bing.com");
      }
      SampleEventSource.Log.ProcessingStop(x);
    }
以前，使用PerfView工具打开ETL日志文件。PerfView还可以分析运行着的应用程
序。可以用以下选项运行PerfView：
    PerfView /onlyproviders=＊Wrox-SampleEventSource collect
选项collect启动数据收集。使用限定符/onlyproviders关闭内核和CLR提供程序，仅记
录提供程序列出的日志消息。使用限定符-h显示可能的选项和PerfView的限定符。以这种
方式启动PerfView，会立即开始数据收集，直到单击Stop Collection按钮才停止（见图20-
2）。
图20-2
在启动跟踪收集之后运行应用程序，然后停止收集，就可以看到生成的活动ID和事
件类型Wrox-SampleEventSource / ProcessingStart / Start。ID允许有层次结构，例如/ / 1/2带
有一个父活动和一个子活动。每次循环迭代，都会看到一个不同的活动ID（见图20-3）。
对于事件类型Wrox-SampleEventSource / ProcessingStop / Stop，可以看到相同的活动ID，
因为它们关联到同样的活动上。
图20-3
使用PerfView，可以在左边选择多个事件类型，并添加一个过滤器，例如/ / 1/4，这
样就会看到属于这个活动的所有事件（见图20-4）。这里可以看到一个活动ID可以跨多个
线程。相同活动的开始和停止事件使用不同的线程。
图20-4
20.3 创建自定义侦听器
写入跟踪消息时，我们了解了如何使用工具，如logman、tracerpt和PerfView，读取它
们。还可以创建一个自定义的进程内事件侦听器，把事件写入需要的位置。
创建自定义事件侦听器时，需要创建一个派生自基类EventListener的类。为此，只需
要重写OnEventWritten方法。在这个方法中，把跟踪消息传递给类型
EventWrittenEventArgs的参数。这个样例的实现代码发送事件的信息，包括有效载荷，这
是传递给EventSource的WriteEvent方法的额外数据（代码文件ClientApp 
/
MyEventListener.cs）：
    public class MyEventListener : EventListener
    {
      protected override void OnEventSourceCreated(EventSource eventSource)
      {
        WriteLine($"created {eventSource.Name} {eventSource.Guid}");
      }
      protected override void OnEventWritten(EventWrittenEventArgs eventData)
      {
        WriteLine($"event id: {eventData.EventId} source: {eventData.EventSource.
Name}");
        foreach (var payload in eventData.Payload)
        {
        WriteLine($"\t{payload}");
        }
      }
    }
侦听器在Program类的Main方法中激活。通过调用EventSource类的静态方法
GetSources，可以访问事件源（代码文件ClientApp / Program. cs）：
    IEnumerable eventSources = EventSource.GetSources();
    InitListener(eventSources);
InitListener方法调用自定义侦听器的EnableEvents方法，并传递每个事件源。示例代
码注册EventLevel.LogAlways设置，来侦听写入的每个日志消息。还可以指定只写入信息
性消息，其中还包括错误，或只写入错误。
    private static void InitListener(IEnumerable sources)
    {
      listener = new MyEventListener();
      foreach (var source in sources)
      {
        listener.EnableEvents(source, EventLevel.LogAlways);
      }
    }
运行应用程序时，会看到FrameworkEventSource和Wrox-SampleEventSource的事件写
入控制台。使用像这样的自定义事件侦听器，可以轻松地将事件写入Application
Insights，这是一个基于云的遥测服务，参见下一节。
20.4 使用Application Insights
Application Insights是一个Microsoft Azure技术，允许监控应用程序的使用情况和性
能，而无论它们在哪里使用。可以得到用户关于应用程序问题的报告，例如，可以找出异
常，也可以找到用户在应用程序中正在使用的特性。例如，假设给应用程序添加一个新特
性。用户会找到激活该特性的按钮吗？
使用Application 
Insights，很容易识别用户使用应用程序时遇到的问题。微软很容易
集成Application Insights和各种各样的应用程序（包括Web和Windows应用程序）。
  注意： 这里有一些特性示例，用户很难在微软自己的产品中找到它们。Xbox
是第一个为用户界面提供大磁贴的设备。搜索特性放在磁贴的下面。虽然这个按钮可
以直接显示在用户面前，但用户看不到它。微软把搜索功能移动到磁贴内，现在用户
可以找到它。另一个例子是Windows Phone上的物理搜索按钮。这个按钮用于应用程序
内的搜索。用户抱怨，没有在电子邮件内搜索的选项，因为他们不认为这个物理按钮
可以搜索电子邮件。微软改变了功能。现在物理搜索按钮只用于在网上搜索内容，邮
件应用程序有自己的搜索按钮。Windows 8有一个相似的搜索问题：用户不使用功能区
中的搜索功能，在应用程序内搜索。Windows 8.1改变了指南，使用功能区中的搜索功
能，现在应用程序包含自己的搜索框；在Windows 
10中还有一个自动显示框。看起来
有一些共性？
20.4.1 创建通用Windows应用程序
利用Application Insights的示例应用程序之一是Universal Windows Platform应用程序，
它有两个页面：MainPage和SecondPage，还有几个按钮和文本框控件来模拟一个动作，抛
出一个异常，并在页面之间导航。下面的代码片段定义了用户界面（代码文件
WinAppInsights / MainPage. xaml）：
通过单击Navigate to SecondPage按钮来调用OnNavigateToSecondPage事件处理程序方
法，导航到第二页（代码文件WinAppInsights/MainPage.xaml.cs）：
    private void OnNavigateToSecondPage(object sender, RoutedEventArgs e)
    {
      this.Frame.Navigate(typeof(SecondPage));
    }
在OnAction（）方法中，一个对话框显示了用户输入的数据：
    private async void OnAction(object sender, RoutedEventArgs e)
    {
      var dialog = new ContentDialog
      {
        Title = "Sample",
        Content = $"You entered {sampleDataText.Text}",
        PrimaryButtonText = "Ok"
      };
      await dialog.ShowAsync();
    }
OnError（）方法抛出了一个未处理的异常：
    private void OnError(object sender, RoutedEventArgs e)
    {
      throw new Exception("something bad happened");
    }
  注意： 使用通用Windows平台创建应用程序的更多信息，参见第29、32和33
章。
20.4.2 创建Application Insights资源
为了使用Application Insights，需要给微软Azure账户创建一个Application Insights资
源。在微软Azure门户网站（http://portal.azure.com），可以用Developer Services找到这个
资源。创建这个资源时，需要指定服务的名称、应用程序类型、资源组、订阅和服务的位
置（参见图20-5）。
图20-5
在创建Application 
Insights资源后，会显示资源窗口，在其中可以看到所收集的应用
程序信息。在这个管理用户界面中，需要Properties设置中可用的仪表键。
 注意： 
如果没有微软Azure账户，可以尝试使用免费的账户。关于
ApplicationInsights的定价，不同的价格水平提供不同的功能。有一个免费版提供每月至
多500万个数据点。更多信息可访问http://azure.microsoft.com。
 注意： 
除了从门户网站上创建这个资源外，还可以从项目模板中选择
ApplicationInsights，在Microsoft Azure中创建这个资源。
20.4.3 配置Windows应用程序
创建通用Windows应用程序之后，可以添加Application 
Insights，为此，在Solution
Explorer中选择项目，打开应用程序的上下文菜单（单击鼠标右键，或按下键盘上的应用
程序上下文键），然后选择Add Application Insights Telemetry。在这里可以选择之前创建
的Application Insights资源（见图20-6），或者创建一个新的资源。这个配置会添加一个对
NuGet包Microsoft.ApplicationInsights. 
WindowsApps的引用和配置文件
ApplicationInsights.config。如果以编程方式添加这个配置文件，就需要复制Azure门户中
的仪表键，并将它添加到InstrumentationKey元素中（代码文件WinAppInsights/
ApplicationInsights.config）：
      Add your instrumentation key here
图20-6
需要把这个文件的Build操作设置为Content，还需要将文件复制到输出目录（只需要
在属性窗口中设置相应的属性）。
接下来，通过调用WindowsAppInitializer类的InitializeAsync方法，初始化Application
Insights 
（名称空间Microsoft.ApplicationInsights）。这个方法允许定义应该使用的
Windows收集器；默认情况下，配置元数据、会话、页面视图和未处理的异常收集器（代
码文件WinAppInsights/App.xaml.cs）：
    public App()
    {
      WindowsAppInitializer.InitializeAsync(WindowsCollectors.Metadata |
        WindowsCollectors.Session | WindowsCollectors.PageView |
        WindowsCollectors.UnhandledException);
      this.InitializeComponent();
      this.Suspending += OnSuspending;
    }
  注意： InitializeAsync方法默认读取文件applicationinsights.config中的仪表
键。还可以使用这个方法的重载版本，通过第一个参数传递仪表键。
20.4.4 使用收集器
不需要做更多工作，你就得到了Application 
Insights的信息。只需要启动应用程序，
InitializeAsync方法定义的收集器就会完成其工作。运行应用程序后，在页面之间导航，
生成异常，可以进入Azure门户网站，查看报告的信息。请注意，用调试器运行时，信息
会立即转移到云中，但没有调试器，信息会缓存在本地，提交到包中。在信息出现之前，
可能需要等几分钟。
参见图20-7的页面浏览。可以看到会话和用户的数量，打开了什么页面，打开页面的
频率，用户的信息，如用户的设备、地区、IP地址等。
图20-7
还可以看到应用程序的所有事故信息。图20-8显示了异常、异常发生的地点和时间。
一些错误可能与特定的设备或特定的地区相关。在上述照片中，使用微软的Bing服务在微
软商店中搜索应用程序，发现在中国出了问题；有些用户可能会在防火墙后面，无法获得
这一服务。如果想看看这个程序，只需要在微软商店中搜索Picture Search，安装并运行这
个应用程序。
图20-8
20.4.5 编写自定义事件
还可以定义应该写入云服务的自定义遥测信息。为了写入自定义遥测数据，需要实例
化一个TelemetryClient对象。这个类是线程安全的，所以可以在多个线程中使用一个实
例。在这里，修改OnAction方法，写入调用TrackEvent的事件信息。调用TrackEvent时，
可以传递事件名称、可选的属性和度量，或传递EventTelemetry类型的对象（代码文件
WinAppInsights / MainPage.xaml.cs）：
    private TelemetryClient _telemetry = new TelemetryClient();
    private async void OnAction(object sender, RoutedEventArgs e)
    {
      _telemetry.TrackEvent("OnAction",
        properties: new Dictionary()
        { ["data"] = sampleDataText.Text });
      var dialog = new ContentDialog
      {
        Title = "Sample",
        Content = $"You entered {sampleDataText.Text}",
        PrimaryButtonText = "Ok"
      };
      await dialog.ShowAsync();
    }
此事件信息如图20-9所示。通过属性可以传递字符串对象的字典，它们都显示在云门
户中。使用度量标准，可以传递字符串和双精度值的字典，在其中可以传递分析应用程序
的使用情况所需要的任何数量。
图20-9
当你捕获异常时，可以通过调用TrackException写入错误信息。利用TrackException还
可以传递属性和度量，并使用ExceptionTelemetry类获得有关异常的信息：
    private void OnError(object sender, RoutedEventArgs e)
    {
      try
      {
        throw new Exception("something bad happened");
      }
      catch (Exception ex)
      {
        _telemetry.TrackException(
        new ExceptionTelemetry
        {
          Exception = ex,
          HandledAt = ExceptionHandledAt.UserCode,
          SeverityLevel = SeverityLevel.Error
        });
      }
    }
可以用来编写自定义事件的其他方法有跟踪指标信息的TrackMetric、发送页面信息的
TrackPageView、用于整体跟踪信息的TrackTrace（在其中可以指定跟踪级别），以及主
要用于Web应用程序的TrackRequest。
20.5 小结
本章介绍了跟踪和日志功能，它们有助于找出应用程序中的问题。应尽早规划，把这
些功能内置于应用程序中。这可以避免以后的许多故障排除问题。
使用跟踪功能，可以把调试消息写入应用程序，也可以用于最终发布的产品。如果出
了问题，就可以修改配置值，从而打开跟踪功能，并找出问题。
对于Application 
Insights，使用这个云服务时，有很多开箱即用的特性可用。只用几
行代码，很容易分析应用程序的崩溃和页面的浏览。如果添加更多代码，可以找到用户是
否没有使用应用程序的一些特性。
本章有一个小片段使用了Parallel类，下一章将详细讨论用Task和Parallel类进行并行
编程的细节。
第21章
任务和并行编程
本章要点
● 多线程概述
● 使用Parallel类
● 使用任务
● 使用取消架构
● 使用数据流库
本章源代码下载地址（wrox.com）：
打开网页www.wrox.com/go/procsharp，单击Download Code选项卡即可下载本章源代
码。本章代码分为以下几个主要的示例文件：
● Parallel
● Task
● Cancellation
● DataFlow
21.1 概述
使用多线程有几个原因。假设从应用程序进行网络调用需要一定的时间。我们不希望
用户界面停止响应，让用户一直等待，直到从服务器返回一个响应。用户可以同时执行其
他一些操作，或者甚至取消发送给服务器的请求。这些都可以使用线程来实现。
对于所有需要等待的操作，例如，因为文件、数据库或网络访问都需要一定的时间，
此时就可以启动一个新线程，同时完成其他任务。即使是处理密集型的任务，线程也是有
帮助的。一个进程的多个线程可以同时运行在不同的CPU上，或多核CPU的不同内核上。
还必须注意运行多线程时的一些问题。它们可以同时运行，但如果线程访问相同的数
据，就很容易出问题。为了避免出问题，必须实现同步机制。
自.NET 
4以来，.NET提供了线程的一个抽象机制：任务。任务允许建立任务之间的
关系，例如，第一个任务完成时，应该继续下一个任务。也可以建立一个层次结构，其中
包含多个任务。
除了使用任务之外，还可以使用Parallel类实现并行活动。需要区分数据并行（在不
同的任务之间同时处理一些数据）和任务并行性（同时执行不同的功能）。
在创建并行程序时，有很多不同的选择。应该使用适合场景的最简单选项。本章首先
介绍Parallel类，它提供了非常简单的并行性。如果这就是需要的类，使用这个类即可。
如果需要更多的控制，比如需要管理任务之间的关系，或定义返回任务的方法，就要使用
Task类。
本章还包括数据流库，如果需要基于操作的编程通过管道传送数据，这可能是最简单
的一个库了。
如果需要更多地控制并行性，如设置优先级，就需要使用Thread类。
  注意： 不同任务之间的同步参见第22章。通过关键字async和await来使用异
步方法参见第15章。Parallel LINQ提供了任务并行性的一种变体，详见第13章。
21.2 Parallel类