# 前言
固件解包通常较为简单，但对固件进行修改并重新刷回设备则具有一定挑战性。本文将探讨几种修改固件并将其重新刷回设备的方法。

# 手动打包固件
以D-Link DCS-921L的固件为例，首先使用`binwalk`工具分析其结构：
```
binwalk -Me dcs932l_v1.14.04.bin
```

分析结果表明，该固件由U-Boot引导程序、uImage头以及通过LZMA压缩的内核系统组成。以下是简化后的结构图：

接下来，我们解包固件进行必要的修改，然后重新打包。具体步骤如下：

1. **解包固件**：
   ```bash
   binwalk -Me dcs932l_v1.14.04.bin
   ```

2. **进入文件系统目录并进行修改**：
   进入解压后的文件系统目录，根据需求修改相应文件。完成后，使用`cpio`命令创建一个压缩文件：
   ```bash
   find . | cpio -H newc -o > ../initrd.cpio
   ```

3. **使用LZMA压缩文件系统**：
   下载并安装LZMA SDK（可以从[这里](https://sourceforge.net/projects/sevenzip/files/LZMA%20SDK/)获取）。注意要使用与原固件相同的字典大小：
   ```bash
   ./lzma e initrd.cpio initrd.cpio.lzma -d20
   ```

4. **拼接内核文件系统前的数据**：
   提取内核文件系统前的数据，并将其与我们的文件系统拼接在一起：
   ```bash
   dd if=50040 of=kernelHead bs=1 count=4038656
   cp ./kernelHead ./kernel
   cat initrd.cpio.lzma >> kernel
   ```

5. **压缩内核**：
   再次使用LZMA压缩内核：
   ```bash
   ./lzma e ./kernel ./kernel.lzma -d25
   ```

6. **拼接uImage头**：
   提取uImage头，并将其与内核压缩文件拼接在一起：
   ```bash
   dd if=dcs of=uImageHeader bs=1 count=64
   cp uImageHeader uImage
   cat kernel.lzma >> uImage
   ```

7. **计算和修改CRC校验值**：
   使用WinHex或其他工具打开uImage文件，计算data CRC并更新到uImage头中。此外，还需要计算header CRC并更新。

   或者，可以使用`mkimage`命令自动生成uImage头：
   ```bash
   sudo apt-get install u-boot-tools
   mkimage -A MIPS -O linux -T kernel -C lzma -a 0x80000000 -e 0x803B8000 -n "Linux Kernel Image" -d kernel.lzma uImage
   ```

8. **完成固件打包**：
   如果可以通过TTL接口进入设备的U-Boot，则上述步骤已经足够。如果需要通过Web界面更新固件，则还需加上U-Boot部分，具体细节不再赘述。

# 烧录固件
启动设备并通过串行接口查看U-Boot信息。选择选项1，通过TFTP将固件加载到SDRAM中：
```bash
1: Load system code to SDRAM via TFTP.
Please Input new ones /or Ctrl-C to discard
    Input device IP (192.168.1.1) ==:192.168.0.100
    Input server IP (192.168.1.100) ==:192.168.0.103
    Input Linux Kernel filename () ==:uImage
```

设备从TFTP服务器下载完固件后会自动启动系统。

# OpenWrt固件编译
若需向设备刷入OpenWrt固件，首先访问[OpenWrt官网](https://openwrt.org/toh/start)确认设备是否受支持。你可以直接下载预编译固件，或自行编译。

1. **下载源码**：
   ```bash
   git clone https://github.com/openwrt/openwrt
   ```

2. **安装依赖**：
   ```bash
   sudo apt-get install gcc g++ binutils patch bzip2 flex bison make autoconf gettext texinfo unzip zip unrar p7zip p7zip-rar p7zip-full sharutils subversion libncurses5-dev ncurses-term zlib1g-dev gawk git-core libssl-dev
   ```

3. **升级扩展软件**：
   ```bash
   ./scripts/feeds update -a
   ./scripts/feeds install -a
   make package/symlinks
   ```

4. **配置编译环境**：
   ```bash
   make defconfig
   make menuconfig
   ```

5. **编译固件**：
   ```bash
   make V=99
   ```

编译完成后，固件文件位于`./bin/targets/ramips/rt305x/`目录下，文件系统位于`./build_dir/target-mipsel_24kc_musl/root-ramips`目录下。通过U-Boot将固件刷入设备。

# Ralink SDK固件配置与编译
DCS-932L使用的是Ralink RT3052主控芯片。我们可以通过编译Ralink SDK来定制自己的固件。

### Toolchain 安装与配置
1. **复制并解压buildroot源码包**：
   ```bash
   cp RT288x_SDK/toolchain/buildroot-gcc342.tar.bz2 /opt
   tar jxvf buildroot-gcc342.tar.bz2
   ```

2. **编译安装LZMA**：
   ```bash
   tar xvfz RT288x_SDK/toolchain/lzma-4.32.7.tar.gz
   cd RT288x_SDK/toolchain/lzma-4.32.7 
   ./configure 
   make 
   make install
   ```

3. **编译安装MKSQUASHFS**：
   ```bash
   cd RT288x_SDK/toolchain/mksquash_lzma-3.2 
   make
   make install
   ```

建议将本机的`make`版本降为低版本，以避免兼容性问题。

### 源码配置与编译
1. **配置编译选项**：
   ```bash
   make menuconfig
   ```
   选择对应的产品型号、内核、库等。

2. **内核配置**：
   根据设备需求进行内核配置。以下是一些常见的配置选项：
   - **Machine selection**：选择板子型号。
   - **DRAM Size**：选择内存大小。
   - **Kernel NVRAM**：启用NVRAM。
   - **Compress ramdisk by LZMA**：使用LZMA压缩镜像文件。
   - **General setup**：启用内核空间到用户空间的relay支持。
   - **Block layer**：启用通用块层。
   - **Networking**：启用网络支持。
   - **Device Drivers**：启用网络设备支持、GPIO支持和USB支持。

3. **编译固件**：
   配置完成后，开始编译固件：
   ```bash
   make
   ```

编译完成后，生成的固件文件可用于刷入设备。