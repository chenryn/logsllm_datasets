# Title: Experimental Dependability Evaluation of a Fail-Bounded Jet Engine Control System for Unmanned Aerial Vehicles

## Authors:
- Jonny Vinter¹
- Olof Hannius²
- Torbjörn Norlander²
- Peter Folkesson¹
- Johan Karlsson¹

### Affiliations:
1. Department of Computer Engineering, Chalmers University of Technology, S-412 96 Göteborg, Sweden
   - Contact: +46 31 7721667 (Phone), +46 31 7723663 (Fax)
   - Email: {vinter, peterf, johan}@ce.chalmers.se

2. Volvo Aero Corporation, Performance & Control Systems, S-461 81 Trollhättan, Sweden
   - Contact: +46 520 93846 (Phone), +46 520 98573 (Fax)
   - Email: {Olof.Hannius, torbjorn.norlander}@volvo.com

## Abstract
This paper presents an experimental evaluation of a prototype jet engine controller designed for Unmanned Aerial Vehicles (UAVs). The controller is implemented using commercial off-the-shelf (COTS) hardware based on the Motorola MPC565 microcontroller. We investigate the impact of single event upsets (SEUs) by injecting single bit-flip faults into main memory and CPU registers via the Nexus on-chip debug interface of the MPC565. To avoid non-effective faults, automated pre-injection analysis of the assembly code was utilized. Despite the inherent robustness of the software, most injected faults were still non-effective (69.4%) or caused bounded failures with minor effects on the jet engine (7.0%). Hardware exceptions detected 20.1% of the errors, and executable assertions in the software detected 1.9%. The remaining 1.6% were classified as critical failures, primarily caused by erroneous booleans or type conversions involving booleans.

## 1. Introduction
Future aircraft development must balance high safety requirements with low maintenance, development, and production costs, particularly for applications like Unmanned Aerial Vehicles (UAVs). The market for military UAVs is growing, and civil and commercial UAV applications are also emerging [1]. Meeting the demands of future aircraft requires revolutionary systems and new technologies, including increasingly advanced electronic equipment and software. One major challenge is building cost-effective computer systems for executing safety-critical functions. This challenge drives two key development trends: the creation of generic distributed safety-critical systems for a wide range of air vehicles and engines, and the use of COTS components.

In this paper, we evaluate the fault-tolerance properties of a prototype FADEC (Full Authority Digital Engine Control) controller based on the Motorola PowerPC MPC565 COTS microcontroller. The controller is developed for the Volvo Aero RM12 turbofan engine, suitable for large UAVs comparable to the Boeing X45 variants B and C [2], which use a similar engine (F404-GE-102D).

The controller is implemented on a single computer node intended to be part of a distributed control system. It is designed to exhibit fail-bounded or fail-stop failures in the presence of internal errors. Executable assertions in the FADEC software and the hardware error detection mechanisms included in the microcontroller enforce these failure mode assumptions.

Our aim is to investigate the validity of the failure mode assumptions with respect to SEUs by injecting single bit-flip faults into CPU registers and main memory, while monitoring the behavior of a highly accurate simulation model of the jet engine.

Particle radiation-induced SEUs have become an increasingly important source of failure in electronic systems as VLSI circuit feature sizes have decreased. Previously, such upsets mainly occurred in space due to heavy ions. New circuit technologies make circuits sensitive to neutrons from cosmic radiation, which are frequent at flight altitudes and also appear at ground level [3, 4]. Thus, SEUs are no longer negligible for critical equipment and must be carefully considered in flight applications.

The next section briefly describes the jet engine and the failure model of the FADEC controller. The experimental setup used for the dependability evaluation is described in Section 3, and the results of the evaluation are presented and discussed in Section 4. Finally, the conclusions are given in Section 5.

## 2. Jet Engine Control and Failure Model

### 2.1. Jet Engine Description
The RM12 engine is a turbofan engine with an afterburner, designed for supersonic vehicles. The engine is controlled by five actuators: FVG (Fan Variable Geometry), CVG (Compressor Variable Geometry), WFM (core engine fuel flow), WFR (afterburner fuel flow), and A8 (exhaust nozzle area). These actuators optimize the engine's performance and thrust.

### 2.2. Failure Model
A fail-bounded failure model [5, 6] is assumed for the FADEC controller. This means that the system (controller and jet engine) can produce wrong outputs as long as it stays within defined bounds. When an error is detected, e.g., when engine parameters exceed predefined or run-time calculated bounds, the FADEC controller decides if the error is manageable or if a backup system must be activated to prevent an accident. If the FADEC decides that a backup system must be activated (or if a hardware exception is triggered), it stops producing outputs. If not, the system may deliver erroneous outputs as long as it remains bounded. Thus, the engine control system is fail-bounded with a fail-safe mode.

## 3. Experimental Setup

### 3.1. The Experimental Platform
A dynamic model of the RM12 engine controlled by a model of a FADEC prototype developed for a UAV application study is used for the evaluation. Both the engine model and FADEC prototype were developed in MATRIXx, a graphical simulation and analysis tool capable of auto-generating code from dynamic simulation models. The generated code is compiled, linked, and downloaded to a target system.

The advantages of using a dynamic simulation model include the ability to study how transient errors in the FADEC affect the RM12 engine operation, feed the results back to the MATRIXx environment, improve error detection and handling, and verify the effectiveness of these improvements.

A FADEC evaluation platform relying on COTS hardware has been developed. The hardware consists of two development boards featuring the Motorola PowerPC MPC565 microcontroller, executing at 40 MHz, equipped with 2 MB external SRAM, 1 MB external Flash memory, and 1 MB on-chip Flash memory. The MPC565 is one of the first microcontrollers to implement the Nexus standard [7], enabling on-chip debugging with advanced features such as real-time trace of program and data flow. The platform uses a commercial Nexus debug environment from iSYSTEM, which includes an iC3000 active emulator and the winIDEA debug software.

The GOOFI [9] fault injection tool was extended to control the Nexus debug environment, simplifying and automating the injection of faults into the MPC565 [10]. The GOOFI and winIDEA software run on a PC connected to the emulator via a USB connection. The iC3000 emulator communicates with the Nexus port on the MPC565 target system. The target system executes the FADEC control software (272 kB) and communicates with the jet engine software (308 kB) on the second board via a CAN bus, closing the control loop. The software is compiled with the Tasking PowerPC C/C++ compiler tool suite, release 2.1, and the open-source GDB software is used to debug and download the jet engine software via a BDM (Background Debug Mode) on-chip debug interface of the MPC565. For each experiment, the FADEC software is first downloaded to the external SRAM of the target system, which is then restarted.

### 3.2. Experiment and Software Setup
The single bit-flip fault model is widely accepted as a reasonably accurate representation of SEUs [11]. Single bit-flip faults were injected in two separate campaigns targeting the MPC565 CPU registers and the data segments (stack, data, and read-only data) of the memory. The code segments of the memory were not targeted as they are assumed to be located in ROM in the actual FADEC implementation.

Both campaigns used a pre-injection analysis of the assembly code to inject only effective faults. This technique optimizes the fault-space by utilizing assembly-level knowledge to place single bit-flips in registers and memory locations only immediately before they are read by executed instructions, avoiding faults that are overwritten before affecting the program execution. Experimental results obtained by random sampling of the optimized fault-space and the complete (non-optimized) fault-space were compared for different workloads running on the MPC565 microcontroller [13]. The study showed that the pre-injection analysis increased the effectiveness of faults by an order of magnitude, reduced the fault-space by two orders of magnitude for CPU registers and four to five orders of magnitude for memory locations, while preserving a similar estimation of the error detection coverage.

The FADEC software is divided into procedures that execute at different frequencies, determined by a static cyclic scheduler. Procedures with the highest frequency (200 Hz) execute at each control loop, and those with the lowest frequency (10 Hz) execute once every 20 control loops. Therefore, 20 control loops (loop 21 to 40) are targeted as the temporal trigger for the experiments to ensure all procedures are executed at least once. During this time interval (0.1 to 0.2 seconds), the thrust demand to the jet engine increases from 35% to 51% of the maximal thrust, as shown in Figure 3.

### 3.3. Undetected Bounded Failures and Mission or Flight Critical Failures
We define a divergence from the reference run of at least 20% for one or more of the parameters shown in Figure 3 as a mission- or flight-critical failure. Otherwise, the failure is considered an undetected bounded failure. A mission-critical failure may interrupt the mission, requiring the UAV to return to the base for engine diagnosis. A flight-critical failure may lead to a lost engine and a crash. These classifications are based on previous experience with the engine.

## 4. Results
Table 1 summarizes the results of the fault injection experiments. Despite the use of the pre-injection analysis technique, a significant percentage of non-effective errors were produced. The main causes are:
- Booleans that are True if the numerical value is non-zero will not change state due to most single bit-flips.
- Many software statements may mask errors (e.g., errors in the variable `a` of the statement `if a > 10 then …` will be masked if `a` is larger than 10 before the bit-flip and assumes an even higher value after the bit-flip).
- Some variables in the FADEC prototype are periodically initialized to their default values, and errors may therefore be overwritten.

| Error and Failure Classification | Non-Detected | Detected by FADEC Assertions | Detected by MPC565 Exceptions |
|----------------------------------|--------------|-----------------------------|--------------------------------|
| Mission-Critical Failures        | 0.3% (9)     | 2.0% (47)                   | 1.1% (56)                      |
| Undetected Bounded Failures      | 4.8% (137)   | 7.0% (198)                  | 20.1% (569)                    |
| Total                            | 5.1%         | 9.0%                        | 21.2%                          |

The FADEC node gives up control if one or several assertions are executed (evaluated true). The assertion that was activated most frequently is EA14, indicating an error affecting the Compressor Variable Geometry (CVG) functionality (28.9% for register faults and 26.5% for memory faults).

## 5. Conclusions
The experimental evaluation of the fail-bounded jet engine control system for UAVs demonstrated the effectiveness of the FADEC controller in handling SEUs. Most faults were either non-effective or caused bounded failures with minor effects on the engine. Critical failures, primarily due to erroneous booleans or type conversions, were rare. The use of pre-injection analysis and the inherent robustness of the software contributed to the system's reliability. Future work will focus on further improving error detection and handling mechanisms to enhance the overall dependability of the system.

---

**Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05)**  
**0-7695-2282-3/05 $20.00 © 2005 IEEE**  
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021, at 12:08:32 UTC from IEEE Xplore. Restrictions apply.**