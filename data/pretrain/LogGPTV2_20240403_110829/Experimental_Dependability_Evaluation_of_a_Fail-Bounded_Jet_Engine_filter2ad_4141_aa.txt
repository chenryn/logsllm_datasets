title:Experimental Dependability Evaluation of a Fail-Bounded Jet Engine
Control System for Unmanned Aerial Vehicles
author:Jonny Vinter and
Olof Hannius and
Torbj&quot;orn Norlander and
Peter Folkesson and
Johan Karlsson
Experimental Dependability Evaluation of a Fail-Bounded Jet Engine Control
System for Unmanned Aerial Vehicles
Jonny Vinter1, Olof Hannius2, Torbjörn Norlander2, Peter Folkesson1, Johan Karlsson1
1Department of Computer Engineering
Chalmers University of Technology
S-412 96 Göteborg, Sweden
+46 31 7721667, +46 31 7723663 fax
{vinter, peterf, johan}@ce.chalmers.se
2Volvo Aero Corporation
Performance & Control Systems
S-461 81 Trollhättan, Sweden
+46 520 93846, +46 520 98573 fax
{Olof.Hannius, torbjorn.norlander}@volvo.com
Abstract
This paper presents an experimental evaluation of a
prototype jet engine controller intended for Unmanned
Aerial Vehicles (UAVs). The controller is implemented
with commercial off-the-shelf (COTS) hardware based on
the Motorola MPC565 microcontroller. We investigate the
impact of single event upsets (SEUs) by injecting single
bit-flip faults into main memory and CPU registers via the
Nexus on-chip debug interface of the MPC565. To avoid
the injection of non-effective faults, automated pre-
injection analysis of the assembly code was utilized. Due to
the inherent robustness of
injected
faults were still non-effective (69.4%) or caused bounded
failures having only minor effect on the jet engine (7.0%),
while 20.1% of
the errors were detected by hardware
exceptions and 1.9% were detected by
executable
assertions
in the software. The remaining 1.6% is
classified as critical failures. A majority of the critical
failures were caused by erroneous booleans or type
conversions involving booleans.
the software, most
1. Introduction
Important development issues for future aircraft are to
combine high safety requirements with low maintenance,
development and production costs. This is especially true
for applications
such as Unmanned Aerial Vehicles
(UAVs). The market for military UAVs is growing and
civil and commercial UAV applications are also emerging
[1]. Revolutionary systems and new technologies are
needed to meet the demands of future aircraft, requiring
increasingly advanced electronic equipment and software.
One of the major challenges is to build cost-effective
computer systems for execution of safety-critical functions.
This challenge provides the impetus for two important
development trends. One is the development of generic
distributed safety-critical systems that can be used for a
wide range of air vehicles and engines. The other is the use
of commercial off-the-shelf (COTS) components.
In this paper, we evaluate the fault-tolerance properties
of a prototype FADEC (Full Authority Digital Engine
Control) controller based on a COTS microcontroller, the
Motorola PowerPC MPC565. The controller is developed
for the Volvo Aero RM12 turbofan engine. This engine is
suitable for large UAVs comparable to the Boeing X45
variants B and C [2], which use a similar engine (F404-GE-
102D).
The controller is implemented on a single computer
node intended to be part of a distributed control system.
The controller is designed to exhibit fail-bounded or fail-
stop failures in the presence of internal errors. Executable
assertions in the FADEC software and the hardware error
detection mechanisms included in the microcontroller are
used to enforce the failure mode assumptions.
Our aim is to investigate the validity of the failure mode
assumptions with respect to single event upsets. We do so
by injecting single bit-flip faults into CPU-registers and the
main memory, while carefully monitoring the behavior of a
very accurate simulation model of the jet-engine.
Particle radiation induced single event upsets have
become an increasingly important source of failure in
electronic systems as the feature sizes of VLSI circuits
have decreased. Previously, such upsets mainly occurred in
electronic equipment in space because of heavy-ions. The
physical properties of new circuit
technologies make
circuits sensitive also to neutrons caused by cosmic
radiation which are frequent at flight altitudes and also
appear at ground level [3, 4]. Thus, SEUs are no longer
negligible for critical equipment and must be carefully
considered in flight applications.
The next section briefly describes the jet engine and the
failure model of the FADEC controller. The experimental
setup used for the dependability evaluation is described in
Section 3, and the results of the evaluation are presented
and discussed in Section 4. Finally, the conclusions are
given in Section 5.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:08:32 UTC from IEEE Xplore.  Restrictions apply. 
2. Jet engine control and failure model
3. Experimental setup
2.1. Jet engine description
3.1. The experimental platform
The RM12 engine is a turbofan engine with afterburner
designed for vehicles traveling at supersonic speed.
FVG
CVG WFM
WFR
A8
NL
NH PS3
Figure 1. Schematic view of a turbofan engine
with afterburner (RM12).
The engine is controlled by five actuators denoted,
FVG, CVG, WFM, WFR and A8, see Figure 1. By
positioning the variable stator guide vanes FVG (Fan
Variable Geometry) and CVG (Compressor Variable
Geometry), the RM12 fan and compressor are controlled to
an optimal working point
to achieve good engine
performance. The fuel flow to the core engine is denoted
WFM, and the afterburner fuel flow WFR. The rotational
speed for the fan is denoted NL and for the compressor
NH, where N stands for rotational speed while L and H
identify the Low- and High-pressure parts respectively. The
compressor outlet pressure is denoted PS3. The exhaust
nozzle area, denoted A8, is controlled so that the pressure
ratio over the complete engine is optimized to obtain
maximum thrust.
2.2. Failure model
A fail-bounded failure model [5, 6] is assumed for the
FADEC controller. This means that the system (controller
and jet engine) is allowed to produce wrong outputs as long
as the system stays within defined bounds. When an error
is detected, e.g. when jet engine parameters exceed
predefined or run-time calculated bounds,
the FADEC
controller decides if the error is manageable or if a backup
system has to be switched in to prevent an accident. If the
FADEC decides that a backup system must be activated (or
if a hardware exception is triggered)
it has to stop
producing outputs. If not (or if the error is undetected) the
system may deliver erroneous outputs as long as the system
stays bounded. Thus, the engine control system is fail-
bounded with a fail-safe mode. The bounds used in this
study are presented in Section 3.3.
A dynamic model of the RM12 engine controlled by a
model of a FADEC prototype developed for an UAV
application study are used for the evaluation. Both the
engine model and FADEC prototype have been developed
in MATRIXx which is a graphical simulation and analysis
tool that has the capability to auto generate code from
dynamic simulation models. The generated code can then
be compiled, linked and downloaded to a target system.
The advantages of using a dynamic simulation model is
that we can study how transient errors in the FADEC affect
the RM12 engine operation, we can feed the result from
experiments back to the MATRIXx environment, make
improvements to error detection and error handling and
verify that the improvements are effective.
A FADEC evaluation platform relying on COTS
hardware has been developed (see Figure 2).
Figure 2. The experimental platform.
The hardware consists of
two development boards
featuring the Motorola PowerPC MPC565 microcontroller
executing at a clock frequency of 40 MHz, equipped with 2
MB external SRAM, 1 MB external Flash memory and 1
MB on chip Flash memory. MPC565 is one of the first
microcontrollers to implement
the Nexus standard [7]
enabling on-chip debugging with advanced features such as
real-time trace of program and data flow. The platform
relies on a commercial Nexus debug environment from
iSYSTEM which takes advantage of the features defined
by the Nexus standard (another Nexus-based fault injection
environment targeting the MPC565 can be found in [8]).
The debug environment consists of an iC3000 active
emulator and the winIDEA debug software.
The GOOFI [9] fault injection tool has been extended to
control the Nexus debug environment in order to simplify
and automate the injection of faults into MPC565 [10]. The
GOOFI and winIDEA software runs on a PC connected to
the emulator via a USB connection. The iC3000 emulator
communicates with the Nexus port on the MPC565 target
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:08:32 UTC from IEEE Xplore.  Restrictions apply. 
system. The target system executes the FADEC control
software (272 kB) and communicates with the jet engine
software (308 kB) on the second board via a CAN bus
which closes the control loop. The software is compiled
with the Tasking PowerPC C/C++ compiler tool suite,
release 2.1 while the open source GDB software is used to
debug and download the jet engine software via a BDM
(Background Debug Mode) on-chip debug interface of the
MPC565. For each experiment, the FADEC software is
first downloaded to the external SRAM of the target system
which then is restarted.
3.2. Experiment and software setup
The single bit-flip fault model is widely accepted as a
reasonably accurate representation of SEUs [11]. Single
bit-flip faults were injected in two separate campaigns
targeting the MPC565 CPU registers included in the
PowerPC User Instruction Set Architecture (UISA) [12]
and the data segments (stack, data and read-only data) of
the memory respectively. The code segments of
the
memory were not
targeted as they are assumed to be
located in ROM in the actual FADEC implementation.
Both campaigns were carried out using a pre-injection
analysis of the assembly code which enabled only effective
faults to be injected. The technique optimizes the fault-
space by utilizing assembly-level knowledge of the target
system in order to place single bit-flips in registers and
memory locations only immediately before these are read
by the executed instructions. This way, we avoid injecting
faults that are overwritten before they affect the program
execution. Experimental
results obtained by random
sampling of the optimized fault-space and the complete
(non-optimized)
two
the MPC565
different
microcontroller in [13]. The study showed that the pre-
injection analysis yields an increase of one order of
magnitude in the effectiveness of faults, a reduction of the
fault-space of two orders of magnitude in the case of CPU-
registers and four to five orders of magnitude in the case of
memory locations, while preserving a similar estimation of
the error detection coverage.
compared for
on
fault-space were
workloads
running
The FADEC software is divided into procedures which
execute at different frequencies, determined by a static
cyclic
scheduler. The procedures with the highest
frequency (200Hz) execute at each control loop and the
procedures with the lowest frequency (10Hz) execute once
in an interval of 20 control loops. Thus, 20 control loops
(loop 21 to 40) are targeted as the temporal trigger for the
experiments to ensure that all procedures are executed at
least once. During this time interval (0.1 to 0.2 seconds),
the thrust demand to the jet engine increases from 35% to
51% of the maximal thrust, see Figure 3.
Figure 3. Thrust demand vs fault-free response.
The thrust demand and the observed engine parameters
for a reference run of the nominal (fault-free) system are
shown in Figure 3. The values of the engine parameters are
used as
reference and are compared to the engine
parameters logged during fault injection experiments to
identify any violations of the system failure bounds defined
in Section 3.3. The thrust command in Figure 3 makes the
core engine fuel flow WFM increase. When fuel flow
increases, the high pressure and low pressure rotor speeds
NH and NL and the compressor outlet pressure PS3 also
increase. The variable guide vanes CVG and FVG opens
(decrease) to maintain an adequate pressure ratio across the
fan and compressor. The exhaust nozzle area A8 is initially
open for minimum thrust and closes when the engine
accelerates. Afterburner
flow is zero (minimum
measured WFR is 6%) until it is engaged at 4 s. After 5 s,
when both WFR and WFM are constant, the engine thrust
is at maximum. Note that the exhaust nozzle area, A8,
opens with the same rate as WFR increases to obtain the
correct engine pressures.
fuel
3.3. Undetected bounded failures and mission or
flight critical failures
We define a divergence from the reference run of at
least 20% for one or more of the parameters shown in
Figure 3 as a mission- or flight critical failure. Otherwise,
the failure is considered as an undetected bounded failure.
A mission critical failure may interrupt the mission since
the UAV should return to the base for engine diagnosis. A
flight critical failure may lead to a lost engine and a crash.
The assumptions for our classification are based on
previous experience of the engine.
4. Results
Table 1 summarizes the results of the fault injection
experiments. Despite the use of the pre-injection analysis
technique described in Section 3.2, a significant percentage
of non-effective errors are produced. The main causes for
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:08:32 UTC from IEEE Xplore.  Restrictions apply. 
this are i) booleans which are True if the numerical value is
non-zero will not change state due to most single bit-flips,
ii) many software statements may mask errors (e.g., errors
in the variable a of the statement [if a > 10 then …] will be
masked if a is larger than 10 before the bit-flip and
assumes an even higher value after the bit-flip), and iii)
some variables in the FADEC prototype are periodically
initialized to their default values and that errors may
therefore be overwritten.
(see also Table 2). The FADEC node gives up control if
one or several of them are executed (evaluated true). The
assertion that has been activated most frequently is EA14
which means that an error affecting the Compressor
Variable Geometry (CVG) functionality has been detected
(28.9% for register faults and 26.5% for memory faults).
Detected by
FADEC
executable
assertions
Non-
Detected by
MPC565
hardware
exceptions
Table 1. Error and failure classification.
Mission
critical
failures
0.3%
(9)
2.0%
(47)
1.1%
(56)
Undetected
bounded
failures
4.8%
(137)