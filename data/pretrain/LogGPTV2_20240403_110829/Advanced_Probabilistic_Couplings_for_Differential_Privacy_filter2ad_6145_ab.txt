Proposition 5 (Laplace accuracy). Let , β > 0, and suppose x is
the result from running L(t). Then |x−t| ≤ 1
β with probability
at least 1 − β.
 ln 1
Besides private primitives, the other main tools for construct-
ing private programs are the composition theorems. These results
describe the privacy level for a combination of private programs—
say, calls to the Laplace mechanism. We will use a bit of nota-
tion for compositions. Let {fi} be a set of n functions of type
A → D → Distr(A). Denote the n-fold composition f n : A →
D → Distr(A) by
f k(a, d) =
unit a
bind f k−1(a, d) fk(−, d)
: k = 0
: k ≥ 1.
Here, unit : A → Distr(A) and bind : Distr(A) → (A →
Distr(B)) → Distr(B) are the monadic operations for distribu-
tions. They satisfy the following equalities:
(cid:40)
(cid:26) 1 if a = b
(cid:88)
0 otherwise
b
unit(a)(b) =
and for f : A → Distr(B) and F : A → B → Distr(C) ,
(bind f F )(a)(c) =
f (a)(b) F (a)(b)(c).
We will also use this composition notation when the functions {fi}
have type A → Distr(A), simply dropping the parameter d above
when deﬁning f n : A → Distr(A).
Then, the most basic composition theorem in differential privacy
is sequential composition.
: A → D →
Theorem 6 (Sequential composition). Let fi
Distr(A) be a sequence of n functions, such that for every ﬁxed
a ∈ A, the functions fi(a) : D → Distr(A) are (i, δi)-
differentially private for some adjacency relation on D. Then for
every initial value a ∈ A, the composition f n(a) : D → Distr(A)
is (∗, δ∗)-differentially private for
n(cid:88)
n(cid:88)
∗

=
and δ
∗
=
i
δi.
If all adversarial queries q are 1-sensitive (i.e. |evalQ(q, d) −
evalQ(q, d(cid:48))| ≤ 1 for every adjacent databases d and d(cid:48)), then
ASVbt is (, δ)-differentially private.
The formal proof of this theorem, which we have veriﬁed in an
implementation of our logic within the EasyCrypt system, involves
several features:
• reasoning principles for mixing accuracy and privacy guar-
antees, using a combination of relational logics [6, 10] and
non-relational logics [11];
• a generalization of the advanced composition theorem for
handling the body of the loop;
• an adversary rule for handling interactive inputs in the loop;
and
• a new reasoning principle, called optimal subset coupling, for
handling the Laplace mechanism in the loop.
We stress that the use of pointwise equality, which is required for
proving privacy of between thresholds, makes the proof signiﬁcantly
more challenging than other examples involving solely adaptive
adversaries, advanced composition, and accuracy-dependent privacy.
We remark that Bun et al. [13] proposed Between Threshold and
proved its privacy. Their proof does not use advanced composition,
and follows from a somewhat complicated calculations about the
probabilities of certain events. Our proof demonstrates the power of
approximate liftings: somewhat surprisingly, we arrive at an elegant
privacy proof without probabilistic reasoning.
3. BACKGROUND
is a distribution over B if(cid:80)
Before presenting our new extensions, we ﬁrst review some pre-
liminaries about differential privacy, the connection to approximate
liftings, the program logic apRHL [6] and its extension apRHL+
[10], and the union bound logic aHL [11].
3.1 Mathematical preliminaries
To avoid measure-theoretic issues, we base our technical develop-
ment on distributions over discrete sets B. A function µ : B → R≥0
b∈supp(µ) µ(b) = 1. As usual, the sup-
port supp(µ) is the subset of B with non-zero weight under µ. We
write Distr(B) for the set of discrete distributions over B. Equality
of distributions is deﬁned as pointwise equality of functions.
We will also use marginal distributions. Formally, the ﬁrst and
second marginals of a distribution µ ∈ Distr(B1 × B2) are simply
the projections: the distributions π1(µ) ∈ Distr(B1) and π2(µ) ∈
Distr(B2) given by
(cid:88)
(cid:88)
b2∈B2
π1(µ)(b1) =
µ(b1, b2)
π2(µ)(b2) =
µ(b1, b2).
i=1
i=1
That is, the epsilons and deltas sum up through composition.
b1∈B1
3.2 Differential privacy
We will need several tools from differential privacy; readers
should consult the textbook by Dwork and Roth [17] for a more
comprehensive introduction. Most differentially private algorithms
are constructed from private primitive operations. The most famous
primitive is the Laplace mechanism.
Deﬁnition 3 (Laplace mechanism [19]). Let  > 0. The (discrete)
Laplace mechanism L : Z → Distr(Z) is deﬁned by L(t) =
t + ν, where ν ∈ Z with probability proportional to
Pr[ν] ∝ exp (− · |ν|).
The sequential composition theorem is quite useful, and is the
main principle supporting modular veriﬁcation of differential pri-
vacy. However, there is another composition theorem, known as
advanced composition [22]. Instead of summing up the privacy
costs, this theorem gives slower growth of  in exchange for in-
creasing the δ parameter. Advanced composition is an extremely
common tool for analyzing differentially private algorithms, but it
is not supported by most formal veriﬁcation systems today.
: A → D →
Theorem 7 (Advanced composition). Let fi
Distr(A) be a sequence of n functions, such that for every ﬁxed a ∈
A, the functions fi(a) : D → Distr(A) are (, δ)-differentially
private for some adjacency relation on D. Then, for every a ∈ A
and ω ∈ (0, 1), the composed function f n(a) : D → Distr(A) is
(∗, δ∗)-differentially private for
 + n(e − 1) and δ
∗
= nδ + ω.
(cid:16)(cid:112)2n ln(1/ω)
(cid:17)
∗

=
In particular, if we have (cid:48) ∈ (0, 1), ω ∈ (0, 1/2), and
2(cid:112)2n ln(1/ω)
(cid:48)
,
 =
a short calculation shows that
differentially private.
the function f n is ((cid:48), δ∗)-
Kairouz et al. [32] propose sharper versions of this composition
theorem, including a provably optimal version and a version for the
heterogeneous case when the privacy level (i, δi) may depend on
i. We will use Theorem 7 for simplicity, but our techniques enable
other composition theorems to be easily plugged in.
3.3 Approximate liftings
While the deﬁnition of differential privacy seems to be a straight-
forward property about probabilities in two distributions, a recent
line of work initiated by Barthe et al. [6] and subsequently devel-
oped [2, 10] shows that differential privacy is a consequence of an
approximate version of probabilistic coupling, called approximate
liftings. Couplings are a long-standing tool in probability theory for
analyzing pairs of distributions, but the relation between differential
privacy and approximate couplings is still being explored.
Unlike couplings, where there is a single accepted deﬁnition,
several incomparable notions of approximate liftings have been
proposed. The ﬁrst deﬁnition is by Barthe et al. [6] but has some
technical shortcomings; we will use a more recent deﬁnition by
Barthe and Olmedo [2]. We begin by deﬁning a distance on distribu-
tions, closely related to (, δ)-differential privacy.
Deﬁnition 8 (Barthe and Olmedo [2]). Let  ≥ 0. The -DP diver-
gence ∆(µ1, µ2) between two distributions µ1 ∈ Distr(A) and
µ2 ∈ Distr(A) is deﬁned as
(cid:18)
(cid:19)
sup
S⊆A
Pr
x←µ1
[x ∈ S] − exp() Pr
x←µ2
[x ∈ S]
.
For the connection to differential privacy, it is not hard to see
that if M : D → Distr(A), then M is (, δ)-differentially
inputs d, d(cid:48), we have
private iff for every pair of adjacent
∆(M (d), M (d(cid:48))) ≤ δ. This distance is also central to the deﬁ-
nition of approximate liftings.
Deﬁnition 9 (Barthe and Olmedo [2]). Two distributions µ1 ∈
Distr(A1) and µ2 ∈ Distr(A2) are related by the (, δ)-lifting
of Ψ ⊆ A1 × A2, written µ1 Ψ(cid:93)(,δ) µ2, if there exist two witness
distributions µL ∈ Distr(A1 × A2) and µR ∈ Distr(A1 × A2)
such that
1. π1(µL) = µ1 and π2(µR) = µ2;
2. supp(µL) ⊆ Ψ and supp(µR) ⊆ Ψ; and
3. ∆(µL, µR) ≤ δ.
Approximate liftings generalize several concepts for relating dis-
tributions. When µL = µR, we have a (0, 0)-lifting, sometimes
called an exact probabilistic lifting. Such a lifting, with any Ψ,
implies a probabilistic coupling between (µ1, µ2).
Approximate liftings satisfy the following property, also known
as the fundamental lemma of approximate liftings.
Lemma 10 (Barthe and Olmedo [2]). Let E1 ⊆ B1, E2 ⊆ B2,
µ1 ∈ Distr(B1) and µ2 ∈ Distr(B2). Let
Ψ = {(x1, x2) ∈ B1 × B2 | x1 ∈ E1 ⇒ x2 ∈ E2}.
If µ1 Ψ(cid:93)(,δ) µ2, then
Pr
x1←µ1
[x1 ∈ E1] ≤ exp() Pr
x2←µ2
[x2 ∈ E2] + δ.
Using this lemma, one can prove that differential privacy is equiv-
alent to a particular form of approximate lifting.
Proposition 11 (Barthe and Olmedo [2]). A probabilistic compu-
tation M : D → Distr(A) is (, δ)-differentially private for adja-
cency relation Φ iff
(cid:48)
M (a) =(cid:93)(,δ) M (a
)
for every two adjacent inputs a and a(cid:48).
Approximate liftings form the basis of the program logic apRHL,
to which we turn next.
3.4 The relational program logic
The logic apRHL, originally proposed by Barthe et al. [6], is a
relational program logic for verifying differential privacy. We take
this logic as our point of departure; we brieﬂy recall the main points
here.
We consider a simple imperative language with random sampling,
oracle calls and adversary calls; the latter two are new to the present
work. The set of commands is deﬁned inductively:
C ::= skip
noop
| C; C
sequencing
| X ← E
deterministic assignment
| X $← L(E)
Laplace mechanism
| if E then C else C
conditional
| while E do C
while loop
| (X , . . . ,X ) ← A(E, . . . ,E)
adversary call
| (X , . . . ,X ) ← O(E, . . . ,E) procedure call
where X is a set of variables and E is a set of expressions. Vari-
ables and expressions are typed, and range over standard types like
booleans, integers, databases, queries, lists, etc. We omit the seman-
tics of expressions, which is standard. Commands are interpreted
as maps State → Distr(State); this is also a standard choice
(e.g., see Barthe et al. [6]).2 We will write [[c]]m to mean the output
distribution of command c, executed on input memory m.
An apRHL judgment has the form
(cid:96) c ∼(cid:104),δ(cid:105) c
(cid:48)
: Φ =⇒ Ψ.
Reminiscent of Hoare logic, Φ represents the pre-condition while Ψ
represents the post-condition. Both Φ and Ψ are ﬁrst order formulas
over the program variables. For expressing relational properties,
program variables are tagged with either (cid:104)1(cid:105) or (cid:104)2(cid:105) to indicate
whether they belong to c or c(cid:48) respectively. For instance, we can
assert that the variable x differs by at most 1 in the two runs with
the assertion |x(cid:104)1(cid:105) − x(cid:104)2(cid:105)| ≤ 1.
Crucially, the post-condition Ψ is interpreted as an approximate
lifting over the output distributions. More formally, the judgment is
valid iff for every two memories m1 and m2 such that m1 Φ m2,
we have
([[c1]]m1 ) Ψ(cid:93)(,δ) ([[c2]]m2 ).
2We will assume that commands are terminating on all executions.
The logic apRHL can also reason about possibly non-terminating
programs by working with sub-distributions instead of distributions.
We present selected rules, taken from prior presentations of apRHL
[6, 10] in Fig. 2; F V (Φ) denotes the set of program variables in
the assertion Φ, and M V (c) denotes the set of program variables
that are modiﬁed (i.e., written) by program c. Many of the rules
bear a resemblance to the standard Hoare logic rules. The rules
[ASSN] and [COND] are relational versions of the assignment and
conditional rules; note that [COND] assumes that the two guards are
equal in the pre-condition. The rule [SEQ] reﬂects the composition
principle of approximate liftings, where the indices  and δ add; this
rule generalizes the standard composition theorem of differential
privacy. The rule [WHILE] extends this reasoning to loops with