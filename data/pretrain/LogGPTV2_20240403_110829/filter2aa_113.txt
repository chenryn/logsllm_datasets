YOUR COMOANYS NAME
Python动态代码审计
演讲人：聂心明
2 0 1 8
自我介绍
•亚信安全软件工程师
•n0tr00t团队成员
•个人博客：https://blog.csdn.net/niexinming
•个人github地址：https://github.com/niexinming
•大型项目，代码结构复杂
•有些危险的功能隐藏较深（危险的定时计划任务、sqlite数据库任意创建导致任意
文件覆盖……）
•提高效率
为什么会想到动态代码审计？
漏洞
数据库
敏感函数
文件读写
网络访问
日志
PART 01
数据库日志
目录
CONTENTS
PART 02
Hook关键函数 
PART 03
结合Auditd 
PART 04
http盲攻击
01
02
03
04
PART 05
fuzzing
05
常规Web代码审计的准备工作有哪些？
•准备好代码运行环境
•IDE或者编辑器
•各种调试工具（xdebug）
•Burp Suite
•浏览器的各种插件（hackbar、modify headers……）
•打开数据库的general log
PART 
01
数据库日志
如何打开数据库的general log
Mysql：
set global general_log_file=‘’;
set global general_log=on;
PostgreSQL：
编辑：postgresql.conf 
log_directory = 'pg_log'                    
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_statement = ‘all’
……
发送一些包含sql注入的畸形数据
利用Linux的grep指令做一下过滤
我想关注危险函数的调用和传参怎么办？
PART 
02
Hook关键函数
容易改变的python对象
劫持模块
输入
参数
正常模块
输出参数
日志
可以劫持我们认为敏感的函数
把参数输出到日志中，方便找到ssti、pickle反序列化漏洞
和命令执行漏洞等其他的漏洞
方便拓展到其他的模块或者函数
•  cd hook/
•  cp os.py xxx.py
•  编辑xxx.py ：
注释掉原来被hook的函数，添加想要hook的函数
下面的示例是hook了subprocess模块中check_call函数
修改启动代码从shell中启动python web
只要简单修改启动代码就可以从WSGI方式启动切换到shell启动
从内存中删掉已加载的模块
一些模块通过__import__动态导入，需要在动态导入后通过del modules删掉被装载的模块
需要自己处理的坑
其他问题
Python web性能下降、代码不兼容、有些模块无法被hook……
关闭调试选项
例如在flask启动时将debug选项设置为false，否则会产生两个python进程
怎么不通过修改原始代码去获取文件读写操作？
PART 
03
结合Auditd 
Auditd
auditd（或 auditd 守护进程）是Linux审计系统中用户空间的一个组件，
其可以记录Linux中文件，进程等操作,且安装方便
CentOS 默认安装
Ubuntu 安装：apt-get install auditd
只要简单的配置就可以监视一些文件操作 
• sudo auditctl -a exclude,always -F msgtype!=PATH -F msgtype!=SYSCALL    #记录文件操作
• sudo auditctl -a always,exit -F arch=b64 -S execve -k rule01_exec_command  #记录所有的shell指
令的执行
• sudo auditctl -a always,exit -F pid=$mypid    #记录指定进程文件操作
发送一些包含目录跳转的畸形数据
• 通过grep和关键字高亮工具（https://github.com/paoloantinori/hhighlighter）进行查看日志
除了记录文件读取，还能记录文件的其他操作
任意文件创建
任意文件删除
任意文件上传
任意文件读取 
敏感文件操作
怎么解决诸如ssrf等网络操作的问题？
PART 
04
http盲攻击
 ssrf可以探索企业内网
构造请求dns解析的数据
• Ping –c 1 xxx.pw
• url=http://xxx.pw
• 
]>
&xxe;
利用dns带外数据传输可以发现ssrf,xxe,命令执行等漏洞
如何半自动化？
PART 
05
fuzzing
web api
正常数据
畸形数据
……数据
危险函数参数日志
数据库日志
auditd日志
dns日志
Web 报错日志
poc数据
如何快速开始fuzzing呢？
利用burp自带的功能就可以
需要根据自己的业务类型制定自己的测试用例
自己要想办法处理产生的大量的日志
需要自己处理的问题
其他问题
To do
1. 自动化部署客户端
2. 开发一个日志处理平台
3. 尽可能的覆盖更多的漏洞类型
4. 丰富测试用例
5. 开源      （ https://github.com/niexinming/python_hook）
结语
•我已经将上面的所提到的技术广泛的用在我自己的工作之中，为我自己节省了大
量的时间和精力。并且通过比较多实践，我把一些繁琐的过程和步骤做了简化，
也填了大大小小的坑。与此同时，我找到了公司内部产品中出现的大大小小的漏
洞，虽然这些漏洞没办法分享出来，但是我希望大家能从我今天分享的东西中学
到一些有用的东西。后续我也会把这个ppt中内容发到我的博客中，如果大家有什
么问题和想法，欢迎在csdn上私信我，或者在我的留言板中留言
谢谢观看
演讲人：聂心明