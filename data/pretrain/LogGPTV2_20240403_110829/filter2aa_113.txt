# 公司名称
## Python动态代码审计
### 演讲人：聂心明
### 2018年

---

## 自我介绍
- **职位**：亚信安全软件工程师
- **团队成员**：n0tr00t团队
- **个人博客**：[https://blog.csdn.net/niexinming](https://blog.csdn.net/niexinming)
- **GitHub**：[https://github.com/niexinming](https://github.com/niexinming)

---

## 项目背景
- **大型项目**：代码结构复杂
- **隐藏的危险功能**：如定时任务、任意文件覆盖等
- **目标**：提高审计效率

---

## 为什么选择动态代码审计？
- **漏洞检测**
- **数据库操作监控**
- **敏感函数调用**
- **文件读写监控**
- **网络访问日志**
- **日志记录**

---

## 目录
1. 数据库日志
2. Hook关键函数
3. 结合Auditd
4. HTTP盲攻击
5. Fuzzing

---

## 常规Web代码审计准备工作
- **环境搭建**：准备好代码运行环境
- **开发工具**：IDE或编辑器
- **调试工具**：xdebug等
- **代理工具**：Burp Suite
- **浏览器插件**：hackbar, modify headers等
- **数据库日志**：打开general log

---

### PART 01: 数据库日志
#### 如何开启数据库的general log
- **MySQL**：
  ```sql
  set global general_log_file='';
  set global general_log=on;
  ```
- **PostgreSQL**：
  编辑 `postgresql.conf` 文件：
  ```plaintext
  log_directory = 'pg_log'
  log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
  log_statement = 'all'
  ```

- **发送畸形数据**：发送包含SQL注入的数据
- **日志过滤**：使用Linux的grep命令进行过滤

---

### PART 02: Hook关键函数
- **Python对象劫持**：可以劫持我们认为敏感的函数
- **日志记录**：将参数输出到日志中，便于发现漏洞（如SSTI、Pickle反序列化漏洞和命令执行漏洞）
- **模块劫持示例**：
  ```bash
  cd hook/
  cp os.py xxx.py
  # 编辑xxx.py
  # 注释掉原函数，添加新的hook函数
  # 示例：Hook subprocess.check_call
  ```

- **启动方式修改**：从WSGI方式切换到shell启动
- **删除已加载模块**：通过`del modules`删除动态导入的模块
- **注意事项**：性能下降、代码不兼容等问题
- **关闭调试选项**：例如在Flask中设置`debug=False`

---

### PART 03: 结合Auditd
- **Auditd简介**：记录Linux系统中的文件和进程操作
- **安装**：
  - CentOS：默认安装
  - Ubuntu：`apt-get install auditd`
- **配置**：
  ```bash
  sudo auditctl -a exclude,always -F msgtype!=PATH -F msgtype!=SYSCALL
  sudo auditctl -a always,exit -F arch=b64 -S execve -k rule01_exec_command
  sudo auditctl -a always,exit -F pid=$mypid
  ```
- **日志查看**：使用grep和关键字高亮工具（如hhighlighter）查看日志
- **记录其他操作**：任意文件创建、删除、上传和读取

---

### PART 04: HTTP盲攻击
- **SSRF探索内网**：构造请求DNS解析的数据
- **利用DNS带外数据传输**：发现SSRF、XXE和命令执行漏洞
- **示例**：
  ```plaintext
  Ping –c 1 xxx.pw
  url=http://xxx.pw
  ]>
  &xxe;
  ```

---

### PART 05: Fuzzing
- **自动化测试**：利用Burp自带的功能
- **测试用例**：根据业务类型制定
- **日志处理**：处理大量生成的日志
- **后续工作**：
  1. 自动化部署客户端
  2. 开发日志处理平台
  3. 覆盖更多漏洞类型
  4. 丰富测试用例
  5. 开源：[https://github.com/niexinming/python_hook](https://github.com/niexinming/python_hook)

---

## 结语
- **实践经验**：这些技术已在我的工作中广泛应用，节省了大量时间和精力。
- **分享目的**：希望大家能从今天的分享中学到有用的东西。
- **后续计划**：我会将这个PPT内容发布在我的博客上。如果有任何问题或想法，欢迎在CSDN上私信我，或在我的留言板中留言。

谢谢观看！

演讲人：聂心明