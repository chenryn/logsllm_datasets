多维向量搜索
(图像识别、相似向量扩选、向量范围搜索)
阿里云
digoal
目录
• CUBE
• IMGSMLR
• PASE
• 应用场景介绍
cube – 所有版本支持
• https://www.postgresql.org/docs/current/cube.html
• n维点: (x1,x2,...,xn)
• n维cube(采用2个对角point表示): [(x1,...,xn),(y1,...,yn)]
• 向量距离排序（GiST索引）：
Euclidean distance
p与q的距离:
Taxicab distance
q
p与q的距离: 12
绿色为欧式距离sqrt(12)
p
Chebyshev distance
棋盘距离
例子
https://github.com/digoal/blog/blob/master/201810/20181011_01.md
1、创建插件
create extension cube;
2、创建测试表
create table tt (id int , c1 cube);
3、创建GIST索引
create index idx_tt_1 on tt using gist(c1);
4、创建生成随机CUBE的函数
create or replace function gen_rand_cube(int,int) returns cube as $$
select ('('||string_agg((random()*$1)::int::text, ',')||')')::cube from generate_series(1,$2);
$$ language sql strict;
db1=> select gen_rand_cube(10000,16); -- 生成16维向量，每一维度取值范围0-10000
gen_rand_cube
-------------------------------------------------------------------------------------------------
(6671, 1730, 2177, 4208, 2613, 4877, 3942, 4402, 244, 9945, 2581, 3640, 2384, 8457, 9126, 1102)
(1 row)
例子
6、写入测试数据（最多100个维度）
insert into tt select id, gen_rand_cube(10000, 16) from generate_series(1,1000000) t(id);
7、通过单个特征值CUBE查询相似人群，以点搜群 (  )
select * from tt order by
c1  '(6671, 1730, 2177, 4208, 2613, 4877, 3942, 4402, 244, 9945, 2581, 3640, 2384, 8457, 9126, 1102)' limit 10; -- 个体搜群体
执行计划:
QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------
Limit (cost=0.41..1.30 rows=10 width=148)
-> Index Scan using idx_tt_1 on tt (cost=0.41..89127.71 rows=1000000 width=148)
Order By: (c1  '(6671, 1730, 2177, 4208, 2613, 4877, 3942, 4402, 244, 9945, 2581, 3640, 2384, 8457, 9126, 1102)'::cube)
(3 rows)
例子
8、cube范围圈选人群
select * from tt where
'(7079, 3124, 1165, 4973, 3042, 6319, 5866, 3759, 1667, 7551, 3949, 3373, 4504, 9673, 9808, 199),
(17079, 13124, 11165, 14973, 11042, 16319, 15866, 3759, 1667, 17551, 13949, 13373, 14504, 19673, 19808, 1199)
'::cube
@> c1;
执行计划:
Index Scan using idx_tt_1 on tt (cost=0.41..1139.91 rows=1000 width=140)
Index Cond: (c1   )
select * from tt order by c1 
'(7079, 3124, 1165, 4973, 3042, 6319, 5866, 3759, 1667, 7551, 3949, 3373, 4504, 9673, 9808, 199),
(17079, 13124, 11165, 14973, 11042, 16319, 15866, 3759, 1667, 17551, 13949, 13373, 14504, 19673, 19808, 1199)
'::cube
limit 10; -- 群体搜群体
执行计划：
Limit (cost=0.41..1.30 rows=10 width=148)
-> Index Scan using idx_tt_1 on tt (cost=0.41..89127.71 rows=1000000 width=148)
Order By: (c1  '(7079, 3124, 1165, 4973, 3042, 6319, 5866, 3759, 1667, 7551, 3949, 3373, 4504, 9673, 9808, 199),(17079, 13124, 11165, 14973,
11042, 16319, 15866, 3759, 1667, 17551, 13949, 13373, 14504, 19673, 19808, 1199)'::cube)
(3 rows)
目录
• CUBE
• IMGSMLR
• PASE
• 应用场景介绍
imgsmlr
• https://github.com/digoal/blog/blob/master/201809/20180904_02.md
• 与cube不一样的地方
• imgsmlr支持图像特征值转换
• imgsmlr内部使用float4存储每个维度的值
例子
create extension imgsmlr;
create table t_img_bytea (id int primary key, vid int, pic bytea); -- 原始表, 二进制存储原始图
像
create table t_img_sig (id int primary key, vid int, sig signature, pat pattern); -- 特征表
create index idx_t_img_sig_1 on t_img_sig using gist(sig); -- 特征索引
insert into t_img_bytea values (.......); -- 写入原始图像
insert into t_img_sig select id, vid, png2pattern(pic), pattern2signature(png2pattern(pic)) from
t_img_bytea; -- 转换为特征
select * from t_img_sig order by sig  pattern2signature(png2pattern('用户上传的照片的二
进制')) limit 1; -- 根据图像搜索
目录
• CUBE
• IMGSMLR
• PASE
• 应用场景介绍
pase – rds pg 11支持，即将覆盖所有主流
版本
https://github.com/digoal/blog/blob/master/201912/20191219_02.md
https://help.aliyun.com/document_detail/147837.html
与cube,imgsmlr的差异
支持新增2种索引接口(ivfflat, hnsw)
内部采用float4存储每个维度value
查询性能更好
ivfflat 索引存储结构介绍
ivfflat搜索介绍
• 算法流程说明：
1、高维空间中的点基于隐形的聚类属性，按照kmeans等聚类算法对向量进行聚类处理，使得每个类
簇有一个中心点。
2、检索向量时首先遍历计算所有类簇的中心点，找到与目标向量最近的n个类簇中心。