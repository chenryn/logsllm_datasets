控制结构
Control structures
控制结构
The control structures of Go are related to those of C but differ in important ways. There is
no do or while loop, only a slightly generalized for; switch is more flexible; if and switch
accept an optional initialization statement like that of for; break and continue statements take
an optional label to identify what to break or continue; and there are new control structures
including a type switch and a multiway communications multiplexer, select. The syntax is
also slightly different: there are no parentheses and the bodies must always be brace-
delimited.
Go 中的结构控制与 C 有许多相似之处，但其不同之处才是独到之处。 Go 不再使用 do 或
while 循环，只有一个更通用的 for；switch 要更灵活一点；if 和 switch 像 for 一样可接受可选
的初始化语句； 此外，还有一个包含类型选择和多路通信复用器的新控制结构：select。 其
语法也有些许不同：没有圆括号，而其主体必须始终使用大括号括住。
If
In Go a simple if looks like this:
在 Go 中，一个简单的 if 语句看起来像这样：
if x > 0 {
return y
}
Mandatory braces encourage writing simple if statements on multiple lines. It's good style to
do so anyway, especially when the body contains a control statement such as a return or
break.
强制的大括号促使你将简单的 if 语句分成多行。特别是在主体中包含 return 或 break 等控制
语句时，这种编码风格的好处一比便知。
Since if and switch accept an initialization statement, it's common to see one used to set up
a local variable.
由于 if 和 switch 可接受初始化语句， 因此用它们来设置局部变量十分常见。
22
控制结构
if err := file.Chmod(0664); err != nil {
log.Print(err)
return err
}
In the Go libraries, you'll find that when an if statement doesn't flow into the next statement—
that is, the body ends in break, continue, goto, or return—the unnecessary else is omitted.
在 Go 的库中，你会发现若 if 语句不会执行到下一条语句时，亦即其执行体 以 break、
continue、goto 或 return 结束时，不必要的 else 会被省略。
f, err := os.Open(name)
if err != nil {
return err
}
codeUsing(f)
This is an example of a common situation where code must guard against a sequence of
error conditions. The code reads well if the successful flow of control runs down the page,
eliminating error cases as they arise. Since error cases tend to end in return statements, the
resulting code needs no else statements.
下例是一种常见的情况，代码必须防范一系列的错误条件。若控制流成功继续， 则说明程序
已排除错误。由于出错时将以 return 结束， 之后的代码也就无需 else 了。
f, err := os.Open(name)
if err != nil {
return err
}
d, err := f.Stat()
if err != nil {
f.Close()
return err
}
codeUsing(f, d)
Redeclaration and reassignment
重新声明与再次赋值
An aside: The last example in the previous section demonstrates a detail of how the := short
declaration form works. The declaration that calls os.Open reads,
题外话：上一节中最后一个示例展示了短声明 := 如何使用。 调用了 os.Open 的声明为
23
控制结构
f, err := os.Open(name)
This statement declares two variables, f and err. A few lines later, the call to f.Stat reads,
该语句声明了两个变量 f 和 err。在几行之后，又通过
d, err := f.Stat()
which looks as if it declares d and err. Notice, though, that err appears in both statements.
This duplication is legal: err is declared by the first statement, but only re-assigned in the
second. This means that the call to f.Stat uses the existing err variable declared above, and
just gives it a new value.
调用了 f.Stat。它看起来似乎是声明了 d 和 err。 注意，尽管两个语句中都出现了 err，但这
种重复仍然是合法的：err 在第一条语句中被声明，但在第二条语句中只是被再次赋值罢了。
也就是说，调用 f.Stat 使用的是前面已经声明的 err，它只是被重新赋值了而已。
In a := declaration a variable v may appear even if it has already been declared, provided:
在满足下列条件时，已被声明的变量 v 可出现在:= 声明中：
this declaration is in the same scope as the existing declaration of v (if v is already
declared in an outer scope, the declaration will create a new variable §),
the corresponding value in the initialization is assignable to v, and
there is at least one other variable in the declaration that is being declared anew.
本次声明与已声明的 v 处于同一作用域中（若 v 已在外层作用域中声明过，则此次声明
会创建一个新的变量 §），
在初始化中与其类型相应的值才能赋予 v，且
在此次声明中至少另有一个变量是新声明的。
This unusual property is pure pragmatism, making it easy to use a single err value, for
example, in a long if-else chain. You'll see it used often.
这个特性简直就是纯粹的实用主义体现，它使得我们可以很方面地只使用一个 err 值，例如，
在一个相当长的 if-else 语句链中， 你会发现它用得很频繁。
§ It's worth noting here that in Go the scope of function parameters and return values is the
same as the function body, even though they appear lexically outside the braces that
enclose the body.
§ 值得一提的是，即便 Go 中的函数形参和返回值在词法上处于大括号之外， 但它们的作用
域和该函数体仍然相同。
24
控制结构
For
The Go for loop is similar to—but not the same as—C's. It unifies for and while and there is
no do-while. There are three forms, only one of which has semicolons.
Go 的 for 循环类似于 C，但却不尽相同。它统一了 for 和 while，不再有 do-while 了。它有三
种形式，但只有一种需要分号。
// Like a C for
for init; condition; post { }
// Like a C while
for condition { }
// Like a C for(;;)
for { }
// 如同 C 的 for 循环
for init; condition; post { }
// 如同 C 的 while 循环
for condition { }
// 如同 C 的 for(;;) 循环
for { }
Short declarations make it easy to declare the index variable right in the loop.
简短声明能让我们更容易在循环中声明下标变量：
sum := 0
for i := 0; i = len(src) {
err = errShortInput
break Loop
}
if validateOnly {
break
}
size = 2
update(src[n] + src[n+1] b
func Compare(a, b []byte) int {
for i := 0; i  b[i]:
return 1
case a[i] < b[i]:
return -1