address by X might be reused by another UE, not U. However, it
will not affect the free uplink access (X is still free of charge).
Attack assessment. We assess the threats of the proposed free
uplink attack. We examine the volume limit by varying it from
1MB to 100MB. All packets are delivered without charge. No sign
of volume limits is observed.
3.2 On Authorization
3.2.1 Current Solution
The authorization for MDC concerns charging actions with or
without user content. This is slightly different from the Internet
case, where authorization is performed by an ISP to let certain traf-
ﬁc pass through. In 3G/4G networks, it varies for two types of data
transfer: inbound and outbound.
The outbound transfer is authorized through implicit user con-
sent based on authentication. To initiate data service, the UE must
be authenticated ﬁrst. Afterwards, packets from the authenticated
UE are sufﬁcient to signify that the UE authorizes the data transfer
and its charging.
The case is different for the inbound data transfer, where the UE
is at the last hop to receive data and charging is already performed
upstream. Three mechanisms are used to ensure implicit autho-
rization. First, deployed ﬁrewalls and NATs help. Firewalls pre-
vent trafﬁc types of no interest from getting into the network, while
NATs isolate the cellular networks from the external, public Inter-
net via private IP address and port mapping. The incoming trafﬁc
is allowed to pass through only when it matches a valid mapping,
which is set by an outgoing and “already-authorized” data stream.
As illustrated in Figure 6(a), a valid entry is created for each out-
bound trafﬁc ﬂow. It then acts as a trafﬁc ﬁlter for subsequent in-
bound ﬂows. Second, the standard speciﬁcation recommends to in-
stall trafﬁc ﬁlters at border gateways and access routers [5], to pre-
vent unauthorized trafﬁc from traversing the cellular network. Last,
user-installed ﬁlter rules (inserted into the EPS bearer) at the core
gateway can also facilitate to shield unwanted trafﬁc from reaching
the UE. Note that such rules are proposed to differentiate packets
with diverse quality-of-service requirements. Each inbound packet
is thus aligned with a valid EPS bearer for the target UE. In a nut-
shell, only packets passing all ﬁlter rules are delivered to the UE.
U(cid:1)
P-GW(cid:1)
Data-plane(cid:1)
Control-plane(cid:1)
U.GTP(cid:1) U.IP(cid:1)
(cid:1)(cid:1)
UL authorization via authentication(cid:1)
Filtering: setup a valid entry(cid:1)
(cid:1)  Filtering:(cid:1)
 map to a valid GTP(cid:1)
(cid:1)  Filtering:(cid:1)
 match with a valid entry(cid:1)
(a) Current authorization solution
U(cid:1)
P-GW(cid:1)
UE: Close the app(cid:1)
(TCP: half-open, UDP: still open)(cid:1)
Filtering: setup a valid entry(cid:1)
l
Entry (stateful)(cid:1)
Expiration independent of UE(cid:1)
(cid:1)
(cid:1)
(b) Authorization fraud: “non-expiring” authorization
Figure 6: Current authorization solution and the authorization
frauds on the control plane.
X(cid:1)
X.GTP(cid:1) U.IP(cid:1)
U(cid:1)
U(cid:1)
MMS (cid:1)
P-GW(cid:1)
(a)(cid:1)
P-GW(cid:1)
(b)(cid:1)
U.IP(cid:1)
X’(cid:1)
MMS Server X(cid:1)
Figure 7: Illustration of two Cloak-and-Dagger Spamming At-
tacks. Attacker X exploits the authorization frauds via IP
spooﬁng and MMS.
3.2.2 Vulnerability Analysis
We uncover two possible cases of authorization frauds for data
transfer initiated by an external host on the Internet. Effectively,
no proper authorization is in place for the inbound transfer.
In
the ﬁrst case, the adversary deceives the NAT to open a backdoor
through the authentication bypass loophole. The incoming trafﬁc
thus passes through the ﬁrewall and NAT. It circumvents the cur-
rent fence that leverages authenticated outgoing trafﬁc to indirectly
authorize the incoming trafﬁc. Note that, NAT, as well as the ﬁre-
wall and border router, can exploit the information only at IP and
above layers; It is impossible to validate whether outgoing packets
originate from the authenticated one.
The second fraud occurs when any side-channel or third-party
mechanism is exploited to trap the UE to leak its data access in-
formation. Afterwards, the user is tricked (usually unaware) to ini-
tialize certain outgoing data delivery, thus granting access to the
attacker. Moreover, popular mobile applications (e.g., VoIP, MMS)
may use the push-based communication model and perform auto-
matic background operations. This feature can also be exploited to
trap the victim.
The above frauds exploit the “non-expiring authorization,” as
illustrated in Figure 6(b). The current practice is to invoke one-
time authorization only at the start, but apply soft-state renewal by
data packets during actual transfer. For example, when an inbound
packet arrives at NAT, the mapping between its IP address and the
port number remains valid until timeout (e.g., 5 minutes). How-
ever, once the access is granted, it is largely beyond user control.
731IP delivery follows the store-and-forward model, and intermediate
routers relay packets asynchronously. When the UE tears down the
ﬂow, NAT may not ﬂush the mapping entry right way. Moreover,
the access control decision is made locally. If new packets from
the ﬂow arrive before timeout, the timer is refreshed and the ﬂow
is still considered alive. Consequently, incoming packets can still
pass through and charges are imposed accordingly. This happens
although the user has terminated the ﬂow on his side. The threat
becomes ominous when the user imprudently authorizes malicious
data access. As a result, data transfer is allowed without the en-
dorsement from the user. While doing nothing, mobile users suffer
from spam attacks and associated billing charge. Even worse, users
lack effective mechanisms to stop the spam.
The root causes are multifaceted. First, one-time authorization
during initiation cannot ensure access control for long-lived trans-
fer. Runtime authorization is needed. Second, current authoriza-
tion is mostly open loop without taking input from the end user.
Without the user’s decision feedback, authorization cannot be done
properly. Third, no de-authorization mechanism is available, so the
user does not have the mechanism to stop spam at will. The push-
based delivery in IP makes attacks easier.
Note that the charging model asks the phone to pay for both up-
stream and downstream trafﬁc. For the authorization vulnerabil-
ity, we assume that the mobile phone is secure (without malware).
Therefore, the upstream trafﬁc comes from the mobile device (ex-
cept the IP spooﬁng packets), and authorization for upstream pack-
ets is correct. We thus focus on downstream data sessions in the
showcase attack.
3.2.3 Exploit: Cloak-and-Dagger Spamming Attack
The attack idea is to inject spam messages to mobile victims,
thus increasing their data bills. The key is to deceive cellular net-
works to allow for spamming. We propose two approaches which
correspond to each case of authorization frauds identiﬁed above, as
shown in Figure 7. The ﬁrst approach is to counterfeit an outgoing
data packet from the victim via IP spooﬁng. The inside attacker
(the attack phone) impersonates the victim to set up a connection
with the external spamming server. Data spam follows thereafter.
The second approach is to set a trap to obtain data access to the
victim. We sketch a new spamming attack via Multimedia Messag-
ing Service (MMS). MMS is a standard service offered by cellular
carriers. It is used to send multimedia content to mobile phones.
The attack exploits the automatic data connection setup in MMS.
When the phone receives a MMS message, it automatically opens a
HTTP connection with the MMS server and retrieves data. There-
fore, the attacker pushes one MMS message to the phone, which
embeds the link to his own malicious server. Once the phone con-
nects to the server, the attacker starts to spam over this connection.
Here, we exploit the push model in MMS, which was used to drain
phone’s battery in [31]. Different from their work, we exploit it
for the charging attack. Moreover, we found that the approach pro-
posed in [31] failed in our case. It was because we use TCP but
not UDP. To make it succeed, we reﬁne the attack in three aspects.
First, we set the transfer encoding of the HTTP connection as chunk
based. Without this conﬁguration, the connection may be disrupted
by the phone. Second, small chunks are sent to the phone to keep
this connection alive. Last, spamming packets are modiﬁed to pre-
vent from triggering any abnormal HTTP event. Sequence numbers
outside the congestion window are used in TCP packets. As a re-
sult, these packets are received by the phone and are charged, but
they are discarded by TCP and do not affect the HTTP connection.
Note that the trap is not only limited to the above forms. It can
be done through phishing, abusing VoIP tools (e.g., Skype) [27] or
Spam
Recv by UE
Charged by OP
)
B
M
(
e
m
u
l
o
V
 150
 120
 90
 60
 30
 0
Spam
Recv by UE
Charged by OP
)
B
M
(
e
m
u
l
o
V
 150
 120
 90
 60
 30
 0
 0  10  20  30  40  50  60  70  80
Attack Time (Minutes)
(a) OP-I, via IP spooﬁng
 0  10  20  30  40  50  60  70  80
Attack Time (Minutes)
(b) OP-II, via MMS
Figure 8: Data volume incurred by spamming attack varies
with duration in OP-I and OP-II.
an existing TCP transmission [22]. However, they all require some
actions (e.g., clicking a phishing link or starting a connection ﬁrst)
from the victim, thus restricting its practicality. Instead, our cloak-
and-dagger spamming attacks are more subtle and severe. They do
not require malware or actions on the victim phone. Moreover, the
MMS-based attack is quite threatening since it launches the attack
against a chosen victim and only requires the phone number of the
victim (which is easily accessible).
3.2.4 Experimental Validation
Our experiments validate that the authorization loophole indeed
exists. Mobile users are vulnerable to spamming. The spam in-
curs billing upon mobile victims who do not authorize such data
transfer.
Loophole veriﬁcation. We observe the IP-spooﬁng based fraud
in both carriers, and the MMS-based one only in OP-II. For the
ﬁrst one, we extend the above two-phone experiment. In addition to
forging U’s IP address, adversary X also asks the server to send junk
data to user U. For the second case, we deploy a malicious MMS
server in our lab and trap the victim to download the multimedia
content. Once the connection is established, data delivery can be
controlled by our server. Both experiments show that, U receives
all these data and is charged for the spam, despite taking no action.
Note that even if the victim quickly switches on after off, s(he) is
still vulnerable because possibly the same IP address is assigned
and NAT/ﬁrewall keeps the attacked port valid.
Attack assessment. We have prototyped the above attacks and
show the spamming result via IP spooﬁng for OP-I, and via MMS
for OP-II. The assessment for other attacks is similar. Figure 8
shows the attack damage during 80 minutes; the spamming packets
are sent at 200 kbps with 500 bytes each. There is no sign of limit
on the attack duration. The victim receives about 115-117 MB junk
data, thus being charged for about 118 MB by both carriers. The
junk data is discarded before being passed to the application layer.
3.3 On Accounting
3.3.1 Current Solution and Vulnerability Analysis
The current solution to ensure volume accuracy depends on the
accounting operation in parallel with data transfer (see Figure 9).
The logging is done at the core gateway since all packets must tra-
verse it to reach their destination (either the UE or the external
host). The volume sums up the payload (including IP and above
headers) of all arriving packets.
However,
the accounting volume might differ from (usually
larger than) that actually delivered by cellular networks. The vol-
ume is inﬂated once data delivery fails after being counted at the
gateway (see the bottom plot of Figure 9). The inaccuracy can oc-
cur when some get lost or dropped under certain attacks or failures
over the radio link. It can be manipulated by exploiting connec-
732U(cid:1)
P-GW(cid:1)
V(cid:1)
(cid:1)(cid:1)
(cid:1)(cid:1)
Volume = local view @P-GW(cid:1)
Packets can be lost after being charged(cid:1)
Figure 9: Current open-loop accounting solution.
X(cid:1)
U(cid:1)
P-GW(cid:1)
TTL =0  (cid:1)
(dropped)(cid:1)
TTL >=0(cid:1)
TTL = n(cid:1)
Figure 10: Illustration of Hit-but-no-touch attack. Attacker X
modiﬁes the TTL value so that packets are dropped after being
charged, thereby imposing over-billing.
tionless IP-based delivery, where data packets are independently
forwarded or dropped by each network element on the path (see
the proposed attack).
The above vulnerability is rooted in the open-loop charging
model. Billing is based on the local view at the gateway only, and
accounting inaccuracy is inevitable whenever packet delivery dif-
fers before and after the gateway.
3.3.2 Exploit: Hit-but-No-Touch Attack
We devise a novel hit-but-no-touch attack to overcharge the user.
The idea is to modify the time-to-live (TTL) ﬁeld of incoming IP
packets so that they only reach the core gateway but not the phone.
Note that TTL is decremented by each intermediate router and dis-
carded if it reaches zero. Our attack leverages this delivery rule
for IP packets, originally designated to prevent packets from being
routed over loops over the Internet. Given an improper TTL value,
packets arrive at the gateway (accounting completes) and then are
discarded , thus incurring over-billing. The attacker ﬁrst probes
with different TTL values, determines the appropriate parameter,
and then activates the attack. This attack design allows for the ad-
versary to send packets in a covert manner. The victim is charged
for data that never arrive at the phone.
This attack differs from our prior ﬁndings on inaccurate account-
ing volume [28] [36]. Over-accounting has been reported in two
scenarios:
lost wireless connectivity [28] and mobility-triggered
handoff [36]. However, both are caused by plausible, non-human
factors which exhibit only under certain settings (e.g., lossy wire-
less channels and mobility). In contrast, the hit-but-no-touch attack