buffer-overflow vulnerabilities have also been exploited in the wild to bypass security 
mechanisms such as antivirus software, both through bypassing antivirus engines and 
through gaining full control of the target victim machine.
There are two types of buffer overflow vulnerabilities that can be exploited:
• Stack-based buffer overflow
• Heap-based buffer overflow
To keep things simple, we will focus on stack-based buffer overflow, since the goal of this 
book is to bypass antivirus software and not primarily exploiting these vulnerabilities. So 
we will explore how to exploit a stack-based buffer overflow and how to use it to bypass 
antivirus software.
There are two approaches to locate buffer overflow vulnerabilities, whether stack- or heap-
based: manual and automated.
The manual approach involves searching manually for user-based inputs such as program 
arguments and determining the mechanism behind the user input and the functionalities 
it uses. To do this, we can make use of tools such as disassemblers, decompilers, and 
debuggers.
The automated approach involves using tools known as "fuzzers" that automate the task 
of finding user inputs and, potentially, finding vulnerabilities in the mechanisms and 
functionalities behind the code. This activity is known as "fuzzing" or "fuzz testing." There 
are several types of fuzzers that can be used for this task:
• Mutation-based
• Dumb 
• Smart
• Structure-aware
Summary     51
Stack-based buffer overflow
This vulnerability can be exploited if there is no proper boundary input validation. The 
classic example involves using functions such as strcat() and strcpy(), which does 
not verify the length of the input. These functions can be tested dynamically using fuzzers 
or even manually using disassemblers such as IDA Pro and debuggers such as x64dbg. 
Here are the general steps to take to exploit this type of vulnerability:
1. Make the program crash to understand where the vulnerability occurs.
2. Find the exact number of bytes to overflow before we reach the beginning address 
of the EIP/RIP (instruction pointer) register.
3. Overwrite the EIP/RIP register to point to the intended address of the injected 
shellcode.
4. Inject the shellcode into the controllable intended address.
5. Optionally, inject NOP (no-operation) sleds if needed.
6. Jump to the address of the injected payload to execute it.
There are many ways of achieving this goal, including using a combination of "leave" and 
"ret" instructions, facilitating Return-Oriented Programming (ROP) chains, and more. 
Buffer overflow – antivirus bypass approach
Sometimes antivirus software does not use proper boundary input validation in one or 
even several of the antivirus engine components. For example, if the unpacking engine 
of an antivirus program tries to unpack malware with an allocated buffer for file contents 
and it uses a function called strcpy() to copy a buffer from one address to another, 
an attacker can potentially overflow the buffer, hijack the extended instruction pointer 
(EIP) or RIP register of the antivirus engine process and make it jump to another location 
so the antivirus will not check a file even if it is malicious, or even crash the antivirus 
program itself.
Summary
In this chapter, we presented to you two of our main antivirus bypass approaches 
(vulnerability-based bypass and detection-based bypass) and detailed the first approach, the 
approach of discovering new vulnerabilities that can help us to bypass the antivirus software. 
There are several types of vulnerabilities that can achieve a successful antivirus bypass.
In the next three chapters, we will discuss and go into details of the second approach, 
using many bypass methods followed by 10 practical examples.
Section 2:  
Bypass the 
Antivirus – Practical 
Techniques to Evade 
Antivirus Software
In this section, we'll explore practical techniques to bypass and evade modern antivirus 
software. We'll gain an understanding of the principles behind bypassing dynamic, static, 
and heuristic antivirus engines and explore modern tools and approaches to practically 
bypass antivirus software.
This part of the book comprises the following chapters:
• Chapter 4, Bypassing the Dynamic Engine
• Chapter 5, Bypassing the Static Engine
• Chapter 6, Other Antivirus Bypass Techniques
4
Bypassing the 
Dynamic Engine
In this chapter, you will learn the basics of bypassing the dynamic engine of an antivirus 
software.
We will learn how to use VirusTotal and other antivirus engine detection platforms to 
identify which antivirus software we managed to bypass. Furthermore, we will go through 
understanding and implementing different antivirus bypass techniques that can be used to 
potentially bypass antivirus engines, such as process injection, the use of a dynamic-link 
library (DLL), and timing-based techniques to bypass most of the antivirus software out 
there.
In this chapter, you will achieve an understanding of practical techniques to bypass 
antivirus software, and we will explore the following topics:
• The preparation
• VirusTotal
• Antivirus bypass using process injection
• Antivirus bypass using a DLL
• Antivirus bypass using timing-based techniques
56     Bypassing the Dynamic Engine
Technical requirements
To follow along with the topics in the chapter, you will need the following:
• Previous experience in antivirus software
• Basic understanding of memory and processes in the Windows operating system
• Basic understanding of the C/C++ or Python languages
• Basic understanding of the Portable Executable (PE) structure
• Nice to have: Experience using a debugger and disassemblers such as the 
Interactive Disassembler Pro (IDA Pro) and x64dbg
Check out the following video to see the code in action: https://bit.ly/2Tu5Z5C
The preparation
Unlike when searching for vulnerabilities and exploiting them, bypass techniques do not 
mainly deal with antivirus engine vulnerability research. Instead, they deal more with 
writing malware that contains a number of bypass techniques and then test the malware 
containing these techniques against the antivirus engines we seek to bypass.
For example, if we want to find a particular vulnerability in an antivirus engine, we need 
to the following: 
1. We need to gather research leads. Then, for each lead, we will have to determine 
what the lead does, when it starts running, whether it is a service, whether it starts 
running when we scan a file, and whether it is a DLL injected into all processes, 
along with many further questions to help guide our research.
2. After that, we need to understand which vulnerability we are looking for, and only 
then can we actually begin researching antivirus software to find the vulnerability.
3. To use a bypass technique, we first of all need to gather research leads, and after 
that, we start writing malware code that contains several relevant bypass techniques.
4. Then, we begin the trial-and-error stage with the malware we have written, 
testing whether it manages to bypass the antivirus software, and draw conclusions 
accordingly.
The preparation     57
When a particular technique succeeds in bypassing specific antivirus software, it is always 
a good idea to understand why it succeeded and which engine in the antivirus software 
has been bypassed (static, dynamic, or heuristic). We can apply this understanding to the 
leads we have gathered to perform reverse engineering so that we can be sure that the 
technique indeed succeeds in bypassing the engine. Of course, at the end of this process, 
it is essential to report the bypass to the software vendor and suggest solutions on how to 
improve their antivirus software.
Note
Because of legal implications, we sometimes use pseudo code and payloads in 
this book.
Basic tips for antivirus bypass research
Before beginning antivirus bypass research, here are a few important points to keep in 
mind:
• Use the most recent version of the antivirus software.
• Update the signature database to the most current version to make sure you have 
the newest static signatures.
• Turn off the internet connection while conducting research, since we do not want 
the antivirus software making contact with an external server and signing a bypass 
technique we have discovered.
• Use the most recent version of the operating system with the latest knowledge base 
(KB) so that the bypass will be effective.
Now that we are familiar with the topic of antivirus bypass research, let's learn about the 
importance of using VirusTotal and other platforms as part of our research.
58     Bypassing the Dynamic Engine
VirusTotal
In this book and in research of antivirus bypass techniques in general, we will use 
platforms such as VirusTotal a lot.
VirusTotal (https://www.virustotal.com/) is a very well-known and popular 
malware-scanning platform.
VirusTotal includes detection engines of various security vendors that can be checked 
against when uploading files, to check whether these detection engines detect a file as 
malware or even as suspicious, searching values such as the Uniform Resource Locator 
(URL), Internet Protocol (IP) addresses, and hashes of already uploaded files. VirusTotal 
provides many more features, such as a VirusTotal graph, which provide the capability to 
check relations of files, URLs, and IP addresses and cross-referencing between them.
Platforms such as VirusTotal are very useful to us to understand whether our malware 
that is based on some of our bypass techniques actually bypasses part—or even all—of the 
antivirus engines present in the relevant platform. Furthermore, if our malware is detected 
in one or more antivirus engines, the name of the signature that detected our malware is 
presented to us so that we can learn from it and adapt accordingly.
The home page of VirusTotal is shown in the following screenshot:
Figure 4.1 – virustotal.com
VirusTotal     59
When we upload a file to VirusTotal, the site sends the file to many antivirus engines 
to check if the file is malicious. If any engine has detected the file as a malicious file, 
VirusTotal will show us the name of the antivirus software that detected the malware, with 
the name of the signature highlighted in red.
Once we uploaded a file to VirusTotal, VirusTotal will check if the hash already exists in 
its database. If so, it will show the latest scanning results, and if not, VirusTotal will submit 
the file to check whether the file is a malicious one.
For example, here is a file that was detected as malware in multiple antivirus engines, as 
displayed by VirusTotal:
Figure 4.2 – VirusTotal scanning score results
In order to better detect malware, VirusTotal includes an internal sandbox called 
VirusTotal Jujubox.
VirusTotal Jujubox is a Windows-based behavioral analysis sandbox that will show its 
results as a report, as part of the results of many scanned files.
60     Bypassing the Dynamic Engine
The Jujubox sandbox extracts important behavioral information regarding the execution 
of malicious files, including file input/output (I/O) operations, registry interactions, 
dropped files, mutex operations, loaded modules such as DLLs and executables, JA3 
hashing, and use of Windows Application Programming Interface (API) calls. 
Furthermore, it supports the interception of network traffic including HyperText Transfer 
Protocol (HTTP) calls, Domain Name System (DNS) resolutions, Transmission 
Control Protocol (TCP) connections, the use of Domain Generation Algorithms 
(DGAs), providing a dump of packet capture (PCAP) files, and more.
In order to display the full results of the Jujubox sandbox, you need to go to the 
BEHAVIOR tab, click on VirusTotal Jujubox, and then click on Full report, as illustrated 
in the following screenshot:
Figure 4.3 – VirusTotal's BEHAVIOR tab
After that, a new window will open that will include details from VirusTotal Jujubox— for 
example, Windows API Calls, a Process tree, Screenshots, and more, as illustrated in the 
following screenshot:
Figure 4.4 – VirusTotal Jujubox page
Let's now look at alternatives to VirusTotal.
VirusTotal alternatives     61
VirusTotal alternatives
In addition to VirusTotal, you have various other alternatives, such as VirScan 
(https://www.virscan.org/language/en/) and Jotti's malware scan 
(https://virusscan.jotti.org/).
The following screenshot shows an example of VirScan detections:
Figure 4.5 – VirScan detections
62     Bypassing the Dynamic Engine
The following screenshot shows an example of Jotti's malware scan detections:
Figure 4.6 – Jotti's malware scan detections
Important note
Although we tested our malware with VirusTotal, we strongly discourage you 
from doing this. VirusTotal has a policy that all files and URLs shared with 
them will be shared with antivirus vendors and security companies—in their 
words, "to help them in improving their products and services". As a result of 
this policy, any antivirus software that cannot yet detect the malware you have 
created will receive a report not only about your payload structure but also 
about the methodology behind it, improving their ability to detect this type of 
payload in the future.
For that reason, we recommend you only test your malware on sites that do not 
share information, such as AntiScan.Me (https://antiscan.me/).
Now that we know about VirusTotal and its alternatives, we will move on to learning 
about the bypass techniques we used during our research. Using these techniques, you will 
be able to successfully bypass most of the world's leading antivirus software.
Antivirus bypass using process injection     63
Antivirus bypass using process injection
One of the central challenges of malware authors is to hide malware from both antivirus 
software and users. That is not an easy challenge.
Originally, malware authors relied on the simple technique of changing the malware's 
name to a legitimate filename that would arouse suspicion within the system, such as 
svchost.exe or lsass.exe. This technique worked on ordinary users who lack a 
basic understanding of and a background in computers and technology but, of course, it 
did not work on knowledgeable users with an understanding of how operating systems 
and antivirus software work.
This is where the process-injection technique enters the picture.
What is process injection?
Process injection is one of the most common techniques used to dynamically bypass 
antivirus engines. Many antivirus vendors and software developers rely on so-called 
process injection or code injection to inspect processes running on the system. Using 
process injection, we can inject malicious code into the address space of a legitimate 
process within the operating system, thereby avoiding detection by dynamic antivirus 
engines.
Most of the time, achieving this goal requires a specific combination of Windows API 
calls. While writing this book we used about five methods to do so, but we will explain 
the three most basic of these techniques for injecting code into a target process. It is 
worth mentioning that most antivirus engines implement this practice in order to inspect 
malicious code in processes running within the operating system.
But it is not only antivirus vendors who take advantage of this ability, but also threat 
actors, who abuse it to inject their malicious code for purposes such as logging 
keystrokes, hiding the presence of malware under other legitimate processes, hooking 
and manipulation of functions, and even for the purpose of gaining access to escalated 
privilege levels.
Before we understand what process injection is, we need to know about the concept of a 
process address space.
64     Bypassing the Dynamic Engine
Process address space
A process address space is a space that is allocated to each process in the operating 
system based on the amount of memory the computer has. Each process that is allocated 
memory space will be given a set of memory address spaces. Each memory address space 
has a different purpose, depending on the programmer's code, on the executable format 
used (such as the PE format), and on the operating system, which actually takes care of 
loading the process and its attributes, mapping allocated virtual addresses to physical 
addresses, and more. The following diagram shows a sample layout of a typical process 
address space:
Figure 4.7 – Process address space
Now that we understand what process injection is, we can proceed further to understand 
the steps and different techniques to achieve process injection. 
Antivirus bypass using process injection     65
Process-injection steps
The goal of process injection, as mentioned previously, is to inject a piece of code into 
the process memory address space of another process, give this memory address space 
execution permissions, and then execute the injected code. This applies not merely to 
injecting a piece of shellcode but also to injecting a DLL, or even a full executable (EXE) 
file. 
To achieve this goal, the following general steps are required:
1. Identify a target process in which to inject the code.
2. Receive a handle for the targeted process to access its process address space.
3. Allocate a virtual memory address space where the code will be injected and 
executed, and assign an execution flag if needed.
4. Perform code injection into the allocated memory address space of the targeted 
process.
5. Finally, execute the injected code.
The following diagram depicts this entire process in a simplified form:
Figure 4.8 – Process injection diagram
Now that we have this high-level perspective into how process injection or code injection 
is performed, let's turn to an explanation of Windows API functions.
66     Bypassing the Dynamic Engine
Windows API
Before delving into what Windows API functions are, we first need to have an 
understanding of what an API is in a general sense. An API is a bridge between two 
different applications, systems, and architectures. Practically speaking, the main goal of 
an API function is to abstract underlying implementations, to aid developers in creating 
programs.
The Windows API is Microsoft's core set of APIs, allowing developers to create code that 
interacts with underlying, prewritten functionality provided by the Windows operating 
system.
Why we need the Windows API
To understand the concept more clearly, the following is a simple "Hello World" program 
coded in C:
#include 
int main(void) {
    printf("Hello, World!\n");
}
Notice that in the preceding code snippet, there is an import of stdio.h, known as a 
header file. The import is done using the #include directive. This header file provides 
a function called printf that takes one parameter: the string intended to be printed. 
The printf function itself actually contains a relatively large amount of code simply 
to print out a basic string. This is a great example because it highlights the importance 
of Windows API functions. These provide us with much essential functionality that we 
would otherwise need to develop ourselves. With access to API-based functions, we can 
create code more easily and efficiently, and in a more clear and elegant way.
Windows APIs and Native APIs – the differences
To understand more deeply what is going on under the hood of the Windows operating 
system, we also need to look at the differences between Windows APIs and Native APIs.
Windows API functions are user-mode functions that are fully documented on 
Microsoft's site at msdn.microsoft.com. However, most Windows API functions 
actually invoke Native APIs to do the work.
Antivirus bypass using process injection     67
A great example of this is the Windows API CreateFile() function, which creates a 
file or receives a handle to an existing file to read its data. The CreateFile() function, 
as with any other Windows API function, comes in two types: an 'A' type and a 'W' type. 
When the 'A' type is used in a Windows API function, it expects to receive an American 
National Standards Institute (ANSI) string argument. When the 'W' type is used in a 
Windows API function, it expects a wide-character string argument. In fact, most of the 
Windows API functions will use the 'W' type, but it also depends on how the code author 
creates its code and which compiler is selected.
When a Windows API function such as CreateFile() is called, depending on the 
parameter provided by the developer, Windows will then transfer execution to one of two 
Native API routines: ZwCreateFile or NtCreateFile.
Windows API execution flow – CreateFile
Here is a practical example of the CreateFile execution flow just mentioned. We will 
use the File -> Open… option in notepad.exe and open a demo file that we have 