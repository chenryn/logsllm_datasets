title:One (Block) Size Fits All: PIR and SPIR with Variable-Length Records
via Multi-Block Queries
author:Ryan Henry and
Yizhou Huang and
Ian Goldberg
PIR and SPIR with Variable-Length Records via Multi-Block Queries
One (Block) Size Fits All:
Ryan Henry, Yizhou Huang, and Ian Goldberg
Cheriton School of Computer Science
University of Waterloo
Waterloo ON, Canada N2L 3G1
{rhenry, y226huang, iang}@cs.uwaterloo.ca
Abstract
I. Introduction
We propose a new, communication-efﬁcient way for
users to fetch multiple blocks simultaneously in Goldberg’s
robust information-theoretic private information retrieval
(IT-PIR) scheme. Our new multi-block IT-PIR trades off
some Byzantine robustness to improve throughput without
affecting user privacy. By taking advantage of the recent
Cohn-Heninger multi-polynomial list decoding algorithm,
we show how realistic parameter choices enable the user
to retrieve several blocks without increasing the commu-
nication or computation costs beyond what is required to
retrieve a single block, and argue that the resulting scheme
still maintains essentially optimal Byzantine robustness
in practice. We also derive optimal parameters for our
construction, which yields communication costs within a
small factor of the lowest possible.
With our new multi-block IT-PIR protocol as a starting
point, we construct
four new symmetric PIR (SPIR)
protocols that each support variable-length database
records. By decoupling the PIR block size from the
lengths of individual database records, we are free to
ﬁx the block size to its communication-optimal value
without artiﬁcially restricting the contents and layout of
the records. Moreover, it is straightforward to augment
three of our four new SPIR constructions with efﬁcient
zero-knowledge proofs about
the particular records a
user is requesting in a given query; this makes it easy
to implement pricing and access control structures over
the records using standard techniques from the literature.
The resulting SPIR protocols are therefore well suited
to privacy-preserving e-commerce applications, such as
privacy-friendly sales of e-books, music, movies, or smart
phone and tablet apps.
Keywords — Private information retrieval, symmetric PIR,
oblivious
zero-knowledge proofs,
privacy-enhancing technologies.
transfer, usable PIR,
Privacy-enhancing technologies (PETs) are technolo-
gies that aim to empower users with control over the
dissemination and use of information about themselves
and about their day-to-day activities. Modern PETs employ
sophisticated cryptographic techniques to facilitate interac-
tions that would otherwise appear impossible to conduct
in a privacy-friendly way. This approach lets PETs derive
their privacy guarantees from the security properties of
the underlying cryptographic primitives they use, which
in turn derive their security properties from basic facts
(or conjectures) about information theory or computational
complexity theory. A good deal of modern cryptography
focuses on the latter, with many cryptographic protocols
relying on assumptions about it being infeasible — rather
than impossible — for an adversary to extract some
private information by observing or participating in a
protocol run. The security proofs for these computationally
secure PETs therefore hold with respect to adversaries
that have only limited (computational and algorithmic)
resources at their disposal, but not necessarily with respect
to “all-powerful” adversaries that can solve presumed hard
problems like factoring or computing discrete logarithms.
This is in contrast
to information-theoretically secure
PETs: if a PET is information-theoretically secure, then
no amount of resources (or future algorithmic advances)
can give the adversary any advantage in extracting the
user’s private information. Of course, proving that a sys-
tem can provide such strong privacy guarantees requires
some equally strong (non-computational) assumptions.
One common such assumption, which is relied upon by
secret sharing schemes [36], some cryptographic voting
protocols [13, 35], mix networks [19] and onion routing
networks [21], among others, is that no more than some
threshold number of agents are malicious and colluding
against the user to extract her secrets.
Private Information Retrieval
Private information retrieval (PIR) is one particular
class of PET that helps users retrieve information from
a database in a way that is highly respectful of privacy. A
user’s query encodes a set of keywords [15], the indices of
certain records [16], or some simple SQL statements [33],
and the database server processes the query and responds
without learning any nontrivial information about what
data the user is after. In computationally secure PIR
(CPIR), the user employs public-key cryptography to en-
code these keywords, indices, or SQL statements in her
query in a way that enables the database server to respond
with the correct (encrypted) data, while making it computa-
tionally infeasible for the database server to learn what data
the user has requested. In information-theoretically secure
PIR (IT-PIR),
the stricter privacy requirement presents
somewhat of a paradox, which precludes such a reliance
on public-key cryptography: the user’s query must not
contain any information about what particular data she
is requesting, yet the database server must nonetheless
respond in a way that lets the user extract this very data!
The trivial way to solve the PIR problem is to have
the database server respond to every query with the entire
database, and then let the user carry out her own local key-
word searches, index lookups, or SQL statement evalua-
tions. This trivial solution may be information-theoretically
secure, but
is highly
impractical for large databases since the communication
cost is linear in the length of the database. To exclude
this and related trivial solutions, the PIR literature only
considers protocols whose total communication cost
is
strictly less than (and scales sublinearly with) the length
of the database. Alas,
is not obvious that sublinear
communication can actually make PIR more practical than
the trivial solution; indeed, in their oft-cited 2007 study,
Sion and Carbunar found that not one CPIR protocol
from the arsenal at their disposal could — or likely ever
will — outperform the trivial PIR protocol, given the
relative speeds of processors and networks and the trends
in how quickly they increase [37]. However, that paper
only considered CPIR protocols (and only those published
prior to 2007 — at least one later CPIR protocol [31]
has been shown to be faster than the trivial solution [34]),
which naturally raises the following question: can IT-
PIR do any better? Intuition might suggest that it surely
cannot; in fact, it is not immediately clear that IT-PIR with
sublinear communication is even possible. After all, the
database server knows precisely what sequence of bits it
receives from and sends to each user. If some database bits
are not somehow “included” in the response, then given a
sufﬁciently clever algorithm and sufﬁcient computational
resources, it seems inevitable that the database server could
deduce something about which database bits the user has
is not very interesting and it
it
it
requested. In their seminal paper on PIR [16], Chor et al.
showed that nontrivial IT-PIR is indeed impossible when
there is only a single database server; however, they then
went on to construct a multi-server IT-PIR protocol whose
security holds if not every database server colludes against
the user. Several other IT-PIR protocols have since been
proposed [3, 23, 25, 38], each building on Chor et al.’s idea
of sharing queries among multiple noncolluding database
servers.1 In their 2011 follow-up to Sion and Carbunar’s
paper, Olumoﬁn and Goldberg found that a number of
multi-server IT-PIR protocols in the literature are indeed
more efﬁcient than trivial PIR, in some cases by up to
three orders of magnitude [34].
Our contributions
Chor et al.’s foundational work on PIR modeled the
database as a string of n bits out of which the user retrieves
the ith bit while keeping the index i of that bit private.
A handful of subsequent papers have extended this basic
model by subdividing the n-bit database into some number
r of b-bit blocks, out of which the user retrieves the ith
block — rather than the ith bit — without revealing i.
This latter model more closely approximates real-world
databases than does the former, but it is still insufﬁcient
for modeling databases with variable-length records, such
as those serving multimedia content. This work therefore
initiates the study of PIR over such variable-length records.
Our main contributions are as follows:
1) We revisit Goldberg’s robust IT-PIR protocol [25] and
extend it to support multi-block queries, wherein the
user fetches several b-bit blocks in a single query
without revealing either the number of blocks fetched
or the index of any block. Multi-block PIR queries
naturally lead to PIR queries over variable-length
records without padding or other efﬁciency-harming
workarounds.
2) We redo Goldberg’s optimal-block-size analysis, tak-
ing into consideration both our new multi-block que-
ries and the lengths of individual database records.
Our analysis indicates that, in practice, the expected
communication cost and Byzantine-robustness of our
protocol are both within a small factor of the lowest
possible (with near-optimal robustness relying on the
assumption that the PIR servers are rational agents).
3) We extend our new multi-block IT-PIR to construct
four new symmetric PIR protocols, each of which
supports queries over variable-length records. We
empirically evaluate the performance of two of these
1The intuitive objection to IT-PIR can be salvaged as follows. Barring
any clever precomputation scheme (and associated auxiliary storage),
the computational cost of any PIR protocol (information-theoretic or
otherwise) must be at least linear in the size of the database, since the
user cannot possibly learn anything about a database bit that the server
does not use to help compute the query response [2].
new protocols and ﬁnd that they are practical for
use in certain application domains, even on modest
hardware conﬁgurations.
II. Background
A. Goldberg’s robust IT-PIR
Our construction in this paper extends Goldberg’s robust
IT-PIR [25], which is more or less a generalization of Chor
et al.’s original IT-PIR protocol. We focus on Goldberg’s
IT-PIR for three reasons: 1) IT-PIR protocols like Gold-
berg’s protocol are faster than any known CPIR protocol by
an order of magnitude or more [34], 2) the communication
cost of Goldberg’s protocol is within a small factor of
optimal if the user is interested in a relatively large block
of data [25] (see below), which is the case in, e.g., certain
database-driven e-commerce applications, and 3) while
conceptually quite simple, Goldberg’s scheme has a rich
algebraic structure that we exploit in Section III. Goldberg
models the database as an r-by-s matrix D over some
ﬁnite ﬁeld F. Each row of D is a single database block;
that is, D consists of r blocks, each of which contains
some data represented by a string of s ﬁeld elements.
Users query D for a block using the following basic
is the jth standard basis
fact from linear algebra: if e j
vector of Fr (i.e., the length-r row vector over F with
unity in column j and zero elsewhere), then taking the
vector-matrix product e j · D yields row j of D. Goldberg
uses Shamir’s polynomial secret sharing scheme [36] to
split e j componentwise into (cid:96) vectors of shares, which
the user submits to (cid:96) different database servers. Each
database server returns the product of its respective share
vector with D. By the linearity of Shamir secret shares,
interpolating the query responses componentwise at x = 0
still yields row j of D, even though no database server
has been given any information about the index j. This
most basic form of the protocol only supports retrieval by
index, but standard tricks allow for queries that are more
expressive (for example, keyword searches [15] and SQL
queries [33]) on top of this framework.
Robustness. Goldberg’s protocol is optimally robust with
respect to the number of malicious or Byzantine database
servers that it can tolerate. [20] Suppose the user encodes
her query using secret sharing polynomials of degree (at
most) t < (cid:96), and that k ≤ (cid:96) servers respond. Given these pa-
rameters, Shamir secret sharing information-theoretically
hides the contents of the user’s query from any coalition
of at most t of the (cid:96) database servers. Goldberg [25] notes
kt (cid:99) − 1, then Guruswami-
Sudan list decoding [26] can extract the correct block
from the set of responses even when up to v servers re-
turn (possibly maliciously correlated) incorrect responses.
More recently, Devet et al. [20] showed that replacing
that if t < k and v ≤ k − (cid:98)√
Guruswami-Sudan list decoding with the recent Cohn-
Heninger multi-polynomial list decoding algorithm [17]
extends robustness in Goldberg’s protocol to the theoretical
limit of up to v = k − t − 2 Byzantine database servers.
Looking ahead, our main contribution in this work is to
observe that Devet et al.’s optimally robust variant of
Goldberg’s protocol leaves sufﬁciently many degrees of
freedom for a single query vector to evaluate to several
standard basis vectors at different inputs. We leverage this
observation to construct multi-block queries that can dra-
matically improve the throughput of Goldberg’s scheme.
Before doing so, however, we shall ﬁrst examine some
other aspects of the protocol that will be impacted by this
modiﬁcation.
Communication cost. The communication-optimal block
√
size for Goldberg’s single-block IT-PIR occurs when r =
N for a database comprised of N ﬁeld elements
s =
(where k ≈ (cid:96) is unknown in advance to the user). For each
block that a user fetches from the database, she sends r
ﬁeld elements to each of (cid:96) servers and receives s ﬁeld
√
elements from each of k responding servers; thus, the total
communication cost per query is ((cid:96) + k)
N ﬁeld elements
interested in an entire block of s ≈ √
when r = s, and somewhat higher otherwise. If the user is
N ﬁeld elements,
then this cost
is within a 2 (cid:96) factor of the theoretical
optimum (which itself is clearly bounded below by the
s ﬁeld element communication cost of a non-private query
√
for the same data).2 Of course, insisting that each record
has length s =