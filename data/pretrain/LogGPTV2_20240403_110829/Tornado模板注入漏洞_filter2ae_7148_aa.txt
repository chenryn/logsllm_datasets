# Tornado模板注入漏洞
## 组成结构：
Tornado 大致提供了三种不同的组件：
  * Web 框架
  * HTTP 服务端以及客户端
  * 异步的网络框架，可以用来实现其他网络协议
这里简单介绍一下异步是什么：
  * 说到异步，肯定会联系出来它的孪生兄弟--同步（Synchronous）,"同步模式"就是上一段的模式，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的.
  * "异步模式"则完全不同，每一个任务有一个或多个回调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的。 "异步模式"非常重要。
异步的用处：
  * 在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应。这样可以大大缩小服务器处理问题的时间。
## 框架使用：
    #!/usr/bin/env python
    # _*_ coding:utf-8 _*_
    __author__ = "charles"
    import tornado.ioloop
    import tornado.web
    class MainHandler(tornado.web.RequestHandler):
        def get(self):
            # self.write("Hello, world")
            self.render("s1.html")
        def post(self, *args, **kwargs):       #表单以post方式提交
            self.write("hello world")
    settings = {
        "template_path":"template",     #模版路径的配置
        "static_path":'static',          #静态文件配置
    }
    #路由映射，路由系统
    application = tornado.web.Application([       #创建对象
        (r"/index", MainHandler),
    ],**settings)                               #将settings注册到路由系统，这样配置才会生效
    if __name__ == "__main__":
        application.listen(8888)                    #创建socket，一直循环
        tornado.ioloop.IOLoop.instance().start()     #使用epoll,io多路复用
### RequestHandler常用方法：
  1. 初始化handler类接收参数的方法initialize：
    def initialize(self, db):
        # 初始化handler类接收参数的过程
        self.db = db
  1. 用于真正调用请求处理之前的初始化方法prepare:
    def prepare(self):
        # 用于真正调用请求处理之前的初始化方法
        # 如：打印日志，打开文件
        pass
  1. 关闭句柄，清理内存on_finish：
    def on_finish(self):
        # 关闭句柄，清理内存
        pass
### http 请求方法：
    def get(self, *args, **kwargs):
        pass
    def post(self, *args, **kwargs):
        pass
    def delete(self, *args, **kwargs):
        pass
    def patch(self, *args, **kwargs):
        pass
### 获取参数输入内容的方法：
    def get(self, *args, **kwargs):
        """
        get_query_argument 和 get_query_arguments 为获取get请求参数的方法
        如果name不存在就会抛出400异常
        :param args:
        :param kwargs:
        :return:
        """
        # 获取的是字符串，默认取最后一个name的值
        self.get_query_argument("name")
        # 获取的是列表，存放所有的name的值
        self.get_query_arguments("name")
    def post(self, *args, **kwargs):
        """
        get_argument 和 get_arguments 为获取post请求参数的方法
        :param args:
        :param kwargs:
        :return:
        """
        # 获取的是字符串，取最后一个name的值
        data1 = self.get_argument("name")
        # 获取的是列表，如果url后边跟上name参数会将该name参数的值也放入列表中
        data2 = self.get_arguments("name")
        # 获取所有的参数
        data3 = self.request.arguments
        # 如果请求没有传递headers = {
        #     "Content-type": "application/x-www-form-urlencoded;",
        # }
        # 获取json数据, 我们必须先从body中获取参数解码，然后转换为dict对象
        # 才能调用get_body_argument 和 get_body_arguments 方法获取json参数
        # 如果请求头传递了headers，我们可以直接使用get_body_argument获取参数
        param = self.request.body.decode('utf-8')
        json_data = json.loads(param)
        data4 = self.get_body_argument("name")
        data5 = self.get_body_arguments("name")
### 输出内容的方法：
设置异常状态码set_status：
    try:
            data4 = self.get_body_argument("name")
            data5 = self.get_body_arguments("name")
        except Exception as e:
            self.set_status(500)
输出至浏览器显示方法write，因为tornado为长连接，所以可以连续写多个write方法，将内容连接起来:
    def get(self, *args, **kwargs):
        self.write("hello")
        self.write("world")
## 模板语法：
    import tornado.template as template
    payload = "{{1+1}}"
    print(template.Template(payload).generate())
我们通过这个简单代码，来看一看代码都是如何来进行执行的。一下是参考了官方文档和Tr0y师傅的文章总结出来的语法内容，因为我们重点关注的是注入攻击，所以主要学习一下构造payload时候，使用到的语法：
  1. **`{{ ... }}`:里面直接写 python 语句即可，没有经过特殊的转换。默认输出会经过 html 编码**
  2. **`{% ... %}`:内置的特殊语法，有以下几种规则**
    * `{# ... #}`：注释
    * `{% comment ... %}`：注释
    * `{% apply *function* %}...{% end %}`：
> 用于执行函数，`function` 是函数名。`apply` 到 `end` 之间的内容是函数的参数
    * `{% autoescape *function* %}`：
> 用于设置当前模板文件的编码方式。
    * `{% block *name* %}...{% end %}`：
> 引用定义过的模板段，通常来说会配合 `extends` 使用。感觉 `block` 同时承担了定义和引用的作用，这个行为不太好理解，比较奇怪。比如
> `{% block name %}a{% end %}{% block name %}b{% end %}` 的结果是 `bb`...
    * `{% extends *filename* %}`：
> 将模板文件引入当前的模板，配合 `block` 使用。使用 `extends` 的模板是比较特殊的，需要有 template
> loader，以及如果要起到继承的作用，需要先在加载被引用的模板文件，然后再加载引用的模板文件
    * `{% for *var* in *expr* %}...{% end %}`：
> 等价与 python 的 for 循环，可以使用 `{% break %}` 和 `{% continue %}`
    * `{% from * import * %}`：
> 等价与 python 原始的 `import`
    * `{%if%}...{%elif%}...{%else%}...{%end%}`：
> 等价与 python 的 `if`
    * `{% import *module* %}`：等价与 python 原始的 `import`
    * `{% include *filename* %}`：
> 与手动合并模板文件到 `include` 位置的效果一样（`autoescape` 是唯一不生效的例外）
    * `{% raw *expr* %}`：
> 常规的模板语句，只是输出不会被转义
    * `{% set *x* = *y* %}`：
> 创建一个局部变量
    * `{% try %}...{% except %}...{% else %}...{% finally %}...{% end %}`：
> 等同于 python 的异常捕获相关语句
    * `{% while *condition* %}... {% end %}`：
> 等价与 python 的 while 循环，可以使用 `{% break %}` 和 `{% continue %}`
    * `{% whitespace *mode* %}`：
> 设定模板对于空白符号的处理机制，有三种：`all` \- 不做修改、`single` \- 多个空白符号变成一个、`oneline` \-> 先把所有空白符变成空格，然后连续空格变成一个空格
  3. **apply的内置函数列表：**
    1. `linkify`：把链接转为 html 链接标签（`<a href="...`）
    2. `squeeze`：作用与 `{% whitespace oneline %}` 一样
  4. **autoescape的内置函数列表：**
    1. `xhtml_escape`：html 编码
    2. `json_encode`：转为 json
    3. `url_escape`：url 编码
  5. **其他函数（需要在 settings 中指定）**
    1. `xhtml_unescape`：html 解码
    2. `url_unescape`：url 解码
    3. `json_decode`：解开 json
    4. `utf8`：utf8 编码
    5. `to_unicode`：utf8 解码
    6. `native_str`：utf8 解码
    7. `to_basestring`：历史遗留功能，现在和 `to_unicode` 是一样的作用
    8. `recursive_unicode`：把可迭代对象中的所有元素进行 `to_unicode`
## 模板渲染:
Tornado 中模板渲染函数在有两个
  * render
  * render_string
**render_string** :通过模板文件名加载模板，然后更新模板引擎中的命名空间，添加一些全局函数或其他对象，然后生成并返回渲染好的 html内容
**render** :依次调用`render_string`及相关渲染函数生成的内容，最后调用 finish 直接输出给客户端。
我们跟进模板引擎相关类看看其中的实现。
`Tornado
render`是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页，如果用户对render内容可控，不仅可以注入XSS代码，而且还可以通过{{}}进行传递变量和执行简单的表达式。  
简单的理解例子如下：
    import tornado.ioloop
    import tornado.web
    class MainHandler(tornado.web.RequestHandler):
        def get(self):
            self.render('index.html')       
    class LoginHandler(BaseHandler):
        def get(self):
            # self.set_cookie()
            # self.get_cookie()
            self.render('login.html', **{'status': ''})