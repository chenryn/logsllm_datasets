### Setting Up Syslog-NG with MonitorWare Schema for Centralized Logging

We are setting up a centralized logging server that will receive logs from multiple devices and servers and store them in a database. The syslog on the central server is Syslog-NG, chosen for its simplicity in configuration and ease of management. The log server also hosts a log database (MariaDB) and a web interface (Apache with mod_php).

The primary goal of having a log server is to analyze data in a single, unified location. For this purpose, we have selected Adiscon LogAnalyzer, which is a well-maintained, mature, and feature-rich project.

According to the LogAnalyzer documentation, it is recommended to use the MonitorWare schema for the database. The installation manual includes a "Note on MySQL Databases" section, which states that while it supports the "php-syslog-ng" schema for transition purposes, it does not fully utilize it, and the schema is not very efficient. Therefore, it recommends using the MonitorWare schema instead. (MonitorWare is another product by Adiscon.)

Additionally, the documentation suggests using rsyslog, as it can automatically create the necessary structure in the database. However, since we are using Syslog-NG, we need to configure it manually to use the MonitorWare schema.

### Configuring Syslog-NG with MonitorWare Schema

To properly set up Syslog-NG to log into a database using the MonitorWare schema, you can configure the `sql()` destination in your Syslog-NG configuration file. Hereâ€™s a step-by-step guide:

1. **Understand the MonitorWare Schema:**
   - First, familiarize yourself with the MonitorWare schema. This schema typically includes tables and columns designed to store various log fields efficiently.
   - You can find the schema definition in the LogAnalyzer documentation or in the MonitorWare product documentation.

2. **Configure the SQL Destination:**
   - Open your Syslog-NG configuration file (usually located at `/etc/syslog-ng/syslog-ng.conf` or a similar path).
   - Add a new `destination` block to define the SQL connection and the specific columns to be populated.

   ```plaintext
   destination d_database {
       sql(
           type(mysql)
           host("localhost")
           port(3306)
           database("your_log_database")
           user("your_db_user")
           password("your_db_password")
           table("LogData")
           columns(
               "Facility", "$FACILITY"
               "Priority", "$PRIORITY"
               "FromHost", "$HOST"
               "Message", "$MSG"
               "Timestamp", "$ISODATE"
               "SourceIP", "$SOURCEIP"
               "SourcePort", "$SOURCEPORT"
               "Tag", "$TAG"
           )
       );
   };
   ```

   - Replace the placeholders with your actual database details and column names as per the MonitorWare schema.

3. **Define a Log Path:**
   - Define a log path to route the incoming logs to the SQL destination.

   ```plaintext
   log {
       source(s_network);
       destination(d_database);
   };
   ```

   - Ensure that `s_network` is defined in your configuration to capture the incoming logs. For example:

   ```plaintext
   source s_network {
       udp(ip(0.0.0.0) port(514));
       tcp(ip(0.0.0.0) port(514));
   };
   ```

4. **Restart Syslog-NG:**
   - After making the changes, restart the Syslog-NG service to apply the new configuration.

   ```sh
   sudo systemctl restart syslog-ng
   ```

### Verification

- Verify that logs are being correctly inserted into the database by checking the `LogData` table.
- Use the LogAnalyzer web interface to ensure that the logs are being displayed and analyzed correctly.

By following these steps, you should be able to configure Syslog-NG to log into a database using the MonitorWare schema, providing a robust and efficient centralized logging solution.