cur in code that may be unchangeable and invisible by pro-
grammers. Another example describes the process to ﬁgure
out a deadlock related bug in third-party code by exploiting
deadlock exceptions and handlers, so that homegrown code
can be adjusted to avoid this potential deadlock. Another
example demonstrates how to deal with false positives in
deadlock exception handlers.
4.1. Resolving deadlocks in existing code
The example in this subsection shows how to resolve
deadlocks in a system of two money-transfer transactions.
The two simultaneous transactions are as follows: one is to
transfer some money from a saving account s to a checking
account c, the other is to transfer some money from c to s.
The code is in Figure 2. The code inside the dashed box rep-
resents unchangeable classes. Clients of such classes cannot
change the internal implementations of these classes.
Class Driver1 describes creation of NoTimerResolver,
thread S2C and thread C2S. NoTimerResolver is a thread
with the name “NoTimerResolver” in the thread group with
the name “DeadlockResolverGroup.” It is set to have the
highest priority and started before thread S2C and thread
C2S in order not to miss any deadlock exceptions.
Class DeadlockResolver deﬁnes how the deadlock re-
solver NoTimerResolver works. NoTimerResolver invokes
1    class Account {
2       private int value; public String type;
3       public Account(int v, String t) {value=v; type=t; )
4       public synchronized void transfer(Account to, int amount) {
5           sychronized (to) {
6             if (value =amount){
10                 to.value = to.value + amount;
11                value = value - amount; this.notifyAll(); }}}}
12   class S2CTransfer implements Runnable {
13      private Account a1, a2;  private int amount;
14      public S2CTransfer(Account a1, Account a2, int amount)
15           { this.a1 = a1; this.a2 = a2; this.amount = amount;}
16      public void run () {a1.transfer(a2,amount); }} 
17   class C2STransfer implements Runnable {
18        private Account a1, a2; private int amount;
19        public C2STransfer(Account a1, Account a2, int amount)
20           { this.a1 = a1; this. a2 = a2; this. amount = amount;}
21        public void run() {boolean successful = false;
22            while (!successful) 
23                 try { a1.transfer(a2, amount); successful = false; }
24                 catch (DeadCycle e) {
25                      //wait for a while 
26       }}}
27    class DeadlockResolver implements Runnable {
28      private Account s,c;
29      private String trans_stopped = null;
30      private int s2c, c2s;
31      public DeadlockResolver(Account s, Account c, int s2c, int c2s) 
32            { this.s = s; this.c = c; this.s2c = s2c; this.c2s=c2s; }
33      public void run() { boolean cont = true;
34         while (cont) {  try{Thread.currentThread.join();}
35            catch (InterruptedException e0) {cont = false;}
36            catch (DeadCycle e1) { // delegate the deadlock to thread C2S
37                 if (e1.waiters[0].getName.equals("C2S")) 
38                     e1.waiters[0].interrupt();
39                else  e1.waiters[1].interrupt(); }
40            catch (DeadKnot e2) {// stop a thread waiting for a notification
41               if (e2.waitfors[0][0] == ‘N’)
42                 {trans_stopped=e2.waiters[0].getName(); e2.waiters[0].stop();}
43              else
44                 {trans_stopped= e2.waiters[1].getName(); e2.waiters[1].stop();}}
45            catch (DeadLock e3) {
46                if (e3.number == 0) // no deadlock 
47                   if (trans_stopped == null) cont = false;
48                  else   if (trans_stopped.equals("S2C") { trans_stopped = null; 
49                         new Thread(new S2CTransfer(s,c,s2c),"S2C").start();} 
50                           else {trans_stopped=null; 
51                         new Thread(new C2STransfer(c,s,c2s), "C2S").start();}
51               else if (e3.number == 1) 
52                     {e3.waiters[0].stop(); cont=false;}}}}}
53     public class Driver1 {
54         public static void main(String[] args){
55             ThreadGroup HG = new ThreadGroup("DeadlockResolverGroup");
56             Account s = new Account(1500,"saving");
57             Account c = new Account(1000,"checking");
58             int c2s = 500;  // 1600, or 5000
59             int s2c= 800; //  1700,  or 3000
60             S2CTransfer trans_1 = new S2CTransfer(s,c,s2c);
61             C2STransfer trans_2 = new C2STRansfer(c,s,c2s);
62             DeadlockResolver DH = new DeadlockResolver(s,c,s2c,c2s);
63             Thread resolver = new Thread(HG, DH, "NoTimerResolver");
64             resolver.setPriority(Thread.MAX_PRIORITY);  resovler.start();
66             new Thread(trans_1,"S2C").start();
67             new Thread(trans_2,"C2S").start(); }}
Figure 2. A money-transfer example
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:08:07 UTC from IEEE Xplore.  Restrictions apply. 
join() for itself, as shown in line 34. When a deadlock other
than DeadEnd is detected, the JVM awakens this thread up,
and throw it a deadlock exception encoding the detected
deadlock.
Class S2CTransfer(C2STransfer, resp.) deﬁnes the run()
method used by thread S2C(thread C2S, resp.), which im-
plements the transaction that transfers money from the sav-
ing(checking, resp.) account to the checking(saving, resp.)
account. While class C2STransfer is changeable, class
S2CTransfer is unchangeable.
Class Account
is also unchangeable.
The transfer
method in Class Account speciﬁes how to perform a money
transfer transaction. The method contains three bugs: Line
4-5 contains a locking order bug in two phase locking; line
7 reﬂects a bug of wait() in a nested monitor call; line 5-
11 does not take into account of that both thread C2S and
thread S2C can perform wait() in line 7, and line 5-11 as-
sumes that a thread is blocked due to wait() in line 7 before
the other thread executes notifyAll() in line 11.
All the three bugs cause potential deadlocks: 1) the two
threads can hold a lock and wait for the lock held by the
other thread; 2) the thread blocked due to wait() in line 7
holds a lock that is required by the other thread before it
may awaken up the thread blocked on the condition vari-
able; and 3) either thread can wait forever after executing
wait() in line 7, even if there was no nested monitor call.
The deadlock in case 1(2, 3, resp.) can be represented by a
DeadCycle(DeadKnot, DeadLock, resp.) exception.
A local deadlock handler that can handle DeadCy-
cle exceptions is plugged into the run() method of class
C2STransfer. When a DeadCycle exception is caught by
this local handler, the current thread has released the lock it
owned. Thus, as shown in line 24-25, this local handler just
lets the current thread, i.e., thread C2S, wait for a while so
that the other thread, i.e., thread S2C, can get a chance to
ﬁnish.
Several global deadlock handlers are installed for No-
TimerResolver. As described in line 37-39, when a Dead-
Cycle exception is caught, the deadlock exception is dele-
gated to thread C2S, which installs a local handler for Dead-
Cycle exceptions. Line 41-44 shows a global deadlock han-
dler for DeadKnot exceptions. Upon receiving a DeadKnot
exception, this global deadlock handler stops a deadlocked
thread waiting for a notiﬁcation, and registers this thread by
storing its name in trans stopped.
The code does not explicitly group threads for the
blocked-group-based deadlock detection solution. Thread
S2C, thread C2S and the default main() method belong to
the default group. Line 46-52 demonstrates how DeadLock
exceptions are handled. If the number of threads involved
in the DeadLock instance is 0 and no stopped transaction is
registered, the program is about to quit because both trans-
actions have been accomplished. If the number of threads
involved is 0 and a stopped transaction is registered, as the
other transaction has been accomplished, the registration of
the stopped transaction is removed and the stopped transac-
tion is restarted via a new thread using the name stored in
trans stopped. If the number of threads involved is 1, the
trasaction implemented by this possibly deadlocked thread
is stopped because it can never be accomplished, and the
program is about to quit because the other transaction either
has been accomplished or has been stopped. An analysis of
class Account shows that the number of threads involved in
the DeadLock instance cannot be 2.
Suppose class Account and class S2CTransfer were not
only unchangeable but invisible, meaning that the two
classes’ clients only know their public method/ﬁeld signa-
tures and their functional speciﬁcation, all potential dead-
lock occurrences in the program still can get resolved after
the global deadlock handler for DeadLock is generalized to
handle the case that both threads are waiting for a notiﬁ-
cation at the same time. Simply stopping both threads and
then quit the system is a proper action for this case.
4.2. Adjusting homegrown code to avoid deadlock
Sometimes programmers can exploit deadlock excep-
tions and their handlers to prevent deadlocks from occur-
ring in invisible code. This subsection uses an example
to show how programmers can accomplish such a mission.
The example with code in Figure 3 adopts the widely used
producer-consumer pattern using a ﬁnite buffer: the man-
ager puts jobs into a job pool, and the worker takes jobs
from the job pool. The code for class Jobpool, which is
inside a box, is unchangeable and invisible.
Both the manager and the worker are implemented as
threads. The manager thread and the consumer thread are
explicitly put to a group used by the blocked-group-based
detection solution. Both TimerResolver and NoTimerRe-
solver are installed. Line 56-67 shows the installation
of deadlock resolvers and the establishment of an explicit
group.
Suppose “full=false;” of line 16 in Figure 3 is missed,
both the manager and the worker may wait at the same time.
For example, if the job pool once was full, then both threads
will wait forever when the job pool becomes empty. In this
case, a DeadLock exception (or perhaps a DeadKnot excep-
tion if some DELTA values are positive) is thrown. In any
event, the global handler (line 36-39) installed for NoTimer-
Resolver can catch this exception.
By examining the caught exception object, programmers
can know more about the deadlock state, e.g. both threads
are waiting for a notiﬁcation, and both threads have received
notiﬁcations from each other; by examining the job pool
state in the handler, programmers can know that the c()
method of the job pool indicates that it is empty. Based
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:08:07 UTC from IEEE Xplore.  Restrictions apply. 
1  class Jobtool{
2        private int size, in=0, out=0, count = 0; private int[] jobs;
3        private boolean empty = true, full = false;
4        public Jobtool(int i) {size=i; jobs=new int[i];}
5        public synchronized int s() {return size;}
6        public synchronized int c() {return count;}
7        public synchronized void assign(int x){
8           while (full) {try {wait();} catch (InterruptedException e){}}
9           jobs[in] = x; in = (in+1)%size; 
10         count ++;  if (count == size) full = true;
11         empty = false; notifyAll();} 
12     public synchronized int take(){
13         while (empty){try{wait();} catch (InterruptedException e){}}
14         int x = jobs[out]; out = (out+1)%size; 
15         count--; if (count == 0) empty = true;
16         full = false; 
17         notifyAll(); return y; }} 
18  class Manager implements Runnable {
19     private Jobpool jp; private long tm; private int id;
20     public Manager(Jobpool j, int i,  long t) {jp=j; id=i; tm=t;}
21     public void run(){ while (true) {
22         //do something else for tm milliseconds
23         jp.assign(id); }}}
24  class Worker implements Runnable {
25     private Jobpool jp; private long tm;
26     public Worker(Jobpool j, long t) {jp = j; tm = t; }
27     public void run() { while (true) {
28        //do something else for tm milliseconds
29         int x = jp.take();  }}} 
30  class DeadlockResolver implements Runnable { 
31     private Jobpool jp;
32     public DeadlockResolver(Jobpool j) { jp = j;}
33     public void run() { boolean cont = true;
34       while (cont) { try {Thread.currentTHread().join();}
35         catch (InterruptedException e0) { cont = false;}
36         catch (DeadLock e2) {
37              if (e1.number == 0) cont = false;
38             else {//print out status of jp, e.g. its size and count. 
39       // print out status of deadlocked threads, e.g., recved and missed 
40   }}}}}
41    class DeadendResolver implements Runnable {
42       private Jobpool jp;  private long t=10000;
43       public DeadendResolver(Jobpool j) { jp = j; } 
44       public void run() { boolean cont = true;
45          while (cont) { try {Thread.currentThread().join(t);} 
46               catch (InterruptedException e0) {cont = false;}
47               catch (DeadEnd e1) {
48                   if (e1.number == 0) {cont = false;}
49                   else if (e1.number == 1) {
50                             if (e1.waiters[0].getName.equlas("worker")
51                                && (jp.c() == 0) && (t < 10000000)) t = t*2;
52                             if ( e1.waiters[0].getName.equals("manager")
53                                && (jp.s() == jp.c()) && (t < 10000000)) t= t*2; }}}}}
54    public class Driver2 {
55      public static void main(String[] args){
56         ThreadGroup  HG = new ThreadGroup("DeadlockResolverGroup");
57         ThreadGroup  DG = new ThreadGroup("DeadlockGroup "+1);
58         Jobpool jp = new Jobpool(10);
59         DeadlockResolver DR = new DeadlockResolver(jp);
60         DeadendResolver ER = new DeadendResolver(jp); 
61         Thread dr = new Thread(HG, DR, "NoTimerResolver");