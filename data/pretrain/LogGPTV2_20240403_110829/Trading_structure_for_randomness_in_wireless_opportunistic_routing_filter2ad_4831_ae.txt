unit. As the number of ﬂows in the network increases, each node
starts playing two roles; it is a forwarder on the best path for some
ﬂow, and a forwarder off the best path for another ﬂow. If the driver
polls the node to send a packet, it is better to send a packet from the
ﬂow for which the node is on the best path. This is because the links
on the best path usually have higher delivery probability. Since the
medium is congested and the number of transmissions is bounded,
it is better to transmit over the higher quality links.
Also, the gap between MORE and ExOR decreases with multiple
ﬂows. Multiple ﬂows increase congestion inside the network. Al-
though a single ExOR ﬂow may underutilize the medium because
it is unable to exploit spatial reuse, the congestion arising from the
increased number of ﬂows covers this issue. When one ExOR ﬂow
becomes unnecessarily idle, another ﬂow can proceed.
Although the beneﬁts of opportunistic routing decrease in a con-
gested network, it continues to do better than best path routing. In-
deed the throughput gains persist despite our implementation be-
ing suboptimal for multi-ﬂows. In particular, in our implementation,
a forwarder transmits in a round-robin fashion from all ﬂows that
have positive credits. A better design would give priority to those
ﬂows for which the forwarder is on the best path to the destina-
tion, allowing each transmission to make more progress toward the
packet’s ﬁnal destination. Second, our implementation uses stan-
dard 802.11 broadcast. The broadcast mode in 802.11 does not sup-
port congestion avoidance and relies solely on carrier sense to avoid
collisions. This is usually not an issue for a single ﬂow because a
forwarder’s TX credit decreases as more nodes participate in for-
warding the ﬂow. For multiple ﬂows, however, a scheme that aug-
ments the 802.11 broadcast mode with congestion avoidance would
increase the throughput gains further.
Finally, this section highlights the differences between inter-
ﬂow and intra-ﬂow network coding. Katti et al. [23] show that the
throughput gain of COPE, an inter-ﬂow network coding protocol,
increases with an increased number of ﬂows; but, COPE does not
apply to unidirectional trafﬁc and cannot deal with dead spots. Thus,
inter-ﬂow and intra-ﬂow network coding complement each other. A
design that integrates MORE and COPE is a natural next step.
8.7 Autorate
Current 802.11 allows a sender node to change the bit rate auto-
matically, depending on the quality of the link to the recipient. One
may wonder whether such adaptation would improve the throughput
of Srcr and nullify the gains of opportunistic routing. Thus, in this
section, we allow Srcr to exploit the autorate feature in the MadWiﬁ
driver [29], which uses the Onoe bit-rate selection algorithm [5].
Opportunistic routing does not have the concept of a link; it
broadcasts every packet to many potential nexthops. Thus, current
autorate algorithms are not suitable for opportunistic routing. The
problem of autorate control for opportunistic routing is still open.
Therefore, in our experiments, we compare Srcr with autorate to op-
portunistic routing (MORE and ExOR) with a ﬁxed bit-rate of 11
Mb/s.
Operation
Independence check
Coding at the source
Decoding
Avg. Time [μs]
Std. Dev. [μs]
10
270
260
5
15
150
Table 2: Average computational cost of packet operations in MORE.
The numbers for K = 32 and 1500B packets are measured on a low-end
Celeron machine clocked at 800MHz with 128KiB cache. Note that the cod-
ing cost is highest at the source because it has to code all K packets together.
The coding cost at a forwarder depends on the number of innovative packets
it has received, and is always bounded by the coding cost at the source.
Fig. 13 shows CDFs of the throughputs of the various protocols.
The ﬁgure shows that MORE and ExOR preserve their superiority to
Srcr, even when the latter is combined with automatic rate selection.
Paths with low throughput in traditional routing once again show the
largest gains. Such paths have low quality links irrespective of the
bit-rate used, therefore autorate selection does not help these paths.
Interestingly, the ﬁgure also shows that autorate does not neces-
sarily perform better than ﬁxing the bit-rate at the maximum value.
This has been noted by prior work [36] and attributed to the autorate
algorithm confusing collision-caused losses for error-caused losses,
and unnecessarily reducing the bit-rate. Indeed, a close examina-
tion of our logs indicates that the auto-rate algorithm often picks the
lowest bit-rate in an attempt to reduce packet loss. This reduction in
bit-rate has little impact on improving the average success rate of all
transmissions, which increases only by 2%. In contrast, the reduc-
tion in bit-rate causes a signiﬁcant decrease in throughput. About
23% of all transmissions under autorate are done at the lowest bit-
rate, which takes roughly 10 times longer than the highest bit-rate.
These transmissions form a throughput bottleneck and consume al-
most 70% of the shared medium time. As shown in Fig. 13, this
problem affects about 80% of all ﬂows in the testbed.
8.8 Batch Size
We explore the performance of MORE and ExOR for various
batch sizes. Fig. 14 plots the throughput for batch sizes of 8, 16, 32,
64, and 128. It shows that ExOR’s performance with small batches
of 8 packets is signiﬁcantly worse than large batches. In contrast,
MORE is highly insensitive to different batch sizes.
In both ExOR and MORE, the overhead increases with reduced
batch size. ExOR nodes exchange control packets whenever they
transmit a batch. Increasing the batch size allows ExOR to amortize
the control trafﬁc and reduces the chance of spurious transmissions.
MORE may make a few spurious transmissions between the time
the destination decodes a batch and when the source and forwarders
stop transmitting packets from that batch. A bigger batch size allows
MORE to amortize the cost of these spurious transmissions over a
larger number of packets, increasing the overall throughput.
Insensitivity to batch sizes allows MORE to vary the batch size to
accommodate different transfer sizes. We expect that for any transfer
size larger than 7-10 packets (i.e., a batch larger than 7-10 packets),
MORE will show signiﬁcant advantages. Shorter transfers can be
sent using traditional routing. Note that MORE benignly co-exists
with traditional routing, which it uses to deliver its ACKs.
8.9 MORE’s Overhead
Finally, we would like to estimate MORE’s overhead and its suit-
ability for deployment in mesh networks like Roofnet [1] and com-
munity wireless networks [34, 3].
(a) Coding Overhead: In MORE, the cost of coding/decoding pack-
ets is incurred mainly when the packet has to be multiplied by a ran-
dom number (in a ﬁnite ﬁeld of size 28). To optimize this operation,
our implementation reduces the cost by using a 64KiB lookup-table
s
w
o
F
l
f
o
n
o
i
t
c
a
r
F
e
v
i
t
l
a
u
m
u
C
s
w
o
F
l
f
o
n
o
i
t
c
a
r
F
e
v
i
t
l
a
u
m
u
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
MORE, K=8
MORE, K=16
MORE, K=32
MORE, K=64
MORE, K=128
 50
 100
 150
 200
Throughput [pkt/s]
(a) MORE
ExOR, K=8
ExOR, K=16
ExOR, K=32
ExOR, K=64
ExOR, K=128
 50
 100
 150
 200
Throughput [pkt/s]
(b) ExOR
Figure 14: Impact of Batch Size. The ﬁgure shows the CDF of the
throughput taken over 40 random node pairs. It shows that MORE is less
sensitive to the batch size than ExOR.
indexed by pairs of 8 bits. The lookup table caches results of all
possible multiplications, so multiplying any byte of a packet with a
random number is simply a fast lookup.
Table 2 provides micro benchmarks for coding and decoding in
MORE. The measurements are taken on a low-end Celeron 800MHz
machine. The benchmarks show that coding and decoding have
roughly equal cost. They require on average K ﬁnite-ﬁeld multipli-
cations per byte, where K is the batch size. This ties the choice of
K with the maximum achievable throughput. In our setting K = 32
and coding takes on average 270μs per 1500B packet. This limits the
effective throughput to 44 Mb/s, which is higher than the effective
bit rate of current wireless mesh networks [20].
(b) Memory Overhead: In MORE, like in ExOR, routers do not keep
an output queue. Instead, they store the current batch from each
ﬂow. This per-ﬂow state is dominated by the storage required to
buffer innovative packets from the current batch, which is bounded
by K = 32 packets. Additionally, as stated above, MORE nodes
keep a 64KiB lookup-table. Given that the number of concurrent
ﬂows in a mesh network is relatively small, we believe MORE’s
memory overhead is acceptable.
(c) Header Overhead: MORE’s header in our current implementa-
tion is bounded by 70 bytes because we bound the number of for-
warders to 10. Certain values in the header are compressed to in-
crease efﬁciency. For example, since routers only keep the current
batch, we can represent batch IDs using a few bits. Similarly, we
compress the node ID in the forwarder list to one byte, which is a
hash of its IP. This works because only nodes whose ETX to the
destination is smaller than the source are allowed to participate in
forwarding. For 1500B packets, the header overhead is less than 5%.
Note that our throughput numbers are computed over the delivered
data, and thus they already account for header overhead.
Note that the probe packets used to measure link loss probabilities
do not constitute a MORE-speciﬁc overhead. These probabilities are
measured by the all state-of-art wireless routing protocols, including
ExOR [7], and best-path [6].
9. CONCLUSION
Opportunistic routing and network coding are two powerful ideas
which may at ﬁrst sight appear unrelated. Our work combines these
ideas in a natural fashion to provide opportunistic routing without
a global medium access scheduler. We design a practical system,
MORE, that plugs random network coding into the current network
stack, exploits the opportunism inherent in the wireless medium,
and provides signiﬁcant performance gains. Field tests on a 20-node
wireless testbed show that MORE provides both unicast and multi-
cast trafﬁc with signiﬁcantly higher throughput than both traditional
routing and prior work on opportunistic routing.
10. ACKNOWLEDGMENTS
We thank Srikanth Kandula, Nate Kushman, Hariharan Rahul and
Stan Rost for their insightful comments. We also thank Micah Brod-
sky for his help with ExOR. This work is supported by DARPA
CBMANET, Quanta, and an Intel gift. The opinions and ﬁndings in
this paper are those of the authors and do not necessarily reﬂect the
views of DARPA, Quanta, or Intel.
11. REFERENCES
[1] D. Aguayo, J. Bicket, S. Biswas, G. Judd, and R. Morris.
Link-level measurements from an 802.11b mesh network. In
SIGCOMM, 2004.
[2] R. Ahlswede, N. Cai, S. R. Li, and R. W. Yeung. Network
Information Flow. In IEEE Trans. on Information Theory, Jul
2000.
[3] Bay Area Wireless User Group. http://www.bawug.org.
[4] P. Bhagwat, B. Raman, and D. Sanghi. Turning 802.11
inside-out. In HotNets, 2003.
[5] J. Bicket. Bit-rate selection in wireless networks. M.S. Thesis,
2005.
[6] J. Bicket, D. Aguayo, S. Biswas, and R. Morris. Architecture
and evaluation of an unplanned 802.11b mesh network. In
MOBICOM, 2005.
[7] S. Biswas and R. Morris. Opportunistic routing in multi-hop
wireless networks. In SIGCOMM, 2005.
[8] N. Cai and R. W. Yeung. Secure Network Coding. In ISIT,
2002.
[9] Calling p2p: Peer-to-peer networks coming to a phone near
you, 2005. http://www.econtentmag.com.
[10] S. Chachulski. Trading structure for randomness in wireless
opportunistic routing. M.S. Thesis, 2007.
[11] D. S. J. De Couto, D. Aguayo, J. Bicket, and R. Morris. A
high-throughput path metric for multi-hop wireless routing. In
MOBICOM, 2003.
[12] Digiweb offers wireless IPTV in Ireland, 2005.
http://www.dtg.org.uk/news/.
[13] J. E. Gentle. Numerical Linear Algebra for Applications in
Statistics. Springer–Verlag, 1998.
[14] C. Gkantsidis and P. Rodriguez. Network Coding for Large
Scale Content Distribution. In INFOCOM, 2005.
[15] T. Ho, M. M´edard, J. Shi, M. Effros, and D. Karger. On
randomized network coding. In Allerton, 2003.
[16] D. T. J. N. Laneman and G. Wornell. Cooperative diversity in
wireless networks: Efﬁcient protocols and outage behavior.
IEEE Trans. on Information Theory, Dec 2004.
[17] S. Jaggi, M. Langberg, S. Katti, T. Ho, D. Katabi, and
M. M´edard. Resilient Network Coding In The Presence of
Byzantine Adversaries. In INFOCOM, 2007.
[18] S. Jaggi, P. Sanders, P. A. Chou, M. Effros, S. Egner, K. Jain,
and L. Tolhuizen. Polynomial time algorithms for multicast
network code construction. IEEE Trans. on Information
Theory, 2003.
[19] A. Jiang. Network Coding for Joint Storage and Transmission
with Minimum Cost. In ISIT, 2006.
[20] A. Kamerman and G. Aben. Net throughput with IEEE
802.11 wireless LANs. In WCNC, 2000.
[21] A. Kamra, V. Misra, J. Feldman, and D. Rubenstein. Growth
Codes: Maximizing Sensor Network Data Persistence. In
SIGCOMM, 2006.
[22] S. Katti, D. Katabi, W. Hu, H. S. Rahul, and M. M´edard. The
importance of being opportunistic: Practical network coding
for wireless environments. In Allerton, 2005.
[23] S. Katti, H. Rahul, D. Katabi, W. H. M. M´edard, and
J. Crowcroft. XORs in the Air: Practical Wireless Network
Coding. In SIGCOMM, 2006.
[24] R. Koetter and M. M´edard. An algebraic approach to network
coding. IEEE/ACM Trans. on Networking, 2003.
[25] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. F.
Kaashoek. The click modular router. ACM Trans. on
Computer Systems, Aug 2000.
[26] S.-Y. R. Li, R. W. Yeung, and N. Cai. Linear network coding.
IEEE Trans. on Information Theory, Feb 2003.
[27] D. S. Lun, M. M´edard, and R. Koetter. Efﬁcient operation of
wireless packet networks using network coding. In IWCT,
2005.
[28] D. S. Lun, M. M´edard, and R. Koetter. Network coding for
efﬁcient efﬁcient wireless unicast. In International Zurich
Seminar on Communications (IZS 2006), 2006.
[29] MADWiFi: Multiband Atheros Driver for WiFi.
http://madwiﬁ.org.
[30] A. K. Miu, H. Balakrishnan, and C. E. Koksal. Improving loss
resilience with multi-radio diversity in wireless networks. In
MOBICOM, 2005.
[31] J. S. Park, M. Gerla, D. S. Lun, Y. Yi, and M. M´edard.
Codecast: A network-coding based ad hoc multicast protocol.
IEEE Wireless Comm. Magazine, 2006.
[32] C. Reis, R. Mahajan, M. Rodrig, D. Wetherall, and
J. Zahorjan. Measurement-based models of delivery and
interference. In SIGCOMM, 2006.
[33] Ruckus to announce wireless, IPTV deals with 15 telcos,
2006. http://www.eweek.com/article2/0,1895,1989290,00.asp.
[34] Seattle wireless. http://www.seattlewireless.net.
[35] J. Widmer and J.-Y. L. Boudec. Network Coding for Efﬁcient
Communication in Extreme Networks. In SIGCOMM WDTN,
2005.
[36] S. H. Y. Wong, S. Lu, H. Yang, and V. Bharghavan. Robust
rate adaptation for 802.11 wireless networks. In MOBICOM,
2006.