### Unit
As the number of flows in the network increases, each node assumes dual roles: it acts as a forwarder on the best path for some flows and as a forwarder off the best path for others. When the driver polls the node to send a packet, it is more efficient to send a packet from the flow for which the node is on the best path. This is because the links on the best path typically have a higher delivery probability. Given that the medium is congested and the number of transmissions is limited, it is advantageous to transmit over higher-quality links.

### Congestion and Flow Management
The gap between MORE and ExOR decreases with multiple flows due to increased congestion within the network. While a single ExOR flow may underutilize the medium by not fully exploiting spatial reuse, the congestion from multiple flows mitigates this issue. If one ExOR flow becomes unnecessarily idle, another flow can proceed, thereby balancing the load.

### Performance in Congested Networks
Although the benefits of opportunistic routing diminish in a congested network, it still outperforms best-path routing. Our implementation, though suboptimal for multi-flows, maintains throughput gains. Specifically, a forwarder transmits in a round-robin fashion from all flows with positive credits. A better design would prioritize flows where the forwarder is on the best path to the destination, allowing each transmission to make more progress toward the packet’s final destination. Additionally, our implementation uses standard 802.11 broadcast, which does not support congestion avoidance and relies solely on carrier sense to avoid collisions. For a single flow, this is generally not an issue, as a forwarder's TX credit decreases as more nodes participate in forwarding. However, for multiple flows, a scheme that augments 802.11 broadcast with congestion avoidance would further increase throughput.

### Inter-Flow and Intra-Flow Network Coding
This section highlights the differences between inter-flow and intra-flow network coding. Katti et al. [23] show that the throughput gain of COPE, an inter-flow network coding protocol, increases with the number of flows. However, COPE does not apply to unidirectional traffic and cannot handle dead spots. Therefore, inter-flow and intra-flow network coding complement each other, and integrating MORE and COPE is a natural next step.

### Autorate Adaptation
Current 802.11 standards allow a sender node to automatically adjust the bit rate based on the link quality to the recipient. One might wonder whether such adaptation could improve Srcr's throughput and negate the gains of opportunistic routing. In this section, we allow Srcr to use the autorate feature in the MadWiFi driver [29], which employs the Onoe bit-rate selection algorithm [5].

Opportunistic routing does not have the concept of a link; it broadcasts every packet to many potential next hops. Thus, current autorate algorithms are not suitable for opportunistic routing. The problem of autorate control for opportunistic routing remains open. In our experiments, we compare Srcr with autorate to opportunistic routing (MORE and ExOR) with a fixed bit-rate of 11 Mb/s.

### Computational Cost
Table 2 shows the average computational cost of packet operations in MORE. The numbers for K = 32 and 1500B packets are measured on a low-end Celeron machine clocked at 800 MHz with 128 KiB cache. Note that the coding cost is highest at the source because it has to code all K packets together. The coding cost at a forwarder depends on the number of innovative packets it has received and is always bounded by the coding cost at the source.

| Operation          | Avg. Time [μs] | Std. Dev. [μs] |
|--------------------|----------------|----------------|
| Independence check | 10             | 5              |
| Coding at the source| 270            | 15             |
| Decoding           | 260            | 15             |

### Throughput Analysis
Figure 13 shows the cumulative distribution functions (CDFs) of the throughputs of various protocols. The figure indicates that MORE and ExOR maintain their superiority over Srcr, even when the latter is combined with automatic rate selection. Paths with low throughput in traditional routing show the largest gains, as they have low-quality links regardless of the bit rate used, and autorate selection does not help these paths. Interestingly, the figure also shows that autorate does not necessarily perform better than fixing the bit rate at the maximum value. This has been noted in prior work [36] and attributed to the autorate algorithm confusing collision-caused losses with error-caused losses, leading to unnecessary bit-rate reductions. Indeed, our logs indicate that the auto-rate algorithm often selects the lowest bit rate, which has little impact on improving the average success rate but significantly reduces throughput.

### Batch Size Impact
We explore the performance of MORE and ExOR for various batch sizes. Figure 14 plots the throughput for batch sizes of 8, 16, 32, 64, and 128. It shows that ExOR's performance with small batches of 8 packets is significantly worse than with large batches. In contrast, MORE is highly insensitive to different batch sizes.

In both ExOR and MORE, overhead increases with reduced batch size. ExOR nodes exchange control packets whenever they transmit a batch. Increasing the batch size allows ExOR to amortize the control traffic and reduce spurious transmissions. MORE may make a few spurious transmissions between the time the destination decodes a batch and when the source and forwarders stop transmitting packets from that batch. A larger batch size allows MORE to amortize the cost of these spurious transmissions over a larger number of packets, increasing overall throughput.

Insensitivity to batch sizes allows MORE to vary the batch size to accommodate different transfer sizes. We expect that for any transfer size larger than 7-10 packets, MORE will show significant advantages. Shorter transfers can be sent using traditional routing. Note that MORE co-exists benignly with traditional routing, which it uses to deliver its ACKs.

### Overhead Estimation
Finally, we estimate MORE's overhead and its suitability for deployment in mesh networks like Roofnet [1] and community wireless networks [34, 3].

#### Coding Overhead
In MORE, the cost of coding/decoding packets is mainly incurred when the packet is multiplied by a random number in a finite field of size 2^8. To optimize this operation, our implementation uses a 64 KiB lookup table indexed by pairs of 8 bits. The lookup table caches results of all possible multiplications, making the multiplication of any byte of a packet with a random number a fast lookup.

Table 2 provides micro-benchmarks for coding and decoding in MORE. The measurements are taken on a low-end Celeron 800 MHz machine. The benchmarks show that coding and decoding have roughly equal cost, requiring on average K finite-field multiplications per byte, where K is the batch size. This ties the choice of K with the maximum achievable throughput. In our setting, K = 32, and coding takes on average 270 μs per 1500B packet, limiting the effective throughput to 44 Mb/s, which is higher than the effective bit rate of current wireless mesh networks [20].

#### Memory Overhead
In MORE, like in ExOR, routers do not keep an output queue. Instead, they store the current batch from each flow. This per-flow state is dominated by the storage required to buffer innovative packets from the current batch, which is bounded by K = 32 packets. Additionally, MORE nodes keep a 64 KiB lookup table. Given the relatively small number of concurrent flows in a mesh network, we believe MORE's memory overhead is acceptable.

#### Header Overhead
MORE's header in our current implementation is bounded by 70 bytes, as we limit the number of forwarders to 10. Certain values in the header are compressed to increase efficiency. For example, since routers only keep the current batch, we can represent batch IDs using a few bits. Similarly, we compress the node ID in the forwarder list to one byte, which is a hash of its IP. This works because only nodes whose ETX to the destination is smaller than the source are allowed to participate in forwarding. For 1500B packets, the header overhead is less than 5%. Note that our throughput numbers are computed over the delivered data, already accounting for header overhead.

### Conclusion
Opportunistic routing and network coding are two powerful ideas that may initially appear unrelated. Our work combines these ideas to provide opportunistic routing without a global medium access scheduler. We design a practical system, MORE, that integrates random network coding into the current network stack, exploits the opportunism inherent in the wireless medium, and provides significant performance gains. Field tests on a 20-node wireless testbed show that MORE provides both unicast and multicast traffic with significantly higher throughput than both traditional routing and prior work on opportunistic routing.

### Acknowledgments
We thank Srikanth Kandula, Nate Kushman, Hariharan Rahul, and Stan Rost for their insightful comments. We also thank Micah Brodsky for his help with ExOR. This work is supported by DARPA CBMANET, Quanta, and an Intel gift. The opinions and findings in this paper are those of the authors and do not necessarily reflect the views of DARPA, Quanta, or Intel.

### References
[References remain unchanged]