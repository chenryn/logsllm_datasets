Java代码审计之基础开发
1
Java代码审计之基础开发
Author
Catsay
Type
审计
完成
感悟
啥都不会
时间
数据类型与运算符
Java和PHP不同，他不是⼀个弱类型的语⾔。
编写主⽅法
        main()⽅法是类体中的主⽅法，该⽅法从{开始到}结束。Public、Static和void分别是main()⽅法的权限修饰符、静态修饰符和
返回值修饰符，Java程序中的main()⽅法必须声明为：public static void ，其中String[] args是⼀个字符串类型的数组，它是
main()⽅法的参数
创建项⽬
我们这⾥使⽤的是IDEA，⾸先去创建⼀个Java项⽬，然后创建⼀个包
然后在包下⾯去创建⼀个类
Feb 10, 2021
Java代码审计之基础开发
2
然后会⾃动⽣成⼀段代码，我们写⼀个main⽅法进去，打印⼀个HelloWorld出来
package 
; 
public class HelloWorld { 
    public static void main(String[] args){//快捷键psvm 
        System.out.println("Hello World");//快捷键sout 
    }
}
com.java.test
Java代码审计之基础开发
3
数据类型
⼋⼤数据类型
String不是⼀个数据类型，⽽是引⽤数据类型，属于Java提供的⼀个类
声明变量
 数据类型 变量名 = 值;
 数据类型 变量名;
变量名 = 值;
关键字
Java代码审计之基础开发
4
关键字是Java语⾔中已经被赋予特定意义的⼀些单词，不可以把这些字作为标识符来使⽤【⼤约有50个左右】
声明常量
final 数据类型 数据名称 = 值;
常量名通常使⽤⼤写字⺟表⽰常量，只能被赋值⼀次，通常定义时即对其进⾏初始化。
这⾥我们去新建⼀个类去做测试。
Java代码审计之基础开发
5
package 
; 
public class JavaType { 
    public static final int STATIC_NORMAL = 0; 
    public static final int STATIC_LOCK = 1; 
    public static void main(String[] args) { 
        final int nCount; 
        nCount = 123; 
        System.out.println("STATIC_NORMAL value is :"+STATIC_NORMAL); 
        System.out.println("STATIC_LOCK value is :"+STATIC_LOCK); 
        System.out.println("nCount value is :"+nCount); 
    }
}
强制类型转换
当把⾼精度的变量的值赋值给低精度变量时，必须使⽤强制类型转换（⼜称为显式类型转换）
语法规则：(类型名)要转换的内容
package 
; 
public class ChangeType { 
    public static void main(String[] args) { 
        int nNum = 10; 
        double dNum = 10.8; 
        int ndNum = (int)dNum; 
        double dnNum = (double)nNum; 
        System.out.println("ndNum = "+ndNum); 
        System.out.println("dnNum = "+dnNum); 
com.java.test
com.java.test
Java代码审计之基础开发
6
    }
}
低精度转换⾼精度会导致精度丢失
赋值运算符
赋值运算符以=表⽰，功能是将右⽅操作数所含的值赋值给左⽅的操作数
Java代码审计之基础开发
7
算数运算符
算数运算符⽤在数学表达式中，他们的作⽤和在数学中的作⽤⼀样，下表列出了所有的算数运算符。
关系运算符
Java代码审计之基础开发
8
位运算符
Java定义了位运算符，应⽤于整数类型(int)、⻓整型(long)、短整型(short)、字符型(char)和字节型(byte)等类型。
下表列出了位运算符的基本运算，假设A60、B13
逻辑运算符
下表列出了逻辑运算符的基本运算，假设布尔类型变量A为真，B为假
三元运算符
三元运算符的运算规律为：若条件式的值为true，则整个表达式取1，否则取2
Java代码审计之基础开发
9
variable x = (expression)?value if true:value if false
instanceof运算符
该运算符⽤于操作对象实例，检查该对象是否是⼀个特定类型(类类型或者接⼝类型)
instanceof运算符使⽤格式如下：
Object reference variable) instanceof (class/interface type)
package 
; 
public class instanceofTest { 
    public static void main(String[] args) { 
        String sName = "Catsay"; 
        boolean result = sName instanceof String; 
        System.out.println("Name type is String:"+result); 
    }
}
数组操作
 数组概述及声明
数组是⼀种容器
数组可以存储基本类型、引⽤类型
数组存储的类型必须保持⼀致
声明⽅式：
com.java.test
Java代码审计之基础开发
10
数据类型 数组名[];
数据类型[] 数组名;
 ⼀维数组的创建
创建⼀维数组的三种⽅式：
 int[] arr1 = new int[4];//这⾥的4代表的是数组的空间，就当作是存放元素的个数
 int[] arr2 = 1,2,3,4;
 int[] arr3 = new int[]{1,2,3,4;
package 
; 
public class ArrayTest { 
    public static void main(String[] args) { 
        //⽅式1 
        int[] arr1 = new int[4]; 
        arr1[0] = 100; 
        arr1[1] = 200; 
        arr1[2] = 300; 
        arr1[3] = 400; 
        System.out.println("Array1[0] value is :"+arr1[0]); 
        System.out.println("Array1[1] value is :"+arr1[1]); 
        System.out.println("Array1[2] value is :"+arr1[2]); 
        System.out.println("Array1[3] value is :"+arr1[3]); 
        //⽅式2 
        int[] arr2 = {1,2,3,4}; 
        System.out.println("Array2[0] value is :"+arr2[0]); 
        System.out.println("Array2[1] value is :"+arr2[1]); 
        System.out.println("Array2[2] value is :"+arr2[2]); 
        System.out.println("Array2[3] value is :"+arr2[3]); 
        //⽅式3，使⽤循环输出 
        int[] arr3 = new int[]{4,3,2,1}; 
        for (int i = 0;i sNames.length) 
        { 
            System.out.println("传⼊区间不合法!"); 
            return  0; 
        } 
        for (int i = nStart - 1;i < nEnd;i++){ 
            System.out.println("查找到的是学⽣："+i+" 姓名为："+sNames[i]); 
        } 
        return 1; 
    }
}
然后在主类中调⽤
package 
; 
public class SearchStudentCore { 
    public static void main(String[] args) { 
        SearchStudent stu = new SearchStudent(); 
        stu.add(); 
        stu.search(1,4); 
    }
}
com.cla.core
com.cla.core
Java代码审计之基础开发
17
匿名对象的概述以及应⽤
匿名对象只适合对⽅法的⼀次调⽤，调⽤多次就会产⽣多个对象。
匿名函数可以调⽤属性，调⽤后就会变成垃圾回收，没有任何意义。
package 
; 
public class CarRun { 
    public static void main(String[] args) { 
        //正常调⽤ 
        Car cl = new Car(); 
        cl.Run(); 
        //匿名调⽤ 
        new Car().Run(); 
    }
} 
class Car{ 
    public void Run(){ 
        System.out.println("⻋正在运⾏"); 
    }
}
com.cla.core
Java代码审计之基础开发
18
⾯向对象之封装
封装的概念
如下代码有什么缺陷？
student s = new student(); 
s.age = -100;//年龄是⼀个负数
如何避免这个问题？
把问题封装起来
什么是封装？
将类的某些信息隐藏在类的内部，不允许外部程序直接访问，⽽是通过该类的提供的⽅法来实现对隐藏信息的操作和访问
封装的两⼤原则
把尽可能多的东西藏起来，对外部提供⼀个便捷的接⼝
把所有的属性藏起来
封装的步骤
 定义私有属性
 ⽣成getter()/setter()⽅法封装
 创建⼀个有参构造和⽆参构造
 ⽣成toString⽅法
⾸先我们去按照步骤写⼏个私有属性：
private String sName; 
private int nAge; 
private String sSex;
然后第⼆步，在idea中⽣成getter/setter
Java代码审计之基础开发
19
Java代码审计之基础开发
20
然后选择所有的属性，然后就会⾃动⽣成了
class Student1{ 
    private String sName; 
    private int nAge; 
    private String sSex; 
    public String getsName() { 
        return sName; 
    } 
    public void setsName(String sName) { 
        this.sName = sName; 
    } 
    public int getnAge() { 
        return nAge; 
    } 
    public void setnAge(int nAge) { 
        this.nAge = nAge; 
    } 
    public String getsSex() { 
        return sSex; 
    } 