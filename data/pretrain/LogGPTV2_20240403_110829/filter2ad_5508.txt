title:SecTag: a multi-policy supported secure web tag framework
author:Ruixuan Li and
Meng Dong and
Bin Liu and
Jianfeng Lu and
Xiaopu Ma and
Kai Li
SecTag: A Multi-Policy Supported Secure Web Tag
Framework
Ruixuan Li, Meng Dong, Bin Liu, Jianfeng Lu, Xiaopu Ma, Kai Li
PI:EMAIL, {mengdong, bliu9, lujianfeng, xpma}@smail.hust.edu.cn, PI:EMAIL
Wuhan, Hubei 430074, China
School of Computer Science and Technology
Huazhong University of Science and Technology
ABSTRACT
Traditional web application development often encounters
tight coupling problem between access control logic and busi-
ness logic. It is hard to conﬁgure and modify access control
policies after a system has been deployed. In this demon-
stration, we present SecTag, a multi-policy supported se-
cure web tag framework, to address this problem. We deﬁne
a series of general-purpose secure attributes that meet the
demand of ﬁne-grained access control in web presentation
layer. We also design a set of high interactive secure tags,
which encapsulate secure features to provide reusable se-
cure components for web development. A running example
of SecTag is presented to demonstrate the eﬀectiveness of
the proposed framework.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—
Access Controls; D.2.9 [Software Engineering]: Manage-
ment—Software conﬁguration management
General Terms
Security, Management
1.
INTRODUCTION
Web-based enterprise-level applications have gained a tremen-
dous growth in the last decade. While business groups and
individuals enjoy the rich data and information services on
the web through all kinds of web applications, ﬁne-grained
access control requirements for protecting the sensitive con-
tents and important resources within web pages have become
more and more urgent [1]. Traditional access control module
development in web systems often suﬀers problems, such as
lack of ﬁne-grained and multi-policy support, tight coupling
of the access control logic with the business logic. It is hard
to reconﬁgure or modify the access control policies after the
system has been deployed. Hence, it is ultimately impor-
tant to provide a development framework considering the
features of multi-policy authorization, component reusabil-
ity, multi-views and high interaction support.
In this demonstration, we present a multi-policy supported
secure web tag framework, SecTag, to create secure and ﬁne-
Copyright is held by the author/owner(s).
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
ACM 978-1-4503-0244-9/10/10.
grained web resource protection. The framework is designed
upon the core secure tag library that implements tag-based
ﬁne-grained access control model in applications. SecTag
provides the features of easy conﬁguration and multi-policy
support for secure tag components. They can be conﬁgured
through the visual interface of secure tag management ser-
vice in web presentation layer. Our main contributions are
as follows.
(1) We develop a reusable framework to help developers
create secure ﬁne-grained and multi-policy support web re-
source protection.
(2) We deﬁne a series of general-purpose secure attributes
that meets the demand of ﬁne-grained access control in web
presentation-layer.
(3) We create a set of high interactive secure tags, which
encapsulate secure features to provide reusable secure com-
ponents for web development.
The source code and program guide for SecTag can be
downloaded at PI:EMAIL .
2. DESIGN OF SECTAG
2.1 Framework of SecTag
Our goal is to design and implement a light-weight ba-
sic framework of SecTag, which can be easily satisﬁed with
the traditional model-view-controller (MVC) mode. By us-
ing SecTag, ﬁne-grained access control policies can be easily
conﬁgured through the visual interface without any modiﬁ-
cation of codes. Most of the general access control logics can
be encapsulated in the form of secure tags. Thus, the de-
velopment and maintenance workload are greatly reduced.
Figure 1 shows the architecture of SecTag framework.
The core of SecTag includes Business/Model Dispatcher
(BMD), Secure View Proxy (SVP) and Secure Tag Library
(STL). BMD implements the request/response scheduling
logic of web framework. The ultimate response is generated
through SVP. Secure tags deployed in the web pages will be
bound with secure data according to the attributes of users,
which makes the same web pages present diﬀerent result
views according to the security conﬁguration.
As shown in Figure 1, when an initial request reaches
the Servlet container, it will be passed to a standard ﬁl-
ter chain. The ﬁlter chain includes the preprocessing ﬁlter
that is used to initialize the secure context. When a user
is not authenticated, a login page will be returned if the
1http://code.google.com/p/sectag/
633Client Browser
HttpServletRequest
normal
viewͲonly


Secure Context Establishment (authentication, subject initialization)

unavailable
submitdoesnotshowany
Business/Model Dispatcher (BMD)
Figure 2: Three rendering states of submit tag.
Secure View Proxy
(SVP) 
Secure Policy
Configuration 
Manager (SPCM)
sec-config.xml
Secure Tag Renderer
(STR) 1
Model / View 
Mapper (MVM) 
Secure 
View 
Resolver
(SVR) 
Secure Tag Renderer
(STR) 2
Secure Tag Renderer
(STR) 3
Secure Data Binding
Secure View Results
Secure Tag 
Subsystem (STS)
Secure Data 
Filter
Subsystem
(SDFS) 
Visualization 
Configuration
Policy Analysis
Subsystem (PAS) 
HttpServletResponse
Figure 1: Framework of SecTag.
user’s information can not be obtained from cookies or ses-
sions. After the user provides legal identity information,
the preprocessing ﬁlter will initialize user’s secure context
according to the secure policy conﬁguration, including the
attributes of authorized subject and secure decision point
(SDP) for each policy. Then, BMD will be called, which
issues polling requests to Model/View Mapper (MVM) to
determine whether the Secure View Resolver (SVR) should
be called by this request.
If an SVR is to be called by MVM, BMD will assign its
control permissions to SVP and transmit the initial data
model and view to SVP. SVP will get the secure policy infor-
mation from Secure Policy Conﬁguration Manager (SPCM)
that reads secure conﬁguration information from sec-conﬁg.xml.
Then, an SVR is created by SVP for secure view rendering.
The SVR traverses the document tree of the entire view and
calls Secure Tag Renderer (STR) for each secure tag pro-
tected by ﬁne-grained access control policy. STR will call
Secure Tag Subsystem (STS) to determine the ﬁnal presen-
tation and render the local secure view according to autho-
rization attributes of the secure context and secure policies
deﬁned in SPCM. Before binding the data model, SVP will
dynamically ﬁlter out the data that the user wants to shield
according to the secure conﬁguration. Finally, the view en-
capsulating secure data with all rendered secure tags will be
returned to the client browser.
2.2 Design of Policy Conﬁguration
Document Object Model (DOM) has been widely used
in XML-oriented ﬁne-grained access control model [2]. Sec-
Tag adopts XML to describe the policy rules, called sec-
conﬁg.xml, in which all of these ﬁne-grained permissions are
conﬁgured intensively. Based on actual secure applications,
tag rendering that responds to user’s requests can be divided
into three states: normal, view-only and unavailable, taking
submit tag as an example shown in Figure 2.
Meanwhile, tags can be divided into two speciﬁc cate-
gories, as shown in Table 1, according to the objects they
control.
(1) Tags of user interface (UI) display: mainly includes
Figure 3: Structure of policy conﬁguration.
Table 1: Common tags with secure requirements
Tags of UI display ; ; ; ;
Tags of data ac-
cess control
; ; 
the visibility and availability of control, such as whether the
button to display or not, and whether the text is editable or
the editing operation is locked on the speciﬁc user.
(2) Tags of data access control: mainly includes the dy-
namic rendering of the data list. For example, the cascading-
select tag will ﬁlter out the data that the user is unable to
access, and only show those data the user has permissions.
Each data item in the data list can also be divided into three
states: normal, view-only and unavailable.
The structure of policy conﬁguration is shown in Figure
3.
In the ﬁgure, “default-setting” speciﬁes the default au-
thorization settings. Attribute “mode” represents the de-
fault access control model supporting multi-policies, such as
RBAC (role-based access control), MAC (mandatory access
control) and DAC (discretionary access control). Attribute
“access” represents the default display status, such as nor-
mal, view-only and unavailable. Attribute “name” of policy
is policy’s unique identiﬁcation with a unique value. Each
policy can set attribute “mode” and “access”, and contains at
least one speciﬁc rule. “rule” is used to describe the speciﬁc
access control information, and its attribute “access” speci-
ﬁes the access permission to the rule. The sub-node “info”
sets the user collection who owns the permissions speciﬁed
by “access”. The sub-node “target” indicates the display sta-
tus corresponding to the data items of the data list that the
tag receives. We use “n/v/u” to denote the diﬀerent values
of “target”: normal/view-only/unavailable.
Figure 4 gives an example of policy conﬁguration for pol-
icy p. As shown in Figure 4, we can inject a structured
query language (SQL) statement or a method of a class in
sec-conﬁg.xml when “type” is deﬁned as “SQL” or “Method”.
In these cases, Policy Analysis Subsystem (PAS) will au-
tomatically load the dynamic data to complete the policy
analysis.
2.3 Design of Secure Tags
We extend traditional web tags to support secure attributes
through binding secure policies that are conﬁgured in sec-
conﬁg.xml. We use FreeMarker template engine to dynam-
ically render tags, which makes diﬀerent users see diﬀerent
views according to their requests and permissions. The ar-
chitecture of Secure Tag Subsystem (STS) is shown in Figure
634
L3
John,Mark
n,n,n,n,v,v,v,v
SELECT user FROM UserRole 
WHERE role="SuperAdmin" OR role="Admin"
cn.edu.hust.idc.sectag.demo.getTargetList()
Figure 4: An example of policy p conﬁgured in sec-
conﬁg.xml.
Figure 5: Architecture of Secure Tag Subsystem.
5. These secure tags are based on the development guide-
lines of JSP 2.0. Secure tags in SecTag includes ﬁve main
components.
(1) Secure Tag Deﬁnition (STD). The deﬁnition of secure
tags is described in sectag.tld, which includes the names
of all secure tags, supporting classes, and the description
of attributes. Attributes are divided into two types: tra-
ditional HTML tag attributes and the extended secure at-
tribute, named “policy”, which is used to bind an access
control policy in sec-conﬁg.xml.
(2) Secure Tag Component (STC). The JSP page with
secure tag references will call corresponding tag resolver,
namely Secure Tag Supporting Class (STSC), to analyze the
tags according to the deﬁnitions in sectag.tld. The function
of STSC is to get values of the attributes recorded in tags
and initialize STC object simultaneously. STCO will call
Secure View Renderer (SVR) and commission Secure Deci-
sion Point (SDP) to make an authorization decision feedback
for current access request according to the relevant secure
attributes conﬁgured in sec-conﬁg.xml. STC is bound to Se-
cure Tag Data Model (STDM) according to user’s permis-
sions after obtaining the authorization decision-making, and
then chooses the right Secure Tag Template Engine (STTE)
that meets current authorization. Finally, STC assigns the
task of rendering secure result view in HTML to Secure Tag
Template (STT) and STTE.
(3) Secure Tag Template Engine (STTE). We use FreeMarker
template engine as STTE to create diﬀerent result views ac-
cording to the access requests and permissions.
(4) Secure Tag Template (STT). The advantage of STT
(cid:708)a(cid:709)
(cid:708)b(cid:709)
(cid:708)c(cid:709)
Figure 6: Rendering of secure tag select.
used in SecTag is the separation of application and view
which can draw diﬀerent HTML views. SecTag components
will dynamically call diﬀerent templates to show diﬀerent
result views of the same tag according to access permissions
and data models.
(5) Secure Tag Data Model (STDM). STDM is deﬁned to
describe the tag data with access control. Before rendering
into HTML, the original data list will be ﬁltered by Secure
Data Filter Subsystem (SDFS) according to the policy it
binds. Hence, a secure data view is generated. The features
of SDFS make the data model no longer rely on the ﬁltering
code that may be coded repeatedly. Therefore, the cost of
security code development and maintenance can be reduced.
3. AN EXAMPLE OF SECTAG
Taking the tag select that receives data as an example, we
bind attribute ”policy” of select to policy p that is conﬁgured
in sec-conﬁg.xml shown in Figure 4, and describe the user
identity in the form of (username, role, level). Suppose there
are 6 user proﬁles: (Tom, SuperAdmin, L6), (Mary, Admin,
L5), (Lucy, User, L4), (Lily, User, L3), (John, Casualuser,
L2), (Mark, Casualuser, L1). The rendering result views are
shown in Figure 6 (a), (b) and (c) with the login of Tom,
Lucy and John respectively. All the data items could be
selected for Tom, but view-only for Lucy. John can select
items 1∼4 normally, view-only for items 5∼8 and unavailable
for the rest items.
4. CONCLUSIONS
In this demonstration, we develop a reusable secure de-
velopment framework SecTag to solve the problem of tight
coupling between access control and business logic.
It as-
sists developers to achieve ﬁne-grained and multi-policy au-
thorization management for web resource protection.
Acknowledgements
This work is supported by National Natural Science Founda-
tion of China under Grant 60873225, 60773191 and 70771043.
5. REFERENCES
[1] G. Hsieh, K. Foster, G. Emamali, G. Patrick, L.
Marvel: Using XACML for Embedded and
Fine-Grained Access Control Policy. International
Conference on Availability, Reliability and Security,
462-468, 2009.
[2] E. Damiani, S. Paraboschi, S. Vimercati, P. Samarati:
A Fine-Grained Access Control System for XML
Documents. ACM Trans. on Information and System
Security, 5(2): 169-202, 2002.
635