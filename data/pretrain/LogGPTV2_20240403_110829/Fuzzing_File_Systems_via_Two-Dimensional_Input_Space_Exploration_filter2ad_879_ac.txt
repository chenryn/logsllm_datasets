integer type (e.g., size_t count for write()). Furthermore, a
number of ﬁle operations requires an argument of a pointer
type. Such a pointer normally points to a buffer that is used to
store either user data (e.g., void *buf for write()) or kernel
output (e.g., void *buf for read()). For the former case, the
system call fuzzer declares an array ﬁlled with random values
for the argument. A ﬁxed array is always used in the latter
case, since JANUS is not driven by what the kernel outputs at
runtime except for its code coverage.
Nevertheless, for those non-trivial arguments whose proper
values depend on the running context of a ﬁle system, JANUS
generates their values based not only on their expected types,
but more important, on our maintained status by following
mainly three rules: (1) If a ﬁle descriptor is required, the system
call fuzzer randomly picks an opened ﬁle descriptor of proper
type. For instance, write() requires a normal ﬁle descriptor,
while getdents() asks for the ﬁle descriptor of a directory; (2)
If a path is required, the system call fuzzer randomly selects the
path of an existing ﬁle or directory, or a stale ﬁle or directory
that is removed by recent operations. For instance, JANUS
provides the path of a normal ﬁle or a directory to rename(),
but delivers only that of a valid directory required by rmdir().
If the path is used to create a new ﬁle or directory, JANUS may
also randomly generate a brand new path that is located under
an existing directory; (3) If a system call operates the existing
extended attribute of a particular ﬁle (e.g., getxattr() and
setxattr()), the system call fuzzer randomly picks a recorded
extended attribute name of the ﬁle. The generation strategies
enable JANUS to emit context-aware workloads on fresh ﬁle
objects that are free of runtime errors and achieve high code
coverage.
For a newly generated system call, JANUS appends it to
the program and, more important, summarizes the potential
changes to the ﬁle system caused by the system call and
updates the speculated status of the image correspondingly.
For instance, open(), mkdir(), link(), or symlink() may
create a new ﬁle or directory, while open() also introduces
an active ﬁle descriptor; rmdir() or unlink() removes a ﬁle
or a directory from the image; rename() updates the path of
a ﬁle and setxattr() or removexattr() updates a particular
extended attribute.
(cid:25)(cid:19)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
(meta_buffer, program, status) = ctx.pick_from_corpus()
found_new = False
for _ in range(IMAGE_MUTATE_CYCLES):
mutated_buffer = self.img_mutator.mutate_image(meta_buffer)
if self.run_one(mutated_buffer, program, status):
new_program = self.sys_fuzzer.mutate_syscall()
if self.run_one(meta_buffer, new_program, status):
found_new = True
Component
Fuzzing engine
Image parser (8 ﬁle systems)
Image inspector
Program serializer
Syscall fuzzer
Other AFL changes
LKL changes
Shared image buffer
KASAN
Instrumentation tool
LKL-based executor
PoC generator
LoC
Languange
5,229
141
1,163
3,137
497
16
804
360
851
1,108
C++
Python
C++
C++
C
C
C
C++
C++
C++, Python
TABLE II: Implementation complexity of JANUS, including the
changes to AFL and LKL for ﬁle system fuzzing. Since we directly
reuse the existing binary mutation algorithms in AFL for the image
mutator, we omit its code size.
cov, lkl_status = self.lkl_test(self.image_buffer, program)
if lkl_status == CRASH:
self.add_into_corpus((buffer, program, status))
return True
return False
self.save_crash((buffer, program))
elif self.has_new_path(cov):
1 # Class Janus
2 def run_one(self, buffer, program, status):
3
4
5
6
7
8
9
10
11 def fuzz_one(self):
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
if found_new: return
self.release_image(ctx, meta_buffer)
self.sys_fuzzer.initialize(program, status)
for _ in range(SYSCALL_MUTATE_CYCLES):
if found_new: return
for _ in range(SYSCALL_GENERATE_CYCLES):
(new_program, new_status) = \
self.sys_fuzzer.generate_syscall()
found_new = True
self.run_one(meta_buffer, new_program, new_status)
Fig. 7: Pseudo-code of one fuzzing iteration in JANUS.
F. Library OS based Kernel Execution Environment
Note that in the current design, JANUS maintains only the
speculated image status after completing the execution of
a program. Therefore, JANUS avoids any mutation on the
existing arguments that result in potential changes to the image
status. For instance, JANUS may mutate fd of a write() in the
program while never touching path of unlink(), since such
a mutation may invalidate the system calls after the mutated
ones (e.g., changing unlink("A") to unlink("B") affect all the
existing ﬁle operations afterward on ﬁle B in a test case).
E. Exploring Two-Dimensional Input Space
To fuzz both metadata and system calls together, JANUS
schedules its two core fuzzers in order. Figure 7 describes
one fuzzing iteration of JANUS. Speciﬁcally, for an input test
case, which contains a shrunken image and a program, JANUS
ﬁrst launches the image mutator to mutate random bytes on
the shrunken image. If no new code path is discovered with
the unchanged program, JANUS invokes the system call fuzzer
to mutate the argument values of an existing system call in
the program for certain rounds. If still no new code path is
explored, JANUS eventually tries to append new system calls
to the program. Note that rounds in every fuzzing stage are
user deﬁned.
Scheduling image fuzzing and ﬁle operation fuzzing in such
an order is effective as follows: (1) The extracted metadata
indicate the initial state of an image, whose impacts on the
executions of ﬁle operations gradually decreases when the
image has been operated by several system calls. Hence, JANUS
always tries to mutate metadata ﬁrst. (2) Introducing new ﬁle
operations exponentially increases the mutation space of a
program and may also erase the changes from past operations of
the image. Therefore, JANUS prefers mutating existing system
calls rather than generating new ones.
To avoid using an aging OS or ﬁle system that results
in unstable executions and irreproducible bugs (see §II-C),
JANUS relies on a library OS based application (i.e., executor)
to fuzz OS functionalities. Speciﬁcally, JANUS forks a new
instance of the executor to test every newly generated image and
workload from the fuzzing engine ( 4 ). Note that forking a user
application incurs negligible time compared with resetting a
VM instance. Hence, JANUS guarantees a clean-slate kernel for
every test case with low overhead. Moreover, as both fuzzing
engine and executor run in user space on one machine, sharing
input ﬁles and coverage bitmap between them is straightforward,
which is challenging for VM-based fuzzers that run the fuzzing
engine outside VM instances. In addition, a library OS instance
requires far less computing resources compared with any type
of VMs. Therefore, we can deploy JANUS instances on a large
scale without severe contention.
IV. IMPLEMENTATION
We implement JANUS as a variant of AFL (version 2.52b).
JANUS adopts the basic infrastructure of AFL, including the
forkserver, coverage bitmap, and test-case scheduling algorithm.
We extend AFL with the the image mutator and the system
call fuzzer. In addition, we implement an image inspector to
build the initial corpus from a seed image and a program
serializer for delivering generated programs between memory
and working corpus. Furthermore, we implement an executor
based on Linux Kernel Library (LKL) to test newly generated
images and workloads. Note that we also modify LKL to
support the kernel address sanitizer (KASAN) [17], which
is widely adopted by OS fuzzers to detect memory errors.
For ease of reproducing bugs in a real environment, we also
implement a Proof-of-Concept (PoC) generator that produces
a full-size image along with a compilable C program from a
serialized test case. Table II presents the lines of code (LoC)
(cid:25)(cid:19)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
of each components of JANUS. In this section, we describe the
implementation details of several main components.
Image parser and image mutator. We implement the image
parser as a dynamic library to locate metadata and identify
checksums on a seed image. Currently, the image parser
supports parsing the disk images of eight widely used ﬁle
systems on Linux, including ext4, XFS, Btrfs, F2FS, GFS2,
HFS+, ReiserFS, and VFAT. Our implementation of the image
parser refers to the user-space utilities (e.g., mkfs and fsck) of
those ﬁle systems. We also implement the image mutator, which
randomly mutates the bytes of a shrunken image through eight
strategies (see Figure 4). We directly port the implementation
of these mutation strategies from AFL in JANUS.
Image inspector. We implement an image inspector for
JANUS, which iterates ﬁles and directories on a seed image,
and records their in-image paths, types, and extended attributes
for building initial test cases (see §III-B).
Program serializer. We describe newly generated programs
and updated status in a serializable format (see Figure 12) and
implement a corresponding program serializer. The serializer
loads them from the disk into the memory for fuzzing and
testing, and saves them from memory onto the disk for
bookkeeping.
System call fuzzer. The system call fuzzer is implemented
as a new extension for AFL, which is invoked by JANUS
when image mutation fails to make progress. The system call
fuzzer receives a deserialized program and the corresponding
status, and outputs new programs and updated status through
system call mutation or system call generation (see §III-D).
Currently, JANUS supports generating and mutating 34 system
calls designed for fundamental ﬁle operations (see §F). A
number of system calls related to ﬁle operations to a certain
extent but mainly realized at the VFS (virtual ﬁle system) layer
(e.g., dup(), splice(), tee(), etc.) are not worth being tested
and are excluded by JANUS.
In our implementation, JANUS basically mutates metadata
in a test case for 256 rounds, which is the default setting for
the havoc stage (i.e., nondeterministic mutation) in AFL. If the
code coverage fails to increase, JANUS tries to mutate existing
system calls for 128 rounds and appends new ones for another
64 rounds. JANUS spends more effort on image mutation due
to its higher priority when exploring the two-dimensional input
space (see §III-E).
LKL-based executor. We build our executor for JANUS upon
Linux Kernel Library (LKL), which is a typical library OS that
exposes kernel interfaces to user-space programs. Figure 11
presents a code example of using LKL system calls to operate
an ext4 image. The ofﬁcial LKL currently works with Linux
kernel v4.16 and we port it to be compatible with recent
versions, including v4.17 and v4.18. To achieve AFL-style path
coverage at runtime, we implement a GCC wrapper to selectively
instrument the source ﬁles of a target ﬁle system when building
LKL. Furthermore, we implement a user application (i.e., the
executor) linked with LKL as the fuzzing target of JANUS. For
a generated test case, the executor forks a new instance through
the forkserver and invokes LKL system calls to mount an image
mutated by the image mutator and perform a sequence of ﬁle
operations generated by the system call fuzzer.
As ﬂushing a full-size image onto the disk every time takes
much time, we introduce a persistent memory buffer shared
between JANUS’s fuzzing engine and the LKL-based executor
to store the image (i.e., ctx.image_buffer in Figure 3). The
LKL’s block device driver underlying a ﬁle system is then
modiﬁed to access the memory buffer instead of the image ﬁle
on the disk when acquiring any image data. Moreover, we apply
the Copy-on-Write (CoW) technique at runtime to guarantee
that besides the mutated blocks, other parts inside the image
buffer never change when the image buffer is operated by the
generated workload. Speciﬁcally, when the device driver tends
to ﬂush any byte back to a block on the image at runtime,
the block is duplicated for modiﬁcation and later accesses
from LKL. In addition, we port the kernel address sanitizer
(KASAN) to LKL, which can effectively detect memory errors
at runtime. KASAN allocates shadow memory at runtime to
record whether each byte of the original memory is safe to
access. Note that KASAN relies on MMU to translate an
address to its corresponding shadow address, which is not
supported by LKL. Hence, we reserve the shadow memory
space and build the mappings from the memory space of LKL
to the shadow memory at LKL’s boot time.
V. EVALUATION
In this section, we evaluate the effectiveness of JANUS in
terms of its ability to ﬁnd bugs in the latest ﬁle systems and
achieve higher code coverage than existing ﬁle system fuzzers.
In particular, we answer the following questions:
• Q1: How effective is JANUS in discovering previously
unknown bugs in ﬁle systems? (§V-A)
• Q2: How effective is JANUS in exploring (1) the state
of ﬁle system images, (2) ﬁle operations, and (3) the
two-dimensional input space including images and ﬁle
operations? (§V-B, §V-C, §V-D)
• Q3: Is the library OS based executor more effective in
reproducing crashes than traditional VMs? (§V-E)
• Q4: Besides ﬁnding new bugs, what else can JANUS
contribute to the ﬁle system community? (§V-F)
Experimental Setup. We evaluate JANUS on a 2-socket,
24-core machine running Ubuntu 16.04 with Intel Xeon E5-
2670 processors and 256GB memory. We use JANUS to fuzz
ﬁle systems in Linux v4.18-rc1, unless otherwise stated. In
particular, we test eight ﬁle systems including ext4, XFS, Btrfs,
F2FS, GFS2, HFS+, ReiserFS, and VFAT. We create a seed image
for each ﬁle system that has the on-disk ﬁle organization shown
in Figure 9 with most features enabled except ext4 and XFS.
For ext4, we create two seed images: one compatible with
ext2/3 and the other with ext4 features. Similarly, we do the
same for XFS representing XFS v4 and XFS v5, which introduces
on-disk checksums to enforce metadata integrity. In total, we
evaluate 10 seed images. In addition, we compare our results
with Syzkaller (commit ID 9be5aa1), which is the state-of-the-
(cid:25)(cid:19)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:33 UTC from IEEE Xplore.  Restrictions apply. 
File Systems
ext4
XFS
Btrfs
F2FS
GFS2
HFS+
ReiserFS
VFAT
Total
#Reported
18
17
9
11
14
8
13
0
90
#Conﬁrmed
16
11
9
11
0
7
8
0
62
#Fixed
16
7
8
11
0
1
0
0
43
#Patches
20
9
10
12
0
1
0
0
52
#CVEs
13
5
5
8
0
1
0
0
32
TABLE III: An overview of bugs found by JANUS in eight widely-
used ﬁle systems in upstream Linux kernels. The column #Reported
shows the number of bugs reported to the Linux kernel community;
#Conﬁrmed presents the number of reported bugs that are previously
unknown and conﬁrmed by kernel developers; #Fixed indicates
the number of bugs that have already been ﬁxed, at least in the