## 匹配模式
如图所示，论文一共实现了基于coccinelle引擎的6个double
fetch检测的规则。感兴趣的话可以查看pattern_match_linux.cocci文件查看这些规则。Rule 0就是最基本的basic
pattern，匹配对同一地址的两次读取。还有其它5个refined
pattern提高精度。图中的trans_func函数表示所有从用户态获取数据的转移函数：get_user，__get_user，copy_from_user，__copy_from_user。  
### no pointer change
检测double
fetch的最关键规则是在两次fetch操作之间保持用户指针不变。否则每次获取不同的数据而不是重复获取相同的数据可能会导致误报。从图中的规则1可以看出，这种更改可能包括自增、添加偏移量或分配另一个值的情况以及相应的减法情况。
### pointer aliasing
指针混用在double
fetch中很常见。在某些情况下，用户指针被分配给另一个指针，因为原始指针可能被更改(例如在循环中逐段处理长消息)。使用两个指针更方便，一个用于检查数据，另一个用于使用数据。从图中的规则2可以看出，这种赋值可能出现在函数的开头，也可能出现在两次fetch之间。
### explicit type conversion
当内核从用户空间获取数据时，显式指针类型转换被广泛使用。例如，在size
checking场景中，消息指针将转换为消息头指针，以便在第一次获取消息头，然后在第二次获取中再次用作消息指针。从图中的规则3可以看出，这两个源指针中的任何一个都可能涉及类型转换。
### combination of element fetch and pointer fetch
在某些情况下，用户指针既可以获取整个数据结构，也可以通过将指针解引用到数据结构的元素来只获取一部分。例如，在size
checking场景中，通过`get_user(len,ptr->len)`使用用户态指针获取消息长度，然后通过`copy_from_user(msg,ptr,len)`复制整个消息。两次fetch没有使用完全相同的指针，但是覆盖语义上相同的值。
### loop involvement
coccinelle是路径敏感的，当一个循环出现在代码中时，循环中的一个传递函数调用将被报告为两个调用，这可能导致误报。此外，从图中的规则5可以看出，当一个循环中有两个fetch时，上一次迭代的第二个fetch和下一次迭代的第一个fetch将作为double
fetch匹配。这种情况应该作为误报删除，因为这两次fetch将得到不同的值。此外，使用数组在循环中复制不同值的情况也会导致误报。
## 如何避免double fetch漏洞
论文作者最后也给出了几条避免double fetch漏洞的建议。
### 不要拷贝两次消息头
如果在第二次fetch的时候拷贝消息中除了消息头的内容而不是整个消息就不会产生漏洞了。
### 使用相同的值
由于攻击者可以在两次fetch之间更改数据，所以当两次fetch都使用相同的数据时就会引发漏洞。如果开发人员只使用其中一次fetch获取的数据，就可以避免问题。大多数double
fetch最终都不会导致漏洞，因为它们通常只使用第一次fetch获取的数据。
### 覆盖数据
还有一些情况需要获取数据并使用两次，在这种情况下消除漏洞的一种方法是用第一次获取的头部覆盖第二次获取的头部。即使攻击者在两次fetch之间更改了头部，更改也不会产生影响。
### 比较数据
在使用前比较第一次fetch得到的数据和第二次fetch得到的数据。如果数据不相同，则必须中止操作。
### 同步fetch
可以使用锁或临界区这样的同步方法来保证两个不可分割操作的原子性。只要我们保证在两次fetch之间不能更改获取的值，那么就不会出现错误。但是，由于在关键部分引入了同步，这种方法会对内核造成性能损失。
## 总结
在IEEE S&P 2018的一篇论文Precise and Scalable Detection of Double-Fetch Bugs in OS
Kernels中作者开发了一个名为DEADLINE的工具，同样基于静态方式从Linux/FreeBSD内核中发掘了多个未知的double
fetch漏洞。首先使用静态分析收集内核代码中的multi-read操作，并对每一组有关联的multi-read进行符号化执行检查(符号化执行在LLVM
IR层面上进行)，确定是否满足double-fetch的形式化定义，一定程度上减少了本文中的工具带来的大量误报的情况。  
源代码：  
论文地址：  
论文解读：  
有兴趣的读者可以自行查阅。  
因为内核源码的变动和人工分析可能存在的疏忽，大家现在拿着这些工具去扫内核源码可能还是会扫出来一些东西的，有兴趣的读者可以自己尝试。不过我审计了一遍扫描的结果，没有发现什么有意思的问题。  
当然静态匹配的方法也不仅仅只能挖掘double fetch漏洞，如果发现了一个漏洞我们可以尝试用静态匹配的方法查找还有没有类似的漏洞模式。比如在[case
study: Searching for a vulnerability pattern in the Linux
kernel](https://a13xp0p0v.github.io/2019/08/10/cfu.html "case study: Searching
for a vulnerability pattern in the Linux kernel")这篇博客中作者首先通过syzkaller
fuzz出了一个调用copy_from_user函数时目的地址和源地址写反了的bug，然后作者先后尝试使用Semmle
QL和coccinelle在内核中搜索同样的漏洞模式，最后找到了两个类似的漏洞。  
之前大家分享的bochspwn采用动态方式挖掘double fetch漏洞，而这篇文章和大家分享的工具采用静态方式挖掘double
fetch漏洞。简单总结一下两种方式的优劣。  
1.动态挖掘由于已经导致了内核崩溃，所以大概率可以复现写出POC；静态匹配或多或少存在误报的情况，需要花费大量时间进行人工分析，并且不一定可以复现写出POC。在这种情况下，我们不一定能说服开发者修复问题。DEADLINE发现的一个double
fetch就因为开发者认为虽然存在这样的条件竞争但是实际上并不能造成什么危害所以没有修复。从这一点上看动态挖掘占优势。  
2.静态匹配只适用于开源系统，并且也不能发现编译优化等更深层次的原因导致的double
fetch漏洞；而动态挖掘适用于开源系统和非开源系统，能够发现编译优化等深层次的原因导致的double
fetch漏洞。但是动态挖掘需要用到其它fuzzer辅助提高代码覆盖率，而静态匹配能够扫描所有的源代码。从这一点上看两者各有优劣。  
大家可以再思考一下windows系统的double
fetch漏洞挖掘就真的不可以采用静态匹配的方法了么？在IDA中加载符号文件F5也能得到大致可以阅读的代码，而windows系统的double
fetch漏洞也是存在一定模式的。当然这只是我一个突发奇想，大家有兴趣可以朝这个方向探索。