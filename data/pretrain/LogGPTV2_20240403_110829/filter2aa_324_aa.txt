JVM类加载器与双亲委派
学习视频：学习视频
类的生命周期
一个类从加载到jvm内存，到从jvm内存卸载，生命周期可分为七个阶段。
1. 加载(Loading)：classpath，jar包，网络，磁盘位置下的类的class以二进制字节流读进来，在内存
中生成一个代表这个类的Class类对象放入元空间。可以自定义类加载器。
2. 验证(Verification)：验证Class文件的字节流中包含的信息是否符合java虚拟机规范
3. 准备(Preparation)：类变量赋默认初始值
4. 解析(Resolution)：把符合引用翻译为直接引用
5. 初始化(Initialization)
6. 使用(Using)
7. 卸载(Unloading) 
类加载器
什么是类加载器
在类加载阶段，通过一个类的全限定名来获取描述该类的二进制字节流的这个动作的‘代码’被称
为‘类加载器’，这个动作可以自动有实现
jvm有哪些类加载器
1. 启动类（根）加载器：（Bootstrap Classloader），使用C++实现，是虚拟机自身的一部分
2. 其他类加载器：由java语言实现，全部继承自抽象类 java.lang.CLassLoader
3. jdk的三层类加载结构 
不同类加载器加载哪些文件
1. 启动类加载器：\jre\lib\rt.jar,resources.jar,charsets.jar，被-Xbootclasspath参数
所指定的路径中存放的类库
2. 扩展类加载器：\jre\lib\ext，被java.ext.dirs系统变量所指定的路径中所有的类库。
3. 应用程序类加载器(Application Classloader)：系统类加载器，加载用户类路径（classPath）上所
有的类库。
注意：三层加载器不是类的继承关系。 appclassloader 和 extclassloader 继承自
urlclassload ，二者之间没有继承关系。 
package com;
public class example {
    public static void main(String[] args) {
        example example = new example();
        Class aClass = example.getClass();
双亲委派模型
当尝试加载 java.lang.String 类的时候，首先是 App ClassLoader 委派给 Ext 
ClassLoader ，然后 Ext ClassLoader 也不加载而是委派给 BootStrap ClassLoader 进行加
载，之后 Bootstrap Loader 尝试加载，如果加载失败再交还 Ext classLoader 进行加载，如果
依然失败再交给 App Classloader 。
打破双亲委派模型
        ClassLoader classLoader = aClass.getClassLoader();
        System.out.println(classLoader); //AppClassLoader
        System.out.println(classLoader.getParent());//ExtClassLoader
        System.out.println(classLoader.getParent().getParent());//null  1. 不存在
或java程序获取不到，根加载器使用CPP系的，无法获取
        System.out.println(classLoader.getParent().getParent().getParent());
    }
}
/////////////////////////////////////////////////
sun.misc.Launcher$AppClassLoader@18b4aac2
sun.misc.Launcher$ExtClassLoader@4554617c
null
Exception in thread "main" java.lang.NullPointerException
   at com.example.main(example.java:14)
自定义类加载器，重写其中的loadClass方法，使其不进行双亲委派。 
当调用 super.loadClass(var1, var2) 去找父类加载的时候，最终找到的是
java.lang.CLassloader ，再这个 java.lang.CLassloader#loadClass() 方法中实现了双亲
委派。
public Class loadClass(String var1, boolean var2) throws 
ClassNotFoundException {
            int var3 = var1.lastIndexOf(46);
            if (var3 != -1) {
                SecurityManager var4 = System.getSecurityManager();
                if (var4 != null) {
                    var4.checkPackageAccess(var1.substring(0, var3));
                }
            }
            if (this.ucp.knownToNotExist(var1)) {
                Class var5 = this.findLoadedClass(var1);
                if (var5 != null) {
                    if (var2) {
                        this.resolveClass(var5);
                    }
                    return var5;
                } else {
                    throw new ClassNotFoundException(var1);
                }
            } else {
                return super.loadClass(var1, var2); //调用父类加载器
（java.lang.CLassloader）
            }
        }
protected Class loadClass(String name, boolean resolve)
        throws ClassNotFoundException
    {
if (parent != null) 会判断这个父加载器是否存在，如果存在，则使用父加载器，其中注意的
是parent是jvm指定的，并不是子父类的继承关系。
类加载过程
1、首先是调用 public Class loadClass(String name) 方法，通过public方法调用保护方
法 protected Class loadClass(String name, boolean resolve)  
2、在protected loadClass方法中，第406行会调用一个findLoadedClass方法判断当前类是否已经
加载。
如果类已经加载，直接返回当前类的类对象。
3、如果创建当前ClassLoader时传入了父类加载器(new ClassLoader(父类加载器))就使用父类加载
器加载TestHelloWorld类，否则使用JVM的Bootstrap ClassLoader加载。 
4、如果通过类加载器没有办法加载类，则会通过findClass方法尝试加载类。 
5、如果当前的ClassLoader没有重写findClass方法，则会直接返回类不存在。跟进findClass方法
进行查看。
        synchronized (getClassLoadingLock(name)) {
            // First, check if the class has already been loaded
            Class c = findLoadedClass(name);
            if (c == null) {
                long t0 = System.nanoTime();
                try {
                    if (parent != null) {
                        c = parent.loadClass(name, false);
                    } else {
                        c = findBootstrapClassOrNull(name);
                    }
                } catch (ClassNotFoundException e) {
                    // ClassNotFoundException thrown if class not found
                    // from the non-null parent class loader
                }
                if (c == null) {
                    // If still not found, then invoke findClass in order
                    // to find the class.
                    long t1 = System.nanoTime();
                    c = findClass(name);
                    // this is the defining class loader; record the stats
                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - 
t0);
 sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);
                    sun.misc.PerfCounter.getFindClasses().increment();
                }
            }
            if (resolve) {
                resolveClass(c);
            }
            return c;
        }
    }
如果当前类重写了findClass方法并通过传入的com.anbai.sec.classloader.TestHelloWorld类名找
到了对应的类字节码，那么应该调用defineClass方法去JVM中注册该类。
6、如果调用loadClass的时候传入的resolve参数为true，那么还需要调用resolveClass方法链接类,默认
为false。 
7、返回一个JVM加载后的java.lang.Class类对象
自定义ClassLoader
java.lang.ClassLoader是所有的类加载器的父类，java.lang.ClassLoader有非常多的子类加载
器，比如我们用于加载jar包的java.net.URLClassLoader其本身通过继承java.lang.ClassLoader
类，重写了findClass方法从而实现了加载目录class文件甚至是远程资源文件。
package com.sec.classloader;
import java.lang.reflect.Method;
/*
尝试自定义ClassLoader
如果一个TestHelloWorld类根本不存在，我们可以通过自定义类加载器重写findCLass方法，然后调用
defineClass方法
的时候传入TestHelloWorld类的字节码，来像JVM中定义一个TestHelloWorld类，
最后通过反射机制就可以调用TestHelloWorld类的hello方法了。
package com.anbai.sec.classloader;
 * Creator: yz
 * Date: 2019/12/17
//public class TestHelloWorld {
//
//    public String hello() {
//        return "Hello World~";
//    }
//
//}
*/
public class selfClassLoader extends ClassLoader {
    private static String 
testClassName="com.anbai.sec.classloader.TestHelloWorld";
    //testHelloWorld类的字节码
    private static byte[] testClassBytes = new byte[]{
            -54, -2, -70, -66, 0, 0, 0, 51, 0, 17, 10, 0, 4, 0, 13, 8, 0, 14, 7, 
0, 15, 7, 0,
            16, 1, 0, 6, 60, 105, 110, 105, 116, 62, 1, 0, 3, 40, 41, 86, 1, 0, 
4, 67, 111, 100,
            101, 1, 0, 15, 76, 105, 110, 101, 78, 117, 109, 98, 101, 114, 84, 
97, 98, 108, 101,
            1, 0, 5, 104, 101, 108, 108, 111, 1, 0, 20, 40, 41, 76, 106, 97, 
118, 97, 47, 108,
            97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 10, 83, 
111, 117, 114, 99,
利用自定义类加载器我们可以在webshell中实现加载并调用自己编译的类对象，比如本地命令执
行漏洞调用自定义类字节码的native方法绕过RASP检测，也可以用于加密重要的Java类字节码(只
能算弱加密了)。
loadClass，findClass，defineClass区别
1. loadClass主要进行类加载的方法，默认的双亲委派机制在这个方法中实现，当我们需要打破双亲
委派机制时可以通过重写loadClass方法
2. findClass根据名称或位置加载.class字节码
            101, 70, 105, 108, 101, 1, 0, 19, 84, 101, 115, 116, 72, 101, 108, 
108, 111, 87, 111,
            114, 108, 100, 46, 106, 97, 118, 97, 12, 0, 5, 0, 6, 1, 0, 12, 72, 
101, 108, 108, 111,
            32, 87, 111, 114, 108, 100, 126, 1, 0, 40, 99, 111, 109, 47, 97, 
110, 98, 97, 105, 47,
            115, 101, 99, 47, 99, 108, 97, 115, 115, 108, 111, 97, 100, 101, 
114, 47, 84, 101, 115,
            116, 72, 101, 108, 108, 111, 87, 111, 114, 108, 100, 1, 0, 16, 106, 