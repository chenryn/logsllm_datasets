**作者：Joey@天玄安全实验室**  
**原文链接：**
## 前言
最近开始分析Office漏洞，拿到CVE-2017-11826的样本后发现无法在Office2010上成功执行，打算分析并改造该EXP。参考了许多资料，结合自己的理解写了本文，供大家学习和参考。
## 漏洞分析
### 分析环境
    OS:                 Win7 x64 SP1
    Office:             Ofiice 2010 x86
    Image name:         wwlib.dll
    Timestamp:          Sat Mar 27 23:37:07 2010 (4BAE2623)
    CheckSum:           0127F568
    ImageSize:          0127A000
    File version:       14.0.4762.1000
    Product version:    14.0.4762.0
### 静态分析
在rtf文档中搜索object，发现嵌入了3个ole对象：
第一个对象的CLSID为`D5DE8D20-5BB8-11D1-A1E3-00A0C90F2731`，在注册表搜索后发现该对象位于`C:\Windows\SysWOW64\msvbvm60.dll`，而该dll是没有ASLR的。
通过ProcessExplorer发现word打开rtf文档后确实加载了msvbvm60.dll，且该dll无ASLR，说明该ole对象的作用是绕过ASLR。
使用`rtfobj.py -s all`提取ole对象：
第一个对象经过上面的分析是用于绕过ASLR的，第二和第三个都是.doc文档，使用压缩软件直接打开第二个文档，文档结构如下：
    │  [Content_Types].xml
    │  
    ├─docProps
    │      app.xml
    │      core.xml
    │      
    ├─word
    │  │  document.xml
    │  │  fontTable.xml
    │  │  settings.xml
    │  │  styles.xml
    │  │  webSettings.xml
    │  │  
    │  ├─activeX
    │  │  │  activeX1.bin
    │  │  │  activeX1.xml
    │  │  │  activeX2.xml
    │  │  │     ······
    │  │  │  activeX40.xml
    │  │  │  
    │  │  └─_rels
    │  │          activeX1.xml.rels
    │  │          activeX2.xml.rels
    │  │                ······
    │  │          activeX40.xml.rels
    │  │          
    │  ├─media
    │  │      image1.wmf
    │  │      
    │  ├─theme
    │  │      theme1.xml
    │  │      
    │  └─_rels
    │          document.xml.rels
    │          
    └─_rels
            .rels
可以看出使用了40个activeX.xml文件，文件内容如下：
40个xml文件内容一致，加载了CLSID为{00000000-0000-0000-0000-000000000001}的对象，然而系统中并没有这个对象，所以并不会加载任何对象，这么做是为了提高堆喷的效率，具体原理可查看[SPRAYING
THE HEAP IN SECONDS USING ACTIVEX CONTROLS IN MICROSOFT
OFFICE](https://www.greyhathacker.net/?p=911)一文。
而40个activeX.xml.rels的内容也完全一致：
都指向了activeX1.bin文件，因此会将activeX1.bin在内存中加载40次，以此达到堆喷的目的。
activeX1.bin文件结构如下：
    activeX1.bin
    │ -文件头 
    │ -数据
    │    │---CB 40 94 72 EC 83 88 08 CB 40 94 72 EC 83 88 08
    │    │                      ······
    │    │---CB 40 94 72 EC 83 88 08 CB 40 94 72 EC 83 88 08
    │    │---shellcode
    │    │---2B 0E 98 72 2B 0E 98 72 2B 0E 98 72 2B 0E 98 72
    │    │                      ······
    │    │---2B 0E 98 72 2B 0E 98 72 2B 0E 98 72 2B 0E 98 72
    │    │                      ······
    │    │---CB 40 94 72 EC 83 88 08 CB 40 94 72 EC 83 88 08
    │    │                      ······
看结构似乎是滑板指令加shellcode，待调试验证。
第三个文档结构如下：
    │  [Content_Types].xml
    │  
    ├─docProps
    │      app.xml
    │      core.xml
    │      
    ├─word
    │  │  document.xml
    │  │  endnotes.xml
    │  │  fontTable.xml
    │  │  footnotes.xml
    │  │  settings.xml
    │  │  styles.xml
    │  │  webSettings.xml
    │  │  
    │  ├─theme
    │  │      theme1.xml
    │  │      
    │  └─_rels
    │          document.xml.rels
    │          
    └─_rels
            .rels
document.xml的内容如下：
观测到` lm m wwlib
    start    end        module name
    71ed0000 7314a000   wwlib      (export symbols)       C:\PROGRA~2\MICROS~1\Office14\wwlib.dll
    0:000> ? 723aa16b-71ed0000
    Evaluate expression: 5087595 = 004da16b
重新打开漏洞文档，`bp wwlib+004da16b`下断：
步过两次后执行到如图所示位置时，查看eax所在的内存：
发现和在文档3中的字符串一致，接着查看eax+44，对应的正是异常触发时eax的值`088888ec`。
但在xml文件中，字符串中的异常字符的十六进制为`e8a3ace0a288`：
在文件中显示的格式是Ascii，然而在内存中显示的是Unicode，于是将文件中的字符以utf-8格式转换为十六进制正是eax的值`088888ec`：
说明通过修改该字符串可以控制eax的值，进而控制eip。
在ida中找到奔溃函数为sub_31A55CE6，发现变量v3是宽字节字符串，位于arg2+0x18，变量v4是一个长度，位于arg2+0x1c
在windbg设置崩溃函数起始点打印v3为字符串，长度为v4：`bp wwlib+385ce6 "du poi(poi(esp+8)+18)
Lpoi(poi(esp+8)+1c); g;"`
可以看到v3就是xml文件中的标签，在解析到idmp标签后程序崩溃，然而并没有看到font标签，于是寻找到崩溃函数的父函数sub_3170FA5A
崩溃函数arg2的值为edi，而edi的值为父函数的arg2：
于是在父函数和崩溃函数同时下断，查看标签解析情况：
    bp wwlib+3fa5a ".printf \"Parent_Func:  \"; du poi(poi(esp+8)+18) Lpoi(poi(esp+8)+1c); g;"
    bp wwlib+385ce6 ".printf \"Crash_Func:  \"; du poi(poi(esp+8)+18) Lpoi(poi(esp+8)+1c); g;"
在父函数成功解析到font标签，猜测因为font标签未闭合而导致崩溃函数解析标签出错产生漏洞，修改了xml文件闭合了font标签：