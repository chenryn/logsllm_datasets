# 【技术分享】利用EMET漏洞来禁用EMET保护
|
##### 译文声明
本文是翻译文章，文章来源：安全客
原文地址：[https://www.fireeye.com/blog/threat-research/2016/02/using_emet_to_disabl.html?utm_source=tuicool&utm_medium=referral](https://www.fireeye.com/blog/threat-research/2016/02/using_emet_to_disabl.html?utm_source=tuicool&utm_medium=referral)
译文仅供参考，具体内容表达以及含义原文为准。
**翻译：**[ **Ox9A82**](http://bobao.360.cn/member/contribute?uid=2676915949)
**预估稿费：160RMB（不服你也来投稿啊！）**
**投稿方式：发送邮件至linwei#360.cn，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投稿**
Microsoft开发的增强减灾体验工具包（EMET）是一种为用户模式程序添加安全缓解措施的项目，而不是内置于操作系统中的程序。
它是作为动态链接库（DLL）在“受保护”程序中运行的，通过对代码进行各种更改，以使得漏洞利用变得更加困难。
在过去的研究和实际攻击中已经观察到了EMET缓解措施被绕过的情况[2,3,4,5,6,7,8]。
通常，Microsoft通过更改或添加缓解措施来作为应对，以击败任何现有的绕过手段。
EMET旨在提高exploit开发者的开发成本，而不是一个“傻瓜防御利用缓解解决方案”[1]。
因此，毫不奇怪，在受保护程序的进程空间内具有读/写能力的攻击者可以通过逐条的击败每个缓解措施来绕过EMET [2]。
如果攻击者可以通过很少的工作来绕过EMET，那么就已经挫败了EMET增加expoit开发者成本的目的。我们在禁用EMET的新技术部分就提出了一个这样的技术。Microsoft已经发布了一个修补程序来解决EMET
5.5中的此问题。
在讲解这种新技术之后，我们又讲述了一些以前的用于绕过或者禁用EMET的技术。如果想知道EMET具体包含了什么样的保护，请参见附录。
**  
**
**一种可以禁用EMET的新技术**
EMET将emet.dll或emet64.dll（取决于是x64还是x86）注入到每个受保护的进程中，该进程安装Windows API
Hook（由DLL例如kernel32.dll、ntdll.dll和kernelbase.dll导出的函数）。
这些钩子使EMET能够分析关键API中的任何代码调用，并确定它们是否合法。 如果代码被认为是合法的，EMET挂钩代码跳回到请求的API，否则就会触发异常。
然而，在EMET中存在着负责卸载EMET的代码。这些代码系统地禁用EMET的保护并将程序设置回到以前未受保护的状态。只需定位并调用此函数即可完全的禁用EMET。
在EMET.dll v5.2.0.1中，此函数位于偏移量0x65813。 跳转到此函数将导致后续调用，从而删除EMET已安装的Hook。
此功能之所以存在，是因为emet.dll需要包含从进程干净退出的代码。而且很方便的是，它可以从DllMain被调用。
DllMain的函数原型如下：
    BOOL WINAPI DllMain(
      _In_ HINSTANCE hinstDLL,
      _In_ DWORD     fdwReason,
      _In_ LPVOID    lpvReserved
    );
第一个参数是此DLL模块加载到的基地址。 第二个参数提供了PE加载器在DLL加载或卸载时使用的参数，1或0。
如果fdwReason为1，则DLL知道它正在加载和初始化。
如果fdwReason参数为0（DLL_PROCESS_DETACH），则emet.dll会执行卸载代码，假设Dll被卸载那么他就会删除它自己设置的钩子和异常处理程序，从而简单地删除EMET的检查机制。
注意，这不会从内存中删除EMET模块，它只是确保其所有的保护都被禁用。
这种特性可以存在于任何的检测产品中，因为它依赖于用户空间的Hook，并且为了保证产品不会挂掉，必须有一个卸载例程来去除所有之前设置的保护检查。
EMET的DllMain可以通过一个小的ROP
gadgets链找到（下一节会讲这个）。它只是跳到DllMain，并且带着正确的参数去卸载EMET设置的保护检查。
BOOL WINAPI DllMain (GetModuleHandleA("EMET.dll") , DLL_PROCESS_DETACH ,
NULL);
GetModuleHandleA函数并没有被EMET Hook，因为EMET不认为它是关键的Windows API。
我们使用这个函数来获取emet.dll的基地址。 由于PE头位于基址，我们必须使用它来传递给DllMain正确的第一个参数。
**禁用EMET – 详解**
删除EMET钩子的功能代码位于偏移量0x27298处（相对于模块基地址），如下图所示。
首先，函数循环遍历所有Detoured_API结构体，并且为每个关联的Detoured_API_Config结构体清零DetourFunctionPrologue域（下面展示了结构体的结构）。
Detoured_API结构体（如下所述）是一个链接列表，用于跟踪API是否主动绕行（就是是否使用Hook），并且指向有DetouredAPIConfig：
    struct Detoured_API {
    BOOL isActive;                                 // 是否启用？，值为1时启用
    PVOID DetouredAPIConfig;             // 指向Detoured_API_Config结构的指针
    PVOID nextDetouredAPI;                 // 指向下一个Detoured_API结构的指针
    };
     Detoured_API_Config结构（部分显示如下）存储关于绕行和其原始API的信息。
    struct Detoured_API_Config {
    PVOID DetouredWindowsAPI;          //指向绕行的Windows API的指针
    PVOID EMETDetouringFunction;      // 指向EMET保护实现的函数
    PVOID DetouredFunctionPrologue;  // 指向Windows API序列的指针
    ...
    }
对于每个Hook_Config，Patch_Functions恢复原始API的序列，如图2所示.Patch_Functions从EMETDetouringFunction检索原始函数序列的大小和地址，并将值传递给memcpy。
在每个API恢复到其原始状态后，Patch_Functions将ptrEffectiveFunction更改为直接指向原始API。
在循环遍历所有的detoured API并使用memcpy修补它们之后，你会发现Windows
API中的所有跳转路径都已经消失了，如下面两张图所示，分别是在修复前后。
修复前
修复后
然后EMET会紧接着禁用EAF和EAF+保护，在偏移量为0x609D0的函数中，EMET将清零并重新初始化CONTEXT结构，并操作调试寄存器（如下图所示）。
然而，在函数结束时，EMET又调用了NtSetContextThread函数，这会导致调零寄存器置零，因此EAF
和EAF+保护都会被禁用掉。
最后，在偏移为0x60FBF的函数结束时，EMET调用了位于偏移0x60810的函数，那个函数又会调用RemoveVectoredExceptionHandler来删除之前被AddVectoredExceptionHandler函数添加的向量化异常处理（VEH）。
**禁用EMET – 通过ROP实现**
这里使用一个以前的漏洞CVE-2011-2371来演示，目前这个漏洞已经被修补了。我们在现有的漏洞exp上添加了rop
gadgets，然后在启用EMET保护的情况下执行。当我们的ROP
gadgets使用参数（EMET.dll基地址，0，0）来调用EMET.dll的DllMain函数之后，我们返回继续执行，所有放置在Windows API
Hook中的跳转路径与EAF和EAF+保护一起都消失了。
    MOV ESP,44090000 # ~ # RETN // STACKPIVOT
    POP EAX # RETN // STORE GetModuleHandleA IAT POINTER INTO EAX
    MOZCRT19+0x79010 // MOZCRT19!_imp__GetModuleHandleA
    MOV EAX,DWORD PTR DS:[EAX] # RETN   // GET GetModuleHandleA ADDRESS
    PUSH EAX # RETN # // Call GetModuleHandleA("EMET.dll")
    Return Address XOR EDX,EDX # RETN   // ZERO OUT ECX
    0x44090108 // "EMET" STRING ADDRESS (GetModuleHandleA PARAMETER)
    OR EDX,EAX # ~ # RETN // STORE EMET.dll EMET_BASE_ADDRESS INTO EDX
    POP EBX # RETN // STORE DllMain() PARAMETER1 ADDRESS (i.e. hinstDLL) INTO EBX
    0x440900A4 // DllMain() PARAMETER1 (i.e. hinstDLL) ADDRESS
    MOV DWORD PTR DS:[EBX],EAX # ~ # RETN // hinstDLL PATCH WITH EMET_BASE_ADDRESS
    POP ECX # RETN # // STORE 0x3C (i.e. IMAGE_DOS_HEADER) INTO ECX
    0x0000003C // IMAGE_DOS_HEADER OFFSET
    ADD ECX,EDX # ADD EAX,ECX # ~ # RETN // EAX = EMET_BASE_ADDRESS+0x3C
    MOV EAX,DWORD PTR DS:[EAX] # RETN // GET PE_HEADER OFFSET
    POP ECX # RETN # // STORE AddressOfEntryPoint OFFSET INTO ECX
    0x00000028 // AddressOfEntryPoint OFFSET
    ADD ECX,EDX # ADD EAX,ECX # ~ # RETN // EAX = EMET_BASE_ADDRESS+PE_HEADER+0x28
    MOV EAX,DWORD PTR DS:[EAX] # RETN // GET DllMain() OFFSET
    POP ECX # RETN # // ZERO OUT ECX
    0x00000000