title:DRIP: A framework for purifying trojaned kernel drivers
author:Zhongshu Gu and
William N. Sumner and
Zhui Deng and
Xiangyu Zhang and
Dongyan Xu
DRIP: A Framework for Purifying
Trojaned Kernel Drivers
Zhongshu Gu, William N. Sumner, Zhui Deng, Xiangyu Zhang, Dongyan Xu
Department of Computer Science and CERIAS
Purdue University
West Lafayette, IN, USA, 47907-2107
{gu16, wsumner, deng14, xyzhang, dxu}@cs.purdue.edu
Abstract—Kernel drivers are usually provided in the form
of loadable kernel extensions, which can be loaded/unloaded
dynamically at runtime and execute with the same privilege as
the core operating system kernel. The unrestricted security access
from the drivers to the kernel is nevertheless a double-edged
sword that makes them susceptible targets of trojan attacks.
Given a benign driver, it is now easy to implant malicious logic
with existing hacking tools. Once implanted, such malicious logic
is difﬁcult to detect.
In this paper we propose DRIP, a framework for detecting and
eliminating malicious logic embedded in a kernel driver through
iteratively eliminating unnecessary kernel API invocations from
the driver. When provided with the binary of a trojaned driver,
DRIP generates a puriﬁed driver with benign functionalities
preserved and malicious ones eliminated. Our evaluation shows
that DRIP successfully eliminates malicious effects of trojaned
drivers in the system, with the puriﬁed drivers maintaining or
even improving their performance over the trojaned drivers.
Keywords—System Security; Kernel Drivers; Trojan Detection;
I.
INTRODUCTION
In state-of-the-art design of commodity operating systems,
drivers usually take the form of loadable kernel extensions.
Privileged users could load them dynamically to support new
devices or extend functionalities of a base kernel at runtime.
They hide the complexity of interacting with hardware devices
and present a neat abstract interface for other kernel compo-
nents. To achieve these properties, drivers execute with the
same privilege as the OS kernel, which makes them susceptible
targets of malicious attacks. Unlike the kernel, which is either
built by trusted companies or with source code opened to the
public, kernel drivers could be provided by third-party vendors
as a binary blob.
Given a binary driver, it is difﬁcult to tell whether malicious
logic is embedded inside it. From customers’ perspectives,
it may work correctly with no suspicious symptoms, but the
embedded malicious code [1], [2] may have already collected
conﬁdential information and cloaked its ﬁngerprint under the
cover of a legitimate driver. Even if we assume that vendors
only perform the functionalities as they claim, there still exist
many binary driver infection techniques [3]–[8] that could
implant malicious logic into benign drivers and transform them
into trojaned drivers. When the trojaned driver is loaded into
an operating system, the hidden malicious code can be loaded
simultaneously with the benign code. Hence the challenge
is: How can we identify malicious/undesirable logic in the
driver and eliminate it at binary level without impairing driver’s
normal operations?
Existing research efforts to protect device drivers can be
divided into two categories, online monitoring and ofﬂine
proﬁling. Online approaches [9]–[12] were proposed to isolate
the driver in a protection domain and enforce external runtime
checks on its execution. They either cannot target intentionally
malicious drivers or require protection from the underlying
hypervisor. All of them add non-trivial performance overhead
due to the realtime monitoring. Ofﬂine approaches [13], [14]
are designed to exercise the driver during testing to ﬁnd bugs
and vulnerabilities, but they are still incapable of distilling
benign operations and eliminating malicious behaviors in the
driver.
We develop a system called DRIP1 to address this problem
from a different angle. Based on our observation, we ﬁnd that
malicious/undesirable logic embedded inside many trojaned
kernel drivers is orthogonal to drivers’ normal functionalities
and most such logic achieves malicious effects through inter-
acting with the base kernel through kernel API invocations.
Removing these interactions in malicious code will not affect
the correct execution of the driver and it can also neutralize the
malicious behavior. We leverage test suites for the semantic-
level behavior of applications [15]–[17] in order to ensure that
the driver works correctly when used by those applications.
By testing the different application level behaviors, we simul-
taneously test and ensure all of the underlying benign driver
functionality that applications use.
We record interactions between a subject driver and the
kernel during testing. Then we try to select and remove a
subset of driver-kernel interactions to test whether this removal
operation will violate the correct execution of the test suite. We
iterate this testing process until all unnecessary interactions are
removed, and consequently we can generate a puriﬁed driver
with malicious/undesirable behaviors removed.
This paper makes the following contributions:
1)
2)
A testing approach for differentiating between benign
and malicious logic of a trojaned driver. DRIP only
requires a high-level test suite to cover and retain core
legitimate functionalities of the driver.
A Test-and-Reduce algorithm to incrementally reduce
unnecessary kernel-driver interactions and extract a
1DRIP stands for “DRIver Puriﬁer”
978-1-4799-0181-4/13/$31.00 ©2013 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:46:27 UTC from IEEE Xplore.  Restrictions apply. 
3)
minimal subset to ensure the correct execution of the
driver.
A clustering mechanism to group kernel-driver in-
teractions according to current execution context. It
provides additional semantic information to speed up
the removal of kernel API invocations in the Test-
and-Reduce algorithm.
The rest of this paper is organized as follows. Section II
presents the motivation and overview of the DRIP framework.
Section III provides the detailed design of DRIP. Section
IV gives functional studies of some representative cases and
evaluates the performance. Section V discusses the limitations
and future work. Section VI describes related work and we
conclude in Section VII.
II. OVERVIEW OF DRIP FRAMEWORK
A. Goals and Assumptions
The goal of DRIP is to purify a device driver with ma-
licious/undesirable logic embedded that may jeopardize the
base kernel. The newly generated driver should have the
benign functionalities of a vanilla driver with malicious effects
eliminated.
Our approach is based on the assumption that the trojaned
driver includes the functionalities of a benign driver. The
malicious logic is parasitically attached to the benign logic
within the driver’s binary and executes persistently when the
driver is loaded. We do not target time-bomb malware in which
the malicious functions can only be triggered at a speciﬁc
time because the malicious logic may not be active during
our testing. This problem can be addressed by using symbolic
execution [18] to cover more execution paths. There are some
existing efforts [14], [19], [20] to apply symbolic execution to
driver testing and we can leverage them to complement our
work. In addition we do not target the malicious code that
interacts with kernel through direct memory manipulation. We
could consider kernel memory accesses as part of driver-kernel
interactions and plan to include this feature in our future work.
We assume that a test suite is available that covers the
higher level behaviors of a speciﬁc application. As previously
mentioned, testing those behaviors also means that the test
suite covers the necessary driver functionality that they depend
upon. Because we test the application level behaviors, our
technique ensures that the application continues to behave
correctly with the puriﬁed driver. This assumption is reason-
able for current software development processes, in which
developers often create test cases from requirements even
before implementation as part of the design phase. We can also
leverage existing test generation techniques [18], [20], [21] to
automatically synthesize test cases.
B. Approach Overview
For a particular application and the environment in which it
executes, we need to ensure that the application continues to
behave correctly. This includes correctly executing any low-
level behaviors in the driver that the application relies upon
and triggers during its operation. We can do this by treating
the driver like a black box, without considering the speciﬁcs of
its implementation. For example, we might examine a network
interface controller (NIC) driver. We can cover the functional-
ity of an FTP server through test cases from curl-loader [17]. If
we can ensure the correct execution of curl-loader when using
a puriﬁed NIC driver, then we have empirically preserved the
functionalities of the driver needed by curl-loader. In general,
covering the tests of an application will also cover and preserve
the low level driver functionality necessary for that application.
Based on our experience of analyzing conventional rootkits,
we gain the insight that the common goals of malicious code
in kernel space are to retrieve information from base kernel
and manipulate kernel data to hide footprints of user space
malware. It is difﬁcult to generate a completely self-contained
malicious module to achieve all these effects without invoking
kernel APIs. When we face a trojaned kernel driver,
the
execution of malicious code is mixed with the execution of
benign code at runtime. Benign code of the driver will also
invoke kernel APIs to request services from base kernel. So
we need to differentiate benign kernel API invocations from
malicious ones. With the availability of a test suite covering
benign functionalities of the driver, we can iteratively eliminate
some of the kernel API invocations at runtime to test whether
it will violate the correct execution of the test suite. If the
removal will not affect the benign behavior, we consider these
invocations unnecessary, and they can be removed from the
binary.
Based on this observation, we ﬁrst take a snapshot of the
system and execute the test suite from a deterministic state.
We record all kernel API invocations from the driver to the
kernel during testing, which can be captured as control ﬂow
transitions across the boundary of driver’s loading memory
region. Then we try to restore to the snapshot, remove a
subset of these invocations in memory, and re-execute the
same test suite to test whether the removal will affect its
correct execution. We chop the removal set of invocations
iteratively until all the invocations left are critical to the correct
execution of the driver. Because benign functionalities of the
driver are covered by the test suite, the removal of kernel
API invocations within benign code will fail the test suite,
so we consider them critical and preserve them. On the other
hand, because malicious code embedded is either orthogonal
or complementary to core functionalities of its “host” driver,
removal of invocations within malicious code will not violate
the correct execution of the test suite, and they are considered
unnecessary. Finally we can generate a puriﬁed driver with all
the unnecessary invocations removed, and the malicious effects
from driver are eliminated concomitantly.
C. Procedure Overview
Figure 1 depicts the overall workﬂow of DRIP to demon-
strate how to purify a trojaned driver. We divide the whole pro-
cedure into three phases, i.e., proﬁling, testing and rewriting, as
in Figure 1(a). These three phases are transparent to each other.
We give a brief description of the speciﬁc functionality of
each phase ﬁrst and will elaborate upon them in the following
section.
Before starting the purifying process, we construct
the
Testing Environment in Figure 1(b) and prepare the binary ﬁle
of the trojaned driver. In the proﬁling phase, we execute the
test suite to trigger the execution of this driver, record kernel
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:46:27 UTC from IEEE Xplore.  Restrictions apply. 
underlying emulator (we use QEMU [22] in our environment)
as the analysis platform. We integrate our DRIP system as
a component into the emulator. In the guest VM, we load
the trojaned driver in the kernel space and monitor the code
execution within its loading memory region. We select or
synthesize an automated test suite for the target application to
cover the benign behavior of the subject driver and launch it
in the user space. In order to ensure that the test suite executes
from a deterministic state, we take a snapshot of the VM at
the time right before the test suite is about to run.
Communication Channel: If we pick up an existing test
suite, it would have no knowledge about the underlying system
including DRIP. However DRIP needs to make decisions
based on the current status of the test suite. So we design
a communication channel between the test suite and DRIP.
We can leverage special instructions like hypercall or cpuid,
to send signals to the underlying emulator. The emulator
can extract signals when translating these instructions. We
design 3 signals, TESTON, TESTSUCC, and TESTFAIL, which
respectively stand for the beginning of the test, the end of the
test with a successful result, and the end of the test with a
failing result. Then we embed the communication channel in
the test suite to send these signals at speciﬁc time instances.
B. Proﬁling Phase
In the proﬁling phase, we record all kernel API invoca-
tions/returns during the execution of the test suite. Because all
recorded invocations in different process contexts are mixed,
we design a technique called Context-Sensitive Clustering to
de-interleave invocations into clusters and label each cluster
with FuncEntry tag. After the recording and clustering of
invocations, we organize the runtime information captured into
the Proﬁling Data and transfer it to the next testing phase.
Tracking of Driver-Kernel Interactions: Because QEMU
can translate every instruction in the guest VM, we track the
execution of the driver through monitoring its program counter
at the granularity of a basic block. If the current basic block
is within the driver’s memory region and the previous one is
located outside, it means that control ﬂow transits from the
kernel into the driver. If the previous basic block is within the
driver’s region and the address of the current one is out of
the driver’s boundary, it indicates that the control ﬂow transits
from the driver into the kernel. Then all control ﬂow transitions
passing the driver boundary can be recorded. The transitions
between kernel and driver are either in the form of a call/jump
instruction or a ret instruction.
As mentioned earlier, we prepare a test suite for the subject