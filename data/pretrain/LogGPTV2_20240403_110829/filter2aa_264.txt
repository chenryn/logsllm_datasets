# 深入理解 Windows 字体解析引擎漏洞

**作者：王宇**

**会议：SyScan(+)360, 2012**

## 议题简介

### 关于作者
- 联系方式: [PI:EMAIL]

### 议题背景
在2011年12月，微软通过其月度安全更新修复了一个之前被Duqu恶意软件利用的Win32K内核漏洞。同年，在中国，网站后台数据库的安全性问题引起了广泛关注。本议题将从白盒视角详细探讨Win32K字体解析引擎的设计与实现，并深入分析Duqu 0-day漏洞的具体利用细节。

### 议题涵盖
- **字体解析引擎客户端接口** (Font Scaler Client Interface) 的背景、设计与实现。
- 展示如何在用户态实现字体引擎 (Font Scaler) 的客户端——即反内核化的示例。
- 作为系统内核态字体引擎的客户端，Win32K模块与其交互的方式——Win32K调用假设。
- Duqu 与 MS11-087 远程可执行漏洞。
- 字体引擎的进一步审计。

### 责任声明
...

## 从点阵字体到轮廓字体

### 启动扇区里的小游戏
- 演示：640*480*16色图形模式写方式二——写点
- 点阵位图的优点与缺点
- 轮廓字体的优点与缺点

### 数字字体的混沌时期
- 从复印机到PostScript页面描述语言，再到Xerox和Adobe
- 苹果公司的LaserWriter（1985年）
- 苹果公司自上世纪八十年代末开始研发自己的可缩放字体技术——Royal，这是TrueType的前身

### 两种流派，两种理念
- **PostScript Type 1**：三次贝塞尔曲线；“更智能”的字体，“更简单”的解释器
- **TrueType**：二次贝塞尔曲线；“更简单”的字体，“更复杂”的解释器

## 字体解析引擎客户端接口

### 引擎起源
- PostScript比Royal早六年
- Apple与Microsoft交换技术：Apple以TrueImage换取了Microsoft的PostScript克隆技术
- 内核化后，TrueType字体引擎实现在Win32K模块内部，Win32K也充当了字体引擎的客户端
- 引擎的导出接口是Font Scaler Client Interface

### 目标研究手段
- **Duqu 0-day**：激发了我的好奇心
- 静态逆向与动态跟踪
- 白盒分析：从宏观角度（引擎架构）和微观角度（代码笔误）

### 工具推荐
- **字体格式分析工具**：TTFDump (FontTools)
  - [链接](http://www.microsoft.com/typography/tools/tools.aspx)
- **字体调试工具**：TrueTypeViewer
  - [链接](http://home.kabelfoon.nl/~slam/fonts/truetypeviewer.html)

## 引擎的重要接口
- **Font Scaler Client Interface**
  - 表：Font Scaler Client Interface
  - 续表：Routine Prefix
  - 核心数据结构：fs_GlyphInputType, fs_GlyphInfoType, fs_SplineKey等
  - 图形状态核心结构：fnt_LocalGraphicStateType, fnt_ElementType, fnt_GlobalGraphicStateType

## 引擎的基本执行流程
- fs_OpenFonts
- fs_Initialize
- fs_NewSfnt
- fs_NewTransformation
- fs_NewGlyph
- fs_ContourGridFit
- fs_FindBitMapSize
- fs_ContourScan
- fs_CloseFonts
- fs_ContourNoGridFit

### 客户端 (Fuzz / Win32K) 与字体引擎的交互
- Phase 1 到 Phase 9

## 引擎的设计准则与背景推测
- 引擎最初的工作模式
- 内存使用策略
- “高内聚/低耦合” 或 “低内聚/高耦合”
- 时代的产物

## Win32K 的假设与 MS11-087
- 堆越界问题
- ulReusableMemoryOffset 与 pBitmapPtr2/pbyRead 机制
- Win32K PJ034 的假定
- GetSbitComponent usXOffset/usYOffset
- sfac_GetSbitBitmap 缺乏越界检测
- 潜藏多年的Bug

## 叹为观止的利用技术
- CJ_IN, CJ_0, CJ_4, CJ_OUT, CJ_3
- bInitInAndOut, PJ034, fnt_GlobalGraphicStateType
- 具体利用步骤

### 演示
- Duqu 与 MS11-087
- 字体引擎的更多审计

## MS11-087 的一个隐含问题
- GetSbitComponent 例程的无限递归
- 补丁细节：引入递归深度参数 a14
- EvaluateSpline 例程的递归条件
- 引擎内核化的影响

### 沉思
- 误解：关于Duqu依赖于新的Word漏洞
- 罗生门：GDI内核化的利弊
- SMEP与内核模式Shellcode

### 致谢
- P1P1Winner, PJF, Bugvuln, RoyceLu, YaoTong, PaulFan, MJ0011
- 360-deepscan-team, 360-hips-team
- SyScan Committee, Fan.Tuan

### Q&A
- 联系方式: [PI:EMAIL]