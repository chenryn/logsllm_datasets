HINT:  This functions can only be executed during recovery.  
LOCATION:  get_upstream_conninfo, get_upstream_conninfo.c:25  
```  
在downstream节点执行，可以获取到upstream节点的信息：  
```  
postgres@digoal-> psql -h 127.0.0.1 -p 1922  
psql (9.4.4)  
Type "help" for help.  
postgres=# \set VERBOSITY verbose  
postgres=# select get_upstream_conninfo();  
                     get_upstream_conninfo                        
----------------------------------------------------------------  
 host=192.168.150.128 port=1921 user=replica keepalives_idle=60  
(1 row)  
```  
还有一种方法是直接读取recover.conf文件来解析连接信息，如下。  
```  
postgres=# select * from regexp_split_to_table(pg_read_file('recovery.conf'),'\n') t(a) where a ~ '^ *primary_conninfo';  
                                                                 a                                                                   
-----------------------------------------------------------------------------------------------------------------------------------  
   primary_conninfo = 'host=192.168.150.128 port=1922 user=replica keepalives_idle=60'           # e.g. 'host=localhost port=5432'  
(1 row)  
```  
XLOG最后接收到的时间戳也可以在walrcv数据结构中获取，这个可以用来判断心跳。  
```  
#include "postgres.h"  
#include   
#include "fmgr.h"  
#include "access/xlog.h"  
#include "replication/walreceiver.h"  
#include "utils/elog.h"  
#include "utils/builtins.h"  
#include "utils/timestamp.h"  
#ifdef PG_MODULE_MAGIC  
PG_MODULE_MAGIC;  
#endif  
PG_FUNCTION_INFO_V1(get_upstream_conninfo);  
Datum   
get_upstream_conninfo(PG_FUNCTION_ARGS)  
{  
        assert(PG_NARGS() == 0);  
        if (!RecoveryInProgress())  
                ereport(ERROR,  
                                (errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),  
                                 errmsg("recovery is not in progress"),  
                                 errhint("This functions can only be executed during recovery.")));  
        /* use volatile pointer to prevent code rearrangement */  
        volatile WalRcvData *walrcv = WalRcv;  
        /* Fetch information required to start streaming */  
        // strlcpy(conninfo, (char *) walrcv->conninfo, MAXCONNINFO);  
        PG_RETURN_TEXT_P(cstring_to_text((char *) walrcv->conninfo));  
}  
PG_FUNCTION_INFO_V1(get_rcv_timestamp);  
Datum  
get_rcv_timestamp(PG_FUNCTION_ARGS)  
{  
        assert(PG_NARGS() == 0);  
        if (!RecoveryInProgress())  
                ereport(ERROR,  
                                (errcode(ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE),  
                                 errmsg("recovery is not in progress"),  
                                 errhint("This functions can only be executed during recovery.")));  
        /* use volatile pointer to prevent code rearrangement */  
        volatile WalRcvData *walrcv = WalRcv;  
        PG_RETURN_TEXT_P(cstring_to_text(timestamptz_to_str(walrcv->latestWalEndTime)));  
}  
```  
```  
create or replace function get_rcv_timestamp() returns text as '$libdir/libdigoal.so', 'get_rcv_timestamp' language C STRICT;  
postgres=# select get_rcv_timestamp();  
       get_rcv_timestamp         
-------------------------------  
 2015-08-03 10:13:22.570627+08  
(1 row)  
```  
## 参考  
1\. 解析配置文件的公共函数  
src/backend/utils/misc/guc-file.c  
```  
*  
 * Read and parse a single configuration file.  This function recurses  
 * to handle "include" directives.  
 *  
 * Input parameters:  
 *      fp: file pointer from AllocateFile for the configuration file to parse  
 *      config_file: absolute or relative path name of the configuration file  
 *      depth: recursion depth (should be 0 in the outermost call)  
 *      elevel: error logging level to use  
 * Output parameters:  
 *      head_p, tail_p: head and tail of linked list of name/value pairs  
 *  
 * *head_p and *tail_p must be initialized to NULL before calling the outer  
 * recursion level.  On exit, they contain a list of name-value pairs read  
 * from the input file(s).  
 *  
 * Returns TRUE if successful, FALSE if an error occurred.  The error has  
 * already been ereport'd, it is only necessary for the caller to clean up  
 * its own state and release the ConfigVariable list.  
 *  
 * Note: if elevel >= ERROR then an error will not return control to the  
 * caller, so there is no need to check the return value in that case.  
 */  
bool  
ParseConfigFp(FILE *fp, const char *config_file, int depth, int elevel,  
                          ConfigVariable **head_p, ConfigVariable **tail_p)  
{  
......  
}  
```  
2\. 读取recovery,.conf  
src/backend/access/transam/xlog.c  
```  
#define RECOVERY_COMMAND_FILE   "recovery.conf"  
/*  
 * See if there is a recovery command file (recovery.conf), and if so  
 * read in parameters for archive recovery and XLOG streaming.  
 *  
 * The file is parsed using the main configuration parser.  
 */  
static void  
readRecoveryCommandFile(void)  
{  
        for (item = head; item; item = item->next)  
        {  
                if (strcmp(item->name, "restore_command") == 0)  
                {  
                        recoveryRestoreCommand = pstrdup(item->value);  
                        ereport(DEBUG2,  
                                        (errmsg_internal("restore_command = '%s'",  
                                                                         recoveryRestoreCommand)));  
                }  
......  
                else if (strcmp(item->name, "primary_conninfo") == 0)  
                {  
                        PrimaryConnInfo = pstrdup(item->value);  
                        ereport(DEBUG2,  
                                        (errmsg_internal("primary_conninfo = '%s'",  
                                                                         PrimaryConnInfo)));  
                }  
}  
```  
3\. 从流复制接收恢复数据库需要的XLOG数据  
src/backend/access/transam/xlog.c  
```  
static bool  
WaitForWALToBecomeAvailable(XLogRecPtr RecPtr, bool randAccess,  
                                                        bool fetching_ckpt, XLogRecPtr tliRecPtr)  
{  
......  
                                        if (PrimaryConnInfo)  
                                        {  
                                                XLogRecPtr      ptr;  
                                                TimeLineID      tli;  
                                                if (fetching_ckpt)  
                                                {  
                                                        ptr = RedoStartLSN;  
                                                        tli = ControlFile->checkPointCopy.ThisTimeLineID;  
                                                }  
                                                else  
                                                {  
                                                        ptr = tliRecPtr;  
                                                        tli = tliOfPointInHistory(tliRecPtr, expectedTLEs);  
                                                        if (curFileTLI > 0 && tli > 32), (uint32) ptr,  
                                                                         tli, curFileTLI);  
                                                }  
                                                curFileTLI = tli;  
                                                RequestXLogStreaming(tli, ptr, PrimaryConnInfo,  
                                                                                         PrimarySlotName);  
                                                receivedUpto = 0;  
                                        }  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")