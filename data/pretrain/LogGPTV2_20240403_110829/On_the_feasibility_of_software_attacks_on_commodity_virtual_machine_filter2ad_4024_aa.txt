title:On the feasibility of software attacks on commodity virtual machine
monitors via direct device assignment
author:G&apos;abor P&apos;ek and
Andrea Lanzi and
Abhinav Srivastava and
Davide Balzarotti and
Aur&apos;elien Francillon and
Christoph Neumann
On the Feasibility of Software Attacks on Commodity
Virtual Machine Monitors via Direct Device Assignment
Gábor Pék
CrySyS Lab, BME
Budapest, Hungary
PI:EMAIL
Davide Balzarotti
Eurecom
Sophia Anitpolis, France
PI:EMAIL
Andrea Lanzi
Univ. degli Studi di Milano
Milan, Italy
PI:EMAIL
Aurélien Francillon
Eurecom
Sophia Antipolis, France
PI:EMAIL
Abhinav Srivastava
AT&T Labs Research
New Jersey, USA
PI:EMAIL
Technicolor, Rennes, France
Christoph Neumann
christoph.neumann
@technicolor.com
ABSTRACT
The security of virtual machine monitors (VMMs) is a challeng-
ing and active ﬁeld of research. In particular, due to the increas-
ing signiﬁcance of hardware virtualization in cloud solutions, it is
important to clearly understand existing and arising VMM-related
threats. Unfortunately, there is still a lot of confusion around this
topic as many attacks presented in the past have never been imple-
mented in practice or tested in a realistic scenario.
In this paper, we shed light on VM related threats and defences
by implementing, testing, and categorizing a wide range of known
and unknown attacks based on directly assigned devices. We ex-
ecuted these attacks on an exhaustive set of VMM conﬁgurations
to determine their potential impact. Our experiments suggest that
most of the previously known attacks are ineffective in current
VMM setups.
We also developed an automatic tool, called PTFuzz, to discover
hardware-level problems that affects current VMMs. By using PT-
Fuzz, we found several cases of unexpected hardware behaviour,
and a major vulnerability on Intel platforms that potentially im-
pacts a large set of machines used in the wild. These vulnerabili-
ties affect unprivileged virtual machines that use a directly assigned
device (e.g., network card) and have all the existing hardware pro-
tection mechanisms enabled. Such vulnerabilities either allow an
attacker to generate a host-side interrupt or hardware faults, violat-
ing expected isolation properties. These can cause host software
(e.g., VMM) halt as well as they might open the door for practical
VMM exploitations.
We believe that our study can help cloud providers and researchers
to better understand the limitations of their current architectures to
provide secure hardware virtualization and prepare for future at-
tacks.
Permission to make digital or hard copies of all or part of this work for personal 
or classroom use is granted without fee provided that copies are not made or 
distributed for profit or commercial advantage and that copies bear this notice 
and the full citation on the first page. Copyrights for components of this work 
owned  by  others  than  ACM  must  be  honored.  Abstracting  with  credit  is 
permitted. To copy otherwise, or republish, to post on servers or to redistribute 
to  lists,  requires  prior  specific  permission  and/or  a  fee.  Request  permissions 
from permissions@acm.org. 
ASIA CCS’14, June 4–6, 2014, Kyoto, Japan. 
Copyright © 2014 ACM  978-1-4503-2800-5/14/06…$15.00. 
http://dx.doi.org/10.1145/2590296.2590299.
Categories and Subject Descriptors
D.4 [Operating Systems]: Security and Protection; D.2.5 [Software
Engineering]: Testing and Debugging—error handling and recov-
ery
Keywords
I/O virtualization; Virtual Machine Monitor; Passthrough; Interrupt
attack; DMA attack; MMIO; PIO
1.
INTRODUCTION
Due to the increasing demand towards server consolidation, vir-
tualization has become a key element of IT infrastructures. For
example, the ability to create and manage virtual servers is one
of the pillars of Infrastructure-as-a-Service (IaaS) cloud services,
such as Amazon EC2 [1] and Google Compute Engine [2]. For this
reason, both software and hardware vendors are constantly devel-
oping and releasing new technologies to satisfy the ever-growing
customer expectations in terms of security, privacy, performance,
and usability.
In the last ten years, a large number of papers [3, 4, 5, 6, 7, 8]
have been presented to either secure, or enhance the performance
and capabilities of VMMs. Several works [9, 10, 11, 12, 13, 14]
also mention and implement possible attacks. Unfortunately, most
of them are described only from a theoretical point of view, and
only a few have been actually implemented and thoroughly tested
in realistic settings. Moreover, even when a proof-of-concept im-
plementation exists, it is often difﬁcult to understand what the pre-
requisites are for the attack to work, what the real impact is, and to
which extent the results can be generalized to other environments
and/or VMMs. Most of these questions are difﬁcult to answer, and
it is not uncommon also for experts to disagree on these points.
Finally, to make things even more complex, current VMMs are
rapidly evolving. Each new release contains new technologies that
can potentially introduce new vulnerabilites as well as new coun-
termeasures that can make existing attacks obsolete.
For example, several techniques have recently been introduced
to increase the efﬁciency and security of I/O operation for guest
virtual machines (VMs). Direct device assignment (also known as
device passthrough) is such a mechanism, where the VMM assigns
a device exclusively to one VM instead of sharing it with other
virtual machines. This is achieved by directly mapping the device
into a VM address space, redirecting the corresponding interrupts
to the correct VM. Clearly, assigning the hardware to be directly
305controlled by a VM improves the performance. At the same time,
this approach also introduces a wide range of security problems
that eventually led hardware manufacturers to introduce hardware
assisted protection extensions for the CPU and chipset.
In this paper, we demonstrate a wide range of known and un-
known attacks that can be launched via device passthrough. First,
we chose to re-implement attacks that have been proposed by se-
curity researchers in order to systematically study their impact and
their limitations against recent versions of Xen and KVM virtual
machine monitors. We believe that repeating experiments is fun-
damental in computer science, as well as in many other scientiﬁc
ﬁelds (e.g., physics) to validate the results of different researchers.
For this reason, we carefully replicated our tests under seven dif-
ferent VMM conﬁgurations.
Second, we complemented the existing attacks by exploring new
directions and unknown corner cases.
In particular, we propose
two novel attacks, one based on the modiﬁcation of the Peripheral
Component Interconnect express (PCIe) conﬁguration space and
the other based on the creation of host-side Non-Maskable Inter-
rupts (NMIs). More precisely, our interrupt attack is the conse-
quence of a misunderstanding between the hardware and software.
In addition, it is the only interrupt attack to date that works on con-
ﬁgurations in which all available hardware protections are turned
on. By discussing our results with vendors, we realized that our at-
tack is pervasive and especially affects Intel based server platforms.
To perform our experiments, we implemented several tools de-
signed to reveal conﬁguration weaknesses, VMM vulnerabilities,
or deeper hardware problems. Some attacks were manually tested,
for example by remapping speciﬁc I/O memory ranges and trying
to read or write them. In other cases, however, it was impossible to
manually cover the space of all possible values, so we implemented
a fuzzer, called PTFuzz, to thoroughly explore different problems.
In summary, this paper makes the following contributions:
• We re-implement a wide range of previously proposed at-
tacks to evaluate the threat that they carry on contemporary
VMMs.
• We introduce two novel attacks for passthrough devices: A
new variation of an attack against the PCIe conﬁguration
space and an interrupt attack that violates the security set-
tings in all tested conﬁgurations. While the former was dis-
covered manually, the latter was revealed by a fuzzer, called
PTFuzz, that we built to automatically reveal low-level prob-
lems during DMA operations. In addition, PTfuzz revealed
another unexpected hardware behaviour during testing inter-
rupt attacks.
• We test all the attacks on various conﬁgurations of two com-
modity VMMs (Xen and KVM), and discuss how different
features contribute to the security of these VMMs. On the
one hand, our experiments show that it can be quite difﬁcult
to properly conﬁgure a VMM to operate securely. In addi-
tion, we show that in some circumstances the overall security
can only be guaranteed by disabling device passthrough for
untrusted guests. On the other hand, once the system is prop-
erly conﬁgured, most of the attacks (except our new interrupt
attacks) are either ineffective or restricted to the attacker’s
virtual machine.
2. BACKGROUND
A virtualized environment consists of three main software com-
ponents: the host operating system (or privileged VM), a number
of guest operating systems running inside isolated virtual machines
(VMs), and a Virtual Machine Monitor (VMM) responsible for
controlling the access to hardware resources1. In reality, the dis-
tinction between these three components is not always clear. For
example, in Type I VMMs (such as Xen), there is no host OS but
only the VMM and a privileged VM (e.g., Xen’s Dom0) that man-
ages other unprivileged guest virtual machines. Type II VMMs
(such as KVM), however, include a host OS which also contains
the hypervisor in charge of uniformly managing all the system re-
sources.
Prior to the introduction of speciﬁc hardware support, the execu-
tion of unmodiﬁed guest OSs (i.e., full virtualization) was imple-
mented by performing instruction emulation, for example, by using
binary translation. Performance was further improved by the in-
troduction of paravirtualization, however, this requires a modiﬁed
version of the guest OS.
As these pure software solutions have various weaknesses in
terms of scalability, performance and security, a new approach called
hardware assisted virtualization was introduced by AMD/V [15]
and Intel-VT [16] technologies.
In the rest of this section, we will introduce the main technolo-
gies (both hardware and software) that are required to understand
the security of VMMs and the experiments we present in this paper.
2.1 Direct Device Assignment
One of the main tasks of the VMM is to control how guest virtual
machines can access physical I/O devices. Three main approaches
exist to perform this task: emulation, paravirtualization and direct
device assignment (also known as direct access or passthrough).
The ﬁrst two techniques share virtualized I/O devices among mul-
tiple virtual machines. On the contrary, the passthrough approach
assigns one physical device exclusively to one VM that has full
control and direct access to most parts of the assigned hardware.
This has the advantage of signiﬁcantly reducing the main bottle-
neck of virtual environments: the overhead of I/O operations [17,
18, 19, 20, 21]. Unfortunately, direct device assignment also raises
several security concerns. In fact, bus mastering capable directly
assigned devices can initiate DMA transfers, and have access to ar-
bitrary memory locations [10]. A malicious virtual machine may
misuse them to access the memory of other VMs. Moreover, buggy
device drivers can also be the root cause of system instability [22,
23, 24, 25]. These problems can be mitigated by using an IOMMU,
as explained later in this section.
2.2 PCI/PCIe Address Space Access
On the x86 architecture, a PCI device can be accessed in two
different ways: using a Port Mapped I/O (PIO) or using a Memory
Mapped I/O (MMIO) mechanism. Each PCI device conﬁguration
is stored in the device conﬁguration memory. This memory is ac-
cessible either by using special PIO registers or through an MMIO
space. The conﬁguration space is typically accessed by the BIOS or
the operating system kernel to initialize or conﬁgure the Base Ad-
dress Registers (BAR). Base Address Registers are deﬁned by the
PCI standard and used to specify the address at which the device
memory is mapped in the PIO or MMIO address spaces.
Access to conﬁguration space registers is usually emulated for
fully virtualized guests, and in some cases also for privileged VMs.
In this case, whenever a guest accesses a conﬁguration space, the
request is intercepted by the VMM, which incurs a signiﬁcant per-
formance overhead. Therefore, in order to improve the perfor-
mance, some VMMs (e.g., KVM) allow to directly pass PIO or
1We deliberately use the term VMM instead of hypervisor, as the
latter traditionally is not capable of providing a full-ﬂedged guest
environment and does not support multiple VMs.
306MMIO accesses [21], except for the accesses targeting the device
conﬁguration memory.
2.3 Hardware IOMMU
To improve the isolation, performance, and security of I/O de-
vices, hardware supported I/O Memory Management Units (IOM-
MUs) were introduced [26]. In particular, Intel VT-d [27] provides
hardware support for DMA and interrupt virtualization. DMA vir-
tualization (a.k.a. DMA remapping) enables system software to
create multiple isolated DMA protection domains by allocating a
subset of the host physical memory to a speciﬁc domain.
The DMA isolation is performed by restricting memory access
from I/O devices to a speciﬁc physical memory domain set. More
precisely, the DMA isolation mechanism is able to exclusively as-
sign a set of physical pages to a particular I/O device. For this pur-
pose, the VT-d architecture deﬁnes a multi-level page table struc-
ture for the DMA address translation.
2.4 Interrupt Remapping
In a multiprocessor environment, hardware interrupts are han-
dled either by the per-processor Local Advanced Programmable
Interrupt Controller (LAPICs) or by the external I/O APIC, which
is part of the system chipset. LAPICs are responsible for receiv-
ing and sending local interrupts from various sources, including
special pins in the processor, the APIC timer, or the performance-
monitoring counters. LAPICs can also receive interrupts via the
Inter-Processor Interrupt (IPI) mechanism to get notiﬁcations from
other processors. Finally, interrupts can also originate from exter-
nal interrupt sources (e.g., I/O devices) that are connected to the I/O
APIC. In this case, the I/O APIC translates these requests to corre-
sponding interrupt messages using its redirection table, and deliv-
ers them to the target LAPIC. The LAPIC then decides whether to
forward the interrupt to the processor or not.
There are two main types of interrupts that can be generated
by I/O devices: legacy interrupts and Message Signaled Interrupts
(MSI). Legacy interrupts use dedicated wires, while MSI interrupts
use an in-band mechanism. MSIs are created by a DMA write to the
memory mapped LAPIC region as step (1) and step (2) of the nu-
merical path in Figure 3 show it. Such interrupts encode their own
attributes (interrupt vector, destination processor, delivery mode,
etc.) into the address and data of the DMA request. Basically, it
means that a guest VM with a directly assigned device can also use
this mechanism to signal an MSI to a physical processor via a sim-
ple DMA write operation. However, this can be fatal for a system
as an arbitrary interrupt vector could be called from unprivileged
guests [9].
To protect against such interrupt-based attacks, Intel introduced
the interrupt remapping architecture as a part of the VT-d technol-
ogy (see block IR in Figure 3). This mechanism is responsible