title:Security through redundant data diversity
author:Anh Nguyen-Tuong and
David Evans and
John C. Knight and
Benjamin Cox and
Jack W. Davidson
Security through Redundant Data Diversity 
Anh Nguyen-Tuong, David Evans, John C. Knight, Benjamin Cox, Jack W. Davidson 
University of Virginia, Department of Computer Science 
{nguyen | evans | knight | btc4w | davidson}@cs.virginia.edu 
Abstract 
Unlike other diversity-based approaches, N-variant sys-
tems  thwart  attacks  without  requiring  secrets.  Instead, 
they  use  redundancy  (to  require  an  attacker 
to 
simultaneously  compromise  multiple  variants  with  the 
same input) and tailored diversity (to make it impossi-
ble to compromise all the variants with the same input 
for  given  attack  classes).  In  this  work,  we  develop  a 
method for using data diversity in N-variant systems to 
provide  high-assurance  arguments  against  a  class  of 
data corruption attacks. Data is transformed in the vari-
ants  so  identical  concrete  data  values  have  different 
interpretations.  In  order  to  corrupt  the  data  without 
detection,  an  attacker  would  need 
the 
corresponding  data  in  each  variant  in  a  different  way 
while  sending  the  same  inputs  to  all  variants.  We 
demonstrate  our  approach  with a case study using that 
thwarts attacks that corrupt UID values. 
to  alter 
1.  Introduction 
Distributed  computing  relies  upon  networked  services 
that are exposed to malicious adversaries. These adver-
saries,  posing  as  legitimate  clients,  attack  the  services 
with which they interact, doing so by exploiting vulner-
abilities in the service software. Despite much effort, it 
has  proven  difficult  to  build  services  that  do  not 
contain security vulnerabilities.  
The  N-variant  systems  approach  makes  use  of 
redundancy,  using  an  architecture 
that  combines 
tailored program diversity and execution monitoring to 
provide  strong  security  guarantees  that  do  not  rely  on 
assumptions  about  keeping  secrets.  The  transforma-
tions  used  to  generate  variants  can  be  simple  and  the 
keys  used  to  generate  the  variants  can  be  openly  pub-
lished.  The  N-variant  architecture  enables  high-assur-
ance  arguments  to  be  made  with  respect  to  specific 
attack classes, regardless of the vulnerability exploited.  
A  simple  example  is  address  space  partitioning,  in 
which a program P is replaced with two variants P0 and 
P1  (Figure  1).  The  variants  are  constructed  to  behave 
identically  to  P  on  normal  inputs,  but  use  disjoint 
memory  regions:  P0  uses  addresses  that  start  with  a  0 
bit while addresses for P1 start with a 1 bit. All inputs 
are  replicated  and  sent  to  both  variants.  A  monitor 
observes both variants and reports an attack if their be-
haviors  diverge.  An  attack  that  involves  accessing  a 
specific  absolute  memory  address  (e.g.,  typical  format 
string,  stack  and  heap  smashing,  and  return-to-libc 
attacks)  may  be  constructed  to  succeed  against  either 
P0  or  P1,  but  if  that  same  input  is  run  on  the  other 
variant it is guaranteed produce a memory access error 
which will be detected by the monitor. Thus, an attack 
that  relies  on  directly  inserting  an  absolute  address  is 
impossible  (assuming  the  framework  replicates  inputs 
correctly  and  the  monitor  observes  both  variants 
behavior  with  sufficient  granularity)  since  the  high  bit 
cannot be 0 and 1 at the same time.  
Our  earlier  work  introduced  N-variant  systems  and 
demonstrated  address  space  partitioning  as  well  as 
another  instance  of  the  approach  for  defeating  code 
injection  by  tagging  instructions  in  different  variants 
with  different  values  and  checking  and  removing  the 
tags  before  execution  [16].  Other  researchers  have 
developed  other  variations  within  similar  frameworks: 
Bruschi  et  al.  created  a  variation  to  thwart  partial 
memory  overwrites  [9],  and  Franz  created  a  variation 
using reverse stack ordering that provides probabilistic 
protection  against  certain  relative  memory  corruption 
attacks  [20].  All  of  these  variations  alter  some  low-
level,  program-wide  property  such  as  the  format  of 
Untrusted Input (from client)
0
Monitor
1
Output
Figure 1. Two-variant address partitioning. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE187DSN 2008: Nguyen-Tuong et al.instructions or the address space.  
Such  variations  are  promising  for  thwarting  large 
general  attack  classes,  but  provide  only  a  glimpse  of 
the opportunity N-variant frameworks provide, namely, 
the ability to deploy any diversity technique, including 
low-entropy  variations,  in  a  way  that  provides  high 
assurance security against a particular attack class.  
In  this  paper,  we  develop  a  general  method  for 
employing  data  diversity  in  N-variant  frameworks. 
Data  diversity  is  a  general  approach  to  software  fault 
tolerance  in  which  identical  copies  of  a  program  are 
executed  with  different  data,  and  their  outputs  are 
subject to a vote [1]. The different versions of the data 
are  obtained  from  the  original  input  by  a  process 
known  as  reexpression,  and  the  reexpression  function 
is  chosen  so  that  either  the  results  of  the  program  are 
unaffected or the effects of reexpression on the outputs 
can be reversed easily. In traditional data diversity, the 
goal of reexpression is to avoid the regions of the input 
space  for  which  the  program  fails. Since these regions 
are unknown in general, traditional data diversity offers 
only  probabilistic  guarantees  of  tolerating  software 
faults.  Our  work  is  focused  on  security  against  mal-
icious  attacks,  so  instead  of  using  a  majority  vote  we 
interpret  any  divergence  in  behavior  as  a  security 
violation.  To  achieve  high  assurance 
security 
properties,  our  goal  is  to  find  reexpression  functions 
that are disjoint, so that any data corruption attack will 
be detected as a divergence. 
Unlike previous diversity techniques that are applied 
universally  to  a  process’  address  space,  data  diversity 
techniques  depend  on  understanding  the  underlying 
semantics of program data.  The data and program must 
be  transformed  in  a  way  that  preserves  the  original 
program  semantics  while  allowing  the  program  to 
operate  on  a  different  concrete  data  representation. 
Different  data  diversity  techniques  could  be  employed 
for  different  types  of  program  data.  As  an  example  of 
our  technique,  we  develop  a  variation  that  diversifies 
user  IDs  to  thwart  a  class  of  data  corruption  attacks 
where user identification data is corrupted to gain root 
privileges or masquerade as an arbitrary user.  
The  primary  contribution  of  this  paper  is  the 
development of a method for designing, implementing, 
and  reasoning  about  N-variant  systems  that  employ 
data  diversity.  Section  2  presents  a  model  for  data 
variation and explains how previous work on N-variant 
systems fits into our model. Section 3 demonstrates our 
approach  using  a  data  diversification  that  thwarts 
attacks  that  target  corrupting  UID  values.  Section  4 
reports  on  a  case  study  implementation  of  our  tech-
nique  for  the  Apache  web  server.  Section  5  discusses 
general  lessons  learned  from  our  experience  designing 
and  implementing  the  UID  variation.  We  present 
related  work  (which,  surprisingly,  extends  to  the  18th 
century) in Section 6 and conclude in Section 7.  
2.  Model 
In previous work, we reasoned about N-variant systems 
by  considering  the  sequence  of  program  states in each 
variant  [16].  Obtaining  the  desired  detection  and 
correctness  properties 
two 
properties:  
required  establishing 
1.  Normal  equivalence:  When  executing  on  normal 
(non-malicious)  inputs,  the  variants  remain  in  seman-
tically  equivalent  states.  To  establish  normal  equiva-
lence,  a  canonicalization  function  is  used  to  map  the 
states  of  all  variants  onto  a  canonical  state.  (For  the 
address  partitioning  example, 
the  canonicalization 
function maps the address spaces into the same space.) 
2.  Detection  –  when  executing  on  abnormal  (attack) 
inputs,  the  variants  diverge  in  a  way  that  is  detectable 
by the monitor. Typically, this occurs when one of the 
variants  enters  an  alarm  state.  (For  the  address 
partitioning  example,  the  detection  property  occurs 
when  an  attack  injects  an  absolute  address,  which 
causes one of the variants to segmentation fault.) 
This model provides a general framework for reasoning 
about  N-variant  systems,  but  does  not  provide  much 
insight  for  designing  or  reasoning  about  how  to  use 
data  diversity  effectively.  The  difficulty  is  this  model 
relies on reasoning about the entire program state.  
2.1  Interpreters Model 
To  reason  about  data  diversity  variations,  we  prefer  a 
model that allows us to reason more directly about how 
data  transformations  preserve  the  necessary  normal 
equivalence  and  detection  properties.  We  consider  an 
application  as  being  composed  of  a  series  of 
interpreters,  typically  organized  hierarchically.  Each 
interpreter  processes  a  particular  type  of  data.  For 
example, a web application depends on interpreters for 
handling  the  network  protocol,  the  HTTP  protocol, 
interpreting  scripts  that  implement  application  logic, 
executing database queries, accessing operating system 
services, and executing machine instructions. 
To carry out a successful attack an attacker needs to 
break through several layers of interpretation and con-
trol inputs to a specific target interpreter. For example, 
if  the  malicious  payload  consists  of  x86  machine 
instructions,  the  targeted  interpreter  is  the  machine 
hardware  itself.  If  the  attack  payload  opens  a  shell 
(e.g.,  by  executing  /bin/sh  on  Unix  systems),  then 
one  targeted  interpreter  might  be  the  filesystem.  A 
single exploit may target many different interpreters. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE188DSN 2008: Nguyen-Tuong et al.interpreters  are  preceded  by  the  corresponding inverse 
reexpression functions, R-1
1. This establishes a 
different  data  interpretation  between  the  application 
and target interpreters. 
0 and R-1
2.2  Normal Equivalence 
Consider a data variation for a target type T and a given 
program  P.  To  establish  the  normal  equivalence 
property for each variant Pi we need to show:                                   
(1)  All  trusted  data  of  type  T  used  by  P  is  trans-
formed using the reexpression function Ri. 
(2)  All  instructions  in  Pi  that  operate  on  T  values 
directly  (that  is,  without  sending  them  to  the 
target  interpreter)  are  transformed  to  preserve 
the  original  semantics  when  operating  on 
reexpressed data. 
In addition, we need to show the reexpression function 
and its inverse are indeed inverses: 
(3)  ∀x: T, R-1
i(Ri(T)) ≡ T. (inverse property) 
Showing the necessary inverse property holds is usually 
straightforward  since  the  reexpression  function  is 
designed to have this property. 
the 
first 
Establishing 
two  properties  requires 
reasoning about a program transformation (and possib-
ly  also  about  transformation  of  other  external  data  as 
seen  in  Section  3.4).  Transforming  trusted  program 
data requires identifying the constant data of the target 
type  in  P,  and  applying  Ri  to  it  to  produce  Pi.  If  the 
target  data  type  is  well  defined,  this  should  be  fairly 
straightforward.  Preserving  the  semantics  is  a  more 
challenging  problem.  At  worst,  the  inverse  reex-
pression  function  can  be  embedded  in  the  program  to 
preserve the semantics of the original code.  
2.3  Detection 
The  detection  property  states  that  if  one  variant  is 
The reason why an attacker is able to send malicious 
data  to  a  targeted  interpreter  is  that  higher-level  inter-
preters  contain  vulnerabilities.  Software 
is  often 
deployed with many residual faults, some of which turn 
out to be severe security vulnerabilities.  
Figure  2  illustrates  an  N-variant  system  with  two 
variants using different interpreters for some data type, 
but  otherwise  implementing  the  same  program.  The 
attacker is constrained to use the same communication 
channel as regular user input (External Input), and will 
attempt to craft input that compromises the application. 
This  external  input,  including  its  embedded  malicious 
payload,  will  be  interpreted  by  a  series  of  interpreters 
in  the  application,  abstracted  in  the  figure  by  a  single 
interpreter,  App  Interpreter.  By  exploiting  a  path 
through  App  Interpreter  containing  a  vulnerability,  the 
embedded malicious data reaches the target interpreter.  
In  general,  diversity  techniques  attempt  to  thwart 
attacks by changing the interfaces between interpreters. 
If an attacker does not know this interface, the attacker 
will  have  difficultly  guessing  an  input  that  has  the 
desired effect on the target interpreter.  
With  data  diversity,  the  variations  are  created  by 
using different data reexpression functions. If there is a 
large  space  of  possible  reexpression  functions  and 
associated secrets, it may be possible to provide a high 
degree  of  security  with  a  single  variant.  To  inject 
specific malicious data, the attacker needs to know the 
particular  inverse  reexpression  function  that  is  used. 
This  configuration  corresponds  to  the  use  of  synthetic 
diversity  techniques  such as address space [8][42] and 
instruction set randomization for disrupting attacks [6] 
[25][28].  Security  arguments  for  such  techniques  are 
based on the claim that it is difficult for an attacker to 
guess  the  randomization  key.  In  practice,  keeping 
randomization  keys  secret  has  proven  difficult,  as 
demonstrated 
space 
randomization  [37]  and  instruction  set  randomization 
[38]  techniques  that  exploit  the  limited  actual  entropy 
available for randomizations and probing opportunities.  
The  N-variant  framework  obviates  the  need  for 
secrets  and  high  entropy.  The  reexpression  functions 
are designed so that any concrete data that is valid for 
one  variant  is  invalid  for  the  other.  The  target 
interpreters  are  not  designed  to  attempt  to  distinguish 
between  malicious  and  normal  data  directly.  Instead, 
they  rely  on  the  fact  that  the  same  malicious  data  will 