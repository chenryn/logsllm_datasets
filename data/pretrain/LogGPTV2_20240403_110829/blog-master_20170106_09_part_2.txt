```  
printf("%s\n", PQgetvalue(res, 0, 0));  
```  
The PQgetvalue() function returns a single field value of one row of a PGresult.  
```  
$ ./query_version   
PostgreSQL 9.3.9 on x86_64-unknown-linux-gnu, compiled by gcc (Ubuntu 4.8.4-2ubuntu1~14.04) 4.8.4, 64-bit  
```  
The program prints this output.  
### Retrieving multiple rows of data  
The following example executes a query that returns multiple rows of data.  
multiple_rows.c  
```  
#include   
#include   
#include   
void do_exit(PGconn *conn) {  
    PQfinish(conn);  
    exit(1);  
}  
int main() {  
    PGconn *conn = PQconnectdb("user=janbodnar dbname=testdb");  
    if (PQstatus(conn) == CONNECTION_BAD) {  
        fprintf(stderr, "Connection to database failed: %s\n",  
            PQerrorMessage(conn));  
        do_exit(conn);  
    }  
    PGresult *res = PQexec(conn, "SELECT * FROM Cars LIMIT 5");      
    if (PQresultStatus(res) != PGRES_TUPLES_OK) {  
        printf("No data retrieved\n");          
        PQclear(res);  
        do_exit(conn);  
    }      
    int rows = PQntuples(res);  
    for(int i=0; i  
#include   
#include   
void do_exit(PGconn *conn) {  
    PQfinish(conn);  
    exit(1);  
}  
int main(int argc, char *argv[]) {  
    const int LEN = 10;  
    const char *paramValues[1];  
    if (argc != 2) {  
        fprintf(stderr, "Usage: prepared_statement rowId\n");  
        exit(1);  
    }  
    int rowId;  
    int ret = sscanf(argv[1], "%d", &rowId);  
    if (ret != 1) {  
        fprintf(stderr, "The argument must be an integer\n");  
        exit(1);  
    }  
    if (rowId   
#include   
#include   
void do_exit(PGconn *conn) {  
    PQfinish(conn);  
    exit(1);  
}  
int main() {  
    PGconn *conn = PQconnectdb("user=janbodnar dbname=testdb");  
    if (PQstatus(conn) == CONNECTION_BAD) {  
        fprintf(stderr, "Connection to database failed: %s\n",  
            PQerrorMessage(conn));  
        do_exit(conn);  
    }  
    PGresult *res = PQexec(conn, "SELECT * FROM Cars WHERE Id=0");      
    if (PQresultStatus(res) != PGRES_TUPLES_OK) {  
        printf("No data retrieved\n");          
        PQclear(res);  
        do_exit(conn);  
    }         
    int ncols = PQnfields(res);  
    printf("There are %d columns\n", ncols);  
    printf("The column names are:\n");  
    for (int i=0; i  
#include   
#include   
void do_exit(PGconn *conn) {  
    PQfinish(conn);  
    exit(1);  
}  
int main() {  
    PGconn *conn = PQconnectdb("user=janbodnar dbname=testdb");  
    if (PQstatus(conn) == CONNECTION_BAD) {  
        fprintf(stderr, "Connection to database failed: %s\n",  
            PQerrorMessage(conn));  
        do_exit(conn);  
    }  
    PGresult *res = PQexec(conn, "SELECT table_name FROM information_schema.tables "  
                    "WHERE table_schema = 'public'");      
    if (PQresultStatus(res) != PGRES_TUPLES_OK) {  
        printf("No data retrieved\n");          
        PQclear(res);  
        do_exit(conn);  
    }         
    int rows = PQntuples(res);  
    for(int i=0; i  
#include   
#include   
void do_exit(PGconn *conn) {  
    PQfinish(conn);  
    exit(1);  
}  
int main() {  
    PGconn *conn = PQconnectdb("user=janbodnar dbname=testdb");  
    if (PQstatus(conn) == CONNECTION_BAD) {  
        fprintf(stderr, "Connection to database failed: %s\n",  
            PQerrorMessage(conn));  
        do_exit(conn);  
    }  
    PGresult *res = PQexec(conn, "BEGIN");      
    if (PQresultStatus(res) != PGRES_COMMAND_OK) {  
        printf("BEGIN command failed\n");          
        PQclear(res);  
        do_exit(conn);  
    }      
    PQclear(res);     
    res = PQexec(conn, "UPDATE Cars SET Price=23700 WHERE Id=8");      
    if (PQresultStatus(res) != PGRES_COMMAND_OK) {  
        printf("UPDATE command failed\n");          
        PQclear(res);  
        do_exit(conn);  
    }      
    res = PQexec(conn, "INSERT INTO Cars VALUES(9,'Mazda',27770)");      
    if (PQresultStatus(res) != PGRES_COMMAND_OK) {  
        printf("INSERT command failed\n");          
        PQclear(res);  
        do_exit(conn);  
    }         
    res = PQexec(conn, "COMMIT");   
    if (PQresultStatus(res) != PGRES_COMMAND_OK) {  
        printf("COMMIT command failed\n");          
        PQclear(res);  
        do_exit(conn);  
    }         
    PQclear(res);        
    PQfinish(conn);  
    return 0;  
}  
```  
In the example, we update the price of a car and insert a new car. The two operations are included in a single transaction. This means that either both operations are executed or none.  
```  
PGresult *res = PQexec(conn, "BEGIN");  
```  
A transaction is started with the BEGIN command.  
```  
res = PQexec(conn, "UPDATE Cars SET Price=23700 WHERE Id=8");  
```  
We update the price of a car with Id 8.  
```  
res = PQexec(conn, "INSERT INTO Cars VALUES(9,'Mazda',27770)");  
```  
A new car is inserted into the Cars table.  
```  
res = PQexec(conn, "COMMIT");  
```  
The transaction is committed with the COMMIT command.  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")