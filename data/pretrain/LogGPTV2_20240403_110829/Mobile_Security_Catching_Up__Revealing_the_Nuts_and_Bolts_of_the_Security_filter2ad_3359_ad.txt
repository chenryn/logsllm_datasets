### 48. GSM Back-End Vulnerabilities

Researchers investigated the GSM back-end and identified the Home Location Register (HLR) as the most vulnerable component. The HLR is a central database that contains detailed information about each authorized mobile phone subscriber on the GSM core network. They demonstrated that by sending a large volume of traffic, they could reduce legitimate traffic by 93% and 75% when attacking the HLR running on two different database systems.

### 3. Other Back-End Systems

Attacks on back-end systems also include GPRS attacks [49] and attacks on the MMS infrastructure [36]. Additionally, the growing trend of outsourcing computation, known as "cloud computing," may introduce new privacy concerns and necessitate new solutions to ensure privacy. These solutions could potentially be adapted to address security issues in back-end systems for mobile devices.

## VI. Software-Centric Security Aspects

Software-centric vulnerabilities are the most significant class of vulnerabilities for mobile devices, particularly in the context of the attack model discussed in this paper. The rise of mobile web browsers, which often lack robust security specifications, has led to numerous exploited vulnerabilities in recent years.

It is well-known that software composed of thousands or even millions of lines of code is unlikely to be entirely free of bugs. This is especially true for operating systems powering modern mobile devices, such as smartphones. Historically, these systems were closed-source and proprietary, making them less scrutinized by security researchers and attackers. However, this changed with the appearance of Cabir [50], one of the first worms to autonomously propagate on Symbian OS-based mobile devices in 2004. Since then, the security mechanisms of these systems have been under constant inspection, and malicious software targeting these devices has been on the rise. Section VI-E1 provides an overview of malware on mobile devices. Since the first appearance of malware, all major operating systems have been targeted by malware writers, and this trend is expected to continue with more advanced malware in the coming years. The future of smartphone security will likely mirror many aspects of the past and present of computer security.

In this section, we first review the impact of malware, followed by a discussion of SMS and MMS-specific vulnerabilities. We then examine the web browser as an attack vector and conclude with attacks against the operating system and user interface.

### A. Impact of Malware

We now discuss the potential behaviors and attack strategies of malware. Since malware can perform any allowed action within its running environment, especially if it runs with high privileges, we focus on the most significant malicious operations.

#### Information or Identity Theft, Espionage
A common malicious action is to collect and secretly forward private user information to the malware author or other users. This behavior can be embedded in seemingly innocuous applications, such as games, which can be easily installed from third-party app stores. For example, a recently discovered game was able to track users' locations [51]. Given that smartphones are personal devices often carried everywhere, they are ideal targets for gathering private or confidential data. Such applications might collect GPS coordinates, credentials, communication records (SMS, MMS, email), contacts, daily routines, personal habits, and documents. One example is the iPhone application SpyPhone [52], which uses public APIs to collect this data. The collected information can be forwarded through various communication channels, making detection challenging, especially when combined with cryptographic and stealth techniques. The implications of misusing such data are severe.

#### Eavesdropping
Malware can also capture voice calls and record conversations using the built-in microphone [53]. Depending on the malware's privileges, this can occur in the background and may only be detectable through sophisticated monitoring of the operating system or generated communication data. This type of eavesdropping is distinct from the methods discussed in Section V.

#### Financially Motivated Attacks
Recent research [54]â€“[56] has shown that malware-related activities have become highly financially motivated. Shady businesses have emerged to generate significant revenue from initially unaware victims. This trend has extended to smartphone malware, given the strong connection between the smartphone and the Mobile Network Operator (MNO) through service contracts. Although payment is often done via a flat rate model, premium services are typically charged separately (e.g., calls to special numbers or messages to specific services). Attackers can exploit these services to generate money, such as by offering highly charged service numbers for short messages. An infected device could covertly send messages to these numbers until the user notices the charges on their monthly bill. For instance, the malware Trojan-SMS.AndroidOS.FakePlayer pretends to be a movie player but secretly sends messages to a highly charged service number [57]. Another method is to redirect outgoing calls through a provider that imposes additional charges, enabling eavesdropping. Proof-of-concept malware with this behavior has been evaluated by Liu et al. [58]. A third way to extort money is through ransomware, where private files are encrypted and the key is released after payment. While not yet common on smartphones, mobile malware could set up similar extortion schemes, such as disabling certain services (e.g., email) and re-enabling them temporarily after a payment (e.g., by sending a premium message to a number controlled by the attacker).

#### Mobile Botnets
Infected mobile devices are ideal for remote control within botnets. Smartphones offer multiple communication channels, allowing more subtle control compared to traditional IP-based desktop malware. Many smartphones are always on, making them even more attractive. Singh et al. evaluated Bluetooth as the main command-and-control infrastructure [59], while Zeng et al. focused on the short message service [60]. Liu et al. demonstrated that even a small percentage of remotely controlled mobile devices could successfully perform a DDoS attack on 911 call centers [58]. While botnets are beyond the scope of this paper, comprehensive literature exists [61], [62].

#### DoS Attacks Against Mobile Devices
Since mobile devices are battery-powered, a significant power drain can quickly deplete the battery. Malware can achieve this by using all available CPU cycles for junk computations. A more severe method is to delete or corrupt essential data stored in difficult-to-reach locations, such as the E2PROM. Fixing these issues is complex and often impossible for average users, as it requires fundamental knowledge of the device and is usually only feasible by the manufacturer.

### B. SMS Vulnerabilities

An early incident involving mobile phones (not yet smartphones) was an implementation bug in the SMS parser of the Siemens S55, where receiving a short message with Chinese characters caused a Denial of Service (DoS) [63]. This required a local firmware update, forcing users to bring or send their device to customer service. With modern smartphone architectures allowing local or remote firmware updates, such issues are expected to be less prevalent in the future (cf. Section II-C2).

A more recent DoS attack is the "curse of silence" short message, published in late 2008 [64]. It resulted from an omitted sanity check of input data. Nokia released a removal tool one month after the attack was made public.

### C. MMS Vulnerabilities

In 2006, Mulliner published a remote code execution exploit for mobile phones using MMS as the attack vector [65]. It exploited a buffer overflow in the MMS handling program of Windows Mobile CE 4.2. This exploit, being the first of its kind, fueled public concern that mobile devices would become common targets for attacks. While it received attention from technical audiences and MNOs, who issued patches, the exploit never appeared in actual mobile malware, causing minimal harm.

There are two possible explanations for this. First, the success of the message depends on guessing which memory slot is in use. Second, and more likely, the affected devices were already outdated, as Windows CE 4.2 had been succeeded by Windows CE 5 at the time of the exploit's publication.

### D. Mobile Web Browser

Mobile web browsers are an emerging attack vector for mobile devices. Like desktop browsers, mobile browsers have evolved into complete application frameworks, and we can expect that even security-relevant functions of the operating system will be accessible in the near future. Industry requirements, such as those from OMTP (Open Mobile Terminal Platform) [66], include security-relevant features. For example, BR-2540 requires: "The browser MUST support the making of voice calls and video calls from a URI/IRI." BR-2570 suggests appropriate security mechanisms, such as user confirmation before initiating any call from a hyperlink. However, certain versions of the iPhone web browser comply with this requirement but enable browser-based dialers to create costs without necessarily asking for confirmation.

Thus, the mobile web browser, as an application framework, can undermine the mobile device's security model, replacing the original, possibly secure model of signed applications with the security model of the web browser developer. Examples of successful attacks include DoS attacks on the mobile Internet Explorer [67], jailbreaking the iPhone, hacking the Android browser, and using the iPhone browser as a dialer.

### E. Mobile Malicious Software

Investigating the damage potential of mobile malicious software is challenging because this new kind of malware can undermine the trust of mobile phone users in their telephony system. Therefore, the primary research tasks in mobile device security involve understanding the attacks that can be committed by mobile malicious software. Here, the mobile device can exhibit arbitrary and potentially malicious behavior. We will first present preliminary work and then introduce malware detection mechanisms.

#### 1. Surveys of Mobile Malware

This section provides an overview of important surveys of mobile malware in chronological order. Peikari presents an overview of Windows Mobile and Symbian OS malware [68]. Shevchenko covers nearly all malware up to the time of writing [69]. Eren and Detken list known malware samples until 2006, survey the weaknesses of mobile operating systems, and describe much of the mobile and mobile device security knowledge of that time [70]. Tyssy and Helenius list some examples of malware from 2006, focusing on countermeasures and media perception [71]. Bontchev discusses mobile malware classification problems, using Symbian OS malware as an example [72]. His findings can be generalized to malicious software on any operating system. Hypponen [5] provides a summary of mobile device security knowledge and illustrates that repeated installation attempts (via Bluetooth) can break down the resistance of a security-conscious user. McAfee's 2007 study [73] shows how MNOs are preparing defenses against mobile malware. The most recent work on this topic is by Oberheide and Jahanian [8].

#### 2. Malware Detection on Smartphones

Malware detection on smartphones is a challenging task. While the principles are similar to those for desktop computers, the limited processing power of mobile devices poses a significant challenge. We outlined this in Section II-C3 and now discuss several malware detection strategies.

**Signature-Based Detection**: This classic approach involves identifying a malware and generating a signature for it, which can then be used to detect that specific type. Traditional antivirus (AV) software works this way, but porting this approach to smartphones is problematic due to the heavy burden on the CPU, which can lead to unresponsive interfaces and faster battery depletion. To mitigate this, Oberheide et al. presented a virus scanner for mobile devices that offloads the scanning to the cloud [74]. Experience with desktop computers shows that signature-based approaches are often insufficient given the large number of newly emerging threats.

**Static Function Call Analysis**: In addition to classical signatures, static function call analysis can provide clues about the intentions of a program. This is typically done once at installation time for new programs. The function calls can be classified, and appropriate actions can be taken if necessary. This has been tested for the Android platform [75].