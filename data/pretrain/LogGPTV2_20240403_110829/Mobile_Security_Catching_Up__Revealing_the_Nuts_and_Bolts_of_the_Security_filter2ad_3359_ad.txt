[48]. They investigated the GSM back end and found the
HLR (Home Location Register) to be the weakest point.
The HLR is a central database that contains details of each
mobile phone subscriber (customer) who are authorized to
use the GSM core network. Furthermore, they showed how
to reduce legitimate trafﬁc by 93% respectively 75% when
attacking the HLR running two different database systems
by sending a large volume of trafﬁc.
3) Other Back End Systems: Attacks on back end systems
also comprise GPRS attacks [49] or attacks on the MMS
infrastructure [36]. Moreover, the upcoming outsourcing of
computation (“cloud computing”) might lead to new privacy
concerns and to new solutions for ensuring privacy. The
solutions could possibly be transferred to solve the problems
of back end systems with mobile devices.
VI. SOFTWARE-CENTRIC SECURITY ASPECTS
Software-centric vulnerabilities are the most important
class of vulnerabilities for mobile devices in respect to the
attack model of this paper. Especially the rise of the—hardly
security-speciﬁed—mobile web browser led to various ex-
ploited vulnerabilities in the recent past.
It is well known that it is very unlikely that software
composed of thousands or even millions lines of code is
bug-free; this is of course also true for operating systems
powering modern mobile devices, especially smartphones.
For years, these systems were closed source and proprietary
and under almost no observance by security researchers and
attackers. This has changed with Cabir [50], one of the ﬁrst
worms which propagated autonomously on mobile devices
running Symbian OS in 2004. Since then,
the security
mechanisms of these systems are under inspection and
malicious software targeting these devices is on a constant
rise. Section VI-E1 provides an overview of malware on
mobile devices. Since the ﬁrst appearance of malware, all
operating systems of the major competitors in this ﬁeld
were the target of malware writers and this trend will
most likely continue with more advanced malware in the
following years. The future situation of smartphone security
will presumably share most aspects of the previous situation
on computer security.
In this section, we ﬁrst review the impact of malware
and then focus on SMS and MMS speciﬁc aspects. This is
followed by a discussion of the attack vector web browser
and malicious software. We conclude with attacks against
the operating system and user interface attacks.
A. Impact of Malware
We now discuss possible behavior and attack strategies
of malware. Because malware can take every allowed action
within its running environment, especially virtually any
possible instruction when running with high privileges, we
only cover the most signiﬁcant malicious operations.
Information or Identity Theft, Espionage: A common
malicious action is to collect any private accessible user
information and to (secretly) forward it somehow to the
malware author or its users. This kind of behavior may be
embedded in inconspicuous looking (popular) applications
such as games, which can easily be installed from (3rd-party)
application-stores. One example is the recent discovery of
such a game which is able to track users’ locations [51].
The fact that a smartphone is a personal device and may be
taken almost everywhere by a user, makes it an ideal target
to snoop private or even conﬁdential data. The application
might collect the following information, which leads to a
detailed proﬁle of the affected victim: GPS coordinates, all
kinds of credentials, several forms of communication (SMS,
MMS, email,
. . . ), contacts, accurate
daily routines and personal habits, private or corporate
documents, and so on. One example of such a software
which only uses public available APIs (i.e., it does not need
a way to enhance its privileges in order to collect the desired
private data) is the iPhone application SpyPhone [52]. The
collected information may be forwarded through all of the
smartphone’s communication channels, which makes the
detection of the unwanted behavior even harder. The latter
instant messaging,
104
is particularly true when coupled with both cryptographic
and stealth techniques. We do not need to further explain
the implications of the misuse of such data.
Eavesdropping: Next to the aforementioned stealing of
private data, malware could also contain routines to capture
voice calls and to silently record any conversations which are
in range of the built-in microphone [53]. Depending on the
privileges the malware has, this might happen completely in
the background and will only be detectable by sophisticated
monitoring of the whole operating system or the generated
communication data. This type if eavesdropping is on a
different layer than the aforementioned type in Section V.
Financially Motivated Attackers: As already shown in
several papers [54]–[56], the business around malware got
highly ﬁnancially motivated in the recent years. Shady busi-
nesses were built to generate a lot of money from (initially)
unaware victims. Not surprisingly, this trend has already
reached smartphone malware as there is a strong connec-
tion between the smartphone and the MNO through some
contract between the user and the provider in order to use
the supplied services. Albeit the payment is often done in a
ﬂat rate model, some premium services are typically charged
separately (e.g., phone calls to special numbers or sending
of short messages to some special services). The abuse of
these services is ideal for attackers to generate money, e.g.,
through offering a highly charged service number for short
messages. An infected mobile device could covertly send
messages to this number until the user might be aware
of this situation on his monthly bill. One such malware
is the malware Trojan-SMS.AndroidOS.FakePlayer, which
pretends to be a movie player, but secretly sends messages
to a service number which are highly charged [57]. Another
way to generate money is to secretly redirect outgoing calls
through a provider that generate an additional charge. Of
course, this kind of MITM attack enables eavesdropping
of the affected calls. Proof-of-concept malware with this
behavior is evaluated by Liu et al. [58]. A third way to strip
the victim of his money is to blackmail him. Although not
yet seen on smartphones, one possibility is the encryption
of private ﬁles and the release of the used key after some
money has been paid (“ransomware”). An example of this is
the Gpcode-Trojan for desktop computers. Mobile malware
could set up similar extortion schemes, e.g., by disabling
certain services (such as email sending) on the mobile device
and only re-enable them (for a short amount of time) after
some payment has occurred (e.g., by sending a premium
short message to a number under the attacker’s control).
An important prospective question is the way criminals
earn money with mobile devices. Currently, premium-rate
services or foreign country calls are such a method. In
the future, smartphone-based payment systems could be
exploited as well. With an abuse database and by enforcing
this abuse database on a mobile device, we expect some of
the currently working methods to cease.
The challenge for mobile network operators is contribut-
ing to the cessation of the current potential to earn money
with exploiting mobile device security vulnerabilities, espe-
cially concerning premium services. Another challenge for
future research in mobile device security is identifying the
kind of successful attacks that cannot be solved with the
security entities that are presented in this paper.
Mobile Botnets:
Infected mobile devices are ideal
remote controlled “machines”, e.g., within an established
botnet. The different communication channels offered by
smartphones enable much more (subtle) ways to control
these machines next
to the traditional, IP-based control
structure of desktop malware. In addition, many smartphones
are always turned on in contrast to ordinary computers.
Singh et al. evaluated Bluetooth as the main command-and-
control infrastructure [59] and Zeng et al. focused on the
short message service [60]. Liu et al. showed that even a very
small percentage of remote controlled mobile devices may
successfully perform a DDoS attack on 911 call-centers [58].
In general, the topic on botnets is out of scope of this paper,
but comprehensive literature exists [61], [62].
DoS Attacks Against Mobile Devices: Since mobile
devices are battery powered, a huge power consumption can
rapidly lead to the depletion of its power source. This can be
easily done by malware by using all available CPU cycles
for (junk) computations. A far more severe way to disable
the service of a mobile device is the deletion or corruption
of essential data stored at difﬁcult to reach locations such
as the E2PROM. Fixing these issues is complex and often
even impossible for average users because repairing requires
fundamental knowledge of the device and can therefore often
only be done by the manufacturer himself.
B. SMS Vulnerabilities
An incident of the early times of mobile phones (not
even smartphones at that time) was an implementation bug
in the SMS parser of the Siemens S55: receiving a short
message with Chinese characters lead to a Denial of Service
(DoS) [63]. This bug required a local ﬁrmware update,
forcing the users to bring or send their device to customer
service. This class is expected to be of less importance
in the future, because modern smartphone architectures are
increasingly allowing local or remote ﬁrmware updates,
cf. Section II-C2.
A recent DoS attack is the “curse of silence” short
message, which was published in late 2008 [64]. It is caused
by an omitted sanity check of input data. Nokia published
a removal tool one month after the attack was made public.
C. MMS Vulnerabilities
In 2006, a remote code execution exploit for mobile
phones using MMS as the attack vector was published by
Mulliner [65]. It exploited a buffer overﬂow in the MMS
handling program of Windows Mobile CE 4.2. Being the
105
ﬁrst of its kind, it supported the public fear of that time that
mobile devices would start to become commonly attacked.
The exploit received some attention by a technical audience
and the MNOs, who published patches for affected devices.
Anti-virus companies added the exploit to their signature
databases, but the exploit never appeared as part of mobile
malware and thus not much harm was caused by it.
There are two possible explanations for this. The ﬁrst is
the probability of succeeding with the message because it
has to be guessed which memory slot is in use. A second
and more probable explanation is the actual code base of the
devices affected. In particular, Windows CE 4.2 was already
succeeded by Windows CE 5 at the time when the exploit
was published. Therefore, this vulnerability only affected
comparatively outdated devices.
D. Mobile Web Browser
Mobile web browsers are an emerging attack vector for
mobile devices. Just as common web browsers, mobile web
browsers are extended from pure web browsing software
to complete application frameworks with widgets or com-
pletely browser-based mobile devices We can expect that
even security-relevant functions of the operating system will
be accessible in the near future.
Industry requirements even include these security-relevant
features. One example are the browser requirements of
OMTP (Open Mobile Terminal Platform) [66]. More specif-
ically, BR-2540 requires: “The browser MUST support the
making of voice calls and video calls from a URI/IRI”.
BR-2570 suggests appropriate security mechanisms in the
implementation of this requirement as follows: “The browser
SHOULD ask for user conﬁrmation before initiating any
call from a hyperlink”. Certain versions of the iPhone web
browser complies with this requirement, but they enable
browser-based dialers to create costs for the user without
necessarily asking for conﬁrmation.
Therefore,
the mobile web browser as an application
framework of its own is able to undermine the mobile
device’s security model: the original (and possibly secure)
model of signed applications is replaced by the security
model of the web browser developer. Examples for suc-
cessful attacks—besides DoS attacks on the mobile Internet
Explorer [67]—are the jailbreak of the iPhone, hacking the
Android browser, and using the iPhone browser as a dialer.
E. Mobile Malicious Software
Investigating the damage potential of mobile malicious
software is challenging today because this new kind of
malware has the potential to undermine the trust of mobile
phone users in their mobile telephony system as such.
Therefore, we see the main research tasks for mobile device
security in the attacks that can be committed by mobile
malicious software. Here the mobile device can be seen as
exhibiting arbitrary and possibly malicious behavior. We will
106
ﬁrst present preliminary work and then introduce malware
detection mechanisms.
1) Surveys of Mobile Malware: This section provides in
chronological order an overview of important surveys of
mobile malware. Peikari presents an overview of Windows
Mobile and Symbian OS malware [68]. An extensive article
covering nearly all malware as of the time of its writing was
given by Shevchenko [69]. A book by Eren and Detken lists
known malware samples until 2006, surveys the weaknesses
of mobile operating systems, and describes much of the
mobile and the mobile device security knowledge of that
infection routes and
time [70]. Tyssy and Helenius list
some examples of malware of the year 2006, but
their
focus is on countermeasures and media perception of mobile
malware [71]. Bontchev notes mobile malware classiﬁcation
problems and chooses Symbian OS malware as an exam-
ple [72]. Although not explicitly stated, his ﬁndings can be
generalized for malicious software on any operating system.
A survey of mobile malware is presented by Hypponen [5].
Besides a summary of mobile device security knowledge
of that time, it shows in an illustrative comic cartoon that
many repetitions of an installation attempt (via Bluetooth)
could even break down the resistance of a security-conscious
user. McAfee published a study in 2007 as a result of
surveying mobile network operators [73]. This survey shows
how MNOs start preparing defenses against mobile malware.
The most recent work on this topic as of the time of writing
is by Oberheide and Jahanian [8].
2) Malware Detection on Smartphones: Malware detec-
tion on smartphones is a difﬁcult task. Although in principle
not different from malware detection on desktop computers,
the limited processing power of such devices poses a huge
challenge. We already outlined this in Section II-C3 and now
discuss several different malware detection strategies.
Signature Based Detection: This is the classic approach
when a malware is identiﬁed and its characteristics are
known. A signature may be generated and can thereafter
be used to detect this special type. Classical AV software
is signature based and works exactly this way on almost all
computers. However, we cannot simply port this approach to
smartphones. The main reason is that the matching algorithm
must be regularly active to scan all processes for suspicious
code. Obviously, this puts a heavy burden on the CPU and
might even be noticeable by the user (e.g., unresponsive
graphical interface or a faster battery exhaustion). To avoid
this, Oberheide et al. presented a virus scanner for mobile
devices which ofﬂoads the actual scanning to the cloud [74].
Furthermore, the experience on desktop computers shows
that signature based approaches are doomed to fail given
the large number of newly emerging threats.
Next to the “classical signatures” for AV scanners, static
function call analysis may provide clues about the intents of
the corresponding program. This is typically done once at
installation time for new programs. The used function calls
may be classiﬁed and, if necessary, appropriate actions can
be taken. This has been tested for the Android [75] and the