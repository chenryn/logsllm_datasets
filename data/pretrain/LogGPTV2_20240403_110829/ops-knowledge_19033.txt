User: 请回答以下安全问题编写加密算法的技巧（仅供个人使用）我想在这个问题的开头声明，我完全理解编写自己的加密算法的危险，我永远不会使用自制加密来保护除我之外的任何人的数据。
今天，我被分配了一个计算机科学学期的项目，将我们所学的一切整合到一个程序中。该程序的部分功能是可以对字符串进行加密和解密。我们必须自己编写这些加密方法，所以我们不能使用我们正在使用的语言（Java）中内置的任何东西。最后，我们需要避免任何使用密钥进行加密的事情。
现在，在与我的一些同学交谈后，似乎几乎每个人都在使用ROT13或其他类似的方法。因为我是一个成绩优异的人，也因为我不想像其他人一样，我想设计自己的加密方法。然而，我有点不知道从哪里开始。那么，加密有哪些基本或高级技术？

Assistant: 如果您对项目之外的密码学普遍感兴趣：
这取决于你想做什么类型的加密。巨大的警告：这个答案只是为你指明正确的理论方向。我强烈建议你在加入之前多读一读——你读得越多，你就越能理解以前的密码是如何被破解的，而不会犯同样的错误。
公钥
为了操作公钥系统，你需要一个活板门功能。不幸的是，维基百科上的建议非常准确：
已经提出了几个函数类，很快就发现陷门函数比最初想象的更难找到
活板门的功能相当困难；陷门置换（其中函数的输出集和输入集是相同的，因此函数“置换”集合内的输入）甚至更难。粗略地说，素数分解问题和离散对数问题是两个“大问题”。在这个领域，使用现有的方法将是迄今为止最简单的方法。
对称密钥
对称密钥算法是故意可逆的，但如果没有其中一个输入（密钥），则很难反转。其基本思想是混淆/扩散原则。现代密码中常见的技术包括置换置换网络和feistel网络。您还应该考虑阅读分组密码的操作模式。
好的，太好了，我该从哪里开始？
通过阅读——尽可能多地阅读。我不喜欢“不要设计自己的加密货币”的标准建议。我认为如果人们想尝试，就应该尝试。但我再怎么强调也不为过。由于您的项目时间有限，一种技术可能是使用现有密码的简单示例，因此：
对于您的项目
作为一种教育练习，RC4非常容易实施。从前（不久前），它被用来保护SSL/WEP流量——有时它仍然在使用，所以你会使用真正的密码。它确实存在一些安全问题——了解这些问题也将有助于你进行一般的加密教育。然而，由于你的要求是少一些绝对的安全感和更多的学习，我认为这将是理想的。
如果你觉得自己很有野心，并且很懂自己的语言，AES在ECB模式下也不难实现。FIPS-1997可读性很强，通常以一种相当容易理解的方式解释算法。
你认为ROT13是一个糟糕的例子是对的。即使不知道每个字符的偏移量是13位，假设您使用ASCII，您也只需尝试密码文本的127个（或255个用于扩展ASCII）偏移量中的每一个，直到正确的一个丢失为止。因此，即使没有密钥，解密它也是非常琐碎的。