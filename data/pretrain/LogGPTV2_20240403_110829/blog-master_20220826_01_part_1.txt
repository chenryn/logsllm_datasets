## PostgreSQL join+order by limit的优化例子 - 说明数据分布与扫描方法对优化的关键作用  
### 作者                            
digoal                            
### 日期                            
2022-08-26                           
### 标签                            
PostgreSQL , 慢SQL , 数据库优化 , join , 顺序 , 数据分布 , 扫描方法 , merge sort              
----                            
## 背景    
数据的组织+扫描方法决定了数据过滤多少, 性能怎么做到极限. 那就是索引, 精准定位, 并且要求完全没有filter.   
[《PostgreSQL 范围过滤 + 其他字段排序OFFSET LIMIT(多字段区间过滤)的优化与加速》](../201801/20180122_02.md)    
[《PostgreSQL 优化case - where A字段范围 order by B字段排序 limit x》](../202007/20200710_01.md)    
创建一张表, 数据分布如下:   
gid=1,10万条, gid=2,10万条, ... gid=10,10万条. 连续分布. crt_time则从头到尾按顺序写入, gid 10在表的最末尾.    
然后我们要做的是查找gid=9,10的数据, 并且按crt_time排序.     
这个例子主要说明: 扫描方法决定了数据过滤多少, 性能怎么做到极限. 那就是索引, 精准定位, 并且要求完全没有filter.   
这个例子采用的方法是merge sort.   
例子如下:  
数据写入tbl表, 并创建好gid,crt_time的索引  
```  
create unlogged table tbl (gid int, crt_time timestamp, info text, v numeric);  
insert into tbl select g, clock_timestamp(), md5(random()::text), random()*1000 from generate_series(1,10) g, generate_series(1,100000) t;  
create index idx_tbl_1 on tbl (gid,crt_time);  
postgres=# select * from tbl limit 10;  
 gid |          crt_time          |               info               |        v           
-----+----------------------------+----------------------------------+------------------  
   1 | 2022-08-26 10:33:40.167693 | dca2a67612cfe0502a984690088f9d4e | 926.480833187289  
   1 | 2022-08-26 10:33:40.169892 | bfd8a1c94b4c8d7f7da639c005462f1e | 553.004215673141  
   1 | 2022-08-26 10:33:40.169905 | 7d9ecdd22f261b361402620f48a5ffde | 992.857001112929  
   1 | 2022-08-26 10:33:40.169907 | 4c646b30e9f2a1442f20689179d7dbdc | 882.250459518574  
   1 | 2022-08-26 10:33:40.169909 | b9efd4224ed1e3f5a7db32eaa10e7c21 | 348.748854964515  
   1 | 2022-08-26 10:33:40.169911 | 09c7dcd2846b54c7f623010a9499de84 | 569.219270037151  
   1 | 2022-08-26 10:33:40.169913 | 955f1f35934c79a8ca3558c68a39377b | 11.7484035042552  
   1 | 2022-08-26 10:33:40.169915 | b660a864dab7a28e409e92d2aa769e7a | 719.183417035431  
   1 | 2022-08-26 10:33:40.169916 | 14c4c30150371a5a9bbc10373c45680c | 809.989509768999  
   1 | 2022-08-26 10:33:40.169918 | 00532483f3e44f2dcde934fb5e2c960f | 753.914120371643  
(10 rows)  
```  
要查的gid放在tbl_gid表  
```  
postgres=# create table tbl_gid (gid int);  
CREATE TABLE  
postgres=# insert into tbl_gid values (9),(10);  
INSERT 0 2  
```  
查询语句如下  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select tbl.* from tbl join tbl_gid on tbl.gid=tbl_gid.gid order by tbl.crt_time limit 10;  
                                                                        QUERY PLAN                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=543741.56..543741.59 rows=10 width=56) (actual time=332.189..332.197 rows=10 loops=1)  
   Output: tbl.gid, tbl.crt_time, tbl.info, tbl.v  
   Buffers: shared hit=15206  
   ->  Sort  (cost=543741.56..575616.56 rows=12750000 width=56) (actual time=332.186..332.189 rows=10 loops=1)  
         Output: tbl.gid, tbl.crt_time, tbl.info, tbl.v  
         Sort Key: tbl.crt_time  
         Sort Method: top-N heapsort  Memory: 26kB  
         Buffers: shared hit=15206  
         ->  Merge Join  (cost=142.03..224991.56 rows=12750000 width=56) (actual time=202.986..305.187 rows=200000 loops=1)  
               Output: tbl.gid, tbl.crt_time, tbl.info, tbl.v  
               Merge Cond: (tbl.gid = tbl_gid.gid)  
               Buffers: shared hit=15203  
               ->  Index Scan using idx_tbl_1 on public.tbl  (cost=0.42..31099.96 rows=1000000 width=56) (actual time=0.038..176.019 rows=1000000 loops=1)  
                     Output: tbl.gid, tbl.crt_time, tbl.info, tbl.v  
                     Buffers: shared hit=15198  
               ->  Sort  (cost=179.78..186.16 rows=2550 width=4) (actual time=0.053..14.009 rows=100001 loops=1)  
                     Output: tbl_gid.gid  
                     Sort Key: tbl_gid.gid  
                     Sort Method: quicksort  Memory: 25kB  
                     Buffers: shared hit=5  
                     ->  Seq Scan on public.tbl_gid  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.011..0.011 rows=2 loops=1)  
                           Output: tbl_gid.gid  
                           Buffers: shared hit=1  
 Planning:  
   Buffers: shared hit=199  
 Planning Time: 1.688 ms  
 Execution Time: 332.400 ms  
(27 rows)  
```  
优化器使用了比较笨的方法, 表面上看外表是大表, 内表是小表, 而且没有用显排序. 看起来很聪明, 实际上很耗时.   
```  
postgres=# set enable_mergejoin =off;  
SET  
postgres=# explain (analyze,verbose,timing,costs,buffers) select tbl.* from tbl join tbl_gid on tbl.gid=tbl_gid.gid order by tbl.crt_time limit 10;  
                                                               QUERY PLAN                                                                 
----------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=788931.38..788931.40 rows=10 width=56) (actual time=236.632..236.637 rows=10 loops=1)  
   Output: tbl.gid, tbl.crt_time, tbl.info, tbl.v  
   Buffers: shared hit=11365  
   ->  Sort  (cost=788931.38..820806.38 rows=12750000 width=56) (actual time=236.631..236.633 rows=10 loops=1)  
         Output: tbl.gid, tbl.crt_time, tbl.info, tbl.v  
         Sort Key: tbl.crt_time  
         Sort Method: top-N heapsort  Memory: 26kB  
         Buffers: shared hit=11365  
         ->  Hash Join  (cost=67.38..470181.38 rows=12750000 width=56) (actual time=151.584..211.768 rows=200000 loops=1)  
               Output: tbl.gid, tbl.crt_time, tbl.info, tbl.v  
               Hash Cond: (tbl.gid = tbl_gid.gid)  
               Buffers: shared hit=11365  
               ->  Seq Scan on public.tbl  (cost=0.00..21364.00 rows=1000000 width=56) (actual time=0.023..79.634 rows=1000000 loops=1)  
                     Output: tbl.gid, tbl.crt_time, tbl.info, tbl.v  
                     Buffers: shared hit=11364  
               ->  Hash  (cost=35.50..35.50 rows=2550 width=4) (actual time=0.011..0.012 rows=2 loops=1)  
                     Output: tbl_gid.gid  
                     Buckets: 4096  Batches: 1  Memory Usage: 33kB  
                     Buffers: shared hit=1  
                     ->  Seq Scan on public.tbl_gid  (cost=0.00..35.50 rows=2550 width=4) (actual time=0.006..0.007 rows=2 loops=1)  
                           Output: tbl_gid.gid  
                           Buffers: shared hit=1  
 Planning Time: 0.173 ms  
 Execution Time: 236.682 ms  
(24 rows)  
postgres=# set enable_hashjoin =off;  
SET  
```  
关闭了hashjoin, mergejoin后, 反而变快了.     
而且优化器选择了大表作为内表, 说明这样过滤性更好. PG这一点还是很好的, 如果是MySQL估计你得写成STRAIGHT_JOIN来固定大表作为内表.  https://blog.huoding.com/2013/06/04/261  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select tbl.* from tbl join tbl_gid on tbl.gid=tbl_gid.gid order by tbl.crt_time limit 10;  
                                                                      QUERY PLAN                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------  
 Limit  (cost=7349107.95..7349107.98 rows=10 width=56) (actual time=96.025..96.028 rows=10 loops=1)  
   Output: tbl.gid, tbl.crt_time, tbl.info, tbl.v  
   Buffers: shared hit=3048  
   ->  Sort  (cost=7349107.95..7380982.95 rows=12750000 width=56) (actual time=96.023..96.025 rows=10 loops=1)  