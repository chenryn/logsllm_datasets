**YAML基础语法:**
结构通过空格来展示
数组使用"- "(注意-后面有空格)来表示
键值对使用": "(注意:后面有空格)来表示
YAML使用一个固定的缩进风格表示数据层级结构关系
一般每个缩进级别由两个以上空格组成
#表示注释,绝对不能使用tab,最容易出错的地方,同一层级缩进必须对齐
YAML中两种常用的数据类型，分别是list和directory
![](media/image94.png){width="7.261805555555555in"
height="3.316666666666667in"}
### YAML语法格式
简单的格式:
"诗仙": "李白"
复杂的键值对嵌套
"诗人":
> "李白":"诗仙"
数组:
\["李白", "杜甫", "白居易"\] #逗号后面有空格
### YAML数组表示方法
使用一个短横杠加一个空格
#### YAML数组例子
\- "李白"
\- "杜甫"
\- "白居易"
#### 哈希数组复合表达式
"诗人":
\- "李白"
\- "杜甫"
\- "白居易"
高级复合表达式
"诗人":
\-
> "李白": "诗仙"
>
> "年代": "唐"
\-
> "杜甫": "诗圣"
>
> "年代": "唐"
## jinja2模板介绍
jinja2是基于python的模板引擎,包含变量和表达式两部分,两者在模板求值时会被替换为值,模板中还有标签,控制模板的逻辑
playbook的模板使用python的jinja2模块来处理
jinja2模板基本语法
模板的表达式都是包含在分隔符"{{ }}"内的
控制语句都是包含在分隔符"{% %}"内的
模板支持注释,都是包含在分隔符"{# #}"内.支持块注释
调用变量: {{varname}}
计算: {{2+3}}
判断: {{1 in \[1,2,3\]}}
jinja2模板控制语句
> {% if name == '诗仙' %}
>
> 李白
>
> {% if name == '诗圣' %}
>
> 杜甫
>
> {% if name == '诗魔' %}
>
> 白居易
>
> {% else %}
>
> 李贺
>
> {% endif %}
![LINUXNSD_V01ARCHITECTUREDAY02_021](media/image95.png){width="7.264583333333333in"
height="3.4590277777777776in"}
## jinja2过滤器
![LINUXNSD_V01ARCHITECTUREDAY02_022](media/image96.png){width="7.264583333333333in"
height="3.5319444444444446in"}
# playbook简介
是ansible用于配置,部署和管理托管主机剧本,通过playbook的详细描述,执行其中的一系列tasks,可以让远端主机达到预期状态
# playbook语法格式
-   由YAML语言编写.遵循YAML标准,
-   在同一行中,#之后的内容表示注释,
-   同一个列表中的元素应该保持相同的缩进
-   palybook由一个或多个play组成
-   play中hosts,variables,roles,tasks等对象的表示方法都是键值中间以":
    "(:后面有空格).分隔表示
-   YAML文件开始行都是\-\--, 这是YAML格式的一部分,表明一个文件的开始
playbook构成
Target:定义将要执行playbook的远程主机组
Variable:定义playbook运行时需要使用的变量
Templates：模板，即使用模板语法的文件
Tasks:定义将要在远程主机上执行的任务列表
Handler:定义task执行完成以后需要调用的任务，处理器
，当某条件满足时，触发执行的操作
Templates：模板，即使用模板语法的文件
Roles：角色
playbook执行结果
使用ansible-playbook运行playbook文件,输出内容为JSON格式,由不同颜色组成便于识别
-   绿色代表执行成功
-   黄色表示改变
-   \*\*\*\*代表系统状态发生改变
-   红色代表执行失败
## 练习
\[root@ansible \~\]# vim ping.yaml
\-\--
\- hosts: all
remote_user: root
tasks:
\- ping:
\[root@ansible \~\]# ansible-playbook ping.yml -f 5
-f 并发进程数,默认是5
hosts行内容是一个(多个)组.或主机的patterns,以逗号为分隔符,,
remote_user账户名
tasks:每一个play包含了一个task列表,命令任务列表,
一个task命令列表在其所对应的所有主机上顺序执行命令,
所有主机同时执行
![LINUXNSD_V01ARCHITECTUREDAY02_032](media/image97.png){width="7.264583333333333in"
height="2.479861111111111in"}
\[root@ansible \~\]# vim http.yml
\-\--
\- hosts: web1
remote_user: root
tasks:
\- yum:
name: httpd
state: installed
\- lineinfile:
path: /etc/httpd/conf/httpd.conf
regexp: \'\^Listen\'
line: \'Listen 8080\'
\- lineinfile:
path: /etc/httpd/conf/httpd.conf
regexp: \'\^#ServerName \'
line: \"ServerName localhost\"
\- service:
name: httpd
state: started
enabled: yes
\- copy:
src: /root/index.html
dest: /var/www/html/index.html
善用:ansible-doc \[root@ansible \~\]# ansible-doc lineinfile
# ansible语法进阶
## 定义变量:
添加用户:给db主机组所有主机添加用户dd,,设置密码为123456,第一次登录需要修改密码
\[root@ansible \~\]# vim user.yml
\-\--
\- hosts: db
remote_user: root
vars: #定义参数
username: dd #变量名为username,默认值为dd,没传参username值就为dd,
tasks:
\- name: add user \"{{username}}\"
user:
name: \"{{username}}\"
group: mysql
\- name: change \"{{username}}\" password
shell: echo 123456\|passwd \--stdin \"{{username}}\"
\- shell: chage -d 0 \"{{username}}\"
\[root@ansible \~\]# ansible-playbook user.yml #执行
## 变量过滤器password_hash
user模块的password不能设置密码,password是把字符串直接写入shadow,而linux的shadow密码是经过加密的,加密算法是:sha512所以不能用password设置密码.
\[root@room9pc01 ansible\]# cat user01.yml
\-\--
\- hosts: db
remote_user: root
vars:
username: plj
tasks:
\- shell: id \"{{username}}\"
register: res
\- user:
name: \"{{username}}\"
password: \"{{\'123123\'\|password_hash(\'sha512\')}}\"
#将123123使用sha512加密方式加密
when: res
## 使用时-e传参
\[root@ansible \~\]# ansible-playbook user.yml -e
\"{\'username\':\'nb\'}\" #传参定义
## 调用yml文件
\[root@ansible \~\]# vim args.yml
\-\--
\"username\":
\"wk\"
\[root@ansible \~\]# ansible-playbook user.yml -e \"@args.yml\"
## 系统命令扩展true 与 false
作用:true只是将\$?变为1 false只是将\$?变为0
\[root@db1 \~\]# \$?
-bash: 0: 未找到命令
\[root@db1 \~\]# echo \$?
127
\[root@db1 \~\]# true
\[root@db1 \~\]# echo \$?
0
\[root@db1 \~\]# false
\[root@db1 \~\]# echo \$?
1
## error
ansible-playbook对错误的处理: 默认情况判断\$?,如果值不为0就停止执行
但是在有些情况下需要忽略错误继续执行
\-\--
\- hosts: db
remote_user: root
vars:
username: dd
tasks:
\- name: add user \"{{username}}\"
user:
name: \"{{username}}\"
ignore_errors: true
#如果被创建用户已存在,则忽略\$?继续往下执行,可达到修改密码作用
group: mysql
\- name: change \"{{username}}\" password
shell: echo 123456\|passwd \--stdin \"{{username}}\"
第二种方法:name: \"{{username}}\" \|\| true
## handlers:
当关注的资源发生变化时采取的操作
notify(通知)这个action(行动)可用于在每个play的最后被触发,这样可以避免有多次改变发生时每次都执行指定的操作,取而代之仅在所有的变化发生完成后一次性的执行指定操作
在notify中列出的操作称为handler,即notify调用handler中定义的操作
\[root@web1 \~\]# vim /etc/httpd/conf/httpd.conf
Listen 8080
\-\--
\- hosts: web1
remote_user: root
tasks:
\- yum:
name: httpd
state: installed
\- lineinfile:
path: /etc/httpd/conf/httpd.conf
regexp: \'\^Listen\'
line: \'Listen 80\' #修改端口
tags: httpconf #给这个任务定义一个调用标签,执行时可调用
notify: reload httpd
#直接调用下面,仅执行下面的操作,#等于就是修改端口后直接重启httpd
\- lineinfile:
path: /etc/httpd/conf/httpd.conf
regexp: \'\^#ServerName \'
line: \"ServerName localhost\"
handlers:
\- name: reload httpd #命名
\- service:
name: httpd
state: restarted
enabled: yes
\[root@ansible \~\]# ansible-playbook http.yml \--tags=httpconf
#执行时添加标签
\[root@ansible \~\]# ansible-playbook http.yml -t httpconf #此方法待测试
![LINUXNSD_V01ARCHITECTUREDAY02_045](media/image98.png){width="5.024305555555555in"
height="2.810416666666667in"}
## when
![LINUXNSD_V01ARCHITECTUREDAY02_047](media/image99.png){width="7.264583333333333in"
height="3.792361111111111in"}
![LINUXNSD_V01ARCHITECTUREDAY02_048](media/image100.png){width="7.264583333333333in"
height="3.9381944444444446in"}
## register
判断前面的命令的执行结果,取处理后面的操作,,register模块保存前一个命令的返回状态,在后面进行调用
### register变量注册:
例如:判断一个用户是否存在,如果存在就修改密码.如果不存在就跳过
\-\--
\- hosts: db
remote_user: root
vars:
username: dd
tasks:
\- shell: id \"{{username}}\"
register: res #上面的命令执行返回状态(执行成功为0 不成功为1),放入res文件
\- user:
name: \"{{username}}\"
password: \"{\'121212\'\|password_hash(\'sha512\')}\"
when: res
#调用res里面状态并判断,默认判断的是命令状态返回值\$?,为0则修改密码
### register变量注册进阶
针对运行命令结果的返回值做判定.当系统负载超过一定值的时候做特殊处理
\[root@room9pc01 ansible\]# cat load1.yml
\-\--
\- hosts: web
remote_user: root
tasks:
\- shell: uptime \|awk \'{printf(\"%.2f\",\$(NF-2))}\' #获取系统负载
register: result
\- service:
name: httpd
state: stopped #停止httpd服务
when: result.stdout\|float \> 0.6 #判断系统负载大于0.6则执行,
\[root@web1 \~\]# watch -n 0.5 uptime #每隔0.5s执行一遍uptime
## with_itms 
![LINUXNSD_V01ARCHITECTUREDAY02_053](media/image101.png){width="7.264583333333333in"
height="4.146527777777778in"}
![LINUXNSD_V01ARCHITECTUREDAY02_054](media/image102.png){width="7.264583333333333in"
height="4.948611111111111in"}
课堂案例:创建不同用户,设置不同的密码.指定不同附加组
\[root@room9pc01 ansible\]# cat user02.yml
\-\--
\- hosts: web
remote_user: root
tasks:
\- user: