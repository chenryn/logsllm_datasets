S-再看tomcat架构与请求处理流程
tomcat核心功能
1. http服务器，socket通信（TCP/IP）
2. servlet容器
http服务器--coyote
1. EndPoint组件：用于处理连接请求，也就是接收客户端发来的请求
2. Processor组件：用于应用层处理http请求，封装http报文。
server.xml 配置文件
Tomcat启动过程源码剖析
tomcat统一生命周期管理
接口类 java.org.apache.catalina.Lifecycle ，以及继承结构关系。 
tomcat启动流程
启动类： java.org.apache.catalina.startup.Bootstrap#main()  
初始化： bootstrap.init()->initClassLoaders()->自定义类加载器 ，在之前学习类加载的过程
当中，学习了关于 tomcat 重写类加载器的过程，通过重写 findClass，loadClass 打破了双亲委
派模型，实现了自定义的类加载。
最终是通过 ClassLoaderFactory.createClassLoader 来创建类加载器，首先是创建 common 类
加载器，可以看到传递的 parent 类是空。之后再将这个 common 当作父加载器，初始化其他两个
类加载器。
初始化2-load：初始化之后就是 load 的过程。 Bootstrap#load() -
> org.apache.catalina.startup.Catalina#load() ，中间都是通过反射进行调用。 
第545行通过 configFile 方法获取 tomcat 的配置文件 conf/server.xml 。
初始化3-start：完成 load() 过程， Bootstrap 执行到 start 方法当中，进行启动。 load 过程用
于初始化， start 进行启动。
初始化阶段-daemon.load(args)
调试入口： java.org.apache.catalina.startup.Bootstrap#main()->daemon.load()  
java.org.catalina.startup.Catalina#load() 方法中，有一步 Digester digester = 
createStartDigester(); 创建一个 xml 解析对象，然后再使用 digester.parse() 进行 xml 正
式的解析，解析成功之后，返回一个对象。关于对象的创建可以看第二张图，通过扫描 xml 的节
点，然后通过 java.org.apache.tomcat.util.digester#ObjectCreateRule() 方法调用反射
创建对象。
在成功返回 root 节点之后，执行 getserver().init() ，对 server 进行初始化。这个 init()
方法是 LifecycleBase#init() 方法，所有的组件都继承实现 Lifecycle 生命周期接口，用于实
现生命周期管理。之后再进入 standardserver 的 initInternal 方法进行初始化。在该方法中
实现对 service 的初始化，流程和 sever 一致。 
service的初始化，前期也是生命周期管理，然后进入到 StandardService#initInternal() ，
在 service 中包含 connector 和 container ，因此初始化的过程需要完成连接器和容器两个组件
的初始化。
首先还是 engine.init() ，先是生命周期初始化，然后转到
StandardEngine#initInternal() -> super.initInternal() 。engine组件的初始化，创建一
个线程池，这个线程池在engine组件的start阶段使用，在初始化阶段不进行 engine 的初始化。 
再然后连接器初始化 connector.init() -
> java.org.apache.catalina.connector.Connector#initInternal() ，先是创建一个
CoyoteAdapter 适配器，将之后得到的 Request 和 Response 转换为 servletRequest 和
servletResponse 对象。之后进入到 protocolHandler.init() ，在
protocolHandler.init() 中进行 endpoint.init() ，就是进行端口绑定，然后接收请求。 
初始化阶段总结图
启动阶段->daemon.start()
最开始的步骤和 load 阶段非常类似，着重点放在 engine.start() 之后。
StandardService#engine.start() -> LifyecycleBase#start() -
> StandardEngine#startInternal() -> super(ContainerBase).startInternal() 。通过
findChildren(); 找到定义的子容器封装为 StandardHost 对象。之后通过 submit 方法，执行线
程池。
进入 standardHost#start() 流程还是一样的，所以这里直接来到
StandardHost#startInternal() ，首先会获取server.xml定义的阀和基础阀，然后看里面有没
有errorValve，没有的话添加一个。然后在进入 super.startInternal(); ，也就是
ContainerBase.startInternal() 。 
在 ContainerBase.startInternal() 首先关注 StandardPipeline 的初始化，就是刚才定义的
几个阀的启动。阀启动完之后进入 setState(LifecycleState.STARTING); ，正儿八经的启动过
程。
setState(LifecycleState.STARTING); 是通过设置生命周期状态，通过触发host的生命周期时
间 fireLifecycleEvent 来执行后续实例化 Contenxt 的工作。
setState(LifecycleState.STARTING) -> LifecycleBase#setStateInternal() -
> LifecycleBase#fireLifecycleEvent -> HostConfig#lifecycleEvent()  
这个 HostConfig 是一个生命周期监听器，当捕获到启动事件，进入到 HostConfig#Start() 方
法。之后进入到 HostConfig#deployApps() 方法，这个方法便是项目包的部署。 
deployApps() 可以部署不同种类的 Context ，可以是 war 包形式，可以是文件夹形式。进入
deployDirectories#run() 。第1087行，还是以多线程的方式去启动不同的 context 。进入到
deployDirectories#run() -> HostConfig.deployDirectory() ，最后一步
host.addChild(context); ，将 context 添加到 Host 当中。此时的 Context 不完整需要进一步
封装 Wrapper 。 
进入 host.addChild() -> super(ContainerBase).addChild(child) -> addChildInternal -
> LifecycleBase#start() -> StandardContext#startInternal 。 
在这个 StandardContext#startInternal 经过处理，关键部分在
fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null); ，发出生命周期事件，调
度 ContextConfig ，读取 web.xml ，这里也就是读取某一个项目的 web.xml ，这个
ContextConfig 也是一个事件监听器。 
进入到 configureStart() 然后执行 webConfig() 解析 web.xml ，解析过程中就会封装
wrapper ，通过 configureContext(webXml) 来创建，其中创建 wrapper 的过程有用到
StandardContext.creatwrapper ，这个也是 sevlet 内存马的关键地方。 
当整个生命周期的过程结束，回到 StandardContext.startInternal ，查看已经封装好的
wrapper 。此处已经有了 wrapper 的信息，但是还没有创建 wrapper 实例，继续执行到
loadOnStartup(findChildren()) 。首先判断是否在tomcat启动过程中创建实例，也就是
web.xml 中的 startup 参数配置是否大于0。将全部大于0的servlet放入list当中，然后进入
wrapper.load() 创建实例。到此呢 engine.start 的过程基本结束。 
初始化阶段总结图
servlet请求链路分析
问题
一个 Servlet 请求是如何被 tomcat 处理的？-->找到能处理当前请求的 servlet 实例。
请求处理分析流程需要关注的是 start 过程中的 Connector 过程，其中有一个 Poller 线程，用
于监听可以被处理的 channel ,因此这个是请求处理的入口。 
经过中间过程的处理，最后通过 org.apache.coyote.http11.Http11Processor.java 开始封
装 request 和 response 两个对象。 
之后将 request 和 response 两个请求交给 adapter 进行处理，将 request 和 response 转换
servletRequest 和 servletResponse  
重点来了：找到能够处理当前请求的 servlet 容器，在这个 postParseRequest 方法中会根据请
求信息找到能够处理当前请求的 HOST->CONTEXT->WRAPPER(servlet) ，他又是如何找到的呢？引
入 tomcat 的 Mapper 机制。 
在 tomcat 中使用 Mapper 重新封装了 Host-Context-wrapper 之间的数据和关系。这个 Mapper 的
封装位置位于启动阶段，在 engine 和 connector 启动完成之后。通过一个 MapperListen 启
动。
进入到 postParseRequest 方法之后，关键代码是
connector.getService().getMapper().map(serverName,decodedURI,version,request.g
etMappingData());  
单独拆解各个函数的作用。 connector.getService() 获取当前的 service ，然后通过
getMapper() 获取到之前封装好的 Mapper 对象，也就是获取到 Host-Context-Wrapper 之间的对
应关系。之后就是进入这个 map 方法。整个处理逻辑结束之后，会将处理结果填充到
reqquest.getMappingData() 获取的对象当中。 
在 map 方法中调用了 internalMap() 方法。在这里会找到 uri 和 servlet 的映射关系。在
internalMap() 中最开始是根据 uri 与 context 找到对应的关系,这个 context.versions 就封
装了这个 context 内部的全部 wrapper 和一些配置文件设置，然后在进入
internalMapWrapper() 查找对应的 wrapper`之间的关系。 
internalMapWrapper() 方法中进行 wrapper 的查找，重要的是进入
internalMapExactWrapper() 方法当中，因为这个匹配会成功，在里面也填充了 mappingData
属性。
在上述的 postParseRequest 解析完成之后，就开始调用容器进行处理了。 
上面这一步会进入到Engien层，去寻找Host 
进入Engien之后又会去寻找Host 
最后来到Context层，最后调用servlet进行处理 
执行 servlet 的过程是 StandardWrapperValve.java  
第173行,将servlet封装进入filterChain中一起执行. 
执行filterChain,这一步也就是执行servlet 
这里有一个，就是整个容器处理的流程都是以 管道 和 阀 的机制来进行的，这个 valve 也是实现内
存马的一个重要的方法。