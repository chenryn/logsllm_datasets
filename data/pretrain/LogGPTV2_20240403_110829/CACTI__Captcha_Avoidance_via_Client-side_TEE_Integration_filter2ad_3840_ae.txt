ilar image-based text recognition CAPTCHAs, as well as
challenge-based CAPTCHAs consisting of simple algebraic
operations on random integers. Noise is introduced by varying
the text color and adding parabolic lines.
2572    30th USENIX Security Symposium
USENIX Association
Figure 7: Latency of initializing the enclave and creating a
rate-proof for different numbers of timestamps in the query
(excluding signature operations).
Figure 8: Latency of creating the ﬁrst rate-proof in a new list
for different numbers of existing lists (excluding enclave ini-
tialization and signature operations).
Figure 9: Latency of initializing the enclave and updating an
existing list for different numbers of existing lists (excluding
signature operations).
Figure 10: Microbenchmarks of signature operations. ECDSA
signatures were created and veriﬁed using the mbed TLS li-
brary [13] and EPID signatures with the Intel EPID SDK [5].
(a) dchest/captcha image-based CAPTCHA [17].
(b) produck/svg-captcha image-based CAPTCHAs [21].
Figure 11: CAPTCHAs generated using open-source libraries.
Table 3 shows the time to generate different types of
CAPTCHAs using the above libraries with typical conﬁgura-
tion parameters (e.g., eight characters for text CAPTCHAs).
Since CAPTCHA veriﬁcation with these libraries is a sim-
ple string comparison, we assume this is negligible. CACTI’s
server-side processing is due almost entirely to the EPID sig-
nature veriﬁcation operation. We expect that this time could
be improved by using more optimized implementations of
this cryptographic operation. Additionally, CACTI uses signif-
icantly less communication bandwidth than other approaches,
which also reduces the server load (which is not captured
in this measurement). Most importantly, the biggest gain of
CACTI is on the user side; saving more than ~10 seconds per
CAPTCHA for users.
USENIX Association
30th USENIX Security Symposium    2573
10100100020005000750010000NumberofTimestampsinQuery0510152025303540QueryLatencyinHostApp[ms]Post-EnclaveIn-EnclavePre-EnclaveInit-Enclave816128102420484096NumberofExistingNodesinMerkleTree0.02.55.07.510.012.515.017.5QueryLatencyinHostApp[ms]Post-EnclaveIn-EnclavePre-Enclave816128102420484096NumberofExistingNodesinMerkleTree010203040506070QueryLatencyinHostApp[ms]Post-EnclaveIn-EnclavePre-EnclaveInit-EnclaveECDSA-SignECDSA-VerifyEPID-SignEPID-VerifyCryptographicOperation020406080100120Latency[ms]Table 1: End-to-End Latency of CACTI for different numbers of timestamps and lists. The Browser column represents the latency
of the browser extension marshalling data to and from the host application. The other columns are as described above.
ECDSA-Sign Browser Pre-Enclave
7.7 ms
15.2 ms
6.3 ms
In-Enclave Post-Enclave EPID-Verify
27.3 ms
181.7 ms
1.0 ms
Total
239.2 ms
6.3 ms
15.2 ms
1.8 ms
157.4 ms
2.0 ms
27.3 ms
210.0 ms
10,000 timestamps
in 1 list
4,096 lists with 1
timestamp each
Table 2: Additional data received and sent by the client for
image-based and behavior-based reCAPTCHA, compared
with CACTI.
7 Discussion
7.1 PA Considerations
Image-based
Behavior-based
CACTI
Received
140.05 kB
54.38 kB
0.82 kB
Sent
28.97 kB
26.12 kB
1.10 kB
Total
169.02 kB
80.50 kB
1.92 kB
Table 3: Server-side processing time for generating a
CAPTCHA and verifying the response.
Library
dchest/captcha
produck/svg-captcha
CACTI
Type
Audio
Image-based text
Image-based text
Image-based math
Rate-proof
Time
13.3 ms
1.7 ms
2.2 ms
1.4 ms
33.6 ms
6.5 Deployability Analysis
We analyze deployability of CACTI by considering changes
required from both the server’s and client’s perspectives:
Server’s perspective. The server will have to make the fol-
lowing changes: (1) create and maintain a new public/private
key pair and obtain a certiﬁcate for the public key, (2) add an
additional div to pages for which they wish to enable CACTI,
(3) create and sign requests using the private key, and (4) add
an HTTP endpoint to receive and verify EPID signatures. The
server-side deployment could be further simpliﬁed by pro-
viding the request generation and signature operations as an
integrated library.
Client’s perspective. The client will have to make the fol-
lowing changes: (1) download and install the CACTI native
software, and (2) download and install the browser extension.
Although CACTI requires the client to have a suitable TEE,
this is a realistic assumption given the large and increasing
deployed base of devices with e.g., ARM TrustZone or Intel
SGX TEEs.
As discussed in Section 4.3, CACTI’s use of a provisioning
authority (PA) provides the basis for client privacy. CACTI
does not prescribe the PA’s policies. For example, the PA has
the choice of running the provisioning protocol (Figure 2)
as a one-off operation (e.g., when installing CACTI) or on
a regular basis, depending on its risk appetite. If there are
attacks or exploits threatening the Intel SGX ecosystem (and
consequently the security of group private keys), the PA can
revoke all group member keys. This would force all enclaves
in the group to re-register with the PA. A similar scenario ap-
plies if key-rotation is implemented on the PA, e.g., the master
secret held by the PA is rotated periodically. This forces all
enclaves to regularly contact the PA to obtain new group mem-
ber keys. Frequent key-rotation introduces a heavier burden
on the clients (although this can be automated), but provides
better security.
7.2 EPID
Even though CACTI uses EPID group signatures to protect
client privacy, CACTI is agnostic to the choice of the underly-
ing signature scheme as long as it provides signer unlinkabil-
ity and anonymity. We also considered other schemes, such
as Direct Anonymous Attestation (DAA) [28], as used in the
Trusted Platform Module (TPM). However, DAA is suscepti-
ble to various attacks [29, 45, 56] and, due to its design target-
ing low-end devices, suffers from performance problems. In
contrast, EPID is used in current Intel SGX remote attestation
and is thus a good ﬁt for enclaves. Moreover, as mentioned in
the previous section, the PA must revoke group member keys
in the event of a compromise. EPID offers privacy-preserving
signature-based revocation, wherein the issuer can revoke any
key using only a signature generated by that key. Signature
veriﬁers use signature revocation lists published by issuers to
check whether the group member keys are revoked. Using this
mechanism, CACTI provides PAs with revocation capabilities
without allowing them to link keys to individual users. PAs
can deﬁne their own revocation policies to maximize their
reputation and trustworthiness.
2574    30th USENIX Security Symposium
USENIX Association
7.3 Optimizations
7.3.1 Database Optimizations
As with most modern database management systems, SQLite
supports creating indexes in database tables to reduce query
times. Also, as discussed in Section 6, placing all timestamps
for all servers in one table and conducting JOIN operations
incurs performance overhead. An alternative is to use a sepa-
rate table per list. However, we presented CACTI evaluation
results without creating any indexes or separate timestamp
tables in order to show the worst-case performance. Perfor-
mance optimizations, such as changing the database layout,
can be easily made by third parties, since they do not affect
the security of CACTI.
7.3.2 System-level Optimizations
As a system-level optimization, CACTI can perform some
processing steps in the background while waiting for the
user to conﬁrm the action. For example, while the browser
extension is displaying the notiﬁcation and waiting for user
approval, the request can already be sent to the enclave to
begin processing (e.g., loading and verifying the hash chain
of timestamps and the MHT). The enclave creates the signed
rate-proof but does not release it or update the hash chain
until the user approves the action. This optimization reduces
user-perceived latency to that of client-side post-enclave and
server-side EPID veriﬁcation processes, which is less than
14% of the end-to-end latency reported in Section 6.2.4.
7.3.3 Optimizing Pruning
Although it is possible to create another ECALL for pruning,
this might incur additional enclave entry/exit overhead (see
Section 4.2). Instead, pruning can be implemented within the
get_rate ECALL. Since get_rate already updates the hash
chain and MHT, the pruning can be performed at the same
time, thus eliminating the need for an additional ECALL and
hash chain and MHT update.
7.4 Deploying CACTI
7.4.1 Integration with CDNs and 3rd Party Providers
Although CACTI aims to reduce developer effort by choosing
well-known primitives (e.g., SQLite and EPID), we do not
expect all server operators to be experienced in implementing
CACTI components. The server-side components of CACTI
can be provided by Content Delivery Networks (CDNs) or
other independent providers.
CDNs are widely used to reduce latency by serving web
content to clients on behalf of the server operator. CDNs
have already recognized the opportunity to provide abuse
prevention services to their customers. For example, Cloud-
ﬂare offers CAPTCHAs as a free rate-limiting service [4] to
its customers [14]. CACTI could easily be adapted for use
by CDNs, which would bring usability beneﬁts across all
websites served by the CDN.
In addition, independent CACTI providers could offer
rate-proof services that are easy to integrate into websites
– similar to how CAPTCHAs are currently offered by re-
CAPTCHA [18] or hCAPTCHA [7]. These services would
implement the endpoints described in Section 5.4 and could
be integrated into websites with minimal effort.
7.4.2 Website Operator Incentives
There are several incentives for website operators to support
CACTI. Firstly, in terms of usability, CACTI can drastically
improve user experience by allowing legitimate users to avoid
having to solve CAPTCHAs. Secondly, in terms of privacy,
some concerns have been raised about existing CAPTCHA
services [14]. By design, CACTI rate-proofs cannot be linked
to speciﬁc users or to other rate-proofs created by the same
user. Thirdly, in terms of bandwidth usage, CACTI requires an
order of magnitude less data transfer than other CAPTCHA
systems.
User demand for privacy-preserving solutions that reduce
the amount of time spent solving CAPTCHAs has led Cloud-
ﬂare to offer Privacy Pass [35], a system designed to reduce
the number of CAPTCHAs presented to legitimate users, es-
pecially while using VPNs or anonymity networks [23].
7.4.3 PA Operator Incentives
In CACTI, PAs are only involved when provisioning creden-
tials to CACTI enclaves (i.e., not when the client produces a
rate-proof). This is a relatively lightweight workload from
a computational perspective. PAs could be run by various
different organizations with different incentives, for example:
1. TEE hardware vendors wanting to increase the desirabil-
ity of their hardware;
2. Online identity providers (e.g., Google, Facebook, Mi-
crosoft) who already provide federated login services;
3. For-proﬁt businesses that charge fees and provide e.g., a
higher level of assurance;
4. Non-proﬁt organizations, similarly to the Let’s Encrypt
Certiﬁcate Authority service.
CACTI users can, and are encouraged to, register with mul-
tiple PAs and randomly select which private key to use for
generating each rate-proof. This allows new PAs to join the
CACTI ecosystem and ensures that clients have maximum
choice of PA without the risk of vendor lock-in.
7.4.4 Client-side components
On the client-side, CACTI could be integrated into web
browsers, and would thus work “out of the box” on platforms
with a suitable TEE.
USENIX Association
30th USENIX Security Symposium    2575
8 Related Work
CACTI is situated in the intersection of multiple ﬁelds of
research, including DoS (or Distributed DoS (DDoS)) pro-
tection, human presence, and CAPTCHA improvements and
alternatives. In this section, we discuss related work in each
of these ﬁelds and their relevance to CACTI.
Network layer defenses. The main purpose of network
layer DoS/DDoS protection mechanisms is to detect mali-
cious network ﬂows targeting the availability of the system.
This is done by using ﬁltering [47] or rate-limiting [32] (or
a combination thereof) according to certain characteristics
of a ﬂow. We refer the reader to [52] for an in-depth survey
of network-level defenses. Moreover, additional countermea-
sures can be employed depending on the properties of the
system under attack (e.g., sensor-based networks [51], peer-
to-peer networks [53] and virtual ad-hoc networks [44]).
Application layer defenses. Application layer measures
for DoS/DDoS protection focus on separating human-
originated trafﬁc from bot-originated trafﬁc. To this end, prob-
lems that are hard to solve by computers and (somewhat) easy
to solve by humans comprise the basis of application layer so-
lutions. As explained in Section 1, CAPTCHAs [58] are used
extensively. Although developing more efﬁcient CAPTCHAs
is an active area of research [34, 41, 57, 59], research aiming
to subvert CAPTCHAs is also prevalent [39, 40, 49, 61]. In
addition to such automated attacks, CAPTCHAs suffer from
inconsistency when solved by humans (e.g., perfect agree-
ment when solved by three humans are 71% and 31% for
image and audio CAPTCHAs, respectively [31]). [50] sug-
gest that although CAPTCHAs succeed at telling humans and
computers apart, by using CAPTCHA-solving services (oper-
ated by humans), with an acceptable cost, CAPTCHAs can
be defeated. Moreover, apart from questions regarding their
efﬁcacy, one other concern about CAPTCHAs is their usabil-
ity. Studies such as [31, 38] show that CAPTCHAs are not