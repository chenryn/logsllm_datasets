title:25 million flows later: large-scale detection of DOM-based XSS
author:Sebastian Lekies and
Ben Stock and
Martin Johns
25 Million Flows Later - Large-scale Detection of
DOM-based XSS
Sebastian Lekies
SAP AG
PI:EMAIL
Ben Stock
FAU Erlangen-Nuremberg
PI:EMAIL
Martin Johns
SAP AG
PI:EMAIL
Abstract
In recent years, the Web witnessed a move towards sophis-
ticated client-side functionality. This shift caused a signiﬁ-
cant increase in complexity of deployed JavaScript code and
thus, a proportional growth in potential client-side vulnera-
bilities, with DOM-based Cross-site Scripting being a high
impact representative of such security issues. In this paper,
we present a fully automated system to detect and validate
DOM-based XSS vulnerabilities, consisting of a taint-aware
JavaScript engine and corresponding DOM implementation
as well as a context-sensitive exploit generation approach.
Using these components, we conducted a large-scale analy-
sis of the Alexa top 5000. In this study, we identiﬁed 6167
unique vulnerabilities distributed over 480 domains, show-
ing that 9,6% of the examined sites carry at least one DOM-
based XSS problem.
Categories and Subject Descriptors
H.4.3 [Communications Applications]: Information
browsers; H.6.5 [Security and Protection]: Unauthorized
access
Keywords
DOM-based XSS, Taint Tracking, Vulnerability Detection,
Exploit Generation
1.
INTRODUCTION
The times in which JavaScript was mainly used for eye
candy and small site enhancements are long gone. Since
the advent of the so-called Web 2.0, the Web browser is the
host of sophisticated, complex applications, such as Gmail or
Google Docs, written entirely in JavaScript, that rival their
desktop equivalents in scope and features. More and more
functionality, which in traditional Web applications would
have been implemented on the server, moves to the client.
Consequently, the amount of required JavaScript code is in-
creasing proportionally to this shift. Furthermore, the capa-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516703.
bilities of client-side JavaScript are continuously increasing,
due to the steady stream of new “HTML5” APIs being added
to the Web browsers.
In parallel to this ever growing complexity of the Web’s
client side, one can observe an increasing number of security
problems that manifest themselves only on the client [26,
11, 17]. One of these purely client-side security problems
is DOM-based XSS [16], a vulnerability class subsuming all
Cross-site Scripting problems that are caused by insecure
handling of untrusted data through JavaScript. DOM-based
XSS is caused by unsafe data ﬂows from attacker-controlled
sources, such as the document.location property, into se-
curity sensitive APIs, e.g., document.write.
While the existence of DOM-based XSS is known since
2005 [16], this vulnerability class is frequently still perceived
as a minor, fringe issue, especially when being compared to
reﬂected and persistent XSS. In this paper, we re-evaluate
this assumption and examine how prevalent DOM-based
XSS is in the wild.
Unfortunately, testing of client-side security properties in
general, and DOM-based XSS in particular, is diﬃcult. In
comparison to the conditions on the server side, the Web’s
client side has several challenges that aﬀect both static and
dynamic security testing approaches: For one, all server-side
code is completely under the control of the application’s op-
erator and available for processing, monitoring and analysis.
This is not the case at the Web’s client-side, where the code
execution occurs on the user’s machine. Furthermore, com-
pared to server-side languages such as Java or C#, a large
portion of JavaScript code frequently relies on runtime inter-
pretation of string data as executeable code via APIs such
as eval(). The resulting code is interpreted and executed
on the client, making it invisible to the server. Finally, it
is common practice for modern Web applications to include
third-party JavaScript code using script-tags that point to
cross-domain hosts. In 2002, Nikiforakis et al. [22] measured
that 88.45% of the Alexa top 10,000 web sites included at
least one remote JavaScript resource from a cross-domain
host. This JavaScript is transported directly from the third-
party provider to the user’s Web browser and gets executed
immediately. Thus, this code is neither directly controlled
by the application nor is it visible at the server.
In this paper, we propose a fully automated system to
identify DOM-based XSS issues, that overcomes the outlined
obstacles through integrating the vulnerability detection di-
rectly into the browser’s execution environment. Our system
consists of a taint-aware JavaScript engine and DOM imple-
1193mentation as well as a context-sensitive exploit generation
technique.
The main contributions of this paper are the following:
• We present the design and implementation of a dy-
namic, byte-level taint-tracking approach in JavaScript
engines. Through directly altering the JavaScript en-
gine’s implementation of the low-level string type, we
achieve complete coverage of all JavaScript language
features and the full DOM API.
• We propose a novel, fully automatic vulnerability vali-
dation mechanism, that leverages the ﬁne-grained con-
text information provided by our taint-aware Java-
Script engine. Due to our exact knowledge of data
source and syntactical context of the ﬁnal data sink,
our system can create attack payloads that match the
syntactic surroundings of the injection point. This
in turn allows unambiguous vulnerability validation
through veriﬁcation that our injected JavaScript was
indeed executed. Thus, our system reports no false
positives.
• We report on a large-scale empirical study on insecure
data ﬂows in client-side JavaScript and the resulting
DOM-based XSS vulnerabilities.
In total, we exam-
ined 504,275 URLs resulting from a shallow crawl of
the Alexa top 5000 sites.
In this study we observed
a total of 24,474,306 ﬂows out of which 69,987 caused
validated DOM-based XSS exploits, resulting in 6,167
unique vulnerabilities aﬀecting 9,6% of the examined
sites.
The remainder of this paper is organized as follows: First
we brieﬂy revisit the technical background of DOM-based
XSS (Sec. 2) and give a high-level overview of our approach
(Sec. 3). Then, we describe our techniques for vulnerability
detection (Sec. 4) and validation (Sec. 5). In Section 6 we
present the methodology and results of our empirical study.
We end the paper with a discussion of related work (Sec. 7)
and a conclusion (Sec. 8).
2. DOM-BASED XSS
Cross-Site Scripting is an attack in which an attacker is
able to inject his own JavaScript code into a Web appli-
cation, in such a way that the code is executed within a
victim’s browser in the context of the application. Since
2000, when one of the ﬁrst XSS vulnerabilities was reported
[3], novel attack variants were discovered.
In 2005, Amit
Klein published a paper in which he ﬁrst mentioned the
term DOM-based XSS and described the basic character-
istics of this vulnerability [16].
In contrast to traditional
(reﬂected and persistent) Cross-Site Scripting, DOM-based
XSS is caused by incorrect client-side code rather than by
server-side code. As described earlier, the dynamic nature
of this client-side code makes it hard to detect or verify this
kind of vulnerability.
In order to trigger a DOM-based XSS exploit an attacker
is able to utilize a multitude of diﬀerent attack vectors to
inject his malicious payload (such as location.href, docu-
ment.referrer, window.name, and many, many more). De-
pending on the Web application’s program logic, it processes
attacker-controllable inputs and at some point in time con-
ducts a string-to-code conversion. As shown in our empirical
study, this is a very common scenario. If input is not san-
itized correctly, the attacker may be able to inject his own
code into the application. Thereby, diﬀerent subtypes of
DOM-based XSS exist depending on the method used for
converting the string to code:
HTML context.
Web applications commonly insert generated HTML code
into the DOM via functions such as document.write, in-
nerHTML or insertAdjacentHTML. When these functions are
called, the browser parses the string parameter and inter-
prets the contents as HTML code, which is then inserted
into a certain position within the DOM. If user input ﬂows
into these sinks, sanitization or encoding functions have to
be used in order to avoid code injection vulnerabilities. If
the input is not sanitized correctly an attacker is able to
inject own HTML tags including , which enables
JavaScript execution. For the speciﬁc diﬀerences between
innerHTML and document.write, we refer the reader to Sec.
5.2.1.
JavaScript context.
Another commonly used method, which is sometimes vul-
nerable to DOM-based XSS, is the eval function. eval takes
a string parameter, interprets it as JavaScript code and ex-
ecutes it. Besides eval and its aliases setTimeout and set-
Interval, there are also other contexts in which strings are
converted into JavaScript code such as script.innerText,
script.text, script.textContent and the assignment of
strings to event handler attributes.
URL context.
If an attacker-controlled input ﬂows into a URL attribute
of any DOM node (such as img.src, iframe.src, object.
data or a.href), an immediate conversion from a string to
code does not occur. However, there are still several security
problems related to this kind of ﬂows. For example, if the
attacker is able to control the complete URL, he could make
use of the javascript: or data: schemes to execute script
code. If only parts of the URL are controlled, the attacker
could still conduct redirects or phishing and in some cases
even achieve JavaScript code execution as shown in Section
6.5.1.
Other contexts.
Besides those contexts that allow code execution, there
are further sinks/contexts that are security sensitive such
as document.cookie, the Web Storage API, postMessage or
setAttribute.
In Section 6.5.3, for example, we present
a persistent DOM-based XSS vulnerability via document.
cookie, which was discovered by our framework.
3. APPROACH OVERVIEW
In this paper, we propose a system to automatically de-
tect and validate DOM-based XSS vulnerabilities. To ad-
dress the outlined challenges in the assessment of client-side
security problems (see Sec. 1), we decided to address the
problem as follows: Instead of building analytical processes
that complement [29] or emulate [25] the client-side behav-
ior, we chose to integrate our techniques directly into a full
browser.
1194More precisely, our system consists of two separate com-
ponents: For vulnerability detection, we utilize a modiﬁed
browsing engine that supports dynamic, byte-level taint-
tracking of suspicious ﬂows. Through directly altering the
engine’s string type implementation, we achieve complete
coverage of all JavaScript language features and the full
DOM API. We discuss the design and implementation in
Section 4.
The second component is a fully automated vulnerability
validation mechanism, that leverages the ﬁne-grained con-
text information provided by our taint-aware browsing en-
gine. Due to the exact knowledge of data source and syn-
tactical context of the ﬁnal data sink, our system is able to
create attack payloads that match the syntactic surround-
ings of the injection point. This in turn allows unambigu-
ous vulnerability validation through veriﬁcation that our in-
jected JavaScript was indeed executed. This component is
presented in Section 5.
4. VULNERABILITY DETECTION: MOD-
IFIED CHROME
To automatically detect the ﬂow of potentially attacker-
controllable input (called a source) into a sink in the sense of
DOM-based XSS, we decided to implement a dynamic taint-
tracking approach. To ensure that edge-cases, which might
not be implemented properly into pure testing engines like
HTMLUnit, were to be properly executed, we chose to im-
plement taint-tracking into a real browser. For this, we mod-
iﬁed the open-source browser Chromium in such a manner
that its JavaScript engine V8 as well as the DOM implemen-
tation in WebKit were enhanced with taint-tracking capabil-
ities. For both components of the browser, we selected to use
a byte-wise taint-tracking approach built directly into the re-
spective string representations. In this fashion, we enabled
our tool to not only distinguish between a completely un-
tainted string and a string containing any potentially harm-
ful content, but also to speciﬁcally get information on the
origin of each given character in said string.
4.1 Labeling sources and encoding functions
To keep the memory overhead as small as possible, we
chose to implement our approach in such a way, that in-
formation on a given character’s source is encoded in just
one byte. We therefore assigned a numerical identiﬁer to
each of the 14 identiﬁed sources (e.g. location.href, lo-
cation.hash or document.referrer). Hence, we were able
to encode this information into the lower half of the byte.
To also be able to determine whether a given character was
encoded using the built-in functions encodeURI, encodeURI-