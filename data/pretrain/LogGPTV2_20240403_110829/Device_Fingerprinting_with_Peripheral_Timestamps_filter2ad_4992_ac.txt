(8)
√−1. Peaks in P (f ) for which f ≤ f R
where j =
2
indicate the presence of periodic behavior. Note that in general
Equation 6 requires f to be very close to f S in order to
detect a peak; however, with a 1kHz reference clock (i.e.,
millisecond timestamps), greater tolerance is allowed and the
spectral density estimates are “binned” as described in [41].
For additional background, see [41] and [43].
We estimate the frequency of the subject clock by
ˆf S = arg max
f
P (f )
(7)
which corresponds to the dominant frequency in the peri-
odogram. This generally requires a ﬁne search over f, and we
form the estimate ˆf S in a two step process to reduce computa-
tion. First, ˆf S is estimated using a coarse grid of integer-valued
frequencies, f ∈ {1, . . . , 500}. This reveals which process
or device class the subject clock belongs to since P (f ) will
exhibit peaks near choices of f that correspond to the subject
clock’s resolution. This estimate is then reﬁned through a ﬁne
grid search centered around the peak (see Section IV-A).
Note that the reference clock frequency places an upper
bound on the measurable subject clock frequency due to the
it’s necessary that f R (cid:29) f S. This
Nyquist
suggests an approach to mitigate ﬁngerprinting, and web
browsers have in fact adjusted the way time is reported through
theorem, i.e.,
(cid:107)
is bounded above by tR
(cid:106) tR
ﬁt to points(cid:8)(cid:0)tR
where ˆT S = 1
ˆf S . Note that Equation 8 contains a ﬂoor function
i , i.e.,
rather than ceiling because tS
i ≤ tR
i
˙ti < tS
i . Similarly, the intended subject clock ticks are
given by ˙ki =
under the assumption that CS should be
running at frequency ˙f. The skew of CS is the ﬁrst derivative
of the offset between CS and ˙C, given by the slope of the line
i .
We can also simply estimate skew as the offset between actual
and intended frequencies,
(cid:1) : 0 ≤ i ≤ N(cid:9) where ∆ki = ˙ki − ˆkS
i , ∆ki
i
˙T
∆f = ˙f − ˆf S
(9)
which is sometimes expressed in units of parts per million
(ppm), i.e., the microseconds per second at which CS diverges
from ˙C, given by s = 106(cid:16) ˙f− ˆf S
(cid:17)
.
˙f
D. Estimating instantaneous phase
Jitter commonly refers to variations in periodic behavior,
which may be measured in the time or frequency domain [46].
This phenomenon is common in oscillating circuits where ther-
mal noise and coupling with nearby circuits may cause uncer-
tainty in the timing of clock edges [47]. The measurement and
mitigation of jitter is also relevant in operating systems since
timing variations may cause uncertainty in process scheduling
which may delay tasks [48]. This is of particular interest
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:54 UTC from IEEE Xplore.  Restrictions apply. 
1022
DATASET SUMMARY. COMBINED=DESKTOP+MOBILE DATASETS.
TABLE I
Devices
Events
Typing speed
Desktop
151,482
Mobile
76,768
Combined
228,250
183,057,600
5.95 keys/sec
118,734,600
4.78 keys/sec
301,792,200
5.49 keys/sec
(cid:18) T S
(cid:19)
(cid:18)
(cid:19)
tR
i
T S
in real-time systems [49] and high performance computing
applications [50].
We measure jitter in the time domain, i.e., timing jitter,
which is captured by changes in the instantaneous phase.
Considering DOM event timings, congestion along one of the
processes described in Section II-A may cause the subject
clock tick to be slightly delayed, thereby extending the interval
between ticks. This would result in a change to the instanta-
neous phase, which forms the basis of device ﬁngerprinting in
our work.
We estimate instantaneous phase of the subject clock by
e2πj
2π
Arg
φi =
(10)
where 0 ≤ φi < T S and Arg is the principal value complex
argument function with range [0, 2π). We denote the instanta-
neous phase sequence as φ = [φi : i ∈ {1, . . . , N}] where N
is the number of events observed.
IV. A FIRST LOOK AT DUAL CLOCKS IN THE WILD
We examine the presence of periodic behavior in two
large public datasets collected on a commercial platform that
provides web-based tools to evaluate typing skill [51], [52].
For several months, participants from around the world were
presented with a series of English sentences containing at least
3 words and up to 70 characters. Participants were instructed
to transcribe each sentence as quickly as possible into a
textarea that appeared under the sentence. Timestamps
were measured by Date.now() in callbacks registered to
DOM keydown and keyup events. Sessions were tracked
with browser cookies; thus, each session corresponds to the
same device (unless the cookie was cleared) and the same
user (unless the device was borrowed by another user).
We consider the timing of individual events rather than
keystrokes. Each keystroke typically generates 2 events
(keydown and keyup) except in some cases where a vir-
tual keyboard is used: with swipe text entry, a sequence of
keydown events may be generated despite individual keys
not being pressed. We discard sessions for which less than
1200 events were observed, later forming 600-event samples
for device ﬁngerprinting. Table I summarizes the data utilized
in our analysis. After forming two 600-event samples for each
device, the desktop dataset (from [51]) contains 183M events
(~92M keystrokes) from 151k users and includes only desktop
and laptop devices as identiﬁed through the User-Agent string.
The mobile dataset (from [52]) contains 118M events (~59M
keystrokes) from 76k users on mobile and touchscreen devices.
Note that this is larger than what was originally reported
Fig. 2. Examples of four PSD patterns observed: (a) peak at fundamental,
(b) peak at harmonic, (c) peaks within different harmonic series, (d) no peak.
in [52] because data collection continued beyond the date
of publication. The combined dataset combines desktop and
mobile datasets.
A. Spectral analysis
We ﬁrst examine power spectral density (PSD) patterns
exhibited by peripheral
timestamps. The PSD can reveal
the presence and source of periodic behavior and allows a
reﬁned estimate of clock skew. We calculate the PSD using
Equation 6 with integer-valued frequencies up to 500Hz, i.e.,
f ∈ {1, . . . , 500}, for each device in the combined dataset.
Peaks in the PSD indicate the presence of periodic behavior.
The dominant frequency is given by the highest peak, and the
fundamental frequency is the lowest frequency that exhibits a
peak. A harmonic is an integer multiple of the fundamental
frequency. On most devices, the dominant frequency is the
same as the fundamental, but we observed many devices in
which the fundamental frequency carried less energy than
other harmonics in the same series. Additionally, some devices
exhibit no peak at all, and other devices contain peaks within
different harmonic series, e.g., 64Hz and 125Hz which may
occur when events pass through both USB polling and OS
scheduling. These four scenarios are shown in Figure 2.
Fundamental frequencies are determined for each sample
to measure how many devices exhibit periodic behavior. This
allows categorizing a device by its fundamental frequency (if
any) which may be attributed to a common source, such as
64Hz being indicative of the Windows OS family. Noting the
observations above, fundamental frequency detection is per-
formed by ﬁrst detecting peaks and then removing harmonics
to retain only the fundamental frequency within each harmonic
series detected. Threshold-based peak detection is performed:
peaks are given by frequencies with at least 50% more power
than the 95th percentile. These values were chosen empirically
to agree with peak detection performed by visual inspection
of several hundred samples.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:54 UTC from IEEE Xplore.  Restrictions apply. 
1023
0100200300400500Frequency (Hz)PSD(a)125 Hz0100200300400500Frequency (Hz)PSD(b)125 Hz250 Hz375 Hz0100200300400500Frequency (Hz)PSD(c)60 Hz125 Hz0100200300400500Frequency (Hz)PSD(d)TOP 10 FUNDAMENTAL FREQUENCIES IN EACH DATASET.
TABLE II
Desktop
No. Devices % Dataset
39.81
11.25
3.38
2.33
2.06
1.55
1.34
1.31
1.10
0.98
60308
17045
5127
3534
3115
2353
2028
1987
1659
1482
Hz
125
60
250
100
300
200
400
375
64
50
Mobile
No. Devices % Dataset
19.21
3.41
2.79
2.55
1.87
1.72
1.09
0.81
0.71
0.61
14746
2617
2138
1961
1435
1323
833
620
547
472
Hz
60
100
125
120
50
200
300
250
400
180
Table II summarizes the top 10 fundamental frequencies in
each dataset. The overwhelming majority of desktop devices
(nearly 40%) contain periodic behavior with a 125Hz funda-
mental frequency, suggesting the presence of a USB connected
keyboard. On the other hand, nearly 20% of mobile devices
have a 60Hz fundamental frequency, which may correspond to
either the browser event loop synced with screen refresh rate
or the touch sampling rate. A signiﬁcant number of desktop
devices are also 60Hz, which is more likely the browser event
loop. In the following section we consider skew of the top
three frequencies among desktop (125Hz, 60Hz, 250Hz) and
mobile (60Hz, 100Hz, 125Hz) devices.
B. Information gained through clock skew
Clock skew has previously been used to identify unique
devices on the Internet [7]. In this work, we consider precise
estimates of the subject clock frequency as a means to perform
device identiﬁcation. This is done separately for each of the
top three dominant frequencies, where skew is given by the
difference between the estimated frequency ˆf S and intended
frequency ˙f. We estimate frequency using Equation 7 by
performing a grid search in increments of 0.0005 Hz within
the range [ ˙f − 1, ˙f + 1].
Figure 3 shows the clock frequency distributions of desktop
(125Hz, 60Hz) and mobile (60Hz, 100Hz) devices. We note
that the majority of both 60Hz and 125Hz desktop devices
run slightly fast, while most 60Hz mobile devices run slow.
In addition, the 125Hz desktop distribution appears trimodal,
suggesting that low-speed USB keyboards fall into three broad
categories of slow, normal, and fast.
To determine potential for device ﬁngerprinting, we consider
mutual information (MI) between device ID and clock skew
(frequency offset). The events from each device are grouped
together forming samples of 600 events such that each de-
vice contains at least 2 samples and the events from each
sample do not cross sentence boundaries (the latter condition
ensures some separation between samples). We estimate MI
using the nearest-neighbor estimator described in [53] which
operates over continuous (clock skew) and discrete (device
ID) variables. The results are summarized in Table III which
Fig. 3. Clock skew estimates for desktop devices: 60Hz (top left), 125Hz
(top right); and mobile devices: 60Hz (bottom left), 100Hz (bottom right).
MUTUAL INFORMATION (BITS) BETWEEN SKEW AND DEVICE.
H=ENTROPY, MI=MUTUAL INFORMATION, NMI=NORMALIZED MI.
TABLE III
Desktop
H MI NMI
0.17
0.14
0.18
2.77
2.04
2.22
15.90
14.12
12.66
Hz
125
60
250
Hz
60
100
125
Mobile
H MI NMI
0.15
0.03
0.08
2.13
0.34
0.89
13.76
11.37
11.22
also shows the intrinsic entropy (H) and normalized mutual
information (NMI = MI/H) for each device class and each
dataset. While clock skew is indeed unique for some devices,