1
1
1
Total
3
4
9
5
4
WinXPSP2 WinVista
D (TP/FP)
√
√
(12/0)
√
(2/0)
√
(4/0)
√
(4/0)
√
(7/0)
√
(3/0)
(3/0)
D (TP/FP)
√
√
√
√
√
√
√
(9/3)
(2/0)
(4/0)
(3/1)
(4/3)
(3/0)
(3/0)
D (TP/FP)
Win7
√
√
√
√
√
√
√
(9/3)
(2/0)
(4/0)
(3/1)
(4/3)
(3/0)
(3/0)
Linux2.6.32
Linux3.8.0
Linux3.13.0
D (TP/FP)
√
√
(8/2)
√
(10/0)
√
(5/5)
√
(4/1)
√
(3/0)
√
(29/18)
(12/4)
D (TP/FP)
(8/2)
(8/2)
(8/2)
(5/0)
(3/0)
√
√
√
√
√
√
√
(37/10)
(11/5)
D (TP/FP)
(8/2)
(8/2)
(7/3)
(5/0)
(3/0)
√
√
√
√
√
√
√
(37/10)
(11/5)
OpenSSH5.3 OpenSSH6.0 OpenSSH6.5
D (TP/FP)
D (TP/FP)
D (TP/FP)
Linux3.5.0
Linux3.11.0
Linux3.13.0
D (TP/FP)
D (TP/FP)
D (TP/FP)
√
√
√
√
√
√
√
√
(6/0)
(2/0)
(4/0)
(3/0)
(4/0)
(9/0)
(5/0)
(4/0)
√
√
√
√
√
√
√
√
(6/0)
(2/0)
(4/0)
(3/0)
(4/0)
(9/0)
(5/0)
(4/0)
√
√
√
√
√
√
√
√
(6/0)
(2/0)
(4/0)
(3/0)
(4/0)
(9/0)
(5/0)
(4/0)
Table 2: The eﬃcacy of ORIGEN on diﬀerent applications. DL denotes the dynamic labeling; SL for static
labeling. D for “Detected”. TP for correctly matched ORIs in the new version and FP for wrongly matched
ORIs for the new version
these test versions span several major revisions, ranging
from Windows XP, Linux 2.6.32, and OpenSSH 5.3, to Win-
dows 7, Linux 3.13.0, and OpenSSH 6.5.
ORIGEN can accurately generate a proﬁle for each of the
four analysis tasks, and the results are shown in Table 2. Ta-
ble 2 lists the software family names to be tested, their base
version and three test versions. For each software family, the
ORI labeling and matched results are listed respectively. For
ORI label, it shows the number of ORIs via the dynamic la-
beling (DL) and the static labeling (SL) respectively. The
column of “Total” shows a sum of ORIs generated via two
phases. For each test version, we also list the number of
correctly labeled ORIs and missed ORIs respectively.
The results in Table 2 demonstrate three points. First,
ORIGEN can precisely label ORIs in the base version for
the data ﬁelds in each proﬁle. We can see that each data
ﬁeld has more than one ORI in the base version. Second, the
static labeling can improve the ORI coverage. By comparing
the ORI number in DL column and total column, we see that
the static ORI labeling can help ﬁnd more ORIs. Finally,
the error correction can help to reduce the false positive
rate. We found that the proﬁle localization for the four soft-
ware families cannot ﬁnd all semantically-equivalent ORIs
for their test versions, but the error correction still helps to
infer the accurate oﬀset for each data type ﬁeld in the gener-
ated proﬁle. For example, there are 47 ORIs in total for the
ﬁeld task_struct.mm in the base version of Linux, Linux
3.5.0. However, ORIGEN only correctly ﬁnds 37 ORIs in
Linux 3.8.0. By adopting the strategy one in discussed in
Section 4.3, the correct oﬀsets can still be found by ﬁltering
the false oﬀset values from the false 10 ORIs.
The Demo of ORIGEN .
To the end, we show the dm crypt key extraction result
to demonstrate the eﬀectiveness of ORIGEN shown in Fig-
ure 9. ORIGEN has not information about the version in-
formation for the test dm crypt in the memory dump.
It
extracts the binary from the memory dump and automati-
cally generates the concrete proﬁle for ﬁelds in Table 2. Then
it utilizes the concrete proﬁle and successfully extracts the
dm crypt key.
Figure 9: The demo result of dm crypt version-
independent memory analysis.
6.6 Runtime Performance
In this section, we verify the runtime performance of ORI-
GEN. Table 3 demonstrates the average running time of
ORIGEN in Table 2. It includes the ORI labeling and the
proﬁle localization time.
We can see that it takes few seconds on average to ﬁnish
the labeling for one ORI. Among steps of the ORI labeling,
code disassembly takes up to 30 seconds for complex binary
code like Linux kernel. The rest of steps such as the intra-
procedural data-ﬂow analysis only cause negligible runtime
overhead. The proﬁle localization takes several minutes to
generate a proﬁle. Most time is spent on the binary code
alignment by BinDiﬀ. It is reasonable, because conducting
the alignment on the large scale binary is time consuming.
For VMI, ORIGEN takes around two minute to generate
a proﬁle for an unknown virtual machine image and then can
immediately perform security monitoring from the hypervi-
sor layer. This generation time could be greatly improved
by conducting more eﬃcient code search technique. Our
goal is not to completely resolve this problem but provide a
promising solution for cross-version memory analysis.
Family Name
Windows
Linux
OpenSSH
dm crypt
Total Time
ORI Labeling Proﬁle Localization
1.1 min
3.2 min
18.4 sec
10 sec
59 sec
1.3 min
39.3 sec
24 sec
Table 3: The total time for each application on av-
erage.
7. DISCUSSION
In this section, we mainly discuss about the limitation and
potential challenges of this work.
Code Syntactic Changes.
We leverage the code search techniques to conduct the
binary alignment for the proﬁle localization. It is possible
that some syntactic changes modify the control ﬂow graph
for the new version of a binary, such as inline functions or
code optimizations. This can reduce the code search accu-
racy of ORIGEN. We summarize possible syntactic changes
and list the robustness of the code search technique used by
ORIGEN to these changes in Table 4.
Fortunately, many related works have already focused on
this issue and proposed more accurate search results [7]. The
goal of the paper is to explore the feasibility of ORIGEN.
In the future, we will work on how to improve the accuracy
of the generated proﬁle by ORIGEN.
Code Semantic Changes.
ORIGEN by design can only infer the oﬀset value for data
ﬁelds which have been trained in the older version. If the
data type is newly added, ORIGEN cannot infer the oﬀset
value for it. During the software development, it is common
to add the security patches or redesign the code in the new
version. These patches or code reorganization could change
the semantics of the older version. For example, the new
version could add extra data types or remove some data
In these cases, ORIGEN will fail to generate the
ﬁelds.
proﬁle for these new coming data types. One possible way
to sidestep this limitation is to train the additional model
for the new version, and apply the new model to generate
proﬁles for its similar versions.
Code Change
Register Assignment
Control Flow Flattening
Instruction Scheduling
Opcode Selection