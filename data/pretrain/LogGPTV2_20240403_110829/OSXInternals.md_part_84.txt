Chapter 7. Processes Page 68 of 107
interrupt(int type, struct savearea *ssp, ...)
{
...
switch (type) {
case T_DECREMENTER:
...
rtclock_intr(0, ssp, 0);
break;
}
...
}
rtclock_intr() [osfmk/ppc/rtclock.c] is the real-time clock device interrupt handler routine. The
real-time clock subsystem maintains per-processor data structures such as the following:
A real-time clock timer structure with its own, configurable deadline
A deadline for the real-time clock tick that is driven at a frequency of HZ, which is defined to be
100, resulting in a clock tick every 10 ms
Figure 739 shows an overview of real-time clock interrupt processing.
Figure 739. Real-time clock interrupt processing
// osfmk/ppc/exception.h
struct per_proc_info {
...
uint64_t rtclock_tick_deadline;
struct rtclock_timer {
uint64_t deadline;
uint32_t is_set:1,
has_expired:1,
:0;
} rtclock_timer;
...
};
// osfmk/ppc/rtclock.c
#define NSEC_PER_HZ (NSEC_PER_SEC / HZ)
static uint32_t rtclock_tick_interval;
...
static clock_timer_func_t rtclock_timer_expire;
...
#define DECREMENTER_MAX 0x7FFFFFFFUL
#define DECREMENTER_MIN 0XAUL
...
void
clock_set_timer_deadline(uint64_t deadline)
{
// set deadline for the current processor's rtclock_timer
...
}
void
clock_set_timer_func(clock_timer_func_t func)
{
spl_t s;
LOCK_RTC(s);
// global timer expiration handler
if (rtclock_timer_expire == NULL)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 69 of 107
rtclock_timer_expire = func;
UNLOCK_RTC(s);
}
...
// real-time clock device interrupt
void
rtclock_intr(__unused int device, struct savearea *ssp, __unused spl_t old_spl)
{
uint64_t abstime;
int decr1, decr2;
struct rtclock_timer *mytimer;
struct per_proc_info *pp;
decr1 = decr2 = DECREMENTER_MAX;
pp = getPerProc();
abstime = mach_absolute_time();
if (pp->rtclock_tick_deadline rtclock_tick_deadline to "now" (that is, abstime) plus
// rtclock_tick_interval
// call the hertz_tick() function
}
mytimer = &pp->rtclock_timer;
abstime = mach_absolute_time();
if (mytimer->is_set && mytimer->deadline has_expired = TRUE;
mytimer->is_set = FALSE;
(*rtclock_timer_expire)(abstime);
mytimer->has_expired = FALSE;
}
// Look at the deadlines in pp->rtclock_tick_deadline and mytimer->deadline
// Choose the earlier one. Moreover, if a still earlier deadline is
// specified via the special variable rtclock_decrementer_min, choose that
// instead. None of these deadlines can be greater than DECREMENTER_MAX.
// Now that we have a deadline, load the Decrementer Register with it.
...
treqs(decr1); // sets decrementer using mtdec()
...
}
So far, we have seen the following functionality provided by the real-time clock subsystem.
 The hertz_tick() function is called via the rtclock_intr() function HZ times a second.
 The function pointed to by the rtclock_timer_expire() function pointer is called depending on
the deadline in the processor's timer structure.
A global list of clock devices is maintained by the kernel, with each entry being a clock object structure
containing that particular clock's control port, service port, and a machine-dependent operations list.
clock_config() calls the "config" function of each clock device on the list. Subsequently, clock_init
() [osfmk/kern/clock.c] is called to initialize the clock devicesit calls the "init" function of each clock
device. Note that unlike clock_config(), which is called only once during bootstrapping, clock_init()
is called on a processor each time the processor is started. Consider the configuration and initialization of
the system clock (Figure 740), whose "config" and "init" functions are sysclk_config() and
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 70 of 107
sysclk_init(), respectively.
Figure 740. System clock configuration
// osfmk/ppc/rtclock.c
static void
timebase_callback(...)
{
...
// Initialize commpage timestamp
// Set rtclock_tick_interval, which is the global variable used by
// rtclock_intr() to arrange for the next "tick" to occur by loading
// the decrementer with the next deadline
//
nanoseconds_to_absolutetime(NSEC_PER_HZ, &abstime);
rtclock_tick_interval = abstime;
...
// This will call sched_timebase_init()
clock_timebase_init();
}
...
int
sysclk_config(void)
{
...
// The Platform Expert knows the implementation-dependent conversion factor
// between absolute-time (Timebase-driven) and clock-time values.
//
// The following registration will cause the provided function --
// timebase_callback() -- to be invoked with the Timebase frequency values
// as parameters.
//
PE_register_timebase_callback(timebase_callback);
...
}
...
int
sysclk_init(void)
{
...
// set decrementer and our next tick due
...
}
clock_config() also calls timer_call_initialize() [osfmk/kern/timer_call.c] to initialize the
timer interrupt callout mechanism, which is used by the thread-based callout mechanism.
// osfmk/kern/timer_call.c
void
timer_call_initialize(void)
{
...
clock_set_timer_func((clock_timer_func_t)timer_call_interrupt);
...
}
As shown in Figure 739, clock_set_timer_func() [osfmk/ppc/rtclock.c] merely sets its parameter
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 71 of 107
(the timer_call_interrupt function pointer in this case) as the value of the rtclock_timer_expire
global function pointer. Every time timer_call_interrupt() is called, it will service the timer call
queue for the current processor. This way, the scheduler can arrange for tHRead_quantum_expire() to
be invoked on a processor.
clock_timebase_init() [osfmk/kern/clock.c] is a machine-independent function that calls
sched_timebase_init() [osfmk/kern/sched_prim.c] to set up various time-related values used by the
scheduler, for example:
 std_quantum (10,000 s), the standard timeslicing quantum
 min_std_quantum (250 s), the smallest remaining quantum
 min_rt_quantum (50 s), the smallest real-time computation
 max_rt_quantum (50 ms), the largest real-time computation
 sched_tick_interval (1000 >> SCHED_TICK_SHIFT ms)
sched_timebase_init() uses clock_interval_to_absolutetime_interval()
[osfmk/ppc/rtclock.c] to convert conventional (clock) intervals to machine-specific absolute-time
intervals. SCHED_TICK_SHIFT is defined to be 3 in osfmk/kern/sched.h, yielding a value of 125 ms for
sched_tick_interval.
7.4.1.3. Converting between Absolute- and Clock-Time Intervals
The kernel often needs to convert between absolute- and clock-time intervals. Absolute time is based on
the machine-dependent TB Register. The Mach trap mach_absolute_time(), which is available in the
commpage, retrieves the current value of the TB Register. It is the highest-resolution time-related function
on Mac OS X. To convert an absolute-time interval to a conventional clock interval (such as a value
expressed in seconds), you need the implementation-dependent conversion factor, which can be retrieved
by mach_timebase_info(). The conversion factor consists of a numerator and a denominator. The
resultant ratio can be multiplied with an absolute-time interval to yield an equivalent clock interval in
nanoseconds. Figure 741 shows an example of converting between the two time intervals.
Figure 741. Converting between absolute- and clock-time intervals
// timebase_demo.c
#include 
#include 
#include 
#include 
#include 
#define DEFAULT_SLEEP_TIME 1
#define MAXIMUM_SLEEP_TIME 60
int
main(int argc, char **argv)
{
kern_return_t kr;
u_int64_t t1, t2, diff;
double abs2clock;
int sleeptime = DEFAULT_SLEEP_TIME;
mach_timebase_info_data_t info;
kr = mach_timebase_info(&info);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 72 of 107
if (kr != KERN_SUCCESS) {
mach_error("mach_timebase_info:", kr);
exit(kr);
}
if (argc == 2) {
sleeptime = atoi(argv[1]);
if ((sleeptime  MAXIMUM_SLEEP_TIME))
sleeptime = DEFAULT_SLEEP_TIME;
}
t1 = mach_absolute_time();
sleep(sleeptime);
t2 = mach_absolute_time();
diff = t2 - t1;
printf("slept for %d seconds of clock time\n", sleeptime);
printf("TB increments = %llu increments\n", diff);
printf("absolute-to-clock conversion factor = (%u/%u) ns/increment\n",
info.numer, info.denom);
printf("sleeping time according to TB\n");
abs2clock = (double)info.numer/(double)info.denom;
abs2clock *= (double)diff;
printf("\t= %llu increments x (%u/%u) ns/increment\n\t= %f ns\n\t= %f s\n",
diff, info.numer, info.denom,
abs2clock, abs2clock/(double)1000000000);
exit(0);
}
$ gcc -Wall -o timebase_demo timebase_demo.c
$ ./timebase_demo 5
slept for 5 seconds of clock time
TB increments = 166651702 increments
absolute-to-clock conversion factor = (1000000000/33330173) ns/increment
sleeping time according to TB
= 166651702 increments x (1000000000/33330173) ns/increment
= 5000025112.380905 ns
= 5.000025 s
7.4.1.4. Starting the Scheduler
The first thread to execute on the boot processor, kernel_bootstrap_thread()
[osfmk/kern/startup.c], is started via load_context() [osfmk/kern/startup.c]. Besides setting up
the machine-specific context of the thread, load_context() initializes certain aspects of the processor. In
particular, it calls processor_up() [osfmk/kern/machine.c] to add the processor to the default
processor set.
kernel_bootstrap_thread() creates an idle thread for the processor, calls sched_startup()
[osfmk/kern/sched_prim.c] to initiate the scheduler's periodic activities, and calls thread_bind()
[osfmk/kern/sched_prim.c] to bind the current thread to the boot processor. The latter step is required
so that execution remains bound to the boot processor and does not move to any other processors as they
come online. Figure 742 shows an overview of scheduler startup.
Figure 742. Scheduler startup
// osfmk/kern/sched_prim.c
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 73 of 107
void
sched_startup(void)
{
...
result = kernel_thread_start_priority(
(thread_continue_t)sched_tick_thread,
NULL,
MAXPRI_KERNEL,
&thread);
...
thread_call_initialize();
}
// perform periodic bookkeeping functions
void
sched_tick_continue(void)
{
...
}
void
sched_tick_thread(void)
{
...
sched_tick_deadline = mach_absolute_time();
sched_tick_continue();
/* NOTREACHED */
}
sched_startup() also initializes the thread-based callout mechanism that allows functions to be recorded
by the kernel for invocation later. For example, setitimer(2), which allows real, virtual, and profiling
timers to be set for a process, is implemented using a thread callout.
At this point, we have the following primary scheduling-related periodic activities occurring in the kernel.
 rtclock_intr() [osfmk/ppc/rtclock.c] is called when there is a decrementer exception. This
typically occurs HZ times a second, with the default value of HZ being 100. rtclock_intr() reloads
the decrementer (register) with the next deadline value.
 hertz_tick() [osfmk/kern/mach_clock.c] is called by rtclock_intr().
 timer_call_interrupt() [osfmk/kern/timer_call.c] is called by rtclock_intr() if the
current processor's real-time clock timer's deadline has expired. The rtclock_timer_expire
function pointer points to timer_call_interrupt()as set by clock_set_timer_func().
 sched_tick_continue() [osfmk/kern/sched_prim.c] runs on every scheduler tick, which
occurs once every 125 ms by default.
7.4.1.5. Retrieving the Value of the Scheduler Tick
Let us read the value of the sched_tick variable from kernel memory to examine the rate at which it is
incremented. We can determine the address of the variable in kernel memory by running the nm command
on the kernel executable. Thereafter, we will use the dd command to read its value from /dev/kmem, sleep
for an integral number of seconds, and read its value again. Figure 743 shows a shell script that performs
these steps. As seen in the output, the variable's value is incremented by 80 in 10 seconds, which is as we
expected, since it should increment by 1 every 125 ms (or by 8 every second).
Figure 743. Sampling the value of the scheduler tick
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007