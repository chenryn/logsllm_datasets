tacker [2] that tries to actively inject malicious scripts via script in-
jection vulnerabilities in a site or by tampering the content of third-
party scripts of the site. Further, we assume that a browser can es-
tablish a secure channel with an uncompromised web server of the
main site (say via HTTPS), but we make no security assumptions
for third-party scripts which are imported by the main site. We also
note that other attacks such as tampering of the HTML contents or
code reuse attacks of JavaScript are beyond the scope of this paper.
One class of attacks that affects all signature-based whitelisting ap-
proaches is mimicry attacks [54]. In our context, mimicry attacks
may allow the attacker to invoke scripts already in the whitelist at
unintended code-evaluation points or in an unintended sequence.
Indeed, mimicry attacks are a concern, but these are outside the
scope of our defenses in this paper. Several orthogonal techniques
can be used to detect and block mimicry attacks, such as by using
sufﬁcient calling context information [17], creation history [55], or
anomalous control-ﬂow patterns [14, 19]. Lastly, we trust all plug-
ins and extensions and assume an uncompromised web browser.
3. DESIGN
In this section, we introduce SICILIAN, our multi-layered ap-
proach for building a script whitelist. The multi-layered signature-
based whitelisting scheme is based on our measurement study of
changes in JavaScript, which we brieﬂy discuss in Section 3.1. We
ﬁrst start with a basic whitelisting layer and show that it is able to
protect only a limited number of websites. Then we show an ex-
tension of the basic layer to handle scripts with periodic changes.
3.1 Categories of Changes in JavaScript
To design a robust JavaScript whitelisting scheme, it is important
to know the kind of changes reﬂected in real-world scripts. We
analyze the changes in the scripts from two aspects: 1) changes
over time; and 2) changes over multiple users differing in privilege
and access control. Based on our observation on 33,302 scripts
hosted on Alexa’s top 500 sites, 93% of the scripts remain static
over time and the rest 7% change. The changes in these scripts can
be classiﬁed into four broad categories to answer our RQ2.
• C1: Syntactic. Changes that affect only the syntactic structure
of the code and do not affect the behavior of script execution
(syntax-only changes). Belonging to this category are changes
in comments, renaming of variables and miniﬁcation.
• C2: Data-only. Scripts contain JavaScript functions which take
in data as input. We observe periodic changes in such data
whereas the functions themselves remain unchanged. Such data
does not affect the execution other than side-effects to the net-
work or the DOM (data-only changes). For example, we ob-
serve periodic changes in script’s data eventually used as a re-
source’s URL or as HTML content to be rendered on a web
page.
• Finally, we observe code-introducing changes in the scripts where
the JavaScript functions themselves change. Such changes are
1544meant to add or remove functionality from a script. We label
this type of changes as C3. Based on the frequency of updates
to the scripts, we further categorize C3 into two classes.
• C3A, a class of changes that happen infrequently. Such in-
frequent updates are due to manual changes pushed by the
scripts developer.
• C3B, a class of changes that are highly frequent. These are
typically found in news sites or scripts hosted at optimizer
services to show dynamic contents in a web page. This class
does not fall within our category of mostly static scripts be-
cause we see no predictable pattern in such changes. We
argue that it is difﬁcult to design a signature scheme that
caters with such complexity and hence consider C3B type
as beyond our scope.
We give a comprehensive breakdown of the number of scripts in
each category in Section 5. The results motivate our multi-layered
whitelisting design, whose overview is given in Section 3.2.
3.2 Solution Overview
During the execution of a website under an origin O, the browser
maintains its corresponding whitelist WO. WO contains the signa-
tures of all legitimate scripts S allowed to be executed under O.
Let us denote S# as a signature mechanism used to construct the
whitelist. The whitelisting logic enforces the following invariants.
1. Execution of valid scripts: A script s, included under O, is
2. Collision-hardness: It should be hard to construct a malicious
executed if and only if S#(s) ∈ WO
script s(cid:48) /∈ S, such that S#(s(cid:48)) ∈ WO
To guarantee the observation of the aforementioned rules, our
approach must capture all the scripts that are about to be executed
and execute only those that belong to WO. To achieve this, we 1)
interpose on all channels that lead to new code generation and 2)
use signature schemes that are hard to bypass.
Interposing on Script-injection Channels. There are two types of
scripts that get executed on a web page: ﬁrst-order scripts, already
included in the page, and higher-order scripts, which are generated
or loaded dynamically as the web page’s code executes. A white-
listing defense must be turned on for all scripts, including ﬁrst-
order and higher-order scripts.
Consider an example of a script in Listing 1 which has two points
to generate higher-order scripts, namely document.write (point
(1) at line 3), and eval() (point (2) at line 7). Given that the
properties location.href and event.data are under the at-
tacker’s control, she can do the following to inject a malicious
higher-order script:
• Inﬂuence the value of location.href with a string to break-
out from  tag and inject the malicious script thereafter. This
happens during dynamic HTML construction at point (1).
• Send a string containing malicious scripts via postMessage
to this origin, which will be evaluated to code at point (2).
The code in Listing 1 is vulnerable to script injection attacks
as it allows the attacker to inject scripts from different points. To
block all such possible injection points, our module interposes on
all activities in the underlying browser that generates scripts in-
cluding script generation due to HTML parsing, network activi-
ties, or code execution that invokes generation of a new script (e.g.,
via eval()), thus covering both the ﬁrst-order and higher-order
scripts. Our module is built separately from the browser’s Java-
Script parser and therefore it is browser-agnostic — we explain the
implementation detail in Section 4.1. Any new script code gener-
ated from such script-inducing point will be captured and ﬂagged
as a new script and executed only if its signature is in the whitelist
(rule 1). From this point onwards, the focus will be on designing a
signature scheme that is hard for the adversary to bypass.
Signature Mechanisms. We seek to design a relaxed signature
scheme S# that tolerates changes described in Section 3.1. The
idea is to relax the raw signatures by ignoring parts of the script
that change. In spite of such relaxation, the attacker’s capability of
injecting malicious scripts can still be greatly restricted. To under-
stand why, let us consider a mechanism called naive extension of
raw signatures where the part of the code which keeps changing is
ignored, i.e., the value of a variable obj in Listing 1. The remain-
ing text is then signed using raw signature mechanism (SHA256).
Such signature computation for Listing 1 is shown in Listing 2 —
notice that the changing value is now removed from the signature
computation. Recall that such signature computation is secure be-
cause all operations on objects that result in a non-data change (e.g.,
Listing 1 line 4) will be subject to signature checking. This is car-
ried out by our whitelisting module that interposes on script injec-
tion points.
Such signature scheme is guaranteed to be secure, but it cannot
tolerate the syntax only changes (C1 type). We found cases such as
miniﬁcation and variable renaming on scripts which signiﬁcantly
modify the script’s code. For example, Listing 3 describes 2 ver-
sions of the code fetched from img.ifeng.com. They differ in
whitespaces and will result in different signatures under the naive
extension. However, they are functionally equivalent. Thus, an
even more relaxed signature scheme is needed that goes beyond
the text based signatures in order to eliminate such false positives.
One could consider code similarity techniques for designing re-
laxed signature schemes. Such techniques map two pieces of code
that are similar and ﬁnd application in plagiarism detection. Attribute-
based identiﬁcation (ABI) is one of such techniques used in detect-
ing document similarity [12]. ABI considers the metric — four-
tuple (n1, n2, n3, n4) consisting of the following code attributes:
1) number of unique operators, 2) number of unique operands, 3)
total number of operators, and 4) total number of operands. If one
were to use this metric as a signature, then the two pieces of code
in Listing 4 would have the same signatures namely (2, 4, 2, 5), but
one is malicious and other is not. Thus, ABI is not secure.
As can be inferred from the naive extension and the code sim-
ilarity technique, there is a trade-off between the depth of relax-
ation in signature schemes versus the security they offer. Thus, a
"minimally-relaxed" scheme which provides high security is needed.
This poses the following question: how relaxed a signature scheme
can be and yet be secure?
AST-based Signatures. The relaxed signature mechanism must be
designed in such a way that it does not give up on security while
at the same time avoids false positives due to syntactic changes in
the source code. As we discuss above, computing signature on the
text representation of a code is not practical since it is not robust
to various source modiﬁcations. Therefore, we resort to an abstract
syntax tree (AST), which represents the syntactic structure of the
code.
Our signature mechanisms are based on cryptographically se-
cure hash functions and collision resistant Merkle Hash Trees. The
attacker can drive the client to execute a malicious script only if
its signature belongs to the whitelist. The whitelist WO is pub-
lic knowledge i.e.
the adversary knows the scripts in the WO as
well as their signatures. Even then it will be hard for the adversary
to construct a malicious script s(cid:48) /∈ S s.t. S#(s(cid:48)) ∈ WO. This
is due to the second pre-image resistance [42] property of Merkle
15451 var x = location.href;
2 var obj = ’ADS-CONTENT’;
3 document.write(’LINK’); (1)
4 document.write(obj);
5 window.addEventListener(’message’, receiveMessage,
false);
6 function receiveMessage(event){
7
8 }
eval(event.data); (2)
1 SHA256("var x = location.href;
2 var obj = ’’;
3 document.write(’LINK’);
4 document.write(obj);
5 window.addEventListener(’message’, receiveMessage,
false);
6 function receiveMessage(event){
7
8 }");
eval(event.data);
Listing 1: An example of a script in whitelist where value of variable
obj keeps changing
Listing 2: Signature computation of code in Listing 1 using naive
extension scheme
this.items=[];
1 // Version 1
2 function Collection(){
3
4 }
5
6 // Version 2
7 function Collection(){this.items=[];}
Listing 3: Different versions of scripts due to miniﬁcation.
The
scripts were fetched from http://img.ifeng.com/tres/pub_
res/JCore/TabControl.1.2.U.js
Hash Trees. We discuss the security of our relaxed signature mech-
anism in Section 3.4. In conclusion, the adversary has a negligible
advantage in driving the client to execute a malicious script due to
our combined strategy of interposition and security of our signature
mechanism, thereby guaranteeing the observation of rule 1 and 2,
thereby answering our RQ3.
Scope. Finally, we remind that our relaxed signature will ignore
changing data and, therefore, the only way to bypass this is by
making non code-injecting modiﬁcations in the data, e.g., replac-
ing HTML content of variable obj (Listing 1) with non-script con-
tents. Due to rule 1, we guarantee that such attempts will not lead
to any new code execution. However, few attacks like defacement,
mimicry attacks, and data exﬁltration may still happen. These are
beyond our scope and auxiliary defenses like CSP [52], control-
ﬂow analysis [19], and data-conﬁnement [3] thwart such attempts.
In the next subsections, we discuss how we design a multi-layered
solution to whitelist changing scripts. Our approach is robust against
scripts with types C1, C2, and C3A deﬁned in Section 3.1.
3.3 Layer 1: The Basic Scheme
We observe 30,989 scripts that remain static during our three
months of crawling. For these kinds of scripts, a suitable signa-
ture scheme would be a raw signature. The raw signature scheme
can be implemented using various cryptographic hash algorithms,
such as SHA256 or SHA512. This basic scheme provides provable
collision-resistant signature of the scripts, which we use to guaran-
tee that the attacker cannot inject malicious scripts that can bypass
the whitelist unless she injects the exact same scripts as the ones in
the whitelist which are already authorized to run.
3.4 Layer 2: Relaxed Signature
Key Insights. We have seen 2,105 scripts that change, included
in 300+ of Alexa’s top sites, which belong to the categories C1,
C2, and C3A. To handle these, we propose the abstract syntax tree
(AST) as a representation basis for constructing the signature. Ab-
stract Syntax Tree (AST) is a data structure that captures the struc-
ture of the source code via an abstraction of the constructs offered
by the language and leaves out redundant details like comments,
whitespaces, brace brackets and semicolons.
AST grammar. The AST is built by recursive descent parsing of
the JavaScript code. Figure 1 represents a part of the grammar
used to form the AST. This tree-grammar conceptually illustrates
the grammar for a JavaScript parser such as Esprima [24]. The
1 // Code 1 (Benign)
2 var obj = "CONTENT";
3 var b = obj + "";
4 document.write(b);
5
6 // Code 2 (Malicious)
7 var obj2 = "function evil(){}";
8 var b = obj + "evil();";
9 eval(b);
Listing 4: Benign and Malicious scripts having the same signatures under
atttribute-based identiﬁcation
terminals of the grammar are shown in boldfaced letters (e.g. Pro-
gram) and the non-terminals are placed between angle brackets
(e.g. ). Each AST’s Program corresponds to one unit
of compilation, e.g., a JS ﬁle or independent code blocks in inline
script and eval() function. An AST node is generated when a
rule produces a terminal. The non-terminals do not represent the
nodes and are mere placeholders.
As a running example, we give an AST representation of a Java-
Script snippet var x = 10, y; y = x+1; in Figure 2.
In
general, nodes in the AST belong to one of the three node types
that we detail below.
1. L := A set of nodes that contains literals. Literals are any values
of type String, Boolean and Integer and elements of the
uniﬁed types like Arrays.
2. I := A set of nodes that contains identiﬁers. Identiﬁers are the
unique identities or names of the variables, functions, and ob-
jects in the source code.
3. LC := The a priori known set of language constructs which is
a ﬁnite set of nodes representing the semantic representation of
the underlying nodes. For example, VariableDeclarator is a
node that corresponds to the declaration of a var.
Labeling of AST nodes. ASTs are labeled trees where the labels
of the nodes come from their node types. Traditionally, ASTs are
supposed to abstract out the details of the source code and hence
avoid including the identiﬁers and literals as nodes. However, it is
easy to see that for a security critical venture like ours, one cannot
exclude them from the AST. We retain the identiﬁer nodes as well
as the literal nodes in our AST. The label of an identiﬁer node is
its name and the label of a literal node is its value. Referring to the
example in Figure 2.e, the label of the identiﬁer x is x and the label
of the literal 10 is 10. For the nodes in LC, the labels are deﬁned
by mapping the nodes to pre-ﬁxed constants. For example, the label
of the node corresponding to VariableDeclarator in Figure 2.e can
be ﬁxed to VariableDeclaratorType. A label is an attribute
of the node and is shown by circle-shaped nodes in Figure 2.
AST construction. The AST is constructed with the help of the