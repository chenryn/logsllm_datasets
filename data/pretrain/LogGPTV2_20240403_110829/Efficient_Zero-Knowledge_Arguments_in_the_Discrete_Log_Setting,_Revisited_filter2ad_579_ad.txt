w1
w2
[
]
[
]
A1
A2
(w1; w2) =
A1w1 A1w2
A2w1 A2w2
2 G2(cid:2)2
(3.1)
x
x
y
=
⊤
A1
A2
(w1; w2)
)
|               {z               }
∑
i yi wi C[bw ]
∑
Now we can send all terms [Ai ]wj to the verifier. Our probabilis-
tic test has to map both [A] and w to a new (smaller) statement. We
can do that by multiplying from the left by x 2 F2
p and from the
right by y 2 F2
A1
A2
⊤
]
([
p where x; y   χ2. Consequently, we obtain
(
[
])
|      {z      }
∑
i xi [Ai ] C [bA]
∑
|            {z            }
C[bt ]
The prover thus sends the (purported) [Aiwj ], denoted [ui; j ], andbw,
= [t] and [bA]bw
∑
[bt] =
([A]; [t]) to ([bA]; [bt]) which is smaller by a factor of k = 2. This can
If each [Ai ] satisfies a hard kernel assumption, the prover is com-
mitted to w1; w2. It is not hard to see that given enough (linearly
independent) challenges, one can extract w. We will show this for
a more efficient special case. All in all, we reduced the statement
the shrunk witness. The verifier checks
((w1; : : : ; wk )y)
B
i; j xiyj [ui; j ].
xiyj [Ai ]wj
i [ui;i ]
?
=
i; j
=
B
?
be applied recursively.
3.4.2 Refining the testing distribution. It turns out, that by a good
choice of testing distribution, we can reduce communication. Namely,
we can pick testing distributions with xiyj = zj(cid:0)i for all i; j. Then
it is sufficient for the verifier to know the sum of the off-diagonals
i.e. [A2]w1 and [A1]w2 (and [t]). We denote the (purported) [Ai ]wj,
sent by the prover, as [uℓ], i.e. [u(cid:0)1] B [A2]w1 and [u1] B [A1]w2.
Note that [u0] = [t] need not be sent. From the testing distribution
eχ3 we require that z = (z(cid:0)1; z0; z1)  eχ3, belongs to a pair (x; y).
(cid:0)1).³ In this case, zℓ = ξ
mials ξ i, e.g. x = (1; ξ ) and y = (1; ξ
9w : [t] = [A]w. Leteχ3 be a testing distributions with the prop-
One testing distribution with this property comes from mono-
(cid:0)ℓ.
For efficiency, picking x as above, but y = (ξ ; 1) is useful, since
this preserves small ξ. In this case, z = (z(cid:0)1; z0; z1) = (ξ 2; ξ ; 1).
Protocol 3.5 (LMPAnoZK). The following is a protocol to prove
erties described above. Common input is ([A]; [t]) 2 Gm(cid:2)n (cid:2) Gm.
We assume n = 2d. The prover’s witness is some w 2 Fn
p .
(cid:10) F2
p .
² It may be helpful to think of the vector space (Fn/2
³ It can be shown that, up to scalar multiples, these are all such testing distributions.
)2 as Fn/2
p
p
(
)
w1
w2
Recursive step. Suppose n = 2d > 2.
(cid:15) Notation: Let [A] = [A1; A2] and w =
be as above.
(cid:15) P ! V: Compute [u(cid:0)1] B [A2]w1 and [u1] B [A1]w2.
Send [uℓ] for ℓ = (cid:6)1. ([u0] B [t] is known to the verifier.)
(cid:15) V ! P: Pick z  eχ3 with corresponding x; y. Send (x; y; z).
(cid:15) Both parties compute [bA] = x1[A1] + x2[A2] 2 Gm(cid:2)n/2
and [bt] =
Moreover, P computesbw = w1y1+w2y2. The protocol may
then be (recursively resumed), setting n   n/2, w   bw,
[t]   [bt], [A]   [bA].
ℓ=(cid:0)1 zℓ[uℓ] 2 G as the new batched statement.
∑
1
?
= [t].
Base case. Suppose n (cid:20) 2.
(cid:15) P ! V: Send w.
(cid:15) V: Tests if [A]w
See the full version [31] for a sketch of the protocol. For effi-
ciency, our base case could also start at n = 4, as this saves one
round-trip.
Leteχ3 be a testing distribution with xiyj = zj(cid:0)i as above.⁴ Let [uℓ],
[Ai ], [t], wj and [bA], [bt] be defined as above. Then:
(cid:15) Given a non-trivial kernel element of [bA], we (efficiently) find
Lemma 3.6 (Recursive extraction). Consider the situation above.
a non-trivial kernel element of [A].
(cid:15) Given 3 linearly independent challenges (with accepting tran-
scripts), i.e. an invertible matrix Z, one can extract (uncondi-
tionally) a witness [A]w = [t].
(cid:15) Given 4 challenges in general position,⁵ if the witness from
above does not fit w.r.t. the [uℓ], i.e. if an honest prover would
send different [uℓ] for w, then we find (additionally) a non-
trivial kernel element v, i.e [A]v = 0.
Moreover, we have short-circuit extraction: From 2 independent
, [uℓ] for some ℓ = (cid:6)1, then we are guaranteed to find a
challenges, one can compute a candidate witness w
If [Ai ]w
non-trivial kernel element from 4 challenges in general position.
for quick-extraction.
′
j
′
Note that, maybe surprisingly, extraction of a witness w with
[A]w = [t] is unconditional, i.e. we have a proof of knowledge.
The proof is a minor generalisation of [10, 13]. See [31] for details.
3.4.3 Going zero-knowledge. There are many variations for going
zero-knowledge. The most straightforward one is to run Protocol (cid:6)std
and replace sending z by proving9z : [A]z = β[t]+[a] via LMPAnoZK.
This gives a proof of knowledge, and is quite communication effi-
cient. But computing [A]r for random r is expensive. This approach
is similar to [10, 13], where LMPAnoZK only saves communication.
We achieve zero-knowledge more carefully. Instead of blinding
the witness, we note that it is enough to blind the prover’s re-
sponses. For this, a logarithmic amount of randomness suffices. This
should make the prover more efficient.
Warm-up: Proving knowledge of opening of a commitment. For
simplicity, we first sketch a protocol which assumes that [A] =
[д] 2 G1(cid:2)n, and [д] is a commitment key. Thus, [A] has hard kernel
assumption by construction. Later, we deal with m > 1 and adver-
sarially chosen [A], which we actually solve with a different tech-
⁴ Note that the soundness error δsnd(eχ3) is an upper bound for the soundness errors
nique. But the techniques employed in this simple example help
of the (induced) testing distributions for x and y.
⁵ By Footnote 3, if x2/x1 is different for all challenges, they are in general position.
Session 9C: Zero-Knowledge ProofsCCS ’19, November 11–15, 2019, London, United Kingdom2100understanding the more complex technique, and they are reused
and extended in Section 4.4.
Our current problem is to prove9w : [д]w = [t] in zero-knowledge.
We will employ a masked version of LMPAnoZK, with judiciously
chosen randomness r, to achieve this. In particular, we do not pick
r   Fn
p . We pick r so that only logarithmically many ri are non-
zero. Thus, computing [д]r = [a] is quite cheap (unlike in Proto-
col (cid:6)std). By the uniform-or-unique guideline, we want that each
message [u(cid:6)1] looks uniformly random. By analysing the recur-
sive structure of LMPAnoZK, one sees that picking ri   Fp for
i 2 Mn (cid:18) f0; : : : ; n (cid:0) 1g with Mn as defined below, and ri = 0
else, achieves this property.⁶
2d B fM
See Fig. 2 for a pictorial description.
Definition 3.7 (Masking sets). We define the masking (random-
ness) sets/spaces Mn (cid:18) f0; : : : ; n (cid:0) 1g (for n = 2d) by the formu-
las below. The set Mn describes the unit vectors of Fn
p (with zero-
based indexing) which are used for random masking. We typically
treat Mn as a subvector space of Fn
p (instead of explicitly referring
to its span ⟨ei j i 2 Mn⟩).
(cid:15) M1 B f0g and M2 B f0; 1g.
(cid:15) M
2d(cid:0)1g _[ f2d(cid:0)1; 2d(cid:0)1 + 1g for d (cid:21) 2.
(
)
r1
r2
if r is split into r =
is distributed like a fresh r
is uniformly distributed for r   Mn. Moreover,br = y1r1 + y2r2
sidering the joint distribution ([u(cid:0)1]; [u1];br ). Thus, masking sets
By the structure of the masking sets, we have that (for k = 2),
as in LMPAnoZK, then [uj(cid:0)i ] = [дi ]rj
′   Mn/2. This holds even when con-
exhibit a useful recursive structure. There are some minor prereq-
uisites to use the recursive structure, which we ignore for now.
Protocol 3.8. Let crs = [д] 2 G1(cid:2)n be a uniformly random com-
mitment key (in particular, [д] has hard kernel relation under the
DLOG assumption on G.). The following is a protocol to prove
Common input is (crs; [t]) 2 G1(cid:2)n (cid:2) G. We assume n = 2d. The
prover’s witness is some w 2 Fn
p .
9w : [t] = [д]w. Leteχ3 be a testing distribution as in Protocol 3.5.
(cid:15) P ! V: Choose r   Mn. Compute [a] = [д]r. Send [a].
(cid:15) V ! P: Choose β   χ (β ). Send β.
′
(cid:15) P $ V: Let z B βw + r and [t
LMPAnoZK for 9z : [д]z = [t
].
] B β[t] + [a]. Engage in
′
It is clear that this protocol is correct. Short-circuit extraction
follows easily as this is a composition of Protocol (cid:6)std and LMPAnoZK.
Thus, only zero-knowledge remains. For this, one should note that
z = βw + r behaves like a linear combination throughout the pro-
we can view the protocol as a linear combination of protocols. Thus,
to see that [u(cid:6)1] is uniformly distributed, we can focus our atten-
tion on r and its effect alone. As explained before, due to the form
tocol, because the reduced witnessbz is of the form βbw +br. Indeed,
of Mn, (br ; [u(cid:0)1]; [u1]) is uniformly distributed in Mn/2 (cid:2) G (cid:2) G.
Thus, each iteration outputs uniformly distributed [u(cid:6)1], andbr dis-
tributed asbr   Mn/2. For the base case, we note that by construc-
hence βw +br is uniformly random for n (cid:20) 2, perfectly hiding w.
tion, M2 = f0; 1g. Thus, r   M2 is uniformly random in F2
p, and
In particular, the messages in the base case are uniformly random
⁶ The masking sets M use zero-based indexing for convenience.
too. The HVZK simulator can be built as usual, since the uniform-
or-unique property is satisfied.
Difficulties arising from general [A]. There are two main difficul-
ties arising from general [A] 2 Gm(cid:2)n. First, the higher dimension
due to m > 1 makes masking sets as described not directly applica-
ble anymore. Second, we want to deal with adversarial [A]. In the
above sketch for zero-knowledge, we ignored a detail concerning
the recursion. If it ever happens that in [д], for some i 2 Mn, the
and zero-knowledge fails. An adversary can provoke this.
element [дi ] is zero, the distribution of (br ; [u(cid:0)1]; [u1]) is skewed
Resolving these problems efficiently (for the prover) is techni-
cal. See Appendix B for the construction and security claims. We
remark that the naive approach to zero-knowledge for general [A]
is a simple and viable option if the computational overhead is ac-
ceptable. Considering the computational costs of LMPAnoZK, this
is often the case. Nevertheless, we demonstrate that, by applying
our design guidelines, a more efficient, but more technical, conver-
sion to zero-knowledge (with slightly larger proofs) is possible.
3.5 Step 3: Adding (arithmetic circuit) relations
to the witness
If the witness w for [A]w = [t] is committed to, e.g. if the first row
of [A] is a Pedersen commitment CRS [д], it is easily possible to
make other (zero-knowledge) statements about w by composition
of zero-knowledge protocols. Using Protocol QESACopy from Sec-
tion 4 (or [13] in special cases), it is possible to add constraints on
the witness. In particular, one can use range-proofs to control w.
Remark 3.9. Often, w is much larger than the part which has
to satisfy some constraints. It is efficiently possible to “split” and
“merge” Pedersen commitments i.e. [c] = [c1] + [c2] where [G] =
[G1jG2] and [ci ] = [Gi ]wi. (Indeed, we use this quite often. With
small changes, this is possible in zero-knowledge.) With this, one
can split off the relevant portion w1 of w into the commitment [c1]
and prove additional relations about this portion only. Splitting is
generally very cheap. See Appendix D.1 for a concrete application.
4 ARITHMETIC CIRCUIT SATISFIABILITY
FROM QUADRATIC EQUATIONS
In this section, we describe quadratic gates, and relate them to rank
1 constraint systems (R1CS) and arithmetic circuits (AC). Then, we
construct a proof of satisfiability of a set of quadratic equations via
a (zero-knowledge) inner-product argument.
⊤
p and a matrix (cid:0) 2 Fn(cid:2)n
4.1 Quadratic gates
The equations our scheme is able to prove are quadratic equations,
i.e. given a witness w 2 Fn
p we wish to
(cid:0)w = 0. We choose this description of quadratic equa-
prove w
tions for simplicity and uniformity of notation. In particular, we
assume without loss of generality, that the witness w has the con-
stant 1 as first component, i.e. w1 = 1. Our notation is similar
to [19], which uses such notation for Groth–Sahai proofs [30]. In-
deed, our arguments are essentially commit-and-prove systems [19].
x = t, with
a; x 2 Fn
, t 2 Fp with statement given by the constants
Consider a general quadratic equation x
p , (cid:0) 2 Fn(cid:2)n
(cid:0)x + a
⊤
⊤
p
Session 9C: Zero-Knowledge ProofsCCS ’19, November 11–15, 2019, London, United Kingdom2101y1r1b=
y2r2b=
+
b= r
a recursive step is applied to M16, i.e.br = y1r1 + y2r2 is computed. Note that by removing two dark squares in the overlap
Figure 2: Left: The (construction of the) masking randomness sets M4, M8, M16 and M32 (for k = 2). The squares denote the
numbers 0; : : : ; n(cid:0) 1 (or the respective basis vectors (with zero-based indexing)). Right: A demonstration of the “overlap” when
(i.e. the randomness being “used up” in [u(cid:6)1]), the sum is still is randomised as M8. This “recursive property” is essential. The
indices in Mn can also be constructed recursively via string concatenation: m2n = mnj110n(cid:0)2 and m1 = 1, m2 = 11.
(
)
)
⊤( (cid:0)t 0
a (cid:0)
(a; (cid:0); t). This can be encoded via w =
(cid:0), namely w
w = 0:
1
x