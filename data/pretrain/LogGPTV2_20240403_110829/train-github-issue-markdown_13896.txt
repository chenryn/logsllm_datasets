Julia is thwarting LLVM's CSE when the subexpression occurs in a loop test and
loop body. Here is an example:
    function foo(a, b,c)
        while (a*b+c)==1
            a /= (a*b+c)
        end
        a
    end
    code_llvm (foo,(Float64,Float64,Float64))
The output is:
    L:                                                ; preds = %L.preheader, %L
      %a.0 = phi double [ %8, %L ], [ %0, %L.preheader ]
      %6 = fmul double %a.0, %1, !dbg !10
      %7 = fadd double %6, %2, !dbg !10
      %8 = fdiv double %a.0, %7, !dbg !10
      %9 = fmul double %8, %1, !dbg !10
      %10 = fadd double %9, %2, !dbg !10
      %11 = fcmp oeq double %10, 1.000000e+00, !dbg !10
      br i1 %11, label %L, label %L3.loopexit, !dbg !10
Note how `a*b+c` is evaluated twice in the loop. A partial iteration has been
peeled from the loop, which obscures the fact that `a*b+c` is being
redundantly evaluated.
From first glance, it appears that the partial peeling has already happened
when LLVM sees the IR. I'm guessing that it's being done early to improve type
inference for the loop test (i.e. poor man's context-sensitivity by cloning
code). It's conceivable that a CSE-like pass could recognize this sort of
thing. Or maybe try to unpeel after type inferencing when types match?
See my comments here for another example.