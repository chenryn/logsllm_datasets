tions that helped improving the paper. The project was supported
by the Austrian Research Promotion Agency (FFG) via the K-project
DeSSnet, which is funded in the context of COMET - Competence
Centers for Excellent Technologies by BMVIT, BMWFW, Styria, and
Carinthia. It was also supported by the European Research Coun-
cil (ERC) under the European Union’s Horizon 2020 research and
innovation programme (grant agreement No 681402). This work
also benefited from the support of the project ANR-19-CE39-0007
MIAOUS of the French National Research Agency (ANR). Additional
funding was provided by generous gifts from Intel. Any opinions,
findings, and conclusions or recommendations expressed in this
paper are those of the authors and do not necessarily reflect the
views of the funding parties.
REFERENCES
[1] Andreas Abel and Jan Reineke. 2013. Measurement-based Modeling of the Cache
Replacement Policy. In Real-Time and Embedded Technology and Applications
Symposium (RTAS).
[2] Alejandro Cabrera Aldaya, Billy Bob Brumley, Sohaib ul Hassan, Cesar Pereida
García, and Nicola Tuveri. 2018. Port Contention for Fun and Profit. In S&P.
webkit.org/show_bug.cgi?id=146531
[3] Alex Christensen. 2015. Reduce resolution of performance.now. https://bugs.
[4] Ricardo Alves, Stefanos Kaxiras, and David Black-Schaffer. 2018. Dynamically
disabling way-prediction to reduce instruction replay. In International Conference
on Computer Design (ICCD).
ASIA CCS ’20, June 1–5, 2020, Taipei, Taiwan
Lipp, et al.
Models 00h-0Fh Processors.
[5] AMD. 2013. BIOS and Kernel Developer’s Guide (BKDG) for AMD Family 15h
[6] AMD. 2014. Software Optimization Guide for AMD Family 15h Processors.
[7] AMD. 2017. AMD64 Architecture Programmer’s Manual.
[8] AMD. 2017. Software Optimization Guide for AMD Family 17h Processors.
[9] AMD. 2018. Software techniques for managing speculation on AMD processors.
[10] AMD. 2019. 2nd Gen AMD EPYC Processors Set New Standard for the Modern
Datacenter with Record-Breaking Performance and Significant TCO Savings.
[11] Antonio Barresi, Kaveh Razavi, Mathias Payer, and Thomas R. Gross. 2015. CAIN:
Silently Breaking ASLR in the Cloud. In WOOT.
[12] Daniel J. Bernstein. 2004. Cache-Timing Attacks on AES.
[13] Atri Bhattacharyya, Alexandra Sandulescu, Matthias Neugschwandtner, Alessan-
dro Sorniotti, Babak Falsafi, Mathias Payer, and Anil Kurmus. 2019. SMoTher-
Spectre: exploiting speculative execution through port contention. In CCS.
org/integration/mozilla-inbound/rev/48ae8b5e62ab
[14] Boris Zbarsky. 2015. Reduce resolution of performance.now. https://hg.mozilla.
[15] Leon Groot Bruinderink, Andreas Hülsing, Tanja Lange, and Yuval Yarom. 2016.
Flush, Gauss, and Reload–a cache attack on the BLISS lattice-based signature
scheme. In CHES.
[16] Claudio Canella, Daniel Genkin, Lukas Giner, Daniel Gruss, Moritz Lipp, Ma-
rina Minkin, Daniel Moghimi, Frank Piessens, Michael Schwarz, Berk Sunar, Jo
Van Bulck, and Yuval Yarom. 2019. Fallout: Leaking Data on Meltdown-resistant
CPUs. In CCS.
[17] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Benjamin von Berg,
Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and Daniel Gruss. 2019. A
Systematic Evaluation of Transient Execution Attacks and Defenses. In USENIX
Security Symposium.
[18] Mike Clark. 2016. A new x86 core architecture for the next generation of com-
puting. In IEEE Hot Chips Symposium (HCS).
[19] Stephen Crane, Andrei Homescu, Stefan Brunthaler, Per Larsen, and Michael
Franz. 2015. Thwarting Cache Side-Channel Attacks Through Dynamic Software
Diversity. In NDSS.
encryption standard.
Python. https://www.pycryptodome.org
[20] Joan Daemen and Vincent Rijmen. 2013. The design of Rijndael: AES-the advanced
[21] Helder Eijs. 2018. PyCryptodome: A self-contained cryptographic library for
[22] Dmitry Evtyushkin, Dmitry Ponomarev, and Nael Abu-Ghazaleh. 2016. Jump
[23] W. Shen Gene and S. Craig Nelson. 2006. MicroTLB and micro tag for reducing
over ASLR: Attacking branch predictors to bypass ASLR. In MICRO.
power in a processor . US Patent 7,117,290 B2.
[27] Daniel Gruss, Moritz Lipp, Michael Schwarz, Richard Fellner, Clémentine Maurice,
[25] Ben Gras, Kaveh Razavi, Erik Bosman, Herbert Bos, and Cristiano Giuffrida. 2017.
[24] Ben Gras, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2018. Translation
Leak-aside Buffer: Defeating Cache Side-channel Protections with TLB Attacks.
In USENIX Security Symposium.
ASLR on the Line: Practical Cache Attacks on the MMU. In NDSS.
[26] William Gropp, Ewing Lusk, Nathan Doss, and Anthony Skjellum. 1996. A high-
performance, portable implementation of the MPI message passing interface
standard. Parallel computing (1996).
and Stefan Mangard. 2017. KASLR is Dead: Long Live KASLR. In ESSoS.
[28] Daniel Gruss, Clémentine Maurice, Anders Fogh, Moritz Lipp, and Stefan Man-
gard. 2016. Prefetch Side-Channel Attacks: Bypassing SMAP and Kernel ASLR.
In CCS.
Remote Software-Induced Fault Attack in JavaScript. In DIMVA.
Flush+Flush: A Fast and Stealthy Cache Attack. In DIMVA.
[31] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. 2015. Cache Template
Attacks: Automating Attacks on Inclusive Last-Level Caches. In USENIX Security
Symposium.
[32] Shay Gueron. 2012. Intel Advanced Encryption Standard (Intel AES) Instructions
Set – Rev 3.01.
[30] Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Mangard. 2016.
[29] Daniel Gruss, Clémentine Maurice, and Stefan Mangard. 2016. Rowhammer.js: A
[33] Richard W Hamming. 1950. Error detecting and error correcting codes. The Bell
[34] Joel Hruska. 2019. AMD Gains Market Share in Desktop and Laptop, Slips in
system technical journal (1950).
Servers. https://www.extremetech.com/computing/291032-amd
[35] Ralf Hund, Carsten Willems, and Thorsten Holz. 2013. Practical Timing Side
Channel Attacks against Kernel Space ASLR. In S&P.
[36] Koji Inoue, Tohru Ishihara, and Kazuaki Murakami. 1999. Way-predicting set-
associative cache for high performance and low energy consumption. In Sympo-
sium on Low Power Electronics and Design.
[37] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. 2015. S$A: A Shared Cache
Attack that Works Across Cores and Defies VM Sandboxing – and its Application
to AES. In S&P.
attacks. In AsiaCCS.
Space Layout Randomization with Intel TSX. In CCS.
[38] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. 2016. Cross processor cache
[39] Yeongjin Jang, Sangho Lee, and Taesoo Kim. 2016. Breaking Kernel Address
[42] Paul C. Kocher. 1996. Timing Attacks on Implementations of Diffe-Hellman, RSA,
[40] Richard E Kessler. 1999. The alpha 21264 microprocessor. IEEE Micro (1999).
[41] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas,
Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz,
and Yuval Yarom. 2019. Spectre Attacks: Exploiting Speculative Execution. In
S&P.
DSS, and Other Systems. In CRYPTO.
the AES. In CT-RSA.
[44] Esmaeil Mohammadian Koruyeh, Khaled Khasawneh, Chengyu Song, and Nael
Abu-Ghazaleh. 2018. Spectre Returns! Speculation Attacks using the Return
Stack Buffer. In WOOT.
[45] Marcin Krzyzanowski. 2019. CryptoSwift: Growing collection of standard and
secure cryptographic algorithms implemented in Swift. https://cryptoswift.io
[46] Linux. 2019. Complete virtual memory map with 4-level page tables. https:
[43] Robert Könighofer. 2008. A Fast and Cache-Timing Resistant Implementation of
//www.kernel.org/doc/Documentation/x86/x86_64/mm.txt
[47] Linux. 2019. Linux Kernel 5.0 Process (x86). https://git.kernel.org/pub/scm/
linux/kernel/git/torvalds/linux.git/tree/arch/x86/kernel/process.c
[50] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B. Lee. 2015. Last-
[51] G. Maisuradze and C. Rossow. 2018. ret2spec: Speculative Execution Using Return
[48] Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clémentine Maurice, and Stefan
Mangard. 2016. ARMageddon: Cache Attacks on Mobile Devices. In USENIX
Security Symposium.
[49] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas,
Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval
Yarom, and Mike Hamburg. 2018. Meltdown: Reading Kernel Memory from User
Space. In USENIX Security Symposium.
Level Cache Side-Channel Attacks are Practical. In S&P.
Stack Buffers. In CCS.
[52] Clémentine Maurice, Nicolas Le Scouarnec, Christoph Neumann, Olivier Heen,
and Aurélien Francillon. 2015. Reverse Engineering Intel Complex Addressing
Using Performance Counters. In RAID.
[53] Clémentine Maurice, Manuel Weber, Michael Schwarz, Lukas Giner, Daniel Gruss,
Carlo Alberto Boano, Stefan Mangard, and Kay Römer. 2017. Hello from the
Other Side: SSH over Robust Cache Covert Channels in the Cloud. In NDSS.
How SGX Amplifies The Power of Cache Attacks. In CHES.
and common modes of operation. https://github.com/ricmoo/pyaes
[55] Richard Moore. 2017. pyaes: Pure-Python implementation of AES block-cipher
[54] Ahmad Moghimi, Gorka Irazoqui, and Thomas Eisenbarth. 2017. CacheZoom:
[56] Louis-Marie Vincent Mouton, Nicolas Jean Phillippe Huot, Gilles Eric Grandou,
and Stephane Eric Sebastian Brochier. 2012. Cache accessing using a micro TAG.
US Patent 8,151,055.
[57] Yossef Oren, Vasileios P Kemerlis, Simha Sethumadhavan, and Angelos D
Keromytis. 2015. The Spy in the Sandbox: Practical Cache Attacks in JavaScript
and their Implications. In CCS.
termeasures: the Case of AES. In CT-RSA.
[58] Dag Arne Osvik, Adi Shamir, and Eran Tromer. 2006. Cache Attacks and Coun-
[61] Moinuddin K Qureshi. 2019. New attacks and defense for encrypted-address
[59] Colin Percival. 2005. Cache missing for fun and profit. In BSDCan.
[60] Peter Pessl, Daniel Gruss, Clémentine Maurice, Michael Schwarz, and Stefan
Mangard. 2016. DRAMA: Exploiting DRAM Addressing for Cross-CPU Attacks.
In USENIX Security Symposium.
cache. In ISCA.
mentation of AES. In Cryptology and Network Security (CANS).
[63] Thomas Ristenpart, Eran Tromer, Hovav Shacham, and Stefan Savage. 2009.
Hey, You, Get Off of My Cloud: Exploring Information Leakage in Third-Party
Compute Clouds. In CCS.
Patent 6,425,055.
[62] Chester Rebeiro, A. David Selvakumar, and A. S. L. Devi. 2006. Bitslice Imple-
[64] David J Sager and Glenn J Hinton. 2002. Way-predicting cache memory. US
[65] Michael Schwarz, Claudio Canella, Lukas Giner, and Daniel Gruss. 2019. Store-to-
Leak Forwarding: Leaking Data on Meltdown-resistant CPUs. arXiv:1905.05725
(2019).
[66] Michael Schwarz, Daniel Gruss, Samuel Weiser, Clémentine Maurice, and Stefan
Mangard. 2017. Malware Guard Extension: Using SGX to Conceal Cache Attacks.
In DIMVA.
[67] Michael Schwarz, Moritz Lipp, Daniel Gruss, Samuel Weiser, Clémentine Maurice,
Raphael Spreitzer, and Stefan Mangard. 2018. KeyDrown: Eliminating Software-
Based Keystroke Timing Side-Channel Attacks. In NDSS.
[68] Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck, Julian Steck-
lina, Thomas Prescher, and Daniel Gruss. 2019. ZombieLoad: Cross-Privilege-
Boundary Data Sampling. In CCS.
[69] Michael Schwarz, Clémentine Maurice, Daniel Gruss, and Stefan Mangard. 2017.
Fantastic Timers and Where to Find Them: High-Resolution Microarchitectural
Attacks in JavaScript. In FC.
Spectre: Read Arbitrary Memory over Network. In ESORICS.
[70] Michael Schwarz, Martin Schwarzl, Moritz Lipp, and Daniel Gruss. 2019. Net-
Take A Way: Exploring the Security Implications of AMD’s Cache Way Predictors
ASIA CCS ’20, June 1–5, 2020, Taipei, Taiwan
Table 3: rdtsc increments on various CPUs.
Setup CPU
Lab
Lab
Lab
Lab
Lab
Lab
Lab
Lab
Lab
Lab
Lab
Lab
Lab
Cloud AMD EPYC 7401p
Cloud AMD EPYC 7571
µ-arch.
K8
AMD Athlon 64 X2 3800+
K10
AMD Turion II Neo N40L
K10
AMD Phenom II X6 1055T
Bobcat
AMD E-450
Jaguar
AMD Athlon 5350
Bulldozer
AMD FX-4100
Piledriver
AMD FX-8350
Steamroller
AMD A10-7870K
Zen
AMD Ryzen Threadripper 1920X
Zen
AMD Ryzen Threadripper 1950X
AMD Ryzen Threadripper 1700X
Zen
AMD Ryzen Threadripper 2970WX Zen+
AMD Ryzen 7 3700X
Zen 2
Zen
Zen
Increment
1
1
1
1
1
1
1
1
35
34
34
30
36
20
22
]
%
[
e
t
a
R
r
o
r
r
E
]
%
[
e
t
a
R
r
o
r
r
E
3
2
1
0
3
2
1
0
0
0
20
40
AMD Threadripper Ryzen 1920X
AMD EPYC 7751
60
80
Number of Channels
Figure 6: Error rate of the covert channel.
No Error Correction
Hamming(15,11)
Hamming(7,4)
20
40
60
80
Number of Channels
[71] Mark Seaborn. 2015. How physical addresses map to rows and banks in
DRAM. http://lackingrhoticity.blogspot.com/2015/05/how-physical-addresses-
map-to-rows-and-banks.html
[72] Raphael Spreitzer and Thomas Plos. 2013. Cache-Access Pattern Attack on
Disaligned AES T-Tables. In COSADE.
[73] Junko Takahashi, Toshinori Fukunaga, Kazumaro Aoki, and Hitoshi Fuji. 2013.
Highly accurate key extraction method for access-driven cache attacks using
correlation coefficient. In ACISP.
[74] Jo Van Bulck, Marina Minkin, Ofir Weisse, Daniel Genkin, Baris Kasikci, Frank
Piessens, Mark Silberstein, Thomas F. Wenisch, Yuval Yarom, and Raoul Strackx.
2018. Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient
Out-of-Order Execution. In USENIX Security Symposium.
[75] Stephan van Schaik, Alyssa Milburn, Sebastian Österlund, Pietro Frigo, Giorgi
Maisuradze, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2019. RIDL:
Rogue In-flight Data Load. In S&P.
[76] VMWare. 2018. Security considerations and disallowing inter-Virtual Machine
Transparent Page Sharing (2080735). https://kb.vmware.com/s/article/2080735
[77] Mario Werner, Thomas Unterluggauer, Lukas Giner, Michael Schwarz, Daniel
Gruss, and Stefan Mangard. 2019. ScatterCache: Thwarting Cache Attacks via
Cache Set Randomization. In USENIX Security Symposium.
buffer collisions. https://github.com/felixwilhelm/mario_baslr
[78] Felix Wilhelm. 2016. PoC for breaking hypervisor ASLR using branch target
[79] Henry Wong. 2013. Intel Ivy Bridge Cache Replacement Policy. http://blog.
stuffedcow.net/2013/01/ivb-cache-replacement/
[82] Yuval Yarom and Katrina Falkner. 2014. Flush+Reload: a High Resolution, Low
[80] John C Wray. 1992. An analysis of covert timing channels. Journal of Computer
Security 1, 3-4 (1992), 219–232.
[81] Mengjia Yan, Read Sprabery, Bhargava Gopireddy, Christopher Fletcher, Roy
Campbell, and Josep Torrellas. 2019. Attack directories, not caches: Side channel
attacks in a non-inclusive world. In S&P.
Noise, L3 Cache Side-Channel Attack. In USENIX Security Symposium.
[83] Xiaokuan Zhang, Yuan Xiao, and Yinqian Zhang. 2016. Return-oriented flush-
reload side channels on arm and their implications for android devices. In CCS.
[84] Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas Ristenpart. 2012. Cross-
VM Side Channels and Their Use to Extract Private Keys. In CCS.
Tenant Side-Channel Attacks in PaaS Clouds. In CCS.
[85] Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas Ristenpart. 2014. Cross-
A RDTSC RESOLUTION
We measure the resolution of the rdtsc instruction using the fol-
lowing experimental setup. We assume that the timestamp counter
(TSC) is updated in a fixed interval. This assumption is based on
the documentation in the manual that the timestamp counter is
independent of the CPU frequency [8]. Hence, there is a modulus
x and a constant C, such that TSC mod x ≡ C iff x is the TSC
increment. We can easily find this x with brute-force, i.e., trying
all different x until we find an x, which always results in the same
value C. Table 3 shows a rdtsc increments for the CPUs we tested.
Figure 7: Error rate of the covert channel with and without
error correction using different Hamming codes.
B COVERT CHANNEL ERROR RATE
Figure 6 illustrates the error rate of the covert channel described
in Section 5.1. The error rate increases drastically when transmitting
more than 64 bits in parallel. Thus, we evaluated different hamming
codes on an AMD Ryzen Threadripper 1920X (Figure 7).
C USERSPACE ASLR
Linux also uses ASLR for user processes by default. However, ran-
domizing the code section requires compiler support for position-
independent code. The heap memory region is of particular interest
because it is located just after the code section with an offset of up
to 32 MB [47]. User programs use 4 kB pages, giving an effective
13-bit entropy for the start of the brk-based heap memory.
It is possible to fully break heap ASLR through the use of µTags.
An attack requires an interface to the victim application that incurs
a victim access to data on the heap. We evaluated the ASLR break
using a client-server scenario in a toy application, where the at-
tacker is the malicious client. The attacker repeatedly sends benign
requests until it is distinguishable which tag is being accessed by
the victim. This already reduces the ASLR entropy by 8 bits because
it reveals a linear combination of the address bits. It is also possible
to recover all address bits up to bit 27 by using the µTags of multiple
pages and solving the resulting equation system.
Again, a limitation is that the attack is susceptible to noise. Too
many accesses while processing the attacker’s request negatively
impact the measurements such that the attacker will always observe
a cache miss. In our experiments, we were not able to mount the
attack using a socket-based interface. Hence, attacking other user-
space applications that rely on a more complex interface, e.g., using
D-Bus, is currently not practical. However, future work may refine
our techniques to also mount attacks in more noisy scenarios. For
our evaluation, we targeted a shared-memory-based API for high-
speed transmission without system calls [26] provided by the victim
application. We were able to recover 13 bits with an average success
rate of 88.9 % in 1.94 s (σ = 1.76 s, n = 1000).