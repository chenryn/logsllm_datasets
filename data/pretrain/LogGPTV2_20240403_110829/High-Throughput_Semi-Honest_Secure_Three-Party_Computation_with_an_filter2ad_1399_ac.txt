shown in a similar way). Party P1’s share consists of the
pair (a1, x1) where a1 = x3 − v. Since x1, x2, x3 are random
under the constraint that x1 + x2 + x3 = 0, this is equiva-
lent to x1 and x3 being chosen independently at random and
then x2 being chosen to equal −x1 − x3. In this light, a1 in
P1’s share is a one-time pad encryption of v using random
key x3, and x1 is an independent random value. Thus, P1’s
share reveals nothing about v whatsoever. This implies:
Lemma 2.1. For any two values va, vb ∈ Z2n and any
i ∈ {1, 2, 3}, the distribution over Pi’s share (xi, ai) of va is
identical to the distribution over Pi’s share (yi, bi) of vb.
Addition gates. As in the Boolean case, addition gates
are computed by locally adding the shares modulo 2n.
Multiplication gates: Let (x1, a1), (x2, a2), (x3, a3) be a
secret sharing of v1, and let (y1, b1), (y2, b2), (y3, b3) be a
secret sharing of v2, and assume the parties P1, P2, P3 hold
α, β, γ ∈ Z2n respectively, such that α + β + γ = 0. In order
(cid:1)-sharing of the product of two values, the
to compute a (cid:0)3
2
3
and sends r1 to P2.
parties work as above with the following diﬀerences:
1. P1 computes r1 = a1b1−x1y1+α
2. P2 computes r2 = a2b2−x2y2+β
3. P3 computes r3 = a3b3−x3y3+γ
4. P1 deﬁnes its share as z1 = r3 − r1 and c1 = −2r3 − r1.
5. P2 deﬁnes its share as z2 = r1 − r2 and c2 = −2r1 − r2.
6. P3 deﬁnes its share as z3 = r2 − r3 and c3 = −2r2 − r3.
and sends r3 to P1.
and sends r2 to P3.
3
3
We remark that the above computation is legal since 3 is
relatively prime to 2n; thus 3 has an inverse. In addition,
the above all holds in ﬁnite ﬁelds with more than 3 elements.
In order to see that r1 + r2 + r3 = v1v2, ﬁrst observe that
a1b1 = (x3 − v1)(y3 − v2) = x3y3 − x3v2 − y3v1 + v1v2 (2)
and likewise a2b2 = x1y1 − x1v2 − y1v1 + v1v2 and a3b3 =
x2y2 − x2v2 − y2v1 + v1v2. Then,
3(r1 + r2 + r3)
= a1b1 − x1y1 + α + a2b2 − x2y2 + β + a3b3 − x3y3 + γ
= a1b1 + a2b2 + a3b3 − x1y1 − x2y2 − x3y3
= 3v1v2 − v1(y1 + y2 + y3) − v2(x1 + x2 + x3) = 3v1v2
where the second equality holds since α + β + γ = 0 and
the third equality follows by plugging in the equivalences
of a1b1, a2b2, a3b3 above (see Eq. (2)) and rearranging the
elements, and the fourth equality follows from the fact that
x1 + x2 + x3 = y1 + y2 + y3 = 0. Since we can divide by 3 in
this ring (and in a ﬁeld) we have that r1 + r2 + r3 = v1v2.
Next, we show that the shares the parties hold are a valid
shares are (z1, z3 − v1v2), (z2, z1 − v1v2) and (z3, z2 − v1v2)
such that z1 + z2 + z3 = 0 mod 2n. First, observe that the
sum of the ﬁrst elements of the shares is z1 + z2 + z3 = (r3 −
(cid:1)-sharing of v1v2 according to our deﬁnition. i.e, that the
(cid:0)3
2
r1) + (r1 − r2) + (r2 − r3) = 0 as required. Second, for party
P1 it holds that, c1 = −2r3 − r1 = −r3 − r3 − r1 − r2 + r2 =
(r2 − r3)− (r1 + r2 + r3) = z3 − v1v2 as required (recall that
z3 = r2 − r3 in the protocol). Correctness for P2 and P3
follows similarly.
In the proof of security, we show that the secret is per-
fectly hidden by the resulting secret sharing. This hiding
follows from the use of the correlated randomness in the
computation. In particular, the random values α, β, γ that
the parties add in the local computation perfectly mask the
value on the wire.
Generating correlated randomness. The parties use
the same (computational) method as described in Section 2.2,
with the following diﬀerences. First, we assume that Fk
is a pseudorandom function mapping strings into Z2n (or
equivalently to {0, 1}n). Second, party P1 computes α =
Fk1 (id)− Fk2 (id), party P2 computes β = Fk2 (id)− Fk3 (id),
and party P3 computes γ = Fk3 (id) − Fk1 (id).
2.4 Protocol Efﬁciency and Comparison
In the case of arbitrary ﬁnite ﬁelds, Shamir’s secret-sharing
[24] is “ideal”, meaning that the size of the share equals the
size of the secret (which is minimum size), as long as the
number of parties is less than the size of the ﬁeld. In our pro-
tocol, the secret sharing scheme is not ideal since it consists
of two ring or ﬁeld elements instead of a single ﬁeld element.
However, this is of little consequence when considering the
eﬃciency of the protocol since our protocol requires only
sending a single element per multiplication gate. In addi-
tion, the computation consists merely of two multiplications
and two additions.
In comparison, the BGW protocol [2, 1] requires transmit-
ting two ﬁeld elements per multiplication gate by each party
when using [21] method (with a single round of communi-
cation). In addition, when considering Boolean circuits, at
least two bits are needed per ﬁeld element, since there are 3
parties. Furthermore, the computation requires polynomial
evaluations which are far more expensive.
In the Sharemind protocol [4, 5], the parties transmit
ﬁve ring elements per AND gate over two communication
rounds, and compute 3 multiplications and 8 additions. We
remark that our method for generating correlated random-
ness can be used to reduce the number of elements sent in
the Sharemind protocol from 5 to 2 and to reduce the num-
ber of communication rounds to 1.
3. SECURITY FOR SEMI-HONEST
ADVERSARIES
In this section, we prove that our protocol is secure in the
presence of one semi-honest adversarial party (in Section 4
we prove that the protocol is private in the presence of one
malicious adversary). Semi-honest security is suﬃcient when
parties somewhat trust each other, but are concerned with
inadvertent leakage or cannot share their raw information
due to privacy regulations. It is also suﬃcient in cases where
it is reasonable to assume that the parties running the pro-
tocol are unable to replace the installed code. Nevertheless,
security against covert or malicious adversaries is preferable,
providing far higher guarantees; we leave extensions of our
protocol to these settings for future work.
Since the protocol for Boolean circuits is a special case of
the protocol for the ring modulo 2n, we prove the security
809for the case of the ring modulo 2n. The proof is identical in
the case of ﬁelds with more than 3 elements. Throughout, in
order to simplify notation, when we use an index (say, i) to
denote the ith party (with i ∈ {1, 2, 3}), we will write i − 1
and i + 1 to mean the “previous” and “subsequent” party,
respectively. That is, when i = 1 then i − 1 = 3 and when
i = 3 then i + 1 = 1.
3.1 Preliminaries
We use the deﬁnition of security in the presence of semi-
honest adversaries as in [6, 11], making the necessary changes
to formalize perfect security as well.
Perfect security in the presence of semi-honest ad-
versaries. Loosely speaking, a protocol is secure in the
presence of one corrupted party if the view of the corrupted
party in a real protocol execution can be generated by a
simulator given only the corrupted party’s input and out-
put. The view of party i during an execution of a protocol
π on inputs (cid:126)x, denoted Viewπ
i ((cid:126)x), consists of its input xi,
its internal random coins ri and the messages that were re-
ceived by i in the execution. The output of all parties from
an execution of π is denoted by Outputπ((cid:126)x).
Definition 3.1. Let f : ({0, 1}∗)3 → ({0, 1}∗)3 be a prob-
abilistic 3-ary functionality and let π be a protocol. We say
that π computes f with perfect security in the presence of
one semi-honest corrupted party for f if there exists a proba-
bilistic polynomial-time algorithm S such that for every cor-
rupted party i ∈ {1, 2, 3}, and every (cid:126)x ∈ ({0, 1}∗)3 where
|x1| = |x2| = |x3|:
(cid:110)
(cid:111)
(cid:111) ≡(cid:110)
(S(xi, fi((cid:126)x)), f ((cid:126)x))
(Viewπ
i ((cid:126)x), Outputπ((cid:126)x))
(3)
If Eq. (3) holds with computational indistinguishability, then
we say that π computes f with computational security in the
presence of one semi-honest corrupted party.
The above deﬁnition is for the general case of probabilis-
tic functionalities, where we consider the joint distribution
of the output of S and of the parties. For the case of deter-
ministic functionalities, however, we can separate the cor-
rectness and privacy requirements, and use a simpler and
easier to prove deﬁnition. As shown in [11](see section 7.3.1),
any probabilistic functionality can be privately computed in
the presence of t corrupted parties using a general proto-
col which computes any deterministic functionality in the
presence of t corrupted parties. Therefore, in order to prove
the security of our protocol we can use the deﬁnition for
deterministic functionalities stated below.
Definition 3.2. Let f : ({0, 1}∗)3 → ({0, 1}∗)3 be a de-
terministic 3-ary functionality and let π be a protocol. We
say that π computes f with perfect security in the presence
of one semi-honest corrupted party for f , if for every (cid:126)x ∈
({0, 1}∗)3 where |x1| = |x2| = |x3|, the following two prop-
erties hold: (a) Outputπ((cid:126)x) = f ((cid:126)x), and (b) there exists a
probabilistic polynomial-time algorithm S such that for every
corrupted party i ∈ {1, 2, 3}, and every (cid:126)x ∈ ({0, 1}∗)3 where
|x1| = |x2| = |x3|:
{S(xi, fi((cid:126)x))} ≡ {Viewπ
i ((cid:126)x)}
We prove the security of our protocols using the hybrid
model, where parties run a protocol with real messages and
also have access to a trusted party computing a subfunction-
ality for them. The modular sequential composition theorem
of [7] states that replacing the trusted party computing the
subfunctionality with a real secure protocol results in the
same output distribution. When the subfunctionality is g,
we say that the protocol works in the g-hybrid model.
Universal composability. Protocols that are proven se-
cure in the universal composability framework [7] have the
property that they maintain their security when run in par-
allel and concurrently with other secure and insecure proto-
cols. In [17, Theorem 1.5], it was shown that any protocol
that is proven secure with a black-box non-rewinding simu-
lator and also has the property that the inputs of all parties
are ﬁxed before the execution begins (called input availabil-
ity or start synchronization in [17]), is also secure under uni-
versal composability. Since the input availability property
holds for all of our protocols and subprotocols, it is suﬃ-
cient to prove security in the classic stand-alone setting and
automatically derive universal composability from [17]. We
remark that this also enables us to call the protocol and
subprotocols that we use in parallel and concurrently (and
not just sequentially), enabling us to achieve more eﬃcient
computation (e.g., by running many executions in parallel
or by running each layer of a circuit in parallel).
Proof outline. We denote a protocol π in the g-hybrid
model by πg, and the real protocol obtained by replacing
calls to g by invocations of subprotocol ρ by πρ. We abuse
notation and write πg ≡ f to say that π securely computes f
in the g-hybrid model, and write πρ ≡ f to say that the real
protocol πρ securely computes f . Denote by σ the protocol
that computes the correlated randomness functionality Fcr,
by ρ the protocol that computes the multiplication function-
ality Fmult in the Fcr-hybrid model, and by π the protocol
that computes the functionality f in the Fmult-hybrid model.
Our goal is to prove that πρσ
securely computes f in the
presence of one static semi-honest corrupted party.
Let f be a 3-ary functionality. We begin by proving that
πFmult computes f with perfect security in the presence of
one static semi-honest party. Next, we prove that ρFcr com-
putes Fmult with perfect security in the presence of one static
semi-honest party in the Fcr-hybrid model. Finally, we
prove that σ computes Fcr with computational security in
the presence of one static semi-honest party. The reason for
achieving only computational security for the correlated ran-
domness protocol is that we use a pseudorandom function to
compute the random values. The proof in this case, thereby,
works by making a reduction to a distinguisher between a
pseudorandom function and a random function.
Once we have proved that f ≡ πFmult , that Fmult ≡ ρFcr
c≡ σ, we can apply the composition theorem
and that Fcr
of [7] (using the fact that universal composability is implied
via [17]) to conclude that πρFcr ≡ f ; that is, πρσ
computes
f with computationl security in the presence of one static
semi-honest adversary.
3.2 Computing f in the Fmult-Hybrid Model
We deﬁne the multiplication functionality Fmult that re-
ceives input shares of two values va, vb as input and outputs
shares of the product vavb, according to the secret-sharing
Intuitively, Fmult should
scheme described in Section 2.3.
be deﬁned by receiving the shares of all parties, reconstruct-
ing the values v1, v2 from the shares, and then generating a
810random resharing of the v1v2. Indeed, if secure coin tossing
were used instead of the method that we use for correlated
randomness, then Fmult would be deﬁned in this natural
way. However, this would require additional communication
and would aﬀect performance. We therefore need to deﬁne
a more complex multiplication functionality.
In order to
understand why this is needed, recall the real protocol and
consider the speciﬁc case that P1 is corrupted. In order to
simplify this explanation, consider the Boolean case.
Party P1 computes r1 = x1y1 ⊕ a1b1 ⊕ α and receives r3
from P3. Observe that α is not random to the corrupted
P1 and is ﬁxed by a very speciﬁc computation (speciﬁcally,
Fk1 (id) ⊕ Fk2 (id); see Section 2.2). Thus, P1’s computation
of r1 is deterministic. Now, P1’s output from the multi-
plication protocol is the pair (z1, c1) where z1 = r1 ⊕ r3
and c1 = r1. Since r3 is received from P3 and is masked