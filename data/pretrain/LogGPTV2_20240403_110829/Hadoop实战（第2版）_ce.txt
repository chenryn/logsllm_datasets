### 优化后的文本

#### 启动ZooKeeper实例
使用以下命令启动ZooKeeper服务：
```bash
zkServer.sh start zoo3.cfg
```

在执行上述命令后，您可能会遇到一些系统错误提示，如图15-4所示。

**图 15-4 集群伪分布异常提示**

这些异常信息的产生是因为每个ZooKeeper实例都具有全局配置信息，并且在启动时会进行Leader选举。此时，第一个启动的ZooKeeper实例试图与另外两个尚未启动的实例通信，从而导致了这些异常。您可以忽略这些错误信息，在启动其他两个ZooKeeper实例（“2号”和“3号”）之后，这些异常信息将自动消失。

#### ZooKeeper四字命令
ZooKeeper支持一系列特定的四字命令，用于查询其当前状态及相关信息。用户可以通过telnet或nc客户端向ZooKeeper发送这些命令。常用的四字命令见表15-2。

**图 15-5 ZooKeeper四字命令用例**

#### ZooKeeper命令行工具
成功启动ZooKeeper服务后，使用以下命令连接到ZooKeeper：
```bash
zkCli.sh -server 10.77.20.23:2181
```
连接成功后，系统会输出ZooKeeper的相关环境及配置信息，并显示“Welcome to ZooKeeper”等信息。输入`help`命令可查看可用的ZooKeeper命令，如图15-6所示。

**图 15-6 ZooKeeper命令**

### ZooKeeper的简单操作

#### 使用ZooKeeper命令的基本步骤

1. **查看当前ZooKeeper内容**
   ```bash
   [zk: 10.77.20.23:2181 (CONNECTED) 1] ls /
   [zookeeper]
   ```

2. **创建新的Znode节点**
   ```bash
   [zk: 10.77.20.23:2181 (CONNECTED) 2] create /zk myData
   Created /zk
   ```

3. **再次查看ZooKeeper内容**
   ```bash
   [zk: 10.77.20.23:2181 (CONNECTED) 3] ls /
   [zk, zookeeper]
   ```

4. **验证创建的Znode是否包含预期数据**
   ```bash
   [zk: 10.77.20.23:2181 (CONNECTED) 4] get /zk
   myData
   Zxid=0x40000000c
   time=Tue Jan 18 18:48:39 CST 2011
   mtime=Tue Jan 18 18:48:39 CST 2011
   pZxid=0x40000000c
   cversion=0
   dataVersion=0
   aclVersion=0
   ephemeralOwner=0x0
   dataLength=6
   numChildren=0
   ```

5. **修改Znode关联的数据**
   ```bash
   [zk: 10.77.20.23:2181 (CONNECTED) 5] set /zk shenlan211314
   cZxid=0x40000000c
   ctime=Tue Jan 18 18:48:39 CST 2011
   mZxid=0x40000000d
   mtime=Tue Jan 18 18:52:11 CST 2011
   pZxid=0x40000000c
   cversion=0
   dataVersion=1
   aclVersion=0
   ephemeralOwner=0x0
   dataLength=13
   numChildren=0
   ```

6. **删除Znode节点**
   ```bash
   [zk: 10.77.20.23:2181 (CONNECTED) 6] delete /zk
   ```

7. **确认Znode已被删除**
   ```bash
   [zk: 10.77.20.23:2181 (CONNECTED) 7] ls /
   [zookeeper]
   ```

### ZooKeeper API简介

ZooKeeper API 包含五个主要包：`org.apache.zookeeper`、`org.apache.zookeeper.data`、`org.apache.zookeeper.server`、`org.apache.zookeeper.server.quorum` 和 `org.apache.zookeeper.server.upgrade`。其中，`org.apache.zookeeper` 包中的 `ZooKeeper` 类是编程时最常用的类文件。

#### 使用ZooKeeper API的示例

下面通过一个简单的例子来介绍如何使用ZooKeeper API编写应用程序。请参见代码清单15-6。

**代码清单15-6 ZooKeeper API的使用**
```java
package cn.edu.ruc.cloudcomputing.book.chapter14;

import java.io.IOException;
import org.apache.zookeeper.CreateMode;
import org.apache.zookeeper.KeeperException;
import org.apache.zookeeper.Watcher;
import org.apache.zookeeper.ZooDefs.Ids;
import org.apache.zookeeper.ZooKeeper;

public class Demo {
    private static final int SESSION_TIMEOUT = 30000;
    private ZooKeeper zk;

    private Watcher watcher = new Watcher() {
        @Override
        public void process(WatchedEvent event) {
            System.out.println(event.toString());
        }
    };

    private void createZKInstance() throws IOException {
        zk = new ZooKeeper("localhost:2181", SESSION_TIMEOUT, watcher);
    }

    private void ZKOperations() throws IOException, InterruptedException, KeeperException {
        System.out.println("\n1. 创建ZooKeeper节点 (znode: /zoo2, 数据: myData2, 权限: OPEN_ACL_UNSAFE, 节点类型: Persistent)");
        zk.create("/zoo2", "myData2".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

        System.out.println("\n2. 查看是否创建成功:");
        System.out.println(new String(zk.getData("/zoo2", false, null)));

        System.out.println("\n3. 修改节点数据");
        zk.setData("/zoo2", "shenlan211314".getBytes(), -1);

        System.out.println("\n4. 查看是否修改成功:");
        System.out.println(new String(zk.getData("/zoo2", false, null)));

        System.out.println("\n5. 删除节点");
        zk.delete("/zoo2", -1);

        System.out.println("\n6. 查看节点是否被删除:");
        System.out.println("节点状态: [" + zk.exists("/zoo2", false) + "]");
    }

    private void ZKClose() throws InterruptedException {
        zk.close();
    }

    public static void main(String[] args) throws IOException, InterruptedException, KeeperException {
        Demo dm = new Demo();
        dm.createZKInstance();
        dm.ZKOperations();
        dm.ZKClose();
    }
}
```

此示例展示了如何使用ZooKeeper API进行基本操作，包括创建、读取、更新和删除Znode节点。更多详细信息，请参考ZooKeeper的API文档：
[http://hadoop.apache.org/zookeeper/docs/r3.4.3/api/index.html](http://hadoop.apache.org/zookeeper/docs/r3.4.3/api/index.html)

程序运行结果如下：
```
1. 创建ZooKeeper节点 (znode: /zoo2, 数据: myData2, 权限: OPEN_ACL_UNSAFE, 节点类型: Persistent)
11/01/18 05:07:16 INFO zookeeper.ClientCnxn: Socket connection established to localhost/127.0.0.1:2181, initiating session
...
```

希望这些改进能使您的文档更加清晰、连贯和专业。