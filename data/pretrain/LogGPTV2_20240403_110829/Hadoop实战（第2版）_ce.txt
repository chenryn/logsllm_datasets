zkServer.sh start zoo3.cfg
在运行完第一条命令之后，大家将会发现一些系统错误提示，如图15-4所示。
图 15-4 集群伪分布异常提示
产生如图15-4所示的异常信息是由于ZooKeeper服务的每个实例都拥有全局的配置信息，它们在启动的时候会随时地进行Leader选举操作（此部分内容后面将会详细讲述）。此时第一个启动的Zookeeper需要和另外两个ZooKeeper实例进行通信。但是，另外两个ZooKeeper实例还没有启动起来，因此就产生了这样的异常信息。
我们直接将其忽略即可，待把图示中的“2号”和“3号”ZooKeeper实例启动起来之后，相应的异常信息就会自然而然的消失了。
4.ZooKeeper四字命令
ZooKeeper支持某些特定的四字命令字母与其的交互。它们大多是查询命令，用来获取ZooKeeper服务的当前状态及相关信息。用户在客户端可以通过telnet或nc向ZooKeeper提交相应的命令。ZooKeeper常用的四字命令见表15-2。
图15-5是ZooKeeper四字命令的一个简单用例。
图 15-5 ZooKeeper四字命令用例
5.ZooKeeper命令行工具
在成功启动ZooKeeper服务之后，输入下述命令，连接到ZooKeeper服务：
zkCli.sh-server 10.77.20.23：2181
连接成功后，系统会输出ZooKeeper的相关环境及配置信息，并在屏幕输出“Welcome to ZooKeeper”等信息。
输入help之后，屏幕会输出可用的ZooKeeper命令，如图15-6所示：
图 15-6 ZooKeeper命令
15.3 ZooKeeper的简单操作
 15.3.1 使用ZooKeeper命令的简单操作步骤
1）使用ls命令查看当前ZooKeeper中所包含的内容：
[zk：10.77.20.23：2181（CONNECTED）1]ls/
[zookeeper]
2）创建一个新的Znode，使用create/zk myData这个命令创建了一个新的Znode节点“zk”，以及与它关联的字符串：
[zk：10.77.20.23：2181（CONNECTED）2]create/zk myData
Created/zk
3）再次使用ls命令来查看现在ZooKeeper中所包含的内容：
[zk：10.77.20.23：2181（CONNECTED）3]ls/
[zk, zookeeper]
此时看到，zk节点已经被创建。
4）下面我们运行get命令来确认第二步中所创建的Znode是否包含我们创建的字符串：
[zk：10.77.20.23：2181（CONNECTED）4]get/zk
myData
Zxid=0x40000000c
time=Tue Jan 18 18：48：39 CST 2011
Zxid=0x40000000c
mtime=Tue Jan 18 18：48：39 CST 2011
pZxid=0x40000000c
cversion=0
dataVersion=0
aclVersion=0
ephemeralOwner=0x0
dataLength=6
numChildren=0
5）接下来通过set命令来对zk所关联的字符串进行设置：
[zk：10.77.20.23：2181（CONNECTED）5]set/zk shenlan211314
cZxid=0x40000000c
ctime=Tue Jan 18 18：48：39 CST 2011
mZxid=0x40000000d
mtime=Tue Jan 18 18：52：11 CST 2011
pZxid=0x40000000c
cversion=0
dataVersion=1
aclVersion=0
ephemeralOwner=0x0
dataLength=13
numChildren=0
6）下面我们将刚才创建的Znode删除：
[zk：10.77.20.23：2181（CONNECTED）6]delete/zk
7）最后再次使用ls命令查看ZooKeeper所包含的内容：
[zk：10.77.20.23：2181（CONNECTED）7]ls/
[zookeeper]
经过验证，zk节点已经被删除。
15.3.2 ZooKeeper API的简单使用
1.ZooKeeper API简介
ZooKeeper API共包含五个包，分别为：org.apache.zookeeper、org.apache.zookeeper.data、org.apache.zookeeper.server、org.apache.zookeeper.server.quorum和org.apache.zookeeper.server.upgrade。其中org.apache.zookeeper包含ZooKeeper类，它是我们编程时最常用的类文件。
这个类是ZooKeeper客户端库的主要类文件。如果要使用ZooKeeper服务，应用程序首先必须创建一个Zookeeper实例，这时就需要使用此类。一旦客户端和ZooKeeper服务建立起了连接，ZooKeeper系统将会给此连接会话分配一个ID值，并且客户端将会周期性地向服务器发送心跳来维持会话的连接。只要连接有效，客户端就可以调用ZooKeeper API来做相应的处理。
ZooKeeper类提供了表15-3所示的几类主要方法。
2.ZooKeeper API的使用
这里通过一个例子来简单介绍如何使用ZooKeeper API编写自己的应用程序，见代码清单15-6。
代码清单15-6 ZooKeeper API的使用
package cn.edu.ruc.cloudcomputing.book.chapter14；
1 import java.io.IOException；
2
3 import org.apache.zookeeper.CreateMode；
4 import org.apache.zookeeper.KeeperException；
5 import org.apache.zookeeper.Watcher；
6 import org.apache.zookeeper.ZooDefs.Ids；
7 import org.apache.zookeeper.ZooKeeper；
8
9 public class demo{
10//会话超时时间，设置为与系统默认时间一致
11 private static final int SESSION_TIMEOUT=30000；
12
13//创建ZooKeeper实例
14 ZooKeeper zk；
15
16//创建Watcher实例
17 Watcher wh=new Watcher（）{
18 public void process（org.apache.zookeeper.WatchedEvent event）
19{
20 System.out.println（event.toString（））；
21}
22}；
23
24//初始化ZooKeeper实例
25 private void createZKInstance（）throws IOException
26{
27 zk=new ZooKeeper（"localhost：2181"，demo.SESSION_TIMEOUT, this.wh）；
28
29}
30
31 private void ZKOperations（）throws IOException, InterruptedException, Keepe
rException
32{
33 System.out.println（"\n1.创建ZooKeeper节点（znode：zoo2，数据：myData2，
权限：OPEN_ACL_UNSAFE，节点类型：Persistent"）；
34 zk.create（"/zoo2"，"myData2".getBytes（），Ids.OPEN_ACL_UNSAFE，
CreateMode.PERSISTENT）；
35
36 System.out.println（"\n2.查看是否创建成功："）；
37 System.out.println（new String（zk.getData（"/zoo2"，false, null）））；
38
39 System.out.println（"\n3.修改节点数据"）；
40 zk.setData（"/zoo2"，"shenlan211314".getBytes（），-1）；
41
42 System.out.println（"\n4.查看是否修改成功："）；
43 System.out.println（new String（zk.getData（"/zoo2"，false, null）））；
44
45 System.out.println（"\n5.删除节点"）；
46 zk.delete（"/zoo2"，-1）；
47
48 System.out.println（"\n6.查看节点是否被删除："）；
49 System.out.println（"节点状态：["+zk.exists（"/zoo2"，false）+"]"）；
50}
51
52 private void ZKClose（）throws InterruptedException
53{
54 zk.close（）；
55}
56
57 public static void main（String[]args）throws IOException, InterruptedExce
ption, KeeperException{
58 demo dm=new demo（）；
59 dm.createZKInstance（）；
60 dm.ZKOperations（）；
61 dm.ZKClose（）；
62}
63}
此类包含两个主要的ZooKeeper函数，分别为createZKInstance（）和ZKOperations（）。其中createZKInstance（）函数负责对ZooKeeper实例zk进行初始化。ZooKeeper类有两个构造函数，这里使用“ZooKeeper（String connectString, int sessionTimeout, Watcher watcher）”对其进行初始化。因此，我们需要提供初始化所需的连接字符串信息、会话超时时间，以及一个watcher实例。第17行到第23行的代码是程序所构造的一个watcher实例，它能够输出所发生的事件。
ZKOperations（）函数是我们所定义的对节点的一系列操作。它包括：创建ZooKeeper节点（第33行到第34行代码）、查看节点（第36行到第37行代码）、修改节点数据（第39行到第40行代码）、查看修改后节点数据（第42行到第43行代码）、删除节点（第45行到第46行代码）、查看节点是否存在（第48行到第49行代码）。另外，需要注意的是，在创建节点的时候，需要提供节点的名称、数据、权限，以及节点类型。此外，使用exists函数时，如果节点不存在则返回一个null值。关于ZooKeeper API的更多详细信息，大家可以查看ZooKeeper的API文档，如下所示：
http：//hadoop.apache.org/zookeeper/docs/r3.4.3/api/index.html
代码清单15-6中程序运行的结果如下所示。
1创建ZooKeeper节点（znode：zoo2，数据：myData2，权限：OPEN_ACL_UNSAFE，节点类型：
Persistent
11/01/18 05：07：16 INFO zookeeper.ClientCnxn：Socket connection established to
localhost/127.0.0.1：2181，initiating session