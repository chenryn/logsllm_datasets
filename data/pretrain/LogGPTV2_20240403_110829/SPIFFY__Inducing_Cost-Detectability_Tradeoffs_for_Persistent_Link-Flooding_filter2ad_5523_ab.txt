their rates in response to congestion, and thus approximate
per-ﬂow max-min fair rates [8]. If senders do not conform to
the TCP ﬂow control (i.e., they send ﬂows faster than the fair-
share rates) they can be detected by other mechanisms [34].
Based on this threat model deﬁned, we develop and eval-
3
uate SPIFFY in the following sections.
III. SPIFFY INTUITION AND SECURITY ANALYSIS
In this section, we provide the intuition behind SPIFFY
and the security analysis showing why it forces adversaries
to either increase costs (Gcost) or forgo indistinguishability
(Gpersistence) while achieving rate degradation for legitimate
ﬂows (Gstrength).
A. High-level Idea
The key reason why link-ﬂooding attacks are so successful
and dangerous is that they are affordable and indistinguishable.
Thus, our overall goal is to force attackers to compromise
on either Gpersistence or Gcost for a given Gstrength; i.e., the
attackers either become detectable or pay an increased cost.
The intuition behind our approach is as follows. During
a link-ﬂooding attack, a legitimate sender would only be
able to send trafﬁc at a much lower per-host rate compared
to the desired application-layer data rates. This is because
the attack with the rate-reduction goal (Gstrength) decreases
legitimate ﬂow rates signiﬁcantly. However, an attacker who
is trying to optimize cost (Gcost) would have all its bots send
at their highest per-host send rate (i.e., saturate its upstream
bandwidth), by creating additional attack ﬂows whenever its
upstream bandwidth allows it. Due to these fundamental goal
differences, a legitimate sender and an adversary’s bot would
react very differently when the congestion is relieved; viz.,
Figure 1. A legitimate sender would very likely increase its
send rate to meet its rate demand (e.g., buffered trafﬁc from
application layer) due to TCP rate control while a bot would
have no available bandwidth left for further rate increase.
We can implement the controlled congestion relief by what
we call the temporary bandwidth expansion (TBE). That is, we
temporarily increase the virtual bandwidth of the target link
by some factor M to allow senders suffering from congestion
to increase their send rates. TBE enables us to measure the
rate increases of senders and ultimately distinguish bots from
legitimate senders.
In order to prevent bots from being detected, a link-ﬂooding
adversary must give up fully utilizing the upstream bandwidth
of bots and mimic the legitimate senders’ rate increase when
congestion is relieved, as we will see below. However, this
rate-increase mimicry will lower the bandwidth utilization of
each bot and in turn cause the link-ﬂooding adversary to
signiﬁcantly increase the number of attack bots. As a result,
the link-ﬂooding adversary faces an untenable choice: (1) she
could maintain the low-attack cost while allowing her bots to
be detected, or (2) she could make bots indistinguishable while
increasing the attack cost signiﬁcantly.
B. Security Analysis
We begin by formulating the optimal attack strategy for
a scenario without the SPIFFY defense and then argue why
SPIFFY creates a fundamental cost-detectability tradeoff for
link-ﬂooding adversaries. For simplicity of presentation and
without loss of generality, the following analysis assumes a
homogeneous bot deployment where each bot has the same
upstream bandwidth u. Let B be the bandwidth of the target
link which is under the link-ﬂooding attack.
Optimal adversary strategy without SPIFFY (AS:spiﬀy):
An adversary can optimally satisfy the attack goals Gstrength,
Gcost, Gpersistence by using B=u bots, where each bot creates
u=rd attack ﬂows and saturates its upstream bandwidth u.
Proof: To congest the target and reduce the per-ﬂow TCP
fair-share rate Gstrength, the attack ﬁrst has to ﬂood the target
link. Thus, the minimum number of bots required for the attack
Gcost is nb = B=u. Also, due to TCP per-ﬂow fairness, the
fair-share rate provided by the target is rFS = B
, where Nb
Nb
represents the total number of attack ﬂows. This assumes no
legitimate ﬂows in the target link: the attack strategy designed
without considering legitimate ﬂows guarantees meeting the
attack goals even when legitimate ﬂows exist. Also, due to
the rate-reduction goal the fair-share rate is reduced to the
degraded rate Gstrength, rFS = rd. Since Nb attack ﬂows are
created by nb bots, on average each bot creates Nb=nb attack
ﬂows, which is Nb=nb = (B=rd)=(B=u) = u=rd.3
An adversary with attack strategy AS:spiﬀy has already
saturated the upstream bandwidth of each bot. As a result,
bots cannot increase their sending rate by a factor of M and
cannot avoid being detected by SPIFFY. We argue that for the
adversary to evade the test, it must satisfy a property we call
rate-increase mimicry.
(cid:15) Rate-increase Mimicry (RM): Bots are capable of
instantly increasing their send rate by a factor of M
when congestion is relieved at the bottlenecked link. This
implies that bots must use only u=M of their upstream
bandwidth when congesting the target link.
The RM property enables the adversary to simultaneously
satisfy Gstrength and Gpersistence while compromising Gcost.
If all bots are capable of rate increase with a factor of M , they
pass the SPIFFY test and thus bots remain undetected. This
leaves the adversary with the following new attack strategy
under SPIFFY.
Optimal attack strategy with SPIFFY (AS spiﬀy): The attack
strategy must satisfy the two conditions to achieve the two
attack goals Gstrength and Gpersistence under SPIFFY.
(1) the attack utilizes M (cid:1) (B=u) bots and
(2) each bot creates (u=rd)=M attack ﬂows by utilizing only
1=M of its upstream bandwidth u.
Proof: The proof is similar to that of the optimal attack
strategy with SPIFFY (AS:spiﬀy). However, due to the RM
property, when attacking the target link, each bot uses only
1=M of its bandwidth limit u. Therefore, the attack requires
B=(u=M ) = M (cid:1) (B=u) bots, where each bot creates u=rg =
u=(M (cid:1) rd) attack ﬂows.
Thus, a link-ﬂooding adversary now faces the following
mutually-exclusive options forcing a fundamental tradeoff be-
tween cost and detectability:
1) Adversary follows AS:spiﬀy and requires (B=u) bots,
potentially allowing detection of his/her bots by SPIFFY.
3For simplicity, we ignore small errors generated when converting real
values to integers.
Fig. 3: Workﬂow of SPIFFY
2) Adversary follows AS spiﬀy and requires M (cid:1) (B=u) bots,
circumventing the bot detection.
We argue that an adversary has no other options than those
listed above. To see why, let us consider two attack strategies
that differ from these: (1) Per-ﬂow rate increase strategy: In
this strategy, bots saturate their bandwidth to attain the cost-
minimization goal Gcost. They quickly detect the bandwidth
expansion and instantly allocate increased bandwidth to a set of
selected ﬂows by pausing (or terminating) other attack ﬂows,
making the selected ﬂows look legitimate. However, since
SPIFFY measures per-sender (not per-ﬂow) rate changes, such
bots would be detected due to their unchanged per-sender rates.
(2) Bot replacement strategy: This strategy also saturates the
bots to achieve Gcost. The adversary replaces his/her bots in
operation with new bots whenever the current bots are detected
by SPIFFY. Although this strategy can be efﬁcient for a short
period of time, the cost of maintaining the attack persistence
grows linearly with attack duration increases since bots need
to be replaced repeatedly.
IV. SPIFFY SYSTEM OVERVIEW
In this section, we describe an end-to-end view of SPIFFY
and highlight key practical challenges that we need to address
to realize it. We envision SPIFFY being run by an ISP where
the target link L is located, since the end customer who is the
eventual target of the attack cannot detect or respond to link-
ﬂooding attacks. We believe that ISPs have a natural economic
incentive to protect their immediate customers (e.g., as a value-
added service [1]) and offer such capabilities on demand to
create new revenue streams.
To understand the key challenges in this deployment model,
let us consider the three logical stages in the SPIFFY workﬂow
as seen in Figure 3:
1. Flooding detection. SPIFFY detects the existence of a link-
ﬂooding attack against a link (e.g., via SNMP-based link-
utilization measurements [21]) and estimates the degraded
rate rd for the attack by measuring the fair-share ﬂow rate
of the target link.
2. Temporary bandwidth expansion (TBE). For all senders
that use the target link, SPIFFY provides a temporarily
expanded bandwidth M(cid:2)(current per-sender rate), where
bandwidth expansion factor M ≫ 1. For the time being,
let us imagine an ideal TBE that increases the target link’s
physical bandwidth B to M (cid:2) B. Section V explains how
TBE can be implemented in real networks. Note that the
bandwidth expansion is temporary (e.g., < 5 seconds)
and the bandwidth of the link returns to B after TBE.
The bandwidth expansion factor M is set to the ratio of
the guaranteed rate rg to the degraded rate rd, namely,
M = rg=rd, to let the legitimate senders increase rates
from rd to rg in response to TBE. This value of M enables
SPIFFY to identify senders with the per-sender rate change
close to M as legitimate ones.
4
(1) Flooding Detection(3) BotIdentification(2) Temporary Bandwidth Expansion (TBE)consider it to be a natural enabler for realizing the SPIFFY
workﬂow. The overall system is illustrated in Figure 4.
(cid:15) Practical TBE: To enable practical TBE, we develop a trafﬁc
engineering application that dynamically changes trafﬁc
routing to meet desired goals [25]. At a high level, we
increase the effective bandwidth of the link-ﬂooding target
link by routing ﬂows around the bottleneck. We also provide
practical techniques to work around the constraints of real
networks where the bandwidth expansion factor (M ) might
be low. Finally, we develop fast heuristics to solve the trafﬁc
engineering optimization.
(cid:15) Robust bot detection: First,
to detect bots, we provide
a scalable monitoring mechanism that relies on simple
“sketching” algorithms running in the edge switches [58].
This algorithm guarantees the accurate per-ﬂow rate change
measurement with only small size of SRAM and few hash
computations. Second, to obtain the robust bot-detection
results, we develop strategies that yield very low false-
positive rate. We investigate several cases where legitimate
senders might be misidentiﬁed as bots (e.g.,
legitimate
senders that do not react to TBE or TCP effects in response
to changed RTT measurements) and propose solutions to
remove such undesirable events.
V. SCALABLE AND PRACTICAL TBE
In this section, we focus on a practical implementation of
TBE. As discussed earlier, there are two key challenges here.
First, given that networks do not have spare ﬁbers lying around,
we need a network-layer solution for TBE. Second, we need
this step to be fast because it ultimately impacts our ability to
rapidly test and detect bots.
Our network-layer TBE approach dynamically reroutes the
ﬂows traversing the target link through other under-utilized
links in the network. It computes the new routes, which provide
large bandwidth expansion to all senders using the target link
simultaneously, as if the target link bandwidth is physically
expanded. The new routes are calculated at a central controller
and installed in SDN-supported switches at the edge. Note that
for ease of explanation we refer to the physical bandwidth
expansion as the ideal TBE.
The goal of the network-layer TBE is to emulate the ideal
TBE with large bandwidth expansion factor. The ideal band-
width expansion factor we wish to achieve is Mideal = rg=rd,
as described earlier. Then the question that arises is how the
network-layer TBE can achieve this high Mideal. To answer
the question, we ﬁrst look at how much bandwidth expansion
can be achieved by the network-layer TBE for a given network.
Then we evaluate whether the bandwidth expansion factor is
large enough for Mideal.
We formulate the routing problem of ﬁnding the maximum
bandwidth expansion factor, denoted as Mnetwork, for a given
a network conﬁguration. Let us assume that we are given a
network graph G = (V; E), where V represents the set of
routers and E represents the set of links between the routers.
We denote by b(x; y), where (x; y) 2 E, the bandwidth that
is not used at the time of TBE; i.e., residual bandwidth. We
deﬁne a ﬂooding trafﬁc matrix T where each ingress/egress
pair (s; t) denotes the total trafﬁc rate T (s; t) between s and t
that contribute to the ﬂooding at the target link. Note that we
Fig. 4: Overview of the SPIFFY using an SDN in the
Internet core.
3. Bot identiﬁcation. SPIFFY measures the per-sender rate
changes of all the senders that use the target link. It starts
measuring the per-sender rate before TBE and stops mea-
suring after TBE. The frequency of measurements should
be high enough to capture the rate increase and calculate
the ratio of the increase; e.g., every 1 second. Before TBE,
ﬂows from a legitimate sender will have the ﬂow rate
rd (viz., Gstrength), but during TBE the majority of the
legitimate ﬂows increases their rates at least up to rg, and
thus the total per-sender rate increases by a factor close to
or higher than M (= rg=rd). In contrast, a bot would not
increase its send rate even if the bandwidth allocated to
it is expanded due to its saturated upload bandwidth; viz.,
Attack Strategy AS:spiﬀy.
Challenges: Our focus in this paper is on steps (2) and
(3) of this workﬂow. We assume that existing monitoring
mechanisms are used for (1); e.g., [21]. Our two key challenges
arise for steps (2) and (3).
First, the challenge in designing TBE is to provide the
senders signiﬁcantly expanded bandwidth. Ideally, we want to
physically increase the target link bandwidth, but this may
not be viable unless the target network has spare dark ﬁber.
Instead, our goal is to ﬁnd an immediate solution that does not
rely on spare optical ﬁbers. Moreover, the operation of TBE
has to be real-time to quickly react to the ﬂooding attacks;
e.g., in a few seconds.
Second, bot identiﬁcation is challenging because it requires
real-time per-sender rate measurements for all senders at the
target link. In practice, it is difﬁcult to keep track of these
rate changes because the number of senders might easily go
up to tens or hundreds of thousands. Finally, the rate-change
estimation must be robust to real-world considerations; e.g.,
TCP effects in reacting to changes in the RTT or the impact
on short legitimate ﬂows.
Key ideas: We address these two challenges as follows.
SPIFFY can leverage recent advances in software-deﬁned
networking (SDN) to implement
the above workﬂow. An
SDN’s central controller provides new capabilities for network
management [24], [29], [43], [44]. While we do not claim
that SDN is necessary for countering link-ﬂooding attacks, we
5
SDN switcheslegacy routersTemporary Bandwidth Expansion (TBE)Bot detection based on Per-Sender Rate ChangesProactive Route ConfigurationSRAM forsketching SDN interface(e.g., OpenFlow)SPIFFY policy specTopology, Trafficnetwork administratorsummary ofrate changeslink target Ltraffic engineeringfor TBEassume that the residual bandwidth b(x; y) and the ﬂooding
trafﬁc matrix T are unchanged during TBE operation. We
associate a variable f (s;t)