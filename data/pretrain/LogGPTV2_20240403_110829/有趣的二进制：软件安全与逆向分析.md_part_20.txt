用户名：remnux
密码：malware
由于这是一个基于 Ubuntu 的系统，因此用 root 运行程序时需要使用
sudo 命令。Root 的密码也是 malware。
5.3.2 更新特征数据库
首先我们来更新一下恶意软件的特征数据库。
请大家按照下面的例子，用 root 运行 freshclam 命令。
▼ 运行示例
$ sudo freshclam
[sudo] password for remnux: malware 输入密码
ClamAV update process started at Sat May 19 13:54:14 2012
省略
WARNING: Incremental update failed, trying to download daily.cvd
Downloading daily.cvd [100%]
Downloading bytecode-158.cdiff [100%]
省略
Downloading bytecode-180.cdiff [100%]
省略
5.3.3 扫描目录
下面我们来扫描恶意软件。
主文件夹 /home/remnux 中有一个名叫 jsunpackn 的目录，我们来对这个
目录进行一下完整扫描。
扫描目录需要使用 clamscan 命令。
▼ 运行示例
$ clamscan jsunpackn/
jsunpackn/CHANGELOG: OK
jsunpackn/COPYING: OK
jsunpackn/INSTALL: OK
jsunpackn/INSTALL.spidermonkey: OK
jsunpackn/INSTALL.spidermonkey.shellcode: OK
省略
jsunpackn/rules: OK
jsunpackn/rules.ascii: OK
jsunpackn/samples.tgz: Exploit.PDF-4897 FOUND 发现
jsunpackn/swf.py: OK
jsunpackn/urlattr.py: OK
----------- SCAN SUMMARY -----------
Known viruses: 1217159
Engine version: 0.97.3
Scanned directories: 1
Scanned files: 23
Infected files: 1
Data scanned: 0.46 MB
Data read: 2.30 MB (ratio 0.20:1)
Time: 3.824 sec (0 m 3 s)
我们在 jsunpackn 目录中检测到了一个恶意软件，位于
jsunpackn/samples.tgz，类型为 Exploit.PDF-4897。REMnux 不仅能检测
x86 和 Windows 上的恶意软件，还能够检测出 Android 上的恶意软件，
例如非常有名的 DroidDream。
▼ 运行示例
$ clamscan DDream-444578756853741426-Super.apk
DDream-444578756853741426-Super.apk: Exploit.Andr.Lotoor-8 FOUND
----------- SCAN SUMMARY -----------
Known viruses: 1217159
Engine version: 0.97.3
Scanned directories: 0
Scanned files: 1
Infected files: 1
Data scanned: 0.04 MB
Data read: 1.58 MB (ratio 0.03:1)
Time: 3.797 sec (0 m 3 s)
由于 REMnux 是基于特征库来工作的，因此无法应对新的恶意软件，但
它的魅力在于检测恶意软件非常方便。
5.4 用 ClamAV 检测恶意软件和漏洞攻击
5.4.1 ClamAV 的特征文件
我们刚才使用的 clamscan 命令，实际上是调用 GPL 协议的反病毒软件
ClamAV 对恶意软件和漏洞攻击进行扫描的。如果大家对反病毒软件的
原理感兴趣的话，可以看一看这个软件的源代码。
ClamAV
http://www.clamav.net/
ClamAV 的特征文件是持续更新的，从上面的官方网站可以下载到最新
的版本。
▲ ClamAV 特征文件下载
这里发布的特征文件扩展名为 .cvd，其中 main.cvd 为基本数据库，
daily.cvd 为每日新增的特征数据库。
新发现的恶意软件首先会被添加到 daily.cvd 中，等到稳定之后会被转移
到 main.cvd 中。
检测恶意软件的方法主要有以下几种。
使用文件整体的散列值
使用文件内部特定的数据序列
为了避免误判设置某些白名单
ClamAV 的特点是，上述各项功能都是通过单独的文件分别实现的。
ClamAV 的网站上公开了向特征文件添加新项目的格式，大家可以看一
看。
Creating signatures for ClamAV
http://www.clamav.net/doc/latest/signatures.pdf
5.4.2 解压缩 .cvd 文件
.cvd 文件实际上是通过 tar.gz 压缩的，我们将文件开头的 512 个字节删
掉之后，就可以用 tar 命令解压缩了。
▲ 删除开头的 512 个字节
我们用二进制编辑器删除开头的 512 个字节，然后将扩展名改成 .tar.gz
并解压缩。
▼ 运行示例
$ cp main.cvd main.tar.gz
$ tar zxvf main.tar.gz
$ ls
COPYING main.db main.hdb main.mdb main.tar.gz
main.cvd main.fp main.info main.ndb main.zmd
这里面的文件都是文本格式，打开之后我们可以看到里面包含了文件散
列值、特定数据序列以及恶意软件的名称等信息。
▲ 用文本编辑器打开 main.db
5.4.3 被检测到的文件详细信息
我们用 clamscan 可以对文件进行扫描和检测，如果需要更详细的信
息，还需要使用其他一些命令。
例如，我们可以试一下 trid 命令。
▼ 运行示例
$ trid mal.exe
TrID/32 - File Identifier v2.00/Linux - (C) 2003-06 By M.Pontello
Definitions found: 3887
Analyzing...
Collecting data from file: mal.exe
38.4% (.EXE) Win32 Executable Generic (8527/13/3)
34.1% (.DLL) Win32 Dynamic Link Library (generic) (7583/30/2)
9.3% (.EXE) Win16/32 Executable Delphi generic (2072/23)
9.0% (.EXE) Generic Win/DOS Executable (2002/3)
9.0% (.EXE) DOS Executable Generic (2000/1)
通过这个示例我们可以看出，mal.exe 为 .EXE 或者 .DLL 文件的可能性
最高。实际上，mal.exe 就是一个 Win32 Executable Generic 文件。
5.4.4 检测所使用的打包器以及疑似恶意软件的文件
使用 pescanner 命令可以根据文件的元数据检测出所使用的打包器或者
疑似恶意软件的文件。
▼ 运行示例
$ pescanner mal.exe
Meta-data
=============================================
File: mal.exe
Size: 12345 bytes
Type: PE32 executable for MS Windows (GUI) Intel 80386 32-bit
MD5: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
SHA1: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
ssdeep: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Date: 0x2A425E19 [Fri Jun 19 22:22:17 1992 UTC] [SUSPICIOUS]
EP: 0x418001 .aspack 6/8 [SUSPICIOUS]
CRC: Claimed: 0x0, Actual: 0xa62f [SUSPICIOUS]
Signature scans
=============================================
Clamav: mal.exe: Trojan.Spy-68202 FOUND
其中标有“SUSPICIOUS”的项目表示“可疑”，也就是说，这里的信息有
可能是假的（有可能是恶意软件）。不过，这些地方仅仅是“可疑”而
已，即使出现很多 SUSPICIOUS，也并不能断定这就是一个恶意软件。
通过上面的信息，我们还能看出这个 EXE 文件使用了 ASPack 进行打
包。
5.5 用 Zero Wine Tryouts 分析恶意软件
5.5.1 REMnux 与 Zero Wine Tryouts 的区别
Zero Wine Tryouts 是另外一个恶意软件分析工具，它的原理和 REMnux
不同。Zero Wine Tryouts 是一个开源的自动分析工具，只要将文件上传
上去就可以显示结果，非常方便。与 REMnux 的不同点在于，它主要通
过动态分析来得出结果。
Zero Wine Tryouts
http://zerowine-tryout.sourceforge.net/
5.5.2 运行机制
Zero Wine Tryouts 运行在开源虚拟机 QEMU 上。输入任意的 EXE 文件
或者 PDF 文件后，它会将其在沙箱（受保护的空间）中运行，并输出
日志。
Zero Wine Tryouts 以系统镜像的形式发布，可直接在 QEMU 上运行。
启动后，它会自动打开一个 HTTP 服务器，通过网页可以上传任意的
EXE 文件并进行分析。
其内部是一个基于 Wine 的沙箱环境。Wine 是一个能够在 Linux、
BSD、Solaris、OS X 等非 Windows 环境下运行 Windows 程序（PE 文
件）的运行时库。
Wine
http://www.winehq.org/
在沙箱环境中运行的恶意软件会生成日志和报告。
5.5.3 显示用户界面
我们来试试看。
将 start_img.bat 和 zerowine.img 复制到 QEMU 的目录中，然后运行
start_img.bat。
这样一来，QEMU 会自动运行，并启动镜像中的操作系统，显示登录画
面。
即便不登录系统，系统中的功能实际上已经启动了。如果要登录的话，
可以使用下面任意一组用户名和密码。
用户名：root ；密码：zerowine1
用户名：malware ；密码：malware1
下面我们通过浏览器访问 http://localhost:8000 这个地址。
▲ 启动 Zero Wine 并访问 http://localhost:8000
用户界面非常简洁易懂。
正如网页上所提示的那样，我们只要选择 EXE 文件或者 PDF 文件并
按“提交”按钮就可以开始分析了。根据环境和文件的不同，有些分析可
能会非常耗时。
5.5.4 确认分析报告
分析完成之后，我们就可以查看分析报告。
▲ Zero Wine Tryouts 的分析结果
分析报告中包含以下这些部分，这些信息对恶意软件分析都非常有用。
Report ：API 函数调用日志
File headers ：文件头以及相应的特征信息
File strings ：文件所包含的字符串
Signatures ：文件的特征码
Differences ：运行前后发生变化的文件和注册表日志
▼ Report
0009:Starting process L"C:\\***.exe" (entryproc=0x418001)
0009:Call KERNEL32.GetModuleHandleA(004190d4 "kernel32.dll")
ret=00418045
0009:Call KERNEL32.GetProcAddress
(7edb0000,004190e1 "VirtualAlloc") ret=0041805b
0009:Call KERNEL32.GetProcAddress
(7edb0000,004190ee "VirtualFree") ret=0041806f
0009:Call KERNEL32.VirtualAlloc
(00000000,00001800,00001000,00000004) ret=004180c2
trace:loaddll:free_modref Unloaded module
L"C:\\windows\\system32\\uxtheme.dll" : builtin
0009:Call KERNEL32.VirtualAlloc
(00000000,00011f0e,00001000,00000004) ret=004180e0
000d:Call advapi32.RegOpenKeyExW
(00000044,7ec6b3e6 L"ProgID",00000000,00020019,001334c4)
ret=7ebff396
000d:Call advapi32.RegGetValueW
(00000044,00000000,7ec6b4c0 L"Content Type",
00000002,00000000,00000000,0033f68c) ret=7ec00379
000d:Call KERNEL32.InterlockedDecrement(001334bc) ret=7ebff0c3
000d:Call advapi32.RegCloseKey(00000044) ret=7ebff18b
000d:Call advapi32.RegCloseKey(00000000) ret=7ebff19c
trace:loaddll:free_modref Unloaded module
L"C:\\windows\\system32\\shlwapi.dll" : builtin
省略
▼ File headers
----------TrID Signatures----------
38.4% (.EXE) Win32 Executable Generic (8527/13/3)
34.1% (.DLL) Win32 Dynamic Link Library (generic) (7583/30/2)
9.3% (.EXE) Win16/32 Executable Delphi generic (2072/23)
9.0% (.EXE) Generic Win/DOS Executable (2002/3)
9.0% (.EXE) DOS Executable Generic (2000/1)
----------PEiD Signatures----------
ASPack 2.11 -> Solodovnikov Alexey
----------Parsing Warnings----------
Imported symbols contain entries typical of packed executables.
----------DOS_HEADER----------
[IMAGE_DOS_HEADER]
0x0 0x0 e_magic: 0x5A4D
0x2 0x2 e_cblp: 0x50
省略
▼ File strings
省略
kernel32.dll
VirtualAlloc
VirtualFree
ExitProcess
user32.dll
MessageBoxA
wsprintfA
LOADER ERROR
The procedure entry point %s could not
be located in the dynamic link library
%sThe ordinal %u could not be located
in the dynamic link library %s
kernel32.dll
GetProcAddress
GetModuleHandleA
LoadLibraryA
省略
▼ Signature
0009:Starting process L"C:\\***.exe" (entryproc=0x418001)
End of signature. See report for more information.
▼ Differences
/home/malware/.wine/.update-timestamp
c:/***.exe
--- /home/malware/.winebackup/system.reg
2010-07-24 05:35:43.000000000 +0200
+++ /home/malware/.wine/system.reg
2012-05-22 14:22:56.000000000 +0200
@@ -14296 +14296 @@
-[Software\\Microsoft\\Windows\\CurrentVersion\\Fonts] 1279942537
+[Software\\Microsoft\\Windows\\CurrentVersion\\Fonts] 1337689369
@@ -19182 +19182 @@
-[Software\\Microsoft\\Windows NT\\CurrentVersion\\Fonts]
1279942537