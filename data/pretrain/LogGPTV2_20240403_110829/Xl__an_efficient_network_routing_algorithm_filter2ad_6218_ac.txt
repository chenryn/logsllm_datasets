show that a quiet network eventually becomes coherent, which will
imply that our routing algorithm converges in ﬁnite time.
Lemma 5. If a network is becomes quiet at some time t, then after
a ﬁnite period of time it also becomes coherent.
We can now state our main theorem.
Theorem 1. If a network is quiet at and after some time t, then
after a ﬁnite period of time the forwarding conﬁguration becomes
sound, complete, and has bounded distortion , where
 = max
u,w
eu(w).
Proof. By combining Lemmas 3, 4, and 5.
4.4 Minimum Distance Proxy Function
Recall that the minimum distance proxy function Du was used
instead of the actual minimum distance function δ to deﬁne the
Completeness constraint (C1) in Section 4.2.3 and was also used in
Algorithm 1 to compute an external view. The correctness of the
XL routing algorithm requires only that 0 ≤ Du(w) ≤ δ(u, w) for
all u and w. However to give the algorithm leeway in suppressing
updates, Du(w) should be as close to δ(u, w) as possible. Comput-
ing the exact distance δ(u, w) is exactly what we’re trying to avoid
by using approximation, so we choose Du(w) to be the distance
computed by taking the weight of each edge to be the lowest cost
of the edge ever observed. Because this value only changes when
an edge cost drops below its all-time minimum cost, or an edge is
Recall that in a sound conﬁguration a node must only forward
to a destination if the destination is reachable. This is hardly the
case in the Internet today where ASes advertises preﬁxes, not in-
dividual destinations, even if part of the preﬁx is unreachable. For
this reason, we introduced a weaker notion, that of a loop-free con-
ﬁguration, in which every forwarding path φ(u, w) must only be
ﬁnite (loop-free) and not necessarily a path to the destination w. It
means, essentially, that a node does not need to “know” that a des-
tination is reachable before forwarding, only that forwarding to the
next hop will not cause a loop. Practically, this means that sending
a packet to an unreachable destination will generate an ICMP Un-
reachable message from a router further in the network rather than
the local router.
As we have shown above, the basic XL algorithm is sound. If
we relax the requirement of soundness, however, and settle for a
loop-free algorithm, we can realize signiﬁcant savings in routing
communication using an extension to XL routing algorithm we call
Cut Vertex Partitioning (CVP).
The idea behind CVP is based on the observation that a cut ver-
tex, which is a vertex whose removal disconnects the graph, par-
titions the network graph into two or more separate subnetworks
that can only communicate with each other through the cut vertex.
This means that to communicate with a destination “across” a cut
vertex, a node can simply forward to the cut vertex and it does not
need to know about the network beyond the cut vertex. Thus with
respect to routing, each subnetwork can be considered separately.
The CVP extension to the XL routing algorithm consists of the
cut vertex forwarding policy described above, a mechanism for
nodes to discover that they are cut vertices, and a cut vertex ad-
vertisement for nodes to learn which cut vertex to use to reach each
destination. In our ﬁxed, globally network model where only the
edge weight function changes with time, all the necessary com-
putation can be carried out by each node separately. In practice,
however, where the topology is unknown and can change, cut ver-
tex discovery and advertisement is slightly more involved; we do
not describe it here.
In general, real networks do not have cut vertices that partition
the network into large subnetworks where CVP could be used as
a “divide and conquer” technique. However, what many real net-
works do have is a large number of leave. Since the neighbor of
a leaf is necessarily a a cut vertex, CVP eliminates leaves from
the routing computation, effectively reducing the size of the net-
work. In fact, our implementation of CVP only considers such leaf
cuts. Our experiments (Section 6) show that this “reduction by a
thousand cuts” signiﬁcantly decreases the communication load or
routing.
5. THE SIMULATION SYSTEM
In this section we describe the simulation system we used to eval-
uate the performance of the XL routing algorithm. We designed
our simulation system speciﬁcally for the purpose of evaluating the
performance of routing algorithms on a forwarding network. At
its heart is a discrete event simulator that simulates a number of
routing algorithms including the XL algorithm. The simulation in-
cludes of the forwarding tables and all routing algorithm commu-
nication, but not other network trafﬁc. It is expressly not a packet-
level network simulator like ns-2 and does not model or network
characteristics such as packet loss, latency, or bandwidth.
The the core of the simulation system is the the generator pro-
gram then generates an event script (a sequence of edge weight
changes) for the simulation, and the simulator program that sim-
ulates a routing algorithm on the network using the generated event
script. The output of the simulator program is a sequence of for-
warding table updates. This sequence of processed by the analysis
tools to compute convergence times, stretch, and related statistics.
5.1 Event Generator
The generator program produces a sequence of link cost changes
according to a stochastic model of link failures. In the generated
event sequence, a link is either up, in which case its cost is the
nominal cost given deﬁned by the weights ﬁle, or down, in which
case its cost is ∞. The two directions are coordinated, that is, links
(u, v) and (v, u) are either both up or both down.
p0
US
UF
λ0
(μ0, σ2
0)
λ1
p1
DS
(μ1, σ2
1)
DF
Figure 3: The link failure model used by the generator program. The up/stable,
down/stable, up/ﬂapping, and down/ﬂapping states are denoted US, DS, UF, and DF,
respectively.
Link failure and recovery is controlled by a stochastic process
(Fig. 3). Each link is treated independently. In addition to being up
or down, a link is also either stable or ﬂapping. The four link-states
are thus up/stable, down/stable, up/ﬂapping, and down/ﬂapping. In
the stable state, the link time-to-failure is distributed exponentially
with mean λ0. Once down, a link may remain in the down/stable
state, in which case the time-to-recovery is distributed exponen-
tially with mean λ1, or, with probability p1 a link may become
unstable and transition to the ﬂapping/down state. Thus, parameter
p1 controls the propensity of links to ﬂap. In the ﬂapping state, the
time-to-recovery has a normal distribution truncated to [0,∞) with
parameters μ1 and σ2
1, and time-to-failure has a similarly truncated
normal distribution with parameters μ0 and σ2
0. After recovering
from failure in the ﬂapping state a link leaves the ﬂapping state
with probability p0. Parameter p0 thus controls how long a link
remains ﬂapping.
Our link event model is a generalization the two-state model of
Park and Corson [26]; we added the ﬂapping failure mode, which
we expected the XL algorithm handle particularly well. When p1 =
0, link failures are independent with exponentially-distributed fail-
ure and recovery times. On the other hand, when p1 = 1, all links
have an exponentially distributed time-to-ﬁrst-failure followed by
repeated up-down cycles controlled by the p0 parameter.
5.2 Protocol Simulator
The simulator program is a discrete event simulator that sim-
ulates a single routing algorithm under a given topology and link
event sequence. In other words, it simulates n instances of the rout-
ing algorithm running in parallel, one on each node. The simulator
Name
n m D1 D2 D3
Description
CROWN X 3X 4X
0
1/3
HONEY
QUAD
ABILENE
ARPANET
FUEL1221
FUEL1239
F. 1221C
F. 1239C
ORB145
ORB257
ORB342
ORB406
ORB497
ORB575
ORB664
ORB729
ORB813
ORB892
— —
— —
14
11
72
59
104
151
972
315
97
50
941
284
227
145
433
257
342
606
791
406
497
961
575 1081
664 1300
729 1427
813 1584
892 1694
2/3 Two cycles of size X and 2X with
nodes in the smaller connected to
alternate nodes in the larger.
0 ∼ 0 ∼ 1 A hexagonal grid.
0 ∼ 0 ∼ 0 A rectangular grid.
0
45% 55% Abilene with routing metrics [1].
7% 48% 41% ARPANET (March 1977) [11].
49% 19%
6% AS 1221 from RocketFuel [19].
10% 19% 16% AS 1239 from RocketFuel [19].
0
0
50%
6% The 2-core of FUEL1221.
22% 18% The 2-core of FUEL1239.
29% 28% 17% FUEL1239 rescaled (-n 200).
31% 20% 21% FUEL1239 rescaled (-n 300).
33% 24% 14% FUEL1239 rescaled (-n 400).
27% 28% 14% FUEL1239 rescaled (-n 500).
29% 26% 17% FUEL1239 rescaled (-n 600).
31% 25% 16% FUEL1239 rescaled (-n 700).
26% 27% 17% FUEL1239 rescaled (-n 800).
32% 24% 16% FUEL1239 rescaled (-n 900).
29% 25% 16% FUEL1239 rescaled (-n 1000).
34% 26% 15% FUEL1239 rescaled (-n 1100).
Table 2: Network topologies used in the experiments. Column legend: n – number of
nodes; m – number of links; D1, D2, and D3 fraction of nodes of degree 1, 2, and
3, respectively. All but the FUEL networks have unit link costs.
repeatedly executes the update algorithm of each node, providing
as input the (simulation) time at the start and end of the current
iteration of the algorithm, the costs of incident links, and its mes-
sage queue, consisting of messages sent by its neighbors since the
last invocation of the update algorithm on this node. The update
algorithm performs any processing dictated by the algorithm, and
if necessary, updates its forwarding table and then posts messages
to its neighbors. The (simulated) duration of the iteration is chosen
randomly according to a normal distribution truncated to [0,∞)
with parameters μΔ and σ2
Δ; we chose the normal distribution be-
cause it was familiar and because the model did not seem unrea-
sonable to us.
The simulator program contains implementations of the fol-
lowing routing algorithms.
ls
dv
The standard link-state algorithm [22] which is the ba-
sis for OSPF and IS-IS.
A distance vector algorithm very similar to RIP [20]
with split horizon. The maximum distance bound is a
global parameter of the algorithm.
dv+p A modern distance vector algorithm which uses a par-
lv
xl
ent pointer to detect loops [4, 12, 28].
The Link Vector algorithm proposed by Behrens and
Garcia-Luna-Aceves [3].
The XL algorithm described in this paper, parametrized
by error . When  = 0, all forwarding paths are opti-
mal just as with the above algorithms.
All of the above algorithms send updates only when a topology
change occurs (sometimes called “triggered update”), and there are
no periodic updates.
The output of the simulation is a sequence of forwarding table
updates written to the update ﬁle for later processing. At the end
of the simulation, the simulator program reports the total number
of messages and bytes sent by the routing processes as well as the
maximum messages and bytes sent by a single node.
6. EVALUATION
In this section we experimentally evaluate the performance of
CROWN 8
HONEY 5 × 5
QUAD 5 × 5
Figure 4: Small examples of synthetic networks.
the XL routing algorithm relative to existing routing algorithms.
Our objective is to evaluate the claims that the XL routing algo-
rithm:
O Sends fewer routing updates,
O Does not signiﬁcantly sacriﬁce correctness, convergence
time, or stretch, and
O Continues to perform well as the network grows.
Our evaluation is based on simulations of the four protocols im-
plemented by the simulator program (ls, dv, dv+p, and xl) on
a number of networks and under two different link event models.
The main result of simulation is that the XL routing protocol does
indeed reduce the number of updates: compared to the link-state al-
gorithm, XL generates between 2 and 20 times fewer updates (Ta-
ble 4). This experiment is discussed in Section 6.2; ﬁrst, however,
we describe our experimental setup.
6.1 Experimental Setup
Each experiment consists of a number of simulation runs. Each
run simulates a single routing algorithm for 86,400 seconds (one
day) at a rate of 10 iterations of the update algorithm per second.
Networks. We used the following networks in our simulations:
three synthetic networks, the Abilene backbone [1], the ARPANET
topology from March 1977 [11], two Rocketfuel networks with
inferred link costs [19], and a series of networks created by re-
scaling the Sprint network (AS 1239) from the Rocketfuel data-
set using Orbis [18]. The Orbis command-line arguments to the
dkRescale program were “-k 1 -n nnom”, where the nominal
size nnom ranged from 200 to 1100. Table 2 describes the net-
works used in the experiments and Figure 4 shows small instances
of synthetic networks. The synthetic networks allowed us to test
the routing algorithms on topologies based design decisions differ-
ent from the AS router-level topologies. In particular, the large-
diameter HONEY and GRID networks shed some light on how the
algorithms might perform in wireless ad-hoc networks.
We also created the 2-cores of the two Rocketfuel networks. The
2-core of a graph is the graph resulting from repeatedly removing
all degree-1 nodes [29]. With no degree-1 nodes, CVP (which was
implemented only for leaf nodes) would have no effect, allowing
us to also evaluate the value of this optimization.
Link Events. All link events for the simulation were generated
using the generator program (Section 5.1). Recall that in the
generator link event model, a link is either up (nominal weight)
or down (inﬁnite weight); the time between failures and failure du-
ration are controlled by the four-state stochastic model shown in
Figure 3. In our simulation, we used two different sets of model
parameters: a Standard set in which a link fails about once a day,
and comes back up in about an hour, and the Flapping set in which
links are less likely to fail, but more likely to fail repeatedly (ﬂap);
Table 3 gives the precise model parameters.
Both the Standard model and Flapping model are more aggres-
sive that what might be expected of a real network [13, 30]. We
wanted to stress the routing algorithms under the kinds of condi-
tions where routing algorithm efﬁciency matters greatly, namely
where many links are unstable (Standard model) or only some are
unstable but tend to oscillate (Flapping model).
Algorithm Parameters. The distance vector algorithm (dv) re-
quires a maximum distance bound (the so-called “inﬁnity metric”)
to detect routing loops. For the simulations, this value was com-
puted by using a linear program to approximate the cost of the
longest path. The XL routing algorithm (xl) has an error parame-
ter  that determines the stretch. In the experiments, we simulated
xl with  = 0.0 and  = 0.5, corresponding to no stretch and a
maximum stretch of 1.5. Increasing  beyond 0.5 did not appear to
signiﬁcantly reduce the number of updates generated by the algo-
rithm beyond the  = 0.5 level.
6.2 Performance
In this section we evaluate our ﬁrst two claims: that compared to
existing routing algorithms, the XL algorithm uses fewer updates to
achieve comparable performance. We simulated each routing algo-
rithm on the synthetic and measured topologies. Each combination
of algorithm, network and link event model (Standard or Flapping)
was simulated 10 times and averaged in reporting results. For each
combination, the 10 simulations differed only in the link events.
Total Communication. Table 4 shows the average number of mes-
sages sent during the simulation relative to ls, the link state algo-
rithm, which provides a convenient baseline for comparison.
Referring to the table, the most erratic performer was dv, which
was highly sensitive to topology: it did extremely well on networks