.Sp
Note that if the filehandle has been marked as \f(CW\*(C`:utf8\*(C'\fR Unicode
characters are read instead of bytes (the \s-1LENGTH\s0, \s-1OFFSET\s0, and the
return value of \fIsysread()\fR are in Unicode characters).
The \f(CW\*(C`:encoding(...)\*(C'\fR layer implicitly introduces the \f(CW\*(C`:utf8\*(C'\fR layer.
See \*(L"binmode\*(R", \*(L"open\*(R", and the \f(CW\*(C`open\*(C'\fR pragma, open.
.IP "sysseek \s-1FILEHANDLE\s0,POSITION,WHENCE" 8
.IX Item "sysseek FILEHANDLE,POSITION,WHENCE"
Sets \s-1FILEHANDLE\s0's system position in bytes using the system call
\&\fIlseek\fR\|(2).  \s-1FILEHANDLE\s0 may be an expression whose value gives the name
of the filehandle.  The values for \s-1WHENCE\s0 are \f(CW0\fR to set the new
position to \s-1POSITION\s0, \f(CW1\fR to set the it to the current position plus
\&\s-1POSITION\s0, and \f(CW2\fR to set it to \s-1EOF\s0 plus \s-1POSITION\s0 (typically
negative).
.Sp
Note the \fIin bytes\fR: even if the filehandle has been set to operate
on characters (for example by using the \f(CW\*(C`:utf8\*(C'\fR I/O layer), \fItell()\fR
will return byte offsets, not character offsets (because implementing
that would render \fIsysseek()\fR very slow).
.Sp
\&\fIsysseek()\fR bypasses normal buffered \s-1IO\s0, so mixing this with reads (other
than \f(CW\*(C`sysread\*(C'\fR, for example &gt;&lt or \fIread()\fR) \f(CW\*(C`print\*(C'\fR, \f(CW\*(C`write\*(C'\fR,
\&\f(CW\*(C`seek\*(C'\fR, \f(CW\*(C`tell\*(C'\fR, or \f(CW\*(C`eof\*(C'\fR may cause confusion.
.Sp
For \s-1WHENCE\s0, you may also use the constants \f(CW\*(C`SEEK_SET\*(C'\fR, \f(CW\*(C`SEEK_CUR\*(C'\fR,
and \f(CW\*(C`SEEK_END\*(C'\fR (start of the file, current position, end of the file)
from the Fcntl module.  Use of the constants is also more portable
than relying on 0, 1, and 2.  For example to define a \*(L"systell\*(R" function:
.Sp
.Vb 2
\&        use Fcntl 'SEEK_CUR';
\&        sub systell { sysseek($_[0], 0, SEEK_CUR) }
.Ve
.Sp
Returns the new position, or the undefined value on failure.  A position
of zero is returned as the string \f(CW"0 but true"\fR; thus \f(CW\*(C`sysseek\*(C'\fR returns
true on success and false on failure, yet you can still easily determine
the new position.
.IP "system \s-1LIST\s0" 8
.IX Item "system LIST"
.PD 0
.IP "system \s-1PROGRAM\s0 \s-1LIST\s0" 8
.IX Item "system PROGRAM LIST"
.PD
Does exactly the same thing as \f(CW\*(C`exec LIST\*(C'\fR, except that a fork is
done first, and the parent process waits for the child process to
complete.  Note that argument processing varies depending on the
number of arguments.  If there is more than one argument in \s-1LIST\s0,
or if \s-1LIST\s0 is an array with more than one value, starts the program
given by the first element of the list with arguments given by the
rest of the list.  If there is only one scalar argument, the argument
is checked for shell metacharacters, and if there are any, the
entire argument is passed to the system's command shell for parsing
(this is \f(CW\*(C`/bin/sh \-c\*(C'\fR on Unix platforms, but varies on other
platforms).  If there are no shell metacharacters in the argument,
it is split into words and passed directly to \f(CW\*(C`execvp\*(C'\fR, which is
more efficient.
.Sp
Beginning with v5.6.0, Perl will attempt to flush all files opened for
output before any operation that may do a fork, but this may not be
supported on some platforms (see perlport).  To be safe, you may need
to set \f(CW$|\fR ($AUTOFLUSH in English) or call the \f(CW\*(C`autoflush()\*(C'\fR method
of \f(CW\*(C`IO::Handle\*(C'\fR on any open handles.
.Sp
The return value is the exit status of the program as returned by the
\&\f(CW\*(C`wait\*(C'\fR call.  To get the actual exit value shift right by eight (see below).
See also \*(L"exec\*(R".  This is \fInot\fR what you want to use to capture
the output from a command, for that you should use merely backticks or
\&\f(CW\*(C`qx//\*(C'\fR, as described in \*(L"`STRING`\*(R" in perlop.  Return value of \-1
indicates a failure to start the program (inspect $! for the reason).
.Sp
Like \f(CW\*(C`exec\*(C'\fR, \f(CW\*(C`system\*(C'\fR allows you to lie to a program about its name if
you use the \f(CW\*(C`system PROGRAM LIST\*(C'\fR syntax.  Again, see \*(L"exec\*(R".
.Sp
Because \f(CW\*(C`system\*(C'\fR and backticks block \f(CW\*(C`SIGINT\*(C'\fR and \f(CW\*(C`SIGQUIT\*(C'\fR,
killing the program they're running doesn't actually interrupt
your program.
.Sp
.Vb 3
\&    @args = ("command", "arg1", "arg2");
\&    system(@args) == 0
\&         or die "system @args failed: $?"
.Ve
.Sp
You can check all the failure possibilities by inspecting
\&\f(CW$?\fR like this:
.Sp
.Vb 10
\&    if ($? == -1) {
\&        print "failed to execute: $!\en";
\&    }
\&    elsif ($? & 127) {
\&        printf "child died with signal %d, %s coredump\en",
\&            ($? & 127),  ($? & 128) ? 'with' : 'without';
\&    }
\&    else {
\&        printf "child exited with value %d\en", $? >> 8;
\&    }
.Ve
.Sp
or more portably by using the W*() calls of the \s-1POSIX\s0 extension;
see perlport for more information.
.Sp
When the arguments get executed via the system shell, results
and return codes will be subject to its quirks and capabilities.
See \*(L"`STRING`\*(R" in perlop and \*(L"exec\*(R" for details.
.IP "syswrite \s-1FILEHANDLE\s0,SCALAR,LENGTH,OFFSET" 8
.IX Item "syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET"
.PD 0
.IP "syswrite \s-1FILEHANDLE\s0,SCALAR,LENGTH" 8
.IX Item "syswrite FILEHANDLE,SCALAR,LENGTH"
.IP "syswrite \s-1FILEHANDLE\s0,SCALAR" 8
.IX Item "syswrite FILEHANDLE,SCALAR"
.PD
Attempts to write \s-1LENGTH\s0 bytes of data from variable \s-1SCALAR\s0 to the
specified \s-1FILEHANDLE\s0, using the system call \fIwrite\fR\|(2).  If \s-1LENGTH\s0 is
not specified, writes whole \s-1SCALAR\s0.  It bypasses buffered \s-1IO\s0, so
mixing this with reads (other than \f(CWsysread())\fR, \f(CW\*(C`print\*(C'\fR, \f(CW\*(C`write\*(C'\fR,
\&\f(CW\*(C`seek\*(C'\fR, \f(CW\*(C`tell\*(C'\fR, or \f(CW\*(C`eof\*(C'\fR may cause confusion because the perlio and
stdio layers usually buffers data.  Returns the number of bytes
actually written, or \f(CW\*(C`undef\*(C'\fR if there was an error (in this case the
errno variable \f(CW$!\fR is also set).  If the \s-1LENGTH\s0 is greater than the
available data in the \s-1SCALAR\s0 after the \s-1OFFSET\s0, only as much data as is
available will be written.
.Sp
An \s-1OFFSET\s0 may be specified to write the data from some part of the
string other than the beginning.  A negative \s-1OFFSET\s0 specifies writing
that many characters counting backwards from the end of the string.
In the case the \s-1SCALAR\s0 is empty you can use \s-1OFFSET\s0 but only zero offset.
.Sp
Note that if the filehandle has been marked as \f(CW\*(C`:utf8\*(C'\fR, Unicode
characters are written instead of bytes (the \s-1LENGTH\s0, \s-1OFFSET\s0, and the
return value of \fIsyswrite()\fR are in \s-1UTF\-8\s0 encoded Unicode characters).
The \f(CW\*(C`:encoding(...)\*(C'\fR layer implicitly introduces the \f(CW\*(C`:utf8\*(C'\fR layer.
See \*(L"binmode\*(R", \*(L"open\*(R", and the \f(CW\*(C`open\*(C'\fR pragma, open.
.IP "tell \s-1FILEHANDLE\s0" 8
.IX Item "tell FILEHANDLE"
.PD 0
.IP "tell" 8
.IX Item "tell"
.PD
Returns the current position \fIin bytes\fR for \s-1FILEHANDLE\s0, or \-1 on
error.  \s-1FILEHANDLE\s0 may be an expression whose value gives the name of
the actual filehandle.  If \s-1FILEHANDLE\s0 is omitted, assumes the file
last read.
.Sp
Note the \fIin bytes\fR: even if the filehandle has been set to
operate on characters (for example by using the \f(CW\*(C`:utf8\*(C'\fR open
layer), \fItell()\fR will return byte offsets, not character offsets
(because that would render \fIseek()\fR and \fItell()\fR rather slow).
.Sp
The return value of \fItell()\fR for the standard streams like the \s-1STDIN\s0
depends on the operating system: it may return \-1 or something else.
\&\fItell()\fR on pipes, fifos, and sockets usually returns \-1.
.Sp
There is no \f(CW\*(C`systell\*(C'\fR function.  Use \f(CW\*(C`sysseek(FH, 0, 1)\*(C'\fR for that.
.Sp
Do not use \fItell()\fR on a filehandle that has been opened using
\&\fIsysopen()\fR, use \fIsysseek()\fR for that as described above.  Why?  Because
\&\fIsysopen()\fR creates unbuffered, \*(L"raw\*(R", filehandles, while \fIopen()\fR creates
buffered filehandles.  \fIsysseek()\fR make sense only on the first kind,
\&\fItell()\fR only makes sense on the second kind.
.IP "telldir \s-1DIRHANDLE\s0" 8
.IX Item "telldir DIRHANDLE"
Returns the current position of the \f(CW\*(C`readdir\*(C'\fR routines on \s-1DIRHANDLE\s0.
Value may be given to \f(CW\*(C`seekdir\*(C'\fR to access a particular location in a
directory.  Has the same caveats about possible directory compaction as
the corresponding system library routine.
.IP "tie \s-1VARIABLE\s0,CLASSNAME,LIST" 8
.IX Item "tie VARIABLE,CLASSNAME,LIST"
This function binds a variable to a package class that will provide the
implementation for the variable.  \s-1VARIABLE\s0 is the name of the variable
to be enchanted.  \s-1CLASSNAME\s0 is the name of a class implementing objects
of correct type.  Any additional arguments are passed to the \f(CW\*(C`new\*(C'\fR
method of the class (meaning \f(CW\*(C`TIESCALAR\*(C'\fR, \f(CW\*(C`TIEHANDLE\*(C'\fR, \f(CW\*(C`TIEARRAY\*(C'\fR,
or \f(CW\*(C`TIEHASH\*(C'\fR).  Typically these are arguments such as might be passed
to the \f(CW\*(C`dbm_open()\*(C'\fR function of C.  The object returned by the \f(CW\*(C`new\*(C'\fR
method is also returned by the \f(CW\*(C`tie\*(C'\fR function, which would be useful
if you want to access other methods in \s-1CLASSNAME\s0.
.Sp
Note that functions such as \f(CW\*(C`keys\*(C'\fR and \f(CW\*(C`values\*(C'\fR may return huge lists
when used on large objects, like \s-1DBM\s0 files.  You may prefer to use the
\&\f(CW\*(C`each\*(C'\fR function to iterate over such.  Example:
.Sp
.Vb 7
\&    # print out history file offsets
\&    use NDBM_File;
\&    tie(%HIST, 'NDBM_File', '/usr/lib/news/history', 1, 0);
\&    while (($key,$val) = each %HIST) {
\&        print $key, ' = ', unpack('L',$val), "\en";
\&    }
\&    untie(%HIST);
.Ve
.Sp
A class implementing a hash should have the following methods:
.Sp
.Vb 10
\&    TIEHASH classname, LIST
\&    FETCH this, key
\&    STORE this, key, value
\&    DELETE this, key
\&    CLEAR this
\&    EXISTS this, key
\&    FIRSTKEY this
\&    NEXTKEY this, lastkey
\&    DESTROY this
\&    UNTIE this
.Ve
.Sp
A class implementing an ordinary array should have the following methods:
.Sp
.Vb 14
\&    TIEARRAY classname, LIST
\&    FETCH this, key
\&    STORE this, key, value
\&    FETCHSIZE this
\&    STORESIZE this, count
\&    CLEAR this
\&    PUSH this, LIST
\&    POP this
\&    SHIFT this
\&    UNSHIFT this, LIST
\&    SPLICE this, offset, length, LIST
\&    EXTEND this, count
\&    DESTROY this
\&    UNTIE this
.Ve
.Sp
A class implementing a file handle should have the following methods:
.Sp
.Vb 16
\&    TIEHANDLE classname, LIST
\&    READ this, scalar, length, offset
\&    READLINE this
\&    GETC this
\&    WRITE this, scalar, length, offset
\&    PRINT this, LIST
\&    PRINTF this, format, LIST
\&    BINMODE this
\&    EOF this
\&    FILENO this
\&    SEEK this, position, whence
\&    TELL this
\&    OPEN this, mode, LIST
\&    CLOSE this
\&    DESTROY this
\&    UNTIE this
.Ve
.Sp
A class implementing a scalar should have the following methods:
.Sp
.Vb 5
\&    TIESCALAR classname, LIST
\&    FETCH this,
\&    STORE this, value
\&    DESTROY this
\&    UNTIE this
.Ve
.Sp
Not all methods indicated above need be implemented.  See perltie,
Tie::Hash, Tie::Array, Tie::Scalar, and Tie::Handle.
.Sp
Unlike \f(CW\*(C`dbmopen\*(C'\fR, the \f(CW\*(C`tie\*(C'\fR function will not use or require a module
for you\*(--you need to do that explicitly yourself.  See DB_File
or the \fIConfig\fR module for interesting \f(CW\*(C`tie\*(C'\fR implementations.
.Sp