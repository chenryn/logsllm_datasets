# 字节码
---
Java 之所以可以“一次编译，到处运行”，一是因为 JVM 针对各种操作系统、平台都进行了定制，二是因为无论在什么平台，都可以编译生成固定格式的字节码（.class 文件）供 JVM 使用。
`.class` 文件是一组以 8 位字节为基础单位的二进制流，各个数据项严格按照顺序紧凑地排列在 `.class` 文件中，中间没有添加任何分隔符。整个 `.class` 文件本质上就是一张表。
---
## 字节码
### 什么是字节码
之所以被称之为字节码，是因为字节码文件由十六进制值组成，而 JVM 以两个十六进制值为一组，即以字节为单位进行读取。在 Java 中一般是用 javac 命令编译源代码为字节码文件，一个 `.java` 文件从编译到运行的示例如下图所示。
![](../../../../../assets/img/Develop/Java/笔记/JVM/字节码/1.png)
对于开发人员，了解字节码可以更准确、直观地理解 Java 语言中更深层次的东西，比如通过字节码，可以很直观地看到 Volatile 关键字如何在字节码上生效。另外，字节码增强技术在 Spring AOP、各种 ORM 框架、热部署中的应用屡见不鲜，深入理解其原理对于我们来说大有裨益。除此之外，由于 JVM 规范的存在，只要最终可以生成符合规范的字节码就可以在 JVM 上运行，因此这就给了各种运行在 JVM 上的语言（如 Scala、Groovy、Kotlin）一种契机，可以扩展 Java 所没有的特性或者实现各种语法糖。理解字节码后再学习这些语言，可以“逆流而上”，从字节码视角看它的设计思路，学习起来也“易如反掌”。
### 字节码结构
.java 文件通过 javac 编译后将得到一个.class 文件，如下：
![](../../../../../assets/img/Develop/Java/笔记/JVM/字节码/2.png)
编译后生成 .class 文件，打开后是一堆十六进制数，按字节为单位进行分割后展示如图右侧部分所示。
JVM 对于字节码是有规范要求的，那么看似杂乱的十六进制符合什么结构呢？
JVM 规范要求每一个字节码文件都要由十部分按照固定的顺序组成，整体结构如下所示。接下来我们将一一介绍这十部分：
![](../../../../../assets/img/Develop/Java/笔记/JVM/字节码/3.png)
#### 魔数（Magic Number）
每个 `.class` 文件的头 4 个字节称为 魔数（magic number），它的唯一作用是确定这个文件是否为一个能被虚拟机接收的 `.class` 文件。魔数的固定值为：`0xCAFEBABE`。
有趣的是，魔数的固定值是 Java 之父 James Gosling 制定的，为 CafeBabe（咖啡宝贝），而 Java 的图标为一杯咖啡。
#### 版本号（Version）
版本号为魔数之后的 4 个字节，前两个字节表示次版本号（Minor Version），后两个字节表示主版本号（Major Version）。
举例来说，如果版本号为：“00 00 00 34”。那么，次版本号转化为十进制为 0，主版本号转化为十进制为 52，在 Oracle 官网中查询序号 52 对应的主版本号为 1.8，所以编译该文件的 Java 版本号为 1.8.0。
#### 常量池（Constant Pool）
紧接着主版本号之后的字节为常量池入口。
常量池主要存放两类常量：
* 字面量 - 如文本字符串、声明为 final 的常量值。
* 符号引用
    * 类和接口的全限定名
    * 字段的名称和描述符
    * 方法的名称和描述符
常量池整体上分为两部分：常量池计数器以及常量池数据区，如下图
![](../../../../../assets/img/Develop/Java/笔记/JVM/字节码/4.png)
* 常量池计数器（constant_pool_count） - 由于常量的数量不固定，所以需要先放置两个字节来表示常量池容量计数值。图中示例代码的字节码前 10 个字节如下图所示，将十六进制的 24 转化为十进制值为 36，排除掉下标“0”，也就是说，这个类文件中共有 35 个常量。
![](../../../../../assets/img/Develop/Java/笔记/JVM/字节码/5.png)
* 常量池数据区 - 数据区是由（constant_pool_count-1）个 cp_info 结构组成，一个 cp_info 结构对应一个常量。在字节码中共有 14 种类型的 cp_info，每种类型的结构都是固定的。
具体以 CONSTANT_utf8_info 为例。首先一个字节“tag”，它的值取自上图中对应项的 Tag，由于它的类型是 utf8_info，所以值为“01”。接下来两个字节标识该字符串的长度 Length，然后 Length 个字节为这个字符串具体的值。从字节码摘取一个 cp_info 结构，如下图所示。将它翻译过来后，其含义为：该常量类型为 utf8 字符串，长度为一字节，数据为“a”。
| 长度 | 名称 | 值 |
| - | - | - |
| 1字节 | tag | 01 表示 utf8 类型 |
| 2字节 | length | 该 utf8 字符串的长度 |
| length个字节 | bytes | length 个字节的具体数据 |
![](../../../../../assets/img/Develop/Java/笔记/JVM/字节码/6.png)
其他类型的 cp_info 结构不再赘述，整体结构大同小异，都是先通过 Tag 来标识类型，然后后续 n 个字节来描述长度和（或）数据。
先知其所以然，以后可以通过 javap -verbose xxx 命令，查看 JVM 反编译后的完整常量池，如下图所示。可以看到反编译结果将每一个 cp_info 结构的类型和值都很明确地呈现了出来。
![](../../../../../assets/img/Develop/Java/笔记/JVM/字节码/7.png)
#### 访问标志
紧接着的 2 个字节代表访问标志，这个标志用于识别一些类或者接口的访问信息，描述该 Class 是类还是接口，以及是否被 public、abstract、final 等修饰符修饰。
JVM 规范规定了如下图的访问标志（Access_Flag）。需要注意的是，JVM 并没有穷举所有的访问标志，而是使用按位或操作来进行描述的，比如某个类的修饰符为 Public Final，则对应的访问修饰符的值为 ACC_PUBLIC | ACC_FINAL，即 0x0001 | 0x0010=0x0011。
![](../../../../../assets/img/Develop/Java/笔记/JVM/字节码/8.png)
#### 当前类名
访问标志后的 2 个字节，描述的是当前类的全限定名。这两个字节保存的值为常量池中的索引值，根据索引值就能在常量池中找到这个类的全限定名。