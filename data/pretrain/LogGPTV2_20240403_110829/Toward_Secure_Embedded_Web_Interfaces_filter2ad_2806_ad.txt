regular website, for an embedded interface we argue that
it is acceptable as even when there are 128 simultaneous
connections, WebDroid is able to serve every request in
less than 80 ms which is below what is the optimal user
tolerance time: 100ms [37].
Figure 8: The WebMedia embedded web application.
9.2 Attack surfaces
Without framework support, the web applications suffer
from multiple vulnerabilities. In the WebSMS application,
the contact search can be a vector for reﬂected XSS or
SQL injection. Also, the capacity to send message and
view their contents afterward can lead to a stored XSS in
the sending and in the receiving phone. The WebMedia
application is vulnerable to CSRF attacks as well. The
XSS attack allows the attacker to steal private information
as the contact list of the sent and received SMS contents.
A CSRF can be conducted to send SMS on behalf of
the user, which can lead to embarrassing situations or
ﬁnancial loss. In extreme cases, if the phone is used as
a trusted device to authorize sensitive operations such as
bank transfers, then the combination of XSS and CSRF
attacks will allow a malicious user to bypass this security
mechanism and conduct fraudulent operations.
9.3 Security evaluation
In order to evaluate whether our framework is able to
mitigate the attacks against our vulnerable applications
we have run the web scanners Skipﬁsh and Nexpose
against our applications with the framework defense
mechanisms off and then on. When the framework
defenses are turned off, both Skipﬁsh and Nexpose
detected reﬂected XSS and stored XSS vulnerabilities in
the WebSMS application. When the framework defenses
are turned on, no vulnerabilities are reported. Note that
neither scanner reported the CSRF vulnerabilities.
12
milliseconds0510152025Concurent connections0102030405060708090100110120130Without security featuresWith security feature In contrast, we strive for a secure by default system
where a developer has to do little if anything in order to
build a secure web application.
Web servers. At the process level, ﬂow control en-
forcement such as the one presented in Histar [54], As-
bestos [11] and Flume [30] can be used to achieve some
of our goals such as document sanitization. The Android
OS [15] capability model can also be extended to enforce
network restrictions. As far as we know, none of the
lightweight web servers like Tornado [12] were built with
the objective of enforcing security principles. Previous
work on security centric web servers such as [29] were
only designed to mitigate low level attacks by enforcing
privilege separation. None of them offered a framework
to mitigate web vulnerabilities.
Other related work. The log injection attack, a simple
form of XCS, has been known for several years [47],
most notably in the context of web servers resolving
client hostnames. Recently, CSRF and XSS attacks have
attracted much attention, including work on various
defense techniques [6]. NAS security has been a topic for
discussion since the early days of networked storage [10].
IP telephony security has also been scrutinized. How-
ever this has only been done for speciﬁc protocols, not
for complete systems [48]. Most other work in web
security[13, 24, 4, 17, 25, 28, 43, 32, 36, 40, 53, 46] has
focused on web servers on the open Internet, as opposed
to devices on private intranets, which are the topic of this
work.
11 Conclusion
We present WebDroid the ﬁrst web application framework
that is explicitly designed for embedded applications, with
a particular emphasis on secure web application design.
We motivate our work with extensive results from audits
carried out over the last two years on a broad range of em-
bedded web servers. We evaluate WebDroid performance
and show that despite the fact that that performance take
a 20% hit when we all the security features are activated,
WebDroid remains sufﬁciently fast for its purpose. Finally
as a case study we build two sample web applications.
Acknowledgment
We thank Samuel King and anonymous reviewers for
their comments and suggestions. This work was partially
supported by the National Science Foundation, the Air
Force Ofﬁce of Scientiﬁc Research, and the Ofﬁce of
Naval Research.
Figure 10: Average time to process a request with and
without security features enabled.
10 Related Work
Browser defenses. Mozilla Foundation’s Content Secu-
rity Policy (CSP) [14] proposal allows a site to specify
restrictions on content served from the site, including
which external resources the content can load. The CSP
policy is speciﬁed as an HTTP header in each HTTP
response. For example, the CSP header
X-Content-Security-Policy: allow self
prevents the content from loading any external resources
or executing inline scripts. Replacing “allow self”
with “allow whitelist” allows external resources from
the given whitelist. Another system, SiteFirewall [9],
takes a similar approach but also allows persistent
browser-side policy storage (via cookies or other, more
secure objects). SiteFirewall is capable of blocking
some types of XCS attacks from being completed.
The system uses a browser extension that acts as a
ﬁrewall between vulnerable,
internal web sites, and
those accessed by the user on the open Internet. A third
proposal called SOMA [38] implements a mutual consent
policy on cross-origin links. That is, both the embedding
and the embedded content must agree to the action
being initiated. As with CSP, SOMA is implemented
as a content-speciﬁc policy rather than a global site
policy. Finally Content Restrictions [32] is another
approach to deﬁning content control policies on web sites.
Frameworks. Generic web frameworks, such as Ruby
on rails [41] and Django, implement numerous features
such as built-in CSRF defenses that help developers to
build secure web interfaces more easily. However this
kind of generic framework is very heavy and therefore
not suitable for being used in embedded devices. We are
not currently aware of any framework specially designed
for embedded devices. Additionally, while designed with
security in mind, these frameworks do not make secure
web application design intuitive for the developer.
13
milliseconds−20020406080Concurent connections0102030405060708090100110120130Without security featuresWith security feature References
[1] Minded security research labs:
Http pa-
rameter pollution a new web attack cate-
gory (not
just a new buzzword :p). Web
http://blog.mindedsecurity.com/
2009/05/http-parameter-pollution-
new-web-attack.html, 2009. 8
[2] Minded security research labs: A twitter domxss,
Web
a wrong ﬁx and something more.
http://blog.mindedsecurity.com/
2010/09/twitter-domxss-wrong-fix-
and-something.html, 2010. 8
[3] Minded security research labs:
Bypassing
csrf protections with clickjacking and http
parameter pollution.
Web http://blog.
andlabs.org/2010/03/bypassing-
csrf-protections-with.html, 2010. 8
[4] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic,
E. Kirda, C. Kruegel, and G. Vigna. Saner: Com-
posing static and dynamic analysis to validate san-
itization in web applications. In IEEE Symposium
on Security and Privacy, 2008. 13
[5] A. Barth, C. Jackson, and I. Hickson. The http origin
header. web http://tools.ietf.org/id/
draft-abarth-origin-03.html, 2009. 8
[6] A. Barth, C. Jackson, and J. Mitchell. Robust de-
fenses for cross-site request forgery. In proceedings
of ACM CCS ’08, 2008. 5, 6, 13
[7] H. Bojinov, E. Bursztein, and D. Boneh. Embedded
Management Interfaces: Emerging Massive Inse-
curity. In Blackhat USA, July 2009. Invited talk.
1
[8] H. Bojinov, E. Bursztein, and D. Boneh. XCS: cross
channel scripting and its impact on web applications.
In CCS ’09: Proceedings of the 16th ACM confer-
ence on Computer and communications security,
pages 420–431. ACM, 2009. 1, 3
[11] P. Efstathopoulos, M. Krohn, S. VanDeBogart,
C. Frey, D. Ziegler, E. Kohler, D. Mazieres,
F. Kaashoek, and R. Morris. Labels and event pro-
cesses in the asbestos operating system. In Proceed-
ings of the twentieth ACM symposium on Operating
systems principles, pages 17–30. ACM, 2005. 13
[12] Facebook.
Tornado web server.
Web
http://developers.facebook.com/
news.php?blog=1&story=301, 2009. 13
[13] S. Fogie, J. Grossman, R. Hansen, A. Rager, and
P. Petkov. XSS Exploits: Cross Site Scripting Attacks
and Defense. Syngress, 2007. 2, 3, 5, 13
[14] M. Foundation. Content security policy, 2009.
wiki.mozilla.org/Security/CSP/
Spec. 6, 8, 13
[15] Google.
Android os. Web http://www.
android.com/, 2008. 13
[16] B. Gourdin. Webdroid: Google code project.
http://code.google.com/p/android-
secure-web-server/. 1
[17] O. Hallaraker and G. Vigna. Detecting malicious
javascript code in mozilla. In Proceedings of the
IEEE International Conference on Engineering of
Complex Computer Systems (ICECCS), 2005. 13
[18] R. Hansen. Clickjacking.
ha.ckers.org/
blog/20080915/clickjacking. 3
[19] C. Heffner. How to hack millions of routers. In
Blackhat USA, 2010. 1
[20] J. Hewitt and R. Campbell. Firebug 1.3.3, 2009.
http://getfirebug.com/. 4
[21] T. Holz, S. Marechal, and F. Raynal. New threats
and attacks on the world wide web. Security &
Privacy, IEEE, 4(2):72–75, March-April 2006. 4, 5
[22] Http strict transport security (HSTS), 2011. http:
//http://bit.ly/lwqdlu. 9
[9] H. Bojinov, E. Bursztein, and D. Boneh. Xcs: Cross
channel scripting and its impact on web applications.
In CCS 2009: 16th ACM Conference on Computer
and Communications Security, Nov 2009. 3, 4, 13
[23] C. Jackson and A. Barth. Forcehttps: Protecting
high-security web sites from network attacks. In
Proceedings of the 17th International World Wide
Web Conference (WWW2008), 2008. 9
[10] Cifs
security
consideration
update,
1997.
http://www.jalix.org/ressources/
reseaux/nfs-samba/˜cifs/CIFS-
Security-Considerations.txt. 13
[24] T. Jim, N. Swamy, and M. Hicks. Defeating script
injection attacks with browser-enforced embedded
In in proc. of 16th International World
policies.
Wide Web Conference, 2007. 13
14
[25] N. Jovanovic, C. Kruegel, and E. Kirda. Precise
alias analysis for static detection of web application
vulnerabilities. In Proceedings of the Workshop on
Programming Languages and Analysis for Security
(PLAS), 2006. 13
[26] A. Judson. Tamper data 10.1.0, 2008. http://
tamperdata.mozdev.org/. 4
[27] S. Kamkar. mapxss: Accurate geolocation via router
exploitation. http://samy.pl/mapxss/, Jan-
uary 2010. 1
[28] E. Kirda, C. Kruegel, G. Vigna, , and N. Jovanovic.
Noxes: A client-side solution for mitigating cross-
site scripting attacks. In In Proceedings of the 21st
ACM Symposium on Applied Computing (SAC), Se-
curity Track, 2006. 13
[29] M. Krohn. Building secure high-performance web
services with OKWS. In Proceedings of the annual
conference on USENIX Annual Technical Confer-
ence, page 15. USENIX Association, 2004. 2, 6,
13
[30] M. Krohn, A. Yip, M. Brodsky, N. Cliffer,
M. Kaashoek, E. Kohler, and R. Morris. Information
ﬂow control for standard os abstractions. In Pro-
ceedings of twenty-ﬁrst ACM SIGOPS symposium
on Operating systems principles, pages 321–334.
ACM, 2007. 13
[31] G. F. Lyon. Nmap Network Scanning: The Ofﬁcial
Nmap Project Guide to Network Discovery and Se-
curity Scanning, volume 978-0470170779. Nmap
Project, 2007. 4
[32] G. Markham.
Content
restrictions, 2007.
www.gerv.net/security/content-
restrictions/. 13
[33] Microsoft. Mitigating cross-site scripting with http-
only cookies. Web http://msdn.microsoft.
com/en-us/library/ms533046.aspx,
2009. 7
[34] Microsoft. Urlscan 3.1. Web http://www.iis.
net/download/urlscan, 2011. 9
[35] Netcraft.
Totals for active servers across all
domains. Website http://news.netcraft.
com/archives/2009/06/17/june_2009_
web_server_survey.html, Jun 2009. 2
[36] A. Nguyen-Tuong, S. Guarnieri, D. Greene,
J. Shirley, and D. Evans. Automatically hardening
web applications using precise tainting. In In Pro-
ceedings of the 20th IFIP International Information
Security Conference, 2005. 13
15
[37] J. Nielsen’s. Response times: The 3 important
limits. http://www.useit.com/papers/
responsetime.html. 12
[38] T. Oda, G. Wurster, P. van Oorschot, and A. So-
mayaji. Soma: mutual approval for included content
in web pages. In ACM CCS’08, pages 89–98, 2008.
13
[39] P. Peteﬁsh, E. Sheridan, and D. Wichers. Cross-site
request
forgery (csrf) prevention cheat sheet.
web http://www.owasp.org/index.php/
Cross-Site_Request_Forgery_(CSRF)
_Prevention_Cheat_Sheet, 2010. 8
[40] T. Pietraszek and C. V. Berghe. Defending against in-
jection attacks through context-sensitive string eval-
uation. In Recent Advances in Intrusion Detection
(RAID), 2005. 13
[41] Ruby on rails. http://rubyonrails.org/.
13
[42] R. Rogers. Nessus Network Auditing, Second Edi-
tion, volume 978-1597492089. Syngress, 2008. 4
[43] RSnake. Xss (cross site scripting) cheat sheet for
ﬁlter evasion. http://ha.ckers.org/xss.
html. 13
[44] G. Rydstedt, E. Bursztein, D. Boneh, and C. Jack-
son. Busting frame busting: a study of clickjacking
vulnerabilities at popular sites. In in IEEE Oakland
Web 2.0 Security and Privacy (W2SP 2010), 2010.
2, 8
[45] G. Rydstedt, B. Gourdin, E. Bursztein, and
D. Boneh.
Framing attacks on smartphones,
dumb routers and social sites: Tap-jacking, geo-
localization and framing leak attacks. In Woot, 2001.
1
[46] P. Saxena and D. Song. Document structure in-
tegrity: A robust basis for cross-site scripting de-
fense. In proceedings of NDSS’08, 2008. 13
[47] Log injection attack and defense, 2007. http://
bit.ly/kbMebK. 13
[48] Basic vulnerability issues for sip security, 2005.
http://download.securelogix.com/
library/SIP_Security030105.pdf. 13
[49] P.
Stone.
Next
clickjack-
media.blackhat.com/bh-eu-
generation
ing.
10/presentations/Stone/BlackHat-
EU-2010-Stone-Next-\Generation-
Clickjacking-slides.pdf, 2010. 3
[50] D. Stuttard and M. Pinto. The Web Application
Hacker’s Handbook: Discovering and Exploiting
Security Flaws, volume 978-0470170779. Wiley,
2007. 1, 2, 3
[51] B. Walther.
Edit cookies 0.2.2.1,
2007.
https://addons.mozilla.org/en-
US/firefox/addon/4510. 4
[52] D. Wichers. Sql injection prevention cheat sheet.
web http://www.owasp.org/index.php/
SQL_Injection_Prevention_Cheat_
Sheet, 2011. 9
[53] Y. Xie and A. Aiken. Static detection of security
In In Pro-
vulnerabilities in scripting languages.
ceedings of the USENIX Security Symposium, 2006.
13
[54] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and
D. Mazi`eres. Making information ﬂow explicit in
In 7th Symposium on Operating Systems
histar.
Design and Implementation, 2006. 13
16