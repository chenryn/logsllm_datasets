### Analysis of Snort’s Stream4 Reassembly Feature

Based on our analysis of the WINDOW violation detection alerts, we identified two implementation errors in Snort's stream4 reassembly feature. First, the stream4 reassembler fails to maintain the connection state when it encounters an incomplete TCP connection. Second, it has issues with handling RST segments, particularly in the scenario illustrated in Figure 7. Resolving these types of errors is challenging because they are closely tied to the variables used for various stream4 inspections.

### Conclusion and Future Work

**TCPopera** is a new traffic replay tool designed to reproduce IP flows based on various flow-level and connection-level traffic parameters extracted from input trace records. These parameters can be reused to reproduce traffic or modified to create new traffic. TCPopera retains the advantages of trace-based traffic replaying by ensuring that the traffic is reproducible and accurate in terms of address mixes, packet loads, and other traffic characteristics. Additionally, it overcomes the limitations of conventional traffic replay tools by providing traffic models that can be used to adjust trace records during replaying. Unlike traditional tools, TCPopera is specifically designed for live test environments where high accuracy in protocol semantics is essential.

#### Validation and Testing

We demonstrated the capabilities of the current TCPopera implementation through validation tests. We compared TCPopera traffic with input trace records in terms of traffic volume and other distributional properties. In the traffic reproduction test, TCPopera successfully reproduced IP flows without generating any ghost packets. We also showed how TCPopera can be deployed in live test environments to evaluate security products like Snort. Our effectiveness tests revealed that Snort produced different results due to its implementation flaws when we changed test conditions using TCPopera.

#### Future Development Phases

The TCPopera project is divided into multiple development phases, and we have completed the first phase, which focused on implementing core components for interactive traffic replaying. The next phase will address several key issues:

1. **Extend Traffic Models**: Include UDP traffic models to improve the accuracy of IP flow reproduction.
2. **Inter-Connection Dependencies**: Develop a better model for inter-connection dependencies to enhance TCPopera performance.
3. **Evasive Techniques**: Implement various evasive techniques to provide more methodologies for in-line device testing, such as routers and IPS.
4. **GUI Implementation**: Develop a TCPopera GUI to facilitate configuration and control.

Currently, one commercial vendor uses TCPopera almost daily in their development cycle. Recently, ITRI decided to use TCPopera to test Netscreen IPS boxes. We also plan to conduct more in-line device testing, including ITRI’s Network Processor Units (NPU)-based IPS prototype.

### References

1. The InterOperability Laboratory (IOL) homepage: <http://www.iol.unh.edu>. Accessed March 12, 2005.
2. The Wisconsin Advanced Internet Laboratory (WAIL) homepage: <http://wail.cs.wisc.edu>. Accessed March 12, 2005.
3. The Network Simulator (NS-2) homepage: <http://www.isi.edu/nsnam/ns>. Accessed March 12, 2005.
4. Scalable Simulation Framework Research Network (SSFNET) homepage: <http://www.ssfnet.org>. Accessed March 12, 2005.
5. Vahdat, A., Yocum, K., Walsh, K., Mahadevan, P., Kosti, D., Chase, J., Becker, D.: Scalability and accuracy in a large-scale network emulator. SIGOPS Oper. Syst. Rev. 36 (2002) 271–284.
6. White, B., Lepreau, J., Stoller, L., Ricci, R., Guruprasad, S., Newbold, M., Hibler, M., Barb, C., Joglekar, A.: An Integrated Experimental Environment for Distributed Systems and Networks. OSDIO2, Boston, MA, (2002) 255–270.
7. Peterson, L., Anderson. T., Culler, A., Roscoe, T.: A blueprint for introducing disruptive technology into the Internet. SIGCOMM Comput. Commun. Rev. 33(1) (2003) 59–64.
8. Touch, J.: Dynamic Internet overlay deployment and management using the X-Bone. ICNP ’00: Proceedings of the 2000 International Conference on Network Protocols (2000) 59–67.
9. Bajcsy, R., Benzel, T., Bishop, M. Braden, B., Brodley, C., Fahmy, S., Floyd, S., Hardaker, W., Joseph, A., Kesidis, G., Levitt, K., Lindell, B., Liu, P., Miller, D., Mundy, R., Neuman, C., Ostrenga, R., Paxson, V., Porras, P., Rosenberg, C., Tygar, J. D., Sastry, S., Sterne, D., Wu, S. F.: Cyber defense technology networking and evaluation. Commun. ACM 47(3) (2004) 58–61.
10. POSIX Thread tutorial page: <http://www.llnl.gov/computing/tutorials/workshops/workshop/pthreads/MAIN.html>. Accessed March 13, 2005.
11. Rizzo, L.: Dummynet: a simple approach to the evaluation of network protocols. ACM Computer Communication Review 27(1) (1997) 31–41.
12. MIT Lincoln Labs. DARPA Intrusion Detection Evaluation: <http://www.ll.mit.edu/IST/ideval/>. Accessed March 13, 2005.
13. The Snort homepage: <http://www.snort.org/>. Accessed March 13, 2005.
14. The TCPREPLAY & FLOWRELAY homepage: <http://tcpreplay.sourceforge.net/>. Accessed March 14, 2005.
15. The TCPDUMP homepage: <http://www.tcpdump.org/>. Accessed March 14, 2005.
16. The libpcap project homepage: <http://sourceforge.net/projects/libpcap/>. Accessed March 14, 2005.
17. Feng, Wu-chang, Goel, A., Bezzaz, A., Feng, Wu-chi, Walpole, J.: TCPivo: a high-performance packet replay engine. MoMeTools ’03: Proceedings of the ACM SIGCOMM workshop on Models, methods and tools for reproducible network research (2003) 57–64.
18. Cheng, Y., Hölzle, U., Cardwell, N., Savage, S., Voelker, C. M.: Monkey See, Monkey Do: A Tool for TCP Tracing and Replaying. USENIX Annual Technical Conference, General Track (2004) 87–98.
19. The Tomahawk Test Tool homepage: <http://tomahawk.sourceforge.net/>. Accessed March 14, 2005.
20. The LIBNET project homepage: <http://www.packetfactory.net/libnet/>. Accessed March 16, 2005.
21. The libpcap project homepage: <http://sourceforge.net/projects/libpcap/>. Accessed March 14, 2005.
22. Stevens, W. R., Write, G. R.: TCP/IP illustrated (vol. 2): the implementation. Addison-Wesley Longman Publishing Co., Inc. (1995).
23. Jacobson, V.: Congestion avoidance and control. SIGCOMM Comput. Commun. Rev. 18(4) (1988) 314–329.
24. Jacobson, V.: Berkeley TCP Evolution from 4.3-Tahoe to 4.3-Reno. Proceedings of the Eighteenth Internet Engineering Task Force, University of British Columbia, Vancouver, Canada (1990).
25. Jacobson, V.: Modified TCP Congestion Avoidance Algorithm. end2end-interest mailing list, (1990).

### Appendix: Effectiveness Test Result of IDEVAL99 Dataset

Table 3 presents the detection results from Snort over the IDEVAL99 dataset under different test conditions. Snort generated slightly different numbers of alerts for each traffic on 11 different signatures. Except for the bolded signatures in Table 3, differences in the number of alerts were due to connection drops caused by SYN packet losses at our BSD firewall.

- **Signature: Web Bug 0x0 GIF Attempt**
  - This signature issues an alert when Snort detects an access to a null GIF image in HTTP packets. For this signature, Snort issued 3 fewer alerts on TCPopera (1%-loss) traffic. After reviewing the alerts, we found that there was a single TCP connection drop due to a SYN packet loss. Additionally, Snort failed to detect 2 alerts from another TCP connection that had completed normally.

- **Signature: TELNET Access**
  - This signature issues an alert when Snort detects a remote user successfully logging into a telnet server. Snort issued one less alert for TCPopera (no-loss) and 4 fewer alerts for TCPopera (1%-loss) compared to the Input trace. The reason for one less alert in TCPopera (no-loss) is that TCPopera discards unnecessary duplicate data packet transmissions. Since TCPopera performs stateful TCP replaying, it can identify and discard any unnecessary packet transmissions. For TCPopera (1%-loss), the TCP connection drop was the reason for one less alert, and Snort failed to detect two alerts from the normally completed connection.

- **Signatures: SCAN FIN and (stream4) FIN Scan Detection**
  - These signatures issue alerts when Snort observes a packet with only the FIN flag set. For these signatures, Snort issued no alerts for both TCPopera traffics. This is a side effect of the stateful replaying of TCP connections, as TCPopera discards packets that do not belong to any existing TCP connection, known as orphan packets. As a result, Snort does not see these FIN scanning packets. For the next version of TCPopera, we plan to implement an option to replay orphan packets, allowing users to choose whether to include them.

- **Signatures: (stream4) Possible Rxmt Detection and (stream4) WINDOW Violation Detection**
  - For the (stream4) possible rxmt detection rule, Snort issued 2 alerts from the Input trace and no alerts from TCPopera (no-loss). TCPopera discarded two unnecessary retransmissions in the Input trace during the stateful operation. In contrast, Snort generated 4 new alerts for TCPopera (1%-loss) due to timing differences between Snort’s sniffing point and an internal TCPopera node. For the (stream4) WINDOW violation detection rule, Snort only issued alerts for TCPopera traffic. This is the result of mishandling of RST packets, as described in the analysis of the ITRI dataset.

**Note:** A packet with only a FIN flag is uncommon behavior because the FIN flag is usually combined with the ACK flag.