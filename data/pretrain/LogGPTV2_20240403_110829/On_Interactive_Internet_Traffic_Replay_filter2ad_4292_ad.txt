"client packet: %s\n", flagbuf););
}
Based on our analysis on the WINDOW violation detection alerts, we found
two implementation errors in the Snort’s stream4 reassembling feature. First, the
stream4 reassembler failed to keep track of the connection state when it faces
an incomplete TCP connection. Second, it has a problem with handling RST
segments especially when it processes a connection shown in Figure 7. Fixing
the type of errors is not simple because they are tightly related to variables used
for various stream4 inspections.
5 Conclusion and Future Work
TCPopera is a new traﬃc replay tool to reproduce IP ﬂows based on various ﬂow-
level and connection-level traﬃc parameters extracted from input trace records.
7 Another strange behavior from Snort is that it does not reset the connection at this
point because Snort thinks this RST segment is invalid.
On Interactive Internet Traﬃc Replay
261
These parameters can be either reused to reproduce traﬃc or changed to create
new traﬃc. TCPopera sustains the merits of trace-based traﬃc replaying because
the TCPopera traﬃc is reproducible, and accurate in terms of address mixes,
packet loads, and other traﬃc characteristics. Also, it overcomes the drawback of
conventional traﬃc replay tools by providing traﬃc models can be used to tune
trace records during replaying. Unlike conventional traﬃc replay tools, TCP-
opera is originally designed to replay traﬃc on live test environments where the
accuracy of protocol semantic is highly requested.
We demonstrated the ability of the current TCPopera implementation
throughout our validation tests. We compared TCPopera traﬃc to input trace
records in terms of traﬃc volume and other distributional properties. In the
traﬃc reproduction test, we found that TCPopera successfully reproduced IP
ﬂows with no ghost packet generation. We also demonstrated how TCPopera
can be deployed in live test environments to evaluate security products like
Snort through the eﬀectiveness test. We observed that Snort generated diﬀerent
results from its implementation ﬂaws when we changed test conditions using
TCPopera.
The TCPopera project consists of multiple development phases and we have
completed its ﬁrst phase whose goal was to implement core components for
interactive traﬃc replaying. There are several issues for the next phase of the
TCPopera development. The ﬁrst issue is to extend our traﬃc models including
UDP traﬃc models to improve the accuracy of IP ﬂow reproduction. The second
issue is to provide a better model for inter-connection dependencies in order to
improve the TCPopera performance. The third issue is to implement various
evasive techniques to provide more methodologies for in-line device testing such
as router, IPS.The last issue is to implement the TCPopera GUI to help the
TCPopera conﬁguration (control). Currently, we have one commercial vendor
using TCPopera almost daily under their development cycle. On the other hand,
recently ITRI has decided to use TCPopera to test Netscreen IPS boxes. We are
also planning to perform more in-line devices testing including ITRI’s Network
Processor Units (NPU)-based IPS prototype.
References
1. The InterOperability Laboratory (IOL) homepage: http://www.iol.unh.edu. Ac-
cessed March 12, 2005.
2. The Wisconsin
Advanced
http://wail.cs.wisc.edu. Accessed March 12, 2005.
Internet
Laboratory
(WAIL)
homepage:
3. The Network Simulator (NS-2) homepage: http://www.isi.edu/nsnam/ns. Ac-
cessed March 12, 2005.
4. Scalable Simulation Framework Research Network (SSFNET) homepage:
http://www.ssfnet.org. Accessed March 12, 2005.
5. Vahdat, A., Yocum, K., Walsh, K., Mahadevan, P., Kosti, D., Chase, J., Becker, D:
Scalability and accuracy in a large-scale network emulator. SIGOPS Oper. Syst.
Rev. 36 (2002) 271–284.
262
S.-S. Hong and S. Felix Wu
6. White, B., Lepreau, J., Stoller, L., Ricci, R., Guruprasad, S., Newbold, M., Hibler,
M., Barb, C., Joglekar, A.: An Integrated Experimental Environment for Distrib-
uted Systems and Networks. OSDIO2, Boston, MA, (2002) 255–270.
7. Peterson, L., Anderson. T., Culler, A., Roscoe, T.: A blueprint for introducing
disruptive technology into the Internet. SIGCOMM Comput. Commun. Rev. 33(1)
(2003) 59–64.
8. Touch, J.: Dynamic Internet overlay deployment and management using the X-
Bone. ICNP ’00: Proceedings of the 2000 International Conference on Network
Protocols (2000) 59–67.
9. Bajcsy, R., Benzel, T., Bishop, M. Braden, B., Brodley, C., Fahmy, S., Floyd,
S., Hardaker, W., Joseph, A., Kesidis, G., Levitt, K., Lindell, B., Liu, P., Miller,
D., Mundy, R., Neuman, C., Ostrenga, R., Paxson, V., Porras, P., Rosenberg, C.,
Tygar, J. D., Sastry, S., Sterne, D., Wu, S. F.: Cyber defense technology networking
and evaluation. Commun. ACM 47(3) (2004) 58–61.
10. POSIX Thread tutorial page: http://www.llnl.gov/computing/tutorials/
workshops/workshop/pthreads/MAIN.html. Accessed March 13, 2005.
11. Rizzo, L.: Dummynet: a simple approach to the evaluation of network protocols.
ACM Computer Communication Review 27(1) (1997) 31–41.
12. MIT Lincoln Labs. DARPA Intrusion Detection Evaluation.:
http://www.ll.mit.edu/IST/ideval/. Accessed March 13, 2005.
13. The Snort homepage: http://www.snort.org/. Accessed March 13, 2005.
14. The TCPREPLAY & FLOWRELAY homepage: http://tcpreplay.sourceforge.net/.
Accessed March 14, 2005.
15. The TCPDUMP homepage: http://www.tcpdump.org/. Accessed March 14, 2005.
16. The libpcap project homepage: http://sourceforge.net/projects/libpcap/. Accessed
March 14, 2005.
17. Feng, Wu-chang, Goel, A., Bezzaz, A., Feng, Wu-chi, Walpole, J.: TCPivo: a high-
performance packet replay engine. MoMeTools ’03: Proceedings of the ACM SIG-
COMM workshop on Models, methods and tools for reproducible network research
(2003) 57–64.
18. Cheng, Y., H¨olzle, U., Cardwell, N., Savage, S., Voelker, C. M.: Monkey See, Mon-
key Do: A Tool for TCP Tracing and Replaying. USENIX Annual Technical Con-
ference, General Track (2004) 87–98.
19. The Tomahawk Test Tool homepage: http://tomahawk.sourceforge.net/. Accessed
March 14, 2005.
20. The LIBNET project homepage: http://www.packetfactory.net/libnet/. Accessed
March 16, 2005.
21. The libpcap project homepage: http://sourceforge.net/projects/libpcap/. Accessed
March 14, 2005.
22. Stevens, W. R., Write, G. R.: TCP/IP illustrated (vol. 2): the implementation.
Addison-Wesley Longman Publishing Co., Inc. (1995).
23. Jacobson, V.: Congestion avoidance and control. SIGCOMM Comput. Commun.
Rev. 18(4) (1988) 314–329.
24. Jacobson, V.: Berleley TCP Evolution from 4.3-Tahoe to 4.3-Reno. Proceedings of
the Eighteenth Internet Engineering Task Force, University of British Columbia,
Vancouver, Canada (1990).
25. Jacobson, V.: Modiﬁed TCP Congestion Avoidance Algorithm. end2end-interest
mailing list, (1990).
On Interactive Internet Traﬃc Replay
263
Appendix: The Eﬀectiveness Test Result of IDEVAL99
Dataset
Table 3 present the detection results from Snort over the IDEVAL99 dataset
with diﬀerent test conditions. Snort generated a slightly diﬀerent number of
alerts for each traﬃc on 11 diﬀerent signatures. Except the bold-ed signatures
in Table 3, diﬀerences in the number of alerts were from connection drops by
SYN packet losses at our BSD ﬁrewall. The ﬁrst signature is web bug 0x0 gif
attempt that issues an alert when Snort detects an access to a null gif image
in HTTP packets. For this signature, Snort issued 3 less alerts on TCPopera
(1%-loss) traﬃc. After the survey on alerts, we found that there was a single
TCP connection drop by a SYN packet loss. Also, Snort failed to detect 2 alerts
from another TCP connections that has normally completed replaying.
Table 3. The detection results from Snort over various test conditions. All Snort rules
and stream 4 analysis are enabled during the test.
Signature
ICMP Destination Port Unreachable
ICMP PING BSDtype
ICMP PING *NIX
ICMP PING
INFO web bug 0x0 gif attempt
ICMP Echo Reply
INFO TELNET access
INFO TELNET login incorrect
POLICY FTP anonymous login attempt
CHAT IRC nink change
CHAT IRC message
ATTACK-RESPONSES Invalid URL
ATTACK-RESPONSES 403 Forbidden
SHELLCODE x86 NOOP
SCAN FIN
(stream4) (Fin scan) detection
X11 open
(stream4) Possible rxmt detection
(stream4) WINDOW violation detection
INFO FTP Bad login
FTP .rhosts
WEB-MISC http directory traversal
BACKDOOR MISC Solaris 2.5 attempt
ATTACK-RESPONSES id check returned userid
ATTACK-RESPONSES directory listing
Total
Number of alerts
Input TCPopera
trace no loss 1% loss
89
89
17
17
17
17
152
152
185
185
152
152
289
290
47
47
118
118
7
7
280
281
2
2
5
5
1
1
0
15
0
15
1
1
0
2
4
0
12
12
1
1
1
1
1
1
1
1
30
30
1442 1412
89
17
17
152
182
151
286
46
117
7
280
2
5
1
0
0
1
4
6
11
1
1
1
1
30
1408
264
S.-S. Hong and S. Felix Wu
The second signature is the TELNET access signature that issues an alert
when Snort detects a remote user successfully login to a telnet server. Snort
issued one less alert from TCPopera (no-loss) and 4 less alerts from TCPopera
(1%-loss), comparing to the Input trace. The reason for one less alert in TCP-
opera (no-loss) is because TCPopera discards an unnecessary duplicate data
packet transmission. Since TCPopera performs the stateful TCP replaying, it
can distinguish any unnecessary packet transmission. For TCPopera (1%-loss),
except one less alert from discarding unnecessary packet transformation, The
TCP connection drop was the reason for one less alert and Snort failed to detect
two of them from the connection has been completed normally.
The next two signatures we move on are SCAN FIN and (stream4) FIN scan
detection. Basically, these two signatures issue the alert when Snort observes a
packet with only FIN ﬂag is set.8 For these signatures, Snort issued no alert for
both TCPopera traﬃc. This is the side eﬀect of the stateful replaying of TCP
connections because it diacrads packets that does not belong to any existing
TCP connection, called orphan packets. As a result, Snort has no chance to see
these FIN scanning packets. For the next version of TCPopera, we have the plan
to implement the option for replaying orphan packets to provide an option for
users to choose whether orphan packets are replayed or not.
The next two signatures are stream4 analysis. For the (stream4) possible rxmt
detection rule, Snort issued 2 alerts from the Input trace and no alerts from
TCPopera (no-loss). TCPopera discarded two unnecessary retransmissions in
the Input trace during the stateful operation. In contrast, Snort generated 4
new alerts for TCPopera (1%-loss) because of the diﬀerence in timing between
the Snort’s sniﬃng point and an internal TCPopera node. For the (stream4)
WINDOW violation detection rule, Snort only issued alerts for TCPopera traﬃc.
This is the result of mishandling of RST packets we described in the analysis of
ITRI dataset.
8 A packet with only a FIN ﬂag is uncommon behavior because a FIN ﬂag is usually
combined with ACK ﬂag.