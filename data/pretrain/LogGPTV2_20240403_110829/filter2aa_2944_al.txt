tocols that allow offloading the cost of password hashing to the client, such as
74
CHAPTER 3
Securing the Natter API
SCRAM5 or OPAQUE,6 this is hard to do securely so you should consult an expert
before implementing such a solution.
PRINCIPLE
Establish secure defaults for all security-sensitive algorithms and
parameters used in your API. Only relax the values if there is no other way to
achieve your non-security requirements.
3.3.4
Registering users in the Natter API
Listing 3.2 shows a new UserController class with a method for registering a user:
 First, you read the username and password from the input, making sure to vali-
date them both as you learned in chapter 2.
 Then you calculate a fresh Scrypt hash of the password. 
 Finally, store the username and hash together in the database, using a prepared
statement to avoid SQL injection attacks. 
Navigate to the folder src/main/java/com/manning/apisecurityinaction/controller
in your editor and create a new file UserController.java. Copy the contents of the list-
ing into the editor and save the new file.
package com.manning.apisecurityinaction.controller;
import com.lambdaworks.crypto.*;
import org.dalesbred.*;
import org.json.*;
import spark.*;
import java.nio.charset.*;
import java.util.*;
import static spark.Spark.*;
public class UserController {
  private static final String USERNAME_PATTERN =
      "[a-zA-Z][a-zA-Z0-9]{1,29}";
  private final Database database;
  public UserController(Database database) {
    this.database = database;
  }
  public JSONObject registerUser(Request request,
      Response response) throws Exception {
    var json = new JSONObject(request.body());
5 https://tools.ietf.org/html/rfc5802
6 https://blog.cryptographyengineering.com/2018/10/19/lets-talk-about-pake/
Listing 3.2
Registering a new user
75
Authentication to prevent spoofing
    var username = json.getString("username");
    var password = json.getString("password");
    if (!username.matches(USERNAME_PATTERN)) {   
      throw new IllegalArgumentException("invalid username");
    }
    if (password.length() < 8) {
      throw new IllegalArgumentException(
          "password must be at least 8 characters");
    }
    var hash = SCryptUtil.scrypt(password, 32768, 8, 1);    
    database.updateUnique(                          
        "INSERT INTO users(user_id, pw_hash)" +
        " VALUES(?, ?)", username, hash);
    response.status(201);
    response.header("Location", "/users/" + username);
    return new JSONObject().put("username", username);
  }
}
The Scrypt library generates a unique random salt value for each password hash. The
hash string that gets stored in the database includes the parameters that were used
when the hash was generated, as well as this random salt value. This ensures that you
can always recreate the same hash in future, even if you change the parameters. The
Scrypt library will be able to read this value and decode the parameters when it veri-
fies the hash.
DEFINITION
A salt is a random value that is mixed into the password when it is
hashed. Salts ensure that the hash is always different even if two users have the
same password. Without salts, an attacker can build a compressed database of
common password hashes, known as a rainbow table, which allows passwords to
be recovered very quickly.
You can then add a new route for registering a new user to your Main class. Locate the
Main.java file in your editor and add the following lines just below where you previ-
ously created the SpaceController object:
var userController = new UserController(database);
post("/users", userController::registerUser);
3.3.5
Authenticating users
To authenticate a user, you’ll extract the username and password from the HTTP
Basic authentication header, look up the corresponding user in the database, and
finally verify the password matches the hash stored for that user. Behind the scenes,
the Scrypt library will extract the salt from the stored password hash, then hash the sup-
plied password with the same salt and parameters, and then finally compare the hashed
Apply the same 
username validation 
that you used before.
Use the Scrypt library 
to hash the password. 
Use the recommended 
parameters for 2019.
Use a prepared statement 
to insert the username 
and hash.
76
CHAPTER 3
Securing the Natter API
password with the stored hash. If they match, then the user must have presented the
same password and so authentication succeeds, otherwise it fails. 
 Listing 3.3 implements this check as a filter that is called before every API call. First
you check if there is an Authorization header in the request, with the Basic authenti-
cation scheme. Then, if it is present, you can extract and decode the Base64-encoded
credentials. Validate the username as always and look up the user from the database.
Finally, use the Scrypt library to check whether the supplied password matches the
hash stored for the user in the database. If authentication succeeds, then you should
store the username in an attribute on the request so that other handlers can see it;
otherwise, leave it as null to indicate an unauthenticated user. Open the UserController
.java file that you previously created and add the authenticate method as given in the
listing.
public void authenticate(Request request, Response response) {
  var authHeader = request.headers("Authorization");             
  if (authHeader == null || !authHeader.startsWith("Basic ")) {  
    return;                                                      
  }                                                              
  var offset = "Basic ".length();
  var credentials = new String(Base64.getDecoder().decode(      
      authHeader.substring(offset)), StandardCharsets.UTF_8);   
  var components = credentials.split(":", 2);                  
  if (components.length != 2) {                                
    throw new IllegalArgumentException("invalid auth header"); 
  }                                                            
  var username = components[0];                                
  var password = components[1];                                
  if (!username.matches(USERNAME_PATTERN)) {
    throw new IllegalArgumentException("invalid username");
  }
  var hash = database.findOptional(String.class,
      "SELECT pw_hash FROM users WHERE user_id = ?", username);
  if (hash.isPresent() &&                        
      SCryptUtil.check(password, hash.get())) {  
    request.attribute("subject", username);
  }
}
You can wire this into the Main class as a filter in front of all API calls. Open the
Main.java file in your text editor again, and add the following line to the main method
underneath where you created the userController object:
    before(userController::authenticate);
Listing 3.3
Authenticating a request
Check to see if there 
is an HTTP Basic 
Authorization 
header.
Decode the 
credentials using 
Base64 and UTF-8.
Split the credentials 
into username and 
password.
If the user exists, 
then use the Scrypt 
library to check 
the password.
77
Authentication to prevent spoofing
You can now update your API methods to check that the authenticated user matches
any claimed identity in the request. For example, you can update the Create Space
operation to check that the owner field matches the currently authenticated user. This
also allows you to skip validating the username, because you can rely on the authenti-
cation service to have done that already. Open the SpaceController.java file in your
editor and change the createSpace method to check that the owner of the space
matches the authenticated subject, as in the following snippet:
  public JSONObject createSpace(Request request, Response response) {
    ..
    var owner = json.getString("owner");
    var subject = request.attribute("subject");
    if (!owner.equals(subject)) {
      throw new IllegalArgumentException(
          "owner must match authenticated user");
    }
    ..
  }
You could in fact remove the owner field from the request and always use the authen-
ticated user subject, but for now you’ll leave it as-is. You can do the same in the Post
Message operation in the same file:
    var user = json.getString("author");
    if (!user.equals(request.attribute("subject"))) {
      throw new IllegalArgumentException(
          "author must match authenticated user");
    }
You’ve now enabled authentication for your API—every time a user makes a claim
about their identity, they are required to authenticate to provide proof of that claim.
You’re not yet enforcing authentication on all API calls, so you can still read messages
without being authenticated. You’ll tackle that shortly when you look at access control.
The checks we have added so far are part of the application logic. Now let’s try out
how the API works. First, let’s try creating a space without authenticating:
$ curl -d '{"name":"test space","owner":"demo"}' 
➥ -H 'Content-Type: application/json' http://localhost:4567/spaces
{"error":"owner must match authenticated user"}
Good, that was prevented. Let’s use curl now to register a demo user:
$ curl -d '{"username":"demo","password":"password"}’' 
➥ -H 'Content-Type: application/json' http://localhost:4567/users
{"username":"demo"}
78
CHAPTER 3
Securing the Natter API
Finally, you can repeat your Create Space request with correct authentication
credentials:
$ curl -u demo:password -d '{"name":"test space","owner":"demo"}' 
➥ -H 'Content-Type: application/json' http://localhost:4567/spaces
{"name":"test space","uri":"/spaces/1"}
3.4
Using encryption to keep data private
Introducing authentication into your API protects against spoofing threats. However,
requests to the API, and responses from it, are not protected in any way, leading to
tampering and information disclosure threats. Imagine that you were trying to check
the latest gossip from your work party while connected to a public wifi hotspot in your
local coffee shop. Without encryption, the messages you send to and from the API will
be readable by anybody else connected to the same hotspot.
 Your simple password authentication scheme is also vulnerable to this snooping, as
an attacker with access to the network can simply read your Base64-encoded pass-
words as they go by. They can then impersonate any user whose password they have
stolen. It’s often the case that threats are linked together in this way. An attacker can
take advantage of one threat, in this case information disclosure from unencrypted
communications, and exploit that to pretend to be somebody else, undermining your
API’s authentication. Many successful real-world attacks result from chaining together
multiple vulnerabilities rather than exploiting just one mistake.
Pop quiz
3
Which of the following are desirable properties of a secure password hashing
algorithm? (There may be several correct answers.)
a
It should be easy to parallelize.
b
It should use a lot of storage on disk.
c
It should use a lot of network bandwidth.
d
It should use a lot of memory (several MB).
e
It should use a random salt for each password.
f
It should use a lot of CPU power to try lots of passwords.
4
What is the main reason why HTTP Basic authentication should only be used over an
encrypted communication channel such as HTTPS? (Choose one answer.)
a
The password can be exposed in the Referer header.
b
HTTPS slows down attackers trying to guess passwords.
c
The password might be tampered with during transmission.
d
Google penalizes websites in search rankings if they do not use HTTPS.
e
The password can easily be decoded by anybody snooping on network traffic.
The answers are at the end of the chapter.
79
Using encryption to keep data private
 In this case, sending passwords in clear text is a pretty big vulnerability, so let’s fix
that by enabling HTTPS. HTTPS is normal HTTP, but the connection occurs over
Transport Layer Security (TLS), which provides encryption and integrity protection.
Once correctly configured, TLS is largely transparent to the API because it occurs at a
lower level in the protocol stack and the API still sees normal requests and responses.
Figure 3.5 shows how HTTPS fits into the picture, protecting the connections between
your users and the API.
In addition to protecting data in transit (on the way to and from our application), you
should also consider protecting any sensitive data at rest, when it is stored in your
application’s database. Many different people may have access to the database, as a
legitimate part of their job, or due to gaining illegitimate access to it through some
other vulnerability. For this reason, you should also consider encrypting private data
in the database, as shown in figure 3.5. In this chapter, we will focus on protecting
data in transit with HTTPS and discuss encrypting data in the database in chapter 5.
TLS or SSL?
Transport Layer Security (TLS) is a protocol that sits on top of TCP/IP and provides
several basic security functions to allow secure communication between a client and
a server. Early versions of TLS were known as the Secure Socket Layer, or SSL, and
you’ll often still hear TLS referred to as SSL. Application protocols that use TLS
often have an S appended to their name, for example HTTPS or LDAPS, to stand for
“secure.”
Web browser
Natter API
Audit log
Authentication
Request
Response
Access control
Rate-limiting
Mobile app
Application
database
HTTPS is used to
encrypt and protect
data being transmitted
(in transit) to and from
your API.
Encryption should also
be used to protect sensitive
data at rest in your
application database.
Inside your API,
requests and responses
are unencrypted.
Application
logic
Figure 3.5
Encryption is used to protect data in transit between a client and our API, and at 
rest when stored in the database.
80
CHAPTER 3
Securing the Natter API
3.4.1
Enabling HTTPS
Enabling HTTPS support in Spark is straightforward. First, you need to generate a
certificate that the API will use to authenticate itself to its clients. TLS certificates are
covered in depth in chapter 7. When a client connects to your API it will use a URI
that includes the hostname of the server the API is running on, for example api
.example.com. The server must present a certificate, signed by a trusted certificate
authority (CA), that says that it really is the server for api.example.com. If an invalid
certificate is presented, or it doesn’t match the host that the client wanted to connect
to, then the client will abort the connection. Without this step, the client might be
tricked into connecting to the wrong server and then send its password or other confi-
dential data to the imposter.
 Because you’re enabling HTTPS for development purposes only, you could use a
self-signed certificate. In later chapters you will connect to the API directly in a web
browser, so it is much easier to use a certificate signed by a local CA. Most web brows-
ers do not like self-signed certificates. A tool called mkcert (https://mkcert.dev) sim-
plifies the process considerably. Follow the instructions on the mkcert homepage to
install it, and then run
mkcert -install
to generate the CA certificate and install it. The CA cert will automatically be marked
as trusted by web browsers installed on your operating system.
DEFINITION
A self-signed certificate is a certificate that has been signed using the
private key associated with that same certificate, rather than by a trusted cer-
tificate authority. Self-signed certificates should be used only when you have a
direct trust relationship with the certificate owner, such as when you gener-
ated the certificate yourself.
You can now generate a certificate for your Spark server running on localhost. By
default, mkcert generates certificates in Privacy Enhanced Mail (PEM) format. For
Java, you need the certificate in PKCS#12 format, so run the following command in
the root folder of the Natter project to generate a certificate for localhost:
mkcert -pkcs12 localhost
(continued)
TLS ensures confidentiality and integrity of data transmitted between the client and
server. It does this by encrypting and authenticating all data flowing between the two
parties. The first time a client connects to a server, a TLS handshake is performed
in which the server authenticates to the client, to guarantee that the client connected
to the server it wanted to connect to (and not to a server under an attacker’s control).
Then fresh cryptographic keys are negotiated for this session and used to encrypt and
authenticate every request and response from then on. You’ll look in depth at TLS
and HTTPS in chapter 7.
81
Using encryption to keep data private
The certificate and private key will be generated in a file called localhost.p12. By
default, the password for this file is changeit. You can now enable HTTPS support in
Spark by adding a call to the secure() static method, as shown in listing 3.4. The first
two arguments to the method give the name of the keystore file containing the server
certificate and private key. Leave the remaining arguments as null; these are only
needed if you want to support client certificate authentication (which is covered in
chapter 11).
WARNING
The CA certificate and private key that mkcert generates can be
used to generate certificates for any website that will be trusted by your browser.
Do not share these files or send them to anybody. When you have finished
development, consider running mkcert -uninstall to remove the CA from
your system trust stores.
import static spark.Spark.secure;    
public class Main {
  public static void main(String... args) throws Exception {
    secure("localhost.p12", "changeit", null, null);    
    ..
  }
}
Restart the server for the changes to take effect. If you started the server from the
command line, then you can use Ctrl-C to interrupt the process and then simply run it
again. If you started the server from your IDE, then there should be a button to restart
the process.
 Finally, you can call your API (after restarting the server). If curl refuses to con-
nect, you can use the --cacert option to curl to tell it to trust the mkcert certificate:
$ curl --cacert "$(mkcert -CAROOT)/rootCA.pem"  
➥ -d ‘{"username":"demo","password":"password"}’ 
➥ -H ‘Content-Type: application/json’ https://localhost:4567/users
{"username":"demo"}
WARNING
Don’t be tempted to disable TLS certificate validation by passing
the -k or --insecure options to curl (or similar options in an HTTPS
library). Although this may be OK in a development environment, disabling
certificate validation in a production environment undermines the security
guarantees of TLS. Get into the habit of generating and using correct certifi-
cates. It’s not much harder, and you’re less likely to make mistakes later.
Listing 3.4
Enabling HTTPS 
Import the secure method.
Enable HTTPS support 
at the start of the main 