title:Applicability of Non-Specification-Based Approaches to Logic Testing
for Software
author:Noritaka Kobayashi and
Tatsuhiro Tsuchiya and
Tohru Kikuno
Applicability of Non-Specification-Based Approaches to 
Logic Testing for Software 
Noritaka Kobayashi, Tatsuhiro Tsuchiya and Tohru Kikuno 
Department of Informatics and Mathematical Science 
Graduate School of Engineering Science, Osaka Universit 
1-3 Machikaneyama, Toyonaka, OSAKA 560-853 1 ,  JAPAh 
E-mail: { n-kobays, t-tutiya, kikuno} @ics.es.osaka-u.zic.jp 
Abstract 
Testing is a crucial part of  the developnient of highly de- 
pendable  systems.  In  this paper we  consider testing  of  an 
implementation that is intended to satisfy a boolean forniu- 
I n   the  literature, specification-based  testing  has been 
la. 
suggested for this purpose.  Typically,  such  methods first 
hypothesize  a fault  class  and  then  generate  tests.  How- 
ever there is alniost  no research  that justifies fault classes 
proposed previously.  Moreover specifications amenable  to 
autoiiiutic test generation are not always available to testers 
in practice.  Based  011  these observations,  we  examine the 
qq,dicubi/io, of nori-specI~cntiori-based approaches,  which 
need  no spec$cation 
in  the form of  a  boolean forniula to 
create tests.  We conipare a specification-based approach to 
two non-specificatiori-based  approaches,  naniely,  random 
testing  and  conibinatorial  testing,  which  is  an  emerging 
technique  based  on conibinatorial designs.  The  results  of 
an experiment show that conibinatorial testing is often coni- 
parative to specijcation-based testing and  is always niuch 
superior to random testing. 
Key  words: 
boolean  specification, logic testing, mutation  analysis 
factor  covering  design,  software  testing, 
1  Introduction 
Software testing  plays an  important  role  in  the process 
of software development, especially  for highly dependable 
systems.  However,  exhaustive  testing  is  usually  infeasi- 
ble  because  the  number  of  possible  test  cases  is  typically 
prohibitively  large.  Much  research  has  been  aimed  at  si- 
multaneously  achieving high  efficacy  and  reduced  cost of 
testing by selecting appropriate test cases. 
In  this  paper,  we  discuss testing  of  an  implementation 
intended  to  satisfy  a  given  specification  that  is  a boolean 
formula.  We  call  this type  of testing  logic testing.  Many 
portions of  the  behavior  of  software systems  can  be  rep- 
resented  as a boolean  formula.  This fact  is  best  illustrat- 
ed by  cause-effect graphing  [20].  This technique  analyzes 
software systems by  generating graphs called  cause-effect 
graphs, which equivalently  represent  boolean  relations  be- 
tween  input  events.  Conditional  state transitions  are  also 
typical examples. 
In the literature, test generation based on a boolean spec- 
ification has been shown to be effective to logic testing.  So 
far  several  methods have  been  proposed  for automatically 
generating test  cases  [4,  11, 261.  In  these  methods,  first 
a  fault  class is  hypothesized  and  then  a test  suite  that  can 
detect faults in the class is generated  from a given  boolean 
formula.  There  are  many  application  examples to  which 
this approach  can be  applied.  For  instance, Leveson  et al. 
[ 191 proposed a formal specification technique, called RSM- 
L, that  uses a modified  Statechart  [12] notation  to specify 
TCAS 11, an aircraft collision avoidance system. Conditions 
for state transitions  in this specification  are expressed  in  a 
tabular  representation  of  a disjunctive  normal  form  called 
AND-OR table.  Cause-effect graphs [20,24], SCR [ 13, 141, 
and decision tables  [ 161 can also be used for automatic test 
generation. 
However, this approach has the following two problems. 
Firstly, fault classes  have not been  sufficiently  studied  yet; 
there is almost no research  that reasons  about faults classes 
previously  proposed. 
In  addition, because ,the difference 
between  an  implementation  and  its  specification  is the re- 
sult of  human  error, some types  of faults may  be  virtually 
impossible  to predict  in  advance.  Secondly, specifications 
that can be used for automatic test generation are not always 
available to testers in practice. Notice that RSML and SCR 
are formal  specification techniques.  In spite of the success 
of the TCAS I1 case, the  application  of these formal  tech- 
niques  is still limited.  Cause-effect  graphing has a similar 
problem. This method and related techniques are proved to 
be difficult to exploit for testers who do not have specialized 
knowledge [I].  Based on these  observations, we examine 
the  applicability  of  non-specification-based  approaches to 
0-7695-1101-5/01 $10.00 0 2001 IEEE 
337 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:02:50 UTC from IEEE Xplore.  Restrictions apply. 
1.  a(6 + ~ ) d  + e 
2. (ab)(deJ + deJ+ def)(ac(d + e)h + a(d + e)h + b(e + f)) 
3. (cd)(efgii(bc + 6d)) 
4.  ac(d + e ) h  + a(d + e)h + b(e + f) 
5. efga(bc + 6d) 
6.  (cb + a6)(cd) (gh)((ac + b d ) e ( f g  + fh)) 
-- 
7.  (ac + b d ) e ( f g  + fh) 
8. (a((. + d + e)g + a j  -t c(f + g + h + i)) + (a, + b)(c + d + e ) i )  (a,b) (cd) (ce) ( d e )  (fg) (fh) ( j i )  ( g h )  (hi) 
9. a(b + E + bc(fghi + ghi) (fglk + Gik)) + f 
10. a ( ( c +  d +  e)g + af + c ( f  + g + h + i)) + ( a  + b)(c+ d +   e ) i  
11.  (ab+a6)(cd)(gh)(jij((ac+bd)e(i+fik+?(h+  k ) ) )  
12. (ac+ bd)e(2 + g k  + j ( h  + L)) 
13. (ti6 + a6) (cd)(fg& + f g h  + fgh) m ( ( a c  + b d ) e ( f  + (i(gj + h k ) ) ) )  
14. (a,c + bd)e(f + (i(gj + h k ) ) )  
15. (,(a+  e + de ( f g h i  + ghi) (Jglk + j&)) + ( f g h i  + ghi) (fglk + $k)(h + c7b + f))(a6C + iihC + d c )  
16. a + 6 + c + Edefgh + i ( j  + k ) l  
17.  (a(d+ e + de ( f g h i  + ghi) (fglk + @ k ) )  + (fghi + ghi) (fgfk + gik)(b + criz + f)) 
18. abddef(g + g(h + 2 ) )   ( j k  + ?1  + m )  
19. abE( ( f ( g  + g(h + i)))  + f ( g  + g(h + i))dE) ( j k  + 31%) 
20. abE(f(g + g(h + i ) ) ( C f i  + d )  + f i ( j k  +?I*) 
__________---- 
Figure 1. Specifications taken from the TCAS It. 
logic testing in this paper. 
As  non-specification-based  approaches,  we  select com- 
binatorial  testing  [2, 3, 5 ,  6,  15, 27, 281  and  randoni  test- 
ing  [lo,  171.  The  combinatorial  testing  approach  uses  a 
test  suite that covers all  k-way  combinations  of parameter 
values[5, 9, 25, 281.  Such a test suite can be viewed as a k -  
factor covering design  in experimental  design theory[5, 71. 
This approach is based on the observation that a significant 
number of faults are caused by variable interactions in many 
applications. Although the effectiveness of using factor cov- 
ering designs to software testing has recently  been reported 
for a variety of applications [2, 3, 5, 15, 271, there has been 
no research  on  its applicability  to  logic  testing.  Random 
testing is the most common method for black-box testing. 
In  order to compare the effectiveness  of these three  ap- 
proaches, an empirical  evaluation has  been  performed.  In 
the evaluation, 20 of the larger boolean  formulas  from the 
specification  of TCAS I1 were  used,  as  in  [26].  Figure  1 
shows these 20 formulas. 
The remainder of this paper is organized as follows.  The 
next  section  describes  logic  testing  and  the  specification- 
Section  3  describes  the  two  non- 
based  approach. 
specification-based approaches.  The experimental  results 
are summarized in  Section 4.  Section 5  presents  our con- 
clusions. 
2  Preliminaries 
2.1  Model of Logic Testing 
As stated in the first section, various system functions can 
be represented as boolean formulae. We model testing of an 
implementation  of such a function  as follows.  Let boolean 
formulas  P  and  P’  denote  a  specification  and  its  faulty 
implementation,  respectively.  Variables in  these  formulae 
represent  input parameters that take boolean  values.  A  test 
case is an assignment of truth values to the variables.  A fault 
will be detected if and only if  with a test case, P’  evaluates 
to a different  value than  P. In  other words, if a test causes 
P e p ’  (e is exclusive-or) to evaluate to the truth value, then 
the fault will be detected. For example, let P  = u(b+C)d+e 
and  P’  = u(6 + c)d + e.  In  this case,  C  is  replaced  by  c. 
Consider  a  test  case  a  =  I , h   =  I , c  =  0 , d   =  1 :   and 
e  = 0.  This causes  P  63 P’  to  evaluate  to  1.  Hence the 
fault is detected by the test case. On the other hand, when a 
test case that causes P @ P’  to evaluate to 0 (for example, 
a  = 1 , b  = 0, c  = I ,  d  = 1 and e  = 0) is used, the  fault is 
not detected. 
Note that  a formula  with  n variables  would  require  2n 
distinct  test  cases  to guarantee  that  arbitrary  faults can  be 
detected.  However  such  exhaustive  testing  is  infeasible, 
especially one considers the number of functions to be tested 
in  an entire system.  Therefore  approaches  are required  to 
construct test  suites  that  are  substantially  smaller than  the 
exhaustive  test  suites but  sufficiently effective at detecting 
338 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:02:50 UTC from IEEE Xplore.  Restrictions apply. 
Table 1. Percentage of the size of the exhaus- 
tive test suites. 
I  SpecNo.  I  2-way  I  3-way  1  4-way  I  BMIS  I  No.  ofVar.  J 
I 
I  28.1 
18.8 
1  46.9 
I  78.1 
- 
I 
5 
Figure 2. Tests based on a 3-factor covering 
design. 
faults likely to occur. One such approach is based on boolean 
specifications  and hypothesized  fault classes.  In  the  next 
section, we explain this approach. 
2.2  Specification-Based Test Generation 
Suppose that a specification in the form of a boolean for- 
mula, P ,  is available.  Specification-based methods generate 
test cases by hypothesizing faults on the formula.  A variety 
of  fault models have been  proposed  so far [4, 18, 21, 261. 
These models include 
e  Variable Negation  Fault  (VNF): One occurrence of  a 
variable  is  replaced  by  its  negation  (e.g.  a  boolean 
variable z is replaced by 2). 
Expression  Negation  Fault  (ENF): An  expression  is 
replaced by its negation (e.g.  a boolean expression e is 
replaced  by E). 
Variable Reference  Fault (VRF): One occurrence of a 
variable is replaced by another (e.g.  a boolean variable 
z is replaced  by another variable y(#  z)). 
Operator Reference Fault (ORF): One boolean operator 
is replaced with another (e.g. z . y is replaced by 5 + y). 
Associative  Shift  Fault  (ASF): The  associativity  of 
terms is changed (e.g.  z(!l+z) is rep1aced by s.!4fz). 
Once a  particular  fault class  such as the  above  ones  is 
hypothesized for a specification, it becomes possible to gen- 
erate test cases that can detect all faults in the class. 
For  example,  in  [26], several  test  generation  methods 
based  on  this  approach  are proposed.  These  include  the 
Basic Meaningful Impact Strategy (BMIS) and its variants. 
BMIS constructs a test suite for a given boolean formula by 
hypothesizing  VNFs in the disjunctive normal  form  of the 
formula. 
19 
20 
avg 
I 
1 
I 
I 
0.3 
0.2 
7.4 
I 
1 
0.8 
I 
0.4 
1  14.3 
0.1 
0.1 
2.8 
1.6 
0.4 
8.7 
13 
14 
9.7 
3  Non-Specification-Based Approaches 
Although in the literature, it is reported that specification- 
based methods are very effective at detecting hypothesized 
faults,  it  is  impossible  to  predict  all  faults because  of  the 
nature of software faults and the lack of empirical research. 
Moreover,  specifications  in  the  form  of  boolean  formulae 
are not always available in practice.  Based on these obser- 
vations, we examine  the applicability  of the following two 
non-specification-based approaches to logic testing. 
3.1  Combinatorial Testing 
Combinatorial testing is an approach that uses a test suit- 
e that  covers  all  k-way combinations  of parameter  values. 
Such a test suite can be viewed  as a special type of a com- 
binatorial  design, called  k-factor covering design [7, 91.  In 
~i~~~~  2,  we  show a 3-factor covering design  when  there 
are five variables.  The total number of possible test cases is 
32(= 2 7 ,  while by using  this design it is possible to cover 
all 3-way variable interactions by only  15 test cases.  In this 
figure, one can  see that  for  any  three  of  the  variables,  all 
combinations  of  values,  which  are 000, 001, 010,  ! D  11 1 ,  
are covered. 
Recently,  the  effectiveness  of  using  k-factor  covering 
design to software testing has been reported  for a variety of 
applications  [2, 3, 5,  15, 271.  However this approach  has 
not been applied to logic testing. 
339 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:02:50 UTC from IEEE Xplore.  Restrictions apply. 
Table 2. Mutation scores for each method and each specification. 
I 
avg 
I 
1 
36.8 
32.4 
11  70.5 
I 
55.5 
11  79.8 
I 
69.1 
11  89.8 
I 
64.7 
11 
159.25 
I 
In this paper,  we ernploy  a heuristic  search-based algo- 
rithm proposed  in  [5] to construct factor covering  designs. 
This algorithm is adopted by an actual test generation system 
called  AETG [5].  The algorithm incrementally  constructs 
a test  suite as follow.  Assume that  n test cases have  been 
already constructed. The ( n  + I)th test case is obtained by 
first generating different candidate test cases at random and 
then  choosing one that  covers the  most  new  combinations 
of variable  values.  The  factor covering  design  shown  in 