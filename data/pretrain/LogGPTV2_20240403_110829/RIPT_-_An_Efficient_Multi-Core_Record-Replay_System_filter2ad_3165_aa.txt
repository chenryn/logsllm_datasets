title:RIPT - An Efficient Multi-Core Record-Replay System
author:Jiashuo Liang and
Guancheng Li and
Chao Zhang and
Ming Yuan and
Xingman Chen and
Xinhui Han
Poster: RIPT – An Efficient Multi-Core Record-Replay System
Jiashuo Liang
Peking University
Beijing, China
PI:EMAIL
Ming Yuan
Tsinghua University
Beijing, China
PI:EMAIL
Guancheng Li
Peking University
Beijing, China
PI:EMAIL
Xingman Chen
Tsinghua University
Beijing, China
PI:EMAIL
Chao Zhang
Tsinghua University
Beijing, China
PI:EMAIL
Xinhui Han∗
Peking University
Beijing, China
PI:EMAIL
ABSTRACT
Given the same input, a program may not behave the same in two
runs due to some non-deterministic features, e.g., context switch
and randomization. Such behaviors would cause non-deterministic
program bugs which are hard to discover or diagnose. Record-and-
replay is a promising technique to address such issues, however,
performance and transparency are the main obstacles of existing
works. In this poster, we propose a novel record-and-replay system
named RIPT. RIPT utilizes Intel Processor Trace to record control
flow information with very low overhead, and transparently cap-
tures non-deterministic sources such as system calls and signals
with a kernel module. During replay, RIPT recovers the effect of
non-deterministic events from the collected information, and makes
target programs behave the same as recorded. We evaluate it with
real-world program bugs and show that RIPT works well in practice.
CCS CONCEPTS
• Software and its engineering→ Software testing and debug-
ging.
KEYWORDS
record replay; intel processor trace
ACM Reference Format:
Jiashuo Liang, Guancheng Li, Chao Zhang, Ming Yuan, Xingman Chen,
and Xinhui Han. 2020. Poster: RIPT – An Efficient Multi-Core Record-Replay
System. In Proceedings of the 2020 ACM SIGSAC Conference on Computer and
Communications Security (CCS ’20), November 9–13, 2020, Virtual Event, USA.
ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3372297.3420021
1 INTRODUCTION
CPUs are mostly deterministic, but non-deterministic behaviors
also exist. Non-deterministic behaviors are particularly common for
multithread and multiprocess programs. Non-deterministic bugs
are hard to analyze in the traditional way, because programs may
∗Corresponding author
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-7089-9/20/11.
https://doi.org/10.1145/3372297.3420021
behave differently in two runs and these bugs only manifest them-
selves occasionally.
Record-and-replay is a type of solution to help analyze non-
deterministic program behaviors. First, a recorder runs the buggy
program for multiple times until the bug appears. Then the bug
is replayed under a replayer and it shows the same behaviors as
recorded. Therefore, record-and-replay is useful for bug reproduc-
tion and vulnerability analysis, especially in scenarios like fuzzing.
To reproduce the same behavior of a program, two types of non-
determinism events need to be recorded: input non-determinism
and order non-determinism. The former type is caused by non-
deterministic data provided by system interface, including external
files, network packets, and signals, etc. The latter is caused by
the non-deterministic execution order of different threads, which
results in non-deterministic access order of shared memory. How to
record these non-deterministic events transparently and efficiently
is a challenging problem.
In this poster, we propose a novel record-and-replay system
named RIPT. It can record Linux programs with low overhead
on commodity multi-core machines. We implement a prototype
of RIPT which is transparent to target programs and evaluate its
effectiveness on several real-world program bugs. RIPT records
input non-determinism via a Linux kernel module, which monitors
system calls and signals related to the target program. This module
is transparent to user-space programs so the behaviors of target
programs will not be disturbed. For order non-determinism, instead
of recording memory access order directly, RIPT recovers the order
during replay. RIPT recorder utilizes Intel Processor Trace (Intel
PT) [1], which is a hardware feature providing highly compact
packets containing target addresses of jump instructions and the
timestamps of control flow transfer, to get a block-level order of
instructions from different threads. RIPT replayer uses heuristic
and enumeration methods to infer memory access order based on
this information. Thanks to the efficiency of Intel PT, RIPT recorder
has a quite low overhead.
2 SYSTEM DESIGN
2.1 Overview
As shown in Figure 1, RIPT consists of three components: 1⃝ a
user-space recorder client, 2⃝ kernel-space and hardware recorders,
and 3⃝ a replayer.
First, the recorder client spawns a child process to run the user-
specified program. It also informs our recorders to start recording
Poster CCS '20, November 9–13, 2020, Virtual Event, USA2113Figure 1: RIPT design overview
the target process. In general, RIPT records input and order non-
determinisms via a kernel module and Intel PT respectively. The
kernel module hooks system interfaces to record system calls and
signals, and generates memory dump periodically, while Intel PT
traces the control flow and timing information. These records can be
replayed with our replayer even on another machine. The replayer
runs the target program by using the unicorn emulator frame-
work [7]. It replays input non-determinism based on the collected
data, and uses Intel PT packets to enumerate and check memory
access order of different threads.
In the following sections, we will present RIPT’s key methods
used to record and replay two types of non-determinism events
transparently and efficiently.
2.2 Input Non-Determinism
For input non-determinism, recorder monitors return values of
system interfaces. Existing approaches in general utilize debug-
ger attaching (e.g., ptrace) [5] and dynamic instrumentation [6]
to record input non-determinism. However, these user-space ap-
proaches fail to provide sufficient transparency. The behaviors of
target programs may be disturbed by these recorders, and malicious
programs can even use anti-debug techniques to bypass them. RIPT
records input non-determinism via a kernel module. It hooks and
records system interfaces in kernel-space, so it will not be detected
by the user-space programs.
System call is the main source of input non-determinism. It
may modify user space memory and registers depending on un-
reproducible external resources such as process ID and network
packets. RIPT kernel module hooks system calls by overwriting the
Linux system call table. The hook records any modified memory
and registers in user space, which can be further used to emulate
and reproduce the system call’s effect.
Signal received by the target process can interrupt the origi-
nal control flow and introduce non-determinism. RIPT uses the
ftrace kernel tracing framework to hook several Linux kernel func-
tions related to signal delivery. RIPT records the information about
what signal was received, when and where the control flow was
interrupted, what signal handler was called, and where the handler
returned. The above information can precisely reproduce a signal.
Other input non-determinisms (e.g., environment variables, stack
canary, non-deterministic instructions) can also be recorded by
system call and signal hooks. For example, the stack canary can be
determined by the auxiliary vector provided by the execve system
call, and rdtsc instruction can be configured to deliver a SIGSEGV
signal.
2.3 Order Non-Determinism
Order non-determinism is the most challenging part to record and
replay. Many approaches have been proposed, including chunk-
based order [8], running one thread at a time [5], cache coherence
messages [6], specially designed hardware [3], etc. However, no
existing approach can record concurrent memory accesses of user-
space programs with both high performance and good deployability.
RIPT does not directly record the order of each memory access.
Instead, it tries to infer access order from control flow and tim-
ing information provided by Intel PT. Intel PT records the target
addresses of indirect jumps (e.g., ret, jmp %rax) and conditional
jumps (e.g., jne), as well as timestamps indicating when the control
flow transfer happens. The timestamp is not precise enough to
determine the execution time of each instruction, but it gives us
a partial order of instruction blocks. Because each block runs in a
rather short time, the access order to a same memory address usu-
ally can be determined even by using only block-level timestamps.
But if a memory race appears in blocks that are overlapped in time,
Intel PT timestamps are not dense enough to decide the order.
To solve this problem, RIPT uses a method similar to ODR [2]
and iReplayer [4]. RIPT recorder periodically dumps memory of
the target program. RIPT replayer first emulates the instructions
according to their block-level order (block starting time), and detects
memory races in overlapped blocks. If a memory race is replayed in
a wrong order, it will result in a different control flow or different