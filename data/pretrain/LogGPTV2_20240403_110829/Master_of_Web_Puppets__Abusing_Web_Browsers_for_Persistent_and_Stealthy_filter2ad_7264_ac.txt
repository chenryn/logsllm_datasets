page, it has the beneﬁt of allowing multi-core utilization. As a
result, attackers can utilize multiple cores for their malicious
computations. However, web workers run in the same browser
tab as the website, and consequently, their execution is tightly
coupled with the parent tab: whenever the tab closes, the web
worker terminates as well. In addition, security-related browser
extensions can (i) monitor all trafﬁc and (ii) tamper with the
script running in the web worker.
To remedy these shortcomings, MarioNet
leverages a
different component of HTML5, namely service workers. As
described in Section II-A2, service workers are typically used
as an in-browser caching proxy, serving the user during ofﬂine
periods. In contrast to web workers, service workers run
in a separate process, completely detached from the parent
tab. In addition to service workers, we use the SyncManager
interface [45] to register background “sync registrations” for
the service worker, to keep the Servant always alive. The
tab independence and indeﬁnite lifetime properties of the
Servant provide MarioNet with persistence, allowing attackers
to carry out their malicious computation for the entire period
that a browser remains open—a major beneﬁt over existing
approaches based on web workers, which remain operational
only for the duration of a browsing session (open tab).
Another advantage of leveraging service workers is that
they conceptually operate between the browser and the remote
server. As a consequence, any security monitoring performed
by browser extensions cannot monitor the activity and network
communication of the service worker, allowing the Servant
to operate in a stealthy way. Consequently, the Servant can
establish a communication channel with the remote Puppeteer
that no browser extension can snoop. In addition, the established
communication channel is TLS-encrypted (as required by
the service worker API [19]), ensuring the integrity and
conﬁdentiality of the transmitted data. Consequently the C&C
communication channel cannot be inspected by any eavesdrop-
ping third party sitting either (i) inside (e.g., browser extension)
or (ii) outside (e.g., ISP) of the browser.
The only request that reveals the existence of the service
worker is the initial GET request at the time of the user’s ﬁrst
website visit, when the service worker gets initially registered.
Although during that GET request a monitoring extension can
observe the contents of the service worker, it will still not
observe any suspicious code—the code that will carry out the
malicious tasks is delivered to the Servant only after its ﬁrst
communication with the Puppeteer, and this communication is
hidden from browser extensions (as discussed in Section II-B)
Along with the evasiveness of MarioNet against monitoring
and blocking extensions, it is also important to maintain its
stealthiness to avoid detection from users themselves. Existing
web-based botnet approaches [13], [54] follow an opportunistic
approach, utilizing greedily all available resources on the device
during their limited period of activity. When browsers run such
a malicious script, the louder noise of the fans, the sudden
power drainage, or the sluggish responsiveness of their system,
alerts users who are likely to close the associated browser tab,
or even report the website to their blocker extension.
In contrast to existing in-browser attacks, MarioNet aims to
prolong its presence on a user’s device by allowing the attacker
to monitor the device’s state at real time, and adjust accordingly
the resources utilization to minimize the possibility of getting
detected. To that end, the Servant monitors the device’s current
status (e.g., CPU utilization, battery status) and by utilizing
HTML5’s high-resolution performance timers [72], throttles
or even pauses the execution of the malicious workload. This
allows it to minimize the risk of self-exposure in case there is
a CPU capping mechanism in the browser [8].
Persistence across Browser Reboots: MarioNet runs in the
background as long as the browser is open. After that, the victim
has to re-visit the malicious domain or render the malicious
iframe where the malicious domain resides, in order to re-
activate the service worker and allow the Servant to continue
its operation. To increase persistence even further, we have
developed a technique that allows MarioNet to persist even
after the browser has been restarted. This can be achieved by
utilizing the Push API [44]. This feature allows a web server
to deliver asynchronous notiﬁcations and updates to service
workers, in an attempt to provide users with better engagement
and timely new content. By abusing this mechanism, MarioNet
can enable the Puppeteer to periodically probe its Servants and
re-activate them after the browser restarts.
In contrast to the non-transparent to user process of service
worker registration, security policies in modern browsers restrict
the use of the Push notiﬁcations feature only after the user’s
permission. Of course, some users may get suspicious on
that behavior, depending on the website they visit. However,
an advanced attacker can convince reluctant users to give
their consent for push notiﬁcations by advertising enticing
offers (e.g., virtual points or participation to contests) or by
performing more advanced types of social engineering using
custom permission requesting popups. Recent studies have
shown that 12% of users give such permissions when they are
6
(a)
(b)
(c)
Fig. 2: Different use cases of MarioNet. After victims get compromised, the attacker can instrument them to perform (a) visits to
a selected server or URL, for DDoS attack or fake ad-impressions, (b) requested computations, such as cryptocurrency mining or
password cracking, and (c) illegal services, such as illicit ﬁle hosting or hidden/anonymized communications.
asked to [3], which constitutes a fairly large number of nodes,
sufﬁcient for deploying a persistent botnet that is capable to
survive browser reboots.
V. ATTACK VECTORS
Our design, described in Section IV, opens the space for
a diverse set of attacks in users’ web browsers, which can be
categorized in three models, as shown in Figure 2.
A. DDoS Attacks
A simple yet powerful attack that can be launched with the
devices the attacker controls is a Distributed Denial-of-Service
attack. In MarioNet we implemented a DDoS attack module
enabling the Puppeteer to instruct the Servants to connect to
a speciﬁc Internet host. As a result, the targeted host will get
overwhelmed by the large amount of connections and thus
become non-responsive to benign users.
A limitation of using a high-level
language, such as
JavaScript, to initiate a DoS attack is that it does not provide
low level networking access. Directly manipulating the network
packets to be sent is thus not an option (e.g., force TCP-SYN
packets only, or spoof source network address). In addition, it
results to much higher latency, due to the extra memory copies
and context switches that are caused from the resulting system
calls. Instead, JavaScript offers more high-level approaches,
such as XMLHttpRequest objects [48] or methods provided
by cross-platform libraries (e.g., the get(), post(), and
ajax() methods provided by jQuery). These methods can
be used to perform HTTP GET and POST requests, either
synchronously (i.e., in a blocking fashion, waiting for the
connection to be established) or asynchronously. In addition,
some methods may return cached responses (e.g., the get()
method provided by jQuery).
In order to increase the DDoS ﬁre power of MarioNet,
we use the XMLHttpRequest API, which can be used
to perform AJAX (asynchronous HTTP) requests, and does
not cache any responses. Moreover, it allows to control the
request method, and set an arbitrary HTTP body, as well
as some HTTP request headers (e.g., the request content
type). One concern though, that we already mentioned in
Section II-A4, is that if the target web server does not enable the
Access-Control-Allow-Origin:* header, the request
will not fetch any content. Even in that case though, the attack
can still succeed, as it does not necessarily rely on forcing the
web server to send a response. As long as the requests are
sent, the incoming network link is ﬁlling up and also the server
needs to spend resources to handle the incoming requests.
Apart from HTTP fetching mechanisms, HTML5’s Web-
Sockets API [47] provide additional opportunities. WebSockets
can be used to send messages to a WebSocket-enabled server
over TCP and receive event-driven responses. Obviously, to
mount a DoS attack using WebSockets, the targeted server
needs to implement this protocol; this is indeed the case for
many popular web sites, as well as for smaller ones, which
increasingly adopt the WebSockets protocol. Besides that, as
already has been shown in [58], malicious JavaScript code may
still misuse the handshake by requesting resources even by
targeting a non-WebSocket web server. Although the targeted
web server may ignore the characteristic WebSocket HTTP
headers (as it is not supported), it can still accept WebSocket
handshake HTTP requests as normal HTTP requests [58]. As a
result, the web browser will start the WebSocket handshake with
the target, while the non-WebSocket web server will process
the HTTP request as a valid request. In MarioNet, we use
the WebSocket() method to initiate connections with web
servers, and then the send() method to send a ﬂood of data
to the targeted server.
Using XMLHttpRequest.send(), jQuery’s ajax()
and WebSocket’s send() methods, we can continuously send
a ﬂood of messages to a targeted host. Each approach allows
MarioNet to connect to any host, by specifying the hostname
or IP address and the corresponding port number. By doing so,
JavaScript code can misuse the TCP handshake by requesting
connections even to non-HTTP or non-WebSocket servers. In
those cases, the targeted servers will either receive only the
TCP SYN packets (e.g., when the destination port is in a closed,
reject, or drop state), or the full HTTP request. Furthermore,
7
TargetPuppeteerBotnetdo visit Target visit Target Botnetdo computereturn resultPuppeteerPuppeteerBotnetHost AHost Cfetch fileusing magnettalkwith AHost Btalkwith Bthe WebSocket API allows to open many different connections,
which enables attackers to orchestrate different styles of attacks
(e.g., stealthy, low-volume, etc.). For instance, it allows to
perform Slowloris-like attacks, by keeping many connections
to the target server open as long as possible [9].
Of course, MarioNet cannot send messages to any port at
the targeted host. To avoid Cross-protocol Scripting [69], which
allowed the transmission of arbitrary data to any TCP port,
modern browsers block by default outgoing messages to a list of
reserved ports [42]. Finally, we note that the resulting network
performance of JavaScript is not that high, compared to DoS
attack tools that can leverage direct access to OS internals (i.e.,
memory map techniques between the network interface and the
application) and low-level APIs (i.e., raw sockets). However,
this is not a serious limitation, as it has been shown that short,
low-volume DDoS attacks pose a great security and availability
threat to businesses [71].
B. Cryptocurrency Mining
The rise of lightweight cryptocurrencies, such as JSEcoin
and Monero, together with the features of Web Workers API
that have been described in Section II, have recently enabled
the widespread adoption of cryptocurrency mining on the Web.
As a result, attackers have started migrating mining algorithms
to JavaScript and embed them to regular websites, in the form
of web worker tasks. By doing so, the website visitors become
mining bots unwittingly every time they access these websites.
However, the short website visiting times make the prof-
itability of the web workers approach questionable [65]. Instead,
MarioNet increases the potential proﬁts of web cryptocurrency
mining, due to the background execution it offers, completely
detached from the website. As a matter of fact, we have
implemented a service worker module that computes hashes of
the popular CryptoNight algorithm [11]. CryptoNight is a proof-
of-work (PoW) algorithm used in several cryptocurrencies,
such as Electroneum (ETN) and Monero (XMR). The service
worker that we have implemented within MarioNet, connects
with Coinhive [10], which is a web service that provides an
API for users to embed a JavaScript miner on their websites.
Alternatively, the cryptocurrency miner can connect to any
mining pools,
through the HTTP stratum proxy, using a
registered account, as shown in previous works [54]. By doing
so, attackers will be credited the payout directly to their wallets.
Finally, we notice that other hash algorithms that are used for
cryptocurrency mining, such as Scrypt-based miners [7], can
be implemented in a straightforward way by porting their
implementations to JavaScript.
C. Distributed Password Cracking
The idea of distributed password hash cracking on the
web is not new [4]. Orthogonal to other approaches that try
to boost the sustained performance by either increasing the
parallelism using different web workers [13], or exploiting
the computational capabilities of modern GPUs using the We-
bGL/WebCL API [52], MarioNet can help towards increasing
the uptime of hash cracking techniques, and as a result the
overall performance.
The basic concept in MarioNet is to have the Puppeteer
distribute the computation between the infected browsers. The
server contains a list of the hashes to be cracked and gives
each node a range of character combinations along with the
hash to be cracked. Each node then hashes these combinations
and checks if it matches the original hash; if it matches, the
node reports the recovered password back to the Puppeteer. A
major advantage of MarioNet is that it can be agnostic to the
hashing function used, since the function code is transferred
from the Puppeteer and executed from the MarioNet nodes
through eval(). As a matter of fact, in Figure 7 we show the
performance achieved by MarioNet for executing two popular
hashing algorithms, namely SHA-256 and MD5.
D. Malicious or Illegal Data Hosting
Having a large network of MarioNet nodes can also enable
the delivery of illegal or otherwise unwelcome content. The
advantages of MarioNet is not only that the content can be
served by unsuspecting users, making it hard to track down the
real culprits behind it, but also allows efﬁcient data distribution
between the MarioNet nodes.
Indeed, the release of WebRTC (Web Real-Time Communi-
cations) protocol in the browser a few years ago, enables peer-to-
peer networking communications. In particular, WebRTC allows
web applications and sites to capture and optionally stream
audio and/or video media, as well as to exchange arbitrary
data between browsers without requiring an intermediary. Even
though this technology opens new opportunities for distributed
networking to the web, it also brings some signiﬁcant security
concerns when used maliciously. In the case of MarioNet, for
instance, it could be easily used as an illegal content provider,
leveraging the distributed nature and persistence that offers. As
a proof-of-concept, similar to [13] we used the WebTorrent
API [16] to implement a simple, yet ﬂexible, data hosting
mechanism over WebRTC which allows the sharing of torrent
ﬁles through the infected MarioNet nodes. WebTorrent allows
users to seed and leech ﬁles with other peers entirely through
their web browsers. A new torrent ﬁle can easily be created
using the seed() function which creates a new torrent and
starts seeding it. The ﬁle can then be downloaded and further
seeded from other nodes, using the returned magnetURI.
E. Other Attacks
1) Relay Proxies: Fully anonymous and transparent relay
proxies that can route data between two peers, are an important
asset for criminal use, making it difﬁcult for the authorities to
track down the perpetrators. Large groups of such proxies can
form a hidden network (i.e., Darknet), where people buy and
sell illicit products like weapons and drugs [12].
The MarioNet infrastructure can provide a platform for
establishing such networks. Speciﬁcally, an infected browser
can be used as an intermediate proxy to fetch illegal content
from services in the Darknet on behalf of an anonymous
user. Indeed, building upon the previous illegal data hosting
scenario, MarioNet could form anonymous circuits (similar to