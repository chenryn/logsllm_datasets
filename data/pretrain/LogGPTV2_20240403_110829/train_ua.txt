### Information and Reporting Bugs

For information on reporting bugs and to access the latest version of this page, please visit:
\%https://www.kernel.org/doc/man\-pages/

### License Information

This document is free; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation. You may use either version 2 of the license or (at your option) any later version.

The GNU General Public License's references to "object code" and "executables" are to be interpreted as the output of any document formatting or typesetting system, including intermediate and printed output.

This manual is distributed in the hope that it will be useful, but without any warranty; without even the implied warranty of merchantability or fitness for a particular purpose. For more details, see the GNU General Public License. You should have received a copy of the GNU General Public License along with this manual; if not, see [GNU General Public License](https://www.gnu.org/licenses/).

### Repertoiremap

**Name:**
repertoiremap - Map symbolic character names to Unicode code points

**Description:**
A repertoire map defines mappings between symbolic character names (mnemonics) and Unicode code points when compiling a locale with `localedef(1)`. Using a repertoire map is optional and is only needed when symbolic names are used instead of the preferred Unicode code points.

**Syntax:**
- The repertoiremap file starts with a header that may include the following keywords:
  - `comment_char`: Followed by a character used as the comment character for the rest of the file. The default is the number sign (`#`).
  - `escape_char`: Followed by a character used as the escape character for the rest of the file to mark characters that should be interpreted in a special way. The default is the backslash (`\`).

- The mapping section begins with the keyword `charids` in the first column.
- Mapping lines have the following form:
  - `comment`: This defines exactly one mapping, where `comment` is optional.
- The mapping section ends with the string `end charids`.

**Files:**
- `/usr/share/i18n/repertoiremaps`: Usual default repertoire map path.

**Conforming to:**
POSIX.2

**Notes:**
Repertoire maps are deprecated in favor of Unicode code points.

**Examples:**
A mnemonic for the euro sign can be defined as follows:
```
euro sign
```

**See Also:**
- `locale(1)`
- `localedef(1)`
- `charmap(5)`
- `locale(5)`

### Colophon

This page is part of release 5.13 of the Linux `man-pages` project. For a description of the project, information about reporting bugs, and the latest version of this page, visit:
\%https://www.kernel.org/doc/man\-pages/

### Strpbrk

**Name:**
strpbrk - Search a string for any of a set of bytes

**Synopsis:**
```c
#include <string.h>

char *strpbrk(const char *s, const char *accept);
```

**Description:**
The `strpbrk()` function locates the first occurrence in the string `s` of any of the bytes in the string `accept`.

**Return Value:**
The `strpbrk()` function returns a pointer to the byte in `s` that matches one of the bytes in `accept`, or `NULL` if no such byte is found.

**Attributes:**
For an explanation of the terms used in this section, see `attributes(7)`.

| Interface | Attribute | Value |
|-----------|-----------|-------|
| `strpbrk()` | Thread safety | MT-Safe |

**Conforming to:**
POSIX.1-2001, POSIX.1-2008, C89, C99, SVR4, 4.3BSD.

**See Also:**
- `index(3)`
- `memchr(3)`
- `rindex(3)`
- `strchr(3)`
- `string(3)`
- `strsep(3)`
- `strspn(3)`
- `strstr(3)`
- `strtok(3)`
- `wcspbrk(3)`

### Query_module

**Name:**
query_module - Query the kernel for various bits pertaining to modules

**Synopsis:**
```c
#include <linux/module.h>

int query_module(const char *name, int which, void *buf, size_t bufsize, size_t *ret);
```
**Note:**
No declaration of this system call is provided in glibc headers; see notes.

**Description:**
**Note:**
This system call is present only in kernels before Linux 2.6.

The `query_module()` system call requests information from the kernel about loadable modules. The returned information is placed in the buffer pointed to by `buf`. The caller must specify the size of `buf` in `bufsize`. The precise nature and format of the returned information depend on the operation specified by `which`. Some operations require `name` to identify a currently loaded module, while others allow `name` to be `NULL`, indicating the kernel proper.

The following values can be specified for `which`:
- **0**: Returns success if the kernel supports `query_module()`. Used to probe for availability of the system call.
- **QM_MODULES**: Returns the names of all loaded modules. The returned buffer consists of a sequence of null-terminated strings; `ret` is set to the number of modules.
- **QM_DEPS**: Returns the names of all modules used by the indicated module. The returned buffer consists of a sequence of null-terminated strings; `ret` is set to the number of modules.
- **QM_REFS**: Returns the names of all modules using the indicated module. This is the inverse of `QM_DEPS`. The returned buffer consists of a sequence of null-terminated strings; `ret` is set to the number of modules.
- **QM_SYMBOLS**: Returns the symbols and values exported by the kernel or the indicated module. The returned buffer is an array of structures of the following form:
  ```c
  struct module_symbol {
      unsigned long value;
      unsigned long name;
  };
  ```
  followed by null-terminated strings. The value of `name` is the character offset of the string relative to the start of `buf`; `ret` is set to the number of symbols.
- **QM_INFO**: Returns miscellaneous information about the indicated module. The output buffer format is:
  ```c
  struct module_info {
      unsigned long address;
      unsigned long size;
      unsigned long flags;
  };
  ```
  where `address` is the kernel address at which the module resides, `size` is the size of the module in bytes, and `flags` is a mask of `MOD_RUNNING`, `MOD_AUTOCLEAN`, and so on, that indicates the current status of the module (see the Linux kernel source file `include/linux/module.h`). `ret` is set to the size of the `module_info` structure.

**Return Value:**
On success, zero is returned. On error, `-1` is returned, and `errno` is set to indicate the error.

**Errors:**
- **EFAULT**: At least one of `name`, `buf`, or `ret` was outside the program's accessible address space.
- **EINVAL**: Invalid `which`; or `name` is `NULL` (indicating "the kernel"), but this is not permitted with the specified value of `which`.
- **ENOENT**: No module by that `name` exists.
- **ENOSPC**: The buffer size provided was too small. `ret` is set to the minimum size needed.
- **ENOSYS**: `query_module()` is not supported in this version of the kernel (e.g., the kernel is version 2.6 or later).

**Versions:**
This system call is present on Linux only up until kernel 2.4; it was removed in Linux 2.6.

**Conforming to:**
`query_module()` is Linux-specific.

**Notes:**
Some of the information that was formerly available via `query_module()` can be obtained from `/proc/modules`, `/proc/kallsyms`, and the files under the directory `/sys/module`.

The `query_module()` system call is not supported by glibc. No declaration is provided in glibc headers, but, through a quirk of history, glibc does export an ABI for this system call. Therefore, in order to employ this system call, it is sufficient to manually declare the interface in your code; alternatively, you can invoke the system call using `syscall(2)`.

**See Also:**
- `create_module(2)`
- `delete_module(2)`
- `get_kernel_syms(2)`
- `init_module(2)`
- `lsmod(8)`
- `modinfo(8)`

### Iswctype

**Name:**
iswctype - Wide-character classification

**Synopsis:**
```c
#include <wctype.h>

int iswctype(wint_t wc, wctype_t desc);
```

**Description:**
If `wc` is a wide character having the character property designated by `desc` (or in other words: belongs to the character class designated by `desc`), the `iswctype()` function returns a non-zero value. Otherwise, it returns zero. If `wc` is `WEOF`, zero is returned.

`desc` must be a character property descriptor returned by the `wctype(3)` function.

**Return Value:**
The `iswctype()` function returns a non-zero value if `wc` has the designated property. Otherwise, it returns 0.

**Attributes:**
For an explanation of the terms used in this section, see `attributes(7)`.

| Interface | Attribute | Value |
|-----------|-----------|-------|
| `iswctype()` | Thread safety | MT-Safe |

**Conforming to:**
POSIX.1-2001, POSIX.1-2008, C99.

**Notes:**
The behavior of `iswctype()` depends on the `LC_CTYPE` category of the current locale.

**See Also:**
- `iswalnum(3)`
- `iswalpha(3)`
- `iswblank(3)`
- `iswcntrl(3)`
- `iswdigit(3)`
- `iswgraph(3)`
- `iswlower(3)`
- `iswprint(3)`
- `iswpunct(3)`
- `iswspace(3)`
- `iswupper(3)`
- `iswxdigit(3)`
- `wctype(3)`

### ARP

**Name:**
arp - Linux ARP kernel module

**Description:**
This kernel protocol module implements the Address Resolution Protocol (ARP) defined in RFC 826. It is used to convert between Layer 2 hardware addresses and IPv4 protocol addresses on directly connected networks. The user normally doesn't interact directly with this module except to configure it; instead, it provides a service for other protocols in the kernel.

A user process can receive ARP packets by using `packet(7)` sockets. There is also a mechanism for managing the ARP cache in user-space by using `netlink(7)` sockets. The ARP table can also be controlled via `ioctl(2)` on any `AF_INET` socket.

The ARP module maintains a cache of mappings between hardware addresses and protocol addresses. The cache has a limited size, so old and less frequently used entries are garbage-collected. Entries marked as permanent are never deleted by the garbage-collector. The cache can be directly manipulated by the use of `ioctl`s and its behavior can be tuned by the `/proc` interfaces described below.

When there is no positive feedback for an existing mapping after some time, the entry may be removed from the cache.