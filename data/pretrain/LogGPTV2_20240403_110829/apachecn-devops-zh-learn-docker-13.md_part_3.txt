不出所料，我们得到了回应`Pets Demo Application`。
现在我们可以部署`green`版本的 web 组件了。其`Deployment`对象的定义可以在`labs/ch13/web-deploy-green.yaml`文件中找到，如下所示:
![](img/59741a58-b867-4d39-8483-4338e6bcca2c.png)
Specification of the deployment green for the web component
有趣的台词如下:
*   **4 号线**:用`web-green`来区别于`web-blue`，允许并联安装
*   **第 11、17 行**:有颜色`green`
*   **第 20 行**:现在使用版本`2.0`的图片
现在我们准备部署这个`green`版本的服务，它应该与`blue`服务分开运行:
```
$ kubectl create -f web-deploy-green.yaml
```
我们可以确保两种部署共存:
![](img/67b42319-a85b-4165-bc3a-41ef340eb2a4.png)
Displaying the list of Deployment objects running in the cluster
不出所料，我们同时运行了`blue`和`green`。我们可以证实`blue`仍然是现役军人:
```
$ curl -4 ${IP}:${PORT}/
Pets Demo Application
```
有趣的部分来了。我们可以通过编辑 web 组件的现有服务，将流量从`blue`翻转到`green`。因此，执行以下命令:
```
$ kubectl edit svc/web
```
将标签`color`的值从`blue`更改为`green`。然后保存并退出编辑器。Kubernetes 命令行界面将自动更新服务。当我们现在再次查询 web 服务时，我们会得到这样的结果:
```
$ curl -4 ${IP}:${PORT}/
Pets Demo Application v2
```
这确认了流量确实已经切换到了 web 组件的`green`版本(注意对`curl`命令的响应末尾的`v2`)。
如果我们意识到我们的绿色部署出了问题，并且新版本有缺陷，我们可以通过再次编辑服务网站并将标签颜色的值从`green`替换回`blue`来轻松切换回`blue`版本。这种回滚是即时的，应该总是有效的。然后，我们可以移除有问题的绿色部署并修复组件。当我们纠正了问题后，我们可以再次部署`green`版本。
一旦组件的`green`版本按预期运行并表现良好，我们就可以停用`blue`版本:
```
$ kubectl delete deploy/web-blue
```
当我们准备部署新版本 3.0 时，这个版本就变成了蓝色版本。我们相应地更新`labs/ch13/web-deploy-blue.yaml`文件并部署它。然后我们将服务网站从`green`翻转到`blue`，以此类推。
我们已经成功地用我们的 pets 应用组件`web`演示了如何在 Kubernetes 集群中实现蓝绿色部署。
# 不可告人的机密
有时，我们希望在 Kubernetes 集群中运行的服务必须使用机密数据，例如密码、机密 API 密钥或证书，仅举几例。我们希望确保这些敏感信息只能被授权或专门的服务机构看到。群集中运行的所有其他服务都不应对此数据有任何访问权限。
为此，引入了 Kubernetes 的机密。机密是密钥-值对，其中密钥是机密的唯一名称，值是实际的敏感数据。机密储存在 etcd 里。Kubernetes 可以配置为在静止时(即在 etcd 中)和传输时(即当机密从主节点通过线路传输到运行使用该机密的服务的 pods 的工作节点时)对机密进行加密。
# 手动定义机密
我们可以像在 Kubernetes 中创建任何其他对象一样，声明性地创建一个机密。下面是 YAML 的这么一个机密:
```
apiVersion: v1
kind: Secret
metadata:
  name: pets-secret
type: Opaque
data:
  username: am9obi5kb2UK
  password: c0VjcmV0LXBhc1N3MHJECg==
```
前面的定义可以在`labs/ch13/pets-secret.yaml `文件中找到。现在你可能想知道价值是什么。*这些是真实的(未加密的)值吗？*不，他们不是。它们也不是真正的加密值，只是`base64`编码值。因此，它们并不真正安全，因为 base64 编码的值可以很容易地还原为明文值。*我是怎么得到这些价值观的？*这很简单:
![](img/2ac016ad-02f0-40f1-82b0-e68aeee7e377.png)
Creating base64-encoded values for the secret
然后我们可以创造机密并描述它:
![](img/69ce2b25-8f73-4cd9-a8f3-50a67f043560.png)
Creating and describing the Kubernetes secret
在机密的描述中，值是隐藏的，只给出了它们的长度。*那么也许机密现在安全了？*不，不是真的。我们可以使用`kubectl get`命令轻松破解这个机密:
![](img/e47f3f22-9633-465b-af2d-5ecf78b573c3.png)
Kubernetes secret decoded
正如我们在前面的截图中看到的，我们恢复了原来的机密值。我们可以解码它们:
```
$ echo "c0VjcmV0LXBhc1N3MHJECg==" | base64 --decode
sEcret-pasSw0rD
```
因此，结果是这种创建 Kubernetes 的方法不能用于开发之外的任何环境，在开发环境中，我们处理非敏感数据。在所有其他环境中，我们需要一种更好的方式来处理机密。
# 用 kubectl 创造机密
更安全的定义机密的方法是使用`kubectl`。首先，我们创建包含 base64 编码机密值的文件，类似于我们在前面部分中所做的，但是这次我们将这些值存储在临时文件中:
```
$ echo "sue-hunter" | base64 > username.txt
$ echo "123abc456def" | base64 > password.txt
```
现在我们可以使用`kubectl`从这些文件中创建一个机密，如下所示:
```
$ kubectl create secret generic pets-secret-prod \
 --from-file=./username.txt \
 --from-file=./password.txt
secret "pets-secret-prod" created
```
这个机密可以像手动创建的机密一样使用。
*为什么这个方法比你可能会问的另一个方法更安全？*嗯，首先，没有 YAML 定义了一个机密，并存储在一些源代码版本控制系统中，比如 GitHub，很多人都可以访问它，所以可以看到和解码这个机密。只有被授权知道机密的管理员才能看到它们的值，并使用它们在(生产)集群中直接创建机密。集群本身受到基于角色的访问控制的保护，因此没有未经授权的人可以访问它，也不可能解码集群中定义的机密。
但是现在，让我们看看我们如何实际使用我们已经定义的机密。
# 在豆荚里使用机密
假设我们想要创建一个`Deployment`对象，其中`web`组件使用我们在前面部分中介绍的名为`pets-secret`的机密。我们使用以下命令在集群中创建机密:
```
$ kubectl create -f pets-secret.yaml
```
在`labs/ch13/web-deploy-secret.yaml`文件中，我们可以找到`Deployment`对象的定义。我们必须将从第 23 行开始的部分添加到`Deployment`对象的原始定义中:
![](img/f99c315a-0590-4f70-b951-a76b4f44d2e6.png)
Deployment object for web component with a secret
在第 27 行到第 30 行，我们根据我们的机密`pets-secret`定义了一个名为`secrets`的体积。然后我们在容器中使用这个体积，如第 23 行到第 26 行所述。我们在`/etc/secrets`的容器文件系统中装载机密，并以只读模式装载卷。因此，机密值将作为所述文件夹中的文件对容器可用。文件的名称将对应于键名，文件的内容将是对应键的值。这些值将以未加密的形式提供给容器内运行的应用。
在我们的例子中，密钥的用户名和密码在机密中，我们将在容器文件系统的`/etc/secrets`文件夹中找到两个文件，名为`username`和`password`。文件`username`应该包含值`john.doe`，文件`password`应该包含值`sEcret-pasSw0rD`。以下是确认:
![](img/1795b678-699c-4423-8f32-45e443a69234.png)
Confirming that secrets are available inside the container
在前面输出的第 1 行，我们执行到 web 组件运行的容器中。然后，在第 2 行到第 5 行，我们列出了`/etc/secrets`文件夹中的文件，最后，在第 6 行到第 8 行，我们显示了两个文件的内容，不出所料，这两个文件以明文形式显示了机密值。
因为用任何语言编写的任何应用都可以读取简单的文件，所以这种使用机密的机制是非常向后兼容的。即使是旧的 Cobol 应用也可以从文件系统中读取明文文件。
然而，有时应用期望机密在环境变量中可用。让我们看看在这种情况下 Kubernetes 为我们提供了什么。
# 环境变量中的机密值
假设我们的 web 组件需要环境变量`PETS_USERNAME`中的用户名和`PETS_PASSWORD`中的密码，那么我们可以修改我们的部署 YAML，如下所示:
![](img/a35f257e-d2ae-4c39-8edc-11b857f37ef5.png)
Deployment mapping secret values to environment variables
在第 23 行到第 33 行，我们定义了两个环境变量`PETS_USERNAME`和`PETS_PASSWORD`，并将`pets-secret`对应的键值对映射到它们。
注意，我们不再需要卷了，但是我们直接将`pets-secret`的各个键映射到容器内有效的相应环境变量中。下面的命令序列表明，机密值确实在容器内部的各个环境变量中可用:
![](img/57b8292c-c9da-496f-8cb3-776cf6da3c7b.png)
Secret values are mapped to environment variables
在本节中，我们展示了如何在 Kubernetes 集群中定义机密，以及如何在作为部署的一部分运行的容器中使用这些机密。我们展示了如何在容器中映射机密的两种变体，第一种使用文件，第二种使用环境变量。
# 摘要
在本章中，我们学习了如何将应用部署到 Kubernetes 集群中，以及如何为此应用设置应用级路由。此外，我们还学习了更新运行在 Kubernetes 集群中的应用服务而不导致任何停机的方法。最后，我们使用机密向集群中运行的应用服务提供敏感信息。
在下一章也是最后一章，我们将学习如何使用云供应商提供的不同产品在云中运行容器化的示例应用，例如微软 Azure、亚马逊 AWS 和谷歌云。敬请关注。
# 问题
要评估您的学习进度，请回答以下问题:
1.  您有一个由两个服务组成的应用，第一个是网络应用编程接口，第二个是数据库，比如 Mongo。您希望将该应用部署到 Kubernetes 集群中。用几句简短的话，解释你是如何进行的。
2.  用自己的话用几句话描述为应用建立第 7 层(或应用级)路由所需的组件。
3.  列出为简单应用服务实现蓝绿色部署所需的主要步骤。避免讲太多细节。
4.  说出您将通过 Kubernetes secrets 向应用服务提供的三四种类型的信息。
5.  说出 Kubernetes 在创建机密时接受的来源。
# 进一步阅读
以下几个链接提供了有关本章中讨论的主题的附加信息:
*   在[https://bit.ly/2o2okEQ](https://bit.ly/2o2okEQ)执行滚动更新
*   蓝绿部署在[https://bit.ly/2r2IxNJ](https://bit.ly/2r2IxNJ)
*   https://bit.ly/2C6hMZF Kubernetes 的机密