subspace. The OS should provide built-in “jail” function-
ality which can be invoked via an API call, as opposed to
requiring AdSDK developers to manually write code for
intercepting ﬁle requests and interpreting ﬁle paths.
Another approach is used by iOS, where each app’s
ﬁles are located under a ﬁle path with a random 128-
bit universally unique identiﬁer (UUID) [7]. Assuming
the identiﬁer does not leak to the attacker, this prevents
inference attacks described in this paper.
12
In the long term, we believe that mobile OSes would
beneﬁt from a principled re-engineering of the mobile
software stack. The re-designed OS would provide secure,
full-stack containers for untrusted mobile content
that
extend all the way to storage systems, eliminating the
current use of external storage as a kind of shared ﬁle
cache for all apps. These containers would provide an
isolated execution environment for the entire functionality
required by media-rich ads: rendering, caching, storage,
etc. Effectively, each ad impression would be treated as
if it were a separate app with dedicated storage and no
access rights outside that storage. We leave the design and
implementation of such containers to future work.
VIII. Related work
There is a large body of work on direct and side-channel
attacks that can be performed by malicious Android apps
to steal other apps’ secrets [10, 28, 30, 40, 49, 57]. All
of these papers assume that the victim has installed a
malicious app on his or her device. By contrast, the attacks
described in this paper are performed solely via mobile ads,
without running any malicious app code.
We argue that the threats from malicious ads are broader
in scope and have bigger impact
than the previously
described threats from malicious apps. First, virtually any
advertising-supported mobile app can be exploited by a
malicious advertiser to attack other apps via the local
resource oracle. For example, 41% of Android apps in the
Google Play Store use AdMob [6], one of the vulnerable
AdSDK in our study. Second, users have very little control
over the ads shown to them, as opposed to the apps
installed on their devices. Finally, many malicious apps
can be blocked by app stores, whereas dynamic ﬁltering
of malicious ads is more challenging.
Several studies investigated the leakage of users’ in-
formation to mobile advertising libraries and the risks
of abusive and overprivileged AdSDKs [9, 22, 46]. As
we explained in Section III-C, most modern AdSDKs
do not intentionally reveal all information they collect to
advertisers and in fact take great care to isolate ads from
the host app and the AdSDK. Therefore, no conclusions
can be drawn from these studies about the leakage of users’
information to mobile ads. To the best of our knowledge,
ours is the ﬁrst study to investigate this issue.
AdDroid [37] and AdSplit [43] are proposals to separate
advertising functionality from mobile apps so as not to
overprivilege advertising libraries. Neither would prevent
the attacks described in this paper. As long as media-rich
ads on Android require access to external storage, which
is essential for performance and caching, the direct and
indirect inference mechanisms will remain feasible even if
the privileges of the ads are separated from the host app.
AdJail [47] protects Web content from malicious adver-
tising by assigning a different origin to ads and leveraging
browser support for CSP. This solution does not translate
to mobile advertising without signiﬁcant changes to the
Android OS, such as propagating origin information to
individual objects in the device’s external storage.
Wu and Chang showed how to steal ﬁles from mobile
devices by exploiting how mobile browsers interpret SOP
for ﬁle-scheme origins [53], in particular, the fact that
old versions of Android’s WebView treat all ﬁle-scheme
URIs as the same origin. This attack is similar to the
direct ﬁle-reading vulnerability in AdMarvel described in
Section IV-B. To the best of our knowledge, the local
resource oracle and the inference attacks it enables have
never been reported before. These indirect attacks work
regardless of how the same origin policy is implemented
in WebView, including the latest implementations that have
ﬁxed the vulnerability described in [53].
Wu and Chang also applied their attacks to iOS de-
vices [54] and showed that UIWebView, the iOS counter-
part of Android’s WebView, allows Web content to read
sensitive ﬁles. In iOS, the path to each app’s ﬁles includes
a random 128-bit UUID [7]. Therefore, the attacker should
not be able to infer the paths to sensitive ﬁles, which
differ from device to device. The exploits described by
Wu and Chang involve users explicitly consenting to open
malicious JavaScript ﬁles with vulnerable iOS applications.
Our inference attacks based on the local resource oracle
do not involve user interaction but require exact paths to
sensitive ﬁles. Therefore, unlike on Android, they cannot
be used to attack a large number of iOS devices unless the
attacker can learn application UUIDs on targeted devices.
To protect location data, LP-Guardian [17] coarsens
locations by adding noise and lets users designate apps that
require protection. Zhang et al. focus on side-channel leaks
and propose an application-level monitor that prevents
background processes from collecting privacy-sensitive
information [56]. This defense does not protect against
AdSDKs that openly send location data over the network,
nor against mobile ads that run in the foreground.
Several proposed systems aim to help users make in-
formed decisions about installing mobile apps. AppPro-
ﬁler [41] generates a privacy-sensitive behavior proﬁle
based on the static analysis of the app. Harbach et al.
demonstrated that personalized dialogs showing actual
values requested by apps help users avoid overprivileged
apps [24]. These techniques do not address the privacy
risks of mobile ads.
IX. Current status of vulnerabilities
We have disclosed the issues discussed in this paper
to the Android security team and all affected AdSDK
providers. In response, AdMob and AdMarvel patched the
local resource oracle in the latest releases of their AdSDKs.
AirPush and MoPub acknowledged the report but did not
respond whether they patched the local resource oracle.
We also reported to MoPub that if the app has the ACC-
ESS FINE LOCATION permission,
then the MoPub
AdSDK reveals the device’s ﬁne-grained locations to the
advertisers. MoPub responded as follows:
13
“If you are allowing MoPub to access this data, these
will be accessible to our advertisers for precise targeting.
If you have more questions on the privacy policy, you can
also read here: http://www.mopub.com/legal/privacy/”
References
[1] G. Acar, C. Eubank, S. Englehardt, M. Juarez,
A. Narayanan, and C. Diaz, “The Web never forgets:
Persistent tracking mechanisms in the wild,” in CCS,
2014.
[2] Google
ID.
Advertising
Avail-
able: https://support.google.com/googleplay/android-
developer/answer/6048248?hl=en
tracking macros.
[Online]. Avail-
https://wiki.operamediaworks.com/display/
[Online].
[3] AdMarvel
able:
AMS/Macro+Support
[4] AdMob. Set up conversion tracking.
[Online].
Available: https://support.google.com/admob/answer/
3111064?hl=en
[5] Developer reference: Android Identiﬁer. [Online].
http://developer.android.com/reference/
Available:
android/provider/Settings.Secure.html#ANDROID
ID
[6] AppBrain. Android ad networks. [Online]. Available:
http://www.appbrain.com/stats/libraries/ad
[7] Apple. Creating UUIDs. [Online]. Available: https:
//developer.apple.com/library/ios/documentation/
Foundation/Reference/NSUUID Class/index.html#//
apple ref/doc/uid/TP40012254-CH1-SW7
[8] A. Barth, “The Web origin concept,” http://tools.ietf.
org/html/rfc6454, 2011.
[9] T. Book, A. Pridgen, and D. Wallach, “Longitudinal
analysis of Android ad library permissions,” in MoST,
2013.
[10] Q. Chen, Z. Qian, and Z. Mao, “Peeking into your
app without actually seeing it: UI state inference and
novel Android attacks,” in USENIX Security, 2014.
[11] D. Cheng. Treat ﬁle:// URLs as having unique
origin. [Online]. Available: https://code.google.com/
p/chromium/issues/detail?id=455882
[12] D. Crandall, L. Backstrom, D. Cosley, S. Suri,
D. Huttenlocher, and J. Kleinberg, “Inferring so-
cial ties from geographic coincidences,” Proc. NAS,
no. 52, 2010.
[13] Android dashboards.
[Online]. Available: https:
//developer.android.com/about/dashboards/index.html
[14] Y.-A. de Montjoye, C. Hidalgo, M. Verleysen, and
V. Blondel, “Unique in the crowd: The privacy
bounds of human mobility.” Nature Scientiﬁc Reports
3, vol. 1376, 2013.
[15] Dolphin browser
[Online]. Avail-
https://play.google.com/store/apps/details?id=
for Android.
able:
mobi.mgeek.TunnyBrowser
[16] Android storage. [Online]. Available: https://source.
android.com/devices/storage/
[17] K. Fawaz and K. Shin, “Location privacy protection
for smartphone users,” in CCS, 2014.
[18] T. Garﬁnkel, “Traps and pitfalls: Practical problems
in system call interposition based security tools,” in
NDSS, 2003.
[19] M. Georgiev, S. Jana, and V. Shmatikov, “Breaking
and ﬁxing origin-based access control in hybrid We-
b/mobile application frameworks,” in NDSS, 2014.
[20] P. Golle and K. Partridge, “On the anonymity of
home/work location pairs,” in Pervasive, 2009.
[21] GoodRx - prescription drug prices, coupons and pill
[Online]. Available: https://play.google.
identiﬁer.
com/store/apps/details?id=com.goodrx
[22] M. Grace, W. Zhou, X. Jiang, and A. Sadeghi,
“Unsafe exposure analysis of mobile in-app adver-
tisements,” in WiSec, 2012.
[23] E. Grey. An HTML5
FileSaver
implementation. [Online]. Available: https://github.
com/eligrey/FileSaver.js
saveAs()
[24] M. Harbach, M. Hettig, S. Weber, and M. Smith,
“Using personal examples to improve risk commu-
nication for security & privacy decisions,” in CHI,
2014.
[25] Developer
reference: Android class hashCode.
http://developer.android.com/
[Online]. Available:
reference/java/lang/String.html#hashCode()
[26] Interactive Advertising Bureau. Mobile rich media ad
interface deﬁnitions (MRAID). [Online]. Available:
http://www.iab.net/mraid
[27] ——. Understanding mobile
line].
IABDigitalSimpliﬁedMobileCookies.pdf
Available:
[On-
http://www.iab.net/media/ﬁle/
cookies.
[28] S. Jana and V. Shmatikov, “Memento: Learning se-
crets from process footprints,” in S&P, 2012.
Kaplan.
major
[29] D.
hit
able:
banner-ads-hit-major-websites/article/35605/
ads
Avail-
http://www.scmagazineus.com/Malicious-
Malicious
websites.
[Online].
banner
[30] C. Lin, H. Li, X. Zhou, and X. Wang, “Screenmilker:
How to milk your Android screen for secrets,” in
NDSS, 2014.
[31] C. Ma, D. Yau, N. Yip, and N. Rao, “Privacy vulner-
ability of published anonymous mobility traces,” in
MOBICOM, 2010.
[32] J. Mayer and J. Mitchell, “Third-party web tracking:
Policy and technology,” in S&P, 2012.
[33] MoPub tracking macros. [Online]. Available: https:
//dev.twitter.com/mopub/ui/macros
[34] A. Narayanan and V. Shmatikov, “De-anonymizing
social networks,” in S&P, 2009.
[35] N. Nikiforakis, A. Kapravelos, W.
Joosen,
C. Kruegel, F. Piessens, and G. Vigna, “Cookieless
monster: Exploring the ecosystem of web-based
device ﬁngerprinting,” in S&P, 2013.
[36] A. Odri. AirPush
[Online].
Available: http://iamattila.com/trafﬁc-source-tokens/
airpush-dynamic-tracking-tokensscriptsapi.php
tracking macros.
[37] P. Pearce, A. Felt, G. Nunez, and D. Wagner, “Ad-
Droid: Privilege separation for applications and ad-
14
vertisers in Android,” in ASIACCS, 2012.
[38] POF free dating app. [Online]. Available: https://play.
google.com/store/apps/details?id=com.pof.android
[39] Most popular permissions in various application
categories. [Online]. Available: http://privacygrade.
org/stats
[40] Z. Qian, Z. Mao, and Y. Xie, “Collaborative TCP
sequence number inference attack: How to crack
sequence number under a second,” in CCS, 2012.
[41] S. Rosen, Z. Qian, and Z. Mao, “AppProﬁler: A
ﬂexible method of exposing privacy-related behavior
in Android applications to end users,” in CODASPY,
2013.
[42] J. Ruderman.
[Online].
Available: https://developer.mozilla.org/en-US/docs/
Web/Security/Same-origin policy
policy.
origin
Same
[43] S. Shekhar, M. Dietz, and D. Wallach, “AdSplit: Sep-
arating smartphone advertising from applications,” in
USENIX Security, 2012.
[44] S. Son and V. Shmatikov, “The postman always
rings twice: Attacking and defending postMessage in
HTML5 websites,” in NDSS, 2013.
[45] B. Sterne and A. Barth. Content Security Policy 1.0.
[Online]. Available: http://www.w3.org/TR/2012/CR-
CSP-20121115
[46] R. Stevens, C. Gibler, J. Crussell, J. Erickson, and
H. Chen, “Investigating user privacy in Android ad
libraries,” in MoST, 2012.
[47] M. Ter Louw, K. Ganesh, and V. Venkatakrishnan,
“AdJail: Practical enforcement of conﬁdentiality and
integrity policies on Web advertisements,” in USENIX
Security, 2012.
[48] A. Vance. Times web ads show security breach.
[Online]. Available: http://www.nytimes.com/2009/
09/15/technology/internet/15adco.html
[49] R. Wang, L. Xing, X. Wang, and S. Chen, “Unau-
thorized origin crossing on mobile platforms: Threats
and mitigation,” in CCS, 2013.
[50] Developer reference: WebSettings. [Online]. Avail-
able: http://developer.android.com/reference/android/
webkit/WebSettings.html
[51] Developer
reference: WebView.
[Online]. Avail-
able: http://developer.android.com/reference/android/
webkit/WebView.html
[52] M. West, A. Barth,
Security Policy 2.0.
//www.w3.org/TR/CSP2
and D. Veditz. Content
[Online]. Available: http:
[53] D. Wu and R. Chang, “Analyzing Android browser
apps for ﬁle:// vulnerabilities,” in ISC, 2014.
[54] ——, “Indirect ﬁle leaks in mobile applications,” in
MoST, 2015.
[55] H. Zang and J. Bolot, “Anonymization of location
data does not work: A large-scale measurement
study,” in MOBICOM, 2011.
[56] N. Zhang, K. Yuan, M. Naveed, X. Zhou, and
X. Wang, “Leave me alone: App-level protection
against runtime information gathering on Android,”
in S&P, 2015.
[57] X. Zhou, S. Demetriou, D. He, M. Naveed, X. Pan,
X. Wang, C. Gunter, and K. Nahrstedt, “Identity,
location, disease and more: Inferring your secrets
from Android public resources,” in CCS, 2013.
15