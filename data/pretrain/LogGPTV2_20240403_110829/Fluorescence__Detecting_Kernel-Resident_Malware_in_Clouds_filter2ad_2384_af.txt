architecture-speciﬁc information at all. Fluorescence is scal-
able because the examination and summarization of VMs
happens in parallel across the VM hosts; the central server
receives and operates on ﬁngerprints, not full memory snap-
shots; and the feature-alignment and analysis algorithms are
chosen and engineered to be fast. We report that Fluorescence
can analyze a herd of 200 VMs in ∼60–80 minutes. Large
herds can be divided into subherds for faster analysis.
Acknowledgments
We thank VirusTotal and VirusShare for making malware sam-
ples available to us, T. Roy from CodeMachine Inc. for shar-
ing his expertise about Windows rootkits, and Mingbo Zhang
at Rutgers University for helping us to debug our Windows
kernel-memory-pinning driver. We thank the anonymous
RAID reviewers and our shepherd, Andrea Lanzi, for their
valuable comments and help in improving this paper. This ma-
terial is based upon work supported by the National Science
Foundation under Grant Numbers 1314945 and 1642158.
References
[1] Ighor Augusto. Reptile rootkit. Commit b0a2d0f, April
2018. URL https://github.com/f0rb1dd3n/Reptile.
[2] Rishi Bhargava and David P. Reese, Jr.
System
and method for passive threat detection using virtual
memory inspection, March 14, 2017. U.S. Patent
9,594,881 B2.
[3] Antonio Bianchi, Yan Shoshitaishvili, Christopher
Kruegel, and Giovanni Vigna. Blacksheep: Detecting
compromised hosts in homogeneous crowds. In Proc.
CCS, pages 341–352, October 2012. doi: 10.1145/
2382196.2382234.
[4] Bill Blunden. The Rootkit Arsenal: Escape and Evasion
in the Dark Corners of the System. Jones & Bartlett
Learning, 2009. ISBN 978–1598220612.
[5] Michael Boelen, John Horne, et al. The Rootkit Hunter
project. Release 1.4.6, February 2018. URL http://
rkhunter.sourceforge.net/.
[6] Ed Bukoski, Brian Moyles, and Mike McGarr. How we
build code at Netﬂix. Netﬂix Technology Blog, March 9,
2016. URL https://medium.com/netﬂix-techblog/how-
we-build-code-at-netﬂix-c5d9bd727f15.
[7] Yuriy Bulygin, Mikhail Gorobets, Andrew Furtak, and
Alex Bazhaniuk. Fractured Backbone: Breaking mod-
ern OS defenses with ﬁrmware attacks. Presentation
at Black Hat USA, July 2017. URL https://youtu.be/
ryKy9LvmSIs.
[8] Chen Chen, Darius Suciu, and Radu Sion. POSTER:
KXRay: Introspecting the kernel for rootkit timing foot-
prints. In Proc. CCS, pages 1781–1783, October 2016.
doi: 10.1145/2976749.2989053.
[9] Amit Dang, Preet Mohinder, and Vivek Srivastava. Sys-
tem and method for kernel rootkit protection in a hy-
pervisor environment, June 30, 2015. U.S. Patent
9,069,586 B2.
[10] Michael D. Ernst, Jeff H. Perkins, Philip J. Guo, Stephen
McCamant, Carlos Pacheco, Matthew S. Tschantz, and
Chen Xiao. The Daikon system for dynamic detection
of likely invariants. Science of Computer Programming,
69(1–3):35–45, December 2007. doi: 10.1016/j.scico.
2007.01.015.
[11] Martin Ester, Hans-Peter Kriegel, J¨org Sander, and Xi-
aowei Xu. A density-based algorithm for discover-
ing clusters in large spatial databases with noise. In
Proc. KDD, pages 226–231, August 1996. URL http:
//www.aaai.org/Library/KDD/1996/kdd96-037.php.
[12] Nicolas Falliere, Liam O. Murchu,
and Eric
Chien. W32.Stuxnet dossier. White paper, ver-
sion 1.4, Symantec Corporation, February 2011.
URL
https://www.symantec.com/content/en/us/
enterprise/media/security response/whitepapers/
w32 stuxnet dossier.pdf.
[13] Scott Field. An introduction to kernel patch protection.
MSDN Blog, August 12, 2006. URL https://blogs.msdn.
microsoft.com/windowsvistasecurity/2006/08/12/an-
introduction-to-kernel-patch-protection/.
380          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association[14] Francesco Gadaleta, Nick Nikiforakis, Jan Tobias
M¨uhlberg, and Wouter Joosen. HyperForce: Hypervisor-
enforced execution of security-critical code. In Dimitris
Gritzalis, Steven Furnell, and Marianthi Theoharidou,
editors, Information Security and Privacy Research:
SEC 2012, volume 376 of IFIP Advances in Informa-
tion and Communication Technology, pages 126–137.
Springer, June 2012. doi: 10.1007/978-3-642-30436-
1 11.
[15] GMER. GMER - rootkit detector and remover, 2016.
URL http://www.gmer.net/.
[16] Kent Grifﬁn, Scott Schneider, Xin Hu, and Tzi-Cker
Chiueh. Automatic generation of string signatures for
malware detection. In Engin Kirda, Somesh Jha, and
Davide Balzarotti, editors, Recent Advances in Intrusion
Detection: RAID 2009, volume 5758 of Lecture Notes in
Computer Science, pages 101–120. Springer, September
2009. doi: 10.1007/978-3-642-04342-0 6.
[17] Ted Hudek and Cymoki.
documentation, April
Driver signing. Mi-
2017.
https://docs.microsoft.com/en-us/windows-
crosoft Windows
URL
hardware/drivers/install/driver-signing.
[18] The Kernel Development Community. BPF type format
(BTF), 2019. URL https://www.kernel.org/doc/html/
latest/bpf/btf.html.
[19] Clemens Kolbitsch, Paolo Milani Comparetti, Christo-
pher Kruegel, Engin Kirda, Xiaoyong Zhou, and Xi-
aoFeng Wang. Effective and efﬁcient malware detection
at the end host. In Proc. USENIX Security, pages 351–
366, August 2009. URL https://www.usenix.org/legacy/
events/sec09/tech/full papers/kolbitsch.pdf.
[20] Jesse Kornblum. Identifying almost identical ﬁles using
context triggered piecewise hashing. Digital Investi-
gation, 3(Supplement):91–97, September 2006. doi:
10.1016/j.diin.2006.06.015.
[21] Jesse D. Kornblum. Exploiting the rootkit paradox
International
with Windows memory analysis.
Journal of Digital Evidence, 5(1):1–5, Fall 2006.
URL
http://www.utica.edu/academic/institutes/
ecii/publications/articles/EFE2FC4D-0B11-BC08-
AD2958256F5E68F1.pdf.
[22] Andrea Lanzi, Monirul Sharif, and Wenke Lee.
K-Tracer: A system for extracting kernel malware
In Proc. NDSS, February 2009. URL
behavior.
https://www.ndss-symposium.org/ndss2009/k-tracer-
system-extracting-kernel-malware-behavior/.
dynamic malware analysis system. In Proc. ACSAC,
pages 386–395, December 2014. doi: 10.1145/2664243.
2664252.
[24] Zhichun Li, Manan Sanghi, Yan Chen, Ming-Yang Kao,
and Brian Chavez. Hamsa: Fast signature generation
for zero-day polymorphic worms with provable attack
resilience. In Proc. IEEE S&P, pages 32–46, 2006. doi:
10.1109/SP.2006.18.
[25] Zhiqiang Lin,
Junghwan Rhee, Xiangyu Zhang,
Dongyan Xu, and Xuxian Jiang. SigGraph: Brute force
scanning of kernel data structure instances using graph-
based signatures. In Proc. NDSS, February 2011. URL
https://www.ndss-symposium.org/ndss2011/siggraph-
brute-force-scanning-of-kernel-data-structure-
instances-using-graph-based-signatures/.
[26] Victor Ramos Mello. Diamorphine rootkit. Commit
ba97922, March 2018. URL https://github.com/m0nad/
Diamorphine.
[27] Forest Monsen and Kevin Glisson. Netﬂix Cloud
A differencing
Net-
URL
Security SIRT releases Diffy:
engine for digital forensics in the cloud.
ﬂix Technology Blog,
https://medium.com/netﬂix-techblog/netﬂix-sirt-
releases-diffy-a-differencing-engine-for-digital-
forensics-in-the-cloud-37b71abd2698.
July 17, 2018.
[28] Nelson Murilo and Klaus Steding-Jessen. Chkrootkit.
Version 0.52, March 2017. URL http://www.chkrootkit.
org/.
[29] nurupo. Nurupo rootkit. Commit 78faabd, December
2017. URL https://github.com/nurupo/rootkit.
[30] Rajendra Patil and Chirag Modi. An exhaustive survey
on security concerns and solutions at different com-
ponents of virtualization. ACM Comput. Surv., 52(1):
12:1–12:38, February 2019. doi: 10.1145/3287306.
[31] Bryan D. Payne, Tamas K. Lengyel, Steven Maresca,
Antony Saba, et al. LibVMI: Simpliﬁed virtual machine
introspection. Version 0.12.0, April 2018. URL https:
//github.com/libvmi/libvmi.
[32] Nick L. Petroni, Jr., Timothy Fraser, AAron Walters, and
William A. Arbaugh. An architecture for speciﬁcation-
based detection of semantic integrity violations in kernel
dynamic data. In Proc. USENIX Security, pages 289–
304, July/August 2006. URL https://www.usenix.org/
legacy/events/sec06/tech/petroni.html.
[23] Tamas K. Lengyel, Steve Maresca, Bryan D. Payne,
George D. Webster, Sebastian Vogl, and Aggelos Ki-
ayias. Scalability, ﬁdelity and stealth in the DRAKVUF
[33] Nguyen Anh Quynh. Capstone disassembly framework.
Version 3.0.5-rc2, March 2017. URL https://github.com/
aquynh/capstone.
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 381[34] Jayakrishnan Ramalingam. Rootkit monitoring agent
built into an operating system kernel, September 17,
2013. U.S. Patent 8,539,584.
[35] Junghwan Rhee, Ryan Riley, Zhiqiang Lin, Xuxian
Jiang, and Dongyan Xu. Data-centric OS kernel mal-
IEEE Trans. on Information
ware characterization.
Forensics and Security, 9(1):72–87, January 2014. doi:
10.1109/TIFS.2013.2291964.
[36] Ryan Riley, Xuxian Jiang, and Dongyan Xu. Multi-
aspect proﬁling of kernel rootkit behavior. In Proc. Eu-
roSys, pages 47–60, April 2009. doi: 10.1145/1519065.
1519072.
[37] T. Roy. Personal communication, October 2016.
[38] Mark Russinovich.
v1.71.
Novem-
URL https://docs.microsoft.com/en-
Microsoft Windows
ber 2006.
us/sysinternals/downloads/rootkit-revealer.
RootkitRevealer
documentation,
[39] Dan Sullivan. Beyond the hype: Advanced persis-
tent threats. White paper, 2011. URL https://www.
realtimepublishers.com/book.php?id=197.
2011.
Advanced
[40] Symantec Corporation.
persis-
threats: A Symantec perspective. White
URL https://www.symantec.
tent
paper,
com/content/en/us/enterprise/white papers/b-
advanced persistent threats WP 21215957.en-us.pdf.
[41] Gianfranco Tonello. Bootkits are not dead. Pitou is
back!, January 2018. URL https://www.tgsoft.it/english/
news archivio eng.asp?id=884.
[42] Trend Micro Inc. OSSEC, open source host-based intru-
sion detection system, 2019. URL https://github.com/
ossec/ossec-hids.
[43] Brian White, Jay Lepreau, Leigh Stoller, Robert Ricci,
Shashi Guruprasad, Mac Newbold, Mike Hibler, Chad
Barb, and Abhijeet Joglekar. An integrated experi-
mental environment for distributed systems and net-
works. In Proc. OSDI, pages 255–270, December 2002.
URL https://www.usenix.org/legacy/event/osdi02/tech/
white.html.
[44] Heng Yin, Zhenkai Liang,
Identifying
and Dawn Song.
understand-
HookFinder:
and
In Proc.
ing malware hooking behaviors.
NDSS, February 2008.
URL https://www.ndss-
symposium.org/ndss2008/hookﬁnder-identifying-and-
understanding-malware-hooking-behaviors/.
[45] Matthew D. Zeiler. ADADELTA: An adaptive learning
rate method. arXiv preprint arXiv:1212.5701, December
2012. URL https://arxiv.org/abs/1212.5701.
382          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association