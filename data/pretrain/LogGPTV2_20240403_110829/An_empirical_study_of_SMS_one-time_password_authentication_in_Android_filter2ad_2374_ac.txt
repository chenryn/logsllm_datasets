and Google Book Ngram Corpus are not appropriate. Instead,
we generated our own code corpus by using all posts on Stack-
Overflow.To compare an unknown name with names in the
reference set, AUTH-EYE converts the words in code corpus
into sets of vectors by using Word2vec [34] and computes a
cosine distance between the unknown name and each name
in the reference set. The cosine distance between two words
gives a measure of their semantic similarity, where a greater
cosine distance represents a higher semantic similarity. Us-
ing the reference set, AUTH-EYE proceeds according to the
following steps to identify functions related to login Activi-
ties:
(1) AUTH-EYE splits each name into several words based
on the occurrence of uppercase letters to improve the
accuracy of a comparison between an unknown name
and names in the reference set. We assume the stan-
dard programming practice in which the names of
classes and functions are usually a combination of sev-
eral words, capitalized at word boundaries.
(2) AUTH-EYE compares each word with the names in the
reference set and computes the corresponding simi-
larity scores. The highest score found for the word is
taken as its similarity score.
(3) AUTH-EYE calculates the semantic similarity by taking
the average similarity of all words in the name. If the
average similarity score is higher than a threshold, the
corresponding class name is labeled as a “login”.
(4) AUTH-EYE runs steps (1) - (3) iteratively to distinguish
“login” classes and then repeats the three steps to label
“login” functions in these classes.
For example, consider the function name doLogin. The
highest semantic similarity score is 0.43 if AUTH-EYE com-
pares the entire name with each word in the reference set. If
the name is divided into single words as “do” and “Login”,
its average semantic similarity is 0.66 as the similarity scores
for two words are 0.33 and 0.98, respectively.
SMS OTP Identification. AUTH-EYE examines the identi-
fied login function to determine whether its functionality is
SMS OTP login.
Even though the java code for each app may be only par-
tially decompiled, the layout XML file can be fully extracted.
Therefore, AUTH-EYE identifies the apps implementing SMS
OTP login Activities by analyzing the layout XML files in-
stead of analyzing the login function code. For each identified
login function, AUTH-EYE uses UI Automator [1] to find the
name of the corresponding layout XML file from the “pub-
lic.xml” file. In the layout XML file, UI Automator parses all
the information describing each widget, such as type, text,
orientation, and position (i.e., its layout).
Differently from the case with function declarations, we
find that each widget is named formally. Thus, we manually
collected a set of keywords (e.g., “smscode” and “mobile-
phone”) from 13 repositories posted on Github [9]6 to con-
struct a keyword list. In order to identify whether a widget is
related to SMS OTP login, AUTH-EYE chooses the widgets for
edit text and button. For each widget, AUTH-EYE compares
the text in the field of android:text with the words in the
keyword list. If any keyword is included in the widget text
field, an SMS OTP login is identified, which indicates that
its server validates the user’s identity through the OTP au-
thentication protocol. AUTH-EYE finally generates an OTP
list containing those apps that are identified using SMS OTP
login. The widget descriptions, that are relevant to SMS OTP
login, are also included.
4.2 Auth Message Analyzer
Taking the OTP app list as an input, the Auth message
analyzer of AUTH-EYE then executes OTP login Activities
through each listed app to interact with its server. By examin-
ing server responses and checking the OTP values, AUTH-EYE
determines whether the implemented OTP authentication
protocol violates any of the OTP rules.
5Repositories on Github: https://github.com/search?q=Login+Android
613 repositories on Github: https://github.com/search?q=OTP+Login+Android
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Siqi et al.
4.2.1 OTP Login Execution. AUTH-EYE utilizes Monkey tool,
an UI/Application Exerciser [2], which triggers SMS OTP
login Activities by generating pseudo-random streams of
user events (e.g., clicks and button touches). However, the
executions of Monkey are somewhat imprecise so that some
redundant Activities may be performed accidentally, causing
unexpected errors. To improve the efficiency and effective-
ness of the automated OTP login testing, AUTH-EYE makes
use of the orientation information parsed by UI Automator to
precisely locate the widgets (i.e., edit text and button) that
are related to SMS OTP login Activities.
To execute a login Activity, AUTH-EYE calls the function
dispatchString() to enter a valid mobile phone number
into the edit text widget. It then clicks the button to send
the mobile phone number to the server, requesting a pseudo-
random OTP value. The server response is a text message
containing the OTP value and some textual descriptions.
AUTH-EYE needs to accurately extract the OTP value in this
message (note that AUTH-EYE has been given root permission
for the tested Android phone in advance to extract the SMS
messages from database /data/data/android.providers.
telephony/databases/mmssms.db). We thus manually an-
alyzed response messages generated by executing the SMS
OTP login in 200 apps and found that the messages with
OTPs followed formal formats. Therefore, we created a list
of keywords that describe OTP values such as “password”,
“OTP”. In detail, AUTH-EYE applies a keyword matching to
parse each response message. Given the keywords, AUTH-EYE
extracts the OTP value from each message in the following
steps:
(1) AUTH-EYE pre-processes a response message by apply-
ing Porter Stemmer [32, 41] to convert words to their
root forms. For example, the root form of “time” and
“times” is “time”.
(2) AUTH-EYE divides the message into several blocks based
on the text spaces. Each block contains a numeric value
or a word.
(3) AUTH-EYE searches for the block whose word matches
any of the predefined keywords. If a match is found,
AUTH-EYE selects the content in the subsequent nu-
meric block as the OTP value.
An interesting observation is that many Android apps
nowadays ONLY use OTP authentication and do not adopt a
password authentication. In this situation AUTH-EYE could
easily conduct the test without considering the password
login issue. For those apps with a two-factor authentica-
tion (i.e., a login requires both the password and the OTP),
AUTH-EYE relies on a manual account registration and login
as the prerequisite to conduct the following evaluation.
4.2.2 Evaluating Rule Violations. AUTH-EYE executes the
following tests to check each app’s compliance with the OTP
rules.
R1: OTP Randomness. To assess the randomness of the
pseudo-random values generated by a server for each au-
thentication session, AUTH-EYE sends 30 OTP requests to
each server and parses the response messages to extract a
sequence of OTPs for each server.
AUTH-EYE proceeds in two ways to generate the value se-
quences for examination. In the first, AUTH-EYE consumes
each received OTP before sending a new login request. In the
second, AUTH-EYE sends login requests without consuming
the values for OTP authentication. From the sequence of
OTPs, AUTH-EYE evaluates the randomness from the follow-
ing two perspectives:
• Repetition: AUTH-EYE identifies whether a subsequence
appears periodically in the sequence, or the same value
appears repeatedly in the sequence.
• Static: AUTH-EYE examines the sequence with constant
values.
We observed some apps reject repeated requests when
certain numbers of request are reached, and so prevent ac-
quisition of the 30 values required. In such cases, we wait
until the validation works again before re-starting the test.
Most apps only block the account for around 10 minutes,
and rarely for one hour. Only a few apps block the account
for as long as 24 hours.
It is important to mention that if the value sequence passes
the above checks, it can only be regarded as potentially ran-
dom. In this study, we did not test the values in the sequence
using more rigorous tests for randomness because that re-
quires a larger number of OTPs. Due to the constraints set in
each validation system, collecting a sufficiently large number
of OTPs is time-consuming, and even perhaps impossible in
practice.
R2: OTP Length. AUTH-EYE checks the length of each OTP,
which should be at least six digits. If a server generates an
OTP with length less than six digits, AUTH-EYE labels the
corresponding app as vulnerable.
R3: Retry Attempts. As the number of allowed attempts
is not suggested by RFCs, we consider apps that allow more
than five attempts to be insecure. AUTH-EYE first requests
a valid OTP from the server to test this property. It then
generates a fake OTP by using ‘0’ to replace all the digits in
the valid OTP (or using ‘1’ if the valid OTP happen to be all-
zeros). The fake OTP value is used for testing the existence of
a retry limit. AUTH-EYE then submits the incorrect value five
times and analyzes the five responses sent back from servers.
Since the error message is not shown as an SMS message,
An Empirical Study of SMS OTP Authentication in Android Apps
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
AUTH-EYE relies on Burp Suite [38] to collect responses from
each server and store them in a log file for further parsing.
To identify the limitation on retry attempts, AUTH-EYE
compares the five error messages without considering the
values in the messages. If the five messages are identical, it
implies that the validation system may not limit the num-
ber of attempts. In that case AUTH-EYE sends the fake value
repeatedly to confirm whether there is any limit. AUTH-EYE
terminates this procedure under two circumstances: 1) a dif-
ferent message is received, such as “Too many errors”, or
2) AUTH-EYE has made 20 attempts7. The first circumstance
implies that there is a limitation, and the number of attempts
so far performed by AUTH-EYE is the maximum allowed at-
tempts. The second case indicates that the validation system
may allow unlimited attempts.
If the five error messages are not the same, AUTH-EYE then
identifies the word describing attempts from these messages.
AUTH-EYE searches for the format as a value followed by
the word “time”, which refers to how many more attempts
may be made. Setting a time delay is a possible additional
protection mechanism for retry attempts. Given the five
error messages, AUTH-EYE first searches for the word “delay”
and then finds the format as a value followed by a time-
related word (i.e., “second/s”, “minute/min”, or “hour/h”).
The value found is extracted as the required delay before
another attempt.
R4: OTP Consumption. To identify whether the valida-
tion system of OTP authentication accepts a re-used OTP,
AUTH-EYE first requests and consumes a valid OTP. It then
attempts the consumed OTP again. If the validation succeeds
for the second time, it indicates that the implemented OTP
authentication does not check or remember the provided
OTP for each authentication session, and permits repeated
use of OTPs across multiple sessions.
R5: OTP Expiration. Given response messages, AUTH-EYE
searches for the word “expire” and extracts the value after
this word, that is, the validation time of the received OTP. To
measure the expiration interval, we set a timer in AUTH-EYE.
Once the OTP message is received, AUTH-EYE starts the timer
and repeatedly sends the OTP to the server for validation
until it expires. If AUTH-EYE can be validated successfully,
a violation is detected (i.e., the server does not check the
expiration of the OTP adequately).
R6: OTP Renewal Interval. To identify apps that violate
this rule, AUTH-EYE provides a valid OTP at times correspond-
ing to different time intervals. Because the RFC recommends
7We choose 20 attempts after considering the potential legal issue in main-
land China. Also, we can easily add the guess times to determine which
apps are actually vulnerable.
30 sec as the optimal time interval, we set the time inter-
vals to [0, 30s], [30s, 60s], [60s, ∞]. In our test, AUTH-EYE
first uploads the OTP immediately after it was received (i.e.,
within 30 seconds). Then, AUTH-EYE requests a new OTP and
submits the value within 30 to 60 seconds. If the request
succeeds, AUTH-EYE asks for another OTP value and resub-
mits it after 60 seconds. AUTH-EYE repeats this test with the
renewal intervals of [1min, 5min], [5min, 10min], [10min,
30min], [30min, 60min], [60min, 24h], and [24h, ∞] until it
is rejected by the server (or finds a still available OTP after
24 hours). If a server accepts an OTP with a lifetime more
than 30 seconds, AUTH-EYE considers it as an insecure one.
5 EVALUATION
Our evaluation has two goals. The first is to assess the ef-
fectiveness of AUTH-EYE in automatically analyzing the im-
plementations of OTP authentication protocols in Android
apps and verify that their implementations comply with the
OTP rules. The second is to use AUTH-EYE to gain insights
into the frequency of violations of OTP rules in real-world
Android apps.
5.1 Dataset
We built our app dataset by downloading 3,303 top list apps
from both Google Play and Tencent MyApp markets (986 from
Google Play and 2,317 from Tencent) between February and
April 2019. The dataset contains apps in 21 categories includ-
ing Beauty, Books & Reference, Communication, Education,
Entertainment, Finance, Health & Fitness, Lifestyle, Map &
Navigation, Medical, Music & Audio, News & Magazine, Par-
enting, Personalization, Photography, Productivity, Shopping,
Social, Tool, Travel & Local, Video Players & Editors. We se-
lected from each category the recommended apps (about 150
apps in each category, and the most active one has around 3
billion downloads).
We observed that many apps also provide the option of
login via a third party (e.g., OAuth). Note that in this paper
we only assess apps with customized OTP authentication
protocols, and those which use third-party authentication
services with open-authentication are out of the scope of
this paper.
5.2 OTP Login Activity Recognition
The first task of AUTH-EYE is to create an OTP list, i.e., a
list of apps implementing SMS OTP. Among the the 3,303
apps in our dataset, AUTH-EYE is able to analyzed 1,364 apps,
while other apps adopt app protection measures (e.g., code
packing and code obfuscation) to hinder the decompilation
and code analysis of AUTH-EYE. We manually inspected the
apps that AUTH-EYE failed to analyze to gain some insights:
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Siqi et al.
Table 1: Top-10 login activity names in apps
Login Activity Names
Login
LoginSuccess
doLogin
smsLogin
onLoginSuccess
startLogin
requestLogin
startLoginActivity
supportSmsLogin
serverBindLoginRequest
# of apps
105
53
37
18
16
14
14
13
13
13
• 648 apps are protected using code packing against de-
compilation, in which their “.class” files are encrypted.
These files will only be decrypted during app execu-
tion. Since we cannot extract the source code from
encrypted apps, AUTH-EYE is unable to locate their lo-
gin Activities and cannot execute them.
• AUTH-EYE are not able to analyze 1291 apps because 1)
695 of them use code obfuscation to prevent the code
from being analyzed and 2) 596 apps are unable to be
executed due to potential anti-debugging code.
We argue that AUTH-EYE could also adopt advanced anal-