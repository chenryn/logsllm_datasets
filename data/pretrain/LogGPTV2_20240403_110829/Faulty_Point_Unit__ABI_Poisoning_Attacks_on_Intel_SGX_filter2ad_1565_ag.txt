### 6. Impact of Attacks
Subtle corruptions in the expected results may propagate from such attacks. The exact impact, however, will always be application-specific and requires careful analysis by the attacker, depending on the x87 or SSE processor features used in the victim application.

### 7. Conclusions and Lessons Learned
With the widespread availability of SGX in mainstream Intel processors, an emerging software ecosystem of enclave shielding runtimes has developed in recent years to ease the adoption process and enable developers to largely transparently enjoy SGX protection guarantees. Despite the considerable advances and developer efforts behind these runtimes, API and ABI-level issues continue to persist.

An interesting focus for future work could be to extend vulnerability assessment tools, such as TEEREX [8], which are currently focused primarily on API-level attack surfaces, to also cover ABI-level vulnerabilities. Our analysis reveals that the high level of complexity and the large amount of interconnected instructions in modern x86 architectures make it particularly challenging to evaluate, investigate, and mitigate ABI-level attacks. We urge the research community and industry players to deepen their efforts in exploring TEE solutions for alternative processor architectures, such as RISC-V, which are not unnecessarily complex due to historical reasons.

### Acknowledgments
This research was partially funded by the Engineering and Physical Sciences Research Council (EPSRC) under grants EP/R012598/1 and EP/S030867/1, by the European Union’s Horizon 2020 research and innovation programme under grant agreement No. 779391 (FutureTPM), by the Research Fund KU Leuven, and by a gift from Intel Corporation. Fritz Alder and Jo Van Bulck are supported by a grant from the Research Foundation – Flanders (FWO).

### References
[1] Fritz Alder, N Asokan, Arseny Kurnikov, Andrew Paverd, and Michael Steiner. 2019. S-faas: Trustworthy and accountable function-as-a-service using Intel SGX. In Proceedings of the 2019 ACM SIGSAC Conference on Cloud Computing Security Workshop. 185–199.
[2] Andrew Baumann, Marcus Peinado, and Galen Hunt. 2014. Shielding applications from an untrusted cloud with Haven. In Proceedings of the 11th USENIX conference on Operating Systems Design and Implementation. USENIX Association, 267–283.
[3] Andrea Biondo, Mauro Conti, Lucas Davi, Tommaso Frassetto, and Ahmad-Reza Sadeghi. 2018. The Guard’s Dilemma: Efficient Code-Reuse Attacks Against Intel SGX. In Proceedings of the 27th USENIX Security Symposium. 1213–1227.
[4] Mike Bursell. 2019. Trust No One, Run Everywhere—Introducing Enarx.
[5] S. Checkoway and H. Shacham. 2013. Iago attacks: Why the system call API is a bad untrusted RPC interface. In International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS). 253–264.
[6] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang, Zhiqiang Lin, and Ten H Lai. 2019. SgxPectre Attacks: Stealing Intel Secrets from SGX Enclaves via Speculative Execution. In 4th IEEE European Symposium on Security and Privacy (Euro S&P). IEEE.
[7] Haogang Chen, Yandong Mao, Xi Wang, Dong Zhou, Nickolai Zeldovich, and M. Frans Kaashoek. 2011. Linux kernel vulnerabilities: State-of-the-art defenses and open problems. In Proceedings of the Second Asia-Pacific Workshop on Systems. ACM, 5:1–5:5.
[8] Tobias Cloosters, Michael Rodler, and Lucas Davi. 2020. TeeRex: Discovery and Exploitation of Memory Corruption Vulnerabilities in SGX Enclaves. In Proceedings of the 29th USENIX Security Symposium. 841–858.
[9] Intel Corporation. 2017. Intel software guard extensions SDK for Linux OS: Developer reference.
[10] V. Costan and S. Devadas. 2016. Intel SGX explained. IACR Cryptology ePrint Archive 2016, 086 (2016), 1–118.
[11] J. Edge. 2008. CVE-2008-1367: Kernel doesn’t clear DF for signal handlers. https://bugzilla.redhat.com/show_bug.cgi?id=437312.
[12] A. Fog. 2018. Calling conventions for different C++ compilers and operating systems. http://www.agner.org/optimize/calling_conventions.pdf.
[13] Fortanix. 2019. Fortanix Enclave Development Platform — Rust EDP. https://edp.fortanix.com/.
[14] Free Software Foundation. 2020. GCC, the GNU Compiler Collection. https://gcc.gnu.org/.
[15] Adrien Ghosn, James R Larus, and Edouard Bugnion. 2019. Secured routines: language-based construction of trusted execution environments. In 2019 USENIX Annual Technical Conference (USENIX ATC 19). 571–586.
[16] Google. 2019. Asylo: An open and flexible framework for enclave applications. https://asylo.dev/.
[17] Jago Gyselinck, Jo Van Bulck, Frank Piessens, and Raoul Strackx. 2018. Off-limits: Abusing legacy x86 memory segmentation to spy on enclaved execution. In International Symposium on Engineering Secure Software and Systems (ESSoS ’18). Springer, 44–60.
[18] IBM. [n.d.]. Data-in-use protection on IBM cloud. https://www.ibm.com/blogs/bluemix/2017/12/data-use-protection-ibm-cloud-ibm-intel-fortanix-partner-keep-enterprises-secure-core/.
[19] Intel Corporation. 2019. Intel Software Guard Extensions – Get Started with the SDK. https://software.intel.com/en-us/sgx/sdk.
[20] Intel Corporation. 2020. Intel 64 and IA-32 architectures software developer’s manual – Combined volumes. Reference no. 325462-062US.
[21] Andrej Karpathy. 2014. Convnetjs: Deep learning in your browser (2014). URL http://cs.stanford.edu/people/karpathy/convnetjs (2014).
[22] Mustakimur Rahman Khandaker, Yueqiang Cheng, Zhi Wang, and Tao Wei. 2020. COIN Attacks: On Insecurity of Enclave Untrusted Interfaces in SGX. In Proceedings of the Twenty-Fifth International Conference on Architectural Support for Programming Languages and Operating Systems. 971–985.
[23] J. Lee, J. Jang, Y. Jang, N. Kwak, Y. Choi, C. Choi, T. Kim, M. Peinado, and B. Byunghoon Kang. 2017. Hacking in darkness: Return-oriented programming against secure enclaves. In Proceedings of the 26th USENIX Security Symposium. 523–539.
[24] S. Lee and T. Kim. 2017. Leaking uninitialized secure enclave memory via structure padding. arXiv preprint arXiv:1710.09061 (2017).
[25] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, Hyesoon Kim, and Marcus Peinado. 2017. Inferring fine-grained control flow inside SGX enclaves with branch shadowing. In Proceedings of the 26th USENIX Security Symposium. 557–574.
[26] H.J. Lu, David L Kreitzer, Milind Girkar, and Zia Ansari. 2015. System V application binary interface. Intel386 Architecture Processor Supplement, Version 1.1 (7 December 2015).
[27] A. Machiry, E. Gustafson, C. Spensky, C. Salls, N. Stephens, R. Wang, A. Bianchi, Y. Ryn Choe, C. Kruegel, and G. Vigna. 2017. BOOMERANG: Exploiting the semantic gap in trusted execution environments. In NDSS 2017.
[28] P. Maene, J. Götzfried, R. de Clercq, T. Müller, F. Freiling, and I. Verbauwhede. 2017. Hardware-based trusted computing architectures for isolation and attestation. IEEE Trans. Comput. 99 (2017).
[29] Microsoft. [n.d.]. https://azure.microsoft.com/en-us/blog/introducing-azure-confidential-computing/.
[30] Microsoft. 2019. Open Enclave SDK. https://openenclave.io/sdk/.
[31] Microsoft Corporation. 2020. Microsoft Visual C++. https://docs.microsoft.com/en-us/cpp/.
[32] Daniel Moghimi, Jo Van Bulck, Nadia Heninger, Frank Piessens, and Berk Sunar. 2020. CopyCat: Controlled Instruction-Level Attacks on Enclaves. In Proceedings of the 29th USENIX Security Symposium. USENIX Association, 469–486.
[33] Kit Murdock, David Oswald, Flavio D. Garcia, Jo Van Bulck, Daniel Gruss, and Frank Piessens. 2020. Plundervolt: Software-based fault injection attacks against Intel SGX. In Proceedings of the 41st IEEE Symposium on Security and Privacy (S&P’20).
[34] S. Pinto and N. Santos. 2019. Demystifying ARM TrustZone: A Comprehensive Survey. ACM Computing Surveys (CSUR) 51, 6 (2019), 130.
[35] Christian Priebe, Divya Muthukumaran, Joshua Lind, Huanzhou Zhu, Shujie Cui, Vasily A Sartakov, and Peter Pietzuch. 2019. SGX-LKL: Securing the Host OS Interface for Trusted Execution. arXiv preprint arXiv:1908.11143 (2019).
[36] The Apache Software Foundation. 2020. Apache Teaclave (Incubating). https://teaclave.incubator.apache.org/.
[37] Florian Tramer, Fan Zhang, Huang Lin, Jean-Pierre Hubaux, Ari Juels, and Elaine Shi. 2017. Sealed-glass proofs: Using transparent enclaves to prove and sell knowledge. In 2nd IEEE European Symposium on Security and Privacy (Euro S&P). IEEE.
[38] Chia-Che Tsai, Donald Porter, et al. 2017. Graphene-SGX library OS — A library OS for Linux multi-process applications with Intel SGX support. https://github.com/oscarlab/graphene.
[39] Chia-Che Tsai, Donald E Porter, and Mona Vij. 2017. Graphene-SGX: A practical library OS for unmodified applications on SGX. In 2017 USENIX Annual Technical Conference (USENIX ATC). USENIX Association.
[40] Sami Vaarala. 2020. Duktape embeddable JavaScript engine. URL https://duktape.org/.
[41] J. Van Bulck, M. Minkin, O. Weisse, D. Genkin, B. Kasikci, F. Piessens, M. Silberstein, T. F. Wenisch, Y. Yarom, and R. Strackx. 2018. Foreshadow: Extracting the keys to the Intel SGX kingdom with transient out-of-order execution. In Proceedings of the 27th USENIX Security Symposium.
[42] Jo Van Bulck, Daniel Moghimi, Michael Schwarz, Moritz Lipp, Marina Minkin, Daniel Genkin, Yarom Yuval, Berk Sunar, Daniel Gruss, and Frank Piessens. 2020. LVI: Hijacking transient execution through microarchitectural load value injection. In 41st IEEE Symposium on Security and Privacy (S&P’20).
[43] Jo Van Bulck, David Oswald, Eduard Marin, Abdulla Aldoseri, Flavio D. Garcia, and Frank Piessens. 2019. A tale of two worlds: Assessing the vulnerability of enclave shielding runtimes. In Proceedings of the 26th ACM Conference on Computer and Communications Security (CCS’19). ACM.
[44] Jo Van Bulck, Frank Piessens, and Raoul Strackx. 2017. SGX-Step: A practical attack framework for precise enclave execution control. In 2nd Workshop on System Software for Trusted Execution (SysTEX 2017). ACM, 4:1–4:6.
[45] N. van Ginkel, R. Strackx, and F. Piessens. 2017. Automatically generating secure wrappers for SGX enclaves from separation logic specifications. In Asian Symposium on Programming Languages and Systems. 105–123.
[46] Huibo Wang, Pei Wang, Yu Ding, Mingshen Sun, Yiming Jing, Ran Duan, Long Li, Yulong Zhang, Tao Wei, and Zhiqiang Lin. 2019. Towards Memory Safe Enclave Programming with Rust-SGX. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security. 2333–2350.
[47] Wikipedia contributors. 2020. Double-precision floating-point format—Wikipedia, The Free Encyclopedia. https://en.wikipedia.org/w/index.php?title=Double-precision_floating-point_format&oldid=960696001 [Online; accessed 16-June-2020].
[48] Yuanzhong Xu, Weidong Cui, and Marcus Peinado. 2015. Controlled-channel attacks: Deterministic side channels for untrusted operating systems. In 2015 IEEE Symposium on Security and Privacy. IEEE, 640–656.

### Appendix: Proof-of-Concept Enclave Code
This appendix lists the C source code (Listing 2) and compiled assembly (Listing 3) for the benchmark toy example enclave discussed in Section 3.2 and Table 1. The assembly code in Listing 3 was output by GCC v7.4.0 under Ubuntu 18.04.1 and the Intel SGX-SDK v2.7.1 using the default compilation flags.

#### Listing 2: Code to perform basic floating-point operations inside the enclave.
```c
#include <math.h>
#include <stdio.h>

long double ecall_acosf(int a) {
    return acosl(a);
}

long double ecall_mul(long double a, long double b) {
    return a * b;
}
```

#### Listing 3: Compiled assembly of Listing 2.
```assembly
1: push %rbp
2: mov %rsp, %rbp
3: sub $0x20, %rsp
4: mov %edi, -0x4(%rbp)
5: fildl -0x4(%rbp)
6: lea -0x10(%rsp), %rsp
7: fstpt (%rsp)
8: callq 4450
9: add $0x10, %rsp
10: fstpt -0x20(%rbp)
11: mov -0x20(%rbp), %rax
12: mov -0x18(%rbp), %edx
13: mov %rax, -0x20(%rbp)
14: mov %edx, -0x18(%rbp)
15: fldt -0x20(%rbp)
16: leaveq
17: retq
18: 
19: push %rbp
20: mov %rsp, %rbp
21: fldt 0x10(%rbp)
22: fldt 0x20(%rbp)
23: fmulp %st, %st(1)
24: pop %rbp
25: retq
```

### Appendix: Binary Search Algorithm Based on Overflow Exceptions
This appendix lists the additional Algorithm 2 to recover secrets for operands > 1. It functions analogously to Algorithm 1 described in Section 4. For brevity, both Algorithm 1 and Algorithm 2 use standard floating-point variables for secret recovery. However, if desired, these algorithms could be re-written (although in a less clear manner) using the binary representation of the double operands instead.

#### Algorithm 2: Binary search algorithm to recover a secret value based on overflow exceptions for operands > 1
**Result:** `recovered_secret`

1. **Maximum representable double:**
   ```c
   max_double = 1.7976931348623157e308;
   low = 1;
   high = max_double;
   cnt = 0;
   ```

2. **While loop:**
   ```c
   while cnt < 100 do
       mid = (low + high) / 2;
       secret_mul(mid);
       recovered_secret = max_double / mid;
       cnt++;
       if overflow exception raised then
           // Continue search in lower half
           high = mid;
       else
           // Continue search in upper half
           low = mid;
       end
   end
   ```

This algorithm uses a binary search approach to narrow down the range of possible secret values by checking for overflow exceptions.