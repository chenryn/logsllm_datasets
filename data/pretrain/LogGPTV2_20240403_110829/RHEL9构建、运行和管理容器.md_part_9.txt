        容器，首先停止容器，然后将其删除：
        ``` literallayout
        $ podman stop musing_brown
        $ podman rm musing_brown
        ```
        ::: variablelist
        [注意]{.term}
        :   ::: itemizedlist
            -   要删除多个容器：
                ``` screen
                $ podman rm clever_yonath furious_shockley
                ```
            -   要从本地系统中删除所有容器：
                ``` screen
                $ podman rm -a
                ```
            :::
        :::
    :::
:::
::: itemizedlist
**其他资源**
-   `man podman-rm`{.literal}
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-containers_building-running-and-managing-containers.html#con_the-runc-container-runtime_assembly_working-with-containers}runc 容器运行时 {.title}
:::
runc
容器运行时是开放容器项目(OCI)容器运行时规范的一个轻量级的、可移植的实现。runc
运行时与 Docker 共享大量低级代码，但不依赖于 Docker 平台的任何组件。runc
支持 Linux 命名空间、实时迁移，并有可移植的性能配置文件。
它还完全支持 Linux 安全特性，比如 SELinux、控制组群(cgroups)、seccomp
等等。您可以使用 runc 构建并运行镜像，或者您可以使用 runc 运行 OCI
兼容的镜像。
:::
::: section
::: titlepage
# []{#assembly_working-with-containers_building-running-and-managing-containers.html#con_the-crun-container-runtime_assembly_working-with-containers}crun 容器运行时 {.title}
:::
crun 是一个快速、占用内存少的 OCI 容器运行时，是用 C 语言编写的。crun
二进制文件比 runc 二进制文件小多达 50 倍，快两倍。使用
crun，也可以在运行容器时设置最少的进程数。crun 运行时也支持 OCI hook。
crun 的其他功能包括：
::: itemizedlist
-   对 rootless 容器按组共享文件
-   控制 OCI hook 的 stdout 和 stderr
-   在 cgroup v2 上运行旧版本的 systemd
-   其他程序使用的 C 库
-   可扩展性
-   可移植性
:::
::: itemizedlist
**其他资源**
-   [crun
    简介，一个快速且占用内存少的容器运行时](https://www.redhat.com/sysadmin/introduction-crun){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-containers_building-running-and-managing-containers.html#proc_running-containers-with-runc-and-crun_assembly_working-with-containers}运行带有 runc 和 crun 的容器 {.title}
:::
有了 runc 或
crun，容器可以使用捆绑包进行配置。容器的捆绑包是一个目录，其中包含一个名为
`config.json`{.literal}
的规范文件和根文件系统。根文件系统包含容器的内容。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
``{.literal} 可以是 crun 或 runc。
:::
::: orderedlist
**流程**
1.  拉取 `registry.access.redhat.com/ubi8/ubi`{.literal} 容器镜像：
    ``` literallayout
    # podman pull registry.access.redhat.com/ubi8/ubi
    ```
2.  将 `registry.access.redhat.com/ubi8/ubi`{.literal} 镜像导出到
    `rhel.tar`{.literal} 归档中：
    ``` literallayout
    # podman export $(podman create registry.access.redhat.com/ubi8/ubi) > rhel.tar
    ```
3.  创建 `bundle/rootfs`{.literal} 目录：
    ``` literallayout
    # mkdir -p bundle/rootfs
    ```
4.  将 `rhel.tar`{.literal} 归档解压到 `bundle/rootfs`{.literal}
    目录中：
    ``` literallayout
    # tar -C bundle/rootfs -xf rhel.tar
    ```
5.  为捆绑包创建一个名为 `config.json`{.literal} 的新规范文件：
    ``` literallayout
    #  spec -b bundle
    ```
    ::: itemizedlist
    -   `-b`{.literal} 选项指定捆绑包目录。默认值为当前目录。
    :::
6.  Optional.更改设置：
    ``` literallayout
    # vi bundle/config.json
    ```
7.  为捆绑包创建一个名为 `myubi`{.literal} 的容器实例：
    ``` literallayout
    #   create -b bundle/ myubi
    ```
8.  启动 `myubi`{.literal} 容器：
    ``` literallayout
    #   start myubi
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
容器实例的名称对于主机来说必须是唯一的。要启动容器的一个新实例：`#  start `{.literal}
:::
::: itemizedlist
**验证**
-   列出由 ``{.literal} 启动的容器：
    ``` literallayout
    #  list
    ID               PID         STATUS      BUNDLE            CREATED                          OWNER
    myubi            0           stopped     /root/bundle      2021-09-14T09:52:26.659714605Z   root
    ```
:::
::: itemizedlist
**其他资源**
-   `crun`{.literal} 手册页
-   `runc`{.literal} 手册页
-   [crun
    简介，一个快速且占用内存少的容器运行时](https://www.redhat.com/sysadmin/introduction-crun){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-containers_building-running-and-managing-containers.html#proc_temporarily-changing-the-container-runtime_assembly_working-with-containers}临时更改容器运行时 {.title}
:::
您可以使用 `podman run`{.literal} 命令和 `--runtime`{.literal}
选项来更改容器运行时。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
``{.literal} 可以是 crun 或 runc。
:::
::: itemizedlist
**先决条件**
-   Podman 工具已安装。
    ``` literallayout
    #  dnf module install -y container-tools
    ```
:::
::: itemizedlist
**流程**
-   拉取 `registry.access.redhat.com/ubi8/ubi`{.literal} 容器镜像：
    ``` literallayout
    $ podman pull registry.access.redhat.com/ubi8/ubi
    ```
    ::: orderedlist
    1.  使用 `--runtime`{.literal} 选项更改容器运行时：
        ``` literallayout
        $ podman run --name=myubi -dt --runtime= ubi8 bashe4654eb4df12ac031f1d0f2657dc4ae6ff8eb0085bf114623b66cc664072e69b
        ```
    2.  Optional.列出所有镜像：
        ``` literallayout
        $ podman ps -a
        CONTAINER ID  IMAGE                                   COMMAND  CREATED        STATUS            PORTS   NAMES
        e4654eb4df12  registry.access.redhat.com/ubi8:latest  bash     4 seconds ago  Up 4 seconds ago          myubi
        ```
    :::
:::
::: itemizedlist
**验证**
-   确保 myubi 容器中的 OCI 运行时设为 ``{.literal} ：
    ``` literallayout
    $ podman inspect myubi --format "{{.OCIRuntime}}"
    ```
:::
::: itemizedlist
**其他资源**
-   [crun
    简介，一个快速且占用内存少的容器运行时](https://www.redhat.com/sysadmin/introduction-crun){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-containers_building-running-and-managing-containers.html#proc_permanently-changing-the-container-runtime_assembly_working-with-containers}永久更改容器运行时 {.title}
:::
您可以以 root 用户身份在 `/etc/containers/containers.conf`{.literal}
配置文件中设置容器运行时及其选项，或者以非 root 用户身份在
`$HOME/.config/containers/containers.conf`{.literal}
配置文件中设置容器运行时及其选项。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
``{.literal} 可以是 crun 或 runc 运行时。
:::
::: itemizedlist
**先决条件**
-   Podman 工具已安装。
    ``` literallayout
    #  dnf module install -y container-tools
    ```
:::
::: itemizedlist
**流程**
-   更改 `/etc/containers/containers.conf`{.literal} 文件中的运行时：
    ``` literallayout
    # vim /etc/containers/containers.conf
    [engine]
    runtime = ""
    ```
-   运行名为 myubi 的容器：
    ``` literallayout
    # podman run --name=myubi -dt ubi8 bash
    Resolved "ubi8" as an alias (/etc/containers/registries.conf.d/001-rhel-shortnames.conf)
    Trying to pull registry.access.redhat.com/ubi8:latest…
    ...
    Storing signatures
    ```
:::
::: itemizedlist
**验证**
-   确保 `myubi`{.literal} 容器中的 OCI 运行时设为 ``{.literal}
    ：
    ``` literallayout
    # podman inspect myubi --format "{{.OCIRuntime}}"
    ```
:::
::: itemizedlist
**其他资源**
-   [crun
    简介，一个快速且占用内存少的容器运行时](https://www.redhat.com/sysadmin/introduction-crun){.link}
-   `containers.conf`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-containers_building-running-and-managing-containers.html#con_creating-selinux-policies-for-containers_assembly_working-with-containers}为容器创建 SELinux 策略 {.title}
:::
要为容器生成 SELinux 策略，使用 UDICA 工具。如需更多信息，请参阅 [udica
SELinux
策略生成器简介](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html/using_selinux/creating-selinux-policies-for-containers_using-selinux#introduction-to-udica_creating-selinux-policies-for-containers){.link}。
:::
:::
[]{#assembly_using-podman-in-hpc-environment_building-running-and-managing-containers.html}
::: chapter
::: titlepage
# []{#assembly_using-podman-in-hpc-environment_building-running-and-managing-containers.html#assembly_using-podman-in-hpc-environment_building-running-and-managing-containers}第 5 章 在 HPC 环境中使用 Podman {.title}
:::
您可以使用带有 Open MPI（消息传递接口）的 Podman
，来在高性能计算(HPC)环境中运行容器。
::: section
::: titlepage
# []{#assembly_using-podman-in-hpc-environment_building-running-and-managing-containers.html#proc_using-podman-with-mpi_assembly_using-podman-in-hpc-environment}使用带有 MPI 的 Podman {.title}
:::
这个例子基于 Open MPI 的
[ring.c](https://github.com/open-mpi/ompi/blob/master/test/simple/ring.c){.link}
程序。在这个例子中, 一个值被所有进程以类似环形的方式传递。每次消息通过
rank 0 时，其值就会减少。当每个进程收到 0
信息时，它会把它传递给下一个进程，然后退出。通过先传递
0，每一个进程都会得到 0 信息，并可以正常退出。
::: orderedlist
**流程**
1.  安装 Open MPI:
    ``` literallayout
    $ sudo dnf install openmpi
    ```
2.  要激活环境模块，请输入：
    ``` literallayout
    $ . /etc/profile.d/modules.sh
    ```
3.  加载 `mpi/openmpi-x86_64`{.literal} 模块：