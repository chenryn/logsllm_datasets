1089
1093
1094
1095
1099
1100
1101
1104
1105
1106
1143
1144
1145
1146
1147
1148
1149
1150
2849
libtiff
We performed fuzz testing for five days on ffmpeg, which con-
tains more branches than the other programs. Intriguer discovered
a new bug in ffmpeg that was not found by Qsym. The bug that
Intriguer found in ffmpeg was latent in ffmpeg v2.5, which was
released in December 15, 2014, for four years. Note that ffmpeg is
a program that the state-of-the-art fuzzers like OSS-Fuzz [28] have
intensively tested. This result show that previous fuzzers could not
Session 3A: Fuzzing: Methods and ApplicationsCCS ’19, November 11–15, 2019, London, United Kingdom524Table 11: The number of branches found by fuzzers in 24h fuzzing.
We state the median values of 20 runs along with p values with sta-
tistical tests of Intriguer vs. AFL and Qsym.
Program Seed
empty
objdump
elf
pe
empty
elf
elf
nm
readelf
ffmpeg
mp4
avconv
mp4
tiff2pdf
tiff
bsdtar
tar
Fuzzer
Intriguer
Qsym
AFL
Intriguer
Qsym
AFL
Intriguer
Qsym
AFL
Intriguer
Qsym
AFL
Intriguer
Qsym
AFL
Intriguer
Qsym
AFL
Intriguer
Qsym
AFL
Intriguer
Qsym
AFL
Intriguer
Qsym
AFL
Intriguer
Qsym
AFL
Branches
2950.5
3207.0
2499.5
3296.0
2634.0
2240.0
3050.5
3142.5
2350.5
2848.5
2175.0
1386.5
2826.5
2637.0
2324.5
6823.0
6011.5
5437.0
31420.0
19242.5
13452.0
18222.0
15391.0
12614.0
2351.0
2324.0
2284.5
2623.0
2424.5
1856.5
p
Factor
-
1.087
0.847
-
0.799
0.68
-
-
< 0.002
< 0.001
-
< 10−6
< 10−7
-
1.03 < 0.049
< 10−7
0.771
-
-
0.131
0.764
< 10−5
0.487
-
-
< 10−5
0.933
< 10−7
0.822
-
-
< 10−7
0.881
< 10−7
0.797
-
-
< 10−7
0.612
< 10−7
0.428
-
-
< 10−3
0.845
< 10−7
0.692
-
-
0.989 < 0.002
< 10−5
0.972
-
-
0.924 < 0.002
< 10−7
0.708
pass through highly constrained branches while existing concolic
execution based fuzzers could not run the corresponding code be-
cause of longer execution time. On the contrary, Intriguer was able
to find new execution paths efficiently through trace reduction and
field-level constraint solving, while preserving the effectiveness
of concolic based approach. Table 10 lists the bugs newly discov-
ered and reported by Intriguer. Intriguer found 22 and 19 new bugs
in binutils and libav, respectively, and also found new bugs in
ffmpeg and libtiff.
Based on the observation of Figure 8, and Tables 8, 9, and 10,
we can see that Intriguer detects many bugs both in LAVA
and real-world programs. We can positively answer RQ1.
5.3 RQ2: Code Coverage
To answer RQ2, we examined the ability of fuzzers (Intriguer, Qsym,
and AFL) to discover new branches in 24h fuzzing. We used gcov
to measure branch coverage. Table 11 shows the number of newly
discovered branches as a result of 24h fuzzing on seven real-world
(a) time
(b) coverage
Figure 9: New branches discovered by executing 20 AFL-generated
test cases in Intriguer and Qsym, respectively. (a) Time taken for
execution. (b) Number of new branches. The shaded part of each
bar shows the solving time and the solid part is the emulation time.
Intriguer is faster than Qsym, and also shows the higher coverage.
Table 12: The execution trace size and the execution time reduced
by Intriguer’s trace reduction using different threshold values.
Program
objdump
nm
readelf
ffmpeg
avconv
tiff2pdf
threshold
Trace Size (k lines)
26.9
4.6
21.9
728.4
261.7
13.2
16
36.9
8.8
38.8
729.8
264.9
14.3
32
37.1
11.1
46.3
734.3
269.5
16.4
64
52.8
19.0
66.9
875.5
425.3
30.6
none
Time (s)
59
59
49
48
148
147
104
89
35
41
41
41
32
64
75
62
167
165
188
48
none
42
30
63
87
34
40
16
programs. If the factor is greater than 1, it means the corresponding
fuzzer finds more branches than Intriguer. If the factor is less than
1, it means the corresponding fuzzer finds fewer branches than
Intriguer.
In every case, Intriguer and Qsym achieved the higher branch
coverage than AFL. The constraint solver solves constraints that
fuzzers were not able to solve in hybrid fuzzing, and helps them dis-
cover newer branches. Except for objdump (empty and pe format),
Intriguer achieved greater branch coverage than Qsym. Figure 10
shows branch coverage in objdump, nm, readelf, tiff2pdf and
ffmpeg by 24h experiments. We can see that Intriguer outperformed
both Qsym and AFL on most cases.
In Figure 9, we used 20 test cases generated by AFL in evaluating
execution time and branch coverage of Intriguer and Qsym, respec-
tively. We set the timeout as 90s for both Intriguer and Qsym. The
measured execution time consists of solving time and emulation
time. As depicted in Figure 9, Intriguer outperforms Qsym with
regard to both solving time and emulation time, enabling faster
execution and higher coverage. In particular, large programs, such
as ffmpeg, have significantly reduced execution time and achieved
greater coverage.
Based on the observation of Table 11, and Figures 9 and 10,
we can see that Intriguer increases the code coverage of the
target program. We can positively answer RQ2.
5.4 RQ3: Execution Trace Reduction
To evaluate the effectiveness of trace reduction, we compared the
size of execution traces and the execution time using different
threshold values in trace reduction, on the programs shown in
Session 3A: Fuzzing: Methods and ApplicationsCCS ’19, November 11–15, 2019, London, United Kingdom525(a) objdump
p1 < 10−6 , p2 < 10−7
(b) nm
p1 < 10−5 , p2 < 10−7
(c) readelf
p1 < 10−7 , p2 < 10−7
(d) tiff2pdf
p1 < 0.002 , p2 < 10−5
(e) ffmpeg
p1 < 10−7 , p2 < 10−7
Figure 10: The number of newly discovered branches in each program execution by 24h fuzzing of Intriguer, Qsym, and AFL,
respectively. p1 is a p-value of Intriguer and Qsym, and p2 is of Intriguer and AFL.
Table 13: The number of newly found branches and bugs when
Intriguer performs fuzzing with/without trace reduction in 24h.
Program
objdump
nm
readelf
ffmpeg
avconv
tiff2pdf
# of branches (median)
w/ R
p
3296.0
2826.5
6823.0
31420.0
18222.0
2351.0
w/o R
3068.5 < 10−4
2797.5 = 0.039
6381.5 < 10−6
22699.0 < 10−7
11372.5 < 10−7
2354.5 = 0.186
# of bugs (total)
w/o R
w/ R
11 (6)
5 (0)
3 (0)
4 (1)
4 (0)
6 (2)
1 (0)
2 (1)
4 (3)
1 (0)
1 (0)
1 (0)
Table 12. We used various threshold values (16, 32, 64) and also
skipped (none) the trace reduction step for comparisons. We observe
that with a threshold of 16, the trace size and execution time are