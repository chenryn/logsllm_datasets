### Fuzz Testing on FFmpeg and Other Programs

We conducted fuzz testing for five days on FFmpeg, which has a more extensive branch structure compared to other programs. During this process, Intriguer discovered a new bug in FFmpeg that was not identified by Qsym. This bug had been latent in FFmpeg version 2.5, released on December 15, 2014, for four years. It is noteworthy that FFmpeg is a program that has been intensively tested by state-of-the-art fuzzers such as OSS-Fuzz [28]. This result indicates that previous fuzzers were unable to detect this particular bug.

### Branch Coverage Analysis

#### Table 11: Number of Branches Found by Fuzzers in 24-Hour Fuzzing

We present the median values from 20 runs, along with p-values from statistical tests comparing Intriguer, AFL, and Qsym.

| Program | Seed | Intriguer (Branches) | Qsym (Branches) | AFL (Branches) | p-value (Intriguer vs. Qsym) | p-value (Intriguer vs. AFL) |
|---------|------|---------------------|-----------------|----------------|------------------------------|----------------------------|
| objdump | empty | 2950.5 | 3207.0 | 2499.5 | - | 1.087 | 0.847 |
| objdump | elf | 3296.0 | 2634.0 | 2240.0 | - | 0.799 | 0.68 |
| nm | empty | 3050.5 | 3142.5 | 2350.5 | - | - | < 0.002 |
| readelf | elf | 2848.5 | 2175.0 | 1386.5 | - | < 0.001 | - |
| ffmpeg | mp4 | 2826.5 | 2637.0 | 2324.5 | - | 1.03 | < 0.049 |
| avconv | mp4 | 6823.0 | 6011.5 | 5437.0 | - | < 10−6 | < 10−7 |
| tiff2pdf | tiff | 31420.0 | 19242.5 | 13452.0 | - | 0.771 | - |
| bsdtar | tar | 18222.0 | 15391.0 | 12614.0 | - | 0.131 | 0.764 |

#### Performance Comparison

- **objdump (empty)**: Intriguer found 2950.5 branches, while Qsym found 3207.0 and AFL found 2499.5.
- **objdump (elf)**: Intriguer found 3296.0 branches, while Qsym found 2634.0 and AFL found 2240.0.
- **nm (empty)**: Intriguer found 3050.5 branches, while Qsym found 3142.5 and AFL found 2350.5.
- **readelf (elf)**: Intriguer found 2848.5 branches, while Qsym found 2175.0 and AFL found 1386.5.
- **ffmpeg (mp4)**: Intriguer found 2826.5 branches, while Qsym found 2637.0 and AFL found 2324.5.
- **avconv (mp4)**: Intriguer found 6823.0 branches, while Qsym found 6011.5 and AFL found 5437.0.
- **tiff2pdf (tiff)**: Intriguer found 31420.0 branches, while Qsym found 19242.5 and AFL found 13452.0.
- **bsdtar (tar)**: Intriguer found 18222.0 branches, while Qsym found 15391.0 and AFL found 12614.0.

In every case, Intriguer and Qsym achieved higher branch coverage than AFL. The constraint solver in hybrid fuzzing helps discover newer branches. Except for objdump (empty and pe format), Intriguer achieved greater branch coverage than Qsym.

### Execution Time and Branch Coverage

#### Figure 9: Execution Time and Branch Coverage

We used 20 test cases generated by AFL to evaluate the execution time and branch coverage of Intriguer and Qsym. The timeout was set to 90 seconds for both. The measured execution time includes solving time and emulation time. As shown in Figure 9, Intriguer outperformed Qsym in both solving time and emulation time, enabling faster execution and higher coverage, especially for large programs like ffmpeg.

### Trace Reduction Effectiveness

#### Table 12: Execution Trace Size and Time Reduction

We compared the size of execution traces and the execution time using different threshold values in trace reduction for various programs.

| Program | Threshold | Trace Size (k lines) | Time (s) |
|---------|-----------|---------------------|----------|
| objdump | 16 | 26.9 | 59 |
| objdump | 32 | 36.9 | 59 |
| objdump | 64 | 52.8 | 59 |
| nm | 16 | 4.6 | 59 |
| nm | 32 | 8.8 | 59 |
| nm | 64 | 19.0 | 59 |
| readelf | 16 | 21.9 | 49 |
| readelf | 32 | 38.8 | 49 |
| readelf | 64 | 66.9 | 49 |
| ffmpeg | 16 | 728.4 | 48 |
| ffmpeg | 32 | 729.8 | 48 |
| ffmpeg | 64 | 875.5 | 48 |
| avconv | 16 | 261.7 | 148 |
| avconv | 32 | 264.9 | 148 |
| avconv | 64 | 425.3 | 148 |
| tiff2pdf | 16 | 13.2 | 147 |
| tiff2pdf | 32 | 14.3 | 147 |
| tiff2pdf | 64 | 30.6 | 147 |

With a threshold of 16, the trace size and execution time are significantly reduced, demonstrating the effectiveness of trace reduction.

### New Bugs Discovered

#### Table 13: Newly Found Branches and Bugs

| Program | With Trace Reduction (Branches) | Without Trace Reduction (Branches) | p-value | With Trace Reduction (Bugs) | Without Trace Reduction (Bugs) |
|---------|---------------------------------|------------------------------------|---------|-----------------------------|--------------------------------|
| objdump | 3296.0 | 3068.5 | < 10−4 | 5 (0) | 11 (6) |
| nm | 2826.5 | 2797.5 | 0.039 | 4 (1) | 3 (0) |
| readelf | 6823.0 | 6381.5 | < 10−6 | 6 (2) | 4 (0) |
| ffmpeg | 31420.0 | 22699.0 | < 10−7 | 2 (1) | 1 (0) |
| avconv | 18222.0 | 11372.5 | < 10−7 | 4 (3) | 1 (0) |
| tiff2pdf | 2351.0 | 2354.5 | 0.186 | 1 (0) | 1 (0) |

Intriguer found 22 and 19 new bugs in binutils and libav, respectively, and also discovered new bugs in ffmpeg and libtiff.

### Conclusion

Based on the observations from Table 11, Figures 9 and 10, and Table 13, we can conclude that Intriguer increases the code coverage and discovers new bugs in the target programs. Therefore, we can positively answer RQ1 and RQ2. Additionally, the effectiveness of trace reduction is evident from the significant reduction in execution trace size and time, supporting a positive answer to RQ3.