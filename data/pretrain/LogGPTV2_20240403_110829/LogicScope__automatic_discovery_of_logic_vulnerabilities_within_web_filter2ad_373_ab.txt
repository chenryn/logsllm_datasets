I2
I3
I4
Λ
mea(S2)
O1
O3
O4
Λ
dum(S2)
O2
Σ
exp(S2)
I1
I2
I3
I4
Λ
mea(S2)
O1
O3
O4
Λ
dum(S2)
O2
Figure 2: FSM Representation of Example Applica-
tion
Since a user can send any web request to a web appli-
cation, the input alphabet can be inﬁnite and fed into the
application at any state, resulting in corresponding output
symbols. However, at a given state s, we observe that only
a subset of input symbols are expected by the application
(denoted as Σexp(s)) and processed to generate “meaning-
ful” output symbols (i.e., Λmea(s) = G(s, Σexp(s))). The
expected input symbols are the web requests that can be
issued, if the user follows the navigation links of the web
application and the meaningful output symbols are the web
responses that provide the users with useful information. All
the other input symbols, which are not expected at state
s, should be rejected/mitigated by the application, result-
ing in “dummy” output symbols (i.e., Λdum(s) = G(s, Σ −
Σexp(s))). A dummy output symbol means that the appli-
cation responds the user with an error page or a redirection
header pointing to a previously visited web page, without
leaking any useful information. As shown in Figure 2, for
state s1, the expected input set is {I1}, the meaningful out-
put set is {O1} and the dummy output set is {O2}. For
state s2, the expected input set is {I1, I2, I3, I4} and the
meaningful output set is {O1, O3, O4}. A web application
is expected to fully implement the intended functionality,
which means the behaviors of Fideal and Fimpl over the ex-
pected input symbols should be consistent. However, the
unexpected inputs may not be fully mitigated/rejected by
3. APPROACH
3.1 High-level Overview
As stated in problem formulation, to identify logic vulner-
abilities, we need to construct unexpected (malicious) inputs
for each state and evaluate whether their outputs fall beyond
the dummy output set. This is nontrivial since we have no
knowledge about the entire input alphabet (and thus unex-
pected input) and the dummy output set at each state.
To approach this problem, we ﬁrst construct a partial
FSM over the expected input domain by observing the exe-
cutions of the application when users follow the navigation
paths provided by the application. To do so, we collect
web requests, web responses and associated session vari-
ables during attack-free sessions and symbolize the traces
through several steps: (1) State Construction (Section 3.2),
in which we derive the set of application states S using col-
lected session variables; (2) Input Symbolization (Section
3.3), in which we abstract concrete web requests into input
symbols to proﬁle the expected input domain at each state
(i.e., Σexp(s), ∀s ∈ S); (3) Output symbolization, in which
we leverage the same technique from BLOCK [7] to trans-
form web responses (html pages) into output symbols, which
allows us to obtain the mapping between the expected in-
put and meaningful output symbols (i.e., G(s, Σexp(s)) →
Λmea(s), ∀s ∈ S). We also learn how the application tran-
sitions between states and the corresponding input symbols
that trigger the transitions (i.e., T : S × Σ → S).
Then, we leverage the inferred partial FSM to construct
unexpected inputs at each application state and test the
application. In particular, we have to address two issues: (1)
Test Input Generation: since we only have the knowledge of
the expected input set given a state, how do we construct
unexpected input symbols to test that state? We present
two methods for generating test input vectors in Section
3.4.
(2) Output Evaluation: since we only feed expected
input symbols into the application, we have no knowledge
about the dummy output set given a state. How do we
determine whether the corresponding output symbol falls
beyond the dummy output set, so as to report a potential
logic vulnerability? We give the rule for evaluating output
symbols in Section 3.5.
3.2 State Construction
A web application usually uses session variables to main-
tain the users’ session state. Since a session variable can take
inﬁnite number of values, which results in inﬁnite number of
states, we ﬁrst characterize the value domain for each session
variable. We employ KS-test over the set of values collected
for each session variable and categorize each variable into
two types: (1) bounded, which means that the values of the
variable are bounded to a ﬁnite set. For example, $ SES-
SION[‘privilege’] only assumes two values: user and admin,
indicating two types of users. The value domain of bounded
session variable consists of the set of observed values; (2)
unbounded, which means the number of values the variable
483may take linearly increases with the number of samples. For
example, $ SESSION[‘userid’] can take as many values as
the number of users. The value domain of unbounded ses-
sion variable consists of null and nonnull, where null means
the variable doesn’t exist.
Then, we construct the application state using the Carte-
sian product of the value domains of session variables, which
we refer to as state signature, and identify the set of appli-
cation states from the traces. One example state signature
is [privilege = user] [userid = nonnull], which represents the
application state when a regular user logs in. Theoretically,
the application state space can be huge depending on the
number of session variables and their value domains. In re-
ality, we observe that the actual number of states is much
smaller, since certain session variables are correlated with
each other. For example, when a user logs in, both session
variables are updated and there is no such state possible:
[privilege = user] [userid = null].
3.3 Input Symbolization
Given a collection of web requests, we need to represent
them with a ﬁnite number of input symbols. A web re-
quest consists of a HTTP method (we only consider GET
and POST here), a URL path (the script ﬁle name in the
case of PHP, e.g., index.php) and a set of input parame-
ters. We symbolize each web request with a two-part struc-
ture “Key.Value”: (1) the key (denoted by K) represents the
syntax structure of a web request, which is formed by the
combination of HTTP method and URL path, referred to
as the request key, with a set of parameters, whose order is
sorted alphabetically, e.g., [GET-edit user.php : userid]. (2)
the value (denoted by V ) represents the value domain of pa-
rameters, which indicates certain constraints over parameter
values.
Since a parameter may assume an inﬁnite number of val-
ues, we ﬁrst proﬁle each parameter and construct the “Value”
part of the input symbol based on the value domains of all
parameters, similar to how we build state signature. We
take two steps to characterize the value domain of each
parameter. First, since we observe that there may exist
constraints between the parameter value and the speciﬁc
application state, we proﬁle each parameter at each state
(i.e.,“local” proﬁling). We employ KS-test over the set of
values collected for each parameter with the same request
key at the same state and categorize the parameter into
three types: (1) unbounded random variable (denoted as
pur), which means the variable can take any random value.
We represent its value domain with two abstract values, i.e.,
Θ(pur) = {null, nonnull}, where Θ denotes the value do-
main. (2) unbounded constrained variable (denoted as puc),
which means the variable can take an inﬁnite number of
values but is subject to certain constraints. Here, we only
consider single state-related constraint, where the parameter
value is always equal to a particular session variable (e.g.,
the parameter userid of request key GET-edit user.php at
state s1 is always equal to $ SESSION[‘userid’]). We rep-
resent its value domain with three values, i.e., Θ(puc) =
{null, vconstrained(sess), vunsatisf ied}, where vconstrained de-
notes the value satisfying the constraint, sess denotes the
session variable name and vunsatisf ied denotes all the other
values. (3) bounded variable (denoted as pb), whose value
domain is represented with the set of observed values plus
two additional values: null and voutof bound, where voutof bound
denotes the values that are beyond the bounded set. In the
second step, we combine the local views of the parameter
value domains into a global view (i.e., “global” proﬁling). If
the parameter has consistent value domain types over all the
states, we keep its domain type and re-compute its value do-
main. For pub, its updated value domain is the set of values
divided by multiple constraints, while in reality, this scenario
rarely occurs. For pb, additional values are added into its
value domain. If the parameter has inconsistent value do-
main types over diﬀerent states, we use the more restrictive
domain type and further divide its value domain1. In the
example application, the parameter userid of the request key
GET-edit user.php is constrained by $ SESSION[‘userid’] at
state s1, but inferred as an unbounded random variable at
state s2. Thus, its global value domain type is identiﬁed as
unbounded constrained variable. In this way, we construct
two atomic input symbols (i.e., K1.V1, K1.V2 as shown in
Figure 2) at state s2.
3.4 Test Input Generation
We present two methods for generating test input symbols
at a given state s, as shown in Figure 3. Each method is
designed to echo one type of attack vectors.
Σexp (s)
Σexp (s)
K1.V1
K2.V
K1.V1
K2.V
mutate
Imal = K1.V2
Imal(s)
Σexp (s’)
K1.V2
K3.V
K4.V
Method 1: parameter manipulation
Method 2: forceful browsing
Figure 3: Test Input Generation
3.4.1 Method 1 – Parameter Manipulation
Given an expected input symbol I = K.V ∈ Σexp(s) at
state s, we directly mutate the input symbol, so that the
mutated input symbol falls beyond the expected input set
at state s, i.e., Imal = mutate(I) 6∈ Σexp(s), where mutate
is a function over the input symbol. Speciﬁcally, the mutate
function keeps the “Key” part of input symbol unchanged,
but change the “Value” part by varying the values of one or
several parameters. For an unbounded constrained variable,
we may change its value from vconstrained to vunsatisf ied; for
an bounded variable, we may change its value to another
value in the bounded set or voutof bound. For example, as
shown in Figure 3, the “Value” part of input symbol K1.V1
is mutated to be V2 as a test input vector for state s. This
method echoes the scenario of parameter manipulation at-
tacks, where the attacker tampers the parameter values to
violate the constraint between the web request and the cur-
rent state.
3.4.2 Method 2 – Forceful Browsing
We leverage an expected input symbol from another state
s′, which falls beyond the expected input set of current state
s, i.e., Imal ∈ Σexp(s′)−Σexp(s). We select input symbols at
state s′ with a “Key” structure unobserved at state s as test
1The order of restrictiveness is deﬁned as pb ≫ puc ≫ pur,
where ≫ means “is more restrictive than”.
484input vectors for state s. For example, as shown in Figure 3,
the input symbols at state s′ with “Key” K3 and K4 that
are not observed at state s are used as test input vectors for
state s. This method echoes the scenario of forceful browsing
attacks, where the attacker provides a hidden sensitive link
to the application that should not be accessible at current
state.
3.5 Output Evaluation
Let the output symbol generated by the application af-
ter the test input vector Imal is fed into the application
at state s be Otest. The goal of the output evaluation is
to determine whether Otest falls beyond the dummy out-
put set (i.e., Otest 6∈ Λdum(s)). Since the dummy output
set cannot be observed directly, here we apply the knowl-
edge of the meaningful output set for evaluation. Based on
the deﬁnition of dummy output, it is straightforward that
there is no intersection between the meaningful and dummy
output sets for any states. Thus, if the test output is the
same as any meaningful output, we should report a potential
logic vulnerability. Speciﬁcally, let I be the original input
symbol from which Imal is generated (Imal = mutate(I) in
Method 1; Imal = I in Method 2), and Oorig be the output
symbol generated by feeding the original input symbol I at
the corresponding state (i.e., Oorig = G(s, I) in Method 1;
Oorig = G(s′, I) in Method 2, where s′ is the state from
which I is selected from). The output evaluation rule is:
if Otest = Oorig, we report a potential logic vulnerability.
If a test input vector can be generated from more than
one input symbol (e.g., K1.V3 can be generated from both
K1.V1 and K1.V2), which have diﬀerent output symbols, the
resulting output symbol will be compared to every possible
output symbol.
Since our technique relies on the collected traces, which
may not completely characterize the application behavior,
we report those alerts as potential logic vulnerabilities, which
require human eﬀorts to analyze and conﬁrm.
4.
IMPLEMENTATION
We implement a prototype system LogicScope for identi-
fying logic ﬂaws within PHP web applications. Our tech-
nique only requires session information from the server side,
which is usually maintained externally to the web applica-
tion at either local ﬁles (e.g., at /var/lib/php5 for PHP) or in
database table (e.g., django session for Python). As shown
Figure 4, LogicScope is composed of three major compo-
nents, including Trace Collector, Spec Analzyer and Testing
Engine and executed in three phases: trace collection, FSM
inference and testing.
Trace Collector collects web traﬃc traces during attack-
free sessions. We implement Trace Collector by enhancing
WebScarab proxy with a Session Inspector module, which
collects session variables through communicating with Ses-
sion Exporter deployed on the server. To implement our
technique for other platforms (e.g., JSP), Session Exporter
is the only module that needs to be adapted.
Spec Analyzer is executed to derive both the partial FSM
and the testing speciﬁcation. Traces are ﬁrst fed into Sym-
bolizer and transformed into symbolized session logs, which
are used for deriving the partial FSM (i.e., FSM Analyzer )
and generating testing speciﬁcation (i.e., TestSpec Genera-
tor ), including a set of test input symbols for each state and
corresponding output symbols for evaluation.
Phase I: Trace  Collection
User/
Simulator
Phase II:  FSM Inference
Web request
/response
Session Variable
Session Log
StateProfile