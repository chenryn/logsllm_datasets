Support for resilient Yes, through aliases. Yes, but requires the link-
"shortcuts" tracking system service.
Volume quotas Yes, per-user and per-group Yes, per-user quotas.
quotas.
Support for sparse files No. Yes.
Built-in compression No. Yes.
Built-in encryption No. Yes, through the Encrypting
File System (EFS) facility that
provides application-
transparent encryption.
Built-in change logging No. Yes, through the Change
Journal mechanism.
Support for fault-tolerant No. Yes.
volumes
Reserved area for metadata Yes, the metadata zone. Yes, the MFT Zone.
Built-in support for tracking Yes, adaptive Hot File No.
file access and relocating Clustering.
frequently used files
Support for live resizing Yes, through the Yes, through the
HFS_RESIZE_VOLUME control FSCTL_EXTEND_VOLUME
operation. This support is control operation.
experimental in Mac OS X 10.4
and requires a journaled
volume. It can extend or shrink
a mounted file system if several
conditions are satisfied.
Support for "freezing" the file Yes, through the F_FREEZE_FS Yes, through volume shadow
system and F_THAW_FS control copying.
operations.
Support for "full" sync Yes. The F_FULLFSYNC control No.
operation asks the storage driver
to flush all buffered data to the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Chapter 12. The HFS Plus File System Page 81 of 81
physical storage device.
Support for bulk querying of Yes. The HFS_BULKACCESS No.
access permissions control operation can determine,
in a single system call, whether
the given user has access to a
set of files.
User control of the next Yes. The
allocation location HFS_CHANGE_NEXT_ALLOCATION
control operation allows the
user to specify which block the
file system should attempt to
allocate from next.
Read-only support Yes. Yes.
This concludes our exploration of Mac OS X internalswell, at least as far as this book's chapters are concerned.
I hope the book has given you enough background and tools so that you can now continue the journey on your
own. Happy Exploring!
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhC53.htm 20.08.2007
Appendix A. Mac OS X on x86-Based Macintosh Computers Page 1 of 9
Appendix A. Mac OS X on x86-Based Macintosh Computers
We discussed details of several x86-related features of Mac OS X in earlier chapters. In this appendix, we
will briefly highlight the key differences between the x86-based and PowerPC-based versions of Mac OS
X. It must be noted that despite the differences, most of the operating system is independent of the
processor architecture.
A.1. Hardware Differences
Besides the difference in processors, x86-based and PowerPC-based Macintosh computers have several
other architectural differences. Programs such as ioreg, hwprefs,[1] sysctl, hostinfo, machine, and
system_profiler can be used to glean hardware-related information under Mac OS X. It is beyond the
scope of this appendix to go into the details of hardware differences.
[1] hwprefs is a part of the CHUD Tools package.
$ hostinfo # x86
...
Kernel configured for up to 2 processors.
...
Processor type: i486 (Intel 80486)
Processors active: 0 1
...
Primary memory available: 1.00 gigabytes
...
Load average: 0.02, Mach factor 1.97
$ hostinfo # PowerPC
...
Kernel configured for up to 2 processors.
...
Processor type: ppc970 (PowerPC 970)
Processors active: 0 1
...
Primary memory available: 4.00 gigabytes
...
Load average: 0.02, Mach factor 1.96
Table A1 shows the results of running hwprefs with various arguments on the two platforms. (The x86
machine is a Mac mini Core Duo, whereas the PowerPC machine is a dual 2.5GHz Power Mac G5.)
hwprefs also has processor-specific options, such as ht on the x86 and cpu_hwprefetch on the
PowerPC.
There also now exist several machine-dependent sysctl nodes.
$ sysctl machdep
machdep.cpu.vendor: GenuineIntel
machdep.cpu.brand_string: Genuine Intel(R) CPU 1300 @ 1.66GHz
machdep.cpu.model_string: Unknown Intel P6 family
...
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF655.htm 20.08.2007
Appendix A. Mac OS X on x86-Based Macintosh Computers Page 2 of 9
Table A1. Running hwprefs on the x86 and PowerPC Versions of Mac OS X
Sample Output on
Command Sample Output on x86 PowerPC
hwprefs machine_type Macmini1,1 PowerMac7,1
hwprefs cpu_type Intel Core Duo 970FX v3.0
hwprefs memctl_type Intel 945 v0 U3 Heavy 1.1 v5
hwprefs ioctl_type ICH7-M v0 K2 v96
hwprefs os_type Mac OS X 10.4.6 (8I1119) Mac OS X 10.4.6 (8I127)
A.2. Firmware and Booting
We saw in earlier chapters (in particular, Section 4.16) that the x86-based Macintosh computers use the
Extensible Firmware Interface (EFI) as their firmware, whereas Open Firmware is used on the PowerPC.
While booting, like Open Firmware, EFI examines the volume headers of available HFS+ volumes. A
bootable (blessed) volume's header contains information about the Mac OS X bootloader. As Figure A1
shows, the bless command can be used to display this information.
Figure A1. Using the bless command to view boot-related information in the volume header
$ bless -info / # x86-based Macintosh
finderinfo[0]: 3050 => Blessed System Folder is /System/Library/CoreServices
finderinfo[1]: 6484 => Blessed System File is /System/Library/CoreServices/boot.efi
...
$ bless -info / # PowerpPC-based Macintosh
finderinfo[0]: 3317 => Blessed System Folder is /System/Library/CoreServices
finderinfo[1]: 0 => No Startup App folder (ignored anyway)
...
Figure A1 shows that in the case of an x86-based Macintosh, the volume header contains the path to
boot.efi, which is the bootloader. boot.efi, a PE32 executable image, is a special EFI application
whose job is similar to that of BootX on Open Firmware machines.
$ cd /System/Library/CoreServices
$ ls -l BootX boot.efi
-rw-r--r-- 1 root wheel 170180 Mar 17 07:48 BootX
-rw-r--r-- 1 root wheel 134302 Mar 17 07:48 boot.efi
You can cause EFI to run an alternate bootloader by recording the latter's pathname in the volume header
using bless.
$ bless --folder /SomeVolume/SomeDirectory/ \
--file /SomeVolume/SomeDirectory/SomeEFIProgram.efi
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF655.htm 20.08.2007
Appendix A. Mac OS X on x86-Based Macintosh Computers Page 3 of 9
The Apple EFI Runtime kernel extension (AppleEFIRuntime.kext) provides access to EFI runtime
services, which, as we saw in Chapter 4, are available even after EFI boot services have been terminated.
AppleEFIRuntime.kext contains AppleEFINVRAM.kext as a plug-in extension. Like Open Firmware, the
EFI NVRAM is used to store user-defined variables and other special-purpose variables (e.g., aapl,
panic-info, which holds kernel-panic information). Again, as in the case of Open Firmware, the nvram
command can be used to access these variables from Mac OS X.
The global kernel variables gPEEFISystemTable and gPEEFIRuntimeServices contain pointers to the
EFI System Table (the EFI_SYSTEM_TABLE data structure) and the EFI Runtime Services (the
EFI_RUNTIME_SERVICES data structure), respectively. The  header in the Kernel
framework contains definitions of these and other EFI-related data structures.
$ nrvam -p
efi-boot-device-data %02%01...
SystemAudioVolume %ff
efi-boot-device ...
boot-args 0x0
aapl,panic-info ...
A.3. Partitioning
As we noted in Section 11.1.3, x86-based Macintosh computers do not use the Apple partitioning scheme
(also called Apple Partition Map, or APM)they use the GUID Partition Table (GPT) scheme, which is
defined by EFI. Specifically, internal drives use GPT, whereas external drives use APM by default. We
discussed GPT in Section 4.16.4.4. We also saw an example of working with GPT partitions using the gpt
command in Section 11.4.4. We can use gptand other commands such as diskutil and hdiutilto
display partitioning-related information about a volume, say, the root volume. Figure A2 shows an
example.
Figure A2. Using command-line tools to display partitioning-related information
$ mount
/dev/disk0s2 on / (local, journaled)
$ sudo gpt -r show /dev/rdisk0
start size index contents
0 1 PMBR
1 1 Pri GPT header
2 32 Pri GPT table
34 6
40 409600 1 GPT part - C12A7328-F81F-11D2-BA4B-00A0C93EC93B
409640 311909984 2 GPT part - 48465300-0000-11AA-AA11-00306543ECAC
312319624 262151
312581775 32 Sec GPT table
312581807 1 Sec GPT header
$ diskutil info disk0
...
Partition Type: GUID_partition_scheme
Media Type: Generic
Protocol: SATA
...
$ sudo hdiutil pmap /dev/rdisk0
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF655.htm 20.08.2007
Appendix A. Mac OS X on x86-Based Macintosh Computers Page 4 of 9
...
We see in Figure A2 that the disk has two partitions, the second of which (disk0s2) is the root volume.
The first partition, which is about 200MB (409600 512-byte blocks) in size, is a FAT32 partition that
could be used by EFI as a dedicated on-disk system partition (see Section 4.16.4.4). You can normally
mount this partition from Mac OS X.
$ mkdir /tmp/efi
$ sudo mount_msdos /dev/disk0s1 /tmp/efi
kextload: /System/Library/Extensions/msdosfs.kext loaded successfully
$ df -k /tmp/efi
Filesystem 1K-blocks Used Avail Capacity Mounted on
/dev/disk0s1 201609 0 201608 0% /private/tmp/efi
A.4. Universal Binaries
We discussed the structure of a Universal Binary in Chapter 2. In the x86 version of Mac OS X, almost all
[2] Mach-O executablesincluding the kernelare Universal Binaries.
[2] The executable that corresponds to Rosetta is not Universalit is x86-only.
Even with a Universal installation of the entire operating system, for such an installation to boot on both
the PowerPC and x86 platforms, the respective firmware implementations will have to understand the
partitioning scheme in use.
$ file /mach_kernel
/mach_kernel: Mach-O universal binary with 2 architectures
/mach_kernel (for architecture ppc): Mach-O executable ppc
/mach_kernel (for architecture i386): Mach-O executable i386
$ lipo -thin ppc /mach_kernel -output /tmp/mach_kernel.ppc
$ lipo -thin i386 /mach_kernel -output /tmp/mach_kernel.i386
$ ls -l /tmp/mach_kernel.*
-rw-r----- 1 amit wheel 4023856 Feb 4 17:30 /tmp/mach_kernel.i386
-rw-r----- 1 amit wheel 4332672 Feb 4 17:30 /tmp/mach_kernel.ppc
Note that the x86 kernel is somewhat smaller than the PowerPC kernel. Let us look at another examplethat
of the system library.
...
-rw-r----- 1 amit wheel 1873472 Feb 4 17:30 /tmp/libSystem.B.dylib.i386
-rw-r----- 1 amit wheel 2216288 Feb 4 17:30 /tmp/libSystem.B.dylib.ppc
Again, we see that the x86 version of the system library is somewhat smaller. In general, x86 binaries are
smaller than PowerPC binaries. One reason is that the latter has a fixed instruction size (4 bytes, with 4-
byte alignment), whereas the x86 has variable-size instructions (ranging from 1 byte to over 10 bytes).
Figure A3 shows a simple experiment to compare the size of an "empty" C program's executables when
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF655.htm 20.08.2007
Appendix A. Mac OS X on x86-Based Macintosh Computers Page 5 of 9
the program is compiled for x86, PowerPC, and 64-bit PowerPC.
Figure A3. Compiling an "empty" C program on the x86, PowerPC, and 64-bit PowerPC
$ cat empty.c
main() {}
$ gcc -arch i386 -o empty-i386 empty.c
$ gcc -arch ppc -o empty-ppc empty.c
$ gcc -arch ppc64 -o empty-ppc64 empty.c
$ ls -l empty-*
-rwxr-xr-x 1 amit wheel 14692 Feb 4 17:33 empty-i386
-rwxr-xr-x 1 amit wheel 17448 Feb 4 17:33 empty-ppc
-rwxr-xr-x 1 amit wheel 14838 Feb 4 17:33 empty-ppc64
A.5. Rosetta
We briefly discussed Rosetta in Section 2.11.9. Rosetta is a binary translation process that allows
unmodified PowerPC executables to run on x86-based Macintosh computers. Rosetta's implementation
consists of a program (/usr/libexec/oah/translate), a daemon (/usr/libexec/oah/translated), a
collection of library/framework shims (/usr/libexec/oah/Shims/*), and support in the kernel, which
has explicit knowledge of the translate program.
$ sysctl kern.exec.archhandler.powerpc # read-only variable
kern.exec.archhandler.powerpc: /usr/libexec/oah/translate
$ strings /mach_kernel
...
/usr/libexec/oah/translate
...
The translate program can also be used from the command line to run programs under Rosetta. Figure
A4 shows the source for a program that can be run both natively and under Rosetta to highlight the byte-
ordering difference (see Section A.6) between the PowerPC and x86 platforms.
Figure A4. Running a program both natively and under Rosetta
// endian.c
#include 
int
main(void)
{
int i = 0xaabbccdd;
char *c = (char *)&i;
printf("%hhx %hhx %hhx %hhx\n", c[0], c[1], c[2], c[3]);
return 0;
}
$ gcc -Wall -arch i386 -arch ppc -o endian endian.c
$ time ./endian # native (little-endian)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF655.htm 20.08.2007
Appendix A. Mac OS X on x86-Based Macintosh Computers Page 6 of 9
dd cc bb aa
./endian 0.00s user 0.00s system 77% cpu 0.004 total
$ time /usr/libexec/oah/translate ./endian # under Rosetta (big-endian)
aa bb cc dd
/usr/libexec/oah/translate ./endian 0.01s user 0.08s system 97% cpu 0.089 total
Rather than directly using translate, Universal binaries can be forced to run under Rosetta through
several more appropriate means, such as the following.
Set the "Open using Rosetta" option in the Info window of an application. This adds an entry to the
LSPrefsFatApplications dictionary in the per-user com.apple.LaunchServices.plist file.
 Add the key named LSPrefersPPC, with its value being TRue, in the Info.plist file of an
application.
 Use the sysctlbyname() library function in a program to set the value of the sysctl named
sysctl.proc_exec_affinity to CPU_TYPE_POWERPC. Thereafter, a Universal binary launched
through fork() and exec() will cause the PowerPC version to run.
Whereas Rosetta has support for AltiVec, it does not support executables that require a G5 processor
(which means it also does not support 64-bit PowerPC executables).
Note that Rosetta reports a PowerPC G4 processor to programs. Running the host_info program from
Figure 61 under Rosetta will show the following:
...
cpu ppc7400 (PowerPC 7400, type=0x12 subtype=0xa threadtype=0x0
...
A.6. Byte Ordering
The byte-ordering difference between the x86 and PowerPC platforms, along with the resultant caveats
and handling approaches, are discussed in detail in Apple's documentation. A noteworthy point is that the
HFS+ file system uses big-endian ordering for storing multibyte integer values.
The PowerPC version of hfsdebug, the accompanying program to Chapter 12, can also be used on x86-
based computers, courtesy of Rosetta. Note that on the x86, hfsdebug has to explicitly swap the journal
data it reads from disk.
A.7. Miscellaneous Changes
Finally, let us look at a few miscellaneous system-level changes introduced in the x86 version of Mac OS
X.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF655.htm 20.08.2007
Appendix A. Mac OS X on x86-Based Macintosh Computers Page 7 of 9
A.7.1. No Dual-Mapped Kernel Address Space
The kernel is not mapped into the address space of each taskit has its own 4GB address space. As we saw
earlier, this is also the case with the PowerPC version of Mac OS X. Previous versions of Darwin/x86
(including the prototype x86-based Apple machines) did map the kernel into each user address space. An
important reason for the change is the need to support video drivers for graphics cards with large amounts
of physical memory. In a system with such a card (perhaps even multiple cards), if the driver wishes to
map the entire memory of the card(s), a limited kernel address space would be problematic.
A.7.2. Nonexecutable Stack
The processors used in the x86-based Macintosh computers support a per-page nonexecutable bit, which
can be used to implement a nonexecutable stack. The latter is one approach to countering the stack
overflow class of security attacks. The approach can be generalized to making any kind of buffers
nonexecutable, so that even if an attacker manages to introduce rogue code into a program's address space,
it simply cannot be executed. This bit is enabled on the x86 version of Mac OS X. The program shown in
Figure A5 attempts to "execute" the stack, which contains illegal instructions (all zeros). The program will
fail with an illegal instruction error on the PowerPC. In contrast, on the x86, access to the memory would
be disallowed for execution, and the program would fail with a bus error.
Figure A5. Testing a nonexecutable stack on the x86 version of Mac OS X
// runstack.c
#include 
typedef void (* funcp_t)(void);
int
main(void)
{
funcp_t funcp;
uint32_t stackarray[] = { 0 };
funcp = (funcp_t)stackarray;
funcp();
return 0;
}
$ gcc -Wall -o runstack runstack.c
$ machine
ppc970
$ ./runstack
zsh: illegal hardware instruction ./runstack
$ machine
i486
$ ./runstack
Bus error
Note, however, that a program can programmatically change a page's protection value to allow for
execution. For example, the vm_protect() Mach call (see Chapter 8 for details) can be used for this
purpose.
// stackarray not executable
...
vm_protect(mach_task_self(), stackarray, 4, FALSE, VM_PROT_ALL);
// stackarray executable now
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF655.htm 20.08.2007
Appendix A. Mac OS X on x86-Based Macintosh Computers Page 8 of 9
...
A.7.3. Thread Creation
In Section 7.3.1.2, we saw an example (Figure 720) of creating a Mach thread within an existing task.
Thread creation on x86 is largely identical, except that setup of the thread's initial state is x86-specific.
Figure A6 shows an excerpt from the x86 version of the my_thread_setup() function from Figure 720.
Figure A6. Setting up a newly created thread's state on the x86 version of Mac OS X
void
my_thread_setup(thread_t th)
{
kern_return_t kr;
mach_msg_type_number_t count;
i386_thread_state_t state = { 0 };
uintptr_t *stack = threadStack;
...
count = i386_THREAD_STATE_COUNT;
kr = thread_get_state(th, i386_THREAD_STATE,
(thread_state_t)&state, &count);
...
//// setup of machine-dependent thread state
// stack (grows from high memory to low memory)
stack += PAGE_SIZE;
// arrange arguments, if any, while ensuring 16-byte stack alignment
*--stack = 0;
state.esp = (uintptr_t)stack;
// where to begin execution
state.eip = (unsigned int)my_thread_routine;
kr = thread_set_state(th, i386_THREAD_STATE, (thread_state_t)&state,
i386_THREAD_STATE_COUNT);
...
}
A.7.4. System Calls
When we discussed PowerPC system call processing in Chapter 6, we saw that in order to invoke a
system call, the call number is passed in GPR0, and the sc instruction is executed. On the x86, the system
call number is passed in the EAX register, and the sysenter instruction is used to enter the system call.
Figure A7 shows an assembly-language excerpt for invoking a system call.
Figure A7. Invoking a system call on the x86 version of Mac OS X
movl $N,%eax ; we are invoking system call number N
...
popl %edx
movl %esp,%ecx
sysenter
...
A.7.5. No /dev/mem or /dev/kmem
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF655.htm 20.08.2007
Appendix A. Mac OS X on x86-Based Macintosh Computers Page 9 of 9
Beginning with the first x86 version of Mac OS X, the /dev/mem and /dev/kmem devices are no longer
available. Consequently, interfaces such as kvm(3) are also not available. Rather than accessing raw
kernel memory, user programs are now expected to use only published interfacessuch as the I/O Kit user
library and the sysctl interfaceto access kernel information.
This book's accompanying web site provides information about writing a kernel extension that
provides /dev/kmem's functionality.
A.7.6. A New I/O Kit Plane
The I/O Registry has a new planethe ACPI plane (IOACPIPlane)on the x86 version of Mac OS X. The
ACPI plane's root node, called acpi, is an instance of the IOPlatformExpertDevice class.
Advanced Configuration and Power Interface (ACPI) exists as an interface for allowing the operating
system to direct configuration and power management on the computer.
$ ioreg -p IOACPIPlane -w 0
+-o acpi 
+-o CPU0@0 
+-o CPU1@1 
+-o _SB 
+-o PWRB 
+-o PCI0@0 
+-o PDRC 
+-o GFX0@20000 
| +-o VGA@300 
| +-o TV@200 
+-o HDEF@1b0000 
...
+-o SATA@1f0002 
| +-o PRID@0 
| | +-o P_D0@0 
| | +-o P_D1@1 
| +-o SECD@1 
| +-o S_D0@0 
| +-o S_D1@1 
+-o SBUS@1f0003 
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF655.htm 20.08.2007