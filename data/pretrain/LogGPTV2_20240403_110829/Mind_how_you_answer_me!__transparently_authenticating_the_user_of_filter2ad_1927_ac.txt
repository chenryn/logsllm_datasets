centage of successful accesses to the system by impostors, pretend-
ing to be the authorized users.
Table 1 summarizes the notation and abbreviations used in this
paper.
4. A NOVEL BIOMETRIC AUTHENTICA-
TION
In the literature (cfr. Section 2) there is no efﬁcient and effective
solution to transparently authenticate a user while she answers (or
places) a phone call. However, we argue that it is possible to use
the values obtained from the accelerometer and orientation sensors
(while the user answers, or places, a call) as a biometric measure in
order to authenticate the user.
In this section, we ﬁrst report on a preliminary assessment of
our intuition (Section 4.1). Based on the preliminary conﬁrmation
of our intuition, we propose four different basic methods (Section
4.2), that are the result of all the possible combinations of consid-
ered sensors (accelerometer sensor Sa, and orientation sensor So),
resents the time (starting from the moment the call is initiated), and
the y-axis (of the ﬁgure) represents the corresponding measured
acceleration (on the x-axis of the phone).
Table 1: Notation and Abbreviations.
Symbol Meaning
FAR
IPR
False Alarm Rate
Impostor Pass Rate
DTW-D Dynamic Time Warping algorithm with distance feature
DTW-S Dynamic Time Warping algorithm with similarity feature
SA
SO
T
ti
(cid:28)
(cid:28)D
(cid:28)S
^(cid:28)
Accelerometer sensor
Orientation sensor
Size of training set
i-th training pattern (i=1, . . . , T )
A generic threshold value
Threshold value for algorithm DTW-D
Threshold value for algorithm DTW-S
Threshold value for combined methods
and considered similarity algorithms (DTW-D and DTW-S). Fur-
thermore, we propose to combine together the basic methods. First,
we do this with simple boolean operations (Section 4.3). After, we
propose a novel way of combining the basic methods. In particular,
we leverage the following fact.
While the ﬁnal answer of a basic method can only be 1 (accept
the user) or 0 (reject the user), we argue that the similarity values
computed by these methods actually express more information on
the likelihood that the current user is the correct one. Our proposed
non-boolean combination (Section 4.4) aims at combining methods
in a way such that this additional information can be leveraged to
improve, at the same time, both FAR and IPR. The evaluation of all
the proposed methods (basic methods and combined ones) is shown
in Section 5.
4.1 Intuition Assessment
(a) User 1
Our proposal is based on the intuition that the movement a user
performs while answering (or placing) a call might be used as a bio-
metric measure. In the following, we will refer to this movement
(as well as the measures associated with it) as a pattern. In particu-
lar, we assume that when the phone rings ﬁrst the user handles the
phone in front of her—to see who is calling—then she presses the
“start” button to initiate the call. Similarly, when the user places
a call, we assume she handles the phone in front of her—to com-
pose the number or search for a name in the contact list—, then she
presses the “start” button to initiate the call. We speciﬁcally con-
sider the movement that begins from the instant the user presses
“start”, until she handles to phone close to the ear.
We run some preliminary experiments to have a conﬁrmation of
our intuition. That is, we were looking for a preliminary assessment
of the following question: can the measurements associated with
the described movement be used as a biometric measure to discern
between different users? In practice, the aim of these experiments
were just to observe how close are the values measured for the same
user, and how far are the patterns observed for different users.
We wrote an Android application that logs the values sensed by
the accelerometer sensor (acceleration on x, y, and z-axis) and the
orientation sensors (pitch, roll, and yaw), while the user moves
the phone accordingly to the described pattern. We collected this
data by asking 10 users to use the test application to trace data of
several movement patterns. For space limitation, we report here
only part of the results we obtained. In particular, we only report
here (Figure 1) the values of the acceleration on x-axis (of the ac-
celerometer sensor) obtained with two users (User 1 and User 2),
each one performing the movement ﬁve times (Pattern 1, Pattern 2,
Pattern 3, Pattern 4, and Patterns 5). Figure 1(a) shows the results
of the ﬁve patterns of User 1. Figure 1(b) shows the results of the
ﬁve patterns of User 2. In particular, the x-axis (of the graph) rep-
(b) User 2
Figure 1: Examples of patterns. Accelerometer Sensor: accel-
eration observed on x-axis of the phone (plotted on the y-axis
on the graphs).
From Figure 1(a) we observe that the different patterns of the
User 1 are very close to each other. On the other hand, the patterns
of User 1 are far from the ones of User 2. However, we also observe
as the patterns of User 2 are not close to each other as they are
the ones of User 1. A similar behavior has been observed also for
other movement patterns, for other users, and for other measured
values—not reported in Figure 1—i.e. for the other sensor values
(y and z-axis for the accelerometer sensor; pitch, roll, and yaw for
the orientation sensor). While the intuition seems to be conﬁrmed
by these preliminary results, these data are not sufﬁcient to assess
the effectiveness of a possible approach.
4.2 Basic Methods
We propose four different basic methods. These are the result of
all the possible combinations of the considered sensors (accelerom-
eter sensor Sa, and orientation sensor So), and considered similar-
ity algorithms (DTW-D and DTW-S). Hence, the resulting methods
are:
253
-12-10-8-6-4-2 0 2 4 6 0 200 400 600 800 1000 1200 1400 1600 1800Acceleration on x-axis of the phoneTime (ms) Pattern 1Pattern 2Pattern 3Pattern 4Pattern 5-10-8-6-4-2 0 2 4 0 200 400 600 800 1000 1200 1400 1600 1800Acceleration on x-axis of the phoneTime (ms) Pattern 1Pattern 2Pattern 3Pattern 4Pattern 5• DTW-D-Sa: this method applies DTW-D algorithm to the
data collected by the accelerometer sensor (Sa);
• DTW-D-So: this method applies DTW-D algorithm to the
data collected by the orientation sensor (So);
this method applies DTW-S algorithm to the
data collected by the accelerometer sensor (Sa);
• DTW-S-Sa:
• DTW-S-So:
this method applies DTW-S algorithm to the
data collected by the orientation sensor (So).
We remind that both DTW-D and DTW-S need a training phase,
that is, they need to store a set of T training patterns. Furthermore,
the results of these algorithms are inﬂuenced by the value that is
considered as threshold, (cid:28), in order to either accept or reject a new
test pattern (not in the training set). In particular, we denote the
threshold used for DTW-D and DTW-S, with (cid:28)D and (cid:28)S, respec-
tively. We expect to get more users accepted while having a less
strict threshold. We remind that, because of the speciﬁc working
of the algorithms, for DTW-D this happens when increasing (cid:28)D,
while for DTW-S this happens when decreasing (cid:28)S. We investigate
the inﬂuence of these parameters (T , (cid:28)D, and (cid:28)S) in Section 5.1.
We ﬁnally observe that varying a threshold will always inﬂuence
FAR and IPR in an opposite way. For example, increasing (cid:28)D in
the DTW-D algorithm would decrease FAR. However, IPR will be
increased. Similarly for other variation of parameter: whenever a
variation brings a positive inﬂuence on one of the performance met-
rics (FAR or IPR), the same variation brings a negative inﬂuence on
the other performance metric.
4.3 Boolean Combinations
In this section, we describe some simple boolean ways of com-
bining the basic methods presented in Section 4.2. The boolean
combinations take as input the binary results of the basic meth-
ods: 1, for accepted patterns, and 0, for rejected patterns. We build
these methods to discuss the behaviour of FAR and IPR, and also
as building blocks for the methods proposed in Section 4.4.
First, we propose to combine two methods with a boolean op-
erator. This mechanism of combination is independent from the
speciﬁc basic methods considered as building blocks. So, we refer
in general terms to the building block methods as Method A and
Method B. Similarly, we refer to FAR and IPR of Method A as
FARA and IPRA (FARB and IPRB, for Method B). When com-
bining two basic methods with AND (cfr. Table 2), a test pattern
will be accepted only if both methods accept it (fourth line of Table
2).
Line n. method A method B AND combination
1
2
3
4
0
0
1
1
0
1
0
1
0
0
0
1
Table 2: Output of combination with AND.
Let us now discuss the case of the third line of Table 2: Method
A accepts the user, while Method B rejects her. It is clear that in
this case, one of the methods has failed; either (i) the user is an
impostor and Method A is wrong, or (ii) the user is the correct one
and Method B is wrong. In case (i), Method A makes a mistake that
would lead to an higher IPR. Hence, taking the AND combination
of the two results, the Method B might help to reduce the mistakes
254
of Method A, hence reducing the IPR. However, it could also be
the other way around: case (ii). That is, Method B is wrongly
rejecting a pattern from the correct user, this leading to an increase
of the FAR. Unfortunately, in this scenario, the AND combination
does not allow Method A to help reduce these type of mistakes of
Method B, hence not allowing a reduction of FAR (note that an
OR combination would allow this to happen). As a general result,
considering the cases laying in the other lines of Table 2, the AND
combination:
• can only reduce the IPR. Resulting IPR will enjoy IPR ≤
IPRA, IPR ≤ IPRB. That is:
IP R ≤ min{IP RA; IP RB}:
(3)
• can only increase the FAR. Resulting FAR will enjoy FAR ≥
FARA, FAR ≥ FARB. That is:
F AR ≥ max{F ARA; F ARB}:
(4)
In terms of sets we can describe the AND combination as fol-
lows. Let us consider the following two sets: the set IPA, of pat-
terns that result to be impostor pass cases for Method A, and the set
IPB, of patterns that results to be impostor pass cases for Method
B. The improvement that an AND combination can lead to the re-
sulting IPR depends on the size of IPA ∩ IPA. In fact, if IPA ∩ IPA
= ∅, the IPR of the combinations will be 0. On the other side, if
IPA ∩ IPA = IPA = IPB then IPR will be IPR=IPRA=IPRB.
In general, using AND the patterns will be accepted only when
both methods accept it. In this way, the number of accepted patterns
decreases, potentially decreasing IPR (i.e.
the actual decreasing
depends on the size of IPA∩ IPA), and potentially increasing FAR.
When using OR, the patterns will be accepted even if only one
of the methods accepts it. In this way, the number of patterns that
get accepted increases, potentially reducing FAR and potentially
increasing IPR. Hence, the IPR resulting from an OR combination,
will enjoy:
IP R ≤ min{IP RA; IP RB}:
(5)
While for the FAR of an OR combination, the following equation
holds:
F AR ≥ max{F ARA; F ARB}:
(6)
We might also combine the four building blocks methods all to-
gether at the same time, instead of just two by two as described.
In this way, the combination mechanism accepts the user based on
how many basic methods accept the user (i.e. if n = 1, 2, 3, or 4 out
of 4 methods accept her). We expect to get less patterns accepted
as we increase n, hence a decreasing IPR, and an increasing FAR.
We can conclude this section by observing that, combining basic
methods with boolean operations can be helpful to select a different
combination of FAR and IPR. That is, as it is possible by varying T
and (cid:28), also with boolean combinations we might look for a different
value of one of the performance metrics (FAR and IPR). However,
we observe that also with boolean combinations is not possible to
improve both FAR and IPR at the same time.
The best possible scenario expected for boolean combinations
is that, compared to one of the basic method, one of the metric
improve, while the other remain the same. The analysis cannot tell
us the chance to have such cases—the actual behaviour depends on
the speciﬁc users’ patterns, that is it depends on the size of the set