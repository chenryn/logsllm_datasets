### Reliability and Performance Evaluation

The WCET (Worst-Case Execution Time) analyzer demonstrated its reliability by handling real-life sized programs on common hardware, such as a 1GHz Athlon processor. The evaluation was conducted by Airbus France personnel, who did not require specialized knowledge in program analysis. The graphical visualization features of the tool, including WCET distribution over all called functions and cycle-wise pipeline evolution, were particularly helpful. The analyzer provided safe and tight WCET predictions, often outperforming the legacy method used for comparison.

### Application and Results

The application under evaluation consisted of 12 tasks, each requiring an individual WCET. Table 1 compares the WCETs computed by Airbus' method with those from AbsInt’s aiT. The improvements in precision are attributed to the detailed modeling of hardware features in aiT, which allows for more accurate predictions while still providing correct upper bounds of the true WCETs.

| Task | Airbus’ method (ms) | aiT’s results (ms) | Improvement (%) |
|------|---------------------|--------------------|-----------------|
| 1    | 6.11                | 5.50               | 10.0            |
| 2    | 6.29                | 5.53               | 12.0            |
| 3    | 6.07                | 5.48               | 9.7             |
| 4    | 5.98                | 5.61               | 6.2             |
| 5    | 6.05                | 5.54               | 8.4             |
| 6    | 6.29                | 5.49               | 12.7            |
| 7    | 6.10                | 5.35               | 12.3            |
| 8    | 5.99                | 5.49               | 8.3             |
| 9    | 6.09                | 5.45               | 10.5            |
| 10   | 6.12                | 5.39               | 11.9            |
| 11   | 6.00                | 5.19               | 13.5            |
| 12   | 5.97                | 5.40               | 9.5             |

Since true WCETs cannot be known in general, the only way to validate WCET computation methods is to measure real executions and compare them against the predicted values. It was verified that the predicted WCETs were greater than, but not far from, the observed running times. The code did not need to be instrumented, and no changes to the development process were required.

### Practical Experiences

During the DAEDALUS project, the WCET analyzer was evaluated by Airbus France to assess its precision, usability, scalability, and overall reliability. The evaluation was conducted on a representative benchmark for time-critical avionics software, consisting of twelve tasks activated in a round-robin fashion by a non-preemptive scheduler. Each task comprised hundreds of smaller components called nodes and functions.

The results of the evaluation were very encouraging. The WCET tool can be used not only to verify WCET constraints but also in earlier stages of the development process. For instance, when the software is available but the hardware is not, the tool can be used for performance evaluation. Design decisions, such as static scheduling or code/data placement, can be made based on the contributions of program parts to the WCET. The visualization options of the tool help in identifying the effects on the cache and pipeline and in pinpointing causes of unexpected local timing behavior.

### Conclusions

We have presented a tool for obtaining WCETs for time-critical real-time systems. The tool, based on static analysis techniques, does not require the actual hardware of the system. Evaluated in a real-life setting by Airbus France, the results are very promising. The tool provides safe and tight WCET bounds and can be applied to realistically sized programs and environments.

### Future Work

The methodology underlying the WCET analyzer for the ColdFire 5307 is being used to implement a WCET analyzer for the PowerPC 755, a more sophisticated processor featuring super-scalarity, out-of-order execution, branch prediction, and truly parallel execution units. A prototype of this WCET analyzer is currently undergoing extensive verification.

We plan to model more processors for further WCET analyzers and investigate a more formal way to specify the pipeline model and derive its implementation.

### Related Work

A significant body of literature exists on WCET determination. We have listed references dealing with complex processors containing all features considered in combination, rather than architectural features in isolation.

- **Li et al.** [8] suggest a solution using integer linear programming (ILP) for both cache and pipeline behavior prediction. The i960KB, a 32-bit microprocessor, is investigated. This approach is elegant but may not scale well for super-scalar pipelines.
  
- **Lundqvist and Stenström** [9, 10] present an integrated approach for obtaining WCET bounds through the simulation of the pipeline. Their method simulates both branches if the branch condition cannot be determined exactly, which can be costly due to the large amount of data retained.

- **Engblom** [2] presents a WCET tool with a clear separation of analysis modules. The quality of the WCET obtained depends on the simulator used. The author concludes that out-of-order processors are too complex to model with current techniques.

### References

[1] P. Cousot and R. Cousot. Abstract Interpretation: A Unified Lattice Model for Static Analysis of Programs by Construction or Approximation of Fixpoints. In Proceedings of the 4th ACM Symposium on Principles of Programming Languages, pages 238–252, Jan. 1977.

[2] J. Engblom. Processor Pipelines and Static Worst-Case Execution Time Analysis. PhD thesis, Uppsala University, 2002.

[3] C. Ferdinand. Cache Behavior Prediction for Real-Time Systems. PhD thesis, Saarland University, 1997.

[4] C. Ferdinand, R. Heckmann, M. Langenbach, F. Martin, M. Schmidt, H. Theiling, S. Thesing, and R. Wilhelm. Reliable and precise WCET determination for a real-life processor. In Proceedings of EMSOFT 2001, First Workshop on Embedded Software, volume 2211 of Lecture Notes in Computer Science, 2001.

[5] R. Heckmann and S. Thesing. Cache and Pipeline Analysis for the ColdFire 5307. Technical report, Saarland University, 2001.

[6] M. Inc. MCF5307 ColdFire Integrated Microprocessor User’s Manual. Motorola Inc., Aug. 2000. MCF5307UM/D, Rev. 2.0.

[7] M. Langenbach, S. Thesing, and R. Heckmann. Pipeline Modeling for Timing Analysis. Proceedings of the 9th International Static Analysis Symposium, 2002.

[8] Y.-T. S. Li, S. Malik, and A. Wolfe. Cache Modeling for Real-Time Software: Beyond Direct Mapped Instruction Caches. IEEE Real-Time Systems Symposium, January 1997.

[9] T. Lundqvist and P. Stenström. Integrating Path and Timing Analysis Using Instruction-Level Simulation Techniques. In F. Mueller and A. Bestavros, editors, Proceedings of the ACM SIGPLAN Workshop Languages, Compilers and Tools for Embedded Systems (LCTES), volume 1474 of Lecture Notes in Computer Science, pages 1–15, 1998.