```    
create or replace function get_except1()   
  returns setof refcursor as $$       
declare   
  ref refcursor[];    
  res refcursor;  
begin      
for i in 0..47 loop       
  ref[i] := 'cur'||i;  
  res := ref[i];  
  open res for execute format('select * from tbl t1 where mod(abs(hashint4(id)), 48)=%s except select * from tbl t1 where mod(abs(hashint4(id)), 48)=%s', i, i);    
  return next res;  
end loop;      
  return;    
end;      
$$ language plpgsql strict;     
```    
```    
postgres=# begin;  
BEGIN  
Time: 0.169 ms  
postgres=# select * from get_except1();  
 get_except1   
-------------  
 cur0  
 cur1  
 ..........  
 cur44  
 cur45  
 cur46  
 cur47  
(48 rows)  
Time: 46.482 ms  
postgres=# fetch 10 from cur1;  
 id | c1   
----+----  
(0 rows)  
Time: 1681.922 ms (00:01.682)  
```    
## 优化手段2 - PostgreSQL 11 求交、差性能    
使用PostgreSQL 11，JOIN的手法来求交、差。语义相同。    
1、求交    
```    
select * from tbl intersect select * from tbl;    
```    
相当于    
```    
select t1.* from tbl t1 join tbl t2 on (t1.id=t2.id and t1.c1=t2.c1);  -- 所有参与求交的字段都加到JOIN ON里面    
```    
2、求差    
```    
select * from tbl except select * from tbl;    
```    
相当于    
```    
select * from tbl t1 where not exists     
  ( select 1 from      
      (select t1.id,t1.c1 from tbl t1 join tbl t2 on (t1.id=t2.id and t1.c1=t2.c1) ) t   -- 所有参与求交的字段都加到JOIN ON里面    
    where t.id=t1.id and t.c1=t1.c1    
  );    
```    
### PostgreSQL 11 求交、差性能如下    
1、求交集，3.3秒。    
```    
postgres=# explain analyze select t1.* from tbl t1 join tbl t2 on (t1.id = t2.id and t1.c1 = t2.c1);    
                                                                QUERY PLAN                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------    
 Gather  (cost=52060.48..101778.20 rows=100921 width=8) (actual time=407.118..2395.421 rows=10000000 loops=1)    
   Workers Planned: 32    
   Workers Launched: 32    
   ->  Parallel Hash Join  (cost=52060.48..101778.20 rows=3154 width=8) (actual time=378.294..691.692 rows=303030 loops=33)    
         Hash Cond: ((t1.id = t2.id) AND (t1.c1 = t2.c1))    
         ->  Parallel Seq Scan on tbl t1  (cost=0.00..47372.99 rows=312499 width=8) (actual time=0.014..41.780 rows=303030 loops=33)    
         ->  Parallel Hash  (cost=47372.99..47372.99 rows=312499 width=8) (actual time=374.931..374.931 rows=303030 loops=33)    
               Buckets: 16777216  Batches: 1  Memory Usage: 522848kB    
               ->  Parallel Seq Scan on tbl t2  (cost=0.00..47372.99 rows=312499 width=8) (actual time=0.022..48.013 rows=303030 loops=33)    
 Planning time: 0.137 ms    
 Execution time: 3316.010 ms    
(11 rows)    
```    
2、求差集，1.9秒    
```    
postgres=# explain analyze select * from tbl t1 where not exists     
  ( select 1 from      
      (select t1.id,t1.c1 from tbl t1 join tbl t2 on (t1.id=t2.id and t1.c1=t2.c1) ) t   -- 所有参与求交的字段都加到JOIN ON里面    
    where t.id=t1.id and t.c1=t1.c1    
  );    
                                                                      QUERY PLAN                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------    
 Gather  (cost=101825.51..153939.67 rows=9899056 width=8) (actual time=1557.867..1557.867 rows=0 loops=1)    
   Workers Planned: 32    
   Workers Launched: 32    
   ->  Parallel Hash Anti Join  (cost=101825.51..153939.67 rows=309346 width=8) (actual time=1495.529..1495.529 rows=0 loops=33)    
         Hash Cond: ((t1.id = t1_1.id) AND (t1.c1 = t1_1.c1))    
         ->  Parallel Seq Scan on tbl t1  (cost=0.00..47372.99 rows=312499 width=8) (actual time=0.013..44.749 rows=303030 loops=33)    
         ->  Parallel Hash  (cost=101778.20..101778.20 rows=3154 width=8) (actual time=1260.916..1260.916 rows=303030 loops=33)    
               Buckets: 16777216 (originally 131072)  Batches: 1 (originally 1)  Memory Usage: 652800kB    
               ->  Parallel Hash Join  (cost=52060.48..101778.20 rows=3154 width=8) (actual time=387.651..740.551 rows=303030 loops=33)    
                     Hash Cond: ((t1_1.id = t2.id) AND (t1_1.c1 = t2.c1))    
                     ->  Parallel Seq Scan on tbl t1_1  (cost=0.00..47372.99 rows=312499 width=8) (actual time=0.013..46.111 rows=303030 loops=33)    
                     ->  Parallel Hash  (cost=47372.99..47372.99 rows=312499 width=8) (actual time=384.666..384.666 rows=303030 loops=33)    
                           Buckets: 16777216  Batches: 1  Memory Usage: 522784kB    
                           ->  Parallel Seq Scan on tbl t2  (cost=0.00..47372.99 rows=312499 width=8) (actual time=0.024..47.326 rows=303030 loops=33)    
 Planning time: 0.251 ms    
 Execution time: 1939.745 ms    
(16 rows)    
```    
## 附加 - 分表+DBLINK异步并行 VS PG 11 HASH JOIN并行
1、创建生成dblink连接的函数，重复创建不报错。  
```  
create or replace function conn(        
  name,   -- dblink名字        
  text    -- 连接串,URL        
) returns void as $$          
declare          
begin          
  perform dblink_connect($1, $2);         
  return;          
exception when others then          
  return;          
end;          
$$ language plpgsql strict;      
```  
2、生成10亿条数据，并按哈希分成128份（如果是多张表的话，请都按被JOIN的字段进行HASH分区）。  
为了测试方便，这里将数据按同样的RANGE分成了128份，实际上使用HASH效果一样。  
```  
create unlogged table a(id int, c1 int);  
do language plpgsql $$  
declare  
begin  
  for i in 0..127 loop  
    execute format('create unlogged table a%s (like a)', i);  
  end loop;  
end;  
$$;  
-- 写入10亿测试数据  
do language plpgsql $$  
declare  
begin  
  for i in 0..127 loop         
    perform conn('link'||i,  'hostaddr=127.0.0.1 port=9999 user=postgres dbname=postgres');         
    perform dblink_send_query('link'||i, format('insert into a%s select generate_series(%s, %s), random()*99', i, i*7812500+1, (i+1)*7812500));        
  end loop;     
end;  
$$;  
```  
3、分片并行JOIN的函数如下  
```  
create or replace function get_cnt() returns setof record as $$  
declare  
begin  
  for i in 0..127 loop         
    perform conn('link'||i,  'hostaddr=127.0.0.1 port=9999 user=postgres dbname=postgres');         
    perform 1 from dblink_get_result('link'||i) as t(c1 int, cnt int8);        
    perform dblink_send_query('link'||i, format('select t1.c1,count(*) from a%s t1 join a%s t2 using (id) group by t1.c1', i, i));        
  end loop;     
  for i in 0..127 loop  
    return query select * from dblink_get_result('link'||i) as t(c1 int, cnt int8);  
  end loop;  
end;  
$$ language plpgsql strict;  
```  
使用以上函数将采用DBLINK异步调用并行JOIN，然后我们将结果再合并一遍。  
耗时：28秒。  
```  
set work_mem ='1GB';  
select c1, sum(cnt) from get_cnt() as t(c1 int, cnt int8) group by c1;  
postgres=# select c1, sum(cnt) from get_cnt() as t(c1 int, cnt int8) group by c1;  
 c1 |   sum      
----+----------  
 87 | 10100809  
 71 | 10101080  
 68 | 10099606  
 51 | 10099793  
 70 | 10109225  
 80 | 10100325  
 52 | 10099895  
 84 | 10100478  
 92 | 10097575  
 69 | 10107443  
 60 | 10097840  
 97 | 10096389  
 22 | 10100561  
 59 | 10100344  
 65 | 10103391  
 98 | 10099394  
 73 | 10092200  
 44 | 10103140  
 11 | 10103393  
 42 | 10099439  
 88 | 10099237  
 82 | 10099155  
 40 | 10096921  
 43 | 10104420  
  9 | 10098674  
 15 | 10101089  
 79 | 10098950  
 48 | 10102135  
 26 | 10101603  
 85 | 10095875  
 72 | 10099213  
 95 | 10098356  
 57 | 10104362  
 81 | 10110911  
 19 | 10099394  
 61 | 10098885  
 77 | 10095828  
 30 | 10098553  
 21 | 10099126  
  3 | 10100072  
 17 | 10098163  
 28 | 10097030  
 37 | 10105601  
  5 | 10103695  
 56 | 10097786  
 91 | 10099258  
 74 | 10100289  
 29 | 10100451  
 54 | 10094753  
  4 | 10106395  
 34 | 10098193  
  0 |  5051349  
 96 | 10104673  
 83 | 10100830  
 67 | 10102245  
 63 | 10100960  
 10 | 10102902  
 90 | 10100002  
 35 | 10104661  
 45 | 10101868  
  6 | 10104899  
 86 | 10101989  
 39 | 10100000  
 93 | 10105890  
 89 | 10100522  
 36 | 10109730  
 31 | 10102795  
 50 | 10096268  
 14 | 10099182  
 66 | 10101121  
 13 | 10099546  
  2 | 10103957  
 16 | 10100221  
 62 | 10102741  
 75 | 10104968  
 99 |  5048952  
 41 | 10102728  
 46 | 10098892  
 32 | 10102419  
 53 | 10097987  
  7 | 10102711  
 38 | 10105077  
 12 | 10104542  
 78 | 10100782  
 24 | 10100036  
 25 | 10100035  
 94 | 10099586  
 49 | 10099737  
 47 | 10102668  
 20 | 10101551  
 33 | 10099637  
  1 | 10097499  
 76 | 10102961  
 18 | 10106307  
 64 | 10104492  
 55 | 10100018  
 27 | 10101503  
 23 | 10098148  
 58 | 10098593  
  8 | 10103127  
(100 rows)  
Time: 27911.868 ms (00:27.912)  
```  
4、PG 11 并行HASH JOIN（10亿不过滤 JOIN 10亿）  
耗时：109秒。  
```  
create unlogged table b (like a );
insert into b select * from a;
postgres=# explain analyze select t1.c1,count(*) from b t1 join b t2 using (id) group by t1.c1;  
                                                                              QUERY PLAN                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Finalize GroupAggregate  (cost=433359296530.36..433359296628.36 rows=200 width=12) (actual time=106183.949..106186.496 rows=100 loops=1)  
   Group Key: t1.c1  
   ->  Sort  (cost=433359296530.36..433359296562.36 rows=12800 width=12) (actual time=106183.905..106185.006 rows=6500 loops=1)  
         Sort Key: t1.c1  
         Sort Method: quicksort  Memory: 497kB  
         ->  Gather  (cost=433359295655.16..433359295657.16 rows=12800 width=12) (actual time=105102.267..106182.433 rows=6500 loops=1)  
               Workers Planned: 64  
               Workers Launched: 64  
               ->  Partial HashAggregate  (cost=433359295655.16..433359295657.16 rows=200 width=12) (actual time=105132.243..105132.331 rows=100 loops=65)  
                     Group Key: t1.c1  
                     ->  Parallel Hash Join  (cost=4837377.52..42734253467.66 rows=78125008437500 width=4) (actual time=47567.418..100415.264 rows=15384615 loops=65)  
                           Hash Cond: (t1.id = t2.id)  
                           ->  Parallel Seq Scan on b t1  (cost=0.00..4581029.01 rows=15625001 width=8) (actual time=0.024..4849.451 rows=15384615 loops=65)  
                           ->  Parallel Hash  (cost=4581029.01..4581029.01 rows=15625001 width=4) (actual time=19059.992..19059.992 rows=15384615 loops=65)  
                                 Buckets: 8388608  Batches: 256  Memory Usage: 219264kB  
                                 ->  Parallel Seq Scan on b t2  (cost=0.00..4581029.01 rows=15625001 width=4) (actual time=0.036..4966.944 rows=15384615 loops=65)  
 Planning time: 0.089 ms  
 Execution time: 123809.025 ms  
(18 rows)  
```  
```  
postgres=# select t1.c1,count(*) from b t1 join b t2 using (id) group by t1.c1;  
 c1 |  count     
----+----------  
  0 |  5051349  
  1 | 10097499  
  2 | 10103957  
  3 | 10100072  
  4 | 10106395  
  5 | 10103695  
  6 | 10104899  
  7 | 10102711  
  8 | 10103127  
  9 | 10098674  
 10 | 10102902  
 11 | 10103393  
 12 | 10104542  
 13 | 10099546  