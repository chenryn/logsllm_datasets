title:Ligero++: A New Optimized Sublinear IOP
author:Rishabh Bhadauria and
Zhiyong Fang and
Carmit Hazay and
Muthuramakrishnan Venkitasubramaniam and
Tiancheng Xie and
Yupeng Zhang
Ligero++: A New Optimized Sublinear IOP
Rishabh Bhadauria
Bar-Ilan University
PI:EMAIL
Muthuramakrishnan
Venkitasubramaniam
Ligero Inc., University of Rochester
PI:EMAIL
Zhiyong Fang
Texas A&M University
PI:EMAIL
Carmit Hazay
Ligero Inc., Bar-Ilan University
PI:EMAIL
Tiancheng Xie
UC Berkeley
PI:EMAIL
Yupeng Zhang
Texas A&M University
PI:EMAIL
ABSTRACT
This paper follows the line of works that design concretely efficient
transparent sublinear zero-knowledge Interactive Oracle Proofs
(IOP). Arguments obtained via this paradigm have the advantages
of not relying on public-key cryptography, not requiring a trusted
setup, and resistance to known quantum attacks. In the realm of
transparent systems, Ligero and Aurora stand out with incompa-
rable advantages where the former has a fast prover algorithm
somewhat succinct proofs and the latter has somewhat fast prover
and succinct proofs. In this work, we introduce Ligero++ that com-
bines the best features of both approaches to achieve the best of
both worlds. We implement our protocol and benchmark the results.
CCS CONCEPTS
‚Ä¢ Security and privacy ‚Üí Cryptography.
KEYWORDS
IOP; Zero-Knowledge; MPC-in-the-Head, SNARKs
ACM Reference Format:
Rishabh Bhadauria, Zhiyong Fang, Carmit Hazay, Muthuramakrishnan
Venkitasubramaniam, Tiancheng Xie, and Yupeng Zhang. 2020. Ligero++:
A New Optimized Sublinear IOP. In Proceedings of the 2020 ACM SIGSAC
Conference on Computer and Communications Security (CCS ‚Äô20), November
9‚Äì13, 2020, Virtual Event, USA. ACM, New York, NY, USA, 14 pages. https:
//doi.org/10.1145/3372297.3417893
1 INTRODUCTION
Verifying outsourced computations is important for tasks and sce-
narios when there is an incentive for the party performing the
computation to report incorrect answers. In this work, we present
a concretely efficient argument protocol for NP whose communica-
tion complexity is polylogarithmic to the size of a circuit verifying
the NP witness, combining tools from [5] and [55]. Our argument
system is a transparent zero-knowledge argument of knowledge
that is public-coin, i.e. it only requires the verifier to send random
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ‚Äô20, November 9‚Äì13, 2020, Virtual Event, USA
¬© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3417893
coins to the prover in each round. The latter feature implies that
it can be made non-interactive via the Fiat-Shamir transform [30],
yielding an efficient implementation of zero-knowledge succinct
non-interactive arguments of knowledge (zk-SNARKs [24]) without
a trusted setup.
Our paper follows a line of works on transparent sublinear zero-
knowledge arguments from symmetric-key primitives (collision-
resistant hash-functions). Building on Kilian [43] and Micali [47],
recent works [11, 14, 16, 18, 20] have shown how to obtain efficient
sublinear arguments for NP from so-called probabilistically check-
able proofs (PCPs) [6, 7, 9]. Classical PCPs have been extended to
allow additional interaction with the prover, first in the model of
interactive PCP (IPCP) [41] and then in the more general setting of
interactive oracle proofs (IOP) [21], also known as probabilistically
checkable interactive proofs (PCIP) [49]. Arguments obtained via
PCPs and IOPs have the advantage of not relying on heavy public-
key cryptography or a trusted setup. Additionally, they are resistant
to known quantum attacks.
With the growing list of zero-knowledge constructions, this work
serves as a evidence that for real world scenarios the optimum con-
struction will involve the right combination (i.e. composition) of
known constructions. In the realm of transparent systems, Ligero
[5] and Aurora [20] stand out with incomparable advantages. While
Ligero brings the best prover performance concretely, Aurora‚Äôs
proof length scales polylogarithmically with circuit size. In this
work, we combine the best features of both approaches and intro-
duce Ligero++, an optimized sublinear IOP that achieves the best
of both worlds. While there are several ways to compose systems,
the main technical novelty here is a way to compose that harnesses
the benefits of several previous IOP-based systems and achieve a
good tradeoff between the prover complexity and proof length.
Our first instantiation combines Ligero and Aurora where we
rely on the Ligero proof system to ‚Äúfold‚Äù the original computation
of size |ùê∂| into ùëò computations of size |ùê∂|
ùëò that are ‚Äúuniform‚Äù, which
we prove using the Aurora proof system. This results in a system
with prover efficiency close to the Ligero system and succinctness
similar to the Aurora system.
As a second instance of this paradigm, we borrow some fea-
tures from another line of work based on MPC-in-the-head, ZKBoo
[32]. We demonstrate that the vanilla Ligero proof system yields
good proof length for small circuits by repeating the entire proof
to reduce soundness. Concretely, this yields a new instantiation of
post-quantum signatures that is competetive with previous works.
Session 6E: Zero Knowledge CCS '20, November 9‚Äì13, 2020, Virtual Event, USA2025We demonstrate our performance via an implementation and be-
lieve that our composition techniques could potentially lead to
more systems with better concrete and asymptotic performance.
1.1 Our Techniques
We first recall the Ligero proof system. This is an instantiation of
the MPC-in-the-head paradigm of Ishai et al. [40] where the under-
lying MPC is instantiated with an optimized variant of the protocol
of Damg√•rd and Ishai [29]. A key feature of the underlying MPC
protocol is that its total communication complexity between the
parties is independent of the number of parties and is roughly equal
to the size of the circuit being evaluated. Now, letting the number
of parties be the square root of the circuit size, results in communi-
cation per party that is also roughly the square root of the circuit
size. This translates into a ZKIPCP with analogous parameters and
highly competitive prover‚Äôs complexity and concrete running time.
In the first step in Ligero, the prover computes an ‚Äúextended‚Äù
witness that incorporates all intermediate computations (namely,
output of each ‚Äúgate‚Äù) which it encodes using the Interleaved Reed-
Solomon code. Interpreting each element of the interleaved code
as a column, the entire code can be viewed as a matrix, say ùëà .
The prover computes the proof oracle where each element is one
‚Äúcolumn‚Äù of this code. Next, the verifier provides randomness and
obtains a randomized aggregated summary of the ‚Äúrows‚Äù of the
code from the prover which it checks by fruther querying a random
subset of columns in this oracle and matching the aggregates across
the columns against the aggregated summary. Soundness follows
from the ‚Äúerror correction‚Äù property of the Reed-Solomon code
while zero-knowledge follows from the ‚Äúsecret-sharing‚Äù properties
of the underlying code (i.e. interpreting the encoding as a Shamir
secret-sharing scheme).
In more detail, the column consistency check in the Ligero proof
system requires the verifier to compute a linear function (more
precisely, an inner product) between each queried column, and a
challenge ‚Äúrandom‚Äù vector ùëü chosen by the verifier. The number of
queries directly effects the soundness level while the dimensions
of ùëà heavily influence the proof size and the parties‚Äô complexities.
By setting the parameters of the Interleaved Reed-Solomon code
appropriately, it is possible to have the size of the summarized row
and the queried columns be roughly equal to(cid:112)|ùê∂| and the number
of queries ùëÇ(ùúÜ).
Our first observation is that by choosing a bigger alphabet size of
the interleaved code, we can make the row size any size ùõæ where the
alphabet size is |ùê∂|/ùõæ. This will yield a proof size of ùëÇ(|ùê∂|/ùõæ) if ùõæ is
small. In order to reduce the overall proof length, we compose the
Ligero proof system with a second zero-knowledge proof system to
establish the column consistency check, namely the Aurora proof
system. More precisely, we rely on the inner product argument
(IPA) recently proposed by Zhang et al. in [55] that in turn relies
on the Aurora proof system.1 Furthermore, we combine all of the
column checks into one check by folding it via another random
linear combination.
Our main observation is that the code rate in Aurora is much
smaller than in Ligero since Aurora employs a low degree test
1We note that the underlying machinery of this IPA scheme is similar to Aurora while
making use of the important FRI low degree test protocol [12].
(where the prover time is proportional to the inverse of the code
rate). Through our composition, we manage to reduce the inner
product argument in Aurora to a small instance (a subset of columns),
thus improving the proof size significantly without compromising
the prover time by too much.
Performance. Our scheme aims to provide a good trade-off be-
tween the two techniques, achieving the best of both systems. The
prover time compared to Ligero is only slower by 2x, yet the proof
size is reduced to polylogarithmic and is only between 100-200KBs.
The proof size is already better than Ligero for circuits with hun-
dreds of gates, and is improved by 32x on large circuits with millions
of gates. Compared to Aurora, the prover time is improved by 11-
12x, and the proof size is surprisingly even smaller.
Concretely, on a circuit with 222 multiplication gates, the proof
size of our new scheme is 184KB, smaller than the 276KB proof of
Aurora and much smaller than the 6MB proof of Ligero. Meanwhile,
it only takes 80s to generate the proof in our scheme, which is 2.3√ó
slower than the prover time of 34s in Ligero, and much faster than
that of 1004s in Aurora.
In our second instantiation, our signature scheme is competitive
compared to existing candidates for post quantum signatures. It
takes 42ms to sign a message and 8ms to validate the signature using
MiMC block ciphers, and the signature size is 210KB. The size of
our signature starts to be smaller than the Picnic signature schemes
when using block ciphers with larger circuits. Our signature size
is estimated to be 111KB using the standard AES block cipher. We
refer to Section 4 for more details on the performance and the
comparisons.
Applications. Our basic benchmark (of validating Merkle decom-
mitments) already demonstrates our performance compared to
Ligero and Aurora systems (See Section 4). We have further esti-
mated the performance of our scheme on the application of linear
regression, where the verification time grows sublinearly with the
size of the instance. On a large instance with 228 gates, our prover
time is around 12,000s, the proof size is 257KB and the verification
time is around 1s. We also report the performance of Ligero++ for
DNA profile matching and batch verification of ECDSA signatures
in the appendix.
1.2 Related Work
Zero-knowledge proofs were introduced by Goldwasser et al. in [36]
and generic constructions based on PCPs were proposed in the sem-
inal work of Kilian [43] and Micali [47] in the early days. In recent
years, zero-knowledge proofs have evolved from purely theoretical
constructions to practical implementations. Other than the schemes
based on IOP [5, 14, 20], another line of work is based on the inter-
active proofs proposed by Goldwasser, Kalai, and Rothblum [34]
(following a rich line of works on interactive proofs with compu-
tationally unbounded provers [35, 45, 50]), usually referred as the