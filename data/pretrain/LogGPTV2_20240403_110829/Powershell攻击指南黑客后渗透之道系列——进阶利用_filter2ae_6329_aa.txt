# PowerShell攻击指南：黑客后渗透技术系列——进阶利用

##### 译文声明
本文为翻译文章，具体内容和含义请以原文为准。
- 作者：[香山](https://www.anquanke.com/member/122354)
- 预估稿费：1000 RMB（本篇文章享受双倍稿费，活动详情请[点击此处](http://bobao.360.cn/news/detail/4370.html)）
- 投稿方式：发送邮件至linwei#360.cn，或通过网页版在线投稿

此为《PowerShell攻击指南：黑客后渗透技术系列》的第二篇——进阶利用。此后每两天更新一篇，敬请期待！

## 传送门
- [Powershell攻击指南：黑客后渗透之道系列——基础篇](https://www.anquanke.com/post/id/87976)
- [Powershell攻击指南：黑客后渗透之道系列——实战篇](https://www.anquanke.com/post/id/89362)

# PowerShell(7) - WMI

## 前言
WMI无疑是当前Windows攻击中最常用的工具之一，其强大的管理功能为攻击者带来了极大的便利。而PowerShell可以轻松地操作并利用WMI，我们将用较大的篇幅来详细介绍PowerShell与WMI的魅力。本文将分为上下两部分，上半部分主要介绍WMI的相关知识，下半部分则重点讨论如何利用PowerShell进行WMI攻击。

## WMI简介
WMI全称Windows Management Instrumentation，即Windows管理规范。自Windows NT 4.0和Windows 95以来，WMI一直是Windows操作系统中的重要组成部分。尽管随着时间的推移，WMI逐渐被其他技术取代，但它在系统管理和攻击中仍然发挥着重要作用。尤其是在震网病毒事件之后，WMI在安全社区中变得非常流行。如今，WMI广泛用于系统侦察、反病毒检测、代码执行、横向移动、权限持久化及数据窃取等攻击行为。因此，掌握WMI已成为安全维护人员、事件响应人员及取证分析师的一项重要技能。

## 基础知识
对于初次接触WMI的朋友来说，可能会感到有些困惑。以下是一些基本概念：

1. **WMI定义**：WMI是微软基于分布式管理任务组（DMTF）发布的Web企业管理（WBEM）和公共信息模型（CIM）标准实现的技术。
2. **使用WMI**：微软提供了多种使用WMI的方式，我们这里主要介绍如何通过PowerShell进行管理。
3. **查询WMI**：WMI有专门的查询语言WQL，类似于SQL。
4. **WMI数据获取**：当用户请求WMI对象时，WMI服务会根据请求返回相应的WMI对象。WMI对象有两种类型：动态对象和持久性对象。动态对象是在特定查询执行时生成的，如`Win32_Process`；持久性对象存储在CIM数据库中。
5. **远程传输WMI数据**：Microsoft提供了两种协议用于远程传输WMI数据：分布式组件对象模型（DCOM）和Windows远程管理（WinRM）。通常情况下，我们通过DCOM进行通信，即通过135端口的RPC服务。
6. **WMI命名空间**：默认命名空间为`ROOT\CIMV2`，可以在注册表`HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WBEM\Scripting`中修改。

下图展示了WMI的结构（来源：FireEye）。

## WMI管理工具
### wmic.exe
`wmic.exe`是一个强大的命令行工具，用于与WMI交互。它支持大量的WMI对象，并可以执行复杂的查询。此外，`wmic.exe`还可以调用WMI方法，常用于横向移动。不过，它不能调用嵌入的WMI对象的方法。在PowerShell不可用的情况下，`wmic.exe`足以进行系统侦察和基本方法调用。

### wbemtest.exe
`wbemtest.exe`是一个带有图形界面的WMI诊断工具，能够枚举对象实例、执行查询、注册事件、修改WMI对象和类，并且可以在本地或远程调用方法。虽然它的用户界面不够友好，但在其他工具受限时，它仍是一个强大的替代选项。

### winrm.exe
### VBScript and JScript
这两种脚本语言也可以操作WMI。

### wmic, wmis, wmis-pth (Linux)
`wmic`是一个简单的Linux命令行工具，用于执行WMI查询。`wmis`是`Win32_Process`类的`Create`方法的远程调用命令行包装程序，支持使用NTLM哈希连接远程计算机，广泛应用于渗透测试。

### PowerShell
关于PowerShell的操作，请参见下文。

## PowerShell—WMI
### 使用标准WQL对WMI进行操作
```powershell
Get-WmiObject -Query "SELECT * FROM Win32_Process WHERE Name LIKE '%WinRM%'"
```
该命令用于查询名为`WinRM`的进程。

### 使用PowerShell提供的WMI接口
```powershell
Get-WmiObject -Namespace ROOT\CIMV2 -Class Win32_OperatingSystem
```
这条命令用于获取机器信息。类似的，`Get-WmiObject -Class Win32_Process`可以获取所有本地计算机的进程。例如：
```powershell
Get-WmiObject -Class Win32_Process | Where-Object {$_.name -like "*explorer*"}
```

### WMI的作用
通过PowerShell调用WMI可以实现多种功能，例如远程调用：
```powershell
Get-WmiObject -Query "SELECT * FROM Win32_Service WHERE Name='WinRM'" -ComputerName server01, server02
```

常用WMI类包括：
- 主机/操作系统信息: `Win32_OperatingSystem`, `Win32_ComputerSystem`
- 文件/目录列举: `CIM_DataFile`
- 磁盘卷列举: `Win32_Volume`
- 注册表操作: `StdRegProv`
- 运行进程: `Win32_Process`
- 服务列举: `Win32_Service`
- 事件日志: `Win32_NtLogEvent`
- 登录账户: `Win32_LoggedOnUser`
- 共享: `Win32_Share`
- 已安装补丁: `Win32_QuickFixEngineering`

例如，获取已安装补丁的信息：
```powershell
Get-WmiObject -Class Win32_QuickFixEngineering
```

### WMI触发器
WMI的应用非常广泛，其中一个典型例子是无文件持久化控制。为了更好地理解WMI的这一功能，我们需要先了解WMI事件的基础。

#### 事件触发条件
...（待续）