        void       *memAddress;  
        PGShmemHeader *hdr;  
        IpcMemoryId shmid;  
        struct stat statbuf;  
        Size            sysvsize;  
        /* Complain if hugepages demanded but we can't possibly support them */  
#if !defined(USE_ANONYMOUS_SHMEM) || !defined(MAP_HUGETLB)  
        if (huge_pages == HUGE_PAGES_ON)  
                ereport(ERROR,  
                                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),  
                                 errmsg("huge pages not supported on this platform")));  
#endif  
        /* Room for a header? */  
        Assert(size > MAXALIGN(sizeof(PGShmemHeader)));  
#ifdef USE_ANONYMOUS_SHMEM  
        AnonymousShmem = CreateAnonymousSegment(&size);  
        AnonymousShmemSize = size;  
        /* Register on-exit routine to unmap the anonymous segment */  
        on_shmem_exit(AnonymousShmemDetach, (Datum) 0);  
        /* Now we need only allocate a minimal-sized SysV shmem block. */  
        sysvsize = sizeof(PGShmemHeader);  
#else  
        sysvsize = size;  
#endif  
        /* Make sure PGSharedMemoryAttach doesn't fail without need */  
        UsedShmemSegAddr = NULL;  
        /* Loop till we find a free IPC key */  
        NextShmemSegID = port * 1000;  
        for (NextShmemSegID++;; NextShmemSegID++)  
        {  
                /* Try to create new segment */  
                memAddress = InternalIpcMemoryCreate(NextShmemSegID, sysvsize);  
                if (memAddress)  
                        break;                          /* successful create and attach */  
                /* Check shared memory and possibly remove and recreate */  
                if (makePrivate)                /* a standalone backend shouldn't do this */  
                        continue;  
                if ((memAddress = PGSharedMemoryAttach(NextShmemSegID, &shmid)) == NULL)  
                        continue;                       /* can't attach, not one of mine */  
                /*  
                 * If I am not the creator and it belongs to an extant process,  
                 * continue.  
                 */  
                hdr = (PGShmemHeader *) memAddress;  
                if (hdr->creatorPID != getpid())  
                {  
                        if (kill(hdr->creatorPID, 0) == 0 || errno != ESRCH)  
                        {  
                                shmdt(memAddress);  
                                continue;               /* segment belongs to a live process */  
                        }  
                }  
                /*  
                 * The segment appears to be from a dead Postgres process, or from a  
                 * previous cycle of life in this same process.  Zap it, if possible,  
                 * and any associated dynamic shared memory segments, as well. This  
                 * probably shouldn't fail, but if it does, assume the segment belongs  
                 * to someone else after all, and continue quietly.  
                 */  
                if (hdr->dsm_control != 0)  
                        dsm_cleanup_using_control_segment(hdr->dsm_control);  
                shmdt(memAddress);  
                if (shmctl(shmid, IPC_RMID, NULL) creatorPID = getpid();  
        hdr->magic = PGShmemMagic;  
        hdr->dsm_control = 0;  
        /* Fill in the data directory ID info, too */  
        if (stat(DataDir, &statbuf) device = statbuf.st_dev;  
        hdr->inode = statbuf.st_ino;  
        /*  
         * Initialize space allocation status for segment.  
         */  
        hdr->totalsize = size;  
        hdr->freeoffset = MAXALIGN(sizeof(PGShmemHeader));  
        *shim = hdr;  
        /* Save info for possible future use */  
        UsedShmemSegAddr = memAddress;  
        UsedShmemSegID = (unsigned long) NextShmemSegID;  
        /*  
         * If AnonymousShmem is NULL here, then we're not using anonymous shared  
         * memory, and should return a pointer to the System V shared memory  
         * block. Otherwise, the System V shared memory block is only a shim, and  
         * we must return a pointer to the real block.  
         */  
#ifdef USE_ANONYMOUS_SHMEM  
        if (AnonymousShmem == NULL)  
                return hdr;  
        memcpy(AnonymousShmem, hdr, sizeof(PGShmemHeader));  
        return (PGShmemHeader *) AnonymousShmem;  
#else  
        return hdr;  
#endif  
}  
```  
## 排错  
启动数据库，如果发现报这个错误，    
```    
huge TLB pages not supported on this platform    
```    
说明系统编译时，检测到OS不支持大页，那么怎么解决呢？    
```    
src/backend/port/sysv_shmem.c    
src/backend/port/pg_shmem.c    
/*    
 * Creates an anonymous mmap()ed shared memory segment.    
 *    
 * Pass the requested size in *size.  This function will modify *size to the    
 * actual size of the allocation, if it ends up allocating a segment that is    
 * larger than requested.    
 */    
#ifndef EXEC_BACKEND    
static void *    
CreateAnonymousSegment(Size *size)    
{    
        Size            allocsize = *size;    
        void       *ptr = MAP_FAILED;    
        int                     mmap_errno = 0;    
#ifndef MAP_HUGETLB    
        if (huge_pages == HUGE_PAGES_ON)    
                ereport(ERROR,    
                                (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),    
                                 errmsg("huge TLB pages not supported on this platform")));    
#else    
......    
```    
实际上MAP_HUGETLB是在系统的/usr/include/sys/mman.h 中定义的，如果没有定义，PG就不支持大页。    
```    
#include     
```    
在文件 /usr/include/bits/mman.h 中加入以下行，重新编译PostgreSQL即可。    
```    
# define MAP_HUGETLB    0x40000         /* Create huge page mapping.  */    
```    
重新编译PostgreSQL后，重启数据库。    
## 参考    
1\. http://www.postgresql.org/message-id/flat/PI:EMAIL#PI:EMAIL    
2\. http://terryebase.com/?p=161    
3\. https://www.postgresql.org/docs/current/kernel-resources.html#LINUX-HUGE-PAGES    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")