    Object runtime = getRuntimeMethod.invoke(clazz);
    execMethod.invoke(runtime, "calc.exe");
### 遗留问题
在p牛的安全漫谈中 提出了这样的两个问题
如果一个类没有无参构造方法，也没有类似单例模式里的静态方法，我们怎样通过反射实例化该类呢？
如果一个方法或构造方法是私有方法，我们是否能执行它呢？
#### 问题一
一个类中 没有无参构造方法 也就无法使用我们上面的newInstance 同时没有静态方法 那么我们应该怎样 通过反射 来实例化该类呢
我们在这里需要用到一个新的反射方法 `getConstructor` 与前面的getMethod 类似 getConstructor
接收的参数是构造函数列表类型 因为构造函数也支持重载 所以 必须用参数列表类型才能确定唯一的一个构造函数
当我们获取到构造函数之后 我们使用newInstance来执行 比如 我们常用的另一种执行命令的方式 ProcessBuilder
我们使用反射来获取其构造函数 然后调用start()来执行命令
    Class clazz = Class.forName("java.lang.ProcessBuilder");
    ((ProcessBuilder)clazz.getConstructor(List.class).newInstance(Arrays.asList("calc.exe"))).start();
ProcessBuilder有两个构造函数
`public ProcessBuilder(List command)`
`public ProcessBuilder(String... command)`
通过传入的参数 我们看出在上面就是用到了 第一个形式的构造函数 但是 在前面这个payload用到了Java中的强制类型转换 有时我们利用漏洞的时候
是没有这种语法的 所以在这里 我们仍需一步反射
    Class clazz = Class.forName("java.lang.ProcessBuilder");
    clazz.getMethod("start").invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList("calc.exe")));
通过getMethod 获取到start方法 然后 通过invoke执行 其第一个参数就是 ProcessBuilder Object了
    package com.my.package3;
    import java.util.Arrays;
    import java.util.List;
    public class Test2 {
        public static void main(String[] args) throws Exception{
            Class clazz = Class.forName("java.lang.ProcessBuilder");
            clazz.getMethod("start").invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList("calc.exe")));
        }
    }
我们成功执行了第一个 构造函数 那么第二种构造函数 我们应该如何去执行呢
这又会涉及到Java中的可变长参数（varargs）了 正如其他语言一样 java中也支持可变长参数 什么叫可变长参数呢 就是当你定义函数的时候
不确定参数数量的时候 可以使用...这样的语法来表示 这个函数的参数个数是可变的
对于可变长参数 在其编译的时候 会被编译成一个数组 也就是说 下面的两种写法在底层代码中是等价的
    public void hello(String[] names) {}
    public void hello(String...names) {}
同时 当我们有一个数组想要传给hello函数 可以直接传参
    String[] names = {"hello"，"world"};
    hello(names);
那么对于反射来说 如果要获取的目标函数里包含可变长参数 其实我们认为他是数组即可
所以我们将字符串数组的类`String[].class` 传给getConstructor 获取ProcessBuilder的第二种构造函数
    Class clazz = Class.forName("java.lang.ProcessBuilder");
    ((ProcessBuilder)clazz.getConstructor(String[].class).newInstance(new String[][]{{"calc.exe"}})).start();
#### 问题二
当一个方法 或者 构造方法 是私有方法的时候 我们是否能执行它呢
这里就涉及到了`getDeclared` 系列的反射了 这里与普通的`getMethod` `getConstructor` 的区别是
`getMethod` 系列方法获取的是当前类中所有公共方法，包括从父类继承的方法
`getDeclaredMethod` 系列方法获取的是当前类中“声明”的方法，是实在写在这个类里的，包括私 有的方法，但从父类里继承来的就不包含了
getDeclaredMethod 的具体用法和 getMethod 类似， getDeclaredConstructor 的具体用法和
getConstructor 类似
### 深层解析
既然 我们上面研究了这么多Java中的反射 难免会有这样一个疑问 那就是 功能这么强大的反射 是怎样通过源码实现的呢
我们从JDK中的invoke方法 开始看起
    class AccessibleObject implements AnnotatedElement {
        boolean override;
        //访问权限
        public boolean isAccessible() {
            return override;
        }
    }
    //Method.class
    public Object invoke(Object obj, Object... args)
           throws IllegalAccessException, IllegalArgumentException,
              InvocationTargetException
       {
           if (!override) {
               if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {
                   Class caller = Reflection.getCallerClass();
                   checkAccess(caller, clazz, obj, modifiers);
               }
           }
           MethodAccessor ma = methodAccessor;             // read volatile
           if (ma == null) {
               ma = acquireMethodAccessor();
           }
           return ma.invoke(obj, args);
       }
上面 便是invoke 在JDK中的源码
首先 该方法在第一步中 就进行了对于访问权限的判断也就是对于override的判断 并且从下面的代码中 我们可以看出
这也就是对应了其是否能忽略其对访问权限的控制 那么 当可以read volatile的时候 其中的MethodAccessor 又是什么呢
此处的MethodAccessor 是一个接口 定义了方法调用的具体操作 这也是我们进行反射时的关键步骤 而此处MethodAccessor
有三个具体的实现类
  * sun.reflect.DelegatingMethodAccessorImpl
  * sun.reflect.MethodAccessorImpl
  * sun.reflect.NativeMethodAccessorImpl
那么就出现了一个问题 在最后`return ma.invoke(obj, args);` 中 到底调用的是哪个类中的invoke 方法呢 我们需要看一下
MethodAccessor对象返回的到底是哪一个类对象
接下来 我们分别看一下这三个类 都是怎么样的
sun.reflect.DelegatingMethodAccessorImpl
    class DelegatingMethodAccessorImpl extends MethodAccessorImpl {
        private MethodAccessorImpl delegate;
        DelegatingMethodAccessorImpl(MethodAccessorImpl delegate) {
            setDelegate(delegate);
        }    
        public Object invoke(Object obj, Object[] args)
            throws IllegalArgumentException, InvocationTargetException
        {
            return delegate.invoke(obj, args);
        }
        void setDelegate(MethodAccessorImpl delegate) {
            this.delegate = delegate;
        }
    }
sun.reflect.NativeMethodAccessorImpl
    class NativeMethodAccessorImpl extends MethodAccessorImpl {
        private Method method;
        private DelegatingMethodAccessorImpl parent;
        private int numInvocations;
        NativeMethodAccessorImpl(Method method) {
            this.method = method;
        }    
        public Object invoke(Object obj, Object[] args)
            throws IllegalArgumentException, InvocationTargetException
        {
            if (++numInvocations > ReflectionFactory.inflationThreshold()) {
                MethodAccessorImpl acc = (MethodAccessorImpl)
                    new MethodAccessorGenerator().
                        generateMethod(method.getDeclaringClass(),
                                       method.getName(),
                                       method.getParameterTypes(),
                                       method.getReturnType(),
                                       method.getExceptionTypes(),
                                       method.getModifiers());
                parent.setDelegate(acc);
            }
            return invoke0(method, obj, args);
        }
        void setParent(DelegatingMethodAccessorImpl parent) {
            this.parent = parent;
        }
        private static native Object invoke0(Method m, Object obj, Object[] args);
    }
sun.reflect.MethodAccessorImpl
    abstract class MethodAccessorImpl extends MagicAccessorImpl
        implements MethodAccessor {
        public abstract Object invoke(Object obj, Object[] args)
            throws IllegalArgumentException, InvocationTargetException;
    }
这里在翻阅源码文档的时候 产生了一个疑问 就是这每个最后结尾的mpl是什么意思 经过查询之后 得知 其为Mozilla Public License
是一个相当于协议证明之类的概念
回归正题 经过上面三段代码阅读之后 我们再回过头去看ma.invoke()中的acquireMethodAccessor()方法
    public MethodAccessor newMethodAccessor(Method paramMethod){
        checkInitted();
        if (noInflation) {
        return new MethodAccessorGenerator().generateMethod(paramMethod.getDeclaringClass()， paramMethod.getName(),paramMethod.getParame
    }
        NativeMethodAccessorImpl localNativeMethodAccessorImpl = new NativeMethodAccessorImpl(paramMethod);
        DelegatingMethodAccessorImpl localDelegatingMVethodAccessorImpl = new DelegatingMethodAccessorImpl(localNativeMethodccessorImpl);
        localNativeMethodAccessorImpl.setParent(localDelegatingMethodAccessorImpl);
        return localDelegatingMethodAccessorImpl;
    }
在这其中
出现了上面的sun.reflect.NativeMethodAccessorImpl和sun.reflect.DelegatingMethodAccessorImpl
其中 是先生成了一个NativeMethodAccessorImpl对象 然后 让其作为参数
调用到DelegatingMethodAccessorImpl类的构造方法 所以
最后我们应该关注DelegatingMethodAccessorImpl类的相关代码
在进入这个类中以后 调用了delegate属性的invoke方法 其又有两个实现类 分别是DelegatingMethodAccessorImpl 和
NativeMethodAccessorImpl 在上面 我们也提到了 NativeMethodAccessorImpl 是参数 所以
我们这块代码最终就决定于NativeMethodAccessorImpl了
而在这个类中的invoke方法中 存在这样一段代码
    if (++numInvocations > ReflectionFactory.inflationThreshold())
这个的作用 就是可以判断其调用的次数是否超出了阈值 超过的话就会重新生成一个对象 并将之前的delegate属性 重新指向这个新生成的对象
那么 分析到这里 我们可以得出 这里的MethodAccessor对象就是反射类的入口 也就是我们反射中的源头 可以借用这张图 来更加生动形象的说明
### Ending...
本文主要以p牛的Java安全漫谈为基础 结合了sp4c1ous师傅的框架 学习了各位师傅们的大小文章 得到了这篇文章 此文作为进入Java安全学习的第一步
更加主要的是以各种初见的名词进行解释 对一些方法进行理解 望各位师傅们斧正
### 参考文献