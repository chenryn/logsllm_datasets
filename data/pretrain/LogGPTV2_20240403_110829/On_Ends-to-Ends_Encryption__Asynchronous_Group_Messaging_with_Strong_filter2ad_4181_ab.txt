Secrecy and Authentication Our fundamental goal is conﬁdentiality and authenticity
of keys: an active adversary should not learn keys shared between Alice and Bob.
Post-Compromise Security (PCS) Traditional security models do not provide any
guarantees after the long-term keys of a participant are compromised: it is not considered an
attack to learn Bob’s identity key and then impersonate him to Alice. Cohn-Gordon, Cremers,
and Garratt [14] deﬁned PCS to cover this scenario, showing that it is achievable through the
use of persistent protocol state.
We aim explicitly to achieve a form of PCS in our messaging protocols: if the full state of a
group member is compromised (long-term and other derived keys) but the group conversation
continues without interference, the resulting group key should be secret.
Absent this goal, many simpler designs are possible. In particular, the “sender keys” variant of
Signal meets our other criteria; its weakness is that learning a sender key enables the computation
of all future message keys. PCS is a major distinguishing feature of modern two-party messaging
protocols, and oﬀers signiﬁcant protection from adversaries with large resources, forcing them
to actively interfere in all communications even after they manage to temporarily compromise a
device.
Poor randomness Security models such as extended Canetti-Krawczyk and its generali-
sations [16, 34] allow revealing random numbers generated by a party whose long-term keys
3Based on source code inspection [43].
6
Table 1: Asymptotic eﬃciencies and properties of some group messaging solutions as a function of
the group size n. “Pairwise Signal” denotes sending a group message repeatedly over individual Signal
channels. In the setup phase, the values here refer to the total work done for all users to reach a point
where no further setup is required and “sender” refers to the creator of the group. In the sending phase,
“other” refers to a recipient of a message. We provide concrete measurements in Section 7.
number of
exponentiations
number of sym-
metric encryptions
bandwidth
PCS
sender
O(n)
0
O(n)
O(n)
O(n)
setup
ongoing
setup
ongoing
setup
sender keys
pairwise
Signal
our
solution
ongoing O(log(n)) O(log(n))
per other
sender
per other
sender
per other
O(n)
O(n)
O(n)
0
O(n)
O(1)
O(log(n))
1
0
n − 1
0
1
1
0
1
0
1
O(n)
O(1)
O(n)
O(n)
O(n)
O(n)
O(1)
O(n)
O(1)
O(n)



O(log(n)) O(log(n))
are uncompromised. However, many widely-used protocols (such as TLS 1.3 or Signal) do not
achieve this. Here we aim for some security in the face of revealed randomness.
3.1 Security properties
Informally, we want our messaging protocol to provide implicit authentication and message
secrecy against various strong adversaries:
Security under a network adversary. The adversary has full control of message delivery, able
to intercept, read and modify any messages sent over the network.
Forward secrecy. Once an agent has derived a session key, revealing long-term keys or any
random values from subsequent operations should not compromise its security.
PCS [14]. If a stage derives a key, but at least one previous stage was uncompromised, the
derived key should be secret. Equivalently, after all of a party’s secrets are compromised,
if an intermediate stage completes with an uncorrupted key, then all subsequent stages
should be secure.
PCS is a goal which previous work does not aim for. As discussed earlier, without PCS an
adversary who compromises one participant may be able to intercept group messages indeﬁnitely,
a property which does not hold of two-party Signal communications.
3.2 Properties Out of Scope
Our goal in this work is to provide a provably-secure design for an asynchronous group messaging
system. In the interest of transparency, therefore, we discuss here some important messaging-
related problems which we do not set out to solve, referring the reader to other research or
designs. By “out of scope” we do not mean that these problems are unimportant or their
solutions unnecessary—rather, merely that we are not setting out to solve them in this work. In
many cases, a solution will indeed be necessary in a large-scale practical deployment. As we will
see later, our designs build on well-studied DH tree based systems, thereby enabling the reuse
of existing solutions as components.
7
3.2.1 Sender-speciﬁc authentication
In a group, authentication becomes more subtle: if Alice, Bob and Charlie share a symmetric
key and Alice receives a message encrypted under it which she did not send, she can conclude
only that either Bob or Charlie sent it. Depending on the context, this may not be a desirable
property of a group messaging system—in OTR it is considered a feature as a form of deniability,
while in Signal Protocol it is ruled out by sender keys’ explicit signatures. We choose the simpler
option and do not include signature keys, discussing this topic further in Section 8.
Centralised, unencrypted group messaging systems usually provide individual authentication
via the service provider’s accounts. For example, Facebook Messenger group chats do not allow
Bob to impersonate Charlie, because Bob must log into his Facebook account to send a message.
We do not assume such a trusted third party in our analyses. Of course, an encrypted messaging
system can also include authentication from a third party.
3.2.2 Malicious group members
In the two-party case, traditional security properties generally assume that the peer to a session
is honest. With n parties, there is an intermediate condition: when m < n members of the
group are honest. For example, Abdalla, Chevalier, Manulis, and Pointcheval [1] give a GKE
protocol which enables subsets of the group to derive their own key, aiming for security in a
subset even if another group member is malicious.
Although these properties are useful, we consider them orthogonal to our core research
question. Moreover, because we use standard constructions from the (synchronous) literature, we
anticipate that extending our design to handle group membership changes should be relatively
straightforward. We discuss dynamic groups further in Section 8.
Trust in the Initiator A particular example of a malicious insider is the group creator, who
may be able to choose malicious initial values. For example, a malicious creator might be able to
secretly add an eavesdropper to a group without revealing their presence to the other (honest)
group members. (Note that they could of course just publish the received messages, regardless
of the protocol.) As for any other group member, we consider this attack out of scope.
ART’s asynchronicity constraint means that Alice must be able to send a message to a group
she has just created, even if none of the other participants have yet been online. ART’s design
allows for this, but at a cost: if Alice is corrupted during this initial phase, the resulting stage
keys are insecure until all group members have performed an update. We capture this increased
requirement in our freshness predicates, and note that one can remove it if all participants are
online, by having each one in turn perform a key update. Our approach here is related to that
of the zero round-trip (0RTT) mode of TLS 1.3, in which agents can achieve asynchronicity at
the cost of a weaker security property for early messages.
3.2.3 Executability
Implementations of group messaging systems must deal with desynchronisation of state: if Bob
attempts to update his state without realising that Alice has already performed an update which
he does not know about, he may lose track of the current group key. In particular, if Alice and
Bob both send a key update at the same time, only one can consistently be applied; this does
not violate any secrecy properties, but may break availability if updating a key is necessary to
8
send a message. We remark on two main techniques to avoid trivial denials of service, though a
perfect solution is an open research question (studied e.g. by [12]) and we consider it out of
scope for our work.
The ﬁrst technique is to decouple state updates from message sending: once Bob has derived
a valid sending key, the protocol may accept messages sent under that key for a short duration
even if Bob should have performed a state update. This allows Bob to send messages immediately
while in the background performing a recovery process to return to the latest group state, at
the cost of weakened security guarantees due to the extended key lifetime.
A second solution is at the transport layer, either by enforcing in-order message delivery
or by refusing to accept out-of-order key updates and instead delivering the latest group state.
That is, when the transport layer server receives a state update from Bob which was generated
based on an out-of-date state, it can refuse to accept it and instead instruct Bob to process the
latest updates and retry. Since this enforcement can operate based only on message metadata,
a malicious transport server can then violate availability but not message conﬁdentiality or
integrity. This solution works ﬁne for many group sizes, but in very large groups may cause a
server performance bottleneck.
3.2.4 Transcript agreement
In many scenarios it is valuable for all group participants to agree on the ordered list of messages
that were sent and received in the group. Although this is a useful property, it has many
subtleties that are orthogonal to our key research questions and we do not cover it here.
4 Notation
We write x := y to denote assigning y to the variable x. We write x :=$ S to denote sampling a
random element from the distribution S and assigning it to the variable x; in particular, S may
be the output distribution of a randomised function f.
DH groups We work in a DH group G (with generator g) admitting a mapping ι(·) :
G → Z/|G|Z from group elements to integers, allowing us to interpret a group element gx itself
as the secret key corresponding to a new public key gι(gx). As a convention, we use lowercase
values k to represent DH secret keys, and uppercase values K = gk to represent their associated
public keys; thus for example the public setup key SUK is deﬁned to be gsuk. We denote by
DHKeyGen a randomised algorithm returning a private key in the DH group. To separate
the ART initial key exchange from the subsequent tree operations, we deﬁne a distinct key
generation algorithm KeyExchangeKeyGen that also returns a private DH key.
We assume that the following PRF-ODH problem is hard: given a tuple (gx, gy, zb) where
z0 := ι(gxy) and z1 := ι(gz) for uniformly randomly chosen z, the advantage of any PPT
distinguisher in outputting b is negligible.
Signatures and MACs ART uses two explicit authenticators: a signature to authenticate
the initial group setup message, and a MAC to authenticate subsequent updates. s = Sign(m, sk)
denotes a signature of the message m with the private key sk, and SigVerify(m, s, pk) veriﬁes
the signature against a public key pk, returning a boolean representing whether the veriﬁcation
succeeds. µ = MAC(m, k) is a MAC of the message m with the symmetric key k, and
MACVerify(m, µ, k) veriﬁes it and returns a boolean.
9
Trees We deﬁne binary trees as a combination of nodes (which contain two nested children)
and leaves (which contain no children), along with associated data at each node and leaf:
tree ::= (node(tree, tree), ·)| (leaf, ·). For a binary tree T , we use the notation |T| to refer to
the total number of leaves in the tree. We label each node of a tree with an index pair (x, y),
where x represents the level of the node: the number of nodes (excluding the node itself) in
the path to the root at index (0, 0). The children of a node at index (x, y) are (x + 1, 2y) and
(x + 1, 2y + 1). We write Tx,y for the data at index (x, y) in a tree T . All tree nodes but the root
have a parent node and a sibling (the other node directly contained in the parent). We refer to
the copath of an node in a tree as the set comprising its sibling in the tree, the sibling of its
parent node in the tree, and so on until reaching the root. An example of a copath is shown in
Figure 2. Finally, we usually associate a secret key x and corresponding public key gx to each
node, which we denote by labelling nodes with x ; gx.
Derived Keys ART contains various types of key:
Leaf keys λj are secret DH keys assigned to tree leaves.
Node keys nk are secret DH keys assigned to non-leaf nodes.
Tree keys tk are secret values derived at the tree root T0,0.
Stage keys sk are derived by combining the latest tk with the previous sk, using a hash chain.
Note that stage keys sk play the role of “root keys” in the two-party Signal protocol. We avoid
the term “root” to prevent confusion with the root of the DH tree.
5 Design
We now present ART’s core designs, in two parts.
First, we give a tree-based group DH protocol related to those from Section 2.1, but unlike
those protocols ours is the ﬁrst fully asynchronous design. In other words, it is possible for
all group members including the creator to conduct the key exchange protocol and derive the
shared group key without waiting for any other group member to respond to a message. This is
necessary in order to use a group AKE protocol in practical deployments, where group members
may be oﬄine due to e.g., unreliable mobile network connections.
Second, we deﬁne an eﬃcient protocol for an ART group member to update their personal
keys and establish a new shared group key, using the underlying tree structure in the group.
This update protocol enables Post-Compromise Security: if a group member’s local state is
compromised but they are later able to perform an update without adversarial interference,
then the group key derived after their update will once again be secret and authentic. ART is
the ﬁrst group AKE protocol to provide PCS.
Informal explanations of our algorithms follow in Sections 5.1 and 5.2, and formal deﬁnitions
in pseudocode are presented in Appendix A. Example trees are shown in Figure 3.
5.1 ART Construction
The main reason that we cannot directly deploy a tree DH protocol is that the initiator may be
the only online member when creating a group. Indeed, in a four-person group, even if Alice has
public keys to use for the three other leaves, she cannot compute the public key of the parent
node of C and D (marked below as “?”).
10
Alice generates a new ART tree with
1 = KeyExchange(ik a, IK b, suk , EK b)
λB
1 = KeyExchange(ik a, IK c, suk , EK c)
λC
1 = KeyExchange(ik a, IK d, suk , EK d)
λD
all
broadcasts
and
keys.
KeyExchange must be a strong one-