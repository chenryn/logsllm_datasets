Security Measurement and Assuring 
Reliability through metrics Technology  
(
SMART)
Applying Reliability Metrics to 
Security Vulnerabilities
Wayne Zage, Dolores Zage, Blake Self
Presentation Outline
1.
Background/overview of S2ERC
and design 
metrics
2.
Vulnerability Analyses
Security and Software Engineering 
Research Center (S2ERC)
• An NSF Industry/University Cooperative 
Research Center established in 1986 and   
extended in 2010
• Participation by ten+ universities 
representing  >50 researchers
• Collaborative, customized projects and 
technology transfer to affiliates are the 
hallmarks of the S2ERC
S2ERC Participating Universities
 Ball State
 DePaul
 Illinois at 
Chicago
 Iowa State
 IUPUI 
 IPFW
 Penn State
 Purdue
 West Florida
 Limerick
S2ERC Industrial Affiliates
 Angie’s List
 Bingham McHale
 Blue Cross Blue Shield
 Boeing
 John Deere
 Intelligent Information 
Technologies
 Iowa Dept. of 
Transportation
 Lockheed Martin
 MacAulay Brown
 NASA
 Northrop Grumman 
 Ontario Systems
 Raytheon
 NSWC – Crane
 Rockwell Collins
 TIAA
 Union Pacific
 US Army Research Lab
 US Dept. of Homeland 
Security
6
1986
1986
1989
1989 1993
1993
1999
1999
2003
2003
2005
2005
Reliability Study
Reliability Study
Technology
Technology
Development
Development
Industry
Industry
Validation Studies
Validation Studies
Ada
Ada
CC
C++
C++
Java   UML
Java   UML
Industry
Industry
SE Symposium
SE Symposium
2004
2004
Industry
Industry
Mission Assurance
Mission Assurance
Forum
Forum
Published Papers
Published Papers
High Reliability
High Reliability
Process Development
Process Development
Industry Validation 
Industry Validation ––
Northrop Grumman, Motorola, 
Northrop Grumman, Motorola, Bellcore
Bellcore, Raytheon, Army
, Raytheon, Army
Industry
Industry
Industry
Industry
Development
Development
Dissemination
Dissemination
SERC 
SERC 
Research
Research
SDL
SDL
Industry
Industry
Workshops
Workshops
Process
Process
Deployment
Deployment
SERC 
SERC 
Technical Report
Technical Report
NASA 
NASA 
Symposium
Symposium
Industry funded 
Industry funded 
SERC Research
SERC Research
Industry
Industry
Mission Assurance
Mission Assurance
Workshops
Workshops
ISSRE 05
ISSRE 05
SSTC 07
SSTC 07
NASA 
NASA 
Workshops
Workshops
NSWC
NSWC
The S2ERC Design Metrics Research 
Timeline
2006
2006 2007
2007
2008
2008 2009
2009
SSTC 10
SSTC 10
PHP
PHP
S2ERC National Recognition
The 2007 Alexander Schwarzkopf Prize for 
Technological Innovation from the NSF 
I/UCRC Association recognized the 
achievements in developing software design 
metrics that identify fault-prone modules early 
in the software lifecycle, thereby allowing 
significant improvements in software quality 
and productivity. 
De - an external view of design complexity
Di - an internal view of design complexity
De
Di
Overview of the Design Metrics, 
De
and Di
S2ERC Design Metrics Research has 
been funded by ...
National Science Foundation
Motorola Corp. 
Nortel Technologies
Telcordia
Technologies
Northrop Grumman Corp.
Computer Sciences Corp.
GTE Data Services
Magnavox Electronic Systems Co.
Harris Corp.
Raytheon
US Army Research Lab
Ball State University
The design metrics have been 
computed on
university‐based projects
CSC’s STANFINS project
systems from the US Army Research Lab          
Harris’
ROCC project
Magnavox’s AFATDS project
PBX system from Telcordia
Technologies
three Northrop Grumman projects                   
three Raytheon projects                                         
telecommunications systems from Motorola
Results:
The design metrics have correctly
identified at least 76% of the 
defect-prone modules 100% of the time.
The External Metric De
De
= e1
(inflows * outflows) + e2 
(fan in * fan out)
2
1
3
2
2
De 
= ( (2+2+3)
* (1+2) ) + (1*2) = 23
The External Metric De
De
= e1
(inflows * outflows) + e2
(fan in * fan out)
2
1
3
2
2
De 
= ( (2+2+3) * (1+2) ) + (1*2) = 23
The External Metric De
De
= e1
(inflows * outflows) + e2
(fan in * fan out)
2
1
3
2
2
De 
= ( (2+2+3) * (1+2) ) + (1*2) = 23
The External Metric De
De 
= e1
(inflows * outflows) + e2
(fan in * fan out)
2
1
3
2
2
De 
= ( (2+2+3) * (1+2) ) + (1*2) = 23
The Internal Metric Di
Di
= w1
(CC) + w2
(DSM) + w3
(I/O)
where:
CC
( Central Calls ) are procedure or function 
invocations
DSM
( Data Structure Manipulations ) are 
references to complex data types
I/O
( Input/Output ) are external device accesses
Extending Design Metrics Technology 
to a Software Security Engineering 
Process
Software Reality
Consists of complex, multiple technologies 
with multiple suppliers
Defects
Intentional
Vulnerabilities
Unintentional
Vulnerabilities
EXPLOITABLE SOFTWARE
Exploitation potential of vulnerability independent of 
Exploitation potential of vulnerability independent of ““intent
intent””
Software Vulnerabilities
Fault‐prone component
Likely to contain faults
Failure‐prone component
Likely to have failures in field
Reliability context
(well-established) –
Design Metrics Reliability 
Research
Security context 
(to be established )
the SMART project
funded by ARL
Vulnerability‐prone component
Likely to contain vulnerabilities
Attack‐prone component
Likely to be exploited in the field
Reliability and Security Parallels
SMART Project Objectives
 Investigate the overlap and interrelationships in 
the software constructs that affect the reliability 
and security of software
 Develop security metrics to identify, categorize 
and analyze security weaknesses
Our Representative 
Systems/Technologies 
Drupal
Security: Expectations and Directions
• Some vulnerable components will be 
identified by design metrics.
• A huge “win”
if 50% of the components 
containing documented vulnerabilities are  
identified by design metrics.
• New security‐related primitives will be needed 
to increase that percentage.
Our Team’s General Process of 
Metric/Vulnerability Analysis 
Vulnerability
Updates by 
module
Selected System’s
Published CVS 
Reports
Vulnerability 
updates
scan
parses
Metrics + 
Vulnerabilities
Results/reports
analysis
match
CWE 
Category
OPEN 
SOLARIS
FIREFOX 
2.0.0.1
FIREFOX 
2.0.0.2
FIREFOX 
2.0.0.5
Open‐
SSH
HTTPD
Code 
Quality
6
1
0
2
2
11
Data 
Handling
5
10
30
69
13*
19
Security 
Features
8
2
0
20
2
5
Time and 
State
5
0
0
0
0
0
Error 
Handling
0
5
0
0
1
1
API Abuse
0
0
0
0
2
1
24
18
30
91
20
37
Common Weakness Enumeration
and Systems
Secret life of the open source 
code
Ongoing Work
• Apache
• Open Solaris
• FireFox
• OpenSSH
• Drupal
Apache HTTP Server
• Designed by Robert 
McCool
• Developed by Apache 
Software foundation
• Initial release 1995
• Latest release 2.2.15 on 
03/06/2010
• Since April 1996 Apache 
has been the most 
popular HTTP server on 
the WWW.
• As of March 2009
Apache served over   
46% of all websites and 
over 66% of the million 
busiest.
Apache Vulnerabilities
• Apache
• For version 1.3.1 
– 144 files
– 8 vulnerabilities identified
De
Metric Analysis on Apache 1.3.1
87.5% or 7 out of the 8 vulnerable modules 
were identified in the top 10%  
Graphic of Indicated Stress Modules 
OpenSolaris
• based on Sun 
Microsystems' Solaris
• Latest release 2009.06  
on 06/01/2009
• OpenSolaris
is derived 
from the Unix System V   
Release 4 codebase, 
with significant 
modifications made by 
Sun since it bought the 
rights to that code in 
1994.
OpenSolaris Vulnerabilities
OpenSolaris
Vulnerabilities and 
Source
• 22,600 files in the downloadable tar file
• 23 module updates from vulnerabilities 
totaling 37 changes 
• 5 is the largest # of changes on one module
• We want to identify the 23 modules out of the 
22,600 x modules in files, approximately 1 in 
10,000
Divide and Conquer
• 18 module vulnerability updates located in 
the /usr/src/uts/common
stem (3983 files)
• 5,946,281 xml tags in the 3983 files
• 5 module vulnerability updates located in the 
/usr/src/cmd/sgs/rtld/common
stem (29 files)
• 90,417 xml tags in the 29 files
De
Metric Analysis on 
/usr/src/cmd/sgs/rtld/common
60% or 3 out of the 5 vulnerable modules or  
69% or 9 out of 13 changes were identified  
FireFox
• Mozilla Firefox
is a web 
browser
• Designed by and 
developed by Mozilla 
Corporation
• Initial release 
November 9, 2004
• Latest release 3.6.6 on 
06/26/2010
• Firefox had 22.05% of 
the recorded usage 
share of web browsers  
as of March 2009, 
making it the second  
most popular browser   
in terms of current use 
worldwide, after 
Internet Explorer.
FireFox Vulnerabilities
• Multiple versions of three software systems 
studied
• Source Code is THE primary source of 
vulnerability reports
• At least 51% and at most 86% of reported 
vulnerabilities are in Data Handling
• Data Structure Manipulations (DSM) is the 
best predictor of vulnerabilities
General Analysis
OpenSSH
• Developed by OpenBSD
Project
• OpenSSH
first appeared 
in OpenBSD
2.6 and the 
first portable release 
was made in October 
1999
• Latest release 5.5/5.5p1 
on 04/16/2010
• Set of computer 
programs providing  
encrypted 
communication 
sessions over a 
computer network 
using the ssh
protocol. 
OpenSSH Vulnerabilities
OpenSSH 3.8p1
• Files: 243
• Modules: 2,437
• Definitions: 2,992
• preprocessor directives: 5,147
• user defined include files: 1,101
• conditional expressions: 61,815
• xml tags: 703,850
• 31 vulnerable modules identified
•
Ranked modules by De 
•
18 of the 31 vulnerable modules in 
the top 10% (58%)
•
23 of the 31 vulnerable modules in 
top 20% (74%)
•
The remaining 8 had additional 
suspicious patterns :
Modules were named “x”
and 
had a “mate”
x1
Duplicate names
•
Drupal
• Initial release January 
2001
(2001‐01) 
• Latest release 6.17 June 
2010
• Written in PHP
• Operating system 
cross‐platform 
 Open Source Content 
Management System (CMS)
 Over 350,000 subscribed 
members today
 Consists of PHP, INC, JavaScript, 
Perl, XML files
 DrupalSites.net is a directory that 
list thousands of websites 
powered by Drupal
 Winner of  Best Overall 2008 
Open Source CMS Award for 
Second Year in a Row
 Listed as one of the Open Source 
PHP applications that changed 
the world
• PHP Process of Metric/Vulnerability Analysis
• Constructed the Drupal
Vulnerabilities Miner 
(DVM)
• the Drupal
CVS web site 
(http://www.drupal.org/security). 
• DVM  isolated 277 RCS file patches identified from 
140 vulnerability  updates.
• Approximately 105 Drupal
PHP files
Drupal
Vulnerabilities and Source
Generic Source Analysis
Metrics
On Modules
Selected 
System
XML 
representation 
convert
collect
Designing a PHP2XML tool
Mapping PHP primitive tags to 
primitive design metrics
PHP Source Analysis
• A knowledge of where
vulnerabilities are most 
likely to reside can help prioritize security 
efforts.
• Analyzing multiple technologies and mapping 
the vulnerabilities to the CWE to ensure 
coverage 
• Merge multiple technologies through 
mapping the individual xml representations, 
isolates commonality and individuality
Benefits 
Next Research Steps
• Continue the analysis of the open source 
systems
• Investigate other primitives to identify, 
categorize security weakness
• Apply technologies to systems other than 
open source (YOURS?)
• Combine into the network model