the list of system parameters 
and used 
3.4 System Initialization 
Given the total number of tags the RFID system is 
and per­
NT, and predefined 
security 
requirements 
chooses the following 
(more about this later), 
parameters 
the system 
to start the 
suppose to handle, 
formance 
designer 
initialization 
phase: 
Once the system parameters 
initialization 
be summarized 
phase can start. 
in the following 
steps. 
have been chosen, the 
phase can 
The initialization 
1) Given the number of pseudonyms, 
[, the system designer 
N, and the length 
draws, without 
of each pseudonym, 
978-1-4244-7501-8/10/$26.00 ©201 O  IEEE 
5 
DSN 201 0 :  Alomair et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 13:58:33 UTC from IEEE Xplore.  Restrictions apply. 
201 0  IEEE/IFIP 
International 
Conference 
on Dependable 
Systems & Networks (DSN) 
11(1/11,0) h(c/t)' I)  ... 11(c/tI,C -I) 
11(c/t2, I)  ... h(I/J2,C-l) 
11(1/12,0) 
h(I/IN,O) h(c/tN, I)  ... 11(c/tN,C-l) 
Fig. 2. During database initialization, 
all values of h(l/I, c) are 
computed. 
[-bit strings. 
N pseudonyms 
That is, N distinct 
randomly from the set of 
replacement, 
all possible 
1/1],1/12, . . .  , I/IN, are chosen at random from to, l}t. Each tag 
and a secret key, and each 
is given a unique pseudonym 
tag's counter is initially 
set to zero. We emphasize 
that 
the drawn pseudonyms 
tags' privacy 
can be breached. 
are not publicly 
pseudonyms, 
known; otherwise, 
2) For each pseudonym, 
I/Ii, the hash value h(l/Ii, c) is 
computed for all i =  1, . . .  , N and all c = 0, . . .  , C - 1. 
That is, a total of NC hash operations 
as depicted 
2 corresponds 
entries 
address carrying 
the pseudonym I/Ii. 
all 
in the eh row must point to the same memory 
about the tag identified 
in Figure 2. Each row of the table in Figure 
Therefore, 
to the same pseudonym. 
information 
by 
must be performed, 
uniquely, 
by choosing 
functions, 
the hash function, 
In order for tags to be identified 
function, 
as compression 
as opposed to the usual use of hash 
so that collision 
will 
1 We will assume that the 
has length L bits, which  must 
the hash 
values in the table of Figure 2 must be distinct. 
This can 
be achieved 
h, to be an 
expansion 
functions 
occur with small probability. 
output of the hash function 
be at least equal to flog2 NCl so that the table in Figure 2, 
which is of size NC, can be constructed 
(L will be much larger in practice). 
causes a collision 
replaced 
(Observe 
2f, which is much larger than the required 
pseudonyms 
N, giving the system designer 
degree of freedom in constructing 
appropriate 
values with no collisions 
operation 
phase, thus, it does not undermine 
system. 
that 
in Figure 2 is found, the pseudonym 
the system.) With the 
a table of hash 
Note that this 
by another one that does not cause a collision. 
that the pool of possible 
If a pseudonym 
is 
number of 
a sufficient 
choice of the hash function, 
can be constructed. 
the peiformance 
of the 
collisions 
pseudonyms 
without 
is of size 
Since the length of h(l/Ii, c) (the tags' identifiers), 
L, is 
it would be infeasible 
to have a 
large to avoid collision, 
1. For example, 
hash functions, 
length. 
this can be accomplished 
. ·llhm(x), 
multiple 
so that hex) has the required 
i.e., hex) = hI (x)II' 
by concatenating 
is peiformed only once during the initialization 
privacy-preserving 
storage 
requires 
For example, 
that can accommodate 
(for direct addressing). 
all possible 
L-bit 
if L =  128, 
of size in the order of 4 x 1028 Gigabyte 
physical 
strings 
a database 
will be required.  Previously  proposed 
schemes solve this problem in one of two approaches. 
The first approach 
information 
the reader to perform a linear search among tags in the 
system to identify 
thus requiring 
O(NT) 
space and O(NT) time for identification. 
The other method 
identifies 
tags based on their key information 
the reader to perform logarithmic 
responses; 
for identification. 
search to identify 
O(NT) space and O(log NT) time 
about each tag in the system, and requires 
O(NT) memory space to store 
tags' responses; 
thus requiring 
and requires 
tags' 
3) For ease of presentation, 
we will divide the database 
parts, 
of a single table of size O(2n).The 
into three logical 
M-I, M-II, and M-III. The first part, 
M-I, consists 
second 
part, M-II, consists 
the total 
size of all the tables in M-II is O(NC). Finally, the last 
part, M-III, is of size O(N). 
smaller tables; 
of multiple 
The table in M-I is a table of pointers. 
The addresses 
below). 
relation 
bits are the same (recall 
is L > n). All hash values that 
i.e., share the n most significant 
of M -I range from on to 1 n; each entry in the table points 
to the head of one of the mini tables in M-II (according 
to a specific 
two fields. In the first 
in the table of Figure 
explained 
Each entry of M-II contains 
field, the hash values obtained 
2 are stored (i.e., h(l/Ii, c) for all i =  1, . . .  , N and all 
c =  0, . . .  , C - I). M-II is organized 
based on the hash 
values stored in the first field. We say that two hash values 
h(l/I] , c]) and h(1/I2, C2) are in the same position, 
b, if their 
n most significant 
that the output 
length of the hash function 
have the same position, 
bits, are stored in the same mini table in M-II (e.g., the 
hash values with b =  s in Figure 3). Hash values with 
tables (e.g., hash 
distinct 
that Figure 2 
values with b = on, s, In in Figure 3). (Recall 
contains 
hence, table M-II can 
be viewed as a reorganized 
of the two-dimensional 
table in Figure 2 into a one-dimensional 
table of size 
O(NC).) The second field of each entry of M-II stores a 
pointer 
information 
about 
a tag in the system (depending 
on the value of the first 
field). For example, 
h(l/Ii, c), then the value in the second field will be a pointer 
to the data entry in M-III where information 
with pseudonym I/Ii can be found. 
the computed hash values; 
version 
to an entry in M-III containing 
if the value stored in the first field is 
are stored in different 
positions 
about the tag 
the following: 
After M-II has been constructed, 
at M-I 
the pointers 
are chosen to satisfy 
the pointer 
stored at 
address a in M-I must point to the mini table in M-II 
that stores identifiers 
a. In other words, each 
pointer 
equal to the address 
in M-I must point to the identifiers 
of the pointer. 
with position 
with position 
978-1-4244-75 0 1-8/101$26.00 ©20 1 0  IEEE 
6 
DSN 20 I 0: Alomair et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 13:58:33 UTC from IEEE Xplore.  Restrictions apply. 
201 0  IEEE/IFIP 
International 
Conference 
on Dependable 
Systems & Networks 
(DSN) 
partitions. 
The identification 
Remark 1,' Recall that the pseudonyms 
illustrate 
the structure 
of the 
M-II 
M-III 
h(t/ti, Cj) 
p' 
=  silt; 
M-I 
0" null 
PI 
S  P.< 
I"  P2"-1 
Fig. 3. The three·tier 
architecture 
of the database. 
Finally, 
M-III is the actual storage 
where tags' infor­
Figure 3 depicts 
the architecture 
of the 
mation is stored. 
database 
phase below will further 
database. 
with the three logical 
3.5 Tag Identification 
Tags in a protocol 
run of the system are identified 
counters. 
concatenated 
by the hash of their pseudonyms 
internal 
eh pseudonym concatenated 
'Pi,c := h(t/li, c). Furthermore, 
truncated 
n most significant 
Denote by 'Pi,c the hash value of the 
with a counter c; that is, 
we will denote by 'PZc the 
the 
bits of 'Pi,c (i.e., the position 
more precisely, 
value of 'Pi,c; 
'PZc represents 
with their 
of 'Pi,c). 
the reader accesses 
a 
the data 
Once 'Pi,c has been received, 
Therefore, 
here: 
with position 
bits of the received 
'Pi,c are zeros, then no valid 
p, at address 'PZc points to a table in M-II 
the first field of the 
entry at address 'PZc in M-1. This table entry is actually 
p, to one of the tables in M-II. There are three 
pointer, 
possible 
scenarios 
a) The value at address 'PZc in M-I is a null. This implies 
that, during the construction 
of the table in Figure 2, 
'PZc is constructed. 
no identifier 
either the tag is not a valid one or the tag's response 
has 
been modified. 
In the example of Figure 3, if the n most 
significant 
tag matches this response. 
b) The pointer, 
with exactly 
entry pointed 
the value at the second field will be a pointer 
M-III that contains 
tag. 
In the example of Figure 3, if the n most significant 
the received 
M-I will point to the entry at M-II at which %,< = Inllt 
and the pointer, 
the entry at M-III where information 
pseudonym t/lk is stored. 
c) The pointer 
M-II with more than one entry. In this scenario, 
searches 
reaches 
the first fields of the mini table in M-II until it 
the entry that matches the complete 
one entry. In this scenario, 
'Pi,c; 
at by p must be the entire (untruncated) 
at address 'PZc of M-I points to a table in 
'Pi,c are ones, then the pointer 
bits of 
at address I n in 
about the interrogated 
In turn, p" will point to 
p", are stored. 
about the tag with 
information 
to the entry in 
the reader 
second field) to get the tag's information. 
'Pi,c; 
the pointer 
(in the 
identifier, 
and then follows 
received 
corresponding 
In the example of Figure 3, if the received 
'Pk,Ck = slltko the reader will follow the pointer 
of M-1. The pointer, 
more than one entry. Therefore, 
until it reaches 
for the received 
reader can follow the pointer, 
containing 
however, 
the last entry of the table to find a match 
'Pk,Ck = slltk. 
Once the match is found, the 
identifier 
at address 
points to a table in M-II with 
is 
s 
p", to the entry in M-III 
about the tag with pseudonym t/lk' 
the reader must search 
information 
The identification 
process 
tion of tags in the system. 
that, in the initialization 
Figure 2 are distinct. 
distinct, 
allowing 
Consequently, 
phase, the values in the table of 
in M-II are 
for the unique identification 
of tags. 
drawn in the 
the entries 
allows for unique identifica­
This is due to the requirement 
not publicly 
initialization  are 
known. If the pseudonyms 
were published, 
an adversary 
can, in principle, 
construct 
her own system and identify tags in constant-time. 
discussion 
pseudonyms 
about the adversary's 
is provided in Section 
ability to expose secret 
7. 
Further 
3.6 System Update 
that the number of pseudonyms 
pseudonyms 
the reader draws 
Once a tag has been authenticated, 
generated 
one of the unoccupied 
tialization 
phase. (Recall 
than the number of tags in the system; conse­
is greater 
quently, 
avail­
able for identity 
pseudonym 
tag in a secret and authenticated 
there will always be unused pseudonyms 
it is to be transmitted 
randomization.
has been chosen, 
) Once an unoccupied 
in the ini­
to the 
way. 
must be up­
To allow for correct 
identification 
the database 
A straightforward 
way of updating 
the 
to the 
corresponding 
For example, 
if the 
has been updated, 
pseudonym 
dated accordingly. 
is by updating 
database 
the pointers 
outdated 
and updated pseudonyms. 
tag's outdated 
pseudonym 
is t/lko then all pointers 
'Pi,D, 
in M-II corresponding 
point to the entry in M-III containing 
tag. This method, however, 
to entries 
requires 
pseudonym 
to entries 
'Pi, I , . . .  , 'Pi,C-l must point to a null; and all pointers 
is t/li and its updated 
in M-II corresponding 
'Pk,D, 'Pk,l, . . .  , 'Pk,C-
l must 
information 
about the 
O(C) updates. 
of a tag  after  its 
method that allows a faster update is 
as 
is moved to 
the tag's information 
of updating 
the pointers 
at by the pointers 
in M-II. The only price to pay 
one is that the size of 
corresponding 
from O(NT) to O(N) (asymptotically, 
An alternative 
in Figure 4. Instead 
depicted 
in the previous  method, 
the entry in M-III pointed 
to the updated pseudonym 
for this method over the previous 
M-III will increase 
N and NT are of the same size). 
4, instead 
to p, and changing 
information 
of changing 
all entries 
entries 
In the example of Figure 
in M-II with pointer 
p to null, the tag's 
p' 
with pointer 
(untruncated) 
is moved to the entry in M-III pointed 
at by 
978·1·4244· 7501·8/101$26.00 
©201 0  IEEE 
7 
DSN 20 I 0: Alomair et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 13:58:33 UTC from IEEE Xplore.  Restrictions apply. 
201 0  IEEE/IFIP 
International 
Conference 
on Dependable 
Systems & Networks 
(DSN) 
h(j,Cj) 
h(hct) p' 
P 
h(j,Cj) 
Empty  h(I, q) 
P 
p' 
Ir(j,c';'} P 
h(j,C;) 
p 
Ir(hc';} p' 
In!on/w/jon h(j,C;) p 
abolll 
tag T 1r(I'CZ) p' 
1r(j,C;') p 
h(hC;) p' 
(a) 
h(h) p' 
(b) 
Fig. 4. (a) Before (b) After; an illustration 
of database update. 
p' and the entry pointed 
at by P is emptied. 
4 Performance Analysis 
(One can show that equation 
function 
by verifying 
that Lo Pr[k = k] = 1.) 
(6) is a valid probability 
mass 
Using the fact that e = Lo b, the expected 
number of 
truncated 
\{Ii,c'S 
with the same value is 
E[k] = I k . Pr[k = k] = e-I I ,. = 1.  (7) 
00  1 
k=O k. 
00 
k=O 
(7), however, 
upon receiving 
the tag. Equation 
that the expected 
it will have to search the 
Recall that identifiers 
one of these identifiers 
\{Ii,c with the same truncated 
value 
\{IZc will be in the same table in M-II; and when the reader 
receives 
table to be able to identify 
implies 
size of the tables in M-II is one. 
Therefore, 
a tag identifier 
goes to the table entry in M-I at address \{IZc' follows 
the 
pointer 
\{Ii,c (on average there 
Il pointed 
will be only one entry by (7», and then follows 
P2 to information 
is independent 
average). 
the search time 
of the number of tags in the system (on 
PI stored at that address, 
at by PI for the received 
about the tag. Indeed, 
searches 
the reader 
the table in M­
\{Ii,c, 
a pointer 
consists 
Since the database 
of three parts, M-I, M-II, 
and M-III; and since the size of M-I is O(2n), the size 
of M-I1 is O(NC), and the size of M-III is O(N), the 
only concern is the size of M-1. The above analysis 
shows 
the 
that, by choosing 
n  = ilog2 NCl, the system achieves 
constant-time 
the size of 
M-I is O(NC) and, consequently, 
the total size of the 
database 
from the number of tags in the system; and N is O(NT). 
Therefore, 
the database 
is O(NT). 
claim. Therefore, 
is O(NC). However, 
identification 
with the proposed 
C is a constant, 
the required 
size of 
system, 
independent 
for constant-time  identification 
to be achieved 
For the proposed 
scheme to be practical, 
we must 
can be chosen such that 
identification 
show that a set of parameters 
our claim of constant-time 
with feasible 
(namely, 
This section 
appropriately 
can achieve 
size O(NT). 
can be achieved 
resources 
database 
size). 
is devoted to showing that, with a set of 
chosen parameters, 
identification 
constant-time 
with a database 
the proposed 
feasible 
technique 
of 
Assuming that the \{Ij,c'S 
that the truncated 