在这个复杂的虚拟机的支持下，FinFisher所执行的第一个阶段载荷为一个加载器（loader）恶意软件，该恶意软件的功能是探测系统环境，判断自身是否运行在一个沙箱环境中（通常为基于云的安全解决方案，如Office
365 ATP）。
加载器首先会动态重建一个简单的导入地址表（IAT），从Kernel32以及NtDll库中解析所需的所有API。随后，加载器在一个衍生的新线程中继续执行，检查自己的虚拟地址空间内是否有其他不需要的模块（比如某些安全解决方案所注入的模块）。加载器最终会结束属于这些模块的所有线程（使用
_ZwQueryInformationThread_ 原生API以及 _ThreadQuerySetWin32StartAddress_ 信息类）。
加载器所使用的第一个反沙箱技术就是检查代码段，如果该值不是 _0x1B_ （32位系统）或者 _0x23_
（Wow64下的32位系统），那么加载器就会退出执行。
接下来，释放器会检查自己的父进程，判断自己是否运行在沙箱环境中。恶意软件会计算小写进程名的MD5值，如果满足以下任意一个条件，则结束该进程：
1、父进程名称的MD5哈希值为`D0C4DBFA1F3962AED583F6FCE666F8BC`或者`3CE30F5FED4C67053379518EACFCF879`；
2、父进程的完整镜像路径等于自己的进程路径。
如果通过这些初始检查过程，加载器就会从磁盘中读取4个导入程序库（ _ntdll.dll_ 、 _kernel32.dll_ 、 _advapi32.dll_
以及 _version.dll_
），在内存中重新映射这些库，从而构建一个完整的IAT。这种技术可以使某些调试器以及软件断点无功而返。在这个阶段，加载器可能会使用原生系统调用来调用一个特定的API，这也是绕过API断点以及使用hook技术的安全解决方案的另一种方法。
图7. FinFisher加载器调用原生Windows API实现反调试目的
此时我们的分析之旅尚未结束。恶意软件还会执行其他反沙箱检查步骤，具体顺序如下：
1、检查恶意软件没有在驱动器的根目录下执行；
2、检查是否可以从外部源读取恶意软件文件；
3、检查基础路径的哈希值并非`3D6D62AF1A7C8053DBC8E110A530C679`；
4、检查恶意软件的完整路径中只包含可读的字符（即“a-z”、“A-Z”以及“0-9”）；
5、检查完整路径中任何一个节点都不包含恶意软件文件的MD5字符串；
6、收集系统指纹信息，检查如下字符串：
    HKLMSOFTWAREMicrosoftCryptographyMachineGuid的值不应该为“6ba1d002-21ed-4dbe-afb5-08cf8b81ca32”
    HKLMSOFTWAREMicrosoftWindows NTCurrentVersionDigitalProductId的值不应该为“55274-649-6478953-23109”、“A22-00001”或者“47220”
    HARDWAREDescriptionSystemSystemBiosDate的值不应该包含“01/02/03”
7、检查系统中尚未存在 _WininetStartupMutex0_ 这个互斥量（mutex）；
8、检查已映射到恶意软件地址空间中的DLL，判断这些DLL的基础名称中并没有包含`0xC9CEF3E4`这个哈希值。
上面这些检查步骤中所引用的哈希值很有可能与FinFisher开发者希望规避的沙箱或者安全产品有关。
接下来，加载器会检查自己没有运行在虚拟化环境中（VMWare或者Hyper-V）或者调试器下。在硬件虚拟化检测方面，加载器会获取硬件设备列表，检查厂商ID的MD5值是否位于事先设定的一个列表中。在我们的测试过程中，恶意软件样本可以通过检测虚拟的外围设备轻松检测到VMWare以及Hyper-V环境的存在（比如，Vmware的厂商ID为VEN_15AD，而HyperV的总线名称为VMBus）。Office 365
ATP沙箱采用了特殊的机制，可以规避恶意软件的类似检测技术。
加载器的反调试代码基于如下3种方法：
1、第一次调用，目的是破坏调试器与当前进程的连接：
备注：这个调用可以完全停止WinDbg以及其他调试器的执行。
2、第二次调用，目的是检测调试器是否存在：
3、最后一次调用，目的是排除掉软件断点存在的可能性：
最后，如果通过了所有这些验证，加载器会根据受害者操作系统的具体情况（32位或者64位），解密可执行文件中内嵌的一组位图资源（stage
2），准备执行一个新的VM解码层。
恶意软件会提取出每个位图资源，剔除前0x428个字节（BMP头部以及一些垃圾数据），合并成一个文件。恶意软件使用一个自定义的算法来解密这段数据（解密密钥等于原始恶意软件释放器中
_TimeDateStamp_ 字段的值乘以5）。
图8. 伪装成位图图像的资源
32位的stage 2恶意软件会使用自定义的加载机制（该PE文件使用了拼凑形式的IAT以及重定位表），只导出了一个函数。对于64位的stage
2恶意软件，开发者使用了[非常知名](https://www.malwaretech.com/2014/02/the-0x33-segment-selector-heavens-gate.html)的[天堂之门（Heaven’s Gate）](http://www.alex-ionescu.com/?p=300)技术来移交代码执行权。下文中为了简单起见，我们只分析了64位的攻击载荷。
图9. 恶意软件所使用的天堂之门技术
## 五、Stage 2—第二个多平台虚拟机
64位的stage
2恶意软件实现了另一个加载器以及另一个虚拟机。整体架构与前文描述的非常相似，但操作码稍微有点不同。逆向分析完这些操作码后，我们更新了自己研发的解释器脚本，可以支持FinFisher使用的32位及64位虚拟机。
**序号** | **等效符号** | **功能描述**  
---|---|---  
0x0 | JMP | 经过特殊混淆处理的条件跳转（始终跳转或者始终忽略）  
0x1 | JMP | 跳转到某个函数（与0x10操作码一样）  
0x2 | CALL | 调用某个内部VM值所指向的函数  
0x3 | CALL | 经过优化的CALL函数（类似32位虚拟机中的0x1E操作码）  
0x4 | EXEC | 执行代码移动到下一个数据包  
0x5 | JMP | 跳转到某个内部函数  
0x6 | NOP | 空操作，移动到下一个数据包  
0x7 | CALL | 调用某个导入的API（其地址存放在内部VM值中）  
0x8 | LOAD | 将某个值载入VM描述符结构中  
0x9 | STORE | 将内部VM值存储在某个寄存器中  
0xA | WRITE | 解析某个指针，存放某个寄存器的值  
0xB | READ | 将VM内部值所指向的值移动到某个寄存器中  
0xC | LOAD | 将某个值加载到VM描述符结构中（未优化）  
0xD | CMP | 将内部VM描述符指向的值与某个寄存器进行比较  
0xE | CMP | 将内部VM描述符指向的值与某个立即数进行比较  
0xF | XCHG | 将内部VM描述符指向的值与某个寄存器交换  
0x10 | SHL | 跳转到某个函数（与0x1操作码一样）  
新增的这个虚拟机的职能与前文描述的那个虚拟机一样，但新的虚拟机使用的是64位环境。该虚拟机可以提取并解密stage
3的恶意软件，而恶意软件存储在加密的资源中（如虚假的对话框）。恶意软件所使用的提取方法与前文描述的相同，但加密算法（同样是XOR算法）却更加简单。新的载荷会在内存中解密、重新映射并执行，代表的是恶意软件的安装以及本地持久化阶段。
## 六、Stage 3—采用新型DLL旁路加载技术的安装器
Stage
3的恶意软件代表的是FinFisher的安装程序，这是不使用虚拟机或混淆处理的第一个载荷。恶意代码支持两种不同的安装方法：在UAC环境中安装（只具备有限的权限），或者使用完整的管理员权限安装（如果恶意软件能够以高权限运行）。经过去混淆处理后，我们并没有发现恶意软件中用到了真正的特权提升漏洞技术，这有点令人失望，但似乎只要绕过UAC限制，FinFisher样本就可以正常工作。
安装代码会从上一个阶段那收到一个安装命令。在我们的测试过程中，这个命令对应的是3这个值。恶意软件创建了名为 _0x0A7F1FFAB12BB2_
的一个全局事件，将某些文件释放到 _C:ProgramData_
或者用户的应用程序数据目录中。恶意软件会从某个自定义的文件中读取待释放的目录名称以及恶意软件配置信息，而自定义的文件存放在安装程序的资源区域中。
在安装阶段可能释放出来的文件如下所示：
文件名 | **阶段** | **描述**  
---|---|---  
d3d9.dll | Stage 4 | 用于UAC环境的恶意软件加载器（具备部分权限），同样经过VM混淆保护处理  
sspisrv.dll, userenv.dll | Stage 4 |
在管理员权限下使用的恶意软件加载器；从伪造的服务中执行或者注入到虚假服务中；同样经过VM混淆保护处理  
msvcr90.dll | Stage 5 | 注入 _explorer.exe_ 或者 _winlogon.exe_
进程的恶意软件载荷，同样经过VM混淆保护处理  
.cab | Config | 主配置文件，经过加密处理  
setup.cab | 未知 | 安装程序的最后一部分，具体内容仍然未知  
.7z | 插件 | 用来窥探受害者网络通信的恶意软件插件  
wsecedit.rar | Stage 6 | 恶意软件主执行程序  
完成以上某些文件的写入操作后，恶意软件会根据宿主进程（比如Microsoft Office进程）所具备的当前权限来决定执行哪种安装操作：
**1、在UAC环境下的安装过程**