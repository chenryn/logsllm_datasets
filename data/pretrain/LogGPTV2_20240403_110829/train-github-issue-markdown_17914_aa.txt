You get a confusing error message when trying to concat on non-unique (but
also non-exactly-equal) indices. Small example:
    In [57]: df1 = pd.DataFrame({'col1': [1, 2, 3]}, index=[0, 0, 1])
        ...: df2 = pd.DataFrame({'col2': [1, 2, 3]}, index=[0, 1, 2])
    In [59]: pd.concat([df1, df2], axis=1)
    ---------------------------------------------------------------------------
    ValueError                                Traceback (most recent call last)
     in ()
    ----> 1 pd.concat([df1, df2], axis=1)
    /home/joris/scipy/pandas/pandas/tools/concat.py in concat(objs, axis, join, join_axes, ignore_index, keys, levels, names, verify_integrity, copy)
        205                        verify_integrity=verify_integrity,
        206                        copy=copy)
    --> 207     return op.get_result()
        208 
        209 
    /home/joris/scipy/pandas/pandas/tools/concat.py in get_result(self)
        405             new_data = concatenate_block_managers(
        406                 mgrs_indexers, self.new_axes, concat_axis=self.axis,
    --> 407                 copy=self.copy)
        408             if not self.copy:
        409                 new_data._consolidate_inplace()
    /home/joris/scipy/pandas/pandas/core/internals.py in concatenate_block_managers(mgrs_indexers, axes, concat_axis, copy)
       4849         placement=placement) for placement, join_units in concat_plan]
       4850 
    -> 4851     return BlockManager(blocks, axes)
       4852 
       4853 
    /home/joris/scipy/pandas/pandas/core/internals.py in __init__(self, blocks, axes, do_integrity_check, fastpath)
       2784 
       2785         if do_integrity_check:
    -> 2786             self._verify_integrity()
       2787 
       2788         self._consolidate_check()
    /home/joris/scipy/pandas/pandas/core/internals.py in _verify_integrity(self)
       2994         for block in self.blocks:
       2995             if block._verify_integrity and block.shape[1:] != mgr_shape[1:]:
    -> 2996                 construction_error(tot_items, block.shape[1:], self.axes)
       2997         if len(self.items) != tot_items:
       2998             raise AssertionError('Number of manager items must equal union of '
    /home/joris/scipy/pandas/pandas/core/internals.py in construction_error(tot_items, block_shape, axes, e)
       4258         raise ValueError("Empty data passed with indices specified.")
       4259     raise ValueError("Shape of passed values is {0}, indices imply {1}".format(
    -> 4260         passed, implied))
       4261 
       4262 
    ValueError: Shape of passed values is (2, 6), indices imply (2, 4)
* * *
Original reported issue by @gregsifr :
I am working with a large dataframe of customers which I was unable to concat.
After spending some time I narrowed the problem area down to the below
(pickled) dataframes and code.
When trying to concat the dataframes using the following code the error shown
below is returned:
    import pandas as pd
    import pickle
    df1 = pickle.loads('ccopy_reg\n_reconstructor\np1\n(cpandas.core.frame\nDataFrame\np2\nc__builtin__\nobject\np3\nNtRp4\n(dp5\nS\'_metadata\'\np6\n(lp7\nsS\'_typ\'\np8\nS\'dataframe\'\np9\nsS\'_data\'\np10\ng1\n(cpandas.core.internals\nBlockManager\np11\ng3\nNtRp12\n((lp13\ncpandas.core.index\n_new_Index\np14\n(cpandas.core.index\nMultiIndex\np15\n(dp16\nS\'labels\'\np17\n(lp18\ncnumpy.core.multiarray\n_reconstruct\np19\n(cpandas.core.base\nFrozenNDArray\np20\n(I0\ntS\'b\'\ntRp21\n(I1\n(L2L\ntcnumpy\ndtype\np22\n(S\'i1\'\nI0\nI1\ntRp23\n(I3\nS\'|\'\nNNNI-1\nI-1\nI0\ntbI00\nS\'\\x00\\x00\'\ntbag19\n(g20\n(I0\ntS\'b\'\ntRp24\n(I1\n(L2L\ntg23\nI00\nS\'\\x00\\x01\'\ntbasS\'names\'\np25\n(lp26\nNaNasS\'levels\'\np27\n(lp28\ng14\n(cpandas.core.index\nIndex\np29\n(dp30\nS\'data\'\np31\ng19\n(cnumpy\nndarray\np32\n(I0\ntS\'b\'\ntRp33\n(I1\n(L1L\ntg22\n(S\'O8\'\nI0\nI1\ntRp34\n(I3\nS\'|\'\nNNNI-1\nI-1\nI63\ntbI00\n(lp35\nVCUSTOMER_A\np36\natbsS\'name\'\np37\nNstRp38\nag14\n(g29\n(dp39\ng31\ng19\n(g32\n(I0\ntS\'b\'\ntRp40\n(I1\n(L2L\ntg34\nI00\n(lp41\nVVISIT_DT\np42\naVPURCHASE\np43\natbsg37\nNstRp44\nasS\'sortorder\'\np45\nNstRp46\nacpandas.tseries.index\n_new_DatetimeIndex\np47\n(cpandas.tseries.index\nDatetimeIndex\np48\n(dp49\nS\'tz\'\np50\nNsS\'freq\'\np51\nNsg31\ng19\n(g32\n(I0\ntS\'b\'\ntRp52\n(I1\n(L22L\ntg22\n(S\'M8\'\nI0\nI1\ntRp53\n(I4\nS\' in ()
          6 
          7 customers, tables = ['CUSTOMER_A', 'CUSTOMER_B'], [df1.iloc[:], df2.iloc[:]]
    ----> 8 tables = pd.concat(tables, keys=customers, axis=1)
    /home/code/anaconda2/lib/python2.7/site-packages/pandas/tools/merge.pyc in concat(objs, axis, join, join_axes, ignore_index, keys, levels, names, verify_integrity, copy)
        833                        verify_integrity=verify_integrity,
        834                        copy=copy)
    --> 835     return op.get_result()
        836 
        837 
    /home/code/anaconda2/lib/python2.7/site-packages/pandas/tools/merge.pyc in get_result(self)