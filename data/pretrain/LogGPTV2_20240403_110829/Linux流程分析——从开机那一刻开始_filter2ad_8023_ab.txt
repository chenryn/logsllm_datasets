当引导程序将控制权转向内核 从(x+sizeof(Kernel boot sector) + 1)处开始  
x是内核被装载时的地址
引导器装载linux内核到内存中,接下来进入内核设置代码
## 内核设置的开始
终于 ,我们在技术上到达了内核阶段,但是内核现在还没有开始运行.内核的设置部分需要先配置一些例如解压器,与内存管理相关的配置等.
之后 内核设置部分解压真正内核,跳转到那里. 这一段相关代码在
[arch/x86/boot/header.S](https://github.com/torvalds/linux/blob/v4.16/arch/x86/boot/header.S)
的_start段中
第一眼看上去可能有些怪异 ,因为在这段代码之前还有许多指令 . 很久之前,linux有自己的引导器.然而现在 如果使用以下命令
    qemu-system-x86_64 vmlinuz-3.18-generic
你会看见
事实上,`header.s`文件以魔数MZ开头,
    #ifdef CONFIG_EFI_STUB
    # "MZ", MS-DOS header
    .byte 0x4d
    .byte 0x5a
    #endif
    ...
    ...
    ...
    pe_header:
        .ascii "PE"
        .word 0
他需要这些去加载操作系统,通过[UEFI](https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface)的帮助,以后再深入解释这一部分
真正的内核设置入口点是
    // header.S line 292
    .globl _start
    _start:
引导程序(GRUB
2或者其他)知道这个入口点(在从’MZ’偏移0x200处)并且直接跳转到这里,尽管header.s从.bstext段开始,该段打印出一段错误信息
    //
    // arch/x86/boot/setup.ld
    //
    . = 0;                    // current position
    .bstext : { *(.bstext) }  // put .bstext section to position 0
    .bsdata : { *(.bsdata) }
内核设置入口点内容
    // header.S line 292
    .globl _start
    _start:
    .byte  0xeb
        .byte  start_of_setup-1f
    1:
        //
        // rest of the header
        //
这里有jmp的机器码(0xeb),跳转到 `start_of_setup-1f` .在符号`NF`,如`2f` .代表本地标签`2:`,
在这里,它是标签`1:`,在跳转之后我们看见`.entrytext`段,在`start_of_setup`标签开始处.
这是实际运行的第一段语句(当然,除了提前的跳转语句).在内核设置部分从引导器手中接过控制流后,第一个`jmp`语句定位在从内核实模式开始处,偏移为`0x200`的地方.在最初的512byte后.下面的这一段代码能在Linux内核启动协议
和GRUB 2源代码里看到
    segment = grub_linux_real_target >> 4;
    state.gs = state.fs = state.es = state.ds = state.ss = segment;
    state.cs = segment + 0x20;
在这里 ,内核被加载在物理地址`0x10000`处,这意味着段寄存器的值应该是下面的状况在内核启动设置后
    gs = fs = es = ds = ss = 0x1000
    cs = 0x1020
在跳转到`start_of_setup`后,内核需要做下面的几件事
  * 确定好所有的段寄存器的值相等
  * 如果需要的话,设定好一个正确的栈空间
  * 设立bss段
  * 跳转到c代码[arch/x86/boot/main.c](https://github.com/torvalds/linux/blob/v4.16/arch/x86/boot/main.c)
下面看看这些是如何实现的
## 校准段寄存器
首先,内核确保 `ds`和`es`段寄存器指向同样的地址,然后用`cld`让flag复位
    movw    %ds, %ax
    movw    %ax, %es
    cld
正如前面所写,grub 2 默认加载内核代码到`0x10000` . 但`cs`值为`0x1020`因为并不从文件的开始处执行而是跳转到这里
    _start:
        .byte 0xeb
        .byte start_of_setup-1f
从 `4d 5a`的512byte偏移,我们需要校准`cs`为`0x1000`,其他段寄存器也是这样.然后我们设置栈.
        pushw   %ds
        pushw   $6f
        lretw
将`ds`寄存器的值压入栈中.在lable`6`后.执行`lretw`.当`lretw`执行后,加载lable`6`
进入 [instruction
pointer](https://en.wikipedia.org/wiki/Program_counter)指令指针寄存器.加载`cs`为`ds`的值,于是,`cs`和`ds`有相同的值
## 栈设置
几乎所有的设置代码都是为了C语言在实模式下的执行环境服务,下一步是检查`ss`寄存器的值 ,如果`ss`值出现错误,重新设置.
     movw    %ss, %dx
        cmpw    %ax, %dx
        movw    %sp, %dx
        je      2f
这里会出现3个不同场景
  * `ss`有合法值为`0x1000` 像所有其他寄存器一样(除了`cs`)
  * `ss`不合法 且`CAN_USE_HEAP`flag位被设置
  * `ss`不合法 且`CAN_USE_HEAP`flag位未被设置
依次分析三种情况
  * `ss`有合法值为`0x1000` 此时,跳转到label2:
    2:  andw    $~3, %dx
        jnz     3f
        movw    $0xfffc, %dx
    3:  movw    %ax, %ss
        movzwl  %dx, %esp
        sti
这里设定`dx`的偏移(被引导器设定`sp`的值)为4byte
检查它是否为0.如果是,设置`dx`为`0xfffc`(在64kb的段中最后4byte对齐).如果不是,则继续使用`sp`的值
然后,将`ax`的值放入`ss`中,现在我们有了正确的栈空间
  * 第二种情况 (`ss`!=`ds`),首先将setup代码段的最后地址放入`dx`中.检查`loadflags`头文件来确定我们能否使用堆空间.`loadflag`是一张位图定义如下:
    #define boot     (1<<0)
    #define QUIET_FLAG      (1<<5)
    #define KEEP_SEGMENTS   (1<<6)
    #define CAN_USE_HEAP    (1<<7)
正如在引导协议里看到的
    Field name: loadflags
      This field is a bitmask.
      Bit 7 (write): CAN_USE_HEAP
        Set this bit to 1 to indicate that the value entered in the
        heap_end_ptr is valid.  If this field is clear, some setup code
        functionality will be disabled.
如果`CAN_USE_HEAP`位被设定,将 `heap_end_addr`放入`ds`(指向`_end`)
添加`STACK_SIZE`(最小值为1024byte)之后,跳转到label2,创建正确的栈空间
  * 当`CAN_USE_HEAP`位没有被设定,我们只用最小的栈空间 ,从`_end`到`_end+STACK_SIZE`:
## BSS段
为进入c主函数做的最后两步准备是建立BSS段,和检查’magic’标志位
首先,标志位检查
       cmpl    $0x5a5aaa55, setup_sig
        jne     setup_bad
这是一个对比,简单地将`setup_sig`和magic number `0x5a5aaa55`作比较,如果不同,报告一个致命的错误.
如果魔数匹配正确,则确定我们有了正确的段寄存器和栈.我们只需要设置BSS段即可.
BSS段被用于储存静态变量,未初始化的数据.LInux通过下面的方式小心地保证该区域全为0
        movw    $__bss_start, %di
        movw    $_end+3, %cx
        xorl    %eax, %eax
        subw    %di, %cx
        shrw    $2, %cx
        rep; stosl
首先,`_bss_start`地址存入`di`,`_end+3`(+3 – 4byte偏移)存入`cx` ,eax寄存器被清零 ,计算bss段大小(`cx-di`)并放入`cx`,`cx`被分为4段, `stosl`被循环调用
将 eax值(即为0)放入`di`指向地址.最终从`__bss_start`到`_end`这段区域全部清零
## 跳转到main函数
        calll main
main函数在[arch/x86/boot/main.c](https://github.com/torvalds/linux/blob/v4.16/arch/x86/boot/main.c).在下一部分详细讲解
## 链接
    本文为对英文文章的翻译,加上自己的部分理解,如有不恰当地方,恳求指正。
  * [Intel 80386 programmer’s reference manual 1986](http://css.csail.mit.edu/6.858/2014/readings/i386.pdf)
  * [Minimal Boot Loader for Intel® Architecture](https://www.cs.cmu.edu/~410/doc/minimal_boot.pdf)
  * [Minimal Boot Loader in Assembler with comments](https://github.com/Stefan20162016/linux-insides-code/blob/master/bootloader.asm)
  * [8086](https://en.wikipedia.org/wiki/Intel_8086)
  * [80386](https://en.wikipedia.org/wiki/Intel_80386)
  * [Reset vector](https://en.wikipedia.org/wiki/Reset_vector)
  * [Real mode](https://en.wikipedia.org/wiki/Real_mode)
  * [Linux kernel boot protocol](https://www.kernel.org/doc/Documentation/x86/boot.txt)
  * [coreboot developer manual](https://www.coreboot.org/Developer_Manual)
  * [Ralf Brown’s Interrupt List](http://www.ctyme.com/intr/int.htm)
  * [Power supply](https://en.wikipedia.org/wiki/Power_supply)
  * [Power good signal](https://en.wikipedia.org/wiki/Power_good_signal)