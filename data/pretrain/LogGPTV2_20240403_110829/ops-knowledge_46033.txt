User: Please provide a Kubernetes deployment plan, including the deployment process, configuration files, and service access methods.
Assistant: Kubernetes deployment plan: 1. Deployment environment preparation: - A physical machine or a virtual machine - Docker operating environment - Kubernetes binary files (kubectl, kube-apiserver, kube-controller-manager, kube-scheduler, kubelet and kube-proxy) 2 . Deployment steps: - Install Docker: Use the official Docker installation script to install and start the Docker service. - Install the Kubernetes binary file: Unzip and copy the downloaded Kubernetes binary file to the /usr/bin directory. - Deploy the Master node: 1. Configure kube-apiserver: Create a kube-apiserver configuration file and start the kube-apiserver service. 2. Configure kube-controller-manager: Create a kube-controller-manager configuration file and start the kube-controller-manager service. 3. Configure kube-scheduler: Create a kube-scheduler configuration file and start the kube-scheduler service. 4. Deploy etcd: Create an etcd configuration file and start the etcd service. 5. Verify the configuration of the Master node: use the kubectl command to verify whether the configuration of the Master node is correct. - Deploying Node nodes: 1. Configure kubelet: Create a kubelet configuration file on each Node node and start the kubelet service. 2. Configure kube-proxy: Create a kube-proxy configuration file on each Node node and start the kube-proxy service. 3. Add the Node node to the Kubernetes cluster: Use the kubectl command on the Master node to add the Node node to the cluster. 4. Verify the configuration of the Node node: use the kubectl command to verify whether the configuration of the Node node is correct. 3. Configuration file: - kube-apiserver configuration file example: ``` apiVersion: v1 kind: Pod metadata: name: kube-apiserver namespace: kube-system spec: nodeSelector: kubernetes.io/hostname: master01 containers: - name: kube-apiserver image: k8s.gcr.io/kube-apiserver:v1.22.1 command: - kube-apiserver args: - --bind-address=0.0.0.0 - --secure-port=6443 - --etcd-servers =http://10.0.0.1:2379,http://10.0.0.2:2379,http://10.0.0.3:2379 - --service-cluster-ip-range=10.32.0.0/16 - --service -node-port-range=30000-32767 - --tls-cert-file=/etc/kubernetes/certs/kubernetes.pem - --tls-private-key-file=/etc/kubernetes/certs/kubernetes-key .pem - --client-ca-file=/etc/kubernetes/certs/ca.pem - --authentication-token-webhook-config-file=/etc/kubernetes/webhook.conf - --authorization-mode=Node ,RBAC - --kubelet-certificate-authority=/etc/kubernetes/certs/ca.pem - --kubelet-client-certificate=/etc/kubernetes/certs/kubernetes.pem - --kubelet-client-key=/ etc/kubernetes/certs/kubernetes-key.pem - --allow-privileged=true - --insecure-port=0 - --apiserver-count=1 - --service-account-key-file=/etc/kubernetes /certs/service-account.pem volumeMounts: - mountPath: /etc/kubernetes/certs name: certs readOnly: true volumes: - hostPath: path: /etc/kubernetes/certs name: certs ``` - kube-controller-manager Example configuration file: ``` apiVersion: v1 kind: Pod metadata: name: kube-controller-manager namespace: kube-system spec: nodeSelector: kubernetes.io/hostname: master01 containers: - name: kube-controller-manager image: k8s.gcr.io/kube-controller-manager:v1.22.1 command: - kube-controller-manager args: - --bind-address=0.0.0.0 - --master=http://127.0.0.1:8080 - --leader-elect=true - --service-account-private-key-file=/etc/kubernetes/certs/service-account-key.pem - --root-ca-file=/etc/kubernetes/certs/ ca.pem - --service-cluster-ip-range=10.32.0.0/16 - --use-service-account-credentials=true - --cluster-cidr=10.0.0.0/16 volumeMounts: - mountPath: /etc /kubernetes/certs name: certs readOnly: true volumes: - hostPath: path: /etc/kubernetes/certs name: certs ``` - kube-scheduler configuration file example: ``` apiVersion: v1 kind: Pod metadata: name: kube-scheduler namespace: kube-system spec: nodeSelector: kubernetes.io/hostname: master01 containers: - name: kube-scheduler image: k8s.gcr.io/kube-scheduler:v1.22.1 command: - kube-scheduler args: - --bind-address=0.0.0.0 - --leader-elect=true - --master=http://127.0.0.1:8080 volumeMounts: - mountPath: /etc/kubernetes/certs name: certs readOnly: true volumes : - hostPath: path: /etc/kubernetes/certs name: certs ``` - etcd configuration file example: ``` --- kind: Service apiVersion: v1 metadata: name: etcd-service namespace: kube-system labels: component: etcd spec: ports: - name: client port: 2379 targetPort: client - name: peer port: 2380 targetPort: peer selector: component: etcd --- kind: Deployment apiVersion: apps/v1 metadata: name: etcd namespace: kube-system spec: selector: matchLabels: component: etcd replicas: 3 template: metadata: labels: component: etcd spec: nodeSelector: kubernetes.io/hostname: "master01" containers: - name: etcd image: k8s.gcr.io /etcd:3.4.9-1 command: - /usr/local/bin/etcd args: - --listen-client-urls=https://0.0.0.0:2379 - --advertise-client-urls=https: //${POD_IP}:2379 - --data-dir=/var/lib/etcd - --listen-peer-urls=https://0.0.0.0:2380 - --initial-advertise-peer-urls= https://${POD_IP}:2380 - --name=${HOSTNAME} - --initial-cluster-token=etcd-cluster-1 - --initial-cluster=etcd-0=https://10.240. 0.2:2380, etcd-1=https://10.240.0.3:2380, etcd-2=https://10.240.0.4:2380 - --initial-cluster-state=new - --cert-file=/etc /kubernetes/pki/etcd/server.crt - --key-file=/etc/kubernetes/pki/etcd/server.key - --client-cert-auth - --trusted-ca-file=/etc/kubernetes /pki/etcd/ca.crt - --auto-tls=true - --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt - --peer-key-file=/etc/kubernetes /pki/etcd/peer.key - --peer-client-cert-auth - --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt volumeMounts: - name: etcd-data mountPath : /var/lib/etcd ports: - name: client containerPort: 2379 protocol: TCP - name: peer containerPort: 2380 protocol: TCP volumes: - name: etcd-data hostPath: path: /var/lib/etcd ``` - Example kubelet configuration file: ``` apiVersion: kubelet.config.k8s.io/v1beta1 kind: KubeletConfiguration apiVersion: kubelet.config.k8s.io/v1beta1 kind: KubeletConfiguration address: 0.0.0.0 port: 10250 readOnlyPort: 10255 clusterDomain: cluster.local clusterDNS: - 10.96.0.10 failSwapOn: false ``` - kube-proxy configuration file example: ``` apiVersion: kubeproxy.config.k8s.io/v1alpha1 kind: KubeProxyConfiguration mode: "iptables" metricsBindAddress: "0.0. 0.0:10249" featureGates: SupportIPVSProxyMode: true ``` 4. Service access method: - Use the kubectl command to directly access the API Server of the Kubernetes cluster. - Access services inside the cluster through the service discovery mechanism. - Expose external access to services through NodePort. - Use the load balancer provided by the cloud vendor to expose external access to the service through the LoadBalancer service type. - Map multiple Services to the same domain name through Ingress resources to provide more flexible service access methods.