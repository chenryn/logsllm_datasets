> 1.  Use `free -m` to report the amount of swap in mebibytes (MiB)[^2]
>     your system is configured to use. Note that number.
> 2.  Create a new file for swap by using `dd` to write zeros to a file
>     of 128 MiB.
> 3.  Initialize it with `mkswap`.
> 4.  Configure `/etc/fstab` to use that file (by pathname) as swap.
> 5.  Activate the new swap partition with `swapon`.
> 6.  Use `free -m` to confirm that the new swap space is available.
#### Mounting Using UUIDs and Filesystem Labels
Configure systems to mount file systems at boot by Universally Unique ID
(UUID) or label
#### Local Storage: Adding New Storage
Add new partitions, logical volumes, and swap to a system
non-destructively
#### File systems: Working with Common Linux Filesystems
Create, mount, unmount and use ext2, ext3 and ext4 file systems
Extend existing unencrypted ext4-formatted logical volumes
#### Filesystem Permissions: Basic Permissions
Linux permissions are organized around:
> **Three sets of permissions**
>
> > -   User,
> > -   Group, and
> > -   Other
>
> **Three types of permissions**
>
> > -   Read,
> > -   Write, and
> > -   Execute
>
> **Three extended attributes**
>
> > -   SUID,
> > -   SGID, and
> > -   Stickybit
#### Three Sets of Permissions:
Any given file or directory can be owned by one (and only one) user and
one (and only one) group. Three different sets of permissions can be
assigned.
-   User \-- User permissions apply to the individual user who owns the
    file or directory.
-   Group \-- Group permissions apply to any user who is a member of the
    group that owns the file or directory.
-   Other \-- Other permissions apply to any user account with access to
    the system that does not fall into the previous categories.
#### Three Types of Permissions:
-   Read (\"r\")
    > -   On a file, allows reading
    > -   On a directory, allows listing
-   Write (\"w\")
    > -   On a file, allows editing
    > -   On a directory, allows creation and deletion of files
-   Execute (\"x\")
    > -   On a file, allows execution if the file is otherwise
    >     executable (script or binary)
    > -   On a directory, allows entry or traversal (`# cd {dirname}`)
#### Three Extended Attributes:
-   
    SUID (Set User ID)
    :   On an executable, runs a process under the UID of the file owner
        rather than that of the user executing it.
-   
    SGID (Set Group ID)
    :   On a directory, causes any files created in the directory to
        belong to the group owning the directory. On an executable, runs
        a process under the GID of the group owning the file rather the
        logged-in group of the user executing it.
-   
    \"Stickybit\"
    :   On a directory, ensures that only the owner of a file or the
        owner of the directory can delete it, even if all users or other
        members of a group have write access to the directory.
#### Viewing Permissions
Permissions are displayed with positions 2-10 of a \"long\" filelisting:
> ![image](images/permblock.gif){width="40.0%"}
#### Setting Permissions
The `chmod` command is used to set permissions on both files and
directories. It has two modes \-- one using symbolic options and one
using octal numbers.
`chmod [option] [ugoa...][+-=][rwxst] filename`
:   where ugo are user, group, other, or all and rwxst are read, write,
    execute, s{u/g}id, stickybit.
`chmod [option] XXXX filename`
:   where XXXX is a number representing the complete permissions on the
    file.
#### Setting Permissions with Symbolic Options
The following symbols are used:
  Which Set?      What to do?                     Which Permissions?
  --------------- ------------------------------- --------------------
  u user          \+ add this permission          r read
  g group         \- remove this permission       w write
  o other a all   = set exactly this permission   x execute
Examples:
    $ chmod a+x /home/scott/Downloads/somescript.sh
    $ chmod u=rw,g=r,o-rwx ./myfile.txt
#### Setting Permissions with Numeric Options
Each permission is assigned a numeric value:
> 4 read
>
> 2 write
>
> 1 execute
  r, w, x Permissions   Binary   Octal
  --------------------- -------- -------
  \-\--                 000      0
  \--x                  001      1
  -w-                   010      2
  -wx                   011      3
  r\--                  100      4
  r-x                   101      5
  rw-                   110      6
  rwx                   111      7
Each set of permission is added separately so that a three-digit octal
number fully represents the basic permissions of a file or directory:
    $ chmod 640 ~/myfile.txt
    $ chmod 751 /shared/scripts/myscript.sh
#### Setting Extended Attributes with Numeric Options
chmod numeric options are actually 4 digits (not three). Missing digits
are assumed to be leading zeroes.
The leftmost place is for extended attributes:
Each attribute is assigned a numeric value:
> 4 SUID
>
> 2 SGID
>
> 1 Stickybit
Example:
    $ chmod 3775 MySharedDir
#### Setting Extended Attributes with Symbolic Values:
`chmod o+t {filename}`
:   Sets the sticky bit
`chmod u+s {filename}`
:   Sets suid
`chmod g+s {filename}`
:   Sets sgid
#### Extended Attributes in Directory Listings
+------------+--------------------------------------------------+
| -rwxrwxrwx | > Normal Permissions, All permissions granted    |
+------------+--------------------------------------------------+
| -rwSrwxrwx | > Indicates SUID set                             |
+------------+--------------------------------------------------+
| -rwsrwxrwx | > Indicates SUID and execute permission set      |
+------------+--------------------------------------------------+
| -rwxrwSrwx | > Indicates SGID set                             |
+------------+--------------------------------------------------+
| -rwxrwsrwx | > Indicates SGID and execute permission set      |
+------------+--------------------------------------------------+
| -rwxrwxrwT | > Indicates Stickybit set                        |
+------------+--------------------------------------------------+
| -rwxrwxrwt | > Indicates Stickybit and execute permission set |
+------------+--------------------------------------------------+
#### Umask
-   The umask value determines the permissions that will be applied to
    newly created files and directories.
-   As a \"mask\" it is subtractive \-- representing the value of the
    permissions you DO NOT want to grant.
-   Execute rights are automatically withheld (w/o regard for the umask)
    for *files* but not for *directories*.
-   Extended attributes are not addressed \-- even though a umask is
    four characters.
-   The default umask value is set in /etc/bashrc and can be modified
    (non-persistently!) with the bash built-in command `umask`.
#### Umask Examples
-   Umask of 0002 yields permissions of 0775 on new directories and 0664
    on new files
-   Umask of 0022 yields permissions of 0755 on new directories and 0644
    on new files
#### SGID and Stickybit Use Case \-- Collaborative Directories
-   Create a Group for Collaboration
-   Add users to the group
-   Create a directory for collaboration
-   Set its group ownership to the intended group
-   Set its group permissions appropriately
-   Recursively set the SGID and sticky bits on the directory
This ensures that:
> 1.  All files created in this directory will be owned by the intended
>     group (SGID effect)
> 2.  All files created in this directory can only be deleted by the
>     user who owns the file or the user who owns the directory
>     (stickybit effect)
#### File Access Control Lists
-   Provide more granular control of permissions.
-   Filesystem must be mounted with the \'acl\' option or be configured
    with that option by default.
    > -   Use mount with a `-o acl` option to mount (non-persistently)
    >     with ACLs enabled.
    > -   Add \"acl\" in the options field of `/etc/fstab` to
    >     persistently enable ACLs
    > -   or use `tune2fs -o user_xattr,acl /path/to/device` to
    >     configure those attributes as default mount options
getfacl
:   Used to view file ACLs
setfacl
:   Used to set file ACLs
#### getfacl
Example of \"getfacl acldir\" :
    # file: acldir
    # owner: frank
    # group: frank
    user::rwx
    user:bob:-wx
    user:mary:rw-
    group::rwx
    mask::rwx
    other::r-x
Example of `ls -l acldir`:
    drwxrwxr-x+ 2 frank frank 4096 2009-05-27 14:15 acldir
#### Working with CIFS network file systems
Will be covered in more detail later.
Mounting:
    mount -t cifs //server/share /path/to/mountpoint -o options
#### Working with NFS file systems
Will be covered in more detail later.
Mounting:
    mount -t nfs server:/path/to/export /path/to/mountpoint -o options  
#### iSCSI Devices
Package: iscsi-initiator-utils
Allows a system to access remote storage devices with SCSI commands as
though it were a local hard disk.
Terms:
-   iSCSI initiator: A client requesting access to storage
-   iSCSI target: Remote storage device presented from an iSCSI server
    or \"target portal\"
-   iSCSI target portal: A server providing targets to the initiator
-   IQN: \"iSCSI Qualified Name\" \-- a unique name. Both the initiator
    and target need such a name to be assigned
#### Accessing iSCSI Devices
-   Install the iscsi-initiator-utils package
-   Start the `iscsi` and `iscsid` services (and configure them
    persistently on)
-   Set the initiator IQN in /etc/iscsi/initiatorname.iscsi
-   Discover targets with:
        iscsiadm -m discovery -t st -p 
-   Log in to the target using the name displayed in discovery:
        iscsiadm -m node -T  -p  -l
-   Identify the SCSI device name with `dmesg`, `tail /var/log/messages`
    or `ls -l /dev/disk/by-path/*iscsi*`
-   Use the disk as though it were a local hard disk
::: important
::: title
Important
:::
Be certain to use UUIDs or labels for persistent mounts in `/etc/fstab`.
Also, provide `_netdev` as a mount option so that this device will not
be mounted until the network is already up.
:::
#### Disconnecting from iSCSI Devices
-   Ensure the device is not in use
-   Unmount the device
-   Remove its `/etc/fstab` entry
-   Logout from the target:
        iscsiadm -m node -T  -p  -u
-   Delete the local record:
        iscsiadm -m node -T  -p  -o delete
#### Additional References
-   Chapter 4 of the Storage Administration Guide for RHEL6
    ()
    covers the usage of parted.
-   Man pages for fdisk(8), fstab(5), mkfs(8), blkid(8), partprobe(8),
    mount(8), parted(8), cryptsetup(8), and crypttab(5)
#### Reading
Topics from this class:
:   Jang, Chapters 4,6,8
Topics for next class:
:   Jang Ch 7,9,12,17
#### Labs
Add Storage
> Add a disk to the virtual machine
>
> > Add Swap
> >
> > Add a partition
> >
> > Add space to a VG
> >
> > Add a LUKS-encrypted filesystem
> >
> > Enlarge an LV
>
> Add an iSCSI device
Create a partition for collaboration
> Create File ACLs
### Session 3 Managing software, processes, kernel attributes, and users and groups
#### The Red Hat Network (RHN)
The primary delivery mechanism for installable software, updates, errata
and bug fixes and systems management functions for an installation of
RHEL 6 is the Red Hat Network or RHN.
The \"cost\" of RHEL 6 is really a subscription to this support network.
These commands are using in managing an RHN subscription:
    # man -k rhn
    rhn-profile-sync     (8)  - Update system information on Red Hat Network
    rhn_check            (8)  - Check for and execute queued actions on RHN
    rhn_register         (8)  - Connect to Red Hat Network
    rhnplugin            (8)  - Red Hat Network support for yum(8)
    rhnplugin.conf [rhnplugin] (5)  - Configuration file for the rhnplugin(8) yum(8) plugin
    rhnreg_ks            (8)  - A program for non interactively registering systems to Red Hat Network
    rhnsd                (8)  - A program for querying the Red Hat Network for updates and information
#### RHN Subscription Activation
A new user of RHEL6 should receive information similar to this:
    Red Hat subscription login:
        Account Number       : *******
        Contract Number      : *******
        Item Description     : Red Hat Enterprise Linux 
        RHEL Subscription Number : *******************
        Quantity             : #
        Service Dates        : 12-JUN-10 through 11-JUN-11
        Customer Name : *********************************
        Account Number: ************
        Log into the new portal here: access.redhat.com
        Login: *************
        Password: **************
        Email address: ****************************
That information can then be used with `rhn_register` to activate a new
subscription
#### 3rd Party Yum Repositories
These are other repositories of installable software, updates, or
bugfixes. The `yum` command can be configured to use them in addition to
or instead of the RHN.
-   Configuration of repositories other than the RHN is accomplished
    through text configuration files located in the directory:
    `/etc/yum.repos.d/`
-   A configuration file for each repository (or group of related repos)
    should be created in `/etc/yum.repos.d/`
-   The name of each repo config file should end in \".repo\".
-   This allows repos to be easily temporarily disabled simply by
    renaming the file to something like: `myrepo.repo.disabled`
#### Yum Repository Mandatory Configuration Items
Repository ID
:   Short name for identifying this repository in reports
        [MyRepo]
Name
:   Longer description of this repository
        name=My Custom Repository
Baseurl
:   Description of protocol and location needed to locate the repo
    files.
        baseurl=ftp://192.168.5.200/pub/rhel6
#### Yum Repository Common Optional Configuration Items
gpgcheck
:   Defines whether yum should attempt to validate package signatures.
    \"0\" = \"off\", \"1\" = \"on\".
        gpgcheck=1
gpgkey
:   Defines (via URL) where the keys for signature validation are
    located (typically `file:///etc/pki/rpm-gpg/`)
        gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
enabled
:   (Optional) Defines whether this repository should be currently
    active. \"0\" = \"off\", \"1\" = \"on\".
        enabled=1
#### Managing Software: Using yum
Common commands:
`yum help`
:   Displays usage information.
`yum list`
:   Lists all available packages and indicates which are installed.
`yum search KEYWORD`
:   Searches for packages with a keyword in the package metadata.
`yum info PACKAGENAME`
:   Displays information about a package taken from the package
    metadata.
`yum install PACKAGENAME`
:   Installs a package (obtained from the repository) and any required
    dependencies.
`yum localinstall RPMFILENAME`
:   Installs a local .rpm file, but uses the repository to satisfy
    dependencies.
`yum remove PACKAGENAME`
:   Uninstalls a package and any other packages dependent upon it.
`yum update PACKAGENAME`
:   Installs a newer version of the package, if available.
`yum update`
:   Updates an installed package for which a newer version is available.
#### Yum-related man pages
    # man -k yum
    qreposync             (1)  - synchronize yum repositories to a local directory
    rhnplugin            (8)  - Red Hat Network support for yum(8)
    rhnplugin.conf [rhnplugin] (5)  - Configuration file for the rhnplugin(8) yum(8) plugin
    yum                  (8)  - Yellowdog Updater Modified
    yum [yum-shell]      (8)  - Yellowdog Updater Modified shell
    yum-groups-manager   (1)  - create and edit yum's group metadata
    yum-utils            (1)  - tools for manipulating repositories and extended package management
    yum.conf [yum]       (5)  - Configuration file for yum(8)