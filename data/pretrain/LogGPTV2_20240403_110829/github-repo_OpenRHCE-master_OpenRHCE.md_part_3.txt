### Managing Swap Space

1. **Check Current Swap Configuration:**
   - Use the `free -m` command to report the amount of swap in mebibytes (MiB) that your system is configured to use. Note this value for reference.

2. **Create a New Swap File:**
   - Create a new file for swap by using the `dd` command to write zeros to a file of 128 MiB.
     ```sh
     dd if=/dev/zero of=/path/to/swapfile bs=1M count=128
     ```

3. **Initialize the Swap File:**
   - Initialize the new swap file with the `mkswap` command.
     ```sh
     mkswap /path/to/swapfile
     ```

4. **Configure `/etc/fstab`:**
   - Add an entry to `/etc/fstab` to use the new swap file. Specify the full path to the swap file.
     ```sh
     /path/to/swapfile none swap sw 0 0
     ```

5. **Activate the New Swap File:**
   - Activate the new swap file with the `swapon` command.
     ```sh
     swapon /path/to/swapfile
     ```

6. **Confirm the New Swap Space:**
   - Use the `free -m` command again to confirm that the new swap space is available.

### Mounting Using UUIDs and Filesystem Labels

- Configure systems to mount file systems at boot by Universally Unique ID (UUID) or label to ensure consistency and reliability.

### Local Storage: Adding New Storage

- Add new partitions, logical volumes, and swap to a system non-destructively to expand storage capacity without data loss.

### Working with Common Linux Filesystems

- **Create, Mount, Unmount, and Use ext2, ext3, and ext4 File Systems:**
  - Create and manage ext2, ext3, and ext4 file systems.
  - Extend existing unencrypted ext4-formatted logical volumes.

### Filesystem Permissions: Basic Permissions

Linux permissions are organized around three sets of permissions, three types of permissions, and three extended attributes.

#### Three Sets of Permissions:
- **User:** User permissions apply to the individual user who owns the file or directory.
- **Group:** Group permissions apply to any user who is a member of the group that owns the file or directory.
- **Other:** Other permissions apply to any user account with access to the system that does not fall into the previous categories.

#### Three Types of Permissions:
- **Read (r):**
  - On a file, allows reading.
  - On a directory, allows listing.
- **Write (w):**
  - On a file, allows editing.
  - On a directory, allows creation and deletion of files.
- **Execute (x):**
  - On a file, allows execution if the file is otherwise executable (script or binary).
  - On a directory, allows entry or traversal (`cd {dirname}`).

#### Three Extended Attributes:
- **SUID (Set User ID):** On an executable, runs a process under the UID of the file owner rather than that of the user executing it.
- **SGID (Set Group ID):** On a directory, causes any files created in the directory to belong to the group owning the directory. On an executable, runs a process under the GID of the group owning the file rather than the logged-in group of the user executing it.
- **Stickybit:** On a directory, ensures that only the owner of a file or the owner of the directory can delete it, even if all users or other members of a group have write access to the directory.

### Viewing Permissions

Permissions are displayed in positions 2-10 of a "long" file listing:
```sh
-rwxr-xr-x
```

### Setting Permissions

The `chmod` command is used to set permissions on both files and directories. It has two modes: one using symbolic options and one using octal numbers.

#### Symbolic Options
- **Syntax:**
  ```sh
  chmod [option] [ugoa...][+-=][rwxst] filename
  ```
  - `ugo` are user, group, other, or all.
  - `rwxst` are read, write, execute, SUID, SGID, stickybit.

- **Examples:**
  ```sh
  $ chmod a+x /home/scott/Downloads/somescript.sh
  $ chmod u=rw,g=r,o-rwx ./myfile.txt
  ```

#### Numeric Options
- Each permission is assigned a numeric value:
  - Read (r): 4
  - Write (w): 2
  - Execute (x): 1

- **Example:**
  ```sh
  $ chmod 640 ~/myfile.txt
  $ chmod 751 /shared/scripts/myscript.sh
  ```

#### Setting Extended Attributes with Numeric Options
- `chmod` numeric options are actually 4 digits (not three). Missing digits are assumed to be leading zeroes.
- The leftmost place is for extended attributes:
  - SUID: 4
  - SGID: 2
  - Stickybit: 1

- **Example:**
  ```sh
  $ chmod 3775 MySharedDir
  ```

#### Setting Extended Attributes with Symbolic Values
- **Examples:**
  ```sh
  $ chmod o+t {filename}  # Sets the sticky bit
  $ chmod u+s {filename}  # Sets SUID
  $ chmod g+s {filename}  # Sets SGID
  ```

### Umask

- The `umask` value determines the permissions that will be applied to newly created files and directories.
- As a "mask," it is subtractive, representing the value of the permissions you DO NOT want to grant.
- Execute rights are automatically withheld (without regard for the umask) for files but not for directories.
- Extended attributes are not addressed, even though a umask is four characters.
- The default umask value is set in `/etc/bashrc` and can be modified (non-persistently) with the bash built-in command `umask`.

#### Umask Examples
- **Umask of 0002:** Yields permissions of 0775 on new directories and 0664 on new files.
- **Umask of 0022:** Yields permissions of 0755 on new directories and 0644 on new files.

### SGID and Stickybit Use Case: Collaborative Directories

- **Steps:**
  1. Create a group for collaboration.
  2. Add users to the group.
  3. Create a directory for collaboration.
  4. Set its group ownership to the intended group.
  5. Set its group permissions appropriately.
  6. Recursively set the SGID and sticky bits on the directory.

This ensures:
1. All files created in this directory will be owned by the intended group (SGID effect).
2. All files created in this directory can only be deleted by the user who owns the file or the user who owns the directory (stickybit effect).

### File Access Control Lists (ACLs)

- Provide more granular control of permissions.
- The filesystem must be mounted with the `acl` option or be configured with that option by default.
  - Use `mount` with a `-o acl` option to mount (non-persistently) with ACLs enabled.
  - Add `acl` in the options field of `/etc/fstab` to persistently enable ACLs.
  - Or use `tune2fs -o user_xattr,acl /path/to/device` to configure those attributes as default mount options.

- **Commands:**
  - `getfacl`: Used to view file ACLs.
  - `setfacl`: Used to set file ACLs.

- **Example:**
  ```sh
  # getfacl acldir
  # file: acldir
  # owner: frank
  # group: frank
  user::rwx
  user:bob:-wx
  user:mary:rw-
  group::rwx
  mask::rwx
  other::r-x
  ```

### Working with CIFS Network File Systems

- Will be covered in more detail later.
- **Mounting:**
  ```sh
  mount -t cifs //server/share /path/to/mountpoint -o options
  ```

### Working with NFS File Systems

- Will be covered in more detail later.
- **Mounting:**
  ```sh
  mount -t nfs server:/path/to/export /path/to/mountpoint -o options
  ```

### iSCSI Devices

- **Package:** `iscsi-initiator-utils`
- Allows a system to access remote storage devices with SCSI commands as though it were a local hard disk.

- **Terms:**
  - **iSCSI initiator:** A client requesting access to storage.
  - **iSCSI target:** Remote storage device presented from an iSCSI server or "target portal."
  - **iSCSI target portal:** A server providing targets to the initiator.
  - **IQN:** "iSCSI Qualified Name" \-- a unique name. Both the initiator and target need such a name to be assigned.

- **Accessing iSCSI Devices:**
  1. Install the `iscsi-initiator-utils` package.
  2. Start the `iscsi` and `iscsid` services (and configure them persistently on).
  3. Set the initiator IQN in `/etc/iscsi/initiatorname.iscsi`.
  4. Discover targets with:
     ```sh
     iscsiadm -m discovery -t st -p <target_portal>
     ```
  5. Log in to the target using the name displayed in discovery:
     ```sh
     iscsiadm -m node -T <target_iqn> -p <target_portal> -l
     ```
  6. Identify the SCSI device name with `dmesg`, `tail /var/log/messages`, or `ls -l /dev/disk/by-path/*iscsi*`.
  7. Use the disk as though it were a local hard disk.

- **Important:**
  - Be certain to use UUIDs or labels for persistent mounts in `/etc/fstab`.
  - Provide `_netdev` as a mount option so that this device will not be mounted until the network is already up.

- **Disconnecting from iSCSI Devices:**
  1. Ensure the device is not in use.
  2. Unmount the device.
  3. Remove its `/etc/fstab` entry.
  4. Log out from the target:
     ```sh
     iscsiadm -m node -T <target_iqn> -p <target_portal> -u
     ```
  5. Delete the local record:
     ```sh
     iscsiadm -m node -T <target_iqn> -p <target_portal> -o delete
     ```

### Additional References

- **Chapter 4 of the Storage Administration Guide for RHEL6:**
  - Covers the usage of `parted`.
- **Man pages:**
  - `fdisk(8)`, `fstab(5)`, `mkfs(8)`, `blkid(8)`, `partprobe(8)`, `mount(8)`, `parted(8)`, `cryptsetup(8)`, and `crypttab(5)`.

### Reading

- **Topics from this class:**
  - Jang, Chapters 4, 6, 8
- **Topics for next class:**
  - Jang Ch 7, 9, 12, 17

### Labs

- **Add Storage:**
  - Add a disk to the virtual machine.
  - Add swap.
  - Add a partition.
  - Add space to a VG.
  - Add a LUKS-encrypted filesystem.
  - Enlarge an LV.
  - Add an iSCSI device.
  - Create a partition for collaboration.
  - Create File ACLs.

### Session 3: Managing Software, Processes, Kernel Attributes, and Users and Groups

#### The Red Hat Network (RHN)

- The primary delivery mechanism for installable software, updates, errata, and bug fixes and systems management functions for an installation of RHEL 6 is the Red Hat Network (RHN).
- The "cost" of RHEL 6 is really a subscription to this support network.
- **Commands for managing an RHN subscription:**
  ```sh
  # man -k rhn
  rhn-profile-sync (8)  - Update system information on Red Hat Network
  rhn_check (8)  - Check for and execute queued actions on RHN
  rhn_register (8)  - Connect to Red Hat Network
  rhnplugin (8)  - Red Hat Network support for yum(8)
  rhnplugin.conf [rhnplugin] (5)  - Configuration file for the rhnplugin(8) yum(8) plugin
  rhnreg_ks (8)  - A program for non-interactively registering systems to Red Hat Network
  rhnsd (8)  - A program for querying the Red Hat Network for updates and information
  ```

#### RHN Subscription Activation

- A new user of RHEL 6 should receive information similar to this:
  - Red Hat subscription login:
    - Account Number: *******
    - Contract Number: *******
    - Item Description: Red Hat Enterprise Linux
    - RHEL Subscription Number: *******************
    - Quantity: #
    - Service Dates: 12-JUN-10 through 11-JUN-11
    - Customer Name: *********************************
    - Account Number: ************
    - Log into the new portal here: access.redhat.com
    - Login: *************
    - Password: **************
    - Email address: ****************************

- This information can then be used with `rhn_register` to activate a new subscription.

#### 3rd Party Yum Repositories

- These are other repositories of installable software, updates, or bugfixes. The `yum` command can be configured to use them in addition to or instead of the RHN.
- **Configuration:**
  - Configuration of repositories other than the RHN is accomplished through text configuration files located in the directory: `/etc/yum.repos.d/`.
  - A configuration file for each repository (or group of related repos) should be created in `/etc/yum.repos.d/`.
  - The name of each repo config file should end in `.repo`.
  - This allows repos to be easily temporarily disabled simply by renaming the file to something like: `myrepo.repo.disabled`.

#### Yum Repository Mandatory Configuration Items

- **Repository ID:**
  - Short name for identifying this repository in reports.
    ```ini
    [MyRepo]
    ```
- **Name:**
  - Longer description of this repository.
    ```ini
    name=My Custom Repository
    ```
- **Baseurl:**
  - Description of protocol and location needed to locate the repo files.
    ```ini
    baseurl=ftp://192.168.5.200/pub/rhel6
    ```

#### Yum Repository Common Optional Configuration Items

- **gpgcheck:**
  - Defines whether `yum` should attempt to validate package signatures. "0" = "off", "1" = "on".
    ```ini
    gpgcheck=1
    ```
- **gpgkey:**
  - Defines (via URL) where the keys for signature validation are located (typically `file:///etc/pki/rpm-gpg/`).
    ```ini
    gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
    ```
- **enabled:**
  - (Optional) Defines whether this repository should be currently active. "0" = "off", "1" = "on".
    ```ini
    enabled=1
    ```

#### Managing Software: Using `yum`

- **Common commands:**
  - `yum help`: Displays usage information.
  - `yum list`: Lists all available packages and indicates which are installed.
  - `yum search KEYWORD`: Searches for packages with a keyword in the package metadata.
  - `yum info PACKAGENAME`: Displays information about a package taken from the package metadata.
  - `yum install PACKAGENAME`: Installs a package (obtained from the repository) and any required dependencies.
  - `yum localinstall RPMFILENAME`: Installs a local .rpm file, but uses the repository to satisfy dependencies.
  - `yum remove PACKAGENAME`: Uninstalls a package and any other packages dependent upon it.
  - `yum update PACKAGENAME`: Installs a newer version of the package, if available.
  - `yum update`: Updates an installed package for which a newer version is available.

- **Yum-related man pages:**
  ```sh
  # man -k yum
  qreposync (1)  - synchronize yum repositories to a local directory
  rhnplugin (8)  - Red Hat Network support for yum(8)
  rhnplugin.conf [rhnplugin] (5)  - Configuration file for the rhnplugin(8) yum(8) plugin
  yum (8)  - Yellowdog Updater Modified
  yum [yum-shell] (8)  - Yellowdog Updater Modified shell
  yum-groups-manager (1)  - create and edit yum's group metadata
  yum-utils (1)  - tools for manipulating repositories and extended package management
  yum.conf [yum] (5)  - Configuration file for yum(8)
  ```