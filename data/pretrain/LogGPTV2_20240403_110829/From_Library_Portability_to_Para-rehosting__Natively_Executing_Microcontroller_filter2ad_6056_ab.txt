5
However, using the Linux allocator allows us to harvest the
bug-ﬁnding capability of ASAN out-of-the-box.
Some MCU OSs (such as FreeRTOS and LiteOS) provide
their own allocators. For them, we also have two strategies; 1)
we can replace their heap implementation with that on Linux,
but sacriﬁce the coverage of customized allocators; 2) we can
keep their implementations, but sacriﬁce ASAN in ﬁnding
memory errors in heap.
Finally, the entry point of an MCU program is the function
Reset_Hander(), rather than __start() in a regular
Linux program. __start() performs necessary initialization
of the execution environment and jumps to the main func-
tion, while the Reset_Hander() initializes the simulated
memory on the memory map of the real device, such as coping
the data sections from the “ﬂash” to the “SRAM”. We keep
the entry point of the rehosted program as __start() but
explicitly invoke the modiﬁed Reset_Hander() before the
main function is executed.
V. HAL-BASED PERIPHERAL FUNCTION REPLACEMENT
Some peripheral functions (e.g., networking) are indefens-
ible for IoT applications. If not supported, many MCU ﬁrm-
ware cannot be rehosted. To avoid handling low-level hardware
details, we leverage HALs supported by major MCU vendors.
Speciﬁcally, we replace the high-level HAL routines with
equivalent handlers on the host. These handlers are imple-
mented per peripheral function. We call them HAL backends
in this paper and they are exposed to HAL libraries as
para-APIs. Inside the HAL library, we only need to identify
the corresponding routines and make minor modiﬁcations to
invoke these para-APIs. As such, a backend which corresponds
to a peripheral function, can be shared by multiple HALs. To
ease the process of developing backends for new peripheral
functions, we further categorize common peripheral HAL
functions into four types (IO, storage, computing accelerator,
and dummy) and implement
templates for quick backend
development. In Table VIII, we summarize the categorization
and the supported peripherals in each categorization. For
each peripheral function, we also list the function names of
frontends for two HALs (STMicroelectronics and NXP) and
function names of the backend.
A. I/O Peripherals
I/O peripherals are generally used to communicate with
the real-world. This includes UART, I2C, SPI, Ethernet, etc.
In this work, we ﬁrst develop a generic I/O backend which
transparently bridges the peripheral I/O to host-side standard
I/O. As such, the re-hosted ﬁrmware has the host console as its
I/O interface. This approach works well for simple peripherals
such as UART, which is typically used for debugging output.
Another beneﬁt of this approach is that STDIN can be readily
overridden by a fuzzer like AFL to feed testcases to the
ﬁrmware execution.
Network. We observe that the network function is one of the
most widely used I/O, but redirecting network trafﬁc to the
STDIO as is done in the generic backend rarely fulﬁls our re-
hosting purposes, because the libraries using network would
block due to the missing protocol simulation in the generic
backend. To simulate a network interface, we also developed
a high-ﬁdelity network backend based on the Packet Capture
(PACP) library [31]. It enables re-hosted ﬁrmware to actually
access the Internet. The most essential tasks of a network driver
are to initialize the network interface card (NIC), send out-
going messages and receive in-going messages through the
NIC. The PCAP library enables easy access to all packets on
a host and thus fulﬁlls our requirements.
Speciﬁcally, we provide three para-APIs HAL_BE_Net-
workInit(), HAL_BE_NetworkSend() and HAL_BE_-
NetworkReceive(). They are to be invoked by the relevant
frontend routines in the IP layer of the HAL libraries. The
function HAL_BE_NetworkInit() opens a live physical
Ethernet interface on the host machine using the PCAP API
pcap_open_live(), which returns a handler associated
with this NIC. To send out a data packet,
the para-API,
HAL_BE_NetworkSend() extracts the packet buffer pointer
and packet length from the provided data structure and then
directly invokes the PCAP API pcap_sendpacket() to
output
the
para-API HAL_BE_NetworkReceive() is used to call the
blocking PCAP API pcap_dispatch() to receive a packet.
The packet is reconstructed and transmitted to the upper layers
of the MCU OS stack by calling the corresponding callback
functions.
to Ethernet. To receive a message,
the packet
B. Storage Peripherals
Storage peripherals are generally used as hardware medium
for ﬁle systems such as FAT or littlefs. Popular storage
medium used in IoT devices includes MMC, NAND, NOR
and SD. For the HAL of these four types of storage devices,
we develop a generic storage backend which operate on the
host ﬁle system. We can safely abstract away the details
of medium access characteristics. Speciﬁcally, we use a ﬁle
to store the whole ﬁle system of the ﬁrmware. To mount
the medium, the para-API HAL_BE_Storage_Init() is
invoked. It maps the the whole ﬁle contents into the memory
as the raw medium data. Then, storage read/write operations
are conducted by invoking HAL_BE_Storage_read() and
HAL_BE_Storage_write(), which simulate medium ac-
cess by reading/writing the memory.
C. Computing Accelerator Peripherals
Computing accelerator peripherals provide hardware-
assisted implementation of popular algorithms, including many
cryptography algorithms and the random number generator. We
mainly used the OpenSSL library to simulate these algorithms
and feed the results to the frontend functions.
D. Dummy Peripherals
Dummy peripherals generally do not perform actions that
may affect the execution of the ﬁrmware. Therefore, we can
safely return a success code to the HAL frontend, or just a
void if the function does not expect a return value. This
includes PWR (Power Controller), RCC (Reset and Clock
Control), ICACHE (Instruction Cache) and so on.
6
VI. EVALUATION
We have developed a para-rehosting prototype on a x86-
based PC running the Ubuntu 16.04 OS. Our prototype
supports nine MCU OSs, including Amazon FreeRTOS [3],
ARM Mbed OS [8], Zephyr [57], Huawei LiteOS [30], Ato-
mosher [35], brtos [24], f9-kernel [52], FunkOS [1], and
TNeo [19]. For HAL functions, our prototype covers most
peripherals supported in the SDK of NXP and STMicroelec-
tronics. In total, PMCU is comprised of 497 LoC, including
294 for task management, 165 for system tick and 38 for
synchronization primitive, which are OS-agnostic. Less than 50
LoC are needed for the glue layer of each supported MCU OS.
Dozens to hundreds of LoCs were developed for each HAL
backend. Modiﬁcations made to HAL libraries that invoke
HAL backend are negligible (less than 30 LoC for each). All
the details have been reported in Table VII for MCU OSs and
Table VIII for HALs.
We evaluated para-rehosting from four aspects. First, we
evaluated the rehosting capability of para-rehosting. This was
conducted from two dimensions – library support for MCU
ecosystems and peripheral support in HAL. Second, since the
ultimate goal of this work is to enable security testing for MCU
ﬁrmware, we used an off-the-shelf fuzzing tool AFL [61] to
test the ﬁrmware logic compiled by para-rehosting, and com-
pared the results with other solutions. Third, we demonstrated
its bug ﬁnding capability and explained some vulnerabilities
disclosed with the help of the proposed system. Finally, due to
the architectural difference and re-compilation, we designed an
experiment to identify the gap of running the same ﬁrmware
logic on a real device and with para-rehosting. Unless stated
otherwise, all our experiments were conducted on a PC with
an Intel Core i7-8700 CPU and 8 GB DRAM.
A. Rehosting Capability
This section describe the rehosting capability of the pro-
posed system. As mentioned before, an MCU ecosystem often
offers a comprehensive software stack to attract developers
and manufacturers. We obtained the library information for
four representative MCU OSs including Amazon FreeRTOS,
ARM Mbed OS, Zephyr and LiteOS from the correspond-
ing ofﬁcial documentation pages or Github repositories, and
counted the libraries supported by our prototype. The results
are summarized in Table VI. Our prototype supports 84.21%,
76.47%, 89.47% and 63.64% of all the libraries shipped with
FreeRTOS, ARM Mbed OS, Zephyr and LiteOS respectively.
We also summarized the supported HAL functions for two
popular MCU chip vendors, STMicroelectronics and NXP.
This statistic indicates how many peripherals can be supported
by our prototype. The results are summarized in Table VIII.
In the table, we also list the relevant frontend and backend
functions for each peripheral. It is worth mentioning that after
gluing the source code with PMCU and HAL backends, we did
not found any failed compilation. Particularly, no architecture-
speciﬁc assembly code was found in MCU libraries. This is
partially because hardware-neutral MCU libraries have been
widely adopted in the MCU ecosystem.
Table I: Results of persistent mode fuzzing with ASAN
enabled
RTOS
Library
Speed (#/sec)
Crashes
Real Bugs
Total Paths
TCP/IP
MQTTv1
MQTTv2
FATFS
Tinycbor
Jsmn
uTasker Modbus
lwip (latest)
lwip (2.1.2)
MQTT
CoAP Parser
CoAP Builder
Client-Cli
MQTT
MQTT
LWM2M
FreeRTOS
MbedOS
Zephyr
LiteOS
Baremetal
STM-PLC
4,568.33
5,622.56
2,754.39
1,516.95
7,975.00
21,828.81
664.90
1,294.56
1,063.47
814.18
15,025.01
1,553.65
1,131.15
1,311.56
667.13
10,352.67
2,552.81
78
32
18
1
0
0
26
9
7
57
95
15
103
0
4
23
41
3
1
1
1
0
0
5
2
2
1
1
1
2
0
2
2
9
230
536
387
1,502
272
198
79
158
139
104
522
502
435
174
42
243
323
B. Fuzzing Performance
The ultimate purpose of our tool is to enable software
testing and help ﬁnd vulnerabilities in MCU ﬁrmware. We
used AFL [61] plus ASAN [50], one of the most efﬁcient
dynamic analysis combinations to test several libraries for
each ported RTOS. These tools can be used out-of-the-box.
In what follows, we show the fuzzing performance against the
ﬁrmware logic compiled with our tool. Then we compare its
performance with existing solutions.
1) Fuzzing Popular Libs with para-rehosting: We fuzzed
17 popular libraries for MCU across different OS ecosystems.
Three criteria were considered in selecting libraries. First, the
core logic of the library should not have been replaced by
para-APIs. Otherwise, we would have been fuzzing the para-
APIs. Second, the code needs to be easy to tame. Otherwise,
tremendous efforts are needed to understand and accommodate
the code to AFL. Third, the library is popular. With modest
taming efforts, we tested these libraries across the four RTOSs
shown in Table I. FreeRTOS+TCP is a TCP/IP implementation
ofﬁcially supported by FreeRTOS [27]. In 2018, there were
13 critical vulnerabilities reported in this library by Zlab [33].
MQTT protocol is one of the most popular connection pro-
tocol used in IoT devices. It has been widely used in many
commercial smart home solutions. FATFS is an embedded
FAT ﬁle system that has already been used in commercial
products [49]. CBOR (Concise Binary Object Representation)
is a binary data serialization format. Jsmn is a world fastest
JSON parser/tokenizer. Modbus is a de facto standard com-
munication protocol and is now a commonly available means
of connecting industrial electronic devices. lwIP (lightweight
IP) is a widely used open-source TCP/IP stack designed for
embedded systems. CoAP is another popular IoT protocol
which focuses on one-to-one communication. Client-Cli
is
a command line library, mainly used by the Mbed OS to
parse the remote commands sent
to the device. LWM2M
(LightWeight Machine-to-Machine) is a lightweight protocol
suitable for M2M or IoT device management and service
enablement. Finally, STM-PLC (STM Programmable Logic
Controller) is a PLC SDK that turns an STM32 MCU into an
industrial PLC. We built these libraries with ASAN enabled for
improving bugs visibility. All the results were obtained within
7
one hour and with AFL’s persistent mode on.
In Table I, we present the results. Generally speaking, the
fuzzing throughput is in line with the commonly perceived
number, although variations were observed depending on the
libraries. First, the throughputs of fuzzing the CoAP parser,
Jsmn and LWM2M libraries are substantially faster than others.
This is because these libraries only involve a single independ-
ent task that analyzes data packets provided by the fuzzer.
For the CoAP builder library, although it also has only one
task, it constructs the message based on the data structure
sn_coap_hdr_s, which contains many pointers. The library
needs to dynamically allocate and free buffers for each pointer.
Due to the way ASAN handles allocation, heavy overhead
was observed. For other libraries, more than one tasks are
involved and these tasks extensively use message queues to
pass packets. This leads to multiple threads waiting for each
other.
In most
libraries, we could ﬁnd the ﬁrst crash almost
instantly. But we have not found any bugs in the MQTT library
of Zephyr and Tinycbor and Jsmn library of FreeRTOS. For Ti-
nycbor and Jsmn, since these libraries are quite simple, porting
them without our approach is still manageable. We suspect they
have been heavily fuzzed. For the MQTT library of Zephyr,
this may be partially attributed to the fact that this library has
also been intensively tested because Zephyr ofﬁcially supports
a simulator that helps developers to quickly prototype their
products [47]. But note that their simulator is speciﬁcally
designed for Zephyr. We discuss more in Section VIII-A.
Last but not
least, we were able to discover 9 bugs
out of the 13 bugs reported by Zlab [33] in the FreeR-
TOS+TCP library. To reproduce this result, we enabled the
macro ipconfigUSE_NBNS and ipconfigSUPPORT_-
OUTGOING_PINGS, and ran fuzzing for 48 hours. For the
remaining four CVEs, we have studied their behaviors. CVE-
2018-16598 is not crashable. CVE-2018-16526, CVE-
2018-16528 and CVE-2018-16522 can only be triggered
with proper context which we did not support in our taming.
2) Comparison with Other Solutions: We conducted exper-
iments to compare our approach with related work.
Comparison with Emulation-based Solutions. We compared
our approach with emulation-based solutions in general, in-
cluding a head-to-head comparison with HALucinator [16] on
the same set of ﬁrmware samples.
We used a ready-to-use QEMU provided by Zephyr that
emulates the TI LM3S6965 platform [62]. Then, we applied
the patch from TriforceAFL [46] to this QEMU. TriforceAFL
is an AFL fuzzing tool with support for full-system emulation.
Finally we ran and fuzzed the MQTT library for Zephyr using
TriforceAFL. The fuzzing lasted for 1 hour and on average the
fuzzing throughput was 23 test-cases per second. This conﬁrms
the tremendous performance advantage of our approach over
emulation-based solutions. Similar performance measurement
can be observed in relevant papers [25], [16].
We had a chance to compare HALucinator with ours head-
to-head. We compiled and tested the same set of ﬁrmware
used in HALucinator from the GitHub repo [15]. However,
the HALucinator authors did not disclose the HAL versions
in their experiments except the lwip version used in Atmel
8
ﬁrmware (1.4.1). For others, we used the latest SDK releases.
We did not test the two Atmel ﬁrmware images that use the
6LoWPAN interface, because we have not ported PMCU to
the Contiki OS. All the other samples are baremetal. Moreover,
since HALucinator targets binary ﬁrmware, it feeds the test-
cases in a non-standard way. We had to tame the source
code correspondingly to make sure both treat the test-cases
in exactly the same way. Between each test-case, we used
the AFL’s built-in fork-server to reset
the ﬁrmware state.
Table II shows the results of the comparison, in which the
data of HALucinator were directly extracted from the original
paper [16]. For all the samples, our approach overwhelms
HALucinator in terms of execution speed, which is one of
the most
the
total paths found in HALucinator were generally higher than
those found in para-rehosting, even though we eventually
triggered more crashes. This is because HALucinator runs on
top of QEMU. When a random external interrupt occurs, the
corresponding basic block transition is regarded as a new path.
We acknowledge that HALucinator minimizes this randomness
by designing a deterministic timer. That is, a timer interrupt
is raised based on the number of executed basic blocks.
However, slightly different test-cases may cause a small change
in execution path, which further causes the timer to occur
randomly. As a result, AFL may mistakenly mark a path as
new. This problem is avoided in our approach because we
model an MCU task as a POSIX thread, which is oblivious of
the emulated timer.
important factors in fuzzing. We found that
In the above-mentioned experiment, we compared the ab-
solute values of certain important factors such as the number of
total paths. However, due to the architecture differences, these
absolute numbers cannot sufﬁciently manifest the effectiveness
of our solution. To more convincingly illustrate the beneﬁt of
our approach, we need to smooth the architecture differences.
To achieve this goal, we re-ran fuzz testing on all the ﬁrmware
images with both solutions and collected more insightful
details, in particular, the accumulated basic block coverage
rate. By using rates instead of absolute values, we ensure
a fair comparison on a best-effort basis. Our experiments
lasted for about 12 hours for each. After fuzzing, we replayed
the generated test-case queues and counted the accumulated
basic block coverage rates. When counting the basic block
hit numbers, we excluded the code for libc and HALs. In
other words, only the code for application and MCU libraries
is considered. As shown in Table III, we achieved higher
basic block coverage rate in all the tested samples. This is
explained by the tremendous speedup brought by our approach.
Combined with the support of full-ﬂedged ASAN, our tool
found more real bugs than HALucinator on the same set of
samples. As an example, for the STM ST-PLC ﬁrmware, we
identiﬁed nine bugs while HALucinator only identiﬁed one,
which is included in ours. We have reported the eight new bugs
to STMicroelectronics and all of them have been conﬁrmed
and patched in the later release.
Comparison with On-device Analysis. No AFL-based fuzz-
ing tool is available for real devices. As a rough estimation, we
only tested the overhead of fuzzing a real device. We assume
there is already some mechanisms to collect path coverage
information on the device for the AFL, e.g., ETM [9].
The overhead of fuzzing real devices is roughly composed
Table II: Comparison with HALucinator at a glance
WYCINWYC
Atmel lwIP HTTP (Ethernet)
Atmel lwIP HTTP (TCP)
STM UDP Server
STM UDP Client
STM TCP Server
STM TCP Client
STM ST-PLC
NXP TCP Server
NXP UDP Server
NXP HTTP Server
Time
Executions
1d:00h
19d:04h
0d:10h
3d:08h
3d:08h
3d:08h
3d:08h
1d:10h
14d:00h
14d:00h
14d:00h
1,548,582
37,948,954
2,645,393
19,214,779
12,703,448
16,356,129
16,723,950
456,368
218,214,107
240,720,229
186,839,871
HALunicator
Paths
Crashes
Speed (#/sec)
Time
Para-rehosting
Executions
Paths
Crashes
612
8,081
1,090
3,261
3,794
4,848
5,012
772
5,164
3,032
9,710
5
273
38
0
0
0
0
27
0
0
0
17.92
22.92
73.48
66.72
44.11
56.79
58.07
3.73
180.40
199.01
154.46
11h:43m
12h:33m
12h:00m
12h:00m
12h:00m
12h:00m
12h:00m
12h:15m
12h:02m
12h:00m
12h:39m
27,326,874
40,795,301
56,950,867
38,979,912
53,785,098
63,361,923
47,192,271
112,579,017
38,316,493
36,186,349
65,724,013
3,166