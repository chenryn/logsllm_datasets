(10) has the same number of equations
(10)
Fig. 4. Mimicry attack in MIMO systems using CRAWDAD data.
This result indicates that the attacker must utilize at least the
same number of antennas as the receiver to make the mimicry
attack feasible.
D. Simulation Results
To validate the feasibility of the mimicry attack against
MIMO systems, we use the CRAWDAD data set
[21],
which contains over 9,300 link signatures measured in an
indoor environment with obstacles and scatters. First, we
pick up two nodes as the two antennas of the receiver
(i.e., nodes 40 and 38), and two other nodes as the attacker’s
two transmit antennas (i.e., nodes 24 and 25). Then, we
record the link signatures between each pair of transmit
and receive antennas. Also, we choose another node (i.e.,
node 23) from the data set as the transmitter. The attacker
aims to fool the receiver by mimicking the transmitter’s link
signatures (i.e., the one between nodes 23 and 40, and that
between nodes 23 and 38).
The attacker computes
the corresponding transmitted
sequences xa1, xa2 based on Equation (10), and sends them to
the receiver. The receiver estimates the corresponding link sig-
natures based on the received symbols and the public training
sequence. As shown in Figure 4, both the link signatures esti-
mated by the receiver’ antennas A and B are correspondingly
close to the transmitter’s two real link signatures.
Based on the CRAWDAD set, we randomly pick one link
signature for the link between the transmitter and antenna
A as the comparison base h1, and another link signature
for the link between the transmitter and antenna B as the
comparison base h2. The Euclidean distance between h1 and
the other link signatures for the link between the trans-
mitter and antenna A ranges between 0.0820 and 0.2345,
whereas the Euclidean distance between estimated link sig-
nature and the transmitter’s link signature at antenna A
is 0.0922, which falls in the above range. Also, the Euclidean
distance between h2 and the other link signatures for the
link between the transmitter and antenna B ranges between
0.1086 and 0.2705, whereas the Euclidean distance between
estimated link signature and the transmitter’s link signature
at antenna B is 0.1416, which also lies in the above range.
Therefore, the attacker can successfully fool the receiver into
believing that his link signatures are the same as those of
the transmitter. The simulation result veriﬁes that it is still
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:51:05 UTC from IEEE Xplore.  Restrictions apply. 
1520
IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, VOL. 11, NO. 7, JULY 2016
possible to launch mimicry attacks to forge link signatures in
MIMO systems.
V. TIME-SYNCHED LINK SIGNATURE
In this section, we develop a novel
time-synched link
signature to defend against the mimicry attacks. A key feature
of this new mechanism is the integration of cryptographic
protection and time factor into wireless link signatures.
Link signatures are speciﬁc to wireless communication
two
channels, and usually require a training phase for
nodes to learn the actual value. The attacker may target at
either the training phase to mislead the Transmitter and the
Veriﬁer about their link signature, or the operational phase
(as described in Section III) when the link signature is used
for physical layer authentication. Thus, a secure link signature
has to protect both the training and the operational phases.
A. Assumptions and Threat Model
We assume that there are a Transmitter and a Veriﬁer,
sharing a secret key K that
is only known to them.
Note that this assumption does not contradict with the goal
of wireless link signatures, because the main purpose of link
signatures is to provide the authentication of locations and
this cannot be achieved by using a shared key. The Transmit-
ter sends packets, or more precisely, physical layer frames,
to the Veriﬁer, who then veriﬁes if these frames are directly
transmitted by the Transmitter. We assume that the attacker
can eavesdrop, overhear, and jam wireless communications.
Also, the attacker is assumed to be able to transmit with a
higher power to generate a capture effect to overwhelm the
signal sent by the transmitter. However, we assume that the
attacker cannot compromise the Transmitter or the Veriﬁer,
and thus does not know their secret.
The attacker’s goal is to generate or forward frames to
the Veriﬁer and convince it that the frames were transmitted
directly by the Transmitter. By doing so the attacker may
want to convince the Veriﬁer to derive incorrect physical layer
characteristics about the transmission (e.g., wrong Received
Signal Strength, leading to incorrect estimate of distance).
Given that a cryptographic authentication mechanism
(e.g., digital signature, Message Integrity Code (MIC)) can
be added to a message to detect forged messages, the main
threat is from the frames that are originally generated by the
Transmitter but forwarded by the attacker. We focus on the
case when the attacker can jam and replay the Transmitter’s
frames (i.e., the jam-and-replay attack [22]). In the other cases
where the Veriﬁer can receive the original transmission by the
Transmitter, a duplication detection mechanism (e.g., sequence
number) along with authentication can properly detect the
frames forwarded by the attacker.
is,
We assume that the attacker can launch frame repeater
attacks. That
the attacker is able to receive a frame
transmitted by the Transmitter and then forward the frame
to the Veriﬁer. Such frame repeaters are widely available
commercially (e.g., various brands of 802.11 repeaters).
We also assume that the attacker can launch physical layer
symbol repeater attacks. That is, the attacker can observe
the transmission of each physical layer symbol, which may
represent one or multiple bits in the frame, and then forward
the symbol to the Veriﬁer directly. Such repeaters can be
developed using noise canceling techniques and proper posi-
tioning of antennas, as described in [23]. Compared with frame
repeater attacks, symbol repeater attacks are much harder to
defend against.
B. Design Strategy
The fundamental reason for the mimicry attack is that
the (snifﬁng) attacker can establish a set of equations based
on two pieces of information: (1) the training sequence and
(2) the Transmitter’s signal (i.e., physical layer symbols) at the
Veriﬁer’s location. These allow the attacker to manipulate the
transmitted physical layer symbols so that a frame sent by
the attacker has a valid link signature. To defend against this
attack, our strategy is to deprive the attacker at least one of
these two pieces of information. It is in general very difﬁcult
to prevent a passive attacker from receiving signals (and then
extracting valid link signatures). However, it is possible to
prevent the attacker from knowing the training sequences.
Thus, our initial idea is to use unpredictable, dynamic, and
authenticated training sequences for extracting link signatures
from wireless packets (frames).
It
1) Detecting Frames Forwarded by Attackers:
is not
hard to realize that simply using unpredictable, dynamic,
and authenticated training sequences is still insufﬁcient. The
attacker can receive and analyze the Transmitter’s signal to
learn the training sequence. If the Veriﬁer cannot receive the
original transmission (e.g., due to jam-and-replay attack), the
attacker can still forge link signatures by manipulating and
forwarding a frame received from the Transmitter.
To handle this threat, we propose to bring “time” into
the scheme. We assume the Transmitter and the Veriﬁer
have synchronized clocks. (As we will show in the proposed
scheme, in the training phase the Transmitter and the Veriﬁer
will synchronize their clocks to meet this assumption.) The
Transmitter may include a timestamp in the transmitted frame,
which indicates the time when a particular bit or byte (e.g., the
Start of Frame Delimiter (SFD) ﬁeld in an IEEE 802.11 or
802.15.4 frame [24]) is transmitted over the air. We assume
that the Transmitter can use authenticated timestamping tech-
niques (e.g., [25]) to ensure that
the timestamp precisely
represents the point in time when the SFD ﬁeld is transmitted
in air. As a result, upon receiving a frame, the Veriﬁer can
use the timestamp included in the frame and the time when
it receives the frame, which should also be obtained through
Medium Access Control (MAC) layer timestamping [25], to
estimate the traveling time of the frame. An overly long time
indicates that the frame has been forwarded by an interme-
diate attacker. Also, an attacker may revise the timestamp
to conceive the Veriﬁer that the calculated delay is small.
To avoid such attacks, the Transmitter will send the MIC of
the entire frame along with the frame to the Veriﬁer. Thus any
revision of the timestamp by an attacker will be detected by the
Veriﬁer.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:51:05 UTC from IEEE Xplore.  Restrictions apply. 
FANG et al.: MIMICRY ATTACKS AGAINST WIRELESS LINK SIGNATURE AND NEW DEFENSE
1521
the
of
a
100-byte
frame
transmission
Using MAC layer
timestamping can defend against
the frame repeater attack fairly well. For example, in an
802.11g wireless network, which supports 54 Mbps band-
width,
takes
about 14.8μs. To maximize the chance to detect retransmitted
frames, we may force certain critical frames (e.g., those used
to extract physical layer properties such as Received Signal
Strength (RSS)) to have a large frame size. In the case of
802.11g, the maximum frame size is 2,346 octets (bytes),
which will take about 347.6μs to transmit. A frame repeater
will have to double the transmission time, giving the Veriﬁer
a good chance to detect the extra delay and thus detect the
attack.
2) Defending Against Physical Layer Symbol Repeater
Attacks: A physical layer symbol repeater attack is much
harder to detect than frame repeater attacks. If the attacker
knows where the training sequence is located in the frame,
she can start repeating the physical layer symbols right after
she ﬁnishes receiving all symbols corresponding to the training
sequence. This reduces the delay that the physical layer symbol
repeater has to tolerate to the transmission time of only the
training sequence, which could be much shorter than the
transmission time of the entire frame.
Note that the calculation process of the symbol repeater
attack is the same as that of the frame forwarding attack
mentioned earlier. For the symbol repeater attack, the attacker
starts forwarding manipulated symbols right after she recog-
nizes the training sequence. For the frame forwarding attack,
the attacker starts forwarding manipulated symbols once she
receives a entire frame. In both attacks, the attacker has to
know the training sequence and the processes of calculating
the symbols to be transmitted by the attacker are exactly the
same, as described in Section III-C.
To defend against such physical
layer symbol repeater
attacks, we propose to integrate a third idea into the scheme,
that is, to make the location of the training sequence unpre-
dictable until the end of the frame transmission. Speciﬁcally,
we propose to insert the training sequence at a randomly
selected location in the payload, and place this location,
which can be represented as the offset from the start of
the frame header, at the end of the frame. In order for a
physical layer symbol repeater to mimic the link signature
of the Transmitter, she has to manipulate the physical layer
symbols corresponding to the training sequence in a frame.
If the location of the training sequence is not revealed until
the end of the frame, the attacker will have to wait until the
end of the transmission to learn it. This forces a physical layer
symbol repeater attack to degenerate into a frame repeater
attack, which can be handled as discussed earlier.
3) Minimum Frame Length:
If a frame payload is too
short, the Veriﬁer may have difﬁculty seeing the extra delay
caused by a frame repeater. One solution is to pad extra bits
into the frame payload if the frame length is less than a
minimum frame length. The minimum frame length can be
determined based on the errors of the time synchronization and
time measurement. Assume that the maximum errors in clock
discrepancy and transmission time are eδ and eτ , respectively.
Further assume that the maximum time measurement errors in
Fig. 5. PHY layer frame format.
the Transmitter and the Veriﬁer are eT and eV , respectively.
Thus, the maximum error that the Veriﬁer has to tolerate is
eall = eδ + eτ + eT + eV . Assume that the data rate of the
wireless communication is R. It is easy to see that when
the frame length is greater than the minimum frame length
Lmin = R · eall, the Veriﬁer is guaranteed to detect frames
forwarded by frame repeaters.
It has been demonstrated in an implementation of Radio
Frequency (RF) distance bounding protocol [26] that nano-
second processing delay is feasible to achieve. The time-
synched link signature requires much less precision in time
synchronization between the Transmitter and the Veriﬁer.
For example, even assuming eall is between 1μs and 10μs,
in a 54 Mbps 802.11g wireless network, Lmin will range
between 7 bytes and 68 bytes.
4) Overall Design: Figure 5 illustrates how these ideas
can be integrated into a physical layer protocol. The upper
portion of Figure 5 shows the layout of a typical physical
layer frame, which consists of a series of preamble symbols,
the frame header, and the payload. To detect frames forwarded
by attackers, we include in each frame a timestamp ts, which
indicates the transmission time of the frame. To defend against
physical
layer repeater attacks, we include the randomly
generated offset P of the training sequence in each frame at
the end of the frame (to force the attacker to wait until the
end of frame transmission).
Assume the Transmitter and the Veriﬁer share a secret
key K . Given the shared secret key, there are may ways to
generate an unpredictable, dynamic, and authenticated training
sequence. One simple method is to piggyback the authentica-
tion of the frame with the generation of the training sequence,
that is, to use the MIC of the entire frame as the training
sequence x. In situations where there is a mismatch between
the MIC and the training sequence (e.g., when a longer training
sequence is needed), we can simply generate the training
sequence as x = F(K , ts ), where F is a pseudo-random
function, and compute the frame MIC separately. The use of K
and ts makes x dynamic and unpredictable, and the frame
MIC allows x to be authenticated.
In the following, we present
the detailed procedure of
time-synched link signature, including the training phase and
the operational phase.
C. Training Phase
The training phase is intended for the Veriﬁer to collect
enough information from the Transmitter so that the Veriﬁer
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 06:51:05 UTC from IEEE Xplore.  Restrictions apply. 
1522
IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, VOL. 11, NO. 7, JULY 2016
can verify the link signatures of the future frames from the
Transmitter. The Veriﬁer should obtain the valid link signature
from the Transmitter whenever the link signature between
them may change. This can be accomplished by executing
the training phase protocol periodically or whenever one of
them moves.
In the training phase, the Veriﬁer needs to synchronize its
clock with the Transmitter, and obtain the link signature for the
current communication channel. At the same time, the Veriﬁer
needs to conﬁrm that there is no successful attack during the
training phase.
We use the classic time synchronization technique to esti-
mate the clock discrepancy between the Transmitter and the
Veriﬁer as well as the frame traverse time. This approach
has been used in the past for secure time synchronization
(e.g., [22], [25]). For the sake of presentation, we refer to
the point in time when the SFD ﬁeld of a frame is transmitted
or received as the transmission time or the receiving time of
this frame. Speciﬁcally, the Veriﬁer sends a request frame
to the Transmitter, and at the same time records the frame
transmission time t1 in the Veriﬁer’s local clock. When the
Transmitter receives the request frame, it records the receiving
time t2 of this frame, and then sends a reply frame to the
Veriﬁer, in which t2 and the transmission time t3 of the reply
frame, which are both measured in the Transmitter’s clock,
are included. Finally, the Veriﬁer receives the reply frame
and records the receiving time t4 in its clock. The clock