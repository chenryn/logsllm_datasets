way, LFA may miss some services. A service that is not
on the LFA’s list of “known services”, and does not ap-
pear explicitly on any rule, will not be queried.
To ensure this does not happen, LFA performs two ad-
ditional sets of queries.
In these queries, the queried
service is the “all service” wildcard “*”. However, fol-
lowing the same philosophy from before, we attempt to
make the queries speciﬁc, in a different way. For incom-
ing trafﬁc, LFA makes queries of the form “Outside !
internal-host-group : (cid:3)”, where “internal-host-group”
goes over every internal host group.1 LFA then goes over
the internal host groups again, making outbound queries
of the form “internal-host-group ! Outside : (cid:3)”.
The results of all these queries are organized into four
reports, called “Analysis by service: Incoming”, “Analy-
sis by service: Outgoing”, “Analysis by host group: In-
coming”, and “Analysis by host group: Outgoing”. This
organization offers the user the opportunity to look at the
ﬁrewall conﬁguration from different viewpoints, while
providing a comprehensive coverage of the trafﬁc the
ﬁrewall may encounter.
2.3 Supporting Multiple Vendors
in order to instantiate this model,
The core query engine uses a model of the ﬁrewall rule-
base, which is generic and vendor-independent. How-
ever,
the Lumeta
Firewall Analyzer (LFA) needs to be able to parse the
vendor-speciﬁc conﬁguration ﬁles, and if necessary, to
convert the vendor’s ﬁrewall semantics into their equiv-
alent in the LFA model. The Fang prototype provided
native support (within the C code implementing the core
query engine) only for the Lucent Managed Firewall
[LMF99] conﬁguration ﬁle syntax.
When we started adding support for other vendors (no-
tably Check Point’s and Cisco’s products), we decided
not to include additional parsers for these vendors’ lan-
guages within the core. Instead, we opted for an architec-
ture centered around an intermediate language. We chose
to write a separate front-end conversion utility for each
supported vendor. We chose to write these utilities using
the Perl programming language. The front-ends would
take the vendor’s ﬁles and translate them into the LFA’s
intermediate language. We had three options for an inter-
mediate language. We could base it on an access-control-
list language, or on one of Check Point’s languages, or on
the Lucent Managed Firewall (LMF) language.
Access-control-list
languages such as Cisco’s IOS
[IOS00] and PIX [PIX97] conﬁguration languages, or
the Linux ipchains (cf.
[Rus00]) script language,
do not support named host groups, and a rule’s source
and destination are restricted to be CIDR-block subnets.
Therefore, an access-control-list language was deemed
too low-level for our purposes; converting other ﬁrewall
conﬁguration languages to it would lose information and
1A host group is considered to be internal if it has a non-empty
intersection with in the Inside host group.
greatly increase the conﬁguration size.2
Check Point [Che97] uses two separate languages in the
conﬁguration of their FW-1 product: the INSPECT lan-
guage, and the language within the *.W/*.C policy
ﬁles. The INSPECT language does support IP ranges
but does not support naming, so it was deemed too low
level. The .W language does support naming, groups,
and ranges, however, it has the opposite problem: it is
too expressive. It contains many irrelevant details, such
as the colors in which to render the icons on screen, and
has a syntax that is much harder to parse or to synthesize.
The language we chose to base our intermediate lan-
guage on was the LMF conﬁguration language. The
basic LMF language is relatively easy to parse and to
synthesize, yet contains higher-level constructs such as
service groups and host groups, named user-deﬁned ser-
vices, named host groups, and arbitrary ranges of IP ad-
dresses.
Since we only use the language internally, within the
LFA, there was no reason to maintain strict compatibil-
ity with the real LMF language. Therefore we only used
some of the LMF language components and ignored oth-
ers. Furthermore, we did need to extend the LMF lan-
guage to incorporate features which LMF itself does not
support, such as negated host groups.3
2.4 Presentation of Results
In addition to letting the user specify her query, the Fang
GUI also displayed the query output to the user. The GUI
had a basic mode showing the names of the sources, des-
tinations, and services in the resulting (src, dest,
srv) tuple. The user had the ability to expand each tu-
ple to show the IP addresses and port numbers (all the
components expanded simultaneously). However, beta
testers felt that these two display modes were too limit-
ing.
When we discarded the GUI, we needed an alternative
mechanism to view the query results. Our choice was to
use an HTML-based display. We updated the core query
engine so it will dump all its ﬁndings into several format-
ted plain-text output ﬁles. Then we created a collection
of Perl back-end utilities that convert the output ﬁles into
a set of web pages.
2A single IP address range may need multiple CIDR block subnets
to cover it, the worst case being the range 0.0.0.1–255.255.255.254,
which requires 62 separate CIDR blocks.
3A negated host group is shorthand for the IP addresses that are not
contained in the host group.
The back-ends create four support web pages:
Original rules. This page shows the rule-base in a for-
mat that is as close as possible to the format used by
the vendor’s management tools.
Expanded rules. This page shows the rule-base after
conversion into the LFA intermediate language.
Services. This page shows a table of all the service def-
initions (protocols and port numbers), with the con-
tainment relationships4 between services. A service
has a hyperlink to every service group containing it,
and to every service it contains.
Host groups. This page shows a table of the deﬁnitions
(IP addresses) of all the host groups encountered
in the ﬁrewall rule-base, with the containment re-
lationships between host groups represented by hy-
perlinks.
In addition to the support pages, the back-ends create
web pages for the four query reports we mentioned in
Section 2.2: Analysis by service (Incoming and Outgo-
ing), and Analysis by host group (Incoming and Outgo-
ing). Each query result tuple is linked to the appropri-
ate entries in the Host groups and Services pages, with
a direct link to the Expanded rules page pointing to the
rule allowing the trafﬁc through. A typical LFA report
contains hundreds of such hyperlinks (depending on the
complexity of the rule-base).
Besides the extensive navigation capability offered by
the various links, we added a JavaScript-based naviga-
tion bar, and JavaScript scrolling functions that highlight
the table entries in the Rules, Services, and Host Groups
tables.
An advantage of such a web-based display is that it does
not impose a reading order on the user, and allows easy
access to any level of detail the user desires to view. The
query result pages just show the names, and the user can
choose whether to drill down on each component.
Section 4 contains excerpts from some of the produced
web pages.
2.5 Naming Things
An important part of the Lumeta Firewall Analysis in-
volves assigning names to services and host groups.
4A service group s contains service s if the s’s protocol is one
of s’s protocols, and s’s port numbers are contained in the range of
s’s port numbers.
For services and service groups, we use several sources
of naming information. First, the LFA has a fairly long
list of “well known” service deﬁnitions. So if the ﬁre-
wall rule-base contains a rule that refers to tcp on port
443, LFA displays it as https. Second, most ﬁrewalls
have built-in named deﬁnitions which we use. Finally,
for ﬁrewalls that support user-deﬁned services, we read
those names in.
If the name and deﬁnition we get from two sources
both match, we only show the service once. However,
sometimes there are mismatches: e.g., Check Point has
a predeﬁned service called icmp-proto, which has
the same deﬁnition as an LFA-deﬁned service called
ALL ICMP. In such cases we incorporate both names
into the reports. Another type of mismatch is when the
same name is used with different deﬁnitions. For in-
stance, there is an LFA-deﬁned service called tracer-
oute, which is deﬁned as udp with a port range of
32000–53000. Check Point has a predeﬁned service with
the same name but deﬁned with a port range of 33001–
65535. To avoid ambiguity, we preﬁx the service name
with the source of the deﬁnition.
For host groups, we rely on the naming information
that the ﬁrewall provides, which consists of user-deﬁned
names. If the ﬁrewall does not support host group names
(as is the case, e.g., for Cisco IOS [IOS00] access-
control-lists), we use the IP addresses themselves as the
name.
In addition, in all cases, LFA attempts to sup-
plement the host group names with DNS lookups where
possible. A reverse DNS lookup is performed for every
individual IP address that appears anywhere in the rule-
base. For subnets, LFA uses a heuristic to pick a repre-
sentative IP address in the subnet, and looks up that IP
address’ name.
2.6 Check Point-Speciﬁc Features
front-end
The Lumeta Firewall Analyzer
ckp2lfa, that converts Check Point FW-1 conﬁgura-
tions into the LFA intermediate language, has to deal
with several Check Point-speciﬁc features.
(LFA)
Global properties These are properties which are ac-
cessed through a separate tab in Check Point’s man-
agement module, and are not seen in the rules ta-
ble shown in the Check Point GUI. Some of the
properties control remote management access to the
ﬁrewall itself, dns access through the ﬁrewall, and
icmp access. Depending on their setting, these
properties in fact create implicit rules that are in-
serted into the rule-base at certain positions. The
ckp2lfa front-end converts these FW-1 proper-
ties into explicit rules, and places them in their
appropriate position in the rule base (First/Before-
Last/Last).
Object groups Check Point FW-1 allows network ob-
jects (i.e., host groups) to be deﬁned as groups of
other objects, which themselves may be groups,
thus creating a containment hierarchy of groups. If
the hierarchy is complicated enough, FW-1 users
sometimes lose track of what IP addresses the group
actually consists of, which leads to all kinds of con-
ﬁguration errors. The ckp2lfa front-end ﬂattens
out the hierarchy, by computing the explicit list of
IP addresses that belong to such a group object.
This ﬂattening does not lose information: one of
the features of the LFA query engine is that it com-
putes the host group containment relationships from
the IP addresses, regardless of whether a host group
was deﬁned as a group or not.
Negated objects Check Point FW-1 allows the ﬁrewall
administrator to deﬁne rules which refer to IP ad-
dresses “not in” a host group, or to services “not in”
a service group. The ckp2lfa front-end converts
the implicit deﬁnition into an explicit one, by com-
puting all the IP addresses that do not belong to the
negated host group.
3 Related Work
3.1 Active Vulnerability Testing
A number of vulnerability testing tools are available in
the market today. Some are commercial, from vendors
such as Cisco [CSS00] and ISS [ISS00], others are free
such as Fyodor’s nmap [Fyo00]. These tools physically
connect to the intranet, and probe the network, thereby
testing the deployed routing and ﬁrewall policies. These
tools are active: they send packets on the network and
diagnose the packets they receive in return. As such, they
suffer from several restrictions:
(i) If the intranet is large, with many thousands of ma-
chines, testing all of them using an active vulnerabil-
ity tester is prohibitively slow. Certainly, an active test
tool cannot check against every possible combination of
source and destination IP address, port numbers and pro-
tocols. Hence, users are forced to select which machines
should be tested, and hope that the untested machines are
secure. Unfortunately, it only takes one vulnerable ma-
chine to allow a penetration.
(ii) Vulnerability testing tools can only catch one type of
ﬁrewall conﬁguration error: allowing unauthorized pack-
ets through. They do not catch the other type of error:
inadvertently blocking authorized packets. This second
type of error is typically detected by a “deploy and wait
for complaints” strategy, which is disruptive to the net-
work users and may cut off critical business applications.
(iii) Active testing is always after-the-fact. Detecting a
problem after the new policy has been deployed is dan-
gerous (the network is vulnerable until the problem is de-
tected and a safe policy is deployed), costly (deploying
policy in a large network is a time consuming and error
prone job), and disruptive to users. Having the ability to
cold-test the policy before deploying it is a big improve-
ment.
(iv) An active vulnerability tester sends packets, and de-
tects problems by examining the return packets it gets
or doesn’t get. Therefore, it is inherently unable to test
network’s vulnerability to spooﬁng attacks: If the tester
would spoof the source IP address on the packets it sends,
it would never receive any return packets, and will have
no indication whether the spoofed packets reach their
destination or not.
(v) An active tester can only test from its physical loca-
tion in the network topology. A problem that is speciﬁc
to a path through the network that does not involve the
host on which the active tool is running will go unde-
tected.
3.2 Distributed Firewalls
Recently there has been a renewed interest in ﬁrewall
research, focusing on Bellovin’s idea of a distributed
ﬁrewall [Bel99]. A working prototype has been devel-
oped under OpenBSD [IKBS00]. The basic idea is to
make every host into a ﬁrewall that ﬁlters trafﬁc to and
from itself. This trend is growing in the commercial
world as well: personal ﬁrewalls for PCs, such as Zone
Labs [Zon00] and BlackICE [Bla00], are becoming more
common, as high-bandwidth, always-on, Internet con-
nections like DSL and Cable become more widespread.
The main advantages of a distributed ﬁrewall are that (i)
since the ﬁltering is at the endpoint, it can be based on
more detailed information (such as the binary executable
that is sending or receiving the packets); and (ii) there is
no bandwidth bottleneck at the perimeter ﬁrewall. The
main difﬁculties with a distributed ﬁrewall are (i) the
need for a central policy to control the ﬁltering, and (ii)
the need to ensure that every device in the network is pro-
tected, including infrastructure devices like routers and
printers.
It is this author’s opinion that a distributed ﬁrewall ar-
chitecture will augment, rather than replace, the perime-
ter ﬁrewall. The conventional ﬁrewall will remain as an
enterprise network’s ﬁrst line of defense. The fact that
one can put a lock on every ofﬁce door does not make
the guard at the building entrance unnecessary: there is
still valuable stuff in the hallways, and not everyone uses
the lock properly. When a widely deployed distributed
ﬁrewall system becomes available, it will most likely be
used as a second line of defense, behind the perimeter
ﬁrewall. The perimeter ﬁrewall will continue to protect
all the infrastructure that is not controlled by the new
architecture, to defend against denial-of-service attacks,
and to ensure central control.
4 An Example
In this section we show an annotated example which il-
lustrates the ﬂow of data through the various components
of the LFA. This example is based upon a ﬁrewall rule-
base that was installed on a real ﬁrewall protecting a pro-
duction network of a large enterprise. Using the LFA re-
port, the ﬁrewall’s administrators were able to correct a
major security risk that was present in their ﬁrewall con-