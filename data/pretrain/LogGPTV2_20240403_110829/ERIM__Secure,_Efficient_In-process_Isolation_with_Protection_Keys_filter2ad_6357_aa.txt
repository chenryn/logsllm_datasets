title:ERIM: Secure, Efficient In-process Isolation with Protection Keys
(MPK)
author:Anjo Vahldiek-Oberwagner and
Eslam Elnikety and
Nuno O. Duarte and
Michael Sammler and
Peter Druschel and
Deepak Garg
ERIM: Secure, Efficient In-process Isolation with 
Protection Keys (MPK)
Anjo Vahldiek-Oberwagner, Eslam Elnikety, Nuno O. Duarte, Michael Sammler, 
Peter Druschel, and Deepak Garg, Max Planck Institute for Software Systems, 
Saarland Informatics Campus
https://www.usenix.org/conference/usenixsecurity19/presentation/vahldiek-oberwagner
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.ERIM: Secure, Efﬁcient In-process Isolation with Protection Keys (MPK)
Anjo Vahldiek-Oberwagner
Eslam Elnikety
Nuno O. Duarte
Michael Sammler
Peter Druschel
Deepak Garg
Max Planck Institute for Software Systems (MPI-SWS), Saarland Informatics Campus
Abstract
Isolating sensitive state and data can increase the security
and robustness of many applications. Examples include pro-
tecting cryptographic keys against exploits like OpenSSL’s
Heartbleed bug or protecting a language runtime from na-
tive libraries written in unsafe languages. When runtime
references across isolation boundaries occur relatively in-
frequently, then conventional page-based hardware isola-
tion can be used, because the cost of kernel- or hypervisor-
mediated domain switching is tolerable. However, some
applications, such as the isolation of cryptographic session
keys in network-facing services, require very frequent do-
main switching. In such applications, the overhead of kernel-
or hypervisor-mediated domain switching is prohibitive.
In this paper, we present ERIM, a novel technique that
provides hardware-enforced isolation with low overhead on
x86 CPUs, even at high switching rates (ERIM’s measured
overhead is less than 1% for 100,000 switches per second).
The key idea is to combine protection keys (MPKs), a feature
recently added to x86 that allows protection domain switches
in userspace, with binary inspection to prevent circumven-
tion. We show that ERIM can be applied with little effort
to new and existing applications, doesn’t require compiler
changes, can run on a stock Linux kernel, and has low run-
time overhead even at high domain switching rates.
1 Introduction
It is good software security practice to partition sensitive data
and code into isolated components, thereby limiting the ef-
fects of bugs and vulnerabilities in a component to the con-
ﬁdentiality and integrity of that component’s data. For in-
stance, isolating cryptographic keys in a network-facing ser-
vice can thwart vulnerabilities like the OpenSSL Heartbleed
bug [37]; isolating a managed language’s runtime can pro-
tect its security invariants from bugs and vulnerabilities in
co-linked native libraries; and, isolating jump tables can pre-
vent attacks on an application’s control ﬂow.
First,
Isolation prevents an untrusted component from directly
accessing the private memory of other components. Broadly
speaking, isolation can be enforced using one of two ap-
proaches.
in software fault isolation (SFI) [47],
one instruments the code of untrusted components with
bounds checks on indirect memory accesses, to prevent ac-
cess to other components’ memory. The bounds checks
can be added by the compiler or through binary rewrit-
ing. Bounds checks impose overhead on the execution of
all untrusted components; additional overhead is required to
prevent control-ﬂow hijacks [30], which could circumvent
the bounds checks. On x86-64, pointer masking-based SFI
techniques like Native Client [42] incur overheads of up to
42% on the execution of untrusted code [30]. Even with
hardware-supported bounds checks, like those supported by
the Intel MPX ISA extension [26], the overhead is up to 30%,
as shown in by Koning et al. [30] and later in Section 6.5.
Another approach is to use hardware page protection for
memory isolation [9, 10, 13, 32, 33, 34]. Here, access checks
are performed in hardware as part of the address translation
with no additional overhead on execution within a compo-
nent. However, transferring control between components
requires a switch to kernel or hypervisor mode in order to
change the (extended) page table base. Recent work such as
Wedge, Shreds, SeCage, SMVs, and light-weight contexts
(lwCs) [10, 13, 24, 33, 34] have reduced the overhead of
such switching, but the cost is still substantial. For instance,
Litton et al. [33] report a switching cost of about 1us per
switch for lwCs, which use kernel-managed page tables for
in-process isolation. This amounts to an overhead of nearly
10% for an application that switches 100,000 times a second
and, in our experiments, an overhead of up to 65% on the
throughput of the web server NGINX when lwCs are used
to isolate session keys (Section 6.5). Techniques based on
Intel VT-x extended page tables with VMFUNC [34] have
less overhead, but the overhead is still high—up to 14.4% on
NGINX’s throughput in our experiments (Section 6.5).
In this paper, we present ERIM, the ﬁrst isolation tech-
nique for x86 that combines near-zero overhead on in-
component execution with very low cost switching among
components. ERIM relies on a recent x86 ISA extension
called protection keys (MPK) [28]. With MPK, each virtual
page can be tagged with a 4-bit domain id, thus partitioning
a process’s address space into up to 16 disjoint domains. A
special register, PKRU, that is local to each logical core de-
termines which domains the core can read or write. Switch-
ing domain permissions requires writing the PKRU register
in userspace, which takes only 11–260 cycles on current In-
tel CPUs, corresponding to an overhead of 0.07% to 1.0%
per 100,000 switches/s on a 2.6 GHz CPU. This amounts to
an overhead of at most 4.8% on the throughput of NGINX
when isolating all session keys, which is up to 6.3x, 13.5x
and 3x lower than the overhead of similar protection using
SFI (with Intel MPX), lwCs and Intel VT-x, respectively.
However, MPK by itself does not provide strong security
because a compromised or malicious component can sim-
USENIX Association
28th USENIX Security Symposium    1221
ply write to the PKRU register and grant itself permission
to access any component. ERIM relies on binary inspection
to ensure that all occurrences of instructions that update the
PKRU in the binary are safe, i.e., they cannot be exploited
to gain unauthorized access. With this, ERIM provides iso-
lation without requiring control-ﬂow integrity in untrusted
code, and therefore avoids the runtime overhead of ensuring
control-ﬂow integrity in unsafe languages.
While ERIM’s binary inspection enforces the safety of
its MPK-based isolation, it creates a potential usability is-
sue: What to do if a binary has unintentional occurrences
of PKRU-updating instructions? Since x86 does not require
instruction alignment, such occurrences could arise within a
longer instruction, or spanning the bytes of two or more adja-
cent instructions. Any such sequence could be exploited by a
control-ﬂow hijack attack and must be rejected by the binary
inspection mechanism. To handle such cases, we describe
a novel procedure to rewrite any instruction sequence con-
taining an unaligned PKRU-updating instruction to a func-
tionally equivalent sequence without the instruction. This
rewriting procedure can be integrated with a compiler or our
binary inspection.
ERIM is the ﬁrst technique that enables efﬁcient isolation
in applications that require very high domain switching rates
(~105/s or more) and also spend signiﬁcant time executing
inside untrusted components. We evaluate our ERIM proto-
type on three such applications: 1) Isolating the frequently
accessed session keys in a web server (NGINX), 2) isolat-
ing a managed language runtime from native libraries written
in unsafe languages, and 3) efﬁciently isolating the safe re-
gion in code-pointer integrity [31]. In all cases, we observe
switching rates of order 105 or more per second per core.
ERIM provides strong, hardware-based isolation in all these
cases, with overheads that are considerably lower than those
of existing techniques. Moreover, ERIM does not require
compiler support and can run on stock Linux.
In summary, this paper makes the following contributions.
1) We present ERIM, an efﬁcient memory isolation tech-
nique that relies on a combination of Intel’s MPK ISA ex-
tension and binary inspection, but does not require or assume
control-ﬂow integrity. 2) We describe a complete rewriting
procedure to ensure binaries cannot be exploited to circum-
vent ERIM. 3) We show that ERIM can protect applications
with high inter-component switching rates with low over-
head, unlike techniques based on hardware (extended) page
tables and SFI (even with hardware support).
2 Background and related work
In this section, we survey background and related work. En-
forcing relevant security or correctness invariants while trust-
ing only a small portion of an application’s code generally
requires data encapsulation. Encapsulation itself requires
isolating sensitive data so it cannot be accessed by untrusted
code, and facilitating switches to trusted code that has access
to the isolated state. We survey techniques for isolation and
switching provided by operating systems, hypervisors, com-
pilers, language runtimes, and binary rewriting, as well as
other work that uses MPK for memory isolation.
Isolation can be easily achieved by
OS-based techniques
placing application components in separate OS processes.
However, this method has high overhead even with a mod-
erate rate of cross-component invocation. Novel kernel
abstractions like light-weight contexts (lwCs) [33], secure
memory views (SMVs) [24] and nested kernels [14], com-
bined with additional compiler support as in Shreds [13] or
runtime analysis tools as in Wedge [10], have reduced the
cost of such data encapsulation to the point where isolating
long-term signing keys in a web server is feasible with little
overhead [33]. Settings that require more frequent switches
like isolating session keys or the safe region in CPI [31], how-
ever, remain beyond the reach of OS-based techniques.
Mimosa [20] relies on the Intel TSX hardware transac-
tional memory support to protect private cryptographic keys
from software vulnerabilities and cold-boot attacks. Mi-
mosa restricts cleartext keys to exist only within uncom-
mitted transactions, and TSX ensures that an uncommitted
transaction’s data is never written to the DRAM or other
cores. Unlike ERIM, which is a general-purpose isolation
technique, Mimosa speciﬁcally targets cryptographic keys,
and is constrained by hardware capacity limits of TSX.
In-process data encap-
Virtualization-based techniques
sulation can be provided by a hypervisor. Dune [9] en-
ables user-level processes to implement isolated compart-
ments by leveraging the Intel VT-x x86 virtualization ISA
extensions [28]. Koning et al. [30] sketch how to use the VT-
x VMFUNC instruction to switch extended page tables in
order to achieve in-process data isolation. SeCage [34] sim-
ilarly relies on VMFUNC to switch between isolated com-
partments. SeCage also provides static and dynamic pro-
gram analysis based techniques to automatically partition
monolithic software into compartments, which is orthogo-
nal to our work. TrustVisor [36] uses a thin hypervisor and
nested page tables to support isolation and additionally sup-
ports code attestation. SIM [44] relies on VT-x to isolate
a security monitor within an untrusted guest VM, where it
can access guest memory with native speed. In addition to
the overhead of the VMFUNC calls during switching, these
techniques incur overheads on TLB misses and syscalls due
to the use of extended page tables and hypercalls, respec-
tively. Overall, the overheads of virtualization-based encap-
sulation are much higher than those of ERIM.
Nexen [45] decomposes the Xen hypervisor into isolated
components and a security monitor, using page-based pro-
tection within the hypervisor’s privilege ring 0. Control of
the MMU is restricted to the monitor; compartments are
de-privileged by scanning and removing exploitable MMU-
modifying instructions. The goal of Nexen is quite different
1222    28th USENIX Security Symposium
USENIX Association
from ERIM’s: Nexen aims to isolate co-hosted VMs and the
hypervisor’s components from each other, while ERIM iso-
lates components of a user process. Like ERIM Nexen scans
for and removes exploitable instructions.
Language and runtime techniques Memory isolation can
be provided as part of a memory-safe programming lan-
guage. This encapsulation is efﬁcient if most of the checks
can be done statically. However, such isolation is language-
speciﬁc, relies on the compiler and runtime, and can be un-
dermined by co-linked libraries written in unsafe languages.
Software fault isolation (SFI) [47] provides memory iso-
lation in unsafe languages using runtime memory access
checks inserted by the compiler or by rewriting binaries. SFI
imposes a continuous overhead on the execution of untrusted
code. Additionally, SFI by itself does not protect against at-
tacks that hijack control ﬂow (to possibly bypass the mem-
ory access checks). To get strong security, SFI must be cou-
pled with an additional technique for control-ﬂow integrity
(CFI) [6]. However, existing CFI solutions have nontrivial
overhead. For example, code-pointer integrity (CPI), one of
the cheapest reasonably strong CFI defenses, has a runtime
overhead of at least 15% on the throughput of a moderately
performant web server (Apache) [31, Section 5.3]. In con-
trast, ERIM does not rely on CFI for data encapsulation and
has much lower overhead. Concretely, we show in Section 6
that ERIM’s overhead on the throughput of a much more per-
formant web server (NGINX) is no more than 5%.
The Intel MPX ISA extension [28] provides architectural
support for bounds checking needed by SFI. A compiler can
use up to four bounds registers, and each register can store a
pair of 64-bit starting and ending addresses. Specialized in-
structions check a given address and raise an exception if the
bounds are violated. However, even with MPX support, the
overhead of bounds checks is of the order of tens of percent
points in many applications (Section 6.5 and [12, 30, 40]).
Intel’s
Hardware-based trusted execution environments
SGX [27] and ARM’s TrustZone [8] ISA extensions al-
low (components of) applications to execute with hardware-
enforced isolation. JITGuard [17], for instance, uses SGX to
protect the internal data structures of a just-in-time compiler
from untrusted code, thus preventing code-injection attacks.
While SGX and TrustZone can isolate data even from the
operating system, switching overheads are similar to other
hardware-based isolation mechanisms [30].
IMIX [18] and MicroStach [38] propose minimal exten-
sions to the x86 ISA, adding load and store instructions to
access secrets in a safe region. The extended ISA can provide
data encapsulation. Both systems provide compilers that au-
tomatically partition secrets. However, for data encapsula-
tion in the face of control-ﬂow hijack attacks, both systems
require CFI. As mentioned, CFI techniques have nontrivial
overhead. ERIM, on the other hand, provides strong isola-
tion without relying on CFI and has lower overhead.
ASLR Address space layout randomization (ASLR) is
widely used to mitigate code-reuse exploits such as those
based on buffer overﬂow attacks [43, 23]. ASLR has also
been used for data encapsulation by randomizing data lay-
out. For example, as one of the isolation techniques used in
CPI [31, 46], a region of sensitive data is allocated at a ran-
dom address within the 48-bit x86-64 address space and its
base address is stored in a segment descriptor. All pointers
stored in memory are offsets into the region and do not reveal
its actual address. However, all forms of ASLR are vulnera-
ble to attacks like thread spraying [43, 25, 16, 19, 39]. Con-
sequently, ASLR is not viable for strong memory isolation,
despite proposals such as [35] to harden it.
ARM memory domains ARM memory domains [7] are
similar to Intel MPK, the x86 feature that ERIM relies on.
However, unlike in MPK, changing domains is a kernel op-
eration in ARM. Therefore, unlike MPK, ARM’s memory
domains do not support low-cost user-mode switching.
MPK-based techniques Koning et al. [30] present Mem-
Sentry, a general framework for data encapsulation, imple-
mented as a pass in the LLVM compiler toolchain. They
instantiate the framework with several different memory iso-
lation techniques, including many described above and one
based on MPK domains. However, MemSentry’s MPK in-
stance is secure only with a separate defense against control-
ﬂow hijack/code-reuse attacks to prevent adversarial misuse
of PKRU-updating instructions in the binary. Such defenses
have signiﬁcant overhead of their own. As a result, the over-
all overhead of MemSentry’s MPK instance is signiﬁcantly
higher than that of ERIM, which does not rely on a defense
against control-ﬂow hijacks.
In concurrent work [22], Hedayati et al. describe how to
isolate userspace libraries using VMFUNC or Intel MPK.
The MPK-based method is similar to ERIM, but does not ad-
dress the challenge of ensuring that there are no exploitable
occurrences of PKRU-modifying instructions. Rewriting bi-
naries in this manner is a key contribution of our work (Sec-
tion 4). Finally, Hedayati et al. rely on kernel changes while
ERIM can run safely on a stock Linux kernel.
libmpk [41] virtualizes MPK memory domains beyond the
16 supported in hardware. It also addresses potential security
issues in the API of Linux’s MPK support. libmpk addresses
concerns orthogonal to ERIM because neither limitation is