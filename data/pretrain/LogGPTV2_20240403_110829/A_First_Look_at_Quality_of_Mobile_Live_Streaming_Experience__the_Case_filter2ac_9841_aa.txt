# A First Look at Quality of Mobile Live Streaming Experience: The Case of Periscope

## Authors
- **Matti Siekkinen**
  - School of Science, Aalto University, Finland
  - Email: matti.siekkinen@aalto.fi
- **Enrico Masala**
  - Control & Comp. Eng. Dep., Politecnico di Torino, Italy
  - Email: enrico.masala@polito.it
- **Teemu Kämäräinen**
  - School of Science, Aalto University, Finland
  - Email: teemu.kamarainen@aalto.fi

## Abstract
Mobile live streaming is rapidly gaining popularity, yet little is known about the quality of experience (QoE) it provides. In this paper, we examine the Periscope service. We first crawl the service to understand its usage patterns. Then, we study the protocols used, typical QoE indicators such as playback smoothness and latency, video quality, and the energy consumption of the Android application.

**Keywords:** Mobile live streaming, QoE, RTMP, HLS, Periscope

## 1. Introduction
Periscope and Meerkat are services that enable users to broadcast live video to a large number of viewers using their mobile devices. Both services emerged in 2015 and have since gained significant popularity. Periscope, acquired by Twitter before its launch, announced in March 2016 that over 110 years of live video were watched daily on the platform [13]. Facebook has also recently launched a competing service called Facebook Live.

Very few details have been released about how these streaming systems work and the quality of experience (QoE) they deliver. One particular challenge is providing low-latency streams to clients, especially with features like real-time chat, which do not exist in traditional live video streaming systems and impact system design (e.g., protocol selection).

We measured the Periscope service in two ways. First, we created a crawler to query the Periscope API for ongoing live streams, gathering data from about 220K distinct broadcasts to analyze usage patterns. Second, we automated the process of viewing Periscope broadcasts on an Android smartphone, generating thousands of viewing sessions while logging various data. This data was used to examine the resulting QoE, video quality, and application-induced energy consumption on a smartphone.

Our key findings include:
1. 2 Mbps appears to be the critical boundary for access network bandwidth, below which startup latency and video stalling significantly increase.
2. Periscope uses the HLS protocol for broadcasts with many participants and RTMP otherwise.
3. HLS users experience longer playback latency but fewer stall events compared to RTMP.
4. Video bitrate and quality are similar for both protocols, with significant short-term variations attributed to content variability.
5. Like most video apps, Periscope is power-hungry, and the power consumption dramatically increases when the chat feature is enabled due to increased traffic and elevated CPU and GPU load.

## 2. Methods and Data Collection
The Periscope app communicates with servers using a private API protected by SSL. To access it, we set up an SSL-capable man-in-the-middle proxy, mitmproxy [12], between the mobile device and the Periscope service. The proxy intercepts HTTPS requests, allowing us to examine and log the exchange of requests and responses. The Periscope iOS app uses certificate pinning, so we only used the Android app in this study.

We used both Android emulators (Genymotion [3]) and smartphones. We generated two datasets:
1. The first dataset was created using an Android emulator and a mitmproxy script to crawl the service and continuously query about ongoing live broadcasts. This data was used to analyze usage patterns (Section 4).
2. The second dataset was generated for QoE analysis (Section 5) by automating the broadcast viewing process on a smartphone. We used a script to send tap events through the Android Debug Bridge (ADB) to simulate user actions, capturing all video and audio traffic using tcpdump. Another mitmproxy script logged broadcast descriptions and playback statistics, useful for RTMP sessions. For HLS, the app reports only the number of stall events. We reconstructed the video data using Wireshark [19] and libav [10] tools for further analysis.

In the automated viewing experiments, we used two different phones: Samsung Galaxy S3 and S4. The phones were located in Finland and connected to the Internet via a USB connection to a Linux desktop machine, providing over 100Mbps of available bandwidth. We imposed artificial bandwidth limits using the tc command in some experiments. For latency measurement, NTP was enabled on the desktop machine, using the same server pool as the Periscope app.

## 3. Periscope Overview
Periscope allows users to broadcast live video for others to view, with options for public and private broadcasting. Viewers can provide feedback through text chat and emoticons. Broadcasts can also be made available for replay.

### Table 1: Relevant Periscope API Commands
| API Request | Request Contents | Response Contents |
|-------------|------------------|-------------------|
| mapGeoBroadcastFeed | Coordinates of a rectangle-shaped geographical area | List of broadcasts located inside the area |
| getBroadcasts | List of 13-character broadcast IDs | Descriptions of broadcast IDs (including number of viewers) |
| playbackMeta | Playback statistics | None |

Users can discover public broadcasts in three ways:
1. The app shows a list of about 80 ranked broadcasts and a couple of featured ones.
2. Users can explore a world map to find broadcasts in specific geographical regions.
3. Users can click the “Teleport” button to start watching a randomly selected broadcast.

Since the API is not public, we examined HTTP requests and responses using mitmproxy. The application sends POST requests containing JSON-encoded attributes to https://api.periscope.tv/api/v2/apiRequest. Relevant requests are listed in Table 1.

Periscope uses two protocols for video stream delivery: Real-Time Messaging Protocol (RTMP) and HTTP Live Streaming (HLS). RTMP enables low latency, while HLS is used for scalability. Further investigation reveals that RTMP streams are delivered by Amazon EC2 instances, while HLS segments are delivered by Fastly CDN. RTMP uses a single connection, whereas HLS may use multiple connections for load balancing and resilience. Public streams use plaintext RTMP and HTTP, while private streams use RTMPS and HTTPS. The chat feature uses WebSockets.

## 4. Analysis of Usage Patterns
To understand the usage patterns of Periscope, we crawled the service. The application does not provide a complete list of broadcasts, so users must explore the service. In late March 2016, over 110 years of live video were watched daily on the platform.