title:A First Look at Quality of Mobile Live Streaming Experience: the Case
of Periscope
author:Matti Siekkinen and
Enrico Masala and
Teemu K&quot;am&quot;ar&quot;ainen
A First Look at Quality of Mobile Live Streaming
Experience: the Case of Periscope
Matti Siekkinen
School of Science
Aalto University, Finland
matti.siekkinen@aalto.ﬁ
Enrico Masala
Control & Comp. Eng. Dep.
Politecnico di Torino, Italy
PI:EMAIL
Teemu Kämäräinen
School of Science
Aalto University, Finland
teemu.kamarainen@aalto.ﬁ
ABSTRACT
Live multimedia streaming from mobile devices is rapidly
gaining popularity but little is known about the QoE
they provide. In this paper, we examine the Periscope
service. We ﬁrst crawl the service in order to under-
stand its usage patterns. Then, we study the protocols
used, the typical quality of experience indicators, such
as playback smoothness and latency, video quality, and
the energy consumption of the Android application.
Keywords
Mobile live streaming; QoE; RTMP; HLS; Periscope
1.
INTRODUCTION
Periscope and Meerkat are services that enable users
to broadcast live video to a large number of viewers
using their mobile device. They both emerged in 2015
and have since gained popularity fast. Periscope, which
was acquired by Twitter before the service was even
launched, announced in March 2016 on their one year
birthday that over 110 years of live video was watched
every day with the application [13]. Also Facebook has
recently launched a rival service called Facebook Live.
Very little details have been released about how these
streaming systems work and what kind of quality of
experience (QoE) they deliver. One particular challenge
they face is to provide low latency stream to clients
because of the features that allow feedback from viewers
to the broadcaster in form of a chat, for example. Such
interaction does not exist with “traditional” live video
streaming systems and it has implications on the system
design (e.g., protocols to use).
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than the author(s) must be honored. Abstracting with credit is
permitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
IMC 2016, November 14 - 16, 2016, Santa Monica, CA, USA
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to
ACM. ISBN 978-1-4503-4526-2/16/11. . . $15.00
DOI: http://dx.doi.org/10.1145/2987443.2987472
We have measures the Periscope service in two ways.
We ﬁrst created a crawler that queries the Periscope
API for ongoing live streams and used the gathered data
of about 220K distinct broadcasts to analyze the usage
patterns. Second, we automated the process of viewing
Periscope broadcasts with an Android smartphone and
generated a few thousand viewing sessions while logging
various kinds of data. Using this data we examined
the resulting QoE. In addition, we analyzed the video
quality by post processing the video data extracted from
the traﬃc captures. Finally, we studied the application
induced energy consumption on a smartphone.
Our key ﬁndings are the following: 1) 2 Mbps appears
to be the key boundary for access network bandwidth
below which startup latency and video stalling clearly
increase. 2) Periscope appears to use the HLS proto-
col when a live broadcast attracts many participants
and RTMP otherwise. 3) HLS users experience a longer
playback latency for the live streams but typically fewer
stall events. 4) The video bitrate and quality are very
similar for both protocols and may exhibit signiﬁcant
short-term variations that can be attributed to extreme
time variability of the captured content. 5) Like most
video apps, Periscope is power hungry but, surprisingly,
the power consumption grows dramatically when the
chat feature is turned on while watching a broadcast.
The causes are signiﬁcantly increased traﬃc and ele-
vated CPU and GPU load.
2. METHODS AND DATA COLLECTION
The Periscope app communicates with the servers us-
ing an API that is private in that the access is protected
by SSL. To get access to it, we set up a so called SSL-
capable man-in-the-middle proxy, i.e. mitmproxy [12],
in between the mobile device and the Periscope ser-
vice as a transparent proxy. The proxy intercepts the
HTTPS requests sent by the mobile device and pretends
to be the server to the client and to be the client to the
server. The proxy enables us to examine and log the ex-
change of requests and responses between the Periscope
client and servers. The Periscope iOS app uses the so
called certiﬁcate pinning in which the certiﬁcate known
477to be used by the server is hard-coded into the client.
Therefore, we only use the Android app in this study.
We used both Android emulators (Genymotion [3])
and smartphones in the study. We generated two data
sets. For the ﬁrst one, we used an Android emula-
tor and developed an inline script for the mitmproxy
that crawls through the service by continuously query-
ing about the ongoing live broadcasts. The obtained
data was used to analyze the usage patterns (Sec. 4).
The second dataset was generated for QoE analysis
(Sec. 5) by automating the broadcast viewing process on
a smartphone. The app has a “Teleport” button which
takes the user directly to a randomly selected live broad-
cast. Automation was achieved with a script that sends
tap events through Android debug bridge (adb) to push
the Teleport button, wait for 60s, push the close button,
push the “home” button and repeat all over again. The
script also captures all the video and audio traﬃc using
tcpdump. Meanwhile, we ran another inline script with
mitmproxy that dumped for each broadcast viewed a
description and playback statistics, such as delay and
stall events, which the application reports to a server
at the end of a viewing session. It is mainly useful for
those streaming sessions that use the RTMP protocol
because after an HTTP Live Streaming (HLS) session,
the app reports only the number of stall events. We
also reconstruct the video data of each session and ana-
lyze it using a variety of scripts and tools. After ﬁnding
and reconstructing the multimedia TCP stream using
wireshark [19], single segments are isolated by saving
the response of HTTP GET request which contains an
MPEG-TS ﬁle [5] ready to be played. For RTMP, we
exploit the wireshark dissector which can extract the
audio and video segments. The libav [10] tools have
been used to inspect the multimedia content and de-
code the video in full for the analysis of Sec. 5.2.
In the automated viewing experiments, we used two
diﬀerent phones: Samsung Galaxy S3 and S4. The
phones were located in Finland and connected to the
Internet by means of reverse tethering through a USB
connection to a Linux desktop machine providing them
with over 100Mbps of available bandwidth both up and
down stream. In some experiments, we imposed arti-
ﬁcial bandwidth limits with the tc command on the
Linux host. For latency measurement purposes (Sec-
tion 5.1), NTP was enabled on the desktop machine
and used the same server pool as the Periscope app.
3. PERISCOPE OVERVIEW
Periscope enables users to broadcast live video for
other users to view it. Both public and private broad-
casting is available. Private streams are only viewable
by chosen users. Viewers can use text chat and emoti-
cons to give feedback to the broadcaster. The chat be-
comes full when certain number of viewers have joined
after which new joining users cannot send messages.
Broadcasts can also be made available for replay.
Table 1: Relevant Periscope API commands.
API request
request contents
mapGeoBroadcastFeed
getBroadcasts
Coordinates of a
rectangle
shaped
geographical area
List of 13-character
broadcast IDs
playbackMeta
Playback statistics
con-
response
tents
List of broadcasts
located inside the
area
of
Descriptions
broadcast
IDs
(incl. nb of view-
ers)
nothing
A user can discover public broadcasts in three ways:
1) The app shows a list of about 80 ranked broadcasts
in addition to a couple of featured ones. 2) The user can
explore the map of the world in order to ﬁnd a broadcast
in a speciﬁc geographical region. The map shows only
a fraction of the broadcasts available in a large region
and more broadcasts become visible as the user zooms
in. 3) The user can click on the “Teleport” button to
start watching a randomly selected broadcast.
Since the API is not public, we examined the HTTP
requests and responses while using the app through the
mitmproxy in order to understand how the API works.
The application communicates with the servers by send-
ing POST requests containing JSON encoded attributes
to the following address: https://api.periscope.tv/api/
v2/apiRequest. The apiRequest and its contents vary
according to what the application wants to do. Re-
quests relevant to this study are listed in Table 1.
Periscope uses two kinds of protocols for the video
stream delivery: Real Time Messaging Protocol (RTMP)
using port 80 and HTTP Live Streaming (HLS) because
RTMP enables low latency (Section 5), while HLS is em-
ployed to meet scalability demands. Also Facebook Live
uses the same set of protocols[8]. Further investigation
reveals that the RTMP streams are always delivered by
servers running on Amazon EC2 instances. For exam-
ple, the IP address that the application got when re-
solving vidman-eu-central-1.periscope.tv gets mapped
to ec2-54-67-9-120.us-west-1.compute.amazonaws.com
when performing a DNS reverse lookup.
In contrast,
HLS video segments are delivered by Fastly CDN. RTMP
streams use only one connection, whereas HLS may
sometimes use multiple connections to diﬀerent servers
in parallel to fetch the segments, possibly for load bal-
ancing and/or resilience reasons. We study the logic of
selecting the protocol and its impact on user experience
in Section 5. Public streams are delivered using plain-
text RTMP and HTTP, whereas the private broadcast
streams are encrypted using RTMPS and HTTPS for
HLS. The chat uses Websockets to deliver messages.
4. ANALYSIS OF USAGE PATTERNS
We ﬁrst wanted to learn about the usage patterns of
Periscope. The application does not provide a complete
478(a) absolute
(b) relative
Figure 1: Cumulative number of broadcasts dis-
covered as a function of crawled areas (# of re-
quests). Each curve corresponds to a diﬀerent
deep crawl.
list of broadcasts and the user needs to explore the ser-
vice in ways described in the previous section. In late
March of 2016, over 110 years of live video were watched