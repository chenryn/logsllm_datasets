         * that happen before they enter the loop.
         */
        owner_pid = latch->owner_pid;
        if (owner_pid == 0)
                return;
        else if (owner_pid == MyProcPid)
        {
                if (waiting)
                        sendSelfPipeByte();
        }
        else
                kill(owner_pid, SIGUSR1);
#else
        /*
         * See if anyone's waiting for the latch. It can be the current process if
         * we're in a signal handler.
         *
         * Use a local variable here just in case somebody changes the event field
         * concurrently (which really should not happen).
         */
        handle = latch->event;
        if (handle)
        {
                SetEvent(handle);
                /*
                 * Note that we silently ignore any errors. We might be in a signal
                 * handler or other critical path where it's not safe to call elog().
                 */
        }
#endif
}
```
2\. SyncRepWakeQueue  
```
/*
 * Walk the specified queue from head.  Set the state of any backends that
 * need to be woken, remove them from the queue, and then wake them.
 * Pass all = true to wake whole queue; otherwise, just wake up to
 * the walsender's LSN.
 *
 * Must hold SyncRepLock.
 */
static int
SyncRepWakeQueue(bool all, int mode)
{
        volatile WalSndCtlData *walsndctl = WalSndCtl;
        PGPROC     *proc = NULL;
        PGPROC     *thisproc = NULL;
        int                     numprocs = 0;
        Assert(mode >= 0 && mode SyncRepQueue[mode]),
                                                                   &(WalSndCtl->SyncRepQueue[mode]),
                                                                   offsetof(PGPROC, syncRepLinks));
        while (proc)
        {
                /*
                 * Assume the queue is ordered by LSN
                 */
                if (!all && walsndctl->lsn[mode] waitLSN)
                        return numprocs;
                /*
                 * Move to next proc, so we can delete thisproc from the queue.
                 * thisproc is valid, proc may be NULL after this.
                 */
                thisproc = proc;
                proc = (PGPROC *) SHMQueueNext(&(WalSndCtl->SyncRepQueue[mode]),
                                                                           &(proc->syncRepLinks),
                                                                           offsetof(PGPROC, syncRepLinks));
                /*
                 * Set state to complete; see SyncRepWaitForLSN() for discussion of
                 * the various states.
                 */
                thisproc->syncRepState = SYNC_REP_WAIT_COMPLETE;
                /*
                 * Remove thisproc from queue.
                 */
                SHMQueueDelete(&(thisproc->syncRepLinks));
                /*
                 * Wake only when we have set state and removed from queue.
                 */
                SetLatch(&(thisproc->procLatch));
                numprocs++;
        }
        return numprocs;
}
```
3\. SyncRepReleaseWaiters  
```
/*
 * Update the LSNs on each queue based upon our latest state. This
 * implements a simple policy of first-valid-sync-standby-releases-waiter.
 *
 * Other policies are possible, which would change what we do here and
 * perhaps also which information we store as well.
 */
void
SyncRepReleaseWaiters(void)
{
        volatile WalSndCtlData *walsndctl = WalSndCtl;
        XLogRecPtr      writePtr;
        XLogRecPtr      flushPtr;
        XLogRecPtr      applyPtr;
        bool            got_oldest;
        bool            am_sync;
        int                     numwrite = 0;
        int                     numflush = 0;
        int                     numapply = 0;
        /*
         * If this WALSender is serving a standby that is not on the list of
         * potential sync standbys then we have nothing to do. If we are still
         * starting up, still running base backup or the current flush position is
         * still invalid, then leave quickly also.
         */
        if (MyWalSnd->sync_standby_priority == 0 ||
                MyWalSnd->state flush))
        {
                announce_next_takeover = true;
                return;
        }
        /*
         * We're a potential sync standby. Release waiters if there are enough
         * sync standbys and we are considered as sync.
         */
        LWLockAcquire(SyncRepLock, LW_EXCLUSIVE);
        /*
         * Check whether we are a sync standby or not, and calculate the oldest
         * positions among all sync standbys.
         */
        got_oldest = SyncRepGetOldestSyncRecPtr(&writePtr, &flushPtr,
                                                                                        &applyPtr, &am_sync);
        /*
         * If we are managing a sync standby, though we weren't prior to this,
         * then announce we are now a sync standby.
         */
        if (announce_next_takeover && am_sync)
        {
                announce_next_takeover = false;
                ereport(LOG,
                                (errmsg("standby \"%s\" is now a synchronous standby with priority %u",
                                                application_name, MyWalSnd->sync_standby_priority)));
        }
        /*
         * If the number of sync standbys is less than requested or we aren't
         * managing a sync standby then just leave.
         */
        if (!got_oldest || !am_sync)
        {
                LWLockRelease(SyncRepLock);
                announce_next_takeover = !am_sync;
                return;
        }
        /*
         * Set the lsn first so that when we wake backends they will release up to
         * this location.
         */
        if (walsndctl->lsn[SYNC_REP_WAIT_WRITE] lsn[SYNC_REP_WAIT_WRITE] = writePtr;
                numwrite = SyncRepWakeQueue(false, SYNC_REP_WAIT_WRITE);
        }
        if (walsndctl->lsn[SYNC_REP_WAIT_FLUSH] lsn[SYNC_REP_WAIT_FLUSH] = flushPtr;
                numflush = SyncRepWakeQueue(false, SYNC_REP_WAIT_FLUSH);
        }
        if (walsndctl->lsn[SYNC_REP_WAIT_APPLY] lsn[SYNC_REP_WAIT_APPLY] = applyPtr;
                numapply = SyncRepWakeQueue(false, SYNC_REP_WAIT_APPLY);
        }
        LWLockRelease(SyncRepLock);
        elog(DEBUG3, "released %d procs up to write %X/%X, %d procs up to flush %X/%X, %d procs up to apply %X/%X",
                 numwrite, (uint32) (writePtr >> 32), (uint32) writePtr,
                 numflush, (uint32) (flushPtr >> 32), (uint32) flushPtr,
                 numapply, (uint32) (applyPtr >> 32), (uint32) applyPtr);
}
```
4\. epoll_ctl瓶颈   
```
#if defined(WAIT_USE_EPOLL)
/*
 * action can be one of EPOLL_CTL_ADD | EPOLL_CTL_MOD | EPOLL_CTL_DEL
 */
static void
WaitEventAdjustEpoll(WaitEventSet *set, WaitEvent *event, int action)
{
        struct epoll_event epoll_ev;
        int                     rc;
        /* pointer to our event, returned by epoll_wait */
        epoll_ev.data.ptr = event;
        /* always wait for errors */
        epoll_ev.events = EPOLLERR | EPOLLHUP;
        /* prepare pollfd entry once */
        if (event->events == WL_LATCH_SET)
        {
                Assert(set->latch != NULL);
                epoll_ev.events |= EPOLLIN;
        }
        else if (event->events == WL_POSTMASTER_DEATH)
        {
                epoll_ev.events |= EPOLLIN;
        }
        else
        {
                Assert(event->fd != PGINVALID_SOCKET);
                Assert(event->events & (WL_SOCKET_READABLE | WL_SOCKET_WRITEABLE));
                if (event->events & WL_SOCKET_READABLE)
                        epoll_ev.events |= EPOLLIN;
                if (event->events & WL_SOCKET_WRITEABLE)
                        epoll_ev.events |= EPOLLOUT;
        }
        /*
         * Even though unused, we also pass epoll_ev as the data argument if
         * EPOLL_CTL_DEL is passed as action.  There used to be an epoll bug
         * requiring that, and actually it makes the code simpler...
         */
        rc = epoll_ctl(set->epoll_fd, action, event->fd, &epoll_ev);
        if (rc < 0)
                ereport(ERROR,
                                (errcode_for_socket_access(),
                                 errmsg("epoll_ctl() failed: %m")));
}
```
```
DESCRIPTION
       This system call performs control operations on the epoll instance referred to by the file descriptor epfd.  It requests that the operation op be performed for the target file descriptor, fd.
       Valid values for the op argument are :
       EPOLL_CTL_ADD
              Register the target file descriptor fd on the epoll instance referred to by the file descriptor epfd and associate the event event with the internal file linked to fd.
       EPOLL_CTL_MOD
              Change the event event associated with the target file descriptor fd.
       EPOLL_CTL_DEL
              Remove (deregister) the target file descriptor fd from the epoll instance referred to by epfd.  The event is ignored and can be NULL (but see BUGS below).
       The event argument describes the object linked to the file descriptor fd.  The struct epoll_event is defined as :
           typedef union epoll_data {
               void        *ptr;
               int          fd;
               __uint32_t   u32;