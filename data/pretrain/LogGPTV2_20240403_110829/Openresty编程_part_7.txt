Openresty中文编程网 User Guide Page 38
测试错误用例 PDF last generated: November 08, 2016
现在超时限制是 10 秒而不是之前的 3 秒。
==== 读取超时
模拟读取超时也简单。仅需从一个既不写入数据又不断开连接的对端读取内容。 考
虑下面的例子：
[source,test-base]
=== TEST 1: read timeout — main_config stream { server { listen 5678;
content_by_lua_block { ngx.sleep(10) – 10 sec } } } — config lua_socket_log_errors
off; location = /t { content_by_lua_block { local sock = ngx.socket.tcp()
sock:settimeout(100) – ms assert(sock:connect(“127.0.0.1”, 5678))
ngx.say(“connected.”) local data, err = sock:receive() – try to read a line if not data
then ngx.say(“failed to receive: “, err) else ngx.say(“received: “, data) end } } —
request GET /t — response_body connected. failed to receive: timeout —
no_error_log [error] —-
这里我们使用 main_config 定义了一个 TCP 服务器，监听在本地的 5678 端口。 这
个服务器建立 TCP 连接后倒头就睡，10 秒后才起来关闭连接。 注意我们在
stream {} 配置块中用的是 link:https://github.com/openresty/stream-lua-nginx-
module#readme[ngx_stream_lua] 模块。 location = /t 语句块是这个测试块的核
心，它连接了前面定义的服务器并试图从中读一行数据。 显然，100ms 的超时限制
会先生效，这下我们可以测试到读取超时的错误处理了。
==== 发送超时
触发发送超时比起连接超时和读取超时要难多了。问题在于写套接字的异步特性。
出于性能考虑，在写的过程中至少有两层缓冲区：
. 在 NGINX 核心的用户态发送缓冲区，和 . 操作系统内核 TCP/IP 栈的套接字发送缓
冲区
雪上加霜的是，在写的对端还至少存在一层系统层面上的接收缓冲区。
要想触发一次发送超时，最简单粗暴的方法是塞爆所有发送的缓冲区，且确保对端
在应用层面上不做任何读取操作。 所以，仅用少量的测试数据就想在日常环境下重
现和模拟发送超时，无异于痴人说梦。
好在，存在一个用户态小技巧可以拦截 libc 包装的套接字 I/O 调用，并基于此实现
曾经难于上青天的目标。 我们的 link:https://github.com/openresty/
mockeagain[mockeagain] 库实现了这个技巧， 支持在用户指定的输出数据位置触发
一次发送超时。
下面的例子恰好在响应体发送了“hello world”之后触发一次发送超时。
Openresty中文编程网 User Guide Page 39
测试错误用例 PDF last generated: November 08, 2016
[source,test-base]
=== TEST 1: send timeout — config send_timeout 100ms; postpone_output 1;
location = /t {
content_by_lua_block {
ngx.say("hi bob!")
local ok, err = ngx.flush(true)
if not ok then
ngx.log(ngx.ERR, "flush #1 failed: ", err)
return
end
ngx.say("hello, world!")
local ok, err = ngx.flush(true)
if not ok then
ngx.log(ngx.ERR, "flush #2 failed: ", err)
return
end
}
} --- request GET /t --- ignore_response --- error_log flush #2 failed: timeout --- no_erro
r_log flush #1 failed ----
注意用于设置 NGINX 下游写操作的超时限制的 send_timeout 指令。 这里我们使用
较小的限制，100ms ，来确保测试用例尽量快地完成并避免触发测试脚手架客户端
默认的 3 秒超时。 postpone_output 1 指令关掉 NGINX 的“postpone output buffer”，
让输出数据不会被缓冲起来。 最后，Lua 代码中的 ngx.flush() 确保没有一个输出
过滤器会截留我们的数据。
在运行这个测试用例前，我们必须在 bash 中设置下面的系统环境变量：
[source,bash]
export LD_PRELOAD=”mockeagain.so” export MOCKEAGAIN=”w” export
MOCKEAGAIN_WRITE_TIMEOUT_PATTERN=’hello, world’ export
TEST_NGINX_EVENT_TYPE=’poll’ —-
让我们一一审视：
. LD_PRELOAD="mockeagain.so" 预先加载 mockeagain 库到当前进程中，当然也包括
了测试脚手架启动的 NGINX 服务进程。 如果 mockeagain.so 不在系统库路径中，你
可能需要设置 LD_LIBRARY_PATH 来包含它所在的路径。 . MOCKEAGAIN="w" 允许
Openresty中文编程网 User Guide Page 40
测试错误用例 PDF last generated: November 08, 2016
mockeagain 库拦截并改写非阻塞套接字上的写操作。 .
MOCKEAGAIN_WRITE_TIMEOUT_PATTERN='hello, world' 让 mockeagain 在看到给定的字
符串 hello, world 出现在输出数据流之后截止数据的发送。 .
TEST_NGINX_EVENT_TYPE='poll' 令 NGINX 服务器使用 poll 事件 API 而不是系统默认
的 （比如 Linux 上的 epoll ）。因为 mockeagain 暂时只支持 poll 事件。 本质
上，这个环境变量只是让测试脚手架生成下面的 nginx.conf 片段。 + [source,nginx]
—– events { use poll; } —– + 不过，你需要确保你的 NGINX 或 OpenResty 编译的时
候添加了 poll 支持。 总而言之，需要在编译时向 ./configure 指定选项
--with-poll_module 。
现在你应该能让上面的测试通过了！
如果可以的话，我们应该直接在测试文件里设置这些环境变量。 因为一旦缺了它
们，这个测试用例就没法通过了。 我们需要在测试文件序言部分一开头（甚至要在
use 语句之前）就添加下面的 Perl 代码片段：
[source,Perl]
BEGIN { $ENV{LD_PRELOAD} = “mockeagain.so”; $ENV{MOCKEAGAIN} = “w”;
$ENV{MOCKEAGAIN_WRITE_TIMEOUT_PATTERN} = ‘hello, world’;
$ENV{TEST_NGINX_EVENT_TYPE} = ‘poll’; } —-
这里需要使用 BEGIN {} ，因为它会在 Perl 加载任何模块之前运行。 这样当
Test::Nginx::Socket 加载时，设置的环境变量就能生效。
在测试文件中硬编码 mockeagain.so 的路径是个糟糕的主意，毕竟其他测试环境下
的 mockeagain 可能位于不同的文件路径。 最好还是让运行测试的人在外面配置包
含它的 LD_LIBRARY_PATH 环境变量。
===== 错误排除
如果你在运行上面的测试用例时遇到如下错误，
…. ERROR: ld.so: object ‘mockeagain.so’ from LD_PRELOAD cannot be preloaded
(cannot open shared object file): ignored. ….
那么你需要检查下 mockeagain.so 所在的路径是否位于 LD_LIBRARY_PATH 环境变量
中。 举个例子，我在自己的系统上是这么做的
…. export LD_LIBRARY_PATH=$HOME/git/mockeagain:$LD_LIBRARY_PATH ….
如果你看到的是类似于下面的错误信息，
…. nginx: [emerg] invalid event type “poll” in …/t/servroot/conf/nginx.conf:76 ….
意味着你的 NGINX 或 OpenResty 编译的时候没有添加 poll 模块。 你需要重新编译
NGINX 或 OpenResty，并在编译时传递 --with-poll_module 选项给 ./configure 。
在接下来的 Test Modes 一节，我们还会继续讨论到 mockeagain 。
=== 模拟后端的异常响应
Openresty中文编程网 User Guide Page 41
测试错误用例 PDF last generated: November 08, 2016
在前面的“读取超时”小节，我们在例子里使用 link:https://github.com/openresty/
stream-lua-nginx-module#readme[ngx_stream_lua] 模块模拟了一个仅接受新连接却
从不返回数据的后端 TCP 服务器。 毫无疑问，我们还可以在这个模拟服务器中做更
多有趣的东西，比如模拟后端服务器返回各种错误响应数据。
举个例子，如果用真实的服务器测试一个 Memcached 客户端，就很难去模拟错误
的抑或格式异常的响应。 而用模拟的服务器则易如反掌：
[source,test-base]
=== TEST 1: get() results in an error response — main_config stream { server {
listen 1921; content_by_lua_block { ngx.print(“SERVER_ERROR\r\n”) } } } — config
location /t { content_by_lua_block { local memcached = require “resty.memcached”
local memc = memcached:new()
assert(memc:connect("127.0.0.1", 1921))
local res, flags, err = memc:get("dog")
if not res then
ngx.say("failed to get: ", err)
return
end
ngx.say("get: ", res)
memc:close()
}
} --- request GET /t --- response_body failed to get: SERVER_ERROR --- no_error_log [er
ror] ----
我们可以随心所欲地仿造 Memcached 服务器的任意响应。太棒了！
NOTE: Test::Nginx::Socket 提供了 tcp_listen 、 tcp_query 、 tcp_reply 等 数据节，
在测试脚手架层面上支持模拟 TCP 服务器。如果你不想在你的测试代码中使用
ngx_stream_lua 抑或 NGINX 流子系统，可以用它们代替。事实上，在
ngx_stream_lua 诞生之前， 我们一直依赖于 Test::Nginx::Socket 内置的 TCP 服务器
来完成相关测试。同样地， Test::Nginx::Socket 通过 udp_listen 、 udp_query 、
udp_reply 等数据节， 内置了 UDP 服务器支持。你能够在 Test::Nginx::Socket
link:https://metacpan.org/pod/Test::Nginx::Socket[ 官方文档]中读到更详细的说
明。
=== 模拟异常客户端
Test::Nginx::Socket 测试框架提供了特定的数据节来辅助模拟异常的 HTTP 客户端。
==== 仿造异常请求
Openresty中文编程网 User Guide Page 42
测试错误用例 PDF last generated: November 08, 2016
raw_request 数据节可以用来指定测试时发送的请求。它通常跟 eval 节过滤器成双
成对， 以便于编码像 \r 这样的特殊字符。看看下面的例子。
[source,test-nginx]
=== TEST 1: missing the Host request header — config location = /t { return 200; }
— raw_request eval “GET /t HTTP/1.1\r Connection: close\r \r “ —
response_body_like: 400 Bad Request — error_code: 400 —-
这里我们简单地构造出一个没有 Host 头部的畸形请求。 不出所料， NGINX 返回了
400 响应。
与之相对的，我们一直以来使用的 request 数据节会确保发送给测试服务器的请求
格式是正确的。
==== 模拟客户端连接中断
客户端连接中断在网络世界里是个令人着迷的现象。有些时候我们希望即使客户端
断开了连接， 服务器也能够继续当前流程；另外一些时候，我们仅仅立刻结束整个
请求的处理。 无论如何，我们都需要能够在单元测试用例中可靠地模拟客户端连接
中断的方法。
之前讲过，测试脚手架客户端的默认超时行为，可以通过 timeout 数据节进行调
整。 借助它的功能，我们也能让客户端提前断开连接。所需的只是设置过小的超时
时间。 为了避免测试脚手架报客户端超时的错误，还要指定 abort 数据节告知测试
脚手架这一点。 让我们用一个简单的测试用例把上面的内容串起来。
[source,test-nginx]
=== TEST 1: abort processing in the Lua callback on client aborts — config location
= /t { lua_check_client_abort on;
Openresty中文编程网 User Guide Page 43
测试错误用例 PDF last generated: November 08, 2016
content_by_lua_block {
local ok, err = ngx.on_abort(function ()
ngx.log(ngx.NOTICE, "on abort handler called!")
ngx.exit(444)
end)
if not ok then
error("cannot set on_abort: " .. err)
end
ngx.sleep(0.7) -- sec
ngx.log(ngx.NOTICE, "main handler done")
}
} --- request
GET /t --- timeout: 0.2 --- abort --- ignore_response --- no_error_log [error] main handle
r done --- error_log client prematurely closed connection on abort handler called! ----
在这个例子里，借助 timeout 数据节，我们让测试脚手架客户端在 0.2 秒后断开连
接。 同样，为了避免测试脚手架报客户端超时错误，我们指定了 abort 数据节。 最
后，在 Lua 应用代码里，我们启用了 lua_check_client_abort 指令来检查客户端超
时， 并通过 ngx.on_abort API 注册了一个回调函数，以 ngx.exit(444) 终止服务端处
理流程。
==== 客户端永不关闭连接
不像现实生活中大多数举止得当的 HTTP 客户端， Test::Nginx::Socket 使用的客户端
永不主动关闭连接，除非发生了超时错误（超过了 --- timeout 数据节指定的时
间）。 这确保收到“Connection: close”请求头部后，NGINX 服务器总能够正确地关闭
连接。
当连接没有被关闭时，服务器会存在“连接泄漏”的问题。举个例子，NGINX 在它的
HTTP 子系统中 使用引用计数（ r->main->count ）来判断一个连接能否被关闭和释
放。如果引用计数出了差错， NGINX 可能永远不会结束请求，造成资源泄漏。在这
种情况下，对应的测试用例会因客户端超时错误而失败。 举个例子，
[source]
# Failed test ‘ERROR: client socket timed out - TEST 1: foo # ‘ —-
就这方面来说，Test::Nginx::Socket 不是个遵纪守法的 HTTP 客户端。 事实上，我们
的测试脚手架避免使用一个循规蹈矩的 HTTP 客户端。 大多数测试用例都关注于罕
见的错误场景，而一个循规蹈矩的客户端会帮忙掩盖这些问题，而非揭露它们。
Openresty中文编程网 User Guide Page 44