agent_foo.sources.avro-AppSrv-source1.selector.default = mem-channel-1                       # 如果State不等于上面配置的任何一个值，则Event会发送到mem-channel-1上
```
上面配置中，选择器检查每个Event中名为"State"的Event header。
如果该值为"CA"，则将其发送到mem-channel-1，如果其为"AZ"，则将其发送到file-channel-2，或者如果其为"NY"则发送到两个channel上。
如果Event
header中没有"State"或者与前面三个中任何一个都不匹配，则Event被发送到被设置为default的mem-channel-1上。
多路复用选择器还支持一个 *optional* 属性，看下面的例子：
``` properties
# 以下是一个channel选择器的配置
agent_foo.sources.avro-AppSrv-source1.selector.type = multiplexing
agent_foo.sources.avro-AppSrv-source1.selector.header = State
agent_foo.sources.avro-AppSrv-source1.selector.mapping.CA = mem-channel-1                          # CA被第一次映射到mem-channel-1
agent_foo.sources.avro-AppSrv-source1.selector.mapping.AZ = file-channel-2
agent_foo.sources.avro-AppSrv-source1.selector.mapping.NY = mem-channel-1 file-channel-2
agent_foo.sources.avro-AppSrv-source1.selector.optional.CA = mem-channel-1 file-channel-2          # 关键看这行，State=CA的映射在上面本来已经指定到mem-channel-1了，这里又另外配置了两个channel
agent_foo.sources.avro-AppSrv-source1.selector.mapping.AZ = file-channel-2
agent_foo.sources.avro-AppSrv-source1.selector.default = mem-channel-1
```
::: hint
::: title
Hint
:::
"必需channel"的意思就是被选择器配置里精确匹配到的channel，上面例子里面除了
*optional*
那一行，剩下的四行映射里面全都是"必需channel"；"可选channel"就是通过
*optional* 参数配置的映射。
:::
通常选择器会尝试将匹配到的Event写入指定的所有channel中，如果任何一个channel发生了写入失败的情况，就会导致整个事务的的失败，然后会在所有的channel上重试（不管某一个channel之前成功与否，只有所有channel
都成功了才认为事务成功了）。一旦所有channel写入成功，选择器还会继续将Event写入与之匹配的"可选channel"上，但是"可选channel"如果发生写入失败，选择器会忽略它。
如果"可选channel"与"必需channel"的channel有重叠（上面关于CA的两行配置就有相同的mem-channel-1），则认为该channel是必需的，这个mem-channel-1发生失败时会导致重试所有"必需channel"。上面例子中的mem-channel-1发生失败的话就会导致evnet在所有
channel重试。
::: hint
::: title
Hint
:::
这里注意一下，CA这个例子中，"必需channel"失败会导致Event在选择器为它配置的所有通道上重试，是因为第一段中说过"
*一旦所有channel写入成功，选择器还会继续将Event写入与之匹配的"可选channel"上*
"，依据这个原则，再看CA的例子
必需的mem-channel-1失败后，重试且成功了，然后再把"可选channel"重试一遍，也就是mem-channel-1和file-channel-2
:::
如果一个Event的header没有找到匹配的"必需channel"，则它会被发送到默认的channel，并且会尝试发送到与这个Event对应的"可选channel"上。无必需，会发送到默认和可选；无必需无默认，还是会发送到可选，这种情况下所有失败都会被忽略。
### SSL/TLS 支持
为了方便与其他系统安全地通信，Flume的部分组件从1.9版本开始支持SSL/TLS了。
::: hint
::: title
Hint
:::
这小节是Flume的1.9版本相对于之前版本最重要的一个新增特性，其实在之前的版本已经有部分组件是支持SSL的，从1.9开始将SSL的支持提高到了全局，所有支持SSL的组件配置参数也进行了统一规范命名，可以这么说1.9对SSL的支持更完整、规范和统一了。
:::
  Component                     SSL server or client
  ----------------------------- ----------------------
  Avro Source                   server
  Avro Sink                     client
  Thrift Source                 server
  Thrift Sink                   client
  Kafka Source                  client
  Kafka Channel                 client
  Kafka Sink                    client
  HTTP Source                   server
  JMS Source                    client
  Syslog TCP Source             server
  Multiport Syslog TCP Source   server
这些兼容SSL的组件有一些设置SSL的配置参数，比如ssl、keystore/truststore参数（位置、密码、类型）以及其他一些参数（比如禁用的SSL协议等）。
组件是否使用SSL始终是在组件自己的配置中开启或关闭，这样可以任意决定哪些组件使用SSL，哪些组件不使用（即使是相同类型的组件也是单独配置来指定是否开启SSL）
keystore / truststore 这种参数可以放在组件内，也可以使用全局的。
如果是在组件内单独设置，则在配置组件时配置对应的参数就行了。这种方法的优点是每个组件可以使用不同的密钥库（如果需要的话）。缺点是必须为配置文件中的每个组件配置这些参数。
组件内单独设置是可选的，一旦配置了其优先级高于全局参数。
如果使用全局设置，只需要定义一次keystore /
truststore的参数就可以了，所有组件使用这同一套配置。
可以通过【系统属性】或【环境变量】来配置这些SSL的全局参数。
  System property                    Environment variable             描述
  ---------------------------------- -------------------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------
  javax.net.ssl.keyStore             FLUME_SSL_KEYSTORE_PATH          Keystore 路径
  javax.net.ssl.keyStorePassword     FLUME_SSL_KEYSTORE_PASSWORD      Keystore 密码
  javax.net.ssl.keyStoreType         FLUME_SSL_KEYSTORE_TYPE          Keystore 类型 (默认是JKS)
  javax.net.ssl.trustStore           FLUME_SSL_TRUSTSTORE_PATH        Truststore 路径
  javax.net.ssl.trustStorePassword   FLUME_SSL_TRUSTSTORE_PASSWORD    Truststore 密码
  javax.net.ssl.trustStoreType       FLUME_SSL_TRUSTSTORE_TYPE        Truststore 类型 (默认是 JKS)
  flume.ssl.include.protocols        FLUME_SSL_INCLUDE_PROTOCOLS      将要使用的SSL/TLS协议版本，多个用逗号分隔，如果一个协议在下面的exclude.protocols中也配置了的话，那么这个协议会被排除，也就是exclude.protocols的优先级更高一些
  flume.ssl.exclude.protocols        FLUME_SSL_EXCLUDE_PROTOCOLS      不使用的SSL/TLS协议版本，多个用逗号分隔
  flume.ssl.include.cipherSuites     FLUME_SSL_INCLUDE_CIPHERSUITES   将要使用的密码套件，多个用逗号分隔，如果一个套件在下面的exclude.cipherSuites中也配置了的话，那么这个套件会被排除，也就是exclude.cipherSuites的优先级更高一些
  flume.ssl.exclude.cipherSuites     FLUME_SSL_EXCLUDE_CIPHERSUITES   不使用的密码套件，多个用逗号分隔
这些SSL的系统属性可以放在启动命令中也可以放在 *conf/flume-env.sh*
文件里面的JVM参数的 `JAVA_OPTS`
中，但是不建议配在命令行中，如果这样的话敏感信息就会被存到操作系统的历史命令中，增加不必要的风险。
如果放在环境变量里面可以像下面这样配置：
``` properties
export JAVA_OPTS="$JAVA_OPTS -Djavax.net.ssl.keyStore=/path/to/keystore.jks"
export JAVA_OPTS="$JAVA_OPTS -Djavax.net.ssl.keyStorePassword=password"
```
Flume使用JSSE（Java安全套接字扩展）中定义的系统属性，因此这是设置SSL的标准方法。
另一方面，在系统属性中指定密码意味着可以在进程列表中能看到密码，
如果在进程列表暴露不能接受，也可以改配在环境变量中，这时候Flume会从内部的相应环境变量中初始化JSSE系统属性。
环境变量可以放在启动命令中也可以配在 *conf/flume-env.sh*
里面，但是你要知道也不建议配在命令行中，因为敏感信息又会被存到系统的历史命令中。
``` properties
export FLUME_SSL_KEYSTORE_PATH=/path/to/keystore.jks
export FLUME_SSL_KEYSTORE_PASSWORD=password
```
**请注意:**
-   即使配置了全局的SSL，想要让具体某个组件使用SSL必须要在具体的组件内配置来开启才行，只配置全局的SSL不起任何作用。
-   如果SSL相关的参数被多次重复配置，那么遵从下面的优先级（从高到低）：
    -   组件自己的参数中的配置
    -   系统属性
    -   环境变量
-   如果某个组件的SSL开启，但是其他SSL参数没有配置（组件自己没配、全局的系统属性和环境变量里面也都没配）那么：
    -   keystores的情况: 报错configuration error
    -   truststores的情况: 使用默认的truststore (`jssecacerts` /
        `cacerts` in Oracle JDK)
-   在所有情况下，trustore密码都是可选的。如果未指定，那么当JDK打开信任库时，将不会在信任库上执行完整性检查。
### Source、Sink组件的 batchSizes与channel的单个事务容量兼容要求
基本上Source和Sink都可以配置batchSize来指定一次事务写入/读取的最大event数量，对于有event容量上限的Channel来说，这个batchSize必须要小于这个上限。
Flume只要读取配置，就会检查这个数量设置是否合理以防止设置不兼容。
::: hint
::: title
Hint
:::
看发布日志具体指的是文件Channel（ [File Channel](#file-channel)
）和内存Channel（ [Memory Channel](#memory-channel)
），Source和Sink的配置的batchSize数量不应该超过channel中配置的transactionCapacity。
:::
### Flume Sources
#### Avro Source
Avro
Source监听Avro端口，接收从外部Avro客户端发送来的数据流。如果与上一层Agent的
[Avro Sink](#avro-sink) 配合使用就组成了一个分层的拓扑结构。
必需的参数已用 **粗体** 标明。
  属性                                默认值   解释
  ----------------------------------- -------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  **channels**                        \--      与Source绑定的channel，多个用空格分开
  **type**                            \--      组件类型，这个是： `avro`
  **bind**                            \--      监听的服务器名hostname或者ip
  **port**                            \--      监听的端口
  threads selector.type selector.\*   \--      生成的最大工作线程数量 可选值：`replicating` 或 `multiplexing` ，分别表示： 复制、多路复用 channel选择器的相关属性，具体属性根据设定的 *selector.type* 值不同而不同
  interceptors interceptors.\*        \--      该source所使用的拦截器，多个用空格分开 拦截器的相关属性
  compression-type                    none     可选值： `none` 或 `deflate` 。这个类型必须跟Avro Source相匹配
  ssl                                 false    设置为 `true` 启用SSL加密，如果为true必须同时配置下面的 *keystore* 和 *keystore-password* 或者配置了全局的SSL参数也可以，想了解更多请参考 [SSL/TLS 支持](#ssltls-支持) 。
  keystore                            \--      SSL加密使用的Java keystore文件路径，如果此参数未配置就会默认使用全局的SSL的配置，如果全局的也未配置就会报错
  keystore-password                   \--      Java keystore的密码，如果此参数未配置就会默认使用全局的SSL的配置，如果全局的也未配置就会报错
  keystore-type                       JKS      Java keystore的类型. 可选值有 `JKS` 、 `PKCS12` ，如果此参数未配置就会默认使用全局的SSL的配置，如果全局的也未配置就会报错
  exclude-protocols                   SSLv3    指定不支持的协议，多个用空格分开，SSLv3不管是否配置都会被强制排除
  include-protocols                   \--      可使用的SSL/TLS协议的以空格分隔的列表。 最终程序启用的协议将是本参数配置的协议并且排除掉上面的排除协议。 如果本参数为空，则包含所有受支持的协议。
  exclude-cipher-suites               \--      不使用的密码套件，多个用空格分隔
  include-cipher-suites               \--      使用的密码套件，多个用空格分隔。最终程序使用的密码套件就是配置的使用套件并且排除掉上面的排除套件，如果本参数为空，则包含所有受支持的密码套件。
  ipFilter                            false    设置为true可启用ip过滤
  ipFilterRules                       \--      netty ipFilter的配置（参考下面的ipFilterRules详细介绍和例子）
配置范例：
``` properties
a1.sources = r1
a1.channels = c1
a1.sources.r1.type = avro
a1.sources.r1.channels = c1
a1.sources.r1.bind = 0.0.0.0
a1.sources.r1.port = 4141
```
**ipFilterRules格式详解**
ipFilterRules
可以配置一些允许或者禁止的ip规则，它的配置格式是：allow/deny:ip/name:pattern
第一部分只能是\[allow\]或\[deny\]两个词其中一个，第二部分是\[ip\]或\[name\]的其中一个，第三部分是正则，每个部分中间用":"分隔。
比如可以配置成下面这样：
``` properties
ipFilterRules=allow:ip:127.*,allow:name:localhost,deny:ip:*
```
注意，最先匹配到的规则会优先生效，看下面关于localhost的两个配置的不同
``` properties
#只允许localhost的客户端连接，禁止其他所有的连接
ipFilterRules=allow:name:localhost,deny:ip:
#允许除了localhost以外的任意的客户端连接
ipFilterRules=deny:name:localhost,allow:ip:
```
#### Thrift Source
监听Thrift 端口，从外部的Thrift客户端接收数据流。如果从上一层的Flume
Agent的 [Thrift Sink](#thrift-sink)
串联后就创建了一个多层级的Flume架构（同 [Avro Source](#avro-source)
一样，只不过是协议不同而已）。Thrift
Source可以通过配置让它以安全模式（kerberos
authentication）运行，具体的配置看下表。 必需的参数已用 **粗体** 标明。
::: hint
::: title
Hint
:::
同Avro Source十分类似，不同的是支持了 kerberos 认证。
:::
  属性                                默认值   解释
  ----------------------------------- -------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  **channels**                        \--      与Source绑定的channel，多个用空格分开
  **type**                            \--      组件类型，这个是： `thrift`
  **bind**                            \--      监听的 hostname 或 IP 地址
  **port**                            \--      监听的端口
  threads selector.type selector.\*   \--      生成的最大工作线程数量 可选值：`replicating` 或 `multiplexing` ，分别表示： 复制、多路复用 channel选择器的相关属性，具体属性根据设定的 *selector.type* 值不同而不同
  interceptors interceptors.\*        \--      该source所使用的拦截器，多个用空格分开 拦截器的相关属性
  ssl                                 false    设置为 `true` 启用SSL加密，如果为true必须同时配置下面的 *keystore* 和 *keystore-password* 或者配置了全局的SSL参数也可以，想了解更多请参考 [SSL/TLS 支持](#ssltls-支持) 。
  keystore                            \--      SSL加密使用的Java keystore文件路径，如果此参数未配置就会默认使用全局的SSL的配置，如果全局的也未配置就会报错
  keystore-password                   \--      Java keystore的密码，如果此参数未配置就会默认使用全局的SSL的配置，如果全局的也未配置就会报错
  keystore-type                       JKS      Java keystore的类型. 可选值有 `JKS` 、 `PKCS12` ，如果此参数未配置就会默认使用全局的SSL的配置，如果全局的也未配置就会报错
  exclude-protocols                   SSLv3    排除支持的协议，多个用空格分开，SSLv3不管是否配置都会被强制排除
  include-protocols                   \--      可使用的SSL/TLS协议的以空格分隔的列表。 最终程序启用的协议将是本参数配置的协议并且排除掉上面的排除协议。 如果本参数为空，则包含所有受支持的协议。
  exclude-cipher-suites               \--      不使用的密码套件，多个用空格分隔
  include-cipher-suites               \--      使用的密码套件，多个用空格分隔。最终程序使用的密码套件就是配置的使用套件并且排除掉上面的排除套件，如果本参数为空，则包含所有受支持的密码套件。
  kerberos                            false    设置为 `true` ，开启kerberos 身份验证。在kerberos模式下，成功进行身份验证需要 *agent-principal* 和 *agent-keytab* 。 安全模式下的Thrift仅接受来自已启用kerberos且已成功通过kerberos KDC验证的Thrift客户端的连接。
  agent-principal                     \--      指定Thrift Source使用的kerberos主体用于从kerberos KDC进行身份验证。
  agent-keytab                        ----     Thrift Source与Agent主体结合使用的keytab文件位置，用于对kerberos KDC进行身份验证。