--load-list/tmp/tmpP_9zBc
--load-1ist/tmp/tmp7hYEkP
--load-1ist/tmp/tmpiMq5Q1
--list
6.5测试序列与并行
8
---
## Page 89
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
① 如果通过操作系统的软件安装程序进行安装的话，命令名也可能是 python-coverage。例如，Debian
示例6.15使用nosetests --with-coverage
所示。
的哪些部分没有被测试过。前面谈到的测试工具都可以与 coverage 集成。
以及哪些可能是“僵尸代码”。此外，在单元测试中使用的好处也显而易见，可以知道代码
没有。
分被执行了。在单元测试期间使用时，它可以用来展示代码的哪些部分被测试所覆盖而哪些
或者--coverage（这将在下一节介绍）。
testr 命令可以接受一些选项，如--testr-args（通过它可以为testr 加入更多选项）
setup·py工作流的集成更加容易，例如，可以围绕 setup·py记录整个项目。setup·py
6.6
82
系统中就叫 python-coverage。
使用 nose时，只需要加入很少的选项就可以生成一份不错的代码覆盖报告，如示例6.15
单独使用coverage 非常简单且有用，它可以指出程序的哪些部分从来没有被运行过,
显然，要做的第一件事就是在系统中安装 Python的 coverage 模块（https://pypi.python.
测试覆盖是完善单元测试的工具。它通过代码分析工具和跟踪钩子来判断代码的哪些部
.testrepository 也可以同 setuptools 集成，并且为其部署 testr 命令。这使得与基于
编写测试当然有用，但是知道代码的哪些部分没有被测试到才是关键所在。
ceilometer.transformer
ceilometer.sample
ceilometer.publisher
ceilometer.pipeline
ceilometer
Name
........
第6章单元测试
127-128, 188-192, 275-280, 350-362
测试覆盖
本电子书仅限学习交流使用，请勿用于商业用途
Stmts
152
15
12
Miss
m
0
Cover
100%
80%
87%
75%
87%
26-32,35
81-84
32-34
49, 59, 113,
Missing
---
## Page 90
熊猫爱中国www.xiongmaoi.com
试。这是非常重要的，因为它有利于项目的后期维护，并有利于提升代码的整体质量。
示例6.16使用 coverage 和 testrepository
项，如果测试集运行时被执行的代码没有达到指定的最低百分比，这将会让测试集失败。
都被运行了，并不意味着每一个可能的条件都被测试到了。也就是说，这是个值得追求的
代码覆盖率是100%并不意味着代码已经被全部测试可以休息了。它只表明整个代码路径
警告
源代码的哪些部分运行与否如图6-1所示。
--cover-html标志，这个 cover 目录就会在 HTML 页面中打开，然后每一页都会显示
有需要做的只是打开你喜欢的文本编辑器然后开始写点儿什么。
括标准库和第三方库。这个输出包括没有被运行的代码行，也就是没有被测试的代码行。
目标，但并不意味着这是终点。
接下来你应该利用这些信息来巩固测试集，并为当前没有被运行过的任何代码添加测
这样可以结合 coverage 自动运行测试集，
$ python setup.py testr --coverage
使用testrepository 时，可以使用 setuptools 集成运行coverage。
如果愿意的话，可以使用--cover-min-percentage=COVER_MIN_PERCENTAGE 选
但是也可以做得更好一点儿，让 coverage 生成漂亮的 HTML 报表。只需要加上
加上--cover-package 选项是很重要的，否则就会看到每个被用到的 Python 包，
OK
Ran 46 tests in 0.170s
TOTAL
ceilometer.transformer.conversions 59
ceilometer.transformer.accumulator 17
-----
本电子书仅限学习交流使用，请勿用于商业用途
888
，并在 cover 目录中生成 HTML 报告。
393
0
100%
56%
100%
6.6测试覆盖
所
世
8
---
## Page 91
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
列表的情况。
供干净的环境。当你认为你的测试工作正常但是实际上不正常时是相当郁闷的，如涉及依赖
6.7
8
在第5章中，已经介绍并讨论了虚拟环境的使用。它的主要用途之一便是为单元测试提
使用虚拟环境和tox
第6章
10
fromceilometer.openstack.commonimportnetwork_utils
Coverage forceilometer.publisher:75%
under the License.
*.encoding:utf-8.*.
metaclass_=abc.ABcMeta
return loaded_driver.driver(parse_result)
aader
:param URL:URL for the publisher
单元测试
http://www.apache.org/licenses/LIcENsE-2.0
usethis
Julien Danjou 
本电子书仅限学习交流使用，请勿用于商业用途
driamesac
either
implied.
---
## Page 92
熊猫爱中国www.xiongmaoi.com
nosetests。因此需要将其作为（将被安装的）依赖的一部分列出来。
它包含以下内容：
中进行了安装。接下来并没有命令运行，因为该配置文件中并没有指定任何命令。
中创建了一个虚拟环境，使用 setup·py 创建了应用程序的一个分发包并在这个虚拟环境
$ touch tox.ini
目的根目录，与 setup·py同级。
否正常。
个干净的虚拟环境中运行整个测试集的所有功能，并安装被测试的应用程序以检查其安装是
程序了，即tox。
单元测试所需要的所有依赖。但这是非常常见的用例，所以已经有专门针对这一需求的应用
要执行的 nosetests 命令很可能会失败，因为在该虚拟环境中我们并没有安装
可以通过添加一个要在测试环境中运行的命令来改变其默认行为。编辑tox.ini。让
再次运行，tox 会重建虚拟环境，安装新的依赖并运行 nosetests 命令，它将执行所
commands=nosetests
显然这本身并不是很有用。在上面的例子中，tox使用默认的 Python 版本在.tox/python
现在可以成功运行tox：
使用 tox 之前，需要提供一个配置文件。这个文件名为tox.ini，需要放在被测试项
tox 的目标是自动化和标准化 Python 中运行测试的方式。基于这一目标，它提供了在一
deps=nose
[testenv]
commands=nosetests
[testenv]
python inst: /home/jd/project/.tox/dist/project-l.zip
python create: /home/jd/project/.tox/python
GLOB sdist-make: /home/jd/project/setup.py
8tox
可以写一个脚本去部署虚拟环境，安装 setuptools，然后安装应用程序/库的运行时或者
congratulations :)
python: commands succeeded
本电子书仅限学习交流使用，请勿用于商业用途
6.7
使用虚拟环境和tox
85
---
## Page 93
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
行不同的命令，使用下面的tox.ini文件是很容易实现的：
py33、jython 和 pypy！你甚至可以加入自定义的环境。要添加一个环境或者创建一个新
某个特定 Python 版本之上而不是运行在默认的版本之上。
的，tox能够真正地管理多个Python 虚拟环境，通过向tox传入-e标志就可以将测试运行在
是一个好主意：
是从一个名为 requirements.txt 的文件中读取所有依赖的。因此，让 tox 使用这个文件
使用-rfile 语法从文件中读取。如果正在使用 pbr 管理 setup·py 文件，那么应该知道它
有单元测试。显然，我们可能需要添加更多的依赖，这可以通过配置项deps 列出，也可以
86
commands=nosetests
deps=nose
[testenv]
默认情况下，tox可以模拟多种环境：py24、py25、py26、py27、py30、py31、py32、
文件中[testenv]一节定义的是被 tox 管理的所有虚拟环境参数。但正如前面所提及
commands=nosetests
Ran 7 tests in 0.029s
py26 inst: /home/jd/project/.tox/dist/rebuildd-1.zip
py26 create: /home/jd/project/.tox/py26
Id-dnzas/aoaloid/pl/auou/ :ayew-astps go1a
% tox -e py26
deps=nose
py26 runtests: commands[0] 1 nosetests
[testenv]
第6章单元测试
OK
congratulations :)
py26: commands succeeded
-rrequirements.txt
本电子书仅限学习交流使用，请勿用于商业用途
summary
---
## Page 94
熊猫爱中国www.xiongmaoi.com
熊猫爱中tox]
程序，然后运行命令nosetests。
时无须提供参数。
版本运行所有测试是非常有用的。这可以通过指定要使用的环境列表来实现，而在 tox运行
赖的一部分安装，但会执行pytest 命令。
deps=flake8
也可以使用 tox 来集成其他测试，如 flake8，正如1.4节中讨论过的。
当不指定任何参数运行tox时，列出的所有4种环境都将被创建，继而安装依赖和应用
commands=nosetests
commands=nosetests
deps=nose
env1ist=py26,py27,py33,pypy,pep8
deps=nose
envlist=py26,py27,py33,pypy
如今，通常你可能希望应用程序能支持多个Python版本。让tox为想要默认支持的Python
这里试图使用Python 2.1运行测试集，尽管我并不认为它能运行得起来。
也可以使用Python 不支持的版本创建新环境：
这只覆盖了针对 py27环境的命令，所以当运行 tox-e py27时 nose 仍然会被作为依
[testenv:pep8]
[testenv]
[tox]
commands=pytest
[testenv:py27]
[testenv]
basepython=python2.1
[testenv:py21]
commands=nosetests
deps=nose
[testenv]
本电子书仅限学习交流使用，请勿用于商业用途
6.7使用虚拟环境和tox
---
## Page 95
熊猫爱中国www.xiongmaoi.com
熊猫爱中自
① 如果想修改它，还是可以指定 basepython。
过加入一个简单的.travis.yml文件（如示例6.17所示）来完成后续工作。
Python版本，并可以高度定制。一旦通过它们的 Web 界面在项目中激活了Travis，就可以通
码的签入（push）、合并（merge）或签出（pull）请求后运行测试的方式。尽管在提交后执
测试代码零容忍。没有一组合适的单元测试覆盖的代码是不应该被合并的。
行测试有些差强人意，但这仍然是针对回归问题的一种不错的方式。Travis 支持所有主要的
单元测试的。
码能通过所有测试。由众多开发人员完成的代码评审保证所有被提交的代码都是具有相应的
Jenkins 会针对各个项目运行单元测试以及各种更高级别的功能测试。这可以保证提交的代
码提交都会经过基于Gerrit的代码评审系统，同时Zuul负责通过Jenkins 运行一组测试任务。
项目中尽管包含了测试代码，但是测试代码却由于各种原因无法运行。
6.8
88
（http:/jenkins-ci.org/）和Zuul（htp://ci.openstack.org/zuul/）的一个特定工作流程。每次代
有默认环境。你应该运行pip install 安装它。
pypi.python.org/pypi/detox）要做的，即通过 detox 命令能够并行运行 envlist 中指定的所
但因为虚拟环境都是隔离的，所以可以并行运行 tox 命令。这正是 detox 包（https://
当运行tox时，你会发现所有的环境会按顺序创建并运行。这通常会令整个过程耗时很长。
提示
如果正在使用流行的 GitHub 托管服务，Travis CI（https://travis-ci.org/）提供了一种在代
尽管这个主题并不局限于Python，但是考虑到其重要性，这里还是要强调一下：要对未
在项目中包含测试代码当然很好，但是如何运行这些测试也相当重要。实际上，在许多
在这个示例中，使用默认的Python版本运行 pep8 环境，不过这应该问题不大?。
例如，OpenStack会依赖基于Gerrit（https://code.google.com/p/gerrit/）、