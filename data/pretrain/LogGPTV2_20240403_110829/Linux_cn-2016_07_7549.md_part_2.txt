其中，item 为每次执行 COMMANDS 时，在 SEQUENCE 中匹配到的值。
#### While 循环语句
该循环结构会一直执行重复的命令，直到控制命令（EVALUATION\_COMMAND）执行的退出状态值等于 0 时 (即执行成功) 停止。基本语法如下：
```
while EVALUATION_COMMAND; do
        EXECUTE_COMMANDS;
done
```
其中，EVALUATION\_COMMAND 可以是任何能够返回成功 (0) 或失败 (0 以外的值) 的退出状态值的命令，EXECUTE\_COMMANDS 则可以是任何的程序、脚本或者 shell 结构体，包括其他的嵌套循环。
#### 综合使用
我们会通过以下例子来演示 if 条件语句和 for 循环语句。
**在基于 systemd 的发行版中探测某个服务是否在运行**
先建立一个文件，列出我们想要想要查看的服务名。
```
# cat myservices.txt
sshd
mariadb
httpd
crond
firewalld
```
![Script to Monitor Linux Services](/data/attachment/album/201607/07/113133xyylkphzmh56mpmf.png)
*使用脚本监控 Linux 服务*
我们编写的脚本看起来应该是这样的：
```
#!/bin/bash
# This script iterates over a list of services and
# is used to determine whether they are running or not.
for service in $(cat myservices.txt); do
        systemctl status $service | grep --quiet "running"
        if [ $? -eq 0 ]; then
                echo $service "is [ACTIVE]"
        else
                echo $service "is [INACTIVE or NOT INSTALLED]"
        fi
done
```
![Linux Service Monitoring Script](/data/attachment/album/201607/07/113133rsf0o5ojssscfocj.png)
*Linux 服务监控脚本*
**我们来解释一下这个脚本的工作流程**
1). for 循环每次读取 myservices.txt 文件中的一项记录，每一项纪录表示一个服务的通用变量名。各项记录组成如下：
```
# cat myservices.txt
```
2). 以上命令由圆括号括着，并在前面添加美元符，表示它需要从 myservices.txt 的记录列表中取值并作为变量传递给 for 循环。
3). 对于记录列表中的每一项纪录 (即每一项纪录的服务变量)，都会执行以下动作：
```
# systemctl status $service | grep --quiet "running"
```
此时，需要在每个通用变量名 (即每一项纪录的服务变量) 的前面添加美元符，以表明它是作为变量来传递的。其输出则通过管道符传给 grep。
其中，-quiet 选项用于阻止 grep 命令将发现的 “running” 的行回显到屏幕。当 grep 捕获到 “running” 时，则会返回一个退出状态码 “0” (在 if 结构体表示为 $?)，由此确认某个服务正在运行中。
如果退出状态码是非零值 (即 systemctl status $service 命令中的回显中没有出现 “running”)，则表明某个服务未运行。
![Services Monitoring Script](/data/attachment/album/201607/07/113133mir52jqzbzjd5hy5.png)
*服务监控脚本*
我们可以增加一步，在开始循环之前，先确认 myservices.txt 是否存在。
```
#!/bin/bash
# This script iterates over a list of services and
# is used to determine whether they are running or not.
if [ -f myservices.txt ]; then
        for service in $(cat myservices.txt); do
                systemctl status $service | grep --quiet "running"
                if [ $? -eq 0 ]; then
                        echo $service "is [ACTIVE]"
                else
                        echo $service "is [INACTIVE or NOT INSTALLED]"
                fi
        done
else
        echo "myservices.txt is missing"
fi
```
**Ping 一系列网络或者 Internet 主机名以获取应答数据**
你可能想把自己维护的主机写入一个文本文件，并使用脚本探测它们是否能够 ping 得通 (脚本中的 myhosts 可以随意替换为你想要的名称)。
shell 的内置 read 命令将告诉 while 循环一行行的读取 myhosts，并将读取的每行内容传给 host 变量，随后 host 变量传递给 ping 命令。
```
#!/bin/bash
# This script is used to demonstrate the use of a while loop
while read host; do
        ping -c 2 $host
done  文件系统校验   （    file system check    ） )。
如果对 fsck 进行设定，它除了校验文件系统的完整性之外，还可以尝试修复错误。fsck 能否成功修复错误，取决于文件系统的损伤程度；如果可以修复，被损坏部分的文件会恢复到位于每个文件系统根目录的 lost+found。
最后但同样重要的是，我们必须注意，如果拔掉系统正在写入数据的 USB 设备同样会发生错误，甚至可能发生硬件损坏。
fsck 的基本用如下：
```
# fsck [options] filesystem
```
**检查文件系统错误并尝试自动修复**
想要使用 fsck 检查文件系统，我们需要首先卸载文件系统。
```
# mount | grep sdg1
# umount /mnt
# fsck -y /dev/sdg1
```
![Scan Linux Filesystem for Errors](/data/attachment/album/201607/07/113134jzerm3r4m3ytgetz.png)
*检查文件系统错误*
除了 -y 选项，我们也可以使用 -a 选项来自动修复文件系统错误，而不必做出交互式应答，并在文件系统看起来 “干净” 卸载的情况下强制校验。
```
# fsck -af /dev/sdg1
```
如果只是要找出什么地方发生了错误 (不用在检测到错误的时候修复)，我们可以使用 -n 选项，这样只会将文件系统错误输出到标准输出设备上。
```
# fsck -n /dev/sdg1
```
根据 fsck 输出的错误信息，我们可以知道是否可以自己修复或者需要将问题提交给工程师团队来做详细的硬件校验。
### 总结
至此，系列教程的第十讲就全部结束了，全系列教程涵盖了通过 LFCS 测试所需的基础内容。
但显而易见的，本系列的十讲并不足以在单个主题方面做到全面描述，我们希望这一系列教程可以成为你学习的基础素材，并一直保持学习的热情（LCTT 译注：还有后继补充的几篇）。
我们欢迎你提出任何问题或者建议，所以你可以毫不犹豫的通过以下链接联系到我们： 成为一个 [Linux 认证系统工程师](http://www.shareasale.com/r.cfm?b=768106&u=1260899&m=59485&urllink=&afftrack=) 。
---
via: 
作者：[Gabriel Cánepa](http://www.tecmint.com/author/gacanepa/) 译者：[GHLandy](https://github.com/GHLandy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](https://linux.cn/) 荣誉推出