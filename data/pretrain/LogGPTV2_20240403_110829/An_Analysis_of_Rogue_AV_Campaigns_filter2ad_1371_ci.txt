### References

1. Kruegel, C., Robertson, W., Valeur, F., Vigna, G.: Static disassembly of obfuscated binaries. In: USENIX Security Symposium, San Diego, CA (2004).

2. Linn, C., Debray, S.: Obfuscation of executable code to improve resistance to static disassembly. In: Conference on Computer and Communications Security, Washington, DC, pp. 290–299 (2003).

3. Linn, C., Debray, S., Andrews, G., Schwarz, B.: Stack analysis of x86 executables (2004) (manuscript).

4. Luk, C.K., Cohn, R., Muth, R., Patil, H., Klauser, A., Lowney, G., Wallace, S., Reddi, V.J., Hazelwood, K.: Pin: Building customized program analysis tools with dynamic instrumentation. In: Programming Language Design and Implementation, Chicago, IL, pp. 190–200 (2005).

5. Madou, M., Anckaert, B., de Sutter, B., Bosschere, K.D.: Hybrid static-dynamic attacks against software protection mechanisms. In: ACM Workshop on Digital Rights Management, Alexandria, VA, pp. 75–82 (2005).

6. Maebe, J., Bosschere, K.D.: Instrumenting self-modifying code. In: International Workshop on Automated and Algorithmic Debugging, Ghent, Belgium (2003).

7. Martignoni, L., Christodorescu, M., Jha, S.: Omniunpack: Fast, generic, and safe unpacking of malware. In: Annual Computer Security Applications Conference, Miami Beach, FL (2007).

8. Mirgorodskiy, A.V., Miller, B.P.: Autonomous analysis of interactive systems with self-propelled instrumentation. In: International Conference on Parallel Computing, San Jose, CA (2005).

9. Moser, A., Kruegel, C., Kirda, E.: Exploring multiple execution paths for malware analysis. In: Symposium on Security and Privacy, Oakland, CA, pp. 231–245 (2007).

10. Moser, A., Kruegel, C., Kirda, E.: Limits of static analysis for malware detection. In: Annual Computer Security Applications Conference, Miami Beach, FL (2007).

11. Nanda, S., Li, W., Lam, L.C., Cker Chiueh, T.: Bird: Binary interpretation using runtime disassembly. In: International Symposium on Code Generation and Optimization (CGO 2006), New York, NY, pp. 358–370 (2006).

12. Neumann, R.: Exepacker blacklisting part 2. Virus Bulletin pp. 10–13 (2007).

13. Nguyen, A.M., Schear, N., Jung, H., Godiyal, A., King, S.T., Nguyen, H.: Mavmm: A lightweight and purpose-built vmm for malware analysis. In: Annual Computer Security Applications Conference, Honolulu, HI (2009).

14. Perriot, F., Ferrie, P.: Principles and practice of x-raying. In: Virus Bulletin Conference, Chicago, IL, pp. 51–66 (2004).

15. Popov, I., Debray, S., Andrews, G.: Binary obfuscation using signals. In: USENIX Security Symposium, Boston, MA, pp. 275–290 (2007).

16. Porras, P., Saidi, H., Yegneswaran, V.: A multi-perspective analysis of the storm (peacomm) worm. SRI International Technical Report (2007).

17. Porras, P., Saidi, H., Yegneswaran, V.: An analysis of conficker’s logic and rendezvous points. SRI International Technical Report (2009).

18. Quist, D., Ames, C.: Temporal reverse engineering. In: Blackhat, USA, Las Vegas, NV (2008).

19. Quist, D.A., Liebrock, L.M.: Visualizing compiled executables for malware analysis. In: Workshop on Visualization for Cyber Security, Atlantic City, NJ (2009).

20. Rosenblum, N.E., Zhu, X., Miller, B.P., Hunt, K.: Learning to analyze binary computer code. In: Conference on Artificial Intelligence, Chicago, IL (2008).

21. Royal, P., Halpin, M., Dagon, D., Edmonds, R., Lee, W.: PolyUnpack: Automating the hidden-code extraction of unpack-executing malware. In: Annual Computer Security Applications Conference, Miami Beach, FL, pp. 289–300 (2006).

22. Security, P.: Annual report Pandalabs (2008).

23. Sharif, M., Lanzi, A., Griffin, J., Lee, W.: Impeding malware analysis using conditional code obfuscation. In: Network and Distributed System Security Symposium, San Diego, CA (2008).

24. Sites, R.L., Chernoff, A., Kirk, M.B., Marks, M.P., Robinson, S.G.: Binary translation. Communications of the ACM 36(2), 69–81 (1993).

25. Srivastava, A., Edwards, A., Vo, H.: Vulcan: Binary transformation in a distributed environment. Technical Report MSR-TR-2001-50 (2001).

26. Srivastava, A., Eustace, A.: ATOM: a system for building customized program analysis tools. In: Programming Language Design and Implementation, Orlando, FL (1994).

27. Trilling, S.: Project green bay–calling a blitz on packers. In: CIO Digest: Strategies and Analysis from Symantec, p. 4 (2008).

28. Vigna, G.: Static disassembly and code analysis. In: Malware Detection. Advances in Information Security, vol. 35, pp. 19–42. Springer, Heidelberg (2007).

29. Yegneswaran, V., Saidi, H., Porras, P.: Eureka: A framework for enabling static analysis on malware. Technical Report SRI-CSL-08-01 (2008).

---

### Anomaly Detection and Mitigation for Disaster Area Networks

**Jordi Cucurull, Mikael Asplund, and Simin Nadjm-Tehrani**
  
**Department of Computer and Information Science, Linköping University**
  
{jordi.cucurull, mikael.asplund, simin.nadjm-tehrani}@liu.se
  
SE-581 83 Linköping, Sweden

#### Abstract
Disaster area networks (DANs) pose significant challenges due to the lack of infrastructure, limited energy resources, and the need for reliable information dissemination. This paper addresses anomaly detection in intermittently connected mobile ad hoc networks (IC-MANETs) where there is little or no prior knowledge about the network nodes. The approach uses a statistical method to detect anomalies in a manycast protocol designed for disseminating important messages to a specified number of receivers. We evaluate the approach through simulations of the Random Walk Gossip (RWG) protocol, combined with detection and mitigation mechanisms. The results show that resilience can be built into the network in a fully distributed and attack-agnostic manner, with a modest cost in terms of delivery ratio and additional transmissions. The approach is evaluated under attacks by adversaries that behave similarly to fair nodes.

#### 1. Introduction
Disaster area networks (DANs) are formed spontaneously when existing communication infrastructure is compromised. These networks often involve hastily formed networks (HFNs) of wireless devices using technologies like 802.11. Timely information dissemination is crucial in such environments, but establishing mutual trust is challenging due to the chaotic nature and the involvement of volunteers. Intermittently connected MANETs (IC-MANETs) are characterized by intermittent connectivity, leading to frequent partitions. This paper focuses on security issues affecting message dissemination in IC-MANETs, specifically the availability of dissemination services.

We study the impact of intrusions on the Random Walk Gossip (RWG) protocol, designed for IC-MANETs. RWG disseminates messages to any k receivers without relying on node knowledge, using opportunistic contacts and a store-and-forward mechanism to overcome partitions. Adversaries in this context must behave similarly to other nodes to avoid detection, making misuse detection difficult. Instead, we use a learning-based anomaly detection technique that builds a normality model from observed data. When an attack is suspected, each node adjusts its behavior to mitigate the attack's effects.

The threat model assumes adversaries aim to:
1. Drain network resources (battery life and bandwidth) to reduce dissemination.
2. Act as absorbing patches, reducing message dissemination in their vicinity.

Our approach is evaluated in a simulation setting with a disaster mobility model, showing that it creates resistance to these types of attacks and helps the network recover from transient attacks. The approach maintains overall overhead and delivery goals, despite the classical metrics not showing good results. We discuss why network performance metrics are more useful in IC-MANETs.

**Contributions:**
- A scalable, distributed, and efficient anomaly detection and mitigation approach for partitionable ad-hoc networks.
- Evaluation using a simulation platform, highlighting the importance of network performance metrics in disaster area networks.

#### 2. Related Work
Yang et al. [6] identify major security challenges in MANETs, including the lack of a well-defined place for security solutions, vulnerability of device information, shared medium, resource constraints, dynamic topology, and wireless channel characteristics. Prevention typically involves trust and cryptography, but these are hard to achieve in disaster scenarios. Intrusion detection in IC-MANETs is more suitable, with anomaly detection being easier to apply than misuse detection.

Several approaches have been proposed for intrusion detection in MANETs, but few address multicast protocols suitable for partitioned MANETs. Anomaly detection techniques include statistical, knowledge-based, and machine learning-based methods. Challenges include low detection efficiency, high false positive rates, and the need for appropriate metrics. Our work confirms that classical metrics are not suitable for IC-MANETs and advocates the use of delivery ratio and total transmissions for evaluation.

#### 3. Protocol Description and Threat Model

**3.1 Protocol Description**
The Random Walk Gossip (RWG) protocol is designed for intermittently connected networks, addressing challenges like intermittent connectivity, scarce resources, and unknown topologies. RWG is a manycast protocol, ensuring a message reaches a specified number of nodes (k). It uses a store-and-forward mechanism to prevent message loss due to partitions. Messages perform a random walk over nodes until all nodes in a partition are informed. The process is controlled by a three-way packet exchange involving Request to Forward (REQF), Acknowledgement (ACK), and OK to Forward (OKTF) packets. Nodes keep track of informed nodes using a bit vector, and Be Silent (BS) packets are sent when a message is k-delivered.

**3.2 Threat Model**
Adversaries in RWG can disrupt dissemination by behaving consistently with the protocol specification while minimizing their own resource usage. The focus is on low-cost attacks, such as draining network resources and acting as absorbing patches. These attacks are challenging to detect because the adversary behaves similarly to fair nodes, making misuse detection difficult. Anomaly detection is more suitable in this context.

---