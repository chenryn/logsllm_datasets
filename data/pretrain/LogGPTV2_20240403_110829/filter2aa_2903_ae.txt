与为乐者，遂至承天寺寻张怀民。怀民亦未寝，相与步于中庭。庭下如
积水空明，水中藻荇交横，盖竹柏影也。”
文末的议论尤其脍炙人口：“何夜无月？何处无竹柏？但少闲人如
吾两人者耳。”
诚然，月夜常有，竹子和松树也很平常，但是这样的夜游不常有。
2013年深秋，与十几位喜欢调试技术的朋友在庐山五老峰下的白鹿
洞书院聚会，吃过晚饭大家坐在古老的书院里交流调试技术，直到夜里
10点左右。然后，大家又聚集在延宾馆的庭院里，一边海阔天空地聊
天，一边欣赏美丽的夜景。说话的间隙可以听见院子外面贯道溪的哗哗
水声；抬起头，便看到满天的星斗。
2008年6月3日，作者收到了出版社快递给我的《软件调试》第1
版，喜不自禁，写了一篇博客，名为“手捧汗水的感觉”。
弹指一挥间，十年过去了。十年中，因为《软件调试》作者认识了
很多朋友。他们有不同的年龄，不同的背景，工作在不同的地方，但都
有一个共同点——读过《软件调试》。
2011年9月，《软件调试》第1版出版3年后，作者便开始计划和写
作第2版。但只坚持了一年便停顿了。之后写写停停，进展很缓慢。直
到2016年年底，从工作了十几年的英特尔公司辞职后，作者才又“重操
旧业”。
过去的十年中，计算机领域发生了很多重大的变革。顺应这些变
革，新的版本需要增加很多内容。简单来说，第2版卷1新增了以下内
容。
关于CPU增加了ARM处理器的相关内容。
关于操作系统增加了Linux系统的相关内容。
关于编译器增加了GCC的相关内容。
关于调试器增加了GDB的相关内容。
增加了全新的GPU内容。
新增这些内容后，如果再装订成一本书，那么肯定比砖头还厚。经
过反复思考和调整，最后终于确定了分卷出版的方案。卷1覆盖处理器
等基础内容，卷2、卷3分别介绍Windows系统和Linux系统的调试。
确定了新的分卷结构后，作者强迫自己投入更多的时间写作，快步
向前推进。终于在2018年6月把卷1的书稿发给了出版社。
卷1共16章，分为4篇。
第一篇：绪论（第1章）
作为全书的开篇，这一篇介绍了软件调试的概念、基本过程、分类
和简要历史，并综述了本书后面将详细介绍的主要调试技术。
第二篇：CPU及其调试设施（第2～7章）
CPU是计算机系统的硬件核心。这一篇以英特尔和ARM架构的CPU
为例，系统描述了CPU的调试支持，包括如何支持软件断点、硬件断点
和单步调试（参见第4章），如何支持硬件调试器（参见第7章），记录
分支、中断、异常和支持性能分析的方法（参见第5章），以及支持硬
件可调试性的错误检查和报告机制—— MCA（机器检查架构）（参见
第6章）。为了帮助读者理解这些内容，以及本书后面的内容，第2章介
绍了关于CPU的一些基础知识，包括指令集、寄存器和保护模式，第3
章深入介绍了与软件调试关系密切的中断和异常机制。与第1版相比，
第2版不仅扩展了原来关于x86处理器的内容，还新增了ARM处理器的
内容。
第三篇：GPU及其调试设施（第8～14章）
这是第1版没有的全新内容，分7章深入探讨了Nvidia、AMD、英特
尔、ARM和Imagination这五大厂商的GPU。从某种程度上说，CPU的时
代已经过去，GPU的时代正在开启。经历了半个多世纪的发展，CPU已
经很成熟，CPU领域的创新机会越来越少。CPU仍会存在，但不会再热
门。而GPU领域则像是一块新大陆，有很多地方还是荒野，等待开垦，
仿佛19世纪的美国西部，或者20世纪末的上海浦东。
第四篇：可调试性（第15～16章）
提高软件调试效率是一项系统的工程，除了CPU、操作系统和编译
器所提供的调试支持外，被调试软件本身的可调试性也是至关重要的。
这一篇首先介绍了提高软件可调试性的意义、基本原则、实例和需要注
意的问题（参见第15章），然后讨论了如何在软件开发实践中实现可调
试性（参见第16章）。第16章的内容包括软件团队中各个角色应该承担
的职责，实现可追溯性、可观察性和自动报告的方法。
在内容格式上，第2版也有所变化。首先，新增了名为“格物致
知”的实践模块。读者可以下载试验材料，然后按照书中的指导步骤进
行操作。在理论和实践方面，朱熹曾说：“言理则无可捉摸，物有时而
离。言物则理自在，自是离不得。”这句话的意思是，空讲理论可能让
人摸不着头脑，把理论和实践分离开来；相反，讲具体的事物，自然就
包含了道理，二者是分不开的。好一个“言物则理自在”，真是至理名
言。其实，“言物”除了有朱熹说的“言物则理自在”好处外，还有生动有
趣的优点。为此，第2版不仅新增了专门言物的“格物致知”模块，很多
章节的正文内容也是本着这个思想来写作的。
另外，第2版还增加了评点模块——“老雷评点”和“格友评点”。“老
雷评点”是“格蠹老雷”所评，“格友评点”为“格友”评点。“格蠹老雷”是作
者的绰号。“格友”者，“格蠹老雷”之友也。“格”字源于上文所说之格
物。在古老的《易经》中，8个基本符号中有一个为震，象征雷，代表
着锐意创新和开拓进取。
感谢苏轼，他用优美的文字清晰记录了900多年前的那个夜晚表现
了作者心向往之的那种意境，让我们可以穿越时空，领略一代文豪的生
活和心灵世界。感谢更多曾经著书立说的前辈，他们用文字向我们传递
了他们的思想和智慧。
感谢缔造软件的前辈们，他们创造了一种新的形式来传递智慧。感
谢父母，把我生在这个美好的软件时代。乐哉，三生有幸做软件。
因为书，自古便有读书之乐，穿越时空，悟前人心境，获前人智
慧。因为软件，今天有调试之乐，电波传语，与硅片对谈，赏匠心之
美，品设计之妙。希望本书可以让读者同时体验读书之乐和调试之乐。
当然，如果读者能以此结缘，结交一两个可以在月朗星稀之夜“相与步
于中庭”的朋友就更好了。
张银奎（Raymond Zhang）
2018年7月25日于上海格蠹轩
第1版前言
现代计算机是从20世纪40年代开始出现的。当时的计算机比今天的
要庞大很多，很多部件也不一样，但是有一点是完全相同的，那就是靠
执行指令而工作。
一台计算机认识的所有指令被称为它的指令集（instruction set）。
按照一定格式编写的指令序列被称为程序（program）。在同一台计算
机中，执行不同的程序，便可以完成不同的任务，因此，现代计算机在
诞生之初常被冠以通用字样，以突出其通用性。在带来好处的同时，通
用性也意味着当人们需要让计算机完成某一件事情时，首先要编写一个
能够完成这件事的程序，然后才执行这个程序来真正做这件事。使用这
种方法的过程中，人们很快就意识到了两个严峻的问题：一是编写程序
需要很多时间；二是当把编写好的程序输入计算机中执行时，有时它会
表现出某些出乎意料的怪异行为。因此，首先不得不寻找怪异行为的根
源，然后改写程序，如此循环，直到目标基本实现为止，或者因没有时
间和资源继续做这件事而不得不放弃。
程序对计算机的重要性和编写程序的复杂性让一些人看到了商机。
大约在20世纪50年代中期，专门编写程序的公司出现了。几年后，模仿
硬件（hardware）一词，人们开始使用软件（software）这个词来称呼计
算机程序和它的文档，并把将用户需求转化为软件产品的整个过程称为
软件开发（software development），将大规模生产软件产品的社会活动
称为软件工程（software engineering）。
如今，几十年过去了，我们看到的是一个繁荣而庞大的软件产业。
但是前面描述的两个问题依然存在：一是编写程序仍然需要很多时间；
二是编写出的程序在运行时仍然会出现意料外的行为。同时，后一个问
题的表现形式越来越多，在运行过程中，程序可能会突然报告一个错
误，可能会给出一个看似正确却并非需要的结果，可能会自作聪明地自
动执行一大堆无法取消的操作，可能会忽略用户的命令，可能会长时间
没有反应，可能会直接崩溃或者永远僵死在那里……而且总是可能有无
法预料的其他情况出现。这些“可能”大多是因为隐藏在软件中的设计失
误而导致的，即所谓的软件臭虫（bug），或者软件缺欠（defect）。
计算机是在软件指令的指挥下工作的，让存在缺欠的软件指挥强大
的计算机硬件工作是件危险的事，可能导致惊人的损失和灾难性的事件
发生。2003年8月14日，北美大停电（Northeast Blackout of 2003）使50
万人受到影响，直接经济损失60亿美元，其主要原因是软件缺欠导致报
警系统没有报警。1999年9月23日，美国的火星气象探测船因为没有进
入预定轨道从而导致受到大气压力和摩擦而被摧毁，其原因是不同模块
使用的计算单位不同，使计算出的轨道数据出现严重错误。1990年1月
15日，AT&T公司的100多台交换机崩溃并反复重新启动，导致6万用户
在9h中无法使用长途电话，其原因是新使用的软件在接收到某一种消息
后会导致系统崩溃，并把这种症状传染给与它相邻的系统。1962年7月
22日，“水手一号”太空船发射293s后因为偏离轨道而被销毁，其原因也
与软件错误有直接关系。类似的故事还有很多，尽管我们不希望它们发
生。
一方面，软件缺欠难以避免；另一方面，软件缺欠的危害很大。这
使得消除软件缺欠成为软件工程中的一项重要任务。消除软件缺欠的前
提是要找到导致缺欠的根本原因。我们把探索软件缺欠的根源并寻求其
解决方案的过程称为软件调试（software debugging）。
软件调试是在复杂的计算机系统中寻找软件缺欠的根源。这是让软
件从业者头疼的一项任务。要在软件调试中游刃有余，需要对软件和计
算机系统有深刻的理解，选用科学的方法，并使用强有力的工具。
第2版说明
本书的写作目的
在复杂的计算机系统中寻找软件缺欠的根源不是一个简单的任务，
需要对软件和计算机系统有深刻的理解，选用科学的方法，并使用强有
力的工具。这些正是作者写作本书的初衷。具体来说，写作本书的3个
主要目的如下。
论述软件调试的一般原理，包括CPU、操作系统和编译器是如何支
持软件调试的，内核态调试和用户态调试的工作模型，以及调试器
的工作原理。软件调试是计算机系统中多个部件之间的一个复杂交
互过程。要理解这个过程，必须要了解每个部件在其中的角色和职
责，以及它们的协作方式。学习这些原理不仅对提高软件工程师的
调试技能至关重要，还有利于加深他们对计算机系统的理解，将计
算机原理、编译原理、操作系统等多个学科的知识融会贯通。
探讨可调试性（debuggability）的内涵、意义和实现软件可调试性
的原则与方法。所谓软件的可调试性就是在软件内部加入支持调试
的代码，使其具有自动记录、报告和诊断的能力，从而更容易调
试。软件自身的可调试性对于提高调试效率、增强软件的可维护
性，以及保证软件的如期交付都有着重要意义。软件的可调试性是
软件工程中一个很新的领域，本书对其进行了深入系统的探讨。
交流软件调试的方法和技巧。尽管论述一般原理是本书的重点，但
是本书同时穿插了许多实践性很强的内容。其中包括调试用户态程
序和系统内核模块的基本方法，如何诊断系统崩溃（BSOD）和应
用程序崩溃，如何调试缓冲区溢出等与栈有关的问题，如何调试内
存泄漏等与堆有关的问题。特别是，本书非常全面地介绍了
WinDBG调试器的使用方法，给出了大量使用这个调试器的实例。
上一段所描述内容将在后续分卷中单独介绍。
总之，作者希望通过本书让读者懂得软件调试的原理，意识到软件
可调试性的重要性，学会基本的软件调试方法和调试工具的使用，并能
应用这些方法和工具解决问题和学习其他软硬件知识。历史证明，所有
软件技术高手都是软件调试高手，或者说不精通软件调试技术不可能成
为（也不能算是）软件技术高手。本书希望带领读者走上这条高手之
路。
本书的读者对象
第一，本书是写给所有程序员的。程序员是软件开发的核心力量。
他们花大量的时间来调试他们所编写的代码，有时为此工作到深夜。作
者希望程序员读完本书后能自觉地在代码中加入支持调试的代码，使调
试能力和调试效率大大提高，不再因为调试程序而加班。本书中关于
CPU、中断、异常和操作系统的介绍，是很多程序员需要补充的知识，
因为对硬件和系统底层的深刻理解不但有利于写出好的应用程序，而且
对于程序员的职业发展也是有利的。之所以说写给“所有”程序员是因为
本书主要讨论的是一般原理和方法，没有限定某种编程语言和某个编程
环境，也没有局限于某个特定的编程领域。
第二，本书是写给从事测试、验证、系统集成、客户支持、产品销
售等工作的软件工程师或IT工程师的。他们的职责不是编写代码，因此
软件缺欠与他们不直接相关，但是他们也经常因为软件缺欠而万分焦
急。他们不需要负责修改代码并纠正问题，但是他们需要知道找谁来解
决这个问题。因此，他们需要把错误定位到某个模块，或者至少定位到
某个软件。本书介绍的工具和方法对于实现这个目标是非常有益的。另
外，他们也可以从关于软件可调试性的内容中得到启发。本书关于
CPU、操作系统和编译器的内容对于提高他们的综合能力并巩固软硬件
知识也是有益的。
第三，本书是写给从事反病毒、网络安全、版权保护等工作的技术
人员的。他们经常面对各种怪异的代码，需要在没有代码和文档的情况
下做跟踪和分析。这是计算机领域中非常具有挑战性的工作。关于调试
方法和WinDBG的内容有利于提高他们的效率。很多恶意软件故意加入
了阻止调试和跟踪的机制，本书的原理性内容有助于理解这些机制。
第四，本书是写给计算机、软件、自动控制、电子学等专业的研究
生或高年级本科生的。他们已经学习了程序设计、操作系统、计算机原
理等课程，阅读本书可以帮助他们把这些知识联系起来，并深入到一个
新的层次。学会使用调试器来跟踪和分析软件，可以让他们在指令一级
领悟计算机软硬件的工作方式，深入核心，掌握本质，把学到的书本知