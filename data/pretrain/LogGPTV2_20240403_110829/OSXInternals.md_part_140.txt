### 代码优化

```c
void invertAndWrite(IOMemoryDescriptor *buffer, UInt64 *byteBlock) {
    for (UInt64 i = 0; i < buffer->getLength() / 512; ++i) {
        buffer->readBytes(i * 512, (UInt8 *)byteBlock, 512);
        for (UInt64 j = 0; j < 64; ++j) {
            byteBlock[j] = ~(byteBlock[j]);
        }
        buffer->writeBytes(i * 512, (UInt8 *)byteBlock, 512);
    }
    buffer->complete();
}

static void fixBufferUserWrite(IOMemoryDescriptor *bufferR, IOMemoryDescriptor *bufferW) {
    assert(bufferR && bufferW);
    IOByteCount length = bufferR->getLength();
    assert(length % 512 == 0);
    
    length /= 512;
    bufferR->prepare(kIODirectionOut);
    bufferW->prepare(kIODirectionIn);

    UInt64 byteBlock[64];
    for (IOByteCount i = 0; i < length; ++i) {
        bufferR->readBytes(i * 512, (UInt8 *)byteBlock, 512);
        for (IOByteCount j = 0; j < 64; ++j) {
            byteBlock[j] = ~(byteBlock[j]);
        }
        bufferW->writeBytes(i * 512, (UInt8 *)byteBlock, 512);
    }

    bufferW->complete();
    bufferR->complete();
}

static void SCDReadWriteCompletion(void *target, void *parameter, IOReturn status, UInt64 actualByteCount) {
    SimpleCryptoDiskContext *context = (SimpleCryptoDiskContext *)parameter;

    if (context->bufferWO == NULL) { // This was a read
        fixBufferUserRead(context->buffer);
    } else { // This was a write
        context->bufferRO->release();
        context->bufferWO->release();
        IOFree(context->memory, context->size);
    }

    IOStorageCompletion completion = context->completion;
    IOFree(context, sizeof(SimpleCryptoDiskContext));

    if (completion.action) {
        (*completion.action)(completion.target, completion.parameter, status, actualByteCount);
    }
}
```

### 测试 SimpleCryptoDisk 驱动

为了测试 SimpleCryptoDisk 驱动程序，我们将创建一个具有 osxbook_HFS 分区类型的磁盘映像。我们还将创建一个常规的磁盘映像，以便突出显示加密存储和明文存储之间的差异。

首先，让我们创建一个常规的磁盘映像（如图 10.37 所示）。

**图 10.37. 直接从存储介质读取明文存储的内容**

```sh
$ hdiutil create -size 32m -fs HFS+ -volname Clear /tmp/clear.dmg
...
created: /private/tmp/clear.dmg
$ open /tmp/clear.dmg # 挂载 clear.dmg 中的卷
$ echo "Secret Message" > /Volumes/Clear/file.txt
$ hdiutil detach /Volumes/Clear # 卸载卷
...
$ strings /tmp/clear.dmg
...
Secret Message
...
```

如图 10.37 所示，通过访问原始存储介质，我们可以看到在明文卷上创建的文本文件的内容。接下来，让我们尝试对加密磁盘进行相同的操作（如图 10.38 所示）。

**图 10.38. 使用 SimpleCryptoDisk 过滤方案驱动程序进行加密存储**

```sh
$ hdiutil create -size 32m -partitionType osxbook_HFS /tmp/crypto.dmg
...
created: /private/tmp/crypto.dmg
$ sudo kextload -v SimpleCryptoDisk.kext
kextload: extension SimpleCryptoDisk.kext appears to be valid
kextload: loading extension SimpleCryptoDisk.kext
kextload: SimpleCryptoDisk.kext loaded successfully
kextload: loading personalities named:
kextload: SimpleCryptoDisk
kextload: sending 1 personality to the kernel
kextload: matching started for SimpleCryptoDisk.kext
$ hdiutil attach -nomount /tmp/crypto.dmg
/dev/disk10 Apple_partition_scheme
/dev/disk10s1 Apple_partition_map
/dev/disk10s2 osxbook_HFS
/dev/disk10s2s1 Apple_HFS
$ newfs_hfs -v Crypto /dev/rdisk10s2s1
Initialized /dev/rdisk10s2s1 as a 32 MB HFS Plus Volume
$ hdiutil detach disk10
...
"disk10" ejected.
$ open /tmp/crypto.dmg
$ echo "Secret Message" > /Volumes/Crypto/file.txt
$ cat /Volumes/Crypto/file.txt
Secret Message
$ hdiutil detach /Volumes/Crypto
$ strings /tmp/crypto.dmg
# 明文消息未被看到
```

### 内核调试

#### 10.8.1. 内核恐慌

当发生内核恐慌时，内核会根据是否启用了内核调试而采取不同的操作。默认情况下，内核调试是禁用的，在这种情况下，内核会显示一个恐慌用户界面，指示用户重新启动计算机。我们可以在第 5.6 节中看到如何自定义和测试此用户界面。可以通过设置内核的 `debug` 启动参数中的适当位来启用各种内核调试选项。表 10.41 列出了该参数的详细信息。典型的 `debug` 设置为 `0x144`，这是 `DB_LOG_PI_SCRN`（禁用恐慌用户界面）、`DB_ARP`（允许内核调试器 nub 使用 ARP）和 `DB_NMI`（启用 NMI 生成支持）的按位或。使用此设置，内核会在屏幕上转储内核恐慌信息并等待调试器连接。图 10.39 显示了一个内核恐慌转储的示例，以及生成转储所涉及的函数。该恐慌对应于内核中空指针被解除引用的情况。

#### 10.8.2. 远程核心转储

Mac OS X 内核支持远程核心转储，其中一个 Mac OS X 系统可以将核心转储发送到另一个系统，后者运行远程内核核心转储服务器（`/usr/libexec/kdumpd`），也称为恐慌服务器。`kdumpd` 源自 BSD 的 `tftp` 程序。它监听 UDP 端口号 1069，这是内核调试协议（KDP）实现中硬编码的。它应该以低权限用户身份执行，例如“nobody”。用于存储接收的核心文件的目录作为参数指定给 `kdumpd`。

单个恐慌服务器可以从多个系统接收核心转储文件和恐慌日志。

目标内核发送的核心转储文件名使用字符串 `"core---"` 作为模板，其中 `<IP>` 是发送者的 IP 地址（点分十进制格式），`<time>` 是绝对时间值（由 `mach_absolute_time()` 报告）的较低 32 位的十六进制表示。注意，内核可以同时向 `kdumpd` 发送核心转储文件和恐慌日志。以下是一个目标机器在向 `kdumpd` 发送核心转储文件时打印的消息示例：

```sh
Entering system dump routine
Attempting connection to panic server configured at IP 10.0.0.1
Routing via router MAC address xx:xx:xx:xx:xx:xx
Kernel map size is 725536768
Sending write request for core-xnu-792-10.0.0.2-4104e078
```

要启用向恐慌服务器发送核心转储，需要通过 `_panicd_ip` 启动参数为目标内核指定后者的 IP 地址。此外，必须设置 `debug` 参数中的适当位——特别是，必须设置 `DB_KERN_DUMP_ON_PANIC`（`0x400`）位以在恐慌时触发核心转储。此外，还可以设置 `DB_KERN_DUMP_ON_NMI`（`0x800`）位以在不引发内核恐慌的情况下在 NMI 上触发核心转储。

```sh
$ sudo nvram boot-args="-v debug=0xd44 panicd_ip=10.0.0.1"
```

在将核心转储传输到恐慌服务器时有一些注意事项，例如：
- 运行 `kdumpd` 的系统必须具有静态 IP 地址。
- 当前实现中，远程核心转储本质上是不安全的，因为内核内存通过网络传输。
- 运行 `kdumpd` 的系统必须有足够的可用磁盘空间来容纳传入的核心转储。

#### 10.8.3. 日志记录

日志记录是软件调试的重要组成部分，无论是内核级还是用户级软件。Mac OS X 内核提供了几种机制，内核扩展可以使用这些机制来记录消息。Mac OS X 系统日志设施 Apple System Logger (ASL) 支持多种调度日志消息的方法。图 10.40 显示了 Mac OS X 中的日志记录概述。

以下是内核中主要的日志记录函数：
- `IOLog()` 是 I/O Kit 中首选的日志记录函数。它生成一个目的地为系统日志文件且可能为控制台的消息。它是 `_doprnt()` 的包装器。通常，`IOLog()` 不是同步的，这意味着在内核恐慌时可能会错过日志消息。但是，通过在 `io` 启动参数中设置 `kIOLogSynchronous` 位（`0x00200000`），可以使控制台输出同步。`iokit/IOKit/IOKitDebug.h` 文件列出了可以在 `io` 参数中设置以启用特定类型 I/O Kit 日志消息的其他位。
- `printf()` 类似于 `IOLog()`，但可以在 I/O Kit 之外使用。它是 `_doprnt()` 的另一个包装器，但它还在调用 `_doprnt()` 之前和之后分别调用 `disable_preemption()` 和 `enable_preemption()`。
- `OSReportWithBacktrace()` 调用 `OSBacktrace()` 生成堆栈回溯，并使用 `printf()` 打印它。它还调用 `kmod_dump_log()` 打印与回溯相关的可加载内核模块及其依赖项。
- `kprintf()` 是一个同步的日志记录函数，其输出必须通过在 `debug` 启动参数中设置 `DB_KPRT`（`0x8`）位来启用。其输出可以通过串行连接（前提是有一个本机串行端口）或 FireWire 连接发送。后者需要在生成消息的系统上安装 `AppleFireWireKPrintf` 内核扩展，并在用于查看消息的系统上运行 `FireWireLogger` 程序。
- `conslog_putc()` 调用 `log_putc()` 将消息追加到全局消息缓冲区 `msgbuf` 结构中，我们在第 5.3.3 节中已经见过这个结构。

用户空间系统日志守护进程 `/usr/sbin/syslogd` 通过读取内核日志设备 `/dev/klog` 来检索来自内核的日志消息。在文件系统初始化期间，设备文件系统层（devfs）被初始化。作为 devfs 初始化的一部分，包括 `/dev/klog` 在内的几个内置的 BSD 风格设备被初始化。`/dev/klog` 的设备切换结构（`struct cdevsw`）包含 `logopen()`、`logread()` 和 `logselect()` 作为打开、读取和选择函数。`syslogd` 使用 `select()` 系统调用来检查日志设备是否准备好读取。如图 10.41 所示，内核定期通过调用 `klogwakeup()` 唤醒等待日志设备的线程。

#### 10.8.4. 使用 GDB 进行调试

正如我们在第 6.8.1 节中讨论的那样，Mac OS X 支持使用 GDB 通过以太网或 FireWire 连接进行双机内核调试。考虑基于以太网的调试情况。我们之前看到，支持此类调试的网络驱动程序提供轮询模式的发送和接收数据包的函数 `sendPacket()` 和 `receivePacket()`。`IONetworkController` 类提供了 `attachDebuggerClient()` 方法来分配一个 `IOKernelDebugger` 对象并将其附加为客户机，从而创建一个调试器客户端 nub。`IOKernelDebugger` 实例调用 KDP 层函数 `kdp_register_send_receive()` 来注册内部的发送和接收调度函数，这些函数在调试器活动时调用轮询模式方法。此后，KDP 模块可以发送和接收协议数据包。图 10.42 显示了与基于以太网和 FireWire 的调试相关的 I/O Kit 堆栈的部分。

Apple 提供了一个名为 Kernel Debug Kit 的包，其中包含 Mac OS X 内核和几个 I/O Kit 家族内核扩展的调试版本。此包中的可执行文件用于使用 GDB 进行远程调试，它们包含完整的符号信息。请注意，包中包含的内核是发布内核，即它是在 `RELEASE_xxx` 配置下编译的，而不是在 `DEBUG_xxx` 配置下编译的。

有几种方法可以导致内核停止正常执行并等待远程 GDB 连接。内核恐慌是一种方式，但也有可能通过生成 NMI 甚至调用 `Debugger()` 函数来调用调试器。