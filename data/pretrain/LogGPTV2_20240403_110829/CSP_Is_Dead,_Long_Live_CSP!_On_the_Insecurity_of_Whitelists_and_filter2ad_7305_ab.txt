preventing the exploitation of XSS, as it is the only class of
vulnerabilities which both can be mitigated by CSP and is
commonly inadvertently introduced by developers.
2.2.2 Defending against XSS
The security beneﬁt of CSP is overwhelmingly concen-
trated in two directives that prevent script execution: script-
src and object-src (plugins such as Adobe Flash can exe-
cute JavaScript in the context of their embedding page), or
default-src in their absence.
An attacker who can inject and execute scripts is able to
bypass the restrictions of all other directives. As a result,
applications that use a policy without safe script-src and
object-src source lists gain very limited beneﬁt from CSP.
For additional directives to provide a meaningful security
beneﬁt, the site must ﬁrst use a safe policy that success-
fully prevents script execution. In general, non-script direc-
tives might serve as a defense against some post-XSS [38] or
“scriptless” [13] attacks, such as exﬁltrating data by hijack-
ing form URIs, or phishing by spooﬁng the page UI using
attacker-controlled styles, but they improve security only if
CSP is already eﬀective as a protection against XSS.
To achieve the primary goal of preventing unwanted script
execution, a policy must meet three requirements:
• The policy must deﬁne both the script-src and object-
src directives (or default-src in their absence)
Listing 3: CSP bypass due to missing directives
• The script-src source list cannot contain the unsafe-
inline keyword (unless accompanied by a nonce) or
allow data: URIs.
Listing 4: Bypass for unsafe-inline and data: URIs
• The script-src and object-src source lists cannot
contain any endpoints that allow an attacker to con-
trol security-relevant parts of the response or contain
unsafe libraries.
{{ executeEvilCodeInUnsafeSandbox() }} 
Listing 5: XSS CSP whitelist bypasses
If any of these conditions is not met, the policy is not eﬀec-
tive at preventing script execution and consequently oﬀers
no protection from content-injection attacks.
We now turn to an analysis of the types of endpoints that,
when hosted on a whitelisted origin, allow an attacker to
bypass CSP protections against script execution.
2.3 Script execution bypasses
One of the underlying assumptions of CSP is that domains
whitelisted in the policy only serve safe content. Hence, an
attacker should not be able to inject valid JavaScript in the
responses of such whitelisted origins.
JavaScript with user-controlled callbacks
In the following subsections, we demonstrate that in prac-
tice, modern web applications tend to utilize several patterns
that violate this assumption.
2.3.1
Although many JavaScript resources are static, in some
situations a developer may want to dynamically generate
parts of a script by allowing a request parameter to set a
function to execute when the script is loaded. For example,
JSONP interfaces that wrap a JavaScript object in a callback
function are typically used to allow the loading of API data,
by sourcing it as a script from a third-party domain:
/* API response */
alert(document.domain);//{"var": "data", ...});
Listing 6: Loading JSONP data
Unfortunately, if a domain whitelisted in the policy con-
tains a JSONP interface, an attacker can use it to execute
arbitrary JavaScript functions in the context of a vulner-
able page by loading the endpoint as a  with an
attacker-controlled callback [39]. If attackers can control the
entire beginning of the JSONP response, they gain uncon-
strained script execution. If the character set is restricted
and thus only the function name is controllable, they can use
techniques such as SOME [12] which are often qualitatively
equivalent to full, unconstrained XSS.
2.3.2 Reﬂection or symbolic execution
Restrictions on CSP script execution can be (often acci-
dentally) circumvented by a cooperating script in a whitelisted
origin. For example, a script can use reﬂection to look up
and invoke a function in the global scope, as depicted in
Listing 7.
// Can be used to invoke window.* functions with
// arbitrary arguments via markup such as:
// 
var array =
document.getElementById(’cmd’).value.split(’,’);
window[array[0]].apply(this, array.slice(1));
Listing 7: JavaScript reﬂection gadget
Such JavaScript gadgets would normally not compromise
security, because their arguments are under the control of
the developer whose page loads the script. A problem arises
when such scripts obtain data by inspecting the DOM, which
can be partly attacker-controlled if the application has a
markup-injection bug – an attacker can then execute ar-
bitrary functions, possibly with unconstrained arguments,
bypassing CSP.
A practical example is the behavior of the popular An-
gularJS library, which allows the creation of single-page ap-
plications with powerful templating syntax and client-side
template evaluation (Listing 8).
{{ 1000 - 1 }}
Listing 8: Bypassing CSP by loading AngularJS
To achieve its goal, AngularJS parses templates in des-
ignated parts of the page and executes them. The ability
to control templates parsed by Angular can be considered
equivalent to executing arbitrary JavaScript. By default,
Angular uses the eval() function to evalute sandbox ex-
pressions, which is prohibited by CSP policies without the
unsafe-eval keyword. However, Angular also ships with a
“CSP compatibility mode” (ng-csp), in which expressions
are evaluated by performing symbolic execution, making it
possible to call arbitrary JavaScript code despite CSP.
As a consequence, an attacker who can load the Angular
library from a domain whitelisted in the CSP can use it as
a JS gadget to bypass script execution protections. This is
possible even if the attacked application doesn’t make use
of Angular itself – the only requirement is for the Angular
library to be hosted on one of the domains whitelisted in
script-src. Thus, the mere presence of any Angular library
in a trusted domain subverts the protections oﬀered by CSP.
2.3.3 Unexpected JavaScript-parseable responses
For compatibility reasons, web browsers are generally le-
nient about checking whether the MIME type of a response
matches the page context from which the response is used.
Any response that can be parsed as JavaScript without syn-
tax errors – and in which attacker-controlled data appears
before the ﬁrst runtime error – can lead to script execution.
CSP can thus be bypassed with the following types of re-
sponses:
• Comma-separated value (CSV) data with partially
attacker-controlled contents:
Name,Value
alert(1),234
• Error messages echoing request parameters:
Error: alert(1)// not found.
• User ﬁle uploads, even if their contents are properly
HTML-escaped or sanitized
Thus, if a whitelisted domain hosts any endpoints with
such properties, an attacker can “forge” script responses and
execute arbitrary JavaScript. Similar concerns apply to the
object-src whitelist: if an attacker can upload a resource
that will be interpreted as a Flash object to a domain white-
listed for object-src, script execution will be possible.
It is important to note that none of the above bypass pat-
terns pose a direct security risk, so developers typically have
no reason to change them. However, when an application
adopts CSP such endpoints become a security problem be-
cause they allow a policy to be bypassed.
More problematically, this issue aﬀects not only the ap-
plication’s origin, but also all other domains whitelisted in
script-src. These domains often include trusted third par-
ties and CDNs that might not be aware of CSP – and thus
have no reason to identify and ﬁx behaviors that allow CSP
bypasses.
2.3.4 Path restrictions as a security mechanism
To address issues about insuﬃcient granularity of domain-
based source lists, CSP2 introduced the ability to constrain
whitelists to speciﬁc paths on a given domain (e.g. exam-
ple.org/foo/bar). Developers now have the option to des-
ignate speciﬁc directories on a trusted domain for loading
scripts and other resources.
Unfortunately, as a result of a privacy concern related to
the handling of cross-origin redirects [15], this restriction has
been relaxed. If a source list entry contains a redirector (an
endpoint returning a 30x response that points to another
location), that redirector can be used to successfully load
resources from whitelisted origins even if they do not match
the path allowed in the policy.
Content-Security-Policy: script-src example.org
partially-trusted.org/foo/bar.js
// Allows loading of untrusted resources via:
Listing 9: Bypassing CSP path restrictions
Because of this behavior and the prevalence of redirectors
in complex web applications (often used in security contexts
such as OAuth and to prevent referer leaks), path restric-
tions cannot be relied upon as a security mechanism in CSP.
We have shown how some seemingly benign programming
patterns allow a content-injection attacker to bypass script
execution protections oﬀered by CSP, and in turn remove
any anti-XSS beneﬁt of a policy – its primary focus. We
now turn to analyzing the consequences of such bypasses for
real-world policies.
3. EMPIRICAL STUDY ON CSP
The goal of our work is to investigate the prevalence and
protection capabilities oﬀered by CSP in practice. In order
to do so, we conducted a large-scale empirical study to col-
lect and analyze real-world CSP policies. In this section, we
describe the methodology and the results of this study.
3.1 Research Questions
Our study is divided into two major parts. First, we aim
to understand how CSP is currently used; second, we want
to analyze the security properties of the deployed policies.
3.1.1 How is CSP used on the web?
As previous research [36, 27] has shown, the CSP adop-
tion rate lags behind the expectations of the security com-
munity. Hence, in the ﬁrst part of our study we aim to shed
light on the current state of CSP, in order to understand
how widely CSP is used. Furthermore, we’d like to under-
stand whether CSP is used exclusively for XSS protection
or whether other prevalent use cases exist. Since many ma-
jor web applications need to be changed to be compatible
with CSP, it is unclear whether CSP policies in the wild are
already used for XSS protection, or are in a rather experi-
mental state in which enforcement is still disabled. As such,
we are interested in the ratio between policies in enforcing
mode and policies in report-only mode. In the second part
of this study, we will use the enforced policies to conduct
our security analysis.
3.1.2 How secure are real-world CSP policies?
As described in Section 2, there are quite a few pitfalls
that might render a policy’s protection capabilities ineﬀec-
tive. Avoiding such mistakes in policy creation requires ex-
tensive knowledge. In the second part of our study, we aim
to identify how many policies are aﬀected by mistakes and
thus can be bypassed. We also investigate which kinds of
mistakes are the most prevalent.
Additionally, we aim to analyze the security of strict poli-
cies, and of whitelists in particular.
3.2 Data set
In order to answer the questions posed above, we used
a data set that is representative of the web as a whole: a
search index consisting of about 6.5 petabytes of data. The
index contains the response headers and bodies of pages on
the public Internet crawled within the past 20 days by the
Google search crawling infrastructure.
3.3 Methodology
In the following subsections, we outline the methodology
used to extract and analyze Content Security Policies from
the given data set.
3.3.1 Detecting Content Security Policies
In order to extract CSP policies from the data set, we
wrote a MapReduce job. For each URL in the index with a
CSP policy, we extracted the following tuple:
(U RL, CSP, isCSP ReportOnly)
Based on this list of tuples, we then extracted a set of
unique policies for each host, eﬀectively removing duplicate
policies on a per-host basis.
3.3.2 Normalizing CSP policies
Several websites automatically generate CSP policies that
include random nonces, hashes, or report URIs. In this pro-
cess, some generation routines randomly switch the order
of certain directives or directive values.
In order to make
the policies in our data set comparable, we ﬁrst normalized
the policies. We implemented a CSP parser as described in
the speciﬁcation1 and stored a parsed copy of every CSP
for later in-depth evaluation. For each of the policies, we
applied the following normalization steps:
• First, we removed superﬂuous white spaces and re-
placed all variable values, such as nonces and report
URIs, with ﬁxed placeholders.
• Second, we ordered and deduplicated all directives and
directive values.
3.3.3 Deduplicating CSPs
During our analysis, we noticed that oﬀ-the-shelf web ap-
plications like message boards and e-commerce platforms are
spread across many diﬀerent hosts, while deploying the exact
same CSP policy. To address this, we decided to deduplicate
the CSPs, based on the normalized policy string. Thus, our
ﬁnal data set contains a single entry for each unique policy
that we found across the web.
1https://www.w3.org/TR/CSP2/#policy-parsing
Identifying XSS-protection policies
3.3.4
As described earlier, CSP supports many directives that
are not primarily meant for defending against XSS, such as
img-src and frame-ancestors. Since our study aims to as-
sess the security of a policy in terms of its XSS mitigation
capabilities, we needed a way to distinguish policies that
attempt to defend against XSS from all other policies. Ac-
cording to our deﬁnition, an XSS-protection policy must be
in enforcing mode and must contain at least one of the fol-
lowing two directives: script-src or default-src.
3.3.5 Assessing the security of policies
In order to assess whether a CSP policy can be bypassed to
execute attacker-controlled scripts, we conduct the following
checks:
1. Usage of ’unsafe-inline’: A policy with the
’unsafe-inline’ keyword is inherently insecure if it
doesn’t also specify a script nonce. Such policies are
ﬂagged as bypassable.
2. Missing object-src: A policy that speciﬁes
script-src but lacks the object-src directive (and
does not set default-src) allows script execution by
injecting plugin resources, as shown in Listing 3.
3. Use of wildcards in whitelists: A policy is also
insecure if a security-relevant whitelist contains a gen-
eral wildcard or a URI scheme2, allowing the inclusion
of content from arbitrary hosts.
4. Unsafe origin in whitelists: When a domain host-
ing an endpoint with a CSP bypass is whitelisted, the
protective capabilities of CSP are rendered void, as
discussed in Section 2.3. In order to assess the secu-
rity of policies, we compiled a list of hosts with such
bypassable endpoints. If a whitelist entry of a given
policy appears in this list, we ﬂag the policy as bypass-
able. In the next section, we outline how we created
this list.
3.3.6
Identifying domains with endpoints allowing
CSP byasses
In order to identify domains that are insecure for whitelist-
ing in CSP, we extracted pages from the search index that
employ one of the practices described in Section 2.2. As
noted previously, hosting the AngularJS library and expos-
ing JSONP endpoints are two of many ways to create CSP
bypasses.
JSONP endpoints:
In order to identify JSONP endpoints, we extracted all
URLs from the search index that contain a GET parameter
with one of the following names: callback, cb, json, jsonp.
Subsequently, we veriﬁed the resulting data set by changing
the value of the corresponding parameter, requesting the
resource, and checking whether the changed value was re-
ﬂected in the beginning of the response. We checked that
all endpoints allow full XSS or a SOME attack by verifying
the allowed characters in the response. According to our
data 39 % of the JSONP bypasses allow arbitrary JS exe-
cution while the rest allows arbitrary calls to existing func-
tions via the SOME attack, which in real world applications
is considered equally as harmful as full XSS [12].
2http:, https: or data:
of a page, is used in only 8.1 % of policies. Furthermore, out
of the 26,011 unique policies, only 9.96 % are in report-only
mode, whereas the other 90.04 % are switched to enforcing
mode. In these numbers, we see clear evidence that CSP is
meant as an XSS protection.
3.4.3
The goal of our analysis was to ﬁnd out whether CSP in
its current form can be used to eﬀectively protect from XSS
ﬂaws.
In order to do so, we compiled three distinct data
sets:
Security analysis: overview
1. All policies: This data set contains all unique CSP
policies, both in report-only and enforcing mode.
2. XSS-protection policies: This data set contains all
enforcing policies that contain at least one directive
for protecting against XSS (script-src, object-src
or default-src). This data set excludes all policies
for non-XSS-protection use cases.
3. Strict XSS-protection policies: Finally, we com-
piled a set of the strongest CSP policies in the overall
data set. These policies are strict in the sense that they
do not include any inherently unsafe directive values
such as ’unsafe-inline’, a URI scheme or the general
* wildcard for whitelisting all hosts.
Security of CSP in general
Table 2 presents the ﬁnal results. The results for each
data set are presented in a single row of the table. In the
following sections, we discuss these results in detail.
3.4.4
In order to assess the security properties of the detected
CSP policies, we automatically applied the checks described
in Section 2.2. Based on the analysis of the conﬁguration and