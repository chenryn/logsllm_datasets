    ```
4.  现在，使用您最喜欢的文本编辑器打开【T0:
    ```
    vim index.html 
    ```
5.  Add the following content to the `index.html` file, save it, and exit from `index.html`:
    ```
        Welcome to The Docker Workshop
    ```
    这个 HTML 文件将输出`Welcome to The Docker Workshop`作为页面的标题，输出`logo.png`(我们将在 Docker 映像构建过程中下载)作为映像。您已经将`logo.png`映像的大小定义为`350`的高度和`500`的宽度。
6.  在`workdir-copy-add-exercise`目录下，创建一个名为`Dockerfile` :
    ```
    touch Dockerfile
    ```
    的文件
7.  现在，使用您最喜欢的文本编辑器打开【T0:
    ```
    vim Dockerfile
    ```
8.  Add the following content to the `Dockerfile`, save it, and exit from the `Dockerfile`:
    ```
    # WORKDIR, COPY and ADD example
    FROM ubuntu:latest 
    RUN apt-get update && apt-get install apache2 -y 
    WORKDIR /var/www/html/
    COPY index.html .
    ADD https://www.docker.com/sites/default/files/d8/2019-07/  Moby-logo.png ./logo.png
    CMD ["ls"]
    ```
    这个`Dockerfile`首先将 ubuntu 映像定义为父映像。下一行是`RUN`指令，将执行`apt-get update`更新包列表，`apt-get install apache2 -y`安装 Apache HTTP 服务器。然后，将`/var/www/html/`设置为工作目录。接下来，将我们在*步骤 3* 中创建的`index.html`文件复制到 Docker 映像中。然后，使用`ADD`指令将 docker 徽标从[https://www . Docker . com/sites/default/files/D8/2019-07/莫比-logo.png](https://www.docker.com/sites/default/files/d8/2019-07/Moby-logo.png) 下载到 Docker 映像中。最后一步是使用`ls`命令打印`/var/www/html/`目录的内容。
9.  Now, build the Docker image with the tag of `workdir-copy-add`:
    ```
    $ docker image build -t workdir-copy-add .
    ```
    您将观察到映像已成功构建并标记为`latest`，因为我们没有明确标记我们的映像:
    ![Figure 2.7: Building the Docker image using WORKDIR, COPY, and ADD directives ](img/B15021_02_07.jpg)
    图 2.7:使用工作目录、复制和添加指令构建 Docker 映像
10.  Execute the `docker container run` command to start a new container from the Docker image that you built in the previous step:
    ```
    $ docker container run workdir-copy-add
    ```
    从输出中我们可以看到，`index.html`和`logo.png`文件都在`/var/www/html/`目录中:
    ```
    index.html
    logo.png
    ```
在本练习中，我们观察了`WORKDIR`、`ADD`和`COPY`指令如何与 Docker 一起工作。在下一节中，我们将讨论`USER`指令。
## 用户指令
Docker 将使用根用户作为 Docker 容器的默认用户。我们可以使用`USER`指令来更改这个默认行为，并指定一个非根用户作为 Docker 容器的默认用户。这是通过以非特权用户的身份运行 Docker 容器来提高安全性的好方法。用`USER`指令指定的用户名将用于运行`Dockerfile`中所有后续的`RUN`、`CMD`和`ENTRYPOINT`指令。
`USER`指令采用以下格式:
```
USER 
```
除了用户名，我们还可以指定可选的组名来运行 Docker 容器:
```
USER :
```
我们需要确保``和``值是有效的用户名和组名。否则，Docker 守护程序将在尝试运行容器时引发错误:
```
docker: Error response from daemon: unable to find user my_user: 
        no matching entries in passwd file.
```
现在，让我们在下一个练习中尝试使用`USER`指令。
## 练习 2.05:在文档中使用用户指令
您的经理要求您创建一个 Docker 映像来运行 Apache 网络服务器。出于安全原因，他特别要求您在运行 Docker 容器时使用非根用户。在本练习中，您将使用`Dockerfile`中的`USER`指令来设置默认用户。您将安装 Apache 网络服务器并将用户更改为`www-data`。最后，您将执行`whoami`命令，通过打印用户名来验证当前用户:
注意
`www-data`用户是 Ubuntu 上 Apache web 服务器的默认用户。
1.  为本练习创建一个名为`user-exercise`的新目录:
    ```
    mkdir user-exercise
    ```
2.  导航至新创建的`user-exercise`目录:
    ```
    cd user-exercise
    ```
3.  在`user-exercise`目录下，创建一个名为`Dockerfile` :
    ```
    touch Dockerfile
    ```
    的文件
4.  现在，使用您最喜欢的文本编辑器打开【T0:
    ```
    vim Dockerfile
    ```
5.  Add the following content to the `Dockerfile`, save it, and exit from the `Dockerfile`:
    ```
    # USER example
    FROM ubuntu
    RUN apt-get update && apt-get install apache2 -y 
    USER www-data
    CMD ["whoami"]
    ```
    这个`Dockerfile`首先将 Ubuntu 映像定义为父映像。下一行是`RUN`指令，将执行`apt-get update`更新包列表，`apt-get install apache2 -y`安装 Apache HTTP 服务器。接下来，使用`USER`指令将当前用户更改为`www-data`用户。最后，您有`CMD`指令，它执行`whoami`命令，该命令将打印当前用户的用户名。
6.  Build the Docker image:
    ```
    $ docker image build -t user .
    ```
    输出应如下所示:
    ![Figure 2.8: Building the user Docker image ](img/B15021_02_08.jpg)
    图 2.8:构建用户 Docker 映像
7.  Now, execute the `docker container` run command to start a new container from the Docker image that we built in the previous step:
    ```
    $ docker container run user
    ```
    从下面的输出可以看出，`www-data`是与 Docker 容器关联的当前用户:
    ```
    www-data
    ```
在本练习中，我们在`Dockerfile`中实现了`USER`指令，将`www-data`用户设置为 Docker 映像的默认用户。
在下一节中，我们将讨论`VOLUME`指令。
## 体积指令
在 Docker 中，Docker 容器生成和使用的数据(例如，文件、可执行文件)将存储在容器文件系统中。当我们删除容器时，所有的数据都将丢失。为了克服这个问题，Docker 提出了卷的概念。卷用于保存数据并在容器之间共享数据。我们可以使用`Dockerfile`中的`VOLUME`指令来创建 Docker 卷。一旦在 Docker 容器中创建了一个`VOLUME`，就会在底层主机中创建一个映射目录。对 Docker 容器的卷装载的所有文件更改都将被复制到主机的映射目录。
`VOLUME`指令一般以 JSON 数组为参数:
```
VOLUME ["/path/to/volume"]
```
或者，我们可以指定一个包含多个路径的普通字符串:
```
VOLUME /path/to/volume1 /path/to/volume2
```
我们可以使用`docker container inspect `命令查看容器中可用的体积。docker 容器检查命令的输出 JSON 将打印类似于以下内容的卷信息:
```
"Mounts": [
    {
        "Type": "volume",
        "Name": "77db32d66407a554bd0dbdf3950671b658b6233c509ea
ed9f5c2a589fea268fe",
        "Source": "/var/lib/docker/volumes/77db32d66407a554bd0
dbdf3950671b658b6233c509eaed9f5c2a589fea268fe/_data",
        "Destination": "/path/to/volume",
        "Driver": "local",
        "Mode": "",
        "RW": true,
        "Propagation": ""
    }
],
```
根据前面的输出，Docker 为该卷指定了一个唯一的名称。此外，输出中还提到了卷的源路径和目标路径。
此外，我们可以执行`docker volume inspect `命令来显示与卷相关的详细信息:
```
[
    {
        "CreatedAt": "2019-12-28T12:52:52+05:30",
        "Driver": "local",
        "Labels": null,
        "Mountpoint": "/var/lib/docker/volumes/77db32d66407a554
bd0dbdf3950671b658b6233c509eaed9f5c2a589fea268fe/_data",
        "Name": "77db32d66407a554bd0dbdf3950671b658b6233c509eae
d9f5c2a589fea268fe",
        "Options": null,
        "Scope": "local"
    }
]
```
这也类似于前面的输出，具有相同的唯一名称和卷的装载路径。
在下一个练习中，我们将学习如何在`Dockerfile`中使用`VOLUME`指令。
## 练习 2.06:在 Dockerfile 中使用 VOLUME 指令
在本练习中，您将设置一个 Docker 容器来运行 Apache 网络服务器。但是，您不希望在 Docker 容器出现故障时丢失 Apache 日志文件。作为一个解决方案，您已经决定通过将 Apache 日志路径装载到底层 Docker 主机来保留日志文件:
1.  创建一个名为`volume-exercise` :
    ```
    mkdir volume-exercise
    ```
    的新目录
2.  导航至新创建的`volume-exercise`目录:
    ```
    cd volume-exercise
    ```
3.  在`volume-exercise`目录下，创建一个名为`Dockerfile` :
    ```
    touch Dockerfile
    ```
    的文件
4.  现在，使用您最喜欢的文本编辑器打开【T0:
    ```
    vim Dockerfile
    ```
5.  Add the following content to the `Dockerfile`, save it, and exit from the `Dockerfile`:
    ```
    # VOLUME example
    FROM ubuntu