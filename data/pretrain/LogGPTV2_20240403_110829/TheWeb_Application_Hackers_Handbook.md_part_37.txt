by simply passing them to the GET request handler. In this situation, platform-
level controls that just deny certain specifi ed HTTP methods can be bypassed
by specifying an arbitrary invalid HTTP method in the request.
Chapter 18 contains a specifi c example of this type of vulnerability arising
in a web application platform product.
Insecure Access Control Methods
Some applications employ a fundamentally insecure access control model in
which access control decisions are made on the basis of request parameters
submitted by the client, or other conditions that are within an attacker’s control.
Parameter-Based Access Control
In some versions of this model, the application determines a user’s role or access
level at the time of login and from this point onward transmits this information
via the client in a hidden form fi eld, cookie, or preset query string parameter (see
Chapter 5). When each subsequent request is processed, the application reads
this request parameter and decides what access to grant the user accordingly.
For example, an administrator using the application may see URLs like the
following:
https://wahh-app.com/login/home.jsp?admin=true
The URLs seen by ordinary users contain a different parameter, or none at all.
Any user who is aware of the parameter assigned to administrators can simply
set it in his own requests and thereby gain access to administrative functions.
cc0088..iinndddd 226655 88//1199//22001111 1122::0088::3311 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 266
266 Chapter 8 n Attacking Access Controls
This type of access control may sometimes be diffi cult to detect without
actually using the application as a high-privileged user and identifying what
requests are made. The techniques described in Chapter 4 for discovering hid-
den request parameters may be successful in discovering the mechanism when
working only as an ordinary user.
Referer-Based Access Control
In other unsafe access control models, the application uses the HTTP Referer
header as the basis for making access control decisions. For example, an appli-
cation may strictly control access to the main administrative menu based on
a user’s privileges. But when a user makes a request for an individual admin-
istrative function, the application may simply check whether this request was
referred from the administrative menu page. It might assume that the user must
have accessed that page and therefore has the required privileges. This model
is fundamentally broken, of course, because the Referer header is completely
under the user’s control and can be set to any value.
Location-Based Access Control
Many businesses have a regulatory or business requirement to restrict access to
resources depending on the user’s geographic location. These are not limited
to the fi nancial sector but include news services and others. In these situations,
a company may employ various methods to locate the user, the most common
of which is geolocation of the user’s current IP address.
Location-based access controls are relatively easy for an attacker to circum-
vent. Here are some common methods of bypassing them:
n Using a web proxy that is based in the required location
n Using a VPN that terminates in the required location
n Using a mobile device that supports data roaming
n Direct manipulation of client-side mechanisms for geolocation
Attacking Access Controls
Before starting to probe the application to detect any actual access control
vulnerabilities, you should take a moment to review the results of your appli-
cation mapping exercises (see Chapter 4). You need to understand what the
application’s actual requirements are in terms of access control, and therefore
where it will probably be most fruitful to focus your attention.
cc0088..iinndddd 226666 88//1199//22001111 1122::0088::3311 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 267
Chapter 8 n Attacking Access Controls 267
HACK STEPS
Here are some questions to consider when examining an application’s access
controls:
1. Do application functions give individual users access to a particular
subset of data that belongs to them?
2. Are there different levels of user, such as managers, supervisors, guests,
and so on, who are granted access to different functions?
3. Do administrators use functionality that is built into the same application
to configure and monitor it?
4. What functions or data resources within the application have you identi-
fied that would most likely enable you to escalate your current privileges?
5. Are there any identifiers (by way of URL parameters of POST body mes-
sage) that signal a parameter is being used to track access levels?
Testing with Different User Accounts
The easiest and most effective way to test the effectiveness of an application’s
access controls is to access the application using different accounts. That way
you can determine whether resources and functionality that can be accessed
legitimately by one account can be accessed illegitimately by another.
HACK STEPS
1. If the application segregates user access to different levels of functional-
ity, first use a powerful account to locate all the available functionality.
Then attempt to access this using a lower-privileged account to test for
vertical privilege escalation.
2. If the application segregates user access to different resources (such as
documents), use two different user-level accounts to test whether access
controls are effective or whether horizontal privilege escalation is pos-
sible. For example, find a document that can be legitimately accessed by
one user but not by another, and attempt to access it using the second
user’s account — either by requesting the relevant URL or by submitting
the same POST parameters from within the second user’s session.
Testing an application’s access controls thoroughly is a time-consuming
process. Fortunately, some tools can help you automate some of the work involved,
to make your testing quicker and more reliable. This will allow you to focus
on the parts of the task that require human intelligence to perform effectively.
cc0088..iinndddd 226677 88//1199//22001111 1122::0088::3322 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 268
268 Chapter 8 n Attacking Access Controls
Burp Suite lets you map the contents of an application using two different
user contexts. Then you can compare the results to see exactly where the content
accessed by each user is the same or different.
HACK STEPS
1. With Burp configured as your proxy and interception disabled, browse all
the application’s content within one user context. If you are testing verti-
cal access controls, use the higher-privilege account for this.
2. Review the contents of Burp’s site map to ensure that you have identified
all the functionality you want to test. Then use the context menu to select
the “compare site maps” feature.
3. To select the second site map to be compared, you can either load this
from a Burp state file or have Burp dynamically rerequest the first site
map in a new session context. To test horizontal access controls between
users of the same type, you can simply load a state file you saved earlier,
having mapped the application as a different user. For testing vertical
access controls, it is preferable to rerequest the high-privilege site map as
a low-privileged user, because this ensures complete coverage of the
relevant functionality.
4. To rerequest the first site map in a different session, you need to configure
Burp’s session-handling functionality with the details of the low-privilege
user session (for example, by recording a login macro or providing a
specific cookie to be used in requests). This feature is described in more
detail in Chapter 14. You may also need to define suitable scope rules to
prevent Burp from requesting any logout function.
Figure 8-1 shows the results of a simple site map comparison. Its colorized
analysis of the differences between the site maps shows items that have been
added, removed, or modifi ed between the two maps. For modifi ed items, the
table includes a “diff count” column, which is the number of edits required to
modify the item in the fi rst map into the item in the second map. Also, when an
item is selected, the responses are also colorized to show the locations of those
edits within the responses.
Interpreting the results of the site map comparison requires human intelli-
gence and an understanding of the meaning and context of specifi c application
functions. For example, Figure 8-1 shows the responses that are returned to
each user when they view their home page. The two responses show a different
description of the logged-in user, and the administrative user has an additional
menu item. These differences are to be expected, and they are neutral as to the
effectiveness of the application’s access controls, since they concern only
the user interface.
cc0088..iinndddd 226688 88//1199//22001111 1122::0088::3322 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 269
Chapter 8 n Attacking Access Controls 269
Figure 8-1: A site map comparison showing the differences between content that
was accessed in different user contexts
Figure 8-2 shows the response returned when each user requests the top-level
admin page. Here, the administrative user sees a menu of available options, while
the ordinary user sees a “not authorized” message. These differences indicate
that access controls are being applied correctly. Figure 8-3 shows the response
returned when each user requests the “list users” admin function. Here, the
responses are identical, indicating that the application is vulnerable, since the
ordinary user should not have access to this function and does not have any
link to it in his or her user interface.
Simply exploring the site map tree and looking at the number of differences
between items is insuffi cient to evaluate the effectiveness of the application’s
access controls. Two identical responses may indicate a vulnerability (for example,
in an administrative function that discloses sensitive information) or may be
harmless (for example, in an unprotected search function). Conversely, two dif-
ferent responses may still mean that a vulnerability exists (for example, in an
administrative function that returns different content each time it is accessed)
or may be harmless (for example, in a page showing profi le information about
the currently logged-in user). For these reasons, fully automated tools gener-
ally are ineffective at identifying access control vulnerabilities. Using Burp’s
functionality to compare site maps, you can automate as much of the process
as possible, giving you all the information you need in a ready form, and let-
ting you apply your knowledge of the application’s functionality to identify any
actual vulnerabilities.
cc0088..iinndddd 226699 88//1199//22001111 1122::0088::3322 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 270
270 Chapter 8 n Attacking Access Controls
Figure 8-2: The low-privileged user is denied access to the top-level admin page
Figure 8-3: The low-privileged user can access the administrative function to list
application users
cc0088..iinndddd 227700 88//1199//22001111 1122::0088::3322 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 271
Chapter 8 n Attacking Access Controls 271
TRY IT!
http://mdsec.net/auth/462/
http://mdsec.net/auth/468/
Testing Multistage Processes
The approach described in the preceding section — comparing the appli-
cation’s contents when accessed in different user contexts — is ineffective
when testing some multistage processes. Here, to perform an action, the
user typically must make several requests in the correct sequence, with the
application building some state about the user’s actions as he or she does so.
Simply rerequesting each of the items in a site map may fail to replicate the
process correctly, so the attempted action may fail for reasons other than
the use of access controls.
For example, consider an administrative function to add a new application
user. This may involve several steps, including loading the form to add a user,
submitting the form with details of the new user, reviewing these details, and
confi rming the action. In some cases, the application may protect access to the
initial form but fail to protect the page that handles the form submission or
the confi rmation page. The overall process may involve numerous requests,
including redirections, with parameters submitted at earlier stages being
retransmitted later via the client side. Every step of this process needs to
be tested individually, to confi rm whether access controls are being applied
correctly.
TRY IT!
http://mdsec.net/auth/471/
HACK STEPS
1. When an action is carried out in a multistep way, involving several different
requests from client to server, test each request individually to determine
whether access controls have been applied to it. Be sure to include every
request, including form submissions, the following of redirections, and any
unparameterized requests.
2. Try to find any locations where the application effectively assumes that if
you have reached a particular point, you must have arrived via legitimate
means. Try to reach that point in other ways using a lower-privileged
account to detect if any privilege escalation attacks are possible.
Continued
cc0088..iinndddd 227711 88//1199//22001111 1122::0088::3333 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 272
272 Chapter 8 n Attacking Access Controls
HACK STEPS (CONTINUED)
3. One way to perform this testing manually is to walk through a protected
multistage process several times in your browser and use your proxy to
switch the session token supplied in different requests to that of a
less-privileged user.
4. You can often dramatically speed up this process by using the “request in
browser” feature of Burp Suite:
a. Use the higher-privileged account to walk through the entire multi-
stage process.
b. Log in to the application using the lower-privileged account (or none
at all).
c. In the Burp Proxy history, find the sequence of requests that were
made when the multistage process was performed as a more privi-
leged user. For each request in the sequence, select the context menu
item “request in browser in current browser session,” as shown in
Figure 8-4. Paste the provided URL into your browser that is logged in
as the lower-privileged user.
d. If the application lets you, follow through the remainder of the
multi-stage process in the normal way, using your browser.
e. View the result within both the browser and the proxy history to
determine whether it successfully performed the privileged action.
Figure 8-4: Using Burp to request a given item within the current browser session
cc0088..iinndddd 227722 88//1199//22001111 1122::0088::3333 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 273
Chapter 8 n Attacking Access Controls 273
When you select Burp’s “request in browser in current browser session”
feature for a specifi ed request, Burp gives you a unique URL targeting Burp’s
internal web server, which you paste into your browser’s address bar. When
your browser requests this URL, Burp returns a redirection to the originally
specifi ed URL. When your browser follows the redirection, Burp replaces the
request with the one you originally specifi ed, while leaving the Cookie header
intact. If you are testing different user contexts, you can speed up this process.
Log in to several different browsers as different users, and paste the URL into
each browser to see how the request is handled for the user who is logged in
using that browser. (Note that because cookies generally are shared between
different windows of the same browser, you normally will need to use differ-
ent browser products, or browsers on different machines, to perform this test.)
TIP When you are testing multistage processes in different user contexts, it
is sometimes helpful to review the sequences of requests that are made by
different users side-by-side to identify subtle differences that may merit
further investigation.
If you are using separate browsers to access the application as different users,
you can create a different proxy listener in Burp for use by each browser (you
need to update your proxy confi guration in each browser to point to the rel-
evant listener). Then, for each browser, use the context menu on the proxy
history to open a new history window, and set a display fi lter to show only
requests from the relevant proxy listener.
Testing with Limited Access
If you have only one user-level account with which to access the application (or
none at all), additional work needs to be done to test the effectiveness of access
controls. In fact, to perform a fully comprehensive test, further work needs to
be done in any case. Poorly protected functionality may exist that is not explic-
itly linked from the interface of any application user. For example, perhaps old
functionality has not yet been removed, or new functionality has been deployed
but has not yet been published to users.
HACK STEPS
1. Use the content discovery techniques described in Chapter 4 to identify
as much of the application’s functionality as possible. Performing this
exercise as a low-privileged user is often sufficient to both enumerate and
gain direct access to sensitive functionality.
Continued
cc0088..iinndddd 227733 88//1199//22001111 1122::0088::3333 PPMM
Stuttard c08.indd V3 - 07/28/2011 Page 274
274 Chapter 8 n Attacking Access Controls
HACK STEPS (CONTINUED)
2. Where application pages are identified that are likely to present dif-
ferent functionality or links to ordinary and administrative users (for
example, Control Panel or My Home Page), try adding parameters such
asadmin=true to the URL query string and the body of POST requests.
This will help you determine whether this uncovers or gives access to any
additional functionality than your user context has normal access to.
3. Test whether the application uses the Referer header as the basis for
making access control decisions. For key application functions that you
are authorized to access, try removing or modifying the Referer header,
and determine whether your request is still successful. If not, the applica-
tion may be trusting the Referer header in an unsafe way. If you scan
requests using Burp’s active scanner, Burp tries to remove the Referer
header from each request and informs you if this appears to make a sys-
tematic and relevant difference to the application’s response.
4. Review all client-side HTML and scripts to find references to hidden
functionality or functionality that can be manipulated on the client side,
such as script-based user interfaces. Also, decompile all browser exten-
sion components as described in Chapter 5 to discover any references to
server-side functionality.
TRY IT!
http://mdsec.net/auth/477/