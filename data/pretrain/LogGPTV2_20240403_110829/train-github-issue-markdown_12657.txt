    Which compiler are you using (5g, 6g, 8g, gccgo)?
    6g
    Which operating system are you using?
    W7/32b in VirtualBox running in Ubuntu 12.04, x86_64.
    Which version are you using?  (run 'go version')
    go version 1.1.2
    Please provide any additional information below.
    Excerpts from a mail converstaion with the Camlistore developers:
    ----
    We've just got this report:
    http://camlistore.org/issue/214
    so I've tried in winxp in a virtualbox a very basic test like
    https://gist.github.com/mpl/6366649
    and I indeed get an error like:
    kv.Create foo.kv: read foo.kv: Fin de fichier atteinte. (which means EOF)
    ----
    First partial result:
    C:\home\src\github.com\cznic\kv>go test -run TestCreate$
    The problem is here: https://github.com/cznic/exp/blob/master/lldb/xact.go#L211
    The first call to ReadAt(112 bytes at offset 16) at L211, returns
    correctly (0, err) on Linux - the file is only 16 bytes long at that
    moment (that's the kv header). 'err' is such that 'err == io.EOF' is
    true.
    However, on Windows the error is("%T(%#v)"):
    *os.PathError(&os.PathError{Op:"read", Path:"_testdata/tempname",
    Err:0x26})
    and for this 'err == io.EOF' is false. Which breaks the logic the DB
    engine relies on.
    FYI: Some info about 0x26 error here:
    http://social.technet.microsoft.com/Forums/windowsserver/en-US/1a16311b-c625-46cf-830b-6a26af488435/how-to-solve-error-38-0x26-errorhandleeof-using-fsctlgetretrievalpointers
    From that link it may also be the case that it's actually a Windows
    bug (happens only for small files).
    ----
    ====
    I'm aware that this issue report is lacking a small, self contained reproduction case.
    I'm trying to first figure out if the 0x26 error should be translated to an io.EOF by
    the Go runtime on Windows - or not?
    If a small reproduction case turns out to be unavoidable, I'll attempt to prepare one
    over the weekend.