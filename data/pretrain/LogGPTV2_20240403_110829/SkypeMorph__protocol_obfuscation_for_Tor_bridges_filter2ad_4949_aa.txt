title:SkypeMorph: protocol obfuscation for Tor bridges
author:Hooman Mohajeri Moghaddam and
Baiyu Li and
Mohammad Derakhshani and
Ian Goldberg
SkypeMorph: Protocol Obfuscation for Tor Bridges∗
Hooman Mohajeri Moghaddam
Mohammad Derakhshani
Baiyu Li
Ian Goldberg
Cheriton School of Computer Science
University of Waterloo
Waterloo, ON, Canada
{hmohajer,b5li,mderakhs,iang}@cs.uwaterloo.ca
ABSTRACT
The Tor network is designed to provide users with low-
latency anonymous communications. Tor clients build cir-
cuits with publicly listed relays to anonymously reach their
destinations. However, since the relays are publicly listed,
they can be easily blocked by censoring adversaries. Con-
sequently, the Tor project envisioned the possibility of un-
listed entry points to the Tor network, commonly known as
bridges. We address the issue of preventing censors from
detecting the bridges by observing the communications be-
tween them and nodes in their network.
We propose a model in which the client obfuscates its mes-
sages to the bridge in a widely used protocol over the Inter-
net. We investigate using Skype video calls as our target
protocol and our goal is to make it diﬃcult for the censor-
ing adversary to distinguish between the obfuscated bridge
connections and actual Skype calls using statistical compar-
isons.
We have implemented our model as a proof-of-concept
pluggable transport for Tor, which is available under an
open-source licence. Using this implementation we observed
the obfuscated bridge communications and compared it with
those of Skype calls and presented the results.
Keywords
Tor, bridges, Skype, pluggable transports, steganography,
protocol obfuscation, censorship circumvention
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network
protocols; C.2.0 [Computer-Communication Networks]:
General—Security and protection; K.6.5 [Security and Pro-
tection]: Anonymous communication; K.4.1 [Public Pol-
icy Issues]: Privacy
General Terms
Measurement, Security
∗An extended version of this paper is available. [33]
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
Figure 1: This graph from metrics.torproject.org shows the
number of users directly connecting to the Tor network from
China, from mid-2009 to the present. It shows that, after
2010, the Tor network has been almost completely blocked
from clients in China who do not use bridges. [42]
1.
INTRODUCTION
Tor [19] is a low-latency anonymous communication over-
lay network.
In order to use Tor, clients contact publicly
known directory servers, a fraction of the Tor network re-
sponsible for tracking the topology of the network and node
states. Directory servers allow clients to obtain a list of
volunteer-operated relay nodes, also known as onion routers.
The client then chooses some of these relays using the Tor
software and establishes a circuit through these nodes to its
desired destination. Clients’ traﬃc is then routed through
the Tor network over their circuits, hiding users’ identities
and activities.
The Tor network not only provides anonymity, but also
censorship resistance. To access a website censored in a
user’s home country, the user simply connects to the Tor
network and requests the blocked content to be delivered to
him. However, since a list of Tor relays can be retrieved
from publicly known directory servers, blocking all Tor con-
nections can be simply done by blocking access to all Tor
relays based on their IP addresses. There have been many
attempts to block access to Tor by regional and state-level
ISPs. For instance, Figure 1 shows the blocking of the whole
Tor network by the Great Firewall of China as of 2010.
In order to counteract this problem, the Tor project sug-
gested using bridges — unlisted relays used as entry points
to the Tor network. Since bridges are not publicly listed,
the censoring authority cannot easily discover their IP ad-
97dresses. Although bridges are more resilient to censorship,
McLachlan and Hopper [32] showed that it is still possible
to identify them, as they accept incoming connections un-
conditionally. To solve this problem, BridgeSPA [40] places
some restrictions on how bridges should accept incoming
connections.
As the censorship techniques improve, however, more so-
phisticated methods are being deployed to discover and block
bridges. There have been reports of probes performed by
hosts located in China, aimed quite directly at locating Tor
bridges [44, 45]. The investigation revealed that after a Tor
client within China connected to a US-based bridge, the
same bridge received a series of Tor connection initiation
messages from diﬀerent hosts within China and after a while
the client’s connection to the bridge was lost. We have re-
cently witnessed state-level SSL blocking [37] and blocking
of Tor connections based on the expiry time of the SSL cer-
tiﬁcate generated by the Tor software [18].
As the censorship arms race is shifting toward the char-
acteristics of connections, Appelbaum and Mathewson pro-
posed a framework for developing protocol-level obfuscation
plugins for Tor called pluggable transports [9]. These trans-
ports appear to the Tor client to be SOCKS proxies; any
data that the Tor client would ordinarily send to a bridge
is sent to the pluggable transport SOCKS proxy instead,
which delivers it to the bridge in an obfuscated way. Devel-
opers can use this framework to build their own transports,
hiding Tor traﬃc in other protocols. On one side, the trans-
port obfuscates Tor messages in a diﬀerent form of traﬃc,
e.g., HTTP, and on the other side it translates the HTTP
traﬃc back into Tor traﬃc. Pluggable transports provide an
easy way to resist client-to-bridge censorship and the ulti-
mate goal is that censoring ISPs that are inspecting packets
based on their characteristics will be unable to discover the
Tor traﬃc obfuscated by a transport.
At the time of writing, the only available pluggable trans-
port is “obfsproxy” [30], which passes all traﬃc through a
stream cipher. We extend this previous work to address its
limitation of not outputting innocuous-looking traﬃc; our
method greatly reduces the chances of obfuscated bridge
connections being detected by powerful censors. We also
note that simply adding the target protocol headers to pack-
ets would not be successful when facing deep packet inspec-
tion (DPI) methods [28]. Dusi et al. [20] also suggested that
obfuscating inside an encrypted tunnel might not be enough
to withstand statistical classiﬁers since some features of en-
crypted tunnels such as packet sizes and inter-arrival times
of packets can still be distinguished.
For the purpose of our experiment we chose the Skype [4]
protocol as our target communication for several reasons.
First, Skype enables users to make free, unlimited and en-
crypted voice and video calls over the Internet which has
led to its huge popularity [3] and therefore the amount of
Skype traﬃc in today’s Internet is relatively high. Second,
Skype video calls transfer a reasonable amount of data in
a short period of time, making it a desirable form of target
traﬃc since it will not introduce too much of a bottleneck
to the Tor connection. Third, Skype communications are all
encrypted [2], so it provides an encrypted channel for the
Tor traﬃc.
1.1 Our Contributions
We explore methods for Tor protocol obfuscation and in-
troduce SkypeMorph, a system designed to encapsulate Tor
traﬃc into a connection that resembles Skype video traﬃc.
We provide the following contributions:
• Tor traﬃc obfuscation: SkypeMorph disguises com-
munication between the bridge and the client as a
Skype video call, which is our target protocol. Pro-
tocol obfuscation is greatly needed when facing large-
scale censorship mechanisms, such as deep packet in-
spection.
• Innocuous-looking traﬃc: A client who wishes to
access a SkypeMorph bridge runs our software along-
side his usual Tor client and instructs his Tor client
to use the SkypeMorph software as a transport. Upon
startup, SkypeMorph ﬁrst attempts a Skype login pro-
cess and then establishes a Skype call to the intended
destination; i.e., the bridge. Once the bridge receives
the call, the client innocuously drops the call and uses
the channel to send the obfuscated Tor messages. We
give comparisons between the output of SkypeMorph
and actual video calls of Skype and we conclude that
for the censoring adversary it would be diﬃcult to dif-
ferentiate between the two. Consequently, a censor
would be required to block a great portion of legit-
imate connections in order to prevent access to the
obfuscated Tor messages.
• UDP-based implementation: Since Skype mainly
uses UDP as the transport protocol, we also use UDP.
The choice of UDP as the transport protocol will also
be useful when Tor datagram designs [34] are rolled
out.
• Improved traﬃc shaping: Traﬃc Morphing as pro-
posed by Wright et al. [47] is based on the premise of
eﬃciently morphing one class of traﬃc into another.
However, the authors neglected one key element of en-
crypted channels, namely the inter-packet delay be-
tween consecutive packets, from their design scope.
SkypeMorph extends the previous work to fully repro-
duce the characteristics of Skype calls.
• Comparison between traﬃc shaping methods:
We compare diﬀerent modes of implementing traﬃc
shaping and describe how each of them performs in
terms of network overhead. In particular, we explore
two methods, namely na¨ıve traﬃc shaping and our
enhanced version of Traﬃc Morphing, and compare
them.
• Proof-of-concept implementation: We have made
our open-source proof-of-concept SkypeMorph imple-
mentation available online at:
http://crysp.uwaterloo.ca/software/
The outline of the remainder of the paper is as follows.
In Section 2 we discuss related work and in Section 3 we
formalize our threat model and design goals. Section 4 cov-
ers some background and we present our architecture and
implementation in Sections 5 and 6. We present our results
in Section 7, discuss possible future work in Section 8, and
conclude in Section 9.
982. RELATED WORK
2.1 Information Hiding and Steganography
Hiding information within subliminal channels has been
studied extensively in the last three decades. Simmons [39]
stated the problem for the ﬁrst time and proposed a solution
based on digital signatures. Currently the topic is studied
under the term steganography or the art of concealed writing,
and it has recently attracted a lot of attention in digital
communications [36].
Employing a steganographic technique, one needs to con-
sider two major factors: the security and eﬃciency of the
method. Hopper et al. [22] proposed a construction that
can formally be proven to be secure and can be applied to
a broad range of channels. The OneBlock stegosystem de-
scribed in their work, however, needs an expected number of
samples from the channel that is exponential in the number
of bits transmitted.
2.2 Image Steganography
Hiding information within pictures is a classic form of
steganography. Least Signiﬁcant Bit (LSB) based image
steganographic techniques [24] — using a small fraction of
the information in each pixel in a cover image to send the
actual data — is a common method and Chandramouli et
al. [16] showed the upper bounds for the capacity of such
channels. There are also some existing open-source stegano-
graphic tools available, such as outguess1 and steghide2.
Collage [15] is a recently developed system that uses user-
generated content on social-networking and image-sharing
websites such as Facebook and Flickr to embed hidden mes-
sages into cover traﬃc, making it diﬃcult for a censor to
block the contents. Collage has a layered architecture: a
“message vector layer” for hiding content in cover traﬃc (us-
ing outguess internally as their steganographic tool) and a
“rendezvous mechanism” for signalling. The authors claim
the overhead imposed by Collage is reasonable for sending
small messages, such as Web browsing and sending email.
2.3 Voice over IP and Video Streaming
Wright et al. [48] studied the eﬀectiveness of security mech-
anisms currently applied to VoIP systems. They were able
to identify the spoken language in encrypted VoIP calls
encoded using bandwidth-saving Variable Bit Rate (VBR)
coders. They did so by building a classiﬁer which could
achieve a high accuracy in detecting the spoken language
when a length-preserving encryption scheme was used and
they concluded that the lengths of messages leak a lot of
information. Further experiments showed that it is possible
to uncover frequently used phrases [46] or unmask parts of
the conversation [43], when the same encryption method is
employed for conﬁdentiality.
However, the statistical properties these attacks exploit
are less prevalent in streaming video data, rather than the
audio data they consider; therefore, those algorithms should
not be able to distinguish our Tor traﬃc disguised as Skype
video traﬃc from real Skype video traﬃc. Nonetheless, we
consider the question of matching SkypeMorph traﬃc to the
higher-order statistics of Skype video traﬃc to fully resemble
Skype communication to a censor.
1http://www.outguess.org
2http://steghide.sourceforge.net
Previous work has shown some success in determining
whether a target video is being watched, using informa-
tion leakage of electromagnetic interference (EMI) signa-
tures in electronic devices [21], or revealing which videos in
a database are being viewed in a household by throughput
analysis [38]. However, those methods require the purported
video to be selected from a set known in advance. Skype-
Morph, on the other hand, attempts to disguise its traﬃc as
a real-time video chat, which would not be in such as set.
VoIP services have also been used for message hiding. For
example, Traﬃc Morphing [47] exploits the packet size dis-
tribution of VoIP conversations to transmit hidden messages
(we will return to this method in section 4). Another exam-
ple of steganographic communications over voice channels
is TranSteg [31], in which the authors try to re-encode the
voice stream in a call with a diﬀerent codec, resulting in
smaller payload size. Therefore, the remaining free space
can be used for sending the hidden messages. The short-
coming of this method is that the most of the bandwidth
is allocated to the actual voice conversation, leaving only a
limited space for steganograms.
2.4 Steganography over Encrypted Channels
Although steganographic models similar to those men-
tioned above are powerful, they impose relatively large over-
heads on our channel. Therefore, we used a combination of
methods suggested for encrypted communications [20, 47].
We argue that on an encrypted communication such as those
of Skype calls, every message appears to be random (since
we expect the encryption scheme to output a randomly dis-
tributed bit string), thus exploiting the channel history is
not required for cover traﬃc and we can perform signiﬁ-
cantly better than the OneBlock stegosystem, Collage, or
TranSteg. The only important characteristics of encrypted
channels, as suggested by previous works, are packet sizes
and inter-arrival times of consecutive packets [12, 29, 20].
Hence, a protocol obfuscation layer only needs to reproduce
these features for an encrypted channel.
3. THREAT MODEL AND DESIGN GOALS
In this section we discuss our threat model and assump-
tions. In our model, we assume that the user is trying to
access the Internet through Tor, while his activities are be-
ing monitored by a state-level ISP or authority, namely “the
censor”, who can capture, block or alter the user’s communi-
cations based on pre-deﬁned rules and heuristics. Therefore,
we consider adversarial models similar to anti-censorship so-
lutions such as Telex [49], Cirripede [23] and Decoy Rout-
ing [25]. In particular, the censor is able to block access to
Tor’s publicly listed routers, and to detect certain patterns
in Tor’s traﬃc and hence block them [18]. This is also true