# NTLM认证协议与SSP（下）——NTLM中高级进阶
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
上篇：
内容参考原文链接：
翻译人：rootclay（香山）
Gitbook：
## 说明
本文是一篇NTLM中高级进阶文章，文中大部分参考来自于[Sourceforge](http://davenport.sourceforge.net/ntlm.html)，原文中已经对NTLM讲解非常详细，在学习的过程中思考为何不翻译之，做为学习和后续回顾的文档，并在此基础上添加自己的思考，因此出现了这篇文章，在翻译的过程中会有部分注解与新加入的元素，后续我也会在Github对此文进行持续性的更新NTLM以及常见的协议中高级进阶并计划开源部分协议调试工具，望各位issue勘误。
## 摘要
本文旨在以中级到高级的详细级别描述NTLM身份验证协议(authentication protocol)和相关的安全支持提供程序功能(security
support provider
functionality)，作为参考。希望该文档能发展成为对NTLM的全面描述。目前，无论是在作者的知识还是在文档方面，都存在遗漏，而且几乎可以肯定的说本文是不准确的。但是，该文档至少应能够为进一步研究提供坚实的基础。本文提供的信息用作在开放源代码jCIFS库中实现NTLM身份验证的基础，该库可从
http://jcifs.samba.org获得。本文档基于作者的独立研究，并分析了[Samba](http://www.samba.org/)软件套件。
## NTLM版本2(NTLM Version 2)
NTLM版本2包含三种新的响应算法（NTLMv2，LMv2和NTLM2会话响应，如前所述）和新的签名和Sealing方案（NTLM2会话安全性）。NTLM2会话安全性是通过”Negotiate
NTLM2
Key”FlagsNegotiate的；但是，可以通过修改注册表来启用NTLMv2身份验证。此外，客户端和域控制器上的注册表设置必须兼容才能成功进行身份验证（尽管NTLMv2身份验证有可能通过较旧的服务器传递到NTLMv2域控制器）。部署NTLMv2所需的配置和计划的结果是，许多主机仅使用默认设置（NTLMv1），而不怎么使用NTLMv2进行身份验证。
Microsoft知识库文章239869 中详细介绍了启用NTLM版本2的说明 。简要地，对注册表值进行了修改：  
`HKEY_LOCAL_MACHINESystemCurrentControlSetControlLSALMCompatibilityLevel`  
（基于Win9x的系统上的LMCompatibility）。这是一个 REG_DWORD条目，可以设置为以下值之一：
Level | Sent by Client | Accepted by Server  
---|---|---  
0 | LMNTLM | LMNTLMLMv2NTLMv2  
1 | LMNTLM | LMNTLMLMv2NTLMv2  
2 | NTLM | LMNTLMLMv2NTLMv2  
3 | LMv2NTLMv2 | LMNTLMLMv2NTLMv2  
4 | LMv2NTLMv2 | NTLMLMv2NTLMv2  
5 | LMv2NTLMv2 | LMv2NTLMv2  
在所有级别中，都支持NTLM2会话安全性并在可用时进行Negotiate（大多数可用文档表明NTLM2会话安全性仅在级别1和更高级别上启用，但实际上在级别0上也可以看到）。默认情况下，在Windows
95和Windows 98平台上仅支持LM响应。安装Directory
Services之后的客户端使NTLMv2也可以在这些主机上使用（并启用LMCompatibility 设置，尽管仅级别0和3可用）。
在级别2中，客户端两次发送NTLM响应（在LM和NTLM响应字段中）。在级别3和更高级别，LMv2和NTLMv2响应分别替换LM和NTLM响应。
协商了NTLM2会话安全性后（由”Negotiate NTLM2
Key”Flags指示），可以在级别0、1和2中使用NTLM2会话响应来代替较弱的LM和NTLM响应。与NTLMv1相比，这可以提供针对基于服务器的预先计算的字典攻击的增强保护。通过向计算中添加随机的客户随机数，可以使客户对给定challenge的响应变得可变。
NTLM2 session
response很有趣，因为它可以在支持较新方案的客户端和服务器之间进行Negotiate，即使存在不支持较旧域控制器的情况也是如此。在通常情况下，身份验证事务中的服务器实际上并不拥有用户的密码哈希；而是保留在域控制器中。将计算机加入使用NT风格认证的域时，它会建立到域控制器（俗称”
NetLogon pipe”）的经过加密，相互认证的通道。当客户端使用”原始” NTLMv1握手向服务器进行身份验证时，在后台进行以下事务：
  1. 客户端发送Type 1消息，其中包含Flags和其他信息，如前所述。
  2. 服务器为客户端生成一个质询，并发送包含Negotiate Flags集的Type 2消息。
  3. 客户响应challenge，提供LM / NTLM响应。
  4. 服务器通过NetLogon管道将质询和客户端响应发送到域控制器。
  5. 域控制器使用存储的哈希值和服务器给出的质询来重现身份验证计算。如果它们与响应匹配，则认证成功。
  6. 域控制器计算Session Key并将其发送到服务器，该Session Key可用于服务器和客户端之间的后续签名和Sealing操作。
在NTLM2会话响应的情况下，可能已升级了客户端和服务器以允许较新的协议，而域控制器却没有。为了考虑到这种情况，对上述握手进行了如下修改：
  1. 客户端发送Type 1消息，在这种情况下，该消息指示”Negotiate NTLM2 Key”Flags。
  2. 服务器为客户端生成质询，并发送包含NegotiateFlags集（还包括”Negotiate NTLM2 Key”Flags）的Type 2消息。
  3. 客户端响应challenge，在LM字段中提供client nonce，并在NTLM字段中提供NTLM2会话响应（NTLM2 Session Response）。请注意，后者的计算与NTLM响应完全相同，只是客户端没有对服务器质询进行加密，而是对与client nonce连接的服务器质询的MD5哈希进行了加密。
  4. 服务器不是将服务器质询直接通过NetLogon管道直接发送到域控制器，而是将服务器质询的MD5哈希与client nonce连接在一起（从LM响应字段中提取）。此外，它还发送客户端响应（照常）。
  5. 域控制器使用存储的哈希作为Key对服务器发送的质询字段进行加密，并验证它与NTLM响应字段匹配；因此，客户端已成功通过身份验证。
  6. 域控制器计算正常的NTLM用户Session Key并将其发送到服务器；服务器在次要计算中使用它来获取NTLM2会话响应用户Session Key（在后续部分中讨论 ）  
本质上，这允许已升级的客户端和服务器在尚未将域控制器升级到NTLMv2（或者网络管理员尚未将LMCompatibilityLevel注册表设置配置为使用NTLMv2）的网络中使用NTLM2会话响应。
与LMCompatibilityLevel设置相关的是
NtlmMinClientSec和NtlmMinServerSec设置。这些规定了由NTLMSSP建立的NTLM上下文的最低要求。两者都是
REG_WORD条目，并且是指定以下NTLMFlags组合的位域：
  1. Negotiate Sign（0x00000010）-指示必须在支持消息完整性（签名）的情况下建立上下文。
  2. Negotiate Seal（0x00000020）-指示必须在支持消息机密性（Sealing）的情况下建立上下文。
  3. Negotiate NTLM2 Key（0x00080000）-指示必须使用NTLM2会话安全性来建立上下文。
  4. Negotiate 128（0x20000000）-指示上下文必须至少支持128位签名/SealingKey。
  5. Negotiate 56（0x80000000）-指示上下文必须至少支持56位签名/SealingKey。
尽管其中大多数都更适用于NTLM2签名和Sealing，但”Negotiate NTLM2
Key”对于身份验证很重要，因为它可以防止与无法NegotiateNTLM2会话安全性的主机建立会话。这用于确保不发送LM和NTLM响应（要求认证在所有情况下至少将使用NTLM2会话响应）。
## NTLMSSP和SSPI
在这一点上，我们将开始研究NTLM如何适应”大局”（big
picture）。关于SSPI内容也可以查看本链接中的简单说明[SSPI](https://daiker.gitbook.io/windows-protocol/ntlm-pian/4#0x04-ssp-and-sspi)
Windows提供了一个称为SSPI的安全框架-安全支持提供程序接口。这与GSS-API（通用安全服务应用程序接口，RFC 2743
）在Microsoft中等效。 ），并允许应用认证，完整性和机密性原语的非常高级的机制无关的方法。SSPI支持多个基础提供程序（Kerberos、Cred
SSP、Digest SSP、Negotiate SSP、Schannel SSP、Negotiate Extensions SSP、PKU2U
SSP）。其中之一就是NTLMSSP（NTLM安全支持提供程序），它提供了到目前为止我们一直在讨论的NTLM身份验证机制。SSPI提供了一个灵活的API，用于处理不透明的，特定于提供程序的身份验证令牌。NTLM
Type 1，Type 2和Type
3消息就是此类令牌，专用于NTLMSSP并由其处理。SSPI提供的API几乎抽象了NTLM的所有细节。应用程序开发人员甚至不必知道正在使用NTLM，并且可以交换另一种身份验证机制（例如Kerberos），而在应用程序级别进行的更改很少或没有更改。
在系统层面，SSP就是一个dll，来实现身份验证等安全功能，实现的身份验证机制是不一样的。比如 NTLM SSP 实现的就是一种
Challenge/Response 验证机制。而 Kerberos 实现的就是基于 ticket 的身份验证机制。我们可以编写自己的
SSP，然后注册到操作系统中，让操作系统支持更多的自定义的身份验证方法。
我们不会对SSPI框架进行深入研究，但这是研究应用于NTLM的SSPI身份验证握手的好方法：
  1. 客户端通过SSPI AcquireCredentialsHandle函数为用户获取证书集的表示。
  2. 客户端调用SSPI InitializeSecurityContext函数以获得身份验证请求令牌（在我们的示例中为Type 1消息）。客户端将此令牌发送到服务器。该函数的返回值表明身份验证将需要多个步骤。
  3. 服务器从客户端接收令牌，并将其用作AcceptSecurityContext SSPI函数的输入 。这将在服务器上创建一个表示客户端的本地安全上下文，并生成一个身份验证响应令牌（Type 2消息），该令牌将发送到客户端。该函数的返回值指示需要客户端提供更多信息。
  4. 客户端从服务器接收响应令牌，然后再次调用 InitializeSecurityContext，并将服务器的令牌作为输入传递。这为我们提供了另一个身份验证请求令牌（Type 3消息）。返回值指示安全上下文已成功初始化；令牌已发送到服务器。
  5. 服务器从客户端接收令牌，并使用Type 3消息作为输入再次调用 AcceptSecurityContext。返回值指示上下文已成功接受；没有令牌产生，并且认证完成。
###  本地认证（Local Authentication）
我们在讨论的各个阶段都提到了本地身份验证序列。对SSPI有基本的了解后，我们可以更详细地研究这种情况。
基于NTLM消息中的信息，客户端和服务器通过一系列决策来协商本地身份验证。其工作方式如下：
  1. 客户端调用AcquireCredentialsHandle函数，通过将null传递给”pAuthData”参数来指定默认凭据。这将获得用于单点登录的登录用户凭据的句柄。
  2. 客户端调用SSPI InitializeSecurityContext函数来创建Type 1消息。提供默认凭据句柄时，Type 1消息包含客户端的工作站和域名。这由”Negotiate Domain Supplied”和”Negotiate Workstation Supplied”Flags的存在以及消息中包含已填充的”已提供的域（Supplied Domain）”和”工作站的安全性（Supplied Workstation security）”标记来表明。
  3. 服务器从客户端接收Type 1消息，并调用 AcceptSecurityContext。这将在服务器上创建一个代表客户端的本地安全上下文。服务器检查客户端发送的域和工作站信息，以确定客户端和服务器是否在同一台计算机上。如果是这样，则服务器通过在结果2类消息中设置”Negotiate Local Call”Flags来启动本地身份验证。Type 2消息的Context字段中的第一个long填充了新获得的SSPI上下文句柄的”upper”部分（特别是SSPI CtxtHandle结构的” dwUpper”字段）。第二个long在所有情况下，”上下文”字段中的”空白”都为空。（尽管从逻辑上讲，它会假定它应包含上下文句柄的”下部”部分）。
  4. 客户端从服务器接收Type 2消息，并将其传递给 InitializeSecurityContext。注意了”Negotiate Local Call”Flags的存在之后，客户端检查服务器上下文句柄以确定它是否代表有效的本地安全上下文。如果无法验证上下文，则身份验证将照常进行-计算适当的响应，并将其包含在Type 3消息中的域，工作站和用户名中。如果来自Type 2消息的安全上下文句柄可以验证，但是，没有准备任何答复。而是，默认凭据在内部与服务器上下文相关联。生成的Type 3消息完全为空，其中包含响应长度为零的安全缓冲区以及用户名，域和工作站。
  5. 服务器收到Type 3消息，并将其用作AcceptSecurityContext函数的输入 。服务器验证安全上下文已与用户关联；如果是这样，则认证已成功完成。如果上下文尚未绑定到用户，则身份验证失败。
###  数据报认证（Datagram Authentication）（面向无连接）
数据报样式验证用于通过无连接传输Negotiate NTLM。尽管消息周围的许多语义保持不变，但仍存在一些重大差异：
  1. 在第一次调用InitializeSecurityContext的过程中，SSPI不会创建Type 1消息 。
  2. 身份验证选项由服务器提供，而不是由客户端请求。
  3. Type 3消息中的Flags将会有用（如在面向连接的身份验证中）。
在”normal”（面向连接）身份验证期间，在交换Type 1和Type
2消息期间，所有选项都在客户端和服务器之间的第一个事务中Negotiate。Negotiate的设置由服务器”remembered”，并应用于客户端的Type
3消息。尽管大多数客户端发送带有Type
3消息的Negotiate一致的Flags，但它们未用于连接身份验证。（注：也就是Type3消息的Flag是没有用的）
但是，在数据报身份验证中，规则发生了一些变化。为了减轻服务器跟踪Negotiate选项的需要（如果没有持久连接，这将变得困难），将Type
1消息完全删除。服务器生成包含所有受支持Flags的Type 2消息（当然还有质询）。然后，客户端决定它将支持哪些选项，并以Type
3消息进行答复，其中包含对质询的响应和一组选定Flags。数据报认证的SSPI握手序列如下：
  1. 客户端调用AcquireCredentialsHandle以获得用户证书集的表示。
  2. 客户端调用InitializeSecurityContext，并通过fContextReq参数将 ISC_REQ_DATAGRAMFlags作为上下文要求传递。这将启动客户端的安全上下文的建设，但并没有产生令牌的请求（Type 1的消息）。
  3. 服务器调用AcceptSecurityContext函数，指定 ASC_REQ_DATAGRAM上下文要求Flags并传入空输入令牌。这将创建本地安全上下文，并生成身份验证响应令牌（Type 2消息）。此Type 2消息将包含”Negotiate数据报样式”Flags，以及服务器支持的所有Flags。照常发送给客户端。
  4. 客户端收到Type 2消息，并将其传递给 InitializeSecurityContext。客户端从服务器提供的选项中选择适当的选项（包括必须设置的”Negotiate数据报样式”），创建对质询的响应，并填充Type 3消息。然后，该消息将中继到服务器。
  5. 服务器将Type 3消息传递到AcceptSecurityContext 函数中。根据客户端选择的Flags来处理消息，并且上下文被成功接受。
与SSPI一起使用时，显然无法产生数据报样式的Type 1消息。但是，有趣的是，我们可以通过巧妙地操纵NTLMSSP令牌来产生我们自己的数据报Type
1令牌，从而在较低级别上”诱导”数据报语义。
这可以通过在将令牌传递到服务器之前，在面向连接的SSPI握手中在第一个InitializeSecurityContext调用产生的Type
1消息上设置”NegotiateNegotiate Datagram Style”Flags来实现。当将修改后的Type 1消息传递到
AcceptSecurityContext函数中时，服务器将采用数据报语义（即使未指定ASC_REQ_DATAGRAM）。这将产生设置了”Negotiate
Datagram Style”Flags的2类消息，但与通常会生成的面向连接的消息相同；也就是说，在构造Type 2消息时会考虑客户端发送的Type
1Flags，而不是简单地提供所有受支持的选项。
然后，客户端可以使用此Type 2令牌调用InitializeSecurityContext。请注意，客户端仍处于面向连接的模式。生成的Type
3消息将忽略应用于Type 2消息的”Negotiate Datagram