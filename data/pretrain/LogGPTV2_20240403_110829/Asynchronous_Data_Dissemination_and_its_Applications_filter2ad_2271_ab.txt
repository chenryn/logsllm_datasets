in terms of communication. For example, the best known AVSS
protocol without any trusted setup [3] has a communication cost
of 𝑂(𝜅𝑛2 log 𝑛) due to two steps: a RBC on an 𝑂(𝜅𝑛)-sized message,
and an all-to-all gossip of 𝑂(𝜅 log 𝑛)-sized polynomial evaluation
proofs. Thus, we need to open the black-box of the RBC protocol
and incorporate additional techniques to improve these primitives.
problem.
In summary, we make the following contributions.
• We introduce the Asynchronous Data Dissemination (ADD)
• We design an information-theoretically secure ADD protocol
that tolerates up to 1/3 malicious nodes and has communica-
tion cost 𝑂(𝑛|𝑀|+𝑛2) for a message 𝑀 of size |𝑀|. Assuming
a collision-resistant hash function, we can extend this ADD
protocol to tolerate up to 1/2 malicious nodes.
• We use ADD to design an improved asynchronous reliable
broadcast protocol for a message 𝑀 with a communication
cost of 𝑂(𝑛|𝑀|+𝜅𝑛2) where 𝜅 is the size of the hash.
• Finally, we use our improved RBC along with additional
techniques to design asynchronous verifiable secret shar-
ing (AVSS), asynchronous complete secret sharing (ACSS),
dual-threshold ACSS, asynchronous distributed key genera-
tion, all with improved communication cost or weaker as-
sumptions comparing to the state-of-the-art solutions.
Paper organization. The rest of the paper is organized as follows.
We describe our system model, introduce notations, and provides
some necessary background §2. In §3, we formally introduce the
problem of Asynchronous Data Dissemination (ADD) and describe
our solutions to ADD. Next, in §4 we describe how we use ADD to
implement reliable broadcast for long messages. We then provide
improved constructions of AVSS ACSS and dual-threshold ACSS
in §5. In §6 we present lower bound results and show our protocols
are near-optimal. We describe related work in §7 and conclude after
a discussion in §8.
2 SYSTEM MODEL AND PRELIMINARIES
Cryptographic assumptions. Let G be a group of order 𝑞 where
𝑞 is a prime number. Let Z𝑞 be the field with integer operations
modulo 𝑞. Throughout the paper, we use hash(·) to denote a col-
lision resistant hash function. We will use 𝜅 to denote the size of
cryptographic objects, e.g., the length of the hash function output,
the size of a ciphertext of a CPA-secure encryption, or the size of
an element in the group G. These objects may slightly differ in size
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2706in practice but they are on the same order; or one can interpret 𝜅
as the largest among them.
Network and adversarial assumptions. We consider an asyn-
chronous network of 𝑛 ≥ 3𝑡 + 1 nodes where a malicious adversary
can corrupt up to 𝑡 nodes in the network. The corrupted nodes
can deviate arbitrarily from the protocol. The remaining nodes are
honest and strictly adhere to the protocol. We assume every pair
of honest nodes have access to pairwise reliable and authenticated
channel. The network is asynchronous, so the adversary can arbi-
trarily delay or reorder messages between honest nodes, but must
eventually deliver every message.
Error correcting code. Our ADD protocol uses error correcting
codes. For concreteness, we will use the standard Reed-Solomon
(RS) codes [46]. A (𝑚, 𝑘) RS code in Galois Field F = GF(2𝑎) with
𝑚 ≤ 2𝑎 − 1, encodes 𝑘 data symbols from GF(2𝑎) into a codeword
of 𝑚 symbols from GF(2𝑎). Let RSEnc(𝑀, 𝑚, 𝑘) be the encoding
algorithm. Briefly, the RSEnc takes as input a message 𝑀 consisting
of 𝑘 symbols, treats it as a polynomial of degree 𝑘 − 1 and outputs
𝑚 evaluations of the corresponding polynomial.
Let RSDec(𝑘, 𝑟,𝑇 ) be the RS decoding procedure. RSDec takes
as input a set of symbols 𝑇 (some of which may be incorrect), and
outputs a degree 𝑘 − 1 polynomial, i.e., 𝑘 symbols, by correcting up
to 𝑟 errors (incorrect symbols) in 𝑇 . It is well-known that RSDec can
correct up to 𝑟 errors in 𝑇 and output the original message provided
that |𝑇 |≥ 𝑘 + 2𝑟 [38]. Concrete instantiations of RS codes include
the Berlekamp-Welch algorithm [50] and the Gao algorithm [28].
3 ASYNCHRONOUS DATA DISSEMINATION
In this section, we formally define the problem of Data Dissem-
ination. We then provide our solution to the data dissemination
problem in asynchronous network, which we refer to as Asynchro-
nous Data Dissemination (ADD). Finally, we analyze its correctness
and efficiency.
3.1 Problem Statement
Definition 3.1 (Data Dissemination). Given a network of 𝑛 nodes,
of which up to 𝑡 could be malicious, let 𝑀 be a data blob that is the
input of at least 𝑡 + 1 honest nodes. The remaining honest nodes
have input ⊥. A protocol solves Data Dissemination if it ensures
that every honest node eventually outputs 𝑀.
Here on, we refer to the honest nodes that start with the message
𝑀 as the sender nodes and the honest nodes that start with ⊥ as
the recipient nodes.
A simple but important observation is that to solve data dis-
semination in a network with 𝑡 malicious nodes, the number of
honest sender nodes must be at least 𝑡 + 1. Otherwise, to any honest
recipient node, the set of 𝑡 honest senders starting with 𝑀 are in-
distinguishable from the set of 𝑡 malicious nodes claiming to start
with 𝑀′ and behaving honestly otherwise. This justifies the initial
condition of at least 𝑡 + 1 honest sender nodes.
The simplest data dissemination protocol just has each honest
sender send its input to all other nodes. A recipient node, upon
receiving 𝑡 + 1 matching copies of a message 𝑀, outputs 𝑀. Since
we begin with 𝑡 + 1 honest senders, every recipient node will even-
tually receive 𝑡 + 1 identical messages. Furthermore, there will
Let 𝑀′ := [𝑚1, 𝑚2, . . . , 𝑚𝑛] := RSEnc(𝑀𝑖, 𝑛, 𝑡 + 1)
Let 𝑚∗
send ⟨DISPERSE, 𝑚 𝑗 ⟩ to node 𝑗 for every 𝑗 = 1, 2, . . . , 𝑛
upon receiving 𝑡 + 1 identical ⟨DISPERSE, 𝑚𝑖 ⟩ do
Algorithm 1 Pseudocode for node 𝑖 in ADD for 𝑛 = 3𝑡 + 1
1: // encoding phase.
2: input 𝑀𝑖: either 𝑀𝑖 = 𝑀 or 𝑀𝑖 = ⊥
3: if 𝑀𝑖 ̸= ⊥ then
4:
5: // dispersal phase
6: if 𝑀𝑖 ̸= ⊥ then
𝑖 := 𝑚𝑖
7:
8:
9: else
10:
𝑖 := 𝑚𝑖
11:
12: // reconstruction phase
13: send ⟨RECONSTRUCT, 𝑚∗
14: if 𝑀𝑖 ̸= ⊥ then
15:
16: Let 𝑇 := {}
17: For every ⟨RECONSTRUCT, 𝑚∗
18: for 0 ≤ 𝑟 ≤ 𝑡 do
Wait till |𝑇 |≥ 2𝑡 + 𝑟 + 1
19:
Let 𝑝𝑟 (·) := RSDec(𝑡 + 1, 𝑟,𝑇 )
20:
if 2𝑡 + 1 elements (𝑗, 𝑎) ∈ 𝑇 satisfy 𝑝𝑟 (𝑗) = 𝑎 then
21:
output coefficients of 𝑝𝑟 (·) as 𝑀 and return
22:
output 𝑀 and return;
𝑗 ⟩ received from node 𝑗, add (𝑗, 𝑚∗
𝑗 ) to 𝑇
// online Error Correction
Let 𝑚∗
𝑖 ⟩ to all nodes
not be 𝑡 + 1 nodes sending a different message 𝑀′ since there are
only 𝑡 malicious nodes. The issue with this approach is that it is
not communication efficient. Specifically, this approach has a total
communication cost of 𝑂(𝑛2|𝑀|).
An alternate solution is to have each recipient node request 𝑀
from the sender nodes, to which an honest sender replies by sending
𝑀. Again, the issue is that malicious nodes may redundantly request
𝑀 from all honest senders. Since there are 𝑡 = Θ(𝑛) malicious nodes
and each malicious node requests 𝑀 from all honest senders, this
approach also has a total communication cost of 𝑂(𝑛2|𝑀|).
3.2 Our Approach
As mentioned, in this paper, we focus on data dissemination in
an asynchronous network, which we refer to as the Asynchronous
Data Dissemination (ADD) problem. We present two variants of our
ADD protocol. The first variant requires 𝑡 < 𝑛/3 (or equivalently
𝑛 ≥ 3𝑡 + 1) and is information-theoretically secure. The second
variant requires 𝑡 < 𝑛/2 but needs a collision resistant hash function.
Since all the applications we consider in this paper require 𝑡 < 𝑛/3
(due to reasons orthogonal to ADD), we will focus on the 𝑡 < 𝑛/3
variant of our ADD protocol. We present our ADD protocol for
𝑡 < 𝑛/2 in Appendix B.
Our ADD protocol has three phases: Encoding, Dispersal, and
Reconstruction. Figure 2 illustrates our protocol in a network of
𝑛 = 4 nodes with 𝑡 = 1. We provide the pseudocode of the protocol
for node 𝑖 in Algorithm 1.
Encoding phase. In the encoding phase, every sender (who holds
𝑀 ̸= ⊥) encodes 𝑀 using a (𝑛, 𝑡 + 1) Reed-Solomon code, i.e., us-
ing RSEnc(·) described in §2 (Line 2 − 4 in Algorithm 1). The en-
coded message 𝑀′ = RSEnc(𝑀, 𝑛, 𝑡 + 1) can be written as a vector
𝑀′ = [𝑚1, 𝑚2, . . . , 𝑚𝑛] of 𝑛 symbols. Here each symbol 𝑚𝑖 is of size
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2707Figure 2: A example execution of our solution to ADD with 4 nodes {1, 2, 3, 4} among which node 4 is malicious and node 2 does not start with
𝑀. As described, after the dispersal phase, node 2 will receive 2 = 𝑡 + 1 identical copies of 𝑚2 from node 1 and 4 and hence will set 𝑚2 as 𝑚∗
2. As
a result, after the reconstruction phase, node 2 will receive 3 correct symbols of 𝑀′ which is sufficient for reconstructing 𝑀.
approximately |𝑚𝑖|= |𝑀|/(𝑡 + 1) because, after encoding,
= |𝑀|
𝑡 + 1
|𝑀′|= 𝑛|𝑀|
𝑡 + 1 ⇒ |𝑀′|
𝑛
𝑗 sets 𝑚′
(1)
Dispersal phase. After encoding 𝑀 into 𝑀′, the senders start the
dispersal phase (Line 5 − 10 in Algorithm 1). During the dispersal
phase, every sender sends the message ⟨DISPERSE, 𝑚 𝑗⟩ to node 𝑗. A
recipient node 𝑗, upon receiving 𝑡 +1 matching DISPERSE messages
𝑗 as its reconstruction symbol 𝑚∗
for a symbol 𝑚′
𝑗 . Each
honest sender node 𝑖 sets 𝑚𝑖 as its reconstruction symbol 𝑚∗
𝑖 .
Reconstruction phase. During the reconstruction phase, every
node 𝑖 sends ⟨RECONSTRUCT, 𝑖, 𝑚∗
𝑖 ⟩ to all other nodes. Then, every
recipient node 𝑗, upon receiving enough symbols, uses the standard
Online Error Correcting (OEC) algorithm from [6] (line 16 − 22
in Algorithm 1). Briefly, the OEC algorithm [6] performs up to 𝑡
trials of reconstruction. In the 𝑟-th trial, the recipient waits until it
receives RECONSTRUCT messages from 2𝑡 + 𝑟 + 1 nodes and tries to
decode. If the reconstructed polynomial agrees with 2𝑡 + 1 points in
the RECONSTRUCT messages received so far, the recipient outputs the
decoded message; otherwise, it waits for one more RECONSTRUCT
message and tries again.
3.3 Analysis
We will prove that Algorithm 1 solves the ADD problem. Towards
this end, we will first prove that every honest node will hold the
correct reconstruction symbol at the end of the dispersal phase.
Next, we will argue that every honest node successfully reconstructs
the message 𝑀. Recall that we refer to the nodes that start with
the message 𝑀 as the sender nodes and the honest nodes that start
with ⊥ as the recipient nodes.
Lemma 3.2. After the dispersal phase each honest node 𝑗 holds 𝑚∗
where 𝑚∗
𝑗 is the 𝑗th coordinate of 𝑀′ = RSEnc(𝑀, 𝑛, 𝑡 + 1).
𝑗
Proof. Recall that RSEnc encoding is deterministic. If node 𝑗 is
a sender, then it trivially holds 𝑚∗
𝑗 . Thus, we focus on a recipient
node 𝑗. No honest node will send DISPERSE for any 𝑚 𝑗 ̸= 𝑚∗
𝑗 . Since
node 𝑗 holds 𝑚 𝑗 only if it receives 𝑡 +1 identical DISPERSE messages
for 𝑚 𝑗, it will not hold 𝑚 𝑗 ̸= 𝑚∗
𝑗 to
node 𝑗. So node 𝑗 will eventually receive 𝑡 + 1 DISPERSE message
for 𝑚∗
□
𝑗 . All 𝑡 + 1 honest senders send 𝑚∗
𝑗 at the end of the dispersal phase.
𝑗 and will hold 𝑚∗
Next we will argue that each honest recipient will eventually
recover the message at the end of the reconstruction phase.
Lemma 3.3. At the end of the reconstruction phase of Algorithm 1,