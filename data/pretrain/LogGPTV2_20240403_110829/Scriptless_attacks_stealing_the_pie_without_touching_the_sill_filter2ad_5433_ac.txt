CSS selectors choose the CSRF-token-protected links
(CTPL) and their container elements. The font-face
declaration imports a set of SVG fonts that has been
carefully prepared: for each character that can appear
in the CSRF tokens, one font ﬁle is imported. Any
other character, except for the one the font has been
imported for, has zero width. A single speciﬁc charac-
ter per font that does have a width is applied with a
distinctive width value.
2. A CSS animation block is injected alongside the afore-
mentioned CSS. This animation targets the container
of the CTPL and shrinks it from an initial large size to
a speciﬁc ﬁnal size. Determining this ﬁnal size is cru-
cial; the attacker needs to ﬁnd out what is the right
pixel size for the animation to stop to leak information
about the content enclosed by the shrinking container.
3. The injected CSS contains a content property embed-
ded by a ::before pseudo-selector for the CTPL. This
content property is applied with the value attr(href).
Thereby, the attacker can map the value of the href
attribute to the DOM and make it visible. By doing
so, the injected SVG fonts can be applied. For ev-
ery occurrence of a CTPL, a diﬀerent SVG font can
be chosen. In the ﬁrst selected link, the font that only
gives dimension to the character a will be selected. For
the second CTPL occurrence, the font crafted to give
dimension only to the character b will be chosen and
so on. Successively, all CTPL can be applied with an
individual font, while all CTPL void of the character
connected to the assigned font will have no dimension
at all. Finally, all CTPL containing the characters di-
mensioned by the chosen font will have dimension of
character-width × occurrences in pixels.
7644. By decreasing the box size of the container element of
the CTPL from 100% to one pixel, the attacker can
evoke an interesting behavior: The box will be too
small for the CTPL, so the characters applied with di-
mension will break to the next line. In case the box
is then given a distinct height and no horizontal over-
ﬂow properties, a scrollbar will appear. The moment
when scrollbar appears constitutes an opening for the
attacker to determine locally what character is being
used: speciﬁc SVG font, zero width characters and
scrollbars forced via pixel-precise animation decreas-
ing the box size are suﬃcient for that.
Eventually an attacker can locally determine whether a
character is uniquely dimensioned and therefore present in
the CTPL. The only obstacle for not being able to remotely
determine this character is the lack of a back-channel ap-
plicable for scrollbars. There is no standardized way to ap-
ply background images or similar properties to scrollbars.
Webkit – an exception among all other tested browser lay-
out engines – provides this feature. A developer can select
any component of a window’s or HTML element’s scrollbar
and apply almost arbitrary styles. This includes box shad-
ows, rounded borders, and background images. However,
our investigation showed that typical scrollbar background
images are requested directly after page-load. Therefore,
this property is seemingly uninteresting for timing purpose
and development of a side channel obtaining information
about the time of appearance or sheer existence. Neverthe-
less, further investigation of the Webkit-available pseudo-
classes and state selectors unveiled a working way to misuse
scrollbar states combined with background images for actual
timing and measuring attacks. Several of the state selectors
allow assignment of background images and based on that
fact the speciﬁc state (such as an incrementing scroll aﬀect-
ing the background of the scrollbar track) have to actually
occur. Here and then, the background will be loaded on
entering this CSS-selected state and not on page-load. This
allows an adversary to indeed use the measuring of scrollbar
appearance for timing and side channel data exﬁltration.
The CSS code sample shown in Listing 2 demonstrates one
of the state selectors capable of working as a side channel.
During our tests based on the Webkit scrollbar feature, de-
termination of sensitive content took only few seconds. The
victim would not necessarily notice the malicious nature if
the performed CSS animation.
 secret 
Listing 2: A working side channel: Scrollbar CSS
for track-piece incrementing vertically.
We created a public test-case available at http://html5sec.
org/webkit/test to demonstrate this side channeling at-
tack after the issue was disclosed responsibly to the Google
Chrome development team. To mitigate this attack, we
recommended to treat scrollbar backgrounds and scrollbar
state backgrounds equally; all background images and simi-
lar external resources should be loaded during page-load and
not on appearance or state occurrence. These two aspects
create an attack window allowing side channel attacks and
appearance-probing usable for leaking sensitive data and
page parameters as demonstrated in the attack explained
above.
Connecting the general attack technique with the running
example of having a credit card number displayed on an at-
tacked website, the injected font will provide one ligature per
digit-group of the credit card number. To create a WOFF
font containing all possible groups of numbers necessary to
brute-force a credit card number, an amount of no more than
9,999 or 999,999 distinct ligatures is necessary, depending on
the credit card manufacturer. Every digit-group will then
have a distinct width and can thus be exﬁltrated through a
determination as to when the scrollbar appears during the
size-decreasing animation process. We successfully tested
this approach in our example scenario and found that we
could reliably determine and exﬁltrate this information.
3.3 Content Exﬁltration using Scrollbar De-
tection and Media Queries
During our research of the Webkit speciﬁc scrollbar data
leakage capabilities, we attempted to develop a technique
that can accomplish similar results in any other browser
through standardized features. Additionally, extraction of
single characters can turn out to be a long lasting task not
optimal for eﬀective targeted attacks. Our goal was there-
fore to continue research on attack techniques that have
larger impact, on the whole being more eﬃcient and more
generic in comparison to the rather speciﬁc “Smart Scroll-
bar” approach presented above. Beware that without deep
understanding of the attack surface and possible impact, as
well as the involved features and adversaries, eﬀective de-
fense as discussed in Section 4 is complicated if not impos-
sible.
We utilized the aforementioned technique [16] of deploy-
ing CSS Media Queries to elevate the scrollbar-based data-
leakage and made it applicable to all modern browsers. It
also helped separating the core problem, moving from a
small implementation quirk into representing an actual design-
based security issue. Media Queries, as described in Sec-
tion 3.1, allow determination of a device’s view-port size.
Based on this judgment process, they deploy various and
most likely optimized CSS ﬁles and rules. To have a scroll-
bar be a source for data-leakage problems as described in the
aforementioned attack in Section 3.2, the attacker needs to
ﬁnd out when and why the scrollbars appear. More speciﬁ-
cally, the adversary can resize elements up to a certain point
and use the scrollbar to determine if the element contains
a certain other element or text node of distinct value. The
distinct size is the actual part where CSS Media Queries will
help unveiling if a scrollbar is there or not. The following
steps demonstrates how detecting scrollbar existence with
CSS Media Queries works in detail:
1. A website deploys an Iframe embedding another web-
site. A maliciously prepared CSS injection is part of
this embedded website. The Iframe is set to a width of
100%, therefore ﬁlls the whole embedding window in
regards to width-feature. The height of the Iframe can
be set to an arbitrary value depending on what data
should be leaked.
2. The embedding website is set to a speciﬁc width. This
will make sure that, given the 100% width of the Iframe,
765Figure 1: Decreasing vertical view-size leads to a
scrollbar appear – which decreases the horizontal
view-size and causes a diﬀerent media query to ex-
ecute
Figure 2: Assigning the contextual alternative string
“supersecret” to a speciﬁc character with the help of
the FontForge tool
the embedded site will obey to that width and set
its view-port dimensions accordingly. The framed/em-
bedded website uses injected CSS Media Queries that
deploy two states. The ﬁrst state uses almost the same
width as the embedding page. Consider the framing
view-port having a width of 430px, then the framed
website’s ﬁrst media query will listen for a device view-
port width of 400px. A second CSS Media Query will
now listen for a device view-port width of 390px. Note
that once the Iframe decreases width by only ten pixel,
the media query for 400px will not match anymore. At
the same time, the second media query shall be acti-
vated and deploy its assigned styles, including back-
ground image requests and alike.
3. As a next step, the height of the Iframe embedding
the injected site will be changed. This can be per-
formed by a CSS animation and the Webkit-speciﬁc
information leak, a script running on the website host-
ing the Iframe, or a manual size change in case the
attacker generated a pop-up or an Iframe displayed in
the edit-mode; if the hosting site displays the Iframe
in edit-mode, a click-and-drag action will accomplish
the resize (consider a browser-game scenario for social
engineering).
The CSS animation persists to be the most likely case
not requiring any user interaction. Once the height
of the Iframe is reduced, the size change will force its
contents to line-break. By itself, this breaking line
will generate a vertical scrollbar forced by the injected
overﬂow-behavior or simply the window default.
The scrollbar will occupy about 10-15 pixels and thereby
reduce the view-port size from 400 to 390 or less pixels
in width. This will trigger the second media query and
a background image can be displayed, in parallel leak-
ing the exact position and time of the line-break, the
scrollbar appearance and thereby the width and nature
of the information contained by the box. This ﬁnalizes
the attack and classiﬁes the combination of aforemen-
tioned features with CSS Media Queries as yet another
potential information leak. The screenshot in Figure 1
illustrates this case.
Again, we created a public test-case available at http:
//html5sec.org/scrollbar/test to demonstrate scriptless
determination of scrollbar existence. To initiate the test,
the window has to be initially resized, and then manually
reduced in height in a manner of dragging its lower boundary
towards the upper boundary. Note that this can of course
be accomplished automatically across domains.
To combine this attack technique with our running ex-
ample, we simply use the size-decreasing pop-up window or
Iframe to determine when the visible content-size is being
undercut and causes the scrollbar to appear. At this mo-
ment, the overall view-size will decrease as well and cause ap-
pearance of a side channel by having the CSS Media Query
initiate a HTTP request via (for example) background im-
ages. Note that this time we do not need to utilize timing
attacks: The media query CSS provides detailed information
on the pixel width that the scrollbars appeared at. Combin-
ing that information with the known distinct width of the
contextual ligature replacing the credit card number creates
a verbose and precise side channel attack.
3.4 Building Dictionary Fonts using Contex-
tual Alternatives
To accelerate the process of identifying and determining
particular strings and sub-strings on an injected website, an
attacker might need a large number of diﬀerent fonts and
requests. The aforementioned attack samples are described
as capable of exﬁltrating single characters from an injected
website. To be more eﬃcient, the adversary can employ the
Discretionary Ligatures or Contextual Alternatives provided
by SVG and WOFF fonts [14]. By injecting a cross-domain
font containing a dictionary of several hundreds of thou-
sands of string combinations, one can greatly accelerate the
detection process.
Note that the character information for each string rep-
resentation can be small in size: Fonts use vector graph-
ics and all that is necessary to deliver the detection feature
of a distinct width can be contained by a path compris-
ing of two single points. Within a single font ﬁle of one
megabyte in size, an attacker can store vast amounts of
contextual alternatives that depend on the nature of the
represented string. As for data leakage of numerical val-
766ues (for instance for being able to leak credit card num-
bers or similar information), the attack font can be even
smaller in size and still easily discover and represent the
single blocks a credit card number consists of. The tools
necessary to create attack fonts are freely available for le-
gitimate use; for creating SVG fonts containing dictionaries
a simple text editor suﬃces. Compressing the font to the
SVGZ (compressed SVG) format to be optimized in size re-
quires a simple gzip implementation. For editing and abus-
ing WOFF fonts, the free and open textttFontForge tool
available at http://fontforge.sourceforge.net/ can be
easily well-used.
The results of our research signify that font-injections
might actively contribute to the future attack landscape.
While CSP and NoScript protect against cross-domain font
injections by default, we need to monitor public font APIs
use. That is because they can be abused and deliver attack
fonts, bypass white-list-based ﬁlters and protection tools.
By doing so, they will be breaking the trust users put into
providers such as Google Web Fonts and TypeKit, both of
which are free web-font deployment services.
4. MITIGATION TECHNIQUES
In this section, we analyze existing attack mitigation tech-
niques to determine to what extent website owners and de-
velopers can protect against scriptless attacks. Acknowledg-
ing the wide range of possibilities for scriptless attacks (this
publication only discusses two of potentially many more at-
tacks’ variations), we conclude that several layers of pro-
tection are necessary to eﬀectively and holistically defend
against CSS-, SVG- and HTML-based data leakage.
4.1 Content Security Policy (CSP)
CSP was originally developed by Mozilla and it is now