    可更新的视图  
    存储过程  
    unicode支持  
针对MySQL的对应特性的PostgreSQL补充：  
除了不支持多存储引擎，其他PG均原生支持或有其他实现方法。  
1\. 使用pgmemcached和触发器可以实现类似MySQL的query cache。但是对用户来说会更复杂。  
2\. 支持基于规则或触发器的分区，触发器分区可以实现任意形式的分区，但是需要注意提升触发器函数的效率。  
3\. 网络协议压缩，PG可使用SSL的压缩功能达到同样的目的，使用合理的加密算法可以在性能和安全性方面权衡。  
4\. 基于SQL语句或ROW的复制，PG 9.4已经实现逻辑复制协议，可以自定义decode实现基于ROW的逻辑复制。或者使用第三方的复制解决方案，例如slony, londiste3, bucardo, trigger等。  
5\. PG支持各种外部函数语言来扩充数据库端的编程能力，例如pl python, pl perl, pl tcl, pl R, pl java, pl javascript, pl lua, C等等。  
MySQL各种存储引擎介绍：  
MyISAM，表级别锁，在单线程的表扫描，索引扫描等操作比InnoDB更快。不支持ACID的事务，持久化，数据恢复，外键等特性。建议仅用于重度读应用场景。  
InnoDB，是一个ACID兼容存储引擎，支持行锁，使用UNDO来实现多版本并发控制。修改数据时先将原有数据拷贝到UNDO buffer，然后在原有数据上进行修改（当修改后的记录超出原有长度时，需要扩展或发生行迁移），使用UNDO BUFFER可以有效的减少UNDO 的IO，因为在事务提交后老版本的UNDO可以不再需要（除非有repeatable read的事务需要用到它，具体MySQL是否实现这一点不清楚）。（而PostgreSQL是产生多版本来实现MVCC的，所以需要垃圾回收进程，会产生额外的IO开销以及WAL日志，包括后续的FREEZE操作也将产生WAL日志。在实际的性能测试中发现只要IOPS能力足够，PG的垃圾回收对性能并不会造成太大的性能干扰，从今年的PG全球开发者大会透入的信息来看将来PG可能会使用新的并发控制手段。）  
innodb需要使用隐式主键，其他索引将指向这个主键，所以innodb的索引扫描实际上需要经过两次索引扫描。  
为了提高插入速度，InnoDB支持secondary index buffer来异步处理索引。对于在索引字段的流式写入可用合并大量的索引更新IO来提高性能。对于非流式写入，性能提升并不明显。同时使用异步索引合并有一个问题，查询时如果遇到过时的索引页，需要先合并索引才能使用这个索引。  
innodb支持数据压缩。  
NDB，一种内存集群存储引擎，使用2PC存储多份数据来实现数据的高可用，当所有节点都提交了再返回给用。支持自动节点恢复，支持在线添加节点。相比其他引擎，NDB的复杂JOIN性能会比较弱，（高版本的NDB引擎可能会有所改善）。  
PostgreSQL没有NDB类似的存储引擎，但是可以通过FDW来实现类似功能，例如fdw for redis。fdw for MySQL。  
## 多核扩展能力 #  
现在的CPU频率提升没有以前那么快，但是核数是越来越多，一台服务器有128个核也不足为奇。所以数据库在这种多核服务器上的性能显得尤为重要。  
通常MySQL在多核机器上需要通过部署多实例来利用服务器的处理能力，5.6在多核的扩展能力上有了进步。  
而PostgreSQL社区致力于打造企业级的数据库，对于多核的计算能力自然是重点方向。  
老唐在高性能的服务器上对MySQL和PostgreSQL做过测试，MySQL持续的强负荷运行容易hang住，而PostgreSQL不会出现这样的问题。  
## IO扩展能力 #  
PostgreSQL支持异步的客户端API，有40%的性能提升，同时服务端也支持异步提交，分组提交来降低IO请求，提升高并发的应用场景性能。  
http://www.postgresql.org/docs/devel/static/libpq-async.html  
MySQL 5.5版本开始 ， innodb引擎支持Linux的AIO，libaio userspace library  
http://dev.mysql.com/doc/innodb/1.1/en/innodb-performance-aio-linux.html  
## count(*) #  
### MySQL  
MyISAM引擎对于不带WHERE条件的count(*)查询可以在瞬间完成，原因是这个存储引擎记录了表的条数作为一个常量查询。对于带where条件的查询，还是需要扫描索引来提升速度。  
innodb引擎，不管带不带where条件，都需要索引来提升速度，但是因为innodb的索引中存储了版本信息，所以不需要扫描heap page来获得记录是否可用或可见的状态，因此不需要扫描heap page，只扫描index page。  
### PostgreSQL   
由于PG的索引中不包含版本信息，9.2以前的版本，count(*)不仅仅需要扫描索引，还需要扫描HEAP page来获得版本信息判断数据的可见性。从9.2开始，引入了visibility map记录了对所有会话可见的heap 页信息，在这些page中的记录，扫描index page即可，不需要扫描heap page。因此9.2开始支持index only scan技术，减少HEAP PAGE的扫描。  
对于不带where条件的count(*)，PG没有存储计数器，所以至少需要扫描整个索引来获得记录数。当然你可以通过触发器来实现计数器（为了降低锁冲突，你可以使用多条记录来计数）。  
## 事务系统 #  
### MySQL  
通过UNDO来实现并发控制，当更新记录时，首先将老的版本写入UNDO BUFFER，然后在当前HEAP PAGE中更新当前的记录，如果存储超出原来的记录位置，将发生行迁移，这种情况下需要连带更新索引。  
弊端：1. 对于变长字段的更新，如果更新后的值长度超出原来的值，那么就会引发行迁移以及索引的更新。2. 频繁的更新或者一次更新大量记录时，UNDO BUFFER如果不够，可能导致性能严重下降。3. 回滚速度比较慢。  
UNDO BUFFER足够大的情况下，可以有效的减少UNDO的写IO，因为事务提交后，如果没有其他事务（如repeatable read级别的事务）引用这个记录，那么这个UNDO记录是可以从buffer中清理掉的，而不需要写到UNDO磁盘中。  
分组提交，在高并发的请求场景可以有效的降低REDO的写频度。  
### PostgreSQL  
通过多版本来实现并发控制，当发生更新时，会产生一个新的版本。PG会尽量将这条新版本记录放到当前数据块中，使用本数据块内的地址引用来检索这条新的记录，这种情况下可以减少索引的更新（即HOT）。  
弊端，需要回收垃圾，XID需要轮询使用，需要FREEZE，产生更多的REDO 日志。  
好处，1. 回滚速度很快，因为老的版本并没有删除。2. 可以有效的实施更高的隔离级别如repeatable read, serialized隔离级别。3. 锁粒度可以很细。   
优化手段，对于需要频繁更新或删除的表，尽量不要使用宽表，或者说不需要变更的字段不要放到这个表中，使用PK来引用。这样可以有效的减少垃圾TUPLE的长度。（当然这种做法也使得查询效率下降，因为访问拆分后的原来宽表上的所有字段需要扫描更多的数据块）  
## 连接扩展能力和线程池 #  
MySQL，线程模式，并且使用了线程cache来提升新建连接的效率。所以对于短连接业务MySQL的效率很高。  
PostgreSQL，进程模式，每个连接对应一个数据库服务端进程，每次新建连接时PostgreSQL需要fork一个backend process，不适用于短连接。使用连接池可以有效的弥补 PostgreSQL的连接开销，例如pgbouncer连接池。但是需要注意使用连接池时，如果使用了prepared statement, 请使用session模式，其他模式不适合，因为其他模式的server pool复用时创建prepared name的连接可能已经分配到其他客户端或者不在了。  
## benchmark #  
因为优化水平，测试模型的不同，测试数据可能 有一定的偏颇，所以不提供这个对比。  
PostgreSQL 可以参考一下我之前写的一系列PostgreSQL和Oracle在简单查询中的性能测试文章。  
http://blog.163.com/digoal@126/blog/static/163877040201541104656600/  
http://blog.163.com/digoal@126/blog/static/16387704020154431045764/  
或者其他的一些测试文章:  
http://blog.163.com/digoal@126/blog/static/16387704020141013115219217/  
http://blog.163.com/digoal@126/blog/static/163877040201341441042613/  
http://blog.163.com/digoal@126/blog/static/1638770402013414549515/  
MySQL 请自行测试。  
## ACID实现承诺 #  
ACID即数据库的原子性，一致性，隔离性，持久性。  
PostgreSQL提供完整的ACID支持。  
MySQL则和存储引擎有关，innodb引擎支持ACID，但是当你使用了多个存储引擎时，这个特性将被破坏，例如一个事务中包含了多种存储引擎的表的操作，又或者不同的存储引擎间的数据表有主外键关联并且有级联操作时，在恢复时可能出现数据的不一致。原因是触发器是在SQL层实现，而外键是在存储引擎层面实现导致。  
NDB集群同样提供ACID兼容，通过存储多份数据来实现，但是请注意，多份数据都是存储在内存中的。  
## 特性 #  
### 图形化管理工具 ##  
#### MySQL  
MySQL Workbench  
http://dev.mysql.com/downloads/workbench/6.1.html  
#### PostgreSQL  
pgAdmin或其他的开源或商业GUI工具  
http://www.pgadmin.org/  
https://wiki.postgresql.org/wiki/Community_Guide_to_PostgreSQL_GUI_Tools  
### 简化使用或严格限制 ##  
例如MySQL对于varchar(2)类型，如果插入的值超出长度限制，会自动截断并告警。而PostgreSQL则直接返回错误。  
如果你在PostgreSQL要实现同样的需求，可以参考如下文章，自动截断超出部分的字符串：  
http://blog.163.com/digoal@126/blog/static/16387704020153214036162/  
### Insert Ignore / Replace ##  
存在则更新或忽略，不存在则插入。  
PostgreSQL 9.5开始支持这个特性，此前需要在事务中或函数中处理类似需求。  
http://www.postgresql.org/docs/9.5/static/sql-insert.html#SQL-ON-CONFLICT  
MySQL支持这个特性。  
### 约束 ##  
MySQL仅支持非空，唯一，主键约束。在innodb和NDB引擎中还支持外键约束。对于CHECK约束，MySQL直接忽略。对于数据完整性要求严格的场景不适用(尽管可以使用触发器来代替CHECK约束，但是某些极端场景仍然可能造成问题)。  
MySQL外键约束的支持也不够完善，例如不支持级联操作。不支持跨存储引擎的外键。不支持延迟约束检测（事务结束时检测）  
PostgreSQL支持完成的约束，包括非空，唯一，主键，外键，级联外键操作，延迟约束检查（PG通过事务隔离级别和原子性来保证数据的完整性），实时约束检查，函数约束，触发器，域约束类型等。  
对于数据要求严谨的场景，建议使用PostgreSQL。  
### 字段默认值 ##  
MySQL仅仅支持NOW作为时间字段的默认值。  
PostgreSQL支持任意函数（包括sql,c,plpgsql,plR,plpython,pljava,...所有支持的函数），或常量作为默认值。  
### 存储过程 ##  
PostgreSQL支持多种函数语言，例如C, plperl, plpython, pltcl, pljava, pljavascript, plR, plproxy, plpgsql, 等.  
这些函数可以在数据库中任意使用，例如支持用于创建触发器函数，在触发器函数中被调用，在其他函数中调用等。同时支持在线调试，大部分函数语言支持online code。支持用于创建操作符等。  
安全方面，支持security definer, invoker权限设定。支持语言本身的使用权限设置，函数的权限设置。  
成本优化方面，支持函数的成本设定，在WHERE条件中使用时根据函数的成本因子可以  
支持函数返回复合类型，表类型，游标，任意类型，结果集等。  
支持函数使用动态参数，复合参数，游标参数等。  
MySQL通过插件可以安装外部语言，支持一些常用的语言例如php, python。但是这些语言只能在SQL中使用，不能被用在存储过程或触发器中。  
### 触发器 ##  
#### MySQL，  
    不是所有的存储引擎都支持触发器。  
    注意MySQL的触发器只能通过SQL语句触发，所以当调用不产生SQL的API时，例如NDB API（http://dev.mysql.com/doc/refman/5.1/en/triggers.html），不会触发。  
    另外需要注意触发器的级联更新不会被触发，因为触发器是在innodb引擎层面实现的，而不是数据库层面。  
    使用MySQL触发器需要注意以上两种情况，你可能会错过本应该触发的场景。（PostgreSQL不存在这些问题）  
    5.7以前，MySQL在同一个触发事件下，只能创建一个触发器，例如maximum one ON UPDATE BEFORE and one ON UPDATE AFTER trigger。（PostgreSQL不存在这些问题）  
#### PostgreSQL，  
    支持使用任意用户定义的函数作为触发器函数，在触发器函数中也支持用户定义的任意函数。  
    支持向触发器传递参数，支持在触发器函数中使用上下文相关的环境变量，例如事件，什么时候出发，触发器函数名称，用户，客户端IP，客户端端口，触发的对象，SCHEMA，数据库，等等。  
    支持在一个事件上创建多个触发器（触发顺序和触发器名字的ASCII排序相关），支持在多个事件上使用同一个触发器。  
    支持延迟触发，例如在事务提交前触发。（MySQL不支持延迟触发）  
    支持列级触发器，(MySQL不支持)  
    支持按条件触发触发器函数，例如WHEN OLD.x <> NEW.x，(MySQL不支持)  
    支持视图触发器，  
    支持级联触发，  
    除了支持触发器，还支持rule.  
    支持在视图上创建触发器或rule。  
## 复制和高可用 #  
### PostgreSQL，  
基于WAL的复制，可以复制整个集群，或者复制部分集群（例如表空间），也可以从WAL解出ROW后进行过滤复制（类似MYSQL的BIN LOG复制）  
![pic](20150723_01_pic_001.png)  
![pic](20150723_01_pic_002.png)  
支持4种事务写WAL级别，分别代表  
异步提交，  
等待本地XLOG持久化，  
等待本地XLOG持久化以及同步流复制节点xlog WRITE，  
等待本地XLOG持久化，以及同步流复制节点XLOG持久化。  
用户可以根据事务的可靠性要求以及性能要求选择合适的事务提交级别。  
参考代码：  
src/include/access/xact.h  
```  
typedef enum  
{  
        SYNCHRONOUS_COMMIT_OFF,         /* asynchronous commit */  
        SYNCHRONOUS_COMMIT_LOCAL_FLUSH,         /* wait for local flush only */  
        SYNCHRONOUS_COMMIT_REMOTE_WRITE,        /* wait for local flush and remote  
                                                                                 * write */  
        SYNCHRONOUS_COMMIT_REMOTE_FLUSH         /* wait for local and remote flush */  
}       SyncCommitLevel;  
```  
src/backend/replication/syncrep.c  
```	  