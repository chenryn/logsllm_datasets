title:Secure Dynamic Software Loading and Execution Using Cross Component
Verification
author:Byungho Min and
Vijay Varadharajan
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Secure Dynamic Software Loading and Execution using
Cross Component Veriﬁcation
Byungho Min and Vijay Varadharajan
Advanced Cyber Security Research Centre
Department of Computing, Macquarie University
{byungho.min, vijay.varadharajan}@mq.edu.au
Sydney, Australia
Abstract—In this paper, we propose a cross veriﬁcation
mechanism for secure execution and dynamic component loading.
Our mechanism is based on a combination of code signing
and same-origin policy, and it blocks several types of attacks
from drive-by download attacks to malicious component loadings
such as DLL hijacking, DLL side-loading, binary hijacking,
typical DLL injection and loading of newly installed malware
components, even when malicious components have valid digital
signatures. Considering modern malware often uses stolen private
keys to sign its binaries and bypass code signing mechanism,
we believe the proposed mechanism can signiﬁcantly improve
the security of modern computing platforms. In addition, the
proposed mechanism protects proprietary software components
so that unauthorised use of such components cannot occur.
We have implemented a prototype for Microsoft Windows 7
and XP SP3, and evaluated application execution and dynamic
component loading behaviour under our security mechanism. The
proposed mechanism is general, and can be applied to other
major computing platforms including Android, Linux and Mac
OS X.
I.
INTRODUCTION
Dynamic component loading is an important mechanism
for software development. This technique enables an appli-
cation to ﬂexibly load a component and use its exported
functionalities. Its beneﬁts include modularity and generic
interfaces for third-party software such as extensions. It is
also recommended for security since it helps to isolate and ﬁx
software bugs and vulnerabilities. Though ﬂexible, several se-
curity concerns including remote attacks have been raised [1],
[2], [3], [4], [5], [6], and many real world malware samples
use one of malicious component loading techniques [7], [8],
[9], [10], [11]. In particular, DLL hijacking is one of the
most widely explored malicious component loading attack;
a malicious component is added to a speciﬁc path of target
system (e.g. Desktop folder), and then the DLL is loaded by
vulnerable software due to the unsafe path search of Microsoft
Windows [2], [3]. Similar hijacking attack for the Microsoft
Windows system binary, cmd.exe, can be thought as a form
of malicious binary loading [4]. DLL side-loading is another
example of malicious component loading methods that has
been known for a while; this attack places a spoofed malicious
DLL in a Microsoft Windows’ WinSxS folder so that the
operating system loads it
instead of a legitimate ﬁle [5].
Moreover, advanced malware instances from the notorious
Stuxnet to the recent Careto (that has been disclosed in 2014)
use various DLL injection techniques in order to load their
components (i.e. malicious DLLs) in the context of the target
process, e.g. Windows Explorer [9], [11]. Modern malware
instances take modular design in order to take advantage
of dynamic component loading. Most of advanced malware
instances including Stuxnet, Duqu, Flame, Gauss and Careto
have several malicious components [7], [8], [9], [10], [11], and
this modular design has made them operate, hide and update
more effectively. In addition to this characteristic, many of
recent malware incidents were started from drive-by download
and watering hole attacks that automatically download and
install malware when a victim opens a malicious ﬁle or visits
a malicious link. This attack is used in various malware oper-
ations from massive spamming to targeted advanced persistent
threats [12], [13], [14].
The software security community has developed several
ways of hardening the security of dynamic component loading
(see Section VII on Related Work); code signing is one
such technique. Modern client computing platforms such as
Microsoft Windows, Apple Mac OS X, Apple iOS and Google
Android have code signing mechanisms built in [15], [16],
[17], [18]. By using code signing at operating system level,
only legitimately signed binaries and software components can
be loaded or can be run on the operating system. Apple has
mandated this code signing on its mobile operating system,
iOS, and this is one major reason why the number of iOS
malware is much smaller than that of Android [19]. In desktop
environment, Microsoft Windows has mandated the use of
signed binary for drivers since they run at kernel level. In
addition, several anti-virus solutions including Kaspersky alerts
or even prevents loading of unsigned software components.
The adversary never stops making workaround for secu-
rity mechanisms, and code signing is not an exception. In
particular, Apple iOS code signing was broken in 2011 [20].
Even worse, attackers started stealing private keys used for
code signing from small vendors, and used them to have
their malicious binaries legitimately signed [8], [9], [11], [21].
Not only advanced malware instances like Stuxnet, Duqu, and
Careto, but also average malware samples are using digital
signatures. The number of newly discovered signed malware
samples was more than 2.3 million in the 4th quarter of 2013;
on an annual basis in 2013, the number discovered reached
almost 5.7 million [22].
In this paper, we propose an extended code signing mech-
anism for secure execution and dynamic component loading.
Currently, operating systems that check digital signatures of
binaries verify only the validity of such signatures. We con-
sidered the context and relationship of execution and com-
ponent loading, and improved the conventional code signing
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
DOI 10.1109/DSN.2015.17
DOI 10.1109/DSN.2015.17
113
113
mechanism. The proposed mechanism makes use of two-way
signature veriﬁcation between the caller and the callee, and
disallows unauthorised use of software components. It prevents
various malicious attacks including DLL hijacking, DLL side-
loading, binary hijacking, and typical DLL injection even when
valid digital signature is used by the adversary. It also thwarts
drive-by download attack and trampoline-style malicious pay-
loads. In addition, we found out that our security mechanism
provides protection to proprietary software components so that
they cannot be illegitimately used by other software such as
unsafe third-party plugins and cracker (Section IV).
We have developed a prototype of the proposed mechanism
and have carried out a thorough evaluation. We have used
API hooking technique to modify the behaviours of component
loading and process creations. Our evaluations show that the
proposed mechanism is an effective way of preventing various
attacks even when malware are armed with legitimate digital
signatures.
The remainder of this paper is structured as follows. Sec-
tion II describes the background on core concepts such as code
signing and same-origin policy (SOP). Section III describes
the proposed code signing mechanism in general. Application
execution and dynamic component loading cases using the
proposed mechanism are explored in Section IV illustrating
how the various types of attacks are prevented. Section V
presents our prototype implementation and its evaluation re-
sult. Discussion on the extension of the proposed mechanism
and its limitations are given in Section VI. We survey related
work, and then conclude the paper with a discussion of future
work in Sections VII and VIII respectively.
II. BACKGROUND
A. Code Signing
Code signing is the process of digitally signing executable
binaries and scripts to conﬁrm the identity of the software
vendor, and to guarantee that the code has not been altered
or corrupted since it was signed [17], [16], [15], [23], [24],
[25], [26], [27]. Publicly trusted certiﬁcation authorities (CA)
conﬁrm signers’ identities, and bind their public key to a code
signing certiﬁcate [26].
Although modern client computing platforms are shipped
with essential built-in software, many users still want to install
various applications from social media to corporate-speciﬁc
one on their computers and mobile devices. In other cases,
some web services request users to install certain applications
or web browser plugins. In addition, users are advised to
update or patch software so as not to become vulnerable to
several attack vectors. In these circumstances, the users have
to make a decision, whether to believe the software they
downloaded or not. Code signing was proposed to help the
users make this decision.
The concept of code signing is clear. A software vendor
digitally signs their binaries such as executable ﬁles and com-
ponents so that anyone can verify the following information:
• Who signed the binary? (Authentication)
• Has the binary modiﬁed since it was signed? (Integrity)
However although a binary has a valid digital signature,
it does not mean that the binary is safe to execute on the
system. A digital signature provides a mechanism that proves
the binary’s origin and integrity; using such signature, the users
can decide more conﬁdently whether to believe the binary or
not. For instance, if a user encounters a binary from Microsoft
that is proven not to be modiﬁed, and believes that big software
vendors such as Microsoft will not intentionally harm their
customers’ systems with their own products, then the user will
trust the binary, and will allow it to be executed. Without the
digital signature, one cannot guarantee the origin of a binary
and its integrity.
B. Code Signing Procedure
When a software vendor wants to sign its binaries, it has
to generate a private–public key pair, and submit the generated
public key to a CA, along with a request to issue a code signing
certiﬁcate. The CA veriﬁes the identity of the vendor, and
authenticates the vendor’s digitally signed certiﬁcate request.
Once this veriﬁcation is successful,
the CA packages the
identity of the vendor with the public key, and signs the
package, creating the code signing certiﬁcate.
After the vendor obtains the code signing certiﬁcate, it
can sign its binaries. A signed binary contains additional
information that is used by users’ systems to authenticate the
vendor, and to verify the integrity of the binary. The procedure
of creating a digitally signed binary is as follows
1) Hash value of the binary is calculated.
a) The binary is passed through a hash function, creating
a ﬁxed-length digest of the binary, because public key
algorithms are inefﬁcient for signing large-size binaries.
b) The hash value is a cryptographically unique repre-
sentation of the binary.
c) The hash value can be re-calculated only by using the
unaltered binary and the hash function that was used
to create the hash value.
2) The hash value is signed using the private key of the
vendor.
a) The hash value is passed through a signing function
using the vendor’s private key as an input.
b) Information about the publisher and the CA is drawn
from the code signing certiﬁcate and incorporated into
the signature.
3) The original binary, the generated signature and the code
signing certiﬁcate are packaged into a single ﬁle.
a) The code signing certiﬁcate key is added to the bundle,
since the public key is required to authenticate the
binary when it is veriﬁed.
C. Signature Veriﬁcation Procedure
On loading a signed binary, the user system checks the
authenticity of the binary using the public key of the vendor
(i.e. signer), the digital signature and the hash value of the
original binary. Only if the signature veriﬁcation is successful,
the system determines the binary as valid. Otherwise, appropri-
ate action is taken; iOS and Mac OS X (default conﬁguration)
does not allow such an invalid binary to be executed, while
114114
(cid:13)(cid:23)(cid:21)(cid:27)(cid:19)(cid:18)(cid:1)(cid:16)(cid:23)(cid:27)(cid:15)(cid:30)(cid:36)(cid:2)
(cid:3)(cid:4)(cid:3)
(cid:3)(cid:4)(cid:3)(cid:4)(cid:3)(cid:4)
(cid:3)(cid:4)(cid:3)(cid:4)(cid:3)(cid:4)(cid:2)
(cid:10)(cid:23)(cid:27)(cid:15)(cid:30)(cid:36)(cid:2)
(cid:2)(cid:2)(cid:2)(cid:2)
(cid:2)(cid:6)(cid:5)(cid:7)(cid:3)(cid:9)(cid:10)(cid:8)(cid:4)(cid:1)(cid:2)
(cid:21)(cid:27)(cid:19)(cid:18)(cid:1)(cid:22)(cid:15)(cid:31)(cid:22)(cid:1)(cid:34)(cid:15)(cid:25)(cid:33)
(cid:13)(cid:23)(cid:21)(cid:27)(cid:19)(cid:18)(cid:1)(cid:22)(cid:15)(cid:31)(cid:22)(cid:1)(cid:34)(cid:15)(cid:25)(cid:33)(cid:19)(cid:2)
(cid:11)(cid:19)(cid:30)(cid:32)(cid:23)(cid:1)(cid:17)(cid:15)(cid:32)(cid:19)(cid:2)
(cid:14)(cid:19)(cid:30)(cid:23)(cid:20)(cid:36)(cid:23)(cid:27)(cid:21)(cid:1)(cid:22)(cid:15)(cid:31)(cid:22)(cid:1)(cid:34)(cid:15)(cid:25)(cid:33)(cid:19)
(cid:35)(cid:23)(cid:32)(cid:22)(cid:1)(cid:29)(cid:33)(cid:16)(cid:25)(cid:23)(cid:17)(cid:1)(cid:24)(cid:19)(cid:36)
(cid:20)(cid:30)(cid:28)(cid:26)(cid:1)(cid:17)(cid:19)(cid:30)(cid:32)(cid:23)(cid:1)(cid:17)(cid:15)(cid:32)(cid:19)(cid:2)
(cid:2)(cid:2)(cid:2)(cid:2)
(cid:2)(cid:6)(cid:5)(cid:7)(cid:3)(cid:9)(cid:10)(cid:8)(cid:4)(cid:1)(cid:2)
(cid:25)(cid:33)(cid:19)
(cid:13)(cid:23)(cid:21)(cid:27)(cid:19)(cid:18)(cid:1)(cid:22)(cid:15)(cid:31)(cid:22)(cid:1)(cid:34)(cid:15)(cid:25)(cid:33)(cid:19)(cid:2)
(cid:2)(cid:2)(cid:2)(cid:2)
(cid:5)(cid:6)(cid:7)(cid:8)(cid:2)(cid:2)(cid:2)(cid:2)
(cid:12)(cid:15)(cid:31)(cid:22)(cid:1)(cid:34)(cid:15)(cid:25)(cid:33)(cid:19)
(cid:20)(cid:30)(cid:28)(cid:26)(cid:1)(cid:32)(cid:22)(cid:19)(cid:1)(cid:29)(cid:15)(cid:17)(cid:24)(cid:15)(cid:21)(cid:19)(cid:2)
(cid:12)(cid:15)(cid:31)(cid:22)(cid:23)(cid:27)(cid:21)(cid:1)(cid:17)(cid:28)(cid:18)(cid:19)(cid:1)(cid:35)(cid:23)(cid:32)(cid:22)
(cid:32)(cid:22)(cid:19)(cid:1)(cid:31)(cid:15)(cid:26)(cid:19)(cid:1)(cid:22)(cid:15)(cid:31)(cid:22)(cid:1)(cid:20)(cid:33)(cid:27)(cid:17)(cid:32)(cid:23)(cid:28)(cid:27)(cid:2)