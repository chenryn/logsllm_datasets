# musl-1.2.x堆部分源码分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 简介
[musl libc](https://musl.libc.org/) 是一个专门为嵌入式系统开发的轻量级 libc 库，以简单、轻量和高效率为特色。有不少
Linux 发行版将其设为默认的 libc 库，用来代替体积臃肿的 glibc ，如 [Alpine
Linux](https://zh.wikipedia.org/zh-cn/Alpine_Linux)（做过 Docker
镜像的应该很熟悉）、[OpenWrt](https://zh.wikipedia.org/wiki/OpenWrt)（常用于路由器）和 Gentoo 等  
1.2.x采用src/malloc/mallocng内的代码，其堆管理结构与早期版本几乎完全不同，而早期的堆管理器则放入了src/malloc/oldmalloc中。
## 数据结构
  * chunk: 最基础的管理单位, 关于0x10B对齐, 存在空间复用, musl里面没有专门的struct, 比较坑, 假设p指向用户数据开头 
    * 如果是group中第一个chunk, 
      * 那么p-0x10到p均为元数据, 作为group的头, 定义可以看struct group
    * 如果不是第一个chunk, 那么p-4到p为元数据 
      * p[-2], p[-1]这2B数据组成的uint_16, 代表offset, 表示与group中第一个地址的偏移
      * p[-3]&31组成的5bit代表idx, 表示这是group中第几个slot
    * 如果一个chunk已经被释放, 那么就会设置offset为0, index为0xFF
    * 因此申请0x2c空间, 最终分配到的chunk_size = (0x2c+4B元数据空间)align to 0x10 = 0x30
    struct chunk{
     char prev_user_data[];
        uint8_t idx;  //第5bit作为idx表示这是group中第几个chunk, 高3bit作为reserved
        uint16_t offset; //与第一个chunk的偏移
        char user_data[];
    };
  * group: 多个相同size的chunk的集合, 这些chunk是物理相邻的 
    * 一片内存中, storage用来保存多个chunk, 元数据放在这片内存开头
    * 一个group中第一个chunk的data为一个指针, 指向这个group的meta元数据, 对应meta结构体
    * 其余chunk使用offset表示与所属group中第一个chunk的偏移, 通过offset找到第一个chunk后, 再找到这个group对应的meta 
      * offset = slot_n[-2]
      * group = chunk_first = slot_n – offset*0x10
      * meta = group->meta
    * index = p[-3]&31, 表示这是一个group中第几个slot
    * 综上, 任何一个chunk都可以通过(group, index)这样的二元地址来定位
    #define UNIT 16
    #define IB 4
    struct group
    {
        //以下是group中第一个slot的头0x10B
     struct meta *meta;       //0x80B指针
     unsigned char active_idx : 5;    //5bit idx
     char pad[UNIT - sizeof(struct meta *) - 1]; //padding为0x10B
        //以下为第一个chunk的用户数据区域+剩余所有chunk
     unsigned char storage[];     //chunk
    };
  * meta: meta通过bitmap来管理group中的chunk 
    * meta之间以双向链表的形式形成一个队列结构, 如果说group是一纬的话, 那么meta队列就是二维的结构
    * 一个meta对应一个group,
    * 通过mem找到管理的group
    * 通过sizeclass来追踪group中chunk的size
    * freed_mask是已经被释放的chunk的bitmap, 4B
    * avail_mask是目前可用的bitmap, 4B
    * 由于bitmap的限制, 因此一个group中最多只能有32个chunk
    * meta可以是brk分配的, 可以是mmap映射的, 但是group只能是mmap映射的, 原因在后面
    struct meta
    {
     struct meta *prev, *next; //双向链表
     struct group *mem;    //管理的内存
     volatile int avail_mask, freed_mask;
     uintptr_t last_idx : 5;
     uintptr_t freeable : 1;
     uintptr_t sizeclass : 6;
     uintptr_t maplen : 8 * sizeof(uintptr_t) - 12;
    };
  * meta_area: 是多个meta的集合, 
    * mallocng分配meta时, 总是先分配一页的内存, 然后划分为多个带分配的meta区域
    * meta_arena描述就是一页内存的最开始部分, slots可视为struct meta的集合
    * 由于meta_arena位于一页内存的开头, 当meta被使用时, 通过清空12bit指针就可以找到meta_arena结构体
    * 为了保证meta结构体是有效的, 并且不会被伪造, mallocng实现了一个验证机制, 保证meta是被meta_arena保护的
    * 检查: 把一个arena指针的低12bit清空, 当做meta_arena结构体, 然后检查其中的check与__malloc_context中的secret是否一致
    struct meta_area
    {
     uint64_t check;   //校验值
     struct meta_area *next; //下一个分配区
     int nslots;    //多少个槽
     struct meta slots[]; //留给剩余的meta的槽
    };
    /*
    - 逻辑视图
    __malloc_context.avtive[sc]
    |
    meta->|group头 | chunk | chunk| ...|
    |
    meta->|group头 | chunk | chunk| ...|
    |
    meta->|group头 | chunk | chunk| ...|
    |
    一个group视为一纬的, 是一个线性的结构, 包含多个chunk
    一个meta通过bitmap来管理一个group中的chunk
    一个avtive则是多个meta形成的循环队列头, 是一个二维的结构, 里面包含多个meta
    active就是多个队列头组成的数组, 是一个三纬结构, 保护各个大小的meta队列
    */
  * __malloc_context 
    * 所有运行时信息都记录再ctx中, ctx是一个malloc_context结构体, 定义在so的data段
    //malloc状态
    struct malloc_context
    {
     uint64_t secret;
    #ifndef PAGESIZE
     size_t pagesize;
    #endif
     int init_done;     //有无完成初始化
     unsigned mmap_counter;   //mmap内存总数
     struct meta *free_meta_head; //释放的meta组成的队列
     struct meta *avail_meta;  //指向可用meta数组
     size_t avail_meta_count, avail_meta_area_count, meta_alloc_shift;
     struct meta_area *meta_area_head, *meta_area_tail; //分配区头尾指针
     unsigned char *avail_meta_areas;
     struct meta *active[48];   //活动的meta
     size_t usage_by_class[48]; //这个大小级别使用了多少内存
     uint8_t unmap_seq[32], bounces[32];
     uint8_t seq;
     uintptr_t brk;
    };
    struct malloc_context ctx = {0};
## 基础操作
  * meta形成的队列相关操作
    //入队: meta组成一个双向链表的队列, queue(phead, m)会在phead指向的meta队列尾部插入m
    static inline void queue(struct meta **phead, struct meta *m)
    {
     //要求m->next m->prev都是NULL
     assert(!m->next);
     assert(!m->prev);
     if (*phead)
     { //把m插入到head前面, 属于队列的尾部插入, *phead仍然指向head
      struct meta *head = *phead;
      m->next = head;
      m->prev = head->prev;
      m->next->prev = m->prev->next = m;
     }
     else //队列式空的, 就只有m自己
     {
      m->prev = m->next = m;
      *phead = m;
     }
    }
    //出队: 从队列中删除m节点
    static inline void dequeue(struct meta **phead, struct meta *m)
    {
     if (m->next != m) //队列不只m自己
     {
      //队列中删除m
      m->prev->next = m->next;
      m->next->prev = m->prev;
      //如果删除的是头, 那么就把队列头设置为下一个
      if (*phead == m)
       *phead = m->next;
     }
     else //如果只有m自己, 那么队列就空了
     {
      *phead = 0;
     }
     //清理m中的prev和next指针
     m->prev = m->next = 0;
    }
    //获取队列头元素
    static inline struct meta *dequeue_head(struct meta **phead)
    {
     struct meta *m = *phead;
     if (m)
      dequeue(phead, m);
     return m;
    }
  * 内存指针转meta对象
  * 原理: 
    * p – 固定偏移 => group结构体
    * group->meta指针, 得到所属的meta对象
    * meta地址与4K向下对齐, 就可找到位于一页开头的meta_area结构体, 但是检查多
    static inline struct meta *get_meta(const unsigned char *p)
    {
     assert(!((uintptr_t)p & 15));    //地址关于0x10对齐
     int offset = *(const uint16_t *)(p - 2); //偏移
     int index = get_slot_index(p);    //获取slot的下标
     if (p[-4])         //如果offset不为0，表示不是group里的首个chunk，抛出异常
     {
      assert(!offset);
      offset = *(uint32_t *)(p - 8);
      assert(offset > 0xffff);
     }
     const struct group *base = (const void *)(p - UNIT * offset - UNIT); //根据内存地址获得group结构地址
     const struct meta *meta = base->meta;         //根据meta指针获取管理这个group的meta对象
     //检查
     assert(meta->mem == base);      //自闭检查: meta->mem==base, base->meta==meta
     assert(index last_idx);    //?
     assert(!(meta->avail_mask & (1u freed_mask & (1u check == ctx.secret);
     //检查sizeclass
     if (meta->sizeclass = size_classes[meta->sizeclass] * index);
      assert(offset sizeclass] * (index + 1));
     }
     else
     {
      assert(meta->sizeclass == 63);
     }
     if (meta->maplen)
     {
      assert(offset maplen * 4096UL / UNIT - 1);
     }
     return (struct meta *)meta;
    }
  * 根据size找到对应的size类别, 这部分和larege bin的机制类似 
        //size转对应类别
    static inline int size_to_class(size_t n)
    {
    n = (n + IB - 1) >> 4;
    if (n  size_classes[i + 1])
    i += 2;
    if (n > size_classes[i])
    i++;
    return i;
    }
## malloc()
  * 先判断有无超过mmap的阈值, 如果超过就mmap分配 
    * 如果没有超过, size转sc之后, 通过ctx.active[sc]找到对应的meta队列, 尝试从队列中首个meta里分配chunk
    * 如果这个队列为空, 或者这个meta的avail里面没有合适的chunk, 那就调用alloc_slot()获取chunk
    * 找到group与idx之后通过enframe()分配出这个chunk
    void *malloc(size_t n)
    {
     if (size_overflows(n)) //是否溢出
      return 0;
     struct meta *g;
     uint32_t mask, first;
     int sc;
     int idx;
     int ctr;
     if (n >= MMAP_THRESHOLD) //太大了, 直接MMAP分配内存
     {
      size_t needed = n + IB + UNIT;
      void *p = mmap(0, needed, PROT_READ | PROT_WRITE,
            MAP_PRIVATE | MAP_ANON, -1, 0);
      if (p == MAP_FAILED)
       return 0;
      wrlock();
      step_seq();
      g = alloc_meta(); //获取一个meta
      if (!g)
      {
       unlock();
       munmap(p, needed);
       return 0;
      }
      //mmap得到的内存相关信息记录在这个meta对象中
      g->mem = p;    //内存指针
      g->mem->meta = g; //meta指针
      g->last_idx = 0;
      g->freeable = 1;
      g->sizeclass = 63;     //63表示mmap的
      g->maplen = (needed + 4095) / 4096; //映射内存的长度
      g->avail_mask = g->freed_mask = 0;
      // use a global counter to cycle offset in
      // individually-mmapped allocations.
      ctx.mmap_counter++;