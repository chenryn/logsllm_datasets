\
\...
\
\
### Listener配置详解
\
\
\
\
\
\
\
\
\
\
\
### GlobalNamingResources配置详解
\
\
\
\
\
### Service配置详解
\
\
\
\
\
\ \
\ \
\
\
\\
\
\
\
Service：该元素用于创建 service实例，
默认使用org.apache.catalina. Core.
Standardservice，默认情况下Tomcat仅指定了Service的名称，值为\"
catalina\"。
Service可以内嵌的元素为：Listener、Executor、Connector、Engine。
Listener：用于为 service添加生命周期监听器，
Executor：用于配置 service共享线程池，
Connector：用于配置 Service包含的链接器，
Engine：用于配置 Service中链接器对应的servlet容器引擎。
#### Listener配置详解
#### Executor线程池配置详解
\
\
\--\>
默认情况下，Service并未添加共享线程池配置，多个connector使用的是自己的线程池，如果添加配置添加一个线程池，各个connector使用的是这个共享的线程池
可以在\下添加如下配置添加线程池
\
可用JDK中jconsole.exe工具查看线程，目录：JDK/bin/jconsole.exe
#### Connector连接器配置详解
Connector用于创建链接器实例。默认情况下
server.xml配置了两个链接器，一个支持HTTP协议，一个支持AJP协议。
\
\
\--支持AJP协议的connector
属性说明:
1）port：端口号,Connector用于创建服务端soocket并进行监听，以等待客户端请求链接。
2）protocol：当前
Connector支持的访问协议，默认为：HTTP/1.1.并采用自动切换机制选择一个基于
JAVA NIO的链接器或者基于本地APR的链接器（根据本地是否含有
Tomcat的本地库判定）。如果不希望采用上述自动切换的机制，而是明确指定协议，可以使用以下值。
Http协议
1、org.apache.coyote.http11.Http11Nioprotocol，非阻塞式vavaNIo链接器
2、org.apache.coyote.http11.Http11Nio2protocol，非阻塞式AVANIO2链接器
3、org.apache.coyote.http11.Http11AprProtocol, ARP链接器
AJP协议
1、org. Apache. coyote.ajp.AjpNioProtoco1，非阻塞式 Java NIo链接器
2、org. apache. coyote.ajp.AjpNio2Protoco1，非阻塞式 JAVA NIO2链接器
3、org. apache. coyote.ajp.AjpAprProtoco1，ApR链接器
3）
connectionTimeout:Connector接收链接后的等待超时时间，单位为毫秒。-1表示不超时。20000为20秒
4）
redirector：当前Connector不支持SSL请求，接收到了一个请求，并且也符合security-
constraint约束，需要SSL传输，catalina自动将请求重定向到指定的端口，例如重定向到：8443
5）executor：指定共享线程池的名称，也可以通过 maxThreads、
minspareThreads等属性配置内部线程池。
6）
URIEncoding：用于指定编码UR的字符编码，Tomcat8.x版本默认的编码为UTF-8,Tomcat7.x版本默认ISO-8859-1。
\
\
\
\
\
#### Engine引擎配置详解：
Engine作为servlet引擎的顶级元素，内部可以嵌入：cluster、Listener、Realm、Host和Valve
\
\
\
\
\
\
属性说明:
1）name：用于指定Engine的名称，默认为catalina。该名称会影响部分
Tomcat的存储路径（如临时文件）。
2）defaultHost：默认虚拟主机名，当客户端请求指向的主机无效时，将交由默认的虚拟主机处理，默认为localhost
\
\...\...
\
**例如：**
\
\
\
\
\
\
\
\
\
\
\
**浏览器访问localhost:8080就是访问www.test1.com中的webapps1里面的内容**
**浏览器访问www.test1.com 就是访问www.test1.com中的webapps1里面的内容**
**浏览器访问www.test2.com就是访问www.test2.com中的webapps2里面的内容**
##### Cluster
\
\--\>
\
##### Realm
\
\
\
\
##### Host
Host元素用于配置一个虚拟主机，它支持以下嵌入元素：Alias、cluster、Listener、Valve、Realm、Context。如果在Engine下配置了Realm，那么此配置将在当前Engine下的所有Host中共享。同样，如果在Host中配置Realm，则在当前Host下的所有
Context中共享。
Context中的Realm优先级\>Host的Realm优先级\> Engine中的Realm优先级。
\
\...
\
属性说明:
1）name：当前Host通用的网络名称，必须与DNS服务器上的注册信息一致。Engine中包含的Host必须存在一个名称与
Engine的defaultHost设置一致。
2）appEase：当前Host的应用基础目录，当前Host上部署的Web应用均在该目录下（可以是绝对目录或相对路径），默认为webapps
3）
unpackWARs：设置为true，Host在启动时会将appBase目录下war包解压为目录放置在同级目录。设置为false，
Host将直接从war文件启动。
4）autoDeploy：控制tomcat是否在运行时定期检测并自动部署新增或变更的web应用。
5）多个虚拟主机配置：
\
\
\
\
\
\
\
\