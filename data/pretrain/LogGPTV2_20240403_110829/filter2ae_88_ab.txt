    struct struct_interface{  int field_0;  struct struct_interface *next;  char *name_ptr;  int sdio_idx;  int fun_enable;  int funE;  int funF;  int funD;  int funA;  int funB; // 0x24  int funG;  int field_2C;};
结构中函数指针funB会被使用。如果g_interface_sdio被篡改，那么就会直接实现代码执行。
这是当函数interface_call_funB()中的指令”BX
R3”在地址0x3CD4E执行时的一份寄存器日志信息。此时，g_interface_sdio被覆盖成了0xabcd1211。
    LOG_BP_M0_CPSR      : 0xa000009bLOG_BP_M0_SP        : 0x5fec8LOG_BP_M0_LR        : 0x3cd50LOG_BP_M0_SPSP      : 0xa00000b2LOG_BP_M1_CPSR      : 0xa0000092LOG_BP_M1_SP        : 0x5536cLOG_BP_M1_LR        : 0x4e3d5LOG_BP_M1_SPSP      : 0xa0000013LOG_BP_M2_CPSR      : 0LOG_BP_M2_SP        : 0x58cb8LOG_BP_M2_LR        : 0x40082e8LOG_BP_M2_SPSP      : 0LOG_BP_R1           : 0x1cLOG_BP_R2           : 0LOG_BP_R3           : 0xefdeadbeLOG_BP_R4           : 0x40c0800LOG_BP_R5           : 0LOG_BP_R6           : 0x8000a500LOG_BP_R7           : 0x8000a540LOG_BP_R8           : 0x140LOG_BP_R9           : 0x58cb0LOG_BP_R10          : 0x40082e8LOG_BP_FP           : 0LOG_BP_IP           : 0x8c223fa3LOG_BP_R0           : 0xabcd1211
函数interface_call_funB()在地址0x4E3D0处被MCU中断的处理过程使用。
当复制的源地址到达0xC0040000时，整个内存可被看作是做了一次偏移。当复制的源地址到达0xC0080000时，整个内存偏移了两次。每次偏移的距离如下。
    0xC0016478-0xC000DC9B=0x87DD0xC0016478-0xC000E49B=0x7FDD0xC0016478-0xC000EC9B=0x77DD0xC0016478-0xC000F49B=0x6FDD
在多数情况下，漏洞触发后再产生中断时，这样的内存偏移会发生3至5次。所以指针g_interface_sdio会被来自下列地址的数据所覆盖。
    0xC000B818+0x87DD*1=0xC0013FF50xC000B818+0x87DD*2=0xC001C7D20xC000B818+0x87DD*3=0xC0024FAF0xC000B818+0x87DD*4=0xC002D78C…0xC000B818+0x7FDD*1=0xC00137F50xC000B818+0x7FDD*2=0xC001B7D20xC000B818+0x7FDD*3=0xC00237AF0xC000B818+0x7FDD*4=0xC004B700…0xC000B818+0x77DD*1=0xC0012FF50xC000B818+0x77DD*2=0xC001A7D20xC000B818+0x77DD*3=0xC0021FAF0xC000B818+0x77DD*4=0xC002978C…0xC000B818+0x6FDD*1=0xC00127F50xC000B818+0x6FDD*2=0xC00197D20xC000B818+0x6FDD*3=0xC00207AF0xC000B818+0x6FDD*4=0xC002778C…
地址0xC0024FAF、 0xC00237AF和0xC0021FAF刚好位于一个巨大的DMA buffer
0xC0021F90~0xC0025790之中。这个DMA buffer用于存储无线芯片接收到的802.11数据帧。所以这个DMA
buffer可以用来堆喷伪造的指针。
为了堆喷伪造的指针，我们可以发送许多正常的802.11数据帧给芯片，其中填满了伪造的指针。DMA
buffer非常大，因此shellcode也可以直接放在数据帧中。为了提高利用的成功率，我们用了Egg Hunter在内存中查找真正的shellcode。
如果g_interface_sdio被成功的覆盖。Shellcode或egg
hunter会非常的接近0xC000B818。我们所使用的伪造指针是0x41954，因为在地址0x41954+0x24处有一个指针0xC000B991。这样，我们可以劫持$PC到0xC000B991。同时，指针0x41954可被作为正常的指令执行。
    54 19 ADDS            R4, R2, R504 00 MOVS            R4, R0
用这种方法有25%的成功率获得代码执行。
## 攻击主机系统
内核驱动中的漏洞可通过由芯片发送命令数据包给主机系统来触发。命令HostCmd_CMD_GET_MEM通常由函数wlan_get_firmware_mem()发起。
这种情况下，pdata_buf指向的buffer由kmalloc()分配，所以这是一个内核堆溢出。在真实环境中函数wlan_get_firmware_mem()不会被用到，并且堆溢出的利用较复杂。
然而，一个被攻陷的芯片在返回某个命令的结果时可以更改命令ID。因此漏洞可以在许多命令的处理过程中被触发。这时，根据pdata_buf指向的位置，漏洞即可以是堆溢出也可以是栈溢出。我们找到了函数wlan_enable_11d()，它把局部变量enable的地址作为pdata_buf。因此我们可以触发一个栈溢出。
函数wlan_enable_11d()被wlan_11h_process_join()调用。显然HostCmd_CMD_802_11_SNMP_MIB会在与AP的连接过程中被使用。固件中的漏洞只能在Parrot已经加入AP后使用。为了触发wlan_enable_11d()中的栈溢出，芯片需要欺骗内核驱动芯片已经断开与AP的连接。接着，驱动会发起重连，在这个过程中HostCmd_CMD_802_11_SNMP_MIB会发送给芯片。于是，为了触发重连过程，芯片需要发送EVENT_DISASSOCIATED事件给驱动。
当在芯片中触发漏洞并获得代码执行之后芯片不能再正常工作。所以我们的shellcode需要自己处理重连过程中的一系列命令并返回相应的结果。在命令HostCmd_CMD_802_11_SNMP_MIB来到之前，唯一一个我们要构造返回结果的命令是HostCmd_CMD_802_11_SCAN。下面是断开连接到触发内核漏洞的整个过程。
SDIO接口上事件和命令数据包的发送可直接通过操作寄存器SDIO_CardStatus和SDIO_SQReadBaseAddress0来完成。SDIO接口上获得内核发来的数据可借助SDIO_SQWriteBaseAddress0寄存器。
## Linux系统中命令执行
Parrot的Linux内核2.6.36不支持NX，所以可以直接在栈上执行shellcode。同时结构HostCmd_DS_COMMAND中的size是u16类型，所以shellcode可以足够大来做许多事情。
在触发栈溢出并控制$PC之后，$R7刚好指向内核栈，所以可以很方便的执行shellcode。
在shellcode中的函数run_linux_cmd调用了Usermode Helper API来执行Linux命令。
## 远程获取shell
在漏洞触发后，芯片中的内存被完全破坏无法继续正常工作。同时内核栈已损坏，无法正常工作。
为了让Parrot的无线功能可以重新正常工作，我们做了如下事情：
1.在向内核发送完payload之后，我们通过如下命令重置了芯片。在这之后，内核驱动会重新发现芯片然后重新下载固件。
    *(unsigned int *)0x8000201c|=2;*(unsigned int *)0x8000a514=0;*(unsigned int *)0x80003034=1;
2.在shellcode的函数fun_ret()中调用内核函数rtnl_unlock()来解开rtnl_mutex锁。否则Linux的无线功能会无法正常功能，导致Parrot被CID重启。
3.在shellcode的函数fun_ret()中调用do_exit()来终止用户态进程wpa_supplicant并重新运行，这样就不需要修复内核栈。
4.杀掉进程ck5050并重新运行，否则稍后ck5050会因芯片重置而崩溃，导致Parrot被CID重启。
为了远程获取shell，我们强制让Parrot连入我们自己的AP并修改iptables规则。之后，便可通过23端口访问到Parrot的shell。
最终拿到shell的成功率在10%左右。
## 完整的利用过程
  1. 攻击者发送DEAUTH帧给附近的所有AP。
  2. 当Tesla重连至AP时，攻击者可以嗅探到特斯拉的MAC地址。
  3. 堆喷伪造的指针，然后发送Action帧来触发固件中的漏洞。
  4. 函数memcpy()会一直工作直到有中断产生。
  5. 在芯片内成功执行任意代码。
  6. 第一阶段shellcode发送EVENT_DISASSOCIATED事件给驱动。
  7. 第一阶段shellcode处理一系列命令并等待命令HostCmd_CMD_802_11_SNMP_MIB。
  8. 第一阶段shellcode通过SDIO接口发送payload来触发内核栈溢出。
  9. 第二阶段shellcode执行并调用call_usermodehelper()函数。
  10. 成功执行Linux系统命令并尝试修复Parrot的无线功能。
  11. 攻击者搭建自己的AP热点及DHCP服务器。
  12. 通过Linux命令强制Parrot加入攻击者建立的AP热点并修改iptables规则。
  13. 攻击者可通过Parrot的23端口获得Parrot的shell。
## 演示视频
## 总结
在这篇文章中，我们展示了Marvell无线芯片固件及驱动中漏洞的具体细节，并演示了如何利用这两个漏洞仅通过发送无线数据包的形式远程在Parrot系统内部实现命令执行。
## 负责任的漏洞披露
本文所提到的两个漏洞已于2019年3月报告给Tesla，Tesla已经在2019.36.2版本中对该漏洞进行了修复。同时，Marvell也修复了该漏洞并针对该漏洞发布了安全公告[4]。漏洞研究报告的披露已事先与特斯拉沟通过，特斯拉对我们的发布知情。
你可以通过下列链接来跟踪本文提到的漏洞。
  1. 
  2. 
  3. 
  4. 
  5. 
## 参考资料
[1] 
[2] 
[3] 
[4] 
* * *