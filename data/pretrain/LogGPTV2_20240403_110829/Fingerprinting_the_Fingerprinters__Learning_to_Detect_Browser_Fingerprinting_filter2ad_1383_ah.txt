non-ﬁngerprinting scripts. Figure 5, plots the similarity of FP-
INSPECTOR’s detected ﬁngerprinting and non-ﬁngerprinting
scripts with ﬁngerprintjs2. We ﬁnd that the majority of the
detected ﬁngerprinting scripts (54.06%) have less than 6%
similarity to ﬁngerprintjs2 and only 13.49% of the scripts have
more than 30% similarity. Whereas most of the detected non-
ﬁngerprinting scripts (90.94%) have less than 5% similarity to
ﬁngerprintjs2 and only 9.05% of the scripts have more than 5%
similarity. We ﬁnd that the true positive rate is at the highest
(69.20%) and false positive rate is at the lowest (5.97%) with
an accuracy of 81.69%, when we set the similarity threshold
to 5.28%. The shaded portion of the ﬁgure represents the
scripts classiﬁed as non-ﬁngerprinting and the clear portion
of the ﬁgure represents the scripts classiﬁed as ﬁngerprinting
using this threshold. There is a signiﬁcant overlap between the
similarity of both ﬁngerprinting and non-ﬁngerprinting scripts
and there is no optimal way to use similarity as a classiﬁcation
threshold.
Fig. 5: Jaccard similarity of ﬁngerprinting and non-ﬁngerprinting
scripts with ﬁngerprintjs2. The shaded portion of the ﬁgure represents
the scripts classiﬁed as non-ﬁngerprinting and the clear portion of the
ﬁgure represents the scripts classiﬁed as ﬁngerprinting based on the
similarity threshold.
Overall, our analysis shows that most websites do not inte-
grate ﬁngerprinting libraries as-is but instead make alterations.
Alterations often include embedding miniﬁed or obfuscated
versions of the ﬁngerprinting libraries, embedding only a
subset of the ﬁngerprinting functionality, or ﬁngerprinting
libraries inspired re-implementation. Such alterations cause a
lower similarity between ﬁngerprinting scripts and popular
ﬁngerprinting libraries. We also ﬁnd that several APIs are
frequently used in both ﬁngerprinting and non-ﬁngerprinting
scripts. Common examples include the use of utility APIs
such as Math and window, and non-ﬁngerprinting scripts using
ﬁngerprinting APIs for functional purposes e.g. canvas API
being used for animations. The presence of such APIs results
in increase of similarity between non-ﬁngerprinting scripts and
ﬁngerprinting libraries. A simple similarity metric cannot gen-
eralize on alterations to ﬁngerprinting libraries and functional
uses of APIs, and thus fails to detect ﬁngerprinting scripts.
Whereas, our syntactic-semantic machine learning approach
is able to generalize. Our analysis justiﬁes the efﬁcacy of a
learning based approach over simple similarity metric.
F. JavaScript APIs Frequently Used in Fingerprinting Scripts
Below we provide a list of JavaScript API keywords fre-
quently used by ﬁngerprinting scripts. To this end, we measure
the relative prevalence of API keywords in ﬁngerprinting
scripts by computing the ratio of their fraction of occurrence
in ﬁngerprinting scripts to their fraction of occurrence in
non-ﬁngerprinting scripts. A higher value of the ratio for a
keyword means that
in ﬁngerprinting
scripts than non-ﬁngerprinting scripts. Note that 1 means that
the keyword is only present in ﬁngerprinting scripts. Table IX
includes keywords that have pervasiveness values greater than
or equal to 16 and are present on 3 or more websites.
is more prevalent
it
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:55 UTC from IEEE Xplore.  Restrictions apply. 
1160
Keywords
onpointerleave
StereoPannerNode
FontFaceSetLoadEvent
PresentationConnection
AvailableEvent
msGetRegionContent
peerIdentity
MSManipulationEvent
VideoStreamTrack
mozSetImageElement
requestWakeLock
audioWorklet
onwebkitanimationiteration
onpointerenter
onwebkitanimationstart
onlostpointercapture
ongotpointercapture
onpointerout
onafterscriptexecute
channelCountMode
onpointerover
onbeforescriptexecute
onicegatheringstatechange
MediaDevices
numberOfInputs
channelInterpretation
speedOfSound
dopplerFactor
midi
ondeviceproximity
HTMLMenuItemElement
updateCommands
exportKey
onauxclick
microphone
iceGatheringState
ondevicelight
renderedBuffer
WebGLContextEvent
ondeviceorientationabsolute
startRendering
createOscillator
knee
OfﬂineAudioContext
timeLog
getFloatFrequencyData
WEBGL compressed texture atc
illuminance
reduction
modulusLength
WebGL2RenderingContext
enumerateDevices
AmbientLightSensor
attack
AudioWorklet
Worklet
AudioWorkletNode
lastStyleSheetSet
DeviceProximityEvent
DeviceLightEvent
enableStyleSheetsForSet
UserProximityEvent
mediaDevices
vendorSub
setValueAtTime
getChannelData
MAX DRAW BUFFERS WEBGL
reliable
WEBGL draw buffers
EXT sRGB
setSinkId
namedCurve
WEBGL debug shaders
productSub
hardwareConcurrency
publicExponent
requestMIDIAccess
mozIsLocallyAvailable
ondevicemotion
XPathResult
mozBattery
IndexedDB
generateKey
buildID
Ratio Scripts Websites
(count)
1366
1363
1363
1363
1363
1363
1363
1363
1363
174
8
3
3
3
3
3
3
1380
39
3
1380
61
1366
36
22
11
11
251
282
244
1363
57
3
250
1481
36
439
44
1366
458
445
419
721
12
10
4
3
419
58
30
666
267
434
32
32
32
1363
1363
1363
1363
1363
850
1728
417
460
12
103
27
4
1367
74
4
2819
3661
74
1363
174
4
417
322
25
62
414
(count)
4
1
1
1
1
1
1
1
1
1
3
3
3
3
3
3
3
18
28
3
18
61
4
26
11
7
7
225
25
218
1
57
3
223
68
19
189
28
4
193
191
170
199
12
6
3
3
170
58
29
208
10
173
22
22
22
1
1
1
1
1
230
251
167
195
10
39
25
3
5
67
3
734
716
67
1
1
4
218
42
25
62
272
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
362.52
362.52
217.51
199.03
181.26
181.26
179.78
161.12
157.09
147.69
140.98
140.98
138.72
131.35
121.40
120.84
105.97
90.63
90.43
90.30
88.31
87.17
82.52
80.56
79.33
78.77
76.65
74.68
72.50
72.50
72.50