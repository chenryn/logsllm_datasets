### 漏洞原理
#### CVE-2016-10033
在github上直接diff一下，对比一下不同版本的
**[class.phpmailer.php](https://github.com/PHPMailer/PHPMailer/compare/v5.2.17...v5.2.18#diff-ace81e501931d8763b49f2410cf3094d)** 文件，差异如下：
这里在 **sendmailSend** 函数中加了 **validateAddress**
函数，来针对发送的数据进行判断，判断邮箱地址的合法性。另外针对传入的数据，调用了 **escapeshellarg**
函数来转义特殊符号，防止注入参数。然而这样做，就引入了我们上面讨论的问题，即同时使用 **escapeshellarg** 函数和
**escapeshellcmd()** 函数，导致单引号逃逸。由于程序没有对传命令参数的地方进行转义，所以我们可以结合 **mail** 函数的第五个参数
**-X** 写入 **webshell** 。
下面详细看一下代码，漏洞具体位置在 **class.phpmailer.php** 中，我们截取部分相关代码如下 ：
在上图第12行处没有对 **$params** 变量进行严格过滤，只是简单地判断是否为 **null**
，所以可以直接传入命令。我们继续往下看，我们发现在上图第12行，当 **safe_mode** 模式处于关闭状态时， **mail()** 函数才会传入
**$params** 变量。
进一步跟跟进 **$params** 参数，看看它是怎么来的。这个参数的位置在 **class.phpmailer.php**
中，我们截取部分相关代码，具体看下图 **第11行** ：
很明显 **$params** 是从 **$this- >Sender** 传进来的，我们找一下 **$this- >Sender** ，发现这个函数在
**class.phpmailer.php** 中，截取部分相关代码，具体看下图 **第10行** ：
这里在 **setFrom** 函数中将 **$address** 经过某些处理之后赋值给 **$this- >Sender** 。我们详细看看
**$address** 变量是如何处理的。主要处理函数均在 **class.phpmailer.php** 文件中，我们截取了部分相关代码，在下图
**第三行** 中使用了 **validateAddress** 来处理 **$address** 变量。
所以跟进一下 **validateAddress** 函数，这个函数位置在 **class.phpmailer.php**
文件中。我们看看程序流程，相关代码如下：
分析一下这段代码，大概意思就是对环境进行了判断，如果没有 **prce** 并且 **php** 版本 ** $value){
            if(preg_match('/flag/i',$key)){
                exit('are you a hacker');
            }
        }
    }
    foreach(array('_POST', '_GET', '_COOKIE') as $__R) {
        if($$__R) { 
            foreach($$__R as $__k => $__v) { 
                if(isset($$__k) && $$__k == $__v) unset($$__k); 
            }
        }
    }
    if($_POST) { waf($_POST);}
    if($_GET) { waf($_GET); }
    if($_COOKIE) { waf($_COOKIE);}
    if($_POST) extract($_POST, EXTR_SKIP);
    if($_GET) extract($_GET, EXTR_SKIP);
    if(isset($_GET['flag'])){
        if($_GET['flag'] === $_GET['hongri']){
            exit('error');
        }
        if(md5($_GET['flag'] ) == md5($_GET['hongri'])){
            $url = $_GET['url'];
            $urlInfo = parse_url($url);
            if(!("http" === strtolower($urlInfo["scheme"]) || "https"===strtolower($urlInfo["scheme"]))){
                die( "scheme error!");
            }
            $url = escapeshellarg($url);
            $url = escapeshellcmd($url);
            system("curl ".$url);
        }
    }
    ?>
    // flag.php
题解我们会在项目第一阶段完成后放出，just having fun！
## 相关文章
[phpmailer RCE漏洞分析](https://lorexxar.cn/2016/12/28/cve-2016-10030/)
[PHP escapeshellarg()+escapeshellcmd() 之殇](https://paper.seebug.org/164/)
[PHPMailer 命令执行漏洞（CVE-2016-10033）分析](https://blog.chaitin.cn/phpmailer-cve-2016-10033/)