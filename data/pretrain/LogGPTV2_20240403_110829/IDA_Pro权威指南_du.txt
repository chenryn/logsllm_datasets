StepUntilRet
step_until_ret();
StopDebugger
exit_process();
StringStp
//macro, see SetCharPrm
Tabs
//macro, see SetCharPrm
TakeMemorySnapshot
take_memory_snapshot(only_loader_segs);
TailDepth
//macro, see SetLongPrm
Til2Idb
return til2idb(idx, type_name);
Voids
//macro, see SetCharPrm
Wait
autoWait();
Warning
warning(format, ...);
Word
return get_full_word(ea);
XrefShow
//macro, see SetCharPrm
XrefType
Returns value of an internal global variable
____
//*** undocumented function (four underscores)
//returns database creation timestamp
return RootNode.altval(RIDX_ALT_CTIME); 
_call
//*** undocumented function
//uint32_t _call(uint32_t ( *f)())
//f is a pointer in IDA’s (NOT the database’s) address space
return (* f)(); 
_lpoke
//*** undocumented function
//uint32_t _lpoke(uint32_t  *addr, uint32_t val)
//addr is an address in IDA’s (NOT the database’s) address
//space. This modifies IDA’s address space NOT the database’s
uint32_t old =  * addr;
* addr = val;
return old; 
_peek
//*** undocumented function
//uint8_t * _peek(uint8_t * addr)
//addr is in IDA’s address space
return  * addr; 
_poke
//*** undocumented function
//uint8_t _lpoke(uint8_t  * addr, uint8_t val)
//addr is an address in IDA’s (NOT the database’s) address
//space. This modifies IDA’s address space NOT the database’s
uint8_t old = *addr;
* addr = val;
return old; 
_time
/ *** undocumented function
return _time64(NULL); 
add_dref
add_dref(From, To, drefType);
atoa
ea2str(ea, buf, sizeof(buf));
return qstrdup(buf); 
atol
return atol(str);
byteValue
//macro
del_dref
del_dref(From, To);
delattr
VarDelAttr(self, attr);
fclose
qfclose(handle);
fgetc
return qfgetc(handle);
filelength
return efilelength(handle);
fopen
return qfopen(file, mode);
form
//deprecated, see sprintf
fprintf
qfprintf(handle, format, ...);
fputc
qfputc(byte, handle);
fseek
qfseek(handle, offset, origin);
ftell
return qftell(handle);
get_field_ea
Too complex to summarize
get_nsec_stamp
return get_nsec_stamp();
getattr
 idc_value_t res;
VarGetAttr(self, attr, &res);
return res; 
hasattr
return VarGetAttr(self, attr, NULL) == 0;
hasName
//macro
hasValue
//macro
isBin0
//macro
isBin1
//macro
isChar0
//macro
isChar1
//macro
isCode
//macro
isData
//macro
isDec0
//macro
isDec1
//macro
isDefArg0
//macro
isDefArg1
//macro
isEnum0
//macro
isEnum1
//macro
isExtra
//macro
isFlow
//macro
isFop0
//macro
isFop1
//macro
isHead
//macro
isHex0