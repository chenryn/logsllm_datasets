### Informal Claims and Attacks on Crypsinous

**1. Leakage in Crypsinous:**
Informal claims about Crypsinous [8] suggest that it cannot securely instantiate the ideal private-ledger functionality without leakage. We demonstrate this by presenting an environment that can always distinguish the simulated transcript from the real-world transcript of Crypsinous* (where * denotes the version augmented with ideal anonymous broadcast channels) with a non-negligible probability. A similar attack can be applied to the protocol of Ganesh et al. [9], even with their own ideal anonymous broadcast functionality, as the adversary only needs to influence the buffer of the honest parties.

**2. Impossibility of Anonymous (Deterministic) PoS Blockchain Protocols:**
We show that when parties receive inputs at different times (due to network delays), it is impossible to devise a Proof-of-Stake (PoS) blockchain protocol that guarantees both liveness and anonymity. This is demonstrated in two steps:
- **Step 1:** We establish a lower bound for the existence of a one-shot deterministic state-machine replication protocol that achieves both (z, t)-liveness and (1−2f)-anonymity. Here, (z, t)-liveness means that if a transaction was received by a z fraction of honest parties more than t time ago, it should be added to the block. (1−2f)-anonymity means that every message sent by an honest party in the protocol is anonymous within an (1−2f) fraction of the parties participating in the protocol.
- **Step 2:** We map this lower bound to the PoS setting by presenting tagging and reverse tagging attacks. These allow an adversary, across several executions of a PoS protocol that satisfies liveness, to learn the stake of a set of target nodes (or a specific node) by simply delaying messages for the target and corrupting f stakeholders.

**3. Practicality of the Attacks:**
Our attacks rely on the capability of the adversary to control the network delay incurred by the targeted parties, influencing their local view. In practice, messages may reach their recipient quickly, making it unclear how an adversary can prevent a party from receiving a message from other peers. Nonetheless, we show that this type of attack can be carried out on the Zcash blockchain, even by a low-resource adversary. We chose Zcash due to its similarity with Crypsinous and the lack of existing privacy-preserving PoS blockchain implementations.

### Detailed Intuition for Our Attacks

**A. Anonymity Attack on Crypsinous***

**Observations:**
1. Despite privacy guarantees, the sender of a transaction must know whether the transaction has been committed, allowing the adversary to map a transaction to the block in which it was added.
2. In synchronous blockchain protocols, any message received by an honest party will be received by all honest parties within ∆ time, where ∆ is a pessimistic bounded network delay. The adversary can choose arbitrary delays within this ∆ time, respecting the threat model of anonymous broadcast.

**Attack Description:**
The adversary can perform an attack to judge the frequency with which a party P proposes a block compared to the rest of the network, which is directly related to P’s stake. In PoS protocols like Crypsinous, eligible block proposers propose blocks at discrete intervals. The adversary sends a unique transaction txn to party P at time < t. Due to network delay, other parties will not receive it before time t + ∆. If a party includes all transactions in its view in the next block, the adversary can check whether P was elected by seeing if txn was included in the block. Encrypting transactions does not help, as a party should always be able to learn if its transaction was included. By repeating the attack, the adversary can learn the approximate stake of party P.

**Formal Attack:**
In Section III, we present a formal attack against the UC-security of Crypsinous*. We show an environment that can distinguish the protocol's transcript from the transcript generated by a simulator interacting with an ideal functionality that does not leak the identity of the block proposer.

**B. Impossibility of Anonymous (Deterministic) PoS Protocols**

**Lower Bound:**
We leverage the idea behind the above attack to show that when the adversary can cause parties to have different local views, no PoS protocol can guarantee anonymity of stakeholders if liveness must be guaranteed. We consider the notion of an anonymous one-shot state-machine replication protocol with (z, t)-liveness and a-anonymity. We prove that it is impossible to construct a deterministic protocol that guarantees both (z, t)-liveness and better than (1−2f)-anonymity. The main idea is to show that any gap between the times with which inputs arrive at the parties must manifest in the output of the protocol if liveness is to be provided.

**Tagging and Reverse Tagging Attacks:**
We consider an attack where n participants are partitioned into three sets P, Q, and R. We construct a sequence of worlds where an input v is received by sets R, Q, and P with different time configurations. If the state-machine replication protocol outputs v in any of the worlds, the participation with input-dependent messages of a specific set of parties will be exposed, violating (1−2f)-anonymity. In the PoS setting, the participation of a party is related to the amount of stake it owns. An adversary, by partitioning the network and offering different views to the parties, can identify sets P, Q, and R and learn their respective stakes. We call this the tagging attack, presented in Section V-A. Additionally, we present a reverse tagging attack in Section V-B, where an adversary targets a specific network party to learn its stake. Both attacks work for any deterministic PoS protocol secure against malicious parties making up f fraction of the total stake.

**C. Practicality of Our Attacks**

**Real-World Feasibility:**
Our attacks leverage the ability of an adversary to delay messages for a set of targeted parties up to the synchrony bound ∆. In real networks, messages might travel much faster than ∆, but we show that delays can be induced by an adversary by exploiting communication-related implementation details of blockchain software. We present our attacks on the Zcash blockchain, a privacy-preserving Proof-of-Work (PoW) blockchain, and describe how an adversary can delay the delivery of a transaction to a targeted Zcash node by exploiting the Invblocking procedure. This attack is still possible even if the node connects over anonymous channels like Tor, as the adversary can establish a connection and mount the Invblocking procedure.

**D. Mitigations**

**View Sanitization:**
To mitigate these attacks, we propose the concept of view sanitization, where a party sanitizes its local view by sampling a view computed collectively by the network. This process requires honest parties distributed across the network to collaborate in crafting the sanitized view. Identifying honest parties that can serve as sanitizers is a challenge, which we elaborate on in Appendix B.

### Related Work

**De-anonymization Attacks:**
Many de-anonymization attacks have been proposed in the literature, including clustering of pseudonyms [17, 18, 19] and network analysis [20, 21, 22, 23, 24, 25]. The attack in [23] leverages unfairness in anonymous communication protocols, similar to our attack where the unfairness is the delay an adversary can set for parties. In [26], the authors describe how a denial of service attack lowers anonymity by requiring messages to be retransmitted, presenting more opportunities for attack.

**Network-Related Attacks:**
Network-related attacks in privacy-preserving blockchains have been acknowledged in previous works such as Zerocash [5] and Quis-Quis [27]. In [13], the authors introduce a "decloaking" method to find influential nodes in the Bitcoin network, similar to our approach in finding nodes with higher stakes. In [28], the authors present an anonymity trilemma, analyzing the relationship between bandwidth overhead, latency overhead, and sender/recipient anonymity against a global passive adversary. They show that any anonymous communication protocol can only achieve two out of three properties: strong anonymity, low bandwidth overhead, and low latency overhead. In contrast, our work focuses on anonymous PoS protocols and proves a tension between liveness and anonymity, presenting a lower bound on the anonymity achievable in anonymous PoS protocols.

### Conclusion

In this paper, we present attacks on the anonymity of PoS blockchain protocols, specifically focusing on Crypsinous. We show that even with ideal anonymous broadcast channels, the identity of block proposers can be de-anonymized. We also demonstrate the impossibility of achieving both liveness and anonymity in deterministic PoS protocols and provide practical examples of these attacks on the Zcash blockchain. Finally, we propose mitigations through the concept of view sanitization.