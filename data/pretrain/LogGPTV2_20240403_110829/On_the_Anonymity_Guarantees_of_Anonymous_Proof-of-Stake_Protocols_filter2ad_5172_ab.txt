informal claims of Crypsinous [8], they cannot securely
instantiate the ideal private-ledger functionality without
leakage. We do so, by showing an environment
that
always distinguishes the simulated transcript from the real
world transcript of Crypsinous* (where * here denotes the
version of Crypsinous augmented with ideal anonymous
broadcast channels) with a non-negligible probability. A
similar attack can be applied to the protocol of Ganesh
et al. [9], even in presence of their own ideal anonymous
broadcast functionality, since the adversary only needs to
inﬂuence the buffer of the honest parties.
• Impossibility of
anonymous
(deterministic) PoS
blockchain protocols. We show that when parties receive
inputs at different times (due to network delays), it is im-
possible to devise a PoS blockchain protocol where both
liveness and anonymity are guaranteed. We do so in two
steps. First, we show a lower bound for the existence of
one-shot deterministic state-machine replication protocol
that achieves both (z, t)-liveness and (1−2f )-anonymity,
where (z, t)-liveness means that
if a transaction was
received by a z fraction of honest parties more than t
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:55 UTC from IEEE Xplore.  Restrictions apply. 
1819
time ago, it should be added in the block, and (1 − 2f )-
anonymity means that every message sent by an honest
party in the protocol is anonymous within an (1 − 2f )
fraction of the parties participating in the protocol. Then
we map this lower bound to the PoS setting by presenting
the tagging and reverse tagging attacks. These allow an
adversary, across several execution of a PoS protocol that
satisﬁes liveness, to learn the stake of a set of target nodes
(or a speciﬁc node), by simply delaying messages for the
target and corrupting f stakeholders.
• Practicality of the attacks. Our attacks rely on the
capability of the adversary to control the network delay
incurred by the targeted parties, in order to inﬂuence their
local view. In practice, messages may reach their recipient
quickly and it is unclear how an adversary can prevent a
party from receiving a message from other peers.
Nonetheless, we show that this type of attack can be
carried out on the Zcash blockchain even by a low-
resource adversary.
We chose Zcash due to its similarity with Crypsinous
and because, so far, there exist no implementations of
privacy-preserving PoS blockchains.
In the following subsections, we elaborate on the intuition
for our attacks.
A. An Anonymity Attack to Crypsinous*
Before describing the intuition behind the attack, we make
two observations for private PoS protocols. First, despite the
privacy guarantees, in any protocol, the sender of a transaction
will need to know whether the transaction has been committed.
This is necessary for the functioning of any blockchain pro-
tocol. This allows the adversary to obtain a mapping between
a transaction it created and the block in which it was added.
Second, since these blockchain protocols assume synchrony
in the network, any message received by an honest party will
be received by all honest parties within ∆ time, where ∆ is
a pessimistic bounded network delay. However, within the ∆
time delay, an adversary can choose an arbitrary delay for its
arrival time. Note that such an adversarial capability respects
the threat model, since the deﬁnition of anonymous broadcast
(Fig. 13) allows this. Speciﬁcally, it can make a transaction
take 0 time for some party while it takes ∆ time for another
party. Using these two properties, we show that, even if all
communications use ideal broadcast channels (that hide the
identity of a sender), the adversary can still de-anonymize
messages sent by speciﬁc parties.
Speciﬁcally, the adversary can perform an attack where
it is trying to judge the frequency with which a party P
proposes a block compared to the rest of the network; this
is directly related to P ’s stake. In PoS protocols such as
Crypsinous, the eligible block proposers propose blocks at
discrete intervals of time. Suppose these intervals are denoted
as t, t + 1, t + 2, . . .. The adversary sends a unique transaction
txn to the party P at time < t. Of course, party P will
share this transaction with the rest of the network, but due
to the network delay assumption,
they will not receive it
before time t + ∆. Whenever a party is elected, if it includes
all the transactions in its own view in the next block, then
the adversary can perform a simple test to check whether P
was elected: if txn was included in the block, then P was
elected, otherwise, it was not. We stress that merely encrypting
transactions does not help since a party should always be
able to learn whether its own transaction was included in
the chain. Also, the adversary succeeds only probabilistically.
However, by repeating the attack multiple times, it can learn
the approximate stake of party P .
In Section III we present a formal attack against the UC-
security of Crypsinous*. We show an environment that is
able to distinguish the protocols transcript from the transcript
generated by a simulator interacting with an ideal functionality
that does not leak the identity of the block proposer.
B. Impossibility of Anonymous (Deterministic) PoS Protocols
We leverage the idea behind the above attack and show
that when the adversary can cause parties to have different
local views there exists no PoS protocol that can guarantee
anonymity of stakeholders, if liveness must be guaranteed.
To prove this, we consider the notion of anonymous one-
shot state-machine replication protocol with (z, t)-liveness and
a-anonymity for parameters z, t and f. Here, (z, t)-liveness
means that if a z fraction of honest parties have received a
transaction at time ≤ t, this transaction should be given in
the output; a-anonymity means that every message sent by
an honest party in the protocol is anonymous within an a-
fraction of the parties participating in the protocol. We then
prove that it is impossible to construct a deterministic protocol
that guarantees both (z, t)-liveness and better than (1 − 2f )-
anonymity. The main idea of the lower bound is to show that
any gap (e.g., delay) between the times with which inputs
arrive at the parties, must manifest in the output of the protocol
– if liveness has to be provided. The generalization with
parameter t shows that simply waiting for transaction to be
old enough does not sufﬁce to obtain anonymity. We consider
an attack where n participants are partitioned in three sets P ,
Q and R, where P and Q are of size f fraction of n while R is
of size (1−2f ) fraction of n. We then construct a sequence of
worlds; in each world an input v is received by set R, Q and P
with different time conﬁgurations (e.g., R receives it ﬁrst, R
and Q receive it ﬁrst, etc). We show that, if the state-machine
replication protocol outputs v in any of the worlds, then the
participation with input-dependent messages of a speciﬁc set
of parties will be exposed, which should not happen if (1−2f )-
anonymity must be guaranteed. Hence, anonymity demands
that the protocol does not output v in any of the worlds.
However, such a protocol, while satisfying anonymity would
not satisfy liveness, since there exists a world where enough
parties received v early enough, in which case the protocol
should output v. We present this ideas formally in Section IV.
We then show the implication of the strategy we used for
our lower bound to violate anonymity in the PoS setting.
The key observation is that in the PoS setting, participation
of a party in the protocol is related to the amount of stake
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:55 UTC from IEEE Xplore.  Restrictions apply. 
1820
the party owns. We show that an adversary, who has no
information about the stake distribution, by simply partitioning
the network and offering different views to the parties, is
able to identify sets P, Q and R and consequently learn that
they hold respectively f, f and 1 − 2f fractions of the total
stake. We call this the tagging attack, which can be mounted
even without corrupting any protocol player, and present it in
Section V-A. Furthermore, we present a reverse tagging attack
where an adversary can target a speciﬁc network party and
learns the stake it owns. This attack is shown in Section V-B.
Both attacks work for any deterministic PoS protocol that is
secure against malicious parties making up f fraction of the
total stake.
C. Practicality of our attacks
Our attacks leverage the ability of an adversary to delay
messages only for a set of targeted parties, up to the synchrony
bound ∆. This is a worst-case power given to the adversary
when analyzing the robustness of a distributed protocol. In
real networks, however, messages might travel much faster
than ∆, so one might wonder whether a realistic adversary –
who does not control the network globally – is able to prevent
a party from receiving a message before ∆, and thus mount
our attacks in practice.
Contrary to this intuition, we show that, even on a fast
network, delays can be induced by an adversary by leveraging
communication-related implementation details of blockchain
software. Since there are no implementations of privacy-
preserving PoS blockchains, we present our attacks on a
privacy-preserving PoW blockchain: Zcash [12]. We describe
how an adversary can delay the delivery of a transaction to
a targeted Zcash node, by exploiting implementation-speciﬁc
behavior in the Zcash software. Speciﬁcally we leverage the
Invblocking procedure presented by Miller et al. [13]. This
attack exploits an optimization used to advertise new trans-
actions in the Zcash peer-to-peer network, that we describe
in Section VI. We give a high-level overview here. When a
Zcash node, say Z, learns a new transaction tx, it will ﬁrst
send a short digest Htx to its peers before sending tx. Each
peer ﬁrst checks whether they have already seen Htx. If a peer,
say A, has not received Htx before, it replies with a GETDATA
request to obtain the full transaction. At this point, A will
wait to hear from Z (and not from any other peer) the full
transaction, until a timeout (2 min).1 An adversary can exploit
this implementation detail to delay A. It just needs to corrupt
one Zcash node and behave like Z.
We notice that this attack is still possible even if A connects
over anonymous channels (e.g., it uses Tor [14] or [15]), since
Z can still establish a connection with A and then mount the
Invblocking procedure described above. In fact, as shown by
Biryukov et al. [16], we observe that when Zcash nodes use
Tor, they are even more susceptible to delay attacks, since an
adversary can leverage implementation peculiarities of both
Zcash and Tor. We discuss this in details in Section VI.
1See Line 2171 of https://github.com/zcash/zcash/blob/master/src/net.cpp
D. Mitigations
Finally, we propose ideas to mitigate the above attacks. We
note that our attacks crucially leverage the ability to present
different inputs to the parties by controlling network delays,
and the fact that the output of the protocol reﬂects the inputs
of the participants. What if we were able to ensure that parties
do not speak based on their local view, but on a view of
the network as a whole? We introduce the concept of view
sanitization, referring to a process by which a party sanitizes
its local view by sampling a view computed collectively by the
network. The sanitization process would require honest parties
distributed across the network to collaborate in crafting the
sanitized view. We call these parties sanitizers. As expected,
identifying honest parties that can serve as sanitizers is a
challenge. We elaborate on these challenges in Appendix B.
II. RELATED WORK
Many attacks have been proposed in literature and they
can be broadly classiﬁed as de-anonymization attacks that do
clustering of pseudonyms of parties to link transactions to the
actual party [17], [18], [19] and de-anonymization attacks that
analyze the network [20] [21] [22] [23] [24] [25] that leverage
the network to de-anonymize parties in cryptocurrencies. The
attack of [23] leverages the unfairness in anonymous commu-
nication protocols. In unfair protocols the adversary is allowed
to peek at the output when all other parties observe that the
protocol failed. This leads to an intersection attack. As we
shall see later, this is somewhat similar to our attack where
the unfairness is the delay an adversary is allowed to set for
parties. In [26] the authors describe how a denial of service
attack lowers anonymity as messages need to get retransmitted
to be delivered, presenting more opportunities for attack for
certain anonymous communication systems.
In [24], (Danaan-gift Attack) the adversary donates a small
tainted amounts of Zcash to the target’s shielded address in
hope that the tainted value would remain when the value is
de-shielded. Our work differs from other works since we de-
anonymize the identity of parties on PoS even if one assumes
anonymous channels. We note that network related attacks
in privacy preserving blockchains have been acknowledged
in previous works such as Zerocash [5] (See Section VI-C),
where they discuss a “poison-pill” block to target a user and
Quis-Quis [27] where they assume network analysis attacks
are out of scope of their paper.
In [13] the authors introduce a “decloaking” method to ﬁnd
inﬂuential nodes in the Bitcoin network that are well connected
to a mining pool. This attack is similar to our attacks in
the sense that they ﬁnd nodes on the Bitcoin network with
highest computational power, whereas we ﬁnd nodes that have
higher stakes. In their setting the nodes are not anonymous and
communication is done over a public network, whereas we
assume anonymous stakeholders as well as ideal anonymous
channels. Yet, their approach can be effectively used in our
scenario as well.
In [28], the authors present an anonymity trilemma. They
la-
analyze the relationship between bandwidth overhead,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:55 UTC from IEEE Xplore.  Restrictions apply. 
1821
tency overhead, and sender anonymity or recipient anonymity
against a global passive (network-level) adversary. They show
that any anonymous communication protocol can only achieve
two out of the following three properties: strong anonymity,
low bandwidth overhead, and low latency overhead. In con-
trast, in our work we focus on anonymous PoS protocols and
prove that there is a tension between liveness and anonymity,
and present a lower bound on the anonymity one can hope to
achieve in anonymous PoS protocols.
III. AN ANONYMITY ATTACK TO CRYPSINOUS*
In this section, we describe the anonymity attack that can
be mounted on Crypsinous*. Speciﬁcally, ﬁrst, we describe
the leakage on the proposer identity allowed by the original
Crypsinous [8]’s protocol. We then explain how [8] conjec-
tures that this leakage can be avoided if the protocol messages
of Crypsinous are exchanged over ideal anonymous broadcast
channels. We call this version Crypsinous*. Finally, we show
an anonymity attack on Crypsinous* that refutes this claim. In
other words, we show Crypsinous and anonymous broadcast
do not compose in the way envisioned by the authors.
Figure 1. Overview of the attack
An attack in the presence of anonymous broadcast chan-
nels. Crypsinous: Privacy for transactions only. Crypsinous
provides privacy guarantees to transactions by having a block
contain only encryptions of the transactions along with a
zero-knowledge (zk) proof stating that the block was formed
correctly by an eligible stakeholder. Thus, by just observing
the blocks on the blockchain, an adversary only learns that “a
party P has computed a private transaction” without learning
who P is or what the transaction is about.
However, an adversary observing network packets may gain
additional information – for instance, the adversary might learn
the network identity of the block proposer for a given block
or the identity of the sender of a transaction. Crypsinous ac-
knowledges that their protocol will incur such a leakage when
not using communication channels that provide anonymity.
To model the above process, they introduce an ideal private
ledger functionality GPL (see Fig. 1 in Page 7 of [8]). Privacy
of transactions is captured by the functionality by only reveal-
ing a blinded version of the transaction’s contents that were
added to the chain along with the sender of the transaction. To
account for what an adversary can learn about block proposers
through the network channels, the ideal functionality provides
a leakage to the adversary (denoted by Lkglead in [8]). This
informs the adversary about the parties that would be selected
according to the eligibility function.
Anonymous broadcast channels provide privacy to pro-
posers. Do they? Crypsinous states that: “If we assumed
anonymous broadcast communication channels, the submitter
(i.e., the block proposer) would not be needed to be leaked,
i.e., the requirement of leaking the submitter is strictly due
to network leakage.” (see footnote at Page 7 of [8]). Thus, if
we had an ideal channel to anonymously broadcast messages,
then it is not possible to link a message to any speciﬁc honest
party.
We now present an explicit attack even in the presence of
anonymous broadcast channels. An overview is presented in
Figure 1. The horizontal scale represents time and the different
time ticks represent slots at which “leader elections” are held,
i.e., parties attempt
to propose the next block. If a party
succeeds at time slot tk in winning the lottery and to mine