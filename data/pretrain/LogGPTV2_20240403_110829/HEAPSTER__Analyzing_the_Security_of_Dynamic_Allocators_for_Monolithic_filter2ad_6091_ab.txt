Detector
PoC
Concretizer
11
HeapHopper
PoV
Fig. 1: HEAPSTER Overview. The analysis pipeline follows the order of the circled numbers.
have at least two primitives (one to allocate, and one to de-allocate
chunks), (2) serve every request “on-the-fly” by calculating the
next chunk to be returned at every invocation of the allocator, (3)
implement a memory management strategy where chunks are
reused for future allocations, (4) receive the requested allocation
size by argument (allocator), and the requested chunk-to-free by
argument (deallocator), and, (5), pass the allocated memory address
to a caller as a return value inside a register.
Firmware Initialization. HML functions do not live in a vacuum,
but instead use in-memory data structures and global variables to
keep track of freed memory chunks or to determine the heap base
address. Many of these heap-related constants and data structures
are either unpacked during the boot process or defined by auxiliary
functions that initialize the heap (known as heap initializers).
Therefore, before our system can start testing the security of a heap
library, it also needs to identify and execute any initializer function,
to bring the firmware memory into a consistent and initialized state.
Firmware Re-hosting. Our system leverages dynamic execution
of targeted firmware functions rather than leveraging full emulation
of the firmware blob. However, these targeted functions are still
executed inside an emulator rather than the hardware for which the
firmware was designed. Therefore, multiple details related to periph-
erals models and the original execution environment are missing,
and this can potentially hinder our analyses. This problem is known
in the firmware community as firmware re-hosting [28], [60]. Even
if recent efforts proposed different solutions [15], [22], [26], [42],
[51], [65], monolithic firmware re-hosting remains a challenge when
scaled on a heterogeneous set of blobs [60]. Since in this paper we
focus on the emulation of a limited number of functions, we use care-
fully configured execution models (detailed in Appendix A) to re-
solve the common pitfalls related to a partial execution environment.
Symbolic Execution Scalability. Our system uses symbolic execu-
tion and bounded model checking to discover classes of heap vulner-
abilities in the heap library of a firmware image. However, symbolic
analysis is afflicted by scalability issues related to path explosion and
related to the overhead of constraint solving [14]. Therefore, even
testing a single malloc implementation with an unconstrained
symbolic size argument might require an unrealistic amount of com-
putational resources. For this reason, when performing the symbolic
analysis, we define boundaries to contain the scope of the analysis.
III. APPROACH
In this section, we present HEAPSTER, our automated approach
for identifying the HML used by a monolithic firmware image and
for testing its security. An overview of the HEAPSTER architecture
is illustrated in Figure 1.
Our system starts from a firmware blob along with related
metadata, and uses this information to load the firmware in an
emulator 1 . Then, HEAPSTER identifies the basic functions: a
set of functions that receive memory addresses as arguments, and
perform simple memory operations over them (e.g., memcpy) 2 .
Once the basic functions are identified, HEAPSTER leverages an
inter-procedural source-sink analysis to detect the pointer sources:
functions whose return values flow inside an argument of a basic
function 3 . Intuitively, a pointer source is potentially “generating”
a memory pointer used by a basic function. Then, HEAPSTER emu-
lates the pointer sources one by one, and monitors their behavior to
decide whether the function is a memory allocator or not 4 . Given a
list of potential allocators, HEAPSTER tries to find the correspondent
de-allocator. Practically, HEAPSTER leverages syntactic features to
first filter the functions in the firmware blob to a set of candidate
de-allocator functions, and after that, it executes every allocator
paired with every candidate de-allocator, in an attempt to observe
chunks being re-used as explained in Section II 5 . When a working
allocator/de-allocator pair (i.e., the HML) is identified, HEAPSTER
collects more information regarding their prototypes 6 , and about
their implementation 7 - 8 . This information includes: the detection
of any hotspot that would hinder the symbolic execution, the
HML properties (such as the heap base address, the heap growing
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:29 UTC from IEEE Xplore.  Restrictions apply. 
1084
last = 0x2000C000;
void *x = 0x2000;
return x;
1 last = 0x0
2 void mem_init(){
3
4 }
5
6 int malloc(x){
chunk = last
7
last = last + x
8
return chunk;
9
10 }
11
12 int baz(){
13
14
15 }
16
17 void bar(x,y){
18
19
20
21
22
23 }
24
25 void foo(a){
int b[10];
26
memcmp(a, b, 10);
27
28 }
v1 = malloc(y);
v1 = baz();
if(y==0)
foo(v1);
else
mov r0, 
ldr r1, [last]
add r0, r0, last
str r0, [last]
mov r0, r1
ret
ret ;[O4]
,
mov r0, 0x2000
ret
ret ;[O3]
,
1 malloc:
2
3
4
5
6
7
7
8
9 baz:
10
11
11
12
13 bar:
14
15
16
17
18
19
20 tag:
21
22 return:
23
223
24
25
26 foo:
27
28
29
30
30
31
mov r0, 
mov r1, 
cmp r1, 0
bne tag
call baz
b return
call malloc
call foo
call foo ;[O2]
ret
mov r0, 
mov r1, var_b
mov r2, 0x10
call memcmp
call memcmp ;[O1]
ret
,
(cid:39)(cid:23)
(cid:39)(cid:24)
(cid:188)(cid:187)(cid:3)(cid:154)(cid:3)(cid:77)(cid:187)(cid:3)(cid:154)(cid:3)(cid:187)(cid:83)(cid:189)(cid:187)(cid:187)(cid:187)
(cid:154)
(cid:190)(cid:3)(cid:154)(cid:3)(cid:77)(cid:188)(cid:3)(cid:154)(cid:3)(cid:212)(cid:71)(cid:60)(cid:78)(cid:79)(cid:213)
(cid:190) (cid:154) (cid:188)
(cid:50)(cid:22)
(cid:50)(cid:23)
(cid:188)(cid:188)(cid:3)(cid:154)(cid:3)(cid:77)(cid:187)
(cid:194)(cid:3)(cid:154)(cid:3)(cid:77)(cid:187)
(cid:39)(cid:21)
(cid:188)(cid:195)(cid:3)(cid:154)(cid:3)(cid:77)(cid:187)(cid:3)(cid:154)(cid:3)(cid:24)(cid:73)(cid:63)(cid:64)(cid:65)
(cid:188)(cid:195) (cid:154)
(cid:21)(cid:64)(cid:79)(cid:25)(cid:60)(cid:71)
(cid:61)(cid:60)(cid:85)
(cid:39)(cid:22)
(cid:21)(cid:64)(cid:79)(cid:25)(cid:60)(cid:71)
(cid:72)(cid:60)(cid:71)(cid:71)(cid:74)(cid:62)
(cid:189)(cid:188)(cid:3)(cid:154)(cid:3)(cid:77)(cid:187)(cid:3)(cid:154)(cid:3)(cid:24)(cid:73)(cid:63)(cid:64)(cid:65)
(cid:189)(cid:188) (cid:154)
(cid:189)(cid:190)(cid:3)(cid:154)(cid:3)(cid:77)(cid:187)
(cid:39)(cid:20)
(cid:4)(cid:77)(cid:66)
(cid:77)(cid:187)
(cid:189)(cid:194)(cid:3)(cid:154)(cid:3)(cid:77)(cid:187)(cid:3)(cid:154)(cid:3)(cid:24)(cid:73)(cid:63)(cid:64)(cid:65)
(cid:189)
(cid:190)(cid:187)(cid:3)(cid:154)(cid:3)(cid:77)(cid:187)
(cid:50)(cid:21)
(cid:50)(cid:20)
Fig. 2: Running example of the pointer sources identification analysis. On the left, the C code from which the assembly on the right is gen-
erated. We highlight the assembly lines where we start the backward slice. Ds represent register definitions, Os represent observation points.
direction), and finally, the presence of inline heap metadata [24]
(i.e., control information data commonly used by HML to manage
the memory chunks, and stored alongside user data).
To test the security of the HML, HEAPSTER provides the
firmware image along with all the information collected in the
previous steps 9 to a custom version of HeapHopper [24] modified
to support the analysis of firmware blobs (we discuss the main
differences with respect to the original work in Section III-I). In
particular, HeapHopper automatically generates Proof-of-Concept
programs (PoCs) that interact with the discovered HML 10 with
benign transitions — i.e., malloc and free — and malicious
ones – e.g., use-after-free (UAF). Then, by using bounded model
checking and symbolic execution, HeapHopper traces the execution
of the generated PoCs and produces a Proof-of-Vulnerability (PoV)
when a security violation is detected 11 . Finally, to filter any false
positives, HEAPSTER validates the generated PoVs by re-executing
them inside the emulator 12 .
A. Firmware Loading
To correctly load the firmware image inside the emulator and
start its analysis, HEAPSTER needs four pieces of information: (1)
the base address, (2) the entry point, (3) the memory range covered
by the dynamic memory (heap memory region), and (4) the memory
range where peripherals are mapped (i.e., the MMIO range). To
extract the first two pieces of information from a target firmware
blob, we implemented and integrated into our system, the technique
presented by Wen [59]. The memory ranges are instead standardized
by the CPU architecture [7], and we therefore safely assume the heap
and MMIO memory ranges to be mapped according to the official
specification. Finally, we extract the initial value of the firmware’s
stack pointer by reading the first DWORD of the firmware image [7].
B. Firmware Functions Classification
Basic Functions Identification. To identify the basic functions, we
use a technique similar to the one implemented in Sibyl [16], which
is based on the idea that basic functions have a predictable behavior
(e.g., memcpy accepts a source buffer, a size, and a destination
buffer, then copies the former into the latter). For instance, by
calling a function with a set of arguments that comply with the
i.e., void *memcpy(void *dest,
prototype of memcpy,
const void *src, size_t n), we expect that, when the
function terminates, the memory at the address in dest contains
exactly n bytes from the address in src, while the buffer at src
is left unmodified. HEAPSTER tests every function contained in the
firmware image and matches their behaviors against nine different
models, including two variants of memcpy and memset, one
for memcmp, and four string-related functions (namely, strlen,
strcat, strncat, and strncpy). Whenever a match is found,
we tag the function accordingly and save the inferred prototype.
Pointer Source Identification. To identify the pointer sources,
HEAPSTER starts from the call sites of the basic functions and
applies a Reaching Definitions (from now on referred to as RD)
data-flow analysis to understand how the arguments of the basic
functions are generated. When applied to a function, RD builds
a directed graph where nodes are register definitions and edges
represent definition dependencies. Every node in the definition
graph contains the name of the register being defined and the code
location of the definition. Additionally, certain nodes also contain
the value that the register holds at the code location — when it
can be statically determined — and, optionally, a tag that includes
metadata regarding the current definition. In particular, we leverage
the tags to understand whether the definition is inter-procedural:
RetVal and Arg. The former indicates that the definition
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:29 UTC from IEEE Xplore.  Restrictions apply. 
1085
originates from the return value of a function call, while the latter
indicates that the definition is provided by the callers of the current
function via an argument. With this information, given a location
in a function and a register of interest (i.e., an observation point),
HEAPSTER finds the corresponding node in the definition graph and
computes the backward slice for the definition in question. When the
exploration reaches a node with an inter-procedural tag, the analysis
continues leveraging the information contained in the tag itself.
In particular, to handle nodes tagged as Arg, the analysis
searches for every caller of the current function (F), builds their
definition graphs, and resumes the backward slice from the
definition of the target register argument at F’s call site. To handle
nodes tagged as RetVal, the analysis enters the called function,
builds its definition graph, and resumes the backward slice from
the return locations of the function, using the register holding the
return value (i.e., r0) as the observation point. This exploration
strategy provides our analysis an inter-procedural view of node
dependencies and, more importantly, the ability to identify which
functions are involved in a node’s definition.
Figure 2 shows an example of the analysis when applied to the
assembly code in the left part of the figure1. In this example, our
analysis starts by setting an observation point (O1) at line 30 for
register r0 (i.e., the register that represents the first memcmp’s
argument). By looking at the dependency graph of foo, HEAPSTER
discovers that the definition of r0 depends on D1. Since D1 is
tagged as Arg, HEAPSTER generates the dependency graph for all
the callers of foo (in this example only bar at Line 22 in the C
code), and resumes the backward slice starting from all the call sites
to foo. In our example, the computation resumes from observation
point O2 (assembly line 23), targeting the register r0. At this point,
the analysis discovers that the definition of r0 is derived either from
the return value of malloc (D3) or from the return value of baz
(D2). As D2 and D3 are tagged as RetVal, the analysis recovers
the callees (i.e., baz and malloc), generates their definition
graphs, and resumes the backward slice at observation point O3
and O4, targeting the register r0 (i.e., the return value of baz and
malloc). On one side, HEAPSTER discovers that D4 has a constant
value and terminates the exploration. On the other side, HEAPSTER
detects that the definition of r0 is coming from D5, which again
has a constant value, and therefore, terminates the exploration.
During the computation of backward slice, we label every
function whose return value is used to define a target register in
the explored definitions chain as a pointer source. In our example,
the return values of baz and malloc respectively define r0 at
line 18, and r0 at line 21, therefore, both functions are labeled as
pointer sources.
The termination of the analysis is guaranteed by the monotonicity
property of reaching definitions when creating the dependency
graphs. Moreover, we terminate any recursive behavior by not
exploring the same portion of a dependency graph more than
once across the entire analysis, since this would not add any new
information regarding pointer sources discovery.
1For space constraints, the assembly code is simplified and the graphs only
contain the nodes relevant to this example.
C. Allocator Identification
Not every identified pointer source is a memory allocator. For
instance, in the running example described in Figure 2, the function
baz is merely returning a constant value, but it is labeled as pointer
source by the analysis. Similarly, functions that wrap malloc (such
as calloc or realloc), are also be labeled as pointer source, de-
spite not being in scope of the security testing. Therefore, we need to
reason about the extracted pointer sources and their dynamic behav-
ior to filter false positives. We label a pointer source as an allocator
if, after executing the function several times, we observe different
memory addresses being returned that are all contained within the
heap memory region. The intuition behind this definition is that a dy-
namic memory allocator should serve every request with a different
memory chunk within the heap region. In our example, this property
would not be respected by baz, while it is true for malloc.
Pointer Sources Execution. To classify a pointer source as an
allocator, we need to be able to call it with the proper arguments.
To simplify the analysis at this step, we statically collect the
arguments’ values from the call sites of a pointer source. Based on
the assumption that the correct malloc receives as an argument an
integer value representing the requested size, we expect to extract
at least one valid value across the call sites. If this is not true, we
use a placeholder integer value for each argument.
Pointer Sources & Heap Initializers. As previously mentioned in
Section II, a successful emulation of a pointer source can depend
on the initial values of specific global variables. For instance, in the
example in Figure 2, malloc uses a global variable named last
(Line 7 in the C source code). However, the global variables are
often unpacked during the bootstrap of the firmware on the hardware
device, and, therefore, are not always statically available beforehand.
Therefore, we need to initialize every global variable used by a
pointer source function before its emulation. At this step, we focus
on heap global variables as they are the ones necessary to success-
fully execute the pointer source representing malloc. In particular,
heap global variables can be (1) unpacked by the firmware’s entry
point by compiler-injected stubs (i.e., loops that initialize specific
memory regions), (2) written by custom auxiliary heap procedures
of the employed heap library (i.e., simple procedures that write
constant values at specific addresses), and, in some cases, even
by a combination of both strategies. Additionally, sometimes the
heap global variables initialization can be performed by the pointer
source itself as these cases are trivially handled when emulating the
pointer source. To solve this issue, we first dynamically execute
the firmware’s entry point (i.e., the ResetHandler). Then, if we
still detect missing heap global variables during a pointer source
execution, we select a set of functions as possible initializers using
intuitive syntactic heuristics (e.g., they should accept zero arguments)
and execute them one by one right before the execution of the pointer
source. In case none of the selected functions initialize the heap
global variables used by a target pointer source, we discard the
pointer source. On the contrary, if the values returned by the pointer
source respect the allocator definition, we save the memory state
associated with the heap initializer execution (“Initialized Memory”
at the top-right corner in Figure 1), and label the pointer source as an
allocator. To execute the ResetHandler and heap initializers we
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:29 UTC from IEEE Xplore.  Restrictions apply. 
1086
use the execution model described in Appendix A. In our example,
the function malloc is labeled as an allocator after we execute its
heap initializer mem_init.
D. De-allocator Identification
Given an identified allocator, HEAPSTER tries to find the
corresponding de-allocator routine. To achieve this goal, HEAPSTER
first statically identifies a set of possible de-allocator candidate
functions by pre-filtering all the firmware blob’s functions (e.g.,
by not considering the pointer sources, or the basic functions),
which results in the de-allocator candidate set. Then, HEAPSTER
leverages dynamic execution to analyze the behavior of these
procedures when paired with the target allocator. When executing
a de-allocator candidate, we assume that the heap has already been
initialized during the identification of the correspondent allocator.