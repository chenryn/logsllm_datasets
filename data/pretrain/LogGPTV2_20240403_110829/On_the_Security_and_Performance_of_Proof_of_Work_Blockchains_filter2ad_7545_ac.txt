v
ρ = (1 − ρ) · ra − ρ · rh
∗
= (1 − ra
) · ra − ra
· rh
ra + rh
ra · (ra + rh) − ra
ra
ra + rh
2 + ra · rh − ra
ra + rh
ra + rh
2
− ra · rh
2 − ra · rh
ra + rh
=
=
= 0
The reasoning for the second proposition is straightforward. For
any given policy π, it holds for ρ > ρ(cid:48) that wρ(ra, rh) ≤ wρ(cid:48) (ra, rh)
for every transition with rewards ra and rh for the adversary and
ρ ≤ vπ
the honest network, respectively. It follows directly that vπ
ρ(cid:48)
7ρ ≤ v∗
ρ(cid:48), i.e., v∗
for every policy π and thus v∗
decreasing in ρ.
ρ is monotonically
We use binary search on our restricted family of MDPs for ρ ∈
[0, 1] in order to ﬁnd the ρ for which the expected value in the
instantiated MDP is zero and which subsequently maximizes the
reward in the original single-player decision problem [32]. Since v∗
ρ
is monotonically decreasing, this can be done efﬁciently as follows:
Algorithm 1 Binary search algorithm for the family of MDPs.
function OPTIMAL STRATEGY(c, )
low ← 0
high ← 1
repeat
ρ ← (low + high)/2
(π, v∗
if v∗
ρ) ← MDP_SOLVER(M c
ρ)
ρ > 0 then
low ← ρ
high ← ρ
else
end if
until high − low  lh), after k conﬁrmations
(la > k), given an honest network with mining power 1− α. Before
reaching the exit state, the adversary adopts an optimal strategy to
maximize its reward, given the state and action space described in
Section 3. After reaching the exit state, transitions back to the exit
state model rewards of honest mining. Note that since we assume
that the adversary is rational, an optimal strategy might advise
against performing double-spending attacks (i.e. the adversary will
never reach the exit state)—depending on the value of the attempted
In the exit state, the adversary earns a block reward of
attack.
la − be + vd, (cid:98)(lh + 1) la−be
(cid:99)− cm block rewards after an override
with eclipse attack (because the adversary’s reward needs to discount
the be victim’s blocks and (cid:98)(lh) la−be
(cid:99) − cm block rewards if the
adversary’s chain wins the race after a match action. For every state
transition we discount the mining costs −cm.
The adversary either abides by the optimal double-spending strat-
egy π or performs honest mining, depending on the expected reward.
We are therefore interested in the minimal double-spending value
vd, such that vd is strictly larger than the honest mining reward (cf.
Equation 25).
la
la
P = (α, γ, rs, k, ω, cm)
(24)
vd = min{vd|∃π ∈ A : R(π, P, vd) > R(honest mining, P )}
(25)
The double-spending value vd can serve as a generic metric to
compare the security of various blockchain instantiations. Namely,
if vd of a blockchain instance A is bigger than for blockchain B
for given α, γ and ω, then blockchain A can be considered more
resistant against double-spending attacks.
3.3.1 Optimal Strategies for Double-Spending
In what follows, we analyze the solutions of our aforementioned
double-spending MDP given various parameters. To solve for the
optimal strategy in our MDP, we rely on the pymdptoolbox library4
and apply the PolicyIteration algorithm [20] with a discount value
of 0.999. This methodology allows us to assess whether the number
of transaction conﬁrmations k are sufﬁcient to ensure security in
the presence of a rational adversary, with respect to the considered
transaction value. That is, if the adversary has a higher expected
ﬁnancial gain in double-spending than honest mining, then the
transaction cannot be considered safe given k conﬁrmations, and
the merchant should wait additional conﬁrmations.
In order to decide whether the adversary should choose to follow
the optimal double-spending policy or honest mining (cf. Equa-
tion 25), and to determine the minimum vd, we instantiate the
double-spending MDP with a high double-spending value (> 109
4https://github.com/sawcordwell/pymdptoolbox
8Figure 2: Selﬁsh mining for rs of 1%, 10%.
Figure 3: Selﬁsh mining for α = 0.1 and 0.3. Figure 4: Selﬁsh mining with eclipse attacks.
Resulting State
Probability
Reward (in Block reward)
State × Action
(la, lh, be,·), adopt
(la, lh, be,·), override
(la, lh, be, i), wait
(la, lh, be, r), wait
(la, lh, be, a), wait
(la, lh, be, r), match
(la, lh, be,·), exit
(1, 0, 0, i)
(1, 0, 1, i)
(0, 1, 0, r)
(0, 0, 0, i)
(cid:16)
(cid:16)
(cid:16)
(cid:16)
(cid:101), i
la − lh, 0, be − (cid:100)(lh + 1) be
la − lh, 0, be − (cid:100)(lh + 1) be
la − lh − 1, 1, be − (cid:100)(lh + 1) be
la − lh − 1, 0, be − (cid:100)(lh + 1) be
(cid:101) + 1, i
(cid:101), r
(cid:101), i
la
la
la
la
(cid:17)
(cid:17)
(cid:17)
(cid:17)
(la + 1, lh, be, i)
(la + 1, lh, be + 1, i)
(la, lh + 1, be, r)
(la, lh, be, i)
(la + 1, lh, be, a)
(la + 1, lh, be + 1, a)
(la − lh, 1, be − (cid:100)(lh) be
la
(la, lh + 1, be, r)
(cid:101), r)
(la, lh, be, a)
exit
α
ω
(1 − α − ω) · (1 − rs)
(1 − α − ω) · rs
α
ω
(1 − α − ω) · (1 − rs)
(1 − α − ω) · rs
α
ω
(1 − α − ω) · (1 − rs)
(1 − α − ω) · rs
γ · (1 − α − ω) · (1 − rs)
(1 − γ) · (1 − α − ω) · (1 − rs)
(1 − α − ω) · rs
α
ω
1
(−cm, lh)
(−cm, lh)
(−cm, lh)
(−cm, lh)
(cid:16)(cid:98)(lh + 1) la−be
(cid:16)(cid:98)(lh + 1) la−be
(cid:16)(cid:98)(lh + 1) la−be
(cid:16)(cid:98)(lh + 1) la−be
la
la
la
la
(cid:17)
(cid:17)
(cid:17)
(cid:17)
(cid:99) − cm, 0
(cid:99) − cm, 0
(cid:99) − cm, 0
(cid:99) − cm, 0
(−cm, 0)
(−cm, 0)
(−cm, 0)
(−cm, 0)
(−cm, 0)
(−cm, 0)
la
(−cm, 0)
(−cm, 0)
(cid:16)(cid:98)(lh) la−be
(cid:17)
(cid:99) − cm, 0
(la − be + vd, 0)
Table 2: State transition and reward matrices for optimal selﬁsh mining and double-spending strategies in PoW blockchains. α is the mining
power of the attacker, ω is the mining power of the eclipsed node, be is the number of blocks in the attacker chain that were mined by the
eclipsed node, γ is the fraction of nodes that an attacker can reach faster than the honest network, rs is the stale block rate and vd is the value
of the double-spend. The actions override and match are feasible only when la > lh or la ≥ lh, respectively. We discount the mining costs
cm ∈ [0, α] in the state transition reward only for double-spending. The fork label (last element of the state) is denoted by i, r and a for
irrelevant, relevant and active respectively. For a reward tuple (a, b), a corresponds to the adversary’s costs, while b represents the reward for
the honest network for selﬁsh mining.
block rewards), such that the exit state is reachable in the optimal
policy. If the policy contains an exit state, the expected gain of fol-
lowing the optimal double-spending strategy is higher than honest
mining. Otherwise, honest mining is the preferred strategy. We
apply binary search to ﬁnd the lowest double-spending value (in
units of block rewards, within an error margin of 0.1), for α, k, rs,
γ and cm.
In Table 3, we sketch an example of an optimal strategy for the
case where α = 0.3 (adversarial mining power), γ = 0 (propagation
parameter), cm = α (maximum mining costs), ω = 0 (no eclipse
attack), where we observe only wait, adopt and exit actions. Because
we can only solve ﬁnite MDPs, we choose a cutoff value of 20
blocks, i.e., neither the chain of the adversary nor the chain of the
honest network can be longer than the cutoff value. In the following
paragraphs, we discuss in greater details the impact of α, γ, cm,
rs, k, vd and ω on the optimal double-spending strategy and its
implications on the security of transaction conﬁrmations.
Recall that the absorbing state [24] of the Markov chain of our
double-spending MDP is the exit state. By computing the funda-
mental matrix [24] of the Markov chain, we calculate the expected
number of steps in the Markov chain—before being absorbed by the
exit state. These steps correspond to the expected number of blocks
required for a successful double-spending attack. In Figure 5, we
evaluate the expected number of blocks with respect to the adversar-
ial mining power and the number of transaction conﬁrmations k. We
observe that an adversary with a mining power of more than 0.25
is expected to need less than 1000 blocks for a successful double-
spending attack (up to k = 10 conﬁrmations), which corresponds
to a one week attack duration in Bitcoin.
Impact of the propagation parameter: Recall that the propaga-
tion parameter speciﬁes the connection capability of the adversary.
In Figure 8, we depict the minimum double-spending transaction
value that would result in ﬁnancial gain when compared to honest
mining (cf. Equation 25) when γ = 0, 0.5 and 1 respectively. Re-
call that a merchant is safe as long as he accepts transactions with a
value less than vd given these parameters.
Clearly, the higher γ is, the lower is the transaction value that an
0.00.10.20.30.40.5Adversarialminingpowerα0.00.20.40.60.81.0Relativerevenueselﬁshmining,rs=1.00%selﬁshmining,rs=10.00%α1−αhonestmining0.00.10.20.30.40.5Staleraters0.00.20.40.60.81.0Relativerevenueα=0.1α=0.30.00.10.20.30.40.5Adversarialminingpowerα0.00.10.20.30.40.5Eclipsedminingpowerω0.10.20.30.40.50.60.70.8RelativeRevenue9Figure 5: Expected number of blocks for
successful double-spending given rs =
0.41%, γ = 0, cm = α and ω = 0.
Figure 6: Impact of the mining cost cm on
the security of double spending (rs = 0.41%,
γ = 0, ω = 0). ∆vd is the difference in costs.
Figure 7: Impact of stale block rate rs on the
security of double-spending given γ = 0.5,
ω = 0 for α = 0.1, α = 0.3 and k = 6.
lh
la
0
1
2
3
4
5
6
7
8
1
*a*
3
***
*a*
8
7
6
4
2
0
5
***
***
***
***
w**
***
***
***
***
***
w** ww* ww*
***
***
***
***
***
w** ww* ww* ww* ww*
*a*
***
***