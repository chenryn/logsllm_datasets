### Figure 15: Cluster Pairs
Figure 15 shows cluster pairs (a) C4/C9 and (b) C3/C7. In each pair, the common points are highlighted in green, while the exclusive points for each cluster are shown in red or blue. The cluster outlines are overlaid to facilitate interpretation.

### Overlapping-Clustering Problem Definition
The Overlapping-Clustering problem aims to identify a labeling of each prefix such that the Jaccard distance between the labels assigned to two prefixes approximates the RSD (Routing State Distance) distance between the corresponding prefixes as closely as possible. Since the Jaccard distance is a real number in the interval [0, 1], we seek to approximate the normalized version of RSD.

Our definition of Overlapping-Clustering builds on the recent work by Bonchi et al. [5]. The formal definition is as follows:

**Problem 2 (Overlapping-Clustering):**
Given a set of nodes \( X \), their \( m \times n \) next-hop matrix \( N \), and an integer \( p \), identify a labeling of nodes \( L \) such that:
\[ L\text{-Cost}(L) = \sum_{x, x' \in X \times X} \left| J(x, x' | L) - eD(x, x') \right| \]
is minimized, and for every \( x \in X \), it is guaranteed that \( |L(x)| \leq p \).

### Input and Constraints
The definition of Problem 2 does not require the number of clusters in the output to be specified. Instead, it requires the maximum number of clusters \( p \) in which a node can participate. Note that the L-Cost function does not necessarily decrease as \( p \) increases. Therefore, there is an optimal value of \( p \) that can be found by trying all possible values (i.e., {1, ..., n}) and reporting the clustering with the smallest L-Cost value. In our experiments, we chose \( p = 10 \) because for \( p > 10 \), we observed no significant decreases in the objective function.

### Local Algorithm
Bonchi et al. [5] demonstrated that Problem 2 is not only NP-hard to solve but also NP-hard to approximate. Consequently, we use efficient heuristics to minimize the L-Cost objective function. We present a brief description of such a heuristic, called Local, which is an instantiation of the generic algorithm proposed in [5]. The code for this algorithm is available at: CodeURL.

**Algorithm 2: Local Algorithm**
The pseudocode for the Local algorithm is shown in Algorithm 2. It uses a local-search heuristic that starts with a random assignment of prefixes to clusters and iteratively improves it to reduce the L-Cost function. Specifically, in the first step (Initialize routine), every prefix is assigned a random set of at most \( p \) labels. Subsequently, the labels of each prefix \( x \) are adjusted to improve the cost of the objective function. This is done through the NNLS (Non-Negative Least Squares) and Boolean routines. First, NNLS finds a real-valued assignment of labels to a node by solving a non-negative least squares problem. The output of this step is a weighted association of the prefix with every cluster, denoted by \( \tilde{L} \). Then, the Boolean routine transforms the real-valued assignment into a one-zero assignment, resulting in a set of labels (i.e., clusters) associated with prefix \( x \). These steps are repeated until a local minimum with respect to the L-Cost function is reached.

### Overlapping Clustering Results
To demonstrate overlapping clustering using RSD, we applied the Local algorithm to our data with \( p = 10 \). This allows any prefix to be a member of up to 10 clusters. To understand the results, it is easiest to examine pairs of clusters. All pairs of clusters have some overlapping subset, so pairs of clusters illustrate the general power of overlapping clustering for our data.

From our 10 clusters, we focus on two pairs, denoted C4/C9 and C3/C7, visualized using MDS in Figure 15. The figure shows that, as intended, clusters overlap, with a large number of prefixes in both clusters. Interestingly, points that are close to each other in RSD space, as visualized in 2-D, are not necessarily contained in the same cluster. For example, note the regions on the right side of each plot where points belonging to distinct clusters are shown to be near in RSD.

### Visualization of Next-Hop Matrices
Figure 16 shows submatrices of \( N \) with different next-hop ASes in different colors. These submatrices correspond to the cluster pairs C4/C9 and C3/C7. In each figure, the columns are ordered so that the prefixes contained in each cluster are in the center, and the prefixes that are only in one cluster are on the sides. This visualization helps us understand the sets of ASes that give rise to each cluster.

For instance, in Figure 16(a), the AS in row 4 has the same next hop for all prefixes in cluster C4 but not for those only in C9. Similarly, the AS in row 8 has the same next hop for prefixes in C9 but not for those only in C4. In the case of C3/C7, the cluster-defining rows are rows 5 and 10.

### Conclusion
These results provide evidence that overlapping clustering (using an algorithm such as Local) can find clusters in which different sets of ASes each have cohesive routing behavior over overlapping sets of prefixes. This holds the promise of extracting a richer set of local atoms from BGP data.

### Discussion
RSD, due to its simple definition, is a general tool that can be used in various settings, including further in-depth analysis of BGP and application to different domains. A promising direction is to incorporate temporal analysis by considering a set of next-hop matrices indexed in time, \( N_t, N_{t+1}, \ldots \). This can help detect sudden, significant routing changes or characterize the evolving routing structure of the Internet.

Another direction for BGP analysis is to leverage the low effective rank property of the RSD matrix \( D \), which can be used for anomaly detection and matrix completion. Beyond BGP, RSD can be applied to any situation where paths between nodes are an available data source, such as traceroute measurements, information dissemination in social media, or infection propagation in social and communication networks.

### Related Work
Publicly available BGP tables provide an incomplete view of the AS graph, making it important to develop tools that can analyze the network using only BGP path data. Our work also touches on the problem of visualizing prefixes based on BGP data, which is a relatively unexplored area. Additionally, we generalize and extend the notion of policy atoms to analyze routing behaviors at different granularities.

### Conclusions
In this paper, we developed a new set of tools for extracting insights from BGP measurements. We defined a new metric, RSD, for measuring the distance between prefixes, which captures the notion of 'closeness' with respect to the global routing state of the Internet. We showed that RSD can uncover surprising patterns in routing data, such as large numbers of ASes making similar routing decisions with respect to specific sets of prefixes, which we call local atoms. We developed and demonstrated the power of two new clustering methods, Pivot and Local, specifically tailored for use with RSD. The combination of computing RSD, visualizing RSD using MDS, and clustering RSD using Pivot and Local constitutes a powerful toolbox for discovering patterns in massive datasets of BGP paths.

### Acknowledgements
This work was supported by NSF grants, a GAANN Fellowship, and grants from Microsoft, Yahoo!, and Google. The authors thank the IMC referees and shepherd for their help in improving the paper and appreciate helpful discussions with various network operators.

### References
[References listed here, formatted consistently]

---

This optimized text is more structured, clear, and professional, with improved flow and coherence.