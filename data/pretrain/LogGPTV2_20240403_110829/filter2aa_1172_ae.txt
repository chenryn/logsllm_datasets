### Host Memory Configuration for Paging

- **Host Physical Address:** 0x10ba10000
  - **Paging Memory:** 0x01020000
  - **Page Number:** 12

- **Host Physical Address:** 0x10ba18000
  - **Paging Memory:** 0x01028000
  - **Page Number:** 13

- **Host Physical Address:** 0x10ba20000
  - **Paging Memory:** 0x01030000
  - **Page Number:** 14

- **Host Physical Address:** 0x10ba28000
  - **Paging Memory:** 0x01038000
  - **Page Number:** 15

**Listing 19. Extracting the configuration of the paging memory from the chip**

If the chip does not keep all pages when processing the `FW_PAGING_BLOCK_CMD` command, how is it able to use this memory? By accessing memory through the debug filesystem, we confirm that the memory located at addresses 0x01000000, 0x01008000, etc., is indeed readable and writable. The answer is: by using the Memory Management Unit (MMU)!

The UMAC processor defines handlers for the exception vectors `TLBMissI` and `TLBMissD` (at addresses 0xc0080108 and 0xc0080110), which occur when a memory access fails. These handlers integrate a complex state machine that loads the requested memory page from the host using DMA into a memory area between 0x00422000 and 0x00447fff. To confirm the analysis, we read the global variables used by this state machine, including an array at 0x804508b8. For example, in an experiment, this array starts with the bytes `ff ff 10 ff 0b ff`.

- **First Byte (0xff):** The first page (at 0x01000000) is not currently mapped by the chip.
- **Second Byte (0xff):** The page at 0x01001000 is not mapped.
- **Third Byte (0x10):** The page at 0x01002000 is mapped at physical address 0x00422000 + 0x10*0x1000 = 0x00432000 of the chip. This is confirmed by reading the data stored at this address directly.

The Wi-Fi chip has space for 38 4KB-pages, and the firmware defines 59 pages, so it is impossible to load all of them simultaneously. Moreover, these regions contain global variables updated by the firmware. How does the firmware keep the modified bytes when some room is needed to load a newly requested page? By sending another DMA request to write the modified bytes to the host memory. Using Chipsec to read the host physical memory, we observe that the buffer allocated for this Paging memory is modified.

In summary, the code running on the UMAC processor uses its MMU to extend its memory capacity by relying on DMA transfers with the host memory to store data that do not fit.

### Protecting the Integrity of the Paging Memory

Once we understood the mechanism of the Paging Memory, we tried an obvious attack: modifying a byte in the host memory and making the Wi-Fi chip request it by issuing a command to read memory. This failed (the UMAC reported a `NMI_INTERRUPT_UMAC_FATAL` error, and iwlwifi restarted the chip). We did not understand why. How is the integrity of the Paging Memory guaranteed?

The function handling the `FW_PAGING_BLOCK_CMD` command performs some operations that we initially overlooked:

- It writes the address 0x8048f400 in the peripheral register 0x00a0482c and 0x1000 in 0x00a0480c.
- Before receiving a page (to verify the signature), it writes the physical address of the received page in 0x00a04808, the index of the virtual page in 0x00a04804, and 1 in 0x00a04800.
- After receiving a page, it waits for some bits in the peripheral register 0x00a04800 to become set.

These registers are also used near the code that performs DMA requests. They might be used to compute some digest of the data, possibly stored at the first address used, 0x8048f400 (which is the physical address 0x0048f400). Surprisingly, the content at this location is not readable using the debug commands used by `iwlmvm/mem`. This limitation is due to a check that forbids reading any data between 0x0048f000 and 0x0048ffff. Fortunately, we can load a modified firmware without this restriction.

After more experiments, we discovered that 0x0048f400 holds a table of 32-bit checksums for each 4 KB page of the Paging Memory. The checksum of the first page (whose virtual address is 0x01000000) is located at 0x0048f400, the checksum of the second one at 0x0048f404, and so on. In an experiment, we obtained the following checksums:

- A page with 4096 zeros: `00 00 00 00`
- A page with 4095 zeros and `01`: `11 ac d8 7f`
- A page with 4095 zeros and `02`: `22 58 b1 ff`
- A page with 4095 zeros and `03`: `33 f4 69 80`
- A page with 4095 zeros and `04`: `c9 b0 62 ff`

These values are not random; they are linear with the input. By XOR-ing the results of the lines with `01` and `02`, we obtain the result written in the line with `03`. Also, taking the bytes of the line with `01` and shifting them left one bit gives the result of the line with `02`, with a bit moved from `ac` to `b1`. Continuing this trail, we found that the computation involved a 32-bit Linear Feedback Shift Register (LFSR) on the input bytes considered as a sequence of 32-bit Little Endian integers, with polynomials `0x10000008d`. However, it is not only an LFSR, as values change every time the chip is reset.

More experiments reduced the algorithm to the Python function presented in Listing 20. Discussions within our team made us understand we were watching a scheme named Universal Message Authentication Code (UMAC), and our implementation matches the example on Wikipedia.

```python
def checksum(page, secret_key):
    # Return the checksum of a 4096-byte page with a 1024-int key
    result = 0
    for index_32bit_word in range(1024):
        page_bytes = page[index_32bit_word * 4: index_32bit_word * 4 + 4]
        page_value = int.from_bytes(page_bytes, "little")
        sec = secret_key[index_32bit_word]
        for bit_pos in range(32):
            if page_value & (1 << bit_pos):
                result ^= sec
        # Linear Feedback Shift Register with 0x10000008d
        if sec & 0x80000000:
            sec = ((sec & 0x7fffffff) << 1) ^ 0x8d
        else:
            sec = sec << 1
    return result
```

**Listing 20. Python implementation of the checksum algorithm used to ensure the integrity of the Paging Memory**

This algorithm is quite weak in this case: in our study, we were able to request the checksums for pages containing bytes `01 00...00`, `00 00 00 00 01 00...00`, etc., which directly leaks the 1024 integers used in the secret key. With this key, it is simple to modify a page in a way that does not modify the checksum.

In summary, the integrity of the Paging Memory, which prevents the Linux kernel from modifying its content, is guaranteed by a 32-bit checksum algorithm, a secret key generated each time the chip boots, and the impossibility to read the stored checksums (we achieved this by compromising the integrity of the firmware beforehand). We did not discover a vulnerability but a way to leverage future arbitrary-read vulnerabilities into arbitrary code execution on the Wi-Fi chip.

### Instrumentation, Tooling, and Fuzzing

#### Debugger

A debugger has been developed to make the dynamic analysis of some pieces of firmware code easier. A shellcode is first written in a part of uninitialized firmware memory. The first instruction of the debugged code is modified to redirect the firmware execution to the shellcode. The shellcode waits in a loop for custom commands from the host to:

- Read and write LMAC and UMAC CPU registers
- Read and write from/to memory
- Resume the execution of the firmware

To make debugging faster, an experiment was conducted with QEMU to redirect the execution of the debugged code in QEMU and forward the memory and register accesses to the debugger. Slight modifications of QEMU’s core are required to allow QEMU’s plugin system to write to memory. However, a few issues were encountered:

- Firmware timers are triggered at regular intervals, disturbing debugging. Disabling these timers leads to unexpected side effects.
- Extension Core Registers are modified by the hardware even if executed instructions don’t reference them.
- A few ARC700 instructions must be fixed or added to QEMU.

#### Traces

Once secure boot is disabled and unsigned firmware can be loaded, the firmware can be patched to change the behavior of some functions. To facilitate firmware analysis, a tracing mechanism was developed to dynamically track which functions are executed.

The list of all firmware functions is retrieved using a custom Ghidra script. These functions are patched to replace the first prologue instruction (`push_s blink`) with the instruction `trap_s 0`. The code of the associated interrupt handler is replaced to store the address of the instruction that triggered the interrupt in a buffer shared with the host. This mechanism allows gathering every function executed by the firmware, but it is slightly more complicated on the UMAC processor:

- The instruction `trap_s 0` triggers an unrecoverable machine check exception. An invalid instruction seems to trigger a different interrupt handler, but it can also be replaced to store the faulty instruction.
- Some functions cannot be instrumented because triggering an interrupt during their execution leads to a machine check exception, likely due to a double fault.

#### On-Chip Fuzzing

To find vulnerabilities, the firmware code was modified to hook some functions related to Wi-Fi packet parsing and fuzz randomly input parameters. While this leads to crashes, these functions use hardware registers, making crashes dependent on the state of the card. Crashes are thus difficult to reproduce. Additionally, some checks on packet validity seem to be done by the hardware before packets are handled by the firmware. These crashes cannot be reproduced through remote frame injection.

### Initial Crash Analysis

Further analysis showed that the initial bug leading to this study is not exploitable. It is a crash of the LMAC CPU because the firmware does not expect to receive TDLS Setup Request commands from the host, while the device seems to support TDLS (Tunnel Direct Link Setup, see Listing 21).

```sh
$ iw phy | grep -i tdls
* tdls_mgmt
* tdls_oper
Device supports TDLS channel switching
```

**Listing 21. Querying TDLS support on the first studied chip**

Several users reported this crash on the Kernel Bug Tracker, and the bug is fixed since firmware update 36. As explained by the maintainer:

"Anyway, the new firmware has the fix: we don’t advertise TDLS anymore."

It's worth noting that even if a firmware update is available, some Linux distributions do not include it. For instance, this crash can reliably be triggered remotely with a single Wi-Fi packet targeting an up-to-date Ubuntu 18.04, leading to the reboot of the Wi-Fi firmware.

### Conclusion

This journey studying Intel Wi-Fi chips was incredible. We did not expect to bypass the secure boot mechanism of the chip, and this achievement opened the door to many new possibilities. Most importantly, we can now instrument the firmware to better understand some undocumented parts.

While this document is quite large, it does not include some work that was also done, such as studying how the WoWLAN (Wake-on-Wireless Local Area Network) feature is implemented, how ThreadX operating system is used by the UMAC code, how the chip really communicates with the host using DMA, how fragmented Wi-Fi frames are parsed, and how the LMAC configures an MPU (Memory Protection Unit). In the future, we will likely continue looking for vulnerabilities in the Wi-Fi radio interface. Future work can also include how the Wi-Fi part of the chip interacts with the Bluetooth part, as all studied chips also provide a Bluetooth interface that seems to require some coordination with the Wi-Fi firmware to operate. Another area of interest could be the interaction between the Wi-Fi chip and Intel CSME (Converged Security and Management Engine) for AMT (Active Management Technology).

We would like to thank our employer Ledger for letting us work on this exciting topic, Intel developers for providing useful documentation in iwlwifi, and Microsoft for publishing the ThreadX source code. Finally, we hope that the publication of this article will lay the groundwork for helping other researchers to dive into this topic.

### Appendix: Glossary

- **BAR:** Base Address Register
- **CSS:** (probably) Code Signature Section (a firmware section that contains metadata about other sections, including a signature)
- **DMA:** Direct Memory Access (a way to transmit data between two devices without running code on a processor)
- **DCCM:** Data Close Coupled Memory (a type of memory)
- **LMAC:** Lower Medium Access Controller
- **MMIO:** Memory-Mapped Input Output
- **SRAM:** Static Random Access Memory (a type of memory)
- **UMAC:** Upper Medium Access Controller

### References

1. ARC. Arc 700 memory management unit reference, 2008. [Link](http://me.bios.io/images/7/73/ARC700_MemoryManagementUnit_Reference.pdf)
2. Gal Beniamini. Over the air: Exploiting Broadcom’s Wi-Fi stack (part 1), 2017. [Link](https://googleprojectzero.blogspot.com/2017/04/over-air-exploiting-broadcoms-wi-fi_4.html)
3. Andrés Blanco and Matías Eissler. One firmware to monitor 'em all, 2012. [Link](http://archive.hack.lu/2012/Hacklu-2012-one-firmware-Andres-Blanco-Matias-Eissler.pdf)
4. Guillaume Delugré. How to develop a rootkit for Broadcom NetExtreme network cards. RECON, July 2011. [Link](https://recon.cx/2011/schedule/events/120.en.html)
5. Louis Granboulan. `cpu_rec.py`, un outil statistique pour la reconnaissance d’architectures binaires exotiques. SSTIC, June 2017. [Link](https://www.sstic.org/2017/presentation/cpu_rec/)
6. Nicolas Iooss. Analyzing arcompact firmware with Ghidra. SSTIC, June 2021. [Link](https://www.sstic.org/2021/presentation/analyzing_arcompact_firmware_with_ghidra/)
7. Yuval Ofer, Omri Ildis, and Ruby Feinstein. Wardriving from your pocket, 2013. [Link](https://recon.cx/2013/slides/Recon2013-Omri%20Ildis%2C%20Yuval%20Ofir%20and%20Ruby%20Feinstein-Wardriving%20from%20your%20pocket.pdf)
8. Yves-Alexis Perez, Loïc Duflot, Olivier Levillain, and Guillaume Valadon. Quelques éléments en matière de sécurité des cartes réseau. SSTIC, June 2010. [Link](https://www.sstic.org/2010/presentation/Peut_on_faire_confiance_aux_cartes_reseau/)
9. Julien Tinnès and Laurent Butti. Recherche de vulnérabilités dans les drivers 802.11 par techniques de fuzzing. SSTIC, June 2007. [Link](https://www.sstic.org/2007/presentation/Recherche_de_vulnerabilites_dans_les_drivers_par_techniques_de_fuzzing/)