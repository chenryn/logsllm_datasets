19
七、CRLF 注入
2015 年 4 月，有报告称，Twitter 存在一个漏洞，允许攻击者通过将信息添加到发往 Twitter
的请求，设置任意 Cookie。
本质上，在生成上面 URL 的请求之后（一个 Twitter 的遗留功能，允许人们报告广告），
Twitter 会为参数 reported_tweet_id 返回 Cookie。但是，根据报告，Twitter 的验证存在缺
陷，它用于确认推文是否是数字形式。
虽然 Twitter 验证了换行符 0x0a 不能被提交时，验证机制可以通过将字符编码为 UTF-8 来绕
过。这么做之后，Twitter 会将字符转换会原始的 Unicode，从而避免了过滤。这是所提供的
示例：
%E5%98%8A => U+560A => 0A
这非常重要，因为换行符在服务器上被解释为这样的东西，创建新的一行，服务器读取并执
行它，这里是用于添加新的 Cookie。
现在，当 CRLF 攻击允许 XSS 攻击的时候（请见 XSS 一章），它们还会更加危险。这种情
况下，由于 Twitter 的过滤器被绕过了，包含 XSS 攻击的新的响应可能返回给用户，这里是
URL：
https://twitter.com/login?redirect_after_login=https://twitter.com:21/%E5%98%8A
%E5%98%8Dcontent-type:text/html%E5%98%8A%E5%98%8Dlocation:%E5%98%8A%E5%98%8D
%E5%98%8A%E5%98%8D%E5%98%BCsvg/onload=alert%28innerHTML%28%29%E5%98%BE
要注意 布满了这个 URL。如果我们使用了这些字符，并且实际添加了换行符，这
%E5%E98%8A
个就是协议头的样子：
https://twitter.com/login?redirect_after_login=https://twitter.com:21/
content-type:text/html
location:%E5%98%BCsvg/onload=alert%28innerHTML%28%29%E5%98%BE
你可以看到，换行符允许了创建新的协议头，并和可执行的 JavaScript 一起返
回： 。使用这个代码，恶意用户就能够盗取任何无防备的受害
svg/onload=alert(innerHTML)
者的 Twitter 会话信息。
重要结论
好的攻击是观察与技巧的组合这里，报告者 @filedescriptor 了解之前的 Firefox 编码漏
洞，它错误处理了编码。对这个知识的了解就可以用于测试 Twitter 上相似的编码来插入
换行。
当你寻找漏洞时，始终记住要解放思想，并提交编码后的值来观察站点如何处理输入。
20
七、CRLF 注入
2. Shopify 响应分割
难度：中
URL：
v.shopify.com/last_shop?x.myshopify.com
报告链接：
https://hackerone.com/reports/106427
报告日期：2015.12.22
奖金：$500
描述：
Shopify 包含了一些隐藏功能，会在你的浏览器上设置 Cookie，它指向你所登录的最后一个
商店。它通过终端 来实现。
/last_shop?SITENAME.shopify.com
在 2015 年 12 月，有人发现，Shopify 不验证在调用中传入的 shop 参数。所以，使用 Burp
Suite，白帽子就能够使用 来修改请求，并生成协议头返回给用户。这里是截图：
%0d%0a
这里是恶意代码：
%0d%0aContent-Length:%200%0d%0a%0d%0aHTTP/1.1%20200%20OK%0d%0aContent-Type:%20te\
xt/html%0d%0aContent-Length:%2019%0d%0a%0d%0adeface
这里， 表示空格， 是 CRLF。所以浏览器收到了两个协议头，并渲染了第二个，
%20 %0d%0a
它能够导致很多漏洞，包括 XSS。
重要结论
一定要寻找这样的机会，其中站点接受你的输入，并且将其用于返回协议头的一部分。
这里，Shopify 使用 last_shop 值创建了 Cookie，它实际上可悲用户克隆的 URL 参数污
染。这是一个不错的信号，它可能存在 CRLF 注入漏洞。
总结
21
七、CRLF 注入
良好的攻击是观察和技巧的结合。了解如何使用编码字符串来发现漏洞是一个不错的技
巧。 %0D%0A 可以用于测试服务器，以及判断他们是否存在 CRLF 漏洞。如果存在，进一步尝
试使用 XSS 注入来组合盖漏洞（请见第七节）。
另一方面，如果服务器不响应 ，要考虑如何再次编码这些字符，并测试服务器，以便
%0D%0A
观察它是否解码双重编码的字符，就像 所做的那样。
@filedescriptor
一定要寻找这样的机会，其中站点使用提交的值来返回一些类型的协议头，例如创建
Cookie。
22
八、跨站请求伪造
八、跨站请求伪造
作者：Peter Yaworski
译者：飞龙
协议：CC BY-NC-SA 4.0
描述
跨站请求伪造，或 CSRF 攻击，在恶意网站、电子邮件、即使消息、应用以及其它，使用户
的 Web 浏览器执行其它站点上的一些操作，并且用户已经授权或登录了该站点时发生。这通
常会在用户不知道操作已经执行的情况下发生。
CSRF 攻击的影响取决于收到操作的站点。这里是一个例子：
1. Bob 登录了它的银行账户，执行了一些操作，但是没有登出。
2. Bob 检查了它的邮箱，并点击了一个陌生站点的链接。
3. 陌生站点向 Bob 银行站点发送请求来进行转账，并传递第一步中，保存 Bob 银行会话的
Cookie 信息。
4. Bob 的银行站点收到了来自陌生（恶意）站点的请求，没有使用 CSRF Token 的情况下
处理了转账。
更有意思的是这个想法，也就是恶意网站的链接可以包含有效的
HTML，  ，并且并不需要 Bob 点击链接。如果 Bob 的设
备（例如浏览器）渲染了这个图片，它会向 malicious_site.com 发送请求，来完成 CSRF 攻
击。
现在，知道了 CSRF 的危险之后，它们可以以多种方式防范。最流行的方式大概是 CSRF
Token，它必须随着潜在的数据修改气你去一起提交（例如 POST 请求）。这里，Web 应用
（例如 Bob 的银行）会生成一个两部分的 Token，一个 Bob 会收到，另一个由应用保管。
当 Bob 试图提交转账请求时，它就需要提交 Token，银行会验证它这一边的 Token。
现在，对于 CSRF 和 CSRF Token 来说，跨域资源共享似乎越来越普遍了。或者只是我注意
到是这样。本质上，CORS 限制了资源，包括 JSON 响应，被外域访问。换句话说，当
CORS 用于保护站点时，你就不能编写 JavaScript 来调用目标应用，读取响应或者进行另一
个调用，除非目标站点允许。
似乎这非常令人混乱，使用 JavaScript，尝试调用 ，读取响应
HackerOne.com/activity.json
并进行二次调用。你也会在下面的例子 #3 看到它的重要性，以及潜在的原理。
23
八、跨站请求伪造
最后，重要的是要记住（感谢 Jobert Abma 补充），并不是每个不带有 CSRF Token 的请求
都带有 CSRF 问题。一些站点可能执行额外的检查，例如比较 Referer 协议头（虽然可能出
错，并且有一些绕过它的案例）。它是一个字段，标识了链接到被请求资源的页面地址。换
句话说，如果 POST 调用中的 Referer 并不来源于收到 HTTP 请求的相同站点，站点可能不
允许该调用，因此能够完成和验证 CSRF Token 的相同操作。此外，不是每个站点在创建或
者定义 Token 时都使用 csrf 术语。例如，在 Badoo 它使用 rt 参数，我们下面会讨论。
链接
查看 OWASP 测试指南。
示例
1. Shopify 导出已安装的用户
难度：低
URL：
https://app.shopify.com/services/partners/api_clients/XXXX/export_installed_users
报告链接：
https://hackerone.com/reports/96470
报告日期：2015.10.29
奖金：$500
描述：
Shopify 的 API 提供了一个终端，用于导出已安装用户的列表，通过上面给出的 URL。在站
点能够调用该终端，并且读取信息的地方存在漏洞，因为 Shopify 在该调用中并没有包含任何
CSRF Token 验证。所以，下面的 HTML 代码可以用于代表任何未知受害者提交表单。
csrf
这里，通过仅仅浏览站点，JavaScript 就会提交表单，它实际上包含 Shopify API 的 GET 请
求，使用受害者的浏览器，并提供 Shopify 的 Cookie。
24
八、跨站请求伪造
重要结论
扩展你的攻击领域，并从站点转向它的 API 终端。API 提供了极大的漏洞可能性，所以
最好牢记他，尤其是当你知道 API 可能开发完毕，或者在站点实际开发之后可用的时
候。
2. Shopify Twitter 断开连接
难度：低
URL：
https://twitter-commerce.shopifyapps.com/auth/twitter/disconnect
报告链接：
https://hackerone.com/reports/111216
报告日期：2016.1.17
奖金：$500
描述：
Shopify 提供了 Twitter 的继承，来允许店主转推它们的商品。与之相似，也提供了功能来断
开推特账户和被连接商店的链接。
断开 Twitter 账户的 URL 写在了上面。当进行调用时，Shopify 不验证 CSRf Token，这可能
会允许恶意人员代表受害者进行 GET 调用，因此断开受害者的商店与 Twitter 的连接。
在提供这份报告的时候，WeSecureApp 提供了下面的漏洞请求示例 - 要注意下面的 img 标签
的使用，它对漏洞 URL 进行调用：
GET /auth/twitter/disconnect HTTP/1.1
Host: twitter-commerce.shopifyapps.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:43.0) Gecko/2010010\ 1 Fi
refox/43.0
Accept: text/html, application/xhtml+xml, application/xml
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://twitter-commerce.shopifyapps.com/account
Cookie: _twitter-commerce_session=REDACTED
Connection: keep-alive
由于浏览器进行 GET 请求来获取给定 URL 处的图片，并且不验证任何 CSRF Token ，用户
的商店现在已断开连接：
25
八、跨站请求伪造
重要结论
这种情况下，这个漏洞可以使用代理服务器来发现，例如 Burp 或者 Firefox 的 Tamper
Data，来观察发送给 Shopify 的请求，并主要到这个请求使用 GET 方式来执行。由于这
是个破坏性操作，而 GET 请求不应该修改任何服务器上的数据，这应该是一些需要关注
的事情。
3. Badoo 账户的完整控制
难度：中
URL：
https://badoo.com
报告链接：
https://hackerone.com/reports/127703
报告日期：2016.4.1
奖金：$852
描述：
如果你仔细检查 Badoo ，你会发现，它们通过包含 URL 参数 rt 来防御 CSRF，它只有 5 个
位数（至少在我写这篇的时候）。虽然我在 Badoo 入驻 HackerOne 的时候就注意到了，我
并没有找到利用它的方式，但是 找到了。