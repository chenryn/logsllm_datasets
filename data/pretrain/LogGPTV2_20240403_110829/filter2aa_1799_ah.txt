https://github.com/ionescu007/SpecuCheck
I
The SkTool, developed by Andrea Allievi (one of the authors of this book) and distributed
(at the time of this writing) in newer Insider releases of Windows.
All of the three tools yield more or less the same results. Only the SkTool is able to show the 
EXPERIMENT: Querying system side-channel mitigation status
Windows exposes side-channel mitigation information through the SystemSpeculationControl
Information and SystemSecureSpeculationControlInformation information classes used by the 
NtQuerySystemInformation native API. Multiple tools exist that interface with this API and show 
to the end user the system side-channel mitigation status:
I
supported by Microsoft, which is open source and available at the following GitHub 
repository: https://github.com/microsoft/SpeculationControl
I
The SpecuCheck tool, developed by Alex Ionescu (one of the authors of this book), 
which is open source and available at the following GitHub repository: 
https://github.com/ionescu007/SpecuCheck
https://github.com/ionescu007/SpecuCheck  
https://github.com/ionescu007/SpecuCheck
I
The SkTool, developed by Andrea Allievi (one of the authors of this book) and distributed 
(at the time of this writing) in newer Insider releases of Windows.
All of the three tools yield more or less the same results. Only the SkTool is able to show the 
CHAPTER 8 System mechanisms
29
mitigations have been enabled in your system. Download SpecuCheck and execute it by open-
ing a command prompt window (type cmd in the Cortana search box). You should get output like 
the following:
SpecuCheck v1.1.1    --   Copyright(c) 2018 Alex Ionescu 
https://ionescu007.github.io/SpecuCheck/  --   @aionescu 
-------------------------------------------------------- 
Mitigations for CVE-2017-5754 [rogue data cache load] 
-------------------------------------------------------- 
[-] Kernel VA Shadowing Enabled:
yes 
> Unnecessary due lack of CPU vulnerability:    no 
> With User Pages Marked Global:
no 
> With PCID Support:
yes 
> With PCID Flushing Optimization (INVPCID):   yes 
Mitigations for CVE-2018-3620 [L1 terminal fault] 
[-] L1TF Mitigation Enabled:
yes 
> Unnecessary due lack of CPU vulnerability:    no 
> CPU Microcode Supports Data Cache Flush:     yes 
> With KVA Shadow and Invalid PTE Bit:
yes
(The output has been trimmed for space reasons.)
You can also download the latest Windows Insider release and try the SkTool. When launched 
with no command-line arguments, by default the tool displays the status of the hypervisor and 
with the /mitigations command-line argument:
Hypervisor / Secure Kernel / Secure Mitigations Parser Tool 1.0 
Querying Speculation Features... Success! 
   This system supports Secure Speculation Controls. 
System Speculation Features. 
   Enabled: 1 
   Hardware support: 1 
   IBRS Present: 1 
   STIBP Present: 1 
   SMEP Enabled: 1 
   Speculative Store Bypass Disable (SSBD) Available: 1 
   Speculative Store Bypass Disable (SSBD) Supported by OS: 1 
   Branch Predictor Buffer (BPB) flushed on Kernel/User transition: 1 
   Retpoline Enabled: 1 
   Import Optimization Enabled: 1 
   SystemGuard (Secure Launch) Enabled: 0 (Capable: 0) 
   SystemGuard SMM Protection (Intel PPAM / AMD SMI monitor) Enabled: 0 
Secure system Speculation Features. 
   KVA Shadow supported: 1 
   KVA Shadow enabled: 1 
   KVA Shadow TLB flushing strategy: PCIDs 
   Minimum IBPB Hardware support: 0 
   IBRS Present: 0 (Enhanced IBRS: 0) 
mitigations have been enabled in your system. Download SpecuCheck and execute it by open-
ing a command prompt window (type cmd in the Cortana search box). You should get output like 
the following:
SpecuCheck v1.1.1    --   Copyright(c) 2018 Alex Ionescu
https://ionescu007.github.io/SpecuCheck/  --   @aionescu
--------------------------------------------------------
Mitigations for CVE-2017-5754 [rogue data cache load]
--------------------------------------------------------
[-] Kernel VA Shadowing Enabled:
yes
> Unnecessary due lack of CPU vulnerability:    no
> With User Pages Marked Global:
no
> With PCID Support:
yes
> With PCID Flushing Optimization (INVPCID):   yes
Mitigations for CVE-2018-3620 [L1 terminal fault]
[-] L1TF Mitigation Enabled:
yes
> Unnecessary due lack of CPU vulnerability:    no
> CPU Microcode Supports Data Cache Flush:     yes
> With KVA Shadow and Invalid PTE Bit:
yes
(The output has been trimmed for space reasons.)
You can also download the latest Windows Insider release and try the SkTool. When launched 
with no command-line arguments, by default the tool displays the status of the hypervisor and 
with the /mitigations command-line argument:
Hypervisor / Secure Kernel / Secure Mitigations Parser Tool 1.0
Querying Speculation Features... Success!
   This system supports Secure Speculation Controls.
System Speculation Features.
   Enabled: 1
   Hardware support: 1
   IBRS Present: 1
   STIBP Present: 1
   SMEP Enabled: 1
   Speculative Store Bypass Disable (SSBD) Available: 1
   Speculative Store Bypass Disable (SSBD) Supported by OS: 1
   Branch Predictor Buffer (BPB) flushed on Kernel/User transition: 1
   Retpoline Enabled: 1
   Import Optimization Enabled: 1
   SystemGuard (Secure Launch) Enabled: 0 (Capable: 0)
   SystemGuard SMM Protection (Intel PPAM / AMD SMI monitor) Enabled: 0
Secure system Speculation Features.
   KVA Shadow supported: 1
   KVA Shadow enabled: 1
   KVA Shadow TLB flushing strategy: PCIDs
   Minimum IBPB Hardware support: 0
   IBRS Present: 0 (Enhanced IBRS: 0)
30 
CHAPTER 8 System mechanisms
   STIBP Present: 0 
   SSBD Available: 0 (Required: 0) 
   Branch Predictor Buffer (BPB) flushed on Kernel/User transition: 0 
   Branch Predictor Buffer (BPB) flushed on User/Kernel and VTL 1 transition: 0 
   L1TF mitigation: 0 
   Microarchitectural Buffers clearing: 1
Trap dispatching
Interrupts and exceptions are operating system conditions that divert the processor to code outside 
trap refers to a 
control to a trap handler
illustrates some of the conditions that activate trap handlers.
The kernel distinguishes between interrupts and exceptions in the following way. An interrupt is an 
asynchronous event (one that can occur at any time) that is typically unrelated to what the processor is 
executing. Interrupts are generated primarily by I/O devices, processor clocks, or timers, and they can 
be enabled (turned on) or disabled (turned off). An exception, in contrast, is a synchronous condition 
Aborts, such as machine checks, are 
-
tions and aborts are sometimes called faults, such as when talking about a page fault or a double fault. 
Running a program for a second time with the same data under the same conditions can reproduce 
exceptions. Examples of exceptions include memory-access violations, certain debugger instructions, 
and divide-by-zero errors. The kernel also regards system service calls as exceptions (although techni-
Trap handlers
Interrupt
Interrupt
service
routines
Interrupt
service
routines
Interrupt
service
routines
System service call
Interrupt
service
routines
Interrupt
service
routines
System
services
Virtual address
exceptions
Interrupt
service
routines
Interrupt
service
routines
Virtual memory
manager’s
pager
Interrupt
service
routines
Interrupt
service
routines
Exception
handlers
Hardware exceptions
Software exceptions
Exception
dispatcher
(Exception
frame)
FIGURE 8-11 Trap dispatching.
   STIBP Present: 0
   SSBD Available: 0 (Required: 0)
   Branch Predictor Buffer (BPB) flushed on Kernel/User transition: 0
   Branch Predictor Buffer (BPB) flushed on User/Kernel and VTL 1 transition: 0
   L1TF mitigation: 0
   Microarchitectural Buffers clearing: 1
CHAPTER 8 System mechanisms
31
-
tion is caused by a hardware problem, whereas a divide-by-zero exception is the result of a software 
bug. Likewise, an I/O device can generate an interrupt, or the kernel itself can issue a software interrupt 
(such as an APC or DPC, both of which are described later in this chapter).
current Code Segment (CS) is in CPL 0 or below (i.e., if the current thread was running in kernel mode or 
user mode). In the case where the thread was already running in Ring 0, the processor saves (or pushes) 
on the current stack the following information, which represents a kernel-to-kernel transition.
I 
I 
The current code segment (CS)
I 
The current program counter (EIP/RIP)
I 
Optionally, for certain kind of exceptions, an error code
looks up the current TSS based on the Task Register (TR) and switches to the SS0/ESP0 on x86 or simply 
RSP0 on x64, as described in the “Task state segments” section earlier in this chapter. Now that the pro-
cessor is executing on the kernel stack, it saves the previous SS (the user-mode value) and the previous 
had happened. Second, it allows the operating system to know (based on the saved CS value) where 
the trap came from—for example, to know if an exception came from user-mode code or from a 
kernel system call.
machine state—including registers such as EAX, EBX, ECX, EDI, and so on is saved in a trap frame, a 
data structure allocated by Windows in the thread's kernel stack. The trap frame stores the execution 
dt nt!_KTRAP_FRAME command in the kernel debugger, or, 
Part 1.) The kernel handles software interrupts either as part of hardware interrupt handling or synchro-
nously when a thread invokes kernel functions related to the software interrupt.
In most cases, the kernel installs front-end, trap-handling functions that perform general trap-
if the condition was a device interrupt, a kernel hardware interrupt trap handler transfers control to the 
interrupt service routine (ISR) that the device driver provided for the interrupting device. If the condition 
was caused by a call to a system service, the general system service trap handler transfers control to the 
handle. These are sometimes called spurious or unexpected traps. The trap handlers typically execute 
32 
CHAPTER 8 System mechanisms
the system function KeBugCheckEx, which halts the computer when the kernel detects problematic 
or incorrect behavior that, if left unchecked, could result in data corruption. The following sections 
describe interrupt, exception, and system service dispatching in greater detail.
Interrupt dispatching
Hardware-generated interrupts typically originate from I/O devices that must notify the processor 
when they need service. Interrupt-driven devices allow the operating system to get the maximum 
use out of the processor by overlapping central processing with I/O operations. A thread starts an I/O 
transfer to or from a device and then can execute other useful work while the device completes the 
keyboards, disk drives, and network cards are generally interrupt driven.
to initiate thread dispatching and to break into the execution of a thread asynchronously. The kernel can 
The kernel installs interrupt trap handlers to respond to device interrupts. Interrupt trap handlers 
transfer control either to an external routine (the ISR) that handles the interrupt or to an internal kernel 
routine that responds to the interrupt. Device drivers supply ISRs to service device interrupts, and the 
kernel provides interrupt-handling routines for other types of interrupts.
-
rupts, the types of interrupts the kernel supports, how device drivers interact with the kernel (as a part 
of interrupt processing), and the software interrupts the kernel recognizes (plus the kernel objects that 
are used to implement them).
Hardware interrupt processing
On the hardware platforms supported by Windows, external I/O interrupts come into one of the inputs 
on an interrupt controller, for example an I/O Advanced Programmable Interrupt Controller (IOAPIC). 
Controllers (LAPIC), which ultimately interrupt the processor on a single input line. 
Once the processor is interrupted, it queries the controller to get the global system interrupt vector 
(GSIV), which is sometimes represented as an interrupt request (IRQ) number. The interrupt controller 
translates the GSIV to a processor interrupt vector, which is then used as an index into a data structure 
called the interrupt dispatch table
the matching IDT entry for the interrupt vector.
Based on the information in the IDT entry, the processor can transfer control to an appropriate inter-
rupt dispatch routine running in Ring 0 (following the process described at the start of this section), or 
it can even load a new TSS and update the Task Register (TR), using a process called an interrupt gate.
CHAPTER 8 System mechanisms
33
kernel and HAL routines for each exception and internally handled interrupt, as well as with pointers to 
thunk
interrupt vectors 0–31 are marked as reserved for processor traps, which are described in Table 8-3.
TABLE 8-3 Processor traps
Vector (Mnemonic)
Meaning
0 (#DE)
Divide error
1 (#DB)
Debug trap
2 (NMI)
Nonmaskable interrupt
3 (#BP)
Breakpoint trap
4 (#OF)
5 (#BR)
Bound fault
6 (#UD)
7 (#NM)
8 (#DF)
Double fault
9 (#MF)
Coprocessor fault (no longer used)
10 (#TS)
TSS fault
11 (#NP)
Segment fault
12 (#SS)
Stack fault
13 (#GP)
General protection fault
14 (#PF)
Page fault