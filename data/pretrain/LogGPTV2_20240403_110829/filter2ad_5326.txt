title:Towards Automated Forensic Event Reconstruction of Malicious Code
(Poster Abstract)
author:Ahmed F. Shosha and
Joshua James and
Chen-Ching Liu and
Pavel Gladyshev
Towards Automated Forensic Event Reconstruction   
of Malicious Code (Poster Abstract) 
Ahmed F. Shosha, Joshua I. James, Chen-Ching Liu, and Pavel Gladyshev 
University College Dublin, Ireland 
PI:EMAIL, 
{Joshua.James,Liu,Pavel.Gladyshev}@ucd.ie 
Abstract.  A  call  for  formalizing  digital  forensic  investigations  has  been   
proposed by academics and practitioners alike [1, 2]. Many currently proposed 
methods of malware analysis for forensic investigation purposes, however, are 
derived based on the investigators’ practical experience. This paper presents a 
formal  approach  for  reconstructing  the  activities  of  a  malicious  executable 
found  in  a  victim’s  system  during  a  post-mortem  analysis.  The  behavior  of  a 
suspect  executable  is  modeled  as  a  finite  state  automaton  where  each  state 
represents  behavior  that  results  in  an  observable  modification  to  the  victim’s 
system. The derived model of the malicious code allows for accurate reasoning 
and deduction of the occurrence of malicious activities even when anti-forensic 
methods are employed to disrupt the investigation process. 
Keywords: Formal Models, Event Reconstruction, Model Checking and Auto-
mated Static Malware Analysis. 
Introduction: This work introduces a formal model for automated malware investiga-
tion based on the modeling of malicious executables. In the proposed approach, mali-
cious code is analyzed using automated static analysis methods [3-5]. The malicious 
code’s control flow graph is then formally modeled as a finite state automaton (FSA). 
The formalized model of the malicious code behavior is processed by an extension of 
the event reconstruction algorithms proposed in [2, 6], which computes the set of all 
possible explanations for the state of the victim’s system in the context of the mali-
cious code where the observed state of the victim’s system and malware trace creation 
states intersect. The result is a reduced state-space where malicious actions agree with 
the observed state of the system. Furthermore, the modeled FSA allows for the infe-
rence of the occurrence of actions that do not leave an observable trace. 
as a sequence of instructions(cid:1731)(cid:1835)(cid:2869),(cid:1835)(cid:2870)….(cid:1835)(cid:3041)(cid:1732). The behavior of IE is represented in a finite 
state automata M = (Q, ∑, δ, q), where Q is a finite set of all possible instructions in 
possible  combination  of  event  and  instruction  state  Iq,  such  that,  δ: ∑ (cid:3400)  Q→Q.  A 
transition is the process of instruction execution. An execution path p=(cid:3435)(cid:1871)(cid:2868),(cid:1871)(cid:2869)…(cid:1871)(cid:3044)(cid:3439)  is 
Modeling Investigated Malicious Code: Malicious executable IE is formally defined 
IE and δ represents transition function that determines the next instruction Im for every 
a run of finite computations consisting of a sequence of instructions that lead executa-
ble IE to the final state q.   
D. Balzarotti, S. Stolfo, and M. Cova (Eds.): RAID 2012, LNCS 7462, pp. 388–389, 2012. 
© Springer-Verlag Berlin Heidelberg 2012 
Towards Automated Forensic Event Reconstruction of Malicious Code 
389 
tion paths in the malicious executable IE. 
(cid:1482)(cid:3010)(cid:1488)(cid:3018)
Malicious  Events  Reconstruction: is the process of determining all possible execu-
tion paths that are consistent  with observable evidence. In this approach,  we extend 
and  improve  a  formal  model  for  automated  reasoning  of  evidential  statements  and 
reconstruction of digital events proposed in [2]. The extended formal model is based 
on  back-tracing  execution  paths  that  hold  the  observation  Ox.  The  proposed  back-
tracing  technique  over  all  possible  execution  paths  is  based  on  the  finite   
computation   (cid:1855)(cid:3037)(cid:3404)(cid:1731)(cid:1855)(cid:3037)(cid:3097),(cid:1835)(cid:3037)(cid:3044)(cid:1732),  where, (cid:1855)(cid:3037)(cid:3097)(cid:1488)(cid:2001)  is  an  event  and (cid:1835)(cid:3037)(cid:3044)(cid:1488)  Q  is  a  state.  Any 
two instructions (cid:1835)(cid:3038)and (cid:1835)(cid:3038)(cid:2879)(cid:2869)are related via the transition function for a given instruc-
tion (cid:1835)(cid:3037)(cid:3044)(cid:3404)(cid:2012) (cid:3435)(cid:1855)(cid:3038)(cid:2879)(cid:2869)(cid:3097) ,(cid:1835)(cid:3038)(cid:2879)(cid:2869)(cid:3044) (cid:3439). The notation of back-tracing an execution path is formalized 
in Equation 1, where (cid:2032)(cid:2879)(cid:2869)  traces back all finite computations representing the execu-
  (cid:4666)1(cid:4667)   (cid:1841)(cid:3404) (cid:4666)(cid:1842),(cid:1865)(cid:1861)(cid:1866),(cid:1867)(cid:1868)(cid:1872),(cid:1868)(cid:1870)(cid:3030)(cid:4667)   (cid:4666)2(cid:4667)  (cid:1827)(cid:1833) (cid:1827)(cid:1832) (cid:2020) (cid:1436) (cid:2032)(cid:2879)(cid:2869) (cid:4666)(cid:1868)(cid:4667)  (cid:4666)3(cid:4667) 
(cid:2032)(cid:2879)(cid:2869)(cid:4666)(cid:1843)(cid:4667)(cid:3404)(cid:4651)(cid:2032)(cid:2879)(cid:2869)(cid:4666)(cid:1835)(cid:4667)
specifying the duration of the observation and (cid:1868)(cid:1870)(cid:3030)  is the set of characteristics of the 
Formalizing Malicious  Code Observations: Evidence is described as an observable 
property, O, of a victim’s system that denotes the execution of a malicious payload. 
The formalization of an observation is defined in Equation 2, where P is a set of all 
instructions in IE that have the observed property pr. min and opt are positive integers 
observed  property  pr.  An  execution  path  p  is  said  to  contribute  to  O  if  a  set  of  se-
quence of instructions in p possesses the observed property pr.   
Observation Consistency Checking: Anti-forensic techniques are formally encoded in a 
CTL specification model [7] μ. Using the proposed model checking algorithm, the model 
of a suspect executable IE is checked against the encoded techniques μ in the context of 
malicious code execution to identify tampered observations. The model checking algo-
rithm takes a formula μ and executable model IE and verifies all states s (cid:1488)(cid:1835)(cid:1831)  where μ 
holds. The notation of the model checking algorithm is formalized in Equation 3, where 
A is a quantifier over all paths p that contribute to the observation o, and G/F are a path 
specific quantifiers that check if μ holds over all states s and possess o. 
References 
1.  Stephenson, P.: Using a Formalized Approach to Digital Investigation. In: Computer Fraud 
& Security (2003) 
2.  Gladyshev, P., Patel, A.: Finite state machine approach to digital event reconstruction. Digi-
tal Investigation (2004) 
3.  Christodorescu, M., Jha, S.: Static analysis of executables to detect malicious patterns. In: 
USENIX Security Symposium (2003) 
4.  Christodorescu, M., Jha, S., Kruegel, C.: Mining specifications of  malicious behavior. In: 
ESEC-FSE (2007) 
5.  Kinder, J., Katzenbeisser, S., Schallhart, C., Veith, H.: Detecting Malicious Code by Model 
Checking. In: Julisch, K., Kruegel, C. (eds.) DIMVA 2005. LNCS, vol. 3548, pp. 174–187. 
Springer, Heidelberg (2005) 
6.  James, J., et al.: Analysis of Evidence Using Formal Event Reconstruction. Digital Foren-
sics and Cyber Crime (2010) 
7.  Emerson, E.A.: Temporal and modal logic. In: van Jan, L. (ed.) Handbook of Theoretical 
Computer Science, vol. B (1990)