## 前言
再次向大家问好！今天我将介绍一些关于Windows模拟的新技术。这一次，我们将使用`Impersonation Token`作为获取SYSTEM的方法。
## Impersonation Token VS Primary Token
在我之前的博文中，我使用`Primary Tokens`作为访问`NT AUTHORITY\SYSTEM
shell`的方法。但你知道它们之间的区别吗？如果你知道，那么你就无需看接下来的文章了。
所有进程都具有`Primary Token`和`Impersonation Token`。主要区别在于每次创建新线程时，它都从其父级继承`Primary
Token`和`Impersonation Token`。但是，`Primary
Token`不可能被"交换"。您可以复制它，但不能在同一进程中"交换"`Primary
Token`。始终需要使用重复的`Token`创建新流程。但是`Impersonation Token`不会发生这种情况！
使用`Impersonation Token`，您可以创建一个新线程，获取远程进程访问`Token`的句柄，获取它的`Impersonation
Token`，然后将其与您当前的线程（即当前进程中）交换`Impersonation Token`！这会将您的进程"转变"为SYSTEM进程。
## PowerShell Time
在上一个教程中，我使用了`C++`并开发了一个可执行文件，用`CreateProcessTokenW`生成一个SYSTEM进程。在这一篇中，我将编写一个PowerShell脚本。这是因为它允许我们获取一个`Impersonation
Token`并替换它。
## 现成PowerShell脚本
有一个很好的脚本已经被Harmj0y写出了。但直接使用是不太合理的，因为知道如何绕过并可以创造属于自己的脚本对于一个测试者是必备的技能。
此外，在我的脚本中，我将提供上述脚本中不存在的几个函数，例如检测Windows权限。
我和其在这方面的最大区别是我不会直接使用PowerShell导入Windows
API函数，就像`Harmj0y`在他的脚本中所做的那样。相反，我会编写一个`C#
DLL`来完成所有工作，然后将其映射在内存中，我更喜欢这种方法，因为它更加具有隐蔽性。
## 开始
首先，我们将过分依赖`Windows API`函数。完整列表如下：
  * LookupPrivilege
  * AdjustTokenPrivilege
  * PrivilegeCheck
  * OpenProcess
  * OpenProcessToken
  * DuplicateToken
  * SetThreadToken
但是，当我们使用PowerShell和C#调用Windows API时，我们还需要导入结构，而不仅仅是函数。
  * LUID_AND_ATTRIBUTES
  * PRIVILEGE_SET
  * LUID
  * TOKEN_PRIVILEGES
首先，我们需要导入这些函数，以便在PowerShell会话中使用。我们可以使用名为`pinvoke`( 
)的网站轻松导入它们。这可能是最麻烦的部分。  
下面是我的`DLL C#`代码
    using System;
    using System.Diagnostics;
    using System.Runtime.InteropServices;
    namespace zc00l
    {
        public class ImpersonationToken
        {
            // Constants that are going to be used during our procedure.
            private const int ANYSIZE_ARRAY = 1;
            public static uint SE_PRIVILEGE_ENABLED = 0x00000002;
            public static uint STANDARD_RIGHTS_REQUIRED = 0x000F0000;
            public static uint STANDARD_RIGHTS_READ = 0x00020000;
            public static uint TOKEN_ASSIGN_PRIMARY = 0x00000001;
            public static uint TOKEN_DUPLICATE = 0x00000002;
            public static uint TOKEN_IMPERSONATE = 0x00000004;
            public static uint TOKEN_QUERY = 0x00000008;
            public static uint TOKEN_QUERY_SOURCE = 0x00000010;
            public static uint TOKEN_ADJUST_PRIVILEGES = 0x00000020;
            public static uint TOKEN_ADJUST_GROUPS = 0x00000040;
            public static uint TOKEN_ADJUST_DEFAULT = 0x00000080;
            public static uint TOKEN_ADJUST_SESSIONID = 0x00000100;
            public static uint TOKEN_READ = STANDARD_RIGHTS_READ | TOKEN_QUERY;
            public static uint TOKEN_ALL_ACCESS = STANDARD_RIGHTS_REQUIRED | TOKEN_ASSIGN_PRIMARY | TOKEN_DUPLICATE | TOKEN_IMPERSONATE | TOKEN_QUERY | TOKEN_QUERY_SOURCE | TOKEN_ADJUST_PRIVILEGES | TOKEN_ADJUST_GROUPS | TOKEN_ADJUST_DEFAULT | TOKEN_ADJUST_SESSIONID;
            [StructLayout(LayoutKind.Sequential)]
            public struct LUID_AND_ATTRIBUTES
            {
                public LUID Luid;
                public UInt32 Attributes;
                public const UInt32 SE_PRIVILEGE_ENABLED_BY_DEFAULT = 0x00000001;
                public const UInt32 SE_PRIVILEGE_ENABLED = 0x00000002;
                public const UInt32 SE_PRIVILEGE_REMOVED = 0x00000004;
                public const UInt32 SE_PRIVILEGE_USED_FOR_ACCESS = 0x80000000;
            }
            // Luid Structure Definition
            [StructLayout(LayoutKind.Sequential)]
            public struct LUID
            {
                public UInt32 LowPart;
                public Int32 HighPart;
            }
            public struct TOKEN_PRIVILEGES
            {
                public int PrivilegeCount;
                [MarshalAs(UnmanagedType.ByValArray, SizeConst = ANYSIZE_ARRAY)]
                public LUID_AND_ATTRIBUTES[] Privileges;
            }
            [StructLayout(LayoutKind.Sequential)]
            public struct PRIVILEGE_SET
            {
                public uint PrivilegeCount;
                public uint Control;  // use PRIVILEGE_SET_ALL_NECESSARY