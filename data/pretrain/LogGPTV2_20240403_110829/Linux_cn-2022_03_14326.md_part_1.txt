---
author: Lukáš Zapletal
category: 技术
comments_data:
- date: '2022-03-04 22:59:19'
  message: "国外也喜欢写这种过时的水文呀，都 2022 年了 (只针对作者，不针对译者)。\r\n\r\n+ CtrlP 性能差的要死
    (虽然后面也支持了异步模式)，建议用 leaderf、fzf.vim、denite 替代。\r\n+ Airline 中规中距，要是追求速度可用
    lightline。\r\n+ Ale 倒没啥问题，作为一款 lint 插件很是优秀，不过更推荐使用 LSP 提供的语法检查。"
  postip: 117.175.120.25
  username: 来自四川的 Chrome 86.0|Windows 10 用户
- date: '2022-03-04 22:59:38'
  message: "+ CtrlP 性能差的要死 (虽然后面也支持了异步模式)，建议用 leaderf、fzf.vim、denite 替代。\r\n+
    Airline 中规中距，要是追求速度可用 lightline。\r\n+ Ale 倒没啥问题，作为一款 lint 插件很是优秀，不过更推荐使用
    LSP 提供的语法检查。"
  postip: 117.175.120.25
  username: 来自四川的 Chrome 86.0|Windows 10 用户
- date: '2022-03-05 10:01:03'
  message: matchit其实问题也不少
  postip: 111.48.76.246
  username: 来自111.48.76.246的 Chrome 99.0|Windows 10 用户
- date: '2022-03-21 09:32:52'
  message: "`引导键` 是什么鬼？\r\n应该是 `mapleader` 吧"
  postip: 61.164.47.199
  username: 来自浙江杭州的 Firefox 98.0|Mac 10.15 用户
count:
  commentnum: 4
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 9166
date: '2022-03-04 16:16:09'
editorchoice: true
excerpt: 这就是我如何从 35 个 Vim 插件降到只有 6 个的原因。
fromurl: https://opensource.com/article/21/12/vanilla-vim-config
id: 14326
islctt: true
largepic: /data/attachment/album/202203/04/161603q6mmr6q7kkkd2yky.jpg
permalink: /article-14326-1.html
pic: /data/attachment/album/202203/04/161603q6mmr6q7kkkd2yky.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 这就是我如何从 35 个 Vim 插件降到只有 6 个的原因。
tags:
- Vim
thumb: false
title: 简简单单的 Vim 就很好
titlepic: true
translator: wxy
updated: '2022-03-04 16:16:09'
---
> 
> 这就是我如何从 35 个 Vim 插件降到只有 6 个的原因。
> 
> 
> 
![](/data/attachment/album/202203/04/161603q6mmr6q7kkkd2yky.jpg "Person drinking a hot drink at the computer")
当你用 `—clean` 选项启动 Vim 时，它以 “素” 模式展示 Vim。没有插件、没有配置，一切回到了最初。多年来，我收集了一堆配置语句，其中一些可以追溯到 MS-DOS 或 Windows 3.1 时期。我是这样打算的：从头开始，只用 Fedora 35 中可用的插件，找到一个好的配置起点。我可以在一周的编码生活中生存下来吗？我会找到答案的！
规则是这样的：尽可能少的配置语句，并且只使用 Fedora 35+ 中的插件。顺便说一下，如果你不是 Fedora 用户，也请继续阅读。你可以随时从你的操作系统软件包管理器手动安装或者使用 Vim 插件管理器安装这些插件。
在我开始之前，有一个大问题需要解决：用 Vim 还是 Neovim（Vim 的一个复刻）。好吧，这由你决定。这篇文章中的所有内容应该对两者都适用。然而，我只用 Vim 测试过。当你登录到一个只有 `vi` 可用的服务器时，所有的这些技能都会派上用场。它可以是一个旧的 UNIX 系统、一个安装了最少的软件以提高安全性的 Linux 服务器、一个容器中的交互式 shell，或者一个空间宝贵的嵌入式系统。
闲话少说，下面是我提炼出来的使用 Vim 进行编码的绝对最低限度的东西：
```
# dnf install --allowerasing vim-default-editor \
        vim-enhanced \
        vim-ctrlp \
        vim-airline \
        vim-trailing-whitespace \
        vim-fugitive \
        vim-ale \
        ctags
```
不要担心 `—allowerasing` 选项。在确认之前，只需查看一下安装的东西。这个选项的作用是告诉软件包管理器把现有的 `nano-default-editor` 包替换为 `vim-default-editor`。这是一个小软件包，它在 shell 配置文件中将 `EDITOR` 环境变量设置为 `vim`，如果你想默认使用 Vim（例如，与 `git` 一起使用），这是必须的。这是专门针对 Fedora 的。你不需要在其他发行版或操作系统上这样做，只要确保你的 `EDITOR` shell 变量被正确设置就行。
### 概览
简单介绍一下我认为好的、干净的插件集：
* **CtrlP**：尽可能小的模糊查找插件（纯 vimscript）
* **Fugitive**：一个 git 的必备工具
* **Trailing-whitespace**：显示并修复（删除）尾部的空格
* **Airline**：一个改进的状态行（纯 vimscript）
* **Ale**：在你打字时高亮显示错别字或语法错误
* **Ctags**：不是 Vim 插件，但却是一个非常需要的工具
还有其他的模糊查找插件，如 command-t 或我最喜欢的 `fzf.vim`（非常快）。问题是，`fzf.vim` 不在 Fedora 中，而我想要尽可能少的配置。CtrlP 就可以了，而且配置它更容易，因为它不需要什么依赖。
如果让我选择一个绝对最小的配置，那就是：
```
# cat ~/.vimrc
let mapleader=","
let maplocalleader="_"
filetype plugin indent on
let g:ctrlp_map = ''
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
set exrc
set secure
```
但这可能太极端了，所以这里是一个稍大的配置，下面是我的详细解释：
```
" vim: nowrap sw=2 sts=2 ts=2 et:
" leaders
let mapleader=","
let maplocalleader="_"
" filetype and intent
filetype plugin indent on
" incompatible plugins
if has('syntax') && has('eval')
  packadd! matchit
end
" be SSD friendly (can be dangerous!)
"set directory=/tmp
" move backups away from projects
set backupdir=~/.vimbackup
" fuzzy searching
let g:ctrlp_map = ''
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
nnoremap b :CtrlPBuffer
nnoremap t :CtrlPTag
nnoremap f :CtrlPBufTag
nnoremap q :CtrlPQuickfix
nnoremap m :CtrlPMRU
" buffers and quickfix
function! ToggleQuickFix()
  if empty(filter(getwininfo(), 'v:val.quickfix'))
    copen
  else
    cclose
  endif
endfunction
nnoremap w :call ToggleQuickFix()
nnoremap d :bd
" searching ang grepping
nnoremap g :copen:Ggrep!
nnoremap K :Ggrep "\b\b":cw
nnoremap s :set hlsearch! hlsearch?
" ctags generation
nnoremap c :!ctags -R .
" per-project configs
set exrc
set secure
```
### 使用逗号作为引导键
我喜欢把我的 `引导键` 映射成逗号 `,`，而不是默认的反斜杠 `\`。当你的手处于书写位置时，它是 Vim 中最接近的自由键。另外，这个键在大多数键盘布局中都是一样的，而 `\` 在每个型号或布局都不一样。我很少使用 `本地引导键`，但下划线 `_` 看起来很合适。
延伸阅读：
* 参见 [Vim 参考手册](https://vimhelp.org/map.txt.html#map-which-keys) 中的 `:help map-which-keys`。
* 参见 [Vim Tips Wiki](https://vim.fandom.com/wiki/Unused_keys) 中的 Vim 中未使用的键。
### 文件类型和关闭语法高亮
接下来是非常重要的 `filetype` 命令。看，Vim 自带“内置电池”，8.2 版本包含 644 种语言的语法高亮，251 个文件类型定义（`ftplugins`），以及 138 种语言的缩进规则。然而，缩进在默认情况下是不启用的，也许是为了给所有人提供一个一致的编辑体验。我喜欢启用它。
一个简单的技巧：如果你正在编辑一个非常大的文件，并且 Vim 感觉很慢，你可能想禁用语法高亮来加快速度。只要输入 `:syn off` 命令即可。
延伸阅读：
* 参见 [Vim 参考手册](https://vimhelp.org/filetype.txt.html) 中的 `:help filetype`。
* 参见 [Vim 参考手册](https://vimhelp.org/syntax.txt.html) 中的 `:help syntax`。
* 参见 [Vim 参考手册](https://vimhelp.org/indent.txt.html) 中的 `:help indent`。
### Matchit 插件
Vim 甚至额外带有使得一些功能不兼容的插件，其中一个相当有用。它就是 `matchit` 插件，它使按下 `%` 键可以在某些语言中查找匹配的括号。通常情况下，你可以找到一个块的开始或结束（开始和结束括号）或 HTML 匹配标签及类似的。
延伸阅读：
* 参见 [Vim 参考手册](https://vimhelp.org/usr_05.txt.html#matchit-install) 中的 `:help matchit`。
### 交换文件
我想从我的旧配置中保留的许多设置之一是使用 `/tmp` 进行交换，并在我的家目录的一个单独目录中创建备份，你需要用 `mkdir ~/.vimbackup` 来创建这个目录。重要的是要明白，当你开始编辑时，Vim 会创建一个名为 “交换文件” 的副本，所有未保存的工作都会保存在这个文件中。所以即使停电了，你的交换文件也包含了大部分未保存的工作。我更喜欢使用 `tmpfs`，因为我所有的笔记本电脑和服务器都有 UPS 保护，而且我经常保存。另外，大多数情况下，你会使用到交换文件是当你的 SSH 连接丢失而不是由于停电时。对于大文件来说，交换文件可能相当大，我很珍视我的固态硬盘，所以我决定这样做。如果你不确定，可以删除这句话，使用 `/var/tmp`，这样更安全。
延伸阅读；