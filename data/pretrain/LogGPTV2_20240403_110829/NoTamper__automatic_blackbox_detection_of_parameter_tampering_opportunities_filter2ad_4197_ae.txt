printers, network switches. The form in question shows the con-
tents of the shopping cart and allows a user to modify the quantities
of the selected products. The quantity ﬁelds employ JavaScript
to restrict shoppers to enter only positive numeric values.
When NOTAMPER analyzed this form, it generated a hostile in-
When NOTAMPER analyzed this form, it supplied a negative
number for one of the quantity ﬁelds (and submitted through a
proxy). The resulting HTML page, while containing a different to-
tal and quantity than the benign input, was otherwise identical, and
thus NOTAMPER ranked it as a parameter tampering opportunity.
We were able to further develop this into another serious exploit:
we were able to add an item with negative quantities by disabling
JavaScript in the browser. When JavaScript was re-enabled, the
application computed the total purchase price by multiplying the
quantity of each product by its price. Thus, the negative quantities
enabled unlimited rebates for any purchase. Furthermore, these
negative quantities were successfully accepted by the server, thus
permitting the user to purchase at the reduced price.
The potential of exploiting this vulnerability could have been sig-
niﬁcant as the website contains a very large inventory of computer
equipment. The site administrators conﬁrmed the vulnerability and
ﬁxed it within 24 hours.
Privilege escalation. The OpenIT application stores user pro-
ﬁles and employs a web form to allow users to edit their proﬁles.
After logging in, the application provides the user with a web form
for editing her proﬁle.
Included in that form is the hidden ﬁeld
userid, where the application stores the user’s unique identiﬁer.
When the form is submitted, the server updates the proﬁle for the
user identiﬁer corresponding to userid. By changing userid to
that of another user, it is possible to update any user’s proﬁle.
put where the value for userid was the number 2 (as opposed to
the initial value 1). The server’s response was virtually identical to
the benign input response (where the value was set to 1), and was
therefore reported as a tampering opportunity.
After conﬁrming this vulnerability, we enhanced the exploit so as
to modify the proﬁle of an admin user to include a Cross-site Script-
ing (XSS) payload. Every time the admin user logged in, the script
would execute and send the admin cookie to a server under our
control. With the help of the stolen cookie we then re-constructed
and hi-jacked the admin session, thus gaining all the privileges of
the admin. This experiment demonstrates that parameter tamper-
ing vulnerabilities could be used as a launch pad for other privilege
escalation attacks.
Summary of other exploits.
The supplemental website [1]
provides details of the above exploits and the others found by NO-
TAMPER. In the phpNuke application, tampering of a hidden name
ﬁeld allowed us to bypass a CAPTCHA challenge and a conﬁrma-
tion page during the registration process (work-ﬂow attack). In the
OpenDB application, an XSS script was injected through a tampered
country ﬁeld. In the SMF application, tampering of vote option
radio button violated integrity of the voting results.
5.3 Other Experimental Details
False positives.
All FPs were either (a) pertaining to the
maxlength constraints on form inputs that couldn’t be exploited
to any serious vulnerability or (b) rewritten by the server without
any observable difference in HTML output (12 for the Ezybiz ap-
plication).
Categorizing potential vulnerabilities. Table 6 provides more
details of our experiments, categorized by application. Column
2 shows the average formula complexity for the client-side con-
straints, i.e., the average number of boolean connectives and atomic
constraints. Column 3 shows the total number of tampering oppor-
tunities. Column 4 shows the number of potential vulnerabilities
derived from HTML input controls other than hidden ﬁelds; Col-
umn 5 shows the number of potential vulnerabilities due to Java-
Script; and Column 6 shows the number derived from hidden ﬁelds.
Hostile input ranking. For each form input NOTAMPER issued
an HTTP request to the appropriate application and computed the
difference rank (edit distance in bytes) of the response as described
previously. A sorted list of the difference rank is produced for each
application. In our experience, it is easy to identify the threshold
limits for a potential parameter tampering opportunity, as the differ-
ence rank between inputs potentially accepted by the server tend to
be at least an order of magnitude smaller than the ones potentially
rejected by the server.
15-101234567891011121314Inputs sorted by Log(diﬀerence rank)Log(Diﬀerence Rank)SMFEzybizOpenDBB2evolutionphpNukeOpenITLegalCaseMyBloggie616We use the graph in the Figure 4 to illustrate the thresholds. For
space reasons, we only chose one form from each application to
be represented in this graph, although our approach tested several
forms in every application. Since we are only interested in show-
ing a threshold, the graph plots the logarithm of the difference rank
in the Y-axis, with the X-axis representing the various input points
sorted according to their difference ranks. We identify the thresh-
olds for various forms using a bold triangle, and we classify those
inputs below the threshold as parameter tampering opportunities.
It is clear from the graph that such thresholds exist as denoted by
steep rises in the difference ranks.
Manual intervention. For each web form, we manually pro-
vided certain kinds of hints to NOTAMPER pertaining to informa-
tion not present on the client but that a human tester might provide.
For example, in the SMF application, the server required a valid
login name to access the form, and so we provided such a name
to NOTAMPER. Throughout all the forms, we added one of three
hints: credentials or session cookies, inputs required by the server
(required variables list), and variables required to be unique across
invocations (unique variables list). (See Section 3 for more details.)
To discover such restrictions, we used NOTAMPER to generate
an input satisfying the client-side constraints (fclient). If this input
was rejected, we examined why and provided hints that ensured
NOTAMPER could generate a benign input accepted by the server.
A total of 3 unique-variable hints were added in our experiments
(SMF: 2, phpNuke: 1). For every application except phpNuke, we
supplied a cookie with a valid session id. Further, a total of 12 re-
quired variable hints were supplied in all forms (SMF: 5 in 3 forms,
phpNuke: 4, B2evolution: 1, garena.com: 2). This manual
intervention is bounded by the number of input ﬁelds on a form
and typically required less than 5 minutes per form. We expect
this process to be simpler for a real tester who is familiar with the
application being tested.
Performance. The most computationally expensive component
of NOTAMPER was the Input Generator. The HTML / JavaScript
Analyzer ran in under a second for the most elaborate form in our
test suite. The Opportunity Detector ran in sub-second time for
each application, ignoring the delays between consecutive HTTP
requests built-in to avoid overloading the server. The most expen-
sive step of Input Generation was constraint solving; the remainder
of the Input Generation component ran in under a second. Over
the 22 forms, the constraint solver solved 315 formulas in a total
of 219 seconds, giving an average time of 0.7 seconds per input.
Such performance is acceptable for an off-line analysis tool such
as NOTAMPER.
6. RELATED WORK
Symbolic evaluation. A number of research approaches have
used symbolic execution to address a wide range of security prob-
lems, e.g., automated ﬁngerprint generation [7] and protocol re-
play [15]. Our own recent work [6] also applied this technique
to eliminate SQL injection attacks in legacy web applications by
retroﬁtting PREPARE statements through automated code transfor-
mation.
Research on input validation methods. The lack of sufﬁcient
input validation is a major source of security vulnerabilities in web
applications. As a result, there is a fairly well developed body of
literature in server side techniques that attempt to curb the impact
of untrusted data. Attacks such as SQL injection [14, 12, 21, 4]
and Cross-site Scripting [20, 23, 22] are well studied examples in
which untrusted data can result in unauthorized actions in a web
application.
Vulnerability analysis. There has been intense interest in ana-
lyzing JavaScript code for the purpose of detecting security ﬂaws.
Kudzu [18] reduces JavaScript to string constraints for the pur-
pose of detecting client-side attacks, whereas our focus is utilizing
JavaScript analysis to discover server-side ﬂaws. Our problem set-
ting has enabled us to specialize our concrete / symbolic evaluation
and constraint solving with many aspects of form processing, e.g.,
processing client-side formulas to generate logical queries that are
likely to succeed as tampering vulnerabilities and the development
of many practical heuristics. There are also approaches that per-
form white-box analysis of server side code for identifying such
vulnerabilities [2, 3]. However, there is little work on systematic
analysis of the kind of parameter tampering problems that were ad-
dressed in this paper.
Fuzzing/Directed testing. Fuzz and directed testing approaches
[9, 10, 19] aim to apply random/guided mutations to well-formed
inputs to discover vulnerabilities in a blackbox [19] or a white-
box [10] fashion.
In that sense, NOTAMPER is similar to these
approaches as it generates hostile inputs to discover vulnerabilities.
However, our formulation of the parameter tampering problem as
one checking the consistency of the server and the client code bases
and development of methods specialized to this problem makes it
different from these approaches.
Prevention architectures. New browser architectures [11, 17,
25] propose to sandbox the client side code of applications to pre-
vent undesired interactions. Recent works have also aimed at en-
suring that the server side of a web application remains protected
from malicious clients. Ripley [24] aims to detect malicious ac-
tivities at the client by replicating the client execution in a trusted
environment. SWIFT [8] uses information ﬂow analysis during the
development of new applications to ensure that constraints regard-
ing information ﬂow conﬁdentiality and integrity will be met in
client side code. NOTAMPER’s goals are very different from these
approaches as we focus on discovering vulnerabilities in existing
(legacy) applications.
7. CONCLUSION
In this paper, we described NOTAMPER, a novel approach for
detecting server-side HTTP parameter tampering vulnerabilities in
web applications. We formulated our problem in terms of the con-
straints implied on user data by client-side code, advocated pro-
gram analysis as a way of extracting those constraints, and em-
ployed constraint solving to generate tampering opportunities. Our
work exposed several serious exploits in existing open source web
applications and web sites, and we expect the number of discov-
ered vulnerabilities to grow as we analyze more applications. Our
results highlight a signiﬁcant gap between the server-side parame-
ter validation that should occur and the server-side validation that
does occur in today’s web applications.
NOTAMPER currently employs black-box server-side analysis,
but in the future we expect to add white-box analysis. White-box
analysis will reduce false positive/negative rates and the manual
labor required to run the tool and analyze its results; however, the
white-box capability will be an optional feature, allowing NOTAM-
PER to continue being applicable to web forms for which white-box
analysis is infeasible.
Acknowledgements
This work was partially supported by National Science Foundation
grants CNS-0716584,
and
CNS-0917229. Thanks are due to Mike Ter Louw and Kalpana
CNS-0551660,
CNS-0845894
617Gondi for their helpful comments. Finally, we thank the anony-
mous referees for their feedback.
8. REFERENCES
[1] NOTAMPER Supplementary Website.
http://sisl.rites.uic.edu/notamper.
[2] BALZAROTTI, D., COVA, M., FELMETSGER, V.,
JOVANOVIC, N., KIRDA, E., KRUEGEL, C., AND VIGNA,
G. Saner: Composing Static and Dynamic Analysis to
Validate Sanitization in Web Applications. In SP’08:
Proceedings of the 29th IEEE Symposium on Security and
Privacy (Oakland, California, USA, 2008).
[3] BALZAROTTI, D., COVA, M., FELMETSGER, V. V., AND
VIGNA, G. Multi-Module Vulnerability Analysis of
Web-based Applications. In CCS’07: 14th ACM Conference
on Computer and Communications Security (Alexandria,
Virginia, USA, 2007).
[4] BANDHAKAVI, S., BISHT, P., MADHUSUDAN, P., AND
VENKATAKRISHNAN, V. CANDID: Preventing SQL
Injection Attacks using Dynamic Candidate Evaluations. In
CCS’07: Proceedings of the 14th ACM Conference on
Computer and Communications security (Alexandria,
Virginia, USA, 2007).
[5] BILLE, P. A survey on tree edit distance and related
problems. Theoretical Computer Science 337, 1-3 (2005),
217–239.
[6] BISHT, P., SISTLA, A. P., AND VENKATAKRISHNAN, V.
Automatically Preparing Safe SQL Queries. In FC’10:
Proceedings of the 14th International Conference on
Financial Cryptography and Data Security (Tenerife, Canary
Islands, Spain, 2010).
[7] BRUMLEY, D., CABALLERO, J., LIANG, Z., NEWSOME,
J., AND SONG, D. Towards Automatic Discovery of
Deviations in Binary Implementations with Applications to
Error Detection and Fingerprint Generation. In SS’07:
Proceedings of 16th USENIX Security Symposium (Berkeley,
California, USA, 2007).
[8] CHONG, S., LIU, J., MYERS, A. C., QI, X., VIKRAM, K.,
ZHENG, L., AND ZHENG, X. Secure Web Application via
Automatic Partitioning. SIGOPS Oper. Syst. Rev. 41, 6
(2007), 31–44.
[9] GODEFROID, P., KLARLUND, N., AND SEN, K. DART:
Directed Automated Random Testing. SIGPLAN Not. 40, 6
(2005), 213–223.
[10] GODEFROID, P., LEVIN, M. Y., AND MOLNAR, D. A.
Automated Whitebox Fuzz Testing. In NDSS’08:
Proceedings of the 16th Annual Network and Distributed
System Security Symposium (San Diego, California, USA,
2008).
[11] GRIER, C., TANG, S., AND KING, S. T. Secure Web
Browsing With the OP Web Browser. In SP’08: Proceedings
of the 29th IEEE Symposium on Security and Privacy
(Oakland, California, USA, 2008).
[12] HALFOND, W. G., VIEGAS, J., AND ORSO, A. A
Classiﬁcation of SQL-Injection Attacks and
Countermeasures. In ISSE’06: Proceedings of the
International Symposium on Secure Software Engineering
(Washington, DC, USA, 2006).
[13] KIEZUN, A., GANESH, V., GUO, P. J., HOOIMEIJER, P.,
AND ERNST, M. D. HAMPI: A Solver for String
Constraints. In ISSTA ’09: Proceedings of the 18th
international symposium on Software testing and analysis
(Chicago, Illinois, USA, 2009).
[14] LIVSHITS, V. B., AND LAM, M. S. Finding Security
Vulnerabilities in Java Applications with Static Analysis. In
SS’05: Proceedings of the 14th USENIX Security Symposium
(Baltimore, Maryland, USA, 2005).
[15] NEWSOME, J., BRUMLEY, D., FRANKLIN, J., AND SONG,
D. Replayer: Automatic Protocol Replay by Binary
Analysis. In CCS’06: Proceedings of the 13th ACM
conference on Computer and communications security
(Alexandria, Virginia, USA, 2006).
[16] RATCLIFF, J. W., AND METZENER, D. Pattern Matching:
The Gestalt Approach. Dr. Dobbs Journal (July 1988), 46.
[17] REIS, C., AND GRIBBLE, S. D. Isolating Web Programs in
Modern Browser Architectures. In EuroSys’09: Proceedings
of the 4th ACM European conference on Computer systems
(Nuremberg, Germany, 2009).
[18] SAXENA, P., AKHAWE, D., HANNA, S., MAO, F.,
MCCAMANT, S., AND SONG, D. A Symbolic Execution
Framework for JavaScript. In SP’10: Proceedings of the 31st
IEEE Symposium on Security and Privacy (Oakland,
California, USA, 2010).
[19] SAXENA, P., HANNA, S., POOSANKAM, P., AND SONG, D.
FLAX: Systematic Discovery of Client-side Validation
Vulnerabilities in Rich Web Applications. In NDSS’10:
Proceedings of the 17th Annual Network and Distributed
System Security Symposium (San Diego, California, USA,
2010).
[20] SAXENA, P., SONG, D., AND NADJI, Y. Document
Structure Integrity: A Robust Basis for Cross-site Scripting
Defense. In NDSS’09: Proceedings of 16th Annual Network
& Distributed System Security Symposium (San Diego,
California, USA, 2009).
[21] SU, Z., AND WASSERMANN, G. The Essence of Command
Injection Attacks in Web Applications. In POPL’06:
Proceedings of the 33rd symposium on Principles of
programming languages (Charleston, South Carolina, USA,
2006).
[22] TER LOUW, M., AND VENKATAKRISHNAN, V. BluePrint:
Robust Prevention of Cross-site Scripting Attacks for
Existing Browsers. In SP’09: Proceedings of the 30th IEEE
Symposium on Security and Privacy (Oakland, California,
USA, 2009).
[23] VAN GUNDY, M., AND CHEN, H. Noncespaces: Using
Randomization to Enforce Information Flow Tracking and
Thwart Cross-site Scripting Attacks. In NDSS’09:
Proceedings of the 16th Annual Network & Distributed
System Security Symposium (San Diego, California, USA,
2009).
[24] VIKRAM, K., PRATEEK, A., AND LIVSHITS, B. Ripley:
Automatically Securing Distributed Web Applications
Through Replicated Execution. In CCS’09: Proceedings of
the 16th Conference on Computer and Communications
Security (Chicago, Illinois, USA, 2009).
[25] WANG, H. J., GRIER, C., MOSHCHUK, A., KING, S. T.,
CHOUDHURY, P., AND VENTER, H. The Multi-Principal OS
Construction of the Gazelle Web Browser. In SS’09:
Proceedings of the 18th USENIX Security Symposium
(Montreal, Canada, 2009).
618