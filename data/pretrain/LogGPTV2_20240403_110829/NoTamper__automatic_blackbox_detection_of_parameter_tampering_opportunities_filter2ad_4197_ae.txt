# NOTAMPER: A Tool for Detecting HTTP Parameter Tampering Vulnerabilities

## 1. Introduction
NOTAMPER is a tool designed to detect server-side HTTP parameter tampering vulnerabilities in web applications. This paper describes the methodology, experimental results, and related work.

## 2. Methodology

### 2.1 Shopping Cart Form Analysis
The form in question displays the contents of a shopping cart and allows users to modify the quantities of selected products, such as printers and network switches. The quantity fields use JavaScript to ensure that only positive numeric values are entered.

#### 2.1.1 Vulnerability Discovery
When NOTAMPER analyzed this form, it supplied a negative number for one of the quantity fields (submitted through a proxy). The resulting HTML page, while showing a different total and quantity, was otherwise identical. Thus, NOTAMPER identified this as a parameter tampering opportunity.

#### 2.1.2 Exploitation
By disabling JavaScript in the browser, we were able to add items with negative quantities. When JavaScript was re-enabled, the application computed the total purchase price by multiplying the quantity of each product by its price. This allowed for unlimited rebates on any purchase. The server accepted these negative quantities, permitting the user to purchase at a reduced price.

### 2.2 Privilege Escalation
The OpenIT application stores user profiles and uses a web form to allow users to edit their profiles. After logging in, the application provides a web form for editing the user's profile, which includes a hidden `userid` field.

#### 2.2.1 Vulnerability Discovery
By changing the `userid` to another user's ID, it was possible to update any user's profile. For example, changing `userid` from 1 to 2 resulted in a server response virtually identical to the benign input, indicating a tampering opportunity.

#### 2.2.2 Exploitation
We confirmed this vulnerability and enhanced the exploit to modify an admin user's profile to include a Cross-site Scripting (XSS) payload. Every time the admin user logged in, the script executed and sent the admin cookie to a server under our control. Using the stolen cookie, we reconstructed and hijacked the admin session, gaining all admin privileges.

## 3. Summary of Other Exploits
- **phpNuke**: Tampering of a hidden name field allowed us to bypass a CAPTCHA challenge and a confirmation page during the registration process.
- **OpenDB**: An XSS script was injected through a tampered country field.
- **SMF**: Tampering of vote option radio buttons violated the integrity of the voting results.

## 4. Experimental Details

### 4.1 False Positives
All false positives were either:
- (a) related to `maxlength` constraints on form inputs that could not be exploited into serious vulnerabilities.
- (b) rewritten by the server without any observable difference in HTML output (12 for the Ezybiz application).

### 4.2 Categorizing Potential Vulnerabilities
Table 6 provides more details of our experiments, categorized by application:
- **Column 2**: Average formula complexity for client-side constraints.
- **Column 3**: Total number of tampering opportunities.
- **Column 4**: Number of potential vulnerabilities from HTML input controls other than hidden fields.
- **Column 5**: Number of potential vulnerabilities due to JavaScript.
- **Column 6**: Number of potential vulnerabilities from hidden fields.

### 4.3 Hostile Input Ranking
For each form input, NOTAMPER issued an HTTP request and computed the difference rank (edit distance in bytes) of the response. A sorted list of the difference rank is produced for each application. It is easy to identify the threshold limits for potential parameter tampering opportunities, as the difference rank between accepted and rejected inputs tends to differ by at least an order of magnitude.

### 4.4 Manual Intervention
For each web form, we manually provided hints to NOTAMPER, such as credentials, session cookies, required variables, and unique variables. This manual intervention typically required less than 5 minutes per form.

### 4.5 Performance
The most computationally expensive component of NOTAMPER was the Input Generator. The HTML/JavaScript Analyzer and Opportunity Detector ran in sub-second times. The constraint solver solved 315 formulas in a total of 219 seconds, averaging 0.7 seconds per input.

## 5. Related Work
- **Symbolic Evaluation**: Approaches like automated fingerprint generation and protocol replay have used symbolic execution.
- **Input Validation Methods**: There is a well-developed body of literature on server-side techniques to curb untrusted data, including SQL injection and XSS attacks.
- **Vulnerability Analysis**: Tools like Kudzu reduce JavaScript to string constraints to detect client-side attacks, while our focus is on discovering server-side flaws.
- **Fuzzing/Directed Testing**: These approaches apply random or guided mutations to discover vulnerabilities.
- **Prevention Architectures**: New browser architectures aim to sandbox client-side code to prevent undesired interactions.

## 6. Conclusion
NOTAMPER is a novel approach for detecting server-side HTTP parameter tampering vulnerabilities in web applications. Our work exposed several serious exploits in existing open-source web applications and websites. Future work will include adding white-box analysis to reduce false positives/negatives and manual labor.

## 7. Acknowledgements
This work was partially supported by National Science Foundation grants. Thanks to Mike Ter Louw, Kalpana Gondi, and the anonymous referees for their feedback.

## 8. References
[References listed here]

---

This revised version aims to provide a clear, coherent, and professional presentation of the content.