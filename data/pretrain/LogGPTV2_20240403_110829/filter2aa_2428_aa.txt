Applied Ca$h Eviction through ATM Exploitation
Trey Keown
Red Balloon Security
New York, USA
PI:EMAIL
Brenda So
Red Balloon Security
New York, USA
PI:EMAIL
Abstract—Automated Teller Machines (ATMs) are among the
oldest devices to be connected to a network. Despite this, the
high barrier to entry for legal reverse engineering efforts has
resulted in largescale ATM deployment without the testing that
would be expected of machines where the cost of compromise
can be measured in the number of bills dispensed. Our research
examines retail ATMs from a reverse engineer’s perspective and
details two network-accessible vulnerabilities we discovered as a
result – a buffer overﬂow in the Remote Management System
(RMS), and a remote command injection via the eXtensions for
Financial Services (XFS) interface. These vulnerabilities can lead
to arbitrary code execution and jackpotting, respectively.
I. INTRODUCTION
While the ATMs owned and operated by banks, ﬁnancial
ATMs, often have a more compelling case to be well-secured,
the retail ATMs found scattered across gas stations and con-
venience stores are often an offering more focused on getting
the price right. One such cost-effective ATM is the Nautilus
Hyosung HALO II [1].
Our initial interest in the ATM came by the virtue that,
as a computer which dispenses money, it is an attractive
platform to use as a base for an information security challenge
[2]. Initial work involved creating a payment processor for
handling ATM transactions – for this, we developed a server
supporting the Triton Standard [3]. Further work involved
reverse engineering the ATM itself. This was aided by the
availability of a ﬁrmware update, a JTAG port that was
accessible with hardware modiﬁcations, and a lack of signature
checking prior to applying full ﬁrmware updates.
II. INITIAL REVERSE ENGINEERING
Our target ATM is based on an architecture reused across
a number of the Nautilus Hyosung’s other price-conscious
ATMs – Windows CE 6.0 (ofﬁcially end-of-life as of April 10,
2018) running on an 800MHz ARM Cortex-A8. The platform
of libraries and applications running on top of this is referred
to as MoniPlus CE.
Figure 1: An example of how a transaction from an ATM is passed
along to card networks.
In order for the ATM to function normally, it requires a
connection to a payment processor. For retail ATMs, a pay-
ment processor is typically a third-party vendor that handles
upstream interactions with banks, as shown in Figure 1. This
communication can be achieved via either TCP or dial-up. A
number of protocols can be used over this link, but the one we
found most readily accessible was the Triton Standard. A draft
copy of this standard [3] is available online. While current
implementations do not exactly match this draft, it nonetheless
provided an initial guide to implementing a server capable of
handling transactions with an ATM.
While not functional out of the box, there was an un-
populated port on the main board which resembled what
would be expected of a JTAG connector. Physically nearby are
unpopulated pads with markings implying a resistor should be
present. After populating these with an arbitrary low resistor
value and performing pin mapping with a JTAGulator [4], we
obtained a fully functional debug interface.
Firmware for the ATM is publicly available online [5]. It
contains the bootloader binary, the kernel binary, and a zip ﬁle
containing all the application software and libraries.
III. REMOTE MANAGEMENT SYSTEM (RMS)
In the context of an ATM, a Remote Management Sys-
tem (RMS) is a network-based administration interface for
owners and administrators to manage a network of ATMs.
In the ATM examined in this paper, capabilities of the RMS
include (among many others) dumping an ATM’s version and
conﬁguration information, collecting transaction history, and
remotely updating an ATM’s ﬁrmware.
Normally, an ATM administrator needs to use a client called
MoniView [6] to send commands to the RMS server running
on the ATM. In order to authenticate these commands, the
ATM’s serial number and RMS password are passed along
in the RMS command packet. However, an unauthenticated
attacker can send a maliciously crafted packet to the remote
RMS endpoint over a network to cause a buffer overﬂow and
corrupt structures used in the cleanup of the RMS control
library, RMSCtrl.dll. This corruption can lead to arbitrary
code execution and persistence in the ATM, which is further
described in the following sections.
A. Protocol Description
RMS communication between the client and the ATM is
obfuscated with values from a lookup table that are XORed
1
with the message plaintext. The format of the RMS packet is
shown in Table 1. The encoded data contains the RMS request
type as well as the ATM serial number and password that is
used to verify the RMS packet.
Length
Content
Description
1 byte
STX (0x02)
RMS start byte
2 bytes
XX XX
Data length (n)
1 byte
XX
Encryption seed
n bytes
XX...
Encoded data
1 byte
ETX (0x03)
RMS end byte
1 byte
XX
Longitudinal Redundancy Check (LRC)
Table 1: Request RMS packet structure [7]
B. RMS Buffer Overﬂow
The vulnerability here is a buffer overﬂow in an function
called by CRmsCtrl::RMS_Proc_Tcp(). This overﬂow is
ultimately caused by a call to memcpy without proper bounds
checking, allowing the overﬂow of a static buffer in the RMS
control library, RMSCtrl.dll. Any packet sent to the RMS
server of the ATM will initiate the function call in Listing 1,
which in turn does the following:
char* recv_buffer;
CRmsCtrl::RMS_Proc_Tcp(){
int* num_recv_char
bool is_connect, is_recv, is_verified;
// connects to the RMS server
is_connect = CDevCmn::fnNET_RMSConnectAccept()
if (is_connect){
memset(recv_buffer, 0, 0x2800);
// receives RMS packet
is_recv = CRmsCtrl::RMS_Recv(recv_buffer, num_recv_char
, 0)
if (is_recv){
// verifies RMS packet
is_verified = CRmsCtrl::RMS_VerifyMsg(recv_buffer, *
num_recv_char);
if (is_verified){
// parses message
}
}
}
}
Listing 1: Pseudo-code of RMS Process
1) fnNET_RMSConnectAccept sets up TCP connec-
tion between the ATM and the RMS client, by default
on port 5555.
2) RMS_Recv
calls
fnNET_RMSRecvData,
which
copies data from the received RMS packet over to
a global receive buffer. If the packet is formatted
correctly, it then proceeds to decrypt the XOR-encoded
data.
3) RMS_VerifyMsg veriﬁes the ATM serial number and
RMS password in the decrypted data.
4) If the message is veriﬁed, the function then proceeds to
parse the packet and generate a response to the RMS
client.
The fnNET_RMSRecvData function in step 2 does not
have bounds or credentials checks on the data received.
Moreover, packet veriﬁcation occurs after the packet has been
copied over to the recv_buffer memory location. Thus,
as long as the packet adheres to the structure in Table 1, its
data is copied over indiscriminately. Any packet larger than
0x2800 bytes will result in a buffer overﬂow.
C. Arbitrary Code Execution
The aforementioned overﬂow eventually overwrites a func-
tion pointer that gets invoked when the ATM is shutting down.
We also found that the .data section of RMSCtrl.dll
is executable, thus we are able to write shellcode that gets
executed when the DLL exits. Because there are regions of
memory after the overﬂowed buffer that are never overwritten
and aren’t critical for system operation, this shellcode can
remain in memory until the device powers off. When the
main ATM application exits cleanly, such as when a technician
performs a ﬁrmware update on the ATM, the shellcode is
executed.
D. Persistent Memory Modiﬁcation
Through arbitrary code execution, we achieved persistence
by modifying memory on the ATM’s Nonvolatile Random-
Access Memory (NVRAM) chip. NVRAM is used to store
network and conﬁguration information of the ATM, such
as enabling or disabling SSL, specifying the payment pro-
cessor’s IP address, and storing passwords. The NVRAM
can be accessed through two pairs of API functions –
MemGetStr and MemGetInt retrieve information from
NVRAM, while MemSetStr and MemSetInt update in-
formation on NVRAM. The aforementioned shellcode can
achieve goals useful to an attacker by updating the ATM’s
conﬁguration to disable SSL, redirecting transactions to a
malicious payment processor, or changing passwords to a
value known by the attacker. Since this conﬁguration data
persists across reboots, modiﬁcations to the NVRAM provide
a simple way for an attacker to apply persistent, malicious
changes.
IV. CEN EXTENSIONS FOR FINANCIAL SERVICES (XFS)
The European Committee for Standardization (CEN) is the
maintainer of a standard for ATMs called eXtensions for
Financial Services, or XFS. This standard is derived from one
originally created by Microsoft in an effort to create a common
platform for ﬁnancial devices running on Windows, a role the
standard still fulﬁlls to this day. XFS plays an important role in
the ATM industry, acting as the platform targeted by both high-
level and low-level software running on ATMs. It exposes a
homogenized interface for working with different components
in ATMs (and other ﬁnancial devices), such as pinpads, cash
dispensers, and card readers.
A. Introduction to XFS
XFS deﬁnes a set of interfaces with the aim of unifying the
ways in which ﬁnancial applications on Microsoft Windows
interact with related pieces of hardware. This is accomplished
through a client/server architecture as seen in Figure 2. The
ﬁnancial frontend interacts with the XFS API, while the
2
service providers, which handle interactions with hardware,
use the corresponding XFS Service Provider Interface (SPI).
The translation and dispatch of these messages is handled by
the XFS Manager. For our purposes, we will refer to all the
vendor-created components of XFS as the XFS middleware.
The XFS middleware implementation used with MoniPlus CE
is called Nextware [8].
Figure 2: XFS client/server architecture as seen in the reference
documentation [9]
There are a number of device classes deﬁned as a part of the
standard. A listing with corresponding abbreviations is shown
in Table 2.
Service Class
Class Name
Class Identiﬁer
Printers
PTR
1
Identiﬁcation Card Units
IDC
2
Cash Dispensers
CDM
3
PIN Pads
PIN
4
Check Readers and Scanners
CHK
5
Depository Units
DEP
6
Text Terminal Units
TTU
7
Sensors and Indicators Units
SIU
8
Vendor Dependent Mode
VDM
9
Cameras
CAM
10
Alarms
ALM
11
Card Embossing Units
CEU
12
Cash-In Modules
CIM
13
Card Dispensers
CRD
14
Barcode Readers
BCR
15
Item Processing Modules
IPM
16
Table 2: XFS Device Classes
A number of actions associated with each device class are
deﬁned as part of the XFS standard. For example, the devices
deﬁned by the standard which are responsible for working
with credit and debit cards are called Identiﬁcation Card units
(IDCs). The IDC standard deﬁnes constants for commands
that can be executed such as READ_TRACK, EJECT_CARD,
and CHIP_IO [10]. These commands will be called when
the primary application (in this case, WinAtm.exe) needs to
control or query a device.
Due to the fact that XFS exposes a homogenized interface
for interfacing with different ﬁnancial devices, it becomes not
only an attractive target for the ATM industry, but also for
malware authors. Numerous ATM-related pieces of malware,
such as GreenDispenser [11] and RIPPER [12], utilize XFS for
interfacing with the card reader, pinpad, and cash dispenser.
These interactions are performed in a payload after being
dropped on the ATM by some other means, normally by taking
advantage of physical access to the device.
B. Nextware – XFS Middleware Implementation
In order to facilitate XFS message passing between different
components that make up the XFS middleware, Nextware uses
TCP socket-based Inter-Process Communication (IPC). This is
a reasonable choice given the lack of many standard Windows
IPC features on Windows CE [13]. However, a problem arises
when these sockets are misconﬁgured. When creating the
sockets, the listening address is given as 0.0.0.0 instead of
127.0.0.1, meaning that instead of listening only to IPC
messages on the loopback device, the local server will listen
to messages from any network device. This misconﬁguration
is reﬂected in a port scan, shown in Table 3.
Port
Open By Default
Description
80
Yes
Default Windows CE Webserver
443
Yes
Default Windows CE Webserver
5555