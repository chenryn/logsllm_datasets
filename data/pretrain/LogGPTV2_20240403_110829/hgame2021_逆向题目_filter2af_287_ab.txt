     16         152 LOAD_GLOBAL              8 (print)
                154 LOAD_CONST               6 ('your flag: ')
                156 LOAD_FAST                4 (res)
                158 BINARY_ADD
                160 CALL_FUNCTION            1        #print('your flag: ' + res)
                162 POP_TOP
                164 LOAD_CONST               0 (None)
                166 RETURN_VALUE
    # your flag: 30466633346f59213b4139794520572b45514d61583151576638643a
最后简单逆一下：
    enc = '30466633346f59213b4139794520572b45514d61583151576638643a'
    enc = bytes.fromhex(enc)
    flag = [b^i for b, i in enumerate(enc)]
    for i in range(len(flag)//2):
        flag[2*i], flag[2*i+1] = flag[2*i+1], flag[2*i]
    print(''.join(map(chr, flag)))
    #G00dj0&_H3r3-I$Y@Ur_$L@G!~!~
###  ezApk
简单的安卓，只有java代码，找到按钮活动。
就是取出文本内容，然后把输入和密文传入s方法，验证是否正确。
到s方法：一个cbc模式的aes加密，填充方式为PKCS7Padding。
所以解密密文就应该是flag了，使用java用同样的方式调用一下解密方法。这里注意一点就是：java中自带的是PKCS5Padding填充，直接使用PKCS7Padding会报错，但搜索到这2个使用起来是一样的，就直接改成PKCS5Padding就好了。
    package ctf;
    import java.io.UnsupportedEncodingException;
    import java.security.InvalidAlgorithmParameterException;
    import java.security.InvalidKeyException;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;
    import java.util.Arrays;
    import javax.crypto.BadPaddingException;
    import javax.crypto.Cipher;
    import javax.crypto.IllegalBlockSizeException;
    import javax.crypto.NoSuchPaddingException;
    import javax.crypto.spec.IvParameterSpec;
    import javax.crypto.spec.SecretKeySpec;
    import java.util.Base64;
    class cry{
        public static byte[] hash(String a, String b) throws NoSuchAlgorithmException, UnsupportedEncodingException{
            MessageDigest v2 = MessageDigest.getInstance(a);
            byte[] v3 = b.getBytes("UTF-8");
            byte[] ans = v2.digest(v3);
            return ans;
        }
    }
    public class aes_test {
        public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException{
            String key = "A_HIDDEN_KEY";
            String input = "EEB23sI1Wd9Gvhvk1sgWyQZhjilnYwCi5au1guzOaIg5dMAj9qPA7lnIyVoPSdRY";
            Base64.Decoder decoder = Base64.getDecoder();
            byte[] enc = decoder.decode(input);
            SecretKeySpec v1 = new SecretKeySpec(cry.hash("SHA-256", key), "AES");
            IvParameterSpec v2 = new IvParameterSpec(cry.hash("MD5", key));
            Cipher v5 = Cipher.getInstance("AES/CBC/PKCS5Padding");
            v5.init(2, v1, v2);
            System.out.println("key: " + byte_hex.bytes2hex(v1.getEncoded()));
            System.out.println("iv: " + byte_hex.bytes2hex(v2.getIV()));
            byte[] plain = v5.doFinal(enc);
            System.out.println(new String(plain));
        }
    }
    /*
    key: fca5fed0bc096dbb2f21c64b77a908b5c9944dfcaba05a482b2424a44a15ffe6
    iv: 99c6bd34c31b78b4c4b964a7745e6300
    hgame{jUst_A_3z4pp_write_in_k07l1n}
    */
其实也不用这么麻烦的，关键是想练习一下java。
自己算一下hash得到的key和iv用python或者在线网站解密一下，方便的多。
    #coding:utf-8
    import base64
    from Crypto.Cipher import AES
    class AesEncry(object):
        key = 'fca5fed0bc096dbb2f21c64b77a908b5c9944dfcaba05a482b2424a44a15ffe6'
        key = bytes.fromhex(key)                            
        iv = '99c6bd34c31b78b4c4b964a7745e6300'
        iv = bytes.fromhex(iv)
        def encrypt(self, data):
            mode = AES.MODE_ECB
            padding = lambda s: s + (16 - len(s) % 16) * chr(16 - len(s) % 16)
            cryptos = AES.new(self.key, mode)
            cipher_text = cryptos.encrypt(data)
            return cipher_text.hex()
        def decrypt(self, data):
            cryptos = AES.new(self.key, AES.MODE_CBC, self.iv)
            decrpytBytes = base64.b64decode(data)
            plaint = cryptos.decrypt(decrpytBytes)
            return plaint
    enc = 'EEB23sI1Wd9Gvhvk1sgWyQZhjilnYwCi5au1guzOaIg5dMAj9qPA7lnIyVoPSdRY'
    flag = AesEncry().decrypt(enc)
    print(flag)
###  helloRe2
首先输入pass1的逻辑，转化一个128位的大数与指定大数比较，然后以挂起创建自身进程的子进程，调用CreateFileMappingA()函数把文件映像到内存，再使用MapViewOfFile()函数把文件视映像到进程地址空间上（用于把当前进程的内存空间的数据与子进程共享），然后在非调试状态下对要共享的数据简单的异或加密一下，最后恢复启动刚刚创建的子进程，自身进程睡眠挂起：
子进程启动后，调用OpenFileMappingA()与MapViewOfFile()查看父进程共享的内存数据，若存在则调用输入pass2的逻辑，然后一个cbc模式的aes加密。
使用python解密一下得到pass2：
    #coding:utf-8
    import base64
    from Crypto.Cipher import AES
    key = b'2b0c5e6a3a20b189'
    key = [key[i]^i for i in range(len(key))]
    key = bytes(key)
    #key = bytes.fromhex(key)                            
    iv = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    iv = bytes(iv)
    #iv = bytes.fromhex(iv)
    def encrypt(data):
        mode = AES.MODE_ECB
        padding = lambda s: s + (16 - len(s) % 16) * chr(16 - len(s) % 16)
        cryptos = AES.new(self.key, mode)
        cipher_text = cryptos.encrypt(data)
        return cipher_text.hex()
    def decrypt(data):
        cryptos = AES.new(key, AES.MODE_CBC, iv)
        decrpytBytes = base64.b64decode(data)
        plaint = cryptos.decrypt(decrpytBytes)
        return plaint
    enc = 't/7+2Qd2eWU/Tl9i1QL2fg=='
    flag = decrypt(enc)
    print(flag)
    #7a4ad6c5671fb313
最后： **hgame{2b0c5e6a3a20b189_7a4ad6c5671fb313}**
###  fake_debugger beta
nc连上后，空格加回车进行单步调试。
容易发现，是对输入一位一位的异或加密后与指定值比较，不对则退出。
开始的格式是知道的，所以后面一位一位慢慢的跟一下就好了。
**hgame{You_Kn0w_debuGg3r}**
###  gun
jadx反编译后没有发现MainActivity，但从几个特征可以知道app进行梆梆加固免费版进行加固。
我们的目的主要是得到解密后的关键dex分析MainActivity，所以可以直接考虑用frida-dumpdex来dump出内存中的dex。项目地址：
搭建frida环境时注意一点：安装的frida的版本要和服务端安装的frida-server版本要一致。
dump出dex后从到小的拖进jeb中反编译，0xbf03a000.dex是我们要找的。
可以看到，创建了多个线程进行操作。
看一下功能：
继续看fd.i方法：
到这里基本上就可以知道，是开启多个线程进行发送数据，然后每个线程有不同的睡眠时间，这就有了先后顺序。
我是直接把所有数据按时间建立关系后，打印出来。
    #include 
    char a[0xfffffff];
    int main(void)
    {
        int i = 0;
        a[19530] = 'q', a[0x75F4] = 'e', a[0xA161] = 'd', a[7337] = 'f';
        a[0x5B0D] = 'e', a[0xC266] = 'x', a[0x887F] = 'q', a[50475] = 'u';
        a[0xC05D] = 'a', a[0x909B] = 'u', a[8488] = 'a', a[0xC1CF] = 'r';
        a[78545] = '0', a[0x4B4C] = 't', a[0xC807] = 'q', a[0x8C9B] = 'q';
        a[0xB2B3] = 'k', a[2390] = 'z', a[0x568B] = ' ', a[70963] = 'y';
        a[0xAF2B] = ' ', a[0x397B] = 'd', a[10110] = ' ', a[0xFE0D] = 't';
        a[0x33DE] = 'q', a[0xE105] = ' ', a[40315] = 'b', a[79438] = 'd';
        a[0x54C2] = 'e', a[0xD115] = 'y', a[0x84B9] = 'x', a[0xE4B4] = 'q';
        a[28084] = 'f', a[83607] = '}', a[0x312F] = 'e', a[0x142F0] = 'd';
        a[50828] = 'z', a[79540] = '_', a[60636] = 'm', a[20891] = 'b';
        a[0x41D8] = 'a', a[0x18FC] = 'm', a[0xE91A] = 'r', a[0x13F0F] = 'I';
        a[0x70B8] = 't', a[4741] = 'm', a[30778] = ' ', a[0xEFA] = 'g';
        a[11980] = 'q', a[5130] = 'p', a[0x7F0] = 'a', a[0x13FA7] = '0';
        a[0x4127] = ' ', a[0x10D66] = 'Q', a[0x54A] = 'O', a[0xDBA0] = 's';
        a[0x10EE1] = 'h', a[70302] = 'x', a[0x11C08] = 'n', a[0x4831] = ' ';
        a[0xE33C] = 't', a[0xFAF4] = ' ', a[80538] = 'i', a[0xF4E1] = 'u';
        a[22890] = 'u', a[0x803B] = 'm', a[0x655B] = 'd', a[0xDC3A] = 'z';
        a[0x3599] = 'o', a[44072] = 'k', a[0xB205] = 'N', a[0xBB43] = 'F';
        a[80939] = '7', a[0x3F07] = 'f', a[52068] = 'o', a[0xCAA2] = ' ';
        a[72519] = '_', a[0x11F52] = 'k', a[0x3CA5] = 'q', a[75894] = 'F';
        a[0xF723] = 'e', a[0x7221] = 'u', a[0x2FCD] = ' ', a[3501] = 'd';
        a[0x9168] = 'e', a[0x8DC6] = ' ', a[0x100CF] = 's', a[0xCD51] = 'm';
        a[0x10B56] = 'd', a[0x6ABD] = ' ', a[0x103F7] = 'y', a[60485] = 'x';