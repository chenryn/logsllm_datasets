I have developed a Python web application that runs on uWSGI, with a frontend built using EmberJS. Additionally, there is a small Python script responsible for managing I/O and serial ports connected to a BeagleBone Black. The entire system operates on Debian, and package management and installation are handled via Ansible. Currently, application updates are performed manually by executing Ansible scripts over SSH.

I am now looking for a more streamlined and user-friendly method to update my Python applications, one that can also be easily executed by our clients, perhaps through a web interface. A good example of what I'm aiming for is the firmware update process for routers. I am curious about how I can implement a similar approach for my Python applications.

I have explored Yocto as an option for building a custom Linux image, but I am unsure how to integrate my applications into these builds. Moreover, I would prefer not to build a complete image for every minor update or hotfix.

Is there anyone who has worked on a similar project and could share some insights or strategies for handling such upgrade processes? 

---

One effective strategy would be to leverage the same package manager used for the rest of the system. Linux distribution package managers are flexible and allow you to create your own package repository containing just your application and scripts. You can then add this repository as a package source on your target systems. Your "updater" would function by pulling updates from this repository.

This approach is also compatible with Yocto. By setting up a custom package repository, you can ensure that your applications are updated independently of the base image, allowing for more frequent and manageable updates.