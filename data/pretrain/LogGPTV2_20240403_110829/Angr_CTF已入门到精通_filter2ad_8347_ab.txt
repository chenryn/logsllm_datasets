        project = angr.Project(path_to_binary, auto_load_libs=False)
        start_address = 0x8048601
        initial_state = project.factory.blank_state(addr=start_address)
        passwd_size_in_bits = 64
        passwd0 = claripy.BVS('passwd0', passwd_size_in_bits)
        passwd1 = claripy.BVS('passwd1', passwd_size_in_bits)
        passwd2 = claripy.BVS('passwd2', passwd_size_in_bits)
        passwd3 = claripy.BVS('passwd3', passwd_size_in_bits)
        passwd0_address = 0xA1BA1C0
        #passwd1_address = 0xA1BA1C8
        #passwd2_address = 0xA1BA1D0
        #passwd3_address = 0xA1BA1D8
        initial_state.memory.store(passwd0_address, passwd0)
        initial_state.memory.store(passwd0_address + 0x8,  passwd1)
        initial_state.memory.store(passwd0_address + 0x10, passwd2)
        initial_state.memory.store(passwd0_address + 0x18, passwd3)
        simulation = project.factory.simgr(initial_state)
        def is_successful(state):
            stdout_output = state.posix.dumps(1)
            if b'Good Job.\n' in stdout_output:
                return True
            else: 
                return False
        def should_abort(state):
            stdout_output = state.posix.dumps(1)
            if b'Try again.\n' in  stdout_output:
                return True
            else: 
                return False
        simulation.explore(find=is_successful, avoid=should_abort)
        if simulation.found:
            for i in simulation.found:
                solution_state = i
                solution0 = solution_state.solver.eval(passwd0,cast_to=bytes)
                solution1 = solution_state.solver.eval(passwd1,cast_to=bytes)
                solution2 = solution_state.solver.eval(passwd2,cast_to=bytes)
                solution3 = solution_state.solver.eval(passwd3,cast_to=bytes)
                solution = solution0 + b" " + solution1 + b" " + solution2 + b" " + solution3
                print("[+] Success! Solution is: {}".format(solution.decode("utf-8")))
                #print(solution0, solution1, solution2, solution3)
        else:
            raise Exception('Could not find the solution')
    if __name__ == "__main__":
        Go()
运行一下查看一下结果：
这次`start_addr`从`0x08048601`也就是跳过`scanf`
    path_to_binary = "./05_angr_symbolic_memory" 
    project = angr.Project(path_to_binary, auto_load_libs=False)
    start_address = 0x8048601
    initial_state = project.factory.blank_state(addr=start_address)
因为这次输入的是四个8字节64比特大小的字符串，所以我们需要创建四个相同大小的符号位向量
    passwd_size_in_bits = 64
    passwd0 = claripy.BVS('passwd0', passwd_size_in_bits)
    passwd1 = claripy.BVS('passwd1', passwd_size_in_bits)
    passwd2 = claripy.BVS('passwd2', passwd_size_in_bits)
    passwd3 = claripy.BVS('passwd3', passwd_size_in_bits)
###  state.memory
前面提到可以通过 `state.mem[index]` 访问内存，但对于一段连续内存的操作十分不方便。因此我们也可以使用 `state.memory` 的
`.load(addr, size) / .store(addr, val)` 接口读写内存, size 以 bytes 为单位
这些函数的原型：
    def load(self, addr, size=None, condition=None, fallback=None, add_constraints=None, action=None, endness=None,
                 inspect=True, disable_actions=False, ret_on_segv=False):
            """
            Loads size bytes from dst.
            :param addr:             The address to load from. #读取的地址
            :param size:            The size (in bytes) of the load. #大小
            :param condition:       A claripy expression representing a condition for a conditional load.
            :param fallback:        A fallback value if the condition ends up being False. 
            :param add_constraints: Add constraints resulting from the merge (default: True).
            :param action:          A SimActionData to fill out with the constraints.
            :param endness:         The endness to load with. #端序
    def store(self, addr, data, size=None, condition=None, add_constraints=None, endness=None, action=None,
                  inspect=True, priv=None, disable_actions=False):
            """
            Stores content into memory.
            :param addr:        A claripy expression representing the address to store at. #内存地址
            :param data:        The data to store (claripy expression or something convertable to a claripy expression).#写入的数据
            :param size:        A claripy expression representing the size of the data to store. #大小
            ...
然后就可以开始符号化内存，因为这四个地址均是连续的地址，我们只需要连续加上0x8即可
    passwd0_address = 0xA1BA1C0
    #passwd1_address = 0xA1BA1C8
    #passwd2_address = 0xA1BA1D0
    #passwd3_address = 0xA1BA1D8
    initial_state.memory.store(passwd0_address, passwd0)
    initial_state.memory.store(passwd0_address + 0x8,  passwd1)
    initial_state.memory.store(passwd0_address + 0x10, passwd2)
    initial_state.memory.store(passwd0_address + 0x18, passwd3)
然后我们将模拟管理器重置为我们之前设置好的状态
    simulation = project.factory.simgr(initial_state)
接下来就和之前一直做的一样，设定好模拟器的路径选择，执行并提取查看结果即可
## 06_angr_symbolic_dynamic_memory
这题主要是学会符号化动态内存，这个题与上题没有太大区别，除了字符串的内存是通过堆`malloc()`而不是堆栈分配的
我们先检查一下文件：
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)
然后拖进IDA查看一下程序
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char *v3; // ebx
      char *v4; // ebx
      int v6; // [esp-10h] [ebp-1Ch]
      signed int i; // [esp+0h] [ebp-Ch]
      buffer0 = (char *)malloc(9u);
      buffer1 = (char *)malloc(9u);
      memset(buffer0, 0, 9u);
      memset(buffer1, 0, 9u);
      printf("Enter the password: ");
      __isoc99_scanf("%8s %8s", buffer0, buffer1, v6);
      for ( i = 0; i  90 )
      {
        puts("Try again.");
        exit(1);
      }
      return (13 * a2 + a1 - 65) % 26 + 65;
    }
我们可以总结出这个程序的逻辑：
  * 程序使用`malloc()`函数分配出了两个大小为9字节的缓冲区，并将其初始化为0
  * 然后将两个字符串以`scanf("%8s %8s")`作为格式化字符串分别输入进缓冲区内
  * 然后利用`complex_function()`函数分别对两个字符串进行变换
  * 然后将变换后的字符串分别与 **“UODXLZBI”** 和 **“UAORRAYF”** 进行比较
先放一下EXP：
    import angr
    import sys
    import claripy
    def Go():
        path_to_binary = "./06_angr_symbolic_dynamic_memory" 
        project = angr.Project(path_to_binary, auto_load_libs=False)
        start_address = 0x8048699
        initial_state = project.factory.blank_state(addr=start_address)
        passwd_size_in_bits = 64
        passwd0 = claripy.BVS('passwd0', passwd_size_in_bits)
        passwd1 = claripy.BVS('passwd1', passwd_size_in_bits)
        fake_heap_address0 = 0xffffc93c
        pointer_to_malloc_memory_address0 = 0xabcc8a4
        fake_heap_address1 = 0xffffc94c
        pointer_to_malloc_memory_address1 = 0xabcc8ac
        initial_state.memory.store(pointer_to_malloc_memory_address0, fake_heap_address0, endness=project.arch.memory_endness)
        initial_state.memory.store(pointer_to_malloc_memory_address1, fake_heap_address1, endness=project.arch.memory_endness)
        initial_state.memory.store(fake_heap_address0, passwd0)  
        initial_state.memory.store(fake_heap_address1, passwd1)
        simulation = project.factory.simgr(initial_state)
        def is_successful(state):
            stdout_output = state.posix.dumps(1)
            if b'Good Job.\n' in stdout_output:
                return True
            else: 
                return False
        def should_abort(state):
            stdout_output = state.posix.dumps(1)
            if b'Try again.\n' in  stdout_output:
                return True
            else: 
                return False
        simulation.explore(find=is_successful, avoid=should_abort)
        if simulation.found:
            for i in simulation.found:
                solution_state = i
                solution0 = solution_state.solver.eval(passwd0, cast_to=bytes)
                solution1 = solution_state.solver.eval(passwd1, cast_to=bytes)
                print("[+] Success! Solution is: {0} {1}".format(solution0.decode('utf-8'), solution1.decode('utf-8')))
                #print(solution0, solution1)
        else: