title:Networkmd: topology inference and failure diagnosis in the last mile
author:Yun Mao and
Hani Jamjoom and
Shu Tao and
Jonathan M. Smith
NetworkMD: Topology Inference and Failure Diagnosis in
the Last Mile
Yun Mao
University of Pennsylvania
PI:EMAIL
Shu Tao
IBM T. J. Watson Research
PI:EMAIL
Hani Jamjoom
IBM T. J. Watson Research
PI:EMAIL
Jonathan M. Smith
University of Pennsylvania
PI:EMAIL
ABSTRACT
Health monitoring, automated failure localization and diag-
nosis have all become critical to service providers of large
distribution networks (e.g., digital cable and ﬁber-to-the-
home), due to the increases in scale and complexity of their
oﬀered services. Existing automated failure diagnosis solu-
tions typically assume complete knowledge of network topol-
ogy, which in practice is rarely available. The solution pre-
sented in this paper—Network Management and Diagno-
sis (NetworkMD)—is an automated failure diagnosis system
that can infer failure groups based on historical failure data,
and optionally geographical information. The inferred fail-
ure groups mirror missing topologies, and can be used to lo-
calize failures, diagnose root causes of problems, and detect
misconﬁguration in known topologies. NetworkMD uses an
unsupervised learning algorithm based on non-negative ma-
trix factorization (NMF) to infer failure groups. Using cable
network as the primary example, we demonstrate the eﬀec-
tiveness of NetworkMD in both simulated settings and real
environment using data collected from a commercial network
serving hundreds of thousands of customers via thousands
of intermediate network devices.
Categories and Subject Descriptors
C.2.1 [Computer-Communication Networks]: Network
Architecture and Design—Network topology
General Terms
Algorithms, Measurement
Keywords
Failure Diagnosis, Network Topology Inference
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’07, October 24-26, 2007, San Diego, California, USA.
Copyright 2007 ACM 978-1-59593-908-1/07/0010 ...$5.00.
1.
INTRODUCTION
Service providers are oﬀering bundled services to encour-
age consumers to use their high-speed data distribution net-
works. Adding these new customers and their services re-
sults in physical connectivity to support hundreds of thou-
sands of devices as well as logical (or service) connectivity
to support the evolving service oﬀerings (e.g., Voice-over-
IP and Video-on-Demand). There are signiﬁcant network
management challenges that arise from the combination of
rapid growth and increased complexity of the network, par-
ticularly those associated with failures, which at this scale
are almost certain to be present. This paper is focused on
two challenges identiﬁed by multiple service providers we
work with: missing device status information and incom-
plete topology. Cable network infrastructures are used as the
primary examples in this paper, but the ﬁndings are equally
applicable to other large-scale distribution networks, includ-
ing IP networks, utility networks, etc.1
In a cable network, a single administrative area encom-
passes hundreds of thousands of end-customers (e.g., cable
modems and VoIP phones) with thousands of intermediate
distribution devices that operate on diﬀerent protocol lay-
ers. Such devices include routers, Cable Modem Termina-
tion Systems (CMTSs), ﬁber nodes, repeaters, etc.
Consider a simpliﬁed cable network in Figure 1. A ﬁrst
challenge is that the Network Operations Center (NOC) can-
not continuously monitor the status of all devices because
either: (1) some devices are passive and therefore unrespon-
sive to diagnostic packets or signals, or: (2) the cost of prob-
ing all devices is too high. An example device likely to be
unresponsive is a physical layer repeater connecting cable
modems and ﬁber nodes, and their statuses are rarely visi-
ble to the NOC. The computing time and resources required
to continuously probe all cable modems in an administrative
area are prohibitive, given the large size of the corresponding
customer-base. Therefore, in practice, the NOC must rely
on monitoring data limited to coarse-grained passive moni-
toring or infrequent active probes obtained from accessible
devices to diagnose failures spanning the entire network. A
second challenge is that in many cases, a complete network
topology is not available. This typically happens because
topology information is spread across disparate plant map-
ping applications, which may not be integrated with moni-
1Our primary focus is on the “last mile” of the distribution
infrastructure, where the logical topology is tree-like.
Figure 1: A typical cable network topology consist-
ing of routers/switches, CMTSs, ﬁber nodes, re-
peaters, and cable modems, organized in a tree
structure. Here, connectivity between end modems
and ﬁber nodes is missing.
toring and management applications.2 As a result, the NOC
often needs to deal with an incomplete topology as in Fig-
ure 1, where the exact number of repeaters and their con-
nections to ﬁber nodes and cable modems are unknown.
A desirable approach to address these challenges is one
which automatically infers missing topologies in distribu-
tion infrastructures. To this end, we adopt the concept of
failure group (FG)—a group of end components (i.e., cable
modems) that are likely to share the same risk of failure.
The failure of an FG dictates the failures of all its compo-
nents. Failure groups are constructed by mining historical
failure patterns and are shown to be good reﬂection of ac-
tual topological dependencies. While typically the missing
topology cannot be fully discovered, we show how FGs are
useful in failure diagnosis.
Speciﬁcally, we use FGs to help identifying the root cause
of failures, even though failures may be caused by devices
that are neither remotely measurable by the NOC, nor vis-
ible from the topology standpoint.
In Figure 1 then, we
are interested in identifying which repeater has failed based
on the observation of health information of the higher- and
lower-layer devices. Previous solutions to network failure
diagnosis depend on the availability of complete topology
(with possibly incorrect) information [15, 14, 22], which is
used to understand the dependency between network devices
(e.g., routers) and observed failures (e.g., IP link failures).
Unlike these works, our study focuses on the problem of
failure diagnosis with incomplete information about device
status and network topology. The idea is that if we can infer
FGs that directly reﬂect the missing part of the topology, we
can then use FGs to localize failures, diagnose root causes,
and even detect misconﬁgurations in the existing topology.
We demonstrate that this approach can provide meaningful
assistance to failure diagnosis in cable networks.
The rest of this paper is organized as follows. Section 2
provides a formal statement of the problem. We then intro-
duce the details of our approach in Section 3. In Section 4,
we describe the implementation of the NetworkMD algo-
rithms in a real operational environment. In Section 5, we
2We emphasize that typically this information is available.
It is, however, (1) extremely expensive to integrate into ev-
ery monitoring application, and (2) may not be updated
frequently enough to capture the actual topology as cus-
tomers constantly join and leave the network, causing invis-
ible changes.
Figure 2: An example of the measurement process
on a simple topology. Modems marked by an “X”
indicate a failure.
evaluate the eﬀectiveness of our algorithms using both simu-
lated and real data. Related works are discussed in Section 6
and ﬁnally, Section 7 concludes the paper.
2. PROBLEM STATEMENT
The primary information source to infer failure groups is
the status of end-devices represented as a binary value, 1 if
faulty, 0 if not. In cable networks, end-devices can be cable
modems, set-top boxes, etc. As noted previously, the high
overhead of probing makes it uncommon for management
applications at the NOC to periodically check the status of
all end-devices. Therefore, we do not assume the availabil-
ity of complete status information for all devices in each
measurement epoch. Rather, active probing is invoked only
when a higher-level device (e.g., a CMTS interface) issues
an alarm that indicates the occurrence of failure event. For
instance, an alarm could be triggered if the number of live
modems registered at a CMTS interface is less than a pre-
deﬁned minimum threshold.
The above measurement yields a failure instance matrix
X = [Xij ]n×d for each parent device (e.g., CMTS interface,
node, etc), where n is the number of measurements (not nec-
essarily obtained with a ﬁxed period), and d is the number
of end-devices probed in each measurement. For instance,
Xij represents the status of the j-th modem during the i-th
measurement: Xij = 1 indicates that the modem is faulty;
Xij = 0 means the modem is functioning.
In practice, the failure instance matrix collected by probes
is not always accurate. This is caused by the facts that (1)
probes are unreliable, hence may not always get responses;
(2) monitored cable modems may be powered oﬀ when the
probes are sent to them (so that these modems can be per-
ceived as “faulty”). Furthermore, not all cable modem fail-
ures can be characterized by failure groups. In other words,
probes may detect isolated cable modem failures, which are
not caused by higher level device failures, hence should only
be considered as measurement noise.
To illustrate the failure instance matrix, consider the sim-
ple 3-level topology shown in Figure 2. Active probes are
launched from the root to all leaf nodes. The causes of the
failures detected by the second and third probe are the fail-
ure of repeater 1. The failures detected by the ﬁrst, fourth
Figure 3: An example of decomposition of failure
instance matrix X into failure explanation matrix U
and failure group matrix V .
and ﬁfth probes are contributed by the failure of repeater
2. Note that as perceived by the ﬁfth probe, modem 1 is
powered oﬀ by the user. Hence, it should be considered as
an isolated failure, i.e., noise in the data set.
There is ﬂexibility in choosing the level of network hier-
archy at which the failure instance matrix is organized. For
example, the matrix can group cable modem measurements
at the CMTS interface level, yielding a small number of
large instance matrices. Alternatively, the matrix can group
measurements at the node level, yielding a large number of
smaller instance matrices. The choice of grouping level de-
pends on the target application, as well as the availability
of data.
Given a failure instance matrix X, our goal is to identify
the FGs and determine their failure statuses. Note that the
number of FGs, r, is typically much smaller than the number
of modems, d, due to the high-density tree topology of the
network.
Ideally, without any noise and measurement er-
rors, the status of FGs and the association of cable modems
to diﬀerent FGs jointly determine X. Speciﬁcally, suppose
we know a priori the compositions of all FGs and their sta-
tuses during the measurement, we can construct two binary
matrices, a failure explanation matrix, U = [Uij ]n×r, and a
failure group matrix, V = [Vij ]r×d. Each row of V represents
an FG: Vij = 1 iﬀ the j-th modem is associated with the i-
th FG, Vij = 0 otherwise. As exempliﬁed in Figure 3, each
column of U represents the status of an FG: Uij = 1 iﬀ the
j-th FG fails during the i-th round of measurement, Uij = 0
otherwise. Thus, the product of the two binary matrices
should equal the original failure instance matrix X:
X = U × V
(1)
In practice, due to the noise in the data set, X might
not exactly equal U × V . Therefore, we need to ﬁnd U and
V such that they best represent the actual causes of the
failures, despite the presence of noise.
3. APPROACH
We begin by describing the algorithm to ﬁnd the failure
group and failure explanation matrices. Figure 4 provides a
high-level overview of the key steps. Section 3.1 describes
the basic algorithm, which assumes the number of failure
Figure 4: Outline of NetworkMD algorithm
groups is known a priori and that the failure groups are
non-overlapping. Section 3.2 extends the algorithm to cases
where the number of failure groups is unknown. Finally,
Section 3.3, extends the algorithm to handle more complex
topology conﬁgurations. An alternative approach based on
the k-means algorithm is given in Section 3.4 for comparison
purposes.
3.1 The Basic Algorithm
For the basic algorithm, three assumptions are made. First,
the failure instance matrix X is complete without missing
values. Second, the target number of failure groups, r, is
known. For example, the number of repeaters in the network
is assumed to be known, but not the connections between
cable modems and these repeaters. Third, the failure groups
do not overlap, as in the case of cascaded topology. We will
extend our study on cascaded topologies in Section 3.3.
We propose an algorithm based on the Non-negative Ma-
trix Factorization (NMF) method [17]. NMF decomposes
n×r and V ′
X into two non-negative real matrices U ′
r×d, such
that the derived failure instance matrix, X ′ = [X ′
ij ] = U ′ ×
V ′, is a good approximation of the original failure instance
matrix X, i.e., NMF aims at minimizing the reconstruction
error function:
δ = ||X − X ′||2 = X
X
(Xij − X ′
ij )2
(2)
i
j
The error function is minimized through an iterative process.
Compared to general algorithms for minimizing functions,
such as gradient descent or the Simplex Downhill method,
the algorithm for NMF converges much faster. It requires no
“magic number” tuning, such as choosing a step size in the
Simplex Downhill method. The algorithm takes two random
non-negative matrices U ′ = [U ′
ij ]r×d as
input, and updates them in an alternating fashion. Speciﬁ-
ij ]n×r and V ′ = [V ′
cally, in each iteration, we update U ′ and V ′ as:
U ′
ij ← U ′
ij
V ′
ij ← V ′
ij
(XV ′T )ij
(U ′V ′V ′T )ij
(U ′T X)ij
(U ′T U ′V ′)ij
The details of the iterated updating algorithm can be
found in [17], in which Lee et. al. proved that these up-
date rules converge monotonically to stationary points of
the error function, Eq. (2). Based on our experience, several
hundred iterations suﬃce for convergence to a local mini-
mum.
Typically, the results of NMF are real values, which are in-
consistent with the deﬁnition of [Uij ] and [Vij ], as Uij and Vij
should both be binary values. To obtain a binary decompo-
sition, we must convert U ′ and V ′ to binary matrices. Note
the actual values in either U ′ or V ′ alone are not representa-
tive since one could multiply all elements in any column of
U ′ by a constant and divide all elements in the correspond-
ing row of V ′ by the same constant without aﬀecting the
validity of the decomposition. Therefore we cannot simply
normalize them individually. To ensure consistent binary
decomposition, we ﬁrst normalize both matrices. This step
is formalized by the following equations:
U ′′
ij =
V ′′
ij =
U ′
ij
maxk U ′
kj
V ′
ij
maxk U ′
ki
(3)
(4)
Simply put, the normalization factors are decided by the
maximum values of the column vectors in U ′.
After normalization, one can consider U ′′
ij as the conﬁ-
dence factor that indicates whether the j-th FG failed dur-
ing the i-th probing, with 1 reﬂecting the highest likelihood
and 0 reﬂecting the least likelihood. Similarly, V ′′
ij is the
conﬁdence factor of how likely device j would be part of FG
i.
We then apply the following threshold-based algorithm to
obtain the ﬁnal binary matrices U and V :
Uij = 0 iﬀ U ′′
Vij = 1 iﬀ the following three conditions are met:
ij  0.5
ij > 0.5 × max
V ′′
V ′′
k
(5)
(6)
(7)
V ′′
ik
The threshold on U is self-explanatory. We impose three
conditions on the threshold of V for the following reasons.
Eq. (5) implies that a node can only be associated with one
FG, which is the one of the maximum conﬁdence factor V ′′
ij ;
Eq. (6) guarantees the absolute conﬁdence factor is above
0.5; Eq. (7) indicates that a node is included in an FG only if
the node’s conﬁdence factor is at least half of the conﬁdence
factor from the node which is most likely to be in the failure
group.
Note that in the failure group matrix V , a node is not
necessarily assigned to an FG. That is, it is possible that
∃j, s.t.∀i, Vij = 0. This is expected, especially for instance
matrices with under-representative number of failures. For
example, a node j would not belong to any FG if it never
experienced a failure or if it failed independently from other
Node 1(cid:13) Node 2(cid:13) Node 3(cid:13)
FG1(cid:13)
FG2(cid:13)
Figure 5: Cascaded topology with sub failure groups
nodes (which would have constituted the corresponding FG).
Such behavior would lead to an all-zero column in the failure
group matrix V .
We use the example shown in Figure 2 to demonstrate
how the algorithm works. First we use NMF to decompose
X into two smaller matrices U ′ and V ′:
2
6664
3
∗» 0.84
7775
3
7775
2
6664
0.57
0.59
1.28
1.28
1.73
0.71
0.57
0.56
0.31
0
1.73 –
0
1
1
0
1
1
1
0
0
1
0
0
0
1