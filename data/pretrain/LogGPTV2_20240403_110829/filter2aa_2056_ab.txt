  à Set-­‐Cookie:	
  session=bob;	
  domain=.user.bank.com;	
  path=/admin;
Attacker à Set-­‐Cookie:	
  session=attacker;	
  domain=.bank.com;	
  path=/admin/;
Server	
  à Set-­‐Cookie:	
  session=bob;	
  domain=.user.bank.com;	
  path=/admin/;
Attacker à Set-­‐Cookie:	
  session=attacker;	
  domain=.bank.com;	
  path=/admin/index.php;
Cookie:	
  session=attacker;	
  session=bob;
总能最长？Cookie职责之一，负责多页面之间的状态传递
Attacker à Set-­‐Cookie:	
  session=attacker;	
  domain=.bank.com;	
  path=/admin/index.php?type=1;
(Firefox)
提高优先级：更早创建
Server	
  à Set-­‐Cookie:	
  session=bob;	
  domain=.bank.com;	
path=/;
目标页面：https://user.bank.com/
Attacker à Set-­‐Cookie:	
  session=none;	
  domain=.bank.com;	
path=/;
expires=Mon,	
  1 Jan	
  1970
Attacker à Set-­‐Cookie:	
  session=attacker;	
  domain=user.bank.com;	
   path=/;
…
Server	
  à Set-­‐Cookie:	
  session=bob;	
   domain=.bank.com;	
path=/;
Cookie:	
  session=attacker;	
  session=bob;
更早创建
Attacker	
  à Set-­‐Cookie:	
  session=attacker;	
   domain=user.bank.com;	
  path=//;
(Firefox)
精确控制
• 精确控制作用域
domain、path
• 总能构造更高优先级
Path、Creation-­‐time
那么…
精确攻击：隐蔽的身份替换
对google注入：Set-­‐Cookie: session=attacker; domain=www.google.com; path=/search;
https://www.google.com/
https://history.google.com/history/
https://mail.google.com/
https://drive.google.com/
Ajax:	
  https://www.google.com/search?pq=kcon
身份：攻击者（信息泄露）
身份：受害者（无察觉）
身份：受害者（无察觉）
身份：受害者（无察觉）
Cookie:	
  session=attacker;	
  session=bob;
Cookie:	
  session=bob;
惯性思维3：“一个”HTTPS页面
这是一个HTTPS页面；
欢迎, Bob
浏览记录
好友列表
我的订单
系统消息
https://www.bank.com
真是“一个”页面吗？
HTTPS可以保证页面的完整性；
因此，这一个页面的信息是完整的。
（不可篡改的）
https://www.bank.com
欢迎, Bob
浏览记录
好友列表
我的订单
系统消息
“一个”HTTPS页面
GET	
  /
Cookie:	
  Session=Bob;
Ajax: /message
Ajax: /friends
iframe:	
  /orders
iframe:	
  /history
HTTPS
Cookie:	
  Session=Alice;	
   session=Bob;
Cookie:	
  Session=Jack;	
   session=Bob;
Cookie:	
  Session=Jim;	
   session=Bob;
Cookie:	
  Session=Tom;	
  session=Bob;
精确替换攻击：gmail
Set-­‐Cookie:	
  session=attacker;	
  domain=gadget.google.com;	
  path=/chat;
走马
https://mail.google.com/
https://gadget.google.com/chat
Attacker
精确替换攻击：充值
Set-­‐Cookie:	
  session=attacker;	
  domain=pay.jd.com;	
  path=/payment/bankChoose_Common.action;
走马
Attacker
正确看待HTTPS页面
• HTTPS页面往往并非“一个”页面
• 往往由多个子页面以及多个Ajax拼凑而成
• 攻击者利用Cookie可对其进行篡改
惯性思维4：“一次”HTTPS操作
HTTPS
“一次”HTTPS操作
HTTPS
支付页面/pay
创建订单/pay/order
转到银行/chooseBank
银行
Cookie:	
  session=Bob;
Cookie:	
  session=Attacker;
Cookie:	
  session=Attacker;
自动跳转
自动跳转
“一次”HTTPS操作：识别链断裂
国内网银支付现状
题外话：国内许多电商跳转页面为HTTPS…
断开的“识别链”
正确看待HTTPS操作流程
• 用户操作可能并非一次“原子”操作
• 往往由多个Ajax以及多次自动跳转请求组成
• Cookie可对中间请求进行身份篡改
Amazon恶意购物
UnionPay银行卡绑定
JD恶意充值
Facebook支付绑定
Bitbucket OAuth
……
惯性思维5：总能清理的Cookie
• 服务端总能主动地、准确地清理Cookie吗？
信息丢失，难以准确地清理！
Set-­‐Cookie:	
  user=bob;	
  domain=?;	
  path=?;	
  ß Server
无法确定domain与path
写时带属性，读时无属性
Browser à Cookie:	
  user=bob;
服务器无法得知Cookie的具体domain/path
如果希望删除或重新赋值…
Github认为…
遍历嘛！总能清除异常的Cookie
但是，遍历的开销……
https://sub.domain.bank.com/admin/users/list.php?name=1#any
Domains:
.sub.domain.bank.com
sub.domain.bank.com
.domain.bank.com
.bank.com
Paths:
/
/admin
/admin/
/ad	
   (IE/Safari)
/admin/us (IE/Safari)
/admin/users/list.php?name=1#any (Firefox)
驻留式攻击：跨越时间和空间
Set-­‐Cookie:	
  session=attacker;	
  domain=.pay.jd.com;	
  path=/payment/;
https://pay.jd.com/payment/
几周前…
几周后…
该HSTS登场了
看上去强悍的HSTS
HTTPS
https://pay.bank.com
HTTPS
X
HSTS:	
  浏览器对特定域名强制进行HTTPS访问
HTTP
②
①
strict-­‐transport-­‐security: max-­‐age=15552000;	
  includeSubDomains;
http://pay.bank.com
HSTS：面对Cookie的尴尬
l HSTS并非为Cookie量身定制
l 部署现状
Full	
  HSTS:	
  8/1000;	
  1252/1000000	
  (Alexa)
IE11才开始支持
对于Web页面
对敏感子域进行includeSubdomains设置即可；
例如gmail，
只需要在mail.google.com进行includeSubdomains
对于Cookie
由于Cookie的Domain是通配的
例如gmail，
虽然对mail.google.com进行includeSubdomains
攻击者即可伪造non.google.com，注入domain为.google.com的Cookie
在mail.google.com有效，可进行攻击
必须对整个域名标注includeSubdomains（Full	
  HSTS）
假设Full	
  HSTS，又如何？
407注入攻击：Pretty	
  Bad	
  Proxy
Pretty-­‐Bad-­‐Proxy:	
  An	
  Overlooked	
  Adversary	
  in	
  Browsers’	
  HTTPS	
  Deployments
Shuo Chen,	
  Ziqing Mao
https://bank.com
CONNECT	
  bank.com:443
①
502:	
  Server	
  not	
  found
②
200:	
  Connection	
   established
Fixed
Proxy
SSL/TLS
407注入攻击：Firefox
407注入攻击
https://bank.com
Proxy
CONNECT	
  bank.com:443
①
407:	
  Proxy	
  Authentication	
  Required
Set-­‐Cookie: session=attack; …
②
200:	
  Connection	
   established
CVE-­‐2014-­‐8639
CVE-­‐2015-­‐1229
Full HSTS下仍可注入！
惯性思维6
Cookie而已
通用攻击
TLD	
  Cookie，拒绝
Set-­‐Cookie:	
  vulcookie=evil;	
  domain=.com;	
  path=/wp_vul_path/;
www.evil.com
有无可能：攻击框架/商业Web软件？
假设WordPress的wp_vul_path/vul.php 存在Cookie漏洞
http://a.com/wp_vul_path/vul.php
http://b.com/wp_vul_path/vul.php
http://c.com/wp_vul_path/vul.php
DNS	
  Query:	
  com
DNS	
  Response:	
  1.1.1.1
Set-­‐Cookie:	
  vulcookie=evil;	
  domain=.com;	
  path=/wp-­‐vul-­‐path/;
1.1.1.1
http://a.com/wp-­‐vul-­‐path
http://b.com/wp-­‐vul-­‐path
http://c.com/wp-­‐vul-­‐path
通用攻击：Blind	
  Cookie	
  Attack	
  (Safari)
http://com/
https://bank.com
Cookie: nickname=Bob
Cookie: nickname=Password:A
Hello, Password:A
…
Password:CaiBuDao
总长度: 1024
Cookie: nickname=Password:C
Hello, Password:C
…
Password:CaiBuDao
猜到第一位：C
Hello, Bob
…
Password:CaiBuDao
Gzip
• Cookie	
  BREACH
phpMyAdmin(CVE-­‐2015-­‐2206)
再谈反射：Cookie	
  BREACH
压缩
压缩 总长度: 1023
Cookie之困，困于
•
协议本身
– 宽松的SOP、缺乏完整性约束
•
浏览器实现
– 千奇百怪
•
Cookie不可信
– 检查过滤缺乏严谨，XSS/SQLi
•
Cookie不唯一
– 身份替换
•
Cookie拆解“一个”HTTPS页面
– 页面局部劫持
•
Cookie拆解“一次”HTTPS操作
– 业务流程劫持
•
Cookie难以被Server清理
– 持久化攻击
•
并非Cookie而已
– 与其他攻击形式结合，BREACH/DNS Binding
离开星巴克时需要做什么？
温馨提示
正在连WIFI的童鞋，会后请务必清理电脑或手机Cookie	
  J
谢谢大家