---
## Page 267
值为"？的optid参数）：
讲，它现在还相当小，并且只能处理选项--help或-？（为此，handle_options（)会传递一个
选项。
以长选项形式进行指定（如--user=bill），handle_options（）函数都可以正确地解析出这些
名和密码则来自选项文件。无论是以短选项形式进行指定（如-h yet_another_host），还是
后那个 show_argv示例所用的文件内容一样)：
包含非选项参数的参数列表。
这个选项后面不带选项值，那么这个指针将为NULL)。
my_option 结构的指针，以及一个指向在参数向量里紧跟该选项后面的那个参数的指针（如果
理。handle_options（）将向这个辅助函数传递3个参数：短选项值、一个指向该选项的
遍历参数向量时，一旦遇到某个启用了辅助函数的选项，它便会调用这个函数来完成特殊的处
末尾，或者遇到专门的用双短划线（即“--”)表示的“选项结束”参数为止。当handle_options（）
然后再开始处理选项参数一
辅助函数 get_one_option（)主要配合 handle_options（）一起使用。对 show_opt 程序来
下面是调用 show_opt之后的输出结果（假设，～/ .my.cnf 的内容仍然与7.3.2.1节里的最
当 handle_options（)返回时，
get_one_option (int optid, const struct my_option *opt, char *argument)
static my_bool
从上面的输出结果里可以看到：主机名取自命令行（它会改写选项文件里那个值），而用户
Argument vector after calling handle_options():
username: bill
Connection parameters after calling handle_options():
Argument vector after calling load_defaults():
port number:0
password:(nul1)
Original connection parameters:
%./show_opt -h yet_another_host
当调用handle_options（)处理参数向量时，它将跳过向量中的第一个参数（即程序名)
arg0:x
socket filename:（null)
hostname:
arg
arg
arg
arg
arg
arg
arg
arg
arg
Originalargument
socketfilename:
username:
hostname:
{NULL，O,NULL， NULL, NULL, NULL， GET_NO_ARG， NO_ARG,O,0,O,O，O，0}
6
0：
2：
1：
3：
1：
yet_another_host
--password=secret
yet_another_host
--user=bill
--user=sampadm
-h
./show_opt
-h
-host=some_host
-user=bill
secret
(null)
（null)
vector:
一即以短划线开头的参数。整个处理过程会一直持续到这个向量的
，参数计数器和向量会被适当地重置，用以表示一个其中只
--user=bill x
7.3出错处理和命令选项处理
247
---
## Page 268
7.3.3
事情。
和--defaults-extra-file 选项。请大家带上所有这些选项调用 show_opt，看看会发生什么
响。通过这种方式，你将学到更多。例如，把--port 选项的最小值、最大值和块大小分别设
看到你的密码。在后面的程序里，我们将用get_one_option（）来检查是否给出了密码值。如
如果使用了短选项形式，
项时，可以选择给不给出密码值，如同选项信息结构里的OPT_ARG所表明的那样。也就是说，
们将在connect2 里这样做)。例如，get_one_option（)便可用于处理密码选项。当指定此选
注释串自动生成一条帮助消息。如果想看看它是如何工作的，那么可以试试下面这条命令：
其中，my_print_help（）函数是一个客户端开发库例程，它会根据 my_opts 数组里的选项名和
这
置
乐
个范围以外的值，并且还会发现，这些值都自动向下近似为与之最接近的那个25的倍数值
成100、1000和25，然后重新编译这个程序，你便会发现，无法把端口号设置成100到1000
服务器之前，应该提示用户输入密码。
给出了密码值，那么我们会把它保存起来；否则，会设置一个标志，表明这个程序在开始连
令行省略密码值，然后提示你输入它。这样可以让你避免在命令行给出密码，从而防止他人
果使用了长选项形式，
现在，我们来编写 connect2.c。它具有以下特点。
这些选项处理例程还能自动处理--no-defaults、--print-defaults、--defaults-file
static char *opt_host_name = NULL;
最终的源文件connect2.c，如下所示：
修改一下 show_opt.c中的选项结构，看看你的更改会对这个程序的行为产生什么样的影
你还可以根据需要
static
%./show_opt --help
t
#include
#include
#include
#include
口
口
catic
*/
nclude
connect2.c－使用选项文件或命令行指定的连接参数，连接MySQL服务器
show_opt.c的相似，但略有修改，以便在必要时提示用户输入密码。
它可以处理命令行或选项文件里的各个选项。为实现这个功能，使用的代码与
它可以连接 MySQL服务器、断开连接和退出。这与connect1.c很像，但是它使用了
return (o);
case'?':
switch (optid)
把选项处理整合进客户端程序
exit（0）;
my_print_help（my_opts)；/*输出帮助消息*/
第7章用C语言编写MySQL程序
char
要，把其他情况添加到get_one_option（）里的switch（）语句中（稍后手
，那么可以写成-p或-pyour_pass。MySQL 客户端程序通常允许你在
那么可以把这个选项指定为--password或--password=your_pass;
/*用于strdup（）*/
/*服务器主机（默认为localhost）*/
￥
端口号(使用内建值）
用户名（默认为login name）
*
我
---
## Page 269
get_one_option (int optid, const struct my_option *opt, char *argument)
static my_bool
print_error (MYsQL *conn, char *message)
static void
static struct my_option my_opts[] =
static const char *client_groups[]=（“client",NULL};
static MYSQL *conn;
static unsigned int opt_flags = 0;
static
static char *opt_socket_name=NULL;
case'?':
switch (optid)
fprintf (stderr,
GET_STR,REQUIRED_ARG,O,
GET_STR,REQUIRED_ARG,O,0,
("socket"
GET_UINT,
(uchar
GET_STR,
GET_STR,REQUIRED_ARG,0，
GET_NO_ARG,
"port",
NULL,
("help",
if(!argument)
exit（0）;
my_print_help (my_opts);
fprintf (stderr,
else
user"
(aure).dnpas=promsseddo
ask_password=1;
char
print_error (NULL,"could not allocate password buffer");
NULL,
REQUIRED_ARG,
'P
'h',
&opt_user_name,
21
mysql_errno (conn),mysql_sqlstate (conn),mysql_error (conn));
&opt_socket_name,
sou-doy
NULL,
"Portnumber",
"User name"
"Host
"Display this help and exit",
"%s\n",message);
"Socket
"Password",
"Error%u(%s）:%s\n",
to connectto"
0，0,0,0，0,0}
path"
0，
NULL，
0，
/*复制密码，改写原有密码*/
/*输出帮助消息*/
/*
/*密码*/
0，0，
NULL,
0，0，0，
如果未指定值，则在随后提示输入它*/
NULL
GET_NO_ARG,NO_ARG,O,O,
0，
NULL,
1*选项信息结构
/*指向连接处理器的指针
1*是否提示输入密码*/
*
￥
01
0）
0}
套接字名（使用内建值）*/
连接标志（为空)
7.3
*
出错处理和命令选项处理
*/
*/
0，0，
0，
249
---
## Page 270
250
int opt_err;
mysql_close (conn);
/*断开与服务器的连接，终止客户端开发库*/
*如有必要则提示输入密码*/
if ((opt_err = handle_options （&argc,&argv,my_opts;get_one_option)))
f
load_defaults("my",
return(0);
mysql_close（conn);
print_error
exit(1);
print_error
exit(1）;
print_error
--argc; ++argv;
opt_db_name = argv[0];
exit（opt_err);
初始化连接处理器
第7章用C语言编写MySQL程序
·．在此处执行语句和处理结果·.．*/
连接服务器*/