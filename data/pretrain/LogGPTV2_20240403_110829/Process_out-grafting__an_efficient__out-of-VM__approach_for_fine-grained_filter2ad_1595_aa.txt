title:Process out-grafting: an efficient "out-of-VM" approach for fine-grained
process execution monitoring
author:Deepa Srinivasan and
Zhi Wang and
Xuxian Jiang and
Dongyan Xu
Process Out-Grafting: An Efﬁcient “Out-of-VM” Approach
for Fine-Grained Process Execution Monitoring
Deepa Srinivasan
NC State University
PI:EMAIL
Zhi Wang
Xuxian Jiang
Dongyan Xu
NC State University NC State University
PI:EMAIL
PI:EMAIL
Purdue University
PI:EMAIL
ABSTRACT
Recent rapid malware growth has exposed the limitations of
traditional in-host malware-defense systems and motivated
the development of secure virtualization-based out-of-VM
solutions. By running vulnerable systems as virtual ma-
chines (VMs) and moving security software from inside the
VMs to outside, the out-of-VM solutions securely isolate the
anti-malware software from the vulnerable system. However,
the presence of semantic gap also leads to the compatibil-
ity problem in not supporting existing defense software. In
this paper, we present process out-grafting, an architectural
approach to address both isolation and compatibility chal-
lenges in out-of-VM approaches for ﬁne-grained process-level
execution monitoring. Speciﬁcally, by relocating a suspect
process from inside a VM to run side-by-side with the out-
of-VM security tool, our technique eﬀectively removes the
semantic gap and supports existing user-mode process mon-
itoring tools without any modiﬁcation. Moreover, by for-
warding the system calls back to the VM, we can smoothly
continue the execution of the out-grafted process without
weakening the isolation of the monitoring tool. We have
developed a KVM-based prototype and used it to natively
support a number of existing tools without any modiﬁca-
tion. The evaluation results including measurement with
benchmark programs show it is eﬀective and practical with
a small performance overhead.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection - In-
vasive Software
General Terms
Security
Keywords
Virtualization, Process Monitoring, Semantic Gap
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
1.
INTRODUCTION
Computer malware (e.g., viruses and trojans), in its seem-
ingly inﬁnite evolution of functionality and forms, is one of
the largest threat that end users and enterprises are combat-
ing daily. A recent report from McAfee [3] shows a rapidly
exploding malware growth with new record numbers “ac-
complished” in the last year. Speciﬁcally, as highlighted in
the report, “McAfee Labs identiﬁed more than 20 million
new pieces of malware in 2010,” which translates into nearly
55,000 new malware samples discovered every day! More-
over, “of the almost 55 million pieces of malware McAfee
Labs has identiﬁed and protected against, 36 percent of it
was written in 2010!” This alarming trend reveals the dis-
turbing fact that existing malware defenses fail to eﬀectively
contain the threat and keep up with the malware growth.
Especially, if we examine traditional anti-malware tools,
they are typically deployed within vulnerable systems and
could be the ﬁrst targets once malware infect a computer
system.
In other words, though these traditional in-host
tools are valuable in monitoring system behavior or detect-
ing malicious activities (with their native access inside the
systems), they are fundamentally limited in their isolation
capability to prevent themselves from being infected in the
ﬁrst place. To address that, researchers propose out-of-VM
approaches [8, 15, 20, 21, 30, 31, 37], which change the mal-
ware defense landscape by leveraging recent advances of vir-
tualization to run vulnerable systems as VMs and then mov-
ing anti-malware tools from inside the systems to outside.
By enlisting help from the underlying virtualization layer (or
hypervisor), out-of-VM approaches can eﬀectively overcome
the isolation challenge that encumbers traditional in-host
approaches. However, by separating anti-malware software
from the untrusted systems, they also naturally encounter
the well-known semantic gap challenge: these anti-malware
software or tools – as out-of-VM entities – need to monitor
or semantically infer various in-VM activities.
In the past several years, researchers have actively exam-
ined this semantic-gap challenge and implemented a number
of introspection-based systems [12, 21] to mitigate it. For ex-
ample, VMwatcher [21] proposes a guest view casting tech-
nique to apply the knowledge of inner guest OS kernel, es-
pecially the semantic deﬁnition of key kernel data structure
and functionality, to bridge the semantic gap. Virtuoso [12]
aims to automate the process of extracting introspection-
relevant OS kernel information (by monitoring the execu-
tion of an in-guest helper program) for the construction of
introspection-aware security tools. Though these systems
make steady progresses in bridging the semantic gap, the
363gap still inevitably leads to a compatibility problem. In par-
ticular, none of these introspection-based systems is compat-
ible with existing anti-malware software (including various
system/process monitoring tools) that were designed to run
within a host. Due to the lack of compatibility, signiﬁcant ef-
fort and advanced mechanisms [12, 21] are still needed to re-
engineer these tools and adapt them for diﬀerent guest OSs.
This is especially concerning when ﬁne-grained monitoring
of individual processes requires intercepting a wide variety
of events (e.g. user-library function calls or system calls)
and interpreting them meaningfully (e.g. to determine their
arguments). Worse, these introspection-based solutions are
sensitive to guest OS versions or variants and to some extent
fragile to any change or patch to the guest OS. As a result,
this compatibility problem severely limits the eﬀectiveness
and the adoption of these out-of-VM approaches.
In this paper, we present process out-grafting, an archi-
tectural approach that addresses both isolation and com-
patibility challenges for out-of-VM, ﬁne-grained user-mode
process execution monitoring. Similar to prior out-of-VM
approaches, out-grafting still conﬁnes vulnerable systems as
VMs and deploys security tools outside the VMs. How-
ever,
instead of analyzing the entire VM on all running
processes, out-grafting focuses on each individual process
for ﬁne-grained execution monitoring. More importantly,
our approach is designed to naturally support existing user-
mode process monitoring tools (e.g., strace, ltrace, and gdb)
outside of monitored VMs on an internal suspect process,
without the need of modifying these tools or making them
introspection-aware (as required in prior out-of-VM approaches).
For simplicity, we use the terms “production VM” and “secu-
rity VM” respectively to represent the vulnerable VM that
contains a suspect process and the analysis VM that hosts
the security tool to monitor the suspect process.
To enable process out-grafting, we have developed two
key techniques. Speciﬁcally, the ﬁrst technique, on-demand
grafting, relocates the suspect process on demand from the
production VM to security VM (that contains the process
monitoring tool as well as its supporting environment). By
doing so, grafting eﬀectively brings the suspect process to
the monitor for ﬁne-grained monitoring, which leads to at
least two important beneﬁts: (1) By co-locating the suspect
process to run side-by-side with our monitor, the semantic
gap caused by the VM isolation is eﬀectively removed. In
fact, from the monitor’s perspective, it runs together with
the suspect process inside the same system and based on its
design can naturally monitor the suspect process without
any modiﬁcation. (2) In addition, the monitor can directly
intercept or analyze the process execution even at the gran-
ularity of user-level function calls, without requiring hyper-
visor intervention, which has signiﬁcant performance gains
from existing introspection-based approaches.
To still eﬀectively conﬁne the (relocated) suspect process,
our second technique enforces a mode-sensitive split execu-
tion of the process, thus the name split execution. Speciﬁ-
cally, only the user-mode instructions of the suspect process,
which is our main focus for ﬁne-grained monitoring, will be
allowed to execute in the security VM; all kernel-mode exe-
cution that requires the use of OS kernel system services is
forwarded back to the production VM. By doing so, we can
not only maintain a smooth continued execution of the sus-
pect process after relocation, but ensure its isolation from
our monitoring tools. Particularly, from the suspect process’
perspective, it is still logically running inside the production
VM. In the meantime, as the suspect process physically runs
inside the security VM, the monitoring overhead will not be
inﬂicted to the production VM, thus eﬀectively localizing
monitoring impact within the security VM.
We have implemented a proof-of-concept prototype on
KVM/ Linux (version kvm-2.6.36.1) and tested it to out-
graft various processes from diﬀerent VMs running either
Fedora 10 or Ubuntu 9.04. We have evaluated it with a
number of diﬀerent scenarios, including the use of traditional
process monitoring tools, i.e., strace/ltrace/gdb, to monitor
an out-grafted process from another VM. Note that these
ﬁne-grained process monitoring tools cannot be natively sup-
ported if the semantic gap is not eﬀectively removed. More-
over, we also show that advanced (hardware-assisted) mon-
itoring tools [26] can be deployed in the security VM to
monitor a process in the production VM, while they may
be inconvenient or even impossible to run inside the pro-
duction VM. The performance evaluation with a number of
standard benchmark programs shows that our prototype im-
plementation incurs a small performance overhead and the
monitoring overhead is largely conﬁned within the security
VM, not the production VM.
The rest of the paper is organized as follows: we ﬁrst
present the system design in Section 2. We then describe
the implementation and evaluation in Sections 3 and 4, re-
spectively. We discuss possible limitations and explore fu-
ture improvements in Section 5. Finally, we describe related
work in Section 6 and conclude the paper in Section 7.
2. SYSTEM DESIGN
2.1 Goals and Assumptions
Process out-grafting is a virtualization-based approach that
advances current out-of-VM approaches for ﬁne-grained process-
level execution monitoring.
It is introduced to eﬀectively
support existing user-mode process-level monitoring tools
while removing the inherent semantic gap in out-of-VM ap-
proaches. To achieve that, we have three main design goals.
• Isolation Process out-grafting should strictly isolate
process monitoring tools from the untrusted process.
In other words, the untrusted process will be architec-
turally conﬁned without unnecessarily exposing moni-
toring tools. This essentially achieves the same isola-
tion guarantee as existing out-of-VM approaches.
• Compatibility Our solution should naturally support
existing ﬁne-grained process monitoring tools (e.g., strace
/ltrace/gdb) without modiﬁcation. Accordingly, all re-
quired semantic information by these tools need to be
made available in the security VM.
• Eﬃciency
Process out-grafting needs to eﬃciently
support existing process monitoring tools without much
additional performance overhead caused by isolation.
Due to its process-level granularity, we also need to lo-
calize the monitoring overhead to the monitored pro-
cess, without unnecessarily impacting the production
VM as a whole.
In this work, we assume no trust from the suspect process
being monitored. An attacker may also introduce malicious
software (either user-mode or kernel-mode) to compromise
the production VM. However, we assume the presence of a
364Production VM
Technique I: On−demand Grafting
Suspect Process
Suspect Process
Non−executable
Executable
(stub)
User
Kernel
host−physical
memory frames
helper  module
Hypervisor (e.g., KVM)
Technique II: Split Execution
Figure 1: An Overview of Process Out-Grafting
Security VM
Monitor 
User
Kernel
trusted hypervisor [25, 40], which properly enforces the iso-
lation between running VMs. By focusing on ﬁne-grained
user-mode process-level monitoring, our system does not ad-
dress OS kernel monitoring. But a compromised OS kernel
should not aﬀect our design goals. Also, we do not attempt
to hide the fact that an out-grafted process or malware is
being actively monitored. But we do guarantee that the
monitoring process itself cannot be disabled by the moni-
tored process.
Figure 1 shows the overview of our system with two key
techniques: on-demand grafting and split execution. Before
presenting each technique in detail, we deﬁne some termi-
nology used throughout the paper. Our system is designed
to work with hardware virtualization extensions available
in commodity CPUs, including support for eﬃcient memory
virtualization. Leveraging the underlying hardware support,
a CPU can enter either host or guest mode. The hypervi-
sor code runs directly in host mode while the VM runs in
guest mode. In a virtualized system, there are three diﬀer-
ent kinds of memory addresses: A guest-virtual address is
the virtual address observed by a running process inside the
guest; a guest-physical address is the physical addresses seen
by the guest when it runs in the guest mode; a host-physical
address is the actual machine address seen by the CPU hard-
ware. While executing in guest-mode, a VM never sees the
host-physical addresses directly.
We point out that when memory virtualization support is
enabled, the CPU utilizes an additional level of page ta-
bles managed by the hypervisor to translate from guest-
physical to host-physical addresses (i.e., the Nested Page
Table (NPT) [7] in AMD CPUs or the Extended Page Table
(EPT) [18] in Intel CPUs). Since our current prototype uses
an Intel processor, we simply use the term EPT to represent
both. With that, the guest OS is free to manage its own
guest-physical page frame allocation, with no intervention
from the hypervisor. The hypervisor controls only the EPT
to allocate host-physical memory, as needed for the guest.
While the CPU EPT support signiﬁcantly improves perfor-
mance for the running VM [6, 7, 18], such support also poses
challenges in our design and some of them will be highlighted
below as we describe our system.
2.2 On-demand Grafting
Our ﬁrst key technique is developed to re-locate a sus-
pect process running in a production VM to a security VM
for close inspection. Speciﬁcally, it enables eﬃcient, native
inspection from existing process-level monitoring tools by
avoiding unnecessary hypervisor intervention and eliminat-
ing the inherent semantic gap from VM isolation. Relocat-
ing a suspect process can be initiated as determined by an
administration policy, say a process can be brought under
scrutiny either periodically, at random time intervals or us-
ing certain event triggers. The monitoring duration can be
arbitrary, including the entire lifetime of a process. Regard-
less of the out-grafting policy, in this paper, we mainly focus
on the mechanisms for the out-grafting support.
In order to out-graft a running process, we will need to
ﬁrst accurately locate it (e.g. using the base address of its
page table directory). Once it is located, the hypervisor
can then redirect or transfer its execution from the produc-
tion VM into the security VM. In the following, we examine
when, what, and how to transfer the suspect process execu-
tion across the two VMs.