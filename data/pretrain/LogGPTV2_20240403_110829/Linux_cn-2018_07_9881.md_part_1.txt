---
author: Wilfredinni
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 6822
date: '2018-07-29 23:45:00'
editorchoice: false
excerpt: 集合是一个无序集合，没有重复元素。基本用途包括成员测试和消除重复的条目。集合对象还支持数学运算，如并集、交集、差集和对等差分。
fromurl: https://www.pythoncheatsheet.org/blog/python-sets-what-why-how
id: 9881
islctt: true
largepic: /data/attachment/album/201807/29/234501ft2btzf0fr2urv8k.jpg
permalink: /article-9881-1.html
pic: /data/attachment/album/201807/29/234501ft2btzf0fr2urv8k.jpg.thumb.jpg
related: []
reviewer: wxy
selector: ''
summary: 集合是一个无序集合，没有重复元素。基本用途包括成员测试和消除重复的条目。集合对象还支持数学运算，如并集、交集、差集和对等差分。
tags:
- Python
- 数据结构
- 集合
thumb: false
title: Python 集合是什么，为什么应该使用以及如何使用？
titlepic: true
translator: MjSeven
updated: '2018-07-29 23:45:00'
---
![](/data/attachment/album/201807/29/234501ft2btzf0fr2urv8k.jpg)
![Python Sets: What, Why and How](/data/attachment/album/201807/29/234535qyc1oymfyrjtjmtm.png)
Python 配备了几种内置数据类型来帮我们组织数据。这些结构包括列表、字典、元组和集合。
根据 Python 3 文档：
> 
> 集合是一个*无序*集合，没有*重复元素*。基本用途包括*成员测试*和*消除重复的条目*。集合对象还支持数学运算，如*并集*、*交集*、*差集*和*对等差分*。
> 
> 
> 
在本文中，我们将回顾并查看上述定义中列出的每个要素的示例。让我们马上开始，看看如何创建它。
### 初始化一个集合
有两种方法可以创建一个集合：一个是给内置函数 `set()` 提供一个元素列表，另一个是使用花括号 `{}`。
使用内置函数 `set()` 来初始化一个集合：
```
>>> s1 = set([1, 2, 3])
>>> s1
{1, 2, 3}
>>> type(s1)
```
使用 `{}`：
```
>>> s2 = {3, 4, 5}
>>> s2
{3, 4, 5}
>>> type(s2)
>>>
```
如你所见，这两种方法都是有效的。但问题是，如果我们想要一个空的集合呢？
```
>>> s = {}
>>> type(s)
```
没错，如果我们使用空花括号，我们将得到一个字典而不是一个集合。=)
值得一提的是，为了简单起见，本文中提供的所有示例都将使用整数集合，但集合可以包含 Python 支持的所有    可哈希的    hashable  数据类型。换句话说，即整数、字符串和元组，而不是*列表*或*字典*这样的可变类型。
```
>>> s = {1, 'coffee', [4, 'python']}
Traceback (most recent call last):
  File "", line 1, in 
TypeError: unhashable type: 'list'
```
既然你知道了如何创建一个集合以及它可以包含哪些类型的元素，那么让我们继续看看*为什么*我们总是应该把它放在我们的工具箱中。
### 为什么你需要使用它
写代码时，你可以用不止一种方法来完成它。有些被认为是相当糟糕的，另一些则是清晰的、简洁的和可维护的，或者是 “   Python 式的    pythonic ”。
根据 [Hitchhiker 对 Python 的建议](http://docs.python-guide.org/en/latest/):
> 
> 当一个经验丰富的 Python 开发人员（ Python 人   Pythonista ）调用一些不够 “ Python 式的   pythonic ” 的代码时，他们通常认为着这些代码不遵循通用指南，并且无法被认为是以一种好的方式（可读性）来表达意图。
> 
> 
> 
让我们开始探索 Python 集合那些不仅可以帮助我们提高可读性，还可以加快程序执行时间的方式。
#### 无序的集合元素
首先你需要明白的是：你无法使用索引访问集合中的元素。
```
>>> s = {1, 2, 3}
>>> s[0]
Traceback (most recent call last):
  File "", line 1, in 
TypeError: 'set' object does not support indexing
```
或者使用切片修改它们：
```
>>> s[0:2]
Traceback (most recent call last):
  File "", line 1, in 
TypeError: 'set' object is not subscriptable
```
但是，如果我们需要删除重复项，或者进行组合列表（与）之类的数学运算，那么我们可以，并且*应该*始终使用集合。
我不得不提一下，在迭代时，集合的表现优于列表。所以，如果你需要它，那就加深对它的喜爱吧。为什么？好吧，这篇文章并不打算解释集合的内部工作原理，但是如果你感兴趣的话，这里有几个链接，你可以阅读它：
* [时间复杂度](https://wiki.python.org/moin/TimeComplexity)
* [set() 是如何实现的？](https://stackoverflow.com/questions/3949310/how-is-set-implemented)
* [Python 集合 vs 列表](https://stackoverflow.com/questions/2831212/python-sets-vs-lists)
* [在列表中使用集合是否有任何优势或劣势，以确保独一无二的列表条目？](https://mail.python.org/pipermail/python-list/2011-June/606738.html)
#### 没有重复项
写这篇文章的时候，我总是不停地思考，我经常使用 `for` 循环和 `if` 语句检查并删除列表中的重复元素。记得那时我的脸红了，而且不止一次，我写了类似这样的代码：
```
>>> my_list = [1, 2, 3, 2, 3, 4]
>>> no_duplicate_list = []
>>> for item in my_list:
...     if item not in no_duplicate_list:
...             no_duplicate_list.append(item)
...
>>> no_duplicate_list
[1, 2, 3, 4]
```
或者使用列表解析：
```
>>> my_list = [1, 2, 3, 2, 3, 4]
>>> no_duplicate_list = []
>>> [no_duplicate_list.append(item) for item in my_list if item not in no_duplicate_list]
[None, None, None, None]
>>> no_duplicate_list
[1, 2, 3, 4]
```
但没关系，因为我们现在有了武器装备，没有什么比这更重要的了：
```
>>> my_list = [1, 2, 3, 2, 3, 4]
>>> no_duplicate_list = list(set(my_list))
>>> no_duplicate_list
[1, 2, 3, 4]
>>>
```
现在让我们使用 `timeit` 模块，查看列表和集合在删除重复项时的执行时间：
```
>>> from timeit import timeit
>>> def no_duplicates(list):
...     no_duplicate_list = []
...     [no_duplicate_list.append(item) for item in list if item not in no_duplicate_list]
...     return no_duplicate_list
...
>>> # 首先，让我们看看列表的执行情况：
>>> print(timeit('no_duplicates([1, 2, 3, 1, 7])', globals=globals(), number=1000))
0.0018683355819786227
```
```
>>> from timeit import timeit
>>> # 使用集合:
>>> print(timeit('list(set([1, 2, 3, 1, 2, 3, 4]))', number=1000))
0.0010220493243764395
>>> # 快速而且干净 =)
```
使用集合而不是列表推导不仅让我们编写*更少的代码*，而且还能让我们获得*更具可读性*和*高性能*的代码。
注意：请记住集合是无序的，因此无法保证在将它们转换回列表时，元素的顺序不变。