SpeechRecognition provides Speech Recognition Manager interfaces.
There are several frameworks that, although usable from other environments, are primarily for use by
Carbon applications and are considered part of the Carbon environment. These include the Application
Services, Core Foundation, and Core Services frameworks. Thus, Carbon provides procedural interfaces
both for GUI development and for lower-level development involving manipulation of system resources,
event handling, and data management.
From a programmer's standpoint, it is generally easier to create an application from scratch using Cocoa (see
Section 2.11.4) rather than Carbon, since Cocoa automatically provides several features that would require
explicit coding in Carbon. For example, Cocoa objects by default provide many aspects of a well-behaved
Mac OS X application: document management, window management, opening and saving of documents,
pasteboard behavior, and so on. Similarly, the Core Data framework (see Section 2.11.4.2), which allows
modeling and lifecycle management of data, is accessible only to Cocoa programs.
2.11.4. Cocoa
The Cocoa environment provides object-oriented APIs for rapid application development in the Objective-C
and Java programming languages.[50] Cocoa is both a collection of APIs and a set of visual tools that are
particularly useful for rapid prototyping, data modeling, and overall reduction in design and development
efforts. Examples of such tools include the Interface Builder and Xcode's class- and data-modeling tools.
Interface Builder allows a programmer to create most (and often all) of an application's user interface
graphically rather than programmatically. The class-modeling tool allows the programmer to visualize,
browse, and annotate classes in terms of class relationships and the protocols they implement. The data-
modeling tool allows the programmer to visually design a schema for application data in terms of entities
that constitute the data and the relationships between them.
[50] It is possible for other programming or scripting languages to have bindings to Cocoa. For
example, it is possible to use Cocoa interfaces from AppleScript.
Apple recommends Cocoa as the preferred way to develop typical applications on Mac OS X. Between
Cocoa and Carbon, you should use Cocoa unless your desired functionality is available only through
Carbon, you must have legacy compatibility, or you must use C-based procedural interfaces.
A Cocoa application can call Carbon APIs. It is possible, and common, for an application to be linked
against both the Carbon and Cocoa frameworks. iDVD, iMovie, and Safari are examples of such
applications.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 48 of 80
Cocoa is an important inheritance from NeXT, as indicated by the various names with the "NS" prefix in
Cocoa APIs. Many of the Cocoa APIs are largely based on OpenStep frameworks. Cocoa primarily consists
of two object-oriented frameworks: Foundation (Foundation.framework) and Application Kit
(AppKit.framework). Several other frameworks add specific functionality to Cocoa, such as Core Data,
PDF Kit, and QuickTime Kit.
The Foundation framework provides fundamental classes and methods for bundle access, data management,
file access, interprocess communication, memory management, network communication, process
notification, and various low-level features.
The Application Kit provides classes that implement user-interface elements such as windows, dialogs,
controls, menus, and event handling.
Core Data makes object lifecycle management easier by providing classes and methods for data
management.
Cocoa is effectively an umbrella framework consisting of the Foundation, Application Kit, and Core Data
subframeworks. The dynamic library inside Cocoa.framework is a wrapper that links to these frameworks.
Consequently, linking with Cocoa.framework links in these (effective) subframeworks. However, in this
particular case, the subframeworks are also available for individual linking. This is not the case with most
umbrella frameworks, where it is illegal to attempt to link to a specific subframework.
2.11.4.1. Nib Files
When creating user interfaces with the Interface Builder, you will often come across nib files. As we saw
earlier, the term stands for NeXT Interface Builder. A nib file contains descriptions of some or all of an
application's user interface along with references to any resources (e.g., images and audio) that the interface
may use. It is essentially an archive. Usually there is a "main" nib file that contains an application's main
menu and other user-interface elements intended to appear when the application starts. During an
application's execution, its nib files are opened and user-interface objects are unarchived. From the
standpoint of the Model-View-Controller (MVC) design pattern, nib files define the view part of an
application, while also defining connections into controller instances.
The nibtool command-line program can be used to print, update, and verify the contents of a nib file.
Figure 226 shows an example.
Figure 226. Using nibtool to view the contents of a nib file
$ nibtool -a /Applications/Utilities/Terminal.app/Contents/\
Resources/English.lproj/Terminal.nib
/* Objects */
Objects = {
"Object 1" = {
Class = "NSCustomObject";
CustomClass = "TerminalApp";
Name = "File's Owner";
className = "TerminalApp";
};
...
}; /* End Objects */
/* Object Hierarchy */
Hierarchy = {
"Object 1  (File's Owner)" = {
"Object -1
 (First Responder)";
"Object 37 
(MainMenu)" = {
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 49 of 80
"Object 12 
(Windows)" = {
...
}; /* End Hierarchy */
/* Connections */
Connections = {
"Connection 89" = {
Action = "cut:";
Class = "NSNibControlConnector";
Source = "3";
};
...
}; /* End Connections */
/* Classes */
Classes = {
IBClasses = (
{
ACTIONS = {enterSelection = id; findNext = id; findPanel = id;
findPrevious = id; };
CLASS = FindPanel;
LANGUAGE = ObjC;
OUTLETS = {findPanel = id; };
SUPERCLASS = NSObject;
},
...
2.11.4.2. Core Data
Core Data is a Cocoa framework that facilitates data-model-driven application development through fine-
grained management of data objects.
Core Data's primary benefits are for applications that have a highly structured data model to begin with.[51]
In such cases, the data model can be represented by a schema, which in turn can be built using graphical
tools in Xcode. Therefore, instead of defining data structures programmatically, developers can create visual
descriptionsor modelsof data objects.[52] The application accesses the data through the Core Data
framework, which is responsible for creating and managing instances of the data model.
[51] Core Data is ideally suited for managing the data model of an MVC application.
[52] It is still possible to create models programmatically.
Examples of applications that are good candidates for Core Data include Mail, iTunes, and Xcode. Each of
these applications uses highly structured data: mailbox files, music libraries, and project files, respectively.
Core Data offers several benefits to the developer, such as those listed here.
It manages data objects in memory and on disk. It can automatically serialize data to disk, while
supporting multiple formats for persistent storage of data, namely, Binary, SQLite, and XML.
It supports validation of property values. For example, properties in a data model can be validated for
minimum values, maximum values, string lengths, and so on.
It supports automatic undo and redo of data manipulations by tracking changes in the application's
object graph,[53] relieving the developer of this responsibility.[54]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 50 of 80
[53] In this context, an object graph is a collection of data objects (entities) with references
to one another (relationships).
[54] Even without Core Data, Cocoa applications can use the NSUndoManager class to
record operations for undo and redo. However, doing so requires additional work from
the developer.
It supports synchronizing data changes with user-interface elements. It uses integration with Cocoa
Bindings for this purpose. Moreover, it can group and filter in-memory changes.
It enhances scalability by efficiently managing object lifecyclesdata objects that are not currently
needed by the application do not reside in memory. For objects that are not memory-resident,
placeholder objects are maintained with appropriate reference counting. Accessing a placeholder
object results in Core Data fetching the actual object. This is similar to page-faulting in a virtual
memory implementation.
The file formats supported by Core Data vary in several properties: atomic access, human readability,
performance, and scalability. For example, SQLite offers the best performance and is the most scalable.
However, it is not human readable. XML is slower but is human readable.
Since Core Data's essence is model-driven development, the most critical abstraction from the developer's
standpoint in Core Data is the model, which is akin to an entity-relationship (ER) diagram. A model contains
the following key elements.
Entities are roughly equivalent to classes in that they represent types of objects. The developer may
specify a class name to represent an entity at runtime. Like classes, entities support inheritance.[55]
Each entity can have certain properties: attributes, relationships, and fetched properties. An attribute is
similar to class data. Attributes can have associated validation rules and default values. They can be
optional or even transient.[56] Relationships are references from one entity to another. A relationship
can be one-to-one or one-to-many. A fetched property is a reference from an entity to a query.
[55] Entity inheritance in Core Data is independent of class inheritance.
[56] A transient attribute is maintained in memory for convenience or performance
reasons.
Predefined queries are essentially query templates that can be instantiated at runtime.
Configurations allow for advanced file management by mapping entities to persistent stores. A single
entity can exist in multiple configurations.
Core Data applications typically use Core Data APIs to load models from storage into memory. The generic
data object in Core Data is an instance of the NSManagedObject class. It is also a required superclass for any
custom data object classes. As shown in Figure 227, the following primary components of the Core Data
architecture interact in a logical "stack"[57] at runtime.
[57] Each document in a document-based application has its own Core Data stack.
Figure 227. A Core Data stack
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 51 of 80
A Bindings Controller is responsible for transferring in-memory data changes to the user interface
through Cocoa Bindings.
A Managed Object Context sits atop the Persistent Store Coordinator. It provides in-memory scratch
space for loading data objects from disk, making changes to the objects, and either rejecting or saving
those changes. It tracks all such changes and provides undo/redo support.
A Persistent Store Coordinator exists for each Managed Object Context and, in turn, for each Core
Data stack. It presents a unified view of one or more underlying persistent stores. For example, it can
merge the contents of multiple data files to present them as a single store to its Managed Object
Context.
If Core Data is used judiciously, it can significantly reduce the amount of code that a developer would have
to otherwise write.
2.11.5. WebObjects
WebObjects is an independent Apple productit is not a part of Mac OS X. It provides an application
environment for developing and deploying Java server applications and Web Services. Using WebObjects
frameworks and tools, developers can also create user interfaces for various types of web content, including
database-driven and dynamically generated content. As we noted in Chapter 1, several Apple web sites are
implemented using WebObjects.
2.11.6. Java
The Java environment is a core component of Mac OS X. It includes the Java runtime and the Java
Development Kit (JDK), which are accessible both through the command line and through Xcode. The Java
runtime includes the HotSpot Java virtual machine (JVM) with just-in-time (JIT) bytecode compilation. It
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 52 of 80
can also treat Java archivesor jar filesas shared libraries. The Java Virtual Machine framework
(JavaVM.framework) contains Java classes in jar files, command-line programs such as java and javac,[58]
headers, documentation, Java Native Interface (JNI) libraries, and support libraries.
[58] Besides javac, Mac OS X includes the Jikes open source Java compiler from IBM.
Cocoa includes Java packages corresponding to the Foundation and the Application Kit frameworks.
Therefore, Cocoa applications can be created using Java as the programming language instead of Objective-
C. Moreover, Java programs can call Carbon and other frameworks via JNIa standard programming
interface for writing Java native methods and embedding the Java virtual machine into native applications.
In particular, Java applications can use Mac OS X native technologies such as QuickTime and Carbon. Since
the Swing implementation on Mac OS X generates native Mac OS X user-interface elements, Swing-based
Java applications have the same look-and-feel as Cocoa applications written using Objective-C.
The Cocoa-Java programming interface is deprecated in Mac OS X versions later than 10.4. Apple
announced in mid-2005 that Cocoa features introduced in newer versions of Mac OS X will not be added to
the Cocoa-Java API, requiring the Objective-C Cocoa API to employ the new features.
Although Java is considered an application environment, the Java subsystem can itself be represented as
different layers, as depicted in Figure 21. For example, the JVM along with the core JDK packages are
analogous to the Core Services layer. In fact, the JVM conceptually provides the combined functionality of a
computer system's hardware and the operating system kernel.
2.11.7. QuickTime
QuickTime's functionality is available to applications through various APIs such as those listed here.
The Carbon QuickTime API provides an extensive procedural C-based interface.
 Higher-level Cocoa classes such as NSMovie and NSMovieView provide a limited subset of
QuickTime's functionality.
The QuickTime Kit (QTKit.framework) Cocoa framework was introduced in Mac OS X 10.4 to
provide more comprehensive native access to QuickTime from Cocoa programs.
2.11.8. Classic
Classic is a binary compatibility environment for running unmodified Mac OS 9 applications on the
PowerPC version of Mac OS X. Classic functionality is provided through a combination of the following
components.
 A core service resides as the Classic Startup.app application bundle
in /System/Library/CoreServices/. The bundle contains a virtualizer program called
truBlueEnvironment.
 A Mac OS 9 installation resides in /System Folder/ by default.
Special support exists in the Mac OS X kernel for the Classic environment.
Classic Startup is a Mach-O application that runs Mac OS 9 within its address space. It provides a hardware
abstraction layer between Mac OS 9 and Mac OS X by virtualizing traps, system calls, and interrupts. It runs
in a protected memory environment, with multiple Mac OS 9 processes within it layered on top of a single
Mac OS X BSD process. Each Carbon application in Mac OS 9 has its own Carbon Process Manager
process. In this sense, Classic support in Mac OS X is essentially "Mac OS 9 in a process." However, note
that the Classic Startup application itself is multithreaded.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 53 of 80
In certain ways, Classic is "more" than Mac OS 9, since its integration with Mac OS X allows sharing of
resources, as illustrated by the following examples.
 Fonts stored in the Classic system folder's Fonts subdirectory are shared with Mac OS X, but Mac OS
X fonts are not available to Classic.
AppleScript running within Classic can communicate with Mac OS X applications.
Classic support is fully integrated with the Finder and other Mac OS X application environments. In
particular, you can copy and paste as well as drag and drop between Classic and Mac OS X. However,
Mac OS 9 applications retain their original look-and-feeltheir user-interface elements do not look like
Mac OS X's.
Classic can use volumes of any file system type that is supported by Mac OS X, since it shares files
through the host operating system.
Classic networking is largely integrated with Mac OS X networking, allowing various types of
networking devices, IP addresses, and IP ports to be shared between Mac OS X and Classic. Whereas
Carbon provides a limited Open Transport implementation built atop BSD sockets, Classic provides a
complete Open Transport protocol stack implementation.
Classic Startup is not an emulatorit is a virtualizer. Nevertheless, it allows both 68K-based Mac OS 9
applications and PowerPC-based CFM applications[59] to run under Mac OS X. There is emulation involved
in running 68K code, but that emulation was part of Mac OS 9 and remains unchanged.
[59] Classic does not support CFM-68Kthe 68K version of CFM.
As we saw in Section 2.11.3.1, another legacy runtime environment is provided by the CFM, which uses
PEF binaries.
Many APIs
Depending on the particular application environment you program in, you may often have to
use different, environment-specific APIs for performing similar tasks. In some cases, it may
also be possible to use some APIs from multiple environments in a single application. Let us
consider the example of launching an application.
At the lowest level, a process is tied to a Mach task, which should not be directly created by
user programs. At the Unix system-call level, a fork() and exec() sequence is normally used
to run an application in a new process. However, typical Mac OS X applications do not use
fork() and exec() directly but use the Launch Services framework to launch applications or
to "open" documents. In particular, the Finder uses Launch Services to map document types to
applications that can handle those types. Launch Services itself calls fork() and exec() to run
applications. Cocoa applications can launch applications using the NSWorkSpace class, which
in turn calls Launch Services.
2.11.9. Rosetta
The x86 version of Mac OS X uses a binary translation process called Rosetta that allows PowerPC
executablesboth CFM and Mach-Oto run on x86-based Macintosh computers.
Like Classic, Rosetta is meant as a technology devised to help transition from one platform to another. It is
limited in the type of executables it supports. Examples of PowerPC executables it does not support include
the following:
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 54 of 80
G5-specific executables
Kernel extensions
Programs that communicate with one or more kernel extensions that are available only on PowerPC
systems
Java applications that use the JNI