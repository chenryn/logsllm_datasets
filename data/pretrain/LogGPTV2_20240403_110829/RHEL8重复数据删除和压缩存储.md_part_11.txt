:::
此流程将系统设置配置为在测试过程中获得最佳 VDO 性能。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
测试超过特定测试中列出的范围可能会导致因为一般结果导致测试时间丢失。
例如，VDO 测试描述了一个测试，它执行随机读取的 100 GiB
地址范围。要测试一组 500 GiB，您必须相应地增加为 VDO 块映射缓存分配的
RAM 量。
:::
::: orderedlist
**流程**
1.  确定您的 CPU 在最高级别的性能设置中运行。
2.  如果可能，使用 BIOS 配置或 Linux `cpupower`{.literal} 实用程序禁用
    CPU 频率扩展。
3.  如果可能，请为 CPU 启用动态处理器频率调整（Turbo Boost 或者 Turbo
    Core）。此功能在测试结果中引入了一些变化，但提高了整体性能。
4.  文件系统可能会对性能有唯一影响。它们通常会偏移性能测量，从而使隔离
    VDO 对结果的影响变得更加困难。
    如果需要，测量原始块设备的性能。如果无法做到这一点，请格式化在目标实施中使用
    VDO 所需文件系统的设备。
:::
:::
:::
::: section
::: titlepage
# []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#creating-a-vdo-volume-for-performance-testing_testing-vdo-performance}创建用于性能测试的 VDO 卷 {.title}
:::
此流程在 512 GiB 物理卷中创建一个 VDO 卷，逻辑卷大小为 1 TiB，用于测试
VDO 性能。
::: itemizedlist
**流程**
-   创建 VDO 卷：
    ``` screen
    # vdo create --name=vdo-test \
                 --device=/dev/sdb \
                 --vdoLogicalSize=1T \
                 --writePolicy=policy \
                 --verbose
    ```
    ::: itemizedlist
    -   使用到块设备的路径替换 `/dev/sdb`{.literal}。
    -   要在异步存储之上测试 VDO `async`{.literal} 模式，请使用
        `--writePolicy=async`{.literal} 选项创建一个异步卷。
    -   要在同步存储之上测试 VDO `同步`{.literal} 模式，请使用
        `--writePolicy=sync`{.literal} 选项创建一个同步卷。
    :::
:::
:::
::: section
::: titlepage
# []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#cleaning-up-the-vdo-performance-testing-volume_testing-vdo-performance}清理 VDO 性能测试卷 {.title}
:::
这个过程删除用于从系统中测试 VDO 性能的 VDO 卷。
::: itemizedlist
**先决条件**
-   系统中存在 VDO 测试卷。
:::
::: itemizedlist
**流程**
-   从系统中删除 VDO 测试卷：
    ``` screen
    # vdo remove --name=vdo-test
    ```
:::
::: itemizedlist
**验证步骤**
-   验证卷是否已被删除：
    ``` screen
    # vdo list --all | grep vdo-test
    ```
    这个命令不应该列出 VDO 测试分区。
:::
:::
::: section
::: titlepage
# []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#testing-the-effects-of-i-o-depth-on-vdo-performance_testing-vdo-performance}测试 I/O 深度对 VDO 性能的影响 {.title}
:::
这些测试决定了为 VDO 配置生成最佳吞吐量和最低延迟的 I/O 深度。I/O
深度代表 `fio`{.literal} 工具一次提交的 I/O 请求数。
由于 VDO 使用 4 KiB 扇区大小，因此测试在 4 KiB I/O 操作以及
1、8、16、32、64、128、256、512 和 1024 的 I/O 深度执行四级测试。
::: section
::: titlepage
## []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#testing-the-effect-of-i-o-depth-on-sequential-100-reads-in-vdo_testing-the-effects-of-i-o-depth-on-vdo-performance}测试 I/O 深度对 VDO 中顺序 100% 读取的影响 {.title}
:::
此测试决定了在不同 I/O 深度值的 VDO 卷中后续的 100% 读取操作如何执行。
::: orderedlist
**流程**
1.  创建一个新的 VDO 卷。
    详情请查看 ["创建用于性能测试的 VDO
    卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#creating-a-vdo-volume-for-performance-testing_testing-vdo-performance "创建用于性能测试的 VDO 卷"){.xref}。
2.  通过在测试卷中执行写入 `fio`{.literal}
    作业来预先填充测试可访问的区域：
    ``` screen
    # fio --rw=write \
          --bs=8M \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --thread \
          --direct=1 \
          --scramble_buffers=1
    ```
3.  记录所报告吞吐量和等待时间的 100% 读取结果：
    ``` screen
    # for depth in 1 2 4 8 16 32 64 128 256 512 1024 2048; do
      fio --rw=read \
          --bs=4096 \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --numjobs=1 \
          --thread \
          --norandommap \
          --runtime=300 \
          --direct=1 \
          --iodepth=$depth \
          --scramble_buffers=1 \
          --offset=0 \
          --size=100g
      done
    ```
4.  删除 VDO 测试卷。
    详情请查看 ["清理 VDO
    性能测试卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#cleaning-up-the-vdo-performance-testing-volume_testing-vdo-performance "清理 VDO 性能测试卷"){.xref}。
:::
:::
::: section
::: titlepage
## []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#testing-the-effect-of-i-o-depth-on-sequential-100-writes-in-vdo_testing-the-effects-of-i-o-depth-on-vdo-performance}测试 I/O 深度对 VDO 中顺序 100% 写入的影响 {.title}
:::
此测试决定了在不同 I/O 深度值的 VDO 卷中后续的 100% 写操作如何执行。
::: orderedlist
**流程**
1.  创建一个新的 VDO 测试卷。
    详情请查看 ["创建用于性能测试的 VDO
    卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#creating-a-vdo-volume-for-performance-testing_testing-vdo-performance "创建用于性能测试的 VDO 卷"){.xref}。
2.  通过执行写入 `fio`{.literal} 作业来预先填充测试可访问的区域：
    ``` screen
    # fio --rw=write \
          --bs=8M \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --thread \
          --direct=1 \
          --scramble_buffers=1
    ```
3.  为后续 100% 写入记录报告的吞吐量和延迟时间：
    ``` screen
    # for depth in 1 2 4 8 16 32 64 128 256 512 1024 2048; do
      fio --rw=write \
          --bs=4096 \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --numjobs=1 \
          --thread \
          --norandommap \
          --runtime=300 \
          --direct=1 \
          --iodepth=$depth \
          --scramble_buffers=1 \
          --offset=0 \
          --size=100g
      done
    ```
4.  删除 VDO 测试卷。
    详情请查看 ["清理 VDO
    性能测试卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#cleaning-up-the-vdo-performance-testing-volume_testing-vdo-performance "清理 VDO 性能测试卷"){.xref}。
:::
:::
::: section
::: titlepage
## []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#testing-the-effect-of-i-o-depth-on-random-100-reads-in-vdo_testing-the-effects-of-i-o-depth-on-vdo-performance}测试 I/O 深度对 VDO 中随机 100% 读取的影响 {.title}
:::
此测试决定了在不同 I/O 深度值的 VDO 卷中随机 100% 读取操作如何执行。
::: orderedlist
**流程**
1.  创建一个新的 VDO 测试卷。
    详情请查看 ["创建用于性能测试的 VDO
    卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#creating-a-vdo-volume-for-performance-testing_testing-vdo-performance "创建用于性能测试的 VDO 卷"){.xref}。
2.  通过执行写入 `fio`{.literal} 作业来预先填充测试可访问的区域：
    ``` screen
    # fio --rw=write \
          --bs=8M \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --thread \
          --direct=1 \
          --scramble_buffers=1
    ```
3.  记录随机 100% 报告的吞吐量和延迟时间：
    ``` screen
    # for depth in 1 2 4 8 16 32 64 128 256 512 1024 2048; do
      fio --rw=randread \
          --bs=4096 \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --numjobs=1 \
          --thread \
          --norandommap \
          --runtime=300 \
          --direct=1 \
          --iodepth=$depth \
          --scramble_buffers=1 \
          --offset=0 \
          --size=100g
      done
    ```
4.  删除 VDO 测试卷。
    详情请查看 ["清理 VDO
    性能测试卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#cleaning-up-the-vdo-performance-testing-volume_testing-vdo-performance "清理 VDO 性能测试卷"){.xref}。
:::
:::
::: section
::: titlepage
## []{#testing-vdo-performance_deduplicating-and-compressing-storage.html#testing-the-effect-of-i-o-depth-on-random-100-writes-in-vdo_testing-the-effects-of-i-o-depth-on-vdo-performance}在 VDO 中测试 I/O 深度对随机 100% 写入的影响 {.title}
:::
此测试决定了在不同 I/O 深度值的 VDO 卷中随机 100% 写入操作如何执行。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
您必须在每个 I/O 深度测试运行之间重新创建 VDO 卷。
:::
::: title
**流程**
:::
根据 1、2、4、8、16、64、128、256、512、1024 和 2048 的 I/O
深度值单独执行以下步骤：
::: orderedlist
1.  创建一个新的 VDO 测试卷。
    详情请查看 ["创建用于性能测试的 VDO
    卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#creating-a-vdo-volume-for-performance-testing_testing-vdo-performance "创建用于性能测试的 VDO 卷"){.xref}。
2.  通过执行写入 `fio`{.literal} 作业来预先填充测试可访问的区域：
    ``` screen
    # fio --rw=write \
          --bs=8M \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --thread \
          --direct=1 \
          --scramble_buffers=1
    ```
3.  记录随机 100% 写的吞吐量和延迟时间：
    ``` screen
    # fio --rw=randwrite \
          --bs=4096 \
          --name=vdo \
          --filename=/dev/mapper/vdo-test \
          --ioengine=libaio \
          --numjobs=1 \
          --thread \
          --norandommap \
          --runtime=300 \
          --direct=1 \
          --iodepth=depth-value
          --scramble_buffers=1 \
          --offset=0 \
          --size=100g
      done
    ```
4.  删除 VDO 测试卷。
    详情请查看 ["清理 VDO
    性能测试卷"一节](#testing-vdo-performance_deduplicating-and-compressing-storage.html#cleaning-up-the-vdo-performance-testing-volume_testing-vdo-performance "清理 VDO 性能测试卷"){.xref}。
:::
:::