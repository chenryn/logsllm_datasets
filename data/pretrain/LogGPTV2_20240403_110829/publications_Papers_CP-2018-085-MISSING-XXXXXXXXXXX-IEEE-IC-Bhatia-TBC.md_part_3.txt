Concerning the frontend application, we divided visualiza-
has in the system. Although it has a higher response time
tion into 3 distinct charts. First, we need to understand what
compared with other microservices, an administrator should
microservices have a higher variance in the response time. To
look to the remaining Figures. With Figure 6, he can see
get this data — see Figure 5 —, we opted for a boxplot chart.
that songs-ms receives invocations directly from the client,
Thiskindofgraphicallowsustohavecompressedinformation
aggr-ms and playlists-ms, so, there is a large system
in only one visualization. Figure 5 was created based on data
dependency on the songs-ms microservice. Furthermore,
extracted from our MySQL database. It is relevant to mention
we notice that the latency of songs-ms depends on who
that although we are presenting response time distributions of
is invoking it, presenting a much higher latency for client-
microservices, it is possible for the user to drill-down, and
initiated invocations. This would show that either they are
visualize the same distribution by destination function inside
invoking different functions or there is some anomaly. An
each microservice.
administrator - using our application - can then drill down
Regarding dependencies between microservices, we resort and see granular invocation data for further analysis.
to a graph. This representation allows us to present topology Thelastinformationthatanadministratorneedsisthenum-
anddependenciesbetweenmodules.InFigure6,wecaneasily berofrequestsandlatencyinthecallsbetweenmicroservices.
0040 40 40 000800 40 0p 0l 00ayl 1i 20s 3t 0 60s 0- 00ms 1600 30 20002 c00 li0 e0 t02400 20 0 200004000 160008000s 1o 20n 0g 01s 20- 0m 0 8s 00016000 4002 00000 00 40040 a00 uth-0800 m0 8u ss 00e 12r 00s 40- 00m 0s 240330 213 060 183 090 154 020 14 25 00 p 0 9l 0aylis 3t 0s 6- 0ms 60 30 30 a6 u0 h-ms90 s 1o 2 10 8n 0gs-m 15 10s 18 10 202 a1 g0 gr-24 m0 s00 300users-m 122024 828 432 0360 a4 th-m8 12 4son 1g 6s 0-ms 20 24 28 32 0 ag4 ms8 12us 1e 2rs 8-m 16s
playlists-ms
4800 0 client270300 30
s
52000 16 40
aggr-ms
6
0
90
0
gr1 -6
50
16 20
2 8 n00 4000 0 0 3 t0 0 1 u2 s8 32 28 24
(a)Frequency (b)Latency (c)LatencywithoutClient
Fig.7.Chorddiagrams
Even though songs-ms has a high response time, and is a industry and academic solutions. Additionally, we present
key module in terms of dependencies, we need to understand some work that despite not being directly related to ours, is
if the number of requests that go through songs-ms is complementary.
relevant in the overall number of requests processed by the First, concerning industrial approaches, we have software
system. To have this information, we can look to Figure 7a from Netflix. Netflix has several modules for monitoring and
and7c.Wecanseethatsongs-msisanimportantdestination instrumentation. Vector [14], is a framework that allows a
of requests, specially from client and aggr-ms. In fact, creation of dashboards with metrics, such as CPU or network
lookingtoFigure7c,wecanseethataggr-msdependencies utilization. The module forces the existence of an agent —
(songs-ms and playlists-ms) have low latencies, so named Performance Co-Pilot (PCP) —, on each host or
they are not a bottleneck. application to monitor. Another system is Atlas [15]. This
Given that Figure 7a shows the aggr-ms service makes platform is focused on big data and time series. The goal
is to apply prediction methods, to understand the evolution
roughly twice as many invocations as it gets, it leads to the
of metrics and real time analysis. Although powerful, this
conclusionthatlatencyisaresultofmultiplerequests,possibly
platform requires instrumentation of microservices. Another
serially or with low parallelism. Therefore, an administrator
very similar approach is Prometheus [16], an open-source
with these visualizations would have two possible solutions:
drill-down the boxplot of songs-ms by function, to check if monitoring solution that also requires instrumentation.
there is any offending function, and/or try to improve the way ApplicationPerformanceMonitoring(APM)tools,basedin
aggr-ms invokes dependencies. It is important to remember instrumentationoragents,allowthecreationofdashboardsand
that all this information is achievable with no instrumentation the definition of notifications to administrators, when some
or agents in the infrastructure. threshold is violated. For example, Dynatrace [3] and oth-
ers[2],[4],[5],[17]havesomefeaturesrelatedtomicroservice
When we compare our approach to current monitoring
infrastructures. However, all these tools are mostly focused
tools for microservices, we can see some benefits, as well as
on displaying information, and are much less concerned with
disadvantages. One of the disadvantages, is related to tracing.
intrusiveness than we are. Spotify uses a similar approach
We do not have the granularity that tracing offers, to under-
to Netflix. They had the need for a customized monitoring
stand the workflow of specific requests. Hence, we may miss
infrastructure that creates dashboards and time series. Once
someinformationconcerningcausalitybetweenmicroservices.
again, each machine runs an agent to send information to a
Nevertheless,ifwehaveawidespreaddistributionofrequests,
central point [18]. Additionally, there are some open-source
we can still estimate the workflow. On the other hand, our
projects, like IOVisor [19], that detects performance problems
module is far less intrusive, as it does not have the overhead
in thousands of virtual machines.
to develop instrumentation or deploy agents in the system.
Looking into academic contributions, in [20], the authors
Additionally, our solution could be implemented in legacy
givesomeguidelinesonhowtobuildandmonitoramicroser-
systemsinaveryagileway,somethingthatisprobablybeyond
vice platform. The availability of instrumentation or agents to
reach of tracing-based solutions.
collect information from hosts and applications is assumed.
In [21], the authors present a monitoring dashboard, but once
V. RELATEDWORK
again based on agents and service instrumentation.
Since our work is tangential to distinct research fields, In[22],theauthorsuseadistinctapproach,whereeachmi-
and is a very active topic, we divided related work between croservice is responsible for its own elasticity and scalability.
The modules save the information about CPU utilization and
tool in terms of automated analysis, such as critical path enu-
response times. Although this has some benefits, the authors
meration and anomaly detection, to give administrators more
do not focus on the “domino effect”, or chain reaction that
information about high level behavior. Finally, we think it
may occur as components interact.
wouldbeveryhelpfultogeneratemodelscapableofpredicting
In[23],theauthorsproposeamethodologytocreate“mon-
system and microservice capacity to help administrators with
itoring as a Service”, based on containers, where agents are
dimensioning and SLA assurance.
associatedwiththemicroservicecontainer.Inthisarchitecture,
thereisaone-on-onerelationshipbetweenagentandcontainer
ACKNOWLEDGMENT
thatmaycausesomeoverheadandscalabilityissues.Addition-
ally,monitoringisassociatedwiththecontainer,indisfavorof
This work was partially carried out under the project
the workflow that exists between modules. In [24], the access
PTDC/EEI-ESS/1189/2014 — Data Science for Non-
point of each container is changed to monitor the network.
Programmers, supported by COMPETE 2020, Portugal 2020-
Hence, it has a kind of “man-in-the-middle” approach having
POCI, UE-FEDER and FCT.
no consideration about the application.
We would also like to express our gratitude to the INCD
Our methodology is different from all the previous ones in
- Infraestrutura Nacional de Computac¸a˜o Distribu´ıda, for
at least two aspects. Some tools referred before aim to create
providing access to their computational resources.
dashboardsandnotifications,basedonthepremisethatagents
or tracing is available in the system. This kind of tools does
REFERENCES
not aim to decrease system intrusiveness, focusing only in
visualizations and data presentation. Other approaches instru-
[1] Docker. https://www.docker.com/what-docker. RetrievedJune,2018.
ment the system, creating frameworks coupled to containers, [2] NewRelic. https://newrelic.com. RetrievedMay,2018.
microservicesorthenetwork,buttheydonotgiveinformation [3] Dynatrace. https://www.dynatrace.com/platform/. RetrievedMay,2018.
about application workflows. [4] Kibana. https://www.elastic.co/products/kibana/. RetrievedMay,2018.
[5] Grafana. https://grafana.com/. RetrievedMay,2018.
Tracing, one of the most used approaches of this kind, [6] Zipkin. http://zipkin.io/. RetrievedJune,2018.
gives the capability to understand the flow of a specific [7] Opentracing. http://opentracing.io/. RetrievedMay,2018.
[8] BenjaminHSigelman,LuizAndreBarroso,MikeBurrows,PatStephen-
request. However, there are some disadvantages: developers
son,ManojPlakal,DonaldBeaver,SaulJaspan,andChandanShanbhag.
have to instrument each microservice and focus not only on Dapper,alarge-scaledistributedsystemstracinginfrastructure. Techni-
thebusinessalgorithms,butalsoonmonitoring.Unfortunately, calreport,Google,Inc,2010.
[9] Zuul. https://github.com/Netflix/zuul. RetrievedMay,2018.
this merges source code with quite distinct goals.
[10] Github – monitoring ms. https://github.com/fabiopina/monitoring ms.
Unlike previous work, our method is driven by simplicity. RetrievedJune,2018.
[11] Dockeroverlaynetwork. https://docs.docker.com/network/overlay/. Re-
It gives the ability to monitor a system, without agents, in-
trievedJune,2018.
strumentation or development overhead. Nevertheless, results [12] Zuguang Gu, Lei Gu, Roland Eils, Matthias Schlesner, and Benedikt
achieved in terms of data visualization are quite impressive, Brors. circlize implements and enhances circular visualization in r.
Bioinformatics,30(19):2811–2812,2014.
enabling system administrators to grasp crucial aspects of the
[13] Papers—ApacheJMeterTM.http://jmeter.apache.org/.Retrieved:May,
system with minimal effort. 2018.
[14] Vector. https://github.com/Netflix/vector. RetrievedMay,2018.
VI. CONCLUSIONSANDFUTUREWORK [15] Atlas. https://github.com/Netflix/atlas. RetrievedMay,2018.
[16] Prometheus. https://prometheus.io/. RetrievedJune,2018.
Monitoring and operating distributed systems is a difficult [17] Appdynamics. https://www.appdynamics.com. RetrievedMay,2018.
task for administrators. With microservice technologies this [18] Spotify. https://labs.spotify.com/2015/11/17/monitoring-at-spotify-
introducing-heroic/. RetrievedJune,2018.
task has become more complex than ever, due to elasticity
[19] Iovisor. https://www.iovisor.org/. RetrievedMay,2018.
and system dynamics. The majority of monitoring solutions [20] S.Haselbo¨ckandR.Weinreich.Decisionguidancemodelsformicroser-
were designed for older architectures, therefore lacking any vice monitoring. In 2017 IEEE International Conference on Software
ArchitectureWorkshops(ICSAW),pages54–61,April2017.
considerations regarding the new paradigm.
[21] B.MayerandR.Weinreich. Adashboardformicroservicemonitoring
In this paper we proposed a new approach for monitoring, andmanagement. In2017IEEEInternationalConferenceonSoftware
ArchitectureWorkshops(ICSAW),pages66–69,April2017.
withoutanyinstrumentationorprobesinthesystem.Weaimed
[22] GiovanniToffetti,SandroBrunner,MartinBlo¨chlinger,FlorianDudouet,
to analyze the limits of a “black-box” approach, using only andAndrewEdmonds.Anarchitectureforself-managingmicroservices.
some of the infrastructural modules already deployed in a InProceedingsofthe1stInternationalWorkshoponAutomatedIncident
ManagementinCloud,AIMC’15,pages19–24,NewYork,NY,USA,
microservice architecture. We recurred to Netflix modules,
2015.ACM.
customizingthegateway,togatherrawdatafrommicroservice [23] Augusto Ciuffoletti. Automated deployment of a microservice-based
invocations. Results show that our solution involves minimal monitoring infrastructure. Procedia Computer Science, 68:163 – 172,
2015.1stInternationalConferenceonCloudForward:FromDistributed
configuration efforts to be integrated in the system and to
toCompleteComputing.
produce relevant information to administrators. [24] F. Moradi, C. Flinta, A. Johnsson, and C. Meirosu. Conmon: An
automated container based network performance monitoring system.
As future work, there are several directions that we want to
In 2017 IFIP/IEEE Symposium on Integrated Network and Service
further investigate. First, we want to improve our open-source Management(IM),pages54–62,May2017.