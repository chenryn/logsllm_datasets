viewers; this paper is all the better for their helpful feedback.
This work was supported by the National Science Foundation
under grant CNS-1703454, Secure Business Austria, ONR
project “In-Situ Malware Containment and Deception through
Dynamic In-Process Virtualization,” and EU H2020-SU-ICT-
03-2018 Project No. 830929 CyberSec4Europe.
References
[1] Ahmed Aboul-Ela. Sublist3r. https://github.com/
aboul3la/Sublist3r.
[2] Akamai Developer.
EdgeWork-
https://developer.akamai.com/akamai-
Akamai
ers.
edgeworkers-overview.
[3] Akamai Developer.
https:
//developer.akamai.com/legacy/learn/Caching/
Content_Caching.html.
Content Caching.
[4] Akamai Developer –
Jay Sikkeland.
vanced Metadata: A Brief Overview.
//developer.akamai.com/blog/2017/04/28/
advanced-metadata-brief-overview.
Ad-
https:
[5] Akamai Technologies.
Facts & Figures.
https://www.akamai.com/us/en/about/facts-
figures.jsp.
[6] Apache HTTP Server Project.
Server Version 2.4 – Caching Guide.
httpd.apache.org/docs/2.4/caching.html.
Apache HTTP
https://
[7] Sajjad Arshad, Seyed Ali Mirheidari, Tobias Lauinger,
Bruno Crispo, Engin Kirda, and William Robertson.
Large-Scale Analysis of Style Injection by Relative
Path Overwrite.
In International World Wide Web
Conference, 2018.
[8] Shay Berkovich.
ProxySG and Web Cache De-
https:
Symantec Connect, 2017.
ception.
//www.symantec.com/connect/blogs/proxysg-
and-web-cache-deception.
[9] Benjamin Brown.
On Web Cache Decep-
The Akamai Blog, 2017.
tion Attacks.
https://blogs.akamai.com/2017/03/on-web-
cache-deception-attacks.html.
[10] Deanna D. Caputo, Shari Lawrence Pﬂeeger, Jesse D.
Freeman, and M. Eric Johnson. Going Spear Phishing:
Exploring Embedded Training and Awareness. In IEEE
Security & Privacy, 2014.
[11] Jianjun Chen, Jian Jiang, Xiaofeng Zheng, Haixin
Duan, Jinjin Liang, Kang Li, Tao Wan, and Vern Pax-
son. Forwarding-Loop Attacks in Content Delivery
Networks.
In The Network and Distributed System
Security Symposium, 2016.
[12] Ka-Hing Cheung.
revisited.
Attack
https://blog.cloudflare.com/web-cache-
deception-attack-revisited/.
Web Cache Deception
Cloudﬂare Blog, 2018.
[13] Catalin Cimpanu. Web Cache Deception Attack
Into Caching Pages with Per-
https:
Tricks Servers
sonal Data.
//www.bleepingcomputer.com/news/security/
web-cache-deception-attack-tricks-servers-
into-caching-pages-with-personal-data/.
Bleeping Computer, 2017.
[14] Cloudﬂare.
Origin Cache-Control.
https:
//support.cloudflare.com/hc/en-us/articles/
115003206852s.
[15] Cloudﬂare. The Cloudﬂare Global Anycast Network.
https://www.cloudflare.com/network/.
[16] Cloudﬂare Developers. Cloudﬂare Workers Docu-
mentation. https://developers.cloudflare.com/
workers/.
[17] Soroush Dalili.
Non-Root-Relative Path Over-
write (RPO) in IIS and .Net Applications, 2015.
https://soroush.secproject.com/blog/2015/02/
non-root-relative-path-overwrite-rpo-in-
iis-and-net-applications/.
[18] Akamai Documentation. Caching, 2019. https://
learn.akamai.com/en-us/webhelp/ion/oca/GUID-
AAA2927B-BFF8-4F25-8CFE-9D8E920C008F.html.
[19] Julie S. Downs, Mandy B. Holbrook, and Lorrie Faith
Cranor. Decision Strategies and Susceptibility to Phish-
ing.
In Symposium On Usable Privacy and Security,
2006.
[20] Fastly – Hooman Beheshti. The truth about cache hit ra-
tios. https://www.fastly.com/blog/truth-about-
cache-hit-ratios.
680    29th USENIX Security Symposium
USENIX Association
[21] Roy T. Fielding, Mark Nottingham, and Julian F.
Reschke. Hypertext Transfer Protocol (HTTP/1.1):
Caching. IETF – RFC 7234, 2014. https://www.rfc-
editor.org/info/rfc7234.
[22] David Fiﬁeld, Chang Lan, Rod Hynes, Percy Wegmann,
and Vern Paxson. Blocking-Resistant Communica-
tion Through Domain Fronting. In Privacy Enhancing
Technologies, 2015.
[23] Omer Gil. Web Cache Deception Attack, 2017.
https://omergil.blogspot.com/2017/02/web-
cache-deception-attack.html.
[24] Omer Gil. Web Cache Deception Attack. Black
Hat USA, 2017. https://www.blackhat.com/us-17/
briefings.html#web-cache-deception-attack.
[25] Google.
Chrome Remote Debugging Protocol.
https://chromedevtools.github.io/devtools-
protocol/.
[26] Run Guo, Jianjun Chen, Baojun Liu, Jia Zhang, Chao
Zhang, Haixin Duan, Tao Wan, Jian Jiang, Shuang
Hao, and Yaoqi Jia. Abusing CDNs for Fun and
Proﬁt: Security Issues in CDNs’ Origin Validation. In
IEEE International Symposium on Reliable Distributed
Systems, 2018.
[27] Michael Henriksen.
AQUATONE.
github.com/michenriksen/aquatone.
https://
[28] Gareth Heyes. RPO. The Spanner, 2014. http://
www.thespanner.co.uk/2014/03/21/rpo/.
[29] John Holowczak and Amir Houmansadr. CacheBrowser:
Bypassing Chinese Censorship Without Proxies Using
Cached Content. In ACM Conference on Computer and
Communications Security, 2015.
[30] Jason Hong.
The State of Phishing Attacks.
Communications of the ACM, 55(1):74–81, 2012.
[31] Arbaz Hussain. Auto Web Cache Deception Tool,
2017. https://medium.com/@arbazhussain/auto-
web-cache-deception-tool-2b995c1d1ab2.
[32] Tom N.
Jagatic, Nathaniel A.
Jakobsson, and Filippo Menczer.
Communications of the ACM, 50(10):94–100, 2007.
Johnson, Markus
Social Phishing.
[33] XSS Jigsaw.
RPO Gadgets, 2016.
blog.innerht.ml/rpo-gadgets/.
https://
[34] Lin Jin, Shuai Hao, Haining Wang, and Chase Cot-
ton. Your Remnant Tells Secret: Residual Resolu-
tion in DDoS Protection Services.
In IEEE/IFIP
International Conference on Dependable Systems and
Networks, 2018.
[35] Josh Kaufman. 10,000 Most Common English Words,
2013. https://github.com/first20hours/google-
10000-english.
[36] James Kettle.
Import
Detecting and Exploiting Path-
(PRSSI) Vulnerabil-
Relative Stylesheet
ities.
PortSwigger Web Security Blog, 2015.
https://portswigger.net/blog/detecting-and-
exploiting-path-relative-stylesheet-import-
prssi-vulnerabilities.
[37] James Kettle.
Practical Web Cache Poison-
PortSwigger Web Security Blog, 2018.
ing.
https://portswigger.net/blog/practical-
web-cache-poisoning.
[38] James Kettle.
HTTP Desync Attacks: Request
PortSwigger Web Security
Smuggling Reborn.
Blog, 2019. https://portswigger.net/blog/http-
desync-attacks-request-smuggling-reborn.
[39] Sebastian Lekies, Ben Stock, Martin Wentzel, and Mar-
The Unexpected Dangers of Dynamic
tin Johns.
JavaScript. In USENIX Security Symposium, 2015.
[40] Chris Lesniewski-Laas and M. Frans Kaashoek. SSL
Splitting: Securely Serving Data from Untrusted Caches.
In USENIX Security Symposium, 2003.
[41] Nancy G. Leveson. Engineering a Safer World. The
MIT Press, Cambridge, MA, USA, 2011.
[42] Amit Levy, Henry Corrigan-Gibbs, and Dan Boneh.
Stickler: Defending against Malicious Content Distri-
bution Networks in an Unmodiﬁed Browser. In IEEE
Security & Privacy (S&P), 2016.
[43] Joshua Liebow-Feeser. Understanding Our Cache
and the Web Cache Deception Attack. Cloudﬂare
Blog, 2017.
https://blog.cloudflare.com/
understanding-our-cache-and-the-web-cache-
deception-attack/.
[44] Nikolaos Michalakis, Robert Soulé, and Robert
Grimm. Ensuring Content Integrity for Untrusted
Peer-to-Peer Content Distribution Networks.
In
USENIX Symposium on Networked Systems Design
& Implementation, 2007.
[45] Mozilla.
MDN web docs – HTTP Cache.
https://developer.mozilla.org/en-US/docs/
Mozilla/HTTP_cache.
[46] NGINX.
NGINX Content Caching.
https:
//docs.nginx.com/nginx/admin-guide/content-
cache/content-caching/.
USENIX Association
29th USENIX Security Symposium    681
[47] Hoai Viet Nguyen, Luigi Lo Iacono, and Hannes Feder-
rath. Your Cache Has Fallen: Cache-Poisoned Denial-
of-Service Attack. In ACM Conference on Computer
and Communications Security, 2019.
[48] Mark Nottingham. How (Not) to Control Your CDN,
https://www.mnot.net/blog/2017/06/07/
2017.
safe_cdn.
[49] Kaan Onarlioglu.
Security Researchers Struggle
with Bot Management Programs.
Dark Reading,
2018. https://www.darkreading.com/perimeter/
security-researchers-struggle-with-bot-
management-programs/a/d-id/1332976.
[50] OWASP. Amass.
Amass.
https://github.com/OWASP/
[51] Google Identity Platform. Using OAuth 2.0 to Access
https://developers.google.com/
Google APIs.
identity/protocols/OAuth2.
[52] Kenneth Reitz. Requests: HTTP for Humans. http:
//docs.python-requests.org/en/master/.
[53] SeleniumHQ. Selenium – Web Browser Automation.
https://www.seleniumhq.org/.
[54] Johan Snyman. Airachnid: Web Cache Deception
Trustwave – SpiderLabs Blog,
https://www.trustwave.com/Resources/
Burp Extender.
2017.
SpiderLabs-Blog/Airachnid--Web-Cache-
Deception-Burp-Extender/.
[55] Squid. Squid: Optimising Web Delivery. http://
www.squid-cache.org/.
[56] Volker Stocker, Georgios Smaragdakis, William Lehr,
and Steven Bauer. The growing complexity of con-
tent delivery networks: Challenges and implications for
the Internet ecosystem. Telecommunications Policy,
41(10):1003–1016, 2017.
[57] Takeshi Terada. A Few RPO Exploitation Techniques,
2015. https://www.mbsd.jp/Whitepaper/rpo.pdf.
[58] The Chromium Projects.
HTTP Cache.
https://www.chromium.org/developers/design-
documents/network-stack/http-cache.
[59] Aleksei Tiurin.
A Fresh Look On Re-
https:
verse Proxy Related Attacks, 2019.
//www.acunetix.com/blog/articles/a-fresh-
look-on-reverse-proxy-related-attacks.
[60] Sipat Triukose, Zakaria Al-Qudah, and Michael Rabi-
novich. Content Delivery Networks: Protection or
Threat?
In European Symposium on Research in
Computer Security, 2009.
[61] Orange Tsai.
in
Trending
A New Era of SSRF - Exploit-
Programming
https:
ing URL Parser
Languages!
//www.blackhat.com/us-17/briefings.html#a-
new-era-of-ssrf-exploiting-url-parser-in-
trending-programming-languages.
Black Hat USA, 2017.
[62] Orange Tsai.
Breaking Parser Logic: Take Your
Path Normalization off and Pop 0days Out! Black
Hat USA, 2018.
https://www.blackhat.com/us-
18/briefings/schedule/index.html#breaking-
parser-logic-take-your-path-normalization-
off-and-pop-days-out-10346.
[63] Mark Tsimelzon, Bill Weihl, Joseph Chung, Dan Frantz,
John Brasso, Chris Newton, Mark Hale, Larry Jacobs,
and Conleth O’Connell. ESI Language Speciﬁcation
1.0. World Wide Web Consortium (W3C), 2001. https:
//www.w3.org/TR/esi-lang.
[64] Varnish. Varnish HTTP Cache. https://varnish-
cache.org/.
[65] Thomas Vissers, Tom Van Goethem, Wouter Joosen,
and Nick Nikiforakis. Maneuvering Around Clouds:
Bypassing Cloud-based Security Providers.
In
ACM Conference on Computer and Communications
Security, 2015.
[66] David Y. Wang, Stefan Savage, and Geoffrey M.
Voelker. Cloak and Dagger: Dynamics of Web Search
Cloaking.
In ACM Conference on Computer and
Communications Security, 2011.
[67] Hadi Zolfaghari and Amir Houmansadr.
Practi-
cal Censorship Evasion Leveraging Content Delivery
Networks.
In ACM Conference on Computer and
Communications Security, 2016.
682    29th USENIX Security Symposium
USENIX Association