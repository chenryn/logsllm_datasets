### 5.3 NTFS Image Causes `icat` to Crash

The `icat` tool crashes when processing a file on a corrupted NTFS filesystem image. The crash occurs at line 1570 in the `ntfs.c` file, where the program attempts to dereference `fs_data_run`:

```c
1543 // Cycle through the number of runs we have
1544 while (fs_data_run) {
1545     // We may get a FILLER entry at the beginning of the run
1546     // if we are processing a non-base file record because
1547     // this $DATA attribute could not be the first in the larger
1548     // attribute. Therefore, do not error if it starts at 0.
1549     if (fs_data_run->flags & FS_DATA_FILLER) {
1550         // ...
1564     } else {
1565         fs_data_run = fs_data_run->next;
1566     }
1567 }
1568
1569
1570 addr = fs_data_run->addr;
```

The check at line 1544 ensures that `fs_data_run` is non-NULL. However, line 1566 updates the variable without returning to the check (with a `continue`) or performing the check again. This leads to a NULL dereference at line 1570.

#### 5.3.1 Reproduction

```sh
$ patch.py NtfsPart.dsk Bad.dsk 7567157 AA
$ icat Bad.dsk 8-128-1
```

### 5.4 NTFS Image Causes `fls` to Crash (1)

The `fls` tool crashes while listing files from a corrupted image. The crash occurs when copying data in `fs_data_put_str`. The relevant code is in `ntfs.c`:

```c
1778 // Add this resident stream to the fsinode->attr list
1779 fsinode->attr =
1780 fs_data_put_str(fsinode->attr, name, type,
1781                 getu16(fs->endian, attr->id),
1782                 (void*)((uintptr_t)attr + getu16(fs->endian, attr->c.r.soff)),
1783                 getu32(fs->endian, attr->c.r.ssize));
```

The read buffer is `attr` plus an arbitrary 16-bit offset, and the read length is an arbitrary 32-bit length. No bounds checking is performed to ensure that the buffer contains as many bytes as requested.

#### 5.4.1 Reproduction

```sh
$ patch.py NtfsPart.dsk Bad.dsk 7652939 \x01
$ fls -r -l -p Bad.dsk
```

### 5.5 NTFS Image Causes `fls` to Crash (2)

The `fls` tool crashes while listing files from a corrupted image. The crash occurs at line 208 in `ntfs_dent.c`, where the program attempts to dereference `idxe`:

```c
205 // Perform some sanity checks on index buffer head
206 // and advance by 4-bytes if invalid
207
208 if ((getu48(fs->endian, idxe->file_ref) > fs->last_inum) ||
209     (getu48(fs->endian, idxe->file_ref) < fs->first_inum) ||
210     (getu16(fs->endian, idxe->idx_len) < getu16(fs->endian, idxe->str_len)) ||
211     (getu16(fs->endian, idxe->idx_len) % 4) ||
212     (getu16(fs->endian, idxe->idx_len) > size)) {
213     idxe = (ntfs_idx_entry *)((uintptr_t)idxe + 4);
214     continue;
215 }
```

This code is executed in a loop while walking a table and advancing `idxe`. The variable is initially in range but is eventually moved out of range because the caller passes in a large `size` (line 735), which is an arbitrary 32-bit integer taken from the filesystem image. No bounds checking is performed to ensure that the value is in range.

#### 5.5.1 Reproduction

```sh
$ patch.py NtfsPart.dsk Bad.dsk 7653298 d
$ fls -r -l -p Bad.dsk
```

### 5.6 NTFS Image Causes `fsstat` to Crash

The `fsstat` tool crashes while processing a corrupted filesystem image. The crash happens when dereferencing `sid` at line 2714 in `ntfs.c`:

```c
2703 unsigned int owner_offset =
2704     getu32(fs->endian, sds->self_rel_sec_desc.owner);
2705 ntfs_sid *sid =
2706     (ntfs_sid *)((uint8_t *)&sds->self_rel_sec_desc + owner_offset);
```

The `owner_offset` is used to access the `sid` structure, but no bounds checking is performed to ensure that the offset is within the valid range.

#### 5.6.1 Reproduction

```sh
$ patch.py NtfsPart.dsk Bad.dsk 7653298 d
$ fsstat Bad.dsk
```

---

This version of the text is more organized and clearly explains the issues and reproduction steps for each case.