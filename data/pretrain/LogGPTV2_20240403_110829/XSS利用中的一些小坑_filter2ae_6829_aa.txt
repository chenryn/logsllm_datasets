# XSS利用中的一些小坑
##### 译文声明
本文是翻译文章，文章原作者 mwrinfosecurity，文章来源：labs.mwrinfosecurity.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
随着时间的推移，简单使用``和`python –m
SimpleHTTPServer`的黄金年代已经不复存在。现在想通过这些方法在locahost之外实现XSS（Cross-Site
Scripting）以及窃取数据已经有点不切实际。现代浏览器部署了许多安全控制策略，应用开发者在安全意识方面也不断提高，这都是阻止我们实现传统XSS攻击的一些阻碍。
现在许多人只是简单地展示XSS的PoC（Prof of
Concept），完全无视现代的安全控制机制，这一点让我忧心忡忡。因此我决定把我们在攻击场景中可能遇到的一些常见问题罗列出来，顺便介绍下如何绕过这些问题，实现真正的XSS，发挥XSS的价值。
在进入正文之前，我们要知道现在许多浏览器内置了一些保护措施，可以阻止攻击者利用浏览器特定的漏洞绕过安全机制、发起XSS攻击。然而为了聚焦主题，这里我并不会取讨论如何绕过不同浏览器XSS控制策略的方法。我想关注更为“通用”的内容，聚焦如何在已知内容上进行创新，而不是挖掘全新的方法。
因此我想简单介绍下我在针对现代应用程序利用XSS PoC过程中碰到的一些非常实际的问题，包括：
  * 针对动态创建Web页面时的常见“问题”
  * 隐藏在``表面下的问题
  * 位置问题，知道什么时候我们需要等待
  * 被称为XSS杀手的CSP（Content Security Policy）
  * HTTP/S混合内容，如何“干净地”窃取数据
  * 使用CORS（Cross-Origin Resource Sharing）实现双向C2的一些基本知识点
## 0x01 Element.innerHTML
先从简单的开始讲起。
大家还记得最近一次看到没有采用动态方式构建/改变DOM（Document Object
Model）的应用是什么时候？如果采用动态构建方式，使用元素的`innerHTML`属性将通过某些API获取的内容插入页面，就可能存在一些风险。比如如下API调用：
    $ curl -X POST -H "Content-Type: application/json" --cookie "PHPSESSID=hibcw4d4u4r8q447rz8221n" 
    -d '{"id":7357, "name":"", "age":25}' 
    http://demoapp.loc/updateDetails
    {"success":"User details updated!"}
    $ curl --cookie "PHPSESSID=hibcw4d4u4r8q447rz8221n" 
    http://demoapp.loc/getName
    {"name":""}
然后看一下用来动态更改网页内容的“非常安全的”JavaScript代码：
    function getName() {
      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          var data = JSON.parse(this.responseText);
          username.innerHTML = data['name'];
        }
      }
      xhr.open("GET", "/getName", true);
      xhr.send();
    }
这看起来像是非常简单的XSS利用场景。然而，当我们尝试注入基于``的典型payload时，却看不到什么效果（即使目标应用没有采用任何输入验证机制，也没有编码或转义标签）。如下图所示，正常情况下我们应该能看到一个完美的弹窗：
那么究竟这里有什么黑科技？其实这是因为在HTML5规范中，规定了如果采用元素的`innerHTML`属性将``标签插入页面中，那么就不应该执行该标签。
这可能是比较令人沮丧的一个“陷阱”，但我们可以使用``标签之外的其他方式绕过。比如，我们可以使用``或者``标签，利用如下API调用来发起攻击：
    $ curl -X POST -H "Content-Type: application/json" --cookie "PHPSESSID=hibcw4d4u4r8q447rz8221n" -d '{"id":7357, "name":"Bob", "age":25}' http://demoapp.loc/updateDetails
    {"success":"User details updated!"}
现在当页面再次获取到用户名，就会达到XSS攻击效果：
## 0x02 Alert(1)
当我们将``注入页面，看到弹窗，就可以在报告中声称我们达到了XSS效果，可以造成严重危害……这就是我所谓的“XSS假象”，虽然已经离事实真相不远。XSS可以造成很严重的危险，但如果我们没法利用XSS达到实打实的效果呢？
当下一次我们发现了一个XSS，尝试向客户介绍漏洞危害。这时候简单弹个内容为`1`的窗显然不够令人信服，无法向客户介绍这个漏洞的严重性，需要修复。
这里我们可以稍微回到前一个例子。我们已经知道可以使用`alert()`，来继续观察能否利用这种攻击方式完成其他任务（比如删除用户账户）。我们可以注入代码，异步调用超级安全的“删除用户”API。更新payload后来试一下能否完成该任务：
    POST /updateDetails HTTP/1.1
    Host: demoapp.loc
    {"id":7357, "name":"", "age":25}
    HTTP 200 OK
    {"error":"Name too long"}
好吧，似乎这里有个输入长度限制，除了`alert(1)`之外，我们无法执行太多操作，因此我们很难注入有意义的其他攻击payload（这里我们将长度限制为100个字符，在“实际场景”中，可能对应数据库中的`VARCHAR(100)`字段）。
为了绕过这个限制，通常我们可以使用一个“中转器”（stager），也就是用来加载主payload的一小段代码。比如，用于XSS的一个典型stager如下所示：
上面代码只有48字节，因此没有问题。然而与之前类似，我们无法使用`script`标签，因为这些数据通过元素的`innerHTML`属性加载。
我们是否可以使用图像标签，强制弹出错误，然后将stager附加到元素的`onerror`事件处理函数中呢？来试一下：
好吧现在payload变成了155字符，因此肯定无法生效，会弹出错误。
大家可以看到，这里问题在于我们根据最初的`alert(1)`判断目标存在一个XSS点。然而当我们尝试向他人演示漏洞影响范围，或者想执行其他操作时却无能为力。幸运的是，在这种场景下，我们可以通过如下JavaScript语法开发精简版的XSS
stager，只有98个字符（其实我们可以注册短一点的域名，使用index页面进一步缩小字符数）：
## 0x03 执行时机
现在可以谈`innerHTML`之外的东西。大家有没有注意到，有时候我们注入了一个XSS
payload（比如一个`alert`），然后发现弹窗后面变成空白页面，或缺少了某些元素？如果我们只关注弹窗本身，很可能会错失发起有效且整洁XSS攻击的重要机会。这里我们以一个简单的例子来说明。如下表单会通过GET参数提取用户名，预先在网页中填充该用户名：
现在该参数存在XSS点，然而当我们执行典型的`alert(1)` payload时，可以注意到后台页面有些不对劲，部分页面元素已丢失：
我们可以无视这一点，认为找到了XSS点，因此可以窃取各种信息、直击目标等。
但事实并非如此，我们可以进一步分析。实际上该表单包含一个CSRF令牌，我们可以查看源代码：
    ...
    ...
那么我们可以创建个payload来访问该信息，窃取反csrf令牌：
    ?name="><link/rel="
## 0x04 CSP策略#1
继续研究，来看一下针对未设置CSP（Content Security Policy）应用的反射型XSS（reflected
XSS）攻击。目标HTML页面如下所示：