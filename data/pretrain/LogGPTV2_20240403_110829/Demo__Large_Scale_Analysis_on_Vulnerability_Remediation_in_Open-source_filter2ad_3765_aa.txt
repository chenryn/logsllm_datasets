title:Demo: Large Scale Analysis on Vulnerability Remediation in Open-source
JavaScript Projects
author:Vinuri Bandara and
Thisura Rathnayake and
Nipuna Weerasekara and
Charitha Elvitigala and
Kenneth Thilakarathna and
Primal Wijesekera and
Kasun De Zoysa and
Chamath Keppitiyagama
Demo: Large Scale Analysis on Vulnerability Remediation in
Open-source JavaScript Projects
Vinuri Bandara†, Thisura Rathnayake†, Nipuna Weerasekara†, Charitha Elvitigala†,
Kenneth Thilakarathna‡, Primal Wijesekera‡‡, Kasun De Zoysa‡, Chamath Keppitiyagama‡
†SCoRe Lab, ‡University of Colombo School of Computing, ‡‡University of California, Berkeley & ICSI
ABSTRACT
Given the widespread prevalence of vulnerabilities, remediation is a
critical phase that every software project has to go through. When
comparing the studies on understanding the security vulnerabilities
in software, such as vulnerability discovery and patterns, there is a
lack of studies on the vulnerability remediation phase. To address
this, we have done a timeline analysis for 130 of the most dependent
upon open source projects written in JavaScript language, hosted
on GitHub to understand the nature and the lifetime of the vulner-
abilities in those projects. We used a static code analyzer on 501K
commits from the repositories to identify commits that introduced
new vulnerabilities to the code and fixed existing vulnerabilities
in the code. In 90% of the projects, we identified that a commit
that fixed an existing vulnerability had introduced one or more
new vulnerabilities into the code. On average, 16% of the commits
intended to fix vulnerabilities have introduced one or more new
vulnerabilities from the analyzed projects. We also found that 18%
of the total vulnerabilities found in those projects have originated
from a commit meant to fix an existing vulnerability, and 78% of
those vulnerabilities could have been avoided of introduction if the
developers were to use proper internal testing. Here, we demon-
strate Sequza, a visualization tool to help organizations detect such
instances at the earliest possible.
CCS CONCEPTS
• Security and privacy → Usability in security and privacy;
Vulnerability management.
KEYWORDS
Software Security; Vulnerability Analysis; Vulnerability Remedia-
tion; Security Testing
ACM Reference Format:
Vinuri Bandara†, Thisura Rathnayake†, Nipuna Weerasekara†, Charitha
Elvitigala†,, Kenneth Thilakarathna‡, Primal Wijesekera‡‡, Kasun De Zoysa‡,
Chamath Keppitiyagama‡ . 2021. Demo: Large Scale Analysis on Vulnera-
bility Remediation in Open-source JavaScript Projects. In Proceedings of the
2021 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New
York, NY, USA, 3 pages. https://doi.org/10.1145/3460120.3485357
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-8454-4/21/11.
https://doi.org/10.1145/3460120.3485357
1 INTRODUCTION
We observe that the security of a software project relies not only on
the success of the vulnerability discovery but also on the success
of the vulnerability remediation. There are many resources for the
developers to learn about software vulnerabilities, identify them,
fix them, and avoid them. Public resources such MITRE Corpora-
tion’s Common Vulnerabilities and Exposures (CVE)1 database and
the National Vulnerability Database (NVD)2 are some the valuable
resources for the developers. Some of the recent studies done on
vulnerability remediation found that there are significant issues
in the remediation phase that hinder the impact of vulnerability
discovery [1, 2, 5]. A study done by Li and Paxson identified that
it takes multiple commits to fix a vulnerability, and not all vulner-
ability fixes fix the intended vulnerability [5]. The study done by
Alomar et al. found that security practitioners are worried that lack
of proper attention from the management and the lack of developer
knowledge to fix a software vulnerability can reduce the progress
of a successful vulnerability remediation [1].
The current literature on understanding the issues mentioned
above is minimal [1, 2, 5]. As a research community, we need a
proper measurement study before exploring potential solutions.
Our study proposes a novel automated vulnerability analysis to
identify and filter commits responsible for introducing one or more
vulnerabilities to the code and identify commits that fix one or
more existing vulnerabilities in the code. In our study, we currently
analyzed 130 open-source JavaScript projects hosted on GitHub.
We focused our study on the JavaScript language because of its
popularity among the software developers3 and the increased usage
of JavaScript libraries in client-side web applications and server-
side applications. However, the proposed framework in our study
is language agnostic. The proposed pipeline can longitudinally
analyze a project’s vulnerability introduction and fixing patterns as
time-series analysis. This gives us a complete view of how software
projects conduct vulnerability remediation processes and insight
into the effectiveness of the vulnerability remediation process.
We observed that in 90% of the analyzed projects, upon fixing a
given vulnerability, one-sixth of the time, it has introduced more
vulnerabilities to the code. Overall, 78% of the found vulnerability
categories are publicly disclosed (as in they were assigned with
CVE numbers and categorized by providing a Common Weakness
Enumeration - CWE number) at the introduction of the vulnera-
bility. Therefore, the software developers could have discovered
these vulnerabilities before committing them to the code by using
proper scanning/analyzing tools. In our study, we present a novel
technique to longitudinally analyze the vulnerability management
1https://cve.mitre.org/index.html
2https://nvd.nist.gov/
3https://insights.stackoverflow.com/survey/2020
Session 8: Poster & Demo Session CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2447process in projects, and Sequza, a novel visualization tool to help
organizations understand the security posture of a given repository:
we envision the tool will help organizations to uncover remediation
issues mentioned in the paper. Sequza comes with a vulnerability
distribution metric incorporated with a prioritization schema to
assist stakeholders in allocating resources for successful vulnerabil-
ity remediation. We published the preliminary results of the study,
which was done on 53 JavaScript open-source projects on [2].
2 RELATED WORK
Prior work has looked into the life cycle of a vulnerability from a
security researcher’s Frei et al. or a malicious actor’s perspective [3].
They state that the vulnerability discovery date is mainly unknown
to the public, and the vulnerabilities exist before being discovered
by security researchers or malicious actors. The issue here for the
software developers is that they have to discover the vulnerabili-
ties before the malicious actors can discover them. However, our
study suggests that the vulnerability remediation landscape has
significantly changed, and certain vulnerabilities can be identified
before they are committed to the code if the developers use proper
testing. The studies [6] have proposed methodologies to identify
vulnerabilities in the source code using patterns described by CWEs
(Common Weakness Enumeration)4. Hogan et al. has discussed the
challenges of finding vulnerabilities introducing commits in the
code using data mining techniques on source controlling [4]. How-
ever, in our methodology, we go one step beyond understanding
the specific security vulnerabilities introduced in each commit.
A recent study found that many organizations have focused more
on vulnerability identification and less on the remediation process
[1]. The researchers identified that the management is likely to
have a false sense of security even if there is no proper vulnera-
bility remediation. In our study, we measure the effectiveness of
remediation by analyzing the open-source JavaScript repositories
hosted on GitHub.
3 IDENTIFYING VULNERABILITY
INTRODUCTION AND FIXES
Our main objective is to understand the issues in the vulnerability
remediation phase through analyzing the source code. We selected
JavaScript repositories which have at least 500 commits. We first
selected a sample of JavaScript repositories by combining three pub-
licly available lists which provide most dependent upon JavaScript