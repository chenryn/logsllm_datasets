only thing that needs to be computed are the input scripts. This
computation is done as follows: ﬁrst Alice computes her input
script sig (cid:2)A([Compute 2]) and sends it to Bob. Then Bob adds
his input script (sig (cid:2)B([Compute 2]), sB), and posts Compute 2
on the Ledger.
2 procedures (for P ∈ {A, B}) remain
unchanged (except, of course that their input is Compute 2
instead of Compute 1). Let us now analyze the security of this
protocol from the point of view of both parties. First, observe
that Alice does not risk anything by sending sig (cid:2)A([Compute 2])
to Bob. This is because it consists of a signature on the entire
body of the transaction, and hence it is useless as long as Bob
did not add his input script19. But, if Bob added a correct
input script and posted Compute 2 on the Ledger then he
automatically had to reveal sB. Hence, from the point of view
of Alice the problem of “nasty Bob” is solved.
The ClaimMoney P
19Recall that the body of a transaction includes also the information about
its input transactions, and moreover, a transaction becomes valid only if all
the input transactions can be redeemed
454
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:33 UTC from IEEE Xplore.  Restrictions apply. 
Unfortunately, from the point of view of Bob the situation
looks much worse, as he still has no guarantee that Alice will
post sA once she learned that she lost. This is why one more
modiﬁcation of the protocol is needed.
4) The secure version of the scheme: To ﬁx the problem
described above we extend our protocol by adding a special
transaction that we denote Fuse and that will be used by Bob
to redeem Compute if Alice did not send sA within some
speciﬁc time, say, 2 · maxLedger. To achieve this we will use
the time-lock mechanism described in the introduction. This
requires modifying once again the Compute 2 transaction so it
can be redeemed by Fuse. All in all, the transactions are now
deﬁned as follows:
Compute(in: PutMoney A, PutMoney B)
in-script2: sig (cid:2)B
([Compute]), sB
([Compute)]
in-script1: sig (cid:2)A
out-script(body, σ1, σ2, ˆsA, ˆsB):
(ˆsA, ˆsB ∈ S2
∧ f (ˆsA, ˆsB) = A ∧ ver (cid:2)A
(ˆsA, ˆsB ∈ S2
∧ f (ˆsA, ˆsB) = B ∧ ver (cid:2)B
(ver (cid:2)A
val: 2 B
k ∧ H(ˆsA) = hA ∧ H(ˆsB) = hB
(body, σ1)) ∨
k ∧ H(ˆsA) = hA ∧ H(ˆsB) = hB
(body, σ2)) ∨
(body, σ1) ∧ ver (cid:2)B
(body, σ2))
Fuse(in: Compute)
([Fuse]), sig (cid:2)B
in-script: sig (cid:2)A
out-script(body, σ): verB(body, σ)
val: 2 B
tlock: t + 2 · maxLedger
([Fuse]), ⊥, ⊥
(t above refers roughly to the time when Fuse is created,
we will deﬁne it more concretely in a moment).
the same as the transactions ClaimMoney A
2
The transactions ClaimMoney A and ClaimMoney B are
and
almost
ClaimMoney B
2 (except that they redeem Compute transac-
is clear that Compute can
tion instead of Compute 2). It
be generated jointly by Alice and Bob in the same way
as before (the only new part of Compute is the last line
“ver (cid:2)A(body, σ1)∧ver (cid:2)B(body, σ2)” that can be easily computed
by both parties from the public information).
What remains is to describe the construction of the Fuse
transaction. Clearly, Bob can create the entire Fuse by himself,
except of the signature sig (cid:2)A([Fuse]) in the input script, which
has to be computed by Alice, as only she knows her private
key. To do this Alice needs to know the body of Fuse. It is easy
to see that she knows all of it, except of the input transaction
Compute. Moreover, Bob cannot simply send Compute to
Alice, since Compute includes the information about his secret
sB which Alice should not learn at this point.
We solve this problem by exploiting the details of the
Bitcoin implementation, namely the fact that the transactions
are referenced by their hashes. Hence, to create the body
of Fuse Alice only needs to know the hash hCompute of
Compute. Therefore our protocol will contain the follow-
ing sub-procedure (executed directly after Bob constructs
Compute, but before he posts it on the Ledger): (1) Bob
sends hCompute = H(Compute) to Alice, (2) Alice computes
[Fuse], signs it, and sends the signature sig (cid:2)A([Fuse]) to Bob,
(3) Bob veriﬁes Alice’s signature and halts if it is incorrect.
Time t that is used in the time-lock in Fuse will refer to time
when Alice executed Step (2) above. This system guarantees
455
that Bob can always claim his 2B in time t+2·maxLedger even
if Alice did not execute the last step. Observe that of course
Alice should halt her execution if she does not see Compute on
the Ledger within time t + maxLedger, as otherwise Bob could
simply post Compute much later (after time t + 2· maxLedger,
say) and immediately use Fuse to claim the reward.
There are some issues in this procedure that need to be ad-
dressed. Firstly, the reader may be worried that H(Compute)
reveals some information on Compute. In practice (and in
theory if H is a random oracle) this happens only if the set
of possible inputs to H is small and known to the adversary.
In our case the adversary is the dishonest Alice, and it can
be easily seen that from her point of view the set of possible
Compute transactions is huge, one reason for this being that
Compute includes sB, which is secret and uniform.
Unfortunately the fact that Alice does not know the com-
plete transaction Compute, but only its hash, poses a risk to
her. This is because a dishonest Bob can, instead of sending
H(Compute), send a hash of some other transaction T in
order to obtain the information that can be used to redeem
some other transaction used within the protocol, or even
outside this session of the protocol. This is actually one of the
reasons why we assumed that the keys used by the users in
our procedure are fresh and will not be used later: in this way
we can precisely know, which transactions can be redeemed
if one obtains Alice’s signature on [Fuse] constructed with
false hCompute.20. It is easy to see that the only transaction
other than Compute, that could be potentially redeemed using
Alice’s signature is PutMoney A. This transaction cannot be
redeemed by “Fuse with false hCompute”, for several reasons,
one of them being that the value of PutMoney A is 1B, which
is less than the value of Fuse (equal to 2B).
In this way we constructed the TwoPlayersLottery proto-
col. Its complete description is presented on Figure 3 (page
14). We now have the following lemma (the proof will appear
in the extended version of this paper).
Lemma 3: The TwoPlayersLottery protocol from Figure 3
is a secure lottery protocol under the private channel assump-
tion.
Notice that without the private channel assumption there
are two possible attacks, which could harm Bob. One is
that Alice could see Compute, which contains sB before it
is posted on the Ledger. In case she lost she could react
with sending to the Ledger another transaction T , which
redeems PutMoney A. If she was lucky and the transaction
T was posted on the Ledger before Compute, then Compute
would become invalidated (one of its inputs would be already
redeemed) and Bob would not earn any money. The other
possible attack concerns the malleability problem: for the
security to hold Bob needs to be sure that the Fuse transaction
will redeem the transaction Compute. Unfortunately, Fuse has
∗
20 As a more concrete example what could go wrong without this assump-
tion consider the following scenario. Assume there is a not-redeemed transac-
tion Compute
on the Ledger whose recipient is Alice and that also can be
([T ]), ⊥, ⊥)
redeemed by a transaction with an input script (sig (cid:2)A
(this can happen, e.g.,
if two coin-tossing protocol are executed in par-
allel between Alice and Bob). Then a dishonest Bob can send to Alice
H(Compute
in time
t + 2 · maxLedger
∗) instead of H(Compute), and redeem Compute
([T ]), sig (cid:2)B
∗
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:33 UTC from IEEE Xplore.  Restrictions apply. 
1 B
PutMoney A(in: T A)
in-script:
([PutMoney A])
sigA
out-script(body, σ):
ver (cid:2)A
val: 1 B
(body, σ)
1 B
Compute(in: PutMoney A, PutMoney B)
([Compute)]
in-script2:
sig (cid:2)B
in-script1:
sig (cid:2)A
out-script(body, σ1, σ2, ˆsA, ˆsB):
((ˆsA, ˆsB ∈ S2
∧ ((f (ˆsA, ˆsB) = A ∧ ver (cid:2)A
∨ (f (ˆsA, ˆsB) = B ∧ ver (cid:2)B
(body, σ1) ∧ ver (cid:2)B
∨ (ver (cid:2)A
val: 2 B
([Compute]), sB
k ∧ H(ˆsA) = hA ∧ H(ˆsB) = hB)
(body, σ2))))
(body, σ2))
(body, σ1))
2 B
2 B
2 B
ClaimMoney A(in: Compute)
in-script:
([ClaimMoney A]), ⊥, sA, sB
sig (cid:2)A
out-script(body, σ): verA(body, σ)
val: 2 B
ClaimMoney B(in: Compute)
in-script:
⊥, sig (cid:2)B
([ClaimMoney B]), sA, sB
out-script(body, σ): verB(body, σ)
val: 2 B
2 B
2 B
PutMoney B(in: T B)
in-script:
([PutMoney B])
sigB
out-script(body, σ, ˆs):
(body, σ)∧
ver (cid:2)B
(ˆs ∈ S2
k ∧ H(ˆs) = hB)
val: 1 B
1 B
1 B
Fuse(in: Compute)
in-script:
([Fuse]),
sig (cid:2)A
([Fuse]), ⊥, ⊥
sig (cid:2)B
out-script(body, σ):
verB(body, σ)
val: 2 B
tlock:
t + 2 · maxLedger
2 B
Pre-condition:
Initialization phase:
1) Alice holds a pair of keys A = (sk A, pk A) and Bob holds a pair of keys B = (sk B, pk B).
2) The Ledger contains standard transactions T A and T B that have value 1B each and whose recipients are pk A and pk B, respectively.
3) Alice and Bob generate their key pairs (cid:2)A = ( (cid:2)A.sk , (cid:2)A.pk ) and (cid:2)B = ( (cid:2)B.sk , (cid:2)B.pk ) (respectively) and exchange the public keys (cid:2)A.pk and (cid:2)B.pk.
4) The players choose their secret strings sA and sB.
5) Alice computes a hash of her secret hA := H(sA) and sends it to Bob.
6) Bob computes a hash of his secret hB := H(sB) and sends it to Alice.
7) If the commitments are equal (i.e. hA = hB) then the players abort the protocol.
8) Each P ∈ {A, B} computes PutMoney P and posts it on the Ledger. The players proceed to the next step only once both of these transactions appear
on the Ledger.
9) The players construct the Compute transaction as follows:
Computation phase:
a) Alice computes the body of the transaction Compute together with the signature sig (cid:2)A
b) Bob veriﬁes Alice’s signature and halts if it
is incorrect. Otherwise he computes the whole transaction Compute by adding a signature
([Compute]) and sends sig (cid:2)A
([Compute]) to Bob.
sig (cid:2)B
([Compute]) to the message received in the previous step.
10) The players construct the Fuse transaction as follows:
a) Bob sends hCompute = H(Compute) to Alice,
b) Alice computes [Fuse], signs it, and sends the signature sig (cid:2)A
c) Bob veriﬁes Alice’s signature and halts if it is incorrect.
([Fuse]) to Bob (let t denote the time when it happened),
11) Bob sends Compute to the Ledger. Note that this reveals sB. If Compute did not appear on the Ledger in time t + maxLedger then Alice halts.
12) Alice sends sA to Bob. If Bob did not receive it in time t + 2 · maxLedger then he sends the Fuse transaction to the Ledger.
13) If f (sA, sB) = A then Alice sends ClaimMoney A to the Ledger, otherwise Bob sends ClaimMoney B to the Ledger.
Execution phase:
Fig. 3. The TwoPlayersLottery protocol
to be created strictly before Compute appears on the Ledger.
If an adversary intercepts Compute before it happened (or: if
a miner is malicious) then he can post a “mauled” Compute
transaction on the Ledger that behaves exactly as the original
one, except that it has a different hash. Hence Fuse would
becomes useless.
VI. NON-ZERO TRANSACTION FEES
We now address the problem of the transaction fees, which
was ignored in the description above. On a technical level
there is no problem with incorporating the fees into our
protocol: the transactions can simply include a small fee that
has to be agreed upon between the parties before the protocol
starts. The expected payoff of the parties will be in this case
slightly negative (since the fees need to be subtracted from
the outcome). It is straightforward how to modify the security
deﬁnition to take this into account. One problem that the reader
may notice is the issue of the “nasty” behavior of the parties.
For example, a malicious Alice can initiate the protocol with
Bob just to trigger him to post PutMoney B on the Ledger.
If Alice later aborts then Bob obviously gets his money back,
except of the transaction fee. Of course, this does not change
his expected payoff, but it still may be against his interests, as
he loses some money on a game that from the beginning was
planned (by Alice) never to start.
We now describe a partial pragmatic remedy for this
problem. The basic idea is to modify the protocol by changing
the instructions what to do when the other parties misbehave.
Recall,
in our protocols the parties are instructed to
simply redeem all their transactions if they notice a suspicious
that
456
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:33 UTC from IEEE Xplore.  Restrictions apply. 
behavior of the other party. Now, instead of doing this, they
could keep these transactions on the Ledger and reuse them in
some other sessions of the protocol. Of course, this has to be
done with care. For example the timed commitment schemes