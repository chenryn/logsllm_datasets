### CertShim: A Comprehensive SSL Security Mechanism

#### 1. Introduction
CertShim is designed to operate under multiple trust models, addressing adversaries of varying strengths. A weak attacker might only possess an untrusted CA certificate, while a stronger attacker could have a valid certificate from a trusted CA or even control parts of the Internet infrastructure (e.g., network paths, trusted CAs, DNS resolvers). We discuss the security of various verification modules against these adversaries in Section 3.4. When client-based key pinning is considered, we assume that the client has had at least one opportunity to correctly authenticate the server in the past, which is necessary for Trust on First Use (TOFU) authentication [5].

#### 2. Scope and Assumptions
We aim to secure client-side non-browser applications that are benign but potentially defective in their use of SSL. Specifically, we seek to protect against insecure use of SSL libraries. Unless otherwise noted, we do not consider incorrectness within the underlying libraries themselves [7, 20], assuming they are correctly implemented. This work is motivated by the fact that developers often fail to fix vulnerable code, so we assume that applications will not take active countermeasures to bypass our mechanism. CertShim interposes on popular known SSL libraries; we do not consider applications that use their own SSL implementations. While this would increase the cost and complexity of software development, our evaluation found no evidence that this was a widespread practice. However, we do anticipate that applications can use many layers of abstraction or misdirection in calling an SSL API, such as a cURL wrapper for a scripting language.

#### 3. System Goals
Our design aims to provide the following system-wide properties:

- **Override Insecure SSL Usage**: Force safe defaults for certificate handling (i.e., validation of hostnames and certificate chains) on all SSL connections, regardless of whether the application makes any attempt to do so. This includes applications that misconfigure the SSL API, use insecure SSL wrappers, or are broken by design.
  
- **Enable SSL Trust Enhancements**: Our system should be configurable to enable the use of CA alternatives and enhancements. Since CA alternatives may not always correctly authenticate all Internet domains due to design limitations or incremental deployment, we also provide a means of querying multiple verification methods and reconciling their results.
  
- **Maximize Compatibility**: Due to the diverse ways SSL is used, existing software may use SSL APIs in ways we cannot anticipate, some of which may be perfectly valid and secure. These constraints could be application-specific, such as using a pinned certificate or trusting a corporate CA, or domain-specific, such as a server on an unreachable private network or a server that has not published a TLSA record [23]. Our mechanism must coexist with these applications without breaking them.
  
- **Maximize Coverage**: While it is impossible to enumerate all possible SSL libraries, we aim to maximize the coverage of our defensive layer by supporting the most commonly used SSL libraries in practice.

#### 4. Implementation Details
**Pseudocode for CertShim’s `SSL_get_verify_result` Function:**

```c
// Determine SSL initialization type
type = resolve_ctx_type(ctx);

// Obtain the domain and port
name = lookup_name(ctx);
port = lookup_port(ctx);

int SSL_get_verify_result(SSL *ctx) {
    status = 0;
    if (CONFIG_CERT_PINNING) {
        // Grab the certificate fingerprint
        sha = extract_ctx_fingerprint(ctx);
        status += keypin_verify(name, port, sha);
    }
    if (CONFIG_CERT_AUTHORITY) {
        status += ca_verify(name, port, sha);
    }
    if (CONFIG_CONVERGENCE) {
        status += convergence_verify(name, port, sha);
    }
    if (CONFIG_DANE) {
        status += dane_verify(name, port, sha);
    }

    // Check the results
    if (resolve(status) == OK) {
        return X509_V_OK;
    } else {
        return X509_ERR_INVALID_CA;
    }
}
```

**Handshake Functions:**
Hooking the verification functions alone is insufficient to force proper verification in vulnerable applications because these functions are often unused by developers [19]. Therefore, CertShim also targets the main connection functions of SSL libraries, such as OpenSSL's `ssl_connect()` and `ssl_do_handshake()`, and GnuTLS's `gnutls_do_handshake()`. CertShim first calls the original functions from each respective library, returning its error code if the connection fails (e.g., due to network connectivity failure). If the call is successful, CertShim calls the verification module as described above. If verification fails, CertShim generates an error that emulates a connection failure, effectively short-circuiting the SSL connection and forcing the application to recover. This behavior may cause unexpected issues in some applications, but the behavior of the verification module can be configured to prevent application breakage.

**Function Hooks:**
CertShim targets both verification functions and handshake functions in SSL libraries, as well as system calls that allow for the recovery of important network context. A list of CertShim’s function hooks is included in Table 1.

| Function                | Purpose                          | Location          |
|-------------------------|----------------------------------|-------------------|
| connect                 | Initial SSL handshake            | libssl1.0.0       |
| do handshake            | Renegotiate handshake            | libssl1.0.0       |
| get verify result       | Check verification result        | libssl1.0.0       |
| handshake               | SSL handshake                    | libgnutls26       |
| certificate verify peers2 | Verify certificate (deprecated) | libgnutls26       |
| certificate verify peers3 | Verify certificate               | libgnutls26       |
| CheckIdentity           | Verify hostname                  | JDK6, JDK7        |
| SetEndpointIdentifAlg   | Verify hostname                  | JDK7              |
| gethostbyname           | Track hostname, port             | System call       |
| getaddrinfo             | Track hostname, port             | System call       |

#### 5. Verification Modules
CertShim supports four certificate verification methods:

- **Traditional CA Verification**: The module invokes the underlying native SSL API calls.
- **Convergence [30]**: The module communicates with Convergence Notaries via a REST API. Convergence's local cache is implemented as an sqlite3 database, and the list of trusted notaries and a verification threshold is set via a configuration file.
- **DANE [23]**: The module is a thin wrapper around Lexis’ SWEDE library for TLSA record verification [35]. This demonstrates that existing prototypes for SSL trust enhancements can be easily adapted for use with CertShim. With minor modifications, this module could be used to deploy Liang et al.’s DANE extension for securing CDN connections in non-browser software [27].
- **Client-Based Key Pinning**: Implementations currently exist as Firefox Plug-Ins [37, 42]. We developed our own trust-on-first-use key pinning module that stores certificate fingerprints in an sqlite3 database.

CertShim facilitates the use of any one of these modules and supports certificate validation through ensemble voting strategies. For example, all four modules can be enabled simultaneously, with a majority vote determining whether the certificate is approved. In the event that a verification method fails but overall verification passes, CertShim prints a notification of the failure to syslog. Because CertShim uses a single verification module across many SSL implementations, prototyping clients for new CA alternatives becomes a one-time cost, and interoperability with a variety of SSL libraries is assured.

#### 6. Policy Engine
CertShim includes a policy engine that allows users to express complex certificate verification routines that can be enforced system-wide or tailored to a specific application or domain. Policies are defined by the user in an Apache-like configuration file that is dynamically loaded every time an application is invoked, allowing for the user to alter the SSL behavior of all applications on the system at any time without recompilation. Figure 4 is an example of such a policy definition file. The configuration subsystem of CertShim uses libconfig [1] for parsing the configuration file and extracting data.

The structure of the policy file is easy to understand and use. A `global_policy` entry defines the system-wide behavior of CertShim except for cases where a more specific policy is present. The engine finds relevant policy entries by pattern matching over the `cmd` and `host` keys, with priority given to `host` entries. The `methods` key in each entry allows for the enabling and disabling of specific verification modules. The `vote` key represents the percentage of modules that must return true before CertShim approves the certificate. When a key is not set in a specific entry, it inherits the value of the global policy. The ordering of the policies within the configuration file is irrelevant.

**Figure 3: Interaction between a Client Application Using `SSL_connect()` and CertShim.**

Negligent developers often fail to consult SSL verification functions [17, 19]. As a consequence, CertShim will redundantly verify certificates in well-formed SSL code. The verification function hooks are superseded by the handshake hooks in normal usage, but we felt it important to hook the verification functions to ensure consistent certificate handling across different parts of the API. We show in Section 5 that the performance costs of using CertShim are minimal, and this redundancy is a small price to pay for the added coverage assurances.

**Network Context:**
Some alternate certificate verification methods, such as network probing, require a canonical hostname and port to validate an X509 certificate. However, the structures passed into OpenSSL and GnuTLS functions do not reliably contain this information due to the variety of ways these routines are invoked. To recover this information, we instrument the `getaddrinfo()`, `gethostbyname()`, and `connect()` system calls. By recording the parameters passed and returned from the original functions, we were able to perform reverse lookups that translated socket file descriptors to hostnames.