# 某DEX_VMP安全分析与还原

##### 译文声明
本文为翻译文章，译文仅供参考，具体内容表达及含义以原文为准。

## 目录
1. 思路整理
2. 某VMP入口特征
3. 定位VMP字节码
4. 分割VMP字节码
5. 还原为SMALI
6. 某VMP攻击面总结 && 启示
7. 深入VMP还原的一些问题
8. 调试与工具总结

## 一、思路整理
### 还原VMP需要哪些铺垫？
1. **定位VMP字节码**
2. **分割VMP字节码**
3. **还原为SMALI**

#### 为什么要找VMP字节码的位置？
如果无法找到目标方法的字节码地址，则无法进行后续的还原工作。

#### 为什么要分割VMP字节码？
为了将字节码反汇编成SMALI，需要知道每条SMALI指令对应的字节码长度。确定一条指令所占的字节数后，还需区分这些字节中的操作码和操作数。

#### 还原为SMALI
有了前两步的基础，最终可以解读完整的SMALI代码。

## 二、某安卓VMP入口特征（2021年8月样本）
- **跳板方法**
- **进入native后的参数处理逻辑**
- **为了处理不同类型的返回值，定义了多个JNI方法**
- **对应JNI函数入口指令情况**

## 三、定位VMP字节码
### 逻辑
根据上述逻辑，存在一个函数F，通过输入index可以得到对应的codeitem_addr：
\[ F(index) == codeitem\_addr \]

我们来看一下从index到codeitem_addr的过程（例如：0x2dce -> 0xcac85880）。

### 如何在十几万数量级的汇编中定位到这段代码？
通过Trace记录寄存器信息，使用关键数值0x2dce（index）和0xcac85880（codeitems），标记这两个数值出现的中间区间即可。

### 展开上面的定位方式的两个前提条件
已经知道了关键数据0x2dce，但还需要知道另一个前提条件，即codeitem是0xcac85880。那么这个信息是如何得知的？

#### 如何分析出codeitem的地址是0xcac85880？
1. **已知明文**
   - 目标APP内很多`onCreate()`方法普遍调用了`NBSTraceEngine.startTracing()`和`super.onCreate()`。
   - 选择一个被VMP保护的`onCreate()`作为分析目标，例如`ZxWebViewActivity.onCreate()`。

2. **沙箱日志获取切入点**
   - `ZxWebViewActivity.onCreate`内必定存在`NBSTraceEngine.startTracing()`和`super.onCreate()`。
   - `startTracing`为静态方法，会被编译为`invoke-static`。
   - `super.onCreate()`为超类调用，会被编译为`invoke-super`。
   - 我们猜测VMP对`invoke-static`模拟实现借助了JNI函数，触发`ZxWebViewActivity.onCreate()`执行并截取其调用序列。

3. **JNI参数`startTracing`来源回溯**
   - 在Trace中找到`GetStaticMethodID()`的出现位置，向上展开回溯，找到参数`"startTracing"`的最早出处。
   - 最终发现了一个起到决定性作用的偏移值0x000081de，它以`base + 0x000081de`的形式确立了参数`"startTracing"`。

4. **内存访问统计**
   - 0x81de来自内存位置0xcac858a8。
   - 检索对这片内存区域的访问情况，找到19条指令，最早的第一条指令出现在编号5691的位置，对应的内存地址为0xcac85890，说明这里是`ZxWebViewActivity.onCreate()`第一条字节码。
   - 由于`codeitem`第一条字节码之前有0x10个字节的固定内容，因此`0xcac85890 - 0x10`得到`codeitem`地址0xcac85880。

## 四、分割VMP字节码
现在已有某厂VMP `codeitems`的全部内容，但还不能直接反汇编成SMALI，因为还不知道每条指令的具体长度。

### 如何快速区分出操作码和操作数？
一般情况下，操作码后面会有一个EOR解密指令以及一系列类似定位handle的CMP指令操作，而操作数没有这些特征，这为区分操作码和操作数提供了依据。

### 操作码解密逻辑
- 由EOR指令向上查找key的出现位置，确定key的来源和解密逻辑。
- 大致逻辑如下：
  - `off1 = sub(codeitem当前指令地址, codeitem基址)`
  - `off2 = lsl(off1, 1)`
  - `key = load(base + off2)`
  - `de_opcode = xor(en_opcode, key)`

## 五、VMP字节码还原为SMALI
1. **标准Dalvik指令反汇编过程**
2. **VMP指令反汇编过程**
3. **还原VMP所有指令需要什么？**
4. **没有opcode对照表时如何展开还原？**

### 1. 标准Dalvik指令反汇编过程
### 2. VMP指令反汇编过程
- 通过已知明文条件作为切入点，已知`ZxWebViewActivity.onCreate()`中必定会调用`startTracing()`方法。
- 通过前面的分析得知关键值81de出现在这条`invoke-static`指令中，并充当操作数的角色。按照标准`invoke-static`反汇编规则进行解析，可以得到结论。
- VMP指令由标准指令基础上修改而来，有哪些异同？

### 3. 还原VMP所有指令需要什么？
### 4. 没有opcode对照表时如何展开还原？
- **接口猜测法**：通过JNI执行情况猜测`method`相关的`invoke`系列指令和`field`相关的`get`/`set`系列指令。
- **参数推导法**：方法调用前通常会准备参数，通常是声明类型的指令，可以缩小猜测的候选指令范围。
- **标准Dalvik指令格式的信息利用**：VMP指令由Dalvik标准指令略微修改/变异而来，保留了BIT位分布特征等信息，在还原时可以利用这些信息缩小候选范围。

## 六、某VMP攻击面总结 && 启示
1. **分析路径**
2. **攻击面总结 && 启示**

### 攻击面总结 && 启示
- **被VMP的方法内部存在已知明文指令**
- **VMP的实现高度依赖JNI函数，通过HOOK拿到其调用信息是非常有效的切入点与突破口**
- **codeitems的连续性和集中存储特性，通过内存访问统计最终被发现**
- **VMP指令由标准Dalvik指令基础上略改而来，整体仍然保留了很多可用信息**

## 七、深入VMP还原的一些问题
略

## 八、调试与工具总结
### 核心问题
- 获取程序完整的执行和数据信息（trace）。

### 目前公开的主流获取trace的方案
1. **GDB调试**
2. **FridaStalker编译执行**
3. **脱机unicorn模拟执行**

### 公开的主流获取trace的方案的弊端和缺陷
- **IDA / GDB**：速度极慢且会遭遇反调试。
- **FridaStalker**：不支持ARM指令的thumb模式，BUG多，遇到VMP.so中的花指令时基本无法正常使用。
- **PC上脱机unicorn模拟执行**：VMP.so中存在大量JNI call和system call，需要手动实现它们才能完成运行，过程繁琐且可能遭遇脱机unicorn检测。

### 基于以上问题的解决方案尝试
- 实现原始APP进程环境和原始context中，通过unicorn构造虚拟化CPU，执行目标function，获得trace。该方案无已知检测和对抗手段，可无脑过一切反调试。

### 基于trace进行离线分析
- **trace形态可视化**：文本、JSON、数据库、EXCEL可视化表格、动态CFG图。
- **基本的分析**：地址含义解析、调用符号识别。
- **程序分析**：污点分析、相似性分析等。

## 团队信息
### Vulpecker Team
隶属于360公司信息安全部，致力于手机APP及IOT安全，专注于移动安全研究。团队定制了公司内部产品安全开发规范，在提高工作效率的同时也为开发者提供了便捷的安全测试平台。同时，团队活跃在谷歌、三星、华为等各大手机厂商的致谢名单中，挖掘的漏洞屡次获得CVE编号及致谢。在保证360产品安全的前提下，团队不断对外输出安全技术，为移动互联网安全贡献一份力量。

### 作者