In my experience most colors in 3D graphics are 4 channel colors (red, green,
blue and alpha.) It is only a subset of situations in 3D graphics where a 3
channel color is sufficient and usually that deals with solid surface shading
algorithms.
Many situation, such as windows with varying transparent, volume effects and
particle effects often need RGBA-based colors. Also blending algorithms where
one engages in post-processing one also often needs 4 channel-based colors.
Thus I propose creating a Color4 class that enables easy usage of 4-channel
colors.
NOTE: I am unsure of the best way to share the conversion code that is fairly
common (and bulky) between Color4 and the existing Color (which I suggest
renaming Color3.)
Here is my proposed Color4 class:
**Color4**
properties:
  * r as Scalar
  * g as Scalar
  * b as Scalar
  * a as Scalar // a is last so that it matches OpenGL/WebGL style: http://goo.gl/GKuD8
methods:
  * set( value )
  * setRGBA( r, g, b, a )
  * setHSV( h, s, v ) // centralize in helper as HSV doesn't have alpha
  * setStyle( style as string ) // centralize in helper
  * setHex( hex as Integer )
  * copy( color as Color4 )
  * _copyGammaToLinear( color as Color4 )_ // I think we don't need this on either Color/Color3 or Color4, just use copy(..).convertGammaToLinear()
  * _copyLinearToGamma( color as Color4 )_ // I think we don't need this on either Color/Color3 or Color4, just use copy(..).convertLinearToGamma()
  * convertGammaToLinear()
  * convertLinearToGamma()
  * getHex() // centralize in helper ?
  * getHexString() // centralize in helper
  * getStyle() // centralize in helper
  * getHSV() // centralize in helper as HSV doesn't include alpha
  * lerpSelf( color as Color4, alpha as Scalar )
  * clone()
  * bool equals( color as Color4 ) // this needs to be added to Color/Color3