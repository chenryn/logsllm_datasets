# dwangoAC and TASBot: The Perfectionist's Guide to Tool-Assisted Speedruns

## Agenda
- Introduction to Speedrunning, Tool-Assisted Speedruns, and Emulators
- TASBot: Playing Back a TAS on Real Hardware
- TAS Techniques, History, and Evolution
- Emulator Tools: Memory Search, Lua Scripting
- Beyond Emulators: Disassemblers and Binary Ninja
- Remaining Limitations: Emulator Differences and Inaccuracies
- Key Point: TAS Tools as Fun Penetration Testing Tools
- Interactive Demo of Pokémon Red, Q&A

## Introduction to Speedrunning
Speedrunning involves completing video games as quickly as possible. This practice is partly inspired by in-game completion timers, such as those found in Metroid. Speedrun categories range from "any%" (completing the game as fast as possible with any means) to "low% no major glitches" (completing the game with minimal use of glitches). Websites like SpeedDemosArchive.com track the fastest completion times, ensuring strict rules and peer review to prevent cheating.

### Speedrunning Records
Records are verified through video captures or live demonstrations at events like Games Done Quick (GDQ). Some speedrunners even push beyond standard limits, attempting runs blindfolded or one-handed.

## Tool-Assisted Speedruns: Pushing the Limits
Tool-Assisted Speedruns (TAS) involve using tools to achieve faster completion times than humanly possible. These tools include saving/loading game states, frame advance, and scripting. TAS techniques were initially developed for PC games like Doom and Quake. By the late 1990s, notable TAS runs, such as "Doom Done Quick," achieved impressive times, such as 19:41.

### TAS Videos and Controversy
TASVideos.org, founded by Bisqwit, hosts runs for various platforms. A 2003 run of Super Mario Bros. 3 by Morimoto was unlabeled, leading to controversy. TAS can be seen as the "doped Olympics" of gaming, with no rules, but it provides a lot of fun and challenge in beating games.

### Live Demo: TASBot
TASBot is a device that plays back movie files of button presses on real hardware. During the demo, TASBot will mimic a real controller while explanations are provided.

## Emulation and Rerecording Frameworks
TAS techniques are enabled by emulators of video game consoles, such as FCEUX (NES), lsnes (SNES), VBA (Game Boy), and BizHawk (multiple platforms). Some platforms, like Windows, have rerecording frameworks, such as Hourglass and specialized projects like nethack-tas-tools.

### Emulation Accuracy
Early emulators were highly inaccurate, but accuracy has improved over time through clean room reverse engineering. Some emulators, like those developed by Byuu, achieve extreme accuracy, allowing movie files to match actual hardware frame for frame. This precision enables "console verification" without voiding warranties.

### Console Verification Devices
- **2009**: true from TASVideos.org used a PIC microcontroller to press NES buttons.
- **2011**: micro500 built NESBot, and DarkKobold demonstrated SMB2 and Wizards and Warriors 3 at SGDQ.
- **2012-2013**: Devices for other consoles, such as Genesis and N64, were added.
- **2014**: I (dwangoAC) pitched TAS for AGDQ, resulting in true creating a new device. I combined a board with a R.O.B. using Legos, and others named him TASBot.

### Advanced Emulator Tools
- **Memory Searching and Lua Scripting**: Combined with frame advance and savestates, these tools are very powerful.
- **Disassembly**: Tools like Binary Ninja provide graph views, low-level IL, and annotation support, making reverse engineering more accessible.

### Arbitrary Code Execution
TAS tools can also be used to glitch games and execute arbitrary code. For example, in Pokémon Red, values in the controller register can be treated as opcodes, allowing full access to the SNES.

## Security Research and TAS
The principles and terminology in TAS translate well to security research:
- **Savestate = VM snapshot**
- **Frame advance = VM CPU tick**
- **Glitch = Vulnerability**
- **Total Control = Pwned / Arbitrary Control Exploit**

Learning how to make a TAS can be both fun and educational.

## References and Thanks
- [TASVideos.org/TASBot.html](http://tasvideos.org/TASBot.html)
- [Ars Technica - How an emulator-fueled robot reprogrammed Super Mario World on the fly](http://arstechnica.com/gaming/2014/01/how-an-emulator-fueled-robot-reprogrammed-super-mario-world-on-the-fly/)
- [Ars Technica - Pokemon Plays Twitch: How a robot got IRC running on an unmodified SNES](http://arstechnica.com/gaming/2015/01/pokemon-plays-twitch-how-a-robot-got-irc-running-on-an-unmodified-snes/)
- [Alchemist Owl - PoC||GTFO Issue 10 - Page 6](https://www.alchemistowl.org/pocorgtfo/pocorgtfo10.pdf)
- [Ars Technica - How to beat Super Mario Bros. 3 in less than a second](http://arstechnica.com/gaming/2016/07/how-to-beat-super-mario-bros-3-in-less-than-a-second/)

Special thanks to the many talented TAS'ers and hackers from TASVideos.org and elsewhere, including micro500, Ilari, p4plus2, Masterjun, true, TheAxeMan, ais523, and everyone in #tasvideos. Thanks also to the staff of Games Done Quick for organizing the event and giving us a reason to do all the crazy things we do.

## Questions?
Presented and written by Allan Cecil (AKA dwangoAC)