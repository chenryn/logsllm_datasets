> Issue originally made by @bergus
### Bug information
  * **Babel version:** v6.x (babel.io/repl)
### Options
    plain preset es-2015, nothing else
### Input code
    "use strict";
    function foo1() {
      for (let bar = 2; bar < 3; bar++) {
        let bar = 4;
      }
    }
    function foo2() {
      var bar;
      for (let bar = 2; bar < 3; bar++) {
        let bar = 4;
      }
    }
[[
https://babeljs.io/repl/#?evaluate=true&lineWrap=false&presets=es2015&code="use%20strict"%3Bfunction%20foo1()%20{%20%20for%20(let%20bar%20%3D%202%3B%20bar%20<%203%3B%20bar%2B%2B)%20{%20%20%20%20let%20bar%20%3D%204%3B%20%20}}function%20foo2()%20{%20%20var%20bar%3B%20%20for%20(let%20bar%20%3D%202%3B%20bar%20<%203%3B%20bar%2B%2B)%20{%20%20%20%20let%20bar%20%3D%204%3B%20%20}}
| produces ]]
    "use strict";
    function foo1() {
      for (var bar = 2; bar < 3; bar++) {
        var bar = 4;
      }
    }
    function foo2() {
      var bar;
      for (var bar = 2; bar < 3; bar++) {
        var _bar = 4;
      }
    }
### Description
In `foo1` it should produce two different `bar` variables - the one in the
body of the loop is block-scoped and not the same as the one created by the
loop. See also http://stackoverflow.com/q/37855990/1048572
Now that might be a simple bug, but it's getting weird in `foo2` where a
function-level `bar` is introduced (both `let` and `var` and parameters
reproduce this). Here the `bar` variables of the loop and the body are indeed
separated as expected, but the one of the loop header collides with the
function-scope one. This does usually work - as long as there is no `let`
declaration in the loop body.