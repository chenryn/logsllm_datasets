timized, show efﬁciency that is more than sufﬁcient for
all practical surveys. In particular, our implementation
utilizes only 1 core of the CPU; it is straightforward
to parallelize user registration, and survey veriﬁcation
over multiple cores and machines by simply having all
cores run the same processes and balancing the load
(i.e., the number of registrations or surveys to verify)
given to any particular core. Similarly, when generating
new surveys, we can split the participant list among a
number of different cores at the SA, and each would
sign the names of the individuals on its portion of the
list.
Our results show that one or two modern workstations
or server systems are sufﬁcient
to manage surveys
into the millions using the more efﬁcient smaller sized
groups, and a small number of high-performance ma-
chines (on the order of 5 to 10) would easily handle
surveys of larger sizes or similar sizes using the larger
group size. User side computation is reasonably neg-
ligible. Submitting a survey, or verifying a submitted
survey, the most expensive operations a user might want
to do, took in the strongest security setting at most 2.5
seconds.
1) System: All tests were done on a 3.06 GHZ Intel
Core 2 Duo, Late 2009 iMac with 12GB 1067 MHZ
DDR3 RAM with a 5400RPM SATA HD. This machine
is several years old and much slower than a modern
server.
A. Experiments
time over a short
When considering survey life cycles, there are three
actions that are potentially computationally intensive:
i) mass registration of users, ii) generation of large
surveys by the SA, and iii) verifying ballots for large
surveys, as many ballots may need to be veriﬁed in
real
time period. Generating RA
keys and SA keys is computationally efﬁcient on our
system, and moreover they are done once per entity
and unlikely to be generated in large quantity. Similarly,
so long as submitting and user registration are not
so slow as to cause consternation, their performance
is relatively unimportant, as each user performs their
own computation in a decentralized manner. In contrast,
large surveys may be generated and run in a centralized
location, so it is important that the generation of the
survey list be scalable, and a reasonable system be able
to validate a large number of incoming submitters.
We performed the following experiments i) RA Key
Generation, ii) SA Key Generation, iii) User Registra-
tion, iv) survey Generation by the SA, and v) Submis-
sion. RA and SA generation is simple, and we simply
ran the protocols. For user generation we constructed
a large set of unique user names, and registered each
user sequentially. We report on the time taken per regis-
tration. We recorded the computation time for the user
and the RA separately. For survey registration we took
the user-names generated previously, and constructed
survey lists out of them. Since this is one large computa-
tion, we report on the aggregate time for a small survey
of 300 submitters, and the average time per submission.
We have veriﬁed that this time scales linearly with the
number of submitters as one would expect.12 Finally,
we consider actual submission, and measure the time
for the submitter to submit their response, and the time
necessary for the SA to verify the submission. These
measurements are done per submitter.
Each of the experiments below was performed 100
times, with mean and standard deviation of times re-
ported in milliseconds in Table I. The measured times
correspond only to the time necessary to compute the
appropriate cryptography and store the result to disk.
There is no network measurements involved. We discuss
this in the next subsection. The most expensive opera-
tion is the mass veriﬁcation of surveys that should be
done by a survey authority when surveys are submitted,
11During the user registration protocol, the veriﬁer sends back
(cid:2)
another element σ3 = gr, so that the user can compute σ
1 = σ1/σr
3.
This is the only extra information needed to accommodate the
asymmetry, and clearly does not affect security.
12We have created surveys of 1 million users on our machine, but
due to time constraints only computed this once with the smaller
group: it took approximately 42 minutes, inline with the expected
linear extrapolation.
387
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:56 UTC from IEEE Xplore.  Restrictions apply. 
TIMING RESULTS FROM THE IMPLEMENTATION OF OUR CONCRETE SYSTEM.
Table I
Operation
RA Key Gen
SA Key Gen
User Side User Registration
RA Side User Registration
User Veriﬁcation User Registration
SA survey Generation (300 submitters)
SA survey Generation (per Questnr.)
User Submission
SA Verify Submission
BN Curve
BLS Curve
Mean (ms)
StdDev (ms) Mean (ms)
StdDev (ms)
55.30
14.54
3.35
7.91
58.25
706.85
2.36
88.20
121.52
2.69
1.93
0.71
2.36
25.62
16.47
4.97
7.03
882.94
224.21
6.11
13.65
69.69
8,116.11
27.05
1,482.98
2,247.29
147.41
60.23
18.67
30.09
103.49
911.62
144.02
251.28
to ensure their legitimacy. In the more practical smaller
group sized implementation (i.e., the less stringent secu-
rity assumptions) we can verify 1 million submissions
in about 33 hours per core on our system. Assuming
a reasonable 4 cores per system gives us a little over
8 hours for 1 system. Or 3 systems could process
in about 2 hours. Even in the most stringent security
case, assuming we had to verify the submissions of 1
million people, we could use about 20 machines with 4
cores each, and compute the results in under 8 hours.
If there is no need to keep the survey results private,
this computing power can be rented from the cloud
(e.g., AWS), making the costs low. Veriﬁcation does
not need private information, so there is less risk in
renting resources. Survey generation and the RA’s side
of user registration are other places where computing
costs are centralized with an authority. Both are at
least an order of magnitude less time intensive than
survey veriﬁcation, and can be distributed over similar
resources efﬁciently.
Storage and Bandwidth Requirements: Storage and
bandwidth requirements are both very reasonable for
such schemes. Each element in the survey list output
during the Survey Registration is less thank 1KB, as
are the users’ secret tokens. The most expensive NIZK
used in the submission of the survey is smaller than
8KB. The above excludes the length of the IDs, which
are system dependent, but are reasonably on the order
of a few hundred bytes at most.
B. Anonymous Communication & Participant Lists
In practice, the user needs to anonymously submit a
single message to the SA during survey submission. In
moderate-security settings, proxy services can be used
to transmit the data, and in high-security settings, onion-
routing such as TOR [38] may be used. Another issue
that arises is the distribution of the survey participant list
for a survey. For small surveys, this is inconsequential,
but when participant rolls get into the millions, the ﬁle
of eligible submitters with corresponding information
can become large. Deploying this to each user is deﬁ-
nitely feasible (a typical OS patch push hits millions of
people), but there are easy alternatives that can slacken
the requirement. E.g., wild-cards can be used to ease en-
rollment, or separate participant lists can be constructed
of smaller size: Anonymity is slightly weakened, but we
are not aware of any surveys where participants scale to
a million submitters with full anonymity, and thus some
weakening may be acceptable.
ACKNOWLEDGMENTS
All opinions expressed and implied in this work are
solely those of the authors and do not represent or reﬂect
the views of their respective universities.
REFERENCES
[1] S.
Staff,
“Security
breach
identity theft,” 2009.
leaves
at
risk of
[Online]. Available:
http://thetruthwillrise.wordpress.com/2009/06/25/security-
breach-leaves-45000-at-risk-of-identity-theft/
45,000
[2] P. C. A. for Submission., “Observations on the Course
Review System at the University of Virginia,” 2013.
[3] M. Riley,
to
swap
agencies
of
“U.s.
thousands
data
[Online].
http://www.bloomberg.com/news/2013-06-
with
Available:
14/u-s-agencies-said-to-swap-data-with-thousands-of-
ﬁrms.html
ﬁrms,”
2013.
said
[4] D. Chaum and T. P. Pedersen, “Wallet databases with
observers,” in CRYPTO, vol. 740, 1992, pp. 89–105.
388
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:56 UTC from IEEE Xplore.  Restrictions apply. 
[5] K. Sako and J. Kilian, “Receipt-free mix-type voting
scheme – a practical solution to the implementation of
a voting booth,” in Eurocrypt 1995, 1995.
[22] D. Chaum, “Security without identiﬁcation: Transaction
systems to make big brother obsolete.” Communications
of the ACM, vol. 28(10), pp. 1030–1044, October 1985.
[6] A. Neff, “A veriﬁable secret shufﬂe and its application
to e-voting,” in CCS 2001, 2001.
[7] J. Benaloh, “Simple veriﬁable elections,” in EVT 2006,
2006.
[8] B. Adida, “Helios: Web-based open-audit voting,” in
USENIX 2008, 2008.
[9] R. Canetti, “Universally composable security: A new
paradigm for cryptographic protocols,” in FOCS ’01,
2000, see updated version at Cryptology ePrint Archive:
Report 2000/067.
[10] A. Juels, M. Luby, and R. Ostrovsky, “Security of blind
digital signatures (extended abstract),” in CRYPTO ’97,
1997, pp. 150–164.
[11] J. Camenisch and A. Lysyanskaya, “Signature schemes
and anonymous credentials from bilinear maps,” in
CRYPTO, 2004, pp. 56–72.
[12] J. Camenisch,
S. Hohenberger, M. Kohlweiss,
A. Lysyanskaya, and M. Meyerovich, “How to win
the clonewars: Efﬁcient periodic n-times anonymous
authentication,” in ACM CCS ’06, 2006, pp. 201–210.
[13] A. Sahai, “Non-malleable non-interactive zero knowl-
in
chosen-ciphertext
security,”
and adaptive
edge
FOCS’99, 1999, pp. 543–553.
[14] R. Pass and A. Rosen, “Concurrent non-malleable com-
mitments,” SIAM Journal of Computing, 2008.
[15] ——, “New and improved constructions of non-
malleable cryptographic protocols,” SIAM Journal of
Computing, 2008.
[16] A. Fiat and A. Shamir, “How to prove yourself: Practical
solutions to identiﬁcation and signature problems,” in
CRYPTO ’86, 1986, pp. 186–194.
[17] D. Chaum and E. van Heyst, “Group signatures,” in
EUROCRYPT ’91, 1991, pp. 257–265.
[18] M. Bellare, D. Micciancio, and B. Warinschi, “Founda-
tions of group signatures: Formal deﬁnitions, simpliﬁed
requirements, and a construction based on general as-
sumptions,” in EUROCRYPT, 2003, pp. 614–629.
[19] D. Boneh, X. Boyen, and H. Shacham, “Short group
signatures,” in CRYPTO ’04, 2004, pp. 45–55.
[20] R. L. Rivest, A. Shamir, and Y. Tauman, “How to leak
a secret,” in ASIACRYPT ’01, 2001, pp. 552–565.
[23] J. Camenisch and A. Lysyanskaya, “Efﬁcient non-
transferable anonymous multi-show credential system
with optional anonymity revocation,” in EUROCRYPT
’01, vol. 2045, 2001, pp. 93–118.
[24] ——, “A signature scheme with efﬁcient protocols,” in
SCN, 2002, pp. 268–289.
[25] J. Camenisch, S. Hohenberger, and A. Lysyanskaya,
“Compact e-cash,” in EUROCRYPT ’05, 2005, pp. 302–
321.
[26] S. Goldwasser, S. Micali, and R. L. Rivest, “A digital sig-
nature scheme secure against adaptive chosen-message
attacks,” SIAM J. Computing, vol. 17(2), pp. 281–308,
1988.
[27] T. P. Pedersen, “Non-interactive and information-
theoretic secure veriﬁable secret sharing,” in CRYPTO,
1991, pp. 129–140.
[28] O. Goldreich, S. Goldwasser, and S. Micali, “How to
the ACM,
Construct Random Functions,” Journal of
vol. 33, no. 4, pp. 792–807, 1986.
[29] O. Goldreich, The Foundations of Cryptography. Cam-
bridge University Press, 2001.
[30] A. D. Santis, G. D. Crescenzo, R. Ostrovsky, and G. Per-
siano, “Robust non-interactive zero knowledge,” SIAM
Journal on Computing, vol. 20, pp. 1084–1118, 2001.
[31] R. Cramer, I. Damg˚ard, and B. Schoenmakers, “Proofs
of partial knowledge and simpliﬁed design of witness
hiding protocols,” in CRYPTO, 1994, pp. 174–187.
[32] Y. Dodis and A. Yampolskiy, “A Veriﬁable Random
Function with Short Proofs and Keys,” in PKC ’05, vol.
3386 of LNCS, 2005, pp. 416–431.
[33] D. Boneh and X. Boyen, “Efﬁcient selective-ID secure
Identity-Based Encryption without random oracles.” in
EUROCRYPT ’04, 2004, pp. 223–238.
[34] C.-P. Schnorr, “Efﬁcient signature generation by smart
cards,” Journal of Cryptography, vol. 4, pp. 161–174,
1991.
[35] J. Camenisch and M. Stadler, “Efﬁcient group signature
schemes for large groups,” in CRYPTO ’97, vol. 1296 of
LNCS, 1997, pp. 410–424.
[36] M. Scott, “Multiprecision Integer and Rational Arith-
metic C/C++ Library (MIRACL),” published by Shamus
Software Ltd., http://www.shamus.ie/.
[37] V. Shoup, “Lower bounds of discrete logarithms and
related problems,” in Proceedings of Eurocrypt ’97,
1997, pp. 256–266.
[21] M. Bellare, H. Shi, and C. Zhang, “Foundations of group
signatures: The case of dynamic groups,” in CT-RSA,
2005, pp. 136–153.
[38] R. Dingledine, N. Mathewson, and P. Syverson, “Tor:
The second-generation onion router,” in USENIX 2004,
2004.
389
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:56 UTC from IEEE Xplore.  Restrictions apply.