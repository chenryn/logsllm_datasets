### 优化后的文本

我们的实现展示了在所有实际调查中都足够高效的性能。特别是，当前的实现仅使用了CPU的一个核心；用户注册和调查验证可以通过简单的负载均衡（即分配给每个核心的注册数量或待验证的调查数量）轻松地并行化到多个核心和机器上。同样，在生成新的调查时，我们可以在调查机构（SA）的多个核心之间拆分参与者名单，并让每个核心对其部分名单中的个人名称进行签名。

实验结果显示，一到两台现代工作站或服务器系统足以管理数百万份采用更高效小规模组的调查，而少量高性能机器（大约5到10台）可以轻松处理更大规模或类似规模的调查。用户的计算量相对较小。在最强的安全设置下，提交调查或验证已提交的调查，这些最耗时的操作最多也只需要2.5秒。

#### 系统配置
所有测试均在一台3.06 GHz Intel Core 2 Duo、配备12GB 1067 MHz DDR3 RAM 和5400 RPM SATA硬盘的2009年末iMac上进行。这台机器已经有些年头，比现代服务器慢得多。

#### 实验
在考虑调查生命周期时，有三个可能计算密集的任务：i) 大批量用户注册，ii) SA生成大规模调查，以及iii) 验证大规模调查的选票，因为许多选票需要实时验证。生成RA密钥和SA密钥在我们的系统上计算效率很高，并且每个实体只需生成一次，不大可能需要大量生成。此外，只要提交和用户注册的速度不至于让用户感到不满，它们的性能就相对不重要，因为每个用户都是以去中心化的方式完成自己的计算。相比之下，大规模调查可能在一个集中位置生成和运行，因此调查列表的生成必须具有可扩展性，合理的系统能够验证大量的提交者。

我们进行了以下实验：i) RA密钥生成，ii) SA密钥生成，iii) 用户注册，iv) SA生成调查，v) 提交。RA和SA密钥生成过程简单，我们直接运行了协议。对于用户注册，我们构建了一个大型的独特用户名集，并依次注册每个用户。我们记录了每次注册所需的时间，分别报告了用户端和RA端的计算时间。对于调查注册，我们使用了之前生成的用户名，并从中构建了调查列表。由于这是一个大的计算任务，我们报告了小型调查（300个提交者）的总时间和平均每个提交者的时间。我们已经验证了这一时间随着提交者的数量线性增长，这是预期的结果。最后，我们考虑实际提交情况，测量了提交者提交响应的时间以及SA验证提交所需的时间。这些测量是针对每个提交者进行的。

下面的每个实验均重复了100次，表I中报告了平均值和标准差（单位为毫秒）。所测得的时间仅包括必要的密码学计算和将结果存储到磁盘的时间，没有涉及网络传输时间。我们将在下一节讨论这一点。最昂贵的操作是当调查被提交时，由调查机构进行的大批量验证。

#### 存储和带宽要求
这种方案的存储和带宽要求都非常合理。调查列表输出中的每个元素都小于1KB，用户的秘密令牌也是如此。提交调查时使用的最昂贵的NIZK也小于8KB。以上数据不包括ID的长度，但ID通常是几百字节左右。

#### 匿名通信与参与者列表
在实践中，用户需要在提交调查时匿名向SA发送一条消息。在中等安全设置下，可以使用代理服务来传输数据；而在高安全设置下，则可以使用洋葱路由（如TOR）。另一个问题是调查参与者名单的分发。对于小型调查，这无关紧要，但当参与者人数达到数百万时，包含相应信息的合格提交者文件会变得很大。虽然将这个文件部署到每个用户是可行的（典型的OS补丁推送会覆盖数百万人），但也有简单的替代方法可以减轻这一要求。例如，可以使用通配符简化注册，或者构建较小的参与者名单：这样虽然稍微削弱了匿名性，但在大多数调查中，参与者的规模并未达到一百万，因此一定程度的削弱是可以接受的。

#### 致谢
本文表达的所有观点仅代表作者个人观点，并不代表其所在大学的观点。

#### 参考文献
[此处省略参考文献]

---

希望上述优化后的文本能更好地满足您的需求。如果还有其他需要进一步调整的地方，请随时告知。