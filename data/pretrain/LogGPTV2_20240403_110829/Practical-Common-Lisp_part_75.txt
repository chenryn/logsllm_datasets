带有内部缓冲区的流，从而并非每个READ-BYTE和WRITE-BYTE都产生系统调用，函数调用本身
BYTE。有可能每个调用都产生成本相对高昂的系统调用来读写一个字节。即便Lisp实现了自己的
单版本的play-current可能足够高效，也可能不是。
实现play-current的一种更高效但也更复杂的方式是使用READ-SEQUENcE和wRITE-
根据你的具体Lisp实现是如何处理它的流的，以及需要一次服务多少个MP3客户端，这个简
(defun play-current (out song-source next-metadata metadata-interval)
(((anos-buos buos-quaxins) buos)) qa)
buffer))
(when song
(let ((metadata (make-icy-metadata (title song)))·
do (setf (aref buffer i) (char-code char)))
for i from 1
for char across text
(labels ((write-buffer (start 
(multiple-value-bind (skip-blocks skip-bytes)
{buffer (make-array 
(unless (file-position mp3 (* skip-blocks (length buffer)))
(floor (id3-size song) (length buffer))
(error
(write-buffer-with-metadata (start end)
(cond
(if metadata-interval
"Couldn't skip over ~d ′
((> next-metadata (- end start))
(write-sequence buffer out :start start :end end)))
(write-buffer-with-metadata start end)
(let ((middle (+ start next-metadata)))
t
(decf next-metadata (-
(write-sequence buffer out :start start :end end)
(setf next-metadata metadata-interval)
write-sequence metadata out)
www.TopSage.com
end)
end start)))
28.3
'(unsigned-byte 8))
实现 Shoutcast
355
---
## Page 373
Shoutcast服务器的Web接口，
356
现在你可以用所有这些东西来做点什么了。在下一章里，你将编写一个本章所开发的
第28章实践：Shoutcast服务器
next-metadata)))
for
，它使用第27章的MP3数据库作为歌曲源。
 skip-blocks (length buffer)))
www.TopSage.com
(still-current-p song song-source)))
skip
then
---
## Page 374
简单：
用于主MP3数据库的模式相同。用来初始化songs-table的函数make-playlist-table十分
表对象中找出它的id是什么的话，这会使调试更加方便。
个播放列表。你实际上并不需要将其保存在playlist对象中，但如果可以从一个任意的播放列
过排序和乱序来重新调整播放列表。
之外的功能：用户将通过Web接口来向播放列表中添加歌曲，删除已在播放列表中的歌曲以及通
(playlist），将其作为Shoutcast服务器所需的歌曲源。播放列表还将提供超出Shoutcast服务器需要
29.1
整合起来：MP3数据库、第26章的define-url-function宏，当然还有Shoutcast服务器本身。
Shoutcast服务器将会播放指定的歌曲。为了开发应用的这个组件，你需要把一些前面几章的代码
播放列表的核心是songs-table槽，它用来保存一个table对象。用于这个表的模式将和
接口背后的基本思想是每个MP3客户端连接到Shoutcast服务器上，获取它们自己的播放列表
(defun make-playlist-table ()
播放列表的ia是其关键字，你从请求对象中解出它并传递给find-song-source来查询一
你可以像下面这样来定义一个表示播放列表的类：
(defclass playlist ()
(make-instance 
(id
(lock 
(user-agent
(ordering
(current-idx
(current-song:
songs-table
播放列表
repeat
shuffle
第29章
'table :schema *mp3-schema*))
:reader
:accessor ordering 
:accessor current-idx
:accessor current-song 
:accessor
:accessor
:accessor
accessor
实践：MP3浏览器
lock 
 repeat
shuffle
user-agent
 songs-table 
id
www.TopSage.com
:initform (make-process-lock))))
:initform
:initform 0)
:initform
:initform
:initform
:initform
:initarg :id)
1 :none)
1 :album)
:none
(make-playlist-table))
---
## Page 375
的MULTIPROCESSING包的一部分。你将需要在操作playlist对象的特定函数中用到这个锁，以
播放列表的页面上，从而容易看出当有多个用户连接时播放列表与连接的对应关系。
接口才保存这个值的——User-Agent头标识了产生请求的程序，因此可以将该值显示在列出所有
而如果是：all的话，在最后一首歌结束以后current-song将回到第一首歌上。
一个默认的MP3上；当：repeat为：song时，播放列表将不断地返回到相同的current-song上；
如果：repeat是：none，那么在songs-table的最后一首歌播放完以后，current-song回滚到
指定了songs-table应当如何被乱序。
:artist、:album和：song。shuffle槽保存下列关键字之一：：none、：song或：album。
一个关键字来告诉songs-table在其不是乱序时应当怎样排序。合法的值包括：genre、
如何在每当current-idx改变时确保更新current-song。
的song对象，而current-idx是song-table中代表当前歌曲的行的索引。你将在29.3节中看到
shuffle-table重排播放列表。
用insert-row向播放列表中添加歌曲，用delete-rows删除歌曲以及用sort-rows和
符号而不需要其他的139个符号。
号，并从MULTIPROCESSING包中导入了其余两个，这是因为它只需要这两个包中导出的5个
user-agent槽保存MP3客户端在其对流的请求中发送的User-Agent头。你纯粹是为了Web
repeat槽也保存一个关键字，：none、：song或：all之一，指定了播放列表的重复模式。
current-song和current-idx槽用来跟踪当前正在播放哪首歌曲：current-song是实际
358
最后，lock槽中保存了一个由函数make-process-lock创建的“进程锁”，该函数是Allegro
ordering和shuffle槽保存关于songs-table中的歌曲顺序的信息。其中ordering槽保存
通过将歌曲的列表保存在一个表中，可以使用第27章的数据库函数来操作播放列表：你可以
由于这是一个高阶应用，它用到了许多底层包。
可以使用下列DEFPACKAGE来定义用于本章中代码的包：
(defpackage:com.gigamonkeys.mp3-browser
(:export :start-mp3-browser))
(:use :common-lisp
第29章实践：MP3浏览器
:com.gigamonkeys.id3v2)
:com.gigamonkeys.mp3-database
:net.aserve
:with-process-lock)
:make-process-lock
:multiprocessing
:remote-host)
www.TopSage.com
它还从ACL-SOCKET包中导入了三个符
红网
它
---
## Page 376
请求对象中抓取User-Agent字符串并保存在播放列表对象中。
它接受 AllegroServe请求对象并返回适当的播放列表标识符。find-song-source函数也负责从
playlist对象，并用with-process-lock来确保每次只有一个线程在操作哈希表。
EQUAL哈希表，并用它来将一些标识符映射到playlist对象上。
个客户端找出那个正确的播放列表来。具体的映射部分很简单一
source上实现一个方法。由于你打算拥有多个播放列表，需要一种方式来为连接到服务器的每
29.2
全地对同一个锁对象加锁多次。
最后再释放锁。在默认情况下with-process-lock允许递归加锁，这意味着同一个线程可以安
其中的with-process-lock宏要求获得对给定进程锁的排他访问，然后再执行其主体Lisp形式,
lock宏构建出来的：
个播放列表锁的情况下进行处理的代码，该宏是从来自MULTIPROCESSING的with-process-
确保每次只有一个线程在操作给定的播放列表对象。可以定义下面的宏来包装一组需要在保持一
①并发编程的复杂度超出了本书的讨论范围。基本的思想是，如果你有多个控制线程，就像在当前的应用里这样，
(defmethod find-song-source ((type (eql 'playlist)) request)
然后你就可以在该函数和另一个函数playlist-ia的基础上实现find-song-source了，
然后定义一个函数根据给定ID来查询一个播放列表，如果必要的话就创建一个新的
(defun lookup-playlist (id)
你还需要定义一个进程锁来保护对这个哈希表的访问，如下所示：
为了将playlist用作Shoutcast服务器的歌曲源，需要在第28章的广义函数find-song-
(defmacro with-playlist-locked ((playlist) &body body)
(defparameter *playlists-lock* (make-process-lock :name "playlists-lock"))
(defvar *playlists* (make-hash-table :test #'equal))
做的事。
with-process-lock确保了每个线程都可以获得对哈希表的排他访问，以便有足够长的时间来完成它们想
果两个新的MP3客户端正在同时连接，它们都试图添加一项到*playlists*中，那么这有可能互相影响。
的某个对象，以避免当一个线程工作在该对象时另一个线程看到了不一致的状态。例如，在当前这个函数中，如
一些线程运行shoutcast函数而另一些线程回应浏览器的请求，那么你需要确保每次只有一个线程在操作给定
(let （(playlist (lookup-playlist 
(with-process-lock
作为歌曲源的播放列表
(with-process-lock ((lock ,playlist))
（or
（let
(setf (gethash id *playlists*) (make-instance 'playlist :id id)))))
(gethash
({user-agent (header-slot-value request :user-agent)))
*playli
(*playlists-lock*)
(playlist)
ists*
www.TopSage.com
(playlist-id request))))
29.2作为歌曲源的播放列表
--你可以定义一个变量来保存
359
---
## Page 377
复模式被改变时。
被添加到播放列表时更新，比如当Shoutcast服务器播完了所有歌曲，或者甚至是在播放列表的重
式，最明显的一种是当Shoutcast服务器调用maybe-move-to-next-song时。但它还可以在歌曲
的状态得到一致的视图。
current-song才被更新到新的song对象上。你再次需要获取一个进程锁以确保可以对playlist
的方法是像下面这样定义一个:around方法：
的访问是线程安全的，需要在访问current-song槽之前锁定该playlist。在本例中，最简单
获得了特化在playlist上的可返回该槽的值的current-song方法。不过，为了使对playlist
current-song方法已经准备好了：通过在current-song槽上定义同名的访问函数，会自动地
current-p和maybe-move-to-next-song上定义将source参数特化在playlist上的方法。
是Allegro的socket库的一部分。