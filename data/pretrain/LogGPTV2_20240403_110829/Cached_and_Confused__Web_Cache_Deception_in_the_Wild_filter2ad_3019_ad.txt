that WCD, as a class of vulnerability, tends not to require an
attacker to authenticate to a vulnerable site in order to exploit
those vulnerabilities. In other words, requiring strict account
veriﬁcation through credentials such as valid SSNs or credit
card numbers is not a viable mitigation for WCD.
4.4 Study Summary
Summarizing the major ﬁndings of this ﬁrst experiment, we
found that 16 out of 295 sites drawn from the Alexa Top 5K
contained web cache deception (WCD) vulnerabilities. We
note that while this is not a large fraction of the sites scanned,
these sites have substantial user populations as to be expected
with their placement in the Alexa rankings. This, combined
with the fact that WCD vulnerabilities are relatively easy to
exploit, leads us to conclude that these vulnerabilities are
serious and that this class of vulnerability deserves attention
from both site administrators and the security community.
We found that the presence of cache headers was an unre-
liable indicator for whether a resource is cached, implying
that existing detection tools relying on this signal may in-
advertently produce false negatives when scanning sites for
WCD vulnerabilities. We found vulnerable sites to leak PII
that would be useful for launching spearphishing attacks, or
security tokens that could be used to impersonate victim users
or bypass important web security defenses. Finally, the WCD
vulnerabilities discovered here did not require attackers to
authenticate to vulnerable sites, meaning sites with restrictive
sign-up procedures are not immune to WCD vulnerabilities.
5 Variations on Path Confusion
Web cache technologies may be conﬁgured to make their
caching decisions based on complex rules such as pattern
674    29th USENIX Security Symposium
USENIX Association
example . com / account . php
example . com / account . php/nonexistent.css
(a) Path Parameter
example . com / account . php
example . com / account . php%0Anonexistent.css
(b) Encoded Newline (\n)
example . com / account . php ; par1 ; par2
example . com / account . php%3Bnonexistent.css
(c) Encoded Semicolon (;)
example . com / account . php # summary
example . com / account . php%23nonexistent.css
(d) Encoded Pound (#)
example . com / account . php ? name = val
example . com / account . php%3Fname = valnonexistent.css
(e) Encoded Question Mark (?)
Figure 4: Five practical path confusion techniques for craft-
ing URLs that reference nonexistent ﬁle names. In each ex-
ample, the ﬁrst URL corresponds to the regular page, and the
second one to the malicous URL crafted by the attacker. More
generally, nonexistent.css corresponds to a nonexistent ﬁle
where nonexistent is an arbitrary string and .css is a popular
static ﬁle extension such as .css, .txt, .jpg, .ico, .js etc.
matches on ﬁle names, paths, and header contents. Launching
a successful WCD attack requires an attacker to craft a ma-
licious URL that triggers a caching rule, but also one that is
interpreted as a legitimate request by the web server. Caching
rules often cannot be reliably predicted from an attacker’s ex-
ternal perspective, rendering the process of crafting an attack
URL educated guesswork.
Based on this observation, we hypothesize that exploring
variations on the path confusion technique may increase the
likelihood of triggering caching rules and a valid web server
response, and make it possible to exploit additional WCD
vulnerabilities on sites that are not impacted by the originally
proposed attack. To test our hypothesis, we performed a sec-
ond round of measurements fourteen months after the ﬁrst
experiment, in July, 2019.
Speciﬁcally, we repeated our methodology, but tested pay-
loads crafted with different path confusion techniques in an at-
tempt to determine how many more pages could be exploited
with path confusion variations. We used an extended seed
pool for this study, containing 295 sites from the original set
and an additional 45 randomly selected from the Alexa Top
5K, for a total of 340. In particular, we chose these new sites
among those that do not use Google OAuth in an attempt to
mitigate potential bias in our previous measurement. One neg-
ative consequence of this decision was that we had to perform
the account creation step entirely manually, which limited the
number of sites we could include in our study in this way.
Finally, we revised the URL grouping methodology by only
selecting and exploiting a page among the ﬁrst 500 pages
when there is at least one marker in the content, making it
more efﬁcient for our purposes, and less resource-intensive
on our targets. In the following, we describe this experiment
and present our ﬁndings.
5.1 Path Confusion Techniques
Recall from our analysis and Table 4 that our WCD tests
resulted in a 404 Not Found status code in the great major-
ity of cases, indicating that the web server returned an error
page that is less likely to include PII. In order to increase the
chances of eliciting a 200 OK response while still triggering a
caching rule, we propose additional path confusion techniques
below based on prior work [59, 61, 62]), also illustrated in
Figure 4. Note that Path Parameter in the rest of this section
refers to the original path confusion technique discussed in
this work.
Encoded Newline (\n). Web servers and proxies often
(but not always) stop parsing URLs at a newline character,
discarding the rest of the URL string. For this path con-
fusion variation, we use an encoded newline (%0A) in our
malicious URL (see Figure 4b). We craft this URL to exploit
web servers that drop path components following a new-
line (i.e., the server sees example.com/account.php),
but
instead
do not properly decode newlines
(the proxy sees
example.com/account.php%0Anonexistent.css).
As a result, a request for this URL would result in a
successful response, and the cache would store the contents
believing that this is static content based on the nonexistent
ﬁle’s extension.
fronted by caching
are
proxies
that
Encoded Semicolon (;). Some web servers and web ap-
plication frameworks accept lists of parameters in the URL
delimited by semicolons; however, the caching proxy fronting
the server may not be conﬁgured to recognize such lists. The
path confusion technique we present in Figure 4c exploits this
scenario by appending the nonexistent static ﬁle name after a
semicolon. In a successful attack, the server would decode the
URL and return a response for example.com/account.php,
while the proxy would fail to decode the semicolon, interpret
example.com/account.php%3Bnonexistent.css as a re-
source, and attempt to cache the nonexistent style sheet.
Encoded Pound (#). Web servers often process the pound
character as an HTML fragment identiﬁer, and therefore
stop parsing the URL at its ﬁrst occurrence. However,
proxies and their caching rules may not be conﬁgured to
USENIX Association
29th USENIX Security Symposium    675
Table 7: Response codes observed with successful WCD at-
tacks for each path confusion variation.
Table 8: Vulnerable targets for each path confusion variation.
Technique
Path Parameter
Encoded \n
Encoded ;
Encoded #
Encoded ?
All Encoded
Total
Pages
200
3,870
1,653
3,912
7,849
11,282
11,345
12,668
!200
25,932
24,280
25,576
20,794
26,092
31,063
32,281
Domains
200
!200
93
31
76
79
92
91
85
102
122
86
94
128
132
97
Sites
200
13
9
13
14
17
20
22
!200
7
7
7
7
8
9
9
decode pound signs, causing them to process the entire
URL string. The path confusion technique we present in
Figure 4d once again exploits this inconsistent interpretation
of the URL between a web server and a web cache, and
works in a similar manner to the encoded newline tech-
nique above. That is, in this case the web server would
respond for example.com/account.php,
successfully
while
the
cache
example.com/account.php%23nonexistent.css.
attempt
to
proxy
would
Encoded Question Mark (?). This technique, illus-
trated in Figure 4e, targets proxies with caching rules
that are not conﬁgured to decode and ignore stan-
dard URL query strings that begin with a question
mark. Consequently, the web server would generate a
valid response for example.com/account.php and the
proxy would cache it, misinterpreting the same URL as
example/account.php%3Fname=valnonexistent.css.
5.2 Results
We applied our methodology to the seed pool of 340 sites, us-
ing each path confusion variation shown in Figure 4. We also
performed the test with the Path Parameter technique, which
was an identical test case to our original experiment. We did
this in order to identify those pages that are not vulnerable to
the original WCD technique, but only to its variations.
We point out that the results we present in this second
experiment for the Path Parameter technique differ from our
ﬁrst measurement. This suggests that, in the fourteen-month
gap between the two experiments, either the site operators
ﬁxed the issue after our notiﬁcation, or that there were changes
to the site structure or caching rules that mitigated existing
vulnerabilities or exposed new vulnerable pages. In particular,
we found 16 vulnerable sites in the previous experiment and
25 in this second study, while the overlap between the two is
only 4.
Of the 25 vulnerable sites we discovered in this experi-
ment, 20 were among the previous set of 295 that uses Google
OAuth, and 5 among the newly picked 45 that do not. To test
Technique
Path Parameter
Encoded \n
Encoded ;
Encoded #
Encoded ?
All Encoded
Pages
29,802 (68.9%)
25,933 (59.9%)
29,488 (68.2%)
28,643 (66.2%)
37,374 (86.4%)
42,405 (98.0%)
Domains
103 (69.6%)
86 (58.1%)
105 (70.9%)
109 (73.6%)
130 (87.8%)
144 (97.3%)
Sites
14 (56.0%)
11 (44.0%)
14 (56.0%)
15 (60.0%)
19 (76.0%)
23 (92.0%)
Total
43,258 (100.0%)
148 (100.0%)
25 (100.0%)
whether the incidence distributions of vulnerabilities among
these two sets of sites show a statistically signiﬁcant differ-
ence, we applied Pearson’s χ2 test, where vulnerability in-
cidence is treated as the categorical outcome variable and
OAuth/non-OAuth site sets are comparison groups. We ob-
tained a test statistic of 1.07 and a p-value of 0.30, showing
that the outcome is independent of the comparison groups,
and that incidence distributions do not differ signiﬁcantly at
typically chosen signiﬁcance levels (i.e., p > 0.05 ). That is,
our seed pool selection did not bias our ﬁndings.
Response Codes. We present the server response codes we
observed for vulnerable pages in Table 7. Notice that there is
a stark contrast in the number of 200 OK responses observed
with some of the new path confusion variations compared
to the original. For instance, while there were 3,870 success
codes for Path Parameter, Encoded # and Encoded ? resulted
in 7,849 and 11,282 success responses respectively. That is,
two new path confusion techniques were indeed able to elicit
signiﬁcantly higher numbers of successful server responses,
which is correlated with a higher chance of returning private
user information. The remaining two variations performed
closer to the original technique.
Vulnerabilities.
In this experiment we identiﬁed a total of
25 vulnerable sites. Table 8 shows a breakdown of vulnerable
pages, domains, and sites detected using different path confu-
sion variations. Overall, the original path confusion technique
resulted in a fairly successful attack, exploiting 68.9% of
pages and 14 sites. Still, the new techniques combined were
able to exploit 98.0% of pages, and 23 out of 25 vulnerable
sites, showing that they signiﬁcantly increase the likelihood
for a successful attack.
We next analyze whether any path confusion technique was
able to successfully exploit pages that were not impacted by
others. We present these results in Table 9 in a matrix form,
where each element (i, j) shows how many pages/domain-
s/sites were exploitable using the technique in row i, whereas
utilizing the technique listed in column j was ineffective for
the same pages/domains/sites.
The results in Table 9 conﬁrm that each path confusion
variation was able to attack a set of unique pages/domain-
676    29th USENIX Security Symposium
USENIX Association
Table 9: Number of unique pages/domains/sites exploited by each path confusion technique. Element (i, j) indicates number of
many pages exploitable using the technique in row i, whereas technique in column j is ineffective.
Technique
Path Parameter
Encoded \n
Encoded ;
Encoded #
Encoded ?
Path Parameter
-
521 / 9 / 4
696 / 7 / 4
4,532 / 17 / 4
13,245 / 39 / 8
Encoded \n
4,390 / 26 / 7
-
3,761 / 24 / 6
6,386 / 28 / 7