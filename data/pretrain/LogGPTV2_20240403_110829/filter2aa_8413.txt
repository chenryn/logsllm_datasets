以下是经过优化的代码，使其更加清晰、连贯和专业：

```python
import math

# 读取原始数据
with open("keysound1_ampl.wav", "rb") as file:
    data = file.read()[44:]

# 解析音频样本
samples = []
for i in range(0, len(data), 2):
    smp = (ord(data[i + 1]) * 256) + ord(data[i])
    if smp >= 256 * 256 / 2:
        smp -= 256 * 256
    samples.append(smp)
print("从文件中获取样本...")

# 参数定义
RAVG = 400  # 运行平均长度
THR = 4600  # 峰值检测阈值
HYST = 100  # 峰值检测滞后
PEAKLEN = 600  # 单个按键按压的样本长度
SIM_THR = 1000  # 相似度阈值
UNK_SAMPLES = 42  # 已知文本开始前的按键次数

# 计算运行均方根
ravg = []
sm = 0
for i in range(RAVG // 2, len(samples)):
    if i >= RAVG * 3 // 2:
        sm -= samples[i - RAVG] ** 2
    sm += samples[i] ** 2
    ravg.append(3 * math.sqrt(sm / (RAVG + 0.0)))
print("计算了均方根...")

# 查找峰值（按键按压）
i = 0
peaks = []
while i < len(ravg):
    if ravg[i] > THR:
        mx = ravg[i]
        mxind = i
        i += 1
        while i < len(ravg) and ravg[i] > THR - HYST:
            if ravg[i] > mx:
                mx = ravg[i]
                mxind = i
            i += 1
        peaks.append(mxind)
    else:
        i += 1
print("找到峰值...")

# 获取每个字符的样本
chardata = {}
with open("Blog Text.txt", "r") as file:
    for i, char in enumerate(file.read()):
        peak = peaks[i + UNK_SAMPLES]
        peakdata = samples[peak - PEAKLEN:peak + PEAKLEN]
        if char not in chardata:
            chardata[char] = [peakdata]
        else:
            chardata[char].append(peakdata)
print("收集字符样本...")

# 定义差异函数
def difference(arr1, arr2):
    return sum((a - b) ** 2 for a, b in zip(arr1, arr2)) / len(arr1)

# 查找未知按键的最佳匹配
unkpeaks = sorted(peaks[:UNK_SAMPLES] + [137259])  # 一个按键未被检测到
for peak in unkpeaks:
    unk_key = samples[peak - PEAKLEN:peak + PEAKLEN]
    s = "["
    for c in chardata:
        for arr in chardata[c]:
            if difference(unk_key, arr) < SIM_THR:
                s += c
                break
    s += "]"
    print(s, end="")
print()
```

### 优化点：
1. **代码结构**：使用 `with` 语句来打开文件，确保文件在使用后正确关闭。
2. **变量命名**：改进了一些变量名，使其更具描述性。
3. **注释**：增加了注释，解释每个部分的功能。
4. **代码格式**：调整了缩进和空格，使代码更易读。
5. **函数定义**：将 `difference` 函数定义得更简洁。
6. **打印语句**：使用 `print()` 函数，并在最后使用 `end=""` 来避免换行。

希望这些优化能使代码更易于理解和维护。