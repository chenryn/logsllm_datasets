**签名是必需的吗？**
SAML标准要求所有经过非安全信道（如用户的浏览器）进行传输的消息都要有数字签名。不过，如果消息通过安全信道（如SSL/TLS反向通道）进行传输的话，签名就不是必需的了。但是正因为这一点，我们发现SAML使用者经常这样做：如果有任何签名存在，就进行验证；如果签名被移除，则跳过验证。软件基本上假定我们已经检查了来自非安全信道的消息已签名，而真实情况并非如此。
这造成的影响就是，我们能够简单地删除签名，并篡改响应，就好像签名不存在一样。使用SAML Raider插件可以很容易完成该操作。
**签名得到验证了吗？**
验证XML签名是一个非常复杂的过程，因为XML签名标准期望在签名验证之前先进行一系列的转换和规范化的操作（如忽略掉大量的空白符）。这就导致如果没有一个功能齐全的XML签名库在背后做支撑，那么验证签名就极其困难。这造成的影响有：
开发者普遍对签名验证的内在过程理解不到位。  
一些中间组件，如WAF等，并不知道签名是否有效。  
签名库可能存在一些配置选项，如允许的规范化方法列表，这些选项对开发者来说却毫无意义。  
实现签名标准并不容易，再加上签名标准自身也存在几分晦涩难懂的特性，这就导致了我们现在所遇到的问题。
首先，测试一个签名是否有效是很简单的——改变被签名内容中的某些数据，然后看看是否会导致中断。
**签名是来自正确的签名者吗？**
另外一个障碍就是接收方是否验证了签名者的身份。我们无法看到这一步是否正确，但使用SAML Raider插件可以很容易地进行测试。
将签名证书复制到SAML Raider的证书商店：
保存并且对此证书进行自签名，我们便得到了同一证书的一个自签名版本。
这时我们就可以使用这个自签名证书对原始请求进行重新签名，可以对整个消息进行签名，也可以只签assertion部分。
你可以确认一下应用正常采用哪种签名方式，也可以两种方式都试一下。
**是对响应消息的正确部分进行签名的吗？**
**XSW攻击原理** ****
SAML标准所允许的签名存在的位置仅有两处：
签名位于标签中，对标签及其子节点进行签名。  
签名位于标签中，对标签及其子节点进行签名。  
SAML标准对于签名允许存在的位置以及允许被签的内容都有明确的描述。
然而，没有人为了仅仅使用SAML就完整地实现复杂的XML签名机制。签名标准是通用的，标准的实现以及为此所开发的软件库也是如此。结果，就有了如下所示的“职责分离”：
XML签名库根据XML验证标准验证签名，它允许从任何地方签名任何内容。  
SAML库期望XML签名库告诉它响应消息是否有效。  
在两个组件之间往往缺少相关规则去规定哪些内容必须签名的。结果就是，我们经常可以针对文档的不同部分进行签名，而在接收方看来签名依然有效。
通过拷贝文档被签名的部分，并保证签名数据指向这些拷贝部分，我们可以将XML签名库验证的内容和SAML库需要的内容分离开来。
**自动化进行XSW攻击**
SAML Raider插件可以帮你实现最常见的XSW攻击。
可以尝试下拉框中的每一个选项，然后点击“Apply XSW”以发送请求数据。如果没有出现错误，就改变SAML
XML中所有的用户名或者其他用户标识符然后重复这个动作。
**SAML Raider的局限性**
* * *
尽管SAML Raider插件可以对常见的情况进行测试，但仍然有一些攻击需要更深一层的理解：
生成针对XML Schema进行验证的响应（需要在可能包含xs:any的元素中隐藏影子副本（shadow copy))。  
当Response和Assertion都被签名和验证时，如何绕过验证。  
在非SAML上下文中绕过XML签名，如在使用WS-Security扩展的SOAP Endpoints中。  
**手动XSW**
如果SAML Raider插件自带的选项都不起作用，你可以尝试手动测试方法：
解码经过Base64编码的内容以获取SAML响应XML。  
检查签名的标签是否包含被签名元素的ID。  
拷贝文档中其他部分被签名的内容（一般情况下，放在标签的末尾是可以的；如果还要验证XML Schema，那就放在不会破坏XML
Schema的位置）。  
从XML签名中删除副本，将其保留在原始文档中。这是有必要的，因为XML封装签名标准去掉了将被验证的签名。在原始文档中，这就是所包含的签名，所以我们必须将其从副本中删除）。  
改变原始签名内容的ID为其他值（如改变其中一个字母）。  
改变原始assertion的内容。  
对上述内容重新进行Base64编码，将其放回请求报文中，然后提交请求。  
如果签名验证指向副本，那么你所做的上述改动将被忽略。在实际操作过程中，如果服务器严格限制了请求时间，你应该快速地完成这些步骤。
**SAML渗透测试检查表**
* * *
SAML响应通过浏览器了吗？
响应内容是否被签名了？如果没有签名，尝试改变其内容。  
如果删除签名数据，响应内容是否被接受？  
如果我们使用其他证书重新进行签名，响应内容是否被接受？  
使用SAML Raider自带的8种转换方式生成的结果是否被接受？  
如果你更改此类响应，更改后的响应是否被接受？  
是否遇到了上文所述的SAML Raider的局限性？如果是，你需要尝试手动测试方法。