    配置命令的支持。
-   在 `omfwd`{.literal} 模块中添加了新的 rate-limit
    选项，用于发送到远程服务器的速率限制 syslog 信息：
    ::: itemizedlist
    -   `ratelimit.interval`{.literal} 指定速率限制间隔（以秒为单位）。
    -   `ratelimit.burst`{.literal} 指定消息数中速率限制突发。
    :::
-   通过各种改进重写 `标记`{.literal} 模块。
-   向 `imptcp`{.literal} 模块中添加 `max sessions`{.literal}
    配置参数。最大值是针对每个实例测量的，而不是在所有实例间进行全局测量。
-   添加了 `rsyslog-openssl`{.literal} 子软件包；此网络流驱动程序使用
    OpenSSL 库实施受 TLS 保护的传输。
-   使用 `MaxBytesPerMinute 和 MaxLinesPerMinute`{.literal}
    ``{=html} 选项为 `imfile`{.literal}
    模块添加每分钟的速率限制。这些选项接受整数值，并限制一分钟内可以发送的字节数或行数。
-   添加了对 `imtcp`{.literal} and `omfwd`{.literal} 模块的支持，以使用
    `streamdriver.TlsVerifyDepth`{.literal}
    选项为证书链验证配置最大深度。
:::
([BZ#1932795](https://bugzilla.redhat.com/show_bug.cgi?id=1932795){.link})
:::
::: section
::: titlepage
# []{#New-features.html#enhancement_networking}网络 {.title}
:::
[]{#New-features.html#BZ-1899372}
::: title
**支持在 NetworkManager 中暂停 `ethtool`{.literal} 参数**
:::
在某些情况下，需要在特定网络接口上明确设置非自动暂停参数。在以前的版本中，NetworkManager
无法在 `nmstate`{.literal} 中暂停 `ethtool`{.literal}
的控制流参数。要禁用 pause 参数的自动协商并明确启用 RX/TX
暂停支持，请使用以下命令：
``` screen
# nmcli connection modify enp1s0 ethtool.pause-autoneg no ethtool.pause-rx true ethtool.pause-tx true
```
([BZ#1899372](https://bugzilla.redhat.com/show_bug.cgi?id=1899372){.link})
[]{#New-features.html#BZ-1942331}
::: title
**NetworkManager 中的新属性，用于在混杂模式下设置物理和虚拟接口**
:::
在这个版本中，在 NetworkManager 中添加了
`802-3-ethernet.accept-all-mac-addresses`{.literal}
属性，`以接受所有 MAC 地址`{.literal}
模式设置物理和虚拟接口。在这个版本中，内核可以接受
`以接受所有 MAC 地址模式针对当前接口 MAC 地址`{.literal}
的网络软件包。要在 `eth1`{.literal} 中启用 `接受所有 MAC 地址`{.literal}
模式，请使用以下命令：
``` screen
$ sudo nmcli c add type ethernet  ifname eth1 connection.id eth1  802-3-ethernet.accept-all-mac-addresses true
```
([BZ#1942331](https://bugzilla.redhat.com/show_bug.cgi?id=1942331){.link})
[]{#New-features.html#BZ-1934465}
::: title
**NetworkManager rebase 到版本 1.32.10**
:::
`NetworkManager`{.literal} 软件包已升级到上游版本
1.32.10，它提供了很多改进和程序错误修复。
有关显著变化的更多信息，请阅读此版本的
[上游发行注记](https://gitlab.freedesktop.org/NetworkManager/NetworkManager/-/blob/1.32.10/NEWS){.link}。
([BZ#1934465](https://bugzilla.redhat.com/show_bug.cgi?id=1934465){.link})
[]{#New-features.html#BZ-1548825}
::: title
**NetworkManager 现在支持 `nftables`{.literal} 作为防火墙后端**
:::
此增强为 NetworkManager 添加了对 `nftables`{.literal}
防火墙框架的支持。将默认后端从 `iptables`{.literal} 切换到
`nftables`{.literal} ：
::: orderedlist
1.  使用以下内容创建
    `/etc/NetworkManager/conf.d/99-firewall-backend.conf`{.literal}
    文件：
    ``` screen
    [main]
    firewall-backend=nftables
    ```
2.  重新加载 `NetworkManager`{.literal} 服务。
    ``` screen
    # systemctl reload NetworkManager
    ```
:::
(BZ#1548825)
[]{#New-features.html#BZ-1872702}
::: title
**firewalld 被 rebase 到版本 0.9.3**
:::
`firewalld`{.literal} 软件包已升级到上游版本
0.9.3，它提供了很多改进和程序错误修复。
详情请查看上游发行注记：
::: itemizedlist
-   [firewalld 0.9.3
    发行注记](https://firewalld.org/2021/01/firewalld-0-9-3-release){.link}
-   [firewalld 0.9.2
    发行注记](https://firewalld.org/2021/01/firewalld-0-9-2-release){.link}
-   [firewalld 0.8.6
    发行注记](https://firewalld.org/2021/01/firewalld-0-8-6-release){.link}
-   [firewalld 0.8.5
    发行注记](https://firewalld.org/2021/01/firewalld-0-8-5-release){.link}
-   [firewalld 0.8.4
    发行注记](https://firewalld.org/2020/10/firewalld-0-8-4-release){.link}
:::
([BZ#1872702](https://bugzilla.redhat.com/show_bug.cgi?id=1872702){.link})
[]{#New-features.html#BZ-1492722}
::: title
**`firewalld`{.literal} 策略对象功能现已可用**
:::
在以前的版本中，您无法使用 `firewalld`{.literal}
来过滤虚拟机、容器和区域之间的流量流。在这个版本中，增加了
`firewalld`{.literal} 策略对象功能，它在 `firewalld`{.literal}
中提供转发和输出过滤。
(BZ#1492722)
:::
::: section
::: titlepage
# []{#New-features.html#enhancement_kernel}内核 {.title}
:::
[]{#New-features.html#BZ-1839151}
::: title
**RHEL 8.5 中的内核版本**
:::
Red Hat Enterprise Linux 8.5 带有内核版本 4.18.0-348。
（[BZ#1839151](https://bugzilla.redhat.com/show_bug.cgi?id=1839151){.link}）
[]{#New-features.html#BZ-1837389}
::: title
**现在支持 EDAC for Intel Sapphire 快速处理器**
:::
此增强为 Intel Sapphire 快速处理器提供错误检测和
Correction(EDAC)设备支持。EDAC 主要处理 Error Code
Correction(ECC)内存，并检测和报告 PCI 总线奇偶校验错误。
(BZ#1837389)
[]{#New-features.html#BZ-1944716}
::: title
**`bpftrace`{.literal} 软件包被 rebase 到版本 0.12.1**
:::
`bpftrace`{.literal} 软件包已升级到 0.12.1
版本，提供多个程序错误修复和增强。与之前版本相比的显著变化包括：
::: itemizedlist
-   添加了新的 `内置`{.literal}
    路径，这是一种新的可靠方法，用于显示路径结构的完整路径。
-   添加了对 `kfunc`{.literal} 探测 `和追踪点`{.literal}
    类别的通配符支持。
:::
([BZ#1944716](https://bugzilla.redhat.com/show_bug.cgi?id=1944716){.link})
[]{#New-features.html#BZ-1922951}
::: title
**vmcore 捕获在 CPU hot-add 或 hot-removal 操作后按预期工作**
:::
在以前的版本中，在 IBM POWER 系统中，在每个 CPU
或内存热插拔或删除操作后，设备树中的 CPU 数据会变得过时，除非重新
`载入 kdump.service`{.literal}。要重新加载最新的 CPU
信息，`kdump.service`{.literal} 通过设备节点解析来获取 CPU
信息。但是，某些 CPU 节点已在其热移动期间丢失。因此,
`kdump.service`{.literal} reload 和 CPU `hot-removal`{.literal}
间的竞争条件同时发生，这会导致转储失败。然后，后续的崩溃可能不会捕获
`vmcore`{.literal} 文件。
这个版本不需要在 CPU 热插拔后重新载入 `kdump.service`{.literal}，且
`vmcore`{.literal} 捕获可以按预期工作。
注：对于固件辅助转储(`fadump`{.literal})，这个增强功能可以正常工作。对于标准
`kdump，kdump`{.literal} `.service`{.literal} reload 会在
`热插拔`{.literal} 操作中发生。
(BZ#1922951)
[]{#New-features.html#BZ-1879558}
::: title
**kdumpctl 命令现在支持新的 `kdumpctl 估算`{.literal} 工具**
:::
`kdumpctl`{.literal} 命令现在支持 `kdumpctl 估算`{.literal}
程序。根据现有的 `kdump`{.literal} 配置，kdump `ctl 估算`{.literal} 为
`kdump`{.literal} 内存分配显示合适的估算值。
崩溃内核的最小大小可能因硬件和机器规格而异。因此，之前很难估算准确的
`crashkernel=`{.literal} 值。
在这个版本中，kdump `ctl 估算`{.literal}
工具提供了一个估算值。这个值是推荐的最佳估计值，可以作为配置可行
`崩溃内核=`{.literal} 值的良好参考。
(BZ#1879558)
[]{#New-features.html#BZ-1822073}
::: title
**IBM TSS 2.0 软件包被 rebase 到 1.6.0**
:::
IBM 的受信任计算组(TCG)软件堆栈(TSS)2.0 二进制软件包已升级到
1.6.0。在这个版本中，AMD64 和 Intel 64 架构增加了 IBM TSS 2.0 支持。
它是受信任的平台模块(TPM)2.0 的用户空间 TSS，通过更简单的接口实施与 TCG
TSS TSS 增强型系统应用程序接口(ESAPI)、系统应用程序接口(SAPI)和 TPM
命令传输接口(TCTI)API 等效的功能。
它是一种安全中间件，允许应用程序和平台共享 TPM
并将其集成到安全应用程序中。
与之前的版本相比，这个 rebase
提供了很多程序错误修复和增强。最显著的更改包括以下新属性：
::: itemizedlist
-   `tsscertifyx509`{.literal}: 验证 `x509`{.literal} 证书
-   `tssgetcryptolibrary`{.literal}: 显示当前的加密库
-   `tssprintattr`{.literal} ：将 TPM 属性打印为文本
-   `tsspublicname`{.literal} ：计算实体的公共名称
-   `tsssetcommandcodeauditstatus`{.literal}: clears 或 set code via
    `TPM2_SetCommandCodeAuditStatus`{.literal}
-   `tsstpmcmd`{.literal}: 发送带内 TPM 模拟器信号
:::
(BZ#1822073)
[]{#New-features.html#BZ-1938339}
::: title
**The `schedutil`{.literal} CPU 频率调控器现在包括在 RHEL 8 中**
:::
The `schedutil`{.literal} CPU 调控器使用 CPU scheduler.
`schedutil`{.literal} 上可用的 CPU 使用率数据是 CPU
调度程序的一部分，它可以直接访问调度程序的内部
`数据结构。schedutil`{.literal} 控制 CPU
如何提高并降低响应系统负载的频率。您必须手动选择 `schedutil`{.literal}
频率调控器，因为它没有启用为默认值。
每个 CPU. `schedutil`{.literal} 有一个 `policyX`{.literal}
目录，它位于内核中现有 `CPUFreq`{.literal} 调控器的 policy
`X/scaling_governors`{.literal} 列表中，并附加到
`/sys/devices/system/cpu/cpufreq/policyx`{.literal}
策略。可以覆盖策略文件以对其进行更改。
请注意，在使用 `intel_pstate`{.literal} 扩展驱动程序时，可能需要为
`intel_pstate=passive`{.literal} 命令行参数配置 `intel_pstate`{.literal}
以便可用并由调控商列出。`intel_pstate`{.literal} 是 Intel
硬件上具有任何现代 CPU 的默认设置。
(BZ#1938339)
[]{#New-features.html#BZ-1954387}
::: title
**rt-tests 套件 rebase 到 rt-tests-2.1 上游版本**
:::
The `rt-tests`{.literal} 套件已 rebase tort `-tests-2.1`{.literal}
版本，提供多个程序错误修复和增强。与之前版本相比的显著变化包括：
::: itemizedlist
-   对 `rt-tests`{.literal} 套件中的各种程序进行修复。
-   通过常见选项集使程序更加一致，例如： `soslat`{.literal} 程序的选项