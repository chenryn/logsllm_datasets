### 1. Introduction to Security Vulnerabilities in Web Applications

The discovery of a vulnerability in a web application can open the door for hackers to successfully attack any of the millions of websites developed with a given version of that application. Furthermore, it is common to find vulnerabilities in specific versions of web applications that also affect a large number of previous versions. The situation is exacerbated by the fact that website administrators do not always update their software in a timely manner when new patches and releases are available. This was confirmed by a survey conducted by security analyst David Kierznowski, which found that 49 out of 50 WordPress blogs checked were running software with known vulnerabilities and had not upgraded to the latest stable version [28].

### 2.3. Obtaining the Patch Code

The availability of past collections of vulnerability patches is closely related to the policies developers have regarding the sharing of information about older versions, especially those with security issues. Additionally, most security announcements are so vague that it is impossible to determine which source files and variables are affected. Moreover, some of the disclosed information includes other types of security vulnerabilities that are not the focus of this paper (e.g., directory traversal, remote file inclusion, cookie poisoning).

To gather the actual code of security patches, several data sources must be utilized, such as mirror websites, sites with the source code, online reviews, news sites, changelog files of the application, the version control system repository, and hacker-related sites.

For the purpose of this study, we need only the changes made to the code of the application that corrected the vulnerability. There is no standard way of providing data about a security vulnerability fix; therefore, the variety of information sources presents different formats, making the analysis more challenging. The four main sources of patch information used in this paper are:

1. **Security Patch Files**: These files contain information about the target version of the application and are designed to replace the original file where the vulnerability existed, leaving all other source files intact. The `diff` command in UNIX is used to obtain the code changes between the original and patched files.

2. **Updated Version of the Web Application**: This is a completely new version of the application containing all new features and bug fixes, including security ones. To identify the security fixes, we must locate the updated source files and use the `diff` command to compare them with the corresponding files from the vulnerable version. The changelog file, distributed with the application, often provides this information.

3. **Available Security Diff File**: This file contains only the code changes needed to fix a specific vulnerability. It can be applied to the application using the `patch` command. Although this is the easiest data source to work with, it is the rarest to find.

4. **Version Control System Repository**: Most open-source applications are developed using a version control system to manage contributions from a global community of developers. With the necessary permissions, we can access all revisions of the application and corresponding changelog files. By querying the changelog, we can identify the revisions where security vulnerabilities were fixed and then obtain the security diff file using version control system commands.

### 2.4. Patch Code Analysis Guidelines

To ensure consistent and accurate analysis, the following guidelines were defined:

1. **Dual Vulnerability Fixes**: If a patch can fix both Cross-Site Scripting (XSS) and SQL Injection vulnerabilities, it should be accounted for both. For example, if a variable is not properly sanitized and is used in a query (allowing SQL injection) and later displayed on the screen (allowing XSS), sanitizing the variable will mitigate both vulnerabilities.

2. **Accuracy of Publicly Disclosed Information**: It is assumed that the information publicly disclosed in specialized sites is accurate and that the fix provided by the developer solves the stated problem.

3. **Multiple Code Changes for a Single Vulnerability**: Several code changes may be necessary to correct a single vulnerability. All changes will be considered as a series of singular fault type fixes. For example, if two functions are needed to sanitize a variable, both must be accounted for.

4. **Single Change Fixing Multiple Vulnerabilities**: If a single code change corrects multiple vulnerabilities, each one is considered a singular fix. For instance, if a variable can be attacked from two different inputs but is sanitized before display, it is considered that two security problems have been fixed, even though only one code change was needed.

5. **Vulnerabilities Affecting Multiple Versions**: A security vulnerability may affect several versions of the application. If the same patch fixes the problem across all versions, it is considered only one fix.

By following these guidelines, almost all patching situations can be classified. However, some complex cases involving major code changes and simultaneous security and bug fixes (5.4%) were excluded due to the difficulty in analyzing them.

### 3. Results and Discussion

We classified 655 XSS and SQL injection security fixes found in six web applications. Figure 1 shows the global distribution of XSS and SQL injection vulnerabilities. XSS is the most frequent type, which is also confirmed by vulnerability reports in eVE [8, 9]. This trend is partly due to the fact that every input variable in an application is a potential entry point for XSS, whereas SQL injection is limited to variables used in SQL queries.

Figure 2 shows the distribution of the twelve classification fault types. The most common fault type is MFC extended, representing 75.88% of all faults. This high value is due to the extensive use of specific functions to validate and clean external data. The next three most common fault types are WPFV, MIFS, and WVAV, which typically arise from missing quotes in SQL queries, missing "if" statements, and poor regular expressions, respectively.

Table 3 provides detailed results for each fault type found in the web applications. All fault types contribute to XSS, but only eight contribute to SQL injection. The remaining fault types (EFC, WFCS, MVIV, MLAC, MFC, MIA, MLOC, and ELOC) account for only 7.63% of the vulnerabilities.

### 3.1. Comparing Security Faults with Generic Software Faults

The original Orthogonal Defect Classification (ODC) is widely used for classifying software faults. Studies by Dudik [14] and Christmansson and Chillarege [12] analyzed faults in C programs and large databases, respectively. Table 4 compares our results with these studies. Although the values differ, the Algorithm and Assignment fault types are prominent in all studies. This suggests that the kind of mistakes leading to security vulnerabilities has a different distribution from generic fault types.

The programming language and technology used can influence the distribution of faults. Input validation is a universal concern, and our results can be useful for developing web applications in other languages like Java or .NET.

Comparing our results with the study in [17], which benchmarks web application vulnerability scanners, we find that they could inject both XSS and SQL injection vulnerabilities with a fault type (WLEC - Wrong logical expression used as condition) not detected in our study. This highlights the importance of considering a wide range of fault types in security analyses.