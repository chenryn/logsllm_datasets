z
i
l
a
m
r
o
N
 1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
 0
Active
Idle
Baseline MECC
ECC−6
Fig. 10. Total Energy Usage in Memory System
E. Sensitivity to ECC Decode Latency
We have used a latency of 30 cycles for ECC-6 decode.
In general, there is a design trade-off between area of decoder
and latency. We conduct sensitive study of the ECC decoder
latency, varying from 15 to 60 processor cycles. Figure 12
shows the performance impact of this latency variation on
ECC-6 and MECC. The performance impact of MECC is
362362
r
e
w
o
P
h
s
e
r
f
e
R
d
e
z
i
l
a
m
r
o
N
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
Refresh
Baseline MECC ECC−6
l
r
e
w
o
P
e
d
I
l
a
t
o
T
d
e
z
i
l
a
m
r
o
N
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
Baseline MECC ECC−6
Fig. 8. Comparison of (left) Refresh Power and (right) Total Idle Power of
Memory System
power than baseline, which is because of the extra memory
trafﬁc. ECC-6 seems to have lower power, but that is primarily
because it takes 10% more time to execute the workload. When
energy consumption is considered in active mode, all the three
schemes are similar. In terms of EnergyDelayProduct (EDP),
MECC is similar to baseline whereas ECC-6 is 10% higher.
Thus, MECC provides similar energy consumption as ECC-6
but a better energy-delay product.
l
e
u
a
V
d
e
z
i
l
a
m
r
o
N
 1.15
 1.1
 1.05
 1
 0.95
 0.9
 0.85
Baseline
ECC−6
MECC
Power
Energy
EDP
Fig. 9. Power and Energy Metrics in Active Mode
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:13:39 UTC from IEEE Xplore.  Restrictions apply. 
)
B
M
i
(
n
o
g
e
R
y
r
o
m
e
M
d
e
s
s
e
c
c
A
 1024
 256
 64
 16
 4
 1
povray
ga m ess
tonto wrf
gro m acs
h m m er
sjeng
h264ref
gob m k
na m d
perl
astar
bzip2
soplex
dealII
cactus
calculix
sphinx
o m netpp
zeusm p
gcc
xalanc
milc
leslie
G e m s
libq
bwaves
lb m
ALL
Fig. 11. Effectiveness of Memory Downgrade Tracking. The size of memory touched by the application, as estimated by MDT (1K regions). Note Y-axis is
in log scale.
not very sensitive to decoder latency. For example, even with
the decoder latency of 60 cycle, MECC is still able to limit
the slowdown to within 2% of the baseline with no error
correction. The main reason behind is that MECC only pays
the long decoder latency once; after the data block has been
accessed,
is no longer stored with the strong ECC but
weak ECC, reducing the latency overhead for future access.
However, the performance impact of ECC-6 is quite sensitive
to decode latency, becoming 18% when the decoder latency
is 60 cycles. Therefore, MECC can allow the designer to
implement multi-bit decoding with simpler hardware with low
area overhead, and still not have a signiﬁcant slowdown.
it
SECDEC
 1
ECC-6
MECC
C
P
I
d
e
z
i
l
a
m
r
o
N
 0.95
 0.9
0.5
1
3
# of billion instructions
2
4
15
30
45
60
Fig. 13. Effectiveness of MECC for Different Program Length. The
performance impact of MECC becomes similar to SECDED after
approximately the ﬁrst one second of program execution.
C
P
I
d
e
z
i
l
a
m
r
o
N
 1
 0.95
 0.9
 0.85
 0.8
MECC
ECC−6
Fig. 12. Sensitive Study of ECC Decoder Latency
F. Transition Time for MECC
Our measurement of the performance is on the overall
slowdown for the 4 billion instruction slice for each bench-
marks. It is worthy of understanding how long it takes for
MECC to reach the performance of SECDED. Figure 13 shows
the normalized IPC with different instructions slices. The x-
axis are the number of executed instructions, which are 0.5
billion, 1billion, 2 billion, 3 billion, and 4 billion instructions.
Up to 1B instructions, MECC is slower than the baseline
by 2%; however, as the workload continues to execute, the
gap shrinks, and MECC reaches at 1.2% after 4B instructions.
Thus, the long latency of ECC-6 decode and additional writes
due to ECC-Upgrade happen primarily in the ﬁrst 1 billion
instruction (ﬁrst 1 second) of the application execution, and
after that the application executes mainly with SECDED.
363363
VI. ENHANCEMENTS FOR MECC
The MECC design described thus far is a simple one, in
that it always performs ECC-Downgrade on every access in
active mode, even if the application performance is not limited
by memory. Furthermore, when the system enters idle mode,
it performs ECC-Upgrade on the entire memory, even if the
majority of the memory was not accessed since the last idle
period, and hence was already protected with ECC-6. This
section describes simple and effective hardware techniques that
can further increase the efﬁcacy of MECC.
A. Region-Based Memory Downgrade Tracking
When the system transits to idle mode, MECC needs to
ensure that all of the memory is converted to ECC-6, before
reducing the refresh rate to 1 second. So, MECC performs
ECC-Upgrade for the entire memory before reducing refresh
rate. Given the memory has 16 million lines, it will take 640
million cycles, or 400ms to perform ECC-Upgrade of entire
memory. While, this is short period given that the typical idle
period lasts for several minutes, we would still like to make
the ECC-Upgrade more efﬁcient. The observation that makes
this possible is that not all memory gets accessed during the
active period, so if we can efﬁciently track the memory that
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:13:39 UTC from IEEE Xplore.  Restrictions apply. 
 100
ECC-Downgrade Disabled
ECC-Downgrade Enabled
)
%
(
e
m
T
i
.
c
e
x
E
e
t
a
t
S
h
c
a
E
n
i
 80
 60
 40
 20
 0
bwaves
lb m
G e m s
leslie
xalanc
libq
o m netpp
sphinx
zeusm p