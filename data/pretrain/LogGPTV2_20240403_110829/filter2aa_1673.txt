# Cheating in eSports: The Case of Virtual Cycling

## Introduction
By Brad Dixon, Carve Systems  
Photo by Markus Spiske on Unsplash

### Sweaty eSports
- **EGVsOG**
- **CVRWorldCup**

Virtual cycling is a growing segment of the cycling community, and as with any competitive sport, the potential for cheating exists. This article explores the methods and implications of cheating in virtual cycling, particularly through USB hacks.

## Historical Context
### Over 100 Years of Cheating Innovation
- **1903, 1904: Hippolyte Aucouturier**
- **1904: Maurice Garin**
- **1947: Jean Robic**

The history of cycling is rife with examples of cheating. As virtual cycling gains popularity, it's natural to wonder if similar issues will arise.

> "This is a sport with literally hundreds of dollars on the line, and dozens of fans...the stakes are medium!"
>
> — Marty Hass, *Tour de Pharmacy* (2017, HBO)

*Note: Marty Hass is a fictional character played by Jeff Goldblum in the HBO mockumentary "Tour de Pharmacy."*

## Virtual Cycling: How Does It Work?
Virtual cycling combines the physical effort of traditional cycling with digital technology:
- **Sensors** to measure real-world performance
- **App-controlled resistance** to simulate different terrains
- **Speed estimation** based on course terrain, power output, rider mass, and drafting models

## Easy Ways to Cheat at Virtual Cycling
- **Lighter riders go faster**
- **Shorter riders draft better**

However, there are limits. Given the same power output, the performance differences are constrained by the platform's algorithms.

## Vulnerable Sensor Network
The sensor network in virtual cycling includes:
- **Heart Rate Monitor (HRM)**
- **Cadence Sensor**
- **Power Meter**
- **ANT+ and USB Sticks**

These components can be exploited through various means, including USB hacking.

## Cheat the Hard Way with USBQ
USBQ is a tool that allows for deep-level USB manipulation. It can be used to:
- **Emulate USB host or device functions**
- **Deviate from the expectations of USB drivers**
- **Use hardware like GoodFET-based boards and Facedancer**

### Key Features of USBQ
- **Inspect and mangle application-specific payloads** across a USB bus
- **Use commodity hardware for USB hacking**
- **Define extension points for plugins** to use and modify data

### USBQ Architecture
- **USB Proxy Device** using the USBiquitous kernel module
- **Userspace Python application** for inspecting and mangling USB data
- **UDP communication** for data transfer

### Main Loop
1. Wait for a packet
2. Get the packet
3. Decode the packet
4. Log the packet
5. Modify the packet
6. Encode the packet
7. Send the packet out

### Plugins
- **Stackable and modifiable** plugins
- **Distributed as independent Python packages**
- **Convenience features for development**

## Applications Using USB Peripherals
- **Decode ANT+ USB Payload**
- **Modify power, heart rate, and cadence**
- **Set grade to "flat"**

## Practical Implications
### Workouts
- **Cheating yourself** is possible but requires sensible limits.

### Online Racing
- **Stretching a mediocre rider into a competitor** is plausible.
- **Multiple accounts** can help establish performance limits.
- **Verification cheats** include second power monitors, real height and weight, or fake videos.

### Live Event Racing
- **High-stakes events** use provided equipment, making cheating more difficult.
- **Infiltration techniques** like NSA COTTONMOUTH-I style hacked cables are being explored.

## Conclusion
- **Overall system not designed for high-integrity competition**
- **Insecure sensor networks and untrusted hardware** pose security risks
- **Electronics and software** are new domains for cheaters to exploit

> "Winners never cheat. Cheaters never win. Hackers sometimes cheat for fun."
>
> — edope.bike

Photo by Troy Oldham on Unsplash