# 【技术分享】python web 安全总结
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
**  
**
作者：[mapl0](http://bobao.360.cn/member/contribute?uid=621946719)
预估稿费：300RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**引言**
作者以前学习过php方面的安全知识，机缘巧合的情况下学习了django，在学习的过程中顺便收集总结了一下python安全方面的知识点以及近年来的相关漏洞，如果有需要修正或补充的地方，欢迎各位师傅的指出。
ps:特别感谢c1tas&lucifaer两位师傅的指点。
常见web漏洞在python中的示例。
**xss**
python下的xss其原理跟php是一样的，django近年的例子如下：
**CVE-2017-12794** ,此例中通过抛出异常造成xss。
**sql注入**
一般来说使用django自带的操作数据库api是不会造成sql注入的,如下：
    Person.objects.filter(first_name=request.GET.get('user'))
不过django依然支持原生sql语法的使用方法,如下：
        def index(request, *args, **kwargs):
            for e in Person.objects.raw('select * from FIRST_Person '):
                print(e.first_name,e.last_name)
            return render(request, 'home.html')
控制台结果如下：
        asd sdf
        mapl0 ppp
        admin hahaha
如果代码如下：
        def index(request, *args, **kwargs):
            for e in Person.objects.raw('select * from FIRST_Person WHERE first_name = ' + '"' + request.GET.get('user') + '"'):
                print(e.last_name)
            return render(request, 'home.html')
访问 **http://127.0.0.1:8000/?user=admin** 后控制台返回hahaha
而访问 **http://127.0.0.1:8000/?user=qqq%22%20or%20%221** ，控制台直接返回了
        sdf
        ppp
        hahaha
**代码/命令执行**
除内建的模块，还有 **os,commands,subprocess,multiprocessing,pty，Cpickle/pickle，PyYAML**
等模块能代码/命令执行，详细可看下文。
**CSRF**
django这类的框架 **自带csrf防护** ，不过在去年依然爆出csrf漏洞[
**CVE-2016-7401-Django**](http://blog.knownsec.com/2016/10/django-csrf-bypass_cve-2016-7401/)（知道创宇这篇分析很细致），如果django使用了Google
Analytics则可能绕过django自带的csrf防护机制。
Django对于CSRF的防护就是 **判断cookie中的csrftoken和提交的csrfmiddlewaretoken** 的值是否相等，但是
**Google Analytics可以通过referer帮我们设置用户的cookie** ，cookie一般如下：
        utmz=123456.123456789.11.2.utmcsr=[HOST]|utmccn=(referral)|utmcmd=referral|utmcct=[PATH]
其中[HOST]和[PATH]是由Referer确定的，也就是说当
    Referer: http://x.com/helloworld
时，cookie如下：
        z=123456.123456789.11.2.utmcsr=x.com|utmccn=(referral)|utmcmd=referral|utmcct=helloworld
django在当时的版本有cookie解析漏洞，当Cookie.SimpleCookie()解析a=hello]b=world这样的字符串时，就会取得a=hello和b=world，所以当Referer为http://x.com/hello]csrftoken=world，csrftoken就被成功赋值。
详细的[ **代码分析**](http://blog.knownsec.com/2016/10/django-csrf-bypass_cve-2016-7401/)，值得一看。
**文件上传**
在php环境下如果不限制上传文件后缀会导致getshell，但在django下，如果上传的文件能覆盖类似url.py，__init__.py的文件，攻击者能顺利getshell。参考
。还有django只有在development server的模式下才会修改了文件就立刻重启，否则修改了文件也暂时无法生效。
当然除此之外还有其他方法，例如写cron（前提是有权限），和模板文件。
简单说一下写模板文件的过程：
需要在templatetags和templates分别写入一个文件（可能也不叫templatetags，可自行定义），templatetags文件夹内存放自定义标签，上传文件rce.py，代码如下：
        from django import template
        import os
        register = template.Library()
        @register.simple_tag
        def some_function(value):
            shell = os.system('touch mapl0')
            return shell
templates文件夹存放静态html文件，上传文件home.html如下：
            Title
        {% load rce %}
        {% some_function "%s" as func %}
         command is {{ func }} 
在view里，index会使用这个模板：
        def index(request, *args, **kwargs):
            return render(request, 'home.html')
访问后，就在项目目录生成了mapl0文件。
可见使用限制很大，还需要一定的权限。首先，文件后缀没有限制，其次上传路径没有限制，templatetags目录已知，另外还需要有view使用这个模板。
另外xml和html文件的自由上传依然可以造成xxe和xss。
**文件包含**
[案例](http://bobao.360.cn/news/detail/1475.html)
相比之下文件包含比php少得多
**重定向**
****
django在今年爆出了两个重定向漏洞[CVE-2017-7233&7234](https://paper.seebug.org/274/)其中的CVE-2017-7233与urlparse有关，漏洞的说明可查看下文。
**不安全模块及函数**
****
**内建函数**
**input():**
python input() 相等于 eval(raw_input(prompt))
，用来获取控制台的输入,在python3.0以后的版本中取消raw_input,并用input代替.
        value = input("hello ")
        print("welcome %s" % (value,))
python2命令行下：
        hello dir()
        welcome ['__builtins__', '__doc__', '__file__', '__name__', '__package__']
python3命令行下:
        hello dir()
        welcome dir()
**assert():**
assert断言是声明其布尔值必须为真的判定，如果发生异常就说明表达示为假。
        Traceback (most recent call last):
          File "/Users/mapl0/Desktop/资料/sec.py", line 3, in 
            assert os.system('touch test')
        AssertionError
报了个错误，但test文件已被建立
**代码执行函数**
eval:计算字符串中的表达式
exec:执行字符串中的语句
execfile:用来执行一个文件#python3中已无此函数
        a = "print('eval:hello')"
        b = "print('exec:hello')"
        eval(a)
        exec(b)
python2和python3下结果一样
eval:hello
exec:hello
execfile('temp.bin')#temp.bin内容为print('execfile:hello')
结果
execfile:hello
**os模块:**
os.system
os.popen#和os.system的区别在于popen会把命令的输出作为返回值
os.spawn
[os.exec家族](http://wangyongbin.blog.51cto.com/8964308/1672725)
**commands模块 :**
    commands.getstatusoutput
**subprocess模块 :**
subprocess.Popen
subprocess.call通过子进程进行外壳注入
        from subprocess import call
        unvalidated_input = '/bin/true'#true命令啥都不做,只设置退出码为0
        unvalidated_input += '; cut -d: -f1 /etc/passwd'
        call(unvalidated_input, shell=True)#当shell=true时，shell命令可被当做多句执行。
运行结果
nobody
root
……..
multiprocessing多进程模块 :
        import multiprocessing
        p = multiprocessing.Process(target=print, args=("hello"))#target参数为函数名，args为函数所需参数
        p.start()
        p.join()
运行结果
h e l l o
**pty :**
只能在linuxmac下使用的 **伪终端**
        import pty
        pty.spawn('ls')
在python23下均可执行命令
其他有安全问题模块及函数
**codecs :**
codecs作用于各种编码之间的相互转换
        import codecs
        import io
        b = b'x41xF5x42x43xF4'
        print("Correct-String %r") % ((repr(b.decode('utf8', 'replace'))))
        with open('temp.bin', 'wb') as fout:
            fout.write(b)
        with codecs.open('temp.bin', encoding='utf8', errors='replace') as fin:
            print("CODECS-String %r") % (repr(fin.read()))