title:RheoStat: Real-Time Risk Management
author:Ashish Gehani and
Gershon Kedem
RheoStat: Real-Time Risk Management
Ashish Gehani(cid:1) and Gershon Kedem
Department of Computer Science, Duke University
Abstract. As the frequency of attacks faced by the average host connected to the
Internet increases, reliance on manual intervention for response is decreasingly
tenable. Operating system and application based mechanisms for automated re-
sponse are increasingly needed. Existing solutions have either been customized
to speciﬁc attacks, such as disabling an account after a number of authentication
failures, or utilize harsh measures, such as shutting the system down. In contrast,
we present a framework for systematic ﬁne grained response that is achieved by
dynamically controlling the host’s exposure to perceived threats.
This paper introduces a formal model to characterize the risk faced by a host. It
also describes how the risk can be managed in real-time by adapting the exposure.
This is achieved by modifying the access control subsystem to let the choice
of whether to grant a permission be delegated to code that is customized to the
speciﬁc right. The code can then use the runtime context to make a more informed
choice, thereby tightening access to a resource when a threat is detected. The
running time can be constrained to provide performance guarantees.
The framework was implemented by modifying the Java Runtime. A suite of
vulnerable Jigsaw servlets and corresponding attacks was created. The follow-
ing were manually added: code for dynamic permission checks; estimates of the
reduction in exposure associated with each check; the frequencies with which in-
dividual permissions occurred in a typical workload; a global risk tolerance. The
resulting platform disrupted the attacks by denying the permissions needed for
their completion.
1
Introduction
This paper presents a new method of intrusion prevention. We introduce a mechanism
to dynamically alter the exposure of a host to contain an intrusion when it occurs. A
host’s exposure comprises the set exposures of all its resources. If access to a resource
is to be controlled, then a permission check will be present to safeguard it. The set of
permissions that are utilized in the process of an intrusion occurring can thus be viewed
as the system’s exposure to that particular threat.
By performing auxiliary checks prior to granting a permission, the chance of it being
granted in the presence of a threat can be reduced. By tightening the access control
conﬁguration, the system’s exposure can be reduced. By relaxing the conﬁguration, the
exposure can be allowed to increase. The use of auxiliary checks will introduce runtime
overhead. In addition, when permissions are denied, applications may be prevented
from functioning correctly. These two factors require that the use of the auxiliary checks
must be minimized.
(cid:1) Supported by a USENIX Association Research Grant and a North Carolina Networking Ini-
tiative Graduate Fellowship.
E. Jonsson et al. (Eds.): RAID 2004, LNCS 3224, pp. 296–314, 2004.
c(cid:1) Springer-Verlag Berlin Heidelberg 2004
RheoStat: Real-Time Risk Management
297
We ﬁrst investigate how the auxiliary checks can be performed by modifying the
access control subsystem. After that we introduce a model for measuring and managing
the risk by dynamically altering the host’s exposure. Finally, we demonstrate how the
approach can be used to contain attacks in real-time.
2 Predicated Permissions
One approach is to use a subset of the security policy that can be framed intuitively.
While this method suffers from the fact that the resulting speciﬁcation will not be com-
plete, it has the beneﬁt that it is likely to be deployed. The speciﬁc subset we consider is
that which constitutes the authorization policy. These consist of statements of the form
(σ ⇒ p). Here p is a permission and σ can be any legal statement in the policy, L. If
σ holds true, then the permission p can be granted. The reference monitor maintains an
access control matrix, M , which represents the space of all combinations of the set of
subjects, S, set of objects, O, and the set of authorization types, A.
M = S × O × A, where p(i, j, k) ∈ M
Traditionally, the space M is populated with elements of the form:
(1)
(2)
if the subject S[i] should be granted permission A[k] to access object O[j], and other-
wise with:
p(i, j, k) = 1
p(i, j, k) = 0
(3)
(4)
In our new paradigm, we can replace the elements of M with ones of the form:
p(i, j, k) = σ, where σ ∈ L
Thus, a permission check can be the evaluation of a predicate framed in a suitable
language, L, which will be required to evaluate to either true or false, corresponding to
1 or 0, instead of being a lookup of a binary value in a static conﬁguration.
3 Active Monitoring
To realize our model of evaluating predicates prior to granting permissions, we augment
a conventional access control subsystem by interceding on all permission checks and
transferring control to our ActiveMonitor as shown in Figure 11. If an appropriate
binding exists, it delegates the decision to code customized to the speciﬁc right. Such
bindings can be dynamically added and removed to the running ActiveMonitor through
a programming interface. This allows the restrictiveness of the system’s access control
conﬁguration to be continuously varied in response to changes in the threat level.
Our prototype was created by modifying the runtime environment of Sun’s Java De-
velopment Kit (JDK 1.4), which runs on the included stack-based virtual machine. The
runtime includes a reference monitor, called the AccessController, which we altered
as described below.
1 The impact of interceding alone (without counting the effect of evaluating predicates) does not
impact the running time of SPECjvm98 [SPECjvm98] with any statistical signiﬁcance.
298
Ashish Gehani and Gershon Kedem
Intrusion Detector
Threat Level:  l
σ
 (i,j,k)
MonitorException:
Timer Expired
True
False
Benefit[    (i,j,k), l]
   > Cost[    (i,j,k)]
σ
σ
False
True
Defined
Undefined
Predicate
σ
   (i,j,k)
True
D(i,j,k)
Default for
     p(i,j,k)
False
MonitorException:
σ
(i,j,k)
Access Control: M
Right:  k
Permission
p(i,j,k) Denied
Object:  j
Subject:  i
Request Permission p(i,j,k)
Permission
p(i,j,k) Granted
Application
Fig. 1. Static permission lookups are augmented using an ActiveMonitor which facilitates the
use of runtime context in deciding whether to grant a permission. ActiveMonitor predicated
permissions have 3 distinguishing features: (i) Constant running time, (ii) Dynamic activation if
expected beneﬁt exceeds cost, (iii) Interrogatable for cause of denial.
3.1 Interposition
When an application is executed, each method that is invoked causes a new frame to be
pushed onto the stack. Each frame has its own access control context that encapsulates
the permissions granted to it. When access to a controlled resource is made, the call
through which it is made invokes the AccessController’s checkPermission() method.
This inspects the stack and checks if any of the frames’ access control contexts contain
permissions that would allow the access to be made. If it ﬁnds an appropriate permission
it returns silently. Otherwise it throws an exception of type AccessControlException.
See [Koved98] for details.
RheoStat: Real-Time Risk Management
299
We altered the checkPermission() method so it ﬁrst calls the active ActiveMonitor’s
checkPermission() method. If it returns with a null value, the AccessController’s
checkPermission() logic executes and completes as it would have without modiﬁca-
tion. Otherwise, the return value is used to throw a customized subclass of AccessCon-
trolException which includes information about the reason why the permission was
denied. Thus, the addition of the ActiveMonitor functionality can restrict the permis-
sions, but it can not cause new permissions to be granted. Note that it is necessary to in-
voke the ActiveMonitor’s checkPermission() ﬁrst since the side-effect of invoking this
method may be the initiation of an exposure-reducing response. If it was invoked after
the AccessController’s checkPermission(), then in the cases that an AccessControlEx-
ception was thrown, control would not ﬂow to the Active Monitor’s checkPermission()
leaving any side-effect responses uninitiated.
Code that is invoked by the ActiveMonitor should not itself cause new ActiveMon-
itor calls, since this could result in a recursive loop. To avoid this, before the Active-
Monitor’s checkPermission() method is invoked, the stack is traversed to ensure that
none of the frames is an ActiveMonitor frame, since that would imply that the current
thread belonged to code invoked by the ActiveMonitor. If an ActiveMonitor frame is
found, the AccessController’s checkPermission() returns silently, that is it grants the
permission with no further checks.
3.2 Invocation
When the system initializes, the ActiveMonitor ﬁrst creates a hash table which maps
permissions to predicates. It populates this by loading the relevant classes, using Java
Reﬂection to obtain appropriate constructors and storing them for subsequent invoca-
tion. At this point it is ready to accept delegations from the AccessController.
When the ActiveMonitor’s
checkPermsission() method is
invoked, it uses the permission
passed as a parameter to per-
form a lookup and extract any
code associated with the per-
mission. If code is found, it is
invoked in a new thread and
a timer is started. Otherwise,
the method returns null, in-
dicating the AccessController
use the static conﬁguration de-
cide if the permission should
be granted. The code must be a subclass of the abstract class PredicateThread. A
skeletal version is presented in Figure 2. This ensures that it will store the result in a
shared location when the thread completes and notify the ActiveMonitor of its com-
pletion via a shared synchronization lock.
Fig. 2. Skeletal version of PredicateThread
The shared location is inspected when the timer expires. If the code that was run
evaluated to true, then a null is returned by the ActiveMonitor’s checkPermission()
method. Otherwise a string describing the cause of the permission denial is returned.
300
Ashish Gehani and Gershon Kedem
If the code had not ﬁnished executing when the timer expired, a string denoting this
is returned. As described above, when a string is returned, it is used by the modiﬁed
AccessController to throw an ActiveMonitorException, our customized subclass of
AccessControlException, which includes information about the predicate that failed.
The thread forked to evaluate code can be destroyed once its timer expires. Care must be
taken when designing predicates so that their destruction midway through an evaluation
does not affect subsequent evaluations.
Finally, the ActiveMonitor’s own conﬁguration can be dynamically altered. It ex-
poses enableSafeguard() and disableSafeguard() methods for this. These can be used
to activate and deactivate the utilization of the auxiliary checks for a speciﬁc permis-
sion. If a piece of code is being evaluated prior to granting a particular permission
and there is no longer any need for this to occur, it can be deactivated with the dis-
ableSafeguard() method. Subsequently that permission will be granted using only the
AccessController’s static conﬁguration using a lookup of a binary value. Similarly, if
it is deemed necessary to perform extra checks prior to granting a permission, this may
be enabled by invoking the enableSafeguard() method.
4 Risk
Given the ability to predicate permissions the successful veriﬁcation of auxiliary con-
ditions, we now consider the problem of how to choose when to use such safeguards.
The primary goal of an intru-
sion response system is to guard
against attacks. However, invok-
ing responses arbitrarily may safe-
guard part of the system but leave
other weaker areas exposed. Thus,
to effect a rational response, it is
necessary to weigh all the possi-
ble alternatives. A course of ac-
tion must then be chosen which
will result
in the least damage,
while simultaneously assuring that
cost constraints are respected. Risk
management addresses this prob-
lem.
4.1 Risk Factors
Threat
Likelihood
Vulnerabilities
Safeguards
Risk
Assets
Consequences
Risk
Threshold