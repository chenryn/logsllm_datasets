also be hidden. Instead, QUIC settled on the more optimized
(but somewhat exotic) construction shown in Figure 4 and
detailed in Figure 5. In the discussion below, we refer to this
construction as QPE[AE, PRF], since it is parameterized by
the particular authenticated encryption (A) and pseudo-random
function (PRF) algorithms selected during TLS ciphersuite
negotiation.
The main inputs to the construction are the packet number
N, the plaintext message M, the ﬂags and QUIC-speciﬁc
headers H, and the number LN of least-signiﬁcant bytes of N
to send on the wire (between 1 and 4). The key materials
consist of three cryptographic secrets: K1 for the AEAD
scheme, K2 for the PRF, and SIV , a 12-byte static IV which
is combined with the full 62-bit packet number N to form
the AEAD nonce. The construction ﬁrst performs a normal
AEAD encryption, using the message M as the plaintext, and
the header H as the additional data.
QUIC then computes a header protection (HP) mask which
it uses to hide the truncated packet number Nlsb and some
bits of the ﬂags—including those encoding the length LN .
The mask is computed by applying the PRF to a ﬁxed-size
fragment (called the sample) of the ciphertext C. The mask is
split in two parts: the ﬁrst byte is used to encrypt LN , and the
next 4 bytes are truncated to LN and applied at the offset of the
encrypted packet number. Because LN is hidden, it is difﬁcult
for the packet’s recipient to know the boundary between the
protected headers H(cid:2) and the ciphertext C (and thus where
the sample starts). This could be mitigated by choosing the
last bytes of C for the sample, but QUIC solves this problem
differently: the position of the sample is computed by assuming
that LN = 4, hence skipping the ﬁrst 4− LN bytes of C. This
requires all ciphertexts to be at least 20 bytes long, instead of
16 if the end of C was used. Since most AEAD tags are only
16 bytes, QUIC effectively requires a minimum of 4 bytes of
plaintext in every packet (which can be achieved by adding
padding frames). Since LN is conﬁdential, header decryption
is also difﬁcult to implement in constant time (we revisit this
issue in §IV-D).
1165
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:53 UTC from IEEE Xplore.  Restrictions apply. 
Keygen()
Ns ←$ {0, 1}AE.nlen
K1 ←$ AE.keygen()
K2 ←$ PNE.keygen()
return (Ns, K1, K1)
Encode(N, LN )
return N &(28LN − 1)
csample(C)
return C[4..20]
PNdec(K2, P )
H, C ← split(P, 1 +(cid:2) H (P ))
S ← csample(C)
B ← F.compute(K2, S)
F ← C[0] ⊕ (B[0]&15)
LN ← 1 +F &3
C(cid:2)(cid:2), C(cid:2) ← split(C, LN )
Ne ← C(cid:2)(cid:2) ⊕ B[1..1 +L N ]
H(cid:2) ← H(cid:5)LN(cid:5)Ne
return LN , Ne, H(cid:2), C(cid:2)
Dec(K, Ni, P )
Ns, K1, K2 ← K
LN , Ne, H(cid:2), C(cid:2) ← PNdec(K2, P )
N ← Decode(Ne, Ni, LN ) ⊕ Ns
M ← AE.dec(K1, N, H(cid:2), C(cid:2))
return M
Decode(Ne, Ni, LN )
W ← 28LN ; X ← Ni + 1
N ← N e + (X&(W − 1))
if N ≤ X − W/2
∧N  X + W/2 ∧ N ≥ W
return N − W
return N
PNenc(K2, LN , N(cid:2), S)
B ← F.compute(K2, S)
C(cid:2) ← N(cid:2) ⊕ B[1..1 +L N ]
C(cid:2)(cid:2) ← LN ⊕ (B[0]&15)
return C(cid:2)(cid:2)(cid:5)C(cid:2)
psample(C, LN )
return C[(4 − LN )..(20 − LN )]
Enc(K, N, H, M )
Ns, K1, K2 ← K
LN ← 1 +H [0]&3
Ne ← Encode(N, LN )
N0 ← N ⊕ Ns
H(cid:2) ← H(cid:5)LN(cid:5)Ne
C ← AE.enc(K1, N0, H(cid:2), M )
S ← psample(C, LN )
C(cid:2) ← PNenc(K2, LN , Ne, S)
return H(cid:5)C(cid:2)(cid:5)C
Fig. 5: Detailed deﬁnition of the QPE[AE,F] construction, with
a few simpliﬁcations. In the real construction, the encrypted
headers (ﬂags and packet number) are interleaved with the
plaintext headers; our veriﬁed implementation uses this header
format for interoperability. In the ﬁgure, we move the en-
crypted ﬂags next to the encrypted packet number.
B. QUIC-Packet-Encryption Security
Although QPE[AE, PRF] is a new construction, it is similar
to other constructions that have been proposed for nonce-
hiding encryption, that is, constructions where the nonce is not
an input of the decryption function but is instead embedded
into the ciphertext. For instance, QPE is comparable to the
HN1 construction of Bellare et al. [11], which comes with a se-
curity deﬁnition, AE2, that captures the fact that the embedded
nonce is indistinguishable from random, and with a reduction
to standard assumptions. (§A recalls their deﬁnitions.)
In line with their work, we deﬁne a security notion for
partially nonce-hiding encryption that aims to capture the
security goal of QUIC’s approach to packet encryption. For
simplicity, however, it does not reﬂect the fact that header
protection also applies to other parts of the header, such as
reserved ﬂags and the key-phase bit.
Notation Following the well-established approach of Bellare
and Rogaway [12], we deﬁne the security of a functionality F
as the probability (called the advantage) G(A) that an ad-
versary A, interacting with a game Gb(F ) (whose oracles are
parameterized by a random bit b), guesses the value of b with
better than random chance, i.e. G(A) = |2 Pr[Gb(A) = b]−1|.
By convention, when b = 0, the oracles of G behave exactly
like the functions in the functionality F ; we also refer to G0 as
the real functionality. In contrast, the oracles of G1 capture the
perfect intended behavior, or the ideal functionality, which is
typically expressed using shared state. The reason we insist on
real-or-ideal indistinguishability games will be more apparent
in §IV, as we formalize type-based security veriﬁcation using
idealized interfaces. We refer the reader to Brzuska et al. [21]
for a detailed introduction to the methodology.
Deﬁnitions To illustrate our notation, consider the standard
security deﬁnition for a keyed pseudo-random functionality F ,
which offers a single function, namely compute : {0, 1}(cid:3)K ×
{0, 1}(cid:3) → {0, 1}(cid:3). The real functionality (b = 0) just evaluates
the function. The ideal functionality (b = 1) is a random
function, implemented using a private table T to memoize
randomly sampled values of length (cid:3).
Game PRFb(F)
T ← ∅
k $← {0, 1}F.(cid:3)K
Oracle Compute(X)
if b = 1 then
if T [X] = ⊥ then T [X] $← {0, 1}F.(cid:3)
return T [X]
return F.compute(k, X)
Our security deﬁnition for packet encryption is a reﬁnement
of the standard notion of authenticated encryption security,
AE1, shown below, for a symmetric encryption scheme SE1.
In the deﬁnition, ideal encryption is implemented by sampling
a random ciphertext ((cid:3)tag bits longer than the plaintext), and
ideal decryption by a lookup in a global table indexed by the
nonce, ciphertext, and header.
Game AE1b(SE1)
T ← ∅; k $← SE1.gen()
Oracle Decrypt(N, C, H)
if b = 1 then
M ← T [N, C, H]
M ← SE1.dec(k, N, C, H)
else
return M
Oracle Encrypt(N, M, H)
assert T [N, _, _] = ⊥
if b = 1then
C $← {0, 1}|M|+SE1.(cid:3)tag
T [N, C, H] ← M
C ← SE1.enc(k, N, M, H)
else
return C
In AE1, the correct nonce must be known by the recipient
of the message in order to decrypt. In TLS, the nonce is
obtained by counting the packets that have been received, but
this does not work in QUIC where packets are delivered out of
order. Instead, the recipient only knows an approximate range
(which depends on LN ), while the ﬁne-grained position in that
range (the encrypted packet number in the packet headers) is
embedded in the ciphertext.
To move towards nonce-hiding encryption, we introduce
the deﬁnition AE5 for encryption with variable-sized, semi-
implicit nonces. The idea behind this deﬁnition is informally
described in an unpublished note by Namprempre, Rogaway
and Shrimpton [41] where it is referred to as AE5 in reference
to the 5 inputs of the encryption function; however, to our
knowledge, the deﬁnition has never been formalized, and no
construction has been proposed or proved secure with respect
to this deﬁnition.
Game AE5b(E)
T ← ∅; k $← E.gen()
Oracle Decrypt(Ni, C, H)
if b = 1 then
LN , M ← T [N, C, H]
for N s.t. E.valid(N, Ni, LN )
N, LN , M ← E.dec(k, Ni, C, H)
else
return N, LN , M
Oracle Encrypt(N, LN , M, H)
assert T [N, _, _] = ⊥
if b = 1then
C $←{0, 1}LN +E.(cid:3)LN
T [N, C, H] ← LN , M
C ← E.enc(k, N, LN , M, H)
else
+|M|+E.(cid:3)tag
return C
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:53 UTC from IEEE Xplore.  Restrictions apply. 
1166
In its encryption scheme E, the function E.enc takes in
the full nonce N and its encoding length LN , and produces
a random ciphertext whose length accounts for the tag of
length E.(cid:3)tag, the explicit nonce of length LN , and E.(cid:3)LN ,
the encoded size of LN . E.dec only needs the implicit nonce
Ni, which must contain enough information to reconstruct the
full nonce N for the selected LN . Hence the deﬁnition is para-
metric over a validity predicate E.valid to ensure the ideal and
real versions succeed or fail consistently. If there is no N such
that valid(N, Ni, LN ), ideal decryption fails. For instance, one
could use valid(N, Ni, LN ) := msb(N,|N| −L N ) = Ni, but
QUIC’s exact predicate (in_window) is formalized in the next
section. AE5 generalizes both standard AE1 (when LN = 0)
and nonce-hiding encryption (AE2) when LN = |N|.
Nonce-Hiding Stream Encryption We now introduce a no-
tion of nonce-hiding stream encryption security, for a stateful
encryption scheme SE that encrypts message M and protects
header H. The idea is to use a sliding window of packets: the
receiver moves the window each time it successfully decrypts
a packet. Packets in the window may be decrypted out of order.
The same packet may or may not decrypt depending on the
receiver state, which is accounted for by the validity predicate.
Game NHSEb(SE)
ce ← 0; cd ← 0; S $← SE.gen()
Oracle Decrypt(C, H)
if b = 1 then
N, LN , M ← AE5.Decrypt(cd, C, H)
if M (cid:10)= ⊥ then
cd ← max(cd, N )
else
N, LN , M, S(cid:2) ← SE.dec(S, C, H)
S ← S(cid:2)
return LN , M
Oracle Encrypt(LN , M, H)
if b = 1then
(ce, LN , M, H)
else
C $← AE5.Encrypt
ce ← ce + 1
C, S(cid:2) ← SE.enc
S ← S(cid:2)
return C
(S, LN , M, H)
The actual QUIC stream encryption (QSE) construction is
similar to the ideal functionality of NHSE: a counter ce is used
to send packets with QPE, and a counter cd stores the highest
decrypted packet number received. In our veriﬁed implemen-
tation, we prove constructively that, given an adversary A for
NHSEb[QSE], we can program an adversary A(cid:2) for AE5b[QPE]
with the same advantage.
Security Theorem Our main security result reduces the secu-
rity of QUIC’s packet encryption construction, QPE[AE,PRF],
to the AE1 security of AE and the security of the PRF.
Theorem 1 (QPE Security). Given an adversary A against
the NHSEb(QPE[AE, PRF]) game, we construct adversaries
A(cid:2)
against PRFb(PRF) such that:
against AE1b(AE) and A(cid:2)(cid:2)
QPE
NHSE
(A) ≤ AE
AE1
(A(cid:2)) + PRF
PRF
(A(cid:2)(cid:2)) +
q(q − 1)
2PRF.(cid:3)+1
where q is the number of encryptions and failed decryptions
performed, and where PRF.(cid:3) is the output length of the PRF.
Except for the initial steps carried out on paper and
explained in §III-C, the proof of Theorem 1 is mechanically
veriﬁed in F(cid:2) against the gnarly details of the concrete QUIC
construction. Informally, the idea of the proof is to modularize
the AE5 deﬁnition to separate the encryption of the explicit
nonce from the AEAD encryption of the payload. This is done
by stealing a part of the AEAD ciphertext called the sample
1167
to use as a fresh random IV for nonce encryption (also called
header protection in QUIC). The proof has two main steps,
ﬁrst applying AE1, so that ciphertexts and samples become
fresh random bytestrings, then applying PRF. The probability
of sample collisions when modelling header encryption with
a PRF that produces one-time pads is bounded by a quadratic
term, much as in the classic PRP/PRF switching lemma.
For simplicity, this section presents single-instance versions
of the AE5 and PRF games. In our mechanization of the proof,
which aims at verifying cryptographic libraries, all games are
multi-instance, but the state of each instance is independent;
hence the bound of Theorem 1 generalizes to the multi-instance
setting by multiplying the collision term by the number of
honest instances.
Nonce Conﬁdentiality Careful readers will notice that the
AE5 deﬁnition, as written, does not directly yield conﬁdential-
ity of the explicit packet number Ne, because the decryption
oracle returns LN and N, from which it is possible to derive
Ne. We have two reasons for writing the deﬁnition in this
way: ﬁrst, this ensures modularity of the security deﬁnitions for
header encryption (Ne) and stream encryption (Ni) in the state-
separation game-playing framework [21], which also translates
to the modularity of the F(cid:2) implementation of our model;
and second, we observe that many QUIC implementations
break nonce conﬁdentiality by performing actions based on the
packet number of the decrypted packet, for instance by using a
Bloom ﬁlter to detect packets that have been already processed.
Such operations may lead to concrete implementation attacks
(e.g., introducing timing side channels based on whether the
Bloom ﬁlter rejects the packet). In our implemented model,
we deal with this problem by returning N (even in NHSE)
at an abstract type that can conditionally be revealed, thus
allowing our record implementation to be used both with QUIC
implementations that preserve nonce conﬁdentiality and with
those that break it. For the paper model, it is possible to
avoid the difﬁculty either by not returning N in Decrypt, or to