249.60
885.10
406.71
WebAssembly
Edge Chrome
65.23
63.62
201.68
233.08
2,999.63
871.27
2,522.37
966.80
Firefox
39.65
345.98
2,493.02
2,894.20
Edge
83.53
192.87
2,996.20
3,087.24
compiler (0.93x on Chrome and 0.91x on Firefox), with the excep-
tion that CHStone benchmarks in WebAssembly runs faster with
the default setting on Chrome (1.07x faster).
JIT Optimization for WebAssembly on Chrome vs. Firefox. As
4.4.2
shown in Fig. 10(c) and Fig. 10(d), no significant performance im-
provement for WebAssembly with JIT was observed on Chrome. To
investigate if the same behavior can be observed on a browser with
different execution engine, we repeat the study for WebAssembly
on JIT-enabled Firefox and JIT-disabled Firefox.
In particular, both Chrome v79 and Firefox v71 have a two-layer
compiler structure for WebAssembly: a basic compiler (‘LiftOff’
in Chrome and ‘Baseline’ in Firefox), which aims for quick com-
pilation at the expense of less effective code, and an optimizing
compiler (‘TurboFan’ in Chrome and ‘Ion’ in Firefox), that performs
JIT compilation to generate high-performance code while taking
more time to compile. The basic and optimizing compilers are both
enabled by default in Chrome and Firefox. To understand the effec-
tiveness of the two compilers, we perform experiments with three
different settings: only enabling basic compiler (optimizing com-
piler disabled, i.e., JIT disabled), only enabling optimizing compiler
(basic compiler disabled), and enabling both compilers (which is
the default browser setting) on Chrome and Firefox.
Table 7 shows the performance improvement of WebAssembly
with three experiment settings in Chrome (columns 3 and 5) and
Firefox (columns 4 and 6). The numbers in the table are the execu-
tion speed ratio of the default setting (that uses both compilers) to
the setting that only enables the basic/optimizing compiler. As can
be seen, we observed similar results on both Chrome and Firefox for
JIT-enabled browser vs. JIT-disabled browser. Specifically, enabling
both compilers (i.e., the default setting) is slightly faster than the
JIT-disabled setting (i.e., only enabling the basic compiler) on both
Chrome and Firefox (1.09x geometric mean on Chrome and 1.12x
on Firefox). Additionally, we observed that enabling both compilers
is slightly slower than the setting that only enables the optimizing
543
4.5 Impact of Browsers and Platforms
To measure the performance impact of browsers and platforms,
we test WebAssembly and JavaScript in six deployment settings:
desktop Chrome (v79), desktop Firefox (v71), desktop Edge (v79),
mobile Chrome (v79), mobile Firefox (v68), and mobile Edge (v44).
Table 8 shows the statistics of execution time and memory usage
results. Detailed performance results can be found in Appendix C.
Execution Time of JS/WASM Across Browsers. On desktop,
Chrome is the fastest in executing the tested JavaScript programs.
Firefox is slightly slower, with 1.06x execution time, compared
to Chrome. However, Firefox executes WebAssembly much faster
(0.61x execution time) than Chrome. Such differences may indi-
cate Firefox’s WebAssembly implementations are more optimized
for performance. For example, in October 2018, Firefox released a
new version that has made the calls between WebAssembly and
JavaScript much faster by getting rid of unnecessary work to or-
ganize stack frames and taking the most direct path between func-
tions [11]. To quantify the context switch overhead, we measure
the time used for switching between WebAssembly and JavaScript
in three desktop browsers. The result shows that Firefox performs
much faster (only 0.13x execution time) than Chrome and Edge,
indicating that the optimization made by Firefox for function calls
between WebAssembly and JavaScript is efficient.
On mobile devices, the performance comparison of the three
browsers is different from the result on desktop. Specifically, Firefox
has better performance on executing JavaScript programs compared
to Chrome (0.67x execution time), but it takes more time (1.48x ex-
ecution time) to execute the WebAssembly counterparts. Similarly,
Edge performs worse than Chrome for both JavaScript (1.40x exe-
cution time) and WebAssembly (1.28x execution time) on desktop.
21.7638.37020406080100120140covariancecorrelationgemmgemvergesummvsymmsyrksyr2ktrmm2mm3mmataxbicgdoitgenmvtcholeskydurbingramschmidtluludcmptrisolvderichefloyd-warshallnussinovadifdtd-2dheat-3djacobi-1djacobi-2dseidel-2dGeo. meanAverage(a)JavaScript – PolyBenchC(b)JavaScript – CHStone1.001.020.00.51.01.52.0ADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHAGeo. meanAverage(c)WebAssembly - PolyBenchC (d)WebAssembly - CHStone0.00.51.01.52.01.101.110.00.51.01.52.01.091.09ADPCMAESBLOWFISHDFADDDFDIVDFMULDFSINGSMMIPSMOTIONSHAGeo. meanAveragecovariancecorrelationgemmgemvergesummvsymmsyrksyr2ktrmm2mm3mmataxbicgdoitgenmvtcholeskydurbingramschmidtluludcmptrisolvderichefloyd-warshallnussinovadifdtd-2dheat-3djacobi-1djacobi-2dseidel-2dGeo. meanAverageIMC ’21, November 2–4, 2021, Virtual Event, USA
Y. Yan et al.
However, Edge outperforms Chrome on mobile for JavaScript (0.81x
execution time) and WebAssembly (0.83x execution time).
Execution Time of JS vs. WASM Across Browsers. As can be
seen, the performance of WebAssembly on Firefox and Chrome
differs significantly between mobile platform and desktop platform.
Unlike Chrome that uses the same codebase for both mobile and
desktop versions, Firefox for Desktop uses the Gecko web engine
and Firefox for Android uses the GeckoView engine [68]. Geck-
oView is a lightweight implementation of Gecko suited for mobile
devices. This difference in deployment between Chrome and Firefox
could explain the differences in performance. In addition, Firefox’s
JavaScript engine, SpiderMonkey, has some differences for mobile
architectures as well. SpiderMonkey features a two-tier compilation
system for WebAssembly. A quick, less-performant baseline compi-
lation is performed first, and then a more-optimized JIT compilation
is performed. Normally, SpiderMonkey uses the BaldrMonkey en-
gine [69] to perform the tier-2 compilation. However, on ARM64
platforms (such as the MI 6 used in our mobile evaluation), this
engine is not supported and is replaced with Cranelift for code
generation. This difference in engines also contributes to the per-
formance difference. The performance of Mobile Chrome and Edge
browsers are relatively similar because they both are forks of the
Chromium Blink engine.
Memory Usage. The memory usage results on desktop and mo-
bile browsers are shown in Table 8. On desktop, Firefox uses less
memory than Chrome for both JavaScript (0.57x) and WebAssembly
(0.83x). Edge uses similar memory as Chrome (0.98x for JavaScript
and 1.00x for WebAssembly). On mobile, Chrome uses less memory
than Firefox (0.59x for JavaScript and 0.87x for WebAssembly) and
Edge (0.42x for JavaScript and 0.82x for WebAssembly).
For all desktop browsers, WebAssembly uses more memory
(3.39x on Chrome, 4.93x on Firefox, and 3.44x on Edge) than Java-
Script. Mobile browsers show a similar result: WebAssembly uses
6.20x more memory on Chrome, 4.18x on Firefox, and 3.19x on Edge.
As we discussed in Sec. 4.3, unlike JavaScript that uses garbage
collection to reclaim memory no longer in use automatically, We-
bAssembly allocates a large chunk of memory at the instantiation
time for the module to use. WebAssembly memory is a growable
array of bytes, and the default size of the array is large compared to
JavaScript applications. A potential improvement on WebAssembly
memory usage is to implement more adaptive memory manage-
ment (e.g., by leveraging memory allocators) rather than creating a
giant memory block at the beginning of the execution.
4.6 Impact of Source Programs
To show that our findings are valid for more diverse programs, be-
sides the 41 compiled benchmarks, we study two additional program
sets: (1) 9 benchmarks (chosen from PolyBenchC and CHStone) that
were manually reimplemented in JavaScript and (2) 3 real-world
applications obtained from open-source GitHub repositories.
4.6.1 Benchmarks Manually-Implemented in JavaScript. We run the
manually implemented JavaScript programs on desktop Chrome. Ta-
ble 9 shows the results. Observe that most manually reimplemented
programs are slower that Cheerp generated programs. There are
two exceptions, AES and SHA (W3C), which outperform Cheerp
Table 9: Results of Manually-Written JavaScript Programs.
Benchmark
3mm
Covariance
Syr2k
Ludcmp
Floyd-warshall
Heat-3d (W3C)
Heat-3d (math.js)
C
h
c
n
e
B
y
l
o
P
e AES
n
o
t
S
H
C
BLOWFISH
SHA (W3C)
SHA (jsSHA)
LOC
18,387
18,367
18,361
18,400
18,351
63
18,367
896
723
44
342
Time (ms)
Memory (KB)
Manual Cheerp WASM Manual Cheerp WASM
4,321
179.680
2,977
51.278
2,849
54.670
4,513
73.050
2,977
729.535
2,977
761.583
2,977
786.975
1,951
2.405
1,951
36.705
2,015
1.575
2,015
13.120
52.577
34.145
24.460
23.440
308.663
100.325
100.325
0.136
0.245
0.500
0.500
59.050
25.346
13.021
39.878
202.807
69.456
69.456
3.210
12.039
9.866
9.866
3,986
2,738
3,007
4,367
2,771
3,318
3,446
827
856
790
804
885
885
882
883
882
883
883
858
910
956
956
Long.js
Benchmark
Table 10: GitHub Repository Data.
LOC Proj. Size WA Time*+
13.365
1,501
42.190
1,506
7.910
1,501
Hyphen-
308.105
2,264
310.600
opoly.js
2,277
FFmpeg - mp4 to avi
154,170.000
9,167,136
+: WA Time: WebAssembly execution time. *: Time unit: ms.
Input
10,000 mul(36,-2)
10,000 div(-2,-2)
10,000 mod(36,5)
18 KB English Text
18 KB French Text
296 MB MP4
multiplication
division
remainder
en-us
fr
44KB
44KB
44KB
95KB
96KB
23,910KB
JS Time* Ratio
0.730
0.520
0.578
0.938
0.960
0.275
18.305
81.130
13.675
328.550
323.560
560,243.000
generated versions in terms of execution speed. Besides, all man-
ually written PolyBenchC benchmarks consume more memory