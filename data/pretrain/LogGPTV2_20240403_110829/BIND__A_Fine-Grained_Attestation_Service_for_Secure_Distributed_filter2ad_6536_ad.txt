protein folding, misfolding, aggregation, and related dis-
eases.
A distributed computation application is made up of a
supervisor and many participants. The supervisor splits a
job into tasks and assigns a task to each participant. One of
the greatest security concerns for distributed computation
applications is the honesty of participants. In many cases a
participant may be motivated to cheat and inject incorrect
results, either to disrupt the computation or to gain mone-
tary remuneration.
Therefore researchers have endeavored to secure dis-
tributed computation applications against dishonest partic-
ipants. Golle and Mironov [17] present a security based
administrative framework for commercial distributed com-
putations. Their solution relies on redundancy to guar-
antee probabilistic detection of cheating behavior. While
their work is restricted to the class of distributed computing
applications that try to invert a one-way function, Szajda,
Lawson, and Owen [39] extend Golle and Mironov’s work
to optimization and Monte Carlo simulations. Meanwhile,
Monrose et al. propose to generate execution trace on the
participants that can be later used to verify the integrity of
program execution [29].
Securing Distributed Computation Applications with
BIND We model the distributed computing application
as comprised of a supervisor process and many participant
processes. The supervisor process splits the job into tasks.
A participant solves a task and reports the outcome to the
supervisor. Under our conceptual framework, a job is mod-
eled as primitive data; and each task is derived data output
from the supervisor process, and input to a participant pro-
cess. The computation result is derived data output from a
participant process and input to the supervisor process.
Assume now we have the BIND attestation service in
place. Then the supervisor process can ask BIND to sign a
task description before dispatching it to a participant. The
participant can ask the local BIND service to verify the in-
tegrity of the task description; and when the participant pro-
cess computes over the input data, its execution is protected
and vouched for by BIND. The computation result will be
signed by BIND along with an integrity proof of the partici-
pant process that has produced the result. In this way, when
the result is reported to the supervisor, he can easily check
whether the result is trustworthy.
When compared with the literature on securing dis-
tributed computation applications, BIND offers the follow-
ing properties (here we are assuming that the attacker per-
forms software attacks only):
• Deterministic Guarantee: BIND offers deterministic
guarantee on the integrity of the computational result.
In particular, BIND guarantees what code has been run
in generating the result.
• General: While Golle et al. [17] and Szajda et al. [39].
suggest different approaches for securing different
functions, BIND is applicable to all types of distributed
computation applications regardless of what function
we want to compute. Meanwhile, existing works con-
sider a centralized distributed computation model with
one supervisor that distributes tasks to participants. If,
however, we are to change to a distributed coordina-
tion model where participants coordinate themselves,
BIND can still be readily applied.
• Efﬁcient: With BIND, the integrity proof for the com-
putational result is efﬁcient to generate and verify. In
comparison, the execution trace approach by Monrose
et al. is more expensive, since the trace size is linear
in terms of the number of instructions actually exe-
cuted [29]. For BIND, the entire code is measured only
once regardless of how many times each instruction is
executed, and the veriﬁcation takes constant overhead.
5.2 Securing BGP with BIND
The Border Gateway routing Protocol (BGP) enables
routing between administrative domains, and is thus one of
the most important protocols in the current Internet [33].
In this section, we give a brief overview of BGP and its
security requirements, then we show how we can apply the
transitive trust model in this paper to design a highly efﬁ-
cient and secure BGP protocol.
BGP Primer An Autonomous System (AS) is a collec-
tion of routers under one administrative domain, for sim-
plicity assume that an AS corresponds to an Internet Ser-
vice Provider (ISP). In practice, an ISP may have multiple
ASes. An AS is identiﬁed through an AS Number (ASN).
The current Internet has about 19,000 ASes.
A preﬁx is a destination that the routing protocol needs
to establish a route to. A preﬁx is characterized by an IP
address and the number of bits that are ﬁxed in it, for ex-
ample, the preﬁx 209.166.161/24 denotes one of Aka-
mai’s class C networks; /24 means that the ﬁrst 24 bits of
this address are signiﬁcant, all combinations of the remain-
ing 8 bits belong to that network.
BGP stands for Border Gateway Protocol; it is a path
vector routing protocol, establishing a path to each exist-
ing preﬁx. In BGP, neighboring ASes exchange preﬁx in-
formation through BGP Update messages. In a simpliﬁed
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
10
Router A
1
Network
6
1,2,3:
{
ASPATH
,
O
p
e
r
a
t
i
n
g
S
y
s
t
e
m
2
5
,
PHBA
A
(
,
)},
MAC
K
AB
(
ASPATH
,
,
PHBA
A
(
,
))
4,5,6:
{
ASPATH
,
Router C
,
PHCBA
B
(
,
,
)},
MAC
K
BC
(
ASPATH
,
,
PHCBA
B
(
,
,
Router B
3
4
ASPATH 
Generation 
Code
BIND
))
Figure 5. Securing BGP using BIND, the numbers on the arrows represent the temporal order of the
messages.
description, a BGP Update message consists of a preﬁx
along with an ASPATH, i.e., a list of ASes that need to
be traversed to reach that preﬁx. For example, our sim-
pliﬁed update may look as follows: 209.166.161/24,
, which means that AS 3356 owns the
preﬁx, and AS 701 will forward its trafﬁc destined for
209.166.161/24 to AS 3356. If an AS uses that route,
it sends a BGP Update to all of its neighboring ASes,
prepending its ASN to the ASPATH. In our example, if
AS 209 want to use this path, it send the following BGP
Update to its neighbors: 209.166.161/24, . More comprehensive descriptions of BGP
are available [38, 44].
BGP Security Requirements and Approaches The cur-
rent version of BGP was designed for a benign environment,
where ASes could trust each other. Unfortunately, BGP is
so brittle that even misconﬁgurations can cause network-
wide connectivity outages [25, 28]. BGP security vulnera-
bilities are thoroughly studied, for example in the Routing
Protocol Security IETF working group [34], or by research
groups [21, 31].
The two main classes of attack against BGP are: unau-
thorized preﬁx announcements (preﬁx theft), and ASPATH
falsiﬁcations in BGP update messages. Both attacks are in
the category of attracting trafﬁc to a point in the network
that would otherwise not receive the trafﬁc. This allows an
attacker to control packets that it would otherwise have no
control over. These attacks are sometimes referred to as
blackhole attacks, since they attract trafﬁc to a point in the
network.
For example, an attacker may want to control packets
destined for the Google search engine. Using unautho-
rized preﬁx announcement, the attacker (who we assume
owns an AS) injects BGP update messages claiming own-
ership of the Google preﬁx. Its neighboring ASes will then
start forwarding trafﬁc destined to Google towards the at-
tacker. Several researchers have designed mechanisms to
defend against this attack. For example, Kent et al. pro-
posed S-BGP, where they attach an address attestation to
a BGP update, which is a statement signed with the pre-
ﬁx’s private key, allowing the ﬁrst AS to announce that pre-
ﬁx [21, 22]. Other researchers use a similar approach, re-
quiring the preﬁx owner to obtain a certiﬁcate proving own-
ership [7, 18, 20, 43].
The second major class of BGP attacks is ASPATH fal-
siﬁcation, where an attacker not only adds its ASN to the
ASPATH, but also removes or alters earlier ASNs on the
path. Since the number of ASes on the path are used for
routing decisions, removing ASes from the path results in a
shorter router, which makes the path through the attacker
more attractive (thus also attracts trafﬁc to the attacker).
To prevent unauthorized ASPATH modiﬁcations, S-BGP
utilizes route attestations, which are essentially delegation
messages where one AS delegates the right to announce
a preﬁx to its neighboring AS. An S-BGP update is valid
if it the ASPATH matches the address attestation and the
chain of route attestations, and if all the signatures of the
attestations are valid [21, 22]. As an alternative mecha-
nism, researchers proposed symmetric cryptographic prim-
itives to prevent unauthorized ASPATH modiﬁcations, e.g.,
SPV [20].
Securing BGP using BIND The two main mechanisms
we need to secure BGP is to verify the correctness of the
origin of the preﬁx (to prevent preﬁx theft), and to prevent
a malicious AS from altering the ASPATH in any other way
than appending its own ASN to the path.4
Applying our conceptual model to the BGP case, we can
categorize the preﬁx as primitive data. Therefore the in-
tegrity of a preﬁx has to be ensured external to our attesta-
4In SPV, to achieve the delegation property, they slightly modify the
protocol such that each router signs in the ASN of the next hop. We adopt
this approach here for the same purpose.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
11
tion service. We may adopt the known certiﬁcate approach,
where a preﬁx owner obtains a preﬁx certiﬁcate from a
trusted authority.
Now we direct our attention toward the attestation of the
derived ASPATHs. For this purpose we shall apply BIND.
We assume the presence of a trusted attestation service on
every router. Here the process to be attested is the ASPATH
generation code, and the untrusted intermediaries include
the router’s operating system, the network and the router’s
local storage.
B
a
route
First,
Router
receives
Figure 5 shows what happens in Router B when it re-
ceives a BGP update from Router A, performs transforma-
tions on the ASPATH attribute, and forwards the resulting
update to Router C. Here we assume symmetric key cryp-
tography is used.
update
{ASPATH, A, B, H(PA)}, M ACKAB (ASPATH, A, B, H(PA))
from Router A, here H(PA) denotes the hash of ASPATH
generation process on Router A. The ASPATH along
with the hash value is cryptographically protected by a
message authentication code using key KAB, the secret key
shared between the trusted attestation services on Router
A and B. Now Router B’s ASPATH generation process
issues a ATTESTATION INIT request; the request includes
the memory addresses as to where the incoming update
is stored.
In reply to the request, the trusted entity on
Router B ﬁrst veriﬁes the MAC on the incoming routing
update. Then it hashes the process code along with the
memory addresses of the input data. Finally it sets up a
secure execution environment and resumes the execution
of the ASPATH generation process. Now the Router B’s
ASPATH generation process appends the ASN5 of the next
hop router to the ASPATH.6 This explicitly delegates the
right to propagate the ASPATH to Router C. At the end of
the process is a ATTESTATION COMPLETE request whose
parameters include the memory addresses of the resulting
ASPATH, and the next-hop router where this update is
intended. The trusted attestation service then computes a
message authentication tag over the output data and the
hash, i.e., M ACKBC (ASPATH, A, B, C, H(PB)). Finally
after clearing the protection mechanisms, it resumes the
execution of the process where it has left off.
When compared with existing approaches, here are the
desirable properties BIND has to offer:
• Simple design To ensure that a router performs cor-
rect operations on an ASPATH, S-BGP and SPV both
require complex cryptographic constructions to use as
authenticators of data. In particular, SPV uses a com-
plicated hash tree to compute a one-time signature for
each sufﬁx of an ASPATH. The cryptographic con-
struction is problem speciﬁc, i.e., one needs to come
up with different cryptographic constructions for dif-
ferent protocols; and proving the security of different
5The real-world BGP protocol performs ASN prepending, but for sim-
plicity of explanation, we assume ASNs are appended to the ASPATH.
6The ASN of the next-hop router is a primitive data input to the AS-
PATH generation process. Its integrity has to be enforced using a mecha-
nism external to BIND.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
12
cryptographic constructions requires a lot of expertise.
By contrast, through the use of BIND, we do not have
to reply on these complicated cryptographic construc-
tions, and the task of securing BGP is much simpler.
• Efﬁcient Previous approaches [20, 21, 22] of route at-
testation incur an O(n) signature overhead where n is
the ASPATH length. We note that this problem is ide-
ally suited for our transitive trust approach. By ap-
plying the transitive trust approach to securing BGP,
we can reduce the O(n) signature overhead to O(1).