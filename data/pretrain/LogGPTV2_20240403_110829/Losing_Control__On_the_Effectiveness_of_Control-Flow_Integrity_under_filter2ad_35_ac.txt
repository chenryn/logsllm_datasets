### Hiding Information and Bypassing Control Flow Integrity (CFI) Checks

#### 1. Hiding Information
To hide information, such as a shadow stack address, it is essential to ensure that no object contains a pointer to the hidden information. If any object does contain such a pointer, the information can be disclosed by creating the object and accessing its memory.

In our attack, we allocate an object that contains a vTable pointer, specifically the `XMLHttpRequest` object. By overwriting the vTable pointer of this object with a pointer to a fake vTable, we can hijack the control flow (see Section 5.1.2).

#### 2. Disclosing the Stack Address
To disclose and corrupt values on the stack to bypass CFI checks, we must first locate the stack in memory. Unlike the heap, objects on the stack are only live until the function that created them returns, making it challenging to find a pointer to a valid stack address within the heap area.

However, we observed that Chromium’s JavaScript engine, V8, saves a stack pointer to its main structure when a JavaScript runtime library function is called. The `ArrayBuffer.read()` function, which we use for information disclosure, is part of the runtime library. This allows us to reliably read a pointer that points to a predictable location on the stack.

The remaining challenge is to find a reference to a V8 object, as V8 objects are placed on a different heap than Chromium’s objects. We need to find a reference from an object whose address we already disclosed to the V8 object that stores the stack address. We chose `XMLHttpRequest` because it contains a pointer to a chain of other objects, which eventually contain a pointer to the V8 object. Once we disclose the address of this object, we can disclose the saved stack pointer.

At this point, we have arbitrary read and write access to the memory and have disclosed all necessary addresses. We now focus on implementing the attacks described in Section 4.

### 5.2.1 Bypassing IFCC
IFCC implements fine-grained forward-edge CFI and is vulnerable to attacks that overwrite registers spilled on the stack. For brevity, we omit the bypass of VTV, but conceptually, there is no difference between the IFCC bypass and the one for VTV.

Tice et al. [50] assume that the stack is protected by StackGuard [13], which implements a canary for the stack to prevent stack attacks. In practice, this does not prevent the adversary from overwriting the return address. Since IFCC focuses on protecting CFG forward edges, we assume an ideal shadow stack is in place that cannot be bypassed, though this might be hard to implement in practice.

IFCC protects indirect function calls by creating, at compile time, a list of functions that can be reached through indirect calls. It then creates a trampoline, i.e., a simple jump instruction to the function, for every function in this list. The array of all trampolines is called the jump table. Finally, every indirect call is instrumented so it can only target a valid entry in the jump table.

Listing 1 shows the disassembly of an instrumented call. In Lines 8 and 9, the target address of the indirect call and the address of the jump table are loaded into registers. Subtracting the base address of the target pointer and then using a logical AND is an efficient way to ensure that an offset within the jump table is used. Finally, this offset is added again to the base address of the jump table, ensuring that every indirect call uses the jump table unless the adversary can manipulate the `ebx` register. As explained in Section 4.1, `ebx` is a callee-saved register and is spilled on the stack during function calls.

For our exploit, we target a protected, virtual function call `Ftarget` that is invoked (Line 16) after another function `Fspill` is called (Line 6). During the execution of `Fspill`, the `ebx` register is spilled on the stack (Line 19). We overwrite the target address of `Ftarget` through vTable injection (see Section 5.1.2) and the saved `ebx` register. We overwrite the saved `ebx` register such that Line 9 will load the address of our gadget. After `Fspill` finishes execution, the overwritten register is restored and used to verify the subsequent call in `Ftarget`. The check will pass, and Line 16 will call our first gadget. After the initial bypass of CFI, we use unintended instructions to avoid further CFI checks.

Although 64-bit x86 offers more general-purpose registers, our analysis of a 64-bit, IFCC-protected Chromium version exposed that around 120,000 out of 460,000 indirect calls (around 26%) are vulnerable to our attacks. We did not manually verify if all of these CFI checks are vulnerable. However, for a successful attack, it is sufficient that only one of these CFI checks is vulnerable. We exploited one vulnerable CFI check to implement a similar attack and bypass IFCC for the 64-bit version of Chromium.

### 5.2.2 Bypassing Fine-Grained CFI
Overwriting a user-mode return address used by a system call seems straightforward, but we encountered some challenges during implementation. The first challenge is correctly timing the system call and the overwrite of the return address. We found the most reliable way is to spawn two threads: one thread constantly makes the system call, and the other constantly overwrites the return address. The attack succeeded in 100% of our tests without any noticeable time delay.

We can utilize the Web Worker HTML5 API [54] to create a dedicated victim thread. During our analysis to find a suitable function that eventually invokes a system call, we noticed that an idle thread is constantly calling the `ZwWaitForSingleObject` system call, shown in Listing 2. Line 4 shows the call that pushes the return address on the stack, which is later used by the kernel to return to user mode.

Another challenge is that the constant invocation of the system call might corrupt any ROP gadget chain we write on the stack. Hence, we overwrite the user-mode return address with the address of a gadget that sets the stack pointer to a stack address that is not constantly overwritten. From there, we use gadgets composed of unintended instructions [44] to bypass the instrumented calls and returns.

This exploitation technique can bypass any fine-grained CFI solution that aims to protect 32-bit applications on Windows.

### 6. Mitigations
We consider possible mitigation techniques against our attacks. First, we describe our compiler patch for the IFCC/VTV implementation vulnerability and measure its performance impact on the SPEC CPU2006 benchmarks. Subsequently, we discuss the broader problem of protecting the stack against memory disclosure and corruption attacks.

#### 6.1 Patching IFCC
Recall that IFCC uses the base register containing the address of the GOT to reference the jump table validating the target of an indirect call (see Section 4.1). To prevent our attack presented in Section 5.2.1, we developed a compiler patch that safely reloads the GOT register before loading the CFI jump table. Our patch adds new instrumentation before the CFI check so this register is always re-calculated instead of being restored from the stack. With our proposed fix, IFCC uses three more instructions to validate each target, bringing the total number of added instructions up to 15 per indirect call. Listing 3 shows an example of the IFCC instrumentation without our patch, and Listing 4 shows the reload we add on lines 12-17.

We measured the performance impact of this change using the SPEC CPU 2006 benchmark suite on a dual-channel Intel Xeon E5-2660 server running Ubuntu 14.04 with Linux kernel 3.13.0. We selected only the benchmarks that have indirect calls since IFCC will not affect code that only uses direct calls. The benchmark results we report are medians over three runs using the reference inputs.

We report overheads relative to a baseline without IFCC enabled. Since IFCC uses link-time optimization, we also compile the baseline with link-time optimization turned on.