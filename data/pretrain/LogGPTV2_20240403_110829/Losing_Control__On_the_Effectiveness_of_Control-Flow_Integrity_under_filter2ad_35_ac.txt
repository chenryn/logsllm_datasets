hide information (e.g., a shadow stack address) because as
long as any object contains a pointer to the hidden informa-
tion, we can disclose the information by creating the object
and disclosing its memory.
Finally, in our attack, we choose to allocate an object
that contains a vTable pointer, i.e.
the XMLHttpRequest
object. By overwriting the vTable pointer of this object
with a pointer to a fake vTable, we can hijack the control
ﬂow (see Section 5.1.2).
Disclosing the Stack Address.
To disclose and corrupt values on the stack to bypass CFI
checks, we must ﬁrst locate the stack in memory. In con-
trast to the heap, objects on the stack are only live until the
function that created them returns. Hence, it is challenging
to ﬁnd a pointer to a valid stack address within the heap
area. However, we noticed that Chromium’s JavaScript en-
gine V8 saves a stack pointer to its main structure when a
JavaScript runtime library function is called. Since the Ar-
rayBuffer.read() function, which we use for information
disclosure, is part of the runtime library, we can reliably
read a pointer that points to a predictable location on the
stack. The remaining challenge is to ﬁnd a reference to a V8
object, because V8 objects are placed on a diﬀerent heap
than Chromium’s objects. Hence, we need to ﬁnd a ref-
erence from an object whose address we already disclosed
to the V8 object that stores the stack address. We chose
XMLHttpRequest, because it contains a pointer to a chain of
other objects which eventually contain a pointer to the V8
object. Once we disclose the address of this object, we can
disclose the saved stack pointer.
At this point we have arbitrary read and write access
to the memory and have disclosed all necessary addresses.
Hence, we now focus on implementing the attacks described
in Section 4.
5.2.1 Bypassing IFCC
IFCC implements ﬁne-grained forward-edge CFI and is
vulnerable to attacks that overwrite registers which are
spilled on the stack. For brevity, we omit the bypass of
VTV. However, from a conceptual point of view there is no
diﬀerence between the IFCC bypass and the one for VTV.
Tice et al. [50] assume that the stack is protected by Stack-
Guard [13] which implements a canary for the stack to pre-
vent any stack attacks. In practice, this does not prevent
the adversary from overwriting the return address. Since
IFCC focuses on the protection of CFG forward edges, we
assume an ideal shadow stack to be in place that cannot
be bypassed, though this might be hard to implement in
practice.
IFCC protects indirect function calls by creating, at com-
pile time, a list of functions that can be reached through
indirect calls.
It then creates a trampoline, i.e., a simple
jump instruction to the function, for every function in this
list. The array of all trampolines is called jump table. Fi-
nally, every indirect call is instrumented so it can only target
a valid entry in the jump table.
Listing 1 contains the disassembly of an instrumented call.
In the Line 8 and 9, the target address of the indirect call
and the address of the jump table are loaded into registers.
Subtracting the base address of the target pointer and then
using a logical and is an eﬃcient way of ensuring that an
957;
l o a d a b s . a d d r e s s o f F1
c a l l K i F a s t S y s t e m C a l l
;
;
[ eax+4]
[ ebx−149C8h ]
l o a d a d d r e s s F t a r g e t
l o a d jump−t a b l e
edi ,
eax ,
ecx , edi
ecx , eax ; g e t o f f s e t
ecx , 1FFFF8h ;
ecx , eax ; add b a s e addr jump t a b l e
ecx , edi
c f i
edi
; compare t a r g e t a d d r e s s
; e x e c u t e i n d i r e c t
e n f o r c e bounds
i n jump t a b l e
f a i l u r e
c a l l
; o v e r w r i t e o f ebx happends h e r e
F0 next
F s p i l l
ebx
c a l l
[ . . . ]
c a l l
[ . . . ]
1 F0 :
2
3 F 0 next :
4 pop
5
6
7
8 mov
9 mov
10 mov
sub
11
and
12
add
13
cmp
14
15
jnz
16
c a l l
17
18
19 push ebx
20
21 pop
ret
22
F s p i l l :
[ . . . ]
ebx
Listing 1: Disassembly of an indirect call that is
instrumented by IFCC.
oﬀset within the jump table is used. Finally, this oﬀset is
added again to the base address of the jump table. This en-
sures that every indirect call uses the jump table, unless the
adversary can manipulate the ebx register. As we explained
in Section 4.1 ebx is a callee-saved register and therefore
spilled on the stack during function calls.
For our exploit we target a protected, virtual function
call Ftarget that is invoked (Line 16) after another function
Fspill is called (Line 6), see Listing 1. During the execution
of Fspill the ebx register is spilled on the stack (Line 19):
we overwrite the target address of Ftarget through vTable
injection (see Section 5.1.2) and the saved ebx register. We
overwrite the saved ebx register such that Line 9 will load
the address of our gadget. After Fspill ﬁnishes execution,
the overwritten register is restored and used to verify the
subsequent call in Ftarget. The check will pass and Line 16
will call our ﬁrst gadget. After the initial bypass of CFI, we
use unintended instructions to avoid further CFI checks.
Although 64-bit x86 oﬀers more general purpose registers,
our analysis of a 64-bit, IFCC-protected Chromium version
exposed that around 120, 000 out of 460, 000 indirect calls
CFI checks (around 26%) are vulnerable to our attacks. We
did not manually verify if all of these CFI checks are vul-
nerable. However, for a successful attack it is suﬃcient that
only one of these CFI checks is vulnerable to our attack. We
exploited one vulnerable CFI check to implement a similar
attack and bypass IFCC for the 64-bit version of Chromium.
5.2.2 Bypassing ﬁne-grained CFI
It seems that overwriting a user-mode return address used
by a system call is straightforward. However, we encoun-
tered some challenges during the implementation. The ﬁrst
challenge is being able to correctly time the system call and
the overwrite of the return address. We found the most re-
liable way is to spawn two threads: one thread constantly
makes the system call and the other constantly overwrites
the return address. The attack succeeded in 100% of our
tests without any noticeable time delay.
We can utilize the Web Worker HTML5 API [54] to cre-
; System c a l l number
[ edx ]
c a l l
ret Ch
n t d l l ! ZwWaitForSingleObject :
1
2 mov eax , 1 8 7 h
3 mov edx , o f f s e t Sys te mC al lS tu b
4
5
6
7
8
9
n t d l l ! K i F a s t S y s t e m C a l l :
[ . . . ]
;
10 mov edx , esp
11
s y s e n t e r
Listing 2: ZwWaitForSingleObject System Call on
Windows 7 32-bit.
ate a dedicated victim thread. During our analysis to ﬁnd
a suitable function that eventually invokes a system call, we
noticed that an idle thread is constantly calling the ZwWait-
ForSingleObject system call which is shown in Listing 2.
Line 4 shows the call that pushes the return address on the
stack that is later used by the kernel to return to user mode.
Another challenge is that the constant invocation of the
system call might corrupt any ROP gadget chain we write on
the stack. Hence, we overwrite the user-mode return address
with the address of a gadget which sets the stack pointer to a
stack address that is not constantly overwritten. From there
on we use gadgets that are composed of unintended instruc-
tions [44] to bypass the instrumented calls and returns.
This exploitation technique can bypass any ﬁne-grained
CFI solution that aims to protect 32-bit applications on
Windows.
6. MITIGATIONS
We consider possible mitigation techniques against our at-
tacks. First, we describe our compiler patch for the IFCC/-
VTV implementation vulnerability and measure its perfor-
mance impact on the SPEC CPU2006 benchmarks. Subse-
quently, we discuss the broader problem of protecting the
stack against memory disclosure and corruption attacks.
6.1 Patching IFCC
Recall that IFCC uses the base register containing the
address of the GOT to reference the jump table validating
the target of an indirect call (see Section 4.1). To prevent our
attack presented in Section 5.2.1, we developed a compiler
patch that safely reloads the GOT register before loading
the CFI jump table. Our patch adds new instrumentation
before the CFI check so this register is always re-calculated
instead of being restored from the stack. With our proposed
ﬁx, IFCC uses three more instructions to validate each target
which brings the total number of added instructions up to
15 per indirect call. Listing 3 shows an example of the IFCC
instrumentation without our patch, and Listing 4 shows the
reload we add on lines 12-17.
We measured the performance impact of this change using
the SPEC CPU 2006 benchmark suite on a dual channel
Intel Xeon E5-2660 server running Ubuntu 14.04 with Linux
kernel 3.13.0. We selected only the benchmarks that have
indirect calls since IFCC will not aﬀect code that only uses
direct calls. The benchmark results we report are medians
over three runs using the reference inputs.
We report overheads relative to a baseline without IFCC
enabled. Since IFCC uses link-time optimization, we also
compile the baseline with link-time optimization turned on.
9581
2
3
4
5
6
7
8
9
10
11
12
13
14
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
s t o r e c u r r e n t e i p i n ebx
;
c a l l
. n e x t
. n e x t :
pop ebx
add ebx , GLOBAL OFFSET TABLE
. . .
;
c a l l
f u n c t i o n which s t o r e s ebx t o t h e
s t a c k
. . .
; Load d e s t i n a t i o n f u n c t i o n a d d r e s s
l e a ecx , v t a b l e+i n d e x
; Load jump t a b l e e n t r y r e l a t i v e t o ebx
mov eax ,
c a l l ecx
[ ebx + jump table @GOT ]
Listing 3: Example IFCC assembly before ﬁx
s t o r e c u r r e n t e i p i n ebx
;
c a l l
. n e x t
. n e x t :
pop ebx
add ebx , GLOBAL OFFSET TABLE
. . .
;
c a l l
f u n c t i o n which s t o r e s ebx t o t h e
s t a c k