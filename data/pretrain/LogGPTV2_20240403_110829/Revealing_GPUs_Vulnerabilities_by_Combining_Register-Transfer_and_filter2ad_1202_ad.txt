centage, the fault has modiﬁed the instruction(s) output. The
syndromes, the number of corrupted threads, and the spatial
distribution of wrong elements (for tiled-MxM), populate a
database used for the software fault injection [23].
listing all
To inject the RTL fault syndromes in software we update
the already developed NVBitFI framework [3] (details in
Section IV-B). NVBitFI proﬁles the compiled code to be
evaluated,
the executed SASS instructions. The
fault (or error as it has reached a visible state, according
to Avizienis deﬁnition [37]) is injected at the output of a
randomly selected instruction while the code is being executed
on the real GPU. The updated version of NVBitFI extracts,
from the RTL fault injection database, the most suitable fault
syndrome to apply, considering the opcode and input range.
Once the instruction output is corrupted, the code execution
Module
FP32
INT
SFU
SFU controller
Scheduler controller
Pipeline Registers
RTL Size (Flip-Flops)
4,451
1,542
3,231
190
3,358
10,949
Type
Execution/Data
Execution/Data
Execution/Data
Control
Control
Control/Data
Instructions
FADD, FMUL, FFMA
IADD, IMUL, IMAD
FSIN, FEXP
FSIN, FEXP
ALL
ALL
continues and the effect on the output is characterized as
SDC, DUE, or Masked. With NVBitFI, then, we measure the
probability for the faults that reached a software visible state to
propagate further, till the application output (i.e., the Program
Vulnerability Factor, PVF [38]).
The beneﬁt of our strategy relies on the fact that the detailed
and time consuming RTL evaluation on the SASS instructions
is done only ones, to populate the syndromes database. The
software fault injection maintains its efﬁciency (thus allowing
the evaluation of complex applications) but provides both extra
accuracy, by using the RTL syndromes, and impact, as we can
correlate the observed SDCs with their hardware source.
IV. EVALUATION METHODOLOGIES
In this section we detail
the two-levels fault
frameworks and how they are combined.
A. RTL Fault Injection Framework
injection
We use FlexGripPlus [19] GPU model to perform the RTL
fault injection. FlexGripPlus is an open-source VHDL-based
GPU model, which implements the Nvidia G80 architec-
ture [39], with details on the most representative modules,
and compatible with the commercial CUDA programming
environment. This model can use three different conﬁgurations
(8, 16, or 32) per Streaming Multiprocessor, selected before
simulation or synthesis.
A custom RT-level framework [40] performs the fault injec-
tion through a general controller that manages the ModelSim
environment, which hosts FlexGripPlus. The controller injects
one fault (as a single transient) in the targeted GPU module,
according to a faults list. For the analysis presented in this
paper, we inject errors in the warps scheduler, the pipeline
registers, the Integer Functional Units (INT FUs), the Single
Precision Floating Point FUs (FP32 FUs), the Special FUs
(SFUs) used for transcendental functions, and the control logic
(see Figure 2), but we expressly do not consider faults in the
main memory structures (caches, register ﬁle, shared memory).
Table I lists the characterized modules, their size, and the
instructions that use each module. Overall, our characterization
covers ≈84% of the resources (ﬂip ﬂops) involved in the com-
putation of the characterized instructions, excluding memories
(≈23% if considering ECC-protected memories).
Once the fault is propagated to any of the available outputs
(instruction output register, memories, or control signals), its
effect is classiﬁed, by comparing the output values and signals
with the golden ones obtained in a fault-free simulation, as
SDC (output values mismatch), DUE (hang), or Masked (no
effect).
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 08:56:48 UTC from IEEE Xplore.  Restrictions apply. 
296
We host the RTL model and fault injection framework on a
server built with 12 Intel Xeon CPUs running at 2.5 GHz and
256 GB of RAM. The duration of the fault campaign depends
directly on the program’s length and the number of locations
to inject, which is proportional to the target module’s size.
For instance, one micro-benchmark requires 8 and 5 hours,
in our server, to perform the fault injections on the scheduler
controller and the Floating-Point Unit, respectively.
We generate a general report per fault campaign, which
includes the effect (SDC, DUE, Masked) of each injected fault
based on (1) the characterized instruction, (2) the input value
range (we test three input ranges per instruction, details in
Section V-C), and (3) the target module (where the fault is
injected). We also classify the fault effect as individual (one
single thread affected) or multiple (more threads affected).
The general report allows to measure the AVF for each
module and instruction as the ration between observed errors
(SDCs/DUEs) and injected faults.
To characterize the syndrome at the output, we generate,
for each observed SDC, a detailed report that contains the
location of the injected fault, the golden value, the faulty value,
the number of affected bits, the number of affected threads, the
eventual spatial distribution of erroneous values in the warp
output, and the memory address.
B. Software Fault Injection Framework
To inject, in software, the fault syndrome obtained with
the RTL evaluation, we have updated the already available
NVBitFI framework [3]. NVBitFI is the most suitable fault
injector for this work since it allows to instruct the kernels at
SASS level (the machine code executed in the GPU hardware).
Other fault injectors such as GPUQin, CAROL-FI, Kayotee,
GPGPU-SIM, SASSIFI [4], [7], [41], [42] do not inject at
SASS level (but SASSIFI), do not offer support for Volta and
newer architectures, or do not inject in CUDA libraries.
NVBitFI can inject transient errors in the GPU’s ISA visible
states, modifying the SASS instructions output of a code
being exectuted on a real GPU. NVBitFI allows the user to
select the fault model to inject (single, double bit-ﬂip). We
modify the injection procedure to inject the syndrome obtained
with the RTL evaluation (see Figure 2). When NVBitFI picks
an instruction to be corrupted, our framework identiﬁes its
opcode. From the RTL fault database, we select the most
suitable syndrome to apply based on the source of the fault,
the opcode, and the input range (according to a statistical
distribution, as discussed in Section V-C). The syndrome,
as mentioned, is described as a relative error. The updated
then, modiﬁes the instruction output value of a
NVBitFI,
relative amount (e.g.,
if the syndrome is 100%, NVBitFI
multiplies by two the instruction output value).
Additionally, we have included a dedicated procedure to
corrupt
the output of tiled-MxM inside CNNs. The fault
injector picks a random tile during the execution of a random
CNN layer and modiﬁes its output elements according to the
syndrome (relative error and spatial distribution) deﬁned with
the RTL fault injection (details in Section V-D).
V. RTL RELIABILITY EVALUATION
In this Section we detail the results of the RTL character-
ization of faults effect in the considered GPU modules. We
ﬁrst describe the tested micro-benchmarks and mini-app, then
we present the AVF and the fault syndrome description.
A. Micro-benchmarks and mini-app description
We design several micro-benchmarks to characterize the ef-
fects of RTL faults in integer, ﬂoating point, special functions,
memory movements, and control-ﬂow instructions. To observe
the possible propagation of the single injected fault to individ-
ual or groups of threads, each micro-benchmark instantiates
64 threads (2 warps) executing the same instruction. We also
test a mini-app (i.e., tile-based matrix multiplication) to better
observer scheduler faults impact. It is worth noting that we
inject only one fault in one targeted injection site per micro-
benchmark execution. Possible multiple threads corruptions
are caused by that single fault propagation and not by multiple
fault injections.
With the goal of characterizing the syndrome at the out-
put of arithmetic instructions we have designed 8 speciﬁc
CUDA micro-benchmarks to run on FlexGripPlus, one for
each targeted ﬂoating point (FMUL, FADD, and FFMA),
integer (IADD, IMUL, and IMAD), and special (FSIN, FEXP)
instructions. Each of the 64 threads executes the same instruc-
tion without interactions between threads. We test the ﬂoating
point and integer opcodes with three different pre-deﬁned
input ranges: Small (S, both inputs in the range 6.8x10−6
to 7.3x10−6), Medium (M, in the range 1.8 to 59.4), and
Large (L, in the range 3.8x109 to 12.5x109). In the software
fault injection any instruction with an input smaller than S
(bigger than L) receives the S (L) syndrome, values in between
receive the M syndrome. The range selection is heuristic, based
on observed common values for SASS instructions inputs on
the considered HPC and CNNs applications. We also test a
combinations of input ranges (ﬁrst input S, second input L),
obtaining very similar results than S and M ranges (not shown
in the paper). For the special functions (FSIN, FEXP), we
select three inputs according to the operational constraints in
the SFU (in the range 0 to π/2), avoiding range reduction
procedures. To avoid the bias of our results we perform a fault
injection campaign on 4 different randomly selected values for
each input range.
We also consider memory movements (GLD and GST)
and control-ﬂow instructions (BRA, ISET). The load and
store micro-benchmark performs a load operation followed by
a store operation. For the control-ﬂow operation, we allocate
a limited number of set-register instructions before the branch
operation. A fault
is detected when a set register is not
correctly assigned or when the branch condition fails. We
anticipate that, not surprisingly, in most cases faults in control-
ﬂow instructions collapse the execution leading to a DUE.
Scheduler corruptions (and multiple threads corruptions in
general) may have speciﬁc effects on the execution of codes in
which threads interact with each other that may not be detected
with the micro-benchmarks we have designed. As a speciﬁc
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 08:56:48 UTC from IEEE Xplore.  Restrictions apply. 
297
(cid:6)(cid:13)(cid:15)(cid:11)(cid:14)(cid:10)(cid:1)(cid:19)(cid:12)(cid:17)(cid:10)(cid:8)(cid:9)(cid:1)(cid:6)(cid:3)(cid:2)
(cid:5)(cid:20)(cid:14)(cid:19)(cid:13)(cid:16)(cid:14)(cid:10)(cid:1)(cid:19)(cid:12)(cid:17)(cid:10)(cid:8)(cid:9)(cid:18)(cid:1)(cid:6)(cid:3)(cid:2)
(cid:3)(cid:7)(cid:4)
(cid:2)(cid:19)(cid:13)(cid:7)(cid:18)(cid:11)(cid:14)(cid:13)(cid:6)(cid:12)(cid:1)(cid:5)(cid:13)(cid:11)(cid:18)(cid:17)
(cid:23)(cid:20)(cid:30)
(cid:22)(cid:25)(cid:30)
(cid:22)(cid:20)(cid:30)
(cid:21)(cid:25)(cid:30)
(cid:21)(cid:20)(cid:30)
(cid:25)(cid:30)
(cid:20)(cid:30)
(cid:2)
(cid:3)
(cid:1)
(cid:22)(cid:17)(cid:25)(cid:30)
(cid:22)(cid:17)(cid:20)(cid:30)
(cid:21)(cid:17)(cid:25)(cid:30)
(cid:21)(cid:17)(cid:20)(cid:30)
(cid:20)(cid:17)(cid:25)(cid:30)
(cid:20)(cid:17)(cid:20)(cid:30)
(cid:2)
(cid:3)
(cid:1)
(cid:4)(cid:7)(cid:10)(cid:9)(cid:8)(cid:19)(cid:12)(cid:9)(cid:16)
(cid:3)(cid:11)(cid:15)(cid:9)(cid:12)(cid:11)(cid:13)(cid:9)
(cid:21)(cid:26)(cid:30)
(cid:21)(cid:24)(cid:30)
(cid:21)(cid:22)(cid:30)
(cid:21)(cid:20)(cid:30)
(cid:27)(cid:30)
(cid:26)(cid:30)
(cid:24)(cid:30)
(cid:22)(cid:30)
(cid:20)(cid:30)
(cid:2)
(cid:3)
(cid:1)
(cid:3)
(cid:3)
(cid:1)
(cid:5)
(cid:8)
(cid:15)
(cid:9)
(cid:5)
(cid:1)
(cid:9)
(cid:5)
(cid:5)
(cid:3)