User: I'm using PyGTK for a small app I've developing. The usage of URLlib2 through a proxy will freeze my GUI. Is there anyway to prevent that?
My code that actually does the work is seperate from the GUI, so I was thinking may be using subprocess to call the python file. However, how would that work if I was to convert the app to an exe file?
Thanks
Assistant: I'd consider using the multiprocess module, creating a pair of Queue objects ... one for the GUI controller or other components to send requests to the urllib2 process; the other for returning the results.
Just a pair of Queue objects would be sufficient for a simple design (just two processes).  The urllib2 process simple consumes requests from it's request queue and posts response to the results queue.  The process on the other side can operate asynchronously, posting requests and, from anywhere in the event loop (or from a separate thread), pulling responses out and posting them back to a dictionary or dispatching a callback function (probably also maintained as a dictionary).
(For example I might have the request model create a callback handling object, store it in a dictionary using the object's ID as the key, and post a tuple of of that ID and the URL to the request queue, then have the response processing pull IDs and response text of the response queue so that the event handling loop can then dispatch the response to the .callback() method of the object which was stored in the dictionary to begin with.  The responses could be URL text results but handling for Exception objects could also be implemented (perhaps dispatched to a .errback() method in our hypothetical callback object's interface).  Naturally if our main GUI is multi-threaded we have to ensure coherent access to this dictionary.  However there should be relatively low contention on that.  All access to this dictionary is non-blocking).
More complex designs are possible.  A pool of urllib2 handling processes could all share one pair of Queue objects (the beauty of these queues is that they handle all the locking and coherency details for us; multiple producers/consumers are supported).
If the GUI needed to be fanned out into multiple processes that could share the same urllib2 process or pool then it would be time to look for a message bus (spread or AMQP for example).  Share memory and the multiprocess locking primitives could also be used; but that would involve quite a bit more effort.