free—a daunting task in a setting like ours—CIDER uses several
defensive techniques to ensure its integrity and availability
even in the presence of bugs. At the core of our defense
lies the following assertion: A bug in code can only become
an exploitable vulnerability if the attacker can inﬂuence the
environment (e.g., function parameters, stack content, heap
content) in which the code executes. Regular software testing
does not guarantee the absence of vulnerabilities, but it ensures
that code will behave correctly under normal conditions.
Attackers exploit vulnerabilities creating abnormal conditions
by carefully controlling the environment (e.g., heap spraying,
calling functions with unexpected parameters, concurrency).
Isolation in time.
Isolation in time is a critical tool in
restricting an attacker’s inﬂuence on the environment in which
CIDER executes. Execution begins with a reset which creates
a clean-slate environment for CIDER to run in. No untrusted
code runs until CIDER completes execution. Before transferring
control to the ﬁrmware, CIDER write-protects its code and state,
preventing untrusted code from changing them. CIDER also
hides its secrets by zeroing out the memory used in gated
boot and applying the RWLatch. The only information that
explicitly ﬂows from the untrusted code running on the device
to CIDER gated boot are ﬁrmware updates and BootTickets,
which will be rejected by CIDER unless properly signed by
the hub.
Firewalling. Firewalling aims at reducing the code exposed
to attackers, and hence, reducing the attack surface.
All messages from the hub are signed. After reading a
BootTicket or ﬁrmware patch from the storage device (raw
block read), CIDER checks its signature and ignores the
input if the check fails. This limits the code exposed to
adversarial inputs to a block read and a signature check.
The signature check is performed by the formally veriﬁed
HACL library. In summary, the only complex code in the
boot module that is exposed to untrusted inputs is formally
veriﬁed. The remaining code, which includes thousands of lines
of potentially vulnerable off-the-shelf driver code, runs under
nearly deterministic conditions and is shielded from untrusted
inputs. A similar argument applies to the DeferralTicket
validator in the AWDT.
Our eAWDT implementation is isolated on separate hardware
that only shares two UART wires and a reset wire with the
main device. The AWDT interface is very small and simple
(i.e., AWDT_GetNonce, AWDT_PutTicket), resulting in a small
attack surface.
Finally, CIDER runs the networking stack in a very limited
way. It has no open ports or incoming connections. All
network activity originates on the device and consists of TCP
connections with the hub. Although an adversary may try to
obtrude on such a connection by injecting packets at various
protocol layers, many such attacks can be recognized and
eliminated early by ﬁltering out packets that do not meet the
constraints of connections between a CIDER device and the
hub.
Compartmentalization. The networking stack is the only
component of CIDER with a non-trivial attack surface. CIDER
isolates it such that even a potential exploit against
the
(cid:18)(cid:21)(cid:19)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:35 UTC from IEEE Xplore.  Restrictions apply. 
networking stack will not compromise the device.
More precisely, the boot module treats the recovery module
which contains the networking stack exactly like the ﬁrmware.
Before invoking the recovery module, the boot module activates
all protections (i.e., RWLatch, WRLatch, AWDT). The recovery
module returns to the boot module by writing the hub’s
response to unprotected storage and invoking a reset. Thus, a
compromised recovery module will not give an attacker any
capabilities that he or she could not get from compromising
the ﬁrmware.
An exploitable vulnerability in the networking stack would
allow an adversary to take control of the device temporarily
until the next AWDT-triggered reset. For invocations of the
recovery module, CIDER sets the AWDT period based on the
expected time needed to complete the network transaction,
which can be much shorter than the period for the ﬁrmware
(e.g., seconds to minutes vs. hours to days).
After the reset, the boot module and the unaltered recovery
module will run again. The adversary may be able to re-infect
the still-vulnerable networking stack until the vulnerability is
patched. A possible mitigation involves having the Internet
Service Provider (ISP) set router or ﬁrewall rules to block attack
packets and allow CIDER to install the patched networking
code.
This scenario (i.e., a vulnerability in a critical CIDER
component that is exploitable in spite of several defense layers)
should be extremely rare. It will interrupt device availability
temporarily (i.e., until
the ISP has blocked the attacker).
However, even this worst-case scenario has a clear recovery
path that does not require each device to be restored manually.
VIII. EVALUATION
In this section, we evaluate the practicality and performance
of CIDER. In particular, we answer the following questions:
• Does CIDER interfere with existing IoT software given its
extra resource consumption and periodic ticket fetching?
• How much delay does CIDER introduce to the device
boot-up process in various scenarios?
• What is the runtime overhead due to the eAWDT on
various devices?
A. Software Compatibility
The variety of use cases for IoT devices and the diversity
of IoT ﬁrmware make it inherently challenging to argue that
a technology such as CIDER is compatible with all possible
IoT ﬁrmware. However, we can gain conﬁdence empirically
that CIDER is compatible with commonly used ﬁrmware that
typically runs on the tested IoT boards.
To do this, we installed both CIDER and standard ﬁrmware
containing an operating system (for the HBE and CM3) or
a bare-metal app (for the NL476RG). We ran the battery of
tests summarized in Table II on each of the boards without
observing any abnormal behavior or other interference from
CIDER.
In particular, we tested each device with two different types
of ﬁrmware, and for each ﬁrmware, we tested two scenarios:
1) an extremely frequent ticket fetching policy (i.e., every 15
seconds) to stress the system over a short time period; and
2) a more realistic ticket fetching policy (i.e., every 4 hours)
for a long-running system (i.e., 1 day). We did not observe
abnormal behavior during any of the experiments. All the
operations worked as expected.
B. Performance
We measured the device boot-time delay and runtime
overhead introduced by CIDER. In the following experiments,
the devices have to interact with the hub. Instead of running
our own server to host the hub, we deployed our hub prototype
in the cloud on Azure Functions (a serverless compute
service) [44], simulating the actual management model of
cloud-managed IoT devices. We used the gigabit Ethernet NIC
on the HBE and Ethernet over USB for the CM3 to connect
these boards to the internet. We connected the NL476RG to
the internet through Wi-Fi using the ESP8266 module.
Boot-time delay. CIDER runs immediately after a device reset
and thus, may affect the boot time of the device depending
on whether a BootTicket is available or whether a ﬁrmware
update is required. We measured how long CIDER takes to
perform a gated boot before jumping to the ﬁrmware. On the
HBE and the CM3, we used the ARM processor’s Cycle Count
Register for accurate measurement. We divided the CPU cycle
count by the clock rate to obtain the elapsed time. Since the
NL476RG’s Cortex-M4 does not have a Cycle Count Register,
we used a second NL476RG board to measure the boot time.
We connected one GPIO pin of the measurement board to the
reset pin (NRST) of the target board. We connected a second
GPIO pin on the measurement board to a GPIO pin on the
target board. To measure the boot time, the measurement board
resets the target board and waits for code that we inserted into
the beginning of the application to signal the second GPIO
pin. We measured the time between these two events.
Table III shows the results for all three platforms. The w/o
CIDER baseline conﬁguration is the unchanged original device
conﬁguration. The remaining three measurements correspond
to different gated boot scenarios. First, in the w/ BootTicket
case, the device already has a BootTicket and can boot the
ﬁrmware without having to access the network. The overhead
arises primarily from from the crypto operations performed
during DICE initialization and is most pronounced on the
relatively slow NL476RG. This should be the standard case
for devices that run cooperating ﬁrmware.
In the next case (w/o BootTicket), the device has no valid
BootTicket because the ﬁrmware did not fetch it before the
last reset. Thus, the CIDER recovery module has to obtain a
BootTicket from the hub and reset the device. This is followed
by execution of the w/ BootTicket case. The additional
network-based attestation and reset increase the boot time.
In the last case (i.e., w/ patch), the hub has demanded a
ﬁrmware update and it did not issue a BootTicket before the
last reset. As a result, CIDER has to fetch a ﬁrmware patch
from the hub via the recovery module, go through a reset to
apply the patch, and then follow the steps of the previous case.
(cid:18)(cid:21)(cid:19)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:35 UTC from IEEE Xplore.  Restrictions apply. 
Device
HBE
CM3
NL476RG
Firmware
Windows
IoT Core [54]
Debian [55]
Raspbian [57]
Buildroot [58]
FFT [60]
TLC [61]
Ticket fetch Operations
15 seconds
4 hours
15 seconds
4 hours
15 seconds
4 hours
15 seconds
4 hours
15 seconds
4 hours
15 seconds
4 hours
Boot; Login; Install the InternetRadio app; Launch the app; Wait for 2 minutes; Terminate; Logout; Shutdown (cid:2)
(cid:2)
Boot; Login; Leave the OS running for 24 hours; Logout; Shutdown
(cid:2)
Boot; Login; apt-get install radiotray; Launch the app; Wait for 2 minutes; Terminate; Logout; Shutdown
(cid:2)
Boot; Login; Leave the OS running for 24 hours; Logout; Shutdown
(cid:2)
Boot; Login; wget ; Wait for 2 minutes; Terminate; Logout; Shutdown
(cid:2)
Boot; Login; Leave the OS running for 24 hours; Logout; Shutdown
(cid:2)
Boot; Login; mkﬁle -n 2g TestFile; Wait for 2 minutes; Terminate; Logout; Shutdown
(cid:2)
Boot; Login; Leave the OS running for 24 hours; Logout; Shutdown
(cid:2)
Reset; Leave the sound sampling and Fast Fourier Transform (FFT) analysis program running
(cid:2)
Reset; Leave the sound sampling and Fast Fourier Transform (FFT) analysis program running
(cid:2)
Reset; Leave the trafﬁc light controller (TLC) running
(cid:2)
Reset; Leave the trafﬁc light controller (TLC) running
Normal?
TABLE II: Tests performed to verify that the deployment of CIDER does not interfere with various ﬁrmwares and bare-metal applications.
Boot Conﬁg
w/o CIDER
w/ BootTicket
w/o BootTicket
w/ patch
HBE
0.98
1.25 (+0.27)
6.42 (+5.44)
15.60 (+14.60)
CM3
1.25
1.73 (+0.48)
8.61 (+7.35)
20.80 (+19.50)
NL476RG
0.01
4.35 (+4.34)
17.50 (+17.50)
30.20 (+30.20)
TABLE III: The boot-up time and (+delay) in seconds of the three
IoT platforms with CIDER according to whether a BootTicket exists
and whether a ﬁrmware patch has been staged.
Interval HBE
1 min
5 min
0.28% (0.54%)
0.15% (0.33%)
CM3
0.32% (0.97%)
0.09% (0.58%)
NL476RG
0.64% (0.30%)
0.16% (0.26%)
TABLE IV: Runtime overhead of the SPEC CPU2006 and CoreMark
benchmarks evaluated on the three IoT platforms with CIDER
according to various DeferralTicket fetching intervals (geometric
mean and standard deviation).
The extra delay is primarily caused by the time needed to
download the ﬁrmware patch and install it. In the experiments,
we downloaded a small patch of size 4 kB. Larger patches
will require more time depending on the speed of the network
connection and of the storage device.
Runtime overhead. The ﬁrmware has to periodically interact
with the eAWDT and the hub to keep the eAWDT from
resetting the device. This introduces runtime overhead. We
measured the execution time of various benchmarking programs
with and without CIDER enabled. On the HBE and CM3,
we ran the SPEC CPU2006 benchmark suite [62] on Debian
and on Raspbian, respectively. We cross compiled and ran all
C and C++ SPEC applications, except for applications that
the arm-linux-gnueabihf toolchain (version 7.3.0) failed to
compile (perlbench, dealII and soplex) or that suffered from
runtime errors due to incompatibilities (gcc, zeusmp, omnetpp
and sphinx3). This left a total of 21 SPEC applications. Since
both the HBE and CM3 have multi-core processors, we pinned
the applications as well as the code responsible for the overhead,