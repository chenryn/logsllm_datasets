the mobile phone accounts for 63 kB and remains unmodiﬁed.
VII.
IMPLEMENTATION
B. Trusted Application Implementation
We implement three prototypes to evaluate the feasibility
of the proposed second-factor authentication solution and
enrollment schemes. First, we modify an open-source baseband
OS to show that the changes required to existing baseband
operating systems are small. We test our baseband modi-
ﬁcations on an older mobile phone, because the baseband
environment on modern smartphones is not modiﬁable by
third-party developers.
Second, we implement the trusted application on a Trust-
Zone development board to show that
its deployment on
TrustZone-enabled devices is straightforward, and that
the
time overhead to generate location statements is negligible
compared to network delays. We use a TrustZone development
board because installation of trusted applications on current
smartphones requires approval by the device manufacturer.
Third, we implement a client-server prototype using an
Android smartphone to evaluate the end-to-end performance of
the location veriﬁcation mechanism at the time of a payment
transaction.
A. Baseband Implementation
To accommodate the baseband-assisted enrollment scheme
of Section V-A, we augment osmocomBB [19], which is the
only available open-source baseband OS. It is implemented for
Motorola mobile phones like the C123 or C118, introduced in
2005. The GSM layer 1 (the physical layer) executes directly
on the mobile phone, while layers 2 and 3 (respectively the
data-link layer and the third layer, subdivided in the Radio
Resource management,
the Mobility Management, and the
Connection Management) run as the mobile application on
a host PC connected with the device through a USB-to-serial
cable.
We leverage the widely used SMS Protocol Data Unit
mode, standardized in [20], to format the enrollment SMS
message sent by the card issuer to the user’s phone number.
In the standard, a User Data Header structure can contain
so called Information Element Identiﬁer elements, that are
reserved for future use. We encode the enrollment key in
the Information Element Data ﬁeld of one such identiﬁer.
We add to the baseband OS the logic to identify and handle
enrollment SMS messages. Once the key is found in the SMS
message header, the baseband OS extracts it and computes an
authentication tag over the device’s IMEI. We use the HMAC-
SHA1 implementation provided by the PolarSSL [21] library
as the authentication algorithm.
We test the prototype baseband OS in a Motorola C118
connected through a USB-to-serial cable to a host PC running
Ubuntu 12.10. The original mobile application provided by
osmocomBB consists of 19,482 lines of C code; we add a
total of 523 lines of code, where polar_sha1.c accounts
for 451 lines of code. Our changes increase the code size
by 2.7%. In terms of binary size, a compiled version of the
original mobile application is 2029 kB; our modiﬁed version
accounts for 2077 kB in total (i.e., 2.3% larger). The layer1
We implement a trusted application that provides location
statements, on a TrustZone-enabled development board. We
use it
to evaluate the implementation complexity and the
time required to produce location statements. The board is
an ARM Motherboard Express uATX [22] coupled with an
ARM CoreTile Express A9 [23]. The board features a Cortex-
A9 processor which is clocked at 400 MHz. The development
board contains no GPS unit or baseband processor. In the
normal world of the system, we run Android version 4.1.1 with
Linux kernel version 2.6.38.7, properly patched to support the
ARM board as well as Android. In the secure world, we run
Open Virtualization SierraTEE [24], release “02 June 2013”.
SierraTEE is an open-source framework that provides a basic
secure world kernel, compliant with the GlobalPlatform TEE
speciﬁcations [25].
The implementation of the trusted application accounts for
less than 150 lines of code. Thus, incorporating our trusted
application into an existing trusted OS, that already provides
the necessary cryptographic functions and system calls, would
hardly change the existing memory and storage requirements.
Location Veriﬁcation
The application that generates location statements runs on
top of Open Virtualization, in the secure world, while the
companion application runs in the normal world, on top of
Android. When the card issuer initiates a location veriﬁcation
protocol with the user’s smartphone,
that device switches
from normal world to secure world and executes the trusted
application that generates the location statement.
We set up an experiment where the companion application,
running in the normal world, invokes the trusted application
and provides it with a 128-bit nonce. As the development board
has no GPS unit, we emulate it by creating a system call
in the secure kernel that just returns longitude, latitude and
accuracy values. The trusted application runs HMAC-SHA256
over the data fetched from the system call and the provided
nonce. The location statement is returned to the companion
application in the normal world. A shared memory buffer is
used for exchanging data between the two worlds.
We measure the total time required for the companion
application to receive a location statement from the trusted
application. This time includes (i) the performance delay
introduced by the context switching and required data copying
between the normal world and the secure world, and (ii)
the time it takes for the trusted application to generate a
location statement. The above experiment is repeated 1000
times. Average completion time is 3.0 milliseconds, with a
standard deviation of 0.04 milliseconds. The time spent in
context switching between the normal world and the secure
world is below one millisecond.
Enrollment
Since our board is not equipped with a baseband processor,
we do not implement the enrollment schemes of Section V-A.
Nevertheless, we now explain how they can be realized.
7
During the signed-IMSI enrollment scheme, the trusted
application must query the baseband OS for the IMSI of the
installed SIM card, and for the cellular network status. In
a mobile device, communication between the baseband OS
and the mobile OS (e.g., Android) is implemented through a
manufacturer-supplied binary (e.g., a driver). A stripped-down
version of this binary may be as well installed in the secure
world by the device manufacturer. Given that subsidy lock is
one of the most used services in TrustZone-enabled devices,
it is reasonable to assume that the secure world is able to
communicate with the SIM card in a modern smartphone [16].
For reference, the full binary in the Samsung Galaxy S3 phone
(i.e., libril.so) is 49 kB. The complete API offers roughly
200 function calls (extracted by looking at the strings of the
binary) to the baseband OS. In contrast, the stripped-down
version to support enrollment only requires the function calls
GET_SIM_STATUS and GET_IMSI.
In the baseband-assisted enrollment scheme, the trusted
application is only invoked at the end of the process to decrypt
and seal the service key sent by the card issuer. Hence, there is
no requirement for direct communication between the secure
world and the baseband OS.
C. Client-Server Implementation
To evaluate the performance of the location veriﬁcation
protocol, the client prototype provides the functionalities of
both the companion application running in normal world, and
the trusted application running in secure world. This imple-
mentation does not account for the needed context switching
between the normal world and the secure world. As mentioned
before, this time is below one millisecond, and thus negligible
compared to networking delays of a full end-to-end implemen-
tation.
We develop against the API level 16 of the Android SDK
(version 4.1, “Jelly Bean”) [26]. Cryptographic operations are
based on the Bouncy Castle crypto library [27]. We use 2048-
bit RSA keys as device keys. Authentication of location state-
ments leverages HMAC-SHA256 with an 128-bit service key.
Communication between the server and the client uses the push
notiﬁcation feature of Google Cloud Messaging (GCM) [28];
the reverse channel is a standard HTTP connection.
The client provides functionalities for the signed-IMSI
enrollment scheme (cf. Section V-A) and the location veri-
ﬁcation mechanism (cf. Section V-B). During enrollment, the
application queries the baseband OS through the Android Java
API provided by the TelephonyManager service, for the
IMSI of the SIM card and the network connection status.
During location veriﬁcation, the application reads the GPS
location (latitude and longitude, accuracy and satellite ﬁx time)
using the LocationManager system service.
The server-side processing is implemented in python, using
the CherryPy Web Framework [29] and SQLite [30]. This web
service is accessed through a RESTful web API that provides
enrollment and location veriﬁcation operations. During the
signed-IMSI enrollment scheme, the server translates a phone
number to the corresponding IMSI using an HLR-lookup query
with an external service provider. An HLR-lookup query is
carried out by network operators using the Signaling System
#7 (SS7) protocols. In particular, the Home Location Register
Static tests
WiFi
(n=101)
3G
(n=101)
average (sec)
std dev (sec)
0.60
0.08
1.82
0.05
Field study (3G)
Edge Orange Sunrise
(n=101)
(n=34)
3.68
1.45
(n=46)
2.54
0.78
2.20
0.30
TABLE I: Completion time for location veriﬁcation during
payment transactions. n denotes the number of samples in each
scenario.
(HLR) of a network operator holds information about its users
such as their phone numbers and to which network a device
is currently connected. Among other information, the HLR
holds the IMSI of the SIM card connected to the network.
Several HLR lookup services, such as [31], are available to
third-parties.
While our client prototype implementation is tailored to-
wards a device using Android OS, similar functionalities are
easily done on other smartphone platforms.
VIII. EXPERIMENTAL EVALUATION
The previous section shows that context switching be-
tween the two TrustZone execution states (i.e., normal and
secure world) and cryptographic operations to produce location
statements, require only a few milliseconds. Network delays,
therefore, account for the majority of the time required to
verify the location of the user’s device by the card issuer. In this
section we analyze the time to complete location veriﬁcation
and present the experimental evaluation of our client-server
prototype.
We focus on the location veriﬁcation protocol as the enroll-
ment procedure is a one-time operation and its performance is
less critical. The client prototype is installed on a Samsung
Galaxy S3 smartphone with the latest software updates (as of
the time of writing), after a factory reset. The server is running
on a standard laptop and shares a service key with the client.
We provide results for both static tests run with the phone
in a ﬁxed location (ofﬁce environment) and a ﬁeld study run
in a scenario close to actual deployment. Table I provides an
overview of our results which we elaborate below.
A. Static Tests
During static tests, the client device is in a ﬁxed position,
on a desk in our ofﬁce environment. We run tests for Edge
(GSM only mode), 3G (WCDMA only), and WiFi (mobile
data turned off) connections. For each connection setting, we
measure the completion time, i.e., how long it takes from
the moment the server issues a request, until the moment it
receives the location statement and veriﬁes its authenticity.
The experiment is repeated 100 times (the server issues one
request per second), and Figure 7a shows the completion time
for each location veriﬁcation. Results show longer completion
times during the ﬁrst runs, for Edge and 3G connections.
This behavior is presumably caused by the time it takes to
“activate” the radio on the phone. To validate our hypothesis,
we set the interval of two consecutive server requests to 30
seconds, allowing the radio of the phone to “deactivate” after
each request. Results are shown in Figure 7b. Conﬁrming
8
(a)
(b)
Fig. 7: Completion time for 100 location veriﬁcations. In Figure (a) the server initiates one request per second. In Figure (b) the
server waits 30 seconds before issuing each request.
GPS accuracy (m) GPS ﬁx delay (ms)
average max min average max
min
256.83 3430.00 0.00
17.40
48.0 4.0
TABLE II: Location accuracy results during the ﬁeld study.
ment terminal in, for example, shops, cafes, museums, parking
lots, etc. Completion time, for the device with the Orange
SIM card, is 2.54 seconds on average (standard deviation 0.78
seconds). The smartphone with the Sunrise SIM card shows
slightly worse performance as the completion time raises to
3.68 seconds on average (standard deviation 1.45 seconds).
Table II shows the accuracy of the location information and
the elapsed time between the server request and the actual GPS
ﬁx on the client. The reported accuracy is within an acceptable
range to distinguish shops next to each other (17.40 meters on
average), and the location ﬁx is available with a very short
delay (less than 257 milliseconds on average).
IX. DISCUSSION
This section further discusses the proposed mechanisms in
terms of integration with current payment systems, deployment
considerations, and privacy issues. Finally, we discuss the
applicability of our solution to other scenarios.
A. Integration with Payment Systems
Our protocols can increase the security of any payment card
transaction (either “chip and PIN” or “swipe and sign”) where
the card issuer is contacted by the terminal to authorize or deny
the payment. We now detail the integration of our solution with
deployed payment systems and, in particular, with the EMV
payment standards [32].
An EMV transaction involves the card, the terminal, the
card issuer and an acquirer. The acquirer is a banking in-
stitution that processes credit and debit card payments for
merchants. Third-party payment processors may be also in-
volved, or the issuer and the acquirer may be the same
banking institution. EMV speciﬁcations for transactions with
Fig. 8: Average time and standard deviation required to com-
plete a location veriﬁcation, for different connection types.
our hypothesis, completion time in this scenario has greater
variance, especially when using Edge or 3G networks.
Finally, Figure 8 shows the average and the standard
deviation for the measurements of Figure 7b. The completion
time for our solution is, on average, 2.2 seconds with an
Edge connection, 1.82 seconds with a 3G connection, and 0.6
seconds with a WiFi connection, respectively.
B. Field Study
To test our solution in a setting close to the actual payment
scenario, we use two client devices and carry out a two-day
ﬁeld study with two subjects in Z¨urich. Each subject carries
a client device and a triggering device. The two clients have
SIM cards issued by different operators (Orange and Sunrise).
The triggering device initiates a server request. The server
runs on a standard laptop and listens for incoming triggers. We
use a separate trigger device to make sure that, at the time of a
location veriﬁcation, the radio on the client device is not active.
In an actual deployment, if the radio happens to be active when
a location veriﬁcation request is received, completion time is
expected to be smaller than the ones reported below.
For two days, each subject uses the triggering device to
initiate a location veriﬁcation each time he is close to a pay-
9
 0 1000 2000 3000 4000 5000 6000 7000 8000 0 20 40 60 80 100Completion Time (ms)Location Request NumberWiFi3GEdge 0 1000 2000 3000 4000 5000 6000 0 20 40 60 80 100Completion Time (ms)Location Request NumberWiFi3GEdge 0 500 1000 1500 2000 2500 3000Edge3GWiFiCompletion Time (ms)Connection Type3. merchant ID 
4. merchant 
location 
User%
smartphone%
4. location 
statement 
3. location 
verification 
request 
Acquirer%
Card%issuer%
2. ARQC 
5. ARPC 
Point%of%sale%
terminal%
1. ARQC 
6. ARPC 
Payment%card%
Fig. 9: Integration of the location veriﬁcation protocol within
the EMV payment standards. Dashed lines indicate the addi-
tional messages required for our solution.
online authorization dictate two cryptograms (authenticated
messages) exchanged between the card and its issuer. The
cryptogram sent by the card is denoted as the Application
Request Cryptogram (ARQC) and accounts for a number of
ﬁelds that are supplied either by the card or by the terminal.
Mandatory ﬁelds for ARQC include the transaction amount,
the transaction date, and a random nonce generated by the
terminal. EMV also deﬁnes optional ﬁelds that
individual
payment systems (e.g., Mastercard M/Chip or Visa VSDC)
may require. The card issuer replies with an Application
Reply Cryptogram (ARPC) that notiﬁes the card whether
the transaction has been approved. Figure 9 illustrates the
messages deﬁned in the EMV standards; dashed arrows show
the additional messages required to implement our solution.
Our solution requires the card issuer to know the physical
location of the terminal used for a transaction. In the EMV
standards an acquirer ID globally identiﬁes a banking insti-
tution, while a merchant ID identiﬁes a merchant within a
banking institution. Either the card or the terminal can request
that these elements are included in the ARQC message. Once
the card issuer learns the acquirer and merchant identiﬁers
of a transaction, it can contact the acquirer with the purported
merchant ID in order to retrieve the merchant location. Popular
payment systems are already providing merchant information,
such as location, through standardized APIs [33], [34].