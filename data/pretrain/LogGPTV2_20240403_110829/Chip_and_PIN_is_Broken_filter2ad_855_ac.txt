### Level-Shifting and FPGA Integration

The level-shifting mechanism is connected to a general-purpose FPGA board, specifically the $189 Spartan-3E Starter Kit [11]. This FPGA board drives the card and facilitates the conversion between the card and PC interfaces. A serial link connects the FPGA to a laptop, which in turn is connected to a standard smart card reader from Alcor Micro ($8) where the genuine card is inserted. A Python script running on the laptop manages the transaction, waiting for the Verify command from the terminal. When this command is detected, the script suppresses it and responds with `0x9000`:

```python
if VERIFY_PRE and command[0:4] == "0020":
    debug("Spoofing VERIFY response")
    return binascii.a2b_hex("9000")
```

All other communication remains unaltered.

### Collusion and Security Measures

In scenarios where the merchant collaborates with the attacker for a share of the profit, the hardware's size is not a concern. However, when the merchant is unaware, security measures designed to protect the customer from a corrupt merchant skimming the magnetic strip can inadvertently benefit the attackers. Cardholders are advised not to hand their cards to the merchant, and merchants are socially pressured to look away while the cardholder enters their PIN. The attack can be miniaturized, ported to smaller hardware devices, and may not require a PC if the FPGA or microcontroller is programmed to parse the transaction and interface with the card. Miniaturized hardware could be concealed in a coat sleeve and used immediately after the card is stolen.

### Carrier Card and Microcontroller Integration

A carrier card that hosts a cutout of the original card and interfaces with a microcontroller can communicate with the terminal. This encapsulates the attack in a card form factor, making it more industrializable. Similar miniaturized "shims" with embedded microcontrollers have been created for SIM cards to unlock phones from specific networks [12]. The simple code required for our attack can be ported to run on a similar device. Miniaturization is primarily a mechanical challenge, well within the expertise of criminal gangs, as demonstrated by the miniaturized transaction interceptors used to sabotage point-of-sale terminals and skim magnetic strip data.

### Causes of EMV Protocol Failure

The failure identified here can be addressed in various ways, but fundamentally, there is a protocol design error in EMV. It overly compartmentalizes the issuer-specific MAC protocol from the negotiation of the cardholder verification method. Both the merchant and the issuing bank need a full and trustworthy view of the cardholder verification method. The framework is flawed because the relevant data cannot be neatly collected by either party.

The designers mistakenly viewed the TVR and card verification results as separate lists of possible failures represented by a bit mask rather than as a report of the authentication protocol. While issuing banks can implement secure proprietary schemes within the EMV framework, such schemes would require complex and intricate analysis of transaction data, increasing the complexity and fragility of the existing systems. Essentially, they would have to ignore the framework, leading to further mistakes and making the introduction of new system-wide features difficult and expensive.

### Economic and Regulatory Challenges

EMV's failure has several aspects familiar to security engineers. The closed design process lacked open external review, and the protocol documentation was made public too late for meaningful feedback before significant implementation costs. The economics of security work out poorly in the interaction between banks, customers, and merchants, with banks using their control to shift liability and undermining their own incentive to maintain the system. There are also mismatches between acquirer and issuer banks, and between banks and suppliers, leading to a significant collective action problem. It will be interesting to see which national bank regulators or card schemes will initiate action to address these issues.

### Solutions and Non-Solutions

Core protocol failures are difficult to fix. Moving from SDA to DDA or implementing CDA (combined data authentication) will not help, as the attack does not interfere with transaction authentication. One possible workaround is for the terminal to parse the IAD, which includes the result of PIN verification. However, this is only effective for online transactions and offline transactions with CDA, and it would be challenging to implement due to the lack of a reliable method to determine the IAD format used by a particular card.

A more practical solution might involve changing the CDOL to request the inclusion of the CVMR (cardholder verification method results) in the payload to the Generate AC command. This would allow the card and issuer to identify inconsistencies. However, this fix requires reissuing the card base and would take years to roll out.

### Conclusion

These workarounds should resolve the specific flaw discussed, but more robust solutions are needed. Adopting established design principles, such as the "Fail-stop" principle or ensuring all data is authenticated, would prevent this and other attacks. Alternatively, wrapping the existing command set with an industry-standard transport-layer confidentiality and authenticity standard like TLS could be considered. The next version of EMV needs a proper security engineering exercise, and regulators should insist on open review of the threat model, security policy, and protocol specification.