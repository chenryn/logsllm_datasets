level-shifting. This is connected to a general-purpose FPGA
board ($189 Spartan-3E Starter Kit [11]) that drives the card
and converts between the card and PC interfaces. Through
a serial link, the FPGA is connected to a laptop, which is in
turn connected to a standard smart card reader from Alcor
Micro ($8) into which the genuine card is inserted. A Python
script running on the laptop relays the transaction while
waiting for the Verify command being sent by the terminal;
it then suppresses it to the card, and responds with 0x9000:
if VERIFY_PRE and command[0:4] == "0020":
debug("Spoofing VERIFY response")
return binascii.a2b_hex("9000")
The rest of the communication is unaltered.
Where the merchant colludes with the attacker for a cut
of the proﬁt, the hardware bulk is not a factor. When the
merchant is unwitting, the security measures introduced to
protect the customer from a corrupt merchant skimming the
magnetic strip work in the attackers’ favour. Cardholders
are instructed not to hand their card to the merchant, and
the merchant is under social pressure to look away during
a transaction while the cardholder enters their PIN. The
attack could easily be miniaturized: it can be ported to
smaller hardware devices, and would not require a PC at
all if the FPGA or microcontroller is programmed to parse
the transaction and interface with the card. Miniaturized
hardware could be entirely hidden in a coat sleeve and used
immediately after the card is stolen.
Finally, we can envision a carrier card that hosts a cutout
of the original card, which interfaces with a microcontroller
that communicates with the terminal. This way, the attack
is entirely encapsulated in a card form factor and can be
moderately industrialized. Miniturized “shims” with an em-
bedded microcontroller have already been created for SIM
cards for unlocking phones from a particular network [12];
the simple code required for our attack can be ported to
437
(cid:12)(cid:16)(cid:27)(cid:18)(cid:11)(cid:4)
(cid:6)(cid:3)(cid:10)(cid:15)
(cid:2)(cid:3)(cid:4)(cid:5)
(cid:10)(cid:11)(cid:3)(cid:15)(cid:11)(cid:10)
(cid:20)(cid:23)(cid:14)(cid:24)(cid:20)(cid:25)(cid:16)(cid:26)(cid:27)(cid:4)(cid:28)
(cid:19)(cid:20)(cid:21)(cid:22)
(cid:13)(cid:3)(cid:5)(cid:11)(cid:14)(cid:6)(cid:3)(cid:10)(cid:15)
(cid:16)(cid:11)(cid:10)(cid:17)(cid:9)(cid:4)(cid:3)(cid:18)
(cid:3)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)(cid:10)
(cid:2)(cid:3)(cid:4)(cid:5)
(cid:9)(cid:12)(cid:12)(cid:8)(cid:11)(cid:10)
Figure 4. Components of the attack.
run on a similar device. Miniaturization is mostly a me-
chanical challenge, and well within the expertise of criminal
gangs: such expertise has already been demonstrated in the
miniaturised transaction interceptors that have been used to
sabotage point of sale terminals and skim magnetic strip
data. Miniaturization is not critical, though, as criminals
can target businesses where a card can be used with wires
running up the cashout operative’s sleeve, while a laptop and
FPGA board can be hidden easily in his backpack. There
are ﬁrms such as supermarkets and money changers whose
terminals are located on the other side of a barrier from
the checkout staff, who therefore do not scrutinise the cards
their customers use.
V. CAUSES
The failure we identify here might be patched in various
ways which we will discuss later. But at heart there is a pro-
tocol design error in EMV: it compartmentalises the issuer-
speciﬁc MAC protocol too distinctly from the negotiation of
the cardholder veriﬁcation method. Both of the parties who
rely on transaction authentication – the merchant and the
issuing bank – need to have a full and trustworthy view of
the method used to verify the cardholder; and because the
relevant data cannot be collected neatly by either party, the
framework itself is ﬂawed.
A key misconception of the designers was to think of the
TVR and card veriﬁcation results primarily as separate lists
438
of possible failures represented by a bit mask, rather than
as a report of the authentication protocol run.
This is not to say that issuing banks cannot in future
implement secure proprietary schemes within the EMV
framework: because the internal protocols are proprietary
anything is possible, and some potential options will be
discussed in Section VI. But such schemes must make
ever more complex and intricate analysis of the transaction
data returned, driving up the complexity and fragility of
the existing EMV card authorization systems. Essentially,
they will have to ignore the framework, and without a
change in the framework itself, the authorization calculations
will remain so complex and dependent on external factors
that further mistakes are very likely. Also, as the protocol
becomes more customized by the issuer, the introduction
of new system-wide features sought for other purposes will
become progressively more difﬁcult and expensive.
The failure of EMV has many other aspects which will
be familiar to security engineers. There was a closed design
process, with no open external review of the architecture
and its supporting protocols. The protocol documentation
appeared eventually in the public domain – nothing imple-
mented by 20,000 banks could have been kept secret – but
too late for the research community to give useful feedback
before a lot of money was spent on implementation.
just
in the
interaction between banks, customers and merchants – with
The economics of security work out not
Figure 5. Carrying out the attack. Although we entered the wrong PIN, the receipt indicates that the transaction was “Veriﬁed by PIN”.
the banks using their control of the system to dump liability,
and thus undermining their own incentive to maintain it.
There are also mismatches between acquirer and issuer
banks, with only the latter feeling any real incentive to
remediate security failures; between banks and suppliers,
with the latter being squeezed on costs to the point that
they have little incentive to innovate; and between banks
and the facilities management ﬁrms to whom much of the
business of card personalisation, network operation, and so
on gets outsourced. The industry as a whole suffers from a
signiﬁcant collective action problem. It will be interesting
to see which of the dozens of national bank regulators,
or which of the three card schemes, will initiate action to
deal with those aspects of the problems described here that
cannot be tackled by issuer banks acting alone. It may be
worth bearing in mind that the smart card industry spent
some twenty years pitching its products to the banks before
it managed to overcome the collective action problem and
get the industry to move. In the absence of a catastrophe,
changes that require everyone to act together are going to
be slow at best.
A major contributing factor to the fact that these protocol
ﬂaws remained undiscovered is the size and complexity of
the speciﬁcation, and its poor structure. The core EMV
protocols are now 707 pages long,
there are a further
2 126 pages of testing documentation, and card schemes
also specify extensions (Visa publishes 810 pages of public
documentation, and there is more which is secret). Many
options are given, and a typical implementation mixes some
of the functionality from the published manuals with some
issuer-speciﬁc enhancements. Security critical details are
scattered throughout, and there is no one section which is
439
sufﬁcient to understand the protocol, the threat model, or the
security policy. In fact, much detail is not speciﬁed at all,
being left to implementation decisions by individual issuers.
For example, to conﬁrm the existence of the security
vulnerability discussed in this paper, we needed to establish:
• Lack of authentication in transport layer (EMV Book
1 [1])
p171])
• Encoding of Verify (EMV Book 3 [3, p71])
• Encoding of the TVR (EMV Book 3, Annex C [3,
• Recommended generation algorithm for the ARPC
(EMV Book 2 [2, p89])
• Recommended transaction data items to be included in
the ARQC and TC (EMV Book 2 [2, p88])
• Absence of cardholder veriﬁcation result in ARQC and
TC requests (EMV Book 2 [2, p73], EMV Book 3 [3,
p58])
• Encoding of the CVM list (EMV Book 3, Annex C [3,
p168])
• Algorithm for selecting cardholder veriﬁcation method
(EMV Book 3 [3, p103])
• Transaction ﬂow (EMV Book 3 [3, p83])
• Values of the TVR for signature transaction (EMV
Book 4 [4, p49])
• Whether the actual cardholder veriﬁcation method used
is included in the CDOL (unspeciﬁed, found by exper-
iment)
• Whether the issuer checks value of IAD in online
transactions (unspeciﬁed, found by experiment)
• Whether the terminal attempts to decode the IAD
(unspeciﬁed, found by experiment)
• Encoding of the IAD (proprietary, speciﬁed in Visa
Integrated Circuit Card Speciﬁcation, Appendix A [8,
p222])
Ultimately EMV is a compatibility system and protocol
toolkit. It allows interoperable protocols to be built, but
following the speciﬁcation – even including the optional
recommendations – does not ensure a secure protocol. This
may explain why there has been little analysis of EMV.
The speciﬁcation does not contain enough detail to support
any claims about the security of implementations, as they
depend on proprietary, and often unpublished, details. It is
necessary to do experiments, as we did. But researchers, and
merchants who assist them, may be afraid of retribution from
the banking industry, which makes experimentation difﬁcult.
VI. SOLUTIONS AND NON-SOLUTIONS
Core protocol failures are difﬁcult to ﬁx. None of the
security improvements already planned by banks will help:
moving from SDA to DDA will not have any effect, as
these are both methods for card authentication, which oc-
curs before the cardholder veriﬁcation stage. Neither will
a further proposed enhancement – CDA (combined data
authentication) – in which the transaction authorization stage
440
additionally has a digital signature under a private key held
by the card. This is because the attack we present does
not interfere with either the input or output of transaction
authentication, so replacing a transaction MAC with a digital
signature will not help.
One possible work-around is for the terminal to parse
the IAD, which does include the result of PIN veriﬁcation
(Table II). This will only be effective for online transactions,
and ofﬂine transactions where CDA is used, otherwise the
man-in-the-middle device could tamper with the IAD as it is
returned by the card. It would also be difﬁcult to implement
because the IAD was intended only for the issuer, and there
are several different formats, without any reliable method to
establish which one is used by a particular card. However
a solution along these lines would require the acquiring
banks and the terminal vendors to act together, which for
the incentive reasons discussed above would be both slow
and difﬁcult.
The realities of security economics mean that we have to
look for a ﬁx which requires changes only to customer cards
or to the issuer’s back-end systems. Such a repair may in
fact be possible: the card can change its CDOL to request
that the CVMR (cardholder veriﬁcation method results) be
included in the payload to the Generate AC command. This
speciﬁes which cardholder veriﬁcation method the terminal
believes was used, and so should allow the card and issuer
to identify the inconsistency. Out of many, we have only
seen one EMV card which requests this ﬁeld, and it is not
clear that the issuer actually validates the CVMR against the
IAD. Whether this ﬁx works for a given bank will depend
on its systems; we have not been able to test it, and given
that it involves reissuing the card base it would take years
to roll out.
In addition to the global EMV speciﬁcations, and ones
from card-scheme operators such as Visa and MasterCard,
there are also country-speciﬁc standards. In the UK, the
standard for communications between merchant terminal and
acquirer is APACS 70, Book 2 [13], which speciﬁes that
both the IAD and CVMR must be sent. This is sufﬁcient
information for the issuer to detect
the attack, but our
results clearly show that they are not currently doing so.
One possible reason is that the data items are dropped or
corrupted between the acquirer and issuer (industry experts
disagree over whether this is the case). Another possibility is
that some terminals do not set the CVMR correctly, resulting
in too many false positives if it were compared against the
IAD. In any case, unless the CVMR is included in the
CDOL it may not be integrity-protected, so a second man-in-
the-middle between terminal and acquirer (perhaps installed
with co-operation of a corrupt merchant staff member) could
tamper with it too.
These workarounds should resolve the particular ﬂaw
discussed in this paper, but there are likely to be more.
A more prudent approach would be to follow established
design principles for robust security protocols. For example,
adopting the “Fail-stop” [14] principles would prevent this
attack; so would the explicitness principle, of ensuring you
authenticate all data that might be relied on. Either approach
would be likely to prevent other attacks too, and it would
also make the protocols easier to analyze. Alternatively an
industry standard transport-layer conﬁdentiality and authen-
ticity standard, such as TLS [15], could be wrapped around
the existing command set. However, it’s important that a ﬁx
should not just be an ad-hoc hack. The next version of EMV
needs a proper security engineering exercise; regulators
should insist that a threat model, security policy and protocol
speciﬁcation are published for open review.
VII. EVIDENCE IN CHIP AND PIN DISPUTES
Even if it turns out to be too expensive in the short term