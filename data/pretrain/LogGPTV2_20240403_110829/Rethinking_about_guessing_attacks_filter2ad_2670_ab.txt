informally refer to all terms in T as the attacker’s explicit
knowledge and all terms deducible from T under E as its
implicit knowledge.
Lemma 2.1. Let T be a term set and σ be a substitution.
Then, T σ ⊢ t if and only if T ⊢ t
such that
′
σ =s t.
t
for some t
′
′
The following equational theory Edy is used to model the
standard Dolev-Yao intruder.
Public function symbols
Private function symbols
pair, fst, snd, enc, dec
kp
Equations Edy
fst(pair(x, y)) = x
snd(pair(x, y)) = y
dec(enc(x, y), kp(y)) = x
dec(enc(x, kp(y)), y) = x
Figure 1: Equational Theory Edy modeling the stan-
dard Dolev-Yao intruder.
The equational theory Edy contains two public construc-
tive function symbols for encryption and concatenation, three
destructive function symbols for decryption and split, and
one private function symbol for key pair. Our analysis does
not rely on the actual cryptosystem being used. Rather, we
would use kp(k) to denote the pair key of an encryption key
k. So, for symmetric encryption key k, we implicitly assume
that kp(k) = k. To reduce notational clutter, we will often
use {s}t, s · t, and k
as shorthands for enc(s, t), pair(s, t),
and kp(k+), respectively.
−
3. FORMALIZING THE IDEA OF VERIFY-
ING A GUESS
As mentioned in the introduction, although the intuitive
idea of verifying a guess has been extensively used to ana-
lyze guessing attacks in security protocols, it has not been
adequately formalized. The purpose of this section is to for-
malize the meaning of \verifying a guess".
It is crucial to note that veri(cid:12)ability requires one to dis-
tinguish useful information (a correct guess) from noise |
an ability that is independent of security protocols. For
instance, as seen in the example in the introduction, the
attacker who knows {NA}KAB and {f(NA)}KAB can easily
test whether a message g is the correct guess of KAB. And
the test can be done o(cid:11)-line by checking
⊢(n)
(R1)
(R2)
t ∈ T
T ⊢(1) t
T ⊢(n1) t1 ··· T ⊢(nk) tk
ni)
f (t1,··· , tk)
T ⊢(1+ max
1≤i≤k
T ⊢(n) s
t
E
(R3)
⊢(n)
1We let sub(t) = {t} and f f (t) = ∅ if t ∈ X ∪ A.
T ⊢(n+1)
s =E t
E
f ∈ F +
dec({f(NA)}KAB , g) ?=Edy f(dec({NA}KAB , g))
Some may argue, however, that for more complicated pro-
tocols (e.g., simpli(cid:12)ed LGSN protocol [24]) the attacker do
need to communicate with other parties to verify a guess.
We adopt a cognitive point of view here: verifying a guess
is a process of using its knowledge, whereas communication
is a way for protocol participants to exchange knowledge.
318
It is desirable to formalize veri(cid:12)ability independent of in-
truder models and security protocols. This demand res-
onates with a recent work on type-(cid:13)aw attacks [39], which
introduces \recognizability" to characterize the fact that a
message could not be type-(cid:13)awed, i.e., the incoming message
can never be replaced by another message without detection.
Although their concern appears to be di(cid:11)erent from here, the
methodology is exactly the same: using one’s knowledge to
distinguish a message from another. We thus build our work
on the concept of \recognizability".
De(cid:12)nition 3.1 (Operational Equivalence [39]). Let T be
a term set and σ1 and σ2 be two ground substitutions such
that Dom(σ1) = Dom(σ2) = f v(T ). They are operational
equivalent in equational theory E w.r.t. term set T , written
σ1 ≈E;T σ2, if for all terms u and v such that T ⊢ {u, v} we
have uσ1 =E vσ1 ⇔ uσ2 =E vσ2.
Intuitively, operational equivalence establishes the fact
one can never discriminate two ways of instantiating mes-
sages by exploiting the di(cid:11)erence with what he knows. More
speci(cid:12)cally, we use term set T to model one’s deductive
knowledge with variables denoting possibly ambiguous (or
informally unveri(cid:12)ed) messages.
The following lemma gives some useful characterizations
of operational equivalence.
Lemma 3.2 (Transformation Lemma [38]).
(i). Suppose that T ⊢E t. Then, σ1 ≈E;T σ2 i(cid:11) σ1 ≈E;T∪{t}
σ2;
(ii). Suppose that T ⊢ s, sσ1 =E w1, sσ2 =E w2, and x
1 ≈E;T∪{x}
′
never occurs in T . Then, σ1 ≈E;T σ2 i(cid:11) σ
′
σ
2, where σ
1 = σ1 ◦ [w1/x] and σ
′
2 = σ2 ◦ [w2/x].
′
Example 1. Consider again the one-way authentication
protocol presented in the introduction. Assume a passive
attacker can eavesdrop on communication links and save all
the messages. Then, we can use T0 = {{NA}KAB ,{f(NA)}KAB
to represent the attacker’s knowledge. Here and hereafter,
whenever needed, we implicitly add the public unary func-
tion symbol f into the term algebra presented in Figure 1.
Suppose that the attacker wants to guess the value of NA
and we use variable x to signify the guess. Let T = T0∪{x},
σ1 = [NA/x], and σ2 = [NB/x]. Clearly, xσ1 is a correct
guess, but xσ2 is not. Then, it can be shown that σ1 ≈Edy ;T
σ2. In other words, the attacker is unable to check whether
a guess (of NA) is correct or not.
}
We now suppose that the attacker wants to guess the value
of KAB. Again, we use x to signify the guess, and let σ3 =
[KAB/x] and σ4 = [NB/x]. We choose
u =s dec({f(NA)}KAB , x)
v =s f(dec({NA}KAB , x))
Then,
uσ3 =s dec(f({NA)}KAB , KAB)
vσ3 =s f(dec({NA}KAB , KAB))
uσ4 =s dec({f(NA)}KAB , NB)
vσ4 =s f(dec({NA}KAB , NB))
Consider now, T ⊢ {u, v}, uσ3 =Edy vσ3 =Edy f(NA), and
uσ4 ̸=Edy vσ4. By the de(cid:12)nition of operational equivalence,
we have σ1 ̸≈Edy ;T σ2.
In the above example, we see that the attacker can dis-
criminates a correct guess of KAB from NA by investigat-
ing the operational equivalence relation between two guesses
(described by two substitutions): if the two di(cid:11)erent substi-
tutions (resp. a correct and an incorrect guess) do not sat-
isfy operational equivalence, then the guess can be veri(cid:12)ed;
otherwise, the attacker cannot capture any nuance and the
guess is not veri(cid:12)able.
De(cid:12)nition 3.3 (Recognizability [39]). Let T be a ground
term set, t be a ground term, and σ0 = [t/x]. We say that
t is recognizable by T under equational theory E, and write
T (cid:3)E t, if the following condition holds:
σ ≈E;T∪{x} σ0 i(cid:11) σ =E σ0
Edy
With this hindsight, we say a guess of t is (strongly) veri(cid:12)-
able by T under equational theory E if T (cid:3)E t. As in the pre-
vious example, we have T ̸(cid:3)
NA and T (cid:3)Edy KAB, which
con(cid:12)rm that the protocol is vulnerable to o(cid:11)-line guessing
attack.
Remark. It should be noticed that operational equivalence
is closely related to that of static equivalence [2, 1]. The
main di(cid:11)erence is that operational equivalence is from a
cognitive perspective, whereas static equivalence is from a
process point of view. Nonetheless, deciding recognizabili-
ty and deciding static equivalence are signi(cid:12)cantly di(cid:11)erent.
For recognizability, we concern with the problem: given a
message m whether there exists another message m
that is
indistinguishable from m by the observer. In other words,
we need to consider all possible message m
that is rele-
vant to the operational equivalence relation. Consequently,
deciding recognizability can be much harder than deciding
static equivalence.
′
′
Example 2. We extend the equational theory Edy to model
probabilistic encryption scheme by adding two public func-
tion symbols renc and rdec, and the following two equations:
rdec(renc(x, y, r), kp(y)) = x
rdec(renc(x, kp(y), r), y) = x
We use {s}r
the new extended equational theory.
t to denote renc(s, t, r) and Edyr to represent
Let us consider the Encrypted Password Transmission (EP-
T) protocol [34]
Message 1.
Message 2.
S → U : NS · K +
U → S : {NS · P}r
S
K+
S
K+
S
K+
S
by the guess of P , say P
S ,{NS · P}r
} and σ0 = [P/x].
Here, we use P to denote the secret password memorized by
the user U and shared with the server S2. Now, suppose
that a passive attacker knows NS, K +
S , and wants to guess
P . Let T = {NS, K +
Since the encryption scheme is randomized, the attacker
does not know r and thus it is not able to compute {NS ·
P}r
. It is not hard to see that
for all u, v such that T ∪ {x} ⊢ {u, v} we have uσ0 =Edyr
vσ0 i(cid:11) u =Edyr v. Similarly, for all u, v such that T ∪
{x} ⊢ {u, v} we have u[P
/x] i(cid:11) u =Edyr v.
Hence, uσ0 =Edyr vσ0 i(cid:11) u[P
/x]. Because
σ0 =Edyr [P
/x] needs not to be true, using the de(cid:12)nition
2In implementation, the secret password is either stored in
plain text or hashed under some one-way function.
/x] =Edyr v[P
/x] =E v[P
′
′
′
′
′
′
319
Edyr
K+
S
P . This con(cid:12)rms the claim
However, if the protocol uses deterministic encryption,
, then
S ,{NS·
} . Towards a contradiction, suppose that σ ≈Edy ;T∪{x}
of recognizability we get T ̸(cid:3)
that this protocol is resistant to guessing attacks [34, 16].
that is the second message is replaced by {NS · P}
the value of P can actually be guessed. Let T
P}
σ0 and σ ̸=Edy σ0.
Let u =s {NS · x}
. Clearly,
T ∪ {x} ⊢ {u, v} and uσ0 =E vσ0. By the de(cid:12)nition of
operational equivalence, we get uσ =Edy vσ. That is, {NS ·
′}
=Edy P and thus σ =Edy
K+
σ0, a contradiction. Therefore, σ ≈Edy ;T∪{x} σ0 implies
S
σ =Edy σ0 and thus T
and v = {NS · P}
= {NS, K +
′ (cid:3)Edy P .
{NS · P}
. So, P
=Edy
K+
S
K+
S
K+
S
K+
S
P
′
′
of guessing attacks. Let us consider some other examples
that highlight this distinction.
} denotes the
Example 4. Let T = {NA, K +
attacker’s knowledge. Suppose that the attacker aims to ob-
tain P . There are two possible ways: First, the attacker can
explicitly guess P by using
B ,{NA · P}
K+
B
{NA · x}
σ =Edy
K+
B
{NA · P}
−
B by using
K+
B
Second, it can explicitly guess K
fst(dec({NA · P}
, y))σ =Edy NA