Domain
Domain
IPv6 addresses
TABLE III: DNSSEC Enabled Generic Top Level Domain Breakdown: We show the enabled NSEC records for different types
of Top Level Domain and the possibility of extracting IPv6 addresses from each NSEC record.
Top-Level Domain Type NSEC Disabled
NSEC Enabled
No NSEC record
NSEC record contains
Domain
Domain
IPv6 addresses
24
15
3
3
3
3
0
0
0
0
30
6
9
6
0
0
0
0
0
0
IPv4 addresses
129
96
30
21
18
15
12
9
0
0
IPv4 addresses
177
63
45
39
15
6
6
6
0
0
Brazil
Czech Republic
Sweden
Netherlands
Germany
Thailand
United Kingdom
Russian Federation
Ireland
China
1350
363
315
291
1768
100
1101
3615
105
1998
com
edu
gov
org
net
info
google
post
site
cat
Domain
50269
940
247
4020
5576
836
0
0
79
29
43
32
10
7
6
5
4
3
0
0
59
21
15
13
5
2
2
2
0
0
4
1
2
0
0
0
1
0
3
3
103
0
0
8
6
1
0
0
1
1
In this scenario, the search space for this pattern can easily be
reduced.
Embedded-IPv4 scheme. Each ﬁeld of an IID con-
tains 16-bit values and is
represented by 4 hexadeci-
mal digits. However, some studies have shown that net-
the IPv4
work administrators often encode one byte of
into each 16-bit ﬁeld of
address
in-
stance,
if a host has an IPv4 address ‘194.109.20.106’
in the current network, a network administrator would
into an IPv6 network (2001:888:0::/48)
move this host
with the subnet
ID 0x24. The new IPv6 address
for
this host would look like 2001:888:0:24:194:109:20:106 or
2001:888:0:24:194.109.20.106.
IID. For
the
Service port. Some network administrators put the service
port into the lowest-order 16-bit ﬁeld or the second lowest-
order 16-bit ﬁeld to indicate which service this port is running
on. For example, 2001:db8::1:80 or 2001:db8::80:1 refers to
the server that opens port 80. Also, Chown et al. [2] mention
that service ports are sometimes encoded in hexadecimal
notation, such as 2001:db8::1:50.
the DNS address resolving procedure. We will discuss DNSG’s
possible deployment scenarios later.
We created two detection approaches in DNSG for detecting
and preventing different attacks. For the DNS reverse lookup
attack, DNSG compares a new DNS request with the previous
requests, if the current request is sequentially increased from
the previous requests, it sends an alert message to network
administrators and drops the packet. To prevent the DNSSEC
attack, DNSG removes the NSEC record from the DNS
response. For instance, an attacker sends a DNSSEC query
to check an unknown domain name, and expects to receive an
NXDOMAIN containing an NSEC record from a local DNS
server. However, DNSG removes the NSEC records from the
DNS response and sends only an NXDOMAIN back to the
attack.
The basic workﬂow of DNSG is outlined in Fig. 5. DNSG
is decomposed into four main components: Packet Inspector,
Packet DB, Packet Detection Engine and Packet Decision
Maker. Each component plays a different role and is asso-
ciated with each other. In the following, we provide a short
description of each component.
V. PROPOSED SOLUTION
A. Packet Inspector
In this section, we propose a solution that aims at addressing
DNS problems associated with IPv6 reconnaissance attacks.
We named our solution, DNS Guard (DNSG). It can be
deployed at gateway, Intrusion Detection System (IDS) or ISP
level without touching any existing security infrastructures or
The packet inspector is an initial point in our design. It is an
interface between a network card and rest of the components in
DNSG. It allows DNSG to sniff the packets from a monitored
network. In principle, the packet inspector is a core component
for accessing different protocols. It uses preconﬁgured rules to
356
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:37:20 UTC from IEEE Xplore.  Restrictions apply. 
Network 
administrator
5. Drop Packet/Send Alert
3. Save/Get 
the historical result 
of captured packet 
Packet DB
Packet Decision 
Maker
4. Drop packet
Packet Detection 
Engine
2. Filtered packet stream
Attacker
DNS scanning
queries
Packet Inspector
1. Packet stream
Network
Fig. 5: Basic overview of our proposed approach in which
DNS Guard captures the packets from networks (Step 1). The
captured DNS packet is passed to the detection engine for
analysing the DNS reconnaissance attack patterns (Step 2),
DNSG consults the historical record of that DNS query from
its database (DB) (Step 3). If a reverse lookup query contains
an increment in the last 16 bits of an ip6.arpa query, or if a
response contains NSEC records, DNSG raises the alarm to
drop the packet (Step 4) and sends an alert message to network
administrators (Step 5).
ﬁlter out the speciﬁed packets and forward them to the packet
detection engine. For example, the packet inspector checks
the application layer protocol for each received packet; if a
packet uses the DNS protocol, it sends the packet to the packet
detection engine for the further investigation. Otherwise, it
forwards the packet to a destination address.
B. Packet Detection Engine
The goal of the packet detection engine is to check for the
DNS reconnaissance patterns that we mentioned in the earlier
sections. After receiving the packet from the packet inspector,
it ﬁrst classiﬁes the DNS query type. We focus on two DNS
queries: the reverse lookup query and the DNSSEC query.
If an IPv6 reverse lookup query arrives, the packet detection
engine consults the packet DB for the historical record of
that query. If the packet DB returns no record, the packet
detection engine sends the query to the recursive DNS server
and requests the packet DB to save this query. Otherwise, it
compares the request with the previous records for the same
.ip6.arpa zone. If the detection engine ﬁnds that the query
sequentially increases the ﬁrst nibble in the reverse lookup
query, it sends a customised action to the packet decision
maker. On the other hand, if we capture a DNSSEC response,
it removes the NSEC records from the response and forwards
the remaining parts to users.
C. Packet DB
The packet DB creates and manages the DNS query for
each request. The database maintains the following ﬁelds:
the ip6.arpa zone information, the ﬂow information, and the
frequency of request (indicating how many times an ip6.arpa
zone has been queried). To clean up the old records in DB,
we use a Time To Live (TTL) value in each DNS response,
that indicates how long the particular record is good for. From
time to time we remove all entries with expired TTLs.
D. Packet Decision Maker
From the ﬂexible conﬁguration point of view, it is a common
practice to allow users to conﬁgure the actions when an attack
is detected. Taking inspiration from this approach, DNSG uses
the following actions: log, drop, hide, and NXDOMAIN. The
log action – the decision maker saves the malicious activities
in the local log folder; the drop action – the packet decision
maker blocks the packet and sends an alert message to network
administrators; for the hide action, the decision maker blocks
the DNS response and does not send it to the DNS user. For
a DNSSEC response, DNSG also removes the NSEC records
from the response and only returns the NXDOMAIN message
back to the user.
E. DNSG in Action
In the following, we discuss how to use DNSG to prevent
the IPv6 address scanning attacks described in Section III.
F. DNS Reverse Lookup Protection
1) 0.0.0.0.0.0.2.6.0.1.0.0.2.ip6.arpa
7) 1.0.0.0.0.0.0.2.6.0.1.0.0.2.ip6.arpa
6) NXERROR
Attacker
DNS Guard
8) Drop 
packet/
Generate
Alert message
ip6.arpa
4) NXERROR
5) NXERROR
2) 0.0.0.0.0.0.2.6.
0.1.0.0.2.ip6.arpa
Recursive DNS 
Server
3) 0.0.0.0.0.0.2.6.0.1.0.0.2.ip6.arpa
Fig. 6: Overview of our proposed approach in which DNS
Guard analyses the DNS query, depending on the historical
records of network preﬁxes. It will either drop or send queries
to the Local DNS Server.
As we can see from Fig. 6, the DNS inspector receives the
ﬁrst query from an attacker for looking at the domain name of
2001:620:00 (Step 1) and passes it to the DNS detection engine
(Step 2). After receiving the query, the DNS detection engine
searches the historical records of 0.0.0.2.6.0.1.0.0.2.ip6.arap
from the DNS DB (Step 3). Since the reverse lookup query is
new, there is no entry in the database. The detection engine has
to contact the Local DNS Server (Step 4) and get the DNS
response (Step 5). To save the response, the DNS detection
engine inserts a new entry (Step 6a) for this new ip6.arpa
zone, logs the ﬂow information, and initialises the frequency
357
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:37:20 UTC from IEEE Xplore.  Restrictions apply. 
of request ﬁeld by 1. The NSEC next domain information sets
as null, because this is not a DNSSEC query. Subsequently,
the DNS detection engine sends the response to the DNS
decision maker (Step 6b). Because no attack is found by
the detection engine, the decision maker sends the response
to the attacker (Step 7). If the attacker sends a new reverse
lookup query for the same ip6.arpa zone(Step 8), the DNS
packet inspector forwards the request to the DNS detection
engine (Step 9). The detection engine consults the DNS DB
for getting the record of 0.0.0.2.6.0.1.0.0.2.ip6.arap (Step 10).
Since there is an entry in the table, it compares the new query
with the historical records and detects that the new request is
sequentially increased from the previous requests. Therefore,
it sends the drop packet action to the DNS decision maker for
blocking the packet and logging the incident (Step 11).
G. DNSSEC Zone Walking Protection
Our approach to detect and prevent DNSSEC zone walking
is very simple. DNSG accesses each response from a local
DNS server. If the response contains an NXDOMAIN and
NSEC record, DNSG removes the NSEC record and returns
the NXDOMAIN response to users.
H. How feasible is it to implement the proposed solution in
an IDS?
We evaluate our solution with three popular open-source
IDS tools: Snort, Bro, and Suricata. All three tools are widely
deployed in existing IPv4 networks. Many organisations use
one of them to protect their networks. There are two signiﬁcant
beneﬁts of using an open source tool to evaluate our solution.
First,
the ﬂexibility of the open source tools is a major
advantage, we can easily analyse and modify the source code
to achieve our goals. Second, these IDSs already provide some
basic features for capturing, analysing, and detecting packets.
Based on our implementation, we ﬁnd that it is difﬁcult to
integrate our solution with Snort, because it does not have
the functionality to save and extract the historical payload
information from its existing data structures. In contrast, Bro