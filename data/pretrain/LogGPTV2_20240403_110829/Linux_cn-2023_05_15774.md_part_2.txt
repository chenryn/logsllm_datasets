```
mysql> insert into test (the_date) VALUES ('2022-01-05');
```
我在我的 `test` 表中插入了四行日期值，你插入多少行都可以。
有时你可能想知道某一天是星期几。MySQL 给了你几种实现方法。
第一种，也是最显而易见的方法，是使用 `DAYNAME()` 函数。如下示例表所展示，`DAYNAME()` 函数可以告诉你每个日期是星期几：
```
mysql> SELECT the_date, DAYNAME(the_date) FROM test;
+------------+-------------------------------+
| the_date   | DAYNAME(the_date)             |
+------------+-------------------------------+
| 2021-11-02 | Tuesday                       |
| 2022-01-05 | Wednesday                     |
| 2022-05-03 | Tuesday                       |
| 2023-01-13 | Friday                        |
+------------+-------------------------------+
4 rows in set (0.00 sec)
```
另外两种获取星期几的方法是返回整数值，而不是星期几的名称，分别是 `WEEKDAY()` 和 `DAYOFWEEK()`。他们都返回数字，却又各不相同。`WEEKDAY()` 函数返回从 0 到 6 的数字，其中 0 代表星期一，6 代表星期日。而 `DAYOFWEEK()` 则返回从 1 到 7 的数字，其中 1 代表星期日，7 代表星期六。
```
mysql> SELECT the_date, DAYNAME(the_date),
WEEKDAY(the_date), DAYOFWEEK(the_date) FROM test;
+------------+------------------+------------------+--------------------+
| the_date   | DAYNAME(the_date)| WEEKDAY(the_date)| DAYOFWEEK(the_date)|
| 2021-11-02 | Tuesday          | 1                | 3                  |
| 2022-01-05 | Wednesday        | 2                | 4                  |
| 2022-05-03 | Tuesday          | 1                | 3                  |
| 2023-01-13 | Friday           | 4                | 6                  |
+------------+------------------+------------------+--------------------+
4 rows in set (0.00 sec)
```
### 当你只想获取日期的一部分时
有时你可能在 MySQL 表中存储了一个日期，但是你只想获取日期的一部分。这并不是问题。
MySQL 中有几个顾名思义的函数，可以轻松获取日期对象的特定部分。以下是一些示例：
```
mysql> SELECT the_date, YEAR(the_date), MONTHNAME(the_date), 
DAYOFMONTH(the_date) FROM test ;
+-----------+---------------+-------------------+---------------------+
| the_date  | YEAR(the_date)|MONTHNAME(the_date)| DAYOFMONTH(the_date)|
+-----------+---------------+-------------------+---------------------+
| 2021-11-02| 2021          | November          | 2                   |
| 2022-01-05| 2022          | January           | 5                   |
| 2022-05-03| 2022          | May               | 3                   |
| 2023-01-13| 2023          | January           | 13                  |
+-----------+---------------+-------------------+---------------------+
4 rows in set (0.00 sec)
```
MySQL 也允许你使用 `EXTRACT()` 函数来获取日期的一部分。你提供给函数的参数是一个单位说明符（确保是单数形式）、`FROM` 和列名。因此，为了从我们的 test 表中仅获取年份，你可以写：
```
mysql> SELECT EXTRACT(YEAR FROM the_date) FROM test;
+----------------------------------------------+
| EXTRACT(YEAR FROM the_date)                  |
+----------------------------------------------+
| 2021                                         |
| 2022                                         |
| 2022                                         |
| 2023                                         |
+----------------------------------------------+
4 rows in set (0.01 sec)
```
### 插入和读取不同格式的日期
正如之前提到的，MySQL 使用 `ISO 8601` 格式存储日期和时间值。但是如果你想以另一种方式存储日期和时间值，例如 `MM-DD-YYYY` 格式，怎么办？首先，不要尝试这样做。MySQL 以 8601 格式存储日期和时间，就是这样。不要尝试更改它。但是，这并不意味着你必须在将数据输入到数据库之前将数据转换为特定的格式，或者你不能以任何你想要的格式展示数据。
如果你想要将非 ISO 的格式的日期输入到表中，你可以使用 `STR_TO_DATE()` 函数。第一个参数是你想要存储在数据库中的日期的字符串值。第二个参数是格式化字符串，它让 MySQL 知道日期的组织方式。让我们看一个简单的例子，然后我将更深入地研究这个看起来很奇怪的格式化字符串是什么。
```
mysql> insert into test (the_date) values (str_to_date('January 13, 2023','%M %d, %Y'));
Query OK, 1 row affected (0.00 sec)
```
你将格式化字符串放在引号中，并在每个特殊字符前加上百分号。上面代码中的格式序列告诉 MySQL 我的日期由一个完整的月份名称 `%M`，后跟一个两位数的日期`%d`，然后是一个逗号，最后由一个四位数的年份 `%Y` 组成。请注意，大写很重要。
一些其他常用的格式化字符串字符是：
* `%b` 缩写月份的名称（例如: `Jan`）
* `%c` 数字月份（例如: 1）
* `%W` 星期名称（例如: `Saturday）
* `%a` 星期名称的缩写（例如: `Sat`）
* `%T` 24 小时制的时间（例如: `22:01:22`）
* `%r` 带 AM/PM 的 12 小时制的时间（例如: `10:01:22 PM`）
* `%y` 两位数的年份（例如: 23）
请注意，对于两位数年份 `%y`，年份范围是 1970 到 2069。因此，从 70 到 99 的数字被假定为 20 世纪，而从 00 到 69 的数字被假定为 21 世纪。
如果你有一个日期存储在你的数据库中，你想用不同的格式显示它，你可以使用这个 `DATE_FORMAT()` 函数：
```
mysql> SELECT DATE_FORMAT(the_date, '%W, %b. %d, %y') FROM test;
+-----------------------------------------+
| DATE_FORMAT(the_date, '%W, %b. %d, %y') |
+-----------------------------------------+
| Tuesday, Nov. 02, 21                    |
| Wednesday, Jan. 05, 22                  |
| Tuesday, May. 03, 22                    |
| Friday, Jan. 13, 23                     |
+-----------------------------------------+
4 rows in set (0.00 sec)
```
### 总结
本教程应该为你提供了一个关于 MySQL 中的日期和时间值的有用的概述。我希望本文教会了您一些新知识，使您能够更好地控制和理解 MySQL 数据库如何处理时间值。
*（题图：MJ/76b6481a-a271-4e81-bc17-dd7fbe08a240）*
---
via: 
作者：[Hunter Coleman](https://opensource.com/users/hunterc) 选题：[lkxed](https://github.com/lkxed/) 译者：[hanszhao80](https://github.com/hanszhao80) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出