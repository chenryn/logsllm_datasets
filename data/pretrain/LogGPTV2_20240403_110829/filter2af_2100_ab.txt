不幸的是，H11ANEIn开发者显然不清楚IOKit的历史旧账，在创建IOMemoryDescriptor时，仅使⽤了
kIODirectionOutIn参数，也就是“读写”权限。H11ANEIn在使⽤这段数据时更加肆意，直接把⼀个Port指针保存在这段内存。因为这段内存被内核和⽤户态共享，⽤户态不仅可以直接获取这个Port指针造成内核地址空间的信息泄漏，也能直接任意替换这个Port指针，通过伪造Port指针获取内核控制权[7]。这个漏洞⾃iOS
12版本引⼊，直到iOS 13.6才被修复；上⽂IOKit框架处理OOL数据的问题隐藏的更久，这些也印证了⾮预期共享问题的隐蔽性。
## 4 复杂的COW
对于⾮预期共享类型的问题，⼀个直接的修复⽅案就是以写时复制(Copy-on-Write,
COW)分享数据。COW是VM⼦系统的⼀个经典优化策略，其核⼼思想是同⼀个物理页⾯可以同时映射在不同进程的虚拟地址空间内，任意⼀⽅试图修改物理页⾯内容时，系统会为其分配⼀个原物理页⾯的副本页⾯，这样写操作最终作⽤在副本页⾯，⽽不会影响原始页⾯，从⽽这个写操作也不会被另⼀⽅所感知。COW原理简单⽽实现复杂。很多操作系统在COW的实现上出现过问题，例如2016年Linux系统中的脏⽜
(Dirty COW) 漏洞。下⾯我们看⼏个XNU中COW相关的安全问题。
COW 意图
### 4.1 既共享又COW (CVE-2017-2456)
COW通常把⼀个物理页⾯以read-only权限映射到两个虚拟地址，然后任意⼀个虚拟地址发⽣写操作的时候，系统会捕获页⾯写异常，在异常处理过程中复制新的物理页⾯并更新映射关系。如果虚拟地址VA和虚拟地址VB是COW关系，⽽虚拟地址VA和虚拟地址VC是完全共享关系，即同⼀个物理页⾯被映射到三个（甚⾄更多）虚拟地址时，系统如何处理通过虚拟地址VC发⽣的写操作呢？这并不是⼀个容易回答的问题。
COW 和完全共享同时存在
带着这个疑虑，Lokihardt做了⼀个测试 [2]。他创建了⼀个Memory
entryport后，通过完全共享的形式把这个内存页⾯映射在两个不同的虚拟地址VA和VC。然后将VA通过复杂消息 Mach
Message发送到另⼀个进程。根据MachMessage的传递规则，消息接收⽅会以COW的形式映射VA对应的物理内存⾄虚拟地址VB。但是，Lokihardt发现此时在发送⽅修改VC内容，并不会触发系统的COW语意；换⽽⾔之，通过VC的所有写，在VB端全部可见。Lokihardt基于这个思路，在libxpc反序列过程中发现了内存双问题，利⽤双取引发的内存溢出，实现了对任意libxpc服务的攻击
(CVE-2017-2456)。在修复这个漏洞时，XNU严格检查了物理页⾯是否多重映射，确保COW的⼀致性。
CVE-2017-2456的修复
### 4.2 隐蔽的写操作
COW实现的⼀个关键点在于：捕获写操作。这个问题似乎很简单，将物理地址以只读权限映射，写操作⾃然就会触发异常。但是如果写操作并不是通过虚拟地址来实现，COW就可能出现问题。
iOS设备上配备了专门的协处理器⽀持快速图像缩放、⾊彩转换等操作。内核中通过⼀个名为AppleM2Scaler的驱动协调⽤户态和协处理器的通信。对于图像缩放，本质上是⽤户态指定⼀个⽬标内存区域和⼀个源内存区域，AppleM2Scaler通知协处理器通过DMA⽅式直接从源内存区域读取数据处理后写⼊⽬标区域。然⽽，AppleM2Scaler忽略了⽤户态内存的读写属性。这导致⽤户态应⽤可以通过AppleM2Scaler驱动修改任意只读内存。
这个漏洞⽐Linux上的脏⽜漏洞还要严重。2018年，陈良利⽤该漏洞
[8]，在应⽤程序内存空间内修改了⼀块只读内存；这块只读内存本来仅内核可写，内核在使⽤这些数据时不再进⾏验证；陈良利⽤AppleM2Scaler篡改这段只读内存后触发内核其他漏洞，实现iOS的越狱。
这个漏洞还有很多其他利⽤⽅式。iOS设备上动态链接库都被提前链接保存在⼀个shared cache⽂件中。这个shared
cache在设备启动之初，被加载映射到内存中。随后所有启动的进程，都会共享这个shared
cache内存。当然对于其中的代码页⾯，应⽤程序仅具有读+执⾏的权限。AppleM2Scaler这个漏洞可以直接篡改shared
cache代码页⾯，造成在⾼权限进程中的任意代码执⾏。值得⼀提的是，iOS设备上开启了强制代码签名机制。修改代码页⾯后，必须避免系统对页⾯再次进⾏签名验证。这需要通过其他⼀些技巧阻⽌被修改的页⾯触发page
fault。
除了DMA，系统还可能有其他“隐蔽写”操作。Jann Horn针对⽂件映射内存做了⼀些研究
[9,10]，发现了⼀些攻击路径。例如，把⽂件映射到内存后，以COW形式分享给另⼀个进程，此时⽂件内容缓存在物理内存页⾯。当系统内存吃紧时，⽂件内存页⾯会被交换出去；但是Jann
Horn发现，当这些内存页⾯再次被访问时，系统会从磁盘中重新读取⽂件恢复页⾯内容。这就造成了⼀个攻击窗口。如果⽂件来源于攻击者⾃⼰加载的⽂件系统镜像，攻击者可以直接修改(pwrite)
这个⽂件系统镜像从⽽修改相应⽂件内容。这样从⽂件中再次恢复物理页⾯内容时，物理页⾯内容不再与之前页⾯内容⼀致，破坏COW的语意。
### 4.3 危险的锁
2018年，Ian Beer 发现XNU在处理COW映射时，有这样⼀个优化策略：当⼀个进程通过mach
message把⼀个虚拟地址VA对应的内存以COW形式发送出去，并且在mach
message中指明消息发送后就在本地释放虚拟地址VA时，XNU会忽略COW⽽直接把
VA对应的内存项移到接收⽅，省掉了将内存变为COW所需的页⾯权限修改的过程。
然⽽，这个优化策略实现的过程中存在条件竞争
[11]，导致⼀个进程可以同时把VA发送给另⼀个进程和⾃⾝。这样另外⼀个进程和⾃⾝进程都作为这个VA的接收⽅，都会获取这个VA对应内存的访问权限；⽽根据优化策略，这两次接受都不会激活COW复制。Ian
Beer利⽤这个特性，在A12机型上重现了上⽂Lokihardt针对libxpc反序列化的双取漏洞攻击。
Ian Beer在2018年12⽉报告了这个问题，Apple在2019年初对该问题做了⼀次修复。差不多时隔⼀年后，2019年10⽉Ian
Beer再次分析这个漏洞时，发现由于条件竞争的复杂性，Apple的这次修复并不完整。Ian Beer再次提交了PoC。根据Ian Beer
的报告，Apple在2020年初再次对漏洞修复。
## 5 结语
本⽂回顾了XNU在VM管理层⾯的⼀些历史漏洞，尤其是围绕COW实现的各个环节，分析了各种的漏洞成因。尽管这些漏洞已经修复，其实还有很多开放性问题是本⽂没有解答的。例如，Apple针对这些漏洞的修复是否完备？有没有其他途径绕过这些修复？随着系统功能的不断变化，会不会再次引⼊未预期的共享？除了⽂件映射内存和DMA，系统中是否还存在隐蔽的写操作绕过COW？现有的COW实现是不是还有漏洞？希望这些问题能引发⼤家的思考，激发⼤家灵感去寻找新的安全问题。
## 6 参考文献
  1. MacOS uses an insecure swap file. , 2017.
  2. About System Integrity Protection on your Mac. 
  3. macOS/IOS: mach_msg doesn't copy memory in a certain case. . 2017.
  4. Many iOS/MacOS sandbox escapes due to unexpected shared memory-backed xpc_data object. . 2017.
  5. Racing for everyone: descriptor describes TOCTOU in Apple’s core. 
  6. Pwning the macOS Sierra Kernel Inside the Safari Sandbox. 
  7. Don’t place a port in shared memory.  .
  8. KeenLab iOS Jailbreak Internals. 
  9. XNU: copy-on-write behavior bypass via partial-page truncation of file. .2018.
  11. XNU vm_map_copy optimization which requires atomicity isn't atomic. . 2018.
* * *