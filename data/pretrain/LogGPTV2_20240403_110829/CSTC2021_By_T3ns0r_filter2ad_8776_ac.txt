      v7[2] = -1;
      v7[3] = 1;
      v7[4] = -1;
      v7[5] = 1;
      v7[6] = -1;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 1;
      v13 = -1;
      v14 = 0;
      v15 = 0;
      v16 = 1;
      v17 = 0;
      v18 = 0;
      v19 = 1;
      v20 = 0;
      v21 = -1;
      v22 = -1;
      v23 = 0;
      v24 = 1;
      v25 = 0;
      v26 = 1;
      v27 = -1;
      v28 = 0;
      v29 = -1;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 1;
      v36 = -1;
      v37 = -1;
      v38 = 1;
      v39 = -1;
      v40 = 0;
      v41 = -1;
      v42 = 2;
      v43 = 1;
      v44 = -1;
      v45 = 0;
      v46 = 0;
      v47 = -1;
      v48 = 1;
      v49 = 0;
      memset(v6, 0, 0xC0uLL);
      v6[48] = 0;
      memset(v5, 0, 0xC0uLL);
      v5[48] = 0;
      Step_0((int (*)[7])v7, 7, (int (*)[7])v6);
      Step_1((int (*)[7])v6, 7, (int (*)[7])v5);
      v3 = std::operator>(&_bss_start, "Please help me out!");
      std::ostream::operator>);
      Step_2((int (*)[7])v5);
      system("pause");
      return 0;
    }
基本能猜到是个7*7的迷宫了，看关键的`step_2`
    __int64 __fastcall Step_2(int (*a1)[7])
    {
      int v1; // eax
      __int64 v2; // rax
      __int64 v3; // rax
      __int64 result; // rax
      __int64 v5; // rax
      char v6[35]; // [rsp+10h] [rbp-30h] BYREF
      char v7; // [rsp+33h] [rbp-Dh] BYREF
      int v8; // [rsp+34h] [rbp-Ch]
      int lie; // [rsp+38h] [rbp-8h]
      int hang; // [rsp+3Ch] [rbp-4h]
      hang = 0;
      lie = 0;
      v8 = 0;
      while ( v8 >>(&std::cin, &v7);
        v1 = v8++;
        v6[v1] = v7;
        if ( v7 == 'd' )
        {
          ++lie;
        }
        else if ( v7 > 100 )
        {
          if ( v7 == 's' )
          {
            ++hang;
          }
          else
          {
            if ( v7 != 'w' )
              goto LABEL_14;
            --hang;
          }
        }
        else if ( v7 == 'a' )
        {
          --lie;
        }
        else
        {
    LABEL_14:
          v2 = std::operator>(&_bss_start, "include illegal words.");
          std::ostream::operator>(&_bss_start, "Congratulations!");
        std::ostream::operator>(&_bss_start, "Oh no!,Please try again~~");
        std::ostream::operator2021)?$v1=1:NULL;
       }
       if(is_array(@$a["bar2"])){
           if(count($a["bar2"])!==5 OR !is_array($a["bar2"][0])) die("nope");
           $pos = array_search("nudt", $a["a2"]);
           $pos===false?die("nope"):NULL;
           foreach($a["bar2"] as $key=>$val){
               $val==="nudt"?die("nope"):NULL;
           }
           $v2=1;
       }
    }
    $c=@$_GET['cat'];
    $d=@$_GET['dog'];
    if(@$c[1]){
       if(!strcmp($c[1],$d) && $c[1]!==$d){
           eregi("3|1|c",$d.$c[0])?die("nope"):NULL;
           strpos(($c[0].$d), "cstc2021")?$v3=1:NULL;
       }
    }
    if($v1 && $v2 && $v3)
    {
       include "flag.php";
       echo $flag;
    }
    ?>
主要就是绕过三层，第一层好绕：`bar1=2022a`
，第二层保证bar2有5个元素，并且第一个是数组，也好绕。我们让`bar2=[[1],2,3,4,0]` ，第三层看到 `eregi()`
函数，想到是php5版本，可能存在 %00截断，尝试一下发现可以。。
我们传`?cat[1][]=1&cat[0]=cstc2021&dog=%00`
最后的payload:
`49.232.167.183:30001/?foo={"bar1":"2022a","bar2":[[1\],2,3,4,0]}&cat[1][]=1&dog=%00&cat[0]="cstc2021"`
## Misc
###  RGB
下载附件是`code.txt`，打开发现是RGB数字，之前做过类似的题，直接就是Python脚本转一下图片：
    from PIL import Image
    x = 704
    y = 41
    image = Image.new("RGB",(x,y))
    f = open('code.txt') 
    for i in range(0,x):
        for j in range(0,y):
            l = f.readline()
            r = l.split("#")
            image.putpixel((i,j),(int(r[0]),int(r[1]),int(r[2])))
    image.save('image.jpg')
flag{c1d836d1db9d42dd}
###  zip
下载下来是一个带密码的压缩包，试了一下伪加密不太行，然后就尝试用工具来爆破密码
`fcrackzip -b -c '1a' -l 1-5 -u zip.zip`
爆破出来密码是 `ff123` ，然后解压发现里面有一个加密的doc文件和txt，txt的内容是：
有点像培根加密，拿到在线网站试一下：
密码是`xyj` 成功打开doc文件，是啥诗曰啥的，发现最后一行好像有东西，但是没显示出来，换一下颜色，出来flag: