pass
可以看到
装饰函数的第一个参数，还是被装饰器 func ，这个跟之前一样
而第二个参数 timelimit 写成了位置参数的写法，并且有默认值
再往后，就还是跟原来一样使用了可变参数的写法
不难推断，只要你在装饰函数中第二个参数开始，使用了非可变参数的写法，这些参数就可以做为
装饰器调用时的参数。
4. 签名问题有解决？
我们在自己写装饰器的时候，通常都会顺手加上一个叫 functools.wraps 的装饰器，我想你应该
也经常见过，那他有啥用呢？
先来看一个例子
def wrapper(func):
def inner_function():
pass
return inner_function
@wrapper
def wrapped():
pass
print(wrapped.__name__)
#inner_function
为什么会这样子？不是应该返回 func 吗？
这也不难理解，因为上边执行 func 和下边 decorator(func) 是等价的，所以上面
func.__name__ 是等价于下面 decorator(func).__name__ 的，那当然名字是 inner_function
def wrapper(func):
def inner_function():
pass
return inner_function
def wrapped():
pass
print(wrapper(wrapped).__name__)
#inner_function
目前，我们可以看到当一个函数被装饰器装饰过后，它的签名信息会发生变化（譬如上面看到的函
数名）
那如何避免这种情况的产生？
解决方案就是使用我们前面所说的 functools .wraps 装饰器。
它的作用就是将 被修饰的函数(wrapped) 的一些属性值赋值给 修饰器函数(wrapper) ，最终让属性
的显示更符合我们的直觉。
from functools import wraps
def wrapper(func):
@wraps(func)
def inner_function():
pass
return inner_function
@wrapper
def wrapped():
pass
print(wrapped.__name__)
## wrapped
那么问题就来了，我们使用了 decorator 之后，是否还会存在这种签名的问题呢？
写个例子来验证一下就知道啦
from decorator import decorator
@decorator
def deco(func, *args, **kw):
print("Ready to run task")
func(*args, **kw)
print("Successful to run task")
@deco
def myfunc():
print("Running the task")
print(myfunc.__name__)
输出的结果是 myfunc ，说明 decorator 已经默认帮我们处理了一切可预见的问题。
5. 总结一下
decorator 是一个提高装饰器编码效率的第三方库，它适用于对装饰器原理感到困惑的新手，可
以让你很轻易的写出更符合人类直觉的代码。对于带参数装饰器的定义，是非常复杂的，它需要要
写多层的嵌套函数，并且需要你熟悉各个参数的传递路径，才能保证你写出来的装饰器可以正常使
用。这时候，只要用上 decorator 这个库，你就可以很轻松的写出一个带参数的装饰器。同时你
也不用担心他会出现签名问题，这些它都为你妥善的处理好了。
这么棒的一个库，推荐你使用起来。
7.11 国际化模块，让翻译更优雅
国际化与本地化
国际化 （internationalization），简称 i18n
很多人并不知道，为什么要叫 i18n 呢？怎么谐音都不对。
实际上 18 是指在 ”internationalization” 这个单词中，i 和 n之间有18个字母。
而与之相对的，本地化（localization），简称 L10 n，10 就是指在 ”localization”这个单词中，l 和
n 之间有10个字母
本地化是指使一个国际化的软件为了在某个特定地区使用而进行实际翻译的过程。
国际化的软件具备这样一种能力，当软件被移植到不同的语言及地区时，软件本身不用做内部工程
上的改变或修正。
gettext 模块
gettext 是一套 GNU下的国际化工具。主要有工具：
xgettext: 从源码中抽取字符串，生成po文件(portable object)
msgfmt: 将po文件编译成mo文件(machine object)
gettext: 进行翻译，如果找不到gettext命令，或者找不到msgfmt命令。请重新安装一遍gettext
套件。
很多系统中都内置了 gettext 模块
如果你在 ubuntu系统中，可能需要如下命令进行安装
sudo apt-get install gettext
简单示例演示
首先新建一个目录
$ mkdir -p locale/zh_CN/LC_MESSAGES
然后在这个目录下新建一个 hello.po 文件
msgid "hello world"
msgstr ""
然后执行如下一条命令，将 po 文件翻译成 mo文件
$ msgfmt locale/zh_CN/LC_MESSAGES/hello.po -o locale/zh_CN/LC_MESSAGES/hello.mo
然后在 local 同级目录下进入 Console 模式，就可以使用 _ 进行翻译了，为什么 _ 能这么用，原
因是 zh.install() 这个调用将其绑定到了 Python 内建命名空间中，以便在应用程序的所有模块
中轻松访问它。
>>> import gettext
>>> zh = gettext.translation("hello", "locale", languages=["zh_CN"])
>>> zh.install()
>>> _('hello world')
''
7.12 非常好用的调度模块
Python 自带一个调度器模块 sched ，它能为你实现优先级队列/延迟队列和定时队列。
这个模块的使用非常简单，首先以延迟队列为例：
import sched
def do_work(name):
print(f'{name}')
sch = sched.scheduler()
sch.enter(5, 1, do_work, argument=('iswbm', ))
sch.run()
代码运行以后，会卡在 sch.run() 这里，5秒钟以后执行 do_work('iswbm') ，运行效果如下图所
示：
其中， sch.enter() 的第一个参数为延迟的时间，单位为秒，第二个参数为优先级，数字越小优先
级越高。当两个任务同时要执行时，优先级高的先执行。但需要注意的是，如果你这样写：
import sched
def do_work(name):
print(f'{name}')
sch = sched.scheduler()
sch.enter(5, 2, do_work, argument=('python', ))
sch.enter(5, 1, do_work, argument=('iswbm', ))
sch.run()
那么先打印出来的是 python
为什么这里优先级失效了？1的优先级大于2，应该先运行下面的才对啊。
这是由于，只有当两个任务同时运行的时候，才会去检查优先级。如果两个任务触发的时间一前一
后，那么还轮不到比较优先级。由于延迟队列的  是相对于当前运行这一行代码的时间来计算
的，后一行代码比前一行代码晚了几毫秒，所以实际上产品经理这一行会先到时间，所以就会先运
行。
为了使用绝对的精确时间，我们可以使用另外一个方法：
import sched
import time
import datetime
def do_work(name):
print(f'{name}')
sch = sched.scheduler(time.time, time.sleep)
start_time = datetime.datetime.now() + datetime.timedelta(seconds=10)
start_time_ts = start_time.timestamp()
sch.enterabs(start_time_ts, 2, do_work, argument=('python', ))
sch.enterabs(start_time_ts, 1, do_work, argument=('iswbm', ))
sch.run()
运行效果如下图所示：
sch.enterabs() 的第一个参数是任务开始时间的时间戳，这是一个绝对时间，这个时间可以使用
datetime模块来生成，或者其他你熟悉的方式。后面的参数和 sch.enter() 完全一样。
如果你要运行的函数带有多个参数或者默认参数，那么可以使用下面的方式传入参数：
import sched
import time
import datetime
def do_work(name, place, work=''):
print(f'{name}{place}{work}')
sch = sched.scheduler(time.time, time.sleep)
start_time = datetime.datetime.now() + datetime.timedelta(seconds=10)
start_time_ts = start_time.timestamp()
sch.enter(5, 2, do_work, argument=('', ''), kwargs={'work': ''})
sch.enterabs(start_time_ts, 1, do_work, argument=('', ''), kwargs={'
work': ''})
sch.run()
argument参数对应的元组存放普通参数，kwargs对应的字典存放带参数名的参数。
本文来源于：公众号"未闻Code"，作者：kingname
7.13 实现字典的点式操作
字典是 Python 中基础的数据结构之一，字典的使用，可以说是非常的简单粗暴，但即便是这样一
个与世无争的数据结构，仍然有很多人 "用不惯它" 。
也许你并不觉得，但我相信，你看了这篇文章后，一定会和我一样，对原生字典开始有了偏见。
我举个简单的例子吧
当你想访问字典中的某个 key 时，你需要使用字典特定的访问方式，而这种方式需要你键入 一对
中括号 还有 一对引号
>>> profile = dict(name="iswbm")
>>> profile
{'name': 'iswbm'}
>>> profile["name"]
'iswbm'
是不是开始觉得忍无可忍了？
如果可以像调用对象属性一样使用 . 去访问 key 就好了，可以省去很多多余的键盘击入，就像这
样子
>>> profile.name
'iswbm'
是的，今天这篇文章就是跟大家分享一种可以直接使用 . 访问和操作字典的一个黑魔法库 --
munch 。
1. 安装方法
使用如下命令进行安装
$ python -m pip install munch
2. 简单示例
munch 有一个 Munch 类，它继承自原生字典，使用 isinstance 可以验证
>>> from munch import Munch
>>> profile = Munch()
>>> isinstance(profile, dict)
True
>>>
并实现了点式赋值与访问， profile.name 与 profile['name'] 是等价的
>>> profile.name = "iswbm"
>>> profile.age = 18
>>> profile
Munch({'name': 'iswbm', 'age': 18})
>>>
>>> profile.name
'iswbm'
>>> profile["name"]
'iswbm'
3. 兼容字典的所有操作
本身 Munch 继承自 dict，dict 的操作也同样适用于 Munch 对象，不妨再来验证下
首先是：增删改查
## 
>>> profile["gender"] = "male"
>>> profile
Munch({'name': 'iswbm', 'age': 18, 'gender': 'male'})
## 
>>> profile["gender"] = "female"
>>> profile
Munch({'name': 'iswbm', 'age': 18, 'gender': 'female'})
## 
>>> profile.pop("gender")
'female'
>>> profile
Munch({'name': 'iswbm', 'age': 18})
>>>
>>> del profile["age"]
>>> profile
Munch({'name': 'iswbm'})
再者是：一些常用方法
>>> profile.keys()
dict_keys(['name'])
>>>
>>> profile.values()
dict_values(['iswbm'])
>>>
>>> profile.get('name')
'iswbm'
>>> profile.setdefault('gender', 'male')
'male'
>>> profile
Munch({'name': 'iswbm', 'gender': 'male'})
4. 设置返回默认值
当访问一个字典中不存在的 key 时，会报 KeyError 的错误
>>> profile = {}
>>> profile["name"]
Traceback (most recent call last):
File "", line 1, in 
KeyError: 'name'
对于这种情况，通常我们会使用 get 来规避
>>> profile = {}
>>> profile.get("name", "undefined")
'undefined'
当然你在 munch 中仍然可以这么用，不过还有一种更好的方法：使用 DefaultMunch，它会在你访
问不存在的 key 时，给你返回一个设定好的默认值
>>> from munch import DefaultMunch
>>> profile = DefaultMunch("undefined", {"name": "iswbm"})
>>> profile
DefaultMunch('undefined', {'name': 'iswbm'})
>>> profile.age
'undefined'
>>> profile
DefaultMunch('undefined', {'name': 'iswbm'})
5. 工厂函数自动创建key
上面使用 DefaultMunch 仅当你访问不存在的 key 是返回一个默认值，但这个行为并不会修改原
munch 对象的任何内容。
若你想访问不存在的 key 时，自动触发给原 munch 中新增你想要访问的 key ，并为其设置一个默
认值，可以试一下 DefaultFactoryMunch 传入一个工厂函数。
>>> from munch import DefaultFactoryMunch
>>> profile = DefaultFactoryMunch(list, name='iswbm')
>>> profile
DefaultFactoryMunch(list, {'name': 'iswbm'})
>>>
>>> profile.brothers
[]
>>> profile
DefaultFactoryMunch(list, {'name': 'iswbm', 'brothers': []})
6. 序列化的支持
Munch 支持序列化为 JSON 或者 YAML 格式的字符串对象
转换成 JSON
>>> from munch import Munch
>>> munch_obj = Munch(foo=Munch(lol=True), bar=100, msg='hello')
>>>
>>> import json
>>> json.dumps(munch_obj)
'{"foo": {"lol": true}, "bar": 100, "msg": "hello"}'
转换成 YAML
>>> from munch import Munch
>>> munch_obj = Munch(foo=Munch(lol=True), bar=100, msg='hello')
>>> import yaml
>>> yaml.dump(munch_obj)
'!munch.Munch\nbar: 100\nfoo: !munch.Munch\n lol: true\nmsg: hello\n'
>>>
>>> print(yaml.dump(munch_obj))
!munch.Munch
bar: 100
foo: !munch.Munch
lol: true
msg: hello
>>>
建议使用 safe_dump 去掉 !munch.Munch
>>> print(yaml.safe_dump(munch_obj))
bar: 100
foo:
lol: true
msg: hello
7. 说说局限性
以上就是关于 munch 的使用全解，munch 的进一步封装使得数据的访问及操作更得更加 Pythonic
，替换原生字典在大部分场景下都不会有太大问题。
但同时也不得不承认，munch 在一些场景下无法达到原生字典的效果，比如我想字典里的 key 为
"1.2" 的时候，原生字典能很好的表示它。
>>> dict_obj = {"1.2": "hello"}
>>> dict_obj["1.2"]
'hello'
切换到 munch ，你会发现无法在初始化 munch 对象的时候，传入 1.2 的 key
>>> from munch import Munch
>>> dict_obj = Munch(1.2="hello")
File "", line 1
dict_obj = Munch(1.2="hello")
^
SyntaxError: expression cannot contain assignment, perhaps you meant "=="?
就算你用原生的字典的方式添加了这个 key-value，也根本无法使用 . 的方式取到 1.2 对应的
value。
>>> from munch import Munch
>>> dict_obj = Munch()
>>> dict_obj["1.2"]="hello"
>>> dict_obj
Munch({'1.2': 'hello'})
>>> dict_obj.1.2
File "", line 1
dict_obj.1.2
^
SyntaxError: invalid syntax
也正是因为这样，原生字典至今还是不可替代的存在。
赞赏作者
原创不易，请个咖啡，交个朋友