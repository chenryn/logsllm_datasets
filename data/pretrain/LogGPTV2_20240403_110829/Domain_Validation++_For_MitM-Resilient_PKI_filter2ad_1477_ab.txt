efficient, automated, fits within the existing business model) while
providing resilience even against MitM attackers. We discuss how
DV++ can be useful also in other settings where mechanisms rely
on correct and secure DNS functionality. We make the code of DV
publicly available.
Organisation
In Section 2 we discuss the CAs ecosystem and explain which
CAs we focus on in this work. In Section 3 we present the different
modules in our attack and then show how to apply them to trick CAs
to issue certificates for domains that the applicant does not own. We
also survey the attack surface of domains that are potential victims.
We provide recommendations and discuss their impact on clients.
In Section 4 we propose DV++, and provide its implementation
and experimental evaluations. In Section 5 we review related work.
Finally, in Section 6 we conclude this work. Appendix, Section A
provides background on DNS and PKI.
2 DV-SUPPORTING CA LIST
2.1 Selecting CAs
Although there are 122 root CAs, the 51 DV supporting CAs control
more than 99% of certificates market share2,3. The other CAs are
resellers which use root CAs, device based CAs, e.g., for ID card
or hardware, or country-specific CAs, which accept only specific
country code for issuing certificates.
In our study we focus on CAs supporting DV, with which we
could register and issue certificates. We list them in Figure 1. Root
certificate programs can be extracted from the browsers and the
Operating Systems (OS). We extracted CAs from the following OS:
Internet Explorer with Windows, Apple with OS X/iOS, Mozilla
with Linux.
2.2 Issuing Certificates
To issue a certificate an applicant should fill out a form called Cer-
tificate Signing Request (CSR) on CAs websites. The CSR contains
information that is included in the certificate, such as organisation
name, domain name, country, public key and more. A CA then uses
the submitted CSR to authenticate the domain ownership by the
applicant and subsequently to issue the certificate. When submit-
ting the CSR the applicant should also specify which DV method
it would like the CA to use for authenticating ownership of the
domain. In what follows we describe the DV procedures that are
supported by the CAs.
2.3 DV Methods
There are a number of methods for performing DV. We list them
in Figure 1. Some CAs support more than one DV method. When
a CA supports more than one method, the applicant can specify
which method it wishes to use. All the methods rely on DNS, and
can be subverted via DNS cache poisoning. We summarise which
CA supports what DV methods in Figure 1, and below explain how
the validation is performed:
2.3.1 Email-Based DV. Upon filling out a CSR an email is issued
to the administrative contact of the domain selected by the appli-
cant out of email addresses registered for that domain in Whois.
The email typically contains validation code and link, which the
recipient has to click and enter the code to prove control over the
domain. If the correct code is entered the code proceeds with the
certificate issuance.
2.3.2 WHOIS-Based DV. Similar to email-based DV, except that
the client cannot select which email (out of those registered as
administrative for the domain) will be used in the validation. During
the DV procedure the CA selects itself the email address and can
use any Admin, Registrant, Tech or Zone contact email address that
appears in the domain’s WHOIS record.
2https://w3techs.com/technologies/overview/ssl_certificate/all
3https://www.netcraft.com/internet-data-mining/ssl-survey/
Session 10C: TLS 2CCS’18, October 15-19, 2018, Toronto, ON, Canada20622.3.3 DNS-Based DV. Upon submitting a CSR, a hash value
is provided which has to be entered as a DNS CNAME Resource
Record (RR) for the domain in the zonefile. For example, assume that
applicant’s domain is vict.im and CAs domain is ca-domain.com.
The CNAME record would be:
hash1.www.vict.im. CNAME hash2.ca-domain.com.
The DNS resolver of the CA queries the domain of the applicant
and checks the presence of the CNAME record. If the correct record
is present, the CA proceeds to issue the requested certificate.
2.3.4 HTTP/S-Based DV. Upon the submission of a CSR, a hash
value is returned to the client. A file should be created and placed
at the root of the web server with the hash value as its name, as
follows: http://www.vict.im/hash-value1.txt.
The content of the file should contain hash-value2 and the
domain ca-domain.com.
The CA makes an HTTP/HTTPS request to retrieve the file. If
correct, the CA proceeds to issue the certificate.
caching DNS resolver of the CA. Finally, we explain how to con-
struct the records in the spoofed DNS response, so that they are
cached by the receiving caching resolver. We then present the at-
tack and provide a measurement study of the CAs and the potential
victim domains (from popular Alexa www.alexa.com domains) to
estimate the number of clients and servers in the Internet vulnerable
to our attack.
3.1 Triggering DNS Request
To initiate our study of cache poisoning vulnerabilities in CAs we
need to trigger a DNS request from the victim DNS caching resolver
to our nameservers. The problem is that the resolvers are configured
not to respond to external requests, and since we are not on the
network of the CA triggering a DNS request from the outside is a
challenge. We trigger a query indirectly. To trigger a DNS request
we upload a CSR – this initiates the DV procedure against the target
domain (which we provide in the CSR). The “target domain” is the
victim domain whose records the attacker wishes to poison in CA’s
DNS resolver. As a target domain in this work we use vict.im.
In the rest of this section, our study and attacks are performed
in a black-box manner, using the requests that are sent from the
caching DNS resolver of the CA to our nameservers. In response to
the DNS request of the caching resolver we generate responses that
cause the resolver to follow-up with DNS requests. This is achieved
with, e.g., referral type responses, as well with responses with
CNAME records. These interactions allow us to characterise the
caches, identify vulnerabilities and eventually launch the attacks.
Figure 1: List of CAs and the supported DV methods.
3 OFF-PATH ATTACKS AGAINST DV
In this section we show that an off-path attacker can impersonate a
victim domain to a CA and cause the CA to issue a spoofed (fraud-
ulent) certificate binding the public key of an off-path attacker to a
victim domain. The main ingredient in impersonating a victim do-
main is a DNS cache poisoning attack against a caching resolver of
the CA. During the attack we inject a spoofed DNS record mapping
the CA to an attacker controlled email and DNS server. As a result
the DV process is performed against the attacker-controlled host,
to which the attacker can respond, impersonating a victim domain.
The attack consists of a number of components. First we show
how to cause the victim CA to issue a DNS request to the name-
server controlled by the attacker. Next we show how to match
the challenge response authentication parameters in the spoofed
DNS response, such that the response is accepted by the receiving
Figure 2: Defragmentation cache poisoning for subverting
DV.
3.2 Defragmentation Cache Poisoning
The goal of our attacker is to spoof a DNS response packet from the
nameserver to the CA’s DNS resolver, which the resolver accepts
as valid.
Once a DNS request is issued the time window for DNS cache poi-
soning attack is initiated. The window ends either when a timeout
event happens or when a correct response arrives. To craft a correct
response, the attacker has to guess the challenge-response authen-
tication parameters in the DNS request. These are different values,
most notably, source port and DNS Transaction Identifier (TXID),
Session 10C: TLS 2CCS’18, October 15-19, 2018, Toronto, ON, Canada2063which are randomised by the DNS resolver in the request, and are
validated in the response [RFC5452]; we provide background on
DNS and security against cache poisoning in Appendix, Section A.
Figure 3 illustrates a structure of a DNS request from DNS resolver
at IP address 7.7.7.7 to a nameserver at IP address 2.2.2.2 sent from
UDP source port 12345 and with TXID of 76543.
Figure 3: DNS request packet from DNS resolver at 7.7.7.7 to
a nameserver at 7.7.7.7
Since source port and TXID are both 16 bits, they generate to-
gether a range of 232 possible values. This is a lot of entropy hence
it seems to make DNS robust to off-path attacks. Specifically, the
attacker must spoof DNS responses with the correct source port
and TXID which is about 232 bits of entropy. In this section we
show that this is not the case. We show how an off-path attacker
can hijack the communication between the resolver and the name-
server. The key ingredient is overlapping IPv4 packet fragments.
Our attacker does not attempt to guess the source port and TXID.
Instead we use IPv4 packet fragmentation to overwrite the relevant
fields in a real DNS response from the nameserver, with malicious
values. In what follows, we explain fragmentation and Maximum
Transmission Unit (MTU), we discuss how to force a server to send
a fragmented response, and then describe how to combine these
for attacking a defragmentation cache to inject a spoofed record
into the caching DNS resolver of the CA.
3.2.1 Maximum Transmission Unit. The Maximum Transmis-
sion Unit (MTU) is the largest number of bytes that can be transmit-
ted over a link in one datagram. The Path MTU between two end
points is limited by the lowest MTU on the path [RFC791]. When
packets exceed the path MTU, they will not be received at the des-
tination. To cope with this, the Internet Protocol (IP) provides the
possibility to fragment packets into smaller fragmented packets.
Most networks support currently MTU of 1492 bytes [RFC2516].
According to [RFC791] the minimum MTU in the Internet is 68
bytes. The DNS responses typically do not exceed 1500 bytes, unless
they contain a cryptographic material due to the use of DNSSEC
[RFC4033-RFC4035]. Hence, most DNS responses would not frag-
ment.
The idea of the attack is that the attacker “convinces” the name-
server to fragment responses to a specific destination. As a result,
the nameserver responds with a fragmented packet, such that the
second fragment contains either the additional or also the authority
Figure 4: CDF of the packets’ sizes in response to an ICMP
fragmentation needed error message for servers that re-
duced their responses sizes.
sections of a DNS response; see Appendix A for details on DNS
packet structure.
3.2.2
ICMP Fragmentation Needed. To reduce fragmentation
load on the routers, [RFC1191] proposes a mechanism to discover
the MTU between two hosts. To do so, hosts make use of the Do
Not Fragment (DF) bit in the IP header to instruct the routers along
the path to not fragment the packet in case the packet exceeds the
MTU of the next hop. Instead, intermediate hosts will discard the
packet and issue an ICMP Destination Unreachable error message
(type 3) to the originator with the code Fragmentation Needed and
DF set (code 4). The information in the ICMP error message is stored
by the receiving OS, e.g., 10 minutes by default on Linux 3.13. The
ICMP error message can be originated by any Internet node on the
path between the sender and the receiver and the receiver of the
ICMP error message is not expected to know the IP addresses of the
nodes on the path. Hence, we use an off-path attacker to issue an
ICMP fragmentation needed packet to the nameserver, indicating
that it should reduce the MTU when sending packets to the victim
resolver.
We measured the fraction of servers among 5K-top Alexa that
reduce the MTU size following ICMP fragmentation needed packet:
33, 4% of the servers reduce the packet size up to 296 bytes, and
11% reduce the fragment size to below 296 bytes. Figure 4 shows
the CDF of packet sizes that were received in response to an ICMP
fragmentation needed packet. While less than 15% of servers reduce
their packet size below 296 bytes, almost 80% of servers are willing
to reduce the packet size below 600 bytes (the two steps in Figure
4 represent 552 bytes, which is the default minimal value in the
Linux kernel and 576, which is the suggested minimum MTU by
the RFC).
The spoofed ICMP error message does not need to be sent from a
spoofed source IP address - ICMP error message can originate from
any node on the path. In contrast to ICMP with TCP headers, the
OSes typically do not apply any checks on the received ICMP error
Session 10C: TLS 2CCS’18, October 15-19, 2018, Toronto, ON, Canada2064messages with UDP headers, e.g., Linux 3.13. This is due to the fact
that UDP is stateless. Hence, crafting a spoofed ICMP fragmentation
needed error message is a simple task.
Figure 5 shows an example ICMP fragmentation needed error
sent by an attacker at IP 6.6.6.6 to nameserver at IP 2.2.2.2 telling
the nameserver to reduce the MTU to 100 bytes for all packets
it sends to the DNS resolver at 7.7.7.7. The payload of the ICMP
packet is the IP header and the first eight bytes of the original
packet (that triggered the ICMP error message). The nameserver
stores this information and uses it for limiting the size of IP packets
to destination IP (7.7.7.7) and protocol (UDP).
Figure 5: ICMP fragmentation needed packet from attacker
at 6.6.6.6 to nameserver at 2.2.2.2 indicating an MTU of 100
bytes for resolver at 7.7.7.7.
3.2.3
IPv4 Fragmentation and Reassembly. Upon arrival to the
receiver the fragments of an IP packet are stored in an IP defrag-
mentation cache, by default for 30 seconds. The receiver uses the IP
ID value in the fragments to identify all the fragments of the same
original IP packet (they all have the same IP ID value). Then uses
the offset field to reassemble their payload together. The receiver
knows that all the fragments of the original IP packet have arrived
by checking that the fragment with the lowest offset has a More
Fragments (MF) value of zero.
Figure 6: Malicious second fragment sent by attacker at
6.6.6.6 from a spoofed IP address 2.2.2.2 to the DNS resolver
at 7.7.7.7, assuming MTU of 68 bytes.
Figure 7: First fragment sent by the nameserver at 2.2.2.2 to
the DNS resolver at 7.7.7.7, assuming MTU of 68 bytes.
3.2.4 Exploiting Fragmentation for Defrag. Cache Poisoning. In
this section we show how we exploit fragmentation for injecting a
spoofed payload into a DNS response from the real nameserver. For
our attack we exploit fragmentation, and trick the receiving resolver
into reassembling the first fragment from the real response from the
nameserver with the second fragment generated by the attacker.
This allows us to bypass the challenge-response authentication
fields used by the DNS resolvers, since they are echoed by the
nameserver in the first fragment. In Section 3.2.2 we showed how we
ensure that the response from the target nameserver is fragmented.
Assume that the attacker wishes to impersonate vict.im, and
get a certificate for vict.im with a mapping to an attacker con-
trolled IP address. The attack is initiated with an off-line prepro-
cessing phase, during which the attacker needs to perform a mea-
surement and a calculation, which it will use to set the values in
the ICMP fragmentation needed error message in step (4) (Figure 2)
and based on which it will construct the spoofed second fragment
in step (1) (Figure 2). The attacker measures the responses’ sizes