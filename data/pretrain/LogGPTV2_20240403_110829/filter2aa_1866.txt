# Esoteric Exfiltration
## Willa Riggins

### Who Am I?
Hello, everyone. If you're wondering who I am, here's a brief overview:
- **Senior Penetration Tester** at Veracode
- **FamiLAB Member**
- **DC407 Point of Contact**
- **OWASP Orlando Marketing Coordinator**
- **BSides Orlando Social Media Manager**
- Follow me on Twitter: @willasaywhat

### Exfiltration 101
#### What Is It?
"Data exfiltration is the unauthorized transfer of sensitive information from a targetâ€™s network to a location controlled by a threat actor." - Trend Micro

#### Why Should You Care?
- Data loss can be costly in terms of time, money, and peace of mind.
- Have you ever found a credential dump on Pastebin?
- If you didn't care about this topic, you wouldn't be here.

According to a 2012 survey from /r/netsec, 82% of respondents stated that preventing exfiltration was important for the security of their information systems.

### Covert Channels & Where to Find Them
- **Mask Traffic with Normal Usage Patterns:**
  - Social media
  - Web traffic
  - Protocols used for day-to-day business
- **Hide Data in Known 'Safe' Payloads:**
  - Status updates
  - HTTP POST payloads
- **Stay Quiet, Within Normal Payload Sizes:**
  - Throttle exfiltration chunks
  - Set payload sizes based on the channel used
  - Encode and/or encrypt chunks

### Esoteric Exfiltration
#### Transport: Change the Channel
- **Network Protocols**
- **Third-Party Drops**
- **To the Airwaves**

#### Network Protocols: Data on the Wire
- **The Obvious:**
  - HTTP
  - SSH
  - Netcat
  - DNS
- **The Discreet:**
  - Using normal protocols in abnormal ways

#### Third-Party Drops: Hide Yo Data
- **The Obvious:**
  - Dropbox
  - OneDrive
  - Google Drive
  - Pastebin
- **The Discreet:**
  - Flickr
  - Imgur
  - Twitter
  - Facebook

#### To the Airwaves: Breaking Layer One
- **The Obvious:**
  - Wi-Fi adapter on a Raspberry Pi
- **The Discreet:**
  - XBee 900MHz long-range mesh network
  - Over Ham Radio (APRS) with repeaters
  - Lasers

### Blue Team Says What? Defenses & Detection
- Block endpoints by URI/IP
- Block egress at the firewall by port/protocol
- Detect anomalies in payload size and frequency
- Block USB devices by class or device ID (USB serial)

### Offensive Maneuvers
- Blacklists are ineffective
- Disrupting normal business operations
- Context is critical but difficult to automate
- Blocking USB device IDs is challenging

### Weaponizing Squirrels
#### Squirrel: Exfiltration for Nuts
- **Python 2.7-based application**
- **Open Source; MIT License**
- **Extensible via simple module-based plugins**
- **Upload and execute with CLI arguments**

Example usage:
```bash
willasaywhat:~/workspace (master) $ python -m squirrel
usage: python -m squirrel [-h] [-c CHANNEL] [-r RECV] [-f FILENAME]
                          [-s SETTINGS] [-v]
Squirrel: Exfiltration for Nuts
optional arguments:
  -h, --help            show this help message and exit
  -c CHANNEL, --channel CHANNEL
                        selects the channel to use
  -r RECV, --recv RECV  tells squirrel to retrieve nuts
  -f FILENAME, --filename FILENAME
                        selects the file to exfiltrate
  -s SETTINGS, --settings SETTINGS
                        sets the settings dictionary for the channel. ex: -s
                        '{"client_id": "value", "client_secret": "value"}'
  -v, --verbosity       increase output velocity
```

#### Module Overview
Squirrels steal nuts, get it?

```python
from abc import ABCMeta, abstractmethod, abstractproperty

class Channel(object):
    __metaclass__ = ABCMeta
    _name = "Sample Channel Name"
    _description = "Sample Channel Description"
    _settings = {}
    _chunkSize = 0  # Size in bytes of the max chunk per send/recv

    def name(self):
        return self._name

    def description(self):
        return self._description

    def chunk_size(self):
        return self._chunkSize

    def __init__(self):
        pass

    @abstractmethod
    def send(self, chunks):
        pass

    @abstractmethod
    def recv(self):
        pass

    def get_settings(self):
        return self._settings

    def set_settings(self, value):
        self._settings = value

    _settings = abstractproperty(get_settings, set_settings)
```

[GitHub Repository](https://github.com/willasaywhat/squirrel)

### Closing Remarks
#### Future Work
- Additional Squirrel Modules:
  - Facebook Attachments, Flickr, FTP, SFTP, Telnet, Netcat, etc.
- Executable payload generation with PyInstaller (Msfvenom style payloads)
- Metasploit Post Module
- Longer range hardware, more nodes, less physical space using Teensy
- Integrate Cloakify DLP avoidance ciphers
- Customizable timing of send/recv

### Shoutouts
Thank you, okay? Cool. <3