### Table 2: Client and Server Running Time for Shamir Secret Sharing/Reconstruction and PRG Expansion

| Dropout Rate | Client Time (s) | Server Time (s) |
|--------------|-----------------|-----------------|
| 0.01679      | 0.0200          | 0.0342          |
| 30%          | 0.039           | 0.0467          |
| 0.0756       |                 |                 |

**Description:**
- **Setting:** γ = 1/20, δ = 1/3, σ = 40, η = 30, and a semi-honest server.
- **Security:** The number of neighbors providing security is approximately 100 for all values of n considered.
- **Client Parallelization:** No parallelization is assumed at the client, so all pairwise masks are computed sequentially.
- **Server Cost per Client:** The cost per client for the server is two orders of magnitude smaller than the client cost. This is because the client has to expand k ≈ 100 seeds in this setting, while the server only needs to obtain one self-mask per client.
- **Fixed Parameter:** l = 10^5 to ease comparison with experimental results in Bonawitz et al. [8]. Costs can be extrapolated linearly with respect to l.

### Figure 3: Values of α as the Number of Neighbors Increases for n = 10,000

[Insert Figure 3 here]

### Algorithm 2: Abstract Summation Protocol

**Parties:**
- Clients 1, ..., n
- Server

**Public Parameters:**
- Vector length l
- Input domain Xl
- Pseudorandom Generator (PRG) F: {0, 1}λ → Xl

**Input:**
- (cid:174)xi ∈ Xl (by each client i)

**Output:**
- z ∈ X (for the server)

**Notations:**
- A1, A2, A′1, A′2, A3: Sets of clients that reach certain points without dropping out.
- A1: Clients who finish step 3.
- A2: Clients who finish step 5.
- A3: Clients who finish step 7.
- A′1: Clients for which the server sees they have completed step 3 on time.
- A′2: Clients for which the server sees they have completed step 5 on time.
- A′3: Clients for which the server sees they have completed step 7 on time.

**Steps:**

1. **Graph Generation:**
   - The server runs (G, t, k) = GenerateGraph(n), where G is a regular degree-k undirected graph with n nodes.
   - NG(i) denotes the set of k nodes adjacent to i (its neighbors).

2. **Key Generation:**
   - Each client i generates key pairs (sk1i, pk1i) and (sk2i, pk2i).
   - Sends (pk1i, pk2i) to the server, who forwards the message to NG(i).

3. **Share Generation:**
   - Each client i:
     - Generates a random PRG seed bi.
     - Computes two sets of shares: H b i = {hb i,1, ..., hb i,k} = ShamirSS(t, k, bi) and H s i = {hs i,1, ..., hs i,k} = ShamirSS(t, k, sk1i).
     - Sends to the server a message m = (j, ci, j), where ci, j = Eauth.Enc(ki, j, (i || j || hb i, j || hs i, j)) encrypted under ki, j = KA.Agree(sk2i, pk2j).

4. **Server Abort Check:**
   - The server aborts if |A′1| < (1 − δ)n and otherwise forwards all messages (j, ci, j) to client j, who deduces A′1 ∩ NG(j).

5. **Masked Input Computation:**
   - Each client i:
     - Computes a shared random PRG seed si, j as si, j = KA.Agree(sk1i, pk1j).
     - Sends to the server their masked input (cid:174)yi = (cid:174)xi + (cid:174)ri − (cid:174)mi, j + (cid:174)mi, j, where (cid:174)ri = F(bi) and (cid:174)mi, j = F(si, j).

6. **Server Collection and Abort Check:**
   - The server collects masked inputs for a determined time period. It aborts if |A′2| < (1 − δ)n and otherwise sends (A′2) ∩ NG(i) to every client i ∈ A′2.

7. **Client Response:**
   - Each client j receives (R1, R2) from the server and sends {(i, hb i, j)}i∈R1 ∪ {(i, hs i, j)}i∈R2, obtained by decrypting the ciphertext ci, j received in Step 3.

8. **Final Server Checks and Output:**
   - The server aborts if |A′3| < (1 − δ)n and otherwise:
     - Collects, for each client i ∈ A′2, the set Bi of all shares in H b i sent by clients in A3. Aborts if |Bi| < t and recovers bi and (cid:174)ri otherwise using the t shares received which came from the lowest client IDs.
     - Collects, for each client i ∈ (A1 \ A′2), the set Si of all shares in H s i sent by clients in A3. Aborts if |Si| < t and recovers sk1i and (cid:174)mi, j otherwise.
   - Outputs i∈A′2 (cid:174)xi as the final result.

### Algorithm 3: Summation Protocol in the Malicious Setting

**Parties:**
- Clients 1, ..., n
- Server

**Public Parameters:**
- Vector length l
- Input domain Xl
- Pseudorandom Generator (PRG) F: {0, 1}λ → Xl

**Input:**
- (cid:174)xi ∈ Xl (by each client i)

**Output:**
- z ∈ X (for the server)

**Notations:**
- A1, A2, A3, A4: Sets of clients that send messages at the end of steps 6, 8, 11, and 13 of the protocol respectively.
- A′i: Clients whose messages reach the server on time.
- [n] ⊇ A1, Ai ⊇ A′i, Ai ⊇ Ai+1, and A′i ⊇ A′i+1.

**Part I: Public Key Commitments**
- **Step 1:** Each client i generates key pairs K1i = (sk1i, pk1i) and K2i = (sk2i, pk2i).
- **Step 2:** The server commits to both vectors of public keys pk1 = (pk1i)i and pk2 = (pk2i)i by means of a Merkle tree.

**Part II: Distributed Graph Generation**
- **Step 3:** Each client i selects k neighbors randomly by sampling without replacement k times from the set of all clients [n], and sends the resulting set N•→(i) to the server.
- **Step 4:** The server sends (N•←(i), (j, pk1j, pk2j)j∈N(i)) to client i ∈ [n], together with |N(i)| log2(n) hashes for the Merkle tree verification.
- **Step 5:** Each client i aborts if the server is sending her more than 3k + k public keys. Otherwise, she verifies that the public keys sent by the server are consistent with the Merkle tree root and that she has been given the public keys of everyone in N•→(i), and aborts otherwise.

**Part III: Masks Generation and Secret Sharing**
- **Step 6:** Each client i:
  - Generates a random PRG seed bi.
  - Computes two sets of shares H b i = {hb i,1, ..., hb i,k} = ShamirSS(t, k, bi) and H s i = {hs i,1, ..., hs i,k} = ShamirSS(t, k, sk1i).
  - Sends to the server messages mj = (j, ci, j), where ci, j = Eauth.Enc(ki, j, (i || j || hb i, j || hs i, j)) encrypted under ki, j = KA.Agree(sk2i, pk2j).
- **Step 7:** The server aborts if |A′1| < (1 − δ)n, and otherwise forwards all messages (j, ci, j) to client j. This defines a set A2, j ⊆ N(j) of clients i from which client j received (j, ci, j).
- **Step 8:** Each client i:
  - Decrypts all the ciphertexts received, and aborts if decryption fails.
  - Computes a shared random PRG seed si, j as si, j = KA.Agree(sk1i, pk1j).
  - Computes (cid:174)ri = F(bi) and (cid:174)mi, j = F(si, j) and computes their masked input (cid:174)yi = (cid:174)xi + (cid:174)ri − j∈A2,i (cid:174)mi, j + j∈A2,i (cid:174)mi, j.
  - Signs the message mi, j = ("included" || i || j) with sk2i to obtain a signature σ incl i, j.
  - Sends ((cid:174)yi, (mi, j, σ incl i, j)j∈A2,i) to the server.

**Part IV: Unmasking**
- **Step 9:** If |A′2| < (1 − δ)n, it aborts, and otherwise sends (A′2 ∩ N•←(i), (A1 \ A′2) ∩ N•←(i)) and all messages/signatures (mj,i, σ incl j,i) to every i ∈ A′2. This defines two sets Ab3,i, As3,i.
- **Step 10:** Each client checks that Ab3,i ∩ As3,i = ∅, Ab3,i, As3,i ⊆ N•←(i) ∩ A2,i, and that all signatures σ incl i,j are valid for j ∈ Ab3,i.
- **Step 11:** Each client i, for every j ∈ Ab3,i ⊆ N•←(i), signs a message mi, j = ("ack" || i || j) using sk2i, and sends the signature (mi, j, σ ack i, j) to the server.
- **Step 12:** The server aborts if |A′3| < (1 − δ)n, and otherwise forwards all messages (j, mi, j, σi, j) to client j.
- **Step 13:** Each client collects all messages and signatures, and checks that all the signatures are valid using pk2i. Once client j receives p such valid signatures from parties in N•→(j), she sends {(i, hb i, j)}i∈Ab3, j ∪ {(i, hs i, j)}i∈As3, j to the server.
- **Step 14:** The server aborts if |A′4| < (1 − δ)n, and otherwise:
  - Collects, for each i ∈ A′2, the set Bi of all shares in H b i sent by clients in A′4. Aborts if |Bi| < t and otherwise recovers bi and (cid:174)ri using the t shares received which came from the lowest client IDs.
  - Collects, for each i ∈ A1 \ A′2, the set Si of all shares in H s i sent by clients in A′4. Aborts if |Si| < t and recovers sk1i and (cid:174)mi, j otherwise.
- **Output:**
  - (cid:32)(cid:174)yi − (cid:174)ri + j∈N(i)∩(A1\A′2) (cid:174)mi, j − j∈N(i)∩(A1\A′2) (cid:174)mi, j(cid:33) for i ∈ A′2.

---

This optimized version aims to make the text clearer, more coherent, and professionally formatted.