the excess can be ignored.  Case recombination is thus not 
injective, but this is not a problem since case is irrelevant 
to duplicate determination. 
3.3.  Encoding to exclude specific characters 
Excluding specific characters (e.g. ‘/’) is more involved 
than it might seem.  One approach is to encode the string 
using  a  coding  table  that  includes  only  legal  characters.  
However,  since  the  count  of  legal  characters  is  not  a 
power  of  two,  fixed-bit-width  encoding  is  not  surjective.  
If  we  correct  this  by  multiply  encoding  some  of  the 
characters, we destroy inverse injectivity. 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:31:41 UTC from IEEE Xplore.  Restrictions apply. 
Prefix  coding  [14]  (e.g.  Huffman  coding)  presents  a 
promising  avenue,  but  it  is  not  surjective:    It  is  not 
possible  to  determine  whether  an  encrypted  string  ends 
with  a  complete  character  code.    If  upon  decoding  we 
either  discard  or  arbitrarily  complete  any  partial  terminal 
character, we again destroy inverse injectivity. 
To  address  the  last  problem,  we  can  truncate  the  final 
encoded character in such a way that it can be completed 
on decode without losing inverse injectivity.  In particular, 
after  encoding,  we  remove  all  trailing  zero  bits  (if  there 
are any) and the one bit that precedes all trailing zero bits.  
Before  decoding,  we  append  a  one  bit  and  as  many  zero 
bits as necessary to complete the final character code. 
this 
Unfortunately,  although 
technique  preserves 
inverse  injectivity,  it  loses  inverse  surjectivity:    There  is 
no  encoded  bit  string  that  corresponds  either  to  the  null 
string  or  to  any  string  that  ends  with  the  character  whose 
code is all zeroes.  For our purposes, the former limitation 
is  an  advantage,  since  the  null  string  is  not  syntactically 
legal.    We  address  the  latter  limitation  in  the  following 
subsection. 
3.4.  Avoiding the terminal character restriction 
The limitation on the terminal character imposed by the 
above  technique  would  actually  be  advantageous  if 
Windows’ syntax restrictions prohibited only one specific 
character (such as either space or period) from terminating 
a  name.    However,  since  the  number  of  prohibited 
terminating characters is not exactly one, this is a problem. 
We  can  remove  this  limitation  by  modifying  the 
encoding mechanism.  Using the symbol ζ to designate the 
character  whose prefix code is all zeroes,  we remove and 
count  all  trailing  ζ  characters  from  the  string  to  be 
encoded, encode the remainder of the string as above, and 
prepend to the encoded string a sequence of one bits equal 
in  number  to  the  count  of  ζ  characters  removed  from  the 
original string, followed by a zero bit.  The encoded string 
thus  begins  with  a  unary  representation  of  the  count  of  ζ 
characters at the end of the unencoded string. 
3.5.  Varying exclusions by character position 
We can vary the set of allowed characters according to 
the specific character position, simply by using a different 
prefix coding  table to encode (and decode) the characters 
in  that  position.    So,  for  example,  we  could  exclude  a 
certain  character  from  the  first  position  in  a  string  but 
allow it in all remaining positions. 
This  technique  only  works  for  specific  character 
positions  counted  from  the  left  of  the  string,  but  by 
reversing  the  string  before  encoding  it,  we  can  support 
Windows’ restriction on the terminal character of a name. 
3.6.  Surjective block-cipher encryption 
As  mentioned  above,  syntax  enforcement  requires  an 
encryption method that is surjective.  Stream ciphers [27] 
satisfy  this  requirement;  however,  reusing  a  stream  – 
which  would  be  required  for  detecting  duplicate  entry 
names – leaks a large amount of information and is known 
to be a severe security weakness. 
Conventional block cipher padding techniques [30] are 
not  surjective,  but  –  with  one  exception  –  the  following 
technique  is:    Prepend  to  the plaintext  a  one  bit  preceded 
by as many zero bits as necessary to bring the total length 
up to a multiple of the cipher block size.  After decryption, 
discard  all  leading  bits  up  to  and  including  the  first  one 
bit.    This  technique  is  surjective  except  that  it  cannot 
produce  a  padded  value  whose  first  block  equals  zero.  
This  exception  is  tolerable  as  long  as  this  case  can  be 
identified and rejected by the server. 
To  enable  the  exceptional  case  to  be  identified,  we 
encrypt the padded string  with block cipher F, defined as 
follows, where E is any standard block cipher encryption: 
(
xkF
,
)
=
0
0,
(
kE
(
xkE
,
)
)
Q
Q
=
x
(
xkE
,
0
)
=
0
otherwise
If the first block of the padded plaintext equals zero, then 
the first block of the ciphertext equals zero, irrespective of 
the encryption key. 
Decryption is performed with the inverse function F–1, 
defined as follows, where E–1 is the inverse of E: 
1
ykF
,
−
(
)
=
1
0
(
kE
(
)
)
ykE
0,
,
1
−
−
Q
Q
y
(
=
0
)
1
ykE
,
−
=
0
otherwise
This  technique  can  be  applied  to  cipher  modes  [30] 
other than ECB.  In particular, it will work correctly with a 
chaining  mode  such  as  CBC  as  long  as  the  initialization 
vector  is  set  to  zero.    The  fixed  initialization  vector  can 
leak  information  about  names  with  matching  prefixes,  so 
if  this  is  a  concern,  we  could  apply  an  all-or-nothing 
transform  [33]  to  the  string  before  padding.    Also,  the 
augmented  cipher  F  is  needed  only  for  the  first  block; 
subsequent blocks can be encrypted using the unmodified 
block cipher E, since they are allowed to be zero. 
4. Exclusive encryption process 
This section specifies the full exclusive encryption and 
decryption processes used by our secure directory service.  
The following two subsections present a specific usage of 
the techniques described in the previous section. 
4.1.  Encryption 
Figure  3  illustrates  the  full  procedure  for  exclusively 
encrypting  a  directory  entry  name.    First,  the  client  maps 
the  name  (§ 3.1):    If  the  name  equals  “AUX”,  “COMn”, 
“CON”,  “CONIN$”,  “CONOUT$”,  “LPTn”,  “NUL”,  or 
“PRN”,  for  any  digit  n,  followed  by  one  or  more 
underscores,  the  client  removes  one  trailing  underscore; 
otherwise, it leaves the name alone. 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:31:41 UTC from IEEE Xplore.  Restrictions apply. 
Next,  the  client  separates  out  case  information  (§ 3.2):  
It  extracts  the  case  of  each  character  into  a  separate  bit 
string, and it de-cases the mapped name by converting all 
uppercase characters to their lowercase equivalents. 
Then,  it  reverses  the  de-cased  name  (§ 3.5)  so  that  the 
following encoding step can restrict the terminal character. 
To  encode  the  reversed  name,  the  client  first  removes 
all  trailing  underscores  (§ 3.4).   Then,  it  encodes  the  first 
character of the reversed name using a prefix coding table 
that  encodes  underscore  as  all  zeroes  and  that  does  not 
include  codes  for  ‘"’,  ‘*’,  ‘/’,  ‘:’,  ‘’,  ‘?’,  ‘\’,  ‘|’, 
uppercase  characters,  control  characters,  space,  or  period 
(§ 3.5).    The  remaining  characters  are  encoded  using  a 
prefix coding table that is similar, except it includes codes 
for  space  and  period.    From  the  final  encoded  character, 
the client removes all trailing zero bits (if any) and the one 
bit that precedes all trailing zero bits (§ 3.3).  The encoded 
name  is  constructed  as  a  one  bit  for  each  underscore  that 
was  removed  (§ 3.4)  followed  by  a  zero  bit,  followed  by 
each encoded character in sequence. 
The client pads and encrypts the name using function F 
defined  in  § 3.6.   The  case  information  is  also  encrypted, 
but this uses the unmodified block cipher E. 
After  the  client  sends  the  encrypted  name  and  the 
encrypted case information to the servers, the server group 
verifies the encrypted name by making sure its first block 
is not equal to zero  (§ 3.6).  If it is, it rejects the client’s 
request.    Otherwise,  it  performs  the  requested  operation 
according to the appropriate procedure from § 2. 
4.2.  Decryption 
Figure  4  illustrates  the  full  procedure  for  exclusively 
decrypting  a  directory  entry  name.    First,  the  client 
decrypts the encrypted name using function F–1 defined in 
§ 3.6  and  removes  the  padding.    It  also  decrypts  the  case 
information using unmodified block cipher E–1. 
It then appends a one bit followed by a number of zero 
bits  whose  count  equals  the  length  of  the  longest  prefix 
code in the coding table  (§ 3.3), after which it removes all 
leading  one  bits  (if  any)  and  the  succeeding  zero  bit 
(§ 3.4).  It then decodes the first character using the coding 
table that excludes space and period (§ 3.5), and it decodes 
the  remaining  characters  using  the  other  coding  table 
(§ 3.3).  Decoding stops when only zero bits remain.  The 
client then appends an underscore for each leading one bit 
it removed from the encoded string (§ 3.4). 
The client then reverses the decoded name (§ 3.5), and 
it recombines the case information (§ 3.2). 
Finally,  the  client  de-maps  the  name  (§ 3.1)  by 
appending  an  underscore  if  the  string  equals  “AUX”, 
“COMn”,  “CON”,  “CONIN$”,  “CONOUT$”,  “LPTn”, 
“NUL”,  or  “PRN”,  for  any  digit  n,  followed  by  zero  or 
more underscores. 
A  client  that  follows  this  decryption  procedure  is 
guaranteed to see entry  names that satisfy the correctness 
properties  itemized  in  § 1,  irrespective  of  whatever  data 
any  other  client  attempted  to  send  to  the  directory  server 
group. 
name 
Map 
mapped name 
Separate 
case 
decased name 
case info 
t
n
e
i
l
c
s
p
e
t
s
Reverse 
reversed name 
Encode 
encoded name 
Encrypt 
with F 
encrypted name 
r
e
v
r
e
s
p
e
t
s
Validate 
Encrypt 
with E 
encrypted 
case info 