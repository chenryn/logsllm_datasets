### 本书的参考页码
在本书的第96、99、204、219和237页，您可以看到关于VB的例子。回顾这些例子可能会对您的理解有所帮助。

### 核心对象概览
#### Core Object Overview
在深入细节之前，让我们先来了解一下.NET的正则表达式对象模型。这个模型由一套类结构组成，提供了各种正则表达式的功能。.NET通过七个高度交互的类来实现正则表达式功能。实际上，您只需要理解其中三个类即可，这将在下一页的图9-1中展示，它们展示了对“May 16, 1998”重复应用`\s+(\d+)`的过程。

### Regex 对象
首先，我们需要创建一个Regex对象。例如：
```vb
Dim R As Regex = New Regex("\s+(\d+)")
```
在这里，我们用一个Regex对象表示`\s+(\d+)`，并将其保存在变量R中。获得Regex对象后，我们可以通过`Match(text)`方法将其应用到一段文本，并返回与第一次匹配结果相关的信息：
```vb
Dim M As Match = R.Match("May 16, 1998")
```

### Match 对象
Regex对象的`Match()`方法通过创建并返回一个Match对象来提供匹配信息。Match对象有多个属性，包括`Success`（一个表示匹配是否成功的布尔值）和`Value`（如果匹配成功，则保存实际匹配文本的副本）。稍后我们将详细介绍Match的所有属性。

Match对象返回的细节还包括捕获型括号所匹配的文本。前面Perl的例子使用$1保存第一组捕获型括号匹配的文本。.NET提供了两种方法：如果要获取纯文本，可以按照索引值访问Match对象的Groups属性，例如`Groups(1).Value`，它等价于Perl的$1（请注意，在C#中使用的是`Groups[1].Value`）。另一种方法是使用`Result`方法，请参阅第429页。

### Group 对象
前一段中的`Groups(1)`实际上是引用了一个Group对象，其后的`.Value`引用了该对象的`Value`属性（即此分组对应的文本）。每一组捕获型括号都对应一个Group对象，另外还有一个“虚拟分组”，编号为0，它保存全局匹配的信息。

因此，`MatchObj.Value`和`MatchObj.Groups(0).Value`是等价的——都是全局匹配文本的副本。第一种写法更简洁方便，但我们必须知道存在编号为0的分组，因为`MatchObj.Groups.Count`（即Match关联的分组数量）包含了它。如果`\s+(\d+)`能够匹配成功，`MatchObj.Groups.Count`的值将是2（标号为0的全局匹配和$1）。

### Capture 对象
Capture对象的使用并不频繁，请参阅第437页的介绍。

### 匹配时会计算出所有结果
将正则表达式应用到字符串中，得到一个Match对象，此时所有的结果（匹配的位置、每个捕获分组匹配的内容等）都会被计算出来，并封装到Match对象中。访问Match对象的属性和方法，包括它的Group对象（及其属性和方法），只是取回已经计算好的结果。

### 核心对象详解
#### Core Object Details
概览完毕，现在来看详细内容。首先，我们将讨论如何创建Regex对象，然后是如何将其应用到字符串以生成Match对象，以及如何处理这个Match对象和它的Group对象。

在实践中，很多时候不必显式创建Regex对象，但显式创建看起来更直观。因此，在讲解核心对象时，每次都会创建它们。稍后我将告诉您.NET提供的简便方法。

在以下列表中，我会忽略从Object类继承而来的、很少用到的方法。

### 创建Regex对象
#### Creating Regex Objects
Regex的构造函数并不复杂。它可以接收一个参数（作为正则表达式的字符串），或者两个参数（一个正则表达式和一组选项）。下面是一个参数的例子：
```vb
Dim StripTrailingWS As New Regex("\s+$") ' 去掉结尾的空白字符
```
它只是创建Regex对象，做好应用前的准备；而没有进行任何匹配。

下面是使用两个参数的例子：
```vb
Dim GetSubject As New Regex("^subject:(.*)", RegexOptions.IgnoreCase)
```
这里多出了一个`RegexOptions`选项，不过可以用`Or`运算符连接多个选项，例如：
```vb
Dim GetSubject As New Regex("^subject:(.*)", RegexOptions.IgnoreCase Or RegexOptions.Multiline)
```

### 捕获异常
如果正则表达式包含非法元字符组合，就会抛出`ArgumentException`。通常，如果用户知道所使用的正则表达式能够正常工作，就不需要捕获这个异常。但如果使用程序之外（例如由用户输入或从配置文件读入）的正则表达式，则必须捕获这个异常。
```vb
Dim R As Regex
Try
    R = New Regex(SearchRegex)
Catch e As ArgumentException
    Console.WriteLine("ERROR: bad regex: " & e.ToString())
    Exit Sub
End Try
```
显然，根据情况的不同，在检测到异常之后可能需要不同的处理：您可能需要进行其他处理，而不仅仅是向控制台输出错误信息。

### Regex选项
在创建Regex对象时，可以使用以下选项：

- **RegexOptions.IgnoreCase**：此选项表示在应用正则表达式时不区分大小写。
- **RegexOptions.IgnorePatternWhitespace**：此选项表示正则表达式应按自由格式和注释模式解析。如果使用单纯的`#`注释，请确保每个逻辑行末尾都有换行符，否则第一个注释会“注释掉”之后的整个正则表达式。
- **RegexOptions.Multiline**：此选项表示正则表达式在应用时采用增强的行锚点模式。也就是说，`^`和`$`能够匹配字符串内部的换行符，而不仅仅是匹配整个字符串的开头和结尾。
- **RegexOptions.Singleline**：此选项表示正则表达式使用点号通配模式。此时点号能够匹配任意字符，也包括换行符。
- **RegexOptions.ExplicitCapture**：此选项表示普通括号`()`在正常情况下是捕获型括号，但此时不捕获文本，而是只分组。此时只有命名捕获括号`(?<name>...)`能够捕获文本。
- **RegexOptions.RightToLeft**：此选项表示进行从右向左的匹配。
- **RegexOptions.Compiled**：此选项表示正则表达式应在实际应用时被编译成高度优化的格式，这样通常会大大提高匹配速度。但这会增加第一次使用时的编译时间和程序执行期间的内存占用。
- **RegexOptions.ECMAScript**：此选项表示正则表达式应按ECMAScript兼容方式解析。
- **RegexOptions.None**：它表示“没有额外的选项”，在初始化`RegexOptions`变量时，如果需要指定选项，可以使用它。也可以用`Or`来连接其他希望使用的选项。

### 使用Regex对象
#### Using Regex Objects
在没有实际应用之前，Regex是没有意义的。下面的示例程序演示了实际的应用：

- **IsMatch 方法**
  ```vb
  Dim R As Regex = New Regex("^\s*$")
  If R.IsMatch(Line) Then
      ' 如果行为空
  End If
  ```
  `IsMatch`方法将目标正则表达式应用于目标字符串，并返回一个布尔值，表示匹配尝试是否成功。如果提供了偏移量（一个整数），则第一次尝试会从对应的偏移值开始。

- **Match 方法**
  ```vb
  Dim M As Match = R.Match("May 16, 1998")
  ```
  `Match`方法将正则表达式应用于目标字符串，并返回一个Match对象。通过这个Match对象可以查询匹配结果的信息（是否匹配成功、捕获的文本等），并初始化此正则表达式的“下一次”匹配。如果提供了偏移量（一个整数），则第一次尝试会从对应的偏移值开始。如果提供了最大长度参数，会进行特殊模式的匹配，从偏移量开始的字符开始计算，正则引擎会把最大长度范围内的文本当作整个目标字符串，假设此范围之外的字符都不存在。这与仅提供偏移量有很大不同，如果只提供偏移量，受影响的只是传动装置开始应用正则表达式的位置——正则引擎仍然能够“看到”完整的目标字符串。

下面表格中的例子比较了偏移量和最大长度的意义：

| 调用方法 | 结果 |
| --- | --- |
| `RegexObj.Match("May 16, 1998")` | 匹配‘16’ |
| `RegexObj.Match("May 16, 1998", 9)` | 匹配‘99’ |

通过以上内容，您可以更好地理解和使用.NET中的正则表达式对象。