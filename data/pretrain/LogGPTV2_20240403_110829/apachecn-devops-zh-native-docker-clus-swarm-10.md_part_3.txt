```
如果没有安装**巴比肯**(专门管理密码等机密的 OpenStack 项目)，证书必须由`**x509keypair**`插件处理:
```
[certificates]
cert_manager_type = x509keypair
```
然后，需要一个数据库连接字符串。在这个高可用性设置中，MySQL 在 VIP `10.21.22.2`上回答:
```
[database]
connection=mysql://magnum:password@10.21.22.2/magnum
```
Keystone 认证的配置如下(选项不言自明):
```
[keystone_authtoken]
auth_uri=http://10.21.22.2:5000/
memcached_servers=10.21.22.4:11211,
    10.21.22.5:11211,10.21.22.6:11211
auth_type=password
username=magnum
project_name=services
auth_url=http://10.21.22.2:35357/
password=password
user_domain_id = default
project_domain_id = default
auth_host = 127.0.0.1
auth_protocol = http
admin_user = admin
admin_password =
admin_tenant_name = admin
```
Oslo(消息代理)必须配置为消息传递:
```
[oslo_messaging_notifications]
driver = messaging
```
Rabbitmq 配置是这样的，它指定了 Rabbit 集群主机(因为 Rabbit 运行在控制器上，所有控制器管理网络的入侵防御系统):
```
[oslo_messaging_rabbit]
rabbit_hosts=10.21.22.6:5673, 10.21.22.4:5673, 10.21.22.5:5673
rabbit_ha_queues=True
heartbeat_timeout_threshold=60
heartbeat_rate=2
rabbit_userid=magnum
rabbit_password=A3elbTUIqOcqRihB6XE3MWzN
```
最后，受托人的附加配置如下:
```
[trust]
trustee_domain_name = magnum
trustee_domain_admin_name = magnum_domain_admin
trustee_domain_admin_password = magnum
```
重新配置后，马格南服务必须重新启动:
```
service magnum-api restart
service magnum-conductor restart
```
Magnum 默认使用端口`tcp/9511`，因此到该端口的流量必须在 iptables 中接受:修改 iptables 以添加此规则:
```
-A INPUT -s 10.21.22.0/24 -p tcp -m multiport --dports 9511 -m 
    comment --comment "117 magnum-api from 10.21.22.0/24" -j ACCEPT
```
就在其他 OpenStack 服务之后，就在`116 openvswitch db`之后。
现在，是时候配置 HAproxy 接受 magnum 了。在所有控制器上的`/etc/haproxy/conf.d`中添加一个`180-magnum.cfg`文件，内容如下:
```
listen magnum-api
 bind 10.21.22.2:9511
 http-request  set-header X-Forwarded-Proto https if { ssl_fc }
 option  httpchk
 option  httplog
 option  httpclose
 option  http-buffer-request
 timeout  server 600s
 timeout  http-request 10s
 server node-1 10.21.22.6:9511  check inter 10s fastinter 2s 
      downinter 3s rise 3 fall 3
 server node-2 10.21.22.5:9511  check inter 10s fastinter 2s 
      downinter 3s rise 3 fall 3
 server node-3 10.21.22.4:9511  check inter 10s fastinter 2s 
      downinter 3s rise 3 fall 3
```
这将 magnum-api 配置为监听 VIP `10.21.22.2:9511`，支持三个控制器。
就在这之后，必须从起搏器重新启动 HAproxy。从任何控制器运行:
```
pcs resource disable p_haproxy
```
等到所有控制器上都没有运行 HAproxy 进程(可以用`ps aux`检查)，但这应该非常快，不到 1 秒，然后:
```
pcs resource enable p_haproxy
```
之后，Magnum 将提供以下服务:
```
source openrc
magnum service-list
```
![Configure an HA Magnum installation](img/image_10_012.jpg)
### 在马格南上创建一个蜂群集群
创建群集群，当 COE 将被添加到 Magnum 时，将需要以下步骤:
1.  创建群体模式模板。
2.  从模板启动集群。
我们不会过多地探究尚不存在的东西，但命令会是这样的:
```
magnum cluster-template-create \
--name swarm-mode-cluster-template \
--image-id ubuntu_xenial \
--keypair-id fuel \
--fixed-network private \
--external-network-id public \
--dns-nameserver 8.8.8.8 \
--flavor-id m1.medium \
--docker-volume-size 5 \
--coe swarm-mode
```
这里定义了一个基于 Ubuntu Xenial 的集群模板，具有`m1.medium`种风格:虚拟机将被注入燃料密钥空气，将有一个额外的外部公共知识产权。基于这样一个模板创建集群的 UX 应该是:
```
magnum cluster-create --name swarm-mode-cluster \
      --cluster-template swarm-mode-cluster-template \
      --manager-count 3 \
      --node-count 8
```
这里，一个 Swarm 集群被实例化为三个管理人员和五个工作人员。
Magnum 是一个伟大的项目，在 OpenStack 上运行容器编排的最高抽象级别。它运行在 Rackspace 云上，并通过 Carina 提供给公众使用，参见[http://blog . Rackspace . com/Carina by Rackspace-simplified-containers-with-easy-on-native-container-environment](http://blog.rackspace.com/carina-by-rackspace-simplifies-containers-with-easy-to-use-instant-on-native-container-environment)。
# 总结
在本章中，我们探索了可以运行 Docker Swarm 集群的替代平台。我们使用了最新的 Docker 工具 AWS 的 Docker 和 Azure 的 Docker——我们用它们来演示如何以新的方式安装 Swarm。在介绍了 Docker Datacenter 之后，我们转向了私有云部分。我们在 OpenStack 上工作，展示了如何在上面运行 Docker 主机，如何安装 OpenStack Magnum，以及如何在上面创建 Swarm 对象。我们差不多完成了旅行。
下一章也是最后一章将概述 Docker 编排的未来。*