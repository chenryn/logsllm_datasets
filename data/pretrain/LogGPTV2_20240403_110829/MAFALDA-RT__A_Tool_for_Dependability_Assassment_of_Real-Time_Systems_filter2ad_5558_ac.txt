already occurred. The order between events is then important.
In this context, an experiment in partition G is classified as an
error detection if the first event appeared is the activation of
an EDM. Conversely, when a failure occurs before any error
detection, the system is said to have failed.
• Nevertheless, one can consider that the system does not fail
provided  an  EDM  is  activated  within  a  given  temporal
window. Considering such a temporal window as equivalent
to the duration of an experiment, the order between events is
no longer important. In this case, an experiment in partition G
is systematically classified as an error detection, as in [9, 10].
• From a pessimistic viewpoint, one can consider that the error
detection  mechanisms  provided  by  certain  systems  are  of
little utility when a failure occurs. Experiments in partition G
are then classified as failures, as in [11].
As we will see in the next section, the size of partition G can
be relatively high with respect to the size of partitions F and H.
As  a  consequence,  the  choice  of  the  analysis  strategy  is  an
important  issue,  as  it  will  considerably  impact  the  final
interpretation of the results.
([DPSOHRIDSSOLFDWLRQRI0$)$/'$57
This  section  illustrates  the  type  of  results  provided  by
MAFALDA-RT  for  the  evaluation  of  a  real-time  system
consisting  of  the  &KRUXV  microkernel  [12]  and  the  PLQH
GUDLQDJHFRQWUROV\VWHPDSSOLFDWLRQ [13], on a target platform
based on an Intel Pentium running at 75 Mhz.
([SHULPHQWDOFRQWH[W
The software executive used consisted of a preliminary version
of  the  Chorus  real-time  microkernel  [12].  For  our  purpose,  the
kernel was customized with protected memory and a fixed priority
based FIFO preemptive scheduling driven by clock ticks.
The real-time application used was the mine drainage control
system  application  [13].  It  is  intended  to  control  a  mining
environment. The objective is to pump to the surface mine water
collected  in  a  sump  at  the  bottom  of  a  shaft.  The  main  safety
requirement  is  that  the  pump  should  not  be  operated  when  the
level of methane gas in the mine reaches a high value due to the
Table 1. Attributes and response times (times are in milliseconds)
Task
CH4 Sensor
CO Sensor
Air-Flow Sensor
Water-Flow Sensor
HLW Handler
R
25
47
57
35
79
T : Minimum inter-arrival time (task period)  B: Worst-case blocking time
C: Worst-case execution time  D: Deadline  R: Worst-case response time
Priority T
80
10
100
8
100
7
9
1000
6000
6
B C
12
3
10
3
10
3
3
10
20
3
D
30
60
100
40
200
Type
Periodic
Periodic
Periodic
Periodic
Sporadic
risk of explosion. Table 1 contains the main task attributes of the
application and the response times resulting from a fixed priority
scheduling analysis, as reported in [13].
The  external  devices  of  the  application  consist  of  sensors  to
capture the state of the water levels, the water flow, the airflow,
and the levels of methane and carbon monoxide. The water level
sensor is intended to interrupt the system whenever a high or low
water level is detected in the sump, which occurs, at worst, once
every 6 seconds. The emulation software for this sensor was thus
in  charge  of  releasing  task  HLW Handler  randomly  with  a
minimum  interval  of  6  seconds  between  two  consecutive
releases.  Since  the  other  devices  are  polled  by  the  application,
their emulator consisted of a random generator of integers, which
provided random values as sensor readings to the tasks.
the  execution  of 
MAFALDA-RT  was  applied  to  inject  a  single  bit  flip
randomly  during 
the  mine  drainage
application,  and  to  observe  the  behavior  of  the  system  both
EHIRUH  and  DIWHU  the  activation  of  the  injected  bit  flip.  Only
activated  bit  flips  are  considered.  The  interval  of  observation
was  about  30  seconds,  at  the  end  of  which  the  system  was
rebooted.  This  process  corresponds  to  an  experiment.  A
campaign consists thus of a sequence of experiments where the
faults are targeted to the same system component.
$QDO\VLVRIWKHIDXOWPDQLIHVWDWLRQV
Figure 4 presents the distribution of the fault  manifestations
observed  by  MAFALDA-RT  in  three  different  campaigns
(each  one  of  about  1500  experiments),  where  faults  were
injected  into  the  following  targets:  i) the  code  segment  of  the
scheduler  component  of  the  microkernel  (campaign  mSCH),
ii) the  code  segment  of  the  timers  component  (campaign
mTIM),  and  iii) the  parameters  of  the  timers’  system  calls
(campaign pTIM). The parameter to be corrupted, the memory
bit  to  be  inverted,  as  well  as  the  instant  of  injection,  were
selected  randomly.  Results  presented  in  Figure  4  take  into
account  the  order  of  occurrence  between  failures  and  error
detections (see Section 4).
Concerning campaign mSCH, about 6.6% of the errors were
not  detected  and  propagated  to  the  application,  provoking  a
failure (classes 'HDGOLQH0LVVHG, ,QFRUUHFW5HVXOWV, $SSOLFDWLRQ
+DQJ and 6\VWHP+DQJ). In particular, errors in the scheduler
were prone to provoke the hang of all tasks, as indicated by the
high rate of applications hangs (4.8%). Moreover, we observed
that  although  most  errors  were  successfully  detected  by  an
exception (61.1%), the application did immediately hang after
such  an  exception.  This  also  explains  the  low  rate  of  alarms
(0.5%).  Few  error  status  were  observed  since  the  scheduling
component is not provided with an API. Finally, 31.6% of the
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:25:17 UTC from IEEE Xplore.  Restrictions apply. 
9.7%
8.3%
8.4%
7.0%
)LUVWHYHQW
3ULRULW\WR'
3ULRULW\WR)
I LO
89.9%
95.4%
18.5%
17.3%
42.8%
P6&+
P7,0
S7,0
0%
20%
40%
60%
80%
100%
Figure 5. Failure rates depending on the
analysis strategy
100
V
HP
HVSRQVHWLP
5
80
60
40
20
0
Predicted
mSCH
mTIM
pTIM
CH4 Sensor CO Sensor
Air-Flow
Sensor
Water-Flow
Sensor
HLW
Handler
100000
10000
Predicted
mSCH
mTIM
pTIM
V
HP
HVSRQVHWLP
5
1000
100
10
1
CH4 Sensor CO Sensor
Air-Flow
Sensor
Water-Flow
Sensor
HLW
Handler
a) Before fault activation
b) After fault activation (logarithmic scale)
Figure 6. Impact on the maximum response time observed
experiments  led  to  correct  results  in  both  the  timing  and  the
value domain, despite the actual activation of the injected fault.
Conversely,  campaign  mTIM  shows  that  tasks  were  more
prone  to  issue  incorrect  results  (3.3%)  than  to  hang  (1.6%).
Here, the low percentage of alarms (0.4%) can be explained by
the fact that an error affecting a timer did not lead to a spurious
trigger of the timer, but rather to its disconnection. More error
status are reported than for campaign mSCH (3.9%), given that,
unlike the scheduling component, the timers component offers
an  API.  As  for  campaign  mSCH,  exceptions  detected  the
majority of bit flips (50.5%).
Concerning campaign pTIM, the main differences that can be
appreciated  with  respect  to  campaigns  mSCH  and  mTIM  are
that exceptions were not activated at all, in favor of higher rates