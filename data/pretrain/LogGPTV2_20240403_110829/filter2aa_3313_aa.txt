# Bypassing Endpoint Security for $20 or Less

**Speaker: Philip A. Polstra, Sr.**  
Twitter: @ppolstra  
Blog: ppolstra.blogspot.com

## Why This Talk?
- **Motivation:** Many organizations use endpoint security programs to restrict the use of portable media.
- **Current Solutions:** Many software tools perform USB MAC filtering, allowing only authorized Vendor ID (VID) and Product ID (PID).
- **Objective:** Demonstrate how, for as little as $18-30, one can construct a device that impersonates an authorized device, enabling data injection and extraction.

## Who Am I?
- **Background:** I teach computer security at a private university.
- **Interests:** Hardware hacking, aviation, and USB devices.

## Brief History of USB
- **Pre-USB Era:** Non-universal serial ports, PS/2 ports, and LPT ports.
- **1996:** USB 1.0 (1.5 or 12 Mbps).
- **1998:** USB 1.1.
- **2000:** USB 2.0 (1.5, 12, or 480 Mbps).
- **2008:** USB 3.0 (up to 5 Gbps).

## How Does USB Work?

### Hardware
- **Connection:** Simple 4-wire connection (power, ground, and two data wires).
- **Cabling:** Prevents improper connections and is hot-pluggable.
- **Differential Voltages:** Provide greater immunity to noise.
- **Cable Lengths:** Up to 16 feet are possible.

| Pin | Name   | Cable Color | Description       |
|-----|--------|-------------|-------------------|
| 1   | VBUS   | Red         | +5 V              |
| 2   | D−     | White       | Data −            |
| 3   | D+     | Green       | Data +            |
| 4   | GND    | Black       | Ground            |

### Software
- **Automatic Configuration:** No settable jumpers.
- **Enumeration:** Standard device classes with corresponding drivers (HID, Printer, Audio, Mass Storage).

### Connecting a Device
1. **Device Connection:** The device is connected.
2. **Hub Detection:** The hub detects the new device.
3. **Host Notification:** The host (PC) is informed of the new device.
4. **Speed Capability:** The hub determines the device's speed capability using pull-up resistors.
5. **Reset:** The hub resets the device.
6. **High-Speed Check:** The host checks if the device is capable of high-speed communication.
7. **Signal Path Establishment:** The hub establishes a signal path.
8. **Descriptor Request:** The host requests a descriptor from the device to determine the maximum packet size.
9. **Address Assignment:** The host assigns an address.
10. **Capabilities Inquiry:** The host learns the device's capabilities.
11. **Driver Loading:** The host assigns and loads an appropriate device driver (INF file).
12. **Configuration Selection:** The device driver selects a configuration.

## It’s All Descriptors and Endpoints

### Endpoints
- **Virtual Wires:** For USB communications.
- **One-Way Communication:** Direction relative to the host.
- **Packet Management:** Fragmentation, handshaking, etc., are handled by hardware.
- **Endpoint Types:**
  - **Control:** Primary mechanism for most devices to communicate with the host.
  - **Bulk Transport:** No latency guarantees, good performance on an idle bus.
  - **Interrupt:** Used to avoid polling and busy waits.
  - **Isochronous:** Guaranteed bandwidth, used for time-critical applications like streaming media.

### Control Endpoints
- **Primary Mechanism:** Every device must have at least one in and out control endpoint (EP0).
- **Standard Requests:** Get/set address, descriptors, power, and status.
- **Class and Vendor-Specific Requests:** Can be supported by the device.
- **Transport Stages:**
  - **Setup Stage:** Host sends a setup token and a data packet containing the request.
  - **Data Stage (Optional):** Requested information is transmitted.
  - **Status Stage:** Zero-length data packet sent as an ACK on success.

### Bulk Endpoints
- **No Latency Guarantees:** Good performance on an idle bus.
- **Packet Size:** Full (8-64 byte packets) and high-speed (512 byte packets).
- **Common Use:** USB flash drives and external hard drives.
- **Transaction Structure:** Token packet, 0 or more data packets, and an ACK handshake packet (if successful).

### Descriptors
- **Purpose:** Describe various aspects of the device.
- **Format:**
  - **Length Byte:** Indicates the length in bytes.
  - **Type Byte:** Determines the type of descriptor.
  - **Descriptor Data:** Remaining bytes.
- **Common Types:**
  - **Device:** Basic information about the device.
  - **Configuration:** Power requirements, number of interfaces, etc.
  - **Interface:** Communication details.
  - **Endpoint:** Direction, type, number, etc.
  - **String:** Unicode text descriptions.

### Example Descriptors

#### Device Descriptor
| Offset | Field               | Size | Value          | Description                            |
|--------|---------------------|------|----------------|----------------------------------------|
| 0      | bLength             | 1    | Number         | 18 bytes                               |
| 1      | bDescriptorType     | 1    | Constant       | Device Descriptor (0x01)               |
| 2      | bcdUSB              | 2    | BCD            | 0x200                                  |
| 4      | bDeviceClass        | 1    | Class          | Class Code                             |
| 5      | bDeviceSubClass     | 1    | SubClass       | Subclass Code                          |
| 6      | bDeviceProtocol     | 1    | Protocol       | Protocol Code                          |
| 7      | bMaxPacketSize0     | 1    | Number         | Max Packet Size EP0                    |
| 8      | idVendor            | 2    | ID             | Vendor ID                              |
| 10     | idProduct           | 2    | ID             | Product ID                             |
| 12     | bcdDevice           | 2    | BCD            | Device Release Number                  |
| 14     | iManufacturer       | 1    | Index          | Index of Manufacturer Descriptor       |
| 15     | iProduct            | 1    | Index          | Index of Product Descriptor            |
| 16     | iSerialNumber       | 1    | Index          | Index of Serial Number Descriptor      |
| 17     | bNumConfigurations  | 1    | Integer        | Number of Configurations               |

#### Configuration Descriptor (Header)
| Offset | Field               | Size | Value          | Description                            |
|--------|---------------------|------|----------------|----------------------------------------|
| 0      | bLength             | 1    | Number         | Size in Bytes                          |
| 1      | bDescriptorType     | 1    | Constant       | 0x02                                   |
| 2      | wTotalLength        | 2    | Number         | Total data returned                    |
| 4      | bNumInterfaces      | 1    | Number         | Number of Interfaces                   |
| 5      | bConfigurationValue | 1    | Number         | Configuration Number                   |
| 6      | iConfiguration      | 1    | Index          | String Descriptor                      |
| 7      | bmAttributes        | 1    | Bitmap         | Attributes (b7 Reserved, b6 Self Powered, b5 Remote Wakeup, b4..0 Reserved) |
| 8      | bMaxPower           | 1    | mA             | Max Power in mA/2                      |

#### Interface Descriptor
| Offset | Field                | Size | Value          | Description                            |
|--------|----------------------|------|----------------|----------------------------------------|
| 0      | bLength              | 1    | Number         | 9 Bytes                                |
| 1      | bDescriptorType      | 1    | Constant       | 0x04                                   |
| 2      | bInterfaceNumber     | 1    | Number         | Number of Interface                    |
| 3      | bAlternateSetting    | 1    | Number         | Alternative Setting                    |
| 4      | bNumEndpoints        | 1    | Number         | Number of Endpoints used               |
| 5      | bInterfaceClass      | 1    | Class          | Class Code                             |
| 6      | bInterfaceSubClass   | 1    | SubClass       | Subclass Code                          |
| 7      | bInterfaceProtocol   | 1    | Protocol       | Protocol Code                          |
| 8      | iInterface           | 1    | Index          | Index of String Descriptor             |

#### Endpoint Descriptor
| Offset | Field                | Size | Value          | Description                            |
|--------|----------------------|------|----------------|----------------------------------------|
| 0      | bLength              | 1    | Number         | Size of Descriptor (7 bytes)           |
| 1      | bDescriptorType      | 1    | Constant       | Endpoint Descriptor (0x05)             |
| 2      | bEndpointAddress     | 1    | Endpoint       | b0..3 Endpoint Number, b4..6 Reserved, b7 Direction (0 = Out, 1 = In) |
| 3      | bmAttributes         | 1    | Attributes     | Transfer Type (Control, Isochronous, Bulk, Interrupt) |
| 4      | wMaxPacketSize       | 2    | Number         | Maximum Packet Size                    |
| 6      | bInterval            | 1    | Interval       | Polling Interval                       |

## Microcontrollers Are Fun (and Cheap)
- **Affordability:** Microcontrollers are inexpensive and versatile.
- **Applications:** Can be used to create custom USB devices for various purposes, including bypassing endpoint security.

## Food for Thought
- **Security Implications:** The ease of constructing a device to bypass endpoint security highlights the need for more robust security measures.
- **Future Directions:** Consider additional layers of security and continuous monitoring to mitigate such risks.