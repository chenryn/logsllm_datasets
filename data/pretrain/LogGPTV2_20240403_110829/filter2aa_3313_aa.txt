Bypassing Endpoint 
Security for $20 or 
Less 
Philip A. Polstra, Sr. 
@ppolstra 
ppolstra.blogspot.com 
•
Why this talk? 
•
Who is this dude talking at me? 
•
Brief history of USB 
•
How does USB work? 
•
It’s all descriptors and endpoints 
•
Bulk-only mass storage devices 
•
Bypassing endpoint security 
•
Microcontrollers are fun (and cheap) 
•
Food for thought 
Roadmap 
• Many organizations have begun to use endpoint 
security programs to restrict use of portable 
media 
• Many software tools do the USB equivalent of 
MAC filtering – only allow authorized VID/PID 
• For $18-30 can easily construct device to allow 
any mass storage device to impersonate 
authorized device 
• Allows injection/extraction 
Why this talk? 
Who am I anyway? 
•
Teach computer security at a private university 
•
Like to hack hardware 
•
Have been known to fly and build airplanes 
•
Been known to play with USB devices 
Brief History or USB 
• Non-universal serial, PS/2 ports, & LPT 
• 1996 USB 1.0 (1.5 or 12 Mbps) 
• 1998 USB 1.1 
• 2000 USB 2.0 (1.5, 12, or 480 Mbps) 
• Long pause 
• 2008 USB 3.0 (up to 5 Gbps) 
HOW DOES USB WORK? 
Hardware 
•
Simple 4-wire connection (power, ground, 2 data wires) 
•
Cabling prevents improper connections 
•
Hot pluggable 
•
Differential voltages provide greater immunity to noise 
•
Cable lengths up to 16 feet are possible  
Pin 
Name 
Cable color 
Description 
1 
VBUS 
Red 
+5 V 
2 
D− 
White 
Data − 
3 
D+ 
Green 
Data + 
4 
GND 
Black 
Ground 
Software 
• Automatic configuration 
• No settable jumpers 
• Enumeration 
• Standard device classes with corresponding drivers 
– HID 
– Printer 
– Audio 
– Mass Storage 
Connecting a Device 
•
Device is connected 
•
Hub detects 
•
Host (PC) is informed of new device 
•
Hub determines device speed capability as indicated by location of pull-up resistors 
•
Hub resets the device 
•
Host determines if device is capable of high speed (using chirps) 
•
Hub establishes a signal path 
•
Host requests descriptor from device to determine max packet size 
•
Host assigns an address 
•
Host learns devices capabilities 
•
Host assigns and loads an appropriate device driver (INF file) 
•
Device driver selects a configuration 
IT’S ALL DESCRIPTORS AND 
ENDPOINTS 
Endpoints 
•
The virtual wire for USB communications 
•
All endpoints are one way (direction relative to host) 
•
Packet fragmentation, handshaking, etc. done by hardware (usually) 
•
High bit of address tells direction 1=in 0=out 
•
Types of endpoints 
– Control 
– Bulk transport 
– Interrupt 
– Isochronous 
Control Endpoints 
• Primary mechanism for most devices to communicate 
with host 
• Every device must have at least one in and out control 
endpoint EP0 
• Device must respond to standard requests  
– Get/set address, descriptors, power, and status 
• Device may respond to class specific requests  
• Device may respond to vendor specific requests 
Control Endpoints (continued) 
•
May have up to 3 transport stages: Setup, Data, Status 
•
Setup stage 
– Host sends Setup token then data packet containing setup request 
– If device receives a valid setup packet, an ACK is returned 
– Setup request is 8 bytes 
• 1st byte is bitmap telling type of request & recipient (device, interface, 
endpoint) 
• Remaining bytes are parameters for request and response 
•
Data stage (optional) – requested info transmitted 
•
Status stage – zero length data packet sent as ACK on success 
Interrupt & Isochronous Endpoints 
• Interrupt endpoints 
– Used to avoid polling and busy waits 
– Keyboards are a good example 
– Usually low speed (allows for longer cables, etc.) 
• Isochronous endpoints 
– Guaranteed bandwidth 
– Used primarily for time-critical apps such as streaming 
media 
Bulk Endpoints 
• No latency guarantees  
• Good performance on an idle bus 
• Superseded by all other transport types 
• Full  (8-64 byte packets) & high speed (512 byte packets) 
only 
• Used extensively in USB flash drives (and external hard 
drives) 
• Transactions consist of  a token packet, 0 or more data 
packets, and an ACK handshake packet (if successful) 
Descriptors 
•
They describe things (duh!) 
•
Have a standard format 
– 1st byte is the length in bytes (so you known when you’re done) 
– 2nd byte determines type of descriptor 
– Remaining bytes are the descriptor itself 
•
Common types 
– Device: tells you basic info about the device 
– Configuration: how much power needed, number of interfaces, etc. 
– Interface: How do I talk to the device 
– Endpoint: Direction, type, number, etc. 
– String: Describe something in unicode text 
Device Descriptor 
Offset 
Field 
Size 
Value 
Description 
0 
bLength 
1 
Number 
18 bytes 
1 
bDescriptorType 
1 
Constant 
Device Descriptor (0x01) 
2 
bcdUSB 
2 
BCD 
0x200 
4 
bDeviceClass 
1 
Class 
Class Code 
5 
bDeviceSubClass 
1 
SubClass 
Subclass Code 
6 
bDeviceProtocol 
1 
Protocol 
Protocol Code 
7 
bMaxPacketSize 
1 
Number 
Maxi Packet Size EP0  
8 
idVendor 
2 
ID 
Vendor ID 
10 
idProduct 
2 
ID 
Product ID 
12 
bcdDevice 
2 
BCD 
Device Release Number 
14 
iManufacturer 
1 
Index 
Index of Manu Descriptor 
15 
iProduct 
1 
Index 
Index of Prod Descriptor 
16 
iSerialNumber 
1 
Index 
Index of SN Descriptor 
17 
bNumConfigurations 
1 
Integer 
Num Configurations 
Configuration Descriptor (header) 
Offset Field 
Size 
Value 
Description 
0 
bLength 
1 
Number 
Size in Bytes 
1 
bDescriptorType 
1 
Constant 0x02 
2 
wTotalLength 
2 
Number 
Total data returned 
4 
bNumInterfaces 
1 
Number 
Num Interfaces 
5 
bConfigurationValue 1 
Number 
Con number 
6 
iConfiguration 
1 
Index 
String Descriptor 
7 
bmAttributes 
1 
Bitmap 
b7 Reserved, set to 
1. b6 Self Powered 
b5 Remote 
Wakeup 
b4..0 Reserved 0. 
8 
bMaxPower 
1 
mA 
Max Power in mA/2 
Interface Descriptor 
Offset 
Field 
Size Value 
Description 
0 
bLength 
1 
Number 
9 Bytes 
1 
bDescriptorType 
1 
Constant 0x04 
2 
bInterfaceNumber 
1 
Number 
Number of 
Interface 
3 
bAlternateSetting 
1 
Number 
Alternative setting 
4 
bNumEndpoints 
1 
Number 
Number of 
Endpoints used  
5 
bInterfaceClass 
1 
Class 
Class Code 
6 
bInterfaceSubClass 
1 
SubClass Subclass Code 
7 
bInterfaceProtocol 
1 
Protocol 
Protocol Code 
8 
iInterface 
1 
Index 
Index of String 
Descriptor 
Endpoint Descriptor 
Offset Field 
Size Value 
Description 
0 
bLength 
1 
Number 
Size of Descriptor (7 bytes) 
1 
bDescriptorType 
1 
Constant Endpoint Descriptor (0x05) 
2 
bEndpointAddress 
1 
Endpoint b0..3 Endpoint Number. 
b4..6 Reserved. Set to Zero 
b7 Direction 0 = Out, 1 = In 
3 
bmAttributes 