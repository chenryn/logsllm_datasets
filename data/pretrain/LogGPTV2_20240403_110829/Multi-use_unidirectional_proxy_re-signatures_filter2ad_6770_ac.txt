˜t, X
˜t
j , g
˜t).
(2)
Verify(1, m, σ(1), Xi): accept σ(1) if e(σ(1), g) = e(H(m), Xi).
Verify(2, m, σ(2), Xi): a 2nd level signature σ(2) = (σ0, σ1, σ2)
is accepted for the public key Xi if the following con-
ditions are true.
e(σ0, g) = e(σ1, H(m))
e(σ1, g) = e(Xi, σ2)
Relations (1) and (2) show that translated signatures have
exactly the same distribution as signatures directly pro-
duced by signers at level 2.
In comparison with the only known unidirectional PRS
with private re-signing keys (suggested in section 3.4.2 of
[5]), this one features shorter second level signatures that
must include a Schnorr-like [30] proof of knowledge in addi-
tion to 3 group elements in [5]. On the other hand, signa-
tures of [5] are strongly unforgeable unlike ours.
It is also worth mentioning that the above scheme only
requires the 1-Flexible Diﬃe-Hellman assumption which is
more classical than the general (cid:2)-FlexDH.
4.2 How to Obtain Multiple Hops
The above construction can be scaled up into a multi-hop
PRS scheme if we iteratively apply the same idea several
times. To prevent the linkability of signatures between suc-
cessive levels (cid:2) + 1 and (cid:2) + 2, the re-signature algorithm per-
forms a re-randomization using random exponents r1, . . . , r(cid:3).
Sign((cid:2) + 1, xi, m): to sign m ∈ {0, 1}∗
at the ((cid:2) + 1)th level,
user i chooses (t1, . . . , t(cid:3)) R← (Z
∗
p)(cid:3) and outputs σ((cid:3)+1) =
(σ0, . . . , σ2(cid:3)) ∈ G
⎧⎨
⎩
σ0 = H(m)xit1···t(cid:3)
σk = gxit1···t(cid:3)+1−k
σk = gtk−(cid:3)
for k ∈ {1, . . . , (cid:2)}
for k ∈ {(cid:2) + 1, . . . , 2(cid:2)}.
2(cid:3)+1 where
Re-Sign((cid:2) + 1, m, σ((cid:3)+1), Rij, Xi, Xj): on input of a message
, the re-signature key Rij = gxi/xj , a valid
m ∈ {0, 1}∗
((cid:2) + 1)th-level signature
((cid:3)+1)
σ
= (σ0, . . . , σ2(cid:3))
= (H(m)xit1···t(cid:3) , gxit1···t(cid:3) , gxit1···t(cid:3)−1 ,
. . . , gxit1 , gt1, . . . , gt(cid:3)) ∈ G
2(cid:3)+1
and public keys Xi, Xj , check the validity of σ((cid:3)+1) un-
der Xi. If valid, it is turned into a ((cid:2) + 2)th-level signa-
ture on behalf of j by drawing (r0, . . . , r(cid:3)) R← (Z
∗
p)(cid:3)+1
and computing σ((cid:3)+2) = (σ
2(cid:3)+3 where
⎧⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎩
0 = σr0···r(cid:3)
(cid:2)
k = σr0···r(cid:3)+1−k
(cid:2)
(cid:2)
(cid:3)+1 = X r0
(cid:2)
(cid:3)+2 = Rr0
(cid:2)
ij
rk−(cid:3)−2
k−2
k = σ
for k ∈ {(cid:2) + 3, . . . , 2(cid:2) + 2}.
for k ∈ {1, . . . , (cid:2)}
2(cid:3)+2) ∈ G
(cid:2)
(cid:2)
0, . . . , σ
σ
σ
σ
σ
σ
k
0
i
If we deﬁne ˜t0 = r0xi/xj and ˜tk = rktk for k = 1, . . . , (cid:2),
we observe that
((cid:3)+2)
σ
= (H(m)xj
˜t0˜t1···˜t(cid:3), gxj
˜t0 , g
. . . , gxj
˜t0˜t1···˜t(cid:3) , gxj
˜t0 , . . . , g
˜t0˜t1···˜t(cid:3)−1 ,
˜t(cid:3) ) ∈ G
2(cid:3)+3
Verify((cid:2) + 1, m, σ((cid:3)+1), Xi): at level ((cid:2) + 1), the validity of
2(cid:3)+1 is checked by testing if
σ((cid:3)+1) = (σ0, . . . , σ2(cid:3)) ∈ G
these equalities simultaneously hold:
e(σ0, g) = e(H(m), σ1),
e(σ(cid:3), g) = e(Xi, σ(cid:3)+1)
e(σk, g) = e(σk+1, σ2(cid:3)−k+1) for k ∈ {1, . . . , (cid:2) − 1}
We note that the speed of the veriﬁcation algorithm can be
increased by computing a product of O((cid:2)) pairings, which
is signiﬁcantly faster than O((cid:2)) independent pairing calcula-
∗
tions [19]. The idea is to choose ω0, . . . , ω(cid:3)
p at random
and check whether
R← Z
(cid:3)
(cid:3)(cid:11)
(cid:4)
e
g,
k=0
σωk
k
= e(H(m), σ1
ω0 ) · e(Xi, σω(cid:3)
(cid:3)+1)
· (cid:3)−1(cid:11)
k=1
e(σk+1, σωk
2(cid:3)−k+1).
With high probability, invalid signatures fail to satisfy the
above randomized veriﬁcation algorithm.
4.3 Security
Theorem 4.1. The L-level scheme is a secure unidirec-
tional proxy re-signature under the (L−1)-FlexDH and mCDH
assumptions in the random oracle model.
Proof. We ﬁrst prove security against dishonest proxies.
Limited proxy security. From an adversary A1 with ad-
vantage ε, we can construct an algorithm B1 that solves a
(L − 1)-FlexDH instance (g, A = ga, B = gb) with proba-
bility O(ε/qs), where qs is the number of signing queries.
System parameters: A1 is challenged on public param-
eters {G, GT , g,OH} where OH is the random oracle
controlled by the simulator B1.
Public key generation: when A1 asks for the creation of
user i ∈ {1, . . . , N}, B1 responds with a newly gen-
erated public key Xi = Axi = gaxi, for a random
∗
xi
p, which virtually deﬁnes user i’s private key
as axi. For all pairs (i, j), re-signature keys Rij are
calculated as Rij = gxi/xj = gaxi/axj .
Oracle queries: A1’s queries are tackled with as follows.
Following a well-known technique due to Coron [15], a
binary coin c ∈ {0, 1} with expected value 1−ζ ∈ [0, 1]
decides whether B1 introduces the challenge in the out-
put of the random oracle or an element of known sig-
nature. For the optimal value of ζ, this introduces the
loss factor O(qs) in the success probability.
• Random oracle queries: to answer these queries,
B1 maintains a list (referred to as the H-List) of
tuples (m, h, μ, c) as follows:
R← Z
then B1 returns h;
1. If the query m already appears in the H-List,
2. Otherwise, B1 generates a random bit c such
3. It picks μ R← Z
∗
p at random and computes
that Pr[c = 0] = ζ;
h = gμ if c = 0 and h = Bμ otherwise;
4. It adds the 4-uple (m, h, μ, c) to the H-List
and returns h as the random oracle output.
• Signing queries: when a signature of signer i is
queried for a message m, B1 runs the random
oracle to obtain the 4-uple (m, h, μ, c) contained
If c = 1 then B1 reports failure
in the H-List.
and aborts. Otherwise, the algorithm B1 returns
hxia = Axiμ as a valid signature on m.
After a number of queries, A1 comes up with a message
m(cid:2), that was never queried for signature for any signer,
an index i(cid:2) ∈ {1, . . . , N} and a Lth level forgery σ(cid:2)(L) =
2L−1. At this stage, B1 runs the ran-
(σ(cid:2)
dom oracle to obtain the 4-uple (m(cid:2), h(cid:2), μ(cid:2), c(cid:2)) contained in
the H-List and fails if c(cid:2) = 0. Otherwise, if σ(cid:2)(L) is valid,
it may be written
0 , . . . , σ2L−2
Bμ(cid:2)xi(cid:2) at1...tL−1, At1,...tL−1 , . . . , At1,
0 , . . . , σ2L−2
(cid:2)) ∈ G
(cid:2)) =
(σ(cid:2)
(cid:12)
(cid:13)
gt1 , . . . , gtL−1
which provides B1 with a valid tuple
1 , . . . , Da
(C1, . . . , CL−1, Da
L−1, Dab
1/μ(cid:2) xi(cid:2) , so that logg(Dj) =
L−1),
(cid:6)
L−1 = σ(cid:2)
0
j
where Dab
i=1 logg(Ci)
for j ∈ {1, . . . , L−1}. A similar analysis to [15, 13] gives the
announced bound on B1’s advantage if the optimal proba-
bility ζ = qs/(qs + 1) is used when answering hash queries.
Delegatee security. We also attack the (L − 1)-FlexDH
assumption using a delegatee security adversary A2. Given
an input pair (A = ga, B = gb), the simulator B2 proceeds
as B1 did in the proof of limited proxy security.
R← Z
System parameters and public keys: the target delega-
tee’s public key is X0 = A = ga. For i = 1, . . . , n,
∗
other public keys are set as Xi = gxi with xi
p.
Queries: A2’s hash and signing queries are handled exactly
as in the proof of limited proxy security. Namely, B2
fails if A2 asks for a signature on a message m for which
H(m) = Bμ and responds consistently otherwise.
When A2 outputs her forgery σ(cid:2)(L)
= (σ(cid:2)
2L−2) at
level L, B2 is successful if H(m(cid:2)) = Bμ(cid:2)
, for some μ(cid:2) ∈ Z
∗
p,
and extracts an admissible (2L−1)-uple as done in the proof
of limited proxy security.
Delegator security. This security property is proven under
the mCDH assumption. Given an adversary A3 with ad-
vantage ε, we outline an algorithm B3 that has probability
= g1/a, B = gb).
O(ε/qs) of ﬁnding gab given (g, A = ga, A
0 , . . . , σ(cid:2)
(cid:2)
R← Z
for some μ(cid:2) ∈ Z
Public key generation: as previously, the target public
key is deﬁned as X0 = A = ga. Remaining public keys
∗
are set as Xi = gxi for a random xi
p for i =
1, . . . , n. This time, A3 aims at producing a ﬁrst level
forgery and is granted all re-signature keys, including
R0j and Rj0. For indexes (i, j) s.t. i, j (cid:5)= 0, B3 sets
Rij = gxi/xj . If i = 0, it calculates R0j = A1/xj =
ga/xj . If j = 0 (and thus i (cid:5)= 0), B3 computes Ri0 =
(cid:2)xi = gxi/a to A3.
A
A3’s queries are dealt with exactly as for previous adver-
saries. Eventually, A3 produces a ﬁrst level forgery σ(cid:2)(1) for
a new message m(cid:2). Then, B3 can extract gab if H(m) =
∗
(gb)μ(cid:2)
p, which occurs with probability
O(1/qs) using Coron’s technique [15]. Otherwise, B3 fails.
External security. We ﬁnally show that an external secu-
rity adversary A4 also allows breaking the (L − 1)-FlexDH
assumption almost exactly as in the proof of limited proxy
security. The simulator B4 is given an instance (g, A =
ga, B = gb). As previously, B4 must “program” the random
oracle H hoping that its output will be H(m(cid:2)) = Bμ(cid:2)
(where
μ(cid:2) ∈ Z
∗
p is known) for the message m(cid:2) that the forgery σ(cid:2)(L)
pertains to. The diﬃculty is that B4 must also be able to
answer signing queries made on m(cid:2) for all but one sign-
ers. Therefore, B4 must guess which signer i(cid:2) will be A4’s
prey beforehand. At the outset of the game, it thus chooses
an index i(cid:2) R← {1, . . . , N}. Signer i(cid:2)’s public key is set as
Xi(cid:2) = A = ga. All other signers i (cid:5)= i(cid:2) are assigned public
keys Xi = gxi for which B4 knows the matching secret xi
and can thus always answer signing queries.
(cid:2)(1)
Hash queries and signing queries involving i(cid:2) are handled
as in the proof of limited proxy security. When faced with
a re-signing query from i to j for a valid signature σ((cid:3)) at
level (cid:2) ∈ {1, . . . , L}, B4 ignores σ((cid:3)) and simulates a ﬁrst level
signature for signer j. The resulting signature σ
is then
turned into a ((cid:2) + 1)th-level signature and given back to A4.
A re-signing query thus triggers a signing query that only
causes failure if H(m) diﬀers from gμ for a known μ ∈ Z
∗
p.
When A4 forges a signature at level L, B4 successfully ex-
tracts a (2L − 1)-Flexible Diﬃe-Hellman tuple (as B1 and
B2 did) if H(m(cid:2)) = (gb)μ(cid:2)
and if it correctly guessed the
identity i(cid:2) of the target signer. If A4’s advantage is ε, we
ﬁnd O(ε/(N (qs + qrs + 1))) as a lower bound on B4’s prob-
ability of success, qs and qrs being the number of signature
and re-signature queries respectively.
5. A SCHEME IN THE STANDARD MODEL
Several extensions of BLS signatures have a standard model
counterpart when Waters’ technique supersedes random or-
acle manipulations (e.g. [25]). Likewise, we can very simply
twist our method and achieve the ﬁrst unidirectional PRS
scheme (even including single hop ones) that avoids resort-
ing to the random oracle model.
The scheme is, mutatis mutandis, quite similar to our ﬁrst
construction. Standard model security thus comes at the ex-
pense of a trusted setup to generate system parameters.
5.1 The Single Hop Variant
As in [31], n denotes the length of messages to be signed.
Arbitrary long messages can be signed if we ﬁrst apply a
collision-resistant hash function with n-bit outputs, in which
case n is part of the security parameter.
The scheme requires a trusted party to generate common
public parameters. However, this party can remain oﬀ-line
after the setup phase.
Global-setup(λ, n): given security parameters λ, n, this al-