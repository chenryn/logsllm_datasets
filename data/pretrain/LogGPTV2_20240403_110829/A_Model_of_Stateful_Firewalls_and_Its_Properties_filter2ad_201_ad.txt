### II. Stateless and Stateful Firewalls

If a firewall \( f \) is stateless, then \( f.a = f.b \). To transform a stateful firewall into its stateless derivative, the stateful section is emptied, and the "insert" command is removed from every rule in the stateless section.

#### Example: Truly Stateless Firewall
Consider the firewall in Figure 9(a). This firewall accepts each packet where \( S \in \{0\} \) and \( D \in \{1\} \) in each reachable state, and discards all other packets in each reachable state. Thus, this firewall is truly stateless (although it is syntactically stateful). Therefore, this firewall can be simplified as shown in Figure 9(b).

**Figure 9(a):**
- **Stateful Section:**
  - \( R1: S = D \)
- **Stateless Section:**
  - \( r1: S \in \{0\} \land D \in \{1\} \land \text{tag} \in \text{all} \rightarrow \text{accept; insert} \)
  - \( r2: S \in \text{all} \land D \in \text{all} \land \text{tag} \in \text{all} \rightarrow \text{discard} \)

**Figure 9(b):**
- **Stateful Section:**
  - (Empty)
- **Stateless Section:**
  - \( r1: S \in \{0\} \land D \in \{1\} \land \text{tag} \in \text{all} \rightarrow \text{accept} \)
  - \( r2: S \in \text{all} \land D \in \text{all} \land \text{tag} \in \text{all} \rightarrow \text{discard} \)

**Figure 9.** A truly stateless firewall and its simplified version.

### 5.2 Stateless Derivatives

It is important for a firewall designer to verify whether a stateful firewall \( f \) is truly stateful. If \( f \) is truly stateless, it can be simplified into a stateless firewall. In this section, we identify a sufficient condition for verifying that a firewall is truly stateful. First, we introduce the concept of a stateless derivative of a firewall.

**Definition: Stateless Derivative**
The stateless derivative of a firewall \( f \) is obtained by emptying the stateful section and removing the "insert" command from every rule in the stateless section. For example, Figure 9(b) shows the stateless derivative of the firewall in Figure 9(a).

**Theorem 2: Relationship Between a Firewall and Its Stateless Derivative**
Let \( f \) be a firewall and \( g \) be its stateless derivative:
1. \( f.a \subseteq g.a \)
2. \( g.a = g.b \)
3. \( g.b \subseteq f.b \)

A firewall \( f \) is truly stateful if and only if \( f.a \) is a proper subset of \( f.b \); i.e., \( f.a \subset f.b \). A firewall \( f \) is truly stateless if and only if \( f.a = f.b \). Clearly, a stateless firewall is truly stateless, but a stateful firewall can either be truly stateful or truly stateless. A stateful firewall that is truly stateless can be simplified without changing its function.

**Verification of True Statefulness**
To prove that a firewall \( f \), whose stateless derivative is denoted \( g \), is truly stateful, the following two conditions must hold:
1. \( f.a = g.a \)
2. \( g.b \subset f.b \)

We call firewalls that satisfy the first condition conforming firewalls and those that satisfy the second condition proper firewalls.

### 6. Firewall Properties

In this section, we discuss how to verify that a firewall is conforming or proper.

#### 6.1 Conforming Firewalls

Before presenting a theorem on how to verify that a firewall is conforming, we need to introduce the concepts of complementary rules and accepting rules.

**Definitions:**
- **Complementary Rule:** A rule \( r \) in the stateless section of some firewall is complementary if the set \( St \) does not contain the value 0.
- **Accepting Rule:** A rule \( r \) is accepting if the decision of \( r \) contains the command "accept."

**Theorem 3: Verifying Conforming Firewalls**
A firewall \( f \) is conforming if every complementary rule in the stateless section of \( f \) is an accepting rule.

**Example:**
Consider the firewall in Figure 2. This firewall has only one complementary rule, which is \( r3: I \in \{0\} \land P \in \{\text{icmp}\} \land T \in \{\text{pong}\} \land \text{tag} \in \{1\} \rightarrow \text{accept} \). Since \( r3 \) is an accepting rule, this firewall is conforming.

#### 6.2 Proper Firewalls

Based on our experience, most firewalls are conforming. By Theorem 2, a conforming firewall is truly stateful if and only if it is proper. Next, we discuss how to verify that a firewall is proper.

**Definition: Proper Firewall**
A firewall is proper if its acceptable set is a proper superset of the acceptable set of its stateless derivative. For a firewall to be proper, we first need to ensure that its state does not remain empty forever. We call such firewalls grounded.

**Definition: Grounded Firewall**
A rule \( rk \) in the stateless section of a firewall is called a ground rule if:
1. \( rk \) is non-complementary.
2. The decision of \( rk \) is "accept; insert" or "accept; insert; remove."
3. \( \neg P1 \land \neg P2 \land \ldots \land \neg Pk-1 \land Pk \) is satisfiable by at least one packet.

A firewall is grounded if it has a ground rule.

**Example:**
Consider the firewall in Figure 4. The second rule in the stateless section is a ground rule because:
1. It is non-complementary.
2. Its decision is "accept; insert."
3. \( \neg P1 \land P2 \) is satisfiable. Therefore, this firewall is grounded.

For a grounded firewall to be proper, there must exist at least one packet \( p \) such that:
1. \( p \) is discarded by the stateless derivative of the firewall.
2. \( p \) can be accepted by the firewall in some state.

**Example:**
Consider the firewall in Figure 2. Assume each packet consists of the fields \( I, S, D, P, T, ID, \) and \( SN \). Consider the two packets \( p' \) and \( p \) in the table below. It is straightforward to verify that packet \( p \) is discarded by the stateless derivative of this firewall (because of rule \( r4 \)). At any state of this firewall, \( p' \) is accepted and inserted into the state because of rule \( r1 \). Because of the stateful rule \( R1 \) and the stateless rule \( r3 \), as long as \( p' \) is in the state, packet \( p \) is accepted. Therefore, this firewall is proper.

| Packet | I    | S            | D            | P      | T   | ID | SN  |
|--------|------|--------------|--------------|--------|-----|----|-----|
| \( p' \) | 1    | 192.1.2.4    | 192.32.1.2   | icmp   | ping| 10 | 200 |
| \( p \) | 0    | 192.32.1.2   | 192.1.2.4    | icmp   | pong| 10 | 200 |

### 7. Conclusions and Future Work

This paper is the first step in designing and analyzing stateful firewalls. Our contributions are twofold:
1. We propose the first model for specifying stateful firewalls, which opens doors to new research.
2. We present methods for analyzing stateful firewalls specified using our model, including a method for verifying whether a firewall is truly stateful.

Future work includes efficient implementation of this model and analysis of other properties of stateful firewalls.

### References

[1] E. Al-Shaer and H. Hamed. Discovery of policy anomalies in distributed firewalls. In IEEE INFOCOM’04, pages 2605–2616, March 2004.

[2] Y. Bartal, A. J. Mayer, K. Nissim, and A. Wool. Firmato: A novel firewall management toolkit. Technical Report EES2003-1, Dept. of Electrical Engineering Systems, Tel Aviv University, 2003.

[3] CheckPoint FireWall-1. http://www.checkpoint.com/. Date of access: March 25, 2005.

[4] Cisco PIX Firewalls. http://www.cisco.com/. Date of access: March 25, 2005.

[5] Cisco Reflexive ACLs. http://www.cisco.com/. Date of access: March 25, 2005.

[6] M. Frantzen, F. Kerschbaum, E. Schultz, and S. Fahmy. A framework for understanding vulnerabilities in firewalls using a dataflow model of firewall internals. Computers and Security, 20(3):263–270, 2001.

[7] M. G. Gouda and A. X. Liu. Firewall design: consistency, completeness, and compactness. In Proc. of the 24th IEEE International Conference on Distributed Computing Systems (ICDCS’04), pages 320–327.

[8] J. D. Guttman. Filtering postures: Local enforcement for global policies. In Proc. of IEEE Symp. on Security and Privacy, pages 120–129, 1997.

[9] S. Kamara, S. Fahmy, E. Schultz, F. Kerschbaum, and M. Frantzen. Analysis of vulnerabilities in internet firewalls. Computers and Security, 22(3):214–232, 2003.

[10] A. X. Liu and M. G. Gouda. Diverse firewall design. In Proc. of the International Conference on Dependable Systems and Networks (DSN’04), pages 595–604, June 2004.

[11] A. X. Liu, M. G. Gouda, H. H. Ma, and A. H. Ngu. Firewall queries. In Proc. of the 8th International Conference on Principles of Distributed Systems (OPODIS-04), pages 124–139, December 2004.

[12] A. Mayer, A. Wool, and E. Ziskind. Fang: A firewall analysis engine. In Proc. of IEEE Symp. on Security and Privacy, pages 177–187, 2000.

[13] Netfilter/IPTables. http://www.netfilter.org/. Date of access: March 25, 2005.

[14] J. Postel. Internet control message protocol. RFC 792, 1981.

[15] J. Postel and J. Reynolds. File transfer protocol. RFC 959, 1985.

[16] A. Wool. Architecting the Lumeta firewall analyzer. In Proc. of the 10th USENIX Security Symposium, pages 85–97, August 2001.

### Appendix

#### A. Proof of Theorem 2

**Proof of i:**
This assertion holds because \( f.a \) is the set of all packets that can be accepted in every reachable state of \( f \), and \( g.a \) is the set of all packets that can be accepted in the initial state of \( f \).

**Proof of ii:**
Note that \( g \) is a stateless firewall. By Theorem 1, this assertion holds.

**Proof of iii:**
This assertion holds because \( g.b \) is the set of all packets that can be accepted in the initial state of \( f \), and \( f.a \) is the set of all packets that can be accepted in some reachable state of \( f \).

#### B. Proof of Theorem 3

Given a firewall \( f \) and its stateless derivative \( g \), we know \( f.a \subseteq g.a \) according to Theorem 2. Next, we prove that if every complementary rule of \( f \) is accepting, then \( g.a \subseteq f.a \).

For any packet \( p \in g.a \), there is an accepting rule \( r \) whose predicate is of the form:
\[ F1 \in S1 \land \ldots \land Fd \in Sd \land \text{tag} \in St \]
such that \( 0 \in St \), and the packet \( p \) with tag value being 0 matches \( r \) but does not match any rule listed above \( r \). Because every complementary rule is an accepting rule, every packet with a certain tag value that satisfies:
\[ F1 \in S1 \land \ldots \land Fd \in Sd \land \text{tag} \in (D(\text{tag}) - St) \]
is accepted by the firewall. Here \( D(\text{tag}) \) denotes the domain of tag. So, no matter what the tag value of \( p \) is, \( p \) is accepted by \( f \). Therefore, \( p \in f.a \).

### Acknowledgements

We would like to thank David Taylor and the anonymous reviewers for their constructive comments on the early version of this paper.