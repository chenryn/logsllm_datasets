为此，C#提供了checked和unchecked运算符。如果把一个代码块标记为checked, CLR
就会执行溢出检查，如果发生溢出，就抛出OverflowException异常。下面修改上述代码，
使之包含checked运算符：
    byte b = 255;
    checked
    {
      b++;
    }
    WriteLine(b);
运行这段代码，就会得到一条错误信息：
    System.OverflowException: Arithmetic operation resulted in an overflow.
  注意： 用/checked编译器选项进行编译，就可以检查程序中所有未标记代码
的溢出。
如果要禁止溢出检查，则可以把代码标记为unchecked：
    byte b = 255;
    unchecked
    {
      b++;
    }
    WriteLine(b);
在本例中不会抛出异常，但会丢失数据——因为byte数据类型不能包含256，溢出的
位会被丢弃，所以b变量得到的值是0。
注意，unchecked是默认行为。只有在需要把几行未检查的代码放在一个显式标记为
checked的大代码块中时，才需要显式地使用unchecked关键字。
  注意： 默认编译设置是/unchecked，因为执行检查会影响性能。使用/checked
时，每一个算术运算的结果都需要验证其值是否越界。算术运算也可以用于使用i++的
for循环中。为了避免这种性能影响，最好一直使用默认的/ 
unchecked编译器设置，在
需要时使用checked运算符。
3. is运算符
is运算符可以检查对象是否与特定的类型兼容。短语“兼容”表示对象或者是该类型，
或者派生自该类型。例如，要检查变量是否与object类型兼容，可以使用下面的代码：
    int i = 10;
    if (i is object)
    {
      WriteLine("i is an object");
    }
int和所有C#数据类型一样，也从object继承而来；在本例中，表达式i is object将为
true，并显示相应的消息。
4. as运算符
as运算符用于执行引用类型的显式类型转换。如果要转换的类型与指定的类型兼容，
转换就会成功进行；如果类型不兼容，as运算符就会返回null值。如下面的代码所示，如
果object引用实际上不引用string实例，把object引用转换为string就会返回null：
    object o1 = "Some String";
    object o2 = 5;
    string s1 = o1 as string; // s1 = "Some String"
    string s2 = o2 as string; // s2 = null
as运算符允许在一步中进行安全的类型转换，不需要先使用is运算符测试类型，再执
行转换。
  注意： is和as运算符也用于继承，参见第4章。
5. sizeof运算符
使用sizeof运算符可以确定栈中值类型需要的长度（单位是字节）：
    WriteLine(sizeof(int));
其结果是显示数字4，因为int有4个字节长。
如果对复杂类型（而非基本类型）使用sizeof运算符，就需要把代码放在unsafe块中，
如下所示：
    unsafe
    {
      WriteLine(sizeof(Customer));
    }
第5章将详细论述不安全的代码。
6. typeof运算符
typeof运算符返回一个表示特定类型的System.Type对象。例如，typeof（string）返回
表示System.String类型的Type对象。在使用反射技术动态地查找对象的相关信息时，这个
运算符很有用。第16章将介绍反射。
7. nameof运算符
nameof是新的C# 6运算符。该运算符接受一个符号、属性或方法，并返回其名称。
这个运算符如何使用？一个例子是需要一个变量的名称时，如检查参数是否为null：
    public void Method(object o)
    {
      if (o == null) throw new ArgumentNullException(nameof(o)
);
当然，这类似于传递一个字符串来抛出异常，而不是使用nameof运算符。然而，如果
名称拼错，传递字符串并不会显示一个编译器错误。另外，改变参数的名称时，就很容易
忘记更改传递到ArgumentNullException构造函数的字符串。
    if (o == null) throw new ArgumentNullException("o");
对变量的名称使用nameof运算符只是一个用例。还可以使用它来得到属性的名称，例
如，在属性set访问器中触发改变事件（使用INotifyPropertyChanged接口），并传递属性
的名称。
    public string FirstName
    {
      get { return _firstName; }
      set
      {
        _firstName = value;
        OnPropertyChanged(nameof(FirstName)
);
      }
    }
nameof运算符也可以用来得到方法的名称。如果方法是重载的，它同样适用，因为所
有的重载版本都得到相同的值：方法的名称。
    public void Method()
    {
      Log($"{nameof(Method)
} called");
8. index运算符
前面的第7章中使用了索引运算符（括号）访问数组。这里传递数值2，使用索引运算
符访问数组arr1的第三个元素：
    int[] arr1 = {1, 2, 3, 4};
    int x = arr1[2]
; // x == 3
类似于访问数组元素，索引运算符用集合类实现（参见第11章）。
索引运算符不需要把整数放在括号内，并且可以用任何类型定义。下面的代码片段创
建了一个泛型字典，其键是一个字符串，值是一个整数。在字典中，键可以与索引器一起
使用。在下面的示例中，字符串first传递给索引运算符，以设置字典里的这个元素，然后
把相同的字符串传递给索引器来检索此元素：
    var dict = new Dictionary();
    dict["first"] = 1;
    int x = dict["first"];
  注意： 本章后面的“实现自定义索引运算符”一节将介绍如何在自己的类中创
建索引运算符。
9．可空类型和运算符
值类型和引用类型的一个重要区别是，引用类型可以为空。值类型（如int）不能为
空。把C#类型映射到数据库类型时，这是一个特殊的问题。数据库中的数值可以为空。
在早期的C#版本中，一个解决方案是使用引用类型来映射可空的数据库数值。然而，这
种方法会影响性能，因为垃圾收集器需要处理引用类型。现在可以使用可空的int来替代
正常的int。其开销只是使用一个额外的布尔值来检查或设置空值。可空类型仍然是值类
型。
在下面的代码片段中，变量i1是一个int，并给它分配1。i2是一个可空的int，给它分
配i1。可空性使用？与类型来定义。给int？分配整数值的方式类似于i1的分配。变量i3表
明，也可以给可空类型分配null。
    int i1 = 1;
    int? i2 = 2;
    int? i3 = null;
每个结构都可以定义为可空类型，如下面的long？和DateTime？所示：
    long? l1 = null;
    DateTime? d1 = null;
如果在程序中使用可空类型，就必须考虑null值在与各种运算符一起使用时的影响。
通常可空类型与一元或二元运算符一起使用时，如果其中一个操作数或两个操作数都是
null，其结果就是null。例如：
    int? a = null;
    int? b = a + 4;      // b = null
    int? c = a ＊ 5;     // c = null
但是在比较可空类型时，只要有一个操作数是null，比较的结果就是false。即不能因
为一个条件是false，就认为该条件的对立面是true，这种情况在使用非可空类型的程序中
很常见。例如，在下面的例子中，如果a是空，则无论b的值是+5还是-5，总是会调用else
子句：
    int? a = null;
    int? b = -5;
    if (a >= b)
    {
      WriteLine("a >= b");
    }
    else
    {
      WriteLine("a 。C#编译器把速记符号转换为泛型类型，减少输入量。
10．空合并运算符
空合并运算符（??）提供了一种快捷方式，可以在处理可空类型和引用类型时表示
null值的可能性。这个运算符放在两个操作数之间，第一个操作数必须是一个可空类型或
引用类型；第二个操作数必须与第一个操作数的类型相同，或者可以隐式地转换为第一个
操作数的类型。空合并运算符的计算如下：
● 如果第一个操作数不是null，整个表达式就等于第一个操作数的值。
● 如果第一个操作数是null，整个表达式就等于第二个操作数的值。
例如：
    int? a = null;
    int b;
    b = a ? ? 10;    // b has the value 10
    a = 3;
    b = a ? ? 10;    // b has the value 3
如果第二个操作数不能隐式地转换为第一个操作数的类型，就生成一个编译时错误。
空合并运算符不仅对可空类型很重要，对引用类型也很重要。在下面的代码片段中，
属性Val只有在不为空时才返回_val变量的值。如果它为空，就创建MyClass的一个新实
例，分配给val变量，最后从属性中返回。只有在变量_val为空时，才执行get访问器中表
达式的第二部分。
    private MyClass _val;
    public MyClass Val
    {
      get { return _val ? ? (_val = new MyClass());
    }
11．空值传播运算符
C# 6的一个杰出新功能是空值传播运算符。生产环境中的大量代码行都会验证空值条
件。访问作为方法参数传递的成员变量之前，需要检查它，以确定该变量的值是否为
null，否则会抛出一个NullReferenceException。.NET设计准则指定，代码不应该抛出这些
类型的异常，应该检查空值条件。然而，很容易忘记这样的检查。下面的这个代码片段验
证传递的参数p是否非空。如果它为空，方法就只是返回，而不会继续执行：
    public void ShowPerson(Person p)
    {
      if (p == null) return;
      string firstName = p.FirstName;
      //...
    }
使用空值传播运算符来访问FirstName属性（p? .FirstName），当p为空时，就只返回
null，而不继续执行表达式的右侧。
    public void ShowPerson(Person p)
    {
      string firstName = p? .FirstName;
      //...
    }
使用空值传播运算符访问int类型的属性时，不能把结果直接分配给int类型，因为结
果可以为空。解决这个问题的一种选择是把结果分配给可空的int：
    int? age = p? .Age;
当然，要解决这个问题，也可以使用空合并运算符，定义另一个结果（例如0），以
防止左边的结果为空：
    int age = p? .Age ? ? 0;
也可以结合多个空值传播运算符。下面访问Person对象的Address属性，这个属性又定
义了City属性。Person对象需要进行null检查，如果它不为空，Address属性的结果也不为
空：
    Person p = GetPerson();
    string city = null;
    if (p ! = null && p.Address ! = null)
    {
      city = p.Address.City;
    }
使用空值传播运算符时，代码会更简单：
    string city = p? .Address? .City;
还可以把空值传播运算符用于数组。在下面的代码片段中，使用索引运算符访问值为
null的数组变量元素时，会抛出NullReferenceException：
    int[] arr = null;
    int x1 = arr[0];
当然，可以进行传统的null检查，以避免这个异常条件。更简单的版本是使用？[0]访
问数组中的第一个元素。如果结果是null，空合并运算符就返回x1变量的值：
    int x1 = arr? [0] ? ? 0;
8.2.2 运算符的优先级和关联性
表8-3显示了C#运算符的优先级，其中顶部的运算符有最高的优先级（即在包含多个
运算符的表达式中，最先计算该运算符）。
表8-3
组
运算符
基本运算符
（）. [] x++ x-- new typeof sizeof checked unchecked
一元运算符
+ - ! ～ ++x --x和数据类型强制转换
乘/除运算符
* / %
加/减运算符
+-
移位运算符
>
关系运算符
= is as
比较运算符
== ! =
按位AND运算符
&
按位XOR运算符
^
按位OR运算符
|
条件AND运算符
&&
条件OR运算符
||
空合并运算符
？？
条件运算符
？:
赋值运算符和lambda
= += -= *= /= %= &= |= ^= >= >>>= =>
除了运算符优先级之外，对于二元运算符，需要注意运算符是从左向右还是从右到左
计算。除了少数运算符之外，所有的二元运算符都是左关联的。例如：
    x + y + z
就等于：
    (x + y) + z
需要先注意运算符的优先级，再考虑其关联性。在以下表达式中，先计算y和z相乘，
再把计算的结果分配给x，因为乘法的优先级高于加法：
    x + y ＊ z
关联性的重要例外是赋值运算符，它们是右关联。下面的表达式从右到左计算：
    x = y = z
因为存在右关联性，所有变量x、y、z的值都是3，且该运算符是从右到左计算的。如
果这个运算符是从左到右计算，就不会是这种情况：
    int z = 3;
    int y = 2;
    int x = 1;
    x = y = z;
一个重要的、可能误导的右关联运算符是条件运算符。表达式
    a ? b: c ? d: e
等于：
    a = b: (c ? d: e)
这是因为该运算符是右关联的。
  注意： 在复杂的表达式中，应避免利用运算符优先级来生成正确的结果。使
用圆括号指定运算符的执行顺序，可以使代码更整洁，避免出现潜在的冲突。
8.3 类型的安全性
第1章提到中间语言（IL）可以对其代码强制实现强类型安全性。强类型化支持.NET
提供的许多服务，包括安全性和语言的交互性。因为C#语言会编译为IL，所以C#也是强
类型的。此外，这说明数据类型并不总是可无缝互换。本节将介绍基本类型之间的转换。
  注意： C#也支持不同引用类型之间的轮换，在与其他类型相互转换时还允许
定义所创建的数据类型的行为方式。本章稍后将详细讨论这两个主题。
另一方面，泛型可以避免对一些常见的情形进行类型转换，详见第6章和第11章。
8.3.1 类型转换
我们常常需要把数据从一种类型转换为另一种类型。考虑下面的代码：
    byte value1 = 10;
    byte value2 = 23;