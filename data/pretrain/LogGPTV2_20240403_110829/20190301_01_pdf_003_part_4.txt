### 3.1.7 Comprehensive Example

The following example demonstrates the use of two triggers to send alerts when changes occur in the `dept` or `emp` tables. An anonymous block listens for these alerts and displays messages when an alert is received.

#### Triggers on `dept` and `emp` Tables

First, create the triggers on the `dept` and `emp` tables:

```sql
-- Trigger for dept table
CREATE OR REPLACE TRIGGER dept_alert_trig
AFTER INSERT OR UPDATE OR DELETE ON dept
DECLARE
    v_action VARCHAR2(25);
BEGIN
    IF INSERTING THEN
        v_action := ' added department(s) ';
    ELSIF UPDATING THEN
        v_action := ' updated department(s) ';
    ELSIF DELETING THEN
        v_action := ' deleted department(s) ';
    END IF;
    
    DBMS_ALERT.SIGNAL('dept_alert', USER || v_action || 'on ' || SYSDATE);
END;

-- Trigger for emp table
CREATE OR REPLACE TRIGGER emp_alert_trig
AFTER INSERT OR UPDATE OR DELETE ON emp
DECLARE
    v_action VARCHAR2(22);
BEGIN
    IF INSERTING THEN
        v_action := ' added employee(s) ';
    ELSIF UPDATING THEN
        v_action := ' updated employee(s) ';
    ELSIF DELETING THEN
        v_action := ' deleted employee(s) ';
    END IF;
    
    DBMS_ALERT.SIGNAL('emp_alert', USER || v_action || 'on ' || SYSDATE);
END;
```

#### Anonymous Block to Listen for Alerts

Next, execute the following anonymous block in a session while updates to the `dept` and `emp` tables occur in other sessions:

```sql
DECLARE
    v_dept_alert VARCHAR2(30) := 'dept_alert';
    v_emp_alert VARCHAR2(30) := 'emp_alert';
    v_name VARCHAR2(30);
    v_msg VARCHAR2(80);
    v_status INTEGER;
    v_timeout NUMBER(3) := 60;
BEGIN
    -- Register for alerts
    DBMS_ALERT.REGISTER(v_dept_alert);
    DBMS_ALERT.REGISTER(v_emp_alert);
    DBMS_OUTPUT.PUT_LINE('Registered for alerts dept_alert and emp_alert');
    DBMS_OUTPUT.PUT_LINE('Waiting for signal...');

    -- Loop to wait for alerts
    LOOP
        DBMS_ALERT.WAITANY(v_name, v_msg, v_status, v_timeout);
        EXIT WHEN v_status != 0;
        
        -- Display alert details
        DBMS_OUTPUT.PUT_LINE('Alert name : ' || v_name);
        DBMS_OUTPUT.PUT_LINE('Alert msg : ' || v_msg);
        DBMS_OUTPUT.PUT_LINE('Alert status : ' || v_status);
        DBMS_OUTPUT.PUT_LINE('----------------------------------------------');
    END LOOP;

    -- Final status
    DBMS_OUTPUT.PUT_LINE('Alert status : ' || v_status);
    DBMS_ALERT.REMOVEALL;
END;
```

#### Sample Changes and Output

The following changes are made by user `mary`:

```sql
INSERT INTO dept VALUES (50, 'FINANCE', 'CHICAGO');
INSERT INTO emp (empno, ename, deptno) VALUES (9001, 'JONES', 50);
INSERT INTO emp (empno, ename, deptno) VALUES (9002, 'ALICE', 50);
```

The following change is made by user `john`:

```sql
INSERT INTO dept VALUES (60, 'HR', 'LOS ANGELES');
```

The output displayed by the anonymous block receiving the signals from the triggers:

```
Registered for alerts dept_alert and emp_alert
Waiting for signal...
Alert name : dept_alert
Alert msg : mary added department(s) on 25-OCT-07 16:41:01
Alert status : 0
----------------------------------------------
Alert name : emp_alert
Alert msg : mary added employee(s) on 25-OCT-07 16:41:02
Alert status : 0
----------------------------------------------
Alert name : dept_alert
Alert msg : john added department(s) on 25-OCT-07 16:41:22
Alert status : 0
----------------------------------------------
Alert status : 1
```

### 3.2 DBMS_AQ

EDB Postgres Advanced Server Advanced Queueing provides message queuing and processing for the Advanced Server database. User-defined messages are stored in a queue, and a collection of queues is stored in a queue table. The `DBMS_AQADM` package is used to create and manage message queues and queue tables. The `DBMS_AQ` package is used to add or remove messages from a queue, and to register or unregister PL/SQL callback procedures.

#### SQL Commands for Extended Functionality

Advanced Server also provides extended (non-compatible) functionality for the `DBMS_AQ` package with the following SQL commands:
- `ALTER QUEUE`
- `ALTER QUEUE TABLE`
- `CREATE QUEUE`
- `CREATE QUEUE TABLE`
- `DROP QUEUE`
- `DROP QUEUE TABLE`

For detailed information about these SQL commands, please refer to the *Database Compatibility for Oracle Developers Reference Guide*.

#### Supported Procedures in DBMS_AQ

The `DBMS_AQ` package provides the following procedures:
- `ENQUEUE`: Post a message to a queue.
- `DEQUEUE`: Retrieve a message from a queue if or when a message is available.
- `REGISTER`: Register a callback procedure.
- `UNREGISTER`: Unregister a callback procedure.

#### Constants and Parameters

Advanced Server supports the following constants and parameters for the `DBMS_AQ` package:

| Constant | Description | For Parameters |
|----------|-------------|----------------|
| `DBMS_AQ.BROWSE (0)` | Read the message without locking. | `dequeue_options_t.dequeue_mode` |
| `DBMS_AQ.LOCKED (1)` | This constant is defined but will return an error if used. | `dequeue_options_t.dequeue_mode` |
| `DBMS_AQ.REMOVE (2)` | Delete the message after reading; the default. | `dequeue_options_t.dequeue_mode` |
| `DBMS_AQ.REMOVE_NODATA (3)` | This constant is defined but will return an error if used. | `dequeue_options_t.dequeue_mode` |
| `DBMS_AQ.FIRST_MESSAGE (0)` | Return the first available message that matches the search terms. | `dequeue_options_t.navigation` |
| `DBMS_AQ.NEXT_MESSAGE (1)` | Return the next available message that matches the search terms. | `dequeue_options_t.navigation` |
| `DBMS_AQ.NEXT_TRANSACTION (2)` | This constant is defined but will return an error if used. | `dequeue_options_t.navigation` |
| `DBMS_AQ.FOREVER (0)` | Wait forever if a message that matches the search term is not found; the default. | `dequeue_options_t.wait` |
| `DBMS_AQ.NO_WAIT (1)` | Do not wait if a message that matches the search term is not found. | `dequeue_options_t.wait` |
| `DBMS_AQ.ON_COMMIT (0)` | The dequeue is part of the current transaction. | `enqueue_options_t.visibility`, `dequeue_options_t.visibility` |
| `DBMS_AQ.IMMEDIATE (1)` | This constant is defined but will return an error if used. | `enqueue_options_t.visibility`, `dequeue_options_t.visibility` |
| `DBMS_AQ.PERSISTENT (0)` | The message should be stored in a table. | `enqueue_options_t.delivery_mode` |
| `DBMS_AQ.BUFFERED (1)` | This constant is defined but will return an error if used. | `enqueue_options_t.delivery_mode` |
| `DBMS_AQ.READY (0)` | Specifies that the message is ready to process. | `message_properties_t.state` |
| `DBMS_AQ.WAITING (1)` | Specifies that the message is waiting to be processed. | `message_properties_t.state` |
| `DBMS_AQ.PROCESSED (2)` | Specifies that the message has been processed. | `message_properties_t.state` |
| `DBMS_AQ.EXPIRED (3)` | Specifies that the message is in the exception queue. | `message_properties_t.state` |
| `DBMS_AQ.NO_DELAY (0)` | This constant is defined but will return an error if used. | `message_properties_t.delay` |
| `DBMS_AQ.NEVER (NULL)` | This constant is defined but will return an error if used. | `message_properties_t.expiration` |
| `DBMS_AQ.NAMESPACE_AQ (0)` | Accept notifications from DBMS_AQ queues. | `sys.aq$_reg_info.namespace` |
| `DBMS_AQ.NAMESPACE_ANONYMOUS (1)` | This constant is defined but will return an error if used. | `sys.aq$_reg_info.namespace` |

#### 3.2.1 ENQUEUE Procedure

The `ENQUEUE` procedure adds an entry to a queue. The signature is:

```plsql
ENQUEUE(
    queue_name IN VARCHAR2,
    enqueue_options IN DBMS_AQ.ENQUEUE_OPTIONS_T,
    message_properties IN DBMS_AQ.MESSAGE_PROPERTIES_T,
    payload IN type_name,
    msgid OUT RAW)
```

**Parameters:**
- `queue_name`: The name (optionally schema-qualified) of an existing queue. If you omit the schema name, the server will use the schema specified in the `SEARCH_PATH`. Unquoted identifiers are converted to lowercase before storing. To include special characters or use a case-sensitive name, enclose the name in double quotes.
- `enqueue_options`: A value of the type `enqueue_options_t`.
- `message_properties`: A value of the type `message_properties_t`.
- `payload`: The data that will be associated with the queue entry. The payload type must match the type specified when creating the corresponding queue table.
- `msgid`: A unique (system-generated) message identifier.

**Example:**

```plsql
DECLARE
    enqueue_options DBMS_AQ.ENQUEUE_OPTIONS_T;
    message_properties DBMS_AQ.MESSAGE_PROPERTIES_T;
    message_handle RAW(16);
    payload work_order;
BEGIN
    payload := work_order('Smith', 'system upgrade');
    DBMS_AQ.ENQUEUE(
        queue_name => 'work_order',
        enqueue_options => enqueue_options,
        message_properties => message_properties,
        payload => payload,
        msgid => message_handle
    );
END;
```

#### 3.2.2 DEQUEUE Procedure

The `DEQUEUE` procedure dequeues a message. The signature is:

```plsql
DEQUEUE(
    queue_name IN VARCHAR2,
    dequeue_options IN DBMS_AQ.DEQUEUE_OPTIONS_T,
    message_properties OUT DBMS_AQ.MESSAGE_PROPERTIES_T,
    payload OUT type_name,
    msgid OUT RAW)
```

**Parameters:**
- `queue_name`: The name (optionally schema-qualified) of an existing queue. If you omit the schema name, the server will use the schema specified in the `SEARCH_PATH`. Unquoted identifiers are converted to lowercase before storing. To include special characters or use a case-sensitive name, enclose the name in double quotes.
- `dequeue_options`: A value of the type `dequeue_options_t`.
- `message_properties`: A record of the type `message_properties_t` that will be populated with the properties of the dequeued message.
- `payload`: The data that will be associated with the queue entry. The payload type must match the type specified when creating the corresponding queue table.
- `msgid`: A unique (system-generated) message identifier.

**Supported Parameter Values:**
- `consumer_name`: Must be `NULL`.
- `dequeue_mode`: The locking behavior of the dequeue operation. Must be one of the following:
  - `DBMS_AQ.BROWSE`: Read the message without obtaining a lock.
  - `DBMS_AQ.LOCKED`: Read the message after acquiring a lock.
  - `DBMS_AQ.REMOVE`: Read the message before deleting the message.
  - `DBMS_AQ.REMOVE_NODATA`: Read the message but do not delete the message.
- `navigation`: Identifies the message that will be retrieved. Must be one of the following:
  - `FIRST_MESSAGE`: The first message within the queue that matches the search term.
  - `NEXT_MESSAGE`: The next message that is available that matches the search term.
- `visibility`: Must be `ON_COMMIT` – if you roll back the current transaction, the dequeued item will remain in the queue.
- `wait`: Must be a number larger than 0, or:
  - `DBMS_AQ.FOREVER`: Wait indefinitely.
  - `DBMS_AQ.NO_WAIT`: Do not wait.
- `msgid`: The message ID of the message that will be dequeued.
- `correlation`: Accepted for compatibility and ignored.
- `deq_condition`: A `VARCHAR2` expression that evaluates to a `BOOLEAN` value, indicating if the message should be dequeued.
- `signature`: Accepted for compatibility and ignored.
- `transformation`: Accepted for compatibility and ignored.
- `delivery_mode`: Must be `PERSISTENT`; buffered messages are not supported at this time.

---

This optimized text provides a clear, structured, and professional explanation of the `DBMS_AQ` package and its usage, including comprehensive examples and parameter details.