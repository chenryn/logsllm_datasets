The following anonymous block is similar to the one used in the WAITANY example
except the WAITONE procedure is used to receive the alert named, alert_test.
DECLARE
v_name VARCHAR2(30) := 'alert_test';
v_msg VARCHAR2(80);
v_status INTEGER;
v_timeout NUMBER(3) := 120;
BEGIN
DBMS_ALERT.REGISTER(v_name);
DBMS_OUTPUT.PUT_LINE('Registered for alert ' || v_name);
DBMS_OUTPUT.PUT_LINE('Waiting for signal...');
DBMS_ALERT.WAITONE(v_name,v_msg,v_status,v_timeout);
DBMS_OUTPUT.PUT_LINE('Alert name : ' || v_name);
DBMS_OUTPUT.PUT_LINE('Alert msg : ' || v_msg);
DBMS_OUTPUT.PUT_LINE('Alert status : ' || v_status);
DBMS_OUTPUT.PUT_LINE('Alert timeout: ' || v_timeout || ' seconds');
DBMS_ALERT.REMOVE(v_name);
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 35
Database Compatibility for Oracle® Developers
Built-in Package Guide
END;
Registered for alert alert_test
Waiting for signal...
Signal sent for alert_test sent by an anonymous block in a second session:
DECLARE
v_name VARCHAR2(30) := 'alert_test';
BEGIN
DBMS_ALERT.SIGNAL(v_name,'This is the message from ' || v_name);
DBMS_OUTPUT.PUT_LINE('Issued alert for ' || v_name);
END;
Issued alert for alert_test
First session is alerted, control returns to the anonymous block, and the remainder of the
code is executed:
Registered for alert alert_test
Waiting for signal...
Alert name : alert_test
Alert msg : This is the message from alert_test
Alert status : 0
Alert timeout: 120 seconds
3.1.7 Comprehensive Example
The following example uses two triggers to send alerts when the dept table or the emp
table is changed. An anonymous block listens for these alerts and displays messages
when an alert is received.
The following are the triggers on the dept and emp tables:
CREATE OR REPLACE TRIGGER dept_alert_trig
AFTER INSERT OR UPDATE OR DELETE ON dept
DECLARE
v_action VARCHAR2(25);
BEGIN
IF INSERTING THEN
v_action := ' added department(s) ';
ELSIF UPDATING THEN
v_action := ' updated department(s) ';
ELSIF DELETING THEN
v_action := ' deleted department(s) ';
END IF;
DBMS_ALERT.SIGNAL('dept_alert',USER || v_action || 'on ' ||
SYSDATE);
END;
CREATE OR REPLACE TRIGGER emp_alert_trig
AFTER INSERT OR UPDATE OR DELETE ON emp
DECLARE
v_action VARCHAR2(25);
BEGIN
IF INSERTING THEN
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 36
Database Compatibility for Oracle® Developers
Built-in Package Guide
v_action := ' added employee(s) ';
ELSIF UPDATING THEN
v_action := ' updated employee(s) ';
ELSIF DELETING THEN
v_action := ' deleted employee(s) ';
END IF;
DBMS_ALERT.SIGNAL('emp_alert',USER || v_action || 'on ' ||
SYSDATE);
END;
The following anonymous block is executed in a session while updates to the dept and
emp tables occur in other sessions:
DECLARE
v_dept_alert VARCHAR2(30) := 'dept_alert';
v_emp_alert VARCHAR2(30) := 'emp_alert';
v_name VARCHAR2(30);
v_msg VARCHAR2(80);
v_status INTEGER;
v_timeout NUMBER(3) := 60;
BEGIN
DBMS_ALERT.REGISTER(v_dept_alert);
DBMS_ALERT.REGISTER(v_emp_alert);
DBMS_OUTPUT.PUT_LINE('Registered for alerts dept_alert and emp_alert');
DBMS_OUTPUT.PUT_LINE('Waiting for signal...');
LOOP
DBMS_ALERT.WAITANY(v_name,v_msg,v_status,v_timeout);
EXIT WHEN v_status != 0;
DBMS_OUTPUT.PUT_LINE('Alert name : ' || v_name);
DBMS_OUTPUT.PUT_LINE('Alert msg : ' || v_msg);
DBMS_OUTPUT.PUT_LINE('Alert status : ' || v_status);
DBMS_OUTPUT.PUT_LINE('------------------------------------' ||
'-------------------------');
END LOOP;
DBMS_OUTPUT.PUT_LINE('Alert status : ' || v_status);
DBMS_ALERT.REMOVEALL;
END;
Registered for alerts dept_alert and emp_alert
Waiting for signal...
The following changes are made by user, mary:
INSERT INTO dept VALUES (50,'FINANCE','CHICAGO');
INSERT INTO emp (empno,ename,deptno) VALUES (9001,'JONES',50);
INSERT INTO emp (empno,ename,deptno) VALUES (9002,'ALICE',50);
The following change is made by user, john:
INSERT INTO dept VALUES (60,'HR','LOS ANGELES');
The following is the output displayed by the anonymous block receiving the signals from
the triggers:
Registered for alerts dept_alert and emp_alert
Waiting for signal...
Alert name : dept_alert
Alert msg : mary added department(s) on 25-OCT-07 16:41:01
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 37
Database Compatibility for Oracle® Developers
Built-in Package Guide
Alert status : 0
-------------------------------------------------------------
Alert name : emp_alert
Alert msg : mary added employee(s) on 25-OCT-07 16:41:02
Alert status : 0
-------------------------------------------------------------
Alert name : dept_alert
Alert msg : john added department(s) on 25-OCT-07 16:41:22
Alert status : 0
-------------------------------------------------------------
Alert status : 1
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 38
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.2 DBMS_AQ
EDB Postgres Advanced Server Advanced Queueing provides message queueing and
message processing for the Advanced Server database. User-defined messages are stored
in a queue; a collection of queues is stored in a queue table. Procedures in the
DBMS_AQADM package create and manage message queues and queue tables. Use the
DBMS_AQ package to add messages to a queue or remove messages from a queue, or
register or unregister a PL/SQL callback procedure.
Advanced Server also provides extended (non-compatible) functionality for the
DBMS_AQ package with SQL commands. Please see the Database Compatibility for
Oracle Developers Reference Guide for detailed information about the following SQL
commands:
 ALTER QUEUE
 ALTER QUEUE TABLE
 CREATE QUEUE
 CREATE QUEUE TABLE
 DROP QUEUE
 DROP QUEUE TABLE
The DBMS_AQ package provides procedures that allow you to enqueue a message,
dequeue a message, and manage callback procedures. The supported procedures are:
Function/Procedure Return Type Description
ENQUEUE n/a Post a message to a queue.
DEQUEUE n/a Retrieve a message from a queue if or when a message
is available.
REGISTER n/a Register a callback procedure.
UNREGISTER n/a Unregister a callback procedure.
Advanced Server's implementation of DBMS_AQ is a partial implementation when
compared to Oracle's version. Only those procedures listed in the table above are
supported.
Advanced Server supports use of the constants listed below:
Constant Description For Parameters
DBMS_AQ.BROWSE (0) Read the message without dequeue_options_t.dequeue_mode
locking.
DBMS_AQ.LOCKED (1) This constant is defined, but dequeue_options_t.dequeue_mode
will return an error if used.
DBMS_AQ.REMOVE (2) Delete the message after dequeue_options_t.dequeue_mode
reading; the default.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 39
Database Compatibility for Oracle® Developers
Built-in Package Guide
Constant Description For Parameters
DBMS_AQ.REMOVE_NODATA (3) This constant is defined, but dequeue_options_t.dequeue_mode
will return an error if used.
DBMS_AQ.FIRST_MESSAGE (0) Return the first available dequeue_options_t.navigation
message that matches the
search terms.
DBMS_AQ.NEXT_MESSAGE (1) Return the next available dequeue_options_t.navigation
message that matches the
search terms.
DBMS_AQ.NEXT_TRANSACTION This constant is defined, but dequeue_options_t.navigation
(2) will return an error if used.
DBMS_AQ.FOREVER (0) Wait forever if a message dequeue_options_t.wait
that matches the search term
is not found, the default.
DBMS_AQ.NO_WAIT (1) Do not wait if a message that dequeue_options_t.wait
matches the search term is
not found.
DBMS_AQ.ON_COMMIT (0) The dequeue is part of the enqueue_options_t.visibility,
current transaction. dequeue_options_t.visibility
DBMS_AQ.IMMEDIATE (1) This constant is defined, but enqueue_options_t.visibility,
will return an error if used. dequeue_options_t.visibility
DBMS_AQ.PERSISTENT (0) The message should be stored enqueue_options_t.delivery_mode
in a table.
DBMS_AQ.BUFFERED (1) This constant is defined, but enqueue_options_t.delivery_mode
will return an error if used.
DBMS_AQ.READY (0) Specifies that the message is message_properties_t.state
ready to process.
DBMS_AQ.WAITING (1) Specifies that the message is message_properties_t.state
waiting to be processed.
DBMS_AQ.PROCESSED (2) Specifies that the message message_properties_t.state
has been processed.
DBMS_AQ.EXPIRED (3) Specifies that the message is message_properties_t.state
in the exception queue.
DBMS_AQ.NO_DELAY (0) This constant is defined, but message_properties_t.delay
will return an error if used
DBMS_AQ.NEVER (NULL) This constant is defined, but message_properties_t.expiration
will return an error if used
DBMS_AQ.NAMESPACE_AQ (0) Accept notifications from sys.aq$_reg_info.namespace
DBMS_AQ queues.
DBMS_AQ.NAMESPACE_ANONYMOUS This constant is defined, but sys.aq$_reg_info.namespace
(1)
will return an error if used
3.2.1 ENQUEUE
The ENQUEUE procedure adds an entry to a queue. The signature is:
ENQUEUE(
queue_name IN VARCHAR2,
enqueue_options IN DBMS_AQ.ENQUEUE_OPTIONS_T,
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 40
Database Compatibility for Oracle® Developers
Built-in Package Guide
message_properties IN DBMS_AQ.MESSAGE_PROPERTIES_T,
payload IN ,
msgid OUT RAW)
Parameters
queue_name
The name (optionally schema-qualified) of an existing queue. If you omit the
schema name, the server will use the schema specified in the SEARCH_PATH.
Please note that unlike Oracle, unquoted identifiers are converted to lower case
before storing. To include special characters or use a case-sensitive name,
enclose the name in double quotes.
For detailed information about creating a queue, please see
DBMS_AQADM.CREATE_QUEUE.
enqueue_options
enqueue_options is a value of the type, enqueue_options_t:
DBMS_AQ.ENQUEUE_OPTIONS_T IS RECORD(
visibility BINARY_INTEGER DEFAULT ON_COMMIT,
relative_msgid RAW(16) DEFAULT NULL,
sequence_deviation BINARY INTEGER DEFAULT NULL,
transformation VARCHAR2(61) DEFAULT NULL,
delivery_mode PLS_INTEGER NOT NULL DEFAULT PERSISTENT);
Currently, the only supported parameter values for enqueue_options_t are:
visibility ON_COMMIT.
delivery_mode PERSISTENT
sequence_deviation NULL
Transformation NULL
relative_msgid NULL
message_properties
message_properties is a value of the type, message_properties_t:
message_properties_t IS RECORD(
priority BINARY_INTEGER NOT NULL DEFAULT 1
delay BINARY_INTEGER NOT NULL DEFAULT NO_DELAY,
expiration BINARY_INTEGER NOT NULL DEFAULT NEVER,
correlation VARCHAR2(128) DEFAULT NULL,
attempts BINARY_INTEGER
recipient_list AQ$_RECIPIENT_LIST_T,
exception_queue VARCHAR2(61) DEFAULT NULL,
enqueue_time DATE,
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 41
Database Compatibility for Oracle® Developers
Built-in Package Guide
state BINARY_INTEGER,
sender_id SYS.AQ$_AGENT DEFAULT NULL,
original_msgid RAW(16) DEFAULT NULL,
signature aq$_sig_prop DEFAULT NULL,
transaction_group VARCHAR2(30) DEFAULT NULL,
user_property SYS.ANYDATA DEFAULT NULL,
delivery_mode PLS_INTEGER NOT NULL DEFAULT
DBMS_AQ.PERSISTENT);
The supported values for message_properties_t are:
priority If the queue table definition includes a sort_list that
references priority, this parameter affects the order that
messages are dequeued. A lower value indicates a higher
dequeue priority.
delay Specify the number of seconds that will pass before a
message is available for dequeueing or NO_DELAY.
expiration Use the expiration parameter to specify the number of
seconds until a message expires.
correlation Use correlation to specify a message that will be associated
with the entry; the default is NULL.
attempts This is a system-maintained value that specifies the number
of attempts to dequeue the message.
recipient_list This parameter is not supported.
exception_queue Use the exception_queue parameter to specify the name
of an exception queue to which a message will be moved if it
expires or is dequeued by a transaction that rolls back too
many times.
enqueue_time enqueue_time is the time the record was added to the
queue; this value is provided by the system.
state This parameter is maintained by DBMS_AQ; state can be:
DBMS_AQ.WAITING – the delay has not been reached.
DBMS_AQ.READY – the queue entry is ready for processing.
DBMS_AQ.PROCESSED – the queue entry has been processed.
DBMS_AQ.EXPIRED – the queue entry has been moved to the
exception queue.
sender_id This parameter is not supported; specify a value of NULL.
original_msgid This parameter is accepted for compatibility and ignored.
signature This parameter is not supported; specify a value of NULL.
transaction_group This parameter is accepted for compatibility and ignored.
user_property This parameter is not supported; specify a value of NULL.
delivery_mode This parameter is not supported; specify a value of
DBMS_AQ.PERSISTENT.
payload
Use the payload parameter to provide the data that will be associated with the
queue entry. The payload type must match the type specified when creating the
corresponding queue table (see DBMS_AQADM.CREATE_QUEUE_TABLE).
msgid
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 42
Database Compatibility for Oracle® Developers
Built-in Package Guide
Use the msgid parameter to retrieve a unique (system-generated) message
identifier.
Example
The following anonymous block calls DBMS_AQ.ENQUEUE, adding a message to a queue
named work_order:
DECLARE
enqueue_options DBMS_AQ.ENQUEUE_OPTIONS_T;
message_properties DBMS_AQ.MESSAGE_PROPERTIES_T;
message_handle raw(16);
payload work_order;
BEGIN
payload := work_order('Smith', 'system upgrade');
DBMS_AQ.ENQUEUE(
queue_name => 'work_order',
enqueue_options => enqueue_options,
message_properties => message_properties,
payload => payload,
msgid => message_handle
);
END;
3.2.2 DEQUEUE
The DEQUEUE procedure dequeues a message. The signature is:
DEQUEUE(
queue_name IN VARCHAR2,
dequeue_options IN DBMS_AQ.DEQUEUE_OPTIONS_T,
message_properties OUT DBMS_AQ.MESSAGE_PROPERTIES_T,
payload OUT type_name,
msgid OUT RAW)
Parameters
queue_name
The name (optionally schema-qualified) of an existing queue. If you omit the
schema name, the server will use the schema specified in the SEARCH_PATH.
Please note that unlike Oracle, unquoted identifiers are converted to lower case
before storing. To include special characters or use a case-sensitive name,
enclose the name in double quotes.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 43
Database Compatibility for Oracle® Developers
Built-in Package Guide
For detailed information about creating a queue, please see
DBMS_AQADM.CREATE_QUEUE.
dequeue_options
dequeue _options is a value of the type, dequeue_options_t:
DEQUEUE_OPTIONS_T IS RECORD(
consumer_name VARCHAR2(30) DEFAULT NULL,
dequeue_mode BINARY_INTEGER DEFAULT REMOVE,
navigation BINARY_INTEGER DEFAULT NEXT_MESSAGE,
visibility BINARY_INTEGER DEFAULT ON_COMMIT,
wait BINARY_INTEGER DEFAULT FOREVER,
msgid RAW(16) DEFAULT NULL,
correlation VARCHAR2(128) DEFAULT NULL,
deq_condition VARCHAR2(4000) DEFAULT NULL,
signature aq$_sig_prop DEFAULT NULL,
transformation VARCHAR2(61) DEFAULT NULL,
delivery_mode PLS_INTEGER DEFAULT PERSISTENT)
Currently, the supported parameter values for dequeue_options_t are:
consumer_name Must be NULL.
dequeue_mode The locking behavior of the dequeue
operation. Must be either:
DBMS_AQ.BROWSE – Read the message
without obtaining a lock.
DBMS_AQ.LOCKED – Read the message after
acquiring a lock.
DBMS_AQ.REMOVE – Read the message
before deleting the message.
DBMS_AQ.REMOVE_NODATA – Read the
message, but do not delete the message.
Navigation Identifies the message that will be
retrieved. Must be either:
FIRST_MESSAGE – The first message
within the queue that matches the search
term.
NEXT_MESSAGE – The next message that is
available that matches the first term.
Visibility Must be ON_COMMIT – if you roll back the
current transaction the dequeued item will
remain in the queue.
Wait Must be a number larger than 0, or:
DBMS_AQ.FOREVER – Wait indefinitely.
DBMS_AQ.NO_WAIT – Do not wait.
Msgid The message ID of the message that will be
dequeued.
Correlation Accepted for compatibility, and ignored.
deq_condition A VARCHAR2 expression that evaluates to a
BOOLEAN value, indicating if the message
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 44
Database Compatibility for Oracle® Developers
Built-in Package Guide
should be dequeued.
signature Accepted for compatibility, and ignored.
transformation Accepted for compatibility, and ignored.
delivery_mode Must be PERSISTENT; buffered messages
are not supported at this time.