.\"tailq_foreach_reverse_safe,
.\"tailq_foreach_safe,
tailq_head,
tailq_head_initializer,
tailq_init,
tailq_insert_after,
tailq_insert_before,
tailq_insert_head,
tailq_insert_tail,
tailq_last,
tailq_next,
tailq_prev,
tailq_remove
.\"tailq_swap
\- implementation of a doubly linked tail queue
.sh synopsis
.nf
.b #include 
.pp
.b tailq_entry(type);
.pp
.b tailq_head(headname, type);
.bi "tailq_head tailq_head_initializer(tailq_head " head );
.bi "void tailq_init(tailq_head *" head );
.pp
.bi "int tailq_empty(tailq_head *" head );
.pp
.bi "void tailq_insert_head(tailq_head *" head ,
.bi "                         struct type *" elm ", tailq_entry " name );
.bi "void tailq_insert_tail(tailq_head *" head ,
.bi "                         struct type *" elm ", tailq_entry " name );
.bi "void tailq_insert_before(struct type *" listelm ,
.bi "                         struct type *" elm ", tailq_entry " name );
.bi "void tailq_insert_after(tailq_head *" head ", struct type *" listelm ,
.bi "                         struct type *" elm ", tailq_entry " name );
.pp
.bi "struct type *tailq_first(tailq_head *" head );
.bi "struct type *tailq_last(tailq_head *" head ", headname);"
.bi "struct type *tailq_prev(struct type *" elm ", headname, tailq_entry " name );
.bi "struct type *tailq_next(struct type *" elm ", tailq_entry " name );
.pp
.bi "tailq_foreach(struct type *" var ", tailq_head *" head ,
.bi "                         tailq_entry " name );
.\" .bi "tailq_foreach_from(struct type *" var ", tailq_head *" head ,
.\" .bi "                                tailq_entry " name );
.bi "tailq_foreach_reverse(struct type *" var ", tailq_head *" head ", headname,"
.bi "                         tailq_entry " name );
.\" .bi "tailq_foreach_reverse_from(struct type *" var ", tailq_head *" head ", headname,"
.\" .bi "                                tailq_entry " name );
.\" .pp
.\" .bi "tailq_foreach_safe(struct type *" var ", tailq_head *" head ,
.\" .bi "                                tailq_entry " name ,
.\" .bi "                                struct type *" temp_var );
.\" .bi "tailq_foreach_from_safe(struct type *" var ", tailq_head *" head ,
.\" .bi "                                tailq_entry " name ,
.\" .bi "                                struct type *" temp_var );
.\" .bi "tailq_foreach_reverse_safe(struct type *" var ", tailq_head *" head ,
.\" .bi "                                headname, tailq_entry " name ,
.\" .bi "                                struct type *" temp_var );
.\" .bi "tailq_foreach_reverse_from_safe(struct type *" var ", tailq_head *" head ,
.\" .bi "                                headname, tailq_entry " name ,
.\" .bi "                                struct type *" temp_var );
.pp
.bi "void tailq_remove(tailq_head *" head ", struct type *" elm ,
.bi "                         tailq_entry " name );
.pp
.bi "void tailq_concat(tailq_head *" head1 ", tailq_head *" head2 ,
.bi "                         tailq_entry " name );
.\" .bi "void tailq_swap(tailq_head *" head1 ", tailq_head *" head2 ", type,"
.\" .bi "                                tailq_entry " name );
.fi
.sh description
these macros define and operate on doubly linked tail queues.
.pp
in the macro definitions,
.i type
is the name of a user defined structure,
that must contain a field of type
.ir tailq_entry ,
named
.ir name .
the argument
.i headname
is the name of a user defined structure that must be declared
using the macro
.br tailq_head ().
.ss creation
a tail queue is headed by a structure defined by the
.br tailq_head ()
macro.
this structure contains a pair of pointers,
one to the first element in the queue
and the other to the last element in the queue.
the elements are doubly linked
so that an arbitrary element can be removed without traversing the queue.
new elements can be added to the queue
after an existing element,
before an existing element,
at the head of the queue,
or at the end of the queue.
a
.i tailq_head
structure is declared as follows:
.pp
.in +4
.ex
tailq_head(headname, type) head;
.ee
.in
.pp
where
.i struct headname
is the structure to be defined, and
.i struct type
is the type of the elements to be linked into the queue.
a pointer to the head of the queue can later be declared as:
.pp
.in +4
.ex
struct headname *headp;
.ee
.in
.pp
(the names
.i head
and
.i headp
are user selectable.)
.pp
.br tailq_entry ()
declares a structure that connects the elements in the queue.
.pp
.br tailq_head_initializer ()
evaluates to an initializer for the queue
.ir head .
.pp
.br tailq_init ()
initializes the queue referenced by
.pp
.br tailq_empty ()
evaluates to true if there are no items on the queue.
.ir head .
.ss insertion
.br tailq_insert_head ()
inserts the new element
.i elm
at the head of the queue.
.pp
.br tailq_insert_tail ()
inserts the new element
.i elm
at the end of the queue.
.pp
.br tailq_insert_before ()
inserts the new element
.i elm
before the element
.ir listelm .
.pp
.br tailq_insert_after ()
inserts the new element
.i elm
after the element
.ir listelm .
.ss traversal
.br tailq_first ()
returns the first item on the queue, or null if the queue is empty.
.pp
.br tailq_last ()
returns the last item on the queue.
if the queue is empty the return value is null.
.pp
.br tailq_prev ()
returns the previous item on the queue, or null if this item is the first.
.pp
.br tailq_next ()
returns the next item on the queue, or null if this item is the last.
.pp
.br tailq_foreach ()
traverses the queue referenced by
.i head
in the forward direction,
assigning each element in turn to
.ir var .
.i var
is set to null if the loop completes normally,
or if there were no elements.
.\" .pp
.\" .br tailq_foreach_from ()
.\" behaves identically to
.\" .br tailq_foreach ()
.\" when
.\" .i var
.\" is null, else it treats
.\" .i var
.\" as a previously found tailq element and begins the loop at
.\" .i var
.\" instead of the first element in the tailq referenced by
.\" .ir head .
.pp
.br tailq_foreach_reverse ()
traverses the queue referenced by
.i head
in the reverse direction,
assigning each element in turn to
.ir var .
.\" .pp
.\" .br tailq_foreach_reverse_from ()
.\" behaves identically to
.\" .br tailq_foreach_reverse ()
.\" when
.\" .i var
.\" is null, else it treats
.\" .i var
.\" as a previously found tailq element and begins the reverse loop at
.\" .i var
.\" instead of the last element in the tailq referenced by
.\" .ir head .
.\" .pp
.\" .br tailq_foreach_safe ()
.\" and
.\" .br tailq_foreach_reverse_safe ()
.\" traverse the list referenced by
.\" .i head
.\" in the forward or reverse direction respectively,
.\" assigning each element in turn to
.\" .ir var .
.\" however, unlike their unsafe counterparts,
.\" .br tailq_foreach ()
.\" and
.\" .br tailq_foreach_reverse ()
.\" permit to both remove
.\" .i var
.\" as well as free it from within the loop safely without interfering with the
.\" traversal.
.\" .pp
.\" .br tailq_foreach_from_safe ()
.\" behaves identically to
.\" .br tailq_foreach_safe ()
.\" when
.\" .i var
.\" is null, else it treats
.\" .i var
.\" as a previously found tailq element and begins the loop at
.\" .i var
.\" instead of the first element in the tailq referenced by
.\" .ir head .
.\" .pp
.\" .br tailq_foreach_reverse_from_safe ()
.\" behaves identically to
.\" .br tailq_foreach_reverse_safe ()
.\" when
.\" .i var
.\" is null, else it treats
.\" .i var
.\" as a previously found tailq element and begins the reverse loop at
.\" .i var
.\" instead of the last element in the tailq referenced by
.\" .ir head .
.ss removal
.br tailq_remove ()
removes the element
.i elm
from the queue.
.ss other features
.\" .br tailq_swap ()
.\" swaps the contents of
.\" .i head1
.\" and
.\" .ir head2 .
.\" .pp
.br tailq_concat ()
concatenates the queue headed by
.i head2
onto the end of the one headed by
.i head1
removing all entries from the former.
.sh return value
.br tailq_empty ()
returns nonzero if the queue is empty,
and zero if the queue contains at least one entry.
.pp
.br tailq_first (),
.br tailq_last (),
.br tailq_prev (),
and
.br tailq_next ()
return a pointer to the first, last, previous, or next
.i type
structure, respectively.
.pp
.br tailq_head_initializer ()
returns an initializer that can be assigned to the queue
.ir head .
.sh conforming to
not in posix.1, posix.1-2001, or posix.1-2008.
present on the bsds.
(tailq functions first appeared in 4.4bsd).
.sh bugs
.br tailq_foreach ()
and
.br tailq_foreach_reverse ()
don't allow
.i var
to be removed or freed within the loop,
as it would interfere with the traversal.
.br tailq_foreach_safe ()
and
.br tailq_foreach_reverse_safe (),
which are present on the bsds but are not present in glibc,
fix this limitation by allowing
.i var
to safely be removed from the list and freed from within the loop
without interfering with the traversal.
.sh examples
.ex
#include 
#include 
#include 
#include 
struct entry {
    int data;
    tailq_entry(entry) entries;             /* tail queue */
};
tailq_head(tailhead, entry);
int
main(void)
{
    struct entry *n1, *n2, *n3, *np;
    struct tailhead head;                   /* tail queue head */
    int i;
    tailq_init(&head);                      /* initialize the queue */
    n1 = malloc(sizeof(struct entry));      /* insert at the head */
    tailq_insert_head(&head, n1, entries);
    n1 = malloc(sizeof(struct entry));      /* insert at the tail */
    tailq_insert_tail(&head, n1, entries);
    n2 = malloc(sizeof(struct entry));      /* insert after */
    tailq_insert_after(&head, n1, n2, entries);
    n3 = malloc(sizeof(struct entry));      /* insert before */
    tailq_insert_before(n2, n3, entries);
    tailq_remove(&head, n2, entries);       /* deletion */
    free(n2);
                                            /* forward traversal */
    i = 0;
    tailq_foreach(np, &head, entries)
        np\->data = i++;
                                            /* reverse traversal */
    tailq_foreach_reverse(np, &head, tailhead, entries)
        printf("%i\en", np\->data);
                                            /* tailq deletion */
    n1 = tailq_first(&head);
    while (n1 != null) {
        n2 = tailq_next(n1, entries);
        free(n1);
        n1 = n2;
    }
    tailq_init(&head);
    exit(exit_success);
}
.ee
.sh see also
.br insque (3),
.br queue (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/rpc.3
.so man3/setbuf.3
.so man3/argz_add.3
.so man3/ctime.3
.\" this manpage is copyright (c) 2006 jens axboe
.\" and copyright (c) 2006 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th vmsplice 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
vmsplice \- splice user pages to/from a pipe
.sh synopsis
.nf
.br "#define _gnu_source" "         /* see feature_test_macros(7) */"
.b #include 
.pp
.bi "ssize_t vmsplice(int " fd ", const struct iovec *" iov ,
.bi "                 size_t " nr_segs ", unsigned int " flags );
.fi
.\" return type was long before glibc 2.7
.sh description
.\" linus: vmsplice() system call to basically do a "write to
.\" the buffer", but using the reference counting and vm traversal
.\" to actually fill the buffer. this means that the user needs to
.\" be careful not to reuse the user-space buffer it spliced into
.\" the kernel-space one (contrast this to "write()", which copies
.\" the actual data, and you can thus reuse the buffer immediately
.\" after a successful write), but that is often easy to do.
if
.i fd
is opened for writing, the
.br vmsplice ()
system call maps
.i nr_segs
ranges of user memory described by
.i iov
into a pipe.
if
.i fd
is opened for reading,
.\" since linux 2.6.23
.\" commit 6a14b90bb6bc7cd83e2a444bf457a2ea645cbfe7
the
.br vmsplice ()
system call fills
.i nr_segs
ranges of user memory described by
.i iov
from a pipe.
the file descriptor
.i fd
must refer to a pipe.
.pp
the pointer
.i iov
points to an array of
.i iovec
structures as defined in
.ir  :
.pp
.in +4n
.ex
struct iovec {
    void  *iov_base;        /* starting address */
    size_t iov_len;         /* number of bytes */
};
.ee
.in
.pp
the
.i flags
argument is a bit mask that is composed by oring together
zero or more of the following values:
.tp
.b splice_f_move
unused for
.br vmsplice ();
see
.br splice (2).
.tp
.b splice_f_nonblock
.\" not used for vmsplice
.\" may be in the future -- therefore eagain
do not block on i/o; see
.br splice (2)
for further details.
.tp
.b splice_f_more
currently has no effect for
.br vmsplice (),
but may be implemented in the future; see
.br splice (2).
.tp
.b splice_f_gift
the user pages are a gift to the kernel.
the application may not modify this memory ever,
.\" fixme . explain the following line in a little more detail:
otherwise the page cache and on-disk data may differ.
gifting pages to the kernel means that a subsequent
.br splice (2)
.b splice_f_move
can successfully move the pages;
if this flag is not specified, then a subsequent
.br splice (2)
.b splice_f_move
must copy the pages.
data must also be properly page aligned, both in memory and length.
.\" fixme
.\" it looks like the page-alignment requirement went away with
.\" commit bd1a68b59c8e3bce45fb76632c64e1e063c3962d
.\"
.\" .... if we expect to later splice_f_move to the cache.
.sh return value
upon successful completion,
.br vmsplice ()
returns the number of bytes transferred to the pipe.
on error,
.br vmsplice ()
returns \-1 and
.i errno
is set to indicate the error.
.sh errors
.tp
.b eagain
.b splice_f_nonblock
was specified in
.ir flags ,
and the operation would block.
.tp
.b ebadf
.i fd
either not valid, or doesn't refer to a pipe.
.tp
.b einval
.i nr_segs
is greater than
.br iov_max ;
or memory not aligned if
.b splice_f_gift
set.
.tp
.b enomem
out of memory.
.sh versions
the
.br vmsplice ()
system call first appeared in linux 2.6.17;