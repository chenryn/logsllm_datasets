sending inputs to target, 250 implementation of, 235–36
target monitoring, 250–51 instrumentation, 236
Fuzzing tools overview, 161–62
as part of SDLC, 27 Pin API, 237
usability, 34 pros and cons, 240
See also specific tools register example, 237–40
Fuzzing vectors, 141–42 workflow, 235–36
Fuzz test cases, 32 Input generation, 249–50
Fuzz traffic generation, 296 Input source, 137
Input space
coverage, 91
G
coverage metrics, 127–29
General Purpose Fuzzer (GPF), 254 defined, 62
General-purpose fuzzers, 137 dynamic protocols and, 129
Generic fuzzers, 137, 151–52 as infinite, 127–28
Goals, this book, 35 Input verification, 66–67
Golden FTP server (GFTP), 231, 232–33 Insure++
Google’s ClusterFuzz, 243–44 defined, 183
Gray-box fuzzing, 144–45 illustrated, 193, 194
GS, 69 information availability, 192
Guard Malloc PCRE case study, 199, 200
drawbacks, 181–82 test program, 192–93
environment variables and, 181 Integer errors, 47–49
implementation, 180–81 Intelligent fuzzing, 142–43
PCRE case study, 197–98 Interface
test program, 190–91 exposed through vulnerability, 125, 126
6760 Book.indb 313 12/22/17 10:50 AM
314 Index
Interface (Cont.) N
fuzzer classification via, 162–65
Negative testing
identification, 249
forms of, 96–97
Interface coverage, 91–92, 127
fuzzing and, 26
Interoperability testing, 90
pass-fail criteria, 18
IPS filtering method, 123
types of, 129
IP Stack Integrity Checker (ISIC), 165
Network equipment manufacturer fuzzing,
ISAKMP/IKE, 111
293–95
IT security engineers, 43–44
Network interfaces, 162
IUT (implementation under test), 16
Network protocols, 8
Network switch fuzzing, 293
K No disclosure model, 5
No Drop Fuzz Test, 283
Known vulnerability density, 130, 131
No Drop Throughput Test, 283
Nonexploitation vulnerability scanners,
L 38–39
LibFuzzer
defined, 216 O
example fuzz target function, 216
Off-by-one, 49–50
output, 219
OllyDbg, 178
target function execution, 217
Open BSD, 182
Library
OpenSSL conformance test suite, 131
defined, 140
Open Web Application Security Project
interception, 180–82
(OWASP), 105, 106
Load testing, 92
Operating system logs, 185–86
Local program fuzzing, 162
Organization, this book, 35
M p
Man in the middle (MTM) attack, 56 Partial disclosure model, 5
Memory corruption, 169 Patch
Memory corruption errors deployment, cost of, 117–19
defined, 44–45 verification, 118
format string errors, 45–47 PAX, 70–71
heap overflow, 50 Peach Fuzzer, 148–49, 150
integer errors, 47–49 Penetration testers, 43
off-by-one, 49–50 Performance testing, 18, 90
other memory overwrites, 51–52 Perl Compatible Regular Expression (PCRE)
stack or heap variable overwrites, 51 case study
stack overflows, 45 AddressSanitizer, 199–201
See also Bug categories Guard Malloc, 197–98
Memory-related vulnerabilities, 169–70 Insure++, 199, 200
Metadata injection vulnerabilities, 168–69 overview, 196–97
Metric categories, 115 Valgrind, 198–99
Mobile phone fuzzing, 294–95 PHP file inclusions, 52–53
Model-based fuzzers, 30 Pin API, 237
Mu-4000, 256 PNGs, 289–90
Mutation-based fuzzing, 210 Pool crossover, 226–27
6760 Book.indb 314 12/22/17 10:50 AM
Index 315
Pool mutation, 227 r
Positive testing, 17–18
Race condition, 55
Prerequisites, 125, 126
Random fuzzing, 138–39
Previous vulnerabilities, coverage of, 121–23
Reactive post-deployment solutions, 10–11
Principle of least privilege, 66
Register Monitor, 173
Proactive security
Regression testing, 98–99
cost of discovery and, 108–14
Remediation, cost of, 114–15
cost of patch deployment and, 117–19
Remote file inclusion (RFI), 52
cost of remediation and, 114–15
Remote interfaces, 7–8
cost of security compromises and, 115–17
Remote monitoring, 175–76
marketing terms, 10
Reporting, 251
overview, 10–12
Retrospective testing, 252
transition to, 107–19
Reverse engineering, 57–59
Process Explorer, 174–75
Robustness testing
Process metrics, 132–33
as black-box testing category, 90–91
Product life cycle phases, 107
defined, 18
Product line testing (PLT), 87
fuzzing versus, 98
Protocol knowledge, 272
purpose of, 97
Protocol-specific fuzzers, 149–51
steps in, 97–98
PROTOS project, 12, 25, 76–77, 149
Rough Auditing Tool for Security (RATS),
ProxyFuzz
60–61
defined, 151, 255
as generic fuzzer, 151–52
number of minutes to find SNMP bugs, 276 S
overview, 255
SafeSEH, 69–70
Proxy fuzzing, 282
SAGE
PyDbg, 178–79
defined, 210
limitations, 211
in mutation-based fuzzing, 210
Q
positive functioning of, 211–12
QA leader, 87–88 symbolic execution with, 210–12
QA technical leader, 88 SCADA fuzzing, 296–97, 306
Quality Secure bit, 67
as feedback loop to development, 78 Secure input/output handing, 66
as finding defects, 78 Security
measuring, 75–79 compromises, cost of, 115–17
software, 13–22 defect metrics and, 119–33
testing for, 79–81 defects, 75
as validation of features, 75–78 goals, 12
Quality assurance (QA) incidents, 4
in defects reduction, 78 industrial control systems (ICS), 297, 300
end users’ perspective, 79 mistakes, reasons behind, 9
fuzzing and, 12, 13–14 proactive, 10–12, 107–19
perspective, 1 quality assurance (QA) and, 73–75
security and, 73–75 requirements, 12
as software development metric, 79 in software development, 74
in validation of development correctness, test automation for, 133–34
78 vulnerability scanners and, 38–40
Quality control, 66 See also Software security
6760 Book.indb 315 12/22/17 10:50 AM
316 Index
Security researchers, 42–43 Software vulnerability analysis. See
Security scanners, 93 Vulnerability analysis
SEH overwrite, 69 Source code auditing, 60–61
Session crossover, 224–25 Source code reviews, 65
Session hijacking, 56 Source code transformation, 183
Session mutation, 225–26 Specification coverage, 91
Simulated vulnerability discovery, 253 SQL injections, 53, 169
Single-user fuzzers, 145–46 StackGuard, 71
SIP Methods, 122 Stack or heap variable overwrites, 51
SMT solver, 242 Stack overflows, 45
SNMP Stack traces, 186–87
bugs in testing, 265–68 Stimulation-based fuzzers, 30
fuzzing tests, 272 Strace utility, 172
remote monitoring and, 175–76 Stress testing, 92–93
results, 261 Structural testing, 20–21, 81–82
as target, 258 Structured query language (SQL), 53
transactions, 272 Suite Wizard, example project created with,
Software Assurance Metrics and Tool 205–8
Evaluation (SAMATE), 131 Sulley, 146–48
Software defect reduction, 14 SUT (system under test), 16, 102
Software DEP, 69 Syntax testing
Software development life cycle (SDLC), 10, anomalies produced in, 96
27, 73, 101 background, 94–95
Software overflow protection description of the syntax and, 95
ASLR, 69 purpose of, 95
Control Flow Guard (CFG), 71 System administration (SA), 1
GS, 69 System monitoring, 172–75
PAX and ExecShield, 70–71 System recovery metrics, 117
software DEP, 69
StackGuard, 71
T
Software quality
code auditing and, 21–22 Target monitoring
cost-benefit of, 14–16 advanced methods, 180–84
functional testing and, 21 application monitoring, 176–80
overview, 13–14 binary stimulation, 182–83
structural testing and, 20–21 case study, 196–201
target of test and, 16 commercial fuzzer monitoring solutions,
testing purposes and test verdicts and, 176
16–19 compiler instrumentation, 183–84
See also Quality; Quality assurance (QA) deduplication, 185–87
Software security in fuzzing life cycle, 250–51
attack surfaces and vectors and, 6 library interception, 180–82
disclosure processes and, 5–6 methods of, 170–80
overview, 2–4 overview, 184
proactive, 10–12 remote monitoring, 175–76
reasons behind mistakes, 9–10 source code transformation, 183
requirements, 12 system monitoring, 172–75
security incident and, 4–5 test program, 187–96
Software security testers, 43 valid case instrumentation, 170–71
Software Testing Techniques, 73 virtualization, 184
6760 Book.indb 316 12/22/17 10:50 AM
Index 317
Template-based fuzzers, 30 techniques, 104
Test threat databases, 105
fuzz, typical results of, 32 threat trees, 104
target of, 16 Threat databases, 105
verdicts, 16–19 Threat trees, 104
Test automation Torture tests, 76
arguments against, 133 Trust boundary, 62
fuzzing and, 136
goals of, 133
U
purposes of, 113
for security, 133–34 Unit testing, 93
usage of tools and, 114 Uptime metrics, 116
Test automation engineer, 88 UUT (unit under test), 16
Test cases
defined, 140
V
generator information, 185
initial, importance of, 271 Valgrind
test program, 188–90 advantages over Guard Malloc, 183
Test engineer/designer, 88 defined, 182
Testing Memcheck tool, 182–83
black-box, 17, 85–99 output, 187, 191
categories, 81–82 PCRE case study, 198–99
conformance, 89 test program, 191–92
in continuous integration (CI), 99–100 Validation, 13
on developer’s desktop, 80–81 Valid case instrumentation, 170–71
feature, 17–18 Verification
functional, 21, 81–82 defined, 13
interoperability, 90 patch, 118
load, 92 Verification and validation (V&V), 13, 102
negative, 18, 26, 96–98, 129 Virtualization, 184
performance, 18, 90 Virtual private network (VPN), 281, 284
positive, 17–18 V-model, 79–80
purposes, 16–19 VMware, 184
for quality, 79–81 VoIP fuzzing, 285–86
regression, 98–99 VPN fuzzing, 284–85
retrospective, 252 Vulnerabilities
robustness, 18, 26, 90–91, 97–98 coverage of previous, 121–23
stress, 92–93 flaw types and, 37
structural, 20–21, 81–82 found with fuzzing, 27
syntax, 94–96 interconnected wireless network, 9–10
unit, 93 memory-related, 169–70
validation versus defect, 81 metadata injection, 168–69
white-box, 82–85 mobility and, 10
Test suites, 33–34 security implications, 6
The Art of Fuzzing (TAOF), 153, 154–56, 255 Vulnerability analysis
Threat analysis basic bug categories and, 44–57
ad hoc threat identification, 105–7 bug hunting techniques and, 57–61
components of, 103 defenses and, 64–71
defined, 103 defined, 37
existing risk analysis and, 104 fuzzing and, 61–64, 102
6760 Book.indb 317 12/22/17 10:50 AM
318 Index
Vulnerability analysis (Cont.) W
hackers and, 42
Web application fuzzing, 290–91
IT security engineers and, 43–44
Web applications
overview, 37–38
as bug category, 52–55
penetration testers and, 43
cross-site scripting (XSS), 54
people conducting, 40–44
PHP file inclusions, 52–53
practices of, 101–2
as remote interface for testing, 7
purpose of, 38–40
SQL injections, 53
security researchers and, 42–43
XPath, XQuery, and other injection attacks,
software security testers and, 43
54
target software, 44
Web fuzzing, 164
Vulnerability analysts, 42–43
White-box fuzzing, 144–45
Vulnerability assessment (VA), 1
White-box testing
Vulnerability risk metrics
code auditing, 82–85
business impact, 124, 125
code readability, 82
category of the compromise, 125
inspections and reviews, 82
criticality rating, 124, 125
WiFi fuzzing, 287–88
exploitability rating, 124, 125
Wireless infrastructure, 8, 9–10
interface exposed through vulnerability,
125, 126
prerequisites, 125, 126 X
use of, 126–27
XPath, 54
Vulnerability scanners
XQuery, 54
defined, 38
exploitation, 39–40
nonexploitation, 38–39
6760 Book.indb 318 12/22/17 10:50 AM