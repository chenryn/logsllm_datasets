program hang).  
The  program  produces  incorrect  output.  No  error 
has  been  signaled  or  the  program  claims  to  have 
recovered from the error. 
When presenting the results in this section, we use two 
types  of  aggregated  measures.  One  is  the  coverage  for  a 
given  result  class.  Let  N  denote  the  total  number  of 
experiments  in  a  fault  injection  campaign  and  #X  the 
number of experiment in result class X. The coverage for a 
class X is then defined as: 
 (cid:1829)(cid:1867)(cid:1874)(cid:1857)(cid:1870)(cid:1853)(cid:1859)(cid:1857)(cid:3025) (cid:3404)#(cid:1850)(cid:1840) (cid:3404)
(cid:3404)
#(cid:1829)(cid:1845)(cid:1849)(cid:3397)#(cid:1830)(cid:1845)(cid:1849)(cid:3397)#(cid:1830)(cid:1834)(cid:1849)(cid:3397)#(cid:1846)(cid:1841)(cid:3397)#(cid:1848)(cid:1832)(cid:3397)#(cid:1840)(cid:1831) 
#(cid:1850)
For 
is  an  estimate  of 
instance,  CoverageDSW 
the 
probability  that  the  software  mechanisms  in  question  will 
detect an error caused by an injected fault. Comparing this 
measure  between  the  different  implementations  reveals 
effects  on  the  effectiveness  of  the  software  mechanisms 
caused  by  implementation  languages  and  optimization 
levels.  The  second  aggregated  measure  that  we  use  is  the 
total  coverage  of  all  mechanisms  for  error  detection  and 
recovery  (CoverageTotal).  This  measure  serves  to  reveal  the 
impact that the different languages and optimization levels 
have  on  the  overall  fault  coverage  of  the  system.  The 
measure is defined as: 
 (cid:1829)(cid:1867)(cid:1874)(cid:1857)(cid:1870)(cid:1853)(cid:1859)(cid:1857)(cid:3021)(cid:3042)(cid:3047)(cid:3028)(cid:3039) (cid:3404)
#(cid:1840)(cid:1831)(cid:3397)#(cid:1829)(cid:1845)(cid:1849)(cid:3397)#(cid:1830)(cid:1845)(cid:1849)(cid:3397)#(cid:1830)(cid:1834)(cid:1849)(cid:3397)#(cid:1846)(cid:1841)
#(cid:1840)(cid:1831)(cid:3397)#(cid:1829)(cid:1845)(cid:1849)(cid:3397)#(cid:1830)(cid:1845)(cid:1849)(cid:3397)#(cid:1830)(cid:1834)(cid:1849)(cid:3397)#(cid:1846)(cid:1841)(cid:3397)#(cid:1848)(cid:1832)(cid:3404)
(cid:3404)
(cid:3404)1(cid:3398)#(cid:1848)(cid:1832)(cid:1840)  
In  other  words,  CoverageTotal  is  an  estimate  of  the 
probability that an injected fault will not cause a silent data 
corruption. Apart from the hardware and software detection 
mechanisms, CoverageTotal also includes the errors having no 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:29:31 UTC from IEEE Xplore.  Restrictions apply. 
308effect (NE) on the system and those causing the experiment 
to time out (TO).  
NE  is  a  measure  of  the  target  programâ€™s  internal 
robustness  to  faults,  and  hence  contributes  to  the  overall 
fault  tolerance  of  the  system  although  no  active  detection 
mechanism is involved. TO is a class of errors causing the 
program  not  to  produce  output  within  a  reasonable  time 
frame.  Most  often  this  is  caused  by  the  execution  being 
stuck  in  an  infinite  loop.  The  standard  way  to  detect  this 
class  of  errors  is  to  use  a  watchdog  timer.  In  our 
experiments no watchdog timer was implemented as part of 
the  system  under  test.  The  errors  in  the  class  were  instead 
detected by a watchdog timer in our fault injection tool. We 
assume  that  these  errors  can  be  detected  by  a  regular 
watchdog timer, and hence we classify them as covered. 
The  following  sections  present  the  results.  They  are 
organized  as  follows.  Section  V.A  presents  the  results  for 
the  two  target  programs  without  software  mechanisms  for 
fault tolerance. The results for the DS-CFC mechanism are 
presented  in  Section  V.B,  and  the  results  for  the  TTR-FR 
mechanism are given in Section V.C.  
Section V.D compares the fault coverage obtained with 
the two compiler optimization levels. Section V.E presents 
memory consumption and execution time overhead data for 
the different program implementations. 
A.  Fault coverage without software mechanisms 
The  column  marked  NE 
Table IV presents the results of experiments conducted 
with  programs  without  software  mechanisms  for  fault 
tolerance.  We  will  use  these  results  as  a  reference  later  in 
this  section  when  we  discuss  the  relative  improvement  in 
fault coverage provided by the software mechanisms.  
in  Table  IV  gives 
the 
percentage  of  faults  that  have  no  effect.  As  already 
mentioned, NE is a measure of the implicit redundancy of a 
program. The percentage of NE errors is around 35% for the 
brake-by-wire application, while it varies between 3.4% and 
11.7%  for  the  Fibonacci  application.  As  discussed  in 
Section  III.A  the  Fibonacci  algorithm  was  selected  to 
minimize the amount of NE errors. These results show that 
this indeed is true.  
From  Table  IV,  we  can  also  see  that  the  hardware 
exceptions  (DHW)  detect  a  significant  proportion  of  the 
errors, while few errors result in program hangs (TO). The 
total  detection  coverage  shown  in  the  rightmost  column  is 
around  80%  for  the  brake-by-wire  application.  Thus,  the 
remaining 20% of the injected faults result in non-detected 
value  failures  for 
the  brake-by-wire  application.  The 
percentage of non-detected value failures for the Fibonacci 
application is approximately 26% for low optimization and 
60%  for  high  optimization.  The  higher  percentage  of  non-
detected  failures  when  using  high  optimization  is  mainly 
due  to  the  lower  coverage  of  the  hardware  exceptions 
(DHW).  The  Fibonacci  application,  when  compiled  on  its 
own  without  added  fault  tolerance  mechanisms,  is  small 
enough that the optimizations can reduce it  to a single  loop  
TABLE IV.  
FAULT COVERAGE FOR PROGRAMS WITHOUT SOFTWARE-
IMPLEMENTED FAULT TOLERANCE 
TO 
1.4%
0.4%
0.1%
0.0%
Total
73.5%
80.1%
39.7%
79.8%
DHW 
60.4% 
46.4% 
36.4% 
43.3% 
NE 
11.7% 
33.3% 
3.4% 
36.4% 
Coverage 
Low optimization level 
   Fibonacci 
   Brake-by-wire 
High optimization level 
   Fibonacci 
   Brake-by-wire 
with  no  branches  and  no  memory  operations.  This  leaves 
few  opportunities  for  the  hardware  mechanisms  to  detect 
errors.  The  errors  that  are  detected  are  some  jumps  out  of 
the  program  loop  due  to  faults  injected  in  the  program 
counter.  
B.  Results for the DS-CFC mechanism 
This  section  presents  the  results  of  the  fault  injection 
campaigns conducted with programs equipped the DS-CFC 
mechanism.  We  first  present  the  results  obtained  for 
programs compiled with the low level of optimization, and 
then  the  results  for  those  compiled  with  the  high  level  of 
optimization. 
is  more  efficient  for 
1)  Experiments using low compiler optimization level 
From  the  results  presented  in  Table  V,  we  see  that  the 
fault  detection  coverage  of 
the  DS-CFC  mechanism 
(CoverageDSW) is between 17% and 36%. We also see that 
the  mechanism 
the  Fibonacci 
application  than  for  the  brake-by-wire  application.  This 
result is expected because the Fibonacci program has shorter 
functions than the brake-by-wire application. The DS-CFC 
mechanisms  detects  unintended  jumps  between  different 
functions  but  is  not  built  to detect jumps  within  functions. 
Hence, this mechanism is expected to have higher coverage 
for  programs  that  consist  of  short  functions  compared  to 
programs that consist of large functions. 
The  total  coverage  obtained  is  between  89%  and  95%. 
This  is  a  significant  improvement  compared  to  the  total 
coverage  obtained  with  programs  without 
software 
implemented error detection, cf. Table 4.  
We can also see that the differences in coverage between 
programs implemented in different languages are generally 
small. One exception is the Fibonacci program implemented 
with  AspectC++Ext,  This  program  has  significantly  lower 
coverage than the Fibonacci programs implemented with C 
and AspectC++Opt. The reason for this is that the glue code 
inserted  by  AspectC++Ext  adds  to  function  length  which 
reduces  the  effectiveness  of  the  DS-CFC  mechanism.  This 
effect cannot be observed for the brake by wire application 
since  the  sizes  of  the  functions  are  much  larger  to  begin 
with.  Hence  the  relative  change  in  coverage  related  to 
functions size of using AspectC++Ext is small for the brake-
wire application.  
More 
surprising 
the  AspectC++Opt 
implementation  of  the  Fibonacci  application  achieves  the 
same  total  coverage,  as  the  C  implementation  of  that 
application. This is surprising since although the sizes of the  
that 
is 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:29:31 UTC from IEEE Xplore.  Restrictions apply. 
309TABLE V.  
FAULT COVERAGE FOR PROGRAMS EQUIPPED WITH THE 
DS-CFC MECHANISM PRODUCED WITH THE LOW LEVEL OF COMPILER 
OPTIMIZATION 
TO 
0.8%
0.8%
0.7%
0.4%
0.2%
0.5%
Total
95.3%
90.9%
94.8%
88.9%
91.5%
90.2%
DHW 
48.5% 
49.2% 
47.4% 
46.8% 
44.5% 
41.1% 
DSW 
33.0% 
27.9% 
35.9% 
17.0% 
20.7% 
22.2% 
NE 
13.0% 
13.0% 
10.8% 
24.7% 
26.1% 
26.4% 
Coverage 
Fibonacci 
   C 
   AspectC++Ext 
   AspectC++Opt 
Brake-by-wire 
   C 
   AspectC++Ext 
   AspectC++Opt 
functions  are  smaller  than  when  using  AspectC++Ext  they 
are  still  larger  than  for  the  C  implementation.  However,  if 
only considering control flow errors AspectC++Opt gives the 
the  C  and  AspectC++Ext 
anticipated 
implementations.  The  reason  for  the  high  coverage  for 
AspectC++Opt  is that  the  mechanism detects a lot of errors 
that are not caused by control flow faults. In contrast to the 
other  implementations,  the  AspectC++Opt  variant  uses  the 
stack frame pointer of the target program functions to pass 
arguments  to  the  DS-CFC  mechanism.  Hence,  a  corrupt 
stack  frame pointer  will cause the  function signature to be 
incorrect and an error to be detected. Thus in this case the 
DS-CFC  mechanism  has  the  additional  side  effect  of 
functioning as a stack frame pointer check.  
result  between 
In  summary,  AspectC++Ext  shows  similar  results  as  the 
C  implementations  when  applied  to  a  target  program  with 
mainly large  functions.  However  when  functions are  small 
the coverage is significantly  reduced. AspectC++Opt on the 
other hand produces similar results as the C implementation 
for both cases. 
2)  Experiments using high compiler optimization level 
Experiments  with  the  DS-CFC  mechanisms  were  also 
conducted  for  programs  produced  with  the  high  level  of 
compiler optimization. Here we mainly compare the results 
obtained  for  the  different  implementation  languages.  (A 
detailed  comparison  of  the  results  for  low  and  high 
optimization levels is done in Section V.D.)  
Table  VI  shows  the  results  of  these  experiments.  They 
show  a  similar  pattern  as  those  obtained  with  programs 
produced  with  low  compiler  optimization,  although  the 
difference  in  coverage  among  the  target  programs  is 
somewhat lower.  
TABLE VI.  
FAULT COVERAGE FOR PROGRAMS EQUIPPED WITH THE 
DS-CFC MECHANISM PRODUCED WITH THE HIGH LEVEL OF COMPILER 
OPTIMIZATION 
Coverage 
Fibonacci 
   C 
   AspectC++Ext 
   AspectC++Opt 
Brake-by-wire 
   C 
   AspectC++Ext 
   AspectC++Opt 
NE 
26.8%  
25.3%  
27.3%  
28.2%  
26.6%  
27.9%  
DSW 
24.7%  
30.2%  
30.8%  
19.8%  
23.5%  
19.2%  
DHW 
35.8%  
35.4%  
36.0%  
40.2%  
39.1%  
40.9%  
TO 
6.1%
0.2%
0.1%
0.1% 
0.1% 
0.0% 
Total
93.4%
91.1%
94.3%
88.3%
89.3%
88.0%
The programs implemented in AspectC++Ext still obtain 
the  highest  coverage  for  the  brake-by-wire  application  and 
the  lowest  coverage  for  the  Fibonacci  program.  The 
difference in coverage between C and AspectC++Opt is less 
than 1% for both programs. Hence the same conclusion as 
with 
the 
implementation  language  has  little  impact  on  the  results 
except  when  applying  AspectC++Ext  to  programs  with 
mainly small functions. 
C.  Results for the TTR-FR mechanism 
is  also  valid  here; 
low  optimization 
the 
This  section  presents  the  results  of  the  fault  injection 
campaigns  conducted  with  programs  equipped  with  the 
triple  time-redundant  execution  with  voting  and  forward 
recovery  (TTR-FR)  mechanism.  This  mechanism  provides 
both  error  detection  and  error  correction  and  hence  we 
report results for both CoverageCSW and CoverageDSW. 
for  both 
1)  Experiments using low compiler optimization level 
Table  VII  shows  the  fault  coverage  obtained  for  the 
different programs equipped with the TTR-FR mechanism. 
The differences between the C and AspectC++Opt programs 
are  small  for  all  result  classes.  On  the  other  hand,  the 
AspectC++Ext  programs  show  significantly  lower  error 
target 
correction  coverage 
applications. The reason is not that  more errors escape the 
time redundancy mechanism, but a higher coverage for the 
hardware mechanisms (CoverageDHW). 
(CoverageCSW) 
This  means  that  the  total  (CoverageTotal)  is  as  high  for 