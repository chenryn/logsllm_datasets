Y86 [18]
Φcirc
prv
PFE (sh)
AF90 [1]
Φsize
prv
server-aided SFE (sh)
FKN94 [15]
Φcirc
prv
private auctions
NPS99 [40]
Φcirc
2-party SFE (ma)
prv
KO04 [30]
Φcirc
private credit checking prv
FAZ05 [16]
Φsize
prv
2-party SFE (ma)
FM06 [38]
Φcirc
prv
2-party SFE (covert)
AL07 [7]
Φcirc
prv
LP07 [34]
2-party SFE (ma)
Φcirc
GKR08 [20] one-time programs
prv2
Φsize
prv
GMS08 [21] 2-party SFE (co)
Φcirc
BFK+09 [9] priv medical diag
obv
Φcirc
private credit checking prv
PSS09 [41]
Φtopo
BHHI10 [8] KDM encryption
prv
Φsize
aut1 + obv1 Φcirc
GGP10 [17] auth outsourcing
Φcirc
prv
HS10 [22]
Φsize
prv
SS10 [46]
Ap11 [2]
prv
Φsize
Φcirc
KMR11 [28] server-aided SFE (ma) aut + obv
LP11 [36]
Φcirc
2P guaranteed SFE
worry-free encryption
KDM encryption
2-party SFE (ma)
prv
Figure 3: Recasting protocols in more generic terms.
so = semi-honest; co = covert; ma = malicious. All
but [17] need the scheme to be projective.
key-dependent messages), where use of our abstraction leads
to substantial eﬃciency gains over the use of the abstractions
in previous work [2, 8].
2. PRELIMINARIES
Notation. We let N be the set of positive integers. A
string is a ﬁnite sequence of bits and ⊥ is a formal sym-
If A is a ﬁnite set then y (cid:2) A
bol that is not a string.
denotes selecting an element of A uniformly at random and
assigning it to y. If A is an algorithm then A(x1, . . .; r) de-
notes the output of A on inputs x1, . . . and coins r, while
y ← A(x1, . . .) means we pick r uniformly at random and let
y ← A(x1, . . .; r). We let [A(x1, . . .)] denote the set of y that
have positive probability of being output by A(x1, . . .). We
786−c for all k > K.
write Func(a, b) for {f:{0, 1}a → {0, 1}b}. Polynomial time
(PT) is always measured in the length of all inputs, not just
the ﬁrst. (But random coins, when singled out as an argu-
ment to an algorithm, are never regarded as an input.) As
usual, a function ε : N → R
+ is negligible if for every c > 0
there is a K such that ε(k) < k
Code-based games. Our deﬁnitions and proofs are ex-
pressed via code-based games [12] so we recall here the lan-
guage and specify the particular conventions we use. A
code-based game—see Fig. 4 for an example—consists of an
Initialize procedure, procedures that respond to adversary
oracle queries, and a Finalize procedure. All procedures
are optional. In an execution of game Gm with an adver-
sary A, the latter is given input 1k where k is the security
parameter, and the security parameter k used in the game is
presumed to be the same. Procedure Initialize, if present,
executes ﬁrst, and its output is input to the adversary, who
may now invoke other procedures. Each time it makes a
query, the corresponding game procedure executes, and what
it returns, if anything, is the response to A’s query. The ad-
versary’s output is the input to Finalize, and the output
of the latter, denoted Gm
(k), is called the output of the
game. Finalize may be absent in which case it is under-
stood to be the identity function, so that the output of the
(k) ⇒ c”
game is the output of the adversary. We let “Gm
denote the event that this game output takes value c and
(k) ⇒ true.” Boolean
let “Gm
ﬂags are assumed initialized to false and BAD(GmA(k)) is
the event that the execution of game Gm with adversary A
sets ﬂag bad to true.
Circuits. While our deﬁnitions for garbling schemes are
representation-independent, the garbling schemes we specify
assume a circuit-based representation. Here we specify the
conventions and deﬁnitions that make this formal.
(k)” be shorthand for “Gm
A
A
A
A
There are several reasons why it is important to cleanly
deﬁne circuits (which, for many reasons, are not just DAGs).
First, there are many “boundary cases” where only conven-
tions can decide if something is or is not a valid circuit. The
boundary cases matter; we have repeatedly found that de-
generate or under-analyzed circuit types materially impact
if a garbling scheme is correct. Beyond this, a lack of agree-
ment on what a circuit is makes even informal discourse
problematic. Finally, we have found that it is simply not
possible to properly specify a circuit-garbling algorithm or
a circuit-evaluation function, nor to carry out code-based
game-playing proofs, without circuits being formalized. As
an added payoﬀ, if one establishes good conventions for cir-
cuits, then these same conventions can be used when deﬁning
a garbled circuit and its evaluation function.
A circuit is a 6-tuple f = (n, m, q, A, B, G). Here n ≥ 2 is
the number of inputs, m ≥ 1 is the number of outputs and
q ≥ 1 is the number of gates. We let r = n+q be the number
of wires. We let Inputs = {1, . . . , n}, Wires = {1, . . . , n + q},
OutputWires = {n + q − m + 1, . . . , n + q}, and Gates =
{n + 1, . . . , n + q}. Then A : Gates → Wires\OutputWires is
a function to identify each gate’s ﬁrst incoming wire and B :
Gates → Wires\OutputWires is a function to identify each
gate’s second incoming wire. Finally G : Gates × {0, 1}2 →
{0, 1} is a function that determines the functionality of each
gate. We require A(g) < B(g) < g for all g ∈ Gates.
The conventions above embody all of the following. Gates
have two inputs, arbitrary functionality, and arbitrary fan-
out. The wires are numbered 1 to n + q. Every non-input
wire is the outgoing wire of some gate. The ith bit of input is
presented along wire i. The ith bit of output is collected oﬀ
wire n + q − m + i. The outgoing wire of each gate serves as
the name of that gate. Output wires may not be input wires
and may not be incoming wires to gates. No output wire
may be twice used in the output. Requiring Ag < Bg < g
ensures that the directed graph corresponding to f is acyclic,
and that no wire twice feeds a gate; the numbering of gates
comprise a topological sort.
We will routinely ignore the distinction between a circuit
f = (n, m, q, A, B, G) as a 6-tuple and the encoding of such
a 6-tuple as a string; formally, one assumes a ﬁxed and rea-
sonable encoding, one where |f| is O(r log r) for r = n + q.
We deﬁne a canonical evaluation function evcirc. It takes a
string f and a string x = x1x2 ·· ·x n:
01 proc evcirc(f, x)
02 (n, m, q, A, B, G) ← f
03 for g ← n + 1 to n + q do
04
05 return xn+q−m+1 . . . xn+q
a ← A(g), b ← B(g), xg ← G(xa, xb)
At line 02 we adopt the convention that any string f can be
parsed as a circuit. (If f does not encode a circuit, we view
it as some ﬁxed, default circuit.) This ensures that evcirc is
well-deﬁned for all string inputs f . At line 04, xa and xb will
always be well deﬁned because of A(g) < B(g) < g. Circuit
evaluation takes linear time.
−
−
−
We say f
is a topological circuit if f
= (n, m, q, A, B)
for some circuit f = (n, m, q, A, B, G). Thus a topological
circuit is like a conventional circuit except the functionality
of the gates is unspeciﬁed. Let Topo be the function that
expunges the ﬁnal component of its circuit-valued argument,
so f
= Topo(f ) is the topological circuit underlying con-
ventional circuit f .
3. GARBLING SCHEMES
Syntax. A garbling scheme is a ﬁve-tuple of algorithms
G = (Gb, En, De, Ev, ev). The ﬁrst of these is probabilistic;
the remaining algorithms are deterministic. A string f , the
original function, describes the function ev(f,·) : {0, 1}n →
{0, 1}m that we want to garble. The values n = f.n and m =
f.m depend on f and must be easily computable from it.
Speciﬁcally, ﬁx linear-time algorithms n and m to extract
f.n = n(f ) and f.m = m(f ). On input f and a security
parameter k ∈ N, algorithm Gb returns a triple of strings
(F, e, d) ← Gb(1k, f ). String e describes an encoding func-
tion, En(e,·), that maps an initial input x ∈ {0, 1}n to a
garbled input X = En(e, x). String F describes a garbled
function, Ev(F,·), that maps each garbled input X to a gar-
bled output Y = Ev(F, X). String d describes a decoding
function, De(d,·), that maps a garbled output Y to a ﬁnal
output y = De(d, Y ).
We levy some simple requirements on garbling schemes.
First, |F|, |e|, and |d| may depend only on k, f.n, f.m,
and |f|. Formally, if f.n = f
(cid:3)|,
(cid:3)
.n, f.m = f
(F, e, d) ∈ [Gb(1k, f )], and (F
(cid:3)
(cid:3)
, e
, d
)], then
|F| = |F
(cid:3)|, and |d| = |d
(cid:3)|. This is the length condi-
tion. Second, e and d may depend only on k, f.n, f.m, |f|
(cid:3)
and the random coins r of Gb. Formally, if f.n = f
.n, f.m =
.m, |f| = |f
(cid:3)|, (F, e, d) = Gb(1k, f ; r), and (F
(cid:3)
(cid:3)
, e
f
) =
(cid:3)
Gb(1k, f
. This is the nondegen-
eracy condition. Finally, if f ∈ {0, 1}∗
, k ∈ N, x ∈ {0, 1}f.n,
) ∈ [Gb(1k, f
.m, |f| = |f
(cid:3)
(cid:3)|, |e| = |e
; r), then e = e
and d = d
(cid:3)
(cid:3)
, d
(cid:3)
(cid:3)
(cid:3)
(cid:3)
787and (F, e, d) ∈ [Gb(1k, f )], then De(d, Ev(F, En(e, x))) =
ev(f, x). This is the correctness condition.
We say that a garbling scheme G = (Gb, En, De, Ev, ev) is
a circuit-garbling scheme if ev interprets f as a circuit: for-
mally, ev = evcirc for the canonical circuit-evaluation function
that we deﬁned in Section 2.
n, X 1
1 , X 1
1 , . . . , X 0
Projective schemes.
A common approach in exist-
ing garbling schemes is for e to encode a list of tokens,
one pair for each bit in x ∈ {0, 1}n. Encoding function
En(e,·) then uses the bits of x = x1 · ·· xn to select from e =
(X 0
1 , . . . , X xn
n ).
Formally, we say that garbling scheme G = (Gb, En, De,
(cid:3) ∈ {0, 1}f.n, k ∈ N,
Ev, ev) is projective if for all f , x, x
and i ∈ [1..n], when (F, e, d) ∈ [Gb(1k, f )], X = En(e, x)
and X
), then X = (X1, . . . , Xn) and X
=
i|, and Xi = X
(cid:3)
(cid:3)
(X
i if x
(cid:3)
and x
= En(e, x
n) are n vectors, |Xi| = |X
(cid:3)
n) the subvector X = (X x1
have the same ith bit.
(cid:3)
1, . . . , X
(cid:3)
(cid:3)
(cid:3)
Our deﬁnitions of security do not require schemes be pro-
jective. However, this property is needed for some important
applications. For example, SFE combines a projective gar-
bling scheme and a scheme for oblivious transfer.
Side-information functions. Privacy is rarely absolute;
semantically secure encryption, for example, is allowed to
reveal the length of the plaintext. Similarly, a garbled cir-
cuit might reveal the size of the circuit that was garbled, its
topology (that is, the graph of how gates are connected up),
or even the original circuit itself. The information that we
expect to be revealed is captured by a side-information func-
tion, Φ, which deterministically maps f to a stringφ = Φ(f ).
We will parameterize our advantage notions by Φ, and in
this way simultaneously deﬁne garbling schemes that may
reveal a circuit’s size, topology, identity, or more. We re-
quire that f.n and f.m be easily determined from φ = Φ(f );
formally, there must exist linear-time algorithms n(cid:3)
and m(cid:3)
that compute f.n = n(cid:3)