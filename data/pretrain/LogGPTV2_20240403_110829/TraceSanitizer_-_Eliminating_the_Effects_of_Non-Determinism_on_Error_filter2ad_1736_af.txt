# Optimized Text

## Solver Performance and Overhead Analysis

### Solver Metrics
- **Solver Time (m):** 30.36
- **Objective Value (#Obj.):** Not provided
- **Dependencies (#Dep.):** Not provided
- **Solver Time (s):** 38, 24, 650
- **Solver Time (m):** 30.38, 1.57
- **Solver Time (s):** 64, 12, 126, 150.41, 150.43, 1.29
- **Solver Time (m):** 81.94, 0.79
- **Solver Time (s):** 31, 13, 460
- **Solver Time (s):** 13
- **Solver Time (s):** 2810
- **Solver Time (s):** 0.99, 1.58
- **Solver Time (s):** 16, 22, 630, 116.66, 144.61, 8.57
- **Solver Time (m):** 81.93
- **Solver Time (s):** 0.87

### Sanitization and Comparison Metrics
- **Sanitization Time (s):** 0.3
- **Comparison Time (s):** 0.17, 0.13, 0.2, 2.86

### Reversibility Check and Fault Injection Experiments

It is important to note that the time overhead incurred by the reversibility check is a one-time cost, as the check needs to be run only once. Additionally, fault injection experiments can be run in parallel with the checks. On the other hand, running the sanitization algorithms must be done for each fault that is injected, typically thousands of times to obtain statistically significant estimates. We measure the time it takes to run each of these two steps, and the results are shown in Table III.

#### 1) Reversibility Check
To assess the runtime overhead of the reversibility check, we performed it on a golden run of each benchmark. We report the total runtime along with the time taken by the SMT solver, the number of memory objects accessed in the trace, and the inter-thread dependencies on these objects in Table III. For all programs, the overall time for the reversibility check ranges from approximately 1 minute for `blackscholes` to 150 minutes for `pca`, and is strongly dominated by the SMT solver's execution time. For `swaptions`, which is the only program showing a notable difference between these times, building the formula takes considerably longer due to the higher number of instructions in the trace.

In addition to the solving time, the total overhead includes the time it takes `TraceSanitizer` to build the formula, including the identification of data dependencies in the trace. While the number of dependencies and objects, along with the total number of instructions, hint at the size and complexity of the formulas generated, they do not directly correspond to the measured execution times. For instance, `quicksort` has a higher complexity than `kmeans` in terms of memory objects and dependencies in the traces with a comparable trace size but takes significantly less time for the check.

To understand how our technique performs for target programs of different complexities, we conducted a scalability study for one of the benchmarks (`blackscholes`). For this purpose, we generated execution traces of the benchmark with inputs of varying sizes (2, 4, 8, 16, 32 inputs) and varying numbers of threads (1, 2, 4, 6, 8, 12, 16) handling these inputs. We repeated the reversibility check four times for each input/thread count combination to account for execution time variations. We divide the execution time into building and solving the reversibility formula. Figure 6 shows the average time of `TraceSanitizer` for constructing the reversibility formula in relation to input size and thread count for the `blackscholes` benchmark. As `blackscholes` intrinsically limits the number of worker threads to the number of inputs, the plot only shows data points where the number of threads is higher than or equal to the number of inputs. The formula build time increases with the input size but remains below 15 minutes in all cases. The number of threads has a relatively small influence; for example, for input sizes 16 and 32, the time taken for 12 threads is lower than the time for fewer threads.

For brevity, we do not report on solver times in detail but summarize our findings:
- The solver time significantly exceeds the formula building time (by an average factor of 191), with a maximum average solver time of almost 103 hours (32 inputs, 16 threads).
- Although we observed the highest solver time for the most complex configuration, we find that solver time does not strictly increase with thread count or input size.
- Solver time varies strongly across repetitions, with a coefficient of variation of up to 32.4%.

From our scalability analysis, we conclude that:
1. Building reversibility formulas for `TraceSanitizer` is not a performance bottleneck.
2. Solving reversibility formulas dominates the overall time for the reversibility check and may become a bottleneck, but it is a one-time cost for `TraceSanitizer` and will improve as SMT solvers evolve.
3. Solver time can vary strongly in unforeseen ways for different execution configurations.

#### 2) Trace Sanitizing
Once the golden run has passed the reversibility check, `TraceSanitizer` proceeds with the sanitization and comparison of faulty runs. Next, we measured the additional overhead incurred by running the sanitizing algorithms and the actual comparison on each faulty run.

Table III shows a breakdown of the median time across 5000 experiments that `TraceSanitizer` requires to perform these sanitization (column 6) and comparison (column 7) steps. The median time for trace sanitization ranges between 0.79 seconds and 8.75 seconds, with a median absolute deviation (MAD) of 1.9 seconds for `swaptions` and less than 0.4 seconds for the other benchmarks.

The trace comparison of a sanitized golden run and a faulty run takes between 0.17 seconds and 2.86 seconds, with a MAD of 0.2 seconds for `swaptions` and under 0.02 seconds for the other benchmarks.

While we cannot directly compare these results to existing approaches due to the strong impact of machine configurations on performance measurements, we can provide an indirect comparison. As `TraceSanitizer` is the only sound tool for EPA trace comparisons, it does not require any manual inspection of the obtained comparison results to check for false positives, which are required by unsound tools. To beat `TraceSanitizer`'s performance for 5000 injections in the slowest case of `swaptions`, 4400 trace diffs (5000 * 0.88, the smallest coverage in Figure 5) would need to be inspected (manually) in less time than 5000 * 8.57 seconds + 144.61 * 60 seconds, which is less than 12 seconds for a diff across traces with more than a million lines (Table I). An analogous calculation yields less than 4 seconds for manual inspection of any other benchmark. Such small times are almost impossible to achieve for any realistic program trace, including those in our evaluation. Moreover, the time taken by `TraceSanitizer` will become smaller as computing becomes faster, which is not the case for manual inspection.

## Conclusion
In this paper, we introduced a class of multi-threaded programs that we termed pseudo-deterministic, for which EPA can be sound in the presence of non-deterministic memory allocations and CPU scheduling. We developed an automated technique to determine whether a program belongs to this class, as well as a novel trace sanitizing approach that soundly handles non-determinism. We implemented the technique in an automated tool called `TraceSanitizer` using the LLVM compiler and Satisfiability Modulo (SMT) Solvers.

We empirically evaluated our `TraceSanitizer` prototype on five benchmark programs and demonstrated that it is able to fully eliminate false positives. Further, it achieves high fault coverage in an EPA study across five different fault types. Finally, `TraceSanitizer` provides reasonable performance and compares very favorably with unsound EPA tools that require manual inspection of false positives.

## Acknowledgments
This work was supported in part by DAAD (project 57389931), EC H2020 CONCORDIA GA# 830927, the Lancaster Security Institute, the NSERC, and the Killam Research Fellowship from UBC. The scalability analysis results were obtained using the Chameleon testbed supported by the NSF.

## References
[References are listed as provided, with no changes made.]

---

This optimized text aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.