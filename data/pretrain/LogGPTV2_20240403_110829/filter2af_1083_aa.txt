**Author：Longofo@Knownsec 404 Team**  
**Time: December 10, 2019**  
**Chinese version:**
An error occurred during the deserialization test with a class in an
application. The error was not `class notfound`, but other`0xxx` errors. After
some researches, I found that it was probably because the class was not
loaded. I just studied the JavaAgent recently and learned that it can
intercept. It mainly uses the Instrument Agent to enhance bytecode. It can
perform operations such as **byte code instrumentation** , **bTrace** ,
**Arthas**. Combined with ASM, javassist, the cglib framework can achieve more
powerful functions. **Java RASP** is also implemented based on JavaAgent. The
following records the basic concepts of JavaAgent, and I'll introduce how I
used JavaAgent to implement a test to get the classes loaded by the target
process.
#### JVMTI & Java Instrument
The **Java Platform Debugger Architecture**
([JPDA](https://en.wikipedia.org/wiki/Java_Platform_Debugger_Architecture)) is
a collection of APIs to debug Java code:
  * Java Debugger Interface (JDI) - defines a high-level Java language interface that developers can easily use to write remote debugger application tools.
  * [Java Virtual Machine Tools Interface](https://en.wikipedia.org/wiki/Java_Virtual_Machine_Tools_Interface) (JVMTI), a native interface that helps to inspect the state and to control the execution of applications running in the [Java Virtual Machine](https://en.wikipedia.org/wiki/Java_Virtual_Machine) ([JVM](https://en.wikipedia.org/wiki/JVM)).
  * Java Virtual Machine Debug Interface (JVMDI)- JVMDI was deprecated in J2SE 5.0 in favor of JVM TI, and was removed in Java SE 6.
  * Java Debug Wire Protocol (JDWP) - defines communication between debuggee (a Java application) and debugger processes.
JVMTI provides a set of "agent" program mechanisms, supporting third-party
tools to connect and access the JVM in a proxy manner, and use the rich
programming interface provided by JVMTI to complete many JVM-related
functions. JVMTI is event-driven. Every time the JVM executes certain logic,
it will call some event callback interfaces (if any). These interfaces can be
used by developers to extend their own logic.
JVMTIAgent is a dynamic library that provides the functions of agent on load,
agent on attach, and agent on unload by using the interface exposed by JVMTI.
Instrument Agent can be understood as a type of JVMTIAgent dynamic library. It
is also called JPLISAgent (Java Programming Language Instrumentation Services
Agent), which is the agent that provides support for instrumentation services
written in the Java language.
#### Instrumentation Interface
The following interfaces are provided by Java SE 8 [in the API
documentation](https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html)
[1] (different versions may have different interfaces):
    void    addTransformer(ClassFileTransformer transformer)
    Registers the supplied transformer.
    void    addTransformer(ClassFileTransformer transformer, boolean canRetransform)
    Registers the supplied transformer.
    void    appendToBootstrapClassLoaderSearch(JarFile jarfile)
    Specifies a JAR file with instrumentation classes to be defined by the bootstrap class loader.
    void    appendToSystemClassLoaderSearch(JarFile jarfile)
    Specifies a JAR file with instrumentation classes to be defined by the system class loader.
    Class[] getAllLoadedClasses()
    Returns an array of all classes currently loaded by the JVM.
    Class[] getInitiatedClasses(ClassLoader loader)
    Returns an array of all classes for which loader is an initiating loader.
    long    getObjectSize(Object objectToSize)
    Returns an implementation-specific approximation of the amount of storage consumed by the specified object.
    boolean isModifiableClass(Class theClass)
    Determines whether a class is modifiable by retransformation or redefinition.
    boolean isNativeMethodPrefixSupported()
    Returns whether the current JVM configuration supports setting a native method prefix.
    boolean isRedefineClassesSupported()
    Returns whether or not the current JVM configuration supports redefinition of classes.
    boolean isRetransformClassesSupported()
    Returns whether or not the current JVM configuration supports retransformation of classes.
    void    redefineClasses(ClassDefinition... definitions)
    Redefine the supplied set of classes using the supplied class files.
    boolean removeTransformer(ClassFileTransformer transformer)
    Unregisters the supplied transformer.
    void    retransformClasses(Class... classes)
    Retransform the supplied set of classes.
    void    setNativeMethodPrefix(ClassFileTransformer transformer, String prefix)
    This method modifies the failure handling of native method resolution by allowing retry with a prefix applied to the name.
**[redefineClasses&
retransformClasses](https://stackoverflow.com/questions/19009583/difference-between-redefine-and-retransform-in-javaagent)**：
redefineClasses was introduced in Java SE 5, and retransformClasses in Java SE
6. We may use retransformClasses as a more general feature, but
redefineClasses must be retained for backward compatibility, and
retransformClasses can be more convenient.
#### Two Loading Methods of Instrument Agent
As mentioned in the official [API
documentation](https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/Instrumentation.html)[1],
there are two ways to get Instrumentation interface instance:
  1. When a JVM is launched in a way that indicates an agent class. In that case an `Instrumentation` instance is passed to the `premain` method of the agent class.
  2. When a JVM provides a mechanism to start agents sometime after the JVM is launched. In that case an `Instrumentation` instance is passed to the `agentmain` method of the agent code.
`Premain` refers to the Instrument Agent load when the VM starts, that is
`agent on load`, and the `agentmain` refers to the Instrument Agent load when
the VM runs, that is `agent on attach`. The Instrument Agent loaded by the two
loading forms both monitor the same `JVMTI` event - the`ClassFileLoadHook`
event. This event is used in the callback when we finish reading bytecode,
that is, in the premain and agentmain modes. The callback timing is after the
class file bytecode is read (or after the class is loaded), and then the
bytecode is redefined or retransformed. However, the modified bytecode also
needs to meet some requirements.
#### Difference between premain and agentmain
The final purpose of `premain` and`agentmain` is to call back the
`Instrumentation` instance and activate
`sun.instrument.InstrumentationImpl#transform ()`(InstrumentationImpl is the
implementation class of Instrumentation) so that the callback is registered to
`ClassFileTransformer` in`Instrumentation` to implement bytecode modification,
and there is not much difference in essence. The non-essential functions of
the two are as follows:
  * The premain method is introduced by JDK1.5, and the agentmain method is introduced by JDK1.6. After JDK1.6, you can choose to use `premain` or `agentmain`.
  * `premain` needs to use the external agent jar package from the command line, that is, `-javaagent: agent jar package path`; `agentmain` can be directly attached to the target VM via the`attach` mechanism to load the agent, that is, use `agentmain` In this mode, the program that operates `attach` and the proxy program can be two completely different programs.
  * The classes in the `premain` callback to the`ClassFileTransformer` are all the classes loaded by the virtual machine. This is because the order of loading by the proxy is determined earlier. From the perspective of developer logic, all classes are loaded for the first time and enter the program. Before the main () method, the premain method will be activated, and then all loaded classes will execute the callback in the ClassFileTransformer list.
  * Because the `agentmain` method uses the `attach` mechanism, the target target VM of the agent may have been started long ago. Of course, all its classes have been loaded. At this time, you need to use the `Instrumentation#retransformClasses(Class . .. classes)` to allow the corresponding class to be retransformed, thereby activating the retransformed class to execute the callback in the `ClassFileTransformer` list. 
  * If the agent Jar package through the premain method is updated, the server needs to be restarted, and if the agent package Jar is updated, it needs to be reattached, but the agentmain reattach will also cause duplicate bytecode insertion problems, but there are also problems `Hotswap` and`DCE VM` way to avoid.
We can also see some differences between them through the following tests.
##### premain loading method
The steps to write in premain are as follows:
1.Write the premain function, which contains one of the following two methods:
        public static void premain (String agentArgs, Instrumentation inst);
        public static void premain (String agentArgs);
    If both methods are implemented, then the priority with the Instrumentation parameter is higher, and it will be called first. `agentArgs` is the program parameter obtained by the` premain` function. It is passed in via the command line parameter.
2.Define a MANIFEST.MF file, which must include the Premain-Class option, and
usually include the Can-Redefine-Classes and Can-Retransform-Classes options
3.Premain class and MANIFEST.MF file into a jar package
4.Start the agent with the parameter `-javaagent: jar package path`
The premain loading process is as follows:
1.Create and initialize JPLISAgent  
2.Parse the parameters of the MANIFEST.MF file, and set some content in
JPLISAgent according to these parameters.  
3.Listen for the `VMInit` event and do the following after the JVM is
initialized:  
(1) create an InstrumentationImpl object;  
(2) listen for the ClassFileLoadHook event;  
(3) call the`LoadClassAndCallPremain` method of InstrumentationImpl, which
will be called in this method Premain method of Premain-Class class specified
in MANIFEST.MF in javaagent
Here is a simple example (tested under JDK1.8.0_181):
PreMainAgent
    package com.longofo;
    import java.lang.instrument.ClassFileTransformer;
    import java.lang.instrument.IllegalClassFormatException;
    import java.lang.instrument.Instrumentation;
    import java.security.ProtectionDomain;
    public class PreMainAgent {
        static {
            System.out.println("PreMainAgent class static block run...");
        }
        public static void premain(String agentArgs, Instrumentation inst) {
            System.out.println("PreMainAgent agentArgs : " + agentArgs);
            Class[] cLasses = inst.getAllLoadedClasses();
            for (Class cls : cLasses) {
                System.out.println("PreMainAgent get loaded class:" + cls.getName());
            }
            inst.addTransformer(new DefineTransformer(), true);
        }
        static class DefineTransformer implements ClassFileTransformer {
            @Override
            public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
                System.out.println("PreMainAgent transform Class:" + className);
                return classfileBuffer;
            }
        }
    }
MANIFEST.MF
    Manifest-Version: 1.0
    Can-Redefine-Classes: true
    Can-Retransform-Classes: true
    Premain-Class: com.longofo.PreMainAgent
Testmain
    package com.longofo;
    public class TestMain {
        static {
            System.out.println("TestMain static block run...");
        }
        public static void main(String[] args) {
            System.out.println("TestMain main start...");
            try {
                for (int i = 0; i  list = VirtualMachine.list ();
       // attach the target VM
       VirtualMachine.attach (descriptor.id ());
       // Target VM loads Agent
       VirtualMachine # loadAgent ("Agent Jar Path", "Command Parameters");
The agentmain loading process is similar:
  1. Create and initialize JPLISAgent
  2. Parse the parameters in MANIFEST.MF and set some content in JPLISAgent according to these parameters
  3. Listen for the `VMInit` event and do the following after the JVM initialization is complete: 
(1) Create an InstrumentationImpl object;
(2) Monitor the ClassFileLoadHook event;
(3) Call `loadClassAndCallAgentmain` method in InstrumentationImpl, and it