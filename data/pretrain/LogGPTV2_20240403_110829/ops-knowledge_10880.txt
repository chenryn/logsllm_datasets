User: I'm under the impressions that Python runs in the Triforce smoothly. A program that runs in Windows will run in Linux. Is this sentiment correct?
Having said that, if I create my application in QT For Windows, will it run flawlessly in Linux/Mac as well?
Thanks.
Assistant: As other posters mentioned, the key issue is making sure you never touch a different non-Qt non-cross-platform API.  Or really even a different non-Qt crossplatform API, if you use Qt you kind of need to commit to it, it's a comprehensive framework and for the most part sticking with Qt is easier than going to anything else.  There's some nice advantages as the basic primitives in your program will work the same way all over the place.  (i.e. a QString in your networking code will be the same as a QString in your interface code.)  Portability-wise, if you stay within the API Qt provides you, it should work on multiple platforms.
There will be areas where you may need to call some Qt functions which provide specific cross-platform tweaks more important to some platforms than others (e.g. dock icons) and you won't immediately have a polished application on all three platforms.  But in general, you should remain very close to an application that compiles and runs on all three.  (Try to use qmake or a similar build system too, as the build process for Qt applications varies depending on the platform.  Different flags, etc.)
There's some odd issues that come up when you mix Qt with other APIs like OpenGL, in particular the way windows locks GL contexts differs from the way OS X and Linux does, so if you intend to use OpenGL with multiple threads, try to periodically compile on the other platforms to make sure nothing is completely busted.  This will also quickly point out areas where you might have inadvertently used a non-cross-platform system API.
I've used Qt with a team to build a multi-threaded 3-d multiplayer real-time networked game (read: non-trivial application that fully utilized many many areas of Qt) and we were nothing but blown away by the effectiveness of Qt's ability to support multiple platforms.  (We developed on OS X while targeting Windows and I regularly made sure it still ran on Linux as well.)  We encountered only a few platform specific bugs, almost all of which arose from the use of non-Qt APIs such as OpenGL.  (Which should really tell you something, that OpenGL was more of a struggle to use cross platform than Qt was.)
At the end of the experience we were pleased at how little time we needed to spend dealing with platform-specific bugs.  It was surprising how well we could make a GUI app for windows given almost none of the team actually used it as a primary development platform through the project.
But do test early and often.  I don't think your approach of writing an entire application and then testing is a good idea.  It's possible with Qt, but unlikely if you don't have experience writing portable code and/or are new to Qt.