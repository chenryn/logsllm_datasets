secure communication channel to tunnel trafﬁc. The SENG
server listens for incoming tunnel connections from shielded
and trusted client apps. We use SGX’s remote attestation to
check the app’s identity and verify that it runs inside a valid
SGX enclave with SENG runtime. To this end, the SENG
runtime generates a fresh public and private key pair and
binds it to the enclave report—inspired by work of Knauth
et al. [32]. The SENG runtime then uses the keys to establish
a mutually authenticated, end-to-end protected connection to
USENIX Association
29th USENIX Security Symposium    757
Figure 2: High-level Overview of the SENG Architecture
the SENG server and provides the attestation report during
connection setup. Before accepting the connection, the SENG
server checks that the attestation report is bound to the con-
nection and belongs to a valid SGX enclave with a shielded
application. After tunnel establishment, trafﬁc of the shielded
app can be securely tunneled to the SENG server and routed
through the gateway (incl. ﬁrewall) while being protected
from MITM attackers between enclave and gateway.
5.3 Application-Grained Firewall Policies
Placing the SENG server on the gateway allows for ﬁne-
grained trafﬁc control at the perimeter ﬁrewall. With SENG,
ﬁrewalls can precisely control which shielded app may com-
municate where. This adds a completely new degree of free-
dom that standard ﬁrewalls do not give, as they subsume all
applications of a given system into a single address.
The SENG server maintains a central allowlist of trusted
applications, which links apps to their trusted attestation re-
ports, and additionally, to an app-speciﬁc IP subnetwork. The
SENG server assigns a unique IP address from this particular
subnet to each shielded enclave instance of a given client
app. The enclave-unique addresses make the shielded app’s
identiﬁer visible to all gateway services, including ﬁrewalls.
Firewalls use this mapping to deﬁne app-speciﬁc policies,
which are easily integrated into existing toolchains2.
To demonstrate this, we introduce a typical corporate net-
work setup, as shown in Figure 3. The network consists of a
central, SENG-enabled gateway which interconnects an un-
trusted internal client subnetwork, a trusted internal server sub-
net, a DMZ, and external networks. The DMZ provides typical
services for internal and external hosts, including a public web
shop and a DNS server. The internal servers are only reach-
able by internal clients and host an intranet web server, as
well as an LDAP and database server. The client workstations
run a set of trusted client applications (e.g., browsers, mail
2Alternatively, to ease integration, we also implemented a SENG netﬁlter
kernel module and iptables extension that allows to extend netﬁlter-based
ﬁrewalls with SENG app identiﬁers to avoid network fragmentation.
Figure 3: Sample topology of a corporate network consisting
of a SENG-enabled gateway, a subnet of untrusted clients
with shielded apps, an internal server subnet and a DMZ.
clients) which require access to internal and external servers.
The white columns in Table 2 show traditional ﬁrewall poli-
cies (e.g., conﬁgured using iptables) for this setup. Rules
1-2 allow workstations to connect to external hosts, rules 3
and 8-10 grant them connections to internal and DMZ servers,
and rules 4-7 allow external clients to connect to servers in the
DMZ. Rule 11 allows internal and DMZ servers to connect to
external servers. Rule 12 allows all communication of such
established connections, and rule 13 is the default policy that
rejects any other trafﬁc.
If client hosts are fully compromised by a system-level at-
tacker (cf. Section 2), these traditional policies fall short. First,
they allow malware on trusted hosts to communicate to exter-
nal servers. Second, they do not reﬁne which external clients
may use servers in the DMZ. To tackle these shortcomings,
SENG grants only trusted apps network access. The gray col-
umn in Table 2 shows the policy modiﬁcations that SENG re-
quires. Administrators just have to replace the coarse-grained
source addresses with app-grained addresses. For example,
in rule 1, the ﬁrewall can now control that only vetted Fire-
fox clients from the workstation network can access external
networks, and any untrusted software is blocked. This minor
change signiﬁcantly hardens the ﬁrewall setup. The SENG-
enabled policies can be automatically derived when shielded
apps specify which endpoints they need for communication.
Subsumed Enclave Subnetworks. Optionally, network
admins can group shielded apps sharing policies (e.g., all
mail clients, or versions of same app) into privilege-based
subnets. Table 2 exempliﬁes both cases: While rule 3 restricts
access to an individual mail client version, rule 6 subsumes all
FileZilla versions in a subnet. Rule 2 even restricts access to
external databases only to PSQL clients conﬁgured with SSL
mode enabled to protect against external MITM attackers.
Host IP Addresses. We override the source IP address
with an enclave-unique address to easily integrate SENG into
758    29th USENIX Security Symposium
USENIX Association
GatewayF i r e w a l lFirewallSENG ServerEnterprise NetworkExternal Network (Internet)Infected ClientMalwareUntrusted Client SubnetworkDMZ / Trusted Server SubnetExternal ServersMITMSENG RuntimeLibOSShielded Applicationattested tunnelmalicious  trafﬁcMITMFirewallF i r e w a l lSGX Enclave:trusted:untrusted:trusted:untrustedInfected Clientattested tunnelTrusted GWWeb ServerClient Workstations: 10.0.0.0/8Internal Servers: 172.16.0.0/16Untrusted ClientPSQL CliUntrusted ClientFileZillaUntrusted ClientFirefox:trusted:untrustedSENG ServerDemilitarized zone (DMZ): 8.8.8.0/24External NetworkDNS ServerFTP ServerMail ServerWeb ServerswitchLDAP ServerDatabase Serverswitch.1.2.3.4.1.2.3.4.5switchswitchUntrusted ClientMail Cli.1.5.4.3.2No.
1
2
Source (w/o SENG)
$WORKSTATIONS
$WORKSTATIONS
Source (with SENG)
$WS_FIREFOX_72
$WS_PSQL_TLS_ONLY
Destination
$EXTERNAL
$EXTERNAL
3
4
5
6
7
8
9
10
11
12
13
*
$ANY_THUNDERBIRD_68
$EXTERNAL
*
*
*
$WORKSTATIONS
$WORKSTATIONS
$WORKSTATIONS
$SERVERS
*
*
$EXTERNAL
*
$ANY_FILEZILLA
*
$WS_FIREFOX_72
$WS_PSQL
$WS_ENCLAVES
$SERVERS
*
*
$IMAP
$SMTP
$SMTP
$DNS
$FTPS
$WEBSHOP
$INTRANET
$DATABASE
$LDAP
$EXTERNAL
*
*
Dst. Port
80, 443
5432
143, 993
465, 587
25
53
989, 990
80, 443
80, 443
5432
389, 636
*
*
*
State
NEW
NEW
NEW
NEW
NEW
NEW
NEW
NEW
NEW
NEW
NEW
NEW
Action
ACCEPT
ACCEPT
ACCEPT
ACCEPT
ACCEPT
ACCEPT
ACCEPT
ACCEPT
ACCEPT
ACCEPT
ACCEPT
ACCEPT
ESTABL. ACCEPT
REJECT
*
Table 2: Traditional ﬁrewall policies for the corporate sample network (Fig. 3) and their app-grained SENG alternatives (gray
column). The variables in column 2 and 4 represent subnets (e.g., $WORKSTATIONS) or server IP addresses (e.g., $IMAP). The
new variables in the gray column represent SENG enclave subnets ($WS for workstations, $ANY for arbitrary IP addresses).
existing ﬁrewalls (AR3). Note that the SENG server can still
distinguish between enclaves running on different hosts and
between enclaves running on different subnets. While rule 6
grants internal and external FileZilla enclaves access to the
FTP server (DMZ), rule 8 restricts access to intranet web
pages to shielded browsers on internal workstations only.
5.4 Deployment of SENG
SENG raises questions regarding enclave deployment, key
management and update handling, which we discuss next.
Enclave Deployment. The SENG runtime and its depen-
dencies are shipped to clients as a container image. Each
shielded app needs a conﬁguration ﬁle that lists the ﬁles the
LibOS has to protect, which can be (partially) automated3.
App bundles can then be offered, e.g., via corporate app stores.
New SENG client devices are enrolled by including their
addresses in the SENG policy database. Strong device bind-
ings can optionally be established using orthogonal schemes
such as IEEE 802.1X and strict mappings between hosts and
IP addresses. Alternatively, one could bind a secret to the
client CPU as part of the app installation process.
Mixed Environments / Gradual Deployment. SENG can
also be deployed in mixed environments, i.e., heterogeneous
networks where not all hosts support SGX (and thus SENG).
In this case, administrators can use network segmentation to
separate SGX-enabled workstations from legacy workstations.
Whereas the unprotected subnetwork of legacy clients would
be governed by traditional (and possibly more restrictive)
ﬁrewall rules, the protected network could readily use SENG
policies. In fact, given a particular workstation, this setup also
3e.g., using https://github.com/oscarlab/graphene/tree/v1.0.
1/Tools, or an automated build chain for container generation [2]
allows to gradually migrate applications to SENG. Shielded
apps would belong to the protected subnetwork, whereas all
other legacy clients are bound to the unprotected subnetwork.
Key Management. SENG requires minimal key manage-
ment. The SENG server authenticates clients via remote at-
testation and the client key pair (Kenc,K−1
enc) is generated on
each startup, s.t. no key rollouts are required. The key pair of
the SENG server (Ksrv,K−1
srv ) must be securely managed and
the public key Ksrv is shipped to clients as part of the SENG
runtime. See Section 7 for respective security considerations.
Component Updates. On each component update
(incl. keys, app, libs, SENG and LibOS), the SENG runtime
image is rebuilt, and a new attestation report is extracted
and inserted into the allowlist. Thus, SENG can identify the
exact software bundle of a given enclave (cf. Section 6.1)
and allow, e.g., only speciﬁc app versions (Table 2, rule 1)—
mitigating the risk of outdated software that exposes security
vulnerabilities. While SENG provides new reports on each
update, LibOSes commonly support dynamic loading [5, 9],
s.t. SENG needs to reship only the modiﬁed ﬁles, the (small)
conﬁguration and new enclave signature.
Critical Updates and Key Rollovers. In case of critical
security updates, the compromised reports must be removed
from the allowlist to revoke network access. SENG can op-
tionally terminate all established tunnels of such revoked apps,
immediately disconnecting revoked apps from other network
segments. A special case is the update of SENG’s server
key pair (Ksrv,K−1
srv ) as part of a periodic or emergency key
rollover. As the public key Ksrv is pinned by each shielded
app and part of their attestation, every app report changes
and has to be revoked. However, note that when using a tun-
nel cipher with (perfect) forward secrecy, their session keys
are unaffected by a server key breach (K−1
srv ). Thus, all estab-
USENIX Association
29th USENIX Security Symposium    759
lished tunnels and associated app connections can continue
operation (Table 2, rule 12).
6 Implementation
We now provide the details of the SENG architecture in
chronological order of the shielded app’s communication.
That is, we ﬁrst detail the setup phase, then how the app’s
network trafﬁc is protected, and ﬁnally, how the perimeter
ﬁrewall enforces app-grained communication policies.
Initialization and Tunnel Setup
6.1
Initialization Phase. Before the SENG runtime can protect
a client application, the SGX enclave must be set up. SENG
uses the Graphene-SGX LibOS [9], as it supports dynamic
loading of unmodiﬁed, multi-threaded Linux apps and shields
system calls. First, Graphene-SGX sets up an SGX enclave
and initializes the shielding layers. After ﬁnishing the setup,
but before loading the application, the SENG runtime loader
is called and launches a dedicated enclave thread for the user
space TCP/IP stack and for the tunnel module. The TCP/IP
stack is instantiated with the embedded lwIP stack [38], as
it is lightweight and modular by design. The tunnel module
manages the tunnel to the SENG server and registers itself as