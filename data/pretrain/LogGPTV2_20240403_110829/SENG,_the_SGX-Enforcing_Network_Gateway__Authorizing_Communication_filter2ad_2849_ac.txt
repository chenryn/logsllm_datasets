### Secure Communication Channel and Tunneling Traffic

The SENG server listens for incoming tunnel connections from shielded and trusted client applications. To ensure the security and integrity of these connections, SENG leverages Intel SGX's remote attestation to verify the identity of the client application and confirm that it is running within a valid SGX enclave with the SENG runtime.

#### Key Generation and Attestation
- **Key Pair Generation**: The SENG runtime generates a fresh public and private key pair and binds it to the enclave report, inspired by the work of Knauth et al. [32].
- **Attestation Report**: During the connection setup, the SENG runtime uses these keys to establish a mutually authenticated, end-to-end protected connection with the SENG server. The attestation report is provided to the SENG server.
- **Server Verification**: Before accepting the connection, the SENG server checks that the attestation report is bound to the connection and confirms that it belongs to a valid SGX enclave with a shielded application.

#### Traffic Protection
- **Tunnel Establishment**: Once the tunnel is established, traffic from the shielded application can be securely tunneled to the SENG server.
- **Routing and Protection**: The traffic is then routed through the gateway (including the firewall) while being protected from man-in-the-middle (MITM) attacks between the enclave and the gateway.

### Application-Grained Firewall Policies

Placing the SENG server on the gateway enables fine-grained traffic control at the perimeter firewall. This allows firewalls to precisely control which shielded applications are permitted to communicate with specific destinations, adding a new level of control not available with standard firewalls.

#### Central Allowlist and IP Subnet Assignment
- **Allowlist**: The SENG server maintains a central allowlist of trusted applications, linking each app to its trusted attestation report and an app-specific IP subnetwork.
- **IP Address Assignment**: A unique IP address from this subnet is assigned to each shielded enclave instance of a given client application. This makes the shielded application's identifier visible to all gateway services, including firewalls.

#### Policy Integration
- **App-Specific Policies**: Firewalls use this mapping to define app-specific policies, which can be easily integrated into existing toolchains.
- **Netfilter Module**: For easier integration, SENG also provides a netfilter kernel module and iptables extension that extends netfilter-based firewalls with SENG app identifiers, avoiding network fragmentation.

### Corporate Network Setup Example

To illustrate, consider a typical corporate network setup (Figure 3). The network includes:
- **SENG-Enabled Gateway**: Interconnects an untrusted internal client subnet, a trusted internal server subnet, a DMZ, and external networks.
- **DMZ Services**: Provides services like a public web shop and a DNS server.
- **Internal Servers**: Hosts an intranet web server, LDAP, and database servers, accessible only by internal clients.
- **Client Workstations**: Run trusted client applications (e.g., browsers, mail clients) that require access to internal and external servers.

#### Traditional vs. SENG Firewall Policies
- **Traditional Policies**: Table 2 shows traditional firewall policies (e.g., configured using iptables) for this setup.
- **SENG Policies**: The gray column in Table 2 shows the policy modifications required by SENG, replacing coarse-grained source addresses with app-grained addresses. For example, rule 1 restricts access to external networks to vetted Firefox clients, blocking any untrusted software.

### Optional Grouping and Subnets

Network administrators can optionally group shielded applications sharing similar policies into privilege-based subnets. For example:
- **Rule 3**: Restricts access to a specific mail client version.
- **Rule 6**: Grants access to all FileZilla versions in a subnet.
- **Rule 2**: Restricts access to external databases only to PSQL clients configured with SSL mode enabled.

### Enclave Deployment and Management

#### Enclave Deployment
- **Container Image**: The SENG runtime and dependencies are shipped as a container image. Each shielded app requires a configuration file listing the files to be protected, which can be partially automated.
- **App Store Distribution**: App bundles can be offered via corporate app stores.
- **Device Enrollment**: New SENG client devices are enrolled by including their addresses in the SENG policy database. Strong device bindings can be established using schemes like IEEE 802.1X.

#### Mixed Environments and Gradual Deployment
- **Heterogeneous Networks**: SENG can be deployed in mixed environments where not all hosts support SGX. Administrators can use network segmentation to separate SGX-enabled workstations from legacy workstations.
- **Gradual Migration**: Shielded apps would belong to the protected subnetwork, while legacy clients remain in the unprotected subnetwork.

#### Key Management
- **Minimal Key Management**: The SENG server authenticates clients via remote attestation. The client key pair is generated on each startup, eliminating the need for key rollouts.
- **Server Key Pair**: The SENG server's key pair must be securely managed, and the public key is shipped to clients as part of the SENG runtime.

#### Component Updates
- **Rebuilding Runtime Image**: On each component update, the SENG runtime image is rebuilt, and a new attestation report is extracted and inserted into the allowlist.
- **Software Bundle Identification**: SENG can identify the exact software bundle of a given enclave, allowing only specific app versions and mitigating the risk of outdated software.

#### Critical Updates and Key Rollovers
- **Revocation**: In case of critical security updates, compromised reports must be removed from the allowlist to revoke network access.
- **Key Rollover**: When updating the SENG server's key pair, all app reports change and must be revoked. However, if a tunnel cipher with forward secrecy is used, established tunnels and associated app connections can continue operation.

### Implementation Details

#### Initialization and Tunnel Setup
- **Initialization Phase**: The SGX enclave is set up using the Graphene-SGX LibOS, which supports dynamic loading of unmodified, multi-threaded Linux apps and shields system calls.
- **TCP/IP Stack and Tunnel Module**: The SENG runtime loader launches a dedicated enclave thread for the user space TCP/IP stack and the tunnel module, which manages the tunnel to the SENG server.

This structured and detailed approach ensures that the SENG architecture is clearly understood and effectively implemented, providing robust security and fine-grained control over network traffic.