### Oversized Allocation and Security Mechanism Failure in MarkUs

MarkUs encounters an issue when attempting to allocate an oversized memory block by calling `malloc(-1)` (Line 4). This large allocation causes a failure in the `sbrk` system call, leading MarkUs to switch to using `mmap` for further allocations. Unfortunately, this exceptional state disables MarkUs' security mechanism, allowing unsafe reclamation even with a dangling pointer (e.g., `p1`).

#### Proof of Concept (PoC) Code

```c
int main() {
    void* p0 = malloc(-1);
    void* p1 = malloc(0x80000);
    free(p1);
    void* p2 = malloc(0x40000);

    // p2 reclaims p1’s region even though p1 is dangling
    assert(p1 <= p2 && p2 < p1 + 0x80000);
}
```

Figure 7: PoC code that triggers unsafe reclamation in MarkUs even with a dangling pointer (i.e., `p1`).

To address this, the latest version of MarkUs disables the `mmap` feature for such oversized allocations, as they are rare in normal applications. This demonstrates HardsHeap's effectiveness in uncovering unexpected bugs in secure allocators.

### Heap Spray Vulnerability in mimalloc

HardsHeap also identified that mimalloc is vulnerable to heap spraying attacks if an attacker can control the allocation size. For instance, requesting 4 TB of memory in mimalloc returns a valid object, which always includes `0x7FFFFFFF000` in its address range, regardless of randomization. This occurs because mimalloc always enables memory overcommit by setting `MAP_NORESERVE` in its `mmap` calls. As previous research has shown [29], improper use of memory overcommit can break Address Space Layout Randomization (ASLR).

Thanks to our reporting, mimalloc fixed this issue by restricting the maximum allocation size to ensure sufficient entropy in the allocation process [48]. We found that Guarder and FreeGuard have similar issues, but their memory addresses exhibit higher entropy compared to mimalloc.

### Other Issues

HardsHeap also discovered that SlimGuard fails to validate invalid free operations, similar to ptmalloc2 [3, 36]. Despite SlimGuard's claims of safety in handling invalid frees, HardsHeap successfully found a counterexample.

### Discussion and Limitations

#### Usefulness of Secure Allocators

Our findings do not imply that secure allocators are useless. In fact, HardsHeap demonstrates that secure allocators are effective in defending against several types of heap vulnerabilities. Our evaluation shows that most secure allocators perform well in securing small objects, which are common in normal applications (see §8.1). However, HardsHeap highlights that secure allocators are not a panacea for all heap vulnerabilities. They have limitations, particularly for large and elastic objects, and can be incorrectly implemented like any other software. These facts do not negate the advantages of secure allocators, and we recommend their use for enhanced security.

#### Windows Support

We believe HardsHeap can be extended to support other platforms, such as Windows. Microsoft Windows is particularly interesting as it supports a hardened allocator at the system level, known as Low-Fragmentation Heap (LFH) [24]. Extending HardsHeap to Windows would require significant changes due to the platform's differences from Linux. Specifically, HardsHeap would need to use unique APIs for dynamic memory management, such as `HeapCreate`, `HeapAlloc`, and `HeapFree`. Additionally, HardsHeap would need to adapt to different system-level mechanisms, such as signals and process creation, which are tightly coupled with the underlying platform.

#### Lack of Reasoning

Although HardsHeap's approach is implementation-agnostic and applicable to diverse allocators, it sometimes lacks the reasoning needed to fully understand the security implications of its findings. For example, HardsHeap found metadata leakage in mimalloc, but further analysis revealed that the leaked metadata becomes obsolete when mimalloc marks its underlying pages as free, which happens during large object deallocations. HardsHeap cannot reason about this because it operates without understanding the allocator's implementation.

#### Incompleteness

Similar to classical fuzzing, HardsHeap cannot guarantee completeness in the security of secure allocators. It can only indicate the existence of security violations but cannot prove their non-existence. The existing modules in HardsHeap were empirically designed and implemented without formal definitions of secure allocators. Defining these security properties against heap vulnerabilities remains a future challenge.

### Related Work

#### Security Analysis of Secure Allocators

Many secure allocators have been developed to mitigate heap vulnerabilities. DieHarder [28] designs a secure allocator with several secure mechanisms, including segregated metadata and randomized allocations. FreeGuard [37] reduces runtime overhead but may offer weaker security guarantees than DieHarder. Guarder [38] addresses the unstable security of previous works with low overheads. Microsoft has also implemented several security mechanisms in its default allocator [7]. Scudo [22], a hardened allocator in the LLVM project, is now the default allocator in Android's native code.

#### Delta Debugging

Delta debugging [19, 51] is a widely used technique for minimizing failing test cases. It repeatedly launches a program with smaller inputs to find the minimum input that causes the failure. HDD [27], C-Reduce [31], and Perses [41] extend this idea by exploiting hierarchical structures in programming languages. Groce et al. [13, 14] use delta debugging to speed up software testing. However, none of these techniques handle stochastic failures, which HardsHeap aims to find. Choi et al. [9] and Hammoudi et al. [15] address stochastic failures using record and replay, but this method is limited in HardsHeap as it cannot measure the probability of bad events. Therefore, we developed Statistical Significance Delta Debugging (SSDD), which uses repetitive sampling to achieve the current probability in reduction.

#### Automatic Exploit Generation

There has been significant research on automatic exploit generation [4, 6, 17, 18, 23, 32, 34, 44]. Avgerinos et al. and Schwartz et al. [2, 34] explore fully automated exploit generation for stack overflow and format string bugs. Repel et al. [32] and Heelan et al. [18] leverage modular approaches to address the complexity of heap vulnerabilities. FUZE [47] and KOOBE [8] demonstrate automatic exploit generation for more complex targets, such as the Linux Kernel. However, these studies focus on default allocators with limited security mechanisms or rely on domain-specific knowledge. While HardsHeap does not support end-to-end automatic exploit generation, its findings can be used as part of the process, similar to other works for discovering useful exploit primitives [10, 23, 46, 49].

### Conclusion

In this paper, we present HardsHeap, a new framework for automatically evaluating secure allocators. HardsHeap supports an extensible framework for building analyses for each security property and employs sampling-based testing and SSDD to handle randomized security mechanisms. We applied HardsHeap to 10 secure allocators, demonstrating its effectiveness in evaluating their security. Using HardsHeap, we discovered 10 implementation bugs that significantly harm the security properties of these allocators.

### Acknowledgment

We thank the anonymous reviewers and our shepherd, David Chisnall, for their valuable feedback. We also thank Kostya Kortchinsky for discussions on the scudo allocator, and Emery Berger and Michael Steranka for discussions on DieHarder and Entroprise. This research was supported, in part, by various grants and gifts from organizations such as NSF, ONR, DARPA, ETRI, IITP/KEIT, Facebook, Mozilla, Intel, VMware, and Google. Additional support was provided by the Institute for Information & Communications Technology Planning & Evaluation (IITP) grant funded by the Korea government (MSIT) [No. 2019-0-01343, Regional strategic industry convergence security core talent training business].

### References

[References listed as in the original document]

Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea