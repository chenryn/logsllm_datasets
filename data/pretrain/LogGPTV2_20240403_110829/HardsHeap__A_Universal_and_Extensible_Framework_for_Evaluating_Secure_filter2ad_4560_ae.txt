gers an oversized allocation by calling malloc(-1) (Line 4). This
large allocation caused sbrk failure, and MarkUs shifted to use mmap
for further allocation. Unfortunately, MarkUs’ security mechanism
stopped working after this exceptional state and allowed unsafe
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea389void* p0 = malloc(-1);
void* p1 = malloc(0x80000);
free(p1);
void* p2 = malloc(0x40000);
1 int main() {
2
3
4
5
6
7
8
9 }
Figure 7: PoC code that triggers unsafe reclamation in MarkUs even
with a dangling pointer (i.e., p1).
// p2 reclaimed p1’s region even p1 is dangling
assert(p1 <= p2 && p2 < p1 + 0x80000);
reclamation. To fix it, the latest version of MarkUs disables this mmap
feature because it will only occur with this oversized allocation,
which rarely happens in normal applications. This shows the effec-
tiveness of HardsHeap in discovering unexpected bugs in secure
allocators.
9.4 Heap spray in mimalloc
HardsHeap also found that mimalloc is vulnerable to heap spraying
attacks if an attacker can control the allocation size. For example,
if we request 4 TB size memory in mimalloc, it successfully returns
a valid object, which always includes 0x7FFFFFFF000 in its address
range regardless of randomization. It happens that mimalloc always
turns on memory overcommit by setting MAP_NORESERVE in its mmap
call. As previous work has demonstrated [29], memory overcommit
should be carefully used; otherwise, it can allow us to break ASLR.
Thanks to our reporting, mimalloc fixed this issue by restricting the
maximum allocation size for sufficient entropy in allocation [48].
We found that Guarder and FreeGuard have similar issues; however,
they are much better than mimalloc because their memory addresses
have higher entropy than mimalloc’s.
9.5 Other issues
HardsHeap also found that SlimGuard is insufficient to validate
invalid free, which is similar to ptmalloc2 [3, 36]. Even though
SlimGuard claims its safety in invalid free, HardsHeap successfully
found a counterexample for it.
10 DISCUSSION & LIMITATIONS
10.1 Usefulness of Secure Allocators
It is worth noting that our findings do not imply that secure alloca-
tors are useless. In fact, HardsHeap shows that secure allocators
are effective in defending against several types of heap vulnerabili-
ties. In particular, our evaluation shows that most secure allocators
work well in securing small objects, which are prevalent in normal
applications (see §8.1). Basically, HardsHeap only demonstrates
that secure allocators are no silver bullet for heap vulnerabilities.
They have several limitations particularly for large objects and
elastic objects whose sizes are controllable. Moreover, they could be
incorrectly implemented similar to other software. However, these
facts do not completely eliminate the advantages of secure alloca-
tors. Therefore, we should use secure allocators for better security.
10.2 Windows support
We believe that HardsHeap can be extended to support other plat-
forms such as Windows. Microsoft Windows is particularly interest-
ing compared to other platforms; it supports a hardened allocator
at the system level, which is known as Low-Fragmentation Heap
(LFH) [24]. To this end, HardsHeap requires considerable changes
to support Windows because of its significant differences from
Linux. In particular, HardsHeap requires to use unique APIs for
dynamic memory management such as HeapCreate, HeapAlloc, and
HeapFree. Even though Windows also supports the standard C APIs
such as malloc and free, they are just wrappers of the aforemen-
tioned APIs and are insufficient to evaluate unique features in Win-
dows. Moreover, HardsHeap needs to use different system-level
mechanisms such as signals and process creations, which are tightly
coupled with the underlying platforms. For example, HardsHeap
currently uses SIGUSR2 to notify its finding to the fuzzer; however,
it is no longer usable in Windows.
10.3 Lack of reasoning
Even though HardsHeap’s approach is applicable to diverse alloca-
tors owing to its implementation-agnostic approach, it is occasion-
ally insufficient to understand the security implications of its find-
ings due to a lack of reasoning. During our evaluation, HardsHeap
found metadata leakage in mimalloc; we can leak metadata by deallo-
cating a large object. Although this finding surprises the developers
of mimalloc, we found that it has no security implication after fur-
ther analysis. In more detail, leaked metadata from HardsHeap
become obsolete when mimalloc marks its underlying pages as free.
This happens in large object deallocations, which are required for
leakage. Unfortunately, HardsHeap fails to reason this because it
works without understanding the allocator’s implementation.
10.4 Incompleteness
Similar to classical fuzzing, HardsHeap cannot guarantee any
completeness in the security of secure allocators. In other words,
HardsHeap only indicates us the existence of security violations
but cannot prove their non-existence. Moreover, it is impossible
to argue that the existing modules in HardsHeap are sufficient
for evaluating security allocators. It happens that we empirically
designed and implemented them without formal definitions of se-
cure allocators. We believe that it is still debatable what security
properties are sufficient to secure allocators. Thus, we leave it as
future work to formally define these security properties against
heap vulnerabilities.
11 RELATED WORK
11.1 Security Analysis of Secure Allocators
Many secure allocators have been developed to mitigate heap vul-
nerabilities. DieHarder [28] designs a secure allocator that supports
several secure mechanisms, including segregated metadata and
randomized allocations after formally analyzing existing attacks
and allocators. FreeGuard [37] further reduces runtime overhead
even though its security guarantee could be weaker than that of
DieHarder. Moreover, Guarder [38] addresses the unstable security
of previous works with low overheads. Microsoft also has employed
several security mechanisms in its default allocator [7]. Moreover,
scudo [22], a hardened allocator in the LLVM project, becomes a
default allocator in Android’s native code.
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea39012 CONCLUSION
In this paper, we present HardsHeap, a new framework for au-
tomatically evaluating secure allocators. HardsHeap supports an
extensible framework that makes it easy to build an analysis for each
security property. Moreover, HardsHeap employs sampling-based
testing and Statistical Significance Delta Debugging (SSDD) to sup-
port randomized security mechanisms. We applied HardsHeap to
10 secure allocators to show that HardsHeap’s approach is effective
in evaluating the security in secure allocators. Using HardsHeap,
we also successfully discovered 10 implementations bugs that seri-
ously harm the security properties of the allocators.
13 ACKNOWLEDGMENT
We thank the anonymous reviewers, and our shepherd, David
Chisnall, for their helpful feedback. We also thank to Kostya Ko-
rtchinsky for discussion on the scudo allocator. We thank to Emery
Berger and Michael Steranka for discussion on DieHarder and En-
troprise. This research was supported, in part, by the NSF award
CNS-1563848, CNS-1704701, CRI-1629851 and CNS-1749711 ONR
under grant N00014-18-1-2662, N00014-15-1-2162, N00014-17-1-
2895, DARPA AIMEE grant under Agreement No. HR00112090034
ETRI IITP/KEIT[2014-3-00035], and gifts from Facebook, Mozilla,
Intel, VMware and Google. This work was also supported by In-
stitute for Information & communications Technology Planning
& Evaluation(IITP) grant funded by the Korea government(MSIT)
(No.2019-0-01343, Regional strategic industry convergence security
core talent training business).
Despite such efforts to develop secure allocators, their security
evaluations still remain ad-hoc. Most existing studies rely on man-
ual analysis of security experts or theoretical analysis [5, 7, 28, 38].
There have been several studies for automatically evaluating the se-
curity of allocators. Heelan et al. proposes pseudo-random black box
search for discovering adjacent chunks. HeapHopper [10] adopts
bounded model checking to evaluate the security of allocators,
while ArcHeap [49] leverages random testing. However, they are
limited to non-secure allocators and cannot support randomization,
which is essential in evaluating secure allocators. In comparison,
HardsHeap can successfully evaluate secure allocators automat-
ically and thoroughly thanks to its extensibility for supporting
various security properties as well as sampling-based testing for
handling randomization. Recently, Entroprise [39] evaluates the
entropy of randomized allocations in secure allocators; however, it
only supports pre-defined object sizes unlike HardsHeap. Entro-
prise can determine the actual entropy of memory as allocated by
actual applications, which HardsHeap cannot support.
11.2 Delta Debugging
Delta debugging [19, 51] is a widely used technique for minimiz-
ing failing test cases; it launches a program with a smaller input
and checks whether the failure still occurs with this reduced one.
By repeating this process, delta debugging can find the minimum
input for failure. HDD [27], C-Reduce [31], and Perses [41] expand
this idea by exploiting a hierarchical structure in programming
languages. Groce et al. [13, 14] adopt delta debugging to speed
up software testing even without failures. Unfortunately, none of
them assumes the stochastic failures that HardsHeap attempts to
find. Choi et al. [9] and Hammoudi et al. [15] deal with stochastic
failures using record and replay. However, record and replay is
limited in HardsHeap because it cannot measure the probability
of bad events (e.g., adjacent chunks), which is important for the
evaluation of secure allocators. Thus, we devise another technique
called SSDD, which repetitively samples to achieve the current
probability in reduction.
11.3 Automatic Exploit Generation
There has been a line of research works for automatic exploit gen-
eration [4, 6, 17, 18, 23, 32, 34, 44]. Avgerinos et al. and Schwartz
et al. [2, 34] explore fully automated exploit generation for stack
overflow and format string bugs. To address the complexity of heap
vulnerabilities, Repel et al. [32] and Heelan et al. [18] leverage mod-
ular approaches. Moreover, FUZE [47] and KOOBE [8] successfully
demonstrate automatic exploit generation to a more complex target,
Linux Kernel, for use-after-free and out-of-bounds vulnerabilities,
respectively. However, these studies only focus on default alloca-
tors with limited security mechanisms or rely on domain-specific
knowledge for exploitation. Even though HardsHeap cannot sup-
port end-to-end automatic exploit generation like these works, we
believe that HardsHeap’s findings can be used as a part of auto-
matic exploit generation to secure allocators similar to other works
for discovering useful exploit primitives [10, 23, 46, 49].
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea391REFERENCES
[1] Sam Ainsworth and Timothy M Jones. 2020. MarkUs: Drop-in use-after-free
prevention for low-level languages. In Proceedings of the 41st IEEE Symposium on
Security and Privacy (Oakland). San Francisco, CA.
[2] Thanassis Avgerinos, Sang Kil Cha, Alexandre Rebert, Edward J Schwartz, Mav-
erick Woo, and David Brumley. 2011. AEG: Automatic exploit generation. In
Proceedings of the 18th Annual Network and Distributed System Security Sympo-
sium (NDSS). San Diego, CA.
[3] blackngel. 2009. Malloc Des-Maleficarum. http://phrack.org/issues/66/10.html.
[4] David Brumley, Pongsin Poosankam, Dawn Song, and Jiang Zheng. 2008. Auto-
matic patch-based exploit generation is possible: Techniques and implications.
In Proceedings of the 29th IEEE Symposium on Security and Privacy (Oakland).
Oakland, CA.
[5] Silvio Cesare. 2020. Breaking Secure Checksums in the Scudo Allocator. https://
blog.infosectcbr.com.au/2020/04/breaking-secure-checksums-in-scudo_8.html.
[6] Sang Kil Cha, Thanassis Avgerinos, Alexandre Rebert, and David Brumley. 2012.
Unleashing mayhem on binary code. In Proceedings of the 33rd IEEE Symposium
on Security and Privacy (Oakland). San Francisco, CA.
[7] Wei Chan. 2019. Heap Overflow Exploitation on Windows 10 Explained.
[8] Weiteng Chen, Xiaochen Zou, Guoren Li, and Zhiyun Qian. 2020. KOOBE:
Towards Facilitating Exploit Generation of Kernel Out-Of-Bounds Write Vulner-
abilities. In Proceedings of the 29th USENIX Security Symposium (Security). Boston,
MA.
[9] Jong-Deok Choi and Andreas Zeller. 2007.
Isolating failure-inducing thread
schedules. In Proceedings of the International Symposium on Software Testing and
Analysis (ISSTA).
[10] Moritz Eckert, Antonio Bianchi, Ruoyu Wang, Yan Shoshitaishvili, Christopher
Kruegel, and Giovanni Vigna. 2018. Heaphopper: Bringing bounded model check-
ing to heap implementation security. In Proceedings of the 27th USENIX Security
Symposium (Security). Baltimore, MD.
[11] Google. 2013. Partition Alloc Design. https://chromium.googlesource.com/
chromium/src/+/master/base/allocator/partition_allocator/PartitionAlloc.md.
[12] GrapheneOS. 2018. Hardened malloc. https://github.com/GrapheneOS/hardened_
malloc.
[13] Alex Groce, Mohammed Amin Alipour, Chaoqiang Zhang, Yang Chen, and John
Regehr. 2014. Cause reduction for quick testing. In Proceedings of the International
Symposium on Software Testing and Analysis (ISSTA). San Jose, CA.
[14] Alex Groce, Mohammad Amin Alipour, Chaoqiang Zhang, Yang Chen, and John
Regehr. 2016. Cause reduction: delta debugging, even without bugs. Software
Testing, Verification and Reliability 26, 1 (2016), 40–68.
[15] Mouna Hammoudi, Brian Burg, Gigon Bae, and Gregg Rothermel. 2015. On the
use of delta debugging to reduce recordings and facilitate debugging of web
applications. In Proceedings of the 10th European Software Engineering Conference
(ESEC) and ACM SIGSOFT Symposium on the Foundations of Software Engineering
(FSE). Bergamo, Italy.
[16] Ben Hawkes. 2019. 0day "In the Wild". https://googleprojectzero.blogspot.com/
p/0day.html.
[17] Sean Heelan, Tom Melham, and Daniel Kroening. 2018. Automatic Heap Lay-
out Manipulation for Exploitation. In Proceedings of the 27th USENIX Security
Symposium (Security). Baltimore, MD.
[18] Sean Heelan, Tom Melham, and Daniel Kroening. 2019. Gollum: Modular and
Greybox Exploit Generation for Heap Overflows in Interpreters. In Proceedings
of the 26th ACM Conference on Computer and Communications Security (CCS).
London, UK.
[19] Lukas Kirschner, Ezekiel Soremekun, and Andreas Zeller. 2020. Debugging in-
puts. In Proceedings of the 42nd International Conference on Software Engineering
(ICSE).
[20] Byoungyoung Lee, Chengyu Song, Yeongjin Jang, Tielei Wang, Taesoo Kim, Long
Lu, and Wenke Lee. 2015. Preventing Use-after-free with Dangling Pointers
Nullification. In Proceedings of the 2015 Annual Network and Distributed System
Security Symposium (NDSS). San Diego, CA.
[21] Beichen Liu, Pierre Olivier, and Binoy Ravindran. 2019. SlimGuard: A Secure
and Memory-Efficient Heap Allocator. In Proceedings of the 20th International
Middleware Conference.
[22] LLVM Project. 2019.
Scudo Hardened Allocator.
https://llvm.org/docs/
ScudoHardenedAllocator.html.
[23] Kangjie Lu, Marie-Therese Walter, David Pfaff, Stefan Nürnberger, Wenke Lee,
and Michael Backes. 2017. Unleashing use-before-initialization vulnerabilities in
the Linux kernel using targeted stack spraying. In Proceedings of the 2017 Annual
Network and Distributed System Security Symposium (NDSS). San Diego, CA.
[24] Microsoft. 2018. Low-fragmentation Heap. https://docs.microsoft.com/en-
us/windows/win32/memory/low-fragmentation-heap.
[25] Microsoft. 2019. mimalloc. https://github.com/microsoft/mimalloc.
[26] Matt Miller. 2020. Pursuing Durably Safe Systems Software. In SSTIC.
[27] Ghassan Misherghi and Zhendong Su. 2006. HDD: hierarchical delta debugging.
In Proceedings of the 28th International Conference on Software Engineering (ICSE).
Shanghai, China.
[28] Gene Novark and Emery D Berger. 2010. DieHarder: securing the heap. In Pro-
ceedings of the 17th ACM Conference on Computer and Communications Security
(CCS). Chicago, IL.
[29] Angelos Oikonomopoulos, Elias Athanasopoulos, Herbert Bos, and Cristiano
Giuffrida. 2016. Poking holes in information hiding. In Proceedings of the 25th
USENIX Security Symposium (Security). Austin, TX.
[30] Rohan Padhye, Caroline Lemieux, Koushik Sen, Mike Papadakis, and Yves
Le Traon. 2019. Semantic fuzzing with zest. In Proceedings of the International
Symposium on Software Testing and Analysis (ISSTA). Beijing, China.
[31] John Regehr, Yang Chen, Pascal Cuoq, Eric Eide, Chucky Ellison, and Xuejun
Yang. 2012. Test-case reduction for C compiler bugs. In Proceedings of the 2012
ACM SIGPLAN Conference on Programming Language Design and Implementation
(PLDI). Beijing, China.
[32] Dusan Repel, Johannes Kinder, and Lorenzo Cavallaro. 2017. Modular Synthesis
of Heap Exploits. In Proceedings of the ACM SIGSAC Workshop on Programming
Languages and Analysis for Security. Dallas, TX.
[33] Chris Rohlf. 2020. https://github.com/struct/isoalloc.
[34] Edward J Schwartz, Thanassis Avgerinos, and David Brumley. 2011. Q: Exploit
Hardening Made Easy.. In Proceedings of the 20th USENIX Security Symposium
(Security). San Francisco, CA.
[35] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and Dmitriy
Vyukov. 2012. AddressSanitizer: A fast address sanity checker. In Proceedings of
the 2012 USENIX Annual Technical Conference (ATC). Boston, MA.
[36] shellphish. 2016. how2heap: A repository for learning various heap exploitation
techniques. https://github.com/shellphish/how2heap.
[37] Sam Silvestro, Hongyu Liu, Corey Crosser, Zhiqiang Lin, and Tongping Liu.
2017. Freeguard: A faster secure heap allocator. In Proceedings of the 24th ACM
Conference on Computer and Communications Security (CCS). Dallas, TX.
[38] Sam Silvestro, Hongyu Liu, Tianyi Liu, Zhiqiang Lin, and Tongping Liu. 2018.
Guarder: A tunable secure allocator. In Proceedings of the 27th USENIX Security
Symposium (Security). Baltimore, MD.
[39] Michael Steranka and Emery Berger. 2019. Entroprise. https://github.com/plasma-
umass/entroprise.
[40] Student. 1908. The probable error of a mean. Biometrika (1908), 1–25.
[41] Chengnian Sun, Yuanbo Li, Qirun Zhang, Tianxiao Gu, and Zhendong Su. 2018.
Perses: Syntax-guided program reduction. In Proceedings of the 40th International
Conference on Software Engineering (ICSE). Gothenburg, Sweden.
[42] Erik Van Der Kouwe, Vinod Nigade, and Cristiano Giuffrida. 2017. Dangsan:
Scalable use-after-free detection. In Proceedings of the 12th European Conference
on Computer Systems (EuroSys). Belgrade, RS.
[43] Pauli Virtanen, Ralf Gommers, Travis E Oliphant, Matt Haberland, Tyler
Reddy, David Cournapeau, Evgeni Burovski, Pearu Peterson, Warren Weckesser,
Jonathan Bright, et al. 2020. SciPy 1.0: fundamental algorithms for scientific
computing in Python. Nature methods 17, 3 (2020), 261–272.
[44] Yan Wang, Chao Zhang, Xiaobo Xiang, Zixuan Zhao, Wenjie Li, Xiaorui Gong,
Bingchang Liu, Kaixiang Chen, and Wei Zou. 2018. Revery: From Proof-of-
Concept to Exploitable. In Proceedings of the 25th ACM Conference on Computer
and Communications Security (CCS). Toronto, ON, Canada.
[45] Brian Wickman, Hong Hu, Insu Yun Daehee Jang, JungWon Lim Sanidhya
Kashyap, and Taesoo Kim. 2021. Preventing Use-After-Free Attacks with Fast
Forward Allocation. (Aug. 2021).
[46] Wei Wu, Yueqi Chen, Xinyu Xing, and Wei Zou. 2019. KEPLER: Facilitating
Control-flow Hijacking Primitive Evaluation for Linux Kernel Vulnerabilities. In
Proceedings of the 28th USENIX Security Symposium (Security). Santa Clara, CA.
[47] Wei Wu, Yueqi Chen, Jun Xu, Xinyu Xing, Xiaorui Gong, and Wei Zou. 2018.
FUZE: Towards facilitating exploit generation for kernel use-after-free vulnerabil-
ities. In Proceedings of the 27th USENIX Security Symposium (Security). Baltimore,
MD.
[48] Insu Yun. 2021. mimalloc issue # 372. https://github.com/microsoft/mimalloc/
[49] Insu Yun, Dhaval Kapil, and Taesoo Kim. 2020. Automatic Techniques to System-
atically Discover New Heap Exploitation Primitives. In Proceedings of the 29th
USENIX Security Symposium (Security). Boston, MA.
[50] Michal Zalewski. 2014. american fuzzy lop. http://lcamtuf.coredump.cx/afl/.
[51] Andreas Zeller. 1999. Yesterday, my program worked. Today, it does not. Why?. In
Proceedings of the 7th European Software Engineering Conference (ESEC) / 7th ACM
SIGSOFT Symposium on the Foundations of Software Engineering (FSE). Toulouse,
France.
issues/372.
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea392