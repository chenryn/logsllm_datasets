### Module 1: A Journey from High-Level Languages to Running Processes

**Overview:**
This module explores the journey from high-level programming languages, through assembly, to the running process. We will cover the basics of the Portable Executable (PE) format, which is the native executable format on Windows.

**Resources:**
- [GitHub Repository](https://github.com/hasherezade/malware_training_vol1)

### Basics of PE (Portable Executable)

#### Introduction to PE Files
- **PE (Portable Executable):** The native executable format for Windows.
- **Types of PE Files:**
  - **User Mode:** EXE, DLL
  - **Kernel Mode:** Driver (.sys), Kernel Image (ntoskrnl.exe)
  - **UEFI:** Runs in System Management Mode (SMM)
- **Similar Structures:** OBJ files also have structures similar to PE.

#### Contents of a PE File
- **Execution Information:**
  - **What to Execute:** The compiled code.
  - **How to Execute:** Headers with data necessary for loading and execution.

#### Historical Context
- **Origin:** Based on the Unix COFF format used in VAX/VMS.
- **Introduction:** Part of the Win32 specification.
- **Evolution:**
  - Core format remains largely unchanged.
  - New fields and structures added over time.
  - **64-bit Support:** Introduced with 64-bit environments.
  - **.NET PE:** Contains additional structures for intermediate code and metadata.

### Structure of a PE File

#### DOS Header
- **Legacy Component:**
  - Only `e_magic` and `e_lfanew` must be filled.
  - `e_magic` is the magic number "MZ".
  - `e_lfanew` points to the NT header.

```c
typedef struct _IMAGE_DOS_HEADER {
    WORD   e_magic; // Magic number "MZ"
    ...
    LONG   e_lfanew; // Points to the NT header
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;
```

#### NT Headers
- **Signature:** "PE\0\0"
- **File Header:**
  - **Fields:**
    - `Machine`: Specifies the architecture.
    - `NumberOfSections`: Number of sections.
    - `TimeDateStamp`, `PointerToSymbolTable`, `NumberOfSymbols`.
    - `SizeOfOptionalHeader`, `Characteristics`.

```c
typedef struct _IMAGE_FILE_HEADER {
    WORD    Machine;
    WORD    NumberOfSections;
    DWORD   TimeDateStamp;
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
    WORD    SizeOfOptionalHeader;
    WORD    Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
```

- **Optional Header:**
  - **Fields:**
    - `Magic`: Type (NT32 or NT64).
    - `MajorLinkerVersion`, `MinorLinkerVersion`.
    - `SizeOfCode`, `SizeOfInitializedData`, `SizeOfUninitializedData`.
    - `AddressOfEntryPoint`: Where execution starts.
    - `BaseOfCode`, `ImageBase`: Default load base.
    - `SectionAlignment`, `FileAlignment`.
    - `MajorOperatingSystemVersion`, `MinorOperatingSystemVersion`.
    - `MajorImageVersion`, `MinorImageVersion`.
    - `MajorSubsystemVersion`, `MinorSubsystemVersion`.
    - `Win32VersionValue`, `SizeOfImage`, `SizeOfHeaders`.
    - `CheckSum`, `Subsystem`, `DllCharacteristics`.
    - `SizeOfStackReserve`, `SizeOfStackCommit`.
    - `SizeOfHeapReserve`, `SizeOfHeapCommit`.
    - `LoaderFlags`, `NumberOfRvaAndSizes`.
    - `DataDirectory`: Array of data directories.

```c
typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD        Magic;
    BYTE        MajorLinkerVersion;
    BYTE        MinorLinkerVersion;
    DWORD       SizeOfCode;
    DWORD       SizeOfInitializedData;
    DWORD       SizeOfUninitializedData;
    DWORD       AddressOfEntryPoint;
    DWORD       BaseOfCode;
    ULONGLONG   ImageBase;
    DWORD       SectionAlignment;
    DWORD       FileAlignment;
    WORD        MajorOperatingSystemVersion;
    WORD        MinorOperatingSystemVersion;
    WORD        MajorImageVersion;
    WORD        MinorImageVersion;
    WORD        MajorSubsystemVersion;
    WORD        MinorSubsystemVersion;
    DWORD       Win32VersionValue;
    DWORD       SizeOfImage;
    DWORD       SizeOfHeaders;
    DWORD       CheckSum;
    WORD        Subsystem;
    WORD        DllCharacteristics;
    ULONGLONG   SizeOfStackReserve;
    ULONGLONG   SizeOfStackCommit;
    ULONGLONG   SizeOfHeapReserve;
    ULONGLONG   SizeOfHeapCommit;
    DWORD       LoaderFlags;
    DWORD       NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[DIRECTORY_ENTRIES_NUM];
} IMAGE_OPTIONAL_HEADER64;
```

### Sections in a PE File

- **Logical Layout:**
  - Divides the binary into sections with different permissions.
  - Improves security by isolating code from data.
- **Permissions:**
  - If DEP (Data Execution Prevention) is disabled, pages without execution permission can still be executed.

#### Section Headers
- **Definition:**
  - Defines the sections in the PE file.

```c
#define IMAGE_FIRST_SECTION( ntheader ) ((PIMAGE_SECTION_HEADER)  \
((ULONG_PTR)(ntheader) +                                      \
FIELD_OFFSET( IMAGE_NT_HEADERS, OptionalHeader ) +           \
((ntheader))->FileHeader.SizeOfOptionalHeader   \
))
```

- **Storage:**
  - **On Disk:** Raw format, unit defined by `FileAlignment`.
  - **In Memory:** Mapped to virtual format, unit defined by `SectionAlignment`.

### Caves in PE Files

- **Unused Space:**
  - Reserved space for a section is rounded up to some unit.
  - Additional unused space is called a section cave (or code cave).
  - Can be virtual or raw.
  - Sometimes used for installing code implants.

### Addresses in PE Files

- **Raw vs. Virtual Addresses:**
  - Raw addresses (in file) usually correspond to virtual addresses (in memory) and vice versa.
  - Some sections may be unpacked in memory and not filled in the file.
  - Some addresses may not be mapped (present in the file but not in the memory image).

### Relocation in PE Files

- **Default Base Address:**
  - PEs come with a default base address.
  - Absolute addresses inside the PE assume it was loaded at this base.
- **Dynamic Base (ASLR):**
  - Modern PEs use a dynamic base due to ASLR.
  - A flag in the header determines if a dynamic base will be used.
- **Rebasing:**
  - If the PE is loaded at a different base, fields using absolute addresses must be recalculated (rebased).
- **Relocation Table:**
  - Lists fields that need to be rebased.

### Imports and Exports in PE Files

- **Imports:**
  - **Static Library:** Linker adds external code into the PE.
  - **Dynamic Library (DLL):** Functions listed in the Import Table, dynamically linked when the PE is loaded.
  - **Manual Loading:** Use `LoadLibrary` and `GetProcAddress` to load and fetch functions.
- **Exports:**
  - **Export Table:** Catalogue allowing other PEs to find and use functions.
  - **Function Exporting:**
    - By name or ordinal.
    - Forwarded functions point to other functions in other DLLs.

### Exercise

- **Task:**
  - Compile the given code of a custom PE loader and get familiar with it.
  - [GitHub Repository](https://github.com/hasherezade/malware_training_vol1/tree/main/exercises/module1/lesson2_pe)

### Further Readings

- **MSDN Documentation:**
  - [PE Format](https://docs.microsoft.com/en-us/windows/win32/debug/pe-format)
- **Classic Articles:**
  - [Matt Pietrek's In-Depth Look into PE Format (Part 1)](https://bytepointer.com/resources/pietrek_in_depth_look_into_pe_format_pt1.htm)
  - [Matt Pietrek's In-Depth Look into PE Format (Part 2)](https://bytepointer.com/resources/pietrek_in_depth_look_into_pe_format_pt2.htm)
  - [Microsoft Documentation on PE Format](https://docs.microsoft.com/en-us/previous-versions/ms809762(v=msdn.10)?redirectedfrom=MSDN)

This optimized version aims to provide a clear, coherent, and professional overview of the PE format and its components.