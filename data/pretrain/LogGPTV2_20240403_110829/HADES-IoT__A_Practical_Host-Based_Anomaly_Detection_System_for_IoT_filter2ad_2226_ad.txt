### Enforcement Mode of HADES-IoT

In the enforcement mode, a signed command, along with the public key \( PK_i \), authentication path \( AP_i \), and the ID of the leaf \( i \), is sent to the user-space application. This application then forwards these details to the kernel-space application of HADES-IoT. HADES-IoT verifies the authenticity of the message using the provided content and the embedded master public key (refer to Section 5.2 for more details). As part of this verification process, the ID of the message is compared to the reply counter. If the message ID is less than or equal to the reply counter, the authentication fails due to a potential replay attack. Otherwise, the authentication is successful, and the reply counter is updated. After the message is authenticated, HADES-IoT's protection is temporarily disabled, and the user receives an acknowledgment, allowing them to proceed with the firmware update. Once the device is updated, a new signed command instructing HADES-IoT to perform profiling and re-enable protection is sent. The authenticity verification process for this new command follows the same procedure as before, and if successful, the protection is re-enabled.

### Evaluation

We implemented a proof-of-concept of HADES-IoT and tested it on seven IoT devices (see Table 1). In this section, we first demonstrate that HADES-IoT can be deployed by both manufacturers and end-users. We also experiment with various profiling time periods to determine the minimum time required for accurate profiling. Finally, we evaluate HADES-IoT's detection performance against vulnerabilities exploited by recent IoT malware and measure its resource consumption.

#### 6.1 Precompilation of HADES-IoT

To ensure that the configuration options and features of HADES-IoT's Loadable Kernel Module (LKM) match the kernel of the targeted IoT device (as discussed in Section 3.2), we followed a process to identify the minimal set of necessary features and options. 

First, we selected several IoT devices (D-Link DCS-942L, Provision PT-737E, SimpleHome XCS7-1001) for which manufacturers provided the kernel source code and configuration. Using the manufacturer's toolchain, we cross-compiled HADES-IoT against the custom Linux kernels and verified successful deployment. Next, we downloaded the generic Linux kernel source code from the Linux kernel archives, matching the version used by the manufacturer. We then selected the default configuration file for the closest architecture model, modified it to match the manufacturer's configuration, and compiled HADES-IoT against the kernel. By selectively removing parts of the manufacturer's configuration, we determined the minimal options required for successful deployment. We found that only a few options must match for all tested IoT devices, and this information can always be extracted directly from the IoT device.

After identifying the minimal configurations, we investigated whether HADES-IoT could be deployed without manufacturer support. Using a publicly available generic Linux kernel and toolchain, we were able to precompile and deploy HADES-IoT on all tested devices. This indicates that HADES-IoT can be deployed not only by manufacturers but also by device owners, thus protecting even legacy devices no longer supported by manufacturers.

##### 6.1.1 Configuration

We identified two critical options that must be adjusted for successful HADES-IoT deployment:
1. **Embedded-Application Binary Interface (EABI)**: This must be enabled in the Linux configuration.
2. **Compiler Optimization**: The optimization must be set to performance rather than size. Incorrect optimization settings will result in HADES-IoT being installed but not functioning properly.

Detailed configuration options for the tested devices are presented in the following section.

##### 6.1.2 Device-Specific Configuration Options

Some devices require specific configuration options for successful compilation and deployment of HADES-IoT. Here are the details for such devices:

- **D-Link DCS-942L**: The Linux kernel is configured in preemptive mode. Therefore, the preemptive mode must be enabled during configuration. This setting can be extracted from the `/proc/version` file.
- **SimpleHome XCS7-1001**: The `CONFIG_ARM_UNWIND` option must be disabled; otherwise, HADES-IoT installation will fail during the compatibility check.
- **Provision PT-737E**: Similar to the previous case, the `CONFIG_ARM_UNWIND` option must be disabled. Additionally, the `CONFIG_FS_POSIX_ACL` option may need to be enabled. To determine if this option is necessary, use the command `cat /proc/kallsyms | grep acl`. If the result is non-empty, enable the option.

#### 6.2 Profiling Period

During bootstrapping, HADES-IoT runs in profiling mode to extract the profile of the IoT device. The longer the profiling period, the more accurate the profile. However, extended profiling can be inconvenient for users. We conducted an experiment to determine the minimum profiling time needed for an accurate profile. We tested profiling times of one, two, and four hours. The results (Table 2) show that after one hour, no new processes were found on any device, indicating that an accurate profile can be obtained within this time. However, there is a possibility that new programs or signals might appear after a four-hour period (e.g., scheduled jobs). Any missing programs or signals can be added to the whitelist using the update mechanism described in Section 4.5.2.

We also measured the difference in the whitelist size when a user interacts with the device's GUI versus no interaction. The results show that on some devices, such as Netgear WNR2000v3 and D-Link DCS-942L, the whitelist increases significantly with user interaction, while on others, like Cisco Linksys E4200 and ASUS RT-N56U, the increase is small. This suggests that user interaction during the profiling period is important to capture a more accurate profile.

Finally, we compared the number of all executables to those in the whitelist. Table 2 shows that many devices contain unused executables. If an attacker compromises the device, they cannot use these executables due to HADES-IoT's protection, which restricts the attacker to the executables in the whitelist.

#### 6.3 Effectiveness of Detection & Prevention

To demonstrate HADES-IoT's prevention capabilities, we performed several attacks exploiting vulnerabilities used by recent real-world IoT malware. Below are the details of these attacks:

##### 6.3.1 Enabled Telnet with Default Credentials & Mirai

The Mirai IoT malware exploits the fact that many IoT devices have Telnet open by default and use default credentials. For example, the SimpleHome IP camera in our test set had such a misconfiguration. However, with HADES-IoT, even such a misconfiguration does not cause harm, as any unauthorized binary (e.g., the Mirai binary) is terminated upon execution, as observed in our evaluation.

##### 6.3.2 [CVE-2017-8225] & IoTReaper, Persirai

CVE-2017-8225 represents a vulnerability in a custom HTTP server that improperly checks access to `.ini` files, allowing an attacker to retrieve them by providing an empty string for the username and password. By exploiting this vulnerability, the attacker can read the root credentials from the `system.ini` file, which are stored in plain text. When the attacker has these credentials, they can gain unauthorized access. With HADES-IoT, such attacks are mitigated as any unauthorized actions are blocked.

---

**Table 1: IoT Devices Used in the Evaluation**

| Device                  | Type        | Kernel Version | CPU Architecture | CPU Performance [BogoMips] | Memory [MB] | Available Memory [MB] |
|-------------------------|-------------|----------------|------------------|----------------------------|-------------|-----------------------|
| Netgear WNR2000v3       | Router      | 2.6.15         | MIPS             | 2.6.15                     | 32          | 16.06                 |
| ASUS RT-N16            | Router      | 2.6.21         | MIPSel           | 2.6.21                     | 128         | 87.22                 |
| ASUS RT-N56U           | Router      | 2.6.21         | MIPSel           | 2.6.21                     | 128         | 78.56                 |
| Cisco Linksys E4200    | Router      | 2.6.22         | MIPSel           | 2.6.22                     | 64          | 18.63                 |
| D-Link DCS-942L        | IP Camera   | 2.6.28         | ARM              | 2.6.28                     | 128         | 38.75                 |
| SimpleHome XCS7-1001   | IP Camera   | 3.0.8          | ARM              | 3.0.8                      | 32          | 1.90                  |
| Provision PT-737E      | IP Camera   | 3.4.35         | ARM              | 3.4.35                     | 32          | 3.88                  |

**Table 2: Effect of Various Profiling Periods on the Size of Whitelist**

| IoT Device              | Total Executables Found | No. of IDs in Whitelist (1 hour) | No. of IDs in Whitelist (2 hours) | No. of IDs in Whitelist (4 hours) | No. of IDs in Whitelist (1 hour with User Interaction) |
|-------------------------|-------------------------|----------------------------------|-----------------------------------|----------------------------------|--------------------------------------------------------|
| Netgear WNR2000v3       | 526                     | 12                               | 12                                | 12                               | 61                                                     |
| ASUS RT-N16            | 638                     | 5                                | 5                                 | 5                                | 38                                                     |
| ASUS RT-N56U           | 375                     | 3                                | 3                                 | 3                                | 6                                                      |
| Cisco Linksys E4200    | 399                     | 9                                | 9                                 | 9                                | 11                                                     |
| D-Link DCS-942L        | 1256                    | 20                               | 20                                | 20                               | 105                                                    |
| SimpleHome XCS7-1001   | 588                     | 4                                | 4                                 | 4                                | 29                                                     |
| Provision PT-737E      | 482                     | 5                                | 5                                 | 5                                | 9                                                      |