### Core Typing Rules

1. **Structure Declaration:**
   \[
   \Gamma \vdash_p \text{struct st end} : \text{sig S restr } \theta \text{ end}
   \]

2. **Alias:**
   \[
   \Gamma \vdash pa : M
   \]
   \[
   \Gamma \vdash_p pa : M
   \]

3. **Function:**
   \[
   \Gamma, \text{module x = absparam : } M0 \vdash_p(x) m : M
   \]
   \[
   \Gamma \vdash_p \text{func}(x : M0) m : \text{func}(x : M0) M
   \]
   \[
   \Gamma(x) \text{ is undefined}
   \]
   \[
   \Gamma \vdash M0
   \]

4. **Subtyping:**
   \[
   \Gamma \vdash_p m : M0
   \]
   \[
   \vdash M0 <: M
   \]
   \[
   \Gamma \vdash_p m : M
   \]

5. **Procedure Declaration:**
   \[
   \Gamma \vdash_p, \theta \text{ st : S}
   \]
   \[
   \text{body} = \{ \text{var } (v_l : \tau_l); s; \text{return } r \}
   \]
   \[
   v, v_l \text{ are fresh in } \Gamma
   \]
   \[
   \Gamma_f = \Gamma, \text{var } v : \tau, \text{var } v_l : \tau_l
   \]
   \[
   \Gamma \vdash \text{body } \triangleright \theta[f]
   \]
   \[
   \Gamma_f \vdash r : \tau_r
   \]
   \[
   \Gamma_f \vdash s
   \]
   \[
   \Gamma(p.f) \text{ is undefined}
   \]
   \[
   \Gamma, \text{proc } p.f(v : \tau) \to \tau_r = \text{body} \vdash_p, \theta \text{ st : S}
   \]
   \[
   \Gamma \vdash_p, \theta (\text{proc } f(v : \tau) \to \tau_r = \text{body; st}) : (\text{proc } f(v : \tau) \to \tau_r; S)
   \]

6. **Module Declaration:**
   \[
   \Gamma \vdash_p.x m : M
   \]
   \[
   \Gamma, \text{module } p.x = m : M \vdash_p, \theta \text{ st : S}
   \]
   \[
   \Gamma(p.x) \text{ is undefined}
   \]
   \[
   \Gamma \vdash_p, \theta (\text{module } x = m; \text{st}) : (\text{module } x : M; S)
   \]

7. **Empty Structure:**
   \[
   \Gamma \vdash_p, \theta \epsilon : \epsilon
   \]

### Environment Typing

1. **Environment Sequence:**
   \[
   \vdash E
   \]
   \[
   E \vdash \delta
   \]
   \[
   \vdash E, \delta
   \]

2. **Empty Environment:**
   \[
   \vdash \epsilon
   \]

3. **Module in Environment:**
   \[
   E \vdash_x m : M
   \]
   \[
   E \vdash (\text{module } x = m : M)
   \]
   \[
   E(x) \text{ is undefined}
   \]

4. **Variable in Environment:**
   \[
   E \vdash \text{var } v : \tau
   \]
   \[
   E(v) \text{ is undefined}
   \]
   \[
   E(x) \text{ is undefined}
   \]

5. **Abstract Module in Environment:**
   \[
   E \vdash M_l
   \]
   \[
   E \vdash (\text{module } x = \text{absK : } M)
   \]

### Restriction Checking

1. **Restriction Check:**
   \[
   \Gamma \vdash \text{body } \triangleright \lambda_m
   \]
   \[
   \Gamma \vdash \text{body } \triangleright \lambda_c
   \]
   \[
   \Gamma \vdash \text{body } \triangleright \lambda_m \land \lambda_c
   \]

2. **Memory Restriction:**
   \[
   \text{mem}_\Gamma(s) \sqsubseteq \lambda_m
   \]
   \[
   \Gamma \vdash s \triangleright \lambda_m
   \]

3. **Memory Restriction Extension:**
   \[
   \Gamma \vdash s \triangleright \lambda_m
   \]
   \[
   \Gamma \vdash e \triangleright \lambda_m
   \]
   \[
   \Gamma \vdash \{ _; s; \text{return } e \} \triangleright \lambda_m
   \]

4. **Completeness Top:**
   \[
   \Gamma \vdash \text{body } \triangleright \top
   \]

5. **Memory Restriction on Expression:**
   \[
   \text{vars}(e) \sqsubseteq \lambda_m
   \]
   \[
   \Gamma \vdash e \triangleright \lambda_m
   \]

6. **Completeness:**
   \[
   E \vdash \{ \top \} s \{ \psi | t \}
   \]
   \[
   \vdash \{ \psi \} r \leq t_r
   \]
   \[
   (t + t_r \cdot 1_{\text{conc}}) \leq \text{compl } \lambda_c
   \]
   \[
   E \vdash \{ _; s; \text{return } r \} \triangleright \lambda_c
   \]

### Notes:
- The relation \(\sqsubseteq\) checks the inclusion of a memory restriction into another.
- \(\text{mem}_\Gamma(s)\) computes an over-approximation of an instruction's memory footprint.

### Example of Valid and Invalid Paths

```
module A = {
  module B = { ... }
  module C = {
    module E = A.B
    module F = B
  }
}
(* Valid full path *)
(* Invalid path *)
```

### Abstract Modules

Abstract modules representing open code (i.e., with kind `open`) are restricted to low-order signatures:
\[
M_l ::= \text{sig } S_l \text{ restr } \theta \text{ end} | \text{func}(x : \text{sig } S_l \text{ restr } \theta \text{ end) } M_l
\]
\[
D_l ::= \text{proc } f((v_l : \tau_l)) \to \tau_r
\]
\[
S_l ::= D_{l1}; ...; D_{ln}
\]

For any \(M_l\), let \(\text{procs}(M_l) = \{ f_1, ..., f_n \}\) be the set of procedure names declared in \(M_l\).

### Typing Module Paths

The typing judgment \(\Gamma \vdash p : M\) states that the module path \(p\) refers to a module with type \(M\). Its typing rules, given in Figure 13, are standard, except for the functor application typing rule:

**FuncApp:**
\[
\Gamma \vdash p : \text{func}(x : M') M
\]
\[
\Gamma \vdash p' : M'
\]
\[
\Gamma \vdash p(p') : M[x \mapsto \text{mem}_\Gamma(p')]
\]

A key point here is that we need to substitute \(x\) in the module signature. The substitution function is standard, except for module restrictions, which are modified as follows:
- A memory restriction restricts the variables that a procedure can access directly, but memory accesses done through functor parameters are not restricted.
- A complexity restriction gives upper bounds on a procedure's execution time and the number of calls it can make to its functors' parameters.

### Additional Typing Rules

The memory restriction union \(\sqcup\), intersection \(\sqcap\), and the memory restriction subset \(\sqsubseteq\) operations are defined in Figure 17. In Figure 18, we present sub-typing rules, typing rules for statements and expressions, and the definition of the function \(\text{mem}_\Gamma(p)\) which computes the memory footprint of \(p\) in \(\Gamma\).

### Example

Consider the modules and procedures given in Figure 16. When typing \(h\), the typing environment contains one module declaration and one procedure declaration:
\[
\Gamma = (\text{module } A.B = _ : \text{struct proc } f() \to \text{unit end}); (\text{proc } A.C.g() \to \text{unit} = ...)
\]
Here, the call to \(f\) in \(h\) is typed using the T-Proc1 rule, while the call to \(g\) is typed using T-Proc2.

### Module Resolution

Our module resolution mechanism, given in Figure 19, allows evaluating any module expression \(m\) in a typing environment \(\Gamma\). This defines the semantics of our module system and will be used to give the semantics of our programming language in Appendix D.

**Extended Module Resolution:**
Because a module expression \(m\) is evaluated in a typing environment \(\Gamma\) that can contain abstract modules, the resolved module \(\text{res}_\Gamma(m)\) may not be a module expression according to our syntactic categories. We let extended module expressions be the elements of the form:
\[
\bar{m} ::= m | \text{absK } x
\]

**Module Resolution:**
The resolution function \(\text{res}_\Gamma(_)\) evaluates a module path in \(\Gamma\) into a (resolved) extended module expression, which can be a module structure, a functor, or an (potentially applied) abstract module. Mostly, \(\text{res}_\Gamma(_)\) takes care of functor applications through the rules:
\[
\text{res}_\Gamma(p(p')) = \text{res}_\Gamma(m_0[x \mapsto p'])
\]
\[
\text{res}_\Gamma(p(p')) = (\text{absK } x)((p_0), p')
\]

**Example:**
Consider a typing environment \(\Gamma\) and the path \(x.y(z)(v)(w)\), which must be read as \(((x.y)(z))(v))(w)\). Assuming:
\[
\Gamma(z) = \text{absopen } z, \Gamma(v) = m_v, \Gamma(w) = \text{absparam } w
\]
\[
\Gamma(x) = \text{struct module } y = \text{func}(u : _) u \text{ end}
\]
where \(m_v\) is some module expression, then \(\text{res}_\Gamma(x.y(z)(v)(w)) = (\text{absopen } z)(v, w)\).

**Soundness:**
We need to show that our module resolution mechanism has the subject reduction property. Unfortunately, this does not hold due to sub-modules declarations, as shown in the following example.

**Example:**
Consider a well-typed typing environment \(\vdash \Gamma\).