persistently. An alarm is triggered whenever St is larger than
a pre-deﬁned threshold, i.e.,
νt = wuk
y j (t),
St > µ,
(11)
at which time the detection will be reset with St = 0.
Intrusion Localization. It is trivial to localize the forged
command if only one abnormal edge is detected, i.e., the
command responsible for that edge is compromised. When
multiple anomalies are detected, PLC-Sleuth localizes the
forged command as the one triggering the anomaly alarm ﬁrst.
This greedy strategy is intuitive because cascaded anomalies
require a longer time to cause instability to control systems,
when compared to the directly forged command. This can be
well-justiﬁed using SEDS as an example: the forged ua
2 in
Eq. (2) ﬁrst degrades the stability of the ethanol reﬂux in Loop-
#2, causing alarms at edge eu2y2 , and then further oscillates the
(a) cascade control loop
(b) ratio control loop
Figure 10: Examples of coupled feedback control schemes.
ature controller TC to SEDS’s Loop-#2 to adjust, in real-time,
FC’s setpoint, making FC the slave controller of TC.
Transfer node rm ∈ R, where R ⊂ U, is introduced to con-
struct the control graph with coupled feedback channels,
which is responsible for transferring control commands from
master to slave loops (e.g., r2 in Fig. 10). Note that most trans-
fer nodes also act as setpoints of the slave loops. We refer to
transfer nodes that do not act as the setpoints of slave loops
as transmit nodes. PLC-Sleuth identify R from U. Speciﬁ-
cally, each control loop of a PLC generates a corresponding
command, all of which form U. Also, only a subset of U are
sent to actuators in the coupled feedback control 1, and the
remaining commands form the transfer node set R.
In the following, we explain how PLC-Sleuth constructs
the control graph for these multiple channels feedback loops.
• Step-IV: Constructing the Master Loops. Master loops
are those containing a setpoint node in S. We construct a
control graph for the master loops from node set {S, Y, R}.
The identiﬁcation of error edges in Ey
s of master loops is done
in the same way as Step-I. Also, the command edges in Er
y in
master loops are identiﬁed similarly as in Step-II and III, by
replacing node uk ∈ U with node rm ∈ R.
• Step-V: Constructing the Slave Loops. The control graph
for slave loops is constructed from node set {R, Y and U − R}.
Error edges in Ey
r of slave loops are identiﬁed similarly to
Step-I, by replacing Eq.(3) with w(y1,··· ,yd )
t=1(rm−
f (y1,··· ,yd))|,|∑L
t=1(rm ∗ rn − f (y1,··· ,yd))|}. This step
identiﬁes the sensor node ˜y j (and ˜rn as well if the ratio control
scheme exists) for the transfer node ˜rm. Transfer nodes that
are not matched with a sensor node are treated as transmit
nodes. Based on the identiﬁed edges from set R to set Y, com-
mand edges in Eu
y of slave loops are identiﬁed with the same
approach as in Step-II and III.
• Step-VI: Combining the Control Loops. Master
and
slave loops are combined using transfer nodes in R. When a
sensor node ˜yj in the master loop is matched to a transmit
node ˆrn, which transfers the control command but does not
act as a slave setpoint, we further match ˆrn with a slave
setpoint node ˜rm with the maximal w˜rm
(calculated with
ˆrn
Eq. (7)) in all the {ˆrn, rm} pairs. For the command edge
1Actuators will send received commands back to SCADA system [26,27].
= min{|∑L
rm
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    339
r2yrefluxFCCooling wateru2V2TCsrefluxmasterslavey2y2r2yrefluxFCCooling wateru2V2TCsrefluxmasterslaveFYratioTable 1: Weight of SEDS’s command edges obtained with different weighing schemes.
Metric
Score
u1
38918
39006
41192
y1
y2
y3
K2
u2
37101
42114
37648
u3
145
37
5373
u1
-31778
-31253
-24187
LL
u2
-27892
-20940
-24796
u3
-6405
-6484
-787
u1
5183
-4256
-12723
MDL
u2
13628
10942
-9470
u3
82
-100
5420
u1
0.04
0.06
0.27
MI
u2
0.02
0.27
0.13
PLC-Sleuth
u1
0.75
0.14
0.50
u2
0.08
0.85
0.51
u3
0.12
0.40
0.97
u3
0.03
0.02
0.88
|S| = 3), 11 sensor variables (i.e., |Y| = 11), and 3 command
variables (i.e., |U| = 3). We then use these logs to evaluate
PLC-Sleuth’s construction of the control graph. Note SEDS
has three decoupled single feedback loops, as shown in Fig. 7.
Accuracy of Graph Construction. With a training data of
2h, Table 1 compares the weights of euky j s (i.e., wuky j s) of SEDS
obtained with PLC-Sleuth and when using K2, LL, MDL,
and MI as the weighting metric, showing:
• PLC-Sleuth identiﬁes SEDS’s command edges eu
ys accu-
rately and without repeated edges;
• K2 and MDL fail to identify the command edges correctly,
due to the falsely matched edges of {eu3y1 , eu1y3 } and {eu2y1 ,
eu1y2 }, respectively;
• Although LL and MI also match sensor nodes to their cor-
responding command nodes successfully, they cannot accu-
rately characterize the correlation strength between nodes
u1 and y1, as evident by their results of wu1y1 < wu1y3 .
We have further evaluated PLC-Sleuth with varying vol-
umes of training data, as plotted in Fig. 11, where the accu-
racy is averaged over 1,000 runs by randomly selecting the
start time of training sequences from the 9.8h system logs.
PLC-Sleuth’s accuracy of graph construction outperforms
all other four weighting schemes, and increases with a longer
training data — achieving 100% when being trained with a
system log of 0.5h.
5.2.2
Intrusion Detection/Localization with SEDS
next
evaluate
intrusion
PLC-Sleuth’s
We
detec-
tion/localization under two attack scenarios. The command
injection attacks are launched in two ways, i.e., replacing
output command series with designed attack vector in
PIO table (e.g., replacing u2 = [0.2757,0.2762,0.2766]
with ua
2 = [0.2967,0.2968,0.2969]), and tampering param-
eters of control rules (e.g., changing Kp in the rule of
∆u2 = −Kp(∆x2 + 0.17× x2) from Kp = 0.01 to Ka
p = 0.1).
Each of the control loop is attacked 10 times, i.e., a total
number of 10×3 = 30 attacks are mounted to SEDS. Besides,
by replaying the corresponding sensor’s normal logs, we
mount another 10× 3 = 30 cooperative stealthy attacks.
Detection/Localization Accuracy. Table 2 lists the evalua-
tion results, showing that PLC-Sleuth achieves an average
of 98.33%/0.85‰ true/false positive (TP/FP) alarm rate, and
localizes the forged command with 93.22% (i.e., 55 out of
59) positive predictive value (PPV).
Figure 11: Constructing SEDS’s control graph.
liquid level y3 in Loop-#3 through ﬂuid transportation, which
may induce alarms at edge eu3y3 after the ﬁrst alarm is triggered.
This way, PLC-Sleuth localizes the forged command as the
one controlling Loop-#2.
5 Evaluation
We have evaluated PLC-Sleuth using both SEDS and a sim-
ulated Tennessee Eastman (TE) process, which is a represen-
tative benchmark of continuous chemical processes [29].
5.1 Methodology
Our evaluation of PLC-Sleuth consists of two parts. We ﬁrst
evaluate PLC-Sleuth’s construction of the control graph by
comparing it with the cases when deﬁning wuky j ∈ W u
y using
four other metrics proposed in structure learning: (i) Bayesian
scoring metric K2 [30], (ii) Log-likelihood (LL) [31], (iii)
Minimum Description Length (MDL) [32], and (iv) Mutual
information (MI) in Eq.(4). Then, we evaluate PLC-Sleuth’s
intrusion detection/localization under two attack scenarios:
• Attack-1:
a control command injection attack imple-
mented by injecting time-varied values to the PIO table
(including those of only slight deviations from normal com-
mands) and tampering the control algorithm parameters.
• Attack-2: a cooperative stealthy attack atop of Attack-1
by replaying normal sensor measurements during attack.
5.2 Evaluation with SEDS
We ﬁrst evaluate PLC-Sleuth using SEDS.
5.2.1 Constructing SEDS’s Control Graph
We ﬁrst examine if PLC-Sleuth is able to accurately con-
struct SEDS’s control graph.
Data Collection. We logged a 9.8h operation of SEDS using
its SCADA system, during which a total number of 17 vari-
ables are collected at 2Hz, including 3 setpoint variables (i.e.,
340    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
012345Training length (hour)406080100Accuracy (%)K2MILLPLC-SleuthMDL(a) Loop-1: tower temperature
(b) Loop-2: cooling water ﬂow
(c) Loop-3: tower liquid level
Figure 12: Detecting the two attacks mounted at SEDS’s three control loops.
Table 2: Evaluating PLC-Sleuth’s
tion/localization using SEDS.
intrusion detec-
Attack-1
FP
1.3‰
TP
PPV
100%
90%
100% 0.35‰ 100%
100% 0.26‰ 100%
Loop
No.
#1
#2
#3
1 Detection parameters: T = 500 for Loop-#1 and Loop-#2, T = 4000 for Loop-
TP
FP
PPV
90%
1.3‰ 66.7%
100% 0.35‰ 100%
100% 0.26‰ 100%
Attack-2
#3; µ = 7.5; τ = 5.
(a) TP rate
(b) FP rate
(c) latency
Figure 13: Applying PLC-Sleuth to SEDS with varying de-
tection window and threshold.
• Attack-1. The injected forged command incurs instability to
SEDS’s distillation process, as shown with the red dashed
line of the upper subplots in Fig. 12. PLC-Sleuth detects
the weight changes of the monitored edges immediately
after the attack, and thus triggers alarms. Among the 10
command injection attacks against the tower level loop,
Figs. 13(a) and 13(b) plot PLC-Sleuth’s detection results
with various conﬁgurations of detection window (T ) and
threshold (µ). Increase of the threshold value hardly affects
the TP rate, but reduces FP alarms noticeably. However, a
larger detection window causes a relatively lower TP rate
due to its insensitivity to parameter changing attacks.
• Attack-2. The cooperatively replayed sensor logs hide at-
tacks from the operators, as shown with the purple dotted
line of the upper subplots in Fig. 12. However, the mon-
itored weight deviates from its normal value noticeably.
Note that one missed TP alarm occurs to Loop-#1, (i.e., the
temperature loop), which has a long control cycle of 1,800s,
causing insensitive variation to variables’ correlation. The
PPV of localization for Loop-#1 is relatively low (when
compared to Loop-2 and 3) for the same reason.
Detection Latency. We have also examined PLC-Sleuth’s
latency in detecting the PLC intrusions. Although a delay ex-
ists for an attack to physically disturb the system, the weight
of control graph changes instantly when the attack is launched,
as shown in the middle subplots of Fig. 12. As a result,
PLC-Sleuth detects these attacks with a short latency, e.g.,
{50, 12.5, 10.5}s for attacks in Fig. 12(a), 12(b), and 12(c),
respectively. Besides, Fig. 13(c) shows that a larger detection
threshold increases the detection latency. On the other hand,
the detection latency decreases with a larger detection win-
dow T , because a larger time window facilitates PLC-Sleuth
capturing the control invariant (i.e., weight wuky j ) more reliably.
5.3 Evaluation with TE Process
To further evaluate PLC-Sleuth when being deployed at a
large-scale control system, we implement PLC-Sleuth on
a realistically simulated TE process (see Fig. 21 in Ap-
pendix) [33]. The TE process contains 12 setpoint variables
in S, 41 measurement variables in Y, 12 terminal command
variables in U, and 14 transfer variables in R. These variables
together form 17 feedback loops, 16 of which form 7 multiple
feedback loops.
5.3.1 Constructing TE’s Control Graph
Again, we ﬁrst examine PLC-Sleuth’s accuracy of construct-
ing TE’s control graph.
Data collection. Simulating the TE process with Matlab, we
obtained a 72h training data logged at 1.8Hz. The (correctly)
constructed control graph is shown in Fig. 14, in which a total
number of 45 edges need to be identiﬁed.
Accuracy of Graph Construction. We have evaluated
PLC-Sleuth with various volumes of training data in dif-
ferent running periods. Fig. 15 plots the results averaged over
1,000 runs.PLC-Sleuth’s graph construction achieves a high
accuracy of 95.76% even when being trained with only a short
trace of 2h, which increases further with a larger volume of