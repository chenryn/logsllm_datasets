可表示的最大正数。其内部结构为，所有小数部分都为1，指数为最大值1023。如果尝试通过乘以2来增加指数，结果会是错误值Infinity（参见11.3.2“Infinity”）：
Number.MIN_VALUE
可表示的最小正数值（一个非常小且大于0的分数）：
Number.NaN
和全局NaN相同的值。
Number.NEGATIVE_INFINITY
和-Infinity相同的值：
Number.POSITIVE_INFINITY
和Infinity相同的值：
11.12 Number原型方法
原始值中数字的所有方法都存储在Number.prototype中（参见8.4.3“原始值从包装器借调方法”）。
11.12.1 Number.prototype.toFixed（fractionDigits？）
Number.prototype.toFixed（fractionDigits？）返回不使用指数表示的数字，舍入到小数点后第fractionDigits位。默认参数为0：
如果数字大于或等于10的21次方，那么这个方法的作用和toString()相同。会得到一个使用指数标注的数字：
11.12.2 Number.prototype.toPrecision(precision?)
Number.prototype.toPrecision（precision?）在使用类似toString()等转换算法前会将尾数精确到precision位。如果没有给出precision，会直接使用toString()：
需要使用指数标注来显示精确到3位数的1234。
11.12.3 Number.prototype.toString(radix?)
Number.prototype.toString（radix?）的参数radix指定了显示数字的系统使用的基数。最常见的基数是10（decimal，十进制），2（binary，二进制）和16（hexadecimal，十六进制）：
radix最小为2，最大为36。所有大于10的radix值会使用字母字符作为数字，这也解释了最大为36的原因，因为拉丁字母表有26个字符：
全局函数parseInt（参见11.7.4“通过parseInt()得到整数”）能够将类似下面的标识符转换为数字：
十进制指数标注
对于基数10，toString()在两种情况下使用指数标注（在小数点前只有1个数字）。第一种情况为，如果在一个数字的小数点前有多于21个的数字：
第二种情况为，如果一个数字以0开头，并且紧跟了超过多于五个0和一个非0的数字：
其他所有情况都使用固定标注。
11.12.4 Number.prototype.toExponential(fractionDigits?)
Number.prototype.toExponential（fractionDigits?）强制使用指数标注来表示一个数字。fractionDigits是一个在0～20的数字，它决定了应该在小数点前显示多少个数字。如果省略掉，那么会使用尽可能多的数字来唯一指定数字。
在这个例子中，我们强制toString()也使用指数标注。结果是混合型的，因为我们达到从二进制数字转换到十进制标注可以达到的精度极限。
在这个例子中，数字的量级还不够toString()所显示的指数大。然而，toExceptional()会显示指数：
在这个例子中，我们在小数部分不够时得到指数标注：
11.13 用于数字的函数
下列函数用于操作数字：
isFinite(number)
检查number是否为一个实际的数字（不是Infinity或者NaN）。详情请查看11.3.2小节的“检查Infinity”。
isNaN(number)
如果number为NaN返回true。详情请查看11.3.1小节的“陷阱：检查一个值是否为NaN”。
parseFloat(str)
将str转换成一个浮点数。详情请查看11.2.2“parseFloat()”。
parseInt(str, radix?)
将str解析成一个基为radix(2−36)的整数。详情请查看11.7.4“通过parseInt()得到整数”。
11.14 本章参考资料
在编写本章时参考了如下资源：
Steve Hollash的“IEEE Standard 754 Floating Point Numbers”（http://bit.ly/ 1oOc43P）
MATLAB文档“Data Types and Scaling (Fixed-Point Blockset)”（http://bit.ly/ 1oOc83t）
Wikipedia上的“IEEE floating point”（http://en.wikipedia.org/wiki/IEEE_754）
[1] 源自：Brendan Eich, http://bit.ly/1lKzQeC。
[2] Béla Varga(@netzzwerg)指出IEEE 754声明NaN不等于它自身。
第12章 字符串
字符串是由JavaScript字符组成的不可变序列。其中每个字符是一个16位的UTF-16编码单元。这意味着一个Unicode字符相当于一个或两个JavaScript字符。无论是计算字符还是分割字符串，只需关注两个JavaScript字符的情况（参见第24章）。
12.1 字符串字面量
单引号和双引号都可以表示字符串字面量，如下所示：
因此，你可以任意地选择单引号或双引号。不过，有以下几点需要注意：
最常见的做法是在HTML中使用双引号，在JavaScript中使用单引号。
另外，在一些语言中双引号仅用来表示字符串（例如，C和Java）。因此，最好在多语言的编码环境中使用双引号。
在JSON（参见第22章）中，必须使用双引号。
统一使用一种引号会使你的代码整洁。但是，有时更换引号让你无须进行转义，这使你有理由不统一引号（例如，通常情况你使用单引号，但临时改用双引号来写上述例子最后一行）。
12.2 字符串字面量中的转义字符
字符串字面量中的大多数字符只是代表其自身。反斜杠用于转义并有以下几种特殊用途。
（1）避免换行
通过反斜杠对行结束符进行转义，使一个字符串能够跨行拼写：
另一种跨行拼写的方式是使用加号：
（2）转义序列
转义序列以反斜杠开头。
控制字符：\b是空格符，\f是换页符，\n是换行符（新的一行），\r是回车符，\t是水平制表符，\v是垂直制表符。
代表自身含义的转义字符：\'指单引号，\"指双引号，\指反斜杠。除了b f n r t v x u和小数以外的字符都代表其自身。例如：
（3）NUL字符
该字符由\0表示。
（4）十六进制转义序列
\xHH（HH是两个十六进制数字）通过ASCII码表示一个字符。例如：
（5）Unicode转义序列
\uHHHH（HHHH是4个十六进制数字）表示一个UTF-16编码单元（参见第24章）。例如：
12.3 字符访问
有两个访问字符串中特定位置字符的方法[1]。需要注意的是JavaScript并没有具体的数据类型；以下这些操作会返回字符串：
一些低级浏览器并不支持使用方括号这种类似数组的方式访问字符。
12.4 转换为字符串
表12.1列出了如何将值转换为字符串。
表12.1
值
结果
undefined
'undefined'
null
'null'
布尔值
false->'false' true->'true'
数字
（例如，3.141->'3.141'）
字符串
输出即输入（无须转换）
对象
调用ToPrimitive(value,String)（参见8.5.3“算法：ToPrimitive()——将值转换为原始值”）并将原始值结果转换为字符串
手动转换为字符串
以下是三种最常见的将值转换为字符串的方法：
String(value)     (Invoked as a function, not as a constructor)
''+value
value.toString()   (Does not work for undefined and null!)
我更倾向于使用String()，因为它的描述性强。以下是几个示例：
值得注意的是，在展示数据时，JSON.stringify()（参见22.2“JSON.stringify (value, replacer?, space?)”）要优于基本的字符串转换方法：
当然，你需要清楚JSON.stringify()的局限性——它并不会展示所有的值。例如，它会隐藏无法处理的属性（函数等）。从好的方面看，JSON.stringify()的结果能被eval()解析，并且能够将深层嵌套的数据展现为格式漂亮的树形结构。
陷阱：转换是不可逆的
考虑到JavaScript的自动转换频率，很遗憾的是转换并不总是可逆的，尤其是对于布尔值：
对于undefined和null存在同样的问题。
12.5 字符串比较
比较字符串有两种方式。首先，可以使用比较运算符、===、=。它们有以下缺点。
区分大小写
不能很好地处理变音符和重音符
其次，使用String.prototype.localeCompare(other)进行字符串比较。这种方法往往更好，但有些浏览器不能支持（详情参见12.10.3“字符串的检索和比较”）。下面是Firefox浏览器控制台的输出：
结果小于0表明待比较的字符串小于参数。结果大于0表明待比较的字符串大于参数。
12.6 字符串拼接
拼接字符串主要有两种方法。
12.6.1 合并：加号（+）运算符
只要运算数中有一个是字符串，加号运算符就能完成字符串的拼接。如果你想将字符串集中在一个变量中，可以使用+=运算符：
12.6.2 合并：拼接字符串数组
在上述方法中，每当向str中添加字符串时都会生成一个新字符串。老版本JavaScript引擎使用上述方法，这意味着你可以通过以下方式改善字符串的拼接：将所有的字符串添加进一个数组然后调用join方法将它们拼接起来。
然而，新版本JavaScript引擎通过加号+优化字符串拼接并在内部使用相似的方法，因此在这些引擎中加号运算符更快。
12.7 字符串函数
可以通过以下两种方式调用String方法：
String(value)
作为常规函数，将参数value转换为原始字符串值（参见12.4“转换为字符串”）：
new String(str)
String()作为构造函数会创建一个String的实例（参见8.4“原始值的包装对象”），其返回值是封装了str的一个对象（非字符串会被强制转换为字符串），示例如下：
比较常用的是第一种调用方式。
12.8 字符串构造器方法
String.fromCharCode(codeUnit1, codeUnit2, ...)返回一个由UTF-16编码单元组成的字符串，其中每一个UTF-16编码对应一个无符号整数codeUnit1、codeUnit2等。示例如下：
可以通过apply()方法将数字数组转换为字符串（参见15.7.1“func.apply (thisValue, argArray)”）。示例如下：
String.fromCharCode()是String.prototype.charCodeAt()的逆操作。
12.9 字符串length属性
属性length表示 JavaScript 字符串中字符的个数，且它是不可枚举的：
12.10 字符串原型方法
String.prototype包含了原始字符串值的所有方法（参见8.4.3“原始值从包装器借调方法”）。接下来将介绍原始字符串值（而不是String的实例）如何调用这些方法。
12.10.1 提取子字符串
下面这些方法能够从参数中提取子字符串。
String.prototype.charAt(pos)
该方法返回给定位置pos的字符。示例如下：
下面两个表达式返回相同的结果，但是一些老版本JavaScript引擎在访问字符时仅支持chartAt()：
String.prototype.charCodeAt(pos)
该方法返回给定位置pos的JavaScript字符（UTF-16编码单元，参见第24章）对应的无符号整数。
创建一个字符编码数组如下所示：
charCodeAt()的逆函数是String.fromCharCode()。
String.prototype.slice(start, end?)
该方法返回一个子字符串，它包括原字符串从start开始到end结束的所有字符（包括start，不包括end）。两个参数都可以为负数，此时会将参数与字符串的length属性相加，示例如下：
String.prototype.substring(start, end?)
该方法可以替代slice()，它与slice()相似，但是可以处理负的位置参数且可以更好地跨浏览器兼容。
String.prototype.split(separator?, limit?)
该方法通过在separator指定的边界处将原字符串分割成子字符串，返回由子字符串组成的数组。该方法有两个参数。
separator：可以为字符串或正则表达式。若未传入，将会把整个字符串封装在数组中返回。
limit：若传入，则返回的数组最多只能包括limit个元素。
示例如下：
如果separator是包含子表达式的正则表达式，那么与这些子表达式匹配的字符串也会作为数组的元素返回：
如果把' '(空字符串) 用作分隔符，那么原字符串中的每个字符之间都会被分割并组成数组返回：
12.10.2 字符串的变换
前面介绍了如何提取子字符串，本部分将介绍如何将给定的字符串变换为一个新字符串。典型的用法如下：
换句话说，原始字符串在变换（无损变换）后会被丢弃：
String.prototype.trim()
该方法去除字符串开头和结尾处的空格：
String.prototype.concat(str1?, str2?, ...)