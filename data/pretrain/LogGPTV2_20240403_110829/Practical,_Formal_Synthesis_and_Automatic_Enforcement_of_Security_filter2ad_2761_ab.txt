based architecture supports the necessary extensions that can
be provided by users at anytime to enrich the environment.
Given these speciﬁcations, the ASE component analyzes
them as a whole for instances of vulnerabilities in the ex-
tracted app speciﬁcations, and using formally-precise scenario-
generating tools, such as Alloy Analyzer
[3] and Alu-
minum [45], it attempts to generate possible security exploit
scenarios for a given combination of apps. Speciﬁcally, we
go beyond the detection of vulnerabilities by asking: what
security attacks are possible given a set of vulnerable apps?
Having computed system-wide policies to prevent the postu-
lated attacks, SEPAR parses and transforms them from models
generated in relational logic to a set of conﬁgurations directly
amenable to efﬁcient policy enforcement. Our policy enforcer
(APE) then monitors each vulnerable app at runtime to dynam-
ically intercept event messages, check them against generated
policies, and possibly inhibits their executions if violating any
such policies. As such, to the best of our knowledge, SEPAR is
the ﬁrst approach capable of detecting and protecting Android
systems against zero-day inter-app attacks.
In the following three sections, we describe the details of
each component in turn.
516
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:14 UTC from IEEE Xplore.  Restrictions apply. 
IV. AME: ANDROID MODEL EXTRACTOR
The AME module, that individually analyzes each app to
extract a model of its behavior, is built upon state-of-the-art
static analysis techniques for the Android framework. This
section describes the extraction process, with an emphasis
on the important improvements on prior work. Due to space
limitations, we have made the detailed algorithms and imple-
mentation of our extensions available at [10].
Architecture Extraction. To obtain an app model, AME
ﬁrst examines the app manifest ﬁle to capture the high-
level architectural information, including the components com-
prising the app, permissions that the app requires, and the
enforced permissions that the other apps must have in order to
interact with the app components. AME also identiﬁes public
interfaces exposed by each application, which are essentially
entry points deﬁned in the manifest ﬁle through Intent Filters
of components.
Intent Extraction. The next step of model extraction in-
volves an inter-procedural data ﬂow analysis [20], to track
the Intents and Intent Filters that are declared in code, rather
than the manifest ﬁle, as well as their properties. Each Intent
belongs to one particular component that sends it, may have
one recipient component and may include an action, data
and a set of categories. The action ﬁeld speciﬁes the general
action to be performed in the recipient component; the data
ﬁeld represents additional information about the data to be
processed by the action; and the categories ﬁled speciﬁes the
kind of component that should handle the Intent. An Intent can
also include extra data. Similar to Intents, each Intent Filter has
a non-empty set of actions and two sets of data and categories.
Note that Intent Filters for components of type Service and
Activity must be declared in their manifest; for Broadcast
Receivers, though, either in the manifest or at runtime.
To resolve the values associated with the retrieved at-
tributes (e.g., the Intent action) AME uses string constant
propagation [25], which provides a suitable solution since,
by convention, Android apps use constant strings to deﬁne
these values. In case a property is disambiguated to more
than one value (e.g., due to a conditional assignment), AME
generates a separate entity for each of these values, as they
contribute different exposure surfaces or event messages in
case of Intent Filters and Intents, respectively. AME handles
aliasing through performing on-demand alias analysis [54].
More speciﬁcally, for each attribute that is assigned to a heap
variable, the backward analysis ﬁnds its aliases and updates
the set of its captured values accordingly.
There are some special cases in implicit invocations of
inter-component entry points, where the caller method trig-
gers a two-way communication between components. Exam-
ples include bindService and startActivityForResult. A
component, for instance, can use startActivityForResult
to start another component, which itself implicitly calls the
ﬁrst component with a new Intent embodying the results once
ﬁnishes running. However, the returning implicit Intent, which
we call passive Intent, includes no information (e.g., action and
category) specifying its target component, making it difﬁcult
for static analyzers to identify the receiver in this second
implicit invocation. Algorithm 1 outlines identifying target
Algorithm 1: Update Passive Intent Target
Input: Intents: Set of all identiﬁed Intents
Output: Target components for passive Intents
if i.hasRequestResult & i.target = p.sender then
p.addTarget(i.sender)
if p.isPassiveIntent then
for i in Intents do
1 for p in Intents do
2
3
4
5
6
7
8
9 end
end
end
end
components for passive Intents. The logic of the algorithm is
as follows. For each passive Intent, p, look up Intents that both
request for results and their target components match senders
of p. Insert the senders of such Intents into the target set of p.
Path Extraction. AME analyzes the app using a static taint
analysis to track sensitive data ﬂow tuples ,
where Source represents a sensitive data (e.g.,
the device
ID) and Sink represents a method that may leak data, such
as sending text messages. To achieve a high precision in
data ﬂow analysis, our approach is ﬂow-, ﬁeld-, and context-
sensitive [13], meaning that our analysis distinguishes a vari-
able’s values between different program points, distinguishes
between different ﬁelds of a heap object, and that in analysis of
method calls is sensitive to their calling contexts, respectively.
In the interest of scalability, SEPAR’s analysis, however, is
not path-sensitive. The results (cf. Sec. VII) though indicate
no signiﬁcant imprecision caused by path-insensitivity in the
context of Android vulnerability analysis.
AME uses a set of most frequently used source and sink An-
droid API methods from the literature [47], identiﬁed through
the use of machine-learning techniques. To further detect those
paths traversing through different components, we adapted
this set by identifying source and sink methods corresponding
to inter-component communication. The identiﬁed sensitive
data ﬂows paths are later used in the ASE module to detect
data leaks vulnerabilities, and thereby to generate respective
policies preventing their potential exploits.
Permission Extraction. To ensure the permission policies
are preserved during an inter-component communication, one
should compare the granted permissions of the caller compo-
nent against the enforced permissions at the callee component
side. Therefore, the permissions actually used by each com-
ponent should be determined. While we already identiﬁed the
coarse-grained permissions speciﬁed in the manifest ﬁle, AME
analyzes permission checks throughout the code to identify
those controlling access to particular aspects of a component
(e.g., recall hasPermission method of Listing 2). In doing so,
it relies on API permission maps available in the literature,
and in particular the PScout permission map [14], one of the
most recently updated and comprehensive permission maps
available for the Android framework. API permission maps
specify mappings between Android API calls/Intents and the
permissions required to perform those calls.
A node could be directly tagged as permission-required
node, or transitively tagged by tracking the call chains. To
517
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:14 UTC from IEEE Xplore.  Restrictions apply. 
ﬁnd the transitive permission tag, AME performs backward
reachability analysis starting from the permission-required
node. The tagged permission are propagated from all children
to their parent nodes, until reaching to the root nodes. In case
an entry-point node of a component is tagged by a permission,
it will be added to the list of exposed permissions of that
component.
V. ASE: ANALYSIS AND SYNTHESIS ENGINE
We now show that our ideas for automated synthesis of
exploit speciﬁcations can be reduced to practice. The insight
that enabled such synthesis was that we could interpret the
synthesis problem as the dual of formal veriﬁcation. Given a
system speciﬁcation S, a model M, and a property P, formal
veriﬁcation asserts whether M satisﬁes the property P under S.
Whereas the synthesis challenge is given a system speciﬁcation
S and a property P, generate a model M satisfying property P
under system S. M is an instance model of S that satisﬁes P.
This observation enables leveraging veriﬁcation techniques
to solve synthesis problems. As shown in Figure 3, we can
view the bundle of app speciﬁcations, Sa, and the framework
speciﬁcation, S f , collectively as system S and a compositional
security issue as property P, and model them as a set of con-
straints. The problem then becomes to generate a candidate set
of violation scenarios, M, that satisﬁes the space of constraints:
M |= S f ∧ Sa ∧ P. Our approach is thus based on a reduction
of the synthesis problem into a constraint-solving problem
represented in relational logic (i.e., Alloy). Alloy is a formal
modeling language optimized for automated analysis, with a
comprehensible syntax that stems from notations ubiquitous
in object orientation, and semantics based on the ﬁrst-order
relational logic [3].
The formulation of the synthesis problem in Alloy consists
of three parts: (1) a ﬁxed set of signatures and facts describ-
ing the Android application fundamentals (e.g., application,
component, Intent, etc.) and the constraints that every appli-
cation must obey. Technically speaking, this module can be
considered as a meta-model for Android applications; (2) a
separate Alloy module for each app modeling various parts of
an Android app extracted from its APK ﬁle. The automatically
extracted model for each app relies on the Android framework
speciﬁcation module (the ﬁrst
item above); and (3) a set
of signatures used to reify inter-component vulnerabilities in
Android, such as privilege escalation.
Alloy is an appropriate language for our modeling and syn-
thesis purposes for several reasons: (1) its simple set theoretic
language, backed with logical and relational operators, was
sufﬁciently expressive for formal declarative speciﬁcation of
both applications and properties to be checked; (2) its ability to
automatically analyze speciﬁcations is useful as an automation
mechanism, enabling automatic synthesis of violation scenar-
ios as satisfying solutions; ﬁnally, (3) the formal analyzers
available for Alloy (e.g., [45]) translate our high-level model
speciﬁcations into a SAT formula that can be solved by off-
the-shelf SAT solvers, and thereby enable utilizing state-of-
the-art constraint solvers for our model synthesis. The rest of
this section ﬁrst provides a brief overview of Alloy, and then
details different parts of implementing the synthesis problem.
Alloy Overview. Alloy is a declarative language based
on the ﬁrst-order relational logic with transitive closure [3].
The inclusion of transitive closure extends its expressiveness
beyond ﬁrst-order logic. Essential data types, that collectively
deﬁne the vocabulary of a system, are speciﬁed in Alloy by
their type signatures (sig). Signatures represent basic types
of elements, and the relationships between them are captured
by the the declarations of ﬁelds within the deﬁnition of each
signature. Consider the following Alloy model. It deﬁnes two
Alloy signatures: Application and Component. The cmps
relation is deﬁned over these two signatures.
sig A p p l i c a t i o n{
cmps : Component
}
sig Component{}
Analysis of speciﬁcations written in Alloy is completely
automated, based on transformation of Alloy’s relational logic
into a satisﬁability problem. Off-the-shelf SAT solvers are then
used to exhaustively search for either satisfying models or
counterexamples to assertions. To make the state space ﬁnite,
certain scopes need to be speciﬁed that limit the number of
instances of each type signature. The following speciﬁcation
asks for instances that contain at least one Component, and
speciﬁes a scope that bounds the search for instances with at
most two objects for each top-level type (Application and
Component in this example).
pred modelInstance{ some Component }
run modelInstance for 2
When executed, the Alloy Analyzer produces model in-
stances, two of which are shown in Fig. 4. The model instance
of Fig. 4a includes one application and two components, one
of them belongs to no application. Fig. 4b shows another
model instance with two applications, each one having one
component.
Facts (fact) are formulas that take no arguments, and deﬁne
constraints that every instance of a model must satisfy, thus
restricting the instance space of the model. The following fact
paragraph, for example, states that each Component should
belong to exactly one Application. Re-executing the Alloy
Analyzer produces a new set of model instances, where while
Fig. 4b is still a valid instance, model of Fig. 4a is eliminated.
fact {
}
a l l c : Component| one c . ˜ cmps
Fig. 3: Automated synthesis of possible exploit speciﬁcations.
The other essential constructs of the Alloy language include:
Predicates, Functions and Assertions. Predicates (pred) are
named logical formulas used in deﬁning parameterized and
518
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:14 UTC from IEEE Xplore.  Restrictions apply. 
. . .
source = LOCATION
s i n k = ICC
app in App1
no i n t e n t F i l t e r s
paths = pathLocationFinder1
permissions = ACCESS FINE LOCATION
sender = LocationFinder
no r e c e i v e r
a c t i o n =showLoc
c a t e g o r i e s = DEFAULT
no dataType
no dataScheme
e x t r a = LOCATION
1 (a) App1 model
2 open a n d r o i d D e c l a r a t i o n
3
4 one sig LocationFinder extends Service{}{
5
6
7
8
9 }
10 one sig pathLocationFinder1 extends Path{}{
11
12
13 }
14 one sig I n t e n t 1 extends I n t e n t{}{
15
16
17
18
19
20
21
22 }
23 (b) App2 model
24 one sig MessageSender extends Service{}{
25
26
27
28
29 }
30 one sig pathMessageSender1 extends Path{}{
31
32
33 }
Listing 4: Excerpts from generated speciﬁcations for (a)
App1 (Listing 1) and (b) App2 (Listing 2).
app in App2
i n t e n t F i l t e r = I n t e n t F i l t e r 1
paths = pathMessageSender1
no permissions
source = ICC
s i n k = SMS
potential security challenges. For example, note the signa-
tures Component and Intent. Signatures deﬁned as abstract
represent
types of elements that cannot have an instance
object without explicitly extending them. A component be-
longs to exactly one application, and may have any number
of IntentFilters—each one describing a different interface
(capability) of the component—and a set of permissions re-
quired to access the component. The paths ﬁeld then indicates
information ﬂows between permission domains in the context
of this component. We deﬁne the source and destination
of a path based on canonical permission-required resources
identiﬁed by Holavanalli et al. for Android applications [38].
Examples of such resources are NETWORK, IMEI, and SD-
CARD. Thirteen permission-required resources are identiﬁed
as source, and ﬁve resources as destination, of a sensitive data