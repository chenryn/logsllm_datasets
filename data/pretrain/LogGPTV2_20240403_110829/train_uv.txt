### Support for Interfaces without IPv4 Addresses

Support for interfaces that do not have IPv4 addresses is available only on kernels that support the Netlink protocol.

#### Attributes
For an explanation of the terms used in this section, see the `attributes(7)` manual page.

| Interface                | Attribute  | Value  |
|--------------------------|------------|--------|
| `if_nameindex()`         | Thread Safety | `mt-safe` |
| `if_freenameindex()`     | Thread Safety | `mt-safe` |

#### Conformance
This function conforms to POSIX.1-2001, POSIX.1-2008, and RFC 3493. It first appeared in BSDI.

#### Examples
The following program demonstrates the use of the functions described on this page. An example of the output this program might produce is shown below:

```
$ ./a.out
1: lo
2: wlan0
3: em1
```

##### Program Source
```c
#include <stdio.h>
#include <stdlib.h>
#include <net/if.h>

int main(int argc, char *argv[]) {
    struct if_nameindex *if_ni, *i;
    if_ni = if_nameindex();
    if (if_ni == NULL) {
        perror("if_nameindex");
        exit(EXIT_FAILURE);
    }
    for (i = if_ni; !(i->if_index == 0 && i->if_name == NULL); i++)
        printf("%u: %s\n", i->if_index, i->if_name);
    if_freenameindex(if_ni);
    exit(EXIT_SUCCESS);
}
```

#### See Also
- `getsockopt(2)`
- `setsockopt(2)`
- `getifaddrs(3)`
- `if_indextoname(3)`
- `if_nametoindex(3)`
- `ifconfig(8)`

### Colophon
This page is part of release 5.13 of the Linux `man-pages` project. For a description of the project, information about reporting bugs, and the latest version of this page, visit:
```
https://www.kernel.org/doc/man-pages/
```

### Copyright
```
Copyright (C) 2005 Michael Kerrisk
Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.
Since the Linux kernel and libraries are constantly changing, this
manual page may be incorrect or out-of-date. The author(s) assume no
responsibility for errors or omissions, or for damages resulting from
the use of the information contained herein. The author(s) may not
have taken the same level of care in the production of this manual,
which is licensed free of charge, as they might when working
professionally.
Formatted or processed versions of this manual, if unaccompanied by
the source, must acknowledge the copyright and authors of this work.
```

### Overview of Pipes and FIFOs

Pipes and FIFOs (also known as named pipes) provide a unidirectional interprocess communication channel. A pipe has a read end and a write end. Data written to the write end of a pipe can be read from the read end of the pipe.

#### Description
A pipe is created using the `pipe(2)` system call, which returns two file descriptors: one for the read end and one for the write end. Pipes can be used to create a communication channel between related processes. For an example, see the `pipe(2)` manual page.

A FIFO (short for First In, First Out) has a name within the filesystem and is created using the `mkfifo(3)` function. Any process with the appropriate file permissions can open a FIFO. The read end is opened using the `O_RDONLY` flag, and the write end is opened using the `O_WRONLY` flag. For further details, see the `fifo(7)` manual page.

**Note:** Although FIFOs have a pathname in the filesystem, I/O on FIFOs does not involve operations on the underlying device (if there is one).

#### I/O on Pipes and FIFOs
The only difference between pipes and FIFOs is the manner in which they are created and opened. Once these tasks are accomplished, I/O on pipes and FIFOs has exactly the same semantics.

- If a process attempts to read from an empty pipe, the `read(2)` call will block until data is available.
- If a process attempts to write to a full pipe, the `write(2)` call will block until sufficient data has been read from the pipe to allow the write to complete.
- Non-blocking I/O is possible by using the `fcntl(2)` `F_SETFL` operation to enable the `O_NONBLOCK` open file status flag.

The communication channel provided by a pipe is a byte stream, with no concept of message boundaries.

- If all file descriptors referring to the write end of a pipe have been closed, an attempt to `read(2)` from the pipe will see end-of-file (EOF).
- If all file descriptors referring to the read end of a pipe have been closed, a `write(2)` will cause a `SIGPIPE` signal to be generated for the calling process. If the calling process is ignoring this signal, `write(2)` fails with the error `EPIPE`.

An application that uses `pipe(2)` and `fork(2)` should use suitable `close(2)` calls to close unnecessary duplicate file descriptors to ensure that EOF and `SIGPIPE/EPIPE` are delivered when appropriate.

It is not possible to apply `lseek(2)` to a pipe.

#### Pipe Capacity
A pipe has a limited capacity. If the pipe is full, a `write(2)` will block or fail, depending on whether the `O_NONBLOCK` flag is set. Different implementations have different limits for the pipe capacity. Applications should not rely on a particular capacity and should be designed so that a reading process consumes data as soon as it is available to avoid blocking the writing process.

In Linux versions before 2.6.11, the capacity of a pipe was the same as the system page size (e.g., 4096 bytes on i386). Since Linux 2.6.11, the pipe capacity is 16 pages (i.e., 65,536 bytes in a system with a page size of 4096 bytes). Since Linux 2.6.35, the default pipe capacity is 16 pages, but the capacity can be queried and set using the `fcntl(2)` `F_GETPIPE_SZ` and `F_SETPIPE_SZ` operations. For more information, see the `fcntl(2)` manual page.

The following `ioctl(2)` operation, which can be applied to a file descriptor that refers to either end of a pipe, places a count of the number of unread bytes in the pipe in the `int` buffer pointed to by the final argument of the call:

```c
ioctl(fd, FIONREAD, &nbytes);
```

The `FIONREAD` operation is not specified in any standard but is provided on many implementations.

#### /proc Files
On Linux, the following files control how much memory can be used for pipes:

- **/proc/sys/fs/pipe-max-pages (only in Linux 2.6.34)**: An upper limit, in pages, on the capacity that an unprivileged user (one without the `CAP_SYS_RESOURCE` capability) can set for a pipe. The default value for this limit is 16 times the default pipe capacity (see above), with a lower limit of two pages. This interface was removed in Linux 2.6.35 in favor of `/proc/sys/fs/pipe-max-size`.

- **/proc/sys/fs/pipe-max-size (since Linux 2.6.35)**: The maximum size (in bytes) of individual pipes that can be set by users without the `CAP_SYS_RESOURCE` capability. The value assigned to this file may be rounded upward to reflect the value actually employed for a convenient implementation. To determine the rounded-up value, display the contents of this file after assigning a value to it. The default value for this file is 1048576 (1 MiB). The minimum value that can be assigned to this file is the system page size. Attempts to set a limit less than the page size cause `write(2)` to fail with the error `EINVAL`. Since Linux 4.9, the value on this file also acts as a ceiling on the default capacity of a new pipe or newly opened FIFO.

- **/proc/sys/fs/pipe-user-pages-hard (since Linux 4.5)**: The hard limit on the total size (in pages) of all pipes created or set by a single unprivileged user (i.e., one with neither the `CAP_SYS_RESOURCE` nor the `CAP_SYS_ADMIN` capability). So long as the total number of pages allocated to pipe buffers for this user is at this limit, attempts to create new pipes will be denied, and attempts to increase a pipe's capacity will be denied. When the value of this limit is zero (which is the default), no hard limit is applied.

- **/proc/sys/fs/pipe-user-pages-soft (since Linux 4.5)**: The soft limit on the total size (in pages) of all pipes created or set by a single unprivileged user (i.e., one with neither the `CAP_SYS_RESOURCE` nor the `CAP_SYS_ADMIN` capability). So long as the total number of pages allocated to pipe buffers for this user is at this limit, individual pipes created by a user will be limited to one page, and attempts to increase a pipe's capacity will be denied. When the value of this limit is zero, no soft limit is applied. The default value for this file is 16384, which permits creating up to 1024 pipes with the default capacity.

#### PIPE_BUF
POSIX.1 says that writes of less than `PIPE_BUF` bytes must be atomic: the output data is written to the pipe as a contiguous sequence. Writes of more than `PIPE_BUF` bytes may be nonatomic: the kernel may interleave the data with data written by other processes. POSIX.1 requires `PIPE_BUF` to be at least 512 bytes. On Linux, `PIPE_BUF` is 4096 bytes. The precise semantics depend on whether the file descriptor is non-blocking (`O_NONBLOCK`), whether there are multiple writers to the pipe, and on `n`, the number of bytes to be written:

- **O_NONBLOCK disabled, n <= PIPE_BUF**: The write is atomic: the data given to `write(2)` will not be interleaved with `write(2)s` by other processes. The `write(2)` blocks until `n` bytes have been written.
- **O_NONBLOCK enabled, n > PIPE_BUF**: If the pipe is full, `write(2)` fails with `errno` set to `EAGAIN`. Otherwise, from 1 to `n` bytes may be written (i.e., a "partial write" may occur; the caller should check the return value from `write(2)` to see how many bytes were actually written), and these bytes may be interleaved with writes by other processes.

#### Open File Status Flags
The only open file status flags that can be meaningfully applied to a pipe or FIFO are `O_NONBLOCK` and `O_ASYNC`.

- Setting the `O_ASYNC` flag for the read end of a pipe causes a signal (SIGIO by default) to be generated when new input becomes available on the pipe. The target for delivery of signals must be set using the `fcntl(2)` `F_SETOWN` command. On Linux, `O_ASYNC` is supported for pipes and FIFOs only since kernel 2.6.

#### Portability Notes
On some systems (but not Linux), pipes are bidirectional: data can be transmitted in both directions between the pipe ends. POSIX.1 requires only unidirectional pipes. Portable applications should avoid reliance on bidirectional pipe semantics.

#### Bugs
Before Linux 4.9, some bugs affected the handling of the `pipe-user-pages-soft` and `pipe-user-pages-hard` limits when using the `fcntl(2)` `F_SETPIPE_SZ` operation to change a pipe's capacity:

1. **When increasing the pipe capacity, the checks against the soft and hard limits were made against existing consumption and excluded the memory required for the increased pipe capacity.** The new increase in pipe capacity could then push the total memory used by the user for pipes (possibly far) over a limit. (This could also trigger the problem described next.)
   - Starting with Linux 4.9, the limit checking includes the memory required for the new pipe capacity.

2. **The limit checks were performed even when the new pipe capacity was less than the existing pipe capacity.** This could lead to problems if a user set a large pipe capacity, and then the limits were lowered, with the result that the user could no longer decrease the pipe capacity.
   - Starting with Linux 4.9, checks against the limits are performed only when increasing a pipe's capacity; an unprivileged user can always decrease a pipe's capacity.

3. **The accounting and checking against the limits were done as follows:**
   - Test whether the user has exceeded the limit.
   - Make the new pipe buffer allocation.
   - Account new allocation against the limits.
   - This was racey. Multiple processes could pass point (a) simultaneously, and then allocate pipe buffers that were accounted for only in step (c), with the result that the user's pipe buffer allocation could be pushed over the limit.
   - Starting with Linux 4.9, the accounting step is performed before doing the allocation, and the operation fails if the limit would be exceeded.

Before Linux 4.9, bugs similar to points (1) and (3) could also occur when the kernel allocated memory for a new pipe buffer; that is, when calling `pipe(2)` and when opening a previously unopened FIFO.

#### See Also
- `mkfifo(1)`
- `dup(2)`
- `fcntl(2)`
- `open(2)`
- `pipe(2)`
- `poll(2)`
- `select(2)`
- `socketpair(2)`
- `splice(2)`
- `stat(2)`
- `tee(2)`
- `vmsplice(2)`
- `mkfifo(3)`
- `epoll(7)`
- `fifo(7)`

### Colophon
This page is part of release 5.13 of the Linux `man-pages` project. For a description of the project, information about reporting bugs, and the latest version of this page, visit:
```
https://www.kernel.org/doc/man-pages/
```

### Copyright
```
Copyright (C) 1992 Drew Eckhardt, March 28, 1992
and Copyright (C) 2002 Michael Kerrisk
Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.
Since the Linux kernel and libraries are constantly changing, this
manual page may be incorrect or out-of-date. The author(s) assume no
responsibility for errors or omissions, or for damages resulting from
the use of the information contained herein. The author(s) may not
have taken the same level of care in the production of this manual,
which is licensed free of charge, as they might when working
professionally.
Formatted or processed versions of this manual, if unaccompanied by
the source, must acknowledge the copyright and authors of this work.
```

### getrusage - Get Resource Usage

#### Synopsis
```c
#include <sys/time.h>
#include <sys/resource.h>

int getrusage(int who, struct rusage *usage);
```

#### Description
The `getrusage` function retrieves information about the resources used by the current process or its children. The `who` argument specifies the process or processes for which the resource usage is to be retrieved, and the `usage` argument points to a `struct rusage` where the resource usage information will be stored.