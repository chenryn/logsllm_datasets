directly translate to the shuffling functionality. In particular, in the
Session 4D: Distributed Protocols CCS '20, November 9–13, 2020, Virtual Event, USA1263Figure 2: (From left to right, a) Secure values of k for several settings (Semi-honest). b) Secure values of k for several settings,
as γ grows (Semi-honest). c) Required number of neighbors for several settings, and the value of α guaranteed in each case
(Malicious). d) Values of α as the number of neighbors increases, for n = 105 (Malicious).
semi-honest variant, honest clients are guaranteed to have their
value shuffled with at least (1 − γ − δ)n other values from honest
clients. In the malicious setting, one gets the analogous guarantee
with αn, as explained in Section 4.
We first discuss a simple baseline solution that only works for
small m. A histogram of how many times each message appears
can be considered as a vector of length m. Thus, each client can
locally build a histogram of their input (which would be a one-hot
vector) and then a vector summation protocol can be used to add
these local histograms together. The server then learns only the
aggregate histogram, as desired. The problem with this solution is
that it is impractical for large m, e.g., m = 232. More generally, this
solution is wasteful for scenarios where we know that the result
histogram is going to be sparse.
We address the issues in the above protocol, i.e. for settings
where the size of the message domain m is much larger than the
number of client n by leveraging a probabilistic data structure called
an invertible Bloom lookup table (IBLT) [21]. An IBLT is a linear
sketch of a key-value store, such that if the vector representations
for two IBLTs are added together, the result is a new IBLT that
encodes the union of the key-value stores for the original IBLTs.
IBLTs support the following operations (among others):
• Insert(p, x): insert the key-value pair (p, x).
• ListEntries(): list every key-value pair in the data structure.
Though the ListEntries operation may fail, we can choose parame-
ters so that this failure happens with very small probability.
Using this data structure, the shuffle primitive can be achieved as
follows. Every client first creates an empty local IBLT of length ℓ, all
with the same parameters. Then each client i chooses a pseudonym
πi uniformly at random from a set P that is sufficiently large to
avoid collisions (e.g. 64 bit strings would work well). They then
insert the pair (πi , xi) into their IBLT. A vector summation protocol
is then used to combine the IBLTs, and the server recovers the
messages using the ListEntries IBLT functionality.
We provide the details of the above construction and the exact
implementations of the local vector preparation algorithm run by
each client and the message recovery algorithm run by the server
in Appendix D of the full version [5]. There we also discuss the
exact parameters, which tell us that for n > 100, the bit length
of the vectors used for the IBLTs can be be taken to be less than
2n⌈log2(|P|) + log2(m) + log2(n)⌉. For example if n = 10,000 and
the clients’ inputs are 32 bits long, the construction requires 2 ·
10,000 · (64 + 32 + 14) = 2,200,000 bit, i.e. 269kB, vectors. As a final
remark, note that this protocol is very easily adapted to the case
where clients have different numbers of messages to send. This
covers the case where each user has multiple messages to send, as
in the multi-message shuffle model [4, 11, 19], and the case where
most users don’t have any message to send, which might be useful
for submitting error reports.
7 CONCLUSION
We presented new constructions for secure aggregation that achieve
both better asymptotic computation and communication costs than
previous solutions as well as very efficient concrete parameters,
which enable much better scalability with the number of clients.
The efficiency cost of the construction of Bonawitz et al. [8] limited
its use to a thousand clients. Our semi-honest construction supports
billions of clients and our semi-malicious construction supports
tens of thousands of clients for the same per client cost. Last but
not least we presented a construction for secure shuffling using
secure vector aggregation, which is the first cryptographically se-
cure instantiation of the shuffle model of differential privacy. This
construction requires each client to have an input vector of size
linear in the total number of submitted messages.
We leave as future work a system implementation of our proto-
cols, and leave as an intriguing open question how to achieve secure
shuffling with sublinear complexity in the single-server setting.
Acknowledgments. JB was supported by the UK Government’s
Defence & Security Programme in support of the Alan Turing
Institute. We thank Aurélien Bellet, Matt Kusner, Kobbi Nissim,
and Brooks Paige for useful discussions in the early stages of this
work. We thank Cindy Lin, Sarvar Patel, Aaron Segal, and Karn
Seth for their feedback, as well as insightful discussions about the
semi-malicious variant of the problem.
Session 4D: Distributed Protocols CCS '20, November 9–13, 2020, Virtual Event, USA1264REFERENCES
[1] David W. Archer, Dan Bogdanov, Yehuda Lindell, Liina Kamm, Kurt Nielsen,
Jakob Illeborg Pagter, Nigel P. Smart, and Rebecca N. Wright. 2018. From Keys to
Databases - Real-World Applications of Secure Multi-Party Computation. Comput.
J. 61, 12 (2018), 1749–1771.
[2] Borja Balle, James Bell, Adrià Gascón, and Kobbi Nissim. 2019. Improved Sum-
mation from Shuffling. arXiv: 1909.11225 (2019).
[3] Borja Balle, James Bell, Adrià Gascón, and Kobbi Nissim. 2019. The Privacy
Blanket of the Shuffle Model. In Advances in Cryptology - CRYPTO 2019 - 39th
Annual International Cryptology Conference, Santa Barbara, CA, USA, August
18-22, 2019, Proceedings, Part II (Lecture Notes in Computer Science, Vol. 11693),
Alexandra Boldyreva and Daniele Micciancio (Eds.). Springer, 638–667. https:
//doi.org/10.1007/978-3-030-26951-7_22
[4] Borja Balle, James Bell, Adria Gascon, and Kobbi Nissim. 2020. Private Summation
in the Multi-Message Shuffle Model. arXiv:2002.00817 [cs.CR]
[5] James Bell, Keith Bonawitz, Adrià Gascón, Tancrède Lepoint, and Mariana
Raykova. 2020. Secure Single-Server Aggregation with (Poly)Logarithmic Over-
head. IACR Cryptol. ePrint Arch. 2020 (2020), 704.
[6] Andrea Bittau, Úlfar Erlingsson, Petros Maniatis, Ilya Mironov, Ananth Raghu-
nathan, David Lie, Mitch Rudominer, Ushasree Kode, Julien Tinnes, and Bernhard
Seefeld. 2017. Prochlo: Strong Privacy for Analytics in the Crowd. In Proceedings
of the 26th Symposium on Operating Systems Principles (Shanghai, China) (SOSP
’17). ACM, New York, NY, USA, 441–459. https://doi.org/10.1145/3132747.3132769
[7] Keith Bonawitz, Hubert Eichner, Wolfgang Grieskamp, Dzmitry Huba, Alex
Ingerman, Vladimir Ivanov, Chloé M Kiddon, Jakub Konečný, Stefano Mazzocchi,
Brendan McMahan, Timon Van Overveldt, David Petrou, Daniel Ramage, and
Jason Roselander. 2019. Towards Federated Learning at Scale: System Design. In
SysML 2019. https://arxiv.org/abs/1902.01046
[8] Keith Bonawitz, Vladimir Ivanov, Ben Kreuter, Antonio Marcedone, H. Bren-
dan McMahan, Sarvar Patel, Daniel Ramage, Aaron Segal, and Karn Seth. 2017.
Practical Secure Aggregation for Privacy-Preserving Machine Learning. In ACM
Conference on Computer and Communications Security. ACM, 1175–1191.
[9] Elette Boyle, Kai-Min Chung, and Rafael Pass. 2015. Large-Scale Secure Compu-
tation: Multi-party Computation for (Parallel) RAM Programs. In Advances in
Cryptology – CRYPTO 2015, Rosario Gennaro and Matthew Robshaw (Eds.).
[10] Elette Boyle, Ran Cohen, Deepesh Data, and Pavel Hubáček. 2018. Must the Com-
munication Graph of MPC Protocols be an Expander?. In Advances in Cryptology
– CRYPTO 2018, Hovav Shacham and Alexandra Boldyreva (Eds.).
[11] Albert Cheu, Adam D. Smith, Jonathan Ullman, David Zeber, and Maxim Zhilyaev.
2019. Distributed Differential Privacy via Mixnets. In EUROCRYPT. 375–403.
[12] Henry Corrigan-Gibbs and Dan Boneh. 2017. Prio: Private, Robust, and Scalable
Computation of Aggregate Statistics. In 14th USENIX Symposium on Networked
Systems Design and Implementation (NSDI 17).
[13] Cynthia Dwork, Frank McSherry, Kobbi Nissim, and Adam Smith. 2006. Cali-
brating Noise to Sensitivity in Private Data Analysis. In Proceedings of the Third
Conference on Theory of Cryptography.
[14] Tariq Elahi, George Danezis, and Ian Goldberg. 2014. PrivEx: Private Collection
of Traffic Statistics for Anonymous Communication Networks. In Proceedings
of the 2014 ACM SIGSAC Conference on Computer and Communications Security
(Scottsdale, Arizona, USA) (CCS ?14). Association for Computing Machinery, New
York, NY, USA, 1068?1079. https://doi.org/10.1145/2660267.2660280
[15] Úlfar Erlingsson, Vitaly Feldman, Ilya Mironov, Ananth Raghunathan, Shuang
Song, Kunal Talwar, and Abhradeep Thakurta. 2020. Encode, Shuffle, Analyze
Privacy Revisited: Formalizations and Empirical Evaluation. arXiv preprint
arXiv:2001.03618 (2020).
[16] Úlfar Erlingsson, Vitaly Feldman, Ilya Mironov, Ananth Raghunathan, Kunal
Talwar, and Abhradeep Thakurta. 2019. Amplification by Shuffling: From Local
to Central Differential Privacy via Anonymity. In Proceedings of the Thirtieth
Annual ACM-SIAM Symposium on Discrete Algorithms (SODA ?19).
[17] Taher El Gamal. 1985. A public key cryptosystem and a signature scheme based
on discrete logarithms. IEEE Trans. Information Theory 31, 4 (1985), 469–472.
[18] Craig Gentry. 2009. Fully homomorphic encryption using ideal lattices. In In
Proc. STOC. 169–178.
[19] Badih Ghazi, Rasmus Pagh, and Ameya Velingker. 2019. Scalable and Differ-
entially Private Distributed Aggregation in the Shuffled Model. arXiv preprint
arXiv:1906.08320 (2019).
[20] Oded Goldreich. 2004. The Foundations of Cryptography - Volume 2: Basic Appli-
cations. Cambridge University Press.
[21] Michael T. Goodrich and Michael Mitzenmacher. 2011. Invertible bloom lookup
tables. In 49th Annual Allerton Conference on Communication, Control, and Com-
puting, Allerton 2011, Allerton Park & Retreat Center, Monticello, IL, USA, 28-30
September, 2011. IEEE, 792–799. https://doi.org/10.1109/Allerton.2011.6120248
[22] Shai Halevi, Yehuda Lindell, and Benny Pinkas. 2011. Secure Computation on
the Web: Computing without Simultaneous Interaction. In Proceedings of the 31st
Annual Conference on Advances in Cryptology.
[23] Mihaela Ion, Ben Kreuter, Ahmet Erhan Nergiz, Sarvar Patel, Mariana Raykova,
Shobhit Saxena, Karn Seth, David Shanahan, and Moti Yung. 2020. On Deploying
Secure Computing Commercially: Private Intersection-Sum Protocols and their
Business Applications. In 5th IEEE European Symposium on Security and Privacy.
[24] Internet Research Task Force (IRTF). 2018. ChaCha20 and Poly1305 for IETF
Protocols. https://datatracker.ietf.org/doc/rfc8439/; accessed 2020-05-12.
[25] Peter Kairouz, H Brendan McMahan, Brendan Avent, Aurélien Bellet, Mehdi
Bennis, Arjun Nitin Bhagoji, Keith Bonawitz, Zachary Charles, Graham Cormode,
Rachel Cummings, et al. 2019. Advances and open problems in federated learning.
arXiv preprint arXiv:1912.04977 (2019).
[26] Iraklis Leontiadis, Kaoutar Elkhiyaoui, and Refik Molva. 2014. Private and Dy-
namic Time-Series Data Aggregation with Trust Relaxation. In Cryptology and
Network Security, Dimitris Gritzalis, Aggelos Kiayias, and Ioannis Askoxylakis
(Eds.).
[27] KU Leuven. 2019. SCALE-MAMBA Software. https://homes.esat.kuleuven.be/
~nsmart/SCALE/. (2019).
[28] Yehuda Lindell. 2017. How to Simulate It - A Tutorial on the Simulation Proof
Technique. In Tutorials on the Foundations of Cryptography. Springer International
Publishing, 277–346.
[29] Yehuda Lindell and Ariel Nof. 2018. Fast Secure Multiparty ECDSA with Practical
Distributed Key Generation and Applications to Cryptocurrency Custody. In
Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications
Security, CCS 2018, Toronto, ON, Canada, October 15-19, 2018. 1837–1854.
[30] Adriana López-Alt, Eran Tromer, and Vinod Vaikuntanathan. 2012. On-the-
Fly Multiparty Computation on the Cloud via Multikey Fully Homomorphic
Encryption. In Proceedings of the Forty-Fourth Annual ACM Symposium on Theory
of Computing (New York, New York, USA) (STOC ?12). Association for Computing
Machinery, New York, NY, USA, 1219?1234. https://doi.org/10.1145/2213977.
2214086
[31] H Brendan McMahan, Daniel Ramage, Kunal Talwar, and Li Zhang. 2018. Learning
Differentially Private Recurrent Language Models. In International Conference on
Learning Representations (ICLR).
[32] Pascal Paillier. 1999. Public-Key Cryptosystems Based on Composite Degree
Residuosity Classes. In EUROCRYPT (Lecture Notes in Computer Science, Vol. 1592).
Springer, 223–238.
[33] Leonid Reyzin, Adam Smith, and Sophia Yakoubov. 2018. Turning HATE Into
LOVE: Homomorphic Ad Hoc Threshold Encryption for Scalable MPC. Cryptol-
ogy ePrint Archive, Report 2018/997. https://eprint.iacr.org/2018/997.
[34] Jinhyun So, Basak Guler, and Amir Salman Avestimehr. 2020. Turbo-Aggregate:
Breaking the Quadratic Aggregation Barrier in Secure Federated Learning. IACR
Cryptol. ePrint Arch. 2020 (2020), 167.
[35] Pauli Virtanen, Ralf Gommers, Travis E. Oliphant, Matt Haberland, Tyler
Reddy, David Cournapeau, Evgeni Burovski, Pearu Peterson, Warren Weckesser,
Jonathan Bright, Stéfan J. van der Walt, Matthew Brett, Joshua Wilson, K. Jar-
rod Millman, Nikolay Mayorov, Andrew R. J. Nelson, Eric Jones, Robert Kern,
Eric Larson, CJ Carey, İlhan Polat, Yu Feng, Eric W. Moore, Jake Vand erPlas,
Denis Laxalde, Josef Perktold, Robert Cimrman, Ian Henriksen, E. A. Quintero,
Charles R Harris, Anne M. Archibald, Antônio H. Ribeiro, Fabian Pedregosa, Paul
van Mulbregt, and SciPy 1. 0 Contributors. 2020. SciPy 1.0: Fundamental Algo-
rithms for Scientific Computing in Python. Nature Methods 17 (2020), 261–272.
https://doi.org/10.1038/s41592-019-0686-2
Session 4D: Distributed Protocols CCS '20, November 9–13, 2020, Virtual Event, USA1265A APPENDIX
Parameter Description
Table 1: Summary of parameters used throughout the paper.
n
k
t
σ
η
λ
δ
γ
X
l
Number of clients.
Number of neighbors of each client k < n.
Secret Sharing reconstruction threshold t ≤ k.
Information-theoretic security parameter
(bounding the probability of bad events).
Correctness parameter
(bounding the failure probability).
Cryptographic security parameter
(for cryptographic primitives).
Maximum fraction of dropout clients.
Maximum fraction of corrupted clients.
Domain of the summation protocol.
Size of the clients’ vector input.
n
l
Client Cost
Server Cost per client
Sharing
PRG Evaluation Reconstruction
103
104
105
105
105
105
0.0002
0.0003
0.0003
0.1711
0.2058
0.3453
1.8e-06
2.24e-06
2.44e-06
PRG Evaluation
0%
0.0019
0.0020
0.0031
10%