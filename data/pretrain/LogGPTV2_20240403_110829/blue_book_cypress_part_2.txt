assertions don't pass. For example:
```javascript
cy.get(':checkbox').should('be.disabled')
cy.get('form').should('have.class', 'form-horizontal')
cy.get('input').should('not.have.value', 'US')
```
Cypress bundles
[Chai](https://docs.cypress.io/guides/references/bundled-tools#Chai),
[Chai-jQuery](https://docs.cypress.io/guides/references/bundled-tools#Chai-jQuery),
and
[Sinon-Chai](https://docs.cypress.io/guides/references/bundled-tools#Sinon-Chai)
to provide built-in assertions. You can see a comprehensive list of them in [the
list of assertions
reference](https://docs.cypress.io/guides/references/assertions). You can also
[write your own assertions as Chai
plugins](https://docs.cypress.io/examples/examples/recipes#Fundamentals) and use
them in Cypress.
### Default assertions
Many commands have a default, built-in assertion, or rather have requirements
that may cause it to fail without needing an explicit assertion you've added.
* `cy.visit()`: Expects the page to send text/html content with a 200 status
    code.
* `cy.request()`: Expects the remote server to exist and provide a response.
* `cy.contains()`: Expects the element with content to eventually exist in the
    DOM.
* `cy.get()`: Expects the element to eventually exist in the DOM.
* `.find()`: Also expects the element to eventually exist in the DOM.
* `.type()`: Expects the element to eventually be in a typeable state.
* `.click()`: Expects the element to eventually be in an actionable state.
* `.its()`: Expects to eventually find a property on the current subject.
Certain commands may have a specific requirement that causes them to immediately
fail without retrying: such as `cy.request()`. Others, such as DOM based
commands will automatically retry and wait for their corresponding elements to
exist before failing.
### Writing assertions
There are two ways to write assertions in Cypress:
* Implicit Subjects: Using `.should()` or `.and()`.
* Explicit Subjects: Using `expect`.
The implicit form is much shorter, so only use the explicit form in the next
cases:
* Assert multiple things about the same subject.
* Massage the subject in some way prior to making the assertion.
#### Implicit Subjects
Using `.should()` or `.and()` commands is the preferred way of making assertions
in Cypress.
```javascript
// the implicit subject here is the first 
// this asserts that the  has an .active class
cy.get('tbody tr:first').should('have.class', 'active')
```
You can chain multiple assertions together using `.and()`, which is another name
for `.should()` that makes things more readable:
```javascript
cy.get('#header a')
  .should('have.class', 'active')
  .and('have.attr', 'href', '/users')
```
Because `.should('have.class')` does not change the subject, `.and('have.attr')`
is executed against the same element. This is handy when you need to assert
multiple things against a single subject quickly.
#### Explicit Subjects
Using `expect` allows you to pass in a specific subject and make an assertion
about it.
```javascript
// the explicit subject here is the boolean: true
expect(true).to.be.true
```
### [Common Assertions](https://docs.cypress.io/guides/references/assertions#Common-Assertions)
* *Length*:
    ```javascript
    // retry until we find 3 matching 
    cy.get('li.selected').should('have.length', 3)
    ```
* *Attribute*: For example to test links
    ```javascript
    // check the content of an attribute
    cy
      .get('a')
      .should('have.attr', 'href', 'https://docs.cypress.io')
      .and('have.attr', 'target', '_blank') // Test it's meant to be opened
      // another tab
    ```
* *Class*:
    ```javascript
    // retry until this input does not have class disabled
    cy.get('form').find('input').should('not.have.class', 'disabled')
    ```
* *Value*:
    ```javascript
    // retry until this textarea has the correct value
    cy.get('textarea').should('have.value', 'foo bar baz')
    ```
* *Text Content*:
    ```javascript
    // assert the element's text content is exactly the given text
    cy.get('#user-name').should('have.text', 'Joe Smith')
    // assert the element's text includes the given substring
    cy.get('#address').should('include.text', 'Atlanta')
    // retry until this span does not contain 'click me'
    cy.get('a').parent('span.help').should('not.contain', 'click me')
    // the element's text should start with "Hello"
    cy.get('#greeting')
      .invoke('text')
      .should('match', /^Hello/)
    // tip: use cy.contains to find element with its text
    // matching the given regular expression
    cy.contains('#a-greeting', /^Hello/)
    ```
* *Visibility*:
    ```javascript
    // retry until the button with id "form-submit" is visible
    cy.get('button#form-submit').should('be.visible')
    // retry until the list item with text "write tests" is visible
    cy.contains('.todo li', 'write tests').should('be.visible')
    ```
    *Note*: if there are multiple elements, the assertions `be.visible` and
    `not.be.visible` act differently:
    ```javascript
    // retry until SOME elements are visible
    cy.get('li').should('be.visible')
    // retry until EVERY element is invisible
    cy.get('li.hidden').should('not.be.visible')
    ```
* *Existence*:
    ```javascript
    // retry until loading spinner no longer exists
    cy.get('#loading').should('not.exist')
    ```
* *State*:
    ```javascript
    // retry until our radio is checked
    cy.get(':radio').should('be.checked')
    ```
* *CSS*:
    ```javascript
    // retry until .completed has matching css
    cy.get('.completed').should('have.css', 'text-decoration', 'line-through')
    // retry while .accordion css has the "display: none" property
    cy.get('#accordion').should('not.have.css', 'display', 'none')
    ```
* *Disabled property*:
    ```html
    ```
    ```javascript
    cy.get('#example-input')
      .should('be.disabled')
      // let's enable this element from the test
      .invoke('prop', 'disabled', false)
    cy.get('#example-input')
      // we can use "enabled" assertion
      .should('be.enabled')
      // or negate the "disabled" assertion
      .and('not.be.disabled')
    ```
### Negative assertions
There are positive and negative assertions. Examples of positive assertions
are:
```javascript
cy.get('.todo-item').should('have.length', 2).and('have.class', 'completed')
```
The negative assertions have the `not` chainer prefixed to the assertion. For
example:
```javascript
cy.contains('first todo').should('not.have.class', 'completed')
cy.get('#loading').should('not.be.visible')
```
We recommend using negative assertions to verify that a specific condition is no
longer present after the application performs an action. For example, when
a previously completed item is unchecked, we might verify that a CSS class is
removed.
```javascript
// at first the item is marked completed
cy.contains('li.todo', 'Write tests')
  .should('have.class', 'completed')
  .find('.toggle')
  .click()
// the CSS class has been removed
cy.contains('li.todo', 'Write tests').should('not.have.class', 'completed')
```
Read more on the topic in the blog post [Be Careful With Negative
Assertions](https://glebbahmutov.com/blog/negative-assertions/).
### Custom assertions
You can write your own assertion function and pass it as a callback to the
`.should()` command.
```javascript
cy.get('div').should(($div) => {
  expect($div).to.have.length(1)
  const className = $div[0].className
  // className will be a string like "main-abc123 heading-xyz987"
  expect(className).to.match(/heading-/)
})
```
## Setting up the tests
Depending on how your application is built - it's likely that your web
application is going to be affected and controlled by the server.
Traditionally when writing e2e tests using Selenium, before you automate the
browser you do some kind of set up and tear down on the server.
You generally have three ways to facilitate this with Cypress:
* `cy.exec()`: To run system commands.
* `cy.task()`: To run code in Node via the `pluginsFile`.
* `cy.request()`: To make HTTP requests.
If you're running node.js on your server, you might add a `before` or `beforeEach`
hook that executes an npm task.
```javascript
describe('The Home Page', () => {
  beforeEach(() => {
    // reset and seed the database prior to every test
    cy.exec('npm run db:reset && npm run db:seed')
  })
  it('successfully loads', () => {
    cy.visit('/')
  })
})
```
Instead of just executing a system command, you may want more flexibility and
could expose a series of routes only when running in a test environment.
For instance, you could compose several requests together to tell your server
exactly the state you want to create.
```javascript
describe('The Home Page', () => {
  beforeEach(() => {
    // reset and seed the database prior to every test
    cy.exec('npm run db:reset && npm run db:seed')
    // seed a post in the DB that we control from our tests
    cy.request('POST', '/test/seed/post', {
      title: 'First Post',
      authorId: 1,
      body: '...',
    })
    // seed a user in the DB that we can control from our tests
    cy.request('POST', '/test/seed/user', { name: 'Jane' })
      .its('body')
      .as('currentUser')
  })
  it('successfully loads', () => {
    // this.currentUser will now point to the response
    // body of the cy.request() that we could use
    // to log in or work with in some way
    cy.visit('/')
  })
})
```
While there's nothing really wrong with this approach, it does add a lot of
complexity. You will be battling synchronizing the state between your server and
your browser - and you'll always need to set up / tear down this state before
tests (which is slow).
The good news is that we aren't Selenium, nor are we a traditional e2e testing
tool. That means we're not bound to the same restrictions.
With Cypress, there are several other approaches that can offer an arguably
better and faster experience.
### Stubbing the server
Another valid approach opposed to seeding and talking to your server is to
bypass it altogether.
While you'll still receive all of the regular HTML / JS / CSS assets from your
server and you'll continue to `cy.visit()` it in the same way - you can instead
stub the JSON responses coming from it.
This means that instead of resetting the database, or seeding it with the state
we want, you can force the server to respond with whatever you want it to. In
this way, we not only prevent needing to synchronize the state between the
server and browser, but we also prevent mutating state from our tests. That
means tests won't build up state that may affect other tests.
Another upside is that this enables you to build out your application without
needing the contract of the server to exist. You can build it the way you want
the data to be structured, and even test all of the edge cases, without needing
a server.
However - there is likely still a balance here where both strategies are valid
(and you should likely do them).
While stubbing is great, it means that you don't have the guarantees that these
response payloads actually match what the server will send. However, there are
still many valid ways to get around this:
* *Generate the fixture stubs ahead of time*: You could have the server generate
    all of the fixture stubs for you ahead of time. This means their data will
    reflect what the server will actually send.
* *Write a single e2e test without stubs, and then stub the rest*: Another more
    balanced approach is to integrate both strategies. You likely want to have
    a single test that takes a true e2e approach and stubs nothing. It'll use
    the feature for real - including seeding the database and setting up state.
    Once you've established it's working you can then use stubs to test all of
    the edge cases and additional scenarios. There are no benefits to using real
    data in the vast majority of cases. We recommend that the vast majority of
    tests use stub data. They will be orders of magnitude faster, and much less
    complex.
`cy.intercept()` is used to control the behavior of HTTP requests. You can
statically define the body, HTTP status code, headers, and other response
characteristics.
```javascript
cy.intercept(
  {
    method: 'GET', // Route all GET requests
    url: '/users/*', // that have a URL that matches '/users/*'
  },
  [] // and force the response to be: []
).as('getUsers') // and assign an alias
```
### [Fixtures](https://docs.cypress.io/guides/guides/network-requests#Fixtures)
A fixture is a fixed set of data located in a file that is used in your tests.
The purpose of a test fixture is to ensure that there is a well known and fixed
environment in which tests are run so that results are repeatable. Fixtures are
accessed within tests by calling the `cy.fixture()` command.
When stubbing a response, you typically need to manage potentially large and
complex JSON objects. Cypress allows you to integrate fixture syntax directly
into responses.
```javascript
// we set the response to be the activites.json fixture
cy.intercept('GET', '/activities/*', { fixture: 'activities.json' })
```
Fixtures live in `/cypress/fixtures/` and can be further organized within
additional directories. For instance, you could create another folder called images
and add images:
```
/cypress/fixtures/images/cats.png
/cypress/fixtures/images/dogs.png
/cypress/fixtures/images/birds.png
```
To access the fixtures nested within the images folder, include the folder in
your `cy.fixture()` command.
```javascript
cy.fixture('images/dogs.png') // yields dogs.png as Base64
```
#### [Use the content of a fixture set in a hook in a test](https://docs.cypress.io/api/commands/fixture#Encoding)