    Legend: code, data, rodata, value
    0x08052efc in loop ()
可以看到，此时堆0x08066a00位置接收了数据包并且进行了保存，查看一下这个堆中的内容。
    gdb-peda$ x/100x 0x08066a00
    0x8066a00 :0x707553240x74726f700x735520730x206f6c6c
    0x8066a10 :0x203250490x637261650x505a20680x7c203065
    0x8066a20 :0x79654b240x56247c610x64696c610x4e657461
    0x8066a30 :0x206b63690x726569500x247c65720x206e6556
    0x8066a40 :0x30302c310x247c31390x4e0001470x4c6b633b
    0x8066a50 :0x7c7473690x49794d240x204f464e0x4c4c4124
    0x8066a60 :0x656950200x206572720x9090654a0x90909090
    0x8066a70 :0x909090900x909090900x909090900x90909090
    0x8066a80 :0x909090900x909090900x6850c0310x68732f2f
    0x8066a90 :0x69622f680x31e3896e0x6aca89c90x80cd580b
    0x8066aa0 :0x909090900x909090900x909090900x90909090
    0x8066ab0 :0x909090900x909090900x909090900x90909090
    0x8066ac0 :0x909090900x909090900x3c6190900x794d243c
    0x8066ad0 :0x243500800x302469700x373737240x37373737
    0x8066ae0 :0x373737370xb1b1b1370xb1b1b1b10xb1b1b1b1
畸形数据已经全被被接收了，接下来单步跟踪。在接收到数据之后，会到达一处调用，地址为0x8052e82的call
parse_token，这个主要是负责验证逻辑。
    gdb-peda$ n
    [----------------------------------registers-----------------------------------]
    EAX: 0x1b1 
    EBX: 0x806c610 --> 0x80670c0 (0x0806c610)
    ECX: 0xbffff3f0 --> 0x806c610 --> 0x80670c0 (0x0806c610)
    EDX: 0x806c610 --> 0x80670c0 (0x0806c610)
    ESI: 0x0 
    EDI: 0x0 
    EBP: 0xbffff438 --> 0x0 
    ESP: 0xbffff3f0 --> 0x806c610 --> 0x80670c0 (0x0806c610)
    EIP: 0x8052e82 (:call   0x8050cf0 )
    EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)
    [-------------------------------------code-------------------------------------]
       0x8052e7b :push   eax
       0x8052e7c :push   0x8066a00
       0x8052e81 :push   ebx
    => 0x8052e82 :call   0x8050cf0 
       0x8052e87 :add    esp,0x10
       0x8052e8a :cmp    eax,0xffffffff
       0x8052e8d :je     0x8052f4c 
       0x8052e93 :sub    esp,0xc
    Guessed arguments:
    arg[0]: 0x806c610 --> 0x80670c0 (0x0806c610)
    arg[1]: 0x8066a00 ("$Supports Usllo IP2 earch ZPe0 |$Keya|$ValidateNick Pierre|$Ven 1,0091|$G01")
    arg[2]: 0x1b1
可以看到这处验证逻辑第二个参数就是畸形payload，接下来分析这处验证逻辑。通过IDA pro查看一下这个函数伪代码。
    int __cdecl parse_token(void *a1, char *src, size_t a3)
    {
    ……省略部分代码
    LABEL_19:
            v11 = v3;
            *(&token_buf + n) = 0;
            result = proto_state_handler(a1, &token_buf, n);
            v3 = v11;
            if ( result == -1 )
              return -1;
            goto LABEL_12;
          }
        }
        else if ( !(n & 1) )
        {
          goto LABEL_19;
        }
        v8[v10] = v9[v10];
        goto LABEL_19;
      }
      return result;
    }
在LABEL_19块中，调用了一个函数proto_state_handler，主要是负责处理协议句柄的，其中涉及到一个token_buf，单步跟踪观察这个proto_state_handler函数调用的传参情况。注意看stack栈中的情况。
    [----------------------------------registers-----------------------------------]
    EAX: 0x20 (' ')
    EBX: 0x0 
    ECX: 0x0 
    EDX: 0x1b1 
    ESI: 0x8066a20 ("$Keya|$ValidateNick Pierre|$Ven 1,0091|$G01")
    EDI: 0x8062720 --> 0x0 
    EBP: 0x8066a00 ("$Supports Usllo IP2 earch ZPe0 |$Keya|$ValidateNick Pierre|$Ven 1,0091|$G01")
    ESP: 0xbffff3a0 --> 0x806c610 --> 0x80670c0 (0x0806c610)
    EIP: 0x8050ddb (:call   0x80551b0 )
    EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)
    [-------------------------------------code-------------------------------------]
       0x8050dcb :push   0x8062700
       0x8050dd0 :push   DWORD PTR [esp+0x24]
       0x8050dd4 :mov    BYTE PTR [eax+0x8062700],0x0
    => 0x8050ddb :call   0x80551b0 
       0x8050de0 :add    esp,0x10
       0x8050de3 :cmp    eax,0xffffffff
       0x8050de6 :mov    edx,DWORD PTR [esp+0x1c]
       0x8050dea :jne    0x8050d78 
    No argument
    [------------------------------------stack-------------------------------------]
    0000| 0xbffff3a0 --> 0x806c610 --> 0x80670c0 (0x0806c610)
    0004| 0xbffff3a4 --> 0x8062700 ("$Supports Usllo IP2 earch ZPe0 |")
这个token_buf的内容是$Supports，其实这个主要是NDMC的协议处理，而在parse_token的开始部分，会先处理这个数据包，将数据包内容拆分。接下来直接执行，会第二次到达断点。
    [-------------------------------------code-------------------------------------]
       0x8050dcb :push   0x8062700
       0x8050dd0 :push   DWORD PTR [esp+0x24]
       0x8050dd4 :mov    BYTE PTR [eax+0x8062700],0x0
    => 0x8050ddb :call   0x80551b0 
       0x8050de0 :add    esp,0x10
       0x8050de3 :cmp    eax,0xffffffff
       0x8050de6 :mov    edx,DWORD PTR [esp+0x1c]
       0x8050dea :jne    0x8050d78 
    No argument
    [------------------------------------stack-------------------------------------]
    0000| 0xbffff3a0 --> 0x806c610 --> 0x80670c0 (0x0806c610)
    0004| 0xbffff3a4 --> 0x8062700 ("$Keya|")
继续执行，第三次命中
    [-------------------------------------code-------------------------------------]
       0x8050dcb :push   0x8062700
       0x8050dd0 :push   DWORD PTR [esp+0x24]
       0x8050dd4 :mov    BYTE PTR [eax+0x8062700],0x0
    => 0x8050ddb :call   0x80551b0 
       0x8050de0 :add    esp,0x10
       0x8050de3 :cmp    eax,0xffffffff
       0x8050de6 :mov    edx,DWORD PTR [esp+0x1c]
       0x8050dea :jne    0x8050d78 
    No argument
    [------------------------------------stack-------------------------------------]
    0000| 0xbffff3a0 --> 0x806c610 --> 0x80670c0 (0x0806c610)
    0004| 0xbffff3a4 --> 0x8062700 ("$ValidateNick Pierre|")
可以看到每次都获取到|分割线后的内容，接下来直接执行到包含畸形字符串的部分。
    [-------------------------------------code-------------------------------------]
       0x8050dcb :push   0x8062700
       0x8050dd0 :push   DWORD PTR [esp+0x24]
       0x8050dd4 :mov    BYTE PTR [eax+0x8062700],0x0
    => 0x8050ddb :call   0x80551b0 
       0x8050de0 :add    esp,0x10
       0x8050de3 :cmp    eax,0xffffffff
       0x8050de6 :mov    edx,DWORD PTR [esp+0x1c]
       0x8050dea :jne    0x8050d78 
    No argument
    [------------------------------------stack-------------------------------------]
    0000| 0xbffff3a0 --> 0x806c610 --> 0x80670c0 (0x0806c610)
    0004| 0xbffff3a4 --> 0x8062700 ("$MyINFO $ALL Pierre Je", '220' , "61300Ph//shh/bin21134361?312jvX?", '220' , "a 0x144 
    0012| 0xbffff3ac --> 0x0 
    0016| 0xbffff3b0 --> 0xbffff438 --> 0x0 
    0020| 0xbffff3b4 --> 0xb7de16b8 --> 0x1785 
    0024| 0xbffff3b8 --> 0x79 ('y')
    0028| 0xbffff3bc --> 0x197 
    [------------------------------------------------------------------------------]
第二个参数作为畸形字符串传入，其中涉及到指令$MyINFO，就从这里跟入看看函数内部到底发生了什么。
    int proto_state_handler (user_t *u, char *data, unsigned int len)
    {
    switch (u->state) {
    case PROTO_STATE_INIT:// new user connected
         return proto_nmdc_state_init (u);
    case PROTO_STATE_SENDLOCK:// waiting for user $Key
         return proto_nmdc_state_sendlock (u, data, len);
    case PROTO_STATE_WAITNICK:// waiting for user $ValidateNick
         return proto_nmdc_state_waitnick (u, data, len);
    case PROTO_STATE_WAITPASS:// waiting for user $GetPass
                 return proto_nmdc_state_waitpass (u, data, len);
    case PROTO_STATE_HELLO:// waiting for user $MyINFO
         return proto_nmdc_state_hello (u, data, len);
    case PROTO_STATE_ONLINE:// user is avaible now
         return proto_nmdc_state_online (u, data, len);
    case PROTO_STATE_DISCONNECTED:// user gone out    $Quit