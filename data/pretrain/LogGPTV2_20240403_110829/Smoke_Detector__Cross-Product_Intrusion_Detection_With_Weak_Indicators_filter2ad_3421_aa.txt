title:Smoke Detector: Cross-Product Intrusion Detection With Weak Indicators
author:Kevin A. Roundy and
Acar Tamersoy and
Michael Spertus and
Michael Hart and
Daniel Kats and
Matteo Dell'Amico and
Robert Scott
Smoke Detector: Cross-Product Intrusion Detection With Weak
Symantec Research Labs
acar PI:EMAIL
Michael Spertus
Symantec Corporation
mike PI:EMAIL
Ma(cid:138)eo Dell’Amico
Symantec Research Labs
ma(cid:138)eo PI:EMAIL
Kevin A. Roundy
Symantec Research Labs
kevin PI:EMAIL
Michael Hart
Symantec Research Labs
michael PI:EMAIL
Indicators
Acar Tamersoy
Daniel Kats
Symantec Research Labs
daniel PI:EMAIL
Robert Sco(cid:138)
Symantec Corporation
rsco(cid:138)@sentryds.com
Abstract
(cid:140)e central task of a Security Incident and Event Manager (SIEM)
or Managed Security Service Provider (MSSP) is to detect security
incidents on the basis of tens of thousands of event types coming
from many kinds of security products. We present Smoke Detector,
which processes trillions of security events with the Random Walk
with Restart (RWR) algorithm, inferring high order relationships
between known security incidents and imperfect secondary security
events (smoke) to (cid:128)nd undiscovered security incidents ((cid:128)re). By
(cid:128)nding previously undetected incidents, Smoke Detector’s RWR
algorithm is able to increase the MSSP’s critical incident count by
19% with a 1.3% FP rate.
Perhaps equally importantly, our approach o(cid:130)ers signi(cid:128)cant
bene(cid:128)ts beyond increased incident detection: (1) It provides a robust
approach for leveraging Big Data sensor nets to increase adversarial
resistance of protected networks; (2) Our event-scoring techniques
enable e(cid:129)cient discovery of primary indicators of compromise; (3)
Our con(cid:128)dence scores provide intuition and tuning capabilities for
Smoke Detector’s discovered security incidents, aiding incident
display and response.
1 INTRODUCTION
(cid:140)e massive volume and diversity of security events collected by se-
curity products today present challenges to traditional approaches
to intrusion detection. Among others, email, host, and network
security products are logging an increasing variety and volume
of security events while analysts are already overburdened with
a glut of security-related information. Security Incident and Event
Managers (SIEM) have been developed to distill massive amounts
of security data from multiple products into modest numbers of
actionable security incidents. Managed Security Service Providers
Permission to make digital or hard copies of all or part of this work for personal or 
classroom use is granted without fee provided that copies are not made or distributed 
for pro(cid:128)t or commercial advantage and that copies bear this notice and the full citation 
on the (cid:128)rst page. Copyrights for components of this work owned by others than the 
author(s) must be honored. Abstracting with credit is permi(cid:138)ed. To copy otherwise, or 
republish, to post on servers or to redistribute to lists, requires prior speci(cid:128)c permission 
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2017, Orlando, FL, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to ACM. 
978-1-4503-5345-8/17/12. . . $15.00
DOI: 10.1145/3134600.3134645
(MSSPs) address the same task, but on behalf of multiple customers,
and therefore have even more security events to manage, from more
products, and with greater scalability challenges. We studied these
challenges in the context of a leading Managed Security Services
Provider, which receives nearly two trillion security event instances
per month, with more than 70 thousand distinct types seen in a typ-
ical month. (cid:140)ese events are sent from tens of thousands of security
devices, representing one hundred distinct security products.
When a SIEM or MSSP raises a security incident, it is usually
based on the existence of a Primary Indicator of Compromise event,
such as an anti-virus detection or blacklisted URL in the company’s
security logs [19]. (cid:140)e presence of a primary indicator furnishes
su(cid:129)cient evidence to directly warrant the creation of a security
incident noti(cid:128)cation when it (cid:128)res under pre-speci(cid:128)ed conditions.
(cid:140)e remainder of security events are treated as unreliable Secondary
Indicators, which include generic security and system events that
are not necessarily a(cid:138)ack-related. (cid:140)is classi(cid:128)cation can be made
by the vendor of the security event, the security device, the SIEM,
or by expert analysts in the Security Operations Center (SOC) of
the MSSP or enterprise, typically with signi(cid:128)cant manual e(cid:130)ort.
In many SIEMs and MSSPs, large collections of expert rules are
created and tuned (at signi(cid:128)cant cost) to identify combinations of
primary indicators that should trigger an incident.
(cid:140)e identi(cid:128)cation of primary indicators is a major undertaking
that is prone to mistakes because the number of di(cid:130)erent event
types is so large and evolves so rapidly. Furthermore, a(cid:138)ackers
actively work to evade primary indicators by purchasing security
products and tweaking their malware or a(cid:138)ack until the product
no longer detects it. For these a(cid:138)acks, any detection must be on
the basis of secondary indicators. (cid:140)e mature sub-disciplines of in-
trusion detection, which include network anomaly detection, alert
fusion [2, 10], alert correlation [33, 34], and root-cause analysis
all focus on identifying intrusions by identifying instances of sec-
ondary indicators that are malicious or anomalous. (cid:140)e data sets
for which the prior art was developed have either consisted of
collections of homogeneous events coming from a single product,
or have normalized the alerts so that a single model could be ap-
plied across di(cid:130)erent events [34]. By contrast, Smoke Detector is
designed for the status quo in the SIEM and MSSP, whose events
are in many cases produced by the intrusion detection systems
200Firewall
Instance Count Con(cid:128)dence
44,104,172,561
21,396,843,738
19,493,074,472
15,161,094,870
14,586,679,865
6,905,911,034
6,762,250,252
4,350,063,989
3,790,388,695
2,626,258,118
2,381,224,704
2,109,964,562
1,676,587,290
Signature Name
0.01 TCP Connection
0.00 Tra(cid:129)c
0.00 UPD Connection
0.00
0.02 Teardown TCP Connection
0.00 Teardown UDP Connection
0.00
0.01
0.01 Connection Discarded
0.02 TPC Cache Miss
0.00 HTTP Get
0.02
0.02 Connection Allowed
Flow Session Close
PIX-6-305012
Packet Permi(cid:138)ed
Table 1: Instance counts for the most frequent events seen
by an MSSP over a 30-day period.
mentioned above. Security events di(cid:130)er greatly in the reliability
with which they identify infections and are so di(cid:130)erent in nature
that much would be lost in an a(cid:138)empt to treat all events uniformly,
as most of the prior art has done. Rather, we use the relationships
between these distinct event types to each other, and to known
security incidents (when available), in building Smoke Detector, a
scalable graph-based security-incident detection framework that
makes the following contributions:
(1) Smoke Detector replicates 96.4% of the primary-indicator-
driven detection capabilities of a leading MSSP at a 1% False Positive
(FP) rate, and discovering 19% more critical incidents at a 1.3% FP
rate.
(2) We adapt the Random Walk with Restart (RWR) algorithm [9,
21], originally proposed for image segmentation, to cross-product
incident detection with good adversarial resistance properties. To
the best of our knowledge, RWR has not been applied to security
problems outside of a social network context.
(3) We automatically score the con(cid:128)dence with which an event
type indicates the existence of serious security incident. (cid:140)ese
scores provide security analysts with intuition and enable them to
tune Smoke Detector and suppress false positives.
2 BACKGROUND
In MSSP and SIEM data, machines with unusually high event counts
rarely exhibit serious security problems and are instead sympto-
matic of issues such as network outages and product miscon(cid:128)g-
urations. (cid:140)is occurs largely because the most frequent events
produced by security products are generic tra(cid:129)c logs and status
messages, as seen in Figure 1. While these generic events are useful
in that they contain metadata that can be judged anomalous and
lead to additional detections, by the time they are observed by a
SIEM or MSSP, they have typically also passed through the intru-
sion detection systems deployed by various products, which also
a(cid:138)empt to detect anomalous behaviour and report those detections
to the MSSP or SIEM.
We therefore designed Smoke Detector to track the relation-
ships between known security incidents and security events such
that useful events are automatically identi(cid:128)ed, enabling us to rank
possibly infected machines to detect novel incidents. Smoke De-
tector consists of two key components. First, it builds a graph that
captures the relationships between events and the machines on
which those events appear, using the Random Walk with Restart
algorithm to propagate information from known-infected machines
to the rest of the network. Smoke Detector’s second component
identi(cid:128)es the conditional probability with which an event indicates
that a machine is infected as its con(cid:128)dence score, and uses these
con(cid:128)dence scores to provide intuition, but also to weight and tune
the graph used by Random Walk with Restart.
We proceed by describing our dataset in Section 3, our algo-
rithm’s graph-based techniques in Section 4 our con(cid:128)dence scoring
algorithm in 5. Our implementation and its scalability properties
are described in Section 6, for which we present qualitative results
in Section 7 and a discussion of adversarial resistance in Section 8.
We discuss Related Work in Section 9, and conclude in Section 10.
3 DATA DESCRIPTION
In this work, we assume a dataset that consists of records of the
form . In this formulation, m[ti,tj] is a window
of time between ti and tj during which machine m was observed.
We will henceforth refer to m[ti,tj] as a machine-window wherever
appropriate for ease of explanation. (cid:140)e security event that was
observed in relation to the machine-window is represented by s,
which we elaborate on below. Finally, l indicates the location of
the source of the event, that is, whether it originated on a machine
that is internal or external to the enterprise. As noted by Lindqvist
and Porras [18], the source-location provides important context for
network a(cid:138)ack events, such as port scans, which may be exceed-
ingly commonplace when externally sourced, but indicative of a
dangerous post-compromised machine a(cid:138)empting lateral internal
movement otherwise. Since most network events involve two ma-
chines, they manifest as two records, one for the source machine
and the other for the destination machine.
Security events represent an security-relevant action recorded by
a security product, along with metadata that include a reference to
the machine on which it occurred, or, in the case of a network event,
the machines on which it occurred. Each security event represents
either a primary indicator or secondary indicator of compromise.
Primary indicators indicate the presence of a serious security is-
sue on a machine that may warrant remediation or preventative
action. (cid:140)ese events are typically identi(cid:128)ed and ve(cid:138)ed by processes
that are manual-labor intensive. Examples of primary indicators
include anti-virus detections, post-compromise command and con-
trol tra(cid:129)c, bu(cid:130)er over(cid:131)ows, and network a(cid:138)acks, which may be
conditioned to have come from within the enterprise. All remain-
ing security events are classi(cid:128)ed as secondary indicators, which
vary dramatically in their ability to indicate security issues. (cid:140)e
spectrum ranges from serious events that ought to be re-classi(cid:128)ed
as primary indicators, to events that raise no suspicion, but may
serve the purpose of providing context to a forensic investigation.
Some machine-windows in the dataset are known to contain
security incidents that have been veri(cid:128)ed as representing serious
201Figure 1: We plot the distribution of events corresponding to
known security incidents relative to the mean timestamp of
the incident’s events. (cid:135)e distribution of primary indicators
is also shown at 5x their actual rate to make them visible.
Time window each machine-window spans
Primary indicator security events
Secondary indicator security events
Machine-windows with security incidents
Unknown machine-windows
Earliest machine-window observed on
Latest machine-window observed on
1 day
5,654
72,303
1,086
53,223,857
March 9, 2017
April 24, 2017
Table 2: Summary statistics for the anonymized dataset pro-
vided by a Managed Security Services Provider for this work.
security problems. Each incident is then associated with some ma-
chine m between time window ti and tj. Most serious incidents
are raised because of the presence of a primary indicator within
this machine-window, but all secondary indicators that occur in
this machine-window are included in incident machine-windows as
well. (cid:140)e remainder of the security events in the dataset correspond
to unknown machine-windows, that is, machine-windows that do
not correspond to a known security incident, but that may con-
tain security event data that analysts would classify as a security
incident if it were brought to their a(cid:138)ention.
What is the best width for a machine-window? Since se-
curity alerts appear in bursts corresponding both to benign and
malicious actions, it is desirable for machine-windows to be small
enough to prevent the admixture of too much benign behavior
in security-incident windows, while keeping the windows large
enough to capture the majority of malicious behavior that occurs
around an incident. To answer this question, we studied the dis-
tribution of events around known security incidents and present
this in Figure 1. We observe a large spike in event activity in the
central 2 hours of a security incident, the majority of events (cid:128)re
in the central 24-hour period, and by the time 2 days have passed,
Figure 2: Example bipartite graph between security events