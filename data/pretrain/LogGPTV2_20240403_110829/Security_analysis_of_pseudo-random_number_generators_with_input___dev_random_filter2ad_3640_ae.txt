no
no
αu > 8
yes
(Si, S(cid:48)
u, Sr, R)
i, S(cid:48)
(S(cid:48)
S nextu→ (S(cid:48), R)
u, Sr, R)
(Si, Su, Sr)
wait
Er > 8t
no
αr > 8
no
yes
(Si, Su, S(cid:48)
yes
i, Su, S(cid:48)
r; R)
(S(cid:48)
r; R)
S nextr→ (S(cid:48), R)
Figure 3: Relations between functions and pools for LINUX
r , H(S∗
r ))
r )). This decreases Er by
• If αr  212, and Hi = (cid:98)log2(∆i)(cid:99) otherwise.
5.4 Attacks Based on the Entropy Estimator
As shown in Appendix B, it is possible to build a distri-
bution D0 of null entropy for which the estimated entropy
is high (cf. Lemma 6) and a distribution D1 of high entropy
i − δ2
i |,|δ3
i = δ2
for which the estimated entropy is null (cf. Lemma 7). It
is then possible to mount attacks on both /dev/random and
/dev/urandom, which show that these two generators are not
robust.
/dev/random is not robust. Let us consider an adver-
sary A against the robustness of /dev/random, and thus in
the game ROB(γ∗), that makes the following oracle queries:
one get-state, several next-ror, several D-refresh and one ﬁ-
nal next-ror. Then the state (Si, Sr, Su), the parameters
Ei, Eu, Er and the counter c deﬁned in ROB(γ∗) evolve the
following way:
• get-state: After a state compromise, A knows all pa-
rameters (but needs Si, Sr, Ei, Er) and c = 0.
• next-ror: After (cid:98)Ei/10(cid:99) + (cid:98)Er/10(cid:99) queries to next-ror,
Ei = Er = 0, A knows Si and Sr and c = 0.
• D-refresh:
In a ﬁrst stage, A refreshes LINUX with
input from D0. After 300 queries, Ei = 3584 and Er =
0. A knows Si and Sr and c = 0.
In a second stage, A refreshes LINUX with input J $←
U128. As Ei = 3584, these inputs are ignored as long
as I contains less than 4096 bytes. After 30 queries, A
knows Si and Sr and c = 3840.
• next-ror: Since Er = 0, a transfer is necessary between
Si and Sr before generating R. Since Ei = 3584, then
αb = 10, such a transfer happens. But as A knows Si
and Su, then A knows R.
Therefore, in the game ROB(γ∗) with b = 0, A obtains a
10-bytes string in the last next-ror-oracle that is predictable,
whereas when b = 1, this event occurs only with probability
2−80. It is therefore straightforward for A to distinguish the
real and the ideal world.
/dev/urandom is not robust. Similarly, let us consider an
adversary A against the robustness of /dev/urandom in the
game ROB(γ∗) that makes the following oracle queries: one
get-state that allows it to know Si, Su, Ei, Eu; (cid:98)Ei/10(cid:99) +
(cid:98)Eu/10(cid:99) next-ror, making Ei = Eu = 0; 100 D-refresh with
D1; and one next-ror, so that R will only rely on Sr as no
transfer is done between Si and Su since Ei = 0. Then A is
able to generate a predictable output R and to distinguish
the real and the ideal worlds in ROB(γ∗).
6555.5 The Mixing Function
The Mixing function M is the core of LINUX PRNG. It
is implemented in the built-in function mix pool bytes. We
give a complete description of M as it is used for refresh, its
description for next diﬀers only from internal parameters. It
takes as input I of size one byte, the input pool Si, con-
sidered as 128 32-bits words S0, . . . , S127. It mixes I with
7 words of Si (selected with an index k) and replaces one
word of Si with the result. Another index d deﬁnes a word
rotation. In details:
• The byte I is converted into a 32-bit word, using stan-
dard C implicit cast, and rotated by d bits. At initial-
ization, d = 0, and for each M call, if k = 0 mod 128
then d = d + 14 mod 32 else d = d + 7 mod 32.
• The obtained word is xor-ed with Sk+j mod 128 for j ∈
{0, 1, 25, 51, 76, 103}8.
• The obtained word is mixed with a built-in twist ta-
ble that is the binary representations of {0, α32∗j}, j =
1, . . . 7 in the ﬁeld (F2)/(Q), where Q(x) is the CRC32
polynom9 used for Ethernet protocol [13]. Denoting
the primitive element α, this is described as W →
W.α3 +R(Q(W, α29).α32, Q), where Q(A, B) is the quo-
tient and R(A, B)) the remainder in division A/B.
• Then Sk is replaced by the last word and k = k + 1.
5.6 Attack Based on the Mixing Function
In [14], a proof of state entropy preservation is given for
one iteration of the mixing function M, assuming that the in-
put and the internal state are independent: H∞(M(S, I)) ≥
H∞(S) and H∞(M(S, I)) ≥ H∞(I).
Indeed, without in-
dependence and with more than one iteration of M, LINUX
does not recover from state compromise. This contradicts
the backward security and therefore the robustness.
LINUX is not backward secure. As shown in Appendix B,
with Lemma 8, it is possible to build an input distribu-
tion D2 with arbitrary high entropy such that, after several
D-refresh, H∞(S) = 1. Let us consider an adversary A
that generates an input of distribution D2, and that makes
the following oracle queries: set-refresh, γ∗ calls to D-refresh
and many calls to next-ror. Then the state (Si, Sr, Su), the
parameters Ei, Eu, Er, k, d and the counter c of BWD(γ∗)
evolve the following way:
• set-refresh: A sets Si = 0, Sr = Su = 0, d = 0, k =
• D-refresh: A refreshes LINUX with D2. After γ∗ oracle
• next-ror: Since H∞(S) = 1, H∞(R) = 1.
127, and c = 0.
queries, until c ≥ γ∗, H∞(S) = 1.
Therefore, in the game BWD(γ∗) with b = 0, A always ob-
tains an output in the last next-ror query with H∞(R) = 1,
whereas in b = 1, this event occurs only with negligible prob-
ability. It is therefore straightforward for A to distinguish
the real and the ideal world.
6. CONCLUSION
We have proposed a new property for PRNG with in-
put, that captures how it should accumulate entropy into
the internal state. This property actually expresses the
8Similarly, the words chosen from Sr and Su will be
Sk+j mod 32 for j ∈ {0, 1, 7, 14, 20, 26}.
9Q(x) = x32 + x26 + x23 + x22 + x16 + x12 + x11 + x10 + x8 +
x7 + x5 + x4 + x2 + x + 1.
real expected behavior of a PRNG after a state compro-
mise, where it is expected that the PRNG quickly recovers
enough entropy. We gave a precise assessment of the Linux
PRNGs /dev/random and /dev/urandom. We proved that
these PRNGs do not achieve this property, due to the be-
havior of their entropy estimator and their mixing function.
As pointed by Barak and Halevi [1], who advise against us-
ing run-time entropy estimation, our attacks are due to its
use when data is transferred between pools in Linux PRNG.
We therefore recommend that the functions of a PRNG do
not rely on such an estimator.
Finally, we proposed a construction that meets our new
property in the standard model and we showed that it is no-
ticeably more eﬃcient than the Linux PRNGs. Thus, from
the perspective of speed and provable security, our construc-
tion appears vastly superior to Linux PRNGs. We therefore
recommend to use this construction whenever a PRNG with
input is used for cryptography.
7. ACKNOWLEDGMENTS
Yevgeniy Dodis’ research was partially supported by the
gift from VMware Labs and NSF grants 1319051, 1314568,
1065288, 1017471. Damien Vergnaud’s research was sup-
ported in part by the French ANR-12-JS02-0004 ROMAn-
TIC Project. Daniel Wichs’s research was partially sup-
ported by NSF grant 1314722.
8. REFERENCES
[1] Barak, B., and Halevi, S. A model and
architecture for pseudo-random generation with
applications to /dev/random. In ACM CCS 05: 12th
Conference on Computer and Communications
Security (Nov. 2005), V. Atluri, C. Meadows, and
A. Juels, Eds., ACM Press, pp. 203–212.
[2] Barker, E., and Kelsey, J. Recommendation for
random number generation using deterministic
random bit generators. NIST Special Publication
800-90A, 2012.
[3] Bellare, M., and Rogaway, P. The security of
triple encryption and a framework for code-based
game-playing proofs. In Advances in Cryptology –
EUROCRYPT 2006 (May / June 2006), S. Vaudenay,
Ed., vol. 4004 of Lecture Notes in Computer Science,
Springer, pp. 409–426.
[4] CVE-2008-0166. Common Vulnerabilities and
Exposures, 2008.
[5] Desai, A., Hevia, A., and Yin, Y. L. A
practice-oriented treatment of pseudorandom number
generators. In Advances in Cryptology –
EUROCRYPT 2002 (Apr. / May 2002), L. R.
Knudsen, Ed., vol. 2332 of Lecture Notes in Computer
Science, Springer, pp. 368–383.
[6] Dodis, Y., Gennaro, R., H˚astad, J., Krawczyk,
H., and Rabin, T. Randomness extraction and key
derivation using the CBC, cascade and HMAC modes.
In Advances in Cryptology – CRYPTO 2004 (Aug.
2004), M. Franklin, Ed., vol. 3152 of Lecture Notes in
Computer Science, Springer, pp. 494–510.
[7] Eastlake, D., Schiller, J., and Crocker, S. RFC
4086 - Randomness Requirements for Security, June
2005.
656[8] Gutterman, Z., Pinkas, B., and Reinman, T.
Analysis of the linux random number generator. In
2006 IEEE Symposium on Security and Privacy (May
2006), IEEE Computer Society Press, pp. 371–385.
[9] Heninger, N., Durumeric, Z., Wustrow, E., and
Halderman, J. A. Mining your Ps and Qs: Detection
of widespread weak keys in network devices. In
Proceedings of the 21st USENIX Security Symposium
(Aug. 2012).
[10] Information technology - Security techniques -
Random bit generation. ISO/IEC18031:2011, 2011.
[11] Kelsey, J., Schneier, B., Wagner, D., and Hall,
C. Cryptanalytic attacks on pseudorandom number
generators. In Fast Software Encryption – FSE’98
(Mar. 1998), S. Vaudenay, Ed., vol. 1372 of Lecture
Notes in Computer Science, Springer, pp. 168–188.
[12] Killmann, W. and Schindler, W. A proposal for:
Functionality classes for random number generators.
AIS 20 / AIS31, 2011.
[13] Koopman, P. 32-bit cyclic redundancy codes for
internet applications. In Proceedings of the 2002
International Conference on Dependable Systems and
Networks (Washington, DC, USA, 2002), DSN ’02,
IEEE Computer Society, pp. 459–472.
[14] Lacharme, P., Rock, A., Strubel, V., and
Videau, M. The linux pseudorandom number
generator revisited. Cryptology ePrint Archive, Report
2012/251, 2012.
[15] Lenstra, A. K., Hughes, J. P., Augier, M., Bos,