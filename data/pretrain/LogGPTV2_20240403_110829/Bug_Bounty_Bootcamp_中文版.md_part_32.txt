#### More Than a \ Tag {#c06.xhtml#h3-501546c06-0001}
Inserting `           ` tags into victim web pages isn't the
only way to get your scripts executed in victim browsers. There are a
few other tricks. First, you can change the values of attributes in HTML
tags. Some HTML attributes allow you to specify a script to run if
certain conditions are met. For example, the `      onload     ` event
attribute runs a specific script after the HTML element has loaded:
将\标签插入受害者网页并不是让你的脚本在受害者浏览器中执行的唯一方法。还有一些其他的技巧。首先，你可以改变HTML标签中属性的值。一些HTML属性允许你在满足某些条件时指定要运行的脚本。例如，onload事件属性在HTML元素加载后运行一个特定的脚本：
Similarly, the `      onclick     ` event attribute specifies the script
to be executed when the element is clicked, and `      onerror     `
specifies the script to run in case an error occurs loading the element.
If you can insert code into these attributes, or even add a new event
attribute into an HTML tag, you can create an XSS.
类似地，onclick事件属性指定在单击元素时要执行的脚本，而onerror指定在加载元素时发生错误时要运行的脚本。如果您可以在这些属性中插入代码，甚至在HTML标记中添加新的事件属性，您就可以创建XSS攻击。
Another way you can achieve XSS is through special URL schemes, like
`      javascript:     ` and `      data:     ` . The
`      javascript:     ` URL scheme allows you to execute JavaScript
code specified in the URL. For example, entering this URL will cause an
alert box with the text `      XSS by Vickie     ` to appear:
你可以通过特殊的URL方案（如javascript：和data：）来实现XSS攻击。javascript：URL方案允许你执行在URL中指定的JavaScript代码。例如，输入此URL将导致一个显示文本"XSS
by Vickie"的警示框出现。
    javascript:alert('XSS by Vickie')
[ ]{#c06.xhtml#Page_123 .pagebreak title="123"} This means that if you
make the user load a `      javascript:     ` URL, you can achieve XSS
as well. Data URLs, those that use the `      data:     ` scheme, allow
you to embed small files in a URL. You can use these to embed JavaScript
code into URLs too:
这意味着，如果你让用户加载一个javascript:
URL，你也可以实现XSS。数据URL，那些使用data:
方案的URL，允许你在URL中嵌入小文件。你也可以使用这些来在URL中嵌入JavaScript代码。
    data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTIGJ5IFZpY2tpZScpPC9zY3JpcHQ+"
This URL will also generate an alert box *,* because the included data
in the data URL is the base64-encoded version of the following script:
此链接也将生成警示框，因为数据 URL 中包含的数据是以下脚本的 Base64
编码版本：
Documents contained within `      data:     ` URLs do not need to be
base64 encoded. For example, you can embed the JavaScript directly in
the URL as follows, but base64 encoding can often help you bypass XSS
filters:
数据URL中包含的文档无需进行base64编码。例如，您可以将JavaScript直接嵌入URL中，但base64编码通常可以帮助您绕过XSS过滤器。
    data:text/html,
You can utilize these URLs to trigger XSS when a site allows URL input
from users. A site might allow the user to load an image by using a URL
and use it as their profile picture, like this:
当一个网站允许用户输入URL时，你可以利用这些URL触发XSS攻击。一个网站可能允许用户使用URL加载图片并将其作为他们的个人资料图片，如下所示：
    https://example.com/upload_profile_pic?url=IMAGE_URL
The application will then render a preview on the web page by inserting
the URL into an `           ` tag. If you insert a JavaScript or
data URL, you can trick the victim's browser into loading your
JavaScript code:
应用程序将通过将URL插入到\标记中，在Web页面上呈现预览。如果您插入JavaScript或数据URL，则可以欺骗受害者的浏览器加载您的JavaScript代码：
There are many more ways to execute JavaScript code to bypass XSS
protection. You can find more example payloads on PortSwigger at
[https://portswigger.net/web-security/cross-site-scripting/cheat-sheet/](https://portswigger.net/web-security/cross-site-scripting/cheat-sheet/){.LinkURL}
. Different browsers also support different tags and event handlers, so
you should always test by using multiple browsers when hunting for XSS.
绕过XSS保护的执行JavaScript代码的方法还有很多种。您可以在PortSwigger上找到更多示例负载，网址为https://portswigger.net/web-security/cross-site-scripting/cheat-sheet/。不同的浏览器也支持不同的标签和事件处理程序，因此在寻找XSS时，您应该始终使用多个浏览器进行测试。
#### Closing Out HTML Tags {#c06.xhtml#h3-501546c06-0002}
When inserting an XSS payload, you'll often have to close out a previous
HTML tag by including its closing angle bracket. This is necessary when
you're placing your user input inside one HTML element but want to run
JavaScript using a different HTML element. You have to complete the
previous tag before you can start a new one to avoid causing a syntax
error. Otherwise, the browser won't interpret your payload correctly.
For example, if you're inserting input into an `           ` tag,
you need to close out the `           ` tag before you can start a
`           ` tag. Here is the original `           ` tag
with a placeholder for user input:
在插入 XSS 载荷时，通常必须通过包含其闭合角括号来关闭先前的 HTML
标签。当您将用户输入放入一个 HTML 元素中但希望使用另一个 HTML 元素运行
JavaScript
时，这是必要的。在开始新标签之前，必须完成先前的标签，以避免导致语法错误。否则，浏览器不会正确解释您的有效载荷。例如，如果您将输入插入到
\ 标签中，则需要在开始 \ 标签之前关闭 \
标签。以下是具有用户输入占位符的原始 \ 标签：
[ ]{#c06.xhtml#Page_124 .pagebreak title="124"} To close out the tag,
your payload has to include the ending of an `           ` tag
before the JavaScript. The payload might look like this:
为了关闭标签，您的负载必须包括JavaScript之前的\标签的结尾。有效负载可能如下所示：
    "/>
When injected into the `           ` tag, the resulting HTML will
look like this (with the injected portion in bold):
当它被注入到\标签中时，生成的HTML将会看起来像这样（被注入的部分是粗体）：
    ">
This payload closes the string that was supposed to contain the user
input by providing a double quote, then closes the `           `
tag with a tag ending in `      />     ` . Finally, the payload injects
a complete script tag after the `           ` tag.
此负载通过提供一个双引号关闭原本应包含用户输入的字符串，然后使用以/\>结束的标签关闭\标签。最后，在\标签之后注入完整的\标签。
If your payload is not working, you can check whether your payload
caused syntax errors in the returned document. You can inspect the
returned document in your proxy and look for unclosed tags or other
syntax issues. You can also open your browser's console and see if the
browser runs into any errors loading the page. In Firefox, you can open
the console by right-clicking the page and choosing **Inspect Element**
[ ▶ ]{.MenuArrow} **Console** .
如果您的有效载荷无法工作，请检查返回文档中是否存在语法错误引起的问题。您可以在代理中检查返回文档并查找未封闭标签或其他语法问题。您还可以打开浏览器的控制台，查看浏览器是否遇到任何加载页面的错误。在
Firefox
中，您可以通过右键单击页面并选择"检查元素"▶"控制台"来打开控制台。
You can find more common XSS payloads online. [Table
6-1](#c06.xhtml#table6-1){#c06.xhtml#tableanchor6-1} lists some
examples.
你可以在网上找到更常见的XSS负载。表6-1列出了一些例子。
```{=html}
```
```{=html}
```
[Table 6-1]{#c06.xhtml#table6-1} : Common XSS Payloads
表 6-1：常见的 XSS 载荷
```{=html}
```
  **Payload**                                                **Purpose**
  ---------------------------------------------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  `                   `             This is the most generic XSS payload. It will generate a pop-up box if the payload succeeds.
  `                   `      This payload loads JavaScript code within an iframe. It's useful when `                   ` tags are banned by the XSS filter.
  `                   `                This payload is useful when your input string can't contain the term *script* . It inserts an HTML element that will run JavaScript automatically after it's loaded.
  `          ">         `      This payload closes out the previous tag. It then injects an `                   ` tag with an invalid source URL. Once the tag fails to load, it will run the JavaScript specified in the `          onerror         ` attribute.
  `          alert(1)test         `     This payload inserts a link that will cause JavaScript to execute after a user hovers over the link with their cursor.
  `                   `   This payload causes the browser to load and run an external script hosted on the attacker's server.
```{=html}
```
Hackers have designed many more creative payloads. Search *XSS payloads*
online for more ideas. That said, taking a long list of payloads and
trying them one by one can be time-consuming and unproductive. Another
way of approaching manual XSS testing is to insert an *XSS polyglot* , a
type of XSS payload that executes in multiple contexts. For example, it
will execute [ ]{#c06.xhtml#Page_125 .pagebreak title="125"} regardless
of whether it is inserted into an `           ` tag, a
`           ` tag, or a generic `           ` tag and can
bypass some XSS filters. Take a look at this polyglot payload published
by EdOverflow at
[https://polyglot.innerht.ml/](https://polyglot.innerht.ml/){.LinkURL} :
黑客设计了许多更有创意的有效负载。在线搜索XSS有效负载以获取更多想法。话虽如此，一个一个地尝试长列表的有效负载可能耗费时间且无效。手动测试XSS的另一种方法是插入XSS多语言，这是一种在多个上下文中执行的类型的XSS有效负载。例如，它将在无论是插入到\标记、\标记还是通用的\标记中执行，并可以绕过一些XSS过滤器。请查看EdOverflow在https://polyglot.innerht.ml/上发布的这个多语言有效负载：
    javascript:"/*\"/*`/*' /*
    -->&lt;svg onload=/*
The details of this payload are beyond the scope of the book, but it
contains multiple ways of creating an XSS---so if one method fails,
another one can still induce the XSS.
本书不涉及此有效载荷的细节，但它包含多种创建XSS的方法-因此，如果一种方法失败，另一种方法仍然可以诱发XSS。
Another way of testing for XSS more efficiently is to use generic test
strings instead of XSS payloads. Insert a string of special HTML
characters often used in XSS payloads, such as the following:
`      >'
\'\<"//：= ;
!\--。注意应用程序转义哪些字符以及哪些直接呈现。然后，您可以从您知道应用程序未正确净化的字符构建测试XSS负载。
Blind XSS flaws are harder to detect; since you can't detect them by
looking for reflected input, you can't test for them by trying to
generate an alert box. Instead, try making the victim's browser generate
a request to a server you own. For example, you can submit the following
payload, which will make the victim's browser request the page */xss* on
your server:
\"盲目的XSS漏洞更难以检测；因为您无法通过寻找反射的输入来检测它们，所以您无法尝试生成警报框来测试它们。相反，尝试使受害者的浏览器生成请求并发送至您拥有的服务器。例如，您可以提交以下有效负载，这将使受害者的浏览器请求您服务器上的页面/xss：\"
Then, you can monitor your server logs to see if anyone requests that
page. If you see a request to the path */xss* , a blind XSS has been
triggered! Tools like XSS Hunter (
[https://xsshunter.com/features](https://xsshunter.com/features){.LinkURL}
) can automate this process. We'll also talk more about setting up a
server to test for multiple types of vulnerabilities in [ Chapter 13
]{.xref itemid="xref_target_Chapter 13"} .
然后，您可以监视服务器日志以查看是否有人请求该页面。如果您看到对路径/xss的请求，则已触发盲目XSS！像XSS
Hunter（https://xsshunter.com/features）这样的工具可以自动化此过程。我们还将在第13章中更多地探讨设置服务器以测试多种类型漏洞的内容。
Finally, although hackers typically discover new XSS vectors manually, a
good way to automatically test a site for already-known XSS vectors is
through fuzzing. We'll talk about fuzzing and automatic bug finding in [
Chapter 25 ]{.xref itemid="xref_target_Chapter 25"} .
尽管黑客通常手动发现新的XSS向量，但自动测试已知的XSS向量的网站的好方法是通过模糊测试。我们将在第25章中讨论模糊测试和自动漏洞发现。
### Step 3: Confirm the Impact {#c06.xhtml#h2-501546c06-0008}
Check for your payload on the destination page. If you're using an alert
function, was a pop-up box generated on the page? If you're using a
`      location     ` payload, did your browser redirect you offsite?
在目的页面上检查您的有效载荷。如果您使用警报功能，页面上是否生成了弹出框？如果您使用位置有效载荷，您的浏览器是否将您重定向到外部网站？
Be aware that sites might also use user input to construct something
other than the next returned web page. Your input could show up in
future web pages, email, and file portals. A time delay also might occur
between when the payload is submitted and when the user input is
rendered. This situation is common in log files and analytics pages. If
you're targeting these, your payload might not execute until later, or
in another user's account. And certain XSS payloads will execute under
only certain contexts, such as when an admin is logged in or when the
user actively clicks, or hovers over, certain HTML elements. Confirm the
impact of the XSS payload by browsing to the necessary pages and
performing those actions.
请注意，网站可能会使用用户输入来构建除下一个返回的网页外的其他内容。您的输入可能会出现在未来的网页、电子邮件和文件门户中。提交有效负载和呈现用户输入之间也可能会出现时间延迟。这种情况在日志文件和分析页面中很常见。如果您的目标是这些页面，您的有效负载可能直到稍后，或在另一个用户的帐户中才会执行。某些
XSS 负载仅在特定上下文中执行，例如管理员登录时或用户主动单击或悬停在某些
HTML 元素上时。浏览必要页面并执行这些操作，以确认 XSS 负载的影响。
## [ ]{#c06.xhtml#Page_126 .pagebreak title="126"} Bypassing XSS Protection {#c06.xhtml#h1-501546c06-0005}
Most applications now implement some sort of XSS protection in their