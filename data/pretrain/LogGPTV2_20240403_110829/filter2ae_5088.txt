# 如何通过滥用SSL/TLS绕过Web应用防火墙(WAF)

##### 译文声明
本文为翻译文章，原文来源：0x09al.github.io。译文仅供参考，具体内容和含义以原文为准。

## 概述
近年来，随着越来越多的关键服务被开发成Web应用程序，Web安全已成为信息安全领域的重要话题。除了遵循良好的开发标准外，开发者还应充分考虑其安全性。Web应用防火墙（WAF）是一种七层防火墙，用于检查Web流量并防范攻击。本文将介绍一种有趣的绕过WAF的方法，这是我在最近的一次WAF代码审计工作中发现的。

## 漏洞成因
在加入一家公司后，我参与了某款WAF产品的部署测试工作。出于保密需要，我不会透露公司和产品的名称。在测试过程中，我发现了一种滥用SSL密码的方式。当我首次登录WAF时，收到了“不受支持的SSL密码”的警告。这引起了我的注意，随后我开始查阅产品文档，找到了所有受支持的SSL密码。在此之前，我想先简要介绍一下SSL连接的工作原理。

### SSL握手过程
1. **ClientHello/ServerHello阶段**：
   - 客户端发送包含所需信息（如密码套件和支持的SSL/TLS版本）的`ClientHello`消息。
   - 服务器使用`ServerHello`消息响应，其中包含客户端所需的类似信息，并返回所使用的密码套件和SSL版本。

2. **证书交换**：
   - 服务器向客户端发送SSL证书，客户端验证证书后继续连接。

3. **密钥交换**：
   - 服务器和客户端交换密钥，用于加密和解密数据。

## 攻击思路
基于上述原理，我想到如果使用“不受支持的”SSL加密方式初始化与支持该密码的Web服务器的连接，那么WAF可能无法识别攻击行为，因为它无法监测到数据。因此，我查阅了WAF厂商的文档，列出了所有受支持的SSL加密方式：

### SSLv3
- `SSL_RSA_WITH_NULL_MD5`
- `SSL_RSA_WITH_NULL_SHA`
- `SSL_RSA_WITH_RC4_128_MD5`
- `SSL_RSA_WITH_RC4_128_SHA`
- `SSL_RSA_WITH_DES_CBC_SHA`
- `SSL_RSA_WITH_3DES_EDE_CBC_SHA`
- `SSL_RSA_EXPORT_WITH_RC4_40_MD5`
- `SSL_RSA_EXPORT_WITH_DES40_CBC_SHA`

### TLS/1.0-1.2
- `TLS_RSA_WITH_NULL_SHA256`
- `TLS_RSA_WITH_AES_128_CBC_SHA`
- `TLS_RSA_WITH_AES_256_CBC_SHA`
- `TLS_RSA_EXPORT1024_WITH_RC4_56_MD5`
- `TLS_RSA_EXPORT1024_WITH_RC4_56_SHA`
- `TLS_RSA_WITH_AES_128_CBC_SHA256`
- `TLS_RSA_WITH_AES_256_CBC_SHA256`
- `TLS_RSA_WITH_RC4_128_MD5 = { 0x00, 0x04 }`
- `TLS_RSA_WITH_RC4_128_SHA = { 0x00, 0x05 }`
- `TLS_RSA_WITH_DES_CBC_SHA = { 0x00, 0x09 }`

接下来是确定Web服务器支持的SSL加密方式。为此，我使用了`sslscan`工具，因为它易于安装且能提供大量详细信息。

```bash
pwn@thinkpad:~$ sudo apt install sslscan
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following NEW packages will be installed:
  sslscan
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 26,7 kB of archives.
After this operation, 81,9 kB of additional disk space will be used.
Get:1 http://al.archive.ubuntu.com/ubuntu bionic/universe amd64 sslscan amd64 1.11.5-rbsec-1.1 [26,7 kB]
Fetched 26,7 kB in 0s (73,8 kB/s)  
Selecting previously unselected package sslscan.
(Reading database ... 177002 files and directories currently installed.)
Preparing to unpack .../sslscan_1.11.5-rbsec-1.1_amd64.deb ...
Unpacking sslscan (1.11.5-rbsec-1.1) ...
Processing triggers for man-db (2.8.3-2) ...
Setting up sslscan (1.11.5-rbsec-1.1) ...
pwn@thinkpad:~$ sslscan http://target/ | grep Accept
```

运行上述命令后，将列出Web服务器支持的SSL/TLS版本和加密方式。通过比较`sslscan`的结果和产品文档中的内容，可以发现Web应用程序防火墙不支持但Web服务器支持的一些加密方式。

例如，Web服务器支持`ECDHE-RSA-AES256-SHA`，但WAF并不支持。为了验证这一理论，我创建了一个WAF规则，当请求路径为`/ssl-cipher-test`时阻止请求。理论上，访问这一路径时，WAF应该会阻止请求。然而，我们可以通过指定客户端的加密方式来绕过防火墙。使用`curl`命令的`--ciphers`选项指定特定的加密方式，如下所示：

```bash
pwn@thinkpad:~$ curl --ciphers ECDHE-RSA-AES256-SHA https://waf-test.lab.local/ssl-cipher-test
  HELLO 
  Bypass worked
pwn@thinkpad:~$
```

从响应中可以看到，Web应用程序防火墙被成功绕过。

## 总结
在发表此文章之前，我曾计划编写一个扫描程序来查找所有支持的加密方式，并找到一种能够绕过防火墙的加密方式，然后启动代理监听器，使用该加密方式转发所有请求。由于时间限制，这项工作尚未完成。如果大家感兴趣，也可以自行开发这样的利用工具。

## 参考文献
[1]   
[2]   
[3]

审核人：yiwang 编辑：边边