data structure. Each instance contains the group’s name, its public
key (used to seal the cryptographic capabilities and hashes of ﬁles
in the group) and its private key (used for unsealing those capabil-
ities and hashes). In addition it contains a hashtable of pointers to
the meta-data of the group’s members, which is indexed by the full
path of the member’s location in the ﬁlesystem.
Finally, the Resources data structure contains two hashtables. The
ﬁrst is indexed by the names of protection groups, associating the
group name with a pointer to the group’s meta-data, from which
a list of all member ﬁles may be extracted. This is used when a
group is to be protected, since each member’s decrypted and pris-
tine copies must be erased if conﬁdentiality is to be guaranteed.
The second hashtable is indexed by the full path of a ﬁle. Upon
being queried about a ﬁle, it returns the meta-data of the group to
which the ﬁle belongs.
7.2 Group Manager
The GroupManager is a tool for the administrator to manually
manage the protection status of ﬁles. It performs all operations on
a groups database which stores all the meta-data associated with all
the ﬁles of all protection groups. To make changes to this database,
a password is required. By maintaining the meta-data of the virtual
layer in this manner, it is possible to have multiple groups databases
and switch between them to institute a different protection policy.
We describe below the operations that may be performed using the
GroupManager.
All operations require a password since they all read or write the
groups database. The password is used to create a symmetric key
which is used for decryption of the groups database when it is being
read and encryption when it is being written. The operations must
also specify the type of operation by passing a mode parameter to
the GroupManager, and the ﬁle in which the groups database is
stored.
7.2.1 Capabilities File
Since the runtime system requires transparent access to the meta-
data, the GroupManager can be use to generate a capabilities ﬁle
which is not password protected using an output operation. During
the course of execution, this capabilities ﬁle will be manipulated
by the runtime since it needs to update the cryptographic hashes
(used for integrity checks) of ﬁles that have been written to. To
allow the groups database to reﬂect these changes, the content of
a capabilities ﬁle can be transferred to a groups database using the
input operation.
7.2.2 Group Listing
For convenience, the groups database can be interrogated with the
list operation. If a speciﬁc group name is passed as a parameter,
then the ﬁles which are a member of the group (if any) are listed.
Alternatively, if no parameter is passed, then the list of currently
deﬁned protection groups is generated and emitted.
7.2.3 Altering Membership
Finally, a ﬁle may be added to a protection group with the add op-
eration by specifying its current location in the ﬁlesystem. If the
ﬁle has previously been added, the request will not alter the state
of the meta-data. Files may not be added to more than one pro-
tection group. Files that would be members of the intersection of
protection groups should be combined into a new, separate protec-
tion group of their own.
If the protection group does not exist, it is dynamically created,
including a pair of public and private keys for sealing and unsealing
its members’ capabilities and hashes. A hash of the plain ﬁle is
computed before encryption and is sealed with the group’s public
key. A new cryptographic capability (symmetric key) is generated
for each ﬁle that is added. The ﬁle is encrypted with this key, after
which the key is sealed with the group’s public key.
The remove operation can be used to remove a ﬁle from a protec-
tion group of which it is currently a member. The ﬁle is decrypted
using its cryptographic capability retrieved by unsealing it with the
group’s private key. Similarly, the ﬁle’s integrity is veriﬁed by com-
puting its hash and comparing it to the one stored in the meta-data
(after unsealing the hash with the group’s private key). All associ-
ated meta-data is then deleted. If the ﬁle was the only member of
the protection group, then the group and its associated meta-data
are also deleted.
7.3 Capability Manager
7.3.1 Platform
We implemented the CapabilityManager as a modiﬁcation of Sun’s
Java Runtime Environment. The underlying implementation of all
classes that provide an interface to ﬁles is through the use of the
java.io.FileInputStream and java.io.FileOutputStream classes.
Our implementation hence instruments these two classes’ construc-
tors and close() methods. (Version 1.4 of the Java Runtime Envi-
ronment introduced a new subsystem for non-blocking input and
output, which accesses the ﬁlesystem through native virtual ma-
chine calls. RICE does not support manipulation of ﬁles using the
java.nio subsystem.)
In principle, however, the design of the CapabilityManager sup-
ports the augmentation of multiple classes, not just the java.io.-
FileInputStream and java.io.FileOutputStream classes. This is
because the only state that is stored in the class which invokes the
CapabilityManager is the name of the ﬁle used in the constructor
so that it can be passed back to the CapabilityManager after a ﬁle
is closed to allow the ﬁle to be re-protected. Hence, adding support
to new classes only requires the addition of a single ﬁeld to each
and the instrumentation of the constructors and close() methods.
7.3.2 Initialization and Committal
The CapabilityManager takes two parameters. The ﬁrst is the ca-
pabilities ﬁle referred to in Section 7.2. All meta-data for the virtual
layer is stored and manipulated in this ﬁle. The second parameter is
a location on disk where deltas are stored temporarily after they are
computed for ﬁles that are modiﬁed by writes. They are transferred
from this location to a remote node by an independent process.
When the runtime environment starts, the ﬁrst time either a ﬁle read
or write operation occurs, an attempt is made to load the Capabili-
tyManager. If either required parameter is not provided or there is
an error, the system will run without the CapabilityManager and
ﬁles that are members of protection groups will only be accessi-
ble in the encrypted form. During initialization, the virtual layer is
populated with meta-data read in from the capabilities ﬁle.

While the system is operating, if at any point all the ﬁles opened
by applications are closed, the meta-data from the virtual layer is
committed to the capabilities ﬁle. This choice allows the meta-data
to be committed in a coherent state and assures that it is written out
before the runtime shuts down.
7.4 Opening a File
When an application constructs a class that provides access to the
ﬁlesystem, a call is made to the virtual machine’s native open()
method. We introduce code in the constructors to pass the ﬁlename
as a parameter to the CapabilityManager’s unsealFile() method.
The CapabilityManager inspects Resources’ hashtable of all pro-
tected objects and determines if the ﬁle in question is being man-
aged by RICE. If it is not, it simply returns the same ﬁlename. The
virtual machine’s native open() method is invoked with the ﬁlename
as it would in the absence of the CapabilityManager.
If the CapabilityManager determines that the ﬁle is being man-
aged by RICE, it looks up the ObjectMetaData for the ﬁle. With
this it is able to check whether this ﬁle has been previously opened
either by any executing thread (including the current one). If it has
not been opened, then a check is done to see if the ﬁle’s protection
group’s private key is available. If it is, then it is used to decrypt
the ﬁle’s cryptographic capability and sealed hash. The capability
is used to decrypt the actual ﬁle, whose hash is computed and com-
pared to the unsealed hash. If the hashes do not match the integrity
check is deemed to have failed and is ﬂagged. In addition a pristine
copy of the ﬁle is made. The decrypted ﬁle is stored in a temporary
location and it is this location that is returned by the Capability-
Manager. If the CapabilityManager found that the ﬁle had been
opened, then a decrypted ﬁle’s location would already be present
in the ObjectMetaData and this would be returned. In either case,
the returned value is used as the parameter when calling the virtual
machine’s native open() method.
Since the CapabilityManager itself uses the ﬁlesystem, we intro-
duce a new constructor with an extra parameter. The parameter is
used to determine whether the CapabilityManager will be used
when opening the ﬁle. The standard constructor also calls the new
constructor, passing it a value that indicates the CapabilityMan-
ager should be used. This is transparent to applications (unless
they use reﬂection and depend on the ﬁelds stored in the class).
7.5 Closing a File
When an application ﬁnishes using a ﬁle, it invokes the close()
method of the class with which it gained access to the ﬁle. This may
be java.io.FileInputStream, java.io.FileOutputStream or one of
the classes which in turn use these classes, such as java.io.FileRe-
ader or java.io.FileWriter, to access ﬁles. We modify the close()
method, allowing the normal operation to complete and then intro-
duce a call to the CapabilityManager’s sealFile() method. Two
parameters are passed, which are the ﬁlename and the comput-
eDelta value which signiﬁes whether the ﬁle was opened for read-
ing or writing. The CapabilityManager inspects the relevant Re-
sources hashtable to check if the ﬁle was protected by RICE. If not,
it returns silently.
A count is maintained in each ﬁle’s ObjectMetaData to keep track
of how many instances of a ﬁle have been opened. Each time a ﬁle
is opened, the count is increased and each time a ﬁle is closed, it
is decreased. If this count reaches zero, no application is currently
using the ﬁle. When this occurs, the CapabilityManager checks a
ﬂag to see if any instance of the ﬁle had been opened for writing.
0
If not, then the decrypted version and pristine copy of the ﬁle are
both deleted.
If the CapabilityManager found that the ﬁle had been opened for
writing, it needs to commit the changes. It must ﬁrst check to see
if the ﬁle’s protection group’s public key exists. It then computes
the delta of the ﬁle as the difference between the pristine copy and
the current state of the unencrypted version. It computes the hash of
both the ﬁle as well as the delta and seals each hash with the group’s
public key. The sealed hash of the ﬁle is stored in the ﬁle’s Object-
MetaData, while the delta and its hash are written out to a location
calculated as a function of the ﬁlename, it’s currentCheckpoint and
the parameter passed to the CapabilityManager at initialization.
The currentCheckpoint is then incremented.
Each concurrent instance of a ﬁle that is opened is associated with
a unique token which is stored in the idempotency set. When a ﬁle
is closed, a check is performed to see if the token passed in as a
parameter is in the idempotency set. If it is not, then this instance
of the ﬁle was previously closed and the call is ignored, making
close() an idempotent operation as required by conventional seman-
tics. In addition, unauthorized sealing of the ﬁle is prevented since
the sealFile() operation requires that the same token be passed as
a parameter as the one that was passed to the corresponding un-
sealFile() operation that was invoked when opening the ﬁle. This
assumes that the choice of the token is cryptographically random.
7.6 Runtime Protection
When the system is running, if an intrusion response engine de-
termines that a group is under threat, it can opt to use RICE to
cryptographically remove either write access or both read and write
access.
To remove write access, it need only delete the protection group’s
public key. Once this is done, ﬁles can still be written on the local
ﬁlesystem, but the hashes of the new ﬁles and the deltas computed
can not be sealed with the public key. When a system is investi-
gated after a penetration, the changes that have not been signed can
be deleted, restoring the last signed versions. In this manner, the
ﬁlesystem can be restored to a state where all unauthorized writes
are left out.
To remove read access, the response component only needs to in-
voke the disable() method and delete the private key used to unseal
cryptographic capabilities. The disable() method iterates through
the protection group’s member’s meta-data, deleting any unencrypted
and pristine ﬁles that are deﬁned. Once this is done, if a penetration
occurs, there is no means (short of brute force key search) to gain
access to the protected ﬁles (modulo covert channels such as the
magnetic remanence of data).
7.7 Re-enabling Access
To re-enable access to a group, the response component can call the
enable() method. In this case, the group’s name is added to a set.
When an attempt is made to access any of the ﬁles in the set, the
system will attempt to authenticate the user manually at the con-
sole. If it succeeds all groups in the set will be re-enabled. The use
of protection groups coupled with the process of combining mul-
tiple protection groups’ re-authentication minimizes the negative
impact on usability.
Figure 2: Attack exploiting an access validation error.
Figure 3: Attack exploiting an exceptional condition handling
error.
8. EVALUATION
8.1 Security Beneﬁts
RheoStat [5] is a prototype detection and response engine. It uses
a formal risk framework implemented in the module RiskManager
to effect automated response on a host. Its model calculates the risk
based on the threats, exposure to the threats and consequences of
the threats. Threat levels are estimated using information about the
extent to which intrusion signatures have been matched. System
vulnerability is calculated based on the exposure allowed by the
system’s current access control conﬁguration.
RheoStat can manage the risk by reconﬁguring the access con-
trol conﬁguration. In the following experiments, it is modiﬁed to
manage the risk by invoking RICE’s protective measures. When it
deems a group of ﬁles likely to be affected by an intrusion, it in-
vokes RICE’s disable() command for the relevant group. As can be
seen from the following experiments, the response is rapid, needing
only a few system events for the data protection to be effected.
The NIST ICAT database [7] contains information on over 6, 200
vulnerabilities in application and operating system software from
a range of sources. These are primarily classiﬁed into seven cate-
gories. Based on the database, we have constructed three attacks,
with each one illustrating the exploitation of a vulnerability from a
different category. In each case, the system component which in-
cludes the vulnerability is a Java servlet that we have created and
installed in the W3C’s Jigsaw web server (version 2.2.2) [8]. We
describe below a scenario that corresponds to each attack, includ-
ing a description of the vulnerability that it exploits, the intrusion
signature used to detect it and the way RheoStat responds. The
global risk tolerance threshold is set at 20.
Access Validation Error
An access validation error is a fault in the implementation of the
access control mechanism. Although the access control has been
conﬁgured correctly, it can be bypassed. In our example, the servlet
implements logic to restrict access to certain documents based on
the source IP address. However, if a non-canonical version of the
path is used, the servlet fails to implement the restriction on the
source IP address. This access control implementation ﬂaw allows
the policy to be violated despite a correct conﬁguration.
When the following sequence of events is detected, an attack that
exploits this vulnerability is deemed to have occurred. First, the
web server accepts a connection to port 8001 (the default port that
Jigsaw listens on). Second, it serves the speciﬁc HTML document
which includes the form which must be ﬁlled to request a ﬁle.
Third, the server accepts another connection. Fourth, it executes
the servlet that veriﬁes if the ﬁle can be served to the client, based
on its IP address. Fifth, the decision to deny the request is logged.
Sixth, despite the choice to deny the request, the ﬁle is served (due
to the non-canonical path not being classiﬁed correctly). The events
must all occur within the pre-match timeout of the signature, which
is 1 minute.
In Figure 2, event 6 and events 8 − 12 correspond to this signature.
Events 1 − 5 and event 7 are matches of other signatures which