### 漏洞分析与CodeQL查询优化

#### 1. 背景
在分析Log4jShell漏洞时，发现CodeQL的分析结果与实际运行过程存在差异。具体来说，在`MutableLogEvent#setMessage`方法中，CodeQL认为`reusable.formatTo`会调用到`ReusableObjectMessage`，但实际运行过程中，由于`MessageFactory`创建`Message`对象时默认创建的是`ReusableSimpleMessage`对象，因此会执行到`ReusableSimpleMessage#formatTo`方法。

#### 2. 问题分析
- **CodeQL分析不完整**：CodeQL已经分析到了`createEvent`方法，但在处理返回的`LogEvent`对象时，没有将其作为污点进行进一步分析。
- **解决方案**：通过自定义`isAdditionalTaintStep`函数，将`ReusableLogEventFactory#createEvent`的第六个参数`Message`和`LoggerConfig#log`的第一个参数`logEvent`连接起来。

#### 3. 自定义`isAdditionalTaintStep`函数
```java
override predicate isAdditionalTaintStep(DataFlow::Node fromNode, DataFlow::Node toNode) {
    exists(MethodAccess ma, MethodAccess ma2 |
        ma.getMethod().getDeclaringType().hasQualifiedName("org.apache.logging.log4j.core.impl", "ReusableLogEventFactory") 
        and ma.getMethod().hasName("createEvent") 
        and fromNode.asExpr() = ma.getArgument(5) 
        and ma2.getMethod().getDeclaringType().hasQualifiedName("org.apache.logging.log4j.core.config", "LoggerConfig")  
        and ma2.getMethod().hasName("log") 
        and ma2.getMethod().getNumberOfParameters() = 2 
        and toNode.asExpr() = ma2.getArgument(0)
    )
}
```

#### 4. 完整的CodeQL查询代码
```java
/**
 * @name Tainttrack Context lookup
 * @kind path-problem
 */
import java
import semmle.code.java.dataflow.FlowSources
import DataFlow::PathGraph

class Context extends RefType {
    Context() {
        this.hasQualifiedName("javax.naming", "Context")
        or
        this.hasQualifiedName("javax.naming", "InitialContext")
        or
        this.hasQualifiedName("org.springframework.jndi", "JndiCallback")
        or
        this.hasQualifiedName("org.springframework.jndi", "JndiTemplate")
        or
        this.hasQualifiedName("org.springframework.jndi", "JndiLocatorDelegate")
        or
        this.hasQualifiedName("org.apache.shiro.jndi", "JndiCallback")
        or
        this.getQualifiedName().matches("%JndiCallback")
        or
        this.getQualifiedName().matches("%JndiLocatorDelegate")
        or
        this.getQualifiedName().matches("%JndiTemplate")
    }
}

class Logger extends RefType {
    Logger() {
        this.hasQualifiedName("org.apache.logging.log4j.spi", "AbstractLogger")
    }
}

class LoggerInput extends Method {
    LoggerInput() {
        this.getDeclaringType() instanceof Logger
        and
        this.hasName("error")
        and
        this.getNumberOfParameters() = 1
    }

    Parameter getAnUntrustedParameter() { result = this.getParameter(0) }
}

predicate isLookup(Expr arg) {
    exists(MethodAccess ma |
        ma.getMethod().getName() = "lookup"
        and
        ma.getMethod().getDeclaringType() instanceof Context
        and
        arg = ma.getArgument(0)
    )
}

class TainttrackLookup extends TaintTracking::Configuration {
    TainttrackLookup() { 
        this = "TainttrackLookup" 
    }

    override predicate isSource(DataFlow::Node source) {
        exists(LoggerInput loggerMethod |
            source.asParameter() = loggerMethod.getAnUntrustedParameter())
    }

    override predicate isAdditionalTaintStep(DataFlow::Node fromNode, DataFlow::Node toNode) {
        exists(MethodAccess ma, MethodAccess ma2 |
            ma.getMethod().getDeclaringType().hasQualifiedName("org.apache.logging.log4j.core.impl", "ReusableLogEventFactory") 
            and ma.getMethod().hasName("createEvent") 
            and fromNode.asExpr() = ma.getArgument(5) 
            and ma2.getMethod().getDeclaringType().hasQualifiedName("org.apache.logging.log4j.core.config", "LoggerConfig")  
            and ma2.getMethod().hasName("log") 
            and ma2.getMethod().getNumberOfParameters() = 2 
            and toNode.asExpr() = ma2.getArgument(0)
        )
    }

    override predicate isSink(DataFlow::Node sink) {
        exists(Expr arg |
            isLookup(arg)
            and
            sink.asExpr() = arg
        )
    }
} 

from TainttrackLookup config, DataFlow::PathNode source, DataFlow::PathNode sink
where
    config.hasFlowPath(source, sink)
select sink.getNode(), source, sink, "unsafe lookup", source.getNode(), "this is user input"
```

#### 5. 总结
- **CodeQL挖洞效率**：CodeQL确实可以高效地辅助挖掘漏洞，并且官方提供了许多针对不同类型漏洞的审计规则。
- **待解决问题**：
  - **特定框架的Source点识别**：如何针对特定框架（如HTTP请求）发现可能作为Source的点。
  - **污点传播分析**：如何分析污点在何时会被打断并进行拼接。

通过以上优化和自定义规则，可以更准确地分析Log4j JNDI注入漏洞的调用链，并提高CodeQL在特定场景下的检测能力。