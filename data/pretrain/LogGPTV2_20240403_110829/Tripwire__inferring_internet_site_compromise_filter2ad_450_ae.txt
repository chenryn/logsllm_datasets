accounts where passwords have not been changed, one possibility is
that attackers are stockpiling the compromised accounts for later use
or sale. Another possibility is that attackers watch these accounts for
messages from sites such as banks that can be leveraged for direct
monetization.
7 DISCUSSION
Though just a means to an end for our study, automated account
registration is also potentially useful for others. We lead this section
with more details on our registration results, lessons learned, and
what would be required to further scale such a system.
Since a system like Tripwire must be robust against circumven-
tion, we follow with a discussion on what would be required of
an attacker to evade detection when compromising a site under
Tripwire-like surveillance. Finally, we end with a brief discussion of
what data and source we are making available.
7.1 Site eligibility
To evaluate what proportion of sites are even eligible for a Tripwire-
like system, we manually visited three sets of 100 sites from the
Alexa rankings, starting with Alexa ranks 1, 1,000, and 10,000, and
Table 4 shows the results. On average, 6.7% of the pages failed to
load, and 44.3% of pages rendered by default in a language other than
English. Nearly 13% of them did not support any web registration,
6While we did not check extensively for spoofed reverse DNS, several spot checks
suggested that reverse DNS either matched forward DNS or contained domains owned
by the owner information present in WHOIS.
IMC ’17, November 1–3, 2017, London, United Kingdom
DeBlasio et al.
Figure 3: The various outcomes of Tripwire’s registration attempts. The left and right thirds of the funnel are estimates, while the
middle corresponds to crawler-measured outputs.
Start
Rank
1
1,000
10,000
Average
100,000
Load
Failure
3%
9%
8%
Not
English
43%
37%
53%
No
Registration
7%
15%
16%
Ineligible
4%
6%
5%
Rest
43%
33%
18%
6.7%
44.3%
8%
43%
12.7%
29%
5.0% 31.3%
3%
17%
Table 4: Registration eligibility of sites as determined by 100-
site manual sample.
while 5% required a credit card or other information that Tripwire
is unable to provide. In the end, fewer than a third of the sites were
even plausible candidate sites for automated account registration.
One notable trend is the precipitous decline in the fraction of
sites with viable registration pages (from 43% in the top-100 to
18% at top-10,000).7 This trend does not affect the percentage of
load failures and non-English sites, indicating that sites become
decreasingly useful for registrations as one proceeds down the Alexa
ranking. Although we did not use them, search engines may be an
alternate source of sites to monitor.
Systematically, although we visited tens of thousands of sites
across the Alexa rankings, only a fraction of them were compatible
with our automated registration system. Figure 3 depicts the funnel
of website registration attempts starting from the full set of URLs
supplied to our automated account registration system on the left to
the resulting set of successfully registered accounts on the right.
We input sites to the crawler without any additional knowledge
about the sites other than URL and Alexa rank. The crawler ignores
non-English or otherwise ineligible sites. The first third of the figure
breaks down the reasons that our crawler is unable to register for an
account, which we estimate to be about 64% of cases (see Table 4).
Our crawler fails to find a registration page in about 69.2% of cases.
In a manual inspection of 181 of sites where it failed, we only found
valid registration pages on eight of them. This finding is consistent
7For added scope, we also manually visited another 100 pages starting at Alexa rank
100,000 with similar results as the top-10,000.
with an estimated false negative rate of around 5%, suggesting that if
a site is completely ineligible for the current version of the crawler,
the crawler is unlikely to identify a registration page on that site.
Any study that relies upon registering accounts across many sites
likely has a notion of “high-value” sites, such as very popular sites.
Although we originally intended to solely use automated means for
registering accounts, in the end we augmented that process with
manual registrations for top-ranked Alexa sites (Section 5.1). We
consider the additional manual effort for high-value sites to be well
worth the cost since registrations need only occur once.
7.2 Extending the crawler
The middle third of Figure 3 visually depicts the outcomes from the
crawler (omitting the proportion in which no registration was possi-
ble). The final third shows the success outcome after accounting for
email verification and discounting the various categories according
to our success estimation methodology (Section 5.2.3). With the
present system, the automated success rate is roughly 20% even
when considering only eligible sites. What steps are necessary to
improve the success rate?
Non-English sites alone make up more than forty percent of all
sites, none of which are presently evaluated. Supporting multiple
languages would be the single greatest improvement to the crawler’s
coverage. More tuning could also go into the heuristics used by the
Tripwire crawler. Even with this and other improvements, however,
automated registration on arbitrary sites is a sufficiently ill-formed
problem that additional steps would be necessary.
Bot detection. In our manual study above, 19% of sites (37% of the
top-100) with registration forms used some kind of test to ensure the
registration form was being filled out by a human actor. If our crawler
recognizes that a field is asking for human validation, it defers to
third-party CAPTCHA-solving services (or, if available, a human
operator). Such solving services have non-trivial error rates [37], and
the crawler has no ability to handle interactive CAPTCHA services
like modern reCAPTCHA [19] or KeyCAPTCHA [13].
Multi-stage forms. Around 10% of sites with registration forms
that we tested have multi-step forms, in which a user completes a
portion of the form before being able to advance and complete the
44.3%Non-English12.7%No Registration~18.8%Success onEligible Sites47.2%Form Misidentiﬁcation +Multistage Forms6.7%Load Failure19.1%System Errors21.5%Requires Unavailable Info,Failed CAPTCHAs, orField Misidentiﬁcation12.2%System-estimatedSuccess(as understood by crawler)(manually measured)(estimated)36.2%Eligible63.8%Ineligible(of all sites submitted)(of eligible sites)Tripwire
IMC ’17, November 1–3, 2017, London, United Kingdom
remainder. Our crawler makes no attempt at handling these multi-
step forms, resulting in both failures to recognize the first page of
some registration forms (a ‘no form found’ result), and to fill out
subsequent pages (a ‘bad heuristics’/‘field missing’ result).
Form and field misidentification. A common failure mode for the
crawler is to misidentify the meaning of individual form fields or to
not recognize a given form as a registration form. Machine learning
techniques would likely more reliably identify such forms and fields
instead of heuristics.
Invalid identity assumptions. We chose usernames and passwords
based on common policies at sites, but a small number of sites have
password policies that have uncommon requirements (e.g., require
special characters). Our crawler makes no attempt at inferring these
policies, and since our usernames and passwords are created ahead
of time, we currently have little ability to correct for these cases.
7.3 Evading Tripwire
The results presented in this paper have the advantage that no system
like Tripwire (involving coordination between unrelated services to
detect compromise) has previously existed, and attackers are thus
unlikely to try to evade our detection. Future implementations of
a similar system will not have that luxury, thus it is worth a brief
discussion about what an informed attacker could do to evade Trip-
wire’s detection. In this subsection, we assume that, at a minimum,
an attacker knows that Tripwire exists, and generally how it works.
Avoiding Tripwire detection amounts to avoiding logging on to
an observed email account in Tripwire. An attacker may be able to
avoid this detection in a variety of ways, but each requires trade-
offs. Firstly, an attacker could compromise the user database of a
site not under our measurement. This is not so much an attack on
Tripwire, so much as it is an acknowledgement that a system like
Tripwire cannot have perfect coverage. Knowing what sites to attack
requires having compromised the Tripwire operator, and thus eva-
sion otherwise amounts to taking calculated risks on sites Tripwire
was unlikely to cover. An attacker could also avoid detection by not
attempting logins with the email provider, or by attempting to pick
and choose which accounts to check. The odds of detection are in-
versely proportional to the percentage of email accounts tested. If all
the attacker cares about is what approximate proportion of accounts
re-use their password for the corresponding email accounts (if, for
instance, the attacker was preparing the accounts for resale), then
perhaps testing only a small sample may be sufficient. Alternatively,
an attacker can also avoid detection by testing other accounts in lieu
of testing the email account (e.g., at an OSN). As mentioned earlier,
however, avoiding testing the credentials with the email provider
closes off a substantial opportunity for monetization.
If the email provider for Tripwire were known, an attacker could
choose to avoid checking accounts with that email provider. While
effective, we chose a prominent email provider in part because a
significant fraction of organic accounts on any service are likely to
use this email provider, and thus this strategy is not without cost. As
a happy side effect of our not disclosing our email provider partner,
attackers are also left to wonder whether they must avoid checking
all accounts from the largest email providers. Accounts with the
largest providers, however, likely account for a significant majority
of the accounts found in the breach.
An attacker may also attempt to determine specifically which
accounts belong to Tripwire-like systems. Were the attacker able
to determine the entire list of Tripwire accounts (for instance by
compromising the Tripwire operator or the email provider), they
would be able to form a complete blacklist of accounts to avoid, and
completely evade Tripwire’s detection. Provided that neither Trip-
wire’s operators nor the email provider are compromised, an attacker
must attempt to infer this information from signals associated with
the accounts.
As discussed in Section 4.1, usernames, passwords and other
identity information were chosen to look plausible, and thus hard to
identify as part of the Tripwire system. If an attacker has access to
information regarding initial registration, the attacker may be able
to deduce which accounts are ours based on registration IP address.
For our study, for ethical reasons and transparency, we registered for
accounts with IP addresses that were clearly owned by our institution,
but an operational deployment of Tripwire should use plausible user
IPs to avoid this technique as a detection mechanism.
7.4 Data and source availability
Tripwire uses a variety of heuristics to find and fill registration
forms, as well as to handle incoming email. All of these heuristics
are detailed in the source code for the crawler, which is available at
https://github.com/ccied/tripwire. In addition, we have provided an
anonymized version of the login data at the same URL. This data
consists of an entry for each login event. This record provides the ac-
count alias (e.g. ‘a1’), a timestamp (rounded to the day), /24 of the
accessing IP, and login method (e.g. ‘IMAP’). This anonymization
was chosen to balance the desires of transparency and protecting the
accounts in the Tripwire sample.
8 CONCLUSIONS
Website security is a critical problem whose personal and financial
impacts are continuing to grow. While preventing and containing
account compromise and disclosure are clearly of utmost impor-
tance, experience suggests that there will always be a risk that one
website compromise will lead to further exploits. We have shown
that this inevitable reality can be leveraged to passively monitor
for compromise at a wide range of sites and detect compromises
of which site operators are either unaware or unwilling to publicly
disclose. A major open question, however, is how much (probative,
but not particularly illustrative) evidence produced by an external
monitoring system like Tripwire is needed to convince operators to
act, such as notifying their users and forcing a password reset.
ACKNOWLEDGEMENTS
We thank our shepherd Theophilus Benson for his valuable guid-
ance, and the anonymous reviewers for their helpful feedback and
suggestions. We are also extremely grateful to our email provider
for their very generous assistance, and to Cindy Moore and Brian
Kantor for managing software and systems used in this project. This
work was supported in part by National Science Foundation grants
1237264 and 1629973, the Irwin Mark and Joan Klein Jacobs Chair
in Information and Computer Science, and by generous research, op-
erational and/or in-kind support via the UCSD Center for Networked
Systems (CNS).
IMC ’17, November 1–3, 2017, London, United Kingdom
DeBlasio et al.
REFERENCES
[1] Alexa Top 500 global sites. http://www.alexa.com/topsites.
[2] CA Civil Code Section 1798.80-1798.84. http://www.leginfo.ca.gov/cgi-bin/
displaycode?section=civ&group=01001-02000&file=1798.80-1798.84.
[3] Carbonite Accounts Targeted In Password Reuse Attack.
https:
//www.carbonite.com/en/cloud-backup/business/resources/carbonite-blog/
carbonite-password-attack/.
[4] Cluster of ‘megabreaches’ compromises a whopping 642 million passwords.
http://arstechnica.com/security/2016/05/cluster-of-megabreaches-compromise-
a-whopping-642-million-passwords/.
[5] DeCaptcher — CAPTCHA solving service, math CAPTCHA bypass, hard
CAPTCHA recognition. http://de-captcher.com.
[6] Defending Against Hackers Took a Back Seat at Yahoo, Insiders Say. http:
//www.nytimes.com/2016/09/29/technology/yahoo-data-breach-hacking.html.
[7] Fake Name Generator. http://fakenamegenerator.com.
[8] GitHub Security Update: Reused password attack. https://github.com/blog/
2190-github-security-update-reused- password-attack.
[9] GoToMyPC Password Issues: Incident Report for GoToMyPC System Status.
http://status.gotomypc.com/incidents/s2k8h1xhzn4k.
[10] Hackers selling 117 million LinkedIn passwords. http://money.cnn.com/2016/05/
[11] Have I Been Pwned — Pwned Websites.
https://haveibeenpwned.com/
19/technology/linkedin-hack/.
PwnedWebsites.
[20] WebKit. http://webkit.org.
[21] Yahoo Says Hackers Stole Data on 500 Million Users in 2014. http://www.nytimes.
com/2016/09/23/technology/yahoo-hackers.html.
[22] P. Bisht and V. Venkatakrishnan. XSS-GUARD: precise dynamic prevention of
cross-site scripting attacks. In International Conference on Detection of Intrusions
and Malware, and Vulnerability Assessment, pages 23–43. Springer, 2008.
[23] S. W. Boyd and A. D. Keromytis. SQLrand: Preventing SQL injection attacks. In
International Conference on Applied Cryptography and Network Security, pages
292–302. Springer, 2004.
[24] D. Canali, D. Balzarotti, and A. Francillon. The Role of Web Hosting Providers
in Detecting Compromised Websites. In Proceedings of the 22nd International
World Wide Web Conference, pages 177–188, 2013.
[25] B. Cheswick. An Evening with Berferd. In Proc. Winter USENIX Conference,
San Francisco, pages 20–24, 1992.
[12] [INFOGRAPHIC] Online Overload — It’s Worse Than You Thought. https:
//blog.dashlane.com/infographic-online-overload-its-worse- than-you-thought/.
[13] KeyCAPTCHA — Innovative Anti-Spam Solution. https://www.keycaptcha.com/.
[14] No
https://threatpost.com/
Password Reuse.
Simple
Fix
for
no-simple-fix-for-password-reuse/118536/.
[15] No wonder hackers have it easy: Most of us now have 26 different online accounts -
but only five passwords. http://www.dailymail.co.uk/sciencetech/article-2174274/
No-wonder-hackers-easy-Most-26- different-online-accounts-passwords.html.
[16] NSA disguised itself as Google to spy, say reports. https://www.cnet.com/news/
nsa-disguised-itself-as-google-to- spy-say-reports/.
[17] Online passwords: keep it complicated. https://www.theguardian.com/technology/
2012/oct/05/online-security- passwords-tricks-hacking.
[18] Quantcast — Top Ranking International Websites. https://www.quantcast.com/
[19] reCAPTCHA: Easy on Humans, Hard on Bots.
https://www.google.com/
top-sites.
recaptcha.
[26] L. Coleman. Hacked BitcoinTalk.org User Data Goes Up For Sale On
Dark Web. https://www.cryptocoinsnews.com/hacked-bitcointalk-org-user-data-
goes-up-for-sale-on-dark-web/, June 2016.
[27] A. Das, J. Bonneau, M. Caesar, N. Borisov, and X. Wang. The Tangled Web of
Password Reuse. In Proc. Network and Distributed System Security Symposium,
Feb. 2014.
[28] A. Doupé, L. Cavedon, C. Kruegel, and G. Vigna. Enemy of the State: A State-
In Proc. of the 21st USENIX
Aware Black-Box Web Vulnerability Scanner.
Security Symposium, pages 523–538, 2012.
[29] D. Florencio and C. Herley. A Large-scale Study of Web Password Habits. In
Proceedings of the 16th International World Wide Web Conference, pages 657–666,
2007.
[30] J. Fonseca, M. Vieira, and H. Madeira. Evaluation of Web Security Mechanisms
Using Vulnerability & Attack Injection. IEEE Transactions on Dependable and
Secure Computing, 11(5):440–453, 2014.
[31] S. Gaw and E. W. Felten. Password Management Strategies for Online Accounts.
In Proceedings of the Second Symposium on Usable Privacy and Security, pages
44–55, 2006.
[32] C. Herley and D. Florêncio. Protecting Financial Institutions from Brute-Force
Attacks. In S. Jajodia, P. Samarati, and S. Cimato, editors, Proceedings of the 23rd
International Information Security Conference, pages 681–685, 2008.
[33] A. Hidayat. PhantomJS. http://phantomjs.org.
[34] B. Ives, K. R. Walsh, and H. Schneider. The Domino Effect of Password Reuse.
Commun. ACM, 47(4):75–78, Apr. 2004.
[35] A. Juels and R. L. Rivest. Honeywords: Making Password-cracking Detectable.
In Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communi-
cations Security, pages 145–160, 2013.
[36] S. Kals, E. Kirda, C. Kruegel, and N. Jovanovic. SecuBat: A Web Vulnerability
Scanner. In Proceedings of the 15th International World Wide Web Conference,
pages 247–256, 2006.
[37] M. Motoyama, K. Levchenko, C. Kanich, D. McCoy, G. M. Voelker, and S. Savage.
Re: Captchas-understanding captcha-solving services in an economic context. In
USENIX Security Symposium, volume 10, page 3, 2010.
[38] J. Onaolapo, E. Mariconti, and G. Stringhini. What Happens After You Are
Pwnd: Understanding the Use of Leaked Webmail Credentials in the Wild. In
Proceedings of the Internet Measurement Conference, 2016.
[39] N. Perlroth and D. Gelles.
Russian Hackers Amass Over a Bil-
lion Internet Passwords.
http://www.nytimes.com/2014/08/06/technology/
russian-gang-said-to-amass-more- than-a-billion-stolen-internet- credentials.
html, August 2014.
[40] K. Soska and N. Christin. Automatically Detecting Vulnerable Websites Before
They Turn Malicious. In 23rd USENIX Security Symposium, pages 625–640, Aug.
2014.
[41] K. Thomas, D. Huang, D. Wang, E. Bursztein, C. Grier, T. J. Holt, C. Kruegel,
D. McCoy, S. Savage, and G. Vigna. Framing Dependencies Introduced by
Underground Commoditization. In Workshop on the Economics of Information
Security, 2015.
[42] M. Vasek and T. Moore. Identifying risk factors for webserver compromise. In
International Conference on Financial Cryptography and Data Security, pages
326–345, 2014.