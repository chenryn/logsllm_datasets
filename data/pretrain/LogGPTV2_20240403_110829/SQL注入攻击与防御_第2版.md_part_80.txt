Anthony Antester
Porsche 911
65000
Simon Sez
Citron C2
1500
Anthony Anteater
Oil
10
Anthony Anteater
Super Alamm
100
下列语句会自动分类从AnthonyAnteater顾客收到的订单，之后为Cost列执行SUM操作：
SELECT customer, SUM(cost) FROM orders WHERE customer = 'Anthony Anteater*
GROUP BY customer
10. ORDER BY 子句
ORDERBY子句用于对SELECT语句的查询结果按特定列进行排序，它接收一个列名或数
391
---
## Page 406
SQL注入攻击与防御（第2版）
字作为强制参数。可以添加ASC或DESC关键字将结果分别按升序或降序排列。下列SQL语
句从orders 表中选择cost列和 product列，并根据cost 列对结果进行降序排列：
SELECT cost,product FROM orders ORDER BY DESC
11.限制结果集
执行SQL注入攻击时，通常需要限制注入查询（例如，通过错误消息提取数据）返回的行数。
根据数据库平台的不同，从表中选择特定行的语法也各有差异。表11-3详细描述了从tblUsers
表中选择第1行和第5行数据的SQL语法。
表11-3限制结果集
平
台
查
选择第1行：
SELECT TOP 1 * FROM tb1Users
Microsoft SQL Server
选择第5行
  .      9
ORDER BY 1 ASC) RANDOMSTRING ORDER BY 1 DESC;
选择第1行
SELECT * FROM tb1Users LIMIT 1,1
MySQL
选择第5行
SELECT * FROM tb1Users LIMIT 5,1
从 tblUsers 表选择第1行中的 usemame 列：
SELECT username FROM (SELECT ROWNUM r, username
FROM tb1Users ORDER BY 1) WHERE r=1:
SELECT username FROM tblUsers WHERE rownum=1/
Oracle
从 tblUsers 表选择第 5 行中的 usemame 列;
SELECT username FROM (SELECT ROWNUM r, username
FROM tb1Users ORDER BY 1) WHERE r=5;
从 tbIUsers 表选择第 1 行中的 usemame 列：
SELECT username FROM tb1Users ORDER BY username
LIMIT 1 OFFSET 0;
PostgreSQL
从 tblUsers 表选择第 5 行中的 usemame 列：
SELECT username FROM tb1Users ORDER BY username
LIMIT 1 OFFSET 4;
对于其他数据库平台，请查阅供应商提供的文档。
392
---
## Page 407
第11章参考资料
11.3SQL注入快速参考
本节为利用SQL注入漏洞时用到的常见SQL查询和技术提供快速参考。我们首先介绍一
些用于识别数据库平台的技术，之后为各种常见的数据库平台提供SQL注入备忘单。本章末尾
11.3.1识别SQL注入漏洞
表11-4列出了试图识别SQL注入缺陷时常用的技术。其中任何一种方法都可以单独使用，
但是结合多种方法进行测试可以提高检测的精确性。
表11-4发现SQL注入缺陷
方法
描述
输入SQL元字符或并常、错误的数据类型，有可能产生数据库错误。
常见的测试用例包括在字符申字段中输入单引号（字符，或者在数值
字段中输入随机的字符串。
通常可以通过HTTP状态代码500，或者页面中描述性的错误消息来
识别这种数据库错误。提交异常数据并分析服务器响应中的下列字符
串，有助于识别 SQL 注入漏润：
Microsoft OLE DB Provider
ORA-
异常的输入是否会产生数据库
PLS
错误？
error in your SQL Syntax
SQL Error
80040E14
Incorrect Syntax near
SQLServer
Fai1ed MySQL
Unclosed Quotation Mark
ODBC Driver
JDBC Driver
SQL
ODBC
如果遇到了错误，修改输入的数据以分析错误，确定输入的数据是否
导致了SQL语法错误。例如，双倍使用单引号字符—如果一个引号
导致了错误，而两个引号没有产生错误，那么很有可能存在未发现的
SQL注入缺陷。
请注意，由错误数据类型导致的错误可以是预期的并具有正常的表现。
合法、正确的输入是否可以替换
例如，如果在需要数值的地方提供了字符串数据，那么很多应用程序将
等效的SQL表达式？
产生错误，这时应该进一步采用其他技术来确认是否存在SQL注入漏润。
在采用这种检测技术之前，判断所测试的输入对于服务器的响应是否
有影响是很重要的。例如，如果提供了一个数值，那么尝试使用另一
个不同的数值并确定是否产生了可度量且一致的差异。对于字符串值，
使用同一字符集，并将字符串值修改为一个相同长度的随机字符串，
然后观察应用程序的响应。如果对数据的修改并没有对页面长度、内
容或HTTP响应代码产生一致的差别，那么该技术不太可能成功。
393
---
## Page 408
SQL注入攻击与防御（第2版）
(续表）
方
法
描
数值数据
在这个例子中，我们将假定测试一个传递给ncws.pbp脚本的数值类型
的ID参数，下面两个请求产生了不同的响应，因此可以认为ID参数
是动态的，并且可以用于这种测试方法。
http://target/news,php?ID=1
http://target/news php?ID=2
在测试过程中，下一个步疆是提交一个SQL表达式，该表达式将被计
算为事先确定好的正确值（比如上面例子中的1和2）。然后将对每一个
表达式的响应与初始测试时的响应进行比较，以确定是否对该表达式
进行了计算。在这种类型的测试中，常用的SQL函数是ASCIIO，对
表达式应该返回值1（“2”的ASCII编码值是50)：
于所提供的ASCII字符，该函数将返回一个整数。因此，下面的SQL
51ASCII (2)
如果我们的输入被SQLServer以不安全的方式解析，那么下列请求应
该等价于原始的请求：
http: //target/news , php?ID=51-ASCII (2)
-
等价于ID=1
http: / /target/news , php?ID=52AsCII (2)
等价于ID=2
绝大多数主流数据库平台都支持ASCBO函数，包括 Microsof SQL
Server、Oracle、MySQL 和 PostgreSQL.
请使用类似的算术表达式来确认结果。
合法、正确的输入是否可以替换
字符串数据
等效的SQL表达式？
当处理字符申数据时，可以采用与评估数值参数类似的方法。与前面
的例子一样，第一步是从应用程序获取有效的值，并确定当改变该值
时服务器的响应也一致地产生差异。在本例中，我们假定下面的请求
参数值将产生不同的结果：
http://target/products.asp?catagory=shoes
http://target/products.asp?catagory=blahfoo
在测试字符申数据时，一种常用的策略是将字符申拆分为两个或多个
子串，然后再使用SQL语法在服务器端将这些子申连接起来。
要的附加说明是：对于字符串的连接，需要根据数据库平台的不同采
一个重
用不同的连接语法。由于我们可能事先知道是哪一种数据库服务器，
Microsof SQL Server、Oracle或MySQL。下列URL实现了再造参数
因此典型的办法是一开始就使用目标平台的字符串连接语法，比如
值“shoes”的字符串连接：
Microsoft SQL Server
http://target/products.asp?catagory=sho*$2b'es
（$2b是+号的URL编码）
Oracle 或 PostgreSQL
http://target/products,asp?catagory=sho*1I*es
MySQL
http://target/products.asp?catagory=sho*$20*es
($20是空格字符的 URL编码)
改变连接操作符两侧的子串将使输入无效，并取回与其他任意随机字
符串一致的结果。
各个数据库的字符串连接操作符请参考表11-6
394
---
## Page 409
第11章参考资料
（续表）
方法
描
述
从统计角度讲，大多数SQL注入漏洞都发生在这样的情况下：当用户
提供的数据被不安全地包含在操作数中，并被传递给WHERE子句时。
在下面的例子中，请注意URL和产生的 SQL 查询：
URL: http://targetserver/news -php?id=100
SQL: SELECT * FROM news WHERE article_id=100
在正常的操作下，上面这个例子将取回并显示article_id值等于100的
新闻文章。但是，如果参数id容易受到 SQL注入攻击，那么下面的
请求将产生不同的结果：
URL 1: http://targetserver/news-php?id=100
URL 2: http://targetserver/news.php?id=100
and 1=1
在服务器的响应中，SQL条件表
and 1=2
达式的附加部分是否产生一致
通过添加“and1=1”，在页面上应该看不到改变，因为从逻辑上来讲，
的差并性？
该表达式并未改变WHERE子句的输出：
SELECT * FROM news WHERE article_id=100 and 1=1
相反，添加“and1=2”意味着WHERE子句并不匹配数据库中的任何
记录：
SELECT * FROM news WHERE article_id=100 and 1=2
通过使用这种技术操级服务器的响应，我们常常可以识别SQL注入漏
洞的存在。在某些情况下，可能需要通过关闭圆括号或者打破引号界
定的数据，以便使用这种技术。例如，可以使用下面一系列的表达式：
'AND 'a'='a Vs * AND 'a'='b
 AND 1=1Vs
' AND 1=2-
--T-T GNY ( sA --T-T GNV(
′) AND 1=1Vs
-Z=TCNV （.
是否有可能触发可度量的时间
通过SQL注入触发可度量的时间延迟，既可以用来确认是否存在缺陷，
延迟？
在绝大多数情况下也可以用来识别后台数据库。表11-5中列出了用于
产生时间延迟的函数。
11.3.2识别数据库平台
利用SQL注入缺陷时，通常第一项任务是识别后台数据库平台。很多情况下，您可能已
经根据呈现的服务器平台和脚本语言做出了成熟的猜测。例如，如果Microsof的IIS服务器运
行着ASPNET应用，那么很可能集成了Microsoft SQL Server。同样道理，承载在Apache上的 PHP
应用则很可能集成了MySQL服务器。按照这种方式对技术进行分组，可以凭借对所攻击数据
库平台的了解来寻找SQL注入缺陷。不过，如果所注入的SQL未完全按计划发展，就有必要