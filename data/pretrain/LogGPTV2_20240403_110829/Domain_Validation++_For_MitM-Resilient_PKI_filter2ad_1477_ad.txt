the attacker can control the whole answer section. The headers
take 40 bytes: IP header is 20 bytes, UDP header is 8 bytes, DNS
header is 12 bytes. The query part (which is the first part in the
response) copies the QNAME (n + 1 bytes, for QNAME of length n)
together with the CLASS (2 bytes) and type (2 bytes). So a QNAME
of length 23 or more bytes results in an Answer section getting
fragmented before the answer part. Even with first fragment of size
200 bytes, the attacker controls the answer part using QNAME of
160 or more bytes (DNS names can be up to 253 characters). In other
cases, where fragmentation occurs significantly above 200 bytes, the
attacker controls the authority and additional sections. Depending
on the DNS resolver software and the fragmentation restriction the
attacker selects the suitable payload for cache poisoning attacks
(selected payloads are listed in Figure 12).
3.4.5 Measuring the CAs (Off-Path) Attack Surface. All the CAs
we measured use unpredictable source ports and TXIDs. Hence,
we use the defragmentation cache poisoning to bypass the entropy
in first fragment. As it turns out, many CAs block fragmented
IP packets. We evaluated the complete attack against CAs that
allow fragmented responses. These include COMODO, InstantSSL,
NetworkSolutions, Let’s Encrypt, SSL.com, CERTUM, NETLOCK.
3.5 Challenges and Conditions for Success
Our attack does not apply against all the DV-supporting CAs. In this
section we explain why, and list the conditions that are required for
our attack to succeed. We also discuss the challenges and hurdles
in such off-path attack and how we overcame them.
3.5.1 Conditions for Success. Our attack succeeds against a DNS
resolver of a given CA, for a specific target (victim) domain vict.im
if the following conditions hold:
• The authentication of the client requesting a certificate is done
via DV. The list of DV-supporting CAs that we could test is in Figure
1.
• The DNS resolver and the network of the CA allow fragmented
responses. Some CAs block fragmented traffic (see list in Section
3.4.5).
• The domain vict.im does not filter ICMP fragmentation
needed error messages and reduces the MTU based on the MTU
indicated in ICMP fragmentation needed packet. The fraction of
domains that do not filter ICMP fragmentation needed messages
were measured by [27], see Figure 4.
• The caching DNS resolver is vulnerable to at least one of the
overwriting attacks. As we show in Section 3.3 all tested resolvers
except one (Unbound in hardened mode) are vulnerable to at least
one overwriting payload.
3.5.2 Challenges and Hurdles. The attacks we launched are hard
due to the following factors:
Putting it All Together. Putting all the modules into a working
attack is a challenge. First the attacker has to synchronise all the
modules: triggering the query, measuring the IP ID, crafting the
spoofed second fragment with the correct payload (that will over-
write the value of a cached record with a new value), injecting the
spoofed second fragment into the defragmentation cache. Carrying
these steps out correctly requires off-line preprocessing prior to
the attack.
Second, some servers fragment not exactly at the location spec-
ified in the MTU in ICMP fragmentation needed error message.
For instance, when signalling MTU of 512 bytes, some servers may
fragment at 500 bytes. To cope with this, depending on the situation,
the attacker may need to add padding, or use records’ names that fit
within the fragment. The attacker can also play with compression in
DNS (defined in [RFC1035]) and increase or decrease the size of the
injected record. The compression uses pointers to locations where
a given string already appeared, hence by using combinations of
names that are already in the first fragment the attacker can reduce
the size, or with strings that did not appear before, increase the
size.
Off-path Attacker. Off-path attackers cannot see the communi-
cation between the DNS resolver and the nameservers. This intro-
duces challenges with timing and synchronisation. To overcome
this, we did a preprocessing phase, during which we performed a
careful study of the certificate issuance procedure for a given CA:
the time at which DNS queries are triggered, when validation is
performed. The attack is then tailored for each CA based on the
observed behaviour of the CA during the preprocessing phase.
Indirect Study. A key ingredient in our attacks is understanding
the caching behaviour in the DNS resolver of the CA to identify and
evaluate cache overwriting vulnerabilities. The challenge is that
we do not have a direct communication to the resolver, and cannot
trigger the queries ourselves. We trigger the queries indirectly, using
the CSR submission form. This indirect communication introduces
noise and prevents us from knowing when the queries will be sent.
Victim Domain. In this work we attacked our own domain. This
allowed us to anticipate the traffic volume to the domain and the
IP ID assignment method. In a real life scenario the attacker does
not have visibility into the nameservers of some other domain, and
hence has to learn this information using side channels. To identify
the IP ID assignment the attacker sending queries to the nameserver
from different hosts and checks the IP ID values in responses. Simi-
larly, the attacker has to measure the IP ID increments by probing
the value in intervals. If a random IP ID assignment is used, the
attack becomes much more difficult since it needs to be repeated
Session 10C: TLS 2CCS’18, October 15-19, 2018, Toronto, ON, Canada2068until the correct IP ID value is hit. Fortunately for the attackers
(and unfortunately for security), random IP ID assignment is rare.
3.6 Mitigations and Recommendations
Our evaluations indicate that off-path attacks against CAs are fea-
sible using DNS cache poisoning. We found a few vulnerable CAs,
but even a single trusted CA that is attacked exposes to devastating
consequences. We next discuss a few possible short and long term
mitigations.
3.6.1 Blocking Fragmentation. Perhaps the simplest way to pro-
tect against defragmentation cache poisoning (and hence against
issuance of spoofed certificates) is by blocking fragmented traffic;
which many CAs indeed do. We considered this as a possible simple
fix to the problem. However, as we show, MTU reductions are still
common in the Internet, e.g., because of PPPoE on DSL lines. How
common MTU values less than 1500 bytes in the Internet?
Is Fragmentation Common? We answer this question empirically,
using the data captures that Center for Applied Internet Data Anal-
ysis (CAIDA) [14] offers. CAIDA operates two passive Internet
monitors in the Equinix datacenters in Chicago and San Jose. The
monitors capture packets, anonymise them, and provide them for
download as gzipped pcap files, with the content limited to network
and transport-layer protocol headers. Each dataset corresponds to
one hour (between 12:59 and 14:01 UTC), split into chunks of one
minute (between approx. 150 MB - 1.5 GB). In total, we analysed
14484 traces in 121 datasets, representing data from 9 years (2008 -
2016).
We observe 2.9 million ICMP fragmentation needed packets in
total which is approximately one in 135k packets. On average, there
are 24k ICMP fragmentation needed packets per dataset. Our mea-
surement study indicates that blocking fragmented traffic would
block access to many Internet clients.
The Issue Is More Significant. Nevertheless, even blocking frag-
ments would not block the vulnerability. Off-path attackers may
come up with other approaches to bypass the randomisation. Fur-
thermore, there is an increasing tendency to launch short-lived
Border Gateway Protocol (BGP) prefix hijacks, for redirecting DNS
requests via attacker’s network for launching DNS cache poison-
ing attacks. This allows the attacker to become a MitM (on-path)
attacker for a short period of time, sufficient to inspect the DNS
request, and to craft a correct DNS response (with valid challenge-
response parameters), e.g., see [44]. In this recent attack, the at-
tackers leveraged BGP prefix hijacking for launching DNS cache
poisoning to redirect myetherwallet clients to attacker controlled
servers.
Hence, the solution should be robust even against stronger MitM
attackers, and should not rely on patches against off-path attackers.
3.6.2 DNSSEC. To mitigate DNS cache poisoning attacks even
by MitM attackers, the IETF designed and standardised Domain
Name System Security Extensions (DNSSEC) [RFC4033-RFC4035].
With DNSSEC, nameservers respond with signed DNS records and
keys and the DNS resolvers validate the records prior to caching
them. Fully deployed DNSSEC would prevent DNS cache poisoning
attacks.
Nevertheless, although proposed and standardised more than
two decades ago, DNSSEC is still not widely deployed. Measure-
ments show that currently about 25% of the DNS resolvers validate
DNSSEC (e.g., see stats.labs.apnic.net/dnssec) and only a bit
more than 1% of domains are signed with DNSSEC, [51]. This means
that DNSSEC validating DNS resolver gets no security benefit since
most domains are not signed. More significantly, recent works
found problems with DNSSEC keys generation and management
procedures exposing a large fraction of signed domains (more than
35%) to attacks, [16, 47]. It is not clear when the problems are ex-
pected to be resolved since they involve practices used by many
large registrars and DNS hosting providers.
Therefore, it is important to improve security of PKI indepen-
dently of other defences. In the next section we introduce our
proposal DV++ for a MitM-resilient PKI.
4 DOMAIN VALIDATION++
Our goal is to design a defence that preserves the benefits of DV
while providing resilience against MitM attackers. We aim to ensure
that the integration of the new mechanism would not require any
changes to the CA infrastructure and functionality and that it should
be easy to deploy. These properties ensure that the mechanism will
have better changes to be used by the CAs.
In this section, we present the design, implementation, and sim-
ulations of our proposal.
4.1 Setup and Attacker Model
The main aspect of our proposal is to utilise distributed nodes
which perform DV from multiple vantage points. The security
against MitM attackers is achieved by placing the nodes in different
networks, which do not traverse overlapping paths. In Figure 8
we provide an illustration of the attacker model, the CAs, and the
DV++ agents.
In contrast to a cryptographic eavesdropping attacker, which
is a global eavesdropper, a realistic MitM attacker can be present
only on some networks but does not control the entire Internet.
This serves as a premise for our design of DV++. The attacker is
a malicious ISP, that passively collects the traffic that traverses its
networks. The attacker can also actively try to attract traffic from
other networks by performing BGP prefix hijacking.
4.2 Design
DV++ is a decentralised mechanism, that utilises the existing In-
ternet infrastructure to validate claims of domain ownership. In
contrast to the centralised validation performed by the CAs with
DV, DV++ is based on a flat hierarchy with several equally trusted
certification agents. To pass a DV++ validation domain owners
must prove their ownership to a majority of the agents in a fully
automated manner by responding to queries sent by the agents for
the resource records in the domain. The agents are synchronised
with an orchestrator module. The orchestrator is located on the CA
network. The components of DV++ with the messages exchange
are illustrated in Figure 9.
The orchestrator and the agents use HTTPS for their communi-
cation. During the domain validation process, all the agents receive
from the orchestrator the domain and the record that need to be
Session 10C: TLS 2CCS’18, October 15-19, 2018, Toronto, ON, Canada2069Figure 8: DV++ setup and attacker model.
queried. The agents send DNS requests to the nameservers in the
domain requesting the record. As soon as the response arrives, the
agent sends the response to the orchestrator. When more than 50%
of the responses arrive, and they match, the orchestrator returns
success otherwise failure. The number of the correct responses from
the agents is a parameter that the CA can configure.
When sending a DNS request, each agent selects independently
a source port at random as well as a random TXID. To launch a
successful attack the attacker has to spoof correct responses to
more than 50% of the agents. This is an impossible task even for
strong, nation state attackers.
The agents are configured on different physical availability net-
works of AWS cloud. The selection of the cloud networks is done
so that the agents are located in different networks, whose routes
do not intersect. For selecting the networks to place the agents we
use the empirically derived CAIDA AS-level graph [4] from 2016.
Similarly to DV, DV++ authentication is initiated by the CA
following a submission of a CSR by the applicant. During this
process, queries are sent to the agents, that perform look-ups in
the target domain. Once majority of the responses are received by
the orchestrator, they are processed.
The core idea of DV+ is that, even if the attacker can corrupt
some agents, controlls some networks or path, it cannot control all
the paths and all the networks in the Internet and cannot corrupt
all the agents. For instance, even strong nation state attackers, such
as security agencies, do not control all Internet networks and paths.
4.3 Implementation
The orchestrator and the agents are written in Go. This ensures
good performance, easy configuration and cross-compilation of
static executables. Static executables allow easy deployment with-
out the need to install any runtimes or libraries. Integrating DV++
in CAs current infrastructure does not require replacing software
or hardware nor any other modifications: DV++ uses the same in-
terface and interaction as DV. To use DV++ a CA should merely
configure the system to make a call to DV++ library instead of DV.
Figure 9: DV++ components and messages exchange.
The code, as well as configuration and execution instructions,
are provided on GitHub https://github.com/dvpp/dvpp.
Using Our Setup. We have set up a pilot installation for eval-
uating our DV++ implementation. This can be used by the CAs,
systems or users in the Internet, for verifying DNS responses and
authenticating domain ownerships. We prepared a zip file con-
taining everything needed to perform a DNS-based domain val-
idation with a CNAME record. The zip file is available at http:
//45.76.90.74/orchestrator.zip, it contains a configuration file to use
the local orchestrator with our agents. To get started, first extract
the zip file and enter the extracted orchestrator directory with your
terminal. Three parameters should be provided: (1) the domain
requesting the certificate, (2) the CNAME to look up and (3) the
expected response. For instance, to request a certificate for domain
example.com with verification of abcdef.example.com that re-
solves to ghijkl.example.com the user should invoke (in one line
without a linebreak):
./orchestrator__ cname
example.com. abcdef.example.com. ghijkl.example.com
where platform is either Windows, Linux, or Darwin and archi-
tecture is either 386 or amd64. The command line tool will then
return the status of the verification as a JSON object. If XML output
is preferred a -x can be written in front of the CNAME.
4.4 Security Evaluations
We consider an attacker that tries to pass the authentication of
DV++ to issue a fraudulent certificate. To succeed the attacker must