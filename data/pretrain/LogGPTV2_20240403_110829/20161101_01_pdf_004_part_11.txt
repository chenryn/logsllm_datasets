datafiles XLOG
WAL buffer write
fork
read
write
wal writer
APP Other backend processes
PostgreSQL 数据库流复制
Parameter Tuning :
Primary
max_wal_senders
wal_sender_delay ( The sleep is interrupted by transaction commit )
wal_keep_segments
vacuum_defer_cleanup_age ( the number of transactions by which VACUUM and HOT updates
will defer cleanup of dead row versions. )
Standby
hot_standby
# wal apply & SQL on standby conflict reference parameter
max_standby_archive_delay
( the maximum total time allowed to apply any one WAL segment's data. )
max_standby_streaming_delay
( the maximum total time allowed to apply WAL data once
it has been received from the primary server )
wal_receiver_status_interval
( minimum frequency, The standby will report the last transaction log position
it has written, the last position it has flushed to disk, and the last position it has applied.)
hot_standby_feedback
(send feedback to the primary about queries currently executing on the standby. )
PostgreSQL 数据库流复制
 同步流复制原理 1. Many standbys
2. Only one sync standby at the same time
2
Standby(s) 3. Sync wide:
Cluster
Database
archlog xlog
User
Session
1 Transaction
WalRcvData->receivedUpto
Primary
startup
postmaster wal receiver
PM_SHUTDOWN_2
process
PMSignal
WalRcvData->conninfo wal sender
3
WalRcvData->receiveStart
recover
read
fork
postmaster
datafiles XLOG
WAL buffer write
fork
read
write
wal writer
APP Other backend processes
waiting/releasing
PostgreSQL 数据库流复制
Parameter Tuning :
Primary
max_wal_senders
wal_sender_delay
wal_keep_segments
vacuum_defer_cleanup_age
synchronous_replication
synchronous_standby_names
( primary_conninfo in standby’s primary_conninfo )
Standby
hot_standby
max_standby_archive_delay
max_standby_streaming_delay
wal_receiver_status_interval
hot_standby_feedback
PostgreSQL 数据库流复制
 流复制hot_standby演示
 规划主机, 网络, 存储, 同步主备机器的时间
 生成主库
 配置主库postgresql.conf, pg_hba.conf
 新建replication角色
 配置hot_standby .pgpass, 数据目录
 使用pg_basebackup创建备库基础备份
 配置备库recovery.conf, postgresql.conf
 启动hot_standby
 测试, 新建用户, 表空间, 数据库, schema, 数据表.
 使用pgbench进行压力测试, 查看流复制统计信息表pg_stat_replication
 角色切换测试
 练习
PostgreSQL 数据库表级复制
 使用触发器实现表级复制的介绍
 物化视图介绍
 支持表级复制的第三方插件(代理层SQL分发复制, 数据库端触发器复制)
 Slony-I
 Londiste3
 Bucardo
 Pgpool-II
 Pl/proxy
 …
 选取londiste3介绍
PostgreSQL 表复制-触发器
 多主复制
 http://blog.163.com/digoal@126/blog/static/163877040201321125220134/
 演示, 练习.
PostgreSQL 表复制-物化视图
 本地物化视图
 Command: CREATE MATERIALIZED VIEW
 Description: define a new materialized view
 Syntax:
 CREATE MATERIALIZED VIEW table_name
 [ (column_name [, ...] ) ]
 [ WITH ( storage_parameter [= value] [, ... ] ) ]
 [ TABLESPACE tablespace_name ]
 AS query
 [ WITH [ NO ] DATA ]
 Command: REFRESH MATERIALIZED VIEW
 Description: replace the contents of a materialized view
 Syntax:
 REFRESH MATERIALIZED VIEW name
 [ WITH [ NO ] DATA ]
PostgreSQL 表复制-物化视图
 digoal=# create table tbl (id int primary key, info text, crt_time timestamp);
 CREATE TABLE
 digoal=# insert into tbl select generate_series(1,100000), md5(random()::text), clock_timestamp();
 INSERT 0 100000
 digoal=# create materialized view mv_tbl as select * from tbl where id create foreign table ft1 (id int, info text, crt_time timestamp) server s1 options(schema_name 'public', table_name
'test123');
 CREATE FOREIGN TABLE
 在远程创建基表
 digoal=# create table public.test123(id int, info text, crt_time timestamp);
 CREATE TABLE
PostgreSQL 表复制-物化视图
 在本地查看外部表, 9.3的postgres_fdw接口支持写外部表, 往里面写一些数据.
 digoal=# \c digoal digoal
 You are now connected to database "digoal" as user "digoal".
 digoal=> select * from ft1;
 id | info | crt_time
 ----+------+----------
 (0 rows)
 digoal=> insert into ft1 select generate_series(1,100), md5(random()::text), clock_timestamp();
 INSERT 0 100
 基于外部表创建物化视图
 digoal=> create materialized view mv_ft1 as select * from ft1 with no data;
 SELECT 0
PostgreSQL 表复制-物化视图
 刷新物化视图
 digoal=> refresh materialized view mv_ft1;
 REFRESH MATERIALIZED VIEW
 digoal=> select count(*) from mv_ft1 ;
 count
 -------
 100
 (1 row)
 物化视图不允许refresh, vacuum, analyze以及select以外的操作. 在pg_rewrite中限制了:hasForUpdate false
 digoal=> insert into mv_ft1 select * from ft1;
 ERROR: cannot change materialized view "mv_ft1"
 digoal=> delete from mv_ft1;
 ERROR: cannot change materialized view "mv_ft1"
 digoal=> truncate mv_ft1;
 ERROR: "mv_ft1" is not a table
PostgreSQL 表复制-londiste3
 http://blog.163.com/digoal@126/blog/static/163877040201242945632912/
 http://blog.163.com/digoal@126/blog/static/163877040201243051338137/
 http://blog.163.com/digoal@126/blog/static/1638770402012431102448951/
 演示, 练习.
练习
 数据库热备份与还原练习
 流复制练习
 表级复制练习
Thanks
 关于本PPT有问题请发邮件至 PI:EMAIL
 保持联系, 个人QQ: 276732431
 群: 3336901
 【参考】
 《PostgreSQL 9.3 Manual》
 【更多内容请关注】
 http://blog.163.com/digoal@126/