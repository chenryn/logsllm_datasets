### 配置位置与响应体
- `config location = /t { echo ok; }`
- `request GET /t — response_body ok`

此测试块将生成一个具有如下基本结构的 `nginx.conf` 文件：

```nginx
env MY_ENVIRONMENT;

http {
    init_worker_by_lua_block {
        print("init")
    }
    server {
        ...
        location = /t {
            echo ok;
        }
    }
}
```

请注意 `main_config`、`http_config` 和 `config` 这几个数据节是如何映射到 NGINX 配置文件的不同部分的。如有疑问，可以检查测试框架生成的实际 `nginx.conf` 文件，该文件通常位于当前工作目录（通常是项目的根目录）中的 `t/servroot/conf/nginx.conf` 位置。

Test::Nginx 会为每个测试块生成一个新的 `nginx.conf` 文件，这使得每个测试块能够独立运行。默认情况下，测试框架会在运行每个测试块之前自动启动一个新的 NGINX 服务，并在测试块运行结束后立即关闭服务。由于 NGINX 是一个轻量级服务器，启动和关闭都非常快，因此测试块的执行速度并不会受到太大影响。

### 准备发起请求
准备一个请求最简单的方法是使用 `request` 数据节，例如：
- `— request GET /t?a=1&b=2 —`

默认使用的是 HTTP/1.1 协议。如果需要使用 HTTP/1.0 协议，可以明确指定：
- `— request GET /t?a=1&b=2 HTTP/1.0 —`

在 `request` 小节中，前导空格或空白行会被自动忽略。你甚至可以在前面加上 `#` 字符来添加注释，例如：
- `— request # this is a simple test: GET /t —`

你还可以通过 `more_headers` 小节来添加额外的请求头部信息，例如：
- `— request GET /t — more_headers Foo: bar Bar: baz —`

### 管道化请求
管道化 HTTP 请求也是可能的，但你需要使用 `pipelined_requests` 而不是 `request`。例如：
- `— pipelined_requests eval [“GET /t”, “GET /t”]`
- `— request_body eval [“ok\n”, “ok\n”]`

需要注意的是，我们使用 `eval` 过滤器将 `pipelined_requests` 的字面值视为 Perl 代码。这样我们可以构造一个包含请求字符串的 Perl 数组，这是 `pipelined_requests` 所期望的数据格式。类似地，在检查输出时也需要对 `response_body` 使用类似的技巧。

### 检查响应
我们已经介绍了用于检查响应体数据和响应状态码的 `response_body` 和 `error_code` 数据节。

`response_body` 数据节总是进行完整的字符串比较。当长字符串比较失败时，它会尝试智能处理。例如，以下是从 `prove` 输出的一个示例：
```
…. t/foo.t .. 1/? # Failed test ‘TEST 1: long string test - response_body - response is expected (req 0)’ # at …/test-nginx/lib/Test/Nginx/Socket.pm line 1282. # got: …“IT 2.x is enabled.\x{0a}\x{0a}”… # length: 409 # expected: …“IT 2.x is not enabled.\x{0a}”… # length: 412 # strings begin to differ at char 400 (line 1 column 400) # Looks like you failed 1 test of 2. /tmp/foo.t .. Dubious, test returned 1 (wstat 256, 0x100) Failed 1/2 subtests
Test Summary Report
/tmp/foo.t (Wstat: 256 Tests: 2 Failed: 1) Failed test: 2 Non-zero exit status: 1
Files=1, Tests=2, 0 wallclock secs (0.01 usr 0.00 sys + 0.09 cusr 0.03 csys = 0.13 CPU) Result: FAIL ….
```

从这个测试报告中，我们可以清楚地看到：
- 失败的测试块标题为 `TEST 1: long string test`。
- 失败的原因是 `response_body` 数据节的检查。
- 实际响应体数据长度为 409 字节，而预期值为 412 字节。
- 预期值在字符串片段 `IT 2.x is enabled` 中多了一个 `not` 字，差异从第 400 个字符开始。

在幕后，Test::Nginx 使用 Perl 模块 `Test::LongString` 来进行长字符串比较。这对于检查二进制格式的响应体数据也非常有用。

如果你的响应体数据是多行文本格式，你也可以使用 `diff` 风格的输出来显示不匹配的数据。为此，可以在测试文件的序幕部分调用 `no_long_string()` 函数。例如：
```perl
use Test::Nginx::Socket 'no_plan';
no_long_string();
run_tests();
```

### 响应体模式匹配
当请求体可能发生变化或者你只关心某个关键字时，可以使用 `response_body_like` 数据节来指定 Perl 正则表达式进行模式匹配。例如：
- `— response_body_like: age: \d+ —`

使用多行数据节值形式时，请注意尾随的换行符可能会导致模式无法匹配。在这种情况下，可以使用 `chomp` 过滤器来帮助解决这个问题。例如：
- `— response_body_like chomp age: \d+ —`

你还可以使用 `eval` 过滤器来构造一个 Perl 正则表达式对象。例如：
- `— response_body_like eval qr/age: \d+/ —`

### 检查响应头
`response_headers` 数据节可用于验证响应头条目。例如：
- `— response_headers Foo: bar Bar: baz !Blah —`

该部分实际上包含了三个测试：
- 响应头 `Foo` 必须出现并且值必须为 `bar`。
- 响应头 `Bar` 必须出现并且值必须为 `baz`。
- 响应头 `Blah` 不得出现或为空值。

### 检查 NGINX 错误日志
除了响应之外，NGINX 错误日志文件也是一个重要的输出通道。

#### 真假测试
一种常见的测试需求是检查某段文本是否出现在错误日志消息中。这种检查可以通过 `error_log` 和 `no_error_log` 数据节来完成。前者确保错误日志文件中至少有一行包含指定的字符串，后者则相反，确保没有任何一行包含该模式。

例如：
- `— error_log Hello world from my server —`

那么字符串 `Hello world from my server`（不包括尾随的新行）必须出现在 NGINX 错误日志的至少一行中。你可以通过在数据节值中指定多个字符串来进行多次检查。例如：
- `— error_log This is a dog! Is it a cat? —`

如果其中一个字符串模式没有匹配任何错误日志行，我们会从 `prove` 得到一个测试失败报告。例如：
```
…. # Failed test ‘TEST 1: simple test - pattern “This is a dog!” matches a line in error.log (req 0)’ ….
```

如果你想指定一个 Perl 正则表达式作为模式之一，可以使用 `eval` 过滤器来构造一个 Perl 数组作为数据节值。例如：
- `— error_log eval [ “This is a dog!”, qr/\w+ is a cat\?/, ] —`

Perl 正则表达式可以通过 `qr/.../` 引用语法构造。Perl 数组中使用双引号或单引号指定的字符串模式仍然被视为普通字符串模式。如果数组只包含一个正则表达式模式，可以省略数组本身。例如：
- `— error_log eval qr/\w+ is a cat\?/ —`

Test::Nginx 将测试 NGINX 服务器的错误日志文件放在 `t/servroot/logs/error.log` 路径下。作为测试编写者，我们经常在出现问题时直接检查该文件。例如，我们在 `error_log` 中指定的模式可能会有错误或拼写错误。此外，扫描原始日志文件可以帮助我们了解启用 NGINX 调试日志时的内部工作细节。

`no_error_log` 数据节与 `error_log` 类似，但它检查 NGINX 错误日志文件中不存在指定的字符串模式。`no_error_log` 最常见的用途之一是确保日志文件中没有错误级别的消息。例如：
- `— no_error_log [error] —`