has not been used before.
6.3 Sybil Attacks
The adversary could launch Sybil attacks by creating a
large number of Sybils in the population of potential bridge
users, so that the ratio f of compromised entities in the po-
tential users can be dramatically increased. However, we
note that deploying a large number of Sybils does not nec-
essarily lead to increase in corrupt users in the system. For
honest users, their invitation tickets are given to people they
know. While corrupt users give all their received tickets
to colluding entities, the number of malicious entities they
can invite is bottlenecked by the number of invitation tickets
they have received, rather than by the number of malicious
entities the adversary can create in the population of poten-
tial users.
Alternatively, the adversary could try to deploy Sybils di-
rectly in the system, which requires the adversary to provide
each Sybil with a valid credential; however, this is infea-
sible without knowing the bridge distributor’s private key.
We also note that it is infeasible to let corrupt users share
their credentials with the Sybils either, because the bridge
distributor recycles used credentials and the total number of
bridges that can be learnt by the adversary does not increase.
6.4 Blocking the Bridge Distributor
We suppose the IP address of the bridge distributor is
publicly known. Hence, the censor could simply block the
bridge distributor to either prevent new users from join-
ing the system or stop existing users from receiving new
bridges. For an existing user who has at least one unblocked
bridge, he can use the bridge to build a Tor circuit to access
the bridge distributor. For a user without any usable bridge
(e.g., a new user), he can use a high-latency but more robust
circumvention tool (e.g., Email based circumvention [5]) to
communicate with the bridge distributor to get the initial
bridges or a replacement bridge. Besides, a new user could
ask his inviter (i.e., the existing user who gave him the in-
vitation ticket) to perform the initial bootstrapping on his
behalf to get the initial bridges.
6.5 Well Behaving of Corrupt Users
In order to increase the number of corrupt users in the
system, the adversary could let the corrupt users behave
legitimately (i.e., keeping their bridges alive) for a certain
period of time to accumulate credits in order to receive
invitation tickets. However, we note that since the invi-
tation tickets are randomly distributed to qualiﬁed users,
corrupt users may not necessarily receive invitation tickets
even if they have saved up sufﬁcient credits. In addition,
keeping bridges alive also allows honest users to accumu-
late enough credits to become qualiﬁed to receive invitation
tickets; therefore, overall, the chance of receiving invita-
tion tickets by corrupt users is no better than that of honest
users. Our simulation results in Section 4.3 (where the cor-
rupt users do not block bridges until the 225-th day) show
that this attack strategy cannot help the adversary increase
of ratio of corrupt users in the system. In addition, rBridge
does not allow users to transfer credits to others, and hence
it is infeasible to deploy a few well-behaving corrupt users
to help other corrupt users by sharing their credits.
7 Conclusion
We proposed rBridge, a user reputation system for Tor
bridge distribution. rBridge addresses two key challenges to
bridge distribution: protecting bridges from being blocked
by corrupt users, and preserving bridge assignment infor-
mation of each user. rBridge makes use of users’ reputation
to punish blockers and limit them from repeatedly blocking
bridges, and adopts an introduction-based mechanism to in-
vite new users while resisting Sybil attacks. Our simulation
results show that rBridge is able to provide much stronger
protection for bridges than any existing scheme. In addition,
we addressed privacy preservation in rBridge by conceal-
ing users’ bridge assignment information. Such information
can be explored to degrade users’ anonymity in anonymous
communication. We designed a novel privacy-preserving
reputation system for bridge distribution using several cryp-
tographic primitives. To our best knowledge, rBridge is the
ﬁrst scheme that is able to perfectly preserve users’ pri-
vacy in bridge distribution. We implemented a prototype
of rBridge, and the experiments showed that rBridge has
reasonable performance.
8 Acknowledgement
We thank anonymous reviewers for invaluable comments
on the paper. Qiyan Wang was supported in part by NSF
CNS 09-53655 and Zi Lin was supported in part by NSF
CNS 09-17154.
References
[1] https://metrics.torproject.org/network.
html#networksize.
[2] Ten ways
to
discover
Tor
bridges.
https:
//blog.torproject.org/blog/research-
problems-ten-ways-discover-tor-bridges.
[3] https://www.torproject.org/projects/
obfsproxy.html.en.
[4] Proposal 190: Password-based Bridge Client Authorization.
https://lists.torproject.org/pipermail/
tor-dev/2011-November/003042.html.
[5] Feed Over Email
(F.O.E). http://code.google.
com/p/foe-project/.
[6] Research problem: Five ways to test bridge reachability,
Dec, 1, 2011. https://blog.torproject.org/
blog/research-problem-five-ways-test-
bridge-reachability.
[7] M. H. Au, A. Kapadia, and W. Susilo. Blacr: Ttp-free black-
listable anonymous credentials with reputation. In NDSS’12,
2012.
[8] M. H. Au, W. Susilo, and Y. Mu. Constant-size dynamic
k-taa. SCN, Lecture Notes in Computer Science, 4116:111–
125, 2006.
[9] J. Camenisch and M. Stadler. Proof system for general state-
In Technical Report TR
ments about discrete logarithms.
260, Institute for Theoretical Computer Science, 1997.
[10] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The
second-generation onion router. In USENIX Security Sym-
posium, August 2004.
[11] N. Feamster, M. Balazinska, W. Wang, H. Balakrishnan,
and D. Karger. Thwarting web censorship with untrusted
In Privacy Enhancing Technologies
messenger discovery.
(PETS), 2003.
[12] A. Fiat and A. Shamir. How to prove yourself: Practi-
In
cal solutions to identiﬁcation and signature problems.
CRYPTO, 1986.
How
internet
censor-
2011.
[13] J.
Jacob.
works
in
china,
ship
http://www.ibtimes.com/articles/113590/20110217/china-
internet-censorship
-great-ﬁrewall-us-hillary-clinton-communist.htm .
Feb.
17,
[14] M. Mahdian. Fighting censorship with algorithms. In Pro-
ceedings of FUN’10, 2010.
[15] D. McCoy, J. A. Morales, and K. Levchenko. Proximax:
A measurement based system for proxies dissemination. In
FC’11, Feb 2011.
[16] J. McLachlan, A. Tran, N. Hopper, and Y. Kim. Scalable
onion routing with torsk. In ACM CCS’09, 2009.
[17] M. Naor and B. Pinkas. Efﬁcient oblivious transfer proto-
cols. In SODA’01, 2001.
[18] T. Pedersen. Non-interactive and information-theoretic se-
In Advances in Cryptology,
cure veriﬁable secret sharing.
1992.
[19] R. Smits, D. Jain, S. Pidcock, I. Goldberg, and U. Hengart-
ner. Bridgespa: Improving tor bridges with single packet
authorization. In WPES’11, 2011.
[20] Y. Sovran, A. Libonati, and J. Li. Pass it on: Social networks
stymie censors. In IPTPS’08, 2008.
(
)
[21] P. P. Tsang, M. H. Au, A. Kapadia, and S. W. Smith.
Blacklistable anonymous credentials: Blocking misbehav-
ing users without ttps. In CCS’07, 2007.
[22] P. P. Tsang, M. H. Au, A. Kapadia, and S. W. Smith. Perea:
Towards practical ttp-free revocation in anonymous authen-
tication. In CCS’08, 2008.
[23] J. Zittrain and B. Edelman.
Internet Filtering in
IEEE Internet Computing, 7(2):70–77, 2003.
China.
http://csdl.computer.org/comp/mags/ic/
2003/02/w2070abs.htm.
A Dealing with Duplicate Bridges
m
1
)
(
Suppose U receives a duplicate bridge Bd in the ran-
-OT, which is identical to one of his existing
domized
bridges Be. We allow U to get a new bridge (by running
-OT again) to replace Bd as long as he can prove that
m
1
he has valid signatures for both Bd and Be.
We note that, however, a sophisticated D may try to in-
fer U’s bridges by constructing the list of available bridges
∗), and see if later U
used in OT with a single bridge (say B
requests replacement of a duplicate bridge; if yes, D can be
∗ is one of U’s existing bridges. To prevent this,
sure that B
we let D compute (Cj, Oj) = CMT(Bj) for each available
-OT,
bridge Bj, and publish all the Cj’s; before running
U randomly picks Cp, Cq, p ̸= q, and asks D to prove that
Bp and Bq are different. D constructs the following proof:
)
m
1
 (Bp, Op, Bq, Oq) :
(Cp, Op) = CMT(Bp)∧
(Cq, Oq) = CMT(Bq)∧
Bp ̸= Bq
(
π6 = NIPK
(
)
Then, U runs
Bd from Cd.
-OT to get Od; using Od, U is able to open
If Bd is duplicate, U constructs the following proof:
m
1
π7 = NIPK
(x, Bd, τd, ϕd, Cd, Od, σd, Be, τe, ϕe,
Ce, Oe, σe) :
(Cd, Od) = CMT(Bd, τd, ϕd, x)∧
Verify(P KD, σd, Cd) = Accept∧
κd = Indic(σd)∧
(Ce, Oe) = CMT(Be, τe, ϕe, x)∧
Verify(P KD, σe, Ce) = Accept∧
Bd = Be
(
)
and sends κd∥π7 to D though an established Tor tunnel.
D veriﬁes κd /∈ elistBd and π7, runs
-OT to provide
a new bridge ~Bd, and adds κd to elistBd. After receiving
Bd, U constructs the proof:
m
1
π8 = NIPK
(x, Bd, τd, ϕd, Cd, Od, σd, ~Bd, ~τd, ~ϕd, ~Od) :
(Cd, Od) = CMT(Bd, τd, ϕd, x)∧
Verify(P KD, σd, Cd) = Accept∧
κd = Indic(σd)∧
~τd = Tcur ∧ ~ϕd = 0∧
( ~Cd, ~Od) = CMT( ~Bd, ~τd, ~ϕd, x)
is the opening to C♠). Then, U computes the proof:
∧
(x, (cid:8), s
r(1)
, r(2)
i
k
i=1
i
[
′
(cid:8), ω, s
, δ(1)
i
A(1)
ω,{Bi, τi, ϕi, eo
′
, δ(2)
}k
i=1) :
r
g
2
(1)
i
(2)
i
i
r
i = g
1
i , so
i , s
′
i,
∧
∧
−eo
i ^e(g2, y)r
, h)
]
i ^e(g3, h)Bi∧
∧
(1)
i
(2)
i
δ
g
2
(A(1)
i
(2)
^e(A
i
δ
i = g
1
)eo
,pko)
i
(1)
^e(g0,h) = ^e(A(2)
i ^e(g1, h)so
^e(g2, h)δ
τi = Tcur ∧ ϕi = 0∧
′
Ci = gs
2 gBi
4 gϕi
3 gτi
1 gx
i
′
3 ∧
C(cid:8) = gs
2 g(cid:8)
1 gx
(cid:8)
κx = zx∧
(cid:8) = 0∧
Cω = gs
ω = Tcur
3 ∧
2 gω
′
1 gx
!
5
(1)
i
and sends ~Cd∥π8 to D. Note that we include the commit-
ment and signature of the duplicate bridge Bd in π8 to pre-
vent U from giving this opportunity of receiving a replace-
ment bridge to another (colluding) user. Finally, D veriﬁes
π8, signs ~Cd, and sends ~σd to U.
B Construction Details
Let (G1, G2) be a bilinear group pair and Gp be a group
of order p where DDH is intractable with ^e : G1 × G2 →
Gp, s.t., ^e(P a, Qb) = ^e(P, Q)ab, for all P ∈ G1, Q ∈ G2,
a, b ∈ Zp.
π1 = NIPK
B.1 Key Generation
D chooses sk