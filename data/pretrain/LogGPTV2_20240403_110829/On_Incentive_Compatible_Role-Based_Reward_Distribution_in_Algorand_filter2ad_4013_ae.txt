made whether they cooperate or not. (ii) For each remaining
node skj which is the member of Y, the payoff of cooperation
would be ukj
the payoff of a
SK skj
i (D) = −cso. In other words,
defecting node would be ukj
if a member of Y defects, no new ﬁnal block would be
created in this round given Deﬁnition 1. So, to prevent skj
from defecting the deﬁned strategy in s
i (C) must be
greater than ukj
i (D), hence, we can ﬁnd another bound for Bi
K−c
i.e., Bi >
. Given the above analysis, the deﬁned
strategy proﬁles which satisﬁes the condition form a Nash
equilibrium strategy proﬁle in game GAl+.
D. Proposed Reward Sharing Mechanism
− cK. But,
i (C) = γBi
∗, ukj
so)SK
skj γ
(c
Our next goal is to extend the current Algorand reward
sharing method by considering the strategic behavior of
users/nodes. In this case, we provide a solution for Algorand
Foundation to foster cooperative behavior among all Algorand
nodes. Moreover, our computed bounds in Theorem 3 shows
that we can minimize the reward Bi by selecting suitable
values for α, β, and γ. Our results presented in Section III-C
showed that the Algorand Foundation needs to deploy an
incentive-compatible mechanism to prevent nodes from selﬁsh
behavior (defecting) to unilaterally increase their payoff. We
have proposed an algorithm based on Theorem 3 which
provides enough incentive for Algorand nodes to cooperate.
Our proposed Algorithm 1 proceeds as follows: at the end of
each Algorand round, the Algorand Foundation extracts the
list of the leaders, the committee members, and other online
nodes as L, M, and K. These values can be simply computed
by processing and verifying the list of all the sortition proofs
that have been sent by the Algorand nodes in their votes (as
committee members) or in the header of their block proposals
(as leaders). Also, the Algorand foundation determines the set
of other online nodes from their gossiped network messages.
. Then, the foundation will calculate the optimal values for
α and β to minimize Bi, by using the deﬁned bounds in
Theorem 3. Next, the Algorand foundation computes the
rewards for all nodes that have participated in this round based
on their roles using the computed α, β, and Bi values. Finally,
the foundation creates the reward transactions for each node
and gossip it to the Algorand network. These transactions will
,
461
blocki ← Wait until ﬁnal block created in round i
// Compute α, β, Bi from Theorem 3 bounds
L, M, K, Stakes ← ExtractDataFromBlock(blocki)
α, β, Bi ← ComputeParameters(L, M, K, Stakes)
for all Node n ∈ blocki do
reward ← ComputeReward(n, Rolei(n), α, β, Bi)
SendReward(reward, n, i)
Algorithm 1 Incentive-Compatible Reward Sharing
1: procedure REWARDSHARING(i)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11: end procedure
end for
RewardSharing(i + 1)
be veriﬁed by the Algorand network and put in the next blocks.
We must clarify that as the stakes are computed at the end of
each round, the Bi value is exactly equal to the minimum
value of the reward that Algorand foundation should pay to
the cooperative nodes. Thus, there is no incentive for selﬁsh
nodes to deviate from the reward sharing protocol.
V. EVALUATION
∗
l = 1, s
∗
m = 1, and s
In order to evaluate our proposed mechanism, we ﬁrst
conduct a series of numerical analysis to obtain the best reward
shares in our model (i.e., α and β). According to the results
presented in Theorem 3, we can minimize the reward in each
round such that it guarantees the cooperation of a subset of
Algorand nodes. The optimal reward is ensured by choosing
optimal reward shares for leaders and committee members,
i.e., α and β. In our numerical analysis, we assume that the
minimum acceptable values of stakes for each role are equal
∗
k = 10 Algos. In other words, by
to s
∗
setting s
k = 10, we ignore any strong synchrony set containing
nodes with stakes less than 10 Algos in this numerical analysis.
We must highlight that in the real Algorand network nodes
with low stakes do not choose to cooperate due to their
negligible chance of getting elected as leaders or committee
members and due to their low share of rewards [37]. Hence,
∗
setting s
k = 10 can results in a more realistic evaluation. We
also assume that the cost of cooperation for the leaders, the
committee members, and other nodes are cL = 16, cM = 12,
cK = 6, and cso = 5 micro Algos. Our results show that
for (α, β) = (0.02, 0.03), the minimum values of Bi would
be about 5.2 Algos per round. Considering the value of SK
which is always much greater than SL and SM , the calculated
bounds presented in Theorem 3 is usually a function of the
third bound, i.e., (c
. Hence, to minimize the value of
Bi we need to maximize γ and consequently minimize α and
β (recall that γ = 1 − α − β). In summary, our mechanism
always considers enough share of the total reward for leaders
and committee members, as shown in Equation (7). Moreover,
it also provides enough rewards to all other online nodes
considering the value Bi which is greater than (c
K−c
∗
s
kj γ
so)SK
so)SK
.
We then simulate an Algorand network containing 500,000
nodes, in which the amount of stakes for leaders and commit-
K−c
∗
s
kj γ
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:36:15 UTC from IEEE Xplore.  Restrictions apply. 
(a) U(1, 200)
(b) N (100, 20)
(c) N (100, 10)
(d) N (2000, 25)
Fig. 5: Distribution of computed Bi values in each simulation by our proposed mechanism, for different distributions of stakes.
stake distribution) with Fig. 5-(c), we can also conclude that
when the total stake of the network increases, we need smaller
reward to enforce cooperation (around 1.2 Algos). The results
show that the Foundation can adapt the rewards given the
status of the network in terms of stakes, by using our model.
Fig. 6-(a) shows the cumulative calculated reward in each
round with our proposed algorithm and Algorand Foundation
mechanism. This result shows that our proposed mechanism
distributes much smaller rewards among nodes, given the
distribution of stakes. For example, in contrast to the reward
sharing approach proposed by the Algorand Foundation which
shares 20 Algos in each round for the ﬁrst 500,000 rounds [34],
our proposed reward sharing algorithm will share about 5.2
Algos for a normal distribution of stakes. More interestingly,
our proposed solution will not increase the reward until 6
million blocks are generated, as it can guarantee cooperation
without paying more Algos. Our approach only distributes
more rewards when the distribution of stakes is U (1, 200).
This is due to the fact that the number of nodes with small
values of stakes are higher with this distribution. If we can
remove the nodes with smaller stakes (e.g., nodes with up to
7 stakes) we can still keep the synchrony of the network and
distribute much smaller rewards. This is shown in Fig. 6-(b).
VI. CONCLUSION
In this paper, we ﬁrst introduced a system model to cap-
ture the main operational features of the Algorand. We then
comprehensively studied the problem of node selﬁshness in
Algorand and proposed a possible solution to overcome it by
employing game-theoretic modeling and analysis. Our analyt-
ical results show that we can always enforce cooperation by
carefully distributing the correct amount of rewards. Moreover,
our numerical analysis validated that the proposed reward
sharing mechanism outperforms the current proposal by the
Algorand Foundation. We believe that this work is the ﬁrst
step towards a better understanding of the effects of selﬁsh
behavior in Algorand. Our mechanism can help the Algorand
Foundation use the Algos wisely, as well as, adapt dynamically
with the distribution of stakes in the network. In terms of future
work, we can also get in touch with the Algorand Foundation
to introduce our proposed mechanism for reward sharing in the
initial phase (for 1.75 billion Algos), as well as the distribution
of transaction fees as rewards in near the future.
Fig. 6: (a) The cumulative rewards distributed among Algorand
nodes by our proposed algorithm and Algorand Foundation.
(b) The cumulative rewards when the Algorand nodes with
less than 3 (U 3(1, 200)), 5 (U 5(1, 200)), and 7 (U 7(1, 200))
stakes have been removed from the network.
tee members are SL = 26 and SM = 13K, respectively. We
have chosen the number of nodes and the stake values from
Gilad et al. simulation parameters in [22]. We run simulations
with three different settings, where we distribute 50 million
Algos among these 500K nodes using (i) uniform distribution
of U(1, 200), (ii) normal distribution of N (100, 20), and
(iii) N (100, 10).
In each round, we also randomly choose
1000 nodes, in which nodes with higher stakes would be
selected more often. Then we generate a series of random
transactions for the selected nodes with a uniform distribution
U(−4, 4). Negative values represent sending Algos while
positive values represent receiving Algos in nodes. With these
values we tried to emulate the real Algorand exchange system
available at algoexplorer [37]. As for the reward sharing
mechanism, we deploy both the Algorand Foundation proposal
presented in Table 2 and our proposed mechanism presented
in Algorithm 1. We run the simulation for 200 times with
different distributions, where each instance executes for 10
rounds. Finally, we compute the average of total rewards.
Our simulation results (Fig. 5) show that the calculated
rewards for our proposed mechanism follows the distribution
of stakes in the network. For example, we must distribute
higher rewards (around 50 Algos) for uniform distribution of
U (1, 200), as there exist many nodes with low stakes. But with
a normal distribution N (100, 10), we need to only distribute
smaller rewards, i.e., around 5 Algos. In fact N (100, 10)
simulates the initial phase of Algorand, where around 50
millions Algos were in the network. Comparing the results
presented in Fig. 5-(d) (which simulates current status of
Algorand [37] with more than 1 billion Algos, byN (2000, 25)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:36:15 UTC from IEEE Xplore.  Restrictions apply. 
462
REFERENCES
[1] S. Nakamoto et al., “Bitcoin: A peer-to-peer electronic cash system,”
[2] “Ethereum project.” https://ethereum.org/, July 2018.
[3] “All Cryptocurrencies.” https://coinmarketcap.com/all/views/all/, July
2008.
2018.
[4] K. J. O’Dwyer and D. Malone, “Bitcoin mining and its energy footprint,”
in 25th IET Irish Signals Systems Conference and China-Ireland Inter-
national Conference on Information and Communications Technologies
(ISSC/CIICT), pp. 280–285, June 2014.
[5] M. Rosenfeld, “Analysis of bitcoin pooled mining reward systems,”
CoRR, vol. abs/1112.4980, 2011.
[6] K. Croman, C. Decker, I. Eyal, A. E. Gencer, A. Juels, A. Kosba,
A. Miller, P. Saxena, E. Shi, E. G¨un Sirer, D. Song, and R. Wattenhofer,
“On scaling decentralized blockchains,” in Financial Cryptography
and Data Security (J. Clark, S. Meiklejohn, P. Y. Ryan, D. Wallach,
M. Brenner, and K. Rohloff, eds.), 2016.
[7] J. Garzik, “Bitcoin Improvement Proposal 102.” https://github.com/
bitcoin/bips/blob/master/bip-0102.mediawiki, 2015.
[8] I. Eyal, A. E. Gencer, E. G. Sirer, and R. Van Renesse, “Bitcoin-ng: A
scalable blockchain protocol.,” in NSDI, pp. 45–59, 2016.
[9] L. Luu, V. Narayanan, C. Zheng, K. Baweja, S. Gilbert, and P. Saxena,
“A secure sharding protocol for open blockchains,” in Proceedings of
the 2016 ACM SIGSAC Conference on Computer and Communications
Security, pp. 17–30.
[10] “Lightning Network.” https://lightning.network/, July 2018.
[11] “The Raiden Network.” https://raiden.network/, July 2018.
[12] A. Back, M. Corallo, L. Dashjr, M. Friedenbach, G. Maxwell, A. Miller,
A. Poelstra, J. Tim´on, and P. Wuille, “Enabling blockchain innovations
with pegged sidechains.” https://www.blockstream.com/sidechains.pdf,
2014.
[13] S. King, “Primecoin: Cryptocurrency with Prime Number Proof-of-
Work.” http://primecoin.io/bin/primecoin-paper.pdf, 2013.
[14] S. King and S. Nadal, “PPCoin: Peer-to-Peer Crypto-Currency with
Proof-of-Stake.” https://decred.org/research/king2012.pdf, 2012.
[15] P. Vasin, “BlackCoins Proof-of-Stake Protocol v2.” https://blackcoin.org/
blackcoin-pos-protocol-v2-whitepaper.pdf, 2014.
[16] L. Ren, “Proof of Stake Velocity: Building the Social Currency of the
Digital Age.” https://www.reddcoin.com/papers/PoSV.pdf, 2014.
[17] D. Pike, P. Nosker, D. Boehm, D. Grisham, S. Woods, and J. Marston,
“Proof of Stake Time: A time-accepted periodic proof factor in a
nonlinear distributed consensus.” https://www.vericoin.info/downloads/
VeriCoinPoSTWhitePaper10May2015.pdf, 2015.
[18] J. Chen and S. Micali, “Algorand,” arXiv preprint arXiv:1607.01341,
2016.
[19] P4Titan, “Slimcoin. A Peer-to-Peer Cryptocurrency with Proof-
of-Burn.” https://www.doc.ic.ac.uk/∼ids/realdotdot/crypto papers etc
worth reading/proof of burn/slimcoin whitepaper.pdf, 2014.
[20] “Hyperledger sawtooth.” https://www.hyperledger.org/projects/sawtooth.
[21] M. Borge, E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, and
B. Ford, “Proof-of-personhood: Redemocratizing permissionless cryp-
tocurrencies,” in IEEE European Symposium on Security and Privacy
Workshops (EuroS PW), pp. 23–26, April 2017.
[22] Y. Gilad, R. Hemo, S. Micali, G. Vlachos, and N. Zeldovich, “Algorand:
Scaling byzantine agreements for cryptocurrencies,” in Proceedings of
the 26th Symposium on Operating Systems Principles, pp. 51–68, ACM,
2017.
[23] B. Biais, C. Bisiere, M. Bouvard, and C. Casamatta, “The blockchain
folk theorem,” The Review of Financial Studies, vol. 32, no. 5, pp. 1662–
1715, 2019.
[24] A. Kiayias, E. Koutsoupias, M. Kyropoulou, and Y. Tselekounis,
“Blockchain mining games,” in Proceedings of the ACM Conference
on Economics and Computation, pp. 365–382, 2016.
[25] Y. Kwon, D. Kim, Y. Son, E. Vasserman, and Y. Kim, “Be selﬁsh
and avoid dilemmas: Fork after withholding (faw) attacks on bitcoin,”
in Proceedings of
the ACM SIGSAC Conference on Computer and
Communications Security, pp. 195–209, 2017.
[26] N. T. Courtois and L. Bahack, “On subversive miner strategies and
block withholding attack in bitcoin digital currency,” arXiv preprint
arXiv:1402.1718, 2014.
[27] L. Luu, R. Saha, I. Parameshwaran, P. Saxena, and A. Hobor, “On power
splitting games in distributed computation: The case of bitcoin pooled
mining,” in IEEE 28th Computer Security Foundations Symposium,
pp. 397–411, 2015.
[28] I. Eyal, “The miner’s dilemma,” in IEEE Symposium on Security and
Privacy, pp. 89–103, IEEE, 2015.
[29] Y. Lewenberg, Y. Bachrach, Y. Sompolinsky, A. Zohar, and J. S. Rosen-
schein, “Bitcoin mining pools: A cooperative game theoretic analysis,”
in Proceedings of the International Conference on Autonomous Agents
and Multiagent Systems, pp. 919–927, Citeseer, 2015.
[30] O. Schrijvers, J. Bonneau, D. Boneh, and T. Roughgarden, “Incentive
compatibility of bitcoin mining pool reward functions,” in International
Conference on Financial Cryptography and Data Security, pp. 477–498,
Springer, 2016.
[31] M. H. Manshaei, M. Jadliwala, A. Maiti, and M. Fooladgar, “A game-
theoretic analysis of shard-based permissionless blockchains,” IEEE
Access, 2018.
[32] S. Kim, “Two-phase cooperative bargaining game approach for shard-
based blockchain consensus scheme,” IEEE Access, 2019.
[33] S. Micali, M. Rabin, and S. Vadhan, “Veriﬁable random functions,” in
40th Annual Symposium on Foundations of Computer Science (Cat. No.
99CB37039), pp. 120–130, IEEE, 1999.
[34] Algorand Foundation, “Token dynamics.” https://algorand.foundation/
token-dynamics.
foundation/rewards-faq.
[35] Algorand Foundation, “Rewards - an faq for users.” https://algorand.
[36] D. Deka, A. Singh, and P. Jain, “Algorand discrete event simulator.”
GitHub, May 2019. Source is available at https://github.com/ddeka0/
CS620-Algorand-DES.
[37] “Algorand explorer.” https://algoexplorer.io.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:36:15 UTC from IEEE Xplore.  Restrictions apply. 
463