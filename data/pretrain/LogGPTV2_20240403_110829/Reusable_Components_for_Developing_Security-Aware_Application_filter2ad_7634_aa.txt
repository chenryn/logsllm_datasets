# Reusable Components for Developing Security-Aware Applications

**Authors:**
- Stefan Probst
- Wolfgang Eßmayr
- Edgar R. Weippl

**Affiliation:**
Software Competence Center Hagenberg  
Emails: {stefan.probst, wolfgang.essmayr, edgar.weippl}@scch.at

## Abstract
In today's multi-tier application development, security is a critical aspect. Well-researched access control concepts, proven in mainframe computing, are often overlooked in contemporary multi-tier applications. One reason for this may be the lack of appropriate reusable components that support developers, who frequently have to reinvent the wheel when implementing access controls. This paper aims to raise awareness of the challenges in developing security-aware applications and to present a suitable approach. Our framework, called GAMMA (Generic Authorization Mechanisms for Multi-Tier Applications), provides several authentication, access control, and auditing mechanisms. These mechanisms can be combined or used simultaneously to offer highly customizable, application-specific security. Additionally, the component-based structure of GAMMA allows for easy integration of new security models and additional approaches for authentication or auditing.

## 1. Introduction
Security is increasingly recognized as an "enabling technology" in our interconnected society. However, we are witnessing a growing number of security breaches, often accompanied by significant financial losses for affected enterprises. In modern, multi-tier application architectures, the consistent and transparent enforcement of security mechanisms at the application and business-logic levels is crucial to combat this trend (see [1], [2]).

Figure 1 illustrates the different levels of security mechanisms. While reusable components for lower-level IT security, such as cryptography and communication security, are readily available, higher-level mechanisms like authorization models, access controls, authentication, and auditing require specific platforms (e.g., .NET, J2EE) and are often not sufficiently adaptable to complex application requirements (see [3]). As a result, the implementation of high-level security mechanisms at the application and business-logic layers often leads to the repeated reinvention of solutions.

![Levels of Security Mechanisms](figure1.png)

In this work, we present the design and Java implementation of a security framework called GAMMA (Generic Authorization Mechanisms for Multi-Tier Applications). The framework includes a set of components that offer a range of high-level security mechanisms, such as discretionary access controls (DAC), role-based access controls (RBAC), and the ability to use multiple concurrent authorization models. It also supports negative authorization and arbitrary constraints like separation-of-duty. The design emphasizes platform independence, allowing for future implementations on other platforms and programming languages.

The remainder of this paper is structured as follows: Section 2 discusses general issues for a generic security framework and provides related work. Section 3 presents the set of components designed to offer high-level security mechanisms. Section 4 addresses the realization issues encountered during the implementation of the GAMMA framework. Section 5 briefly sketches an example showing the application of the framework. Finally, Section 6 concludes and outlines future activities.

## 2. Generic Security Framework
Modern software applications are typically realized using a multi-tier architecture, where the software is divided into several tiers or layers based on functionality. Each layer communicates with the underlying or superior layer through well-defined interfaces.

### 2.1. Architecture for Multi-Tier Security
Figure 2 illustrates the layered architecture conceived for providing high-level security mechanisms in multi-tier environments. A security layer is established between the business and backend layers, with a distinct interface to the backend layer (i.e., data providers) for exchanging security data. A security connector serves as the entry point from the business (or application) layer to the security layer. The security layer contains high-level components for security coordination, including a security manager, and mechanisms for authentication, access control, and auditing.

![Architecture for Multi-Tier Security](figure2.png)

### 2.2. Target Groups of the Framework
We categorize the potential target users of the framework into five groups, as shown in Figure 3. The users of business applications benefit from the high-level security mechanisms provided by the framework. Business application developers integrate these security mechanisms into their applications, while security administrators set up and configure the framework’s mechanisms. Model providers introduce new access control models into the framework without modifying the core, and framework architects are responsible for the design, implementation, maintenance, and further development of the security framework.

![Target Groups of the Framework](figure3.png)

This categorization is not exclusive; it describes interactions rather than users, and many individuals may belong to multiple groups.

### 2.3. Related Work
#### 2.3.1. Distributed Authorization Systems
- **SESAME [5]**: Provides authentication, authorization, access control, and auditing. Based on Kerberos, it offers role-based access control but does not allow customization or the use of multiple concurrent access control models.
- **Adage [6]**: Offers authentication, authorization, and access control, along with auditing in distributed environments. It provides a user-centered expression and enforcement of security policies and has a modular architecture. However, it offers limited support for application developers and requires substantial effort to define access control models other than RBAC.

#### 2.3.2. Authorization Systems for the Java Platform
- **JSEF [7]**: A security framework that actively supports application developers by providing a class library and API for designing and implementing Java applications.

## 3. High-Level Security Mechanisms
In this section, we present the set of components designed to offer high-level security mechanisms within the GAMMA framework. These components include:

- **Authentication**: Supports various methods such as password, challenge-response, biometrics, and Kerberos.
- **Access Control**: Includes discretionary access controls (DAC), role-based access controls (RBAC), and the ability to use multiple concurrent authorization models.
- **Auditing**: Provides mechanisms for logging and monitoring security-related events.
- **Infrastructure**: Enforces the aforementioned security mechanisms, ensuring seamless integration and operation.

## 4. Realization Issues
During the implementation of the GAMMA framework, several realization issues were encountered. These included the need for a flexible and extensible architecture, the integration of multiple security models, and the provision of a user-friendly API for developers. The component-based design of GAMMA allowed for the modular addition of new security features and the adaptation of existing ones to meet specific application requirements.

## 5. Example Application
To illustrate the application of the GAMMA framework, we provide a brief example. This example demonstrates how the framework can be integrated into a multi-tier application to enforce high-level security mechanisms, such as role-based access control and auditing. The example highlights the ease of use and the flexibility of the framework in supporting diverse security needs.

## 6. Conclusion and Future Work
In conclusion, the GAMMA framework provides a robust and flexible solution for integrating high-level security mechanisms into multi-tier applications. The framework's component-based design and platform independence make it a valuable tool for application developers. Future work will focus on expanding the framework to support additional security models and enhancing its usability for a broader range of applications.

---

**References:**
- [1] Reference 1
- [2] Reference 2
- [3] Reference 3
- [4] Reference 4
- [5] SESAME
- [6] Adage
- [7] JSEF