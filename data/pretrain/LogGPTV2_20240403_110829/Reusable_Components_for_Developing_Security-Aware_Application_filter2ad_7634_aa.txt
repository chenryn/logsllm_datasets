title:Reusable Components for Developing Security-Aware Application
author:Stefan Probst and
Wolfgang Eßmayr and
Edgar R. Weippl
Reusable Components for Developing Security-Aware Applications 
Stefan Probst, Wolfgang Essmayr, Edgar Weippl 
Software Competence Center Hagenberg 
{stefan.probst, wolfgang.essmayr, edgar.weippl}@scch.at 
Abstract 
Today,  security  is  considered  to  be  an  important 
aspect of multi-tier application development. Thoroughly 
researched  concepts  for  access  control  exist  and  have 
been proven in mainframe computing. However, they are 
often  not  used  in  today’s  development  of  multi-tier 
applications. One reason may be the lack of appropriate 
reusable components that support application developers 
that frequently have to re-invent the wheel when it comes 
to access controls. The goal of this paper is to promote 
awareness  of 
issues  when  developing 
applications  and  to  illustrate  a  suitable  approach  for 
that.  Our 
(Generic 
Authorization  Mechanisms  for  Multi-Tier  Applications) 
offers  several  authentication,  access  control,  and 
auditing  mechanisms.  Access  control  models  can  be 
combined  or  used  simultaneously  in  order  to  provide 
application-specific 
customizable 
mechanisms.  Moreover,  due  to  its  component-based 
structure,  new 
security  models  and  additional 
approaches for authentication or auditing can easily be 
added. 
called  GAMMA 
framework 
security 
highly 
and 
1. Introduction 
technology“  within  our 
Security  achieves  more  and  more  acceptance  as 
„enabling 
Inter-networked 
society.  Currently,  we  experience  a  lot  of  security 
infringements  being 
increasingly  accompanied  with 
substantial  financial  losses  of  the  attacked  enterprises. 
Within  modern,  multi-tier  application  architectures  the 
consistent  and 
transparent  enforcement  of  security 
mechanisms  especially  at  the  application- and business-
logic levels can be a decisive measure against this trend 
(compare [1], [2]). 
As  illustrated  in  Figure  1  there  are  several  levels  of 
security  mechanisms.  Reusable  components  for 
the 
development of security-aware applications are available 
especially  for  the  lower  levels  of  IT  security,  namely, 
cryptography and communication security. At the higher 
levels, 
i.e.  authorization  models,  access  controls, 
authentication,  and  auditing,  adequate  components 
require  a  specific  platform  and/or  architecture  (e.g. 
.NET,  J2EE)  and  are  most  of  the  time  not  expressive 
enough  respectively  cannot  be  sufficiently  adapted  to 
complex 
[3]). 
Consequently,  the  enforcement  of  high-level  security 
mechanisms at the application- and business-logic layers 
results  in  a  practice  of  permanently  re-inventing  the 
wheel. 
requirements 
application 
(see 
Authorization & Access Control
Authorization & Access Control
(z.B. DAC, RBAC, MAC)
(z.B. DAC, RBAC, MAC)
Authentication
Authentication
(e.g. Password, Challenge-
(e.g. Password, Challenge-
Response, Biometrics, Kerberos)
Response, Biometrics, Kerberos)
Auditing
Auditing
Communication Security
Communication Security
(e.g. VPN, IPsec, SSL/TLS, S/MIME, Firewalls)
(e.g. VPN, IPsec, SSL/TLS, S/MIME, Firewalls)
Cryptography
Cryptography
(e.g. Hashing, Ciphers, Digital Signatures, Certificates)
(e.g. Hashing, Ciphers, Digital Signatures, Certificates)
Figure 1 Levels of security mechanisms. 
(RBAC), 
role-based  access  controls 
In  this  work,  we  present  the  design  and  Java 
implementation of a security framework called GAMMA 
(Generic  Authorization  Mechanisms  for  Multi-Tier 
Applications).  The 
framework  contains  a  set  of 
components  offering  a  range  of  high-level  security 
mechanisms 
including  discretionary  access  controls 
(DAC), 
the 
possibility  to  use  multiple  concurrent  authorization 
models,  support  of  negative  authorization,  or  arbitrary 
constraints such as separation-of-duty, which are ready to 
be  used  for  application  development.  The  design 
especially 
architecture 
independency, allowing us to transfer the implementation 
to other platforms and programming languages in future. 
The  remainder  of  this  paper  is  structured  as  follows: 
section  2  discusses  general  issues  for  a  generic  security 
framework and provides related work. Section 3 presents 
the  set  of  components  designed  for  offering  high-level 
security  mechanisms.  Section  4  discusses  realization 
issues  encountered  during 
the 
focuses  on  platform 
implementation  of 
and 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
GAMMA  framework.  Furthermore,  section  5  briefly 
sketches  an  example  showing  the  application  of  the 
framework.  Finally,  section  6  concludes  and  gives  an 
outlook on future activities. 
2. Generic security framework 
Modern  software  applications  are  realized  using  a 
multi-tier  architecture.  The  software  is  divided  into 
several tiers or layers according to its functionality. Each 
layer  is  able  to  communicate  with  the  underlying  or 
superior layer via a well-defined interface. 
Figure 2 illustrates the layered architecture conceived 
for  providing  high-level  security  mechanisms  in  multi-
tier environments. 
Application Layer
Business Layer
Security Connector
Security Manager
Access 
Control
Authen-
tication
Auditing
Infrastructure (Data Provider)
Backend Layer
r
e
y
a
L
y
t
i
r
u
c
e
S
for 
high-level 
integrating 
in  developing 
applications  using 
using. However, there is no direct link between the users 
and  the  framework.  Business  application  developers  are 
the 
interested 
framework 
security 
mechanisms in their business applications. If they input 
anything into the framework, it is in terms of new ideas 
and visions that will be realized by framework architects, 
who  are  responsible  for  the  design,  implementation, 
maintenance,  and  further  development  of  the  security 
framework  itself.  Model  providers  are  in  charge  of 
introducing  new  access  control  models 
the 
framework.  This  can  be  done  without  modifying  the 
framework  kernel,  which  will  only  be  changed  by 
framework  architects.  Security  administrators  are 
responsible  for  setting  up  the  framework’s  mechanisms. 
Primarily,  their  work  consists  of  realizing  the  security 
policy  in  defining  the  access  rights  and  the  mapping 
between  the  several  domains  and  layers.  In  principle, 
they  will  work  together  with  the  business  application 
developers. 
into 
Business
Application
Developers
Security
Administrators
GAMMA
Framework
Users of
Business
Applications
Model
Provider
Framework
Architect
Figure 2 Architecture for multi-tier security. 
Figure 3 Target groups of the framework. 
In particular, a security layer is established in between 
the business and backend layers of the architecture. The 
security layer has a distinct interface to the backend layer 
(i.e.  data  providers)  exchanging  security  data  with 
backend  systems.  Furthermore,  a  particular  component 
(i.e. a security connector) is offered, which is to be used 
as entry point from the business- (or application) to the 
security  layer.  Finally,  the  security  layer  contains  high-
level  components  for  security  coordination  in  general 
(i.e.  the  security  manager),  for  the  provided  security 
mechanisms 
control, 
auditing),  and  for  the  infrastructure  required  to  enforce 
the  aforementioned  security  mechanisms.  A  detailed 
description of the components is given in section 3. 
authentication, 
access 
The  security  layer  consists  of  a  set  of  classes  with  a 
common  focus  (i.e.  security)  and  can  thus  be  called 
framework.  We  categorize  the  potential  target  users  of 
the framework into five groups as illustrated in Figure 3.  
The users of business applications benefit from using 
applications that contain high-level security mechanisms. 
The connection between the users and the framework is 
given by an increased confidence in the software they are 
(i.e. 
This categorization is not intended to be exclusive; it 
is  a  categorization  of  interactions  rather  than  of  users. 
Moreover many users will belong to several groups. 
2.1. Related Work 
Within existing solutions for distributed authorization 
(compare  [4]),  we  especially  concentrated  on  solutions 
that  support  application  developers 
implement 
distributed software applications. Furthermore, we looked 
at existing architectures (e.g. Microsoft .NET, Sun’s Java 
2 Platform) and compared them with respect to security 
features according to our requirements. 
to 
an 
for 
infrastructure 
2.1.1. Distributed Authorization Systems. SESAME [5] 
provides 
authentication, 
authorization and access control as well as auditing. This 
distributed  security  system  is  based  upon  Kerberos  and 
provides  role-based  access  control.  SESAME  does  not 
allow customizing or changing access control models to 
special  application  requirements.  Furthermore,  multiple 
concurrent access control models cannot be applied at a 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
by 
time.  Summarizing,  SESAME  is  a  distributed  security 
system  and  has  not  especially  been  developed  for 
supporting 
reusable 
components. 
development 
application 
The  Adage  system  [6]  provides  authentication, 
authorization  and  access  control  as  well  as  auditing  in 
distributed  environments.  Adage  offers  a  user-centered 
expression  and  enforcement  of  security  policies  and 
enables  integration  in  systems  due  to  its  modular 
architecture.  However,  application  developers  have 
limited  support  by  Adage’s  API.  Furthermore,  access 
control  models  other  than  RBAC  can  be  defined  but 
require  substantial  effort  to  provide  them.  Nevertheless, 
the  Adage  architecture  gives  important  input  due  to  its 
modular  structure  of  authorization  components  that 
enable flexible and adaptable distributed authorization. 
2.1.2.  Authorization  Systems  for  the  Java  Platform. 
There  are  a  number  of  systems  that  actively  support 
application  developers  by  providing  a  framework,  class-
library or API that can be used instantly when designing 
and implementing Java applications. 
JSEF  [7] 
is  a  security  framework 