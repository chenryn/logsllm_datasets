### APK Compilation and Structure

When an APK is signed with a release key, it must be zip-aligned using the `zipalign` tool. This process optimizes the alignment of application resources in memory, thereby reducing the amount of RAM consumed when the application runs. The compilation process, which includes these tasks, is typically handled automatically by your Integrated Development Environment (IDE) but is crucial for understanding how code becomes a complete package.

Upon unzipping an APK, you will see the final product of all the steps listed above. Every APK follows a strictly defined folder structure:

- **/assets**: This directory allows developers to include files that should be bundled with the application.
- **/res**: Contains all the application's activity layouts, images, and other structured files that can be accessed from the code. These files are often placed in the `raw/` subdirectory.
- **/lib**: Contains native libraries bundled with the application, organized by architecture (e.g., x86, ARM, MIPS).
- **/META-INF**: This folder holds the application's certificate and files that list all included files in the ZIP archive along with their hashes.
- **AndroidManifest.xml**: The manifest file contains all configuration information about the application, including security parameters.
- **classes.dex**: This file contains the Dalvik bytecode, which is the executable code that runs on the Dalvik Virtual Machine.
- **resources.arsc**: This file contains compiled resources, including application strings.

### Installing Packages

The process of downloading and installing an application from the Google Play Store is more complex than it might seem. A simple approach would be to have the Play Store app visit a website, allowing users to browse and download APKs over HTTPS. However, this method lacks security, as the operating system cannot verify the authenticity and safety of the downloaded package.

Instead, Google implemented a robust and modular installation process. When you click the "Install" button on the Google Play app or website, the GTalkService is invoked on the device. This service, which is part of every Android device, maintains a secure, pinned SSL connection to Google's infrastructure. It handles cases where the device is offline or in a low-signal area by queuing the message and delivering it when the device comes online.

Android's openness allows users to install applications from various sources, not just the Play Store. Alternative app stores like Samsung Apps, Amazon Appstore, GetJar, SlideMe, F-Droid, and others are popular options. Additionally, users can install APKs directly if they have access to the file.

#### Using ADB to Install APKs

One of the simplest ways to install an APK is by using the Android Debug Bridge (ADB). Assuming a correct SDK installation, ADB will be on your PATH. To install an APK, use the following command:

```sh
$ adb install /path/to/yourapplication.apk
```

**Note:** USB Debugging must be enabled in the device settings, and a physical connection between the device and the computer is required. On Android 4.2.2 and later, you may need to accept a prompt to allow your computer to connect.

#### Hosting APKs on a Web Server

Another method is to host the APK on a web server. Some developers choose to serve their applications directly from their websites. You can host the contents of your current folder using Python with the following command:

```sh
$ python -m SimpleHTTPServer
```

Then, browse to `http://your_computer_ip:8000` on your device and click on the APK to start the installation. Ensure that the "Unknown sources" option is enabled in your device settings.

### Exploring Android Internals

To understand the internals of Android, you can explore an emulator or device with some basic knowledge. Tools like ADB and BusyBox are invaluable for this purpose.

#### ADB

ADB is the most useful SDK tool for exploring Android. Here are some common ADB commands:

- List connected devices: `adb devices`
- Get a shell on a device: `adb shell`
- Perform a shell command and return: `adb shell <command>`
- Push a file to a device: `adb push /path/to/local/file /path/on/android/device`
- Retrieve a file from a device: `adb pull /path/on/android/device /path/to/local/file`
- Forward a TCP port: `adb forward tcp:<local_port> tcp:<device_port>`
- View device logs: `adb logcat`

If multiple devices are connected, use the `-s <device_id>` argument to specify the target device. For a single device and an emulator, use `-d` (for device) and `-e` (for emulator).

#### BusyBox

BusyBox combines many standard Linux utilities into a single binary. Contrary to common belief, running BusyBox on Android does not require root access. You can compile BusyBox with the necessary utilities or download a pre-compiled binary from the BusyBox website.

To install BusyBox on an Android device:

1. Download the appropriate BusyBox binary (e.g., ARMv7).
2. Push the binary to the `/data/local/tmp` directory:
   ```sh
   $ adb push busybox-armv7l /data/local/tmp
   ```
3. Get a shell on the device, navigate to the directory, and make the binary executable:
   ```sh
   shell@android:/ $ cd /data/local/tmp
   shell@android:/data/local/tmp $ chmod 755 busybox-armv7l
   ```

#### Standard Android Tools

Some useful tools in the `/system/bin` directory include:

- **pm**: The package manager utility for managing installed packages.
  - List all installed packages: `pm list packages`
  - Find the stored APK path: `pm path <package_name>`
  - Install a package: `pm install /path/to/apk`
  - Uninstall a package: `pm uninstall <package_name>`
  - Disable an installed application: `pm disable <package_name>`
- **logcat**: View system and application logs.
  - View all logs: `logcat`
  - Filter logs by tag: `logcat -s <tag>`
- **getprop**: Retrieve system properties.
- **dumpsys**: Display information about system services.

### Using drozer for Security Testing

drozer is a powerful tool for assessing Android security. It was initially released as Mercury at Blackhat EU in March 2012. drozer has two main use cases:

- **Finding vulnerabilities**: Allows you to interact with other apps and the OS to identify vulnerabilities.
- **Exploiting known vulnerabilities**: Provides exploits and payloads to gain remote access to Android devices.

#### drozer Components

- **Agent**: A lightweight Android application that runs on the device or emulator.
- **Console**: A command-line interface on your computer for interacting with the agent.
- **Server**: A central point for consoles and agents to connect and exchange data.

#### Installing drozer

To set up drozer, download the appropriate package from the official website. The tool requires:

- Python 2.7
- Java Development Kit (JDK) 1.6
- Android SDK
- ADB on your PATH
- Java on your PATH

Install the drozer agent on your Android device using ADB:

```sh
$ adb install agent.apk
```

#### Starting a Session

1. Set up port forwarding:
   ```sh
   $ adb forward tcp:31415 tcp:31415
   ```
2. Open the drozer agent on the device and enable the Embedded Server.
3. Connect to the agent from your computer:
   ```sh
   $ drozer console connect
   ```

You should now see a drozer command prompt confirming your device ID.