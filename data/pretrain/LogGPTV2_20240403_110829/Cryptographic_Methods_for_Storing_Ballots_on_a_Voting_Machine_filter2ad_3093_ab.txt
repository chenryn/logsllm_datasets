from the security of (G, S, V ) by a straightforward argu-
ment. We note that during the append-only unforgeability
game the simulator issues a single chosen-message query
for PK. Hence, it sufﬁces that (G, S, V ) is existentially un-
forgeable against a single-query chosen message attack. In
particular, (G, S, V ) can be a one-time signature.
Performance. The size of Φ is always O(L). The time to
verify a signature is O(L) no matter how many messages
were appended to Φ.
Subliminal-freeness. We point out that this system is
not subliminal-free.
In particular, the machine running
the Append algorithm could choose the random r pseudo-
randomly so as to leak the order in which messages were
added. For example, let k be a secret key embedded in the
voting terminal. When appending the ith message, the vot-
ing terminal can choose the randomness r as r ← F (k, i)
where F is a pseudo-random permutation such as AES. The
ﬁnal signature Φ will appear to be properly generated. How-
ever, anyone who knows k can recover the exact order in
which messages were appended.
Bounding the number of messages. The system needs
an a-priori upper bound on the number of messages to be
signed. For voting machines this is easily provided; a gen-
erous estimate suggests that less than 3,000 votes across all
individual races may be cast in one day at a particular vot-
ing machine based on the time necessary to cast each [15].
Tripling this for safety, we may assume that well under
9,000 messages will need to be signed at each machine, a
relatively small number.
4 An Efﬁcient Construction
The test on line (∗) is crucial for security — with-
out it there is a trivial attack on the system. To test
that Yi is a valid signing key for PKi one can test that
V (PKi, m, S(Yi, m)) outputs True for some arbitrary
message m.
The system clearly satisﬁes the correctness property for
HHAOS as long as Append is activated no more than L
times. Security follows from the security of the underlying
signature system (G, S, V ) and the collision resistance of
H.
Our second construction, HHAOSE, reduces the size of
Φ so that its size at any moment depends only upon the
number of messages signed so far. Also, the amount of data
per message is far less than in the previous system. More
importantly, a further beneﬁt of this construction is that it
can evade the subliminal attack on the ﬁrst system.
Recall that the system of Section 3 stores in Φ a list of
public-keys plus a list of signatures. At a high level, our sec-
ond system improves upon the previous scheme using two
ideas. First, we plan to use an aggregate signature system
to aggregate all the signatures in Φ into a single short sig-
nature. Recall that an aggregate signature system can com-
press a set of signatures from different public keys and on
different messages into a single signature. We will use the
BGLS aggregate signature system [2, 3] for this purpose.
Second, and more importantly, we use the fact that a
BGLS aggregate signature cannot be de-aggregated. That
is, given an aggregate signature it is not possible to remove
any signature from the aggregate. This in turn means that
we do not need to pre-generate all the public keys as we
did in the previous section. Instead, the Append algorithm
can generate public / private key pairs on the ﬂy and simply
append the resulting public-key to Φ. As a result, Φ now
grows by one public-key per message signed.
4.1 Background
The second construction uses bilinear maps, which we
now brieﬂy review. For further background see [2]. Let G
and GT be multiplicative groups of prime order p. Let g be
a generator of G. Then a computable map e : G × G → GT
is a bilinear map if
∀x, y ∈ G, ∀a, b ∈ Z,
e(xa, yb) = e(x, y)ab
(bilinearity)
and e(g, g) 6= 1 (non-degeneracy). Several efﬁcient im-
plementations of bilinear maps (e.g., the Weil pairing) are
currently available [13]. We also assume a hash function
H : {0, 1}∗ → G that we model as a random oracle.
4.2 Algorithms
KeyGen(1κ) → PK, Φ
Fix groups G and GT of order p, where the size of
p is a determined by the security parameter κ. Pick
a generator g of the group G and a random exponent
α R←− Zp. Output
PK ← (g, e(g, g)α)
and
Φ ← (gα, {})
Here Φ is a signature on the empty set. The exponent
α is discarded.
Append(Φ, x) → Φ′
Given a signature Φ = (S1, S2) and a new string
x ∈ {0, 1}∗, randomly select r R←− Zp and output the
following as the new signature.
Φ′ ←(cid:0) S1 · H(x)r, S2 ∪ {(x, gr)}(cid:1)
Verify(PK, X, Φ) → {True, False}
Let PK = (g, u = e(g, g)α) be a public key,
X = {ˆx1, ˆx2, . . . , ˆxn} a set of strings, and Φ =
(S1, S2) a signature. Then given S1 ∈ G and S2 =
{(x1, z1), (x2, z2), . . . , (xℓ, zℓ)}, compute
v ← e(g, S1) ·(cid:16)
e(H(xi), zi)(cid:17)−1
.
ℓ
Yi=1
If u = v and X = {x1, . . . , xℓ} output true, otherwise
output false.
We note that if the set S2 contained in Φ is represented as
an ordered list then Append must randomly permute the or-
dering of the elements before outputting Φ′. This is crucial
for history-hiding.
4.3 Properties
The following three theorems correspond to the correct-
ness and security properties given in Section 2. Correctness
is a matter of simple algebra, append only unforgeability
follows from the computational Difﬁe-Hellman assumption,
and history-hiding may be proven with no assumptions. The
proofs are given in Appendix A. The history-hiding proof
also demonstrates that HHAOSE (like HHAOSS) is actu-
ally fully history-independent in addition to being history-
hiding.
Theorem 2. HHAOSE is correct.
Theorem 3. If the computational Difﬁe-Hellman assump-
tion holds in G, then HHAOSE is append only unforgeable
in the random oracle model.
Theorem 4. HHAOSE is history-hiding.
The proof of Theorem 3 uses the fact that a BGLS ag-
gregate signature cannot be de-aggregated. That is, given
an aggregate signature on a set of messages X it is difﬁcult
to recover an aggregate for a subset of X. This property
was already discussed in [2]. Coron and Naccache [6] later
showed that de-aggregation is as hard as the Computational
Difﬁe-Hellman problem.
The append-only requirement (Game 1), however, is
more strict than de-aggregation — we require that the ad-
versary not be able to produce an aggregate signature on
any set Y where X 6⊆ Y . Hence, append-only security
is not directly implied by the difﬁculty of de-aggregation in
BGLS. Our proof of Theorem 4.3 shows that the system has
the append-only property. The proof is a little simpler than
the proof in [6] since our settings are more ﬂexible.
4.4 Performance
The algorithms KeyGen and Append have very modest
computation requirements; Verify is somewhat more expen-
sive. The KeyGen algorithm requires two modular expo-
nentiations (the pairing can be precomputed). The Append
algorithm requires two modular exponentiations, one mod-
ular multiplication, and one evaluation of the hash function
H. The Verify algorithm requires |X|+1 pairings, |X| mod-
ular multiplications, and |X| evaluations of H. The space
(in bits) required to store a history-hiding append only sig-
nature Φ for a set X is ℓ1 + (|X| + 1) · ℓ2, where ℓ1 is the
number of bits required to store the strings in X and ℓ2 is
the length of a group element from G.
4.5 Subliminal Free Rerandomization
As described, the construction of Section 4.2 contains
subliminal channels that could be used by a malicious
implementation of the Append algorithm to violate the
history-hiding property. As in the previous section, the val-
ues ri can be used to leak the order in which votes were
added.
This situation can be remedied by adding the following
Rerandomize operation.
Rerandomize(Φ) → Φ′
Given a signature Φ = (S1, S2), where
S2 = {(x1, y1), (x2, y2), . . . (xn, yn)},
R←− Zp and compute
select s1, s2, . . . sn
for all i ∈ {1, . . . n}
y′
i = yi · gsi
S′
1 = S1 · H(x1)s1 · H(x2)s2 · · · H(xn)sn
S′
2 = {(x1, y′
n)} .
1), (x2, y′
2), . . . (xn, y′
Output Φ′ = (S′
1, S′
2).
The signature Φ′ is then another correct signature for the
same set, but with rerandomized values r1 + s1, r2 + s2,
etc. As in the Append algorithm, if the set S′
2 within Φ′
is produced as a list, the elements should ﬁrst be randomly
permuted.
If a signature Φ is produced by a potentially malicious
server, its subliminal channels may be cleaned by having
several parties run the Rerandomize algorithm on it. If any
one of those parties is honest, then the subliminal chan-
nels will not contain any of the original information from
the malicious server. This re-randomization can take place
when the election is closed and before Φ is made public.
5 Secure Vote Storage
Now that we have introduced the HHAOS cryptographic
primitive and given two constructions realizing it, we fur-
ther consider its practical use in a Direct Recording Elec-
tronic (DRE) voting machine. We tailor our description to
the use of the more efﬁcient construction, HHAOSE. First
we will lay out our general assumptions regarding the hard-
ware architecture of an electronic voting machine. Having
established a reference platform, we will then describe each
of several isolated modules and their relationships. These
may be software modules on the same hardware, or hard-
ware isolation may be employed [17]. Finally we will con-
sider the operational procedures that should be carried out
by poll workers and election ofﬁcials to initialize the voting
machines, provide access to voters, and verify results.
5.1 Hardware
Although the HHAOS scheme may be used with a wide
range of potential DRE equipment, we base our discussion
on commodity PC machines such as those suggested by the
Open Voting Consortium (OVC) as a part of their architec-
ture for an open, veriﬁable electronic voting system [10].
Speciﬁcally, the OVC recommends the use of a commod-
ity PC with a locked case. The machine would most likely
not have a hard drive, but instead boot from a publicly re-
viewed CD distributed before the election which contains
the operating system (e.g., a stripped down Linux distribu-
tion), the voting machine software, and lists of candidates.
Each machine would include a printer and a removable ﬂash
memory (i.e., a USB drive or a Secure Digital memory card)
on which to record the electronic ballots. Input may be ob-
tained through a touch screen or key pad.
In addition, we require that each machine have a small
amount of internal non-volatile memory (e.g. ﬂash) in
which to store the initial history-hiding append only sig-
nature when the machine is initialized. We also assume
the availability of a reasonably secure random number gen-
erator, such as the /dev/urandom device provided by
the Linux kernel. The hardware assumptions of this PC-
based architecture are consistent with recent work on high-
assurance voting machines [15, 18] in addition to the OVC
proposals, although the previously proposed PROM-based
vote storage method only requires a random number gener-
ator if the “random placement table” technique is used. The
HHAOS scheme for vote storage could also be employed
within a system far less capable than a PC, such as the gum
stick sized motherboards produced by Gumstix, Inc. and
used in the prototype system of Sastry, et al. [17].
5.2 Modules
User interface module. Figure 1 depicts the relationship
between several isolated modules, the ﬁrst of which is the
user interface module. The user interface module is the
component of the electronic voting machine that interacts
with a voter to present them with the election choices and
produce their completed ballot.
Ideally, its source code
should be small and easy to publicly verify [18]. After inter-
acting with the voter, it invokes the InsertBallot procedure
of the cryptographic vote storage module (CVSM). In de-
DRE Voting Machine
User
Interface
Open
InsertBallot
Close
Cryptographic
Vote Storage
Module
Evolving
Sig.
Φi
WriteBlock
Totals
 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

Public Key
Fingerprint
CF20 6A5C D8E6
Flash
Memory
trusted communication
or transport
untrusted
communication
or transport
Verification and
Aggregation
Figure 1. Relationships between modules in
a DRE voting machine architecture.
scribing the CVSM, we consider the ballots received from
the user interface module to be simple bitstrings which are
accumulated in a multiset. Each string which corresponds
to a vote in a single electoral race.2 Additionally, the user
interface module provides poll workers with a means to set
up the machine before polling begins and close the polls
at the end of the polling period. These features invoke the
Open and Close procedures of the CVSM.
Cryptographic vote storage module. The CVSM em-
ploys the HHAOS scheme of Section 4 to store the multi-
set of ballots on the removable ﬂash memory while provid-
ing tamper evidence and maintaining history-independence.
Here we give a high level description of the values stored in
the CVSM and how they are updated. For concreteness, we
give a more detailed description in Appendix B.
When the Open procedure is invoked by the user inter-
face module, the CVSM uses the KeyGen algorithm of the
HHAOS scheme to create a public key and initial signature.
The public key is saved on the removable memory and a
ﬁngerprint (i.e., collision resistant hash) is printed using the
printer attached to the machine. The handling of this sheet