2[0-3]|[o1]?[0-9]. Again, the question mark allows the first 10 hours to be written
with a single digit. Whether you’re working with a 12- or 24-hour clock, remove the
question mark to require two digits.
We put parentheses around the parts of the regex that match the hours, minutes, and
seconds. That makes it easy to retrieve the digits for the hours, minutes, and seconds,
without the colons. Recipe 2.9 explains how parentheses create capturing groups.
Recipe 3.9 explains how you can retreve the text matched by those capruring groups
in procedural code.
The parentheses around the hour part keeps rwo altermatives for the hour together. If
you remove those parentheses, the regex won’t work correctly. Removing the paren-
theses around the minutes and seconds has no effect, other than making it impossible
to retrieve their digits separately.
On a 12-hour clock, we allow the time to be followed by AM or PM. We also allow a
space between the time and the AM/PM indicator.  groups the space and the indicator, and makes
even when the indicator is omitted.
4.6 Validate Traditional ime Fermats | 267
---
## Page 284
Variations
If you want to search for times in larger bodies of text instead of checking whether
the input as a whole is a time, you cannot use the anchors (*> and $. Merely removing
the anchors from the regular expression is not the right solution. That would allow the
hour and minute regexes to match 12:12 within 9912:1299, for instance. Instead of
anchoring the regex match to the start and end of the subject, you have to specify that
the time cannot be part of longer sequences of digits.
This is easily done with a pair of word boundaries. In regular expressions, digits are
treated as characters that can be part of words. Replace both ^) and  with \b. As
an example:
\b(2[0-3]1[01]?[0-9]) :([0-5]?[0-9])\b
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Word boundaries don’t disallow everything; they only disallow letters, digits and un-
derscores. The regex just shown, which matches hours and minutes on a 24-hour clock,
matches 16:08 within the subject text The time 1s 16:08:42 sharp. The space is not a
word character, whereas the 1 is, so the word boundary matches between them. The
8 is a word character, whereas the colon isn’t, so b> also matches berween those two.
If you want to disallow colons as well as word characters, you need to use lookaround
(see Recipe 2.16), as shown in the following regex. Unlike before, this regex will not
match any part of The time 1s 16:08:42 sharp. It only works with flavors that support
lookbehind:
(?[0-9]{4})-(?1[0-2]|o[1-9]}$
Regex options: None
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
Python uses a different syntax for named capture, adding a P. For brevity, we only show
one solution using the Python syntax. All the other solutions using .NET-style named
capture can be easily adapted to Python-style named capture in the same way.
(?P[0-9]{4}) -(?P1[0-2]|o[1-9])$
Regex options: None
Regexflavers: PCRE, Python
ISO 8601 allows hyphens to be omitted from calendar dates, making both 2010-08-20
and 20100820 valid representations of the same date. The following regex accounts for
this, but also allows for invalid formats like YYYY-MMDD and YYYYMM-DD.
([0-9]{4})-?(1[0-2]|0[1-9]}-?(3[01]|0[1-9]1[12][0-9])$
Regex options: None
Regexflaver: .NET, Java, JavaScripr, PCRE, Perl, Python, Ruby
(?[0-9]{4})-?(?1[0-2]|o[1-9]]-?
(?3[01]|0[1-9]l[12][0-9]]$
Regex options: None
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
4.7 Validate IS0 8601 Dates and Times | 269
---
## Page 286
Calendar date, such as 2008-08-30 or 20080830. The hyphens are optional. This regex
uses a capruring group and a backreference to match YYYY-MM-DD or YYYYMMDD,
but not YYYY-MMDD or YYYYMM-DD.
([0-9]{4})()([0-2]|0[1-9])\2(3[01]|0[1-9]][12][0-9]]$
Regexoptions: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
^(?[0-9]{4})(?-?)(?1[0-2]|o[1-9]) 
k(?3[o]|o[1-9]∣[12][0-9]]$
Regex options: None
Regexflarer: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
Python also uses a different syntax for named backreferences:
(?P[0-9]{4})(?P-?)(?P1[0-2]|o[1-9]) +
$([6-][z][6-]o|[o])(uaud=d)
Regex options: None
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
Ordinal date (e.g., 2008-243). The hyphen is optional:
([0-9]{4})-?(36[0-6]|3[0-5][0-9]][12][0-9]{2} 0[1-9][0-9]|00[1-9]]$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
(?[0-9]{4})-?
(?36[0-6]|3[0-5][0-9]][12][0-9]{2}|0[1-9][0-9]|00[1-9]]$
Regex options: None
Regexflavers: .NET, Java 7, PCRE 7, Perl 5.10, Ruby 1.9
Weeks
Week of the year (e.g., 2008-M35). The hyphen is optional:
([0-9]{4})-?W(5[0-3]][1-4][0-9]|0[1-9])$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
^(?[0-9]{4})-?W(?5[0-3]][1-4][0-9]|o[1-9]]$
Regex options: None
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
Week date (e-g., 2008-W35-6). The hyphens are optional.
([0-9]{4})-?W(5[0-3][1-4][0-9]|0[1-9]]-?([1-7]]$
Regexoptions: None
Regexflaver: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
^(?[0-9]{4})-?W(?5[0-3]][1-4][0-9]|o[1-9]) -?(?[1-7]]$
Regex options: None
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
270 | Chapter 4: Validation and Formatting
---
## Page 287
Times
Hours and minutes (e.g, 17:21). The colon is optional:
(2[0-3]][o1][0-9]):?([0-5][0-9])$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
^(?2[0-3]1[o][0-9]) : ?{?[0-5][0-9]]$
Regex options: None
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
Hours, minutes, and seconds (e-g., 17:21:59). The colons are optional:
(2[0-3][o][0-9]) :?[0-5][o-9]]s
^(?2[0-3]][o1][0-9]]: ?(?[0-5][0-9]}:?
Regex options: None
Regexflarer: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
Time zone designator (e-g., Z, +07 or +07:oo). The colons and the minutes are optional:
^(z][+](?:2[0-3][0][0-9])(?::?(?:[0-5][0-9]))?)$
Regex options: None
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Hours, minutes, and seconds with time zone designator (e.g, 17:21:59+07:00), All the
colons are optional. The minutes in the time zone designator are also optional:
(2[0-3]][o1][0-9]):?([0-5][0-9]):?([0-5][0-9])
(Z|[+-]{?:2[0-3]1[o1][0-9])(?::?(?:[0-5][0-9])))$
Regex options: None
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
([6-0][≤-0]）：（[6-0][s-0]):（[6-0][t][-0]）
(?Z|[+-](?:2[0-3]l[o][o-9])(?: :?(?:[0-5][0-9]))?)$
Regexoptions: None
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
Date and time
Calendar date with hours, minutes, and seconds (e.g., 2008-08-30 17 :21:59 or 20080830
172159). A space is required between the date and the time. The hyphens and colons
are optional. This regex matches dates and times that specify some hyphens or colons
but omit others. This does not follow ISO 8601.
^([0-9]{4})-?(1[0-2]]0[1-9]]-?(3[01]|0[1-9]∣[12][0-9]]
$([6-0][5-0]):([6-0][5-0])2:([6-0][0]1[-0]z)
Regex options: None
4.7 Validate IS0 8601 Dates and Times | 271
---
## Page 288
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
(?[0-9]{4})-?(?1[0-2]|o[1-9]]?
?3[01]|o[1-9]∣[12][0-9]}(?2[0-3]][o1][0-9]] +
:?(?[0-5][o-9]):?(? [0-5][o-9]]$
Regex options: None
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
A more complicated solution is needed if we want to match date and time values that
specify either all of the hyphens and colons, or none of them. The cleanest solution is
to use conditionals. But only some flavors support conditionals.
([0-9]{4})(-)？(1[0-2]|0[1-9])(?(2)-)(3[01]|0[1-9]|[12][0-9])
*(2[0-3]][01][0-9])((2):)[0-9]{4})(?-)?(?1[0-2]|o[1-9]) 
?(hyphen) -)(?3[01]|o[1-9]∣[12][0-9])=(?2[0-3]∣[o1][0-9]] 
(?(hyphen) :)(?[0-5][0-9])(?(hyphen) : )(?[0-5][0-9])$
Regexoptions: None
Regexflavers: .NET, PCRE 7, Perl 5.10
(?P[0-9]{4})(?P-)?(?P1[0-2]|o[1-9]) 
?(hyphen) -)(?P3[o1]|o[1-9]|[12][0-9]](?P2[0-3]][o1][0-9]]
(?(hyphen) :)(?P[0-5][0-9])(?(hyphen) :)(?P[0-5][0-9])$
Regexoptions: None
Regexflavers: PCRE, Perl 5.10, Python
If conditionals are not available, then we have to use alternation to spell out the alter-
natives with and without delimiters.
(?:([0-9]{4})-(1[0-2]|0[1-9])-(3[0]|0[1-9]∣[12][0-9]}
*(2[0-3]][01][0-9]] : ?([0-5][0-9]):?([0-5][0-9]]]
（[6-0][]1[6-]0[]）（[6-]0[-0])((}[6-0])
*(2[0-3]][01][0-9])([0-5][0-9])([0-5][0-9]))$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
XML Schema dates and times
The date and time types defined in the XML Schema standard are based on the ISO
8601 standard. The date types allow negative years for years before the start of the
calendar (B.C. years). It also allows for years with more than four digits, but not for
years with fewer than four digits. Years with more than four digits must not have leading
zeros. If you only want to allow years with four digits as in the preceding solutions,
remove -?(?: [1-9][o-9]*)? from the following solutions.
Date, with optional time zone (e-g., 2008-08-30 or 2008-08-30+07:00). Hyphens are
required. This is the XML Schema date type:
272 | Chapter 4: Validation and Formatting
---
## Page 289
(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]]0[1-9]}-(3[01]|0[1-9]][12][0-9]]
(2|[+-]{?:2[0-3]1[o1][0-9]] :[0-5][0-9]]?$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
(?-?(?:[1-9][0-9]*)?[0-9]{4})-(?1[0-2]|o[1-9]]-
(?3[01]10[1-9]][12][0-9]}
(?Z][+-](?:2[0-3]1[oa][0-9]) :[0-5][0-9]]?$
Regex options: None
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
Time, with optional fractional seconds and time zone (e.g-, 01:45:36 or
01:45:36.123+07:00). There is no limit on the number of digits for the fractional sec-
onds. This is the XML Schema tine type:
(2[0-3]][o1][0-9]] :([0-5][0-9]):([0-5][0-9])(\-[0-9]+]?
(Z|[+-](?:2[0-3]][01][0-9]):[0-5][0-9]]?$
Regex options: None
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
(?2[0-3]∣[o][0-9]):(?[0-5][0-9]] :(?[0-5][0-9]]
?\[0-9]+)?(?Z|[+](?:2[0-3]][o1][0-9]): [0-5][0-9]]?$
Regex options: None
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
Date and time, with optional fractional seconds and time zone (e.g-
2008-08-30T01:45:36 or 2008-08-30T01:45:36.123Z). This is the XML. Schema date
Time type:
(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]][12][0-9]]
T(2[0-3]][01][0-9]):([0-5][0-9]):([0-5][0-9])(\-[0-9]+)?
(1[+-](?:2[0-3]1[0][0-9]):[0-5][0-9]]$
Regexoptions: None
Regexflavers: .NET, Java, JavaScripr, PCRE, Perl, Python, Ruby
-([6-]0[-0]）-（{}[6-0]（[6-0][6-]=）-）
(?3[01]|o[1-9]|[12][0-9])T(?2[0-3]][01][0-9]}: 
(?[0-5][0-9]) :(?[0-5][0-9]](?\[0-9]+)?
(?z|[+-](?:2[0-3]1[oa][o-9]):[0-5][0-9]]?$
Regex options: None
Regexflarer: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
Discussion
ISO 8601 defines a wide range of date and time formats. The regular expressions pre-
sented here cover the most common formats, but most systems that use ISO 8601 only
use a subset. For example, in XML Schema dates and times, the hyphens and colons
are mandatory. To make hyphens and colons mandatory, simply remove the question
marks after them. To disallow hyphens and colons, remove the hyphens and colons
along with the question mark that follows them. Do warch out for the noncapruring
4.7 Validate IS0 8601 Dates and Times | 273
---
## Page 290
groups, which use the(?) syntax. Ifaquestion mark and acolonfollowan opening
dnosa Suundeouou e uado siaoeneqp aanq asou *sisouuaued
We put parentheses around all the number parts of the regexes. That makes it easy to
retrieve the numbers for the years, months, days, hours, minutes, seconds, and time
zones. Recipe 2.9 explains how parentheses create capturing groups. Recipe 3.9 ex-
plains how you can retrieve the text matched by those capruring groups in procedural
code.
For most regexes, we also show an altermative using named capture. Some of these date
and time formats may be unfamiliar to you or your fellow developers. Named capture
makes the regex easier to understand. .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, and
Ruby 1.9 support the (?--)> syntax, which adds a P>. See Recipes 2.11 and 3.9 for details.
The number ranges in all the regexes are strict. For example, the calendar day is re-
stricted between 01 and 31. You'll never end up with day 32 or month 13. None of the
regexes here attempts to exclude invalid day and month combinations, such as Febru-
ary 31α; Recipe 4.5 explains how you can deal with that.
The regular expressions, except those in the XML Schema subsection, make the indi-
vidual hyphens and colons optional. This does not follow ISO 8601 exactly. For ex-
ample, 1733:26 is not a valid ISO 8601 time, but will be accepted by the time regexes.
Requiring all hyphens and colons to be present or omitted at the same time makes your
regex quite a bit more complex.
If the delimiters are all the same, we can do this quite easily using a capturing group
for the first delimiter and backreferences for the remaining delimiters. The “dates"
subsection of the *Solution" section shows an example. For the first hyphen, we use
annude> pue uaudKu euopdo ue qpeu o de) 1o (-)> ~>, or (?P=hyphen)> to match the same text that was matched by the cap-
turing group, which is either a hyphen ornothing at al depending n whether thefis
hyphen was matched or not. When using numbered capture, make sure to use the
correct number for the backreference.
If the delimiters are diferent, such as when matching a single string with both a date
and a time, the solution is more complex. The “date and time” subsection shows an
example. This time, we use -)? or -)?> to match the
hyphen. Now the question mark is outside the capturing group so that it will not par-
ticipate in the match at all when the hyphen is omited. This allows us to use the
capturing group with a conditional.  (? (2)) matches a hyphen and  (? (2) :)> matches
274 | Chapter 4: Validation and Formatting