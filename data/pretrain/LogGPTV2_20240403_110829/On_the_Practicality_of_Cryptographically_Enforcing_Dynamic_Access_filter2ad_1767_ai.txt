1988.
[65] S. D. Stoller, P. Yang, C. R. Ramakrishnan, and M. I. Gofman, “Efﬁcient
policy analysis for administrative role based access control,” in CCS,
2007.
834834
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:04 UTC from IEEE Xplore.  Restrictions apply. 
APPENDIX A
IBE/IBS PROOF
We ﬁrst provide a formal deﬁnition of an access control
system that uses IBE, IBS, and symmetric-key cryptography,
and then show it implements RBAC0, proving Theorem 1. The
proof of Theorem 2 is analogous, replacing IBE/IBS with
public-key equivalents.
A. Our IBE/IBS System
1) Preliminaries:
• We use m as the symmetric-key size, which is also the
size of the IBE and IBS message spaces.
• For signatures, we assume that hash-and-sign is used,
where the message is hashed with a collision-resistant
hash function and then signed using IBS.
2) States:
• USERS: a list of user names
• ROLES: a list of (r, vr) pairs containing role names and
version numbers
version numbers
• FILES: a list of (f n, vf n) pairs containing ﬁle names and
• F S: the set of tuples (RK, FK, or F) stored on the ﬁlestore
3) Request:
• u, p for whether user u has permission p
4) Queries:
• RK returns whether a user is in a role. Note that we do
not verify the validity of the encrypted keys because the
encryption is performed by the trusted admin, and the
signature ensures integrity.
RK(u, r) (cid:2) ∃(c, sig).((cid:2)RK, u, (r, vr), c, sig(cid:3) ∈ F S
SU ((cid:2)RK, u, (r, vr), c(cid:3)))
∧ sig = SignIBS
Checking RK requires one instance of VerIBS.
• F K returns whether a role has a permission for the latest
version of a ﬁle. As is the case RK, we do not need to
verify the validity of the encrypted key.
F K(r,(cid:2)f n, op(cid:3)) (cid:2) ∃(c, sig).(
(cid:2)FK, r,(cid:2)f n, op(cid:3), vf n, c, SU, sig(cid:3) ∈ F
∧ sig = SignIBS
SU ((cid:2)FK, r,(cid:2)f n, op(cid:3), vr, c, SU(cid:3)))
Checking F K requires one instance of VerIBS.
• Role(r) (cid:2) ∃v.((r, v) ∈ ROLES)
• auth returns whether a user has a permission.
auth(u, p) (cid:2) ∃r.(RK(u, r) ∧ F K(r, p))
Checking auth requires two instances of VerIBS.
5) Labels: The labels used in this system are simply the
operations in Fig. 2.
835835
B. Implementing RBAC0 using IBE/IBS
Because our IBE/IBS system uses versioning to handle
revocation, assigning and then revoking a user/permission will
not result in the same state as if the user/permission were never
assigned. However, it will result in the same set of users having
access to the latest versions of the same ﬁles, so the results of
authorization requests will not be changed. We consider such
states, which are equal except for differences in versioning, to
be congruent, and represent this with the ∼
= relation. We also
say that state mappings σ and σ
(x)
for all states x.
The deﬁnition of correctness from [36] requires that α
preserves σ, which means the following: For all n ∈ N, states
x0, and labels (cid:4)1, . . . , (cid:4)n, let y0 = σ(x0), xi = next(xi−1, (cid:4)i)
for i = 1, . . . , n, and yi = terminal(yi−1, α(yi−1, (cid:4)i)) for
i = 1, . . . , n. Then α preserves σ means that yi = σ(xi) for
all i = 1, . . . , n.
(cid:2) are congruent if σ(x)
∼
= σ
(cid:2)
We cannot achieve this in our system because of version
numbers, e.g., if (cid:4)1 assigns a user to a role and then (cid:4)2 revokes
that user from the role, x2 will be equal to x0 (and thus σ(x2)
will be equal to σ(x0)), but y2 will have version numbers
∼
different from y0. Thus instead we will show that yi
= σ(xi)
for all i = 1, . . . , n, which we deﬁne as α congruence-
preserves σ.
In [27], α preserves σ is deﬁned as
(cid:3)
σ(x), α
(cid:3)
(cid:4)
x, (cid:4)
next
= terminal
(cid:5)(cid:6)
σ
(cid:5)(cid:6)
(cid:4)
σ(x), (cid:4)
(1)
for every state x and label (cid:4). This implies the deﬁnition from
[36] by the following inductive argument:
Proof: By deﬁnition, y0 = σ(x0). Now assume that yi =
σ(xi). Then by Eq. (1),
yi+1 = terminal
yi, (cid:4)i+1
(cid:4)
(cid:3)
(cid:3)
yi, α
σ(xi), α
(cid:4)
(cid:5)(cid:6)
(cid:5)(cid:6)
(cid:3)
= terminal
(cid:4)
xi, (cid:4)i+1
next
= σ
(cid:5)(cid:6)
σ(xi), (cid:4)i+1
(cid:5)
.
(cid:4)
xi+1
= σ
However, an analogous proof with congruence instead of
equality does not work because we cannot substitute σ(xi) for
yi if they are not equal. Thus
(cid:3)
(cid:4)
x, (cid:4)
next
(cid:5)(cid:6) ∼
σ
(cid:3)
(cid:5)(cid:6)
(cid:4)
σ(x), (cid:4)
= terminal
σ(x), α
(cid:2)
σ
(cid:5)(cid:6) ∼
(cid:3)
(cid:4)
next
does not imply that α congruence-preserves σ. This may occur,
for instance, if one of the IBE/IBS labels does not work
correctly when multiple versions of a ﬁle are present.
(cid:5)(cid:6)
Instead we will show that
= terminal
(2)
σ
(x), (cid:4)
(cid:2) congruent to σ.
for all states x, labels (cid:4), and state mappings σ
This proves that α congruence-preserves σ by the following
inductive argument:
∼
=
∗ be the state mapping equivalent to σ except
∼
= σ(x0). Now assume that yi
Proof: By deﬁnition, y0
σ(xi). Let σ
(cid:3)
σ
(x), α
x, (cid:4)
(cid:4)
(cid:2)
(cid:2)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:04 UTC from IEEE Xplore.  Restrictions apply. 
∗
that σ
∗
(xi)
σ
∗
(x) = σ(x) for all x (cid:15)= xi and
(cid:4)
yi+1 = terminal
(cid:5)(cid:6)
(xi) = yi. Since σ
∼
= σ(xi), σ
∗ ∼
= σ. Thus by Eq. (2),
(cid:3)
(cid:3)
yi, α
(cid:3)
σ
= terminal
(cid:4)
∼
xi, (cid:4)i+1
next
= σ
yi, (cid:4)i+1
∗
(xi), α
(cid:5)(cid:6)
∗(cid:4)
= σ
(cid:4)
σ
∗
∗
(xi), (cid:4)i+1
(cid:5)(cid:6)
(cid:5) ∼
(cid:4)
xi+1
(cid:5)
.
xi+1
= σ
If we have an implementation (cid:2)α, σ, π(cid:3) such that α
congruence-preserves σ and σ preserves π, we say that the
implementation is congruence-correct.
Theorem 3: There exists an implementation (cid:2)α, σ, π(cid:3) of
RBAC0 using IBE and IBS where:
• α congruence-preserves σ and preserves safety
• σ preserves π
• π is AC-preserving
Thus there exists a congruence-correct, AC-preserving, safe
implementation of RBAC0 using IBE and IBS.
Proof:
The notation and conventions used here are listed in
and su ←
Section IV-C2.
1) State mapping σ:
For each u ∈ U ∪ {SU}:
• Add u to USERS.
• Generate ku ← KeyGenIBE(u)
KeyGenIBS(u).
Let F S = {}.
Let ROLES and FILES be blank.
Run MSKGenIBE(m) to get IBE system parameters and
master secret key msk.
Run MSKGenIBS(m) to get IBS system parameters and
(cid:2).
master secret key msk
For each R(r) ∈ M:
• Add (r, 1) to ROLES.
• Let
(cid:3)
F S
KeyGenIBE
SU (cid:3)}.
EncIBE
SU
SignIBS
=
F S ∪ {(cid:2)RK,
SU,
msk ((r, 1)), KeyGenIBS
msk(cid:2) ((r, 1))
(cid:6)
(r, 1),
,
For each P (f n) ∈ M where f n is the name of ﬁle f:
k
SU (cid:3)}.
• Add (f n, 1) to FILES.
• Produce a symmetric key k = GenSym(m).
• Let F S = F S ∪{(cid:2)F, f n, 1, EncSym
(f ), SU, SignIBS
• Let F S = F S ∪ {(cid:2)FK, SU, (cid:2)f n, RW(cid:3), 1, EncIBE
SU, SignIBS
• Find (cid:2)RK, SU, (r, 1), c, sig(cid:3) ∈ F S.
• Let
SU (cid:3)}.
F S ∪ {(cid:2)RK,
(cid:6)
, SignIBS
For each U R(u, r) ∈ M:
(cid:3)
=
F S
DecIBE
kSU (c)
For each P A(r,(cid:2)f n, op(cid:3)):
EncIBE
SU,
u
SU (cid:3)}.
SU (k),
(r, 1),
• Find (cid:2)FK, SU,(cid:2)f n, RW(cid:3), 1, c, SU, sig(cid:3).
• Let F S = F S ∪ {(cid:2)FK,
(r, 1),
SU (cid:3)}.
EncIBE
(r,1)
(cid:6)
, SU, SignIBS
(cid:3)
DecIBE
kSU (c)
output(F S, ROLES, FILES)
(cid:2)f n, op(cid:3),
1,
836836
2) Query mapping π:
πU R(u,r)(T ) = RK(u, r) ∈ T
πP A(r,p)(T ) = F K(r, p) ∈ T
πR(r)(T ) = Role(r) ∈ T
πauth(u,p)(T ) = auth(u, p) ∈ T
The query mapping π is AC-preserving because it maps
auth(u, p) to TRUE for theory T if and only if T contains
auth(u, p).
3) σ preserves π: This means that for every RBAC0 state
x, T h(x) = π(T h(σ(x))). To prove this, we show that for
each RBAC0 state x and query q, x (cid:17) q if and only if
πq(T h(σ(x))) = TRUE.
If x
T h(x), meaning
T h(x), meaning that
We consider each type of query separately.
If x (cid:17) U R(u, r) then U R(u, r) ∈ T h(x),
• UR:
in x, (cid:2)u, r(cid:3) ∈ U R. Thus in σ(x),
meaning that
vr = 1 and ∃(c, sig).((cid:2)RK, u, (r, 1), c, sig(cid:3) ∈ F S ∧
SU ((cid:2)RK, u, (r, vr), c(cid:3))). Hence RK(u, r) ∈
sig = SignIBS
T h(σ(x)), so πU R(u,r)(T h(σ(x))) = TRUE.
If x (cid:2) U R(u, r) then U R(u, r) /∈ T h(x), mean-
in x, (cid:2)u, r(cid:3) /∈ U R. Thus in σ(x), vr =
ing that
1 and (cid:3)(c, sig).((cid:2)RK, u, (r, 1), c, sig(cid:3) ∈ F S). Hence
/∈ T h(σ(x)), so πU R(u,r)(T h(σ(x))) =
RK(u, r)
FALSE.
(cid:17)
P A(r, p) with p = (cid:2)f n, op(cid:3),
• PA:
∈
in x,
then P A(r, p)
(cid:2)r, p(cid:3) ∈ P A. Thus
in σ(x), vf n = 1 and
∃(c, sig).((cid:2)FK, r,(cid:2)f n, op(cid:3), vf n, c, SU, sig(cid:3) ∈ F S ∧
SU ((cid:2)FK, r,(cid:2)f n, op(cid:3), vf n, c, SU(cid:3))). Hence
sig = SignIBS
F K(r, p) ∈ T h(σ(x)), so πP A(r,p)(T h(σ(x))) = TRUE.
P A(r, p) with p = (cid:2)f n, op(cid:3),
(cid:2)
then
If x
/∈
x,
in
P A(r, p)
(cid:2)r, p(cid:3)
/∈ P A. Thus
in σ(x), vf n = 1 and
(cid:3)(c, sig).((cid:2)FK, r,(cid:2)f n, op(cid:3), vf n, c, SU, sig(cid:3)
F S).
Hence F K(r, p) /∈ T h(σ(x)), so πP A(r,p)(T h(σ(x))) =
FALSE.
• R: If x (cid:17) R(r) then R(r) ∈ T h(x), meaning that in x,
r ∈ R. Thus in σ(x), (r, 1) ∈ ROLES. Hence Role(r) ∈
T h(σ(x)), so πR(r)(T h(σ(x))) = TRUE.
If x (cid:2) R(r), then R(r) /∈ T h(x), meaning that in x, r /∈
R. Thus in σ(x), (cid:3)v.((r, v) ∈ ROLES). Hence Role(r) /∈
T h(σ(x)), so πR(r)(T h(σ(x))) = FALSE.
• auth: If x (cid:17) auth(u, p) then auth(u, p) ∈ T h(x), so
there exists r such that U R(u, r) ∈ T h(x) ∧ P A(r, p) ∈
T h(x). Since σ preserves π for U R and P A queries,
RK(u, r) ∈ T h(σ(x)) ∧ F K(r, p) ∈ T h(σ(x)). Hence
auth(u, p) ∈ T h(σ(x)), so πauth(u,p)(T h(σ(x))) =
TRUE.
/∈ T h(x), so
If x (cid:2) auth(u, p) then auth(u, p)
(cid:3)r.(U R(u, r) ∈ T h(x) ∧ P A(r, p) ∈ T h(x)). Since σ
preserves π for U R and P A queries, (cid:3)r.(RK(u, r) ∈
T h(σ(x))∧ F K(r, p) ∈ T h(σ(x))). Hence auth(u, p) /∈
T h(σ(x)), so πauth(u,p)(T h(σ(x))) = FALSE.
that
∈
4) Label mapping α: The label mapping α simply maps
any RBAC0 label, regardless of the state, to the IBE/IBS label
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:04 UTC from IEEE Xplore.  Restrictions apply. 
of the same name found in Fig. 2. The only difference is that
in IBE/IBS, addP takes as input a ﬁlename and ﬁle instead
of a permission and delP takes as input a ﬁlename instead of
a permission.
(cid:2)
5) α congruence-preserves σ: We consider each type of
(cid:2) be a state mapping congru-
RBAC0 label separately. We let σ
ent to σ and let x
= next(x, (cid:4)) be the result of executing label
(cid:4) in state x. While key generation and encryption algorithms
are normally randomized, for determining equality of states
we assume that they are deterministic.
= x∪U (u).
• addU: If (cid:4) is an instance of addU (u), then x
(cid:2)
(cid:5)
.
Thus
(cid:2)
(cid:2)
σ
(x
) = σ
(cid:5)
(cid:2)(cid:4)
x ∪ U (u)
(cid:5)
(cid:4)
(cid:4)
(x), addU (u)
σ
= next
(cid:2)
= σ
(cid:2)
(cid:2)
(cid:2)
(x) ∪ USERS(u)
(cid:2)
(cid:2)
(cid:2)
σ
σ
(x
) = σ
(x), α(σ
then x
= terminal
(x), (cid:4))
• delU: If (cid:4) is an instance of delU (u),
=
x \ (U (u) ∪ {U R(u, r) | U R(u, r) ∈ x}). Let T =
{(r, c, sig) | (cid:2)RK, u, (r, vr), c, sig(cid:3) ∈ F S} and T
= {r |
∃(c, sig).((r, c, sig) ∈ T )}. Let {r1, r2, . . . , rn} be the
(cid:2) in arbitrary order. Then
elements of T
(cid:5)
(cid:2)(cid:4)
x \ (U (u) ∪ {U R(u, r) | U R(u, r) ∈ x})
(cid:2)
(x) \ USERS(u)
(cid:2)
(cid:4)(cid:2)RK, u, (r, vr), c, sig(cid:3)(cid:5) | (r, c, sig) ∈ T
\ (cid:7)
= σ
(cid:4)
F S
∼
σ
= terminal
revokeU (u, r1) ◦ revokeU (u, r2)
◦ ··· ◦ revokeU (u, rn)
(cid:5)
(cid:4)
(cid:4)
(x), delU (u)
σ
= next
(cid:2)
σ
(x) \ USERS(u),
= terminal
(x), α(σ
(x), (cid:4))
(cid:5)
.
(cid:5)
(cid:2)
(cid:2)
(cid:2)
(cid:8)
• addR: If (cid:4) is an instance of addR(r), then x
(cid:2)
= x∪ R(r).
RK, SU, (r, 1),
Thus
(cid:2)
(cid:2)
σ
(x
) = σ
= σ
(cid:3)(cid:9)
(cid:5)
(cid:2)(cid:4)
x ∪ R(r)
(x) ∪ ROLES(r, 1) ∪ F S
(cid:2)
EncIBE
SU
(cid:3)
KeyGenIBE
(cid:6)
msk ((r, 1)),
, SignIBS
(cid:5)
SU
(cid:2)
(cid:4)
σ
= next
KeyGenIBS
msk(cid:2) ((r, 1))
(cid:4)
(x), addR(r)
(cid:2)
(cid:10)(cid:6)
(cid:2)
(cid:2)
σ
(x), (cid:4))
(x), α(σ
= terminal
(cid:5)
.
= x\(R(r)∪
• delR: If (cid:4) is an instance of delR(r), then x
{U R(u, r) | U R(u, r) ∈ x} ∪ {P A(r, p) | P A(r, p) ∈
x}). Let T = {(u, c, sig) | (cid:2)RK, u, (r, vr), c, sig(cid:3) ∈
F S} and F = {f n | ∃(op, vf n, cf n, sig).((cid:2)FK, (r, vr),
(cid:2)f n, op(cid:3), vf n, cf n, SU, sig(cid:3) ∈ F S)}. For each f n ∈ F ,
let Tf n = {(op
(cid:2)(cid:3), v,
cv, SU, sig(cid:3) ∈ F S}. Let {f n1, f n2, . . . , f nn} be the
elements of F in arbitrary order. Then
(cid:2)
(cid:2)(cid:4)
x \ (R(r) ∪ {U R(u, r) | U R(u, r) ∈ x}
, v, cv, sig) | (cid:2)FK, (r, vr), (cid:2)f n, op
) = σ
(x
σ
(cid:2)
(cid:2)
∪ {P A(r, p) | P A(r, p) ∈ x}(cid:5)
(cid:2)
F S
= σ
(cid:4)(cid:2)RK, u, (r, vr),
(cid:4)(cid:2)FK, (r, vr),
F S
f n ∈ F
(x) \ ROLES(r, vr) \ (cid:7)
(cid:8) \ (cid:7)
c, sig(cid:3)(cid:5) | (u, c, sig) ∈ T
(cid:2)(cid:3), v, cv, SU, sig(cid:3)(cid:5) | (cid:4)
(cid:2)f n, op
(cid:5)(cid:8)