## PostgreSQL 性能优化之 - 大锁与long sql/xact的蝴蝶效应(泛洪)  
### 作者                                             
digoal                                             
### 日期                                             
2016-03-16                                            
### 标签                                             
PostgreSQL , 锁 , 大锁 , 锁机制 , 锁等待泛洪    
----                 
## 背景        
在使用数据库时，某些特定的因素结合在一起，就可能引发蝴蝶效应。   
导致数据库性能的急剧下降。   
本文要讲的是和以下几个因素有关的：  
### 因素1   
PG的锁排队机制，即使没有获得锁，只要在锁队列中就会造成锁竞争。  
```  
session A lock1 get    
session B lock2 wait lock1 release    
session C lock3 可能和lock1, lock2 冲突    
session D lock4 可能和lock1,2,3 冲突    
```  
### 因素2   
SQL响应变慢后，服务端程序通常会增加到数据库的连接来处理拥塞的请求  
### 因素3   
数据库的性能会随着连接数增加到一个值（通常是核数的3倍）后，性能开始下降  
### 因素4   
对象锁在事务结束时释放   
例如在事务中查询表时，表的共享锁需要等到事务结束时释放。  
以上4个因素加在一起，就可能引发一次应用级别的故障。  
## 模拟   
开启lock跟踪：  
```  
log_lock_waits = on     
deadlock_timeout = 1s    
```  
创建测试表  
```  
postgres=# create table test(id int primary key, info text, crt_time timestamp);    
CREATE TABLE    
postgres=# insert into test select generate_series(1,10000000),md5(random()::text),clock_timestamp();    
INSERT 0 10000000    
```  
测试脚本  
```  
vi test1.sql    
\setrandom id 1 10000000    
update test set info=info where id=:id;    
```  
1\. pgbench1 模拟数据更新A。使用10个链接（假设正常只需要10个）   
正常的性能  
```  
pgbench -M prepared -n -r -P 1 -f ./test1.sql -c 10 -j 10 -T 10    
progress: 2.0 s, 65994.3 tps, lat 0.149 ms stddev 0.038    
progress: 3.0 s, 67706.5 tps, lat 0.145 ms stddev 0.051    
progress: 4.0 s, 72865.0 tps, lat 0.135 ms stddev 0.048    
progress: 5.0 s, 77664.2 tps, lat 0.126 ms stddev 0.032    
progress: 6.0 s, 77138.9 tps, lat 0.127 ms stddev 0.037    
progress: 7.0 s, 75941.3 tps, lat 0.129 ms stddev 0.061    
progress: 8.0 s, 77328.8 tps, lat 0.127 ms stddev 0.036    
```  
开启长时间更新请求  
```  
pgbench -M prepared -n -r -P 1 -f ./test1.sql -c 10 -j 10 -T 10000    
```  
2\. 模拟一个查询长事务，查询表A   
也可能是后台的whole vacuum prevent wrapper  
```  
postgres=# begin;    
BEGIN    
postgres=# select * from test limit 1;    
 id |               info               |          crt_time              
----+----------------------------------+----------------------------    
  1 | e86e219d51c39d16f78d77cf697395ca | 2016-03-16 16:07:49.814487    
(1 row)  
```  
暂不结束事务, 持有test表的shared lock.  
3\. 模拟一个DDL请求A  
```  
postgres=# alter table test add column c1 int;    
```  
等待test shared lock锁释放  
马上会堵塞正常的业务请求，tps降到0  
```  
progress: 53.0 s, 0.0 tps, lat -nan ms stddev -nan    
progress: 54.0 s, 0.0 tps, lat -nan ms stddev -nan    
progress: 55.0 s, 0.0 tps, lat -nan ms stddev -nan    
progress: 56.0 s, 0.0 tps, lat -nan ms stddev -nan    
progress: 57.0 s, 0.0 tps, lat -nan ms stddev -nan    
progress: 58.0 s, 0.0 tps, lat -nan ms stddev -nan    
progress: 59.0 s, 0.0 tps, lat -nan ms stddev -nan   
```  
4\. 这个时候，业务并不知道数据库堵塞了，会增加更多的连接来处理用户的请求。甚至可能把连接塞满。   
pgbench2 模拟拥塞更新A，新建500链接  
```  
pgbench -M prepared -n -r -P 1 -f ./test1.sql -c 500 -j 500 -T 10000    
```  
新增的连接会全部处于这样的状态:  
```  
digoal  25434  22068  0 16:21 ?        00:00:00 postgres: postgres postgres [local] PARSE waiting    
digoal  25437  22068  0 16:21 ?        00:00:00 postgres: postgres postgres [local] PARSE waiting    
```  
5\. 结束长事务或结束DDL请求后，锁释放。   
锁释放，大量并发的连接开始处理拥塞的请求   
此时性能下降了一半   
```  
pgbench2  
progress: 10.3 s, 270.5 tps, lat 1396.862 ms stddev 3498.526    
progress: 11.0 s, 34443.5 tps, lat 64.132 ms stddev 709.718    
progress: 12.0 s, 34986.1 tps, lat 14.229 ms stddev 18.469    
progress: 13.0 s, 36645.0 tps, lat 13.661 ms stddev 17.686    
progress: 14.0 s, 34570.1 tps, lat 14.463 ms stddev 18.716    
progress: 15.0 s, 36435.8 tps, lat 13.752 ms stddev 17.621    
progress: 16.0 s, 35513.3 tps, lat 14.052 ms stddev 18.087    
progress: 17.0 s, 35560.0 tps, lat 14.013 ms stddev 18.159    
pgbench1  
progress: 59.0 s, 688.7 tps, lat 340.857 ms stddev 2734.371    
progress: 60.0 s, 733.0 tps, lat 13.659 ms stddev 18.501    
progress: 61.0 s, 816.0 tps, lat 12.237 ms stddev 16.941    
progress: 62.0 s, 811.0 tps, lat 12.328 ms stddev 16.715    
progress: 63.0 s, 809.9 tps, lat 12.370 ms stddev 17.370    
progress: 64.0 s, 750.1 tps, lat 13.338 ms stddev 17.745    
```  
将后建立的500个连接释放后，恢复正常的性能  
```  
progress: 66.0 s, 1937.8 tps, lat 5.044 ms stddev 12.975    
progress: 67.0 s, 64995.8 tps, lat 0.157 ms stddev 0.757    
progress: 68.0 s, 73996.3 tps, lat 0.133 ms stddev 0.042    
progress: 69.0 s, 78099.4 tps, lat 0.125 ms stddev 0.038    
```  
日志   