cost estimate.
Recovering 25% of VDOs with our most efﬁcient attack
would cost less than $5000 per year—more than 100 times
less than the Vanish estimate. This illustrates the value of
attempting realistic attacks, even when models and analysis
seem to show that a system is secure.
5.2. Problems with the Vanish Design
Vanish relies on a security property that the Vuze DHT
was not designed to provide—resistance to crawling. Some-
times repurposing existing systems allows clever solutions
to security problems, but we believe it must be done with
extreme caution. Computer systems evolve to satisfy the
demands of their users and maintainers, so it is risky to rely
on them for security properties that are not important to their
primary users and maintainers. Even if the current Vuze
environment were more favorable to the security of Vanish,
the system might evolve in an unfavorable direction.
The worldwide scale of Vuze is essential to the security of
Vanish, and the defense needed by Vanish to thwart our Sybil
attack is not aligned with the priorities of Vuze’s main user
base. A large DHT with nodes run by independent people is
essential to Vanish’s guarantee that secret shares are widely
dispersed and safe from collusion. Anything less than a
world-wide DHT is unlikely to be secure for Vanish because
smaller communities are vulnerable to collusion attacks and
social engineering.
Our attacks are made easier, and Vanish suffers, because
the Vuze DHT replicates entries twenty times and actively
creates replicas periodically (and immediately to newly ar-
rived peers). These features are important for the primary
purpose of Vuze, which requires DHT entries to stay in the
DHT with high probability despite signiﬁcant churn in the
node population. Here Vuze and Vanish are working at cross
purposes. It seems unlikely that Vuze would accept changes
that signiﬁcantly reduce DHT reliability, just for the beneﬁt
of Vanish.
At a fundamental level, public DHTs of the sort used by
Vuze are not well suited for keeping secrets. Any item can
be read by anyone who knows its ID, and the DHT readily
accepts membership from diverse, untrusted peers. The jury
is still out on whether the kind of distributed storage medium
needed to make Vanish secure, useful and efﬁcient can be
designed.
5.3. Vanish and the Bounded Retrieval Model
In the Bounded Retrieval Model, ﬁrst proposed by Dziem-
bowski [17], an attacker that compromises a machine can
only communicate a limited amount of material back to itself.
Multiple recent cryptographic systems were proposed in this
framework [9, 17]. The security of systems built both in this
model and the related Bounded Storage Model [28] depend
on the ability to make accurate estimations of the attacker’s
capabilities. If such an estimation is off by a factor of 10,
this will likely be devastating to the security of the overlying
system. In contrast, traditional encryption systems provide
a super-polynomial gap between the effort required to use
the system and that needed to break it. In these systems it is
easy to build in a reasonable “safety margin” when choosing
a security parameter.
The Vanish authors, in effect, show that their system is
secure under the condition that an attacker is bounded in
the amount of information he can retrieve from the DHT
in a given amount of time. Unfortunately, their estimates
of an attacker’s capabilities were off by about two orders
of magnitude. To our knowledge, Vanish is one of the ﬁrst
systems to actually be implemented that rely on the bounded
retrieval model. Its shortcomings suggest that signiﬁcant
caution is due when building such systems in the future.
6. Countermeasures
Future versions of Vanish and Vuze could adopt various
countermeasures against crawling attacks. While we discuss
several strategies for making these attacks more expensive,
it seems difﬁcult to raise the cost enough to provide strong
resistance without sacriﬁcing other security goals, usability,
or reliability.
Raising Vanish’s key recovery threshold The key shares
that Vanish stores in the DHT are produced using a k-of-
n secret sharing scheme. By default, 7 of 10 shares are
required to reconstruct the key. One defense would be for
Vanish to use a stronger values for k and n, such as requiring
99 of 100 shares.
This approach is problematic for two reasons. First, since
a small fraction of key shares are lost from the DHT be-
fore they expire due to churn in the network, raising the
recovery threshold will make more Vanish messages self-
destruct ahead of schedule. Second, an attacker could react
by scraping the DHT more completely.
Switching Vanish to a privately hosted DHT Future
implementations of Vanish could switch from the Vuze
DHT to a privately hosted DHT. One option would be
OpenDHT [26], a DHT system that, until recently, oper-
ated on a collection of PlanetLab nodes. OpenDHT allows
anyone to store and retrieve values, but, since it is hosted on
a closed set of servers, Sybil-based crawling attacks are not
possible without insider access.
There are several problems for Vanish security using a
smaller-scale DHT, even one with special security features.
A DHT with a small user base or a single maintainer is
vulnerable to social collusion. In the case of OpenDHT, con-
vincing its single maintainer to add an anti-Vanish feature
would compromise the security of Vanish. It is also easier
to convince enough participants to subvert the security of a
system when the user base is small and drawn from a partic-
ular community (e.g., tens of academic users in the case of
OpenDHT). Lastly, a privately hosted DHT like OpenDHT
would essentially function as a trusted third party, and there
are simpler ways to implement Vanish-like behavior in ap-
plications where invoking a trusted third party is acceptable.
Adding client puzzles to Vuze Client puzzles have been
proposed as a defenses against Sybil attacks [25]. A simple
approach would be to require clients to perform an expensive
computation tied to the current date and their node ID. For
example, if Vuze required a daily computation that took one
minute on a small EC2 instance, this would impose a cost
of $0.34/year for each Sybil. To obtain 90% VDO recovery,
we need 107,000 effective Sybils (for k = 45 and n = 50),
so we would need to devote 74 EC2 instances to solving
puzzles. This would raise the cost of our attacks by about
$37,000 per year. Though this is a signiﬁcant increase, it
only impacts attackers who actually pay for CPU time—an
attacker who controlled even a small botnet could easily
perform the puzzle computations. In addition, if the puzzles
were predictable, then an attacker might use precomputation
to solve several puzzles for a certain time period. While the
attacker might not be able to sustain this attack, all VDO
created during this time period would be vulnerable.
Detecting attackers Another possible defense is to try to
detect attackers and selectively block or penalize their in-
teractions with Vuze. One approach would be to monitor
peers for deviations from the Vuze protocol that distinguish
them from legitimate clients. This is currently easy to do
for our ClearView software, which omits certain function-
ality for ease of implementation, but attackers might try to
avoid detection by responding to requests more faithfully. A
second approach would be to monitor IP addresses that host
an unusual number of Vuze clients. Instrumenting the Vuze
bootstrap node or scanning the routing tables maintained by
peers in the network would detect such IPs.
We experimented with the latter approach by building a
tool called Peruze, a routing table scanner for the Vuze DHT.
Peruze enumerates the nodes in the network by breadth-ﬁrst
search through the node ID space and iteratively dumping the
buckets in each node’s routing table. To extract the contacts
of bucket i on node N, Peruze sends N a FIND-NODE request
for N’s ID with the ith bit from the left complemented. To
avoid overloading the network, it only sends one FIND-NODE
at a time to a given node. Peruze terminates the scan when it
has sent packets at a rate less than 10% of its maximum for
30 seconds. Peruze consumes very little bandwidth because
it avoids being incorporated into other nodes’ routing tables
and ignores all messages other than replies to its FIND-NODE
requests. Complete scans of the network take under an hour.
We found that, while the majority of IP addresses were
associated with only a single node, our Sybil machines were
each associated with thousands. Even after we terminated
the attacks, these traces persisted in the routing tables for
several hours.
Peruze also detected other EC2 nodes not controlled by
us with an unusual number of entries in the routing tables, as
well as a set of 10 machines at the University of Washington
that the Vanish authors conﬁrmed are used to support the on-
line Vanish demonstration. This suggests that techniques like
Peruze can be used to detect monitoring and experimentation
on the Vuze network. Whether effective countermeasures
can be taken once attacks are detected is an open question.
Social networking Recent work has attempted to address
Sybil attacks by forming a trust-based network between
legitimate users. Systems such as SybilGuard [47], Sybil-
Limit [46], and SybilInfer [14] require that users designate
trusted peers. In general, Sybil nodes are excluded under the
assumption that they will not be able to make the same type
of connections as members of an actual social network.
Although these defenses may provide a means to detect
Sybil nodes, their effect on the performance and usability of
a large DHT such as Vuze is not clear, which could prevent
adoption. These approaches also require that users are not
willing to create trusted edges with potentially malicious
nodes. However, participants in social networks are often
willing to indicate relationships with untrusted others [39].
Restricting node IDs in Vuze The Vuze DHT implements
a basic Sybil defense by restricting how node IDs are as-
signed. The node ID is a function of the client’s IP address
and port, yielding 216 − 1 node IDs per IP. This allows us to
support 131,070 effective Sybils with only 2 IP addresses.
Future versions of the protocol may restrict the number
of IDs attainable from a single IP to 1999. (Contrary to
statements in the Vanish paper, this defense is not currently
active.) If this change were deployed, we would need 66 IP
addresses to obtain the same number of effective Sybils.
Even stronger restrictions might be possible. In our Vuze
routing table measurements, we found instances where single
IPs were supporting 30 or more clients; these appeared to
be legitimate ISPs using NAT. Vuze could limit each IP to,
say, 64 identities. We would then require 2048 IP addresses
(four class-C blocks) to do the work of 2 addresses today.
These defenses might not have a signiﬁcant effect on
the cost of our attack, since they do not actually increase
the required number of machines or the amount of trafﬁc
generated. While it is currently difﬁcult to use more than one
IP address on an EC2 instance, other ISPs may be willing
to rent out unused address blocks at low cost. Alternatively,
an attacker who controlled a small botnet would have ready
access to addresses.
Securely deploying such defenses on Vuze would take
time, due to the need to maintain backwards compatibility
with older clients. Until the defense is enforced, an attacker
could use an older version of the protocol to circumvent the
defense. The most recent Vuze source maintains backwards
compatibility to version 3.1.1.1, released more than a year
ago. Breaking such backwards compatibility would be a
signiﬁcant, undesirable change to the usability of Vuze.
Regardless of what other countermeasures might be pro-
posed, security claims for Vanish, like all systems, should
be treated with respectful skepticism. Discussion of coun-
termeasures is useful, but, as usual, it is prudent to treat a
system as insecure until its security is ﬁrmly established.
7. Related Work
Sybil attacks are a well-known problem in systems re-
quiring participation from many different users [16]. Such
attacks can compromise the correctness of systems provid-
ing online voting [24], that vote on correct solution to a
distributed computation [48], or generate reputation from
user feedback [10]. Systems like Vanish that attempt to pro-
vide privacy or anonymity through a distributed system are
similarly vulnerable to Sybil attacks. For example, a Sybil at-
tack against the Tor overlay network can subvert anonymity
guarantees [4].
Here, we survey works not mentioned in the original
Vanish paper that are indicators about the threat of Sybil at-
tacks for monitoring DHTs. Approaches for crawling DHTs
that are similar to our attacks have been applied to other
Kademlia-family networks. Other work has attempted to
enumerate the nodes in the network, both for Vuze and for
other Kademlia-style systems.
DHT enumeration and monitoring Stutzbach and Re-
jaie developed Cruiser [42] in order to enumerate nodes
on the Gnutella network. Cruiser uses a master-slave ar-
chitecture, employing multiple desktop PCs to enumerate
the network in parallel. It also has an adaptive ﬂow-control
algorithm based on CPU load in order to maximize the num-
ber of parallel connections. Stutzbach and Rejaie extended
Cruiser [43, 44] to enumerate nodes in the Kad DHT, which
is used by the popular eMule program and is also based on
Kademlia. Citing very long run times, they chose to enumer-
ate subnets based on ﬁxing preﬁx bits of the node IDs. In
addition, their kFetch [43] tool efﬁciently downloads Kad
peers’ entire routing tables. Stutzbach and Rejaie’s work
focuses on accuracy, not cost-effectiveness. In a similar vein,
Steiner et al. created Blizzard [41], a fast Kad enumerator.
Unlike Cruiser, Blizzard uses one PC, keeps all state in mem-
ory, and can enumerate all nodes in the Kad network in 8
minutes.
Falkner et al. [18] previously measured the responsive-
ness, consistency, and performance of the Vuze DHT. Their
work used tens of instances of a version of the ofﬁcial Vuze
(then Azureus) client modiﬁed to collect statistics. Crosby
and Wallach [13] also proﬁled the Vuze DHT as well as the
“Mainline” DHT shared by many other BitTorrent clients.
They too used instrumented clients to obtain their measure-
ments, but only ran 11 concurrent clients. Several of the
parameters of the Vuze DHT have since been modiﬁed; in
particular, the message timeout and the number of concurrent
messages have both been halved.