# Truffles and WebFS: A Comparative Analysis of File Systems

## 2.7 WebFS
WebFS [39, 2] is a global file system that leverages HTTP [11] as the transport protocol between clients and servers. This approach allows existing URLs to be used as file names, making them accessible through the file system.

### Authentication and Authorization
- **Authentication**: Both clients and servers are authenticated using X.509 certificates [3].
- **Authorization**: WebFS maintains an Access Control List (ACL) for each file, consisting of the X.509 certificate and permissions for each authorized user. Users can share their files with anyone who has a certificate from a trusted Certification Authority (CA). Managing the set of trusted CAs requires special privileges.
- **Authorization Hierarchy**: The authorization in WebFS is based on the hierarchy of certification authorities, which places users under the control of these CAs.

## 2.6 Truffles
Truffles [31] is a distributed file system designed to simplify and secure file sharing between users in different administrative domains. It uses the Ficus file system [15] for replication and sharing, and Privacy Enhanced Mail (PEM) as a secure transport mechanism.

### Features
- **File Sharing**: Users can share volumes (subsets of the entire file system) with minimal intervention from system administrators once the volumes have been defined.
- **Replication**: Ficus replicates volumes using an optimistic one-copy policy, allowing all systems sharing the volume to hold their own replica.
- **Collaboration Limitations**: File sharing and data transfer rely on PEM, which requires a nonempty intersection between the public key infrastructures that each user belongs to. The slow adaptation of secure HTTP limits collaboration among users.

## Summary of Surveyed File Systems
A summary of the surveyed file systems is presented in Table 1.

- **NFS and AFS**: These systems are similar, requiring system administrators to enumerate all exported file systems and machines with remote access. NFS considers all machines part of the trusted computing base, while AFS supports sharing among machines in different administrative domains.
- **SFS**: Allows free choice of authentication mechanisms but relies on local ACLs for authorization.
- **Truffles and WebFS**: Enable dynamic file sharing among users who trust the same certification authority, but sharing with users without recognized certificates is impossible.
- **Read/Write Access and Granularity**: All surveyed file systems provide read/write access and fine-grained control. However, the web, a popular medium for information sharing, offers limited support for these features.

## 3 Capability File Names
The goal of capability file names is to allow users from one or more organizations to set up ad-hoc work groups without limitations imposed by the system or the need for system administrator intervention. Each user should be able to share selected files with other group members without compromising their remaining files or the files of other users on their system.

### 3.1 Basic Capability File Names
A basic capability file name consists of two parts:
- **Client Part**: Identifies the server and includes the host name and port number.
- **Server Part**: Identifies the file and encodes the access rights, encrypted to protect it from tampering.

#### Structure
- **Client Part**: Contains a prefix ("/capafs/"), host name, and port number.
- **Server Part**: Includes the absolute path name of the file and the permissions (-rwx), encrypted with a key K.

### 3.1.1 Creation of a Capability File Name
Capability file names are created on the server using a separate program. The program takes the host name, port number, file path, and permissions, encrypts the server part with a key, and returns the capability file name as a string.

### 3.1.2 Using Capability File Names
- **Server Setup**: Each user who wishes to share files must start a server to act as a proxy for remote file operations.
- **Secure Communication**: All communication between client and server must use a secure channel, such as a fast symmetric encryption algorithm with the Diffie-Hellman key exchange [7].

### 3.1.3 Delegation of a Capability File Name
Delegation of capability file names must be secure, and the capability file name must be protected from disclosure during transit.

### 3.1.4 Persistence of a Capability File Name
Capability file names are not inherently persistent but can be stored on stable storage or used as symbolic links to make them persistent.

### 3.1.5 Revocation of a Capability File Name
To revoke capability file names, the server maintains a Capability Revocation List (CRL). Solutions include setting a timeout value in the server part or marking files with revoked capability file names.

### 3.2 Capability File Names with Server Authentication
To prevent man-in-the-middle attacks, the server's public key (SPuK) is added to the client part, and the server part is encrypted with the server's private key (SPrK). The server is authenticated by exchanging a session key encrypted with the server's public key.

### 3.3 Capability File Names with Client Authentication
The client's identity is included in the server part before the capability file name is given to the client. The client signs the capability file name with their private key, introducing accountability into the system.

---

This revised version provides a clear, coherent, and professional overview of the file systems and capability file names, ensuring that the information is well-organized and easy to understand.