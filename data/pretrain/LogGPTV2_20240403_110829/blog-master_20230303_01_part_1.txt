## DuckDB 内置 benchmark 的使用     
### 作者                                      
digoal                                      
### 日期                                      
2023-03-03                                    
### 标签                                      
PostgreSQL , PolarDB , duckdb , benchmark   
----                                      
## 背景     
如何通过duckdb 内置的benchmark, 了解duckdb在各种场景中的性能. 包括tpch, tpcds, clickhouse, imdb 等benchmark.    
1、编译duckdb 包含benchmark.  
[《Debian学习入门 - (作为服务器使用, Debian 操作系统可能是长期更好的选择?)》](../202302/20230217_02.md)    
2、了解duckdb 自带的 benchmark_runner 如何使用  
https://github.com/duckdb/duckdb/blob/master/benchmark/README.md  
```  
root@9b780f5ea2e8:~/duckdb# build/release/benchmark/benchmark_runner --help  
Benchmark to run could not be found.  
Usage: benchmark_runner  
              --list                 Show a list of all benchmarks  
              --profile              Prints the query profile information  
              --detailed-profile     Prints detailed query profile information  
              --threads=n            Sets the amount of threads to use during execution (default: hardware concurrency)  
              --out=[file]           Move benchmark output to file  
              --log=[file]           Move log output to file  
              --info                 Prints info about the benchmark  
              --query                Prints query of the benchmark  
              [name_pattern]         Run only the benchmark which names match the specified name pattern, e.g., DS.* for TPC-DS benchmarks  
```  
3、列出有哪些可选的benchmark  
```  
root@9b780f5ea2e8:~/duckdb# build/release/benchmark/benchmark_runner --list  
Append100KIntegersINSERT  
Append100KIntegersINSERTDisk  
Append100KIntegersINSERTPrimary  
Append100KIntegersINSERTAutoCommit  
Append100KIntegersPREPARED  
Append100KIntegersPREPAREDDisk  
Append100KIntegersPREPAREDPrimary  
Append100KIntegersAPPENDER  
Append100KIntegersAPPENDERDisk  
Append100KIntegersAPPENDERPrimary  
Append100KIntegersCOPY  
Append100KIntegersCOPYDisk  
Append100KIntegersCOPYPrimary  
Write100KIntegers  
Appender10MRows  
Appender10MRowsPrimaryKey  
Appender10MRowsDisk  
Appender10MRowsDiskPrimaryKey  
BulkUpdate  
BulkDelete  
CastDateToString  
.........................  
```  
4、列出某个benchmark的信息  
```  
build/release/benchmark/benchmark_runner benchmark/micro/nulls/no_nulls_addition.benchmark --info  
display_name:NULL Addition (no nulls)  
group:micro  
subgroup:nulls  
```  
5、列出某个benchmark的query  
`--query` will print the query that is run by the benchmark.  
```  
SELECT MIN(i + 1) FROM integers  
```  
6、列出某个benchmark的query profile  
`--profile` will output a query tree (pretty printed), primarily intended for interactive use.  
```  
┌─────────────────────────────────────┐  
│┌───────────────────────────────────┐│  
││    Query Profiling Information    ││  
│└───────────────────────────────────┘│  
└─────────────────────────────────────┘  
SELECT MIN(i + 1) FROM integers  
┌─────────────────────────────────────┐  
│┌───────────────────────────────────┐│  
││         Total Time: 0.176s        ││  
│└───────────────────────────────────┘│  
└─────────────────────────────────────┘  
┌───────────────────────────┐  
│    UNGROUPED_AGGREGATE    │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│          min(#0)          │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│             1             │  
│          (0.03s)          │  
└─────────────┬─────────────┘                               
┌─────────────┴─────────────┐  
│         PROJECTION        │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│          +(i, 1)          │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│         100000000         │  
│          (0.05s)          │  
└─────────────┬─────────────┘                               
┌─────────────┴─────────────┐  
│          SEQ_SCAN         │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│          integers         │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│             i             │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│         100000000         │  
│          (0.08s)          │  
└───────────────────────────┘        
```  
7、列出详细profile  
```  
--detailed-profile  
┌─────────────────────────────────────┐  
│┌───────────────────────────────────┐│  
││    Query Profiling Information    ││  
│└───────────────────────────────────┘│  
└─────────────────────────────────────┘  
SELECT MIN(i + 1) FROM integers  
┌─────────────────────────────────────┐  
│┌───────────────────────────────────┐│  
││         Total Time: 0.152s        ││  
│└───────────────────────────────────┘│  
└─────────────────────────────────────┘  
┌─────────────────────────────────────┐  
│          Optimizer: 0.0001s         │  
│┌───────────────────────────────────┐│  
││      Column Lifetime: 0.0000s     ││  
││     Common Aggregate: 0.0000s     ││  
││   Common Subexpressions: 0.0000s  ││  
││        Deliminator: 0.0000s       ││  
││    Expression Rewriter: 0.0000s   ││  
││       Filter Pullup: 0.0000s      ││  
││      Filter Pushdown: 0.0000s     ││  
││         In Clause: 0.0000s        ││  
││        Join Order: 0.0000s        ││  
││        Regex Range: 0.0000s       ││  
││      Reorder Filter: 0.0000s      ││  
││  Statistics Propagation: 0.0000s  ││  
││           Top N: 0.0000s          ││  
││      Unnest Rewriter: 0.0000s     ││  
││      Unused Columns: 0.0000s      ││  
│└───────────────────────────────────┘│  
└─────────────────────────────────────┘  
┌─────────────────────────────────────┐  
│      Physical Planner: 0.0000s      │  
│┌───────────────────────────────────┐│  
││      Column Binding: 0.0000s      ││  
││        Create Plan: 0.0000s       ││  
││       Resolve Types: 0.0000s      ││  
│└───────────────────────────────────┘│  
└─────────────────────────────────────┘  
┌─────────────────────────────────────┐  
│           Planner: 0.0004s          │  
│┌───────────────────────────────────┐│  
││          Binder: 0.0003s          ││  
│└───────────────────────────────────┘│  
└─────────────────────────────────────┘  
┌───────────────────────────┐  
│      RESULT_COLLECTOR     │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  