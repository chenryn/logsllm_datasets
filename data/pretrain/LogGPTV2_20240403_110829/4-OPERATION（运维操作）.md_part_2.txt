# 案例3：基于域名的虚拟主机

## 3.1 问题
沿用练习二，配置基于域名的虚拟主机，实现以下目标：
- 实现两个基于域名的虚拟主机，域名分别为 `www.a.com` 和 `www.b.com`
- 对域名为 `www.a.com` 的站点进行用户认证，用户名为 `tom`，密码为 `123456`

## 3.2 方案
通过修改 Nginx 配置文件，添加 `server` 容器来实现虚拟主机功能。对于需要进行用户认证的虚拟主机，添加 `auth_basic` 认证语句。

### 虚拟主机类型
虚拟主机一般可分为：
- 基于域名
- 基于 IP 地址
- 基于端口

### 步骤一：编辑配置文件 `nginx.conf`
#### 1. 修改 Nginx 服务配置，添加相关虚拟主机配置
```bash
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
```

在 `nginx.conf` 中添加如下配置：

```nginx
server {
    listen 80;
    server_name www.a.com;

    auth_basic "Input Password:";
    auth_basic_user_file "/usr/local/nginx/pass";

    location / {
        root html;
        index index.html index.htm;
    }
}

server {
    listen 80;
    server_name www.b.com;

    charset utf-8;

    location / {
        root www;
        index index.html index.htm;
    }
}
```

#### 2. 创建网站根目录及对应首页文件
```bash
[root@proxy ~]# mkdir /usr/local/nginx/www
[root@proxy ~]# echo "www" > /usr/local/nginx/www/index.html
```

#### 3. 重启 Nginx
```bash
[root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload
```
请确保 Nginx 已经启动，否则会报错。例如：
```bash
[error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)
```

#### 4. 本机域名解析测试
1. 修改客户端主机 `192.168.4.10` 的 `/etc/hosts` 文件，进行域名解析
   ```bash
   [root@client ~]# vim /etc/hosts
   192.168.4.5 www.a.com www.b.com
   ```

2. 登录客户端主机进行测试
   ```bash
   [root@client ~]# firefox http://www.a.com  # 输入密码后可以访问
   [root@client ~]# firefox http://www.b.com  # 直接访问
   ```
   注意：请先关闭真实机的 Firefox，再使用 `SSH -X` 远程连接调用虚拟机的 Firefox。

### 步骤二：扩展实验：其他类型的虚拟主机
#### 基于端口的虚拟主机（参考模板）
```nginx
server {
    listen 8080;
    server_name web1.example.com;
    ...
}

server {
    listen 8000;
    server_name web1.example.com;
    ...
}
```

#### 基于 IP 的虚拟主机（参考模板）
```nginx
server {
    listen 192.168.0.1:80;
    server_name web1.example.com;
    ...
}

server {
    listen 192.168.0.2:80;
    server_name web1.example.com;
    ...
}
```

# 案例4：SSL 虚拟主机

## 4.1 问题
沿用练习三，配置基于加密网站的虚拟主机，实现以下目标：
1. 域名为 `www.c.com`
2. 该站点通过 HTTPS 访问
3. 通过私钥和证书对该站点所有数据加密

## 4.2 方案
源码安装 Nginx 时必须使用 `--with-http_ssl_module` 参数，启用加密模块。对于需要进行 SSL 加密处理的站点，添加 SSL 相关指令（设置网站需要的私钥和证书）。

### 加密算法分类
- **对称算法**：AES、DES，主要用于单机数据加密。
- **非对称算法**：RSA、DSA，主要用于网络数据加密。公钥和私钥不可逆。
- **信息摘要**：MD5、SHA256，主要用于数据完整性校验。

### MD5 校验文件完整性
```bash
[root@proxy ~]# echo 1 > 1.txt
[root@proxy ~]# md5sum 1.txt
68b329da9893e34099c7d8ad5cb9c940 1.txt
[root@proxy ~]# mv 1.txt abc.txt
[root@proxy ~]# md5sum abc.txt
68b329da9893e34099c7d8ad5cb9c940 abc.txt  # 文件名改了内容未改，码未变
[root@proxy ~]# echo 2 > abc.txt
[root@proxy ~]# md5sum abc.txt  # 内容改了，码也变了
26ab0db90d72e28ad0ba1e22ee510510 abc.txt
```

### 步骤一：配置 SSL 虚拟主机
#### 1. 生成私钥与证书
```bash
[root@proxy ~]# cd /usr/local/nginx/conf/
[root@proxy conf]# openssl genrsa > cert.key  # 生成私钥
Generating RSA private key, 2048 bit long modulus
...
e is 65537 (0x10001)

[root@proxy conf]# openssl req -new -x509 -key cert.key > cert.pem  # 生成证书
...
Country Name (2 letter code) [XX]:cn
State or Province Name (full name) []:beijing
Locality Name (eg, city) [Default City]:bejing
Organization Name (eg, company) [Default Company Ltd]:beijing
Organizational Unit Name (eg, section) []:
Common Name (eg, your name or your server's hostname) []:6
Email Address []:PI:EMAIL
```

#### 2. 修改 Nginx 配置文件，设置加密网站的虚拟主机
```bash
[root@proxy conf]# vim /usr/local/nginx/conf/nginx.conf
server {
    listen 443 ssl;
    server_name www.c.com;

    ssl_certificate cert.pem;
    ssl_certificate_key cert.key;
    ssl_session_cache shared:SSL:1m;
    ssl_session_timeout 5m;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    location / {
        root ccc;
        index index.html index.htm;
    }
}
```

#### 3. 重启 Nginx 服务并测试
```bash
[root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload
```
请确保 Nginx 已经启动，否则会报错。例如：
```bash
[error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)
```

修改客户端主机 `192.168.4.10` 的 `/etc/hosts` 文件，进行域名解析
```bash
[root@client ~]# vim /etc/hosts
192.168.4.5 www.c.com www.a.com www.b.com
```

登录客户端主机进行测试
```bash
[root@client ~]# firefox https://www.c.com  # 信任证书后可以访问
```

# LNMP 环境部署

## 简述什么是 LNMP
LNMP 是一组通常一起使用来运行动态网站或服务器的自由软件名称首字母缩写。
- L：操作系统（Linux）
- N：网站服务软件（Nginx）
- M：数据库服务软件（MariaDB 或 MySQL）
- P：网站开发语言（PHP、Perl 或 Python）

## 案例1：部署 LNMP 环境

### 1.1 问题
- 安装部署 Nginx、MariaDB、PHP 环境
- 安装部署 Nginx、MariaDB、PHP-FPM
- 启动 Nginx、MariaDB、FPM 服务
- 测试 LNMP 是否工作正常

### 1.2 方案
在 RHEL7 系统中，源码安装 Nginx，使用 RPM 包安装 MariaDB、PHP、PHP-FPM 软件。

需要安装的软件列表：
- nginx
- mariadb、mariadb-server、mariadb-devel
- php、php-fpm、php-mysql

### 步骤一：安装软件
#### 1. 使用 yum 安装基础依赖包
```bash
[root@proxy ~]# yum -y install gcc openssl-devel pcre-devel
```

#### 2. 安装 MariaDB
```bash
[root@proxy ~]# yum -y install mariadb mariadb-server mariadb-devel
[root@proxy lnmp_soft]# systemctl start mariadb
[root@proxy lnmp_soft]# systemctl enable mariadb
[root@proxy lnmp_soft]# systemctl status mariadb
● mariadb.service - MariaDB database server
Loaded: loaded (/usr/lib/...
```

#### 3. 安装 PHP 和 PHP-FPM
```bash
[root@proxy ~]# yum -y install php php-mysql
[root@proxy ~]# tar -xf lnmbp_soft.tar.gz
[root@proxy ~]# cd lnmp_soft/
[root@proxy lnmp_soft]# yum -y install php-fpm-5.4.16-42.el7.x86_64.rpm
[root@proxy lnmp_soft]# systemctl start php-fpm
[root@proxy lnmp_soft]# systemctl enable php-fpm
```

#### 4. 创建一个 PHP 测试脚本
```bash
[root@proxy lnmp_soft]# vim test.php
<?php
$i = 33;
echo "Hello, World! The value of i is: $i";
?>
```

通过这些步骤，您可以成功部署并测试 LNMP 环境。