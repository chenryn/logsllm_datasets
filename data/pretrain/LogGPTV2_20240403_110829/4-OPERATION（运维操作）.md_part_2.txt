# 3 案例3：基于域名的虚拟主机
3.1 问题
> 沿用练习二，配置基于域名的虚拟主机，实现以下目标：
>
> 实现两个基于域名的虚拟主机，域名分别为www.a.com和www.b.com
>
> 对域名为www.a.com的站点进行用户认证，用户名称为tom，密码为123456
3.2 方案
> 修改Nginx配置文件，添加server容器实现虚拟主机功能；对于需要进行用户认证的虚拟主机添加auth认证语句。
>
> 虚拟主机一般可用分为：基于域名、基于IP和基于端口的虚拟主机
\[root@proxy html\]# vim /usr/local/nginx/conf/nginx.conf
#去掉下一个server注释
1\-\--在末行模式下用sed命令替换一个server段 \-\-\-- (:85,94s/#//)
2\-\--并配置listen servername root
3\-\--添加charset utf-8; 用于支持中文,解释ASCll码.Utf-8:万国编码.
> 85 server {
>
> 86 listen 80;
>
> 87 server_name www.b.com;
>
> 88 charset utf-8;
>
> 89 location / {
>
> 90 root www;
>
> 91 index index.html index.htm;
>
> 92 }
>
> 93 }
## 步骤一:编辑配置文件nginx.conf ,
### 1）修改Nginx服务配置，添加相关虚拟主机配置如下
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
.. ..
server {
listen 80; //端口
server_name www.a.com; //域名
> auth_basic \"Input Password:\"; //认证提示符
auth_basic_user_file \"/usr/local/nginx/pass\"; //认证密码文件
location / {
root html; //指定网站根路径
index index.html index.htm;
}
}
... ...
server {
listen 80; //端口
server_name www.b.com; //域名
location / {
root www; //指定网站根路径
index index.html index.htm;
}
}
### 2）创建网站根目录及对应首页文件
\[root@proxy \~\]# mkdir /usr/local/nginx/www
\[root@proxy \~\]# echo \"www\" \> /usr/local/nginx/www/index.html
### 3）重启nginx
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx -s reload
#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：
#\[error\] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such
file or directory)
### 4）本机域名解析添加测试
1）修改客户端主机192.168.4.10的/etc/hosts文件，进行域名解析
\[root@client \~\]# vim /etc/hosts
192.168.4.5 www.a.com www.b.com
2）登录192.168.4.10客户端主机进行测试
注意：请先关闭真实机的firefox，再SSH -X远程连接调用虚拟机的firefox。
\[root@client \~\]# firefox http://www.a.com //输入密码后可以访问
\[root@client \~\]# firefox http://www.b.com //直接访问
## 步骤二：扩展课外实验：其他类型的虚拟主机
### 基于端口的虚拟主机（参考模板）
server {
listen 8080; //端口
server_name web1.example.com; //域名
\...\...
}
server {
listen 8000; //端口
server_name web1.example.com; //域名
\...\....
}
### 基于IP的虚拟主机（参考模板）
server {
listen 192.168.0.1:80; //IP地址与端口
server_name web1.example.com; //域名
\... \...
}
server {
listen 192.168.0.2:80; //IP地址与端口
server_name web1.example.com;
\... \...
}
# 案例4：SSL虚拟主机
4.1 问题
> 沿用练习三，配置基于加密网站的虚拟主机，实现以下目标：
1.  域名为www.c.com
2.  该站点通过https访问
3.  通过私钥、证书对该站点所有数据加密
4.2 方案
> 源码安装Nginx时必须使用\--with-http_ssl_module参数，启用加密模块，对于需要进行SSL加密处理的站点添加ssl相关指令（设置网站需要的私钥和证书）。
>
> 加密算法一般分为对称算法、非对称算法、信息摘要。
>
> 对称算法有：AES、DES，主要应用在单机数据加密。
>
> 非对称算法有：RSA、DSA，主要应用在网络数据加密。公钥,私钥.不可逆
>
> 比如:将一串数字组成一个结果,反过来,将结果还原之前那串数字,很难实现
>
> 信息摘要：MD5、sha256，主要应用在数据完整性校验。
## MD5 校验文件完整行:
> \[root@proxy \~\]# echo 1\>1.txt
>
> \[root@proxy \~\]# md5sum 1.txt
>
> 68b329da9893e34099c7d8ad5cb9c940 1.txt
>
> \[root@proxy \~\]# mv 1.txt abc.txt
>
> \[root@proxy \~\]# md5sum abc.txt
>
> 68b329da9893e34099c7d8ad5cb9c940 abc.txt #文件名改了内容未改码未变
>
> \[root@proxy \~\]# echo 2\>abc.txt
>
> \[root@proxy \~\]# echo 2 \>abc.txt #更改内容
>
> \[root@proxy \~\]# md5sum abc.txt #内容改了码也变了
>
> 26ab0db90d72e28ad0ba1e22ee510510 abc.txt
## 步骤一：配置SSL虚拟主机
### 1）生成私钥与证书
证书的格式命名 .x509
\[root@proxy \~\]# cd /usr/local/nginx/conf/ #进入目录
\[root@proxy conf\]# openssl genrsa \> cert.key #生成私钥
Generating RSA private key, 2048 bit long modulus #生成了2048位秘钥
\...\...\...\...\...\...\...\...\...\...\...\...\...\...+++ \...\....+++
e is 65537 (0x10001)
\[root@proxy conf\]# openssl req -new -x509 -key cert.key \>cert.pem
#生成证书(公钥)
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a
DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter \'.\', the field will be left blank.
\-\-\-\--
Country Name (2 letter code) \[XX\]:cn
State or Province Name (full name) \[\]:beijing
Locality Name (eg, city) \[Default City\]:bejing
Organization Name (eg, company) \[Default Company Ltd\]:beijing
Organizational Unit Name (eg, section) \[\]:PI:EMAIL
Common Name (eg, your name or your server\'s hostname) \[\]:6
Email Address \[\]:PI:EMAIL
\[root@proxy conf\]#
### 2）修改Nginx配置文件，设置加密网站的虚拟主机
\[root@proxy conf\]# vim /usr/local/nginx/conf/nginx.conf #修改配置文件
server {
listen 443 ssl;
server_name www.c.com;
ssl_certificate cert.pem;
ssl_certificate_key cert.key;
ssl_session_cache shared:SSL:1m;
ssl_session_timeout 5m;
ssl_ciphers HIGH:!aNULL:!MD5;
ssl_prefer_server_ciphers on;
location / {
root ccc;
index index.html index.htm;
}
}
#批量换掉注释末行模式下 :66,79s/#//
### 3）重启nginx服务与测试
\[root@proxy \~\]# /usr/local/nginx/sbin/nginx -s reload
#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：
#\[error\] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such
file or directory)
修改客户端主机192.168.4.10的/etc/hosts文件，进行域名解析
\[root@client \~\]# vim /etc/hosts
192.168.4.5 www.c.com www.a.com www.b.com
登录192.168.4.10客户端主机进行测试
\[root@client \~\]# firefox https://www.c.com //信任证书后可以访问
# NSD Operation DAY02
案例1：部署LNMP环境
案例2：构建LNMP平台
案例3：地址重写
# 简述什么是LNMP
> LNMP是网站运行平台。
-   L：操作系统（Linux）
-   N：网站服务软件（Nginx）
-   M：数据库服务软件（MariaDB）
-   P：网站开发语言（PHP、perl、python）
多进程程序
程序:
进程:一个程序可能打开多个进程
线程:
未启动就是程序,启动后进入内存运行,变成进程.进程再开线程
一个程序开启多个进程,一个进程再开多个线程,例如一个进程使用20M内存,开了3个线程,这3个线程共享使用20M.
LNMP是指一组通常一起使用来运行动态网站或者服务器的自由软件名称首字母缩写。L指Linux，N指Nginx，M一般指MySQL，也可以指MariaDB，P一般指PHP，也可以指Perl或Python。
# 1 案例1：部署LNMP环境
1.1 问题
安装部署Nginx、MariaDB、PHP环境
安装部署Nginx、MariaDB、PHP、PHP-FPM；
启动Nginx、MariaDB、FPM服务；
并测试LNMP是否工作正常。
1.2 方案
LNMP（Linux、Nginx、MySQL、PHP）
在RHEL7系统中，源码安装Nginx，使用RPM包安装MariaDB、PHP、PHP-FPM软件。
操作过程中需要安装的软件列表如下：
-   nginx
-   mariadb、mariadb-server、mariadb-devel
-   php、php-fpm、php-mysql
备注：mariadb（数据库客户端软件）、mariadb-server（数据库服务器软件）、mariadb-devel（其他客户端软件的依赖包）、php（解释器）、php-fpm（进程管理器服务）、php-mysql（PHP的数据库扩展包）。
## 步骤一：安装软件
### 1) 使用yum安装基础依赖包
\[root@proxy \~\]# yum -y install gcc openssl-devel pcre-devel
### 2）安装MariaDB
Mariadb在新版RHEL7光盘中包含有该软件，配置yum源后可以直接使用yum安装：
\[root@proxy \~\]# yum -y install mariadb mariadb-server mariadb-devel
\[root@proxy lnmp_soft\]# systemctl start mariadb
\[root@proxy lnmp_soft\]# systemctl enable mariadb
\[root@proxy lnmp_soft\]# systemctl status mariadb
● mariadb.service - MariaDB database server
Loaded: loaded (/usr/lib/
### 3）php和php-fpm(该软件包在lnmp_soft中提供)
\[root@proxy \~\]# yum -y install php php-mysql
\[root@proxy \~\]# ls
abc.txt lnmp_soft.tar.gz nginx.sh 视频 下载
anaconda-ks.cfg nginx-1.10.3 公共 图片 音乐
initial-setup-ks.cfg nginx-1.12.2 模板 文档 桌面
\[root@proxy \~\]# tar -xf lnmbp_soft.tar.gz
\[root@proxy \~\]# cd lnmp_soft/
\[root@proxy lnmp_soft\]# ls
\....
\[root@proxy lnmp_soft\]# yum -y install
php-fpm-5.4.16-42.el7.x86_64.rpm
#php-fpm-5.4.16-42.el7.x86_64.rpm,光盘中没有在提供的lnmp_soft.tar.gz包内
\[root@proxy lnmp_soft\]# systemctl start php-fpm
\[root@proxy lnmp_soft\]# systemctl enable php-fpm
\[root@proxy lnmp_soft\]# vim test.php #创建一个脚本,测试PHP
\-\-\--脚本内容\-\-\-\-\-\-\-\-\-\--
t.php
\<?php
\$i=33;